#include "BOARD.h"
#include "GPIO.h"

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  //Configure GPIO pins : PB15 PB13
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);


  //Configure GPIO pins : PB0 PB2 PB4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

int GPIO_Init(){
	MX_GPIO_Init();
	return INIT_OK;
}

static uint8_t buttons = 0;


uint8_t GPIO_Event_Init(void){
	buttons = 0;
	return GPIO_Init();

}

Event_t GPIO_Event_Updater(void){
	Event_t update = {0, 0};
	uint8_t newButtons = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
	if(newButtons != buttons){
		buttons = newButtons;
		update.data = (uint16_t)buttons;
		update.status = 1;
	}
	return update;
}

uint8_t GPIO_Event_Handler(Event_t event){
	return 1;
}
