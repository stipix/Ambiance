
WildlifeSource.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000287cc  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  1006888c  1006888c  0002988c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  10068890  10068890  00029890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000f7c  10068894  10068894  00029894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  10069810  10069810  0002a810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002fc  20002614  10069818  0002b614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  0002c004  2**2
                  ALLOC
  8 .ram_preamble_2 00000028  20000034  20000034  0002c004  2**2
                  ALLOC
  9 .bss.blueRAM  000000d4  200000c0  200000c0  0002c004  2**2
                  ALLOC
 10 .bss          00002480  20000194  20000194  0002c004  2**2
                  ALLOC
 11 .noinit       0000223c  20002910  10069b14  0002b910  2**2
                  ALLOC
 12 .ota_region_end 00000000  10069b14  10069b14  0002b910  2**0
                  CONTENTS
 13 .heap         00000000  20004b4c  20004b4c  0002b910  2**0
                  CONTENTS
 14 .stack        00000c00  20005400  20005400  0002c400  2**0
                  ALLOC
 15 .rom_info     00000000  10000000  10000000  0002b910  2**0
                  CONTENTS
 16 .ARM.attributes 0000002c  00000000  00000000  0002b910  2**0
                  CONTENTS, READONLY
 17 .debug_info   0003383f  00000000  00000000  0002b93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00008ca7  00000000  00000000  0005f17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003968  00000000  00000000  00067e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002b2be  00000000  00000000  0006b790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00045371  00000000  00000000  00096a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000da0b0  00000000  00000000  000dbdbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      0000023b  00000000  00000000  001b5e6f  2**0
                  CONTENTS, READONLY
 24 .arm_vfe_header 00000004  00000000  00000000  001b60ac  2**2
                  CONTENTS, READONLY
 25 .debug_rnglists 00002b4d  00000000  00000000  001b60b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_frame  0000df94  00000000  00000000  001b8c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 000000f4  00000000  00000000  001c6b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <blue_unit_conversion>:
                __CODE__
                __THUMB__
                __EXPORT__ blue_unit_conversion

EXPORT_FUNC(blue_unit_conversion)
                  PUSH    {r4, lr}
100400c0:	b510      	push	{r4, lr}
                  CMP     r0, r2
100400c2:	4290      	cmp	r0, r2
                  BLS     mul32
100400c4:	d916      	bls.n	100400f4 <mul32>
                  UXTH    r2, r1
100400c6:	b28a      	uxth	r2, r1
                  LSRS    r3, r0, #16
100400c8:	0c03      	lsrs	r3, r0, #16
                  LSRS    r1, r1, #16
100400ca:	0c09      	lsrs	r1, r1, #16
                  MOV     r4, r1
100400cc:	460c      	mov	r4, r1
                  MULS    r1, r3, r1
100400ce:	4359      	muls	r1, r3
                  UXTH    r0, r0
100400d0:	b280      	uxth	r0, r0
                  MULS    r3, r2, r3
100400d2:	4353      	muls	r3, r2
                  MULS    r4, r0, r4
100400d4:	4344      	muls	r4, r0
                  MULS    r0, r2, r0
100400d6:	4350      	muls	r0, r2
                  ADDS    r3, r3, r4
100400d8:	191b      	adds	r3, r3, r4
                  LSLS    r2, r3, #16
100400da:	041a      	lsls	r2, r3, #16
                  LSRS    r3, r3, #16
100400dc:	0c1b      	lsrs	r3, r3, #16
                  ADDS    r0, r2, r0
100400de:	1810      	adds	r0, r2, r0
                  ADCS    r1, r3
100400e0:	4159      	adcs	r1, r3

                  MOVS    r2, #128
100400e2:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400e4:	0352      	lsls	r2, r2, #13
                  MOVS    r3, #0
100400e6:	2300      	movs	r3, #0
                  ADDS    r2, r2, r0
100400e8:	1812      	adds	r2, r2, r0
                  ADCS    r3, r1
100400ea:	414b      	adcs	r3, r1
                  LSRS    r2, r2, #21
100400ec:	0d52      	lsrs	r2, r2, #21
                  LSLS    r0, r3, #11
100400ee:	02d8      	lsls	r0, r3, #11
                  ORRS    r0, r2
100400f0:	4310      	orrs	r0, r2

                  POP {r4, pc}
100400f2:	bd10      	pop	{r4, pc}

100400f4 <mul32>:

                  ENDFUNC

EXPORT_FUNC(mul32)
                  MULS    r0, r1, r0
100400f4:	4348      	muls	r0, r1
                  MOVS    r2, #128
100400f6:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400f8:	0352      	lsls	r2, r2, #13
                  ADDS    r2, r2, r0
100400fa:	1812      	adds	r2, r2, r0
                  LSRS    r2, r2, #21
100400fc:	0d52      	lsrs	r2, r2, #21
                  MOV     r0, r2
100400fe:	4610      	mov	r0, r2

                  POP {r4, pc}
10040100:	bd10      	pop	{r4, pc}
10040102:	46c0      	nop			@ (mov r8, r8)

10040104 <Osal_MemCpy>:
                __CODE__
                __THUMB__
                __EXPORT__ Osal_MemCpy

EXPORT_FUNC(Osal_MemCpy)
                LSLS	R3, R1, #30
10040104:	078b      	lsls	r3, r1, #30
                BEQ	    memcpy_1
10040106:	d007      	beq.n	10040118 <memcpy_1>

10040108 <memcpy_byte>:
LABEL(memcpy_byte) /* Copy bytes until src is aligned */
                SUBS	R2, R2, #1
10040108:	3a01      	subs	r2, #1
                BCC	    memcpy_exit
1004010a:	d322      	bcc.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004010c:	780b      	ldrb	r3, [r1, #0]
      	        ADDS	R1, R1, #1
1004010e:	3101      	adds	r1, #1
      	        STRB	R3, [R0]
10040110:	7003      	strb	r3, [r0, #0]
                ADDS	R0, R0, #1
10040112:	3001      	adds	r0, #1
                LSLS	R3, R1, #30
10040114:	078b      	lsls	r3, r1, #30
                BNE	    memcpy_byte
10040116:	d1f7      	bne.n	10040108 <memcpy_byte>

10040118 <memcpy_1>:
LABEL(memcpy_1)
                LSLS	R3, R0, #30
10040118:	0783      	lsls	r3, r0, #30
                BEQ	    memcpy4
1004011a:	d030      	beq.n	1004017e <memcpy4>
                CMN	    R3, R3
1004011c:	42db      	cmn	r3, r3
                BEQ	    memcpy_7
1004011e:	d019      	beq.n	10040154 <memcpy_7>
                SUBS	R0, R0, #1
10040120:	3801      	subs	r0, #1
                SUBS	R2, R2, #4
10040122:	3a04      	subs	r2, #4
                BCC	    memcpy_3
10040124:	d308      	bcc.n	10040138 <memcpy_3>

10040126 <memcpy_2>:
LABEL(memcpy_2)  /* Load one word from src and write one byte, one half-word and another byte to dst */
                LDM	    R1!, {R3}
10040126:	c908      	ldmia	r1!, {r3}
                STRB	R3, [R0, #1]
10040128:	7043      	strb	r3, [r0, #1]
                LSRS	R3, R3, #8
1004012a:	0a1b      	lsrs	r3, r3, #8
                STRH	R3, [R0, #2]
1004012c:	8043      	strh	r3, [r0, #2]
                LSRS	R3, R3, #16
1004012e:	0c1b      	lsrs	r3, r3, #16
                STRB	R3, [R0, #4]
10040130:	7103      	strb	r3, [r0, #4]
                ADDS	R0, R0, #4
10040132:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040134:	3a04      	subs	r2, #4
                BCS	    memcpy_2
10040136:	d2f6      	bcs.n	10040126 <memcpy_2>

10040138 <memcpy_3>:
LABEL(memcpy_3)
                LSLS	R2, R2, #31
10040138:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_5
1004013a:	d307      	bcc.n	1004014c <memcpy_5>
                LDRH	R3, [R1]
1004013c:	880b      	ldrh	r3, [r1, #0]
                STRB	R3, [R0, #1]
1004013e:	7043      	strb	r3, [r0, #1]
                BEQ	    memcpy_4
10040140:	d001      	beq.n	10040146 <memcpy_4>
                LDRB	R2, [R1, #2]
10040142:	788a      	ldrb	r2, [r1, #2]
                STRB	R2, [R0, #3]
10040144:	70c2      	strb	r2, [r0, #3]

10040146 <memcpy_4>:
LABEL(memcpy_4)
                LSRS	R3, R3, #8
10040146:	0a1b      	lsrs	r3, r3, #8
                STRB	R3, [R0, #2]
10040148:	7083      	strb	r3, [r0, #2]
                BX	    LR
1004014a:	4770      	bx	lr

1004014c <memcpy_5>:
LABEL(memcpy_5)
                BEQ	    memcpy_exit
1004014c:	d001      	beq.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004014e:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0, #1]
10040150:	7043      	strb	r3, [r0, #1]

10040152 <memcpy_exit>:
LABEL(memcpy_exit)
                BX	    LR
10040152:	4770      	bx	lr

10040154 <memcpy_7>:
LABEL(memcpy_7)
                SUBS	R2, R2, #4
10040154:	3a04      	subs	r2, #4
                BCC	    memcpy_9
10040156:	d306      	bcc.n	10040166 <memcpy_9>

10040158 <memcpy_8>:
LABEL(memcpy_8)  /* Load one word from src and write half-words to dst */
                LDM	    R1!, {R3}
10040158:	c908      	ldmia	r1!, {r3}
                STRH	R3, [R0]
1004015a:	8003      	strh	r3, [r0, #0]
                LSRS	R3, R3, #16
1004015c:	0c1b      	lsrs	r3, r3, #16
                STRH	R3, [R0, #2]
1004015e:	8043      	strh	r3, [r0, #2]
                ADDS	R0, R0, #4
10040160:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040162:	3a04      	subs	r2, #4
                BCS	    memcpy_8
10040164:	d2f8      	bcs.n	10040158 <memcpy_8>

10040166 <memcpy_9>:
LABEL(memcpy_9)
                LSLS	R2, R2, #31
10040166:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_10
10040168:	d305      	bcc.n	10040176 <memcpy_10>
                LDRH	R3, [R1]
1004016a:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
1004016c:	8003      	strh	r3, [r0, #0]
                BEQ	    memcpy_11
1004016e:	d005      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1, #2]
10040170:	788b      	ldrb	r3, [r1, #2]
                STRB	R3, [R0, #2]
10040172:	7083      	strb	r3, [r0, #2]
                BX	    LR
10040174:	4770      	bx	lr

10040176 <memcpy_10>:
LABEL(memcpy_10)
                BEQ	    memcpy_11
10040176:	d001      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1]
10040178:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
1004017a:	7003      	strb	r3, [r0, #0]

1004017c <memcpy_11>:
LABEL(memcpy_11)
                BX	    LR
1004017c:	4770      	bx	lr

1004017e <memcpy4>:

LABEL(memcpy4)
                PUSH	{R4-R6}
1004017e:	b470      	push	{r4, r5, r6}
                SUBS	R2, #16
10040180:	3a10      	subs	r2, #16
                BCC	    memcpy4_2words
10040182:	d303      	bcc.n	1004018c <memcpy4_2words>

10040184 <memcpy4_4words>:
LABEL(memcpy4_4words)
                LDM 	R1!, {R3-R6}
10040184:	c978      	ldmia	r1!, {r3, r4, r5, r6}
                STM	    R0!, {R3-R6}
10040186:	c078      	stmia	r0!, {r3, r4, r5, r6}
                SUBS	R2, #16
10040188:	3a10      	subs	r2, #16
                BCS	    memcpy4_4words
1004018a:	d2fb      	bcs.n	10040184 <memcpy4_4words>

1004018c <memcpy4_2words>:
LABEL(memcpy4_2words)
                LSLS	R3, R2, #29
1004018c:	0753      	lsls	r3, r2, #29
                BCC	    memcpy4_word
1004018e:	d301      	bcc.n	10040194 <memcpy4_word>
                LDM	    R1!, {R3, R4}
10040190:	c918      	ldmia	r1!, {r3, r4}
                STM	    R0!, {R3, R4}
10040192:	c018      	stmia	r0!, {r3, r4}

10040194 <memcpy4_word>:
LABEL(memcpy4_word)
                BPL 	memcpy4_halfword
10040194:	d501      	bpl.n	1004019a <memcpy4_halfword>
                LDM	    R1!, {R3}
10040196:	c908      	ldmia	r1!, {r3}
                STM	    R0!, {R3}
10040198:	c008      	stmia	r0!, {r3}

1004019a <memcpy4_halfword>:
LABEL(memcpy4_halfword)
                LSLS	R2, R2, #31
1004019a:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy4_byte
1004019c:	d304      	bcc.n	100401a8 <memcpy4_byte>
                LDRH	R3, [R1]
1004019e:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
100401a0:	8003      	strh	r3, [r0, #0]
                ADDS	R0, R0, #2
100401a2:	3002      	adds	r0, #2
                ADDS	R1, R1, #2
100401a4:	3102      	adds	r1, #2
                CMP	    R2, #0
100401a6:	2a00      	cmp	r2, #0

100401a8 <memcpy4_byte>:
LABEL(memcpy4_byte)
                BPL	    memcpy4_exit
100401a8:	d501      	bpl.n	100401ae <memcpy4_exit>
                LDRB	R3, [R1]
100401aa:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
100401ac:	7003      	strb	r3, [r0, #0]

100401ae <memcpy4_exit>:
LABEL(memcpy4_exit)
                POP	    {R4-R6}
100401ae:	bc70      	pop	{r4, r5, r6}
                BX	    LR
100401b0:	4770      	bx	lr
100401b2:	46c0      	nop			@ (mov r8, r8)

100401b4 <CPUcontextSave>:
                __THUMB__
                __EXPORT__ CPUcontextSave
                __EXPORT__ CPUcontextRestore
                __IMPORT__ RAM_VR
EXPORT_FUNC(CPUcontextSave)
                MRS    R2, CONTROL             /* load the CONTROL register into R2 */
100401b4:	f3ef 8214 	mrs	r2, CONTROL
                MRS    R1, PSP                 /* load the process stack pointer into R1 */
100401b8:	f3ef 8109 	mrs	r1, PSP
                LDR    R0, =0
100401bc:	4815      	ldr	r0, [pc, #84]	@ (10040214 <CPUcontextRestore+0x2c>)
                MSR    CONTROL, R0             /* Switch to Main Stack Pointer */
100401be:	f380 8814 	msr	CONTROL, r0
                ISB
100401c2:	f3bf 8f6f 	isb	sy

                PUSH   { r4 - r7, lr }         /* store R4-R7 and LR (5 words) onto the stack */
100401c6:	b5f0      	push	{r4, r5, r6, r7, lr}
                MOV    R3, R8                  /* mov thread {r8 - r12} to {r3 - r7} */
100401c8:	4643      	mov	r3, r8
                MOV    R4, R9
100401ca:	464c      	mov	r4, r9
                MOV    R5, R10
100401cc:	4655      	mov	r5, sl
                MOV    R6, R11
100401ce:	465e      	mov	r6, fp
                MOV    R7, R12
100401d0:	4667      	mov	r7, ip
                PUSH   {R3-R7}                 /* store R8-R12 (5 words) onto the stack */
100401d2:	b4f8      	push	{r3, r4, r5, r6, r7}

                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
100401d4:	4c10      	ldr	r4, [pc, #64]	@ (10040218 <CPUcontextRestore+0x30>)
                MRS    R3, MSP                 /* load the stack pointer into R3 */
100401d6:	f3ef 8308 	mrs	r3, MSP
                STR    R3, [R4,#4]             /* store the MSP into RAM_VR.SavedMSP (second word of the structure) */
100401da:	6063      	str	r3, [r4, #4]

                PUSH  { r1, r2 }               /*  store PSP, CONTROL */
100401dc:	b406      	push	{r1, r2}

                DSB
100401de:	f3bf 8f4f 	dsb	sy
                WFI                            /* all saved, trigger deep sleep */
100401e2:	bf30      	wfi

                NOP                            /* NOP instructions added if an interrupt (NOT WAKEUP SOURCE) is raised */
100401e4:	46c0      	nop			@ (mov r8, r8)
                NOP                            /* the device gates/stop the CPU clock 2 system clock cycles after this WFI */
100401e6:	46c0      	nop			@ (mov r8, r8)

100401e8 <CPUcontextRestore>:
EXPORT_FUNC(CPUcontextRestore)
                /* Even if we fall through the WFI instruction, we will immediately
                 * execute a context restore and end up where we left off with no
                 * ill effects.  Normally at this point the core will either be
                 * powered off or reset (depending on the deep sleep level). */
                LDR    R4, =RAM_VR              /* load address of RAM_VR into R4 */
100401e8:	4c0b      	ldr	r4, [pc, #44]	@ (10040218 <CPUcontextRestore+0x30>)
                LDR    R4, [R4,#4]              /* load the MSP from RAM_VR.SavedMSP (second word of the structure) */
100401ea:	6864      	ldr	r4, [r4, #4]
                MSR    MSP, R4                  /* restore the MSP from R4 */
100401ec:	f384 8808 	msr	MSP, r4

                SUB    SP, #0x8
100401f0:	b082      	sub	sp, #8
                POP    { R0, R1 }               /* load PSP from the stack in R0, and  load CONTROL register from the stack in R1 */
100401f2:	bc03      	pop	{r0, r1}

                POP    { R3-R7 }                /* load R8-R12 (5 words) from the stack */
100401f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
                MOV    R8, R3                   /* mov {r3 - r7} to {r8 - r12} */
100401f6:	4698      	mov	r8, r3
                MOV    R9, R4
100401f8:	46a1      	mov	r9, r4
                MOV    R10, R5
100401fa:	46aa      	mov	sl, r5
                MOV    R11, R6
100401fc:	46b3      	mov	fp, r6
                MOV    R12, R7
100401fe:	46bc      	mov	ip, r7
                POP    { R4 - R7 }              /* load R4-R7 (4 words) from the stack */
10040200:	bcf0      	pop	{r4, r5, r6, r7}
                POP    { R2 }                   /* load LR from the stack */
10040202:	bc04      	pop	{r2}

                MSR   PSP, R0                   /* restore PSP from R0 */
10040204:	f380 8809 	msr	PSP, r0
                MSR   CONTROL , R1              /* restore CONTROL register from R1 */
10040208:	f381 8814 	msr	CONTROL, r1
                ISB
1004020c:	f3bf 8f6f 	isb	sy

                BX  R2                          /*load PC (1 words) from the stack */
10040210:	4710      	bx	r2
10040212:	46c0      	nop			@ (mov r8, r8)
                LDR    R0, =0
10040214:	00000000 	.word	0x00000000
                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
10040218:	20000004 	.word	0x20000004

1004021c <strlen>:
1004021c:	2300      	movs	r3, #0
1004021e:	5cc2      	ldrb	r2, [r0, r3]
10040220:	3301      	adds	r3, #1
10040222:	2a00      	cmp	r2, #0
10040224:	d1fb      	bne.n	1004021e <strlen+0x2>
10040226:	1e58      	subs	r0, r3, #1
10040228:	4770      	bx	lr
	...

1004022c <__gnu_thumb1_case_shi>:
1004022c:	b403      	push	{r0, r1}
1004022e:	4671      	mov	r1, lr
10040230:	0849      	lsrs	r1, r1, #1
10040232:	0040      	lsls	r0, r0, #1
10040234:	0049      	lsls	r1, r1, #1
10040236:	5e09      	ldrsh	r1, [r1, r0]
10040238:	0049      	lsls	r1, r1, #1
1004023a:	448e      	add	lr, r1
1004023c:	bc03      	pop	{r0, r1}
1004023e:	4770      	bx	lr

10040240 <__udivsi3>:
10040240:	2200      	movs	r2, #0
10040242:	0843      	lsrs	r3, r0, #1
10040244:	428b      	cmp	r3, r1
10040246:	d374      	bcc.n	10040332 <__udivsi3+0xf2>
10040248:	0903      	lsrs	r3, r0, #4
1004024a:	428b      	cmp	r3, r1
1004024c:	d35f      	bcc.n	1004030e <__udivsi3+0xce>
1004024e:	0a03      	lsrs	r3, r0, #8
10040250:	428b      	cmp	r3, r1
10040252:	d344      	bcc.n	100402de <__udivsi3+0x9e>
10040254:	0b03      	lsrs	r3, r0, #12
10040256:	428b      	cmp	r3, r1
10040258:	d328      	bcc.n	100402ac <__udivsi3+0x6c>
1004025a:	0c03      	lsrs	r3, r0, #16
1004025c:	428b      	cmp	r3, r1
1004025e:	d30d      	bcc.n	1004027c <__udivsi3+0x3c>
10040260:	22ff      	movs	r2, #255	@ 0xff
10040262:	0209      	lsls	r1, r1, #8
10040264:	ba12      	rev	r2, r2
10040266:	0c03      	lsrs	r3, r0, #16
10040268:	428b      	cmp	r3, r1
1004026a:	d302      	bcc.n	10040272 <__udivsi3+0x32>
1004026c:	1212      	asrs	r2, r2, #8
1004026e:	0209      	lsls	r1, r1, #8
10040270:	d065      	beq.n	1004033e <__udivsi3+0xfe>
10040272:	0b03      	lsrs	r3, r0, #12
10040274:	428b      	cmp	r3, r1
10040276:	d319      	bcc.n	100402ac <__udivsi3+0x6c>
10040278:	e000      	b.n	1004027c <__udivsi3+0x3c>
1004027a:	0a09      	lsrs	r1, r1, #8
1004027c:	0bc3      	lsrs	r3, r0, #15
1004027e:	428b      	cmp	r3, r1
10040280:	d301      	bcc.n	10040286 <__udivsi3+0x46>
10040282:	03cb      	lsls	r3, r1, #15
10040284:	1ac0      	subs	r0, r0, r3
10040286:	4152      	adcs	r2, r2
10040288:	0b83      	lsrs	r3, r0, #14
1004028a:	428b      	cmp	r3, r1
1004028c:	d301      	bcc.n	10040292 <__udivsi3+0x52>
1004028e:	038b      	lsls	r3, r1, #14
10040290:	1ac0      	subs	r0, r0, r3
10040292:	4152      	adcs	r2, r2
10040294:	0b43      	lsrs	r3, r0, #13
10040296:	428b      	cmp	r3, r1
10040298:	d301      	bcc.n	1004029e <__udivsi3+0x5e>
1004029a:	034b      	lsls	r3, r1, #13
1004029c:	1ac0      	subs	r0, r0, r3
1004029e:	4152      	adcs	r2, r2
100402a0:	0b03      	lsrs	r3, r0, #12
100402a2:	428b      	cmp	r3, r1
100402a4:	d301      	bcc.n	100402aa <__udivsi3+0x6a>
100402a6:	030b      	lsls	r3, r1, #12
100402a8:	1ac0      	subs	r0, r0, r3
100402aa:	4152      	adcs	r2, r2
100402ac:	0ac3      	lsrs	r3, r0, #11
100402ae:	428b      	cmp	r3, r1
100402b0:	d301      	bcc.n	100402b6 <__udivsi3+0x76>
100402b2:	02cb      	lsls	r3, r1, #11
100402b4:	1ac0      	subs	r0, r0, r3
100402b6:	4152      	adcs	r2, r2
100402b8:	0a83      	lsrs	r3, r0, #10
100402ba:	428b      	cmp	r3, r1
100402bc:	d301      	bcc.n	100402c2 <__udivsi3+0x82>
100402be:	028b      	lsls	r3, r1, #10
100402c0:	1ac0      	subs	r0, r0, r3
100402c2:	4152      	adcs	r2, r2
100402c4:	0a43      	lsrs	r3, r0, #9
100402c6:	428b      	cmp	r3, r1
100402c8:	d301      	bcc.n	100402ce <__udivsi3+0x8e>
100402ca:	024b      	lsls	r3, r1, #9
100402cc:	1ac0      	subs	r0, r0, r3
100402ce:	4152      	adcs	r2, r2
100402d0:	0a03      	lsrs	r3, r0, #8
100402d2:	428b      	cmp	r3, r1
100402d4:	d301      	bcc.n	100402da <__udivsi3+0x9a>
100402d6:	020b      	lsls	r3, r1, #8
100402d8:	1ac0      	subs	r0, r0, r3
100402da:	4152      	adcs	r2, r2
100402dc:	d2cd      	bcs.n	1004027a <__udivsi3+0x3a>
100402de:	09c3      	lsrs	r3, r0, #7
100402e0:	428b      	cmp	r3, r1
100402e2:	d301      	bcc.n	100402e8 <__udivsi3+0xa8>
100402e4:	01cb      	lsls	r3, r1, #7
100402e6:	1ac0      	subs	r0, r0, r3
100402e8:	4152      	adcs	r2, r2
100402ea:	0983      	lsrs	r3, r0, #6
100402ec:	428b      	cmp	r3, r1
100402ee:	d301      	bcc.n	100402f4 <__udivsi3+0xb4>
100402f0:	018b      	lsls	r3, r1, #6
100402f2:	1ac0      	subs	r0, r0, r3
100402f4:	4152      	adcs	r2, r2
100402f6:	0943      	lsrs	r3, r0, #5
100402f8:	428b      	cmp	r3, r1
100402fa:	d301      	bcc.n	10040300 <__udivsi3+0xc0>
100402fc:	014b      	lsls	r3, r1, #5
100402fe:	1ac0      	subs	r0, r0, r3
10040300:	4152      	adcs	r2, r2
10040302:	0903      	lsrs	r3, r0, #4
10040304:	428b      	cmp	r3, r1
10040306:	d301      	bcc.n	1004030c <__udivsi3+0xcc>
10040308:	010b      	lsls	r3, r1, #4
1004030a:	1ac0      	subs	r0, r0, r3
1004030c:	4152      	adcs	r2, r2
1004030e:	08c3      	lsrs	r3, r0, #3
10040310:	428b      	cmp	r3, r1
10040312:	d301      	bcc.n	10040318 <__udivsi3+0xd8>
10040314:	00cb      	lsls	r3, r1, #3
10040316:	1ac0      	subs	r0, r0, r3
10040318:	4152      	adcs	r2, r2
1004031a:	0883      	lsrs	r3, r0, #2
1004031c:	428b      	cmp	r3, r1
1004031e:	d301      	bcc.n	10040324 <__udivsi3+0xe4>
10040320:	008b      	lsls	r3, r1, #2
10040322:	1ac0      	subs	r0, r0, r3
10040324:	4152      	adcs	r2, r2
10040326:	0843      	lsrs	r3, r0, #1
10040328:	428b      	cmp	r3, r1
1004032a:	d301      	bcc.n	10040330 <__udivsi3+0xf0>
1004032c:	004b      	lsls	r3, r1, #1
1004032e:	1ac0      	subs	r0, r0, r3
10040330:	4152      	adcs	r2, r2
10040332:	1a41      	subs	r1, r0, r1
10040334:	d200      	bcs.n	10040338 <__udivsi3+0xf8>
10040336:	4601      	mov	r1, r0
10040338:	4152      	adcs	r2, r2
1004033a:	4610      	mov	r0, r2
1004033c:	4770      	bx	lr
1004033e:	e7ff      	b.n	10040340 <__udivsi3+0x100>
10040340:	b501      	push	{r0, lr}
10040342:	2000      	movs	r0, #0
10040344:	f000 f8f0 	bl	10040528 <__aeabi_idiv0>
10040348:	bd02      	pop	{r1, pc}
1004034a:	46c0      	nop			@ (mov r8, r8)

1004034c <__aeabi_uidivmod>:
1004034c:	2900      	cmp	r1, #0
1004034e:	d0f7      	beq.n	10040340 <__udivsi3+0x100>
10040350:	e776      	b.n	10040240 <__udivsi3>
10040352:	4770      	bx	lr

10040354 <__divsi3>:
10040354:	4603      	mov	r3, r0
10040356:	430b      	orrs	r3, r1
10040358:	d47f      	bmi.n	1004045a <__divsi3+0x106>
1004035a:	2200      	movs	r2, #0
1004035c:	0843      	lsrs	r3, r0, #1
1004035e:	428b      	cmp	r3, r1
10040360:	d374      	bcc.n	1004044c <__divsi3+0xf8>
10040362:	0903      	lsrs	r3, r0, #4
10040364:	428b      	cmp	r3, r1
10040366:	d35f      	bcc.n	10040428 <__divsi3+0xd4>
10040368:	0a03      	lsrs	r3, r0, #8
1004036a:	428b      	cmp	r3, r1
1004036c:	d344      	bcc.n	100403f8 <__divsi3+0xa4>
1004036e:	0b03      	lsrs	r3, r0, #12
10040370:	428b      	cmp	r3, r1
10040372:	d328      	bcc.n	100403c6 <__divsi3+0x72>
10040374:	0c03      	lsrs	r3, r0, #16
10040376:	428b      	cmp	r3, r1
10040378:	d30d      	bcc.n	10040396 <__divsi3+0x42>
1004037a:	22ff      	movs	r2, #255	@ 0xff
1004037c:	0209      	lsls	r1, r1, #8
1004037e:	ba12      	rev	r2, r2
10040380:	0c03      	lsrs	r3, r0, #16
10040382:	428b      	cmp	r3, r1
10040384:	d302      	bcc.n	1004038c <__divsi3+0x38>
10040386:	1212      	asrs	r2, r2, #8
10040388:	0209      	lsls	r1, r1, #8
1004038a:	d065      	beq.n	10040458 <__divsi3+0x104>
1004038c:	0b03      	lsrs	r3, r0, #12
1004038e:	428b      	cmp	r3, r1
10040390:	d319      	bcc.n	100403c6 <__divsi3+0x72>
10040392:	e000      	b.n	10040396 <__divsi3+0x42>
10040394:	0a09      	lsrs	r1, r1, #8
10040396:	0bc3      	lsrs	r3, r0, #15
10040398:	428b      	cmp	r3, r1
1004039a:	d301      	bcc.n	100403a0 <__divsi3+0x4c>
1004039c:	03cb      	lsls	r3, r1, #15
1004039e:	1ac0      	subs	r0, r0, r3
100403a0:	4152      	adcs	r2, r2
100403a2:	0b83      	lsrs	r3, r0, #14
100403a4:	428b      	cmp	r3, r1
100403a6:	d301      	bcc.n	100403ac <__divsi3+0x58>
100403a8:	038b      	lsls	r3, r1, #14
100403aa:	1ac0      	subs	r0, r0, r3
100403ac:	4152      	adcs	r2, r2
100403ae:	0b43      	lsrs	r3, r0, #13
100403b0:	428b      	cmp	r3, r1
100403b2:	d301      	bcc.n	100403b8 <__divsi3+0x64>
100403b4:	034b      	lsls	r3, r1, #13
100403b6:	1ac0      	subs	r0, r0, r3
100403b8:	4152      	adcs	r2, r2
100403ba:	0b03      	lsrs	r3, r0, #12
100403bc:	428b      	cmp	r3, r1
100403be:	d301      	bcc.n	100403c4 <__divsi3+0x70>
100403c0:	030b      	lsls	r3, r1, #12
100403c2:	1ac0      	subs	r0, r0, r3
100403c4:	4152      	adcs	r2, r2
100403c6:	0ac3      	lsrs	r3, r0, #11
100403c8:	428b      	cmp	r3, r1
100403ca:	d301      	bcc.n	100403d0 <__divsi3+0x7c>
100403cc:	02cb      	lsls	r3, r1, #11
100403ce:	1ac0      	subs	r0, r0, r3
100403d0:	4152      	adcs	r2, r2
100403d2:	0a83      	lsrs	r3, r0, #10
100403d4:	428b      	cmp	r3, r1
100403d6:	d301      	bcc.n	100403dc <__divsi3+0x88>
100403d8:	028b      	lsls	r3, r1, #10
100403da:	1ac0      	subs	r0, r0, r3
100403dc:	4152      	adcs	r2, r2
100403de:	0a43      	lsrs	r3, r0, #9
100403e0:	428b      	cmp	r3, r1
100403e2:	d301      	bcc.n	100403e8 <__divsi3+0x94>
100403e4:	024b      	lsls	r3, r1, #9
100403e6:	1ac0      	subs	r0, r0, r3
100403e8:	4152      	adcs	r2, r2
100403ea:	0a03      	lsrs	r3, r0, #8
100403ec:	428b      	cmp	r3, r1
100403ee:	d301      	bcc.n	100403f4 <__divsi3+0xa0>
100403f0:	020b      	lsls	r3, r1, #8
100403f2:	1ac0      	subs	r0, r0, r3
100403f4:	4152      	adcs	r2, r2
100403f6:	d2cd      	bcs.n	10040394 <__divsi3+0x40>
100403f8:	09c3      	lsrs	r3, r0, #7
100403fa:	428b      	cmp	r3, r1
100403fc:	d301      	bcc.n	10040402 <__divsi3+0xae>
100403fe:	01cb      	lsls	r3, r1, #7
10040400:	1ac0      	subs	r0, r0, r3
10040402:	4152      	adcs	r2, r2
10040404:	0983      	lsrs	r3, r0, #6
10040406:	428b      	cmp	r3, r1
10040408:	d301      	bcc.n	1004040e <__divsi3+0xba>
1004040a:	018b      	lsls	r3, r1, #6
1004040c:	1ac0      	subs	r0, r0, r3
1004040e:	4152      	adcs	r2, r2
10040410:	0943      	lsrs	r3, r0, #5
10040412:	428b      	cmp	r3, r1
10040414:	d301      	bcc.n	1004041a <__divsi3+0xc6>
10040416:	014b      	lsls	r3, r1, #5
10040418:	1ac0      	subs	r0, r0, r3
1004041a:	4152      	adcs	r2, r2
1004041c:	0903      	lsrs	r3, r0, #4
1004041e:	428b      	cmp	r3, r1
10040420:	d301      	bcc.n	10040426 <__divsi3+0xd2>
10040422:	010b      	lsls	r3, r1, #4
10040424:	1ac0      	subs	r0, r0, r3
10040426:	4152      	adcs	r2, r2
10040428:	08c3      	lsrs	r3, r0, #3
1004042a:	428b      	cmp	r3, r1
1004042c:	d301      	bcc.n	10040432 <__divsi3+0xde>
1004042e:	00cb      	lsls	r3, r1, #3
10040430:	1ac0      	subs	r0, r0, r3
10040432:	4152      	adcs	r2, r2
10040434:	0883      	lsrs	r3, r0, #2
10040436:	428b      	cmp	r3, r1
10040438:	d301      	bcc.n	1004043e <__divsi3+0xea>
1004043a:	008b      	lsls	r3, r1, #2
1004043c:	1ac0      	subs	r0, r0, r3
1004043e:	4152      	adcs	r2, r2
10040440:	0843      	lsrs	r3, r0, #1
10040442:	428b      	cmp	r3, r1
10040444:	d301      	bcc.n	1004044a <__divsi3+0xf6>
10040446:	004b      	lsls	r3, r1, #1
10040448:	1ac0      	subs	r0, r0, r3
1004044a:	4152      	adcs	r2, r2
1004044c:	1a41      	subs	r1, r0, r1
1004044e:	d200      	bcs.n	10040452 <__divsi3+0xfe>
10040450:	4601      	mov	r1, r0
10040452:	4152      	adcs	r2, r2
10040454:	4610      	mov	r0, r2
10040456:	4770      	bx	lr
10040458:	e05d      	b.n	10040516 <__divsi3+0x1c2>
1004045a:	0fca      	lsrs	r2, r1, #31
1004045c:	d000      	beq.n	10040460 <__divsi3+0x10c>
1004045e:	4249      	negs	r1, r1
10040460:	1003      	asrs	r3, r0, #32
10040462:	d300      	bcc.n	10040466 <__divsi3+0x112>
10040464:	4240      	negs	r0, r0
10040466:	4053      	eors	r3, r2
10040468:	2200      	movs	r2, #0
1004046a:	469c      	mov	ip, r3
1004046c:	0903      	lsrs	r3, r0, #4
1004046e:	428b      	cmp	r3, r1
10040470:	d32d      	bcc.n	100404ce <__divsi3+0x17a>
10040472:	0a03      	lsrs	r3, r0, #8
10040474:	428b      	cmp	r3, r1
10040476:	d312      	bcc.n	1004049e <__divsi3+0x14a>
10040478:	22fc      	movs	r2, #252	@ 0xfc
1004047a:	0189      	lsls	r1, r1, #6
1004047c:	ba12      	rev	r2, r2
1004047e:	0a03      	lsrs	r3, r0, #8
10040480:	428b      	cmp	r3, r1
10040482:	d30c      	bcc.n	1004049e <__divsi3+0x14a>
10040484:	0189      	lsls	r1, r1, #6
10040486:	1192      	asrs	r2, r2, #6
10040488:	428b      	cmp	r3, r1
1004048a:	d308      	bcc.n	1004049e <__divsi3+0x14a>
1004048c:	0189      	lsls	r1, r1, #6
1004048e:	1192      	asrs	r2, r2, #6
10040490:	428b      	cmp	r3, r1
10040492:	d304      	bcc.n	1004049e <__divsi3+0x14a>
10040494:	0189      	lsls	r1, r1, #6
10040496:	d03a      	beq.n	1004050e <__divsi3+0x1ba>
10040498:	1192      	asrs	r2, r2, #6
1004049a:	e000      	b.n	1004049e <__divsi3+0x14a>
1004049c:	0989      	lsrs	r1, r1, #6
1004049e:	09c3      	lsrs	r3, r0, #7
100404a0:	428b      	cmp	r3, r1
100404a2:	d301      	bcc.n	100404a8 <__divsi3+0x154>
100404a4:	01cb      	lsls	r3, r1, #7
100404a6:	1ac0      	subs	r0, r0, r3
100404a8:	4152      	adcs	r2, r2
100404aa:	0983      	lsrs	r3, r0, #6
100404ac:	428b      	cmp	r3, r1
100404ae:	d301      	bcc.n	100404b4 <__divsi3+0x160>
100404b0:	018b      	lsls	r3, r1, #6
100404b2:	1ac0      	subs	r0, r0, r3
100404b4:	4152      	adcs	r2, r2
100404b6:	0943      	lsrs	r3, r0, #5
100404b8:	428b      	cmp	r3, r1
100404ba:	d301      	bcc.n	100404c0 <__divsi3+0x16c>
100404bc:	014b      	lsls	r3, r1, #5
100404be:	1ac0      	subs	r0, r0, r3
100404c0:	4152      	adcs	r2, r2
100404c2:	0903      	lsrs	r3, r0, #4
100404c4:	428b      	cmp	r3, r1
100404c6:	d301      	bcc.n	100404cc <__divsi3+0x178>
100404c8:	010b      	lsls	r3, r1, #4
100404ca:	1ac0      	subs	r0, r0, r3
100404cc:	4152      	adcs	r2, r2
100404ce:	08c3      	lsrs	r3, r0, #3
100404d0:	428b      	cmp	r3, r1
100404d2:	d301      	bcc.n	100404d8 <__divsi3+0x184>
100404d4:	00cb      	lsls	r3, r1, #3
100404d6:	1ac0      	subs	r0, r0, r3
100404d8:	4152      	adcs	r2, r2
100404da:	0883      	lsrs	r3, r0, #2
100404dc:	428b      	cmp	r3, r1
100404de:	d301      	bcc.n	100404e4 <__divsi3+0x190>
100404e0:	008b      	lsls	r3, r1, #2
100404e2:	1ac0      	subs	r0, r0, r3
100404e4:	4152      	adcs	r2, r2
100404e6:	d2d9      	bcs.n	1004049c <__divsi3+0x148>
100404e8:	0843      	lsrs	r3, r0, #1
100404ea:	428b      	cmp	r3, r1
100404ec:	d301      	bcc.n	100404f2 <__divsi3+0x19e>
100404ee:	004b      	lsls	r3, r1, #1
100404f0:	1ac0      	subs	r0, r0, r3
100404f2:	4152      	adcs	r2, r2
100404f4:	1a41      	subs	r1, r0, r1
100404f6:	d200      	bcs.n	100404fa <__divsi3+0x1a6>
100404f8:	4601      	mov	r1, r0
100404fa:	4663      	mov	r3, ip
100404fc:	4152      	adcs	r2, r2
100404fe:	105b      	asrs	r3, r3, #1
10040500:	4610      	mov	r0, r2
10040502:	d301      	bcc.n	10040508 <__divsi3+0x1b4>
10040504:	4240      	negs	r0, r0
10040506:	2b00      	cmp	r3, #0
10040508:	d500      	bpl.n	1004050c <__divsi3+0x1b8>
1004050a:	4249      	negs	r1, r1
1004050c:	4770      	bx	lr
1004050e:	4663      	mov	r3, ip
10040510:	105b      	asrs	r3, r3, #1
10040512:	d300      	bcc.n	10040516 <__divsi3+0x1c2>
10040514:	4240      	negs	r0, r0
10040516:	b501      	push	{r0, lr}
10040518:	2000      	movs	r0, #0
1004051a:	f000 f805 	bl	10040528 <__aeabi_idiv0>
1004051e:	bd02      	pop	{r1, pc}

10040520 <__aeabi_idivmod>:
10040520:	2900      	cmp	r1, #0
10040522:	d0f8      	beq.n	10040516 <__divsi3+0x1c2>
10040524:	e716      	b.n	10040354 <__divsi3>
10040526:	4770      	bx	lr

10040528 <__aeabi_idiv0>:
10040528:	4770      	bx	lr
1004052a:	46c0      	nop			@ (mov r8, r8)

1004052c <__aeabi_llsl>:
1004052c:	4091      	lsls	r1, r2
1004052e:	0003      	movs	r3, r0
10040530:	4090      	lsls	r0, r2
10040532:	469c      	mov	ip, r3
10040534:	3a20      	subs	r2, #32
10040536:	4093      	lsls	r3, r2
10040538:	4319      	orrs	r1, r3
1004053a:	4252      	negs	r2, r2
1004053c:	4663      	mov	r3, ip
1004053e:	40d3      	lsrs	r3, r2
10040540:	4319      	orrs	r1, r3
10040542:	4770      	bx	lr

10040544 <__clzsi2>:
10040544:	211c      	movs	r1, #28
10040546:	2301      	movs	r3, #1
10040548:	041b      	lsls	r3, r3, #16
1004054a:	4298      	cmp	r0, r3
1004054c:	d301      	bcc.n	10040552 <__clzsi2+0xe>
1004054e:	0c00      	lsrs	r0, r0, #16
10040550:	3910      	subs	r1, #16
10040552:	0a1b      	lsrs	r3, r3, #8
10040554:	4298      	cmp	r0, r3
10040556:	d301      	bcc.n	1004055c <__clzsi2+0x18>
10040558:	0a00      	lsrs	r0, r0, #8
1004055a:	3908      	subs	r1, #8
1004055c:	091b      	lsrs	r3, r3, #4
1004055e:	4298      	cmp	r0, r3
10040560:	d301      	bcc.n	10040566 <__clzsi2+0x22>
10040562:	0900      	lsrs	r0, r0, #4
10040564:	3904      	subs	r1, #4
10040566:	a202      	add	r2, pc, #8	@ (adr r2, 10040570 <__clzsi2+0x2c>)
10040568:	5c10      	ldrb	r0, [r2, r0]
1004056a:	1840      	adds	r0, r0, r1
1004056c:	4770      	bx	lr
1004056e:	46c0      	nop			@ (mov r8, r8)
10040570:	02020304 	.word	0x02020304
10040574:	01010101 	.word	0x01010101
	...

10040580 <__aeabi_uldivmod>:
10040580:	2b00      	cmp	r3, #0
10040582:	d111      	bne.n	100405a8 <__aeabi_uldivmod+0x28>
10040584:	2a00      	cmp	r2, #0
10040586:	d10f      	bne.n	100405a8 <__aeabi_uldivmod+0x28>
10040588:	2900      	cmp	r1, #0
1004058a:	d100      	bne.n	1004058e <__aeabi_uldivmod+0xe>
1004058c:	2800      	cmp	r0, #0
1004058e:	d002      	beq.n	10040596 <__aeabi_uldivmod+0x16>
10040590:	2100      	movs	r1, #0
10040592:	43c9      	mvns	r1, r1
10040594:	0008      	movs	r0, r1
10040596:	b407      	push	{r0, r1, r2}
10040598:	4802      	ldr	r0, [pc, #8]	@ (100405a4 <__aeabi_uldivmod+0x24>)
1004059a:	a102      	add	r1, pc, #8	@ (adr r1, 100405a4 <__aeabi_uldivmod+0x24>)
1004059c:	1840      	adds	r0, r0, r1
1004059e:	9002      	str	r0, [sp, #8]
100405a0:	bd03      	pop	{r0, r1, pc}
100405a2:	46c0      	nop			@ (mov r8, r8)
100405a4:	ffffff85 	.word	0xffffff85
100405a8:	b403      	push	{r0, r1}
100405aa:	4668      	mov	r0, sp
100405ac:	b501      	push	{r0, lr}
100405ae:	9802      	ldr	r0, [sp, #8]
100405b0:	f000 f852 	bl	10040658 <__udivmoddi4>
100405b4:	9b01      	ldr	r3, [sp, #4]
100405b6:	469e      	mov	lr, r3
100405b8:	b002      	add	sp, #8
100405ba:	bc0c      	pop	{r2, r3}
100405bc:	4770      	bx	lr
100405be:	46c0      	nop			@ (mov r8, r8)

100405c0 <__aeabi_lmul>:
100405c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100405c2:	46ce      	mov	lr, r9
100405c4:	4699      	mov	r9, r3
100405c6:	0c03      	lsrs	r3, r0, #16
100405c8:	469c      	mov	ip, r3
100405ca:	0413      	lsls	r3, r2, #16
100405cc:	4647      	mov	r7, r8
100405ce:	0c1b      	lsrs	r3, r3, #16
100405d0:	001d      	movs	r5, r3
100405d2:	000e      	movs	r6, r1
100405d4:	4661      	mov	r1, ip
100405d6:	0404      	lsls	r4, r0, #16
100405d8:	0c24      	lsrs	r4, r4, #16
100405da:	b580      	push	{r7, lr}
100405dc:	0007      	movs	r7, r0
100405de:	0c10      	lsrs	r0, r2, #16
100405e0:	434b      	muls	r3, r1
100405e2:	4365      	muls	r5, r4
100405e4:	4341      	muls	r1, r0
100405e6:	4360      	muls	r0, r4
100405e8:	0c2c      	lsrs	r4, r5, #16
100405ea:	18c0      	adds	r0, r0, r3
100405ec:	1824      	adds	r4, r4, r0
100405ee:	468c      	mov	ip, r1
100405f0:	42a3      	cmp	r3, r4
100405f2:	d903      	bls.n	100405fc <__aeabi_lmul+0x3c>
100405f4:	2380      	movs	r3, #128	@ 0x80
100405f6:	025b      	lsls	r3, r3, #9
100405f8:	4698      	mov	r8, r3
100405fa:	44c4      	add	ip, r8
100405fc:	4649      	mov	r1, r9
100405fe:	4379      	muls	r1, r7
10040600:	4356      	muls	r6, r2
10040602:	0c23      	lsrs	r3, r4, #16
10040604:	042d      	lsls	r5, r5, #16
10040606:	0c2d      	lsrs	r5, r5, #16
10040608:	1989      	adds	r1, r1, r6
1004060a:	4463      	add	r3, ip
1004060c:	0424      	lsls	r4, r4, #16
1004060e:	1960      	adds	r0, r4, r5
10040610:	18c9      	adds	r1, r1, r3
10040612:	bcc0      	pop	{r6, r7}
10040614:	46b9      	mov	r9, r7
10040616:	46b0      	mov	r8, r6
10040618:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004061a:	46c0      	nop			@ (mov r8, r8)

1004061c <__aeabi_d2uiz>:
1004061c:	b570      	push	{r4, r5, r6, lr}
1004061e:	2200      	movs	r2, #0
10040620:	4b0c      	ldr	r3, [pc, #48]	@ (10040654 <__aeabi_d2uiz+0x38>)
10040622:	0004      	movs	r4, r0
10040624:	000d      	movs	r5, r1
10040626:	f001 f895 	bl	10041754 <__aeabi_dcmpge>
1004062a:	2800      	cmp	r0, #0
1004062c:	d104      	bne.n	10040638 <__aeabi_d2uiz+0x1c>
1004062e:	0020      	movs	r0, r4
10040630:	0029      	movs	r1, r5
10040632:	f000 ffcd 	bl	100415d0 <__aeabi_d2iz>
10040636:	bd70      	pop	{r4, r5, r6, pc}
10040638:	4b06      	ldr	r3, [pc, #24]	@ (10040654 <__aeabi_d2uiz+0x38>)
1004063a:	2200      	movs	r2, #0
1004063c:	0020      	movs	r0, r4
1004063e:	0029      	movs	r1, r5
10040640:	f000 fbbc 	bl	10040dbc <__aeabi_dsub>
10040644:	f000 ffc4 	bl	100415d0 <__aeabi_d2iz>
10040648:	2380      	movs	r3, #128	@ 0x80
1004064a:	061b      	lsls	r3, r3, #24
1004064c:	469c      	mov	ip, r3
1004064e:	4460      	add	r0, ip
10040650:	e7f1      	b.n	10040636 <__aeabi_d2uiz+0x1a>
10040652:	46c0      	nop			@ (mov r8, r8)
10040654:	41e00000 	.word	0x41e00000

10040658 <__udivmoddi4>:
10040658:	b5f0      	push	{r4, r5, r6, r7, lr}
1004065a:	4657      	mov	r7, sl
1004065c:	464e      	mov	r6, r9
1004065e:	4645      	mov	r5, r8
10040660:	46de      	mov	lr, fp
10040662:	b5e0      	push	{r5, r6, r7, lr}
10040664:	0004      	movs	r4, r0
10040666:	000d      	movs	r5, r1
10040668:	4692      	mov	sl, r2
1004066a:	4699      	mov	r9, r3
1004066c:	b083      	sub	sp, #12
1004066e:	428b      	cmp	r3, r1
10040670:	d830      	bhi.n	100406d4 <__udivmoddi4+0x7c>
10040672:	d02d      	beq.n	100406d0 <__udivmoddi4+0x78>
10040674:	4649      	mov	r1, r9
10040676:	4650      	mov	r0, sl
10040678:	f001 f876 	bl	10041768 <__clzdi2>
1004067c:	0029      	movs	r1, r5
1004067e:	0006      	movs	r6, r0
10040680:	0020      	movs	r0, r4
10040682:	f001 f871 	bl	10041768 <__clzdi2>
10040686:	1a33      	subs	r3, r6, r0
10040688:	4698      	mov	r8, r3
1004068a:	3b20      	subs	r3, #32
1004068c:	d434      	bmi.n	100406f8 <__udivmoddi4+0xa0>
1004068e:	469b      	mov	fp, r3
10040690:	4653      	mov	r3, sl
10040692:	465a      	mov	r2, fp
10040694:	4093      	lsls	r3, r2
10040696:	4642      	mov	r2, r8
10040698:	001f      	movs	r7, r3
1004069a:	4653      	mov	r3, sl
1004069c:	4093      	lsls	r3, r2
1004069e:	001e      	movs	r6, r3
100406a0:	42af      	cmp	r7, r5
100406a2:	d83b      	bhi.n	1004071c <__udivmoddi4+0xc4>
100406a4:	42af      	cmp	r7, r5
100406a6:	d100      	bne.n	100406aa <__udivmoddi4+0x52>
100406a8:	e079      	b.n	1004079e <__udivmoddi4+0x146>
100406aa:	465b      	mov	r3, fp
100406ac:	1ba4      	subs	r4, r4, r6
100406ae:	41bd      	sbcs	r5, r7
100406b0:	2b00      	cmp	r3, #0
100406b2:	da00      	bge.n	100406b6 <__udivmoddi4+0x5e>
100406b4:	e076      	b.n	100407a4 <__udivmoddi4+0x14c>
100406b6:	2200      	movs	r2, #0
100406b8:	2300      	movs	r3, #0
100406ba:	9200      	str	r2, [sp, #0]
100406bc:	9301      	str	r3, [sp, #4]
100406be:	2301      	movs	r3, #1
100406c0:	465a      	mov	r2, fp
100406c2:	4093      	lsls	r3, r2
100406c4:	9301      	str	r3, [sp, #4]
100406c6:	2301      	movs	r3, #1
100406c8:	4642      	mov	r2, r8
100406ca:	4093      	lsls	r3, r2
100406cc:	9300      	str	r3, [sp, #0]
100406ce:	e029      	b.n	10040724 <__udivmoddi4+0xcc>
100406d0:	4282      	cmp	r2, r0
100406d2:	d9cf      	bls.n	10040674 <__udivmoddi4+0x1c>
100406d4:	2200      	movs	r2, #0
100406d6:	2300      	movs	r3, #0
100406d8:	9200      	str	r2, [sp, #0]
100406da:	9301      	str	r3, [sp, #4]
100406dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100406de:	2b00      	cmp	r3, #0
100406e0:	d001      	beq.n	100406e6 <__udivmoddi4+0x8e>
100406e2:	601c      	str	r4, [r3, #0]
100406e4:	605d      	str	r5, [r3, #4]
100406e6:	9800      	ldr	r0, [sp, #0]
100406e8:	9901      	ldr	r1, [sp, #4]
100406ea:	b003      	add	sp, #12
100406ec:	bcf0      	pop	{r4, r5, r6, r7}
100406ee:	46bb      	mov	fp, r7
100406f0:	46b2      	mov	sl, r6
100406f2:	46a9      	mov	r9, r5
100406f4:	46a0      	mov	r8, r4
100406f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100406f8:	4642      	mov	r2, r8
100406fa:	469b      	mov	fp, r3
100406fc:	2320      	movs	r3, #32
100406fe:	1a9b      	subs	r3, r3, r2
10040700:	4652      	mov	r2, sl
10040702:	40da      	lsrs	r2, r3
10040704:	4641      	mov	r1, r8
10040706:	0013      	movs	r3, r2
10040708:	464a      	mov	r2, r9
1004070a:	408a      	lsls	r2, r1
1004070c:	0017      	movs	r7, r2
1004070e:	4642      	mov	r2, r8
10040710:	431f      	orrs	r7, r3
10040712:	4653      	mov	r3, sl
10040714:	4093      	lsls	r3, r2
10040716:	001e      	movs	r6, r3
10040718:	42af      	cmp	r7, r5
1004071a:	d9c3      	bls.n	100406a4 <__udivmoddi4+0x4c>
1004071c:	2200      	movs	r2, #0
1004071e:	2300      	movs	r3, #0
10040720:	9200      	str	r2, [sp, #0]
10040722:	9301      	str	r3, [sp, #4]
10040724:	4643      	mov	r3, r8
10040726:	2b00      	cmp	r3, #0
10040728:	d0d8      	beq.n	100406dc <__udivmoddi4+0x84>
1004072a:	07fb      	lsls	r3, r7, #31
1004072c:	0872      	lsrs	r2, r6, #1
1004072e:	431a      	orrs	r2, r3
10040730:	4646      	mov	r6, r8
10040732:	087b      	lsrs	r3, r7, #1
10040734:	e00e      	b.n	10040754 <__udivmoddi4+0xfc>
10040736:	42ab      	cmp	r3, r5
10040738:	d101      	bne.n	1004073e <__udivmoddi4+0xe6>
1004073a:	42a2      	cmp	r2, r4
1004073c:	d80c      	bhi.n	10040758 <__udivmoddi4+0x100>
1004073e:	1aa4      	subs	r4, r4, r2
10040740:	419d      	sbcs	r5, r3
10040742:	2001      	movs	r0, #1
10040744:	1924      	adds	r4, r4, r4
10040746:	416d      	adcs	r5, r5
10040748:	2100      	movs	r1, #0
1004074a:	3e01      	subs	r6, #1
1004074c:	1824      	adds	r4, r4, r0
1004074e:	414d      	adcs	r5, r1
10040750:	2e00      	cmp	r6, #0
10040752:	d006      	beq.n	10040762 <__udivmoddi4+0x10a>
10040754:	42ab      	cmp	r3, r5
10040756:	d9ee      	bls.n	10040736 <__udivmoddi4+0xde>
10040758:	3e01      	subs	r6, #1
1004075a:	1924      	adds	r4, r4, r4
1004075c:	416d      	adcs	r5, r5
1004075e:	2e00      	cmp	r6, #0
10040760:	d1f8      	bne.n	10040754 <__udivmoddi4+0xfc>
10040762:	9800      	ldr	r0, [sp, #0]
10040764:	9901      	ldr	r1, [sp, #4]
10040766:	465b      	mov	r3, fp
10040768:	1900      	adds	r0, r0, r4
1004076a:	4169      	adcs	r1, r5
1004076c:	2b00      	cmp	r3, #0
1004076e:	db24      	blt.n	100407ba <__udivmoddi4+0x162>
10040770:	002b      	movs	r3, r5
10040772:	465a      	mov	r2, fp
10040774:	4644      	mov	r4, r8
10040776:	40d3      	lsrs	r3, r2
10040778:	002a      	movs	r2, r5
1004077a:	40e2      	lsrs	r2, r4
1004077c:	001c      	movs	r4, r3
1004077e:	465b      	mov	r3, fp
10040780:	0015      	movs	r5, r2
10040782:	2b00      	cmp	r3, #0
10040784:	db2a      	blt.n	100407dc <__udivmoddi4+0x184>
10040786:	0026      	movs	r6, r4
10040788:	409e      	lsls	r6, r3
1004078a:	0033      	movs	r3, r6
1004078c:	0026      	movs	r6, r4
1004078e:	4647      	mov	r7, r8
10040790:	40be      	lsls	r6, r7
10040792:	0032      	movs	r2, r6
10040794:	1a80      	subs	r0, r0, r2
10040796:	4199      	sbcs	r1, r3
10040798:	9000      	str	r0, [sp, #0]
1004079a:	9101      	str	r1, [sp, #4]
1004079c:	e79e      	b.n	100406dc <__udivmoddi4+0x84>
1004079e:	42a3      	cmp	r3, r4
100407a0:	d8bc      	bhi.n	1004071c <__udivmoddi4+0xc4>
100407a2:	e782      	b.n	100406aa <__udivmoddi4+0x52>
100407a4:	4642      	mov	r2, r8
100407a6:	2320      	movs	r3, #32
100407a8:	2100      	movs	r1, #0
100407aa:	1a9b      	subs	r3, r3, r2
100407ac:	2200      	movs	r2, #0
100407ae:	9100      	str	r1, [sp, #0]
100407b0:	9201      	str	r2, [sp, #4]
100407b2:	2201      	movs	r2, #1
100407b4:	40da      	lsrs	r2, r3
100407b6:	9201      	str	r2, [sp, #4]
100407b8:	e785      	b.n	100406c6 <__udivmoddi4+0x6e>
100407ba:	4642      	mov	r2, r8
100407bc:	2320      	movs	r3, #32
100407be:	1a9b      	subs	r3, r3, r2
100407c0:	002a      	movs	r2, r5
100407c2:	4646      	mov	r6, r8
100407c4:	409a      	lsls	r2, r3
100407c6:	0023      	movs	r3, r4
100407c8:	40f3      	lsrs	r3, r6
100407ca:	4644      	mov	r4, r8
100407cc:	4313      	orrs	r3, r2
100407ce:	002a      	movs	r2, r5
100407d0:	40e2      	lsrs	r2, r4
100407d2:	001c      	movs	r4, r3
100407d4:	465b      	mov	r3, fp
100407d6:	0015      	movs	r5, r2
100407d8:	2b00      	cmp	r3, #0
100407da:	dad4      	bge.n	10040786 <__udivmoddi4+0x12e>
100407dc:	4642      	mov	r2, r8
100407de:	002f      	movs	r7, r5
100407e0:	2320      	movs	r3, #32
100407e2:	0026      	movs	r6, r4
100407e4:	4097      	lsls	r7, r2
100407e6:	1a9b      	subs	r3, r3, r2
100407e8:	40de      	lsrs	r6, r3
100407ea:	003b      	movs	r3, r7
100407ec:	4333      	orrs	r3, r6
100407ee:	e7cd      	b.n	1004078c <__udivmoddi4+0x134>

100407f0 <__aeabi_dmul>:
100407f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100407f2:	4657      	mov	r7, sl
100407f4:	464e      	mov	r6, r9
100407f6:	46de      	mov	lr, fp
100407f8:	4645      	mov	r5, r8
100407fa:	b5e0      	push	{r5, r6, r7, lr}
100407fc:	001f      	movs	r7, r3
100407fe:	030b      	lsls	r3, r1, #12
10040800:	0b1b      	lsrs	r3, r3, #12
10040802:	0016      	movs	r6, r2
10040804:	469a      	mov	sl, r3
10040806:	0fca      	lsrs	r2, r1, #31
10040808:	004b      	lsls	r3, r1, #1
1004080a:	0004      	movs	r4, r0
1004080c:	4691      	mov	r9, r2
1004080e:	b085      	sub	sp, #20
10040810:	0d5b      	lsrs	r3, r3, #21
10040812:	d100      	bne.n	10040816 <__aeabi_dmul+0x26>
10040814:	e1cf      	b.n	10040bb6 <__aeabi_dmul+0x3c6>
10040816:	4acd      	ldr	r2, [pc, #820]	@ (10040b4c <__aeabi_dmul+0x35c>)
10040818:	4293      	cmp	r3, r2
1004081a:	d055      	beq.n	100408c8 <__aeabi_dmul+0xd8>
1004081c:	4651      	mov	r1, sl
1004081e:	0f42      	lsrs	r2, r0, #29
10040820:	00c9      	lsls	r1, r1, #3
10040822:	430a      	orrs	r2, r1
10040824:	2180      	movs	r1, #128	@ 0x80
10040826:	0409      	lsls	r1, r1, #16
10040828:	4311      	orrs	r1, r2
1004082a:	00c2      	lsls	r2, r0, #3
1004082c:	4690      	mov	r8, r2
1004082e:	4ac8      	ldr	r2, [pc, #800]	@ (10040b50 <__aeabi_dmul+0x360>)
10040830:	468a      	mov	sl, r1
10040832:	4693      	mov	fp, r2
10040834:	449b      	add	fp, r3
10040836:	2300      	movs	r3, #0
10040838:	2500      	movs	r5, #0
1004083a:	9302      	str	r3, [sp, #8]
1004083c:	033c      	lsls	r4, r7, #12
1004083e:	007b      	lsls	r3, r7, #1
10040840:	0ffa      	lsrs	r2, r7, #31
10040842:	9601      	str	r6, [sp, #4]
10040844:	0b24      	lsrs	r4, r4, #12
10040846:	0d5b      	lsrs	r3, r3, #21
10040848:	9200      	str	r2, [sp, #0]
1004084a:	d100      	bne.n	1004084e <__aeabi_dmul+0x5e>
1004084c:	e188      	b.n	10040b60 <__aeabi_dmul+0x370>
1004084e:	4abf      	ldr	r2, [pc, #764]	@ (10040b4c <__aeabi_dmul+0x35c>)
10040850:	4293      	cmp	r3, r2
10040852:	d100      	bne.n	10040856 <__aeabi_dmul+0x66>
10040854:	e092      	b.n	1004097c <__aeabi_dmul+0x18c>
10040856:	4abe      	ldr	r2, [pc, #760]	@ (10040b50 <__aeabi_dmul+0x360>)
10040858:	4694      	mov	ip, r2
1004085a:	4463      	add	r3, ip
1004085c:	449b      	add	fp, r3
1004085e:	2d0a      	cmp	r5, #10
10040860:	dc42      	bgt.n	100408e8 <__aeabi_dmul+0xf8>
10040862:	00e4      	lsls	r4, r4, #3
10040864:	0f73      	lsrs	r3, r6, #29
10040866:	4323      	orrs	r3, r4
10040868:	2480      	movs	r4, #128	@ 0x80
1004086a:	4649      	mov	r1, r9
1004086c:	0424      	lsls	r4, r4, #16
1004086e:	431c      	orrs	r4, r3
10040870:	00f3      	lsls	r3, r6, #3
10040872:	9301      	str	r3, [sp, #4]
10040874:	9b00      	ldr	r3, [sp, #0]
10040876:	2000      	movs	r0, #0
10040878:	4059      	eors	r1, r3
1004087a:	b2cb      	uxtb	r3, r1
1004087c:	9303      	str	r3, [sp, #12]
1004087e:	2d02      	cmp	r5, #2
10040880:	dc00      	bgt.n	10040884 <__aeabi_dmul+0x94>
10040882:	e094      	b.n	100409ae <__aeabi_dmul+0x1be>
10040884:	2301      	movs	r3, #1
10040886:	40ab      	lsls	r3, r5
10040888:	001d      	movs	r5, r3
1004088a:	23a6      	movs	r3, #166	@ 0xa6
1004088c:	002a      	movs	r2, r5
1004088e:	00db      	lsls	r3, r3, #3
10040890:	401a      	ands	r2, r3
10040892:	421d      	tst	r5, r3
10040894:	d000      	beq.n	10040898 <__aeabi_dmul+0xa8>
10040896:	e229      	b.n	10040cec <__aeabi_dmul+0x4fc>
10040898:	2390      	movs	r3, #144	@ 0x90
1004089a:	009b      	lsls	r3, r3, #2
1004089c:	421d      	tst	r5, r3
1004089e:	d100      	bne.n	100408a2 <__aeabi_dmul+0xb2>
100408a0:	e24d      	b.n	10040d3e <__aeabi_dmul+0x54e>
100408a2:	2300      	movs	r3, #0
100408a4:	2480      	movs	r4, #128	@ 0x80
100408a6:	4699      	mov	r9, r3
100408a8:	0324      	lsls	r4, r4, #12
100408aa:	4ba8      	ldr	r3, [pc, #672]	@ (10040b4c <__aeabi_dmul+0x35c>)
100408ac:	0010      	movs	r0, r2
100408ae:	464a      	mov	r2, r9
100408b0:	051b      	lsls	r3, r3, #20
100408b2:	4323      	orrs	r3, r4
100408b4:	07d2      	lsls	r2, r2, #31
100408b6:	4313      	orrs	r3, r2
100408b8:	0019      	movs	r1, r3
100408ba:	b005      	add	sp, #20
100408bc:	bcf0      	pop	{r4, r5, r6, r7}
100408be:	46bb      	mov	fp, r7
100408c0:	46b2      	mov	sl, r6
100408c2:	46a9      	mov	r9, r5
100408c4:	46a0      	mov	r8, r4
100408c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100408c8:	4652      	mov	r2, sl
100408ca:	4302      	orrs	r2, r0
100408cc:	4690      	mov	r8, r2
100408ce:	d000      	beq.n	100408d2 <__aeabi_dmul+0xe2>
100408d0:	e1ac      	b.n	10040c2c <__aeabi_dmul+0x43c>
100408d2:	469b      	mov	fp, r3
100408d4:	2302      	movs	r3, #2
100408d6:	4692      	mov	sl, r2
100408d8:	2508      	movs	r5, #8
100408da:	9302      	str	r3, [sp, #8]
100408dc:	e7ae      	b.n	1004083c <__aeabi_dmul+0x4c>
100408de:	9b00      	ldr	r3, [sp, #0]
100408e0:	46a2      	mov	sl, r4
100408e2:	4699      	mov	r9, r3
100408e4:	9b01      	ldr	r3, [sp, #4]
100408e6:	4698      	mov	r8, r3
100408e8:	9b02      	ldr	r3, [sp, #8]
100408ea:	2b02      	cmp	r3, #2
100408ec:	d100      	bne.n	100408f0 <__aeabi_dmul+0x100>
100408ee:	e1ca      	b.n	10040c86 <__aeabi_dmul+0x496>
100408f0:	2b03      	cmp	r3, #3
100408f2:	d100      	bne.n	100408f6 <__aeabi_dmul+0x106>
100408f4:	e192      	b.n	10040c1c <__aeabi_dmul+0x42c>
100408f6:	2b01      	cmp	r3, #1
100408f8:	d110      	bne.n	1004091c <__aeabi_dmul+0x12c>
100408fa:	2300      	movs	r3, #0
100408fc:	2400      	movs	r4, #0
100408fe:	2200      	movs	r2, #0
10040900:	e7d4      	b.n	100408ac <__aeabi_dmul+0xbc>
10040902:	2201      	movs	r2, #1
10040904:	087b      	lsrs	r3, r7, #1
10040906:	403a      	ands	r2, r7
10040908:	4313      	orrs	r3, r2
1004090a:	4652      	mov	r2, sl
1004090c:	07d2      	lsls	r2, r2, #31
1004090e:	4313      	orrs	r3, r2
10040910:	4698      	mov	r8, r3
10040912:	4653      	mov	r3, sl
10040914:	085b      	lsrs	r3, r3, #1
10040916:	469a      	mov	sl, r3
10040918:	9b03      	ldr	r3, [sp, #12]
1004091a:	4699      	mov	r9, r3
1004091c:	465b      	mov	r3, fp
1004091e:	1c58      	adds	r0, r3, #1
10040920:	2380      	movs	r3, #128	@ 0x80
10040922:	00db      	lsls	r3, r3, #3
10040924:	445b      	add	r3, fp
10040926:	2b00      	cmp	r3, #0
10040928:	dc00      	bgt.n	1004092c <__aeabi_dmul+0x13c>
1004092a:	e1b1      	b.n	10040c90 <__aeabi_dmul+0x4a0>
1004092c:	4642      	mov	r2, r8
1004092e:	0752      	lsls	r2, r2, #29
10040930:	d00b      	beq.n	1004094a <__aeabi_dmul+0x15a>
10040932:	220f      	movs	r2, #15
10040934:	4641      	mov	r1, r8
10040936:	400a      	ands	r2, r1
10040938:	2a04      	cmp	r2, #4
1004093a:	d006      	beq.n	1004094a <__aeabi_dmul+0x15a>
1004093c:	4642      	mov	r2, r8
1004093e:	1d11      	adds	r1, r2, #4
10040940:	4541      	cmp	r1, r8
10040942:	4192      	sbcs	r2, r2
10040944:	4688      	mov	r8, r1
10040946:	4252      	negs	r2, r2
10040948:	4492      	add	sl, r2
1004094a:	4652      	mov	r2, sl
1004094c:	01d2      	lsls	r2, r2, #7
1004094e:	d506      	bpl.n	1004095e <__aeabi_dmul+0x16e>
10040950:	4652      	mov	r2, sl
10040952:	4b80      	ldr	r3, [pc, #512]	@ (10040b54 <__aeabi_dmul+0x364>)
10040954:	401a      	ands	r2, r3
10040956:	2380      	movs	r3, #128	@ 0x80
10040958:	4692      	mov	sl, r2
1004095a:	00db      	lsls	r3, r3, #3
1004095c:	18c3      	adds	r3, r0, r3
1004095e:	4a7e      	ldr	r2, [pc, #504]	@ (10040b58 <__aeabi_dmul+0x368>)
10040960:	4293      	cmp	r3, r2
10040962:	dd00      	ble.n	10040966 <__aeabi_dmul+0x176>
10040964:	e18f      	b.n	10040c86 <__aeabi_dmul+0x496>
10040966:	4642      	mov	r2, r8
10040968:	08d1      	lsrs	r1, r2, #3
1004096a:	4652      	mov	r2, sl
1004096c:	0752      	lsls	r2, r2, #29
1004096e:	430a      	orrs	r2, r1
10040970:	4651      	mov	r1, sl
10040972:	055b      	lsls	r3, r3, #21
10040974:	024c      	lsls	r4, r1, #9
10040976:	0b24      	lsrs	r4, r4, #12
10040978:	0d5b      	lsrs	r3, r3, #21
1004097a:	e797      	b.n	100408ac <__aeabi_dmul+0xbc>
1004097c:	4b73      	ldr	r3, [pc, #460]	@ (10040b4c <__aeabi_dmul+0x35c>)
1004097e:	4326      	orrs	r6, r4
10040980:	469c      	mov	ip, r3
10040982:	44e3      	add	fp, ip
10040984:	2e00      	cmp	r6, #0
10040986:	d100      	bne.n	1004098a <__aeabi_dmul+0x19a>
10040988:	e16f      	b.n	10040c6a <__aeabi_dmul+0x47a>
1004098a:	2303      	movs	r3, #3
1004098c:	4649      	mov	r1, r9
1004098e:	431d      	orrs	r5, r3
10040990:	9b00      	ldr	r3, [sp, #0]
10040992:	4059      	eors	r1, r3
10040994:	b2cb      	uxtb	r3, r1
10040996:	9303      	str	r3, [sp, #12]
10040998:	2d0a      	cmp	r5, #10
1004099a:	dd00      	ble.n	1004099e <__aeabi_dmul+0x1ae>
1004099c:	e133      	b.n	10040c06 <__aeabi_dmul+0x416>
1004099e:	2301      	movs	r3, #1
100409a0:	40ab      	lsls	r3, r5
100409a2:	001d      	movs	r5, r3
100409a4:	2303      	movs	r3, #3
100409a6:	9302      	str	r3, [sp, #8]
100409a8:	2288      	movs	r2, #136	@ 0x88
100409aa:	422a      	tst	r2, r5
100409ac:	d197      	bne.n	100408de <__aeabi_dmul+0xee>
100409ae:	4642      	mov	r2, r8
100409b0:	4643      	mov	r3, r8
100409b2:	0412      	lsls	r2, r2, #16
100409b4:	0c12      	lsrs	r2, r2, #16
100409b6:	0016      	movs	r6, r2
100409b8:	9801      	ldr	r0, [sp, #4]
100409ba:	0c1d      	lsrs	r5, r3, #16
100409bc:	0c03      	lsrs	r3, r0, #16
100409be:	0400      	lsls	r0, r0, #16
100409c0:	0c00      	lsrs	r0, r0, #16
100409c2:	4346      	muls	r6, r0
100409c4:	46b4      	mov	ip, r6
100409c6:	001e      	movs	r6, r3
100409c8:	436e      	muls	r6, r5
100409ca:	9600      	str	r6, [sp, #0]
100409cc:	0016      	movs	r6, r2
100409ce:	0007      	movs	r7, r0
100409d0:	435e      	muls	r6, r3
100409d2:	4661      	mov	r1, ip
100409d4:	46b0      	mov	r8, r6
100409d6:	436f      	muls	r7, r5
100409d8:	0c0e      	lsrs	r6, r1, #16
100409da:	44b8      	add	r8, r7
100409dc:	4446      	add	r6, r8
100409de:	42b7      	cmp	r7, r6
100409e0:	d905      	bls.n	100409ee <__aeabi_dmul+0x1fe>
100409e2:	2180      	movs	r1, #128	@ 0x80
100409e4:	0249      	lsls	r1, r1, #9
100409e6:	4688      	mov	r8, r1
100409e8:	9f00      	ldr	r7, [sp, #0]
100409ea:	4447      	add	r7, r8
100409ec:	9700      	str	r7, [sp, #0]
100409ee:	4661      	mov	r1, ip
100409f0:	0409      	lsls	r1, r1, #16
100409f2:	0c09      	lsrs	r1, r1, #16
100409f4:	0c37      	lsrs	r7, r6, #16
100409f6:	0436      	lsls	r6, r6, #16
100409f8:	468c      	mov	ip, r1
100409fa:	0031      	movs	r1, r6
100409fc:	4461      	add	r1, ip
100409fe:	9101      	str	r1, [sp, #4]
10040a00:	0011      	movs	r1, r2
10040a02:	0c26      	lsrs	r6, r4, #16
10040a04:	0424      	lsls	r4, r4, #16
10040a06:	0c24      	lsrs	r4, r4, #16
10040a08:	4361      	muls	r1, r4
10040a0a:	468c      	mov	ip, r1
10040a0c:	0021      	movs	r1, r4
10040a0e:	4369      	muls	r1, r5
10040a10:	4689      	mov	r9, r1
10040a12:	4661      	mov	r1, ip
10040a14:	0c09      	lsrs	r1, r1, #16
10040a16:	4688      	mov	r8, r1
10040a18:	4372      	muls	r2, r6
10040a1a:	444a      	add	r2, r9
10040a1c:	4442      	add	r2, r8
10040a1e:	4375      	muls	r5, r6
10040a20:	4591      	cmp	r9, r2
10040a22:	d903      	bls.n	10040a2c <__aeabi_dmul+0x23c>
10040a24:	2180      	movs	r1, #128	@ 0x80
10040a26:	0249      	lsls	r1, r1, #9
10040a28:	4688      	mov	r8, r1
10040a2a:	4445      	add	r5, r8
10040a2c:	0c11      	lsrs	r1, r2, #16
10040a2e:	4688      	mov	r8, r1
10040a30:	4661      	mov	r1, ip
10040a32:	0409      	lsls	r1, r1, #16
10040a34:	0c09      	lsrs	r1, r1, #16
10040a36:	468c      	mov	ip, r1
10040a38:	0412      	lsls	r2, r2, #16
10040a3a:	4462      	add	r2, ip
10040a3c:	18b9      	adds	r1, r7, r2
10040a3e:	9102      	str	r1, [sp, #8]
10040a40:	4651      	mov	r1, sl
10040a42:	0c09      	lsrs	r1, r1, #16
10040a44:	468c      	mov	ip, r1
10040a46:	4651      	mov	r1, sl
10040a48:	040f      	lsls	r7, r1, #16
10040a4a:	0c3f      	lsrs	r7, r7, #16
10040a4c:	0039      	movs	r1, r7
10040a4e:	4341      	muls	r1, r0
10040a50:	4445      	add	r5, r8
10040a52:	4688      	mov	r8, r1
10040a54:	4661      	mov	r1, ip
10040a56:	4341      	muls	r1, r0
10040a58:	468a      	mov	sl, r1
10040a5a:	4641      	mov	r1, r8
10040a5c:	4660      	mov	r0, ip
10040a5e:	0c09      	lsrs	r1, r1, #16
10040a60:	4689      	mov	r9, r1
10040a62:	4358      	muls	r0, r3
10040a64:	437b      	muls	r3, r7
10040a66:	4453      	add	r3, sl
10040a68:	444b      	add	r3, r9
10040a6a:	459a      	cmp	sl, r3
10040a6c:	d903      	bls.n	10040a76 <__aeabi_dmul+0x286>
10040a6e:	2180      	movs	r1, #128	@ 0x80
10040a70:	0249      	lsls	r1, r1, #9
10040a72:	4689      	mov	r9, r1
10040a74:	4448      	add	r0, r9
10040a76:	0c19      	lsrs	r1, r3, #16
10040a78:	4689      	mov	r9, r1
10040a7a:	4641      	mov	r1, r8
10040a7c:	0409      	lsls	r1, r1, #16
10040a7e:	0c09      	lsrs	r1, r1, #16
10040a80:	4688      	mov	r8, r1
10040a82:	0039      	movs	r1, r7
10040a84:	4361      	muls	r1, r4
10040a86:	041b      	lsls	r3, r3, #16
10040a88:	4443      	add	r3, r8
10040a8a:	4688      	mov	r8, r1
10040a8c:	4661      	mov	r1, ip
10040a8e:	434c      	muls	r4, r1
10040a90:	4371      	muls	r1, r6
10040a92:	468c      	mov	ip, r1
10040a94:	4641      	mov	r1, r8
10040a96:	4377      	muls	r7, r6
10040a98:	0c0e      	lsrs	r6, r1, #16
10040a9a:	193f      	adds	r7, r7, r4
10040a9c:	19f6      	adds	r6, r6, r7
10040a9e:	4448      	add	r0, r9
10040aa0:	42b4      	cmp	r4, r6
10040aa2:	d903      	bls.n	10040aac <__aeabi_dmul+0x2bc>
10040aa4:	2180      	movs	r1, #128	@ 0x80
10040aa6:	0249      	lsls	r1, r1, #9
10040aa8:	4689      	mov	r9, r1
10040aaa:	44cc      	add	ip, r9
10040aac:	9902      	ldr	r1, [sp, #8]
10040aae:	9f00      	ldr	r7, [sp, #0]
10040ab0:	4689      	mov	r9, r1
10040ab2:	0431      	lsls	r1, r6, #16
10040ab4:	444f      	add	r7, r9
10040ab6:	4689      	mov	r9, r1
10040ab8:	4641      	mov	r1, r8
10040aba:	4297      	cmp	r7, r2
10040abc:	4192      	sbcs	r2, r2
10040abe:	040c      	lsls	r4, r1, #16
10040ac0:	0c24      	lsrs	r4, r4, #16
10040ac2:	444c      	add	r4, r9
10040ac4:	18ff      	adds	r7, r7, r3
10040ac6:	4252      	negs	r2, r2
10040ac8:	1964      	adds	r4, r4, r5
10040aca:	18a1      	adds	r1, r4, r2
10040acc:	429f      	cmp	r7, r3
10040ace:	419b      	sbcs	r3, r3
10040ad0:	4688      	mov	r8, r1
10040ad2:	4682      	mov	sl, r0
10040ad4:	425b      	negs	r3, r3
10040ad6:	4699      	mov	r9, r3
10040ad8:	4590      	cmp	r8, r2
10040ada:	4192      	sbcs	r2, r2
10040adc:	42ac      	cmp	r4, r5
10040ade:	41a4      	sbcs	r4, r4
10040ae0:	44c2      	add	sl, r8
10040ae2:	44d1      	add	r9, sl
10040ae4:	4252      	negs	r2, r2
10040ae6:	4264      	negs	r4, r4
10040ae8:	4314      	orrs	r4, r2
10040aea:	4599      	cmp	r9, r3
10040aec:	419b      	sbcs	r3, r3
10040aee:	4582      	cmp	sl, r0
10040af0:	4192      	sbcs	r2, r2
10040af2:	425b      	negs	r3, r3
10040af4:	4252      	negs	r2, r2
10040af6:	4313      	orrs	r3, r2
10040af8:	464a      	mov	r2, r9
10040afa:	0c36      	lsrs	r6, r6, #16
10040afc:	19a4      	adds	r4, r4, r6
10040afe:	18e3      	adds	r3, r4, r3
10040b00:	4463      	add	r3, ip
10040b02:	025b      	lsls	r3, r3, #9
10040b04:	0dd2      	lsrs	r2, r2, #23
10040b06:	431a      	orrs	r2, r3
10040b08:	9901      	ldr	r1, [sp, #4]
10040b0a:	4692      	mov	sl, r2
10040b0c:	027a      	lsls	r2, r7, #9
10040b0e:	430a      	orrs	r2, r1
10040b10:	1e50      	subs	r0, r2, #1
10040b12:	4182      	sbcs	r2, r0
10040b14:	0dff      	lsrs	r7, r7, #23
10040b16:	4317      	orrs	r7, r2
10040b18:	464a      	mov	r2, r9
10040b1a:	0252      	lsls	r2, r2, #9
10040b1c:	4317      	orrs	r7, r2
10040b1e:	46b8      	mov	r8, r7
10040b20:	01db      	lsls	r3, r3, #7
10040b22:	d500      	bpl.n	10040b26 <__aeabi_dmul+0x336>
10040b24:	e6ed      	b.n	10040902 <__aeabi_dmul+0x112>
10040b26:	4b0d      	ldr	r3, [pc, #52]	@ (10040b5c <__aeabi_dmul+0x36c>)
10040b28:	9a03      	ldr	r2, [sp, #12]
10040b2a:	445b      	add	r3, fp
10040b2c:	4691      	mov	r9, r2
10040b2e:	2b00      	cmp	r3, #0
10040b30:	dc00      	bgt.n	10040b34 <__aeabi_dmul+0x344>
10040b32:	e0ac      	b.n	10040c8e <__aeabi_dmul+0x49e>
10040b34:	003a      	movs	r2, r7
10040b36:	0752      	lsls	r2, r2, #29
10040b38:	d100      	bne.n	10040b3c <__aeabi_dmul+0x34c>
10040b3a:	e710      	b.n	1004095e <__aeabi_dmul+0x16e>
10040b3c:	220f      	movs	r2, #15
10040b3e:	4658      	mov	r0, fp
10040b40:	403a      	ands	r2, r7
10040b42:	2a04      	cmp	r2, #4
10040b44:	d000      	beq.n	10040b48 <__aeabi_dmul+0x358>
10040b46:	e6f9      	b.n	1004093c <__aeabi_dmul+0x14c>
10040b48:	e709      	b.n	1004095e <__aeabi_dmul+0x16e>
10040b4a:	46c0      	nop			@ (mov r8, r8)
10040b4c:	000007ff 	.word	0x000007ff
10040b50:	fffffc01 	.word	0xfffffc01
10040b54:	feffffff 	.word	0xfeffffff
10040b58:	000007fe 	.word	0x000007fe
10040b5c:	000003ff 	.word	0x000003ff
10040b60:	0022      	movs	r2, r4
10040b62:	4332      	orrs	r2, r6
10040b64:	d06f      	beq.n	10040c46 <__aeabi_dmul+0x456>
10040b66:	2c00      	cmp	r4, #0
10040b68:	d100      	bne.n	10040b6c <__aeabi_dmul+0x37c>
10040b6a:	e0c2      	b.n	10040cf2 <__aeabi_dmul+0x502>
10040b6c:	0020      	movs	r0, r4
10040b6e:	f7ff fce9 	bl	10040544 <__clzsi2>
10040b72:	0002      	movs	r2, r0
10040b74:	0003      	movs	r3, r0
10040b76:	3a0b      	subs	r2, #11
10040b78:	201d      	movs	r0, #29
10040b7a:	1a82      	subs	r2, r0, r2
10040b7c:	0030      	movs	r0, r6
10040b7e:	0019      	movs	r1, r3
10040b80:	40d0      	lsrs	r0, r2
10040b82:	3908      	subs	r1, #8
10040b84:	408c      	lsls	r4, r1
10040b86:	0002      	movs	r2, r0
10040b88:	4322      	orrs	r2, r4
10040b8a:	0034      	movs	r4, r6
10040b8c:	408c      	lsls	r4, r1
10040b8e:	4659      	mov	r1, fp
10040b90:	1acb      	subs	r3, r1, r3
10040b92:	4986      	ldr	r1, [pc, #536]	@ (10040dac <__aeabi_dmul+0x5bc>)
10040b94:	468b      	mov	fp, r1
10040b96:	449b      	add	fp, r3
10040b98:	2d0a      	cmp	r5, #10
10040b9a:	dd00      	ble.n	10040b9e <__aeabi_dmul+0x3ae>
10040b9c:	e6a4      	b.n	100408e8 <__aeabi_dmul+0xf8>
10040b9e:	4649      	mov	r1, r9
10040ba0:	9b00      	ldr	r3, [sp, #0]
10040ba2:	9401      	str	r4, [sp, #4]
10040ba4:	4059      	eors	r1, r3
10040ba6:	b2cb      	uxtb	r3, r1
10040ba8:	0014      	movs	r4, r2
10040baa:	2000      	movs	r0, #0
10040bac:	9303      	str	r3, [sp, #12]
10040bae:	2d02      	cmp	r5, #2
10040bb0:	dd00      	ble.n	10040bb4 <__aeabi_dmul+0x3c4>
10040bb2:	e667      	b.n	10040884 <__aeabi_dmul+0x94>
10040bb4:	e6fb      	b.n	100409ae <__aeabi_dmul+0x1be>
10040bb6:	4653      	mov	r3, sl
10040bb8:	4303      	orrs	r3, r0
10040bba:	4698      	mov	r8, r3
10040bbc:	d03c      	beq.n	10040c38 <__aeabi_dmul+0x448>
10040bbe:	4653      	mov	r3, sl
10040bc0:	2b00      	cmp	r3, #0
10040bc2:	d100      	bne.n	10040bc6 <__aeabi_dmul+0x3d6>
10040bc4:	e0a3      	b.n	10040d0e <__aeabi_dmul+0x51e>
10040bc6:	4650      	mov	r0, sl
10040bc8:	f7ff fcbc 	bl	10040544 <__clzsi2>
10040bcc:	230b      	movs	r3, #11
10040bce:	425b      	negs	r3, r3
10040bd0:	469c      	mov	ip, r3
10040bd2:	0002      	movs	r2, r0
10040bd4:	4484      	add	ip, r0
10040bd6:	0011      	movs	r1, r2
10040bd8:	4650      	mov	r0, sl
10040bda:	3908      	subs	r1, #8
10040bdc:	4088      	lsls	r0, r1
10040bde:	231d      	movs	r3, #29
10040be0:	4680      	mov	r8, r0
10040be2:	4660      	mov	r0, ip
10040be4:	1a1b      	subs	r3, r3, r0
10040be6:	0020      	movs	r0, r4
10040be8:	40d8      	lsrs	r0, r3
10040bea:	0003      	movs	r3, r0
10040bec:	4640      	mov	r0, r8
10040bee:	4303      	orrs	r3, r0
10040bf0:	469a      	mov	sl, r3
10040bf2:	0023      	movs	r3, r4
10040bf4:	408b      	lsls	r3, r1
10040bf6:	4698      	mov	r8, r3
10040bf8:	4b6c      	ldr	r3, [pc, #432]	@ (10040dac <__aeabi_dmul+0x5bc>)
10040bfa:	2500      	movs	r5, #0
10040bfc:	1a9b      	subs	r3, r3, r2
10040bfe:	469b      	mov	fp, r3
10040c00:	2300      	movs	r3, #0
10040c02:	9302      	str	r3, [sp, #8]
10040c04:	e61a      	b.n	1004083c <__aeabi_dmul+0x4c>
10040c06:	2d0f      	cmp	r5, #15
10040c08:	d000      	beq.n	10040c0c <__aeabi_dmul+0x41c>
10040c0a:	e0c9      	b.n	10040da0 <__aeabi_dmul+0x5b0>
10040c0c:	2380      	movs	r3, #128	@ 0x80
10040c0e:	4652      	mov	r2, sl
10040c10:	031b      	lsls	r3, r3, #12
10040c12:	421a      	tst	r2, r3
10040c14:	d002      	beq.n	10040c1c <__aeabi_dmul+0x42c>
10040c16:	421c      	tst	r4, r3
10040c18:	d100      	bne.n	10040c1c <__aeabi_dmul+0x42c>
10040c1a:	e092      	b.n	10040d42 <__aeabi_dmul+0x552>
10040c1c:	2480      	movs	r4, #128	@ 0x80
10040c1e:	4653      	mov	r3, sl
10040c20:	0324      	lsls	r4, r4, #12
10040c22:	431c      	orrs	r4, r3
10040c24:	0324      	lsls	r4, r4, #12
10040c26:	4642      	mov	r2, r8
10040c28:	0b24      	lsrs	r4, r4, #12
10040c2a:	e63e      	b.n	100408aa <__aeabi_dmul+0xba>
10040c2c:	469b      	mov	fp, r3
10040c2e:	2303      	movs	r3, #3
10040c30:	4680      	mov	r8, r0
10040c32:	250c      	movs	r5, #12
10040c34:	9302      	str	r3, [sp, #8]
10040c36:	e601      	b.n	1004083c <__aeabi_dmul+0x4c>
10040c38:	2300      	movs	r3, #0
10040c3a:	469a      	mov	sl, r3
10040c3c:	469b      	mov	fp, r3
10040c3e:	3301      	adds	r3, #1
10040c40:	2504      	movs	r5, #4
10040c42:	9302      	str	r3, [sp, #8]
10040c44:	e5fa      	b.n	1004083c <__aeabi_dmul+0x4c>
10040c46:	2101      	movs	r1, #1
10040c48:	430d      	orrs	r5, r1
10040c4a:	2d0a      	cmp	r5, #10
10040c4c:	dd00      	ble.n	10040c50 <__aeabi_dmul+0x460>
10040c4e:	e64b      	b.n	100408e8 <__aeabi_dmul+0xf8>
10040c50:	4649      	mov	r1, r9
10040c52:	9800      	ldr	r0, [sp, #0]
10040c54:	4041      	eors	r1, r0
10040c56:	b2c9      	uxtb	r1, r1
10040c58:	9103      	str	r1, [sp, #12]
10040c5a:	2d02      	cmp	r5, #2
10040c5c:	dc00      	bgt.n	10040c60 <__aeabi_dmul+0x470>
10040c5e:	e096      	b.n	10040d8e <__aeabi_dmul+0x59e>
10040c60:	2300      	movs	r3, #0
10040c62:	2400      	movs	r4, #0
10040c64:	2001      	movs	r0, #1
10040c66:	9301      	str	r3, [sp, #4]
10040c68:	e60c      	b.n	10040884 <__aeabi_dmul+0x94>
10040c6a:	4649      	mov	r1, r9
10040c6c:	2302      	movs	r3, #2
10040c6e:	9a00      	ldr	r2, [sp, #0]
10040c70:	432b      	orrs	r3, r5
10040c72:	4051      	eors	r1, r2
10040c74:	b2ca      	uxtb	r2, r1
10040c76:	9203      	str	r2, [sp, #12]
10040c78:	2b0a      	cmp	r3, #10
10040c7a:	dd00      	ble.n	10040c7e <__aeabi_dmul+0x48e>
10040c7c:	e634      	b.n	100408e8 <__aeabi_dmul+0xf8>
10040c7e:	2d00      	cmp	r5, #0
10040c80:	d157      	bne.n	10040d32 <__aeabi_dmul+0x542>
10040c82:	9b03      	ldr	r3, [sp, #12]
10040c84:	4699      	mov	r9, r3
10040c86:	2400      	movs	r4, #0
10040c88:	2200      	movs	r2, #0
10040c8a:	4b49      	ldr	r3, [pc, #292]	@ (10040db0 <__aeabi_dmul+0x5c0>)
10040c8c:	e60e      	b.n	100408ac <__aeabi_dmul+0xbc>
10040c8e:	4658      	mov	r0, fp
10040c90:	2101      	movs	r1, #1
10040c92:	1ac9      	subs	r1, r1, r3
10040c94:	2938      	cmp	r1, #56	@ 0x38
10040c96:	dd00      	ble.n	10040c9a <__aeabi_dmul+0x4aa>
10040c98:	e62f      	b.n	100408fa <__aeabi_dmul+0x10a>
10040c9a:	291f      	cmp	r1, #31
10040c9c:	dd56      	ble.n	10040d4c <__aeabi_dmul+0x55c>
10040c9e:	221f      	movs	r2, #31
10040ca0:	4654      	mov	r4, sl
10040ca2:	4252      	negs	r2, r2
10040ca4:	1ad3      	subs	r3, r2, r3
10040ca6:	40dc      	lsrs	r4, r3
10040ca8:	2920      	cmp	r1, #32
10040caa:	d007      	beq.n	10040cbc <__aeabi_dmul+0x4cc>
10040cac:	4b41      	ldr	r3, [pc, #260]	@ (10040db4 <__aeabi_dmul+0x5c4>)
10040cae:	4642      	mov	r2, r8
10040cb0:	469c      	mov	ip, r3
10040cb2:	4653      	mov	r3, sl
10040cb4:	4460      	add	r0, ip
10040cb6:	4083      	lsls	r3, r0
10040cb8:	431a      	orrs	r2, r3
10040cba:	4690      	mov	r8, r2
10040cbc:	4642      	mov	r2, r8
10040cbe:	2107      	movs	r1, #7
10040cc0:	1e53      	subs	r3, r2, #1
10040cc2:	419a      	sbcs	r2, r3
10040cc4:	000b      	movs	r3, r1
10040cc6:	4322      	orrs	r2, r4
10040cc8:	4013      	ands	r3, r2
10040cca:	2400      	movs	r4, #0
10040ccc:	4211      	tst	r1, r2
10040cce:	d009      	beq.n	10040ce4 <__aeabi_dmul+0x4f4>
10040cd0:	230f      	movs	r3, #15
10040cd2:	4013      	ands	r3, r2
10040cd4:	2b04      	cmp	r3, #4
10040cd6:	d05d      	beq.n	10040d94 <__aeabi_dmul+0x5a4>
10040cd8:	1d11      	adds	r1, r2, #4
10040cda:	4291      	cmp	r1, r2
10040cdc:	419b      	sbcs	r3, r3
10040cde:	000a      	movs	r2, r1
10040ce0:	425b      	negs	r3, r3
10040ce2:	075b      	lsls	r3, r3, #29
10040ce4:	08d2      	lsrs	r2, r2, #3
10040ce6:	431a      	orrs	r2, r3
10040ce8:	2300      	movs	r3, #0
10040cea:	e5df      	b.n	100408ac <__aeabi_dmul+0xbc>
10040cec:	9b03      	ldr	r3, [sp, #12]
10040cee:	4699      	mov	r9, r3
10040cf0:	e5fa      	b.n	100408e8 <__aeabi_dmul+0xf8>
10040cf2:	9801      	ldr	r0, [sp, #4]
10040cf4:	f7ff fc26 	bl	10040544 <__clzsi2>
10040cf8:	0002      	movs	r2, r0
10040cfa:	0003      	movs	r3, r0
10040cfc:	3215      	adds	r2, #21
10040cfe:	3320      	adds	r3, #32
10040d00:	2a1c      	cmp	r2, #28
10040d02:	dc00      	bgt.n	10040d06 <__aeabi_dmul+0x516>
10040d04:	e738      	b.n	10040b78 <__aeabi_dmul+0x388>
10040d06:	9a01      	ldr	r2, [sp, #4]
10040d08:	3808      	subs	r0, #8
10040d0a:	4082      	lsls	r2, r0
10040d0c:	e73f      	b.n	10040b8e <__aeabi_dmul+0x39e>
10040d0e:	f7ff fc19 	bl	10040544 <__clzsi2>
10040d12:	2315      	movs	r3, #21
10040d14:	469c      	mov	ip, r3
10040d16:	4484      	add	ip, r0
10040d18:	0002      	movs	r2, r0
10040d1a:	4663      	mov	r3, ip
10040d1c:	3220      	adds	r2, #32
10040d1e:	2b1c      	cmp	r3, #28
10040d20:	dc00      	bgt.n	10040d24 <__aeabi_dmul+0x534>
10040d22:	e758      	b.n	10040bd6 <__aeabi_dmul+0x3e6>
10040d24:	2300      	movs	r3, #0
10040d26:	4698      	mov	r8, r3
10040d28:	0023      	movs	r3, r4
10040d2a:	3808      	subs	r0, #8
10040d2c:	4083      	lsls	r3, r0
10040d2e:	469a      	mov	sl, r3
10040d30:	e762      	b.n	10040bf8 <__aeabi_dmul+0x408>
10040d32:	001d      	movs	r5, r3
10040d34:	2300      	movs	r3, #0
10040d36:	2400      	movs	r4, #0
10040d38:	2002      	movs	r0, #2
10040d3a:	9301      	str	r3, [sp, #4]
10040d3c:	e5a2      	b.n	10040884 <__aeabi_dmul+0x94>
10040d3e:	9002      	str	r0, [sp, #8]
10040d40:	e632      	b.n	100409a8 <__aeabi_dmul+0x1b8>
10040d42:	431c      	orrs	r4, r3
10040d44:	9b00      	ldr	r3, [sp, #0]
10040d46:	9a01      	ldr	r2, [sp, #4]
10040d48:	4699      	mov	r9, r3
10040d4a:	e5ae      	b.n	100408aa <__aeabi_dmul+0xba>
10040d4c:	4b1a      	ldr	r3, [pc, #104]	@ (10040db8 <__aeabi_dmul+0x5c8>)
10040d4e:	4652      	mov	r2, sl
10040d50:	18c3      	adds	r3, r0, r3
10040d52:	4640      	mov	r0, r8
10040d54:	409a      	lsls	r2, r3
10040d56:	40c8      	lsrs	r0, r1
10040d58:	4302      	orrs	r2, r0
10040d5a:	4640      	mov	r0, r8
10040d5c:	4098      	lsls	r0, r3
10040d5e:	0003      	movs	r3, r0
10040d60:	1e58      	subs	r0, r3, #1
10040d62:	4183      	sbcs	r3, r0
10040d64:	4654      	mov	r4, sl
10040d66:	431a      	orrs	r2, r3
10040d68:	40cc      	lsrs	r4, r1
10040d6a:	0753      	lsls	r3, r2, #29
10040d6c:	d009      	beq.n	10040d82 <__aeabi_dmul+0x592>
10040d6e:	230f      	movs	r3, #15
10040d70:	4013      	ands	r3, r2
10040d72:	2b04      	cmp	r3, #4
10040d74:	d005      	beq.n	10040d82 <__aeabi_dmul+0x592>
10040d76:	1d13      	adds	r3, r2, #4
10040d78:	4293      	cmp	r3, r2
10040d7a:	4192      	sbcs	r2, r2
10040d7c:	4252      	negs	r2, r2
10040d7e:	18a4      	adds	r4, r4, r2
10040d80:	001a      	movs	r2, r3
10040d82:	0223      	lsls	r3, r4, #8
10040d84:	d508      	bpl.n	10040d98 <__aeabi_dmul+0x5a8>
10040d86:	2301      	movs	r3, #1
10040d88:	2400      	movs	r4, #0
10040d8a:	2200      	movs	r2, #0
10040d8c:	e58e      	b.n	100408ac <__aeabi_dmul+0xbc>
10040d8e:	4689      	mov	r9, r1
10040d90:	2400      	movs	r4, #0
10040d92:	e58b      	b.n	100408ac <__aeabi_dmul+0xbc>
10040d94:	2300      	movs	r3, #0
10040d96:	e7a5      	b.n	10040ce4 <__aeabi_dmul+0x4f4>
10040d98:	0763      	lsls	r3, r4, #29
10040d9a:	0264      	lsls	r4, r4, #9
10040d9c:	0b24      	lsrs	r4, r4, #12
10040d9e:	e7a1      	b.n	10040ce4 <__aeabi_dmul+0x4f4>
10040da0:	9b00      	ldr	r3, [sp, #0]
10040da2:	46a2      	mov	sl, r4
10040da4:	4699      	mov	r9, r3
10040da6:	9b01      	ldr	r3, [sp, #4]
10040da8:	4698      	mov	r8, r3
10040daa:	e737      	b.n	10040c1c <__aeabi_dmul+0x42c>
10040dac:	fffffc0d 	.word	0xfffffc0d
10040db0:	000007ff 	.word	0x000007ff
10040db4:	0000043e 	.word	0x0000043e
10040db8:	0000041e 	.word	0x0000041e

10040dbc <__aeabi_dsub>:
10040dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
10040dbe:	4657      	mov	r7, sl
10040dc0:	464e      	mov	r6, r9
10040dc2:	4645      	mov	r5, r8
10040dc4:	46de      	mov	lr, fp
10040dc6:	b5e0      	push	{r5, r6, r7, lr}
10040dc8:	b083      	sub	sp, #12
10040dca:	9000      	str	r0, [sp, #0]
10040dcc:	9101      	str	r1, [sp, #4]
10040dce:	030c      	lsls	r4, r1, #12
10040dd0:	004d      	lsls	r5, r1, #1
10040dd2:	0fce      	lsrs	r6, r1, #31
10040dd4:	0a61      	lsrs	r1, r4, #9
10040dd6:	9c00      	ldr	r4, [sp, #0]
10040dd8:	005f      	lsls	r7, r3, #1
10040dda:	0f64      	lsrs	r4, r4, #29
10040ddc:	430c      	orrs	r4, r1
10040dde:	9900      	ldr	r1, [sp, #0]
10040de0:	9200      	str	r2, [sp, #0]
10040de2:	9301      	str	r3, [sp, #4]
10040de4:	00c8      	lsls	r0, r1, #3
10040de6:	0319      	lsls	r1, r3, #12
10040de8:	0d7b      	lsrs	r3, r7, #21
10040dea:	4699      	mov	r9, r3
10040dec:	9b01      	ldr	r3, [sp, #4]
10040dee:	4fcc      	ldr	r7, [pc, #816]	@ (10041120 <__aeabi_dsub+0x364>)
10040df0:	0fdb      	lsrs	r3, r3, #31
10040df2:	469c      	mov	ip, r3
10040df4:	0a4b      	lsrs	r3, r1, #9
10040df6:	9900      	ldr	r1, [sp, #0]
10040df8:	4680      	mov	r8, r0
10040dfa:	0f49      	lsrs	r1, r1, #29
10040dfc:	4319      	orrs	r1, r3
10040dfe:	9b00      	ldr	r3, [sp, #0]
10040e00:	468b      	mov	fp, r1
10040e02:	00da      	lsls	r2, r3, #3
10040e04:	4692      	mov	sl, r2
10040e06:	0d6d      	lsrs	r5, r5, #21
10040e08:	45b9      	cmp	r9, r7
10040e0a:	d100      	bne.n	10040e0e <__aeabi_dsub+0x52>
10040e0c:	e0bf      	b.n	10040f8e <__aeabi_dsub+0x1d2>
10040e0e:	2301      	movs	r3, #1
10040e10:	4661      	mov	r1, ip
10040e12:	4059      	eors	r1, r3
10040e14:	464b      	mov	r3, r9
10040e16:	468c      	mov	ip, r1
10040e18:	1aeb      	subs	r3, r5, r3
10040e1a:	428e      	cmp	r6, r1
10040e1c:	d075      	beq.n	10040f0a <__aeabi_dsub+0x14e>
10040e1e:	2b00      	cmp	r3, #0
10040e20:	dc00      	bgt.n	10040e24 <__aeabi_dsub+0x68>
10040e22:	e2a3      	b.n	1004136c <__aeabi_dsub+0x5b0>
10040e24:	4649      	mov	r1, r9
10040e26:	2900      	cmp	r1, #0
10040e28:	d100      	bne.n	10040e2c <__aeabi_dsub+0x70>
10040e2a:	e0ce      	b.n	10040fca <__aeabi_dsub+0x20e>
10040e2c:	42bd      	cmp	r5, r7
10040e2e:	d100      	bne.n	10040e32 <__aeabi_dsub+0x76>
10040e30:	e200      	b.n	10041234 <__aeabi_dsub+0x478>
10040e32:	2701      	movs	r7, #1
10040e34:	2b38      	cmp	r3, #56	@ 0x38
10040e36:	dc19      	bgt.n	10040e6c <__aeabi_dsub+0xb0>
10040e38:	2780      	movs	r7, #128	@ 0x80
10040e3a:	4659      	mov	r1, fp
10040e3c:	043f      	lsls	r7, r7, #16
10040e3e:	4339      	orrs	r1, r7
10040e40:	468b      	mov	fp, r1
10040e42:	2b1f      	cmp	r3, #31
10040e44:	dd00      	ble.n	10040e48 <__aeabi_dsub+0x8c>
10040e46:	e1fa      	b.n	1004123e <__aeabi_dsub+0x482>
10040e48:	2720      	movs	r7, #32
10040e4a:	1af9      	subs	r1, r7, r3
10040e4c:	468c      	mov	ip, r1
10040e4e:	4659      	mov	r1, fp
10040e50:	4667      	mov	r7, ip
10040e52:	40b9      	lsls	r1, r7
10040e54:	000f      	movs	r7, r1
10040e56:	0011      	movs	r1, r2
10040e58:	40d9      	lsrs	r1, r3
10040e5a:	430f      	orrs	r7, r1
10040e5c:	4661      	mov	r1, ip
10040e5e:	408a      	lsls	r2, r1
10040e60:	1e51      	subs	r1, r2, #1
10040e62:	418a      	sbcs	r2, r1
10040e64:	4659      	mov	r1, fp
10040e66:	40d9      	lsrs	r1, r3
10040e68:	4317      	orrs	r7, r2
10040e6a:	1a64      	subs	r4, r4, r1
10040e6c:	1bc7      	subs	r7, r0, r7
10040e6e:	42b8      	cmp	r0, r7
10040e70:	4180      	sbcs	r0, r0
10040e72:	4240      	negs	r0, r0
10040e74:	1a24      	subs	r4, r4, r0
10040e76:	0223      	lsls	r3, r4, #8
10040e78:	d400      	bmi.n	10040e7c <__aeabi_dsub+0xc0>
10040e7a:	e140      	b.n	100410fe <__aeabi_dsub+0x342>
10040e7c:	0264      	lsls	r4, r4, #9
10040e7e:	0a64      	lsrs	r4, r4, #9
10040e80:	2c00      	cmp	r4, #0
10040e82:	d100      	bne.n	10040e86 <__aeabi_dsub+0xca>
10040e84:	e154      	b.n	10041130 <__aeabi_dsub+0x374>
10040e86:	0020      	movs	r0, r4
10040e88:	f7ff fb5c 	bl	10040544 <__clzsi2>
10040e8c:	0003      	movs	r3, r0
10040e8e:	3b08      	subs	r3, #8
10040e90:	2120      	movs	r1, #32
10040e92:	0038      	movs	r0, r7
10040e94:	1aca      	subs	r2, r1, r3
10040e96:	40d0      	lsrs	r0, r2
10040e98:	409c      	lsls	r4, r3
10040e9a:	0002      	movs	r2, r0
10040e9c:	409f      	lsls	r7, r3
10040e9e:	4322      	orrs	r2, r4
10040ea0:	429d      	cmp	r5, r3
10040ea2:	dd00      	ble.n	10040ea6 <__aeabi_dsub+0xea>
10040ea4:	e1a6      	b.n	100411f4 <__aeabi_dsub+0x438>
10040ea6:	1b58      	subs	r0, r3, r5
10040ea8:	3001      	adds	r0, #1
10040eaa:	1a09      	subs	r1, r1, r0
10040eac:	003c      	movs	r4, r7
10040eae:	408f      	lsls	r7, r1
10040eb0:	40c4      	lsrs	r4, r0
10040eb2:	1e7b      	subs	r3, r7, #1
10040eb4:	419f      	sbcs	r7, r3
10040eb6:	0013      	movs	r3, r2
10040eb8:	408b      	lsls	r3, r1
10040eba:	4327      	orrs	r7, r4
10040ebc:	431f      	orrs	r7, r3
10040ebe:	40c2      	lsrs	r2, r0
10040ec0:	003b      	movs	r3, r7
10040ec2:	0014      	movs	r4, r2
10040ec4:	2500      	movs	r5, #0
10040ec6:	4313      	orrs	r3, r2
10040ec8:	d100      	bne.n	10040ecc <__aeabi_dsub+0x110>
10040eca:	e1f7      	b.n	100412bc <__aeabi_dsub+0x500>
10040ecc:	077b      	lsls	r3, r7, #29
10040ece:	d100      	bne.n	10040ed2 <__aeabi_dsub+0x116>
10040ed0:	e377      	b.n	100415c2 <__aeabi_dsub+0x806>
10040ed2:	230f      	movs	r3, #15
10040ed4:	0038      	movs	r0, r7
10040ed6:	403b      	ands	r3, r7
10040ed8:	2b04      	cmp	r3, #4
10040eda:	d004      	beq.n	10040ee6 <__aeabi_dsub+0x12a>
10040edc:	1d38      	adds	r0, r7, #4
10040ede:	42b8      	cmp	r0, r7
10040ee0:	41bf      	sbcs	r7, r7
10040ee2:	427f      	negs	r7, r7
10040ee4:	19e4      	adds	r4, r4, r7
10040ee6:	0223      	lsls	r3, r4, #8
10040ee8:	d400      	bmi.n	10040eec <__aeabi_dsub+0x130>
10040eea:	e368      	b.n	100415be <__aeabi_dsub+0x802>
10040eec:	4b8c      	ldr	r3, [pc, #560]	@ (10041120 <__aeabi_dsub+0x364>)
10040eee:	3501      	adds	r5, #1
10040ef0:	429d      	cmp	r5, r3
10040ef2:	d100      	bne.n	10040ef6 <__aeabi_dsub+0x13a>
10040ef4:	e0f4      	b.n	100410e0 <__aeabi_dsub+0x324>
10040ef6:	4b8b      	ldr	r3, [pc, #556]	@ (10041124 <__aeabi_dsub+0x368>)
10040ef8:	056d      	lsls	r5, r5, #21
10040efa:	401c      	ands	r4, r3
10040efc:	0d6d      	lsrs	r5, r5, #21
10040efe:	0767      	lsls	r7, r4, #29
10040f00:	08c0      	lsrs	r0, r0, #3
10040f02:	0264      	lsls	r4, r4, #9
10040f04:	4307      	orrs	r7, r0
10040f06:	0b24      	lsrs	r4, r4, #12
10040f08:	e0ec      	b.n	100410e4 <__aeabi_dsub+0x328>
10040f0a:	2b00      	cmp	r3, #0
10040f0c:	dc00      	bgt.n	10040f10 <__aeabi_dsub+0x154>
10040f0e:	e329      	b.n	10041564 <__aeabi_dsub+0x7a8>
10040f10:	4649      	mov	r1, r9
10040f12:	2900      	cmp	r1, #0
10040f14:	d000      	beq.n	10040f18 <__aeabi_dsub+0x15c>
10040f16:	e0d6      	b.n	100410c6 <__aeabi_dsub+0x30a>
10040f18:	4659      	mov	r1, fp
10040f1a:	4311      	orrs	r1, r2
10040f1c:	d100      	bne.n	10040f20 <__aeabi_dsub+0x164>
10040f1e:	e12e      	b.n	1004117e <__aeabi_dsub+0x3c2>
10040f20:	1e59      	subs	r1, r3, #1
10040f22:	2b01      	cmp	r3, #1
10040f24:	d100      	bne.n	10040f28 <__aeabi_dsub+0x16c>
10040f26:	e1e6      	b.n	100412f6 <__aeabi_dsub+0x53a>
10040f28:	42bb      	cmp	r3, r7
10040f2a:	d100      	bne.n	10040f2e <__aeabi_dsub+0x172>
10040f2c:	e182      	b.n	10041234 <__aeabi_dsub+0x478>
10040f2e:	2701      	movs	r7, #1
10040f30:	000b      	movs	r3, r1
10040f32:	2938      	cmp	r1, #56	@ 0x38
10040f34:	dc14      	bgt.n	10040f60 <__aeabi_dsub+0x1a4>
10040f36:	2b1f      	cmp	r3, #31
10040f38:	dd00      	ble.n	10040f3c <__aeabi_dsub+0x180>
10040f3a:	e23c      	b.n	100413b6 <__aeabi_dsub+0x5fa>
10040f3c:	2720      	movs	r7, #32
10040f3e:	1af9      	subs	r1, r7, r3
10040f40:	468c      	mov	ip, r1
10040f42:	4659      	mov	r1, fp
10040f44:	4667      	mov	r7, ip
10040f46:	40b9      	lsls	r1, r7
10040f48:	000f      	movs	r7, r1
10040f4a:	0011      	movs	r1, r2
10040f4c:	40d9      	lsrs	r1, r3
10040f4e:	430f      	orrs	r7, r1
10040f50:	4661      	mov	r1, ip
10040f52:	408a      	lsls	r2, r1
10040f54:	1e51      	subs	r1, r2, #1
10040f56:	418a      	sbcs	r2, r1
10040f58:	4659      	mov	r1, fp
10040f5a:	40d9      	lsrs	r1, r3
10040f5c:	4317      	orrs	r7, r2
10040f5e:	1864      	adds	r4, r4, r1
10040f60:	183f      	adds	r7, r7, r0
10040f62:	4287      	cmp	r7, r0
10040f64:	4180      	sbcs	r0, r0
10040f66:	4240      	negs	r0, r0
10040f68:	1824      	adds	r4, r4, r0
10040f6a:	0223      	lsls	r3, r4, #8
10040f6c:	d400      	bmi.n	10040f70 <__aeabi_dsub+0x1b4>
10040f6e:	e0c6      	b.n	100410fe <__aeabi_dsub+0x342>
10040f70:	4b6b      	ldr	r3, [pc, #428]	@ (10041120 <__aeabi_dsub+0x364>)
10040f72:	3501      	adds	r5, #1
10040f74:	429d      	cmp	r5, r3
10040f76:	d100      	bne.n	10040f7a <__aeabi_dsub+0x1be>
10040f78:	e0b2      	b.n	100410e0 <__aeabi_dsub+0x324>
10040f7a:	2101      	movs	r1, #1
10040f7c:	4b69      	ldr	r3, [pc, #420]	@ (10041124 <__aeabi_dsub+0x368>)
10040f7e:	087a      	lsrs	r2, r7, #1
10040f80:	401c      	ands	r4, r3
10040f82:	4039      	ands	r1, r7
10040f84:	430a      	orrs	r2, r1
10040f86:	07e7      	lsls	r7, r4, #31
10040f88:	4317      	orrs	r7, r2
10040f8a:	0864      	lsrs	r4, r4, #1
10040f8c:	e79e      	b.n	10040ecc <__aeabi_dsub+0x110>
10040f8e:	4b66      	ldr	r3, [pc, #408]	@ (10041128 <__aeabi_dsub+0x36c>)
10040f90:	4311      	orrs	r1, r2
10040f92:	468a      	mov	sl, r1
10040f94:	18eb      	adds	r3, r5, r3
10040f96:	2900      	cmp	r1, #0
10040f98:	d028      	beq.n	10040fec <__aeabi_dsub+0x230>
10040f9a:	4566      	cmp	r6, ip
10040f9c:	d02c      	beq.n	10040ff8 <__aeabi_dsub+0x23c>
10040f9e:	2b00      	cmp	r3, #0
10040fa0:	d05b      	beq.n	1004105a <__aeabi_dsub+0x29e>
10040fa2:	2d00      	cmp	r5, #0
10040fa4:	d100      	bne.n	10040fa8 <__aeabi_dsub+0x1ec>
10040fa6:	e12c      	b.n	10041202 <__aeabi_dsub+0x446>
10040fa8:	465b      	mov	r3, fp
10040faa:	4666      	mov	r6, ip
10040fac:	075f      	lsls	r7, r3, #29
10040fae:	08d2      	lsrs	r2, r2, #3
10040fb0:	4317      	orrs	r7, r2
10040fb2:	08dd      	lsrs	r5, r3, #3
10040fb4:	003b      	movs	r3, r7
10040fb6:	432b      	orrs	r3, r5
10040fb8:	d100      	bne.n	10040fbc <__aeabi_dsub+0x200>
10040fba:	e0e2      	b.n	10041182 <__aeabi_dsub+0x3c6>
10040fbc:	2480      	movs	r4, #128	@ 0x80
10040fbe:	0324      	lsls	r4, r4, #12
10040fc0:	432c      	orrs	r4, r5
10040fc2:	0324      	lsls	r4, r4, #12
10040fc4:	4d56      	ldr	r5, [pc, #344]	@ (10041120 <__aeabi_dsub+0x364>)
10040fc6:	0b24      	lsrs	r4, r4, #12
10040fc8:	e08c      	b.n	100410e4 <__aeabi_dsub+0x328>
10040fca:	4659      	mov	r1, fp
10040fcc:	4311      	orrs	r1, r2
10040fce:	d100      	bne.n	10040fd2 <__aeabi_dsub+0x216>
10040fd0:	e0d5      	b.n	1004117e <__aeabi_dsub+0x3c2>
10040fd2:	1e59      	subs	r1, r3, #1
10040fd4:	2b01      	cmp	r3, #1
10040fd6:	d100      	bne.n	10040fda <__aeabi_dsub+0x21e>
10040fd8:	e1b9      	b.n	1004134e <__aeabi_dsub+0x592>
10040fda:	42bb      	cmp	r3, r7
10040fdc:	d100      	bne.n	10040fe0 <__aeabi_dsub+0x224>
10040fde:	e1b1      	b.n	10041344 <__aeabi_dsub+0x588>
10040fe0:	2701      	movs	r7, #1
10040fe2:	000b      	movs	r3, r1
10040fe4:	2938      	cmp	r1, #56	@ 0x38
10040fe6:	dd00      	ble.n	10040fea <__aeabi_dsub+0x22e>
10040fe8:	e740      	b.n	10040e6c <__aeabi_dsub+0xb0>
10040fea:	e72a      	b.n	10040e42 <__aeabi_dsub+0x86>
10040fec:	4661      	mov	r1, ip
10040fee:	2701      	movs	r7, #1
10040ff0:	4079      	eors	r1, r7
10040ff2:	468c      	mov	ip, r1
10040ff4:	4566      	cmp	r6, ip
10040ff6:	d1d2      	bne.n	10040f9e <__aeabi_dsub+0x1e2>
10040ff8:	2b00      	cmp	r3, #0
10040ffa:	d100      	bne.n	10040ffe <__aeabi_dsub+0x242>
10040ffc:	e0c5      	b.n	1004118a <__aeabi_dsub+0x3ce>
10040ffe:	2d00      	cmp	r5, #0
10041000:	d000      	beq.n	10041004 <__aeabi_dsub+0x248>
10041002:	e155      	b.n	100412b0 <__aeabi_dsub+0x4f4>
10041004:	464b      	mov	r3, r9
10041006:	0025      	movs	r5, r4
10041008:	4305      	orrs	r5, r0
1004100a:	d100      	bne.n	1004100e <__aeabi_dsub+0x252>
1004100c:	e212      	b.n	10041434 <__aeabi_dsub+0x678>
1004100e:	1e59      	subs	r1, r3, #1
10041010:	468c      	mov	ip, r1
10041012:	2b01      	cmp	r3, #1
10041014:	d100      	bne.n	10041018 <__aeabi_dsub+0x25c>
10041016:	e249      	b.n	100414ac <__aeabi_dsub+0x6f0>
10041018:	4d41      	ldr	r5, [pc, #260]	@ (10041120 <__aeabi_dsub+0x364>)
1004101a:	42ab      	cmp	r3, r5
1004101c:	d100      	bne.n	10041020 <__aeabi_dsub+0x264>
1004101e:	e28f      	b.n	10041540 <__aeabi_dsub+0x784>
10041020:	2701      	movs	r7, #1
10041022:	2938      	cmp	r1, #56	@ 0x38
10041024:	dc11      	bgt.n	1004104a <__aeabi_dsub+0x28e>
10041026:	4663      	mov	r3, ip
10041028:	2b1f      	cmp	r3, #31
1004102a:	dd00      	ble.n	1004102e <__aeabi_dsub+0x272>
1004102c:	e25b      	b.n	100414e6 <__aeabi_dsub+0x72a>
1004102e:	4661      	mov	r1, ip
10041030:	2320      	movs	r3, #32
10041032:	0027      	movs	r7, r4
10041034:	1a5b      	subs	r3, r3, r1
10041036:	0005      	movs	r5, r0
10041038:	4098      	lsls	r0, r3
1004103a:	409f      	lsls	r7, r3
1004103c:	40cd      	lsrs	r5, r1
1004103e:	1e43      	subs	r3, r0, #1
10041040:	4198      	sbcs	r0, r3
10041042:	40cc      	lsrs	r4, r1
10041044:	432f      	orrs	r7, r5
10041046:	4307      	orrs	r7, r0
10041048:	44a3      	add	fp, r4
1004104a:	18bf      	adds	r7, r7, r2
1004104c:	4297      	cmp	r7, r2
1004104e:	4192      	sbcs	r2, r2
10041050:	4252      	negs	r2, r2
10041052:	445a      	add	r2, fp
10041054:	0014      	movs	r4, r2
10041056:	464d      	mov	r5, r9
10041058:	e787      	b.n	10040f6a <__aeabi_dsub+0x1ae>
1004105a:	4f34      	ldr	r7, [pc, #208]	@ (1004112c <__aeabi_dsub+0x370>)
1004105c:	1c6b      	adds	r3, r5, #1
1004105e:	423b      	tst	r3, r7
10041060:	d000      	beq.n	10041064 <__aeabi_dsub+0x2a8>
10041062:	e0b6      	b.n	100411d2 <__aeabi_dsub+0x416>
10041064:	4659      	mov	r1, fp
10041066:	0023      	movs	r3, r4
10041068:	4311      	orrs	r1, r2
1004106a:	000f      	movs	r7, r1
1004106c:	4303      	orrs	r3, r0
1004106e:	2d00      	cmp	r5, #0
10041070:	d000      	beq.n	10041074 <__aeabi_dsub+0x2b8>
10041072:	e126      	b.n	100412c2 <__aeabi_dsub+0x506>
10041074:	2b00      	cmp	r3, #0
10041076:	d100      	bne.n	1004107a <__aeabi_dsub+0x2be>
10041078:	e1c0      	b.n	100413fc <__aeabi_dsub+0x640>
1004107a:	2900      	cmp	r1, #0
1004107c:	d100      	bne.n	10041080 <__aeabi_dsub+0x2c4>
1004107e:	e0a1      	b.n	100411c4 <__aeabi_dsub+0x408>
10041080:	1a83      	subs	r3, r0, r2
10041082:	4698      	mov	r8, r3
10041084:	465b      	mov	r3, fp
10041086:	4540      	cmp	r0, r8
10041088:	41ad      	sbcs	r5, r5
1004108a:	1ae3      	subs	r3, r4, r3
1004108c:	426d      	negs	r5, r5
1004108e:	1b5b      	subs	r3, r3, r5
10041090:	2580      	movs	r5, #128	@ 0x80
10041092:	042d      	lsls	r5, r5, #16
10041094:	422b      	tst	r3, r5
10041096:	d100      	bne.n	1004109a <__aeabi_dsub+0x2de>
10041098:	e14b      	b.n	10041332 <__aeabi_dsub+0x576>
1004109a:	465b      	mov	r3, fp
1004109c:	1a10      	subs	r0, r2, r0
1004109e:	4282      	cmp	r2, r0
100410a0:	4192      	sbcs	r2, r2
100410a2:	1b1c      	subs	r4, r3, r4
100410a4:	0007      	movs	r7, r0
100410a6:	2601      	movs	r6, #1
100410a8:	4663      	mov	r3, ip
100410aa:	4252      	negs	r2, r2
100410ac:	1aa4      	subs	r4, r4, r2
100410ae:	4327      	orrs	r7, r4
100410b0:	401e      	ands	r6, r3
100410b2:	2f00      	cmp	r7, #0
100410b4:	d100      	bne.n	100410b8 <__aeabi_dsub+0x2fc>
100410b6:	e142      	b.n	1004133e <__aeabi_dsub+0x582>
100410b8:	422c      	tst	r4, r5
100410ba:	d100      	bne.n	100410be <__aeabi_dsub+0x302>
100410bc:	e26d      	b.n	1004159a <__aeabi_dsub+0x7de>
100410be:	4b19      	ldr	r3, [pc, #100]	@ (10041124 <__aeabi_dsub+0x368>)
100410c0:	2501      	movs	r5, #1
100410c2:	401c      	ands	r4, r3
100410c4:	e71b      	b.n	10040efe <__aeabi_dsub+0x142>
100410c6:	42bd      	cmp	r5, r7
100410c8:	d100      	bne.n	100410cc <__aeabi_dsub+0x310>
100410ca:	e13b      	b.n	10041344 <__aeabi_dsub+0x588>
100410cc:	2701      	movs	r7, #1
100410ce:	2b38      	cmp	r3, #56	@ 0x38
100410d0:	dd00      	ble.n	100410d4 <__aeabi_dsub+0x318>
100410d2:	e745      	b.n	10040f60 <__aeabi_dsub+0x1a4>
100410d4:	2780      	movs	r7, #128	@ 0x80
100410d6:	4659      	mov	r1, fp
100410d8:	043f      	lsls	r7, r7, #16
100410da:	4339      	orrs	r1, r7
100410dc:	468b      	mov	fp, r1
100410de:	e72a      	b.n	10040f36 <__aeabi_dsub+0x17a>
100410e0:	2400      	movs	r4, #0
100410e2:	2700      	movs	r7, #0
100410e4:	052d      	lsls	r5, r5, #20
100410e6:	4325      	orrs	r5, r4
100410e8:	07f6      	lsls	r6, r6, #31
100410ea:	4335      	orrs	r5, r6
100410ec:	0038      	movs	r0, r7
100410ee:	0029      	movs	r1, r5
100410f0:	b003      	add	sp, #12
100410f2:	bcf0      	pop	{r4, r5, r6, r7}
100410f4:	46bb      	mov	fp, r7
100410f6:	46b2      	mov	sl, r6
100410f8:	46a9      	mov	r9, r5
100410fa:	46a0      	mov	r8, r4
100410fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100410fe:	077b      	lsls	r3, r7, #29
10041100:	d004      	beq.n	1004110c <__aeabi_dsub+0x350>
10041102:	230f      	movs	r3, #15
10041104:	403b      	ands	r3, r7
10041106:	2b04      	cmp	r3, #4
10041108:	d000      	beq.n	1004110c <__aeabi_dsub+0x350>
1004110a:	e6e7      	b.n	10040edc <__aeabi_dsub+0x120>
1004110c:	002b      	movs	r3, r5
1004110e:	08f8      	lsrs	r0, r7, #3
10041110:	4a03      	ldr	r2, [pc, #12]	@ (10041120 <__aeabi_dsub+0x364>)
10041112:	0767      	lsls	r7, r4, #29
10041114:	4307      	orrs	r7, r0
10041116:	08e5      	lsrs	r5, r4, #3
10041118:	4293      	cmp	r3, r2
1004111a:	d100      	bne.n	1004111e <__aeabi_dsub+0x362>
1004111c:	e74a      	b.n	10040fb4 <__aeabi_dsub+0x1f8>
1004111e:	e0a5      	b.n	1004126c <__aeabi_dsub+0x4b0>
10041120:	000007ff 	.word	0x000007ff
10041124:	ff7fffff 	.word	0xff7fffff
10041128:	fffff801 	.word	0xfffff801
1004112c:	000007fe 	.word	0x000007fe
10041130:	0038      	movs	r0, r7
10041132:	f7ff fa07 	bl	10040544 <__clzsi2>
10041136:	0003      	movs	r3, r0
10041138:	3318      	adds	r3, #24
1004113a:	2b1f      	cmp	r3, #31
1004113c:	dc00      	bgt.n	10041140 <__aeabi_dsub+0x384>
1004113e:	e6a7      	b.n	10040e90 <__aeabi_dsub+0xd4>
10041140:	003a      	movs	r2, r7
10041142:	3808      	subs	r0, #8
10041144:	4082      	lsls	r2, r0
10041146:	429d      	cmp	r5, r3
10041148:	dd00      	ble.n	1004114c <__aeabi_dsub+0x390>
1004114a:	e08a      	b.n	10041262 <__aeabi_dsub+0x4a6>
1004114c:	1b5b      	subs	r3, r3, r5
1004114e:	1c58      	adds	r0, r3, #1
10041150:	281f      	cmp	r0, #31
10041152:	dc00      	bgt.n	10041156 <__aeabi_dsub+0x39a>
10041154:	e1d8      	b.n	10041508 <__aeabi_dsub+0x74c>
10041156:	0017      	movs	r7, r2
10041158:	3b1f      	subs	r3, #31
1004115a:	40df      	lsrs	r7, r3
1004115c:	2820      	cmp	r0, #32
1004115e:	d005      	beq.n	1004116c <__aeabi_dsub+0x3b0>
10041160:	2340      	movs	r3, #64	@ 0x40
10041162:	1a1b      	subs	r3, r3, r0
10041164:	409a      	lsls	r2, r3
10041166:	1e53      	subs	r3, r2, #1
10041168:	419a      	sbcs	r2, r3
1004116a:	4317      	orrs	r7, r2
1004116c:	2500      	movs	r5, #0
1004116e:	2f00      	cmp	r7, #0
10041170:	d100      	bne.n	10041174 <__aeabi_dsub+0x3b8>
10041172:	e0e5      	b.n	10041340 <__aeabi_dsub+0x584>
10041174:	077b      	lsls	r3, r7, #29
10041176:	d000      	beq.n	1004117a <__aeabi_dsub+0x3be>
10041178:	e6ab      	b.n	10040ed2 <__aeabi_dsub+0x116>
1004117a:	002c      	movs	r4, r5
1004117c:	e7c6      	b.n	1004110c <__aeabi_dsub+0x350>
1004117e:	08c0      	lsrs	r0, r0, #3
10041180:	e7c6      	b.n	10041110 <__aeabi_dsub+0x354>
10041182:	2700      	movs	r7, #0
10041184:	2400      	movs	r4, #0
10041186:	4dd1      	ldr	r5, [pc, #836]	@ (100414cc <__aeabi_dsub+0x710>)
10041188:	e7ac      	b.n	100410e4 <__aeabi_dsub+0x328>
1004118a:	4fd1      	ldr	r7, [pc, #836]	@ (100414d0 <__aeabi_dsub+0x714>)
1004118c:	1c6b      	adds	r3, r5, #1
1004118e:	423b      	tst	r3, r7
10041190:	d171      	bne.n	10041276 <__aeabi_dsub+0x4ba>
10041192:	0023      	movs	r3, r4
10041194:	4303      	orrs	r3, r0
10041196:	2d00      	cmp	r5, #0
10041198:	d000      	beq.n	1004119c <__aeabi_dsub+0x3e0>
1004119a:	e14e      	b.n	1004143a <__aeabi_dsub+0x67e>
1004119c:	4657      	mov	r7, sl
1004119e:	2b00      	cmp	r3, #0
100411a0:	d100      	bne.n	100411a4 <__aeabi_dsub+0x3e8>
100411a2:	e1b5      	b.n	10041510 <__aeabi_dsub+0x754>
100411a4:	2f00      	cmp	r7, #0
100411a6:	d00d      	beq.n	100411c4 <__aeabi_dsub+0x408>
100411a8:	1883      	adds	r3, r0, r2
100411aa:	4283      	cmp	r3, r0
100411ac:	4180      	sbcs	r0, r0
100411ae:	445c      	add	r4, fp
100411b0:	4240      	negs	r0, r0
100411b2:	1824      	adds	r4, r4, r0
100411b4:	0222      	lsls	r2, r4, #8
100411b6:	d500      	bpl.n	100411ba <__aeabi_dsub+0x3fe>
100411b8:	e1c8      	b.n	1004154c <__aeabi_dsub+0x790>
100411ba:	001f      	movs	r7, r3
100411bc:	4698      	mov	r8, r3
100411be:	4327      	orrs	r7, r4
100411c0:	d100      	bne.n	100411c4 <__aeabi_dsub+0x408>
100411c2:	e0bc      	b.n	1004133e <__aeabi_dsub+0x582>
100411c4:	4643      	mov	r3, r8
100411c6:	0767      	lsls	r7, r4, #29
100411c8:	08db      	lsrs	r3, r3, #3
100411ca:	431f      	orrs	r7, r3
100411cc:	08e5      	lsrs	r5, r4, #3
100411ce:	2300      	movs	r3, #0
100411d0:	e04c      	b.n	1004126c <__aeabi_dsub+0x4b0>
100411d2:	1a83      	subs	r3, r0, r2
100411d4:	4698      	mov	r8, r3
100411d6:	465b      	mov	r3, fp
100411d8:	4540      	cmp	r0, r8
100411da:	41bf      	sbcs	r7, r7
100411dc:	1ae3      	subs	r3, r4, r3
100411de:	427f      	negs	r7, r7
100411e0:	1bdb      	subs	r3, r3, r7
100411e2:	021f      	lsls	r7, r3, #8
100411e4:	d47c      	bmi.n	100412e0 <__aeabi_dsub+0x524>
100411e6:	4647      	mov	r7, r8
100411e8:	431f      	orrs	r7, r3
100411ea:	d100      	bne.n	100411ee <__aeabi_dsub+0x432>
100411ec:	e0a6      	b.n	1004133c <__aeabi_dsub+0x580>
100411ee:	001c      	movs	r4, r3
100411f0:	4647      	mov	r7, r8
100411f2:	e645      	b.n	10040e80 <__aeabi_dsub+0xc4>
100411f4:	4cb7      	ldr	r4, [pc, #732]	@ (100414d4 <__aeabi_dsub+0x718>)
100411f6:	1aed      	subs	r5, r5, r3
100411f8:	4014      	ands	r4, r2
100411fa:	077b      	lsls	r3, r7, #29
100411fc:	d000      	beq.n	10041200 <__aeabi_dsub+0x444>
100411fe:	e780      	b.n	10041102 <__aeabi_dsub+0x346>
10041200:	e784      	b.n	1004110c <__aeabi_dsub+0x350>
10041202:	464b      	mov	r3, r9
10041204:	0025      	movs	r5, r4
10041206:	4305      	orrs	r5, r0
10041208:	d066      	beq.n	100412d8 <__aeabi_dsub+0x51c>
1004120a:	1e5f      	subs	r7, r3, #1
1004120c:	2b01      	cmp	r3, #1
1004120e:	d100      	bne.n	10041212 <__aeabi_dsub+0x456>
10041210:	e0fc      	b.n	1004140c <__aeabi_dsub+0x650>
10041212:	4dae      	ldr	r5, [pc, #696]	@ (100414cc <__aeabi_dsub+0x710>)
10041214:	42ab      	cmp	r3, r5
10041216:	d100      	bne.n	1004121a <__aeabi_dsub+0x45e>
10041218:	e15e      	b.n	100414d8 <__aeabi_dsub+0x71c>
1004121a:	4666      	mov	r6, ip
1004121c:	2f38      	cmp	r7, #56	@ 0x38
1004121e:	dc00      	bgt.n	10041222 <__aeabi_dsub+0x466>
10041220:	e0b4      	b.n	1004138c <__aeabi_dsub+0x5d0>
10041222:	2001      	movs	r0, #1
10041224:	1a17      	subs	r7, r2, r0
10041226:	42ba      	cmp	r2, r7
10041228:	4192      	sbcs	r2, r2
1004122a:	465b      	mov	r3, fp
1004122c:	4252      	negs	r2, r2
1004122e:	464d      	mov	r5, r9
10041230:	1a9c      	subs	r4, r3, r2
10041232:	e620      	b.n	10040e76 <__aeabi_dsub+0xba>
10041234:	0767      	lsls	r7, r4, #29
10041236:	08c0      	lsrs	r0, r0, #3
10041238:	4307      	orrs	r7, r0
1004123a:	08e5      	lsrs	r5, r4, #3
1004123c:	e6ba      	b.n	10040fb4 <__aeabi_dsub+0x1f8>
1004123e:	001f      	movs	r7, r3
10041240:	4659      	mov	r1, fp
10041242:	3f20      	subs	r7, #32
10041244:	40f9      	lsrs	r1, r7
10041246:	000f      	movs	r7, r1
10041248:	2b20      	cmp	r3, #32
1004124a:	d005      	beq.n	10041258 <__aeabi_dsub+0x49c>
1004124c:	2140      	movs	r1, #64	@ 0x40
1004124e:	1acb      	subs	r3, r1, r3
10041250:	4659      	mov	r1, fp
10041252:	4099      	lsls	r1, r3
10041254:	430a      	orrs	r2, r1
10041256:	4692      	mov	sl, r2
10041258:	4653      	mov	r3, sl
1004125a:	1e5a      	subs	r2, r3, #1
1004125c:	4193      	sbcs	r3, r2
1004125e:	431f      	orrs	r7, r3
10041260:	e604      	b.n	10040e6c <__aeabi_dsub+0xb0>
10041262:	1aeb      	subs	r3, r5, r3
10041264:	4d9b      	ldr	r5, [pc, #620]	@ (100414d4 <__aeabi_dsub+0x718>)
10041266:	4015      	ands	r5, r2
10041268:	076f      	lsls	r7, r5, #29
1004126a:	08ed      	lsrs	r5, r5, #3
1004126c:	032c      	lsls	r4, r5, #12
1004126e:	055d      	lsls	r5, r3, #21
10041270:	0b24      	lsrs	r4, r4, #12
10041272:	0d6d      	lsrs	r5, r5, #21
10041274:	e736      	b.n	100410e4 <__aeabi_dsub+0x328>
10041276:	4d95      	ldr	r5, [pc, #596]	@ (100414cc <__aeabi_dsub+0x710>)
10041278:	42ab      	cmp	r3, r5
1004127a:	d100      	bne.n	1004127e <__aeabi_dsub+0x4c2>
1004127c:	e0d6      	b.n	1004142c <__aeabi_dsub+0x670>
1004127e:	1882      	adds	r2, r0, r2
10041280:	0021      	movs	r1, r4
10041282:	4282      	cmp	r2, r0
10041284:	4180      	sbcs	r0, r0
10041286:	4459      	add	r1, fp
10041288:	4240      	negs	r0, r0
1004128a:	1808      	adds	r0, r1, r0
1004128c:	07c7      	lsls	r7, r0, #31
1004128e:	0852      	lsrs	r2, r2, #1
10041290:	4317      	orrs	r7, r2
10041292:	0844      	lsrs	r4, r0, #1
10041294:	0752      	lsls	r2, r2, #29
10041296:	d400      	bmi.n	1004129a <__aeabi_dsub+0x4de>
10041298:	e185      	b.n	100415a6 <__aeabi_dsub+0x7ea>
1004129a:	220f      	movs	r2, #15
1004129c:	001d      	movs	r5, r3
1004129e:	403a      	ands	r2, r7
100412a0:	2a04      	cmp	r2, #4
100412a2:	d000      	beq.n	100412a6 <__aeabi_dsub+0x4ea>
100412a4:	e61a      	b.n	10040edc <__aeabi_dsub+0x120>
100412a6:	08ff      	lsrs	r7, r7, #3
100412a8:	0764      	lsls	r4, r4, #29
100412aa:	4327      	orrs	r7, r4
100412ac:	0905      	lsrs	r5, r0, #4
100412ae:	e7dd      	b.n	1004126c <__aeabi_dsub+0x4b0>
100412b0:	465b      	mov	r3, fp
100412b2:	08d2      	lsrs	r2, r2, #3
100412b4:	075f      	lsls	r7, r3, #29
100412b6:	4317      	orrs	r7, r2
100412b8:	08dd      	lsrs	r5, r3, #3
100412ba:	e67b      	b.n	10040fb4 <__aeabi_dsub+0x1f8>
100412bc:	2700      	movs	r7, #0
100412be:	2400      	movs	r4, #0
100412c0:	e710      	b.n	100410e4 <__aeabi_dsub+0x328>
100412c2:	2b00      	cmp	r3, #0
100412c4:	d000      	beq.n	100412c8 <__aeabi_dsub+0x50c>
100412c6:	e0d6      	b.n	10041476 <__aeabi_dsub+0x6ba>
100412c8:	2900      	cmp	r1, #0
100412ca:	d000      	beq.n	100412ce <__aeabi_dsub+0x512>
100412cc:	e12f      	b.n	1004152e <__aeabi_dsub+0x772>
100412ce:	2480      	movs	r4, #128	@ 0x80
100412d0:	2600      	movs	r6, #0
100412d2:	4d7e      	ldr	r5, [pc, #504]	@ (100414cc <__aeabi_dsub+0x710>)
100412d4:	0324      	lsls	r4, r4, #12
100412d6:	e705      	b.n	100410e4 <__aeabi_dsub+0x328>
100412d8:	4666      	mov	r6, ip
100412da:	465c      	mov	r4, fp
100412dc:	08d0      	lsrs	r0, r2, #3
100412de:	e717      	b.n	10041110 <__aeabi_dsub+0x354>
100412e0:	465b      	mov	r3, fp
100412e2:	1a17      	subs	r7, r2, r0
100412e4:	42ba      	cmp	r2, r7
100412e6:	4192      	sbcs	r2, r2
100412e8:	1b1c      	subs	r4, r3, r4
100412ea:	2601      	movs	r6, #1
100412ec:	4663      	mov	r3, ip
100412ee:	4252      	negs	r2, r2
100412f0:	1aa4      	subs	r4, r4, r2
100412f2:	401e      	ands	r6, r3
100412f4:	e5c4      	b.n	10040e80 <__aeabi_dsub+0xc4>
100412f6:	1883      	adds	r3, r0, r2
100412f8:	4283      	cmp	r3, r0
100412fa:	4180      	sbcs	r0, r0
100412fc:	445c      	add	r4, fp
100412fe:	4240      	negs	r0, r0
10041300:	1825      	adds	r5, r4, r0
10041302:	022a      	lsls	r2, r5, #8
10041304:	d400      	bmi.n	10041308 <__aeabi_dsub+0x54c>
10041306:	e0da      	b.n	100414be <__aeabi_dsub+0x702>
10041308:	4a72      	ldr	r2, [pc, #456]	@ (100414d4 <__aeabi_dsub+0x718>)
1004130a:	085b      	lsrs	r3, r3, #1
1004130c:	4015      	ands	r5, r2
1004130e:	07ea      	lsls	r2, r5, #31
10041310:	431a      	orrs	r2, r3
10041312:	0869      	lsrs	r1, r5, #1
10041314:	075b      	lsls	r3, r3, #29
10041316:	d400      	bmi.n	1004131a <__aeabi_dsub+0x55e>
10041318:	e14a      	b.n	100415b0 <__aeabi_dsub+0x7f4>
1004131a:	230f      	movs	r3, #15
1004131c:	4013      	ands	r3, r2
1004131e:	2b04      	cmp	r3, #4
10041320:	d100      	bne.n	10041324 <__aeabi_dsub+0x568>
10041322:	e0fc      	b.n	1004151e <__aeabi_dsub+0x762>
10041324:	1d17      	adds	r7, r2, #4
10041326:	4297      	cmp	r7, r2
10041328:	41a4      	sbcs	r4, r4
1004132a:	4264      	negs	r4, r4
1004132c:	2502      	movs	r5, #2
1004132e:	1864      	adds	r4, r4, r1
10041330:	e6ec      	b.n	1004110c <__aeabi_dsub+0x350>
10041332:	4647      	mov	r7, r8
10041334:	001c      	movs	r4, r3
10041336:	431f      	orrs	r7, r3
10041338:	d000      	beq.n	1004133c <__aeabi_dsub+0x580>
1004133a:	e743      	b.n	100411c4 <__aeabi_dsub+0x408>
1004133c:	2600      	movs	r6, #0
1004133e:	2500      	movs	r5, #0
10041340:	2400      	movs	r4, #0
10041342:	e6cf      	b.n	100410e4 <__aeabi_dsub+0x328>
10041344:	08c0      	lsrs	r0, r0, #3
10041346:	0767      	lsls	r7, r4, #29
10041348:	4307      	orrs	r7, r0
1004134a:	08e5      	lsrs	r5, r4, #3
1004134c:	e632      	b.n	10040fb4 <__aeabi_dsub+0x1f8>
1004134e:	1a87      	subs	r7, r0, r2
10041350:	465b      	mov	r3, fp
10041352:	42b8      	cmp	r0, r7
10041354:	4180      	sbcs	r0, r0
10041356:	1ae4      	subs	r4, r4, r3
10041358:	4240      	negs	r0, r0
1004135a:	1a24      	subs	r4, r4, r0
1004135c:	0223      	lsls	r3, r4, #8
1004135e:	d428      	bmi.n	100413b2 <__aeabi_dsub+0x5f6>
10041360:	0763      	lsls	r3, r4, #29
10041362:	08ff      	lsrs	r7, r7, #3
10041364:	431f      	orrs	r7, r3
10041366:	08e5      	lsrs	r5, r4, #3
10041368:	2301      	movs	r3, #1
1004136a:	e77f      	b.n	1004126c <__aeabi_dsub+0x4b0>
1004136c:	2b00      	cmp	r3, #0
1004136e:	d100      	bne.n	10041372 <__aeabi_dsub+0x5b6>
10041370:	e673      	b.n	1004105a <__aeabi_dsub+0x29e>
10041372:	464b      	mov	r3, r9
10041374:	1b5f      	subs	r7, r3, r5
10041376:	003b      	movs	r3, r7
10041378:	2d00      	cmp	r5, #0
1004137a:	d100      	bne.n	1004137e <__aeabi_dsub+0x5c2>
1004137c:	e742      	b.n	10041204 <__aeabi_dsub+0x448>
1004137e:	2f38      	cmp	r7, #56	@ 0x38
10041380:	dd00      	ble.n	10041384 <__aeabi_dsub+0x5c8>
10041382:	e0ec      	b.n	1004155e <__aeabi_dsub+0x7a2>
10041384:	2380      	movs	r3, #128	@ 0x80
10041386:	000e      	movs	r6, r1
10041388:	041b      	lsls	r3, r3, #16
1004138a:	431c      	orrs	r4, r3
1004138c:	2f1f      	cmp	r7, #31
1004138e:	dc25      	bgt.n	100413dc <__aeabi_dsub+0x620>
10041390:	2520      	movs	r5, #32
10041392:	0023      	movs	r3, r4
10041394:	1bed      	subs	r5, r5, r7
10041396:	0001      	movs	r1, r0
10041398:	40a8      	lsls	r0, r5
1004139a:	40ab      	lsls	r3, r5
1004139c:	40f9      	lsrs	r1, r7
1004139e:	1e45      	subs	r5, r0, #1
100413a0:	41a8      	sbcs	r0, r5
100413a2:	430b      	orrs	r3, r1
100413a4:	40fc      	lsrs	r4, r7
100413a6:	4318      	orrs	r0, r3
100413a8:	465b      	mov	r3, fp
100413aa:	1b1b      	subs	r3, r3, r4
100413ac:	469b      	mov	fp, r3
100413ae:	e739      	b.n	10041224 <__aeabi_dsub+0x468>
100413b0:	4666      	mov	r6, ip
100413b2:	2501      	movs	r5, #1
100413b4:	e562      	b.n	10040e7c <__aeabi_dsub+0xc0>
100413b6:	001f      	movs	r7, r3
100413b8:	4659      	mov	r1, fp
100413ba:	3f20      	subs	r7, #32
100413bc:	40f9      	lsrs	r1, r7
100413be:	468c      	mov	ip, r1
100413c0:	2b20      	cmp	r3, #32
100413c2:	d005      	beq.n	100413d0 <__aeabi_dsub+0x614>
100413c4:	2740      	movs	r7, #64	@ 0x40
100413c6:	4659      	mov	r1, fp
100413c8:	1afb      	subs	r3, r7, r3
100413ca:	4099      	lsls	r1, r3
100413cc:	430a      	orrs	r2, r1
100413ce:	4692      	mov	sl, r2
100413d0:	4657      	mov	r7, sl
100413d2:	1e7b      	subs	r3, r7, #1
100413d4:	419f      	sbcs	r7, r3
100413d6:	4663      	mov	r3, ip
100413d8:	431f      	orrs	r7, r3
100413da:	e5c1      	b.n	10040f60 <__aeabi_dsub+0x1a4>
100413dc:	003b      	movs	r3, r7
100413de:	0025      	movs	r5, r4
100413e0:	3b20      	subs	r3, #32
100413e2:	40dd      	lsrs	r5, r3
100413e4:	2f20      	cmp	r7, #32
100413e6:	d004      	beq.n	100413f2 <__aeabi_dsub+0x636>
100413e8:	2340      	movs	r3, #64	@ 0x40
100413ea:	1bdb      	subs	r3, r3, r7
100413ec:	409c      	lsls	r4, r3
100413ee:	4320      	orrs	r0, r4
100413f0:	4680      	mov	r8, r0
100413f2:	4640      	mov	r0, r8
100413f4:	1e43      	subs	r3, r0, #1
100413f6:	4198      	sbcs	r0, r3
100413f8:	4328      	orrs	r0, r5
100413fa:	e713      	b.n	10041224 <__aeabi_dsub+0x468>
100413fc:	2900      	cmp	r1, #0
100413fe:	d09d      	beq.n	1004133c <__aeabi_dsub+0x580>
10041400:	2601      	movs	r6, #1
10041402:	4663      	mov	r3, ip
10041404:	465c      	mov	r4, fp
10041406:	4690      	mov	r8, r2
10041408:	401e      	ands	r6, r3
1004140a:	e6db      	b.n	100411c4 <__aeabi_dsub+0x408>
1004140c:	1a17      	subs	r7, r2, r0
1004140e:	465b      	mov	r3, fp
10041410:	42ba      	cmp	r2, r7
10041412:	4192      	sbcs	r2, r2
10041414:	1b1c      	subs	r4, r3, r4
10041416:	4252      	negs	r2, r2
10041418:	1aa4      	subs	r4, r4, r2
1004141a:	0223      	lsls	r3, r4, #8
1004141c:	d4c8      	bmi.n	100413b0 <__aeabi_dsub+0x5f4>
1004141e:	0763      	lsls	r3, r4, #29
10041420:	08ff      	lsrs	r7, r7, #3
10041422:	431f      	orrs	r7, r3
10041424:	4666      	mov	r6, ip
10041426:	2301      	movs	r3, #1
10041428:	08e5      	lsrs	r5, r4, #3
1004142a:	e71f      	b.n	1004126c <__aeabi_dsub+0x4b0>
1004142c:	001d      	movs	r5, r3
1004142e:	2400      	movs	r4, #0
10041430:	2700      	movs	r7, #0
10041432:	e657      	b.n	100410e4 <__aeabi_dsub+0x328>
10041434:	465c      	mov	r4, fp
10041436:	08d0      	lsrs	r0, r2, #3
10041438:	e66a      	b.n	10041110 <__aeabi_dsub+0x354>
1004143a:	2b00      	cmp	r3, #0
1004143c:	d100      	bne.n	10041440 <__aeabi_dsub+0x684>
1004143e:	e737      	b.n	100412b0 <__aeabi_dsub+0x4f4>
10041440:	4653      	mov	r3, sl
10041442:	08c0      	lsrs	r0, r0, #3
10041444:	0767      	lsls	r7, r4, #29
10041446:	4307      	orrs	r7, r0
10041448:	08e5      	lsrs	r5, r4, #3
1004144a:	2b00      	cmp	r3, #0
1004144c:	d100      	bne.n	10041450 <__aeabi_dsub+0x694>
1004144e:	e5b1      	b.n	10040fb4 <__aeabi_dsub+0x1f8>
10041450:	2380      	movs	r3, #128	@ 0x80
10041452:	031b      	lsls	r3, r3, #12
10041454:	421d      	tst	r5, r3
10041456:	d008      	beq.n	1004146a <__aeabi_dsub+0x6ae>
10041458:	4659      	mov	r1, fp
1004145a:	08c8      	lsrs	r0, r1, #3
1004145c:	4218      	tst	r0, r3
1004145e:	d104      	bne.n	1004146a <__aeabi_dsub+0x6ae>
10041460:	08d2      	lsrs	r2, r2, #3
10041462:	0749      	lsls	r1, r1, #29
10041464:	430a      	orrs	r2, r1
10041466:	0017      	movs	r7, r2
10041468:	0005      	movs	r5, r0
1004146a:	0f7b      	lsrs	r3, r7, #29
1004146c:	00ff      	lsls	r7, r7, #3
1004146e:	08ff      	lsrs	r7, r7, #3
10041470:	075b      	lsls	r3, r3, #29
10041472:	431f      	orrs	r7, r3
10041474:	e59e      	b.n	10040fb4 <__aeabi_dsub+0x1f8>
10041476:	08c0      	lsrs	r0, r0, #3
10041478:	0763      	lsls	r3, r4, #29
1004147a:	4318      	orrs	r0, r3
1004147c:	08e5      	lsrs	r5, r4, #3
1004147e:	2900      	cmp	r1, #0
10041480:	d053      	beq.n	1004152a <__aeabi_dsub+0x76e>
10041482:	2380      	movs	r3, #128	@ 0x80
10041484:	031b      	lsls	r3, r3, #12
10041486:	421d      	tst	r5, r3
10041488:	d00a      	beq.n	100414a0 <__aeabi_dsub+0x6e4>
1004148a:	4659      	mov	r1, fp
1004148c:	08cc      	lsrs	r4, r1, #3
1004148e:	421c      	tst	r4, r3
10041490:	d106      	bne.n	100414a0 <__aeabi_dsub+0x6e4>
10041492:	2601      	movs	r6, #1
10041494:	4663      	mov	r3, ip
10041496:	0025      	movs	r5, r4
10041498:	08d0      	lsrs	r0, r2, #3
1004149a:	0749      	lsls	r1, r1, #29
1004149c:	4308      	orrs	r0, r1
1004149e:	401e      	ands	r6, r3
100414a0:	0f47      	lsrs	r7, r0, #29
100414a2:	00c0      	lsls	r0, r0, #3
100414a4:	08c0      	lsrs	r0, r0, #3
100414a6:	077f      	lsls	r7, r7, #29
100414a8:	4307      	orrs	r7, r0
100414aa:	e583      	b.n	10040fb4 <__aeabi_dsub+0x1f8>
100414ac:	1883      	adds	r3, r0, r2
100414ae:	4293      	cmp	r3, r2
100414b0:	4192      	sbcs	r2, r2
100414b2:	445c      	add	r4, fp
100414b4:	4252      	negs	r2, r2
100414b6:	18a5      	adds	r5, r4, r2
100414b8:	022a      	lsls	r2, r5, #8
100414ba:	d500      	bpl.n	100414be <__aeabi_dsub+0x702>
100414bc:	e724      	b.n	10041308 <__aeabi_dsub+0x54c>
100414be:	076f      	lsls	r7, r5, #29
100414c0:	08db      	lsrs	r3, r3, #3
100414c2:	431f      	orrs	r7, r3
100414c4:	08ed      	lsrs	r5, r5, #3
100414c6:	2301      	movs	r3, #1
100414c8:	e6d0      	b.n	1004126c <__aeabi_dsub+0x4b0>
100414ca:	46c0      	nop			@ (mov r8, r8)
100414cc:	000007ff 	.word	0x000007ff
100414d0:	000007fe 	.word	0x000007fe
100414d4:	ff7fffff 	.word	0xff7fffff
100414d8:	465b      	mov	r3, fp
100414da:	08d2      	lsrs	r2, r2, #3
100414dc:	075f      	lsls	r7, r3, #29
100414de:	4666      	mov	r6, ip
100414e0:	4317      	orrs	r7, r2
100414e2:	08dd      	lsrs	r5, r3, #3
100414e4:	e566      	b.n	10040fb4 <__aeabi_dsub+0x1f8>
100414e6:	0025      	movs	r5, r4
100414e8:	3b20      	subs	r3, #32
100414ea:	40dd      	lsrs	r5, r3
100414ec:	4663      	mov	r3, ip
100414ee:	2b20      	cmp	r3, #32
100414f0:	d005      	beq.n	100414fe <__aeabi_dsub+0x742>
100414f2:	2340      	movs	r3, #64	@ 0x40
100414f4:	4661      	mov	r1, ip
100414f6:	1a5b      	subs	r3, r3, r1
100414f8:	409c      	lsls	r4, r3
100414fa:	4320      	orrs	r0, r4
100414fc:	4680      	mov	r8, r0
100414fe:	4647      	mov	r7, r8
10041500:	1e7b      	subs	r3, r7, #1
10041502:	419f      	sbcs	r7, r3
10041504:	432f      	orrs	r7, r5
10041506:	e5a0      	b.n	1004104a <__aeabi_dsub+0x28e>
10041508:	2120      	movs	r1, #32
1004150a:	2700      	movs	r7, #0
1004150c:	1a09      	subs	r1, r1, r0
1004150e:	e4d2      	b.n	10040eb6 <__aeabi_dsub+0xfa>
10041510:	2f00      	cmp	r7, #0
10041512:	d100      	bne.n	10041516 <__aeabi_dsub+0x75a>
10041514:	e713      	b.n	1004133e <__aeabi_dsub+0x582>
10041516:	465c      	mov	r4, fp
10041518:	0017      	movs	r7, r2
1004151a:	2500      	movs	r5, #0
1004151c:	e5f6      	b.n	1004110c <__aeabi_dsub+0x350>
1004151e:	08d7      	lsrs	r7, r2, #3
10041520:	0749      	lsls	r1, r1, #29
10041522:	2302      	movs	r3, #2
10041524:	430f      	orrs	r7, r1
10041526:	092d      	lsrs	r5, r5, #4
10041528:	e6a0      	b.n	1004126c <__aeabi_dsub+0x4b0>
1004152a:	0007      	movs	r7, r0
1004152c:	e542      	b.n	10040fb4 <__aeabi_dsub+0x1f8>
1004152e:	465b      	mov	r3, fp
10041530:	2601      	movs	r6, #1
10041532:	075f      	lsls	r7, r3, #29
10041534:	08dd      	lsrs	r5, r3, #3
10041536:	4663      	mov	r3, ip
10041538:	08d2      	lsrs	r2, r2, #3
1004153a:	4317      	orrs	r7, r2
1004153c:	401e      	ands	r6, r3
1004153e:	e539      	b.n	10040fb4 <__aeabi_dsub+0x1f8>
10041540:	465b      	mov	r3, fp
10041542:	08d2      	lsrs	r2, r2, #3
10041544:	075f      	lsls	r7, r3, #29
10041546:	4317      	orrs	r7, r2
10041548:	08dd      	lsrs	r5, r3, #3
1004154a:	e533      	b.n	10040fb4 <__aeabi_dsub+0x1f8>
1004154c:	4a1e      	ldr	r2, [pc, #120]	@ (100415c8 <__aeabi_dsub+0x80c>)
1004154e:	08db      	lsrs	r3, r3, #3
10041550:	4022      	ands	r2, r4
10041552:	0757      	lsls	r7, r2, #29
10041554:	0252      	lsls	r2, r2, #9
10041556:	2501      	movs	r5, #1
10041558:	431f      	orrs	r7, r3
1004155a:	0b14      	lsrs	r4, r2, #12
1004155c:	e5c2      	b.n	100410e4 <__aeabi_dsub+0x328>
1004155e:	000e      	movs	r6, r1
10041560:	2001      	movs	r0, #1
10041562:	e65f      	b.n	10041224 <__aeabi_dsub+0x468>
10041564:	2b00      	cmp	r3, #0
10041566:	d00d      	beq.n	10041584 <__aeabi_dsub+0x7c8>
10041568:	464b      	mov	r3, r9
1004156a:	1b5b      	subs	r3, r3, r5
1004156c:	469c      	mov	ip, r3
1004156e:	2d00      	cmp	r5, #0
10041570:	d100      	bne.n	10041574 <__aeabi_dsub+0x7b8>
10041572:	e548      	b.n	10041006 <__aeabi_dsub+0x24a>
10041574:	2701      	movs	r7, #1
10041576:	2b38      	cmp	r3, #56	@ 0x38
10041578:	dd00      	ble.n	1004157c <__aeabi_dsub+0x7c0>
1004157a:	e566      	b.n	1004104a <__aeabi_dsub+0x28e>
1004157c:	2380      	movs	r3, #128	@ 0x80
1004157e:	041b      	lsls	r3, r3, #16
10041580:	431c      	orrs	r4, r3
10041582:	e550      	b.n	10041026 <__aeabi_dsub+0x26a>
10041584:	1c6b      	adds	r3, r5, #1
10041586:	4d11      	ldr	r5, [pc, #68]	@ (100415cc <__aeabi_dsub+0x810>)
10041588:	422b      	tst	r3, r5
1004158a:	d000      	beq.n	1004158e <__aeabi_dsub+0x7d2>
1004158c:	e673      	b.n	10041276 <__aeabi_dsub+0x4ba>
1004158e:	4659      	mov	r1, fp
10041590:	0023      	movs	r3, r4
10041592:	4311      	orrs	r1, r2
10041594:	468a      	mov	sl, r1
10041596:	4303      	orrs	r3, r0
10041598:	e600      	b.n	1004119c <__aeabi_dsub+0x3e0>
1004159a:	0767      	lsls	r7, r4, #29
1004159c:	08c0      	lsrs	r0, r0, #3
1004159e:	2300      	movs	r3, #0
100415a0:	4307      	orrs	r7, r0
100415a2:	08e5      	lsrs	r5, r4, #3
100415a4:	e662      	b.n	1004126c <__aeabi_dsub+0x4b0>
100415a6:	0764      	lsls	r4, r4, #29
100415a8:	08ff      	lsrs	r7, r7, #3
100415aa:	4327      	orrs	r7, r4
100415ac:	0905      	lsrs	r5, r0, #4
100415ae:	e65d      	b.n	1004126c <__aeabi_dsub+0x4b0>
100415b0:	08d2      	lsrs	r2, r2, #3
100415b2:	0749      	lsls	r1, r1, #29
100415b4:	4311      	orrs	r1, r2
100415b6:	000f      	movs	r7, r1
100415b8:	2302      	movs	r3, #2
100415ba:	092d      	lsrs	r5, r5, #4
100415bc:	e656      	b.n	1004126c <__aeabi_dsub+0x4b0>
100415be:	0007      	movs	r7, r0
100415c0:	e5a4      	b.n	1004110c <__aeabi_dsub+0x350>
100415c2:	0038      	movs	r0, r7
100415c4:	e48f      	b.n	10040ee6 <__aeabi_dsub+0x12a>
100415c6:	46c0      	nop			@ (mov r8, r8)
100415c8:	ff7fffff 	.word	0xff7fffff
100415cc:	000007fe 	.word	0x000007fe

100415d0 <__aeabi_d2iz>:
100415d0:	000b      	movs	r3, r1
100415d2:	0002      	movs	r2, r0
100415d4:	b570      	push	{r4, r5, r6, lr}
100415d6:	4d16      	ldr	r5, [pc, #88]	@ (10041630 <__aeabi_d2iz+0x60>)
100415d8:	030c      	lsls	r4, r1, #12
100415da:	b082      	sub	sp, #8
100415dc:	0049      	lsls	r1, r1, #1
100415de:	2000      	movs	r0, #0
100415e0:	9200      	str	r2, [sp, #0]
100415e2:	9301      	str	r3, [sp, #4]
100415e4:	0b24      	lsrs	r4, r4, #12
100415e6:	0d49      	lsrs	r1, r1, #21
100415e8:	0fde      	lsrs	r6, r3, #31
100415ea:	42a9      	cmp	r1, r5
100415ec:	dd04      	ble.n	100415f8 <__aeabi_d2iz+0x28>
100415ee:	4811      	ldr	r0, [pc, #68]	@ (10041634 <__aeabi_d2iz+0x64>)
100415f0:	4281      	cmp	r1, r0
100415f2:	dd03      	ble.n	100415fc <__aeabi_d2iz+0x2c>
100415f4:	4b10      	ldr	r3, [pc, #64]	@ (10041638 <__aeabi_d2iz+0x68>)
100415f6:	18f0      	adds	r0, r6, r3
100415f8:	b002      	add	sp, #8
100415fa:	bd70      	pop	{r4, r5, r6, pc}
100415fc:	2080      	movs	r0, #128	@ 0x80
100415fe:	0340      	lsls	r0, r0, #13
10041600:	4320      	orrs	r0, r4
10041602:	4c0e      	ldr	r4, [pc, #56]	@ (1004163c <__aeabi_d2iz+0x6c>)
10041604:	1a64      	subs	r4, r4, r1
10041606:	2c1f      	cmp	r4, #31
10041608:	dd08      	ble.n	1004161c <__aeabi_d2iz+0x4c>
1004160a:	4b0d      	ldr	r3, [pc, #52]	@ (10041640 <__aeabi_d2iz+0x70>)
1004160c:	1a5b      	subs	r3, r3, r1
1004160e:	40d8      	lsrs	r0, r3
10041610:	0003      	movs	r3, r0
10041612:	4258      	negs	r0, r3
10041614:	2e00      	cmp	r6, #0
10041616:	d1ef      	bne.n	100415f8 <__aeabi_d2iz+0x28>
10041618:	0018      	movs	r0, r3
1004161a:	e7ed      	b.n	100415f8 <__aeabi_d2iz+0x28>
1004161c:	4b09      	ldr	r3, [pc, #36]	@ (10041644 <__aeabi_d2iz+0x74>)
1004161e:	9a00      	ldr	r2, [sp, #0]
10041620:	469c      	mov	ip, r3
10041622:	0003      	movs	r3, r0
10041624:	4461      	add	r1, ip
10041626:	408b      	lsls	r3, r1
10041628:	40e2      	lsrs	r2, r4
1004162a:	4313      	orrs	r3, r2
1004162c:	e7f1      	b.n	10041612 <__aeabi_d2iz+0x42>
1004162e:	46c0      	nop			@ (mov r8, r8)
10041630:	000003fe 	.word	0x000003fe
10041634:	0000041d 	.word	0x0000041d
10041638:	7fffffff 	.word	0x7fffffff
1004163c:	00000433 	.word	0x00000433
10041640:	00000413 	.word	0x00000413
10041644:	fffffbed 	.word	0xfffffbed

10041648 <__aeabi_i2d>:
10041648:	b570      	push	{r4, r5, r6, lr}
1004164a:	2800      	cmp	r0, #0
1004164c:	d016      	beq.n	1004167c <__aeabi_i2d+0x34>
1004164e:	17c3      	asrs	r3, r0, #31
10041650:	18c5      	adds	r5, r0, r3
10041652:	405d      	eors	r5, r3
10041654:	0fc4      	lsrs	r4, r0, #31
10041656:	0028      	movs	r0, r5
10041658:	f7fe ff74 	bl	10040544 <__clzsi2>
1004165c:	4b10      	ldr	r3, [pc, #64]	@ (100416a0 <__aeabi_i2d+0x58>)
1004165e:	1a1b      	subs	r3, r3, r0
10041660:	055b      	lsls	r3, r3, #21
10041662:	0d5b      	lsrs	r3, r3, #21
10041664:	280a      	cmp	r0, #10
10041666:	dc14      	bgt.n	10041692 <__aeabi_i2d+0x4a>
10041668:	0002      	movs	r2, r0
1004166a:	002e      	movs	r6, r5
1004166c:	3215      	adds	r2, #21
1004166e:	4096      	lsls	r6, r2
10041670:	220b      	movs	r2, #11
10041672:	1a12      	subs	r2, r2, r0
10041674:	40d5      	lsrs	r5, r2
10041676:	032d      	lsls	r5, r5, #12
10041678:	0b2d      	lsrs	r5, r5, #12
1004167a:	e003      	b.n	10041684 <__aeabi_i2d+0x3c>
1004167c:	2400      	movs	r4, #0
1004167e:	2300      	movs	r3, #0
10041680:	2500      	movs	r5, #0
10041682:	2600      	movs	r6, #0
10041684:	051b      	lsls	r3, r3, #20
10041686:	432b      	orrs	r3, r5
10041688:	07e4      	lsls	r4, r4, #31
1004168a:	4323      	orrs	r3, r4
1004168c:	0030      	movs	r0, r6
1004168e:	0019      	movs	r1, r3
10041690:	bd70      	pop	{r4, r5, r6, pc}
10041692:	380b      	subs	r0, #11
10041694:	4085      	lsls	r5, r0
10041696:	032d      	lsls	r5, r5, #12
10041698:	2600      	movs	r6, #0
1004169a:	0b2d      	lsrs	r5, r5, #12
1004169c:	e7f2      	b.n	10041684 <__aeabi_i2d+0x3c>
1004169e:	46c0      	nop			@ (mov r8, r8)
100416a0:	0000041e 	.word	0x0000041e

100416a4 <__aeabi_ui2d>:
100416a4:	b510      	push	{r4, lr}
100416a6:	1e04      	subs	r4, r0, #0
100416a8:	d010      	beq.n	100416cc <__aeabi_ui2d+0x28>
100416aa:	f7fe ff4b 	bl	10040544 <__clzsi2>
100416ae:	4b0e      	ldr	r3, [pc, #56]	@ (100416e8 <__aeabi_ui2d+0x44>)
100416b0:	1a1b      	subs	r3, r3, r0
100416b2:	055b      	lsls	r3, r3, #21
100416b4:	0d5b      	lsrs	r3, r3, #21
100416b6:	280a      	cmp	r0, #10
100416b8:	dc0f      	bgt.n	100416da <__aeabi_ui2d+0x36>
100416ba:	220b      	movs	r2, #11
100416bc:	0021      	movs	r1, r4
100416be:	1a12      	subs	r2, r2, r0
100416c0:	40d1      	lsrs	r1, r2
100416c2:	3015      	adds	r0, #21
100416c4:	030a      	lsls	r2, r1, #12
100416c6:	4084      	lsls	r4, r0
100416c8:	0b12      	lsrs	r2, r2, #12
100416ca:	e001      	b.n	100416d0 <__aeabi_ui2d+0x2c>
100416cc:	2300      	movs	r3, #0
100416ce:	2200      	movs	r2, #0
100416d0:	051b      	lsls	r3, r3, #20
100416d2:	4313      	orrs	r3, r2
100416d4:	0020      	movs	r0, r4
100416d6:	0019      	movs	r1, r3
100416d8:	bd10      	pop	{r4, pc}
100416da:	0022      	movs	r2, r4
100416dc:	380b      	subs	r0, #11
100416de:	4082      	lsls	r2, r0
100416e0:	0312      	lsls	r2, r2, #12
100416e2:	2400      	movs	r4, #0
100416e4:	0b12      	lsrs	r2, r2, #12
100416e6:	e7f3      	b.n	100416d0 <__aeabi_ui2d+0x2c>
100416e8:	0000041e 	.word	0x0000041e

100416ec <__aeabi_cdrcmple>:
100416ec:	4684      	mov	ip, r0
100416ee:	0010      	movs	r0, r2
100416f0:	4662      	mov	r2, ip
100416f2:	468c      	mov	ip, r1
100416f4:	0019      	movs	r1, r3
100416f6:	4663      	mov	r3, ip
100416f8:	e000      	b.n	100416fc <__aeabi_cdcmpeq>
100416fa:	46c0      	nop			@ (mov r8, r8)

100416fc <__aeabi_cdcmpeq>:
100416fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100416fe:	f000 f8f3 	bl	100418e8 <__ledf2>
10041702:	2800      	cmp	r0, #0
10041704:	d401      	bmi.n	1004170a <__aeabi_cdcmpeq+0xe>
10041706:	2100      	movs	r1, #0
10041708:	42c8      	cmn	r0, r1
1004170a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1004170c <__aeabi_dcmpeq>:
1004170c:	b510      	push	{r4, lr}
1004170e:	f000 f837 	bl	10041780 <__eqdf2>
10041712:	4240      	negs	r0, r0
10041714:	3001      	adds	r0, #1
10041716:	bd10      	pop	{r4, pc}

10041718 <__aeabi_dcmplt>:
10041718:	b510      	push	{r4, lr}
1004171a:	f000 f8e5 	bl	100418e8 <__ledf2>
1004171e:	2800      	cmp	r0, #0
10041720:	db01      	blt.n	10041726 <__aeabi_dcmplt+0xe>
10041722:	2000      	movs	r0, #0
10041724:	bd10      	pop	{r4, pc}
10041726:	2001      	movs	r0, #1
10041728:	bd10      	pop	{r4, pc}
1004172a:	46c0      	nop			@ (mov r8, r8)

1004172c <__aeabi_dcmple>:
1004172c:	b510      	push	{r4, lr}
1004172e:	f000 f8db 	bl	100418e8 <__ledf2>
10041732:	2800      	cmp	r0, #0
10041734:	dd01      	ble.n	1004173a <__aeabi_dcmple+0xe>
10041736:	2000      	movs	r0, #0
10041738:	bd10      	pop	{r4, pc}
1004173a:	2001      	movs	r0, #1
1004173c:	bd10      	pop	{r4, pc}
1004173e:	46c0      	nop			@ (mov r8, r8)

10041740 <__aeabi_dcmpgt>:
10041740:	b510      	push	{r4, lr}
10041742:	f000 f861 	bl	10041808 <__gedf2>
10041746:	2800      	cmp	r0, #0
10041748:	dc01      	bgt.n	1004174e <__aeabi_dcmpgt+0xe>
1004174a:	2000      	movs	r0, #0
1004174c:	bd10      	pop	{r4, pc}
1004174e:	2001      	movs	r0, #1
10041750:	bd10      	pop	{r4, pc}
10041752:	46c0      	nop			@ (mov r8, r8)

10041754 <__aeabi_dcmpge>:
10041754:	b510      	push	{r4, lr}
10041756:	f000 f857 	bl	10041808 <__gedf2>
1004175a:	2800      	cmp	r0, #0
1004175c:	da01      	bge.n	10041762 <__aeabi_dcmpge+0xe>
1004175e:	2000      	movs	r0, #0
10041760:	bd10      	pop	{r4, pc}
10041762:	2001      	movs	r0, #1
10041764:	bd10      	pop	{r4, pc}
10041766:	46c0      	nop			@ (mov r8, r8)

10041768 <__clzdi2>:
10041768:	b510      	push	{r4, lr}
1004176a:	2900      	cmp	r1, #0
1004176c:	d103      	bne.n	10041776 <__clzdi2+0xe>
1004176e:	f7fe fee9 	bl	10040544 <__clzsi2>
10041772:	3020      	adds	r0, #32
10041774:	e002      	b.n	1004177c <__clzdi2+0x14>
10041776:	0008      	movs	r0, r1
10041778:	f7fe fee4 	bl	10040544 <__clzsi2>
1004177c:	bd10      	pop	{r4, pc}
1004177e:	46c0      	nop			@ (mov r8, r8)

10041780 <__eqdf2>:
10041780:	b5f0      	push	{r4, r5, r6, r7, lr}
10041782:	4657      	mov	r7, sl
10041784:	46de      	mov	lr, fp
10041786:	464e      	mov	r6, r9
10041788:	4645      	mov	r5, r8
1004178a:	b5e0      	push	{r5, r6, r7, lr}
1004178c:	000d      	movs	r5, r1
1004178e:	0004      	movs	r4, r0
10041790:	0fe8      	lsrs	r0, r5, #31
10041792:	4683      	mov	fp, r0
10041794:	0309      	lsls	r1, r1, #12
10041796:	0fd8      	lsrs	r0, r3, #31
10041798:	0b09      	lsrs	r1, r1, #12
1004179a:	4682      	mov	sl, r0
1004179c:	4819      	ldr	r0, [pc, #100]	@ (10041804 <__eqdf2+0x84>)
1004179e:	468c      	mov	ip, r1
100417a0:	031f      	lsls	r7, r3, #12
100417a2:	0069      	lsls	r1, r5, #1
100417a4:	005e      	lsls	r6, r3, #1
100417a6:	0d49      	lsrs	r1, r1, #21
100417a8:	0b3f      	lsrs	r7, r7, #12
100417aa:	0d76      	lsrs	r6, r6, #21
100417ac:	4281      	cmp	r1, r0
100417ae:	d018      	beq.n	100417e2 <__eqdf2+0x62>
100417b0:	4286      	cmp	r6, r0
100417b2:	d00f      	beq.n	100417d4 <__eqdf2+0x54>
100417b4:	2001      	movs	r0, #1
100417b6:	42b1      	cmp	r1, r6
100417b8:	d10d      	bne.n	100417d6 <__eqdf2+0x56>
100417ba:	45bc      	cmp	ip, r7
100417bc:	d10b      	bne.n	100417d6 <__eqdf2+0x56>
100417be:	4294      	cmp	r4, r2
100417c0:	d109      	bne.n	100417d6 <__eqdf2+0x56>
100417c2:	45d3      	cmp	fp, sl
100417c4:	d01c      	beq.n	10041800 <__eqdf2+0x80>
100417c6:	2900      	cmp	r1, #0
100417c8:	d105      	bne.n	100417d6 <__eqdf2+0x56>
100417ca:	4660      	mov	r0, ip
100417cc:	4320      	orrs	r0, r4
100417ce:	1e43      	subs	r3, r0, #1
100417d0:	4198      	sbcs	r0, r3
100417d2:	e000      	b.n	100417d6 <__eqdf2+0x56>
100417d4:	2001      	movs	r0, #1
100417d6:	bcf0      	pop	{r4, r5, r6, r7}
100417d8:	46bb      	mov	fp, r7
100417da:	46b2      	mov	sl, r6
100417dc:	46a9      	mov	r9, r5
100417de:	46a0      	mov	r8, r4
100417e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100417e2:	2001      	movs	r0, #1
100417e4:	428e      	cmp	r6, r1
100417e6:	d1f6      	bne.n	100417d6 <__eqdf2+0x56>
100417e8:	4661      	mov	r1, ip
100417ea:	4339      	orrs	r1, r7
100417ec:	000f      	movs	r7, r1
100417ee:	4317      	orrs	r7, r2
100417f0:	4327      	orrs	r7, r4
100417f2:	d1f0      	bne.n	100417d6 <__eqdf2+0x56>
100417f4:	465b      	mov	r3, fp
100417f6:	4652      	mov	r2, sl
100417f8:	1a98      	subs	r0, r3, r2
100417fa:	1e43      	subs	r3, r0, #1
100417fc:	4198      	sbcs	r0, r3
100417fe:	e7ea      	b.n	100417d6 <__eqdf2+0x56>
10041800:	2000      	movs	r0, #0
10041802:	e7e8      	b.n	100417d6 <__eqdf2+0x56>
10041804:	000007ff 	.word	0x000007ff

10041808 <__gedf2>:
10041808:	b5f0      	push	{r4, r5, r6, r7, lr}
1004180a:	4657      	mov	r7, sl
1004180c:	464e      	mov	r6, r9
1004180e:	4645      	mov	r5, r8
10041810:	46de      	mov	lr, fp
10041812:	b5e0      	push	{r5, r6, r7, lr}
10041814:	000d      	movs	r5, r1
10041816:	030e      	lsls	r6, r1, #12
10041818:	0049      	lsls	r1, r1, #1
1004181a:	0d49      	lsrs	r1, r1, #21
1004181c:	468a      	mov	sl, r1
1004181e:	0fdf      	lsrs	r7, r3, #31
10041820:	0fe9      	lsrs	r1, r5, #31
10041822:	46bc      	mov	ip, r7
10041824:	b083      	sub	sp, #12
10041826:	4f2f      	ldr	r7, [pc, #188]	@ (100418e4 <__gedf2+0xdc>)
10041828:	0004      	movs	r4, r0
1004182a:	4680      	mov	r8, r0
1004182c:	9101      	str	r1, [sp, #4]
1004182e:	0058      	lsls	r0, r3, #1
10041830:	0319      	lsls	r1, r3, #12
10041832:	4691      	mov	r9, r2
10041834:	0b36      	lsrs	r6, r6, #12
10041836:	0b09      	lsrs	r1, r1, #12
10041838:	0d40      	lsrs	r0, r0, #21
1004183a:	45ba      	cmp	sl, r7
1004183c:	d01d      	beq.n	1004187a <__gedf2+0x72>
1004183e:	42b8      	cmp	r0, r7
10041840:	d00d      	beq.n	1004185e <__gedf2+0x56>
10041842:	4657      	mov	r7, sl
10041844:	2f00      	cmp	r7, #0
10041846:	d12a      	bne.n	1004189e <__gedf2+0x96>
10041848:	4334      	orrs	r4, r6
1004184a:	2800      	cmp	r0, #0
1004184c:	d124      	bne.n	10041898 <__gedf2+0x90>
1004184e:	430a      	orrs	r2, r1
10041850:	d036      	beq.n	100418c0 <__gedf2+0xb8>
10041852:	2c00      	cmp	r4, #0
10041854:	d141      	bne.n	100418da <__gedf2+0xd2>
10041856:	4663      	mov	r3, ip
10041858:	0058      	lsls	r0, r3, #1
1004185a:	3801      	subs	r0, #1
1004185c:	e015      	b.n	1004188a <__gedf2+0x82>
1004185e:	4311      	orrs	r1, r2
10041860:	d138      	bne.n	100418d4 <__gedf2+0xcc>
10041862:	4653      	mov	r3, sl
10041864:	2b00      	cmp	r3, #0
10041866:	d101      	bne.n	1004186c <__gedf2+0x64>
10041868:	4326      	orrs	r6, r4
1004186a:	d0f4      	beq.n	10041856 <__gedf2+0x4e>
1004186c:	9b01      	ldr	r3, [sp, #4]
1004186e:	4563      	cmp	r3, ip
10041870:	d107      	bne.n	10041882 <__gedf2+0x7a>
10041872:	9b01      	ldr	r3, [sp, #4]
10041874:	0058      	lsls	r0, r3, #1
10041876:	3801      	subs	r0, #1
10041878:	e007      	b.n	1004188a <__gedf2+0x82>
1004187a:	4326      	orrs	r6, r4
1004187c:	d12a      	bne.n	100418d4 <__gedf2+0xcc>
1004187e:	4550      	cmp	r0, sl
10041880:	d021      	beq.n	100418c6 <__gedf2+0xbe>
10041882:	2001      	movs	r0, #1
10041884:	9b01      	ldr	r3, [sp, #4]
10041886:	425f      	negs	r7, r3
10041888:	4338      	orrs	r0, r7
1004188a:	b003      	add	sp, #12
1004188c:	bcf0      	pop	{r4, r5, r6, r7}
1004188e:	46bb      	mov	fp, r7
10041890:	46b2      	mov	sl, r6
10041892:	46a9      	mov	r9, r5
10041894:	46a0      	mov	r8, r4
10041896:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041898:	2c00      	cmp	r4, #0
1004189a:	d0dc      	beq.n	10041856 <__gedf2+0x4e>
1004189c:	e7e6      	b.n	1004186c <__gedf2+0x64>
1004189e:	2800      	cmp	r0, #0
100418a0:	d0ef      	beq.n	10041882 <__gedf2+0x7a>
100418a2:	9b01      	ldr	r3, [sp, #4]
100418a4:	4563      	cmp	r3, ip
100418a6:	d1ec      	bne.n	10041882 <__gedf2+0x7a>
100418a8:	4582      	cmp	sl, r0
100418aa:	dcea      	bgt.n	10041882 <__gedf2+0x7a>
100418ac:	dbe1      	blt.n	10041872 <__gedf2+0x6a>
100418ae:	428e      	cmp	r6, r1
100418b0:	d8e7      	bhi.n	10041882 <__gedf2+0x7a>
100418b2:	d1de      	bne.n	10041872 <__gedf2+0x6a>
100418b4:	45c8      	cmp	r8, r9
100418b6:	d8e4      	bhi.n	10041882 <__gedf2+0x7a>
100418b8:	2000      	movs	r0, #0
100418ba:	45c8      	cmp	r8, r9
100418bc:	d2e5      	bcs.n	1004188a <__gedf2+0x82>
100418be:	e7d8      	b.n	10041872 <__gedf2+0x6a>
100418c0:	2c00      	cmp	r4, #0
100418c2:	d0e2      	beq.n	1004188a <__gedf2+0x82>
100418c4:	e7dd      	b.n	10041882 <__gedf2+0x7a>
100418c6:	4311      	orrs	r1, r2
100418c8:	d104      	bne.n	100418d4 <__gedf2+0xcc>
100418ca:	9b01      	ldr	r3, [sp, #4]
100418cc:	4563      	cmp	r3, ip
100418ce:	d1d8      	bne.n	10041882 <__gedf2+0x7a>
100418d0:	2000      	movs	r0, #0
100418d2:	e7da      	b.n	1004188a <__gedf2+0x82>
100418d4:	2002      	movs	r0, #2
100418d6:	4240      	negs	r0, r0
100418d8:	e7d7      	b.n	1004188a <__gedf2+0x82>
100418da:	9b01      	ldr	r3, [sp, #4]
100418dc:	4563      	cmp	r3, ip
100418de:	d0e6      	beq.n	100418ae <__gedf2+0xa6>
100418e0:	e7cf      	b.n	10041882 <__gedf2+0x7a>
100418e2:	46c0      	nop			@ (mov r8, r8)
100418e4:	000007ff 	.word	0x000007ff

100418e8 <__ledf2>:
100418e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100418ea:	4657      	mov	r7, sl
100418ec:	464e      	mov	r6, r9
100418ee:	4645      	mov	r5, r8
100418f0:	46de      	mov	lr, fp
100418f2:	b5e0      	push	{r5, r6, r7, lr}
100418f4:	000d      	movs	r5, r1
100418f6:	030e      	lsls	r6, r1, #12
100418f8:	0049      	lsls	r1, r1, #1
100418fa:	0d49      	lsrs	r1, r1, #21
100418fc:	468a      	mov	sl, r1
100418fe:	0fdf      	lsrs	r7, r3, #31
10041900:	0fe9      	lsrs	r1, r5, #31
10041902:	46bc      	mov	ip, r7
10041904:	b083      	sub	sp, #12
10041906:	4f2e      	ldr	r7, [pc, #184]	@ (100419c0 <__ledf2+0xd8>)
10041908:	0004      	movs	r4, r0
1004190a:	4680      	mov	r8, r0
1004190c:	9101      	str	r1, [sp, #4]
1004190e:	0058      	lsls	r0, r3, #1
10041910:	0319      	lsls	r1, r3, #12
10041912:	4691      	mov	r9, r2
10041914:	0b36      	lsrs	r6, r6, #12
10041916:	0b09      	lsrs	r1, r1, #12
10041918:	0d40      	lsrs	r0, r0, #21
1004191a:	45ba      	cmp	sl, r7
1004191c:	d01e      	beq.n	1004195c <__ledf2+0x74>
1004191e:	42b8      	cmp	r0, r7
10041920:	d00d      	beq.n	1004193e <__ledf2+0x56>
10041922:	4657      	mov	r7, sl
10041924:	2f00      	cmp	r7, #0
10041926:	d127      	bne.n	10041978 <__ledf2+0x90>
10041928:	4334      	orrs	r4, r6
1004192a:	2800      	cmp	r0, #0
1004192c:	d133      	bne.n	10041996 <__ledf2+0xae>
1004192e:	430a      	orrs	r2, r1
10041930:	d034      	beq.n	1004199c <__ledf2+0xb4>
10041932:	2c00      	cmp	r4, #0
10041934:	d140      	bne.n	100419b8 <__ledf2+0xd0>
10041936:	4663      	mov	r3, ip
10041938:	0058      	lsls	r0, r3, #1
1004193a:	3801      	subs	r0, #1
1004193c:	e015      	b.n	1004196a <__ledf2+0x82>
1004193e:	4311      	orrs	r1, r2
10041940:	d112      	bne.n	10041968 <__ledf2+0x80>
10041942:	4653      	mov	r3, sl
10041944:	2b00      	cmp	r3, #0
10041946:	d101      	bne.n	1004194c <__ledf2+0x64>
10041948:	4326      	orrs	r6, r4
1004194a:	d0f4      	beq.n	10041936 <__ledf2+0x4e>
1004194c:	9b01      	ldr	r3, [sp, #4]
1004194e:	4563      	cmp	r3, ip
10041950:	d01d      	beq.n	1004198e <__ledf2+0xa6>
10041952:	2001      	movs	r0, #1
10041954:	9b01      	ldr	r3, [sp, #4]
10041956:	425f      	negs	r7, r3
10041958:	4338      	orrs	r0, r7
1004195a:	e006      	b.n	1004196a <__ledf2+0x82>
1004195c:	4326      	orrs	r6, r4
1004195e:	d103      	bne.n	10041968 <__ledf2+0x80>
10041960:	4550      	cmp	r0, sl
10041962:	d1f6      	bne.n	10041952 <__ledf2+0x6a>
10041964:	4311      	orrs	r1, r2
10041966:	d01c      	beq.n	100419a2 <__ledf2+0xba>
10041968:	2002      	movs	r0, #2
1004196a:	b003      	add	sp, #12
1004196c:	bcf0      	pop	{r4, r5, r6, r7}
1004196e:	46bb      	mov	fp, r7
10041970:	46b2      	mov	sl, r6
10041972:	46a9      	mov	r9, r5
10041974:	46a0      	mov	r8, r4
10041976:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041978:	2800      	cmp	r0, #0
1004197a:	d0ea      	beq.n	10041952 <__ledf2+0x6a>
1004197c:	9b01      	ldr	r3, [sp, #4]
1004197e:	4563      	cmp	r3, ip
10041980:	d1e7      	bne.n	10041952 <__ledf2+0x6a>
10041982:	4582      	cmp	sl, r0
10041984:	dce5      	bgt.n	10041952 <__ledf2+0x6a>
10041986:	db02      	blt.n	1004198e <__ledf2+0xa6>
10041988:	428e      	cmp	r6, r1
1004198a:	d8e2      	bhi.n	10041952 <__ledf2+0x6a>
1004198c:	d00e      	beq.n	100419ac <__ledf2+0xc4>
1004198e:	9b01      	ldr	r3, [sp, #4]
10041990:	0058      	lsls	r0, r3, #1
10041992:	3801      	subs	r0, #1
10041994:	e7e9      	b.n	1004196a <__ledf2+0x82>
10041996:	2c00      	cmp	r4, #0
10041998:	d0cd      	beq.n	10041936 <__ledf2+0x4e>
1004199a:	e7d7      	b.n	1004194c <__ledf2+0x64>
1004199c:	2c00      	cmp	r4, #0
1004199e:	d0e4      	beq.n	1004196a <__ledf2+0x82>
100419a0:	e7d7      	b.n	10041952 <__ledf2+0x6a>
100419a2:	9b01      	ldr	r3, [sp, #4]
100419a4:	2000      	movs	r0, #0
100419a6:	4563      	cmp	r3, ip
100419a8:	d0df      	beq.n	1004196a <__ledf2+0x82>
100419aa:	e7d2      	b.n	10041952 <__ledf2+0x6a>
100419ac:	45c8      	cmp	r8, r9
100419ae:	d8d0      	bhi.n	10041952 <__ledf2+0x6a>
100419b0:	2000      	movs	r0, #0
100419b2:	45c8      	cmp	r8, r9
100419b4:	d2d9      	bcs.n	1004196a <__ledf2+0x82>
100419b6:	e7ea      	b.n	1004198e <__ledf2+0xa6>
100419b8:	9b01      	ldr	r3, [sp, #4]
100419ba:	4563      	cmp	r3, ip
100419bc:	d0e4      	beq.n	10041988 <__ledf2+0xa0>
100419be:	e7c8      	b.n	10041952 <__ledf2+0x6a>
100419c0:	000007ff 	.word	0x000007ff

100419c4 <BLUETOOTH_BufferInit>:
 * @function: BLUETOOTH_BufferInit()
 * @brief: initialize the the bluetooth tx buffer for virtual USART communication
 * @param: none
 * @return: none
 */
void BLUETOOTH_BufferInit(){
100419c4:	b580      	push	{r7, lr}
100419c6:	af00      	add	r7, sp, #0
	buffer.head = 0;
100419c8:	4a07      	ldr	r2, [pc, #28]	@ (100419e8 <BLUETOOTH_BufferInit+0x24>)
100419ca:	2380      	movs	r3, #128	@ 0x80
100419cc:	009b      	lsls	r3, r3, #2
100419ce:	2100      	movs	r1, #0
100419d0:	54d1      	strb	r1, [r2, r3]
	buffer.tail = 0;
100419d2:	4b05      	ldr	r3, [pc, #20]	@ (100419e8 <BLUETOOTH_BufferInit+0x24>)
100419d4:	4a05      	ldr	r2, [pc, #20]	@ (100419ec <BLUETOOTH_BufferInit+0x28>)
100419d6:	2100      	movs	r1, #0
100419d8:	5499      	strb	r1, [r3, r2]
	buffer.full = 0;
100419da:	4b03      	ldr	r3, [pc, #12]	@ (100419e8 <BLUETOOTH_BufferInit+0x24>)
100419dc:	4a04      	ldr	r2, [pc, #16]	@ (100419f0 <BLUETOOTH_BufferInit+0x2c>)
100419de:	2100      	movs	r1, #0
100419e0:	5499      	strb	r1, [r3, r2]
}
100419e2:	46c0      	nop			@ (mov r8, r8)
100419e4:	46bd      	mov	sp, r7
100419e6:	bd80      	pop	{r7, pc}
100419e8:	20000194 	.word	0x20000194
100419ec:	00000201 	.word	0x00000201
100419f0:	00000202 	.word	0x00000202

100419f4 <BLUETOOTH_WriteBuffer>:
 * @function: BLUETOOTH_WriteBuffer(uint8_t input)
 * @brief: places one character into the buffer for the external PC to read
 * @param: input: character to be placed in buffer
 * @return: none
 */
uint8_t BLUETOOTH_WriteBuffer(uint8_t input){
100419f4:	b580      	push	{r7, lr}
100419f6:	b082      	sub	sp, #8
100419f8:	af00      	add	r7, sp, #0
100419fa:	0002      	movs	r2, r0
100419fc:	1dfb      	adds	r3, r7, #7
100419fe:	701a      	strb	r2, [r3, #0]
	if(!buffer.full){
10041a00:	4b1f      	ldr	r3, [pc, #124]	@ (10041a80 <BLUETOOTH_WriteBuffer+0x8c>)
10041a02:	4a20      	ldr	r2, [pc, #128]	@ (10041a84 <BLUETOOTH_WriteBuffer+0x90>)
10041a04:	5c9b      	ldrb	r3, [r3, r2]
10041a06:	2b00      	cmp	r3, #0
10041a08:	d134      	bne.n	10041a74 <BLUETOOTH_WriteBuffer+0x80>
		buffer.data[buffer.head] = input;
10041a0a:	4a1d      	ldr	r2, [pc, #116]	@ (10041a80 <BLUETOOTH_WriteBuffer+0x8c>)
10041a0c:	2380      	movs	r3, #128	@ 0x80
10041a0e:	009b      	lsls	r3, r3, #2
10041a10:	5cd3      	ldrb	r3, [r2, r3]
10041a12:	0019      	movs	r1, r3
10041a14:	4b1a      	ldr	r3, [pc, #104]	@ (10041a80 <BLUETOOTH_WriteBuffer+0x8c>)
10041a16:	1dfa      	adds	r2, r7, #7
10041a18:	7812      	ldrb	r2, [r2, #0]
10041a1a:	545a      	strb	r2, [r3, r1]
		buffer.head++;
10041a1c:	4a18      	ldr	r2, [pc, #96]	@ (10041a80 <BLUETOOTH_WriteBuffer+0x8c>)
10041a1e:	2380      	movs	r3, #128	@ 0x80
10041a20:	009b      	lsls	r3, r3, #2
10041a22:	5cd3      	ldrb	r3, [r2, r3]
10041a24:	3301      	adds	r3, #1
10041a26:	b2d9      	uxtb	r1, r3
10041a28:	4a15      	ldr	r2, [pc, #84]	@ (10041a80 <BLUETOOTH_WriteBuffer+0x8c>)
10041a2a:	2380      	movs	r3, #128	@ 0x80
10041a2c:	009b      	lsls	r3, r3, #2
10041a2e:	54d1      	strb	r1, [r2, r3]
		buffer.head %= BTBUFFERSIZE;
10041a30:	4a13      	ldr	r2, [pc, #76]	@ (10041a80 <BLUETOOTH_WriteBuffer+0x8c>)
10041a32:	2380      	movs	r3, #128	@ 0x80
10041a34:	009b      	lsls	r3, r3, #2
10041a36:	5cd1      	ldrb	r1, [r2, r3]
10041a38:	4a11      	ldr	r2, [pc, #68]	@ (10041a80 <BLUETOOTH_WriteBuffer+0x8c>)
10041a3a:	2380      	movs	r3, #128	@ 0x80
10041a3c:	009b      	lsls	r3, r3, #2
10041a3e:	54d1      	strb	r1, [r2, r3]
		buffer.full = ((buffer.head+1)%BTBUFFERSIZE == buffer.tail);
10041a40:	4a0f      	ldr	r2, [pc, #60]	@ (10041a80 <BLUETOOTH_WriteBuffer+0x8c>)
10041a42:	2380      	movs	r3, #128	@ 0x80
10041a44:	009b      	lsls	r3, r3, #2
10041a46:	5cd3      	ldrb	r3, [r2, r3]
10041a48:	3301      	adds	r3, #1
10041a4a:	4a0f      	ldr	r2, [pc, #60]	@ (10041a88 <BLUETOOTH_WriteBuffer+0x94>)
10041a4c:	4013      	ands	r3, r2
10041a4e:	d503      	bpl.n	10041a58 <BLUETOOTH_WriteBuffer+0x64>
10041a50:	3b01      	subs	r3, #1
10041a52:	4a0e      	ldr	r2, [pc, #56]	@ (10041a8c <BLUETOOTH_WriteBuffer+0x98>)
10041a54:	4313      	orrs	r3, r2
10041a56:	3301      	adds	r3, #1
10041a58:	0019      	movs	r1, r3
10041a5a:	4b09      	ldr	r3, [pc, #36]	@ (10041a80 <BLUETOOTH_WriteBuffer+0x8c>)
10041a5c:	4a0c      	ldr	r2, [pc, #48]	@ (10041a90 <BLUETOOTH_WriteBuffer+0x9c>)
10041a5e:	5c9b      	ldrb	r3, [r3, r2]
10041a60:	1acb      	subs	r3, r1, r3
10041a62:	425a      	negs	r2, r3
10041a64:	4153      	adcs	r3, r2
10041a66:	b2db      	uxtb	r3, r3
10041a68:	0019      	movs	r1, r3
10041a6a:	4b05      	ldr	r3, [pc, #20]	@ (10041a80 <BLUETOOTH_WriteBuffer+0x8c>)
10041a6c:	4a05      	ldr	r2, [pc, #20]	@ (10041a84 <BLUETOOTH_WriteBuffer+0x90>)
10041a6e:	5499      	strb	r1, [r3, r2]

		return 1;
10041a70:	2301      	movs	r3, #1
10041a72:	e000      	b.n	10041a76 <BLUETOOTH_WriteBuffer+0x82>
	} else {
		return 0;
10041a74:	2300      	movs	r3, #0
	}
}
10041a76:	0018      	movs	r0, r3
10041a78:	46bd      	mov	sp, r7
10041a7a:	b002      	add	sp, #8
10041a7c:	bd80      	pop	{r7, pc}
10041a7e:	46c0      	nop			@ (mov r8, r8)
10041a80:	20000194 	.word	0x20000194
10041a84:	00000202 	.word	0x00000202
10041a88:	800001ff 	.word	0x800001ff
10041a8c:	fffffe00 	.word	0xfffffe00
10041a90:	00000201 	.word	0x00000201

10041a94 <BLUETOOTH_ReadBuffer>:
 * @function: BLUETOOTH_ReadBuffer(uint8_t input)
 * @brief: returns a character from the buffer and removes it from the buffer
 * @param: none
 * @return: -1 if buffer empty, uint8_t character data if the buffer has data to return
 */
int16_t BLUETOOTH_ReadBuffer(){
10041a94:	b580      	push	{r7, lr}
10041a96:	b082      	sub	sp, #8
10041a98:	af00      	add	r7, sp, #0
	int16_t ret = -1;
10041a9a:	1dbb      	adds	r3, r7, #6
10041a9c:	2201      	movs	r2, #1
10041a9e:	4252      	negs	r2, r2
10041aa0:	801a      	strh	r2, [r3, #0]
	if(buffer.head != buffer.tail || buffer.full){
10041aa2:	4a21      	ldr	r2, [pc, #132]	@ (10041b28 <BLUETOOTH_ReadBuffer+0x94>)
10041aa4:	2380      	movs	r3, #128	@ 0x80
10041aa6:	009b      	lsls	r3, r3, #2
10041aa8:	5cd2      	ldrb	r2, [r2, r3]
10041aaa:	4b1f      	ldr	r3, [pc, #124]	@ (10041b28 <BLUETOOTH_ReadBuffer+0x94>)
10041aac:	491f      	ldr	r1, [pc, #124]	@ (10041b2c <BLUETOOTH_ReadBuffer+0x98>)
10041aae:	5c5b      	ldrb	r3, [r3, r1]
10041ab0:	429a      	cmp	r2, r3
10041ab2:	d104      	bne.n	10041abe <BLUETOOTH_ReadBuffer+0x2a>
10041ab4:	4b1c      	ldr	r3, [pc, #112]	@ (10041b28 <BLUETOOTH_ReadBuffer+0x94>)
10041ab6:	4a1e      	ldr	r2, [pc, #120]	@ (10041b30 <BLUETOOTH_ReadBuffer+0x9c>)
10041ab8:	5c9b      	ldrb	r3, [r3, r2]
10041aba:	2b00      	cmp	r3, #0
10041abc:	d02d      	beq.n	10041b1a <BLUETOOTH_ReadBuffer+0x86>

		ret = buffer.data[buffer.tail];
10041abe:	4b1a      	ldr	r3, [pc, #104]	@ (10041b28 <BLUETOOTH_ReadBuffer+0x94>)
10041ac0:	4a1a      	ldr	r2, [pc, #104]	@ (10041b2c <BLUETOOTH_ReadBuffer+0x98>)
10041ac2:	5c9b      	ldrb	r3, [r3, r2]
10041ac4:	001a      	movs	r2, r3
10041ac6:	4b18      	ldr	r3, [pc, #96]	@ (10041b28 <BLUETOOTH_ReadBuffer+0x94>)
10041ac8:	5c9a      	ldrb	r2, [r3, r2]
10041aca:	1dbb      	adds	r3, r7, #6
10041acc:	801a      	strh	r2, [r3, #0]
		buffer.tail++;
10041ace:	4b16      	ldr	r3, [pc, #88]	@ (10041b28 <BLUETOOTH_ReadBuffer+0x94>)
10041ad0:	4a16      	ldr	r2, [pc, #88]	@ (10041b2c <BLUETOOTH_ReadBuffer+0x98>)
10041ad2:	5c9b      	ldrb	r3, [r3, r2]
10041ad4:	3301      	adds	r3, #1
10041ad6:	b2d9      	uxtb	r1, r3
10041ad8:	4b13      	ldr	r3, [pc, #76]	@ (10041b28 <BLUETOOTH_ReadBuffer+0x94>)
10041ada:	4a14      	ldr	r2, [pc, #80]	@ (10041b2c <BLUETOOTH_ReadBuffer+0x98>)
10041adc:	5499      	strb	r1, [r3, r2]
		buffer.tail %= BTBUFFERSIZE;
10041ade:	4b12      	ldr	r3, [pc, #72]	@ (10041b28 <BLUETOOTH_ReadBuffer+0x94>)
10041ae0:	4a12      	ldr	r2, [pc, #72]	@ (10041b2c <BLUETOOTH_ReadBuffer+0x98>)
10041ae2:	5c99      	ldrb	r1, [r3, r2]
10041ae4:	4b10      	ldr	r3, [pc, #64]	@ (10041b28 <BLUETOOTH_ReadBuffer+0x94>)
10041ae6:	4a11      	ldr	r2, [pc, #68]	@ (10041b2c <BLUETOOTH_ReadBuffer+0x98>)
10041ae8:	5499      	strb	r1, [r3, r2]
		buffer.full = ((buffer.head+1)%BTBUFFERSIZE == buffer.tail);
10041aea:	4a0f      	ldr	r2, [pc, #60]	@ (10041b28 <BLUETOOTH_ReadBuffer+0x94>)
10041aec:	2380      	movs	r3, #128	@ 0x80
10041aee:	009b      	lsls	r3, r3, #2
10041af0:	5cd3      	ldrb	r3, [r2, r3]
10041af2:	3301      	adds	r3, #1
10041af4:	4a0f      	ldr	r2, [pc, #60]	@ (10041b34 <BLUETOOTH_ReadBuffer+0xa0>)
10041af6:	4013      	ands	r3, r2
10041af8:	d503      	bpl.n	10041b02 <BLUETOOTH_ReadBuffer+0x6e>
10041afa:	3b01      	subs	r3, #1
10041afc:	4a0e      	ldr	r2, [pc, #56]	@ (10041b38 <BLUETOOTH_ReadBuffer+0xa4>)
10041afe:	4313      	orrs	r3, r2
10041b00:	3301      	adds	r3, #1
10041b02:	0019      	movs	r1, r3
10041b04:	4b08      	ldr	r3, [pc, #32]	@ (10041b28 <BLUETOOTH_ReadBuffer+0x94>)
10041b06:	4a09      	ldr	r2, [pc, #36]	@ (10041b2c <BLUETOOTH_ReadBuffer+0x98>)
10041b08:	5c9b      	ldrb	r3, [r3, r2]
10041b0a:	1acb      	subs	r3, r1, r3
10041b0c:	425a      	negs	r2, r3
10041b0e:	4153      	adcs	r3, r2
10041b10:	b2db      	uxtb	r3, r3
10041b12:	0019      	movs	r1, r3
10041b14:	4b04      	ldr	r3, [pc, #16]	@ (10041b28 <BLUETOOTH_ReadBuffer+0x94>)
10041b16:	4a06      	ldr	r2, [pc, #24]	@ (10041b30 <BLUETOOTH_ReadBuffer+0x9c>)
10041b18:	5499      	strb	r1, [r3, r2]
	}
	return ret;
10041b1a:	1dbb      	adds	r3, r7, #6
10041b1c:	2200      	movs	r2, #0
10041b1e:	5e9b      	ldrsh	r3, [r3, r2]
}
10041b20:	0018      	movs	r0, r3
10041b22:	46bd      	mov	sp, r7
10041b24:	b002      	add	sp, #8
10041b26:	bd80      	pop	{r7, pc}
10041b28:	20000194 	.word	0x20000194
10041b2c:	00000201 	.word	0x00000201
10041b30:	00000202 	.word	0x00000202
10041b34:	800001ff 	.word	0x800001ff
10041b38:	fffffe00 	.word	0xfffffe00

10041b3c <BLUETOOTH_BufferEmpty>:
 * @function: BLUETOOTH_BufferEmpty()
 * @brief: returns if the buffer is empty or if the Bluetooth is disconnected
 * @param: none
 * @return: 0 if disconnected, 1 if connected and empty, 2 if connected and not empty
 */
uint8_t BLUETOOTH_BufferEmpty(){
10041b3c:	b580      	push	{r7, lr}
10041b3e:	af00      	add	r7, sp, #0
	return (buffer.head == buffer.tail && !buffer.full);
10041b40:	4a0a      	ldr	r2, [pc, #40]	@ (10041b6c <BLUETOOTH_BufferEmpty+0x30>)
10041b42:	2380      	movs	r3, #128	@ 0x80
10041b44:	009b      	lsls	r3, r3, #2
10041b46:	5cd2      	ldrb	r2, [r2, r3]
10041b48:	4b08      	ldr	r3, [pc, #32]	@ (10041b6c <BLUETOOTH_BufferEmpty+0x30>)
10041b4a:	4909      	ldr	r1, [pc, #36]	@ (10041b70 <BLUETOOTH_BufferEmpty+0x34>)
10041b4c:	5c5b      	ldrb	r3, [r3, r1]
10041b4e:	429a      	cmp	r2, r3
10041b50:	d106      	bne.n	10041b60 <BLUETOOTH_BufferEmpty+0x24>
10041b52:	4b06      	ldr	r3, [pc, #24]	@ (10041b6c <BLUETOOTH_BufferEmpty+0x30>)
10041b54:	4a07      	ldr	r2, [pc, #28]	@ (10041b74 <BLUETOOTH_BufferEmpty+0x38>)
10041b56:	5c9b      	ldrb	r3, [r3, r2]
10041b58:	2b00      	cmp	r3, #0
10041b5a:	d101      	bne.n	10041b60 <BLUETOOTH_BufferEmpty+0x24>
10041b5c:	2301      	movs	r3, #1
10041b5e:	e000      	b.n	10041b62 <BLUETOOTH_BufferEmpty+0x26>
10041b60:	2300      	movs	r3, #0
10041b62:	b2db      	uxtb	r3, r3
}
10041b64:	0018      	movs	r0, r3
10041b66:	46bd      	mov	sp, r7
10041b68:	bd80      	pop	{r7, pc}
10041b6a:	46c0      	nop			@ (mov r8, r8)
10041b6c:	20000194 	.word	0x20000194
10041b70:	00000201 	.word	0x00000201
10041b74:	00000202 	.word	0x00000202

10041b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
int SystemClock_Config(void)
{
10041b78:	b590      	push	{r4, r7, lr}
10041b7a:	b089      	sub	sp, #36	@ 0x24
10041b7c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10041b7e:	2408      	movs	r4, #8
10041b80:	193b      	adds	r3, r7, r4
10041b82:	0018      	movs	r0, r3
10041b84:	2318      	movs	r3, #24
10041b86:	001a      	movs	r2, r3
10041b88:	2100      	movs	r1, #0
10041b8a:	f025 ff67 	bl	10067a5c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10041b8e:	003b      	movs	r3, r7
10041b90:	0018      	movs	r0, r3
10041b92:	2308      	movs	r3, #8
10041b94:	001a      	movs	r2, r3
10041b96:	2100      	movs	r1, #0
10041b98:	f025 ff60 	bl	10067a5c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
10041b9c:	193b      	adds	r3, r7, r4
10041b9e:	2205      	movs	r2, #5
10041ba0:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
10041ba2:	193b      	adds	r3, r7, r4
10041ba4:	2280      	movs	r2, #128	@ 0x80
10041ba6:	0252      	lsls	r2, r2, #9
10041ba8:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
10041baa:	193b      	adds	r3, r7, r4
10041bac:	2204      	movs	r2, #4
10041bae:	611a      	str	r2, [r3, #16]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10041bb0:	193b      	adds	r3, r7, r4
10041bb2:	0018      	movs	r0, r3
10041bb4:	f00a ff90 	bl	1004cad8 <HAL_RCC_OscConfig>
10041bb8:	1e03      	subs	r3, r0, #0
10041bba:	d001      	beq.n	10041bc0 <SystemClock_Config+0x48>
	{
		return INIT_ERROR;
10041bbc:	2300      	movs	r3, #0
10041bbe:	e00f      	b.n	10041be0 <SystemClock_Config+0x68>
	}

	/** Configure the SYSCLKSource and SYSCLKDivider
	*/
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_RC64MPLL;
10041bc0:	003b      	movs	r3, r7
10041bc2:	2200      	movs	r2, #0
10041bc4:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV1;
10041bc6:	003b      	movs	r3, r7
10041bc8:	2200      	movs	r2, #0
10041bca:	605a      	str	r2, [r3, #4]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_1) != HAL_OK)
10041bcc:	003b      	movs	r3, r7
10041bce:	2110      	movs	r1, #16
10041bd0:	0018      	movs	r0, r3
10041bd2:	f00b f8cb 	bl	1004cd6c <HAL_RCC_ClockConfig>
10041bd6:	1e03      	subs	r3, r0, #0
10041bd8:	d001      	beq.n	10041bde <SystemClock_Config+0x66>
	{
		return INIT_ERROR;
10041bda:	2300      	movs	r3, #0
10041bdc:	e000      	b.n	10041be0 <SystemClock_Config+0x68>
	}
	return INIT_OK;
10041bde:	2301      	movs	r3, #1
}
10041be0:	0018      	movs	r0, r3
10041be2:	46bd      	mov	sp, r7
10041be4:	b009      	add	sp, #36	@ 0x24
10041be6:	bd90      	pop	{r4, r7, pc}

10041be8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
int PeriphCommonClock_Config(void)
{
10041be8:	b580      	push	{r7, lr}
10041bea:	b086      	sub	sp, #24
10041bec:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10041bee:	003b      	movs	r3, r7
10041bf0:	0018      	movs	r0, r3
10041bf2:	2318      	movs	r3, #24
10041bf4:	001a      	movs	r2, r3
10041bf6:	2100      	movs	r1, #0
10041bf8:	f025 ff30 	bl	10067a5c <memset>

	/** Initializes the peripherals clock
	*/
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
10041bfc:	003b      	movs	r3, r7
10041bfe:	2202      	movs	r2, #2
10041c00:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
10041c02:	003b      	movs	r3, r7
10041c04:	2280      	movs	r2, #128	@ 0x80
10041c06:	0152      	lsls	r2, r2, #5
10041c08:	615a      	str	r2, [r3, #20]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10041c0a:	003b      	movs	r3, r7
10041c0c:	0018      	movs	r0, r3
10041c0e:	f00b fa43 	bl	1004d098 <HAL_RCCEx_PeriphCLKConfig>
10041c12:	1e03      	subs	r3, r0, #0
10041c14:	d001      	beq.n	10041c1a <PeriphCommonClock_Config+0x32>
	{
		return INIT_ERROR;
10041c16:	2300      	movs	r3, #0
10041c18:	e000      	b.n	10041c1c <PeriphCommonClock_Config+0x34>
	}
	return INIT_OK;
10041c1a:	2301      	movs	r3, #1
}
10041c1c:	0018      	movs	r0, r3
10041c1e:	46bd      	mov	sp, r7
10041c20:	b006      	add	sp, #24
10041c22:	bd80      	pop	{r7, pc}

10041c24 <BOARD_Init>:
 * @function: BOARD_Init()
 * @brief: initialize the board's timers
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int BOARD_Init(void){
10041c24:	b580      	push	{r7, lr}
10041c26:	b082      	sub	sp, #8
10041c28:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
10041c2a:	4b0f      	ldr	r3, [pc, #60]	@ (10041c68 <BOARD_Init+0x44>)
10041c2c:	781b      	ldrb	r3, [r3, #0]
10041c2e:	2b00      	cmp	r3, #0
10041c30:	d001      	beq.n	10041c36 <BOARD_Init+0x12>
10041c32:	2301      	movs	r3, #1
10041c34:	e013      	b.n	10041c5e <BOARD_Init+0x3a>
	HAL_Init();
10041c36:	f005 fdb9 	bl	100477ac <HAL_Init>
	int errorFlag = INIT_OK;
10041c3a:	2301      	movs	r3, #1
10041c3c:	607b      	str	r3, [r7, #4]
	if(PeriphCommonClock_Config() == INIT_ERROR){
10041c3e:	f7ff ffd3 	bl	10041be8 <PeriphCommonClock_Config>
10041c42:	1e03      	subs	r3, r0, #0
10041c44:	d101      	bne.n	10041c4a <BOARD_Init+0x26>
		errorFlag = INIT_ERROR;
10041c46:	2300      	movs	r3, #0
10041c48:	607b      	str	r3, [r7, #4]
	}
	if(SystemClock_Config() == INIT_ERROR){
10041c4a:	f7ff ff95 	bl	10041b78 <SystemClock_Config>
10041c4e:	1e03      	subs	r3, r0, #0
10041c50:	d101      	bne.n	10041c56 <BOARD_Init+0x32>
		errorFlag = INIT_ERROR;
10041c52:	2300      	movs	r3, #0
10041c54:	607b      	str	r3, [r7, #4]
	}
	initialized = 1;
10041c56:	4b04      	ldr	r3, [pc, #16]	@ (10041c68 <BOARD_Init+0x44>)
10041c58:	2201      	movs	r2, #1
10041c5a:	701a      	strb	r2, [r3, #0]
	return errorFlag;
10041c5c:	687b      	ldr	r3, [r7, #4]
}
10041c5e:	0018      	movs	r0, r3
10041c60:	46bd      	mov	sp, r7
10041c62:	b002      	add	sp, #8
10041c64:	bd80      	pop	{r7, pc}
10041c66:	46c0      	nop			@ (mov r8, r8)
10041c68:	20000397 	.word	0x20000397

10041c6c <BOARD_CrashHandler>:
 * @brief: disables all interrupts and enters an infinite loop
 * @param: none
 * @return: none
 */
void BOARD_CrashHandler(void)
{
10041c6c:	b580      	push	{r7, lr}
10041c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10041c70:	b672      	cpsid	i
}
10041c72:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1){
10041c74:	46c0      	nop			@ (mov r8, r8)
10041c76:	e7fd      	b.n	10041c74 <BOARD_CrashHandler+0x8>

10041c78 <Error_Handler>:
 * @brief: disables all interrupts and enters an infinite loop
 * @param: none
 * @return: none
 */
void Error_Handler(void)
{
10041c78:	b580      	push	{r7, lr}
10041c7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
10041c7c:	b672      	cpsid	i
}
10041c7e:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1);
10041c80:	46c0      	nop			@ (mov r8, r8)
10041c82:	e7fd      	b.n	10041c80 <Error_Handler+0x8>

10041c84 <DrawMain>:
static uint8_t cursorpos;//display cursors
static uint8_t folderselect;
static uint8_t trackselect;
//----------------------------------------Private Functions--------------------------------------

void DrawMain(){
10041c84:	b5b0      	push	{r4, r5, r7, lr}
10041c86:	b0b2      	sub	sp, #200	@ 0xc8
10041c88:	af06      	add	r7, sp, #24
					  "Back:play track\n"
			   	   	  "Sel:append schedule\n"
	   	   	  	  	  "%c:Set Date/time\n"
					  "%c:more options\n"
					  "Volume: %c%.3d%c\n"
					  "Current song %d-%d",DOWN_ARROW_OFF, UP_ARROW_OFF, LEFT_ARROW_ON, FLASH_GetVolume(), RIGHT_ARROW_ON, MP3_GetCurrentFile()>>8, MP3_GetCurrentFile()&0xFF);
10041c8a:	f002 fb5f 	bl	1004434c <FLASH_GetVolume>
10041c8e:	0003      	movs	r3, r0
	sprintf(maintext, "Main menu\n"
10041c90:	001c      	movs	r4, r3
					  "Current song %d-%d",DOWN_ARROW_OFF, UP_ARROW_OFF, LEFT_ARROW_ON, FLASH_GetVolume(), RIGHT_ARROW_ON, MP3_GetCurrentFile()>>8, MP3_GetCurrentFile()&0xFF);
10041c92:	f003 fe63 	bl	1004595c <MP3_GetCurrentFile>
10041c96:	0003      	movs	r3, r0
	sprintf(maintext, "Main menu\n"
10041c98:	0a1b      	lsrs	r3, r3, #8
10041c9a:	b29b      	uxth	r3, r3
10041c9c:	001d      	movs	r5, r3
					  "Current song %d-%d",DOWN_ARROW_OFF, UP_ARROW_OFF, LEFT_ARROW_ON, FLASH_GetVolume(), RIGHT_ARROW_ON, MP3_GetCurrentFile()>>8, MP3_GetCurrentFile()&0xFF);
10041c9e:	f003 fe5d 	bl	1004595c <MP3_GetCurrentFile>
10041ca2:	0003      	movs	r3, r0
	sprintf(maintext, "Main menu\n"
10041ca4:	001a      	movs	r2, r3
10041ca6:	23ff      	movs	r3, #255	@ 0xff
10041ca8:	4013      	ands	r3, r2
10041caa:	490d      	ldr	r1, [pc, #52]	@ (10041ce0 <DrawMain+0x5c>)
10041cac:	0038      	movs	r0, r7
10041cae:	9304      	str	r3, [sp, #16]
10041cb0:	9503      	str	r5, [sp, #12]
10041cb2:	2308      	movs	r3, #8
10041cb4:	9302      	str	r3, [sp, #8]
10041cb6:	9401      	str	r4, [sp, #4]
10041cb8:	2306      	movs	r3, #6
10041cba:	9300      	str	r3, [sp, #0]
10041cbc:	2301      	movs	r3, #1
10041cbe:	2203      	movs	r2, #3
10041cc0:	f025 fdb0 	bl	10067824 <siprintf>
	OledClear(OLED_COLOR_BLACK);
10041cc4:	2000      	movs	r0, #0
10041cc6:	f003 ff91 	bl	10045bec <OledClear>
	OledDrawString(maintext);
10041cca:	003b      	movs	r3, r7
10041ccc:	0018      	movs	r0, r3
10041cce:	f003 ff43 	bl	10045b58 <OledDrawString>
	OledUpdate();
10041cd2:	f003 ffc1 	bl	10045c58 <OledUpdate>
}
10041cd6:	46c0      	nop			@ (mov r8, r8)
10041cd8:	46bd      	mov	sp, r7
10041cda:	b02c      	add	sp, #176	@ 0xb0
10041cdc:	bdb0      	pop	{r4, r5, r7, pc}
10041cde:	46c0      	nop			@ (mov r8, r8)
10041ce0:	10068894 	.word	0x10068894

10041ce4 <DrawFolder>:

void DrawFolder(uint8_t cursor, uint8_t folder, uint8_t track){
10041ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
10041ce6:	b09d      	sub	sp, #116	@ 0x74
10041ce8:	af04      	add	r7, sp, #16
10041cea:	0004      	movs	r4, r0
10041cec:	0008      	movs	r0, r1
10041cee:	0011      	movs	r1, r2
10041cf0:	1dfb      	adds	r3, r7, #7
10041cf2:	1c22      	adds	r2, r4, #0
10041cf4:	701a      	strb	r2, [r3, #0]
10041cf6:	1dbb      	adds	r3, r7, #6
10041cf8:	1c02      	adds	r2, r0, #0
10041cfa:	701a      	strb	r2, [r3, #0]
10041cfc:	1d7b      	adds	r3, r7, #5
10041cfe:	1c0a      	adds	r2, r1, #0
10041d00:	701a      	strb	r2, [r3, #0]

	char folderselectstring[88];
	sprintf(folderselectstring, "Select Folder\n"
10041d02:	1dfb      	adds	r3, r7, #7
10041d04:	781b      	ldrb	r3, [r3, #0]
10041d06:	2b00      	cmp	r3, #0
10041d08:	d101      	bne.n	10041d0e <DrawFolder+0x2a>
10041d0a:	2102      	movs	r1, #2
10041d0c:	e000      	b.n	10041d10 <DrawFolder+0x2c>
10041d0e:	2101      	movs	r1, #1
10041d10:	1dfb      	adds	r3, r7, #7
10041d12:	781b      	ldrb	r3, [r3, #0]
10041d14:	2b00      	cmp	r3, #0
10041d16:	d001      	beq.n	10041d1c <DrawFolder+0x38>
10041d18:	2002      	movs	r0, #2
10041d1a:	e000      	b.n	10041d1e <DrawFolder+0x3a>
10041d1c:	2001      	movs	r0, #1
10041d1e:	1dbb      	adds	r3, r7, #6
10041d20:	781c      	ldrb	r4, [r3, #0]
10041d22:	1d7b      	adds	r3, r7, #5
10041d24:	781d      	ldrb	r5, [r3, #0]
10041d26:	1dfb      	adds	r3, r7, #7
10041d28:	781b      	ldrb	r3, [r3, #0]
10041d2a:	2b00      	cmp	r3, #0
10041d2c:	d101      	bne.n	10041d32 <DrawFolder+0x4e>
10041d2e:	2304      	movs	r3, #4
10041d30:	e000      	b.n	10041d34 <DrawFolder+0x50>
10041d32:	2303      	movs	r3, #3
10041d34:	1dfa      	adds	r2, r7, #7
10041d36:	7812      	ldrb	r2, [r2, #0]
10041d38:	2a00      	cmp	r2, #0
10041d3a:	d001      	beq.n	10041d40 <DrawFolder+0x5c>
10041d3c:	2204      	movs	r2, #4
10041d3e:	e000      	b.n	10041d42 <DrawFolder+0x5e>
10041d40:	2203      	movs	r2, #3
10041d42:	4e0e      	ldr	r6, [pc, #56]	@ (10041d7c <DrawFolder+0x98>)
10041d44:	46b4      	mov	ip, r6
10041d46:	2608      	movs	r6, #8
10041d48:	19be      	adds	r6, r7, r6
10041d4a:	9203      	str	r2, [sp, #12]
10041d4c:	9302      	str	r3, [sp, #8]
10041d4e:	9501      	str	r5, [sp, #4]
10041d50:	9400      	str	r4, [sp, #0]
10041d52:	0003      	movs	r3, r0
10041d54:	000a      	movs	r2, r1
10041d56:	4661      	mov	r1, ip
10041d58:	0030      	movs	r0, r6
10041d5a:	f025 fd63 	bl	10067824 <siprintf>
			                    "Folder: %d Track: %d\n"
			                    "        %c        %c\n",
								!cursor?UP_ARROW_ON:UP_ARROW_OFF, cursor?UP_ARROW_ON:UP_ARROW_OFF,
								folder, track,
								!cursor?DOWN_ARROW_ON:DOWN_ARROW_OFF, cursor?DOWN_ARROW_ON:DOWN_ARROW_OFF);
	OledClear(OLED_COLOR_BLACK);
10041d5e:	2000      	movs	r0, #0
10041d60:	f003 ff44 	bl	10045bec <OledClear>
	OledDrawString(folderselectstring);
10041d64:	2608      	movs	r6, #8
10041d66:	19bb      	adds	r3, r7, r6
10041d68:	0018      	movs	r0, r3
10041d6a:	f003 fef5 	bl	10045b58 <OledDrawString>
	OledUpdate();
10041d6e:	f003 ff73 	bl	10045c58 <OledUpdate>
}
10041d72:	46c0      	nop			@ (mov r8, r8)
10041d74:	46bd      	mov	sp, r7
10041d76:	b019      	add	sp, #100	@ 0x64
10041d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041d7a:	46c0      	nop			@ (mov r8, r8)
10041d7c:	10068908 	.word	0x10068908

10041d80 <DrawOptions>:

void DrawOptions(uint8_t cursor, uint8_t dutycycle){
10041d80:	b5f0      	push	{r4, r5, r6, r7, lr}
10041d82:	46c6      	mov	lr, r8
10041d84:	b500      	push	{lr}
10041d86:	b09e      	sub	sp, #120	@ 0x78
10041d88:	af06      	add	r7, sp, #24
10041d8a:	0002      	movs	r2, r0
10041d8c:	1dfb      	adds	r3, r7, #7
10041d8e:	701a      	strb	r2, [r3, #0]
10041d90:	1dbb      	adds	r3, r7, #6
10041d92:	1c0a      	adds	r2, r1, #0
10041d94:	701a      	strb	r2, [r3, #0]
	char folderselectstring[88];
	sprintf(folderselectstring, "Options\n"
10041d96:	1dfb      	adds	r3, r7, #7
10041d98:	781b      	ldrb	r3, [r3, #0]
10041d9a:	2b00      	cmp	r3, #0
10041d9c:	d101      	bne.n	10041da2 <DrawOptions+0x22>
10041d9e:	2506      	movs	r5, #6
10041da0:	e000      	b.n	10041da4 <DrawOptions+0x24>
10041da2:	2505      	movs	r5, #5
10041da4:	1dbb      	adds	r3, r7, #6
10041da6:	781b      	ldrb	r3, [r3, #0]
10041da8:	4698      	mov	r8, r3
10041daa:	1dfb      	adds	r3, r7, #7
10041dac:	781b      	ldrb	r3, [r3, #0]
10041dae:	2b00      	cmp	r3, #0
10041db0:	d101      	bne.n	10041db6 <DrawOptions+0x36>
10041db2:	2308      	movs	r3, #8
10041db4:	e000      	b.n	10041db8 <DrawOptions+0x38>
10041db6:	2307      	movs	r3, #7
10041db8:	1dfa      	adds	r2, r7, #7
10041dba:	7812      	ldrb	r2, [r2, #0]
10041dbc:	2a01      	cmp	r2, #1
10041dbe:	d101      	bne.n	10041dc4 <DrawOptions+0x44>
10041dc0:	2206      	movs	r2, #6
10041dc2:	e000      	b.n	10041dc6 <DrawOptions+0x46>
10041dc4:	2205      	movs	r2, #5
10041dc6:	1df9      	adds	r1, r7, #7
10041dc8:	7809      	ldrb	r1, [r1, #0]
10041dca:	2901      	cmp	r1, #1
10041dcc:	d101      	bne.n	10041dd2 <DrawOptions+0x52>
10041dce:	2108      	movs	r1, #8
10041dd0:	e000      	b.n	10041dd4 <DrawOptions+0x54>
10041dd2:	2107      	movs	r1, #7
10041dd4:	1df8      	adds	r0, r7, #7
10041dd6:	7800      	ldrb	r0, [r0, #0]
10041dd8:	2802      	cmp	r0, #2
10041dda:	d101      	bne.n	10041de0 <DrawOptions+0x60>
10041ddc:	2008      	movs	r0, #8
10041dde:	e000      	b.n	10041de2 <DrawOptions+0x62>
10041de0:	2007      	movs	r0, #7
10041de2:	1dfc      	adds	r4, r7, #7
10041de4:	7824      	ldrb	r4, [r4, #0]
10041de6:	2c02      	cmp	r4, #2
10041de8:	d101      	bne.n	10041dee <DrawOptions+0x6e>
10041dea:	2406      	movs	r4, #6
10041dec:	e000      	b.n	10041df0 <DrawOptions+0x70>
10041dee:	2405      	movs	r4, #5
10041df0:	4e0f      	ldr	r6, [pc, #60]	@ (10041e30 <DrawOptions+0xb0>)
10041df2:	46b4      	mov	ip, r6
10041df4:	2608      	movs	r6, #8
10041df6:	19be      	adds	r6, r7, r6
10041df8:	9404      	str	r4, [sp, #16]
10041dfa:	9003      	str	r0, [sp, #12]
10041dfc:	9102      	str	r1, [sp, #8]
10041dfe:	9201      	str	r2, [sp, #4]
10041e00:	9300      	str	r3, [sp, #0]
10041e02:	4643      	mov	r3, r8
10041e04:	002a      	movs	r2, r5
10041e06:	4661      	mov	r1, ip
10041e08:	0030      	movs	r0, r6
10041e0a:	f025 fd0b 	bl	10067824 <siprintf>
								" Song:%c%c\n"
								"%cClear Schedule%c",
								0==cursor?LEFT_ARROW_ON:LEFT_ARROW_OFF, dutycycle,0==cursor?RIGHT_ARROW_ON:RIGHT_ARROW_OFF,
								1==cursor?LEFT_ARROW_ON:LEFT_ARROW_OFF,           1==cursor?RIGHT_ARROW_ON:RIGHT_ARROW_OFF,
								2==cursor?RIGHT_ARROW_ON:RIGHT_ARROW_OFF, 		  2==cursor?LEFT_ARROW_ON:LEFT_ARROW_OFF);
	OledClear(OLED_COLOR_BLACK);
10041e0e:	2000      	movs	r0, #0
10041e10:	f003 feec 	bl	10045bec <OledClear>
	OledDrawString(folderselectstring);
10041e14:	2608      	movs	r6, #8
10041e16:	19bb      	adds	r3, r7, r6
10041e18:	0018      	movs	r0, r3
10041e1a:	f003 fe9d 	bl	10045b58 <OledDrawString>
	OledUpdate();
10041e1e:	f003 ff1b 	bl	10045c58 <OledUpdate>

}
10041e22:	46c0      	nop			@ (mov r8, r8)
10041e24:	46bd      	mov	sp, r7
10041e26:	b018      	add	sp, #96	@ 0x60
10041e28:	bc80      	pop	{r7}
10041e2a:	46b8      	mov	r8, r7
10041e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041e2e:	46c0      	nop			@ (mov r8, r8)
10041e30:	10068958 	.word	0x10068958

10041e34 <DrawSetTime>:

void DrawSetTime(uint8_t cursor, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute){
10041e34:	b5f0      	push	{r4, r5, r6, r7, lr}
10041e36:	46de      	mov	lr, fp
10041e38:	4657      	mov	r7, sl
10041e3a:	464e      	mov	r6, r9
10041e3c:	4645      	mov	r5, r8
10041e3e:	b5e0      	push	{r5, r6, r7, lr}
10041e40:	b0a5      	sub	sp, #148	@ 0x94
10041e42:	af0a      	add	r7, sp, #40	@ 0x28
10041e44:	0005      	movs	r5, r0
10041e46:	000c      	movs	r4, r1
10041e48:	0010      	movs	r0, r2
10041e4a:	0019      	movs	r1, r3
10041e4c:	260f      	movs	r6, #15
10041e4e:	19bb      	adds	r3, r7, r6
10041e50:	1c2a      	adds	r2, r5, #0
10041e52:	701a      	strb	r2, [r3, #0]
10041e54:	230e      	movs	r3, #14
10041e56:	18fb      	adds	r3, r7, r3
10041e58:	1c22      	adds	r2, r4, #0
10041e5a:	701a      	strb	r2, [r3, #0]
10041e5c:	230d      	movs	r3, #13
10041e5e:	18fb      	adds	r3, r7, r3
10041e60:	1c02      	adds	r2, r0, #0
10041e62:	701a      	strb	r2, [r3, #0]
10041e64:	230c      	movs	r3, #12
10041e66:	18fb      	adds	r3, r7, r3
10041e68:	1c0a      	adds	r2, r1, #0
10041e6a:	701a      	strb	r2, [r3, #0]
	char folderselectstring[88];
#define TOPCHAR cursor?UP_ARROW_ON:UP_ARROW_OFF
#define BOTCHAR cursor?DOWN_ARROW_ON:DOWN_ARROW_OFF
	sprintf(folderselectstring, "Set Date/Time\n"
10041e6c:	19bb      	adds	r3, r7, r6
10041e6e:	781b      	ldrb	r3, [r3, #0]
10041e70:	2b00      	cmp	r3, #0
10041e72:	d102      	bne.n	10041e7a <DrawSetTime+0x46>
10041e74:	2302      	movs	r3, #2
10041e76:	469c      	mov	ip, r3
10041e78:	e001      	b.n	10041e7e <DrawSetTime+0x4a>
10041e7a:	2301      	movs	r3, #1
10041e7c:	469c      	mov	ip, r3
10041e7e:	230f      	movs	r3, #15
10041e80:	18fb      	adds	r3, r7, r3
10041e82:	781b      	ldrb	r3, [r3, #0]
10041e84:	2b01      	cmp	r3, #1
10041e86:	d102      	bne.n	10041e8e <DrawSetTime+0x5a>
10041e88:	2302      	movs	r3, #2
10041e8a:	4698      	mov	r8, r3
10041e8c:	e001      	b.n	10041e92 <DrawSetTime+0x5e>
10041e8e:	2301      	movs	r3, #1
10041e90:	4698      	mov	r8, r3
10041e92:	230f      	movs	r3, #15
10041e94:	18fb      	adds	r3, r7, r3
10041e96:	781b      	ldrb	r3, [r3, #0]
10041e98:	2b02      	cmp	r3, #2
10041e9a:	d101      	bne.n	10041ea0 <DrawSetTime+0x6c>
10041e9c:	2202      	movs	r2, #2
10041e9e:	e000      	b.n	10041ea2 <DrawSetTime+0x6e>
10041ea0:	2201      	movs	r2, #1
10041ea2:	230f      	movs	r3, #15
10041ea4:	18fb      	adds	r3, r7, r3
10041ea6:	781b      	ldrb	r3, [r3, #0]
10041ea8:	2b03      	cmp	r3, #3
10041eaa:	d101      	bne.n	10041eb0 <DrawSetTime+0x7c>
10041eac:	2102      	movs	r1, #2
10041eae:	e000      	b.n	10041eb2 <DrawSetTime+0x7e>
10041eb0:	2101      	movs	r1, #1
10041eb2:	230e      	movs	r3, #14
10041eb4:	18fb      	adds	r3, r7, r3
10041eb6:	781b      	ldrb	r3, [r3, #0]
10041eb8:	4699      	mov	r9, r3
10041eba:	230d      	movs	r3, #13
10041ebc:	18fb      	adds	r3, r7, r3
10041ebe:	781b      	ldrb	r3, [r3, #0]
10041ec0:	469a      	mov	sl, r3
10041ec2:	230c      	movs	r3, #12
10041ec4:	18fb      	adds	r3, r7, r3
10041ec6:	781b      	ldrb	r3, [r3, #0]
10041ec8:	469b      	mov	fp, r3
10041eca:	2388      	movs	r3, #136	@ 0x88
10041ecc:	2008      	movs	r0, #8
10041ece:	181b      	adds	r3, r3, r0
10041ed0:	19db      	adds	r3, r3, r7
10041ed2:	781b      	ldrb	r3, [r3, #0]
10041ed4:	60bb      	str	r3, [r7, #8]
10041ed6:	230f      	movs	r3, #15
10041ed8:	18fb      	adds	r3, r7, r3
10041eda:	781b      	ldrb	r3, [r3, #0]
10041edc:	2b00      	cmp	r3, #0
10041ede:	d101      	bne.n	10041ee4 <DrawSetTime+0xb0>
10041ee0:	2404      	movs	r4, #4
10041ee2:	e000      	b.n	10041ee6 <DrawSetTime+0xb2>
10041ee4:	2403      	movs	r4, #3
10041ee6:	230f      	movs	r3, #15
10041ee8:	18fb      	adds	r3, r7, r3
10041eea:	781b      	ldrb	r3, [r3, #0]
10041eec:	2b01      	cmp	r3, #1
10041eee:	d101      	bne.n	10041ef4 <DrawSetTime+0xc0>
10041ef0:	2504      	movs	r5, #4
10041ef2:	e000      	b.n	10041ef6 <DrawSetTime+0xc2>
10041ef4:	2503      	movs	r5, #3
10041ef6:	230f      	movs	r3, #15
10041ef8:	18fb      	adds	r3, r7, r3
10041efa:	781b      	ldrb	r3, [r3, #0]
10041efc:	2b02      	cmp	r3, #2
10041efe:	d101      	bne.n	10041f04 <DrawSetTime+0xd0>
10041f00:	2604      	movs	r6, #4
10041f02:	e000      	b.n	10041f06 <DrawSetTime+0xd2>
10041f04:	2603      	movs	r6, #3
10041f06:	230f      	movs	r3, #15
10041f08:	18fb      	adds	r3, r7, r3
10041f0a:	781b      	ldrb	r3, [r3, #0]
10041f0c:	2b03      	cmp	r3, #3
10041f0e:	d102      	bne.n	10041f16 <DrawSetTime+0xe2>
10041f10:	2304      	movs	r3, #4
10041f12:	603b      	str	r3, [r7, #0]
10041f14:	e001      	b.n	10041f1a <DrawSetTime+0xe6>
10041f16:	2303      	movs	r3, #3
10041f18:	603b      	str	r3, [r7, #0]
10041f1a:	4817      	ldr	r0, [pc, #92]	@ (10041f78 <DrawSetTime+0x144>)
10041f1c:	6078      	str	r0, [r7, #4]
10041f1e:	2008      	movs	r0, #8
10041f20:	2308      	movs	r3, #8
10041f22:	18c0      	adds	r0, r0, r3
10041f24:	19c0      	adds	r0, r0, r7
10041f26:	683b      	ldr	r3, [r7, #0]
10041f28:	9309      	str	r3, [sp, #36]	@ 0x24
10041f2a:	9608      	str	r6, [sp, #32]
10041f2c:	9507      	str	r5, [sp, #28]
10041f2e:	9406      	str	r4, [sp, #24]
10041f30:	68bb      	ldr	r3, [r7, #8]
10041f32:	9305      	str	r3, [sp, #20]
10041f34:	465b      	mov	r3, fp
10041f36:	9304      	str	r3, [sp, #16]
10041f38:	4653      	mov	r3, sl
10041f3a:	9303      	str	r3, [sp, #12]
10041f3c:	464b      	mov	r3, r9
10041f3e:	9302      	str	r3, [sp, #8]
10041f40:	9101      	str	r1, [sp, #4]
10041f42:	9200      	str	r2, [sp, #0]
10041f44:	4643      	mov	r3, r8
10041f46:	4662      	mov	r2, ip
10041f48:	6879      	ldr	r1, [r7, #4]
10041f4a:	f025 fc6b 	bl	10067824 <siprintf>
								"%.2d/%.2d %.2d:%.2d\n"
								" %c  %c  %c  %c\n",
								0==TOPCHAR, 1 ==TOPCHAR, 2 ==TOPCHAR, 3==TOPCHAR,
								month, day, hour, minute,
								0==BOTCHAR, 1 ==BOTCHAR, 2 ==BOTCHAR, 3==BOTCHAR);
	OledClear(OLED_COLOR_BLACK);
10041f4e:	2000      	movs	r0, #0
10041f50:	f003 fe4c 	bl	10045bec <OledClear>
	OledDrawString(folderselectstring);
10041f54:	2008      	movs	r0, #8
10041f56:	2308      	movs	r3, #8
10041f58:	18c3      	adds	r3, r0, r3
10041f5a:	19db      	adds	r3, r3, r7
10041f5c:	0018      	movs	r0, r3
10041f5e:	f003 fdfb 	bl	10045b58 <OledDrawString>
	OledUpdate();
10041f62:	f003 fe79 	bl	10045c58 <OledUpdate>

}
10041f66:	46c0      	nop			@ (mov r8, r8)
10041f68:	46bd      	mov	sp, r7
10041f6a:	b01b      	add	sp, #108	@ 0x6c
10041f6c:	bcf0      	pop	{r4, r5, r6, r7}
10041f6e:	46bb      	mov	fp, r7
10041f70:	46b2      	mov	sl, r6
10041f72:	46a9      	mov	r9, r5
10041f74:	46a0      	mov	r8, r4
10041f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041f78:	10068994 	.word	0x10068994

10041f7c <DrawSchedule>:

void DrawSchedule(uint8_t cursor, uint8_t month, uint8_t daystart, uint8_t dayend, uint8_t start, uint8_t end){
10041f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
10041f7e:	46de      	mov	lr, fp
10041f80:	4657      	mov	r7, sl
10041f82:	464e      	mov	r6, r9
10041f84:	4645      	mov	r5, r8
10041f86:	b5e0      	push	{r5, r6, r7, lr}
10041f88:	b0cb      	sub	sp, #300	@ 0x12c
10041f8a:	af14      	add	r7, sp, #80	@ 0x50
10041f8c:	0005      	movs	r5, r0
10041f8e:	000c      	movs	r4, r1
10041f90:	0010      	movs	r0, r2
10041f92:	0019      	movs	r1, r3
10041f94:	2337      	movs	r3, #55	@ 0x37
10041f96:	18fb      	adds	r3, r7, r3
10041f98:	1c2a      	adds	r2, r5, #0
10041f9a:	701a      	strb	r2, [r3, #0]
10041f9c:	2536      	movs	r5, #54	@ 0x36
10041f9e:	197b      	adds	r3, r7, r5
10041fa0:	1c22      	adds	r2, r4, #0
10041fa2:	701a      	strb	r2, [r3, #0]
10041fa4:	2635      	movs	r6, #53	@ 0x35
10041fa6:	19bb      	adds	r3, r7, r6
10041fa8:	1c02      	adds	r2, r0, #0
10041faa:	701a      	strb	r2, [r3, #0]
10041fac:	2434      	movs	r4, #52	@ 0x34
10041fae:	193b      	adds	r3, r7, r4
10041fb0:	1c0a      	adds	r2, r1, #0
10041fb2:	701a      	strb	r2, [r3, #0]
	char folderselectstring[151];
	uint8_t hour1 = (start&0b11111000)>>3;
10041fb4:	23a6      	movs	r3, #166	@ 0xa6
10041fb6:	2030      	movs	r0, #48	@ 0x30
10041fb8:	181b      	adds	r3, r3, r0
10041fba:	19da      	adds	r2, r3, r7
10041fbc:	21d0      	movs	r1, #208	@ 0xd0
10041fbe:	180b      	adds	r3, r1, r0
10041fc0:	19db      	adds	r3, r3, r7
10041fc2:	781b      	ldrb	r3, [r3, #0]
10041fc4:	08db      	lsrs	r3, r3, #3
10041fc6:	7013      	strb	r3, [r2, #0]
	uint8_t minute1 = ((start & 0b011)*15);
10041fc8:	180b      	adds	r3, r1, r0
10041fca:	19db      	adds	r3, r3, r7
10041fcc:	781b      	ldrb	r3, [r3, #0]
10041fce:	2203      	movs	r2, #3
10041fd0:	4013      	ands	r3, r2
10041fd2:	b2da      	uxtb	r2, r3
10041fd4:	23a5      	movs	r3, #165	@ 0xa5
10041fd6:	181b      	adds	r3, r3, r0
10041fd8:	19db      	adds	r3, r3, r7
10041fda:	1c11      	adds	r1, r2, #0
10041fdc:	0109      	lsls	r1, r1, #4
10041fde:	1a8a      	subs	r2, r1, r2
10041fe0:	701a      	strb	r2, [r3, #0]
	uint8_t hour2 = (end&0b11111000)>>3;
10041fe2:	23a4      	movs	r3, #164	@ 0xa4
10041fe4:	181b      	adds	r3, r3, r0
10041fe6:	19db      	adds	r3, r3, r7
10041fe8:	21d4      	movs	r1, #212	@ 0xd4
10041fea:	180a      	adds	r2, r1, r0
10041fec:	19d2      	adds	r2, r2, r7
10041fee:	7812      	ldrb	r2, [r2, #0]
10041ff0:	08d2      	lsrs	r2, r2, #3
10041ff2:	701a      	strb	r2, [r3, #0]
	uint8_t minute2 = ((end & 0b011)*15);
10041ff4:	180b      	adds	r3, r1, r0
10041ff6:	19db      	adds	r3, r3, r7
10041ff8:	781b      	ldrb	r3, [r3, #0]
10041ffa:	2203      	movs	r2, #3
10041ffc:	4013      	ands	r3, r2
10041ffe:	b2da      	uxtb	r2, r3
10042000:	23a3      	movs	r3, #163	@ 0xa3
10042002:	181b      	adds	r3, r3, r0
10042004:	19db      	adds	r3, r3, r7
10042006:	1c11      	adds	r1, r2, #0
10042008:	0109      	lsls	r1, r1, #4
1004200a:	1a8a      	subs	r2, r1, r2
1004200c:	701a      	strb	r2, [r3, #0]
	uint8_t month2 = month;
1004200e:	21a7      	movs	r1, #167	@ 0xa7
10042010:	180b      	adds	r3, r1, r0
10042012:	19db      	adds	r3, r3, r7
10042014:	197a      	adds	r2, r7, r5
10042016:	7812      	ldrb	r2, [r2, #0]
10042018:	701a      	strb	r2, [r3, #0]
	if(dayend < daystart){
1004201a:	193a      	adds	r2, r7, r4
1004201c:	19bb      	adds	r3, r7, r6
1004201e:	7812      	ldrb	r2, [r2, #0]
10042020:	781b      	ldrb	r3, [r3, #0]
10042022:	429a      	cmp	r2, r3
10042024:	d20e      	bcs.n	10042044 <DrawSchedule+0xc8>
		month2 = month+1;
10042026:	180b      	adds	r3, r1, r0
10042028:	19db      	adds	r3, r3, r7
1004202a:	197a      	adds	r2, r7, r5
1004202c:	7812      	ldrb	r2, [r2, #0]
1004202e:	3201      	adds	r2, #1
10042030:	701a      	strb	r2, [r3, #0]
		if(month2 == 13){
10042032:	180b      	adds	r3, r1, r0
10042034:	19db      	adds	r3, r3, r7
10042036:	781b      	ldrb	r3, [r3, #0]
10042038:	2b0d      	cmp	r3, #13
1004203a:	d103      	bne.n	10042044 <DrawSchedule+0xc8>
			month2 = 1;
1004203c:	180b      	adds	r3, r1, r0
1004203e:	19db      	adds	r3, r3, r7
10042040:	2201      	movs	r2, #1
10042042:	701a      	strb	r2, [r3, #0]
		}
	}
	sprintf(folderselectstring, "Schedule time to play\n"
10042044:	2337      	movs	r3, #55	@ 0x37
10042046:	18fb      	adds	r3, r7, r3
10042048:	781b      	ldrb	r3, [r3, #0]
1004204a:	2b00      	cmp	r3, #0
1004204c:	d102      	bne.n	10042054 <DrawSchedule+0xd8>
1004204e:	2302      	movs	r3, #2
10042050:	633b      	str	r3, [r7, #48]	@ 0x30
10042052:	e001      	b.n	10042058 <DrawSchedule+0xdc>
10042054:	2301      	movs	r3, #1
10042056:	633b      	str	r3, [r7, #48]	@ 0x30
10042058:	2337      	movs	r3, #55	@ 0x37
1004205a:	18fb      	adds	r3, r7, r3
1004205c:	781b      	ldrb	r3, [r3, #0]
1004205e:	2b01      	cmp	r3, #1
10042060:	d102      	bne.n	10042068 <DrawSchedule+0xec>
10042062:	2302      	movs	r3, #2
10042064:	62fb      	str	r3, [r7, #44]	@ 0x2c
10042066:	e001      	b.n	1004206c <DrawSchedule+0xf0>
10042068:	2301      	movs	r3, #1
1004206a:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004206c:	2337      	movs	r3, #55	@ 0x37
1004206e:	18fb      	adds	r3, r7, r3
10042070:	781b      	ldrb	r3, [r3, #0]
10042072:	2b02      	cmp	r3, #2
10042074:	d102      	bne.n	1004207c <DrawSchedule+0x100>
10042076:	2302      	movs	r3, #2
10042078:	62bb      	str	r3, [r7, #40]	@ 0x28
1004207a:	e001      	b.n	10042080 <DrawSchedule+0x104>
1004207c:	2301      	movs	r3, #1
1004207e:	62bb      	str	r3, [r7, #40]	@ 0x28
10042080:	2336      	movs	r3, #54	@ 0x36
10042082:	18fb      	adds	r3, r7, r3
10042084:	781b      	ldrb	r3, [r3, #0]
10042086:	613b      	str	r3, [r7, #16]
10042088:	2335      	movs	r3, #53	@ 0x35
1004208a:	18fb      	adds	r3, r7, r3
1004208c:	781b      	ldrb	r3, [r3, #0]
1004208e:	60fb      	str	r3, [r7, #12]
10042090:	23a7      	movs	r3, #167	@ 0xa7
10042092:	2230      	movs	r2, #48	@ 0x30
10042094:	189b      	adds	r3, r3, r2
10042096:	19db      	adds	r3, r3, r7
10042098:	781b      	ldrb	r3, [r3, #0]
1004209a:	60bb      	str	r3, [r7, #8]
1004209c:	2334      	movs	r3, #52	@ 0x34
1004209e:	18fb      	adds	r3, r7, r3
100420a0:	781b      	ldrb	r3, [r3, #0]
100420a2:	607b      	str	r3, [r7, #4]
100420a4:	2337      	movs	r3, #55	@ 0x37
100420a6:	18fb      	adds	r3, r7, r3
100420a8:	781b      	ldrb	r3, [r3, #0]
100420aa:	2b00      	cmp	r3, #0
100420ac:	d102      	bne.n	100420b4 <DrawSchedule+0x138>
100420ae:	2304      	movs	r3, #4
100420b0:	627b      	str	r3, [r7, #36]	@ 0x24
100420b2:	e001      	b.n	100420b8 <DrawSchedule+0x13c>
100420b4:	2303      	movs	r3, #3
100420b6:	627b      	str	r3, [r7, #36]	@ 0x24
100420b8:	2337      	movs	r3, #55	@ 0x37
100420ba:	18fb      	adds	r3, r7, r3
100420bc:	781b      	ldrb	r3, [r3, #0]
100420be:	2b01      	cmp	r3, #1
100420c0:	d102      	bne.n	100420c8 <DrawSchedule+0x14c>
100420c2:	2304      	movs	r3, #4
100420c4:	623b      	str	r3, [r7, #32]
100420c6:	e001      	b.n	100420cc <DrawSchedule+0x150>
100420c8:	2303      	movs	r3, #3
100420ca:	623b      	str	r3, [r7, #32]
100420cc:	2337      	movs	r3, #55	@ 0x37
100420ce:	18fb      	adds	r3, r7, r3
100420d0:	781b      	ldrb	r3, [r3, #0]
100420d2:	2b02      	cmp	r3, #2
100420d4:	d102      	bne.n	100420dc <DrawSchedule+0x160>
100420d6:	2304      	movs	r3, #4
100420d8:	61fb      	str	r3, [r7, #28]
100420da:	e001      	b.n	100420e0 <DrawSchedule+0x164>
100420dc:	2303      	movs	r3, #3
100420de:	61fb      	str	r3, [r7, #28]
100420e0:	2337      	movs	r3, #55	@ 0x37
100420e2:	18fb      	adds	r3, r7, r3
100420e4:	781b      	ldrb	r3, [r3, #0]
100420e6:	2b03      	cmp	r3, #3
100420e8:	d102      	bne.n	100420f0 <DrawSchedule+0x174>
100420ea:	2302      	movs	r3, #2
100420ec:	61bb      	str	r3, [r7, #24]
100420ee:	e001      	b.n	100420f4 <DrawSchedule+0x178>
100420f0:	2301      	movs	r3, #1
100420f2:	61bb      	str	r3, [r7, #24]
100420f4:	2337      	movs	r3, #55	@ 0x37
100420f6:	18fb      	adds	r3, r7, r3
100420f8:	781b      	ldrb	r3, [r3, #0]
100420fa:	2b04      	cmp	r3, #4
100420fc:	d102      	bne.n	10042104 <DrawSchedule+0x188>
100420fe:	2302      	movs	r3, #2
10042100:	617b      	str	r3, [r7, #20]
10042102:	e001      	b.n	10042108 <DrawSchedule+0x18c>
10042104:	2301      	movs	r3, #1
10042106:	617b      	str	r3, [r7, #20]
10042108:	2337      	movs	r3, #55	@ 0x37
1004210a:	18fb      	adds	r3, r7, r3
1004210c:	781b      	ldrb	r3, [r3, #0]
1004210e:	2b05      	cmp	r3, #5
10042110:	d102      	bne.n	10042118 <DrawSchedule+0x19c>
10042112:	2302      	movs	r3, #2
10042114:	469b      	mov	fp, r3
10042116:	e001      	b.n	1004211c <DrawSchedule+0x1a0>
10042118:	2301      	movs	r3, #1
1004211a:	469b      	mov	fp, r3
1004211c:	2337      	movs	r3, #55	@ 0x37
1004211e:	18fb      	adds	r3, r7, r3
10042120:	781b      	ldrb	r3, [r3, #0]
10042122:	2b06      	cmp	r3, #6
10042124:	d102      	bne.n	1004212c <DrawSchedule+0x1b0>
10042126:	2302      	movs	r3, #2
10042128:	4699      	mov	r9, r3
1004212a:	e001      	b.n	10042130 <DrawSchedule+0x1b4>
1004212c:	2301      	movs	r3, #1
1004212e:	4699      	mov	r9, r3
10042130:	23a6      	movs	r3, #166	@ 0xa6
10042132:	2230      	movs	r2, #48	@ 0x30
10042134:	189b      	adds	r3, r3, r2
10042136:	19db      	adds	r3, r3, r7
10042138:	781b      	ldrb	r3, [r3, #0]
1004213a:	469a      	mov	sl, r3
1004213c:	23a5      	movs	r3, #165	@ 0xa5
1004213e:	189b      	adds	r3, r3, r2
10042140:	19db      	adds	r3, r3, r7
10042142:	781b      	ldrb	r3, [r3, #0]
10042144:	4698      	mov	r8, r3
10042146:	23a4      	movs	r3, #164	@ 0xa4
10042148:	189b      	adds	r3, r3, r2
1004214a:	19db      	adds	r3, r3, r7
1004214c:	781b      	ldrb	r3, [r3, #0]
1004214e:	469c      	mov	ip, r3
10042150:	23a3      	movs	r3, #163	@ 0xa3
10042152:	189b      	adds	r3, r3, r2
10042154:	19db      	adds	r3, r3, r7
10042156:	781e      	ldrb	r6, [r3, #0]
10042158:	2337      	movs	r3, #55	@ 0x37
1004215a:	18fb      	adds	r3, r7, r3
1004215c:	781b      	ldrb	r3, [r3, #0]
1004215e:	2b03      	cmp	r3, #3
10042160:	d101      	bne.n	10042166 <DrawSchedule+0x1ea>
10042162:	2504      	movs	r5, #4
10042164:	e000      	b.n	10042168 <DrawSchedule+0x1ec>
10042166:	2503      	movs	r5, #3
10042168:	2337      	movs	r3, #55	@ 0x37
1004216a:	18fb      	adds	r3, r7, r3
1004216c:	781b      	ldrb	r3, [r3, #0]
1004216e:	2b04      	cmp	r3, #4
10042170:	d101      	bne.n	10042176 <DrawSchedule+0x1fa>
10042172:	2404      	movs	r4, #4
10042174:	e000      	b.n	10042178 <DrawSchedule+0x1fc>
10042176:	2403      	movs	r4, #3
10042178:	2337      	movs	r3, #55	@ 0x37
1004217a:	18fb      	adds	r3, r7, r3
1004217c:	781b      	ldrb	r3, [r3, #0]
1004217e:	2b05      	cmp	r3, #5
10042180:	d101      	bne.n	10042186 <DrawSchedule+0x20a>
10042182:	2204      	movs	r2, #4
10042184:	e000      	b.n	10042188 <DrawSchedule+0x20c>
10042186:	2203      	movs	r2, #3
10042188:	2337      	movs	r3, #55	@ 0x37
1004218a:	18fb      	adds	r3, r7, r3
1004218c:	781b      	ldrb	r3, [r3, #0]
1004218e:	2b06      	cmp	r3, #6
10042190:	d101      	bne.n	10042196 <DrawSchedule+0x21a>
10042192:	2304      	movs	r3, #4
10042194:	e000      	b.n	10042198 <DrawSchedule+0x21c>
10042196:	2303      	movs	r3, #3
10042198:	4921      	ldr	r1, [pc, #132]	@ (10042220 <DrawSchedule+0x2a4>)
1004219a:	6039      	str	r1, [r7, #0]
1004219c:	200c      	movs	r0, #12
1004219e:	2130      	movs	r1, #48	@ 0x30
100421a0:	1840      	adds	r0, r0, r1
100421a2:	19c0      	adds	r0, r0, r7
100421a4:	9313      	str	r3, [sp, #76]	@ 0x4c
100421a6:	9212      	str	r2, [sp, #72]	@ 0x48
100421a8:	9411      	str	r4, [sp, #68]	@ 0x44
100421aa:	9510      	str	r5, [sp, #64]	@ 0x40
100421ac:	960f      	str	r6, [sp, #60]	@ 0x3c
100421ae:	4663      	mov	r3, ip
100421b0:	930e      	str	r3, [sp, #56]	@ 0x38
100421b2:	4643      	mov	r3, r8
100421b4:	930d      	str	r3, [sp, #52]	@ 0x34
100421b6:	4653      	mov	r3, sl
100421b8:	930c      	str	r3, [sp, #48]	@ 0x30
100421ba:	464b      	mov	r3, r9
100421bc:	930b      	str	r3, [sp, #44]	@ 0x2c
100421be:	465b      	mov	r3, fp
100421c0:	930a      	str	r3, [sp, #40]	@ 0x28
100421c2:	697b      	ldr	r3, [r7, #20]
100421c4:	9309      	str	r3, [sp, #36]	@ 0x24
100421c6:	69bb      	ldr	r3, [r7, #24]
100421c8:	9308      	str	r3, [sp, #32]
100421ca:	69fb      	ldr	r3, [r7, #28]
100421cc:	9307      	str	r3, [sp, #28]
100421ce:	6a3b      	ldr	r3, [r7, #32]
100421d0:	9306      	str	r3, [sp, #24]
100421d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100421d4:	9305      	str	r3, [sp, #20]
100421d6:	687b      	ldr	r3, [r7, #4]
100421d8:	9304      	str	r3, [sp, #16]
100421da:	68bb      	ldr	r3, [r7, #8]
100421dc:	9303      	str	r3, [sp, #12]
100421de:	68fb      	ldr	r3, [r7, #12]
100421e0:	9302      	str	r3, [sp, #8]
100421e2:	693b      	ldr	r3, [r7, #16]
100421e4:	9301      	str	r3, [sp, #4]
100421e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100421e8:	9300      	str	r3, [sp, #0]
100421ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100421ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100421ee:	6839      	ldr	r1, [r7, #0]
100421f0:	f025 fb18 	bl	10067824 <siprintf>
								month, daystart, month2, dayend,
								0==BOTCHAR, 1==BOTCHAR, 2==BOTCHAR,
								3==TOPCHAR, 4==TOPCHAR, 5==TOPCHAR, 6==TOPCHAR,
								hour1, minute1, hour2, minute2,
								3==BOTCHAR, 4==BOTCHAR, 5==BOTCHAR, 6==BOTCHAR);
	OledClear(OLED_COLOR_BLACK);
100421f4:	2000      	movs	r0, #0
100421f6:	f003 fcf9 	bl	10045bec <OledClear>
	OledDrawString(folderselectstring);
100421fa:	200c      	movs	r0, #12
100421fc:	2330      	movs	r3, #48	@ 0x30
100421fe:	18c3      	adds	r3, r0, r3
10042200:	19db      	adds	r3, r3, r7
10042202:	0018      	movs	r0, r3
10042204:	f003 fca8 	bl	10045b58 <OledDrawString>
	OledUpdate();
10042208:	f003 fd26 	bl	10045c58 <OledUpdate>

}
1004220c:	46c0      	nop			@ (mov r8, r8)
1004220e:	46bd      	mov	sp, r7
10042210:	b037      	add	sp, #220	@ 0xdc
10042212:	bcf0      	pop	{r4, r5, r6, r7}
10042214:	46bb      	mov	fp, r7
10042216:	46b2      	mov	sl, r6
10042218:	46a9      	mov	r9, r5
1004221a:	46a0      	mov	r8, r4
1004221c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004221e:	46c0      	nop			@ (mov r8, r8)
10042220:	100689d8 	.word	0x100689d8

10042224 <ButtonsMenuSM_Event_Init>:
 * @Function: ButtonsMenuSM_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t ButtonsMenuSM_Event_Init(FIFO Queue){
10042224:	b580      	push	{r7, lr}
10042226:	b082      	sub	sp, #8
10042228:	af00      	add	r7, sp, #0
1004222a:	6078      	str	r0, [r7, #4]
    ButtonsMenuSMqueue = Queue;
1004222c:	4b0d      	ldr	r3, [pc, #52]	@ (10042264 <ButtonsMenuSM_Event_Init+0x40>)
1004222e:	687a      	ldr	r2, [r7, #4]
10042230:	601a      	str	r2, [r3, #0]
    BMState = main;
10042232:	4b0d      	ldr	r3, [pc, #52]	@ (10042268 <ButtonsMenuSM_Event_Init+0x44>)
10042234:	2200      	movs	r2, #0
10042236:	701a      	strb	r2, [r3, #0]
    displayoff = 1;
10042238:	4b0c      	ldr	r3, [pc, #48]	@ (1004226c <ButtonsMenuSM_Event_Init+0x48>)
1004223a:	2201      	movs	r2, #1
1004223c:	701a      	strb	r2, [r3, #0]
    GPIO_Init();
1004223e:	f002 fad9 	bl	100447f4 <GPIO_Init>
    I2C_Init();
10042242:	f002 fd77 	bl	10044d34 <I2C_Init>
	TIMERS_Init();
10042246:	f004 f92b 	bl	100464a0 <TIMERS_Init>
	OledInit();
1004224a:	f003 fb99 	bl	10045980 <OledInit>
	BSP_LED_Init(LED_BLUE);
1004224e:	2000      	movs	r0, #0
10042250:	f005 f9e8 	bl	10047624 <BSP_LED_Init>
	BSP_LED_Init(LED_RED);
10042254:	2002      	movs	r0, #2
10042256:	f005 f9e5 	bl	10047624 <BSP_LED_Init>
    return INIT_OK;
1004225a:	2301      	movs	r3, #1
}
1004225c:	0018      	movs	r0, r3
1004225e:	46bd      	mov	sp, r7
10042260:	b002      	add	sp, #8
10042262:	bd80      	pop	{r7, pc}
10042264:	20000398 	.word	0x20000398
10042268:	2000039c 	.word	0x2000039c
1004226c:	2000039d 	.word	0x2000039d

10042270 <ButtonsMenuSM_Event_Post>:
 * @Function: ButtonsMenuSM_Event_Init
 * @Brief: Provides the ability for state machines to interact
 * @param: event to be posted
 * @return: none
 */
void ButtonsMenuSM_Event_Post(Event_t event){
10042270:	b580      	push	{r7, lr}
10042272:	b082      	sub	sp, #8
10042274:	af00      	add	r7, sp, #0
10042276:	1d3b      	adds	r3, r7, #4
10042278:	6018      	str	r0, [r3, #0]
    FIFO_Enqueue(ButtonsMenuSMqueue, event);
1004227a:	4b05      	ldr	r3, [pc, #20]	@ (10042290 <ButtonsMenuSM_Event_Post+0x20>)
1004227c:	681a      	ldr	r2, [r3, #0]
1004227e:	1d3b      	adds	r3, r7, #4
10042280:	6819      	ldr	r1, [r3, #0]
10042282:	0010      	movs	r0, r2
10042284:	f001 ff0f 	bl	100440a6 <FIFO_Enqueue>
}
10042288:	46c0      	nop			@ (mov r8, r8)
1004228a:	46bd      	mov	sp, r7
1004228c:	b002      	add	sp, #8
1004228e:	bd80      	pop	{r7, pc}
10042290:	20000398 	.word	0x20000398

10042294 <ButtonsMenuSM_Event_Updater>:
 * @Function: ButtonsMenuSM_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the
 * @param: none
 * @return: An event
 */
Event_t ButtonsMenuSM_Event_Updater(void){
10042294:	b5b0      	push	{r4, r5, r7, lr}
10042296:	b084      	sub	sp, #16
10042298:	af00      	add	r7, sp, #0
    static uint32_t debounce = 0;
    static uint8_t lastbuttons = 0xFF;
    static uint32_t timer = 0;
    static uint8_t timeractive = 0;

    Event_t event = (Event_t){EVENT_NONE, 0};
1004229a:	1d3b      	adds	r3, r7, #4
1004229c:	2200      	movs	r2, #0
1004229e:	701a      	strb	r2, [r3, #0]
100422a0:	1d3b      	adds	r3, r7, #4
100422a2:	2200      	movs	r2, #0
100422a4:	805a      	strh	r2, [r3, #2]

    uint8_t currbuttons = GPIO_ReadButtons();
100422a6:	250f      	movs	r5, #15
100422a8:	197c      	adds	r4, r7, r5
100422aa:	f002 fae5 	bl	10044878 <GPIO_ReadButtons>
100422ae:	0003      	movs	r3, r0
100422b0:	7023      	strb	r3, [r4, #0]

    if(currbuttons != lastbuttons && (debounce + DEBOUNCETIME < TIMERS_GetMilliSeconds())){
100422b2:	4b34      	ldr	r3, [pc, #208]	@ (10042384 <ButtonsMenuSM_Event_Updater+0xf0>)
100422b4:	781b      	ldrb	r3, [r3, #0]
100422b6:	197a      	adds	r2, r7, r5
100422b8:	7812      	ldrb	r2, [r2, #0]
100422ba:	429a      	cmp	r2, r3
100422bc:	d02f      	beq.n	1004231e <ButtonsMenuSM_Event_Updater+0x8a>
100422be:	4b32      	ldr	r3, [pc, #200]	@ (10042388 <ButtonsMenuSM_Event_Updater+0xf4>)
100422c0:	681b      	ldr	r3, [r3, #0]
100422c2:	3332      	adds	r3, #50	@ 0x32
100422c4:	001c      	movs	r4, r3
100422c6:	f004 f937 	bl	10046538 <TIMERS_GetMilliSeconds>
100422ca:	0003      	movs	r3, r0
100422cc:	429c      	cmp	r4, r3
100422ce:	d226      	bcs.n	1004231e <ButtonsMenuSM_Event_Updater+0x8a>
    	event.status = EVENT_BUTTONS;
100422d0:	1d3b      	adds	r3, r7, #4
100422d2:	2204      	movs	r2, #4
100422d4:	701a      	strb	r2, [r3, #0]
    	event.data = (((uint16_t)currbuttons ^ (uint16_t)lastbuttons) << 8) + (uint16_t)currbuttons;
100422d6:	4b2b      	ldr	r3, [pc, #172]	@ (10042384 <ButtonsMenuSM_Event_Updater+0xf0>)
100422d8:	781a      	ldrb	r2, [r3, #0]
100422da:	197b      	adds	r3, r7, r5
100422dc:	781b      	ldrb	r3, [r3, #0]
100422de:	4053      	eors	r3, r2
100422e0:	b2db      	uxtb	r3, r3
100422e2:	021b      	lsls	r3, r3, #8
100422e4:	b29a      	uxth	r2, r3
100422e6:	197b      	adds	r3, r7, r5
100422e8:	781b      	ldrb	r3, [r3, #0]
100422ea:	b29b      	uxth	r3, r3
100422ec:	18d3      	adds	r3, r2, r3
100422ee:	b29a      	uxth	r2, r3
100422f0:	1d3b      	adds	r3, r7, #4
100422f2:	805a      	strh	r2, [r3, #2]
    	lastbuttons = currbuttons;
100422f4:	4b23      	ldr	r3, [pc, #140]	@ (10042384 <ButtonsMenuSM_Event_Updater+0xf0>)
100422f6:	197a      	adds	r2, r7, r5
100422f8:	7812      	ldrb	r2, [r2, #0]
100422fa:	701a      	strb	r2, [r3, #0]
    	debounce = TIMERS_GetMilliSeconds();
100422fc:	f004 f91c 	bl	10046538 <TIMERS_GetMilliSeconds>
10042300:	0002      	movs	r2, r0
10042302:	4b21      	ldr	r3, [pc, #132]	@ (10042388 <ButtonsMenuSM_Event_Updater+0xf4>)
10042304:	601a      	str	r2, [r3, #0]
    	timer = TIMERS_GetMilliSeconds();//delay the sleep timer
10042306:	f004 f917 	bl	10046538 <TIMERS_GetMilliSeconds>
1004230a:	0002      	movs	r2, r0
1004230c:	4b1f      	ldr	r3, [pc, #124]	@ (1004238c <ButtonsMenuSM_Event_Updater+0xf8>)
1004230e:	601a      	str	r2, [r3, #0]
    	timeractive = 1;
10042310:	4b1f      	ldr	r3, [pc, #124]	@ (10042390 <ButtonsMenuSM_Event_Updater+0xfc>)
10042312:	2201      	movs	r2, #1
10042314:	701a      	strb	r2, [r3, #0]
    	ButtonsMenuSM_Event_Post(event);
10042316:	1d3b      	adds	r3, r7, #4
10042318:	6818      	ldr	r0, [r3, #0]
1004231a:	f7ff ffa9 	bl	10042270 <ButtonsMenuSM_Event_Post>
    }
    if(timeractive & (timer+SLEEPTIMER < TIMERS_GetMilliSeconds())){
1004231e:	4b1c      	ldr	r3, [pc, #112]	@ (10042390 <ButtonsMenuSM_Event_Updater+0xfc>)
10042320:	781b      	ldrb	r3, [r3, #0]
10042322:	001d      	movs	r5, r3
10042324:	4b19      	ldr	r3, [pc, #100]	@ (1004238c <ButtonsMenuSM_Event_Updater+0xf8>)
10042326:	681b      	ldr	r3, [r3, #0]
10042328:	4a1a      	ldr	r2, [pc, #104]	@ (10042394 <ButtonsMenuSM_Event_Updater+0x100>)
1004232a:	189c      	adds	r4, r3, r2
1004232c:	f004 f904 	bl	10046538 <TIMERS_GetMilliSeconds>
10042330:	0003      	movs	r3, r0
10042332:	429c      	cmp	r4, r3
10042334:	419b      	sbcs	r3, r3
10042336:	425b      	negs	r3, r3
10042338:	b2db      	uxtb	r3, r3
1004233a:	402b      	ands	r3, r5
1004233c:	d00c      	beq.n	10042358 <ButtonsMenuSM_Event_Updater+0xc4>
    	event.status = EVENT_TIMEOUT;
1004233e:	1d3b      	adds	r3, r7, #4
10042340:	2209      	movs	r2, #9
10042342:	701a      	strb	r2, [r3, #0]
    	event.data = 0;
10042344:	1d3b      	adds	r3, r7, #4
10042346:	2200      	movs	r2, #0
10042348:	805a      	strh	r2, [r3, #2]
    	timeractive = 0;// disable sleep timer until next button press
1004234a:	4b11      	ldr	r3, [pc, #68]	@ (10042390 <ButtonsMenuSM_Event_Updater+0xfc>)
1004234c:	2200      	movs	r2, #0
1004234e:	701a      	strb	r2, [r3, #0]
    	ButtonsMenuSM_Event_Post(event);
10042350:	1d3b      	adds	r3, r7, #4
10042352:	6818      	ldr	r0, [r3, #0]
10042354:	f7ff ff8c 	bl	10042270 <ButtonsMenuSM_Event_Post>

    }
    return event;
10042358:	2108      	movs	r1, #8
1004235a:	187b      	adds	r3, r7, r1
1004235c:	1d3a      	adds	r2, r7, #4
1004235e:	6812      	ldr	r2, [r2, #0]
10042360:	601a      	str	r2, [r3, #0]
10042362:	187a      	adds	r2, r7, r1
10042364:	2300      	movs	r3, #0
10042366:	8811      	ldrh	r1, [r2, #0]
10042368:	0409      	lsls	r1, r1, #16
1004236a:	0c09      	lsrs	r1, r1, #16
1004236c:	0c1b      	lsrs	r3, r3, #16
1004236e:	041b      	lsls	r3, r3, #16
10042370:	430b      	orrs	r3, r1
10042372:	8852      	ldrh	r2, [r2, #2]
10042374:	0412      	lsls	r2, r2, #16
10042376:	041b      	lsls	r3, r3, #16
10042378:	0c1b      	lsrs	r3, r3, #16
1004237a:	4313      	orrs	r3, r2
}
1004237c:	0018      	movs	r0, r3
1004237e:	46bd      	mov	sp, r7
10042380:	b004      	add	sp, #16
10042382:	bdb0      	pop	{r4, r5, r7, pc}
10042384:	20002614 	.word	0x20002614
10042388:	200003a4 	.word	0x200003a4
1004238c:	200003a8 	.word	0x200003a8
10042390:	200003ac 	.word	0x200003ac
10042394:	00007530 	.word	0x00007530

10042398 <ButtonsMenuSM_Event_Handler>:
 * @Function: ButtonsMenuSM_Event_Handler
 * @Brief:
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t ButtonsMenuSM_Event_Handler(Event_t event){
10042398:	b5b0      	push	{r4, r5, r7, lr}
1004239a:	b08e      	sub	sp, #56	@ 0x38
1004239c:	af02      	add	r7, sp, #8
1004239e:	1d3b      	adds	r3, r7, #4
100423a0:	6018      	str	r0, [r3, #0]
	uint8_t transition = 0;
100423a2:	232f      	movs	r3, #47	@ 0x2f
100423a4:	18fb      	adds	r3, r7, r3
100423a6:	2200      	movs	r2, #0
100423a8:	701a      	strb	r2, [r3, #0]
	ButtonsMenuStates_t nextstate = BMState;
100423aa:	232e      	movs	r3, #46	@ 0x2e
100423ac:	18fb      	adds	r3, r7, r3
100423ae:	4abe      	ldr	r2, [pc, #760]	@ (100426a8 <ButtonsMenuSM_Event_Handler+0x310>)
100423b0:	7812      	ldrb	r2, [r2, #0]
100423b2:	701a      	strb	r2, [r3, #0]
	if(event.status == EVENT_TIMEOUT){
100423b4:	1d3b      	adds	r3, r7, #4
100423b6:	781b      	ldrb	r3, [r3, #0]
100423b8:	b25b      	sxtb	r3, r3
100423ba:	2b09      	cmp	r3, #9
100423bc:	d104      	bne.n	100423c8 <ButtonsMenuSM_Event_Handler+0x30>
		displayoff = 1;
100423be:	4bbb      	ldr	r3, [pc, #748]	@ (100426ac <ButtonsMenuSM_Event_Handler+0x314>)
100423c0:	2201      	movs	r2, #1
100423c2:	701a      	strb	r2, [r3, #0]
		OledOff();
100423c4:	f003 fc41 	bl	10045c4a <OledOff>
	}
	if(displayoff){
100423c8:	4bb8      	ldr	r3, [pc, #736]	@ (100426ac <ButtonsMenuSM_Event_Handler+0x314>)
100423ca:	781b      	ldrb	r3, [r3, #0]
100423cc:	2b00      	cmp	r3, #0
100423ce:	d015      	beq.n	100423fc <ButtonsMenuSM_Event_Handler+0x64>
		if(event.status == EVENT_BUTTONS){
100423d0:	1d3b      	adds	r3, r7, #4
100423d2:	781b      	ldrb	r3, [r3, #0]
100423d4:	b25b      	sxtb	r3, r3
100423d6:	2b04      	cmp	r3, #4
100423d8:	d001      	beq.n	100423de <ButtonsMenuSM_Event_Handler+0x46>
100423da:	f001 f97b 	bl	100436d4 <ButtonsMenuSM_Event_Handler+0x133c>
			displayoff = 0;
100423de:	4bb3      	ldr	r3, [pc, #716]	@ (100426ac <ButtonsMenuSM_Event_Handler+0x314>)
100423e0:	2200      	movs	r2, #0
100423e2:	701a      	strb	r2, [r3, #0]
			nextstate = main;
100423e4:	232e      	movs	r3, #46	@ 0x2e
100423e6:	18fb      	adds	r3, r7, r3
100423e8:	2200      	movs	r2, #0
100423ea:	701a      	strb	r2, [r3, #0]
			transition = 1;
100423ec:	232f      	movs	r3, #47	@ 0x2f
100423ee:	18fb      	adds	r3, r7, r3
100423f0:	2201      	movs	r2, #1
100423f2:	701a      	strb	r2, [r3, #0]
			OledOn();
100423f4:	f003 fc22 	bl	10045c3c <OledOn>
100423f8:	f001 f96c 	bl	100436d4 <ButtonsMenuSM_Event_Handler+0x133c>
		}
	} else {

		switch (BMState){
100423fc:	4baa      	ldr	r3, [pc, #680]	@ (100426a8 <ButtonsMenuSM_Event_Handler+0x310>)
100423fe:	781b      	ldrb	r3, [r3, #0]
10042400:	2b05      	cmp	r3, #5
10042402:	d901      	bls.n	10042408 <ButtonsMenuSM_Event_Handler+0x70>
10042404:	f001 f959 	bl	100436ba <ButtonsMenuSM_Event_Handler+0x1322>
10042408:	009a      	lsls	r2, r3, #2
1004240a:	4ba9      	ldr	r3, [pc, #676]	@ (100426b0 <ButtonsMenuSM_Event_Handler+0x318>)
1004240c:	18d3      	adds	r3, r2, r3
1004240e:	681b      	ldr	r3, [r3, #0]
10042410:	469f      	mov	pc, r3
		case main:
			if(event.status == EVENT_ENTRY){
10042412:	1d3b      	adds	r3, r7, #4
10042414:	781b      	ldrb	r3, [r3, #0]
10042416:	b25b      	sxtb	r3, r3
10042418:	2b02      	cmp	r3, #2
1004241a:	d101      	bne.n	10042420 <ButtonsMenuSM_Event_Handler+0x88>
				DrawMain();
1004241c:	f7ff fc32 	bl	10041c84 <DrawMain>
			}
			if(event.status == EVENT_BUTTONS){
10042420:	1d3b      	adds	r3, r7, #4
10042422:	781b      	ldrb	r3, [r3, #0]
10042424:	b25b      	sxtb	r3, r3
10042426:	2b04      	cmp	r3, #4
10042428:	d001      	beq.n	1004242e <ButtonsMenuSM_Event_Handler+0x96>
1004242a:	f001 f948 	bl	100436be <ButtonsMenuSM_Event_Handler+0x1326>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
1004242e:	1d3b      	adds	r3, r7, #4
10042430:	885b      	ldrh	r3, [r3, #2]
10042432:	001a      	movs	r2, r3
10042434:	2380      	movs	r3, #128	@ 0x80
10042436:	005b      	lsls	r3, r3, #1
10042438:	4013      	ands	r3, r2
1004243a:	d014      	beq.n	10042466 <ButtonsMenuSM_Event_Handler+0xce>
1004243c:	1d3b      	adds	r3, r7, #4
1004243e:	885b      	ldrh	r3, [r3, #2]
10042440:	001a      	movs	r2, r3
10042442:	2301      	movs	r3, #1
10042444:	4013      	ands	r3, r2
10042446:	d10e      	bne.n	10042466 <ButtonsMenuSM_Event_Handler+0xce>
					//discountprintf("moving to folder control");
					nextstate = folderControl;
10042448:	232e      	movs	r3, #46	@ 0x2e
1004244a:	18fb      	adds	r3, r7, r3
1004244c:	2201      	movs	r2, #1
1004244e:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042450:	232f      	movs	r3, #47	@ 0x2f
10042452:	18fb      	adds	r3, r7, r3
10042454:	2201      	movs	r2, #1
10042456:	701a      	strb	r2, [r3, #0]
					folderselect = 0;
10042458:	4b96      	ldr	r3, [pc, #600]	@ (100426b4 <ButtonsMenuSM_Event_Handler+0x31c>)
1004245a:	2200      	movs	r2, #0
1004245c:	701a      	strb	r2, [r3, #0]
					trackselect = 0;
1004245e:	4b96      	ldr	r3, [pc, #600]	@ (100426b8 <ButtonsMenuSM_Event_Handler+0x320>)
10042460:	2200      	movs	r2, #0
10042462:	701a      	strb	r2, [r3, #0]
10042464:	e094      	b.n	10042590 <ButtonsMenuSM_Event_Handler+0x1f8>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10042466:	1d3b      	adds	r3, r7, #4
10042468:	885b      	ldrh	r3, [r3, #2]
1004246a:	001a      	movs	r2, r3
1004246c:	2380      	movs	r3, #128	@ 0x80
1004246e:	009b      	lsls	r3, r3, #2
10042470:	4013      	ands	r3, r2
10042472:	d014      	beq.n	1004249e <ButtonsMenuSM_Event_Handler+0x106>
10042474:	1d3b      	adds	r3, r7, #4
10042476:	885b      	ldrh	r3, [r3, #2]
10042478:	001a      	movs	r2, r3
1004247a:	2302      	movs	r3, #2
1004247c:	4013      	ands	r3, r2
1004247e:	d10e      	bne.n	1004249e <ButtonsMenuSM_Event_Handler+0x106>
					//discountprintf("moving to schedule day");
					nextstate = scheduleTime;
10042480:	232e      	movs	r3, #46	@ 0x2e
10042482:	18fb      	adds	r3, r7, r3
10042484:	2202      	movs	r2, #2
10042486:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042488:	232f      	movs	r3, #47	@ 0x2f
1004248a:	18fb      	adds	r3, r7, r3
1004248c:	2201      	movs	r2, #1
1004248e:	701a      	strb	r2, [r3, #0]
					folderselect = 0;
10042490:	4b88      	ldr	r3, [pc, #544]	@ (100426b4 <ButtonsMenuSM_Event_Handler+0x31c>)
10042492:	2200      	movs	r2, #0
10042494:	701a      	strb	r2, [r3, #0]
					trackselect = 0;
10042496:	4b88      	ldr	r3, [pc, #544]	@ (100426b8 <ButtonsMenuSM_Event_Handler+0x320>)
10042498:	2200      	movs	r2, #0
1004249a:	701a      	strb	r2, [r3, #0]
1004249c:	e078      	b.n	10042590 <ButtonsMenuSM_Event_Handler+0x1f8>

				}else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
1004249e:	1d3b      	adds	r3, r7, #4
100424a0:	885b      	ldrh	r3, [r3, #2]
100424a2:	001a      	movs	r2, r3
100424a4:	2380      	movs	r3, #128	@ 0x80
100424a6:	00db      	lsls	r3, r3, #3
100424a8:	4013      	ands	r3, r2
100424aa:	d00e      	beq.n	100424ca <ButtonsMenuSM_Event_Handler+0x132>
100424ac:	1d3b      	adds	r3, r7, #4
100424ae:	885b      	ldrh	r3, [r3, #2]
100424b0:	001a      	movs	r2, r3
100424b2:	2304      	movs	r3, #4
100424b4:	4013      	ands	r3, r2
100424b6:	d108      	bne.n	100424ca <ButtonsMenuSM_Event_Handler+0x132>
					//discountprintf("incrementing volume");
					nextstate = setTime;
100424b8:	232e      	movs	r3, #46	@ 0x2e
100424ba:	18fb      	adds	r3, r7, r3
100424bc:	2204      	movs	r2, #4
100424be:	701a      	strb	r2, [r3, #0]
					transition = 1;
100424c0:	232f      	movs	r3, #47	@ 0x2f
100424c2:	18fb      	adds	r3, r7, r3
100424c4:	2201      	movs	r2, #1
100424c6:	701a      	strb	r2, [r3, #0]
100424c8:	e062      	b.n	10042590 <ButtonsMenuSM_Event_Handler+0x1f8>

				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
100424ca:	1d3b      	adds	r3, r7, #4
100424cc:	885b      	ldrh	r3, [r3, #2]
100424ce:	001a      	movs	r2, r3
100424d0:	2380      	movs	r3, #128	@ 0x80
100424d2:	011b      	lsls	r3, r3, #4
100424d4:	4013      	ands	r3, r2
100424d6:	d00e      	beq.n	100424f6 <ButtonsMenuSM_Event_Handler+0x15e>
100424d8:	1d3b      	adds	r3, r7, #4
100424da:	885b      	ldrh	r3, [r3, #2]
100424dc:	001a      	movs	r2, r3
100424de:	2308      	movs	r3, #8
100424e0:	4013      	ands	r3, r2
100424e2:	d108      	bne.n	100424f6 <ButtonsMenuSM_Event_Handler+0x15e>
					//discountprintf("moving to options");
					nextstate = options;
100424e4:	232e      	movs	r3, #46	@ 0x2e
100424e6:	18fb      	adds	r3, r7, r3
100424e8:	2205      	movs	r2, #5
100424ea:	701a      	strb	r2, [r3, #0]
					transition = 1;
100424ec:	232f      	movs	r3, #47	@ 0x2f
100424ee:	18fb      	adds	r3, r7, r3
100424f0:	2201      	movs	r2, #1
100424f2:	701a      	strb	r2, [r3, #0]
100424f4:	e04c      	b.n	10042590 <ButtonsMenuSM_Event_Handler+0x1f8>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
100424f6:	1d3b      	adds	r3, r7, #4
100424f8:	885b      	ldrh	r3, [r3, #2]
100424fa:	001a      	movs	r2, r3
100424fc:	2380      	movs	r3, #128	@ 0x80
100424fe:	015b      	lsls	r3, r3, #5
10042500:	4013      	ands	r3, r2
10042502:	d01a      	beq.n	1004253a <ButtonsMenuSM_Event_Handler+0x1a2>
10042504:	1d3b      	adds	r3, r7, #4
10042506:	885b      	ldrh	r3, [r3, #2]
10042508:	001a      	movs	r2, r3
1004250a:	2310      	movs	r3, #16
1004250c:	4013      	ands	r3, r2
1004250e:	d114      	bne.n	1004253a <ButtonsMenuSM_Event_Handler+0x1a2>
					//discountprintf("decrementing volume");
					uint8_t vol = FLASH_GetVolume()-5;
10042510:	f001 ff1c 	bl	1004434c <FLASH_GetVolume>
10042514:	0003      	movs	r3, r0
10042516:	001a      	movs	r2, r3
10042518:	242b      	movs	r4, #43	@ 0x2b
1004251a:	193b      	adds	r3, r7, r4
1004251c:	3a05      	subs	r2, #5
1004251e:	701a      	strb	r2, [r3, #0]
					if(vol >= 0){
						FLASH_SetDCVol(vol, FLASH_GetDutyCycle());
10042520:	f001 ff2a 	bl	10044378 <FLASH_GetDutyCycle>
10042524:	0003      	movs	r3, r0
10042526:	001a      	movs	r2, r3
10042528:	193b      	adds	r3, r7, r4
1004252a:	781b      	ldrb	r3, [r3, #0]
1004252c:	0011      	movs	r1, r2
1004252e:	0018      	movs	r0, r3
10042530:	f001 feca 	bl	100442c8 <FLASH_SetDCVol>
					}
					DrawMain();
10042534:	f7ff fba6 	bl	10041c84 <DrawMain>
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10042538:	e02a      	b.n	10042590 <ButtonsMenuSM_Event_Handler+0x1f8>

				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
1004253a:	1d3b      	adds	r3, r7, #4
1004253c:	885b      	ldrh	r3, [r3, #2]
1004253e:	001a      	movs	r2, r3
10042540:	2380      	movs	r3, #128	@ 0x80
10042542:	019b      	lsls	r3, r3, #6
10042544:	4013      	ands	r3, r2
10042546:	d101      	bne.n	1004254c <ButtonsMenuSM_Event_Handler+0x1b4>
10042548:	f001 f8b9 	bl	100436be <ButtonsMenuSM_Event_Handler+0x1326>
1004254c:	1d3b      	adds	r3, r7, #4
1004254e:	885b      	ldrh	r3, [r3, #2]
10042550:	001a      	movs	r2, r3
10042552:	2320      	movs	r3, #32
10042554:	4013      	ands	r3, r2
10042556:	d001      	beq.n	1004255c <ButtonsMenuSM_Event_Handler+0x1c4>
10042558:	f001 f8b1 	bl	100436be <ButtonsMenuSM_Event_Handler+0x1326>
					//discountprintf("moving to set Time");
					uint8_t vol = FLASH_GetVolume()+5;
1004255c:	f001 fef6 	bl	1004434c <FLASH_GetVolume>
10042560:	0003      	movs	r3, r0
10042562:	001a      	movs	r2, r3
10042564:	242a      	movs	r4, #42	@ 0x2a
10042566:	193b      	adds	r3, r7, r4
10042568:	3205      	adds	r2, #5
1004256a:	701a      	strb	r2, [r3, #0]
					if(vol <= 100){
1004256c:	193b      	adds	r3, r7, r4
1004256e:	781b      	ldrb	r3, [r3, #0]
10042570:	2b64      	cmp	r3, #100	@ 0x64
10042572:	d809      	bhi.n	10042588 <ButtonsMenuSM_Event_Handler+0x1f0>
						FLASH_SetDCVol(vol, FLASH_GetDutyCycle());
10042574:	f001 ff00 	bl	10044378 <FLASH_GetDutyCycle>
10042578:	0003      	movs	r3, r0
1004257a:	001a      	movs	r2, r3
1004257c:	193b      	adds	r3, r7, r4
1004257e:	781b      	ldrb	r3, [r3, #0]
10042580:	0011      	movs	r1, r2
10042582:	0018      	movs	r0, r3
10042584:	f001 fea0 	bl	100442c8 <FLASH_SetDCVol>
					}
					DrawMain();
10042588:	f7ff fb7c 	bl	10041c84 <DrawMain>

				}

			}
			break;
1004258c:	f001 f897 	bl	100436be <ButtonsMenuSM_Event_Handler+0x1326>
10042590:	f001 f895 	bl	100436be <ButtonsMenuSM_Event_Handler+0x1326>
		case folderControl:
			if(event.status == EVENT_ENTRY){
10042594:	1d3b      	adds	r3, r7, #4
10042596:	781b      	ldrb	r3, [r3, #0]
10042598:	b25b      	sxtb	r3, r3
1004259a:	2b02      	cmp	r3, #2
1004259c:	d10b      	bne.n	100425b6 <ButtonsMenuSM_Event_Handler+0x21e>
				cursorpos = 0;
1004259e:	4b47      	ldr	r3, [pc, #284]	@ (100426bc <ButtonsMenuSM_Event_Handler+0x324>)
100425a0:	2200      	movs	r2, #0
100425a2:	701a      	strb	r2, [r3, #0]
				DrawFolder(cursorpos, folderselect, trackselect);
100425a4:	4b45      	ldr	r3, [pc, #276]	@ (100426bc <ButtonsMenuSM_Event_Handler+0x324>)
100425a6:	7818      	ldrb	r0, [r3, #0]
100425a8:	4b42      	ldr	r3, [pc, #264]	@ (100426b4 <ButtonsMenuSM_Event_Handler+0x31c>)
100425aa:	7819      	ldrb	r1, [r3, #0]
100425ac:	4b42      	ldr	r3, [pc, #264]	@ (100426b8 <ButtonsMenuSM_Event_Handler+0x320>)
100425ae:	781b      	ldrb	r3, [r3, #0]
100425b0:	001a      	movs	r2, r3
100425b2:	f7ff fb97 	bl	10041ce4 <DrawFolder>
			}
			if(event.status == EVENT_BUTTONS){
100425b6:	1d3b      	adds	r3, r7, #4
100425b8:	781b      	ldrb	r3, [r3, #0]
100425ba:	b25b      	sxtb	r3, r3
100425bc:	2b04      	cmp	r3, #4
100425be:	d001      	beq.n	100425c4 <ButtonsMenuSM_Event_Handler+0x22c>
100425c0:	f001 f87f 	bl	100436c2 <ButtonsMenuSM_Event_Handler+0x132a>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
100425c4:	1d3b      	adds	r3, r7, #4
100425c6:	885b      	ldrh	r3, [r3, #2]
100425c8:	001a      	movs	r2, r3
100425ca:	2380      	movs	r3, #128	@ 0x80
100425cc:	005b      	lsls	r3, r3, #1
100425ce:	4013      	ands	r3, r2
100425d0:	d00e      	beq.n	100425f0 <ButtonsMenuSM_Event_Handler+0x258>
100425d2:	1d3b      	adds	r3, r7, #4
100425d4:	885b      	ldrh	r3, [r3, #2]
100425d6:	001a      	movs	r2, r3
100425d8:	2301      	movs	r3, #1
100425da:	4013      	ands	r3, r2
100425dc:	d108      	bne.n	100425f0 <ButtonsMenuSM_Event_Handler+0x258>
					//discountprintf("moving to main, back");
					nextstate = main;
100425de:	232e      	movs	r3, #46	@ 0x2e
100425e0:	18fb      	adds	r3, r7, r3
100425e2:	2200      	movs	r2, #0
100425e4:	701a      	strb	r2, [r3, #0]
					transition = 1;
100425e6:	232f      	movs	r3, #47	@ 0x2f
100425e8:	18fb      	adds	r3, r7, r3
100425ea:	2201      	movs	r2, #1
100425ec:	701a      	strb	r2, [r3, #0]
100425ee:	e0e1      	b.n	100427b4 <ButtonsMenuSM_Event_Handler+0x41c>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
100425f0:	1d3b      	adds	r3, r7, #4
100425f2:	885b      	ldrh	r3, [r3, #2]
100425f4:	001a      	movs	r2, r3
100425f6:	2380      	movs	r3, #128	@ 0x80
100425f8:	009b      	lsls	r3, r3, #2
100425fa:	4013      	ands	r3, r2
100425fc:	d020      	beq.n	10042640 <ButtonsMenuSM_Event_Handler+0x2a8>
100425fe:	1d3b      	adds	r3, r7, #4
10042600:	885b      	ldrh	r3, [r3, #2]
10042602:	001a      	movs	r2, r3
10042604:	2302      	movs	r3, #2
10042606:	4013      	ands	r3, r2
10042608:	d11a      	bne.n	10042640 <ButtonsMenuSM_Event_Handler+0x2a8>
					MP3_Event_Post(((Event_t){EVENT_PLAY, ((folderselect)<<8) + (trackselect)}));
1004260a:	2124      	movs	r1, #36	@ 0x24
1004260c:	187b      	adds	r3, r7, r1
1004260e:	220b      	movs	r2, #11
10042610:	701a      	strb	r2, [r3, #0]
10042612:	4b28      	ldr	r3, [pc, #160]	@ (100426b4 <ButtonsMenuSM_Event_Handler+0x31c>)
10042614:	781b      	ldrb	r3, [r3, #0]
10042616:	021b      	lsls	r3, r3, #8
10042618:	b29b      	uxth	r3, r3
1004261a:	4a27      	ldr	r2, [pc, #156]	@ (100426b8 <ButtonsMenuSM_Event_Handler+0x320>)
1004261c:	7812      	ldrb	r2, [r2, #0]
1004261e:	189b      	adds	r3, r3, r2
10042620:	b29a      	uxth	r2, r3
10042622:	187b      	adds	r3, r7, r1
10042624:	805a      	strh	r2, [r3, #2]
10042626:	187b      	adds	r3, r7, r1
10042628:	6818      	ldr	r0, [r3, #0]
1004262a:	f002 fe51 	bl	100452d0 <MP3_Event_Post>
					//discountprintf("moving to main, select");
					nextstate = main;
1004262e:	232e      	movs	r3, #46	@ 0x2e
10042630:	18fb      	adds	r3, r7, r3
10042632:	2200      	movs	r2, #0
10042634:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042636:	232f      	movs	r3, #47	@ 0x2f
10042638:	18fb      	adds	r3, r7, r3
1004263a:	2201      	movs	r2, #1
1004263c:	701a      	strb	r2, [r3, #0]
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
1004263e:	e0b9      	b.n	100427b4 <ButtonsMenuSM_Event_Handler+0x41c>

				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
10042640:	1d3b      	adds	r3, r7, #4
10042642:	885b      	ldrh	r3, [r3, #2]
10042644:	001a      	movs	r2, r3
10042646:	2380      	movs	r3, #128	@ 0x80
10042648:	00db      	lsls	r3, r3, #3
1004264a:	4013      	ands	r3, r2
1004264c:	d038      	beq.n	100426c0 <ButtonsMenuSM_Event_Handler+0x328>
1004264e:	1d3b      	adds	r3, r7, #4
10042650:	885b      	ldrh	r3, [r3, #2]
10042652:	001a      	movs	r2, r3
10042654:	2304      	movs	r3, #4
10042656:	4013      	ands	r3, r2
10042658:	d132      	bne.n	100426c0 <ButtonsMenuSM_Event_Handler+0x328>
					if(!cursorpos){
1004265a:	4b18      	ldr	r3, [pc, #96]	@ (100426bc <ButtonsMenuSM_Event_Handler+0x324>)
1004265c:	781b      	ldrb	r3, [r3, #0]
1004265e:	2b00      	cmp	r3, #0
10042660:	d10d      	bne.n	1004267e <ButtonsMenuSM_Event_Handler+0x2e6>
						folderselect--;
10042662:	4b14      	ldr	r3, [pc, #80]	@ (100426b4 <ButtonsMenuSM_Event_Handler+0x31c>)
10042664:	781b      	ldrb	r3, [r3, #0]
10042666:	3b01      	subs	r3, #1
10042668:	b2da      	uxtb	r2, r3
1004266a:	4b12      	ldr	r3, [pc, #72]	@ (100426b4 <ButtonsMenuSM_Event_Handler+0x31c>)
1004266c:	701a      	strb	r2, [r3, #0]
						if(folderselect==255){
1004266e:	4b11      	ldr	r3, [pc, #68]	@ (100426b4 <ButtonsMenuSM_Event_Handler+0x31c>)
10042670:	781b      	ldrb	r3, [r3, #0]
10042672:	2bff      	cmp	r3, #255	@ 0xff
10042674:	d10d      	bne.n	10042692 <ButtonsMenuSM_Event_Handler+0x2fa>
							folderselect = 100;
10042676:	4b0f      	ldr	r3, [pc, #60]	@ (100426b4 <ButtonsMenuSM_Event_Handler+0x31c>)
10042678:	2264      	movs	r2, #100	@ 0x64
1004267a:	701a      	strb	r2, [r3, #0]
1004267c:	e009      	b.n	10042692 <ButtonsMenuSM_Event_Handler+0x2fa>
						}
					} else {
						trackselect--;
1004267e:	4b0e      	ldr	r3, [pc, #56]	@ (100426b8 <ButtonsMenuSM_Event_Handler+0x320>)
10042680:	781b      	ldrb	r3, [r3, #0]
10042682:	3b01      	subs	r3, #1
10042684:	b2da      	uxtb	r2, r3
10042686:	4b0c      	ldr	r3, [pc, #48]	@ (100426b8 <ButtonsMenuSM_Event_Handler+0x320>)
10042688:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
1004268a:	4b0b      	ldr	r3, [pc, #44]	@ (100426b8 <ButtonsMenuSM_Event_Handler+0x320>)
1004268c:	781a      	ldrb	r2, [r3, #0]
1004268e:	4b0a      	ldr	r3, [pc, #40]	@ (100426b8 <ButtonsMenuSM_Event_Handler+0x320>)
10042690:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
10042692:	4b0a      	ldr	r3, [pc, #40]	@ (100426bc <ButtonsMenuSM_Event_Handler+0x324>)
10042694:	7818      	ldrb	r0, [r3, #0]
10042696:	4b07      	ldr	r3, [pc, #28]	@ (100426b4 <ButtonsMenuSM_Event_Handler+0x31c>)
10042698:	7819      	ldrb	r1, [r3, #0]
1004269a:	4b07      	ldr	r3, [pc, #28]	@ (100426b8 <ButtonsMenuSM_Event_Handler+0x320>)
1004269c:	781b      	ldrb	r3, [r3, #0]
1004269e:	001a      	movs	r2, r3
100426a0:	f7ff fb20 	bl	10041ce4 <DrawFolder>
100426a4:	e086      	b.n	100427b4 <ButtonsMenuSM_Event_Handler+0x41c>
100426a6:	46c0      	nop			@ (mov r8, r8)
100426a8:	2000039c 	.word	0x2000039c
100426ac:	2000039d 	.word	0x2000039d
100426b0:	1006919c 	.word	0x1006919c
100426b4:	2000039f 	.word	0x2000039f
100426b8:	200003a0 	.word	0x200003a0
100426bc:	2000039e 	.word	0x2000039e

				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
100426c0:	1d3b      	adds	r3, r7, #4
100426c2:	885b      	ldrh	r3, [r3, #2]
100426c4:	001a      	movs	r2, r3
100426c6:	2380      	movs	r3, #128	@ 0x80
100426c8:	011b      	lsls	r3, r3, #4
100426ca:	4013      	ands	r3, r2
100426cc:	d02f      	beq.n	1004272e <ButtonsMenuSM_Event_Handler+0x396>
100426ce:	1d3b      	adds	r3, r7, #4
100426d0:	885b      	ldrh	r3, [r3, #2]
100426d2:	001a      	movs	r2, r3
100426d4:	2308      	movs	r3, #8
100426d6:	4013      	ands	r3, r2
100426d8:	d129      	bne.n	1004272e <ButtonsMenuSM_Event_Handler+0x396>
					if(!cursorpos){
100426da:	4bd7      	ldr	r3, [pc, #860]	@ (10042a38 <ButtonsMenuSM_Event_Handler+0x6a0>)
100426dc:	781b      	ldrb	r3, [r3, #0]
100426de:	2b00      	cmp	r3, #0
100426e0:	d110      	bne.n	10042704 <ButtonsMenuSM_Event_Handler+0x36c>
						folderselect++;
100426e2:	4bd6      	ldr	r3, [pc, #856]	@ (10042a3c <ButtonsMenuSM_Event_Handler+0x6a4>)
100426e4:	781b      	ldrb	r3, [r3, #0]
100426e6:	3301      	adds	r3, #1
100426e8:	b2da      	uxtb	r2, r3
100426ea:	4bd4      	ldr	r3, [pc, #848]	@ (10042a3c <ButtonsMenuSM_Event_Handler+0x6a4>)
100426ec:	701a      	strb	r2, [r3, #0]
						folderselect %= 100;
100426ee:	4bd3      	ldr	r3, [pc, #844]	@ (10042a3c <ButtonsMenuSM_Event_Handler+0x6a4>)
100426f0:	781b      	ldrb	r3, [r3, #0]
100426f2:	2164      	movs	r1, #100	@ 0x64
100426f4:	0018      	movs	r0, r3
100426f6:	f7fd fe29 	bl	1004034c <__aeabi_uidivmod>
100426fa:	000b      	movs	r3, r1
100426fc:	b2da      	uxtb	r2, r3
100426fe:	4bcf      	ldr	r3, [pc, #828]	@ (10042a3c <ButtonsMenuSM_Event_Handler+0x6a4>)
10042700:	701a      	strb	r2, [r3, #0]
10042702:	e009      	b.n	10042718 <ButtonsMenuSM_Event_Handler+0x380>
					} else {
						trackselect++;
10042704:	4bce      	ldr	r3, [pc, #824]	@ (10042a40 <ButtonsMenuSM_Event_Handler+0x6a8>)
10042706:	781b      	ldrb	r3, [r3, #0]
10042708:	3301      	adds	r3, #1
1004270a:	b2da      	uxtb	r2, r3
1004270c:	4bcc      	ldr	r3, [pc, #816]	@ (10042a40 <ButtonsMenuSM_Event_Handler+0x6a8>)
1004270e:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
10042710:	4bcb      	ldr	r3, [pc, #812]	@ (10042a40 <ButtonsMenuSM_Event_Handler+0x6a8>)
10042712:	781a      	ldrb	r2, [r3, #0]
10042714:	4bca      	ldr	r3, [pc, #808]	@ (10042a40 <ButtonsMenuSM_Event_Handler+0x6a8>)
10042716:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
10042718:	4bc7      	ldr	r3, [pc, #796]	@ (10042a38 <ButtonsMenuSM_Event_Handler+0x6a0>)
1004271a:	7818      	ldrb	r0, [r3, #0]
1004271c:	4bc7      	ldr	r3, [pc, #796]	@ (10042a3c <ButtonsMenuSM_Event_Handler+0x6a4>)
1004271e:	7819      	ldrb	r1, [r3, #0]
10042720:	4bc7      	ldr	r3, [pc, #796]	@ (10042a40 <ButtonsMenuSM_Event_Handler+0x6a8>)
10042722:	781b      	ldrb	r3, [r3, #0]
10042724:	001a      	movs	r2, r3
10042726:	f7ff fadd 	bl	10041ce4 <DrawFolder>
					break;
1004272a:	f000 ffd3 	bl	100436d4 <ButtonsMenuSM_Event_Handler+0x133c>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
1004272e:	1d3b      	adds	r3, r7, #4
10042730:	885b      	ldrh	r3, [r3, #2]
10042732:	001a      	movs	r2, r3
10042734:	2380      	movs	r3, #128	@ 0x80
10042736:	015b      	lsls	r3, r3, #5
10042738:	4013      	ands	r3, r2
1004273a:	d017      	beq.n	1004276c <ButtonsMenuSM_Event_Handler+0x3d4>
1004273c:	1d3b      	adds	r3, r7, #4
1004273e:	885b      	ldrh	r3, [r3, #2]
10042740:	001a      	movs	r2, r3
10042742:	2310      	movs	r3, #16
10042744:	4013      	ands	r3, r2
10042746:	d111      	bne.n	1004276c <ButtonsMenuSM_Event_Handler+0x3d4>
					cursorpos = !cursorpos;
10042748:	4bbb      	ldr	r3, [pc, #748]	@ (10042a38 <ButtonsMenuSM_Event_Handler+0x6a0>)
1004274a:	781b      	ldrb	r3, [r3, #0]
1004274c:	425a      	negs	r2, r3
1004274e:	4153      	adcs	r3, r2
10042750:	b2db      	uxtb	r3, r3
10042752:	001a      	movs	r2, r3
10042754:	4bb8      	ldr	r3, [pc, #736]	@ (10042a38 <ButtonsMenuSM_Event_Handler+0x6a0>)
10042756:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
10042758:	4bb7      	ldr	r3, [pc, #732]	@ (10042a38 <ButtonsMenuSM_Event_Handler+0x6a0>)
1004275a:	7818      	ldrb	r0, [r3, #0]
1004275c:	4bb7      	ldr	r3, [pc, #732]	@ (10042a3c <ButtonsMenuSM_Event_Handler+0x6a4>)
1004275e:	7819      	ldrb	r1, [r3, #0]
10042760:	4bb7      	ldr	r3, [pc, #732]	@ (10042a40 <ButtonsMenuSM_Event_Handler+0x6a8>)
10042762:	781b      	ldrb	r3, [r3, #0]
10042764:	001a      	movs	r2, r3
10042766:	f7ff fabd 	bl	10041ce4 <DrawFolder>
1004276a:	e023      	b.n	100427b4 <ButtonsMenuSM_Event_Handler+0x41c>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
1004276c:	1d3b      	adds	r3, r7, #4
1004276e:	885b      	ldrh	r3, [r3, #2]
10042770:	001a      	movs	r2, r3
10042772:	2380      	movs	r3, #128	@ 0x80
10042774:	019b      	lsls	r3, r3, #6
10042776:	4013      	ands	r3, r2
10042778:	d101      	bne.n	1004277e <ButtonsMenuSM_Event_Handler+0x3e6>
1004277a:	f000 ffa2 	bl	100436c2 <ButtonsMenuSM_Event_Handler+0x132a>
1004277e:	1d3b      	adds	r3, r7, #4
10042780:	885b      	ldrh	r3, [r3, #2]
10042782:	001a      	movs	r2, r3
10042784:	2320      	movs	r3, #32
10042786:	4013      	ands	r3, r2
10042788:	d001      	beq.n	1004278e <ButtonsMenuSM_Event_Handler+0x3f6>
1004278a:	f000 ff9a 	bl	100436c2 <ButtonsMenuSM_Event_Handler+0x132a>
					cursorpos = !cursorpos;
1004278e:	4baa      	ldr	r3, [pc, #680]	@ (10042a38 <ButtonsMenuSM_Event_Handler+0x6a0>)
10042790:	781b      	ldrb	r3, [r3, #0]
10042792:	425a      	negs	r2, r3
10042794:	4153      	adcs	r3, r2
10042796:	b2db      	uxtb	r3, r3
10042798:	001a      	movs	r2, r3
1004279a:	4ba7      	ldr	r3, [pc, #668]	@ (10042a38 <ButtonsMenuSM_Event_Handler+0x6a0>)
1004279c:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
1004279e:	4ba6      	ldr	r3, [pc, #664]	@ (10042a38 <ButtonsMenuSM_Event_Handler+0x6a0>)
100427a0:	7818      	ldrb	r0, [r3, #0]
100427a2:	4ba6      	ldr	r3, [pc, #664]	@ (10042a3c <ButtonsMenuSM_Event_Handler+0x6a4>)
100427a4:	7819      	ldrb	r1, [r3, #0]
100427a6:	4ba6      	ldr	r3, [pc, #664]	@ (10042a40 <ButtonsMenuSM_Event_Handler+0x6a8>)
100427a8:	781b      	ldrb	r3, [r3, #0]
100427aa:	001a      	movs	r2, r3
100427ac:	f7ff fa9a 	bl	10041ce4 <DrawFolder>
				}
			}
			break;
100427b0:	f000 ff87 	bl	100436c2 <ButtonsMenuSM_Event_Handler+0x132a>
100427b4:	f000 ff85 	bl	100436c2 <ButtonsMenuSM_Event_Handler+0x132a>
			static uint8_t monthselect;
			static uint8_t Sdayselect;
			static uint8_t Edayselect;
			static uint8_t Stimeselect;
			static uint8_t Etimeselect;
			if(event.status == EVENT_ENTRY){
100427b8:	1d3b      	adds	r3, r7, #4
100427ba:	781b      	ldrb	r3, [r3, #0]
100427bc:	b25b      	sxtb	r3, r3
100427be:	2b02      	cmp	r3, #2
100427c0:	d127      	bne.n	10042812 <ButtonsMenuSM_Event_Handler+0x47a>
				cursorpos = 0;
100427c2:	4b9d      	ldr	r3, [pc, #628]	@ (10042a38 <ButtonsMenuSM_Event_Handler+0x6a0>)
100427c4:	2200      	movs	r2, #0
100427c6:	701a      	strb	r2, [r3, #0]
				monthselect=0;
100427c8:	4b9e      	ldr	r3, [pc, #632]	@ (10042a44 <ButtonsMenuSM_Event_Handler+0x6ac>)
100427ca:	2200      	movs	r2, #0
100427cc:	701a      	strb	r2, [r3, #0]
				Sdayselect=0;
100427ce:	4b9e      	ldr	r3, [pc, #632]	@ (10042a48 <ButtonsMenuSM_Event_Handler+0x6b0>)
100427d0:	2200      	movs	r2, #0
100427d2:	701a      	strb	r2, [r3, #0]
				Edayselect=0;
100427d4:	4b9d      	ldr	r3, [pc, #628]	@ (10042a4c <ButtonsMenuSM_Event_Handler+0x6b4>)
100427d6:	2200      	movs	r2, #0
100427d8:	701a      	strb	r2, [r3, #0]
				Stimeselect=0;
100427da:	4b9d      	ldr	r3, [pc, #628]	@ (10042a50 <ButtonsMenuSM_Event_Handler+0x6b8>)
100427dc:	2200      	movs	r2, #0
100427de:	701a      	strb	r2, [r3, #0]
				Etimeselect=0;
100427e0:	4b9c      	ldr	r3, [pc, #624]	@ (10042a54 <ButtonsMenuSM_Event_Handler+0x6bc>)
100427e2:	2200      	movs	r2, #0
100427e4:	701a      	strb	r2, [r3, #0]
				DrawSchedule(cursorpos, monthselect, Sdayselect+1, Edayselect+1, Stimeselect, Etimeselect);
100427e6:	4b94      	ldr	r3, [pc, #592]	@ (10042a38 <ButtonsMenuSM_Event_Handler+0x6a0>)
100427e8:	7818      	ldrb	r0, [r3, #0]
100427ea:	4b96      	ldr	r3, [pc, #600]	@ (10042a44 <ButtonsMenuSM_Event_Handler+0x6ac>)
100427ec:	7819      	ldrb	r1, [r3, #0]
100427ee:	4b96      	ldr	r3, [pc, #600]	@ (10042a48 <ButtonsMenuSM_Event_Handler+0x6b0>)
100427f0:	781b      	ldrb	r3, [r3, #0]
100427f2:	3301      	adds	r3, #1
100427f4:	b2dc      	uxtb	r4, r3
100427f6:	4b95      	ldr	r3, [pc, #596]	@ (10042a4c <ButtonsMenuSM_Event_Handler+0x6b4>)
100427f8:	781b      	ldrb	r3, [r3, #0]
100427fa:	3301      	adds	r3, #1
100427fc:	b2dd      	uxtb	r5, r3
100427fe:	4b94      	ldr	r3, [pc, #592]	@ (10042a50 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042800:	781b      	ldrb	r3, [r3, #0]
10042802:	4a94      	ldr	r2, [pc, #592]	@ (10042a54 <ButtonsMenuSM_Event_Handler+0x6bc>)
10042804:	7812      	ldrb	r2, [r2, #0]
10042806:	9201      	str	r2, [sp, #4]
10042808:	9300      	str	r3, [sp, #0]
1004280a:	002b      	movs	r3, r5
1004280c:	0022      	movs	r2, r4
1004280e:	f7ff fbb5 	bl	10041f7c <DrawSchedule>
			}
			if(event.status == EVENT_BUTTONS){
10042812:	1d3b      	adds	r3, r7, #4
10042814:	781b      	ldrb	r3, [r3, #0]
10042816:	b25b      	sxtb	r3, r3
10042818:	2b04      	cmp	r3, #4
1004281a:	d001      	beq.n	10042820 <ButtonsMenuSM_Event_Handler+0x488>
1004281c:	f000 ff53 	bl	100436c6 <ButtonsMenuSM_Event_Handler+0x132e>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10042820:	1d3b      	adds	r3, r7, #4
10042822:	885b      	ldrh	r3, [r3, #2]
10042824:	001a      	movs	r2, r3
10042826:	2380      	movs	r3, #128	@ 0x80
10042828:	005b      	lsls	r3, r3, #1
1004282a:	4013      	ands	r3, r2
1004282c:	d00e      	beq.n	1004284c <ButtonsMenuSM_Event_Handler+0x4b4>
1004282e:	1d3b      	adds	r3, r7, #4
10042830:	885b      	ldrh	r3, [r3, #2]
10042832:	001a      	movs	r2, r3
10042834:	2301      	movs	r3, #1
10042836:	4013      	ands	r3, r2
10042838:	d108      	bne.n	1004284c <ButtonsMenuSM_Event_Handler+0x4b4>
					nextstate = main;
1004283a:	232e      	movs	r3, #46	@ 0x2e
1004283c:	18fb      	adds	r3, r7, r3
1004283e:	2200      	movs	r2, #0
10042840:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042842:	232f      	movs	r3, #47	@ 0x2f
10042844:	18fb      	adds	r3, r7, r3
10042846:	2201      	movs	r2, #1
10042848:	701a      	strb	r2, [r3, #0]
1004284a:	e224      	b.n	10042c96 <ButtonsMenuSM_Event_Handler+0x8fe>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
1004284c:	1d3b      	adds	r3, r7, #4
1004284e:	885b      	ldrh	r3, [r3, #2]
10042850:	001a      	movs	r2, r3
10042852:	2380      	movs	r3, #128	@ 0x80
10042854:	009b      	lsls	r3, r3, #2
10042856:	4013      	ands	r3, r2
10042858:	d00e      	beq.n	10042878 <ButtonsMenuSM_Event_Handler+0x4e0>
1004285a:	1d3b      	adds	r3, r7, #4
1004285c:	885b      	ldrh	r3, [r3, #2]
1004285e:	001a      	movs	r2, r3
10042860:	2302      	movs	r3, #2
10042862:	4013      	ands	r3, r2
10042864:	d108      	bne.n	10042878 <ButtonsMenuSM_Event_Handler+0x4e0>
					nextstate = scheduleFolder;
10042866:	232e      	movs	r3, #46	@ 0x2e
10042868:	18fb      	adds	r3, r7, r3
1004286a:	2203      	movs	r2, #3
1004286c:	701a      	strb	r2, [r3, #0]
					transition = 1;
1004286e:	232f      	movs	r3, #47	@ 0x2f
10042870:	18fb      	adds	r3, r7, r3
10042872:	2201      	movs	r2, #1
10042874:	701a      	strb	r2, [r3, #0]
10042876:	e20e      	b.n	10042c96 <ButtonsMenuSM_Event_Handler+0x8fe>
				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
10042878:	1d3b      	adds	r3, r7, #4
1004287a:	885b      	ldrh	r3, [r3, #2]
1004287c:	001a      	movs	r2, r3
1004287e:	2380      	movs	r3, #128	@ 0x80
10042880:	00db      	lsls	r3, r3, #3
10042882:	4013      	ands	r3, r2
10042884:	d100      	bne.n	10042888 <ButtonsMenuSM_Event_Handler+0x4f0>
10042886:	e0bd      	b.n	10042a04 <ButtonsMenuSM_Event_Handler+0x66c>
10042888:	1d3b      	adds	r3, r7, #4
1004288a:	885b      	ldrh	r3, [r3, #2]
1004288c:	001a      	movs	r2, r3
1004288e:	2304      	movs	r3, #4
10042890:	4013      	ands	r3, r2
10042892:	d000      	beq.n	10042896 <ButtonsMenuSM_Event_Handler+0x4fe>
10042894:	e0b6      	b.n	10042a04 <ButtonsMenuSM_Event_Handler+0x66c>
					switch(cursorpos){
10042896:	4b68      	ldr	r3, [pc, #416]	@ (10042a38 <ButtonsMenuSM_Event_Handler+0x6a0>)
10042898:	781b      	ldrb	r3, [r3, #0]
1004289a:	2b06      	cmp	r3, #6
1004289c:	d900      	bls.n	100428a0 <ButtonsMenuSM_Event_Handler+0x508>
1004289e:	e093      	b.n	100429c8 <ButtonsMenuSM_Event_Handler+0x630>
100428a0:	009a      	lsls	r2, r3, #2
100428a2:	4b6d      	ldr	r3, [pc, #436]	@ (10042a58 <ButtonsMenuSM_Event_Handler+0x6c0>)
100428a4:	18d3      	adds	r3, r2, r3
100428a6:	681b      	ldr	r3, [r3, #0]
100428a8:	469f      	mov	pc, r3
					case 0:
						monthselect--;
100428aa:	4b66      	ldr	r3, [pc, #408]	@ (10042a44 <ButtonsMenuSM_Event_Handler+0x6ac>)
100428ac:	781b      	ldrb	r3, [r3, #0]
100428ae:	3b01      	subs	r3, #1
100428b0:	b2da      	uxtb	r2, r3
100428b2:	4b64      	ldr	r3, [pc, #400]	@ (10042a44 <ButtonsMenuSM_Event_Handler+0x6ac>)
100428b4:	701a      	strb	r2, [r3, #0]
						if (monthselect == 255){
100428b6:	4b63      	ldr	r3, [pc, #396]	@ (10042a44 <ButtonsMenuSM_Event_Handler+0x6ac>)
100428b8:	781b      	ldrb	r3, [r3, #0]
100428ba:	2bff      	cmp	r3, #255	@ 0xff
100428bc:	d000      	beq.n	100428c0 <ButtonsMenuSM_Event_Handler+0x528>
100428be:	e085      	b.n	100429cc <ButtonsMenuSM_Event_Handler+0x634>
							monthselect = 12;
100428c0:	4b60      	ldr	r3, [pc, #384]	@ (10042a44 <ButtonsMenuSM_Event_Handler+0x6ac>)
100428c2:	220c      	movs	r2, #12
100428c4:	701a      	strb	r2, [r3, #0]
						}
						break;
100428c6:	e081      	b.n	100429cc <ButtonsMenuSM_Event_Handler+0x634>
					case 1:
					Sdayselect--;
100428c8:	4b5f      	ldr	r3, [pc, #380]	@ (10042a48 <ButtonsMenuSM_Event_Handler+0x6b0>)
100428ca:	781b      	ldrb	r3, [r3, #0]
100428cc:	3b01      	subs	r3, #1
100428ce:	b2da      	uxtb	r2, r3
100428d0:	4b5d      	ldr	r3, [pc, #372]	@ (10042a48 <ButtonsMenuSM_Event_Handler+0x6b0>)
100428d2:	701a      	strb	r2, [r3, #0]
						if (Sdayselect == 255){
100428d4:	4b5c      	ldr	r3, [pc, #368]	@ (10042a48 <ButtonsMenuSM_Event_Handler+0x6b0>)
100428d6:	781b      	ldrb	r3, [r3, #0]
100428d8:	2bff      	cmp	r3, #255	@ 0xff
100428da:	d000      	beq.n	100428de <ButtonsMenuSM_Event_Handler+0x546>
100428dc:	e078      	b.n	100429d0 <ButtonsMenuSM_Event_Handler+0x638>
							Sdayselect = 30;
100428de:	4b5a      	ldr	r3, [pc, #360]	@ (10042a48 <ButtonsMenuSM_Event_Handler+0x6b0>)
100428e0:	221e      	movs	r2, #30
100428e2:	701a      	strb	r2, [r3, #0]
						}
						break;
100428e4:	e074      	b.n	100429d0 <ButtonsMenuSM_Event_Handler+0x638>
					case 2:
						Edayselect--;
100428e6:	4b59      	ldr	r3, [pc, #356]	@ (10042a4c <ButtonsMenuSM_Event_Handler+0x6b4>)
100428e8:	781b      	ldrb	r3, [r3, #0]
100428ea:	3b01      	subs	r3, #1
100428ec:	b2da      	uxtb	r2, r3
100428ee:	4b57      	ldr	r3, [pc, #348]	@ (10042a4c <ButtonsMenuSM_Event_Handler+0x6b4>)
100428f0:	701a      	strb	r2, [r3, #0]
						if (Edayselect == 255){
100428f2:	4b56      	ldr	r3, [pc, #344]	@ (10042a4c <ButtonsMenuSM_Event_Handler+0x6b4>)
100428f4:	781b      	ldrb	r3, [r3, #0]
100428f6:	2bff      	cmp	r3, #255	@ 0xff
100428f8:	d000      	beq.n	100428fc <ButtonsMenuSM_Event_Handler+0x564>
100428fa:	e06b      	b.n	100429d4 <ButtonsMenuSM_Event_Handler+0x63c>
							Edayselect = 30;
100428fc:	4b53      	ldr	r3, [pc, #332]	@ (10042a4c <ButtonsMenuSM_Event_Handler+0x6b4>)
100428fe:	221e      	movs	r2, #30
10042900:	701a      	strb	r2, [r3, #0]
						}
						break;
10042902:	e067      	b.n	100429d4 <ButtonsMenuSM_Event_Handler+0x63c>
					case 3:
						if((Stimeselect&0b11111000) == 0){
10042904:	4b52      	ldr	r3, [pc, #328]	@ (10042a50 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042906:	781b      	ldrb	r3, [r3, #0]
10042908:	001a      	movs	r2, r3
1004290a:	23f8      	movs	r3, #248	@ 0xf8
1004290c:	4013      	ands	r3, r2
1004290e:	d10d      	bne.n	1004292c <ButtonsMenuSM_Event_Handler+0x594>
							Stimeselect = 0b10111000 | (Stimeselect&0b11);//23:XX
10042910:	4b4f      	ldr	r3, [pc, #316]	@ (10042a50 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042912:	781b      	ldrb	r3, [r3, #0]
10042914:	b25b      	sxtb	r3, r3
10042916:	2203      	movs	r2, #3
10042918:	4013      	ands	r3, r2
1004291a:	b25b      	sxtb	r3, r3
1004291c:	2248      	movs	r2, #72	@ 0x48
1004291e:	4252      	negs	r2, r2
10042920:	4313      	orrs	r3, r2
10042922:	b25b      	sxtb	r3, r3
10042924:	b2da      	uxtb	r2, r3
10042926:	4b4a      	ldr	r3, [pc, #296]	@ (10042a50 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042928:	701a      	strb	r2, [r3, #0]
						} else {
							Stimeselect -= 0b00001000;
						}
						break;
1004292a:	e054      	b.n	100429d6 <ButtonsMenuSM_Event_Handler+0x63e>
							Stimeselect -= 0b00001000;
1004292c:	4b48      	ldr	r3, [pc, #288]	@ (10042a50 <ButtonsMenuSM_Event_Handler+0x6b8>)
1004292e:	781b      	ldrb	r3, [r3, #0]
10042930:	3b08      	subs	r3, #8
10042932:	b2da      	uxtb	r2, r3
10042934:	4b46      	ldr	r3, [pc, #280]	@ (10042a50 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042936:	701a      	strb	r2, [r3, #0]
						break;
10042938:	e04d      	b.n	100429d6 <ButtonsMenuSM_Event_Handler+0x63e>
					case 4:
						if(Stimeselect == 0){
1004293a:	4b45      	ldr	r3, [pc, #276]	@ (10042a50 <ButtonsMenuSM_Event_Handler+0x6b8>)
1004293c:	781b      	ldrb	r3, [r3, #0]
1004293e:	2b00      	cmp	r3, #0
10042940:	d103      	bne.n	1004294a <ButtonsMenuSM_Event_Handler+0x5b2>
							Stimeselect = 0b10111011;//23:45
10042942:	4b43      	ldr	r3, [pc, #268]	@ (10042a50 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042944:	22bb      	movs	r2, #187	@ 0xbb
10042946:	701a      	strb	r2, [r3, #0]
						} else {
							Stimeselect--;
							Stimeselect &= 0b11111011;
						}
						break;
10042948:	e045      	b.n	100429d6 <ButtonsMenuSM_Event_Handler+0x63e>
							Stimeselect--;
1004294a:	4b41      	ldr	r3, [pc, #260]	@ (10042a50 <ButtonsMenuSM_Event_Handler+0x6b8>)
1004294c:	781b      	ldrb	r3, [r3, #0]
1004294e:	3b01      	subs	r3, #1
10042950:	b2da      	uxtb	r2, r3
10042952:	4b3f      	ldr	r3, [pc, #252]	@ (10042a50 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042954:	701a      	strb	r2, [r3, #0]
							Stimeselect &= 0b11111011;
10042956:	4b3e      	ldr	r3, [pc, #248]	@ (10042a50 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042958:	781b      	ldrb	r3, [r3, #0]
1004295a:	2204      	movs	r2, #4
1004295c:	4393      	bics	r3, r2
1004295e:	b2da      	uxtb	r2, r3
10042960:	4b3b      	ldr	r3, [pc, #236]	@ (10042a50 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042962:	701a      	strb	r2, [r3, #0]
						break;
10042964:	e037      	b.n	100429d6 <ButtonsMenuSM_Event_Handler+0x63e>
					case 5:
						if((Etimeselect&0b11111000) == 0){
10042966:	4b3b      	ldr	r3, [pc, #236]	@ (10042a54 <ButtonsMenuSM_Event_Handler+0x6bc>)
10042968:	781b      	ldrb	r3, [r3, #0]
1004296a:	001a      	movs	r2, r3
1004296c:	23f8      	movs	r3, #248	@ 0xf8
1004296e:	4013      	ands	r3, r2
10042970:	d10d      	bne.n	1004298e <ButtonsMenuSM_Event_Handler+0x5f6>
							Etimeselect = 0b10111000 | (Etimeselect&0b11);//23:XX
10042972:	4b38      	ldr	r3, [pc, #224]	@ (10042a54 <ButtonsMenuSM_Event_Handler+0x6bc>)
10042974:	781b      	ldrb	r3, [r3, #0]
10042976:	b25b      	sxtb	r3, r3
10042978:	2203      	movs	r2, #3
1004297a:	4013      	ands	r3, r2
1004297c:	b25b      	sxtb	r3, r3
1004297e:	2248      	movs	r2, #72	@ 0x48
10042980:	4252      	negs	r2, r2
10042982:	4313      	orrs	r3, r2
10042984:	b25b      	sxtb	r3, r3
10042986:	b2da      	uxtb	r2, r3
10042988:	4b32      	ldr	r3, [pc, #200]	@ (10042a54 <ButtonsMenuSM_Event_Handler+0x6bc>)
1004298a:	701a      	strb	r2, [r3, #0]
						} else {
							Etimeselect -= 0b00001000;
						}break;
1004298c:	e023      	b.n	100429d6 <ButtonsMenuSM_Event_Handler+0x63e>
							Etimeselect -= 0b00001000;
1004298e:	4b31      	ldr	r3, [pc, #196]	@ (10042a54 <ButtonsMenuSM_Event_Handler+0x6bc>)
10042990:	781b      	ldrb	r3, [r3, #0]
10042992:	3b08      	subs	r3, #8
10042994:	b2da      	uxtb	r2, r3
10042996:	4b2f      	ldr	r3, [pc, #188]	@ (10042a54 <ButtonsMenuSM_Event_Handler+0x6bc>)
10042998:	701a      	strb	r2, [r3, #0]
						}break;
1004299a:	e01c      	b.n	100429d6 <ButtonsMenuSM_Event_Handler+0x63e>
					case 6:
						if(Etimeselect == 0){
1004299c:	4b2d      	ldr	r3, [pc, #180]	@ (10042a54 <ButtonsMenuSM_Event_Handler+0x6bc>)
1004299e:	781b      	ldrb	r3, [r3, #0]
100429a0:	2b00      	cmp	r3, #0
100429a2:	d103      	bne.n	100429ac <ButtonsMenuSM_Event_Handler+0x614>
							Etimeselect = 0b10111011;//23:45
100429a4:	4b2b      	ldr	r3, [pc, #172]	@ (10042a54 <ButtonsMenuSM_Event_Handler+0x6bc>)
100429a6:	22bb      	movs	r2, #187	@ 0xbb
100429a8:	701a      	strb	r2, [r3, #0]
						} else {
							Etimeselect--;
							Etimeselect &= 0b11111011;
						}
						break;
100429aa:	e014      	b.n	100429d6 <ButtonsMenuSM_Event_Handler+0x63e>
							Etimeselect--;
100429ac:	4b29      	ldr	r3, [pc, #164]	@ (10042a54 <ButtonsMenuSM_Event_Handler+0x6bc>)
100429ae:	781b      	ldrb	r3, [r3, #0]
100429b0:	3b01      	subs	r3, #1
100429b2:	b2da      	uxtb	r2, r3
100429b4:	4b27      	ldr	r3, [pc, #156]	@ (10042a54 <ButtonsMenuSM_Event_Handler+0x6bc>)
100429b6:	701a      	strb	r2, [r3, #0]
							Etimeselect &= 0b11111011;
100429b8:	4b26      	ldr	r3, [pc, #152]	@ (10042a54 <ButtonsMenuSM_Event_Handler+0x6bc>)
100429ba:	781b      	ldrb	r3, [r3, #0]
100429bc:	2204      	movs	r2, #4
100429be:	4393      	bics	r3, r2
100429c0:	b2da      	uxtb	r2, r3
100429c2:	4b24      	ldr	r3, [pc, #144]	@ (10042a54 <ButtonsMenuSM_Event_Handler+0x6bc>)
100429c4:	701a      	strb	r2, [r3, #0]
						break;
100429c6:	e006      	b.n	100429d6 <ButtonsMenuSM_Event_Handler+0x63e>
					default:
						break;
100429c8:	46c0      	nop			@ (mov r8, r8)
100429ca:	e004      	b.n	100429d6 <ButtonsMenuSM_Event_Handler+0x63e>
						break;
100429cc:	46c0      	nop			@ (mov r8, r8)
100429ce:	e002      	b.n	100429d6 <ButtonsMenuSM_Event_Handler+0x63e>
						break;
100429d0:	46c0      	nop			@ (mov r8, r8)
100429d2:	e000      	b.n	100429d6 <ButtonsMenuSM_Event_Handler+0x63e>
						break;
100429d4:	46c0      	nop			@ (mov r8, r8)
					}
					DrawSchedule(cursorpos, monthselect, Sdayselect+1, Edayselect+1, Stimeselect, Etimeselect);
100429d6:	4b18      	ldr	r3, [pc, #96]	@ (10042a38 <ButtonsMenuSM_Event_Handler+0x6a0>)
100429d8:	7818      	ldrb	r0, [r3, #0]
100429da:	4b1a      	ldr	r3, [pc, #104]	@ (10042a44 <ButtonsMenuSM_Event_Handler+0x6ac>)
100429dc:	7819      	ldrb	r1, [r3, #0]
100429de:	4b1a      	ldr	r3, [pc, #104]	@ (10042a48 <ButtonsMenuSM_Event_Handler+0x6b0>)
100429e0:	781b      	ldrb	r3, [r3, #0]
100429e2:	3301      	adds	r3, #1
100429e4:	b2dc      	uxtb	r4, r3
100429e6:	4b19      	ldr	r3, [pc, #100]	@ (10042a4c <ButtonsMenuSM_Event_Handler+0x6b4>)
100429e8:	781b      	ldrb	r3, [r3, #0]
100429ea:	3301      	adds	r3, #1
100429ec:	b2dd      	uxtb	r5, r3
100429ee:	4b18      	ldr	r3, [pc, #96]	@ (10042a50 <ButtonsMenuSM_Event_Handler+0x6b8>)
100429f0:	781b      	ldrb	r3, [r3, #0]
100429f2:	4a18      	ldr	r2, [pc, #96]	@ (10042a54 <ButtonsMenuSM_Event_Handler+0x6bc>)
100429f4:	7812      	ldrb	r2, [r2, #0]
100429f6:	9201      	str	r2, [sp, #4]
100429f8:	9300      	str	r3, [sp, #0]
100429fa:	002b      	movs	r3, r5
100429fc:	0022      	movs	r2, r4
100429fe:	f7ff fabd 	bl	10041f7c <DrawSchedule>
10042a02:	e148      	b.n	10042c96 <ButtonsMenuSM_Event_Handler+0x8fe>
				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
10042a04:	1d3b      	adds	r3, r7, #4
10042a06:	885b      	ldrh	r3, [r3, #2]
10042a08:	001a      	movs	r2, r3
10042a0a:	2380      	movs	r3, #128	@ 0x80
10042a0c:	011b      	lsls	r3, r3, #4
10042a0e:	4013      	ands	r3, r2
10042a10:	d100      	bne.n	10042a14 <ButtonsMenuSM_Event_Handler+0x67c>
10042a12:	e0d6      	b.n	10042bc2 <ButtonsMenuSM_Event_Handler+0x82a>
10042a14:	1d3b      	adds	r3, r7, #4
10042a16:	885b      	ldrh	r3, [r3, #2]
10042a18:	001a      	movs	r2, r3
10042a1a:	2308      	movs	r3, #8
10042a1c:	4013      	ands	r3, r2
10042a1e:	d000      	beq.n	10042a22 <ButtonsMenuSM_Event_Handler+0x68a>
10042a20:	e0cf      	b.n	10042bc2 <ButtonsMenuSM_Event_Handler+0x82a>
					switch(cursorpos){
10042a22:	4b05      	ldr	r3, [pc, #20]	@ (10042a38 <ButtonsMenuSM_Event_Handler+0x6a0>)
10042a24:	781b      	ldrb	r3, [r3, #0]
10042a26:	2b06      	cmp	r3, #6
10042a28:	d900      	bls.n	10042a2c <ButtonsMenuSM_Event_Handler+0x694>
10042a2a:	e0ae      	b.n	10042b8a <ButtonsMenuSM_Event_Handler+0x7f2>
10042a2c:	009a      	lsls	r2, r3, #2
10042a2e:	4b0b      	ldr	r3, [pc, #44]	@ (10042a5c <ButtonsMenuSM_Event_Handler+0x6c4>)
10042a30:	18d3      	adds	r3, r2, r3
10042a32:	681b      	ldr	r3, [r3, #0]
10042a34:	469f      	mov	pc, r3
10042a36:	46c0      	nop			@ (mov r8, r8)
10042a38:	2000039e 	.word	0x2000039e
10042a3c:	2000039f 	.word	0x2000039f
10042a40:	200003a0 	.word	0x200003a0
10042a44:	200003ad 	.word	0x200003ad
10042a48:	200003ae 	.word	0x200003ae
10042a4c:	200003af 	.word	0x200003af
10042a50:	200003b0 	.word	0x200003b0
10042a54:	200003b1 	.word	0x200003b1
10042a58:	100691b4 	.word	0x100691b4
10042a5c:	100691d0 	.word	0x100691d0
					case 0:
						monthselect++;
10042a60:	4bd4      	ldr	r3, [pc, #848]	@ (10042db4 <ButtonsMenuSM_Event_Handler+0xa1c>)
10042a62:	781b      	ldrb	r3, [r3, #0]
10042a64:	3301      	adds	r3, #1
10042a66:	b2da      	uxtb	r2, r3
10042a68:	4bd2      	ldr	r3, [pc, #840]	@ (10042db4 <ButtonsMenuSM_Event_Handler+0xa1c>)
10042a6a:	701a      	strb	r2, [r3, #0]
						monthselect %= 13;
10042a6c:	4bd1      	ldr	r3, [pc, #836]	@ (10042db4 <ButtonsMenuSM_Event_Handler+0xa1c>)
10042a6e:	781b      	ldrb	r3, [r3, #0]
10042a70:	210d      	movs	r1, #13
10042a72:	0018      	movs	r0, r3
10042a74:	f7fd fc6a 	bl	1004034c <__aeabi_uidivmod>
10042a78:	000b      	movs	r3, r1
10042a7a:	b2da      	uxtb	r2, r3
10042a7c:	4bcd      	ldr	r3, [pc, #820]	@ (10042db4 <ButtonsMenuSM_Event_Handler+0xa1c>)
10042a7e:	701a      	strb	r2, [r3, #0]
						break;
10042a80:	e088      	b.n	10042b94 <ButtonsMenuSM_Event_Handler+0x7fc>
					case 1:
						Sdayselect++;
10042a82:	4bcd      	ldr	r3, [pc, #820]	@ (10042db8 <ButtonsMenuSM_Event_Handler+0xa20>)
10042a84:	781b      	ldrb	r3, [r3, #0]
10042a86:	3301      	adds	r3, #1
10042a88:	b2da      	uxtb	r2, r3
10042a8a:	4bcb      	ldr	r3, [pc, #812]	@ (10042db8 <ButtonsMenuSM_Event_Handler+0xa20>)
10042a8c:	701a      	strb	r2, [r3, #0]
						Sdayselect%=31;
10042a8e:	4bca      	ldr	r3, [pc, #808]	@ (10042db8 <ButtonsMenuSM_Event_Handler+0xa20>)
10042a90:	781b      	ldrb	r3, [r3, #0]
10042a92:	211f      	movs	r1, #31
10042a94:	0018      	movs	r0, r3
10042a96:	f7fd fc59 	bl	1004034c <__aeabi_uidivmod>
10042a9a:	000b      	movs	r3, r1
10042a9c:	b2da      	uxtb	r2, r3
10042a9e:	4bc6      	ldr	r3, [pc, #792]	@ (10042db8 <ButtonsMenuSM_Event_Handler+0xa20>)
10042aa0:	701a      	strb	r2, [r3, #0]
						break;
10042aa2:	e077      	b.n	10042b94 <ButtonsMenuSM_Event_Handler+0x7fc>
					case 2:
						Edayselect++;
10042aa4:	4bc5      	ldr	r3, [pc, #788]	@ (10042dbc <ButtonsMenuSM_Event_Handler+0xa24>)
10042aa6:	781b      	ldrb	r3, [r3, #0]
10042aa8:	3301      	adds	r3, #1
10042aaa:	b2da      	uxtb	r2, r3
10042aac:	4bc3      	ldr	r3, [pc, #780]	@ (10042dbc <ButtonsMenuSM_Event_Handler+0xa24>)
10042aae:	701a      	strb	r2, [r3, #0]
						Edayselect%=31;
10042ab0:	4bc2      	ldr	r3, [pc, #776]	@ (10042dbc <ButtonsMenuSM_Event_Handler+0xa24>)
10042ab2:	781b      	ldrb	r3, [r3, #0]
10042ab4:	211f      	movs	r1, #31
10042ab6:	0018      	movs	r0, r3
10042ab8:	f7fd fc48 	bl	1004034c <__aeabi_uidivmod>
10042abc:	000b      	movs	r3, r1
10042abe:	b2da      	uxtb	r2, r3
10042ac0:	4bbe      	ldr	r3, [pc, #760]	@ (10042dbc <ButtonsMenuSM_Event_Handler+0xa24>)
10042ac2:	701a      	strb	r2, [r3, #0]
						break;
10042ac4:	e066      	b.n	10042b94 <ButtonsMenuSM_Event_Handler+0x7fc>
					case 3:
						if((Stimeselect&0b11111000) == 0b10111000){
10042ac6:	4bbe      	ldr	r3, [pc, #760]	@ (10042dc0 <ButtonsMenuSM_Event_Handler+0xa28>)
10042ac8:	781b      	ldrb	r3, [r3, #0]
10042aca:	001a      	movs	r2, r3
10042acc:	23f8      	movs	r3, #248	@ 0xf8
10042ace:	4013      	ands	r3, r2
10042ad0:	2bb8      	cmp	r3, #184	@ 0xb8
10042ad2:	d107      	bne.n	10042ae4 <ButtonsMenuSM_Event_Handler+0x74c>
							Stimeselect &= 0b00000011;
10042ad4:	4bba      	ldr	r3, [pc, #744]	@ (10042dc0 <ButtonsMenuSM_Event_Handler+0xa28>)
10042ad6:	781b      	ldrb	r3, [r3, #0]
10042ad8:	2203      	movs	r2, #3
10042ada:	4013      	ands	r3, r2
10042adc:	b2da      	uxtb	r2, r3
10042ade:	4bb8      	ldr	r3, [pc, #736]	@ (10042dc0 <ButtonsMenuSM_Event_Handler+0xa28>)
10042ae0:	701a      	strb	r2, [r3, #0]
						} else {
							Stimeselect += 0b00001000;
						}
						break;
10042ae2:	e057      	b.n	10042b94 <ButtonsMenuSM_Event_Handler+0x7fc>
							Stimeselect += 0b00001000;
10042ae4:	4bb6      	ldr	r3, [pc, #728]	@ (10042dc0 <ButtonsMenuSM_Event_Handler+0xa28>)
10042ae6:	781b      	ldrb	r3, [r3, #0]
10042ae8:	3308      	adds	r3, #8
10042aea:	b2da      	uxtb	r2, r3
10042aec:	4bb4      	ldr	r3, [pc, #720]	@ (10042dc0 <ButtonsMenuSM_Event_Handler+0xa28>)
10042aee:	701a      	strb	r2, [r3, #0]
						break;
10042af0:	e050      	b.n	10042b94 <ButtonsMenuSM_Event_Handler+0x7fc>
					case 4:
						if(Stimeselect == 0b10111011){//23:45
10042af2:	4bb3      	ldr	r3, [pc, #716]	@ (10042dc0 <ButtonsMenuSM_Event_Handler+0xa28>)
10042af4:	781b      	ldrb	r3, [r3, #0]
10042af6:	2bbb      	cmp	r3, #187	@ 0xbb
10042af8:	d103      	bne.n	10042b02 <ButtonsMenuSM_Event_Handler+0x76a>
							Stimeselect = 0;//0:00
10042afa:	4bb1      	ldr	r3, [pc, #708]	@ (10042dc0 <ButtonsMenuSM_Event_Handler+0xa28>)
10042afc:	2200      	movs	r2, #0
10042afe:	701a      	strb	r2, [r3, #0]
							Stimeselect++;
							if(Stimeselect & 0b00000100){
								Stimeselect += 0b00000100;
							}
						}
						break;
10042b00:	e045      	b.n	10042b8e <ButtonsMenuSM_Event_Handler+0x7f6>
							Stimeselect++;
10042b02:	4baf      	ldr	r3, [pc, #700]	@ (10042dc0 <ButtonsMenuSM_Event_Handler+0xa28>)
10042b04:	781b      	ldrb	r3, [r3, #0]
10042b06:	3301      	adds	r3, #1
10042b08:	b2da      	uxtb	r2, r3
10042b0a:	4bad      	ldr	r3, [pc, #692]	@ (10042dc0 <ButtonsMenuSM_Event_Handler+0xa28>)
10042b0c:	701a      	strb	r2, [r3, #0]
							if(Stimeselect & 0b00000100){
10042b0e:	4bac      	ldr	r3, [pc, #688]	@ (10042dc0 <ButtonsMenuSM_Event_Handler+0xa28>)
10042b10:	781b      	ldrb	r3, [r3, #0]
10042b12:	001a      	movs	r2, r3
10042b14:	2304      	movs	r3, #4
10042b16:	4013      	ands	r3, r2
10042b18:	d039      	beq.n	10042b8e <ButtonsMenuSM_Event_Handler+0x7f6>
								Stimeselect += 0b00000100;
10042b1a:	4ba9      	ldr	r3, [pc, #676]	@ (10042dc0 <ButtonsMenuSM_Event_Handler+0xa28>)
10042b1c:	781b      	ldrb	r3, [r3, #0]
10042b1e:	3304      	adds	r3, #4
10042b20:	b2da      	uxtb	r2, r3
10042b22:	4ba7      	ldr	r3, [pc, #668]	@ (10042dc0 <ButtonsMenuSM_Event_Handler+0xa28>)
10042b24:	701a      	strb	r2, [r3, #0]
						break;
10042b26:	e032      	b.n	10042b8e <ButtonsMenuSM_Event_Handler+0x7f6>
					case 5:
						if((Etimeselect&0b11111000) == 0b10111000){
10042b28:	4ba6      	ldr	r3, [pc, #664]	@ (10042dc4 <ButtonsMenuSM_Event_Handler+0xa2c>)
10042b2a:	781b      	ldrb	r3, [r3, #0]
10042b2c:	001a      	movs	r2, r3
10042b2e:	23f8      	movs	r3, #248	@ 0xf8
10042b30:	4013      	ands	r3, r2
10042b32:	2bb8      	cmp	r3, #184	@ 0xb8
10042b34:	d107      	bne.n	10042b46 <ButtonsMenuSM_Event_Handler+0x7ae>
							Etimeselect &= 0b00000011;
10042b36:	4ba3      	ldr	r3, [pc, #652]	@ (10042dc4 <ButtonsMenuSM_Event_Handler+0xa2c>)
10042b38:	781b      	ldrb	r3, [r3, #0]
10042b3a:	2203      	movs	r2, #3
10042b3c:	4013      	ands	r3, r2
10042b3e:	b2da      	uxtb	r2, r3
10042b40:	4ba0      	ldr	r3, [pc, #640]	@ (10042dc4 <ButtonsMenuSM_Event_Handler+0xa2c>)
10042b42:	701a      	strb	r2, [r3, #0]
						} else {
							Etimeselect += 0b00001000;
						}
						break;
10042b44:	e026      	b.n	10042b94 <ButtonsMenuSM_Event_Handler+0x7fc>
							Etimeselect += 0b00001000;
10042b46:	4b9f      	ldr	r3, [pc, #636]	@ (10042dc4 <ButtonsMenuSM_Event_Handler+0xa2c>)
10042b48:	781b      	ldrb	r3, [r3, #0]
10042b4a:	3308      	adds	r3, #8
10042b4c:	b2da      	uxtb	r2, r3
10042b4e:	4b9d      	ldr	r3, [pc, #628]	@ (10042dc4 <ButtonsMenuSM_Event_Handler+0xa2c>)
10042b50:	701a      	strb	r2, [r3, #0]
						break;
10042b52:	e01f      	b.n	10042b94 <ButtonsMenuSM_Event_Handler+0x7fc>
					case 6:
						if(Etimeselect == 0b10111011){//23:45
10042b54:	4b9b      	ldr	r3, [pc, #620]	@ (10042dc4 <ButtonsMenuSM_Event_Handler+0xa2c>)
10042b56:	781b      	ldrb	r3, [r3, #0]
10042b58:	2bbb      	cmp	r3, #187	@ 0xbb
10042b5a:	d103      	bne.n	10042b64 <ButtonsMenuSM_Event_Handler+0x7cc>
							Etimeselect = 0;//0:00
10042b5c:	4b99      	ldr	r3, [pc, #612]	@ (10042dc4 <ButtonsMenuSM_Event_Handler+0xa2c>)
10042b5e:	2200      	movs	r2, #0
10042b60:	701a      	strb	r2, [r3, #0]
							Etimeselect++;
							if(Etimeselect & 0b00000100){
								Etimeselect += 0b00000100;
							}
						}
						break;
10042b62:	e016      	b.n	10042b92 <ButtonsMenuSM_Event_Handler+0x7fa>
							Etimeselect++;
10042b64:	4b97      	ldr	r3, [pc, #604]	@ (10042dc4 <ButtonsMenuSM_Event_Handler+0xa2c>)
10042b66:	781b      	ldrb	r3, [r3, #0]
10042b68:	3301      	adds	r3, #1
10042b6a:	b2da      	uxtb	r2, r3
10042b6c:	4b95      	ldr	r3, [pc, #596]	@ (10042dc4 <ButtonsMenuSM_Event_Handler+0xa2c>)
10042b6e:	701a      	strb	r2, [r3, #0]
							if(Etimeselect & 0b00000100){
10042b70:	4b94      	ldr	r3, [pc, #592]	@ (10042dc4 <ButtonsMenuSM_Event_Handler+0xa2c>)
10042b72:	781b      	ldrb	r3, [r3, #0]
10042b74:	001a      	movs	r2, r3
10042b76:	2304      	movs	r3, #4
10042b78:	4013      	ands	r3, r2
10042b7a:	d00a      	beq.n	10042b92 <ButtonsMenuSM_Event_Handler+0x7fa>
								Etimeselect += 0b00000100;
10042b7c:	4b91      	ldr	r3, [pc, #580]	@ (10042dc4 <ButtonsMenuSM_Event_Handler+0xa2c>)
10042b7e:	781b      	ldrb	r3, [r3, #0]
10042b80:	3304      	adds	r3, #4
10042b82:	b2da      	uxtb	r2, r3
10042b84:	4b8f      	ldr	r3, [pc, #572]	@ (10042dc4 <ButtonsMenuSM_Event_Handler+0xa2c>)
10042b86:	701a      	strb	r2, [r3, #0]
						break;
10042b88:	e003      	b.n	10042b92 <ButtonsMenuSM_Event_Handler+0x7fa>
					default:
						break;
10042b8a:	46c0      	nop			@ (mov r8, r8)
10042b8c:	e002      	b.n	10042b94 <ButtonsMenuSM_Event_Handler+0x7fc>
						break;
10042b8e:	46c0      	nop			@ (mov r8, r8)
10042b90:	e000      	b.n	10042b94 <ButtonsMenuSM_Event_Handler+0x7fc>
						break;
10042b92:	46c0      	nop			@ (mov r8, r8)
					}
					DrawSchedule(cursorpos, monthselect, Sdayselect+1, Edayselect+1, Stimeselect, Etimeselect);
10042b94:	4b8c      	ldr	r3, [pc, #560]	@ (10042dc8 <ButtonsMenuSM_Event_Handler+0xa30>)
10042b96:	7818      	ldrb	r0, [r3, #0]
10042b98:	4b86      	ldr	r3, [pc, #536]	@ (10042db4 <ButtonsMenuSM_Event_Handler+0xa1c>)
10042b9a:	7819      	ldrb	r1, [r3, #0]
10042b9c:	4b86      	ldr	r3, [pc, #536]	@ (10042db8 <ButtonsMenuSM_Event_Handler+0xa20>)
10042b9e:	781b      	ldrb	r3, [r3, #0]
10042ba0:	3301      	adds	r3, #1
10042ba2:	b2dc      	uxtb	r4, r3
10042ba4:	4b85      	ldr	r3, [pc, #532]	@ (10042dbc <ButtonsMenuSM_Event_Handler+0xa24>)
10042ba6:	781b      	ldrb	r3, [r3, #0]
10042ba8:	3301      	adds	r3, #1
10042baa:	b2dd      	uxtb	r5, r3
10042bac:	4b84      	ldr	r3, [pc, #528]	@ (10042dc0 <ButtonsMenuSM_Event_Handler+0xa28>)
10042bae:	781b      	ldrb	r3, [r3, #0]
10042bb0:	4a84      	ldr	r2, [pc, #528]	@ (10042dc4 <ButtonsMenuSM_Event_Handler+0xa2c>)
10042bb2:	7812      	ldrb	r2, [r2, #0]
10042bb4:	9201      	str	r2, [sp, #4]
10042bb6:	9300      	str	r3, [sp, #0]
10042bb8:	002b      	movs	r3, r5
10042bba:	0022      	movs	r2, r4
10042bbc:	f7ff f9de 	bl	10041f7c <DrawSchedule>
10042bc0:	e069      	b.n	10042c96 <ButtonsMenuSM_Event_Handler+0x8fe>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10042bc2:	1d3b      	adds	r3, r7, #4
10042bc4:	885b      	ldrh	r3, [r3, #2]
10042bc6:	001a      	movs	r2, r3
10042bc8:	2380      	movs	r3, #128	@ 0x80
10042bca:	015b      	lsls	r3, r3, #5
10042bcc:	4013      	ands	r3, r2
10042bce:	d029      	beq.n	10042c24 <ButtonsMenuSM_Event_Handler+0x88c>
10042bd0:	1d3b      	adds	r3, r7, #4
10042bd2:	885b      	ldrh	r3, [r3, #2]
10042bd4:	001a      	movs	r2, r3
10042bd6:	2310      	movs	r3, #16
10042bd8:	4013      	ands	r3, r2
10042bda:	d123      	bne.n	10042c24 <ButtonsMenuSM_Event_Handler+0x88c>
					cursorpos--;
10042bdc:	4b7a      	ldr	r3, [pc, #488]	@ (10042dc8 <ButtonsMenuSM_Event_Handler+0xa30>)
10042bde:	781b      	ldrb	r3, [r3, #0]
10042be0:	3b01      	subs	r3, #1
10042be2:	b2da      	uxtb	r2, r3
10042be4:	4b78      	ldr	r3, [pc, #480]	@ (10042dc8 <ButtonsMenuSM_Event_Handler+0xa30>)
10042be6:	701a      	strb	r2, [r3, #0]
					if(cursorpos == 255){
10042be8:	4b77      	ldr	r3, [pc, #476]	@ (10042dc8 <ButtonsMenuSM_Event_Handler+0xa30>)
10042bea:	781b      	ldrb	r3, [r3, #0]
10042bec:	2bff      	cmp	r3, #255	@ 0xff
10042bee:	d102      	bne.n	10042bf6 <ButtonsMenuSM_Event_Handler+0x85e>
						cursorpos = 6;
10042bf0:	4b75      	ldr	r3, [pc, #468]	@ (10042dc8 <ButtonsMenuSM_Event_Handler+0xa30>)
10042bf2:	2206      	movs	r2, #6
10042bf4:	701a      	strb	r2, [r3, #0]
					}
					DrawSchedule(cursorpos, monthselect, Sdayselect+1, Edayselect+1, Stimeselect, Etimeselect);
10042bf6:	4b74      	ldr	r3, [pc, #464]	@ (10042dc8 <ButtonsMenuSM_Event_Handler+0xa30>)
10042bf8:	7818      	ldrb	r0, [r3, #0]
10042bfa:	4b6e      	ldr	r3, [pc, #440]	@ (10042db4 <ButtonsMenuSM_Event_Handler+0xa1c>)
10042bfc:	7819      	ldrb	r1, [r3, #0]
10042bfe:	4b6e      	ldr	r3, [pc, #440]	@ (10042db8 <ButtonsMenuSM_Event_Handler+0xa20>)
10042c00:	781b      	ldrb	r3, [r3, #0]
10042c02:	3301      	adds	r3, #1
10042c04:	b2dc      	uxtb	r4, r3
10042c06:	4b6d      	ldr	r3, [pc, #436]	@ (10042dbc <ButtonsMenuSM_Event_Handler+0xa24>)
10042c08:	781b      	ldrb	r3, [r3, #0]
10042c0a:	3301      	adds	r3, #1
10042c0c:	b2dd      	uxtb	r5, r3
10042c0e:	4b6c      	ldr	r3, [pc, #432]	@ (10042dc0 <ButtonsMenuSM_Event_Handler+0xa28>)
10042c10:	781b      	ldrb	r3, [r3, #0]
10042c12:	4a6c      	ldr	r2, [pc, #432]	@ (10042dc4 <ButtonsMenuSM_Event_Handler+0xa2c>)
10042c14:	7812      	ldrb	r2, [r2, #0]
10042c16:	9201      	str	r2, [sp, #4]
10042c18:	9300      	str	r3, [sp, #0]
10042c1a:	002b      	movs	r3, r5
10042c1c:	0022      	movs	r2, r4
10042c1e:	f7ff f9ad 	bl	10041f7c <DrawSchedule>
10042c22:	e038      	b.n	10042c96 <ButtonsMenuSM_Event_Handler+0x8fe>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
10042c24:	1d3b      	adds	r3, r7, #4
10042c26:	885b      	ldrh	r3, [r3, #2]
10042c28:	001a      	movs	r2, r3
10042c2a:	2380      	movs	r3, #128	@ 0x80
10042c2c:	019b      	lsls	r3, r3, #6
10042c2e:	4013      	ands	r3, r2
10042c30:	d101      	bne.n	10042c36 <ButtonsMenuSM_Event_Handler+0x89e>
10042c32:	f000 fd48 	bl	100436c6 <ButtonsMenuSM_Event_Handler+0x132e>
10042c36:	1d3b      	adds	r3, r7, #4
10042c38:	885b      	ldrh	r3, [r3, #2]
10042c3a:	001a      	movs	r2, r3
10042c3c:	2320      	movs	r3, #32
10042c3e:	4013      	ands	r3, r2
10042c40:	d001      	beq.n	10042c46 <ButtonsMenuSM_Event_Handler+0x8ae>
10042c42:	f000 fd40 	bl	100436c6 <ButtonsMenuSM_Event_Handler+0x132e>
					cursorpos++;
10042c46:	4b60      	ldr	r3, [pc, #384]	@ (10042dc8 <ButtonsMenuSM_Event_Handler+0xa30>)
10042c48:	781b      	ldrb	r3, [r3, #0]
10042c4a:	3301      	adds	r3, #1
10042c4c:	b2da      	uxtb	r2, r3
10042c4e:	4b5e      	ldr	r3, [pc, #376]	@ (10042dc8 <ButtonsMenuSM_Event_Handler+0xa30>)
10042c50:	701a      	strb	r2, [r3, #0]
					cursorpos %= 7;
10042c52:	4b5d      	ldr	r3, [pc, #372]	@ (10042dc8 <ButtonsMenuSM_Event_Handler+0xa30>)
10042c54:	781b      	ldrb	r3, [r3, #0]
10042c56:	2107      	movs	r1, #7
10042c58:	0018      	movs	r0, r3
10042c5a:	f7fd fb77 	bl	1004034c <__aeabi_uidivmod>
10042c5e:	000b      	movs	r3, r1
10042c60:	b2da      	uxtb	r2, r3
10042c62:	4b59      	ldr	r3, [pc, #356]	@ (10042dc8 <ButtonsMenuSM_Event_Handler+0xa30>)
10042c64:	701a      	strb	r2, [r3, #0]
					DrawSchedule(cursorpos, monthselect, Sdayselect+1, Edayselect+1, Stimeselect, Etimeselect);
10042c66:	4b58      	ldr	r3, [pc, #352]	@ (10042dc8 <ButtonsMenuSM_Event_Handler+0xa30>)
10042c68:	7818      	ldrb	r0, [r3, #0]
10042c6a:	4b52      	ldr	r3, [pc, #328]	@ (10042db4 <ButtonsMenuSM_Event_Handler+0xa1c>)
10042c6c:	7819      	ldrb	r1, [r3, #0]
10042c6e:	4b52      	ldr	r3, [pc, #328]	@ (10042db8 <ButtonsMenuSM_Event_Handler+0xa20>)
10042c70:	781b      	ldrb	r3, [r3, #0]
10042c72:	3301      	adds	r3, #1
10042c74:	b2dc      	uxtb	r4, r3
10042c76:	4b51      	ldr	r3, [pc, #324]	@ (10042dbc <ButtonsMenuSM_Event_Handler+0xa24>)
10042c78:	781b      	ldrb	r3, [r3, #0]
10042c7a:	3301      	adds	r3, #1
10042c7c:	b2dd      	uxtb	r5, r3
10042c7e:	4b50      	ldr	r3, [pc, #320]	@ (10042dc0 <ButtonsMenuSM_Event_Handler+0xa28>)
10042c80:	781b      	ldrb	r3, [r3, #0]
10042c82:	4a50      	ldr	r2, [pc, #320]	@ (10042dc4 <ButtonsMenuSM_Event_Handler+0xa2c>)
10042c84:	7812      	ldrb	r2, [r2, #0]
10042c86:	9201      	str	r2, [sp, #4]
10042c88:	9300      	str	r3, [sp, #0]
10042c8a:	002b      	movs	r3, r5
10042c8c:	0022      	movs	r2, r4
10042c8e:	f7ff f975 	bl	10041f7c <DrawSchedule>
				}
			}
			break;
10042c92:	f000 fd18 	bl	100436c6 <ButtonsMenuSM_Event_Handler+0x132e>
10042c96:	f000 fd16 	bl	100436c6 <ButtonsMenuSM_Event_Handler+0x132e>
		case scheduleFolder:
			if(event.status == EVENT_ENTRY){
10042c9a:	1d3b      	adds	r3, r7, #4
10042c9c:	781b      	ldrb	r3, [r3, #0]
10042c9e:	b25b      	sxtb	r3, r3
10042ca0:	2b02      	cmp	r3, #2
10042ca2:	d10b      	bne.n	10042cbc <ButtonsMenuSM_Event_Handler+0x924>
				cursorpos = 0;
10042ca4:	4b48      	ldr	r3, [pc, #288]	@ (10042dc8 <ButtonsMenuSM_Event_Handler+0xa30>)
10042ca6:	2200      	movs	r2, #0
10042ca8:	701a      	strb	r2, [r3, #0]
				DrawFolder(cursorpos, folderselect, trackselect);
10042caa:	4b47      	ldr	r3, [pc, #284]	@ (10042dc8 <ButtonsMenuSM_Event_Handler+0xa30>)
10042cac:	7818      	ldrb	r0, [r3, #0]
10042cae:	4b47      	ldr	r3, [pc, #284]	@ (10042dcc <ButtonsMenuSM_Event_Handler+0xa34>)
10042cb0:	7819      	ldrb	r1, [r3, #0]
10042cb2:	4b47      	ldr	r3, [pc, #284]	@ (10042dd0 <ButtonsMenuSM_Event_Handler+0xa38>)
10042cb4:	781b      	ldrb	r3, [r3, #0]
10042cb6:	001a      	movs	r2, r3
10042cb8:	f7ff f814 	bl	10041ce4 <DrawFolder>
			}
			if(event.status == EVENT_BUTTONS){
10042cbc:	1d3b      	adds	r3, r7, #4
10042cbe:	781b      	ldrb	r3, [r3, #0]
10042cc0:	b25b      	sxtb	r3, r3
10042cc2:	2b04      	cmp	r3, #4
10042cc4:	d001      	beq.n	10042cca <ButtonsMenuSM_Event_Handler+0x932>
10042cc6:	f000 fd00 	bl	100436ca <ButtonsMenuSM_Event_Handler+0x1332>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10042cca:	1d3b      	adds	r3, r7, #4
10042ccc:	885b      	ldrh	r3, [r3, #2]
10042cce:	001a      	movs	r2, r3
10042cd0:	2380      	movs	r3, #128	@ 0x80
10042cd2:	005b      	lsls	r3, r3, #1
10042cd4:	4013      	ands	r3, r2
10042cd6:	d00e      	beq.n	10042cf6 <ButtonsMenuSM_Event_Handler+0x95e>
10042cd8:	1d3b      	adds	r3, r7, #4
10042cda:	885b      	ldrh	r3, [r3, #2]
10042cdc:	001a      	movs	r2, r3
10042cde:	2301      	movs	r3, #1
10042ce0:	4013      	ands	r3, r2
10042ce2:	d108      	bne.n	10042cf6 <ButtonsMenuSM_Event_Handler+0x95e>
					//discountprintf("moving to schedule stop");
					nextstate = scheduleTime;
10042ce4:	232e      	movs	r3, #46	@ 0x2e
10042ce6:	18fb      	adds	r3, r7, r3
10042ce8:	2202      	movs	r2, #2
10042cea:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042cec:	232f      	movs	r3, #47	@ 0x2f
10042cee:	18fb      	adds	r3, r7, r3
10042cf0:	2201      	movs	r2, #1
10042cf2:	701a      	strb	r2, [r3, #0]
10042cf4:	e0fb      	b.n	10042eee <ButtonsMenuSM_Event_Handler+0xb56>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10042cf6:	1d3b      	adds	r3, r7, #4
10042cf8:	885b      	ldrh	r3, [r3, #2]
10042cfa:	001a      	movs	r2, r3
10042cfc:	2380      	movs	r3, #128	@ 0x80
10042cfe:	009b      	lsls	r3, r3, #2
10042d00:	4013      	ands	r3, r2
10042d02:	d038      	beq.n	10042d76 <ButtonsMenuSM_Event_Handler+0x9de>
10042d04:	1d3b      	adds	r3, r7, #4
10042d06:	885b      	ldrh	r3, [r3, #2]
10042d08:	001a      	movs	r2, r3
10042d0a:	2302      	movs	r3, #2
10042d0c:	4013      	ands	r3, r2
10042d0e:	d132      	bne.n	10042d76 <ButtonsMenuSM_Event_Handler+0x9de>
					//discountprintf("moving to main");
					scheduleEvent sevent;
					sevent.month = monthselect;
10042d10:	4b28      	ldr	r3, [pc, #160]	@ (10042db4 <ButtonsMenuSM_Event_Handler+0xa1c>)
10042d12:	781a      	ldrb	r2, [r3, #0]
10042d14:	211c      	movs	r1, #28
10042d16:	187b      	adds	r3, r7, r1
10042d18:	701a      	strb	r2, [r3, #0]
					sevent.daystart = Sdayselect+1;
10042d1a:	4b27      	ldr	r3, [pc, #156]	@ (10042db8 <ButtonsMenuSM_Event_Handler+0xa20>)
10042d1c:	781b      	ldrb	r3, [r3, #0]
10042d1e:	3301      	adds	r3, #1
10042d20:	b2da      	uxtb	r2, r3
10042d22:	187b      	adds	r3, r7, r1
10042d24:	705a      	strb	r2, [r3, #1]
					sevent.daystop = Edayselect+1;
10042d26:	4b25      	ldr	r3, [pc, #148]	@ (10042dbc <ButtonsMenuSM_Event_Handler+0xa24>)
10042d28:	781b      	ldrb	r3, [r3, #0]
10042d2a:	3301      	adds	r3, #1
10042d2c:	b2da      	uxtb	r2, r3
10042d2e:	187b      	adds	r3, r7, r1
10042d30:	711a      	strb	r2, [r3, #4]
					sevent.start = Stimeselect;
10042d32:	4b23      	ldr	r3, [pc, #140]	@ (10042dc0 <ButtonsMenuSM_Event_Handler+0xa28>)
10042d34:	781a      	ldrb	r2, [r3, #0]
10042d36:	187b      	adds	r3, r7, r1
10042d38:	709a      	strb	r2, [r3, #2]
					sevent.stop = Etimeselect;
10042d3a:	4b22      	ldr	r3, [pc, #136]	@ (10042dc4 <ButtonsMenuSM_Event_Handler+0xa2c>)
10042d3c:	781a      	ldrb	r2, [r3, #0]
10042d3e:	187b      	adds	r3, r7, r1
10042d40:	70da      	strb	r2, [r3, #3]
					sevent.track = trackselect+1;
10042d42:	4b23      	ldr	r3, [pc, #140]	@ (10042dd0 <ButtonsMenuSM_Event_Handler+0xa38>)
10042d44:	781b      	ldrb	r3, [r3, #0]
10042d46:	3301      	adds	r3, #1
10042d48:	b2da      	uxtb	r2, r3
10042d4a:	187b      	adds	r3, r7, r1
10042d4c:	719a      	strb	r2, [r3, #6]
					sevent.folder = folderselect+1;
10042d4e:	4b1f      	ldr	r3, [pc, #124]	@ (10042dcc <ButtonsMenuSM_Event_Handler+0xa34>)
10042d50:	781b      	ldrb	r3, [r3, #0]
10042d52:	3301      	adds	r3, #1
10042d54:	b2da      	uxtb	r2, r3
10042d56:	187b      	adds	r3, r7, r1
10042d58:	715a      	strb	r2, [r3, #5]
					FLASH_AppendSchedule(sevent);
10042d5a:	187b      	adds	r3, r7, r1
10042d5c:	6818      	ldr	r0, [r3, #0]
10042d5e:	6859      	ldr	r1, [r3, #4]
10042d60:	f001 fc16 	bl	10044590 <FLASH_AppendSchedule>
					nextstate = main;
10042d64:	232e      	movs	r3, #46	@ 0x2e
10042d66:	18fb      	adds	r3, r7, r3
10042d68:	2200      	movs	r2, #0
10042d6a:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042d6c:	232f      	movs	r3, #47	@ 0x2f
10042d6e:	18fb      	adds	r3, r7, r3
10042d70:	2201      	movs	r2, #1
10042d72:	701a      	strb	r2, [r3, #0]
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10042d74:	e0bb      	b.n	10042eee <ButtonsMenuSM_Event_Handler+0xb56>

				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
10042d76:	1d3b      	adds	r3, r7, #4
10042d78:	885b      	ldrh	r3, [r3, #2]
10042d7a:	001a      	movs	r2, r3
10042d7c:	2380      	movs	r3, #128	@ 0x80
10042d7e:	00db      	lsls	r3, r3, #3
10042d80:	4013      	ands	r3, r2
10042d82:	d03b      	beq.n	10042dfc <ButtonsMenuSM_Event_Handler+0xa64>
10042d84:	1d3b      	adds	r3, r7, #4
10042d86:	885b      	ldrh	r3, [r3, #2]
10042d88:	001a      	movs	r2, r3
10042d8a:	2304      	movs	r3, #4
10042d8c:	4013      	ands	r3, r2
10042d8e:	d135      	bne.n	10042dfc <ButtonsMenuSM_Event_Handler+0xa64>
					if(!cursorpos){
10042d90:	4b0d      	ldr	r3, [pc, #52]	@ (10042dc8 <ButtonsMenuSM_Event_Handler+0xa30>)
10042d92:	781b      	ldrb	r3, [r3, #0]
10042d94:	2b00      	cmp	r3, #0
10042d96:	d11d      	bne.n	10042dd4 <ButtonsMenuSM_Event_Handler+0xa3c>
						folderselect--;
10042d98:	4b0c      	ldr	r3, [pc, #48]	@ (10042dcc <ButtonsMenuSM_Event_Handler+0xa34>)
10042d9a:	781b      	ldrb	r3, [r3, #0]
10042d9c:	3b01      	subs	r3, #1
10042d9e:	b2da      	uxtb	r2, r3
10042da0:	4b0a      	ldr	r3, [pc, #40]	@ (10042dcc <ButtonsMenuSM_Event_Handler+0xa34>)
10042da2:	701a      	strb	r2, [r3, #0]
						if(folderselect==255){
10042da4:	4b09      	ldr	r3, [pc, #36]	@ (10042dcc <ButtonsMenuSM_Event_Handler+0xa34>)
10042da6:	781b      	ldrb	r3, [r3, #0]
10042da8:	2bff      	cmp	r3, #255	@ 0xff
10042daa:	d11d      	bne.n	10042de8 <ButtonsMenuSM_Event_Handler+0xa50>
							folderselect = 100;
10042dac:	4b07      	ldr	r3, [pc, #28]	@ (10042dcc <ButtonsMenuSM_Event_Handler+0xa34>)
10042dae:	2264      	movs	r2, #100	@ 0x64
10042db0:	701a      	strb	r2, [r3, #0]
10042db2:	e019      	b.n	10042de8 <ButtonsMenuSM_Event_Handler+0xa50>
10042db4:	200003ad 	.word	0x200003ad
10042db8:	200003ae 	.word	0x200003ae
10042dbc:	200003af 	.word	0x200003af
10042dc0:	200003b0 	.word	0x200003b0
10042dc4:	200003b1 	.word	0x200003b1
10042dc8:	2000039e 	.word	0x2000039e
10042dcc:	2000039f 	.word	0x2000039f
10042dd0:	200003a0 	.word	0x200003a0
						}
					} else {
						trackselect--;
10042dd4:	4bd3      	ldr	r3, [pc, #844]	@ (10043124 <ButtonsMenuSM_Event_Handler+0xd8c>)
10042dd6:	781b      	ldrb	r3, [r3, #0]
10042dd8:	3b01      	subs	r3, #1
10042dda:	b2da      	uxtb	r2, r3
10042ddc:	4bd1      	ldr	r3, [pc, #836]	@ (10043124 <ButtonsMenuSM_Event_Handler+0xd8c>)
10042dde:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
10042de0:	4bd0      	ldr	r3, [pc, #832]	@ (10043124 <ButtonsMenuSM_Event_Handler+0xd8c>)
10042de2:	781a      	ldrb	r2, [r3, #0]
10042de4:	4bcf      	ldr	r3, [pc, #828]	@ (10043124 <ButtonsMenuSM_Event_Handler+0xd8c>)
10042de6:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
10042de8:	4bcf      	ldr	r3, [pc, #828]	@ (10043128 <ButtonsMenuSM_Event_Handler+0xd90>)
10042dea:	7818      	ldrb	r0, [r3, #0]
10042dec:	4bcf      	ldr	r3, [pc, #828]	@ (1004312c <ButtonsMenuSM_Event_Handler+0xd94>)
10042dee:	7819      	ldrb	r1, [r3, #0]
10042df0:	4bcc      	ldr	r3, [pc, #816]	@ (10043124 <ButtonsMenuSM_Event_Handler+0xd8c>)
10042df2:	781b      	ldrb	r3, [r3, #0]
10042df4:	001a      	movs	r2, r3
10042df6:	f7fe ff75 	bl	10041ce4 <DrawFolder>
10042dfa:	e078      	b.n	10042eee <ButtonsMenuSM_Event_Handler+0xb56>

				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
10042dfc:	1d3b      	adds	r3, r7, #4
10042dfe:	885b      	ldrh	r3, [r3, #2]
10042e00:	001a      	movs	r2, r3
10042e02:	2380      	movs	r3, #128	@ 0x80
10042e04:	011b      	lsls	r3, r3, #4
10042e06:	4013      	ands	r3, r2
10042e08:	d02e      	beq.n	10042e68 <ButtonsMenuSM_Event_Handler+0xad0>
10042e0a:	1d3b      	adds	r3, r7, #4
10042e0c:	885b      	ldrh	r3, [r3, #2]
10042e0e:	001a      	movs	r2, r3
10042e10:	2308      	movs	r3, #8
10042e12:	4013      	ands	r3, r2
10042e14:	d128      	bne.n	10042e68 <ButtonsMenuSM_Event_Handler+0xad0>
					if(!cursorpos){
10042e16:	4bc4      	ldr	r3, [pc, #784]	@ (10043128 <ButtonsMenuSM_Event_Handler+0xd90>)
10042e18:	781b      	ldrb	r3, [r3, #0]
10042e1a:	2b00      	cmp	r3, #0
10042e1c:	d110      	bne.n	10042e40 <ButtonsMenuSM_Event_Handler+0xaa8>
						folderselect++;
10042e1e:	4bc3      	ldr	r3, [pc, #780]	@ (1004312c <ButtonsMenuSM_Event_Handler+0xd94>)
10042e20:	781b      	ldrb	r3, [r3, #0]
10042e22:	3301      	adds	r3, #1
10042e24:	b2da      	uxtb	r2, r3
10042e26:	4bc1      	ldr	r3, [pc, #772]	@ (1004312c <ButtonsMenuSM_Event_Handler+0xd94>)
10042e28:	701a      	strb	r2, [r3, #0]
						folderselect %= 100;
10042e2a:	4bc0      	ldr	r3, [pc, #768]	@ (1004312c <ButtonsMenuSM_Event_Handler+0xd94>)
10042e2c:	781b      	ldrb	r3, [r3, #0]
10042e2e:	2164      	movs	r1, #100	@ 0x64
10042e30:	0018      	movs	r0, r3
10042e32:	f7fd fa8b 	bl	1004034c <__aeabi_uidivmod>
10042e36:	000b      	movs	r3, r1
10042e38:	b2da      	uxtb	r2, r3
10042e3a:	4bbc      	ldr	r3, [pc, #752]	@ (1004312c <ButtonsMenuSM_Event_Handler+0xd94>)
10042e3c:	701a      	strb	r2, [r3, #0]
10042e3e:	e009      	b.n	10042e54 <ButtonsMenuSM_Event_Handler+0xabc>
					} else {
						trackselect++;
10042e40:	4bb8      	ldr	r3, [pc, #736]	@ (10043124 <ButtonsMenuSM_Event_Handler+0xd8c>)
10042e42:	781b      	ldrb	r3, [r3, #0]
10042e44:	3301      	adds	r3, #1
10042e46:	b2da      	uxtb	r2, r3
10042e48:	4bb6      	ldr	r3, [pc, #728]	@ (10043124 <ButtonsMenuSM_Event_Handler+0xd8c>)
10042e4a:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
10042e4c:	4bb5      	ldr	r3, [pc, #724]	@ (10043124 <ButtonsMenuSM_Event_Handler+0xd8c>)
10042e4e:	781a      	ldrb	r2, [r3, #0]
10042e50:	4bb4      	ldr	r3, [pc, #720]	@ (10043124 <ButtonsMenuSM_Event_Handler+0xd8c>)
10042e52:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
10042e54:	4bb4      	ldr	r3, [pc, #720]	@ (10043128 <ButtonsMenuSM_Event_Handler+0xd90>)
10042e56:	7818      	ldrb	r0, [r3, #0]
10042e58:	4bb4      	ldr	r3, [pc, #720]	@ (1004312c <ButtonsMenuSM_Event_Handler+0xd94>)
10042e5a:	7819      	ldrb	r1, [r3, #0]
10042e5c:	4bb1      	ldr	r3, [pc, #708]	@ (10043124 <ButtonsMenuSM_Event_Handler+0xd8c>)
10042e5e:	781b      	ldrb	r3, [r3, #0]
10042e60:	001a      	movs	r2, r3
10042e62:	f7fe ff3f 	bl	10041ce4 <DrawFolder>
10042e66:	e042      	b.n	10042eee <ButtonsMenuSM_Event_Handler+0xb56>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10042e68:	1d3b      	adds	r3, r7, #4
10042e6a:	885b      	ldrh	r3, [r3, #2]
10042e6c:	001a      	movs	r2, r3
10042e6e:	2380      	movs	r3, #128	@ 0x80
10042e70:	015b      	lsls	r3, r3, #5
10042e72:	4013      	ands	r3, r2
10042e74:	d017      	beq.n	10042ea6 <ButtonsMenuSM_Event_Handler+0xb0e>
10042e76:	1d3b      	adds	r3, r7, #4
10042e78:	885b      	ldrh	r3, [r3, #2]
10042e7a:	001a      	movs	r2, r3
10042e7c:	2310      	movs	r3, #16
10042e7e:	4013      	ands	r3, r2
10042e80:	d111      	bne.n	10042ea6 <ButtonsMenuSM_Event_Handler+0xb0e>
					cursorpos = !cursorpos;
10042e82:	4ba9      	ldr	r3, [pc, #676]	@ (10043128 <ButtonsMenuSM_Event_Handler+0xd90>)
10042e84:	781b      	ldrb	r3, [r3, #0]
10042e86:	425a      	negs	r2, r3
10042e88:	4153      	adcs	r3, r2
10042e8a:	b2db      	uxtb	r3, r3
10042e8c:	001a      	movs	r2, r3
10042e8e:	4ba6      	ldr	r3, [pc, #664]	@ (10043128 <ButtonsMenuSM_Event_Handler+0xd90>)
10042e90:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
10042e92:	4ba5      	ldr	r3, [pc, #660]	@ (10043128 <ButtonsMenuSM_Event_Handler+0xd90>)
10042e94:	7818      	ldrb	r0, [r3, #0]
10042e96:	4ba5      	ldr	r3, [pc, #660]	@ (1004312c <ButtonsMenuSM_Event_Handler+0xd94>)
10042e98:	7819      	ldrb	r1, [r3, #0]
10042e9a:	4ba2      	ldr	r3, [pc, #648]	@ (10043124 <ButtonsMenuSM_Event_Handler+0xd8c>)
10042e9c:	781b      	ldrb	r3, [r3, #0]
10042e9e:	001a      	movs	r2, r3
10042ea0:	f7fe ff20 	bl	10041ce4 <DrawFolder>
10042ea4:	e023      	b.n	10042eee <ButtonsMenuSM_Event_Handler+0xb56>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
10042ea6:	1d3b      	adds	r3, r7, #4
10042ea8:	885b      	ldrh	r3, [r3, #2]
10042eaa:	001a      	movs	r2, r3
10042eac:	2380      	movs	r3, #128	@ 0x80
10042eae:	019b      	lsls	r3, r3, #6
10042eb0:	4013      	ands	r3, r2
10042eb2:	d101      	bne.n	10042eb8 <ButtonsMenuSM_Event_Handler+0xb20>
10042eb4:	f000 fc09 	bl	100436ca <ButtonsMenuSM_Event_Handler+0x1332>
10042eb8:	1d3b      	adds	r3, r7, #4
10042eba:	885b      	ldrh	r3, [r3, #2]
10042ebc:	001a      	movs	r2, r3
10042ebe:	2320      	movs	r3, #32
10042ec0:	4013      	ands	r3, r2
10042ec2:	d001      	beq.n	10042ec8 <ButtonsMenuSM_Event_Handler+0xb30>
10042ec4:	f000 fc01 	bl	100436ca <ButtonsMenuSM_Event_Handler+0x1332>
					cursorpos = !cursorpos;
10042ec8:	4b97      	ldr	r3, [pc, #604]	@ (10043128 <ButtonsMenuSM_Event_Handler+0xd90>)
10042eca:	781b      	ldrb	r3, [r3, #0]
10042ecc:	425a      	negs	r2, r3
10042ece:	4153      	adcs	r3, r2
10042ed0:	b2db      	uxtb	r3, r3
10042ed2:	001a      	movs	r2, r3
10042ed4:	4b94      	ldr	r3, [pc, #592]	@ (10043128 <ButtonsMenuSM_Event_Handler+0xd90>)
10042ed6:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
10042ed8:	4b93      	ldr	r3, [pc, #588]	@ (10043128 <ButtonsMenuSM_Event_Handler+0xd90>)
10042eda:	7818      	ldrb	r0, [r3, #0]
10042edc:	4b93      	ldr	r3, [pc, #588]	@ (1004312c <ButtonsMenuSM_Event_Handler+0xd94>)
10042ede:	7819      	ldrb	r1, [r3, #0]
10042ee0:	4b90      	ldr	r3, [pc, #576]	@ (10043124 <ButtonsMenuSM_Event_Handler+0xd8c>)
10042ee2:	781b      	ldrb	r3, [r3, #0]
10042ee4:	001a      	movs	r2, r3
10042ee6:	f7fe fefd 	bl	10041ce4 <DrawFolder>
				}
			}
			break;
10042eea:	f000 fbee 	bl	100436ca <ButtonsMenuSM_Event_Handler+0x1332>
10042eee:	f000 fbec 	bl	100436ca <ButtonsMenuSM_Event_Handler+0x1332>
		case setTime:
			static int8_t minute;
			static int8_t hour;
			static int8_t day;
			static int8_t month;
			if(event.status == EVENT_ENTRY){
10042ef2:	1d3b      	adds	r3, r7, #4
10042ef4:	781b      	ldrb	r3, [r3, #0]
10042ef6:	b25b      	sxtb	r3, r3
10042ef8:	2b02      	cmp	r3, #2
10042efa:	d130      	bne.n	10042f5e <ButtonsMenuSM_Event_Handler+0xbc6>
				cursorpos = 0;
10042efc:	4b8a      	ldr	r3, [pc, #552]	@ (10043128 <ButtonsMenuSM_Event_Handler+0xd90>)
10042efe:	2200      	movs	r2, #0
10042f00:	701a      	strb	r2, [r3, #0]
				minute = Scheduler_GetMinute();
10042f02:	f003 f959 	bl	100461b8 <Scheduler_GetMinute>
10042f06:	0003      	movs	r3, r0
10042f08:	b25a      	sxtb	r2, r3
10042f0a:	4b89      	ldr	r3, [pc, #548]	@ (10043130 <ButtonsMenuSM_Event_Handler+0xd98>)
10042f0c:	701a      	strb	r2, [r3, #0]
				hour = Scheduler_GetHour();
10042f0e:	f003 f945 	bl	1004619c <Scheduler_GetHour>
10042f12:	0003      	movs	r3, r0
10042f14:	b25a      	sxtb	r2, r3
10042f16:	4b87      	ldr	r3, [pc, #540]	@ (10043134 <ButtonsMenuSM_Event_Handler+0xd9c>)
10042f18:	701a      	strb	r2, [r3, #0]
				day = Scheduler_GetDay();
10042f1a:	f003 f931 	bl	10046180 <Scheduler_GetDay>
10042f1e:	0003      	movs	r3, r0
10042f20:	b25a      	sxtb	r2, r3
10042f22:	4b85      	ldr	r3, [pc, #532]	@ (10043138 <ButtonsMenuSM_Event_Handler+0xda0>)
10042f24:	701a      	strb	r2, [r3, #0]
				month = Scheduler_GetMonth();
10042f26:	f003 f91d 	bl	10046164 <Scheduler_GetMonth>
10042f2a:	0003      	movs	r3, r0
10042f2c:	b25a      	sxtb	r2, r3
10042f2e:	4b83      	ldr	r3, [pc, #524]	@ (1004313c <ButtonsMenuSM_Event_Handler+0xda4>)
10042f30:	701a      	strb	r2, [r3, #0]
				DrawSetTime(cursorpos, month, day, hour, minute);
10042f32:	4b7d      	ldr	r3, [pc, #500]	@ (10043128 <ButtonsMenuSM_Event_Handler+0xd90>)
10042f34:	7818      	ldrb	r0, [r3, #0]
10042f36:	4b81      	ldr	r3, [pc, #516]	@ (1004313c <ButtonsMenuSM_Event_Handler+0xda4>)
10042f38:	781b      	ldrb	r3, [r3, #0]
10042f3a:	b25b      	sxtb	r3, r3
10042f3c:	b2d9      	uxtb	r1, r3
10042f3e:	4b7e      	ldr	r3, [pc, #504]	@ (10043138 <ButtonsMenuSM_Event_Handler+0xda0>)
10042f40:	781b      	ldrb	r3, [r3, #0]
10042f42:	b25b      	sxtb	r3, r3
10042f44:	b2da      	uxtb	r2, r3
10042f46:	4b7b      	ldr	r3, [pc, #492]	@ (10043134 <ButtonsMenuSM_Event_Handler+0xd9c>)
10042f48:	781b      	ldrb	r3, [r3, #0]
10042f4a:	b25b      	sxtb	r3, r3
10042f4c:	b2dc      	uxtb	r4, r3
10042f4e:	4b78      	ldr	r3, [pc, #480]	@ (10043130 <ButtonsMenuSM_Event_Handler+0xd98>)
10042f50:	781b      	ldrb	r3, [r3, #0]
10042f52:	b25b      	sxtb	r3, r3
10042f54:	b2db      	uxtb	r3, r3
10042f56:	9300      	str	r3, [sp, #0]
10042f58:	0023      	movs	r3, r4
10042f5a:	f7fe ff6b 	bl	10041e34 <DrawSetTime>
			}
			if(event.status == EVENT_BUTTONS){
10042f5e:	1d3b      	adds	r3, r7, #4
10042f60:	781b      	ldrb	r3, [r3, #0]
10042f62:	b25b      	sxtb	r3, r3
10042f64:	2b04      	cmp	r3, #4
10042f66:	d001      	beq.n	10042f6c <ButtonsMenuSM_Event_Handler+0xbd4>
10042f68:	f000 fbb1 	bl	100436ce <ButtonsMenuSM_Event_Handler+0x1336>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10042f6c:	1d3b      	adds	r3, r7, #4
10042f6e:	885b      	ldrh	r3, [r3, #2]
10042f70:	001a      	movs	r2, r3
10042f72:	2380      	movs	r3, #128	@ 0x80
10042f74:	005b      	lsls	r3, r3, #1
10042f76:	4013      	ands	r3, r2
10042f78:	d00e      	beq.n	10042f98 <ButtonsMenuSM_Event_Handler+0xc00>
10042f7a:	1d3b      	adds	r3, r7, #4
10042f7c:	885b      	ldrh	r3, [r3, #2]
10042f7e:	001a      	movs	r2, r3
10042f80:	2301      	movs	r3, #1
10042f82:	4013      	ands	r3, r2
10042f84:	d108      	bne.n	10042f98 <ButtonsMenuSM_Event_Handler+0xc00>
					//discountprintf("moving to main, back");
					nextstate = main;
10042f86:	232e      	movs	r3, #46	@ 0x2e
10042f88:	18fb      	adds	r3, r7, r3
10042f8a:	2200      	movs	r2, #0
10042f8c:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042f8e:	232f      	movs	r3, #47	@ 0x2f
10042f90:	18fb      	adds	r3, r7, r3
10042f92:	2201      	movs	r2, #1
10042f94:	701a      	strb	r2, [r3, #0]
10042f96:	e23a      	b.n	1004340e <ButtonsMenuSM_Event_Handler+0x1076>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10042f98:	1d3b      	adds	r3, r7, #4
10042f9a:	885b      	ldrh	r3, [r3, #2]
10042f9c:	001a      	movs	r2, r3
10042f9e:	2380      	movs	r3, #128	@ 0x80
10042fa0:	009b      	lsls	r3, r3, #2
10042fa2:	4013      	ands	r3, r2
10042fa4:	d100      	bne.n	10042fa8 <ButtonsMenuSM_Event_Handler+0xc10>
10042fa6:	e08c      	b.n	100430c2 <ButtonsMenuSM_Event_Handler+0xd2a>
10042fa8:	1d3b      	adds	r3, r7, #4
10042faa:	885b      	ldrh	r3, [r3, #2]
10042fac:	001a      	movs	r2, r3
10042fae:	2302      	movs	r3, #2
10042fb0:	4013      	ands	r3, r2
10042fb2:	d000      	beq.n	10042fb6 <ButtonsMenuSM_Event_Handler+0xc1e>
10042fb4:	e085      	b.n	100430c2 <ButtonsMenuSM_Event_Handler+0xd2a>
					//discountprintf("moving to main, select");
					I2C_Transmit(RTCADDRESS, RTCSECADDR, 0b10000000);
10042fb6:	2280      	movs	r2, #128	@ 0x80
10042fb8:	2100      	movs	r1, #0
10042fba:	206f      	movs	r0, #111	@ 0x6f
10042fbc:	f001 ff34 	bl	10044e28 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCSTATADDR, 0x28);
10042fc0:	2228      	movs	r2, #40	@ 0x28
10042fc2:	2103      	movs	r1, #3
10042fc4:	206f      	movs	r0, #111	@ 0x6f
10042fc6:	f001 ff2f 	bl	10044e28 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCMINADDR, ((((minute/10)<<4))&0b01110000)|minute%10);
10042fca:	4b59      	ldr	r3, [pc, #356]	@ (10043130 <ButtonsMenuSM_Event_Handler+0xd98>)
10042fcc:	781b      	ldrb	r3, [r3, #0]
10042fce:	b25b      	sxtb	r3, r3
10042fd0:	210a      	movs	r1, #10
10042fd2:	0018      	movs	r0, r3
10042fd4:	f7fd f9be 	bl	10040354 <__divsi3>
10042fd8:	0003      	movs	r3, r0
10042fda:	b25b      	sxtb	r3, r3
10042fdc:	011b      	lsls	r3, r3, #4
10042fde:	b25b      	sxtb	r3, r3
10042fe0:	2270      	movs	r2, #112	@ 0x70
10042fe2:	4013      	ands	r3, r2
10042fe4:	b25c      	sxtb	r4, r3
10042fe6:	4b52      	ldr	r3, [pc, #328]	@ (10043130 <ButtonsMenuSM_Event_Handler+0xd98>)
10042fe8:	781b      	ldrb	r3, [r3, #0]
10042fea:	b25b      	sxtb	r3, r3
10042fec:	210a      	movs	r1, #10
10042fee:	0018      	movs	r0, r3
10042ff0:	f7fd fa96 	bl	10040520 <__aeabi_idivmod>
10042ff4:	000b      	movs	r3, r1
10042ff6:	b25b      	sxtb	r3, r3
10042ff8:	4323      	orrs	r3, r4
10042ffa:	b25b      	sxtb	r3, r3
10042ffc:	b2db      	uxtb	r3, r3
10042ffe:	001a      	movs	r2, r3
10043000:	2101      	movs	r1, #1
10043002:	206f      	movs	r0, #111	@ 0x6f
10043004:	f001 ff10 	bl	10044e28 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCHOURADDR, ((hour/10)<<4)|hour%10);
10043008:	4b4a      	ldr	r3, [pc, #296]	@ (10043134 <ButtonsMenuSM_Event_Handler+0xd9c>)
1004300a:	781b      	ldrb	r3, [r3, #0]
1004300c:	b25b      	sxtb	r3, r3
1004300e:	210a      	movs	r1, #10
10043010:	0018      	movs	r0, r3
10043012:	f7fd f99f 	bl	10040354 <__divsi3>
10043016:	0003      	movs	r3, r0
10043018:	b25b      	sxtb	r3, r3
1004301a:	011b      	lsls	r3, r3, #4
1004301c:	b25c      	sxtb	r4, r3
1004301e:	4b45      	ldr	r3, [pc, #276]	@ (10043134 <ButtonsMenuSM_Event_Handler+0xd9c>)
10043020:	781b      	ldrb	r3, [r3, #0]
10043022:	b25b      	sxtb	r3, r3
10043024:	210a      	movs	r1, #10
10043026:	0018      	movs	r0, r3
10043028:	f7fd fa7a 	bl	10040520 <__aeabi_idivmod>
1004302c:	000b      	movs	r3, r1
1004302e:	b25b      	sxtb	r3, r3
10043030:	4323      	orrs	r3, r4
10043032:	b25b      	sxtb	r3, r3
10043034:	b2db      	uxtb	r3, r3
10043036:	001a      	movs	r2, r3
10043038:	2102      	movs	r1, #2
1004303a:	206f      	movs	r0, #111	@ 0x6f
1004303c:	f001 fef4 	bl	10044e28 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCDAYADDR, (((day)/10)<<4)|(day)%10);
10043040:	4b3d      	ldr	r3, [pc, #244]	@ (10043138 <ButtonsMenuSM_Event_Handler+0xda0>)
10043042:	781b      	ldrb	r3, [r3, #0]
10043044:	b25b      	sxtb	r3, r3
10043046:	210a      	movs	r1, #10
10043048:	0018      	movs	r0, r3
1004304a:	f7fd f983 	bl	10040354 <__divsi3>
1004304e:	0003      	movs	r3, r0
10043050:	b25b      	sxtb	r3, r3
10043052:	011b      	lsls	r3, r3, #4
10043054:	b25c      	sxtb	r4, r3
10043056:	4b38      	ldr	r3, [pc, #224]	@ (10043138 <ButtonsMenuSM_Event_Handler+0xda0>)
10043058:	781b      	ldrb	r3, [r3, #0]
1004305a:	b25b      	sxtb	r3, r3
1004305c:	210a      	movs	r1, #10
1004305e:	0018      	movs	r0, r3
10043060:	f7fd fa5e 	bl	10040520 <__aeabi_idivmod>
10043064:	000b      	movs	r3, r1
10043066:	b25b      	sxtb	r3, r3
10043068:	4323      	orrs	r3, r4
1004306a:	b25b      	sxtb	r3, r3
1004306c:	b2db      	uxtb	r3, r3
1004306e:	001a      	movs	r2, r3
10043070:	2104      	movs	r1, #4
10043072:	206f      	movs	r0, #111	@ 0x6f
10043074:	f001 fed8 	bl	10044e28 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCMNTHADDR, (((month)/10)<<4)|(month)%10);
10043078:	4b30      	ldr	r3, [pc, #192]	@ (1004313c <ButtonsMenuSM_Event_Handler+0xda4>)
1004307a:	781b      	ldrb	r3, [r3, #0]
1004307c:	b25b      	sxtb	r3, r3
1004307e:	210a      	movs	r1, #10
10043080:	0018      	movs	r0, r3
10043082:	f7fd f967 	bl	10040354 <__divsi3>
10043086:	0003      	movs	r3, r0
10043088:	b25b      	sxtb	r3, r3
1004308a:	011b      	lsls	r3, r3, #4
1004308c:	b25c      	sxtb	r4, r3
1004308e:	4b2b      	ldr	r3, [pc, #172]	@ (1004313c <ButtonsMenuSM_Event_Handler+0xda4>)
10043090:	781b      	ldrb	r3, [r3, #0]
10043092:	b25b      	sxtb	r3, r3
10043094:	210a      	movs	r1, #10
10043096:	0018      	movs	r0, r3
10043098:	f7fd fa42 	bl	10040520 <__aeabi_idivmod>
1004309c:	000b      	movs	r3, r1
1004309e:	b25b      	sxtb	r3, r3
100430a0:	4323      	orrs	r3, r4
100430a2:	b25b      	sxtb	r3, r3
100430a4:	b2db      	uxtb	r3, r3
100430a6:	001a      	movs	r2, r3
100430a8:	2105      	movs	r1, #5
100430aa:	206f      	movs	r0, #111	@ 0x6f
100430ac:	f001 febc 	bl	10044e28 <I2C_Transmit>
					nextstate = main;
100430b0:	232e      	movs	r3, #46	@ 0x2e
100430b2:	18fb      	adds	r3, r7, r3
100430b4:	2200      	movs	r2, #0
100430b6:	701a      	strb	r2, [r3, #0]
					transition = 1;
100430b8:	232f      	movs	r3, #47	@ 0x2f
100430ba:	18fb      	adds	r3, r7, r3
100430bc:	2201      	movs	r2, #1
100430be:	701a      	strb	r2, [r3, #0]
100430c0:	e1a5      	b.n	1004340e <ButtonsMenuSM_Event_Handler+0x1076>

				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
100430c2:	1d3b      	adds	r3, r7, #4
100430c4:	885b      	ldrh	r3, [r3, #2]
100430c6:	001a      	movs	r2, r3
100430c8:	2380      	movs	r3, #128	@ 0x80
100430ca:	00db      	lsls	r3, r3, #3
100430cc:	4013      	ands	r3, r2
100430ce:	d100      	bne.n	100430d2 <ButtonsMenuSM_Event_Handler+0xd3a>
100430d0:	e09b      	b.n	1004320a <ButtonsMenuSM_Event_Handler+0xe72>
100430d2:	1d3b      	adds	r3, r7, #4
100430d4:	885b      	ldrh	r3, [r3, #2]
100430d6:	001a      	movs	r2, r3
100430d8:	2304      	movs	r3, #4
100430da:	4013      	ands	r3, r2
100430dc:	d000      	beq.n	100430e0 <ButtonsMenuSM_Event_Handler+0xd48>
100430de:	e094      	b.n	1004320a <ButtonsMenuSM_Event_Handler+0xe72>
					switch(cursorpos){
100430e0:	4b11      	ldr	r3, [pc, #68]	@ (10043128 <ButtonsMenuSM_Event_Handler+0xd90>)
100430e2:	781b      	ldrb	r3, [r3, #0]
100430e4:	2b03      	cmp	r3, #3
100430e6:	d04f      	beq.n	10043188 <ButtonsMenuSM_Event_Handler+0xdf0>
100430e8:	dd00      	ble.n	100430ec <ButtonsMenuSM_Event_Handler+0xd54>
100430ea:	e077      	b.n	100431dc <ButtonsMenuSM_Event_Handler+0xe44>
100430ec:	2b02      	cmp	r3, #2
100430ee:	d039      	beq.n	10043164 <ButtonsMenuSM_Event_Handler+0xdcc>
100430f0:	dd00      	ble.n	100430f4 <ButtonsMenuSM_Event_Handler+0xd5c>
100430f2:	e073      	b.n	100431dc <ButtonsMenuSM_Event_Handler+0xe44>
100430f4:	2b00      	cmp	r3, #0
100430f6:	d002      	beq.n	100430fe <ButtonsMenuSM_Event_Handler+0xd66>
100430f8:	2b01      	cmp	r3, #1
100430fa:	d021      	beq.n	10043140 <ButtonsMenuSM_Event_Handler+0xda8>
100430fc:	e06e      	b.n	100431dc <ButtonsMenuSM_Event_Handler+0xe44>
					case 0:
						month--;
100430fe:	4b0f      	ldr	r3, [pc, #60]	@ (1004313c <ButtonsMenuSM_Event_Handler+0xda4>)
10043100:	781b      	ldrb	r3, [r3, #0]
10043102:	b25b      	sxtb	r3, r3
10043104:	b2db      	uxtb	r3, r3
10043106:	3b01      	subs	r3, #1
10043108:	b2db      	uxtb	r3, r3
1004310a:	b25a      	sxtb	r2, r3
1004310c:	4b0b      	ldr	r3, [pc, #44]	@ (1004313c <ButtonsMenuSM_Event_Handler+0xda4>)
1004310e:	701a      	strb	r2, [r3, #0]
						if(month < 1){
10043110:	4b0a      	ldr	r3, [pc, #40]	@ (1004313c <ButtonsMenuSM_Event_Handler+0xda4>)
10043112:	781b      	ldrb	r3, [r3, #0]
10043114:	b25b      	sxtb	r3, r3
10043116:	2b00      	cmp	r3, #0
10043118:	dc59      	bgt.n	100431ce <ButtonsMenuSM_Event_Handler+0xe36>
							month = 12;
1004311a:	4b08      	ldr	r3, [pc, #32]	@ (1004313c <ButtonsMenuSM_Event_Handler+0xda4>)
1004311c:	220c      	movs	r2, #12
1004311e:	701a      	strb	r2, [r3, #0]
						}
						break;
10043120:	e055      	b.n	100431ce <ButtonsMenuSM_Event_Handler+0xe36>
10043122:	46c0      	nop			@ (mov r8, r8)
10043124:	200003a0 	.word	0x200003a0
10043128:	2000039e 	.word	0x2000039e
1004312c:	2000039f 	.word	0x2000039f
10043130:	200003b2 	.word	0x200003b2
10043134:	200003b3 	.word	0x200003b3
10043138:	200003b4 	.word	0x200003b4
1004313c:	200003b5 	.word	0x200003b5
					case 1:
						day--;
10043140:	4bca      	ldr	r3, [pc, #808]	@ (1004346c <ButtonsMenuSM_Event_Handler+0x10d4>)
10043142:	781b      	ldrb	r3, [r3, #0]
10043144:	b25b      	sxtb	r3, r3
10043146:	b2db      	uxtb	r3, r3
10043148:	3b01      	subs	r3, #1
1004314a:	b2db      	uxtb	r3, r3
1004314c:	b25a      	sxtb	r2, r3
1004314e:	4bc7      	ldr	r3, [pc, #796]	@ (1004346c <ButtonsMenuSM_Event_Handler+0x10d4>)
10043150:	701a      	strb	r2, [r3, #0]
						if(day < 1){
10043152:	4bc6      	ldr	r3, [pc, #792]	@ (1004346c <ButtonsMenuSM_Event_Handler+0x10d4>)
10043154:	781b      	ldrb	r3, [r3, #0]
10043156:	b25b      	sxtb	r3, r3
10043158:	2b00      	cmp	r3, #0
1004315a:	dc3a      	bgt.n	100431d2 <ButtonsMenuSM_Event_Handler+0xe3a>
							day = 31;
1004315c:	4bc3      	ldr	r3, [pc, #780]	@ (1004346c <ButtonsMenuSM_Event_Handler+0x10d4>)
1004315e:	221f      	movs	r2, #31
10043160:	701a      	strb	r2, [r3, #0]
						}
						break;
10043162:	e036      	b.n	100431d2 <ButtonsMenuSM_Event_Handler+0xe3a>
					case 2:
						hour--;
10043164:	4bc2      	ldr	r3, [pc, #776]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
10043166:	781b      	ldrb	r3, [r3, #0]
10043168:	b25b      	sxtb	r3, r3
1004316a:	b2db      	uxtb	r3, r3
1004316c:	3b01      	subs	r3, #1
1004316e:	b2db      	uxtb	r3, r3
10043170:	b25a      	sxtb	r2, r3
10043172:	4bbf      	ldr	r3, [pc, #764]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
10043174:	701a      	strb	r2, [r3, #0]
						if(hour < 0){
10043176:	4bbe      	ldr	r3, [pc, #760]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
10043178:	781b      	ldrb	r3, [r3, #0]
1004317a:	b25b      	sxtb	r3, r3
1004317c:	2b00      	cmp	r3, #0
1004317e:	da2a      	bge.n	100431d6 <ButtonsMenuSM_Event_Handler+0xe3e>
							hour = 23;
10043180:	4bbb      	ldr	r3, [pc, #748]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
10043182:	2217      	movs	r2, #23
10043184:	701a      	strb	r2, [r3, #0]
						}
						break;
10043186:	e026      	b.n	100431d6 <ButtonsMenuSM_Event_Handler+0xe3e>
					case 3:
						minute--;
10043188:	4bba      	ldr	r3, [pc, #744]	@ (10043474 <ButtonsMenuSM_Event_Handler+0x10dc>)
1004318a:	781b      	ldrb	r3, [r3, #0]
1004318c:	b25b      	sxtb	r3, r3
1004318e:	b2db      	uxtb	r3, r3
10043190:	3b01      	subs	r3, #1
10043192:	b2db      	uxtb	r3, r3
10043194:	b25a      	sxtb	r2, r3
10043196:	4bb7      	ldr	r3, [pc, #732]	@ (10043474 <ButtonsMenuSM_Event_Handler+0x10dc>)
10043198:	701a      	strb	r2, [r3, #0]
						if(minute < 0){
1004319a:	4bb6      	ldr	r3, [pc, #728]	@ (10043474 <ButtonsMenuSM_Event_Handler+0x10dc>)
1004319c:	781b      	ldrb	r3, [r3, #0]
1004319e:	b25b      	sxtb	r3, r3
100431a0:	2b00      	cmp	r3, #0
100431a2:	da1a      	bge.n	100431da <ButtonsMenuSM_Event_Handler+0xe42>
							minute = 59;
100431a4:	4bb3      	ldr	r3, [pc, #716]	@ (10043474 <ButtonsMenuSM_Event_Handler+0x10dc>)
100431a6:	223b      	movs	r2, #59	@ 0x3b
100431a8:	701a      	strb	r2, [r3, #0]
							hour--;
100431aa:	4bb1      	ldr	r3, [pc, #708]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
100431ac:	781b      	ldrb	r3, [r3, #0]
100431ae:	b25b      	sxtb	r3, r3
100431b0:	b2db      	uxtb	r3, r3
100431b2:	3b01      	subs	r3, #1
100431b4:	b2db      	uxtb	r3, r3
100431b6:	b25a      	sxtb	r2, r3
100431b8:	4bad      	ldr	r3, [pc, #692]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
100431ba:	701a      	strb	r2, [r3, #0]
							if(hour < 0){
100431bc:	4bac      	ldr	r3, [pc, #688]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
100431be:	781b      	ldrb	r3, [r3, #0]
100431c0:	b25b      	sxtb	r3, r3
100431c2:	2b00      	cmp	r3, #0
100431c4:	da09      	bge.n	100431da <ButtonsMenuSM_Event_Handler+0xe42>
								hour = 23;
100431c6:	4baa      	ldr	r3, [pc, #680]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
100431c8:	2217      	movs	r2, #23
100431ca:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
100431cc:	e005      	b.n	100431da <ButtonsMenuSM_Event_Handler+0xe42>
						break;
100431ce:	46c0      	nop			@ (mov r8, r8)
100431d0:	e004      	b.n	100431dc <ButtonsMenuSM_Event_Handler+0xe44>
						break;
100431d2:	46c0      	nop			@ (mov r8, r8)
100431d4:	e002      	b.n	100431dc <ButtonsMenuSM_Event_Handler+0xe44>
						break;
100431d6:	46c0      	nop			@ (mov r8, r8)
100431d8:	e000      	b.n	100431dc <ButtonsMenuSM_Event_Handler+0xe44>
						break;
100431da:	46c0      	nop			@ (mov r8, r8)
					}
					DrawSetTime(cursorpos, month, day, hour, minute);
100431dc:	4ba6      	ldr	r3, [pc, #664]	@ (10043478 <ButtonsMenuSM_Event_Handler+0x10e0>)
100431de:	7818      	ldrb	r0, [r3, #0]
100431e0:	4ba6      	ldr	r3, [pc, #664]	@ (1004347c <ButtonsMenuSM_Event_Handler+0x10e4>)
100431e2:	781b      	ldrb	r3, [r3, #0]
100431e4:	b25b      	sxtb	r3, r3
100431e6:	b2d9      	uxtb	r1, r3
100431e8:	4ba0      	ldr	r3, [pc, #640]	@ (1004346c <ButtonsMenuSM_Event_Handler+0x10d4>)
100431ea:	781b      	ldrb	r3, [r3, #0]
100431ec:	b25b      	sxtb	r3, r3
100431ee:	b2da      	uxtb	r2, r3
100431f0:	4b9f      	ldr	r3, [pc, #636]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
100431f2:	781b      	ldrb	r3, [r3, #0]
100431f4:	b25b      	sxtb	r3, r3
100431f6:	b2dc      	uxtb	r4, r3
100431f8:	4b9e      	ldr	r3, [pc, #632]	@ (10043474 <ButtonsMenuSM_Event_Handler+0x10dc>)
100431fa:	781b      	ldrb	r3, [r3, #0]
100431fc:	b25b      	sxtb	r3, r3
100431fe:	b2db      	uxtb	r3, r3
10043200:	9300      	str	r3, [sp, #0]
10043202:	0023      	movs	r3, r4
10043204:	f7fe fe16 	bl	10041e34 <DrawSetTime>
					break;
10043208:	e264      	b.n	100436d4 <ButtonsMenuSM_Event_Handler+0x133c>
				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
1004320a:	1d3b      	adds	r3, r7, #4
1004320c:	885b      	ldrh	r3, [r3, #2]
1004320e:	001a      	movs	r2, r3
10043210:	2380      	movs	r3, #128	@ 0x80
10043212:	011b      	lsls	r3, r3, #4
10043214:	4013      	ands	r3, r2
10043216:	d100      	bne.n	1004321a <ButtonsMenuSM_Event_Handler+0xe82>
10043218:	e095      	b.n	10043346 <ButtonsMenuSM_Event_Handler+0xfae>
1004321a:	1d3b      	adds	r3, r7, #4
1004321c:	885b      	ldrh	r3, [r3, #2]
1004321e:	001a      	movs	r2, r3
10043220:	2308      	movs	r3, #8
10043222:	4013      	ands	r3, r2
10043224:	d000      	beq.n	10043228 <ButtonsMenuSM_Event_Handler+0xe90>
10043226:	e08e      	b.n	10043346 <ButtonsMenuSM_Event_Handler+0xfae>
					switch(cursorpos){
10043228:	4b93      	ldr	r3, [pc, #588]	@ (10043478 <ButtonsMenuSM_Event_Handler+0x10e0>)
1004322a:	781b      	ldrb	r3, [r3, #0]
1004322c:	2b03      	cmp	r3, #3
1004322e:	d042      	beq.n	100432b6 <ButtonsMenuSM_Event_Handler+0xf1e>
10043230:	dd00      	ble.n	10043234 <ButtonsMenuSM_Event_Handler+0xe9c>
10043232:	e071      	b.n	10043318 <ButtonsMenuSM_Event_Handler+0xf80>
10043234:	2b02      	cmp	r3, #2
10043236:	d029      	beq.n	1004328c <ButtonsMenuSM_Event_Handler+0xef4>
10043238:	dc6e      	bgt.n	10043318 <ButtonsMenuSM_Event_Handler+0xf80>
1004323a:	2b00      	cmp	r3, #0
1004323c:	d002      	beq.n	10043244 <ButtonsMenuSM_Event_Handler+0xeac>
1004323e:	2b01      	cmp	r3, #1
10043240:	d012      	beq.n	10043268 <ButtonsMenuSM_Event_Handler+0xed0>
10043242:	e069      	b.n	10043318 <ButtonsMenuSM_Event_Handler+0xf80>
					case 0:
						month++;
10043244:	4b8d      	ldr	r3, [pc, #564]	@ (1004347c <ButtonsMenuSM_Event_Handler+0x10e4>)
10043246:	781b      	ldrb	r3, [r3, #0]
10043248:	b25b      	sxtb	r3, r3
1004324a:	b2db      	uxtb	r3, r3
1004324c:	3301      	adds	r3, #1
1004324e:	b2db      	uxtb	r3, r3
10043250:	b25a      	sxtb	r2, r3
10043252:	4b8a      	ldr	r3, [pc, #552]	@ (1004347c <ButtonsMenuSM_Event_Handler+0x10e4>)
10043254:	701a      	strb	r2, [r3, #0]
						if(month > 12){
10043256:	4b89      	ldr	r3, [pc, #548]	@ (1004347c <ButtonsMenuSM_Event_Handler+0x10e4>)
10043258:	781b      	ldrb	r3, [r3, #0]
1004325a:	b25b      	sxtb	r3, r3
1004325c:	2b0c      	cmp	r3, #12
1004325e:	dd58      	ble.n	10043312 <ButtonsMenuSM_Event_Handler+0xf7a>
							month = 1;
10043260:	4b86      	ldr	r3, [pc, #536]	@ (1004347c <ButtonsMenuSM_Event_Handler+0x10e4>)
10043262:	2201      	movs	r2, #1
10043264:	701a      	strb	r2, [r3, #0]
						}
						break;
10043266:	e054      	b.n	10043312 <ButtonsMenuSM_Event_Handler+0xf7a>
					case 1:
						day++;
10043268:	4b80      	ldr	r3, [pc, #512]	@ (1004346c <ButtonsMenuSM_Event_Handler+0x10d4>)
1004326a:	781b      	ldrb	r3, [r3, #0]
1004326c:	b25b      	sxtb	r3, r3
1004326e:	b2db      	uxtb	r3, r3
10043270:	3301      	adds	r3, #1
10043272:	b2db      	uxtb	r3, r3
10043274:	b25a      	sxtb	r2, r3
10043276:	4b7d      	ldr	r3, [pc, #500]	@ (1004346c <ButtonsMenuSM_Event_Handler+0x10d4>)
10043278:	701a      	strb	r2, [r3, #0]
						if(day > 31){
1004327a:	4b7c      	ldr	r3, [pc, #496]	@ (1004346c <ButtonsMenuSM_Event_Handler+0x10d4>)
1004327c:	781b      	ldrb	r3, [r3, #0]
1004327e:	b25b      	sxtb	r3, r3
10043280:	2b1f      	cmp	r3, #31
10043282:	dd48      	ble.n	10043316 <ButtonsMenuSM_Event_Handler+0xf7e>
							day = 1;
10043284:	4b79      	ldr	r3, [pc, #484]	@ (1004346c <ButtonsMenuSM_Event_Handler+0x10d4>)
10043286:	2201      	movs	r2, #1
10043288:	701a      	strb	r2, [r3, #0]
						}
						break;
1004328a:	e044      	b.n	10043316 <ButtonsMenuSM_Event_Handler+0xf7e>
					case 2:
						hour++;
1004328c:	4b78      	ldr	r3, [pc, #480]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
1004328e:	781b      	ldrb	r3, [r3, #0]
10043290:	b25b      	sxtb	r3, r3
10043292:	b2db      	uxtb	r3, r3
10043294:	3301      	adds	r3, #1
10043296:	b2db      	uxtb	r3, r3
10043298:	b25a      	sxtb	r2, r3
1004329a:	4b75      	ldr	r3, [pc, #468]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
1004329c:	701a      	strb	r2, [r3, #0]
						hour %= 24;
1004329e:	4b74      	ldr	r3, [pc, #464]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
100432a0:	781b      	ldrb	r3, [r3, #0]
100432a2:	b25b      	sxtb	r3, r3
100432a4:	2118      	movs	r1, #24
100432a6:	0018      	movs	r0, r3
100432a8:	f7fd f93a 	bl	10040520 <__aeabi_idivmod>
100432ac:	000b      	movs	r3, r1
100432ae:	b25a      	sxtb	r2, r3
100432b0:	4b6f      	ldr	r3, [pc, #444]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
100432b2:	701a      	strb	r2, [r3, #0]
						break;
100432b4:	e030      	b.n	10043318 <ButtonsMenuSM_Event_Handler+0xf80>
					case 3:
						minute++;
100432b6:	4b6f      	ldr	r3, [pc, #444]	@ (10043474 <ButtonsMenuSM_Event_Handler+0x10dc>)
100432b8:	781b      	ldrb	r3, [r3, #0]
100432ba:	b25b      	sxtb	r3, r3
100432bc:	b2db      	uxtb	r3, r3
100432be:	3301      	adds	r3, #1
100432c0:	b2db      	uxtb	r3, r3
100432c2:	b25a      	sxtb	r2, r3
100432c4:	4b6b      	ldr	r3, [pc, #428]	@ (10043474 <ButtonsMenuSM_Event_Handler+0x10dc>)
100432c6:	701a      	strb	r2, [r3, #0]
						minute%=60;
100432c8:	4b6a      	ldr	r3, [pc, #424]	@ (10043474 <ButtonsMenuSM_Event_Handler+0x10dc>)
100432ca:	781b      	ldrb	r3, [r3, #0]
100432cc:	b25b      	sxtb	r3, r3
100432ce:	213c      	movs	r1, #60	@ 0x3c
100432d0:	0018      	movs	r0, r3
100432d2:	f7fd f925 	bl	10040520 <__aeabi_idivmod>
100432d6:	000b      	movs	r3, r1
100432d8:	b25a      	sxtb	r2, r3
100432da:	4b66      	ldr	r3, [pc, #408]	@ (10043474 <ButtonsMenuSM_Event_Handler+0x10dc>)
100432dc:	701a      	strb	r2, [r3, #0]
						if(minute == 0){
100432de:	4b65      	ldr	r3, [pc, #404]	@ (10043474 <ButtonsMenuSM_Event_Handler+0x10dc>)
100432e0:	781b      	ldrb	r3, [r3, #0]
100432e2:	b25b      	sxtb	r3, r3
100432e4:	2b00      	cmp	r3, #0
100432e6:	d117      	bne.n	10043318 <ButtonsMenuSM_Event_Handler+0xf80>
							hour++;
100432e8:	4b61      	ldr	r3, [pc, #388]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
100432ea:	781b      	ldrb	r3, [r3, #0]
100432ec:	b25b      	sxtb	r3, r3
100432ee:	b2db      	uxtb	r3, r3
100432f0:	3301      	adds	r3, #1
100432f2:	b2db      	uxtb	r3, r3
100432f4:	b25a      	sxtb	r2, r3
100432f6:	4b5e      	ldr	r3, [pc, #376]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
100432f8:	701a      	strb	r2, [r3, #0]
							hour %= 24;
100432fa:	4b5d      	ldr	r3, [pc, #372]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
100432fc:	781b      	ldrb	r3, [r3, #0]
100432fe:	b25b      	sxtb	r3, r3
10043300:	2118      	movs	r1, #24
10043302:	0018      	movs	r0, r3
10043304:	f7fd f90c 	bl	10040520 <__aeabi_idivmod>
10043308:	000b      	movs	r3, r1
1004330a:	b25a      	sxtb	r2, r3
1004330c:	4b58      	ldr	r3, [pc, #352]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
1004330e:	701a      	strb	r2, [r3, #0]
10043310:	e002      	b.n	10043318 <ButtonsMenuSM_Event_Handler+0xf80>
						break;
10043312:	46c0      	nop			@ (mov r8, r8)
10043314:	e000      	b.n	10043318 <ButtonsMenuSM_Event_Handler+0xf80>
						break;
10043316:	46c0      	nop			@ (mov r8, r8)
						}
					}
					DrawSetTime(cursorpos, month, day, hour, minute);
10043318:	4b57      	ldr	r3, [pc, #348]	@ (10043478 <ButtonsMenuSM_Event_Handler+0x10e0>)
1004331a:	7818      	ldrb	r0, [r3, #0]
1004331c:	4b57      	ldr	r3, [pc, #348]	@ (1004347c <ButtonsMenuSM_Event_Handler+0x10e4>)
1004331e:	781b      	ldrb	r3, [r3, #0]
10043320:	b25b      	sxtb	r3, r3
10043322:	b2d9      	uxtb	r1, r3
10043324:	4b51      	ldr	r3, [pc, #324]	@ (1004346c <ButtonsMenuSM_Event_Handler+0x10d4>)
10043326:	781b      	ldrb	r3, [r3, #0]
10043328:	b25b      	sxtb	r3, r3
1004332a:	b2da      	uxtb	r2, r3
1004332c:	4b50      	ldr	r3, [pc, #320]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
1004332e:	781b      	ldrb	r3, [r3, #0]
10043330:	b25b      	sxtb	r3, r3
10043332:	b2dc      	uxtb	r4, r3
10043334:	4b4f      	ldr	r3, [pc, #316]	@ (10043474 <ButtonsMenuSM_Event_Handler+0x10dc>)
10043336:	781b      	ldrb	r3, [r3, #0]
10043338:	b25b      	sxtb	r3, r3
1004333a:	b2db      	uxtb	r3, r3
1004333c:	9300      	str	r3, [sp, #0]
1004333e:	0023      	movs	r3, r4
10043340:	f7fe fd78 	bl	10041e34 <DrawSetTime>
10043344:	e063      	b.n	1004340e <ButtonsMenuSM_Event_Handler+0x1076>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10043346:	1d3b      	adds	r3, r7, #4
10043348:	885b      	ldrh	r3, [r3, #2]
1004334a:	001a      	movs	r2, r3
1004334c:	2380      	movs	r3, #128	@ 0x80
1004334e:	015b      	lsls	r3, r3, #5
10043350:	4013      	ands	r3, r2
10043352:	d029      	beq.n	100433a8 <ButtonsMenuSM_Event_Handler+0x1010>
10043354:	1d3b      	adds	r3, r7, #4
10043356:	885b      	ldrh	r3, [r3, #2]
10043358:	001a      	movs	r2, r3
1004335a:	2310      	movs	r3, #16
1004335c:	4013      	ands	r3, r2
1004335e:	d123      	bne.n	100433a8 <ButtonsMenuSM_Event_Handler+0x1010>
					cursorpos--;
10043360:	4b45      	ldr	r3, [pc, #276]	@ (10043478 <ButtonsMenuSM_Event_Handler+0x10e0>)
10043362:	781b      	ldrb	r3, [r3, #0]
10043364:	3b01      	subs	r3, #1
10043366:	b2da      	uxtb	r2, r3
10043368:	4b43      	ldr	r3, [pc, #268]	@ (10043478 <ButtonsMenuSM_Event_Handler+0x10e0>)
1004336a:	701a      	strb	r2, [r3, #0]
					if(cursorpos == 255){
1004336c:	4b42      	ldr	r3, [pc, #264]	@ (10043478 <ButtonsMenuSM_Event_Handler+0x10e0>)
1004336e:	781b      	ldrb	r3, [r3, #0]
10043370:	2bff      	cmp	r3, #255	@ 0xff
10043372:	d102      	bne.n	1004337a <ButtonsMenuSM_Event_Handler+0xfe2>
						cursorpos = 3;
10043374:	4b40      	ldr	r3, [pc, #256]	@ (10043478 <ButtonsMenuSM_Event_Handler+0x10e0>)
10043376:	2203      	movs	r2, #3
10043378:	701a      	strb	r2, [r3, #0]
					}
					DrawSetTime(cursorpos, month, day, hour, minute);
1004337a:	4b3f      	ldr	r3, [pc, #252]	@ (10043478 <ButtonsMenuSM_Event_Handler+0x10e0>)
1004337c:	7818      	ldrb	r0, [r3, #0]
1004337e:	4b3f      	ldr	r3, [pc, #252]	@ (1004347c <ButtonsMenuSM_Event_Handler+0x10e4>)
10043380:	781b      	ldrb	r3, [r3, #0]
10043382:	b25b      	sxtb	r3, r3
10043384:	b2d9      	uxtb	r1, r3
10043386:	4b39      	ldr	r3, [pc, #228]	@ (1004346c <ButtonsMenuSM_Event_Handler+0x10d4>)
10043388:	781b      	ldrb	r3, [r3, #0]
1004338a:	b25b      	sxtb	r3, r3
1004338c:	b2da      	uxtb	r2, r3
1004338e:	4b38      	ldr	r3, [pc, #224]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
10043390:	781b      	ldrb	r3, [r3, #0]
10043392:	b25b      	sxtb	r3, r3
10043394:	b2dc      	uxtb	r4, r3
10043396:	4b37      	ldr	r3, [pc, #220]	@ (10043474 <ButtonsMenuSM_Event_Handler+0x10dc>)
10043398:	781b      	ldrb	r3, [r3, #0]
1004339a:	b25b      	sxtb	r3, r3
1004339c:	b2db      	uxtb	r3, r3
1004339e:	9300      	str	r3, [sp, #0]
100433a0:	0023      	movs	r3, r4
100433a2:	f7fe fd47 	bl	10041e34 <DrawSetTime>
100433a6:	e032      	b.n	1004340e <ButtonsMenuSM_Event_Handler+0x1076>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
100433a8:	1d3b      	adds	r3, r7, #4
100433aa:	885b      	ldrh	r3, [r3, #2]
100433ac:	001a      	movs	r2, r3
100433ae:	2380      	movs	r3, #128	@ 0x80
100433b0:	019b      	lsls	r3, r3, #6
100433b2:	4013      	ands	r3, r2
100433b4:	d100      	bne.n	100433b8 <ButtonsMenuSM_Event_Handler+0x1020>
100433b6:	e18a      	b.n	100436ce <ButtonsMenuSM_Event_Handler+0x1336>
100433b8:	1d3b      	adds	r3, r7, #4
100433ba:	885b      	ldrh	r3, [r3, #2]
100433bc:	001a      	movs	r2, r3
100433be:	2320      	movs	r3, #32
100433c0:	4013      	ands	r3, r2
100433c2:	d000      	beq.n	100433c6 <ButtonsMenuSM_Event_Handler+0x102e>
100433c4:	e183      	b.n	100436ce <ButtonsMenuSM_Event_Handler+0x1336>
					cursorpos++;
100433c6:	4b2c      	ldr	r3, [pc, #176]	@ (10043478 <ButtonsMenuSM_Event_Handler+0x10e0>)
100433c8:	781b      	ldrb	r3, [r3, #0]
100433ca:	3301      	adds	r3, #1
100433cc:	b2da      	uxtb	r2, r3
100433ce:	4b2a      	ldr	r3, [pc, #168]	@ (10043478 <ButtonsMenuSM_Event_Handler+0x10e0>)
100433d0:	701a      	strb	r2, [r3, #0]
					cursorpos %= 4;
100433d2:	4b29      	ldr	r3, [pc, #164]	@ (10043478 <ButtonsMenuSM_Event_Handler+0x10e0>)
100433d4:	781b      	ldrb	r3, [r3, #0]
100433d6:	2203      	movs	r2, #3
100433d8:	4013      	ands	r3, r2
100433da:	b2da      	uxtb	r2, r3
100433dc:	4b26      	ldr	r3, [pc, #152]	@ (10043478 <ButtonsMenuSM_Event_Handler+0x10e0>)
100433de:	701a      	strb	r2, [r3, #0]
					DrawSetTime(cursorpos, month, day , hour, minute);
100433e0:	4b25      	ldr	r3, [pc, #148]	@ (10043478 <ButtonsMenuSM_Event_Handler+0x10e0>)
100433e2:	7818      	ldrb	r0, [r3, #0]
100433e4:	4b25      	ldr	r3, [pc, #148]	@ (1004347c <ButtonsMenuSM_Event_Handler+0x10e4>)
100433e6:	781b      	ldrb	r3, [r3, #0]
100433e8:	b25b      	sxtb	r3, r3
100433ea:	b2d9      	uxtb	r1, r3
100433ec:	4b1f      	ldr	r3, [pc, #124]	@ (1004346c <ButtonsMenuSM_Event_Handler+0x10d4>)
100433ee:	781b      	ldrb	r3, [r3, #0]
100433f0:	b25b      	sxtb	r3, r3
100433f2:	b2da      	uxtb	r2, r3
100433f4:	4b1e      	ldr	r3, [pc, #120]	@ (10043470 <ButtonsMenuSM_Event_Handler+0x10d8>)
100433f6:	781b      	ldrb	r3, [r3, #0]
100433f8:	b25b      	sxtb	r3, r3
100433fa:	b2dc      	uxtb	r4, r3
100433fc:	4b1d      	ldr	r3, [pc, #116]	@ (10043474 <ButtonsMenuSM_Event_Handler+0x10dc>)
100433fe:	781b      	ldrb	r3, [r3, #0]
10043400:	b25b      	sxtb	r3, r3
10043402:	b2db      	uxtb	r3, r3
10043404:	9300      	str	r3, [sp, #0]
10043406:	0023      	movs	r3, r4
10043408:	f7fe fd14 	bl	10041e34 <DrawSetTime>
				}
			}
			break;
1004340c:	e15f      	b.n	100436ce <ButtonsMenuSM_Event_Handler+0x1336>
1004340e:	e15e      	b.n	100436ce <ButtonsMenuSM_Event_Handler+0x1336>
		case options:
			if(event.status == EVENT_ENTRY){
10043410:	1d3b      	adds	r3, r7, #4
10043412:	781b      	ldrb	r3, [r3, #0]
10043414:	b25b      	sxtb	r3, r3
10043416:	2b02      	cmp	r3, #2
10043418:	d10b      	bne.n	10043432 <ButtonsMenuSM_Event_Handler+0x109a>
				cursorpos = 0;
1004341a:	4b17      	ldr	r3, [pc, #92]	@ (10043478 <ButtonsMenuSM_Event_Handler+0x10e0>)
1004341c:	2200      	movs	r2, #0
1004341e:	701a      	strb	r2, [r3, #0]

				DrawOptions(cursorpos, FLASH_GetDutyCycle());
10043420:	4b15      	ldr	r3, [pc, #84]	@ (10043478 <ButtonsMenuSM_Event_Handler+0x10e0>)
10043422:	781c      	ldrb	r4, [r3, #0]
10043424:	f000 ffa8 	bl	10044378 <FLASH_GetDutyCycle>
10043428:	0003      	movs	r3, r0
1004342a:	0019      	movs	r1, r3
1004342c:	0020      	movs	r0, r4
1004342e:	f7fe fca7 	bl	10041d80 <DrawOptions>
			}
			if(event.status == EVENT_BUTTONS){
10043432:	1d3b      	adds	r3, r7, #4
10043434:	781b      	ldrb	r3, [r3, #0]
10043436:	b25b      	sxtb	r3, r3
10043438:	2b04      	cmp	r3, #4
1004343a:	d000      	beq.n	1004343e <ButtonsMenuSM_Event_Handler+0x10a6>
1004343c:	e149      	b.n	100436d2 <ButtonsMenuSM_Event_Handler+0x133a>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
1004343e:	1d3b      	adds	r3, r7, #4
10043440:	885b      	ldrh	r3, [r3, #2]
10043442:	001a      	movs	r2, r3
10043444:	2380      	movs	r3, #128	@ 0x80
10043446:	005b      	lsls	r3, r3, #1
10043448:	4013      	ands	r3, r2
1004344a:	d019      	beq.n	10043480 <ButtonsMenuSM_Event_Handler+0x10e8>
1004344c:	1d3b      	adds	r3, r7, #4
1004344e:	885b      	ldrh	r3, [r3, #2]
10043450:	001a      	movs	r2, r3
10043452:	2301      	movs	r3, #1
10043454:	4013      	ands	r3, r2
10043456:	d113      	bne.n	10043480 <ButtonsMenuSM_Event_Handler+0x10e8>
					//discountprintf("moving to main");
					nextstate = main;
10043458:	232e      	movs	r3, #46	@ 0x2e
1004345a:	18fb      	adds	r3, r7, r3
1004345c:	2200      	movs	r2, #0
1004345e:	701a      	strb	r2, [r3, #0]
					transition = 1;
10043460:	232f      	movs	r3, #47	@ 0x2f
10043462:	18fb      	adds	r3, r7, r3
10043464:	2201      	movs	r2, #1
10043466:	701a      	strb	r2, [r3, #0]
10043468:	e126      	b.n	100436b8 <ButtonsMenuSM_Event_Handler+0x1320>
1004346a:	46c0      	nop			@ (mov r8, r8)
1004346c:	200003b4 	.word	0x200003b4
10043470:	200003b3 	.word	0x200003b3
10043474:	200003b2 	.word	0x200003b2
10043478:	2000039e 	.word	0x2000039e
1004347c:	200003b5 	.word	0x200003b5
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10043480:	1d3b      	adds	r3, r7, #4
10043482:	885b      	ldrh	r3, [r3, #2]
10043484:	001a      	movs	r2, r3
10043486:	2380      	movs	r3, #128	@ 0x80
10043488:	009b      	lsls	r3, r3, #2
1004348a:	4013      	ands	r3, r2
1004348c:	d014      	beq.n	100434b8 <ButtonsMenuSM_Event_Handler+0x1120>
1004348e:	1d3b      	adds	r3, r7, #4
10043490:	885b      	ldrh	r3, [r3, #2]
10043492:	001a      	movs	r2, r3
10043494:	2302      	movs	r3, #2
10043496:	4013      	ands	r3, r2
10043498:	d10e      	bne.n	100434b8 <ButtonsMenuSM_Event_Handler+0x1120>
					//discountprintf("moving to main");
					if(cursorpos == 2){
1004349a:	4ba1      	ldr	r3, [pc, #644]	@ (10043720 <ButtonsMenuSM_Event_Handler+0x1388>)
1004349c:	781b      	ldrb	r3, [r3, #0]
1004349e:	2b02      	cmp	r3, #2
100434a0:	d101      	bne.n	100434a6 <ButtonsMenuSM_Event_Handler+0x110e>
						FLASH_ClearSchedule();
100434a2:	f001 f96b 	bl	1004477c <FLASH_ClearSchedule>
					}
					nextstate = main;
100434a6:	232e      	movs	r3, #46	@ 0x2e
100434a8:	18fb      	adds	r3, r7, r3
100434aa:	2200      	movs	r2, #0
100434ac:	701a      	strb	r2, [r3, #0]
					transition = 1;
100434ae:	232f      	movs	r3, #47	@ 0x2f
100434b0:	18fb      	adds	r3, r7, r3
100434b2:	2201      	movs	r2, #1
100434b4:	701a      	strb	r2, [r3, #0]
100434b6:	e0ff      	b.n	100436b8 <ButtonsMenuSM_Event_Handler+0x1320>
				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
100434b8:	1d3b      	adds	r3, r7, #4
100434ba:	885b      	ldrh	r3, [r3, #2]
100434bc:	001a      	movs	r2, r3
100434be:	2380      	movs	r3, #128	@ 0x80
100434c0:	00db      	lsls	r3, r3, #3
100434c2:	4013      	ands	r3, r2
100434c4:	d01f      	beq.n	10043506 <ButtonsMenuSM_Event_Handler+0x116e>
100434c6:	1d3b      	adds	r3, r7, #4
100434c8:	885b      	ldrh	r3, [r3, #2]
100434ca:	001a      	movs	r2, r3
100434cc:	2304      	movs	r3, #4
100434ce:	4013      	ands	r3, r2
100434d0:	d119      	bne.n	10043506 <ButtonsMenuSM_Event_Handler+0x116e>
					cursorpos++;
100434d2:	4b93      	ldr	r3, [pc, #588]	@ (10043720 <ButtonsMenuSM_Event_Handler+0x1388>)
100434d4:	781b      	ldrb	r3, [r3, #0]
100434d6:	3301      	adds	r3, #1
100434d8:	b2da      	uxtb	r2, r3
100434da:	4b91      	ldr	r3, [pc, #580]	@ (10043720 <ButtonsMenuSM_Event_Handler+0x1388>)
100434dc:	701a      	strb	r2, [r3, #0]
					cursorpos %= 3;
100434de:	4b90      	ldr	r3, [pc, #576]	@ (10043720 <ButtonsMenuSM_Event_Handler+0x1388>)
100434e0:	781b      	ldrb	r3, [r3, #0]
100434e2:	2103      	movs	r1, #3
100434e4:	0018      	movs	r0, r3
100434e6:	f7fc ff31 	bl	1004034c <__aeabi_uidivmod>
100434ea:	000b      	movs	r3, r1
100434ec:	b2da      	uxtb	r2, r3
100434ee:	4b8c      	ldr	r3, [pc, #560]	@ (10043720 <ButtonsMenuSM_Event_Handler+0x1388>)
100434f0:	701a      	strb	r2, [r3, #0]
					DrawOptions(cursorpos, FLASH_GetDutyCycle());
100434f2:	4b8b      	ldr	r3, [pc, #556]	@ (10043720 <ButtonsMenuSM_Event_Handler+0x1388>)
100434f4:	781c      	ldrb	r4, [r3, #0]
100434f6:	f000 ff3f 	bl	10044378 <FLASH_GetDutyCycle>
100434fa:	0003      	movs	r3, r0
100434fc:	0019      	movs	r1, r3
100434fe:	0020      	movs	r0, r4
10043500:	f7fe fc3e 	bl	10041d80 <DrawOptions>
10043504:	e0d8      	b.n	100436b8 <ButtonsMenuSM_Event_Handler+0x1320>
				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
10043506:	1d3b      	adds	r3, r7, #4
10043508:	885b      	ldrh	r3, [r3, #2]
1004350a:	001a      	movs	r2, r3
1004350c:	2380      	movs	r3, #128	@ 0x80
1004350e:	011b      	lsls	r3, r3, #4
10043510:	4013      	ands	r3, r2
10043512:	d01c      	beq.n	1004354e <ButtonsMenuSM_Event_Handler+0x11b6>
10043514:	1d3b      	adds	r3, r7, #4
10043516:	885b      	ldrh	r3, [r3, #2]
10043518:	001a      	movs	r2, r3
1004351a:	2308      	movs	r3, #8
1004351c:	4013      	ands	r3, r2
1004351e:	d116      	bne.n	1004354e <ButtonsMenuSM_Event_Handler+0x11b6>
					cursorpos--;
10043520:	4b7f      	ldr	r3, [pc, #508]	@ (10043720 <ButtonsMenuSM_Event_Handler+0x1388>)
10043522:	781b      	ldrb	r3, [r3, #0]
10043524:	3b01      	subs	r3, #1
10043526:	b2da      	uxtb	r2, r3
10043528:	4b7d      	ldr	r3, [pc, #500]	@ (10043720 <ButtonsMenuSM_Event_Handler+0x1388>)
1004352a:	701a      	strb	r2, [r3, #0]
					if(cursorpos == 255){
1004352c:	4b7c      	ldr	r3, [pc, #496]	@ (10043720 <ButtonsMenuSM_Event_Handler+0x1388>)
1004352e:	781b      	ldrb	r3, [r3, #0]
10043530:	2bff      	cmp	r3, #255	@ 0xff
10043532:	d102      	bne.n	1004353a <ButtonsMenuSM_Event_Handler+0x11a2>
						cursorpos = 2;
10043534:	4b7a      	ldr	r3, [pc, #488]	@ (10043720 <ButtonsMenuSM_Event_Handler+0x1388>)
10043536:	2202      	movs	r2, #2
10043538:	701a      	strb	r2, [r3, #0]
					}
					DrawOptions(cursorpos, FLASH_GetDutyCycle());
1004353a:	4b79      	ldr	r3, [pc, #484]	@ (10043720 <ButtonsMenuSM_Event_Handler+0x1388>)
1004353c:	781c      	ldrb	r4, [r3, #0]
1004353e:	f000 ff1b 	bl	10044378 <FLASH_GetDutyCycle>
10043542:	0003      	movs	r3, r0
10043544:	0019      	movs	r1, r3
10043546:	0020      	movs	r0, r4
10043548:	f7fe fc1a 	bl	10041d80 <DrawOptions>
					break;
1004354c:	e0c2      	b.n	100436d4 <ButtonsMenuSM_Event_Handler+0x133c>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
1004354e:	1d3b      	adds	r3, r7, #4
10043550:	885b      	ldrh	r3, [r3, #2]
10043552:	001a      	movs	r2, r3
10043554:	2380      	movs	r3, #128	@ 0x80
10043556:	015b      	lsls	r3, r3, #5
10043558:	4013      	ands	r3, r2
1004355a:	d053      	beq.n	10043604 <ButtonsMenuSM_Event_Handler+0x126c>
1004355c:	1d3b      	adds	r3, r7, #4
1004355e:	885b      	ldrh	r3, [r3, #2]
10043560:	001a      	movs	r2, r3
10043562:	2310      	movs	r3, #16
10043564:	4013      	ands	r3, r2
10043566:	d14d      	bne.n	10043604 <ButtonsMenuSM_Event_Handler+0x126c>
					switch(cursorpos){
10043568:	4b6d      	ldr	r3, [pc, #436]	@ (10043720 <ButtonsMenuSM_Event_Handler+0x1388>)
1004356a:	781b      	ldrb	r3, [r3, #0]
1004356c:	2b00      	cmp	r3, #0
1004356e:	d002      	beq.n	10043576 <ButtonsMenuSM_Event_Handler+0x11de>
10043570:	2b01      	cmp	r3, #1
10043572:	d036      	beq.n	100435e2 <ButtonsMenuSM_Event_Handler+0x124a>
						break;
					case 1:
						MP3_Event_Post(((Event_t){EVENT_PLAY, MP3_GetCurrentFile()-1}));
						break;
					default:
						break;
10043574:	e045      	b.n	10043602 <ButtonsMenuSM_Event_Handler+0x126a>
						int8_t dc = FLASH_GetDutyCycle()-5;
10043576:	f000 feff 	bl	10044378 <FLASH_GetDutyCycle>
1004357a:	0003      	movs	r3, r0
1004357c:	3b05      	subs	r3, #5
1004357e:	b2da      	uxtb	r2, r3
10043580:	242d      	movs	r4, #45	@ 0x2d
10043582:	193b      	adds	r3, r7, r4
10043584:	701a      	strb	r2, [r3, #0]
						if(dc < 0){
10043586:	193b      	adds	r3, r7, r4
10043588:	781b      	ldrb	r3, [r3, #0]
1004358a:	2b7f      	cmp	r3, #127	@ 0x7f
1004358c:	d915      	bls.n	100435ba <ButtonsMenuSM_Event_Handler+0x1222>
							dc = 0;
1004358e:	193b      	adds	r3, r7, r4
10043590:	2200      	movs	r2, #0
10043592:	701a      	strb	r2, [r3, #0]
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
10043594:	f000 feda 	bl	1004434c <FLASH_GetVolume>
10043598:	0003      	movs	r3, r0
1004359a:	001a      	movs	r2, r3
1004359c:	193b      	adds	r3, r7, r4
1004359e:	781b      	ldrb	r3, [r3, #0]
100435a0:	0019      	movs	r1, r3
100435a2:	0010      	movs	r0, r2
100435a4:	f000 fe90 	bl	100442c8 <FLASH_SetDCVol>
							DrawOptions(cursorpos, dc);
100435a8:	4b5d      	ldr	r3, [pc, #372]	@ (10043720 <ButtonsMenuSM_Event_Handler+0x1388>)
100435aa:	781a      	ldrb	r2, [r3, #0]
100435ac:	193b      	adds	r3, r7, r4
100435ae:	781b      	ldrb	r3, [r3, #0]
100435b0:	0019      	movs	r1, r3
100435b2:	0010      	movs	r0, r2
100435b4:	f7fe fbe4 	bl	10041d80 <DrawOptions>
						break;
100435b8:	e023      	b.n	10043602 <ButtonsMenuSM_Event_Handler+0x126a>
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
100435ba:	f000 fec7 	bl	1004434c <FLASH_GetVolume>
100435be:	0003      	movs	r3, r0
100435c0:	001a      	movs	r2, r3
100435c2:	242d      	movs	r4, #45	@ 0x2d
100435c4:	193b      	adds	r3, r7, r4
100435c6:	781b      	ldrb	r3, [r3, #0]
100435c8:	0019      	movs	r1, r3
100435ca:	0010      	movs	r0, r2
100435cc:	f000 fe7c 	bl	100442c8 <FLASH_SetDCVol>
							DrawOptions(cursorpos, dc);
100435d0:	4b53      	ldr	r3, [pc, #332]	@ (10043720 <ButtonsMenuSM_Event_Handler+0x1388>)
100435d2:	781a      	ldrb	r2, [r3, #0]
100435d4:	193b      	adds	r3, r7, r4
100435d6:	781b      	ldrb	r3, [r3, #0]
100435d8:	0019      	movs	r1, r3
100435da:	0010      	movs	r0, r2
100435dc:	f7fe fbd0 	bl	10041d80 <DrawOptions>
						break;
100435e0:	e00f      	b.n	10043602 <ButtonsMenuSM_Event_Handler+0x126a>
						MP3_Event_Post(((Event_t){EVENT_PLAY, MP3_GetCurrentFile()-1}));
100435e2:	2418      	movs	r4, #24
100435e4:	193b      	adds	r3, r7, r4
100435e6:	220b      	movs	r2, #11
100435e8:	701a      	strb	r2, [r3, #0]
100435ea:	f002 f9b7 	bl	1004595c <MP3_GetCurrentFile>
100435ee:	0003      	movs	r3, r0
100435f0:	3b01      	subs	r3, #1
100435f2:	b29a      	uxth	r2, r3
100435f4:	193b      	adds	r3, r7, r4
100435f6:	805a      	strh	r2, [r3, #2]
100435f8:	193b      	adds	r3, r7, r4
100435fa:	6818      	ldr	r0, [r3, #0]
100435fc:	f001 fe68 	bl	100452d0 <MP3_Event_Post>
						break;
10043600:	46c0      	nop			@ (mov r8, r8)
					switch(cursorpos){
10043602:	e059      	b.n	100436b8 <ButtonsMenuSM_Event_Handler+0x1320>
					}
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
10043604:	1d3b      	adds	r3, r7, #4
10043606:	885b      	ldrh	r3, [r3, #2]
10043608:	001a      	movs	r2, r3
1004360a:	2380      	movs	r3, #128	@ 0x80
1004360c:	019b      	lsls	r3, r3, #6
1004360e:	4013      	ands	r3, r2
10043610:	d05f      	beq.n	100436d2 <ButtonsMenuSM_Event_Handler+0x133a>
10043612:	1d3b      	adds	r3, r7, #4
10043614:	885b      	ldrh	r3, [r3, #2]
10043616:	001a      	movs	r2, r3
10043618:	2320      	movs	r3, #32
1004361a:	4013      	ands	r3, r2
1004361c:	d159      	bne.n	100436d2 <ButtonsMenuSM_Event_Handler+0x133a>
					switch(cursorpos){
1004361e:	4b40      	ldr	r3, [pc, #256]	@ (10043720 <ButtonsMenuSM_Event_Handler+0x1388>)
10043620:	781b      	ldrb	r3, [r3, #0]
10043622:	2b00      	cmp	r3, #0
10043624:	d002      	beq.n	1004362c <ButtonsMenuSM_Event_Handler+0x1294>
10043626:	2b01      	cmp	r3, #1
10043628:	d036      	beq.n	10043698 <ButtonsMenuSM_Event_Handler+0x1300>
						break;
					case 1:
						MP3_Event_Post(((Event_t){EVENT_PLAY, MP3_GetCurrentFile()+1}));
						break;
					default:
						break;
1004362a:	e045      	b.n	100436b8 <ButtonsMenuSM_Event_Handler+0x1320>
						uint8_t dc = FLASH_GetDutyCycle()+5;
1004362c:	f000 fea4 	bl	10044378 <FLASH_GetDutyCycle>
10043630:	0003      	movs	r3, r0
10043632:	001a      	movs	r2, r3
10043634:	242c      	movs	r4, #44	@ 0x2c
10043636:	193b      	adds	r3, r7, r4
10043638:	3205      	adds	r2, #5
1004363a:	701a      	strb	r2, [r3, #0]
						if(dc > 100){
1004363c:	193b      	adds	r3, r7, r4
1004363e:	781b      	ldrb	r3, [r3, #0]
10043640:	2b64      	cmp	r3, #100	@ 0x64
10043642:	d915      	bls.n	10043670 <ButtonsMenuSM_Event_Handler+0x12d8>
							dc = 100;
10043644:	193b      	adds	r3, r7, r4
10043646:	2264      	movs	r2, #100	@ 0x64
10043648:	701a      	strb	r2, [r3, #0]
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
1004364a:	f000 fe7f 	bl	1004434c <FLASH_GetVolume>
1004364e:	0003      	movs	r3, r0
10043650:	001a      	movs	r2, r3
10043652:	193b      	adds	r3, r7, r4
10043654:	781b      	ldrb	r3, [r3, #0]
10043656:	0019      	movs	r1, r3
10043658:	0010      	movs	r0, r2
1004365a:	f000 fe35 	bl	100442c8 <FLASH_SetDCVol>
							DrawOptions(cursorpos, dc);
1004365e:	4b30      	ldr	r3, [pc, #192]	@ (10043720 <ButtonsMenuSM_Event_Handler+0x1388>)
10043660:	781a      	ldrb	r2, [r3, #0]
10043662:	193b      	adds	r3, r7, r4
10043664:	781b      	ldrb	r3, [r3, #0]
10043666:	0019      	movs	r1, r3
10043668:	0010      	movs	r0, r2
1004366a:	f7fe fb89 	bl	10041d80 <DrawOptions>
						break;
1004366e:	e023      	b.n	100436b8 <ButtonsMenuSM_Event_Handler+0x1320>
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
10043670:	f000 fe6c 	bl	1004434c <FLASH_GetVolume>
10043674:	0003      	movs	r3, r0
10043676:	001a      	movs	r2, r3
10043678:	242c      	movs	r4, #44	@ 0x2c
1004367a:	193b      	adds	r3, r7, r4
1004367c:	781b      	ldrb	r3, [r3, #0]
1004367e:	0019      	movs	r1, r3
10043680:	0010      	movs	r0, r2
10043682:	f000 fe21 	bl	100442c8 <FLASH_SetDCVol>
							DrawOptions(cursorpos, dc);
10043686:	4b26      	ldr	r3, [pc, #152]	@ (10043720 <ButtonsMenuSM_Event_Handler+0x1388>)
10043688:	781a      	ldrb	r2, [r3, #0]
1004368a:	193b      	adds	r3, r7, r4
1004368c:	781b      	ldrb	r3, [r3, #0]
1004368e:	0019      	movs	r1, r3
10043690:	0010      	movs	r0, r2
10043692:	f7fe fb75 	bl	10041d80 <DrawOptions>
						break;
10043696:	e00f      	b.n	100436b8 <ButtonsMenuSM_Event_Handler+0x1320>
						MP3_Event_Post(((Event_t){EVENT_PLAY, MP3_GetCurrentFile()+1}));
10043698:	2414      	movs	r4, #20
1004369a:	193b      	adds	r3, r7, r4
1004369c:	220b      	movs	r2, #11
1004369e:	701a      	strb	r2, [r3, #0]
100436a0:	f002 f95c 	bl	1004595c <MP3_GetCurrentFile>
100436a4:	0003      	movs	r3, r0
100436a6:	3301      	adds	r3, #1
100436a8:	b29a      	uxth	r2, r3
100436aa:	193b      	adds	r3, r7, r4
100436ac:	805a      	strh	r2, [r3, #2]
100436ae:	193b      	adds	r3, r7, r4
100436b0:	6818      	ldr	r0, [r3, #0]
100436b2:	f001 fe0d 	bl	100452d0 <MP3_Event_Post>
						break;
100436b6:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			break;
100436b8:	e00b      	b.n	100436d2 <ButtonsMenuSM_Event_Handler+0x133a>
		default:
			break;
100436ba:	46c0      	nop			@ (mov r8, r8)
100436bc:	e00a      	b.n	100436d4 <ButtonsMenuSM_Event_Handler+0x133c>
			break;
100436be:	46c0      	nop			@ (mov r8, r8)
100436c0:	e008      	b.n	100436d4 <ButtonsMenuSM_Event_Handler+0x133c>
			break;
100436c2:	46c0      	nop			@ (mov r8, r8)
100436c4:	e006      	b.n	100436d4 <ButtonsMenuSM_Event_Handler+0x133c>
			break;
100436c6:	46c0      	nop			@ (mov r8, r8)
100436c8:	e004      	b.n	100436d4 <ButtonsMenuSM_Event_Handler+0x133c>
			break;
100436ca:	46c0      	nop			@ (mov r8, r8)
100436cc:	e002      	b.n	100436d4 <ButtonsMenuSM_Event_Handler+0x133c>
			break;
100436ce:	46c0      	nop			@ (mov r8, r8)
100436d0:	e000      	b.n	100436d4 <ButtonsMenuSM_Event_Handler+0x133c>
			break;
100436d2:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if(transition){
100436d4:	232f      	movs	r3, #47	@ 0x2f
100436d6:	18fb      	adds	r3, r7, r3
100436d8:	781b      	ldrb	r3, [r3, #0]
100436da:	2b00      	cmp	r3, #0
100436dc:	d01a      	beq.n	10043714 <ButtonsMenuSM_Event_Handler+0x137c>
		ButtonsMenuSM_Event_Handler((Event_t){EVENT_EXIT});
100436de:	2110      	movs	r1, #16
100436e0:	187b      	adds	r3, r7, r1
100436e2:	2200      	movs	r2, #0
100436e4:	601a      	str	r2, [r3, #0]
100436e6:	187b      	adds	r3, r7, r1
100436e8:	2203      	movs	r2, #3
100436ea:	701a      	strb	r2, [r3, #0]
100436ec:	187b      	adds	r3, r7, r1
100436ee:	6818      	ldr	r0, [r3, #0]
100436f0:	f7fe fe52 	bl	10042398 <ButtonsMenuSM_Event_Handler>
		BMState = nextstate;
100436f4:	4b0b      	ldr	r3, [pc, #44]	@ (10043724 <ButtonsMenuSM_Event_Handler+0x138c>)
100436f6:	222e      	movs	r2, #46	@ 0x2e
100436f8:	18ba      	adds	r2, r7, r2
100436fa:	7812      	ldrb	r2, [r2, #0]
100436fc:	701a      	strb	r2, [r3, #0]
		ButtonsMenuSM_Event_Handler((Event_t){EVENT_ENTRY});
100436fe:	210c      	movs	r1, #12
10043700:	187b      	adds	r3, r7, r1
10043702:	2200      	movs	r2, #0
10043704:	601a      	str	r2, [r3, #0]
10043706:	187b      	adds	r3, r7, r1
10043708:	2202      	movs	r2, #2
1004370a:	701a      	strb	r2, [r3, #0]
1004370c:	187b      	adds	r3, r7, r1
1004370e:	6818      	ldr	r0, [r3, #0]
10043710:	f7fe fe42 	bl	10042398 <ButtonsMenuSM_Event_Handler>
	}
    return 1;
10043714:	2301      	movs	r3, #1
}
10043716:	0018      	movs	r0, r3
10043718:	46bd      	mov	sp, r7
1004371a:	b00c      	add	sp, #48	@ 0x30
1004371c:	bdb0      	pop	{r4, r5, r7, pc}
1004371e:	46c0      	nop			@ (mov r8, r8)
10043720:	2000039e 	.word	0x2000039e
10043724:	2000039c 	.word	0x2000039c

10043728 <COMM_Event_Init>:
 * @Function: EVENT_COMM_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t COMM_Event_Init(FIFO Queue){
10043728:	b580      	push	{r7, lr}
1004372a:	b084      	sub	sp, #16
1004372c:	af00      	add	r7, sp, #0
1004372e:	6078      	str	r0, [r7, #4]
	commSM = init;
10043730:	4b0c      	ldr	r3, [pc, #48]	@ (10043764 <COMM_Event_Init+0x3c>)
10043732:	2200      	movs	r2, #0
10043734:	701a      	strb	r2, [r3, #0]
	COMMqueue = Queue;
10043736:	4b0c      	ldr	r3, [pc, #48]	@ (10043768 <COMM_Event_Init+0x40>)
10043738:	687a      	ldr	r2, [r7, #4]
1004373a:	601a      	str	r2, [r3, #0]
	UARTs_Init();
1004373c:	f002 ffae 	bl	1004669c <UARTs_Init>
	FLASH_Init();
10043740:	f000 fd46 	bl	100441d0 <FLASH_Init>
	COMM_Event_Post((Event_t){EVENT_INIT, 0});
10043744:	210c      	movs	r1, #12
10043746:	187b      	adds	r3, r7, r1
10043748:	2201      	movs	r2, #1
1004374a:	701a      	strb	r2, [r3, #0]
1004374c:	187b      	adds	r3, r7, r1
1004374e:	2200      	movs	r2, #0
10043750:	805a      	strh	r2, [r3, #2]
10043752:	187b      	adds	r3, r7, r1
10043754:	6818      	ldr	r0, [r3, #0]
10043756:	f000 f809 	bl	1004376c <COMM_Event_Post>
	return INIT_OK;
1004375a:	2301      	movs	r3, #1
}
1004375c:	0018      	movs	r0, r3
1004375e:	46bd      	mov	sp, r7
10043760:	b004      	add	sp, #16
10043762:	bd80      	pop	{r7, pc}
10043764:	200003b6 	.word	0x200003b6
10043768:	200003b8 	.word	0x200003b8

1004376c <COMM_Event_Post>:

void COMM_Event_Post(Event_t event){
1004376c:	b580      	push	{r7, lr}
1004376e:	b082      	sub	sp, #8
10043770:	af00      	add	r7, sp, #0
10043772:	1d3b      	adds	r3, r7, #4
10043774:	6018      	str	r0, [r3, #0]
	FIFO_Enqueue(COMMqueue, event);
10043776:	4b05      	ldr	r3, [pc, #20]	@ (1004378c <COMM_Event_Post+0x20>)
10043778:	681a      	ldr	r2, [r3, #0]
1004377a:	1d3b      	adds	r3, r7, #4
1004377c:	6819      	ldr	r1, [r3, #0]
1004377e:	0010      	movs	r0, r2
10043780:	f000 fc91 	bl	100440a6 <FIFO_Enqueue>
}
10043784:	46c0      	nop			@ (mov r8, r8)
10043786:	46bd      	mov	sp, r7
10043788:	b002      	add	sp, #8
1004378a:	bd80      	pop	{r7, pc}
1004378c:	200003b8 	.word	0x200003b8

10043790 <COMM_Event_Updater>:
 * @Function: EVENT_COMM_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the 
 * @param: none
 * @return: An event 
 */
Event_t COMM_Event_Updater(void){
10043790:	b5f0      	push	{r4, r5, r6, r7, lr}
10043792:	b087      	sub	sp, #28
10043794:	af00      	add	r7, sp, #0
	uint8_t event = 0;
10043796:	2317      	movs	r3, #23
10043798:	18fb      	adds	r3, r7, r3
1004379a:	2200      	movs	r2, #0
1004379c:	701a      	strb	r2, [r3, #0]
    Event_t out = (Event_t){EVENT_NONE, 0};
1004379e:	250c      	movs	r5, #12
100437a0:	197b      	adds	r3, r7, r5
100437a2:	2200      	movs	r2, #0
100437a4:	701a      	strb	r2, [r3, #0]
100437a6:	197b      	adds	r3, r7, r5
100437a8:	2200      	movs	r2, #0
100437aa:	805a      	strh	r2, [r3, #2]
    char input = USART_ReadRx();
100437ac:	2616      	movs	r6, #22
100437ae:	19bc      	adds	r4, r7, r6
100437b0:	f003 f86e 	bl	10046890 <USART_ReadRx>
100437b4:	0003      	movs	r3, r0
100437b6:	7023      	strb	r3, [r4, #0]
    if(input != UARTFAILED){
100437b8:	0031      	movs	r1, r6
100437ba:	187b      	adds	r3, r7, r1
100437bc:	781b      	ldrb	r3, [r3, #0]
100437be:	2b25      	cmp	r3, #37	@ 0x25
100437c0:	d00b      	beq.n	100437da <COMM_Event_Updater+0x4a>
    	event = 1;
100437c2:	2317      	movs	r3, #23
100437c4:	18fb      	adds	r3, r7, r3
100437c6:	2201      	movs	r2, #1
100437c8:	701a      	strb	r2, [r3, #0]
    	out.status = EVENT_USART;
100437ca:	197b      	adds	r3, r7, r5
100437cc:	2206      	movs	r2, #6
100437ce:	701a      	strb	r2, [r3, #0]
    	out.data = (uint16_t)input;
100437d0:	187b      	adds	r3, r7, r1
100437d2:	781b      	ldrb	r3, [r3, #0]
100437d4:	b29a      	uxth	r2, r3
100437d6:	197b      	adds	r3, r7, r5
100437d8:	805a      	strh	r2, [r3, #2]
    }
    if(sendinglogs == 1){
100437da:	4b1f      	ldr	r3, [pc, #124]	@ (10043858 <COMM_Event_Updater+0xc8>)
100437dc:	781b      	ldrb	r3, [r3, #0]
100437de:	2b01      	cmp	r3, #1
100437e0:	d115      	bne.n	1004380e <COMM_Event_Updater+0x7e>
    	if(USART_TxEmpty() || BLUETOOTH_BufferEmpty() == 1){
100437e2:	f003 f870 	bl	100468c6 <USART_TxEmpty>
100437e6:	1e03      	subs	r3, r0, #0
100437e8:	d104      	bne.n	100437f4 <COMM_Event_Updater+0x64>
100437ea:	f7fe f9a7 	bl	10041b3c <BLUETOOTH_BufferEmpty>
100437ee:	0003      	movs	r3, r0
100437f0:	2b01      	cmp	r3, #1
100437f2:	d10c      	bne.n	1004380e <COMM_Event_Updater+0x7e>
    		FIFO_Enqueue(COMMqueue, (Event_t){EVENT_USART_READY, 0});
100437f4:	4b19      	ldr	r3, [pc, #100]	@ (1004385c <COMM_Event_Updater+0xcc>)
100437f6:	681a      	ldr	r2, [r3, #0]
100437f8:	1d3b      	adds	r3, r7, #4
100437fa:	2107      	movs	r1, #7
100437fc:	7019      	strb	r1, [r3, #0]
100437fe:	1d3b      	adds	r3, r7, #4
10043800:	2100      	movs	r1, #0
10043802:	8059      	strh	r1, [r3, #2]
10043804:	1d3b      	adds	r3, r7, #4
10043806:	6819      	ldr	r1, [r3, #0]
10043808:	0010      	movs	r0, r2
1004380a:	f000 fc4c 	bl	100440a6 <FIFO_Enqueue>
    	}
    }
	if(event){FIFO_Enqueue(COMMqueue, out);}
1004380e:	2317      	movs	r3, #23
10043810:	18fb      	adds	r3, r7, r3
10043812:	781b      	ldrb	r3, [r3, #0]
10043814:	2b00      	cmp	r3, #0
10043816:	d007      	beq.n	10043828 <COMM_Event_Updater+0x98>
10043818:	4b10      	ldr	r3, [pc, #64]	@ (1004385c <COMM_Event_Updater+0xcc>)
1004381a:	681a      	ldr	r2, [r3, #0]
1004381c:	230c      	movs	r3, #12
1004381e:	18fb      	adds	r3, r7, r3
10043820:	6819      	ldr	r1, [r3, #0]
10043822:	0010      	movs	r0, r2
10043824:	f000 fc3f 	bl	100440a6 <FIFO_Enqueue>
    return out;
10043828:	2110      	movs	r1, #16
1004382a:	187b      	adds	r3, r7, r1
1004382c:	220c      	movs	r2, #12
1004382e:	18ba      	adds	r2, r7, r2
10043830:	6812      	ldr	r2, [r2, #0]
10043832:	601a      	str	r2, [r3, #0]
10043834:	187a      	adds	r2, r7, r1
10043836:	2300      	movs	r3, #0
10043838:	8811      	ldrh	r1, [r2, #0]
1004383a:	0409      	lsls	r1, r1, #16
1004383c:	0c09      	lsrs	r1, r1, #16
1004383e:	0c1b      	lsrs	r3, r3, #16
10043840:	041b      	lsls	r3, r3, #16
10043842:	430b      	orrs	r3, r1
10043844:	8852      	ldrh	r2, [r2, #2]
10043846:	0412      	lsls	r2, r2, #16
10043848:	041b      	lsls	r3, r3, #16
1004384a:	0c1b      	lsrs	r3, r3, #16
1004384c:	4313      	orrs	r3, r2
}
1004384e:	0018      	movs	r0, r3
10043850:	46bd      	mov	sp, r7
10043852:	b007      	add	sp, #28
10043854:	bdf0      	pop	{r4, r5, r6, r7, pc}
10043856:	46c0      	nop			@ (mov r8, r8)
10043858:	200003bc 	.word	0x200003bc
1004385c:	200003b8 	.word	0x200003b8

10043860 <COMM_Event_Handler>:
 * @Function: EVENT_COMM_Event_Handler
 * @Brief: 
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t COMM_Event_Handler(Event_t event){
10043860:	b5b0      	push	{r4, r5, r7, lr}
10043862:	b08e      	sub	sp, #56	@ 0x38
10043864:	af00      	add	r7, sp, #0
10043866:	1d3b      	adds	r3, r7, #4
10043868:	6018      	str	r0, [r3, #0]
	bool transition = 0;
1004386a:	2337      	movs	r3, #55	@ 0x37
1004386c:	18fb      	adds	r3, r7, r3
1004386e:	2200      	movs	r2, #0
10043870:	701a      	strb	r2, [r3, #0]

	static uint8_t folder;
	COMMSTATES_t next = commSM;
10043872:	2336      	movs	r3, #54	@ 0x36
10043874:	18fb      	adds	r3, r7, r3
10043876:	4adc      	ldr	r2, [pc, #880]	@ (10043be8 <COMM_Event_Handler+0x388>)
10043878:	7812      	ldrb	r2, [r2, #0]
1004387a:	701a      	strb	r2, [r3, #0]
	//char text[50];
	switch(commSM){
1004387c:	4bda      	ldr	r3, [pc, #872]	@ (10043be8 <COMM_Event_Handler+0x388>)
1004387e:	781b      	ldrb	r3, [r3, #0]
10043880:	2b14      	cmp	r3, #20
10043882:	d900      	bls.n	10043886 <COMM_Event_Handler+0x26>
10043884:	e355      	b.n	10043f32 <COMM_Event_Handler+0x6d2>
10043886:	009a      	lsls	r2, r3, #2
10043888:	4bd8      	ldr	r3, [pc, #864]	@ (10043bec <COMM_Event_Handler+0x38c>)
1004388a:	18d3      	adds	r3, r2, r3
1004388c:	681b      	ldr	r3, [r3, #0]
1004388e:	469f      	mov	pc, r3
	case init:
		if(event.status == EVENT_INIT){
10043890:	1d3b      	adds	r3, r7, #4
10043892:	781b      	ldrb	r3, [r3, #0]
10043894:	b25b      	sxtb	r3, r3
10043896:	2b01      	cmp	r3, #1
10043898:	d000      	beq.n	1004389c <COMM_Event_Handler+0x3c>
1004389a:	e34c      	b.n	10043f36 <COMM_Event_Handler+0x6d6>
			next = idle;
1004389c:	2336      	movs	r3, #54	@ 0x36
1004389e:	18fb      	adds	r3, r7, r3
100438a0:	2201      	movs	r2, #1
100438a2:	701a      	strb	r2, [r3, #0]
			transition = true;
100438a4:	2337      	movs	r3, #55	@ 0x37
100438a6:	18fb      	adds	r3, r7, r3
100438a8:	2201      	movs	r2, #1
100438aa:	701a      	strb	r2, [r3, #0]
		}
		break;
100438ac:	e343      	b.n	10043f36 <COMM_Event_Handler+0x6d6>
	case idle:
		if(event.status == EVENT_ENTRY){
100438ae:	1d3b      	adds	r3, r7, #4
100438b0:	781b      	ldrb	r3, [r3, #0]
100438b2:	b25b      	sxtb	r3, r3
100438b4:	2b02      	cmp	r3, #2
100438b6:	d102      	bne.n	100438be <COMM_Event_Handler+0x5e>
			sendinglogs = 0;
100438b8:	4bcd      	ldr	r3, [pc, #820]	@ (10043bf0 <COMM_Event_Handler+0x390>)
100438ba:	2200      	movs	r2, #0
100438bc:	701a      	strb	r2, [r3, #0]
		}
		if(event.status == EVENT_USART){
100438be:	1d3b      	adds	r3, r7, #4
100438c0:	781b      	ldrb	r3, [r3, #0]
100438c2:	b25b      	sxtb	r3, r3
100438c4:	2b06      	cmp	r3, #6
100438c6:	d000      	beq.n	100438ca <COMM_Event_Handler+0x6a>
100438c8:	e337      	b.n	10043f3a <COMM_Event_Handler+0x6da>
			switch (event.data){
100438ca:	1d3b      	adds	r3, r7, #4
100438cc:	885b      	ldrh	r3, [r3, #2]
100438ce:	2b0f      	cmp	r3, #15
100438d0:	d83a      	bhi.n	10043948 <COMM_Event_Handler+0xe8>
100438d2:	009a      	lsls	r2, r3, #2
100438d4:	4bc7      	ldr	r3, [pc, #796]	@ (10043bf4 <COMM_Event_Handler+0x394>)
100438d6:	18d3      	adds	r3, r2, r3
100438d8:	681b      	ldr	r3, [r3, #0]
100438da:	469f      	mov	pc, r3
			case VOLUMECONTROL:
				//discountprintf("received volume control");
				next = volumecontrol;
100438dc:	2336      	movs	r3, #54	@ 0x36
100438de:	18fb      	adds	r3, r7, r3
100438e0:	2202      	movs	r2, #2
100438e2:	701a      	strb	r2, [r3, #0]
				transition = true;
100438e4:	2337      	movs	r3, #55	@ 0x37
100438e6:	18fb      	adds	r3, r7, r3
100438e8:	2201      	movs	r2, #1
100438ea:	701a      	strb	r2, [r3, #0]
				break;
100438ec:	e02d      	b.n	1004394a <COMM_Event_Handler+0xea>
			case FOLDERCONTROL:
				//discountprintf("received folder control");
				next = foldercontrol;
100438ee:	2336      	movs	r3, #54	@ 0x36
100438f0:	18fb      	adds	r3, r7, r3
100438f2:	2203      	movs	r2, #3
100438f4:	701a      	strb	r2, [r3, #0]
				transition = true;
100438f6:	2337      	movs	r3, #55	@ 0x37
100438f8:	18fb      	adds	r3, r7, r3
100438fa:	2201      	movs	r2, #1
100438fc:	701a      	strb	r2, [r3, #0]
				break;
100438fe:	e024      	b.n	1004394a <COMM_Event_Handler+0xea>
			case LOGSREQUEST:
				//discountprintf("received logs request");
				next = logsrequest;
10043900:	2336      	movs	r3, #54	@ 0x36
10043902:	18fb      	adds	r3, r7, r3
10043904:	2205      	movs	r2, #5
10043906:	701a      	strb	r2, [r3, #0]
				transition = true;
10043908:	2337      	movs	r3, #55	@ 0x37
1004390a:	18fb      	adds	r3, r7, r3
1004390c:	2201      	movs	r2, #1
1004390e:	701a      	strb	r2, [r3, #0]
				break;
10043910:	e01b      	b.n	1004394a <COMM_Event_Handler+0xea>
			case DCCONTROL:
				//discountprintf("received DC control");
				next = dccontrol;
10043912:	2336      	movs	r3, #54	@ 0x36
10043914:	18fb      	adds	r3, r7, r3
10043916:	2207      	movs	r2, #7
10043918:	701a      	strb	r2, [r3, #0]
				transition = true;
1004391a:	2337      	movs	r3, #55	@ 0x37
1004391c:	18fb      	adds	r3, r7, r3
1004391e:	2201      	movs	r2, #1
10043920:	701a      	strb	r2, [r3, #0]
				break;
10043922:	e012      	b.n	1004394a <COMM_Event_Handler+0xea>
			case SCHEDULECONTROL:
				//discountprintf("received schedule control");
				next = schedulecontrol;
10043924:	2336      	movs	r3, #54	@ 0x36
10043926:	18fb      	adds	r3, r7, r3
10043928:	2208      	movs	r2, #8
1004392a:	701a      	strb	r2, [r3, #0]
				transition = true;
1004392c:	2337      	movs	r3, #55	@ 0x37
1004392e:	18fb      	adds	r3, r7, r3
10043930:	2201      	movs	r2, #1
10043932:	701a      	strb	r2, [r3, #0]
				break;
10043934:	e009      	b.n	1004394a <COMM_Event_Handler+0xea>
			case SETTIME:
				//discountprintf("received set time control");
				next = timeminute;
10043936:	2336      	movs	r3, #54	@ 0x36
10043938:	18fb      	adds	r3, r7, r3
1004393a:	2211      	movs	r2, #17
1004393c:	701a      	strb	r2, [r3, #0]
				transition = true;
1004393e:	2337      	movs	r3, #55	@ 0x37
10043940:	18fb      	adds	r3, r7, r3
10043942:	2201      	movs	r2, #1
10043944:	701a      	strb	r2, [r3, #0]
				break;
10043946:	e000      	b.n	1004394a <COMM_Event_Handler+0xea>
			default:
				break;
10043948:	46c0      	nop			@ (mov r8, r8)
			}
		}
		break;
1004394a:	e2f6      	b.n	10043f3a <COMM_Event_Handler+0x6da>
	case volumecontrol:
		if(event.status == EVENT_USART){
1004394c:	1d3b      	adds	r3, r7, #4
1004394e:	781b      	ldrb	r3, [r3, #0]
10043950:	b25b      	sxtb	r3, r3
10043952:	2b06      	cmp	r3, #6
10043954:	d000      	beq.n	10043958 <COMM_Event_Handler+0xf8>
10043956:	e2f2      	b.n	10043f3e <COMM_Event_Handler+0x6de>
			if(FLASH_SetDCVol((uint8_t)event.data, FLASH_GetDutyCycle())==0){
10043958:	1d3b      	adds	r3, r7, #4
1004395a:	885b      	ldrh	r3, [r3, #2]
1004395c:	b2dc      	uxtb	r4, r3
1004395e:	f000 fd0b 	bl	10044378 <FLASH_GetDutyCycle>
10043962:	0003      	movs	r3, r0
10043964:	0019      	movs	r1, r3
10043966:	0020      	movs	r0, r4
10043968:	f000 fcae 	bl	100442c8 <FLASH_SetDCVol>
1004396c:	1e03      	subs	r3, r0, #0
1004396e:	d103      	bne.n	10043978 <COMM_Event_Handler+0x118>
				discountprintf("failed to set volume");
10043970:	4ba1      	ldr	r3, [pc, #644]	@ (10043bf8 <COMM_Event_Handler+0x398>)
10043972:	0018      	movs	r0, r3
10043974:	f000 fb34 	bl	10043fe0 <discountprintf>
			}
			//sprintf(text, "Storing volume %d", FLASH_GetVolume());
			//discountprintf(text);
			next = idle;
10043978:	2336      	movs	r3, #54	@ 0x36
1004397a:	18fb      	adds	r3, r7, r3
1004397c:	2201      	movs	r2, #1
1004397e:	701a      	strb	r2, [r3, #0]
			transition = true;
10043980:	2337      	movs	r3, #55	@ 0x37
10043982:	18fb      	adds	r3, r7, r3
10043984:	2201      	movs	r2, #1
10043986:	701a      	strb	r2, [r3, #0]
		}
		break;
10043988:	e2d9      	b.n	10043f3e <COMM_Event_Handler+0x6de>
	case foldercontrol:
		if(event.status == EVENT_USART){
1004398a:	1d3b      	adds	r3, r7, #4
1004398c:	781b      	ldrb	r3, [r3, #0]
1004398e:	b25b      	sxtb	r3, r3
10043990:	2b06      	cmp	r3, #6
10043992:	d000      	beq.n	10043996 <COMM_Event_Handler+0x136>
10043994:	e2d5      	b.n	10043f42 <COMM_Event_Handler+0x6e2>
			folder = event.data;
10043996:	1d3b      	adds	r3, r7, #4
10043998:	885b      	ldrh	r3, [r3, #2]
1004399a:	b2da      	uxtb	r2, r3
1004399c:	4b97      	ldr	r3, [pc, #604]	@ (10043bfc <COMM_Event_Handler+0x39c>)
1004399e:	701a      	strb	r2, [r3, #0]
			//discountprintf("Storing folder selector");
			next = folderselected;
100439a0:	2336      	movs	r3, #54	@ 0x36
100439a2:	18fb      	adds	r3, r7, r3
100439a4:	2204      	movs	r2, #4
100439a6:	701a      	strb	r2, [r3, #0]
			transition = true;
100439a8:	2337      	movs	r3, #55	@ 0x37
100439aa:	18fb      	adds	r3, r7, r3
100439ac:	2201      	movs	r2, #1
100439ae:	701a      	strb	r2, [r3, #0]
		}
		break;
100439b0:	e2c7      	b.n	10043f42 <COMM_Event_Handler+0x6e2>
	case folderselected:
		if(event.status == EVENT_USART){
100439b2:	1d3b      	adds	r3, r7, #4
100439b4:	781b      	ldrb	r3, [r3, #0]
100439b6:	b25b      	sxtb	r3, r3
100439b8:	2b06      	cmp	r3, #6
100439ba:	d000      	beq.n	100439be <COMM_Event_Handler+0x15e>
100439bc:	e2c3      	b.n	10043f46 <COMM_Event_Handler+0x6e6>
			//post to mp3 controller with the new data
			Event_t play = (Event_t){EVENT_PLAY, (folder<<8) + (event.data)};
100439be:	2128      	movs	r1, #40	@ 0x28
100439c0:	187b      	adds	r3, r7, r1
100439c2:	220b      	movs	r2, #11
100439c4:	701a      	strb	r2, [r3, #0]
100439c6:	4b8d      	ldr	r3, [pc, #564]	@ (10043bfc <COMM_Event_Handler+0x39c>)
100439c8:	781b      	ldrb	r3, [r3, #0]
100439ca:	021b      	lsls	r3, r3, #8
100439cc:	b29a      	uxth	r2, r3
100439ce:	1d3b      	adds	r3, r7, #4
100439d0:	885b      	ldrh	r3, [r3, #2]
100439d2:	18d3      	adds	r3, r2, r3
100439d4:	b29a      	uxth	r2, r3
100439d6:	187b      	adds	r3, r7, r1
100439d8:	805a      	strh	r2, [r3, #2]
			MP3_Event_Post(play);
100439da:	187b      	adds	r3, r7, r1
100439dc:	6818      	ldr	r0, [r3, #0]
100439de:	f001 fc77 	bl	100452d0 <MP3_Event_Post>
			//discountprintf("Sending track selector");
			next = idle;
100439e2:	2336      	movs	r3, #54	@ 0x36
100439e4:	18fb      	adds	r3, r7, r3
100439e6:	2201      	movs	r2, #1
100439e8:	701a      	strb	r2, [r3, #0]
			transition = true;
100439ea:	2337      	movs	r3, #55	@ 0x37
100439ec:	18fb      	adds	r3, r7, r3
100439ee:	2201      	movs	r2, #1
100439f0:	701a      	strb	r2, [r3, #0]
		}
		break;
100439f2:	e2a8      	b.n	10043f46 <COMM_Event_Handler+0x6e6>
	case logsrequest:
		static uint32_t sent;
		if(event.status == EVENT_ENTRY){
100439f4:	1d3b      	adds	r3, r7, #4
100439f6:	781b      	ldrb	r3, [r3, #0]
100439f8:	b25b      	sxtb	r3, r3
100439fa:	2b02      	cmp	r3, #2
100439fc:	d000      	beq.n	10043a00 <COMM_Event_Handler+0x1a0>
100439fe:	e2a4      	b.n	10043f4a <COMM_Event_Handler+0x6ea>
			sendinglogs = 1;
10043a00:	4b7b      	ldr	r3, [pc, #492]	@ (10043bf0 <COMM_Event_Handler+0x390>)
10043a02:	2201      	movs	r2, #1
10043a04:	701a      	strb	r2, [r3, #0]
			sent = 0;
10043a06:	4b7e      	ldr	r3, [pc, #504]	@ (10043c00 <COMM_Event_Handler+0x3a0>)
10043a08:	2200      	movs	r2, #0
10043a0a:	601a      	str	r2, [r3, #0]
			uint16_t size = FLASH_GetLogsSize();
10043a0c:	252c      	movs	r5, #44	@ 0x2c
10043a0e:	197c      	adds	r4, r7, r5
10043a10:	f000 fd2e 	bl	10044470 <FLASH_GetLogsSize>
10043a14:	0003      	movs	r3, r0
10043a16:	8023      	strh	r3, [r4, #0]
			//uint16_t size = 32;
			USART_WriteTx((uint8_t)(size>>8));
10043a18:	002c      	movs	r4, r5
10043a1a:	193b      	adds	r3, r7, r4
10043a1c:	881b      	ldrh	r3, [r3, #0]
10043a1e:	0a1b      	lsrs	r3, r3, #8
10043a20:	b29b      	uxth	r3, r3
10043a22:	b2db      	uxtb	r3, r3
10043a24:	0018      	movs	r0, r3
10043a26:	f002 ff39 	bl	1004689c <USART_WriteTx>
			USART_WriteTx((uint8_t)(size));
10043a2a:	193b      	adds	r3, r7, r4
10043a2c:	881b      	ldrh	r3, [r3, #0]
10043a2e:	b2db      	uxtb	r3, r3
10043a30:	0018      	movs	r0, r3
10043a32:	f002 ff33 	bl	1004689c <USART_WriteTx>
			next = logsdata;
10043a36:	2336      	movs	r3, #54	@ 0x36
10043a38:	18fb      	adds	r3, r7, r3
10043a3a:	2206      	movs	r2, #6
10043a3c:	701a      	strb	r2, [r3, #0]
			transition = true;
10043a3e:	2337      	movs	r3, #55	@ 0x37
10043a40:	18fb      	adds	r3, r7, r3
10043a42:	2201      	movs	r2, #1
10043a44:	701a      	strb	r2, [r3, #0]
		}
		break;
10043a46:	e280      	b.n	10043f4a <COMM_Event_Handler+0x6ea>
	case logsdata:
		if(event.status == EVENT_USART_READY){
10043a48:	1d3b      	adds	r3, r7, #4
10043a4a:	781b      	ldrb	r3, [r3, #0]
10043a4c:	b25b      	sxtb	r3, r3
10043a4e:	2b07      	cmp	r3, #7
10043a50:	d000      	beq.n	10043a54 <COMM_Event_Handler+0x1f4>
10043a52:	e27c      	b.n	10043f4e <COMM_Event_Handler+0x6ee>
			//get logs size
			uint16_t size  = 32;
10043a54:	212e      	movs	r1, #46	@ 0x2e
10043a56:	187b      	adds	r3, r7, r1
10043a58:	2220      	movs	r2, #32
10043a5a:	801a      	strh	r2, [r3, #0]
			//uint16_t size = FLASH_GetLogsSize();
			uint16_t sendsize = size - sent;
10043a5c:	4b68      	ldr	r3, [pc, #416]	@ (10043c00 <COMM_Event_Handler+0x3a0>)
10043a5e:	681b      	ldr	r3, [r3, #0]
10043a60:	b29a      	uxth	r2, r3
10043a62:	2434      	movs	r4, #52	@ 0x34
10043a64:	193b      	adds	r3, r7, r4
10043a66:	0008      	movs	r0, r1
10043a68:	1879      	adds	r1, r7, r1
10043a6a:	8809      	ldrh	r1, [r1, #0]
10043a6c:	1a8a      	subs	r2, r1, r2
10043a6e:	801a      	strh	r2, [r3, #0]
			if(size - sent > (uint16_t)(USARTBUFFERSIZE/6)){
10043a70:	183b      	adds	r3, r7, r0
10043a72:	881a      	ldrh	r2, [r3, #0]
10043a74:	4b62      	ldr	r3, [pc, #392]	@ (10043c00 <COMM_Event_Handler+0x3a0>)
10043a76:	681b      	ldr	r3, [r3, #0]
10043a78:	1ad3      	subs	r3, r2, r3
10043a7a:	2b55      	cmp	r3, #85	@ 0x55
10043a7c:	d902      	bls.n	10043a84 <COMM_Event_Handler+0x224>
				sendsize = (uint16_t)(USARTBUFFERSIZE/6);
10043a7e:	193b      	adds	r3, r7, r4
10043a80:	2255      	movs	r2, #85	@ 0x55
10043a82:	801a      	strh	r2, [r3, #0]
			}
			for(int i = 0; i < sendsize; i++){
10043a84:	2300      	movs	r3, #0
10043a86:	633b      	str	r3, [r7, #48]	@ 0x30
10043a88:	e044      	b.n	10043b14 <COMM_Event_Handler+0x2b4>
				//scheduleEvent levent = FLASH_ReadLogs(sent);
				scheduleEvent levent = {1, 1, 0b1001001, 0b1001010, 1, 1};
10043a8a:	241c      	movs	r4, #28
10043a8c:	193b      	adds	r3, r7, r4
10043a8e:	0018      	movs	r0, r3
10043a90:	2307      	movs	r3, #7
10043a92:	001a      	movs	r2, r3
10043a94:	2100      	movs	r1, #0
10043a96:	f023 ffe1 	bl	10067a5c <memset>
10043a9a:	193b      	adds	r3, r7, r4
10043a9c:	2201      	movs	r2, #1
10043a9e:	701a      	strb	r2, [r3, #0]
10043aa0:	193b      	adds	r3, r7, r4
10043aa2:	2201      	movs	r2, #1
10043aa4:	705a      	strb	r2, [r3, #1]
10043aa6:	193b      	adds	r3, r7, r4
10043aa8:	2249      	movs	r2, #73	@ 0x49
10043aaa:	709a      	strb	r2, [r3, #2]
10043aac:	193b      	adds	r3, r7, r4
10043aae:	224a      	movs	r2, #74	@ 0x4a
10043ab0:	70da      	strb	r2, [r3, #3]
10043ab2:	193b      	adds	r3, r7, r4
10043ab4:	2201      	movs	r2, #1
10043ab6:	711a      	strb	r2, [r3, #4]
10043ab8:	193b      	adds	r3, r7, r4
10043aba:	2201      	movs	r2, #1
10043abc:	715a      	strb	r2, [r3, #5]
				USART_WriteTx(levent.month);
10043abe:	193b      	adds	r3, r7, r4
10043ac0:	781b      	ldrb	r3, [r3, #0]
10043ac2:	0018      	movs	r0, r3
10043ac4:	f002 feea 	bl	1004689c <USART_WriteTx>
				USART_WriteTx(levent.daystart);
10043ac8:	193b      	adds	r3, r7, r4
10043aca:	785b      	ldrb	r3, [r3, #1]
10043acc:	0018      	movs	r0, r3
10043ace:	f002 fee5 	bl	1004689c <USART_WriteTx>
				USART_WriteTx(levent.start);
10043ad2:	193b      	adds	r3, r7, r4
10043ad4:	789b      	ldrb	r3, [r3, #2]
10043ad6:	0018      	movs	r0, r3
10043ad8:	f002 fee0 	bl	1004689c <USART_WriteTx>
				USART_WriteTx(levent.daystop);
10043adc:	193b      	adds	r3, r7, r4
10043ade:	791b      	ldrb	r3, [r3, #4]
10043ae0:	0018      	movs	r0, r3
10043ae2:	f002 fedb 	bl	1004689c <USART_WriteTx>
				USART_WriteTx(levent.stop);
10043ae6:	193b      	adds	r3, r7, r4
10043ae8:	78db      	ldrb	r3, [r3, #3]
10043aea:	0018      	movs	r0, r3
10043aec:	f002 fed6 	bl	1004689c <USART_WriteTx>
				USART_WriteTx(levent.folder);
10043af0:	193b      	adds	r3, r7, r4
10043af2:	795b      	ldrb	r3, [r3, #5]
10043af4:	0018      	movs	r0, r3
10043af6:	f002 fed1 	bl	1004689c <USART_WriteTx>
				USART_WriteTx(levent.track);
10043afa:	193b      	adds	r3, r7, r4
10043afc:	799b      	ldrb	r3, [r3, #6]
10043afe:	0018      	movs	r0, r3
10043b00:	f002 fecc 	bl	1004689c <USART_WriteTx>
				sent++;
10043b04:	4b3e      	ldr	r3, [pc, #248]	@ (10043c00 <COMM_Event_Handler+0x3a0>)
10043b06:	681b      	ldr	r3, [r3, #0]
10043b08:	1c5a      	adds	r2, r3, #1
10043b0a:	4b3d      	ldr	r3, [pc, #244]	@ (10043c00 <COMM_Event_Handler+0x3a0>)
10043b0c:	601a      	str	r2, [r3, #0]
			for(int i = 0; i < sendsize; i++){
10043b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10043b10:	3301      	adds	r3, #1
10043b12:	633b      	str	r3, [r7, #48]	@ 0x30
10043b14:	2334      	movs	r3, #52	@ 0x34
10043b16:	18fb      	adds	r3, r7, r3
10043b18:	881b      	ldrh	r3, [r3, #0]
10043b1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10043b1c:	429a      	cmp	r2, r3
10043b1e:	dbb4      	blt.n	10043a8a <COMM_Event_Handler+0x22a>
			}
			if(size - sent <= (uint16_t)(USARTBUFFERSIZE/6)){
10043b20:	242e      	movs	r4, #46	@ 0x2e
10043b22:	193b      	adds	r3, r7, r4
10043b24:	881a      	ldrh	r2, [r3, #0]
10043b26:	4b36      	ldr	r3, [pc, #216]	@ (10043c00 <COMM_Event_Handler+0x3a0>)
10043b28:	681b      	ldr	r3, [r3, #0]
10043b2a:	1ad3      	subs	r3, r2, r3
10043b2c:	2b55      	cmp	r3, #85	@ 0x55
10043b2e:	d900      	bls.n	10043b32 <COMM_Event_Handler+0x2d2>
10043b30:	e20d      	b.n	10043f4e <COMM_Event_Handler+0x6ee>
				USART_WriteTx(LOGSDONE);
10043b32:	2003      	movs	r0, #3
10043b34:	f002 feb2 	bl	1004689c <USART_WriteTx>
				if(size >= 255){
10043b38:	193b      	adds	r3, r7, r4
10043b3a:	881b      	ldrh	r3, [r3, #0]
10043b3c:	2bfe      	cmp	r3, #254	@ 0xfe
10043b3e:	d903      	bls.n	10043b48 <COMM_Event_Handler+0x2e8>
					discountprintf("logs buffer overflowed, most recent data has been lost");
10043b40:	4b30      	ldr	r3, [pc, #192]	@ (10043c04 <COMM_Event_Handler+0x3a4>)
10043b42:	0018      	movs	r0, r3
10043b44:	f000 fa4c 	bl	10043fe0 <discountprintf>
				}
				//send last of logs here
				sent = 0;
10043b48:	4b2d      	ldr	r3, [pc, #180]	@ (10043c00 <COMM_Event_Handler+0x3a0>)
10043b4a:	2200      	movs	r2, #0
10043b4c:	601a      	str	r2, [r3, #0]
				sendinglogs = 0;
10043b4e:	4b28      	ldr	r3, [pc, #160]	@ (10043bf0 <COMM_Event_Handler+0x390>)
10043b50:	2200      	movs	r2, #0
10043b52:	701a      	strb	r2, [r3, #0]
				next = idle;
10043b54:	2336      	movs	r3, #54	@ 0x36
10043b56:	18fb      	adds	r3, r7, r3
10043b58:	2201      	movs	r2, #1
10043b5a:	701a      	strb	r2, [r3, #0]
				transition = true;
10043b5c:	2337      	movs	r3, #55	@ 0x37
10043b5e:	18fb      	adds	r3, r7, r3
10043b60:	2201      	movs	r2, #1
10043b62:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
10043b64:	e1f3      	b.n	10043f4e <COMM_Event_Handler+0x6ee>
	case dccontrol:
		if(event.status == EVENT_USART){
10043b66:	1d3b      	adds	r3, r7, #4
10043b68:	781b      	ldrb	r3, [r3, #0]
10043b6a:	b25b      	sxtb	r3, r3
10043b6c:	2b06      	cmp	r3, #6
10043b6e:	d000      	beq.n	10043b72 <COMM_Event_Handler+0x312>
10043b70:	e1ef      	b.n	10043f52 <COMM_Event_Handler+0x6f2>
			if(FLASH_SetDCVol(FLASH_GetVolume(), (uint8_t)event.data) == 0){
10043b72:	f000 fbeb 	bl	1004434c <FLASH_GetVolume>
10043b76:	0003      	movs	r3, r0
10043b78:	001a      	movs	r2, r3
10043b7a:	1d3b      	adds	r3, r7, #4
10043b7c:	885b      	ldrh	r3, [r3, #2]
10043b7e:	b2db      	uxtb	r3, r3
10043b80:	0019      	movs	r1, r3
10043b82:	0010      	movs	r0, r2
10043b84:	f000 fba0 	bl	100442c8 <FLASH_SetDCVol>
10043b88:	1e03      	subs	r3, r0, #0
10043b8a:	d103      	bne.n	10043b94 <COMM_Event_Handler+0x334>
				discountprintf("failed to set duty cycle");
10043b8c:	4b1e      	ldr	r3, [pc, #120]	@ (10043c08 <COMM_Event_Handler+0x3a8>)
10043b8e:	0018      	movs	r0, r3
10043b90:	f000 fa26 	bl	10043fe0 <discountprintf>
			}
			//sprintf(text, "Storing volume %d", FLASH_GetDutyCycle());
			//discountprintf(text);

			next = idle;
10043b94:	2336      	movs	r3, #54	@ 0x36
10043b96:	18fb      	adds	r3, r7, r3
10043b98:	2201      	movs	r2, #1
10043b9a:	701a      	strb	r2, [r3, #0]
			transition = true;
10043b9c:	2337      	movs	r3, #55	@ 0x37
10043b9e:	18fb      	adds	r3, r7, r3
10043ba0:	2201      	movs	r2, #1
10043ba2:	701a      	strb	r2, [r3, #0]
		}
		break;
10043ba4:	e1d5      	b.n	10043f52 <COMM_Event_Handler+0x6f2>
	case schedulecontrol:
		static uint8_t numevents;
		static scheduleEvent sevent;
		if(event.status == EVENT_ENTRY){
10043ba6:	1d3b      	adds	r3, r7, #4
10043ba8:	781b      	ldrb	r3, [r3, #0]
10043baa:	b25b      	sxtb	r3, r3
10043bac:	2b02      	cmp	r3, #2
10043bae:	d000      	beq.n	10043bb2 <COMM_Event_Handler+0x352>
10043bb0:	e1d1      	b.n	10043f56 <COMM_Event_Handler+0x6f6>
			//discountprintf("receiving schedule");
			sevent = (scheduleEvent){0,0,0,0,0,0};
10043bb2:	4b16      	ldr	r3, [pc, #88]	@ (10043c0c <COMM_Event_Handler+0x3ac>)
10043bb4:	0018      	movs	r0, r3
10043bb6:	2307      	movs	r3, #7
10043bb8:	001a      	movs	r2, r3
10043bba:	2100      	movs	r1, #0
10043bbc:	f023 ff4e 	bl	10067a5c <memset>
			if(FLASH_ClearSchedule()== 0){
10043bc0:	f000 fddc 	bl	1004477c <FLASH_ClearSchedule>
10043bc4:	1e03      	subs	r3, r0, #0
10043bc6:	d103      	bne.n	10043bd0 <COMM_Event_Handler+0x370>
				discountprintf("failed to clear schedule");
10043bc8:	4b11      	ldr	r3, [pc, #68]	@ (10043c10 <COMM_Event_Handler+0x3b0>)
10043bca:	0018      	movs	r0, r3
10043bcc:	f000 fa08 	bl	10043fe0 <discountprintf>
			}
			next = schedulemonth;
10043bd0:	2336      	movs	r3, #54	@ 0x36
10043bd2:	18fb      	adds	r3, r7, r3
10043bd4:	2209      	movs	r2, #9
10043bd6:	701a      	strb	r2, [r3, #0]
			transition = true;
10043bd8:	2337      	movs	r3, #55	@ 0x37
10043bda:	18fb      	adds	r3, r7, r3
10043bdc:	2201      	movs	r2, #1
10043bde:	701a      	strb	r2, [r3, #0]
			numevents = 0;
10043be0:	4b0c      	ldr	r3, [pc, #48]	@ (10043c14 <COMM_Event_Handler+0x3b4>)
10043be2:	2200      	movs	r2, #0
10043be4:	701a      	strb	r2, [r3, #0]
		}
		break;
10043be6:	e1b6      	b.n	10043f56 <COMM_Event_Handler+0x6f6>
10043be8:	200003b6 	.word	0x200003b6
10043bec:	100691ec 	.word	0x100691ec
10043bf0:	200003bc 	.word	0x200003bc
10043bf4:	10069240 	.word	0x10069240
10043bf8:	10068a80 	.word	0x10068a80
10043bfc:	200003bd 	.word	0x200003bd
10043c00:	200003c0 	.word	0x200003c0
10043c04:	10068a98 	.word	0x10068a98
10043c08:	10068ad0 	.word	0x10068ad0
10043c0c:	200003c4 	.word	0x200003c4
10043c10:	10068aec 	.word	0x10068aec
10043c14:	200003cb 	.word	0x200003cb
	case schedulemonth:
		if(event.status == EVENT_USART){
10043c18:	1d3b      	adds	r3, r7, #4
10043c1a:	781b      	ldrb	r3, [r3, #0]
10043c1c:	b25b      	sxtb	r3, r3
10043c1e:	2b06      	cmp	r3, #6
10043c20:	d000      	beq.n	10043c24 <COMM_Event_Handler+0x3c4>
10043c22:	e19a      	b.n	10043f5a <COMM_Event_Handler+0x6fa>
			if(event.data == SCHEDULEEND){
10043c24:	1d3b      	adds	r3, r7, #4
10043c26:	885b      	ldrh	r3, [r3, #2]
10043c28:	2b0d      	cmp	r3, #13
10043c2a:	d10d      	bne.n	10043c48 <COMM_Event_Handler+0x3e8>
				//discountprintf("schedule complete");
				next = idle;
10043c2c:	2336      	movs	r3, #54	@ 0x36
10043c2e:	18fb      	adds	r3, r7, r3
10043c30:	2201      	movs	r2, #1
10043c32:	701a      	strb	r2, [r3, #0]
				transition = true;
10043c34:	2337      	movs	r3, #55	@ 0x37
10043c36:	18fb      	adds	r3, r7, r3
10043c38:	2201      	movs	r2, #1
10043c3a:	701a      	strb	r2, [r3, #0]
				FLASH_AppendSchedule(sevent);
10043c3c:	4bd1      	ldr	r3, [pc, #836]	@ (10043f84 <COMM_Event_Handler+0x724>)
10043c3e:	6818      	ldr	r0, [r3, #0]
10043c40:	6859      	ldr	r1, [r3, #4]
10043c42:	f000 fca5 	bl	10044590 <FLASH_AppendSchedule>
				//store month here
				next = scheduledaystart;
				transition = true;
			}
		}
		break;
10043c46:	e188      	b.n	10043f5a <COMM_Event_Handler+0x6fa>
			} else if(numevents > MAXSCHEDULEEVENTS){
10043c48:	4bcf      	ldr	r3, [pc, #828]	@ (10043f88 <COMM_Event_Handler+0x728>)
10043c4a:	781b      	ldrb	r3, [r3, #0]
10043c4c:	2bb4      	cmp	r3, #180	@ 0xb4
10043c4e:	d914      	bls.n	10043c7a <COMM_Event_Handler+0x41a>
				discountprintf("schedule overflow, forced to complete");
10043c50:	4bce      	ldr	r3, [pc, #824]	@ (10043f8c <COMM_Event_Handler+0x72c>)
10043c52:	0018      	movs	r0, r3
10043c54:	f000 f9c4 	bl	10043fe0 <discountprintf>
				FLASH_AppendSchedule(sevent);
10043c58:	4bca      	ldr	r3, [pc, #808]	@ (10043f84 <COMM_Event_Handler+0x724>)
10043c5a:	6818      	ldr	r0, [r3, #0]
10043c5c:	6859      	ldr	r1, [r3, #4]
10043c5e:	f000 fc97 	bl	10044590 <FLASH_AppendSchedule>
				next = scheduleend;
10043c62:	2336      	movs	r3, #54	@ 0x36
10043c64:	18fb      	adds	r3, r7, r3
10043c66:	2210      	movs	r2, #16
10043c68:	701a      	strb	r2, [r3, #0]
				transition = true;
10043c6a:	2337      	movs	r3, #55	@ 0x37
10043c6c:	18fb      	adds	r3, r7, r3
10043c6e:	2201      	movs	r2, #1
10043c70:	701a      	strb	r2, [r3, #0]
				USART_WriteTx(SCHEDULEEND);//please stop sending me the schedule
10043c72:	200d      	movs	r0, #13
10043c74:	f002 fe12 	bl	1004689c <USART_WriteTx>
		break;
10043c78:	e16f      	b.n	10043f5a <COMM_Event_Handler+0x6fa>
				FLASH_AppendSchedule(sevent);
10043c7a:	4bc2      	ldr	r3, [pc, #776]	@ (10043f84 <COMM_Event_Handler+0x724>)
10043c7c:	6818      	ldr	r0, [r3, #0]
10043c7e:	6859      	ldr	r1, [r3, #4]
10043c80:	f000 fc86 	bl	10044590 <FLASH_AppendSchedule>
				sevent.month = event.data;
10043c84:	1d3b      	adds	r3, r7, #4
10043c86:	885b      	ldrh	r3, [r3, #2]
10043c88:	b2da      	uxtb	r2, r3
10043c8a:	4bbe      	ldr	r3, [pc, #760]	@ (10043f84 <COMM_Event_Handler+0x724>)
10043c8c:	701a      	strb	r2, [r3, #0]
				next = scheduledaystart;
10043c8e:	2336      	movs	r3, #54	@ 0x36
10043c90:	18fb      	adds	r3, r7, r3
10043c92:	220a      	movs	r2, #10
10043c94:	701a      	strb	r2, [r3, #0]
				transition = true;
10043c96:	2337      	movs	r3, #55	@ 0x37
10043c98:	18fb      	adds	r3, r7, r3
10043c9a:	2201      	movs	r2, #1
10043c9c:	701a      	strb	r2, [r3, #0]
		break;
10043c9e:	e15c      	b.n	10043f5a <COMM_Event_Handler+0x6fa>
	case scheduledaystart:
		if(event.status == EVENT_USART){
10043ca0:	1d3b      	adds	r3, r7, #4
10043ca2:	781b      	ldrb	r3, [r3, #0]
10043ca4:	b25b      	sxtb	r3, r3
10043ca6:	2b06      	cmp	r3, #6
10043ca8:	d000      	beq.n	10043cac <COMM_Event_Handler+0x44c>
10043caa:	e158      	b.n	10043f5e <COMM_Event_Handler+0x6fe>
			sevent.daystart = event.data;
10043cac:	1d3b      	adds	r3, r7, #4
10043cae:	885b      	ldrh	r3, [r3, #2]
10043cb0:	b2da      	uxtb	r2, r3
10043cb2:	4bb4      	ldr	r3, [pc, #720]	@ (10043f84 <COMM_Event_Handler+0x724>)
10043cb4:	705a      	strb	r2, [r3, #1]
//			sprintf(text, "Day: %d", event.data);
//			discountprintf(text);
			next = schedulestart;
10043cb6:	2336      	movs	r3, #54	@ 0x36
10043cb8:	18fb      	adds	r3, r7, r3
10043cba:	220b      	movs	r2, #11
10043cbc:	701a      	strb	r2, [r3, #0]
			transition = true;
10043cbe:	2337      	movs	r3, #55	@ 0x37
10043cc0:	18fb      	adds	r3, r7, r3
10043cc2:	2201      	movs	r2, #1
10043cc4:	701a      	strb	r2, [r3, #0]
		}
		break;
10043cc6:	e14a      	b.n	10043f5e <COMM_Event_Handler+0x6fe>
	case schedulestart:
		if(event.status == EVENT_USART){
10043cc8:	1d3b      	adds	r3, r7, #4
10043cca:	781b      	ldrb	r3, [r3, #0]
10043ccc:	b25b      	sxtb	r3, r3
10043cce:	2b06      	cmp	r3, #6
10043cd0:	d000      	beq.n	10043cd4 <COMM_Event_Handler+0x474>
10043cd2:	e146      	b.n	10043f62 <COMM_Event_Handler+0x702>
			sevent.start =  event.data;
10043cd4:	1d3b      	adds	r3, r7, #4
10043cd6:	885b      	ldrh	r3, [r3, #2]
10043cd8:	b2da      	uxtb	r2, r3
10043cda:	4baa      	ldr	r3, [pc, #680]	@ (10043f84 <COMM_Event_Handler+0x724>)
10043cdc:	709a      	strb	r2, [r3, #2]
//			sprintf(text, "start time: %d:%d", (event.data&0b11111000)>>3, (event.data & 0b011)*15);
//			discountprintf(text);
			next = scheduledaystop;
10043cde:	2336      	movs	r3, #54	@ 0x36
10043ce0:	18fb      	adds	r3, r7, r3
10043ce2:	220c      	movs	r2, #12
10043ce4:	701a      	strb	r2, [r3, #0]
			transition = true;
10043ce6:	2337      	movs	r3, #55	@ 0x37
10043ce8:	18fb      	adds	r3, r7, r3
10043cea:	2201      	movs	r2, #1
10043cec:	701a      	strb	r2, [r3, #0]
		}
		break;
10043cee:	e138      	b.n	10043f62 <COMM_Event_Handler+0x702>
	case scheduledaystop:
		if(event.status == EVENT_USART){
10043cf0:	1d3b      	adds	r3, r7, #4
10043cf2:	781b      	ldrb	r3, [r3, #0]
10043cf4:	b25b      	sxtb	r3, r3
10043cf6:	2b06      	cmp	r3, #6
10043cf8:	d000      	beq.n	10043cfc <COMM_Event_Handler+0x49c>
10043cfa:	e134      	b.n	10043f66 <COMM_Event_Handler+0x706>
			sevent.daystop = event.data;
10043cfc:	1d3b      	adds	r3, r7, #4
10043cfe:	885b      	ldrh	r3, [r3, #2]
10043d00:	b2da      	uxtb	r2, r3
10043d02:	4ba0      	ldr	r3, [pc, #640]	@ (10043f84 <COMM_Event_Handler+0x724>)
10043d04:	711a      	strb	r2, [r3, #4]
//			sprintf(text, "Day: %d", event.data);
//			discountprintf(text);
			next = schedulestop;
10043d06:	2336      	movs	r3, #54	@ 0x36
10043d08:	18fb      	adds	r3, r7, r3
10043d0a:	220d      	movs	r2, #13
10043d0c:	701a      	strb	r2, [r3, #0]
			transition = true;
10043d0e:	2337      	movs	r3, #55	@ 0x37
10043d10:	18fb      	adds	r3, r7, r3
10043d12:	2201      	movs	r2, #1
10043d14:	701a      	strb	r2, [r3, #0]
		}
		break;
10043d16:	e126      	b.n	10043f66 <COMM_Event_Handler+0x706>
	case schedulestop:
		if(event.status == EVENT_USART){
10043d18:	1d3b      	adds	r3, r7, #4
10043d1a:	781b      	ldrb	r3, [r3, #0]
10043d1c:	b25b      	sxtb	r3, r3
10043d1e:	2b06      	cmp	r3, #6
10043d20:	d000      	beq.n	10043d24 <COMM_Event_Handler+0x4c4>
10043d22:	e122      	b.n	10043f6a <COMM_Event_Handler+0x70a>
			sevent.stop = event.data;
10043d24:	1d3b      	adds	r3, r7, #4
10043d26:	885b      	ldrh	r3, [r3, #2]
10043d28:	b2da      	uxtb	r2, r3
10043d2a:	4b96      	ldr	r3, [pc, #600]	@ (10043f84 <COMM_Event_Handler+0x724>)
10043d2c:	70da      	strb	r2, [r3, #3]
//			sprintf(text, "end time: %d:%d", (event.data&0b11111000)>>3, (event.data & 0b011)*15);
//			discountprintf(text);
			next = schedulefolder;
10043d2e:	2336      	movs	r3, #54	@ 0x36
10043d30:	18fb      	adds	r3, r7, r3
10043d32:	220e      	movs	r2, #14
10043d34:	701a      	strb	r2, [r3, #0]
			transition = true;
10043d36:	2337      	movs	r3, #55	@ 0x37
10043d38:	18fb      	adds	r3, r7, r3
10043d3a:	2201      	movs	r2, #1
10043d3c:	701a      	strb	r2, [r3, #0]
		}
		break;
10043d3e:	e114      	b.n	10043f6a <COMM_Event_Handler+0x70a>
	case schedulefolder:
		if(event.status == EVENT_USART){
10043d40:	1d3b      	adds	r3, r7, #4
10043d42:	781b      	ldrb	r3, [r3, #0]
10043d44:	b25b      	sxtb	r3, r3
10043d46:	2b06      	cmp	r3, #6
10043d48:	d000      	beq.n	10043d4c <COMM_Event_Handler+0x4ec>
10043d4a:	e110      	b.n	10043f6e <COMM_Event_Handler+0x70e>
			sevent.folder = event.data;
10043d4c:	1d3b      	adds	r3, r7, #4
10043d4e:	885b      	ldrh	r3, [r3, #2]
10043d50:	b2da      	uxtb	r2, r3
10043d52:	4b8c      	ldr	r3, [pc, #560]	@ (10043f84 <COMM_Event_Handler+0x724>)
10043d54:	715a      	strb	r2, [r3, #5]
//			sprintf(text, "folder#: %d", event.data);
//			discountprintf(text);
			next = scheduletrack;
10043d56:	2336      	movs	r3, #54	@ 0x36
10043d58:	18fb      	adds	r3, r7, r3
10043d5a:	220f      	movs	r2, #15
10043d5c:	701a      	strb	r2, [r3, #0]
			transition = true;
10043d5e:	2337      	movs	r3, #55	@ 0x37
10043d60:	18fb      	adds	r3, r7, r3
10043d62:	2201      	movs	r2, #1
10043d64:	701a      	strb	r2, [r3, #0]
		}
		break;
10043d66:	e102      	b.n	10043f6e <COMM_Event_Handler+0x70e>
	case scheduletrack:
		if(event.status == EVENT_USART){
10043d68:	1d3b      	adds	r3, r7, #4
10043d6a:	781b      	ldrb	r3, [r3, #0]
10043d6c:	b25b      	sxtb	r3, r3
10043d6e:	2b06      	cmp	r3, #6
10043d70:	d000      	beq.n	10043d74 <COMM_Event_Handler+0x514>
10043d72:	e0fe      	b.n	10043f72 <COMM_Event_Handler+0x712>
			sevent.track = event.data;
10043d74:	1d3b      	adds	r3, r7, #4
10043d76:	885b      	ldrh	r3, [r3, #2]
10043d78:	b2da      	uxtb	r2, r3
10043d7a:	4b82      	ldr	r3, [pc, #520]	@ (10043f84 <COMM_Event_Handler+0x724>)
10043d7c:	719a      	strb	r2, [r3, #6]
//			sprintf(text, "track#: %d", event.data);
//			discountprintf(text);
			//record end time here
			next = schedulemonth;
10043d7e:	2336      	movs	r3, #54	@ 0x36
10043d80:	18fb      	adds	r3, r7, r3
10043d82:	2209      	movs	r2, #9
10043d84:	701a      	strb	r2, [r3, #0]
			transition = true;
10043d86:	2337      	movs	r3, #55	@ 0x37
10043d88:	18fb      	adds	r3, r7, r3
10043d8a:	2201      	movs	r2, #1
10043d8c:	701a      	strb	r2, [r3, #0]
			numevents++;
10043d8e:	4b7e      	ldr	r3, [pc, #504]	@ (10043f88 <COMM_Event_Handler+0x728>)
10043d90:	781b      	ldrb	r3, [r3, #0]
10043d92:	3301      	adds	r3, #1
10043d94:	b2da      	uxtb	r2, r3
10043d96:	4b7c      	ldr	r3, [pc, #496]	@ (10043f88 <COMM_Event_Handler+0x728>)
10043d98:	701a      	strb	r2, [r3, #0]
		}
		break;
10043d9a:	e0ea      	b.n	10043f72 <COMM_Event_Handler+0x712>
	case scheduleend:
		if(event.status == EVENT_USART){
10043d9c:	1d3b      	adds	r3, r7, #4
10043d9e:	781b      	ldrb	r3, [r3, #0]
10043da0:	b25b      	sxtb	r3, r3
10043da2:	2b06      	cmp	r3, #6
10043da4:	d000      	beq.n	10043da8 <COMM_Event_Handler+0x548>
10043da6:	e0e6      	b.n	10043f76 <COMM_Event_Handler+0x716>
			if(event.data == SCHEDULEEND){
10043da8:	1d3b      	adds	r3, r7, #4
10043daa:	885b      	ldrh	r3, [r3, #2]
10043dac:	2b0d      	cmp	r3, #13
10043dae:	d000      	beq.n	10043db2 <COMM_Event_Handler+0x552>
10043db0:	e0e1      	b.n	10043f76 <COMM_Event_Handler+0x716>
				next = idle;
10043db2:	2336      	movs	r3, #54	@ 0x36
10043db4:	18fb      	adds	r3, r7, r3
10043db6:	2201      	movs	r2, #1
10043db8:	701a      	strb	r2, [r3, #0]
				transition = true;
10043dba:	2337      	movs	r3, #55	@ 0x37
10043dbc:	18fb      	adds	r3, r7, r3
10043dbe:	2201      	movs	r2, #1
10043dc0:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
10043dc2:	e0d8      	b.n	10043f76 <COMM_Event_Handler+0x716>
	case timeminute:
		if(event.status == EVENT_USART){
10043dc4:	1d3b      	adds	r3, r7, #4
10043dc6:	781b      	ldrb	r3, [r3, #0]
10043dc8:	b25b      	sxtb	r3, r3
10043dca:	2b06      	cmp	r3, #6
10043dcc:	d000      	beq.n	10043dd0 <COMM_Event_Handler+0x570>
10043dce:	e0d4      	b.n	10043f7a <COMM_Event_Handler+0x71a>
			if(event.data < 60){
10043dd0:	1d3b      	adds	r3, r7, #4
10043dd2:	885b      	ldrh	r3, [r3, #2]
10043dd4:	2b3b      	cmp	r3, #59	@ 0x3b
10043dd6:	d900      	bls.n	10043dda <COMM_Event_Handler+0x57a>
10043dd8:	e0cf      	b.n	10043f7a <COMM_Event_Handler+0x71a>
				I2C_Transmit(RTCADDRESS, RTCMINADDR, ((event.data/10)<<4) + event.data%10);
10043dda:	1d3b      	adds	r3, r7, #4
10043ddc:	885b      	ldrh	r3, [r3, #2]
10043dde:	210a      	movs	r1, #10
10043de0:	0018      	movs	r0, r3
10043de2:	f7fc fa2d 	bl	10040240 <__udivsi3>
10043de6:	0003      	movs	r3, r0
10043de8:	b29b      	uxth	r3, r3
10043dea:	b2db      	uxtb	r3, r3
10043dec:	011b      	lsls	r3, r3, #4
10043dee:	b2dc      	uxtb	r4, r3
10043df0:	1d3b      	adds	r3, r7, #4
10043df2:	885b      	ldrh	r3, [r3, #2]
10043df4:	210a      	movs	r1, #10
10043df6:	0018      	movs	r0, r3
10043df8:	f7fc faa8 	bl	1004034c <__aeabi_uidivmod>
10043dfc:	000b      	movs	r3, r1
10043dfe:	b29b      	uxth	r3, r3
10043e00:	b2db      	uxtb	r3, r3
10043e02:	18e3      	adds	r3, r4, r3
10043e04:	b2db      	uxtb	r3, r3
10043e06:	001a      	movs	r2, r3
10043e08:	2101      	movs	r1, #1
10043e0a:	206f      	movs	r0, #111	@ 0x6f
10043e0c:	f001 f80c 	bl	10044e28 <I2C_Transmit>
				next = timehour;
10043e10:	2336      	movs	r3, #54	@ 0x36
10043e12:	18fb      	adds	r3, r7, r3
10043e14:	2212      	movs	r2, #18
10043e16:	701a      	strb	r2, [r3, #0]
				transition = true;
10043e18:	2337      	movs	r3, #55	@ 0x37
10043e1a:	18fb      	adds	r3, r7, r3
10043e1c:	2201      	movs	r2, #1
10043e1e:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
10043e20:	e0ab      	b.n	10043f7a <COMM_Event_Handler+0x71a>
	case timehour:
		if(event.status == EVENT_USART){
10043e22:	1d3b      	adds	r3, r7, #4
10043e24:	781b      	ldrb	r3, [r3, #0]
10043e26:	b25b      	sxtb	r3, r3
10043e28:	2b06      	cmp	r3, #6
10043e2a:	d000      	beq.n	10043e2e <COMM_Event_Handler+0x5ce>
10043e2c:	e0a7      	b.n	10043f7e <COMM_Event_Handler+0x71e>
			if(event.data < 24){
10043e2e:	1d3b      	adds	r3, r7, #4
10043e30:	885b      	ldrh	r3, [r3, #2]
10043e32:	2b17      	cmp	r3, #23
10043e34:	d900      	bls.n	10043e38 <COMM_Event_Handler+0x5d8>
10043e36:	e0a2      	b.n	10043f7e <COMM_Event_Handler+0x71e>
				I2C_Transmit(RTCADDRESS, RTCHOURADDR, ((event.data/10)<<4) + event.data%10);
10043e38:	1d3b      	adds	r3, r7, #4
10043e3a:	885b      	ldrh	r3, [r3, #2]
10043e3c:	210a      	movs	r1, #10
10043e3e:	0018      	movs	r0, r3
10043e40:	f7fc f9fe 	bl	10040240 <__udivsi3>
10043e44:	0003      	movs	r3, r0
10043e46:	b29b      	uxth	r3, r3
10043e48:	b2db      	uxtb	r3, r3
10043e4a:	011b      	lsls	r3, r3, #4
10043e4c:	b2dc      	uxtb	r4, r3
10043e4e:	1d3b      	adds	r3, r7, #4
10043e50:	885b      	ldrh	r3, [r3, #2]
10043e52:	210a      	movs	r1, #10
10043e54:	0018      	movs	r0, r3
10043e56:	f7fc fa79 	bl	1004034c <__aeabi_uidivmod>
10043e5a:	000b      	movs	r3, r1
10043e5c:	b29b      	uxth	r3, r3
10043e5e:	b2db      	uxtb	r3, r3
10043e60:	18e3      	adds	r3, r4, r3
10043e62:	b2db      	uxtb	r3, r3
10043e64:	001a      	movs	r2, r3
10043e66:	2102      	movs	r1, #2
10043e68:	206f      	movs	r0, #111	@ 0x6f
10043e6a:	f000 ffdd 	bl	10044e28 <I2C_Transmit>
				next = timeday;
10043e6e:	2336      	movs	r3, #54	@ 0x36
10043e70:	18fb      	adds	r3, r7, r3
10043e72:	2213      	movs	r2, #19
10043e74:	701a      	strb	r2, [r3, #0]
				transition = true;
10043e76:	2337      	movs	r3, #55	@ 0x37
10043e78:	18fb      	adds	r3, r7, r3
10043e7a:	2201      	movs	r2, #1
10043e7c:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
10043e7e:	e07e      	b.n	10043f7e <COMM_Event_Handler+0x71e>
	case timeday:
		if(event.status == EVENT_USART){
10043e80:	1d3b      	adds	r3, r7, #4
10043e82:	781b      	ldrb	r3, [r3, #0]
10043e84:	b25b      	sxtb	r3, r3
10043e86:	2b06      	cmp	r3, #6
10043e88:	d126      	bne.n	10043ed8 <COMM_Event_Handler+0x678>
			if(event.data <= 31){
10043e8a:	1d3b      	adds	r3, r7, #4
10043e8c:	885b      	ldrh	r3, [r3, #2]
10043e8e:	2b1f      	cmp	r3, #31
10043e90:	d822      	bhi.n	10043ed8 <COMM_Event_Handler+0x678>
				I2C_Transmit(RTCADDRESS, RTCDAYADDR, ((event.data/10)<<4) + event.data%10);
10043e92:	1d3b      	adds	r3, r7, #4
10043e94:	885b      	ldrh	r3, [r3, #2]
10043e96:	210a      	movs	r1, #10
10043e98:	0018      	movs	r0, r3
10043e9a:	f7fc f9d1 	bl	10040240 <__udivsi3>
10043e9e:	0003      	movs	r3, r0
10043ea0:	b29b      	uxth	r3, r3
10043ea2:	b2db      	uxtb	r3, r3
10043ea4:	011b      	lsls	r3, r3, #4
10043ea6:	b2dc      	uxtb	r4, r3
10043ea8:	1d3b      	adds	r3, r7, #4
10043eaa:	885b      	ldrh	r3, [r3, #2]
10043eac:	210a      	movs	r1, #10
10043eae:	0018      	movs	r0, r3
10043eb0:	f7fc fa4c 	bl	1004034c <__aeabi_uidivmod>
10043eb4:	000b      	movs	r3, r1
10043eb6:	b29b      	uxth	r3, r3
10043eb8:	b2db      	uxtb	r3, r3
10043eba:	18e3      	adds	r3, r4, r3
10043ebc:	b2db      	uxtb	r3, r3
10043ebe:	001a      	movs	r2, r3
10043ec0:	2104      	movs	r1, #4
10043ec2:	206f      	movs	r0, #111	@ 0x6f
10043ec4:	f000 ffb0 	bl	10044e28 <I2C_Transmit>
				next = timemonth;
10043ec8:	2336      	movs	r3, #54	@ 0x36
10043eca:	18fb      	adds	r3, r7, r3
10043ecc:	2214      	movs	r2, #20
10043ece:	701a      	strb	r2, [r3, #0]
				transition = true;
10043ed0:	2337      	movs	r3, #55	@ 0x37
10043ed2:	18fb      	adds	r3, r7, r3
10043ed4:	2201      	movs	r2, #1
10043ed6:	701a      	strb	r2, [r3, #0]
			}
		}
	case timemonth:
		if(event.status == EVENT_USART){
10043ed8:	1d3b      	adds	r3, r7, #4
10043eda:	781b      	ldrb	r3, [r3, #0]
10043edc:	b25b      	sxtb	r3, r3
10043ede:	2b06      	cmp	r3, #6
10043ee0:	d156      	bne.n	10043f90 <COMM_Event_Handler+0x730>
			if(event.data <= 12){
10043ee2:	1d3b      	adds	r3, r7, #4
10043ee4:	885b      	ldrh	r3, [r3, #2]
10043ee6:	2b0c      	cmp	r3, #12
10043ee8:	d852      	bhi.n	10043f90 <COMM_Event_Handler+0x730>
				I2C_Transmit(RTCADDRESS, RTCMNTHADDR, ((event.data/10)<<4) + event.data%10);
10043eea:	1d3b      	adds	r3, r7, #4
10043eec:	885b      	ldrh	r3, [r3, #2]
10043eee:	210a      	movs	r1, #10
10043ef0:	0018      	movs	r0, r3
10043ef2:	f7fc f9a5 	bl	10040240 <__udivsi3>
10043ef6:	0003      	movs	r3, r0
10043ef8:	b29b      	uxth	r3, r3
10043efa:	b2db      	uxtb	r3, r3
10043efc:	011b      	lsls	r3, r3, #4
10043efe:	b2dc      	uxtb	r4, r3
10043f00:	1d3b      	adds	r3, r7, #4
10043f02:	885b      	ldrh	r3, [r3, #2]
10043f04:	210a      	movs	r1, #10
10043f06:	0018      	movs	r0, r3
10043f08:	f7fc fa20 	bl	1004034c <__aeabi_uidivmod>
10043f0c:	000b      	movs	r3, r1
10043f0e:	b29b      	uxth	r3, r3
10043f10:	b2db      	uxtb	r3, r3
10043f12:	18e3      	adds	r3, r4, r3
10043f14:	b2db      	uxtb	r3, r3
10043f16:	001a      	movs	r2, r3
10043f18:	2105      	movs	r1, #5
10043f1a:	206f      	movs	r0, #111	@ 0x6f
10043f1c:	f000 ff84 	bl	10044e28 <I2C_Transmit>
				next = idle;
10043f20:	2336      	movs	r3, #54	@ 0x36
10043f22:	18fb      	adds	r3, r7, r3
10043f24:	2201      	movs	r2, #1
10043f26:	701a      	strb	r2, [r3, #0]
				transition = true;
10043f28:	2337      	movs	r3, #55	@ 0x37
10043f2a:	18fb      	adds	r3, r7, r3
10043f2c:	2201      	movs	r2, #1
10043f2e:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
10043f30:	e02e      	b.n	10043f90 <COMM_Event_Handler+0x730>
	default:
		break;
10043f32:	46c0      	nop			@ (mov r8, r8)
10043f34:	e02d      	b.n	10043f92 <COMM_Event_Handler+0x732>
		break;
10043f36:	46c0      	nop			@ (mov r8, r8)
10043f38:	e02b      	b.n	10043f92 <COMM_Event_Handler+0x732>
		break;
10043f3a:	46c0      	nop			@ (mov r8, r8)
10043f3c:	e029      	b.n	10043f92 <COMM_Event_Handler+0x732>
		break;
10043f3e:	46c0      	nop			@ (mov r8, r8)
10043f40:	e027      	b.n	10043f92 <COMM_Event_Handler+0x732>
		break;
10043f42:	46c0      	nop			@ (mov r8, r8)
10043f44:	e025      	b.n	10043f92 <COMM_Event_Handler+0x732>
		break;
10043f46:	46c0      	nop			@ (mov r8, r8)
10043f48:	e023      	b.n	10043f92 <COMM_Event_Handler+0x732>
		break;
10043f4a:	46c0      	nop			@ (mov r8, r8)
10043f4c:	e021      	b.n	10043f92 <COMM_Event_Handler+0x732>
		break;
10043f4e:	46c0      	nop			@ (mov r8, r8)
10043f50:	e01f      	b.n	10043f92 <COMM_Event_Handler+0x732>
		break;
10043f52:	46c0      	nop			@ (mov r8, r8)
10043f54:	e01d      	b.n	10043f92 <COMM_Event_Handler+0x732>
		break;
10043f56:	46c0      	nop			@ (mov r8, r8)
10043f58:	e01b      	b.n	10043f92 <COMM_Event_Handler+0x732>
		break;
10043f5a:	46c0      	nop			@ (mov r8, r8)
10043f5c:	e019      	b.n	10043f92 <COMM_Event_Handler+0x732>
		break;
10043f5e:	46c0      	nop			@ (mov r8, r8)
10043f60:	e017      	b.n	10043f92 <COMM_Event_Handler+0x732>
		break;
10043f62:	46c0      	nop			@ (mov r8, r8)
10043f64:	e015      	b.n	10043f92 <COMM_Event_Handler+0x732>
		break;
10043f66:	46c0      	nop			@ (mov r8, r8)
10043f68:	e013      	b.n	10043f92 <COMM_Event_Handler+0x732>
		break;
10043f6a:	46c0      	nop			@ (mov r8, r8)
10043f6c:	e011      	b.n	10043f92 <COMM_Event_Handler+0x732>
		break;
10043f6e:	46c0      	nop			@ (mov r8, r8)
10043f70:	e00f      	b.n	10043f92 <COMM_Event_Handler+0x732>
		break;
10043f72:	46c0      	nop			@ (mov r8, r8)
10043f74:	e00d      	b.n	10043f92 <COMM_Event_Handler+0x732>
		break;
10043f76:	46c0      	nop			@ (mov r8, r8)
10043f78:	e00b      	b.n	10043f92 <COMM_Event_Handler+0x732>
		break;
10043f7a:	46c0      	nop			@ (mov r8, r8)
10043f7c:	e009      	b.n	10043f92 <COMM_Event_Handler+0x732>
		break;
10043f7e:	46c0      	nop			@ (mov r8, r8)
10043f80:	e007      	b.n	10043f92 <COMM_Event_Handler+0x732>
10043f82:	46c0      	nop			@ (mov r8, r8)
10043f84:	200003c4 	.word	0x200003c4
10043f88:	200003cb 	.word	0x200003cb
10043f8c:	10068b08 	.word	0x10068b08
		break;
10043f90:	46c0      	nop			@ (mov r8, r8)
	}
	if(transition){
10043f92:	2337      	movs	r3, #55	@ 0x37
10043f94:	18fb      	adds	r3, r7, r3
10043f96:	781b      	ldrb	r3, [r3, #0]
10043f98:	2b00      	cmp	r3, #0
10043f9a:	d01a      	beq.n	10043fd2 <COMM_Event_Handler+0x772>
		COMM_Event_Handler((Event_t){EVENT_EXIT});
10043f9c:	2110      	movs	r1, #16
10043f9e:	187b      	adds	r3, r7, r1
10043fa0:	2200      	movs	r2, #0
10043fa2:	601a      	str	r2, [r3, #0]
10043fa4:	187b      	adds	r3, r7, r1
10043fa6:	2203      	movs	r2, #3
10043fa8:	701a      	strb	r2, [r3, #0]
10043faa:	187b      	adds	r3, r7, r1
10043fac:	6818      	ldr	r0, [r3, #0]
10043fae:	f7ff fc57 	bl	10043860 <COMM_Event_Handler>
		commSM = next;
10043fb2:	4b0a      	ldr	r3, [pc, #40]	@ (10043fdc <COMM_Event_Handler+0x77c>)
10043fb4:	2236      	movs	r2, #54	@ 0x36
10043fb6:	18ba      	adds	r2, r7, r2
10043fb8:	7812      	ldrb	r2, [r2, #0]
10043fba:	701a      	strb	r2, [r3, #0]
		COMM_Event_Handler((Event_t){EVENT_ENTRY});
10043fbc:	210c      	movs	r1, #12
10043fbe:	187b      	adds	r3, r7, r1
10043fc0:	2200      	movs	r2, #0
10043fc2:	601a      	str	r2, [r3, #0]
10043fc4:	187b      	adds	r3, r7, r1
10043fc6:	2202      	movs	r2, #2
10043fc8:	701a      	strb	r2, [r3, #0]
10043fca:	187b      	adds	r3, r7, r1
10043fcc:	6818      	ldr	r0, [r3, #0]
10043fce:	f7ff fc47 	bl	10043860 <COMM_Event_Handler>
	}
	return 1;
10043fd2:	2301      	movs	r3, #1
}
10043fd4:	0018      	movs	r0, r3
10043fd6:	46bd      	mov	sp, r7
10043fd8:	b00e      	add	sp, #56	@ 0x38
10043fda:	bdb0      	pop	{r4, r5, r7, pc}
10043fdc:	200003b6 	.word	0x200003b6

10043fe0 <discountprintf>:
#include "DiscountIO.h"

#define DEBUGPRINT   	0x0E
#define DEBUGPRINTEND  	'\n'

int	discountprintf (const char * text){
10043fe0:	b580      	push	{r7, lr}
10043fe2:	b084      	sub	sp, #16
10043fe4:	af00      	add	r7, sp, #0
10043fe6:	6078      	str	r0, [r7, #4]
	int length = strlen(text);
10043fe8:	687b      	ldr	r3, [r7, #4]
10043fea:	0018      	movs	r0, r3
10043fec:	f7fc f916 	bl	1004021c <strlen>
10043ff0:	0003      	movs	r3, r0
10043ff2:	60bb      	str	r3, [r7, #8]
	USART_WriteTx(DEBUGPRINT);
10043ff4:	200e      	movs	r0, #14
10043ff6:	f002 fc51 	bl	1004689c <USART_WriteTx>
	for(int i = 0; i < length; i++){
10043ffa:	2300      	movs	r3, #0
10043ffc:	60fb      	str	r3, [r7, #12]
10043ffe:	e009      	b.n	10044014 <discountprintf+0x34>
		USART_WriteTx(text[i]);
10044000:	68fb      	ldr	r3, [r7, #12]
10044002:	687a      	ldr	r2, [r7, #4]
10044004:	18d3      	adds	r3, r2, r3
10044006:	781b      	ldrb	r3, [r3, #0]
10044008:	0018      	movs	r0, r3
1004400a:	f002 fc47 	bl	1004689c <USART_WriteTx>
	for(int i = 0; i < length; i++){
1004400e:	68fb      	ldr	r3, [r7, #12]
10044010:	3301      	adds	r3, #1
10044012:	60fb      	str	r3, [r7, #12]
10044014:	68fa      	ldr	r2, [r7, #12]
10044016:	68bb      	ldr	r3, [r7, #8]
10044018:	429a      	cmp	r2, r3
1004401a:	dbf1      	blt.n	10044000 <discountprintf+0x20>
	}
	USART_WriteTx(DEBUGPRINTEND);
1004401c:	200a      	movs	r0, #10
1004401e:	f002 fc3d 	bl	1004689c <USART_WriteTx>
	return 1;
10044022:	2301      	movs	r3, #1
}
10044024:	0018      	movs	r0, r3
10044026:	46bd      	mov	sp, r7
10044028:	b004      	add	sp, #16
1004402a:	bd80      	pop	{r7, pc}

1004402c <FIFO_Create>:

//----------------------------------------Private Functions--------------------------------------


//----------------------------------------Public Functions---------------------------------------
FIFO FIFO_Create(void){
1004402c:	b580      	push	{r7, lr}
1004402e:	b082      	sub	sp, #8
10044030:	af00      	add	r7, sp, #0
	FIFO new = malloc(sizeof(struct _FIFO));
10044032:	200c      	movs	r0, #12
10044034:	f023 fa0c 	bl	10067450 <malloc>
10044038:	0003      	movs	r3, r0
1004403a:	607b      	str	r3, [r7, #4]
	if(new == NULL){
1004403c:	687b      	ldr	r3, [r7, #4]
1004403e:	2b00      	cmp	r3, #0
10044040:	d101      	bne.n	10044046 <FIFO_Create+0x1a>
		return NULL;
10044042:	2300      	movs	r3, #0
10044044:	e009      	b.n	1004405a <FIFO_Create+0x2e>
	}
	new->first = NULL;
10044046:	687b      	ldr	r3, [r7, #4]
10044048:	2200      	movs	r2, #0
1004404a:	601a      	str	r2, [r3, #0]
	new->last = NULL;
1004404c:	687b      	ldr	r3, [r7, #4]
1004404e:	2200      	movs	r2, #0
10044050:	605a      	str	r2, [r3, #4]
	new->size = 0;
10044052:	687b      	ldr	r3, [r7, #4]
10044054:	2200      	movs	r2, #0
10044056:	811a      	strh	r2, [r3, #8]
	return new;
10044058:	687b      	ldr	r3, [r7, #4]
}
1004405a:	0018      	movs	r0, r3
1004405c:	46bd      	mov	sp, r7
1004405e:	b002      	add	sp, #8
10044060:	bd80      	pop	{r7, pc}

10044062 <FIFO_Destroy>:

uint8_t FIFO_Destroy(FIFO doomed){
10044062:	b580      	push	{r7, lr}
10044064:	b084      	sub	sp, #16
10044066:	af00      	add	r7, sp, #0
10044068:	6078      	str	r0, [r7, #4]
	if(doomed == NULL){
1004406a:	687b      	ldr	r3, [r7, #4]
1004406c:	2b00      	cmp	r3, #0
1004406e:	d101      	bne.n	10044074 <FIFO_Destroy+0x12>
		return 0;// operation failled
10044070:	2300      	movs	r3, #0
10044072:	e014      	b.n	1004409e <FIFO_Destroy+0x3c>
	}
	node* cur = doomed->first;
10044074:	687b      	ldr	r3, [r7, #4]
10044076:	681b      	ldr	r3, [r3, #0]
10044078:	60fb      	str	r3, [r7, #12]
	while(cur != NULL){
1004407a:	e008      	b.n	1004408e <FIFO_Destroy+0x2c>
		node* last = cur;
1004407c:	68fb      	ldr	r3, [r7, #12]
1004407e:	60bb      	str	r3, [r7, #8]
		cur = cur->next;
10044080:	68fb      	ldr	r3, [r7, #12]
10044082:	685b      	ldr	r3, [r3, #4]
10044084:	60fb      	str	r3, [r7, #12]
		free(last);
10044086:	68bb      	ldr	r3, [r7, #8]
10044088:	0018      	movs	r0, r3
1004408a:	f023 f9eb 	bl	10067464 <free>
	while(cur != NULL){
1004408e:	68fb      	ldr	r3, [r7, #12]
10044090:	2b00      	cmp	r3, #0
10044092:	d1f3      	bne.n	1004407c <FIFO_Destroy+0x1a>
	}
	free(doomed);
10044094:	687b      	ldr	r3, [r7, #4]
10044096:	0018      	movs	r0, r3
10044098:	f023 f9e4 	bl	10067464 <free>
	return 1;
1004409c:	2301      	movs	r3, #1
}
1004409e:	0018      	movs	r0, r3
100440a0:	46bd      	mov	sp, r7
100440a2:	b004      	add	sp, #16
100440a4:	bd80      	pop	{r7, pc}

100440a6 <FIFO_Enqueue>:

uint8_t FIFO_Enqueue(FIFO list, Event_t event){
100440a6:	b580      	push	{r7, lr}
100440a8:	b084      	sub	sp, #16
100440aa:	af00      	add	r7, sp, #0
100440ac:	6078      	str	r0, [r7, #4]
100440ae:	003b      	movs	r3, r7
100440b0:	6019      	str	r1, [r3, #0]
	if(list == NULL){
100440b2:	687b      	ldr	r3, [r7, #4]
100440b4:	2b00      	cmp	r3, #0
100440b6:	d101      	bne.n	100440bc <FIFO_Enqueue+0x16>
		return 0;
100440b8:	2300      	movs	r3, #0
100440ba:	e026      	b.n	1004410a <FIFO_Enqueue+0x64>
	}
	node* new = malloc(sizeof(node));
100440bc:	2008      	movs	r0, #8
100440be:	f023 f9c7 	bl	10067450 <malloc>
100440c2:	0003      	movs	r3, r0
100440c4:	60fb      	str	r3, [r7, #12]
	if(new == NULL){
100440c6:	68fb      	ldr	r3, [r7, #12]
100440c8:	2b00      	cmp	r3, #0
100440ca:	d101      	bne.n	100440d0 <FIFO_Enqueue+0x2a>
		return 0;
100440cc:	2300      	movs	r3, #0
100440ce:	e01c      	b.n	1004410a <FIFO_Enqueue+0x64>
	}
	new->event = event;
100440d0:	68fb      	ldr	r3, [r7, #12]
100440d2:	003a      	movs	r2, r7
100440d4:	6812      	ldr	r2, [r2, #0]
100440d6:	601a      	str	r2, [r3, #0]
	new->next = NULL;
100440d8:	68fb      	ldr	r3, [r7, #12]
100440da:	2200      	movs	r2, #0
100440dc:	605a      	str	r2, [r3, #4]
	if(list->last != NULL){//predefined list
100440de:	687b      	ldr	r3, [r7, #4]
100440e0:	685b      	ldr	r3, [r3, #4]
100440e2:	2b00      	cmp	r3, #0
100440e4:	d004      	beq.n	100440f0 <FIFO_Enqueue+0x4a>
		list->last->next = new;
100440e6:	687b      	ldr	r3, [r7, #4]
100440e8:	685b      	ldr	r3, [r3, #4]
100440ea:	68fa      	ldr	r2, [r7, #12]
100440ec:	605a      	str	r2, [r3, #4]
100440ee:	e002      	b.n	100440f6 <FIFO_Enqueue+0x50>
	}else{//new list
		list->first = new;
100440f0:	687b      	ldr	r3, [r7, #4]
100440f2:	68fa      	ldr	r2, [r7, #12]
100440f4:	601a      	str	r2, [r3, #0]
	}
	list->last = new;
100440f6:	687b      	ldr	r3, [r7, #4]
100440f8:	68fa      	ldr	r2, [r7, #12]
100440fa:	605a      	str	r2, [r3, #4]
	list->size++;
100440fc:	687b      	ldr	r3, [r7, #4]
100440fe:	891b      	ldrh	r3, [r3, #8]
10044100:	3301      	adds	r3, #1
10044102:	b29a      	uxth	r2, r3
10044104:	687b      	ldr	r3, [r7, #4]
10044106:	811a      	strh	r2, [r3, #8]
	return 1;
10044108:	2301      	movs	r3, #1
}
1004410a:	0018      	movs	r0, r3
1004410c:	46bd      	mov	sp, r7
1004410e:	b004      	add	sp, #16
10044110:	bd80      	pop	{r7, pc}

10044112 <FIFO_Dequeue>:

Event_t FIFO_Dequeue(FIFO list){
10044112:	b590      	push	{r4, r7, lr}
10044114:	b089      	sub	sp, #36	@ 0x24
10044116:	af00      	add	r7, sp, #0
10044118:	6078      	str	r0, [r7, #4]
	if(list == NULL){
1004411a:	687b      	ldr	r3, [r7, #4]
1004411c:	2b00      	cmp	r3, #0
1004411e:	d107      	bne.n	10044130 <FIFO_Dequeue+0x1e>
		return (Event_t){EVENT_ERROR, 0};
10044120:	2118      	movs	r1, #24
10044122:	187b      	adds	r3, r7, r1
10044124:	22ff      	movs	r2, #255	@ 0xff
10044126:	701a      	strb	r2, [r3, #0]
10044128:	187b      	adds	r3, r7, r1
1004412a:	2200      	movs	r2, #0
1004412c:	805a      	strh	r2, [r3, #2]
1004412e:	e030      	b.n	10044192 <FIFO_Dequeue+0x80>
	}
	if(list->first == NULL){
10044130:	687b      	ldr	r3, [r7, #4]
10044132:	681b      	ldr	r3, [r3, #0]
10044134:	2b00      	cmp	r3, #0
10044136:	d10a      	bne.n	1004414e <FIFO_Dequeue+0x3c>
		list->last = NULL;// It is preferable to have a memory leak, rather than crash the system
10044138:	687b      	ldr	r3, [r7, #4]
1004413a:	2200      	movs	r2, #0
1004413c:	605a      	str	r2, [r3, #4]
		return (Event_t){EVENT_NONE, 0};
1004413e:	2118      	movs	r1, #24
10044140:	187b      	adds	r3, r7, r1
10044142:	2200      	movs	r2, #0
10044144:	701a      	strb	r2, [r3, #0]
10044146:	187b      	adds	r3, r7, r1
10044148:	2200      	movs	r2, #0
1004414a:	805a      	strh	r2, [r3, #2]
1004414c:	e021      	b.n	10044192 <FIFO_Dequeue+0x80>
	}
	node* doomed = list->first;
1004414e:	687b      	ldr	r3, [r7, #4]
10044150:	681b      	ldr	r3, [r3, #0]
10044152:	61fb      	str	r3, [r7, #28]
	list->first = doomed->next;
10044154:	69fb      	ldr	r3, [r7, #28]
10044156:	685a      	ldr	r2, [r3, #4]
10044158:	687b      	ldr	r3, [r7, #4]
1004415a:	601a      	str	r2, [r3, #0]
	if(list->first == NULL){
1004415c:	687b      	ldr	r3, [r7, #4]
1004415e:	681b      	ldr	r3, [r3, #0]
10044160:	2b00      	cmp	r3, #0
10044162:	d102      	bne.n	1004416a <FIFO_Dequeue+0x58>
		list->last = NULL;
10044164:	687b      	ldr	r3, [r7, #4]
10044166:	2200      	movs	r2, #0
10044168:	605a      	str	r2, [r3, #4]
	}
	Event_t out = doomed->event;
1004416a:	2414      	movs	r4, #20
1004416c:	193b      	adds	r3, r7, r4
1004416e:	69fa      	ldr	r2, [r7, #28]
10044170:	6812      	ldr	r2, [r2, #0]
10044172:	601a      	str	r2, [r3, #0]
	free(doomed);
10044174:	69fb      	ldr	r3, [r7, #28]
10044176:	0018      	movs	r0, r3
10044178:	f023 f974 	bl	10067464 <free>
	list->size--;
1004417c:	687b      	ldr	r3, [r7, #4]
1004417e:	891b      	ldrh	r3, [r3, #8]
10044180:	3b01      	subs	r3, #1
10044182:	b29a      	uxth	r2, r3
10044184:	687b      	ldr	r3, [r7, #4]
10044186:	811a      	strh	r2, [r3, #8]
	return out;
10044188:	2318      	movs	r3, #24
1004418a:	18fb      	adds	r3, r7, r3
1004418c:	193a      	adds	r2, r7, r4
1004418e:	6812      	ldr	r2, [r2, #0]
10044190:	601a      	str	r2, [r3, #0]

}
10044192:	2318      	movs	r3, #24
10044194:	18fa      	adds	r2, r7, r3
10044196:	2300      	movs	r3, #0
10044198:	8811      	ldrh	r1, [r2, #0]
1004419a:	0409      	lsls	r1, r1, #16
1004419c:	0c09      	lsrs	r1, r1, #16
1004419e:	0c1b      	lsrs	r3, r3, #16
100441a0:	041b      	lsls	r3, r3, #16
100441a2:	430b      	orrs	r3, r1
100441a4:	8852      	ldrh	r2, [r2, #2]
100441a6:	0412      	lsls	r2, r2, #16
100441a8:	041b      	lsls	r3, r3, #16
100441aa:	0c1b      	lsrs	r3, r3, #16
100441ac:	4313      	orrs	r3, r2
100441ae:	0018      	movs	r0, r3
100441b0:	46bd      	mov	sp, r7
100441b2:	b009      	add	sp, #36	@ 0x24
100441b4:	bd90      	pop	{r4, r7, pc}

100441b6 <FIFO_GetSize>:

bool FIFO_GetSize(FIFO list){
100441b6:	b580      	push	{r7, lr}
100441b8:	b082      	sub	sp, #8
100441ba:	af00      	add	r7, sp, #0
100441bc:	6078      	str	r0, [r7, #4]
	return list->size;
100441be:	687b      	ldr	r3, [r7, #4]
100441c0:	891b      	ldrh	r3, [r3, #8]
100441c2:	1e5a      	subs	r2, r3, #1
100441c4:	4193      	sbcs	r3, r2
100441c6:	b2db      	uxtb	r3, r3
}
100441c8:	0018      	movs	r0, r3
100441ca:	46bd      	mov	sp, r7
100441cc:	b002      	add	sp, #8
100441ce:	bd80      	pop	{r7, pc}

100441d0 <FLASH_Init>:
 * @function: FLASH_Init()
 * @brief: initialize the flash access library
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
uint8_t FLASH_Init(){
100441d0:	b580      	push	{r7, lr}
100441d2:	b082      	sub	sp, #8
100441d4:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
100441d6:	4b36      	ldr	r3, [pc, #216]	@ (100442b0 <FLASH_Init+0xe0>)
100441d8:	781b      	ldrb	r3, [r3, #0]
100441da:	2b00      	cmp	r3, #0
100441dc:	d001      	beq.n	100441e2 <FLASH_Init+0x12>
100441de:	2301      	movs	r3, #1
100441e0:	e062      	b.n	100442a8 <FLASH_Init+0xd8>
	
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
100441e2:	4b34      	ldr	r3, [pc, #208]	@ (100442b4 <FLASH_Init+0xe4>)
100441e4:	691a      	ldr	r2, [r3, #16]
100441e6:	4b33      	ldr	r3, [pc, #204]	@ (100442b4 <FLASH_Init+0xe4>)
100441e8:	210c      	movs	r1, #12
100441ea:	430a      	orrs	r2, r1
100441ec:	611a      	str	r2, [r3, #16]
	//find size of schedule
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
100441ee:	2300      	movs	r3, #0
100441f0:	607b      	str	r3, [r7, #4]
100441f2:	e00f      	b.n	10044214 <FLASH_Init+0x44>
		if ((uint8_t)(*(uint8_t*)(SCHEDULEADDRESS+(i*SCHEDULEEVENTSIZE))) == FLASHEMPTY ){
100441f4:	687b      	ldr	r3, [r7, #4]
100441f6:	4a30      	ldr	r2, [pc, #192]	@ (100442b8 <FLASH_Init+0xe8>)
100441f8:	4694      	mov	ip, r2
100441fa:	4463      	add	r3, ip
100441fc:	00db      	lsls	r3, r3, #3
100441fe:	781b      	ldrb	r3, [r3, #0]
10044200:	2bff      	cmp	r3, #255	@ 0xff
10044202:	d104      	bne.n	1004420e <FLASH_Init+0x3e>
			ScheduleSize = i;
10044204:	687b      	ldr	r3, [r7, #4]
10044206:	b21a      	sxth	r2, r3
10044208:	4b2c      	ldr	r3, [pc, #176]	@ (100442bc <FLASH_Init+0xec>)
1004420a:	801a      	strh	r2, [r3, #0]
			break;
1004420c:	e005      	b.n	1004421a <FLASH_Init+0x4a>
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
1004420e:	687b      	ldr	r3, [r7, #4]
10044210:	3301      	adds	r3, #1
10044212:	607b      	str	r3, [r7, #4]
10044214:	687b      	ldr	r3, [r7, #4]
10044216:	2bff      	cmp	r3, #255	@ 0xff
10044218:	ddec      	ble.n	100441f4 <FLASH_Init+0x24>
		}
	}
	//find size of logs
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
1004421a:	2300      	movs	r3, #0
1004421c:	603b      	str	r3, [r7, #0]
1004421e:	e00f      	b.n	10044240 <FLASH_Init+0x70>
		if ((uint8_t)(*(uint8_t*)(LOGSADDRESS+(i*SCHEDULEEVENTSIZE))) == FLASHEMPTY ){
10044220:	683b      	ldr	r3, [r7, #0]
10044222:	4a27      	ldr	r2, [pc, #156]	@ (100442c0 <FLASH_Init+0xf0>)
10044224:	4694      	mov	ip, r2
10044226:	4463      	add	r3, ip
10044228:	00db      	lsls	r3, r3, #3
1004422a:	781b      	ldrb	r3, [r3, #0]
1004422c:	2bff      	cmp	r3, #255	@ 0xff
1004422e:	d104      	bne.n	1004423a <FLASH_Init+0x6a>
			LogsSize = i;
10044230:	683b      	ldr	r3, [r7, #0]
10044232:	b21a      	sxth	r2, r3
10044234:	4b23      	ldr	r3, [pc, #140]	@ (100442c4 <FLASH_Init+0xf4>)
10044236:	801a      	strh	r2, [r3, #0]
			break;
10044238:	e005      	b.n	10044246 <FLASH_Init+0x76>
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
1004423a:	683b      	ldr	r3, [r7, #0]
1004423c:	3301      	adds	r3, #1
1004423e:	603b      	str	r3, [r7, #0]
10044240:	683b      	ldr	r3, [r7, #0]
10044242:	2bff      	cmp	r3, #255	@ 0xff
10044244:	ddec      	ble.n	10044220 <FLASH_Init+0x50>
		}
	}
	initialized = 1;
10044246:	4b1a      	ldr	r3, [pc, #104]	@ (100442b0 <FLASH_Init+0xe0>)
10044248:	2201      	movs	r2, #1
1004424a:	701a      	strb	r2, [r3, #0]
	//load default values into the duty cycle and volume if they are not initialized
	if(FLASH_GetVolume() == FLASHEMPTY ||FLASH_GetDutyCycle() == FLASHEMPTY){
1004424c:	f000 f87e 	bl	1004434c <FLASH_GetVolume>
10044250:	0003      	movs	r3, r0
10044252:	2bff      	cmp	r3, #255	@ 0xff
10044254:	d004      	beq.n	10044260 <FLASH_Init+0x90>
10044256:	f000 f88f 	bl	10044378 <FLASH_GetDutyCycle>
1004425a:	0003      	movs	r3, r0
1004425c:	2bff      	cmp	r3, #255	@ 0xff
1004425e:	d122      	bne.n	100442a6 <FLASH_Init+0xd6>
		if(FLASH_GetVolume() == FLASHEMPTY && FLASH_GetDutyCycle() == FLASHEMPTY){
10044260:	f000 f874 	bl	1004434c <FLASH_GetVolume>
10044264:	0003      	movs	r3, r0
10044266:	2bff      	cmp	r3, #255	@ 0xff
10044268:	d109      	bne.n	1004427e <FLASH_Init+0xae>
1004426a:	f000 f885 	bl	10044378 <FLASH_GetDutyCycle>
1004426e:	0003      	movs	r3, r0
10044270:	2bff      	cmp	r3, #255	@ 0xff
10044272:	d104      	bne.n	1004427e <FLASH_Init+0xae>
			FLASH_SetDCVol(50, 40);
10044274:	2128      	movs	r1, #40	@ 0x28
10044276:	2032      	movs	r0, #50	@ 0x32
10044278:	f000 f826 	bl	100442c8 <FLASH_SetDCVol>
1004427c:	e013      	b.n	100442a6 <FLASH_Init+0xd6>
		}else {
			if(FLASH_GetVolume() == FLASHEMPTY){
1004427e:	f000 f865 	bl	1004434c <FLASH_GetVolume>
10044282:	0003      	movs	r3, r0
10044284:	2bff      	cmp	r3, #255	@ 0xff
10044286:	d107      	bne.n	10044298 <FLASH_Init+0xc8>
				FLASH_SetDCVol(50, FLASH_GetDutyCycle());
10044288:	f000 f876 	bl	10044378 <FLASH_GetDutyCycle>
1004428c:	0003      	movs	r3, r0
1004428e:	0019      	movs	r1, r3
10044290:	2032      	movs	r0, #50	@ 0x32
10044292:	f000 f819 	bl	100442c8 <FLASH_SetDCVol>
10044296:	e006      	b.n	100442a6 <FLASH_Init+0xd6>
			}else {
				FLASH_SetDCVol(FLASH_GetVolume(), 40);
10044298:	f000 f858 	bl	1004434c <FLASH_GetVolume>
1004429c:	0003      	movs	r3, r0
1004429e:	2128      	movs	r1, #40	@ 0x28
100442a0:	0018      	movs	r0, r3
100442a2:	f000 f811 	bl	100442c8 <FLASH_SetDCVol>
			}
		}
	}
	return INIT_OK;
100442a6:	2301      	movs	r3, #1
}
100442a8:	0018      	movs	r0, r3
100442aa:	46bd      	mov	sp, r7
100442ac:	b002      	add	sp, #8
100442ae:	bd80      	pop	{r7, pc}
100442b0:	200003d0 	.word	0x200003d0
100442b4:	40001000 	.word	0x40001000
100442b8:	0200de00 	.word	0x0200de00
100442bc:	200003cc 	.word	0x200003cc
100442c0:	0200dd00 	.word	0x0200dd00
100442c4:	200003ce 	.word	0x200003ce

100442c8 <FLASH_SetDCVol>:
 * @function: FLASH_SetVolume();
 * @brief: edits the volume and duty cycle stored in memory
 * @param: none
 * @return: success status
 */
uint8_t FLASH_SetDCVol(uint8_t volume, uint8_t DC){
100442c8:	b5b0      	push	{r4, r5, r7, lr}
100442ca:	b088      	sub	sp, #32
100442cc:	af00      	add	r7, sp, #0
100442ce:	0002      	movs	r2, r0
100442d0:	1dfb      	adds	r3, r7, #7
100442d2:	701a      	strb	r2, [r3, #0]
100442d4:	1dbb      	adds	r3, r7, #6
100442d6:	1c0a      	adds	r2, r1, #0
100442d8:	701a      	strb	r2, [r3, #0]
	if(!initialized){return 0;}
100442da:	4b1a      	ldr	r3, [pc, #104]	@ (10044344 <FLASH_SetDCVol+0x7c>)
100442dc:	781b      	ldrb	r3, [r3, #0]
100442de:	2b00      	cmp	r3, #0
100442e0:	d101      	bne.n	100442e6 <FLASH_SetDCVol+0x1e>
100442e2:	2300      	movs	r3, #0
100442e4:	e02a      	b.n	1004433c <FLASH_SetDCVol+0x74>
	FLASH_EraseInitTypeDef erase;
	erase.Page = DCVOLPAGE;
100442e6:	210c      	movs	r1, #12
100442e8:	187b      	adds	r3, r7, r1
100442ea:	225c      	movs	r2, #92	@ 0x5c
100442ec:	605a      	str	r2, [r3, #4]
	erase.NbPages = 1;
100442ee:	187b      	adds	r3, r7, r1
100442f0:	2201      	movs	r2, #1
100442f2:	609a      	str	r2, [r3, #8]
	erase.TypeErase = FLASH_TYPEERASE_PAGES;
100442f4:	187b      	adds	r3, r7, r1
100442f6:	2200      	movs	r2, #0
100442f8:	601a      	str	r2, [r3, #0]
	uint32_t faultypage;
	HAL_FLASHEx_Erase(&erase, &faultypage);
100442fa:	2308      	movs	r3, #8
100442fc:	18fa      	adds	r2, r7, r3
100442fe:	187b      	adds	r3, r7, r1
10044300:	0011      	movs	r1, r2
10044302:	0018      	movs	r0, r3
10044304:	f003 fd08 	bl	10047d18 <HAL_FLASHEx_Erase>
	FLASH_GetVolume();
10044308:	f000 f820 	bl	1004434c <FLASH_GetVolume>
	FLASH_GetDutyCycle();
1004430c:	f000 f834 	bl	10044378 <FLASH_GetDutyCycle>
	uint32_t data = ((uint32_t)(DC)<<8)+(uint32_t)(volume);
10044310:	1dbb      	adds	r3, r7, #6
10044312:	781b      	ldrb	r3, [r3, #0]
10044314:	021a      	lsls	r2, r3, #8
10044316:	1dfb      	adds	r3, r7, #7
10044318:	781b      	ldrb	r3, [r3, #0]
1004431a:	18d3      	adds	r3, r2, r3
1004431c:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, VOLUMEADDRESS, data);
1004431e:	251b      	movs	r5, #27
10044320:	197c      	adds	r4, r7, r5
10044322:	69fb      	ldr	r3, [r7, #28]
10044324:	4908      	ldr	r1, [pc, #32]	@ (10044348 <FLASH_SetDCVol+0x80>)
10044326:	001a      	movs	r2, r3
10044328:	2000      	movs	r0, #0
1004432a:	f003 fc1b 	bl	10047b64 <HAL_FLASH_Program>
1004432e:	0003      	movs	r3, r0
10044330:	7023      	strb	r3, [r4, #0]
	return status == HAL_OK;
10044332:	197b      	adds	r3, r7, r5
10044334:	781b      	ldrb	r3, [r3, #0]
10044336:	425a      	negs	r2, r3
10044338:	4153      	adcs	r3, r2
1004433a:	b2db      	uxtb	r3, r3
}
1004433c:	0018      	movs	r0, r3
1004433e:	46bd      	mov	sp, r7
10044340:	b008      	add	sp, #32
10044342:	bdb0      	pop	{r4, r5, r7, pc}
10044344:	200003d0 	.word	0x200003d0
10044348:	1006e000 	.word	0x1006e000

1004434c <FLASH_GetVolume>:
 * @function: FLASH_GetVolume();
 * @brief: read the volume stored in memory
 * @param: none
 * @return: volume
 */
uint8_t FLASH_GetVolume(){
1004434c:	b580      	push	{r7, lr}
1004434e:	b082      	sub	sp, #8
10044350:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10044352:	4b07      	ldr	r3, [pc, #28]	@ (10044370 <FLASH_GetVolume+0x24>)
10044354:	781b      	ldrb	r3, [r3, #0]
10044356:	2b00      	cmp	r3, #0
10044358:	d101      	bne.n	1004435e <FLASH_GetVolume+0x12>
1004435a:	2300      	movs	r3, #0
1004435c:	e003      	b.n	10044366 <FLASH_GetVolume+0x1a>
	uint8_t* adr = (uint8_t*)VOLUMEADDRESS;
1004435e:	4b05      	ldr	r3, [pc, #20]	@ (10044374 <FLASH_GetVolume+0x28>)
10044360:	607b      	str	r3, [r7, #4]
	return *adr;
10044362:	687b      	ldr	r3, [r7, #4]
10044364:	781b      	ldrb	r3, [r3, #0]
}
10044366:	0018      	movs	r0, r3
10044368:	46bd      	mov	sp, r7
1004436a:	b002      	add	sp, #8
1004436c:	bd80      	pop	{r7, pc}
1004436e:	46c0      	nop			@ (mov r8, r8)
10044370:	200003d0 	.word	0x200003d0
10044374:	1006e000 	.word	0x1006e000

10044378 <FLASH_GetDutyCycle>:
 * @function: FLASH_GetDutyCycle();
 * @brief: read the volume stored in memory
 * @param: none
 * @return: Duty Cycle
 */
uint8_t FLASH_GetDutyCycle(){
10044378:	b580      	push	{r7, lr}
1004437a:	b082      	sub	sp, #8
1004437c:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
1004437e:	4b07      	ldr	r3, [pc, #28]	@ (1004439c <FLASH_GetDutyCycle+0x24>)
10044380:	781b      	ldrb	r3, [r3, #0]
10044382:	2b00      	cmp	r3, #0
10044384:	d101      	bne.n	1004438a <FLASH_GetDutyCycle+0x12>
10044386:	2300      	movs	r3, #0
10044388:	e003      	b.n	10044392 <FLASH_GetDutyCycle+0x1a>
	uint8_t* adr = (uint8_t*)DCADDRESS;
1004438a:	4b05      	ldr	r3, [pc, #20]	@ (100443a0 <FLASH_GetDutyCycle+0x28>)
1004438c:	607b      	str	r3, [r7, #4]
	return *adr;
1004438e:	687b      	ldr	r3, [r7, #4]
10044390:	781b      	ldrb	r3, [r3, #0]
}
10044392:	0018      	movs	r0, r3
10044394:	46bd      	mov	sp, r7
10044396:	b002      	add	sp, #8
10044398:	bd80      	pop	{r7, pc}
1004439a:	46c0      	nop			@ (mov r8, r8)
1004439c:	200003d0 	.word	0x200003d0
100443a0:	1006e001 	.word	0x1006e001

100443a4 <FLASH_AppendLogs>:
 * @function: FLASH_AppendLogs();
 * @brief: Adds a new event entry to the logs
 * @param: none
 * @return: success status
 */
uint8_t FLASH_AppendLogs(scheduleEvent event){
100443a4:	b580      	push	{r7, lr}
100443a6:	b084      	sub	sp, #16
100443a8:	af00      	add	r7, sp, #0
100443aa:	003b      	movs	r3, r7
100443ac:	6018      	str	r0, [r3, #0]
100443ae:	6059      	str	r1, [r3, #4]
	if(!initialized){return 0;}
100443b0:	4b2c      	ldr	r3, [pc, #176]	@ (10044464 <FLASH_AppendLogs+0xc0>)
100443b2:	781b      	ldrb	r3, [r3, #0]
100443b4:	2b00      	cmp	r3, #0
100443b6:	d101      	bne.n	100443bc <FLASH_AppendLogs+0x18>
100443b8:	2300      	movs	r3, #0
100443ba:	e04f      	b.n	1004445c <FLASH_AppendLogs+0xb8>
	if (LogsSize >=FLASHPAGESIZE/SCHEDULEEVENTSIZE){return 0;}
100443bc:	4b2a      	ldr	r3, [pc, #168]	@ (10044468 <FLASH_AppendLogs+0xc4>)
100443be:	2200      	movs	r2, #0
100443c0:	5e9b      	ldrsh	r3, [r3, r2]
100443c2:	2bff      	cmp	r3, #255	@ 0xff
100443c4:	dd01      	ble.n	100443ca <FLASH_AppendLogs+0x26>
100443c6:	2300      	movs	r3, #0
100443c8:	e048      	b.n	1004445c <FLASH_AppendLogs+0xb8>
	uint32_t Data1 = (event.month)|(event.daystart<<8)|(event.start<<16)|(event.stop<<24);
100443ca:	003b      	movs	r3, r7
100443cc:	781b      	ldrb	r3, [r3, #0]
100443ce:	001a      	movs	r2, r3
100443d0:	003b      	movs	r3, r7
100443d2:	785b      	ldrb	r3, [r3, #1]
100443d4:	021b      	lsls	r3, r3, #8
100443d6:	431a      	orrs	r2, r3
100443d8:	003b      	movs	r3, r7
100443da:	789b      	ldrb	r3, [r3, #2]
100443dc:	041b      	lsls	r3, r3, #16
100443de:	431a      	orrs	r2, r3
100443e0:	003b      	movs	r3, r7
100443e2:	78db      	ldrb	r3, [r3, #3]
100443e4:	061b      	lsls	r3, r3, #24
100443e6:	4313      	orrs	r3, r2
100443e8:	60fb      	str	r3, [r7, #12]
	uint32_t Data2 = (event.daystop)|(event.folder<<8)|(event.track<<16);
100443ea:	003b      	movs	r3, r7
100443ec:	791b      	ldrb	r3, [r3, #4]
100443ee:	001a      	movs	r2, r3
100443f0:	003b      	movs	r3, r7
100443f2:	795b      	ldrb	r3, [r3, #5]
100443f4:	021b      	lsls	r3, r3, #8
100443f6:	431a      	orrs	r2, r3
100443f8:	003b      	movs	r3, r7
100443fa:	799b      	ldrb	r3, [r3, #6]
100443fc:	041b      	lsls	r3, r3, #16
100443fe:	4313      	orrs	r3, r2
10044400:	60bb      	str	r3, [r7, #8]
	//this isn't blocking code officer I swear! (this is blocking code, to be improved later)
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, LOGSADDRESS+LogsSize*SCHEDULEEVENTSIZE, Data1) != HAL_OK ){
10044402:	4b19      	ldr	r3, [pc, #100]	@ (10044468 <FLASH_AppendLogs+0xc4>)
10044404:	2200      	movs	r2, #0
10044406:	5e9b      	ldrsh	r3, [r3, r2]
10044408:	4a18      	ldr	r2, [pc, #96]	@ (1004446c <FLASH_AppendLogs+0xc8>)
1004440a:	4694      	mov	ip, r2
1004440c:	4463      	add	r3, ip
1004440e:	00db      	lsls	r3, r3, #3
10044410:	0019      	movs	r1, r3
10044412:	68fb      	ldr	r3, [r7, #12]
10044414:	001a      	movs	r2, r3
10044416:	2000      	movs	r0, #0
10044418:	f003 fba4 	bl	10047b64 <HAL_FLASH_Program>
1004441c:	1e03      	subs	r3, r0, #0
1004441e:	d001      	beq.n	10044424 <FLASH_AppendLogs+0x80>
		return 0;
10044420:	2300      	movs	r3, #0
10044422:	e01b      	b.n	1004445c <FLASH_AppendLogs+0xb8>
	}
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, LOGSADDRESS+LogsSize*SCHEDULEEVENTSIZE+4, Data2) != HAL_OK ){
10044424:	4b10      	ldr	r3, [pc, #64]	@ (10044468 <FLASH_AppendLogs+0xc4>)
10044426:	2200      	movs	r2, #0
10044428:	5e9b      	ldrsh	r3, [r3, r2]
1004442a:	4a10      	ldr	r2, [pc, #64]	@ (1004446c <FLASH_AppendLogs+0xc8>)
1004442c:	4694      	mov	ip, r2
1004442e:	4463      	add	r3, ip
10044430:	00db      	lsls	r3, r3, #3
10044432:	3304      	adds	r3, #4
10044434:	0019      	movs	r1, r3
10044436:	68bb      	ldr	r3, [r7, #8]
10044438:	001a      	movs	r2, r3
1004443a:	2000      	movs	r0, #0
1004443c:	f003 fb92 	bl	10047b64 <HAL_FLASH_Program>
10044440:	1e03      	subs	r3, r0, #0
10044442:	d001      	beq.n	10044448 <FLASH_AppendLogs+0xa4>
		return 0;
10044444:	2300      	movs	r3, #0
10044446:	e009      	b.n	1004445c <FLASH_AppendLogs+0xb8>
	}
	LogsSize++;
10044448:	4b07      	ldr	r3, [pc, #28]	@ (10044468 <FLASH_AppendLogs+0xc4>)
1004444a:	2200      	movs	r2, #0
1004444c:	5e9b      	ldrsh	r3, [r3, r2]
1004444e:	b29b      	uxth	r3, r3
10044450:	3301      	adds	r3, #1
10044452:	b29b      	uxth	r3, r3
10044454:	b21a      	sxth	r2, r3
10044456:	4b04      	ldr	r3, [pc, #16]	@ (10044468 <FLASH_AppendLogs+0xc4>)
10044458:	801a      	strh	r2, [r3, #0]
	return 1;
1004445a:	2301      	movs	r3, #1
}
1004445c:	0018      	movs	r0, r3
1004445e:	46bd      	mov	sp, r7
10044460:	b004      	add	sp, #16
10044462:	bd80      	pop	{r7, pc}
10044464:	200003d0 	.word	0x200003d0
10044468:	200003ce 	.word	0x200003ce
1004446c:	0200dd00 	.word	0x0200dd00

10044470 <FLASH_GetLogsSize>:
 * @function: FLASH_GetLogsSize();
 * @brief: returns the size of the logs
 * @param: none
 * @return: Logs size
 */
uint16_t FLASH_GetLogsSize(){
10044470:	b580      	push	{r7, lr}
10044472:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10044474:	4b06      	ldr	r3, [pc, #24]	@ (10044490 <FLASH_GetLogsSize+0x20>)
10044476:	781b      	ldrb	r3, [r3, #0]
10044478:	2b00      	cmp	r3, #0
1004447a:	d101      	bne.n	10044480 <FLASH_GetLogsSize+0x10>
1004447c:	2300      	movs	r3, #0
1004447e:	e003      	b.n	10044488 <FLASH_GetLogsSize+0x18>
	return LogsSize;
10044480:	4b04      	ldr	r3, [pc, #16]	@ (10044494 <FLASH_GetLogsSize+0x24>)
10044482:	2200      	movs	r2, #0
10044484:	5e9b      	ldrsh	r3, [r3, r2]
10044486:	b29b      	uxth	r3, r3
}
10044488:	0018      	movs	r0, r3
1004448a:	46bd      	mov	sp, r7
1004448c:	bd80      	pop	{r7, pc}
1004448e:	46c0      	nop			@ (mov r8, r8)
10044490:	200003d0 	.word	0x200003d0
10044494:	200003ce 	.word	0x200003ce

10044498 <FLASH_ReadLogs>:
 * @function: FLASH_ReadLogs();
 * @brief: allows reading the logs that have been stored in flash memory
 * @param: index to read at
 * @return: an schedule event struct at index, null if invalid index
 */
scheduleEvent FLASH_ReadLogs(uint16_t index){
10044498:	b590      	push	{r4, r7, lr}
1004449a:	b087      	sub	sp, #28
1004449c:	af00      	add	r7, sp, #0
1004449e:	6078      	str	r0, [r7, #4]
100444a0:	000a      	movs	r2, r1
100444a2:	1cbb      	adds	r3, r7, #2
100444a4:	801a      	strh	r2, [r3, #0]
	scheduleEvent event = (scheduleEvent){0, 0, 0, 0, 0, 0};
100444a6:	2410      	movs	r4, #16
100444a8:	193b      	adds	r3, r7, r4
100444aa:	0018      	movs	r0, r3
100444ac:	2307      	movs	r3, #7
100444ae:	001a      	movs	r2, r3
100444b0:	2100      	movs	r1, #0
100444b2:	f023 fad3 	bl	10067a5c <memset>
	if(!initialized){return event;}
100444b6:	4b33      	ldr	r3, [pc, #204]	@ (10044584 <FLASH_ReadLogs+0xec>)
100444b8:	781b      	ldrb	r3, [r3, #0]
100444ba:	2b00      	cmp	r3, #0
100444bc:	d108      	bne.n	100444d0 <FLASH_ReadLogs+0x38>
100444be:	687a      	ldr	r2, [r7, #4]
100444c0:	193b      	adds	r3, r7, r4
100444c2:	0010      	movs	r0, r2
100444c4:	0019      	movs	r1, r3
100444c6:	2307      	movs	r3, #7
100444c8:	001a      	movs	r2, r3
100444ca:	f023 fb3c 	bl	10067b46 <memcpy>
100444ce:	e055      	b.n	1004457c <FLASH_ReadLogs+0xe4>
	if(index >= 0 && index <= LogsSize){
100444d0:	1cbb      	adds	r3, r7, #2
100444d2:	881b      	ldrh	r3, [r3, #0]
100444d4:	4a2c      	ldr	r2, [pc, #176]	@ (10044588 <FLASH_ReadLogs+0xf0>)
100444d6:	2100      	movs	r1, #0
100444d8:	5e52      	ldrsh	r2, [r2, r1]
100444da:	4293      	cmp	r3, r2
100444dc:	dc45      	bgt.n	1004456a <FLASH_ReadLogs+0xd2>
		event.month = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE));
100444de:	1cbb      	adds	r3, r7, #2
100444e0:	881b      	ldrh	r3, [r3, #0]
100444e2:	4a2a      	ldr	r2, [pc, #168]	@ (1004458c <FLASH_ReadLogs+0xf4>)
100444e4:	4694      	mov	ip, r2
100444e6:	4463      	add	r3, ip
100444e8:	00db      	lsls	r3, r3, #3
100444ea:	781a      	ldrb	r2, [r3, #0]
100444ec:	2110      	movs	r1, #16
100444ee:	187b      	adds	r3, r7, r1
100444f0:	701a      	strb	r2, [r3, #0]
		event.daystart = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+1));
100444f2:	1cbb      	adds	r3, r7, #2
100444f4:	881b      	ldrh	r3, [r3, #0]
100444f6:	4a25      	ldr	r2, [pc, #148]	@ (1004458c <FLASH_ReadLogs+0xf4>)
100444f8:	4694      	mov	ip, r2
100444fa:	4463      	add	r3, ip
100444fc:	00db      	lsls	r3, r3, #3
100444fe:	3301      	adds	r3, #1
10044500:	781a      	ldrb	r2, [r3, #0]
10044502:	187b      	adds	r3, r7, r1
10044504:	705a      	strb	r2, [r3, #1]
		event.start = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+2));
10044506:	1cbb      	adds	r3, r7, #2
10044508:	881b      	ldrh	r3, [r3, #0]
1004450a:	4a20      	ldr	r2, [pc, #128]	@ (1004458c <FLASH_ReadLogs+0xf4>)
1004450c:	4694      	mov	ip, r2
1004450e:	4463      	add	r3, ip
10044510:	00db      	lsls	r3, r3, #3
10044512:	3302      	adds	r3, #2
10044514:	781a      	ldrb	r2, [r3, #0]
10044516:	187b      	adds	r3, r7, r1
10044518:	709a      	strb	r2, [r3, #2]
		event.stop = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+3));
1004451a:	1cbb      	adds	r3, r7, #2
1004451c:	881b      	ldrh	r3, [r3, #0]
1004451e:	4a1b      	ldr	r2, [pc, #108]	@ (1004458c <FLASH_ReadLogs+0xf4>)
10044520:	4694      	mov	ip, r2
10044522:	4463      	add	r3, ip
10044524:	00db      	lsls	r3, r3, #3
10044526:	3303      	adds	r3, #3
10044528:	781a      	ldrb	r2, [r3, #0]
1004452a:	187b      	adds	r3, r7, r1
1004452c:	70da      	strb	r2, [r3, #3]
		event.daystop = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+4));
1004452e:	1cbb      	adds	r3, r7, #2
10044530:	881b      	ldrh	r3, [r3, #0]
10044532:	4a16      	ldr	r2, [pc, #88]	@ (1004458c <FLASH_ReadLogs+0xf4>)
10044534:	4694      	mov	ip, r2
10044536:	4463      	add	r3, ip
10044538:	00db      	lsls	r3, r3, #3
1004453a:	3304      	adds	r3, #4
1004453c:	781a      	ldrb	r2, [r3, #0]
1004453e:	187b      	adds	r3, r7, r1
10044540:	711a      	strb	r2, [r3, #4]
		event.folder = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+5));
10044542:	1cbb      	adds	r3, r7, #2
10044544:	881b      	ldrh	r3, [r3, #0]
10044546:	4a11      	ldr	r2, [pc, #68]	@ (1004458c <FLASH_ReadLogs+0xf4>)
10044548:	4694      	mov	ip, r2
1004454a:	4463      	add	r3, ip
1004454c:	00db      	lsls	r3, r3, #3
1004454e:	3305      	adds	r3, #5
10044550:	781a      	ldrb	r2, [r3, #0]
10044552:	187b      	adds	r3, r7, r1
10044554:	715a      	strb	r2, [r3, #5]
		event.track = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+6));
10044556:	1cbb      	adds	r3, r7, #2
10044558:	881b      	ldrh	r3, [r3, #0]
1004455a:	4a0c      	ldr	r2, [pc, #48]	@ (1004458c <FLASH_ReadLogs+0xf4>)
1004455c:	4694      	mov	ip, r2
1004455e:	4463      	add	r3, ip
10044560:	00db      	lsls	r3, r3, #3
10044562:	3306      	adds	r3, #6
10044564:	781a      	ldrb	r2, [r3, #0]
10044566:	187b      	adds	r3, r7, r1
10044568:	719a      	strb	r2, [r3, #6]

	}
	return event;
1004456a:	687a      	ldr	r2, [r7, #4]
1004456c:	2310      	movs	r3, #16
1004456e:	18fb      	adds	r3, r7, r3
10044570:	0010      	movs	r0, r2
10044572:	0019      	movs	r1, r3
10044574:	2307      	movs	r3, #7
10044576:	001a      	movs	r2, r3
10044578:	f023 fae5 	bl	10067b46 <memcpy>
}
1004457c:	6878      	ldr	r0, [r7, #4]
1004457e:	46bd      	mov	sp, r7
10044580:	b007      	add	sp, #28
10044582:	bd90      	pop	{r4, r7, pc}
10044584:	200003d0 	.word	0x200003d0
10044588:	200003ce 	.word	0x200003ce
1004458c:	0200dd00 	.word	0x0200dd00

10044590 <FLASH_AppendSchedule>:
 * @function: FLASH_AppendSchedule();
 * @brief: Adds a new event entry to the schedule
 * @param: none
 * @return: success status
 */
uint8_t FLASH_AppendSchedule(scheduleEvent event){
10044590:	b580      	push	{r7, lr}
10044592:	b084      	sub	sp, #16
10044594:	af00      	add	r7, sp, #0
10044596:	003b      	movs	r3, r7
10044598:	6018      	str	r0, [r3, #0]
1004459a:	6059      	str	r1, [r3, #4]
	if(!initialized){return 0;}
1004459c:	4b2c      	ldr	r3, [pc, #176]	@ (10044650 <FLASH_AppendSchedule+0xc0>)
1004459e:	781b      	ldrb	r3, [r3, #0]
100445a0:	2b00      	cmp	r3, #0
100445a2:	d101      	bne.n	100445a8 <FLASH_AppendSchedule+0x18>
100445a4:	2300      	movs	r3, #0
100445a6:	e04f      	b.n	10044648 <FLASH_AppendSchedule+0xb8>
	if (ScheduleSize >=FLASHPAGESIZE/SCHEDULEEVENTSIZE){return 0;}
100445a8:	4b2a      	ldr	r3, [pc, #168]	@ (10044654 <FLASH_AppendSchedule+0xc4>)
100445aa:	2200      	movs	r2, #0
100445ac:	5e9b      	ldrsh	r3, [r3, r2]
100445ae:	2bff      	cmp	r3, #255	@ 0xff
100445b0:	dd01      	ble.n	100445b6 <FLASH_AppendSchedule+0x26>
100445b2:	2300      	movs	r3, #0
100445b4:	e048      	b.n	10044648 <FLASH_AppendSchedule+0xb8>
	uint32_t Data1 = (event.month)|(event.daystart<<8)|(event.start<<16)|(event.stop<<24);
100445b6:	003b      	movs	r3, r7
100445b8:	781b      	ldrb	r3, [r3, #0]
100445ba:	001a      	movs	r2, r3
100445bc:	003b      	movs	r3, r7
100445be:	785b      	ldrb	r3, [r3, #1]
100445c0:	021b      	lsls	r3, r3, #8
100445c2:	431a      	orrs	r2, r3
100445c4:	003b      	movs	r3, r7
100445c6:	789b      	ldrb	r3, [r3, #2]
100445c8:	041b      	lsls	r3, r3, #16
100445ca:	431a      	orrs	r2, r3
100445cc:	003b      	movs	r3, r7
100445ce:	78db      	ldrb	r3, [r3, #3]
100445d0:	061b      	lsls	r3, r3, #24
100445d2:	4313      	orrs	r3, r2
100445d4:	60fb      	str	r3, [r7, #12]
	uint32_t Data2 = (event.daystop)|(event.folder<<8)|(event.track<<16);
100445d6:	003b      	movs	r3, r7
100445d8:	791b      	ldrb	r3, [r3, #4]
100445da:	001a      	movs	r2, r3
100445dc:	003b      	movs	r3, r7
100445de:	795b      	ldrb	r3, [r3, #5]
100445e0:	021b      	lsls	r3, r3, #8
100445e2:	431a      	orrs	r2, r3
100445e4:	003b      	movs	r3, r7
100445e6:	799b      	ldrb	r3, [r3, #6]
100445e8:	041b      	lsls	r3, r3, #16
100445ea:	4313      	orrs	r3, r2
100445ec:	60bb      	str	r3, [r7, #8]
	//this isn't blocking code officer I swear! (this is blocking code)
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, SCHEDULEADDRESS+ScheduleSize*SCHEDULEEVENTSIZE, Data1) != HAL_OK ){
100445ee:	4b19      	ldr	r3, [pc, #100]	@ (10044654 <FLASH_AppendSchedule+0xc4>)
100445f0:	2200      	movs	r2, #0
100445f2:	5e9b      	ldrsh	r3, [r3, r2]
100445f4:	4a18      	ldr	r2, [pc, #96]	@ (10044658 <FLASH_AppendSchedule+0xc8>)
100445f6:	4694      	mov	ip, r2
100445f8:	4463      	add	r3, ip
100445fa:	00db      	lsls	r3, r3, #3
100445fc:	0019      	movs	r1, r3
100445fe:	68fb      	ldr	r3, [r7, #12]
10044600:	001a      	movs	r2, r3
10044602:	2000      	movs	r0, #0
10044604:	f003 faae 	bl	10047b64 <HAL_FLASH_Program>
10044608:	1e03      	subs	r3, r0, #0
1004460a:	d001      	beq.n	10044610 <FLASH_AppendSchedule+0x80>
		return 0;
1004460c:	2300      	movs	r3, #0
1004460e:	e01b      	b.n	10044648 <FLASH_AppendSchedule+0xb8>
	}
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, SCHEDULEADDRESS+ScheduleSize*SCHEDULEEVENTSIZE+4, Data2) != HAL_OK ){
10044610:	4b10      	ldr	r3, [pc, #64]	@ (10044654 <FLASH_AppendSchedule+0xc4>)
10044612:	2200      	movs	r2, #0
10044614:	5e9b      	ldrsh	r3, [r3, r2]
10044616:	4a10      	ldr	r2, [pc, #64]	@ (10044658 <FLASH_AppendSchedule+0xc8>)
10044618:	4694      	mov	ip, r2
1004461a:	4463      	add	r3, ip
1004461c:	00db      	lsls	r3, r3, #3
1004461e:	3304      	adds	r3, #4
10044620:	0019      	movs	r1, r3
10044622:	68bb      	ldr	r3, [r7, #8]
10044624:	001a      	movs	r2, r3
10044626:	2000      	movs	r0, #0
10044628:	f003 fa9c 	bl	10047b64 <HAL_FLASH_Program>
1004462c:	1e03      	subs	r3, r0, #0
1004462e:	d001      	beq.n	10044634 <FLASH_AppendSchedule+0xa4>
		return 0;
10044630:	2300      	movs	r3, #0
10044632:	e009      	b.n	10044648 <FLASH_AppendSchedule+0xb8>
	}
	ScheduleSize++;
10044634:	4b07      	ldr	r3, [pc, #28]	@ (10044654 <FLASH_AppendSchedule+0xc4>)
10044636:	2200      	movs	r2, #0
10044638:	5e9b      	ldrsh	r3, [r3, r2]
1004463a:	b29b      	uxth	r3, r3
1004463c:	3301      	adds	r3, #1
1004463e:	b29b      	uxth	r3, r3
10044640:	b21a      	sxth	r2, r3
10044642:	4b04      	ldr	r3, [pc, #16]	@ (10044654 <FLASH_AppendSchedule+0xc4>)
10044644:	801a      	strh	r2, [r3, #0]
	return 1;
10044646:	2301      	movs	r3, #1
}
10044648:	0018      	movs	r0, r3
1004464a:	46bd      	mov	sp, r7
1004464c:	b004      	add	sp, #16
1004464e:	bd80      	pop	{r7, pc}
10044650:	200003d0 	.word	0x200003d0
10044654:	200003cc 	.word	0x200003cc
10044658:	0200de00 	.word	0x0200de00

1004465c <FLASH_GetScheduleSize>:
 * @function: FLASH_GetScheduleSize();
 * @brief: returns the size of the schedule
 * @param: none
 * @return: Schedule size
 */
uint16_t FLASH_GetScheduleSize(){
1004465c:	b580      	push	{r7, lr}
1004465e:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10044660:	4b06      	ldr	r3, [pc, #24]	@ (1004467c <FLASH_GetScheduleSize+0x20>)
10044662:	781b      	ldrb	r3, [r3, #0]
10044664:	2b00      	cmp	r3, #0
10044666:	d101      	bne.n	1004466c <FLASH_GetScheduleSize+0x10>
10044668:	2300      	movs	r3, #0
1004466a:	e003      	b.n	10044674 <FLASH_GetScheduleSize+0x18>
	return ScheduleSize;
1004466c:	4b04      	ldr	r3, [pc, #16]	@ (10044680 <FLASH_GetScheduleSize+0x24>)
1004466e:	2200      	movs	r2, #0
10044670:	5e9b      	ldrsh	r3, [r3, r2]
10044672:	b29b      	uxth	r3, r3
}
10044674:	0018      	movs	r0, r3
10044676:	46bd      	mov	sp, r7
10044678:	bd80      	pop	{r7, pc}
1004467a:	46c0      	nop			@ (mov r8, r8)
1004467c:	200003d0 	.word	0x200003d0
10044680:	200003cc 	.word	0x200003cc

10044684 <FLASH_ReadSchedule>:
 * @function: FLASH_ReadSchedule();
 * @brief: allows reading the schedule that have been stored in flash memory
 * @param: index to read at
 * @return: an schedule event struct at index
 */
scheduleEvent FLASH_ReadSchedule(uint16_t index){
10044684:	b590      	push	{r4, r7, lr}
10044686:	b087      	sub	sp, #28
10044688:	af00      	add	r7, sp, #0
1004468a:	6078      	str	r0, [r7, #4]
1004468c:	000a      	movs	r2, r1
1004468e:	1cbb      	adds	r3, r7, #2
10044690:	801a      	strh	r2, [r3, #0]
	scheduleEvent event = (scheduleEvent){0, 0, 0, 0, 0, 0};
10044692:	2410      	movs	r4, #16
10044694:	193b      	adds	r3, r7, r4
10044696:	0018      	movs	r0, r3
10044698:	2307      	movs	r3, #7
1004469a:	001a      	movs	r2, r3
1004469c:	2100      	movs	r1, #0
1004469e:	f023 f9dd 	bl	10067a5c <memset>
	if(!initialized){return event;}
100446a2:	4b33      	ldr	r3, [pc, #204]	@ (10044770 <FLASH_ReadSchedule+0xec>)
100446a4:	781b      	ldrb	r3, [r3, #0]
100446a6:	2b00      	cmp	r3, #0
100446a8:	d108      	bne.n	100446bc <FLASH_ReadSchedule+0x38>
100446aa:	687a      	ldr	r2, [r7, #4]
100446ac:	193b      	adds	r3, r7, r4
100446ae:	0010      	movs	r0, r2
100446b0:	0019      	movs	r1, r3
100446b2:	2307      	movs	r3, #7
100446b4:	001a      	movs	r2, r3
100446b6:	f023 fa46 	bl	10067b46 <memcpy>
100446ba:	e055      	b.n	10044768 <FLASH_ReadSchedule+0xe4>
	if(index >= 0 && index < ScheduleSize){
100446bc:	1cbb      	adds	r3, r7, #2
100446be:	881b      	ldrh	r3, [r3, #0]
100446c0:	4a2c      	ldr	r2, [pc, #176]	@ (10044774 <FLASH_ReadSchedule+0xf0>)
100446c2:	2100      	movs	r1, #0
100446c4:	5e52      	ldrsh	r2, [r2, r1]
100446c6:	4293      	cmp	r3, r2
100446c8:	da45      	bge.n	10044756 <FLASH_ReadSchedule+0xd2>
		event.month = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE));
100446ca:	1cbb      	adds	r3, r7, #2
100446cc:	881b      	ldrh	r3, [r3, #0]
100446ce:	4a2a      	ldr	r2, [pc, #168]	@ (10044778 <FLASH_ReadSchedule+0xf4>)
100446d0:	4694      	mov	ip, r2
100446d2:	4463      	add	r3, ip
100446d4:	00db      	lsls	r3, r3, #3
100446d6:	781a      	ldrb	r2, [r3, #0]
100446d8:	2110      	movs	r1, #16
100446da:	187b      	adds	r3, r7, r1
100446dc:	701a      	strb	r2, [r3, #0]
		event.daystart = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+1));
100446de:	1cbb      	adds	r3, r7, #2
100446e0:	881b      	ldrh	r3, [r3, #0]
100446e2:	4a25      	ldr	r2, [pc, #148]	@ (10044778 <FLASH_ReadSchedule+0xf4>)
100446e4:	4694      	mov	ip, r2
100446e6:	4463      	add	r3, ip
100446e8:	00db      	lsls	r3, r3, #3
100446ea:	3301      	adds	r3, #1
100446ec:	781a      	ldrb	r2, [r3, #0]
100446ee:	187b      	adds	r3, r7, r1
100446f0:	705a      	strb	r2, [r3, #1]
		event.start = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+2));
100446f2:	1cbb      	adds	r3, r7, #2
100446f4:	881b      	ldrh	r3, [r3, #0]
100446f6:	4a20      	ldr	r2, [pc, #128]	@ (10044778 <FLASH_ReadSchedule+0xf4>)
100446f8:	4694      	mov	ip, r2
100446fa:	4463      	add	r3, ip
100446fc:	00db      	lsls	r3, r3, #3
100446fe:	3302      	adds	r3, #2
10044700:	781a      	ldrb	r2, [r3, #0]
10044702:	187b      	adds	r3, r7, r1
10044704:	709a      	strb	r2, [r3, #2]
		event.stop = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+3));
10044706:	1cbb      	adds	r3, r7, #2
10044708:	881b      	ldrh	r3, [r3, #0]
1004470a:	4a1b      	ldr	r2, [pc, #108]	@ (10044778 <FLASH_ReadSchedule+0xf4>)
1004470c:	4694      	mov	ip, r2
1004470e:	4463      	add	r3, ip
10044710:	00db      	lsls	r3, r3, #3
10044712:	3303      	adds	r3, #3
10044714:	781a      	ldrb	r2, [r3, #0]
10044716:	187b      	adds	r3, r7, r1
10044718:	70da      	strb	r2, [r3, #3]
		event.daystop = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+4));
1004471a:	1cbb      	adds	r3, r7, #2
1004471c:	881b      	ldrh	r3, [r3, #0]
1004471e:	4a16      	ldr	r2, [pc, #88]	@ (10044778 <FLASH_ReadSchedule+0xf4>)
10044720:	4694      	mov	ip, r2
10044722:	4463      	add	r3, ip
10044724:	00db      	lsls	r3, r3, #3
10044726:	3304      	adds	r3, #4
10044728:	781a      	ldrb	r2, [r3, #0]
1004472a:	187b      	adds	r3, r7, r1
1004472c:	711a      	strb	r2, [r3, #4]
		event.folder = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+5));
1004472e:	1cbb      	adds	r3, r7, #2
10044730:	881b      	ldrh	r3, [r3, #0]
10044732:	4a11      	ldr	r2, [pc, #68]	@ (10044778 <FLASH_ReadSchedule+0xf4>)
10044734:	4694      	mov	ip, r2
10044736:	4463      	add	r3, ip
10044738:	00db      	lsls	r3, r3, #3
1004473a:	3305      	adds	r3, #5
1004473c:	781a      	ldrb	r2, [r3, #0]
1004473e:	187b      	adds	r3, r7, r1
10044740:	715a      	strb	r2, [r3, #5]
		event.track = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+6));
10044742:	1cbb      	adds	r3, r7, #2
10044744:	881b      	ldrh	r3, [r3, #0]
10044746:	4a0c      	ldr	r2, [pc, #48]	@ (10044778 <FLASH_ReadSchedule+0xf4>)
10044748:	4694      	mov	ip, r2
1004474a:	4463      	add	r3, ip
1004474c:	00db      	lsls	r3, r3, #3
1004474e:	3306      	adds	r3, #6
10044750:	781a      	ldrb	r2, [r3, #0]
10044752:	187b      	adds	r3, r7, r1
10044754:	719a      	strb	r2, [r3, #6]

	}
	return event;
10044756:	687a      	ldr	r2, [r7, #4]
10044758:	2310      	movs	r3, #16
1004475a:	18fb      	adds	r3, r7, r3
1004475c:	0010      	movs	r0, r2
1004475e:	0019      	movs	r1, r3
10044760:	2307      	movs	r3, #7
10044762:	001a      	movs	r2, r3
10044764:	f023 f9ef 	bl	10067b46 <memcpy>
}
10044768:	6878      	ldr	r0, [r7, #4]
1004476a:	46bd      	mov	sp, r7
1004476c:	b007      	add	sp, #28
1004476e:	bd90      	pop	{r4, r7, pc}
10044770:	200003d0 	.word	0x200003d0
10044774:	200003cc 	.word	0x200003cc
10044778:	0200dd00 	.word	0x0200dd00

1004477c <FLASH_ClearSchedule>:
 * @function: FLASH_ClearSchedule();
 * @brief: Clears all Schedule entries
 * @param: none
 * @return: success status
 */
uint8_t FLASH_ClearSchedule(){
1004477c:	b5b0      	push	{r4, r5, r7, lr}
1004477e:	b086      	sub	sp, #24
10044780:	af00      	add	r7, sp, #0
	ScheduleSize = 0;
10044782:	4b10      	ldr	r3, [pc, #64]	@ (100447c4 <FLASH_ClearSchedule+0x48>)
10044784:	2200      	movs	r2, #0
10044786:	801a      	strh	r2, [r3, #0]
	FLASH_EraseInitTypeDef erase;
	erase.Page = SCHEDULEPAGE;
10044788:	2108      	movs	r1, #8
1004478a:	187b      	adds	r3, r7, r1
1004478c:	225e      	movs	r2, #94	@ 0x5e
1004478e:	605a      	str	r2, [r3, #4]
	erase.NbPages = 1;
10044790:	187b      	adds	r3, r7, r1
10044792:	2201      	movs	r2, #1
10044794:	609a      	str	r2, [r3, #8]
	erase.TypeErase = FLASH_TYPEERASE_PAGES;
10044796:	187b      	adds	r3, r7, r1
10044798:	2200      	movs	r2, #0
1004479a:	601a      	str	r2, [r3, #0]
	uint32_t faultypage;
	HAL_StatusTypeDef status = HAL_FLASHEx_Erase(&erase, &faultypage);
1004479c:	2517      	movs	r5, #23
1004479e:	197c      	adds	r4, r7, r5
100447a0:	1d3a      	adds	r2, r7, #4
100447a2:	187b      	adds	r3, r7, r1
100447a4:	0011      	movs	r1, r2
100447a6:	0018      	movs	r0, r3
100447a8:	f003 fab6 	bl	10047d18 <HAL_FLASHEx_Erase>
100447ac:	0003      	movs	r3, r0
100447ae:	7023      	strb	r3, [r4, #0]
	return status == HAL_OK;
100447b0:	197b      	adds	r3, r7, r5
100447b2:	781b      	ldrb	r3, [r3, #0]
100447b4:	425a      	negs	r2, r3
100447b6:	4153      	adcs	r3, r2
100447b8:	b2db      	uxtb	r3, r3
}
100447ba:	0018      	movs	r0, r3
100447bc:	46bd      	mov	sp, r7
100447be:	b006      	add	sp, #24
100447c0:	bdb0      	pop	{r4, r5, r7, pc}
100447c2:	46c0      	nop			@ (mov r8, r8)
100447c4:	200003cc 	.word	0x200003cc

100447c8 <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
100447c8:	b580      	push	{r7, lr}
100447ca:	b084      	sub	sp, #16
100447cc:	af00      	add	r7, sp, #0
100447ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
100447d0:	4b07      	ldr	r3, [pc, #28]	@ (100447f0 <LL_AHB1_GRP1_EnableClock+0x28>)
100447d2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
100447d4:	4b06      	ldr	r3, [pc, #24]	@ (100447f0 <LL_AHB1_GRP1_EnableClock+0x28>)
100447d6:	687a      	ldr	r2, [r7, #4]
100447d8:	430a      	orrs	r2, r1
100447da:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
100447dc:	4b04      	ldr	r3, [pc, #16]	@ (100447f0 <LL_AHB1_GRP1_EnableClock+0x28>)
100447de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100447e0:	687a      	ldr	r2, [r7, #4]
100447e2:	4013      	ands	r3, r2
100447e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100447e6:	68fb      	ldr	r3, [r7, #12]
}
100447e8:	46c0      	nop			@ (mov r8, r8)
100447ea:	46bd      	mov	sp, r7
100447ec:	b004      	add	sp, #16
100447ee:	bd80      	pop	{r7, pc}
100447f0:	48400000 	.word	0x48400000

100447f4 <GPIO_Init>:
 * @function: GPIO_Init()
 * @brief: initialized GPIO pins to receive 6 external buttons
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int GPIO_Init(){
100447f4:	b580      	push	{r7, lr}
100447f6:	b086      	sub	sp, #24
100447f8:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
100447fa:	4b1d      	ldr	r3, [pc, #116]	@ (10044870 <GPIO_Init+0x7c>)
100447fc:	781b      	ldrb	r3, [r3, #0]
100447fe:	2b00      	cmp	r3, #0
10044800:	d001      	beq.n	10044806 <GPIO_Init+0x12>
10044802:	2301      	movs	r3, #1
10044804:	e030      	b.n	10044868 <GPIO_Init+0x74>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
10044806:	1d3b      	adds	r3, r7, #4
10044808:	0018      	movs	r0, r3
1004480a:	2314      	movs	r3, #20
1004480c:	001a      	movs	r2, r3
1004480e:	2100      	movs	r1, #0
10044810:	f023 f924 	bl	10067a5c <memset>

	//GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
10044814:	2008      	movs	r0, #8
10044816:	f7ff ffd7 	bl	100447c8 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
1004481a:	2004      	movs	r0, #4
1004481c:	f7ff ffd4 	bl	100447c8 <LL_AHB1_GRP1_EnableClock>


	//Configure GPIO pins on port A
	GPIO_InitStruct.Pin = BUTTON_1_PIN | BUTTON_5_PIN | BUTTON_6_PIN ;
10044820:	1d3b      	adds	r3, r7, #4
10044822:	22b0      	movs	r2, #176	@ 0xb0
10044824:	0112      	lsls	r2, r2, #4
10044826:	601a      	str	r2, [r3, #0]
#ifndef USEDEBUG
//	GPIO_InitStruct.Pin |= BUTTON_2_PIN | BUTTON_3_PIN;//on a separate line to easily disable to allow the debugger to run
#endif
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
10044828:	1d3b      	adds	r3, r7, #4
1004482a:	2200      	movs	r2, #0
1004482c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
1004482e:	1d3b      	adds	r3, r7, #4
10044830:	2200      	movs	r2, #0
10044832:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10044834:	1d3a      	adds	r2, r7, #4
10044836:	2390      	movs	r3, #144	@ 0x90
10044838:	05db      	lsls	r3, r3, #23
1004483a:	0011      	movs	r1, r2
1004483c:	0018      	movs	r0, r3
1004483e:	f003 faeb 	bl	10047e18 <HAL_GPIO_Init>

	//Configure GPIO pins : PB15 PB13
	GPIO_InitStruct.Pin = BUTTON_4_PIN;
10044842:	1d3b      	adds	r3, r7, #4
10044844:	2210      	movs	r2, #16
10044846:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
10044848:	1d3b      	adds	r3, r7, #4
1004484a:	2200      	movs	r2, #0
1004484c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
1004484e:	1d3b      	adds	r3, r7, #4
10044850:	2200      	movs	r2, #0
10044852:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10044854:	1d3b      	adds	r3, r7, #4
10044856:	4a07      	ldr	r2, [pc, #28]	@ (10044874 <GPIO_Init+0x80>)
10044858:	0019      	movs	r1, r3
1004485a:	0010      	movs	r0, r2
1004485c:	f003 fadc 	bl	10047e18 <HAL_GPIO_Init>

	initialized = 1;
10044860:	4b03      	ldr	r3, [pc, #12]	@ (10044870 <GPIO_Init+0x7c>)
10044862:	2201      	movs	r2, #1
10044864:	701a      	strb	r2, [r3, #0]
	return INIT_OK;
10044866:	2301      	movs	r3, #1
}
10044868:	0018      	movs	r0, r3
1004486a:	46bd      	mov	sp, r7
1004486c:	b006      	add	sp, #24
1004486e:	bd80      	pop	{r7, pc}
10044870:	200003d1 	.word	0x200003d1
10044874:	48100000 	.word	0x48100000

10044878 <GPIO_ReadButtons>:
 * @Function: GPIO_ReadButtons
 * @Brief: Allows an easy way to read the external button states
 * @param: none
 * @return: An 8 bit integer where the LSB is button 0, and the 6th bit is button 5
 */
uint8_t GPIO_ReadButtons(void){
10044878:	b5b0      	push	{r4, r5, r7, lr}
1004487a:	af00      	add	r7, sp, #0
	return ((HAL_GPIO_ReadPin(BUTTON_6) << 5) |
1004487c:	2380      	movs	r3, #128	@ 0x80
1004487e:	011a      	lsls	r2, r3, #4
10044880:	2390      	movs	r3, #144	@ 0x90
10044882:	05db      	lsls	r3, r3, #23
10044884:	0011      	movs	r1, r2
10044886:	0018      	movs	r0, r3
10044888:	f003 fd4e 	bl	10048328 <HAL_GPIO_ReadPin>
1004488c:	0003      	movs	r3, r0
1004488e:	b25b      	sxtb	r3, r3
10044890:	015b      	lsls	r3, r3, #5
10044892:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(BUTTON_5) << 4) |
10044894:	2380      	movs	r3, #128	@ 0x80
10044896:	009a      	lsls	r2, r3, #2
10044898:	2390      	movs	r3, #144	@ 0x90
1004489a:	05db      	lsls	r3, r3, #23
1004489c:	0011      	movs	r1, r2
1004489e:	0018      	movs	r0, r3
100448a0:	f003 fd42 	bl	10048328 <HAL_GPIO_ReadPin>
100448a4:	0003      	movs	r3, r0
	return ((HAL_GPIO_ReadPin(BUTTON_6) << 5) |
100448a6:	b25b      	sxtb	r3, r3
100448a8:	011b      	lsls	r3, r3, #4
100448aa:	b25b      	sxtb	r3, r3
100448ac:	4323      	orrs	r3, r4
100448ae:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(BUTTON_4) << 3) |
100448b0:	4b19      	ldr	r3, [pc, #100]	@ (10044918 <GPIO_ReadButtons+0xa0>)
100448b2:	2110      	movs	r1, #16
100448b4:	0018      	movs	r0, r3
100448b6:	f003 fd37 	bl	10048328 <HAL_GPIO_ReadPin>
100448ba:	0003      	movs	r3, r0
			(HAL_GPIO_ReadPin(BUTTON_5) << 4) |
100448bc:	b25b      	sxtb	r3, r3
100448be:	00db      	lsls	r3, r3, #3
100448c0:	b25b      	sxtb	r3, r3
100448c2:	4323      	orrs	r3, r4
100448c4:	b25c      	sxtb	r4, r3
#ifndef USEDEBUG
			(HAL_GPIO_ReadPin(BUTTON_3) << 2) |
100448c6:	2390      	movs	r3, #144	@ 0x90
100448c8:	05db      	lsls	r3, r3, #23
100448ca:	2108      	movs	r1, #8
100448cc:	0018      	movs	r0, r3
100448ce:	f003 fd2b 	bl	10048328 <HAL_GPIO_ReadPin>
100448d2:	0003      	movs	r3, r0
			(HAL_GPIO_ReadPin(BUTTON_4) << 3) |
100448d4:	b25b      	sxtb	r3, r3
100448d6:	009b      	lsls	r3, r3, #2
100448d8:	b25b      	sxtb	r3, r3
100448da:	4323      	orrs	r3, r4
100448dc:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(BUTTON_2) << 1) |
100448de:	2390      	movs	r3, #144	@ 0x90
100448e0:	05db      	lsls	r3, r3, #23
100448e2:	2104      	movs	r1, #4
100448e4:	0018      	movs	r0, r3
100448e6:	f003 fd1f 	bl	10048328 <HAL_GPIO_ReadPin>
100448ea:	0003      	movs	r3, r0
			(HAL_GPIO_ReadPin(BUTTON_3) << 2) |
100448ec:	b25b      	sxtb	r3, r3
100448ee:	18db      	adds	r3, r3, r3
100448f0:	b25b      	sxtb	r3, r3
100448f2:	4323      	orrs	r3, r4
100448f4:	b25c      	sxtb	r4, r3
#else
			(1<<2)|
			(1<<1)|
#endif
			(HAL_GPIO_ReadPin(BUTTON_1) << 0));
100448f6:	2380      	movs	r3, #128	@ 0x80
100448f8:	005a      	lsls	r2, r3, #1
100448fa:	2390      	movs	r3, #144	@ 0x90
100448fc:	05db      	lsls	r3, r3, #23
100448fe:	0011      	movs	r1, r2
10044900:	0018      	movs	r0, r3
10044902:	f003 fd11 	bl	10048328 <HAL_GPIO_ReadPin>
10044906:	0003      	movs	r3, r0
10044908:	b25b      	sxtb	r3, r3
			(HAL_GPIO_ReadPin(BUTTON_2) << 1) |
1004490a:	4323      	orrs	r3, r4
1004490c:	b25b      	sxtb	r3, r3
1004490e:	b2db      	uxtb	r3, r3
}
10044910:	0018      	movs	r0, r3
10044912:	46bd      	mov	sp, r7
10044914:	bdb0      	pop	{r4, r5, r7, pc}
10044916:	46c0      	nop			@ (mov r8, r8)
10044918:	48100000 	.word	0x48100000

1004491c <I2CUARTtoI2C>:
 * @brief: if control is with USART, swaps control from the USART to I2C
 * @brief: If the module does swap the pin, a delay is added to insure the pin is initialized before leaving
 * @param: delay - a boolean value that indicates if the function should delay because the pin is used immediately after
 * @return: Init Status, whether the operation failed or succeeded
 */
void I2CUARTtoI2C(uint8_t delay){
1004491c:	b590      	push	{r4, r7, lr}
1004491e:	b085      	sub	sp, #20
10044920:	af00      	add	r7, sp, #0
10044922:	0002      	movs	r2, r0
10044924:	1dfb      	adds	r3, r7, #7
10044926:	701a      	strb	r2, [r3, #0]
	if(PORTAPIN1.Alternate != GPIO_AF0_I2C1){
10044928:	4b22      	ldr	r3, [pc, #136]	@ (100449b4 <I2CUARTtoI2C+0x98>)
1004492a:	691b      	ldr	r3, [r3, #16]
1004492c:	2b00      	cmp	r3, #0
1004492e:	d03d      	beq.n	100449ac <I2CUARTtoI2C+0x90>
		 hi2c1.Lock = HAL_UNLOCKED;
10044930:	4b21      	ldr	r3, [pc, #132]	@ (100449b8 <I2CUARTtoI2C+0x9c>)
10044932:	2240      	movs	r2, #64	@ 0x40
10044934:	2100      	movs	r1, #0
10044936:	5499      	strb	r1, [r3, r2]
		 hi2c1.State = HAL_I2C_STATE_READY;
10044938:	4b1f      	ldr	r3, [pc, #124]	@ (100449b8 <I2CUARTtoI2C+0x9c>)
1004493a:	2241      	movs	r2, #65	@ 0x41
1004493c:	2120      	movs	r1, #32
1004493e:	5499      	strb	r1, [r3, r2]
		husart1.Instance->CR1 &= ~0x00000008;//disable the USART Transmit
10044940:	4b1e      	ldr	r3, [pc, #120]	@ (100449bc <I2CUARTtoI2C+0xa0>)
10044942:	681b      	ldr	r3, [r3, #0]
10044944:	681a      	ldr	r2, [r3, #0]
10044946:	4b1d      	ldr	r3, [pc, #116]	@ (100449bc <I2CUARTtoI2C+0xa0>)
10044948:	681b      	ldr	r3, [r3, #0]
1004494a:	2108      	movs	r1, #8
1004494c:	438a      	bics	r2, r1
1004494e:	601a      	str	r2, [r3, #0]
//		BSP_LED_Off(LED_BLUE);
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
10044950:	2390      	movs	r3, #144	@ 0x90
10044952:	05db      	lsls	r3, r3, #23
10044954:	2102      	movs	r1, #2
10044956:	0018      	movs	r0, r3
10044958:	f003 fc03 	bl	10048162 <HAL_GPIO_DeInit>

		PORTAPIN1.Mode = GPIO_MODE_AF_OD;
1004495c:	4b15      	ldr	r3, [pc, #84]	@ (100449b4 <I2CUARTtoI2C+0x98>)
1004495e:	2212      	movs	r2, #18
10044960:	605a      	str	r2, [r3, #4]
		PORTAPIN1.Alternate = GPIO_AF0_I2C1;
10044962:	4b14      	ldr	r3, [pc, #80]	@ (100449b4 <I2CUARTtoI2C+0x98>)
10044964:	2200      	movs	r2, #0
10044966:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOA, &PORTAPIN1);
10044968:	4a12      	ldr	r2, [pc, #72]	@ (100449b4 <I2CUARTtoI2C+0x98>)
1004496a:	2390      	movs	r3, #144	@ 0x90
1004496c:	05db      	lsls	r3, r3, #23
1004496e:	0011      	movs	r1, r2
10044970:	0018      	movs	r0, r3
10044972:	f003 fa51 	bl	10047e18 <HAL_GPIO_Init>

		HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_A, PWR_GPIO_BIT_0);
10044976:	2101      	movs	r1, #1
10044978:	2000      	movs	r0, #0
1004497a:	f005 fd1d 	bl	1004a3b8 <HAL_PWREx_DisableGPIOPullUp>

		HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_0);
1004497e:	2101      	movs	r1, #1
10044980:	2000      	movs	r0, #0
10044982:	f005 fd47 	bl	1004a414 <HAL_PWREx_DisableGPIOPullDown>
		if(delay){
10044986:	1dfb      	adds	r3, r7, #7
10044988:	781b      	ldrb	r3, [r3, #0]
1004498a:	2b00      	cmp	r3, #0
1004498c:	d00c      	beq.n	100449a8 <I2CUARTtoI2C+0x8c>
			uint32_t start = TIMERS_GetMilliSeconds();
1004498e:	f001 fdd3 	bl	10046538 <TIMERS_GetMilliSeconds>
10044992:	0003      	movs	r3, r0
10044994:	60fb      	str	r3, [r7, #12]
			while(start+20 > TIMERS_GetMilliSeconds());
10044996:	46c0      	nop			@ (mov r8, r8)
10044998:	68fb      	ldr	r3, [r7, #12]
1004499a:	3314      	adds	r3, #20
1004499c:	001c      	movs	r4, r3
1004499e:	f001 fdcb 	bl	10046538 <TIMERS_GetMilliSeconds>
100449a2:	0003      	movs	r3, r0
100449a4:	429c      	cmp	r4, r3
100449a6:	d8f7      	bhi.n	10044998 <I2CUARTtoI2C+0x7c>
		}

		I2C_Flushbuffer();
100449a8:	f000 fa78 	bl	10044e9c <I2C_Flushbuffer>
	}
}
100449ac:	46c0      	nop			@ (mov r8, r8)
100449ae:	46bd      	mov	sp, r7
100449b0:	b005      	add	sp, #20
100449b2:	bd90      	pop	{r4, r7, pc}
100449b4:	20002618 	.word	0x20002618
100449b8:	2000262c 	.word	0x2000262c
100449bc:	20002684 	.word	0x20002684

100449c0 <I2C_Post>:

//----------------------------------------Private functions--------------------------------------
#ifdef I2CTESTHARNESS
void fakeposter(Event_t event);
#endif
HAL_StatusTypeDef I2C_Post(MemAdd_t* post){
100449c0:	b590      	push	{r4, r7, lr}
100449c2:	b085      	sub	sp, #20
100449c4:	af02      	add	r7, sp, #8
100449c6:	6078      	str	r0, [r7, #4]
	if(post->posterindex == 0){
100449c8:	687b      	ldr	r3, [r7, #4]
100449ca:	78db      	ldrb	r3, [r3, #3]
100449cc:	2b00      	cmp	r3, #0
100449ce:	d112      	bne.n	100449f6 <I2C_Post+0x36>
		return HAL_I2C_Mem_Write_IT(&hi2c1,
									post->targetadr<<1,
100449d0:	687b      	ldr	r3, [r7, #4]
100449d2:	781b      	ldrb	r3, [r3, #0]
		return HAL_I2C_Mem_Write_IT(&hi2c1,
100449d4:	18db      	adds	r3, r3, r3
100449d6:	b299      	uxth	r1, r3
									post->registeradr,
100449d8:	687b      	ldr	r3, [r7, #4]
100449da:	785b      	ldrb	r3, [r3, #1]
		return HAL_I2C_Mem_Write_IT(&hi2c1,
100449dc:	001c      	movs	r4, r3
100449de:	687b      	ldr	r3, [r7, #4]
100449e0:	3302      	adds	r3, #2
100449e2:	4810      	ldr	r0, [pc, #64]	@ (10044a24 <I2C_Post+0x64>)
100449e4:	2201      	movs	r2, #1
100449e6:	9201      	str	r2, [sp, #4]
100449e8:	9300      	str	r3, [sp, #0]
100449ea:	2301      	movs	r3, #1
100449ec:	0022      	movs	r2, r4
100449ee:	f003 fdc5 	bl	1004857c <HAL_I2C_Mem_Write_IT>
100449f2:	0003      	movs	r3, r0
100449f4:	e011      	b.n	10044a1a <I2C_Post+0x5a>
									I2C_MEMADD_SIZE_8BIT,
									&(post->data),
									1);
	} else {
		return HAL_I2C_Mem_Read_IT(&hi2c1,
								   post->targetadr<<1,
100449f6:	687b      	ldr	r3, [r7, #4]
100449f8:	781b      	ldrb	r3, [r3, #0]
		return HAL_I2C_Mem_Read_IT(&hi2c1,
100449fa:	18db      	adds	r3, r3, r3
100449fc:	b299      	uxth	r1, r3
								   post->registeradr,
100449fe:	687b      	ldr	r3, [r7, #4]
10044a00:	785b      	ldrb	r3, [r3, #1]
		return HAL_I2C_Mem_Read_IT(&hi2c1,
10044a02:	001c      	movs	r4, r3
10044a04:	687b      	ldr	r3, [r7, #4]
10044a06:	3302      	adds	r3, #2
10044a08:	4806      	ldr	r0, [pc, #24]	@ (10044a24 <I2C_Post+0x64>)
10044a0a:	2201      	movs	r2, #1
10044a0c:	9201      	str	r2, [sp, #4]
10044a0e:	9300      	str	r3, [sp, #0]
10044a10:	2301      	movs	r3, #1
10044a12:	0022      	movs	r2, r4
10044a14:	f003 fe54 	bl	100486c0 <HAL_I2C_Mem_Read_IT>
10044a18:	0003      	movs	r3, r0
								   I2C_MEMADD_SIZE_8BIT,
								   &(post->data),
								   1);

	}
}
10044a1a:	0018      	movs	r0, r3
10044a1c:	46bd      	mov	sp, r7
10044a1e:	b003      	add	sp, #12
10044a20:	bd90      	pop	{r4, r7, pc}
10044a22:	46c0      	nop			@ (mov r8, r8)
10044a24:	2000262c 	.word	0x2000262c

10044a28 <I2C_Enqueue>:

HAL_StatusTypeDef I2C_Enqueue(MemAdd_t Post){
10044a28:	b590      	push	{r4, r7, lr}
10044a2a:	b085      	sub	sp, #20
10044a2c:	af00      	add	r7, sp, #0
10044a2e:	1d3b      	adds	r3, r7, #4
10044a30:	6018      	str	r0, [r3, #0]
	if(!initialized){return HAL_ERROR;}
10044a32:	4b49      	ldr	r3, [pc, #292]	@ (10044b58 <I2C_Enqueue+0x130>)
10044a34:	781b      	ldrb	r3, [r3, #0]
10044a36:	2b00      	cmp	r3, #0
10044a38:	d101      	bne.n	10044a3e <I2C_Enqueue+0x16>
10044a3a:	2301      	movs	r3, #1
10044a3c:	e087      	b.n	10044b4e <I2C_Enqueue+0x126>
		HAL_StatusTypeDef status = HAL_OK;
10044a3e:	230f      	movs	r3, #15
10044a40:	18fb      	adds	r3, r7, r3
10044a42:	2200      	movs	r2, #0
10044a44:	701a      	strb	r2, [r3, #0]

		uint32_t start = TIMERS_GetMilliSeconds();
10044a46:	f001 fd77 	bl	10046538 <TIMERS_GetMilliSeconds>
10044a4a:	0003      	movs	r3, r0
10044a4c:	60bb      	str	r3, [r7, #8]
		while((MemBuff.tail == ((MemBuff.head+1)%CIRCBUFFERSIZE)) && (((start + I2CBUFFERTIMEOUT) > TIMERS_GetMilliSeconds())));
10044a4e:	46c0      	nop			@ (mov r8, r8)
10044a50:	4b42      	ldr	r3, [pc, #264]	@ (10044b5c <I2C_Enqueue+0x134>)
10044a52:	4a43      	ldr	r2, [pc, #268]	@ (10044b60 <I2C_Enqueue+0x138>)
10044a54:	5a9b      	ldrh	r3, [r3, r2]
10044a56:	001c      	movs	r4, r3
10044a58:	4a40      	ldr	r2, [pc, #256]	@ (10044b5c <I2C_Enqueue+0x134>)
10044a5a:	23c0      	movs	r3, #192	@ 0xc0
10044a5c:	015b      	lsls	r3, r3, #5
10044a5e:	5ad3      	ldrh	r3, [r2, r3]
10044a60:	3301      	adds	r3, #1
10044a62:	22c0      	movs	r2, #192	@ 0xc0
10044a64:	00d1      	lsls	r1, r2, #3
10044a66:	0018      	movs	r0, r3
10044a68:	f7fb fd5a 	bl	10040520 <__aeabi_idivmod>
10044a6c:	000b      	movs	r3, r1
10044a6e:	429c      	cmp	r4, r3
10044a70:	d108      	bne.n	10044a84 <I2C_Enqueue+0x5c>
10044a72:	68bb      	ldr	r3, [r7, #8]
10044a74:	22fa      	movs	r2, #250	@ 0xfa
10044a76:	0092      	lsls	r2, r2, #2
10044a78:	189c      	adds	r4, r3, r2
10044a7a:	f001 fd5d 	bl	10046538 <TIMERS_GetMilliSeconds>
10044a7e:	0003      	movs	r3, r0
10044a80:	429c      	cmp	r4, r3
10044a82:	d8e5      	bhi.n	10044a50 <I2C_Enqueue+0x28>
		if(MemBuff.tail == (MemBuff.head+1)%CIRCBUFFERSIZE){
10044a84:	4b35      	ldr	r3, [pc, #212]	@ (10044b5c <I2C_Enqueue+0x134>)
10044a86:	4a36      	ldr	r2, [pc, #216]	@ (10044b60 <I2C_Enqueue+0x138>)
10044a88:	5a9b      	ldrh	r3, [r3, r2]
10044a8a:	001c      	movs	r4, r3
10044a8c:	4a33      	ldr	r2, [pc, #204]	@ (10044b5c <I2C_Enqueue+0x134>)
10044a8e:	23c0      	movs	r3, #192	@ 0xc0
10044a90:	015b      	lsls	r3, r3, #5
10044a92:	5ad3      	ldrh	r3, [r2, r3]
10044a94:	3301      	adds	r3, #1
10044a96:	22c0      	movs	r2, #192	@ 0xc0
10044a98:	00d1      	lsls	r1, r2, #3
10044a9a:	0018      	movs	r0, r3
10044a9c:	f7fb fd40 	bl	10040520 <__aeabi_idivmod>
10044aa0:	000b      	movs	r3, r1
10044aa2:	429c      	cmp	r4, r3
10044aa4:	d104      	bne.n	10044ab0 <I2C_Enqueue+0x88>
			BSP_LED_On(LED_RED);//indicate a fatal buffer overflow
10044aa6:	2002      	movs	r0, #2
10044aa8:	f002 fe32 	bl	10047710 <BSP_LED_On>
			return HAL_ERROR;
10044aac:	2301      	movs	r3, #1
10044aae:	e04e      	b.n	10044b4e <I2C_Enqueue+0x126>
		}
		BSP_LED_Off(LED_RED);
10044ab0:	2002      	movs	r0, #2
10044ab2:	f002 fe4b 	bl	1004774c <BSP_LED_Off>
		//place the transmit request into the buffer
		//The I2C-UARTmanager will disable the module but leave the state as ready, the data will still be loaded into the register
		//The module will not transmit until arbitration is complete


		MemBuff.data[MemBuff.head] = Post;
10044ab6:	4a29      	ldr	r2, [pc, #164]	@ (10044b5c <I2C_Enqueue+0x134>)
10044ab8:	23c0      	movs	r3, #192	@ 0xc0
10044aba:	015b      	lsls	r3, r3, #5
10044abc:	5ad3      	ldrh	r3, [r2, r3]
10044abe:	4a27      	ldr	r2, [pc, #156]	@ (10044b5c <I2C_Enqueue+0x134>)
10044ac0:	0099      	lsls	r1, r3, #2
10044ac2:	1d3b      	adds	r3, r7, #4
10044ac4:	681b      	ldr	r3, [r3, #0]
10044ac6:	508b      	str	r3, [r1, r2]
		MemBuff.head++;
10044ac8:	4a24      	ldr	r2, [pc, #144]	@ (10044b5c <I2C_Enqueue+0x134>)
10044aca:	23c0      	movs	r3, #192	@ 0xc0
10044acc:	015b      	lsls	r3, r3, #5
10044ace:	5ad3      	ldrh	r3, [r2, r3]
10044ad0:	3301      	adds	r3, #1
10044ad2:	b299      	uxth	r1, r3
10044ad4:	4a21      	ldr	r2, [pc, #132]	@ (10044b5c <I2C_Enqueue+0x134>)
10044ad6:	23c0      	movs	r3, #192	@ 0xc0
10044ad8:	015b      	lsls	r3, r3, #5
10044ada:	52d1      	strh	r1, [r2, r3]
		MemBuff.head %= CIRCBUFFERSIZE;
10044adc:	4a1f      	ldr	r2, [pc, #124]	@ (10044b5c <I2C_Enqueue+0x134>)
10044ade:	23c0      	movs	r3, #192	@ 0xc0
10044ae0:	015b      	lsls	r3, r3, #5
10044ae2:	5ad3      	ldrh	r3, [r2, r3]
10044ae4:	22c0      	movs	r2, #192	@ 0xc0
10044ae6:	00d1      	lsls	r1, r2, #3
10044ae8:	0018      	movs	r0, r3
10044aea:	f7fb fc2f 	bl	1004034c <__aeabi_uidivmod>
10044aee:	000b      	movs	r3, r1
10044af0:	b299      	uxth	r1, r3
10044af2:	4a1a      	ldr	r2, [pc, #104]	@ (10044b5c <I2C_Enqueue+0x134>)
10044af4:	23c0      	movs	r3, #192	@ 0xc0
10044af6:	015b      	lsls	r3, r3, #5
10044af8:	52d1      	strh	r1, [r2, r3]
		if((MemBuff.tail+1)%CIRCBUFFERSIZE == MemBuff.head && hi2c1.State == HAL_I2C_STATE_READY){
10044afa:	4b18      	ldr	r3, [pc, #96]	@ (10044b5c <I2C_Enqueue+0x134>)
10044afc:	4a18      	ldr	r2, [pc, #96]	@ (10044b60 <I2C_Enqueue+0x138>)
10044afe:	5a9b      	ldrh	r3, [r3, r2]
10044b00:	3301      	adds	r3, #1
10044b02:	22c0      	movs	r2, #192	@ 0xc0
10044b04:	00d1      	lsls	r1, r2, #3
10044b06:	0018      	movs	r0, r3
10044b08:	f7fb fd0a 	bl	10040520 <__aeabi_idivmod>
10044b0c:	000b      	movs	r3, r1
10044b0e:	0019      	movs	r1, r3
10044b10:	4a12      	ldr	r2, [pc, #72]	@ (10044b5c <I2C_Enqueue+0x134>)
10044b12:	23c0      	movs	r3, #192	@ 0xc0
10044b14:	015b      	lsls	r3, r3, #5
10044b16:	5ad3      	ldrh	r3, [r2, r3]
10044b18:	4299      	cmp	r1, r3
10044b1a:	d115      	bne.n	10044b48 <I2C_Enqueue+0x120>
10044b1c:	4b11      	ldr	r3, [pc, #68]	@ (10044b64 <I2C_Enqueue+0x13c>)
10044b1e:	2241      	movs	r2, #65	@ 0x41
10044b20:	5c9b      	ldrb	r3, [r3, r2]
10044b22:	b2db      	uxtb	r3, r3
10044b24:	2b20      	cmp	r3, #32
10044b26:	d10f      	bne.n	10044b48 <I2C_Enqueue+0x120>
			I2CUARTtoI2C(1);
10044b28:	2001      	movs	r0, #1
10044b2a:	f7ff fef7 	bl	1004491c <I2CUARTtoI2C>
			status = I2C_Post(MemBuff.data+MemBuff.tail);
10044b2e:	4b0b      	ldr	r3, [pc, #44]	@ (10044b5c <I2C_Enqueue+0x134>)
10044b30:	4a0b      	ldr	r2, [pc, #44]	@ (10044b60 <I2C_Enqueue+0x138>)
10044b32:	5a9b      	ldrh	r3, [r3, r2]
10044b34:	009a      	lsls	r2, r3, #2
10044b36:	4b09      	ldr	r3, [pc, #36]	@ (10044b5c <I2C_Enqueue+0x134>)
10044b38:	18d3      	adds	r3, r2, r3
10044b3a:	220f      	movs	r2, #15
10044b3c:	18bc      	adds	r4, r7, r2
10044b3e:	0018      	movs	r0, r3
10044b40:	f7ff ff3e 	bl	100449c0 <I2C_Post>
10044b44:	0003      	movs	r3, r0
10044b46:	7023      	strb	r3, [r4, #0]

		}
		return status;
10044b48:	230f      	movs	r3, #15
10044b4a:	18fb      	adds	r3, r7, r3
10044b4c:	781b      	ldrb	r3, [r3, #0]
}
10044b4e:	0018      	movs	r0, r3
10044b50:	46bd      	mov	sp, r7
10044b52:	b005      	add	sp, #20
10044b54:	bd90      	pop	{r4, r7, pc}
10044b56:	46c0      	nop			@ (mov r8, r8)
10044b58:	20001bd8 	.word	0x20001bd8
10044b5c:	200003d4 	.word	0x200003d4
10044b60:	00001802 	.word	0x00001802
10044b64:	2000262c 	.word	0x2000262c

10044b68 <HAL_I2C_MemTxCpltCallback>:
 * @Function: HAL_I2C_MemTxCpltCallback
 * @Brief: Overwrites a weak HAL function. Called at the end of an i2c memory transmit operation
 * @param: hi2c: I2C module that is in use
 * @return: none
 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
10044b68:	b580      	push	{r7, lr}
10044b6a:	b082      	sub	sp, #8
10044b6c:	af00      	add	r7, sp, #0
10044b6e:	6078      	str	r0, [r7, #4]
	//operation complete, the data at tail is now out-dated;
	MemBuff.tail++;
10044b70:	4b16      	ldr	r3, [pc, #88]	@ (10044bcc <HAL_I2C_MemTxCpltCallback+0x64>)
10044b72:	4a17      	ldr	r2, [pc, #92]	@ (10044bd0 <HAL_I2C_MemTxCpltCallback+0x68>)
10044b74:	5a9b      	ldrh	r3, [r3, r2]
10044b76:	3301      	adds	r3, #1
10044b78:	b299      	uxth	r1, r3
10044b7a:	4b14      	ldr	r3, [pc, #80]	@ (10044bcc <HAL_I2C_MemTxCpltCallback+0x64>)
10044b7c:	4a14      	ldr	r2, [pc, #80]	@ (10044bd0 <HAL_I2C_MemTxCpltCallback+0x68>)
10044b7e:	5299      	strh	r1, [r3, r2]
	MemBuff.tail %= CIRCBUFFERSIZE;
10044b80:	4b12      	ldr	r3, [pc, #72]	@ (10044bcc <HAL_I2C_MemTxCpltCallback+0x64>)
10044b82:	4a13      	ldr	r2, [pc, #76]	@ (10044bd0 <HAL_I2C_MemTxCpltCallback+0x68>)
10044b84:	5a9b      	ldrh	r3, [r3, r2]
10044b86:	22c0      	movs	r2, #192	@ 0xc0
10044b88:	00d1      	lsls	r1, r2, #3
10044b8a:	0018      	movs	r0, r3
10044b8c:	f7fb fbde 	bl	1004034c <__aeabi_uidivmod>
10044b90:	000b      	movs	r3, r1
10044b92:	b299      	uxth	r1, r3
10044b94:	4b0d      	ldr	r3, [pc, #52]	@ (10044bcc <HAL_I2C_MemTxCpltCallback+0x64>)
10044b96:	4a0e      	ldr	r2, [pc, #56]	@ (10044bd0 <HAL_I2C_MemTxCpltCallback+0x68>)
10044b98:	5299      	strh	r1, [r3, r2]
	//if there is more in the buffer
	if(MemBuff.tail != MemBuff.head){
10044b9a:	4b0c      	ldr	r3, [pc, #48]	@ (10044bcc <HAL_I2C_MemTxCpltCallback+0x64>)
10044b9c:	4a0c      	ldr	r2, [pc, #48]	@ (10044bd0 <HAL_I2C_MemTxCpltCallback+0x68>)
10044b9e:	5a9a      	ldrh	r2, [r3, r2]
10044ba0:	490a      	ldr	r1, [pc, #40]	@ (10044bcc <HAL_I2C_MemTxCpltCallback+0x64>)
10044ba2:	23c0      	movs	r3, #192	@ 0xc0
10044ba4:	015b      	lsls	r3, r3, #5
10044ba6:	5acb      	ldrh	r3, [r1, r3]
10044ba8:	429a      	cmp	r2, r3
10044baa:	d00b      	beq.n	10044bc4 <HAL_I2C_MemTxCpltCallback+0x5c>
		I2CUARTtoI2C(1);
10044bac:	2001      	movs	r0, #1
10044bae:	f7ff feb5 	bl	1004491c <I2CUARTtoI2C>
		I2C_Post(MemBuff.data+MemBuff.tail);
10044bb2:	4b06      	ldr	r3, [pc, #24]	@ (10044bcc <HAL_I2C_MemTxCpltCallback+0x64>)
10044bb4:	4a06      	ldr	r2, [pc, #24]	@ (10044bd0 <HAL_I2C_MemTxCpltCallback+0x68>)
10044bb6:	5a9b      	ldrh	r3, [r3, r2]
10044bb8:	009a      	lsls	r2, r3, #2
10044bba:	4b04      	ldr	r3, [pc, #16]	@ (10044bcc <HAL_I2C_MemTxCpltCallback+0x64>)
10044bbc:	18d3      	adds	r3, r2, r3
10044bbe:	0018      	movs	r0, r3
10044bc0:	f7ff fefe 	bl	100449c0 <I2C_Post>

	}
}
10044bc4:	46c0      	nop			@ (mov r8, r8)
10044bc6:	46bd      	mov	sp, r7
10044bc8:	b002      	add	sp, #8
10044bca:	bd80      	pop	{r7, pc}
10044bcc:	200003d4 	.word	0x200003d4
10044bd0:	00001802 	.word	0x00001802

10044bd4 <HAL_I2C_MemRxCpltCallback>:
 * @Function: HAL_I2C_MemRxCpltCallback
 * @Brief: Overwrites a weak HAL function. Called at the end of an i2c memory receive operation
 * @param: hi2c: I2C module that is in use
 * @return: none
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
10044bd4:	b580      	push	{r7, lr}
10044bd6:	b084      	sub	sp, #16
10044bd8:	af00      	add	r7, sp, #0
10044bda:	6078      	str	r0, [r7, #4]

	//use the received data construct and event to post
	Event_t ret = {EVENT_I2C, MemBuff.data[MemBuff.tail].registeradr << 8 | MemBuff.data[MemBuff.tail].data};
10044bdc:	200c      	movs	r0, #12
10044bde:	183b      	adds	r3, r7, r0
10044be0:	2205      	movs	r2, #5
10044be2:	701a      	strb	r2, [r3, #0]
10044be4:	4b2a      	ldr	r3, [pc, #168]	@ (10044c90 <HAL_I2C_MemRxCpltCallback+0xbc>)
10044be6:	4a2b      	ldr	r2, [pc, #172]	@ (10044c94 <HAL_I2C_MemRxCpltCallback+0xc0>)
10044be8:	5a9b      	ldrh	r3, [r3, r2]
10044bea:	4a29      	ldr	r2, [pc, #164]	@ (10044c90 <HAL_I2C_MemRxCpltCallback+0xbc>)
10044bec:	009b      	lsls	r3, r3, #2
10044bee:	18d3      	adds	r3, r2, r3
10044bf0:	3301      	adds	r3, #1
10044bf2:	781b      	ldrb	r3, [r3, #0]
10044bf4:	b21b      	sxth	r3, r3
10044bf6:	021b      	lsls	r3, r3, #8
10044bf8:	b21a      	sxth	r2, r3
10044bfa:	4b25      	ldr	r3, [pc, #148]	@ (10044c90 <HAL_I2C_MemRxCpltCallback+0xbc>)
10044bfc:	4925      	ldr	r1, [pc, #148]	@ (10044c94 <HAL_I2C_MemRxCpltCallback+0xc0>)
10044bfe:	5a5b      	ldrh	r3, [r3, r1]
10044c00:	4923      	ldr	r1, [pc, #140]	@ (10044c90 <HAL_I2C_MemRxCpltCallback+0xbc>)
10044c02:	009b      	lsls	r3, r3, #2
10044c04:	18cb      	adds	r3, r1, r3
10044c06:	3302      	adds	r3, #2
10044c08:	781b      	ldrb	r3, [r3, #0]
10044c0a:	b21b      	sxth	r3, r3
10044c0c:	4313      	orrs	r3, r2
10044c0e:	b21b      	sxth	r3, r3
10044c10:	b29a      	uxth	r2, r3
10044c12:	183b      	adds	r3, r7, r0
10044c14:	805a      	strh	r2, [r3, #2]
	//post the event to the function given by the poster index

#ifdef I2CTESTHARNESS
	fakeposter(ret);
#else
	PosterList[MemBuff.data[MemBuff.tail].posterindex-1](ret);
10044c16:	4b1e      	ldr	r3, [pc, #120]	@ (10044c90 <HAL_I2C_MemRxCpltCallback+0xbc>)
10044c18:	4a1e      	ldr	r2, [pc, #120]	@ (10044c94 <HAL_I2C_MemRxCpltCallback+0xc0>)
10044c1a:	5a9b      	ldrh	r3, [r3, r2]
10044c1c:	4a1c      	ldr	r2, [pc, #112]	@ (10044c90 <HAL_I2C_MemRxCpltCallback+0xbc>)
10044c1e:	009b      	lsls	r3, r3, #2
10044c20:	18d3      	adds	r3, r2, r3
10044c22:	3303      	adds	r3, #3
10044c24:	781b      	ldrb	r3, [r3, #0]
10044c26:	1e5a      	subs	r2, r3, #1
10044c28:	4b1b      	ldr	r3, [pc, #108]	@ (10044c98 <HAL_I2C_MemRxCpltCallback+0xc4>)
10044c2a:	0092      	lsls	r2, r2, #2
10044c2c:	58d2      	ldr	r2, [r2, r3]
10044c2e:	183b      	adds	r3, r7, r0
10044c30:	6818      	ldr	r0, [r3, #0]
10044c32:	4790      	blx	r2
#endif
	//operation complete, the data at tail is now out-dated;
	MemBuff.tail++;
10044c34:	4b16      	ldr	r3, [pc, #88]	@ (10044c90 <HAL_I2C_MemRxCpltCallback+0xbc>)
10044c36:	4a17      	ldr	r2, [pc, #92]	@ (10044c94 <HAL_I2C_MemRxCpltCallback+0xc0>)
10044c38:	5a9b      	ldrh	r3, [r3, r2]
10044c3a:	3301      	adds	r3, #1
10044c3c:	b299      	uxth	r1, r3
10044c3e:	4b14      	ldr	r3, [pc, #80]	@ (10044c90 <HAL_I2C_MemRxCpltCallback+0xbc>)
10044c40:	4a14      	ldr	r2, [pc, #80]	@ (10044c94 <HAL_I2C_MemRxCpltCallback+0xc0>)
10044c42:	5299      	strh	r1, [r3, r2]
	MemBuff.tail %= CIRCBUFFERSIZE;
10044c44:	4b12      	ldr	r3, [pc, #72]	@ (10044c90 <HAL_I2C_MemRxCpltCallback+0xbc>)
10044c46:	4a13      	ldr	r2, [pc, #76]	@ (10044c94 <HAL_I2C_MemRxCpltCallback+0xc0>)
10044c48:	5a9b      	ldrh	r3, [r3, r2]
10044c4a:	22c0      	movs	r2, #192	@ 0xc0
10044c4c:	00d1      	lsls	r1, r2, #3
10044c4e:	0018      	movs	r0, r3
10044c50:	f7fb fb7c 	bl	1004034c <__aeabi_uidivmod>
10044c54:	000b      	movs	r3, r1
10044c56:	b299      	uxth	r1, r3
10044c58:	4b0d      	ldr	r3, [pc, #52]	@ (10044c90 <HAL_I2C_MemRxCpltCallback+0xbc>)
10044c5a:	4a0e      	ldr	r2, [pc, #56]	@ (10044c94 <HAL_I2C_MemRxCpltCallback+0xc0>)
10044c5c:	5299      	strh	r1, [r3, r2]
	//if there is more in the buffer
	if(MemBuff.tail != MemBuff.head){
10044c5e:	4b0c      	ldr	r3, [pc, #48]	@ (10044c90 <HAL_I2C_MemRxCpltCallback+0xbc>)
10044c60:	4a0c      	ldr	r2, [pc, #48]	@ (10044c94 <HAL_I2C_MemRxCpltCallback+0xc0>)
10044c62:	5a9a      	ldrh	r2, [r3, r2]
10044c64:	490a      	ldr	r1, [pc, #40]	@ (10044c90 <HAL_I2C_MemRxCpltCallback+0xbc>)
10044c66:	23c0      	movs	r3, #192	@ 0xc0
10044c68:	015b      	lsls	r3, r3, #5
10044c6a:	5acb      	ldrh	r3, [r1, r3]
10044c6c:	429a      	cmp	r2, r3
10044c6e:	d00b      	beq.n	10044c88 <HAL_I2C_MemRxCpltCallback+0xb4>
		I2CUARTtoI2C(1);
10044c70:	2001      	movs	r0, #1
10044c72:	f7ff fe53 	bl	1004491c <I2CUARTtoI2C>
		I2C_Post(MemBuff.data+MemBuff.tail);
10044c76:	4b06      	ldr	r3, [pc, #24]	@ (10044c90 <HAL_I2C_MemRxCpltCallback+0xbc>)
10044c78:	4a06      	ldr	r2, [pc, #24]	@ (10044c94 <HAL_I2C_MemRxCpltCallback+0xc0>)
10044c7a:	5a9b      	ldrh	r3, [r3, r2]
10044c7c:	009a      	lsls	r2, r3, #2
10044c7e:	4b04      	ldr	r3, [pc, #16]	@ (10044c90 <HAL_I2C_MemRxCpltCallback+0xbc>)
10044c80:	18d3      	adds	r3, r2, r3
10044c82:	0018      	movs	r0, r3
10044c84:	f7ff fe9c 	bl	100449c0 <I2C_Post>

	}
}
10044c88:	46c0      	nop			@ (mov r8, r8)
10044c8a:	46bd      	mov	sp, r7
10044c8c:	b004      	add	sp, #16
10044c8e:	bd80      	pop	{r7, pc}
10044c90:	200003d4 	.word	0x200003d4
10044c94:	00001802 	.word	0x00001802
10044c98:	20002680 	.word	0x20002680

10044c9c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
10044c9c:	b590      	push	{r4, r7, lr}
10044c9e:	b085      	sub	sp, #20
10044ca0:	af00      	add	r7, sp, #0
10044ca2:	6078      	str	r0, [r7, #4]
	if(hi2c->ErrorCode&HAL_I2C_ERROR_AF){//NACK Error
10044ca4:	687b      	ldr	r3, [r7, #4]
10044ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10044ca8:	2204      	movs	r2, #4
10044caa:	4013      	ands	r3, r2
10044cac:	d021      	beq.n	10044cf2 <HAL_I2C_ErrorCallback+0x56>
		if(MemBuff.tail != MemBuff.head){
10044cae:	4b13      	ldr	r3, [pc, #76]	@ (10044cfc <HAL_I2C_ErrorCallback+0x60>)
10044cb0:	4a13      	ldr	r2, [pc, #76]	@ (10044d00 <HAL_I2C_ErrorCallback+0x64>)
10044cb2:	5a9a      	ldrh	r2, [r3, r2]
10044cb4:	4911      	ldr	r1, [pc, #68]	@ (10044cfc <HAL_I2C_ErrorCallback+0x60>)
10044cb6:	23c0      	movs	r3, #192	@ 0xc0
10044cb8:	015b      	lsls	r3, r3, #5
10044cba:	5acb      	ldrh	r3, [r1, r3]
10044cbc:	429a      	cmp	r2, r3
10044cbe:	d018      	beq.n	10044cf2 <HAL_I2C_ErrorCallback+0x56>
			uint32_t start = TIMERS_GetMilliSeconds();
10044cc0:	f001 fc3a 	bl	10046538 <TIMERS_GetMilliSeconds>
10044cc4:	0003      	movs	r3, r0
10044cc6:	60fb      	str	r3, [r7, #12]
			while(start+10 > TIMERS_GetMilliSeconds());
10044cc8:	46c0      	nop			@ (mov r8, r8)
10044cca:	68fb      	ldr	r3, [r7, #12]
10044ccc:	330a      	adds	r3, #10
10044cce:	001c      	movs	r4, r3
10044cd0:	f001 fc32 	bl	10046538 <TIMERS_GetMilliSeconds>
10044cd4:	0003      	movs	r3, r0
10044cd6:	429c      	cmp	r4, r3
10044cd8:	d8f7      	bhi.n	10044cca <HAL_I2C_ErrorCallback+0x2e>
			I2CUARTtoI2C(1);
10044cda:	2001      	movs	r0, #1
10044cdc:	f7ff fe1e 	bl	1004491c <I2CUARTtoI2C>
			I2C_Post(MemBuff.data+MemBuff.tail);//Repost the same data packet that got NACKed, without moving the tail forward
10044ce0:	4b06      	ldr	r3, [pc, #24]	@ (10044cfc <HAL_I2C_ErrorCallback+0x60>)
10044ce2:	4a07      	ldr	r2, [pc, #28]	@ (10044d00 <HAL_I2C_ErrorCallback+0x64>)
10044ce4:	5a9b      	ldrh	r3, [r3, r2]
10044ce6:	009a      	lsls	r2, r3, #2
10044ce8:	4b04      	ldr	r3, [pc, #16]	@ (10044cfc <HAL_I2C_ErrorCallback+0x60>)
10044cea:	18d3      	adds	r3, r2, r3
10044cec:	0018      	movs	r0, r3
10044cee:	f7ff fe67 	bl	100449c0 <I2C_Post>

		}
	}
}
10044cf2:	46c0      	nop			@ (mov r8, r8)
10044cf4:	46bd      	mov	sp, r7
10044cf6:	b005      	add	sp, #20
10044cf8:	bd90      	pop	{r4, r7, pc}
10044cfa:	46c0      	nop			@ (mov r8, r8)
10044cfc:	200003d4 	.word	0x200003d4
10044d00:	00001802 	.word	0x00001802

10044d04 <I2C1_IRQHandler>:
 * @Brief: Overwrites a weak HAL function. handles I2C1 interrupts
 * @param: none
 * @return: none
 */
void I2C1_IRQHandler(void)
{
10044d04:	b580      	push	{r7, lr}
10044d06:	af00      	add	r7, sp, #0
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
10044d08:	4b09      	ldr	r3, [pc, #36]	@ (10044d30 <I2C1_IRQHandler+0x2c>)
10044d0a:	681b      	ldr	r3, [r3, #0]
10044d0c:	699a      	ldr	r2, [r3, #24]
10044d0e:	23e0      	movs	r3, #224	@ 0xe0
10044d10:	00db      	lsls	r3, r3, #3
10044d12:	4013      	ands	r3, r2
10044d14:	d004      	beq.n	10044d20 <I2C1_IRQHandler+0x1c>
	{
		HAL_I2C_ER_IRQHandler(&hi2c1);//error handler
10044d16:	4b06      	ldr	r3, [pc, #24]	@ (10044d30 <I2C1_IRQHandler+0x2c>)
10044d18:	0018      	movs	r0, r3
10044d1a:	f003 fd89 	bl	10048830 <HAL_I2C_ER_IRQHandler>
	}
	else
	{
		HAL_I2C_EV_IRQHandler(&hi2c1);//event handler
	}
}
10044d1e:	e003      	b.n	10044d28 <I2C1_IRQHandler+0x24>
		HAL_I2C_EV_IRQHandler(&hi2c1);//event handler
10044d20:	4b03      	ldr	r3, [pc, #12]	@ (10044d30 <I2C1_IRQHandler+0x2c>)
10044d22:	0018      	movs	r0, r3
10044d24:	f003 fd6a 	bl	100487fc <HAL_I2C_EV_IRQHandler>
}
10044d28:	46c0      	nop			@ (mov r8, r8)
10044d2a:	46bd      	mov	sp, r7
10044d2c:	bd80      	pop	{r7, pc}
10044d2e:	46c0      	nop			@ (mov r8, r8)
10044d30:	2000262c 	.word	0x2000262c

10044d34 <I2C_Init>:
 * @function: I2C_Init()
 * @brief: initialize the I2C peripheral to receive and transmit
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int I2C_Init(void){
10044d34:	b590      	push	{r4, r7, lr}
10044d36:	b083      	sub	sp, #12
10044d38:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
10044d3a:	4b36      	ldr	r3, [pc, #216]	@ (10044e14 <I2C_Init+0xe0>)
10044d3c:	781b      	ldrb	r3, [r3, #0]
10044d3e:	2b00      	cmp	r3, #0
10044d40:	d001      	beq.n	10044d46 <I2C_Init+0x12>
10044d42:	2301      	movs	r3, #1
10044d44:	e062      	b.n	10044e0c <I2C_Init+0xd8>
	TIMERS_Init();
10044d46:	f001 fbab 	bl	100464a0 <TIMERS_Init>
	hi2c1.Instance = I2C1;
10044d4a:	4b33      	ldr	r3, [pc, #204]	@ (10044e18 <I2C_Init+0xe4>)
10044d4c:	2282      	movs	r2, #130	@ 0x82
10044d4e:	05d2      	lsls	r2, r2, #23
10044d50:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00305B5B;
10044d52:	4b31      	ldr	r3, [pc, #196]	@ (10044e18 <I2C_Init+0xe4>)
10044d54:	4a31      	ldr	r2, [pc, #196]	@ (10044e1c <I2C_Init+0xe8>)
10044d56:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
10044d58:	4b2f      	ldr	r3, [pc, #188]	@ (10044e18 <I2C_Init+0xe4>)
10044d5a:	2200      	movs	r2, #0
10044d5c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
10044d5e:	4b2e      	ldr	r3, [pc, #184]	@ (10044e18 <I2C_Init+0xe4>)
10044d60:	2201      	movs	r2, #1
10044d62:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
10044d64:	4b2c      	ldr	r3, [pc, #176]	@ (10044e18 <I2C_Init+0xe4>)
10044d66:	2200      	movs	r2, #0
10044d68:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
10044d6a:	4b2b      	ldr	r3, [pc, #172]	@ (10044e18 <I2C_Init+0xe4>)
10044d6c:	2200      	movs	r2, #0
10044d6e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
10044d70:	4b29      	ldr	r3, [pc, #164]	@ (10044e18 <I2C_Init+0xe4>)
10044d72:	2200      	movs	r2, #0
10044d74:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
10044d76:	4b28      	ldr	r3, [pc, #160]	@ (10044e18 <I2C_Init+0xe4>)
10044d78:	2200      	movs	r2, #0
10044d7a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
10044d7c:	4b26      	ldr	r3, [pc, #152]	@ (10044e18 <I2C_Init+0xe4>)
10044d7e:	2200      	movs	r2, #0
10044d80:	621a      	str	r2, [r3, #32]
	hi2c1.State = HAL_I2C_STATE_RESET;
10044d82:	4b25      	ldr	r3, [pc, #148]	@ (10044e18 <I2C_Init+0xe4>)
10044d84:	2241      	movs	r2, #65	@ 0x41
10044d86:	2100      	movs	r1, #0
10044d88:	5499      	strb	r1, [r3, r2]
	HAL_StatusTypeDef ret = HAL_I2C_Init(&hi2c1);
10044d8a:	1dfc      	adds	r4, r7, #7
10044d8c:	4b22      	ldr	r3, [pc, #136]	@ (10044e18 <I2C_Init+0xe4>)
10044d8e:	0018      	movs	r0, r3
10044d90:	f003 fb4e 	bl	10048430 <HAL_I2C_Init>
10044d94:	0003      	movs	r3, r0
10044d96:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK)
10044d98:	1dfb      	adds	r3, r7, #7
10044d9a:	781b      	ldrb	r3, [r3, #0]
10044d9c:	2b00      	cmp	r3, #0
10044d9e:	d001      	beq.n	10044da4 <I2C_Init+0x70>
	{
		return INIT_ERROR;
10044da0:	2300      	movs	r3, #0
10044da2:	e033      	b.n	10044e0c <I2C_Init+0xd8>
	}
	// Configure Analog filter
	ret = HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
10044da4:	1dfc      	adds	r4, r7, #7
10044da6:	4b1c      	ldr	r3, [pc, #112]	@ (10044e18 <I2C_Init+0xe4>)
10044da8:	2100      	movs	r1, #0
10044daa:	0018      	movs	r0, r3
10044dac:	f005 fa10 	bl	1004a1d0 <HAL_I2CEx_ConfigAnalogFilter>
10044db0:	0003      	movs	r3, r0
10044db2:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK)
10044db4:	1dfb      	adds	r3, r7, #7
10044db6:	781b      	ldrb	r3, [r3, #0]
10044db8:	2b00      	cmp	r3, #0
10044dba:	d001      	beq.n	10044dc0 <I2C_Init+0x8c>
	{
		return INIT_ERROR;
10044dbc:	2300      	movs	r3, #0
10044dbe:	e025      	b.n	10044e0c <I2C_Init+0xd8>
	}

	// Configure Digital filter
	ret = HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
10044dc0:	1dfc      	adds	r4, r7, #7
10044dc2:	4b15      	ldr	r3, [pc, #84]	@ (10044e18 <I2C_Init+0xe4>)
10044dc4:	2100      	movs	r1, #0
10044dc6:	0018      	movs	r0, r3
10044dc8:	f005 fa4e 	bl	1004a268 <HAL_I2CEx_ConfigDigitalFilter>
10044dcc:	0003      	movs	r3, r0
10044dce:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK)
10044dd0:	1dfb      	adds	r3, r7, #7
10044dd2:	781b      	ldrb	r3, [r3, #0]
10044dd4:	2b00      	cmp	r3, #0
10044dd6:	d001      	beq.n	10044ddc <I2C_Init+0xa8>
	{
		return INIT_ERROR;
10044dd8:	2300      	movs	r3, #0
10044dda:	e017      	b.n	10044e0c <I2C_Init+0xd8>
	}
	//set up circular buffers
	MemBuff.tail = 0;
10044ddc:	4b10      	ldr	r3, [pc, #64]	@ (10044e20 <I2C_Init+0xec>)
10044dde:	4a11      	ldr	r2, [pc, #68]	@ (10044e24 <I2C_Init+0xf0>)
10044de0:	2100      	movs	r1, #0
10044de2:	5299      	strh	r1, [r3, r2]
	MemBuff.head = 0;
10044de4:	4a0e      	ldr	r2, [pc, #56]	@ (10044e20 <I2C_Init+0xec>)
10044de6:	23c0      	movs	r3, #192	@ 0xc0
10044de8:	015b      	lsls	r3, r3, #5
10044dea:	2100      	movs	r1, #0
10044dec:	52d1      	strh	r1, [r2, r3]
	initialized = 1;
10044dee:	4b09      	ldr	r3, [pc, #36]	@ (10044e14 <I2C_Init+0xe0>)
10044df0:	2201      	movs	r2, #1
10044df2:	701a      	strb	r2, [r3, #0]
	I2CUARTtoI2C(1);
10044df4:	2001      	movs	r0, #1
10044df6:	f7ff fd91 	bl	1004491c <I2CUARTtoI2C>
	//enables interrupts
	HAL_NVIC_SetPriority(I2C1_IRQn, 2, 0);
10044dfa:	2200      	movs	r2, #0
10044dfc:	2102      	movs	r1, #2
10044dfe:	2003      	movs	r0, #3
10044e00:	f002 fe2a 	bl	10047a58 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_IRQn);
10044e04:	2003      	movs	r0, #3
10044e06:	f002 fe3c 	bl	10047a82 <HAL_NVIC_EnableIRQ>
	return INIT_OK;
10044e0a:	2301      	movs	r3, #1
}
10044e0c:	0018      	movs	r0, r3
10044e0e:	46bd      	mov	sp, r7
10044e10:	b003      	add	sp, #12
10044e12:	bd90      	pop	{r4, r7, pc}
10044e14:	20001bd8 	.word	0x20001bd8
10044e18:	2000262c 	.word	0x2000262c
10044e1c:	00305b5b 	.word	0x00305b5b
10044e20:	200003d4 	.word	0x200003d4
10044e24:	00001802 	.word	0x00001802

10044e28 <I2C_Transmit>:
 * @param: uint8_t targetadr: Address of the device to communicate
 * 		   uint8_t registeradr: Address of the register to write to
 * 		   uint8_t data: to to be transmitted
 * @return: a flag if the data has been transmitted
 */
HAL_StatusTypeDef I2C_Transmit(uint8_t targetadr, uint8_t registeradr, uint8_t data){
10044e28:	b5b0      	push	{r4, r5, r7, lr}
10044e2a:	b084      	sub	sp, #16
10044e2c:	af00      	add	r7, sp, #0
10044e2e:	0004      	movs	r4, r0
10044e30:	0008      	movs	r0, r1
10044e32:	0011      	movs	r1, r2
10044e34:	1dfb      	adds	r3, r7, #7
10044e36:	1c22      	adds	r2, r4, #0
10044e38:	701a      	strb	r2, [r3, #0]
10044e3a:	1dbb      	adds	r3, r7, #6
10044e3c:	1c02      	adds	r2, r0, #0
10044e3e:	701a      	strb	r2, [r3, #0]
10044e40:	1d7b      	adds	r3, r7, #5
10044e42:	1c0a      	adds	r2, r1, #0
10044e44:	701a      	strb	r2, [r3, #0]
	if(!initialized){return HAL_ERROR;}
10044e46:	4b13      	ldr	r3, [pc, #76]	@ (10044e94 <I2C_Transmit+0x6c>)
10044e48:	781b      	ldrb	r3, [r3, #0]
10044e4a:	2b00      	cmp	r3, #0
10044e4c:	d101      	bne.n	10044e52 <I2C_Transmit+0x2a>
10044e4e:	2301      	movs	r3, #1
10044e50:	e01c      	b.n	10044e8c <I2C_Transmit+0x64>
	HAL_StatusTypeDef status = HAL_OK;
10044e52:	210f      	movs	r1, #15
10044e54:	187b      	adds	r3, r7, r1
10044e56:	2200      	movs	r2, #0
10044e58:	701a      	strb	r2, [r3, #0]
	static MemAdd_t Post;
	Post.targetadr = targetadr;
10044e5a:	4b0f      	ldr	r3, [pc, #60]	@ (10044e98 <I2C_Transmit+0x70>)
10044e5c:	1dfa      	adds	r2, r7, #7
10044e5e:	7812      	ldrb	r2, [r2, #0]
10044e60:	701a      	strb	r2, [r3, #0]
	Post.registeradr = registeradr;
10044e62:	4b0d      	ldr	r3, [pc, #52]	@ (10044e98 <I2C_Transmit+0x70>)
10044e64:	1dba      	adds	r2, r7, #6
10044e66:	7812      	ldrb	r2, [r2, #0]
10044e68:	705a      	strb	r2, [r3, #1]
	Post.posterindex = 0;//null pointer, no function is posted to after the transmit is complete
10044e6a:	4b0b      	ldr	r3, [pc, #44]	@ (10044e98 <I2C_Transmit+0x70>)
10044e6c:	2200      	movs	r2, #0
10044e6e:	70da      	strb	r2, [r3, #3]
	Post.data = data;
10044e70:	4b09      	ldr	r3, [pc, #36]	@ (10044e98 <I2C_Transmit+0x70>)
10044e72:	1d7a      	adds	r2, r7, #5
10044e74:	7812      	ldrb	r2, [r2, #0]
10044e76:	709a      	strb	r2, [r3, #2]
	status = I2C_Enqueue(Post);
10044e78:	000d      	movs	r5, r1
10044e7a:	187c      	adds	r4, r7, r1
10044e7c:	4b06      	ldr	r3, [pc, #24]	@ (10044e98 <I2C_Transmit+0x70>)
10044e7e:	6818      	ldr	r0, [r3, #0]
10044e80:	f7ff fdd2 	bl	10044a28 <I2C_Enqueue>
10044e84:	0003      	movs	r3, r0
10044e86:	7023      	strb	r3, [r4, #0]
	return status;
10044e88:	197b      	adds	r3, r7, r5
10044e8a:	781b      	ldrb	r3, [r3, #0]
}
10044e8c:	0018      	movs	r0, r3
10044e8e:	46bd      	mov	sp, r7
10044e90:	b004      	add	sp, #16
10044e92:	bdb0      	pop	{r4, r5, r7, pc}
10044e94:	20001bd8 	.word	0x20001bd8
10044e98:	20001bdc 	.word	0x20001bdc

10044e9c <I2C_Flushbuffer>:

void I2C_Flushbuffer(){
10044e9c:	b580      	push	{r7, lr}
10044e9e:	af00      	add	r7, sp, #0
	if(hi2c1.State == HAL_I2C_STATE_READY && MemBuff.tail != MemBuff.head){
10044ea0:	4b0d      	ldr	r3, [pc, #52]	@ (10044ed8 <I2C_Flushbuffer+0x3c>)
10044ea2:	2241      	movs	r2, #65	@ 0x41
10044ea4:	5c9b      	ldrb	r3, [r3, r2]
10044ea6:	b2db      	uxtb	r3, r3
10044ea8:	2b20      	cmp	r3, #32
10044eaa:	d111      	bne.n	10044ed0 <I2C_Flushbuffer+0x34>
10044eac:	4b0b      	ldr	r3, [pc, #44]	@ (10044edc <I2C_Flushbuffer+0x40>)
10044eae:	4a0c      	ldr	r2, [pc, #48]	@ (10044ee0 <I2C_Flushbuffer+0x44>)
10044eb0:	5a9a      	ldrh	r2, [r3, r2]
10044eb2:	490a      	ldr	r1, [pc, #40]	@ (10044edc <I2C_Flushbuffer+0x40>)
10044eb4:	23c0      	movs	r3, #192	@ 0xc0
10044eb6:	015b      	lsls	r3, r3, #5
10044eb8:	5acb      	ldrh	r3, [r1, r3]
10044eba:	429a      	cmp	r2, r3
10044ebc:	d008      	beq.n	10044ed0 <I2C_Flushbuffer+0x34>
		//error recovery
		I2C_Post(MemBuff.data+MemBuff.tail);
10044ebe:	4b07      	ldr	r3, [pc, #28]	@ (10044edc <I2C_Flushbuffer+0x40>)
10044ec0:	4a07      	ldr	r2, [pc, #28]	@ (10044ee0 <I2C_Flushbuffer+0x44>)
10044ec2:	5a9b      	ldrh	r3, [r3, r2]
10044ec4:	009a      	lsls	r2, r3, #2
10044ec6:	4b05      	ldr	r3, [pc, #20]	@ (10044edc <I2C_Flushbuffer+0x40>)
10044ec8:	18d3      	adds	r3, r2, r3
10044eca:	0018      	movs	r0, r3
10044ecc:	f7ff fd78 	bl	100449c0 <I2C_Post>
	}
}
10044ed0:	46c0      	nop			@ (mov r8, r8)
10044ed2:	46bd      	mov	sp, r7
10044ed4:	bd80      	pop	{r7, pc}
10044ed6:	46c0      	nop			@ (mov r8, r8)
10044ed8:	2000262c 	.word	0x2000262c
10044edc:	200003d4 	.word	0x200003d4
10044ee0:	00001802 	.word	0x00001802

10044ee4 <I2C_Recieve>:
 * @param: uint8_t targetadr: Address of the device to communicate
 * 		   uint8_t registeradr: Address of the register to read from
 * 		   void (*PostTo)(Event_t): which service to post to when the data is received
 * @return: -1 if error, 1 if success
 */
HAL_StatusTypeDef I2C_Recieve(uint8_t targetadr, uint8_t registeradr, uint8_t posterindex){
10044ee4:	b5b0      	push	{r4, r5, r7, lr}
10044ee6:	b084      	sub	sp, #16
10044ee8:	af00      	add	r7, sp, #0
10044eea:	0004      	movs	r4, r0
10044eec:	0008      	movs	r0, r1
10044eee:	0011      	movs	r1, r2
10044ef0:	1dfb      	adds	r3, r7, #7
10044ef2:	1c22      	adds	r2, r4, #0
10044ef4:	701a      	strb	r2, [r3, #0]
10044ef6:	1dbb      	adds	r3, r7, #6
10044ef8:	1c02      	adds	r2, r0, #0
10044efa:	701a      	strb	r2, [r3, #0]
10044efc:	1d7b      	adds	r3, r7, #5
10044efe:	1c0a      	adds	r2, r1, #0
10044f00:	701a      	strb	r2, [r3, #0]
	if(!initialized){return HAL_ERROR;}
10044f02:	4b18      	ldr	r3, [pc, #96]	@ (10044f64 <I2C_Recieve+0x80>)
10044f04:	781b      	ldrb	r3, [r3, #0]
10044f06:	2b00      	cmp	r3, #0
10044f08:	d101      	bne.n	10044f0e <I2C_Recieve+0x2a>
10044f0a:	2301      	movs	r3, #1
10044f0c:	e026      	b.n	10044f5c <I2C_Recieve+0x78>
	HAL_StatusTypeDef status = HAL_OK;
10044f0e:	230f      	movs	r3, #15
10044f10:	18fb      	adds	r3, r7, r3
10044f12:	2200      	movs	r2, #0
10044f14:	701a      	strb	r2, [r3, #0]
	static MemAdd_t Post;
	Post.targetadr = targetadr;
10044f16:	4b14      	ldr	r3, [pc, #80]	@ (10044f68 <I2C_Recieve+0x84>)
10044f18:	1dfa      	adds	r2, r7, #7
10044f1a:	7812      	ldrb	r2, [r2, #0]
10044f1c:	701a      	strb	r2, [r3, #0]
	Post.registeradr = registeradr;
10044f1e:	4b12      	ldr	r3, [pc, #72]	@ (10044f68 <I2C_Recieve+0x84>)
10044f20:	1dba      	adds	r2, r7, #6
10044f22:	7812      	ldrb	r2, [r2, #0]
10044f24:	705a      	strb	r2, [r3, #1]
	if(posterindex == 0 || posterindex > NUMPOSTERS){
10044f26:	1d7b      	adds	r3, r7, #5
10044f28:	781b      	ldrb	r3, [r3, #0]
10044f2a:	2b00      	cmp	r3, #0
10044f2c:	d003      	beq.n	10044f36 <I2C_Recieve+0x52>
10044f2e:	1d7b      	adds	r3, r7, #5
10044f30:	781b      	ldrb	r3, [r3, #0]
10044f32:	2b01      	cmp	r3, #1
10044f34:	d901      	bls.n	10044f3a <I2C_Recieve+0x56>
		return HAL_ERROR;
10044f36:	2301      	movs	r3, #1
10044f38:	e010      	b.n	10044f5c <I2C_Recieve+0x78>
	}
	Post.posterindex = posterindex;
10044f3a:	4b0b      	ldr	r3, [pc, #44]	@ (10044f68 <I2C_Recieve+0x84>)
10044f3c:	1d7a      	adds	r2, r7, #5
10044f3e:	7812      	ldrb	r2, [r2, #0]
10044f40:	70da      	strb	r2, [r3, #3]
	Post.data = 0;//will store future recieved data
10044f42:	4b09      	ldr	r3, [pc, #36]	@ (10044f68 <I2C_Recieve+0x84>)
10044f44:	2200      	movs	r2, #0
10044f46:	709a      	strb	r2, [r3, #2]
	status = I2C_Enqueue(Post);
10044f48:	250f      	movs	r5, #15
10044f4a:	197c      	adds	r4, r7, r5
10044f4c:	4b06      	ldr	r3, [pc, #24]	@ (10044f68 <I2C_Recieve+0x84>)
10044f4e:	6818      	ldr	r0, [r3, #0]
10044f50:	f7ff fd6a 	bl	10044a28 <I2C_Enqueue>
10044f54:	0003      	movs	r3, r0
10044f56:	7023      	strb	r3, [r4, #0]
	return status;
10044f58:	197b      	adds	r3, r7, r5
10044f5a:	781b      	ldrb	r3, [r3, #0]

}
10044f5c:	0018      	movs	r0, r3
10044f5e:	46bd      	mov	sp, r7
10044f60:	b004      	add	sp, #16
10044f62:	bdb0      	pop	{r4, r5, r7, pc}
10044f64:	20001bd8 	.word	0x20001bd8
10044f68:	20001be0 	.word	0x20001be0

10044f6c <I2C_WriteReg>:
unsigned char I2C_WriteReg(
    unsigned char I2CAddress,
    unsigned char deviceRegisterAddress,
    uint8_t data
)
{
10044f6c:	b5b0      	push	{r4, r5, r7, lr}
10044f6e:	b084      	sub	sp, #16
10044f70:	af00      	add	r7, sp, #0
10044f72:	0004      	movs	r4, r0
10044f74:	0008      	movs	r0, r1
10044f76:	0011      	movs	r1, r2
10044f78:	1dfb      	adds	r3, r7, #7
10044f7a:	1c22      	adds	r2, r4, #0
10044f7c:	701a      	strb	r2, [r3, #0]
10044f7e:	1dbb      	adds	r3, r7, #6
10044f80:	1c02      	adds	r2, r0, #0
10044f82:	701a      	strb	r2, [r3, #0]
10044f84:	1d7b      	adds	r3, r7, #5
10044f86:	1c0a      	adds	r2, r1, #0
10044f88:	701a      	strb	r2, [r3, #0]
//        I2C_MEMADD_SIZE_8BIT,
//        &data,
//        1,
//        HAL_MAX_DELAY
//    );
    ret = I2C_Transmit(I2CAddress, deviceRegisterAddress, data);
10044f8a:	250f      	movs	r5, #15
10044f8c:	197c      	adds	r4, r7, r5
10044f8e:	1d7b      	adds	r3, r7, #5
10044f90:	781a      	ldrb	r2, [r3, #0]
10044f92:	1dbb      	adds	r3, r7, #6
10044f94:	7819      	ldrb	r1, [r3, #0]
10044f96:	1dfb      	adds	r3, r7, #7
10044f98:	781b      	ldrb	r3, [r3, #0]
10044f9a:	0018      	movs	r0, r3
10044f9c:	f7ff ff44 	bl	10044e28 <I2C_Transmit>
10044fa0:	0003      	movs	r3, r0
10044fa2:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK)
10044fa4:	197b      	adds	r3, r7, r5
10044fa6:	781b      	ldrb	r3, [r3, #0]
10044fa8:	2b00      	cmp	r3, #0
10044faa:	d001      	beq.n	10044fb0 <I2C_WriteReg+0x44>
    {
        return ERROR;
10044fac:	2301      	movs	r3, #1
10044fae:	e000      	b.n	10044fb2 <I2C_WriteReg+0x46>
    }

    return SUCCESS;
10044fb0:	2300      	movs	r3, #0
}
10044fb2:	0018      	movs	r0, r3
10044fb4:	46bd      	mov	sp, r7
10044fb6:	b004      	add	sp, #16
10044fb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

10044fbc <MP3_SendData>:
static uint8_t* folders;
static uint8_t numfolders;

static char lastsent[4];
//----------------------------------------Private Functions--------------------------------------
void MP3_SendData(char string[4]){
10044fbc:	b590      	push	{r4, r7, lr}
10044fbe:	b085      	sub	sp, #20
10044fc0:	af00      	add	r7, sp, #0
10044fc2:	6078      	str	r0, [r7, #4]
	uint16_t accumulation = 0;
10044fc4:	240e      	movs	r4, #14
10044fc6:	193b      	adds	r3, r7, r4
10044fc8:	2200      	movs	r2, #0
10044fca:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(0x7E);//start flag
10044fcc:	207e      	movs	r0, #126	@ 0x7e
10044fce:	f001 fc15 	bl	100467fc <LPUART_WriteTx>
	accumulation += 0xFF;
10044fd2:	193b      	adds	r3, r7, r4
10044fd4:	193a      	adds	r2, r7, r4
10044fd6:	8812      	ldrh	r2, [r2, #0]
10044fd8:	32ff      	adds	r2, #255	@ 0xff
10044fda:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(0xFF);//Version?
10044fdc:	20ff      	movs	r0, #255	@ 0xff
10044fde:	f001 fc0d 	bl	100467fc <LPUART_WriteTx>
	accumulation += 0x06;
10044fe2:	193b      	adds	r3, r7, r4
10044fe4:	193a      	adds	r2, r7, r4
10044fe6:	8812      	ldrh	r2, [r2, #0]
10044fe8:	3206      	adds	r2, #6
10044fea:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(0x06);//length
10044fec:	2006      	movs	r0, #6
10044fee:	f001 fc05 	bl	100467fc <LPUART_WriteTx>

	for(int i = 0; i < 4; i++){
10044ff2:	2300      	movs	r3, #0
10044ff4:	60bb      	str	r3, [r7, #8]
10044ff6:	e01d      	b.n	10045034 <MP3_SendData+0x78>
		accumulation += string[i];
10044ff8:	68bb      	ldr	r3, [r7, #8]
10044ffa:	687a      	ldr	r2, [r7, #4]
10044ffc:	18d3      	adds	r3, r2, r3
10044ffe:	781b      	ldrb	r3, [r3, #0]
10045000:	0019      	movs	r1, r3
10045002:	220e      	movs	r2, #14
10045004:	18bb      	adds	r3, r7, r2
10045006:	18ba      	adds	r2, r7, r2
10045008:	8812      	ldrh	r2, [r2, #0]
1004500a:	188a      	adds	r2, r1, r2
1004500c:	801a      	strh	r2, [r3, #0]
		lastsent[i] = string[i];
1004500e:	68bb      	ldr	r3, [r7, #8]
10045010:	687a      	ldr	r2, [r7, #4]
10045012:	18d3      	adds	r3, r2, r3
10045014:	7819      	ldrb	r1, [r3, #0]
10045016:	4a16      	ldr	r2, [pc, #88]	@ (10045070 <MP3_SendData+0xb4>)
10045018:	68bb      	ldr	r3, [r7, #8]
1004501a:	18d3      	adds	r3, r2, r3
1004501c:	1c0a      	adds	r2, r1, #0
1004501e:	701a      	strb	r2, [r3, #0]
		LPUART_WriteTx(string[i]);//command and data
10045020:	68bb      	ldr	r3, [r7, #8]
10045022:	687a      	ldr	r2, [r7, #4]
10045024:	18d3      	adds	r3, r2, r3
10045026:	781b      	ldrb	r3, [r3, #0]
10045028:	0018      	movs	r0, r3
1004502a:	f001 fbe7 	bl	100467fc <LPUART_WriteTx>
	for(int i = 0; i < 4; i++){
1004502e:	68bb      	ldr	r3, [r7, #8]
10045030:	3301      	adds	r3, #1
10045032:	60bb      	str	r3, [r7, #8]
10045034:	68bb      	ldr	r3, [r7, #8]
10045036:	2b03      	cmp	r3, #3
10045038:	ddde      	ble.n	10044ff8 <MP3_SendData+0x3c>
	}
	accumulation = -accumulation;//??required for it to work
1004503a:	240e      	movs	r4, #14
1004503c:	193b      	adds	r3, r7, r4
1004503e:	193a      	adds	r2, r7, r4
10045040:	8812      	ldrh	r2, [r2, #0]
10045042:	4252      	negs	r2, r2
10045044:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(accumulation>>8);//checksum
10045046:	193b      	adds	r3, r7, r4
10045048:	881b      	ldrh	r3, [r3, #0]
1004504a:	0a1b      	lsrs	r3, r3, #8
1004504c:	b29b      	uxth	r3, r3
1004504e:	b2db      	uxtb	r3, r3
10045050:	0018      	movs	r0, r3
10045052:	f001 fbd3 	bl	100467fc <LPUART_WriteTx>
	LPUART_WriteTx(accumulation&0xFF);//checksum
10045056:	193b      	adds	r3, r7, r4
10045058:	881b      	ldrh	r3, [r3, #0]
1004505a:	b2db      	uxtb	r3, r3
1004505c:	0018      	movs	r0, r3
1004505e:	f001 fbcd 	bl	100467fc <LPUART_WriteTx>
	LPUART_WriteTx(0xEF);//start flag
10045062:	20ef      	movs	r0, #239	@ 0xef
10045064:	f001 fbca 	bl	100467fc <LPUART_WriteTx>

}
10045068:	46c0      	nop			@ (mov r8, r8)
1004506a:	46bd      	mov	sp, r7
1004506c:	b005      	add	sp, #20
1004506e:	bd90      	pop	{r4, r7, pc}
10045070:	20001c10 	.word	0x20001c10

10045074 <parsePacket>:

uint8_t parsePacket(char rx){
10045074:	b580      	push	{r7, lr}
10045076:	b086      	sub	sp, #24
10045078:	af00      	add	r7, sp, #0
1004507a:	0002      	movs	r2, r0
1004507c:	1dfb      	adds	r3, r7, #7
1004507e:	701a      	strb	r2, [r3, #0]
	if(rx == UARTFAILED){
10045080:	1dfb      	adds	r3, r7, #7
10045082:	781b      	ldrb	r3, [r3, #0]
10045084:	2b25      	cmp	r3, #37	@ 0x25
10045086:	d101      	bne.n	1004508c <parsePacket+0x18>
		return 0;
10045088:	2300      	movs	r3, #0
1004508a:	e0c6      	b.n	1004521a <parsePacket+0x1a6>
	}
	if(rx == 0x7E){
1004508c:	1dfb      	adds	r3, r7, #7
1004508e:	781b      	ldrb	r3, [r3, #0]
10045090:	2b7e      	cmp	r3, #126	@ 0x7e
10045092:	d102      	bne.n	1004509a <parsePacket+0x26>
		PacketSM = Start;
10045094:	4b63      	ldr	r3, [pc, #396]	@ (10045224 <parsePacket+0x1b0>)
10045096:	2200      	movs	r2, #0
10045098:	701a      	strb	r2, [r3, #0]
	}
	switch (PacketSM){
1004509a:	4b62      	ldr	r3, [pc, #392]	@ (10045224 <parsePacket+0x1b0>)
1004509c:	781b      	ldrb	r3, [r3, #0]
1004509e:	2b08      	cmp	r3, #8
100450a0:	d900      	bls.n	100450a4 <parsePacket+0x30>
100450a2:	e0b9      	b.n	10045218 <parsePacket+0x1a4>
100450a4:	009a      	lsls	r2, r3, #2
100450a6:	4b60      	ldr	r3, [pc, #384]	@ (10045228 <parsePacket+0x1b4>)
100450a8:	18d3      	adds	r3, r2, r3
100450aa:	681b      	ldr	r3, [r3, #0]
100450ac:	469f      	mov	pc, r3
	case Start:
		if(rx == 0xFF){
100450ae:	1dfb      	adds	r3, r7, #7
100450b0:	781b      	ldrb	r3, [r3, #0]
100450b2:	2bff      	cmp	r3, #255	@ 0xff
100450b4:	d000      	beq.n	100450b8 <parsePacket+0x44>
100450b6:	e0ae      	b.n	10045216 <parsePacket+0x1a2>
			PacketSM = Version;
100450b8:	4b5a      	ldr	r3, [pc, #360]	@ (10045224 <parsePacket+0x1b0>)
100450ba:	2201      	movs	r2, #1
100450bc:	701a      	strb	r2, [r3, #0]
		}
		break;
100450be:	e0aa      	b.n	10045216 <parsePacket+0x1a2>
	case Version:
		if(rx == 0x06){
100450c0:	1dfb      	adds	r3, r7, #7
100450c2:	781b      	ldrb	r3, [r3, #0]
100450c4:	2b06      	cmp	r3, #6
100450c6:	d103      	bne.n	100450d0 <parsePacket+0x5c>
			PacketSM = Length;
100450c8:	4b56      	ldr	r3, [pc, #344]	@ (10045224 <parsePacket+0x1b0>)
100450ca:	2202      	movs	r2, #2
100450cc:	701a      	strb	r2, [r3, #0]
		} else {
			PacketSM = Start;
		}
		break;
100450ce:	e0a3      	b.n	10045218 <parsePacket+0x1a4>
			PacketSM = Start;
100450d0:	4b54      	ldr	r3, [pc, #336]	@ (10045224 <parsePacket+0x1b0>)
100450d2:	2200      	movs	r2, #0
100450d4:	701a      	strb	r2, [r3, #0]
		break;
100450d6:	e09f      	b.n	10045218 <parsePacket+0x1a4>
	case Length:
		PacketSM = Command;
100450d8:	4b52      	ldr	r3, [pc, #328]	@ (10045224 <parsePacket+0x1b0>)
100450da:	2203      	movs	r2, #3
100450dc:	701a      	strb	r2, [r3, #0]
		Packet.command = rx;
100450de:	4b53      	ldr	r3, [pc, #332]	@ (1004522c <parsePacket+0x1b8>)
100450e0:	1dfa      	adds	r2, r7, #7
100450e2:	7812      	ldrb	r2, [r2, #0]
100450e4:	701a      	strb	r2, [r3, #0]
		break;
100450e6:	e097      	b.n	10045218 <parsePacket+0x1a4>
	case Command:
		if(rx == 0x01 || rx == 0x00){
100450e8:	1dfb      	adds	r3, r7, #7
100450ea:	781b      	ldrb	r3, [r3, #0]
100450ec:	2b01      	cmp	r3, #1
100450ee:	d003      	beq.n	100450f8 <parsePacket+0x84>
100450f0:	1dfb      	adds	r3, r7, #7
100450f2:	781b      	ldrb	r3, [r3, #0]
100450f4:	2b00      	cmp	r3, #0
100450f6:	d103      	bne.n	10045100 <parsePacket+0x8c>
			PacketSM = Ack;
100450f8:	4b4a      	ldr	r3, [pc, #296]	@ (10045224 <parsePacket+0x1b0>)
100450fa:	2204      	movs	r2, #4
100450fc:	701a      	strb	r2, [r3, #0]
		} else {
			PacketSM = Start;
		}
		break;
100450fe:	e08b      	b.n	10045218 <parsePacket+0x1a4>
			PacketSM = Start;
10045100:	4b48      	ldr	r3, [pc, #288]	@ (10045224 <parsePacket+0x1b0>)
10045102:	2200      	movs	r2, #0
10045104:	701a      	strb	r2, [r3, #0]
		break;
10045106:	e087      	b.n	10045218 <parsePacket+0x1a4>
	case Ack:
		PacketSM = Param1;
10045108:	4b46      	ldr	r3, [pc, #280]	@ (10045224 <parsePacket+0x1b0>)
1004510a:	2205      	movs	r2, #5
1004510c:	701a      	strb	r2, [r3, #0]
		Packet.Param1 = rx;
1004510e:	4b47      	ldr	r3, [pc, #284]	@ (1004522c <parsePacket+0x1b8>)
10045110:	1dfa      	adds	r2, r7, #7
10045112:	7812      	ldrb	r2, [r2, #0]
10045114:	709a      	strb	r2, [r3, #2]

		break;
10045116:	e07f      	b.n	10045218 <parsePacket+0x1a4>
	case Param1:
		PacketSM = Param2;
10045118:	4b42      	ldr	r3, [pc, #264]	@ (10045224 <parsePacket+0x1b0>)
1004511a:	2206      	movs	r2, #6
1004511c:	701a      	strb	r2, [r3, #0]
		Packet.Param2 = rx;
1004511e:	4b43      	ldr	r3, [pc, #268]	@ (1004522c <parsePacket+0x1b8>)
10045120:	1dfa      	adds	r2, r7, #7
10045122:	7812      	ldrb	r2, [r2, #0]
10045124:	70da      	strb	r2, [r3, #3]
		break;
10045126:	e077      	b.n	10045218 <parsePacket+0x1a4>
	case Param2:
		uint16_t checkval = -(0x105+Packet.command+Packet.ack+Packet.Param1 +Packet.Param2);
10045128:	4b40      	ldr	r3, [pc, #256]	@ (1004522c <parsePacket+0x1b8>)
1004512a:	781b      	ldrb	r3, [r3, #0]
1004512c:	001a      	movs	r2, r3
1004512e:	4b3f      	ldr	r3, [pc, #252]	@ (1004522c <parsePacket+0x1b8>)
10045130:	785b      	ldrb	r3, [r3, #1]
10045132:	18d3      	adds	r3, r2, r3
10045134:	b29b      	uxth	r3, r3
10045136:	4a3d      	ldr	r2, [pc, #244]	@ (1004522c <parsePacket+0x1b8>)
10045138:	7892      	ldrb	r2, [r2, #2]
1004513a:	189b      	adds	r3, r3, r2
1004513c:	b29b      	uxth	r3, r3
1004513e:	4a3b      	ldr	r2, [pc, #236]	@ (1004522c <parsePacket+0x1b8>)
10045140:	78d2      	ldrb	r2, [r2, #3]
10045142:	189b      	adds	r3, r3, r2
10045144:	b29a      	uxth	r2, r3
10045146:	2016      	movs	r0, #22
10045148:	183b      	adds	r3, r7, r0
1004514a:	4939      	ldr	r1, [pc, #228]	@ (10045230 <parsePacket+0x1bc>)
1004514c:	1a8a      	subs	r2, r1, r2
1004514e:	801a      	strh	r2, [r3, #0]
		if(rx == checkval>>8){
10045150:	1dfb      	adds	r3, r7, #7
10045152:	781b      	ldrb	r3, [r3, #0]
10045154:	b29a      	uxth	r2, r3
10045156:	183b      	adds	r3, r7, r0
10045158:	881b      	ldrh	r3, [r3, #0]
1004515a:	0a1b      	lsrs	r3, r3, #8
1004515c:	b29b      	uxth	r3, r3
1004515e:	429a      	cmp	r2, r3
10045160:	d103      	bne.n	1004516a <parsePacket+0xf6>
			PacketSM = Checksum1;
10045162:	4b30      	ldr	r3, [pc, #192]	@ (10045224 <parsePacket+0x1b0>)
10045164:	2207      	movs	r2, #7
10045166:	701a      	strb	r2, [r3, #0]
		}else {
			PacketSM = Start;
			char send[4] = {0x40, 0x00, 0x00, 0x06};
			MP3_SendData(send);
		}
		break;
10045168:	e056      	b.n	10045218 <parsePacket+0x1a4>
			PacketSM = Start;
1004516a:	4b2e      	ldr	r3, [pc, #184]	@ (10045224 <parsePacket+0x1b0>)
1004516c:	2200      	movs	r2, #0
1004516e:	701a      	strb	r2, [r3, #0]
			char send[4] = {0x40, 0x00, 0x00, 0x06};
10045170:	2110      	movs	r1, #16
10045172:	187b      	adds	r3, r7, r1
10045174:	4a2f      	ldr	r2, [pc, #188]	@ (10045234 <parsePacket+0x1c0>)
10045176:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
10045178:	187b      	adds	r3, r7, r1
1004517a:	0018      	movs	r0, r3
1004517c:	f7ff ff1e 	bl	10044fbc <MP3_SendData>
		break;
10045180:	e04a      	b.n	10045218 <parsePacket+0x1a4>
	case Checksum1:
		checkval = -(0x105+Packet.command+Packet.ack+Packet.Param1 +Packet.Param2);
10045182:	4b2a      	ldr	r3, [pc, #168]	@ (1004522c <parsePacket+0x1b8>)
10045184:	781b      	ldrb	r3, [r3, #0]
10045186:	001a      	movs	r2, r3
10045188:	4b28      	ldr	r3, [pc, #160]	@ (1004522c <parsePacket+0x1b8>)
1004518a:	785b      	ldrb	r3, [r3, #1]
1004518c:	18d3      	adds	r3, r2, r3
1004518e:	b29b      	uxth	r3, r3
10045190:	4a26      	ldr	r2, [pc, #152]	@ (1004522c <parsePacket+0x1b8>)
10045192:	7892      	ldrb	r2, [r2, #2]
10045194:	189b      	adds	r3, r3, r2
10045196:	b29b      	uxth	r3, r3
10045198:	4a24      	ldr	r2, [pc, #144]	@ (1004522c <parsePacket+0x1b8>)
1004519a:	78d2      	ldrb	r2, [r2, #3]
1004519c:	189b      	adds	r3, r3, r2
1004519e:	b29a      	uxth	r2, r3
100451a0:	2016      	movs	r0, #22
100451a2:	183b      	adds	r3, r7, r0
100451a4:	4922      	ldr	r1, [pc, #136]	@ (10045230 <parsePacket+0x1bc>)
100451a6:	1a8a      	subs	r2, r1, r2
100451a8:	801a      	strh	r2, [r3, #0]
		if(rx == (checkval&0xFF)){
100451aa:	1dfb      	adds	r3, r7, #7
100451ac:	781a      	ldrb	r2, [r3, #0]
100451ae:	183b      	adds	r3, r7, r0
100451b0:	881b      	ldrh	r3, [r3, #0]
100451b2:	21ff      	movs	r1, #255	@ 0xff
100451b4:	400b      	ands	r3, r1
100451b6:	429a      	cmp	r2, r3
100451b8:	d103      	bne.n	100451c2 <parsePacket+0x14e>
			PacketSM = Checksum2;
100451ba:	4b1a      	ldr	r3, [pc, #104]	@ (10045224 <parsePacket+0x1b0>)
100451bc:	2208      	movs	r2, #8
100451be:	701a      	strb	r2, [r3, #0]
		}else {
			PacketSM = Start;
			char send[4] = {0x40, 0x00, 0x00, 0x06};
			MP3_SendData(send);
		}
		break;
100451c0:	e02a      	b.n	10045218 <parsePacket+0x1a4>
			PacketSM = Start;
100451c2:	4b18      	ldr	r3, [pc, #96]	@ (10045224 <parsePacket+0x1b0>)
100451c4:	2200      	movs	r2, #0
100451c6:	701a      	strb	r2, [r3, #0]
			char send[4] = {0x40, 0x00, 0x00, 0x06};
100451c8:	210c      	movs	r1, #12
100451ca:	187b      	adds	r3, r7, r1
100451cc:	4a19      	ldr	r2, [pc, #100]	@ (10045234 <parsePacket+0x1c0>)
100451ce:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
100451d0:	187b      	adds	r3, r7, r1
100451d2:	0018      	movs	r0, r3
100451d4:	f7ff fef2 	bl	10044fbc <MP3_SendData>
		break;
100451d8:	e01e      	b.n	10045218 <parsePacket+0x1a4>
	case Checksum2:
		if(rx == 0xEF){
100451da:	1dfb      	adds	r3, r7, #7
100451dc:	781b      	ldrb	r3, [r3, #0]
100451de:	2bef      	cmp	r3, #239	@ 0xef
100451e0:	d115      	bne.n	1004520e <parsePacket+0x19a>
			if(Packet.command == 0x40){
100451e2:	4b12      	ldr	r3, [pc, #72]	@ (1004522c <parsePacket+0x1b8>)
100451e4:	781b      	ldrb	r3, [r3, #0]
100451e6:	2b40      	cmp	r3, #64	@ 0x40
100451e8:	d10c      	bne.n	10045204 <parsePacket+0x190>
				if(Packet.Param2 == 0x04){
100451ea:	4b10      	ldr	r3, [pc, #64]	@ (1004522c <parsePacket+0x1b8>)
100451ec:	78db      	ldrb	r3, [r3, #3]
100451ee:	2b04      	cmp	r3, #4
100451f0:	d108      	bne.n	10045204 <parsePacket+0x190>
					MP3_SendData(lastsent);
100451f2:	4b11      	ldr	r3, [pc, #68]	@ (10045238 <parsePacket+0x1c4>)
100451f4:	0018      	movs	r0, r3
100451f6:	f7ff fee1 	bl	10044fbc <MP3_SendData>

					PacketSM = Start;
100451fa:	4b0a      	ldr	r3, [pc, #40]	@ (10045224 <parsePacket+0x1b0>)
100451fc:	2200      	movs	r2, #0
100451fe:	701a      	strb	r2, [r3, #0]
					return 0;
10045200:	2300      	movs	r3, #0
10045202:	e00a      	b.n	1004521a <parsePacket+0x1a6>
				}
			}
			PacketSM = Start;
10045204:	4b07      	ldr	r3, [pc, #28]	@ (10045224 <parsePacket+0x1b0>)
10045206:	2200      	movs	r2, #0
10045208:	701a      	strb	r2, [r3, #0]
			return 1;
1004520a:	2301      	movs	r3, #1
1004520c:	e005      	b.n	1004521a <parsePacket+0x1a6>
		}
		PacketSM = Start;
1004520e:	4b05      	ldr	r3, [pc, #20]	@ (10045224 <parsePacket+0x1b0>)
10045210:	2200      	movs	r2, #0
10045212:	701a      	strb	r2, [r3, #0]
		break;
10045214:	e000      	b.n	10045218 <parsePacket+0x1a4>
		break;
10045216:	46c0      	nop			@ (mov r8, r8)
	}
	return 0;
10045218:	2300      	movs	r3, #0
}
1004521a:	0018      	movs	r0, r3
1004521c:	46bd      	mov	sp, r7
1004521e:	b006      	add	sp, #24
10045220:	bd80      	pop	{r7, pc}
10045222:	46c0      	nop			@ (mov r8, r8)
10045224:	20001bf9 	.word	0x20001bf9
10045228:	10069280 	.word	0x10069280
1004522c:	20001bfc 	.word	0x20001bfc
10045230:	fffffefb 	.word	0xfffffefb
10045234:	06000040 	.word	0x06000040
10045238:	20001c10 	.word	0x20001c10

1004523c <MP3_Event_Init>:
 * @Function: MP3_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t MP3_Event_Init(FIFO Queue){
1004523c:	b580      	push	{r7, lr}
1004523e:	b084      	sub	sp, #16
10045240:	af00      	add	r7, sp, #0
10045242:	6078      	str	r0, [r7, #4]
	//somehow need to be sent 3 seconds after the mp3 turns on
    MP3queue = Queue;
10045244:	4b1b      	ldr	r3, [pc, #108]	@ (100452b4 <MP3_Event_Init+0x78>)
10045246:	687a      	ldr	r2, [r7, #4]
10045248:	601a      	str	r2, [r3, #0]
    TIMERS_Init();
1004524a:	f001 f929 	bl	100464a0 <TIMERS_Init>
    pause = 0x02;
1004524e:	4b1a      	ldr	r3, [pc, #104]	@ (100452b8 <MP3_Event_Init+0x7c>)
10045250:	2202      	movs	r2, #2
10045252:	701a      	strb	r2, [r3, #0]
    DC = FLASH_GetDutyCycle()/100;
10045254:	f7ff f890 	bl	10044378 <FLASH_GetDutyCycle>
10045258:	0003      	movs	r3, r0
1004525a:	2164      	movs	r1, #100	@ 0x64
1004525c:	0018      	movs	r0, r3
1004525e:	f7fa ffef 	bl	10040240 <__udivsi3>
10045262:	0003      	movs	r3, r0
10045264:	b2da      	uxtb	r2, r3
10045266:	4b15      	ldr	r3, [pc, #84]	@ (100452bc <MP3_Event_Init+0x80>)
10045268:	701a      	strb	r2, [r3, #0]
    volume = FLASH_GetVolume()/100;
1004526a:	f7ff f86f 	bl	1004434c <FLASH_GetVolume>
1004526e:	0003      	movs	r3, r0
10045270:	2164      	movs	r1, #100	@ 0x64
10045272:	0018      	movs	r0, r3
10045274:	f7fa ffe4 	bl	10040240 <__udivsi3>
10045278:	0003      	movs	r3, r0
1004527a:	b2da      	uxtb	r2, r3
1004527c:	4b10      	ldr	r3, [pc, #64]	@ (100452c0 <MP3_Event_Init+0x84>)
1004527e:	701a      	strb	r2, [r3, #0]
    starttime = TIMERS_GetMilliSeconds();
10045280:	f001 f95a 	bl	10046538 <TIMERS_GetMilliSeconds>
10045284:	0002      	movs	r2, r0
10045286:	4b0f      	ldr	r3, [pc, #60]	@ (100452c4 <MP3_Event_Init+0x88>)
10045288:	601a      	str	r2, [r3, #0]
    inittime = TIMERS_GetMilliSeconds();
1004528a:	f001 f955 	bl	10046538 <TIMERS_GetMilliSeconds>
1004528e:	0002      	movs	r2, r0
10045290:	4b0d      	ldr	r3, [pc, #52]	@ (100452c8 <MP3_Event_Init+0x8c>)
10045292:	601a      	str	r2, [r3, #0]
    initialized = 0;
10045294:	4b0d      	ldr	r3, [pc, #52]	@ (100452cc <MP3_Event_Init+0x90>)
10045296:	2200      	movs	r2, #0
10045298:	701a      	strb	r2, [r3, #0]
	{
	char send[4] = {0x0C, 0x00, 0x00, 0x00};//reset module
1004529a:	210c      	movs	r1, #12
1004529c:	187b      	adds	r3, r7, r1
1004529e:	220c      	movs	r2, #12
100452a0:	601a      	str	r2, [r3, #0]
	MP3_SendData(send);
100452a2:	187b      	adds	r3, r7, r1
100452a4:	0018      	movs	r0, r3
100452a6:	f7ff fe89 	bl	10044fbc <MP3_SendData>
	}

    return INIT_OK;
100452aa:	2301      	movs	r3, #1
}
100452ac:	0018      	movs	r0, r3
100452ae:	46bd      	mov	sp, r7
100452b0:	b004      	add	sp, #16
100452b2:	bd80      	pop	{r7, pc}
100452b4:	20001be4 	.word	0x20001be4
100452b8:	20001be8 	.word	0x20001be8
100452bc:	20001be9 	.word	0x20001be9
100452c0:	20001bea 	.word	0x20001bea
100452c4:	20001bec 	.word	0x20001bec
100452c8:	20001bf4 	.word	0x20001bf4
100452cc:	20001bf8 	.word	0x20001bf8

100452d0 <MP3_Event_Post>:
 * @Function: MP3_Event_Init
 * @Brief: Provides the ability for state machines to interact
 * @param: event to be posted
 * @return: none
 */
void MP3_Event_Post(Event_t event){
100452d0:	b580      	push	{r7, lr}
100452d2:	b082      	sub	sp, #8
100452d4:	af00      	add	r7, sp, #0
100452d6:	1d3b      	adds	r3, r7, #4
100452d8:	6018      	str	r0, [r3, #0]
    FIFO_Enqueue(MP3queue, event);
100452da:	4b05      	ldr	r3, [pc, #20]	@ (100452f0 <MP3_Event_Post+0x20>)
100452dc:	681a      	ldr	r2, [r3, #0]
100452de:	1d3b      	adds	r3, r7, #4
100452e0:	6819      	ldr	r1, [r3, #0]
100452e2:	0010      	movs	r0, r2
100452e4:	f7fe fedf 	bl	100440a6 <FIFO_Enqueue>
}
100452e8:	46c0      	nop			@ (mov r8, r8)
100452ea:	46bd      	mov	sp, r7
100452ec:	b002      	add	sp, #8
100452ee:	bd80      	pop	{r7, pc}
100452f0:	20001be4 	.word	0x20001be4

100452f4 <MP3_Event_Updater>:
 * @Function: MP3_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the
 * @param: none
 * @return: An event
 */
Event_t MP3_Event_Updater(void){
100452f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100452f6:	b089      	sub	sp, #36	@ 0x24
100452f8:	af00      	add	r7, sp, #0
    Event_t event = (Event_t){EVENT_NONE, 0};
100452fa:	2508      	movs	r5, #8
100452fc:	197b      	adds	r3, r7, r5
100452fe:	2200      	movs	r2, #0
10045300:	701a      	strb	r2, [r3, #0]
10045302:	197b      	adds	r3, r7, r5
10045304:	2200      	movs	r2, #0
10045306:	805a      	strh	r2, [r3, #2]
    uint32_t timer = TIMERS_GetMilliSeconds();
10045308:	f001 f916 	bl	10046538 <TIMERS_GetMilliSeconds>
1004530c:	0003      	movs	r3, r0
1004530e:	61fb      	str	r3, [r7, #28]
    char rx = LPUART_ReadRx();
10045310:	261b      	movs	r6, #27
10045312:	19bc      	adds	r4, r7, r6
10045314:	f001 fa46 	bl	100467a4 <LPUART_ReadRx>
10045318:	0003      	movs	r3, r0
1004531a:	7023      	strb	r3, [r4, #0]
    //Check for LPUART events
	if(rx != UARTFAILED){
1004531c:	0034      	movs	r4, r6
1004531e:	193b      	adds	r3, r7, r4
10045320:	781b      	ldrb	r3, [r3, #0]
10045322:	2b25      	cmp	r3, #37	@ 0x25
10045324:	d012      	beq.n	1004534c <MP3_Event_Updater+0x58>
		if(parsePacket(rx)){
10045326:	193b      	adds	r3, r7, r4
10045328:	781b      	ldrb	r3, [r3, #0]
1004532a:	0018      	movs	r0, r3
1004532c:	f7ff fea2 	bl	10045074 <parsePacket>
10045330:	1e03      	subs	r3, r0, #0
10045332:	d00b      	beq.n	1004534c <MP3_Event_Updater+0x58>
			event.status = EVENT_LPUART;
10045334:	197b      	adds	r3, r7, r5
10045336:	2208      	movs	r2, #8
10045338:	701a      	strb	r2, [r3, #0]
			event.data = rx;
1004533a:	193b      	adds	r3, r7, r4
1004533c:	781b      	ldrb	r3, [r3, #0]
1004533e:	b29a      	uxth	r2, r3
10045340:	197b      	adds	r3, r7, r5
10045342:	805a      	strh	r2, [r3, #2]
			MP3_Event_Post(event);
10045344:	197b      	adds	r3, r7, r5
10045346:	6818      	ldr	r0, [r3, #0]
10045348:	f7ff ffc2 	bl	100452d0 <MP3_Event_Post>
		}
	}
	//checks a timer to un-pause the speaker to adhere to the duty cycle
	if(pause == 1){
1004534c:	4b47      	ldr	r3, [pc, #284]	@ (1004546c <MP3_Event_Updater+0x178>)
1004534e:	781b      	ldrb	r3, [r3, #0]
10045350:	2b01      	cmp	r3, #1
10045352:	d138      	bne.n	100453c6 <MP3_Event_Updater+0xd2>
		uint32_t waittime = (endtime-starttime)*((double)(100/DC)-1);//Pause time = Active time * (1/DC-1)
10045354:	4b46      	ldr	r3, [pc, #280]	@ (10045470 <MP3_Event_Updater+0x17c>)
10045356:	681a      	ldr	r2, [r3, #0]
10045358:	4b46      	ldr	r3, [pc, #280]	@ (10045474 <MP3_Event_Updater+0x180>)
1004535a:	681b      	ldr	r3, [r3, #0]
1004535c:	1ad3      	subs	r3, r2, r3
1004535e:	0018      	movs	r0, r3
10045360:	f7fc f9a0 	bl	100416a4 <__aeabi_ui2d>
10045364:	0004      	movs	r4, r0
10045366:	000d      	movs	r5, r1
10045368:	4b43      	ldr	r3, [pc, #268]	@ (10045478 <MP3_Event_Updater+0x184>)
1004536a:	781b      	ldrb	r3, [r3, #0]
1004536c:	0019      	movs	r1, r3
1004536e:	2064      	movs	r0, #100	@ 0x64
10045370:	f7fa fff0 	bl	10040354 <__divsi3>
10045374:	0003      	movs	r3, r0
10045376:	0018      	movs	r0, r3
10045378:	f7fc f966 	bl	10041648 <__aeabi_i2d>
1004537c:	2200      	movs	r2, #0
1004537e:	4b3f      	ldr	r3, [pc, #252]	@ (1004547c <MP3_Event_Updater+0x188>)
10045380:	f7fb fd1c 	bl	10040dbc <__aeabi_dsub>
10045384:	0002      	movs	r2, r0
10045386:	000b      	movs	r3, r1
10045388:	0020      	movs	r0, r4
1004538a:	0029      	movs	r1, r5
1004538c:	f7fb fa30 	bl	100407f0 <__aeabi_dmul>
10045390:	0002      	movs	r2, r0
10045392:	000b      	movs	r3, r1
10045394:	0010      	movs	r0, r2
10045396:	0019      	movs	r1, r3
10045398:	f7fb f940 	bl	1004061c <__aeabi_d2uiz>
1004539c:	0003      	movs	r3, r0
1004539e:	617b      	str	r3, [r7, #20]
		uint32_t curtime = TIMERS_GetMilliSeconds();
100453a0:	f001 f8ca 	bl	10046538 <TIMERS_GetMilliSeconds>
100453a4:	0003      	movs	r3, r0
100453a6:	613b      	str	r3, [r7, #16]
		if(curtime >= starttime+waittime){
100453a8:	4b32      	ldr	r3, [pc, #200]	@ (10045474 <MP3_Event_Updater+0x180>)
100453aa:	681a      	ldr	r2, [r3, #0]
100453ac:	697b      	ldr	r3, [r7, #20]
100453ae:	18d3      	adds	r3, r2, r3
100453b0:	693a      	ldr	r2, [r7, #16]
100453b2:	429a      	cmp	r2, r3
100453b4:	d307      	bcc.n	100453c6 <MP3_Event_Updater+0xd2>
			event.status = EVENT_TIMEOUT;
100453b6:	2108      	movs	r1, #8
100453b8:	187b      	adds	r3, r7, r1
100453ba:	2209      	movs	r2, #9
100453bc:	701a      	strb	r2, [r3, #0]
			MP3_Event_Post(event);
100453be:	187b      	adds	r3, r7, r1
100453c0:	6818      	ldr	r0, [r3, #0]
100453c2:	f7ff ff85 	bl	100452d0 <MP3_Event_Post>
//			}
//		}
//	}

	//check for init timer events
    if(((timer-inittime) >= 3000) && !initialized){//wait for the speaker to be ready for use n initialization
100453c6:	4b2e      	ldr	r3, [pc, #184]	@ (10045480 <MP3_Event_Updater+0x18c>)
100453c8:	681b      	ldr	r3, [r3, #0]
100453ca:	69fa      	ldr	r2, [r7, #28]
100453cc:	1ad3      	subs	r3, r2, r3
100453ce:	4a2d      	ldr	r2, [pc, #180]	@ (10045484 <MP3_Event_Updater+0x190>)
100453d0:	4293      	cmp	r3, r2
100453d2:	d90e      	bls.n	100453f2 <MP3_Event_Updater+0xfe>
100453d4:	4b2c      	ldr	r3, [pc, #176]	@ (10045488 <MP3_Event_Updater+0x194>)
100453d6:	781b      	ldrb	r3, [r3, #0]
100453d8:	2b00      	cmp	r3, #0
100453da:	d10a      	bne.n	100453f2 <MP3_Event_Updater+0xfe>
		event.status = EVENT_INIT;
100453dc:	2108      	movs	r1, #8
100453de:	187b      	adds	r3, r7, r1
100453e0:	2201      	movs	r2, #1
100453e2:	701a      	strb	r2, [r3, #0]
		event.data = 0;
100453e4:	187b      	adds	r3, r7, r1
100453e6:	2200      	movs	r2, #0
100453e8:	805a      	strh	r2, [r3, #2]
		MP3_Event_Post(event);
100453ea:	187b      	adds	r3, r7, r1
100453ec:	6818      	ldr	r0, [r3, #0]
100453ee:	f7ff ff6f 	bl	100452d0 <MP3_Event_Post>
	}

    //check for settings update events
    if(volume != FLASH_GetVolume() || DC != FLASH_GetDutyCycle()){
100453f2:	f7fe ffab 	bl	1004434c <FLASH_GetVolume>
100453f6:	0003      	movs	r3, r0
100453f8:	001a      	movs	r2, r3
100453fa:	4b24      	ldr	r3, [pc, #144]	@ (1004548c <MP3_Event_Updater+0x198>)
100453fc:	781b      	ldrb	r3, [r3, #0]
100453fe:	429a      	cmp	r2, r3
10045400:	d107      	bne.n	10045412 <MP3_Event_Updater+0x11e>
10045402:	f7fe ffb9 	bl	10044378 <FLASH_GetDutyCycle>
10045406:	0003      	movs	r3, r0
10045408:	001a      	movs	r2, r3
1004540a:	4b1b      	ldr	r3, [pc, #108]	@ (10045478 <MP3_Event_Updater+0x184>)
1004540c:	781b      	ldrb	r3, [r3, #0]
1004540e:	429a      	cmp	r2, r3
10045410:	d014      	beq.n	1004543c <MP3_Event_Updater+0x148>
    	event.status = EVENT_SETTINGS;
10045412:	2408      	movs	r4, #8
10045414:	193b      	adds	r3, r7, r4
10045416:	220a      	movs	r2, #10
10045418:	701a      	strb	r2, [r3, #0]
    	event.data = (volume == FLASH_GetVolume());
1004541a:	f7fe ff97 	bl	1004434c <FLASH_GetVolume>
1004541e:	0003      	movs	r3, r0
10045420:	001a      	movs	r2, r3
10045422:	4b1a      	ldr	r3, [pc, #104]	@ (1004548c <MP3_Event_Updater+0x198>)
10045424:	781b      	ldrb	r3, [r3, #0]
10045426:	1ad3      	subs	r3, r2, r3
10045428:	425a      	negs	r2, r3
1004542a:	4153      	adcs	r3, r2
1004542c:	b2db      	uxtb	r3, r3
1004542e:	001a      	movs	r2, r3
10045430:	193b      	adds	r3, r7, r4
10045432:	805a      	strh	r2, [r3, #2]
		MP3_Event_Post(event);
10045434:	193b      	adds	r3, r7, r4
10045436:	6818      	ldr	r0, [r3, #0]
10045438:	f7ff ff4a 	bl	100452d0 <MP3_Event_Post>
    }
    return event;
1004543c:	210c      	movs	r1, #12
1004543e:	187b      	adds	r3, r7, r1
10045440:	2208      	movs	r2, #8
10045442:	18ba      	adds	r2, r7, r2
10045444:	6812      	ldr	r2, [r2, #0]
10045446:	601a      	str	r2, [r3, #0]
10045448:	187a      	adds	r2, r7, r1
1004544a:	2300      	movs	r3, #0
1004544c:	8811      	ldrh	r1, [r2, #0]
1004544e:	0409      	lsls	r1, r1, #16
10045450:	0c09      	lsrs	r1, r1, #16
10045452:	0c1b      	lsrs	r3, r3, #16
10045454:	041b      	lsls	r3, r3, #16
10045456:	430b      	orrs	r3, r1
10045458:	8852      	ldrh	r2, [r2, #2]
1004545a:	0412      	lsls	r2, r2, #16
1004545c:	041b      	lsls	r3, r3, #16
1004545e:	0c1b      	lsrs	r3, r3, #16
10045460:	4313      	orrs	r3, r2
}
10045462:	0018      	movs	r0, r3
10045464:	46bd      	mov	sp, r7
10045466:	b009      	add	sp, #36	@ 0x24
10045468:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004546a:	46c0      	nop			@ (mov r8, r8)
1004546c:	20001be8 	.word	0x20001be8
10045470:	20001bf0 	.word	0x20001bf0
10045474:	20001bec 	.word	0x20001bec
10045478:	20001be9 	.word	0x20001be9
1004547c:	3ff00000 	.word	0x3ff00000
10045480:	20001bf4 	.word	0x20001bf4
10045484:	00000bb7 	.word	0x00000bb7
10045488:	20001bf8 	.word	0x20001bf8
1004548c:	20001bea 	.word	0x20001bea

10045490 <MP3_Event_Handler>:
 * @Function: MP3_Event_Handler
 * @Brief:
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t MP3_Event_Handler(Event_t event){
10045490:	b5b0      	push	{r4, r5, r7, lr}
10045492:	b09c      	sub	sp, #112	@ 0x70
10045494:	af00      	add	r7, sp, #0
10045496:	1d3b      	adds	r3, r7, #4
10045498:	6018      	str	r0, [r3, #0]
	if(event.status == EVENT_INIT){
1004549a:	1d3b      	adds	r3, r7, #4
1004549c:	781b      	ldrb	r3, [r3, #0]
1004549e:	b25b      	sxtb	r3, r3
100454a0:	2b01      	cmp	r3, #1
100454a2:	d000      	beq.n	100454a6 <MP3_Event_Handler+0x16>
100454a4:	e0bd      	b.n	10045622 <MP3_Event_Handler+0x192>
		{
		char send[4] = {0x0E, 0x00, 0x00, 0x00};//pause
100454a6:	2150      	movs	r1, #80	@ 0x50
100454a8:	187b      	adds	r3, r7, r1
100454aa:	220e      	movs	r2, #14
100454ac:	601a      	str	r2, [r3, #0]
		MP3_SendData(send);
100454ae:	187b      	adds	r3, r7, r1
100454b0:	0018      	movs	r0, r3
100454b2:	f7ff fd83 	bl	10044fbc <MP3_SendData>
		}
		uint8_t scanning = 1;
100454b6:	236f      	movs	r3, #111	@ 0x6f
100454b8:	18fb      	adds	r3, r7, r3
100454ba:	2201      	movs	r2, #1
100454bc:	701a      	strb	r2, [r3, #0]
		numfolders = 1;
100454be:	4bc1      	ldr	r3, [pc, #772]	@ (100457c4 <MP3_Event_Handler+0x334>)
100454c0:	2201      	movs	r2, #1
100454c2:	701a      	strb	r2, [r3, #0]
		FIFO tempFolders = FIFO_Create();
100454c4:	f7fe fdb2 	bl	1004402c <FIFO_Create>
100454c8:	0003      	movs	r3, r0
100454ca:	663b      	str	r3, [r7, #96]	@ 0x60
		while(scanning){
100454cc:	e054      	b.n	10045578 <MP3_Event_Handler+0xe8>
			{
			char send[4] = {0x4E, 0x00, 0x00, numfolders};//query the number of files on the micrSD
100454ce:	214c      	movs	r1, #76	@ 0x4c
100454d0:	187b      	adds	r3, r7, r1
100454d2:	224e      	movs	r2, #78	@ 0x4e
100454d4:	701a      	strb	r2, [r3, #0]
100454d6:	187b      	adds	r3, r7, r1
100454d8:	2200      	movs	r2, #0
100454da:	705a      	strb	r2, [r3, #1]
100454dc:	187b      	adds	r3, r7, r1
100454de:	2200      	movs	r2, #0
100454e0:	709a      	strb	r2, [r3, #2]
100454e2:	4bb8      	ldr	r3, [pc, #736]	@ (100457c4 <MP3_Event_Handler+0x334>)
100454e4:	781a      	ldrb	r2, [r3, #0]
100454e6:	187b      	adds	r3, r7, r1
100454e8:	70da      	strb	r2, [r3, #3]
			MP3_SendData(send);
100454ea:	187b      	adds	r3, r7, r1
100454ec:	0018      	movs	r0, r3
100454ee:	f7ff fd65 	bl	10044fbc <MP3_SendData>
			}
			uint32_t time = TIMERS_GetMilliSeconds();
100454f2:	f001 f821 	bl	10046538 <TIMERS_GetMilliSeconds>
100454f6:	0003      	movs	r3, r0
100454f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
			while(!parsePacket(LPUART_ReadRx()) && (time+1000) > TIMERS_GetMilliSeconds());
100454fa:	46c0      	nop			@ (mov r8, r8)
100454fc:	f001 f952 	bl	100467a4 <LPUART_ReadRx>
10045500:	0003      	movs	r3, r0
10045502:	0018      	movs	r0, r3
10045504:	f7ff fdb6 	bl	10045074 <parsePacket>
10045508:	1e03      	subs	r3, r0, #0
1004550a:	d108      	bne.n	1004551e <MP3_Event_Handler+0x8e>
1004550c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
1004550e:	22fa      	movs	r2, #250	@ 0xfa
10045510:	0092      	lsls	r2, r2, #2
10045512:	189c      	adds	r4, r3, r2
10045514:	f001 f810 	bl	10046538 <TIMERS_GetMilliSeconds>
10045518:	0003      	movs	r3, r0
1004551a:	429c      	cmp	r4, r3
1004551c:	d8ee      	bhi.n	100454fc <MP3_Event_Handler+0x6c>
			if((time+1000) < TIMERS_GetMilliSeconds()){
1004551e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
10045520:	22fa      	movs	r2, #250	@ 0xfa
10045522:	0092      	lsls	r2, r2, #2
10045524:	189c      	adds	r4, r3, r2
10045526:	f001 f807 	bl	10046538 <TIMERS_GetMilliSeconds>
1004552a:	0003      	movs	r3, r0
1004552c:	429c      	cmp	r4, r3
1004552e:	d322      	bcc.n	10045576 <MP3_Event_Handler+0xe6>
				continue;// reattempt communication
			}
			if(Packet.command==0x4E){
10045530:	4ba5      	ldr	r3, [pc, #660]	@ (100457c8 <MP3_Event_Handler+0x338>)
10045532:	781b      	ldrb	r3, [r3, #0]
10045534:	2b4e      	cmp	r3, #78	@ 0x4e
10045536:	d115      	bne.n	10045564 <MP3_Event_Handler+0xd4>
				numfolders++;
10045538:	4ba2      	ldr	r3, [pc, #648]	@ (100457c4 <MP3_Event_Handler+0x334>)
1004553a:	781b      	ldrb	r3, [r3, #0]
1004553c:	3301      	adds	r3, #1
1004553e:	b2da      	uxtb	r2, r3
10045540:	4ba0      	ldr	r3, [pc, #640]	@ (100457c4 <MP3_Event_Handler+0x334>)
10045542:	701a      	strb	r2, [r3, #0]
				FIFO_Enqueue(tempFolders, (Event_t){EVENT_NONE, Packet.Param2});
10045544:	2148      	movs	r1, #72	@ 0x48
10045546:	187b      	adds	r3, r7, r1
10045548:	2200      	movs	r2, #0
1004554a:	701a      	strb	r2, [r3, #0]
1004554c:	4b9e      	ldr	r3, [pc, #632]	@ (100457c8 <MP3_Event_Handler+0x338>)
1004554e:	78db      	ldrb	r3, [r3, #3]
10045550:	001a      	movs	r2, r3
10045552:	187b      	adds	r3, r7, r1
10045554:	805a      	strh	r2, [r3, #2]
10045556:	187b      	adds	r3, r7, r1
10045558:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
1004555a:	6819      	ldr	r1, [r3, #0]
1004555c:	0010      	movs	r0, r2
1004555e:	f7fe fda2 	bl	100440a6 <FIFO_Enqueue>
10045562:	e009      	b.n	10045578 <MP3_Event_Handler+0xe8>
			}else if(Packet.command == 0x40){
10045564:	4b98      	ldr	r3, [pc, #608]	@ (100457c8 <MP3_Event_Handler+0x338>)
10045566:	781b      	ldrb	r3, [r3, #0]
10045568:	2b40      	cmp	r3, #64	@ 0x40
1004556a:	d105      	bne.n	10045578 <MP3_Event_Handler+0xe8>
				scanning = 0;
1004556c:	236f      	movs	r3, #111	@ 0x6f
1004556e:	18fb      	adds	r3, r7, r3
10045570:	2200      	movs	r2, #0
10045572:	701a      	strb	r2, [r3, #0]
10045574:	e000      	b.n	10045578 <MP3_Event_Handler+0xe8>
				continue;// reattempt communication
10045576:	46c0      	nop			@ (mov r8, r8)
		while(scanning){
10045578:	236f      	movs	r3, #111	@ 0x6f
1004557a:	18fb      	adds	r3, r7, r3
1004557c:	781b      	ldrb	r3, [r3, #0]
1004557e:	2b00      	cmp	r3, #0
10045580:	d1a5      	bne.n	100454ce <MP3_Event_Handler+0x3e>
			}
		}
		numfolders--;
10045582:	4b90      	ldr	r3, [pc, #576]	@ (100457c4 <MP3_Event_Handler+0x334>)
10045584:	781b      	ldrb	r3, [r3, #0]
10045586:	3b01      	subs	r3, #1
10045588:	b2da      	uxtb	r2, r3
1004558a:	4b8e      	ldr	r3, [pc, #568]	@ (100457c4 <MP3_Event_Handler+0x334>)
1004558c:	701a      	strb	r2, [r3, #0]
		folders = malloc(sizeof(uint8_t)*numfolders);
1004558e:	4b8d      	ldr	r3, [pc, #564]	@ (100457c4 <MP3_Event_Handler+0x334>)
10045590:	781b      	ldrb	r3, [r3, #0]
10045592:	0018      	movs	r0, r3
10045594:	f021 ff5c 	bl	10067450 <malloc>
10045598:	0003      	movs	r3, r0
1004559a:	001a      	movs	r2, r3
1004559c:	4b8b      	ldr	r3, [pc, #556]	@ (100457cc <MP3_Event_Handler+0x33c>)
1004559e:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < numfolders; i++){
100455a0:	2300      	movs	r3, #0
100455a2:	66bb      	str	r3, [r7, #104]	@ 0x68
100455a4:	e013      	b.n	100455ce <MP3_Event_Handler+0x13e>
			folders[i] = FIFO_Dequeue(tempFolders).data;
100455a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
100455a8:	0018      	movs	r0, r3
100455aa:	f7fe fdb2 	bl	10044112 <FIFO_Dequeue>
100455ae:	0003      	movs	r3, r0
100455b0:	001a      	movs	r2, r3
100455b2:	2158      	movs	r1, #88	@ 0x58
100455b4:	187b      	adds	r3, r7, r1
100455b6:	601a      	str	r2, [r3, #0]
100455b8:	187b      	adds	r3, r7, r1
100455ba:	8859      	ldrh	r1, [r3, #2]
100455bc:	4b83      	ldr	r3, [pc, #524]	@ (100457cc <MP3_Event_Handler+0x33c>)
100455be:	681a      	ldr	r2, [r3, #0]
100455c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
100455c2:	18d3      	adds	r3, r2, r3
100455c4:	b2ca      	uxtb	r2, r1
100455c6:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < numfolders; i++){
100455c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
100455ca:	3301      	adds	r3, #1
100455cc:	66bb      	str	r3, [r7, #104]	@ 0x68
100455ce:	4b7d      	ldr	r3, [pc, #500]	@ (100457c4 <MP3_Event_Handler+0x334>)
100455d0:	781b      	ldrb	r3, [r3, #0]
100455d2:	001a      	movs	r2, r3
100455d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
100455d6:	4293      	cmp	r3, r2
100455d8:	dbe5      	blt.n	100455a6 <MP3_Event_Handler+0x116>
		}
		FIFO_Destroy(tempFolders);
100455da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
100455dc:	0018      	movs	r0, r3
100455de:	f7fe fd40 	bl	10044062 <FIFO_Destroy>
		initialized = 1;
100455e2:	4b7b      	ldr	r3, [pc, #492]	@ (100457d0 <MP3_Event_Handler+0x340>)
100455e4:	2201      	movs	r2, #1
100455e6:	701a      	strb	r2, [r3, #0]
		char send[4] = {0x06, 0x00, 0x00, (uint8_t)(((uint16_t)volume)*30/100)};
100455e8:	2454      	movs	r4, #84	@ 0x54
100455ea:	193b      	adds	r3, r7, r4
100455ec:	2206      	movs	r2, #6
100455ee:	701a      	strb	r2, [r3, #0]
100455f0:	193b      	adds	r3, r7, r4
100455f2:	2200      	movs	r2, #0
100455f4:	705a      	strb	r2, [r3, #1]
100455f6:	193b      	adds	r3, r7, r4
100455f8:	2200      	movs	r2, #0
100455fa:	709a      	strb	r2, [r3, #2]
100455fc:	4b75      	ldr	r3, [pc, #468]	@ (100457d4 <MP3_Event_Handler+0x344>)
100455fe:	781b      	ldrb	r3, [r3, #0]
10045600:	001a      	movs	r2, r3
10045602:	0013      	movs	r3, r2
10045604:	011b      	lsls	r3, r3, #4
10045606:	1a9b      	subs	r3, r3, r2
10045608:	005b      	lsls	r3, r3, #1
1004560a:	2164      	movs	r1, #100	@ 0x64
1004560c:	0018      	movs	r0, r3
1004560e:	f7fa fea1 	bl	10040354 <__divsi3>
10045612:	0003      	movs	r3, r0
10045614:	b2da      	uxtb	r2, r3
10045616:	193b      	adds	r3, r7, r4
10045618:	70da      	strb	r2, [r3, #3]
		MP3_SendData(send);
1004561a:	193b      	adds	r3, r7, r4
1004561c:	0018      	movs	r0, r3
1004561e:	f7ff fccd 	bl	10044fbc <MP3_SendData>
	}
	if(event.status == EVENT_TIMEOUT){
10045622:	1d3b      	adds	r3, r7, #4
10045624:	781b      	ldrb	r3, [r3, #0]
10045626:	b25b      	sxtb	r3, r3
10045628:	2b09      	cmp	r3, #9
1004562a:	d11f      	bne.n	1004566c <MP3_Event_Handler+0x1dc>
		//restart the MP3 player
		pause = 0;
1004562c:	4b6a      	ldr	r3, [pc, #424]	@ (100457d8 <MP3_Event_Handler+0x348>)
1004562e:	2200      	movs	r2, #0
10045630:	701a      	strb	r2, [r3, #0]
		starttime = TIMERS_GetMilliSeconds();
10045632:	f000 ff81 	bl	10046538 <TIMERS_GetMilliSeconds>
10045636:	0002      	movs	r2, r0
10045638:	4b68      	ldr	r3, [pc, #416]	@ (100457dc <MP3_Event_Handler+0x34c>)
1004563a:	601a      	str	r2, [r3, #0]
		char send[4] = {0x03, 0x00, 0x00, firsttrack+nexttrack-1};
1004563c:	2144      	movs	r1, #68	@ 0x44
1004563e:	187b      	adds	r3, r7, r1
10045640:	2203      	movs	r2, #3
10045642:	701a      	strb	r2, [r3, #0]
10045644:	187b      	adds	r3, r7, r1
10045646:	2200      	movs	r2, #0
10045648:	705a      	strb	r2, [r3, #1]
1004564a:	187b      	adds	r3, r7, r1
1004564c:	2200      	movs	r2, #0
1004564e:	709a      	strb	r2, [r3, #2]
10045650:	4b63      	ldr	r3, [pc, #396]	@ (100457e0 <MP3_Event_Handler+0x350>)
10045652:	781a      	ldrb	r2, [r3, #0]
10045654:	4b63      	ldr	r3, [pc, #396]	@ (100457e4 <MP3_Event_Handler+0x354>)
10045656:	781b      	ldrb	r3, [r3, #0]
10045658:	18d3      	adds	r3, r2, r3
1004565a:	b2db      	uxtb	r3, r3
1004565c:	3b01      	subs	r3, #1
1004565e:	b2da      	uxtb	r2, r3
10045660:	187b      	adds	r3, r7, r1
10045662:	70da      	strb	r2, [r3, #3]
		MP3_SendData(send);
10045664:	187b      	adds	r3, r7, r1
10045666:	0018      	movs	r0, r3
10045668:	f7ff fca8 	bl	10044fbc <MP3_SendData>

	}if(event.status == EVENT_PLAY){
1004566c:	1d3b      	adds	r3, r7, #4
1004566e:	781b      	ldrb	r3, [r3, #0]
10045670:	b25b      	sxtb	r3, r3
10045672:	2b0b      	cmp	r3, #11
10045674:	d000      	beq.n	10045678 <MP3_Event_Handler+0x1e8>
10045676:	e0c0      	b.n	100457fa <MP3_Event_Handler+0x36a>
		char text[30];
		sprintf(text, "Play event: %d, %d", event.data>>8, (event.data&0xFF));
10045678:	1d3b      	adds	r3, r7, #4
1004567a:	885b      	ldrh	r3, [r3, #2]
1004567c:	0a1b      	lsrs	r3, r3, #8
1004567e:	b29b      	uxth	r3, r3
10045680:	001c      	movs	r4, r3
10045682:	1d3b      	adds	r3, r7, #4
10045684:	885b      	ldrh	r3, [r3, #2]
10045686:	001a      	movs	r2, r3
10045688:	23ff      	movs	r3, #255	@ 0xff
1004568a:	4013      	ands	r3, r2
1004568c:	4956      	ldr	r1, [pc, #344]	@ (100457e8 <MP3_Event_Handler+0x358>)
1004568e:	2524      	movs	r5, #36	@ 0x24
10045690:	1978      	adds	r0, r7, r5
10045692:	0022      	movs	r2, r4
10045694:	f022 f8c6 	bl	10067824 <siprintf>
		discountprintf(text);
10045698:	197b      	adds	r3, r7, r5
1004569a:	0018      	movs	r0, r3
1004569c:	f7fe fca0 	bl	10043fe0 <discountprintf>
		Scheduler_Event_Post(event);
100456a0:	1d3b      	adds	r3, r7, #4
100456a2:	6818      	ldr	r0, [r3, #0]
100456a4:	f000 fdbe 	bl	10046224 <Scheduler_Event_Post>
		starttime = TIMERS_GetMilliSeconds();
100456a8:	f000 ff46 	bl	10046538 <TIMERS_GetMilliSeconds>
100456ac:	0002      	movs	r2, r0
100456ae:	4b4b      	ldr	r3, [pc, #300]	@ (100457dc <MP3_Event_Handler+0x34c>)
100456b0:	601a      	str	r2, [r3, #0]
		//if 0 < folder <= max folders and 0 < track <= max tracks in given folder
		if(event.data>>8 != 0 && (event.data>>8) <= numfolders){
100456b2:	1d3b      	adds	r3, r7, #4
100456b4:	885b      	ldrh	r3, [r3, #2]
100456b6:	0a1b      	lsrs	r3, r3, #8
100456b8:	b29b      	uxth	r3, r3
100456ba:	2b00      	cmp	r3, #0
100456bc:	d070      	beq.n	100457a0 <MP3_Event_Handler+0x310>
100456be:	1d3b      	adds	r3, r7, #4
100456c0:	885b      	ldrh	r3, [r3, #2]
100456c2:	0a1b      	lsrs	r3, r3, #8
100456c4:	b29b      	uxth	r3, r3
100456c6:	4a3f      	ldr	r2, [pc, #252]	@ (100457c4 <MP3_Event_Handler+0x334>)
100456c8:	7812      	ldrb	r2, [r2, #0]
100456ca:	4293      	cmp	r3, r2
100456cc:	d868      	bhi.n	100457a0 <MP3_Event_Handler+0x310>
			if((event.data&0xFF)!= 0 && (event.data&0xFF) <= folders[(event.data>>8)-1]){
100456ce:	1d3b      	adds	r3, r7, #4
100456d0:	885b      	ldrh	r3, [r3, #2]
100456d2:	001a      	movs	r2, r3
100456d4:	23ff      	movs	r3, #255	@ 0xff
100456d6:	4013      	ands	r3, r2
100456d8:	d100      	bne.n	100456dc <MP3_Event_Handler+0x24c>
100456da:	e08d      	b.n	100457f8 <MP3_Event_Handler+0x368>
100456dc:	1d3b      	adds	r3, r7, #4
100456de:	885b      	ldrh	r3, [r3, #2]
100456e0:	001a      	movs	r2, r3
100456e2:	23ff      	movs	r3, #255	@ 0xff
100456e4:	401a      	ands	r2, r3
100456e6:	4b39      	ldr	r3, [pc, #228]	@ (100457cc <MP3_Event_Handler+0x33c>)
100456e8:	6819      	ldr	r1, [r3, #0]
100456ea:	1d3b      	adds	r3, r7, #4
100456ec:	885b      	ldrh	r3, [r3, #2]
100456ee:	0a1b      	lsrs	r3, r3, #8
100456f0:	b29b      	uxth	r3, r3
100456f2:	3b01      	subs	r3, #1
100456f4:	18cb      	adds	r3, r1, r3
100456f6:	781b      	ldrb	r3, [r3, #0]
100456f8:	429a      	cmp	r2, r3
100456fa:	dd00      	ble.n	100456fe <MP3_Event_Handler+0x26e>
100456fc:	e07c      	b.n	100457f8 <MP3_Event_Handler+0x368>
				pause = 0;
100456fe:	4b36      	ldr	r3, [pc, #216]	@ (100457d8 <MP3_Event_Handler+0x348>)
10045700:	2200      	movs	r2, #0
10045702:	701a      	strb	r2, [r3, #0]
				//store the desired track and folder
				folder = event.data>>8;
10045704:	1d3b      	adds	r3, r7, #4
10045706:	885b      	ldrh	r3, [r3, #2]
10045708:	0a1b      	lsrs	r3, r3, #8
1004570a:	b29b      	uxth	r3, r3
1004570c:	b2da      	uxtb	r2, r3
1004570e:	4b37      	ldr	r3, [pc, #220]	@ (100457ec <MP3_Event_Handler+0x35c>)
10045710:	701a      	strb	r2, [r3, #0]
				track = event.data&0xFF;
10045712:	1d3b      	adds	r3, r7, #4
10045714:	885b      	ldrh	r3, [r3, #2]
10045716:	b2da      	uxtb	r2, r3
10045718:	4b35      	ldr	r3, [pc, #212]	@ (100457f0 <MP3_Event_Handler+0x360>)
1004571a:	701a      	strb	r2, [r3, #0]
				//calculate the absolute position of the desired track
				firsttrack = 1;
1004571c:	4b30      	ldr	r3, [pc, #192]	@ (100457e0 <MP3_Event_Handler+0x350>)
1004571e:	2201      	movs	r2, #1
10045720:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < folder-1; i ++){
10045722:	2300      	movs	r3, #0
10045724:	667b      	str	r3, [r7, #100]	@ 0x64
10045726:	e00d      	b.n	10045744 <MP3_Event_Handler+0x2b4>
					firsttrack+= folders[i];
10045728:	4b28      	ldr	r3, [pc, #160]	@ (100457cc <MP3_Event_Handler+0x33c>)
1004572a:	681a      	ldr	r2, [r3, #0]
1004572c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004572e:	18d3      	adds	r3, r2, r3
10045730:	781a      	ldrb	r2, [r3, #0]
10045732:	4b2b      	ldr	r3, [pc, #172]	@ (100457e0 <MP3_Event_Handler+0x350>)
10045734:	781b      	ldrb	r3, [r3, #0]
10045736:	18d3      	adds	r3, r2, r3
10045738:	b2da      	uxtb	r2, r3
1004573a:	4b29      	ldr	r3, [pc, #164]	@ (100457e0 <MP3_Event_Handler+0x350>)
1004573c:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < folder-1; i ++){
1004573e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10045740:	3301      	adds	r3, #1
10045742:	667b      	str	r3, [r7, #100]	@ 0x64
10045744:	4b29      	ldr	r3, [pc, #164]	@ (100457ec <MP3_Event_Handler+0x35c>)
10045746:	781b      	ldrb	r3, [r3, #0]
10045748:	3b01      	subs	r3, #1
1004574a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
1004574c:	429a      	cmp	r2, r3
1004574e:	dbeb      	blt.n	10045728 <MP3_Event_Handler+0x298>
				}
				//update the desired track to the MP3
				{
				char send2[4] = {0x03, 0x00, 0x00, firsttrack+track-1};
10045750:	2120      	movs	r1, #32
10045752:	187b      	adds	r3, r7, r1
10045754:	2203      	movs	r2, #3
10045756:	701a      	strb	r2, [r3, #0]
10045758:	187b      	adds	r3, r7, r1
1004575a:	2200      	movs	r2, #0
1004575c:	705a      	strb	r2, [r3, #1]
1004575e:	187b      	adds	r3, r7, r1
10045760:	2200      	movs	r2, #0
10045762:	709a      	strb	r2, [r3, #2]
10045764:	4b1e      	ldr	r3, [pc, #120]	@ (100457e0 <MP3_Event_Handler+0x350>)
10045766:	781a      	ldrb	r2, [r3, #0]
10045768:	4b21      	ldr	r3, [pc, #132]	@ (100457f0 <MP3_Event_Handler+0x360>)
1004576a:	781b      	ldrb	r3, [r3, #0]
1004576c:	18d3      	adds	r3, r2, r3
1004576e:	b2db      	uxtb	r3, r3
10045770:	3b01      	subs	r3, #1
10045772:	b2da      	uxtb	r2, r3
10045774:	187b      	adds	r3, r7, r1
10045776:	70da      	strb	r2, [r3, #3]
				MP3_SendData(send2);
10045778:	187b      	adds	r3, r7, r1
1004577a:	0018      	movs	r0, r3
1004577c:	f7ff fc1e 	bl	10044fbc <MP3_SendData>
				HAL_Delay(100);
10045780:	2064      	movs	r0, #100	@ 0x64
10045782:	f002 f899 	bl	100478b8 <HAL_Delay>
				}
				//send a play signal
				{
				char send[4] = {0x0D, 0x00, 0x00, 0x00};
10045786:	211c      	movs	r1, #28
10045788:	187b      	adds	r3, r7, r1
1004578a:	220d      	movs	r2, #13
1004578c:	601a      	str	r2, [r3, #0]
				MP3_SendData(send);
1004578e:	187b      	adds	r3, r7, r1
10045790:	0018      	movs	r0, r3
10045792:	f7ff fc13 	bl	10044fbc <MP3_SendData>
				}
				lastplayed = track;
10045796:	4b16      	ldr	r3, [pc, #88]	@ (100457f0 <MP3_Event_Handler+0x360>)
10045798:	781a      	ldrb	r2, [r3, #0]
1004579a:	4b16      	ldr	r3, [pc, #88]	@ (100457f4 <MP3_Event_Handler+0x364>)
1004579c:	701a      	strb	r2, [r3, #0]
			if((event.data&0xFF)!= 0 && (event.data&0xFF) <= folders[(event.data>>8)-1]){
1004579e:	e02b      	b.n	100457f8 <MP3_Event_Handler+0x368>
			}
		}else {

			pause = 0x02;
100457a0:	4b0d      	ldr	r3, [pc, #52]	@ (100457d8 <MP3_Event_Handler+0x348>)
100457a2:	2202      	movs	r2, #2
100457a4:	701a      	strb	r2, [r3, #0]
			{
			char send[4] = {0x0E, 0x00, 0x00, 0x00};//pause
100457a6:	2118      	movs	r1, #24
100457a8:	187b      	adds	r3, r7, r1
100457aa:	220e      	movs	r2, #14
100457ac:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
100457ae:	187b      	adds	r3, r7, r1
100457b0:	0018      	movs	r0, r3
100457b2:	f7ff fc03 	bl	10044fbc <MP3_SendData>
			}
			//set folder and track to zero, this is so that when other modules query/track, a zero can indicate paused
			folder = 0;
100457b6:	4b0d      	ldr	r3, [pc, #52]	@ (100457ec <MP3_Event_Handler+0x35c>)
100457b8:	2200      	movs	r2, #0
100457ba:	701a      	strb	r2, [r3, #0]
			track = 0;
100457bc:	4b0c      	ldr	r3, [pc, #48]	@ (100457f0 <MP3_Event_Handler+0x360>)
100457be:	2200      	movs	r2, #0
100457c0:	701a      	strb	r2, [r3, #0]
100457c2:	e01a      	b.n	100457fa <MP3_Event_Handler+0x36a>
100457c4:	20001c0c 	.word	0x20001c0c
100457c8:	20001bfc 	.word	0x20001bfc
100457cc:	20001c08 	.word	0x20001c08
100457d0:	20001bf8 	.word	0x20001bf8
100457d4:	20001bea 	.word	0x20001bea
100457d8:	20001be8 	.word	0x20001be8
100457dc:	20001bec 	.word	0x20001bec
100457e0:	20001c02 	.word	0x20001c02
100457e4:	20001c03 	.word	0x20001c03
100457e8:	10068b30 	.word	0x10068b30
100457ec:	20001c01 	.word	0x20001c01
100457f0:	20001c00 	.word	0x20001c00
100457f4:	20001c04 	.word	0x20001c04
			if((event.data&0xFF)!= 0 && (event.data&0xFF) <= folders[(event.data>>8)-1]){
100457f8:	46c0      	nop			@ (mov r8, r8)
		}


	}if(event.status == EVENT_SETTINGS){
100457fa:	1d3b      	adds	r3, r7, #4
100457fc:	781b      	ldrb	r3, [r3, #0]
100457fe:	b25b      	sxtb	r3, r3
10045800:	2b0a      	cmp	r3, #10
10045802:	d12c      	bne.n	1004585e <MP3_Event_Handler+0x3ce>
		DC = FLASH_GetDutyCycle();
10045804:	f7fe fdb8 	bl	10044378 <FLASH_GetDutyCycle>
10045808:	0003      	movs	r3, r0
1004580a:	001a      	movs	r2, r3
1004580c:	4b48      	ldr	r3, [pc, #288]	@ (10045930 <MP3_Event_Handler+0x4a0>)
1004580e:	701a      	strb	r2, [r3, #0]
		volume = FLASH_GetVolume();
10045810:	f7fe fd9c 	bl	1004434c <FLASH_GetVolume>
10045814:	0003      	movs	r3, r0
10045816:	001a      	movs	r2, r3
10045818:	4b46      	ldr	r3, [pc, #280]	@ (10045934 <MP3_Event_Handler+0x4a4>)
1004581a:	701a      	strb	r2, [r3, #0]
//		char text[30];
//		sprintf(text, "Settings event: %d, %d", event.data>>8, (event.data&0xFF));
//		discountprintf(text);
		if(!event.data){//volume == FLASH_GetVolume()
1004581c:	1d3b      	adds	r3, r7, #4
1004581e:	885b      	ldrh	r3, [r3, #2]
10045820:	2b00      	cmp	r3, #0
10045822:	d11c      	bne.n	1004585e <MP3_Event_Handler+0x3ce>
			//send new volume to the mp3 player
			char send[4] = {0x06, 0x00, 0x00, (uint8_t)(((uint16_t)volume)*30/100)};
10045824:	2414      	movs	r4, #20
10045826:	193b      	adds	r3, r7, r4
10045828:	2206      	movs	r2, #6
1004582a:	701a      	strb	r2, [r3, #0]
1004582c:	193b      	adds	r3, r7, r4
1004582e:	2200      	movs	r2, #0
10045830:	705a      	strb	r2, [r3, #1]
10045832:	193b      	adds	r3, r7, r4
10045834:	2200      	movs	r2, #0
10045836:	709a      	strb	r2, [r3, #2]
10045838:	4b3e      	ldr	r3, [pc, #248]	@ (10045934 <MP3_Event_Handler+0x4a4>)
1004583a:	781b      	ldrb	r3, [r3, #0]
1004583c:	001a      	movs	r2, r3
1004583e:	0013      	movs	r3, r2
10045840:	011b      	lsls	r3, r3, #4
10045842:	1a9b      	subs	r3, r3, r2
10045844:	005b      	lsls	r3, r3, #1
10045846:	2164      	movs	r1, #100	@ 0x64
10045848:	0018      	movs	r0, r3
1004584a:	f7fa fd83 	bl	10040354 <__divsi3>
1004584e:	0003      	movs	r3, r0
10045850:	b2da      	uxtb	r2, r3
10045852:	193b      	adds	r3, r7, r4
10045854:	70da      	strb	r2, [r3, #3]
			MP3_SendData(send);
10045856:	193b      	adds	r3, r7, r4
10045858:	0018      	movs	r0, r3
1004585a:	f7ff fbaf 	bl	10044fbc <MP3_SendData>
		}
	}if (event.status == EVENT_LPUART){
1004585e:	1d3b      	adds	r3, r7, #4
10045860:	781b      	ldrb	r3, [r3, #0]
10045862:	b25b      	sxtb	r3, r3
10045864:	2b08      	cmp	r3, #8
10045866:	d15d      	bne.n	10045924 <MP3_Event_Handler+0x494>
		if(Packet.command == 0x3D){//song complete
10045868:	4b33      	ldr	r3, [pc, #204]	@ (10045938 <MP3_Event_Handler+0x4a8>)
1004586a:	781b      	ldrb	r3, [r3, #0]
1004586c:	2b3d      	cmp	r3, #61	@ 0x3d
1004586e:	d159      	bne.n	10045924 <MP3_Event_Handler+0x494>
			if(Packet.Param2 != lastplayed){//prevent the mp3 play from sending the same command twice
10045870:	4b31      	ldr	r3, [pc, #196]	@ (10045938 <MP3_Event_Handler+0x4a8>)
10045872:	78da      	ldrb	r2, [r3, #3]
10045874:	4b31      	ldr	r3, [pc, #196]	@ (1004593c <MP3_Event_Handler+0x4ac>)
10045876:	781b      	ldrb	r3, [r3, #0]
10045878:	429a      	cmp	r2, r3
1004587a:	d053      	beq.n	10045924 <MP3_Event_Handler+0x494>
				lastplayed = Packet.Param2;
1004587c:	4b2e      	ldr	r3, [pc, #184]	@ (10045938 <MP3_Event_Handler+0x4a8>)
1004587e:	78da      	ldrb	r2, [r3, #3]
10045880:	4b2e      	ldr	r3, [pc, #184]	@ (1004593c <MP3_Event_Handler+0x4ac>)
10045882:	701a      	strb	r2, [r3, #0]
				endtime = TIMERS_GetMilliSeconds();
10045884:	f000 fe58 	bl	10046538 <TIMERS_GetMilliSeconds>
10045888:	0002      	movs	r2, r0
1004588a:	4b2d      	ldr	r3, [pc, #180]	@ (10045940 <MP3_Event_Handler+0x4b0>)
1004588c:	601a      	str	r2, [r3, #0]
				if(folder && track){
1004588e:	4b2d      	ldr	r3, [pc, #180]	@ (10045944 <MP3_Event_Handler+0x4b4>)
10045890:	781b      	ldrb	r3, [r3, #0]
10045892:	2b00      	cmp	r3, #0
10045894:	d046      	beq.n	10045924 <MP3_Event_Handler+0x494>
10045896:	4b2c      	ldr	r3, [pc, #176]	@ (10045948 <MP3_Event_Handler+0x4b8>)
10045898:	781b      	ldrb	r3, [r3, #0]
1004589a:	2b00      	cmp	r3, #0
1004589c:	d042      	beq.n	10045924 <MP3_Event_Handler+0x494>
					uint32_t rand = 0;
1004589e:	2300      	movs	r3, #0
100458a0:	613b      	str	r3, [r7, #16]
					HAL_RNG_GenerateRandomNumber(&hrng, &rand);
100458a2:	2310      	movs	r3, #16
100458a4:	18fa      	adds	r2, r7, r3
100458a6:	4b29      	ldr	r3, [pc, #164]	@ (1004594c <MP3_Event_Handler+0x4bc>)
100458a8:	0011      	movs	r1, r2
100458aa:	0018      	movs	r0, r3
100458ac:	f007 fd07 	bl	1004d2be <HAL_RNG_GenerateRandomNumber>
					rand &= 0xFF;//convert it to one byte of random data
100458b0:	693b      	ldr	r3, [r7, #16]
100458b2:	22ff      	movs	r2, #255	@ 0xff
100458b4:	4013      	ands	r3, r2
100458b6:	613b      	str	r3, [r7, #16]
					rand = (rand*(folders[folder-1])-1)/0xFF;//convert the one bye to the range of 0-max tracks-1
100458b8:	4b25      	ldr	r3, [pc, #148]	@ (10045950 <MP3_Event_Handler+0x4c0>)
100458ba:	681a      	ldr	r2, [r3, #0]
100458bc:	4b21      	ldr	r3, [pc, #132]	@ (10045944 <MP3_Event_Handler+0x4b4>)
100458be:	781b      	ldrb	r3, [r3, #0]
100458c0:	3b01      	subs	r3, #1
100458c2:	18d3      	adds	r3, r2, r3
100458c4:	781b      	ldrb	r3, [r3, #0]
100458c6:	001a      	movs	r2, r3
100458c8:	693b      	ldr	r3, [r7, #16]
100458ca:	4353      	muls	r3, r2
100458cc:	3b01      	subs	r3, #1
100458ce:	21ff      	movs	r1, #255	@ 0xff
100458d0:	0018      	movs	r0, r3
100458d2:	f7fa fcb5 	bl	10040240 <__udivsi3>
100458d6:	0003      	movs	r3, r0
100458d8:	613b      	str	r3, [r7, #16]
					nexttrack = rand+1;
100458da:	693b      	ldr	r3, [r7, #16]
100458dc:	b2db      	uxtb	r3, r3
100458de:	3301      	adds	r3, #1
100458e0:	b2da      	uxtb	r2, r3
100458e2:	4b1c      	ldr	r3, [pc, #112]	@ (10045954 <MP3_Event_Handler+0x4c4>)
100458e4:	701a      	strb	r2, [r3, #0]
					if(track > folders[folder-1]){
100458e6:	4b1a      	ldr	r3, [pc, #104]	@ (10045950 <MP3_Event_Handler+0x4c0>)
100458e8:	681a      	ldr	r2, [r3, #0]
100458ea:	4b16      	ldr	r3, [pc, #88]	@ (10045944 <MP3_Event_Handler+0x4b4>)
100458ec:	781b      	ldrb	r3, [r3, #0]
100458ee:	3b01      	subs	r3, #1
100458f0:	18d3      	adds	r3, r2, r3
100458f2:	781a      	ldrb	r2, [r3, #0]
100458f4:	4b14      	ldr	r3, [pc, #80]	@ (10045948 <MP3_Event_Handler+0x4b8>)
100458f6:	781b      	ldrb	r3, [r3, #0]
100458f8:	429a      	cmp	r2, r3
100458fa:	d202      	bcs.n	10045902 <MP3_Event_Handler+0x472>
						nexttrack = 1;
100458fc:	4b15      	ldr	r3, [pc, #84]	@ (10045954 <MP3_Event_Handler+0x4c4>)
100458fe:	2201      	movs	r2, #1
10045900:	701a      	strb	r2, [r3, #0]
					}
					track = 0;
10045902:	4b11      	ldr	r3, [pc, #68]	@ (10045948 <MP3_Event_Handler+0x4b8>)
10045904:	2200      	movs	r2, #0
10045906:	701a      	strb	r2, [r3, #0]
					folder = 0;
10045908:	4b0e      	ldr	r3, [pc, #56]	@ (10045944 <MP3_Event_Handler+0x4b4>)
1004590a:	2200      	movs	r2, #0
1004590c:	701a      	strb	r2, [r3, #0]
					pause = 1;//entering duty cycle pause
1004590e:	4b12      	ldr	r3, [pc, #72]	@ (10045958 <MP3_Event_Handler+0x4c8>)
10045910:	2201      	movs	r2, #1
10045912:	701a      	strb	r2, [r3, #0]
					char send[4] = {0x0E, 0x00, 0x00, 0x00};//pause
10045914:	210c      	movs	r1, #12
10045916:	187b      	adds	r3, r7, r1
10045918:	220e      	movs	r2, #14
1004591a:	601a      	str	r2, [r3, #0]
					MP3_SendData(send);
1004591c:	187b      	adds	r3, r7, r1
1004591e:	0018      	movs	r0, r3
10045920:	f7ff fb4c 	bl	10044fbc <MP3_SendData>
			}

		}

	}
    return 1;
10045924:	2301      	movs	r3, #1
}
10045926:	0018      	movs	r0, r3
10045928:	46bd      	mov	sp, r7
1004592a:	b01c      	add	sp, #112	@ 0x70
1004592c:	bdb0      	pop	{r4, r5, r7, pc}
1004592e:	46c0      	nop			@ (mov r8, r8)
10045930:	20001be9 	.word	0x20001be9
10045934:	20001bea 	.word	0x20001bea
10045938:	20001bfc 	.word	0x20001bfc
1004593c:	20001c04 	.word	0x20001c04
10045940:	20001bf0 	.word	0x20001bf0
10045944:	20001c01 	.word	0x20001c01
10045948:	20001c00 	.word	0x20001c00
1004594c:	200021a0 	.word	0x200021a0
10045950:	20001c08 	.word	0x20001c08
10045954:	20001c03 	.word	0x20001c03
10045958:	20001be8 	.word	0x20001be8

1004595c <MP3_GetCurrentFile>:
 * @Function: MP3_GetCurrentFile
 * @Brief: gets the current track being played on the mp3 player
 * @param:
 * @return: two bytes, the upper 8bits contain the folder, the lower 8 bits hold the tracck number in the folder
 */
uint16_t MP3_GetCurrentFile(){
1004595c:	b580      	push	{r7, lr}
1004595e:	af00      	add	r7, sp, #0
	return ((uint16_t)folder<<8)+track;
10045960:	4b05      	ldr	r3, [pc, #20]	@ (10045978 <MP3_GetCurrentFile+0x1c>)
10045962:	781b      	ldrb	r3, [r3, #0]
10045964:	021b      	lsls	r3, r3, #8
10045966:	b29b      	uxth	r3, r3
10045968:	4a04      	ldr	r2, [pc, #16]	@ (1004597c <MP3_GetCurrentFile+0x20>)
1004596a:	7812      	ldrb	r2, [r2, #0]
1004596c:	189b      	adds	r3, r3, r2
1004596e:	b29b      	uxth	r3, r3
}
10045970:	0018      	movs	r0, r3
10045972:	46bd      	mov	sp, r7
10045974:	bd80      	pop	{r7, pc}
10045976:	46c0      	nop			@ (mov r8, r8)
10045978:	20001c01 	.word	0x20001c01
1004597c:	20001c00 	.word	0x20001c00

10045980 <OledInit>:
#include <OledDriver.h>
#include <Oled.h>
#include <Ascii.h>

void OledInit(void)
{
10045980:	b580      	push	{r7, lr}
10045982:	af00      	add	r7, sp, #0
    // First initialize the STM32 to be able to talk over I2C to the OLED.
    OledHostInit();
10045984:	f000 f96f 	bl	10045c66 <OledHostInit>
    HAL_Delay(10);
10045988:	200a      	movs	r0, #10
1004598a:	f001 ff95 	bl	100478b8 <HAL_Delay>

    // Now send initialization commands to the OLED.
    OledDriverInitDisplay();
1004598e:	f000 f975 	bl	10045c7c <OledDriverInitDisplay>
    HAL_Delay(200);//allow time for OLED screen to initialize
10045992:	20c8      	movs	r0, #200	@ 0xc8
10045994:	f001 ff90 	bl	100478b8 <HAL_Delay>

    // Clear the frame buffer by filling it with black pixels.
    OledClear(OLED_COLOR_BLACK);
10045998:	2000      	movs	r0, #0
1004599a:	f000 f927 	bl	10045bec <OledClear>

    // Finally update the screen, triggering a write of all black pixels to the screen.
    OledUpdate();
1004599e:	f000 f95b 	bl	10045c58 <OledUpdate>
}
100459a2:	46c0      	nop			@ (mov r8, r8)
100459a4:	46bd      	mov	sp, r7
100459a6:	bd80      	pop	{r7, pc}

100459a8 <OledDrawChar>:
    // Now return the desired bit.
    return (rgbOledBmp[index] >> shift) & 0x01;
}

uint8_t OledDrawChar(int x, int y, char c)
{
100459a8:	b580      	push	{r7, lr}
100459aa:	b092      	sub	sp, #72	@ 0x48
100459ac:	af00      	add	r7, sp, #0
100459ae:	60f8      	str	r0, [r7, #12]
100459b0:	60b9      	str	r1, [r7, #8]
100459b2:	1dfb      	adds	r3, r7, #7
100459b4:	701a      	strb	r2, [r3, #0]
    if (x <= OLED_DRIVER_PIXEL_COLUMNS - ASCII_FONT_WIDTH && y <= OLED_DRIVER_PIXEL_ROWS - ASCII_FONT_HEIGHT) {
100459b6:	68fb      	ldr	r3, [r7, #12]
100459b8:	2b7a      	cmp	r3, #122	@ 0x7a
100459ba:	dd00      	ble.n	100459be <OledDrawChar+0x16>
100459bc:	e0c0      	b.n	10045b40 <OledDrawChar+0x198>
100459be:	68bb      	ldr	r3, [r7, #8]
100459c0:	2b38      	cmp	r3, #56	@ 0x38
100459c2:	dd00      	ble.n	100459c6 <OledDrawChar+0x1e>
100459c4:	e0bc      	b.n	10045b40 <OledDrawChar+0x198>
        // We need to convert our signed char into an unsigned value to index into the ascii[] array.
        int charIndex = (int) (unsigned char) c;
100459c6:	1dfb      	adds	r3, r7, #7
100459c8:	781b      	ldrb	r3, [r3, #0]
100459ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

        // Now first determine the columns and rows of the OLED bits that need to be modified
        int rowMin, rowMax, colMin, colMax;
        rowMin = y / ASCII_FONT_HEIGHT;
100459cc:	68bb      	ldr	r3, [r7, #8]
100459ce:	2b00      	cmp	r3, #0
100459d0:	da00      	bge.n	100459d4 <OledDrawChar+0x2c>
100459d2:	3307      	adds	r3, #7
100459d4:	10db      	asrs	r3, r3, #3
100459d6:	63bb      	str	r3, [r7, #56]	@ 0x38
        int rowY = y % ASCII_FONT_HEIGHT;
100459d8:	68bb      	ldr	r3, [r7, #8]
100459da:	4a5c      	ldr	r2, [pc, #368]	@ (10045b4c <OledDrawChar+0x1a4>)
100459dc:	4013      	ands	r3, r2
100459de:	d504      	bpl.n	100459ea <OledDrawChar+0x42>
100459e0:	3b01      	subs	r3, #1
100459e2:	2208      	movs	r2, #8
100459e4:	4252      	negs	r2, r2
100459e6:	4313      	orrs	r3, r2
100459e8:	3301      	adds	r3, #1
100459ea:	637b      	str	r3, [r7, #52]	@ 0x34
        rowMax = (y + ASCII_FONT_HEIGHT) / OLED_DRIVER_BUFFER_LINE_HEIGHT;
100459ec:	68bb      	ldr	r3, [r7, #8]
100459ee:	3308      	adds	r3, #8
100459f0:	2b00      	cmp	r3, #0
100459f2:	da00      	bge.n	100459f6 <OledDrawChar+0x4e>
100459f4:	3307      	adds	r3, #7
100459f6:	10db      	asrs	r3, r3, #3
100459f8:	633b      	str	r3, [r7, #48]	@ 0x30
        colMin = x;
100459fa:	68fb      	ldr	r3, [r7, #12]
100459fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        colMax = x + ASCII_FONT_WIDTH;
100459fe:	68fb      	ldr	r3, [r7, #12]
10045a00:	3306      	adds	r3, #6
10045a02:	62bb      	str	r3, [r7, #40]	@ 0x28
        {
            // Generate a positive mask for where in the column the new symbol will be drawn.
            int colMask = ((1 << ASCII_FONT_HEIGHT) - 1) << rowY;
10045a04:	22ff      	movs	r2, #255	@ 0xff
10045a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10045a08:	409a      	lsls	r2, r3
10045a0a:	0013      	movs	r3, r2
10045a0c:	627b      	str	r3, [r7, #36]	@ 0x24
            int j;
            for (j = 0; j < colMax - colMin; ++j) {
10045a0e:	2300      	movs	r3, #0
10045a10:	647b      	str	r3, [r7, #68]	@ 0x44
10045a12:	e03a      	b.n	10045a8a <OledDrawChar+0xe2>
                int oledCol = colMin + j;
10045a14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10045a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10045a18:	18d3      	adds	r3, r2, r3
10045a1a:	617b      	str	r3, [r7, #20]
                uint8_t newCharCol = rgbOledBmp[rowMin * OLED_DRIVER_PIXEL_COLUMNS + oledCol] & ~colMask;
10045a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10045a1e:	01da      	lsls	r2, r3, #7
10045a20:	697b      	ldr	r3, [r7, #20]
10045a22:	18d3      	adds	r3, r2, r3
10045a24:	4a4a      	ldr	r2, [pc, #296]	@ (10045b50 <OledDrawChar+0x1a8>)
10045a26:	5cd3      	ldrb	r3, [r2, r3]
10045a28:	b25b      	sxtb	r3, r3
10045a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10045a2c:	b252      	sxtb	r2, r2
10045a2e:	43d2      	mvns	r2, r2
10045a30:	b252      	sxtb	r2, r2
10045a32:	4013      	ands	r3, r2
10045a34:	b25a      	sxtb	r2, r3
10045a36:	2013      	movs	r0, #19
10045a38:	183b      	adds	r3, r7, r0
10045a3a:	701a      	strb	r2, [r3, #0]
                // Make sure we always grab from the top part of the character.
                newCharCol |= (ascii[charIndex][j] & (colMask >> rowY)) << rowY;
10045a3c:	4945      	ldr	r1, [pc, #276]	@ (10045b54 <OledDrawChar+0x1ac>)
10045a3e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10045a40:	0013      	movs	r3, r2
10045a42:	005b      	lsls	r3, r3, #1
10045a44:	189b      	adds	r3, r3, r2
10045a46:	005b      	lsls	r3, r3, #1
10045a48:	18ca      	adds	r2, r1, r3
10045a4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10045a4c:	18d3      	adds	r3, r2, r3
10045a4e:	781b      	ldrb	r3, [r3, #0]
10045a50:	0019      	movs	r1, r3
10045a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10045a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10045a56:	411a      	asrs	r2, r3
10045a58:	0013      	movs	r3, r2
10045a5a:	400b      	ands	r3, r1
10045a5c:	001a      	movs	r2, r3
10045a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10045a60:	409a      	lsls	r2, r3
10045a62:	0013      	movs	r3, r2
10045a64:	b25a      	sxtb	r2, r3
10045a66:	183b      	adds	r3, r7, r0
10045a68:	781b      	ldrb	r3, [r3, #0]
10045a6a:	b25b      	sxtb	r3, r3
10045a6c:	4313      	orrs	r3, r2
10045a6e:	b25a      	sxtb	r2, r3
10045a70:	183b      	adds	r3, r7, r0
10045a72:	701a      	strb	r2, [r3, #0]
                rgbOledBmp[rowMin * OLED_DRIVER_PIXEL_COLUMNS + oledCol] = newCharCol;
10045a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10045a76:	01da      	lsls	r2, r3, #7
10045a78:	697b      	ldr	r3, [r7, #20]
10045a7a:	18d3      	adds	r3, r2, r3
10045a7c:	4a34      	ldr	r2, [pc, #208]	@ (10045b50 <OledDrawChar+0x1a8>)
10045a7e:	1839      	adds	r1, r7, r0
10045a80:	7809      	ldrb	r1, [r1, #0]
10045a82:	54d1      	strb	r1, [r2, r3]
            for (j = 0; j < colMax - colMin; ++j) {
10045a84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10045a86:	3301      	adds	r3, #1
10045a88:	647b      	str	r3, [r7, #68]	@ 0x44
10045a8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10045a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10045a8e:	1ad3      	subs	r3, r2, r3
10045a90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10045a92:	429a      	cmp	r2, r3
10045a94:	dbbe      	blt.n	10045a14 <OledDrawChar+0x6c>
            }
        }
        if (rowMax > rowMin) {
10045a96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10045a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10045a9a:	429a      	cmp	r2, r3
10045a9c:	dd50      	ble.n	10045b40 <OledDrawChar+0x198>
            // Generate a positive mask for where in the column the new symbol will be drawn.
            // Since we need the lower portion of the symbol, we recalculate its height.
            int colMask = ((1 << ASCII_FONT_HEIGHT) - 1) >> (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY);
10045a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10045aa0:	2208      	movs	r2, #8
10045aa2:	1ad3      	subs	r3, r2, r3
10045aa4:	22ff      	movs	r2, #255	@ 0xff
10045aa6:	411a      	asrs	r2, r3
10045aa8:	0013      	movs	r3, r2
10045aaa:	623b      	str	r3, [r7, #32]
            int j;
            for (j = 0; j < colMax - colMin; ++j) {
10045aac:	2300      	movs	r3, #0
10045aae:	643b      	str	r3, [r7, #64]	@ 0x40
10045ab0:	e040      	b.n	10045b34 <OledDrawChar+0x18c>
                int oledCol = colMin + j;
10045ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10045ab4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10045ab6:	18d3      	adds	r3, r2, r3
10045ab8:	61fb      	str	r3, [r7, #28]
                uint8_t newCharCol = rgbOledBmp[rowMax * OLED_DRIVER_PIXEL_COLUMNS + ASCII_FONT_WIDTH - 1 - oledCol] & ~colMask;
10045aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10045abc:	01db      	lsls	r3, r3, #7
10045abe:	1d5a      	adds	r2, r3, #5
10045ac0:	69fb      	ldr	r3, [r7, #28]
10045ac2:	1ad3      	subs	r3, r2, r3
10045ac4:	4a22      	ldr	r2, [pc, #136]	@ (10045b50 <OledDrawChar+0x1a8>)
10045ac6:	5cd3      	ldrb	r3, [r2, r3]
10045ac8:	b25b      	sxtb	r3, r3
10045aca:	6a3a      	ldr	r2, [r7, #32]
10045acc:	b252      	sxtb	r2, r2
10045ace:	43d2      	mvns	r2, r2
10045ad0:	b252      	sxtb	r2, r2
10045ad2:	4013      	ands	r3, r2
10045ad4:	b25a      	sxtb	r2, r3
10045ad6:	201b      	movs	r0, #27
10045ad8:	183b      	adds	r3, r7, r0
10045ada:	701a      	strb	r2, [r3, #0]
                // Make sure we grab the proper part of the character from the font.
                newCharCol |= (ascii[charIndex][j] & (colMask << (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY))) >>
10045adc:	491d      	ldr	r1, [pc, #116]	@ (10045b54 <OledDrawChar+0x1ac>)
10045ade:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10045ae0:	0013      	movs	r3, r2
10045ae2:	005b      	lsls	r3, r3, #1
10045ae4:	189b      	adds	r3, r3, r2
10045ae6:	005b      	lsls	r3, r3, #1
10045ae8:	18ca      	adds	r2, r1, r3
10045aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10045aec:	18d3      	adds	r3, r2, r3
10045aee:	781b      	ldrb	r3, [r3, #0]
10045af0:	0019      	movs	r1, r3
10045af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10045af4:	2208      	movs	r2, #8
10045af6:	1ad3      	subs	r3, r2, r3
10045af8:	6a3a      	ldr	r2, [r7, #32]
10045afa:	409a      	lsls	r2, r3
10045afc:	0013      	movs	r3, r2
10045afe:	400b      	ands	r3, r1
10045b00:	001a      	movs	r2, r3
                        (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY);
10045b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10045b04:	2108      	movs	r1, #8
10045b06:	1acb      	subs	r3, r1, r3
                newCharCol |= (ascii[charIndex][j] & (colMask << (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY))) >>
10045b08:	411a      	asrs	r2, r3
10045b0a:	0013      	movs	r3, r2
10045b0c:	b25a      	sxtb	r2, r3
10045b0e:	183b      	adds	r3, r7, r0
10045b10:	781b      	ldrb	r3, [r3, #0]
10045b12:	b25b      	sxtb	r3, r3
10045b14:	4313      	orrs	r3, r2
10045b16:	b25a      	sxtb	r2, r3
10045b18:	183b      	adds	r3, r7, r0
10045b1a:	701a      	strb	r2, [r3, #0]
                rgbOledBmp[rowMax * OLED_DRIVER_PIXEL_COLUMNS + ASCII_FONT_WIDTH - 1 - oledCol] = newCharCol;
10045b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10045b1e:	01db      	lsls	r3, r3, #7
10045b20:	1d5a      	adds	r2, r3, #5
10045b22:	69fb      	ldr	r3, [r7, #28]
10045b24:	1ad3      	subs	r3, r2, r3
10045b26:	4a0a      	ldr	r2, [pc, #40]	@ (10045b50 <OledDrawChar+0x1a8>)
10045b28:	1839      	adds	r1, r7, r0
10045b2a:	7809      	ldrb	r1, [r1, #0]
10045b2c:	54d1      	strb	r1, [r2, r3]
            for (j = 0; j < colMax - colMin; ++j) {
10045b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10045b30:	3301      	adds	r3, #1
10045b32:	643b      	str	r3, [r7, #64]	@ 0x40
10045b34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10045b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10045b38:	1ad3      	subs	r3, r2, r3
10045b3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
10045b3c:	429a      	cmp	r2, r3
10045b3e:	dbb8      	blt.n	10045ab2 <OledDrawChar+0x10a>
            }
        }
    }

    return FALSE;
10045b40:	2300      	movs	r3, #0
}
10045b42:	0018      	movs	r0, r3
10045b44:	46bd      	mov	sp, r7
10045b46:	b012      	add	sp, #72	@ 0x48
10045b48:	bd80      	pop	{r7, pc}
10045b4a:	46c0      	nop			@ (mov r8, r8)
10045b4c:	80000007 	.word	0x80000007
10045b50:	20001c14 	.word	0x20001c14
10045b54:	10068b9c 	.word	0x10068b9c

10045b58 <OledDrawString>:

void OledDrawString(const char *string)
{
10045b58:	b580      	push	{r7, lr}
10045b5a:	b086      	sub	sp, #24
10045b5c:	af00      	add	r7, sp, #0
10045b5e:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
10045b60:	687b      	ldr	r3, [r7, #4]
10045b62:	2b00      	cmp	r3, #0
10045b64:	d03c      	beq.n	10045be0 <OledDrawString+0x88>
        return;
    }

    // Track the current line number we're in on the OLED. Valid values are [0, OLED_NUM_LINES).
    int line = 0;
10045b66:	2300      	movs	r3, #0
10045b68:	617b      	str	r3, [r7, #20]

    // Track the current character we're writing to the OLED. Valid values are
    // [0, OLED_CHARS_PER_LINE).
    int column = 0;
10045b6a:	2300      	movs	r3, #0
10045b6c:	613b      	str	r3, [r7, #16]

    // Run through all characters. The maximum length can be the number of lines times the number
    // of characters per line + three newlines.
    int i;
    for (i = 0; string[i] != '\0' && i < (OLED_NUM_LINES * OLED_CHARS_PER_LINE + 3); ++i) {
10045b6e:	2300      	movs	r3, #0
10045b70:	60fb      	str	r3, [r7, #12]
10045b72:	e02b      	b.n	10045bcc <OledDrawString+0x74>
        // Move the cursor to the next line if a newline character is encountered. This allows for
        // early line ending.
        if (string[i] == '\n') {
10045b74:	68fb      	ldr	r3, [r7, #12]
10045b76:	687a      	ldr	r2, [r7, #4]
10045b78:	18d3      	adds	r3, r2, r3
10045b7a:	781b      	ldrb	r3, [r3, #0]
10045b7c:	2b0a      	cmp	r3, #10
10045b7e:	d105      	bne.n	10045b8c <OledDrawString+0x34>
            ++line;
10045b80:	697b      	ldr	r3, [r7, #20]
10045b82:	3301      	adds	r3, #1
10045b84:	617b      	str	r3, [r7, #20]
            column = 0;
10045b86:	2300      	movs	r3, #0
10045b88:	613b      	str	r3, [r7, #16]
            continue;
10045b8a:	e01c      	b.n	10045bc6 <OledDrawString+0x6e>
        } else {
            // Reset to the start of the next line if we've hit the character limit of this line
            // without seeing a newline.
            if (column == OLED_CHARS_PER_LINE) {
10045b8c:	693b      	ldr	r3, [r7, #16]
10045b8e:	2b15      	cmp	r3, #21
10045b90:	d104      	bne.n	10045b9c <OledDrawString+0x44>
                ++line;
10045b92:	697b      	ldr	r3, [r7, #20]
10045b94:	3301      	adds	r3, #1
10045b96:	617b      	str	r3, [r7, #20]
                column = 0;
10045b98:	2300      	movs	r3, #0
10045b9a:	613b      	str	r3, [r7, #16]
            }

            // Now if we're < OLED_NUM_LINES and < OLED_CHARS_PER_LINE we can proceed. The second
            // check is implicitly handled by the above if-statement that forces a newline after
            // encountering a full line of characters.
            if (line == OLED_NUM_LINES) {
10045b9c:	697b      	ldr	r3, [r7, #20]
10045b9e:	2b08      	cmp	r3, #8
10045ba0:	d020      	beq.n	10045be4 <OledDrawString+0x8c>
                break;
            }

            // Finally at this point, we can write characters to the OLED.
            OledDrawChar(column * ASCII_FONT_WIDTH, line * ASCII_FONT_HEIGHT, string[i]);
10045ba2:	693a      	ldr	r2, [r7, #16]
10045ba4:	0013      	movs	r3, r2
10045ba6:	005b      	lsls	r3, r3, #1
10045ba8:	189b      	adds	r3, r3, r2
10045baa:	005b      	lsls	r3, r3, #1
10045bac:	0018      	movs	r0, r3
10045bae:	697b      	ldr	r3, [r7, #20]
10045bb0:	00d9      	lsls	r1, r3, #3
10045bb2:	68fb      	ldr	r3, [r7, #12]
10045bb4:	687a      	ldr	r2, [r7, #4]
10045bb6:	18d3      	adds	r3, r2, r3
10045bb8:	781b      	ldrb	r3, [r3, #0]
10045bba:	001a      	movs	r2, r3
10045bbc:	f7ff fef4 	bl	100459a8 <OledDrawChar>
            ++column;
10045bc0:	693b      	ldr	r3, [r7, #16]
10045bc2:	3301      	adds	r3, #1
10045bc4:	613b      	str	r3, [r7, #16]
    for (i = 0; string[i] != '\0' && i < (OLED_NUM_LINES * OLED_CHARS_PER_LINE + 3); ++i) {
10045bc6:	68fb      	ldr	r3, [r7, #12]
10045bc8:	3301      	adds	r3, #1
10045bca:	60fb      	str	r3, [r7, #12]
10045bcc:	68fb      	ldr	r3, [r7, #12]
10045bce:	687a      	ldr	r2, [r7, #4]
10045bd0:	18d3      	adds	r3, r2, r3
10045bd2:	781b      	ldrb	r3, [r3, #0]
10045bd4:	2b00      	cmp	r3, #0
10045bd6:	d006      	beq.n	10045be6 <OledDrawString+0x8e>
10045bd8:	68fb      	ldr	r3, [r7, #12]
10045bda:	2baa      	cmp	r3, #170	@ 0xaa
10045bdc:	ddca      	ble.n	10045b74 <OledDrawString+0x1c>
10045bde:	e002      	b.n	10045be6 <OledDrawString+0x8e>
        return;
10045be0:	46c0      	nop			@ (mov r8, r8)
10045be2:	e000      	b.n	10045be6 <OledDrawString+0x8e>
                break;
10045be4:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
10045be6:	46bd      	mov	sp, r7
10045be8:	b006      	add	sp, #24
10045bea:	bd80      	pop	{r7, pc}

10045bec <OledClear>:

void OledClear(OledColor p)
{
10045bec:	b580      	push	{r7, lr}
10045bee:	b084      	sub	sp, #16
10045bf0:	af00      	add	r7, sp, #0
10045bf2:	0002      	movs	r2, r0
10045bf4:	1dfb      	adds	r3, r7, #7
10045bf6:	701a      	strb	r2, [r3, #0]
    int i;
    for (i = 0; i < OLED_DRIVER_BUFFER_SIZE; i++) {
10045bf8:	2300      	movs	r3, #0
10045bfa:	60fb      	str	r3, [r7, #12]
10045bfc:	e011      	b.n	10045c22 <OledClear+0x36>
        if (p == OLED_COLOR_WHITE) {
10045bfe:	1dfb      	adds	r3, r7, #7
10045c00:	781b      	ldrb	r3, [r3, #0]
10045c02:	2b01      	cmp	r3, #1
10045c04:	d105      	bne.n	10045c12 <OledClear+0x26>
            rgbOledBmp[i] = 0xFF;
10045c06:	4a0c      	ldr	r2, [pc, #48]	@ (10045c38 <OledClear+0x4c>)
10045c08:	68fb      	ldr	r3, [r7, #12]
10045c0a:	18d3      	adds	r3, r2, r3
10045c0c:	22ff      	movs	r2, #255	@ 0xff
10045c0e:	701a      	strb	r2, [r3, #0]
10045c10:	e004      	b.n	10045c1c <OledClear+0x30>
        } else {
            rgbOledBmp[i] = 0;
10045c12:	4a09      	ldr	r2, [pc, #36]	@ (10045c38 <OledClear+0x4c>)
10045c14:	68fb      	ldr	r3, [r7, #12]
10045c16:	18d3      	adds	r3, r2, r3
10045c18:	2200      	movs	r2, #0
10045c1a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < OLED_DRIVER_BUFFER_SIZE; i++) {
10045c1c:	68fb      	ldr	r3, [r7, #12]
10045c1e:	3301      	adds	r3, #1
10045c20:	60fb      	str	r3, [r7, #12]
10045c22:	68fa      	ldr	r2, [r7, #12]
10045c24:	2380      	movs	r3, #128	@ 0x80
10045c26:	00db      	lsls	r3, r3, #3
10045c28:	429a      	cmp	r2, r3
10045c2a:	dbe8      	blt.n	10045bfe <OledClear+0x12>
        }
    }
}
10045c2c:	46c0      	nop			@ (mov r8, r8)
10045c2e:	46c0      	nop			@ (mov r8, r8)
10045c30:	46bd      	mov	sp, r7
10045c32:	b004      	add	sp, #16
10045c34:	bd80      	pop	{r7, pc}
10045c36:	46c0      	nop			@ (mov r8, r8)
10045c38:	20001c14 	.word	0x20001c14

10045c3c <OledOn>:
{
    OledDriverSetDisplayNormal();
}

void OledOn(void)
{
10045c3c:	b580      	push	{r7, lr}
10045c3e:	af00      	add	r7, sp, #0
    OledDriverInitDisplay();
10045c40:	f000 f81c 	bl	10045c7c <OledDriverInitDisplay>
}
10045c44:	46c0      	nop			@ (mov r8, r8)
10045c46:	46bd      	mov	sp, r7
10045c48:	bd80      	pop	{r7, pc}

10045c4a <OledOff>:

void OledOff(void)
{
10045c4a:	b580      	push	{r7, lr}
10045c4c:	af00      	add	r7, sp, #0
    OledDriverDisableDisplay();
10045c4e:	f000 f872 	bl	10045d36 <OledDriverDisableDisplay>
}
10045c52:	46c0      	nop			@ (mov r8, r8)
10045c54:	46bd      	mov	sp, r7
10045c56:	bd80      	pop	{r7, pc}

10045c58 <OledUpdate>:

void OledUpdate(void)
{
10045c58:	b580      	push	{r7, lr}
10045c5a:	af00      	add	r7, sp, #0
    OledDriverUpdateDisplay();
10045c5c:	f000 f876 	bl	10045d4c <OledDriverUpdateDisplay>
}
10045c60:	46c0      	nop			@ (mov r8, r8)
10045c62:	46bd      	mov	sp, r7
10045c64:	bd80      	pop	{r7, pc}

10045c66 <OledHostInit>:
/**
 * Initialize the STM32 to communicate with the OLED display through the SSD1306
 * display controller using an instance of I2C.
 */
void OledHostInit(void)
{
10045c66:	b580      	push	{r7, lr}
10045c68:	af00      	add	r7, sp, #0
    BOARD_Init(); // init board and printf functionality
10045c6a:	f7fb ffdb 	bl	10041c24 <BOARD_Init>
    TIMERS_Init(); // init timer module for delay functions
10045c6e:	f000 fc17 	bl	100464a0 <TIMERS_Init>
    I2C_Init();   // init I2C module
10045c72:	f7ff f85f 	bl	10044d34 <I2C_Init>
}
10045c76:	46c0      	nop			@ (mov r8, r8)
10045c78:	46bd      	mov	sp, r7
10045c7a:	bd80      	pop	{r7, pc}

10045c7c <OledDriverInitDisplay>:

/**
 * Initialize the OLED display and send init/config sequence
 */
void OledDriverInitDisplay(void)
{
10045c7c:	b580      	push	{r7, lr}
10045c7e:	af00      	add	r7, sp, #0
    // Turn off the display.
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_DISPLAY_OFF);
10045c80:	22ae      	movs	r2, #174	@ 0xae
10045c82:	2180      	movs	r1, #128	@ 0x80
10045c84:	203c      	movs	r0, #60	@ 0x3c
10045c86:	f7ff f971 	bl	10044f6c <I2C_WriteReg>
    DelayMs(10);
10045c8a:	200a      	movs	r0, #10
10045c8c:	f000 f8a0 	bl	10045dd0 <DelayMs>
//
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_OSC_FREQ);
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_OSC_FREQ);
//
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_MULTIPLEX_RATIO);
10045c90:	22a8      	movs	r2, #168	@ 0xa8
10045c92:	2180      	movs	r1, #128	@ 0x80
10045c94:	203c      	movs	r0, #60	@ 0x3c
10045c96:	f7ff f969 	bl	10044f6c <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x3F);
10045c9a:	223f      	movs	r2, #63	@ 0x3f
10045c9c:	2180      	movs	r1, #128	@ 0x80
10045c9e:	203c      	movs	r0, #60	@ 0x3c
10045ca0:	f7ff f964 	bl	10044f6c <I2C_WriteReg>
//
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xD3);//Display OFFSET
10045ca4:	22d3      	movs	r2, #211	@ 0xd3
10045ca6:	2180      	movs	r1, #128	@ 0x80
10045ca8:	203c      	movs	r0, #60	@ 0x3c
10045caa:	f7ff f95f 	bl	10044f6c <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x08);
10045cae:	2208      	movs	r2, #8
10045cb0:	2180      	movs	r1, #128	@ 0x80
10045cb2:	203c      	movs	r0, #60	@ 0x3c
10045cb4:	f7ff f95a 	bl	10044f6c <I2C_WriteReg>

    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x40);//Set display start line
10045cb8:	2240      	movs	r2, #64	@ 0x40
10045cba:	2180      	movs	r1, #128	@ 0x80
10045cbc:	203c      	movs	r0, #60	@ 0x3c
10045cbe:	f7ff f955 	bl	10044f6c <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xA1);//Set segment re-map
10045cc2:	22a1      	movs	r2, #161	@ 0xa1
10045cc4:	2180      	movs	r1, #128	@ 0x80
10045cc6:	203c      	movs	r0, #60	@ 0x3c
10045cc8:	f7ff f950 	bl	10044f6c <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xC0);//Set COM output Scan direction
10045ccc:	22c0      	movs	r2, #192	@ 0xc0
10045cce:	2180      	movs	r1, #128	@ 0x80
10045cd0:	203c      	movs	r0, #60	@ 0x3c
10045cd2:	f7ff f94b 	bl	10044f6c <I2C_WriteReg>

    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xDA);//Set COM hardware config
10045cd6:	22da      	movs	r2, #218	@ 0xda
10045cd8:	2180      	movs	r1, #128	@ 0x80
10045cda:	203c      	movs	r0, #60	@ 0x3c
10045cdc:	f7ff f946 	bl	10044f6c <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x12);
10045ce0:	2212      	movs	r2, #18
10045ce2:	2180      	movs	r1, #128	@ 0x80
10045ce4:	203c      	movs	r0, #60	@ 0x3c
10045ce6:	f7ff f941 	bl	10044f6c <I2C_WriteReg>
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xDB);//Set VCOMH deselect level
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x40);
//
//
//
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xA4);//Set entire display on/off
10045cea:	22a4      	movs	r2, #164	@ 0xa4
10045cec:	2180      	movs	r1, #128	@ 0x80
10045cee:	203c      	movs	r0, #60	@ 0x3c
10045cf0:	f7ff f93c 	bl	10044f6c <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xA6);//Set normal/inverted display
10045cf4:	22a6      	movs	r2, #166	@ 0xa6
10045cf6:	2180      	movs	r1, #128	@ 0x80
10045cf8:	203c      	movs	r0, #60	@ 0x3c
10045cfa:	f7ff f937 	bl	10044f6c <I2C_WriteReg>


    // Enable the charge pump and
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_CHARGE_PUMP);
10045cfe:	228d      	movs	r2, #141	@ 0x8d
10045d00:	2180      	movs	r1, #128	@ 0x80
10045d02:	203c      	movs	r0, #60	@ 0x3c
10045d04:	f7ff f932 	bl	10044f6c <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_ENABLE_CHARGE_PUMP);
10045d08:	2214      	movs	r2, #20
10045d0a:	2180      	movs	r1, #128	@ 0x80
10045d0c:	203c      	movs	r0, #60	@ 0x3c
10045d0e:	f7ff f92d 	bl	10044f6c <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_PRECHARGE_PERIOD);
10045d12:	22d9      	movs	r2, #217	@ 0xd9
10045d14:	2180      	movs	r1, #128	@ 0x80
10045d16:	203c      	movs	r0, #60	@ 0x3c
10045d18:	f7ff f928 	bl	10044f6c <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_MAXIMUM_PRECHARGE);
10045d1c:	22f1      	movs	r2, #241	@ 0xf1
10045d1e:	2180      	movs	r1, #128	@ 0x80
10045d20:	203c      	movs	r0, #60	@ 0x3c
10045d22:	f7ff f923 	bl	10044f6c <I2C_WriteReg>
//    // Set sequential COM configuration with non-interleaved memory.
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_COM_PINS_CONFIG);
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_SEQUENTIAL_COM_NON_INTERLEAVED);

    // And turn on the display.
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_DISPLAY_ON);
10045d26:	22af      	movs	r2, #175	@ 0xaf
10045d28:	2180      	movs	r1, #128	@ 0x80
10045d2a:	203c      	movs	r0, #60	@ 0x3c
10045d2c:	f7ff f91e 	bl	10044f6c <I2C_WriteReg>
}
10045d30:	46c0      	nop			@ (mov r8, r8)
10045d32:	46bd      	mov	sp, r7
10045d34:	bd80      	pop	{r7, pc}

10045d36 <OledDriverDisableDisplay>:

/**
 * Disable the Oled display before power-off.
 */
void OledDriverDisableDisplay(void)
{
10045d36:	b580      	push	{r7, lr}
10045d38:	af00      	add	r7, sp, #0
    // Send the display off command.
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_DISPLAY_OFF);
10045d3a:	22ae      	movs	r2, #174	@ 0xae
10045d3c:	2180      	movs	r1, #128	@ 0x80
10045d3e:	203c      	movs	r0, #60	@ 0x3c
10045d40:	f7ff f914 	bl	10044f6c <I2C_WriteReg>
}
10045d44:	46c0      	nop			@ (mov r8, r8)
10045d46:	46bd      	mov	sp, r7
10045d48:	bd80      	pop	{r7, pc}
	...

10045d4c <OledDriverUpdateDisplay>:

/**
 * Update the display with the contents of rgb0ledBmp.
 */
void OledDriverUpdateDisplay(void)
{
10045d4c:	b580      	push	{r7, lr}
10045d4e:	b084      	sub	sp, #16
10045d50:	af00      	add	r7, sp, #0
    uint8_t *pb = &(rgbOledBmp[OLED_DRIVER_BUFFER_SIZE-1]);
10045d52:	4b1e      	ldr	r3, [pc, #120]	@ (10045dcc <OledDriverUpdateDisplay+0x80>)
10045d54:	60fb      	str	r3, [r7, #12]
    int page;
    for (page = 0; page < OLED_DRIVER_PAGES; page++) {
10045d56:	2300      	movs	r3, #0
10045d58:	60bb      	str	r3, [r7, #8]
10045d5a:	e02f      	b.n	10045dbc <OledDriverUpdateDisplay+0x70>

        // Set the desired page.
        I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xB0 | (OLED_DRIVER_PAGES- page));//select page start address
10045d5c:	68bb      	ldr	r3, [r7, #8]
10045d5e:	b2db      	uxtb	r3, r3
10045d60:	2208      	movs	r2, #8
10045d62:	1ad3      	subs	r3, r2, r3
10045d64:	b2db      	uxtb	r3, r3
10045d66:	b25b      	sxtb	r3, r3
10045d68:	2250      	movs	r2, #80	@ 0x50
10045d6a:	4252      	negs	r2, r2
10045d6c:	4313      	orrs	r3, r2
10045d6e:	b25b      	sxtb	r3, r3
10045d70:	b2db      	uxtb	r3, r3
10045d72:	001a      	movs	r2, r3
10045d74:	2180      	movs	r1, #128	@ 0x80
10045d76:	203c      	movs	r0, #60	@ 0x3c
10045d78:	f7ff f8f8 	bl	10044f6c <I2C_WriteReg>
//        I2C_WriteReg(OLED_ADDRESS, COMMAND, page);

        // Set the starting column back to the origin.
        I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_DISPLAY_LOWER_COLUMN_0);
10045d7c:	2200      	movs	r2, #0
10045d7e:	2180      	movs	r1, #128	@ 0x80
10045d80:	203c      	movs	r0, #60	@ 0x3c
10045d82:	f7ff f8f3 	bl	10044f6c <I2C_WriteReg>
        I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_DISPLAY_UPPER_COLUMN_0);
10045d86:	2210      	movs	r2, #16
10045d88:	2180      	movs	r1, #128	@ 0x80
10045d8a:	203c      	movs	r0, #60	@ 0x3c
10045d8c:	f7ff f8ee 	bl	10044f6c <I2C_WriteReg>

        // Write this entire column to the OLED.
        for (int i = 0; i < OLED_DRIVER_PIXEL_COLUMNS; i++) {
10045d90:	2300      	movs	r3, #0
10045d92:	607b      	str	r3, [r7, #4]
10045d94:	e00c      	b.n	10045db0 <OledDriverUpdateDisplay+0x64>
            I2C_WriteReg(OLED_ADDRESS, DATA, *pb);
10045d96:	68fb      	ldr	r3, [r7, #12]
10045d98:	781b      	ldrb	r3, [r3, #0]
10045d9a:	001a      	movs	r2, r3
10045d9c:	21c0      	movs	r1, #192	@ 0xc0
10045d9e:	203c      	movs	r0, #60	@ 0x3c
10045da0:	f7ff f8e4 	bl	10044f6c <I2C_WriteReg>
            pb--;
10045da4:	68fb      	ldr	r3, [r7, #12]
10045da6:	3b01      	subs	r3, #1
10045da8:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < OLED_DRIVER_PIXEL_COLUMNS; i++) {
10045daa:	687b      	ldr	r3, [r7, #4]
10045dac:	3301      	adds	r3, #1
10045dae:	607b      	str	r3, [r7, #4]
10045db0:	687b      	ldr	r3, [r7, #4]
10045db2:	2b7f      	cmp	r3, #127	@ 0x7f
10045db4:	ddef      	ble.n	10045d96 <OledDriverUpdateDisplay+0x4a>
    for (page = 0; page < OLED_DRIVER_PAGES; page++) {
10045db6:	68bb      	ldr	r3, [r7, #8]
10045db8:	3301      	adds	r3, #1
10045dba:	60bb      	str	r3, [r7, #8]
10045dbc:	68bb      	ldr	r3, [r7, #8]
10045dbe:	2b07      	cmp	r3, #7
10045dc0:	ddcc      	ble.n	10045d5c <OledDriverUpdateDisplay+0x10>
        }
    }
}
10045dc2:	46c0      	nop			@ (mov r8, r8)
10045dc4:	46c0      	nop			@ (mov r8, r8)
10045dc6:	46bd      	mov	sp, r7
10045dc8:	b004      	add	sp, #16
10045dca:	bd80      	pop	{r7, pc}
10045dcc:	20002013 	.word	0x20002013

10045dd0 <DelayMs>:

/**
 * Block the processor for the desired number of milliseconds.
 * @param ms The number of milliseconds to block for.
 */
void DelayMs(uint32_t ms) {
10045dd0:	b580      	push	{r7, lr}
10045dd2:	b084      	sub	sp, #16
10045dd4:	af00      	add	r7, sp, #0
10045dd6:	6078      	str	r0, [r7, #4]
    uint32_t curr_ms = TIMERS_GetMilliSeconds();
10045dd8:	f000 fbae 	bl	10046538 <TIMERS_GetMilliSeconds>
10045ddc:	0003      	movs	r3, r0
10045dde:	60fb      	str	r3, [r7, #12]
    while ((TIMERS_GetMilliSeconds() - curr_ms) < ms);
10045de0:	46c0      	nop			@ (mov r8, r8)
10045de2:	f000 fba9 	bl	10046538 <TIMERS_GetMilliSeconds>
10045de6:	0002      	movs	r2, r0
10045de8:	68fb      	ldr	r3, [r7, #12]
10045dea:	1ad3      	subs	r3, r2, r3
10045dec:	687a      	ldr	r2, [r7, #4]
10045dee:	429a      	cmp	r2, r3
10045df0:	d8f7      	bhi.n	10045de2 <DelayMs+0x12>
}
10045df2:	46c0      	nop			@ (mov r8, r8)
10045df4:	46c0      	nop			@ (mov r8, r8)
10045df6:	46bd      	mov	sp, r7
10045df8:	b004      	add	sp, #16
10045dfa:	bd80      	pop	{r7, pc}

10045dfc <CompareTime>:
static uint8_t logging;//logging
static uint8_t playdata;

static int16_t curschedule;//contains the current schedule being followed, -1 if no schedule active
//----------------------------------------Private Functions--------------------------------------
void CompareTime(){
10045dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
10045dfe:	b08f      	sub	sp, #60	@ 0x3c
10045e00:	af00      	add	r7, sp, #0
	if(logging){
10045e02:	4bd1      	ldr	r3, [pc, #836]	@ (10046148 <CompareTime+0x34c>)
10045e04:	781b      	ldrb	r3, [r3, #0]
10045e06:	2b00      	cmp	r3, #0
10045e08:	d069      	beq.n	10045ede <CompareTime+0xe2>
		scheduleEvent event;

		event.month = month;
10045e0a:	4bd0      	ldr	r3, [pc, #832]	@ (1004614c <CompareTime+0x350>)
10045e0c:	781a      	ldrb	r2, [r3, #0]
10045e0e:	2524      	movs	r5, #36	@ 0x24
10045e10:	197b      	adds	r3, r7, r5
10045e12:	701a      	strb	r2, [r3, #0]
		if(playdata){
10045e14:	4bce      	ldr	r3, [pc, #824]	@ (10046150 <CompareTime+0x354>)
10045e16:	781b      	ldrb	r3, [r3, #0]
10045e18:	2b00      	cmp	r3, #0
10045e1a:	d025      	beq.n	10045e68 <CompareTime+0x6c>
			event.start = ((hour & 0b11111) << 3) & ((uint8_t)(minute/15));
10045e1c:	4bcd      	ldr	r3, [pc, #820]	@ (10046154 <CompareTime+0x358>)
10045e1e:	781b      	ldrb	r3, [r3, #0]
10045e20:	b25b      	sxtb	r3, r3
10045e22:	00db      	lsls	r3, r3, #3
10045e24:	b25c      	sxtb	r4, r3
10045e26:	4bcc      	ldr	r3, [pc, #816]	@ (10046158 <CompareTime+0x35c>)
10045e28:	781b      	ldrb	r3, [r3, #0]
10045e2a:	210f      	movs	r1, #15
10045e2c:	0018      	movs	r0, r3
10045e2e:	f7fa fa07 	bl	10040240 <__udivsi3>
10045e32:	0003      	movs	r3, r0
10045e34:	b2db      	uxtb	r3, r3
10045e36:	b25b      	sxtb	r3, r3
10045e38:	4023      	ands	r3, r4
10045e3a:	b25b      	sxtb	r3, r3
10045e3c:	b2da      	uxtb	r2, r3
10045e3e:	197b      	adds	r3, r7, r5
10045e40:	709a      	strb	r2, [r3, #2]
			event.daystart = day;
10045e42:	4bc6      	ldr	r3, [pc, #792]	@ (1004615c <CompareTime+0x360>)
10045e44:	781a      	ldrb	r2, [r3, #0]
10045e46:	0029      	movs	r1, r5
10045e48:	187b      	adds	r3, r7, r1
10045e4a:	705a      	strb	r2, [r3, #1]
			event.stop = 0;
10045e4c:	187b      	adds	r3, r7, r1
10045e4e:	2200      	movs	r2, #0
10045e50:	70da      	strb	r2, [r3, #3]
			event.daystop = 0;
10045e52:	187b      	adds	r3, r7, r1
10045e54:	2200      	movs	r2, #0
10045e56:	711a      	strb	r2, [r3, #4]
			event.folder = (playdata>>8)&0xFF;
10045e58:	187b      	adds	r3, r7, r1
10045e5a:	2200      	movs	r2, #0
10045e5c:	715a      	strb	r2, [r3, #5]
			event.track = playdata&0xFF;
10045e5e:	4bbc      	ldr	r3, [pc, #752]	@ (10046150 <CompareTime+0x354>)
10045e60:	781a      	ldrb	r2, [r3, #0]
10045e62:	187b      	adds	r3, r7, r1
10045e64:	719a      	strb	r2, [r3, #6]
10045e66:	e030      	b.n	10045eca <CompareTime+0xce>
		} else {
			scheduleEvent prevevent = FLASH_ReadLogs(FLASH_GetLogsSize()-1);
10045e68:	f7fe fb02 	bl	10044470 <FLASH_GetLogsSize>
10045e6c:	0003      	movs	r3, r0
10045e6e:	3b01      	subs	r3, #1
10045e70:	b29a      	uxth	r2, r3
10045e72:	261c      	movs	r6, #28
10045e74:	19bb      	adds	r3, r7, r6
10045e76:	0011      	movs	r1, r2
10045e78:	0018      	movs	r0, r3
10045e7a:	f7fe fb0d 	bl	10044498 <FLASH_ReadLogs>
			event.start = 0;
10045e7e:	2524      	movs	r5, #36	@ 0x24
10045e80:	197b      	adds	r3, r7, r5
10045e82:	2200      	movs	r2, #0
10045e84:	709a      	strb	r2, [r3, #2]
			event.daystart = 0;
10045e86:	197b      	adds	r3, r7, r5
10045e88:	2200      	movs	r2, #0
10045e8a:	705a      	strb	r2, [r3, #1]
			event.stop = ((hour & 0b11111) << 3) & ((uint8_t)(minute/15));
10045e8c:	4bb1      	ldr	r3, [pc, #708]	@ (10046154 <CompareTime+0x358>)
10045e8e:	781b      	ldrb	r3, [r3, #0]
10045e90:	b25b      	sxtb	r3, r3
10045e92:	00db      	lsls	r3, r3, #3
10045e94:	b25c      	sxtb	r4, r3
10045e96:	4bb0      	ldr	r3, [pc, #704]	@ (10046158 <CompareTime+0x35c>)
10045e98:	781b      	ldrb	r3, [r3, #0]
10045e9a:	210f      	movs	r1, #15
10045e9c:	0018      	movs	r0, r3
10045e9e:	f7fa f9cf 	bl	10040240 <__udivsi3>
10045ea2:	0003      	movs	r3, r0
10045ea4:	b2db      	uxtb	r3, r3
10045ea6:	b25b      	sxtb	r3, r3
10045ea8:	4023      	ands	r3, r4
10045eaa:	b25b      	sxtb	r3, r3
10045eac:	b2da      	uxtb	r2, r3
10045eae:	197b      	adds	r3, r7, r5
10045eb0:	70da      	strb	r2, [r3, #3]
			event.daystop = day;
10045eb2:	4baa      	ldr	r3, [pc, #680]	@ (1004615c <CompareTime+0x360>)
10045eb4:	781a      	ldrb	r2, [r3, #0]
10045eb6:	197b      	adds	r3, r7, r5
10045eb8:	711a      	strb	r2, [r3, #4]
			event.folder = prevevent.folder;
10045eba:	19bb      	adds	r3, r7, r6
10045ebc:	795a      	ldrb	r2, [r3, #5]
10045ebe:	197b      	adds	r3, r7, r5
10045ec0:	715a      	strb	r2, [r3, #5]
			event.track = prevevent.track;
10045ec2:	19bb      	adds	r3, r7, r6
10045ec4:	799a      	ldrb	r2, [r3, #6]
10045ec6:	197b      	adds	r3, r7, r5
10045ec8:	719a      	strb	r2, [r3, #6]
		}
		FLASH_AppendLogs(event);
10045eca:	2324      	movs	r3, #36	@ 0x24
10045ecc:	18fb      	adds	r3, r7, r3
10045ece:	6818      	ldr	r0, [r3, #0]
10045ed0:	6859      	ldr	r1, [r3, #4]
10045ed2:	f7fe fa67 	bl	100443a4 <FLASH_AppendLogs>
		logging  = 0;
10045ed6:	4b9c      	ldr	r3, [pc, #624]	@ (10046148 <CompareTime+0x34c>)
10045ed8:	2200      	movs	r2, #0
10045eda:	701a      	strb	r2, [r3, #0]
							  //this section should not be reentered unless the second schedule event starts and ends on the same minute as the first ends
				}
			}
		}
	}
}
10045edc:	e12f      	b.n	1004613e <CompareTime+0x342>
		Event_t play = (Event_t){EVENT_PLAY, 0};
10045ede:	2110      	movs	r1, #16
10045ee0:	187b      	adds	r3, r7, r1
10045ee2:	220b      	movs	r2, #11
10045ee4:	701a      	strb	r2, [r3, #0]
10045ee6:	187b      	adds	r3, r7, r1
10045ee8:	2200      	movs	r2, #0
10045eea:	805a      	strh	r2, [r3, #2]
		for(int reset = 0; reset < 1; reset++){
10045eec:	2300      	movs	r3, #0
10045eee:	637b      	str	r3, [r7, #52]	@ 0x34
10045ef0:	e121      	b.n	10046136 <CompareTime+0x33a>
			if(curschedule == -1){//no active schedule
10045ef2:	4b9b      	ldr	r3, [pc, #620]	@ (10046160 <CompareTime+0x364>)
10045ef4:	2200      	movs	r2, #0
10045ef6:	5e9b      	ldrsh	r3, [r3, r2]
10045ef8:	3301      	adds	r3, #1
10045efa:	d000      	beq.n	10045efe <CompareTime+0x102>
10045efc:	e0ce      	b.n	1004609c <CompareTime+0x2a0>
				for(uint16_t i = 0; i < FLASH_GetScheduleSize(); i++){
10045efe:	2332      	movs	r3, #50	@ 0x32
10045f00:	18fb      	adds	r3, r7, r3
10045f02:	2200      	movs	r2, #0
10045f04:	801a      	strh	r2, [r3, #0]
10045f06:	e0bf      	b.n	10046088 <CompareTime+0x28c>
					event = FLASH_ReadSchedule(i);
10045f08:	2414      	movs	r4, #20
10045f0a:	193a      	adds	r2, r7, r4
10045f0c:	2332      	movs	r3, #50	@ 0x32
10045f0e:	18fb      	adds	r3, r7, r3
10045f10:	881b      	ldrh	r3, [r3, #0]
10045f12:	0019      	movs	r1, r3
10045f14:	0010      	movs	r0, r2
10045f16:	f7fe fbb5 	bl	10044684 <FLASH_ReadSchedule>
					uint8_t secondmonth = event.month;
10045f1a:	2531      	movs	r5, #49	@ 0x31
10045f1c:	197b      	adds	r3, r7, r5
10045f1e:	0020      	movs	r0, r4
10045f20:	183a      	adds	r2, r7, r0
10045f22:	7812      	ldrb	r2, [r2, #0]
10045f24:	701a      	strb	r2, [r3, #0]
					uint8_t Shour = (event.start&0b11111000)>>3;
10045f26:	183b      	adds	r3, r7, r0
10045f28:	789a      	ldrb	r2, [r3, #2]
10045f2a:	2330      	movs	r3, #48	@ 0x30
10045f2c:	18fb      	adds	r3, r7, r3
10045f2e:	08d2      	lsrs	r2, r2, #3
10045f30:	701a      	strb	r2, [r3, #0]
					uint8_t Ehour = (event.stop &0b11111000)>>3;
10045f32:	183b      	adds	r3, r7, r0
10045f34:	78da      	ldrb	r2, [r3, #3]
10045f36:	232f      	movs	r3, #47	@ 0x2f
10045f38:	18fb      	adds	r3, r7, r3
10045f3a:	08d2      	lsrs	r2, r2, #3
10045f3c:	701a      	strb	r2, [r3, #0]
					uint8_t Smin  = (event.start&0b00000011)*15;
10045f3e:	183b      	adds	r3, r7, r0
10045f40:	789b      	ldrb	r3, [r3, #2]
10045f42:	2203      	movs	r2, #3
10045f44:	4013      	ands	r3, r2
10045f46:	b2da      	uxtb	r2, r3
10045f48:	232e      	movs	r3, #46	@ 0x2e
10045f4a:	18fb      	adds	r3, r7, r3
10045f4c:	1c11      	adds	r1, r2, #0
10045f4e:	0109      	lsls	r1, r1, #4
10045f50:	1a8a      	subs	r2, r1, r2
10045f52:	701a      	strb	r2, [r3, #0]
					uint8_t Emin  = (event.stop &0b00000011)*15;
10045f54:	183b      	adds	r3, r7, r0
10045f56:	78db      	ldrb	r3, [r3, #3]
10045f58:	2203      	movs	r2, #3
10045f5a:	4013      	ands	r3, r2
10045f5c:	b2da      	uxtb	r2, r3
10045f5e:	232d      	movs	r3, #45	@ 0x2d
10045f60:	18fb      	adds	r3, r7, r3
10045f62:	1c11      	adds	r1, r2, #0
10045f64:	0109      	lsls	r1, r1, #4
10045f66:	1a8a      	subs	r2, r1, r2
10045f68:	701a      	strb	r2, [r3, #0]
					if(event.daystart > event.daystop){
10045f6a:	183b      	adds	r3, r7, r0
10045f6c:	785a      	ldrb	r2, [r3, #1]
10045f6e:	183b      	adds	r3, r7, r0
10045f70:	791b      	ldrb	r3, [r3, #4]
10045f72:	429a      	cmp	r2, r3
10045f74:	d90b      	bls.n	10045f8e <CompareTime+0x192>
						secondmonth = event.month+1;
10045f76:	183b      	adds	r3, r7, r0
10045f78:	781a      	ldrb	r2, [r3, #0]
10045f7a:	197b      	adds	r3, r7, r5
10045f7c:	3201      	adds	r2, #1
10045f7e:	701a      	strb	r2, [r3, #0]
						if(secondmonth == 13){
10045f80:	197b      	adds	r3, r7, r5
10045f82:	781b      	ldrb	r3, [r3, #0]
10045f84:	2b0d      	cmp	r3, #13
10045f86:	d102      	bne.n	10045f8e <CompareTime+0x192>
							secondmonth = 1;
10045f88:	197b      	adds	r3, r7, r5
10045f8a:	2201      	movs	r2, #1
10045f8c:	701a      	strb	r2, [r3, #0]
							event.month == month || secondmonth == month
10045f8e:	2314      	movs	r3, #20
10045f90:	18fb      	adds	r3, r7, r3
10045f92:	781a      	ldrb	r2, [r3, #0]
10045f94:	4b6d      	ldr	r3, [pc, #436]	@ (1004614c <CompareTime+0x350>)
10045f96:	781b      	ldrb	r3, [r3, #0]
					if((
10045f98:	429a      	cmp	r2, r3
10045f9a:	d007      	beq.n	10045fac <CompareTime+0x1b0>
							event.month == month || secondmonth == month
10045f9c:	4b6b      	ldr	r3, [pc, #428]	@ (1004614c <CompareTime+0x350>)
10045f9e:	781b      	ldrb	r3, [r3, #0]
10045fa0:	2231      	movs	r2, #49	@ 0x31
10045fa2:	18ba      	adds	r2, r7, r2
10045fa4:	7812      	ldrb	r2, [r2, #0]
10045fa6:	429a      	cmp	r2, r3
10045fa8:	d000      	beq.n	10045fac <CompareTime+0x1b0>
10045faa:	e067      	b.n	1004607c <CompareTime+0x280>
							( (event.daystart <= day && event.daystop >= day) && event.daystart >= event.daystop)||//within the period in single month mode
10045fac:	2114      	movs	r1, #20
10045fae:	187b      	adds	r3, r7, r1
10045fb0:	785a      	ldrb	r2, [r3, #1]
10045fb2:	4b6a      	ldr	r3, [pc, #424]	@ (1004615c <CompareTime+0x360>)
10045fb4:	781b      	ldrb	r3, [r3, #0]
					   )&& //if within the month period
10045fb6:	429a      	cmp	r2, r3
10045fb8:	d80b      	bhi.n	10045fd2 <CompareTime+0x1d6>
							( (event.daystart <= day && event.daystop >= day) && event.daystart >= event.daystop)||//within the period in single month mode
10045fba:	187b      	adds	r3, r7, r1
10045fbc:	791a      	ldrb	r2, [r3, #4]
10045fbe:	4b67      	ldr	r3, [pc, #412]	@ (1004615c <CompareTime+0x360>)
10045fc0:	781b      	ldrb	r3, [r3, #0]
10045fc2:	429a      	cmp	r2, r3
10045fc4:	d305      	bcc.n	10045fd2 <CompareTime+0x1d6>
10045fc6:	187b      	adds	r3, r7, r1
10045fc8:	785a      	ldrb	r2, [r3, #1]
10045fca:	187b      	adds	r3, r7, r1
10045fcc:	791b      	ldrb	r3, [r3, #4]
10045fce:	429a      	cmp	r2, r3
10045fd0:	d213      	bcs.n	10045ffa <CompareTime+0x1fe>
							( (event.daystart <= day || event.daystop >= day) && event.daystart >  event.daystop)  //if within the day period in multi-month mode
10045fd2:	2114      	movs	r1, #20
10045fd4:	187b      	adds	r3, r7, r1
10045fd6:	785a      	ldrb	r2, [r3, #1]
10045fd8:	4b60      	ldr	r3, [pc, #384]	@ (1004615c <CompareTime+0x360>)
10045fda:	781b      	ldrb	r3, [r3, #0]
							( (event.daystart <= day && event.daystop >= day) && event.daystart >= event.daystop)||//within the period in single month mode
10045fdc:	429a      	cmp	r2, r3
10045fde:	d905      	bls.n	10045fec <CompareTime+0x1f0>
							( (event.daystart <= day || event.daystop >= day) && event.daystart >  event.daystop)  //if within the day period in multi-month mode
10045fe0:	187b      	adds	r3, r7, r1
10045fe2:	791a      	ldrb	r2, [r3, #4]
10045fe4:	4b5d      	ldr	r3, [pc, #372]	@ (1004615c <CompareTime+0x360>)
10045fe6:	781b      	ldrb	r3, [r3, #0]
10045fe8:	429a      	cmp	r2, r3
10045fea:	d347      	bcc.n	1004607c <CompareTime+0x280>
10045fec:	2114      	movs	r1, #20
10045fee:	187b      	adds	r3, r7, r1
10045ff0:	785a      	ldrb	r2, [r3, #1]
10045ff2:	187b      	adds	r3, r7, r1
10045ff4:	791b      	ldrb	r3, [r3, #4]
10045ff6:	429a      	cmp	r2, r3
10045ff8:	d940      	bls.n	1004607c <CompareTime+0x280>
							(Shour < hour && Ehour> hour)||   //fully within the period
10045ffa:	4b56      	ldr	r3, [pc, #344]	@ (10046154 <CompareTime+0x358>)
10045ffc:	781b      	ldrb	r3, [r3, #0]
					   )&&
10045ffe:	2230      	movs	r2, #48	@ 0x30
10046000:	18ba      	adds	r2, r7, r2
10046002:	7812      	ldrb	r2, [r2, #0]
10046004:	429a      	cmp	r2, r3
10046006:	d206      	bcs.n	10046016 <CompareTime+0x21a>
							(Shour < hour && Ehour> hour)||   //fully within the period
10046008:	4b52      	ldr	r3, [pc, #328]	@ (10046154 <CompareTime+0x358>)
1004600a:	781b      	ldrb	r3, [r3, #0]
1004600c:	222f      	movs	r2, #47	@ 0x2f
1004600e:	18ba      	adds	r2, r7, r2
10046010:	7812      	ldrb	r2, [r2, #0]
10046012:	429a      	cmp	r2, r3
10046014:	d81b      	bhi.n	1004604e <CompareTime+0x252>
							(Shour == hour&& Smin <= minute)|| //In the start hour, after or on the start minute
10046016:	4b4f      	ldr	r3, [pc, #316]	@ (10046154 <CompareTime+0x358>)
10046018:	781b      	ldrb	r3, [r3, #0]
							(Shour < hour && Ehour> hour)||   //fully within the period
1004601a:	2230      	movs	r2, #48	@ 0x30
1004601c:	18ba      	adds	r2, r7, r2
1004601e:	7812      	ldrb	r2, [r2, #0]
10046020:	429a      	cmp	r2, r3
10046022:	d106      	bne.n	10046032 <CompareTime+0x236>
							(Shour == hour&& Smin <= minute)|| //In the start hour, after or on the start minute
10046024:	4b4c      	ldr	r3, [pc, #304]	@ (10046158 <CompareTime+0x35c>)
10046026:	781b      	ldrb	r3, [r3, #0]
10046028:	222e      	movs	r2, #46	@ 0x2e
1004602a:	18ba      	adds	r2, r7, r2
1004602c:	7812      	ldrb	r2, [r2, #0]
1004602e:	429a      	cmp	r2, r3
10046030:	d90d      	bls.n	1004604e <CompareTime+0x252>
							(Ehour == hour&& Emin > minute)   //In the end hour, before the stop minute
10046032:	4b48      	ldr	r3, [pc, #288]	@ (10046154 <CompareTime+0x358>)
10046034:	781b      	ldrb	r3, [r3, #0]
							(Shour == hour&& Smin <= minute)|| //In the start hour, after or on the start minute
10046036:	222f      	movs	r2, #47	@ 0x2f
10046038:	18ba      	adds	r2, r7, r2
1004603a:	7812      	ldrb	r2, [r2, #0]
1004603c:	429a      	cmp	r2, r3
1004603e:	d11d      	bne.n	1004607c <CompareTime+0x280>
							(Ehour == hour&& Emin > minute)   //In the end hour, before the stop minute
10046040:	4b45      	ldr	r3, [pc, #276]	@ (10046158 <CompareTime+0x35c>)
10046042:	781b      	ldrb	r3, [r3, #0]
10046044:	222d      	movs	r2, #45	@ 0x2d
10046046:	18ba      	adds	r2, r7, r2
10046048:	7812      	ldrb	r2, [r2, #0]
1004604a:	429a      	cmp	r2, r3
1004604c:	d916      	bls.n	1004607c <CompareTime+0x280>
						play.data = (event.folder<<8) + event.track;//Update the MP3
1004604e:	2214      	movs	r2, #20
10046050:	18bb      	adds	r3, r7, r2
10046052:	795b      	ldrb	r3, [r3, #5]
10046054:	021b      	lsls	r3, r3, #8
10046056:	b29b      	uxth	r3, r3
10046058:	18ba      	adds	r2, r7, r2
1004605a:	7992      	ldrb	r2, [r2, #6]
1004605c:	189b      	adds	r3, r3, r2
1004605e:	b29a      	uxth	r2, r3
10046060:	2110      	movs	r1, #16
10046062:	187b      	adds	r3, r7, r1
10046064:	805a      	strh	r2, [r3, #2]
						MP3_Event_Post(play);
10046066:	187b      	adds	r3, r7, r1
10046068:	6818      	ldr	r0, [r3, #0]
1004606a:	f7ff f931 	bl	100452d0 <MP3_Event_Post>
						curschedule = i;
1004606e:	2332      	movs	r3, #50	@ 0x32
10046070:	18fb      	adds	r3, r7, r3
10046072:	2200      	movs	r2, #0
10046074:	5e9a      	ldrsh	r2, [r3, r2]
10046076:	4b3a      	ldr	r3, [pc, #232]	@ (10046160 <CompareTime+0x364>)
10046078:	801a      	strh	r2, [r3, #0]
						break;
1004607a:	e00f      	b.n	1004609c <CompareTime+0x2a0>
				for(uint16_t i = 0; i < FLASH_GetScheduleSize(); i++){
1004607c:	2132      	movs	r1, #50	@ 0x32
1004607e:	187b      	adds	r3, r7, r1
10046080:	881a      	ldrh	r2, [r3, #0]
10046082:	187b      	adds	r3, r7, r1
10046084:	3201      	adds	r2, #1
10046086:	801a      	strh	r2, [r3, #0]
10046088:	f7fe fae8 	bl	1004465c <FLASH_GetScheduleSize>
1004608c:	0003      	movs	r3, r0
1004608e:	001a      	movs	r2, r3
10046090:	2332      	movs	r3, #50	@ 0x32
10046092:	18fb      	adds	r3, r7, r3
10046094:	881b      	ldrh	r3, [r3, #0]
10046096:	4293      	cmp	r3, r2
10046098:	d200      	bcs.n	1004609c <CompareTime+0x2a0>
1004609a:	e735      	b.n	10045f08 <CompareTime+0x10c>
			if(curschedule != -1){//active schedule
1004609c:	4b30      	ldr	r3, [pc, #192]	@ (10046160 <CompareTime+0x364>)
1004609e:	2200      	movs	r2, #0
100460a0:	5e9b      	ldrsh	r3, [r3, r2]
100460a2:	3301      	adds	r3, #1
100460a4:	d044      	beq.n	10046130 <CompareTime+0x334>
				event = FLASH_ReadSchedule(curschedule);
100460a6:	4b2e      	ldr	r3, [pc, #184]	@ (10046160 <CompareTime+0x364>)
100460a8:	2200      	movs	r2, #0
100460aa:	5e9b      	ldrsh	r3, [r3, r2]
100460ac:	b29a      	uxth	r2, r3
100460ae:	2514      	movs	r5, #20
100460b0:	197c      	adds	r4, r7, r5
100460b2:	003b      	movs	r3, r7
100460b4:	0011      	movs	r1, r2
100460b6:	0018      	movs	r0, r3
100460b8:	f7fe fae4 	bl	10044684 <FLASH_ReadSchedule>
100460bc:	003b      	movs	r3, r7
100460be:	0020      	movs	r0, r4
100460c0:	0019      	movs	r1, r3
100460c2:	2307      	movs	r3, #7
100460c4:	001a      	movs	r2, r3
100460c6:	f021 fd3e 	bl	10067b46 <memcpy>
				uint8_t Ehour = (event.stop &0b11111000)>>3;
100460ca:	0029      	movs	r1, r5
100460cc:	187b      	adds	r3, r7, r1
100460ce:	78da      	ldrb	r2, [r3, #3]
100460d0:	202c      	movs	r0, #44	@ 0x2c
100460d2:	183b      	adds	r3, r7, r0
100460d4:	08d2      	lsrs	r2, r2, #3
100460d6:	701a      	strb	r2, [r3, #0]
				uint8_t Emin  = (event.stop &0b00000011)*15;
100460d8:	187b      	adds	r3, r7, r1
100460da:	78db      	ldrb	r3, [r3, #3]
100460dc:	2203      	movs	r2, #3
100460de:	4013      	ands	r3, r2
100460e0:	b2da      	uxtb	r2, r3
100460e2:	242b      	movs	r4, #43	@ 0x2b
100460e4:	193b      	adds	r3, r7, r4
100460e6:	1c11      	adds	r1, r2, #0
100460e8:	0109      	lsls	r1, r1, #4
100460ea:	1a8a      	subs	r2, r1, r2
100460ec:	701a      	strb	r2, [r3, #0]
				if((hour == Ehour && minute >= Emin )||(hour > Ehour)){
100460ee:	4b19      	ldr	r3, [pc, #100]	@ (10046154 <CompareTime+0x358>)
100460f0:	781b      	ldrb	r3, [r3, #0]
100460f2:	183a      	adds	r2, r7, r0
100460f4:	7812      	ldrb	r2, [r2, #0]
100460f6:	429a      	cmp	r2, r3
100460f8:	d105      	bne.n	10046106 <CompareTime+0x30a>
100460fa:	4b17      	ldr	r3, [pc, #92]	@ (10046158 <CompareTime+0x35c>)
100460fc:	781b      	ldrb	r3, [r3, #0]
100460fe:	193a      	adds	r2, r7, r4
10046100:	7812      	ldrb	r2, [r2, #0]
10046102:	429a      	cmp	r2, r3
10046104:	d906      	bls.n	10046114 <CompareTime+0x318>
10046106:	4b13      	ldr	r3, [pc, #76]	@ (10046154 <CompareTime+0x358>)
10046108:	781b      	ldrb	r3, [r3, #0]
1004610a:	222c      	movs	r2, #44	@ 0x2c
1004610c:	18ba      	adds	r2, r7, r2
1004610e:	7812      	ldrb	r2, [r2, #0]
10046110:	429a      	cmp	r2, r3
10046112:	d20d      	bcs.n	10046130 <CompareTime+0x334>
					play.data = 0;//indicate a pause to the MP3 module
10046114:	2110      	movs	r1, #16
10046116:	187b      	adds	r3, r7, r1
10046118:	2200      	movs	r2, #0
1004611a:	805a      	strh	r2, [r3, #2]
					MP3_Event_Post(play);
1004611c:	187b      	adds	r3, r7, r1
1004611e:	6818      	ldr	r0, [r3, #0]
10046120:	f7ff f8d6 	bl	100452d0 <MP3_Event_Post>
					curschedule = -1;//no active schedule
10046124:	4b0e      	ldr	r3, [pc, #56]	@ (10046160 <CompareTime+0x364>)
10046126:	2201      	movs	r2, #1
10046128:	4252      	negs	r2, r2
1004612a:	801a      	strh	r2, [r3, #0]
					reset = 0;// run the schedule start code again
1004612c:	2300      	movs	r3, #0
1004612e:	637b      	str	r3, [r7, #52]	@ 0x34
		for(int reset = 0; reset < 1; reset++){
10046130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10046132:	3301      	adds	r3, #1
10046134:	637b      	str	r3, [r7, #52]	@ 0x34
10046136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10046138:	2b00      	cmp	r3, #0
1004613a:	dc00      	bgt.n	1004613e <CompareTime+0x342>
1004613c:	e6d9      	b.n	10045ef2 <CompareTime+0xf6>
}
1004613e:	46c0      	nop			@ (mov r8, r8)
10046140:	46bd      	mov	sp, r7
10046142:	b00f      	add	sp, #60	@ 0x3c
10046144:	bdf0      	pop	{r4, r5, r6, r7, pc}
10046146:	46c0      	nop			@ (mov r8, r8)
10046148:	20002020 	.word	0x20002020
1004614c:	2000201c 	.word	0x2000201c
10046150:	20002021 	.word	0x20002021
10046154:	2000201e 	.word	0x2000201e
10046158:	2000201f 	.word	0x2000201f
1004615c:	2000201d 	.word	0x2000201d
10046160:	20002022 	.word	0x20002022

10046164 <Scheduler_GetMonth>:
uint8_t Scheduler_GetMonth(){
10046164:	b580      	push	{r7, lr}
10046166:	af00      	add	r7, sp, #0
	I2C_Recieve(RTCADDRESS, RTCMNTHADDR, 1);
10046168:	2201      	movs	r2, #1
1004616a:	2105      	movs	r1, #5
1004616c:	206f      	movs	r0, #111	@ 0x6f
1004616e:	f7fe feb9 	bl	10044ee4 <I2C_Recieve>
	return month;
10046172:	4b02      	ldr	r3, [pc, #8]	@ (1004617c <Scheduler_GetMonth+0x18>)
10046174:	781b      	ldrb	r3, [r3, #0]
}
10046176:	0018      	movs	r0, r3
10046178:	46bd      	mov	sp, r7
1004617a:	bd80      	pop	{r7, pc}
1004617c:	2000201c 	.word	0x2000201c

10046180 <Scheduler_GetDay>:
uint8_t Scheduler_GetDay(){
10046180:	b580      	push	{r7, lr}
10046182:	af00      	add	r7, sp, #0
	I2C_Recieve(RTCADDRESS, RTCDAYADDR, 1);
10046184:	2201      	movs	r2, #1
10046186:	2104      	movs	r1, #4
10046188:	206f      	movs	r0, #111	@ 0x6f
1004618a:	f7fe feab 	bl	10044ee4 <I2C_Recieve>
	return day;
1004618e:	4b02      	ldr	r3, [pc, #8]	@ (10046198 <Scheduler_GetDay+0x18>)
10046190:	781b      	ldrb	r3, [r3, #0]
}
10046192:	0018      	movs	r0, r3
10046194:	46bd      	mov	sp, r7
10046196:	bd80      	pop	{r7, pc}
10046198:	2000201d 	.word	0x2000201d

1004619c <Scheduler_GetHour>:
uint8_t Scheduler_GetHour(){
1004619c:	b580      	push	{r7, lr}
1004619e:	af00      	add	r7, sp, #0
	I2C_Recieve(RTCADDRESS, RTCHOURADDR, 1);
100461a0:	2201      	movs	r2, #1
100461a2:	2102      	movs	r1, #2
100461a4:	206f      	movs	r0, #111	@ 0x6f
100461a6:	f7fe fe9d 	bl	10044ee4 <I2C_Recieve>
	return hour;
100461aa:	4b02      	ldr	r3, [pc, #8]	@ (100461b4 <Scheduler_GetHour+0x18>)
100461ac:	781b      	ldrb	r3, [r3, #0]
}
100461ae:	0018      	movs	r0, r3
100461b0:	46bd      	mov	sp, r7
100461b2:	bd80      	pop	{r7, pc}
100461b4:	2000201e 	.word	0x2000201e

100461b8 <Scheduler_GetMinute>:
uint8_t Scheduler_GetMinute(){
100461b8:	b580      	push	{r7, lr}
100461ba:	af00      	add	r7, sp, #0
	I2C_Recieve(RTCADDRESS, RTCMINADDR, 1);
100461bc:	2201      	movs	r2, #1
100461be:	2101      	movs	r1, #1
100461c0:	206f      	movs	r0, #111	@ 0x6f
100461c2:	f7fe fe8f 	bl	10044ee4 <I2C_Recieve>
	return minute;
100461c6:	4b02      	ldr	r3, [pc, #8]	@ (100461d0 <Scheduler_GetMinute+0x18>)
100461c8:	781b      	ldrb	r3, [r3, #0]
}
100461ca:	0018      	movs	r0, r3
100461cc:	46bd      	mov	sp, r7
100461ce:	bd80      	pop	{r7, pc}
100461d0:	2000201f 	.word	0x2000201f

100461d4 <Scheduler_Event_Init>:
 * @Function: Scheduler_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t Scheduler_Event_Init(FIFO Queue){
100461d4:	b580      	push	{r7, lr}
100461d6:	b082      	sub	sp, #8
100461d8:	af00      	add	r7, sp, #0
100461da:	6078      	str	r0, [r7, #4]
    Schedulerqueue = Queue;
100461dc:	4b0e      	ldr	r3, [pc, #56]	@ (10046218 <Scheduler_Event_Init+0x44>)
100461de:	687a      	ldr	r2, [r7, #4]
100461e0:	601a      	str	r2, [r3, #0]
    I2C_Init();
100461e2:	f7fe fda7 	bl	10044d34 <I2C_Init>
    TIMERS_Init();
100461e6:	f000 f95b 	bl	100464a0 <TIMERS_Init>
    I2C_Transmit(RTCADDRESS, RTCSECADDR, 0x80);//enable the clock
100461ea:	2280      	movs	r2, #128	@ 0x80
100461ec:	2100      	movs	r1, #0
100461ee:	206f      	movs	r0, #111	@ 0x6f
100461f0:	f7fe fe1a 	bl	10044e28 <I2C_Transmit>
	I2C_Transmit(RTCADDRESS, RTCSTATADDR, 0x28);//enables the use of backup battery
100461f4:	2228      	movs	r2, #40	@ 0x28
100461f6:	2103      	movs	r1, #3
100461f8:	206f      	movs	r0, #111	@ 0x6f
100461fa:	f7fe fe15 	bl	10044e28 <I2C_Transmit>
    starttime = -1;//force check time on wake-up
100461fe:	4b07      	ldr	r3, [pc, #28]	@ (1004621c <Scheduler_Event_Init+0x48>)
10046200:	2201      	movs	r2, #1
10046202:	4252      	negs	r2, r2
10046204:	601a      	str	r2, [r3, #0]
    curschedule = -1;//no active schedule
10046206:	4b06      	ldr	r3, [pc, #24]	@ (10046220 <Scheduler_Event_Init+0x4c>)
10046208:	2201      	movs	r2, #1
1004620a:	4252      	negs	r2, r2
1004620c:	801a      	strh	r2, [r3, #0]
    return INIT_OK;
1004620e:	2301      	movs	r3, #1
}
10046210:	0018      	movs	r0, r3
10046212:	46bd      	mov	sp, r7
10046214:	b002      	add	sp, #8
10046216:	bd80      	pop	{r7, pc}
10046218:	20002014 	.word	0x20002014
1004621c:	20002018 	.word	0x20002018
10046220:	20002022 	.word	0x20002022

10046224 <Scheduler_Event_Post>:
 * @Function: Scheduler_Event_Init
 * @Brief: Provides the ability for state machines to interact
 * @param: event to be posted
 * @return: none
 */
void Scheduler_Event_Post(Event_t event){
10046224:	b580      	push	{r7, lr}
10046226:	b082      	sub	sp, #8
10046228:	af00      	add	r7, sp, #0
1004622a:	1d3b      	adds	r3, r7, #4
1004622c:	6018      	str	r0, [r3, #0]
    FIFO_Enqueue(Schedulerqueue, event);
1004622e:	4b05      	ldr	r3, [pc, #20]	@ (10046244 <Scheduler_Event_Post+0x20>)
10046230:	681a      	ldr	r2, [r3, #0]
10046232:	1d3b      	adds	r3, r7, #4
10046234:	6819      	ldr	r1, [r3, #0]
10046236:	0010      	movs	r0, r2
10046238:	f7fd ff35 	bl	100440a6 <FIFO_Enqueue>
}
1004623c:	46c0      	nop			@ (mov r8, r8)
1004623e:	46bd      	mov	sp, r7
10046240:	b002      	add	sp, #8
10046242:	bd80      	pop	{r7, pc}
10046244:	20002014 	.word	0x20002014

10046248 <Scheduler_Event_Updater>:
 * @Function: Scheduler_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the
 * @param: none
 * @return: An event
 */
Event_t Scheduler_Event_Updater(void){
10046248:	b580      	push	{r7, lr}
1004624a:	b084      	sub	sp, #16
1004624c:	af00      	add	r7, sp, #0
    Event_t event = (Event_t){EVENT_NONE, 0};
1004624e:	1d3b      	adds	r3, r7, #4
10046250:	2200      	movs	r2, #0
10046252:	701a      	strb	r2, [r3, #0]
10046254:	1d3b      	adds	r3, r7, #4
10046256:	2200      	movs	r2, #0
10046258:	805a      	strh	r2, [r3, #2]
    uint32_t timer = TIMERS_GetMilliSeconds();
1004625a:	f000 f96d 	bl	10046538 <TIMERS_GetMilliSeconds>
1004625e:	0003      	movs	r3, r0
10046260:	60fb      	str	r3, [r7, #12]
	if((timer-starttime) >= REFRESHRATE){
10046262:	4b15      	ldr	r3, [pc, #84]	@ (100462b8 <Scheduler_Event_Updater+0x70>)
10046264:	681b      	ldr	r3, [r3, #0]
10046266:	68fa      	ldr	r2, [r7, #12]
10046268:	1ad3      	subs	r3, r2, r3
1004626a:	4a14      	ldr	r2, [pc, #80]	@ (100462bc <Scheduler_Event_Updater+0x74>)
1004626c:	4293      	cmp	r3, r2
1004626e:	d90c      	bls.n	1004628a <Scheduler_Event_Updater+0x42>
		event.status = EVENT_TIMEOUT;
10046270:	1d3b      	adds	r3, r7, #4
10046272:	2209      	movs	r2, #9
10046274:	701a      	strb	r2, [r3, #0]
		event.data = 0;
10046276:	1d3b      	adds	r3, r7, #4
10046278:	2200      	movs	r2, #0
1004627a:	805a      	strh	r2, [r3, #2]
		starttime = timer;
1004627c:	4b0e      	ldr	r3, [pc, #56]	@ (100462b8 <Scheduler_Event_Updater+0x70>)
1004627e:	68fa      	ldr	r2, [r7, #12]
10046280:	601a      	str	r2, [r3, #0]
		Scheduler_Event_Post(event);
10046282:	1d3b      	adds	r3, r7, #4
10046284:	6818      	ldr	r0, [r3, #0]
10046286:	f7ff ffcd 	bl	10046224 <Scheduler_Event_Post>
	}
    return event;
1004628a:	2108      	movs	r1, #8
1004628c:	187b      	adds	r3, r7, r1
1004628e:	1d3a      	adds	r2, r7, #4
10046290:	6812      	ldr	r2, [r2, #0]
10046292:	601a      	str	r2, [r3, #0]
10046294:	187a      	adds	r2, r7, r1
10046296:	2300      	movs	r3, #0
10046298:	8811      	ldrh	r1, [r2, #0]
1004629a:	0409      	lsls	r1, r1, #16
1004629c:	0c09      	lsrs	r1, r1, #16
1004629e:	0c1b      	lsrs	r3, r3, #16
100462a0:	041b      	lsls	r3, r3, #16
100462a2:	430b      	orrs	r3, r1
100462a4:	8852      	ldrh	r2, [r2, #2]
100462a6:	0412      	lsls	r2, r2, #16
100462a8:	041b      	lsls	r3, r3, #16
100462aa:	0c1b      	lsrs	r3, r3, #16
100462ac:	4313      	orrs	r3, r2
}
100462ae:	0018      	movs	r0, r3
100462b0:	46bd      	mov	sp, r7
100462b2:	b004      	add	sp, #16
100462b4:	bd80      	pop	{r7, pc}
100462b6:	46c0      	nop			@ (mov r8, r8)
100462b8:	20002018 	.word	0x20002018
100462bc:	0000ea5f 	.word	0x0000ea5f

100462c0 <Scheduler_Event_Handler>:
 * @Function: Scheduler_Event_Handler
 * @Brief:
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t Scheduler_Event_Handler(Event_t event){
100462c0:	b580      	push	{r7, lr}
100462c2:	b082      	sub	sp, #8
100462c4:	af00      	add	r7, sp, #0
100462c6:	1d3b      	adds	r3, r7, #4
100462c8:	6018      	str	r0, [r3, #0]
	if(event.status == EVENT_PLAY){
100462ca:	1d3b      	adds	r3, r7, #4
100462cc:	781b      	ldrb	r3, [r3, #0]
100462ce:	b25b      	sxtb	r3, r3
100462d0:	2b0b      	cmp	r3, #11
100462d2:	d11b      	bne.n	1004630c <Scheduler_Event_Handler+0x4c>
		I2C_Recieve(RTCADDRESS, RTCMNTHADDR, 1);
100462d4:	2201      	movs	r2, #1
100462d6:	2105      	movs	r1, #5
100462d8:	206f      	movs	r0, #111	@ 0x6f
100462da:	f7fe fe03 	bl	10044ee4 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCDAYADDR, 1);
100462de:	2201      	movs	r2, #1
100462e0:	2104      	movs	r1, #4
100462e2:	206f      	movs	r0, #111	@ 0x6f
100462e4:	f7fe fdfe 	bl	10044ee4 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCHOURADDR, 1);
100462e8:	2201      	movs	r2, #1
100462ea:	2102      	movs	r1, #2
100462ec:	206f      	movs	r0, #111	@ 0x6f
100462ee:	f7fe fdf9 	bl	10044ee4 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCMINADDR, 1);
100462f2:	2201      	movs	r2, #1
100462f4:	2101      	movs	r1, #1
100462f6:	206f      	movs	r0, #111	@ 0x6f
100462f8:	f7fe fdf4 	bl	10044ee4 <I2C_Recieve>
		logging = 1;
100462fc:	4b62      	ldr	r3, [pc, #392]	@ (10046488 <Scheduler_Event_Handler+0x1c8>)
100462fe:	2201      	movs	r2, #1
10046300:	701a      	strb	r2, [r3, #0]
		playdata = event.data;
10046302:	1d3b      	adds	r3, r7, #4
10046304:	885b      	ldrh	r3, [r3, #2]
10046306:	b2da      	uxtb	r2, r3
10046308:	4b60      	ldr	r3, [pc, #384]	@ (1004648c <Scheduler_Event_Handler+0x1cc>)
1004630a:	701a      	strb	r2, [r3, #0]
	}
	if(event.status == EVENT_TIMEOUT){
1004630c:	1d3b      	adds	r3, r7, #4
1004630e:	781b      	ldrb	r3, [r3, #0]
10046310:	b25b      	sxtb	r3, r3
10046312:	2b09      	cmp	r3, #9
10046314:	d113      	bne.n	1004633e <Scheduler_Event_Handler+0x7e>
		I2C_Recieve(RTCADDRESS, RTCMNTHADDR, 1);
10046316:	2201      	movs	r2, #1
10046318:	2105      	movs	r1, #5
1004631a:	206f      	movs	r0, #111	@ 0x6f
1004631c:	f7fe fde2 	bl	10044ee4 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCDAYADDR, 1);
10046320:	2201      	movs	r2, #1
10046322:	2104      	movs	r1, #4
10046324:	206f      	movs	r0, #111	@ 0x6f
10046326:	f7fe fddd 	bl	10044ee4 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCHOURADDR, 1);
1004632a:	2201      	movs	r2, #1
1004632c:	2102      	movs	r1, #2
1004632e:	206f      	movs	r0, #111	@ 0x6f
10046330:	f7fe fdd8 	bl	10044ee4 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCMINADDR, 1);
10046334:	2201      	movs	r2, #1
10046336:	2101      	movs	r1, #1
10046338:	206f      	movs	r0, #111	@ 0x6f
1004633a:	f7fe fdd3 	bl	10044ee4 <I2C_Recieve>
	}
	if(event.status == EVENT_I2C){
1004633e:	1d3b      	adds	r3, r7, #4
10046340:	781b      	ldrb	r3, [r3, #0]
10046342:	b25b      	sxtb	r3, r3
10046344:	2b05      	cmp	r3, #5
10046346:	d000      	beq.n	1004634a <Scheduler_Event_Handler+0x8a>
10046348:	e098      	b.n	1004647c <Scheduler_Event_Handler+0x1bc>
		switch (event.data>>8){
1004634a:	1d3b      	adds	r3, r7, #4
1004634c:	885b      	ldrh	r3, [r3, #2]
1004634e:	0a1b      	lsrs	r3, r3, #8
10046350:	b29b      	uxth	r3, r3
10046352:	2b05      	cmp	r3, #5
10046354:	d00b      	beq.n	1004636e <Scheduler_Event_Handler+0xae>
10046356:	dd00      	ble.n	1004635a <Scheduler_Event_Handler+0x9a>
10046358:	e090      	b.n	1004647c <Scheduler_Event_Handler+0x1bc>
1004635a:	2b04      	cmp	r3, #4
1004635c:	d01e      	beq.n	1004639c <Scheduler_Event_Handler+0xdc>
1004635e:	dd00      	ble.n	10046362 <Scheduler_Event_Handler+0xa2>
10046360:	e08c      	b.n	1004647c <Scheduler_Event_Handler+0x1bc>
10046362:	2b01      	cmp	r3, #1
10046364:	d100      	bne.n	10046368 <Scheduler_Event_Handler+0xa8>
10046366:	e070      	b.n	1004644a <Scheduler_Event_Handler+0x18a>
10046368:	2b02      	cmp	r3, #2
1004636a:	d02e      	beq.n	100463ca <Scheduler_Event_Handler+0x10a>
1004636c:	e086      	b.n	1004647c <Scheduler_Event_Handler+0x1bc>
		case RTCMNTHADDR:
			month = ((event.data & 0x10)>>4)*10 + (event.data & 0x0F);
1004636e:	1d3b      	adds	r3, r7, #4
10046370:	885b      	ldrh	r3, [r3, #2]
10046372:	111b      	asrs	r3, r3, #4
10046374:	b2db      	uxtb	r3, r3
10046376:	2201      	movs	r2, #1
10046378:	4013      	ands	r3, r2
1004637a:	b2db      	uxtb	r3, r3
1004637c:	1c1a      	adds	r2, r3, #0
1004637e:	0092      	lsls	r2, r2, #2
10046380:	18d3      	adds	r3, r2, r3
10046382:	18db      	adds	r3, r3, r3
10046384:	b2da      	uxtb	r2, r3
10046386:	1d3b      	adds	r3, r7, #4
10046388:	885b      	ldrh	r3, [r3, #2]
1004638a:	b2db      	uxtb	r3, r3
1004638c:	210f      	movs	r1, #15
1004638e:	400b      	ands	r3, r1
10046390:	b2db      	uxtb	r3, r3
10046392:	18d3      	adds	r3, r2, r3
10046394:	b2da      	uxtb	r2, r3
10046396:	4b3e      	ldr	r3, [pc, #248]	@ (10046490 <Scheduler_Event_Handler+0x1d0>)
10046398:	701a      	strb	r2, [r3, #0]
			break;
1004639a:	e06f      	b.n	1004647c <Scheduler_Event_Handler+0x1bc>
		case RTCDAYADDR:
			day = ((event.data & 0x30)>>4)*10 + (event.data & 0x0F);
1004639c:	1d3b      	adds	r3, r7, #4
1004639e:	885b      	ldrh	r3, [r3, #2]
100463a0:	111b      	asrs	r3, r3, #4
100463a2:	b2db      	uxtb	r3, r3
100463a4:	2203      	movs	r2, #3
100463a6:	4013      	ands	r3, r2
100463a8:	b2db      	uxtb	r3, r3
100463aa:	1c1a      	adds	r2, r3, #0
100463ac:	0092      	lsls	r2, r2, #2
100463ae:	18d3      	adds	r3, r2, r3
100463b0:	18db      	adds	r3, r3, r3
100463b2:	b2da      	uxtb	r2, r3
100463b4:	1d3b      	adds	r3, r7, #4
100463b6:	885b      	ldrh	r3, [r3, #2]
100463b8:	b2db      	uxtb	r3, r3
100463ba:	210f      	movs	r1, #15
100463bc:	400b      	ands	r3, r1
100463be:	b2db      	uxtb	r3, r3
100463c0:	18d3      	adds	r3, r2, r3
100463c2:	b2da      	uxtb	r2, r3
100463c4:	4b33      	ldr	r3, [pc, #204]	@ (10046494 <Scheduler_Event_Handler+0x1d4>)
100463c6:	701a      	strb	r2, [r3, #0]
			break;
100463c8:	e058      	b.n	1004647c <Scheduler_Event_Handler+0x1bc>
		case RTCHOURADDR:
			if(event.data & 0x40){//AM/PM
100463ca:	1d3b      	adds	r3, r7, #4
100463cc:	885b      	ldrh	r3, [r3, #2]
100463ce:	001a      	movs	r2, r3
100463d0:	2340      	movs	r3, #64	@ 0x40
100463d2:	4013      	ands	r3, r2
100463d4:	d022      	beq.n	1004641c <Scheduler_Event_Handler+0x15c>
				hour = 12*((event.data &0x20)>>5)+ 10*((event.data &0x10)>>4) + ((event.data &0x0F));
100463d6:	1d3b      	adds	r3, r7, #4
100463d8:	885b      	ldrh	r3, [r3, #2]
100463da:	115b      	asrs	r3, r3, #5
100463dc:	b2db      	uxtb	r3, r3
100463de:	2201      	movs	r2, #1
100463e0:	4013      	ands	r3, r2
100463e2:	b2db      	uxtb	r3, r3
100463e4:	220c      	movs	r2, #12
100463e6:	4353      	muls	r3, r2
100463e8:	b2da      	uxtb	r2, r3
100463ea:	1d3b      	adds	r3, r7, #4
100463ec:	885b      	ldrh	r3, [r3, #2]
100463ee:	111b      	asrs	r3, r3, #4
100463f0:	b2db      	uxtb	r3, r3
100463f2:	2101      	movs	r1, #1
100463f4:	400b      	ands	r3, r1
100463f6:	b2db      	uxtb	r3, r3
100463f8:	1c19      	adds	r1, r3, #0
100463fa:	0089      	lsls	r1, r1, #2
100463fc:	18cb      	adds	r3, r1, r3
100463fe:	18db      	adds	r3, r3, r3
10046400:	b2db      	uxtb	r3, r3
10046402:	18d3      	adds	r3, r2, r3
10046404:	b2da      	uxtb	r2, r3
10046406:	1d3b      	adds	r3, r7, #4
10046408:	885b      	ldrh	r3, [r3, #2]
1004640a:	b2db      	uxtb	r3, r3
1004640c:	210f      	movs	r1, #15
1004640e:	400b      	ands	r3, r1
10046410:	b2db      	uxtb	r3, r3
10046412:	18d3      	adds	r3, r2, r3
10046414:	b2da      	uxtb	r2, r3
10046416:	4b20      	ldr	r3, [pc, #128]	@ (10046498 <Scheduler_Event_Handler+0x1d8>)
10046418:	701a      	strb	r2, [r3, #0]
			}else {//24Hr
				hour = 10*((event.data &0x30)>>4) + ((event.data &0x0F));
			}
			break;
1004641a:	e02f      	b.n	1004647c <Scheduler_Event_Handler+0x1bc>
				hour = 10*((event.data &0x30)>>4) + ((event.data &0x0F));
1004641c:	1d3b      	adds	r3, r7, #4
1004641e:	885b      	ldrh	r3, [r3, #2]
10046420:	111b      	asrs	r3, r3, #4
10046422:	b2db      	uxtb	r3, r3
10046424:	2203      	movs	r2, #3
10046426:	4013      	ands	r3, r2
10046428:	b2db      	uxtb	r3, r3
1004642a:	1c1a      	adds	r2, r3, #0
1004642c:	0092      	lsls	r2, r2, #2
1004642e:	18d3      	adds	r3, r2, r3
10046430:	18db      	adds	r3, r3, r3
10046432:	b2da      	uxtb	r2, r3
10046434:	1d3b      	adds	r3, r7, #4
10046436:	885b      	ldrh	r3, [r3, #2]
10046438:	b2db      	uxtb	r3, r3
1004643a:	210f      	movs	r1, #15
1004643c:	400b      	ands	r3, r1
1004643e:	b2db      	uxtb	r3, r3
10046440:	18d3      	adds	r3, r2, r3
10046442:	b2da      	uxtb	r2, r3
10046444:	4b14      	ldr	r3, [pc, #80]	@ (10046498 <Scheduler_Event_Handler+0x1d8>)
10046446:	701a      	strb	r2, [r3, #0]
			break;
10046448:	e018      	b.n	1004647c <Scheduler_Event_Handler+0x1bc>
		case RTCMINADDR:
			//MINTEN2 MINTEN1 MINTEN0 MINONE3 MINONE2 MINONE1 MINONE0
			minute = 10*((event.data & 0x30)>>4) +((event.data &0x0F));
1004644a:	1d3b      	adds	r3, r7, #4
1004644c:	885b      	ldrh	r3, [r3, #2]
1004644e:	111b      	asrs	r3, r3, #4
10046450:	b2db      	uxtb	r3, r3
10046452:	2203      	movs	r2, #3
10046454:	4013      	ands	r3, r2
10046456:	b2db      	uxtb	r3, r3
10046458:	1c1a      	adds	r2, r3, #0
1004645a:	0092      	lsls	r2, r2, #2
1004645c:	18d3      	adds	r3, r2, r3
1004645e:	18db      	adds	r3, r3, r3
10046460:	b2da      	uxtb	r2, r3
10046462:	1d3b      	adds	r3, r7, #4
10046464:	885b      	ldrh	r3, [r3, #2]
10046466:	b2db      	uxtb	r3, r3
10046468:	210f      	movs	r1, #15
1004646a:	400b      	ands	r3, r1
1004646c:	b2db      	uxtb	r3, r3
1004646e:	18d3      	adds	r3, r2, r3
10046470:	b2da      	uxtb	r2, r3
10046472:	4b0a      	ldr	r3, [pc, #40]	@ (1004649c <Scheduler_Event_Handler+0x1dc>)
10046474:	701a      	strb	r2, [r3, #0]
			CompareTime();
10046476:	f7ff fcc1 	bl	10045dfc <CompareTime>

			break;
1004647a:	46c0      	nop			@ (mov r8, r8)
		}
	}
    return 1;
1004647c:	2301      	movs	r3, #1
}
1004647e:	0018      	movs	r0, r3
10046480:	46bd      	mov	sp, r7
10046482:	b002      	add	sp, #8
10046484:	bd80      	pop	{r7, pc}
10046486:	46c0      	nop			@ (mov r8, r8)
10046488:	20002020 	.word	0x20002020
1004648c:	20002021 	.word	0x20002021
10046490:	2000201c 	.word	0x2000201c
10046494:	2000201d 	.word	0x2000201d
10046498:	2000201e 	.word	0x2000201e
1004649c:	2000201f 	.word	0x2000201f

100464a0 <TIMERS_Init>:
 * @function: TIMERS_Init()
 * @brief: initialize
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
uint32_t TIMERS_Init(){
100464a0:	b580      	push	{r7, lr}
100464a2:	b084      	sub	sp, #16
100464a4:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
100464a6:	4b20      	ldr	r3, [pc, #128]	@ (10046528 <TIMERS_Init+0x88>)
100464a8:	781b      	ldrb	r3, [r3, #0]
100464aa:	2b00      	cmp	r3, #0
100464ac:	d001      	beq.n	100464b2 <TIMERS_Init+0x12>
100464ae:	2301      	movs	r3, #1
100464b0:	e036      	b.n	10046520 <TIMERS_Init+0x80>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
100464b2:	003b      	movs	r3, r7
100464b4:	0018      	movs	r0, r3
100464b6:	2310      	movs	r3, #16
100464b8:	001a      	movs	r2, r3
100464ba:	2100      	movs	r1, #0
100464bc:	f021 face 	bl	10067a5c <memset>
	htim2.Instance = TIM2;
100464c0:	4b1a      	ldr	r3, [pc, #104]	@ (1004652c <TIMERS_Init+0x8c>)
100464c2:	4a1b      	ldr	r2, [pc, #108]	@ (10046530 <TIMERS_Init+0x90>)
100464c4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 32;
100464c6:	4b19      	ldr	r3, [pc, #100]	@ (1004652c <TIMERS_Init+0x8c>)
100464c8:	2220      	movs	r2, #32
100464ca:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
100464cc:	4b17      	ldr	r3, [pc, #92]	@ (1004652c <TIMERS_Init+0x8c>)
100464ce:	2200      	movs	r2, #0
100464d0:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
100464d2:	4b16      	ldr	r3, [pc, #88]	@ (1004652c <TIMERS_Init+0x8c>)
100464d4:	4a17      	ldr	r2, [pc, #92]	@ (10046534 <TIMERS_Init+0x94>)
100464d6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
100464d8:	4b14      	ldr	r3, [pc, #80]	@ (1004652c <TIMERS_Init+0x8c>)
100464da:	2200      	movs	r2, #0
100464dc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
100464de:	4b13      	ldr	r3, [pc, #76]	@ (1004652c <TIMERS_Init+0x8c>)
100464e0:	2200      	movs	r2, #0
100464e2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
100464e4:	4b11      	ldr	r3, [pc, #68]	@ (1004652c <TIMERS_Init+0x8c>)
100464e6:	0018      	movs	r0, r3
100464e8:	f006 ff46 	bl	1004d378 <HAL_TIM_Base_Init>
100464ec:	1e03      	subs	r3, r0, #0
100464ee:	d001      	beq.n	100464f4 <TIMERS_Init+0x54>
	{
		Error_Handler();
100464f0:	f7fb fbc2 	bl	10041c78 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
100464f4:	003b      	movs	r3, r7
100464f6:	2280      	movs	r2, #128	@ 0x80
100464f8:	0152      	lsls	r2, r2, #5
100464fa:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
100464fc:	003a      	movs	r2, r7
100464fe:	4b0b      	ldr	r3, [pc, #44]	@ (1004652c <TIMERS_Init+0x8c>)
10046500:	0011      	movs	r1, r2
10046502:	0018      	movs	r0, r3
10046504:	f007 f8b0 	bl	1004d668 <HAL_TIM_ConfigClockSource>
10046508:	1e03      	subs	r3, r0, #0
1004650a:	d001      	beq.n	10046510 <TIMERS_Init+0x70>
	{
		Error_Handler();
1004650c:	f7fb fbb4 	bl	10041c78 <Error_Handler>
	}
    HAL_TIM_Base_Start_IT(&htim2); // start interrupt
10046510:	4b06      	ldr	r3, [pc, #24]	@ (1004652c <TIMERS_Init+0x8c>)
10046512:	0018      	movs	r0, r3
10046514:	f006 ff74 	bl	1004d400 <HAL_TIM_Base_Start_IT>
    initialized = 1;
10046518:	4b03      	ldr	r3, [pc, #12]	@ (10046528 <TIMERS_Init+0x88>)
1004651a:	2201      	movs	r2, #1
1004651c:	701a      	strb	r2, [r3, #0]
	return INIT_OK;
1004651e:	2301      	movs	r3, #1
}
10046520:	0018      	movs	r0, r3
10046522:	46bd      	mov	sp, r7
10046524:	b004      	add	sp, #16
10046526:	bd80      	pop	{r7, pc}
10046528:	20002064 	.word	0x20002064
1004652c:	20002024 	.word	0x20002024
10046530:	40002000 	.word	0x40002000
10046534:	000003e7 	.word	0x000003e7

10046538 <TIMERS_GetMilliSeconds>:
 * @function: TIMERS_GetMilliSeconds()
 * @brief: accesses the free running timer's milliseconds
 * @param: none
 * @return: uint32_t FRT's milliseconds
 */
uint32_t TIMERS_GetMilliSeconds(){
10046538:	b580      	push	{r7, lr}
1004653a:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
1004653c:	4b05      	ldr	r3, [pc, #20]	@ (10046554 <TIMERS_GetMilliSeconds+0x1c>)
1004653e:	781b      	ldrb	r3, [r3, #0]
10046540:	2b00      	cmp	r3, #0
10046542:	d101      	bne.n	10046548 <TIMERS_GetMilliSeconds+0x10>
10046544:	2300      	movs	r3, #0
10046546:	e001      	b.n	1004654c <TIMERS_GetMilliSeconds+0x14>
	return milliSeconds;
10046548:	4b03      	ldr	r3, [pc, #12]	@ (10046558 <TIMERS_GetMilliSeconds+0x20>)
1004654a:	681b      	ldr	r3, [r3, #0]
}
1004654c:	0018      	movs	r0, r3
1004654e:	46bd      	mov	sp, r7
10046550:	bd80      	pop	{r7, pc}
10046552:	46c0      	nop			@ (mov r8, r8)
10046554:	20002064 	.word	0x20002064
10046558:	20002060 	.word	0x20002060

1004655c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
1004655c:	b580      	push	{r7, lr}
1004655e:	af00      	add	r7, sp, #0

	milliSeconds++;
10046560:	4b05      	ldr	r3, [pc, #20]	@ (10046578 <TIM2_IRQHandler+0x1c>)
10046562:	681b      	ldr	r3, [r3, #0]
10046564:	1c5a      	adds	r2, r3, #1
10046566:	4b04      	ldr	r3, [pc, #16]	@ (10046578 <TIM2_IRQHandler+0x1c>)
10046568:	601a      	str	r2, [r3, #0]
	HAL_TIM_IRQHandler(&htim2);
1004656a:	4b04      	ldr	r3, [pc, #16]	@ (1004657c <TIM2_IRQHandler+0x20>)
1004656c:	0018      	movs	r0, r3
1004656e:	f006 ff8d 	bl	1004d48c <HAL_TIM_IRQHandler>
}
10046572:	46c0      	nop			@ (mov r8, r8)
10046574:	46bd      	mov	sp, r7
10046576:	bd80      	pop	{r7, pc}
10046578:	20002060 	.word	0x20002060
1004657c:	20002024 	.word	0x20002024

10046580 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
10046580:	b580      	push	{r7, lr}
10046582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */
	if(hlpuart1.Instance->ISR & USART_ISR_ORE_Msk){
10046584:	4b3c      	ldr	r3, [pc, #240]	@ (10046678 <LPUART1_IRQHandler+0xf8>)
10046586:	681b      	ldr	r3, [r3, #0]
10046588:	69db      	ldr	r3, [r3, #28]
1004658a:	2208      	movs	r2, #8
1004658c:	4013      	ands	r3, r2
1004658e:	d003      	beq.n	10046598 <LPUART1_IRQHandler+0x18>
			__HAL_UART_CLEAR_FLAG(&hlpuart1, UART_CLEAR_OREF);
10046590:	4b39      	ldr	r3, [pc, #228]	@ (10046678 <LPUART1_IRQHandler+0xf8>)
10046592:	681b      	ldr	r3, [r3, #0]
10046594:	2208      	movs	r2, #8
10046596:	621a      	str	r2, [r3, #32]
	}
	if(hlpuart1.Instance->ISR & USART_ISR_RXNE_RXFNE_Msk){
10046598:	4b37      	ldr	r3, [pc, #220]	@ (10046678 <LPUART1_IRQHandler+0xf8>)
1004659a:	681b      	ldr	r3, [r3, #0]
1004659c:	69db      	ldr	r3, [r3, #28]
1004659e:	2220      	movs	r2, #32
100465a0:	4013      	ands	r3, r2
100465a2:	d030      	beq.n	10046606 <LPUART1_IRQHandler+0x86>
		if(!LPUARTrx.full){
100465a4:	4b35      	ldr	r3, [pc, #212]	@ (1004667c <LPUART1_IRQHandler+0xfc>)
100465a6:	2224      	movs	r2, #36	@ 0x24
100465a8:	5c9b      	ldrb	r3, [r3, r2]
100465aa:	2201      	movs	r2, #1
100465ac:	4053      	eors	r3, r2
100465ae:	b2db      	uxtb	r3, r3
100465b0:	2b00      	cmp	r3, #0
100465b2:	d020      	beq.n	100465f6 <LPUART1_IRQHandler+0x76>
			LPUARTrx.data[LPUARTrx.head] = hlpuart1.Instance->RDR;
100465b4:	4b30      	ldr	r3, [pc, #192]	@ (10046678 <LPUART1_IRQHandler+0xf8>)
100465b6:	681b      	ldr	r3, [r3, #0]
100465b8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
100465ba:	4b30      	ldr	r3, [pc, #192]	@ (1004667c <LPUART1_IRQHandler+0xfc>)
100465bc:	8c1b      	ldrh	r3, [r3, #32]
100465be:	001a      	movs	r2, r3
100465c0:	b2c9      	uxtb	r1, r1
100465c2:	4b2e      	ldr	r3, [pc, #184]	@ (1004667c <LPUART1_IRQHandler+0xfc>)
100465c4:	5499      	strb	r1, [r3, r2]
			LPUARTrx.head++;
100465c6:	4b2d      	ldr	r3, [pc, #180]	@ (1004667c <LPUART1_IRQHandler+0xfc>)
100465c8:	8c1b      	ldrh	r3, [r3, #32]
100465ca:	3301      	adds	r3, #1
100465cc:	b29a      	uxth	r2, r3
100465ce:	4b2b      	ldr	r3, [pc, #172]	@ (1004667c <LPUART1_IRQHandler+0xfc>)
100465d0:	841a      	strh	r2, [r3, #32]
			LPUARTrx.head %= LPUARTCIRCBUFFSIZE;
100465d2:	4b2a      	ldr	r3, [pc, #168]	@ (1004667c <LPUART1_IRQHandler+0xfc>)
100465d4:	8c1b      	ldrh	r3, [r3, #32]
100465d6:	221f      	movs	r2, #31
100465d8:	4013      	ands	r3, r2
100465da:	b29a      	uxth	r2, r3
100465dc:	4b27      	ldr	r3, [pc, #156]	@ (1004667c <LPUART1_IRQHandler+0xfc>)
100465de:	841a      	strh	r2, [r3, #32]
			if(LPUARTrx.tail == LPUARTrx.head){
100465e0:	4b26      	ldr	r3, [pc, #152]	@ (1004667c <LPUART1_IRQHandler+0xfc>)
100465e2:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
100465e4:	4b25      	ldr	r3, [pc, #148]	@ (1004667c <LPUART1_IRQHandler+0xfc>)
100465e6:	8c1b      	ldrh	r3, [r3, #32]
100465e8:	429a      	cmp	r2, r3
100465ea:	d10c      	bne.n	10046606 <LPUART1_IRQHandler+0x86>
				LPUARTrx.full = true;
100465ec:	4b23      	ldr	r3, [pc, #140]	@ (1004667c <LPUART1_IRQHandler+0xfc>)
100465ee:	2224      	movs	r2, #36	@ 0x24
100465f0:	2101      	movs	r1, #1
100465f2:	5499      	strb	r1, [r3, r2]
100465f4:	e007      	b.n	10046606 <LPUART1_IRQHandler+0x86>
			}
		} else {
			hlpuart1.Instance->RQR |= 0x08;
100465f6:	4b20      	ldr	r3, [pc, #128]	@ (10046678 <LPUART1_IRQHandler+0xf8>)
100465f8:	681b      	ldr	r3, [r3, #0]
100465fa:	699a      	ldr	r2, [r3, #24]
100465fc:	4b1e      	ldr	r3, [pc, #120]	@ (10046678 <LPUART1_IRQHandler+0xf8>)
100465fe:	681b      	ldr	r3, [r3, #0]
10046600:	2108      	movs	r1, #8
10046602:	430a      	orrs	r2, r1
10046604:	619a      	str	r2, [r3, #24]
		}
	}
	if((hlpuart1.Instance->ISR & USART_ISR_TC_Msk)){
10046606:	4b1c      	ldr	r3, [pc, #112]	@ (10046678 <LPUART1_IRQHandler+0xf8>)
10046608:	681b      	ldr	r3, [r3, #0]
1004660a:	69db      	ldr	r3, [r3, #28]
1004660c:	2240      	movs	r2, #64	@ 0x40
1004660e:	4013      	ands	r3, r2
10046610:	d02e      	beq.n	10046670 <LPUART1_IRQHandler+0xf0>
		if(LPUARTtx.head != LPUARTtx.tail || LPUARTtx.full){
10046612:	4b1b      	ldr	r3, [pc, #108]	@ (10046680 <LPUART1_IRQHandler+0x100>)
10046614:	8c1a      	ldrh	r2, [r3, #32]
10046616:	4b1a      	ldr	r3, [pc, #104]	@ (10046680 <LPUART1_IRQHandler+0x100>)
10046618:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
1004661a:	429a      	cmp	r2, r3
1004661c:	d104      	bne.n	10046628 <LPUART1_IRQHandler+0xa8>
1004661e:	4b18      	ldr	r3, [pc, #96]	@ (10046680 <LPUART1_IRQHandler+0x100>)
10046620:	2224      	movs	r2, #36	@ 0x24
10046622:	5c9b      	ldrb	r3, [r3, r2]
10046624:	2b00      	cmp	r3, #0
10046626:	d01e      	beq.n	10046666 <LPUART1_IRQHandler+0xe6>
			hlpuart1.Instance->TDR = LPUARTtx.data[LPUARTtx.tail];
10046628:	4b15      	ldr	r3, [pc, #84]	@ (10046680 <LPUART1_IRQHandler+0x100>)
1004662a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
1004662c:	001a      	movs	r2, r3
1004662e:	4b14      	ldr	r3, [pc, #80]	@ (10046680 <LPUART1_IRQHandler+0x100>)
10046630:	5c9a      	ldrb	r2, [r3, r2]
10046632:	4b11      	ldr	r3, [pc, #68]	@ (10046678 <LPUART1_IRQHandler+0xf8>)
10046634:	681b      	ldr	r3, [r3, #0]
10046636:	629a      	str	r2, [r3, #40]	@ 0x28
			LPUARTtx.tail++;
10046638:	4b11      	ldr	r3, [pc, #68]	@ (10046680 <LPUART1_IRQHandler+0x100>)
1004663a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
1004663c:	3301      	adds	r3, #1
1004663e:	b29a      	uxth	r2, r3
10046640:	4b0f      	ldr	r3, [pc, #60]	@ (10046680 <LPUART1_IRQHandler+0x100>)
10046642:	845a      	strh	r2, [r3, #34]	@ 0x22
			LPUARTtx.tail %= LPUARTCIRCBUFFSIZE;
10046644:	4b0e      	ldr	r3, [pc, #56]	@ (10046680 <LPUART1_IRQHandler+0x100>)
10046646:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046648:	221f      	movs	r2, #31
1004664a:	4013      	ands	r3, r2
1004664c:	b29a      	uxth	r2, r3
1004664e:	4b0c      	ldr	r3, [pc, #48]	@ (10046680 <LPUART1_IRQHandler+0x100>)
10046650:	845a      	strh	r2, [r3, #34]	@ 0x22
			if(LPUARTtx.full){
10046652:	4b0b      	ldr	r3, [pc, #44]	@ (10046680 <LPUART1_IRQHandler+0x100>)
10046654:	2224      	movs	r2, #36	@ 0x24
10046656:	5c9b      	ldrb	r3, [r3, r2]
10046658:	2b00      	cmp	r3, #0
1004665a:	d009      	beq.n	10046670 <LPUART1_IRQHandler+0xf0>
				LPUARTtx.full = false;
1004665c:	4b08      	ldr	r3, [pc, #32]	@ (10046680 <LPUART1_IRQHandler+0x100>)
1004665e:	2224      	movs	r2, #36	@ 0x24
10046660:	2100      	movs	r1, #0
10046662:	5499      	strb	r1, [r3, r2]
			if(LPUARTtx.full){
10046664:	e004      	b.n	10046670 <LPUART1_IRQHandler+0xf0>
			}

		} else {
			__HAL_UART_CLEAR_FLAG(&hlpuart1, UART_CLEAR_TCF);
10046666:	4b04      	ldr	r3, [pc, #16]	@ (10046678 <LPUART1_IRQHandler+0xf8>)
10046668:	681b      	ldr	r3, [r3, #0]
1004666a:	2240      	movs	r2, #64	@ 0x40
1004666c:	621a      	str	r2, [r3, #32]

	//HAL_UART_IRQHandler(&hlpuart1);
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
1004666e:	e7ff      	b.n	10046670 <LPUART1_IRQHandler+0xf0>
10046670:	46c0      	nop			@ (mov r8, r8)
10046672:	46bd      	mov	sp, r7
10046674:	bd80      	pop	{r7, pc}
10046676:	46c0      	nop			@ (mov r8, r8)
10046678:	20002068 	.word	0x20002068
1004667c:	2000215c 	.word	0x2000215c
10046680:	20002134 	.word	0x20002134

10046684 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
10046684:	b580      	push	{r7, lr}
10046686:	af00      	add	r7, sp, #0
			__HAL_USART_CLEAR_FLAG(&husart1, UART_CLEAR_TCF);
			I2CUARTtoI2C(1);//after transmission is complete default to I2C, no delay
		}
	}
#endif
	HAL_USART_IRQHandler(&husart1);
10046688:	4b03      	ldr	r3, [pc, #12]	@ (10046698 <USART1_IRQHandler+0x14>)
1004668a:	0018      	movs	r0, r3
1004668c:	f007 ff6e 	bl	1004e56c <HAL_USART_IRQHandler>

}
10046690:	46c0      	nop			@ (mov r8, r8)
10046692:	46bd      	mov	sp, r7
10046694:	bd80      	pop	{r7, pc}
10046696:	46c0      	nop			@ (mov r8, r8)
10046698:	20002684 	.word	0x20002684

1004669c <UARTs_Init>:
 * @function: UARTs_Init()
 * @brief: initialize the lpuart module
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int UARTs_Init(void){
1004669c:	b580      	push	{r7, lr}
1004669e:	af00      	add	r7, sp, #0

	if(initialized == 1){ return 0;}
100466a0:	4b3b      	ldr	r3, [pc, #236]	@ (10046790 <UARTs_Init+0xf4>)
100466a2:	781b      	ldrb	r3, [r3, #0]
100466a4:	2b01      	cmp	r3, #1
100466a6:	d101      	bne.n	100466ac <UARTs_Init+0x10>
100466a8:	2300      	movs	r3, #0
100466aa:	e06e      	b.n	1004678a <UARTs_Init+0xee>
	TIMERS_Init();
100466ac:	f7ff fef8 	bl	100464a0 <TIMERS_Init>
	initialized = 1;
100466b0:	4b37      	ldr	r3, [pc, #220]	@ (10046790 <UARTs_Init+0xf4>)
100466b2:	2201      	movs	r2, #1
100466b4:	701a      	strb	r2, [r3, #0]
	hlpuart1.Instance = LPUART1;
100466b6:	4b37      	ldr	r3, [pc, #220]	@ (10046794 <UARTs_Init+0xf8>)
100466b8:	4a37      	ldr	r2, [pc, #220]	@ (10046798 <UARTs_Init+0xfc>)
100466ba:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 9600;
100466bc:	4b35      	ldr	r3, [pc, #212]	@ (10046794 <UARTs_Init+0xf8>)
100466be:	2296      	movs	r2, #150	@ 0x96
100466c0:	0192      	lsls	r2, r2, #6
100466c2:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
100466c4:	4b33      	ldr	r3, [pc, #204]	@ (10046794 <UARTs_Init+0xf8>)
100466c6:	2200      	movs	r2, #0
100466c8:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
100466ca:	4b32      	ldr	r3, [pc, #200]	@ (10046794 <UARTs_Init+0xf8>)
100466cc:	2200      	movs	r2, #0
100466ce:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
100466d0:	4b30      	ldr	r3, [pc, #192]	@ (10046794 <UARTs_Init+0xf8>)
100466d2:	2200      	movs	r2, #0
100466d4:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
100466d6:	4b2f      	ldr	r3, [pc, #188]	@ (10046794 <UARTs_Init+0xf8>)
100466d8:	220c      	movs	r2, #12
100466da:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
100466dc:	4b2d      	ldr	r3, [pc, #180]	@ (10046794 <UARTs_Init+0xf8>)
100466de:	2200      	movs	r2, #0
100466e0:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
100466e2:	4b2c      	ldr	r3, [pc, #176]	@ (10046794 <UARTs_Init+0xf8>)
100466e4:	2200      	movs	r2, #0
100466e6:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
100466e8:	4b2a      	ldr	r3, [pc, #168]	@ (10046794 <UARTs_Init+0xf8>)
100466ea:	2200      	movs	r2, #0
100466ec:	625a      	str	r2, [r3, #36]	@ 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
100466ee:	4b29      	ldr	r3, [pc, #164]	@ (10046794 <UARTs_Init+0xf8>)
100466f0:	2200      	movs	r2, #0
100466f2:	629a      	str	r2, [r3, #40]	@ 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
100466f4:	4b27      	ldr	r3, [pc, #156]	@ (10046794 <UARTs_Init+0xf8>)
100466f6:	2200      	movs	r2, #0
100466f8:	665a      	str	r2, [r3, #100]	@ 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
100466fa:	4b26      	ldr	r3, [pc, #152]	@ (10046794 <UARTs_Init+0xf8>)
100466fc:	0018      	movs	r0, r3
100466fe:	f007 f99d 	bl	1004da3c <HAL_UART_Init>
10046702:	1e03      	subs	r3, r0, #0
10046704:	d001      	beq.n	1004670a <UARTs_Init+0x6e>
	{
		Error_Handler();
10046706:	f7fb fab7 	bl	10041c78 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
1004670a:	4b22      	ldr	r3, [pc, #136]	@ (10046794 <UARTs_Init+0xf8>)
1004670c:	2100      	movs	r1, #0
1004670e:	0018      	movs	r0, r3
10046710:	f007 fe4c 	bl	1004e3ac <HAL_UARTEx_SetTxFifoThreshold>
10046714:	1e03      	subs	r3, r0, #0
10046716:	d001      	beq.n	1004671c <UARTs_Init+0x80>
	{
		Error_Handler();
10046718:	f7fb faae 	bl	10041c78 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
1004671c:	4b1d      	ldr	r3, [pc, #116]	@ (10046794 <UARTs_Init+0xf8>)
1004671e:	2100      	movs	r1, #0
10046720:	0018      	movs	r0, r3
10046722:	f007 fe83 	bl	1004e42c <HAL_UARTEx_SetRxFifoThreshold>
10046726:	1e03      	subs	r3, r0, #0
10046728:	d001      	beq.n	1004672e <UARTs_Init+0x92>
	{
		Error_Handler();
1004672a:	f7fb faa5 	bl	10041c78 <Error_Handler>
	}
	hlpuart1.Instance->CR2 |= 0x8000;//swap the RX and TX pins
1004672e:	4b19      	ldr	r3, [pc, #100]	@ (10046794 <UARTs_Init+0xf8>)
10046730:	681b      	ldr	r3, [r3, #0]
10046732:	685a      	ldr	r2, [r3, #4]
10046734:	4b17      	ldr	r3, [pc, #92]	@ (10046794 <UARTs_Init+0xf8>)
10046736:	681b      	ldr	r3, [r3, #0]
10046738:	2180      	movs	r1, #128	@ 0x80
1004673a:	0209      	lsls	r1, r1, #8
1004673c:	430a      	orrs	r2, r1
1004673e:	605a      	str	r2, [r3, #4]

	HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
10046740:	2200      	movs	r2, #0
10046742:	2100      	movs	r1, #0
10046744:	2009      	movs	r0, #9
10046746:	f001 f987 	bl	10047a58 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(LPUART1_IRQn);
1004674a:	2009      	movs	r0, #9
1004674c:	f001 f999 	bl	10047a82 <HAL_NVIC_EnableIRQ>

	LPUARTtx.tail = 0;
10046750:	4b12      	ldr	r3, [pc, #72]	@ (1004679c <UARTs_Init+0x100>)
10046752:	2200      	movs	r2, #0
10046754:	845a      	strh	r2, [r3, #34]	@ 0x22
	LPUARTtx.head = 0;
10046756:	4b11      	ldr	r3, [pc, #68]	@ (1004679c <UARTs_Init+0x100>)
10046758:	2200      	movs	r2, #0
1004675a:	841a      	strh	r2, [r3, #32]
	LPUARTtx.full = false;
1004675c:	4b0f      	ldr	r3, [pc, #60]	@ (1004679c <UARTs_Init+0x100>)
1004675e:	2224      	movs	r2, #36	@ 0x24
10046760:	2100      	movs	r1, #0
10046762:	5499      	strb	r1, [r3, r2]

	LPUARTrx.tail = 0;
10046764:	4b0e      	ldr	r3, [pc, #56]	@ (100467a0 <UARTs_Init+0x104>)
10046766:	2200      	movs	r2, #0
10046768:	845a      	strh	r2, [r3, #34]	@ 0x22
	LPUARTrx.head = 0;
1004676a:	4b0d      	ldr	r3, [pc, #52]	@ (100467a0 <UARTs_Init+0x104>)
1004676c:	2200      	movs	r2, #0
1004676e:	841a      	strh	r2, [r3, #32]
	LPUARTrx.full = false;
10046770:	4b0b      	ldr	r3, [pc, #44]	@ (100467a0 <UARTs_Init+0x104>)
10046772:	2224      	movs	r2, #36	@ 0x24
10046774:	2100      	movs	r1, #0
10046776:	5499      	strb	r1, [r3, r2]
	hlpuart1.Instance->CR1 |= (USART_CR1_RXNEIE_RXFNEIE_Msk | USART_CR1_TCIE_Msk);
10046778:	4b06      	ldr	r3, [pc, #24]	@ (10046794 <UARTs_Init+0xf8>)
1004677a:	681b      	ldr	r3, [r3, #0]
1004677c:	681a      	ldr	r2, [r3, #0]
1004677e:	4b05      	ldr	r3, [pc, #20]	@ (10046794 <UARTs_Init+0xf8>)
10046780:	681b      	ldr	r3, [r3, #0]
10046782:	2160      	movs	r1, #96	@ 0x60
10046784:	430a      	orrs	r2, r1
10046786:	601a      	str	r2, [r3, #0]
	USARTrx.head = 0;
	USARTrx.full = false;
#endif
//	__HAL_USART_ENABLE_IT(&husart1, UART_IT_TXE);
//	__HAL_USART_ENABLE_IT(&husart1, UART_IT_RXNE);
	return 0;//not INIT_OK to have compatibility with the BLE trace function calls
10046788:	2300      	movs	r3, #0
}
1004678a:	0018      	movs	r0, r3
1004678c:	46bd      	mov	sp, r7
1004678e:	bd80      	pop	{r7, pc}
10046790:	20002182 	.word	0x20002182
10046794:	20002068 	.word	0x20002068
10046798:	41005000 	.word	0x41005000
1004679c:	20002134 	.word	0x20002134
100467a0:	2000215c 	.word	0x2000215c

100467a4 <LPUART_ReadRx>:
 * @function: UART_ReadRx()
 * @brief: reads one received byte from the lpuart
 * @param: none
 * @return: the character received, is 0x00 if no character to read
 */
char LPUART_ReadRx(void){
100467a4:	b580      	push	{r7, lr}
100467a6:	b082      	sub	sp, #8
100467a8:	af00      	add	r7, sp, #0
	if(LPUARTrx.head != LPUARTrx.tail || LPUARTrx.full){
100467aa:	4b13      	ldr	r3, [pc, #76]	@ (100467f8 <LPUART_ReadRx+0x54>)
100467ac:	8c1a      	ldrh	r2, [r3, #32]
100467ae:	4b12      	ldr	r3, [pc, #72]	@ (100467f8 <LPUART_ReadRx+0x54>)
100467b0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
100467b2:	429a      	cmp	r2, r3
100467b4:	d104      	bne.n	100467c0 <LPUART_ReadRx+0x1c>
100467b6:	4b10      	ldr	r3, [pc, #64]	@ (100467f8 <LPUART_ReadRx+0x54>)
100467b8:	2224      	movs	r2, #36	@ 0x24
100467ba:	5c9b      	ldrb	r3, [r3, r2]
100467bc:	2b00      	cmp	r3, #0
100467be:	d016      	beq.n	100467ee <LPUART_ReadRx+0x4a>
		char data = LPUARTrx.data[LPUARTrx.tail];
100467c0:	4b0d      	ldr	r3, [pc, #52]	@ (100467f8 <LPUART_ReadRx+0x54>)
100467c2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
100467c4:	0019      	movs	r1, r3
100467c6:	1dfb      	adds	r3, r7, #7
100467c8:	4a0b      	ldr	r2, [pc, #44]	@ (100467f8 <LPUART_ReadRx+0x54>)
100467ca:	5c52      	ldrb	r2, [r2, r1]
100467cc:	701a      	strb	r2, [r3, #0]
		LPUARTrx.tail++;
100467ce:	4b0a      	ldr	r3, [pc, #40]	@ (100467f8 <LPUART_ReadRx+0x54>)
100467d0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
100467d2:	3301      	adds	r3, #1
100467d4:	b29a      	uxth	r2, r3
100467d6:	4b08      	ldr	r3, [pc, #32]	@ (100467f8 <LPUART_ReadRx+0x54>)
100467d8:	845a      	strh	r2, [r3, #34]	@ 0x22
		LPUARTrx.tail %= LPUARTCIRCBUFFSIZE;
100467da:	4b07      	ldr	r3, [pc, #28]	@ (100467f8 <LPUART_ReadRx+0x54>)
100467dc:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
100467de:	221f      	movs	r2, #31
100467e0:	4013      	ands	r3, r2
100467e2:	b29a      	uxth	r2, r3
100467e4:	4b04      	ldr	r3, [pc, #16]	@ (100467f8 <LPUART_ReadRx+0x54>)
100467e6:	845a      	strh	r2, [r3, #34]	@ 0x22
		return data;
100467e8:	1dfb      	adds	r3, r7, #7
100467ea:	781b      	ldrb	r3, [r3, #0]
100467ec:	e000      	b.n	100467f0 <LPUART_ReadRx+0x4c>
	} else {
		return UARTFAILED;
100467ee:	2325      	movs	r3, #37	@ 0x25
	}

}
100467f0:	0018      	movs	r0, r3
100467f2:	46bd      	mov	sp, r7
100467f4:	b002      	add	sp, #8
100467f6:	bd80      	pop	{r7, pc}
100467f8:	2000215c 	.word	0x2000215c

100467fc <LPUART_WriteTx>:
 * @function: UART_WriteTx()
 * @brief: sends one byte through the lpuart
 * @param: none
 * @return: none
 */
char LPUART_WriteTx(char input){
100467fc:	b580      	push	{r7, lr}
100467fe:	b082      	sub	sp, #8
10046800:	af00      	add	r7, sp, #0
10046802:	0002      	movs	r2, r0
10046804:	1dfb      	adds	r3, r7, #7
10046806:	701a      	strb	r2, [r3, #0]
	if(!LPUARTtx.full){
10046808:	4b1f      	ldr	r3, [pc, #124]	@ (10046888 <LPUART_WriteTx+0x8c>)
1004680a:	2224      	movs	r2, #36	@ 0x24
1004680c:	5c9b      	ldrb	r3, [r3, r2]
1004680e:	2201      	movs	r2, #1
10046810:	4053      	eors	r3, r2
10046812:	b2db      	uxtb	r3, r3
10046814:	2b00      	cmp	r3, #0
10046816:	d031      	beq.n	1004687c <LPUART_WriteTx+0x80>
		if(LPUARTtx.head == LPUARTtx.tail && (hlpuart1.Instance->ISR & USART_ISR_TXE_TXFNF_Msk)){
10046818:	4b1b      	ldr	r3, [pc, #108]	@ (10046888 <LPUART_WriteTx+0x8c>)
1004681a:	8c1a      	ldrh	r2, [r3, #32]
1004681c:	4b1a      	ldr	r3, [pc, #104]	@ (10046888 <LPUART_WriteTx+0x8c>)
1004681e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046820:	429a      	cmp	r2, r3
10046822:	d10b      	bne.n	1004683c <LPUART_WriteTx+0x40>
10046824:	4b19      	ldr	r3, [pc, #100]	@ (1004688c <LPUART_WriteTx+0x90>)
10046826:	681b      	ldr	r3, [r3, #0]
10046828:	69db      	ldr	r3, [r3, #28]
1004682a:	2280      	movs	r2, #128	@ 0x80
1004682c:	4013      	ands	r3, r2
1004682e:	d005      	beq.n	1004683c <LPUART_WriteTx+0x40>
			hlpuart1.Instance->TDR = input;
10046830:	4b16      	ldr	r3, [pc, #88]	@ (1004688c <LPUART_WriteTx+0x90>)
10046832:	681b      	ldr	r3, [r3, #0]
10046834:	1dfa      	adds	r2, r7, #7
10046836:	7812      	ldrb	r2, [r2, #0]
10046838:	629a      	str	r2, [r3, #40]	@ 0x28
1004683a:	e01d      	b.n	10046878 <LPUART_WriteTx+0x7c>
		} else {
			LPUARTtx.data[LPUARTtx.head] = input;
1004683c:	4b12      	ldr	r3, [pc, #72]	@ (10046888 <LPUART_WriteTx+0x8c>)
1004683e:	8c1b      	ldrh	r3, [r3, #32]
10046840:	0019      	movs	r1, r3
10046842:	4b11      	ldr	r3, [pc, #68]	@ (10046888 <LPUART_WriteTx+0x8c>)
10046844:	1dfa      	adds	r2, r7, #7
10046846:	7812      	ldrb	r2, [r2, #0]
10046848:	545a      	strb	r2, [r3, r1]
			LPUARTtx.head++;
1004684a:	4b0f      	ldr	r3, [pc, #60]	@ (10046888 <LPUART_WriteTx+0x8c>)
1004684c:	8c1b      	ldrh	r3, [r3, #32]
1004684e:	3301      	adds	r3, #1
10046850:	b29a      	uxth	r2, r3
10046852:	4b0d      	ldr	r3, [pc, #52]	@ (10046888 <LPUART_WriteTx+0x8c>)
10046854:	841a      	strh	r2, [r3, #32]
			LPUARTtx.head %= LPUARTCIRCBUFFSIZE;
10046856:	4b0c      	ldr	r3, [pc, #48]	@ (10046888 <LPUART_WriteTx+0x8c>)
10046858:	8c1b      	ldrh	r3, [r3, #32]
1004685a:	221f      	movs	r2, #31
1004685c:	4013      	ands	r3, r2
1004685e:	b29a      	uxth	r2, r3
10046860:	4b09      	ldr	r3, [pc, #36]	@ (10046888 <LPUART_WriteTx+0x8c>)
10046862:	841a      	strh	r2, [r3, #32]
			if(LPUARTtx.head == LPUARTtx.tail){
10046864:	4b08      	ldr	r3, [pc, #32]	@ (10046888 <LPUART_WriteTx+0x8c>)
10046866:	8c1a      	ldrh	r2, [r3, #32]
10046868:	4b07      	ldr	r3, [pc, #28]	@ (10046888 <LPUART_WriteTx+0x8c>)
1004686a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
1004686c:	429a      	cmp	r2, r3
1004686e:	d103      	bne.n	10046878 <LPUART_WriteTx+0x7c>
				LPUARTtx.full = true;
10046870:	4b05      	ldr	r3, [pc, #20]	@ (10046888 <LPUART_WriteTx+0x8c>)
10046872:	2224      	movs	r2, #36	@ 0x24
10046874:	2101      	movs	r1, #1
10046876:	5499      	strb	r1, [r3, r2]
			}
		}
		return UARTSUCCESS;
10046878:	2300      	movs	r3, #0
1004687a:	e000      	b.n	1004687e <LPUART_WriteTx+0x82>
	} else {
		return UARTFAILED;
1004687c:	2325      	movs	r3, #37	@ 0x25
	}
}
1004687e:	0018      	movs	r0, r3
10046880:	46bd      	mov	sp, r7
10046882:	b002      	add	sp, #8
10046884:	bd80      	pop	{r7, pc}
10046886:	46c0      	nop			@ (mov r8, r8)
10046888:	20002134 	.word	0x20002134
1004688c:	20002068 	.word	0x20002068

10046890 <USART_ReadRx>:
 * @function: USART_ReadRx()
 * @brief: reads one received byte from the usart
 * @param: none
 * @return: the character received, 0x25 (NAK) if no character to read
 */
char USART_ReadRx(void){
10046890:	b580      	push	{r7, lr}
10046892:	af00      	add	r7, sp, #0
		return data;
	} else {
		return UARTFAILED;
	}
#else
	return UARTFAILED;
10046894:	2325      	movs	r3, #37	@ 0x25
#endif
}
10046896:	0018      	movs	r0, r3
10046898:	46bd      	mov	sp, r7
1004689a:	bd80      	pop	{r7, pc}

1004689c <USART_WriteTx>:
 * @function: USART_WriteTx()
 * @brief: sends one byte through the usart
 * @param: input, character to be sent
 * @return: status, 0x00 if success,  0x25 (NAK) if failed,
 */
char USART_WriteTx(char input){
1004689c:	b580      	push	{r7, lr}
1004689e:	b082      	sub	sp, #8
100468a0:	af00      	add	r7, sp, #0
100468a2:	0002      	movs	r2, r0
100468a4:	1dfb      	adds	r3, r7, #7
100468a6:	701a      	strb	r2, [r3, #0]
	if (APP_BLE_Get_Server_Connection_Status() == APP_BLE_CONNECTED_SERVER){
100468a8:	f00b faba 	bl	10051e20 <APP_BLE_Get_Server_Connection_Status>
100468ac:	0003      	movs	r3, r0
100468ae:	2b02      	cmp	r3, #2
100468b0:	d104      	bne.n	100468bc <USART_WriteTx+0x20>
		BLUETOOTH_WriteBuffer(input);
100468b2:	1dfb      	adds	r3, r7, #7
100468b4:	781b      	ldrb	r3, [r3, #0]
100468b6:	0018      	movs	r0, r3
100468b8:	f7fb f89c 	bl	100419f4 <BLUETOOTH_WriteBuffer>
		return UARTSUCCESS;
	} else {
		return UARTFAILED;
	}
#else
	return UARTFAILED;
100468bc:	2325      	movs	r3, #37	@ 0x25
#endif
}
100468be:	0018      	movs	r0, r3
100468c0:	46bd      	mov	sp, r7
100468c2:	b002      	add	sp, #8
100468c4:	bd80      	pop	{r7, pc}

100468c6 <USART_TxEmpty>:
 * @function: USART_TxEmpty()
 * @brief: returns if the Tx  buffer is empty
 * @param: none
 * @return: status, 0x00 if not empty,  0x01 if empty,
 */
uint8_t USART_TxEmpty(void){
100468c6:	b580      	push	{r7, lr}
100468c8:	af00      	add	r7, sp, #0
#if USEUSART == 1
	return (USARTtx.head == USARTtx.tail) && !USARTtx.full;
#else
	return 00;
100468ca:	2300      	movs	r3, #0
#endif
}
100468cc:	0018      	movs	r0, r3
100468ce:	46bd      	mov	sp, r7
100468d0:	bd80      	pop	{r7, pc}

100468d2 <MX_APPE_Init>:
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/

uint32_t MX_APPE_Init(void *p_param)
{
100468d2:	b580      	push	{r7, lr}
100468d4:	b082      	sub	sp, #8
100468d6:	af00      	add	r7, sp, #0
100468d8:	6078      	str	r0, [r7, #4]

  UNUSED(p_param);

  APP_DEBUG_SIGNAL_SET(APP_APPE_INIT);
100468da:	2000      	movs	r0, #0
100468dc:	f00d fcae 	bl	1005423c <APP_DEBUG_SIGNAL_SET>

  /* USER CODE BEGIN APPE_Init_1 */

  /* USER CODE END APPE_Init_1 */

  if (HW_RNG_Init() != HW_RNG_SUCCESS)
100468e0:	f008 fec4 	bl	1004f66c <HW_RNG_Init>
100468e4:	1e03      	subs	r3, r0, #0
100468e6:	d001      	beq.n	100468ec <MX_APPE_Init+0x1a>
  {
    Error_Handler();
100468e8:	f7fb f9c6 	bl	10041c78 <Error_Handler>
  }

  /* Init the AES block */
  HW_AES_Init();
100468ec:	f008 fd62 	bl	1004f3b4 <HW_AES_Init>
  HW_PKA_Init();
100468f0:	f008 fe54 	bl	1004f59c <HW_PKA_Init>
  APP_BLE_Init();
100468f4:	f00b f8ce 	bl	10051a94 <APP_BLE_Init>
  UTIL_LPM_Init();
#endif /* CFG_LPM_SUPPORTED */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
  APP_DEBUG_SIGNAL_RESET(APP_APPE_INIT);
100468f8:	2000      	movs	r0, #0
100468fa:	f00d fca9 	bl	10054250 <APP_DEBUG_SIGNAL_RESET>
  return BLE_STATUS_SUCCESS;
100468fe:	2300      	movs	r3, #0
}
10046900:	0018      	movs	r0, r3
10046902:	46bd      	mov	sp, r7
10046904:	b002      	add	sp, #8
10046906:	bd80      	pop	{r7, pc}

10046908 <MX_APPE_Process>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void MX_APPE_Process(void)
{
10046908:	b580      	push	{r7, lr}
1004690a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
1004690c:	2301      	movs	r3, #1
1004690e:	425b      	negs	r3, r3
10046910:	0018      	movs	r0, r3
10046912:	f00d fcad 	bl	10054270 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
10046916:	46c0      	nop			@ (mov r8, r8)
10046918:	46bd      	mov	sp, r7
1004691a:	bd80      	pop	{r7, pc}

1004691c <UTIL_SEQ_PreIdle>:
void UTIL_SEQ_PreIdle( void )
{
1004691c:	b580      	push	{r7, lr}
1004691e:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  /* USER CODE BEGIN UTIL_SEQ_PREIDLE */

  /* USER CODE END UTIL_SEQ_PREIDLE */
#endif /* CFG_LPM_SUPPORTED */
  return;
10046920:	46c0      	nop			@ (mov r8, r8)
}
10046922:	46bd      	mov	sp, r7
10046924:	bd80      	pop	{r7, pc}

10046926 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
10046926:	b580      	push	{r7, lr}
10046928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_IDLE_END */

  /* USER CODE END UTIL_SEQ_IDLE_END */
  }
#endif /* CFG_LPM_SUPPORTED */
}
1004692a:	46c0      	nop			@ (mov r8, r8)
1004692c:	46bd      	mov	sp, r7
1004692e:	bd80      	pop	{r7, pc}

10046930 <LL_RADIO_TIMER_GetAbsoluteTime>:
  * @brief  Get the Absolute Time of the wakeup timer (Granularity unit is 16 x slow clock period).
  * @param  WAKEUPx Radio Timer instance
  * @retval Absolute Time of Wakeup Timer
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP_TypeDef *WAKEUPx)
{
10046930:	b580      	push	{r7, lr}
10046932:	b082      	sub	sp, #8
10046934:	af00      	add	r7, sp, #0
10046936:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
10046938:	687b      	ldr	r3, [r7, #4]
1004693a:	691b      	ldr	r3, [r3, #16]
}
1004693c:	0018      	movs	r0, r3
1004693e:	46bd      	mov	sp, r7
10046940:	b002      	add	sp, #8
10046942:	bd80      	pop	{r7, pc}

10046944 <LL_APB2_GRP1_EnableClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
10046944:	b580      	push	{r7, lr}
10046946:	b084      	sub	sp, #16
10046948:	af00      	add	r7, sp, #0
1004694a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
1004694c:	4b07      	ldr	r3, [pc, #28]	@ (1004696c <LL_APB2_GRP1_EnableClock+0x28>)
1004694e:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10046950:	4b06      	ldr	r3, [pc, #24]	@ (1004696c <LL_APB2_GRP1_EnableClock+0x28>)
10046952:	687a      	ldr	r2, [r7, #4]
10046954:	430a      	orrs	r2, r1
10046956:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10046958:	4b04      	ldr	r3, [pc, #16]	@ (1004696c <LL_APB2_GRP1_EnableClock+0x28>)
1004695a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004695c:	687a      	ldr	r2, [r7, #4]
1004695e:	4013      	ands	r3, r2
10046960:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10046962:	68fb      	ldr	r3, [r7, #12]
}
10046964:	46c0      	nop			@ (mov r8, r8)
10046966:	46bd      	mov	sp, r7
10046968:	b004      	add	sp, #16
1004696a:	bd80      	pop	{r7, pc}
1004696c:	48400000 	.word	0x48400000

10046970 <LL_APB2_GRP1_IsEnabledClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval uint32_t
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
10046970:	b580      	push	{r7, lr}
10046972:	b082      	sub	sp, #8
10046974:	af00      	add	r7, sp, #0
10046976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10046978:	4b06      	ldr	r3, [pc, #24]	@ (10046994 <LL_APB2_GRP1_IsEnabledClock+0x24>)
1004697a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004697c:	687a      	ldr	r2, [r7, #4]
1004697e:	4013      	ands	r3, r2
10046980:	687a      	ldr	r2, [r7, #4]
10046982:	429a      	cmp	r2, r3
10046984:	d101      	bne.n	1004698a <LL_APB2_GRP1_IsEnabledClock+0x1a>
10046986:	2301      	movs	r3, #1
10046988:	e000      	b.n	1004698c <LL_APB2_GRP1_IsEnabledClock+0x1c>
1004698a:	2300      	movs	r3, #0
}
1004698c:	0018      	movs	r0, r3
1004698e:	46bd      	mov	sp, r7
10046990:	b002      	add	sp, #8
10046992:	bd80      	pop	{r7, pc}
10046994:	48400000 	.word	0x48400000

10046998 <LL_APB2_GRP1_ForceReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
10046998:	b580      	push	{r7, lr}
1004699a:	b082      	sub	sp, #8
1004699c:	af00      	add	r7, sp, #0
1004699e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
100469a0:	4b04      	ldr	r3, [pc, #16]	@ (100469b4 <LL_APB2_GRP1_ForceReset+0x1c>)
100469a2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
100469a4:	4b03      	ldr	r3, [pc, #12]	@ (100469b4 <LL_APB2_GRP1_ForceReset+0x1c>)
100469a6:	687a      	ldr	r2, [r7, #4]
100469a8:	430a      	orrs	r2, r1
100469aa:	641a      	str	r2, [r3, #64]	@ 0x40
}
100469ac:	46c0      	nop			@ (mov r8, r8)
100469ae:	46bd      	mov	sp, r7
100469b0:	b002      	add	sp, #8
100469b2:	bd80      	pop	{r7, pc}
100469b4:	48400000 	.word	0x48400000

100469b8 <LL_APB2_GRP1_ReleaseReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
100469b8:	b580      	push	{r7, lr}
100469ba:	b082      	sub	sp, #8
100469bc:	af00      	add	r7, sp, #0
100469be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
100469c0:	4b05      	ldr	r3, [pc, #20]	@ (100469d8 <LL_APB2_GRP1_ReleaseReset+0x20>)
100469c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
100469c4:	687b      	ldr	r3, [r7, #4]
100469c6:	43d9      	mvns	r1, r3
100469c8:	4b03      	ldr	r3, [pc, #12]	@ (100469d8 <LL_APB2_GRP1_ReleaseReset+0x20>)
100469ca:	400a      	ands	r2, r1
100469cc:	641a      	str	r2, [r3, #64]	@ 0x40
}
100469ce:	46c0      	nop			@ (mov r8, r8)
100469d0:	46bd      	mov	sp, r7
100469d2:	b002      	add	sp, #8
100469d4:	bd80      	pop	{r7, pc}
100469d6:	46c0      	nop			@ (mov r8, r8)
100469d8:	48400000 	.word	0x48400000

100469dc <main>:
 * @author Caitlin Bonesio
 *
 */
#include "FLASH.h"
int main(void)
{
100469dc:	b580      	push	{r7, lr}
100469de:	b086      	sub	sp, #24
100469e0:	af00      	add	r7, sp, #0

	//MCU Configuration--------------------------------------------------------
	if( BOARD_Init() != INIT_OK){
100469e2:	f7fb f91f 	bl	10041c24 <BOARD_Init>
100469e6:	0003      	movs	r3, r0
100469e8:	2b01      	cmp	r3, #1
100469ea:	d001      	beq.n	100469f0 <main+0x14>
		BOARD_CrashHandler();
100469ec:	f7fb f93e 	bl	10041c6c <BOARD_CrashHandler>
	}
    BSP_LED_Init(LED_BLUE);
100469f0:	2000      	movs	r0, #0
100469f2:	f000 fe17 	bl	10047624 <BSP_LED_Init>
    BSP_LED_Init(LED_RED);
100469f6:	2002      	movs	r0, #2
100469f8:	f000 fe14 	bl	10047624 <BSP_LED_Init>

	MX_RADIO_Init();
100469fc:	f000 f89a 	bl	10046b34 <MX_RADIO_Init>
	MX_RADIO_TIMER_Init();
10046a00:	f000 f8b6 	bl	10046b70 <MX_RADIO_TIMER_Init>
	MX_RNG_Init();
10046a04:	f000 f8ea 	bl	10046bdc <MX_RNG_Init>
	MX_PKA_Init();
10046a08:	f000 f880 	bl	10046b0c <MX_PKA_Init>
	//Initialize BLE middleware
	MX_APPE_Init(NULL);
10046a0c:	2000      	movs	r0, #0
10046a0e:	f7ff ff60 	bl	100468d2 <MX_APPE_Init>


	BLUETOOTH_BufferInit();
10046a12:	f7fa ffd7 	bl	100419c4 <BLUETOOTH_BufferInit>
	// Initialize all configured peripherals
	UARTs_Init();
10046a16:	f7ff fe41 	bl	1004669c <UARTs_Init>
	//Initialize all modules
	for(int i = 0; i < EVENTLISTSIZE; i++){
10046a1a:	2300      	movs	r3, #0
10046a1c:	617b      	str	r3, [r7, #20]
10046a1e:	e013      	b.n	10046a48 <main+0x6c>
		EventQueues[i] = FIFO_Create();
10046a20:	f7fd fb04 	bl	1004402c <FIFO_Create>
10046a24:	0001      	movs	r1, r0
10046a26:	4b35      	ldr	r3, [pc, #212]	@ (10046afc <main+0x120>)
10046a28:	697a      	ldr	r2, [r7, #20]
10046a2a:	0092      	lsls	r2, r2, #2
10046a2c:	50d1      	str	r1, [r2, r3]
		if ((*InitList[i])(EventQueues[i]) == EVENT_ERROR){
10046a2e:	4b34      	ldr	r3, [pc, #208]	@ (10046b00 <main+0x124>)
10046a30:	697a      	ldr	r2, [r7, #20]
10046a32:	0092      	lsls	r2, r2, #2
10046a34:	58d3      	ldr	r3, [r2, r3]
10046a36:	4a31      	ldr	r2, [pc, #196]	@ (10046afc <main+0x120>)
10046a38:	6979      	ldr	r1, [r7, #20]
10046a3a:	0089      	lsls	r1, r1, #2
10046a3c:	588a      	ldr	r2, [r1, r2]
10046a3e:	0010      	movs	r0, r2
10046a40:	4798      	blx	r3
	for(int i = 0; i < EVENTLISTSIZE; i++){
10046a42:	697b      	ldr	r3, [r7, #20]
10046a44:	3301      	adds	r3, #1
10046a46:	617b      	str	r3, [r7, #20]
10046a48:	697b      	ldr	r3, [r7, #20]
10046a4a:	2b03      	cmp	r3, #3
10046a4c:	dde8      	ble.n	10046a20 <main+0x44>
			return 0;//We've crashed
		}
	}
	while(1){
		//run all module event checkers
		for(int i = 0; i < EVENTLISTSIZE; i++){
10046a4e:	2300      	movs	r3, #0
10046a50:	613b      	str	r3, [r7, #16]
10046a52:	e012      	b.n	10046a7a <main+0x9e>
			//collect updates from the updaters
			if (((*UpdateList[i])()).status == EVENT_ERROR){
10046a54:	4b2b      	ldr	r3, [pc, #172]	@ (10046b04 <main+0x128>)
10046a56:	693a      	ldr	r2, [r7, #16]
10046a58:	0092      	lsls	r2, r2, #2
10046a5a:	58d3      	ldr	r3, [r2, r3]
10046a5c:	4798      	blx	r3
10046a5e:	0003      	movs	r3, r0
10046a60:	001a      	movs	r2, r3
10046a62:	1d3b      	adds	r3, r7, #4
10046a64:	601a      	str	r2, [r3, #0]
10046a66:	1d3b      	adds	r3, r7, #4
10046a68:	781b      	ldrb	r3, [r3, #0]
10046a6a:	b25b      	sxtb	r3, r3
10046a6c:	3301      	adds	r3, #1
10046a6e:	d101      	bne.n	10046a74 <main+0x98>
				BOARD_CrashHandler();//We've crashed
10046a70:	f7fb f8fc 	bl	10041c6c <BOARD_CrashHandler>
		for(int i = 0; i < EVENTLISTSIZE; i++){
10046a74:	693b      	ldr	r3, [r7, #16]
10046a76:	3301      	adds	r3, #1
10046a78:	613b      	str	r3, [r7, #16]
10046a7a:	693b      	ldr	r3, [r7, #16]
10046a7c:	2b03      	cmp	r3, #3
10046a7e:	dde9      	ble.n	10046a54 <main+0x78>
			}
		}
		uint8_t done = 0;
10046a80:	230f      	movs	r3, #15
10046a82:	18fb      	adds	r3, r7, r3
10046a84:	2200      	movs	r2, #0
10046a86:	701a      	strb	r2, [r3, #0]
		while(!done){
10046a88:	e030      	b.n	10046aec <main+0x110>
			//run all module event handlers
			done = 1;//assume we're done
10046a8a:	230f      	movs	r3, #15
10046a8c:	18fb      	adds	r3, r7, r3
10046a8e:	2201      	movs	r2, #1
10046a90:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < EVENTLISTSIZE; i++){
10046a92:	2300      	movs	r3, #0
10046a94:	60bb      	str	r3, [r7, #8]
10046a96:	e026      	b.n	10046ae6 <main+0x10a>
				Event_t event = FIFO_Dequeue(EventQueues[i]);
10046a98:	4b18      	ldr	r3, [pc, #96]	@ (10046afc <main+0x120>)
10046a9a:	68ba      	ldr	r2, [r7, #8]
10046a9c:	0092      	lsls	r2, r2, #2
10046a9e:	58d3      	ldr	r3, [r2, r3]
10046aa0:	0018      	movs	r0, r3
10046aa2:	f7fd fb36 	bl	10044112 <FIFO_Dequeue>
10046aa6:	0003      	movs	r3, r0
10046aa8:	001a      	movs	r2, r3
10046aaa:	003b      	movs	r3, r7
10046aac:	601a      	str	r2, [r3, #0]
				if(FIFO_GetSize(EventQueues[i]) != 0){
10046aae:	4b13      	ldr	r3, [pc, #76]	@ (10046afc <main+0x120>)
10046ab0:	68ba      	ldr	r2, [r7, #8]
10046ab2:	0092      	lsls	r2, r2, #2
10046ab4:	58d3      	ldr	r3, [r2, r3]
10046ab6:	0018      	movs	r0, r3
10046ab8:	f7fd fb7d 	bl	100441b6 <FIFO_GetSize>
10046abc:	1e03      	subs	r3, r0, #0
10046abe:	d003      	beq.n	10046ac8 <main+0xec>
					done = 0;//if any queue is not empty, we are not done
10046ac0:	230f      	movs	r3, #15
10046ac2:	18fb      	adds	r3, r7, r3
10046ac4:	2200      	movs	r2, #0
10046ac6:	701a      	strb	r2, [r3, #0]
				}
				if(event.status != EVENT_NONE){//If there is an update
10046ac8:	003b      	movs	r3, r7
10046aca:	781b      	ldrb	r3, [r3, #0]
10046acc:	b25b      	sxtb	r3, r3
10046ace:	2b00      	cmp	r3, #0
10046ad0:	d006      	beq.n	10046ae0 <main+0x104>
					if ((*HandlerList[i])(event) == EVENT_ERROR){//pass the updates to the handlers
10046ad2:	4b0d      	ldr	r3, [pc, #52]	@ (10046b08 <main+0x12c>)
10046ad4:	68ba      	ldr	r2, [r7, #8]
10046ad6:	0092      	lsls	r2, r2, #2
10046ad8:	58d2      	ldr	r2, [r2, r3]
10046ada:	003b      	movs	r3, r7
10046adc:	6818      	ldr	r0, [r3, #0]
10046ade:	4790      	blx	r2
			for(int i = 0; i < EVENTLISTSIZE; i++){
10046ae0:	68bb      	ldr	r3, [r7, #8]
10046ae2:	3301      	adds	r3, #1
10046ae4:	60bb      	str	r3, [r7, #8]
10046ae6:	68bb      	ldr	r3, [r7, #8]
10046ae8:	2b03      	cmp	r3, #3
10046aea:	ddd5      	ble.n	10046a98 <main+0xbc>
		while(!done){
10046aec:	230f      	movs	r3, #15
10046aee:	18fb      	adds	r3, r7, r3
10046af0:	781b      	ldrb	r3, [r3, #0]
10046af2:	2b00      	cmp	r3, #0
10046af4:	d0c9      	beq.n	10046a8a <main+0xae>
					}
				}
			}
		}
		//Run Bluetooth Middleware
	    MX_APPE_Process();
10046af6:	f7ff ff07 	bl	10046908 <MX_APPE_Process>
	while(1){
10046afa:	e7a8      	b.n	10046a4e <main+0x72>
10046afc:	20002184 	.word	0x20002184
10046b00:	200026e4 	.word	0x200026e4
10046b04:	200026f4 	.word	0x200026f4
10046b08:	20002704 	.word	0x20002704

10046b0c <MX_PKA_Init>:




static void MX_PKA_Init(void)
{
10046b0c:	b580      	push	{r7, lr}
10046b0e:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
10046b10:	4b06      	ldr	r3, [pc, #24]	@ (10046b2c <MX_PKA_Init+0x20>)
10046b12:	4a07      	ldr	r2, [pc, #28]	@ (10046b30 <MX_PKA_Init+0x24>)
10046b14:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
10046b16:	4b05      	ldr	r3, [pc, #20]	@ (10046b2c <MX_PKA_Init+0x20>)
10046b18:	0018      	movs	r0, r3
10046b1a:	f003 fbf1 	bl	1004a300 <HAL_PKA_Init>
10046b1e:	1e03      	subs	r3, r0, #0
10046b20:	d001      	beq.n	10046b26 <MX_PKA_Init+0x1a>
  {
    Error_Handler();
10046b22:	f7fb f8a9 	bl	10041c78 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
10046b26:	46c0      	nop			@ (mov r8, r8)
10046b28:	46bd      	mov	sp, r7
10046b2a:	bd80      	pop	{r7, pc}
10046b2c:	20002194 	.word	0x20002194
10046b30:	48300000 	.word	0x48300000

10046b34 <MX_RADIO_Init>:
  * @brief RADIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_Init(void)
{
10046b34:	b580      	push	{r7, lr}
10046b36:	b082      	sub	sp, #8
10046b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_Init 0 */
//
  /* USER CODE END RADIO_Init 0 */

  RADIO_HandleTypeDef hradio = {0};
10046b3a:	2300      	movs	r3, #0
10046b3c:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN RADIO_Init 1 */
//
  /* USER CODE END RADIO_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10046b3e:	2001      	movs	r0, #1
10046b40:	f7ff ff16 	bl	10046970 <LL_APB2_GRP1_IsEnabledClock>
10046b44:	1e03      	subs	r3, r0, #0
10046b46:	d108      	bne.n	10046b5a <MX_RADIO_Init+0x26>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
10046b48:	2001      	movs	r0, #1
10046b4a:	f7ff ff25 	bl	10046998 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10046b4e:	2001      	movs	r0, #1
10046b50:	f7ff ff32 	bl	100469b8 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
10046b54:	2001      	movs	r0, #1
10046b56:	f7ff fef5 	bl	10046944 <LL_APB2_GRP1_EnableClock>
  }
  hradio.Instance = RADIO;
10046b5a:	23c0      	movs	r3, #192	@ 0xc0
10046b5c:	05db      	lsls	r3, r3, #23
10046b5e:	607b      	str	r3, [r7, #4]
  HAL_RADIO_Init(&hradio);
10046b60:	1d3b      	adds	r3, r7, #4
10046b62:	0018      	movs	r0, r3
10046b64:	f003 fe2a 	bl	1004a7bc <HAL_RADIO_Init>
  /* USER CODE BEGIN RADIO_Init 2 */
//
  /* USER CODE END RADIO_Init 2 */

}
10046b68:	46c0      	nop			@ (mov r8, r8)
10046b6a:	46bd      	mov	sp, r7
10046b6c:	b002      	add	sp, #8
10046b6e:	bd80      	pop	{r7, pc}

10046b70 <MX_RADIO_TIMER_Init>:
  * @brief RADIO_TIMER Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_TIMER_Init(void)
{
10046b70:	b580      	push	{r7, lr}
10046b72:	b082      	sub	sp, #8
10046b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_TIMER_Init 0 */
//
  /* USER CODE END RADIO_TIMER_Init 0 */

  RADIO_TIMER_InitTypeDef RADIO_TIMER_InitStruct = {0};
10046b76:	003b      	movs	r3, r7
10046b78:	0018      	movs	r0, r3
10046b7a:	2308      	movs	r3, #8
10046b7c:	001a      	movs	r2, r3
10046b7e:	2100      	movs	r1, #0
10046b80:	f020 ff6c 	bl	10067a5c <memset>

  /* USER CODE BEGIN RADIO_TIMER_Init 1 */
//
  /* USER CODE END RADIO_TIMER_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10046b84:	2001      	movs	r0, #1
10046b86:	f7ff fef3 	bl	10046970 <LL_APB2_GRP1_IsEnabledClock>
10046b8a:	1e03      	subs	r3, r0, #0
10046b8c:	d108      	bne.n	10046ba0 <MX_RADIO_TIMER_Init+0x30>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
10046b8e:	2001      	movs	r0, #1
10046b90:	f7ff ff02 	bl	10046998 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10046b94:	2001      	movs	r0, #1
10046b96:	f7ff ff0f 	bl	100469b8 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
10046b9a:	2001      	movs	r0, #1
10046b9c:	f7ff fed2 	bl	10046944 <LL_APB2_GRP1_EnableClock>
  }
  /* Wait to be sure that the Radio Timer is active */
  while(LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP) < 0x10);
10046ba0:	46c0      	nop			@ (mov r8, r8)
10046ba2:	4b0c      	ldr	r3, [pc, #48]	@ (10046bd4 <MX_RADIO_TIMER_Init+0x64>)
10046ba4:	0018      	movs	r0, r3
10046ba6:	f7ff fec3 	bl	10046930 <LL_RADIO_TIMER_GetAbsoluteTime>
10046baa:	0003      	movs	r3, r0
10046bac:	2b0f      	cmp	r3, #15
10046bae:	d9f8      	bls.n	10046ba2 <MX_RADIO_TIMER_Init+0x32>
  RADIO_TIMER_InitStruct.XTAL_StartupTime = 320;
10046bb0:	003b      	movs	r3, r7
10046bb2:	22a0      	movs	r2, #160	@ 0xa0
10046bb4:	0052      	lsls	r2, r2, #1
10046bb6:	801a      	strh	r2, [r3, #0]
  RADIO_TIMER_InitStruct.enableInitialCalibration = TRUE;
10046bb8:	003b      	movs	r3, r7
10046bba:	2201      	movs	r2, #1
10046bbc:	709a      	strb	r2, [r3, #2]
  RADIO_TIMER_InitStruct.periodicCalibrationInterval = 10000;
10046bbe:	003b      	movs	r3, r7
10046bc0:	4a05      	ldr	r2, [pc, #20]	@ (10046bd8 <MX_RADIO_TIMER_Init+0x68>)
10046bc2:	605a      	str	r2, [r3, #4]
  HAL_RADIO_TIMER_Init(&RADIO_TIMER_InitStruct);
10046bc4:	003b      	movs	r3, r7
10046bc6:	0018      	movs	r0, r3
10046bc8:	f004 fb1e 	bl	1004b208 <HAL_RADIO_TIMER_Init>
  /* USER CODE BEGIN RADIO_TIMER_Init 2 */
//
  /* USER CODE END RADIO_TIMER_Init 2 */

}
10046bcc:	46c0      	nop			@ (mov r8, r8)
10046bce:	46bd      	mov	sp, r7
10046bd0:	b002      	add	sp, #8
10046bd2:	bd80      	pop	{r7, pc}
10046bd4:	60001800 	.word	0x60001800
10046bd8:	00002710 	.word	0x00002710

10046bdc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
10046bdc:	b580      	push	{r7, lr}
10046bde:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
10046be0:	4b06      	ldr	r3, [pc, #24]	@ (10046bfc <MX_RNG_Init+0x20>)
10046be2:	4a07      	ldr	r2, [pc, #28]	@ (10046c00 <MX_RNG_Init+0x24>)
10046be4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
10046be6:	4b05      	ldr	r3, [pc, #20]	@ (10046bfc <MX_RNG_Init+0x20>)
10046be8:	0018      	movs	r0, r3
10046bea:	f006 fb2d 	bl	1004d248 <HAL_RNG_Init>
10046bee:	1e03      	subs	r3, r0, #0
10046bf0:	d001      	beq.n	10046bf6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
10046bf2:	f7fb f841 	bl	10041c78 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
10046bf6:	46c0      	nop			@ (mov r8, r8)
10046bf8:	46bd      	mov	sp, r7
10046bfa:	bd80      	pop	{r7, pc}
10046bfc:	200021a0 	.word	0x200021a0
10046c00:	48600000 	.word	0x48600000

10046c04 <LL_AHB1_GRP1_EnableClock>:
{
10046c04:	b580      	push	{r7, lr}
10046c06:	b084      	sub	sp, #16
10046c08:	af00      	add	r7, sp, #0
10046c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10046c0c:	4b07      	ldr	r3, [pc, #28]	@ (10046c2c <LL_AHB1_GRP1_EnableClock+0x28>)
10046c0e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10046c10:	4b06      	ldr	r3, [pc, #24]	@ (10046c2c <LL_AHB1_GRP1_EnableClock+0x28>)
10046c12:	687a      	ldr	r2, [r7, #4]
10046c14:	430a      	orrs	r2, r1
10046c16:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10046c18:	4b04      	ldr	r3, [pc, #16]	@ (10046c2c <LL_AHB1_GRP1_EnableClock+0x28>)
10046c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10046c1c:	687a      	ldr	r2, [r7, #4]
10046c1e:	4013      	ands	r3, r2
10046c20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10046c22:	68fb      	ldr	r3, [r7, #12]
}
10046c24:	46c0      	nop			@ (mov r8, r8)
10046c26:	46bd      	mov	sp, r7
10046c28:	b004      	add	sp, #16
10046c2a:	bd80      	pop	{r7, pc}
10046c2c:	48400000 	.word	0x48400000

10046c30 <LL_APB0_GRP1_EnableClock>:
{
10046c30:	b580      	push	{r7, lr}
10046c32:	b084      	sub	sp, #16
10046c34:	af00      	add	r7, sp, #0
10046c36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
10046c38:	4b07      	ldr	r3, [pc, #28]	@ (10046c58 <LL_APB0_GRP1_EnableClock+0x28>)
10046c3a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
10046c3c:	4b06      	ldr	r3, [pc, #24]	@ (10046c58 <LL_APB0_GRP1_EnableClock+0x28>)
10046c3e:	687a      	ldr	r2, [r7, #4]
10046c40:	430a      	orrs	r2, r1
10046c42:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10046c44:	4b04      	ldr	r3, [pc, #16]	@ (10046c58 <LL_APB0_GRP1_EnableClock+0x28>)
10046c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10046c48:	687a      	ldr	r2, [r7, #4]
10046c4a:	4013      	ands	r3, r2
10046c4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10046c4e:	68fb      	ldr	r3, [r7, #12]
}
10046c50:	46c0      	nop			@ (mov r8, r8)
10046c52:	46bd      	mov	sp, r7
10046c54:	b004      	add	sp, #16
10046c56:	bd80      	pop	{r7, pc}
10046c58:	48400000 	.word	0x48400000

10046c5c <LL_APB1_GRP1_EnableClock>:
{
10046c5c:	b580      	push	{r7, lr}
10046c5e:	b084      	sub	sp, #16
10046c60:	af00      	add	r7, sp, #0
10046c62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
10046c64:	4b07      	ldr	r3, [pc, #28]	@ (10046c84 <LL_APB1_GRP1_EnableClock+0x28>)
10046c66:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10046c68:	4b06      	ldr	r3, [pc, #24]	@ (10046c84 <LL_APB1_GRP1_EnableClock+0x28>)
10046c6a:	687a      	ldr	r2, [r7, #4]
10046c6c:	430a      	orrs	r2, r1
10046c6e:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10046c70:	4b04      	ldr	r3, [pc, #16]	@ (10046c84 <LL_APB1_GRP1_EnableClock+0x28>)
10046c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10046c74:	687a      	ldr	r2, [r7, #4]
10046c76:	4013      	ands	r3, r2
10046c78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10046c7a:	68fb      	ldr	r3, [r7, #12]
}
10046c7c:	46c0      	nop			@ (mov r8, r8)
10046c7e:	46bd      	mov	sp, r7
10046c80:	b004      	add	sp, #16
10046c82:	bd80      	pop	{r7, pc}
10046c84:	48400000 	.word	0x48400000

10046c88 <LL_APB2_GRP1_EnableClock>:
{
10046c88:	b580      	push	{r7, lr}
10046c8a:	b084      	sub	sp, #16
10046c8c:	af00      	add	r7, sp, #0
10046c8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10046c90:	4b07      	ldr	r3, [pc, #28]	@ (10046cb0 <LL_APB2_GRP1_EnableClock+0x28>)
10046c92:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10046c94:	4b06      	ldr	r3, [pc, #24]	@ (10046cb0 <LL_APB2_GRP1_EnableClock+0x28>)
10046c96:	687a      	ldr	r2, [r7, #4]
10046c98:	430a      	orrs	r2, r1
10046c9a:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10046c9c:	4b04      	ldr	r3, [pc, #16]	@ (10046cb0 <LL_APB2_GRP1_EnableClock+0x28>)
10046c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10046ca0:	687a      	ldr	r2, [r7, #4]
10046ca2:	4013      	ands	r3, r2
10046ca4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10046ca6:	68fb      	ldr	r3, [r7, #12]
}
10046ca8:	46c0      	nop			@ (mov r8, r8)
10046caa:	46bd      	mov	sp, r7
10046cac:	b004      	add	sp, #16
10046cae:	bd80      	pop	{r7, pc}
10046cb0:	48400000 	.word	0x48400000

10046cb4 <LL_APB2_GRP1_IsEnabledClock>:
{
10046cb4:	b580      	push	{r7, lr}
10046cb6:	b082      	sub	sp, #8
10046cb8:	af00      	add	r7, sp, #0
10046cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10046cbc:	4b06      	ldr	r3, [pc, #24]	@ (10046cd8 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10046cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10046cc0:	687a      	ldr	r2, [r7, #4]
10046cc2:	4013      	ands	r3, r2
10046cc4:	687a      	ldr	r2, [r7, #4]
10046cc6:	429a      	cmp	r2, r3
10046cc8:	d101      	bne.n	10046cce <LL_APB2_GRP1_IsEnabledClock+0x1a>
10046cca:	2301      	movs	r3, #1
10046ccc:	e000      	b.n	10046cd0 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10046cce:	2300      	movs	r3, #0
}
10046cd0:	0018      	movs	r0, r3
10046cd2:	46bd      	mov	sp, r7
10046cd4:	b002      	add	sp, #8
10046cd6:	bd80      	pop	{r7, pc}
10046cd8:	48400000 	.word	0x48400000

10046cdc <LL_APB2_GRP1_ForceReset>:
{
10046cdc:	b580      	push	{r7, lr}
10046cde:	b082      	sub	sp, #8
10046ce0:	af00      	add	r7, sp, #0
10046ce2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10046ce4:	4b04      	ldr	r3, [pc, #16]	@ (10046cf8 <LL_APB2_GRP1_ForceReset+0x1c>)
10046ce6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10046ce8:	4b03      	ldr	r3, [pc, #12]	@ (10046cf8 <LL_APB2_GRP1_ForceReset+0x1c>)
10046cea:	687a      	ldr	r2, [r7, #4]
10046cec:	430a      	orrs	r2, r1
10046cee:	641a      	str	r2, [r3, #64]	@ 0x40
}
10046cf0:	46c0      	nop			@ (mov r8, r8)
10046cf2:	46bd      	mov	sp, r7
10046cf4:	b002      	add	sp, #8
10046cf6:	bd80      	pop	{r7, pc}
10046cf8:	48400000 	.word	0x48400000

10046cfc <LL_APB2_GRP1_ReleaseReset>:
{
10046cfc:	b580      	push	{r7, lr}
10046cfe:	b082      	sub	sp, #8
10046d00:	af00      	add	r7, sp, #0
10046d02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10046d04:	4b05      	ldr	r3, [pc, #20]	@ (10046d1c <LL_APB2_GRP1_ReleaseReset+0x20>)
10046d06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10046d08:	687b      	ldr	r3, [r7, #4]
10046d0a:	43d9      	mvns	r1, r3
10046d0c:	4b03      	ldr	r3, [pc, #12]	@ (10046d1c <LL_APB2_GRP1_ReleaseReset+0x20>)
10046d0e:	400a      	ands	r2, r1
10046d10:	641a      	str	r2, [r3, #64]	@ 0x40
}
10046d12:	46c0      	nop			@ (mov r8, r8)
10046d14:	46bd      	mov	sp, r7
10046d16:	b002      	add	sp, #8
10046d18:	bd80      	pop	{r7, pc}
10046d1a:	46c0      	nop			@ (mov r8, r8)
10046d1c:	48400000 	.word	0x48400000

10046d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10046d20:	b580      	push	{r7, lr}
10046d22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */
//
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
10046d24:	2380      	movs	r3, #128	@ 0x80
10046d26:	005b      	lsls	r3, r3, #1
10046d28:	0018      	movs	r0, r3
10046d2a:	f7ff ff81 	bl	10046c30 <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
//
  /* USER CODE END MspInit 1 */
}
10046d2e:	46c0      	nop			@ (mov r8, r8)
10046d30:	46bd      	mov	sp, r7
10046d32:	bd80      	pop	{r7, pc}

10046d34 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
10046d34:	b590      	push	{r4, r7, lr}
10046d36:	b089      	sub	sp, #36	@ 0x24
10046d38:	af00      	add	r7, sp, #0
10046d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10046d3c:	240c      	movs	r4, #12
10046d3e:	193b      	adds	r3, r7, r4
10046d40:	0018      	movs	r0, r3
10046d42:	2314      	movs	r3, #20
10046d44:	001a      	movs	r2, r3
10046d46:	2100      	movs	r1, #0
10046d48:	f020 fe88 	bl	10067a5c <memset>
  if(hi2c->Instance==I2C1)
10046d4c:	687b      	ldr	r3, [r7, #4]
10046d4e:	681a      	ldr	r2, [r3, #0]
10046d50:	2382      	movs	r3, #130	@ 0x82
10046d52:	05db      	lsls	r3, r3, #23
10046d54:	429a      	cmp	r2, r3
10046d56:	d147      	bne.n	10046de8 <HAL_I2C_MspInit+0xb4>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
10046d58:	2004      	movs	r0, #4
10046d5a:	f7ff ff53 	bl	10046c04 <LL_AHB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
10046d5e:	2008      	movs	r0, #8
10046d60:	f7ff ff50 	bl	10046c04 <LL_AHB1_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PA1     ------> I2C1_SDA
    PA0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
10046d64:	193b      	adds	r3, r7, r4
10046d66:	2202      	movs	r2, #2
10046d68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
10046d6a:	193b      	adds	r3, r7, r4
10046d6c:	2212      	movs	r2, #18
10046d6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10046d70:	193b      	adds	r3, r7, r4
10046d72:	2200      	movs	r2, #0
10046d74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10046d76:	193b      	adds	r3, r7, r4
10046d78:	2200      	movs	r2, #0
10046d7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
10046d7c:	193b      	adds	r3, r7, r4
10046d7e:	2200      	movs	r2, #0
10046d80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10046d82:	193a      	adds	r2, r7, r4
10046d84:	2390      	movs	r3, #144	@ 0x90
10046d86:	05db      	lsls	r3, r3, #23
10046d88:	0011      	movs	r1, r2
10046d8a:	0018      	movs	r0, r3
10046d8c:	f001 f844 	bl	10047e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
10046d90:	0021      	movs	r1, r4
10046d92:	187b      	adds	r3, r7, r1
10046d94:	2201      	movs	r2, #1
10046d96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
10046d98:	187b      	adds	r3, r7, r1
10046d9a:	2212      	movs	r2, #18
10046d9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10046d9e:	187b      	adds	r3, r7, r1
10046da0:	2200      	movs	r2, #0
10046da2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10046da4:	187b      	adds	r3, r7, r1
10046da6:	2200      	movs	r2, #0
10046da8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
10046daa:	187b      	adds	r3, r7, r1
10046dac:	2200      	movs	r2, #0
10046dae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10046db0:	187a      	adds	r2, r7, r1
10046db2:	2390      	movs	r3, #144	@ 0x90
10046db4:	05db      	lsls	r3, r3, #23
10046db6:	0011      	movs	r1, r2
10046db8:	0018      	movs	r0, r3
10046dba:	f001 f82d 	bl	10047e18 <HAL_GPIO_Init>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_A, PWR_GPIO_BIT_1);
10046dbe:	2102      	movs	r1, #2
10046dc0:	2000      	movs	r0, #0
10046dc2:	f003 faf9 	bl	1004a3b8 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_A, PWR_GPIO_BIT_0);
10046dc6:	2101      	movs	r1, #1
10046dc8:	2000      	movs	r0, #0
10046dca:	f003 faf5 	bl	1004a3b8 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_1);
10046dce:	2102      	movs	r1, #2
10046dd0:	2000      	movs	r0, #0
10046dd2:	f003 fb1f 	bl	1004a414 <HAL_PWREx_DisableGPIOPullDown>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_0);
10046dd6:	2101      	movs	r1, #1
10046dd8:	2000      	movs	r0, #0
10046dda:	f003 fb1b 	bl	1004a414 <HAL_PWREx_DisableGPIOPullDown>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
10046dde:	2380      	movs	r3, #128	@ 0x80
10046de0:	039b      	lsls	r3, r3, #14
10046de2:	0018      	movs	r0, r3
10046de4:	f7ff ff3a 	bl	10046c5c <LL_APB1_GRP1_EnableClock>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
10046de8:	46c0      	nop			@ (mov r8, r8)
10046dea:	46bd      	mov	sp, r7
10046dec:	b009      	add	sp, #36	@ 0x24
10046dee:	bd90      	pop	{r4, r7, pc}

10046df0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
10046df0:	b590      	push	{r4, r7, lr}
10046df2:	b08f      	sub	sp, #60	@ 0x3c
10046df4:	af00      	add	r7, sp, #0
10046df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10046df8:	2324      	movs	r3, #36	@ 0x24
10046dfa:	18fb      	adds	r3, r7, r3
10046dfc:	0018      	movs	r0, r3
10046dfe:	2314      	movs	r3, #20
10046e00:	001a      	movs	r2, r3
10046e02:	2100      	movs	r1, #0
10046e04:	f020 fe2a 	bl	10067a5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10046e08:	240c      	movs	r4, #12
10046e0a:	193b      	adds	r3, r7, r4
10046e0c:	0018      	movs	r0, r3
10046e0e:	2318      	movs	r3, #24
10046e10:	001a      	movs	r2, r3
10046e12:	2100      	movs	r1, #0
10046e14:	f020 fe22 	bl	10067a5c <memset>
  if(huart->Instance==LPUART1)
10046e18:	687b      	ldr	r3, [r7, #4]
10046e1a:	681b      	ldr	r3, [r3, #0]
10046e1c:	4a46      	ldr	r2, [pc, #280]	@ (10046f38 <HAL_UART_MspInit+0x148>)
10046e1e:	4293      	cmp	r3, r2
10046e20:	d000      	beq.n	10046e24 <HAL_UART_MspInit+0x34>
10046e22:	e084      	b.n	10046f2e <HAL_UART_MspInit+0x13e>
//
    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
10046e24:	193b      	adds	r3, r7, r4
10046e26:	2210      	movs	r2, #16
10046e28:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.LPUART1ClockSelection = RCC_LPUART1_CLKSOURCE_16M;
10046e2a:	193b      	adds	r3, r7, r4
10046e2c:	2200      	movs	r2, #0
10046e2e:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10046e30:	193b      	adds	r3, r7, r4
10046e32:	0018      	movs	r0, r3
10046e34:	f006 f930 	bl	1004d098 <HAL_RCCEx_PeriphCLKConfig>
10046e38:	1e03      	subs	r3, r0, #0
10046e3a:	d001      	beq.n	10046e40 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
10046e3c:	f7fa ff1c 	bl	10041c78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
10046e40:	2380      	movs	r3, #128	@ 0x80
10046e42:	005b      	lsls	r3, r3, #1
10046e44:	0018      	movs	r0, r3
10046e46:	f7ff ff09 	bl	10046c5c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
10046e4a:	2008      	movs	r0, #8
10046e4c:	f7ff feda 	bl	10046c04 <LL_AHB1_GRP1_EnableClock>
    PB7     ------> LPUART1_RX


    */

    GPIO_InitStruct.Pin = GPIO_PIN_3;
10046e50:	2424      	movs	r4, #36	@ 0x24
10046e52:	193b      	adds	r3, r7, r4
10046e54:	2208      	movs	r2, #8
10046e56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10046e58:	193b      	adds	r3, r7, r4
10046e5a:	2202      	movs	r2, #2
10046e5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10046e5e:	193b      	adds	r3, r7, r4
10046e60:	2200      	movs	r2, #0
10046e62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10046e64:	193b      	adds	r3, r7, r4
10046e66:	2200      	movs	r2, #0
10046e68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPUART1;
10046e6a:	193b      	adds	r3, r7, r4
10046e6c:	2201      	movs	r2, #1
10046e6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10046e70:	193b      	adds	r3, r7, r4
10046e72:	4a32      	ldr	r2, [pc, #200]	@ (10046f3c <HAL_UART_MspInit+0x14c>)
10046e74:	0019      	movs	r1, r3
10046e76:	0010      	movs	r0, r2
10046e78:	f000 ffce 	bl	10047e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
10046e7c:	193b      	adds	r3, r7, r4
10046e7e:	2280      	movs	r2, #128	@ 0x80
10046e80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10046e82:	193b      	adds	r3, r7, r4
10046e84:	2202      	movs	r2, #2
10046e86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10046e88:	193b      	adds	r3, r7, r4
10046e8a:	2200      	movs	r2, #0
10046e8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10046e8e:	193b      	adds	r3, r7, r4
10046e90:	2200      	movs	r2, #0
10046e92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART1;
10046e94:	193b      	adds	r3, r7, r4
10046e96:	2203      	movs	r2, #3
10046e98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10046e9a:	193b      	adds	r3, r7, r4
10046e9c:	4a27      	ldr	r2, [pc, #156]	@ (10046f3c <HAL_UART_MspInit+0x14c>)
10046e9e:	0019      	movs	r1, r3
10046ea0:	0010      	movs	r0, r2
10046ea2:	f000 ffb9 	bl	10047e18 <HAL_GPIO_Init>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_B, PWR_GPIO_BIT_3|PWR_GPIO_BIT_7);
10046ea6:	2188      	movs	r1, #136	@ 0x88
10046ea8:	2001      	movs	r0, #1
10046eaa:	f003 fa85 	bl	1004a3b8 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_3|PWR_GPIO_BIT_7);
10046eae:	2188      	movs	r1, #136	@ 0x88
10046eb0:	2001      	movs	r0, #1
10046eb2:	f003 faaf 	bl	1004a414 <HAL_PWREx_DisableGPIOPullDown>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 0);
10046eb6:	2200      	movs	r2, #0
10046eb8:	2101      	movs	r1, #1
10046eba:	2009      	movs	r0, #9
10046ebc:	f000 fdcc 	bl	10047a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
10046ec0:	2009      	movs	r0, #9
10046ec2:	f000 fdde 	bl	10047a82 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN LPUART1_MspInit 1 */
    //    PB0     ------> USART_RX
    //    PA1     ------> USART_TX
    GPIO_InitStruct.Pin = GPIO_PIN_0;
10046ec6:	193b      	adds	r3, r7, r4
10046ec8:	2201      	movs	r2, #1
10046eca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10046ecc:	193b      	adds	r3, r7, r4
10046ece:	2202      	movs	r2, #2
10046ed0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10046ed2:	193b      	adds	r3, r7, r4
10046ed4:	2200      	movs	r2, #0
10046ed6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10046ed8:	193b      	adds	r3, r7, r4
10046eda:	2200      	movs	r2, #0
10046edc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
10046ede:	193b      	adds	r3, r7, r4
10046ee0:	2200      	movs	r2, #0
10046ee2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10046ee4:	193b      	adds	r3, r7, r4
10046ee6:	4a15      	ldr	r2, [pc, #84]	@ (10046f3c <HAL_UART_MspInit+0x14c>)
10046ee8:	0019      	movs	r1, r3
10046eea:	0010      	movs	r0, r2
10046eec:	f000 ff94 	bl	10047e18 <HAL_GPIO_Init>

    //default to PA1 being in I2C control
    GPIO_InitStruct.Pin = GPIO_PIN_1;
10046ef0:	0021      	movs	r1, r4
10046ef2:	187b      	adds	r3, r7, r1
10046ef4:	2202      	movs	r2, #2
10046ef6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
10046ef8:	187b      	adds	r3, r7, r1
10046efa:	2212      	movs	r2, #18
10046efc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10046efe:	187b      	adds	r3, r7, r1
10046f00:	2200      	movs	r2, #0
10046f02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10046f04:	187b      	adds	r3, r7, r1
10046f06:	2200      	movs	r2, #0
10046f08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
10046f0a:	187b      	adds	r3, r7, r1
10046f0c:	2200      	movs	r2, #0
10046f0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10046f10:	187a      	adds	r2, r7, r1
10046f12:	2390      	movs	r3, #144	@ 0x90
10046f14:	05db      	lsls	r3, r3, #23
10046f16:	0011      	movs	r1, r2
10046f18:	0018      	movs	r0, r3
10046f1a:	f000 ff7d 	bl	10047e18 <HAL_GPIO_Init>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_B, PWR_GPIO_BIT_0);
10046f1e:	2101      	movs	r1, #1
10046f20:	2001      	movs	r0, #1
10046f22:	f003 fa49 	bl	1004a3b8 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_1);
10046f26:	2102      	movs	r1, #2
10046f28:	2000      	movs	r0, #0
10046f2a:	f003 fa73 	bl	1004a414 <HAL_PWREx_DisableGPIOPullDown>
//
    /* USER CODE END LPUART1_MspInit 1 */

  }

}
10046f2e:	46c0      	nop			@ (mov r8, r8)
10046f30:	46bd      	mov	sp, r7
10046f32:	b00f      	add	sp, #60	@ 0x3c
10046f34:	bd90      	pop	{r4, r7, pc}
10046f36:	46c0      	nop			@ (mov r8, r8)
10046f38:	41005000 	.word	0x41005000
10046f3c:	48100000 	.word	0x48100000

10046f40 <HAL_PKA_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpka: PKA handle pointer
  * @retval None
  */
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
10046f40:	b580      	push	{r7, lr}
10046f42:	b082      	sub	sp, #8
10046f44:	af00      	add	r7, sp, #0
10046f46:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
10046f48:	687b      	ldr	r3, [r7, #4]
10046f4a:	681b      	ldr	r3, [r3, #0]
10046f4c:	4a05      	ldr	r2, [pc, #20]	@ (10046f64 <HAL_PKA_MspInit+0x24>)
10046f4e:	4293      	cmp	r3, r2
10046f50:	d104      	bne.n	10046f5c <HAL_PKA_MspInit+0x1c>
  {
    /* USER CODE BEGIN PKA_MspInit 0 */

    /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
10046f52:	2380      	movs	r3, #128	@ 0x80
10046f54:	025b      	lsls	r3, r3, #9
10046f56:	0018      	movs	r0, r3
10046f58:	f7ff fe54 	bl	10046c04 <LL_AHB1_GRP1_EnableClock>

    /* USER CODE END PKA_MspInit 1 */

  }

}
10046f5c:	46c0      	nop			@ (mov r8, r8)
10046f5e:	46bd      	mov	sp, r7
10046f60:	b002      	add	sp, #8
10046f62:	bd80      	pop	{r7, pc}
10046f64:	48300000 	.word	0x48300000

10046f68 <HAL_RADIO_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hradio: RADIO handle pointer
  * @retval None
  */
void HAL_RADIO_MspInit(RADIO_HandleTypeDef* hradio)
{
10046f68:	b590      	push	{r4, r7, lr}
10046f6a:	b089      	sub	sp, #36	@ 0x24
10046f6c:	af00      	add	r7, sp, #0
10046f6e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10046f70:	2408      	movs	r4, #8
10046f72:	193b      	adds	r3, r7, r4
10046f74:	0018      	movs	r0, r3
10046f76:	2318      	movs	r3, #24
10046f78:	001a      	movs	r2, r3
10046f7a:	2100      	movs	r1, #0
10046f7c:	f020 fd6e 	bl	10067a5c <memset>
  if(hradio->Instance==RADIO)
10046f80:	687b      	ldr	r3, [r7, #4]
10046f82:	681a      	ldr	r2, [r3, #0]
10046f84:	23c0      	movs	r3, #192	@ 0xc0
10046f86:	05db      	lsls	r3, r3, #23
10046f88:	429a      	cmp	r2, r3
10046f8a:	d12d      	bne.n	10046fe8 <HAL_RADIO_MspInit+0x80>

    /* USER CODE END RADIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RF;
10046f8c:	193b      	adds	r3, r7, r4
10046f8e:	2201      	movs	r2, #1
10046f90:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RFClockSelection = RCC_RF_CLK_16M;
10046f92:	193b      	adds	r3, r7, r4
10046f94:	2204      	movs	r2, #4
10046f96:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10046f98:	193b      	adds	r3, r7, r4
10046f9a:	0018      	movs	r0, r3
10046f9c:	f006 f87c 	bl	1004d098 <HAL_RCCEx_PeriphCLKConfig>
10046fa0:	1e03      	subs	r3, r0, #0
10046fa2:	d001      	beq.n	10046fa8 <HAL_RADIO_MspInit+0x40>
    {
      Error_Handler();
10046fa4:	f7fa fe68 	bl	10041c78 <Error_Handler>
    }

    /* Peripheral clock enable */
    if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10046fa8:	2001      	movs	r0, #1
10046faa:	f7ff fe83 	bl	10046cb4 <LL_APB2_GRP1_IsEnabledClock>
10046fae:	1e03      	subs	r3, r0, #0
10046fb0:	d108      	bne.n	10046fc4 <HAL_RADIO_MspInit+0x5c>
    {
      /* Radio reset */
      __HAL_RCC_RADIO_FORCE_RESET();
10046fb2:	2001      	movs	r0, #1
10046fb4:	f7ff fe92 	bl	10046cdc <LL_APB2_GRP1_ForceReset>
      __HAL_RCC_RADIO_RELEASE_RESET();
10046fb8:	2001      	movs	r0, #1
10046fba:	f7ff fe9f 	bl	10046cfc <LL_APB2_GRP1_ReleaseReset>

      /* Enable Radio peripheral clock */
      __HAL_RCC_RADIO_CLK_ENABLE();
10046fbe:	2001      	movs	r0, #1
10046fc0:	f7ff fe62 	bl	10046c88 <LL_APB2_GRP1_EnableClock>
    }

    /**RADIO GPIO Configuration
    RF1     ------> RADIO_RF1
    */
    RT_DEBUG_GPIO_Init();
10046fc4:	f00d f94e 	bl	10054264 <RT_DEBUG_GPIO_Init>

    /* RADIO interrupt Init */
    HAL_NVIC_SetPriority(RADIO_TXRX_IRQn, 0, 0);
10046fc8:	2200      	movs	r2, #0
10046fca:	2100      	movs	r1, #0
10046fcc:	2012      	movs	r0, #18
10046fce:	f000 fd43 	bl	10047a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_IRQn);
10046fd2:	2012      	movs	r0, #18
10046fd4:	f000 fd55 	bl	10047a82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RADIO_TXRX_SEQ_IRQn, 0, 0);
10046fd8:	2200      	movs	r2, #0
10046fda:	2100      	movs	r1, #0
10046fdc:	2019      	movs	r0, #25
10046fde:	f000 fd3b 	bl	10047a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
10046fe2:	2019      	movs	r0, #25
10046fe4:	f000 fd4d 	bl	10047a82 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RADIO_MspInit 1 */

  }

}
10046fe8:	46c0      	nop			@ (mov r8, r8)
10046fea:	46bd      	mov	sp, r7
10046fec:	b009      	add	sp, #36	@ 0x24
10046fee:	bd90      	pop	{r4, r7, pc}

10046ff0 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
10046ff0:	b580      	push	{r7, lr}
10046ff2:	b082      	sub	sp, #8
10046ff4:	af00      	add	r7, sp, #0
10046ff6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
10046ff8:	687b      	ldr	r3, [r7, #4]
10046ffa:	681b      	ldr	r3, [r3, #0]
10046ffc:	4a05      	ldr	r2, [pc, #20]	@ (10047014 <HAL_RNG_MspInit+0x24>)
10046ffe:	4293      	cmp	r3, r2
10047000:	d104      	bne.n	1004700c <HAL_RNG_MspInit+0x1c>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
10047002:	2380      	movs	r3, #128	@ 0x80
10047004:	02db      	lsls	r3, r3, #11
10047006:	0018      	movs	r0, r3
10047008:	f7ff fdfc 	bl	10046c04 <LL_AHB1_GRP1_EnableClock>

    /* USER CODE END RNG_MspInit 1 */

  }

}
1004700c:	46c0      	nop			@ (mov r8, r8)
1004700e:	46bd      	mov	sp, r7
10047010:	b002      	add	sp, #8
10047012:	bd80      	pop	{r7, pc}
10047014:	48600000 	.word	0x48600000

10047018 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
10047018:	b580      	push	{r7, lr}
1004701a:	b082      	sub	sp, #8
1004701c:	af00      	add	r7, sp, #0
1004701e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
10047020:	687b      	ldr	r3, [r7, #4]
10047022:	681b      	ldr	r3, [r3, #0]
10047024:	4a08      	ldr	r2, [pc, #32]	@ (10047048 <HAL_TIM_Base_MspInit+0x30>)
10047026:	4293      	cmp	r3, r2
10047028:	d10a      	bne.n	10047040 <HAL_TIM_Base_MspInit+0x28>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
1004702a:	2001      	movs	r0, #1
1004702c:	f7ff fe00 	bl	10046c30 <LL_APB0_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
10047030:	2200      	movs	r2, #0
10047032:	2101      	movs	r1, #1
10047034:	200a      	movs	r0, #10
10047036:	f000 fd0f 	bl	10047a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
1004703a:	200a      	movs	r0, #10
1004703c:	f000 fd21 	bl	10047a82 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
10047040:	46c0      	nop			@ (mov r8, r8)
10047042:	46bd      	mov	sp, r7
10047044:	b002      	add	sp, #8
10047046:	bd80      	pop	{r7, pc}
10047048:	40002000 	.word	0x40002000

1004704c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
1004704c:	b580      	push	{r7, lr}
1004704e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
10047050:	46c0      	nop			@ (mov r8, r8)
10047052:	e7fd      	b.n	10047050 <NMI_Handler+0x4>

10047054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10047054:	b580      	push	{r7, lr}
10047056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10047058:	46c0      	nop			@ (mov r8, r8)
1004705a:	e7fd      	b.n	10047058 <HardFault_Handler+0x4>

1004705c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
1004705c:	b580      	push	{r7, lr}
1004705e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10047060:	46c0      	nop			@ (mov r8, r8)
10047062:	46bd      	mov	sp, r7
10047064:	bd80      	pop	{r7, pc}

10047066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10047066:	b580      	push	{r7, lr}
10047068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
1004706a:	46c0      	nop			@ (mov r8, r8)
1004706c:	46bd      	mov	sp, r7
1004706e:	bd80      	pop	{r7, pc}

10047070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10047070:	b580      	push	{r7, lr}
10047072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10047074:	f000 fbfa 	bl	1004786c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10047078:	46c0      	nop			@ (mov r8, r8)
1004707a:	46bd      	mov	sp, r7
1004707c:	bd80      	pop	{r7, pc}

1004707e <GPIOA_IRQHandler>:

/**
  * @brief This function handles GPIOA interrupt.
  */
void GPIOA_IRQHandler(void)
{
1004707e:	b580      	push	{r7, lr}
10047080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPIOA_IRQn 0 */

  /* USER CODE END GPIOA_IRQn 0 */
  BSP_PB_IRQHandler(GPIOA,B1_PIN);
10047082:	2390      	movs	r3, #144	@ 0x90
10047084:	05db      	lsls	r3, r3, #23
10047086:	2101      	movs	r1, #1
10047088:	0018      	movs	r0, r3
1004708a:	f000 fb7d 	bl	10047788 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN GPIOA_IRQn 1 */

  /* USER CODE END GPIOA_IRQn 1 */
}
1004708e:	46c0      	nop			@ (mov r8, r8)
10047090:	46bd      	mov	sp, r7
10047092:	bd80      	pop	{r7, pc}

10047094 <GPIOB_IRQHandler>:

/**
  * @brief This function handles GPIOB interrupt.
  */
void GPIOB_IRQHandler(void)
{
10047094:	b580      	push	{r7, lr}
10047096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPIOB_IRQn 0 */

  /* USER CODE END GPIOB_IRQn 0 */
  BSP_PB_IRQHandler(GPIOB,B3_PIN);
10047098:	2380      	movs	r3, #128	@ 0x80
1004709a:	01db      	lsls	r3, r3, #7
1004709c:	4a06      	ldr	r2, [pc, #24]	@ (100470b8 <GPIOB_IRQHandler+0x24>)
1004709e:	0019      	movs	r1, r3
100470a0:	0010      	movs	r0, r2
100470a2:	f000 fb71 	bl	10047788 <BSP_PB_IRQHandler>
  BSP_PB_IRQHandler(GPIOB,B2_PIN);
100470a6:	4b04      	ldr	r3, [pc, #16]	@ (100470b8 <GPIOB_IRQHandler+0x24>)
100470a8:	2120      	movs	r1, #32
100470aa:	0018      	movs	r0, r3
100470ac:	f000 fb6c 	bl	10047788 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN GPIOB_IRQn 1 */

  /* USER CODE END GPIOB_IRQn 1 */
}
100470b0:	46c0      	nop			@ (mov r8, r8)
100470b2:	46bd      	mov	sp, r7
100470b4:	bd80      	pop	{r7, pc}
100470b6:	46c0      	nop			@ (mov r8, r8)
100470b8:	48100000 	.word	0x48100000

100470bc <RADIO_TIMER_CPU_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_CPU_WKUP global interrupt.
  */
void RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
100470bc:	b580      	push	{r7, lr}
100470be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_CPU_WKUP_IRQHandler();
100470c0:	f005 fb14 	bl	1004c6ec <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 1 */
}
100470c4:	46c0      	nop			@ (mov r8, r8)
100470c6:	46bd      	mov	sp, r7
100470c8:	bd80      	pop	{r7, pc}

100470ca <RADIO_TIMER_ERROR_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_ERROR global interrupt.
  */
void RADIO_TIMER_ERROR_IRQHandler(void)
{
100470ca:	b580      	push	{r7, lr}
100470cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 0 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 0 */
  HAL_RADIO_TIMER_ERROR_IRQHandler();
100470ce:	f005 fb16 	bl	1004c6fe <HAL_RADIO_TIMER_ERROR_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 1 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 1 */
}
100470d2:	46c0      	nop			@ (mov r8, r8)
100470d4:	46bd      	mov	sp, r7
100470d6:	bd80      	pop	{r7, pc}

100470d8 <RADIO_TXRX_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX global interrupt.
  */
void RADIO_TXRX_IRQHandler(void)
{
100470d8:	b580      	push	{r7, lr}
100470da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_IRQn 0 */

  /* USER CODE END RADIO_TXRX_IRQn 0 */
  HAL_RADIO_TXRX_IRQHandler();
100470dc:	f003 ff06 	bl	1004aeec <HAL_RADIO_TXRX_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_IRQn 1 */

  /* USER CODE END RADIO_TXRX_IRQn 1 */
}
100470e0:	46c0      	nop			@ (mov r8, r8)
100470e2:	46bd      	mov	sp, r7
100470e4:	bd80      	pop	{r7, pc}

100470e6 <RADIO_TXRX_SEQ_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX_SEQ global interrupt.
  */
void RADIO_TXRX_SEQ_IRQHandler(void)
{
100470e6:	b580      	push	{r7, lr}
100470e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 0 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 0 */
  HAL_RADIO_TXRX_SEQ_IRQHandler();
100470ea:	f003 ff20 	bl	1004af2e <HAL_RADIO_TXRX_SEQ_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 1 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 1 */
}
100470ee:	46c0      	nop			@ (mov r8, r8)
100470f0:	46bd      	mov	sp, r7
100470f2:	bd80      	pop	{r7, pc}

100470f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
100470f4:	b580      	push	{r7, lr}
100470f6:	b086      	sub	sp, #24
100470f8:	af00      	add	r7, sp, #0
100470fa:	60f8      	str	r0, [r7, #12]
100470fc:	60b9      	str	r1, [r7, #8]
100470fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10047100:	2300      	movs	r3, #0
10047102:	617b      	str	r3, [r7, #20]
10047104:	e00a      	b.n	1004711c <_read+0x28>
  {
    *ptr++ = __io_getchar();
10047106:	e000      	b.n	1004710a <_read+0x16>
10047108:	bf00      	nop
1004710a:	0001      	movs	r1, r0
1004710c:	68bb      	ldr	r3, [r7, #8]
1004710e:	1c5a      	adds	r2, r3, #1
10047110:	60ba      	str	r2, [r7, #8]
10047112:	b2ca      	uxtb	r2, r1
10047114:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10047116:	697b      	ldr	r3, [r7, #20]
10047118:	3301      	adds	r3, #1
1004711a:	617b      	str	r3, [r7, #20]
1004711c:	697a      	ldr	r2, [r7, #20]
1004711e:	687b      	ldr	r3, [r7, #4]
10047120:	429a      	cmp	r2, r3
10047122:	dbf0      	blt.n	10047106 <_read+0x12>
  }

  return len;
10047124:	687b      	ldr	r3, [r7, #4]
}
10047126:	0018      	movs	r0, r3
10047128:	46bd      	mov	sp, r7
1004712a:	b006      	add	sp, #24
1004712c:	bd80      	pop	{r7, pc}

1004712e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
1004712e:	b580      	push	{r7, lr}
10047130:	b086      	sub	sp, #24
10047132:	af00      	add	r7, sp, #0
10047134:	60f8      	str	r0, [r7, #12]
10047136:	60b9      	str	r1, [r7, #8]
10047138:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
1004713a:	2300      	movs	r3, #0
1004713c:	617b      	str	r3, [r7, #20]
1004713e:	e009      	b.n	10047154 <_write+0x26>
  {
    __io_putchar(*ptr++);
10047140:	68bb      	ldr	r3, [r7, #8]
10047142:	1c5a      	adds	r2, r3, #1
10047144:	60ba      	str	r2, [r7, #8]
10047146:	781b      	ldrb	r3, [r3, #0]
10047148:	0018      	movs	r0, r3
1004714a:	e000      	b.n	1004714e <_write+0x20>
1004714c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
1004714e:	697b      	ldr	r3, [r7, #20]
10047150:	3301      	adds	r3, #1
10047152:	617b      	str	r3, [r7, #20]
10047154:	697a      	ldr	r2, [r7, #20]
10047156:	687b      	ldr	r3, [r7, #4]
10047158:	429a      	cmp	r2, r3
1004715a:	dbf1      	blt.n	10047140 <_write+0x12>
  }
  return len;
1004715c:	687b      	ldr	r3, [r7, #4]
}
1004715e:	0018      	movs	r0, r3
10047160:	46bd      	mov	sp, r7
10047162:	b006      	add	sp, #24
10047164:	bd80      	pop	{r7, pc}

10047166 <_close>:

int _close(int file)
{
10047166:	b580      	push	{r7, lr}
10047168:	b082      	sub	sp, #8
1004716a:	af00      	add	r7, sp, #0
1004716c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
1004716e:	2301      	movs	r3, #1
10047170:	425b      	negs	r3, r3
}
10047172:	0018      	movs	r0, r3
10047174:	46bd      	mov	sp, r7
10047176:	b002      	add	sp, #8
10047178:	bd80      	pop	{r7, pc}

1004717a <_fstat>:


int _fstat(int file, struct stat *st)
{
1004717a:	b580      	push	{r7, lr}
1004717c:	b082      	sub	sp, #8
1004717e:	af00      	add	r7, sp, #0
10047180:	6078      	str	r0, [r7, #4]
10047182:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
10047184:	683b      	ldr	r3, [r7, #0]
10047186:	2280      	movs	r2, #128	@ 0x80
10047188:	0192      	lsls	r2, r2, #6
1004718a:	605a      	str	r2, [r3, #4]
  return 0;
1004718c:	2300      	movs	r3, #0
}
1004718e:	0018      	movs	r0, r3
10047190:	46bd      	mov	sp, r7
10047192:	b002      	add	sp, #8
10047194:	bd80      	pop	{r7, pc}

10047196 <_isatty>:

int _isatty(int file)
{
10047196:	b580      	push	{r7, lr}
10047198:	b082      	sub	sp, #8
1004719a:	af00      	add	r7, sp, #0
1004719c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
1004719e:	2301      	movs	r3, #1
}
100471a0:	0018      	movs	r0, r3
100471a2:	46bd      	mov	sp, r7
100471a4:	b002      	add	sp, #8
100471a6:	bd80      	pop	{r7, pc}

100471a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
100471a8:	b580      	push	{r7, lr}
100471aa:	b084      	sub	sp, #16
100471ac:	af00      	add	r7, sp, #0
100471ae:	60f8      	str	r0, [r7, #12]
100471b0:	60b9      	str	r1, [r7, #8]
100471b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
100471b4:	2300      	movs	r3, #0
}
100471b6:	0018      	movs	r0, r3
100471b8:	46bd      	mov	sp, r7
100471ba:	b004      	add	sp, #16
100471bc:	bd80      	pop	{r7, pc}
	...

100471c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
100471c0:	b580      	push	{r7, lr}
100471c2:	b086      	sub	sp, #24
100471c4:	af00      	add	r7, sp, #0
100471c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
100471c8:	4a14      	ldr	r2, [pc, #80]	@ (1004721c <_sbrk+0x5c>)
100471ca:	4b15      	ldr	r3, [pc, #84]	@ (10047220 <_sbrk+0x60>)
100471cc:	1ad3      	subs	r3, r2, r3
100471ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
100471d0:	697b      	ldr	r3, [r7, #20]
100471d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
100471d4:	4b13      	ldr	r3, [pc, #76]	@ (10047224 <_sbrk+0x64>)
100471d6:	681b      	ldr	r3, [r3, #0]
100471d8:	2b00      	cmp	r3, #0
100471da:	d102      	bne.n	100471e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
100471dc:	4b11      	ldr	r3, [pc, #68]	@ (10047224 <_sbrk+0x64>)
100471de:	4a12      	ldr	r2, [pc, #72]	@ (10047228 <_sbrk+0x68>)
100471e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
100471e2:	4b10      	ldr	r3, [pc, #64]	@ (10047224 <_sbrk+0x64>)
100471e4:	681a      	ldr	r2, [r3, #0]
100471e6:	687b      	ldr	r3, [r7, #4]
100471e8:	18d3      	adds	r3, r2, r3
100471ea:	693a      	ldr	r2, [r7, #16]
100471ec:	429a      	cmp	r2, r3
100471ee:	d207      	bcs.n	10047200 <_sbrk+0x40>
  {
    errno = ENOMEM;
100471f0:	f020 fc9c 	bl	10067b2c <__errno>
100471f4:	0003      	movs	r3, r0
100471f6:	220c      	movs	r2, #12
100471f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
100471fa:	2301      	movs	r3, #1
100471fc:	425b      	negs	r3, r3
100471fe:	e009      	b.n	10047214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
10047200:	4b08      	ldr	r3, [pc, #32]	@ (10047224 <_sbrk+0x64>)
10047202:	681b      	ldr	r3, [r3, #0]
10047204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
10047206:	4b07      	ldr	r3, [pc, #28]	@ (10047224 <_sbrk+0x64>)
10047208:	681a      	ldr	r2, [r3, #0]
1004720a:	687b      	ldr	r3, [r7, #4]
1004720c:	18d2      	adds	r2, r2, r3
1004720e:	4b05      	ldr	r3, [pc, #20]	@ (10047224 <_sbrk+0x64>)
10047210:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
10047212:	68fb      	ldr	r3, [r7, #12]
}
10047214:	0018      	movs	r0, r3
10047216:	46bd      	mov	sp, r7
10047218:	b006      	add	sp, #24
1004721a:	bd80      	pop	{r7, pc}
1004721c:	20006000 	.word	0x20006000
10047220:	00000c00 	.word	0x00000c00
10047224:	200021b4 	.word	0x200021b4
10047228:	20004b4c 	.word	0x20004b4c

1004722c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
1004722c:	b590      	push	{r4, r7, lr}
1004722e:	b083      	sub	sp, #12
10047230:	af00      	add	r7, sp, #0
10047232:	0002      	movs	r2, r0
10047234:	6039      	str	r1, [r7, #0]
10047236:	1dfb      	adds	r3, r7, #7
10047238:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004723a:	1dfb      	adds	r3, r7, #7
1004723c:	781b      	ldrb	r3, [r3, #0]
1004723e:	2b7f      	cmp	r3, #127	@ 0x7f
10047240:	d828      	bhi.n	10047294 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10047242:	4a2f      	ldr	r2, [pc, #188]	@ (10047300 <__NVIC_SetPriority+0xd4>)
10047244:	1dfb      	adds	r3, r7, #7
10047246:	781b      	ldrb	r3, [r3, #0]
10047248:	b25b      	sxtb	r3, r3
1004724a:	089b      	lsrs	r3, r3, #2
1004724c:	33c0      	adds	r3, #192	@ 0xc0
1004724e:	009b      	lsls	r3, r3, #2
10047250:	589b      	ldr	r3, [r3, r2]
10047252:	1dfa      	adds	r2, r7, #7
10047254:	7812      	ldrb	r2, [r2, #0]
10047256:	0011      	movs	r1, r2
10047258:	2203      	movs	r2, #3
1004725a:	400a      	ands	r2, r1
1004725c:	00d2      	lsls	r2, r2, #3
1004725e:	21ff      	movs	r1, #255	@ 0xff
10047260:	4091      	lsls	r1, r2
10047262:	000a      	movs	r2, r1
10047264:	43d2      	mvns	r2, r2
10047266:	401a      	ands	r2, r3
10047268:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004726a:	683b      	ldr	r3, [r7, #0]
1004726c:	019b      	lsls	r3, r3, #6
1004726e:	22ff      	movs	r2, #255	@ 0xff
10047270:	401a      	ands	r2, r3
10047272:	1dfb      	adds	r3, r7, #7
10047274:	781b      	ldrb	r3, [r3, #0]
10047276:	0018      	movs	r0, r3
10047278:	2303      	movs	r3, #3
1004727a:	4003      	ands	r3, r0
1004727c:	00db      	lsls	r3, r3, #3
1004727e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10047280:	481f      	ldr	r0, [pc, #124]	@ (10047300 <__NVIC_SetPriority+0xd4>)
10047282:	1dfb      	adds	r3, r7, #7
10047284:	781b      	ldrb	r3, [r3, #0]
10047286:	b25b      	sxtb	r3, r3
10047288:	089b      	lsrs	r3, r3, #2
1004728a:	430a      	orrs	r2, r1
1004728c:	33c0      	adds	r3, #192	@ 0xc0
1004728e:	009b      	lsls	r3, r3, #2
10047290:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10047292:	e031      	b.n	100472f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10047294:	4a1b      	ldr	r2, [pc, #108]	@ (10047304 <__NVIC_SetPriority+0xd8>)
10047296:	1dfb      	adds	r3, r7, #7
10047298:	781b      	ldrb	r3, [r3, #0]
1004729a:	0019      	movs	r1, r3
1004729c:	230f      	movs	r3, #15
1004729e:	400b      	ands	r3, r1
100472a0:	3b08      	subs	r3, #8
100472a2:	089b      	lsrs	r3, r3, #2
100472a4:	3306      	adds	r3, #6
100472a6:	009b      	lsls	r3, r3, #2
100472a8:	18d3      	adds	r3, r2, r3
100472aa:	3304      	adds	r3, #4
100472ac:	681b      	ldr	r3, [r3, #0]
100472ae:	1dfa      	adds	r2, r7, #7
100472b0:	7812      	ldrb	r2, [r2, #0]
100472b2:	0011      	movs	r1, r2
100472b4:	2203      	movs	r2, #3
100472b6:	400a      	ands	r2, r1
100472b8:	00d2      	lsls	r2, r2, #3
100472ba:	21ff      	movs	r1, #255	@ 0xff
100472bc:	4091      	lsls	r1, r2
100472be:	000a      	movs	r2, r1
100472c0:	43d2      	mvns	r2, r2
100472c2:	401a      	ands	r2, r3
100472c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100472c6:	683b      	ldr	r3, [r7, #0]
100472c8:	019b      	lsls	r3, r3, #6
100472ca:	22ff      	movs	r2, #255	@ 0xff
100472cc:	401a      	ands	r2, r3
100472ce:	1dfb      	adds	r3, r7, #7
100472d0:	781b      	ldrb	r3, [r3, #0]
100472d2:	0018      	movs	r0, r3
100472d4:	2303      	movs	r3, #3
100472d6:	4003      	ands	r3, r0
100472d8:	00db      	lsls	r3, r3, #3
100472da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100472dc:	4809      	ldr	r0, [pc, #36]	@ (10047304 <__NVIC_SetPriority+0xd8>)
100472de:	1dfb      	adds	r3, r7, #7
100472e0:	781b      	ldrb	r3, [r3, #0]
100472e2:	001c      	movs	r4, r3
100472e4:	230f      	movs	r3, #15
100472e6:	4023      	ands	r3, r4
100472e8:	3b08      	subs	r3, #8
100472ea:	089b      	lsrs	r3, r3, #2
100472ec:	430a      	orrs	r2, r1
100472ee:	3306      	adds	r3, #6
100472f0:	009b      	lsls	r3, r3, #2
100472f2:	18c3      	adds	r3, r0, r3
100472f4:	3304      	adds	r3, #4
100472f6:	601a      	str	r2, [r3, #0]
}
100472f8:	46c0      	nop			@ (mov r8, r8)
100472fa:	46bd      	mov	sp, r7
100472fc:	b003      	add	sp, #12
100472fe:	bd90      	pop	{r4, r7, pc}
10047300:	e000e100 	.word	0xe000e100
10047304:	e000ed00 	.word	0xe000ed00

10047308 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
10047308:	b580      	push	{r7, lr}
1004730a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
1004730c:	f3bf 8f4f 	dsb	sy
}
10047310:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10047312:	4b04      	ldr	r3, [pc, #16]	@ (10047324 <__NVIC_SystemReset+0x1c>)
10047314:	4a04      	ldr	r2, [pc, #16]	@ (10047328 <__NVIC_SystemReset+0x20>)
10047316:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
10047318:	f3bf 8f4f 	dsb	sy
}
1004731c:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
1004731e:	46c0      	nop			@ (mov r8, r8)
10047320:	e7fd      	b.n	1004731e <__NVIC_SystemReset+0x16>
10047322:	46c0      	nop			@ (mov r8, r8)
10047324:	e000ed00 	.word	0xe000ed00
10047328:	05fa0004 	.word	0x05fa0004

1004732c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
1004732c:	b590      	push	{r4, r7, lr}
1004732e:	b087      	sub	sp, #28
10047330:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
10047332:	4a5e      	ldr	r2, [pc, #376]	@ (100474ac <SystemInit+0x180>)
10047334:	2394      	movs	r3, #148	@ 0x94
10047336:	58d3      	ldr	r3, [r2, r3]
10047338:	2b00      	cmp	r3, #0
1004733a:	d10e      	bne.n	1004735a <SystemInit+0x2e>
1004733c:	4b5c      	ldr	r3, [pc, #368]	@ (100474b0 <SystemInit+0x184>)
1004733e:	691b      	ldr	r3, [r3, #16]
10047340:	2b00      	cmp	r3, #0
10047342:	d103      	bne.n	1004734c <SystemInit+0x20>
10047344:	4b5a      	ldr	r3, [pc, #360]	@ (100474b0 <SystemInit+0x184>)
10047346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10047348:	2b00      	cmp	r3, #0
1004734a:	d006      	beq.n	1004735a <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
1004734c:	4b59      	ldr	r3, [pc, #356]	@ (100474b4 <SystemInit+0x188>)
1004734e:	2201      	movs	r2, #1
10047350:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
10047352:	f7f8 ff49 	bl	100401e8 <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
10047356:	f7ff ffd7 	bl	10047308 <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
1004735a:	4b57      	ldr	r3, [pc, #348]	@ (100474b8 <SystemInit+0x18c>)
1004735c:	4a57      	ldr	r2, [pc, #348]	@ (100474bc <SystemInit+0x190>)
1004735e:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
10047360:	4b55      	ldr	r3, [pc, #340]	@ (100474b8 <SystemInit+0x18c>)
10047362:	689a      	ldr	r2, [r3, #8]
10047364:	4b53      	ldr	r3, [pc, #332]	@ (100474b4 <SystemInit+0x188>)
10047366:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
10047368:	4b51      	ldr	r3, [pc, #324]	@ (100474b0 <SystemInit+0x184>)
1004736a:	685a      	ldr	r2, [r3, #4]
1004736c:	4b50      	ldr	r3, [pc, #320]	@ (100474b0 <SystemInit+0x184>)
1004736e:	2120      	movs	r1, #32
10047370:	430a      	orrs	r2, r1
10047372:	605a      	str	r2, [r3, #4]
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
#endif /* PWR_CR2_RAMRET3 */

  /* Disable the GPIO retention in power save configuration */
#if defined(PWR_CR2_GPIORET)
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
10047374:	4b4e      	ldr	r3, [pc, #312]	@ (100474b0 <SystemInit+0x184>)
10047376:	685a      	ldr	r2, [r3, #4]
10047378:	4b4d      	ldr	r3, [pc, #308]	@ (100474b0 <SystemInit+0x184>)
1004737a:	4951      	ldr	r1, [pc, #324]	@ (100474c0 <SystemInit+0x194>)
1004737c:	400a      	ands	r2, r1
1004737e:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
10047380:	46c0      	nop			@ (mov r8, r8)
10047382:	4b4b      	ldr	r3, [pc, #300]	@ (100474b0 <SystemInit+0x184>)
10047384:	695b      	ldr	r3, [r3, #20]
10047386:	2204      	movs	r2, #4
10047388:	4013      	ands	r3, r2
1004738a:	2b04      	cmp	r3, #4
1004738c:	d1f9      	bne.n	10047382 <SystemInit+0x56>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
1004738e:	4b48      	ldr	r3, [pc, #288]	@ (100474b0 <SystemInit+0x184>)
10047390:	69db      	ldr	r3, [r3, #28]
10047392:	2230      	movs	r2, #48	@ 0x30
10047394:	4393      	bics	r3, r2
10047396:	001a      	movs	r2, r3
10047398:	4b45      	ldr	r3, [pc, #276]	@ (100474b0 <SystemInit+0x184>)
1004739a:	2120      	movs	r1, #32
1004739c:	430a      	orrs	r2, r1
1004739e:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
100473a0:	4b43      	ldr	r3, [pc, #268]	@ (100474b0 <SystemInit+0x184>)
100473a2:	69da      	ldr	r2, [r3, #28]
100473a4:	4b42      	ldr	r3, [pc, #264]	@ (100474b0 <SystemInit+0x184>)
100473a6:	4947      	ldr	r1, [pc, #284]	@ (100474c4 <SystemInit+0x198>)
100473a8:	400a      	ands	r2, r1
100473aa:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
100473ac:	4b40      	ldr	r3, [pc, #256]	@ (100474b0 <SystemInit+0x184>)
100473ae:	69da      	ldr	r2, [r3, #28]
100473b0:	4b3f      	ldr	r3, [pc, #252]	@ (100474b0 <SystemInit+0x184>)
100473b2:	2180      	movs	r1, #128	@ 0x80
100473b4:	0049      	lsls	r1, r1, #1
100473b6:	430a      	orrs	r2, r1
100473b8:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
100473ba:	4b43      	ldr	r3, [pc, #268]	@ (100474c8 <SystemInit+0x19c>)
100473bc:	681b      	ldr	r3, [r3, #0]
100473be:	4a43      	ldr	r2, [pc, #268]	@ (100474cc <SystemInit+0x1a0>)
100473c0:	4293      	cmp	r3, r2
100473c2:	d055      	beq.n	10047470 <SystemInit+0x144>

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
#else
    hsiCalib       = 0x1F;
100473c4:	231f      	movs	r3, #31
100473c6:	613b      	str	r3, [r7, #16]
    lsiBw          = 8;
100473c8:	2308      	movs	r3, #8
100473ca:	60fb      	str	r3, [r7, #12]
    mainRegulator  = 0x0A;
100473cc:	230a      	movs	r3, #10
100473ce:	60bb      	str	r3, [r7, #8]
    smpsOutVoltage = 0x03;
100473d0:	2303      	movs	r3, #3
100473d2:	607b      	str	r3, [r7, #4]

    /* Low speed internal RC trimming value set by software */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
100473d4:	4b35      	ldr	r3, [pc, #212]	@ (100474ac <SystemInit+0x180>)
100473d6:	68db      	ldr	r3, [r3, #12]
100473d8:	221e      	movs	r2, #30
100473da:	4393      	bics	r3, r2
100473dc:	0019      	movs	r1, r3
100473de:	68fb      	ldr	r3, [r7, #12]
100473e0:	005a      	lsls	r2, r3, #1
100473e2:	4b32      	ldr	r3, [pc, #200]	@ (100474ac <SystemInit+0x180>)
100473e4:	430a      	orrs	r2, r1
100473e6:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
100473e8:	4b30      	ldr	r3, [pc, #192]	@ (100474ac <SystemInit+0x180>)
100473ea:	68da      	ldr	r2, [r3, #12]
100473ec:	4b2f      	ldr	r3, [pc, #188]	@ (100474ac <SystemInit+0x180>)
100473ee:	2101      	movs	r1, #1
100473f0:	430a      	orrs	r2, r1
100473f2:	60da      	str	r2, [r3, #12]
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
100473f4:	4b2d      	ldr	r3, [pc, #180]	@ (100474ac <SystemInit+0x180>)
100473f6:	68db      	ldr	r3, [r3, #12]
100473f8:	4a35      	ldr	r2, [pc, #212]	@ (100474d0 <SystemInit+0x1a4>)
100473fa:	4013      	ands	r3, r2
100473fc:	0019      	movs	r1, r3
100473fe:	693b      	ldr	r3, [r7, #16]
10047400:	061a      	lsls	r2, r3, #24
10047402:	4b2a      	ldr	r3, [pc, #168]	@ (100474ac <SystemInit+0x180>)
10047404:	430a      	orrs	r2, r1
10047406:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
10047408:	4b28      	ldr	r3, [pc, #160]	@ (100474ac <SystemInit+0x180>)
1004740a:	68da      	ldr	r2, [r3, #12]
1004740c:	4b27      	ldr	r3, [pc, #156]	@ (100474ac <SystemInit+0x180>)
1004740e:	2180      	movs	r1, #128	@ 0x80
10047410:	0409      	lsls	r1, r1, #16
10047412:	430a      	orrs	r2, r1
10047414:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
10047416:	4a26      	ldr	r2, [pc, #152]	@ (100474b0 <SystemInit+0x184>)
10047418:	2394      	movs	r3, #148	@ 0x94
1004741a:	58d3      	ldr	r3, [r2, r3]
1004741c:	4a2d      	ldr	r2, [pc, #180]	@ (100474d4 <SystemInit+0x1a8>)
1004741e:	401a      	ands	r2, r3
10047420:	68bb      	ldr	r3, [r7, #8]
10047422:	0199      	lsls	r1, r3, #6
10047424:	23f0      	movs	r3, #240	@ 0xf0
10047426:	009b      	lsls	r3, r3, #2
10047428:	400b      	ands	r3, r1
1004742a:	4921      	ldr	r1, [pc, #132]	@ (100474b0 <SystemInit+0x184>)
1004742c:	4313      	orrs	r3, r2
1004742e:	2294      	movs	r2, #148	@ 0x94
10047430:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
10047432:	4a1f      	ldr	r2, [pc, #124]	@ (100474b0 <SystemInit+0x184>)
10047434:	2394      	movs	r3, #148	@ 0x94
10047436:	58d3      	ldr	r3, [r2, r3]
10047438:	491d      	ldr	r1, [pc, #116]	@ (100474b0 <SystemInit+0x184>)
1004743a:	2220      	movs	r2, #32
1004743c:	4313      	orrs	r3, r2
1004743e:	2294      	movs	r2, #148	@ 0x94
10047440:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
10047442:	4a1b      	ldr	r2, [pc, #108]	@ (100474b0 <SystemInit+0x184>)
10047444:	2394      	movs	r3, #148	@ 0x94
10047446:	58d3      	ldr	r3, [r2, r3]
10047448:	4a23      	ldr	r2, [pc, #140]	@ (100474d8 <SystemInit+0x1ac>)
1004744a:	401a      	ands	r2, r3
1004744c:	687b      	ldr	r3, [r7, #4]
1004744e:	02d9      	lsls	r1, r3, #11
10047450:	23e0      	movs	r3, #224	@ 0xe0
10047452:	019b      	lsls	r3, r3, #6
10047454:	400b      	ands	r3, r1
10047456:	4916      	ldr	r1, [pc, #88]	@ (100474b0 <SystemInit+0x184>)
10047458:	4313      	orrs	r3, r2
1004745a:	2294      	movs	r2, #148	@ 0x94
1004745c:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
1004745e:	4a14      	ldr	r2, [pc, #80]	@ (100474b0 <SystemInit+0x184>)
10047460:	2394      	movs	r3, #148	@ 0x94
10047462:	58d3      	ldr	r3, [r2, r3]
10047464:	4912      	ldr	r1, [pc, #72]	@ (100474b0 <SystemInit+0x184>)
10047466:	2280      	movs	r2, #128	@ 0x80
10047468:	00d2      	lsls	r2, r2, #3
1004746a:	4313      	orrs	r3, r2
1004746c:	2294      	movs	r2, #148	@ 0x94
1004746e:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
10047470:	2317      	movs	r3, #23
10047472:	18fb      	adds	r3, r7, r3
10047474:	2200      	movs	r2, #0
10047476:	701a      	strb	r2, [r3, #0]
10047478:	e00d      	b.n	10047496 <SystemInit+0x16a>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
1004747a:	2417      	movs	r4, #23
1004747c:	193b      	adds	r3, r7, r4
1004747e:	781b      	ldrb	r3, [r3, #0]
10047480:	b25b      	sxtb	r3, r3
10047482:	2103      	movs	r1, #3
10047484:	0018      	movs	r0, r3
10047486:	f7ff fed1 	bl	1004722c <__NVIC_SetPriority>
  for (i=0; i<32; i++)
1004748a:	0021      	movs	r1, r4
1004748c:	187b      	adds	r3, r7, r1
1004748e:	781a      	ldrb	r2, [r3, #0]
10047490:	187b      	adds	r3, r7, r1
10047492:	3201      	adds	r2, #1
10047494:	701a      	strb	r2, [r3, #0]
10047496:	2317      	movs	r3, #23
10047498:	18fb      	adds	r3, r7, r3
1004749a:	781b      	ldrb	r3, [r3, #0]
1004749c:	2b1f      	cmp	r3, #31
1004749e:	d9ec      	bls.n	1004747a <SystemInit+0x14e>
  __ASM volatile ("cpsie i" : : : "memory");
100474a0:	b662      	cpsie	i
}
100474a2:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
100474a4:	46c0      	nop			@ (mov r8, r8)
100474a6:	46bd      	mov	sp, r7
100474a8:	b007      	add	sp, #28
100474aa:	bd90      	pop	{r4, r7, pc}
100474ac:	48400000 	.word	0x48400000
100474b0:	48500000 	.word	0x48500000
100474b4:	20000004 	.word	0x20000004
100474b8:	e000ed00 	.word	0xe000ed00
100474bc:	10040000 	.word	0x10040000
100474c0:	fffffeff 	.word	0xfffffeff
100474c4:	fffffbff 	.word	0xfffffbff
100474c8:	10001ef8 	.word	0x10001ef8
100474cc:	fcbceccc 	.word	0xfcbceccc
100474d0:	c0ffffff 	.word	0xc0ffffff
100474d4:	fffffc3f 	.word	0xfffffc3f
100474d8:	ffffc7ff 	.word	0xffffc7ff

100474dc <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
100474dc:	b580      	push	{r7, lr}
100474de:	b082      	sub	sp, #8
100474e0:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
100474e2:	4b13      	ldr	r3, [pc, #76]	@ (10047530 <SystemCoreClockUpdate+0x54>)
100474e4:	689b      	ldr	r3, [r3, #8]
100474e6:	085b      	lsrs	r3, r3, #1
100474e8:	b2da      	uxtb	r2, r3
100474ea:	1dfb      	adds	r3, r7, #7
100474ec:	2101      	movs	r1, #1
100474ee:	400a      	ands	r2, r1
100474f0:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
100474f2:	4b0f      	ldr	r3, [pc, #60]	@ (10047530 <SystemCoreClockUpdate+0x54>)
100474f4:	689b      	ldr	r3, [r3, #8]
100474f6:	0a1b      	lsrs	r3, r3, #8
100474f8:	b2da      	uxtb	r2, r3
100474fa:	1dbb      	adds	r3, r7, #6
100474fc:	2107      	movs	r1, #7
100474fe:	400a      	ands	r2, r1
10047500:	701a      	strb	r2, [r3, #0]
#endif

  if (directHSE_enabled)
10047502:	1dfb      	adds	r3, r7, #7
10047504:	781b      	ldrb	r3, [r3, #0]
10047506:	2b00      	cmp	r3, #0
10047508:	d007      	beq.n	1004751a <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
1004750a:	1dbb      	adds	r3, r7, #6
1004750c:	781b      	ldrb	r3, [r3, #0]
1004750e:	3b01      	subs	r3, #1
10047510:	4a08      	ldr	r2, [pc, #32]	@ (10047534 <SystemCoreClockUpdate+0x58>)
10047512:	40da      	lsrs	r2, r3
10047514:	4b08      	ldr	r3, [pc, #32]	@ (10047538 <SystemCoreClockUpdate+0x5c>)
10047516:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
10047518:	e005      	b.n	10047526 <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
1004751a:	1dbb      	adds	r3, r7, #6
1004751c:	781b      	ldrb	r3, [r3, #0]
1004751e:	4a07      	ldr	r2, [pc, #28]	@ (1004753c <SystemCoreClockUpdate+0x60>)
10047520:	40da      	lsrs	r2, r3
10047522:	4b05      	ldr	r3, [pc, #20]	@ (10047538 <SystemCoreClockUpdate+0x5c>)
10047524:	601a      	str	r2, [r3, #0]
}
10047526:	46c0      	nop			@ (mov r8, r8)
10047528:	46bd      	mov	sp, r7
1004752a:	b002      	add	sp, #8
1004752c:	bd80      	pop	{r7, pc}
1004752e:	46c0      	nop			@ (mov r8, r8)
10047530:	48400000 	.word	0x48400000
10047534:	01e84800 	.word	0x01e84800
10047538:	20002714 	.word	0x20002714
1004753c:	03d09000 	.word	0x03d09000

10047540 <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
10047540:	4810      	ldr	r0, [pc, #64]	@ (10047584 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
10047542:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
10047544:	f7ff fef2 	bl	1004732c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
10047548:	2100      	movs	r1, #0
  b  LoopCopyDataInit
1004754a:	e003      	b.n	10047554 <LoopCopyDataInit>

1004754c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
1004754c:	4b0e      	ldr	r3, [pc, #56]	@ (10047588 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1004754e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10047550:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10047552:	3104      	adds	r1, #4

10047554 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
10047554:	480d      	ldr	r0, [pc, #52]	@ (1004758c <LoopForever+0xa>)
  ldr  r3, =_edata
10047556:	4b0e      	ldr	r3, [pc, #56]	@ (10047590 <LoopForever+0xe>)
  adds  r2, r0, r1
10047558:	1842      	adds	r2, r0, r1
  cmp  r2, r3
1004755a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
1004755c:	d3f6      	bcc.n	1004754c <CopyDataInit>
  ldr  r2, =_sbss
1004755e:	4a0d      	ldr	r2, [pc, #52]	@ (10047594 <LoopForever+0x12>)
  b  LoopFillZerobss
10047560:	e002      	b.n	10047568 <LoopFillZerobss>

10047562 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
10047562:	2300      	movs	r3, #0
  str  r3, [r2]
10047564:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10047566:	3204      	adds	r2, #4

10047568 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
10047568:	4b0b      	ldr	r3, [pc, #44]	@ (10047598 <LoopForever+0x16>)
  cmp  r2, r3
1004756a:	429a      	cmp	r2, r3
  bcc  FillZerobss
1004756c:	d3f9      	bcc.n	10047562 <FillZerobss>
  ldr  r2, =_sbssblue
1004756e:	4a0b      	ldr	r2, [pc, #44]	@ (1004759c <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
10047570:	e002      	b.n	10047578 <LoopFillZeroBlueRam>

10047572 <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
10047572:	2300      	movs	r3, #0
  str  r3, [r2]
10047574:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10047576:	3204      	adds	r2, #4

10047578 <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
10047578:	4b09      	ldr	r3, [pc, #36]	@ (100475a0 <LoopForever+0x1e>)
  cmp  r2, r3
1004757a:	429a      	cmp	r2, r3
  bcc  FillZerobssram
1004757c:	d3f9      	bcc.n	10047572 <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
1004757e:	f7ff fa2d 	bl	100469dc <main>

10047582 <LoopForever>:

LoopForever:
    b LoopForever
10047582:	e7fe      	b.n	10047582 <LoopForever>
   ldr   r0, =_estack
10047584:	20006000 	.word	0x20006000
  ldr  r3, =_sidata
10047588:	10069818 	.word	0x10069818
  ldr  r0, =_sdata
1004758c:	20002614 	.word	0x20002614
  ldr  r3, =_edata
10047590:	20002910 	.word	0x20002910
  ldr  r2, =_sbss
10047594:	20000194 	.word	0x20000194
  ldr  r3, = _ebss
10047598:	20002614 	.word	0x20002614
  ldr  r2, =_sbssblue
1004759c:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
100475a0:	20000194 	.word	0x20000194

100475a4 <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
100475a4:	e7fe      	b.n	100475a4 <ADC_IRQHandler>
	...

100475a8 <LL_PWR_IsEnabledPUPDCfg>:
  * @brief  Check if pull-up and pull-down configuration is enabled
  * @rmtoll CR1          APC           LL_PWR_IsEnabledPUPDCfg
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledPUPDCfg(void)
{
100475a8:	b580      	push	{r7, lr}
100475aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_APC) == (PWR_CR1_APC)) ? 1UL : 0UL);
100475ac:	4b05      	ldr	r3, [pc, #20]	@ (100475c4 <LL_PWR_IsEnabledPUPDCfg+0x1c>)
100475ae:	681b      	ldr	r3, [r3, #0]
100475b0:	2210      	movs	r2, #16
100475b2:	4013      	ands	r3, r2
100475b4:	2b10      	cmp	r3, #16
100475b6:	d101      	bne.n	100475bc <LL_PWR_IsEnabledPUPDCfg+0x14>
100475b8:	2301      	movs	r3, #1
100475ba:	e000      	b.n	100475be <LL_PWR_IsEnabledPUPDCfg+0x16>
100475bc:	2300      	movs	r3, #0
}
100475be:	0018      	movs	r0, r3
100475c0:	46bd      	mov	sp, r7
100475c2:	bd80      	pop	{r7, pc}
100475c4:	48500000 	.word	0x48500000

100475c8 <LL_PWR_EnableGPIOPullUp>:
  *         @arg @ref LL_PWR_GPIO_BIT_14
  *         @arg @ref LL_PWR_GPIO_BIT_15
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
100475c8:	b580      	push	{r7, lr}
100475ca:	b082      	sub	sp, #8
100475cc:	af00      	add	r7, sp, #0
100475ce:	6078      	str	r0, [r7, #4]
100475d0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
100475d2:	687b      	ldr	r3, [r7, #4]
100475d4:	3304      	adds	r3, #4
100475d6:	681a      	ldr	r2, [r3, #0]
100475d8:	683b      	ldr	r3, [r7, #0]
100475da:	43d9      	mvns	r1, r3
100475dc:	687b      	ldr	r3, [r7, #4]
100475de:	3304      	adds	r3, #4
100475e0:	400a      	ands	r2, r1
100475e2:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
100475e4:	687b      	ldr	r3, [r7, #4]
100475e6:	6819      	ldr	r1, [r3, #0]
100475e8:	687b      	ldr	r3, [r7, #4]
100475ea:	683a      	ldr	r2, [r7, #0]
100475ec:	430a      	orrs	r2, r1
100475ee:	601a      	str	r2, [r3, #0]
}
100475f0:	46c0      	nop			@ (mov r8, r8)
100475f2:	46bd      	mov	sp, r7
100475f4:	b002      	add	sp, #8
100475f6:	bd80      	pop	{r7, pc}

100475f8 <LL_AHB1_GRP1_EnableClock>:
{
100475f8:	b580      	push	{r7, lr}
100475fa:	b084      	sub	sp, #16
100475fc:	af00      	add	r7, sp, #0
100475fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10047600:	4b07      	ldr	r3, [pc, #28]	@ (10047620 <LL_AHB1_GRP1_EnableClock+0x28>)
10047602:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10047604:	4b06      	ldr	r3, [pc, #24]	@ (10047620 <LL_AHB1_GRP1_EnableClock+0x28>)
10047606:	687a      	ldr	r2, [r7, #4]
10047608:	430a      	orrs	r2, r1
1004760a:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
1004760c:	4b04      	ldr	r3, [pc, #16]	@ (10047620 <LL_AHB1_GRP1_EnableClock+0x28>)
1004760e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10047610:	687a      	ldr	r2, [r7, #4]
10047612:	4013      	ands	r3, r2
10047614:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10047616:	68fb      	ldr	r3, [r7, #12]
}
10047618:	46c0      	nop			@ (mov r8, r8)
1004761a:	46bd      	mov	sp, r7
1004761c:	b004      	add	sp, #16
1004761e:	bd80      	pop	{r7, pc}
10047620:	48400000 	.word	0x48400000

10047624 <BSP_LED_Init>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
10047624:	b590      	push	{r4, r7, lr}
10047626:	b089      	sub	sp, #36	@ 0x24
10047628:	af00      	add	r7, sp, #0
1004762a:	0002      	movs	r2, r0
1004762c:	1dfb      	adds	r3, r7, #7
1004762e:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LD1)
10047630:	1dfb      	adds	r3, r7, #7
10047632:	781b      	ldrb	r3, [r3, #0]
10047634:	2b00      	cmp	r3, #0
10047636:	d103      	bne.n	10047640 <BSP_LED_Init+0x1c>
  {
    LD1_GPIO_CLK_ENABLE();
10047638:	2008      	movs	r0, #8
1004763a:	f7ff ffdd 	bl	100475f8 <LL_AHB1_GRP1_EnableClock>
1004763e:	e00a      	b.n	10047656 <BSP_LED_Init+0x32>
  }
  else if (Led == LD2)
10047640:	1dfb      	adds	r3, r7, #7
10047642:	781b      	ldrb	r3, [r3, #0]
10047644:	2b01      	cmp	r3, #1
10047646:	d103      	bne.n	10047650 <BSP_LED_Init+0x2c>
  {
    LD2_GPIO_CLK_ENABLE();
10047648:	2008      	movs	r0, #8
1004764a:	f7ff ffd5 	bl	100475f8 <LL_AHB1_GRP1_EnableClock>
1004764e:	e002      	b.n	10047656 <BSP_LED_Init+0x32>
  }
  else /* Led = LD3 */
  {
    LD3_GPIO_CLK_ENABLE();
10047650:	2008      	movs	r0, #8
10047652:	f7ff ffd1 	bl	100475f8 <LL_AHB1_GRP1_EnableClock>
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
10047656:	1dfb      	adds	r3, r7, #7
10047658:	781a      	ldrb	r2, [r3, #0]
1004765a:	4b28      	ldr	r3, [pc, #160]	@ (100476fc <BSP_LED_Init+0xd8>)
1004765c:	0052      	lsls	r2, r2, #1
1004765e:	5ad3      	ldrh	r3, [r2, r3]
10047660:	001a      	movs	r2, r3
10047662:	240c      	movs	r4, #12
10047664:	193b      	adds	r3, r7, r4
10047666:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
10047668:	193b      	adds	r3, r7, r4
1004766a:	2201      	movs	r2, #1
1004766c:	605a      	str	r2, [r3, #4]
  GPIO_Init.Pull  = GPIO_PULLUP;
1004766e:	193b      	adds	r3, r7, r4
10047670:	2201      	movs	r2, #1
10047672:	609a      	str	r2, [r3, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
10047674:	193b      	adds	r3, r7, r4
10047676:	2202      	movs	r2, #2
10047678:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
1004767a:	1dfb      	adds	r3, r7, #7
1004767c:	781a      	ldrb	r2, [r3, #0]
1004767e:	4b20      	ldr	r3, [pc, #128]	@ (10047700 <BSP_LED_Init+0xdc>)
10047680:	0092      	lsls	r2, r2, #2
10047682:	58d3      	ldr	r3, [r2, r3]
10047684:	193a      	adds	r2, r7, r4
10047686:	0011      	movs	r1, r2
10047688:	0018      	movs	r0, r3
1004768a:	f000 fbc5 	bl	10047e18 <HAL_GPIO_Init>

  if( LL_PWR_IsEnabledPUPDCfg() != 0)
1004768e:	f7ff ff8b 	bl	100475a8 <LL_PWR_IsEnabledPUPDCfg>
10047692:	1e03      	subs	r3, r0, #0
10047694:	d01f      	beq.n	100476d6 <BSP_LED_Init+0xb2>
  {
    if (LED_PORT[Led] == GPIOA)
10047696:	1dfb      	adds	r3, r7, #7
10047698:	781a      	ldrb	r2, [r3, #0]
1004769a:	4b19      	ldr	r3, [pc, #100]	@ (10047700 <BSP_LED_Init+0xdc>)
1004769c:	0092      	lsls	r2, r2, #2
1004769e:	58d2      	ldr	r2, [r2, r3]
100476a0:	2390      	movs	r3, #144	@ 0x90
100476a2:	05db      	lsls	r3, r3, #23
100476a4:	429a      	cmp	r2, r3
100476a6:	d106      	bne.n	100476b6 <BSP_LED_Init+0x92>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
100476a8:	193b      	adds	r3, r7, r4
100476aa:	681b      	ldr	r3, [r3, #0]
100476ac:	4a15      	ldr	r2, [pc, #84]	@ (10047704 <BSP_LED_Init+0xe0>)
100476ae:	0019      	movs	r1, r3
100476b0:	0010      	movs	r0, r2
100476b2:	f7ff ff89 	bl	100475c8 <LL_PWR_EnableGPIOPullUp>
    }
     if (LED_PORT[Led] == GPIOB)
100476b6:	1dfb      	adds	r3, r7, #7
100476b8:	781a      	ldrb	r2, [r3, #0]
100476ba:	4b11      	ldr	r3, [pc, #68]	@ (10047700 <BSP_LED_Init+0xdc>)
100476bc:	0092      	lsls	r2, r2, #2
100476be:	58d3      	ldr	r3, [r2, r3]
100476c0:	4a11      	ldr	r2, [pc, #68]	@ (10047708 <BSP_LED_Init+0xe4>)
100476c2:	4293      	cmp	r3, r2
100476c4:	d107      	bne.n	100476d6 <BSP_LED_Init+0xb2>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_B, GPIO_Init.Pin);
100476c6:	230c      	movs	r3, #12
100476c8:	18fb      	adds	r3, r7, r3
100476ca:	681b      	ldr	r3, [r3, #0]
100476cc:	4a0f      	ldr	r2, [pc, #60]	@ (1004770c <BSP_LED_Init+0xe8>)
100476ce:	0019      	movs	r1, r3
100476d0:	0010      	movs	r0, r2
100476d2:	f7ff ff79 	bl	100475c8 <LL_PWR_EnableGPIOPullUp>
    }
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
100476d6:	1dfb      	adds	r3, r7, #7
100476d8:	781a      	ldrb	r2, [r3, #0]
100476da:	4b09      	ldr	r3, [pc, #36]	@ (10047700 <BSP_LED_Init+0xdc>)
100476dc:	0092      	lsls	r2, r2, #2
100476de:	58d0      	ldr	r0, [r2, r3]
100476e0:	1dfb      	adds	r3, r7, #7
100476e2:	781a      	ldrb	r2, [r3, #0]
100476e4:	4b05      	ldr	r3, [pc, #20]	@ (100476fc <BSP_LED_Init+0xd8>)
100476e6:	0052      	lsls	r2, r2, #1
100476e8:	5ad3      	ldrh	r3, [r2, r3]
100476ea:	2201      	movs	r2, #1
100476ec:	0019      	movs	r1, r3
100476ee:	f000 fe38 	bl	10048362 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
100476f2:	2300      	movs	r3, #0
}
100476f4:	0018      	movs	r0, r3
100476f6:	46bd      	mov	sp, r7
100476f8:	b009      	add	sp, #36	@ 0x24
100476fa:	bd90      	pop	{r4, r7, pc}
100476fc:	20002718 	.word	0x20002718
10047700:	20002720 	.word	0x20002720
10047704:	48500020 	.word	0x48500020
10047708:	48100000 	.word	0x48100000
1004770c:	48500028 	.word	0x48500028

10047710 <BSP_LED_On>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
10047710:	b580      	push	{r7, lr}
10047712:	b082      	sub	sp, #8
10047714:	af00      	add	r7, sp, #0
10047716:	0002      	movs	r2, r0
10047718:	1dfb      	adds	r3, r7, #7
1004771a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
1004771c:	1dfb      	adds	r3, r7, #7
1004771e:	781a      	ldrb	r2, [r3, #0]
10047720:	4b08      	ldr	r3, [pc, #32]	@ (10047744 <BSP_LED_On+0x34>)
10047722:	0092      	lsls	r2, r2, #2
10047724:	58d0      	ldr	r0, [r2, r3]
10047726:	1dfb      	adds	r3, r7, #7
10047728:	781a      	ldrb	r2, [r3, #0]
1004772a:	4b07      	ldr	r3, [pc, #28]	@ (10047748 <BSP_LED_On+0x38>)
1004772c:	0052      	lsls	r2, r2, #1
1004772e:	5ad3      	ldrh	r3, [r2, r3]
10047730:	2200      	movs	r2, #0
10047732:	0019      	movs	r1, r3
10047734:	f000 fe15 	bl	10048362 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
10047738:	2300      	movs	r3, #0
}
1004773a:	0018      	movs	r0, r3
1004773c:	46bd      	mov	sp, r7
1004773e:	b002      	add	sp, #8
10047740:	bd80      	pop	{r7, pc}
10047742:	46c0      	nop			@ (mov r8, r8)
10047744:	20002720 	.word	0x20002720
10047748:	20002718 	.word	0x20002718

1004774c <BSP_LED_Off>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
1004774c:	b580      	push	{r7, lr}
1004774e:	b082      	sub	sp, #8
10047750:	af00      	add	r7, sp, #0
10047752:	0002      	movs	r2, r0
10047754:	1dfb      	adds	r3, r7, #7
10047756:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
10047758:	1dfb      	adds	r3, r7, #7
1004775a:	781a      	ldrb	r2, [r3, #0]
1004775c:	4b08      	ldr	r3, [pc, #32]	@ (10047780 <BSP_LED_Off+0x34>)
1004775e:	0092      	lsls	r2, r2, #2
10047760:	58d0      	ldr	r0, [r2, r3]
10047762:	1dfb      	adds	r3, r7, #7
10047764:	781a      	ldrb	r2, [r3, #0]
10047766:	4b07      	ldr	r3, [pc, #28]	@ (10047784 <BSP_LED_Off+0x38>)
10047768:	0052      	lsls	r2, r2, #1
1004776a:	5ad3      	ldrh	r3, [r2, r3]
1004776c:	2201      	movs	r2, #1
1004776e:	0019      	movs	r1, r3
10047770:	f000 fdf7 	bl	10048362 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
10047774:	2300      	movs	r3, #0
}
10047776:	0018      	movs	r0, r3
10047778:	46bd      	mov	sp, r7
1004777a:	b002      	add	sp, #8
1004777c:	bd80      	pop	{r7, pc}
1004777e:	46c0      	nop			@ (mov r8, r8)
10047780:	20002720 	.word	0x20002720
10047784:	20002718 	.word	0x20002718

10047788 <BSP_PB_IRQHandler>:
  * @param  GPIO_Pin Contains the pin state of GPIO when the interrupt occurred
  * @retval None.
  */

void BSP_PB_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10047788:	b580      	push	{r7, lr}
1004778a:	b082      	sub	sp, #8
1004778c:	af00      	add	r7, sp, #0
1004778e:	6078      	str	r0, [r7, #4]
10047790:	000a      	movs	r2, r1
10047792:	1cbb      	adds	r3, r7, #2
10047794:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_EXTI_IRQHandler( GPIOx, GPIO_Pin);
10047796:	1cbb      	adds	r3, r7, #2
10047798:	881a      	ldrh	r2, [r3, #0]
1004779a:	687b      	ldr	r3, [r7, #4]
1004779c:	0011      	movs	r1, r2
1004779e:	0018      	movs	r0, r3
100477a0:	f000 fdfc 	bl	1004839c <HAL_GPIO_EXTI_IRQHandler>
}
100477a4:	46c0      	nop			@ (mov r8, r8)
100477a6:	46bd      	mov	sp, r7
100477a8:	b002      	add	sp, #8
100477aa:	bd80      	pop	{r7, pc}

100477ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
100477ac:	b580      	push	{r7, lr}
100477ae:	b082      	sub	sp, #8
100477b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
100477b2:	1dfb      	adds	r3, r7, #7
100477b4:	2200      	movs	r2, #0
100477b6:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
100477b8:	2003      	movs	r0, #3
100477ba:	f000 f80f 	bl	100477dc <HAL_InitTick>
100477be:	1e03      	subs	r3, r0, #0
100477c0:	d003      	beq.n	100477ca <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
100477c2:	1dfb      	adds	r3, r7, #7
100477c4:	2201      	movs	r2, #1
100477c6:	701a      	strb	r2, [r3, #0]
100477c8:	e001      	b.n	100477ce <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
100477ca:	f7ff faa9 	bl	10046d20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
100477ce:	1dfb      	adds	r3, r7, #7
100477d0:	781b      	ldrb	r3, [r3, #0]
}
100477d2:	0018      	movs	r0, r3
100477d4:	46bd      	mov	sp, r7
100477d6:	b002      	add	sp, #8
100477d8:	bd80      	pop	{r7, pc}
	...

100477dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100477dc:	b590      	push	{r4, r7, lr}
100477de:	b085      	sub	sp, #20
100477e0:	af00      	add	r7, sp, #0
100477e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
100477e4:	230f      	movs	r3, #15
100477e6:	18fb      	adds	r3, r7, r3
100477e8:	2200      	movs	r2, #0
100477ea:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
100477ec:	4b1d      	ldr	r3, [pc, #116]	@ (10047864 <HAL_InitTick+0x88>)
100477ee:	781b      	ldrb	r3, [r3, #0]
100477f0:	2b00      	cmp	r3, #0
100477f2:	d02c      	beq.n	1004784e <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
100477f4:	f005 fb66 	bl	1004cec4 <HAL_RCC_GetSysClockFreq>
100477f8:	0004      	movs	r4, r0
100477fa:	4b1a      	ldr	r3, [pc, #104]	@ (10047864 <HAL_InitTick+0x88>)
100477fc:	781b      	ldrb	r3, [r3, #0]
100477fe:	0019      	movs	r1, r3
10047800:	23fa      	movs	r3, #250	@ 0xfa
10047802:	0098      	lsls	r0, r3, #2
10047804:	f7f8 fd1c 	bl	10040240 <__udivsi3>
10047808:	0003      	movs	r3, r0
1004780a:	0019      	movs	r1, r3
1004780c:	0020      	movs	r0, r4
1004780e:	f7f8 fd17 	bl	10040240 <__udivsi3>
10047812:	0003      	movs	r3, r0
10047814:	0018      	movs	r0, r3
10047816:	f000 f944 	bl	10047aa2 <HAL_SYSTICK_Config>
1004781a:	1e03      	subs	r3, r0, #0
1004781c:	d112      	bne.n	10047844 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
1004781e:	687b      	ldr	r3, [r7, #4]
10047820:	2b03      	cmp	r3, #3
10047822:	d80a      	bhi.n	1004783a <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
10047824:	6879      	ldr	r1, [r7, #4]
10047826:	2301      	movs	r3, #1
10047828:	425b      	negs	r3, r3
1004782a:	2200      	movs	r2, #0
1004782c:	0018      	movs	r0, r3
1004782e:	f000 f913 	bl	10047a58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
10047832:	4b0d      	ldr	r3, [pc, #52]	@ (10047868 <HAL_InitTick+0x8c>)
10047834:	687a      	ldr	r2, [r7, #4]
10047836:	601a      	str	r2, [r3, #0]
10047838:	e00d      	b.n	10047856 <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
1004783a:	230f      	movs	r3, #15
1004783c:	18fb      	adds	r3, r7, r3
1004783e:	2201      	movs	r2, #1
10047840:	701a      	strb	r2, [r3, #0]
10047842:	e008      	b.n	10047856 <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
10047844:	230f      	movs	r3, #15
10047846:	18fb      	adds	r3, r7, r3
10047848:	2201      	movs	r2, #1
1004784a:	701a      	strb	r2, [r3, #0]
1004784c:	e003      	b.n	10047856 <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
1004784e:	230f      	movs	r3, #15
10047850:	18fb      	adds	r3, r7, r3
10047852:	2201      	movs	r2, #1
10047854:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
10047856:	230f      	movs	r3, #15
10047858:	18fb      	adds	r3, r7, r3
1004785a:	781b      	ldrb	r3, [r3, #0]
}
1004785c:	0018      	movs	r0, r3
1004785e:	46bd      	mov	sp, r7
10047860:	b005      	add	sp, #20
10047862:	bd90      	pop	{r4, r7, pc}
10047864:	20002730 	.word	0x20002730
10047868:	2000272c 	.word	0x2000272c

1004786c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
1004786c:	b580      	push	{r7, lr}
1004786e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10047870:	4b05      	ldr	r3, [pc, #20]	@ (10047888 <HAL_IncTick+0x1c>)
10047872:	781b      	ldrb	r3, [r3, #0]
10047874:	001a      	movs	r2, r3
10047876:	4b05      	ldr	r3, [pc, #20]	@ (1004788c <HAL_IncTick+0x20>)
10047878:	681b      	ldr	r3, [r3, #0]
1004787a:	18d2      	adds	r2, r2, r3
1004787c:	4b03      	ldr	r3, [pc, #12]	@ (1004788c <HAL_IncTick+0x20>)
1004787e:	601a      	str	r2, [r3, #0]
}
10047880:	46c0      	nop			@ (mov r8, r8)
10047882:	46bd      	mov	sp, r7
10047884:	bd80      	pop	{r7, pc}
10047886:	46c0      	nop			@ (mov r8, r8)
10047888:	20002730 	.word	0x20002730
1004788c:	200021b8 	.word	0x200021b8

10047890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10047890:	b580      	push	{r7, lr}
10047892:	af00      	add	r7, sp, #0
  return uwTick;
10047894:	4b02      	ldr	r3, [pc, #8]	@ (100478a0 <HAL_GetTick+0x10>)
10047896:	681b      	ldr	r3, [r3, #0]
}
10047898:	0018      	movs	r0, r3
1004789a:	46bd      	mov	sp, r7
1004789c:	bd80      	pop	{r7, pc}
1004789e:	46c0      	nop			@ (mov r8, r8)
100478a0:	200021b8 	.word	0x200021b8

100478a4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
100478a4:	b580      	push	{r7, lr}
100478a6:	af00      	add	r7, sp, #0
  return uwTickPrio;
100478a8:	4b02      	ldr	r3, [pc, #8]	@ (100478b4 <HAL_GetTickPrio+0x10>)
100478aa:	681b      	ldr	r3, [r3, #0]
}
100478ac:	0018      	movs	r0, r3
100478ae:	46bd      	mov	sp, r7
100478b0:	bd80      	pop	{r7, pc}
100478b2:	46c0      	nop			@ (mov r8, r8)
100478b4:	2000272c 	.word	0x2000272c

100478b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
100478b8:	b580      	push	{r7, lr}
100478ba:	b084      	sub	sp, #16
100478bc:	af00      	add	r7, sp, #0
100478be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
100478c0:	f7ff ffe6 	bl	10047890 <HAL_GetTick>
100478c4:	0003      	movs	r3, r0
100478c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
100478c8:	687b      	ldr	r3, [r7, #4]
100478ca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
100478cc:	68fb      	ldr	r3, [r7, #12]
100478ce:	3301      	adds	r3, #1
100478d0:	d005      	beq.n	100478de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
100478d2:	4b0a      	ldr	r3, [pc, #40]	@ (100478fc <HAL_Delay+0x44>)
100478d4:	781b      	ldrb	r3, [r3, #0]
100478d6:	001a      	movs	r2, r3
100478d8:	68fb      	ldr	r3, [r7, #12]
100478da:	189b      	adds	r3, r3, r2
100478dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
100478de:	46c0      	nop			@ (mov r8, r8)
100478e0:	f7ff ffd6 	bl	10047890 <HAL_GetTick>
100478e4:	0002      	movs	r2, r0
100478e6:	68bb      	ldr	r3, [r7, #8]
100478e8:	1ad3      	subs	r3, r2, r3
100478ea:	68fa      	ldr	r2, [r7, #12]
100478ec:	429a      	cmp	r2, r3
100478ee:	d8f7      	bhi.n	100478e0 <HAL_Delay+0x28>
  {
  }
}
100478f0:	46c0      	nop			@ (mov r8, r8)
100478f2:	46c0      	nop			@ (mov r8, r8)
100478f4:	46bd      	mov	sp, r7
100478f6:	b004      	add	sp, #16
100478f8:	bd80      	pop	{r7, pc}
100478fa:	46c0      	nop			@ (mov r8, r8)
100478fc:	20002730 	.word	0x20002730

10047900 <__NVIC_EnableIRQ>:
{
10047900:	b580      	push	{r7, lr}
10047902:	b082      	sub	sp, #8
10047904:	af00      	add	r7, sp, #0
10047906:	0002      	movs	r2, r0
10047908:	1dfb      	adds	r3, r7, #7
1004790a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004790c:	1dfb      	adds	r3, r7, #7
1004790e:	781b      	ldrb	r3, [r3, #0]
10047910:	2b7f      	cmp	r3, #127	@ 0x7f
10047912:	d809      	bhi.n	10047928 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10047914:	1dfb      	adds	r3, r7, #7
10047916:	781b      	ldrb	r3, [r3, #0]
10047918:	001a      	movs	r2, r3
1004791a:	231f      	movs	r3, #31
1004791c:	401a      	ands	r2, r3
1004791e:	4b04      	ldr	r3, [pc, #16]	@ (10047930 <__NVIC_EnableIRQ+0x30>)
10047920:	2101      	movs	r1, #1
10047922:	4091      	lsls	r1, r2
10047924:	000a      	movs	r2, r1
10047926:	601a      	str	r2, [r3, #0]
}
10047928:	46c0      	nop			@ (mov r8, r8)
1004792a:	46bd      	mov	sp, r7
1004792c:	b002      	add	sp, #8
1004792e:	bd80      	pop	{r7, pc}
10047930:	e000e100 	.word	0xe000e100

10047934 <__NVIC_SetPriority>:
{
10047934:	b590      	push	{r4, r7, lr}
10047936:	b083      	sub	sp, #12
10047938:	af00      	add	r7, sp, #0
1004793a:	0002      	movs	r2, r0
1004793c:	6039      	str	r1, [r7, #0]
1004793e:	1dfb      	adds	r3, r7, #7
10047940:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10047942:	1dfb      	adds	r3, r7, #7
10047944:	781b      	ldrb	r3, [r3, #0]
10047946:	2b7f      	cmp	r3, #127	@ 0x7f
10047948:	d828      	bhi.n	1004799c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004794a:	4a2f      	ldr	r2, [pc, #188]	@ (10047a08 <__NVIC_SetPriority+0xd4>)
1004794c:	1dfb      	adds	r3, r7, #7
1004794e:	781b      	ldrb	r3, [r3, #0]
10047950:	b25b      	sxtb	r3, r3
10047952:	089b      	lsrs	r3, r3, #2
10047954:	33c0      	adds	r3, #192	@ 0xc0
10047956:	009b      	lsls	r3, r3, #2
10047958:	589b      	ldr	r3, [r3, r2]
1004795a:	1dfa      	adds	r2, r7, #7
1004795c:	7812      	ldrb	r2, [r2, #0]
1004795e:	0011      	movs	r1, r2
10047960:	2203      	movs	r2, #3
10047962:	400a      	ands	r2, r1
10047964:	00d2      	lsls	r2, r2, #3
10047966:	21ff      	movs	r1, #255	@ 0xff
10047968:	4091      	lsls	r1, r2
1004796a:	000a      	movs	r2, r1
1004796c:	43d2      	mvns	r2, r2
1004796e:	401a      	ands	r2, r3
10047970:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10047972:	683b      	ldr	r3, [r7, #0]
10047974:	019b      	lsls	r3, r3, #6
10047976:	22ff      	movs	r2, #255	@ 0xff
10047978:	401a      	ands	r2, r3
1004797a:	1dfb      	adds	r3, r7, #7
1004797c:	781b      	ldrb	r3, [r3, #0]
1004797e:	0018      	movs	r0, r3
10047980:	2303      	movs	r3, #3
10047982:	4003      	ands	r3, r0
10047984:	00db      	lsls	r3, r3, #3
10047986:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10047988:	481f      	ldr	r0, [pc, #124]	@ (10047a08 <__NVIC_SetPriority+0xd4>)
1004798a:	1dfb      	adds	r3, r7, #7
1004798c:	781b      	ldrb	r3, [r3, #0]
1004798e:	b25b      	sxtb	r3, r3
10047990:	089b      	lsrs	r3, r3, #2
10047992:	430a      	orrs	r2, r1
10047994:	33c0      	adds	r3, #192	@ 0xc0
10047996:	009b      	lsls	r3, r3, #2
10047998:	501a      	str	r2, [r3, r0]
}
1004799a:	e031      	b.n	10047a00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004799c:	4a1b      	ldr	r2, [pc, #108]	@ (10047a0c <__NVIC_SetPriority+0xd8>)
1004799e:	1dfb      	adds	r3, r7, #7
100479a0:	781b      	ldrb	r3, [r3, #0]
100479a2:	0019      	movs	r1, r3
100479a4:	230f      	movs	r3, #15
100479a6:	400b      	ands	r3, r1
100479a8:	3b08      	subs	r3, #8
100479aa:	089b      	lsrs	r3, r3, #2
100479ac:	3306      	adds	r3, #6
100479ae:	009b      	lsls	r3, r3, #2
100479b0:	18d3      	adds	r3, r2, r3
100479b2:	3304      	adds	r3, #4
100479b4:	681b      	ldr	r3, [r3, #0]
100479b6:	1dfa      	adds	r2, r7, #7
100479b8:	7812      	ldrb	r2, [r2, #0]
100479ba:	0011      	movs	r1, r2
100479bc:	2203      	movs	r2, #3
100479be:	400a      	ands	r2, r1
100479c0:	00d2      	lsls	r2, r2, #3
100479c2:	21ff      	movs	r1, #255	@ 0xff
100479c4:	4091      	lsls	r1, r2
100479c6:	000a      	movs	r2, r1
100479c8:	43d2      	mvns	r2, r2
100479ca:	401a      	ands	r2, r3
100479cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100479ce:	683b      	ldr	r3, [r7, #0]
100479d0:	019b      	lsls	r3, r3, #6
100479d2:	22ff      	movs	r2, #255	@ 0xff
100479d4:	401a      	ands	r2, r3
100479d6:	1dfb      	adds	r3, r7, #7
100479d8:	781b      	ldrb	r3, [r3, #0]
100479da:	0018      	movs	r0, r3
100479dc:	2303      	movs	r3, #3
100479de:	4003      	ands	r3, r0
100479e0:	00db      	lsls	r3, r3, #3
100479e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100479e4:	4809      	ldr	r0, [pc, #36]	@ (10047a0c <__NVIC_SetPriority+0xd8>)
100479e6:	1dfb      	adds	r3, r7, #7
100479e8:	781b      	ldrb	r3, [r3, #0]
100479ea:	001c      	movs	r4, r3
100479ec:	230f      	movs	r3, #15
100479ee:	4023      	ands	r3, r4
100479f0:	3b08      	subs	r3, #8
100479f2:	089b      	lsrs	r3, r3, #2
100479f4:	430a      	orrs	r2, r1
100479f6:	3306      	adds	r3, #6
100479f8:	009b      	lsls	r3, r3, #2
100479fa:	18c3      	adds	r3, r0, r3
100479fc:	3304      	adds	r3, #4
100479fe:	601a      	str	r2, [r3, #0]
}
10047a00:	46c0      	nop			@ (mov r8, r8)
10047a02:	46bd      	mov	sp, r7
10047a04:	b003      	add	sp, #12
10047a06:	bd90      	pop	{r4, r7, pc}
10047a08:	e000e100 	.word	0xe000e100
10047a0c:	e000ed00 	.word	0xe000ed00

10047a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10047a10:	b580      	push	{r7, lr}
10047a12:	b082      	sub	sp, #8
10047a14:	af00      	add	r7, sp, #0
10047a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10047a18:	687b      	ldr	r3, [r7, #4]
10047a1a:	1e5a      	subs	r2, r3, #1
10047a1c:	2380      	movs	r3, #128	@ 0x80
10047a1e:	045b      	lsls	r3, r3, #17
10047a20:	429a      	cmp	r2, r3
10047a22:	d301      	bcc.n	10047a28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
10047a24:	2301      	movs	r3, #1
10047a26:	e010      	b.n	10047a4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10047a28:	4b0a      	ldr	r3, [pc, #40]	@ (10047a54 <SysTick_Config+0x44>)
10047a2a:	687a      	ldr	r2, [r7, #4]
10047a2c:	3a01      	subs	r2, #1
10047a2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10047a30:	2301      	movs	r3, #1
10047a32:	425b      	negs	r3, r3
10047a34:	2103      	movs	r1, #3
10047a36:	0018      	movs	r0, r3
10047a38:	f7ff ff7c 	bl	10047934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10047a3c:	4b05      	ldr	r3, [pc, #20]	@ (10047a54 <SysTick_Config+0x44>)
10047a3e:	2200      	movs	r2, #0
10047a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10047a42:	4b04      	ldr	r3, [pc, #16]	@ (10047a54 <SysTick_Config+0x44>)
10047a44:	2207      	movs	r2, #7
10047a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10047a48:	2300      	movs	r3, #0
}
10047a4a:	0018      	movs	r0, r3
10047a4c:	46bd      	mov	sp, r7
10047a4e:	b002      	add	sp, #8
10047a50:	bd80      	pop	{r7, pc}
10047a52:	46c0      	nop			@ (mov r8, r8)
10047a54:	e000e010 	.word	0xe000e010

10047a58 <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10047a58:	b580      	push	{r7, lr}
10047a5a:	b084      	sub	sp, #16
10047a5c:	af00      	add	r7, sp, #0
10047a5e:	60b9      	str	r1, [r7, #8]
10047a60:	607a      	str	r2, [r7, #4]
10047a62:	210f      	movs	r1, #15
10047a64:	187b      	adds	r3, r7, r1
10047a66:	1c02      	adds	r2, r0, #0
10047a68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
10047a6a:	68ba      	ldr	r2, [r7, #8]
10047a6c:	187b      	adds	r3, r7, r1
10047a6e:	781b      	ldrb	r3, [r3, #0]
10047a70:	b25b      	sxtb	r3, r3
10047a72:	0011      	movs	r1, r2
10047a74:	0018      	movs	r0, r3
10047a76:	f7ff ff5d 	bl	10047934 <__NVIC_SetPriority>
}
10047a7a:	46c0      	nop			@ (mov r8, r8)
10047a7c:	46bd      	mov	sp, r7
10047a7e:	b004      	add	sp, #16
10047a80:	bd80      	pop	{r7, pc}

10047a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10047a82:	b580      	push	{r7, lr}
10047a84:	b082      	sub	sp, #8
10047a86:	af00      	add	r7, sp, #0
10047a88:	0002      	movs	r2, r0
10047a8a:	1dfb      	adds	r3, r7, #7
10047a8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10047a8e:	1dfb      	adds	r3, r7, #7
10047a90:	781b      	ldrb	r3, [r3, #0]
10047a92:	b25b      	sxtb	r3, r3
10047a94:	0018      	movs	r0, r3
10047a96:	f7ff ff33 	bl	10047900 <__NVIC_EnableIRQ>
}
10047a9a:	46c0      	nop			@ (mov r8, r8)
10047a9c:	46bd      	mov	sp, r7
10047a9e:	b002      	add	sp, #8
10047aa0:	bd80      	pop	{r7, pc}

10047aa2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10047aa2:	b580      	push	{r7, lr}
10047aa4:	b082      	sub	sp, #8
10047aa6:	af00      	add	r7, sp, #0
10047aa8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10047aaa:	687b      	ldr	r3, [r7, #4]
10047aac:	0018      	movs	r0, r3
10047aae:	f7ff ffaf 	bl	10047a10 <SysTick_Config>
10047ab2:	0003      	movs	r3, r0
}
10047ab4:	0018      	movs	r0, r3
10047ab6:	46bd      	mov	sp, r7
10047ab8:	b002      	add	sp, #8
10047aba:	bd80      	pop	{r7, pc}

10047abc <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
10047abc:	b580      	push	{r7, lr}
10047abe:	b084      	sub	sp, #16
10047ac0:	af00      	add	r7, sp, #0
10047ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
10047ac4:	210f      	movs	r1, #15
10047ac6:	187b      	adds	r3, r7, r1
10047ac8:	2200      	movs	r2, #0
10047aca:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
10047acc:	687b      	ldr	r3, [r7, #4]
10047ace:	2225      	movs	r2, #37	@ 0x25
10047ad0:	5c9b      	ldrb	r3, [r3, r2]
10047ad2:	b2db      	uxtb	r3, r3
10047ad4:	2b02      	cmp	r3, #2
10047ad6:	d006      	beq.n	10047ae6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
10047ad8:	687b      	ldr	r3, [r7, #4]
10047ada:	2204      	movs	r2, #4
10047adc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
10047ade:	187b      	adds	r3, r7, r1
10047ae0:	2201      	movs	r2, #1
10047ae2:	701a      	strb	r2, [r3, #0]
10047ae4:	e02a      	b.n	10047b3c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
10047ae6:	687b      	ldr	r3, [r7, #4]
10047ae8:	681b      	ldr	r3, [r3, #0]
10047aea:	681a      	ldr	r2, [r3, #0]
10047aec:	687b      	ldr	r3, [r7, #4]
10047aee:	681b      	ldr	r3, [r3, #0]
10047af0:	210e      	movs	r1, #14
10047af2:	438a      	bics	r2, r1
10047af4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
10047af6:	687b      	ldr	r3, [r7, #4]
10047af8:	681b      	ldr	r3, [r3, #0]
10047afa:	681a      	ldr	r2, [r3, #0]
10047afc:	687b      	ldr	r3, [r7, #4]
10047afe:	681b      	ldr	r3, [r3, #0]
10047b00:	2101      	movs	r1, #1
10047b02:	438a      	bics	r2, r1
10047b04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x3cU));
10047b06:	687b      	ldr	r3, [r7, #4]
10047b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10047b0a:	223c      	movs	r2, #60	@ 0x3c
10047b0c:	401a      	ands	r2, r3
10047b0e:	687b      	ldr	r3, [r7, #4]
10047b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10047b12:	2101      	movs	r1, #1
10047b14:	4091      	lsls	r1, r2
10047b16:	000a      	movs	r2, r1
10047b18:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
10047b1a:	687b      	ldr	r3, [r7, #4]
10047b1c:	2225      	movs	r2, #37	@ 0x25
10047b1e:	2101      	movs	r1, #1
10047b20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
10047b22:	687b      	ldr	r3, [r7, #4]
10047b24:	2224      	movs	r2, #36	@ 0x24
10047b26:	2100      	movs	r1, #0
10047b28:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
10047b2a:	687b      	ldr	r3, [r7, #4]
10047b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10047b2e:	2b00      	cmp	r3, #0
10047b30:	d004      	beq.n	10047b3c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
10047b32:	687b      	ldr	r3, [r7, #4]
10047b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10047b36:	687a      	ldr	r2, [r7, #4]
10047b38:	0010      	movs	r0, r2
10047b3a:	4798      	blx	r3
    }
  }
  return status;
10047b3c:	230f      	movs	r3, #15
10047b3e:	18fb      	adds	r3, r7, r3
10047b40:	781b      	ldrb	r3, [r3, #0]
}
10047b42:	0018      	movs	r0, r3
10047b44:	46bd      	mov	sp, r7
10047b46:	b004      	add	sp, #16
10047b48:	bd80      	pop	{r7, pc}

10047b4a <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
10047b4a:	b580      	push	{r7, lr}
10047b4c:	b082      	sub	sp, #8
10047b4e:	af00      	add	r7, sp, #0
10047b50:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
10047b52:	687b      	ldr	r3, [r7, #4]
10047b54:	2225      	movs	r2, #37	@ 0x25
10047b56:	5c9b      	ldrb	r3, [r3, r2]
10047b58:	b2db      	uxtb	r3, r3
}
10047b5a:	0018      	movs	r0, r3
10047b5c:	46bd      	mov	sp, r7
10047b5e:	b002      	add	sp, #8
10047b60:	bd80      	pop	{r7, pc}
	...

10047b64 <HAL_FLASH_Program>:
  *                are stored the data for the burst program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
10047b64:	b5b0      	push	{r4, r5, r7, lr}
10047b66:	b086      	sub	sp, #24
10047b68:	af00      	add	r7, sp, #0
10047b6a:	60f8      	str	r0, [r7, #12]
10047b6c:	60b9      	str	r1, [r7, #8]
10047b6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_32BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
10047b70:	4b1d      	ldr	r3, [pc, #116]	@ (10047be8 <HAL_FLASH_Program+0x84>)
10047b72:	781b      	ldrb	r3, [r3, #0]
10047b74:	2b01      	cmp	r3, #1
10047b76:	d101      	bne.n	10047b7c <HAL_FLASH_Program+0x18>
10047b78:	2302      	movs	r3, #2
10047b7a:	e031      	b.n	10047be0 <HAL_FLASH_Program+0x7c>
10047b7c:	4b1a      	ldr	r3, [pc, #104]	@ (10047be8 <HAL_FLASH_Program+0x84>)
10047b7e:	2201      	movs	r2, #1
10047b80:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
10047b82:	4b19      	ldr	r3, [pc, #100]	@ (10047be8 <HAL_FLASH_Program+0x84>)
10047b84:	2200      	movs	r2, #0
10047b86:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10047b88:	2517      	movs	r5, #23
10047b8a:	197c      	adds	r4, r7, r5
10047b8c:	23fa      	movs	r3, #250	@ 0xfa
10047b8e:	009b      	lsls	r3, r3, #2
10047b90:	0018      	movs	r0, r3
10047b92:	f000 f82b 	bl	10047bec <FLASH_WaitForLastOperation>
10047b96:	0003      	movs	r3, r0
10047b98:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
10047b9a:	197b      	adds	r3, r7, r5
10047b9c:	781b      	ldrb	r3, [r3, #0]
10047b9e:	2b00      	cmp	r3, #0
10047ba0:	d118      	bne.n	10047bd4 <HAL_FLASH_Program+0x70>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
10047ba2:	68fb      	ldr	r3, [r7, #12]
10047ba4:	2b00      	cmp	r3, #0
10047ba6:	d106      	bne.n	10047bb6 <HAL_FLASH_Program+0x52>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program a word (32-bit) at a specified address */
      FLASH_Program_Word(Address, Data);
10047ba8:	687a      	ldr	r2, [r7, #4]
10047baa:	68bb      	ldr	r3, [r7, #8]
10047bac:	0011      	movs	r1, r2
10047bae:	0018      	movs	r0, r3
10047bb0:	f000 f856 	bl	10047c60 <FLASH_Program_Word>
10047bb4:	e005      	b.n	10047bc2 <HAL_FLASH_Program+0x5e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program 4 word starting from a specified address */
      FLASH_Program_Burst(Address, Data);
10047bb6:	687a      	ldr	r2, [r7, #4]
10047bb8:	68bb      	ldr	r3, [r7, #8]
10047bba:	0011      	movs	r1, r2
10047bbc:	0018      	movs	r0, r3
10047bbe:	f000 f871 	bl	10047ca4 <FLASH_Program_Burst>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10047bc2:	2317      	movs	r3, #23
10047bc4:	18fc      	adds	r4, r7, r3
10047bc6:	23fa      	movs	r3, #250	@ 0xfa
10047bc8:	009b      	lsls	r3, r3, #2
10047bca:	0018      	movs	r0, r3
10047bcc:	f000 f80e 	bl	10047bec <FLASH_WaitForLastOperation>
10047bd0:	0003      	movs	r3, r0
10047bd2:	7023      	strb	r3, [r4, #0]

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
10047bd4:	4b04      	ldr	r3, [pc, #16]	@ (10047be8 <HAL_FLASH_Program+0x84>)
10047bd6:	2200      	movs	r2, #0
10047bd8:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
10047bda:	2317      	movs	r3, #23
10047bdc:	18fb      	adds	r3, r7, r3
10047bde:	781b      	ldrb	r3, [r3, #0]
}
10047be0:	0018      	movs	r0, r3
10047be2:	46bd      	mov	sp, r7
10047be4:	b006      	add	sp, #24
10047be6:	bdb0      	pop	{r4, r5, r7, pc}
10047be8:	200021bc 	.word	0x200021bc

10047bec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
10047bec:	b580      	push	{r7, lr}
10047bee:	b084      	sub	sp, #16
10047bf0:	af00      	add	r7, sp, #0
10047bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10047bf4:	f7ff fe4c 	bl	10047890 <HAL_GetTick>
10047bf8:	0003      	movs	r3, r0
10047bfa:	60fb      	str	r3, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on CMDDONE flag to be set.
     If the FLASH operation fails, an error flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
10047bfc:	e00c      	b.n	10047c18 <FLASH_WaitForLastOperation+0x2c>
  {
    if (Timeout != HAL_MAX_DELAY)
10047bfe:	687b      	ldr	r3, [r7, #4]
10047c00:	3301      	adds	r3, #1
10047c02:	d009      	beq.n	10047c18 <FLASH_WaitForLastOperation+0x2c>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
10047c04:	f7ff fe44 	bl	10047890 <HAL_GetTick>
10047c08:	0002      	movs	r2, r0
10047c0a:	68fb      	ldr	r3, [r7, #12]
10047c0c:	1ad3      	subs	r3, r2, r3
10047c0e:	687a      	ldr	r2, [r7, #4]
10047c10:	429a      	cmp	r2, r3
10047c12:	d801      	bhi.n	10047c18 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
10047c14:	2303      	movs	r3, #3
10047c16:	e01b      	b.n	10047c50 <FLASH_WaitForLastOperation+0x64>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
10047c18:	4b0f      	ldr	r3, [pc, #60]	@ (10047c58 <FLASH_WaitForLastOperation+0x6c>)
10047c1a:	691b      	ldr	r3, [r3, #16]
10047c1c:	2201      	movs	r2, #1
10047c1e:	4013      	ands	r3, r2
10047c20:	2b01      	cmp	r3, #1
10047c22:	d1ec      	bne.n	10047bfe <FLASH_WaitForLastOperation+0x12>
      }
    }
  }

  /* Check flash errors */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS))
10047c24:	4b0c      	ldr	r3, [pc, #48]	@ (10047c58 <FLASH_WaitForLastOperation+0x6c>)
10047c26:	691b      	ldr	r3, [r3, #16]
10047c28:	220c      	movs	r2, #12
10047c2a:	4013      	ands	r3, r2
10047c2c:	2b0c      	cmp	r3, #12
10047c2e:	d10e      	bne.n	10047c4e <FLASH_WaitForLastOperation+0x62>
  {
    /* Save the error code */
    pFlash.ErrorCode |= FLASH->IRQSTAT;
10047c30:	4b09      	ldr	r3, [pc, #36]	@ (10047c58 <FLASH_WaitForLastOperation+0x6c>)
10047c32:	689a      	ldr	r2, [r3, #8]
10047c34:	4b09      	ldr	r3, [pc, #36]	@ (10047c5c <FLASH_WaitForLastOperation+0x70>)
10047c36:	685b      	ldr	r3, [r3, #4]
10047c38:	431a      	orrs	r2, r3
10047c3a:	4b08      	ldr	r3, [pc, #32]	@ (10047c5c <FLASH_WaitForLastOperation+0x70>)
10047c3c:	605a      	str	r2, [r3, #4]

    /* Clear error flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
10047c3e:	4b06      	ldr	r3, [pc, #24]	@ (10047c58 <FLASH_WaitForLastOperation+0x6c>)
10047c40:	691a      	ldr	r2, [r3, #16]
10047c42:	4b05      	ldr	r3, [pc, #20]	@ (10047c58 <FLASH_WaitForLastOperation+0x6c>)
10047c44:	210c      	movs	r1, #12
10047c46:	430a      	orrs	r2, r1
10047c48:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
10047c4a:	2301      	movs	r3, #1
10047c4c:	e000      	b.n	10047c50 <FLASH_WaitForLastOperation+0x64>
  }

  return HAL_OK;
10047c4e:	2300      	movs	r3, #0
}
10047c50:	0018      	movs	r0, r3
10047c52:	46bd      	mov	sp, r7
10047c54:	b004      	add	sp, #16
10047c56:	bd80      	pop	{r7, pc}
10047c58:	40001000 	.word	0x40001000
10047c5c:	200021bc 	.word	0x200021bc

10047c60 <FLASH_Program_Word>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
10047c60:	b580      	push	{r7, lr}
10047c62:	b082      	sub	sp, #8
10047c64:	af00      	add	r7, sp, #0
10047c66:	6078      	str	r0, [r7, #4]
10047c68:	6039      	str	r1, [r7, #0]
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10047c6a:	4b0c      	ldr	r3, [pc, #48]	@ (10047c9c <FLASH_Program_Word+0x3c>)
10047c6c:	691a      	ldr	r2, [r3, #16]
10047c6e:	4b0b      	ldr	r3, [pc, #44]	@ (10047c9c <FLASH_Program_Word+0x3c>)
10047c70:	210f      	movs	r1, #15
10047c72:	430a      	orrs	r2, r1
10047c74:	611a      	str	r2, [r3, #16]

  /* Load the word address */

  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
10047c76:	687b      	ldr	r3, [r7, #4]
10047c78:	4a09      	ldr	r2, [pc, #36]	@ (10047ca0 <FLASH_Program_Word+0x40>)
10047c7a:	4694      	mov	ip, r2
10047c7c:	4463      	add	r3, ip
10047c7e:	089a      	lsrs	r2, r3, #2
10047c80:	4b06      	ldr	r3, [pc, #24]	@ (10047c9c <FLASH_Program_Word+0x3c>)
10047c82:	0412      	lsls	r2, r2, #16
10047c84:	0c12      	lsrs	r2, r2, #16
10047c86:	619a      	str	r2, [r3, #24]

  /* Load the data to program */
  FLASH->DATA0 = Data;
10047c88:	4b04      	ldr	r3, [pc, #16]	@ (10047c9c <FLASH_Program_Word+0x3c>)
10047c8a:	683a      	ldr	r2, [r7, #0]
10047c8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Load the WRITE command */
  FLASH->COMMAND = FLASH_CMD_WRITE;
10047c8e:	4b03      	ldr	r3, [pc, #12]	@ (10047c9c <FLASH_Program_Word+0x3c>)
10047c90:	2233      	movs	r2, #51	@ 0x33
10047c92:	601a      	str	r2, [r3, #0]
}
10047c94:	46c0      	nop			@ (mov r8, r8)
10047c96:	46bd      	mov	sp, r7
10047c98:	b002      	add	sp, #8
10047c9a:	bd80      	pop	{r7, pc}
10047c9c:	40001000 	.word	0x40001000
10047ca0:	effc0000 	.word	0xeffc0000

10047ca4 <FLASH_Program_Burst>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Burst(uint32_t Address, uint32_t DataAddress)
{
10047ca4:	b580      	push	{r7, lr}
10047ca6:	b084      	sub	sp, #16
10047ca8:	af00      	add	r7, sp, #0
10047caa:	6078      	str	r0, [r7, #4]
10047cac:	6039      	str	r1, [r7, #0]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
10047cae:	683b      	ldr	r3, [r7, #0]
10047cb0:	60fb      	str	r3, [r7, #12]

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10047cb2:	4b17      	ldr	r3, [pc, #92]	@ (10047d10 <FLASH_Program_Burst+0x6c>)
10047cb4:	691a      	ldr	r2, [r3, #16]
10047cb6:	4b16      	ldr	r3, [pc, #88]	@ (10047d10 <FLASH_Program_Burst+0x6c>)
10047cb8:	210f      	movs	r1, #15
10047cba:	430a      	orrs	r2, r1
10047cbc:	611a      	str	r2, [r3, #16]

  /* Load the word address */
  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
10047cbe:	687b      	ldr	r3, [r7, #4]
10047cc0:	4a14      	ldr	r2, [pc, #80]	@ (10047d14 <FLASH_Program_Burst+0x70>)
10047cc2:	4694      	mov	ip, r2
10047cc4:	4463      	add	r3, ip
10047cc6:	089a      	lsrs	r2, r3, #2
10047cc8:	4b11      	ldr	r3, [pc, #68]	@ (10047d10 <FLASH_Program_Burst+0x6c>)
10047cca:	0412      	lsls	r2, r2, #16
10047ccc:	0c12      	lsrs	r2, r2, #16
10047cce:	619a      	str	r2, [r3, #24]
  FLASH->DATA0 = *src_addr;
10047cd0:	4a0f      	ldr	r2, [pc, #60]	@ (10047d10 <FLASH_Program_Burst+0x6c>)
10047cd2:	68fb      	ldr	r3, [r7, #12]
10047cd4:	681b      	ldr	r3, [r3, #0]
10047cd6:	6413      	str	r3, [r2, #64]	@ 0x40
  src_addr = src_addr + 1;
10047cd8:	68fb      	ldr	r3, [r7, #12]
10047cda:	3304      	adds	r3, #4
10047cdc:	60fb      	str	r3, [r7, #12]
  FLASH->DATA1 = *src_addr;
10047cde:	4a0c      	ldr	r2, [pc, #48]	@ (10047d10 <FLASH_Program_Burst+0x6c>)
10047ce0:	68fb      	ldr	r3, [r7, #12]
10047ce2:	681b      	ldr	r3, [r3, #0]
10047ce4:	6453      	str	r3, [r2, #68]	@ 0x44
  src_addr = src_addr + 1;
10047ce6:	68fb      	ldr	r3, [r7, #12]
10047ce8:	3304      	adds	r3, #4
10047cea:	60fb      	str	r3, [r7, #12]
  FLASH->DATA2 = *src_addr;
10047cec:	4a08      	ldr	r2, [pc, #32]	@ (10047d10 <FLASH_Program_Burst+0x6c>)
10047cee:	68fb      	ldr	r3, [r7, #12]
10047cf0:	681b      	ldr	r3, [r3, #0]
10047cf2:	6493      	str	r3, [r2, #72]	@ 0x48
  src_addr = src_addr + 1;
10047cf4:	68fb      	ldr	r3, [r7, #12]
10047cf6:	3304      	adds	r3, #4
10047cf8:	60fb      	str	r3, [r7, #12]
  FLASH->DATA3 = *src_addr;
10047cfa:	4a05      	ldr	r2, [pc, #20]	@ (10047d10 <FLASH_Program_Burst+0x6c>)
10047cfc:	68fb      	ldr	r3, [r7, #12]
10047cfe:	681b      	ldr	r3, [r3, #0]
10047d00:	64d3      	str	r3, [r2, #76]	@ 0x4c

  /* Load the BURST WRITE command */
  FLASH->COMMAND = FLASH_CMD_BURSTWRITE;
10047d02:	4b03      	ldr	r3, [pc, #12]	@ (10047d10 <FLASH_Program_Burst+0x6c>)
10047d04:	22cc      	movs	r2, #204	@ 0xcc
10047d06:	601a      	str	r2, [r3, #0]
}
10047d08:	46c0      	nop			@ (mov r8, r8)
10047d0a:	46bd      	mov	sp, r7
10047d0c:	b004      	add	sp, #16
10047d0e:	bd80      	pop	{r7, pc}
10047d10:	40001000 	.word	0x40001000
10047d14:	effc0000 	.word	0xeffc0000

10047d18 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
10047d18:	b5b0      	push	{r4, r5, r7, lr}
10047d1a:	b084      	sub	sp, #16
10047d1c:	af00      	add	r7, sp, #0
10047d1e:	6078      	str	r0, [r7, #4]
10047d20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPE_ERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
10047d22:	4b27      	ldr	r3, [pc, #156]	@ (10047dc0 <HAL_FLASHEx_Erase+0xa8>)
10047d24:	781b      	ldrb	r3, [r3, #0]
10047d26:	2b01      	cmp	r3, #1
10047d28:	d101      	bne.n	10047d2e <HAL_FLASHEx_Erase+0x16>
10047d2a:	2302      	movs	r3, #2
10047d2c:	e043      	b.n	10047db6 <HAL_FLASHEx_Erase+0x9e>
10047d2e:	4b24      	ldr	r3, [pc, #144]	@ (10047dc0 <HAL_FLASHEx_Erase+0xa8>)
10047d30:	2201      	movs	r2, #1
10047d32:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
10047d34:	4b22      	ldr	r3, [pc, #136]	@ (10047dc0 <HAL_FLASHEx_Erase+0xa8>)
10047d36:	2200      	movs	r2, #0
10047d38:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
10047d3a:	687b      	ldr	r3, [r7, #4]
10047d3c:	681b      	ldr	r3, [r3, #0]
10047d3e:	2bff      	cmp	r3, #255	@ 0xff
10047d40:	d10b      	bne.n	10047d5a <HAL_FLASHEx_Erase+0x42>
  {
    /* Mass erase to be done */
    FLASH_MassErase();
10047d42:	f000 f83f 	bl	10047dc4 <FLASH_MassErase>

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10047d46:	230f      	movs	r3, #15
10047d48:	18fc      	adds	r4, r7, r3
10047d4a:	23fa      	movs	r3, #250	@ 0xfa
10047d4c:	009b      	lsls	r3, r3, #2
10047d4e:	0018      	movs	r0, r3
10047d50:	f7ff ff4c 	bl	10047bec <FLASH_WaitForLastOperation>
10047d54:	0003      	movs	r3, r0
10047d56:	7023      	strb	r3, [r4, #0]
10047d58:	e027      	b.n	10047daa <HAL_FLASHEx_Erase+0x92>
  }
  else
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
10047d5a:	683b      	ldr	r3, [r7, #0]
10047d5c:	2201      	movs	r2, #1
10047d5e:	4252      	negs	r2, r2
10047d60:	601a      	str	r2, [r3, #0]

    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
10047d62:	687b      	ldr	r3, [r7, #4]
10047d64:	685b      	ldr	r3, [r3, #4]
10047d66:	60bb      	str	r3, [r7, #8]
10047d68:	e017      	b.n	10047d9a <HAL_FLASHEx_Erase+0x82>
    {
      /* Start erase page */
      FLASH_PageErase(index);
10047d6a:	68bb      	ldr	r3, [r7, #8]
10047d6c:	0018      	movs	r0, r3
10047d6e:	f000 f839 	bl	10047de4 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10047d72:	250f      	movs	r5, #15
10047d74:	197c      	adds	r4, r7, r5
10047d76:	23fa      	movs	r3, #250	@ 0xfa
10047d78:	009b      	lsls	r3, r3, #2
10047d7a:	0018      	movs	r0, r3
10047d7c:	f7ff ff36 	bl	10047bec <FLASH_WaitForLastOperation>
10047d80:	0003      	movs	r3, r0
10047d82:	7023      	strb	r3, [r4, #0]

      if (status != HAL_OK)
10047d84:	197b      	adds	r3, r7, r5
10047d86:	781b      	ldrb	r3, [r3, #0]
10047d88:	2b00      	cmp	r3, #0
10047d8a:	d003      	beq.n	10047d94 <HAL_FLASHEx_Erase+0x7c>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = index;
10047d8c:	683b      	ldr	r3, [r7, #0]
10047d8e:	68ba      	ldr	r2, [r7, #8]
10047d90:	601a      	str	r2, [r3, #0]
        break;
10047d92:	e00a      	b.n	10047daa <HAL_FLASHEx_Erase+0x92>
    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
10047d94:	68bb      	ldr	r3, [r7, #8]
10047d96:	3301      	adds	r3, #1
10047d98:	60bb      	str	r3, [r7, #8]
10047d9a:	687b      	ldr	r3, [r7, #4]
10047d9c:	685a      	ldr	r2, [r3, #4]
10047d9e:	687b      	ldr	r3, [r7, #4]
10047da0:	689b      	ldr	r3, [r3, #8]
10047da2:	18d3      	adds	r3, r2, r3
10047da4:	68ba      	ldr	r2, [r7, #8]
10047da6:	429a      	cmp	r2, r3
10047da8:	d3df      	bcc.n	10047d6a <HAL_FLASHEx_Erase+0x52>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
10047daa:	4b05      	ldr	r3, [pc, #20]	@ (10047dc0 <HAL_FLASHEx_Erase+0xa8>)
10047dac:	2200      	movs	r2, #0
10047dae:	701a      	strb	r2, [r3, #0]

  return status;
10047db0:	230f      	movs	r3, #15
10047db2:	18fb      	adds	r3, r7, r3
10047db4:	781b      	ldrb	r3, [r3, #0]
}
10047db6:	0018      	movs	r0, r3
10047db8:	46bd      	mov	sp, r7
10047dba:	b004      	add	sp, #16
10047dbc:	bdb0      	pop	{r4, r5, r7, pc}
10047dbe:	46c0      	nop			@ (mov r8, r8)
10047dc0:	200021bc 	.word	0x200021bc

10047dc4 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
10047dc4:	b580      	push	{r7, lr}
10047dc6:	af00      	add	r7, sp, #0
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10047dc8:	4b05      	ldr	r3, [pc, #20]	@ (10047de0 <FLASH_MassErase+0x1c>)
10047dca:	691a      	ldr	r2, [r3, #16]
10047dcc:	4b04      	ldr	r3, [pc, #16]	@ (10047de0 <FLASH_MassErase+0x1c>)
10047dce:	210f      	movs	r1, #15
10047dd0:	430a      	orrs	r2, r1
10047dd2:	611a      	str	r2, [r3, #16]

  /* MASSERASE command */
  FLASH->COMMAND = FLASH_CMD_MASSERASE;
10047dd4:	4b02      	ldr	r3, [pc, #8]	@ (10047de0 <FLASH_MassErase+0x1c>)
10047dd6:	2222      	movs	r2, #34	@ 0x22
10047dd8:	601a      	str	r2, [r3, #0]
}
10047dda:	46c0      	nop			@ (mov r8, r8)
10047ddc:	46bd      	mov	sp, r7
10047dde:	bd80      	pop	{r7, pc}
10047de0:	40001000 	.word	0x40001000

10047de4 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
10047de4:	b580      	push	{r7, lr}
10047de6:	b082      	sub	sp, #8
10047de8:	af00      	add	r7, sp, #0
10047dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10047dec:	4b09      	ldr	r3, [pc, #36]	@ (10047e14 <FLASH_PageErase+0x30>)
10047dee:	691a      	ldr	r2, [r3, #16]
10047df0:	4b08      	ldr	r3, [pc, #32]	@ (10047e14 <FLASH_PageErase+0x30>)
10047df2:	210f      	movs	r1, #15
10047df4:	430a      	orrs	r2, r1
10047df6:	611a      	str	r2, [r3, #16]

  FLASH->ADDRESS = (((Page * FLASH_PAGE_SIZE) >> 2) & FLASH_SIZE_MASK);
10047df8:	687b      	ldr	r3, [r7, #4]
10047dfa:	02db      	lsls	r3, r3, #11
10047dfc:	089a      	lsrs	r2, r3, #2
10047dfe:	4b05      	ldr	r3, [pc, #20]	@ (10047e14 <FLASH_PageErase+0x30>)
10047e00:	0412      	lsls	r2, r2, #16
10047e02:	0c12      	lsrs	r2, r2, #16
10047e04:	619a      	str	r2, [r3, #24]

  /* Write the ERASE command */
  FLASH->COMMAND = FLASH_CMD_ERASE_PAGES;
10047e06:	4b03      	ldr	r3, [pc, #12]	@ (10047e14 <FLASH_PageErase+0x30>)
10047e08:	2211      	movs	r2, #17
10047e0a:	601a      	str	r2, [r3, #0]
}
10047e0c:	46c0      	nop			@ (mov r8, r8)
10047e0e:	46bd      	mov	sp, r7
10047e10:	b002      	add	sp, #8
10047e12:	bd80      	pop	{r7, pc}
10047e14:	40001000 	.word	0x40001000

10047e18 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10047e18:	b580      	push	{r7, lr}
10047e1a:	b086      	sub	sp, #24
10047e1c:	af00      	add	r7, sp, #0
10047e1e:	6078      	str	r0, [r7, #4]
10047e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
10047e22:	2300      	movs	r3, #0
10047e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
10047e26:	e190      	b.n	1004814a <HAL_GPIO_Init+0x332>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
10047e28:	683b      	ldr	r3, [r7, #0]
10047e2a:	681b      	ldr	r3, [r3, #0]
10047e2c:	2101      	movs	r1, #1
10047e2e:	697a      	ldr	r2, [r7, #20]
10047e30:	4091      	lsls	r1, r2
10047e32:	000a      	movs	r2, r1
10047e34:	4013      	ands	r3, r2
10047e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
10047e38:	68fb      	ldr	r3, [r7, #12]
10047e3a:	2b00      	cmp	r3, #0
10047e3c:	d100      	bne.n	10047e40 <HAL_GPIO_Init+0x28>
10047e3e:	e181      	b.n	10048144 <HAL_GPIO_Init+0x32c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
10047e40:	683b      	ldr	r3, [r7, #0]
10047e42:	685b      	ldr	r3, [r3, #4]
10047e44:	2203      	movs	r2, #3
10047e46:	4013      	ands	r3, r2
10047e48:	2b01      	cmp	r3, #1
10047e4a:	d005      	beq.n	10047e58 <HAL_GPIO_Init+0x40>
10047e4c:	683b      	ldr	r3, [r7, #0]
10047e4e:	685b      	ldr	r3, [r3, #4]
10047e50:	2203      	movs	r2, #3
10047e52:	4013      	ands	r3, r2
10047e54:	2b02      	cmp	r3, #2
10047e56:	d130      	bne.n	10047eba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10047e58:	687b      	ldr	r3, [r7, #4]
10047e5a:	689b      	ldr	r3, [r3, #8]
10047e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
10047e5e:	697b      	ldr	r3, [r7, #20]
10047e60:	005b      	lsls	r3, r3, #1
10047e62:	2203      	movs	r2, #3
10047e64:	409a      	lsls	r2, r3
10047e66:	0013      	movs	r3, r2
10047e68:	43da      	mvns	r2, r3
10047e6a:	693b      	ldr	r3, [r7, #16]
10047e6c:	4013      	ands	r3, r2
10047e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
10047e70:	683b      	ldr	r3, [r7, #0]
10047e72:	68da      	ldr	r2, [r3, #12]
10047e74:	697b      	ldr	r3, [r7, #20]
10047e76:	005b      	lsls	r3, r3, #1
10047e78:	409a      	lsls	r2, r3
10047e7a:	0013      	movs	r3, r2
10047e7c:	693a      	ldr	r2, [r7, #16]
10047e7e:	4313      	orrs	r3, r2
10047e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
10047e82:	687b      	ldr	r3, [r7, #4]
10047e84:	693a      	ldr	r2, [r7, #16]
10047e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10047e88:	687b      	ldr	r3, [r7, #4]
10047e8a:	685b      	ldr	r3, [r3, #4]
10047e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10047e8e:	2201      	movs	r2, #1
10047e90:	697b      	ldr	r3, [r7, #20]
10047e92:	409a      	lsls	r2, r3
10047e94:	0013      	movs	r3, r2
10047e96:	43da      	mvns	r2, r3
10047e98:	693b      	ldr	r3, [r7, #16]
10047e9a:	4013      	ands	r3, r2
10047e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
10047e9e:	683b      	ldr	r3, [r7, #0]
10047ea0:	685b      	ldr	r3, [r3, #4]
10047ea2:	091b      	lsrs	r3, r3, #4
10047ea4:	2201      	movs	r2, #1
10047ea6:	401a      	ands	r2, r3
10047ea8:	697b      	ldr	r3, [r7, #20]
10047eaa:	409a      	lsls	r2, r3
10047eac:	0013      	movs	r3, r2
10047eae:	693a      	ldr	r2, [r7, #16]
10047eb0:	4313      	orrs	r3, r2
10047eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
10047eb4:	687b      	ldr	r3, [r7, #4]
10047eb6:	693a      	ldr	r2, [r7, #16]
10047eb8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
10047eba:	683b      	ldr	r3, [r7, #0]
10047ebc:	685b      	ldr	r3, [r3, #4]
10047ebe:	2203      	movs	r2, #3
10047ec0:	4013      	ands	r3, r2
10047ec2:	2b03      	cmp	r3, #3
10047ec4:	d017      	beq.n	10047ef6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
10047ec6:	687b      	ldr	r3, [r7, #4]
10047ec8:	68db      	ldr	r3, [r3, #12]
10047eca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
10047ecc:	697b      	ldr	r3, [r7, #20]
10047ece:	005b      	lsls	r3, r3, #1
10047ed0:	2203      	movs	r2, #3
10047ed2:	409a      	lsls	r2, r3
10047ed4:	0013      	movs	r3, r2
10047ed6:	43da      	mvns	r2, r3
10047ed8:	693b      	ldr	r3, [r7, #16]
10047eda:	4013      	ands	r3, r2
10047edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
10047ede:	683b      	ldr	r3, [r7, #0]
10047ee0:	689a      	ldr	r2, [r3, #8]
10047ee2:	697b      	ldr	r3, [r7, #20]
10047ee4:	005b      	lsls	r3, r3, #1
10047ee6:	409a      	lsls	r2, r3
10047ee8:	0013      	movs	r3, r2
10047eea:	693a      	ldr	r2, [r7, #16]
10047eec:	4313      	orrs	r3, r2
10047eee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
10047ef0:	687b      	ldr	r3, [r7, #4]
10047ef2:	693a      	ldr	r2, [r7, #16]
10047ef4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
10047ef6:	683b      	ldr	r3, [r7, #0]
10047ef8:	685b      	ldr	r3, [r3, #4]
10047efa:	2203      	movs	r2, #3
10047efc:	4013      	ands	r3, r2
10047efe:	2b02      	cmp	r3, #2
10047f00:	d123      	bne.n	10047f4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
10047f02:	697b      	ldr	r3, [r7, #20]
10047f04:	08da      	lsrs	r2, r3, #3
10047f06:	687b      	ldr	r3, [r7, #4]
10047f08:	3208      	adds	r2, #8
10047f0a:	0092      	lsls	r2, r2, #2
10047f0c:	58d3      	ldr	r3, [r2, r3]
10047f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
10047f10:	697b      	ldr	r3, [r7, #20]
10047f12:	2207      	movs	r2, #7
10047f14:	4013      	ands	r3, r2
10047f16:	009b      	lsls	r3, r3, #2
10047f18:	220f      	movs	r2, #15
10047f1a:	409a      	lsls	r2, r3
10047f1c:	0013      	movs	r3, r2
10047f1e:	43da      	mvns	r2, r3
10047f20:	693b      	ldr	r3, [r7, #16]
10047f22:	4013      	ands	r3, r2
10047f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
10047f26:	683b      	ldr	r3, [r7, #0]
10047f28:	691a      	ldr	r2, [r3, #16]
10047f2a:	697b      	ldr	r3, [r7, #20]
10047f2c:	2107      	movs	r1, #7
10047f2e:	400b      	ands	r3, r1
10047f30:	009b      	lsls	r3, r3, #2
10047f32:	409a      	lsls	r2, r3
10047f34:	0013      	movs	r3, r2
10047f36:	693a      	ldr	r2, [r7, #16]
10047f38:	4313      	orrs	r3, r2
10047f3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
10047f3c:	697b      	ldr	r3, [r7, #20]
10047f3e:	08da      	lsrs	r2, r3, #3
10047f40:	687b      	ldr	r3, [r7, #4]
10047f42:	3208      	adds	r2, #8
10047f44:	0092      	lsls	r2, r2, #2
10047f46:	6939      	ldr	r1, [r7, #16]
10047f48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10047f4a:	687b      	ldr	r3, [r7, #4]
10047f4c:	681b      	ldr	r3, [r3, #0]
10047f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
10047f50:	697b      	ldr	r3, [r7, #20]
10047f52:	005b      	lsls	r3, r3, #1
10047f54:	2203      	movs	r2, #3
10047f56:	409a      	lsls	r2, r3
10047f58:	0013      	movs	r3, r2
10047f5a:	43da      	mvns	r2, r3
10047f5c:	693b      	ldr	r3, [r7, #16]
10047f5e:	4013      	ands	r3, r2
10047f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
10047f62:	683b      	ldr	r3, [r7, #0]
10047f64:	685b      	ldr	r3, [r3, #4]
10047f66:	2203      	movs	r2, #3
10047f68:	401a      	ands	r2, r3
10047f6a:	697b      	ldr	r3, [r7, #20]
10047f6c:	005b      	lsls	r3, r3, #1
10047f6e:	409a      	lsls	r2, r3
10047f70:	0013      	movs	r3, r2
10047f72:	693a      	ldr	r2, [r7, #16]
10047f74:	4313      	orrs	r3, r2
10047f76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
10047f78:	687b      	ldr	r3, [r7, #4]
10047f7a:	693a      	ldr	r2, [r7, #16]
10047f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
10047f7e:	683b      	ldr	r3, [r7, #0]
10047f80:	685a      	ldr	r2, [r3, #4]
10047f82:	23c0      	movs	r3, #192	@ 0xc0
10047f84:	029b      	lsls	r3, r3, #10
10047f86:	4013      	ands	r3, r2
10047f88:	d100      	bne.n	10047f8c <HAL_GPIO_Init+0x174>
10047f8a:	e0db      	b.n	10048144 <HAL_GPIO_Init+0x32c>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
10047f8c:	683b      	ldr	r3, [r7, #0]
10047f8e:	685a      	ldr	r2, [r3, #4]
10047f90:	2380      	movs	r3, #128	@ 0x80
10047f92:	02db      	lsls	r3, r3, #11
10047f94:	4013      	ands	r3, r2
10047f96:	d030      	beq.n	10047ffa <HAL_GPIO_Init+0x1e2>
        {
          temp = SYSCFG->IO_DTR;
10047f98:	2380      	movs	r3, #128	@ 0x80
10047f9a:	05db      	lsls	r3, r3, #23
10047f9c:	68db      	ldr	r3, [r3, #12]
10047f9e:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
10047fa0:	687a      	ldr	r2, [r7, #4]
10047fa2:	2390      	movs	r3, #144	@ 0x90
10047fa4:	05db      	lsls	r3, r3, #23
10047fa6:	429a      	cmp	r2, r3
10047fa8:	d111      	bne.n	10047fce <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
10047faa:	2201      	movs	r2, #1
10047fac:	697b      	ldr	r3, [r7, #20]
10047fae:	409a      	lsls	r2, r3
10047fb0:	0013      	movs	r3, r2
10047fb2:	43db      	mvns	r3, r3
10047fb4:	001a      	movs	r2, r3
10047fb6:	693b      	ldr	r3, [r7, #16]
10047fb8:	4013      	ands	r3, r2
10047fba:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10047fbc:	2201      	movs	r2, #1
10047fbe:	697b      	ldr	r3, [r7, #20]
10047fc0:	409a      	lsls	r2, r3
10047fc2:	0013      	movs	r3, r2
10047fc4:	001a      	movs	r2, r3
10047fc6:	693b      	ldr	r3, [r7, #16]
10047fc8:	4313      	orrs	r3, r2
10047fca:	613b      	str	r3, [r7, #16]
10047fcc:	e011      	b.n	10047ff2 <HAL_GPIO_Init+0x1da>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10047fce:	2201      	movs	r2, #1
10047fd0:	697b      	ldr	r3, [r7, #20]
10047fd2:	409a      	lsls	r2, r3
10047fd4:	0013      	movs	r3, r2
10047fd6:	041b      	lsls	r3, r3, #16
10047fd8:	43db      	mvns	r3, r3
10047fda:	001a      	movs	r2, r3
10047fdc:	693b      	ldr	r3, [r7, #16]
10047fde:	4013      	ands	r3, r2
10047fe0:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10047fe2:	2201      	movs	r2, #1
10047fe4:	697b      	ldr	r3, [r7, #20]
10047fe6:	409a      	lsls	r2, r3
10047fe8:	0013      	movs	r3, r2
10047fea:	041b      	lsls	r3, r3, #16
10047fec:	693a      	ldr	r2, [r7, #16]
10047fee:	4313      	orrs	r3, r2
10047ff0:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
10047ff2:	2380      	movs	r3, #128	@ 0x80
10047ff4:	05db      	lsls	r3, r3, #23
10047ff6:	693a      	ldr	r2, [r7, #16]
10047ff8:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
10047ffa:	683b      	ldr	r3, [r7, #0]
10047ffc:	685a      	ldr	r2, [r3, #4]
10047ffe:	2380      	movs	r3, #128	@ 0x80
10048000:	035b      	lsls	r3, r3, #13
10048002:	4013      	ands	r3, r2
10048004:	d030      	beq.n	10048068 <HAL_GPIO_Init+0x250>
        {
          temp = SYSCFG->IO_IBER;
10048006:	2380      	movs	r3, #128	@ 0x80
10048008:	05db      	lsls	r3, r3, #23
1004800a:	691b      	ldr	r3, [r3, #16]
1004800c:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
1004800e:	687a      	ldr	r2, [r7, #4]
10048010:	2390      	movs	r3, #144	@ 0x90
10048012:	05db      	lsls	r3, r3, #23
10048014:	429a      	cmp	r2, r3
10048016:	d111      	bne.n	1004803c <HAL_GPIO_Init+0x224>
          {
            temp &= ~(1 << position);
10048018:	2201      	movs	r2, #1
1004801a:	697b      	ldr	r3, [r7, #20]
1004801c:	409a      	lsls	r2, r3
1004801e:	0013      	movs	r3, r2
10048020:	43db      	mvns	r3, r3
10048022:	001a      	movs	r2, r3
10048024:	693b      	ldr	r3, [r7, #16]
10048026:	4013      	ands	r3, r2
10048028:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
1004802a:	2201      	movs	r2, #1
1004802c:	697b      	ldr	r3, [r7, #20]
1004802e:	409a      	lsls	r2, r3
10048030:	0013      	movs	r3, r2
10048032:	001a      	movs	r2, r3
10048034:	693b      	ldr	r3, [r7, #16]
10048036:	4313      	orrs	r3, r2
10048038:	613b      	str	r3, [r7, #16]
1004803a:	e011      	b.n	10048060 <HAL_GPIO_Init+0x248>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004803c:	2201      	movs	r2, #1
1004803e:	697b      	ldr	r3, [r7, #20]
10048040:	409a      	lsls	r2, r3
10048042:	0013      	movs	r3, r2
10048044:	041b      	lsls	r3, r3, #16
10048046:	43db      	mvns	r3, r3
10048048:	001a      	movs	r2, r3
1004804a:	693b      	ldr	r3, [r7, #16]
1004804c:	4013      	ands	r3, r2
1004804e:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10048050:	2201      	movs	r2, #1
10048052:	697b      	ldr	r3, [r7, #20]
10048054:	409a      	lsls	r2, r3
10048056:	0013      	movs	r3, r2
10048058:	041b      	lsls	r3, r3, #16
1004805a:	693a      	ldr	r2, [r7, #16]
1004805c:	4313      	orrs	r3, r2
1004805e:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
10048060:	2380      	movs	r3, #128	@ 0x80
10048062:	05db      	lsls	r3, r3, #23
10048064:	693a      	ldr	r2, [r7, #16]
10048066:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
10048068:	683b      	ldr	r3, [r7, #0]
1004806a:	685a      	ldr	r2, [r3, #4]
1004806c:	2380      	movs	r3, #128	@ 0x80
1004806e:	03db      	lsls	r3, r3, #15
10048070:	4013      	ands	r3, r2
10048072:	d030      	beq.n	100480d6 <HAL_GPIO_Init+0x2be>
        {
          temp = SYSCFG->IO_IEVR;
10048074:	2380      	movs	r3, #128	@ 0x80
10048076:	05db      	lsls	r3, r3, #23
10048078:	695b      	ldr	r3, [r3, #20]
1004807a:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
1004807c:	687a      	ldr	r2, [r7, #4]
1004807e:	2390      	movs	r3, #144	@ 0x90
10048080:	05db      	lsls	r3, r3, #23
10048082:	429a      	cmp	r2, r3
10048084:	d111      	bne.n	100480aa <HAL_GPIO_Init+0x292>
          {
            temp &= ~(1 << position);
10048086:	2201      	movs	r2, #1
10048088:	697b      	ldr	r3, [r7, #20]
1004808a:	409a      	lsls	r2, r3
1004808c:	0013      	movs	r3, r2
1004808e:	43db      	mvns	r3, r3
10048090:	001a      	movs	r2, r3
10048092:	693b      	ldr	r3, [r7, #16]
10048094:	4013      	ands	r3, r2
10048096:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10048098:	2201      	movs	r2, #1
1004809a:	697b      	ldr	r3, [r7, #20]
1004809c:	409a      	lsls	r2, r3
1004809e:	0013      	movs	r3, r2
100480a0:	001a      	movs	r2, r3
100480a2:	693b      	ldr	r3, [r7, #16]
100480a4:	4313      	orrs	r3, r2
100480a6:	613b      	str	r3, [r7, #16]
100480a8:	e011      	b.n	100480ce <HAL_GPIO_Init+0x2b6>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100480aa:	2201      	movs	r2, #1
100480ac:	697b      	ldr	r3, [r7, #20]
100480ae:	409a      	lsls	r2, r3
100480b0:	0013      	movs	r3, r2
100480b2:	041b      	lsls	r3, r3, #16
100480b4:	43db      	mvns	r3, r3
100480b6:	001a      	movs	r2, r3
100480b8:	693b      	ldr	r3, [r7, #16]
100480ba:	4013      	ands	r3, r2
100480bc:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100480be:	2201      	movs	r2, #1
100480c0:	697b      	ldr	r3, [r7, #20]
100480c2:	409a      	lsls	r2, r3
100480c4:	0013      	movs	r3, r2
100480c6:	041b      	lsls	r3, r3, #16
100480c8:	693a      	ldr	r2, [r7, #16]
100480ca:	4313      	orrs	r3, r2
100480cc:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
100480ce:	2380      	movs	r3, #128	@ 0x80
100480d0:	05db      	lsls	r3, r3, #23
100480d2:	693a      	ldr	r2, [r7, #16]
100480d4:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
100480d6:	683b      	ldr	r3, [r7, #0]
100480d8:	685a      	ldr	r2, [r3, #4]
100480da:	2380      	movs	r3, #128	@ 0x80
100480dc:	025b      	lsls	r3, r3, #9
100480de:	4013      	ands	r3, r2
100480e0:	d030      	beq.n	10048144 <HAL_GPIO_Init+0x32c>
        {
          temp = SYSCFG->IO_IER;
100480e2:	2380      	movs	r3, #128	@ 0x80
100480e4:	05db      	lsls	r3, r3, #23
100480e6:	699b      	ldr	r3, [r3, #24]
100480e8:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
100480ea:	687a      	ldr	r2, [r7, #4]
100480ec:	2390      	movs	r3, #144	@ 0x90
100480ee:	05db      	lsls	r3, r3, #23
100480f0:	429a      	cmp	r2, r3
100480f2:	d111      	bne.n	10048118 <HAL_GPIO_Init+0x300>
          {
            temp &= ~(1 << position);
100480f4:	2201      	movs	r2, #1
100480f6:	697b      	ldr	r3, [r7, #20]
100480f8:	409a      	lsls	r2, r3
100480fa:	0013      	movs	r3, r2
100480fc:	43db      	mvns	r3, r3
100480fe:	001a      	movs	r2, r3
10048100:	693b      	ldr	r3, [r7, #16]
10048102:	4013      	ands	r3, r2
10048104:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10048106:	2201      	movs	r2, #1
10048108:	697b      	ldr	r3, [r7, #20]
1004810a:	409a      	lsls	r2, r3
1004810c:	0013      	movs	r3, r2
1004810e:	001a      	movs	r2, r3
10048110:	693b      	ldr	r3, [r7, #16]
10048112:	4313      	orrs	r3, r2
10048114:	613b      	str	r3, [r7, #16]
10048116:	e011      	b.n	1004813c <HAL_GPIO_Init+0x324>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10048118:	2201      	movs	r2, #1
1004811a:	697b      	ldr	r3, [r7, #20]
1004811c:	409a      	lsls	r2, r3
1004811e:	0013      	movs	r3, r2
10048120:	041b      	lsls	r3, r3, #16
10048122:	43db      	mvns	r3, r3
10048124:	001a      	movs	r2, r3
10048126:	693b      	ldr	r3, [r7, #16]
10048128:	4013      	ands	r3, r2
1004812a:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004812c:	2201      	movs	r2, #1
1004812e:	697b      	ldr	r3, [r7, #20]
10048130:	409a      	lsls	r2, r3
10048132:	0013      	movs	r3, r2
10048134:	041b      	lsls	r3, r3, #16
10048136:	693a      	ldr	r2, [r7, #16]
10048138:	4313      	orrs	r3, r2
1004813a:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
1004813c:	2380      	movs	r3, #128	@ 0x80
1004813e:	05db      	lsls	r3, r3, #23
10048140:	693a      	ldr	r2, [r7, #16]
10048142:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
10048144:	697b      	ldr	r3, [r7, #20]
10048146:	3301      	adds	r3, #1
10048148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
1004814a:	683b      	ldr	r3, [r7, #0]
1004814c:	681a      	ldr	r2, [r3, #0]
1004814e:	697b      	ldr	r3, [r7, #20]
10048150:	40da      	lsrs	r2, r3
10048152:	1e13      	subs	r3, r2, #0
10048154:	d000      	beq.n	10048158 <HAL_GPIO_Init+0x340>
10048156:	e667      	b.n	10047e28 <HAL_GPIO_Init+0x10>
  }
}
10048158:	46c0      	nop			@ (mov r8, r8)
1004815a:	46c0      	nop			@ (mov r8, r8)
1004815c:	46bd      	mov	sp, r7
1004815e:	b006      	add	sp, #24
10048160:	bd80      	pop	{r7, pc}

10048162 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
10048162:	b580      	push	{r7, lr}
10048164:	b086      	sub	sp, #24
10048166:	af00      	add	r7, sp, #0
10048168:	6078      	str	r0, [r7, #4]
1004816a:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
1004816c:	2300      	movs	r3, #0
1004816e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
10048170:	e0cf      	b.n	10048312 <HAL_GPIO_DeInit+0x1b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
10048172:	2201      	movs	r2, #1
10048174:	697b      	ldr	r3, [r7, #20]
10048176:	409a      	lsls	r2, r3
10048178:	683b      	ldr	r3, [r7, #0]
1004817a:	4013      	ands	r3, r2
1004817c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
1004817e:	68fb      	ldr	r3, [r7, #12]
10048180:	2b00      	cmp	r3, #0
10048182:	d100      	bne.n	10048186 <HAL_GPIO_DeInit+0x24>
10048184:	e0c2      	b.n	1004830c <HAL_GPIO_DeInit+0x1aa>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      /* Disable the specified EXTI interrupt line */
      tmp = SYSCFG->IO_IER;
10048186:	2380      	movs	r3, #128	@ 0x80
10048188:	05db      	lsls	r3, r3, #23
1004818a:	699b      	ldr	r3, [r3, #24]
1004818c:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
1004818e:	687a      	ldr	r2, [r7, #4]
10048190:	2390      	movs	r3, #144	@ 0x90
10048192:	05db      	lsls	r3, r3, #23
10048194:	429a      	cmp	r2, r3
10048196:	d109      	bne.n	100481ac <HAL_GPIO_DeInit+0x4a>
      {
        tmp &= ~(1<<position);
10048198:	2201      	movs	r2, #1
1004819a:	697b      	ldr	r3, [r7, #20]
1004819c:	409a      	lsls	r2, r3
1004819e:	0013      	movs	r3, r2
100481a0:	43db      	mvns	r3, r3
100481a2:	001a      	movs	r2, r3
100481a4:	693b      	ldr	r3, [r7, #16]
100481a6:	4013      	ands	r3, r2
100481a8:	613b      	str	r3, [r7, #16]
100481aa:	e009      	b.n	100481c0 <HAL_GPIO_DeInit+0x5e>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
100481ac:	2201      	movs	r2, #1
100481ae:	697b      	ldr	r3, [r7, #20]
100481b0:	409a      	lsls	r2, r3
100481b2:	0013      	movs	r3, r2
100481b4:	041b      	lsls	r3, r3, #16
100481b6:	43db      	mvns	r3, r3
100481b8:	001a      	movs	r2, r3
100481ba:	693b      	ldr	r3, [r7, #16]
100481bc:	4013      	ands	r3, r2
100481be:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_IER = tmp;
100481c0:	2380      	movs	r3, #128	@ 0x80
100481c2:	05db      	lsls	r3, r3, #23
100481c4:	693a      	ldr	r2, [r7, #16]
100481c6:	619a      	str	r2, [r3, #24]

      /* Clear EXTI line configuration */
      tmp = SYSCFG->IO_DTR;
100481c8:	2380      	movs	r3, #128	@ 0x80
100481ca:	05db      	lsls	r3, r3, #23
100481cc:	68db      	ldr	r3, [r3, #12]
100481ce:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
100481d0:	687a      	ldr	r2, [r7, #4]
100481d2:	2390      	movs	r3, #144	@ 0x90
100481d4:	05db      	lsls	r3, r3, #23
100481d6:	429a      	cmp	r2, r3
100481d8:	d109      	bne.n	100481ee <HAL_GPIO_DeInit+0x8c>
      {
        tmp &= ~(1<<position);
100481da:	2201      	movs	r2, #1
100481dc:	697b      	ldr	r3, [r7, #20]
100481de:	409a      	lsls	r2, r3
100481e0:	0013      	movs	r3, r2
100481e2:	43db      	mvns	r3, r3
100481e4:	001a      	movs	r2, r3
100481e6:	693b      	ldr	r3, [r7, #16]
100481e8:	4013      	ands	r3, r2
100481ea:	613b      	str	r3, [r7, #16]
100481ec:	e009      	b.n	10048202 <HAL_GPIO_DeInit+0xa0>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
100481ee:	2201      	movs	r2, #1
100481f0:	697b      	ldr	r3, [r7, #20]
100481f2:	409a      	lsls	r2, r3
100481f4:	0013      	movs	r3, r2
100481f6:	041b      	lsls	r3, r3, #16
100481f8:	43db      	mvns	r3, r3
100481fa:	001a      	movs	r2, r3
100481fc:	693b      	ldr	r3, [r7, #16]
100481fe:	4013      	ands	r3, r2
10048200:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_DTR = tmp;
10048202:	2380      	movs	r3, #128	@ 0x80
10048204:	05db      	lsls	r3, r3, #23
10048206:	693a      	ldr	r2, [r7, #16]
10048208:	60da      	str	r2, [r3, #12]

      tmp = SYSCFG->IO_IBER;
1004820a:	2380      	movs	r3, #128	@ 0x80
1004820c:	05db      	lsls	r3, r3, #23
1004820e:	691b      	ldr	r3, [r3, #16]
10048210:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
10048212:	687a      	ldr	r2, [r7, #4]
10048214:	2390      	movs	r3, #144	@ 0x90
10048216:	05db      	lsls	r3, r3, #23
10048218:	429a      	cmp	r2, r3
1004821a:	d109      	bne.n	10048230 <HAL_GPIO_DeInit+0xce>
      {
        tmp &= ~(1<<position);
1004821c:	2201      	movs	r2, #1
1004821e:	697b      	ldr	r3, [r7, #20]
10048220:	409a      	lsls	r2, r3
10048222:	0013      	movs	r3, r2
10048224:	43db      	mvns	r3, r3
10048226:	001a      	movs	r2, r3
10048228:	693b      	ldr	r3, [r7, #16]
1004822a:	4013      	ands	r3, r2
1004822c:	613b      	str	r3, [r7, #16]
1004822e:	e009      	b.n	10048244 <HAL_GPIO_DeInit+0xe2>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
10048230:	2201      	movs	r2, #1
10048232:	697b      	ldr	r3, [r7, #20]
10048234:	409a      	lsls	r2, r3
10048236:	0013      	movs	r3, r2
10048238:	041b      	lsls	r3, r3, #16
1004823a:	43db      	mvns	r3, r3
1004823c:	001a      	movs	r2, r3
1004823e:	693b      	ldr	r3, [r7, #16]
10048240:	4013      	ands	r3, r2
10048242:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_IBER = tmp;
10048244:	2380      	movs	r3, #128	@ 0x80
10048246:	05db      	lsls	r3, r3, #23
10048248:	693a      	ldr	r2, [r7, #16]
1004824a:	611a      	str	r2, [r3, #16]

      /* Clear trigger mode configuration */
      tmp = SYSCFG->IO_IEVR;
1004824c:	2380      	movs	r3, #128	@ 0x80
1004824e:	05db      	lsls	r3, r3, #23
10048250:	695b      	ldr	r3, [r3, #20]
10048252:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
10048254:	687a      	ldr	r2, [r7, #4]
10048256:	2390      	movs	r3, #144	@ 0x90
10048258:	05db      	lsls	r3, r3, #23
1004825a:	429a      	cmp	r2, r3
1004825c:	d109      	bne.n	10048272 <HAL_GPIO_DeInit+0x110>
      {
        tmp &= ~(1<<position);
1004825e:	2201      	movs	r2, #1
10048260:	697b      	ldr	r3, [r7, #20]
10048262:	409a      	lsls	r2, r3
10048264:	0013      	movs	r3, r2
10048266:	43db      	mvns	r3, r3
10048268:	001a      	movs	r2, r3
1004826a:	693b      	ldr	r3, [r7, #16]
1004826c:	4013      	ands	r3, r2
1004826e:	613b      	str	r3, [r7, #16]
10048270:	e009      	b.n	10048286 <HAL_GPIO_DeInit+0x124>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
10048272:	2201      	movs	r2, #1
10048274:	697b      	ldr	r3, [r7, #20]
10048276:	409a      	lsls	r2, r3
10048278:	0013      	movs	r3, r2
1004827a:	041b      	lsls	r3, r3, #16
1004827c:	43db      	mvns	r3, r3
1004827e:	001a      	movs	r2, r3
10048280:	693b      	ldr	r3, [r7, #16]
10048282:	4013      	ands	r3, r2
10048284:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_IEVR = tmp;
10048286:	2380      	movs	r3, #128	@ 0x80
10048288:	05db      	lsls	r3, r3, #23
1004828a:	693a      	ldr	r2, [r7, #16]
1004828c:	615a      	str	r2, [r3, #20]

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
1004828e:	687b      	ldr	r3, [r7, #4]
10048290:	681a      	ldr	r2, [r3, #0]
10048292:	697b      	ldr	r3, [r7, #20]
10048294:	005b      	lsls	r3, r3, #1
10048296:	2103      	movs	r1, #3
10048298:	4099      	lsls	r1, r3
1004829a:	000b      	movs	r3, r1
1004829c:	431a      	orrs	r2, r3
1004829e:	687b      	ldr	r3, [r7, #4]
100482a0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
100482a2:	697b      	ldr	r3, [r7, #20]
100482a4:	08da      	lsrs	r2, r3, #3
100482a6:	687b      	ldr	r3, [r7, #4]
100482a8:	3208      	adds	r2, #8
100482aa:	0092      	lsls	r2, r2, #2
100482ac:	58d3      	ldr	r3, [r2, r3]
100482ae:	697a      	ldr	r2, [r7, #20]
100482b0:	2107      	movs	r1, #7
100482b2:	400a      	ands	r2, r1
100482b4:	0092      	lsls	r2, r2, #2
100482b6:	210f      	movs	r1, #15
100482b8:	4091      	lsls	r1, r2
100482ba:	000a      	movs	r2, r1
100482bc:	43d1      	mvns	r1, r2
100482be:	697a      	ldr	r2, [r7, #20]
100482c0:	08d2      	lsrs	r2, r2, #3
100482c2:	4019      	ands	r1, r3
100482c4:	687b      	ldr	r3, [r7, #4]
100482c6:	3208      	adds	r2, #8
100482c8:	0092      	lsls	r2, r2, #2
100482ca:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
100482cc:	687b      	ldr	r3, [r7, #4]
100482ce:	68db      	ldr	r3, [r3, #12]
100482d0:	697a      	ldr	r2, [r7, #20]
100482d2:	0052      	lsls	r2, r2, #1
100482d4:	2103      	movs	r1, #3
100482d6:	4091      	lsls	r1, r2
100482d8:	000a      	movs	r2, r1
100482da:	43d2      	mvns	r2, r2
100482dc:	401a      	ands	r2, r3
100482de:	687b      	ldr	r3, [r7, #4]
100482e0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
100482e2:	687b      	ldr	r3, [r7, #4]
100482e4:	685b      	ldr	r3, [r3, #4]
100482e6:	2101      	movs	r1, #1
100482e8:	697a      	ldr	r2, [r7, #20]
100482ea:	4091      	lsls	r1, r2
100482ec:	000a      	movs	r2, r1
100482ee:	43d2      	mvns	r2, r2
100482f0:	401a      	ands	r2, r3
100482f2:	687b      	ldr	r3, [r7, #4]
100482f4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
100482f6:	687b      	ldr	r3, [r7, #4]
100482f8:	689b      	ldr	r3, [r3, #8]
100482fa:	697a      	ldr	r2, [r7, #20]
100482fc:	0052      	lsls	r2, r2, #1
100482fe:	2103      	movs	r1, #3
10048300:	4091      	lsls	r1, r2
10048302:	000a      	movs	r2, r1
10048304:	43d2      	mvns	r2, r2
10048306:	401a      	ands	r2, r3
10048308:	687b      	ldr	r3, [r7, #4]
1004830a:	609a      	str	r2, [r3, #8]
    }

    position++;
1004830c:	697b      	ldr	r3, [r7, #20]
1004830e:	3301      	adds	r3, #1
10048310:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
10048312:	683a      	ldr	r2, [r7, #0]
10048314:	697b      	ldr	r3, [r7, #20]
10048316:	40da      	lsrs	r2, r3
10048318:	1e13      	subs	r3, r2, #0
1004831a:	d000      	beq.n	1004831e <HAL_GPIO_DeInit+0x1bc>
1004831c:	e729      	b.n	10048172 <HAL_GPIO_DeInit+0x10>
  }
}
1004831e:	46c0      	nop			@ (mov r8, r8)
10048320:	46c0      	nop			@ (mov r8, r8)
10048322:	46bd      	mov	sp, r7
10048324:	b006      	add	sp, #24
10048326:	bd80      	pop	{r7, pc}

10048328 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
10048328:	b580      	push	{r7, lr}
1004832a:	b084      	sub	sp, #16
1004832c:	af00      	add	r7, sp, #0
1004832e:	6078      	str	r0, [r7, #4]
10048330:	000a      	movs	r2, r1
10048332:	1cbb      	adds	r3, r7, #2
10048334:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
10048336:	687b      	ldr	r3, [r7, #4]
10048338:	691b      	ldr	r3, [r3, #16]
1004833a:	1cba      	adds	r2, r7, #2
1004833c:	8812      	ldrh	r2, [r2, #0]
1004833e:	4013      	ands	r3, r2
10048340:	d004      	beq.n	1004834c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
10048342:	230f      	movs	r3, #15
10048344:	18fb      	adds	r3, r7, r3
10048346:	2201      	movs	r2, #1
10048348:	701a      	strb	r2, [r3, #0]
1004834a:	e003      	b.n	10048354 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
1004834c:	230f      	movs	r3, #15
1004834e:	18fb      	adds	r3, r7, r3
10048350:	2200      	movs	r2, #0
10048352:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
10048354:	230f      	movs	r3, #15
10048356:	18fb      	adds	r3, r7, r3
10048358:	781b      	ldrb	r3, [r3, #0]
}
1004835a:	0018      	movs	r0, r3
1004835c:	46bd      	mov	sp, r7
1004835e:	b004      	add	sp, #16
10048360:	bd80      	pop	{r7, pc}

10048362 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10048362:	b580      	push	{r7, lr}
10048364:	b082      	sub	sp, #8
10048366:	af00      	add	r7, sp, #0
10048368:	6078      	str	r0, [r7, #4]
1004836a:	0008      	movs	r0, r1
1004836c:	0011      	movs	r1, r2
1004836e:	1cbb      	adds	r3, r7, #2
10048370:	1c02      	adds	r2, r0, #0
10048372:	801a      	strh	r2, [r3, #0]
10048374:	1c7b      	adds	r3, r7, #1
10048376:	1c0a      	adds	r2, r1, #0
10048378:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
1004837a:	1c7b      	adds	r3, r7, #1
1004837c:	781b      	ldrb	r3, [r3, #0]
1004837e:	2b00      	cmp	r3, #0
10048380:	d004      	beq.n	1004838c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
10048382:	1cbb      	adds	r3, r7, #2
10048384:	881a      	ldrh	r2, [r3, #0]
10048386:	687b      	ldr	r3, [r7, #4]
10048388:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
1004838a:	e003      	b.n	10048394 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
1004838c:	1cbb      	adds	r3, r7, #2
1004838e:	881a      	ldrh	r2, [r3, #0]
10048390:	687b      	ldr	r3, [r7, #4]
10048392:	629a      	str	r2, [r3, #40]	@ 0x28
}
10048394:	46c0      	nop			@ (mov r8, r8)
10048396:	46bd      	mov	sp, r7
10048398:	b002      	add	sp, #8
1004839a:	bd80      	pop	{r7, pc}

1004839c <HAL_GPIO_EXTI_IRQHandler>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
1004839c:	b580      	push	{r7, lr}
1004839e:	b082      	sub	sp, #8
100483a0:	af00      	add	r7, sp, #0
100483a2:	6078      	str	r0, [r7, #4]
100483a4:	000a      	movs	r2, r1
100483a6:	1cbb      	adds	r3, r7, #2
100483a8:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIOx, GPIO_Pin) != 0x00u)
100483aa:	687a      	ldr	r2, [r7, #4]
100483ac:	2390      	movs	r3, #144	@ 0x90
100483ae:	05db      	lsls	r3, r3, #23
100483b0:	429a      	cmp	r2, r3
100483b2:	d109      	bne.n	100483c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>
100483b4:	2380      	movs	r3, #128	@ 0x80
100483b6:	05db      	lsls	r3, r3, #23
100483b8:	69db      	ldr	r3, [r3, #28]
100483ba:	1cba      	adds	r2, r7, #2
100483bc:	8812      	ldrh	r2, [r2, #0]
100483be:	4013      	ands	r3, r2
100483c0:	1e5a      	subs	r2, r3, #1
100483c2:	4193      	sbcs	r3, r2
100483c4:	b2db      	uxtb	r3, r3
100483c6:	e009      	b.n	100483dc <HAL_GPIO_EXTI_IRQHandler+0x40>
100483c8:	2380      	movs	r3, #128	@ 0x80
100483ca:	05db      	lsls	r3, r3, #23
100483cc:	69db      	ldr	r3, [r3, #28]
100483ce:	1cba      	adds	r2, r7, #2
100483d0:	8812      	ldrh	r2, [r2, #0]
100483d2:	0412      	lsls	r2, r2, #16
100483d4:	4013      	ands	r3, r2
100483d6:	1e5a      	subs	r2, r3, #1
100483d8:	4193      	sbcs	r3, r2
100483da:	b2db      	uxtb	r3, r3
100483dc:	2b00      	cmp	r3, #0
100483de:	d017      	beq.n	10048410 <HAL_GPIO_EXTI_IRQHandler+0x74>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIOx, GPIO_Pin);
100483e0:	687a      	ldr	r2, [r7, #4]
100483e2:	2390      	movs	r3, #144	@ 0x90
100483e4:	05db      	lsls	r3, r3, #23
100483e6:	429a      	cmp	r2, r3
100483e8:	d105      	bne.n	100483f6 <HAL_GPIO_EXTI_IRQHandler+0x5a>
100483ea:	2380      	movs	r3, #128	@ 0x80
100483ec:	05db      	lsls	r3, r3, #23
100483ee:	1cba      	adds	r2, r7, #2
100483f0:	8812      	ldrh	r2, [r2, #0]
100483f2:	61da      	str	r2, [r3, #28]
100483f4:	e005      	b.n	10048402 <HAL_GPIO_EXTI_IRQHandler+0x66>
100483f6:	1cbb      	adds	r3, r7, #2
100483f8:	881a      	ldrh	r2, [r3, #0]
100483fa:	2380      	movs	r3, #128	@ 0x80
100483fc:	05db      	lsls	r3, r3, #23
100483fe:	0412      	lsls	r2, r2, #16
10048400:	61da      	str	r2, [r3, #28]
    HAL_GPIO_EXTI_Callback(GPIOx, GPIO_Pin);
10048402:	1cbb      	adds	r3, r7, #2
10048404:	881a      	ldrh	r2, [r3, #0]
10048406:	687b      	ldr	r3, [r7, #4]
10048408:	0011      	movs	r1, r2
1004840a:	0018      	movs	r0, r3
1004840c:	f000 f804 	bl	10048418 <HAL_GPIO_EXTI_Callback>
  }
}
10048410:	46c0      	nop			@ (mov r8, r8)
10048412:	46bd      	mov	sp, r7
10048414:	b002      	add	sp, #8
10048416:	bd80      	pop	{r7, pc}

10048418 <HAL_GPIO_EXTI_Callback>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10048418:	b580      	push	{r7, lr}
1004841a:	b082      	sub	sp, #8
1004841c:	af00      	add	r7, sp, #0
1004841e:	6078      	str	r0, [r7, #4]
10048420:	000a      	movs	r2, r1
10048422:	1cbb      	adds	r3, r7, #2
10048424:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
10048426:	46c0      	nop			@ (mov r8, r8)
10048428:	46bd      	mov	sp, r7
1004842a:	b002      	add	sp, #8
1004842c:	bd80      	pop	{r7, pc}
	...

10048430 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
10048430:	b580      	push	{r7, lr}
10048432:	b082      	sub	sp, #8
10048434:	af00      	add	r7, sp, #0
10048436:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
10048438:	687b      	ldr	r3, [r7, #4]
1004843a:	2b00      	cmp	r3, #0
1004843c:	d101      	bne.n	10048442 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
1004843e:	2301      	movs	r3, #1
10048440:	e08f      	b.n	10048562 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
10048442:	687b      	ldr	r3, [r7, #4]
10048444:	2241      	movs	r2, #65	@ 0x41
10048446:	5c9b      	ldrb	r3, [r3, r2]
10048448:	b2db      	uxtb	r3, r3
1004844a:	2b00      	cmp	r3, #0
1004844c:	d107      	bne.n	1004845e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
1004844e:	687b      	ldr	r3, [r7, #4]
10048450:	2240      	movs	r2, #64	@ 0x40
10048452:	2100      	movs	r1, #0
10048454:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
10048456:	687b      	ldr	r3, [r7, #4]
10048458:	0018      	movs	r0, r3
1004845a:	f7fe fc6b 	bl	10046d34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
1004845e:	687b      	ldr	r3, [r7, #4]
10048460:	2241      	movs	r2, #65	@ 0x41
10048462:	2124      	movs	r1, #36	@ 0x24
10048464:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
10048466:	687b      	ldr	r3, [r7, #4]
10048468:	681b      	ldr	r3, [r3, #0]
1004846a:	681a      	ldr	r2, [r3, #0]
1004846c:	687b      	ldr	r3, [r7, #4]
1004846e:	681b      	ldr	r3, [r3, #0]
10048470:	2101      	movs	r1, #1
10048472:	438a      	bics	r2, r1
10048474:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
10048476:	687b      	ldr	r3, [r7, #4]
10048478:	685a      	ldr	r2, [r3, #4]
1004847a:	687b      	ldr	r3, [r7, #4]
1004847c:	681b      	ldr	r3, [r3, #0]
1004847e:	493b      	ldr	r1, [pc, #236]	@ (1004856c <HAL_I2C_Init+0x13c>)
10048480:	400a      	ands	r2, r1
10048482:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
10048484:	687b      	ldr	r3, [r7, #4]
10048486:	681b      	ldr	r3, [r3, #0]
10048488:	689a      	ldr	r2, [r3, #8]
1004848a:	687b      	ldr	r3, [r7, #4]
1004848c:	681b      	ldr	r3, [r3, #0]
1004848e:	4938      	ldr	r1, [pc, #224]	@ (10048570 <HAL_I2C_Init+0x140>)
10048490:	400a      	ands	r2, r1
10048492:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
10048494:	687b      	ldr	r3, [r7, #4]
10048496:	68db      	ldr	r3, [r3, #12]
10048498:	2b01      	cmp	r3, #1
1004849a:	d108      	bne.n	100484ae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
1004849c:	687b      	ldr	r3, [r7, #4]
1004849e:	689a      	ldr	r2, [r3, #8]
100484a0:	687b      	ldr	r3, [r7, #4]
100484a2:	681b      	ldr	r3, [r3, #0]
100484a4:	2180      	movs	r1, #128	@ 0x80
100484a6:	0209      	lsls	r1, r1, #8
100484a8:	430a      	orrs	r2, r1
100484aa:	609a      	str	r2, [r3, #8]
100484ac:	e007      	b.n	100484be <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
100484ae:	687b      	ldr	r3, [r7, #4]
100484b0:	689a      	ldr	r2, [r3, #8]
100484b2:	687b      	ldr	r3, [r7, #4]
100484b4:	681b      	ldr	r3, [r3, #0]
100484b6:	2184      	movs	r1, #132	@ 0x84
100484b8:	0209      	lsls	r1, r1, #8
100484ba:	430a      	orrs	r2, r1
100484bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
100484be:	687b      	ldr	r3, [r7, #4]
100484c0:	68db      	ldr	r3, [r3, #12]
100484c2:	2b02      	cmp	r3, #2
100484c4:	d109      	bne.n	100484da <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
100484c6:	687b      	ldr	r3, [r7, #4]
100484c8:	681b      	ldr	r3, [r3, #0]
100484ca:	685a      	ldr	r2, [r3, #4]
100484cc:	687b      	ldr	r3, [r7, #4]
100484ce:	681b      	ldr	r3, [r3, #0]
100484d0:	2180      	movs	r1, #128	@ 0x80
100484d2:	0109      	lsls	r1, r1, #4
100484d4:	430a      	orrs	r2, r1
100484d6:	605a      	str	r2, [r3, #4]
100484d8:	e007      	b.n	100484ea <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
100484da:	687b      	ldr	r3, [r7, #4]
100484dc:	681b      	ldr	r3, [r3, #0]
100484de:	685a      	ldr	r2, [r3, #4]
100484e0:	687b      	ldr	r3, [r7, #4]
100484e2:	681b      	ldr	r3, [r3, #0]
100484e4:	4923      	ldr	r1, [pc, #140]	@ (10048574 <HAL_I2C_Init+0x144>)
100484e6:	400a      	ands	r2, r1
100484e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
100484ea:	687b      	ldr	r3, [r7, #4]
100484ec:	681b      	ldr	r3, [r3, #0]
100484ee:	685a      	ldr	r2, [r3, #4]
100484f0:	687b      	ldr	r3, [r7, #4]
100484f2:	681b      	ldr	r3, [r3, #0]
100484f4:	4920      	ldr	r1, [pc, #128]	@ (10048578 <HAL_I2C_Init+0x148>)
100484f6:	430a      	orrs	r2, r1
100484f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
100484fa:	687b      	ldr	r3, [r7, #4]
100484fc:	681b      	ldr	r3, [r3, #0]
100484fe:	68da      	ldr	r2, [r3, #12]
10048500:	687b      	ldr	r3, [r7, #4]
10048502:	681b      	ldr	r3, [r3, #0]
10048504:	491a      	ldr	r1, [pc, #104]	@ (10048570 <HAL_I2C_Init+0x140>)
10048506:	400a      	ands	r2, r1
10048508:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
1004850a:	687b      	ldr	r3, [r7, #4]
1004850c:	691a      	ldr	r2, [r3, #16]
1004850e:	687b      	ldr	r3, [r7, #4]
10048510:	695b      	ldr	r3, [r3, #20]
10048512:	431a      	orrs	r2, r3
10048514:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
10048516:	687b      	ldr	r3, [r7, #4]
10048518:	699b      	ldr	r3, [r3, #24]
1004851a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
1004851c:	687b      	ldr	r3, [r7, #4]
1004851e:	681b      	ldr	r3, [r3, #0]
10048520:	430a      	orrs	r2, r1
10048522:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
10048524:	687b      	ldr	r3, [r7, #4]
10048526:	69d9      	ldr	r1, [r3, #28]
10048528:	687b      	ldr	r3, [r7, #4]
1004852a:	6a1a      	ldr	r2, [r3, #32]
1004852c:	687b      	ldr	r3, [r7, #4]
1004852e:	681b      	ldr	r3, [r3, #0]
10048530:	430a      	orrs	r2, r1
10048532:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
10048534:	687b      	ldr	r3, [r7, #4]
10048536:	681b      	ldr	r3, [r3, #0]
10048538:	681a      	ldr	r2, [r3, #0]
1004853a:	687b      	ldr	r3, [r7, #4]
1004853c:	681b      	ldr	r3, [r3, #0]
1004853e:	2101      	movs	r1, #1
10048540:	430a      	orrs	r2, r1
10048542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
10048544:	687b      	ldr	r3, [r7, #4]
10048546:	2200      	movs	r2, #0
10048548:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
1004854a:	687b      	ldr	r3, [r7, #4]
1004854c:	2241      	movs	r2, #65	@ 0x41
1004854e:	2120      	movs	r1, #32
10048550:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
10048552:	687b      	ldr	r3, [r7, #4]
10048554:	2200      	movs	r2, #0
10048556:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
10048558:	687b      	ldr	r3, [r7, #4]
1004855a:	2242      	movs	r2, #66	@ 0x42
1004855c:	2100      	movs	r1, #0
1004855e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10048560:	2300      	movs	r3, #0
}
10048562:	0018      	movs	r0, r3
10048564:	46bd      	mov	sp, r7
10048566:	b002      	add	sp, #8
10048568:	bd80      	pop	{r7, pc}
1004856a:	46c0      	nop			@ (mov r8, r8)
1004856c:	f0ffffff 	.word	0xf0ffffff
10048570:	ffff7fff 	.word	0xffff7fff
10048574:	fffff7ff 	.word	0xfffff7ff
10048578:	02008000 	.word	0x02008000

1004857c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
1004857c:	b590      	push	{r4, r7, lr}
1004857e:	b087      	sub	sp, #28
10048580:	af02      	add	r7, sp, #8
10048582:	60f8      	str	r0, [r7, #12]
10048584:	000c      	movs	r4, r1
10048586:	0010      	movs	r0, r2
10048588:	0019      	movs	r1, r3
1004858a:	230a      	movs	r3, #10
1004858c:	18fb      	adds	r3, r7, r3
1004858e:	1c22      	adds	r2, r4, #0
10048590:	801a      	strh	r2, [r3, #0]
10048592:	2308      	movs	r3, #8
10048594:	18fb      	adds	r3, r7, r3
10048596:	1c02      	adds	r2, r0, #0
10048598:	801a      	strh	r2, [r3, #0]
1004859a:	1dbb      	adds	r3, r7, #6
1004859c:	1c0a      	adds	r2, r1, #0
1004859e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
100485a0:	68fb      	ldr	r3, [r7, #12]
100485a2:	2241      	movs	r2, #65	@ 0x41
100485a4:	5c9b      	ldrb	r3, [r3, r2]
100485a6:	b2db      	uxtb	r3, r3
100485a8:	2b20      	cmp	r3, #32
100485aa:	d000      	beq.n	100485ae <HAL_I2C_Mem_Write_IT+0x32>
100485ac:	e07d      	b.n	100486aa <HAL_I2C_Mem_Write_IT+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
100485ae:	6a3b      	ldr	r3, [r7, #32]
100485b0:	2b00      	cmp	r3, #0
100485b2:	d004      	beq.n	100485be <HAL_I2C_Mem_Write_IT+0x42>
100485b4:	2324      	movs	r3, #36	@ 0x24
100485b6:	18fb      	adds	r3, r7, r3
100485b8:	881b      	ldrh	r3, [r3, #0]
100485ba:	2b00      	cmp	r3, #0
100485bc:	d105      	bne.n	100485ca <HAL_I2C_Mem_Write_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
100485be:	68fb      	ldr	r3, [r7, #12]
100485c0:	2280      	movs	r2, #128	@ 0x80
100485c2:	0092      	lsls	r2, r2, #2
100485c4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
100485c6:	2301      	movs	r3, #1
100485c8:	e070      	b.n	100486ac <HAL_I2C_Mem_Write_IT+0x130>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
100485ca:	68fb      	ldr	r3, [r7, #12]
100485cc:	681b      	ldr	r3, [r3, #0]
100485ce:	699a      	ldr	r2, [r3, #24]
100485d0:	2380      	movs	r3, #128	@ 0x80
100485d2:	021b      	lsls	r3, r3, #8
100485d4:	401a      	ands	r2, r3
100485d6:	2380      	movs	r3, #128	@ 0x80
100485d8:	021b      	lsls	r3, r3, #8
100485da:	429a      	cmp	r2, r3
100485dc:	d101      	bne.n	100485e2 <HAL_I2C_Mem_Write_IT+0x66>
    {
      return HAL_BUSY;
100485de:	2302      	movs	r3, #2
100485e0:	e064      	b.n	100486ac <HAL_I2C_Mem_Write_IT+0x130>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
100485e2:	68fb      	ldr	r3, [r7, #12]
100485e4:	2240      	movs	r2, #64	@ 0x40
100485e6:	5c9b      	ldrb	r3, [r3, r2]
100485e8:	2b01      	cmp	r3, #1
100485ea:	d101      	bne.n	100485f0 <HAL_I2C_Mem_Write_IT+0x74>
100485ec:	2302      	movs	r3, #2
100485ee:	e05d      	b.n	100486ac <HAL_I2C_Mem_Write_IT+0x130>
100485f0:	68fb      	ldr	r3, [r7, #12]
100485f2:	2240      	movs	r2, #64	@ 0x40
100485f4:	2101      	movs	r1, #1
100485f6:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
100485f8:	68fb      	ldr	r3, [r7, #12]
100485fa:	2241      	movs	r2, #65	@ 0x41
100485fc:	2121      	movs	r1, #33	@ 0x21
100485fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
10048600:	68fb      	ldr	r3, [r7, #12]
10048602:	2242      	movs	r2, #66	@ 0x42
10048604:	2140      	movs	r1, #64	@ 0x40
10048606:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
10048608:	68fb      	ldr	r3, [r7, #12]
1004860a:	2200      	movs	r2, #0
1004860c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
1004860e:	68fb      	ldr	r3, [r7, #12]
10048610:	2200      	movs	r2, #0
10048612:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
10048614:	68fb      	ldr	r3, [r7, #12]
10048616:	6a3a      	ldr	r2, [r7, #32]
10048618:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
1004861a:	68fb      	ldr	r3, [r7, #12]
1004861c:	2224      	movs	r2, #36	@ 0x24
1004861e:	18ba      	adds	r2, r7, r2
10048620:	8812      	ldrh	r2, [r2, #0]
10048622:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
10048624:	68fb      	ldr	r3, [r7, #12]
10048626:	4a23      	ldr	r2, [pc, #140]	@ (100486b4 <HAL_I2C_Mem_Write_IT+0x138>)
10048628:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
1004862a:	68fb      	ldr	r3, [r7, #12]
1004862c:	4a22      	ldr	r2, [pc, #136]	@ (100486b8 <HAL_I2C_Mem_Write_IT+0x13c>)
1004862e:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
10048630:	230a      	movs	r3, #10
10048632:	18fb      	adds	r3, r7, r3
10048634:	881a      	ldrh	r2, [r3, #0]
10048636:	68fb      	ldr	r3, [r7, #12]
10048638:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
1004863a:	1dbb      	adds	r3, r7, #6
1004863c:	881b      	ldrh	r3, [r3, #0]
1004863e:	2b01      	cmp	r3, #1
10048640:	d10b      	bne.n	1004865a <HAL_I2C_Mem_Write_IT+0xde>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10048642:	2308      	movs	r3, #8
10048644:	18fb      	adds	r3, r7, r3
10048646:	881b      	ldrh	r3, [r3, #0]
10048648:	b2da      	uxtb	r2, r3
1004864a:	68fb      	ldr	r3, [r7, #12]
1004864c:	681b      	ldr	r3, [r3, #0]
1004864e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
10048650:	68fb      	ldr	r3, [r7, #12]
10048652:	2201      	movs	r2, #1
10048654:	4252      	negs	r2, r2
10048656:	651a      	str	r2, [r3, #80]	@ 0x50
10048658:	e00e      	b.n	10048678 <HAL_I2C_Mem_Write_IT+0xfc>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
1004865a:	2108      	movs	r1, #8
1004865c:	187b      	adds	r3, r7, r1
1004865e:	881b      	ldrh	r3, [r3, #0]
10048660:	0a1b      	lsrs	r3, r3, #8
10048662:	b29b      	uxth	r3, r3
10048664:	b2da      	uxtb	r2, r3
10048666:	68fb      	ldr	r3, [r7, #12]
10048668:	681b      	ldr	r3, [r3, #0]
1004866a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
1004866c:	187b      	adds	r3, r7, r1
1004866e:	881b      	ldrh	r3, [r3, #0]
10048670:	b2db      	uxtb	r3, r3
10048672:	001a      	movs	r2, r3
10048674:	68fb      	ldr	r3, [r7, #12]
10048676:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
10048678:	1dbb      	adds	r3, r7, #6
1004867a:	881b      	ldrh	r3, [r3, #0]
1004867c:	b2da      	uxtb	r2, r3
1004867e:	2380      	movs	r3, #128	@ 0x80
10048680:	045c      	lsls	r4, r3, #17
10048682:	230a      	movs	r3, #10
10048684:	18fb      	adds	r3, r7, r3
10048686:	8819      	ldrh	r1, [r3, #0]
10048688:	68f8      	ldr	r0, [r7, #12]
1004868a:	4b0c      	ldr	r3, [pc, #48]	@ (100486bc <HAL_I2C_Mem_Write_IT+0x140>)
1004868c:	9300      	str	r3, [sp, #0]
1004868e:	0023      	movs	r3, r4
10048690:	f001 fc76 	bl	10049f80 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10048694:	68fb      	ldr	r3, [r7, #12]
10048696:	2240      	movs	r2, #64	@ 0x40
10048698:	2100      	movs	r1, #0
1004869a:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
1004869c:	68fb      	ldr	r3, [r7, #12]
1004869e:	2101      	movs	r1, #1
100486a0:	0018      	movs	r0, r3
100486a2:	f001 fca7 	bl	10049ff4 <I2C_Enable_IRQ>

    return HAL_OK;
100486a6:	2300      	movs	r3, #0
100486a8:	e000      	b.n	100486ac <HAL_I2C_Mem_Write_IT+0x130>
  }
  else
  {
    return HAL_BUSY;
100486aa:	2302      	movs	r3, #2
  }
}
100486ac:	0018      	movs	r0, r3
100486ae:	46bd      	mov	sp, r7
100486b0:	b005      	add	sp, #20
100486b2:	bd90      	pop	{r4, r7, pc}
100486b4:	ffff0000 	.word	0xffff0000
100486b8:	10048975 	.word	0x10048975
100486bc:	80002000 	.word	0x80002000

100486c0 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
100486c0:	b590      	push	{r4, r7, lr}
100486c2:	b087      	sub	sp, #28
100486c4:	af02      	add	r7, sp, #8
100486c6:	60f8      	str	r0, [r7, #12]
100486c8:	000c      	movs	r4, r1
100486ca:	0010      	movs	r0, r2
100486cc:	0019      	movs	r1, r3
100486ce:	230a      	movs	r3, #10
100486d0:	18fb      	adds	r3, r7, r3
100486d2:	1c22      	adds	r2, r4, #0
100486d4:	801a      	strh	r2, [r3, #0]
100486d6:	2308      	movs	r3, #8
100486d8:	18fb      	adds	r3, r7, r3
100486da:	1c02      	adds	r2, r0, #0
100486dc:	801a      	strh	r2, [r3, #0]
100486de:	1dbb      	adds	r3, r7, #6
100486e0:	1c0a      	adds	r2, r1, #0
100486e2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
100486e4:	68fb      	ldr	r3, [r7, #12]
100486e6:	2241      	movs	r2, #65	@ 0x41
100486e8:	5c9b      	ldrb	r3, [r3, r2]
100486ea:	b2db      	uxtb	r3, r3
100486ec:	2b20      	cmp	r3, #32
100486ee:	d000      	beq.n	100486f2 <HAL_I2C_Mem_Read_IT+0x32>
100486f0:	e078      	b.n	100487e4 <HAL_I2C_Mem_Read_IT+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
100486f2:	6a3b      	ldr	r3, [r7, #32]
100486f4:	2b00      	cmp	r3, #0
100486f6:	d004      	beq.n	10048702 <HAL_I2C_Mem_Read_IT+0x42>
100486f8:	2324      	movs	r3, #36	@ 0x24
100486fa:	18fb      	adds	r3, r7, r3
100486fc:	881b      	ldrh	r3, [r3, #0]
100486fe:	2b00      	cmp	r3, #0
10048700:	d105      	bne.n	1004870e <HAL_I2C_Mem_Read_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
10048702:	68fb      	ldr	r3, [r7, #12]
10048704:	2280      	movs	r2, #128	@ 0x80
10048706:	0092      	lsls	r2, r2, #2
10048708:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
1004870a:	2301      	movs	r3, #1
1004870c:	e06b      	b.n	100487e6 <HAL_I2C_Mem_Read_IT+0x126>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
1004870e:	68fb      	ldr	r3, [r7, #12]
10048710:	681b      	ldr	r3, [r3, #0]
10048712:	699a      	ldr	r2, [r3, #24]
10048714:	2380      	movs	r3, #128	@ 0x80
10048716:	021b      	lsls	r3, r3, #8
10048718:	401a      	ands	r2, r3
1004871a:	2380      	movs	r3, #128	@ 0x80
1004871c:	021b      	lsls	r3, r3, #8
1004871e:	429a      	cmp	r2, r3
10048720:	d101      	bne.n	10048726 <HAL_I2C_Mem_Read_IT+0x66>
    {
      return HAL_BUSY;
10048722:	2302      	movs	r3, #2
10048724:	e05f      	b.n	100487e6 <HAL_I2C_Mem_Read_IT+0x126>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
10048726:	68fb      	ldr	r3, [r7, #12]
10048728:	2240      	movs	r2, #64	@ 0x40
1004872a:	5c9b      	ldrb	r3, [r3, r2]
1004872c:	2b01      	cmp	r3, #1
1004872e:	d101      	bne.n	10048734 <HAL_I2C_Mem_Read_IT+0x74>
10048730:	2302      	movs	r3, #2
10048732:	e058      	b.n	100487e6 <HAL_I2C_Mem_Read_IT+0x126>
10048734:	68fb      	ldr	r3, [r7, #12]
10048736:	2240      	movs	r2, #64	@ 0x40
10048738:	2101      	movs	r1, #1
1004873a:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
1004873c:	68fb      	ldr	r3, [r7, #12]
1004873e:	2241      	movs	r2, #65	@ 0x41
10048740:	2122      	movs	r1, #34	@ 0x22
10048742:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
10048744:	68fb      	ldr	r3, [r7, #12]
10048746:	2242      	movs	r2, #66	@ 0x42
10048748:	2140      	movs	r1, #64	@ 0x40
1004874a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
1004874c:	68fb      	ldr	r3, [r7, #12]
1004874e:	2200      	movs	r2, #0
10048750:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
10048752:	68fb      	ldr	r3, [r7, #12]
10048754:	6a3a      	ldr	r2, [r7, #32]
10048756:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
10048758:	68fb      	ldr	r3, [r7, #12]
1004875a:	2224      	movs	r2, #36	@ 0x24
1004875c:	18ba      	adds	r2, r7, r2
1004875e:	8812      	ldrh	r2, [r2, #0]
10048760:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
10048762:	68fb      	ldr	r3, [r7, #12]
10048764:	4a22      	ldr	r2, [pc, #136]	@ (100487f0 <HAL_I2C_Mem_Read_IT+0x130>)
10048766:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
10048768:	68fb      	ldr	r3, [r7, #12]
1004876a:	4a22      	ldr	r2, [pc, #136]	@ (100487f4 <HAL_I2C_Mem_Read_IT+0x134>)
1004876c:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
1004876e:	230a      	movs	r3, #10
10048770:	18fb      	adds	r3, r7, r3
10048772:	881a      	ldrh	r2, [r3, #0]
10048774:	68fb      	ldr	r3, [r7, #12]
10048776:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
10048778:	1dbb      	adds	r3, r7, #6
1004877a:	881b      	ldrh	r3, [r3, #0]
1004877c:	2b01      	cmp	r3, #1
1004877e:	d10b      	bne.n	10048798 <HAL_I2C_Mem_Read_IT+0xd8>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10048780:	2308      	movs	r3, #8
10048782:	18fb      	adds	r3, r7, r3
10048784:	881b      	ldrh	r3, [r3, #0]
10048786:	b2da      	uxtb	r2, r3
10048788:	68fb      	ldr	r3, [r7, #12]
1004878a:	681b      	ldr	r3, [r3, #0]
1004878c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
1004878e:	68fb      	ldr	r3, [r7, #12]
10048790:	2201      	movs	r2, #1
10048792:	4252      	negs	r2, r2
10048794:	651a      	str	r2, [r3, #80]	@ 0x50
10048796:	e00e      	b.n	100487b6 <HAL_I2C_Mem_Read_IT+0xf6>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
10048798:	2108      	movs	r1, #8
1004879a:	187b      	adds	r3, r7, r1
1004879c:	881b      	ldrh	r3, [r3, #0]
1004879e:	0a1b      	lsrs	r3, r3, #8
100487a0:	b29b      	uxth	r3, r3
100487a2:	b2da      	uxtb	r2, r3
100487a4:	68fb      	ldr	r3, [r7, #12]
100487a6:	681b      	ldr	r3, [r3, #0]
100487a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
100487aa:	187b      	adds	r3, r7, r1
100487ac:	881b      	ldrh	r3, [r3, #0]
100487ae:	b2db      	uxtb	r3, r3
100487b0:	001a      	movs	r2, r3
100487b2:	68fb      	ldr	r3, [r7, #12]
100487b4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
100487b6:	1dbb      	adds	r3, r7, #6
100487b8:	881b      	ldrh	r3, [r3, #0]
100487ba:	b2da      	uxtb	r2, r3
100487bc:	230a      	movs	r3, #10
100487be:	18fb      	adds	r3, r7, r3
100487c0:	8819      	ldrh	r1, [r3, #0]
100487c2:	68f8      	ldr	r0, [r7, #12]
100487c4:	4b0c      	ldr	r3, [pc, #48]	@ (100487f8 <HAL_I2C_Mem_Read_IT+0x138>)
100487c6:	9300      	str	r3, [sp, #0]
100487c8:	2300      	movs	r3, #0
100487ca:	f001 fbd9 	bl	10049f80 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
100487ce:	68fb      	ldr	r3, [r7, #12]
100487d0:	2240      	movs	r2, #64	@ 0x40
100487d2:	2100      	movs	r1, #0
100487d4:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
100487d6:	68fb      	ldr	r3, [r7, #12]
100487d8:	2101      	movs	r1, #1
100487da:	0018      	movs	r0, r3
100487dc:	f001 fc0a 	bl	10049ff4 <I2C_Enable_IRQ>

    return HAL_OK;
100487e0:	2300      	movs	r3, #0
100487e2:	e000      	b.n	100487e6 <HAL_I2C_Mem_Read_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
100487e4:	2302      	movs	r3, #2
  }
}
100487e6:	0018      	movs	r0, r3
100487e8:	46bd      	mov	sp, r7
100487ea:	b005      	add	sp, #20
100487ec:	bd90      	pop	{r4, r7, pc}
100487ee:	46c0      	nop			@ (mov r8, r8)
100487f0:	ffff0000 	.word	0xffff0000
100487f4:	10048975 	.word	0x10048975
100487f8:	80002000 	.word	0x80002000

100487fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
100487fc:	b580      	push	{r7, lr}
100487fe:	b084      	sub	sp, #16
10048800:	af00      	add	r7, sp, #0
10048802:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
10048804:	687b      	ldr	r3, [r7, #4]
10048806:	681b      	ldr	r3, [r3, #0]
10048808:	699b      	ldr	r3, [r3, #24]
1004880a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
1004880c:	687b      	ldr	r3, [r7, #4]
1004880e:	681b      	ldr	r3, [r3, #0]
10048810:	681b      	ldr	r3, [r3, #0]
10048812:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
10048814:	687b      	ldr	r3, [r7, #4]
10048816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10048818:	2b00      	cmp	r3, #0
1004881a:	d005      	beq.n	10048828 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
1004881c:	687b      	ldr	r3, [r7, #4]
1004881e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10048820:	68ba      	ldr	r2, [r7, #8]
10048822:	68f9      	ldr	r1, [r7, #12]
10048824:	6878      	ldr	r0, [r7, #4]
10048826:	4798      	blx	r3
  }
}
10048828:	46c0      	nop			@ (mov r8, r8)
1004882a:	46bd      	mov	sp, r7
1004882c:	b004      	add	sp, #16
1004882e:	bd80      	pop	{r7, pc}

10048830 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
10048830:	b580      	push	{r7, lr}
10048832:	b086      	sub	sp, #24
10048834:	af00      	add	r7, sp, #0
10048836:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
10048838:	687b      	ldr	r3, [r7, #4]
1004883a:	681b      	ldr	r3, [r3, #0]
1004883c:	699b      	ldr	r3, [r3, #24]
1004883e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
10048840:	687b      	ldr	r3, [r7, #4]
10048842:	681b      	ldr	r3, [r3, #0]
10048844:	681b      	ldr	r3, [r3, #0]
10048846:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
10048848:	697b      	ldr	r3, [r7, #20]
1004884a:	0a1b      	lsrs	r3, r3, #8
1004884c:	001a      	movs	r2, r3
1004884e:	2301      	movs	r3, #1
10048850:	4013      	ands	r3, r2
10048852:	d010      	beq.n	10048876 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10048854:	693b      	ldr	r3, [r7, #16]
10048856:	09db      	lsrs	r3, r3, #7
10048858:	001a      	movs	r2, r3
1004885a:	2301      	movs	r3, #1
1004885c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
1004885e:	d00a      	beq.n	10048876 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
10048860:	687b      	ldr	r3, [r7, #4]
10048862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10048864:	2201      	movs	r2, #1
10048866:	431a      	orrs	r2, r3
10048868:	687b      	ldr	r3, [r7, #4]
1004886a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
1004886c:	687b      	ldr	r3, [r7, #4]
1004886e:	681b      	ldr	r3, [r3, #0]
10048870:	2280      	movs	r2, #128	@ 0x80
10048872:	0052      	lsls	r2, r2, #1
10048874:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
10048876:	697b      	ldr	r3, [r7, #20]
10048878:	0a9b      	lsrs	r3, r3, #10
1004887a:	001a      	movs	r2, r3
1004887c:	2301      	movs	r3, #1
1004887e:	4013      	ands	r3, r2
10048880:	d010      	beq.n	100488a4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10048882:	693b      	ldr	r3, [r7, #16]
10048884:	09db      	lsrs	r3, r3, #7
10048886:	001a      	movs	r2, r3
10048888:	2301      	movs	r3, #1
1004888a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
1004888c:	d00a      	beq.n	100488a4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
1004888e:	687b      	ldr	r3, [r7, #4]
10048890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10048892:	2208      	movs	r2, #8
10048894:	431a      	orrs	r2, r3
10048896:	687b      	ldr	r3, [r7, #4]
10048898:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
1004889a:	687b      	ldr	r3, [r7, #4]
1004889c:	681b      	ldr	r3, [r3, #0]
1004889e:	2280      	movs	r2, #128	@ 0x80
100488a0:	00d2      	lsls	r2, r2, #3
100488a2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
100488a4:	697b      	ldr	r3, [r7, #20]
100488a6:	0a5b      	lsrs	r3, r3, #9
100488a8:	001a      	movs	r2, r3
100488aa:	2301      	movs	r3, #1
100488ac:	4013      	ands	r3, r2
100488ae:	d010      	beq.n	100488d2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
100488b0:	693b      	ldr	r3, [r7, #16]
100488b2:	09db      	lsrs	r3, r3, #7
100488b4:	001a      	movs	r2, r3
100488b6:	2301      	movs	r3, #1
100488b8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
100488ba:	d00a      	beq.n	100488d2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
100488bc:	687b      	ldr	r3, [r7, #4]
100488be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100488c0:	2202      	movs	r2, #2
100488c2:	431a      	orrs	r2, r3
100488c4:	687b      	ldr	r3, [r7, #4]
100488c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
100488c8:	687b      	ldr	r3, [r7, #4]
100488ca:	681b      	ldr	r3, [r3, #0]
100488cc:	2280      	movs	r2, #128	@ 0x80
100488ce:	0092      	lsls	r2, r2, #2
100488d0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
100488d2:	687b      	ldr	r3, [r7, #4]
100488d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100488d6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
100488d8:	68fb      	ldr	r3, [r7, #12]
100488da:	220b      	movs	r2, #11
100488dc:	4013      	ands	r3, r2
100488de:	d005      	beq.n	100488ec <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
100488e0:	68fa      	ldr	r2, [r7, #12]
100488e2:	687b      	ldr	r3, [r7, #4]
100488e4:	0011      	movs	r1, r2
100488e6:	0018      	movs	r0, r3
100488e8:	f001 f9de 	bl	10049ca8 <I2C_ITError>
  }
}
100488ec:	46c0      	nop			@ (mov r8, r8)
100488ee:	46bd      	mov	sp, r7
100488f0:	b006      	add	sp, #24
100488f2:	bd80      	pop	{r7, pc}

100488f4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
100488f4:	b580      	push	{r7, lr}
100488f6:	b082      	sub	sp, #8
100488f8:	af00      	add	r7, sp, #0
100488fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
100488fc:	46c0      	nop			@ (mov r8, r8)
100488fe:	46bd      	mov	sp, r7
10048900:	b002      	add	sp, #8
10048902:	bd80      	pop	{r7, pc}

10048904 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10048904:	b580      	push	{r7, lr}
10048906:	b082      	sub	sp, #8
10048908:	af00      	add	r7, sp, #0
1004890a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
1004890c:	46c0      	nop			@ (mov r8, r8)
1004890e:	46bd      	mov	sp, r7
10048910:	b002      	add	sp, #8
10048912:	bd80      	pop	{r7, pc}

10048914 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10048914:	b580      	push	{r7, lr}
10048916:	b082      	sub	sp, #8
10048918:	af00      	add	r7, sp, #0
1004891a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
1004891c:	46c0      	nop			@ (mov r8, r8)
1004891e:	46bd      	mov	sp, r7
10048920:	b002      	add	sp, #8
10048922:	bd80      	pop	{r7, pc}

10048924 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10048924:	b580      	push	{r7, lr}
10048926:	b082      	sub	sp, #8
10048928:	af00      	add	r7, sp, #0
1004892a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
1004892c:	46c0      	nop			@ (mov r8, r8)
1004892e:	46bd      	mov	sp, r7
10048930:	b002      	add	sp, #8
10048932:	bd80      	pop	{r7, pc}

10048934 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
10048934:	b580      	push	{r7, lr}
10048936:	b082      	sub	sp, #8
10048938:	af00      	add	r7, sp, #0
1004893a:	6078      	str	r0, [r7, #4]
1004893c:	0008      	movs	r0, r1
1004893e:	0011      	movs	r1, r2
10048940:	1cfb      	adds	r3, r7, #3
10048942:	1c02      	adds	r2, r0, #0
10048944:	701a      	strb	r2, [r3, #0]
10048946:	003b      	movs	r3, r7
10048948:	1c0a      	adds	r2, r1, #0
1004894a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
1004894c:	46c0      	nop			@ (mov r8, r8)
1004894e:	46bd      	mov	sp, r7
10048950:	b002      	add	sp, #8
10048952:	bd80      	pop	{r7, pc}

10048954 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
10048954:	b580      	push	{r7, lr}
10048956:	b082      	sub	sp, #8
10048958:	af00      	add	r7, sp, #0
1004895a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
1004895c:	46c0      	nop			@ (mov r8, r8)
1004895e:	46bd      	mov	sp, r7
10048960:	b002      	add	sp, #8
10048962:	bd80      	pop	{r7, pc}

10048964 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
10048964:	b580      	push	{r7, lr}
10048966:	b082      	sub	sp, #8
10048968:	af00      	add	r7, sp, #0
1004896a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
1004896c:	46c0      	nop			@ (mov r8, r8)
1004896e:	46bd      	mov	sp, r7
10048970:	b002      	add	sp, #8
10048972:	bd80      	pop	{r7, pc}

10048974 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
10048974:	b590      	push	{r4, r7, lr}
10048976:	b089      	sub	sp, #36	@ 0x24
10048978:	af02      	add	r7, sp, #8
1004897a:	60f8      	str	r0, [r7, #12]
1004897c:	60b9      	str	r1, [r7, #8]
1004897e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
10048980:	4b97      	ldr	r3, [pc, #604]	@ (10048be0 <I2C_Mem_ISR_IT+0x26c>)
10048982:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
10048984:	68bb      	ldr	r3, [r7, #8]
10048986:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
10048988:	68fb      	ldr	r3, [r7, #12]
1004898a:	2240      	movs	r2, #64	@ 0x40
1004898c:	5c9b      	ldrb	r3, [r3, r2]
1004898e:	2b01      	cmp	r3, #1
10048990:	d101      	bne.n	10048996 <I2C_Mem_ISR_IT+0x22>
10048992:	2302      	movs	r3, #2
10048994:	e11f      	b.n	10048bd6 <I2C_Mem_ISR_IT+0x262>
10048996:	68fb      	ldr	r3, [r7, #12]
10048998:	2240      	movs	r2, #64	@ 0x40
1004899a:	2101      	movs	r1, #1
1004899c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
1004899e:	693b      	ldr	r3, [r7, #16]
100489a0:	091b      	lsrs	r3, r3, #4
100489a2:	001a      	movs	r2, r3
100489a4:	2301      	movs	r3, #1
100489a6:	4013      	ands	r3, r2
100489a8:	d014      	beq.n	100489d4 <I2C_Mem_ISR_IT+0x60>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
100489aa:	687b      	ldr	r3, [r7, #4]
100489ac:	091b      	lsrs	r3, r3, #4
100489ae:	001a      	movs	r2, r3
100489b0:	2301      	movs	r3, #1
100489b2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
100489b4:	d00e      	beq.n	100489d4 <I2C_Mem_ISR_IT+0x60>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100489b6:	68fb      	ldr	r3, [r7, #12]
100489b8:	681b      	ldr	r3, [r3, #0]
100489ba:	2210      	movs	r2, #16
100489bc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
100489be:	68fb      	ldr	r3, [r7, #12]
100489c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100489c2:	2204      	movs	r2, #4
100489c4:	431a      	orrs	r2, r3
100489c6:	68fb      	ldr	r3, [r7, #12]
100489c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
100489ca:	68fb      	ldr	r3, [r7, #12]
100489cc:	0018      	movs	r0, r3
100489ce:	f001 fa96 	bl	10049efe <I2C_Flush_TXDR>
100489d2:	e0e9      	b.n	10048ba8 <I2C_Mem_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
100489d4:	693b      	ldr	r3, [r7, #16]
100489d6:	089b      	lsrs	r3, r3, #2
100489d8:	001a      	movs	r2, r3
100489da:	2301      	movs	r3, #1
100489dc:	4013      	ands	r3, r2
100489de:	d023      	beq.n	10048a28 <I2C_Mem_ISR_IT+0xb4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
100489e0:	687b      	ldr	r3, [r7, #4]
100489e2:	089b      	lsrs	r3, r3, #2
100489e4:	001a      	movs	r2, r3
100489e6:	2301      	movs	r3, #1
100489e8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
100489ea:	d01d      	beq.n	10048a28 <I2C_Mem_ISR_IT+0xb4>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
100489ec:	693b      	ldr	r3, [r7, #16]
100489ee:	2204      	movs	r2, #4
100489f0:	4393      	bics	r3, r2
100489f2:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
100489f4:	68fb      	ldr	r3, [r7, #12]
100489f6:	681b      	ldr	r3, [r3, #0]
100489f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100489fa:	68fb      	ldr	r3, [r7, #12]
100489fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100489fe:	b2d2      	uxtb	r2, r2
10048a00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
10048a02:	68fb      	ldr	r3, [r7, #12]
10048a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048a06:	1c5a      	adds	r2, r3, #1
10048a08:	68fb      	ldr	r3, [r7, #12]
10048a0a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
10048a0c:	68fb      	ldr	r3, [r7, #12]
10048a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048a10:	3b01      	subs	r3, #1
10048a12:	b29a      	uxth	r2, r3
10048a14:	68fb      	ldr	r3, [r7, #12]
10048a16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
10048a18:	68fb      	ldr	r3, [r7, #12]
10048a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048a1c:	b29b      	uxth	r3, r3
10048a1e:	3b01      	subs	r3, #1
10048a20:	b29a      	uxth	r2, r3
10048a22:	68fb      	ldr	r3, [r7, #12]
10048a24:	855a      	strh	r2, [r3, #42]	@ 0x2a
10048a26:	e0bf      	b.n	10048ba8 <I2C_Mem_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10048a28:	693b      	ldr	r3, [r7, #16]
10048a2a:	085b      	lsrs	r3, r3, #1
10048a2c:	001a      	movs	r2, r3
10048a2e:	2301      	movs	r3, #1
10048a30:	4013      	ands	r3, r2
10048a32:	d02c      	beq.n	10048a8e <I2C_Mem_ISR_IT+0x11a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
10048a34:	687b      	ldr	r3, [r7, #4]
10048a36:	085b      	lsrs	r3, r3, #1
10048a38:	001a      	movs	r2, r3
10048a3a:	2301      	movs	r3, #1
10048a3c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10048a3e:	d026      	beq.n	10048a8e <I2C_Mem_ISR_IT+0x11a>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
10048a40:	68fb      	ldr	r3, [r7, #12]
10048a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10048a44:	3301      	adds	r3, #1
10048a46:	d118      	bne.n	10048a7a <I2C_Mem_ISR_IT+0x106>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
10048a48:	68fb      	ldr	r3, [r7, #12]
10048a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048a4c:	781a      	ldrb	r2, [r3, #0]
10048a4e:	68fb      	ldr	r3, [r7, #12]
10048a50:	681b      	ldr	r3, [r3, #0]
10048a52:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10048a54:	68fb      	ldr	r3, [r7, #12]
10048a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048a58:	1c5a      	adds	r2, r3, #1
10048a5a:	68fb      	ldr	r3, [r7, #12]
10048a5c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
10048a5e:	68fb      	ldr	r3, [r7, #12]
10048a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048a62:	3b01      	subs	r3, #1
10048a64:	b29a      	uxth	r2, r3
10048a66:	68fb      	ldr	r3, [r7, #12]
10048a68:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10048a6a:	68fb      	ldr	r3, [r7, #12]
10048a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048a6e:	b29b      	uxth	r3, r3
10048a70:	3b01      	subs	r3, #1
10048a72:	b29a      	uxth	r2, r3
10048a74:	68fb      	ldr	r3, [r7, #12]
10048a76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
10048a78:	e096      	b.n	10048ba8 <I2C_Mem_ISR_IT+0x234>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
10048a7a:	68fb      	ldr	r3, [r7, #12]
10048a7c:	681b      	ldr	r3, [r3, #0]
10048a7e:	68fa      	ldr	r2, [r7, #12]
10048a80:	6d12      	ldr	r2, [r2, #80]	@ 0x50
10048a82:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
10048a84:	68fb      	ldr	r3, [r7, #12]
10048a86:	2201      	movs	r2, #1
10048a88:	4252      	negs	r2, r2
10048a8a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
10048a8c:	e08c      	b.n	10048ba8 <I2C_Mem_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
10048a8e:	693b      	ldr	r3, [r7, #16]
10048a90:	09db      	lsrs	r3, r3, #7
10048a92:	001a      	movs	r2, r3
10048a94:	2301      	movs	r3, #1
10048a96:	4013      	ands	r3, r2
10048a98:	d03e      	beq.n	10048b18 <I2C_Mem_ISR_IT+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10048a9a:	687b      	ldr	r3, [r7, #4]
10048a9c:	099b      	lsrs	r3, r3, #6
10048a9e:	001a      	movs	r2, r3
10048aa0:	2301      	movs	r3, #1
10048aa2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
10048aa4:	d038      	beq.n	10048b18 <I2C_Mem_ISR_IT+0x1a4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
10048aa6:	68fb      	ldr	r3, [r7, #12]
10048aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048aaa:	b29b      	uxth	r3, r3
10048aac:	2b00      	cmp	r3, #0
10048aae:	d02c      	beq.n	10048b0a <I2C_Mem_ISR_IT+0x196>
10048ab0:	68fb      	ldr	r3, [r7, #12]
10048ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048ab4:	2b00      	cmp	r3, #0
10048ab6:	d128      	bne.n	10048b0a <I2C_Mem_ISR_IT+0x196>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10048ab8:	68fb      	ldr	r3, [r7, #12]
10048aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048abc:	b29b      	uxth	r3, r3
10048abe:	2bff      	cmp	r3, #255	@ 0xff
10048ac0:	d910      	bls.n	10048ae4 <I2C_Mem_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
10048ac2:	68fb      	ldr	r3, [r7, #12]
10048ac4:	22ff      	movs	r2, #255	@ 0xff
10048ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10048ac8:	68fb      	ldr	r3, [r7, #12]
10048aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10048acc:	b299      	uxth	r1, r3
10048ace:	68fb      	ldr	r3, [r7, #12]
10048ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048ad2:	b2da      	uxtb	r2, r3
10048ad4:	2380      	movs	r3, #128	@ 0x80
10048ad6:	045b      	lsls	r3, r3, #17
10048ad8:	68f8      	ldr	r0, [r7, #12]
10048ada:	2400      	movs	r4, #0
10048adc:	9400      	str	r4, [sp, #0]
10048ade:	f001 fa4f 	bl	10049f80 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10048ae2:	e018      	b.n	10048b16 <I2C_Mem_ISR_IT+0x1a2>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
10048ae4:	68fb      	ldr	r3, [r7, #12]
10048ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048ae8:	b29a      	uxth	r2, r3
10048aea:	68fb      	ldr	r3, [r7, #12]
10048aec:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10048aee:	68fb      	ldr	r3, [r7, #12]
10048af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10048af2:	b299      	uxth	r1, r3
10048af4:	68fb      	ldr	r3, [r7, #12]
10048af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048af8:	b2da      	uxtb	r2, r3
10048afa:	2380      	movs	r3, #128	@ 0x80
10048afc:	049b      	lsls	r3, r3, #18
10048afe:	68f8      	ldr	r0, [r7, #12]
10048b00:	2400      	movs	r4, #0
10048b02:	9400      	str	r4, [sp, #0]
10048b04:	f001 fa3c 	bl	10049f80 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10048b08:	e005      	b.n	10048b16 <I2C_Mem_ISR_IT+0x1a2>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10048b0a:	68fb      	ldr	r3, [r7, #12]
10048b0c:	2140      	movs	r1, #64	@ 0x40
10048b0e:	0018      	movs	r0, r3
10048b10:	f001 f8ca 	bl	10049ca8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
10048b14:	e048      	b.n	10048ba8 <I2C_Mem_ISR_IT+0x234>
10048b16:	e047      	b.n	10048ba8 <I2C_Mem_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
10048b18:	693b      	ldr	r3, [r7, #16]
10048b1a:	099b      	lsrs	r3, r3, #6
10048b1c:	001a      	movs	r2, r3
10048b1e:	2301      	movs	r3, #1
10048b20:	4013      	ands	r3, r2
10048b22:	d041      	beq.n	10048ba8 <I2C_Mem_ISR_IT+0x234>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10048b24:	687b      	ldr	r3, [r7, #4]
10048b26:	099b      	lsrs	r3, r3, #6
10048b28:	001a      	movs	r2, r3
10048b2a:	2301      	movs	r3, #1
10048b2c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
10048b2e:	d03b      	beq.n	10048ba8 <I2C_Mem_ISR_IT+0x234>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10048b30:	68fb      	ldr	r3, [r7, #12]
10048b32:	2101      	movs	r1, #1
10048b34:	0018      	movs	r0, r3
10048b36:	f001 fae7 	bl	1004a108 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
10048b3a:	68fb      	ldr	r3, [r7, #12]
10048b3c:	2102      	movs	r1, #2
10048b3e:	0018      	movs	r0, r3
10048b40:	f001 fa58 	bl	10049ff4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10048b44:	68fb      	ldr	r3, [r7, #12]
10048b46:	2241      	movs	r2, #65	@ 0x41
10048b48:	5c9b      	ldrb	r3, [r3, r2]
10048b4a:	b2db      	uxtb	r3, r3
10048b4c:	2b22      	cmp	r3, #34	@ 0x22
10048b4e:	d101      	bne.n	10048b54 <I2C_Mem_ISR_IT+0x1e0>
    {
      direction = I2C_GENERATE_START_READ;
10048b50:	4b24      	ldr	r3, [pc, #144]	@ (10048be4 <I2C_Mem_ISR_IT+0x270>)
10048b52:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
10048b54:	68fb      	ldr	r3, [r7, #12]
10048b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048b58:	b29b      	uxth	r3, r3
10048b5a:	2bff      	cmp	r3, #255	@ 0xff
10048b5c:	d911      	bls.n	10048b82 <I2C_Mem_ISR_IT+0x20e>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
10048b5e:	68fb      	ldr	r3, [r7, #12]
10048b60:	22ff      	movs	r2, #255	@ 0xff
10048b62:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10048b64:	68fb      	ldr	r3, [r7, #12]
10048b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10048b68:	b299      	uxth	r1, r3
10048b6a:	68fb      	ldr	r3, [r7, #12]
10048b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048b6e:	b2da      	uxtb	r2, r3
10048b70:	2380      	movs	r3, #128	@ 0x80
10048b72:	045c      	lsls	r4, r3, #17
10048b74:	68f8      	ldr	r0, [r7, #12]
10048b76:	697b      	ldr	r3, [r7, #20]
10048b78:	9300      	str	r3, [sp, #0]
10048b7a:	0023      	movs	r3, r4
10048b7c:	f001 fa00 	bl	10049f80 <I2C_TransferConfig>
10048b80:	e012      	b.n	10048ba8 <I2C_Mem_ISR_IT+0x234>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
10048b82:	68fb      	ldr	r3, [r7, #12]
10048b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048b86:	b29a      	uxth	r2, r3
10048b88:	68fb      	ldr	r3, [r7, #12]
10048b8a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10048b8c:	68fb      	ldr	r3, [r7, #12]
10048b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10048b90:	b299      	uxth	r1, r3
10048b92:	68fb      	ldr	r3, [r7, #12]
10048b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048b96:	b2da      	uxtb	r2, r3
10048b98:	2380      	movs	r3, #128	@ 0x80
10048b9a:	049c      	lsls	r4, r3, #18
10048b9c:	68f8      	ldr	r0, [r7, #12]
10048b9e:	697b      	ldr	r3, [r7, #20]
10048ba0:	9300      	str	r3, [sp, #0]
10048ba2:	0023      	movs	r3, r4
10048ba4:	f001 f9ec 	bl	10049f80 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10048ba8:	693b      	ldr	r3, [r7, #16]
10048baa:	095b      	lsrs	r3, r3, #5
10048bac:	001a      	movs	r2, r3
10048bae:	2301      	movs	r3, #1
10048bb0:	4013      	ands	r3, r2
10048bb2:	d00b      	beq.n	10048bcc <I2C_Mem_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10048bb4:	687b      	ldr	r3, [r7, #4]
10048bb6:	095b      	lsrs	r3, r3, #5
10048bb8:	001a      	movs	r2, r3
10048bba:	2301      	movs	r3, #1
10048bbc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10048bbe:	d005      	beq.n	10048bcc <I2C_Mem_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
10048bc0:	693a      	ldr	r2, [r7, #16]
10048bc2:	68fb      	ldr	r3, [r7, #12]
10048bc4:	0011      	movs	r1, r2
10048bc6:	0018      	movs	r0, r3
10048bc8:	f000 fdb2 	bl	10049730 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10048bcc:	68fb      	ldr	r3, [r7, #12]
10048bce:	2240      	movs	r2, #64	@ 0x40
10048bd0:	2100      	movs	r1, #0
10048bd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10048bd4:	2300      	movs	r3, #0
}
10048bd6:	0018      	movs	r0, r3
10048bd8:	46bd      	mov	sp, r7
10048bda:	b007      	add	sp, #28
10048bdc:	bd90      	pop	{r4, r7, pc}
10048bde:	46c0      	nop			@ (mov r8, r8)
10048be0:	80002000 	.word	0x80002000
10048be4:	80002400 	.word	0x80002400

10048be8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
10048be8:	b580      	push	{r7, lr}
10048bea:	b086      	sub	sp, #24
10048bec:	af00      	add	r7, sp, #0
10048bee:	60f8      	str	r0, [r7, #12]
10048bf0:	60b9      	str	r1, [r7, #8]
10048bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
10048bf4:	68fb      	ldr	r3, [r7, #12]
10048bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10048bf8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
10048bfa:	68bb      	ldr	r3, [r7, #8]
10048bfc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
10048bfe:	68fb      	ldr	r3, [r7, #12]
10048c00:	2240      	movs	r2, #64	@ 0x40
10048c02:	5c9b      	ldrb	r3, [r3, r2]
10048c04:	2b01      	cmp	r3, #1
10048c06:	d101      	bne.n	10048c0c <I2C_Slave_ISR_IT+0x24>
10048c08:	2302      	movs	r3, #2
10048c0a:	e0fb      	b.n	10048e04 <I2C_Slave_ISR_IT+0x21c>
10048c0c:	68fb      	ldr	r3, [r7, #12]
10048c0e:	2240      	movs	r2, #64	@ 0x40
10048c10:	2101      	movs	r1, #1
10048c12:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10048c14:	693b      	ldr	r3, [r7, #16]
10048c16:	095b      	lsrs	r3, r3, #5
10048c18:	001a      	movs	r2, r3
10048c1a:	2301      	movs	r3, #1
10048c1c:	4013      	ands	r3, r2
10048c1e:	d00c      	beq.n	10048c3a <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10048c20:	687b      	ldr	r3, [r7, #4]
10048c22:	095b      	lsrs	r3, r3, #5
10048c24:	001a      	movs	r2, r3
10048c26:	2301      	movs	r3, #1
10048c28:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10048c2a:	d006      	beq.n	10048c3a <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
10048c2c:	693a      	ldr	r2, [r7, #16]
10048c2e:	68fb      	ldr	r3, [r7, #12]
10048c30:	0011      	movs	r1, r2
10048c32:	0018      	movs	r0, r3
10048c34:	f000 fe4e 	bl	100498d4 <I2C_ITSlaveCplt>
10048c38:	e0df      	b.n	10048dfa <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10048c3a:	693b      	ldr	r3, [r7, #16]
10048c3c:	091b      	lsrs	r3, r3, #4
10048c3e:	001a      	movs	r2, r3
10048c40:	2301      	movs	r3, #1
10048c42:	4013      	ands	r3, r2
10048c44:	d054      	beq.n	10048cf0 <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10048c46:	687b      	ldr	r3, [r7, #4]
10048c48:	091b      	lsrs	r3, r3, #4
10048c4a:	001a      	movs	r2, r3
10048c4c:	2301      	movs	r3, #1
10048c4e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10048c50:	d04e      	beq.n	10048cf0 <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
10048c52:	68fb      	ldr	r3, [r7, #12]
10048c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048c56:	b29b      	uxth	r3, r3
10048c58:	2b00      	cmp	r3, #0
10048c5a:	d12d      	bne.n	10048cb8 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10048c5c:	68fb      	ldr	r3, [r7, #12]
10048c5e:	2241      	movs	r2, #65	@ 0x41
10048c60:	5c9b      	ldrb	r3, [r3, r2]
10048c62:	b2db      	uxtb	r3, r3
10048c64:	2b28      	cmp	r3, #40	@ 0x28
10048c66:	d10b      	bne.n	10048c80 <I2C_Slave_ISR_IT+0x98>
10048c68:	697a      	ldr	r2, [r7, #20]
10048c6a:	2380      	movs	r3, #128	@ 0x80
10048c6c:	049b      	lsls	r3, r3, #18
10048c6e:	429a      	cmp	r2, r3
10048c70:	d106      	bne.n	10048c80 <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
10048c72:	693a      	ldr	r2, [r7, #16]
10048c74:	68fb      	ldr	r3, [r7, #12]
10048c76:	0011      	movs	r1, r2
10048c78:	0018      	movs	r0, r3
10048c7a:	f000 ffbb 	bl	10049bf4 <I2C_ITListenCplt>
10048c7e:	e036      	b.n	10048cee <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
10048c80:	68fb      	ldr	r3, [r7, #12]
10048c82:	2241      	movs	r2, #65	@ 0x41
10048c84:	5c9b      	ldrb	r3, [r3, r2]
10048c86:	b2db      	uxtb	r3, r3
10048c88:	2b29      	cmp	r3, #41	@ 0x29
10048c8a:	d110      	bne.n	10048cae <I2C_Slave_ISR_IT+0xc6>
10048c8c:	697b      	ldr	r3, [r7, #20]
10048c8e:	4a5f      	ldr	r2, [pc, #380]	@ (10048e0c <I2C_Slave_ISR_IT+0x224>)
10048c90:	4293      	cmp	r3, r2
10048c92:	d00c      	beq.n	10048cae <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10048c94:	68fb      	ldr	r3, [r7, #12]
10048c96:	681b      	ldr	r3, [r3, #0]
10048c98:	2210      	movs	r2, #16
10048c9a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
10048c9c:	68fb      	ldr	r3, [r7, #12]
10048c9e:	0018      	movs	r0, r3
10048ca0:	f001 f92d 	bl	10049efe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10048ca4:	68fb      	ldr	r3, [r7, #12]
10048ca6:	0018      	movs	r0, r3
10048ca8:	f000 fcdc 	bl	10049664 <I2C_ITSlaveSeqCplt>
10048cac:	e01f      	b.n	10048cee <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10048cae:	68fb      	ldr	r3, [r7, #12]
10048cb0:	681b      	ldr	r3, [r3, #0]
10048cb2:	2210      	movs	r2, #16
10048cb4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
10048cb6:	e09d      	b.n	10048df4 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10048cb8:	68fb      	ldr	r3, [r7, #12]
10048cba:	681b      	ldr	r3, [r3, #0]
10048cbc:	2210      	movs	r2, #16
10048cbe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10048cc0:	68fb      	ldr	r3, [r7, #12]
10048cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10048cc4:	2204      	movs	r2, #4
10048cc6:	431a      	orrs	r2, r3
10048cc8:	68fb      	ldr	r3, [r7, #12]
10048cca:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
10048ccc:	697b      	ldr	r3, [r7, #20]
10048cce:	2b00      	cmp	r3, #0
10048cd0:	d005      	beq.n	10048cde <I2C_Slave_ISR_IT+0xf6>
10048cd2:	697a      	ldr	r2, [r7, #20]
10048cd4:	2380      	movs	r3, #128	@ 0x80
10048cd6:	045b      	lsls	r3, r3, #17
10048cd8:	429a      	cmp	r2, r3
10048cda:	d000      	beq.n	10048cde <I2C_Slave_ISR_IT+0xf6>
10048cdc:	e08a      	b.n	10048df4 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
10048cde:	68fb      	ldr	r3, [r7, #12]
10048ce0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10048ce2:	68fb      	ldr	r3, [r7, #12]
10048ce4:	0011      	movs	r1, r2
10048ce6:	0018      	movs	r0, r3
10048ce8:	f000 ffde 	bl	10049ca8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
10048cec:	e082      	b.n	10048df4 <I2C_Slave_ISR_IT+0x20c>
10048cee:	e081      	b.n	10048df4 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
10048cf0:	693b      	ldr	r3, [r7, #16]
10048cf2:	089b      	lsrs	r3, r3, #2
10048cf4:	001a      	movs	r2, r3
10048cf6:	2301      	movs	r3, #1
10048cf8:	4013      	ands	r3, r2
10048cfa:	d031      	beq.n	10048d60 <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
10048cfc:	687b      	ldr	r3, [r7, #4]
10048cfe:	089b      	lsrs	r3, r3, #2
10048d00:	001a      	movs	r2, r3
10048d02:	2301      	movs	r3, #1
10048d04:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
10048d06:	d02b      	beq.n	10048d60 <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
10048d08:	68fb      	ldr	r3, [r7, #12]
10048d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048d0c:	b29b      	uxth	r3, r3
10048d0e:	2b00      	cmp	r3, #0
10048d10:	d018      	beq.n	10048d44 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10048d12:	68fb      	ldr	r3, [r7, #12]
10048d14:	681b      	ldr	r3, [r3, #0]
10048d16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048d18:	68fb      	ldr	r3, [r7, #12]
10048d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048d1c:	b2d2      	uxtb	r2, r2
10048d1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10048d20:	68fb      	ldr	r3, [r7, #12]
10048d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048d24:	1c5a      	adds	r2, r3, #1
10048d26:	68fb      	ldr	r3, [r7, #12]
10048d28:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
10048d2a:	68fb      	ldr	r3, [r7, #12]
10048d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048d2e:	3b01      	subs	r3, #1
10048d30:	b29a      	uxth	r2, r3
10048d32:	68fb      	ldr	r3, [r7, #12]
10048d34:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10048d36:	68fb      	ldr	r3, [r7, #12]
10048d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048d3a:	b29b      	uxth	r3, r3
10048d3c:	3b01      	subs	r3, #1
10048d3e:	b29a      	uxth	r2, r3
10048d40:	68fb      	ldr	r3, [r7, #12]
10048d42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
10048d44:	68fb      	ldr	r3, [r7, #12]
10048d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048d48:	b29b      	uxth	r3, r3
10048d4a:	2b00      	cmp	r3, #0
10048d4c:	d154      	bne.n	10048df8 <I2C_Slave_ISR_IT+0x210>
10048d4e:	697b      	ldr	r3, [r7, #20]
10048d50:	4a2e      	ldr	r2, [pc, #184]	@ (10048e0c <I2C_Slave_ISR_IT+0x224>)
10048d52:	4293      	cmp	r3, r2
10048d54:	d050      	beq.n	10048df8 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
10048d56:	68fb      	ldr	r3, [r7, #12]
10048d58:	0018      	movs	r0, r3
10048d5a:	f000 fc83 	bl	10049664 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
10048d5e:	e04b      	b.n	10048df8 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
10048d60:	693b      	ldr	r3, [r7, #16]
10048d62:	08db      	lsrs	r3, r3, #3
10048d64:	001a      	movs	r2, r3
10048d66:	2301      	movs	r3, #1
10048d68:	4013      	ands	r3, r2
10048d6a:	d00c      	beq.n	10048d86 <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
10048d6c:	687b      	ldr	r3, [r7, #4]
10048d6e:	08db      	lsrs	r3, r3, #3
10048d70:	001a      	movs	r2, r3
10048d72:	2301      	movs	r3, #1
10048d74:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
10048d76:	d006      	beq.n	10048d86 <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
10048d78:	693a      	ldr	r2, [r7, #16]
10048d7a:	68fb      	ldr	r3, [r7, #12]
10048d7c:	0011      	movs	r1, r2
10048d7e:	0018      	movs	r0, r3
10048d80:	f000 fb8a 	bl	10049498 <I2C_ITAddrCplt>
10048d84:	e039      	b.n	10048dfa <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10048d86:	693b      	ldr	r3, [r7, #16]
10048d88:	085b      	lsrs	r3, r3, #1
10048d8a:	001a      	movs	r2, r3
10048d8c:	2301      	movs	r3, #1
10048d8e:	4013      	ands	r3, r2
10048d90:	d033      	beq.n	10048dfa <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
10048d92:	687b      	ldr	r3, [r7, #4]
10048d94:	085b      	lsrs	r3, r3, #1
10048d96:	001a      	movs	r2, r3
10048d98:	2301      	movs	r3, #1
10048d9a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10048d9c:	d02d      	beq.n	10048dfa <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
10048d9e:	68fb      	ldr	r3, [r7, #12]
10048da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048da2:	b29b      	uxth	r3, r3
10048da4:	2b00      	cmp	r3, #0
10048da6:	d018      	beq.n	10048dda <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
10048da8:	68fb      	ldr	r3, [r7, #12]
10048daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048dac:	781a      	ldrb	r2, [r3, #0]
10048dae:	68fb      	ldr	r3, [r7, #12]
10048db0:	681b      	ldr	r3, [r3, #0]
10048db2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10048db4:	68fb      	ldr	r3, [r7, #12]
10048db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048db8:	1c5a      	adds	r2, r3, #1
10048dba:	68fb      	ldr	r3, [r7, #12]
10048dbc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
10048dbe:	68fb      	ldr	r3, [r7, #12]
10048dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048dc2:	b29b      	uxth	r3, r3
10048dc4:	3b01      	subs	r3, #1
10048dc6:	b29a      	uxth	r2, r3
10048dc8:	68fb      	ldr	r3, [r7, #12]
10048dca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
10048dcc:	68fb      	ldr	r3, [r7, #12]
10048dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048dd0:	3b01      	subs	r3, #1
10048dd2:	b29a      	uxth	r2, r3
10048dd4:	68fb      	ldr	r3, [r7, #12]
10048dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
10048dd8:	e00f      	b.n	10048dfa <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
10048dda:	697a      	ldr	r2, [r7, #20]
10048ddc:	2380      	movs	r3, #128	@ 0x80
10048dde:	045b      	lsls	r3, r3, #17
10048de0:	429a      	cmp	r2, r3
10048de2:	d002      	beq.n	10048dea <I2C_Slave_ISR_IT+0x202>
10048de4:	697b      	ldr	r3, [r7, #20]
10048de6:	2b00      	cmp	r3, #0
10048de8:	d107      	bne.n	10048dfa <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10048dea:	68fb      	ldr	r3, [r7, #12]
10048dec:	0018      	movs	r0, r3
10048dee:	f000 fc39 	bl	10049664 <I2C_ITSlaveSeqCplt>
10048df2:	e002      	b.n	10048dfa <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
10048df4:	46c0      	nop			@ (mov r8, r8)
10048df6:	e000      	b.n	10048dfa <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
10048df8:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10048dfa:	68fb      	ldr	r3, [r7, #12]
10048dfc:	2240      	movs	r2, #64	@ 0x40
10048dfe:	2100      	movs	r1, #0
10048e00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10048e02:	2300      	movs	r3, #0
}
10048e04:	0018      	movs	r0, r3
10048e06:	46bd      	mov	sp, r7
10048e08:	b006      	add	sp, #24
10048e0a:	bd80      	pop	{r7, pc}
10048e0c:	ffff0000 	.word	0xffff0000

10048e10 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
10048e10:	b590      	push	{r4, r7, lr}
10048e12:	b089      	sub	sp, #36	@ 0x24
10048e14:	af02      	add	r7, sp, #8
10048e16:	60f8      	str	r0, [r7, #12]
10048e18:	60b9      	str	r1, [r7, #8]
10048e1a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
10048e1c:	68fb      	ldr	r3, [r7, #12]
10048e1e:	2240      	movs	r2, #64	@ 0x40
10048e20:	5c9b      	ldrb	r3, [r3, r2]
10048e22:	2b01      	cmp	r3, #1
10048e24:	d101      	bne.n	10048e2a <I2C_Master_ISR_DMA+0x1a>
10048e26:	2302      	movs	r3, #2
10048e28:	e0f7      	b.n	1004901a <I2C_Master_ISR_DMA+0x20a>
10048e2a:	68fb      	ldr	r3, [r7, #12]
10048e2c:	2240      	movs	r2, #64	@ 0x40
10048e2e:	2101      	movs	r1, #1
10048e30:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10048e32:	68bb      	ldr	r3, [r7, #8]
10048e34:	091b      	lsrs	r3, r3, #4
10048e36:	001a      	movs	r2, r3
10048e38:	2301      	movs	r3, #1
10048e3a:	4013      	ands	r3, r2
10048e3c:	d019      	beq.n	10048e72 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10048e3e:	687b      	ldr	r3, [r7, #4]
10048e40:	091b      	lsrs	r3, r3, #4
10048e42:	001a      	movs	r2, r3
10048e44:	2301      	movs	r3, #1
10048e46:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10048e48:	d013      	beq.n	10048e72 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10048e4a:	68fb      	ldr	r3, [r7, #12]
10048e4c:	681b      	ldr	r3, [r3, #0]
10048e4e:	2210      	movs	r2, #16
10048e50:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10048e52:	68fb      	ldr	r3, [r7, #12]
10048e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10048e56:	2204      	movs	r2, #4
10048e58:	431a      	orrs	r2, r3
10048e5a:	68fb      	ldr	r3, [r7, #12]
10048e5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
10048e5e:	68fb      	ldr	r3, [r7, #12]
10048e60:	2120      	movs	r1, #32
10048e62:	0018      	movs	r0, r3
10048e64:	f001 f8c6 	bl	10049ff4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10048e68:	68fb      	ldr	r3, [r7, #12]
10048e6a:	0018      	movs	r0, r3
10048e6c:	f001 f847 	bl	10049efe <I2C_Flush_TXDR>
10048e70:	e0ce      	b.n	10049010 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
10048e72:	68bb      	ldr	r3, [r7, #8]
10048e74:	09db      	lsrs	r3, r3, #7
10048e76:	001a      	movs	r2, r3
10048e78:	2301      	movs	r3, #1
10048e7a:	4013      	ands	r3, r2
10048e7c:	d100      	bne.n	10048e80 <I2C_Master_ISR_DMA+0x70>
10048e7e:	e07e      	b.n	10048f7e <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10048e80:	687b      	ldr	r3, [r7, #4]
10048e82:	099b      	lsrs	r3, r3, #6
10048e84:	001a      	movs	r2, r3
10048e86:	2301      	movs	r3, #1
10048e88:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
10048e8a:	d100      	bne.n	10048e8e <I2C_Master_ISR_DMA+0x7e>
10048e8c:	e077      	b.n	10048f7e <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
10048e8e:	68fb      	ldr	r3, [r7, #12]
10048e90:	681b      	ldr	r3, [r3, #0]
10048e92:	681a      	ldr	r2, [r3, #0]
10048e94:	68fb      	ldr	r3, [r7, #12]
10048e96:	681b      	ldr	r3, [r3, #0]
10048e98:	2140      	movs	r1, #64	@ 0x40
10048e9a:	438a      	bics	r2, r1
10048e9c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
10048e9e:	68fb      	ldr	r3, [r7, #12]
10048ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048ea2:	b29b      	uxth	r3, r3
10048ea4:	2b00      	cmp	r3, #0
10048ea6:	d055      	beq.n	10048f54 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
10048ea8:	68fb      	ldr	r3, [r7, #12]
10048eaa:	681b      	ldr	r3, [r3, #0]
10048eac:	685b      	ldr	r3, [r3, #4]
10048eae:	b29a      	uxth	r2, r3
10048eb0:	2312      	movs	r3, #18
10048eb2:	18fb      	adds	r3, r7, r3
10048eb4:	0592      	lsls	r2, r2, #22
10048eb6:	0d92      	lsrs	r2, r2, #22
10048eb8:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10048eba:	68fb      	ldr	r3, [r7, #12]
10048ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048ebe:	b29b      	uxth	r3, r3
10048ec0:	2bff      	cmp	r3, #255	@ 0xff
10048ec2:	d906      	bls.n	10048ed2 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
10048ec4:	68fb      	ldr	r3, [r7, #12]
10048ec6:	22ff      	movs	r2, #255	@ 0xff
10048ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
10048eca:	2380      	movs	r3, #128	@ 0x80
10048ecc:	045b      	lsls	r3, r3, #17
10048ece:	617b      	str	r3, [r7, #20]
10048ed0:	e010      	b.n	10048ef4 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
10048ed2:	68fb      	ldr	r3, [r7, #12]
10048ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048ed6:	b29a      	uxth	r2, r3
10048ed8:	68fb      	ldr	r3, [r7, #12]
10048eda:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
10048edc:	68fb      	ldr	r3, [r7, #12]
10048ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10048ee0:	4a50      	ldr	r2, [pc, #320]	@ (10049024 <I2C_Master_ISR_DMA+0x214>)
10048ee2:	4293      	cmp	r3, r2
10048ee4:	d003      	beq.n	10048eee <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
10048ee6:	68fb      	ldr	r3, [r7, #12]
10048ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10048eea:	617b      	str	r3, [r7, #20]
10048eec:	e002      	b.n	10048ef4 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
10048eee:	2380      	movs	r3, #128	@ 0x80
10048ef0:	049b      	lsls	r3, r3, #18
10048ef2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
10048ef4:	68fb      	ldr	r3, [r7, #12]
10048ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048ef8:	b2da      	uxtb	r2, r3
10048efa:	697c      	ldr	r4, [r7, #20]
10048efc:	2312      	movs	r3, #18
10048efe:	18fb      	adds	r3, r7, r3
10048f00:	8819      	ldrh	r1, [r3, #0]
10048f02:	68f8      	ldr	r0, [r7, #12]
10048f04:	2300      	movs	r3, #0
10048f06:	9300      	str	r3, [sp, #0]
10048f08:	0023      	movs	r3, r4
10048f0a:	f001 f839 	bl	10049f80 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
10048f0e:	68fb      	ldr	r3, [r7, #12]
10048f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048f12:	b29a      	uxth	r2, r3
10048f14:	68fb      	ldr	r3, [r7, #12]
10048f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048f18:	1ad3      	subs	r3, r2, r3
10048f1a:	b29a      	uxth	r2, r3
10048f1c:	68fb      	ldr	r3, [r7, #12]
10048f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10048f20:	68fb      	ldr	r3, [r7, #12]
10048f22:	2241      	movs	r2, #65	@ 0x41
10048f24:	5c9b      	ldrb	r3, [r3, r2]
10048f26:	b2db      	uxtb	r3, r3
10048f28:	2b22      	cmp	r3, #34	@ 0x22
10048f2a:	d109      	bne.n	10048f40 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
10048f2c:	68fb      	ldr	r3, [r7, #12]
10048f2e:	681b      	ldr	r3, [r3, #0]
10048f30:	681a      	ldr	r2, [r3, #0]
10048f32:	68fb      	ldr	r3, [r7, #12]
10048f34:	681b      	ldr	r3, [r3, #0]
10048f36:	2180      	movs	r1, #128	@ 0x80
10048f38:	0209      	lsls	r1, r1, #8
10048f3a:	430a      	orrs	r2, r1
10048f3c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10048f3e:	e067      	b.n	10049010 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
10048f40:	68fb      	ldr	r3, [r7, #12]
10048f42:	681b      	ldr	r3, [r3, #0]
10048f44:	681a      	ldr	r2, [r3, #0]
10048f46:	68fb      	ldr	r3, [r7, #12]
10048f48:	681b      	ldr	r3, [r3, #0]
10048f4a:	2180      	movs	r1, #128	@ 0x80
10048f4c:	01c9      	lsls	r1, r1, #7
10048f4e:	430a      	orrs	r2, r1
10048f50:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10048f52:	e05d      	b.n	10049010 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
10048f54:	68fb      	ldr	r3, [r7, #12]
10048f56:	681b      	ldr	r3, [r3, #0]
10048f58:	685a      	ldr	r2, [r3, #4]
10048f5a:	2380      	movs	r3, #128	@ 0x80
10048f5c:	049b      	lsls	r3, r3, #18
10048f5e:	401a      	ands	r2, r3
10048f60:	2380      	movs	r3, #128	@ 0x80
10048f62:	049b      	lsls	r3, r3, #18
10048f64:	429a      	cmp	r2, r3
10048f66:	d004      	beq.n	10048f72 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
10048f68:	68fb      	ldr	r3, [r7, #12]
10048f6a:	0018      	movs	r0, r3
10048f6c:	f000 fb38 	bl	100495e0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
10048f70:	e04e      	b.n	10049010 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10048f72:	68fb      	ldr	r3, [r7, #12]
10048f74:	2140      	movs	r1, #64	@ 0x40
10048f76:	0018      	movs	r0, r3
10048f78:	f000 fe96 	bl	10049ca8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
10048f7c:	e048      	b.n	10049010 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10048f7e:	68bb      	ldr	r3, [r7, #8]
10048f80:	099b      	lsrs	r3, r3, #6
10048f82:	001a      	movs	r2, r3
10048f84:	2301      	movs	r3, #1
10048f86:	4013      	ands	r3, r2
10048f88:	d02e      	beq.n	10048fe8 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10048f8a:	687b      	ldr	r3, [r7, #4]
10048f8c:	099b      	lsrs	r3, r3, #6
10048f8e:	001a      	movs	r2, r3
10048f90:	2301      	movs	r3, #1
10048f92:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10048f94:	d028      	beq.n	10048fe8 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
10048f96:	68fb      	ldr	r3, [r7, #12]
10048f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048f9a:	b29b      	uxth	r3, r3
10048f9c:	2b00      	cmp	r3, #0
10048f9e:	d11d      	bne.n	10048fdc <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
10048fa0:	68fb      	ldr	r3, [r7, #12]
10048fa2:	681b      	ldr	r3, [r3, #0]
10048fa4:	685a      	ldr	r2, [r3, #4]
10048fa6:	2380      	movs	r3, #128	@ 0x80
10048fa8:	049b      	lsls	r3, r3, #18
10048faa:	401a      	ands	r2, r3
10048fac:	2380      	movs	r3, #128	@ 0x80
10048fae:	049b      	lsls	r3, r3, #18
10048fb0:	429a      	cmp	r2, r3
10048fb2:	d02c      	beq.n	1004900e <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
10048fb4:	68fb      	ldr	r3, [r7, #12]
10048fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10048fb8:	4a1a      	ldr	r2, [pc, #104]	@ (10049024 <I2C_Master_ISR_DMA+0x214>)
10048fba:	4293      	cmp	r3, r2
10048fbc:	d109      	bne.n	10048fd2 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
10048fbe:	68fb      	ldr	r3, [r7, #12]
10048fc0:	681b      	ldr	r3, [r3, #0]
10048fc2:	685a      	ldr	r2, [r3, #4]
10048fc4:	68fb      	ldr	r3, [r7, #12]
10048fc6:	681b      	ldr	r3, [r3, #0]
10048fc8:	2180      	movs	r1, #128	@ 0x80
10048fca:	01c9      	lsls	r1, r1, #7
10048fcc:	430a      	orrs	r2, r1
10048fce:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
10048fd0:	e01d      	b.n	1004900e <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
10048fd2:	68fb      	ldr	r3, [r7, #12]
10048fd4:	0018      	movs	r0, r3
10048fd6:	f000 fb03 	bl	100495e0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
10048fda:	e018      	b.n	1004900e <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10048fdc:	68fb      	ldr	r3, [r7, #12]
10048fde:	2140      	movs	r1, #64	@ 0x40
10048fe0:	0018      	movs	r0, r3
10048fe2:	f000 fe61 	bl	10049ca8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
10048fe6:	e012      	b.n	1004900e <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10048fe8:	68bb      	ldr	r3, [r7, #8]
10048fea:	095b      	lsrs	r3, r3, #5
10048fec:	001a      	movs	r2, r3
10048fee:	2301      	movs	r3, #1
10048ff0:	4013      	ands	r3, r2
10048ff2:	d00d      	beq.n	10049010 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10048ff4:	687b      	ldr	r3, [r7, #4]
10048ff6:	095b      	lsrs	r3, r3, #5
10048ff8:	001a      	movs	r2, r3
10048ffa:	2301      	movs	r3, #1
10048ffc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10048ffe:	d007      	beq.n	10049010 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
10049000:	68ba      	ldr	r2, [r7, #8]
10049002:	68fb      	ldr	r3, [r7, #12]
10049004:	0011      	movs	r1, r2
10049006:	0018      	movs	r0, r3
10049008:	f000 fb92 	bl	10049730 <I2C_ITMasterCplt>
1004900c:	e000      	b.n	10049010 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
1004900e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10049010:	68fb      	ldr	r3, [r7, #12]
10049012:	2240      	movs	r2, #64	@ 0x40
10049014:	2100      	movs	r1, #0
10049016:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10049018:	2300      	movs	r3, #0
}
1004901a:	0018      	movs	r0, r3
1004901c:	46bd      	mov	sp, r7
1004901e:	b007      	add	sp, #28
10049020:	bd90      	pop	{r4, r7, pc}
10049022:	46c0      	nop			@ (mov r8, r8)
10049024:	ffff0000 	.word	0xffff0000

10049028 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
10049028:	b590      	push	{r4, r7, lr}
1004902a:	b089      	sub	sp, #36	@ 0x24
1004902c:	af02      	add	r7, sp, #8
1004902e:	60f8      	str	r0, [r7, #12]
10049030:	60b9      	str	r1, [r7, #8]
10049032:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
10049034:	4b9a      	ldr	r3, [pc, #616]	@ (100492a0 <I2C_Mem_ISR_DMA+0x278>)
10049036:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
10049038:	68fb      	ldr	r3, [r7, #12]
1004903a:	2240      	movs	r2, #64	@ 0x40
1004903c:	5c9b      	ldrb	r3, [r3, r2]
1004903e:	2b01      	cmp	r3, #1
10049040:	d101      	bne.n	10049046 <I2C_Mem_ISR_DMA+0x1e>
10049042:	2302      	movs	r3, #2
10049044:	e127      	b.n	10049296 <I2C_Mem_ISR_DMA+0x26e>
10049046:	68fb      	ldr	r3, [r7, #12]
10049048:	2240      	movs	r2, #64	@ 0x40
1004904a:	2101      	movs	r1, #1
1004904c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
1004904e:	68bb      	ldr	r3, [r7, #8]
10049050:	091b      	lsrs	r3, r3, #4
10049052:	001a      	movs	r2, r3
10049054:	2301      	movs	r3, #1
10049056:	4013      	ands	r3, r2
10049058:	d019      	beq.n	1004908e <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
1004905a:	687b      	ldr	r3, [r7, #4]
1004905c:	091b      	lsrs	r3, r3, #4
1004905e:	001a      	movs	r2, r3
10049060:	2301      	movs	r3, #1
10049062:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10049064:	d013      	beq.n	1004908e <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049066:	68fb      	ldr	r3, [r7, #12]
10049068:	681b      	ldr	r3, [r3, #0]
1004906a:	2210      	movs	r2, #16
1004906c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004906e:	68fb      	ldr	r3, [r7, #12]
10049070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049072:	2204      	movs	r2, #4
10049074:	431a      	orrs	r2, r3
10049076:	68fb      	ldr	r3, [r7, #12]
10049078:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
1004907a:	68fb      	ldr	r3, [r7, #12]
1004907c:	2120      	movs	r1, #32
1004907e:	0018      	movs	r0, r3
10049080:	f000 ffb8 	bl	10049ff4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10049084:	68fb      	ldr	r3, [r7, #12]
10049086:	0018      	movs	r0, r3
10049088:	f000 ff39 	bl	10049efe <I2C_Flush_TXDR>
1004908c:	e0fe      	b.n	1004928c <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
1004908e:	68bb      	ldr	r3, [r7, #8]
10049090:	085b      	lsrs	r3, r3, #1
10049092:	001a      	movs	r2, r3
10049094:	2301      	movs	r3, #1
10049096:	4013      	ands	r3, r2
10049098:	d00f      	beq.n	100490ba <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
1004909a:	687b      	ldr	r3, [r7, #4]
1004909c:	085b      	lsrs	r3, r3, #1
1004909e:	001a      	movs	r2, r3
100490a0:	2301      	movs	r3, #1
100490a2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
100490a4:	d009      	beq.n	100490ba <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
100490a6:	68fb      	ldr	r3, [r7, #12]
100490a8:	681b      	ldr	r3, [r3, #0]
100490aa:	68fa      	ldr	r2, [r7, #12]
100490ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
100490ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
100490b0:	68fb      	ldr	r3, [r7, #12]
100490b2:	2201      	movs	r2, #1
100490b4:	4252      	negs	r2, r2
100490b6:	651a      	str	r2, [r3, #80]	@ 0x50
100490b8:	e0e8      	b.n	1004928c <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
100490ba:	68bb      	ldr	r3, [r7, #8]
100490bc:	09db      	lsrs	r3, r3, #7
100490be:	001a      	movs	r2, r3
100490c0:	2301      	movs	r3, #1
100490c2:	4013      	ands	r3, r2
100490c4:	d065      	beq.n	10049192 <I2C_Mem_ISR_DMA+0x16a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
100490c6:	687b      	ldr	r3, [r7, #4]
100490c8:	099b      	lsrs	r3, r3, #6
100490ca:	001a      	movs	r2, r3
100490cc:	2301      	movs	r3, #1
100490ce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
100490d0:	d05f      	beq.n	10049192 <I2C_Mem_ISR_DMA+0x16a>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
100490d2:	68fb      	ldr	r3, [r7, #12]
100490d4:	2101      	movs	r1, #1
100490d6:	0018      	movs	r0, r3
100490d8:	f001 f816 	bl	1004a108 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
100490dc:	68fb      	ldr	r3, [r7, #12]
100490de:	2110      	movs	r1, #16
100490e0:	0018      	movs	r0, r3
100490e2:	f000 ff87 	bl	10049ff4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
100490e6:	68fb      	ldr	r3, [r7, #12]
100490e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100490ea:	b29b      	uxth	r3, r3
100490ec:	2b00      	cmp	r3, #0
100490ee:	d04a      	beq.n	10049186 <I2C_Mem_ISR_DMA+0x15e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
100490f0:	68fb      	ldr	r3, [r7, #12]
100490f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100490f4:	b29b      	uxth	r3, r3
100490f6:	2bff      	cmp	r3, #255	@ 0xff
100490f8:	d910      	bls.n	1004911c <I2C_Mem_ISR_DMA+0xf4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
100490fa:	68fb      	ldr	r3, [r7, #12]
100490fc:	22ff      	movs	r2, #255	@ 0xff
100490fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10049100:	68fb      	ldr	r3, [r7, #12]
10049102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10049104:	b299      	uxth	r1, r3
10049106:	68fb      	ldr	r3, [r7, #12]
10049108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004910a:	b2da      	uxtb	r2, r3
1004910c:	2380      	movs	r3, #128	@ 0x80
1004910e:	045b      	lsls	r3, r3, #17
10049110:	68f8      	ldr	r0, [r7, #12]
10049112:	2400      	movs	r4, #0
10049114:	9400      	str	r4, [sp, #0]
10049116:	f000 ff33 	bl	10049f80 <I2C_TransferConfig>
1004911a:	e011      	b.n	10049140 <I2C_Mem_ISR_DMA+0x118>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
1004911c:	68fb      	ldr	r3, [r7, #12]
1004911e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049120:	b29a      	uxth	r2, r3
10049122:	68fb      	ldr	r3, [r7, #12]
10049124:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10049126:	68fb      	ldr	r3, [r7, #12]
10049128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004912a:	b299      	uxth	r1, r3
1004912c:	68fb      	ldr	r3, [r7, #12]
1004912e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049130:	b2da      	uxtb	r2, r3
10049132:	2380      	movs	r3, #128	@ 0x80
10049134:	049b      	lsls	r3, r3, #18
10049136:	68f8      	ldr	r0, [r7, #12]
10049138:	2400      	movs	r4, #0
1004913a:	9400      	str	r4, [sp, #0]
1004913c:	f000 ff20 	bl	10049f80 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
10049140:	68fb      	ldr	r3, [r7, #12]
10049142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049144:	b29a      	uxth	r2, r3
10049146:	68fb      	ldr	r3, [r7, #12]
10049148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004914a:	1ad3      	subs	r3, r2, r3
1004914c:	b29a      	uxth	r2, r3
1004914e:	68fb      	ldr	r3, [r7, #12]
10049150:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10049152:	68fb      	ldr	r3, [r7, #12]
10049154:	2241      	movs	r2, #65	@ 0x41
10049156:	5c9b      	ldrb	r3, [r3, r2]
10049158:	b2db      	uxtb	r3, r3
1004915a:	2b22      	cmp	r3, #34	@ 0x22
1004915c:	d109      	bne.n	10049172 <I2C_Mem_ISR_DMA+0x14a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
1004915e:	68fb      	ldr	r3, [r7, #12]
10049160:	681b      	ldr	r3, [r3, #0]
10049162:	681a      	ldr	r2, [r3, #0]
10049164:	68fb      	ldr	r3, [r7, #12]
10049166:	681b      	ldr	r3, [r3, #0]
10049168:	2180      	movs	r1, #128	@ 0x80
1004916a:	0209      	lsls	r1, r1, #8
1004916c:	430a      	orrs	r2, r1
1004916e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10049170:	e08c      	b.n	1004928c <I2C_Mem_ISR_DMA+0x264>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
10049172:	68fb      	ldr	r3, [r7, #12]
10049174:	681b      	ldr	r3, [r3, #0]
10049176:	681a      	ldr	r2, [r3, #0]
10049178:	68fb      	ldr	r3, [r7, #12]
1004917a:	681b      	ldr	r3, [r3, #0]
1004917c:	2180      	movs	r1, #128	@ 0x80
1004917e:	01c9      	lsls	r1, r1, #7
10049180:	430a      	orrs	r2, r1
10049182:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10049184:	e082      	b.n	1004928c <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10049186:	68fb      	ldr	r3, [r7, #12]
10049188:	2140      	movs	r1, #64	@ 0x40
1004918a:	0018      	movs	r0, r3
1004918c:	f000 fd8c 	bl	10049ca8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
10049190:	e07c      	b.n	1004928c <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10049192:	68bb      	ldr	r3, [r7, #8]
10049194:	099b      	lsrs	r3, r3, #6
10049196:	001a      	movs	r2, r3
10049198:	2301      	movs	r3, #1
1004919a:	4013      	ands	r3, r2
1004919c:	d064      	beq.n	10049268 <I2C_Mem_ISR_DMA+0x240>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
1004919e:	687b      	ldr	r3, [r7, #4]
100491a0:	099b      	lsrs	r3, r3, #6
100491a2:	001a      	movs	r2, r3
100491a4:	2301      	movs	r3, #1
100491a6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
100491a8:	d05e      	beq.n	10049268 <I2C_Mem_ISR_DMA+0x240>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
100491aa:	68fb      	ldr	r3, [r7, #12]
100491ac:	2101      	movs	r1, #1
100491ae:	0018      	movs	r0, r3
100491b0:	f000 ffaa 	bl	1004a108 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
100491b4:	68fb      	ldr	r3, [r7, #12]
100491b6:	2110      	movs	r1, #16
100491b8:	0018      	movs	r0, r3
100491ba:	f000 ff1b 	bl	10049ff4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
100491be:	68fb      	ldr	r3, [r7, #12]
100491c0:	2241      	movs	r2, #65	@ 0x41
100491c2:	5c9b      	ldrb	r3, [r3, r2]
100491c4:	b2db      	uxtb	r3, r3
100491c6:	2b22      	cmp	r3, #34	@ 0x22
100491c8:	d101      	bne.n	100491ce <I2C_Mem_ISR_DMA+0x1a6>
    {
      direction = I2C_GENERATE_START_READ;
100491ca:	4b36      	ldr	r3, [pc, #216]	@ (100492a4 <I2C_Mem_ISR_DMA+0x27c>)
100491cc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
100491ce:	68fb      	ldr	r3, [r7, #12]
100491d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100491d2:	b29b      	uxth	r3, r3
100491d4:	2bff      	cmp	r3, #255	@ 0xff
100491d6:	d911      	bls.n	100491fc <I2C_Mem_ISR_DMA+0x1d4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
100491d8:	68fb      	ldr	r3, [r7, #12]
100491da:	22ff      	movs	r2, #255	@ 0xff
100491dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
100491de:	68fb      	ldr	r3, [r7, #12]
100491e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100491e2:	b299      	uxth	r1, r3
100491e4:	68fb      	ldr	r3, [r7, #12]
100491e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100491e8:	b2da      	uxtb	r2, r3
100491ea:	2380      	movs	r3, #128	@ 0x80
100491ec:	045c      	lsls	r4, r3, #17
100491ee:	68f8      	ldr	r0, [r7, #12]
100491f0:	697b      	ldr	r3, [r7, #20]
100491f2:	9300      	str	r3, [sp, #0]
100491f4:	0023      	movs	r3, r4
100491f6:	f000 fec3 	bl	10049f80 <I2C_TransferConfig>
100491fa:	e012      	b.n	10049222 <I2C_Mem_ISR_DMA+0x1fa>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
100491fc:	68fb      	ldr	r3, [r7, #12]
100491fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049200:	b29a      	uxth	r2, r3
10049202:	68fb      	ldr	r3, [r7, #12]
10049204:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10049206:	68fb      	ldr	r3, [r7, #12]
10049208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004920a:	b299      	uxth	r1, r3
1004920c:	68fb      	ldr	r3, [r7, #12]
1004920e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049210:	b2da      	uxtb	r2, r3
10049212:	2380      	movs	r3, #128	@ 0x80
10049214:	049c      	lsls	r4, r3, #18
10049216:	68f8      	ldr	r0, [r7, #12]
10049218:	697b      	ldr	r3, [r7, #20]
1004921a:	9300      	str	r3, [sp, #0]
1004921c:	0023      	movs	r3, r4
1004921e:	f000 feaf 	bl	10049f80 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
10049222:	68fb      	ldr	r3, [r7, #12]
10049224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049226:	b29a      	uxth	r2, r3
10049228:	68fb      	ldr	r3, [r7, #12]
1004922a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004922c:	1ad3      	subs	r3, r2, r3
1004922e:	b29a      	uxth	r2, r3
10049230:	68fb      	ldr	r3, [r7, #12]
10049232:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10049234:	68fb      	ldr	r3, [r7, #12]
10049236:	2241      	movs	r2, #65	@ 0x41
10049238:	5c9b      	ldrb	r3, [r3, r2]
1004923a:	b2db      	uxtb	r3, r3
1004923c:	2b22      	cmp	r3, #34	@ 0x22
1004923e:	d109      	bne.n	10049254 <I2C_Mem_ISR_DMA+0x22c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
10049240:	68fb      	ldr	r3, [r7, #12]
10049242:	681b      	ldr	r3, [r3, #0]
10049244:	681a      	ldr	r2, [r3, #0]
10049246:	68fb      	ldr	r3, [r7, #12]
10049248:	681b      	ldr	r3, [r3, #0]
1004924a:	2180      	movs	r1, #128	@ 0x80
1004924c:	0209      	lsls	r1, r1, #8
1004924e:	430a      	orrs	r2, r1
10049250:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10049252:	e01b      	b.n	1004928c <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
10049254:	68fb      	ldr	r3, [r7, #12]
10049256:	681b      	ldr	r3, [r3, #0]
10049258:	681a      	ldr	r2, [r3, #0]
1004925a:	68fb      	ldr	r3, [r7, #12]
1004925c:	681b      	ldr	r3, [r3, #0]
1004925e:	2180      	movs	r1, #128	@ 0x80
10049260:	01c9      	lsls	r1, r1, #7
10049262:	430a      	orrs	r2, r1
10049264:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10049266:	e011      	b.n	1004928c <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10049268:	68bb      	ldr	r3, [r7, #8]
1004926a:	095b      	lsrs	r3, r3, #5
1004926c:	001a      	movs	r2, r3
1004926e:	2301      	movs	r3, #1
10049270:	4013      	ands	r3, r2
10049272:	d00b      	beq.n	1004928c <I2C_Mem_ISR_DMA+0x264>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10049274:	687b      	ldr	r3, [r7, #4]
10049276:	095b      	lsrs	r3, r3, #5
10049278:	001a      	movs	r2, r3
1004927a:	2301      	movs	r3, #1
1004927c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
1004927e:	d005      	beq.n	1004928c <I2C_Mem_ISR_DMA+0x264>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
10049280:	68ba      	ldr	r2, [r7, #8]
10049282:	68fb      	ldr	r3, [r7, #12]
10049284:	0011      	movs	r1, r2
10049286:	0018      	movs	r0, r3
10049288:	f000 fa52 	bl	10049730 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
1004928c:	68fb      	ldr	r3, [r7, #12]
1004928e:	2240      	movs	r2, #64	@ 0x40
10049290:	2100      	movs	r1, #0
10049292:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10049294:	2300      	movs	r3, #0
}
10049296:	0018      	movs	r0, r3
10049298:	46bd      	mov	sp, r7
1004929a:	b007      	add	sp, #28
1004929c:	bd90      	pop	{r4, r7, pc}
1004929e:	46c0      	nop			@ (mov r8, r8)
100492a0:	80002000 	.word	0x80002000
100492a4:	80002400 	.word	0x80002400

100492a8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
100492a8:	b580      	push	{r7, lr}
100492aa:	b088      	sub	sp, #32
100492ac:	af00      	add	r7, sp, #0
100492ae:	60f8      	str	r0, [r7, #12]
100492b0:	60b9      	str	r1, [r7, #8]
100492b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
100492b4:	68fb      	ldr	r3, [r7, #12]
100492b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100492b8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
100492ba:	2300      	movs	r3, #0
100492bc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
100492be:	68fb      	ldr	r3, [r7, #12]
100492c0:	2240      	movs	r2, #64	@ 0x40
100492c2:	5c9b      	ldrb	r3, [r3, r2]
100492c4:	2b01      	cmp	r3, #1
100492c6:	d101      	bne.n	100492cc <I2C_Slave_ISR_DMA+0x24>
100492c8:	2302      	movs	r3, #2
100492ca:	e0de      	b.n	1004948a <I2C_Slave_ISR_DMA+0x1e2>
100492cc:	68fb      	ldr	r3, [r7, #12]
100492ce:	2240      	movs	r2, #64	@ 0x40
100492d0:	2101      	movs	r1, #1
100492d2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
100492d4:	68bb      	ldr	r3, [r7, #8]
100492d6:	095b      	lsrs	r3, r3, #5
100492d8:	001a      	movs	r2, r3
100492da:	2301      	movs	r3, #1
100492dc:	4013      	ands	r3, r2
100492de:	d00c      	beq.n	100492fa <I2C_Slave_ISR_DMA+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
100492e0:	687b      	ldr	r3, [r7, #4]
100492e2:	095b      	lsrs	r3, r3, #5
100492e4:	001a      	movs	r2, r3
100492e6:	2301      	movs	r3, #1
100492e8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
100492ea:	d006      	beq.n	100492fa <I2C_Slave_ISR_DMA+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
100492ec:	68ba      	ldr	r2, [r7, #8]
100492ee:	68fb      	ldr	r3, [r7, #12]
100492f0:	0011      	movs	r1, r2
100492f2:	0018      	movs	r0, r3
100492f4:	f000 faee 	bl	100498d4 <I2C_ITSlaveCplt>
100492f8:	e0c2      	b.n	10049480 <I2C_Slave_ISR_DMA+0x1d8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
100492fa:	68bb      	ldr	r3, [r7, #8]
100492fc:	091b      	lsrs	r3, r3, #4
100492fe:	001a      	movs	r2, r3
10049300:	2301      	movs	r3, #1
10049302:	4013      	ands	r3, r2
10049304:	d100      	bne.n	10049308 <I2C_Slave_ISR_DMA+0x60>
10049306:	e0a9      	b.n	1004945c <I2C_Slave_ISR_DMA+0x1b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10049308:	687b      	ldr	r3, [r7, #4]
1004930a:	091b      	lsrs	r3, r3, #4
1004930c:	001a      	movs	r2, r3
1004930e:	2301      	movs	r3, #1
10049310:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10049312:	d100      	bne.n	10049316 <I2C_Slave_ISR_DMA+0x6e>
10049314:	e0a2      	b.n	1004945c <I2C_Slave_ISR_DMA+0x1b4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
10049316:	687b      	ldr	r3, [r7, #4]
10049318:	0b9b      	lsrs	r3, r3, #14
1004931a:	001a      	movs	r2, r3
1004931c:	2301      	movs	r3, #1
1004931e:	4013      	ands	r3, r2
10049320:	d106      	bne.n	10049330 <I2C_Slave_ISR_DMA+0x88>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
10049322:	687b      	ldr	r3, [r7, #4]
10049324:	0bdb      	lsrs	r3, r3, #15
10049326:	001a      	movs	r2, r3
10049328:	2301      	movs	r3, #1
1004932a:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
1004932c:	d100      	bne.n	10049330 <I2C_Slave_ISR_DMA+0x88>
1004932e:	e08e      	b.n	1004944e <I2C_Slave_ISR_DMA+0x1a6>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
10049330:	68fb      	ldr	r3, [r7, #12]
10049332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10049334:	2b00      	cmp	r3, #0
10049336:	d00d      	beq.n	10049354 <I2C_Slave_ISR_DMA+0xac>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
10049338:	687b      	ldr	r3, [r7, #4]
1004933a:	0bdb      	lsrs	r3, r3, #15
1004933c:	001a      	movs	r2, r3
1004933e:	2301      	movs	r3, #1
10049340:	4013      	ands	r3, r2
10049342:	d007      	beq.n	10049354 <I2C_Slave_ISR_DMA+0xac>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
10049344:	68fb      	ldr	r3, [r7, #12]
10049346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10049348:	681b      	ldr	r3, [r3, #0]
1004934a:	685b      	ldr	r3, [r3, #4]
1004934c:	2b00      	cmp	r3, #0
1004934e:	d101      	bne.n	10049354 <I2C_Slave_ISR_DMA+0xac>
          {
            treatdmanack = 1U;
10049350:	2301      	movs	r3, #1
10049352:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
10049354:	68fb      	ldr	r3, [r7, #12]
10049356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049358:	2b00      	cmp	r3, #0
1004935a:	d00d      	beq.n	10049378 <I2C_Slave_ISR_DMA+0xd0>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
1004935c:	687b      	ldr	r3, [r7, #4]
1004935e:	0b9b      	lsrs	r3, r3, #14
10049360:	001a      	movs	r2, r3
10049362:	2301      	movs	r3, #1
10049364:	4013      	ands	r3, r2
10049366:	d007      	beq.n	10049378 <I2C_Slave_ISR_DMA+0xd0>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
10049368:	68fb      	ldr	r3, [r7, #12]
1004936a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004936c:	681b      	ldr	r3, [r3, #0]
1004936e:	685b      	ldr	r3, [r3, #4]
10049370:	2b00      	cmp	r3, #0
10049372:	d101      	bne.n	10049378 <I2C_Slave_ISR_DMA+0xd0>
          {
            treatdmanack = 1U;
10049374:	2301      	movs	r3, #1
10049376:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
10049378:	69fb      	ldr	r3, [r7, #28]
1004937a:	2b01      	cmp	r3, #1
1004937c:	d12d      	bne.n	100493da <I2C_Slave_ISR_DMA+0x132>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
1004937e:	68fb      	ldr	r3, [r7, #12]
10049380:	2241      	movs	r2, #65	@ 0x41
10049382:	5c9b      	ldrb	r3, [r3, r2]
10049384:	b2db      	uxtb	r3, r3
10049386:	2b28      	cmp	r3, #40	@ 0x28
10049388:	d10b      	bne.n	100493a2 <I2C_Slave_ISR_DMA+0xfa>
1004938a:	69ba      	ldr	r2, [r7, #24]
1004938c:	2380      	movs	r3, #128	@ 0x80
1004938e:	049b      	lsls	r3, r3, #18
10049390:	429a      	cmp	r2, r3
10049392:	d106      	bne.n	100493a2 <I2C_Slave_ISR_DMA+0xfa>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
10049394:	68ba      	ldr	r2, [r7, #8]
10049396:	68fb      	ldr	r3, [r7, #12]
10049398:	0011      	movs	r1, r2
1004939a:	0018      	movs	r0, r3
1004939c:	f000 fc2a 	bl	10049bf4 <I2C_ITListenCplt>
100493a0:	e054      	b.n	1004944c <I2C_Slave_ISR_DMA+0x1a4>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
100493a2:	68fb      	ldr	r3, [r7, #12]
100493a4:	2241      	movs	r2, #65	@ 0x41
100493a6:	5c9b      	ldrb	r3, [r3, r2]
100493a8:	b2db      	uxtb	r3, r3
100493aa:	2b29      	cmp	r3, #41	@ 0x29
100493ac:	d110      	bne.n	100493d0 <I2C_Slave_ISR_DMA+0x128>
100493ae:	69bb      	ldr	r3, [r7, #24]
100493b0:	4a38      	ldr	r2, [pc, #224]	@ (10049494 <I2C_Slave_ISR_DMA+0x1ec>)
100493b2:	4293      	cmp	r3, r2
100493b4:	d00c      	beq.n	100493d0 <I2C_Slave_ISR_DMA+0x128>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100493b6:	68fb      	ldr	r3, [r7, #12]
100493b8:	681b      	ldr	r3, [r3, #0]
100493ba:	2210      	movs	r2, #16
100493bc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
100493be:	68fb      	ldr	r3, [r7, #12]
100493c0:	0018      	movs	r0, r3
100493c2:	f000 fd9c 	bl	10049efe <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
100493c6:	68fb      	ldr	r3, [r7, #12]
100493c8:	0018      	movs	r0, r3
100493ca:	f000 f94b 	bl	10049664 <I2C_ITSlaveSeqCplt>
100493ce:	e03d      	b.n	1004944c <I2C_Slave_ISR_DMA+0x1a4>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100493d0:	68fb      	ldr	r3, [r7, #12]
100493d2:	681b      	ldr	r3, [r3, #0]
100493d4:	2210      	movs	r2, #16
100493d6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
100493d8:	e03e      	b.n	10049458 <I2C_Slave_ISR_DMA+0x1b0>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100493da:	68fb      	ldr	r3, [r7, #12]
100493dc:	681b      	ldr	r3, [r3, #0]
100493de:	2210      	movs	r2, #16
100493e0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
100493e2:	68fb      	ldr	r3, [r7, #12]
100493e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100493e6:	2204      	movs	r2, #4
100493e8:	431a      	orrs	r2, r3
100493ea:	68fb      	ldr	r3, [r7, #12]
100493ec:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
100493ee:	2317      	movs	r3, #23
100493f0:	18fb      	adds	r3, r7, r3
100493f2:	68fa      	ldr	r2, [r7, #12]
100493f4:	2141      	movs	r1, #65	@ 0x41
100493f6:	5c52      	ldrb	r2, [r2, r1]
100493f8:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
100493fa:	69bb      	ldr	r3, [r7, #24]
100493fc:	2b00      	cmp	r3, #0
100493fe:	d004      	beq.n	1004940a <I2C_Slave_ISR_DMA+0x162>
10049400:	69ba      	ldr	r2, [r7, #24]
10049402:	2380      	movs	r3, #128	@ 0x80
10049404:	045b      	lsls	r3, r3, #17
10049406:	429a      	cmp	r2, r3
10049408:	d126      	bne.n	10049458 <I2C_Slave_ISR_DMA+0x1b0>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
1004940a:	2217      	movs	r2, #23
1004940c:	18bb      	adds	r3, r7, r2
1004940e:	781b      	ldrb	r3, [r3, #0]
10049410:	2b21      	cmp	r3, #33	@ 0x21
10049412:	d003      	beq.n	1004941c <I2C_Slave_ISR_DMA+0x174>
10049414:	18bb      	adds	r3, r7, r2
10049416:	781b      	ldrb	r3, [r3, #0]
10049418:	2b29      	cmp	r3, #41	@ 0x29
1004941a:	d103      	bne.n	10049424 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
1004941c:	68fb      	ldr	r3, [r7, #12]
1004941e:	2221      	movs	r2, #33	@ 0x21
10049420:	631a      	str	r2, [r3, #48]	@ 0x30
10049422:	e00b      	b.n	1004943c <I2C_Slave_ISR_DMA+0x194>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
10049424:	2217      	movs	r2, #23
10049426:	18bb      	adds	r3, r7, r2
10049428:	781b      	ldrb	r3, [r3, #0]
1004942a:	2b22      	cmp	r3, #34	@ 0x22
1004942c:	d003      	beq.n	10049436 <I2C_Slave_ISR_DMA+0x18e>
1004942e:	18bb      	adds	r3, r7, r2
10049430:	781b      	ldrb	r3, [r3, #0]
10049432:	2b2a      	cmp	r3, #42	@ 0x2a
10049434:	d102      	bne.n	1004943c <I2C_Slave_ISR_DMA+0x194>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
10049436:	68fb      	ldr	r3, [r7, #12]
10049438:	2222      	movs	r2, #34	@ 0x22
1004943a:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
1004943c:	68fb      	ldr	r3, [r7, #12]
1004943e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10049440:	68fb      	ldr	r3, [r7, #12]
10049442:	0011      	movs	r1, r2
10049444:	0018      	movs	r0, r3
10049446:	f000 fc2f 	bl	10049ca8 <I2C_ITError>
      if (treatdmanack == 1U)
1004944a:	e005      	b.n	10049458 <I2C_Slave_ISR_DMA+0x1b0>
1004944c:	e004      	b.n	10049458 <I2C_Slave_ISR_DMA+0x1b0>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004944e:	68fb      	ldr	r3, [r7, #12]
10049450:	681b      	ldr	r3, [r3, #0]
10049452:	2210      	movs	r2, #16
10049454:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
10049456:	e013      	b.n	10049480 <I2C_Slave_ISR_DMA+0x1d8>
      if (treatdmanack == 1U)
10049458:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
1004945a:	e011      	b.n	10049480 <I2C_Slave_ISR_DMA+0x1d8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
1004945c:	68bb      	ldr	r3, [r7, #8]
1004945e:	08db      	lsrs	r3, r3, #3
10049460:	001a      	movs	r2, r3
10049462:	2301      	movs	r3, #1
10049464:	4013      	ands	r3, r2
10049466:	d00b      	beq.n	10049480 <I2C_Slave_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
10049468:	687b      	ldr	r3, [r7, #4]
1004946a:	08db      	lsrs	r3, r3, #3
1004946c:	001a      	movs	r2, r3
1004946e:	2301      	movs	r3, #1
10049470:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
10049472:	d005      	beq.n	10049480 <I2C_Slave_ISR_DMA+0x1d8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
10049474:	68ba      	ldr	r2, [r7, #8]
10049476:	68fb      	ldr	r3, [r7, #12]
10049478:	0011      	movs	r1, r2
1004947a:	0018      	movs	r0, r3
1004947c:	f000 f80c 	bl	10049498 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10049480:	68fb      	ldr	r3, [r7, #12]
10049482:	2240      	movs	r2, #64	@ 0x40
10049484:	2100      	movs	r1, #0
10049486:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10049488:	2300      	movs	r3, #0
}
1004948a:	0018      	movs	r0, r3
1004948c:	46bd      	mov	sp, r7
1004948e:	b008      	add	sp, #32
10049490:	bd80      	pop	{r7, pc}
10049492:	46c0      	nop			@ (mov r8, r8)
10049494:	ffff0000 	.word	0xffff0000

10049498 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10049498:	b5b0      	push	{r4, r5, r7, lr}
1004949a:	b084      	sub	sp, #16
1004949c:	af00      	add	r7, sp, #0
1004949e:	6078      	str	r0, [r7, #4]
100494a0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
100494a2:	687b      	ldr	r3, [r7, #4]
100494a4:	2241      	movs	r2, #65	@ 0x41
100494a6:	5c9b      	ldrb	r3, [r3, r2]
100494a8:	b2db      	uxtb	r3, r3
100494aa:	001a      	movs	r2, r3
100494ac:	2328      	movs	r3, #40	@ 0x28
100494ae:	4013      	ands	r3, r2
100494b0:	2b28      	cmp	r3, #40	@ 0x28
100494b2:	d000      	beq.n	100494b6 <I2C_ITAddrCplt+0x1e>
100494b4:	e088      	b.n	100495c8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
100494b6:	687b      	ldr	r3, [r7, #4]
100494b8:	681b      	ldr	r3, [r3, #0]
100494ba:	699b      	ldr	r3, [r3, #24]
100494bc:	0c1b      	lsrs	r3, r3, #16
100494be:	b2da      	uxtb	r2, r3
100494c0:	250f      	movs	r5, #15
100494c2:	197b      	adds	r3, r7, r5
100494c4:	2101      	movs	r1, #1
100494c6:	400a      	ands	r2, r1
100494c8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
100494ca:	687b      	ldr	r3, [r7, #4]
100494cc:	681b      	ldr	r3, [r3, #0]
100494ce:	699b      	ldr	r3, [r3, #24]
100494d0:	0c1b      	lsrs	r3, r3, #16
100494d2:	b29a      	uxth	r2, r3
100494d4:	200c      	movs	r0, #12
100494d6:	183b      	adds	r3, r7, r0
100494d8:	21fe      	movs	r1, #254	@ 0xfe
100494da:	400a      	ands	r2, r1
100494dc:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
100494de:	687b      	ldr	r3, [r7, #4]
100494e0:	681b      	ldr	r3, [r3, #0]
100494e2:	689b      	ldr	r3, [r3, #8]
100494e4:	b29a      	uxth	r2, r3
100494e6:	240a      	movs	r4, #10
100494e8:	193b      	adds	r3, r7, r4
100494ea:	0592      	lsls	r2, r2, #22
100494ec:	0d92      	lsrs	r2, r2, #22
100494ee:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
100494f0:	687b      	ldr	r3, [r7, #4]
100494f2:	681b      	ldr	r3, [r3, #0]
100494f4:	68db      	ldr	r3, [r3, #12]
100494f6:	b29a      	uxth	r2, r3
100494f8:	2308      	movs	r3, #8
100494fa:	18fb      	adds	r3, r7, r3
100494fc:	21fe      	movs	r1, #254	@ 0xfe
100494fe:	400a      	ands	r2, r1
10049500:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
10049502:	687b      	ldr	r3, [r7, #4]
10049504:	68db      	ldr	r3, [r3, #12]
10049506:	2b02      	cmp	r3, #2
10049508:	d148      	bne.n	1004959c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
1004950a:	0021      	movs	r1, r4
1004950c:	187b      	adds	r3, r7, r1
1004950e:	881b      	ldrh	r3, [r3, #0]
10049510:	09db      	lsrs	r3, r3, #7
10049512:	b29a      	uxth	r2, r3
10049514:	183b      	adds	r3, r7, r0
10049516:	881b      	ldrh	r3, [r3, #0]
10049518:	4053      	eors	r3, r2
1004951a:	b29b      	uxth	r3, r3
1004951c:	001a      	movs	r2, r3
1004951e:	2306      	movs	r3, #6
10049520:	4013      	ands	r3, r2
10049522:	d120      	bne.n	10049566 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
10049524:	183b      	adds	r3, r7, r0
10049526:	187a      	adds	r2, r7, r1
10049528:	8812      	ldrh	r2, [r2, #0]
1004952a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
1004952c:	687b      	ldr	r3, [r7, #4]
1004952e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10049530:	1c5a      	adds	r2, r3, #1
10049532:	687b      	ldr	r3, [r7, #4]
10049534:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
10049536:	687b      	ldr	r3, [r7, #4]
10049538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004953a:	2b02      	cmp	r3, #2
1004953c:	d14c      	bne.n	100495d8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
1004953e:	687b      	ldr	r3, [r7, #4]
10049540:	2200      	movs	r2, #0
10049542:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
10049544:	687b      	ldr	r3, [r7, #4]
10049546:	681b      	ldr	r3, [r3, #0]
10049548:	2208      	movs	r2, #8
1004954a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
1004954c:	687b      	ldr	r3, [r7, #4]
1004954e:	2240      	movs	r2, #64	@ 0x40
10049550:	2100      	movs	r1, #0
10049552:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10049554:	183b      	adds	r3, r7, r0
10049556:	881a      	ldrh	r2, [r3, #0]
10049558:	197b      	adds	r3, r7, r5
1004955a:	7819      	ldrb	r1, [r3, #0]
1004955c:	687b      	ldr	r3, [r7, #4]
1004955e:	0018      	movs	r0, r3
10049560:	f7ff f9e8 	bl	10048934 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
10049564:	e038      	b.n	100495d8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
10049566:	240c      	movs	r4, #12
10049568:	193b      	adds	r3, r7, r4
1004956a:	2208      	movs	r2, #8
1004956c:	18ba      	adds	r2, r7, r2
1004956e:	8812      	ldrh	r2, [r2, #0]
10049570:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
10049572:	2380      	movs	r3, #128	@ 0x80
10049574:	021a      	lsls	r2, r3, #8
10049576:	687b      	ldr	r3, [r7, #4]
10049578:	0011      	movs	r1, r2
1004957a:	0018      	movs	r0, r3
1004957c:	f000 fdc4 	bl	1004a108 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
10049580:	687b      	ldr	r3, [r7, #4]
10049582:	2240      	movs	r2, #64	@ 0x40
10049584:	2100      	movs	r1, #0
10049586:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10049588:	193b      	adds	r3, r7, r4
1004958a:	881a      	ldrh	r2, [r3, #0]
1004958c:	230f      	movs	r3, #15
1004958e:	18fb      	adds	r3, r7, r3
10049590:	7819      	ldrb	r1, [r3, #0]
10049592:	687b      	ldr	r3, [r7, #4]
10049594:	0018      	movs	r0, r3
10049596:	f7ff f9cd 	bl	10048934 <HAL_I2C_AddrCallback>
}
1004959a:	e01d      	b.n	100495d8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
1004959c:	2380      	movs	r3, #128	@ 0x80
1004959e:	021a      	lsls	r2, r3, #8
100495a0:	687b      	ldr	r3, [r7, #4]
100495a2:	0011      	movs	r1, r2
100495a4:	0018      	movs	r0, r3
100495a6:	f000 fdaf 	bl	1004a108 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
100495aa:	687b      	ldr	r3, [r7, #4]
100495ac:	2240      	movs	r2, #64	@ 0x40
100495ae:	2100      	movs	r1, #0
100495b0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
100495b2:	230c      	movs	r3, #12
100495b4:	18fb      	adds	r3, r7, r3
100495b6:	881a      	ldrh	r2, [r3, #0]
100495b8:	230f      	movs	r3, #15
100495ba:	18fb      	adds	r3, r7, r3
100495bc:	7819      	ldrb	r1, [r3, #0]
100495be:	687b      	ldr	r3, [r7, #4]
100495c0:	0018      	movs	r0, r3
100495c2:	f7ff f9b7 	bl	10048934 <HAL_I2C_AddrCallback>
}
100495c6:	e007      	b.n	100495d8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
100495c8:	687b      	ldr	r3, [r7, #4]
100495ca:	681b      	ldr	r3, [r3, #0]
100495cc:	2208      	movs	r2, #8
100495ce:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
100495d0:	687b      	ldr	r3, [r7, #4]
100495d2:	2240      	movs	r2, #64	@ 0x40
100495d4:	2100      	movs	r1, #0
100495d6:	5499      	strb	r1, [r3, r2]
}
100495d8:	46c0      	nop			@ (mov r8, r8)
100495da:	46bd      	mov	sp, r7
100495dc:	b004      	add	sp, #16
100495de:	bdb0      	pop	{r4, r5, r7, pc}

100495e0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
100495e0:	b580      	push	{r7, lr}
100495e2:	b082      	sub	sp, #8
100495e4:	af00      	add	r7, sp, #0
100495e6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
100495e8:	687b      	ldr	r3, [r7, #4]
100495ea:	2242      	movs	r2, #66	@ 0x42
100495ec:	2100      	movs	r1, #0
100495ee:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
100495f0:	687b      	ldr	r3, [r7, #4]
100495f2:	2241      	movs	r2, #65	@ 0x41
100495f4:	5c9b      	ldrb	r3, [r3, r2]
100495f6:	b2db      	uxtb	r3, r3
100495f8:	2b21      	cmp	r3, #33	@ 0x21
100495fa:	d117      	bne.n	1004962c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
100495fc:	687b      	ldr	r3, [r7, #4]
100495fe:	2241      	movs	r2, #65	@ 0x41
10049600:	2120      	movs	r1, #32
10049602:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
10049604:	687b      	ldr	r3, [r7, #4]
10049606:	2211      	movs	r2, #17
10049608:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
1004960a:	687b      	ldr	r3, [r7, #4]
1004960c:	2200      	movs	r2, #0
1004960e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10049610:	687b      	ldr	r3, [r7, #4]
10049612:	2101      	movs	r1, #1
10049614:	0018      	movs	r0, r3
10049616:	f000 fd77 	bl	1004a108 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1004961a:	687b      	ldr	r3, [r7, #4]
1004961c:	2240      	movs	r2, #64	@ 0x40
1004961e:	2100      	movs	r1, #0
10049620:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
10049622:	687b      	ldr	r3, [r7, #4]
10049624:	0018      	movs	r0, r3
10049626:	f7ff f965 	bl	100488f4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
1004962a:	e016      	b.n	1004965a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
1004962c:	687b      	ldr	r3, [r7, #4]
1004962e:	2241      	movs	r2, #65	@ 0x41
10049630:	2120      	movs	r1, #32
10049632:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
10049634:	687b      	ldr	r3, [r7, #4]
10049636:	2212      	movs	r2, #18
10049638:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
1004963a:	687b      	ldr	r3, [r7, #4]
1004963c:	2200      	movs	r2, #0
1004963e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
10049640:	687b      	ldr	r3, [r7, #4]
10049642:	2102      	movs	r1, #2
10049644:	0018      	movs	r0, r3
10049646:	f000 fd5f 	bl	1004a108 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
1004964a:	687b      	ldr	r3, [r7, #4]
1004964c:	2240      	movs	r2, #64	@ 0x40
1004964e:	2100      	movs	r1, #0
10049650:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
10049652:	687b      	ldr	r3, [r7, #4]
10049654:	0018      	movs	r0, r3
10049656:	f7ff f955 	bl	10048904 <HAL_I2C_MasterRxCpltCallback>
}
1004965a:	46c0      	nop			@ (mov r8, r8)
1004965c:	46bd      	mov	sp, r7
1004965e:	b002      	add	sp, #8
10049660:	bd80      	pop	{r7, pc}
	...

10049664 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
10049664:	b580      	push	{r7, lr}
10049666:	b084      	sub	sp, #16
10049668:	af00      	add	r7, sp, #0
1004966a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
1004966c:	687b      	ldr	r3, [r7, #4]
1004966e:	681b      	ldr	r3, [r3, #0]
10049670:	681b      	ldr	r3, [r3, #0]
10049672:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
10049674:	687b      	ldr	r3, [r7, #4]
10049676:	2242      	movs	r2, #66	@ 0x42
10049678:	2100      	movs	r1, #0
1004967a:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
1004967c:	68fb      	ldr	r3, [r7, #12]
1004967e:	0b9b      	lsrs	r3, r3, #14
10049680:	001a      	movs	r2, r3
10049682:	2301      	movs	r3, #1
10049684:	4013      	ands	r3, r2
10049686:	d008      	beq.n	1004969a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10049688:	687b      	ldr	r3, [r7, #4]
1004968a:	681b      	ldr	r3, [r3, #0]
1004968c:	681a      	ldr	r2, [r3, #0]
1004968e:	687b      	ldr	r3, [r7, #4]
10049690:	681b      	ldr	r3, [r3, #0]
10049692:	4925      	ldr	r1, [pc, #148]	@ (10049728 <I2C_ITSlaveSeqCplt+0xc4>)
10049694:	400a      	ands	r2, r1
10049696:	601a      	str	r2, [r3, #0]
10049698:	e00d      	b.n	100496b6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
1004969a:	68fb      	ldr	r3, [r7, #12]
1004969c:	0bdb      	lsrs	r3, r3, #15
1004969e:	001a      	movs	r2, r3
100496a0:	2301      	movs	r3, #1
100496a2:	4013      	ands	r3, r2
100496a4:	d007      	beq.n	100496b6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
100496a6:	687b      	ldr	r3, [r7, #4]
100496a8:	681b      	ldr	r3, [r3, #0]
100496aa:	681a      	ldr	r2, [r3, #0]
100496ac:	687b      	ldr	r3, [r7, #4]
100496ae:	681b      	ldr	r3, [r3, #0]
100496b0:	491e      	ldr	r1, [pc, #120]	@ (1004972c <I2C_ITSlaveSeqCplt+0xc8>)
100496b2:	400a      	ands	r2, r1
100496b4:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
100496b6:	687b      	ldr	r3, [r7, #4]
100496b8:	2241      	movs	r2, #65	@ 0x41
100496ba:	5c9b      	ldrb	r3, [r3, r2]
100496bc:	b2db      	uxtb	r3, r3
100496be:	2b29      	cmp	r3, #41	@ 0x29
100496c0:	d114      	bne.n	100496ec <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
100496c2:	687b      	ldr	r3, [r7, #4]
100496c4:	2241      	movs	r2, #65	@ 0x41
100496c6:	2128      	movs	r1, #40	@ 0x28
100496c8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
100496ca:	687b      	ldr	r3, [r7, #4]
100496cc:	2221      	movs	r2, #33	@ 0x21
100496ce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
100496d0:	687b      	ldr	r3, [r7, #4]
100496d2:	2101      	movs	r1, #1
100496d4:	0018      	movs	r0, r3
100496d6:	f000 fd17 	bl	1004a108 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
100496da:	687b      	ldr	r3, [r7, #4]
100496dc:	2240      	movs	r2, #64	@ 0x40
100496de:	2100      	movs	r1, #0
100496e0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
100496e2:	687b      	ldr	r3, [r7, #4]
100496e4:	0018      	movs	r0, r3
100496e6:	f7ff f915 	bl	10048914 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
100496ea:	e019      	b.n	10049720 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
100496ec:	687b      	ldr	r3, [r7, #4]
100496ee:	2241      	movs	r2, #65	@ 0x41
100496f0:	5c9b      	ldrb	r3, [r3, r2]
100496f2:	b2db      	uxtb	r3, r3
100496f4:	2b2a      	cmp	r3, #42	@ 0x2a
100496f6:	d113      	bne.n	10049720 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
100496f8:	687b      	ldr	r3, [r7, #4]
100496fa:	2241      	movs	r2, #65	@ 0x41
100496fc:	2128      	movs	r1, #40	@ 0x28
100496fe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
10049700:	687b      	ldr	r3, [r7, #4]
10049702:	2222      	movs	r2, #34	@ 0x22
10049704:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
10049706:	687b      	ldr	r3, [r7, #4]
10049708:	2102      	movs	r1, #2
1004970a:	0018      	movs	r0, r3
1004970c:	f000 fcfc 	bl	1004a108 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
10049710:	687b      	ldr	r3, [r7, #4]
10049712:	2240      	movs	r2, #64	@ 0x40
10049714:	2100      	movs	r1, #0
10049716:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
10049718:	687b      	ldr	r3, [r7, #4]
1004971a:	0018      	movs	r0, r3
1004971c:	f7ff f902 	bl	10048924 <HAL_I2C_SlaveRxCpltCallback>
}
10049720:	46c0      	nop			@ (mov r8, r8)
10049722:	46bd      	mov	sp, r7
10049724:	b004      	add	sp, #16
10049726:	bd80      	pop	{r7, pc}
10049728:	ffffbfff 	.word	0xffffbfff
1004972c:	ffff7fff 	.word	0xffff7fff

10049730 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10049730:	b580      	push	{r7, lr}
10049732:	b086      	sub	sp, #24
10049734:	af00      	add	r7, sp, #0
10049736:	6078      	str	r0, [r7, #4]
10049738:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
1004973a:	683b      	ldr	r3, [r7, #0]
1004973c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
1004973e:	687b      	ldr	r3, [r7, #4]
10049740:	681b      	ldr	r3, [r3, #0]
10049742:	2220      	movs	r2, #32
10049744:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
10049746:	687b      	ldr	r3, [r7, #4]
10049748:	2241      	movs	r2, #65	@ 0x41
1004974a:	5c9b      	ldrb	r3, [r3, r2]
1004974c:	b2db      	uxtb	r3, r3
1004974e:	2b21      	cmp	r3, #33	@ 0x21
10049750:	d108      	bne.n	10049764 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10049752:	687b      	ldr	r3, [r7, #4]
10049754:	2101      	movs	r1, #1
10049756:	0018      	movs	r0, r3
10049758:	f000 fcd6 	bl	1004a108 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
1004975c:	687b      	ldr	r3, [r7, #4]
1004975e:	2211      	movs	r2, #17
10049760:	631a      	str	r2, [r3, #48]	@ 0x30
10049762:	e00d      	b.n	10049780 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10049764:	687b      	ldr	r3, [r7, #4]
10049766:	2241      	movs	r2, #65	@ 0x41
10049768:	5c9b      	ldrb	r3, [r3, r2]
1004976a:	b2db      	uxtb	r3, r3
1004976c:	2b22      	cmp	r3, #34	@ 0x22
1004976e:	d107      	bne.n	10049780 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
10049770:	687b      	ldr	r3, [r7, #4]
10049772:	2102      	movs	r1, #2
10049774:	0018      	movs	r0, r3
10049776:	f000 fcc7 	bl	1004a108 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
1004977a:	687b      	ldr	r3, [r7, #4]
1004977c:	2212      	movs	r2, #18
1004977e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
10049780:	687b      	ldr	r3, [r7, #4]
10049782:	681b      	ldr	r3, [r3, #0]
10049784:	685a      	ldr	r2, [r3, #4]
10049786:	687b      	ldr	r3, [r7, #4]
10049788:	681b      	ldr	r3, [r3, #0]
1004978a:	4950      	ldr	r1, [pc, #320]	@ (100498cc <I2C_ITMasterCplt+0x19c>)
1004978c:	400a      	ands	r2, r1
1004978e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
10049790:	687b      	ldr	r3, [r7, #4]
10049792:	2200      	movs	r2, #0
10049794:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
10049796:	687b      	ldr	r3, [r7, #4]
10049798:	4a4d      	ldr	r2, [pc, #308]	@ (100498d0 <I2C_ITMasterCplt+0x1a0>)
1004979a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
1004979c:	697b      	ldr	r3, [r7, #20]
1004979e:	091b      	lsrs	r3, r3, #4
100497a0:	001a      	movs	r2, r3
100497a2:	2301      	movs	r3, #1
100497a4:	4013      	ands	r3, r2
100497a6:	d009      	beq.n	100497bc <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100497a8:	687b      	ldr	r3, [r7, #4]
100497aa:	681b      	ldr	r3, [r3, #0]
100497ac:	2210      	movs	r2, #16
100497ae:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
100497b0:	687b      	ldr	r3, [r7, #4]
100497b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100497b4:	2204      	movs	r2, #4
100497b6:	431a      	orrs	r2, r3
100497b8:	687b      	ldr	r3, [r7, #4]
100497ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
100497bc:	687b      	ldr	r3, [r7, #4]
100497be:	2241      	movs	r2, #65	@ 0x41
100497c0:	5c9b      	ldrb	r3, [r3, r2]
100497c2:	b2db      	uxtb	r3, r3
100497c4:	2b60      	cmp	r3, #96	@ 0x60
100497c6:	d10b      	bne.n	100497e0 <I2C_ITMasterCplt+0xb0>
100497c8:	697b      	ldr	r3, [r7, #20]
100497ca:	089b      	lsrs	r3, r3, #2
100497cc:	001a      	movs	r2, r3
100497ce:	2301      	movs	r3, #1
100497d0:	4013      	ands	r3, r2
100497d2:	d005      	beq.n	100497e0 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
100497d4:	687b      	ldr	r3, [r7, #4]
100497d6:	681b      	ldr	r3, [r3, #0]
100497d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100497da:	b2db      	uxtb	r3, r3
100497dc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
100497de:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
100497e0:	687b      	ldr	r3, [r7, #4]
100497e2:	0018      	movs	r0, r3
100497e4:	f000 fb8b 	bl	10049efe <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
100497e8:	687b      	ldr	r3, [r7, #4]
100497ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100497ec:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
100497ee:	687b      	ldr	r3, [r7, #4]
100497f0:	2241      	movs	r2, #65	@ 0x41
100497f2:	5c9b      	ldrb	r3, [r3, r2]
100497f4:	b2db      	uxtb	r3, r3
100497f6:	2b60      	cmp	r3, #96	@ 0x60
100497f8:	d002      	beq.n	10049800 <I2C_ITMasterCplt+0xd0>
100497fa:	693b      	ldr	r3, [r7, #16]
100497fc:	2b00      	cmp	r3, #0
100497fe:	d007      	beq.n	10049810 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
10049800:	687b      	ldr	r3, [r7, #4]
10049802:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10049804:	687b      	ldr	r3, [r7, #4]
10049806:	0011      	movs	r1, r2
10049808:	0018      	movs	r0, r3
1004980a:	f000 fa4d 	bl	10049ca8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
1004980e:	e058      	b.n	100498c2 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
10049810:	687b      	ldr	r3, [r7, #4]
10049812:	2241      	movs	r2, #65	@ 0x41
10049814:	5c9b      	ldrb	r3, [r3, r2]
10049816:	b2db      	uxtb	r3, r3
10049818:	2b21      	cmp	r3, #33	@ 0x21
1004981a:	d126      	bne.n	1004986a <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
1004981c:	687b      	ldr	r3, [r7, #4]
1004981e:	2241      	movs	r2, #65	@ 0x41
10049820:	2120      	movs	r1, #32
10049822:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10049824:	687b      	ldr	r3, [r7, #4]
10049826:	2200      	movs	r2, #0
10049828:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
1004982a:	687b      	ldr	r3, [r7, #4]
1004982c:	2242      	movs	r2, #66	@ 0x42
1004982e:	5c9b      	ldrb	r3, [r3, r2]
10049830:	b2db      	uxtb	r3, r3
10049832:	2b40      	cmp	r3, #64	@ 0x40
10049834:	d10c      	bne.n	10049850 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
10049836:	687b      	ldr	r3, [r7, #4]
10049838:	2242      	movs	r2, #66	@ 0x42
1004983a:	2100      	movs	r1, #0
1004983c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
1004983e:	687b      	ldr	r3, [r7, #4]
10049840:	2240      	movs	r2, #64	@ 0x40
10049842:	2100      	movs	r1, #0
10049844:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
10049846:	687b      	ldr	r3, [r7, #4]
10049848:	0018      	movs	r0, r3
1004984a:	f7fb f98d 	bl	10044b68 <HAL_I2C_MemTxCpltCallback>
}
1004984e:	e038      	b.n	100498c2 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
10049850:	687b      	ldr	r3, [r7, #4]
10049852:	2242      	movs	r2, #66	@ 0x42
10049854:	2100      	movs	r1, #0
10049856:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
10049858:	687b      	ldr	r3, [r7, #4]
1004985a:	2240      	movs	r2, #64	@ 0x40
1004985c:	2100      	movs	r1, #0
1004985e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
10049860:	687b      	ldr	r3, [r7, #4]
10049862:	0018      	movs	r0, r3
10049864:	f7ff f846 	bl	100488f4 <HAL_I2C_MasterTxCpltCallback>
}
10049868:	e02b      	b.n	100498c2 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
1004986a:	687b      	ldr	r3, [r7, #4]
1004986c:	2241      	movs	r2, #65	@ 0x41
1004986e:	5c9b      	ldrb	r3, [r3, r2]
10049870:	b2db      	uxtb	r3, r3
10049872:	2b22      	cmp	r3, #34	@ 0x22
10049874:	d125      	bne.n	100498c2 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
10049876:	687b      	ldr	r3, [r7, #4]
10049878:	2241      	movs	r2, #65	@ 0x41
1004987a:	2120      	movs	r1, #32
1004987c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
1004987e:	687b      	ldr	r3, [r7, #4]
10049880:	2200      	movs	r2, #0
10049882:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
10049884:	687b      	ldr	r3, [r7, #4]
10049886:	2242      	movs	r2, #66	@ 0x42
10049888:	5c9b      	ldrb	r3, [r3, r2]
1004988a:	b2db      	uxtb	r3, r3
1004988c:	2b40      	cmp	r3, #64	@ 0x40
1004988e:	d10c      	bne.n	100498aa <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
10049890:	687b      	ldr	r3, [r7, #4]
10049892:	2242      	movs	r2, #66	@ 0x42
10049894:	2100      	movs	r1, #0
10049896:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
10049898:	687b      	ldr	r3, [r7, #4]
1004989a:	2240      	movs	r2, #64	@ 0x40
1004989c:	2100      	movs	r1, #0
1004989e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
100498a0:	687b      	ldr	r3, [r7, #4]
100498a2:	0018      	movs	r0, r3
100498a4:	f7fb f996 	bl	10044bd4 <HAL_I2C_MemRxCpltCallback>
}
100498a8:	e00b      	b.n	100498c2 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
100498aa:	687b      	ldr	r3, [r7, #4]
100498ac:	2242      	movs	r2, #66	@ 0x42
100498ae:	2100      	movs	r1, #0
100498b0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
100498b2:	687b      	ldr	r3, [r7, #4]
100498b4:	2240      	movs	r2, #64	@ 0x40
100498b6:	2100      	movs	r1, #0
100498b8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
100498ba:	687b      	ldr	r3, [r7, #4]
100498bc:	0018      	movs	r0, r3
100498be:	f7ff f821 	bl	10048904 <HAL_I2C_MasterRxCpltCallback>
}
100498c2:	46c0      	nop			@ (mov r8, r8)
100498c4:	46bd      	mov	sp, r7
100498c6:	b006      	add	sp, #24
100498c8:	bd80      	pop	{r7, pc}
100498ca:	46c0      	nop			@ (mov r8, r8)
100498cc:	fe00e800 	.word	0xfe00e800
100498d0:	ffff0000 	.word	0xffff0000

100498d4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
100498d4:	b580      	push	{r7, lr}
100498d6:	b086      	sub	sp, #24
100498d8:	af00      	add	r7, sp, #0
100498da:	6078      	str	r0, [r7, #4]
100498dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
100498de:	687b      	ldr	r3, [r7, #4]
100498e0:	681b      	ldr	r3, [r3, #0]
100498e2:	681b      	ldr	r3, [r3, #0]
100498e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
100498e6:	683b      	ldr	r3, [r7, #0]
100498e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
100498ea:	687b      	ldr	r3, [r7, #4]
100498ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100498ee:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
100498f0:	200b      	movs	r0, #11
100498f2:	183b      	adds	r3, r7, r0
100498f4:	687a      	ldr	r2, [r7, #4]
100498f6:	2141      	movs	r1, #65	@ 0x41
100498f8:	5c52      	ldrb	r2, [r2, r1]
100498fa:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
100498fc:	687b      	ldr	r3, [r7, #4]
100498fe:	681b      	ldr	r3, [r3, #0]
10049900:	2220      	movs	r2, #32
10049902:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
10049904:	183b      	adds	r3, r7, r0
10049906:	781b      	ldrb	r3, [r3, #0]
10049908:	2b21      	cmp	r3, #33	@ 0x21
1004990a:	d003      	beq.n	10049914 <I2C_ITSlaveCplt+0x40>
1004990c:	183b      	adds	r3, r7, r0
1004990e:	781b      	ldrb	r3, [r3, #0]
10049910:	2b29      	cmp	r3, #41	@ 0x29
10049912:	d109      	bne.n	10049928 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
10049914:	4ab0      	ldr	r2, [pc, #704]	@ (10049bd8 <I2C_ITSlaveCplt+0x304>)
10049916:	687b      	ldr	r3, [r7, #4]
10049918:	0011      	movs	r1, r2
1004991a:	0018      	movs	r0, r3
1004991c:	f000 fbf4 	bl	1004a108 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
10049920:	687b      	ldr	r3, [r7, #4]
10049922:	2221      	movs	r2, #33	@ 0x21
10049924:	631a      	str	r2, [r3, #48]	@ 0x30
10049926:	e020      	b.n	1004996a <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
10049928:	220b      	movs	r2, #11
1004992a:	18bb      	adds	r3, r7, r2
1004992c:	781b      	ldrb	r3, [r3, #0]
1004992e:	2b22      	cmp	r3, #34	@ 0x22
10049930:	d003      	beq.n	1004993a <I2C_ITSlaveCplt+0x66>
10049932:	18bb      	adds	r3, r7, r2
10049934:	781b      	ldrb	r3, [r3, #0]
10049936:	2b2a      	cmp	r3, #42	@ 0x2a
10049938:	d109      	bne.n	1004994e <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
1004993a:	4aa8      	ldr	r2, [pc, #672]	@ (10049bdc <I2C_ITSlaveCplt+0x308>)
1004993c:	687b      	ldr	r3, [r7, #4]
1004993e:	0011      	movs	r1, r2
10049940:	0018      	movs	r0, r3
10049942:	f000 fbe1 	bl	1004a108 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
10049946:	687b      	ldr	r3, [r7, #4]
10049948:	2222      	movs	r2, #34	@ 0x22
1004994a:	631a      	str	r2, [r3, #48]	@ 0x30
1004994c:	e00d      	b.n	1004996a <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
1004994e:	230b      	movs	r3, #11
10049950:	18fb      	adds	r3, r7, r3
10049952:	781b      	ldrb	r3, [r3, #0]
10049954:	2b28      	cmp	r3, #40	@ 0x28
10049956:	d108      	bne.n	1004996a <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
10049958:	4aa1      	ldr	r2, [pc, #644]	@ (10049be0 <I2C_ITSlaveCplt+0x30c>)
1004995a:	687b      	ldr	r3, [r7, #4]
1004995c:	0011      	movs	r1, r2
1004995e:	0018      	movs	r0, r3
10049960:	f000 fbd2 	bl	1004a108 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
10049964:	687b      	ldr	r3, [r7, #4]
10049966:	2200      	movs	r2, #0
10049968:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
1004996a:	687b      	ldr	r3, [r7, #4]
1004996c:	681b      	ldr	r3, [r3, #0]
1004996e:	685a      	ldr	r2, [r3, #4]
10049970:	687b      	ldr	r3, [r7, #4]
10049972:	681b      	ldr	r3, [r3, #0]
10049974:	2180      	movs	r1, #128	@ 0x80
10049976:	0209      	lsls	r1, r1, #8
10049978:	430a      	orrs	r2, r1
1004997a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
1004997c:	687b      	ldr	r3, [r7, #4]
1004997e:	681b      	ldr	r3, [r3, #0]
10049980:	685a      	ldr	r2, [r3, #4]
10049982:	687b      	ldr	r3, [r7, #4]
10049984:	681b      	ldr	r3, [r3, #0]
10049986:	4997      	ldr	r1, [pc, #604]	@ (10049be4 <I2C_ITSlaveCplt+0x310>)
10049988:	400a      	ands	r2, r1
1004998a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
1004998c:	687b      	ldr	r3, [r7, #4]
1004998e:	0018      	movs	r0, r3
10049990:	f000 fab5 	bl	10049efe <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
10049994:	693b      	ldr	r3, [r7, #16]
10049996:	0b9b      	lsrs	r3, r3, #14
10049998:	001a      	movs	r2, r3
1004999a:	2301      	movs	r3, #1
1004999c:	4013      	ands	r3, r2
1004999e:	d013      	beq.n	100499c8 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
100499a0:	687b      	ldr	r3, [r7, #4]
100499a2:	681b      	ldr	r3, [r3, #0]
100499a4:	681a      	ldr	r2, [r3, #0]
100499a6:	687b      	ldr	r3, [r7, #4]
100499a8:	681b      	ldr	r3, [r3, #0]
100499aa:	498f      	ldr	r1, [pc, #572]	@ (10049be8 <I2C_ITSlaveCplt+0x314>)
100499ac:	400a      	ands	r2, r1
100499ae:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
100499b0:	687b      	ldr	r3, [r7, #4]
100499b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100499b4:	2b00      	cmp	r3, #0
100499b6:	d020      	beq.n	100499fa <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
100499b8:	687b      	ldr	r3, [r7, #4]
100499ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100499bc:	681b      	ldr	r3, [r3, #0]
100499be:	685b      	ldr	r3, [r3, #4]
100499c0:	b29a      	uxth	r2, r3
100499c2:	687b      	ldr	r3, [r7, #4]
100499c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
100499c6:	e018      	b.n	100499fa <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
100499c8:	693b      	ldr	r3, [r7, #16]
100499ca:	0bdb      	lsrs	r3, r3, #15
100499cc:	001a      	movs	r2, r3
100499ce:	2301      	movs	r3, #1
100499d0:	4013      	ands	r3, r2
100499d2:	d012      	beq.n	100499fa <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
100499d4:	687b      	ldr	r3, [r7, #4]
100499d6:	681b      	ldr	r3, [r3, #0]
100499d8:	681a      	ldr	r2, [r3, #0]
100499da:	687b      	ldr	r3, [r7, #4]
100499dc:	681b      	ldr	r3, [r3, #0]
100499de:	4983      	ldr	r1, [pc, #524]	@ (10049bec <I2C_ITSlaveCplt+0x318>)
100499e0:	400a      	ands	r2, r1
100499e2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
100499e4:	687b      	ldr	r3, [r7, #4]
100499e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100499e8:	2b00      	cmp	r3, #0
100499ea:	d006      	beq.n	100499fa <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
100499ec:	687b      	ldr	r3, [r7, #4]
100499ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100499f0:	681b      	ldr	r3, [r3, #0]
100499f2:	685b      	ldr	r3, [r3, #4]
100499f4:	b29a      	uxth	r2, r3
100499f6:	687b      	ldr	r3, [r7, #4]
100499f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
100499fa:	697b      	ldr	r3, [r7, #20]
100499fc:	089b      	lsrs	r3, r3, #2
100499fe:	001a      	movs	r2, r3
10049a00:	2301      	movs	r3, #1
10049a02:	4013      	ands	r3, r2
10049a04:	d020      	beq.n	10049a48 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
10049a06:	697b      	ldr	r3, [r7, #20]
10049a08:	2204      	movs	r2, #4
10049a0a:	4393      	bics	r3, r2
10049a0c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10049a0e:	687b      	ldr	r3, [r7, #4]
10049a10:	681b      	ldr	r3, [r3, #0]
10049a12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10049a14:	687b      	ldr	r3, [r7, #4]
10049a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10049a18:	b2d2      	uxtb	r2, r2
10049a1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
10049a1c:	687b      	ldr	r3, [r7, #4]
10049a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10049a20:	1c5a      	adds	r2, r3, #1
10049a22:	687b      	ldr	r3, [r7, #4]
10049a24:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
10049a26:	687b      	ldr	r3, [r7, #4]
10049a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049a2a:	2b00      	cmp	r3, #0
10049a2c:	d00c      	beq.n	10049a48 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
10049a2e:	687b      	ldr	r3, [r7, #4]
10049a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049a32:	3b01      	subs	r3, #1
10049a34:	b29a      	uxth	r2, r3
10049a36:	687b      	ldr	r3, [r7, #4]
10049a38:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10049a3a:	687b      	ldr	r3, [r7, #4]
10049a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049a3e:	b29b      	uxth	r3, r3
10049a40:	3b01      	subs	r3, #1
10049a42:	b29a      	uxth	r2, r3
10049a44:	687b      	ldr	r3, [r7, #4]
10049a46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
10049a48:	687b      	ldr	r3, [r7, #4]
10049a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049a4c:	b29b      	uxth	r3, r3
10049a4e:	2b00      	cmp	r3, #0
10049a50:	d005      	beq.n	10049a5e <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10049a52:	687b      	ldr	r3, [r7, #4]
10049a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049a56:	2204      	movs	r2, #4
10049a58:	431a      	orrs	r2, r3
10049a5a:	687b      	ldr	r3, [r7, #4]
10049a5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10049a5e:	697b      	ldr	r3, [r7, #20]
10049a60:	091b      	lsrs	r3, r3, #4
10049a62:	001a      	movs	r2, r3
10049a64:	2301      	movs	r3, #1
10049a66:	4013      	ands	r3, r2
10049a68:	d051      	beq.n	10049b0e <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
10049a6a:	693b      	ldr	r3, [r7, #16]
10049a6c:	091b      	lsrs	r3, r3, #4
10049a6e:	001a      	movs	r2, r3
10049a70:	2301      	movs	r3, #1
10049a72:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10049a74:	d04b      	beq.n	10049b0e <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
10049a76:	687b      	ldr	r3, [r7, #4]
10049a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049a7a:	b29b      	uxth	r3, r3
10049a7c:	2b00      	cmp	r3, #0
10049a7e:	d12d      	bne.n	10049adc <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10049a80:	687b      	ldr	r3, [r7, #4]
10049a82:	2241      	movs	r2, #65	@ 0x41
10049a84:	5c9b      	ldrb	r3, [r3, r2]
10049a86:	b2db      	uxtb	r3, r3
10049a88:	2b28      	cmp	r3, #40	@ 0x28
10049a8a:	d10b      	bne.n	10049aa4 <I2C_ITSlaveCplt+0x1d0>
10049a8c:	68fa      	ldr	r2, [r7, #12]
10049a8e:	2380      	movs	r3, #128	@ 0x80
10049a90:	049b      	lsls	r3, r3, #18
10049a92:	429a      	cmp	r2, r3
10049a94:	d106      	bne.n	10049aa4 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
10049a96:	697a      	ldr	r2, [r7, #20]
10049a98:	687b      	ldr	r3, [r7, #4]
10049a9a:	0011      	movs	r1, r2
10049a9c:	0018      	movs	r0, r3
10049a9e:	f000 f8a9 	bl	10049bf4 <I2C_ITListenCplt>
10049aa2:	e034      	b.n	10049b0e <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
10049aa4:	687b      	ldr	r3, [r7, #4]
10049aa6:	2241      	movs	r2, #65	@ 0x41
10049aa8:	5c9b      	ldrb	r3, [r3, r2]
10049aaa:	b2db      	uxtb	r3, r3
10049aac:	2b29      	cmp	r3, #41	@ 0x29
10049aae:	d110      	bne.n	10049ad2 <I2C_ITSlaveCplt+0x1fe>
10049ab0:	68fb      	ldr	r3, [r7, #12]
10049ab2:	4a4f      	ldr	r2, [pc, #316]	@ (10049bf0 <I2C_ITSlaveCplt+0x31c>)
10049ab4:	4293      	cmp	r3, r2
10049ab6:	d00c      	beq.n	10049ad2 <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049ab8:	687b      	ldr	r3, [r7, #4]
10049aba:	681b      	ldr	r3, [r3, #0]
10049abc:	2210      	movs	r2, #16
10049abe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
10049ac0:	687b      	ldr	r3, [r7, #4]
10049ac2:	0018      	movs	r0, r3
10049ac4:	f000 fa1b 	bl	10049efe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10049ac8:	687b      	ldr	r3, [r7, #4]
10049aca:	0018      	movs	r0, r3
10049acc:	f7ff fdca 	bl	10049664 <I2C_ITSlaveSeqCplt>
10049ad0:	e01d      	b.n	10049b0e <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049ad2:	687b      	ldr	r3, [r7, #4]
10049ad4:	681b      	ldr	r3, [r3, #0]
10049ad6:	2210      	movs	r2, #16
10049ad8:	61da      	str	r2, [r3, #28]
10049ada:	e018      	b.n	10049b0e <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049adc:	687b      	ldr	r3, [r7, #4]
10049ade:	681b      	ldr	r3, [r3, #0]
10049ae0:	2210      	movs	r2, #16
10049ae2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10049ae4:	687b      	ldr	r3, [r7, #4]
10049ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049ae8:	2204      	movs	r2, #4
10049aea:	431a      	orrs	r2, r3
10049aec:	687b      	ldr	r3, [r7, #4]
10049aee:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
10049af0:	68fb      	ldr	r3, [r7, #12]
10049af2:	2b00      	cmp	r3, #0
10049af4:	d004      	beq.n	10049b00 <I2C_ITSlaveCplt+0x22c>
10049af6:	68fa      	ldr	r2, [r7, #12]
10049af8:	2380      	movs	r3, #128	@ 0x80
10049afa:	045b      	lsls	r3, r3, #17
10049afc:	429a      	cmp	r2, r3
10049afe:	d106      	bne.n	10049b0e <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
10049b00:	687b      	ldr	r3, [r7, #4]
10049b02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10049b04:	687b      	ldr	r3, [r7, #4]
10049b06:	0011      	movs	r1, r2
10049b08:	0018      	movs	r0, r3
10049b0a:	f000 f8cd 	bl	10049ca8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
10049b0e:	687b      	ldr	r3, [r7, #4]
10049b10:	2242      	movs	r2, #66	@ 0x42
10049b12:	2100      	movs	r1, #0
10049b14:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
10049b16:	687b      	ldr	r3, [r7, #4]
10049b18:	2200      	movs	r2, #0
10049b1a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
10049b1c:	687b      	ldr	r3, [r7, #4]
10049b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049b20:	2b00      	cmp	r3, #0
10049b22:	d013      	beq.n	10049b4c <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
10049b24:	687b      	ldr	r3, [r7, #4]
10049b26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10049b28:	687b      	ldr	r3, [r7, #4]
10049b2a:	0011      	movs	r1, r2
10049b2c:	0018      	movs	r0, r3
10049b2e:	f000 f8bb 	bl	10049ca8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
10049b32:	687b      	ldr	r3, [r7, #4]
10049b34:	2241      	movs	r2, #65	@ 0x41
10049b36:	5c9b      	ldrb	r3, [r3, r2]
10049b38:	b2db      	uxtb	r3, r3
10049b3a:	2b28      	cmp	r3, #40	@ 0x28
10049b3c:	d147      	bne.n	10049bce <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
10049b3e:	697a      	ldr	r2, [r7, #20]
10049b40:	687b      	ldr	r3, [r7, #4]
10049b42:	0011      	movs	r1, r2
10049b44:	0018      	movs	r0, r3
10049b46:	f000 f855 	bl	10049bf4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
10049b4a:	e040      	b.n	10049bce <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
10049b4c:	687b      	ldr	r3, [r7, #4]
10049b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10049b50:	4a27      	ldr	r2, [pc, #156]	@ (10049bf0 <I2C_ITSlaveCplt+0x31c>)
10049b52:	4293      	cmp	r3, r2
10049b54:	d016      	beq.n	10049b84 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
10049b56:	687b      	ldr	r3, [r7, #4]
10049b58:	0018      	movs	r0, r3
10049b5a:	f7ff fd83 	bl	10049664 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
10049b5e:	687b      	ldr	r3, [r7, #4]
10049b60:	4a23      	ldr	r2, [pc, #140]	@ (10049bf0 <I2C_ITSlaveCplt+0x31c>)
10049b62:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
10049b64:	687b      	ldr	r3, [r7, #4]
10049b66:	2241      	movs	r2, #65	@ 0x41
10049b68:	2120      	movs	r1, #32
10049b6a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10049b6c:	687b      	ldr	r3, [r7, #4]
10049b6e:	2200      	movs	r2, #0
10049b70:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10049b72:	687b      	ldr	r3, [r7, #4]
10049b74:	2240      	movs	r2, #64	@ 0x40
10049b76:	2100      	movs	r1, #0
10049b78:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
10049b7a:	687b      	ldr	r3, [r7, #4]
10049b7c:	0018      	movs	r0, r3
10049b7e:	f7fe fee9 	bl	10048954 <HAL_I2C_ListenCpltCallback>
}
10049b82:	e024      	b.n	10049bce <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10049b84:	687b      	ldr	r3, [r7, #4]
10049b86:	2241      	movs	r2, #65	@ 0x41
10049b88:	5c9b      	ldrb	r3, [r3, r2]
10049b8a:	b2db      	uxtb	r3, r3
10049b8c:	2b22      	cmp	r3, #34	@ 0x22
10049b8e:	d10f      	bne.n	10049bb0 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
10049b90:	687b      	ldr	r3, [r7, #4]
10049b92:	2241      	movs	r2, #65	@ 0x41
10049b94:	2120      	movs	r1, #32
10049b96:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10049b98:	687b      	ldr	r3, [r7, #4]
10049b9a:	2200      	movs	r2, #0
10049b9c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10049b9e:	687b      	ldr	r3, [r7, #4]
10049ba0:	2240      	movs	r2, #64	@ 0x40
10049ba2:	2100      	movs	r1, #0
10049ba4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
10049ba6:	687b      	ldr	r3, [r7, #4]
10049ba8:	0018      	movs	r0, r3
10049baa:	f7fe febb 	bl	10048924 <HAL_I2C_SlaveRxCpltCallback>
}
10049bae:	e00e      	b.n	10049bce <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
10049bb0:	687b      	ldr	r3, [r7, #4]
10049bb2:	2241      	movs	r2, #65	@ 0x41
10049bb4:	2120      	movs	r1, #32
10049bb6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10049bb8:	687b      	ldr	r3, [r7, #4]
10049bba:	2200      	movs	r2, #0
10049bbc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10049bbe:	687b      	ldr	r3, [r7, #4]
10049bc0:	2240      	movs	r2, #64	@ 0x40
10049bc2:	2100      	movs	r1, #0
10049bc4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
10049bc6:	687b      	ldr	r3, [r7, #4]
10049bc8:	0018      	movs	r0, r3
10049bca:	f7fe fea3 	bl	10048914 <HAL_I2C_SlaveTxCpltCallback>
}
10049bce:	46c0      	nop			@ (mov r8, r8)
10049bd0:	46bd      	mov	sp, r7
10049bd2:	b006      	add	sp, #24
10049bd4:	bd80      	pop	{r7, pc}
10049bd6:	46c0      	nop			@ (mov r8, r8)
10049bd8:	00008001 	.word	0x00008001
10049bdc:	00008002 	.word	0x00008002
10049be0:	00008003 	.word	0x00008003
10049be4:	fe00e800 	.word	0xfe00e800
10049be8:	ffffbfff 	.word	0xffffbfff
10049bec:	ffff7fff 	.word	0xffff7fff
10049bf0:	ffff0000 	.word	0xffff0000

10049bf4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10049bf4:	b580      	push	{r7, lr}
10049bf6:	b082      	sub	sp, #8
10049bf8:	af00      	add	r7, sp, #0
10049bfa:	6078      	str	r0, [r7, #4]
10049bfc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
10049bfe:	687b      	ldr	r3, [r7, #4]
10049c00:	4a27      	ldr	r2, [pc, #156]	@ (10049ca0 <I2C_ITListenCplt+0xac>)
10049c02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
10049c04:	687b      	ldr	r3, [r7, #4]
10049c06:	2200      	movs	r2, #0
10049c08:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
10049c0a:	687b      	ldr	r3, [r7, #4]
10049c0c:	2241      	movs	r2, #65	@ 0x41
10049c0e:	2120      	movs	r1, #32
10049c10:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
10049c12:	687b      	ldr	r3, [r7, #4]
10049c14:	2242      	movs	r2, #66	@ 0x42
10049c16:	2100      	movs	r1, #0
10049c18:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
10049c1a:	687b      	ldr	r3, [r7, #4]
10049c1c:	2200      	movs	r2, #0
10049c1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
10049c20:	683b      	ldr	r3, [r7, #0]
10049c22:	089b      	lsrs	r3, r3, #2
10049c24:	001a      	movs	r2, r3
10049c26:	2301      	movs	r3, #1
10049c28:	4013      	ands	r3, r2
10049c2a:	d022      	beq.n	10049c72 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10049c2c:	687b      	ldr	r3, [r7, #4]
10049c2e:	681b      	ldr	r3, [r3, #0]
10049c30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10049c32:	687b      	ldr	r3, [r7, #4]
10049c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10049c36:	b2d2      	uxtb	r2, r2
10049c38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
10049c3a:	687b      	ldr	r3, [r7, #4]
10049c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10049c3e:	1c5a      	adds	r2, r3, #1
10049c40:	687b      	ldr	r3, [r7, #4]
10049c42:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
10049c44:	687b      	ldr	r3, [r7, #4]
10049c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049c48:	2b00      	cmp	r3, #0
10049c4a:	d012      	beq.n	10049c72 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
10049c4c:	687b      	ldr	r3, [r7, #4]
10049c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049c50:	3b01      	subs	r3, #1
10049c52:	b29a      	uxth	r2, r3
10049c54:	687b      	ldr	r3, [r7, #4]
10049c56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10049c58:	687b      	ldr	r3, [r7, #4]
10049c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049c5c:	b29b      	uxth	r3, r3
10049c5e:	3b01      	subs	r3, #1
10049c60:	b29a      	uxth	r2, r3
10049c62:	687b      	ldr	r3, [r7, #4]
10049c64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10049c66:	687b      	ldr	r3, [r7, #4]
10049c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049c6a:	2204      	movs	r2, #4
10049c6c:	431a      	orrs	r2, r3
10049c6e:	687b      	ldr	r3, [r7, #4]
10049c70:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
10049c72:	4a0c      	ldr	r2, [pc, #48]	@ (10049ca4 <I2C_ITListenCplt+0xb0>)
10049c74:	687b      	ldr	r3, [r7, #4]
10049c76:	0011      	movs	r1, r2
10049c78:	0018      	movs	r0, r3
10049c7a:	f000 fa45 	bl	1004a108 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049c7e:	687b      	ldr	r3, [r7, #4]
10049c80:	681b      	ldr	r3, [r3, #0]
10049c82:	2210      	movs	r2, #16
10049c84:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10049c86:	687b      	ldr	r3, [r7, #4]
10049c88:	2240      	movs	r2, #64	@ 0x40
10049c8a:	2100      	movs	r1, #0
10049c8c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
10049c8e:	687b      	ldr	r3, [r7, #4]
10049c90:	0018      	movs	r0, r3
10049c92:	f7fe fe5f 	bl	10048954 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
10049c96:	46c0      	nop			@ (mov r8, r8)
10049c98:	46bd      	mov	sp, r7
10049c9a:	b002      	add	sp, #8
10049c9c:	bd80      	pop	{r7, pc}
10049c9e:	46c0      	nop			@ (mov r8, r8)
10049ca0:	ffff0000 	.word	0xffff0000
10049ca4:	00008003 	.word	0x00008003

10049ca8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
10049ca8:	b580      	push	{r7, lr}
10049caa:	b084      	sub	sp, #16
10049cac:	af00      	add	r7, sp, #0
10049cae:	6078      	str	r0, [r7, #4]
10049cb0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
10049cb2:	200f      	movs	r0, #15
10049cb4:	183b      	adds	r3, r7, r0
10049cb6:	687a      	ldr	r2, [r7, #4]
10049cb8:	2141      	movs	r1, #65	@ 0x41
10049cba:	5c52      	ldrb	r2, [r2, r1]
10049cbc:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
10049cbe:	687b      	ldr	r3, [r7, #4]
10049cc0:	2242      	movs	r2, #66	@ 0x42
10049cc2:	2100      	movs	r1, #0
10049cc4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
10049cc6:	687b      	ldr	r3, [r7, #4]
10049cc8:	4a72      	ldr	r2, [pc, #456]	@ (10049e94 <I2C_ITError+0x1ec>)
10049cca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
10049ccc:	687b      	ldr	r3, [r7, #4]
10049cce:	2200      	movs	r2, #0
10049cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
10049cd2:	687b      	ldr	r3, [r7, #4]
10049cd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10049cd6:	683b      	ldr	r3, [r7, #0]
10049cd8:	431a      	orrs	r2, r3
10049cda:	687b      	ldr	r3, [r7, #4]
10049cdc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
10049cde:	183b      	adds	r3, r7, r0
10049ce0:	781b      	ldrb	r3, [r3, #0]
10049ce2:	2b28      	cmp	r3, #40	@ 0x28
10049ce4:	d007      	beq.n	10049cf6 <I2C_ITError+0x4e>
10049ce6:	183b      	adds	r3, r7, r0
10049ce8:	781b      	ldrb	r3, [r3, #0]
10049cea:	2b29      	cmp	r3, #41	@ 0x29
10049cec:	d003      	beq.n	10049cf6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
10049cee:	183b      	adds	r3, r7, r0
10049cf0:	781b      	ldrb	r3, [r3, #0]
10049cf2:	2b2a      	cmp	r3, #42	@ 0x2a
10049cf4:	d10c      	bne.n	10049d10 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
10049cf6:	687b      	ldr	r3, [r7, #4]
10049cf8:	2103      	movs	r1, #3
10049cfa:	0018      	movs	r0, r3
10049cfc:	f000 fa04 	bl	1004a108 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
10049d00:	687b      	ldr	r3, [r7, #4]
10049d02:	2241      	movs	r2, #65	@ 0x41
10049d04:	2128      	movs	r1, #40	@ 0x28
10049d06:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
10049d08:	687b      	ldr	r3, [r7, #4]
10049d0a:	4a63      	ldr	r2, [pc, #396]	@ (10049e98 <I2C_ITError+0x1f0>)
10049d0c:	635a      	str	r2, [r3, #52]	@ 0x34
10049d0e:	e032      	b.n	10049d76 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
10049d10:	4a62      	ldr	r2, [pc, #392]	@ (10049e9c <I2C_ITError+0x1f4>)
10049d12:	687b      	ldr	r3, [r7, #4]
10049d14:	0011      	movs	r1, r2
10049d16:	0018      	movs	r0, r3
10049d18:	f000 f9f6 	bl	1004a108 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10049d1c:	687b      	ldr	r3, [r7, #4]
10049d1e:	0018      	movs	r0, r3
10049d20:	f000 f8ed 	bl	10049efe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
10049d24:	687b      	ldr	r3, [r7, #4]
10049d26:	2241      	movs	r2, #65	@ 0x41
10049d28:	5c9b      	ldrb	r3, [r3, r2]
10049d2a:	b2db      	uxtb	r3, r3
10049d2c:	2b60      	cmp	r3, #96	@ 0x60
10049d2e:	d01f      	beq.n	10049d70 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
10049d30:	687b      	ldr	r3, [r7, #4]
10049d32:	2241      	movs	r2, #65	@ 0x41
10049d34:	2120      	movs	r1, #32
10049d36:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
10049d38:	687b      	ldr	r3, [r7, #4]
10049d3a:	681b      	ldr	r3, [r3, #0]
10049d3c:	699b      	ldr	r3, [r3, #24]
10049d3e:	2220      	movs	r2, #32
10049d40:	4013      	ands	r3, r2
10049d42:	2b20      	cmp	r3, #32
10049d44:	d114      	bne.n	10049d70 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
10049d46:	687b      	ldr	r3, [r7, #4]
10049d48:	681b      	ldr	r3, [r3, #0]
10049d4a:	699b      	ldr	r3, [r3, #24]
10049d4c:	2210      	movs	r2, #16
10049d4e:	4013      	ands	r3, r2
10049d50:	2b10      	cmp	r3, #16
10049d52:	d109      	bne.n	10049d68 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049d54:	687b      	ldr	r3, [r7, #4]
10049d56:	681b      	ldr	r3, [r3, #0]
10049d58:	2210      	movs	r2, #16
10049d5a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10049d5c:	687b      	ldr	r3, [r7, #4]
10049d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049d60:	2204      	movs	r2, #4
10049d62:	431a      	orrs	r2, r3
10049d64:	687b      	ldr	r3, [r7, #4]
10049d66:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10049d68:	687b      	ldr	r3, [r7, #4]
10049d6a:	681b      	ldr	r3, [r3, #0]
10049d6c:	2220      	movs	r2, #32
10049d6e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
10049d70:	687b      	ldr	r3, [r7, #4]
10049d72:	2200      	movs	r2, #0
10049d74:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
10049d76:	687b      	ldr	r3, [r7, #4]
10049d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10049d7a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
10049d7c:	687b      	ldr	r3, [r7, #4]
10049d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049d80:	2b00      	cmp	r3, #0
10049d82:	d03b      	beq.n	10049dfc <I2C_ITError+0x154>
10049d84:	68bb      	ldr	r3, [r7, #8]
10049d86:	2b11      	cmp	r3, #17
10049d88:	d002      	beq.n	10049d90 <I2C_ITError+0xe8>
10049d8a:	68bb      	ldr	r3, [r7, #8]
10049d8c:	2b21      	cmp	r3, #33	@ 0x21
10049d8e:	d135      	bne.n	10049dfc <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
10049d90:	687b      	ldr	r3, [r7, #4]
10049d92:	681b      	ldr	r3, [r3, #0]
10049d94:	681a      	ldr	r2, [r3, #0]
10049d96:	2380      	movs	r3, #128	@ 0x80
10049d98:	01db      	lsls	r3, r3, #7
10049d9a:	401a      	ands	r2, r3
10049d9c:	2380      	movs	r3, #128	@ 0x80
10049d9e:	01db      	lsls	r3, r3, #7
10049da0:	429a      	cmp	r2, r3
10049da2:	d107      	bne.n	10049db4 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10049da4:	687b      	ldr	r3, [r7, #4]
10049da6:	681b      	ldr	r3, [r3, #0]
10049da8:	681a      	ldr	r2, [r3, #0]
10049daa:	687b      	ldr	r3, [r7, #4]
10049dac:	681b      	ldr	r3, [r3, #0]
10049dae:	493c      	ldr	r1, [pc, #240]	@ (10049ea0 <I2C_ITError+0x1f8>)
10049db0:	400a      	ands	r2, r1
10049db2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
10049db4:	687b      	ldr	r3, [r7, #4]
10049db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049db8:	0018      	movs	r0, r3
10049dba:	f7fd fec6 	bl	10047b4a <HAL_DMA_GetState>
10049dbe:	0003      	movs	r3, r0
10049dc0:	2b01      	cmp	r3, #1
10049dc2:	d016      	beq.n	10049df2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
10049dc4:	687b      	ldr	r3, [r7, #4]
10049dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049dc8:	4a36      	ldr	r2, [pc, #216]	@ (10049ea4 <I2C_ITError+0x1fc>)
10049dca:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
10049dcc:	687b      	ldr	r3, [r7, #4]
10049dce:	2240      	movs	r2, #64	@ 0x40
10049dd0:	2100      	movs	r1, #0
10049dd2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
10049dd4:	687b      	ldr	r3, [r7, #4]
10049dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049dd8:	0018      	movs	r0, r3
10049dda:	f7fd fe6f 	bl	10047abc <HAL_DMA_Abort_IT>
10049dde:	1e03      	subs	r3, r0, #0
10049de0:	d051      	beq.n	10049e86 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
10049de2:	687b      	ldr	r3, [r7, #4]
10049de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049de6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10049de8:	687b      	ldr	r3, [r7, #4]
10049dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049dec:	0018      	movs	r0, r3
10049dee:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
10049df0:	e049      	b.n	10049e86 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
10049df2:	687b      	ldr	r3, [r7, #4]
10049df4:	0018      	movs	r0, r3
10049df6:	f000 f859 	bl	10049eac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
10049dfa:	e044      	b.n	10049e86 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
10049dfc:	687b      	ldr	r3, [r7, #4]
10049dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10049e00:	2b00      	cmp	r3, #0
10049e02:	d03b      	beq.n	10049e7c <I2C_ITError+0x1d4>
10049e04:	68bb      	ldr	r3, [r7, #8]
10049e06:	2b12      	cmp	r3, #18
10049e08:	d002      	beq.n	10049e10 <I2C_ITError+0x168>
10049e0a:	68bb      	ldr	r3, [r7, #8]
10049e0c:	2b22      	cmp	r3, #34	@ 0x22
10049e0e:	d135      	bne.n	10049e7c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
10049e10:	687b      	ldr	r3, [r7, #4]
10049e12:	681b      	ldr	r3, [r3, #0]
10049e14:	681a      	ldr	r2, [r3, #0]
10049e16:	2380      	movs	r3, #128	@ 0x80
10049e18:	021b      	lsls	r3, r3, #8
10049e1a:	401a      	ands	r2, r3
10049e1c:	2380      	movs	r3, #128	@ 0x80
10049e1e:	021b      	lsls	r3, r3, #8
10049e20:	429a      	cmp	r2, r3
10049e22:	d107      	bne.n	10049e34 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
10049e24:	687b      	ldr	r3, [r7, #4]
10049e26:	681b      	ldr	r3, [r3, #0]
10049e28:	681a      	ldr	r2, [r3, #0]
10049e2a:	687b      	ldr	r3, [r7, #4]
10049e2c:	681b      	ldr	r3, [r3, #0]
10049e2e:	491e      	ldr	r1, [pc, #120]	@ (10049ea8 <I2C_ITError+0x200>)
10049e30:	400a      	ands	r2, r1
10049e32:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
10049e34:	687b      	ldr	r3, [r7, #4]
10049e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10049e38:	0018      	movs	r0, r3
10049e3a:	f7fd fe86 	bl	10047b4a <HAL_DMA_GetState>
10049e3e:	0003      	movs	r3, r0
10049e40:	2b01      	cmp	r3, #1
10049e42:	d016      	beq.n	10049e72 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
10049e44:	687b      	ldr	r3, [r7, #4]
10049e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10049e48:	4a16      	ldr	r2, [pc, #88]	@ (10049ea4 <I2C_ITError+0x1fc>)
10049e4a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
10049e4c:	687b      	ldr	r3, [r7, #4]
10049e4e:	2240      	movs	r2, #64	@ 0x40
10049e50:	2100      	movs	r1, #0
10049e52:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
10049e54:	687b      	ldr	r3, [r7, #4]
10049e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10049e58:	0018      	movs	r0, r3
10049e5a:	f7fd fe2f 	bl	10047abc <HAL_DMA_Abort_IT>
10049e5e:	1e03      	subs	r3, r0, #0
10049e60:	d013      	beq.n	10049e8a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
10049e62:	687b      	ldr	r3, [r7, #4]
10049e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10049e66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10049e68:	687b      	ldr	r3, [r7, #4]
10049e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10049e6c:	0018      	movs	r0, r3
10049e6e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
10049e70:	e00b      	b.n	10049e8a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
10049e72:	687b      	ldr	r3, [r7, #4]
10049e74:	0018      	movs	r0, r3
10049e76:	f000 f819 	bl	10049eac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
10049e7a:	e006      	b.n	10049e8a <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
10049e7c:	687b      	ldr	r3, [r7, #4]
10049e7e:	0018      	movs	r0, r3
10049e80:	f000 f814 	bl	10049eac <I2C_TreatErrorCallback>
  }
}
10049e84:	e002      	b.n	10049e8c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
10049e86:	46c0      	nop			@ (mov r8, r8)
10049e88:	e000      	b.n	10049e8c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
10049e8a:	46c0      	nop			@ (mov r8, r8)
}
10049e8c:	46c0      	nop			@ (mov r8, r8)
10049e8e:	46bd      	mov	sp, r7
10049e90:	b004      	add	sp, #16
10049e92:	bd80      	pop	{r7, pc}
10049e94:	ffff0000 	.word	0xffff0000
10049e98:	10048be9 	.word	0x10048be9
10049e9c:	00008003 	.word	0x00008003
10049ea0:	ffffbfff 	.word	0xffffbfff
10049ea4:	10049f43 	.word	0x10049f43
10049ea8:	ffff7fff 	.word	0xffff7fff

10049eac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
10049eac:	b580      	push	{r7, lr}
10049eae:	b082      	sub	sp, #8
10049eb0:	af00      	add	r7, sp, #0
10049eb2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
10049eb4:	687b      	ldr	r3, [r7, #4]
10049eb6:	2241      	movs	r2, #65	@ 0x41
10049eb8:	5c9b      	ldrb	r3, [r3, r2]
10049eba:	b2db      	uxtb	r3, r3
10049ebc:	2b60      	cmp	r3, #96	@ 0x60
10049ebe:	d10f      	bne.n	10049ee0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
10049ec0:	687b      	ldr	r3, [r7, #4]
10049ec2:	2241      	movs	r2, #65	@ 0x41
10049ec4:	2120      	movs	r1, #32
10049ec6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10049ec8:	687b      	ldr	r3, [r7, #4]
10049eca:	2200      	movs	r2, #0
10049ecc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10049ece:	687b      	ldr	r3, [r7, #4]
10049ed0:	2240      	movs	r2, #64	@ 0x40
10049ed2:	2100      	movs	r1, #0
10049ed4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
10049ed6:	687b      	ldr	r3, [r7, #4]
10049ed8:	0018      	movs	r0, r3
10049eda:	f7fe fd43 	bl	10048964 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
10049ede:	e00a      	b.n	10049ef6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
10049ee0:	687b      	ldr	r3, [r7, #4]
10049ee2:	2200      	movs	r2, #0
10049ee4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10049ee6:	687b      	ldr	r3, [r7, #4]
10049ee8:	2240      	movs	r2, #64	@ 0x40
10049eea:	2100      	movs	r1, #0
10049eec:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
10049eee:	687b      	ldr	r3, [r7, #4]
10049ef0:	0018      	movs	r0, r3
10049ef2:	f7fa fed3 	bl	10044c9c <HAL_I2C_ErrorCallback>
}
10049ef6:	46c0      	nop			@ (mov r8, r8)
10049ef8:	46bd      	mov	sp, r7
10049efa:	b002      	add	sp, #8
10049efc:	bd80      	pop	{r7, pc}

10049efe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
10049efe:	b580      	push	{r7, lr}
10049f00:	b082      	sub	sp, #8
10049f02:	af00      	add	r7, sp, #0
10049f04:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
10049f06:	687b      	ldr	r3, [r7, #4]
10049f08:	681b      	ldr	r3, [r3, #0]
10049f0a:	699b      	ldr	r3, [r3, #24]
10049f0c:	2202      	movs	r2, #2
10049f0e:	4013      	ands	r3, r2
10049f10:	2b02      	cmp	r3, #2
10049f12:	d103      	bne.n	10049f1c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
10049f14:	687b      	ldr	r3, [r7, #4]
10049f16:	681b      	ldr	r3, [r3, #0]
10049f18:	2200      	movs	r2, #0
10049f1a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
10049f1c:	687b      	ldr	r3, [r7, #4]
10049f1e:	681b      	ldr	r3, [r3, #0]
10049f20:	699b      	ldr	r3, [r3, #24]
10049f22:	2201      	movs	r2, #1
10049f24:	4013      	ands	r3, r2
10049f26:	2b01      	cmp	r3, #1
10049f28:	d007      	beq.n	10049f3a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
10049f2a:	687b      	ldr	r3, [r7, #4]
10049f2c:	681b      	ldr	r3, [r3, #0]
10049f2e:	699a      	ldr	r2, [r3, #24]
10049f30:	687b      	ldr	r3, [r7, #4]
10049f32:	681b      	ldr	r3, [r3, #0]
10049f34:	2101      	movs	r1, #1
10049f36:	430a      	orrs	r2, r1
10049f38:	619a      	str	r2, [r3, #24]
  }
}
10049f3a:	46c0      	nop			@ (mov r8, r8)
10049f3c:	46bd      	mov	sp, r7
10049f3e:	b002      	add	sp, #8
10049f40:	bd80      	pop	{r7, pc}

10049f42 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
10049f42:	b580      	push	{r7, lr}
10049f44:	b084      	sub	sp, #16
10049f46:	af00      	add	r7, sp, #0
10049f48:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
10049f4a:	687b      	ldr	r3, [r7, #4]
10049f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049f4e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
10049f50:	68fb      	ldr	r3, [r7, #12]
10049f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049f54:	2b00      	cmp	r3, #0
10049f56:	d003      	beq.n	10049f60 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
10049f58:	68fb      	ldr	r3, [r7, #12]
10049f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049f5c:	2200      	movs	r2, #0
10049f5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
10049f60:	68fb      	ldr	r3, [r7, #12]
10049f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10049f64:	2b00      	cmp	r3, #0
10049f66:	d003      	beq.n	10049f70 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
10049f68:	68fb      	ldr	r3, [r7, #12]
10049f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10049f6c:	2200      	movs	r2, #0
10049f6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
10049f70:	68fb      	ldr	r3, [r7, #12]
10049f72:	0018      	movs	r0, r3
10049f74:	f7ff ff9a 	bl	10049eac <I2C_TreatErrorCallback>
}
10049f78:	46c0      	nop			@ (mov r8, r8)
10049f7a:	46bd      	mov	sp, r7
10049f7c:	b004      	add	sp, #16
10049f7e:	bd80      	pop	{r7, pc}

10049f80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
10049f80:	b590      	push	{r4, r7, lr}
10049f82:	b087      	sub	sp, #28
10049f84:	af00      	add	r7, sp, #0
10049f86:	60f8      	str	r0, [r7, #12]
10049f88:	0008      	movs	r0, r1
10049f8a:	0011      	movs	r1, r2
10049f8c:	607b      	str	r3, [r7, #4]
10049f8e:	240a      	movs	r4, #10
10049f90:	193b      	adds	r3, r7, r4
10049f92:	1c02      	adds	r2, r0, #0
10049f94:	801a      	strh	r2, [r3, #0]
10049f96:	2009      	movs	r0, #9
10049f98:	183b      	adds	r3, r7, r0
10049f9a:	1c0a      	adds	r2, r1, #0
10049f9c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10049f9e:	193b      	adds	r3, r7, r4
10049fa0:	881b      	ldrh	r3, [r3, #0]
10049fa2:	059b      	lsls	r3, r3, #22
10049fa4:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
10049fa6:	183b      	adds	r3, r7, r0
10049fa8:	781b      	ldrb	r3, [r3, #0]
10049faa:	0419      	lsls	r1, r3, #16
10049fac:	23ff      	movs	r3, #255	@ 0xff
10049fae:	041b      	lsls	r3, r3, #16
10049fb0:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10049fb2:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
10049fb4:	687b      	ldr	r3, [r7, #4]
10049fb6:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10049fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10049fba:	4313      	orrs	r3, r2
10049fbc:	005b      	lsls	r3, r3, #1
10049fbe:	085b      	lsrs	r3, r3, #1
10049fc0:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
10049fc2:	68fb      	ldr	r3, [r7, #12]
10049fc4:	681b      	ldr	r3, [r3, #0]
10049fc6:	685b      	ldr	r3, [r3, #4]
10049fc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10049fca:	0d51      	lsrs	r1, r2, #21
10049fcc:	2280      	movs	r2, #128	@ 0x80
10049fce:	00d2      	lsls	r2, r2, #3
10049fd0:	400a      	ands	r2, r1
10049fd2:	4907      	ldr	r1, [pc, #28]	@ (10049ff0 <I2C_TransferConfig+0x70>)
10049fd4:	430a      	orrs	r2, r1
10049fd6:	43d2      	mvns	r2, r2
10049fd8:	401a      	ands	r2, r3
10049fda:	0011      	movs	r1, r2
10049fdc:	68fb      	ldr	r3, [r7, #12]
10049fde:	681b      	ldr	r3, [r3, #0]
10049fe0:	697a      	ldr	r2, [r7, #20]
10049fe2:	430a      	orrs	r2, r1
10049fe4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
10049fe6:	46c0      	nop			@ (mov r8, r8)
10049fe8:	46bd      	mov	sp, r7
10049fea:	b007      	add	sp, #28
10049fec:	bd90      	pop	{r4, r7, pc}
10049fee:	46c0      	nop			@ (mov r8, r8)
10049ff0:	03ff63ff 	.word	0x03ff63ff

10049ff4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
10049ff4:	b580      	push	{r7, lr}
10049ff6:	b084      	sub	sp, #16
10049ff8:	af00      	add	r7, sp, #0
10049ffa:	6078      	str	r0, [r7, #4]
10049ffc:	000a      	movs	r2, r1
10049ffe:	1cbb      	adds	r3, r7, #2
1004a000:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
1004a002:	2300      	movs	r3, #0
1004a004:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
1004a006:	687b      	ldr	r3, [r7, #4]
1004a008:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1004a00a:	4b3c      	ldr	r3, [pc, #240]	@ (1004a0fc <I2C_Enable_IRQ+0x108>)
1004a00c:	429a      	cmp	r2, r3
1004a00e:	d035      	beq.n	1004a07c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
1004a010:	687b      	ldr	r3, [r7, #4]
1004a012:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
1004a014:	4b3a      	ldr	r3, [pc, #232]	@ (1004a100 <I2C_Enable_IRQ+0x10c>)
1004a016:	429a      	cmp	r2, r3
1004a018:	d030      	beq.n	1004a07c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
1004a01a:	687b      	ldr	r3, [r7, #4]
1004a01c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
1004a01e:	4b39      	ldr	r3, [pc, #228]	@ (1004a104 <I2C_Enable_IRQ+0x110>)
1004a020:	429a      	cmp	r2, r3
1004a022:	d02b      	beq.n	1004a07c <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
1004a024:	1cbb      	adds	r3, r7, #2
1004a026:	2200      	movs	r2, #0
1004a028:	5e9b      	ldrsh	r3, [r3, r2]
1004a02a:	2b00      	cmp	r3, #0
1004a02c:	da03      	bge.n	1004a036 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
1004a02e:	68fb      	ldr	r3, [r7, #12]
1004a030:	22b8      	movs	r2, #184	@ 0xb8
1004a032:	4313      	orrs	r3, r2
1004a034:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
1004a036:	1cbb      	adds	r3, r7, #2
1004a038:	881b      	ldrh	r3, [r3, #0]
1004a03a:	2201      	movs	r2, #1
1004a03c:	4013      	ands	r3, r2
1004a03e:	d003      	beq.n	1004a048 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
1004a040:	68fb      	ldr	r3, [r7, #12]
1004a042:	22f2      	movs	r2, #242	@ 0xf2
1004a044:	4313      	orrs	r3, r2
1004a046:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
1004a048:	1cbb      	adds	r3, r7, #2
1004a04a:	881b      	ldrh	r3, [r3, #0]
1004a04c:	2202      	movs	r2, #2
1004a04e:	4013      	ands	r3, r2
1004a050:	d003      	beq.n	1004a05a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
1004a052:	68fb      	ldr	r3, [r7, #12]
1004a054:	22f4      	movs	r2, #244	@ 0xf4
1004a056:	4313      	orrs	r3, r2
1004a058:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
1004a05a:	1cbb      	adds	r3, r7, #2
1004a05c:	881b      	ldrh	r3, [r3, #0]
1004a05e:	2b10      	cmp	r3, #16
1004a060:	d103      	bne.n	1004a06a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
1004a062:	68fb      	ldr	r3, [r7, #12]
1004a064:	2290      	movs	r2, #144	@ 0x90
1004a066:	4313      	orrs	r3, r2
1004a068:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
1004a06a:	1cbb      	adds	r3, r7, #2
1004a06c:	881b      	ldrh	r3, [r3, #0]
1004a06e:	2b20      	cmp	r3, #32
1004a070:	d137      	bne.n	1004a0e2 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
1004a072:	68fb      	ldr	r3, [r7, #12]
1004a074:	2220      	movs	r2, #32
1004a076:	4313      	orrs	r3, r2
1004a078:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
1004a07a:	e032      	b.n	1004a0e2 <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
1004a07c:	1cbb      	adds	r3, r7, #2
1004a07e:	2200      	movs	r2, #0
1004a080:	5e9b      	ldrsh	r3, [r3, r2]
1004a082:	2b00      	cmp	r3, #0
1004a084:	da03      	bge.n	1004a08e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
1004a086:	68fb      	ldr	r3, [r7, #12]
1004a088:	22b8      	movs	r2, #184	@ 0xb8
1004a08a:	4313      	orrs	r3, r2
1004a08c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
1004a08e:	1cbb      	adds	r3, r7, #2
1004a090:	881b      	ldrh	r3, [r3, #0]
1004a092:	2201      	movs	r2, #1
1004a094:	4013      	ands	r3, r2
1004a096:	d003      	beq.n	1004a0a0 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
1004a098:	68fb      	ldr	r3, [r7, #12]
1004a09a:	22f2      	movs	r2, #242	@ 0xf2
1004a09c:	4313      	orrs	r3, r2
1004a09e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
1004a0a0:	1cbb      	adds	r3, r7, #2
1004a0a2:	881b      	ldrh	r3, [r3, #0]
1004a0a4:	2202      	movs	r2, #2
1004a0a6:	4013      	ands	r3, r2
1004a0a8:	d003      	beq.n	1004a0b2 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
1004a0aa:	68fb      	ldr	r3, [r7, #12]
1004a0ac:	22f4      	movs	r2, #244	@ 0xf4
1004a0ae:	4313      	orrs	r3, r2
1004a0b0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
1004a0b2:	1cbb      	adds	r3, r7, #2
1004a0b4:	881b      	ldrh	r3, [r3, #0]
1004a0b6:	2b10      	cmp	r3, #16
1004a0b8:	d103      	bne.n	1004a0c2 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
1004a0ba:	68fb      	ldr	r3, [r7, #12]
1004a0bc:	2290      	movs	r2, #144	@ 0x90
1004a0be:	4313      	orrs	r3, r2
1004a0c0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
1004a0c2:	1cbb      	adds	r3, r7, #2
1004a0c4:	881b      	ldrh	r3, [r3, #0]
1004a0c6:	2b20      	cmp	r3, #32
1004a0c8:	d103      	bne.n	1004a0d2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
1004a0ca:	68fb      	ldr	r3, [r7, #12]
1004a0cc:	2260      	movs	r2, #96	@ 0x60
1004a0ce:	4313      	orrs	r3, r2
1004a0d0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
1004a0d2:	1cbb      	adds	r3, r7, #2
1004a0d4:	881b      	ldrh	r3, [r3, #0]
1004a0d6:	2b40      	cmp	r3, #64	@ 0x40
1004a0d8:	d103      	bne.n	1004a0e2 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
1004a0da:	68fb      	ldr	r3, [r7, #12]
1004a0dc:	2240      	movs	r2, #64	@ 0x40
1004a0de:	4313      	orrs	r3, r2
1004a0e0:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
1004a0e2:	687b      	ldr	r3, [r7, #4]
1004a0e4:	681b      	ldr	r3, [r3, #0]
1004a0e6:	6819      	ldr	r1, [r3, #0]
1004a0e8:	687b      	ldr	r3, [r7, #4]
1004a0ea:	681b      	ldr	r3, [r3, #0]
1004a0ec:	68fa      	ldr	r2, [r7, #12]
1004a0ee:	430a      	orrs	r2, r1
1004a0f0:	601a      	str	r2, [r3, #0]
}
1004a0f2:	46c0      	nop			@ (mov r8, r8)
1004a0f4:	46bd      	mov	sp, r7
1004a0f6:	b004      	add	sp, #16
1004a0f8:	bd80      	pop	{r7, pc}
1004a0fa:	46c0      	nop			@ (mov r8, r8)
1004a0fc:	10048e11 	.word	0x10048e11
1004a100:	100492a9 	.word	0x100492a9
1004a104:	10049029 	.word	0x10049029

1004a108 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
1004a108:	b580      	push	{r7, lr}
1004a10a:	b084      	sub	sp, #16
1004a10c:	af00      	add	r7, sp, #0
1004a10e:	6078      	str	r0, [r7, #4]
1004a110:	000a      	movs	r2, r1
1004a112:	1cbb      	adds	r3, r7, #2
1004a114:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
1004a116:	2300      	movs	r3, #0
1004a118:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
1004a11a:	1cbb      	adds	r3, r7, #2
1004a11c:	881b      	ldrh	r3, [r3, #0]
1004a11e:	2201      	movs	r2, #1
1004a120:	4013      	ands	r3, r2
1004a122:	d010      	beq.n	1004a146 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
1004a124:	68fb      	ldr	r3, [r7, #12]
1004a126:	2242      	movs	r2, #66	@ 0x42
1004a128:	4313      	orrs	r3, r2
1004a12a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
1004a12c:	687b      	ldr	r3, [r7, #4]
1004a12e:	2241      	movs	r2, #65	@ 0x41
1004a130:	5c9b      	ldrb	r3, [r3, r2]
1004a132:	b2db      	uxtb	r3, r3
1004a134:	001a      	movs	r2, r3
1004a136:	2328      	movs	r3, #40	@ 0x28
1004a138:	4013      	ands	r3, r2
1004a13a:	2b28      	cmp	r3, #40	@ 0x28
1004a13c:	d003      	beq.n	1004a146 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
1004a13e:	68fb      	ldr	r3, [r7, #12]
1004a140:	22b0      	movs	r2, #176	@ 0xb0
1004a142:	4313      	orrs	r3, r2
1004a144:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
1004a146:	1cbb      	adds	r3, r7, #2
1004a148:	881b      	ldrh	r3, [r3, #0]
1004a14a:	2202      	movs	r2, #2
1004a14c:	4013      	ands	r3, r2
1004a14e:	d010      	beq.n	1004a172 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
1004a150:	68fb      	ldr	r3, [r7, #12]
1004a152:	2244      	movs	r2, #68	@ 0x44
1004a154:	4313      	orrs	r3, r2
1004a156:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
1004a158:	687b      	ldr	r3, [r7, #4]
1004a15a:	2241      	movs	r2, #65	@ 0x41
1004a15c:	5c9b      	ldrb	r3, [r3, r2]
1004a15e:	b2db      	uxtb	r3, r3
1004a160:	001a      	movs	r2, r3
1004a162:	2328      	movs	r3, #40	@ 0x28
1004a164:	4013      	ands	r3, r2
1004a166:	2b28      	cmp	r3, #40	@ 0x28
1004a168:	d003      	beq.n	1004a172 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
1004a16a:	68fb      	ldr	r3, [r7, #12]
1004a16c:	22b0      	movs	r2, #176	@ 0xb0
1004a16e:	4313      	orrs	r3, r2
1004a170:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
1004a172:	1cbb      	adds	r3, r7, #2
1004a174:	2200      	movs	r2, #0
1004a176:	5e9b      	ldrsh	r3, [r3, r2]
1004a178:	2b00      	cmp	r3, #0
1004a17a:	da03      	bge.n	1004a184 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
1004a17c:	68fb      	ldr	r3, [r7, #12]
1004a17e:	22b8      	movs	r2, #184	@ 0xb8
1004a180:	4313      	orrs	r3, r2
1004a182:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
1004a184:	1cbb      	adds	r3, r7, #2
1004a186:	881b      	ldrh	r3, [r3, #0]
1004a188:	2b10      	cmp	r3, #16
1004a18a:	d103      	bne.n	1004a194 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
1004a18c:	68fb      	ldr	r3, [r7, #12]
1004a18e:	2290      	movs	r2, #144	@ 0x90
1004a190:	4313      	orrs	r3, r2
1004a192:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
1004a194:	1cbb      	adds	r3, r7, #2
1004a196:	881b      	ldrh	r3, [r3, #0]
1004a198:	2b20      	cmp	r3, #32
1004a19a:	d103      	bne.n	1004a1a4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
1004a19c:	68fb      	ldr	r3, [r7, #12]
1004a19e:	2220      	movs	r2, #32
1004a1a0:	4313      	orrs	r3, r2
1004a1a2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
1004a1a4:	1cbb      	adds	r3, r7, #2
1004a1a6:	881b      	ldrh	r3, [r3, #0]
1004a1a8:	2b40      	cmp	r3, #64	@ 0x40
1004a1aa:	d103      	bne.n	1004a1b4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
1004a1ac:	68fb      	ldr	r3, [r7, #12]
1004a1ae:	2240      	movs	r2, #64	@ 0x40
1004a1b0:	4313      	orrs	r3, r2
1004a1b2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
1004a1b4:	687b      	ldr	r3, [r7, #4]
1004a1b6:	681b      	ldr	r3, [r3, #0]
1004a1b8:	681a      	ldr	r2, [r3, #0]
1004a1ba:	68fb      	ldr	r3, [r7, #12]
1004a1bc:	43d9      	mvns	r1, r3
1004a1be:	687b      	ldr	r3, [r7, #4]
1004a1c0:	681b      	ldr	r3, [r3, #0]
1004a1c2:	400a      	ands	r2, r1
1004a1c4:	601a      	str	r2, [r3, #0]
}
1004a1c6:	46c0      	nop			@ (mov r8, r8)
1004a1c8:	46bd      	mov	sp, r7
1004a1ca:	b004      	add	sp, #16
1004a1cc:	bd80      	pop	{r7, pc}
	...

1004a1d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
1004a1d0:	b580      	push	{r7, lr}
1004a1d2:	b082      	sub	sp, #8
1004a1d4:	af00      	add	r7, sp, #0
1004a1d6:	6078      	str	r0, [r7, #4]
1004a1d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
1004a1da:	687b      	ldr	r3, [r7, #4]
1004a1dc:	2241      	movs	r2, #65	@ 0x41
1004a1de:	5c9b      	ldrb	r3, [r3, r2]
1004a1e0:	b2db      	uxtb	r3, r3
1004a1e2:	2b20      	cmp	r3, #32
1004a1e4:	d138      	bne.n	1004a258 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
1004a1e6:	687b      	ldr	r3, [r7, #4]
1004a1e8:	2240      	movs	r2, #64	@ 0x40
1004a1ea:	5c9b      	ldrb	r3, [r3, r2]
1004a1ec:	2b01      	cmp	r3, #1
1004a1ee:	d101      	bne.n	1004a1f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
1004a1f0:	2302      	movs	r3, #2
1004a1f2:	e032      	b.n	1004a25a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
1004a1f4:	687b      	ldr	r3, [r7, #4]
1004a1f6:	2240      	movs	r2, #64	@ 0x40
1004a1f8:	2101      	movs	r1, #1
1004a1fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
1004a1fc:	687b      	ldr	r3, [r7, #4]
1004a1fe:	2241      	movs	r2, #65	@ 0x41
1004a200:	2124      	movs	r1, #36	@ 0x24
1004a202:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
1004a204:	687b      	ldr	r3, [r7, #4]
1004a206:	681b      	ldr	r3, [r3, #0]
1004a208:	681a      	ldr	r2, [r3, #0]
1004a20a:	687b      	ldr	r3, [r7, #4]
1004a20c:	681b      	ldr	r3, [r3, #0]
1004a20e:	2101      	movs	r1, #1
1004a210:	438a      	bics	r2, r1
1004a212:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
1004a214:	687b      	ldr	r3, [r7, #4]
1004a216:	681b      	ldr	r3, [r3, #0]
1004a218:	681a      	ldr	r2, [r3, #0]
1004a21a:	687b      	ldr	r3, [r7, #4]
1004a21c:	681b      	ldr	r3, [r3, #0]
1004a21e:	4911      	ldr	r1, [pc, #68]	@ (1004a264 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
1004a220:	400a      	ands	r2, r1
1004a222:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
1004a224:	687b      	ldr	r3, [r7, #4]
1004a226:	681b      	ldr	r3, [r3, #0]
1004a228:	6819      	ldr	r1, [r3, #0]
1004a22a:	687b      	ldr	r3, [r7, #4]
1004a22c:	681b      	ldr	r3, [r3, #0]
1004a22e:	683a      	ldr	r2, [r7, #0]
1004a230:	430a      	orrs	r2, r1
1004a232:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
1004a234:	687b      	ldr	r3, [r7, #4]
1004a236:	681b      	ldr	r3, [r3, #0]
1004a238:	681a      	ldr	r2, [r3, #0]
1004a23a:	687b      	ldr	r3, [r7, #4]
1004a23c:	681b      	ldr	r3, [r3, #0]
1004a23e:	2101      	movs	r1, #1
1004a240:	430a      	orrs	r2, r1
1004a242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
1004a244:	687b      	ldr	r3, [r7, #4]
1004a246:	2241      	movs	r2, #65	@ 0x41
1004a248:	2120      	movs	r1, #32
1004a24a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1004a24c:	687b      	ldr	r3, [r7, #4]
1004a24e:	2240      	movs	r2, #64	@ 0x40
1004a250:	2100      	movs	r1, #0
1004a252:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
1004a254:	2300      	movs	r3, #0
1004a256:	e000      	b.n	1004a25a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
1004a258:	2302      	movs	r3, #2
  }
}
1004a25a:	0018      	movs	r0, r3
1004a25c:	46bd      	mov	sp, r7
1004a25e:	b002      	add	sp, #8
1004a260:	bd80      	pop	{r7, pc}
1004a262:	46c0      	nop			@ (mov r8, r8)
1004a264:	ffffefff 	.word	0xffffefff

1004a268 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
1004a268:	b580      	push	{r7, lr}
1004a26a:	b084      	sub	sp, #16
1004a26c:	af00      	add	r7, sp, #0
1004a26e:	6078      	str	r0, [r7, #4]
1004a270:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
1004a272:	687b      	ldr	r3, [r7, #4]
1004a274:	2241      	movs	r2, #65	@ 0x41
1004a276:	5c9b      	ldrb	r3, [r3, r2]
1004a278:	b2db      	uxtb	r3, r3
1004a27a:	2b20      	cmp	r3, #32
1004a27c:	d139      	bne.n	1004a2f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
1004a27e:	687b      	ldr	r3, [r7, #4]
1004a280:	2240      	movs	r2, #64	@ 0x40
1004a282:	5c9b      	ldrb	r3, [r3, r2]
1004a284:	2b01      	cmp	r3, #1
1004a286:	d101      	bne.n	1004a28c <HAL_I2CEx_ConfigDigitalFilter+0x24>
1004a288:	2302      	movs	r3, #2
1004a28a:	e033      	b.n	1004a2f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
1004a28c:	687b      	ldr	r3, [r7, #4]
1004a28e:	2240      	movs	r2, #64	@ 0x40
1004a290:	2101      	movs	r1, #1
1004a292:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
1004a294:	687b      	ldr	r3, [r7, #4]
1004a296:	2241      	movs	r2, #65	@ 0x41
1004a298:	2124      	movs	r1, #36	@ 0x24
1004a29a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
1004a29c:	687b      	ldr	r3, [r7, #4]
1004a29e:	681b      	ldr	r3, [r3, #0]
1004a2a0:	681a      	ldr	r2, [r3, #0]
1004a2a2:	687b      	ldr	r3, [r7, #4]
1004a2a4:	681b      	ldr	r3, [r3, #0]
1004a2a6:	2101      	movs	r1, #1
1004a2a8:	438a      	bics	r2, r1
1004a2aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
1004a2ac:	687b      	ldr	r3, [r7, #4]
1004a2ae:	681b      	ldr	r3, [r3, #0]
1004a2b0:	681b      	ldr	r3, [r3, #0]
1004a2b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
1004a2b4:	68fb      	ldr	r3, [r7, #12]
1004a2b6:	4a11      	ldr	r2, [pc, #68]	@ (1004a2fc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
1004a2b8:	4013      	ands	r3, r2
1004a2ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
1004a2bc:	683b      	ldr	r3, [r7, #0]
1004a2be:	021b      	lsls	r3, r3, #8
1004a2c0:	68fa      	ldr	r2, [r7, #12]
1004a2c2:	4313      	orrs	r3, r2
1004a2c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
1004a2c6:	687b      	ldr	r3, [r7, #4]
1004a2c8:	681b      	ldr	r3, [r3, #0]
1004a2ca:	68fa      	ldr	r2, [r7, #12]
1004a2cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
1004a2ce:	687b      	ldr	r3, [r7, #4]
1004a2d0:	681b      	ldr	r3, [r3, #0]
1004a2d2:	681a      	ldr	r2, [r3, #0]
1004a2d4:	687b      	ldr	r3, [r7, #4]
1004a2d6:	681b      	ldr	r3, [r3, #0]
1004a2d8:	2101      	movs	r1, #1
1004a2da:	430a      	orrs	r2, r1
1004a2dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
1004a2de:	687b      	ldr	r3, [r7, #4]
1004a2e0:	2241      	movs	r2, #65	@ 0x41
1004a2e2:	2120      	movs	r1, #32
1004a2e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1004a2e6:	687b      	ldr	r3, [r7, #4]
1004a2e8:	2240      	movs	r2, #64	@ 0x40
1004a2ea:	2100      	movs	r1, #0
1004a2ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
1004a2ee:	2300      	movs	r3, #0
1004a2f0:	e000      	b.n	1004a2f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
1004a2f2:	2302      	movs	r3, #2
  }
}
1004a2f4:	0018      	movs	r0, r3
1004a2f6:	46bd      	mov	sp, r7
1004a2f8:	b004      	add	sp, #16
1004a2fa:	bd80      	pop	{r7, pc}
1004a2fc:	fffff0ff 	.word	0xfffff0ff

1004a300 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
1004a300:	b580      	push	{r7, lr}
1004a302:	b084      	sub	sp, #16
1004a304:	af00      	add	r7, sp, #0
1004a306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
1004a308:	230f      	movs	r3, #15
1004a30a:	18fb      	adds	r3, r7, r3
1004a30c:	2200      	movs	r2, #0
1004a30e:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB05)|| defined(STM32WB09)
  uint32_t tickstart;
#endif /* STM32WB05 || STM32WB09 */
  /* Check the PKA handle allocation */
  if (hpka != NULL)
1004a310:	687b      	ldr	r3, [r7, #4]
1004a312:	2b00      	cmp	r3, #0
1004a314:	d045      	beq.n	1004a3a2 <HAL_PKA_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
1004a316:	687b      	ldr	r3, [r7, #4]
1004a318:	791b      	ldrb	r3, [r3, #4]
1004a31a:	b2db      	uxtb	r3, r3
1004a31c:	2b00      	cmp	r3, #0
1004a31e:	d103      	bne.n	1004a328 <HAL_PKA_Init+0x28>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
1004a320:	687b      	ldr	r3, [r7, #4]
1004a322:	0018      	movs	r0, r3
1004a324:	f7fc fe0c 	bl	10046f40 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }
#if defined (STM32WB05)|| defined(STM32WB09)
    /* Get current tick */
    tickstart = HAL_GetTick();
1004a328:	f7fd fab2 	bl	10047890 <HAL_GetTick>
1004a32c:	0003      	movs	r3, r0
1004a32e:	60bb      	str	r3, [r7, #8]
#endif /* STM32WB05 || STM32WB09 */
    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
1004a330:	687b      	ldr	r3, [r7, #4]
1004a332:	2202      	movs	r2, #2
1004a334:	711a      	strb	r2, [r3, #4]
    SET_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
    CLEAR_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
#endif /* STM32WB06 || STM32WB07 */
#if defined (STM32WB05)|| defined(STM32WB09)

    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
1004a336:	e011      	b.n	1004a35c <HAL_PKA_Init+0x5c>
    {
      hpka->Instance->CR = PKA_CR_EN;
1004a338:	687b      	ldr	r3, [r7, #4]
1004a33a:	681b      	ldr	r3, [r3, #0]
1004a33c:	2201      	movs	r2, #1
1004a33e:	601a      	str	r2, [r3, #0]

      /* Check the Timeout */
      if ((HAL_GetTick() - tickstart) > PKA_RAM_ERASE_TIMEOUT)
1004a340:	f7fd faa6 	bl	10047890 <HAL_GetTick>
1004a344:	0002      	movs	r2, r0
1004a346:	68bb      	ldr	r3, [r7, #8]
1004a348:	1ad2      	subs	r2, r2, r3
1004a34a:	23fa      	movs	r3, #250	@ 0xfa
1004a34c:	009b      	lsls	r3, r3, #2
1004a34e:	429a      	cmp	r2, r3
1004a350:	d904      	bls.n	1004a35c <HAL_PKA_Init+0x5c>
      {
        /* Set timeout status */
        err = HAL_TIMEOUT;
1004a352:	230f      	movs	r3, #15
1004a354:	18fb      	adds	r3, r7, r3
1004a356:	2203      	movs	r2, #3
1004a358:	701a      	strb	r2, [r3, #0]
        break;
1004a35a:	e006      	b.n	1004a36a <HAL_PKA_Init+0x6a>
    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
1004a35c:	687b      	ldr	r3, [r7, #4]
1004a35e:	681b      	ldr	r3, [r3, #0]
1004a360:	681b      	ldr	r3, [r3, #0]
1004a362:	2201      	movs	r2, #1
1004a364:	4013      	ands	r3, r2
1004a366:	2b01      	cmp	r3, #1
1004a368:	d1e6      	bne.n	1004a338 <HAL_PKA_Init+0x38>
      }
    }
    if (err == HAL_OK)
1004a36a:	230f      	movs	r3, #15
1004a36c:	18fb      	adds	r3, r7, r3
1004a36e:	781b      	ldrb	r3, [r3, #0]
1004a370:	2b00      	cmp	r3, #0
1004a372:	d10f      	bne.n	1004a394 <HAL_PKA_Init+0x94>
    {
      /* Reset any pending flag */
      SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
1004a374:	687b      	ldr	r3, [r7, #4]
1004a376:	681b      	ldr	r3, [r3, #0]
1004a378:	689a      	ldr	r2, [r3, #8]
1004a37a:	687b      	ldr	r3, [r7, #4]
1004a37c:	681b      	ldr	r3, [r3, #0]
1004a37e:	21d0      	movs	r1, #208	@ 0xd0
1004a380:	0349      	lsls	r1, r1, #13
1004a382:	430a      	orrs	r2, r1
1004a384:	609a      	str	r2, [r3, #8]

      /* Initialize the error code */
      hpka->ErrorCode = HAL_PKA_ERROR_NONE;
1004a386:	687b      	ldr	r3, [r7, #4]
1004a388:	2200      	movs	r2, #0
1004a38a:	609a      	str	r2, [r3, #8]

      /* Set the state to ready */
      hpka->State = HAL_PKA_STATE_READY;
1004a38c:	687b      	ldr	r3, [r7, #4]
1004a38e:	2201      	movs	r2, #1
1004a390:	711a      	strb	r2, [r3, #4]
1004a392:	e00a      	b.n	1004a3aa <HAL_PKA_Init+0xaa>
    }
    else
    {
      /* Set the error code to timeout error */
      hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
1004a394:	687b      	ldr	r3, [r7, #4]
1004a396:	2204      	movs	r2, #4
1004a398:	609a      	str	r2, [r3, #8]

      /* Set the state to error */
      hpka->State = HAL_PKA_STATE_ERROR;
1004a39a:	687b      	ldr	r3, [r7, #4]
1004a39c:	2203      	movs	r2, #3
1004a39e:	711a      	strb	r2, [r3, #4]
1004a3a0:	e003      	b.n	1004a3aa <HAL_PKA_Init+0xaa>
#endif /* STM32WB06 || STM32WB07 */

  }
  else
  {
    err = HAL_ERROR;
1004a3a2:	230f      	movs	r3, #15
1004a3a4:	18fb      	adds	r3, r7, r3
1004a3a6:	2201      	movs	r2, #1
1004a3a8:	701a      	strb	r2, [r3, #0]
  }

  return err;
1004a3aa:	230f      	movs	r3, #15
1004a3ac:	18fb      	adds	r3, r7, r3
1004a3ae:	781b      	ldrb	r3, [r3, #0]
}
1004a3b0:	0018      	movs	r0, r3
1004a3b2:	46bd      	mov	sp, r7
1004a3b4:	b004      	add	sp, #16
1004a3b6:	bd80      	pop	{r7, pc}

1004a3b8 <HAL_PWREx_DisableGPIOPullUp>:
  *         or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
1004a3b8:	b580      	push	{r7, lr}
1004a3ba:	b084      	sub	sp, #16
1004a3bc:	af00      	add	r7, sp, #0
1004a3be:	6078      	str	r0, [r7, #4]
1004a3c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004a3c2:	230f      	movs	r3, #15
1004a3c4:	18fb      	adds	r3, r7, r3
1004a3c6:	2200      	movs	r2, #0
1004a3c8:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
1004a3ca:	687b      	ldr	r3, [r7, #4]
1004a3cc:	2b00      	cmp	r3, #0
1004a3ce:	d003      	beq.n	1004a3d8 <HAL_PWREx_DisableGPIOPullUp+0x20>
1004a3d0:	687b      	ldr	r3, [r7, #4]
1004a3d2:	2b01      	cmp	r3, #1
1004a3d4:	d008      	beq.n	1004a3e8 <HAL_PWREx_DisableGPIOPullUp+0x30>
1004a3d6:	e00f      	b.n	1004a3f8 <HAL_PWREx_DisableGPIOPullUp+0x40>
  {
    case PWR_GPIO_A:
      CLEAR_BIT(PWR->PUCRA, GPIONumber);
1004a3d8:	4b0d      	ldr	r3, [pc, #52]	@ (1004a410 <HAL_PWREx_DisableGPIOPullUp+0x58>)
1004a3da:	6a1a      	ldr	r2, [r3, #32]
1004a3dc:	683b      	ldr	r3, [r7, #0]
1004a3de:	43d9      	mvns	r1, r3
1004a3e0:	4b0b      	ldr	r3, [pc, #44]	@ (1004a410 <HAL_PWREx_DisableGPIOPullUp+0x58>)
1004a3e2:	400a      	ands	r2, r1
1004a3e4:	621a      	str	r2, [r3, #32]
      break;
1004a3e6:	e00c      	b.n	1004a402 <HAL_PWREx_DisableGPIOPullUp+0x4a>
    case PWR_GPIO_B:
      CLEAR_BIT(PWR->PUCRB, GPIONumber);
1004a3e8:	4b09      	ldr	r3, [pc, #36]	@ (1004a410 <HAL_PWREx_DisableGPIOPullUp+0x58>)
1004a3ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004a3ec:	683b      	ldr	r3, [r7, #0]
1004a3ee:	43d9      	mvns	r1, r3
1004a3f0:	4b07      	ldr	r3, [pc, #28]	@ (1004a410 <HAL_PWREx_DisableGPIOPullUp+0x58>)
1004a3f2:	400a      	ands	r2, r1
1004a3f4:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
1004a3f6:	e004      	b.n	1004a402 <HAL_PWREx_DisableGPIOPullUp+0x4a>
    default:
      status = HAL_ERROR;
1004a3f8:	230f      	movs	r3, #15
1004a3fa:	18fb      	adds	r3, r7, r3
1004a3fc:	2201      	movs	r2, #1
1004a3fe:	701a      	strb	r2, [r3, #0]
      break;
1004a400:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
1004a402:	230f      	movs	r3, #15
1004a404:	18fb      	adds	r3, r7, r3
1004a406:	781b      	ldrb	r3, [r3, #0]
}
1004a408:	0018      	movs	r0, r3
1004a40a:	46bd      	mov	sp, r7
1004a40c:	b004      	add	sp, #16
1004a40e:	bd80      	pop	{r7, pc}
1004a410:	48500000 	.word	0x48500000

1004a414 <HAL_PWREx_DisableGPIOPullDown>:
  *         or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
1004a414:	b580      	push	{r7, lr}
1004a416:	b084      	sub	sp, #16
1004a418:	af00      	add	r7, sp, #0
1004a41a:	6078      	str	r0, [r7, #4]
1004a41c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004a41e:	230f      	movs	r3, #15
1004a420:	18fb      	adds	r3, r7, r3
1004a422:	2200      	movs	r2, #0
1004a424:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
1004a426:	687b      	ldr	r3, [r7, #4]
1004a428:	2b00      	cmp	r3, #0
1004a42a:	d003      	beq.n	1004a434 <HAL_PWREx_DisableGPIOPullDown+0x20>
1004a42c:	687b      	ldr	r3, [r7, #4]
1004a42e:	2b01      	cmp	r3, #1
1004a430:	d008      	beq.n	1004a444 <HAL_PWREx_DisableGPIOPullDown+0x30>
1004a432:	e00f      	b.n	1004a454 <HAL_PWREx_DisableGPIOPullDown+0x40>
  {
    case PWR_GPIO_A:
      CLEAR_BIT(PWR->PDCRA, GPIONumber);
1004a434:	4b0d      	ldr	r3, [pc, #52]	@ (1004a46c <HAL_PWREx_DisableGPIOPullDown+0x58>)
1004a436:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004a438:	683b      	ldr	r3, [r7, #0]
1004a43a:	43d9      	mvns	r1, r3
1004a43c:	4b0b      	ldr	r3, [pc, #44]	@ (1004a46c <HAL_PWREx_DisableGPIOPullDown+0x58>)
1004a43e:	400a      	ands	r2, r1
1004a440:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
1004a442:	e00c      	b.n	1004a45e <HAL_PWREx_DisableGPIOPullDown+0x4a>
    case PWR_GPIO_B:
      CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004a444:	4b09      	ldr	r3, [pc, #36]	@ (1004a46c <HAL_PWREx_DisableGPIOPullDown+0x58>)
1004a446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004a448:	683b      	ldr	r3, [r7, #0]
1004a44a:	43d9      	mvns	r1, r3
1004a44c:	4b07      	ldr	r3, [pc, #28]	@ (1004a46c <HAL_PWREx_DisableGPIOPullDown+0x58>)
1004a44e:	400a      	ands	r2, r1
1004a450:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
1004a452:	e004      	b.n	1004a45e <HAL_PWREx_DisableGPIOPullDown+0x4a>
    default:
      status = HAL_ERROR;
1004a454:	230f      	movs	r3, #15
1004a456:	18fb      	adds	r3, r7, r3
1004a458:	2201      	movs	r2, #1
1004a45a:	701a      	strb	r2, [r3, #0]
      break;
1004a45c:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
1004a45e:	230f      	movs	r3, #15
1004a460:	18fb      	adds	r3, r7, r3
1004a462:	781b      	ldrb	r3, [r3, #0]
}
1004a464:	0018      	movs	r0, r3
1004a466:	46bd      	mov	sp, r7
1004a468:	b004      	add	sp, #16
1004a46a:	bd80      	pop	{r7, pc}
1004a46c:	48500000 	.word	0x48500000

1004a470 <LL_RADIO_SetRadioConfigurationAddressPointer>:
  * @rmtoll WORD0          RADIOCONFIGPTR       LL_RADIO_SetRadioConfigurationAddressPointer
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRadioConfigurationAddressPointer(uint32_t value)
{
1004a470:	b580      	push	{r7, lr}
1004a472:	b082      	sub	sp, #8
1004a474:	af00      	add	r7, sp, #0
1004a476:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD0, GLOBAL_WORD0_RADIOCONFIGPTR, value);
1004a478:	4b04      	ldr	r3, [pc, #16]	@ (1004a48c <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
1004a47a:	681b      	ldr	r3, [r3, #0]
1004a47c:	4b03      	ldr	r3, [pc, #12]	@ (1004a48c <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
1004a47e:	687a      	ldr	r2, [r7, #4]
1004a480:	601a      	str	r2, [r3, #0]
}
1004a482:	46c0      	nop			@ (mov r8, r8)
1004a484:	46bd      	mov	sp, r7
1004a486:	b002      	add	sp, #8
1004a488:	bd80      	pop	{r7, pc}
1004a48a:	46c0      	nop			@ (mov r8, r8)
1004a48c:	200000c0 	.word	0x200000c0

1004a490 <LL_RADIO_SetWakeupInitDelay>:
  * @rmtoll WORD1          WAKEUPINITDELAY       LL_RADIO_SetWakeupInitDelay
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetWakeupInitDelay(uint32_t value)
{
1004a490:	b580      	push	{r7, lr}
1004a492:	b082      	sub	sp, #8
1004a494:	af00      	add	r7, sp, #0
1004a496:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_WAKEUPINITDELAY, value);
1004a498:	4b07      	ldr	r3, [pc, #28]	@ (1004a4b8 <LL_RADIO_SetWakeupInitDelay+0x28>)
1004a49a:	685b      	ldr	r3, [r3, #4]
1004a49c:	4a07      	ldr	r2, [pc, #28]	@ (1004a4bc <LL_RADIO_SetWakeupInitDelay+0x2c>)
1004a49e:	4013      	ands	r3, r2
1004a4a0:	0019      	movs	r1, r3
1004a4a2:	687b      	ldr	r3, [r7, #4]
1004a4a4:	021b      	lsls	r3, r3, #8
1004a4a6:	041b      	lsls	r3, r3, #16
1004a4a8:	0c1a      	lsrs	r2, r3, #16
1004a4aa:	4b03      	ldr	r3, [pc, #12]	@ (1004a4b8 <LL_RADIO_SetWakeupInitDelay+0x28>)
1004a4ac:	430a      	orrs	r2, r1
1004a4ae:	605a      	str	r2, [r3, #4]
}
1004a4b0:	46c0      	nop			@ (mov r8, r8)
1004a4b2:	46bd      	mov	sp, r7
1004a4b4:	b002      	add	sp, #8
1004a4b6:	bd80      	pop	{r7, pc}
1004a4b8:	200000c0 	.word	0x200000c0
1004a4bc:	ffff00ff 	.word	0xffff00ff

1004a4c0 <LL_RADIO_SetTimer12InitDelayCal>:
  * @rmtoll WORD1          TIMER12INITDELAYCAL       LL_RADIO_SetTimer12InitDelayCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayCal(uint32_t value)
{
1004a4c0:	b580      	push	{r7, lr}
1004a4c2:	b082      	sub	sp, #8
1004a4c4:	af00      	add	r7, sp, #0
1004a4c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER12INITDELAYCAL, value);
1004a4c8:	4b08      	ldr	r3, [pc, #32]	@ (1004a4ec <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
1004a4ca:	685b      	ldr	r3, [r3, #4]
1004a4cc:	4a08      	ldr	r2, [pc, #32]	@ (1004a4f0 <LL_RADIO_SetTimer12InitDelayCal+0x30>)
1004a4ce:	4013      	ands	r3, r2
1004a4d0:	0019      	movs	r1, r3
1004a4d2:	687b      	ldr	r3, [r7, #4]
1004a4d4:	041a      	lsls	r2, r3, #16
1004a4d6:	23ff      	movs	r3, #255	@ 0xff
1004a4d8:	041b      	lsls	r3, r3, #16
1004a4da:	401a      	ands	r2, r3
1004a4dc:	4b03      	ldr	r3, [pc, #12]	@ (1004a4ec <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
1004a4de:	430a      	orrs	r2, r1
1004a4e0:	605a      	str	r2, [r3, #4]
}
1004a4e2:	46c0      	nop			@ (mov r8, r8)
1004a4e4:	46bd      	mov	sp, r7
1004a4e6:	b002      	add	sp, #8
1004a4e8:	bd80      	pop	{r7, pc}
1004a4ea:	46c0      	nop			@ (mov r8, r8)
1004a4ec:	200000c0 	.word	0x200000c0
1004a4f0:	ff00ffff 	.word	0xff00ffff

1004a4f4 <LL_RADIO_SetTimer12InitDelayNoCal>:
  * @rmtoll WORD1          TIMER2INITDELAYNOCAL       LL_RADIO_SetTimer12InitDelayNoCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayNoCal(uint32_t value)
{
1004a4f4:	b580      	push	{r7, lr}
1004a4f6:	b082      	sub	sp, #8
1004a4f8:	af00      	add	r7, sp, #0
1004a4fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER2INITDELAYNOCAL, value);
1004a4fc:	4b06      	ldr	r3, [pc, #24]	@ (1004a518 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
1004a4fe:	685b      	ldr	r3, [r3, #4]
1004a500:	021b      	lsls	r3, r3, #8
1004a502:	0a19      	lsrs	r1, r3, #8
1004a504:	687b      	ldr	r3, [r7, #4]
1004a506:	061a      	lsls	r2, r3, #24
1004a508:	4b03      	ldr	r3, [pc, #12]	@ (1004a518 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
1004a50a:	430a      	orrs	r2, r1
1004a50c:	605a      	str	r2, [r3, #4]
}
1004a50e:	46c0      	nop			@ (mov r8, r8)
1004a510:	46bd      	mov	sp, r7
1004a512:	b002      	add	sp, #8
1004a514:	bd80      	pop	{r7, pc}
1004a516:	46c0      	nop			@ (mov r8, r8)
1004a518:	200000c0 	.word	0x200000c0

1004a51c <LL_RADIO_SetTransmitCalDelayChk>:
  * @rmtoll WORD2          TRANSMITCALDELAYCHK       LL_RADIO_SetTransmitCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitCalDelayChk(uint32_t value)
{
1004a51c:	b580      	push	{r7, lr}
1004a51e:	b082      	sub	sp, #8
1004a520:	af00      	add	r7, sp, #0
1004a522:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITCALDELAYCHK, value);
1004a524:	4b07      	ldr	r3, [pc, #28]	@ (1004a544 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
1004a526:	689b      	ldr	r3, [r3, #8]
1004a528:	22ff      	movs	r2, #255	@ 0xff
1004a52a:	4393      	bics	r3, r2
1004a52c:	0019      	movs	r1, r3
1004a52e:	687b      	ldr	r3, [r7, #4]
1004a530:	22ff      	movs	r2, #255	@ 0xff
1004a532:	401a      	ands	r2, r3
1004a534:	4b03      	ldr	r3, [pc, #12]	@ (1004a544 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
1004a536:	430a      	orrs	r2, r1
1004a538:	609a      	str	r2, [r3, #8]
}
1004a53a:	46c0      	nop			@ (mov r8, r8)
1004a53c:	46bd      	mov	sp, r7
1004a53e:	b002      	add	sp, #8
1004a540:	bd80      	pop	{r7, pc}
1004a542:	46c0      	nop			@ (mov r8, r8)
1004a544:	200000c0 	.word	0x200000c0

1004a548 <LL_RADIO_SetTransmitNoCalDelayChk>:
  * @rmtoll WORD2          TRANSMITNOCALDELAYCHK       LL_RADIO_SetTransmitNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitNoCalDelayChk(uint32_t value)
{
1004a548:	b580      	push	{r7, lr}
1004a54a:	b082      	sub	sp, #8
1004a54c:	af00      	add	r7, sp, #0
1004a54e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITNOCALDELAYCHK, value);
1004a550:	4b07      	ldr	r3, [pc, #28]	@ (1004a570 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
1004a552:	689b      	ldr	r3, [r3, #8]
1004a554:	4a07      	ldr	r2, [pc, #28]	@ (1004a574 <LL_RADIO_SetTransmitNoCalDelayChk+0x2c>)
1004a556:	4013      	ands	r3, r2
1004a558:	0019      	movs	r1, r3
1004a55a:	687b      	ldr	r3, [r7, #4]
1004a55c:	021b      	lsls	r3, r3, #8
1004a55e:	041b      	lsls	r3, r3, #16
1004a560:	0c1a      	lsrs	r2, r3, #16
1004a562:	4b03      	ldr	r3, [pc, #12]	@ (1004a570 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
1004a564:	430a      	orrs	r2, r1
1004a566:	609a      	str	r2, [r3, #8]
}
1004a568:	46c0      	nop			@ (mov r8, r8)
1004a56a:	46bd      	mov	sp, r7
1004a56c:	b002      	add	sp, #8
1004a56e:	bd80      	pop	{r7, pc}
1004a570:	200000c0 	.word	0x200000c0
1004a574:	ffff00ff 	.word	0xffff00ff

1004a578 <LL_RADIO_SetReceivedCalDelayChk>:
  * @rmtoll WORD2          RECEIVECALDELAYCHK       LL_RADIO_SetReceivedCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedCalDelayChk(uint32_t value)
{
1004a578:	b580      	push	{r7, lr}
1004a57a:	b082      	sub	sp, #8
1004a57c:	af00      	add	r7, sp, #0
1004a57e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVECALDELAYCHK, value);
1004a580:	4b08      	ldr	r3, [pc, #32]	@ (1004a5a4 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
1004a582:	689b      	ldr	r3, [r3, #8]
1004a584:	4a08      	ldr	r2, [pc, #32]	@ (1004a5a8 <LL_RADIO_SetReceivedCalDelayChk+0x30>)
1004a586:	4013      	ands	r3, r2
1004a588:	0019      	movs	r1, r3
1004a58a:	687b      	ldr	r3, [r7, #4]
1004a58c:	041a      	lsls	r2, r3, #16
1004a58e:	23ff      	movs	r3, #255	@ 0xff
1004a590:	041b      	lsls	r3, r3, #16
1004a592:	401a      	ands	r2, r3
1004a594:	4b03      	ldr	r3, [pc, #12]	@ (1004a5a4 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
1004a596:	430a      	orrs	r2, r1
1004a598:	609a      	str	r2, [r3, #8]
}
1004a59a:	46c0      	nop			@ (mov r8, r8)
1004a59c:	46bd      	mov	sp, r7
1004a59e:	b002      	add	sp, #8
1004a5a0:	bd80      	pop	{r7, pc}
1004a5a2:	46c0      	nop			@ (mov r8, r8)
1004a5a4:	200000c0 	.word	0x200000c0
1004a5a8:	ff00ffff 	.word	0xff00ffff

1004a5ac <LL_RADIO_SetReceivedNoCalDelayChk>:
  * @rmtoll WORD2          RECEIVENOCALDELAYCHK       LL_RADIO_SetReceivedNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedNoCalDelayChk(uint32_t value)
{
1004a5ac:	b580      	push	{r7, lr}
1004a5ae:	b082      	sub	sp, #8
1004a5b0:	af00      	add	r7, sp, #0
1004a5b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVENOCALDELAYCHK, value);
1004a5b4:	4b06      	ldr	r3, [pc, #24]	@ (1004a5d0 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
1004a5b6:	689b      	ldr	r3, [r3, #8]
1004a5b8:	021b      	lsls	r3, r3, #8
1004a5ba:	0a19      	lsrs	r1, r3, #8
1004a5bc:	687b      	ldr	r3, [r7, #4]
1004a5be:	061a      	lsls	r2, r3, #24
1004a5c0:	4b03      	ldr	r3, [pc, #12]	@ (1004a5d0 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
1004a5c2:	430a      	orrs	r2, r1
1004a5c4:	609a      	str	r2, [r3, #8]
}
1004a5c6:	46c0      	nop			@ (mov r8, r8)
1004a5c8:	46bd      	mov	sp, r7
1004a5ca:	b002      	add	sp, #8
1004a5cc:	bd80      	pop	{r7, pc}
1004a5ce:	46c0      	nop			@ (mov r8, r8)
1004a5d0:	200000c0 	.word	0x200000c0

1004a5d4 <LL_RADIO_SetConfigurationEndDuration>:
  * @rmtoll WORD3          CONFIGENDDURATION       LL_RADIO_SetConfigurationEndDuration
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetConfigurationEndDuration(uint32_t value)
{
1004a5d4:	b580      	push	{r7, lr}
1004a5d6:	b082      	sub	sp, #8
1004a5d8:	af00      	add	r7, sp, #0
1004a5da:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_CONFIGENDDURATION, value);
1004a5dc:	4b07      	ldr	r3, [pc, #28]	@ (1004a5fc <LL_RADIO_SetConfigurationEndDuration+0x28>)
1004a5de:	68db      	ldr	r3, [r3, #12]
1004a5e0:	22ff      	movs	r2, #255	@ 0xff
1004a5e2:	4393      	bics	r3, r2
1004a5e4:	0019      	movs	r1, r3
1004a5e6:	687b      	ldr	r3, [r7, #4]
1004a5e8:	22ff      	movs	r2, #255	@ 0xff
1004a5ea:	401a      	ands	r2, r3
1004a5ec:	4b03      	ldr	r3, [pc, #12]	@ (1004a5fc <LL_RADIO_SetConfigurationEndDuration+0x28>)
1004a5ee:	430a      	orrs	r2, r1
1004a5f0:	60da      	str	r2, [r3, #12]
}
1004a5f2:	46c0      	nop			@ (mov r8, r8)
1004a5f4:	46bd      	mov	sp, r7
1004a5f6:	b002      	add	sp, #8
1004a5f8:	bd80      	pop	{r7, pc}
1004a5fa:	46c0      	nop			@ (mov r8, r8)
1004a5fc:	200000c0 	.word	0x200000c0

1004a600 <LL_RADIO_SetTxDataReadyCheck>:
  * @rmtoll WORD3          TXDATAREADYCHECK       LL_RADIO_SetTxDataReadyCheck
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDataReadyCheck(uint32_t value)
{
1004a600:	b580      	push	{r7, lr}
1004a602:	b082      	sub	sp, #8
1004a604:	af00      	add	r7, sp, #0
1004a606:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDATAREADYCHECK, value);
1004a608:	4b07      	ldr	r3, [pc, #28]	@ (1004a628 <LL_RADIO_SetTxDataReadyCheck+0x28>)
1004a60a:	68db      	ldr	r3, [r3, #12]
1004a60c:	4a07      	ldr	r2, [pc, #28]	@ (1004a62c <LL_RADIO_SetTxDataReadyCheck+0x2c>)
1004a60e:	4013      	ands	r3, r2
1004a610:	0019      	movs	r1, r3
1004a612:	687b      	ldr	r3, [r7, #4]
1004a614:	021b      	lsls	r3, r3, #8
1004a616:	041b      	lsls	r3, r3, #16
1004a618:	0c1a      	lsrs	r2, r3, #16
1004a61a:	4b03      	ldr	r3, [pc, #12]	@ (1004a628 <LL_RADIO_SetTxDataReadyCheck+0x28>)
1004a61c:	430a      	orrs	r2, r1
1004a61e:	60da      	str	r2, [r3, #12]
}
1004a620:	46c0      	nop			@ (mov r8, r8)
1004a622:	46bd      	mov	sp, r7
1004a624:	b002      	add	sp, #8
1004a626:	bd80      	pop	{r7, pc}
1004a628:	200000c0 	.word	0x200000c0
1004a62c:	ffff00ff 	.word	0xffff00ff

1004a630 <LL_RADIO_SetTxDelayStart>:
  * @rmtoll WORD3          TXDELAYSTART       LL_RADIO_SetTxDelayStart
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayStart(uint32_t value)
{
1004a630:	b580      	push	{r7, lr}
1004a632:	b082      	sub	sp, #8
1004a634:	af00      	add	r7, sp, #0
1004a636:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYSTART, value);
1004a638:	4b08      	ldr	r3, [pc, #32]	@ (1004a65c <LL_RADIO_SetTxDelayStart+0x2c>)
1004a63a:	68db      	ldr	r3, [r3, #12]
1004a63c:	4a08      	ldr	r2, [pc, #32]	@ (1004a660 <LL_RADIO_SetTxDelayStart+0x30>)
1004a63e:	4013      	ands	r3, r2
1004a640:	0019      	movs	r1, r3
1004a642:	687b      	ldr	r3, [r7, #4]
1004a644:	041a      	lsls	r2, r3, #16
1004a646:	23ff      	movs	r3, #255	@ 0xff
1004a648:	041b      	lsls	r3, r3, #16
1004a64a:	401a      	ands	r2, r3
1004a64c:	4b03      	ldr	r3, [pc, #12]	@ (1004a65c <LL_RADIO_SetTxDelayStart+0x2c>)
1004a64e:	430a      	orrs	r2, r1
1004a650:	60da      	str	r2, [r3, #12]
}
1004a652:	46c0      	nop			@ (mov r8, r8)
1004a654:	46bd      	mov	sp, r7
1004a656:	b002      	add	sp, #8
1004a658:	bd80      	pop	{r7, pc}
1004a65a:	46c0      	nop			@ (mov r8, r8)
1004a65c:	200000c0 	.word	0x200000c0
1004a660:	ff00ffff 	.word	0xff00ffff

1004a664 <LL_RADIO_SetTxDelayEnd>:
  * @rmtoll WORD3          TXDELAYEND       LL_RADIO_SetTxDelayEnd
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayEnd(uint32_t value)
{
1004a664:	b580      	push	{r7, lr}
1004a666:	b082      	sub	sp, #8
1004a668:	af00      	add	r7, sp, #0
1004a66a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYEND, value);
1004a66c:	4b08      	ldr	r3, [pc, #32]	@ (1004a690 <LL_RADIO_SetTxDelayEnd+0x2c>)
1004a66e:	68db      	ldr	r3, [r3, #12]
1004a670:	4a08      	ldr	r2, [pc, #32]	@ (1004a694 <LL_RADIO_SetTxDelayEnd+0x30>)
1004a672:	4013      	ands	r3, r2
1004a674:	0019      	movs	r1, r3
1004a676:	687b      	ldr	r3, [r7, #4]
1004a678:	061a      	lsls	r2, r3, #24
1004a67a:	23fc      	movs	r3, #252	@ 0xfc
1004a67c:	059b      	lsls	r3, r3, #22
1004a67e:	401a      	ands	r2, r3
1004a680:	4b03      	ldr	r3, [pc, #12]	@ (1004a690 <LL_RADIO_SetTxDelayEnd+0x2c>)
1004a682:	430a      	orrs	r2, r1
1004a684:	60da      	str	r2, [r3, #12]
}
1004a686:	46c0      	nop			@ (mov r8, r8)
1004a688:	46bd      	mov	sp, r7
1004a68a:	b002      	add	sp, #8
1004a68c:	bd80      	pop	{r7, pc}
1004a68e:	46c0      	nop			@ (mov r8, r8)
1004a690:	200000c0 	.word	0x200000c0
1004a694:	c0ffffff 	.word	0xc0ffffff

1004a698 <LL_RADIO_SetTransmissionReadyTimeout>:
  * @rmtoll WORD4          TXREADYTIMEOUT       LL_RADIO_SetTransmissionReadyTimeout
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionReadyTimeout(uint32_t value)
{
1004a698:	b580      	push	{r7, lr}
1004a69a:	b082      	sub	sp, #8
1004a69c:	af00      	add	r7, sp, #0
1004a69e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_TXREADYTIMEOUT, value);
1004a6a0:	4b07      	ldr	r3, [pc, #28]	@ (1004a6c0 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
1004a6a2:	691b      	ldr	r3, [r3, #16]
1004a6a4:	22ff      	movs	r2, #255	@ 0xff
1004a6a6:	4393      	bics	r3, r2
1004a6a8:	0019      	movs	r1, r3
1004a6aa:	687b      	ldr	r3, [r7, #4]
1004a6ac:	22ff      	movs	r2, #255	@ 0xff
1004a6ae:	401a      	ands	r2, r3
1004a6b0:	4b03      	ldr	r3, [pc, #12]	@ (1004a6c0 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
1004a6b2:	430a      	orrs	r2, r1
1004a6b4:	611a      	str	r2, [r3, #16]
}
1004a6b6:	46c0      	nop			@ (mov r8, r8)
1004a6b8:	46bd      	mov	sp, r7
1004a6ba:	b002      	add	sp, #8
1004a6bc:	bd80      	pop	{r7, pc}
1004a6be:	46c0      	nop			@ (mov r8, r8)
1004a6c0:	200000c0 	.word	0x200000c0

1004a6c4 <LL_RADIO_ChkFlagAutoclearEnable_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          CHKFLAGAUTOCLEARENA            LL_RADIO_ChkFlagAutoclearEnable_Enable
  * @retval uint32_t
  */
__STATIC_INLINE void LL_RADIO_ChkFlagAutoclearEnable_Enable(void)
{
1004a6c4:	b580      	push	{r7, lr}
1004a6c6:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_CHKFLAGAUTOCLEARENA);
1004a6c8:	4b04      	ldr	r3, [pc, #16]	@ (1004a6dc <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
1004a6ca:	695a      	ldr	r2, [r3, #20]
1004a6cc:	4b03      	ldr	r3, [pc, #12]	@ (1004a6dc <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
1004a6ce:	2104      	movs	r1, #4
1004a6d0:	430a      	orrs	r2, r1
1004a6d2:	615a      	str	r2, [r3, #20]
}
1004a6d4:	46c0      	nop			@ (mov r8, r8)
1004a6d6:	46bd      	mov	sp, r7
1004a6d8:	bd80      	pop	{r7, pc}
1004a6da:	46c0      	nop			@ (mov r8, r8)
1004a6dc:	200000c0 	.word	0x200000c0

1004a6e0 <LL_RADIO_NoActiveLErrorInterrupt_Enable>:
  * @brief  Indicate if INTNOACTIVELERROR is enabled
  * @rmtoll WORD5          INTNOACTIVELERROR            LL_RADIO_NoActiveLErrorInterrupt_Enable
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_RADIO_NoActiveLErrorInterrupt_Enable(void)
{
1004a6e0:	b580      	push	{r7, lr}
1004a6e2:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTNOACTIVELERROR);
1004a6e4:	4b04      	ldr	r3, [pc, #16]	@ (1004a6f8 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
1004a6e6:	695a      	ldr	r2, [r3, #20]
1004a6e8:	4b03      	ldr	r3, [pc, #12]	@ (1004a6f8 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
1004a6ea:	2180      	movs	r1, #128	@ 0x80
1004a6ec:	0409      	lsls	r1, r1, #16
1004a6ee:	430a      	orrs	r2, r1
1004a6f0:	615a      	str	r2, [r3, #20]
}
1004a6f2:	46c0      	nop			@ (mov r8, r8)
1004a6f4:	46bd      	mov	sp, r7
1004a6f6:	bd80      	pop	{r7, pc}
1004a6f8:	200000c0 	.word	0x200000c0

1004a6fc <LL_RADIO_TxRxSkipInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTTXRXSKIP            LL_RADIO_TxRxSkipInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxRxSkipInterrupt_Enable(void)
{
1004a6fc:	b580      	push	{r7, lr}
1004a6fe:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTTXRXSKIP);
1004a700:	4b04      	ldr	r3, [pc, #16]	@ (1004a714 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
1004a702:	695a      	ldr	r2, [r3, #20]
1004a704:	4b03      	ldr	r3, [pc, #12]	@ (1004a714 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
1004a706:	2180      	movs	r1, #128	@ 0x80
1004a708:	0589      	lsls	r1, r1, #22
1004a70a:	430a      	orrs	r2, r1
1004a70c:	615a      	str	r2, [r3, #20]
}
1004a70e:	46c0      	nop			@ (mov r8, r8)
1004a710:	46bd      	mov	sp, r7
1004a712:	bd80      	pop	{r7, pc}
1004a714:	200000c0 	.word	0x200000c0

1004a718 <LL_RADIO_Active2ErrorInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTACTIVE2ERR            LL_RADIO_Active2ErrorInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Active2ErrorInterrupt_Enable(void)
{
1004a718:	b580      	push	{r7, lr}
1004a71a:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTACTIVE2ERR);
1004a71c:	4b04      	ldr	r3, [pc, #16]	@ (1004a730 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
1004a71e:	695a      	ldr	r2, [r3, #20]
1004a720:	4b03      	ldr	r3, [pc, #12]	@ (1004a730 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
1004a722:	2180      	movs	r1, #128	@ 0x80
1004a724:	05c9      	lsls	r1, r1, #23
1004a726:	430a      	orrs	r2, r1
1004a728:	615a      	str	r2, [r3, #20]
}
1004a72a:	46c0      	nop			@ (mov r8, r8)
1004a72c:	46bd      	mov	sp, r7
1004a72e:	bd80      	pop	{r7, pc}
1004a730:	200000c0 	.word	0x200000c0

1004a734 <LL_RADIO_SetDefaultAntennaID>:
  * @rmtoll WORD6          DEFAULTANTENNAID       LL_RADIO_SetDefaultAntennaID
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetDefaultAntennaID(uint32_t value)
{
1004a734:	b580      	push	{r7, lr}
1004a736:	b082      	sub	sp, #8
1004a738:	af00      	add	r7, sp, #0
1004a73a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD6, GLOBAL_WORD6_DEFAULTANTENNAID, value);
1004a73c:	4b07      	ldr	r3, [pc, #28]	@ (1004a75c <LL_RADIO_SetDefaultAntennaID+0x28>)
1004a73e:	699b      	ldr	r3, [r3, #24]
1004a740:	227f      	movs	r2, #127	@ 0x7f
1004a742:	4393      	bics	r3, r2
1004a744:	0019      	movs	r1, r3
1004a746:	687b      	ldr	r3, [r7, #4]
1004a748:	227f      	movs	r2, #127	@ 0x7f
1004a74a:	401a      	ands	r2, r3
1004a74c:	4b03      	ldr	r3, [pc, #12]	@ (1004a75c <LL_RADIO_SetDefaultAntennaID+0x28>)
1004a74e:	430a      	orrs	r2, r1
1004a750:	619a      	str	r2, [r3, #24]
}
1004a752:	46c0      	nop			@ (mov r8, r8)
1004a754:	46bd      	mov	sp, r7
1004a756:	b002      	add	sp, #8
1004a758:	bd80      	pop	{r7, pc}
1004a75a:	46c0      	nop			@ (mov r8, r8)
1004a75c:	200000c0 	.word	0x200000c0

1004a760 <LL_RADIO_TIMER_DisableTimer1>:
{
1004a760:	b580      	push	{r7, lr}
1004a762:	b082      	sub	sp, #8
1004a764:	af00      	add	r7, sp, #0
1004a766:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004a768:	687b      	ldr	r3, [r7, #4]
1004a76a:	68db      	ldr	r3, [r3, #12]
1004a76c:	2203      	movs	r2, #3
1004a76e:	4393      	bics	r3, r2
1004a770:	001a      	movs	r2, r3
1004a772:	687b      	ldr	r3, [r7, #4]
1004a774:	60da      	str	r2, [r3, #12]
}
1004a776:	46c0      	nop			@ (mov r8, r8)
1004a778:	46bd      	mov	sp, r7
1004a77a:	b002      	add	sp, #8
1004a77c:	bd80      	pop	{r7, pc}

1004a77e <LL_RADIO_TIMER_DisableTimer2>:
{
1004a77e:	b580      	push	{r7, lr}
1004a780:	b082      	sub	sp, #8
1004a782:	af00      	add	r7, sp, #0
1004a784:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004a786:	687b      	ldr	r3, [r7, #4]
1004a788:	68db      	ldr	r3, [r3, #12]
1004a78a:	2203      	movs	r2, #3
1004a78c:	4393      	bics	r3, r2
1004a78e:	001a      	movs	r2, r3
1004a790:	687b      	ldr	r3, [r7, #4]
1004a792:	60da      	str	r2, [r3, #12]
}
1004a794:	46c0      	nop			@ (mov r8, r8)
1004a796:	46bd      	mov	sp, r7
1004a798:	b002      	add	sp, #8
1004a79a:	bd80      	pop	{r7, pc}

1004a79c <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
1004a79c:	b580      	push	{r7, lr}
1004a79e:	b082      	sub	sp, #8
1004a7a0:	af00      	add	r7, sp, #0
1004a7a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004a7a4:	687b      	ldr	r3, [r7, #4]
1004a7a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004a7a8:	4a03      	ldr	r2, [pc, #12]	@ (1004a7b8 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
1004a7aa:	401a      	ands	r2, r3
1004a7ac:	687b      	ldr	r3, [r7, #4]
1004a7ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004a7b0:	46c0      	nop			@ (mov r8, r8)
1004a7b2:	46bd      	mov	sp, r7
1004a7b4:	b002      	add	sp, #8
1004a7b6:	bd80      	pop	{r7, pc}
1004a7b8:	bfffffff 	.word	0xbfffffff

1004a7bc <HAL_RADIO_Init>:
/**
  * @brief  Initializes the radio.
  * @retval None
  */
void HAL_RADIO_Init(RADIO_HandleTypeDef *hradio)
{
1004a7bc:	b590      	push	{r4, r7, lr}
1004a7be:	b08d      	sub	sp, #52	@ 0x34
1004a7c0:	af00      	add	r7, sp, #0
1004a7c2:	6078      	str	r0, [r7, #4]
  uint32_t mr_ble_iptat;
  uint32_t mr_ble_vbg;
  uint32_t mr_ble_rxadc_delay_i;
  uint32_t mr_ble_rxadc_delay_q;
  uint8_t mr_ble_rxadc_delay_flag;
  uint8_t *hot_table_radio_config = (uint8_t *)&hot_table_radio_config_u32[4];
1004a7c4:	4b14      	ldr	r3, [pc, #80]	@ (1004a818 <HAL_RADIO_Init+0x5c>)
1004a7c6:	617b      	str	r3, [r7, #20]
  uint8_t index;

  /* Retrieve Trimming values from engineering flash locations */
  if (*(volatile uint32_t *)VALIDITY_LOCATION == VALIDITY_TAG)
1004a7c8:	4b14      	ldr	r3, [pc, #80]	@ (1004a81c <HAL_RADIO_Init+0x60>)
1004a7ca:	681b      	ldr	r3, [r3, #0]
1004a7cc:	4a14      	ldr	r2, [pc, #80]	@ (1004a820 <HAL_RADIO_Init+0x64>)
1004a7ce:	4293      	cmp	r3, r2
1004a7d0:	d12a      	bne.n	1004a828 <HAL_RADIO_Init+0x6c>
  {
    mr_ble_ibias            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IBIAS_TRIM_Msk) >> MR_BLE_IBIAS_TRIM_Pos;
1004a7d2:	4b14      	ldr	r3, [pc, #80]	@ (1004a824 <HAL_RADIO_Init+0x68>)
1004a7d4:	681b      	ldr	r3, [r3, #0]
1004a7d6:	0a1b      	lsrs	r3, r3, #8
1004a7d8:	220f      	movs	r2, #15
1004a7da:	4013      	ands	r3, r2
1004a7dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IPTAT_TRIM_Msk) >> MR_BLE_IPTAT_TRIM_Pos;
1004a7de:	4b11      	ldr	r3, [pc, #68]	@ (1004a824 <HAL_RADIO_Init+0x68>)
1004a7e0:	681b      	ldr	r3, [r3, #0]
1004a7e2:	0b1b      	lsrs	r3, r3, #12
1004a7e4:	220f      	movs	r2, #15
1004a7e6:	4013      	ands	r3, r2
1004a7e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg              = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_VBG_TRIM_Msk) >> MR_BLE_VBG_TRIM_Pos;
1004a7ea:	4b0e      	ldr	r3, [pc, #56]	@ (1004a824 <HAL_RADIO_Init+0x68>)
1004a7ec:	681b      	ldr	r3, [r3, #0]
1004a7ee:	0c1b      	lsrs	r3, r3, #16
1004a7f0:	220f      	movs	r2, #15
1004a7f2:	4013      	ands	r3, r2
1004a7f4:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_i    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_I_TRIM_Msk) >> MR_BLE_RXADC_DELAY_I_TRIM_Pos;
1004a7f6:	4b0b      	ldr	r3, [pc, #44]	@ (1004a824 <HAL_RADIO_Init+0x68>)
1004a7f8:	681b      	ldr	r3, [r3, #0]
1004a7fa:	0d1b      	lsrs	r3, r3, #20
1004a7fc:	2207      	movs	r2, #7
1004a7fe:	4013      	ands	r3, r2
1004a800:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_Q_TRIM_Msk) >> MR_BLE_RXADC_DELAY_Q_TRIM_Pos;
1004a802:	4b08      	ldr	r3, [pc, #32]	@ (1004a824 <HAL_RADIO_Init+0x68>)
1004a804:	681b      	ldr	r3, [r3, #0]
1004a806:	0e1b      	lsrs	r3, r3, #24
1004a808:	2207      	movs	r2, #7
1004a80a:	4013      	ands	r3, r2
1004a80c:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
1004a80e:	231b      	movs	r3, #27
1004a810:	18fb      	adds	r3, r7, r3
1004a812:	2201      	movs	r2, #1
1004a814:	701a      	strb	r2, [r3, #0]
1004a816:	e018      	b.n	1004a84a <HAL_RADIO_Init+0x8e>
1004a818:	200021e4 	.word	0x200021e4
1004a81c:	10001ef8 	.word	0x10001ef8
1004a820:	fcbceccc 	.word	0xfcbceccc
1004a824:	10001ee8 	.word	0x10001ee8
  }
  else
  {
    mr_ble_ibias = 0x08;
1004a828:	2308      	movs	r3, #8
1004a82a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat = 0x07;
1004a82c:	2307      	movs	r3, #7
1004a82e:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg   = 0x08;
1004a830:	2308      	movs	r3, #8
1004a832:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_flag = FALSE;
1004a834:	211b      	movs	r1, #27
1004a836:	187b      	adds	r3, r7, r1
1004a838:	2200      	movs	r2, #0
1004a83a:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
    mr_ble_rxadc_delay_i    = 3;
1004a83c:	2303      	movs	r3, #3
1004a83e:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = 3;
1004a840:	2303      	movs	r3, #3
1004a842:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
1004a844:	187b      	adds	r3, r7, r1
1004a846:	2201      	movs	r2, #1
1004a848:	701a      	strb	r2, [r3, #0]
#endif /* STM32WB05 or STM32WB09 */
  }

  BLUEGLOB->BYTE4 = BLUE_IDLE_0;
1004a84a:	4bfc      	ldr	r3, [pc, #1008]	@ (1004ac3c <HAL_RADIO_Init+0x480>)
1004a84c:	2200      	movs	r2, #0
1004a84e:	711a      	strb	r2, [r3, #4]
  if (hradio != NULL)
1004a850:	687b      	ldr	r3, [r7, #4]
1004a852:	2b00      	cmp	r3, #0
1004a854:	d003      	beq.n	1004a85e <HAL_RADIO_Init+0xa2>
  {
    HAL_RADIO_MspInit(hradio);
1004a856:	687b      	ldr	r3, [r7, #4]
1004a858:	0018      	movs	r0, r3
1004a85a:	f7fc fb85 	bl	10046f68 <HAL_RADIO_MspInit>
  }
  LL_RADIO_TIMER_DisableTimer1(BLUE);
1004a85e:	23c0      	movs	r3, #192	@ 0xc0
1004a860:	05db      	lsls	r3, r3, #23
1004a862:	0018      	movs	r0, r3
1004a864:	f7ff ff7c 	bl	1004a760 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
1004a868:	23c0      	movs	r3, #192	@ 0xc0
1004a86a:	05db      	lsls	r3, r3, #23
1004a86c:	0018      	movs	r0, r3
1004a86e:	f7ff ff86 	bl	1004a77e <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004a872:	4bf3      	ldr	r3, [pc, #972]	@ (1004ac40 <HAL_RADIO_Init+0x484>)
1004a874:	0018      	movs	r0, r3
1004a876:	f7ff ff91 	bl	1004a79c <LL_RADIO_TIMER_DisableBLEWakeupTimer>

  /* Write Radio Trimming values in the registers: Cbias' VBG, Cbias' IPTAT, Cbias' IBIAS, RxAnaUsr Delay Trim I & Q */
  MODIFY_REG_FIELD(RRM->CBIAS1_ANA_ENG, RRM_CBIAS1_ANA_ENG_RFD_CBIAS_VBG_TRIM, mr_ble_vbg);
1004a87a:	4af2      	ldr	r2, [pc, #968]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a87c:	239e      	movs	r3, #158	@ 0x9e
1004a87e:	009b      	lsls	r3, r3, #2
1004a880:	58d3      	ldr	r3, [r2, r3]
1004a882:	220f      	movs	r2, #15
1004a884:	4393      	bics	r3, r2
1004a886:	001a      	movs	r2, r3
1004a888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004a88a:	210f      	movs	r1, #15
1004a88c:	400b      	ands	r3, r1
1004a88e:	49ed      	ldr	r1, [pc, #948]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a890:	431a      	orrs	r2, r3
1004a892:	239e      	movs	r3, #158	@ 0x9e
1004a894:	009b      	lsls	r3, r3, #2
1004a896:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IPTAT_TRIM, mr_ble_iptat);
1004a898:	4aea      	ldr	r2, [pc, #936]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a89a:	239d      	movs	r3, #157	@ 0x9d
1004a89c:	009b      	lsls	r3, r3, #2
1004a89e:	58d3      	ldr	r3, [r2, r3]
1004a8a0:	22f0      	movs	r2, #240	@ 0xf0
1004a8a2:	4393      	bics	r3, r2
1004a8a4:	001a      	movs	r2, r3
1004a8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004a8a8:	011b      	lsls	r3, r3, #4
1004a8aa:	21ff      	movs	r1, #255	@ 0xff
1004a8ac:	400b      	ands	r3, r1
1004a8ae:	49e5      	ldr	r1, [pc, #916]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a8b0:	431a      	orrs	r2, r3
1004a8b2:	239d      	movs	r3, #157	@ 0x9d
1004a8b4:	009b      	lsls	r3, r3, #2
1004a8b6:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IBIAS_TRIM, mr_ble_ibias);
1004a8b8:	4ae2      	ldr	r2, [pc, #904]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a8ba:	239d      	movs	r3, #157	@ 0x9d
1004a8bc:	009b      	lsls	r3, r3, #2
1004a8be:	58d3      	ldr	r3, [r2, r3]
1004a8c0:	220f      	movs	r2, #15
1004a8c2:	4393      	bics	r3, r2
1004a8c4:	001a      	movs	r2, r3
1004a8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004a8c8:	210f      	movs	r1, #15
1004a8ca:	400b      	ands	r3, r1
1004a8cc:	49dd      	ldr	r1, [pc, #884]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a8ce:	431a      	orrs	r2, r3
1004a8d0:	239d      	movs	r3, #157	@ 0x9d
1004a8d2:	009b      	lsls	r3, r3, #2
1004a8d4:	50ca      	str	r2, [r1, r3]
  if (mr_ble_rxadc_delay_flag)
1004a8d6:	231b      	movs	r3, #27
1004a8d8:	18fb      	adds	r3, r7, r3
1004a8da:	781b      	ldrb	r3, [r3, #0]
1004a8dc:	2b00      	cmp	r3, #0
1004a8de:	d01e      	beq.n	1004a91e <HAL_RADIO_Init+0x162>
  {
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_I, mr_ble_rxadc_delay_i);
1004a8e0:	4ad8      	ldr	r2, [pc, #864]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a8e2:	2392      	movs	r3, #146	@ 0x92
1004a8e4:	009b      	lsls	r3, r3, #2
1004a8e6:	58d3      	ldr	r3, [r2, r3]
1004a8e8:	2207      	movs	r2, #7
1004a8ea:	4393      	bics	r3, r2
1004a8ec:	001a      	movs	r2, r3
1004a8ee:	6a3b      	ldr	r3, [r7, #32]
1004a8f0:	2107      	movs	r1, #7
1004a8f2:	400b      	ands	r3, r1
1004a8f4:	49d3      	ldr	r1, [pc, #844]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a8f6:	431a      	orrs	r2, r3
1004a8f8:	2392      	movs	r3, #146	@ 0x92
1004a8fa:	009b      	lsls	r3, r3, #2
1004a8fc:	50ca      	str	r2, [r1, r3]
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_Q, mr_ble_rxadc_delay_q);
1004a8fe:	4ad1      	ldr	r2, [pc, #836]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a900:	2392      	movs	r3, #146	@ 0x92
1004a902:	009b      	lsls	r3, r3, #2
1004a904:	58d3      	ldr	r3, [r2, r3]
1004a906:	2238      	movs	r2, #56	@ 0x38
1004a908:	4393      	bics	r3, r2
1004a90a:	001a      	movs	r2, r3
1004a90c:	69fb      	ldr	r3, [r7, #28]
1004a90e:	00db      	lsls	r3, r3, #3
1004a910:	2138      	movs	r1, #56	@ 0x38
1004a912:	400b      	ands	r3, r1
1004a914:	49cb      	ldr	r1, [pc, #812]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a916:	431a      	orrs	r2, r3
1004a918:	2392      	movs	r3, #146	@ 0x92
1004a91a:	009b      	lsls	r3, r3, #2
1004a91c:	50ca      	str	r2, [r1, r3]
  }

  /* Radio AFC configuration */
  MODIFY_REG(RRM->AFC1_DIG_ENG, RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER | RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE,
1004a91e:	4ac9      	ldr	r2, [pc, #804]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a920:	23a4      	movs	r3, #164	@ 0xa4
1004a922:	005b      	lsls	r3, r3, #1
1004a924:	58d3      	ldr	r3, [r2, r3]
1004a926:	22ff      	movs	r2, #255	@ 0xff
1004a928:	4393      	bics	r3, r2
1004a92a:	49c6      	ldr	r1, [pc, #792]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a92c:	2255      	movs	r2, #85	@ 0x55
1004a92e:	431a      	orrs	r2, r3
1004a930:	23a4      	movs	r3, #164	@ 0xa4
1004a932:	005b      	lsls	r3, r3, #1
1004a934:	50ca      	str	r2, [r1, r3]
             ((AFC_DELAY_BEFORE << RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Msk) |
             ((AFC_DELAY_AFTER << RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Msk));
  MODIFY_REG(RRM->CR0_DIG_ENG, RRM_CR0_DIG_ENG_CR_GAIN_BEFORE | RRM_CR0_DIG_ENG_CR_GAIN_AFTER,
1004a936:	4ac3      	ldr	r2, [pc, #780]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a938:	23aa      	movs	r3, #170	@ 0xaa
1004a93a:	005b      	lsls	r3, r3, #1
1004a93c:	58d3      	ldr	r3, [r2, r3]
1004a93e:	22ff      	movs	r2, #255	@ 0xff
1004a940:	4393      	bics	r3, r2
1004a942:	49c0      	ldr	r1, [pc, #768]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a944:	2266      	movs	r2, #102	@ 0x66
1004a946:	431a      	orrs	r2, r3
1004a948:	23aa      	movs	r3, #170	@ 0xaa
1004a94a:	005b      	lsls	r3, r3, #1
1004a94c:	50ca      	str	r2, [r1, r3]
             ((CR_GAIN_BEFORE << RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Msk) |
             ((CR_GAIN_AFTER << RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Msk));
  MODIFY_REG(RRM->CR0_LR, RRM_CR0_LR_CR_LR_GAIN_BEFORE | RRM_CR0_LR_CR_LR_GAIN_AFTER,
1004a94e:	4abd      	ldr	r2, [pc, #756]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a950:	23b4      	movs	r3, #180	@ 0xb4
1004a952:	005b      	lsls	r3, r3, #1
1004a954:	58d3      	ldr	r3, [r2, r3]
1004a956:	22ff      	movs	r2, #255	@ 0xff
1004a958:	4393      	bics	r3, r2
1004a95a:	49ba      	ldr	r1, [pc, #744]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a95c:	2255      	movs	r2, #85	@ 0x55
1004a95e:	431a      	orrs	r2, r3
1004a960:	23b4      	movs	r3, #180	@ 0xb4
1004a962:	005b      	lsls	r3, r3, #1
1004a964:	50ca      	str	r2, [r1, r3]
             ((CR_LR_GAIN_BEFORE << RRM_CR0_LR_CR_LR_GAIN_BEFORE_Pos) & RRM_CR0_LR_CR_LR_GAIN_BEFORE_Msk) |
             ((CR_LR_GAIN_AFTER << RRM_CR0_LR_CR_LR_GAIN_AFTER_Pos) & RRM_CR0_LR_CR_LR_GAIN_AFTER_Msk));

  /* Radio RSSI Threshold configuration */
  MODIFY_REG_FIELD(RRM->LR_RSSI_THR_DIG_ENG, RRM_LR_RSSI_THR_DIG_ENG_LR_RSSI_THR, LR_RSSI_THR);
1004a966:	4ab7      	ldr	r2, [pc, #732]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a968:	23c4      	movs	r3, #196	@ 0xc4
1004a96a:	005b      	lsls	r3, r3, #1
1004a96c:	58d3      	ldr	r3, [r2, r3]
1004a96e:	22ff      	movs	r2, #255	@ 0xff
1004a970:	4393      	bics	r3, r2
1004a972:	49b4      	ldr	r1, [pc, #720]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a974:	221d      	movs	r2, #29
1004a976:	431a      	orrs	r2, r3
1004a978:	23c4      	movs	r3, #196	@ 0xc4
1004a97a:	005b      	lsls	r3, r3, #1
1004a97c:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_PD_THR_DIG_ENG, RRM_LR_PD_THR_DIG_ENG_LR_PD_THR, LR_PD_THR);
1004a97e:	4ab1      	ldr	r2, [pc, #708]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a980:	23c2      	movs	r3, #194	@ 0xc2
1004a982:	005b      	lsls	r3, r3, #1
1004a984:	58d3      	ldr	r3, [r2, r3]
1004a986:	22ff      	movs	r2, #255	@ 0xff
1004a988:	4393      	bics	r3, r2
1004a98a:	49ae      	ldr	r1, [pc, #696]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a98c:	2259      	movs	r2, #89	@ 0x59
1004a98e:	431a      	orrs	r2, r3
1004a990:	23c2      	movs	r3, #194	@ 0xc2
1004a992:	005b      	lsls	r3, r3, #1
1004a994:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_AAC_THR_DIG_ENG, RRM_LR_AAC_THR_DIG_ENG_LR_AAC_THR, LR_AAC_THR);
1004a996:	4aab      	ldr	r2, [pc, #684]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a998:	23c6      	movs	r3, #198	@ 0xc6
1004a99a:	005b      	lsls	r3, r3, #1
1004a99c:	58d3      	ldr	r3, [r2, r3]
1004a99e:	22ff      	movs	r2, #255	@ 0xff
1004a9a0:	4393      	bics	r3, r2
1004a9a2:	49a8      	ldr	r1, [pc, #672]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a9a4:	2232      	movs	r2, #50	@ 0x32
1004a9a6:	431a      	orrs	r2, r3
1004a9a8:	23c6      	movs	r3, #198	@ 0xc6
1004a9aa:	005b      	lsls	r3, r3, #1
1004a9ac:	50ca      	str	r2, [r1, r3]

  /* Enable Viterbi */
  SET_BIT(RRM->VIT_CONF_DIG_ENG, RRM_VIT_CONF_DIG_ENG_VIT_CONF_0);
1004a9ae:	4aa5      	ldr	r2, [pc, #660]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a9b0:	23b6      	movs	r3, #182	@ 0xb6
1004a9b2:	005b      	lsls	r3, r3, #1
1004a9b4:	58d3      	ldr	r3, [r2, r3]
1004a9b6:	49a3      	ldr	r1, [pc, #652]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a9b8:	2201      	movs	r2, #1
1004a9ba:	431a      	orrs	r2, r3
1004a9bc:	23b6      	movs	r3, #182	@ 0xb6
1004a9be:	005b      	lsls	r3, r3, #1
1004a9c0:	50ca      	str	r2, [r1, r3]

#if defined(STM32WB05) || defined(STM32WB09)
  MODIFY_REG_FIELD(RRM->ANTSW_DIG0_USR, RRM_ANTSW0_DIG_USR_RX_TIME_TO_SAMPLE, RX_TIME_TO_SAMPLE);
1004a9c2:	4aa0      	ldr	r2, [pc, #640]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a9c4:	23d0      	movs	r3, #208	@ 0xd0
1004a9c6:	009b      	lsls	r3, r3, #2
1004a9c8:	58d3      	ldr	r3, [r2, r3]
1004a9ca:	22ff      	movs	r2, #255	@ 0xff
1004a9cc:	4393      	bics	r3, r2
1004a9ce:	499d      	ldr	r1, [pc, #628]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a9d0:	221f      	movs	r2, #31
1004a9d2:	431a      	orrs	r2, r3
1004a9d4:	23d0      	movs	r3, #208	@ 0xd0
1004a9d6:	009b      	lsls	r3, r3, #2
1004a9d8:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->ANTSW_DIG1_USR, RRM_ANTSW1_DIG_USR_RX_TIME_TO_SWITCH, RX_TIME_TO_SWITCH);
1004a9da:	4a9a      	ldr	r2, [pc, #616]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a9dc:	23d1      	movs	r3, #209	@ 0xd1
1004a9de:	009b      	lsls	r3, r3, #2
1004a9e0:	58d3      	ldr	r3, [r2, r3]
1004a9e2:	22ff      	movs	r2, #255	@ 0xff
1004a9e4:	4393      	bics	r3, r2
1004a9e6:	4997      	ldr	r1, [pc, #604]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004a9e8:	2209      	movs	r2, #9
1004a9ea:	431a      	orrs	r2, r3
1004a9ec:	23d1      	movs	r3, #209	@ 0xd1
1004a9ee:	009b      	lsls	r3, r3, #2
1004a9f0:	50ca      	str	r2, [r1, r3]
#endif /* STM32WB05 or STM32WB09 */

  /*Set InitDelay*/
  LL_RADIO_SetWakeupInitDelay(INITDELAY_WAKEUP);
1004a9f2:	2040      	movs	r0, #64	@ 0x40
1004a9f4:	f7ff fd4c 	bl	1004a490 <LL_RADIO_SetWakeupInitDelay>
  LL_RADIO_SetTimer12InitDelayCal(INITDELAY_TIMER12_CAL);
1004a9f8:	203f      	movs	r0, #63	@ 0x3f
1004a9fa:	f7ff fd61 	bl	1004a4c0 <LL_RADIO_SetTimer12InitDelayCal>
  LL_RADIO_SetTimer12InitDelayNoCal(INITDELAY_TIMER2_NOCAL);
1004a9fe:	2009      	movs	r0, #9
1004aa00:	f7ff fd78 	bl	1004a4f4 <LL_RADIO_SetTimer12InitDelayNoCal>

  /*Set Init_radio_delay*/
  LL_RADIO_SetReceivedCalDelayChk(DELAYCHK_RECEIVE_CAL);
1004aa04:	205a      	movs	r0, #90	@ 0x5a
1004aa06:	f7ff fdb7 	bl	1004a578 <LL_RADIO_SetReceivedCalDelayChk>
  LL_RADIO_SetReceivedNoCalDelayChk(DELAYCHK_RECEIVE_NOCAL);
1004aa0a:	2032      	movs	r0, #50	@ 0x32
1004aa0c:	f7ff fdce 	bl	1004a5ac <LL_RADIO_SetReceivedNoCalDelayChk>
  LL_RADIO_SetTransmitCalDelayChk(DELAYCHK_TRANSMIT_CAL);
1004aa10:	205a      	movs	r0, #90	@ 0x5a
1004aa12:	f7ff fd83 	bl	1004a51c <LL_RADIO_SetTransmitCalDelayChk>
  LL_RADIO_SetTransmitNoCalDelayChk(DELAYCHK_TRANSMIT_NOCAL);
1004aa16:	2032      	movs	r0, #50	@ 0x32
1004aa18:	f7ff fd96 	bl	1004a548 <LL_RADIO_SetTransmitNoCalDelayChk>

  /* Initial and final TX delays: control the on-air start time of the TX packet
  *  and the length of the packet "tail" after last bit is transmitted
  */
  LL_RADIO_SetTxDelayStart(TXDELAY_START);
1004aa1c:	2010      	movs	r0, #16
1004aa1e:	f7ff fe07 	bl	1004a630 <LL_RADIO_SetTxDelayStart>
  LL_RADIO_SetTxDelayEnd(TXDELAY_END);
1004aa22:	2010      	movs	r0, #16
1004aa24:	f7ff fe1e 	bl	1004a664 <LL_RADIO_SetTxDelayEnd>

  /* Timeout for TX ready signal from the radio FSM after the 2nd init phase
  *  has expired
  */
  LL_RADIO_SetTransmissionReadyTimeout(TXREADY_TIMEOUT);
1004aa28:	2004      	movs	r0, #4
1004aa2a:	f7ff fe35 	bl	1004a698 <LL_RADIO_SetTransmissionReadyTimeout>

  /* Timing for the various programming phases of the radio, modem and memory
  *  pointers.
  */
  LL_RADIO_SetConfigurationEndDuration(CONFIG_END_DURATION);
1004aa2e:	2014      	movs	r0, #20
1004aa30:	f7ff fdd0 	bl	1004a5d4 <LL_RADIO_SetConfigurationEndDuration>
  LL_RADIO_SetTxDataReadyCheck(CHECK_TXDATAREADY);
1004aa34:	2005      	movs	r0, #5
1004aa36:	f7ff fde3 	bl	1004a600 <LL_RADIO_SetTxDataReadyCheck>

  LL_RADIO_ChkFlagAutoclearEnable_Enable();
1004aa3a:	f7ff fe43 	bl	1004a6c4 <LL_RADIO_ChkFlagAutoclearEnable_Enable>
  LL_RADIO_NoActiveLErrorInterrupt_Enable();
1004aa3e:	f7ff fe4f 	bl	1004a6e0 <LL_RADIO_NoActiveLErrorInterrupt_Enable>
  LL_RADIO_TxRxSkipInterrupt_Enable();
1004aa42:	f7ff fe5b 	bl	1004a6fc <LL_RADIO_TxRxSkipInterrupt_Enable>

#if defined(GLOBAL_WORD6_DEFAULTANTENNAID_Msk)
  LL_RADIO_SetDefaultAntennaID(0);
1004aa46:	2000      	movs	r0, #0
1004aa48:	f7ff fe74 	bl	1004a734 <LL_RADIO_SetDefaultAntennaID>
  /* The commands in the hot table start at word 4
  * The words 0 to 2 are used to point to the command list
  * for the various trigger events, word 3 is a null command
  * (see function BLEPLAT_CNTR_SetRadioConfigData)
  */
  index = 0;
1004aa4c:	2013      	movs	r0, #19
1004aa4e:	183b      	adds	r3, r7, r0
1004aa50:	2200      	movs	r2, #0
1004aa52:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004aa54:	183b      	adds	r3, r7, r0
1004aa56:	781b      	ldrb	r3, [r3, #0]
1004aa58:	183a      	adds	r2, r7, r0
1004aa5a:	1c59      	adds	r1, r3, #1
1004aa5c:	7011      	strb	r1, [r2, #0]
1004aa5e:	001a      	movs	r2, r3
1004aa60:	697b      	ldr	r3, [r7, #20]
1004aa62:	189b      	adds	r3, r3, r2
1004aa64:	2201      	movs	r2, #1
1004aa66:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS1_ANA_ENG;
1004aa68:	183b      	adds	r3, r7, r0
1004aa6a:	781b      	ldrb	r3, [r3, #0]
1004aa6c:	183a      	adds	r2, r7, r0
1004aa6e:	1c59      	adds	r1, r3, #1
1004aa70:	7011      	strb	r1, [r2, #0]
1004aa72:	001a      	movs	r2, r3
1004aa74:	697b      	ldr	r3, [r7, #20]
1004aa76:	189b      	adds	r3, r3, r2
1004aa78:	225e      	movs	r2, #94	@ 0x5e
1004aa7a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS1_ANA_ENG;
1004aa7c:	4a71      	ldr	r2, [pc, #452]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004aa7e:	239e      	movs	r3, #158	@ 0x9e
1004aa80:	009b      	lsls	r3, r3, #2
1004aa82:	58d1      	ldr	r1, [r2, r3]
1004aa84:	183b      	adds	r3, r7, r0
1004aa86:	781b      	ldrb	r3, [r3, #0]
1004aa88:	0004      	movs	r4, r0
1004aa8a:	183a      	adds	r2, r7, r0
1004aa8c:	1c58      	adds	r0, r3, #1
1004aa8e:	7010      	strb	r0, [r2, #0]
1004aa90:	001a      	movs	r2, r3
1004aa92:	697b      	ldr	r3, [r7, #20]
1004aa94:	189b      	adds	r3, r3, r2
1004aa96:	b2ca      	uxtb	r2, r1
1004aa98:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004aa9a:	0020      	movs	r0, r4
1004aa9c:	183b      	adds	r3, r7, r0
1004aa9e:	781b      	ldrb	r3, [r3, #0]
1004aaa0:	183a      	adds	r2, r7, r0
1004aaa2:	1c59      	adds	r1, r3, #1
1004aaa4:	7011      	strb	r1, [r2, #0]
1004aaa6:	001a      	movs	r2, r3
1004aaa8:	697b      	ldr	r3, [r7, #20]
1004aaaa:	189b      	adds	r3, r3, r2
1004aaac:	2201      	movs	r2, #1
1004aaae:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS0_ANA_ENG;
1004aab0:	183b      	adds	r3, r7, r0
1004aab2:	781b      	ldrb	r3, [r3, #0]
1004aab4:	183a      	adds	r2, r7, r0
1004aab6:	1c59      	adds	r1, r3, #1
1004aab8:	7011      	strb	r1, [r2, #0]
1004aaba:	001a      	movs	r2, r3
1004aabc:	697b      	ldr	r3, [r7, #20]
1004aabe:	189b      	adds	r3, r3, r2
1004aac0:	225d      	movs	r2, #93	@ 0x5d
1004aac2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS0_ANA_ENG;
1004aac4:	4a5f      	ldr	r2, [pc, #380]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004aac6:	239d      	movs	r3, #157	@ 0x9d
1004aac8:	009b      	lsls	r3, r3, #2
1004aaca:	58d1      	ldr	r1, [r2, r3]
1004aacc:	183b      	adds	r3, r7, r0
1004aace:	781b      	ldrb	r3, [r3, #0]
1004aad0:	0004      	movs	r4, r0
1004aad2:	183a      	adds	r2, r7, r0
1004aad4:	1c58      	adds	r0, r3, #1
1004aad6:	7010      	strb	r0, [r2, #0]
1004aad8:	001a      	movs	r2, r3
1004aada:	697b      	ldr	r3, [r7, #20]
1004aadc:	189b      	adds	r3, r3, r2
1004aade:	b2ca      	uxtb	r2, r1
1004aae0:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
1004aae2:	0020      	movs	r0, r4
1004aae4:	183b      	adds	r3, r7, r0
1004aae6:	781b      	ldrb	r3, [r3, #0]
1004aae8:	183a      	adds	r2, r7, r0
1004aaea:	1c59      	adds	r1, r3, #1
1004aaec:	7011      	strb	r1, [r2, #0]
1004aaee:	001a      	movs	r2, r3
1004aaf0:	697b      	ldr	r3, [r7, #20]
1004aaf2:	189b      	adds	r3, r3, r2
1004aaf4:	2201      	movs	r2, #1
1004aaf6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_RXADC_ANA_USR;
1004aaf8:	183b      	adds	r3, r7, r0
1004aafa:	781b      	ldrb	r3, [r3, #0]
1004aafc:	183a      	adds	r2, r7, r0
1004aafe:	1c59      	adds	r1, r3, #1
1004ab00:	7011      	strb	r1, [r2, #0]
1004ab02:	001a      	movs	r2, r3
1004ab04:	697b      	ldr	r3, [r7, #20]
1004ab06:	189b      	adds	r3, r3, r2
1004ab08:	2252      	movs	r2, #82	@ 0x52
1004ab0a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->RXADC_ANA_USR;
1004ab0c:	4a4d      	ldr	r2, [pc, #308]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004ab0e:	2392      	movs	r3, #146	@ 0x92
1004ab10:	009b      	lsls	r3, r3, #2
1004ab12:	58d1      	ldr	r1, [r2, r3]
1004ab14:	183b      	adds	r3, r7, r0
1004ab16:	781b      	ldrb	r3, [r3, #0]
1004ab18:	0004      	movs	r4, r0
1004ab1a:	183a      	adds	r2, r7, r0
1004ab1c:	1c58      	adds	r0, r3, #1
1004ab1e:	7010      	strb	r0, [r2, #0]
1004ab20:	001a      	movs	r2, r3
1004ab22:	697b      	ldr	r3, [r7, #20]
1004ab24:	189b      	adds	r3, r3, r2
1004ab26:	b2ca      	uxtb	r2, r1
1004ab28:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
1004ab2a:	0020      	movs	r0, r4
1004ab2c:	183b      	adds	r3, r7, r0
1004ab2e:	781b      	ldrb	r3, [r3, #0]
1004ab30:	183a      	adds	r2, r7, r0
1004ab32:	1c59      	adds	r1, r3, #1
1004ab34:	7011      	strb	r1, [r2, #0]
1004ab36:	001a      	movs	r2, r3
1004ab38:	697b      	ldr	r3, [r7, #20]
1004ab3a:	189b      	adds	r3, r3, r2
1004ab3c:	2201      	movs	r2, #1
1004ab3e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_AFC1_DIG_ENG;
1004ab40:	183b      	adds	r3, r7, r0
1004ab42:	781b      	ldrb	r3, [r3, #0]
1004ab44:	183a      	adds	r2, r7, r0
1004ab46:	1c59      	adds	r1, r3, #1
1004ab48:	7011      	strb	r1, [r2, #0]
1004ab4a:	001a      	movs	r2, r3
1004ab4c:	697b      	ldr	r3, [r7, #20]
1004ab4e:	189b      	adds	r3, r3, r2
1004ab50:	2212      	movs	r2, #18
1004ab52:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->AFC1_DIG_ENG;
1004ab54:	4a3b      	ldr	r2, [pc, #236]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004ab56:	23a4      	movs	r3, #164	@ 0xa4
1004ab58:	005b      	lsls	r3, r3, #1
1004ab5a:	58d1      	ldr	r1, [r2, r3]
1004ab5c:	183b      	adds	r3, r7, r0
1004ab5e:	781b      	ldrb	r3, [r3, #0]
1004ab60:	0004      	movs	r4, r0
1004ab62:	183a      	adds	r2, r7, r0
1004ab64:	1c58      	adds	r0, r3, #1
1004ab66:	7010      	strb	r0, [r2, #0]
1004ab68:	001a      	movs	r2, r3
1004ab6a:	697b      	ldr	r3, [r7, #20]
1004ab6c:	189b      	adds	r3, r3, r2
1004ab6e:	b2ca      	uxtb	r2, r1
1004ab70:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004ab72:	0020      	movs	r0, r4
1004ab74:	183b      	adds	r3, r7, r0
1004ab76:	781b      	ldrb	r3, [r3, #0]
1004ab78:	183a      	adds	r2, r7, r0
1004ab7a:	1c59      	adds	r1, r3, #1
1004ab7c:	7011      	strb	r1, [r2, #0]
1004ab7e:	001a      	movs	r2, r3
1004ab80:	697b      	ldr	r3, [r7, #20]
1004ab82:	189b      	adds	r3, r3, r2
1004ab84:	2201      	movs	r2, #1
1004ab86:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_DIG_ENG;
1004ab88:	183b      	adds	r3, r7, r0
1004ab8a:	781b      	ldrb	r3, [r3, #0]
1004ab8c:	183a      	adds	r2, r7, r0
1004ab8e:	1c59      	adds	r1, r3, #1
1004ab90:	7011      	strb	r1, [r2, #0]
1004ab92:	001a      	movs	r2, r3
1004ab94:	697b      	ldr	r3, [r7, #20]
1004ab96:	189b      	adds	r3, r3, r2
1004ab98:	2215      	movs	r2, #21
1004ab9a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_DIG_ENG;
1004ab9c:	4a29      	ldr	r2, [pc, #164]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004ab9e:	23aa      	movs	r3, #170	@ 0xaa
1004aba0:	005b      	lsls	r3, r3, #1
1004aba2:	58d1      	ldr	r1, [r2, r3]
1004aba4:	183b      	adds	r3, r7, r0
1004aba6:	781b      	ldrb	r3, [r3, #0]
1004aba8:	0004      	movs	r4, r0
1004abaa:	183a      	adds	r2, r7, r0
1004abac:	1c58      	adds	r0, r3, #1
1004abae:	7010      	strb	r0, [r2, #0]
1004abb0:	001a      	movs	r2, r3
1004abb2:	697b      	ldr	r3, [r7, #20]
1004abb4:	189b      	adds	r3, r3, r2
1004abb6:	b2ca      	uxtb	r2, r1
1004abb8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004abba:	0020      	movs	r0, r4
1004abbc:	183b      	adds	r3, r7, r0
1004abbe:	781b      	ldrb	r3, [r3, #0]
1004abc0:	183a      	adds	r2, r7, r0
1004abc2:	1c59      	adds	r1, r3, #1
1004abc4:	7011      	strb	r1, [r2, #0]
1004abc6:	001a      	movs	r2, r3
1004abc8:	697b      	ldr	r3, [r7, #20]
1004abca:	189b      	adds	r3, r3, r2
1004abcc:	2201      	movs	r2, #1
1004abce:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_LR;
1004abd0:	183b      	adds	r3, r7, r0
1004abd2:	781b      	ldrb	r3, [r3, #0]
1004abd4:	183a      	adds	r2, r7, r0
1004abd6:	1c59      	adds	r1, r3, #1
1004abd8:	7011      	strb	r1, [r2, #0]
1004abda:	001a      	movs	r2, r3
1004abdc:	697b      	ldr	r3, [r7, #20]
1004abde:	189b      	adds	r3, r3, r2
1004abe0:	221a      	movs	r2, #26
1004abe2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_LR;
1004abe4:	4a17      	ldr	r2, [pc, #92]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004abe6:	23b4      	movs	r3, #180	@ 0xb4
1004abe8:	005b      	lsls	r3, r3, #1
1004abea:	58d1      	ldr	r1, [r2, r3]
1004abec:	183b      	adds	r3, r7, r0
1004abee:	781b      	ldrb	r3, [r3, #0]
1004abf0:	0004      	movs	r4, r0
1004abf2:	183a      	adds	r2, r7, r0
1004abf4:	1c58      	adds	r0, r3, #1
1004abf6:	7010      	strb	r0, [r2, #0]
1004abf8:	001a      	movs	r2, r3
1004abfa:	697b      	ldr	r3, [r7, #20]
1004abfc:	189b      	adds	r3, r3, r2
1004abfe:	b2ca      	uxtb	r2, r1
1004ac00:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004ac02:	0020      	movs	r0, r4
1004ac04:	183b      	adds	r3, r7, r0
1004ac06:	781b      	ldrb	r3, [r3, #0]
1004ac08:	183a      	adds	r2, r7, r0
1004ac0a:	1c59      	adds	r1, r3, #1
1004ac0c:	7011      	strb	r1, [r2, #0]
1004ac0e:	001a      	movs	r2, r3
1004ac10:	697b      	ldr	r3, [r7, #20]
1004ac12:	189b      	adds	r3, r3, r2
1004ac14:	2201      	movs	r2, #1
1004ac16:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_RSSI_THR_DIG_ENG;
1004ac18:	183b      	adds	r3, r7, r0
1004ac1a:	781b      	ldrb	r3, [r3, #0]
1004ac1c:	183a      	adds	r2, r7, r0
1004ac1e:	1c59      	adds	r1, r3, #1
1004ac20:	7011      	strb	r1, [r2, #0]
1004ac22:	001a      	movs	r2, r3
1004ac24:	697b      	ldr	r3, [r7, #20]
1004ac26:	189b      	adds	r3, r3, r2
1004ac28:	2222      	movs	r2, #34	@ 0x22
1004ac2a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_RSSI_THR_DIG_ENG;
1004ac2c:	4a05      	ldr	r2, [pc, #20]	@ (1004ac44 <HAL_RADIO_Init+0x488>)
1004ac2e:	23c4      	movs	r3, #196	@ 0xc4
1004ac30:	005b      	lsls	r3, r3, #1
1004ac32:	58d1      	ldr	r1, [r2, r3]
1004ac34:	183b      	adds	r3, r7, r0
1004ac36:	781b      	ldrb	r3, [r3, #0]
1004ac38:	0004      	movs	r4, r0
1004ac3a:	e005      	b.n	1004ac48 <HAL_RADIO_Init+0x48c>
1004ac3c:	200000c0 	.word	0x200000c0
1004ac40:	60001800 	.word	0x60001800
1004ac44:	60001400 	.word	0x60001400
1004ac48:	183a      	adds	r2, r7, r0
1004ac4a:	1c58      	adds	r0, r3, #1
1004ac4c:	7010      	strb	r0, [r2, #0]
1004ac4e:	001a      	movs	r2, r3
1004ac50:	697b      	ldr	r3, [r7, #20]
1004ac52:	189b      	adds	r3, r3, r2
1004ac54:	b2ca      	uxtb	r2, r1
1004ac56:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004ac58:	0020      	movs	r0, r4
1004ac5a:	183b      	adds	r3, r7, r0
1004ac5c:	781b      	ldrb	r3, [r3, #0]
1004ac5e:	183a      	adds	r2, r7, r0
1004ac60:	1c59      	adds	r1, r3, #1
1004ac62:	7011      	strb	r1, [r2, #0]
1004ac64:	001a      	movs	r2, r3
1004ac66:	697b      	ldr	r3, [r7, #20]
1004ac68:	189b      	adds	r3, r3, r2
1004ac6a:	2201      	movs	r2, #1
1004ac6c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_PD_THR_DIG_ENG;
1004ac6e:	183b      	adds	r3, r7, r0
1004ac70:	781b      	ldrb	r3, [r3, #0]
1004ac72:	183a      	adds	r2, r7, r0
1004ac74:	1c59      	adds	r1, r3, #1
1004ac76:	7011      	strb	r1, [r2, #0]
1004ac78:	001a      	movs	r2, r3
1004ac7a:	697b      	ldr	r3, [r7, #20]
1004ac7c:	189b      	adds	r3, r3, r2
1004ac7e:	2221      	movs	r2, #33	@ 0x21
1004ac80:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_PD_THR_DIG_ENG;
1004ac82:	4a6d      	ldr	r2, [pc, #436]	@ (1004ae38 <HAL_RADIO_Init+0x67c>)
1004ac84:	23c2      	movs	r3, #194	@ 0xc2
1004ac86:	005b      	lsls	r3, r3, #1
1004ac88:	58d1      	ldr	r1, [r2, r3]
1004ac8a:	183b      	adds	r3, r7, r0
1004ac8c:	781b      	ldrb	r3, [r3, #0]
1004ac8e:	0004      	movs	r4, r0
1004ac90:	183a      	adds	r2, r7, r0
1004ac92:	1c58      	adds	r0, r3, #1
1004ac94:	7010      	strb	r0, [r2, #0]
1004ac96:	001a      	movs	r2, r3
1004ac98:	697b      	ldr	r3, [r7, #20]
1004ac9a:	189b      	adds	r3, r3, r2
1004ac9c:	b2ca      	uxtb	r2, r1
1004ac9e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004aca0:	0020      	movs	r0, r4
1004aca2:	183b      	adds	r3, r7, r0
1004aca4:	781b      	ldrb	r3, [r3, #0]
1004aca6:	183a      	adds	r2, r7, r0
1004aca8:	1c59      	adds	r1, r3, #1
1004acaa:	7011      	strb	r1, [r2, #0]
1004acac:	001a      	movs	r2, r3
1004acae:	697b      	ldr	r3, [r7, #20]
1004acb0:	189b      	adds	r3, r3, r2
1004acb2:	2201      	movs	r2, #1
1004acb4:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_AAC_THR_DIG_ENG;
1004acb6:	183b      	adds	r3, r7, r0
1004acb8:	781b      	ldrb	r3, [r3, #0]
1004acba:	183a      	adds	r2, r7, r0
1004acbc:	1c59      	adds	r1, r3, #1
1004acbe:	7011      	strb	r1, [r2, #0]
1004acc0:	001a      	movs	r2, r3
1004acc2:	697b      	ldr	r3, [r7, #20]
1004acc4:	189b      	adds	r3, r3, r2
1004acc6:	2223      	movs	r2, #35	@ 0x23
1004acc8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_AAC_THR_DIG_ENG;
1004acca:	4a5b      	ldr	r2, [pc, #364]	@ (1004ae38 <HAL_RADIO_Init+0x67c>)
1004accc:	23c6      	movs	r3, #198	@ 0xc6
1004acce:	005b      	lsls	r3, r3, #1
1004acd0:	58d1      	ldr	r1, [r2, r3]
1004acd2:	183b      	adds	r3, r7, r0
1004acd4:	781b      	ldrb	r3, [r3, #0]
1004acd6:	0004      	movs	r4, r0
1004acd8:	183a      	adds	r2, r7, r0
1004acda:	1c58      	adds	r0, r3, #1
1004acdc:	7010      	strb	r0, [r2, #0]
1004acde:	001a      	movs	r2, r3
1004ace0:	697b      	ldr	r3, [r7, #20]
1004ace2:	189b      	adds	r3, r3, r2
1004ace4:	b2ca      	uxtb	r2, r1
1004ace6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004ace8:	0020      	movs	r0, r4
1004acea:	183b      	adds	r3, r7, r0
1004acec:	781b      	ldrb	r3, [r3, #0]
1004acee:	183a      	adds	r2, r7, r0
1004acf0:	1c59      	adds	r1, r3, #1
1004acf2:	7011      	strb	r1, [r2, #0]
1004acf4:	001a      	movs	r2, r3
1004acf6:	697b      	ldr	r3, [r7, #20]
1004acf8:	189b      	adds	r3, r3, r2
1004acfa:	2201      	movs	r2, #1
1004acfc:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_VIT_CONF_DIG_ENG;
1004acfe:	183b      	adds	r3, r7, r0
1004ad00:	781b      	ldrb	r3, [r3, #0]
1004ad02:	183a      	adds	r2, r7, r0
1004ad04:	1c59      	adds	r1, r3, #1
1004ad06:	7011      	strb	r1, [r2, #0]
1004ad08:	001a      	movs	r2, r3
1004ad0a:	697b      	ldr	r3, [r7, #20]
1004ad0c:	189b      	adds	r3, r3, r2
1004ad0e:	221b      	movs	r2, #27
1004ad10:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->VIT_CONF_DIG_ENG;
1004ad12:	4a49      	ldr	r2, [pc, #292]	@ (1004ae38 <HAL_RADIO_Init+0x67c>)
1004ad14:	23b6      	movs	r3, #182	@ 0xb6
1004ad16:	005b      	lsls	r3, r3, #1
1004ad18:	58d1      	ldr	r1, [r2, r3]
1004ad1a:	183b      	adds	r3, r7, r0
1004ad1c:	781b      	ldrb	r3, [r3, #0]
1004ad1e:	0004      	movs	r4, r0
1004ad20:	183a      	adds	r2, r7, r0
1004ad22:	1c58      	adds	r0, r3, #1
1004ad24:	7010      	strb	r0, [r2, #0]
1004ad26:	001a      	movs	r2, r3
1004ad28:	697b      	ldr	r3, [r7, #20]
1004ad2a:	189b      	adds	r3, r3, r2
1004ad2c:	b2ca      	uxtb	r2, r1
1004ad2e:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  hot_table_radio_config[index++] = 0x01;
1004ad30:	0020      	movs	r0, r4
1004ad32:	183b      	adds	r3, r7, r0
1004ad34:	781b      	ldrb	r3, [r3, #0]
1004ad36:	183a      	adds	r2, r7, r0
1004ad38:	1c59      	adds	r1, r3, #1
1004ad3a:	7011      	strb	r1, [r2, #0]
1004ad3c:	001a      	movs	r2, r3
1004ad3e:	697b      	ldr	r3, [r7, #20]
1004ad40:	189b      	adds	r3, r3, r2
1004ad42:	2201      	movs	r2, #1
1004ad44:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG0_USR;
1004ad46:	183b      	adds	r3, r7, r0
1004ad48:	781b      	ldrb	r3, [r3, #0]
1004ad4a:	183a      	adds	r2, r7, r0
1004ad4c:	1c59      	adds	r1, r3, #1
1004ad4e:	7011      	strb	r1, [r2, #0]
1004ad50:	001a      	movs	r2, r3
1004ad52:	697b      	ldr	r3, [r7, #20]
1004ad54:	189b      	adds	r3, r3, r2
1004ad56:	2290      	movs	r2, #144	@ 0x90
1004ad58:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG0_USR;
1004ad5a:	4a37      	ldr	r2, [pc, #220]	@ (1004ae38 <HAL_RADIO_Init+0x67c>)
1004ad5c:	23d0      	movs	r3, #208	@ 0xd0
1004ad5e:	009b      	lsls	r3, r3, #2
1004ad60:	58d1      	ldr	r1, [r2, r3]
1004ad62:	183b      	adds	r3, r7, r0
1004ad64:	781b      	ldrb	r3, [r3, #0]
1004ad66:	0004      	movs	r4, r0
1004ad68:	183a      	adds	r2, r7, r0
1004ad6a:	1c58      	adds	r0, r3, #1
1004ad6c:	7010      	strb	r0, [r2, #0]
1004ad6e:	001a      	movs	r2, r3
1004ad70:	697b      	ldr	r3, [r7, #20]
1004ad72:	189b      	adds	r3, r3, r2
1004ad74:	b2ca      	uxtb	r2, r1
1004ad76:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004ad78:	0020      	movs	r0, r4
1004ad7a:	183b      	adds	r3, r7, r0
1004ad7c:	781b      	ldrb	r3, [r3, #0]
1004ad7e:	183a      	adds	r2, r7, r0
1004ad80:	1c59      	adds	r1, r3, #1
1004ad82:	7011      	strb	r1, [r2, #0]
1004ad84:	001a      	movs	r2, r3
1004ad86:	697b      	ldr	r3, [r7, #20]
1004ad88:	189b      	adds	r3, r3, r2
1004ad8a:	2201      	movs	r2, #1
1004ad8c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG1_USR;
1004ad8e:	183b      	adds	r3, r7, r0
1004ad90:	781b      	ldrb	r3, [r3, #0]
1004ad92:	183a      	adds	r2, r7, r0
1004ad94:	1c59      	adds	r1, r3, #1
1004ad96:	7011      	strb	r1, [r2, #0]
1004ad98:	001a      	movs	r2, r3
1004ad9a:	697b      	ldr	r3, [r7, #20]
1004ad9c:	189b      	adds	r3, r3, r2
1004ad9e:	2291      	movs	r2, #145	@ 0x91
1004ada0:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG1_USR;
1004ada2:	4a25      	ldr	r2, [pc, #148]	@ (1004ae38 <HAL_RADIO_Init+0x67c>)
1004ada4:	23d1      	movs	r3, #209	@ 0xd1
1004ada6:	009b      	lsls	r3, r3, #2
1004ada8:	58d1      	ldr	r1, [r2, r3]
1004adaa:	183b      	adds	r3, r7, r0
1004adac:	781b      	ldrb	r3, [r3, #0]
1004adae:	0004      	movs	r4, r0
1004adb0:	183a      	adds	r2, r7, r0
1004adb2:	1c58      	adds	r0, r3, #1
1004adb4:	7010      	strb	r0, [r2, #0]
1004adb6:	001a      	movs	r2, r3
1004adb8:	697b      	ldr	r3, [r7, #20]
1004adba:	189b      	adds	r3, r3, r2
1004adbc:	b2ca      	uxtb	r2, r1
1004adbe:	701a      	strb	r2, [r3, #0]
#endif
  hot_table_radio_config[index++] = 0x00;
1004adc0:	193b      	adds	r3, r7, r4
1004adc2:	781b      	ldrb	r3, [r3, #0]
1004adc4:	193a      	adds	r2, r7, r4
1004adc6:	1c59      	adds	r1, r3, #1
1004adc8:	7011      	strb	r1, [r2, #0]
1004adca:	001a      	movs	r2, r3
1004adcc:	697b      	ldr	r3, [r7, #20]
1004adce:	189b      	adds	r3, r3, r2
1004add0:	2200      	movs	r2, #0
1004add2:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config_u32[0] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 1 executed when Wakeup timer triggers */
1004add4:	4a19      	ldr	r2, [pc, #100]	@ (1004ae3c <HAL_RADIO_Init+0x680>)
1004add6:	4b1a      	ldr	r3, [pc, #104]	@ (1004ae40 <HAL_RADIO_Init+0x684>)
1004add8:	601a      	str	r2, [r3, #0]
  hot_table_radio_config_u32[1] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 2 executed when Timer1 triggers       */
1004adda:	4a18      	ldr	r2, [pc, #96]	@ (1004ae3c <HAL_RADIO_Init+0x680>)
1004addc:	4b18      	ldr	r3, [pc, #96]	@ (1004ae40 <HAL_RADIO_Init+0x684>)
1004adde:	605a      	str	r2, [r3, #4]
  hot_table_radio_config_u32[2] = (uint32_t)(&hot_table_radio_config_u32[3]); /* Point to Port 0 command list 3 executed when Timer2 triggers       */
1004ade0:	4a18      	ldr	r2, [pc, #96]	@ (1004ae44 <HAL_RADIO_Init+0x688>)
1004ade2:	4b17      	ldr	r3, [pc, #92]	@ (1004ae40 <HAL_RADIO_Init+0x684>)
1004ade4:	609a      	str	r2, [r3, #8]
  hot_table_radio_config_u32[3] = 0x00000000;                /* Null command */
1004ade6:	4b16      	ldr	r3, [pc, #88]	@ (1004ae40 <HAL_RADIO_Init+0x684>)
1004ade8:	2200      	movs	r2, #0
1004adea:	60da      	str	r2, [r3, #12]

  LL_RADIO_SetRadioConfigurationAddressPointer(hot_table_radio_config_u32[0]);
1004adec:	4b14      	ldr	r3, [pc, #80]	@ (1004ae40 <HAL_RADIO_Init+0x684>)
1004adee:	681b      	ldr	r3, [r3, #0]
1004adf0:	0018      	movs	r0, r3
1004adf2:	f7ff fb3d 	bl	1004a470 <LL_RADIO_SetRadioConfigurationAddressPointer>
  /* Reload radio config pointer */
  RRM->UDRA_CTRL0 = RRM_UDRA_CTRL0_RELOAD_RDCFGPTR;
1004adf6:	4b10      	ldr	r3, [pc, #64]	@ (1004ae38 <HAL_RADIO_Init+0x67c>)
1004adf8:	2201      	movs	r2, #1
1004adfa:	611a      	str	r2, [r3, #16]
  LL_RADIO_Active2ErrorInterrupt_Enable();
1004adfc:	f7ff fc8c 	bl	1004a718 <LL_RADIO_Active2ErrorInterrupt_Enable>
  globalParameters.back2backTime = BACK_TO_BACK_TIME;
  globalParameters.tone_start_stop_flag = 0;
#endif

  /*Clear all interrupts of the BLUE Controller*/
  uint32_t int_val_tmp = BLUE->INTERRUPT1REG;
1004ae00:	23c0      	movs	r3, #192	@ 0xc0
1004ae02:	05db      	lsls	r3, r3, #23
1004ae04:	685b      	ldr	r3, [r3, #4]
1004ae06:	60fb      	str	r3, [r7, #12]
  BLUE->INTERRUPT1REG = int_val_tmp;
1004ae08:	23c0      	movs	r3, #192	@ 0xc0
1004ae0a:	05db      	lsls	r3, r3, #23
1004ae0c:	68fa      	ldr	r2, [r7, #12]
1004ae0e:	605a      	str	r2, [r3, #4]

  /*BLE wake up IRQ Status clearing and enable*/
  WAKEUP->WAKEUP_BLE_IRQ_STATUS |= 1;
1004ae10:	4b0d      	ldr	r3, [pc, #52]	@ (1004ae48 <HAL_RADIO_Init+0x68c>)
1004ae12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004ae14:	4b0c      	ldr	r3, [pc, #48]	@ (1004ae48 <HAL_RADIO_Init+0x68c>)
1004ae16:	2101      	movs	r1, #1
1004ae18:	430a      	orrs	r2, r1
1004ae1a:	645a      	str	r2, [r3, #68]	@ 0x44
  WAKEUP->WAKEUP_BLE_IRQ_ENABLE |= 1;
1004ae1c:	4b0a      	ldr	r3, [pc, #40]	@ (1004ae48 <HAL_RADIO_Init+0x68c>)
1004ae1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004ae20:	4b09      	ldr	r3, [pc, #36]	@ (1004ae48 <HAL_RADIO_Init+0x68c>)
1004ae22:	2101      	movs	r1, #1
1004ae24:	430a      	orrs	r2, r1
1004ae26:	641a      	str	r2, [r3, #64]	@ 0x40
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  int_val_tmp = BLUE->INTERRUPT1REG;
1004ae28:	23c0      	movs	r3, #192	@ 0xc0
1004ae2a:	05db      	lsls	r3, r3, #23
1004ae2c:	685b      	ldr	r3, [r3, #4]
1004ae2e:	60fb      	str	r3, [r7, #12]

  return;
1004ae30:	46c0      	nop			@ (mov r8, r8)
}
1004ae32:	46bd      	mov	sp, r7
1004ae34:	b00d      	add	sp, #52	@ 0x34
1004ae36:	bd90      	pop	{r4, r7, pc}
1004ae38:	60001400 	.word	0x60001400
1004ae3c:	200021e4 	.word	0x200021e4
1004ae40:	200021d4 	.word	0x200021d4
1004ae44:	200021e0 	.word	0x200021e0
1004ae48:	60001800 	.word	0x60001800

1004ae4c <HAL_RADIO_ReadRSSI>:
/**
  * @brief  Read RSSI
  * @retval int8_t: RSSI in dBm
  */
int8_t HAL_RADIO_ReadRSSI(void)
{
1004ae4c:	b580      	push	{r7, lr}
1004ae4e:	b086      	sub	sp, #24
1004ae50:	af00      	add	r7, sp, #0
  int32_t rssi_dbm;
  uint32_t rssi0 = RRM->RSSI0_DIG_OUT;
1004ae52:	4a24      	ldr	r2, [pc, #144]	@ (1004aee4 <HAL_RADIO_ReadRSSI+0x98>)
1004ae54:	23a9      	movs	r3, #169	@ 0xa9
1004ae56:	009b      	lsls	r3, r3, #2
1004ae58:	58d3      	ldr	r3, [r2, r3]
1004ae5a:	60fb      	str	r3, [r7, #12]
  uint32_t rssi1 = RRM->RSSI1_DIG_OUT;
1004ae5c:	4a21      	ldr	r2, [pc, #132]	@ (1004aee4 <HAL_RADIO_ReadRSSI+0x98>)
1004ae5e:	23aa      	movs	r3, #170	@ 0xaa
1004ae60:	009b      	lsls	r3, r3, #2
1004ae62:	58d3      	ldr	r3, [r2, r3]
1004ae64:	60bb      	str	r3, [r7, #8]

  uint32_t rssi_int16 = ((rssi1 & 0xFF) << 8) | (rssi0 & 0xFF);
1004ae66:	68bb      	ldr	r3, [r7, #8]
1004ae68:	021b      	lsls	r3, r3, #8
1004ae6a:	041b      	lsls	r3, r3, #16
1004ae6c:	0c1a      	lsrs	r2, r3, #16
1004ae6e:	68fb      	ldr	r3, [r7, #12]
1004ae70:	21ff      	movs	r1, #255	@ 0xff
1004ae72:	400b      	ands	r3, r1
1004ae74:	4313      	orrs	r3, r2
1004ae76:	613b      	str	r3, [r7, #16]
  uint32_t reg_agc = RRM->AGC_DIG_OUT;
1004ae78:	4a1a      	ldr	r2, [pc, #104]	@ (1004aee4 <HAL_RADIO_ReadRSSI+0x98>)
1004ae7a:	23ab      	movs	r3, #171	@ 0xab
1004ae7c:	009b      	lsls	r3, r3, #2
1004ae7e:	58d3      	ldr	r3, [r2, r3]
1004ae80:	607b      	str	r3, [r7, #4]

  if ((rssi_int16 == 0U) || (reg_agc > 0xbU))
1004ae82:	693b      	ldr	r3, [r7, #16]
1004ae84:	2b00      	cmp	r3, #0
1004ae86:	d002      	beq.n	1004ae8e <HAL_RADIO_ReadRSSI+0x42>
1004ae88:	687b      	ldr	r3, [r7, #4]
1004ae8a:	2b0b      	cmp	r3, #11
1004ae8c:	d902      	bls.n	1004ae94 <HAL_RADIO_ReadRSSI+0x48>
  {
    rssi_dbm = 127 ;
1004ae8e:	237f      	movs	r3, #127	@ 0x7f
1004ae90:	617b      	str	r3, [r7, #20]
1004ae92:	e020      	b.n	1004aed6 <HAL_RADIO_ReadRSSI+0x8a>
  }
  else
  {
    rssi_dbm = (int32_t)reg_agc * 6 - RSSI_OFFSET;//127 ;
1004ae94:	687a      	ldr	r2, [r7, #4]
1004ae96:	0013      	movs	r3, r2
1004ae98:	005b      	lsls	r3, r3, #1
1004ae9a:	189b      	adds	r3, r3, r2
1004ae9c:	005b      	lsls	r3, r3, #1
1004ae9e:	3b77      	subs	r3, #119	@ 0x77
1004aea0:	617b      	str	r3, [r7, #20]
    while (rssi_int16 > 30U)
1004aea2:	e005      	b.n	1004aeb0 <HAL_RADIO_ReadRSSI+0x64>
    {
      rssi_dbm = rssi_dbm + 6 ;
1004aea4:	697b      	ldr	r3, [r7, #20]
1004aea6:	3306      	adds	r3, #6
1004aea8:	617b      	str	r3, [r7, #20]
      rssi_int16 = (rssi_int16 >> 1) ;
1004aeaa:	693b      	ldr	r3, [r7, #16]
1004aeac:	085b      	lsrs	r3, r3, #1
1004aeae:	613b      	str	r3, [r7, #16]
    while (rssi_int16 > 30U)
1004aeb0:	693b      	ldr	r3, [r7, #16]
1004aeb2:	2b1e      	cmp	r3, #30
1004aeb4:	d8f6      	bhi.n	1004aea4 <HAL_RADIO_ReadRSSI+0x58>
    }
    rssi_dbm = rssi_dbm + (int32_t)(uint32_t)((417U * rssi_int16 + 18080U) >> 10);
1004aeb6:	693a      	ldr	r2, [r7, #16]
1004aeb8:	0013      	movs	r3, r2
1004aeba:	005b      	lsls	r3, r3, #1
1004aebc:	189b      	adds	r3, r3, r2
1004aebe:	009b      	lsls	r3, r3, #2
1004aec0:	189b      	adds	r3, r3, r2
1004aec2:	015b      	lsls	r3, r3, #5
1004aec4:	189b      	adds	r3, r3, r2
1004aec6:	4a08      	ldr	r2, [pc, #32]	@ (1004aee8 <HAL_RADIO_ReadRSSI+0x9c>)
1004aec8:	4694      	mov	ip, r2
1004aeca:	4463      	add	r3, ip
1004aecc:	0a9b      	lsrs	r3, r3, #10
1004aece:	001a      	movs	r2, r3
1004aed0:	697b      	ldr	r3, [r7, #20]
1004aed2:	189b      	adds	r3, r3, r2
1004aed4:	617b      	str	r3, [r7, #20]
  }
  return (int8_t)rssi_dbm;
1004aed6:	697b      	ldr	r3, [r7, #20]
1004aed8:	b25b      	sxtb	r3, r3
}
1004aeda:	0018      	movs	r0, r3
1004aedc:	46bd      	mov	sp, r7
1004aede:	b006      	add	sp, #24
1004aee0:	bd80      	pop	{r7, pc}
1004aee2:	46c0      	nop			@ (mov r8, r8)
1004aee4:	60001400 	.word	0x60001400
1004aee8:	000046a0 	.word	0x000046a0

1004aeec <HAL_RADIO_TXRX_IRQHandler>:
__weak void HAL_RADIO_TxRxSeqCallback(void)
{
}

void HAL_RADIO_TXRX_IRQHandler(void)
{
1004aeec:	b580      	push	{r7, lr}
1004aeee:	b082      	sub	sp, #8
1004aef0:	af00      	add	r7, sp, #0
  uint32_t blue_status = BLUE->STATUSREG;
1004aef2:	23c0      	movs	r3, #192	@ 0xc0
1004aef4:	05db      	lsls	r3, r3, #23
1004aef6:	69db      	ldr	r3, [r3, #28]
1004aef8:	607b      	str	r3, [r7, #4]
  uint32_t blue_interrupt = BLUE->INTERRUPT1REG;
1004aefa:	23c0      	movs	r3, #192	@ 0xc0
1004aefc:	05db      	lsls	r3, r3, #23
1004aefe:	685b      	ldr	r3, [r3, #4]
1004af00:	603b      	str	r3, [r7, #0]

  /** clear all pending interrupts */
  BLUE->INTERRUPT1REG = blue_interrupt;
1004af02:	23c0      	movs	r3, #192	@ 0xc0
1004af04:	05db      	lsls	r3, r3, #23
1004af06:	683a      	ldr	r2, [r7, #0]
1004af08:	605a      	str	r2, [r3, #4]

  HAL_RADIO_TIMER_EndOfRadioActivityIsr();
1004af0a:	f000 fcd3 	bl	1004b8b4 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>

#if (USE_RADIO_PROPRIETARY_DRIVER == 1)
  HAL_RADIO_ActionPacketIsr(blue_status | blue_interrupt);
#endif

  HAL_RADIO_TxRxCallback(blue_status | blue_interrupt);
1004af0e:	687a      	ldr	r2, [r7, #4]
1004af10:	683b      	ldr	r3, [r7, #0]
1004af12:	4313      	orrs	r3, r2
1004af14:	0018      	movs	r0, r3
1004af16:	f006 fda6 	bl	10051a66 <HAL_RADIO_TxRxCallback>

  HAL_RADIO_TIMER_RadioTimerIsr();
1004af1a:	f000 fcc5 	bl	1004b8a8 <HAL_RADIO_TIMER_RadioTimerIsr>
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  blue_interrupt = BLUE->INTERRUPT1REG;
1004af1e:	23c0      	movs	r3, #192	@ 0xc0
1004af20:	05db      	lsls	r3, r3, #23
1004af22:	685b      	ldr	r3, [r3, #4]
1004af24:	603b      	str	r3, [r7, #0]
}
1004af26:	46c0      	nop			@ (mov r8, r8)
1004af28:	46bd      	mov	sp, r7
1004af2a:	b002      	add	sp, #8
1004af2c:	bd80      	pop	{r7, pc}

1004af2e <HAL_RADIO_TXRX_SEQ_IRQHandler>:


void HAL_RADIO_TXRX_SEQ_IRQHandler(void)
{
1004af2e:	b580      	push	{r7, lr}
1004af30:	af00      	add	r7, sp, #0
  HAL_RADIO_TxRxSeqCallback();
1004af32:	f006 fbbd 	bl	100516b0 <HAL_RADIO_TxRxSeqCallback>
}
1004af36:	46c0      	nop			@ (mov r8, r8)
1004af38:	46bd      	mov	sp, r7
1004af3a:	bd80      	pop	{r7, pc}

1004af3c <__NVIC_EnableIRQ>:
{
1004af3c:	b580      	push	{r7, lr}
1004af3e:	b082      	sub	sp, #8
1004af40:	af00      	add	r7, sp, #0
1004af42:	0002      	movs	r2, r0
1004af44:	1dfb      	adds	r3, r7, #7
1004af46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004af48:	1dfb      	adds	r3, r7, #7
1004af4a:	781b      	ldrb	r3, [r3, #0]
1004af4c:	2b7f      	cmp	r3, #127	@ 0x7f
1004af4e:	d809      	bhi.n	1004af64 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1004af50:	1dfb      	adds	r3, r7, #7
1004af52:	781b      	ldrb	r3, [r3, #0]
1004af54:	001a      	movs	r2, r3
1004af56:	231f      	movs	r3, #31
1004af58:	401a      	ands	r2, r3
1004af5a:	4b04      	ldr	r3, [pc, #16]	@ (1004af6c <__NVIC_EnableIRQ+0x30>)
1004af5c:	2101      	movs	r1, #1
1004af5e:	4091      	lsls	r1, r2
1004af60:	000a      	movs	r2, r1
1004af62:	601a      	str	r2, [r3, #0]
}
1004af64:	46c0      	nop			@ (mov r8, r8)
1004af66:	46bd      	mov	sp, r7
1004af68:	b002      	add	sp, #8
1004af6a:	bd80      	pop	{r7, pc}
1004af6c:	e000e100 	.word	0xe000e100

1004af70 <LL_RADIO_TIMER_EnableTimer1>:
{
1004af70:	b580      	push	{r7, lr}
1004af72:	b082      	sub	sp, #8
1004af74:	af00      	add	r7, sp, #0
1004af76:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, LL_RADIO_TIMER_1);
1004af78:	687b      	ldr	r3, [r7, #4]
1004af7a:	68db      	ldr	r3, [r3, #12]
1004af7c:	2203      	movs	r2, #3
1004af7e:	4393      	bics	r3, r2
1004af80:	2202      	movs	r2, #2
1004af82:	431a      	orrs	r2, r3
1004af84:	687b      	ldr	r3, [r7, #4]
1004af86:	60da      	str	r2, [r3, #12]
}
1004af88:	46c0      	nop			@ (mov r8, r8)
1004af8a:	46bd      	mov	sp, r7
1004af8c:	b002      	add	sp, #8
1004af8e:	bd80      	pop	{r7, pc}

1004af90 <LL_RADIO_TIMER_DisableTimer1>:
{
1004af90:	b580      	push	{r7, lr}
1004af92:	b082      	sub	sp, #8
1004af94:	af00      	add	r7, sp, #0
1004af96:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004af98:	687b      	ldr	r3, [r7, #4]
1004af9a:	68db      	ldr	r3, [r3, #12]
1004af9c:	2203      	movs	r2, #3
1004af9e:	4393      	bics	r3, r2
1004afa0:	001a      	movs	r2, r3
1004afa2:	687b      	ldr	r3, [r7, #4]
1004afa4:	60da      	str	r2, [r3, #12]
}
1004afa6:	46c0      	nop			@ (mov r8, r8)
1004afa8:	46bd      	mov	sp, r7
1004afaa:	b002      	add	sp, #8
1004afac:	bd80      	pop	{r7, pc}

1004afae <LL_RADIO_TIMER_DisableTimer2>:
{
1004afae:	b580      	push	{r7, lr}
1004afb0:	b082      	sub	sp, #8
1004afb2:	af00      	add	r7, sp, #0
1004afb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004afb6:	687b      	ldr	r3, [r7, #4]
1004afb8:	68db      	ldr	r3, [r3, #12]
1004afba:	2203      	movs	r2, #3
1004afbc:	4393      	bics	r3, r2
1004afbe:	001a      	movs	r2, r3
1004afc0:	687b      	ldr	r3, [r7, #4]
1004afc2:	60da      	str	r2, [r3, #12]
}
1004afc4:	46c0      	nop			@ (mov r8, r8)
1004afc6:	46bd      	mov	sp, r7
1004afc8:	b002      	add	sp, #8
1004afca:	bd80      	pop	{r7, pc}

1004afcc <LL_RADIO_TIMER_SetTimeout>:
{
1004afcc:	b580      	push	{r7, lr}
1004afce:	b082      	sub	sp, #8
1004afd0:	af00      	add	r7, sp, #0
1004afd2:	6078      	str	r0, [r7, #4]
1004afd4:	6039      	str	r1, [r7, #0]
  WRITE_REG(BLUEx->TIMEOUTREG, timeout);
1004afd6:	687b      	ldr	r3, [r7, #4]
1004afd8:	683a      	ldr	r2, [r7, #0]
1004afda:	611a      	str	r2, [r3, #16]
}
1004afdc:	46c0      	nop			@ (mov r8, r8)
1004afde:	46bd      	mov	sp, r7
1004afe0:	b002      	add	sp, #8
1004afe2:	bd80      	pop	{r7, pc}

1004afe4 <LL_RADIO_TIMER_EnableBLEWakeupTimer>:
{
1004afe4:	b580      	push	{r7, lr}
1004afe6:	b082      	sub	sp, #8
1004afe8:	af00      	add	r7, sp, #0
1004afea:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004afec:	687b      	ldr	r3, [r7, #4]
1004afee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004aff0:	2280      	movs	r2, #128	@ 0x80
1004aff2:	05d2      	lsls	r2, r2, #23
1004aff4:	431a      	orrs	r2, r3
1004aff6:	687b      	ldr	r3, [r7, #4]
1004aff8:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004affa:	46c0      	nop			@ (mov r8, r8)
1004affc:	46bd      	mov	sp, r7
1004affe:	b002      	add	sp, #8
1004b000:	bd80      	pop	{r7, pc}
	...

1004b004 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
1004b004:	b580      	push	{r7, lr}
1004b006:	b082      	sub	sp, #8
1004b008:	af00      	add	r7, sp, #0
1004b00a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004b00c:	687b      	ldr	r3, [r7, #4]
1004b00e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004b010:	4a03      	ldr	r2, [pc, #12]	@ (1004b020 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
1004b012:	401a      	ands	r2, r3
1004b014:	687b      	ldr	r3, [r7, #4]
1004b016:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004b018:	46c0      	nop			@ (mov r8, r8)
1004b01a:	46bd      	mov	sp, r7
1004b01c:	b002      	add	sp, #8
1004b01e:	bd80      	pop	{r7, pc}
1004b020:	bfffffff 	.word	0xbfffffff

1004b024 <LL_RADIO_TIMER_EnableCPUWakeupTimer>:
{
1004b024:	b580      	push	{r7, lr}
1004b026:	b082      	sub	sp, #8
1004b028:	af00      	add	r7, sp, #0
1004b02a:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
1004b02c:	687b      	ldr	r3, [r7, #4]
1004b02e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1004b030:	2280      	movs	r2, #128	@ 0x80
1004b032:	05d2      	lsls	r2, r2, #23
1004b034:	431a      	orrs	r2, r3
1004b036:	687b      	ldr	r3, [r7, #4]
1004b038:	631a      	str	r2, [r3, #48]	@ 0x30
}
1004b03a:	46c0      	nop			@ (mov r8, r8)
1004b03c:	46bd      	mov	sp, r7
1004b03e:	b002      	add	sp, #8
1004b040:	bd80      	pop	{r7, pc}
	...

1004b044 <LL_RADIO_TIMER_DisableCPUWakeupTimer>:
{
1004b044:	b580      	push	{r7, lr}
1004b046:	b082      	sub	sp, #8
1004b048:	af00      	add	r7, sp, #0
1004b04a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
1004b04c:	687b      	ldr	r3, [r7, #4]
1004b04e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1004b050:	4a03      	ldr	r2, [pc, #12]	@ (1004b060 <LL_RADIO_TIMER_DisableCPUWakeupTimer+0x1c>)
1004b052:	401a      	ands	r2, r3
1004b054:	687b      	ldr	r3, [r7, #4]
1004b056:	631a      	str	r2, [r3, #48]	@ 0x30
}
1004b058:	46c0      	nop			@ (mov r8, r8)
1004b05a:	46bd      	mov	sp, r7
1004b05c:	b002      	add	sp, #8
1004b05e:	bd80      	pop	{r7, pc}
1004b060:	bfffffff 	.word	0xbfffffff

1004b064 <LL_RADIO_TIMER_SetWakeupOffset>:
{
1004b064:	b580      	push	{r7, lr}
1004b066:	b082      	sub	sp, #8
1004b068:	af00      	add	r7, sp, #0
1004b06a:	6078      	str	r0, [r7, #4]
1004b06c:	000a      	movs	r2, r1
1004b06e:	1cfb      	adds	r3, r7, #3
1004b070:	701a      	strb	r2, [r3, #0]
  WRITE_REG(WAKEUPx->WAKEUP_OFFSET[0], (Time & 0xFF));
1004b072:	1cfb      	adds	r3, r7, #3
1004b074:	781a      	ldrb	r2, [r3, #0]
1004b076:	687b      	ldr	r3, [r7, #4]
1004b078:	609a      	str	r2, [r3, #8]
}
1004b07a:	46c0      	nop			@ (mov r8, r8)
1004b07c:	46bd      	mov	sp, r7
1004b07e:	b002      	add	sp, #8
1004b080:	bd80      	pop	{r7, pc}

1004b082 <LL_RADIO_TIMER_SetBLEWakeupTime>:
{
1004b082:	b580      	push	{r7, lr}
1004b084:	b082      	sub	sp, #8
1004b086:	af00      	add	r7, sp, #0
1004b088:	6078      	str	r0, [r7, #4]
1004b08a:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->BLUE_WAKEUP_TIME, Time);
1004b08c:	687b      	ldr	r3, [r7, #4]
1004b08e:	683a      	ldr	r2, [r7, #0]
1004b090:	625a      	str	r2, [r3, #36]	@ 0x24
}
1004b092:	46c0      	nop			@ (mov r8, r8)
1004b094:	46bd      	mov	sp, r7
1004b096:	b002      	add	sp, #8
1004b098:	bd80      	pop	{r7, pc}

1004b09a <LL_RADIO_TIMER_SetCPUWakeupTime>:
{
1004b09a:	b580      	push	{r7, lr}
1004b09c:	b082      	sub	sp, #8
1004b09e:	af00      	add	r7, sp, #0
1004b0a0:	6078      	str	r0, [r7, #4]
1004b0a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->CM0_WAKEUP_TIME, Time);
1004b0a4:	687b      	ldr	r3, [r7, #4]
1004b0a6:	683a      	ldr	r2, [r7, #0]
1004b0a8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004b0aa:	46c0      	nop			@ (mov r8, r8)
1004b0ac:	46bd      	mov	sp, r7
1004b0ae:	b002      	add	sp, #8
1004b0b0:	bd80      	pop	{r7, pc}

1004b0b2 <LL_RADIO_TIMER_GetAbsoluteTime>:
{
1004b0b2:	b580      	push	{r7, lr}
1004b0b4:	b082      	sub	sp, #8
1004b0b6:	af00      	add	r7, sp, #0
1004b0b8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
1004b0ba:	687b      	ldr	r3, [r7, #4]
1004b0bc:	691b      	ldr	r3, [r3, #16]
}
1004b0be:	0018      	movs	r0, r3
1004b0c0:	46bd      	mov	sp, r7
1004b0c2:	b002      	add	sp, #8
1004b0c4:	bd80      	pop	{r7, pc}

1004b0c6 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    SLEEP_EN   LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP_TypeDef *WAKEUPx)
{
1004b0c6:	b580      	push	{r7, lr}
1004b0c8:	b082      	sub	sp, #8
1004b0ca:	af00      	add	r7, sp, #0
1004b0cc:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN);
1004b0ce:	687b      	ldr	r3, [r7, #4]
1004b0d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004b0d2:	2280      	movs	r2, #128	@ 0x80
1004b0d4:	0592      	lsls	r2, r2, #22
1004b0d6:	431a      	orrs	r2, r3
1004b0d8:	687b      	ldr	r3, [r7, #4]
1004b0da:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004b0dc:	46c0      	nop			@ (mov r8, r8)
1004b0de:	46bd      	mov	sp, r7
1004b0e0:	b002      	add	sp, #8
1004b0e2:	bd80      	pop	{r7, pc}

1004b0e4 <LL_RADIO_TIMER_SetSleepRequestMode>:
  * @param  WAKEUPx Radio Timer instance
  * @param  mode Sleep mode value in range 0-7
  * @retval None.
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP_TypeDef *WAKEUPx, uint8_t mode)
{
1004b0e4:	b580      	push	{r7, lr}
1004b0e6:	b082      	sub	sp, #8
1004b0e8:	af00      	add	r7, sp, #0
1004b0ea:	6078      	str	r0, [r7, #4]
1004b0ec:	000a      	movs	r2, r1
1004b0ee:	1cfb      	adds	r3, r7, #3
1004b0f0:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  return;
#else
  MODIFY_REG_FIELD(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_REQ_MODE, (mode & 0x7));
1004b0f2:	4b08      	ldr	r3, [pc, #32]	@ (1004b114 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
1004b0f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004b0f6:	2207      	movs	r2, #7
1004b0f8:	4393      	bics	r3, r2
1004b0fa:	0019      	movs	r1, r3
1004b0fc:	1cfb      	adds	r3, r7, #3
1004b0fe:	781b      	ldrb	r3, [r3, #0]
1004b100:	2207      	movs	r2, #7
1004b102:	401a      	ands	r2, r3
1004b104:	4b03      	ldr	r3, [pc, #12]	@ (1004b114 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
1004b106:	430a      	orrs	r2, r1
1004b108:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
}
1004b10a:	46c0      	nop			@ (mov r8, r8)
1004b10c:	46bd      	mov	sp, r7
1004b10e:	b002      	add	sp, #8
1004b110:	bd80      	pop	{r7, pc}
1004b112:	46c0      	nop			@ (mov r8, r8)
1004b114:	60001800 	.word	0x60001800

1004b118 <LL_RADIO_TIMER_EnableCPUWakeupIT>:
  * @rmtoll WAKEUP_CM0_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableCPUWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
1004b118:	b580      	push	{r7, lr}
1004b11a:	b082      	sub	sp, #8
1004b11c:	af00      	add	r7, sp, #0
1004b11e:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_ENABLE, WAKEUP_WAKEUP_CM0_IRQ_ENABLE_WAKEUP_IT);
1004b120:	687b      	ldr	r3, [r7, #4]
1004b122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004b124:	2201      	movs	r2, #1
1004b126:	431a      	orrs	r2, r3
1004b128:	687b      	ldr	r3, [r7, #4]
1004b12a:	649a      	str	r2, [r3, #72]	@ 0x48
}
1004b12c:	46c0      	nop			@ (mov r8, r8)
1004b12e:	46bd      	mov	sp, r7
1004b130:	b002      	add	sp, #8
1004b132:	bd80      	pop	{r7, pc}

1004b134 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004b134:	b580      	push	{r7, lr}
1004b136:	b082      	sub	sp, #8
1004b138:	af00      	add	r7, sp, #0
1004b13a:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT);
1004b13c:	687b      	ldr	r3, [r7, #4]
1004b13e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004b140:	2201      	movs	r2, #1
1004b142:	431a      	orrs	r2, r3
1004b144:	687b      	ldr	r3, [r7, #4]
1004b146:	64da      	str	r2, [r3, #76]	@ 0x4c
}
1004b148:	46c0      	nop			@ (mov r8, r8)
1004b14a:	46bd      	mov	sp, r7
1004b14c:	b002      	add	sp, #8
1004b14e:	bd80      	pop	{r7, pc}

1004b150 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004b150:	b580      	push	{r7, lr}
1004b152:	b082      	sub	sp, #8
1004b154:	af00      	add	r7, sp, #0
1004b156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
1004b158:	687b      	ldr	r3, [r7, #4]
1004b15a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004b15c:	2201      	movs	r2, #1
1004b15e:	4013      	ands	r3, r2
1004b160:	2b01      	cmp	r3, #1
1004b162:	d101      	bne.n	1004b168 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x18>
1004b164:	2301      	movs	r3, #1
1004b166:	e000      	b.n	1004b16a <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x1a>
1004b168:	2300      	movs	r3, #0
}
1004b16a:	0018      	movs	r0, r3
1004b16c:	46bd      	mov	sp, r7
1004b16e:	b002      	add	sp, #8
1004b170:	bd80      	pop	{r7, pc}

1004b172 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>:
  * @param RADIO_CTRLx: Radio Control instance
  * @param  Count Slow clock is measured in a window of SLOW_COUNT+1 slow clock cycles
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL_TypeDef *RADIO_CTRLx, uint32_t Count)
{
1004b172:	b580      	push	{r7, lr}
1004b174:	b082      	sub	sp, #8
1004b176:	af00      	add	r7, sp, #0
1004b178:	6078      	str	r0, [r7, #4]
1004b17a:	6039      	str	r1, [r7, #0]
  WRITE_REG(RADIO_CTRLx->CLK32COUNT_REG, Count);
1004b17c:	687b      	ldr	r3, [r7, #4]
1004b17e:	683a      	ldr	r2, [r7, #0]
1004b180:	605a      	str	r2, [r3, #4]
}
1004b182:	46c0      	nop			@ (mov r8, r8)
1004b184:	46bd      	mov	sp, r7
1004b186:	b002      	add	sp, #8
1004b188:	bd80      	pop	{r7, pc}

1004b18a <LL_RADIO_TIMER_StartLSICalibration>:
  * @brief  Start the LSI calibration procedure.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004b18a:	b580      	push	{r7, lr}
1004b18c:	b082      	sub	sp, #8
1004b18e:	af00      	add	r7, sp, #0
1004b190:	6078      	str	r0, [r7, #4]
  WRITE_REG(RADIO_CTRLx->CLK32PERIOD_REG, 0);
1004b192:	687b      	ldr	r3, [r7, #4]
1004b194:	2200      	movs	r2, #0
1004b196:	609a      	str	r2, [r3, #8]
}
1004b198:	46c0      	nop			@ (mov r8, r8)
1004b19a:	46bd      	mov	sp, r7
1004b19c:	b002      	add	sp, #8
1004b19e:	bd80      	pop	{r7, pc}

1004b1a0 <LL_RADIO_TIMER_GetLSIPeriod>:
  * @brief  Get the LSI clock Period calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock period calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004b1a0:	b580      	push	{r7, lr}
1004b1a2:	b082      	sub	sp, #8
1004b1a4:	af00      	add	r7, sp, #0
1004b1a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32PERIOD_REG));
1004b1a8:	687b      	ldr	r3, [r7, #4]
1004b1aa:	689b      	ldr	r3, [r3, #8]
}
1004b1ac:	0018      	movs	r0, r3
1004b1ae:	46bd      	mov	sp, r7
1004b1b0:	b002      	add	sp, #8
1004b1b2:	bd80      	pop	{r7, pc}

1004b1b4 <LL_RADIO_TIMER_GetLSIFrequency>:
  * @brief  Get the LSI clock Frequency calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock frequency calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004b1b4:	b580      	push	{r7, lr}
1004b1b6:	b082      	sub	sp, #8
1004b1b8:	af00      	add	r7, sp, #0
1004b1ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32FREQUENCY_REG));
1004b1bc:	687b      	ldr	r3, [r7, #4]
1004b1be:	68db      	ldr	r3, [r3, #12]
}
1004b1c0:	0018      	movs	r0, r3
1004b1c2:	46bd      	mov	sp, r7
1004b1c4:	b002      	add	sp, #8
1004b1c6:	bd80      	pop	{r7, pc}

1004b1c8 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>:
  * @brief  Clear the LSI calibration ended flag.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004b1c8:	b580      	push	{r7, lr}
1004b1ca:	b082      	sub	sp, #8
1004b1cc:	af00      	add	r7, sp, #0
1004b1ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ);
1004b1d0:	687b      	ldr	r3, [r7, #4]
1004b1d2:	691b      	ldr	r3, [r3, #16]
1004b1d4:	2201      	movs	r2, #1
1004b1d6:	431a      	orrs	r2, r3
1004b1d8:	687b      	ldr	r3, [r7, #4]
1004b1da:	611a      	str	r2, [r3, #16]
}
1004b1dc:	46c0      	nop			@ (mov r8, r8)
1004b1de:	46bd      	mov	sp, r7
1004b1e0:	b002      	add	sp, #8
1004b1e2:	bd80      	pop	{r7, pc}

1004b1e4 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>:
  * @brief  Check if the LSI calibration ended flag is set or not.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004b1e4:	b580      	push	{r7, lr}
1004b1e6:	b082      	sub	sp, #8
1004b1e8:	af00      	add	r7, sp, #0
1004b1ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ) == (RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ)) ? 1UL : 0UL);
1004b1ec:	687b      	ldr	r3, [r7, #4]
1004b1ee:	691b      	ldr	r3, [r3, #16]
1004b1f0:	2201      	movs	r2, #1
1004b1f2:	4013      	ands	r3, r2
1004b1f4:	2b01      	cmp	r3, #1
1004b1f6:	d101      	bne.n	1004b1fc <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x18>
1004b1f8:	2301      	movs	r3, #1
1004b1fa:	e000      	b.n	1004b1fe <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x1a>
1004b1fc:	2300      	movs	r3, #0
}
1004b1fe:	0018      	movs	r0, r3
1004b200:	46bd      	mov	sp, r7
1004b202:	b002      	add	sp, #8
1004b204:	bd80      	pop	{r7, pc}
	...

1004b208 <HAL_RADIO_TIMER_Init>:
  *         section of the application.
  * @param RADIO_TIMER_InitStruct Radio Timer Initialization parameters
  * @retval None
  */
void HAL_RADIO_TIMER_Init(RADIO_TIMER_InitTypeDef *RADIO_TIMER_InitStruct)
{
1004b208:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b20a:	b083      	sub	sp, #12
1004b20c:	af00      	add	r7, sp, #0
1004b20e:	6078      	str	r0, [r7, #4]
  /* Interrupt Configuration */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
1004b210:	4b71      	ldr	r3, [pc, #452]	@ (1004b3d8 <HAL_RADIO_TIMER_Init+0x1d0>)
1004b212:	0018      	movs	r0, r3
1004b214:	f7ff ff8e 	bl	1004b134 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP);
1004b218:	4b6f      	ldr	r3, [pc, #444]	@ (1004b3d8 <HAL_RADIO_TIMER_Init+0x1d0>)
1004b21a:	0018      	movs	r0, r3
1004b21c:	f7ff ff7c 	bl	1004b118 <LL_RADIO_TIMER_EnableCPUWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_CPU_WKUP_IRQn);
1004b220:	2017      	movs	r0, #23
1004b222:	f7ff fe8b 	bl	1004af3c <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_ERROR_IRQn);
1004b226:	2014      	movs	r0, #20
1004b228:	f7ff fe88 	bl	1004af3c <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_TXRX_WKUP_IRQn);
  RADIO_TIMER_Context.hostMargin = MAX(HOST_MARGIN, RADIO_TIMER_InitStruct->XTAL_StartupTime);
#endif

  /* Calibration Setting */
  RADIO_TIMER_Context.calibrationSettings.periodicCalibration = (RADIO_TIMER_InitStruct->periodicCalibrationInterval != 0);
1004b22c:	687b      	ldr	r3, [r7, #4]
1004b22e:	685b      	ldr	r3, [r3, #4]
1004b230:	1e5a      	subs	r2, r3, #1
1004b232:	4193      	sbcs	r3, r2
1004b234:	b2db      	uxtb	r3, r3
1004b236:	001a      	movs	r2, r3
1004b238:	4b68      	ldr	r3, [pc, #416]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b23a:	701a      	strb	r2, [r3, #0]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration || RADIO_TIMER_InitStruct->enableInitialCalibration)
1004b23c:	4b67      	ldr	r3, [pc, #412]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b23e:	781b      	ldrb	r3, [r3, #0]
1004b240:	2b00      	cmp	r3, #0
1004b242:	d103      	bne.n	1004b24c <HAL_RADIO_TIMER_Init+0x44>
1004b244:	687b      	ldr	r3, [r7, #4]
1004b246:	789b      	ldrb	r3, [r3, #2]
1004b248:	2b00      	cmp	r3, #0
1004b24a:	d002      	beq.n	1004b252 <HAL_RADIO_TIMER_Init+0x4a>
  {
    _calibrationProcedure();
1004b24c:	f000 fc0a 	bl	1004ba64 <_calibrationProcedure>
1004b250:	e010      	b.n	1004b274 <HAL_RADIO_TIMER_Init+0x6c>
  }
  else
  {
    /* Assume fix frequency at 32.768 kHz */
    RADIO_TIMER_Context.calibrationData.last_period1 = 0x00190000;
1004b252:	4b62      	ldr	r3, [pc, #392]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b254:	22c8      	movs	r2, #200	@ 0xc8
1004b256:	0352      	lsls	r2, r2, #13
1004b258:	621a      	str	r2, [r3, #32]
    RADIO_TIMER_Context.calibrationData.period1 = 0x00190000 ;
1004b25a:	4b60      	ldr	r3, [pc, #384]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b25c:	22c8      	movs	r2, #200	@ 0xc8
1004b25e:	0352      	lsls	r2, r2, #13
1004b260:	61da      	str	r2, [r3, #28]
    RADIO_TIMER_Context.calibrationData.freq1 = 0x0028F5C2 ;
1004b262:	4b5e      	ldr	r3, [pc, #376]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b264:	4a5e      	ldr	r2, [pc, #376]	@ (1004b3e0 <HAL_RADIO_TIMER_Init+0x1d8>)
1004b266:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = 23437;
1004b268:	4b5c      	ldr	r3, [pc, #368]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b26a:	4a5e      	ldr	r2, [pc, #376]	@ (1004b3e4 <HAL_RADIO_TIMER_Init+0x1dc>)
1004b26c:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.freq = 23456748;
1004b26e:	4b5b      	ldr	r3, [pc, #364]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b270:	4a5d      	ldr	r2, [pc, #372]	@ (1004b3e8 <HAL_RADIO_TIMER_Init+0x1e0>)
1004b272:	615a      	str	r2, [r3, #20]
  }
  if (RADIO_TIMER_InitStruct->periodicCalibrationInterval == 0)
1004b274:	687b      	ldr	r3, [r7, #4]
1004b276:	685b      	ldr	r3, [r3, #4]
1004b278:	2b00      	cmp	r3, #0
1004b27a:	d108      	bne.n	1004b28e <HAL_RADIO_TIMER_Init+0x86>
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = HAL_RADIO_TIMER_MachineTimeToSysTime(0x50000000);
1004b27c:	23a0      	movs	r3, #160	@ 0xa0
1004b27e:	05db      	lsls	r3, r3, #23
1004b280:	0018      	movs	r0, r3
1004b282:	f000 fb23 	bl	1004b8cc <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004b286:	0002      	movs	r2, r0
1004b288:	4b54      	ldr	r3, [pc, #336]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b28a:	605a      	str	r2, [r3, #4]
1004b28c:	e01d      	b.n	1004b2ca <HAL_RADIO_TIMER_Init+0xc2>

    
  }
  else
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = (TIMER_SYSTICK_PER_10MS * RADIO_TIMER_InitStruct->periodicCalibrationInterval) / 10;
1004b28e:	687b      	ldr	r3, [r7, #4]
1004b290:	685b      	ldr	r3, [r3, #4]
1004b292:	031b      	lsls	r3, r3, #12
1004b294:	210a      	movs	r1, #10
1004b296:	0018      	movs	r0, r3
1004b298:	f7f4 ffd2 	bl	10040240 <__udivsi3>
1004b29c:	0003      	movs	r3, r0
1004b29e:	001a      	movs	r2, r3
1004b2a0:	4b4e      	ldr	r3, [pc, #312]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b2a2:	605a      	str	r2, [r3, #4]
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = MIN(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004b2a4:	4b4d      	ldr	r3, [pc, #308]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b2a6:	685e      	ldr	r6, [r3, #4]
1004b2a8:	4b50      	ldr	r3, [pc, #320]	@ (1004b3ec <HAL_RADIO_TIMER_Init+0x1e4>)
1004b2aa:	0018      	movs	r0, r3
1004b2ac:	f000 fb0e 	bl	1004b8cc <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004b2b0:	0003      	movs	r3, r0
1004b2b2:	429e      	cmp	r6, r3
1004b2b4:	d202      	bcs.n	1004b2bc <HAL_RADIO_TIMER_Init+0xb4>
1004b2b6:	4b49      	ldr	r3, [pc, #292]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b2b8:	685a      	ldr	r2, [r3, #4]
1004b2ba:	e004      	b.n	1004b2c6 <HAL_RADIO_TIMER_Init+0xbe>
1004b2bc:	4b4b      	ldr	r3, [pc, #300]	@ (1004b3ec <HAL_RADIO_TIMER_Init+0x1e4>)
1004b2be:	0018      	movs	r0, r3
1004b2c0:	f000 fb04 	bl	1004b8cc <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004b2c4:	0002      	movs	r2, r0
1004b2c6:	4b45      	ldr	r3, [pc, #276]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b2c8:	605a      	str	r2, [r3, #4]
                                                                              HAL_RADIO_TIMER_MachineTimeToSysTime(TIMER_MAX_VALUE - TIMER_WRAPPING_MARGIN));
  }
  RADIO_TIMER_Context.calibrationSettings.periodicCalibrationCheckDuration = CALIBRATION_CHECK_DURATION;
1004b2ca:	4b44      	ldr	r3, [pc, #272]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b2cc:	2264      	movs	r2, #100	@ 0x64
1004b2ce:	609a      	str	r2, [r3, #8]
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
1004b2d0:	4b42      	ldr	r3, [pc, #264]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b2d2:	2200      	movs	r2, #0
1004b2d4:	731a      	strb	r2, [r3, #12]

  /* XTAL startup time configuration */
  RADIO_TIMER_Context.hs_startup_time = RADIO_TIMER_InitStruct->XTAL_StartupTime;
1004b2d6:	687b      	ldr	r3, [r7, #4]
1004b2d8:	881b      	ldrh	r3, [r3, #0]
1004b2da:	001a      	movs	r2, r3
1004b2dc:	4b3f      	ldr	r3, [pc, #252]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b2de:	669a      	str	r2, [r3, #104]	@ 0x68
  _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
1004b2e0:	4b3e      	ldr	r3, [pc, #248]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b2e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
1004b2e4:	b29a      	uxth	r2, r3
1004b2e6:	4b3d      	ldr	r3, [pc, #244]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b2e8:	699b      	ldr	r3, [r3, #24]
1004b2ea:	0019      	movs	r1, r3
1004b2ec:	0010      	movs	r0, r2
1004b2ee:	f000 fd2d 	bl	1004bd4c <_update_xtal_startup_time>

  /* Init Radio Timer Context */
  RADIO_TIMER_Context.last_setup_time = 0;
1004b2f2:	4b3a      	ldr	r3, [pc, #232]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b2f4:	2284      	movs	r2, #132	@ 0x84
1004b2f6:	2100      	movs	r1, #0
1004b2f8:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.cumulative_time = 0;
1004b2fa:	4938      	ldr	r1, [pc, #224]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b2fc:	2200      	movs	r2, #0
1004b2fe:	2300      	movs	r3, #0
1004b300:	670a      	str	r2, [r1, #112]	@ 0x70
1004b302:	674b      	str	r3, [r1, #116]	@ 0x74
  RADIO_TIMER_Context.last_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004b304:	4b34      	ldr	r3, [pc, #208]	@ (1004b3d8 <HAL_RADIO_TIMER_Init+0x1d0>)
1004b306:	0018      	movs	r0, r3
1004b308:	f7ff fed3 	bl	1004b0b2 <LL_RADIO_TIMER_GetAbsoluteTime>
1004b30c:	0002      	movs	r2, r0
1004b30e:	4b33      	ldr	r3, [pc, #204]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b310:	2180      	movs	r1, #128	@ 0x80
1004b312:	505a      	str	r2, [r3, r1]
  RADIO_TIMER_Context.last_system_time = 0;
1004b314:	4931      	ldr	r1, [pc, #196]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b316:	2200      	movs	r2, #0
1004b318:	2300      	movs	r3, #0
1004b31a:	678a      	str	r2, [r1, #120]	@ 0x78
1004b31c:	67cb      	str	r3, [r1, #124]	@ 0x7c
  RADIO_TIMER_Context.calibrationData.last_calibration_time = 0;
1004b31e:	492f      	ldr	r1, [pc, #188]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b320:	2200      	movs	r2, #0
1004b322:	2300      	movs	r3, #0
1004b324:	628a      	str	r2, [r1, #40]	@ 0x28
1004b326:	62cb      	str	r3, [r1, #44]	@ 0x2c
  RADIO_TIMER_Context.calibrationData.calibration_data_available = 0;
1004b328:	4b2c      	ldr	r3, [pc, #176]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b32a:	2234      	movs	r2, #52	@ 0x34
1004b32c:	2100      	movs	r1, #0
1004b32e:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004b330:	4b2a      	ldr	r3, [pc, #168]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b332:	6858      	ldr	r0, [r3, #4]
                                                                     RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
1004b334:	4b29      	ldr	r3, [pc, #164]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b336:	699b      	ldr	r3, [r3, #24]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004b338:	0019      	movs	r1, r3
1004b33a:	4b2d      	ldr	r3, [pc, #180]	@ (1004b3f0 <HAL_RADIO_TIMER_Init+0x1e8>)
1004b33c:	001a      	movs	r2, r3
1004b33e:	f7f4 febf 	bl	100400c0 <blue_unit_conversion>
1004b342:	0002      	movs	r2, r0
1004b344:	4b25      	ldr	r3, [pc, #148]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b346:	631a      	str	r2, [r3, #48]	@ 0x30
  RADIO_TIMER_Context.wakeup_calibration = RADIO_TIMER_Context.calibrationSettings.periodicCalibration;
1004b348:	4b24      	ldr	r3, [pc, #144]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b34a:	7819      	ldrb	r1, [r3, #0]
1004b34c:	4b23      	ldr	r3, [pc, #140]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b34e:	2294      	movs	r2, #148	@ 0x94
1004b350:	5499      	strb	r1, [r3, r2]

  /* Init the Virtual Timer queue */
  RADIO_TIMER_Context.rootNode = NULL;
1004b352:	4b22      	ldr	r3, [pc, #136]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b354:	228c      	movs	r2, #140	@ 0x8c
1004b356:	2100      	movs	r1, #0
1004b358:	5099      	str	r1, [r3, r2]
  RADIO_TIMER_Context.enableTimeBase = TRUE;
1004b35a:	4b20      	ldr	r3, [pc, #128]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b35c:	2290      	movs	r2, #144	@ 0x90
1004b35e:	2101      	movs	r1, #1
1004b360:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.stop_notimer_action = FALSE;
1004b362:	4b1e      	ldr	r3, [pc, #120]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b364:	2293      	movs	r2, #147	@ 0x93
1004b366:	2100      	movs	r1, #0
1004b368:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.expired_count = 0;
1004b36a:	4b1c      	ldr	r3, [pc, #112]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b36c:	2291      	movs	r2, #145	@ 0x91
1004b36e:	2100      	movs	r1, #0
1004b370:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.served_count = 0;
1004b372:	4b1a      	ldr	r3, [pc, #104]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b374:	2292      	movs	r2, #146	@ 0x92
1004b376:	2100      	movs	r1, #0
1004b378:	5499      	strb	r1, [r3, r2]

  /* Init Radio Timer queue */
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004b37a:	4b18      	ldr	r3, [pc, #96]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b37c:	2261      	movs	r2, #97	@ 0x61
1004b37e:	2100      	movs	r1, #0
1004b380:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004b382:	4b16      	ldr	r3, [pc, #88]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b384:	2262      	movs	r2, #98	@ 0x62
1004b386:	2100      	movs	r1, #0
1004b388:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004b38a:	4b14      	ldr	r3, [pc, #80]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b38c:	2263      	movs	r2, #99	@ 0x63
1004b38e:	2100      	movs	r1, #0
1004b390:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = 0;
1004b392:	4912      	ldr	r1, [pc, #72]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b394:	2200      	movs	r2, #0
1004b396:	2300      	movs	r3, #0
1004b398:	658a      	str	r2, [r1, #88]	@ 0x58
1004b39a:	65cb      	str	r3, [r1, #92]	@ 0x5c

  /* Configure the Calibration callback and schedule the next calibration */
  RADIO_TIMER_Context.calibrationTimer.callback = _calibration_callback;
1004b39c:	4b0f      	ldr	r3, [pc, #60]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b39e:	4a15      	ldr	r2, [pc, #84]	@ (1004b3f4 <HAL_RADIO_TIMER_Init+0x1ec>)
1004b3a0:	649a      	str	r2, [r3, #72]	@ 0x48
  RADIO_TIMER_Context.calibrationTimer.userData = NULL;
1004b3a2:	4b0e      	ldr	r3, [pc, #56]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b3a4:	2200      	movs	r2, #0
1004b3a6:	655a      	str	r2, [r3, #84]	@ 0x54
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
               HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
1004b3a8:	f000 faa6 	bl	1004b8f8 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004b3ac:	0002      	movs	r2, r0
1004b3ae:	000b      	movs	r3, r1
1004b3b0:	490a      	ldr	r1, [pc, #40]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b3b2:	6849      	ldr	r1, [r1, #4]
1004b3b4:	000c      	movs	r4, r1
1004b3b6:	2100      	movs	r1, #0
1004b3b8:	000d      	movs	r5, r1
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
1004b3ba:	1912      	adds	r2, r2, r4
1004b3bc:	416b      	adcs	r3, r5
1004b3be:	490e      	ldr	r1, [pc, #56]	@ (1004b3f8 <HAL_RADIO_TIMER_Init+0x1f0>)
1004b3c0:	0008      	movs	r0, r1
1004b3c2:	f000 fd1d 	bl	1004be00 <_start_timer>

  /* Tx & Rx delay configuration */
  _configureTxRxDelay(&RADIO_TIMER_Context, TRUE);
1004b3c6:	4b05      	ldr	r3, [pc, #20]	@ (1004b3dc <HAL_RADIO_TIMER_Init+0x1d4>)
1004b3c8:	2101      	movs	r1, #1
1004b3ca:	0018      	movs	r0, r3
1004b3cc:	f000 fbfa 	bl	1004bbc4 <_configureTxRxDelay>
}
1004b3d0:	46c0      	nop			@ (mov r8, r8)
1004b3d2:	46bd      	mov	sp, r7
1004b3d4:	b003      	add	sp, #12
1004b3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004b3d8:	60001800 	.word	0x60001800
1004b3dc:	20002210 	.word	0x20002210
1004b3e0:	0028f5c2 	.word	0x0028f5c2
1004b3e4:	00005b8d 	.word	0x00005b8d
1004b3e8:	0165ebec 	.word	0x0165ebec
1004b3ec:	ffffefff 	.word	0xffffefff
1004b3f0:	00000326 	.word	0x00000326
1004b3f4:	1004bda9 	.word	0x1004bda9
1004b3f8:	20002250 	.word	0x20002250

1004b3fc <HAL_RADIO_TIMER_Tick>:
  * Check expired timers and execute user callback.
  * It must be placed inside the infinite loop.
  * @retval None
  */
void HAL_RADIO_TIMER_Tick(void)
{
1004b3fc:	b5b0      	push	{r4, r5, r7, lr}
1004b3fe:	b090      	sub	sp, #64	@ 0x40
1004b400:	af00      	add	r7, sp, #0
  uint8_t expired = 0;
1004b402:	230f      	movs	r3, #15
1004b404:	18fb      	adds	r3, r7, r3
1004b406:	2200      	movs	r2, #0
1004b408:	701a      	strb	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b40a:	f3ef 8310 	mrs	r3, PRIMASK
1004b40e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
1004b410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  ATOMIC_SECTION_BEGIN();
1004b412:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
1004b414:	b672      	cpsid	i
}
1004b416:	46c0      	nop			@ (mov r8, r8)
  if (RADIO_TIMER_Context.radioTimer.active)
1004b418:	4b9e      	ldr	r3, [pc, #632]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b41a:	2261      	movs	r2, #97	@ 0x61
1004b41c:	5c9b      	ldrb	r3, [r3, r2]
1004b41e:	2b00      	cmp	r3, #0
1004b420:	d00f      	beq.n	1004b442 <HAL_RADIO_TIMER_Tick+0x46>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < HAL_RADIO_TIMER_GetCurrentSysTime())
1004b422:	4b9c      	ldr	r3, [pc, #624]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b424:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
1004b426:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
1004b428:	f000 fa66 	bl	1004b8f8 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004b42c:	0002      	movs	r2, r0
1004b42e:	000b      	movs	r3, r1
1004b430:	42ab      	cmp	r3, r5
1004b432:	d802      	bhi.n	1004b43a <HAL_RADIO_TIMER_Tick+0x3e>
1004b434:	d105      	bne.n	1004b442 <HAL_RADIO_TIMER_Tick+0x46>
1004b436:	42a2      	cmp	r2, r4
1004b438:	d903      	bls.n	1004b442 <HAL_RADIO_TIMER_Tick+0x46>
    {
      RADIO_TIMER_Context.radioTimer.active = FALSE;
1004b43a:	4b96      	ldr	r3, [pc, #600]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b43c:	2261      	movs	r2, #97	@ 0x61
1004b43e:	2100      	movs	r1, #0
1004b440:	5499      	strb	r1, [r3, r2]
1004b442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004b444:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b446:	6a3b      	ldr	r3, [r7, #32]
1004b448:	f383 8810 	msr	PRIMASK, r3
}
1004b44c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  ATOMIC_SECTION_END();

  /* Check for expired timers */
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
1004b44e:	e06e      	b.n	1004b52e <HAL_RADIO_TIMER_Tick+0x132>
  {
    VTIMER_HandleType *expiredList, *curr;
    uint8_t to_be_served = DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count);
1004b450:	4b90      	ldr	r3, [pc, #576]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b452:	2291      	movs	r2, #145	@ 0x91
1004b454:	5c99      	ldrb	r1, [r3, r2]
1004b456:	4b8f      	ldr	r3, [pc, #572]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b458:	2292      	movs	r2, #146	@ 0x92
1004b45a:	5c9a      	ldrb	r2, [r3, r2]
1004b45c:	232b      	movs	r3, #43	@ 0x2b
1004b45e:	2008      	movs	r0, #8
1004b460:	181b      	adds	r3, r3, r0
1004b462:	19db      	adds	r3, r3, r7
1004b464:	1a8a      	subs	r2, r1, r2
1004b466:	701a      	strb	r2, [r3, #0]

    RADIO_TIMER_Context.rootNode = _check_callbacks(RADIO_TIMER_Context.rootNode, &expiredList);
1004b468:	4b8a      	ldr	r3, [pc, #552]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b46a:	228c      	movs	r2, #140	@ 0x8c
1004b46c:	589b      	ldr	r3, [r3, r2]
1004b46e:	183a      	adds	r2, r7, r0
1004b470:	0011      	movs	r1, r2
1004b472:	0018      	movs	r0, r3
1004b474:	f000 fe9a 	bl	1004c1ac <_check_callbacks>
1004b478:	0002      	movs	r2, r0
1004b47a:	4b86      	ldr	r3, [pc, #536]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b47c:	218c      	movs	r1, #140	@ 0x8c
1004b47e:	505a      	str	r2, [r3, r1]

    /* Call all the user callbacks */
    curr = expiredList;
1004b480:	68bb      	ldr	r3, [r7, #8]
1004b482:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
1004b484:	e010      	b.n	1004b4a8 <HAL_RADIO_TIMER_Tick+0xac>
    {
      /* Save next pointer, in case callback start the timer again */
      VTIMER_HandleType *next = curr->next;
1004b486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004b488:	691b      	ldr	r3, [r3, #16]
1004b48a:	62bb      	str	r3, [r7, #40]	@ 0x28
      curr->active = FALSE;
1004b48c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004b48e:	2200      	movs	r2, #0
1004b490:	731a      	strb	r2, [r3, #12]
      if (curr->callback)
1004b492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004b494:	689b      	ldr	r3, [r3, #8]
1004b496:	2b00      	cmp	r3, #0
1004b498:	d004      	beq.n	1004b4a4 <HAL_RADIO_TIMER_Tick+0xa8>
      {
        curr->callback(curr); /* we are sure a callback is set?*/
1004b49a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004b49c:	689b      	ldr	r3, [r3, #8]
1004b49e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004b4a0:	0010      	movs	r0, r2
1004b4a2:	4798      	blx	r3
      }
      curr = next;
1004b4a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004b4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
1004b4a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004b4aa:	2b00      	cmp	r3, #0
1004b4ac:	d1eb      	bne.n	1004b486 <HAL_RADIO_TIMER_Tick+0x8a>
    }

    RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
1004b4ae:	4b79      	ldr	r3, [pc, #484]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b4b0:	228c      	movs	r2, #140	@ 0x8c
1004b4b2:	589b      	ldr	r3, [r3, r2]
1004b4b4:	240f      	movs	r4, #15
1004b4b6:	193a      	adds	r2, r7, r4
1004b4b8:	0011      	movs	r1, r2
1004b4ba:	0018      	movs	r0, r3
1004b4bc:	f000 fd66 	bl	1004bf8c <_update_user_timeout>
1004b4c0:	0002      	movs	r2, r0
1004b4c2:	4b74      	ldr	r3, [pc, #464]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b4c4:	218c      	movs	r1, #140	@ 0x8c
1004b4c6:	505a      	str	r2, [r3, r1]
    if (expired == 1)
1004b4c8:	193b      	adds	r3, r7, r4
1004b4ca:	781b      	ldrb	r3, [r3, #0]
1004b4cc:	2b01      	cmp	r3, #1
1004b4ce:	d121      	bne.n	1004b514 <HAL_RADIO_TIMER_Tick+0x118>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b4d0:	f3ef 8310 	mrs	r3, PRIMASK
1004b4d4:	61fb      	str	r3, [r7, #28]
  return(result);
1004b4d6:	69fb      	ldr	r3, [r7, #28]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
1004b4d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
1004b4da:	b672      	cpsid	i
}
1004b4dc:	46c0      	nop			@ (mov r8, r8)
1004b4de:	4b6d      	ldr	r3, [pc, #436]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b4e0:	2291      	movs	r2, #145	@ 0x91
1004b4e2:	5c9b      	ldrb	r3, [r3, r2]
1004b4e4:	3301      	adds	r3, #1
1004b4e6:	4a6b      	ldr	r2, [pc, #428]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b4e8:	2192      	movs	r1, #146	@ 0x92
1004b4ea:	5c52      	ldrb	r2, [r2, r1]
1004b4ec:	4293      	cmp	r3, r2
1004b4ee:	d103      	bne.n	1004b4f8 <HAL_RADIO_TIMER_Tick+0xfc>
1004b4f0:	4b68      	ldr	r3, [pc, #416]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b4f2:	2291      	movs	r2, #145	@ 0x91
1004b4f4:	5c9b      	ldrb	r3, [r3, r2]
1004b4f6:	e004      	b.n	1004b502 <HAL_RADIO_TIMER_Tick+0x106>
1004b4f8:	4b66      	ldr	r3, [pc, #408]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b4fa:	2291      	movs	r2, #145	@ 0x91
1004b4fc:	5c9b      	ldrb	r3, [r3, r2]
1004b4fe:	3301      	adds	r3, #1
1004b500:	b2db      	uxtb	r3, r3
1004b502:	4a64      	ldr	r2, [pc, #400]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b504:	2191      	movs	r1, #145	@ 0x91
1004b506:	5453      	strb	r3, [r2, r1]
1004b508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004b50a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b50c:	69bb      	ldr	r3, [r7, #24]
1004b50e:	f383 8810 	msr	PRIMASK, r3
}
1004b512:	46c0      	nop			@ (mov r8, r8)
    }
    RADIO_TIMER_Context.served_count += to_be_served;
1004b514:	4b5f      	ldr	r3, [pc, #380]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b516:	2292      	movs	r2, #146	@ 0x92
1004b518:	5c9a      	ldrb	r2, [r3, r2]
1004b51a:	232b      	movs	r3, #43	@ 0x2b
1004b51c:	2108      	movs	r1, #8
1004b51e:	185b      	adds	r3, r3, r1
1004b520:	19db      	adds	r3, r3, r7
1004b522:	781b      	ldrb	r3, [r3, #0]
1004b524:	18d3      	adds	r3, r2, r3
1004b526:	b2d9      	uxtb	r1, r3
1004b528:	4b5a      	ldr	r3, [pc, #360]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b52a:	2292      	movs	r2, #146	@ 0x92
1004b52c:	5499      	strb	r1, [r3, r2]
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
1004b52e:	4b59      	ldr	r3, [pc, #356]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b530:	2291      	movs	r2, #145	@ 0x91
1004b532:	5c9a      	ldrb	r2, [r3, r2]
1004b534:	4b57      	ldr	r3, [pc, #348]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b536:	2192      	movs	r1, #146	@ 0x92
1004b538:	5c5b      	ldrb	r3, [r3, r1]
1004b53a:	429a      	cmp	r2, r3
1004b53c:	d30a      	bcc.n	1004b554 <HAL_RADIO_TIMER_Tick+0x158>
1004b53e:	4b55      	ldr	r3, [pc, #340]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b540:	2291      	movs	r2, #145	@ 0x91
1004b542:	5c9a      	ldrb	r2, [r3, r2]
1004b544:	4b53      	ldr	r3, [pc, #332]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b546:	2192      	movs	r1, #146	@ 0x92
1004b548:	5c5b      	ldrb	r3, [r3, r1]
1004b54a:	1ad3      	subs	r3, r2, r3
1004b54c:	1e5a      	subs	r2, r3, #1
1004b54e:	4193      	sbcs	r3, r2
1004b550:	b2db      	uxtb	r3, r3
1004b552:	e00c      	b.n	1004b56e <HAL_RADIO_TIMER_Tick+0x172>
1004b554:	4b4f      	ldr	r3, [pc, #316]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b556:	2291      	movs	r2, #145	@ 0x91
1004b558:	5c9b      	ldrb	r3, [r3, r2]
1004b55a:	0019      	movs	r1, r3
1004b55c:	4b4d      	ldr	r3, [pc, #308]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b55e:	2292      	movs	r2, #146	@ 0x92
1004b560:	5c9b      	ldrb	r3, [r3, r2]
1004b562:	1acb      	subs	r3, r1, r3
1004b564:	3301      	adds	r3, #1
1004b566:	33ff      	adds	r3, #255	@ 0xff
1004b568:	1e5a      	subs	r2, r3, #1
1004b56a:	4193      	sbcs	r3, r2
1004b56c:	b2db      	uxtb	r3, r3
1004b56e:	2b00      	cmp	r3, #0
1004b570:	d000      	beq.n	1004b574 <HAL_RADIO_TIMER_Tick+0x178>
1004b572:	e76d      	b.n	1004b450 <HAL_RADIO_TIMER_Tick+0x54>
  }

  /* Check for periodic calibration */
  if (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress)
1004b574:	4b47      	ldr	r3, [pc, #284]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b576:	7b1b      	ldrb	r3, [r3, #12]
1004b578:	2b00      	cmp	r3, #0
1004b57a:	d06a      	beq.n	1004b652 <HAL_RADIO_TIMER_Tick+0x256>
  {
    if (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL))
1004b57c:	4b46      	ldr	r3, [pc, #280]	@ (1004b698 <HAL_RADIO_TIMER_Tick+0x29c>)
1004b57e:	0018      	movs	r0, r3
1004b580:	f7ff fe30 	bl	1004b1e4 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004b584:	1e03      	subs	r3, r0, #0
1004b586:	d100      	bne.n	1004b58a <HAL_RADIO_TIMER_Tick+0x18e>
1004b588:	e07f      	b.n	1004b68a <HAL_RADIO_TIMER_Tick+0x28e>
    {
      /* Calibration is completed */
      RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
1004b58a:	4b42      	ldr	r3, [pc, #264]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b58c:	2200      	movs	r2, #0
1004b58e:	731a      	strb	r2, [r3, #12]
      if ((RADIO_TIMER_Context.wakeup_calibration == FALSE) && RADIO_TIMER_Context.stop_notimer_action)
1004b590:	4b40      	ldr	r3, [pc, #256]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b592:	2294      	movs	r2, #148	@ 0x94
1004b594:	5c9b      	ldrb	r3, [r3, r2]
1004b596:	2b00      	cmp	r3, #0
1004b598:	d109      	bne.n	1004b5ae <HAL_RADIO_TIMER_Tick+0x1b2>
1004b59a:	4b3e      	ldr	r3, [pc, #248]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b59c:	2293      	movs	r2, #147	@ 0x93
1004b59e:	5c9b      	ldrb	r3, [r3, r2]
1004b5a0:	2b00      	cmp	r3, #0
1004b5a2:	d004      	beq.n	1004b5ae <HAL_RADIO_TIMER_Tick+0x1b2>
      {
        RADIO_TIMER_Context.stop_notimer_action = FALSE;
1004b5a4:	4b3b      	ldr	r3, [pc, #236]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b5a6:	2293      	movs	r2, #147	@ 0x93
1004b5a8:	2100      	movs	r1, #0
1004b5aa:	5499      	strb	r1, [r3, r2]
1004b5ac:	e034      	b.n	1004b618 <HAL_RADIO_TIMER_Tick+0x21c>
      }
      else
      {
        /* Collect calibration data */
        _updateCalibrationData();
1004b5ae:	f000 fe47 	bl	1004c240 <_updateCalibrationData>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
1004b5b2:	4b38      	ldr	r3, [pc, #224]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b5b4:	228c      	movs	r2, #140	@ 0x8c
1004b5b6:	589b      	ldr	r3, [r3, r2]
1004b5b8:	240f      	movs	r4, #15
1004b5ba:	193a      	adds	r2, r7, r4
1004b5bc:	0011      	movs	r1, r2
1004b5be:	0018      	movs	r0, r3
1004b5c0:	f000 fce4 	bl	1004bf8c <_update_user_timeout>
1004b5c4:	0002      	movs	r2, r0
1004b5c6:	4b33      	ldr	r3, [pc, #204]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b5c8:	218c      	movs	r1, #140	@ 0x8c
1004b5ca:	505a      	str	r2, [r3, r1]
        if (expired == 1)
1004b5cc:	193b      	adds	r3, r7, r4
1004b5ce:	781b      	ldrb	r3, [r3, #0]
1004b5d0:	2b01      	cmp	r3, #1
1004b5d2:	d121      	bne.n	1004b618 <HAL_RADIO_TIMER_Tick+0x21c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b5d4:	f3ef 8310 	mrs	r3, PRIMASK
1004b5d8:	617b      	str	r3, [r7, #20]
  return(result);
1004b5da:	697b      	ldr	r3, [r7, #20]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
1004b5dc:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
1004b5de:	b672      	cpsid	i
}
1004b5e0:	46c0      	nop			@ (mov r8, r8)
1004b5e2:	4b2c      	ldr	r3, [pc, #176]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b5e4:	2291      	movs	r2, #145	@ 0x91
1004b5e6:	5c9b      	ldrb	r3, [r3, r2]
1004b5e8:	3301      	adds	r3, #1
1004b5ea:	4a2a      	ldr	r2, [pc, #168]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b5ec:	2192      	movs	r1, #146	@ 0x92
1004b5ee:	5c52      	ldrb	r2, [r2, r1]
1004b5f0:	4293      	cmp	r3, r2
1004b5f2:	d103      	bne.n	1004b5fc <HAL_RADIO_TIMER_Tick+0x200>
1004b5f4:	4b27      	ldr	r3, [pc, #156]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b5f6:	2291      	movs	r2, #145	@ 0x91
1004b5f8:	5c9b      	ldrb	r3, [r3, r2]
1004b5fa:	e004      	b.n	1004b606 <HAL_RADIO_TIMER_Tick+0x20a>
1004b5fc:	4b25      	ldr	r3, [pc, #148]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b5fe:	2291      	movs	r2, #145	@ 0x91
1004b600:	5c9b      	ldrb	r3, [r3, r2]
1004b602:	3301      	adds	r3, #1
1004b604:	b2db      	uxtb	r3, r3
1004b606:	4a23      	ldr	r2, [pc, #140]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b608:	2191      	movs	r1, #145	@ 0x91
1004b60a:	5453      	strb	r3, [r2, r1]
1004b60c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004b60e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b610:	693b      	ldr	r3, [r7, #16]
1004b612:	f383 8810 	msr	PRIMASK, r3
}
1004b616:	46c0      	nop			@ (mov r8, r8)
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
        }
      }
#else
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired); //Start Radio Timer after calibration
1004b618:	230f      	movs	r3, #15
1004b61a:	18fa      	adds	r2, r7, r3
1004b61c:	4b1f      	ldr	r3, [pc, #124]	@ (1004b69c <HAL_RADIO_TIMER_Tick+0x2a0>)
1004b61e:	0011      	movs	r1, r2
1004b620:	0018      	movs	r0, r3
1004b622:	f000 fec1 	bl	1004c3a8 <_check_radio_activity>
#endif

      /* Schedule next calibration event */
      HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004b626:	4b1e      	ldr	r3, [pc, #120]	@ (1004b6a0 <HAL_RADIO_TIMER_Tick+0x2a4>)
1004b628:	0018      	movs	r0, r3
1004b62a:	f000 f991 	bl	1004b950 <HAL_RADIO_TIMER_StopVirtualTimer>
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
                   HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
1004b62e:	f000 f963 	bl	1004b8f8 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004b632:	0002      	movs	r2, r0
1004b634:	000b      	movs	r3, r1
1004b636:	4917      	ldr	r1, [pc, #92]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b638:	6849      	ldr	r1, [r1, #4]
1004b63a:	6039      	str	r1, [r7, #0]
1004b63c:	2100      	movs	r1, #0
1004b63e:	6079      	str	r1, [r7, #4]
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
1004b640:	6838      	ldr	r0, [r7, #0]
1004b642:	6879      	ldr	r1, [r7, #4]
1004b644:	1812      	adds	r2, r2, r0
1004b646:	414b      	adcs	r3, r1
1004b648:	4915      	ldr	r1, [pc, #84]	@ (1004b6a0 <HAL_RADIO_TIMER_Tick+0x2a4>)
1004b64a:	0008      	movs	r0, r1
1004b64c:	f000 fbd8 	bl	1004be00 <_start_timer>
        HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
      }
    }
  }
}
1004b650:	e01b      	b.n	1004b68a <HAL_RADIO_TIMER_Tick+0x28e>
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004b652:	4b10      	ldr	r3, [pc, #64]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b654:	781b      	ldrb	r3, [r3, #0]
1004b656:	2b00      	cmp	r3, #0
1004b658:	d017      	beq.n	1004b68a <HAL_RADIO_TIMER_Tick+0x28e>
      if (HAL_RADIO_TIMER_GetCurrentSysTime() > (RADIO_TIMER_Context.calibrationData.last_calibration_time +
1004b65a:	f000 f94d 	bl	1004b8f8 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004b65e:	4b0d      	ldr	r3, [pc, #52]	@ (1004b694 <HAL_RADIO_TIMER_Tick+0x298>)
1004b660:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004b662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004b664:	24fa      	movs	r4, #250	@ 0xfa
1004b666:	0364      	lsls	r4, r4, #13
1004b668:	2500      	movs	r5, #0
1004b66a:	1912      	adds	r2, r2, r4
1004b66c:	416b      	adcs	r3, r5
1004b66e:	4299      	cmp	r1, r3
1004b670:	d803      	bhi.n	1004b67a <HAL_RADIO_TIMER_Tick+0x27e>
1004b672:	d10a      	bne.n	1004b68a <HAL_RADIO_TIMER_Tick+0x28e>
1004b674:	4290      	cmp	r0, r2
1004b676:	d800      	bhi.n	1004b67a <HAL_RADIO_TIMER_Tick+0x27e>
}
1004b678:	e007      	b.n	1004b68a <HAL_RADIO_TIMER_Tick+0x28e>
        HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004b67a:	4b09      	ldr	r3, [pc, #36]	@ (1004b6a0 <HAL_RADIO_TIMER_Tick+0x2a4>)
1004b67c:	0018      	movs	r0, r3
1004b67e:	f000 f967 	bl	1004b950 <HAL_RADIO_TIMER_StopVirtualTimer>
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
1004b682:	4b07      	ldr	r3, [pc, #28]	@ (1004b6a0 <HAL_RADIO_TIMER_Tick+0x2a4>)
1004b684:	0018      	movs	r0, r3
1004b686:	f000 fb8f 	bl	1004bda8 <_calibration_callback>
}
1004b68a:	46c0      	nop			@ (mov r8, r8)
1004b68c:	46bd      	mov	sp, r7
1004b68e:	b010      	add	sp, #64	@ 0x40
1004b690:	bdb0      	pop	{r4, r5, r7, pc}
1004b692:	46c0      	nop			@ (mov r8, r8)
1004b694:	20002210 	.word	0x20002210
1004b698:	60001000 	.word	0x60001000
1004b69c:	20002268 	.word	0x20002268
1004b6a0:	20002250 	.word	0x20002250

1004b6a4 <HAL_RADIO_TIMER_GetAnchorPoint>:
  * @brief Get the last anchorPoint in system time unit.
  * @param current_system_time: Current System Time
  * @return TimerCapture register in system time unit.
  */
uint64_t HAL_RADIO_TIMER_GetAnchorPoint(uint64_t *current_system_time)
{
1004b6a4:	b580      	push	{r7, lr}
1004b6a6:	b082      	sub	sp, #8
1004b6a8:	af00      	add	r7, sp, #0
1004b6aa:	6078      	str	r0, [r7, #4]
  return TIMER_GetPastSysTime(BLUE->TIMERCAPTUREREG, current_system_time);
1004b6ac:	23c0      	movs	r3, #192	@ 0xc0
1004b6ae:	05db      	lsls	r3, r3, #23
1004b6b0:	695b      	ldr	r3, [r3, #20]
1004b6b2:	687a      	ldr	r2, [r7, #4]
1004b6b4:	0011      	movs	r1, r2
1004b6b6:	0018      	movs	r0, r3
1004b6b8:	f000 ffe8 	bl	1004c68c <TIMER_GetPastSysTime>
1004b6bc:	0002      	movs	r2, r0
1004b6be:	000b      	movs	r3, r1
}
1004b6c0:	0010      	movs	r0, r2
1004b6c2:	0019      	movs	r1, r3
1004b6c4:	46bd      	mov	sp, r7
1004b6c6:	b002      	add	sp, #8
1004b6c8:	bd80      	pop	{r7, pc}
	...

1004b6cc <HAL_RADIO_TIMER_SetRadioTimerValue>:
  * @param  cal_req: Specify if PLL calibration is requested (1) or not (0).
  * @retval 0 if radio activity has been scheduled successfully.
  * @retval 1 if radio activity has been rejected (it is too close or in the past).
  */
uint32_t HAL_RADIO_TIMER_SetRadioTimerValue(uint32_t time, uint8_t event_type, uint8_t cal_req)
{
1004b6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b6ce:	b085      	sub	sp, #20
1004b6d0:	af00      	add	r7, sp, #0
1004b6d2:	6078      	str	r0, [r7, #4]
1004b6d4:	0008      	movs	r0, r1
1004b6d6:	0011      	movs	r1, r2
1004b6d8:	1cfb      	adds	r3, r7, #3
1004b6da:	1c02      	adds	r2, r0, #0
1004b6dc:	701a      	strb	r2, [r3, #0]
1004b6de:	1cbb      	adds	r3, r7, #2
1004b6e0:	1c0a      	adds	r2, r1, #0
1004b6e2:	701a      	strb	r2, [r3, #0]
  uint8_t retVal = 0;
1004b6e4:	260f      	movs	r6, #15
1004b6e6:	19bb      	adds	r3, r7, r6
1004b6e8:	2200      	movs	r2, #0
1004b6ea:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB06) || defined (STM32WB07)
  uint64_t current_time;
#endif

  RADIO_TIMER_Context.radioTimer.event_type = event_type;
1004b6ec:	1cfb      	adds	r3, r7, #3
1004b6ee:	781b      	ldrb	r3, [r3, #0]
1004b6f0:	1e5a      	subs	r2, r3, #1
1004b6f2:	4193      	sbcs	r3, r2
1004b6f4:	b2d9      	uxtb	r1, r3
1004b6f6:	4b1b      	ldr	r3, [pc, #108]	@ (1004b764 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004b6f8:	2264      	movs	r2, #100	@ 0x64
1004b6fa:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.cal_req = cal_req;
1004b6fc:	1cbb      	adds	r3, r7, #2
1004b6fe:	781b      	ldrb	r3, [r3, #0]
1004b700:	1e5a      	subs	r2, r3, #1
1004b702:	4193      	sbcs	r3, r2
1004b704:	b2d9      	uxtb	r1, r3
1004b706:	4b17      	ldr	r3, [pc, #92]	@ (1004b764 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004b708:	2260      	movs	r2, #96	@ 0x60
1004b70a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = RADIO_TIMER_Context.calibrationData.last_calibration_time + (uint32_t)(time - (uint32_t)RADIO_TIMER_Context.calibrationData.last_calibration_time);
1004b70c:	4b15      	ldr	r3, [pc, #84]	@ (1004b764 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004b70e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004b710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004b712:	4914      	ldr	r1, [pc, #80]	@ (1004b764 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004b714:	6a88      	ldr	r0, [r1, #40]	@ 0x28
1004b716:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
1004b718:	6879      	ldr	r1, [r7, #4]
1004b71a:	1a09      	subs	r1, r1, r0
1004b71c:	000c      	movs	r4, r1
1004b71e:	2100      	movs	r1, #0
1004b720:	000d      	movs	r5, r1
1004b722:	1912      	adds	r2, r2, r4
1004b724:	416b      	adcs	r3, r5
1004b726:	490f      	ldr	r1, [pc, #60]	@ (1004b764 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004b728:	658a      	str	r2, [r1, #88]	@ 0x58
1004b72a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004b72c:	4b0d      	ldr	r3, [pc, #52]	@ (1004b764 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004b72e:	2261      	movs	r2, #97	@ 0x61
1004b730:	2100      	movs	r1, #0
1004b732:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004b734:	4b0b      	ldr	r3, [pc, #44]	@ (1004b764 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004b736:	2263      	movs	r2, #99	@ 0x63
1004b738:	2100      	movs	r1, #0
1004b73a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = TRUE;
1004b73c:	4b09      	ldr	r3, [pc, #36]	@ (1004b764 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004b73e:	2262      	movs	r2, #98	@ 0x62
1004b740:	2101      	movs	r1, #1
1004b742:	5499      	strb	r1, [r3, r2]
      _set_controller_as_host();
      _check_host_activity();
    }
  }
#else
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
1004b744:	19ba      	adds	r2, r7, r6
1004b746:	4b08      	ldr	r3, [pc, #32]	@ (1004b768 <HAL_RADIO_TIMER_SetRadioTimerValue+0x9c>)
1004b748:	0011      	movs	r1, r2
1004b74a:	0018      	movs	r0, r3
1004b74c:	f000 fe2c 	bl	1004c3a8 <_check_radio_activity>
#endif

  _virtualTimeBaseEnable(ENABLE);
1004b750:	2001      	movs	r0, #1
1004b752:	f000 fcd3 	bl	1004c0fc <_virtualTimeBaseEnable>

  return retVal;
1004b756:	19bb      	adds	r3, r7, r6
1004b758:	781b      	ldrb	r3, [r3, #0]
}
1004b75a:	0018      	movs	r0, r3
1004b75c:	46bd      	mov	sp, r7
1004b75e:	b005      	add	sp, #20
1004b760:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004b762:	46c0      	nop			@ (mov r8, r8)
1004b764:	20002210 	.word	0x20002210
1004b768:	20002268 	.word	0x20002268

1004b76c <HAL_RADIO_TIMER_ClearRadioTimerValue>:
  * @retval 0 if the radio activity has been cleared successfully.
  * @retval 1 if it is too late to clear the last radio activity.
  * @retval 2 if it might not be possible to clear the last radio activity.
  */
uint32_t HAL_RADIO_TIMER_ClearRadioTimerValue(void)
{
1004b76c:	b5b0      	push	{r4, r5, r7, lr}
1004b76e:	b088      	sub	sp, #32
1004b770:	af00      	add	r7, sp, #0
  int64_t time_diff;
  uint8_t retVal;

  /* Disable Radio Timer1/2 and BLE Wakeup Timer */
  LL_RADIO_TIMER_DisableTimer1(BLUE);
1004b772:	23c0      	movs	r3, #192	@ 0xc0
1004b774:	05db      	lsls	r3, r3, #23
1004b776:	0018      	movs	r0, r3
1004b778:	f7ff fc0a 	bl	1004af90 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
1004b77c:	23c0      	movs	r3, #192	@ 0xc0
1004b77e:	05db      	lsls	r3, r3, #23
1004b780:	0018      	movs	r0, r3
1004b782:	f7ff fc14 	bl	1004afae <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004b786:	4b31      	ldr	r3, [pc, #196]	@ (1004b84c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe0>)
1004b788:	0018      	movs	r0, r3
1004b78a:	f7ff fc3b 	bl	1004b004 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004b78e:	4b30      	ldr	r3, [pc, #192]	@ (1004b850 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004b790:	2261      	movs	r2, #97	@ 0x61
1004b792:	2100      	movs	r1, #0
1004b794:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004b796:	4b2e      	ldr	r3, [pc, #184]	@ (1004b850 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004b798:	2262      	movs	r2, #98	@ 0x62
1004b79a:	2100      	movs	r1, #0
1004b79c:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004b79e:	4b2c      	ldr	r3, [pc, #176]	@ (1004b850 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004b7a0:	2263      	movs	r2, #99	@ 0x63
1004b7a2:	2100      	movs	r1, #0
1004b7a4:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b7a6:	f3ef 8310 	mrs	r3, PRIMASK
1004b7aa:	60bb      	str	r3, [r7, #8]
  return(result);
1004b7ac:	68bb      	ldr	r3, [r7, #8]

  /*The rfSetup is different if Timer1 or Wakeup timer is programmed*/
  ATOMIC_SECTION_BEGIN();
1004b7ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
1004b7b0:	b672      	cpsid	i
}
1004b7b2:	46c0      	nop			@ (mov r8, r8)
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
1004b7b4:	4b26      	ldr	r3, [pc, #152]	@ (1004b850 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004b7b6:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
1004b7b8:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
              - HAL_RADIO_TIMER_GetCurrentSysTime() \
1004b7ba:	f000 f89d 	bl	1004b8f8 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004b7be:	0002      	movs	r2, r0
1004b7c0:	000b      	movs	r3, r1
1004b7c2:	1aa4      	subs	r4, r4, r2
1004b7c4:	419d      	sbcs	r5, r3
1004b7c6:	0022      	movs	r2, r4
1004b7c8:	002b      	movs	r3, r5
              - RADIO_TIMER_Context.last_setup_time;
1004b7ca:	4921      	ldr	r1, [pc, #132]	@ (1004b850 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004b7cc:	2084      	movs	r0, #132	@ 0x84
1004b7ce:	5c09      	ldrb	r1, [r1, r0]
1004b7d0:	6039      	str	r1, [r7, #0]
1004b7d2:	2100      	movs	r1, #0
1004b7d4:	6079      	str	r1, [r7, #4]
1004b7d6:	6838      	ldr	r0, [r7, #0]
1004b7d8:	6879      	ldr	r1, [r7, #4]
1004b7da:	1a12      	subs	r2, r2, r0
1004b7dc:	418b      	sbcs	r3, r1
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
1004b7de:	613a      	str	r2, [r7, #16]
1004b7e0:	617b      	str	r3, [r7, #20]
1004b7e2:	69bb      	ldr	r3, [r7, #24]
1004b7e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b7e6:	68fb      	ldr	r3, [r7, #12]
1004b7e8:	f383 8810 	msr	PRIMASK, r3
}
1004b7ec:	46c0      	nop			@ (mov r8, r8)
  {
    _check_host_activity();
  }
#endif

  if (time_diff <= 0)
1004b7ee:	697b      	ldr	r3, [r7, #20]
1004b7f0:	2b00      	cmp	r3, #0
1004b7f2:	dc0c      	bgt.n	1004b80e <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
1004b7f4:	697b      	ldr	r3, [r7, #20]
1004b7f6:	2b00      	cmp	r3, #0
1004b7f8:	d102      	bne.n	1004b800 <HAL_RADIO_TIMER_ClearRadioTimerValue+0x94>
1004b7fa:	693b      	ldr	r3, [r7, #16]
1004b7fc:	2b00      	cmp	r3, #0
1004b7fe:	d106      	bne.n	1004b80e <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
  {
    retVal = HAL_RADIO_TIMER_LATE;
1004b800:	2317      	movs	r3, #23
1004b802:	2208      	movs	r2, #8
1004b804:	189b      	adds	r3, r3, r2
1004b806:	19db      	adds	r3, r3, r7
1004b808:	2201      	movs	r2, #1
1004b80a:	701a      	strb	r2, [r3, #0]
1004b80c:	e015      	b.n	1004b83a <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else if (time_diff < CLEAR_MIN_THR)
1004b80e:	697b      	ldr	r3, [r7, #20]
1004b810:	2b00      	cmp	r3, #0
1004b812:	dc0c      	bgt.n	1004b82e <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
1004b814:	697b      	ldr	r3, [r7, #20]
1004b816:	2b00      	cmp	r3, #0
1004b818:	d102      	bne.n	1004b820 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xb4>
1004b81a:	693b      	ldr	r3, [r7, #16]
1004b81c:	2b0e      	cmp	r3, #14
1004b81e:	d806      	bhi.n	1004b82e <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
  {
    retVal = HAL_RADIO_TIMER_CRITICAL;
1004b820:	2317      	movs	r3, #23
1004b822:	2208      	movs	r2, #8
1004b824:	189b      	adds	r3, r3, r2
1004b826:	19db      	adds	r3, r3, r7
1004b828:	2202      	movs	r2, #2
1004b82a:	701a      	strb	r2, [r3, #0]
1004b82c:	e005      	b.n	1004b83a <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else
  {
    retVal = HAL_RADIO_TIMER_SUCCESS;
1004b82e:	2317      	movs	r3, #23
1004b830:	2208      	movs	r2, #8
1004b832:	189b      	adds	r3, r3, r2
1004b834:	19db      	adds	r3, r3, r7
1004b836:	2200      	movs	r2, #0
1004b838:	701a      	strb	r2, [r3, #0]
  }

  return retVal;
1004b83a:	2317      	movs	r3, #23
1004b83c:	2208      	movs	r2, #8
1004b83e:	189b      	adds	r3, r3, r2
1004b840:	19db      	adds	r3, r3, r7
1004b842:	781b      	ldrb	r3, [r3, #0]
}
1004b844:	0018      	movs	r0, r3
1004b846:	46bd      	mov	sp, r7
1004b848:	b008      	add	sp, #32
1004b84a:	bdb0      	pop	{r4, r5, r7, pc}
1004b84c:	60001800 	.word	0x60001800
1004b850:	20002210 	.word	0x20002210

1004b854 <HAL_RADIO_TIMER_SetRadioCloseTimeout>:
  *        The current time is sampled and increased by two.
  *        It means that the timer is going to trigger in a timer interval that goes
  *        from one to two machine time units.
  */
void HAL_RADIO_TIMER_SetRadioCloseTimeout(void)
{
1004b854:	b580      	push	{r7, lr}
1004b856:	b084      	sub	sp, #16
1004b858:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b85a:	f3ef 8310 	mrs	r3, PRIMASK
1004b85e:	603b      	str	r3, [r7, #0]
  return(result);
1004b860:	683b      	ldr	r3, [r7, #0]
  uint32_t current_time;

  ATOMIC_SECTION_BEGIN();
1004b862:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
1004b864:	b672      	cpsid	i
}
1004b866:	46c0      	nop			@ (mov r8, r8)
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004b868:	4b0e      	ldr	r3, [pc, #56]	@ (1004b8a4 <HAL_RADIO_TIMER_SetRadioCloseTimeout+0x50>)
1004b86a:	0018      	movs	r0, r3
1004b86c:	f7ff fc21 	bl	1004b0b2 <LL_RADIO_TIMER_GetAbsoluteTime>
1004b870:	0003      	movs	r3, r0
1004b872:	60bb      	str	r3, [r7, #8]
  LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + 2) & TIMER_MAX_VALUE));
1004b874:	68bb      	ldr	r3, [r7, #8]
1004b876:	1c9a      	adds	r2, r3, #2
1004b878:	23c0      	movs	r3, #192	@ 0xc0
1004b87a:	05db      	lsls	r3, r3, #23
1004b87c:	0011      	movs	r1, r2
1004b87e:	0018      	movs	r0, r3
1004b880:	f7ff fba4 	bl	1004afcc <LL_RADIO_TIMER_SetTimeout>
  LL_RADIO_TIMER_EnableTimer1(BLUE);
1004b884:	23c0      	movs	r3, #192	@ 0xc0
1004b886:	05db      	lsls	r3, r3, #23
1004b888:	0018      	movs	r0, r3
1004b88a:	f7ff fb71 	bl	1004af70 <LL_RADIO_TIMER_EnableTimer1>
1004b88e:	68fb      	ldr	r3, [r7, #12]
1004b890:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b892:	687b      	ldr	r3, [r7, #4]
1004b894:	f383 8810 	msr	PRIMASK, r3
}
1004b898:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
1004b89a:	46c0      	nop			@ (mov r8, r8)
1004b89c:	46bd      	mov	sp, r7
1004b89e:	b004      	add	sp, #16
1004b8a0:	bd80      	pop	{r7, pc}
1004b8a2:	46c0      	nop			@ (mov r8, r8)
1004b8a4:	60001800 	.word	0x60001800

1004b8a8 <HAL_RADIO_TIMER_RadioTimerIsr>:
/**
  * @brief  Radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_RadioTimerIsr(void)
{
1004b8a8:	b580      	push	{r7, lr}
1004b8aa:	af00      	add	r7, sp, #0
  if (!(LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE)))
  {
    _check_host_activity();
  }
#endif
}
1004b8ac:	46c0      	nop			@ (mov r8, r8)
1004b8ae:	46bd      	mov	sp, r7
1004b8b0:	bd80      	pop	{r7, pc}
	...

1004b8b4 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>:
/**
  * @brief  Timer State machine semaphore to signal the radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_EndOfRadioActivityIsr(void)
{
1004b8b4:	b580      	push	{r7, lr}
1004b8b6:	af00      	add	r7, sp, #0
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004b8b8:	4b03      	ldr	r3, [pc, #12]	@ (1004b8c8 <HAL_RADIO_TIMER_EndOfRadioActivityIsr+0x14>)
1004b8ba:	2263      	movs	r2, #99	@ 0x63
1004b8bc:	2100      	movs	r1, #0
1004b8be:	5499      	strb	r1, [r3, r2]
}
1004b8c0:	46c0      	nop			@ (mov r8, r8)
1004b8c2:	46bd      	mov	sp, r7
1004b8c4:	bd80      	pop	{r7, pc}
1004b8c6:	46c0      	nop			@ (mov r8, r8)
1004b8c8:	20002210 	.word	0x20002210

1004b8cc <HAL_RADIO_TIMER_MachineTimeToSysTime>:
  *          storing the system time. It should be called only in
  *          user context and not in interrupt context.
  * @return  STU value
  */
uint32_t HAL_RADIO_TIMER_MachineTimeToSysTime(uint32_t time)
{
1004b8cc:	b580      	push	{r7, lr}
1004b8ce:	b082      	sub	sp, #8
1004b8d0:	af00      	add	r7, sp, #0
1004b8d2:	6078      	str	r0, [r7, #4]
  return blue_unit_conversion(time, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004b8d4:	4b06      	ldr	r3, [pc, #24]	@ (1004b8f0 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x24>)
1004b8d6:	69db      	ldr	r3, [r3, #28]
1004b8d8:	0019      	movs	r1, r3
1004b8da:	4a06      	ldr	r2, [pc, #24]	@ (1004b8f4 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x28>)
1004b8dc:	687b      	ldr	r3, [r7, #4]
1004b8de:	0018      	movs	r0, r3
1004b8e0:	f7f4 fbee 	bl	100400c0 <blue_unit_conversion>
1004b8e4:	0003      	movs	r3, r0
}
1004b8e6:	0018      	movs	r0, r3
1004b8e8:	46bd      	mov	sp, r7
1004b8ea:	b002      	add	sp, #8
1004b8ec:	bd80      	pop	{r7, pc}
1004b8ee:	46c0      	nop			@ (mov r8, r8)
1004b8f0:	20002210 	.word	0x20002210
1004b8f4:	00000635 	.word	0x00000635

1004b8f8 <HAL_RADIO_TIMER_GetCurrentSysTime>:
  *         The returned value can be used as absolute time parameter where needed in the other
  *         HAL_RADIO_TIMER* APIs
  * @return absolute current time expressed in system time units.
  */
uint64_t HAL_RADIO_TIMER_GetCurrentSysTime(void)
{
1004b8f8:	b580      	push	{r7, lr}
1004b8fa:	b082      	sub	sp, #8
1004b8fc:	af00      	add	r7, sp, #0
  uint32_t current_machine_time;
  return _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
1004b8fe:	1d3a      	adds	r2, r7, #4
1004b900:	4b05      	ldr	r3, [pc, #20]	@ (1004b918 <HAL_RADIO_TIMER_GetCurrentSysTime+0x20>)
1004b902:	0011      	movs	r1, r2
1004b904:	0018      	movs	r0, r3
1004b906:	f000 fad9 	bl	1004bebc <_get_system_time_and_machine>
1004b90a:	0002      	movs	r2, r0
1004b90c:	000b      	movs	r3, r1
}
1004b90e:	0010      	movs	r0, r2
1004b910:	0019      	movs	r1, r3
1004b912:	46bd      	mov	sp, r7
1004b914:	b002      	add	sp, #8
1004b916:	bd80      	pop	{r7, pc}
1004b918:	20002210 	.word	0x20002210

1004b91c <HAL_RADIO_TIMER_StartVirtualTimerSysTime>:
  * @param time: Absolute time expressed in STU.
  * @retval 0 if the timerHandle is valid.
  * @retval 1 if the timerHandle is not valid. It is already started.
  */
uint32_t HAL_RADIO_TIMER_StartVirtualTimerSysTime(VTIMER_HandleType *timerHandle, uint64_t time)
{
1004b91c:	b590      	push	{r4, r7, lr}
1004b91e:	b087      	sub	sp, #28
1004b920:	af00      	add	r7, sp, #0
1004b922:	60f8      	str	r0, [r7, #12]
1004b924:	603a      	str	r2, [r7, #0]
1004b926:	607b      	str	r3, [r7, #4]
  uint8_t retVal;
  retVal = _start_timer(timerHandle, time);
1004b928:	683a      	ldr	r2, [r7, #0]
1004b92a:	687b      	ldr	r3, [r7, #4]
1004b92c:	68f9      	ldr	r1, [r7, #12]
1004b92e:	0008      	movs	r0, r1
1004b930:	f000 fa66 	bl	1004be00 <_start_timer>
1004b934:	0002      	movs	r2, r0
1004b936:	2417      	movs	r4, #23
1004b938:	193b      	adds	r3, r7, r4
1004b93a:	701a      	strb	r2, [r3, #0]
  _virtualTimeBaseEnable(ENABLE);
1004b93c:	2001      	movs	r0, #1
1004b93e:	f000 fbdd 	bl	1004c0fc <_virtualTimeBaseEnable>

  return retVal;
1004b942:	193b      	adds	r3, r7, r4
1004b944:	781b      	ldrb	r3, [r3, #0]
}
1004b946:	0018      	movs	r0, r3
1004b948:	46bd      	mov	sp, r7
1004b94a:	b007      	add	sp, #28
1004b94c:	bd90      	pop	{r4, r7, pc}
	...

1004b950 <HAL_RADIO_TIMER_StopVirtualTimer>:
  * @brief  Stops the one-shot virtual timer specified if found
  * @param  timerHandle: The virtual timer
  * @retval None
  */
void HAL_RADIO_TIMER_StopVirtualTimer(VTIMER_HandleType *timerHandle)
{
1004b950:	b590      	push	{r4, r7, lr}
1004b952:	b089      	sub	sp, #36	@ 0x24
1004b954:	af00      	add	r7, sp, #0
1004b956:	6078      	str	r0, [r7, #4]
  VTIMER_HandleType *rootNode = _remove_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle);
1004b958:	4b28      	ldr	r3, [pc, #160]	@ (1004b9fc <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004b95a:	228c      	movs	r2, #140	@ 0x8c
1004b95c:	589b      	ldr	r3, [r3, r2]
1004b95e:	687a      	ldr	r2, [r7, #4]
1004b960:	0011      	movs	r1, r2
1004b962:	0018      	movs	r0, r3
1004b964:	f000 fbf6 	bl	1004c154 <_remove_timer_in_queue>
1004b968:	0003      	movs	r3, r0
1004b96a:	61fb      	str	r3, [r7, #28]
  uint8_t expired = 0;
1004b96c:	210f      	movs	r1, #15
1004b96e:	187b      	adds	r3, r7, r1
1004b970:	2200      	movs	r2, #0
1004b972:	701a      	strb	r2, [r3, #0]
  timerHandle->active = FALSE;
1004b974:	687b      	ldr	r3, [r7, #4]
1004b976:	2200      	movs	r2, #0
1004b978:	731a      	strb	r2, [r3, #12]
  if (RADIO_TIMER_Context.rootNode != rootNode)
1004b97a:	4b20      	ldr	r3, [pc, #128]	@ (1004b9fc <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004b97c:	228c      	movs	r2, #140	@ 0x8c
1004b97e:	589b      	ldr	r3, [r3, r2]
1004b980:	69fa      	ldr	r2, [r7, #28]
1004b982:	429a      	cmp	r2, r3
1004b984:	d031      	beq.n	1004b9ea <HAL_RADIO_TIMER_StopVirtualTimer+0x9a>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(rootNode, &expired);
1004b986:	000c      	movs	r4, r1
1004b988:	187a      	adds	r2, r7, r1
1004b98a:	69fb      	ldr	r3, [r7, #28]
1004b98c:	0011      	movs	r1, r2
1004b98e:	0018      	movs	r0, r3
1004b990:	f000 fafc 	bl	1004bf8c <_update_user_timeout>
1004b994:	0002      	movs	r2, r0
1004b996:	4b19      	ldr	r3, [pc, #100]	@ (1004b9fc <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004b998:	218c      	movs	r1, #140	@ 0x8c
1004b99a:	505a      	str	r2, [r3, r1]
    if (expired)
1004b99c:	193b      	adds	r3, r7, r4
1004b99e:	781b      	ldrb	r3, [r3, #0]
1004b9a0:	2b00      	cmp	r3, #0
1004b9a2:	d026      	beq.n	1004b9f2 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b9a4:	f3ef 8310 	mrs	r3, PRIMASK
1004b9a8:	617b      	str	r3, [r7, #20]
  return(result);
1004b9aa:	697b      	ldr	r3, [r7, #20]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
1004b9ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
1004b9ae:	b672      	cpsid	i
}
1004b9b0:	46c0      	nop			@ (mov r8, r8)
1004b9b2:	4b12      	ldr	r3, [pc, #72]	@ (1004b9fc <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004b9b4:	2291      	movs	r2, #145	@ 0x91
1004b9b6:	5c9b      	ldrb	r3, [r3, r2]
1004b9b8:	3301      	adds	r3, #1
1004b9ba:	4a10      	ldr	r2, [pc, #64]	@ (1004b9fc <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004b9bc:	2192      	movs	r1, #146	@ 0x92
1004b9be:	5c52      	ldrb	r2, [r2, r1]
1004b9c0:	4293      	cmp	r3, r2
1004b9c2:	d103      	bne.n	1004b9cc <HAL_RADIO_TIMER_StopVirtualTimer+0x7c>
1004b9c4:	4b0d      	ldr	r3, [pc, #52]	@ (1004b9fc <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004b9c6:	2291      	movs	r2, #145	@ 0x91
1004b9c8:	5c9b      	ldrb	r3, [r3, r2]
1004b9ca:	e004      	b.n	1004b9d6 <HAL_RADIO_TIMER_StopVirtualTimer+0x86>
1004b9cc:	4b0b      	ldr	r3, [pc, #44]	@ (1004b9fc <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004b9ce:	2291      	movs	r2, #145	@ 0x91
1004b9d0:	5c9b      	ldrb	r3, [r3, r2]
1004b9d2:	3301      	adds	r3, #1
1004b9d4:	b2db      	uxtb	r3, r3
1004b9d6:	4a09      	ldr	r2, [pc, #36]	@ (1004b9fc <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004b9d8:	2191      	movs	r1, #145	@ 0x91
1004b9da:	5453      	strb	r3, [r2, r1]
1004b9dc:	69bb      	ldr	r3, [r7, #24]
1004b9de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b9e0:	693b      	ldr	r3, [r7, #16]
1004b9e2:	f383 8810 	msr	PRIMASK, r3
}
1004b9e6:	46c0      	nop			@ (mov r8, r8)
  }
  else
  {
    RADIO_TIMER_Context.rootNode = rootNode;
  }
}
1004b9e8:	e003      	b.n	1004b9f2 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
    RADIO_TIMER_Context.rootNode = rootNode;
1004b9ea:	4b04      	ldr	r3, [pc, #16]	@ (1004b9fc <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004b9ec:	218c      	movs	r1, #140	@ 0x8c
1004b9ee:	69fa      	ldr	r2, [r7, #28]
1004b9f0:	505a      	str	r2, [r3, r1]
}
1004b9f2:	46c0      	nop			@ (mov r8, r8)
1004b9f4:	46bd      	mov	sp, r7
1004b9f6:	b009      	add	sp, #36	@ 0x24
1004b9f8:	bd90      	pop	{r4, r7, pc}
1004b9fa:	46c0      	nop			@ (mov r8, r8)
1004b9fc:	20002210 	.word	0x20002210

1004ba00 <HAL_RADIO_TIMER_TimeoutCallback>:
/**
  * @brief  Virtual timer Timeout Callback. It signals that a host timeout occurred.
  * @retval None
  */
void HAL_RADIO_TIMER_TimeoutCallback(void)
{
1004ba00:	b580      	push	{r7, lr}
1004ba02:	b082      	sub	sp, #8
1004ba04:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
1004ba06:	2300      	movs	r3, #0
1004ba08:	607b      	str	r3, [r7, #4]
  UNUSED(status);
1004ba0a:	687b      	ldr	r3, [r7, #4]
#if defined (STM32WB06) || defined (STM32WB07)
  RADIO_TIMER_Context.hostIsRadioPending = 0;
#endif

  /* Disable host timer */
  LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
1004ba0c:	4b13      	ldr	r3, [pc, #76]	@ (1004ba5c <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004ba0e:	0018      	movs	r0, r3
1004ba10:	f7ff fb18 	bl	1004b044 <LL_RADIO_TIMER_DisableCPUWakeupTimer>
  INCREMENT_EXPIRE_COUNT_ISR;
1004ba14:	4b12      	ldr	r3, [pc, #72]	@ (1004ba60 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004ba16:	2291      	movs	r2, #145	@ 0x91
1004ba18:	5c9b      	ldrb	r3, [r3, r2]
1004ba1a:	3301      	adds	r3, #1
1004ba1c:	4a10      	ldr	r2, [pc, #64]	@ (1004ba60 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004ba1e:	2192      	movs	r1, #146	@ 0x92
1004ba20:	5c52      	ldrb	r2, [r2, r1]
1004ba22:	4293      	cmp	r3, r2
1004ba24:	d103      	bne.n	1004ba2e <HAL_RADIO_TIMER_TimeoutCallback+0x2e>
1004ba26:	4b0e      	ldr	r3, [pc, #56]	@ (1004ba60 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004ba28:	2291      	movs	r2, #145	@ 0x91
1004ba2a:	5c9b      	ldrb	r3, [r3, r2]
1004ba2c:	e004      	b.n	1004ba38 <HAL_RADIO_TIMER_TimeoutCallback+0x38>
1004ba2e:	4b0c      	ldr	r3, [pc, #48]	@ (1004ba60 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004ba30:	2291      	movs	r2, #145	@ 0x91
1004ba32:	5c9b      	ldrb	r3, [r3, r2]
1004ba34:	3301      	adds	r3, #1
1004ba36:	b2db      	uxtb	r3, r3
1004ba38:	4a09      	ldr	r2, [pc, #36]	@ (1004ba60 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004ba3a:	2191      	movs	r1, #145	@ 0x91
1004ba3c:	5453      	strb	r3, [r2, r1]
  /* Clear the interrupt */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
1004ba3e:	4b07      	ldr	r3, [pc, #28]	@ (1004ba5c <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004ba40:	0018      	movs	r0, r3
1004ba42:	f7ff fb77 	bl	1004b134 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP);
1004ba46:	4b05      	ldr	r3, [pc, #20]	@ (1004ba5c <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004ba48:	0018      	movs	r0, r3
1004ba4a:	f7ff fb81 	bl	1004b150 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>
1004ba4e:	0003      	movs	r3, r0
1004ba50:	607b      	str	r3, [r7, #4]
}
1004ba52:	46c0      	nop			@ (mov r8, r8)
1004ba54:	46bd      	mov	sp, r7
1004ba56:	b002      	add	sp, #8
1004ba58:	bd80      	pop	{r7, pc}
1004ba5a:	46c0      	nop			@ (mov r8, r8)
1004ba5c:	60001800 	.word	0x60001800
1004ba60:	20002210 	.word	0x20002210

1004ba64 <_calibrationProcedure>:
/** @defgroup RADIO_TIMER_Private_Functions  RADIO TIMER Private Functions
  * @{
  */

static void _calibrationProcedure(void)
{
1004ba64:	b580      	push	{r7, lr}
1004ba66:	af00      	add	r7, sp, #0
  /* Make sure any pending calibration is over */
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
1004ba68:	46c0      	nop			@ (mov r8, r8)
1004ba6a:	4b0b      	ldr	r3, [pc, #44]	@ (1004ba98 <_calibrationProcedure+0x34>)
1004ba6c:	0018      	movs	r0, r3
1004ba6e:	f7ff fbb9 	bl	1004b1e4 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004ba72:	1e03      	subs	r3, r0, #0
1004ba74:	d0f9      	beq.n	1004ba6a <_calibrationProcedure+0x6>

  /* Set SLOW_COUNT to 23, that is calibrate over 24 clock periods, this number
  cannot be changed without changing all the integer maths function in the
  file  */
  LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL, 23);
1004ba76:	4b08      	ldr	r3, [pc, #32]	@ (1004ba98 <_calibrationProcedure+0x34>)
1004ba78:	2117      	movs	r1, #23
1004ba7a:	0018      	movs	r0, r3
1004ba7c:	f7ff fb79 	bl	1004b172 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>

  /* Start a calibration and take the correct freq */
  _timer_calibrate(&RADIO_TIMER_Context.calibrationData);
1004ba80:	4b06      	ldr	r3, [pc, #24]	@ (1004ba9c <_calibrationProcedure+0x38>)
1004ba82:	0018      	movs	r0, r3
1004ba84:	f000 f81e 	bl	1004bac4 <_timer_calibrate>
  /* For first time set last to current */
  RADIO_TIMER_Context.calibrationData.last_period1 = RADIO_TIMER_Context.calibrationData.period1;
1004ba88:	4b05      	ldr	r3, [pc, #20]	@ (1004baa0 <_calibrationProcedure+0x3c>)
1004ba8a:	69da      	ldr	r2, [r3, #28]
1004ba8c:	4b04      	ldr	r3, [pc, #16]	@ (1004baa0 <_calibrationProcedure+0x3c>)
1004ba8e:	621a      	str	r2, [r3, #32]

}
1004ba90:	46c0      	nop			@ (mov r8, r8)
1004ba92:	46bd      	mov	sp, r7
1004ba94:	bd80      	pop	{r7, pc}
1004ba96:	46c0      	nop			@ (mov r8, r8)
1004ba98:	60001000 	.word	0x60001000
1004ba9c:	20002220 	.word	0x20002220
1004baa0:	20002210 	.word	0x20002210

1004baa4 <_timer_start_calibration>:

static void _timer_start_calibration(void)
{
1004baa4:	b580      	push	{r7, lr}
1004baa6:	af00      	add	r7, sp, #0
  /* Clear any pending interrupt */
  LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL);
1004baa8:	4b05      	ldr	r3, [pc, #20]	@ (1004bac0 <_timer_start_calibration+0x1c>)
1004baaa:	0018      	movs	r0, r3
1004baac:	f7ff fb8c 	bl	1004b1c8 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>
  /* Start calibration */
  LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL);
1004bab0:	4b03      	ldr	r3, [pc, #12]	@ (1004bac0 <_timer_start_calibration+0x1c>)
1004bab2:	0018      	movs	r0, r3
1004bab4:	f7ff fb69 	bl	1004b18a <LL_RADIO_TIMER_StartLSICalibration>
}
1004bab8:	46c0      	nop			@ (mov r8, r8)
1004baba:	46bd      	mov	sp, r7
1004babc:	bd80      	pop	{r7, pc}
1004babe:	46c0      	nop			@ (mov r8, r8)
1004bac0:	60001000 	.word	0x60001000

1004bac4 <_timer_calibrate>:

static void _timer_calibrate(CalibrationDataTypeDef *calibrationData)
{
1004bac4:	b580      	push	{r7, lr}
1004bac6:	b082      	sub	sp, #8
1004bac8:	af00      	add	r7, sp, #0
1004baca:	6078      	str	r0, [r7, #4]
  _timer_start_calibration();
1004bacc:	f7ff ffea 	bl	1004baa4 <_timer_start_calibration>
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
1004bad0:	46c0      	nop			@ (mov r8, r8)
1004bad2:	4b07      	ldr	r3, [pc, #28]	@ (1004baf0 <_timer_calibrate+0x2c>)
1004bad4:	0018      	movs	r0, r3
1004bad6:	f7ff fb85 	bl	1004b1e4 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004bada:	1e03      	subs	r3, r0, #0
1004badc:	d0f9      	beq.n	1004bad2 <_timer_calibrate+0xe>
  _get_calibration_data(calibrationData);
1004bade:	687b      	ldr	r3, [r7, #4]
1004bae0:	0018      	movs	r0, r3
1004bae2:	f000 f807 	bl	1004baf4 <_get_calibration_data>
}
1004bae6:	46c0      	nop			@ (mov r8, r8)
1004bae8:	46bd      	mov	sp, r7
1004baea:	b002      	add	sp, #8
1004baec:	bd80      	pop	{r7, pc}
1004baee:	46c0      	nop			@ (mov r8, r8)
1004baf0:	60001000 	.word	0x60001000

1004baf4 <_get_calibration_data>:

static void _get_calibration_data(CalibrationDataTypeDef *calibrationData)
{
1004baf4:	b580      	push	{r7, lr}
1004baf6:	b08a      	sub	sp, #40	@ 0x28
1004baf8:	af00      	add	r7, sp, #0
1004bafa:	6078      	str	r0, [r7, #4]
  int32_t b2;
  int32_t mult;
  int32_t a1;
  int32_t a2;

  period =  LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
1004bafc:	4b2e      	ldr	r3, [pc, #184]	@ (1004bbb8 <_get_calibration_data+0xc4>)
1004bafe:	0018      	movs	r0, r3
1004bb00:	f7ff fb4e 	bl	1004b1a0 <LL_RADIO_TIMER_GetLSIPeriod>
1004bb04:	0003      	movs	r3, r0
1004bb06:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
1004bb08:	e005      	b.n	1004bb16 <_get_calibration_data+0x22>
  {
    period = LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
1004bb0a:	4b2b      	ldr	r3, [pc, #172]	@ (1004bbb8 <_get_calibration_data+0xc4>)
1004bb0c:	0018      	movs	r0, r3
1004bb0e:	f7ff fb47 	bl	1004b1a0 <LL_RADIO_TIMER_GetLSIPeriod>
1004bb12:	0003      	movs	r3, r0
1004bb14:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
1004bb16:	4b28      	ldr	r3, [pc, #160]	@ (1004bbb8 <_get_calibration_data+0xc4>)
1004bb18:	0018      	movs	r0, r3
1004bb1a:	f7ff fb41 	bl	1004b1a0 <LL_RADIO_TIMER_GetLSIPeriod>
1004bb1e:	0002      	movs	r2, r0
1004bb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004bb22:	429a      	cmp	r2, r3
1004bb24:	d1f1      	bne.n	1004bb0a <_get_calibration_data+0x16>
1004bb26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004bb28:	2b00      	cmp	r3, #0
1004bb2a:	d0ee      	beq.n	1004bb0a <_get_calibration_data+0x16>
  }

  mul1 = 0x8BCF6 ;
1004bb2c:	4b23      	ldr	r3, [pc, #140]	@ (1004bbbc <_get_calibration_data+0xc8>)
1004bb2e:	61fb      	str	r3, [r7, #28]
  b1 = period >> 8 ;
1004bb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004bb32:	121b      	asrs	r3, r3, #8
1004bb34:	61bb      	str	r3, [r7, #24]
  b2 = period & 0xff ;
1004bb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004bb38:	22ff      	movs	r2, #255	@ 0xff
1004bb3a:	4013      	ands	r3, r2
1004bb3c:	617b      	str	r3, [r7, #20]
  calibrationData->period1 = ((mul1 * b1) + ((b2 * mul1) >> 8) + 16) >> 5;
1004bb3e:	69fb      	ldr	r3, [r7, #28]
1004bb40:	69ba      	ldr	r2, [r7, #24]
1004bb42:	435a      	muls	r2, r3
1004bb44:	697b      	ldr	r3, [r7, #20]
1004bb46:	69f9      	ldr	r1, [r7, #28]
1004bb48:	434b      	muls	r3, r1
1004bb4a:	121b      	asrs	r3, r3, #8
1004bb4c:	18d3      	adds	r3, r2, r3
1004bb4e:	3310      	adds	r3, #16
1004bb50:	115a      	asrs	r2, r3, #5
1004bb52:	687b      	ldr	r3, [r7, #4]
1004bb54:	60da      	str	r2, [r3, #12]
  calibrationData->period = period;
1004bb56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004bb58:	687b      	ldr	r3, [r7, #4]
1004bb5a:	601a      	str	r2, [r3, #0]

  mult = 0x753 ;
1004bb5c:	4b18      	ldr	r3, [pc, #96]	@ (1004bbc0 <_get_calibration_data+0xcc>)
1004bb5e:	613b      	str	r3, [r7, #16]
  freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
1004bb60:	4b15      	ldr	r3, [pc, #84]	@ (1004bbb8 <_get_calibration_data+0xc4>)
1004bb62:	0018      	movs	r0, r3
1004bb64:	f7ff fb26 	bl	1004b1b4 <LL_RADIO_TIMER_GetLSIFrequency>
1004bb68:	0003      	movs	r3, r0
1004bb6a:	623b      	str	r3, [r7, #32]

  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
1004bb6c:	e005      	b.n	1004bb7a <_get_calibration_data+0x86>
  {
    freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
1004bb6e:	4b12      	ldr	r3, [pc, #72]	@ (1004bbb8 <_get_calibration_data+0xc4>)
1004bb70:	0018      	movs	r0, r3
1004bb72:	f7ff fb1f 	bl	1004b1b4 <LL_RADIO_TIMER_GetLSIFrequency>
1004bb76:	0003      	movs	r3, r0
1004bb78:	623b      	str	r3, [r7, #32]
  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
1004bb7a:	4b0f      	ldr	r3, [pc, #60]	@ (1004bbb8 <_get_calibration_data+0xc4>)
1004bb7c:	0018      	movs	r0, r3
1004bb7e:	f7ff fb19 	bl	1004b1b4 <LL_RADIO_TIMER_GetLSIFrequency>
1004bb82:	0002      	movs	r2, r0
1004bb84:	6a3b      	ldr	r3, [r7, #32]
1004bb86:	429a      	cmp	r2, r3
1004bb88:	d1f1      	bne.n	1004bb6e <_get_calibration_data+0x7a>
1004bb8a:	6a3b      	ldr	r3, [r7, #32]
1004bb8c:	2b00      	cmp	r3, #0
1004bb8e:	d0ee      	beq.n	1004bb6e <_get_calibration_data+0x7a>
  }
  a1 = freq >> 6 ;
1004bb90:	6a3b      	ldr	r3, [r7, #32]
1004bb92:	119b      	asrs	r3, r3, #6
1004bb94:	60fb      	str	r3, [r7, #12]
  a2 = a1 * mult ;
1004bb96:	68fb      	ldr	r3, [r7, #12]
1004bb98:	693a      	ldr	r2, [r7, #16]
1004bb9a:	4353      	muls	r3, r2
1004bb9c:	60bb      	str	r3, [r7, #8]
  calibrationData->freq1 = (a2 + 128) >> 8 ;
1004bb9e:	68bb      	ldr	r3, [r7, #8]
1004bba0:	3380      	adds	r3, #128	@ 0x80
1004bba2:	121a      	asrs	r2, r3, #8
1004bba4:	687b      	ldr	r3, [r7, #4]
1004bba6:	609a      	str	r2, [r3, #8]
  calibrationData->freq = freq;
1004bba8:	6a3a      	ldr	r2, [r7, #32]
1004bbaa:	687b      	ldr	r3, [r7, #4]
1004bbac:	605a      	str	r2, [r3, #4]
}
1004bbae:	46c0      	nop			@ (mov r8, r8)
1004bbb0:	46bd      	mov	sp, r7
1004bbb2:	b00a      	add	sp, #40	@ 0x28
1004bbb4:	bd80      	pop	{r7, pc}
1004bbb6:	46c0      	nop			@ (mov r8, r8)
1004bbb8:	60001000 	.word	0x60001000
1004bbbc:	0008bcf6 	.word	0x0008bcf6
1004bbc0:	00000753 	.word	0x00000753

1004bbc4 <_configureTxRxDelay>:

static void _configureTxRxDelay(RADIO_TIMER_ContextTypeDef *context, uint8_t calculate_st)
{
1004bbc4:	b590      	push	{r4, r7, lr}
1004bbc6:	b085      	sub	sp, #20
1004bbc8:	af00      	add	r7, sp, #0
1004bbca:	6078      	str	r0, [r7, #4]
1004bbcc:	000a      	movs	r2, r1
1004bbce:	1cfb      	adds	r3, r7, #3
1004bbd0:	701a      	strb	r2, [r3, #0]
  uint8_t tx_delay_start;

  tx_delay_start = (BLUEGLOB->TXDELAYSTART * 125 / 1000) + 1;
1004bbd2:	4b38      	ldr	r3, [pc, #224]	@ (1004bcb4 <_configureTxRxDelay+0xf0>)
1004bbd4:	7b9b      	ldrb	r3, [r3, #14]
1004bbd6:	b2db      	uxtb	r3, r3
1004bbd8:	2b00      	cmp	r3, #0
1004bbda:	da00      	bge.n	1004bbde <_configureTxRxDelay+0x1a>
1004bbdc:	3307      	adds	r3, #7
1004bbde:	10db      	asrs	r3, r3, #3
1004bbe0:	b2da      	uxtb	r2, r3
1004bbe2:	240f      	movs	r4, #15
1004bbe4:	193b      	adds	r3, r7, r4
1004bbe6:	3201      	adds	r2, #1
1004bbe8:	701a      	strb	r2, [r3, #0]

  BLUEGLOB->WAKEUPINITDELAY =  blue_unit_conversion(WAKEUP_INIT_DELAY, context->calibrationData.freq1, MULT64_THR_FREQ);
1004bbea:	687b      	ldr	r3, [r7, #4]
1004bbec:	699b      	ldr	r3, [r3, #24]
1004bbee:	0019      	movs	r1, r3
1004bbf0:	4b31      	ldr	r3, [pc, #196]	@ (1004bcb8 <_configureTxRxDelay+0xf4>)
1004bbf2:	001a      	movs	r2, r3
1004bbf4:	201b      	movs	r0, #27
1004bbf6:	f7f4 fa63 	bl	100400c0 <blue_unit_conversion>
1004bbfa:	0002      	movs	r2, r0
1004bbfc:	4b2d      	ldr	r3, [pc, #180]	@ (1004bcb4 <_configureTxRxDelay+0xf0>)
1004bbfe:	b2d2      	uxtb	r2, r2
1004bc00:	715a      	strb	r2, [r3, #5]
  context->TxRxDelay.tim12_delay_mt = _us_to_machinetime(BLUEGLOB->TIMER12INITDELAYCAL);
1004bc02:	4b2c      	ldr	r3, [pc, #176]	@ (1004bcb4 <_configureTxRxDelay+0xf0>)
1004bc04:	799b      	ldrb	r3, [r3, #6]
1004bc06:	b2db      	uxtb	r3, r3
1004bc08:	0018      	movs	r0, r3
1004bc0a:	f000 f86d 	bl	1004bce8 <_us_to_machinetime>
1004bc0e:	0003      	movs	r3, r0
1004bc10:	b2d9      	uxtb	r1, r3
1004bc12:	687b      	ldr	r3, [r7, #4]
1004bc14:	223d      	movs	r2, #61	@ 0x3d
1004bc16:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start);
1004bc18:	4b26      	ldr	r3, [pc, #152]	@ (1004bcb4 <_configureTxRxDelay+0xf0>)
1004bc1a:	7a1b      	ldrb	r3, [r3, #8]
1004bc1c:	b2db      	uxtb	r3, r3
1004bc1e:	001a      	movs	r2, r3
1004bc20:	193b      	adds	r3, r7, r4
1004bc22:	781b      	ldrb	r3, [r3, #0]
1004bc24:	18d3      	adds	r3, r2, r3
1004bc26:	0018      	movs	r0, r3
1004bc28:	f000 f85e 	bl	1004bce8 <_us_to_machinetime>
1004bc2c:	0003      	movs	r3, r0
1004bc2e:	b2d9      	uxtb	r1, r3
1004bc30:	687b      	ldr	r3, [r7, #4]
1004bc32:	2238      	movs	r2, #56	@ 0x38
1004bc34:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_no_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITNOCALDELAYCHK + tx_delay_start);
1004bc36:	4b1f      	ldr	r3, [pc, #124]	@ (1004bcb4 <_configureTxRxDelay+0xf0>)
1004bc38:	7a5b      	ldrb	r3, [r3, #9]
1004bc3a:	b2db      	uxtb	r3, r3
1004bc3c:	001a      	movs	r2, r3
1004bc3e:	193b      	adds	r3, r7, r4
1004bc40:	781b      	ldrb	r3, [r3, #0]
1004bc42:	18d3      	adds	r3, r2, r3
1004bc44:	0018      	movs	r0, r3
1004bc46:	f000 f84f 	bl	1004bce8 <_us_to_machinetime>
1004bc4a:	0003      	movs	r3, r0
1004bc4c:	b2d9      	uxtb	r1, r3
1004bc4e:	687b      	ldr	r3, [r7, #4]
1004bc50:	2239      	movs	r2, #57	@ 0x39
1004bc52:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVECALDELAYCHK);
1004bc54:	4b17      	ldr	r3, [pc, #92]	@ (1004bcb4 <_configureTxRxDelay+0xf0>)
1004bc56:	7a9b      	ldrb	r3, [r3, #10]
1004bc58:	b2db      	uxtb	r3, r3
1004bc5a:	0018      	movs	r0, r3
1004bc5c:	f000 f844 	bl	1004bce8 <_us_to_machinetime>
1004bc60:	0003      	movs	r3, r0
1004bc62:	b2d9      	uxtb	r1, r3
1004bc64:	687b      	ldr	r3, [r7, #4]
1004bc66:	223a      	movs	r2, #58	@ 0x3a
1004bc68:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_no_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVENOCALDELAYCHK);
1004bc6a:	4b12      	ldr	r3, [pc, #72]	@ (1004bcb4 <_configureTxRxDelay+0xf0>)
1004bc6c:	7adb      	ldrb	r3, [r3, #11]
1004bc6e:	b2db      	uxtb	r3, r3
1004bc70:	0018      	movs	r0, r3
1004bc72:	f000 f839 	bl	1004bce8 <_us_to_machinetime>
1004bc76:	0003      	movs	r3, r0
1004bc78:	b2d9      	uxtb	r1, r3
1004bc7a:	687b      	ldr	r3, [r7, #4]
1004bc7c:	223b      	movs	r2, #59	@ 0x3b
1004bc7e:	5499      	strb	r1, [r3, r2]

  if (calculate_st)
1004bc80:	1cfb      	adds	r3, r7, #3
1004bc82:	781b      	ldrb	r3, [r3, #0]
1004bc84:	2b00      	cmp	r3, #0
1004bc86:	d010      	beq.n	1004bcaa <_configureTxRxDelay+0xe6>
  {
    context->TxRxDelay.tx_cal_delay_st    = _us_to_systime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start) + WAKEUP_INIT_DELAY;
1004bc88:	4b0a      	ldr	r3, [pc, #40]	@ (1004bcb4 <_configureTxRxDelay+0xf0>)
1004bc8a:	7a1b      	ldrb	r3, [r3, #8]
1004bc8c:	b2db      	uxtb	r3, r3
1004bc8e:	001a      	movs	r2, r3
1004bc90:	193b      	adds	r3, r7, r4
1004bc92:	781b      	ldrb	r3, [r3, #0]
1004bc94:	18d3      	adds	r3, r2, r3
1004bc96:	0018      	movs	r0, r3
1004bc98:	f000 f810 	bl	1004bcbc <_us_to_systime>
1004bc9c:	0003      	movs	r3, r0
1004bc9e:	b2db      	uxtb	r3, r3
1004bca0:	331b      	adds	r3, #27
1004bca2:	b2d9      	uxtb	r1, r3
1004bca4:	687b      	ldr	r3, [r7, #4]
1004bca6:	223c      	movs	r2, #60	@ 0x3c
1004bca8:	5499      	strb	r1, [r3, r2]
  }

}
1004bcaa:	46c0      	nop			@ (mov r8, r8)
1004bcac:	46bd      	mov	sp, r7
1004bcae:	b005      	add	sp, #20
1004bcb0:	bd90      	pop	{r4, r7, pc}
1004bcb2:	46c0      	nop			@ (mov r8, r8)
1004bcb4:	200000c0 	.word	0x200000c0
1004bcb8:	00000326 	.word	0x00000326

1004bcbc <_us_to_systime>:

static uint32_t _us_to_systime(uint32_t time)
{
1004bcbc:	b580      	push	{r7, lr}
1004bcbe:	b084      	sub	sp, #16
1004bcc0:	af00      	add	r7, sp, #0
1004bcc2:	6078      	str	r0, [r7, #4]
  uint32_t t1, t2;
  t1 = time * 0x68;
1004bcc4:	687b      	ldr	r3, [r7, #4]
1004bcc6:	2268      	movs	r2, #104	@ 0x68
1004bcc8:	4353      	muls	r3, r2
1004bcca:	60fb      	str	r3, [r7, #12]
  t2 = time * 0xDB;
1004bccc:	687b      	ldr	r3, [r7, #4]
1004bcce:	22db      	movs	r2, #219	@ 0xdb
1004bcd0:	4353      	muls	r3, r2
1004bcd2:	60bb      	str	r3, [r7, #8]
  return (t1 >> 8) + (t2 >> 16);
1004bcd4:	68fb      	ldr	r3, [r7, #12]
1004bcd6:	0a1a      	lsrs	r2, r3, #8
1004bcd8:	68bb      	ldr	r3, [r7, #8]
1004bcda:	0c1b      	lsrs	r3, r3, #16
1004bcdc:	18d3      	adds	r3, r2, r3
}
1004bcde:	0018      	movs	r0, r3
1004bce0:	46bd      	mov	sp, r7
1004bce2:	b004      	add	sp, #16
1004bce4:	bd80      	pop	{r7, pc}
	...

1004bce8 <_us_to_machinetime>:

static uint32_t _us_to_machinetime(uint32_t time)
{
1004bce8:	b5b0      	push	{r4, r5, r7, lr}
1004bcea:	b088      	sub	sp, #32
1004bcec:	af00      	add	r7, sp, #0
1004bcee:	60f8      	str	r0, [r7, #12]
  uint64_t tmp = (uint64_t)RADIO_TIMER_Context.calibrationData.freq * (uint64_t)time * (uint64_t)3U;
1004bcf0:	4915      	ldr	r1, [pc, #84]	@ (1004bd48 <_us_to_machinetime+0x60>)
1004bcf2:	6949      	ldr	r1, [r1, #20]
1004bcf4:	6039      	str	r1, [r7, #0]
1004bcf6:	2100      	movs	r1, #0
1004bcf8:	6079      	str	r1, [r7, #4]
1004bcfa:	68f9      	ldr	r1, [r7, #12]
1004bcfc:	000a      	movs	r2, r1
1004bcfe:	2100      	movs	r1, #0
1004bd00:	000b      	movs	r3, r1
1004bd02:	6838      	ldr	r0, [r7, #0]
1004bd04:	6879      	ldr	r1, [r7, #4]
1004bd06:	f7f4 fc5b 	bl	100405c0 <__aeabi_lmul>
1004bd0a:	0002      	movs	r2, r0
1004bd0c:	000b      	movs	r3, r1
1004bd0e:	0010      	movs	r0, r2
1004bd10:	0019      	movs	r1, r3
1004bd12:	0002      	movs	r2, r0
1004bd14:	000b      	movs	r3, r1
1004bd16:	1892      	adds	r2, r2, r2
1004bd18:	415b      	adcs	r3, r3
1004bd1a:	1812      	adds	r2, r2, r0
1004bd1c:	414b      	adcs	r3, r1
1004bd1e:	61ba      	str	r2, [r7, #24]
1004bd20:	61fb      	str	r3, [r7, #28]
  uint32_t time_mt = ((tmp + (1 << 26)) >> 27) & TIMER_MAX_VALUE;
1004bd22:	69ba      	ldr	r2, [r7, #24]
1004bd24:	69fb      	ldr	r3, [r7, #28]
1004bd26:	2080      	movs	r0, #128	@ 0x80
1004bd28:	04c0      	lsls	r0, r0, #19
1004bd2a:	2100      	movs	r1, #0
1004bd2c:	1812      	adds	r2, r2, r0
1004bd2e:	414b      	adcs	r3, r1
1004bd30:	0159      	lsls	r1, r3, #5
1004bd32:	0ed4      	lsrs	r4, r2, #27
1004bd34:	430c      	orrs	r4, r1
1004bd36:	0edd      	lsrs	r5, r3, #27
1004bd38:	0023      	movs	r3, r4
1004bd3a:	617b      	str	r3, [r7, #20]

  return time_mt;
1004bd3c:	697b      	ldr	r3, [r7, #20]
}
1004bd3e:	0018      	movs	r0, r3
1004bd40:	46bd      	mov	sp, r7
1004bd42:	b008      	add	sp, #32
1004bd44:	bdb0      	pop	{r4, r5, r7, pc}
1004bd46:	46c0      	nop			@ (mov r8, r8)
1004bd48:	20002210 	.word	0x20002210

1004bd4c <_update_xtal_startup_time>:

static void _update_xtal_startup_time(uint16_t hs_startup_time, int32_t freq1)
{
1004bd4c:	b580      	push	{r7, lr}
1004bd4e:	b084      	sub	sp, #16
1004bd50:	af00      	add	r7, sp, #0
1004bd52:	0002      	movs	r2, r0
1004bd54:	6039      	str	r1, [r7, #0]
1004bd56:	1dbb      	adds	r3, r7, #6
1004bd58:	801a      	strh	r2, [r3, #0]
  int32_t time1;

  time1 = blue_unit_conversion(hs_startup_time, freq1, MULT64_THR_FREQ);
1004bd5a:	1dbb      	adds	r3, r7, #6
1004bd5c:	881b      	ldrh	r3, [r3, #0]
1004bd5e:	6839      	ldr	r1, [r7, #0]
1004bd60:	4a0e      	ldr	r2, [pc, #56]	@ (1004bd9c <_update_xtal_startup_time+0x50>)
1004bd62:	0018      	movs	r0, r3
1004bd64:	f7f4 f9ac 	bl	100400c0 <blue_unit_conversion>
1004bd68:	0003      	movs	r3, r0
1004bd6a:	60fb      	str	r3, [r7, #12]
  if (time1 >= 4096)
1004bd6c:	68fa      	ldr	r2, [r7, #12]
1004bd6e:	2380      	movs	r3, #128	@ 0x80
1004bd70:	015b      	lsls	r3, r3, #5
1004bd72:	429a      	cmp	r2, r3
1004bd74:	db01      	blt.n	1004bd7a <_update_xtal_startup_time+0x2e>
  {
    time1 = 4095;
1004bd76:	4b0a      	ldr	r3, [pc, #40]	@ (1004bda0 <_update_xtal_startup_time+0x54>)
1004bd78:	60fb      	str	r3, [r7, #12]
  }
  if (time1 < 16)
1004bd7a:	68fb      	ldr	r3, [r7, #12]
1004bd7c:	2b0f      	cmp	r3, #15
1004bd7e:	dc01      	bgt.n	1004bd84 <_update_xtal_startup_time+0x38>
  {
    time1 = 16;
1004bd80:	2310      	movs	r3, #16
1004bd82:	60fb      	str	r3, [r7, #12]
  }
  LL_RADIO_TIMER_SetWakeupOffset(WAKEUP, (time1 >> 4));
1004bd84:	68fb      	ldr	r3, [r7, #12]
1004bd86:	111b      	asrs	r3, r3, #4
1004bd88:	b2db      	uxtb	r3, r3
1004bd8a:	4a06      	ldr	r2, [pc, #24]	@ (1004bda4 <_update_xtal_startup_time+0x58>)
1004bd8c:	0019      	movs	r1, r3
1004bd8e:	0010      	movs	r0, r2
1004bd90:	f7ff f968 	bl	1004b064 <LL_RADIO_TIMER_SetWakeupOffset>
}
1004bd94:	46c0      	nop			@ (mov r8, r8)
1004bd96:	46bd      	mov	sp, r7
1004bd98:	b004      	add	sp, #16
1004bd9a:	bd80      	pop	{r7, pc}
1004bd9c:	00000326 	.word	0x00000326
1004bda0:	00000fff 	.word	0x00000fff
1004bda4:	60001800 	.word	0x60001800

1004bda8 <_calibration_callback>:

static void _calibration_callback(void *handle)
{
1004bda8:	b5b0      	push	{r4, r5, r7, lr}
1004bdaa:	b082      	sub	sp, #8
1004bdac:	af00      	add	r7, sp, #0
1004bdae:	6078      	str	r0, [r7, #4]
  if(RADIO_TIMER_Context.calibrationSettings.calibration_in_progress == FALSE)
1004bdb0:	4b11      	ldr	r3, [pc, #68]	@ (1004bdf8 <_calibration_callback+0x50>)
1004bdb2:	7b1b      	ldrb	r3, [r3, #12]
1004bdb4:	2201      	movs	r2, #1
1004bdb6:	4053      	eors	r3, r2
1004bdb8:	b2db      	uxtb	r3, r3
1004bdba:	2b00      	cmp	r3, #0
1004bdbc:	d008      	beq.n	1004bdd0 <_calibration_callback+0x28>
  {
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004bdbe:	4b0e      	ldr	r3, [pc, #56]	@ (1004bdf8 <_calibration_callback+0x50>)
1004bdc0:	781b      	ldrb	r3, [r3, #0]
1004bdc2:	2b00      	cmp	r3, #0
1004bdc4:	d001      	beq.n	1004bdca <_calibration_callback+0x22>
    {
      _timer_start_calibration();
1004bdc6:	f7ff fe6d 	bl	1004baa4 <_timer_start_calibration>
    }
    RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = TRUE;
1004bdca:	4b0b      	ldr	r3, [pc, #44]	@ (1004bdf8 <_calibration_callback+0x50>)
1004bdcc:	2201      	movs	r2, #1
1004bdce:	731a      	strb	r2, [r3, #12]
  }
  _start_timer(&RADIO_TIMER_Context.calibrationTimer, HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationCheckDuration);
1004bdd0:	f7ff fd92 	bl	1004b8f8 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004bdd4:	0002      	movs	r2, r0
1004bdd6:	000b      	movs	r3, r1
1004bdd8:	4907      	ldr	r1, [pc, #28]	@ (1004bdf8 <_calibration_callback+0x50>)
1004bdda:	6889      	ldr	r1, [r1, #8]
1004bddc:	000c      	movs	r4, r1
1004bdde:	2100      	movs	r1, #0
1004bde0:	000d      	movs	r5, r1
1004bde2:	1912      	adds	r2, r2, r4
1004bde4:	416b      	adcs	r3, r5
1004bde6:	4905      	ldr	r1, [pc, #20]	@ (1004bdfc <_calibration_callback+0x54>)
1004bde8:	0008      	movs	r0, r1
1004bdea:	f000 f809 	bl	1004be00 <_start_timer>
}
1004bdee:	46c0      	nop			@ (mov r8, r8)
1004bdf0:	46bd      	mov	sp, r7
1004bdf2:	b002      	add	sp, #8
1004bdf4:	bdb0      	pop	{r4, r5, r7, pc}
1004bdf6:	46c0      	nop			@ (mov r8, r8)
1004bdf8:	20002210 	.word	0x20002210
1004bdfc:	20002250 	.word	0x20002250

1004be00 <_start_timer>:

static int32_t _start_timer(VTIMER_HandleType *timerHandle, uint64_t time)
{
1004be00:	b590      	push	{r4, r7, lr}
1004be02:	b089      	sub	sp, #36	@ 0x24
1004be04:	af00      	add	r7, sp, #0
1004be06:	60f8      	str	r0, [r7, #12]
1004be08:	603a      	str	r2, [r7, #0]
1004be0a:	607b      	str	r3, [r7, #4]
  uint8_t expired = 0;
1004be0c:	2313      	movs	r3, #19
1004be0e:	18fb      	adds	r3, r7, r3
1004be10:	2200      	movs	r2, #0
1004be12:	701a      	strb	r2, [r3, #0]

  /* The timer is already started*/
  if (timerHandle->active)
1004be14:	68fb      	ldr	r3, [r7, #12]
1004be16:	7b1b      	ldrb	r3, [r3, #12]
1004be18:	2b00      	cmp	r3, #0
1004be1a:	d001      	beq.n	1004be20 <_start_timer+0x20>
  {
    return 1;
1004be1c:	2301      	movs	r3, #1
1004be1e:	e047      	b.n	1004beb0 <_start_timer+0xb0>
  }
  timerHandle->expiryTime = time;
1004be20:	68f9      	ldr	r1, [r7, #12]
1004be22:	683a      	ldr	r2, [r7, #0]
1004be24:	687b      	ldr	r3, [r7, #4]
1004be26:	600a      	str	r2, [r1, #0]
1004be28:	604b      	str	r3, [r1, #4]
  timerHandle->active = TRUE;
1004be2a:	68fb      	ldr	r3, [r7, #12]
1004be2c:	2201      	movs	r2, #1
1004be2e:	731a      	strb	r2, [r3, #12]
  if (_insert_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle) == timerHandle)
1004be30:	4b21      	ldr	r3, [pc, #132]	@ (1004beb8 <_start_timer+0xb8>)
1004be32:	228c      	movs	r2, #140	@ 0x8c
1004be34:	589b      	ldr	r3, [r3, r2]
1004be36:	68fa      	ldr	r2, [r7, #12]
1004be38:	0011      	movs	r1, r2
1004be3a:	0018      	movs	r0, r3
1004be3c:	f000 f92e 	bl	1004c09c <_insert_timer_in_queue>
1004be40:	0002      	movs	r2, r0
1004be42:	68fb      	ldr	r3, [r7, #12]
1004be44:	4293      	cmp	r3, r2
1004be46:	d130      	bne.n	1004beaa <_start_timer+0xaa>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(timerHandle, &expired);
1004be48:	2413      	movs	r4, #19
1004be4a:	193a      	adds	r2, r7, r4
1004be4c:	68fb      	ldr	r3, [r7, #12]
1004be4e:	0011      	movs	r1, r2
1004be50:	0018      	movs	r0, r3
1004be52:	f000 f89b 	bl	1004bf8c <_update_user_timeout>
1004be56:	0002      	movs	r2, r0
1004be58:	4b17      	ldr	r3, [pc, #92]	@ (1004beb8 <_start_timer+0xb8>)
1004be5a:	218c      	movs	r1, #140	@ 0x8c
1004be5c:	505a      	str	r2, [r3, r1]
    if (expired)
1004be5e:	193b      	adds	r3, r7, r4
1004be60:	781b      	ldrb	r3, [r3, #0]
1004be62:	2b00      	cmp	r3, #0
1004be64:	d021      	beq.n	1004beaa <_start_timer+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004be66:	f3ef 8310 	mrs	r3, PRIMASK
1004be6a:	61bb      	str	r3, [r7, #24]
  return(result);
1004be6c:	69bb      	ldr	r3, [r7, #24]
    {
      /* A new root timer is already expired, mimic timer expire that is normally signaled
       through the interrupt handler that increase the number of expired timers*/
      INCREMENT_EXPIRE_COUNT;
1004be6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004be70:	b672      	cpsid	i
}
1004be72:	46c0      	nop			@ (mov r8, r8)
1004be74:	4b10      	ldr	r3, [pc, #64]	@ (1004beb8 <_start_timer+0xb8>)
1004be76:	2291      	movs	r2, #145	@ 0x91
1004be78:	5c9b      	ldrb	r3, [r3, r2]
1004be7a:	3301      	adds	r3, #1
1004be7c:	4a0e      	ldr	r2, [pc, #56]	@ (1004beb8 <_start_timer+0xb8>)
1004be7e:	2192      	movs	r1, #146	@ 0x92
1004be80:	5c52      	ldrb	r2, [r2, r1]
1004be82:	4293      	cmp	r3, r2
1004be84:	d103      	bne.n	1004be8e <_start_timer+0x8e>
1004be86:	4b0c      	ldr	r3, [pc, #48]	@ (1004beb8 <_start_timer+0xb8>)
1004be88:	2291      	movs	r2, #145	@ 0x91
1004be8a:	5c9b      	ldrb	r3, [r3, r2]
1004be8c:	e004      	b.n	1004be98 <_start_timer+0x98>
1004be8e:	4b0a      	ldr	r3, [pc, #40]	@ (1004beb8 <_start_timer+0xb8>)
1004be90:	2291      	movs	r2, #145	@ 0x91
1004be92:	5c9b      	ldrb	r3, [r3, r2]
1004be94:	3301      	adds	r3, #1
1004be96:	b2db      	uxtb	r3, r3
1004be98:	4a07      	ldr	r2, [pc, #28]	@ (1004beb8 <_start_timer+0xb8>)
1004be9a:	2191      	movs	r1, #145	@ 0x91
1004be9c:	5453      	strb	r3, [r2, r1]
1004be9e:	69fb      	ldr	r3, [r7, #28]
1004bea0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004bea2:	697b      	ldr	r3, [r7, #20]
1004bea4:	f383 8810 	msr	PRIMASK, r3
}
1004bea8:	46c0      	nop			@ (mov r8, r8)
  {
    _check_host_activity();
  }
  #endif
  
  return expired;
1004beaa:	2313      	movs	r3, #19
1004beac:	18fb      	adds	r3, r7, r3
1004beae:	781b      	ldrb	r3, [r3, #0]
}
1004beb0:	0018      	movs	r0, r3
1004beb2:	46bd      	mov	sp, r7
1004beb4:	b009      	add	sp, #36	@ 0x24
1004beb6:	bd90      	pop	{r4, r7, pc}
1004beb8:	20002210 	.word	0x20002210

1004bebc <_get_system_time_and_machine>:

static uint64_t _get_system_time_and_machine(RADIO_TIMER_ContextTypeDef *context, uint32_t *current_machine_time)
{
1004bebc:	b5b0      	push	{r4, r5, r7, lr}
1004bebe:	b08a      	sub	sp, #40	@ 0x28
1004bec0:	af00      	add	r7, sp, #0
1004bec2:	60f8      	str	r0, [r7, #12]
1004bec4:	60b9      	str	r1, [r7, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004bec6:	f3ef 8310 	mrs	r3, PRIMASK
1004beca:	617b      	str	r3, [r7, #20]
  return(result);
1004becc:	697b      	ldr	r3, [r7, #20]
  uint32_t difftime;
  uint64_t new_time;

  ATOMIC_SECTION_BEGIN();
1004bece:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004bed0:	b672      	cpsid	i
}
1004bed2:	46c0      	nop			@ (mov r8, r8)
  new_time = context->cumulative_time;
1004bed4:	68fb      	ldr	r3, [r7, #12]
1004bed6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004bed8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004beda:	623a      	str	r2, [r7, #32]
1004bedc:	627b      	str	r3, [r7, #36]	@ 0x24
  *current_machine_time =  LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004bede:	4b29      	ldr	r3, [pc, #164]	@ (1004bf84 <_get_system_time_and_machine+0xc8>)
1004bee0:	0018      	movs	r0, r3
1004bee2:	f7ff f8e6 	bl	1004b0b2 <LL_RADIO_TIMER_GetAbsoluteTime>
1004bee6:	0002      	movs	r2, r0
1004bee8:	68bb      	ldr	r3, [r7, #8]
1004beea:	601a      	str	r2, [r3, #0]
  difftime = TIME_ABSDIFF(*current_machine_time, context->last_machine_time);
1004beec:	68bb      	ldr	r3, [r7, #8]
1004beee:	681a      	ldr	r2, [r3, #0]
1004bef0:	68fb      	ldr	r3, [r7, #12]
1004bef2:	2180      	movs	r1, #128	@ 0x80
1004bef4:	585b      	ldr	r3, [r3, r1]
1004bef6:	1ad3      	subs	r3, r2, r3
1004bef8:	61bb      	str	r3, [r7, #24]
  new_time += blue_unit_conversion(difftime, context->calibrationData.period1, MULT64_THR_PERIOD);
1004befa:	68fb      	ldr	r3, [r7, #12]
1004befc:	69db      	ldr	r3, [r3, #28]
1004befe:	0019      	movs	r1, r3
1004bf00:	4a21      	ldr	r2, [pc, #132]	@ (1004bf88 <_get_system_time_and_machine+0xcc>)
1004bf02:	69bb      	ldr	r3, [r7, #24]
1004bf04:	0018      	movs	r0, r3
1004bf06:	f7f4 f8db 	bl	100400c0 <blue_unit_conversion>
1004bf0a:	0003      	movs	r3, r0
1004bf0c:	603b      	str	r3, [r7, #0]
1004bf0e:	2300      	movs	r3, #0
1004bf10:	607b      	str	r3, [r7, #4]
1004bf12:	6a3a      	ldr	r2, [r7, #32]
1004bf14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004bf16:	6838      	ldr	r0, [r7, #0]
1004bf18:	6879      	ldr	r1, [r7, #4]
1004bf1a:	1812      	adds	r2, r2, r0
1004bf1c:	414b      	adcs	r3, r1
1004bf1e:	623a      	str	r2, [r7, #32]
1004bf20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (new_time < context->last_system_time)
1004bf22:	68fb      	ldr	r3, [r7, #12]
1004bf24:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
1004bf26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
1004bf28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004bf2a:	4299      	cmp	r1, r3
1004bf2c:	d305      	bcc.n	1004bf3a <_get_system_time_and_machine+0x7e>
1004bf2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004bf30:	4299      	cmp	r1, r3
1004bf32:	d115      	bne.n	1004bf60 <_get_system_time_and_machine+0xa4>
1004bf34:	6a39      	ldr	r1, [r7, #32]
1004bf36:	4291      	cmp	r1, r2
1004bf38:	d212      	bcs.n	1004bf60 <_get_system_time_and_machine+0xa4>
  {
    new_time += blue_unit_conversion(TIMER_MAX_VALUE, context->calibrationData.period1, MULT64_THR_PERIOD);
1004bf3a:	68fb      	ldr	r3, [r7, #12]
1004bf3c:	69db      	ldr	r3, [r3, #28]
1004bf3e:	0019      	movs	r1, r3
1004bf40:	4a11      	ldr	r2, [pc, #68]	@ (1004bf88 <_get_system_time_and_machine+0xcc>)
1004bf42:	2301      	movs	r3, #1
1004bf44:	425b      	negs	r3, r3
1004bf46:	0018      	movs	r0, r3
1004bf48:	f7f4 f8ba 	bl	100400c0 <blue_unit_conversion>
1004bf4c:	0003      	movs	r3, r0
1004bf4e:	001c      	movs	r4, r3
1004bf50:	2300      	movs	r3, #0
1004bf52:	001d      	movs	r5, r3
1004bf54:	6a3a      	ldr	r2, [r7, #32]
1004bf56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004bf58:	1912      	adds	r2, r2, r4
1004bf5a:	416b      	adcs	r3, r5
1004bf5c:	623a      	str	r2, [r7, #32]
1004bf5e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  context->last_system_time = new_time;
1004bf60:	68f9      	ldr	r1, [r7, #12]
1004bf62:	6a3a      	ldr	r2, [r7, #32]
1004bf64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004bf66:	678a      	str	r2, [r1, #120]	@ 0x78
1004bf68:	67cb      	str	r3, [r1, #124]	@ 0x7c
1004bf6a:	69fb      	ldr	r3, [r7, #28]
1004bf6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004bf6e:	693b      	ldr	r3, [r7, #16]
1004bf70:	f383 8810 	msr	PRIMASK, r3
}
1004bf74:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();

  return new_time;
1004bf76:	6a3a      	ldr	r2, [r7, #32]
1004bf78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
1004bf7a:	0010      	movs	r0, r2
1004bf7c:	0019      	movs	r1, r3
1004bf7e:	46bd      	mov	sp, r7
1004bf80:	b00a      	add	sp, #40	@ 0x28
1004bf82:	bdb0      	pop	{r4, r5, r7, pc}
1004bf84:	60001800 	.word	0x60001800
1004bf88:	00000635 	.word	0x00000635

1004bf8c <_update_user_timeout>:

/* Set timeout and skip non active timers */
static VTIMER_HandleType *_update_user_timeout(VTIMER_HandleType *rootNode, uint8_t *expired)
{
1004bf8c:	b5b0      	push	{r4, r5, r7, lr}
1004bf8e:	b08a      	sub	sp, #40	@ 0x28
1004bf90:	af00      	add	r7, sp, #0
1004bf92:	6078      	str	r0, [r7, #4]
1004bf94:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *curr = rootNode;
1004bf96:	687b      	ldr	r3, [r7, #4]
1004bf98:	627b      	str	r3, [r7, #36]	@ 0x24
  VTIMER_HandleType *rootOrig = rootNode;
1004bf9a:	687b      	ldr	r3, [r7, #4]
1004bf9c:	623b      	str	r3, [r7, #32]
  int64_t delay;
  *expired = 0;
1004bf9e:	683b      	ldr	r3, [r7, #0]
1004bfa0:	2200      	movs	r2, #0
1004bfa2:	701a      	strb	r2, [r3, #0]
  while (curr != NULL)
1004bfa4:	e033      	b.n	1004c00e <_update_user_timeout+0x82>
  {
    if (curr->active)
1004bfa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004bfa8:	7b1b      	ldrb	r3, [r3, #12]
1004bfaa:	2b00      	cmp	r3, #0
1004bfac:	d02c      	beq.n	1004c008 <_update_user_timeout+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004bfae:	f3ef 8310 	mrs	r3, PRIMASK
1004bfb2:	60fb      	str	r3, [r7, #12]
  return(result);
1004bfb4:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_SECTION_BEGIN();
1004bfb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004bfb8:	b672      	cpsid	i
}
1004bfba:	46c0      	nop			@ (mov r8, r8)
#if defined (STM32WB06) || defined (STM32WB07)
      uint8_t dummy;
      bool share = FALSE;
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &dummy);
#endif
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
1004bfbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004bfbe:	681c      	ldr	r4, [r3, #0]
1004bfc0:	685d      	ldr	r5, [r3, #4]
1004bfc2:	f7ff fc99 	bl	1004b8f8 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004bfc6:	0002      	movs	r2, r0
1004bfc8:	000b      	movs	r3, r1
1004bfca:	1aa4      	subs	r4, r4, r2
1004bfcc:	419d      	sbcs	r5, r3
1004bfce:	0022      	movs	r2, r4
1004bfd0:	002b      	movs	r3, r5
1004bfd2:	613a      	str	r2, [r7, #16]
1004bfd4:	617b      	str	r3, [r7, #20]
      if (delay > 0)
1004bfd6:	697b      	ldr	r3, [r7, #20]
1004bfd8:	2b00      	cmp	r3, #0
1004bfda:	dc05      	bgt.n	1004bfe8 <_update_user_timeout+0x5c>
1004bfdc:	697b      	ldr	r3, [r7, #20]
1004bfde:	2b00      	cmp	r3, #0
1004bfe0:	d108      	bne.n	1004bff4 <_update_user_timeout+0x68>
1004bfe2:	693b      	ldr	r3, [r7, #16]
1004bfe4:	2b00      	cmp	r3, #0
1004bfe6:	d005      	beq.n	1004bff4 <_update_user_timeout+0x68>
        {
          RADIO_TIMER_Context.radioTimer.pending |= RADIO_TIMER_Context.radioTimer.active;
          RADIO_TIMER_Context.radioTimer.active = FALSE;
        }
#else
        VTIMER_SetWakeupTime(delay, TRUE);
1004bfe8:	693b      	ldr	r3, [r7, #16]
1004bfea:	2101      	movs	r1, #1
1004bfec:	0018      	movs	r0, r3
1004bfee:	f000 f81d 	bl	1004c02c <VTIMER_SetWakeupTime>
1004bff2:	e002      	b.n	1004bffa <_update_user_timeout+0x6e>
#endif
      }
      else
      {
        *expired = 1;
1004bff4:	683b      	ldr	r3, [r7, #0]
1004bff6:	2201      	movs	r2, #1
1004bff8:	701a      	strb	r2, [r3, #0]
1004bffa:	69fb      	ldr	r3, [r7, #28]
1004bffc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004bffe:	68bb      	ldr	r3, [r7, #8]
1004c000:	f383 8810 	msr	PRIMASK, r3
}
1004c004:	46c0      	nop			@ (mov r8, r8)
      }
      ATOMIC_SECTION_END();
      break;
1004c006:	e005      	b.n	1004c014 <_update_user_timeout+0x88>
    }
    curr = curr->next;
1004c008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c00a:	691b      	ldr	r3, [r3, #16]
1004c00c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (curr != NULL)
1004c00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c010:	2b00      	cmp	r3, #0
1004c012:	d1c8      	bne.n	1004bfa6 <_update_user_timeout+0x1a>
  }
  if (*expired)
1004c014:	683b      	ldr	r3, [r7, #0]
1004c016:	781b      	ldrb	r3, [r3, #0]
1004c018:	2b00      	cmp	r3, #0
1004c01a:	d001      	beq.n	1004c020 <_update_user_timeout+0x94>
  {
    return rootOrig;
1004c01c:	6a3b      	ldr	r3, [r7, #32]
1004c01e:	e000      	b.n	1004c022 <_update_user_timeout+0x96>
  }

  return curr;
1004c020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
1004c022:	0018      	movs	r0, r3
1004c024:	46bd      	mov	sp, r7
1004c026:	b00a      	add	sp, #40	@ 0x28
1004c028:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004c02c <VTIMER_SetWakeupTime>:

#if defined (STM32WB05) || defined (STM32WB09)
static uint32_t VTIMER_SetWakeupTime(uint32_t delay, bool allow_sleep)
{
1004c02c:	b580      	push	{r7, lr}
1004c02e:	b084      	sub	sp, #16
1004c030:	af00      	add	r7, sp, #0
1004c032:	6078      	str	r0, [r7, #4]
1004c034:	000a      	movs	r2, r1
1004c036:	1cfb      	adds	r3, r7, #3
1004c038:	701a      	strb	r2, [r3, #0]
  uint32_t current_time;
  delay = blue_unit_conversion(delay, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ) ;
1004c03a:	4b15      	ldr	r3, [pc, #84]	@ (1004c090 <VTIMER_SetWakeupTime+0x64>)
1004c03c:	699b      	ldr	r3, [r3, #24]
1004c03e:	0019      	movs	r1, r3
1004c040:	4a14      	ldr	r2, [pc, #80]	@ (1004c094 <VTIMER_SetWakeupTime+0x68>)
1004c042:	687b      	ldr	r3, [r7, #4]
1004c044:	0018      	movs	r0, r3
1004c046:	f7f4 f83b 	bl	100400c0 <blue_unit_conversion>
1004c04a:	0003      	movs	r3, r0
1004c04c:	607b      	str	r3, [r7, #4]
  /* If the delay is too small round to minimum 2 tick */
  delay = MAX(32, delay);
1004c04e:	687b      	ldr	r3, [r7, #4]
1004c050:	2b20      	cmp	r3, #32
1004c052:	d200      	bcs.n	1004c056 <VTIMER_SetWakeupTime+0x2a>
1004c054:	2320      	movs	r3, #32
1004c056:	607b      	str	r3, [r7, #4]
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004c058:	4b0f      	ldr	r3, [pc, #60]	@ (1004c098 <VTIMER_SetWakeupTime+0x6c>)
1004c05a:	0018      	movs	r0, r3
1004c05c:	f7ff f829 	bl	1004b0b2 <LL_RADIO_TIMER_GetAbsoluteTime>
1004c060:	0003      	movs	r3, r0
1004c062:	60fb      	str	r3, [r7, #12]
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP, ((current_time + (delay + 8)) & TIMER_MAX_VALUE));
1004c064:	687a      	ldr	r2, [r7, #4]
1004c066:	68fb      	ldr	r3, [r7, #12]
1004c068:	18d3      	adds	r3, r2, r3
1004c06a:	3308      	adds	r3, #8
1004c06c:	4a0a      	ldr	r2, [pc, #40]	@ (1004c098 <VTIMER_SetWakeupTime+0x6c>)
1004c06e:	0019      	movs	r1, r3
1004c070:	0010      	movs	r0, r2
1004c072:	f7ff f812 	bl	1004b09a <LL_RADIO_TIMER_SetCPUWakeupTime>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004c076:	4b08      	ldr	r3, [pc, #32]	@ (1004c098 <VTIMER_SetWakeupTime+0x6c>)
1004c078:	0018      	movs	r0, r3
1004c07a:	f7ff f824 	bl	1004b0c6 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP);
1004c07e:	4b06      	ldr	r3, [pc, #24]	@ (1004c098 <VTIMER_SetWakeupTime+0x6c>)
1004c080:	0018      	movs	r0, r3
1004c082:	f7fe ffcf 	bl	1004b024 <LL_RADIO_TIMER_EnableCPUWakeupTimer>

  return current_time;
1004c086:	68fb      	ldr	r3, [r7, #12]
}
1004c088:	0018      	movs	r0, r3
1004c08a:	46bd      	mov	sp, r7
1004c08c:	b004      	add	sp, #16
1004c08e:	bd80      	pop	{r7, pc}
1004c090:	20002210 	.word	0x20002210
1004c094:	00000326 	.word	0x00000326
1004c098:	60001800 	.word	0x60001800

1004c09c <_insert_timer_in_queue>:
#endif

static VTIMER_HandleType *_insert_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
1004c09c:	b580      	push	{r7, lr}
1004c09e:	b086      	sub	sp, #24
1004c0a0:	af00      	add	r7, sp, #0
1004c0a2:	6078      	str	r0, [r7, #4]
1004c0a4:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004c0a6:	687b      	ldr	r3, [r7, #4]
1004c0a8:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004c0aa:	2300      	movs	r3, #0
1004c0ac:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004c0ae:	687b      	ldr	r3, [r7, #4]
1004c0b0:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004c0b2:	e004      	b.n	1004c0be <_insert_timer_in_queue+0x22>
  {
    prev = current;
1004c0b4:	697b      	ldr	r3, [r7, #20]
1004c0b6:	613b      	str	r3, [r7, #16]
    current = current->next;
1004c0b8:	697b      	ldr	r3, [r7, #20]
1004c0ba:	691b      	ldr	r3, [r3, #16]
1004c0bc:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004c0be:	697b      	ldr	r3, [r7, #20]
1004c0c0:	2b00      	cmp	r3, #0
1004c0c2:	d00a      	beq.n	1004c0da <_insert_timer_in_queue+0x3e>
1004c0c4:	697b      	ldr	r3, [r7, #20]
1004c0c6:	681a      	ldr	r2, [r3, #0]
1004c0c8:	685b      	ldr	r3, [r3, #4]
1004c0ca:	6839      	ldr	r1, [r7, #0]
1004c0cc:	6808      	ldr	r0, [r1, #0]
1004c0ce:	6849      	ldr	r1, [r1, #4]
1004c0d0:	4299      	cmp	r1, r3
1004c0d2:	d8ef      	bhi.n	1004c0b4 <_insert_timer_in_queue+0x18>
1004c0d4:	d101      	bne.n	1004c0da <_insert_timer_in_queue+0x3e>
1004c0d6:	4290      	cmp	r0, r2
1004c0d8:	d8ec      	bhi.n	1004c0b4 <_insert_timer_in_queue+0x18>
  }

  handle->next = current;
1004c0da:	683b      	ldr	r3, [r7, #0]
1004c0dc:	697a      	ldr	r2, [r7, #20]
1004c0de:	611a      	str	r2, [r3, #16]

  if (prev == NULL)
1004c0e0:	693b      	ldr	r3, [r7, #16]
1004c0e2:	2b00      	cmp	r3, #0
1004c0e4:	d102      	bne.n	1004c0ec <_insert_timer_in_queue+0x50>
  {
    /* We are the new root */
    returnValue = handle;
1004c0e6:	683b      	ldr	r3, [r7, #0]
1004c0e8:	60fb      	str	r3, [r7, #12]
1004c0ea:	e002      	b.n	1004c0f2 <_insert_timer_in_queue+0x56>
  }
  else
  {
    prev->next = handle;
1004c0ec:	693b      	ldr	r3, [r7, #16]
1004c0ee:	683a      	ldr	r2, [r7, #0]
1004c0f0:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004c0f2:	68fb      	ldr	r3, [r7, #12]
}
1004c0f4:	0018      	movs	r0, r3
1004c0f6:	46bd      	mov	sp, r7
1004c0f8:	b006      	add	sp, #24
1004c0fa:	bd80      	pop	{r7, pc}

1004c0fc <_virtualTimeBaseEnable>:

static void _virtualTimeBaseEnable(FunctionalState state)
{
1004c0fc:	b580      	push	{r7, lr}
1004c0fe:	b082      	sub	sp, #8
1004c100:	af00      	add	r7, sp, #0
1004c102:	0002      	movs	r2, r0
1004c104:	1dfb      	adds	r3, r7, #7
1004c106:	701a      	strb	r2, [r3, #0]
  if (state != DISABLE)
1004c108:	1dfb      	adds	r3, r7, #7
1004c10a:	781b      	ldrb	r3, [r3, #0]
1004c10c:	2b00      	cmp	r3, #0
1004c10e:	d010      	beq.n	1004c132 <_virtualTimeBaseEnable+0x36>
  {
    if (RADIO_TIMER_Context.enableTimeBase == FALSE)
1004c110:	4b0e      	ldr	r3, [pc, #56]	@ (1004c14c <_virtualTimeBaseEnable+0x50>)
1004c112:	2290      	movs	r2, #144	@ 0x90
1004c114:	5c9b      	ldrb	r3, [r3, r2]
1004c116:	2201      	movs	r2, #1
1004c118:	4053      	eors	r3, r2
1004c11a:	b2db      	uxtb	r3, r3
1004c11c:	2b00      	cmp	r3, #0
1004c11e:	d010      	beq.n	1004c142 <_virtualTimeBaseEnable+0x46>
    {
      _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
1004c120:	4b0b      	ldr	r3, [pc, #44]	@ (1004c150 <_virtualTimeBaseEnable+0x54>)
1004c122:	0018      	movs	r0, r3
1004c124:	f7ff fe40 	bl	1004bda8 <_calibration_callback>
      RADIO_TIMER_Context.enableTimeBase = TRUE;
1004c128:	4b08      	ldr	r3, [pc, #32]	@ (1004c14c <_virtualTimeBaseEnable+0x50>)
1004c12a:	2290      	movs	r2, #144	@ 0x90
1004c12c:	2101      	movs	r1, #1
1004c12e:	5499      	strb	r1, [r3, r2]
  else
  {
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
    RADIO_TIMER_Context.enableTimeBase = FALSE;
  }
}
1004c130:	e007      	b.n	1004c142 <_virtualTimeBaseEnable+0x46>
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004c132:	4b07      	ldr	r3, [pc, #28]	@ (1004c150 <_virtualTimeBaseEnable+0x54>)
1004c134:	0018      	movs	r0, r3
1004c136:	f7ff fc0b 	bl	1004b950 <HAL_RADIO_TIMER_StopVirtualTimer>
    RADIO_TIMER_Context.enableTimeBase = FALSE;
1004c13a:	4b04      	ldr	r3, [pc, #16]	@ (1004c14c <_virtualTimeBaseEnable+0x50>)
1004c13c:	2290      	movs	r2, #144	@ 0x90
1004c13e:	2100      	movs	r1, #0
1004c140:	5499      	strb	r1, [r3, r2]
}
1004c142:	46c0      	nop			@ (mov r8, r8)
1004c144:	46bd      	mov	sp, r7
1004c146:	b002      	add	sp, #8
1004c148:	bd80      	pop	{r7, pc}
1004c14a:	46c0      	nop			@ (mov r8, r8)
1004c14c:	20002210 	.word	0x20002210
1004c150:	20002250 	.word	0x20002250

1004c154 <_remove_timer_in_queue>:

static VTIMER_HandleType *_remove_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
1004c154:	b580      	push	{r7, lr}
1004c156:	b086      	sub	sp, #24
1004c158:	af00      	add	r7, sp, #0
1004c15a:	6078      	str	r0, [r7, #4]
1004c15c:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004c15e:	687b      	ldr	r3, [r7, #4]
1004c160:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004c162:	2300      	movs	r3, #0
1004c164:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004c166:	687b      	ldr	r3, [r7, #4]
1004c168:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current != handle))
1004c16a:	e004      	b.n	1004c176 <_remove_timer_in_queue+0x22>
  {
    prev = current;
1004c16c:	697b      	ldr	r3, [r7, #20]
1004c16e:	613b      	str	r3, [r7, #16]
    current = current->next;
1004c170:	697b      	ldr	r3, [r7, #20]
1004c172:	691b      	ldr	r3, [r3, #16]
1004c174:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current != handle))
1004c176:	697b      	ldr	r3, [r7, #20]
1004c178:	2b00      	cmp	r3, #0
1004c17a:	d003      	beq.n	1004c184 <_remove_timer_in_queue+0x30>
1004c17c:	697a      	ldr	r2, [r7, #20]
1004c17e:	683b      	ldr	r3, [r7, #0]
1004c180:	429a      	cmp	r2, r3
1004c182:	d1f3      	bne.n	1004c16c <_remove_timer_in_queue+0x18>
  }

  if (current == NULL)
1004c184:	697b      	ldr	r3, [r7, #20]
1004c186:	2b00      	cmp	r3, #0
1004c188:	d00b      	beq.n	1004c1a2 <_remove_timer_in_queue+0x4e>
  {
    /* Not found */
  }
  else if (current == rootNode)
1004c18a:	697a      	ldr	r2, [r7, #20]
1004c18c:	687b      	ldr	r3, [r7, #4]
1004c18e:	429a      	cmp	r2, r3
1004c190:	d103      	bne.n	1004c19a <_remove_timer_in_queue+0x46>
  {
    /* New root node */
    returnValue = current->next;
1004c192:	697b      	ldr	r3, [r7, #20]
1004c194:	691b      	ldr	r3, [r3, #16]
1004c196:	60fb      	str	r3, [r7, #12]
1004c198:	e003      	b.n	1004c1a2 <_remove_timer_in_queue+0x4e>
  }
  else
  {
    prev->next = current->next;
1004c19a:	697b      	ldr	r3, [r7, #20]
1004c19c:	691a      	ldr	r2, [r3, #16]
1004c19e:	693b      	ldr	r3, [r7, #16]
1004c1a0:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004c1a2:	68fb      	ldr	r3, [r7, #12]
}
1004c1a4:	0018      	movs	r0, r3
1004c1a6:	46bd      	mov	sp, r7
1004c1a8:	b006      	add	sp, #24
1004c1aa:	bd80      	pop	{r7, pc}

1004c1ac <_check_callbacks>:

/* Check the number of expired timer from rootNode (ordered list of timers) and return the list of expired timers */
static VTIMER_HandleType *_check_callbacks(VTIMER_HandleType *rootNode, VTIMER_HandleType **expiredList)
{
1004c1ac:	b5b0      	push	{r4, r5, r7, lr}
1004c1ae:	b088      	sub	sp, #32
1004c1b0:	af00      	add	r7, sp, #0
1004c1b2:	6078      	str	r0, [r7, #4]
1004c1b4:	6039      	str	r1, [r7, #0]

  VTIMER_HandleType *curr = rootNode;
1004c1b6:	687b      	ldr	r3, [r7, #4]
1004c1b8:	61fb      	str	r3, [r7, #28]
  VTIMER_HandleType *prev = NULL;
1004c1ba:	2300      	movs	r3, #0
1004c1bc:	61bb      	str	r3, [r7, #24]
  VTIMER_HandleType *returnValue = rootNode;
1004c1be:	687b      	ldr	r3, [r7, #4]
1004c1c0:	617b      	str	r3, [r7, #20]
  *expiredList = rootNode;
1004c1c2:	683b      	ldr	r3, [r7, #0]
1004c1c4:	687a      	ldr	r2, [r7, #4]
1004c1c6:	601a      	str	r2, [r3, #0]

  int64_t delay;
  uint32_t expiredCount = 0;
1004c1c8:	2300      	movs	r3, #0
1004c1ca:	613b      	str	r3, [r7, #16]

  while (curr != NULL)
1004c1cc:	e021      	b.n	1004c212 <_check_callbacks+0x66>
  {

    if (curr->active)
1004c1ce:	69fb      	ldr	r3, [r7, #28]
1004c1d0:	7b1b      	ldrb	r3, [r3, #12]
1004c1d2:	2b00      	cmp	r3, #0
1004c1d4:	d015      	beq.n	1004c202 <_check_callbacks+0x56>
    {
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
1004c1d6:	69fb      	ldr	r3, [r7, #28]
1004c1d8:	681c      	ldr	r4, [r3, #0]
1004c1da:	685d      	ldr	r5, [r3, #4]
1004c1dc:	f7ff fb8c 	bl	1004b8f8 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004c1e0:	0002      	movs	r2, r0
1004c1e2:	000b      	movs	r3, r1
1004c1e4:	1aa4      	subs	r4, r4, r2
1004c1e6:	419d      	sbcs	r5, r3
1004c1e8:	0022      	movs	r2, r4
1004c1ea:	002b      	movs	r3, r5
1004c1ec:	60ba      	str	r2, [r7, #8]
1004c1ee:	60fb      	str	r3, [r7, #12]

      if (delay > 5)   /*TBR*/
1004c1f0:	68fb      	ldr	r3, [r7, #12]
1004c1f2:	2b00      	cmp	r3, #0
1004c1f4:	dc11      	bgt.n	1004c21a <_check_callbacks+0x6e>
1004c1f6:	68fb      	ldr	r3, [r7, #12]
1004c1f8:	2b00      	cmp	r3, #0
1004c1fa:	d102      	bne.n	1004c202 <_check_callbacks+0x56>
1004c1fc:	68bb      	ldr	r3, [r7, #8]
1004c1fe:	2b05      	cmp	r3, #5
1004c200:	d80b      	bhi.n	1004c21a <_check_callbacks+0x6e>
        /* End of expired timers list*/
        break;
      }
    }

    prev = curr;
1004c202:	69fb      	ldr	r3, [r7, #28]
1004c204:	61bb      	str	r3, [r7, #24]
    curr = curr->next;
1004c206:	69fb      	ldr	r3, [r7, #28]
1004c208:	691b      	ldr	r3, [r3, #16]
1004c20a:	61fb      	str	r3, [r7, #28]
    expiredCount++;
1004c20c:	693b      	ldr	r3, [r7, #16]
1004c20e:	3301      	adds	r3, #1
1004c210:	613b      	str	r3, [r7, #16]
  while (curr != NULL)
1004c212:	69fb      	ldr	r3, [r7, #28]
1004c214:	2b00      	cmp	r3, #0
1004c216:	d1da      	bne.n	1004c1ce <_check_callbacks+0x22>
1004c218:	e000      	b.n	1004c21c <_check_callbacks+0x70>
        break;
1004c21a:	46c0      	nop			@ (mov r8, r8)
  }

  if (expiredCount)
1004c21c:	693b      	ldr	r3, [r7, #16]
1004c21e:	2b00      	cmp	r3, #0
1004c220:	d005      	beq.n	1004c22e <_check_callbacks+0x82>
  {
    /* Some timers expired */
    prev->next = NULL;
1004c222:	69bb      	ldr	r3, [r7, #24]
1004c224:	2200      	movs	r2, #0
1004c226:	611a      	str	r2, [r3, #16]
    returnValue = curr;
1004c228:	69fb      	ldr	r3, [r7, #28]
1004c22a:	617b      	str	r3, [r7, #20]
1004c22c:	e002      	b.n	1004c234 <_check_callbacks+0x88>
  }
  else
  {
    /* No timer expired */
    *expiredList = NULL;
1004c22e:	683b      	ldr	r3, [r7, #0]
1004c230:	2200      	movs	r2, #0
1004c232:	601a      	str	r2, [r3, #0]
  }

  return returnValue;
1004c234:	697b      	ldr	r3, [r7, #20]
}
1004c236:	0018      	movs	r0, r3
1004c238:	46bd      	mov	sp, r7
1004c23a:	b008      	add	sp, #32
1004c23c:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004c240 <_updateCalibrationData>:

static void _updateCalibrationData(void)
{
1004c240:	b580      	push	{r7, lr}
1004c242:	b090      	sub	sp, #64	@ 0x40
1004c244:	af00      	add	r7, sp, #0
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004c246:	4b28      	ldr	r3, [pc, #160]	@ (1004c2e8 <_updateCalibrationData+0xa8>)
1004c248:	781b      	ldrb	r3, [r3, #0]
1004c24a:	2b00      	cmp	r3, #0
1004c24c:	d037      	beq.n	1004c2be <_updateCalibrationData+0x7e>
  {

    CalibrationDataTypeDef updatedCalibrationData;
    _get_calibration_data(&updatedCalibrationData);
1004c24e:	003b      	movs	r3, r7
1004c250:	0018      	movs	r0, r3
1004c252:	f7ff fc4f 	bl	1004baf4 <_get_calibration_data>
    _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, updatedCalibrationData.freq1);
1004c256:	4b24      	ldr	r3, [pc, #144]	@ (1004c2e8 <_updateCalibrationData+0xa8>)
1004c258:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
1004c25a:	b29a      	uxth	r2, r3
1004c25c:	003b      	movs	r3, r7
1004c25e:	689b      	ldr	r3, [r3, #8]
1004c260:	0019      	movs	r1, r3
1004c262:	0010      	movs	r0, r2
1004c264:	f7ff fd72 	bl	1004bd4c <_update_xtal_startup_time>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004c268:	f3ef 8310 	mrs	r3, PRIMASK
1004c26c:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
1004c26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    
    ATOMIC_SECTION_BEGIN();
1004c270:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
1004c272:	b672      	cpsid	i
}
1004c274:	46c0      	nop			@ (mov r8, r8)
    RADIO_TIMER_Context.calibrationData.calibration_data_available = 1;
1004c276:	4b1c      	ldr	r3, [pc, #112]	@ (1004c2e8 <_updateCalibrationData+0xa8>)
1004c278:	2234      	movs	r2, #52	@ 0x34
1004c27a:	2101      	movs	r1, #1
1004c27c:	5499      	strb	r1, [r3, r2]
    RADIO_TIMER_Context.calibrationData.freq = updatedCalibrationData.freq;
1004c27e:	003b      	movs	r3, r7
1004c280:	685a      	ldr	r2, [r3, #4]
1004c282:	4b19      	ldr	r3, [pc, #100]	@ (1004c2e8 <_updateCalibrationData+0xa8>)
1004c284:	615a      	str	r2, [r3, #20]
    RADIO_TIMER_Context.calibrationData.freq1 = updatedCalibrationData.freq1;
1004c286:	003b      	movs	r3, r7
1004c288:	689a      	ldr	r2, [r3, #8]
1004c28a:	4b17      	ldr	r3, [pc, #92]	@ (1004c2e8 <_updateCalibrationData+0xa8>)
1004c28c:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = updatedCalibrationData.period;
1004c28e:	003b      	movs	r3, r7
1004c290:	681a      	ldr	r2, [r3, #0]
1004c292:	4b15      	ldr	r3, [pc, #84]	@ (1004c2e8 <_updateCalibrationData+0xa8>)
1004c294:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.period1 = updatedCalibrationData.period1;
1004c296:	003b      	movs	r3, r7
1004c298:	68da      	ldr	r2, [r3, #12]
1004c29a:	4b13      	ldr	r3, [pc, #76]	@ (1004c2e8 <_updateCalibrationData+0xa8>)
1004c29c:	61da      	str	r2, [r3, #28]
    _update_system_time(&RADIO_TIMER_Context);
1004c29e:	4b12      	ldr	r3, [pc, #72]	@ (1004c2e8 <_updateCalibrationData+0xa8>)
1004c2a0:	0018      	movs	r0, r3
1004c2a2:	f000 f823 	bl	1004c2ec <_update_system_time>
1004c2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004c2a8:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004c2aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004c2ac:	f383 8810 	msr	PRIMASK, r3
}
1004c2b0:	46c0      	nop			@ (mov r8, r8)
    ATOMIC_SECTION_END();

    _configureTxRxDelay(&RADIO_TIMER_Context, FALSE);
1004c2b2:	4b0d      	ldr	r3, [pc, #52]	@ (1004c2e8 <_updateCalibrationData+0xa8>)
1004c2b4:	2100      	movs	r1, #0
1004c2b6:	0018      	movs	r0, r3
1004c2b8:	f7ff fc84 	bl	1004bbc4 <_configureTxRxDelay>
  {
  ATOMIC_SECTION_BEGIN();
  _update_system_time(&RADIO_TIMER_Context);
  ATOMIC_SECTION_END();
  }
}
1004c2bc:	e010      	b.n	1004c2e0 <_updateCalibrationData+0xa0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004c2be:	f3ef 8310 	mrs	r3, PRIMASK
1004c2c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
1004c2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  ATOMIC_SECTION_BEGIN();
1004c2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
1004c2c8:	b672      	cpsid	i
}
1004c2ca:	46c0      	nop			@ (mov r8, r8)
  _update_system_time(&RADIO_TIMER_Context);
1004c2cc:	4b06      	ldr	r3, [pc, #24]	@ (1004c2e8 <_updateCalibrationData+0xa8>)
1004c2ce:	0018      	movs	r0, r3
1004c2d0:	f000 f80c 	bl	1004c2ec <_update_system_time>
1004c2d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004c2d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004c2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004c2da:	f383 8810 	msr	PRIMASK, r3
}
1004c2de:	46c0      	nop			@ (mov r8, r8)
}
1004c2e0:	46c0      	nop			@ (mov r8, r8)
1004c2e2:	46bd      	mov	sp, r7
1004c2e4:	b010      	add	sp, #64	@ 0x40
1004c2e6:	bd80      	pop	{r7, pc}
1004c2e8:	20002210 	.word	0x20002210

1004c2ec <_update_system_time>:

/* This function update the system time after a calibration.
 * If the user calls too often this function, you could have rounding issues in the integer maths.
 */
static void _update_system_time(RADIO_TIMER_ContextTypeDef *context)
{
1004c2ec:	b5b0      	push	{r4, r5, r7, lr}
1004c2ee:	b088      	sub	sp, #32
1004c2f0:	af00      	add	r7, sp, #0
1004c2f2:	6178      	str	r0, [r7, #20]
  uint32_t current_machine_time;
  uint32_t period;

  current_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004c2f4:	4b2a      	ldr	r3, [pc, #168]	@ (1004c3a0 <_update_system_time+0xb4>)
1004c2f6:	0018      	movs	r0, r3
1004c2f8:	f7fe fedb 	bl	1004b0b2 <LL_RADIO_TIMER_GetAbsoluteTime>
1004c2fc:	0003      	movs	r3, r0
1004c2fe:	61fb      	str	r3, [r7, #28]
  period = context->calibrationData.last_period1;
1004c300:	697b      	ldr	r3, [r7, #20]
1004c302:	6a1b      	ldr	r3, [r3, #32]
1004c304:	61bb      	str	r3, [r7, #24]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
1004c306:	697b      	ldr	r3, [r7, #20]
1004c308:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
1004c30a:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                             blue_unit_conversion(TIME_ABSDIFF(current_machine_time,
1004c30c:	697b      	ldr	r3, [r7, #20]
1004c30e:	2280      	movs	r2, #128	@ 0x80
1004c310:	589b      	ldr	r3, [r3, r2]
1004c312:	69fa      	ldr	r2, [r7, #28]
1004c314:	1ad3      	subs	r3, r2, r3
1004c316:	4a23      	ldr	r2, [pc, #140]	@ (1004c3a4 <_update_system_time+0xb8>)
1004c318:	69b9      	ldr	r1, [r7, #24]
1004c31a:	0018      	movs	r0, r3
1004c31c:	f7f3 fed0 	bl	100400c0 <blue_unit_conversion>
1004c320:	0003      	movs	r3, r0
1004c322:	60bb      	str	r3, [r7, #8]
1004c324:	2300      	movs	r3, #0
1004c326:	60fb      	str	r3, [r7, #12]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
1004c328:	68ba      	ldr	r2, [r7, #8]
1004c32a:	68fb      	ldr	r3, [r7, #12]
1004c32c:	1912      	adds	r2, r2, r4
1004c32e:	416b      	adcs	r3, r5
1004c330:	6979      	ldr	r1, [r7, #20]
1004c332:	670a      	str	r2, [r1, #112]	@ 0x70
1004c334:	674b      	str	r3, [r1, #116]	@ 0x74
                                                               context->last_machine_time),
                                                  period, MULT64_THR_PERIOD);

  if ((context->calibrationSettings.periodicCalibration == 0)
1004c336:	697b      	ldr	r3, [r7, #20]
1004c338:	781b      	ldrb	r3, [r3, #0]
1004c33a:	2b00      	cmp	r3, #0
1004c33c:	d11d      	bne.n	1004c37a <_update_system_time+0x8e>
      && (TIME_ABSDIFF(current_machine_time,
1004c33e:	697b      	ldr	r3, [r7, #20]
1004c340:	2280      	movs	r2, #128	@ 0x80
1004c342:	589b      	ldr	r3, [r3, r2]
1004c344:	69fa      	ldr	r2, [r7, #28]
1004c346:	1ad2      	subs	r2, r2, r3
                       context->last_machine_time) < context->calibrationData.calibration_machine_interval))
1004c348:	697b      	ldr	r3, [r7, #20]
1004c34a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      && (TIME_ABSDIFF(current_machine_time,
1004c34c:	429a      	cmp	r2, r3
1004c34e:	d214      	bcs.n	1004c37a <_update_system_time+0x8e>
  {
    context->cumulative_time += blue_unit_conversion(TIMER_MAX_VALUE, period, MULT64_THR_PERIOD);
1004c350:	4a14      	ldr	r2, [pc, #80]	@ (1004c3a4 <_update_system_time+0xb8>)
1004c352:	69b9      	ldr	r1, [r7, #24]
1004c354:	2301      	movs	r3, #1
1004c356:	425b      	negs	r3, r3
1004c358:	0018      	movs	r0, r3
1004c35a:	f7f3 feb1 	bl	100400c0 <blue_unit_conversion>
1004c35e:	0001      	movs	r1, r0
1004c360:	697b      	ldr	r3, [r7, #20]
1004c362:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004c364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004c366:	6039      	str	r1, [r7, #0]
1004c368:	2100      	movs	r1, #0
1004c36a:	6079      	str	r1, [r7, #4]
1004c36c:	6838      	ldr	r0, [r7, #0]
1004c36e:	6879      	ldr	r1, [r7, #4]
1004c370:	1812      	adds	r2, r2, r0
1004c372:	414b      	adcs	r3, r1
1004c374:	6979      	ldr	r1, [r7, #20]
1004c376:	670a      	str	r2, [r1, #112]	@ 0x70
1004c378:	674b      	str	r3, [r1, #116]	@ 0x74
  }
  context->last_machine_time = current_machine_time;
1004c37a:	697b      	ldr	r3, [r7, #20]
1004c37c:	2180      	movs	r1, #128	@ 0x80
1004c37e:	69fa      	ldr	r2, [r7, #28]
1004c380:	505a      	str	r2, [r3, r1]
  context->calibrationData.last_calibration_time = context->cumulative_time;
1004c382:	697b      	ldr	r3, [r7, #20]
1004c384:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004c386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004c388:	6979      	ldr	r1, [r7, #20]
1004c38a:	628a      	str	r2, [r1, #40]	@ 0x28
1004c38c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  context->calibrationData.last_period1 = context->calibrationData.period1;
1004c38e:	697b      	ldr	r3, [r7, #20]
1004c390:	69da      	ldr	r2, [r3, #28]
1004c392:	697b      	ldr	r3, [r7, #20]
1004c394:	621a      	str	r2, [r3, #32]
}
1004c396:	46c0      	nop			@ (mov r8, r8)
1004c398:	46bd      	mov	sp, r7
1004c39a:	b008      	add	sp, #32
1004c39c:	bdb0      	pop	{r4, r5, r7, pc}
1004c39e:	46c0      	nop			@ (mov r8, r8)
1004c3a0:	60001800 	.word	0x60001800
1004c3a4:	00000635 	.word	0x00000635

1004c3a8 <_check_radio_activity>:
   3) The radio event is after the next calibration event. Then the timer will be programmed with the latest values.
   The check on the next calibration event is made even though the calibration is disabled (max cal. interval)
   in order to avoid counter wrapping with timeouts far in the future.
*/
static void _check_radio_activity(RADIO_TIMER_RadioHandleTypeDef *timerHandle, uint8_t *expired)
{
1004c3a8:	b5b0      	push	{r4, r5, r7, lr}
1004c3aa:	b08a      	sub	sp, #40	@ 0x28
1004c3ac:	af00      	add	r7, sp, #0
1004c3ae:	6078      	str	r0, [r7, #4]
1004c3b0:	6039      	str	r1, [r7, #0]
  uint64_t nextCalibrationEvent, currentTime;
  *expired = 0;
1004c3b2:	683b      	ldr	r3, [r7, #0]
1004c3b4:	2200      	movs	r2, #0
1004c3b6:	701a      	strb	r2, [r3, #0]
  if (timerHandle->pending)
1004c3b8:	687b      	ldr	r3, [r7, #4]
1004c3ba:	7a9b      	ldrb	r3, [r3, #10]
1004c3bc:	2b00      	cmp	r3, #0
1004c3be:	d100      	bne.n	1004c3c2 <_check_radio_activity+0x1a>
1004c3c0:	e070      	b.n	1004c4a4 <_check_radio_activity+0xfc>
  {
    
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
1004c3c2:	4b3a      	ldr	r3, [pc, #232]	@ (1004c4ac <_check_radio_activity+0x104>)
1004c3c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004c3c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval;
1004c3c8:	4938      	ldr	r1, [pc, #224]	@ (1004c4ac <_check_radio_activity+0x104>)
1004c3ca:	6849      	ldr	r1, [r1, #4]
1004c3cc:	000c      	movs	r4, r1
1004c3ce:	2100      	movs	r1, #0
1004c3d0:	000d      	movs	r5, r1
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
1004c3d2:	1912      	adds	r2, r2, r4
1004c3d4:	416b      	adcs	r3, r5
1004c3d6:	623a      	str	r2, [r7, #32]
1004c3d8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004c3da:	f3ef 8310 	mrs	r3, PRIMASK
1004c3de:	60fb      	str	r3, [r7, #12]
  return(result);
1004c3e0:	68fb      	ldr	r3, [r7, #12]

    ATOMIC_SECTION_BEGIN();
1004c3e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004c3e4:	b672      	cpsid	i
}
1004c3e6:	46c0      	nop			@ (mov r8, r8)
    currentTime = HAL_RADIO_TIMER_GetCurrentSysTime();
1004c3e8:	f7ff fa86 	bl	1004b8f8 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004c3ec:	0002      	movs	r2, r0
1004c3ee:	000b      	movs	r3, r1
1004c3f0:	613a      	str	r2, [r7, #16]
1004c3f2:	617b      	str	r3, [r7, #20]
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
1004c3f4:	687b      	ldr	r3, [r7, #4]
1004c3f6:	681a      	ldr	r2, [r3, #0]
1004c3f8:	685b      	ldr	r3, [r3, #4]
1004c3fa:	6a38      	ldr	r0, [r7, #32]
1004c3fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004c3fe:	24c8      	movs	r4, #200	@ 0xc8
1004c400:	02a4      	lsls	r4, r4, #10
1004c402:	2500      	movs	r5, #0
1004c404:	1900      	adds	r0, r0, r4
1004c406:	4169      	adcs	r1, r5
1004c408:	4299      	cmp	r1, r3
1004c40a:	d812      	bhi.n	1004c432 <_check_radio_activity+0x8a>
1004c40c:	d101      	bne.n	1004c412 <_check_radio_activity+0x6a>
1004c40e:	4290      	cmp	r0, r2
1004c410:	d80f      	bhi.n	1004c432 <_check_radio_activity+0x8a>
        (currentTime > (nextCalibrationEvent + CALIB_SAFE_THR)))
1004c412:	6a3a      	ldr	r2, [r7, #32]
1004c414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c416:	20b9      	movs	r0, #185	@ 0xb9
1004c418:	0040      	lsls	r0, r0, #1
1004c41a:	2100      	movs	r1, #0
1004c41c:	1812      	adds	r2, r2, r0
1004c41e:	414b      	adcs	r3, r1
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
1004c420:	6979      	ldr	r1, [r7, #20]
1004c422:	4299      	cmp	r1, r3
1004c424:	d805      	bhi.n	1004c432 <_check_radio_activity+0x8a>
1004c426:	6979      	ldr	r1, [r7, #20]
1004c428:	4299      	cmp	r1, r3
1004c42a:	d135      	bne.n	1004c498 <_check_radio_activity+0xf0>
1004c42c:	6939      	ldr	r1, [r7, #16]
1004c42e:	4291      	cmp	r1, r2
1004c430:	d932      	bls.n	1004c498 <_check_radio_activity+0xf0>
    {
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
1004c432:	687b      	ldr	r3, [r7, #4]
1004c434:	681a      	ldr	r2, [r3, #0]
1004c436:	685b      	ldr	r3, [r3, #4]
1004c438:	204c      	movs	r0, #76	@ 0x4c
1004c43a:	4240      	negs	r0, r0
1004c43c:	17c1      	asrs	r1, r0, #31
1004c43e:	1880      	adds	r0, r0, r2
1004c440:	4159      	adcs	r1, r3
1004c442:	693a      	ldr	r2, [r7, #16]
1004c444:	697b      	ldr	r3, [r7, #20]
1004c446:	240a      	movs	r4, #10
1004c448:	2500      	movs	r5, #0
1004c44a:	1912      	adds	r2, r2, r4
1004c44c:	416b      	adcs	r3, r5
1004c44e:	4299      	cmp	r1, r3
1004c450:	d802      	bhi.n	1004c458 <_check_radio_activity+0xb0>
1004c452:	d11a      	bne.n	1004c48a <_check_radio_activity+0xe2>
1004c454:	4290      	cmp	r0, r2
1004c456:	d918      	bls.n	1004c48a <_check_radio_activity+0xe2>
      {
        *expired = TIMER_SetRadioTimerValue(timerHandle->expiryTime, timerHandle->event_type, timerHandle->cal_req);
1004c458:	687b      	ldr	r3, [r7, #4]
1004c45a:	681a      	ldr	r2, [r3, #0]
1004c45c:	685b      	ldr	r3, [r3, #4]
1004c45e:	0010      	movs	r0, r2
1004c460:	687b      	ldr	r3, [r7, #4]
1004c462:	7b19      	ldrb	r1, [r3, #12]
1004c464:	687b      	ldr	r3, [r7, #4]
1004c466:	7a1b      	ldrb	r3, [r3, #8]
1004c468:	001a      	movs	r2, r3
1004c46a:	f000 f821 	bl	1004c4b0 <TIMER_SetRadioTimerValue>
1004c46e:	0003      	movs	r3, r0
1004c470:	001a      	movs	r2, r3
1004c472:	683b      	ldr	r3, [r7, #0]
1004c474:	701a      	strb	r2, [r3, #0]
        timerHandle->pending = FALSE; /* timer has been served. No more pending */
1004c476:	687b      	ldr	r3, [r7, #4]
1004c478:	2200      	movs	r2, #0
1004c47a:	729a      	strb	r2, [r3, #10]
        timerHandle->active = TRUE; /* timer has been programmed and it becomes ACTIVE */
1004c47c:	687b      	ldr	r3, [r7, #4]
1004c47e:	2201      	movs	r2, #1
1004c480:	725a      	strb	r2, [r3, #9]
        timerHandle->intTxRx_to_be_served = TRUE;
1004c482:	687b      	ldr	r3, [r7, #4]
1004c484:	2201      	movs	r2, #1
1004c486:	72da      	strb	r2, [r3, #11]
1004c488:	e006      	b.n	1004c498 <_check_radio_activity+0xf0>
      }
      else
      {
        
        RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004c48a:	4b08      	ldr	r3, [pc, #32]	@ (1004c4ac <_check_radio_activity+0x104>)
1004c48c:	2262      	movs	r2, #98	@ 0x62
1004c48e:	2100      	movs	r1, #0
1004c490:	5499      	strb	r1, [r3, r2]
        *expired = 1;
1004c492:	683b      	ldr	r3, [r7, #0]
1004c494:	2201      	movs	r2, #1
1004c496:	701a      	strb	r2, [r3, #0]
1004c498:	69fb      	ldr	r3, [r7, #28]
1004c49a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004c49c:	68bb      	ldr	r3, [r7, #8]
1004c49e:	f383 8810 	msr	PRIMASK, r3
}
1004c4a2:	46c0      	nop			@ (mov r8, r8)
      
    }
    ATOMIC_SECTION_END();
    
  }
}
1004c4a4:	46c0      	nop			@ (mov r8, r8)
1004c4a6:	46bd      	mov	sp, r7
1004c4a8:	b00a      	add	sp, #40	@ 0x28
1004c4aa:	bdb0      	pop	{r4, r5, r7, pc}
1004c4ac:	20002210 	.word	0x20002210

1004c4b0 <TIMER_SetRadioTimerValue>:
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past
  * @retval  0 if a correct timeout has been programmed in the timeout register
  * @retval  1 if a correct timeout cannot be programmed
  */
static uint8_t TIMER_SetRadioTimerValue(uint32_t timeout, bool event_type, bool cal_req)
{
1004c4b0:	b580      	push	{r7, lr}
1004c4b2:	b08a      	sub	sp, #40	@ 0x28
1004c4b4:	af00      	add	r7, sp, #0
1004c4b6:	6078      	str	r0, [r7, #4]
1004c4b8:	0008      	movs	r0, r1
1004c4ba:	0011      	movs	r1, r2
1004c4bc:	1cfb      	adds	r3, r7, #3
1004c4be:	1c02      	adds	r2, r0, #0
1004c4c0:	701a      	strb	r2, [r3, #0]
1004c4c2:	1cbb      	adds	r3, r7, #2
1004c4c4:	1c0a      	adds	r2, r1, #0
1004c4c6:	701a      	strb	r2, [r3, #0]
  uint32_t current_time, delay, radio_init_delay, device_delay, rel_timeout, rel_timeout_mt;
  uint8_t ret_val;

  /*choose the 2nd init duration. Check the event_type and cal. request*/
  if (event_type == TX)
1004c4c8:	1cfb      	adds	r3, r7, #3
1004c4ca:	781b      	ldrb	r3, [r3, #0]
1004c4cc:	2b00      	cmp	r3, #0
1004c4ce:	d015      	beq.n	1004c4fc <TIMER_SetRadioTimerValue+0x4c>
  {
    if (cal_req)
1004c4d0:	1cbb      	adds	r3, r7, #2
1004c4d2:	781b      	ldrb	r3, [r3, #0]
1004c4d4:	2b00      	cmp	r3, #0
1004c4d6:	d008      	beq.n	1004c4ea <TIMER_SetRadioTimerValue+0x3a>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay;
1004c4d8:	4b67      	ldr	r3, [pc, #412]	@ (1004c678 <TIMER_SetRadioTimerValue+0x1c8>)
1004c4da:	2238      	movs	r2, #56	@ 0x38
1004c4dc:	5c9b      	ldrb	r3, [r3, r2]
1004c4de:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004c4e0:	4b65      	ldr	r3, [pc, #404]	@ (1004c678 <TIMER_SetRadioTimerValue+0x1c8>)
1004c4e2:	223c      	movs	r2, #60	@ 0x3c
1004c4e4:	5c9b      	ldrb	r3, [r3, r2]
1004c4e6:	61fb      	str	r3, [r7, #28]
1004c4e8:	e01d      	b.n	1004c526 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_no_cal_delay;
1004c4ea:	4b63      	ldr	r3, [pc, #396]	@ (1004c678 <TIMER_SetRadioTimerValue+0x1c8>)
1004c4ec:	2239      	movs	r2, #57	@ 0x39
1004c4ee:	5c9b      	ldrb	r3, [r3, r2]
1004c4f0:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004c4f2:	4b61      	ldr	r3, [pc, #388]	@ (1004c678 <TIMER_SetRadioTimerValue+0x1c8>)
1004c4f4:	223c      	movs	r2, #60	@ 0x3c
1004c4f6:	5c9b      	ldrb	r3, [r3, r2]
1004c4f8:	61fb      	str	r3, [r7, #28]
1004c4fa:	e014      	b.n	1004c526 <TIMER_SetRadioTimerValue+0x76>
    }
  }
  else
  {
    if (cal_req)
1004c4fc:	1cbb      	adds	r3, r7, #2
1004c4fe:	781b      	ldrb	r3, [r3, #0]
1004c500:	2b00      	cmp	r3, #0
1004c502:	d008      	beq.n	1004c516 <TIMER_SetRadioTimerValue+0x66>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_cal_delay;
1004c504:	4b5c      	ldr	r3, [pc, #368]	@ (1004c678 <TIMER_SetRadioTimerValue+0x1c8>)
1004c506:	223a      	movs	r2, #58	@ 0x3a
1004c508:	5c9b      	ldrb	r3, [r3, r2]
1004c50a:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004c50c:	4b5a      	ldr	r3, [pc, #360]	@ (1004c678 <TIMER_SetRadioTimerValue+0x1c8>)
1004c50e:	223c      	movs	r2, #60	@ 0x3c
1004c510:	5c9b      	ldrb	r3, [r3, r2]
1004c512:	61fb      	str	r3, [r7, #28]
1004c514:	e007      	b.n	1004c526 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_no_cal_delay;
1004c516:	4b58      	ldr	r3, [pc, #352]	@ (1004c678 <TIMER_SetRadioTimerValue+0x1c8>)
1004c518:	223b      	movs	r2, #59	@ 0x3b
1004c51a:	5c9b      	ldrb	r3, [r3, r2]
1004c51c:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004c51e:	4b56      	ldr	r3, [pc, #344]	@ (1004c678 <TIMER_SetRadioTimerValue+0x1c8>)
1004c520:	223c      	movs	r2, #60	@ 0x3c
1004c522:	5c9b      	ldrb	r3, [r3, r2]
1004c524:	61fb      	str	r3, [r7, #28]
    }
  }

  /* At this point, it is care of the upper layers to guarantee that the timeout represents an absolute time in the future */
  rel_timeout = timeout - (uint32_t)_get_system_time_and_machine(&RADIO_TIMER_Context, &current_time);
1004c526:	230c      	movs	r3, #12
1004c528:	18fa      	adds	r2, r7, r3
1004c52a:	4b53      	ldr	r3, [pc, #332]	@ (1004c678 <TIMER_SetRadioTimerValue+0x1c8>)
1004c52c:	0011      	movs	r1, r2
1004c52e:	0018      	movs	r0, r3
1004c530:	f7ff fcc4 	bl	1004bebc <_get_system_time_and_machine>
1004c534:	0002      	movs	r2, r0
1004c536:	000b      	movs	r3, r1
1004c538:	687b      	ldr	r3, [r7, #4]
1004c53a:	1a9b      	subs	r3, r3, r2
1004c53c:	617b      	str	r3, [r7, #20]

  rel_timeout_mt =  blue_unit_conversion(rel_timeout, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
1004c53e:	4b4e      	ldr	r3, [pc, #312]	@ (1004c678 <TIMER_SetRadioTimerValue+0x1c8>)
1004c540:	699b      	ldr	r3, [r3, #24]
1004c542:	0019      	movs	r1, r3
1004c544:	4a4d      	ldr	r2, [pc, #308]	@ (1004c67c <TIMER_SetRadioTimerValue+0x1cc>)
1004c546:	697b      	ldr	r3, [r7, #20]
1004c548:	0018      	movs	r0, r3
1004c54a:	f7f3 fdb9 	bl	100400c0 <blue_unit_conversion>
1004c54e:	0003      	movs	r3, r0
1004c550:	613b      	str	r3, [r7, #16]

  /*Check if the timeout is beyond the wakeup time offset. Then program either the WakeUp timer or the Timer1*/
  if (rel_timeout > (device_delay + RADIO_TIMER_Context.hs_startup_time + MARGIN_EXT))
1004c552:	4b49      	ldr	r3, [pc, #292]	@ (1004c678 <TIMER_SetRadioTimerValue+0x1c8>)
1004c554:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
1004c556:	69fb      	ldr	r3, [r7, #28]
1004c558:	18d3      	adds	r3, r2, r3
1004c55a:	33c8      	adds	r3, #200	@ 0xc8
1004c55c:	697a      	ldr	r2, [r7, #20]
1004c55e:	429a      	cmp	r2, r3
1004c560:	d92f      	bls.n	1004c5c2 <TIMER_SetRadioTimerValue+0x112>
  {
    /*The timeout is after the wakeup_time_offset, So it is ok to program the wakeup timer*/
    delay = rel_timeout_mt - BLUEGLOB->WAKEUPINITDELAY - radio_init_delay;
1004c562:	4b47      	ldr	r3, [pc, #284]	@ (1004c680 <TIMER_SetRadioTimerValue+0x1d0>)
1004c564:	795b      	ldrb	r3, [r3, #5]
1004c566:	b2db      	uxtb	r3, r3
1004c568:	001a      	movs	r2, r3
1004c56a:	693b      	ldr	r3, [r7, #16]
1004c56c:	1a9a      	subs	r2, r3, r2
1004c56e:	6a3b      	ldr	r3, [r7, #32]
1004c570:	1ad3      	subs	r3, r2, r3
1004c572:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay) & TIMER_MAX_VALUE));
1004c574:	68fa      	ldr	r2, [r7, #12]
1004c576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c578:	18d3      	adds	r3, r2, r3
1004c57a:	4a42      	ldr	r2, [pc, #264]	@ (1004c684 <TIMER_SetRadioTimerValue+0x1d4>)
1004c57c:	0019      	movs	r1, r3
1004c57e:	0010      	movs	r0, r2
1004c580:	f7fe fd7f 	bl	1004b082 <LL_RADIO_TIMER_SetBLEWakeupTime>
    LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
1004c584:	4b3f      	ldr	r3, [pc, #252]	@ (1004c684 <TIMER_SetRadioTimerValue+0x1d4>)
1004c586:	2100      	movs	r1, #0
1004c588:	0018      	movs	r0, r3
1004c58a:	f7fe fdab 	bl	1004b0e4 <LL_RADIO_TIMER_SetSleepRequestMode>
    LL_RADIO_TIMER_DisableTimer1(BLUE);
1004c58e:	23c0      	movs	r3, #192	@ 0xc0
1004c590:	05db      	lsls	r3, r3, #23
1004c592:	0018      	movs	r0, r3
1004c594:	f7fe fcfc 	bl	1004af90 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004c598:	23c0      	movs	r3, #192	@ 0xc0
1004c59a:	05db      	lsls	r3, r3, #23
1004c59c:	0018      	movs	r0, r3
1004c59e:	f7fe fd06 	bl	1004afae <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
1004c5a2:	4b38      	ldr	r3, [pc, #224]	@ (1004c684 <TIMER_SetRadioTimerValue+0x1d4>)
1004c5a4:	0018      	movs	r0, r3
1004c5a6:	f7fe fd1d 	bl	1004afe4 <LL_RADIO_TIMER_EnableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004c5aa:	4b36      	ldr	r3, [pc, #216]	@ (1004c684 <TIMER_SetRadioTimerValue+0x1d4>)
1004c5ac:	0018      	movs	r0, r3
1004c5ae:	f7fe fd8a 	bl	1004b0c6 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
    radio_init_delay += BLUEGLOB->WAKEUPINITDELAY;
1004c5b2:	4b33      	ldr	r3, [pc, #204]	@ (1004c680 <TIMER_SetRadioTimerValue+0x1d0>)
1004c5b4:	795b      	ldrb	r3, [r3, #5]
1004c5b6:	b2db      	uxtb	r3, r3
1004c5b8:	001a      	movs	r2, r3
1004c5ba:	6a3b      	ldr	r3, [r7, #32]
1004c5bc:	189b      	adds	r3, r3, r2
1004c5be:	623b      	str	r3, [r7, #32]
1004c5c0:	e021      	b.n	1004c606 <TIMER_SetRadioTimerValue+0x156>
  }
  else
  {
    delay = rel_timeout_mt - RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt - radio_init_delay;
1004c5c2:	4b2d      	ldr	r3, [pc, #180]	@ (1004c678 <TIMER_SetRadioTimerValue+0x1c8>)
1004c5c4:	223d      	movs	r2, #61	@ 0x3d
1004c5c6:	5c9b      	ldrb	r3, [r3, r2]
1004c5c8:	001a      	movs	r2, r3
1004c5ca:	693b      	ldr	r3, [r7, #16]
1004c5cc:	1a9a      	subs	r2, r3, r2
1004c5ce:	6a3b      	ldr	r3, [r7, #32]
1004c5d0:	1ad3      	subs	r3, r2, r3
1004c5d2:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + delay) & TIMER_MAX_VALUE));
1004c5d4:	68fa      	ldr	r2, [r7, #12]
1004c5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c5d8:	18d2      	adds	r2, r2, r3
1004c5da:	23c0      	movs	r3, #192	@ 0xc0
1004c5dc:	05db      	lsls	r3, r3, #23
1004c5de:	0011      	movs	r1, r2
1004c5e0:	0018      	movs	r0, r3
1004c5e2:	f7fe fcf3 	bl	1004afcc <LL_RADIO_TIMER_SetTimeout>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004c5e6:	4b27      	ldr	r3, [pc, #156]	@ (1004c684 <TIMER_SetRadioTimerValue+0x1d4>)
1004c5e8:	0018      	movs	r0, r3
1004c5ea:	f7fe fd0b 	bl	1004b004 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableTimer1(BLUE);
1004c5ee:	23c0      	movs	r3, #192	@ 0xc0
1004c5f0:	05db      	lsls	r3, r3, #23
1004c5f2:	0018      	movs	r0, r3
1004c5f4:	f7fe fcbc 	bl	1004af70 <LL_RADIO_TIMER_EnableTimer1>
    radio_init_delay += RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt;
1004c5f8:	4b1f      	ldr	r3, [pc, #124]	@ (1004c678 <TIMER_SetRadioTimerValue+0x1c8>)
1004c5fa:	223d      	movs	r2, #61	@ 0x3d
1004c5fc:	5c9b      	ldrb	r3, [r3, r2]
1004c5fe:	001a      	movs	r2, r3
1004c600:	6a3b      	ldr	r3, [r7, #32]
1004c602:	189b      	adds	r3, r3, r2
1004c604:	623b      	str	r3, [r7, #32]
  }

  RADIO_TIMER_Context.last_anchor_mt = (current_time + rel_timeout_mt) & TIMER_MAX_VALUE;
1004c606:	68fa      	ldr	r2, [r7, #12]
1004c608:	693b      	ldr	r3, [r7, #16]
1004c60a:	18d2      	adds	r2, r2, r3
1004c60c:	4b1a      	ldr	r3, [pc, #104]	@ (1004c678 <TIMER_SetRadioTimerValue+0x1c8>)
1004c60e:	2188      	movs	r1, #136	@ 0x88
1004c610:	505a      	str	r2, [r3, r1]
  BLUEGLOB->BYTE22 = 0xF0;
  BLUEGLOB->BYTE23 = 0xFF;
#endif

  /* Basic low level check with an extra margin of machine units */
  if ((delay + radio_init_delay) < (radio_init_delay + 5))
1004c612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004c614:	6a3b      	ldr	r3, [r7, #32]
1004c616:	18d2      	adds	r2, r2, r3
1004c618:	6a3b      	ldr	r3, [r7, #32]
1004c61a:	3305      	adds	r3, #5
1004c61c:	429a      	cmp	r2, r3
1004c61e:	d212      	bcs.n	1004c646 <TIMER_SetRadioTimerValue+0x196>
  {
    LL_RADIO_TIMER_DisableTimer1(BLUE);
1004c620:	23c0      	movs	r3, #192	@ 0xc0
1004c622:	05db      	lsls	r3, r3, #23
1004c624:	0018      	movs	r0, r3
1004c626:	f7fe fcb3 	bl	1004af90 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004c62a:	23c0      	movs	r3, #192	@ 0xc0
1004c62c:	05db      	lsls	r3, r3, #23
1004c62e:	0018      	movs	r0, r3
1004c630:	f7fe fcbd 	bl	1004afae <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004c634:	4b13      	ldr	r3, [pc, #76]	@ (1004c684 <TIMER_SetRadioTimerValue+0x1d4>)
1004c636:	0018      	movs	r0, r3
1004c638:	f7fe fce4 	bl	1004b004 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    ret_val =  1;
1004c63c:	231b      	movs	r3, #27
1004c63e:	18fb      	adds	r3, r7, r3
1004c640:	2201      	movs	r2, #1
1004c642:	701a      	strb	r2, [r3, #0]
1004c644:	e010      	b.n	1004c668 <TIMER_SetRadioTimerValue+0x1b8>
  }
  else
  {
    RADIO_TIMER_Context.last_setup_time = blue_unit_conversion(radio_init_delay, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004c646:	4b0c      	ldr	r3, [pc, #48]	@ (1004c678 <TIMER_SetRadioTimerValue+0x1c8>)
1004c648:	69db      	ldr	r3, [r3, #28]
1004c64a:	0019      	movs	r1, r3
1004c64c:	4a0e      	ldr	r2, [pc, #56]	@ (1004c688 <TIMER_SetRadioTimerValue+0x1d8>)
1004c64e:	6a3b      	ldr	r3, [r7, #32]
1004c650:	0018      	movs	r0, r3
1004c652:	f7f3 fd35 	bl	100400c0 <blue_unit_conversion>
1004c656:	0003      	movs	r3, r0
1004c658:	b2d9      	uxtb	r1, r3
1004c65a:	4b07      	ldr	r3, [pc, #28]	@ (1004c678 <TIMER_SetRadioTimerValue+0x1c8>)
1004c65c:	2284      	movs	r2, #132	@ 0x84
1004c65e:	5499      	strb	r1, [r3, r2]
    ret_val = 0;
1004c660:	231b      	movs	r3, #27
1004c662:	18fb      	adds	r3, r7, r3
1004c664:	2200      	movs	r2, #0
1004c666:	701a      	strb	r2, [r3, #0]
  }

  return ret_val;
1004c668:	231b      	movs	r3, #27
1004c66a:	18fb      	adds	r3, r7, r3
1004c66c:	781b      	ldrb	r3, [r3, #0]
}
1004c66e:	0018      	movs	r0, r3
1004c670:	46bd      	mov	sp, r7
1004c672:	b00a      	add	sp, #40	@ 0x28
1004c674:	bd80      	pop	{r7, pc}
1004c676:	46c0      	nop			@ (mov r8, r8)
1004c678:	20002210 	.word	0x20002210
1004c67c:	00000326 	.word	0x00000326
1004c680:	200000c0 	.word	0x200000c0
1004c684:	60001800 	.word	0x60001800
1004c688:	00000635 	.word	0x00000635

1004c68c <TIMER_GetPastSysTime>:
  * @param   current_system_time: Current System time
  * @warning User should guarantee that call to this function are performed in a non-interruptible context.
  * @return  STU value
  */
static uint64_t TIMER_GetPastSysTime(uint32_t time, uint64_t *current_system_time)
{
1004c68c:	b5b0      	push	{r4, r5, r7, lr}
1004c68e:	b084      	sub	sp, #16
1004c690:	af00      	add	r7, sp, #0
1004c692:	6078      	str	r0, [r7, #4]
1004c694:	6039      	str	r1, [r7, #0]
  uint32_t delta_systime, current_machine_time;

  *current_system_time = _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
1004c696:	2308      	movs	r3, #8
1004c698:	18fa      	adds	r2, r7, r3
1004c69a:	4b12      	ldr	r3, [pc, #72]	@ (1004c6e4 <TIMER_GetPastSysTime+0x58>)
1004c69c:	0011      	movs	r1, r2
1004c69e:	0018      	movs	r0, r3
1004c6a0:	f7ff fc0c 	bl	1004bebc <_get_system_time_and_machine>
1004c6a4:	0002      	movs	r2, r0
1004c6a6:	000b      	movs	r3, r1
1004c6a8:	6839      	ldr	r1, [r7, #0]
1004c6aa:	600a      	str	r2, [r1, #0]
1004c6ac:	604b      	str	r3, [r1, #4]
  delta_systime = blue_unit_conversion(TIME_DIFF(current_machine_time, time), RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004c6ae:	68ba      	ldr	r2, [r7, #8]
1004c6b0:	687b      	ldr	r3, [r7, #4]
1004c6b2:	1ad0      	subs	r0, r2, r3
1004c6b4:	4b0b      	ldr	r3, [pc, #44]	@ (1004c6e4 <TIMER_GetPastSysTime+0x58>)
1004c6b6:	69db      	ldr	r3, [r3, #28]
1004c6b8:	0019      	movs	r1, r3
1004c6ba:	4b0b      	ldr	r3, [pc, #44]	@ (1004c6e8 <TIMER_GetPastSysTime+0x5c>)
1004c6bc:	001a      	movs	r2, r3
1004c6be:	f7f3 fcff 	bl	100400c0 <blue_unit_conversion>
1004c6c2:	0003      	movs	r3, r0
1004c6c4:	60fb      	str	r3, [r7, #12]

  return (*current_system_time - delta_systime);
1004c6c6:	683b      	ldr	r3, [r7, #0]
1004c6c8:	681a      	ldr	r2, [r3, #0]
1004c6ca:	685b      	ldr	r3, [r3, #4]
1004c6cc:	68f9      	ldr	r1, [r7, #12]
1004c6ce:	000c      	movs	r4, r1
1004c6d0:	2100      	movs	r1, #0
1004c6d2:	000d      	movs	r5, r1
1004c6d4:	1b12      	subs	r2, r2, r4
1004c6d6:	41ab      	sbcs	r3, r5
}
1004c6d8:	0010      	movs	r0, r2
1004c6da:	0019      	movs	r1, r3
1004c6dc:	46bd      	mov	sp, r7
1004c6de:	b004      	add	sp, #16
1004c6e0:	bdb0      	pop	{r4, r5, r7, pc}
1004c6e2:	46c0      	nop			@ (mov r8, r8)
1004c6e4:	20002210 	.word	0x20002210
1004c6e8:	00000635 	.word	0x00000635

1004c6ec <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>:
__weak void HAL_RADIO_TIMER_TxRxWakeUpCallback(void)
{
}

void HAL_RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
1004c6ec:	b580      	push	{r7, lr}
1004c6ee:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TimeoutCallback();
1004c6f0:	f7ff f986 	bl	1004ba00 <HAL_RADIO_TIMER_TimeoutCallback>

  HAL_RADIO_TIMER_CpuWakeUpCallback();
1004c6f4:	f005 f9b0 	bl	10051a58 <HAL_RADIO_TIMER_CpuWakeUpCallback>
}
1004c6f8:	46c0      	nop			@ (mov r8, r8)
1004c6fa:	46bd      	mov	sp, r7
1004c6fc:	bd80      	pop	{r7, pc}

1004c6fe <HAL_RADIO_TIMER_ERROR_IRQHandler>:
  HAL_RADIO_TIMER_WakeUpCallback();
#endif
}

void HAL_RADIO_TIMER_ERROR_IRQHandler(void)
{
1004c6fe:	b580      	push	{r7, lr}
1004c700:	b082      	sub	sp, #8
1004c702:	af00      	add	r7, sp, #0
  volatile uint32_t debug_cmd = 0;
1004c704:	2300      	movs	r3, #0
1004c706:	607b      	str	r3, [r7, #4]
  UNUSED(debug_cmd);
1004c708:	687b      	ldr	r3, [r7, #4]
  BLUE->DEBUGCMDREG |= 1;
1004c70a:	23c0      	movs	r3, #192	@ 0xc0
1004c70c:	05db      	lsls	r3, r3, #23
1004c70e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
1004c710:	23c0      	movs	r3, #192	@ 0xc0
1004c712:	05db      	lsls	r3, r3, #23
1004c714:	2101      	movs	r1, #1
1004c716:	430a      	orrs	r2, r1
1004c718:	675a      	str	r2, [r3, #116]	@ 0x74
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  debug_cmd = BLUE->DEBUGCMDREG;
1004c71a:	23c0      	movs	r3, #192	@ 0xc0
1004c71c:	05db      	lsls	r3, r3, #23
1004c71e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004c720:	607b      	str	r3, [r7, #4]
}
1004c722:	46c0      	nop			@ (mov r8, r8)
1004c724:	46bd      	mov	sp, r7
1004c726:	b002      	add	sp, #8
1004c728:	bd80      	pop	{r7, pc}
	...

1004c72c <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
1004c72c:	b580      	push	{r7, lr}
1004c72e:	b082      	sub	sp, #8
1004c730:	af00      	add	r7, sp, #0
1004c732:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
1004c734:	4b08      	ldr	r3, [pc, #32]	@ (1004c758 <LL_PWR_SetNoPullB+0x2c>)
1004c736:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004c738:	687b      	ldr	r3, [r7, #4]
1004c73a:	43d9      	mvns	r1, r3
1004c73c:	4b06      	ldr	r3, [pc, #24]	@ (1004c758 <LL_PWR_SetNoPullB+0x2c>)
1004c73e:	400a      	ands	r2, r1
1004c740:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004c742:	4b05      	ldr	r3, [pc, #20]	@ (1004c758 <LL_PWR_SetNoPullB+0x2c>)
1004c744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004c746:	687b      	ldr	r3, [r7, #4]
1004c748:	43d9      	mvns	r1, r3
1004c74a:	4b03      	ldr	r3, [pc, #12]	@ (1004c758 <LL_PWR_SetNoPullB+0x2c>)
1004c74c:	400a      	ands	r2, r1
1004c74e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004c750:	46c0      	nop			@ (mov r8, r8)
1004c752:	46bd      	mov	sp, r7
1004c754:	b002      	add	sp, #8
1004c756:	bd80      	pop	{r7, pc}
1004c758:	48500000 	.word	0x48500000

1004c75c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
1004c75c:	b580      	push	{r7, lr}
1004c75e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
1004c760:	4b04      	ldr	r3, [pc, #16]	@ (1004c774 <LL_RCC_HSE_Enable+0x18>)
1004c762:	681a      	ldr	r2, [r3, #0]
1004c764:	4b03      	ldr	r3, [pc, #12]	@ (1004c774 <LL_RCC_HSE_Enable+0x18>)
1004c766:	2180      	movs	r1, #128	@ 0x80
1004c768:	0249      	lsls	r1, r1, #9
1004c76a:	430a      	orrs	r2, r1
1004c76c:	601a      	str	r2, [r3, #0]
}
1004c76e:	46c0      	nop			@ (mov r8, r8)
1004c770:	46bd      	mov	sp, r7
1004c772:	bd80      	pop	{r7, pc}
1004c774:	48400000 	.word	0x48400000

1004c778 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
1004c778:	b580      	push	{r7, lr}
1004c77a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
1004c77c:	4b04      	ldr	r3, [pc, #16]	@ (1004c790 <LL_RCC_HSE_Disable+0x18>)
1004c77e:	681a      	ldr	r2, [r3, #0]
1004c780:	4b03      	ldr	r3, [pc, #12]	@ (1004c790 <LL_RCC_HSE_Disable+0x18>)
1004c782:	4904      	ldr	r1, [pc, #16]	@ (1004c794 <LL_RCC_HSE_Disable+0x1c>)
1004c784:	400a      	ands	r2, r1
1004c786:	601a      	str	r2, [r3, #0]
}
1004c788:	46c0      	nop			@ (mov r8, r8)
1004c78a:	46bd      	mov	sp, r7
1004c78c:	bd80      	pop	{r7, pc}
1004c78e:	46c0      	nop			@ (mov r8, r8)
1004c790:	48400000 	.word	0x48400000
1004c794:	fffeffff 	.word	0xfffeffff

1004c798 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
1004c798:	b580      	push	{r7, lr}
1004c79a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
1004c79c:	4b07      	ldr	r3, [pc, #28]	@ (1004c7bc <LL_RCC_HSE_IsReady+0x24>)
1004c79e:	681a      	ldr	r2, [r3, #0]
1004c7a0:	2380      	movs	r3, #128	@ 0x80
1004c7a2:	029b      	lsls	r3, r3, #10
1004c7a4:	401a      	ands	r2, r3
1004c7a6:	2380      	movs	r3, #128	@ 0x80
1004c7a8:	029b      	lsls	r3, r3, #10
1004c7aa:	429a      	cmp	r2, r3
1004c7ac:	d101      	bne.n	1004c7b2 <LL_RCC_HSE_IsReady+0x1a>
1004c7ae:	2301      	movs	r3, #1
1004c7b0:	e000      	b.n	1004c7b4 <LL_RCC_HSE_IsReady+0x1c>
1004c7b2:	2300      	movs	r3, #0
}
1004c7b4:	0018      	movs	r0, r3
1004c7b6:	46bd      	mov	sp, r7
1004c7b8:	bd80      	pop	{r7, pc}
1004c7ba:	46c0      	nop			@ (mov r8, r8)
1004c7bc:	48400000 	.word	0x48400000

1004c7c0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll RFSWHSECR        SWXOTUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
1004c7c0:	b580      	push	{r7, lr}
1004c7c2:	b082      	sub	sp, #8
1004c7c4:	af00      	add	r7, sp, #0
1004c7c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNE, Value << RCC_RFSWHSECR_SWXOTUNE_Pos);
1004c7c8:	4a0b      	ldr	r2, [pc, #44]	@ (1004c7f8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004c7ca:	2398      	movs	r3, #152	@ 0x98
1004c7cc:	58d3      	ldr	r3, [r2, r3]
1004c7ce:	4a0b      	ldr	r2, [pc, #44]	@ (1004c7fc <LL_RCC_HSE_SetCapacitorTuning+0x3c>)
1004c7d0:	401a      	ands	r2, r3
1004c7d2:	687b      	ldr	r3, [r7, #4]
1004c7d4:	021b      	lsls	r3, r3, #8
1004c7d6:	4908      	ldr	r1, [pc, #32]	@ (1004c7f8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004c7d8:	4313      	orrs	r3, r2
1004c7da:	2298      	movs	r2, #152	@ 0x98
1004c7dc:	508b      	str	r3, [r1, r2]
  SET_BIT(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNEEN);
1004c7de:	4a06      	ldr	r2, [pc, #24]	@ (1004c7f8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004c7e0:	2398      	movs	r3, #152	@ 0x98
1004c7e2:	58d3      	ldr	r3, [r2, r3]
1004c7e4:	4904      	ldr	r1, [pc, #16]	@ (1004c7f8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004c7e6:	2280      	movs	r2, #128	@ 0x80
1004c7e8:	4313      	orrs	r3, r2
1004c7ea:	2298      	movs	r2, #152	@ 0x98
1004c7ec:	508b      	str	r3, [r1, r2]
}
1004c7ee:	46c0      	nop			@ (mov r8, r8)
1004c7f0:	46bd      	mov	sp, r7
1004c7f2:	b002      	add	sp, #8
1004c7f4:	bd80      	pop	{r7, pc}
1004c7f6:	46c0      	nop			@ (mov r8, r8)
1004c7f8:	48400000 	.word	0x48400000
1004c7fc:	ffffc0ff 	.word	0xffffc0ff

1004c800 <LL_RCC_HSE_SetCurrentControl>:
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_5
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_6
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_7
  */
__STATIC_INLINE void LL_RCC_HSE_SetCurrentControl(uint32_t CurrentMax)
{
1004c800:	b580      	push	{r7, lr}
1004c802:	b082      	sub	sp, #8
1004c804:	af00      	add	r7, sp, #0
1004c806:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_GMC, CurrentMax);
1004c808:	4a07      	ldr	r2, [pc, #28]	@ (1004c828 <LL_RCC_HSE_SetCurrentControl+0x28>)
1004c80a:	2398      	movs	r3, #152	@ 0x98
1004c80c:	58d3      	ldr	r3, [r2, r3]
1004c80e:	2270      	movs	r2, #112	@ 0x70
1004c810:	4393      	bics	r3, r2
1004c812:	001a      	movs	r2, r3
1004c814:	4904      	ldr	r1, [pc, #16]	@ (1004c828 <LL_RCC_HSE_SetCurrentControl+0x28>)
1004c816:	687b      	ldr	r3, [r7, #4]
1004c818:	4313      	orrs	r3, r2
1004c81a:	2298      	movs	r2, #152	@ 0x98
1004c81c:	508b      	str	r3, [r1, r2]
}
1004c81e:	46c0      	nop			@ (mov r8, r8)
1004c820:	46bd      	mov	sp, r7
1004c822:	b002      	add	sp, #8
1004c824:	bd80      	pop	{r7, pc}
1004c826:	46c0      	nop			@ (mov r8, r8)
1004c828:	48400000 	.word	0x48400000

1004c82c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
1004c82c:	b580      	push	{r7, lr}
1004c82e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004c830:	4b07      	ldr	r3, [pc, #28]	@ (1004c850 <LL_RCC_HSI_Enable+0x24>)
1004c832:	689a      	ldr	r2, [r3, #8]
1004c834:	4b06      	ldr	r3, [pc, #24]	@ (1004c850 <LL_RCC_HSI_Enable+0x24>)
1004c836:	2104      	movs	r1, #4
1004c838:	438a      	bics	r2, r1
1004c83a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004c83c:	4b04      	ldr	r3, [pc, #16]	@ (1004c850 <LL_RCC_HSI_Enable+0x24>)
1004c83e:	689a      	ldr	r2, [r3, #8]
1004c840:	4b03      	ldr	r3, [pc, #12]	@ (1004c850 <LL_RCC_HSI_Enable+0x24>)
1004c842:	2102      	movs	r1, #2
1004c844:	438a      	bics	r2, r1
1004c846:	609a      	str	r2, [r3, #8]
}
1004c848:	46c0      	nop			@ (mov r8, r8)
1004c84a:	46bd      	mov	sp, r7
1004c84c:	bd80      	pop	{r7, pc}
1004c84e:	46c0      	nop			@ (mov r8, r8)
1004c850:	48400000 	.word	0x48400000

1004c854 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
1004c854:	b580      	push	{r7, lr}
1004c856:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004c858:	4b07      	ldr	r3, [pc, #28]	@ (1004c878 <LL_RCC_HSI_Disable+0x24>)
1004c85a:	689a      	ldr	r2, [r3, #8]
1004c85c:	4b06      	ldr	r3, [pc, #24]	@ (1004c878 <LL_RCC_HSI_Disable+0x24>)
1004c85e:	2102      	movs	r1, #2
1004c860:	430a      	orrs	r2, r1
1004c862:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004c864:	4b04      	ldr	r3, [pc, #16]	@ (1004c878 <LL_RCC_HSI_Disable+0x24>)
1004c866:	689a      	ldr	r2, [r3, #8]
1004c868:	4b03      	ldr	r3, [pc, #12]	@ (1004c878 <LL_RCC_HSI_Disable+0x24>)
1004c86a:	2104      	movs	r1, #4
1004c86c:	430a      	orrs	r2, r1
1004c86e:	609a      	str	r2, [r3, #8]
}
1004c870:	46c0      	nop			@ (mov r8, r8)
1004c872:	46bd      	mov	sp, r7
1004c874:	bd80      	pop	{r7, pc}
1004c876:	46c0      	nop			@ (mov r8, r8)
1004c878:	48400000 	.word	0x48400000

1004c87c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
1004c87c:	b580      	push	{r7, lr}
1004c87e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
1004c880:	4b07      	ldr	r3, [pc, #28]	@ (1004c8a0 <LL_RCC_HSI_IsReady+0x24>)
1004c882:	681a      	ldr	r2, [r3, #0]
1004c884:	2380      	movs	r3, #128	@ 0x80
1004c886:	00db      	lsls	r3, r3, #3
1004c888:	401a      	ands	r2, r3
1004c88a:	2380      	movs	r3, #128	@ 0x80
1004c88c:	00db      	lsls	r3, r3, #3
1004c88e:	429a      	cmp	r2, r3
1004c890:	d101      	bne.n	1004c896 <LL_RCC_HSI_IsReady+0x1a>
1004c892:	2301      	movs	r3, #1
1004c894:	e000      	b.n	1004c898 <LL_RCC_HSI_IsReady+0x1c>
1004c896:	2300      	movs	r3, #0
}
1004c898:	0018      	movs	r0, r3
1004c89a:	46bd      	mov	sp, r7
1004c89c:	bd80      	pop	{r7, pc}
1004c89e:	46c0      	nop			@ (mov r8, r8)
1004c8a0:	48400000 	.word	0x48400000

1004c8a4 <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
1004c8a4:	b580      	push	{r7, lr}
1004c8a6:	b082      	sub	sp, #8
1004c8a8:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
1004c8aa:	46c0      	nop			@ (mov r8, r8)
1004c8ac:	4b0f      	ldr	r3, [pc, #60]	@ (1004c8ec <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004c8ae:	681a      	ldr	r2, [r3, #0]
1004c8b0:	2380      	movs	r3, #128	@ 0x80
1004c8b2:	029b      	lsls	r3, r3, #10
1004c8b4:	4013      	ands	r3, r2
1004c8b6:	d0f9      	beq.n	1004c8ac <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004c8b8:	4b0c      	ldr	r3, [pc, #48]	@ (1004c8ec <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004c8ba:	689a      	ldr	r2, [r3, #8]
1004c8bc:	4b0b      	ldr	r3, [pc, #44]	@ (1004c8ec <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004c8be:	2102      	movs	r1, #2
1004c8c0:	430a      	orrs	r2, r1
1004c8c2:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
1004c8c4:	2300      	movs	r3, #0
1004c8c6:	607b      	str	r3, [r7, #4]
1004c8c8:	e003      	b.n	1004c8d2 <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
1004c8ca:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
1004c8cc:	687b      	ldr	r3, [r7, #4]
1004c8ce:	3301      	adds	r3, #1
1004c8d0:	607b      	str	r3, [r7, #4]
1004c8d2:	687b      	ldr	r3, [r7, #4]
1004c8d4:	2b05      	cmp	r3, #5
1004c8d6:	ddf8      	ble.n	1004c8ca <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004c8d8:	4b04      	ldr	r3, [pc, #16]	@ (1004c8ec <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004c8da:	689a      	ldr	r2, [r3, #8]
1004c8dc:	4b03      	ldr	r3, [pc, #12]	@ (1004c8ec <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004c8de:	2104      	movs	r1, #4
1004c8e0:	430a      	orrs	r2, r1
1004c8e2:	609a      	str	r2, [r3, #8]
}
1004c8e4:	46c0      	nop			@ (mov r8, r8)
1004c8e6:	46bd      	mov	sp, r7
1004c8e8:	b002      	add	sp, #8
1004c8ea:	bd80      	pop	{r7, pc}
1004c8ec:	48400000 	.word	0x48400000

1004c8f0 <LL_RCC_LSCO_SetSource>:
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSCO_SetSource(uint32_t Source)
{
1004c8f0:	b580      	push	{r7, lr}
1004c8f2:	b082      	sub	sp, #8
1004c8f4:	af00      	add	r7, sp, #0
1004c8f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
1004c8f8:	4b06      	ldr	r3, [pc, #24]	@ (1004c914 <LL_RCC_LSCO_SetSource+0x24>)
1004c8fa:	689b      	ldr	r3, [r3, #8]
1004c8fc:	4a06      	ldr	r2, [pc, #24]	@ (1004c918 <LL_RCC_LSCO_SetSource+0x28>)
1004c8fe:	4013      	ands	r3, r2
1004c900:	0019      	movs	r1, r3
1004c902:	4b04      	ldr	r3, [pc, #16]	@ (1004c914 <LL_RCC_LSCO_SetSource+0x24>)
1004c904:	687a      	ldr	r2, [r7, #4]
1004c906:	430a      	orrs	r2, r1
1004c908:	609a      	str	r2, [r3, #8]
}
1004c90a:	46c0      	nop			@ (mov r8, r8)
1004c90c:	46bd      	mov	sp, r7
1004c90e:	b002      	add	sp, #8
1004c910:	bd80      	pop	{r7, pc}
1004c912:	46c0      	nop			@ (mov r8, r8)
1004c914:	48400000 	.word	0x48400000
1004c918:	fffe7fff 	.word	0xfffe7fff

1004c91c <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
1004c91c:	b580      	push	{r7, lr}
1004c91e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
1004c920:	4b04      	ldr	r3, [pc, #16]	@ (1004c934 <LL_RCC_LSE_Enable+0x18>)
1004c922:	681a      	ldr	r2, [r3, #0]
1004c924:	4b03      	ldr	r3, [pc, #12]	@ (1004c934 <LL_RCC_LSE_Enable+0x18>)
1004c926:	2110      	movs	r1, #16
1004c928:	430a      	orrs	r2, r1
1004c92a:	601a      	str	r2, [r3, #0]
}
1004c92c:	46c0      	nop			@ (mov r8, r8)
1004c92e:	46bd      	mov	sp, r7
1004c930:	bd80      	pop	{r7, pc}
1004c932:	46c0      	nop			@ (mov r8, r8)
1004c934:	48400000 	.word	0x48400000

1004c938 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
1004c938:	b580      	push	{r7, lr}
1004c93a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
1004c93c:	4b04      	ldr	r3, [pc, #16]	@ (1004c950 <LL_RCC_LSE_Disable+0x18>)
1004c93e:	681a      	ldr	r2, [r3, #0]
1004c940:	4b03      	ldr	r3, [pc, #12]	@ (1004c950 <LL_RCC_LSE_Disable+0x18>)
1004c942:	2110      	movs	r1, #16
1004c944:	438a      	bics	r2, r1
1004c946:	601a      	str	r2, [r3, #0]
}
1004c948:	46c0      	nop			@ (mov r8, r8)
1004c94a:	46bd      	mov	sp, r7
1004c94c:	bd80      	pop	{r7, pc}
1004c94e:	46c0      	nop			@ (mov r8, r8)
1004c950:	48400000 	.word	0x48400000

1004c954 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
1004c954:	b580      	push	{r7, lr}
1004c956:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
1004c958:	4b05      	ldr	r3, [pc, #20]	@ (1004c970 <LL_RCC_LSE_IsReady+0x1c>)
1004c95a:	681b      	ldr	r3, [r3, #0]
1004c95c:	2220      	movs	r2, #32
1004c95e:	4013      	ands	r3, r2
1004c960:	2b20      	cmp	r3, #32
1004c962:	d101      	bne.n	1004c968 <LL_RCC_LSE_IsReady+0x14>
1004c964:	2301      	movs	r3, #1
1004c966:	e000      	b.n	1004c96a <LL_RCC_LSE_IsReady+0x16>
1004c968:	2300      	movs	r3, #0
}
1004c96a:	0018      	movs	r0, r3
1004c96c:	46bd      	mov	sp, r7
1004c96e:	bd80      	pop	{r7, pc}
1004c970:	48400000 	.word	0x48400000

1004c974 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
1004c974:	b580      	push	{r7, lr}
1004c976:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEBYP);
1004c978:	4b04      	ldr	r3, [pc, #16]	@ (1004c98c <LL_RCC_LSE_EnableBypass+0x18>)
1004c97a:	681a      	ldr	r2, [r3, #0]
1004c97c:	4b03      	ldr	r3, [pc, #12]	@ (1004c98c <LL_RCC_LSE_EnableBypass+0x18>)
1004c97e:	2140      	movs	r1, #64	@ 0x40
1004c980:	430a      	orrs	r2, r1
1004c982:	601a      	str	r2, [r3, #0]
}
1004c984:	46c0      	nop			@ (mov r8, r8)
1004c986:	46bd      	mov	sp, r7
1004c988:	bd80      	pop	{r7, pc}
1004c98a:	46c0      	nop			@ (mov r8, r8)
1004c98c:	48400000 	.word	0x48400000

1004c990 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
1004c990:	b580      	push	{r7, lr}
1004c992:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEBYP);
1004c994:	4b04      	ldr	r3, [pc, #16]	@ (1004c9a8 <LL_RCC_LSE_DisableBypass+0x18>)
1004c996:	681a      	ldr	r2, [r3, #0]
1004c998:	4b03      	ldr	r3, [pc, #12]	@ (1004c9a8 <LL_RCC_LSE_DisableBypass+0x18>)
1004c99a:	2140      	movs	r1, #64	@ 0x40
1004c99c:	438a      	bics	r2, r1
1004c99e:	601a      	str	r2, [r3, #0]
}
1004c9a0:	46c0      	nop			@ (mov r8, r8)
1004c9a2:	46bd      	mov	sp, r7
1004c9a4:	bd80      	pop	{r7, pc}
1004c9a6:	46c0      	nop			@ (mov r8, r8)
1004c9a8:	48400000 	.word	0x48400000

1004c9ac <LL_RCC_LSE_IsBypassEnabled>:
  * @brief  Check if LSE bypass configuration is enabled.
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_IsBypassEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsBypassEnabled(void)
{
1004c9ac:	b580      	push	{r7, lr}
1004c9ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEBYP) == (RCC_CR_LSEBYP)) ? 1UL : 0UL);
1004c9b0:	4b05      	ldr	r3, [pc, #20]	@ (1004c9c8 <LL_RCC_LSE_IsBypassEnabled+0x1c>)
1004c9b2:	681b      	ldr	r3, [r3, #0]
1004c9b4:	2240      	movs	r2, #64	@ 0x40
1004c9b6:	4013      	ands	r3, r2
1004c9b8:	2b40      	cmp	r3, #64	@ 0x40
1004c9ba:	d101      	bne.n	1004c9c0 <LL_RCC_LSE_IsBypassEnabled+0x14>
1004c9bc:	2301      	movs	r3, #1
1004c9be:	e000      	b.n	1004c9c2 <LL_RCC_LSE_IsBypassEnabled+0x16>
1004c9c0:	2300      	movs	r3, #0
}
1004c9c2:	0018      	movs	r0, r3
1004c9c4:	46bd      	mov	sp, r7
1004c9c6:	bd80      	pop	{r7, pc}
1004c9c8:	48400000 	.word	0x48400000

1004c9cc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
1004c9cc:	b580      	push	{r7, lr}
1004c9ce:	b082      	sub	sp, #8
1004c9d0:	af00      	add	r7, sp, #0
1004c9d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSEDRV, LSEDrive);
1004c9d4:	4b06      	ldr	r3, [pc, #24]	@ (1004c9f0 <LL_RCC_LSE_SetDriveCapability+0x24>)
1004c9d6:	68db      	ldr	r3, [r3, #12]
1004c9d8:	2260      	movs	r2, #96	@ 0x60
1004c9da:	4393      	bics	r3, r2
1004c9dc:	0019      	movs	r1, r3
1004c9de:	4b04      	ldr	r3, [pc, #16]	@ (1004c9f0 <LL_RCC_LSE_SetDriveCapability+0x24>)
1004c9e0:	687a      	ldr	r2, [r7, #4]
1004c9e2:	430a      	orrs	r2, r1
1004c9e4:	60da      	str	r2, [r3, #12]
}
1004c9e6:	46c0      	nop			@ (mov r8, r8)
1004c9e8:	46bd      	mov	sp, r7
1004c9ea:	b002      	add	sp, #8
1004c9ec:	bd80      	pop	{r7, pc}
1004c9ee:	46c0      	nop			@ (mov r8, r8)
1004c9f0:	48400000 	.word	0x48400000

1004c9f4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
1004c9f4:	b580      	push	{r7, lr}
1004c9f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
1004c9f8:	4b04      	ldr	r3, [pc, #16]	@ (1004ca0c <LL_RCC_LSI_Enable+0x18>)
1004c9fa:	681a      	ldr	r2, [r3, #0]
1004c9fc:	4b03      	ldr	r3, [pc, #12]	@ (1004ca0c <LL_RCC_LSI_Enable+0x18>)
1004c9fe:	2104      	movs	r1, #4
1004ca00:	430a      	orrs	r2, r1
1004ca02:	601a      	str	r2, [r3, #0]
}
1004ca04:	46c0      	nop			@ (mov r8, r8)
1004ca06:	46bd      	mov	sp, r7
1004ca08:	bd80      	pop	{r7, pc}
1004ca0a:	46c0      	nop			@ (mov r8, r8)
1004ca0c:	48400000 	.word	0x48400000

1004ca10 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
1004ca10:	b580      	push	{r7, lr}
1004ca12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
1004ca14:	4b04      	ldr	r3, [pc, #16]	@ (1004ca28 <LL_RCC_LSI_Disable+0x18>)
1004ca16:	681a      	ldr	r2, [r3, #0]
1004ca18:	4b03      	ldr	r3, [pc, #12]	@ (1004ca28 <LL_RCC_LSI_Disable+0x18>)
1004ca1a:	2104      	movs	r1, #4
1004ca1c:	438a      	bics	r2, r1
1004ca1e:	601a      	str	r2, [r3, #0]
}
1004ca20:	46c0      	nop			@ (mov r8, r8)
1004ca22:	46bd      	mov	sp, r7
1004ca24:	bd80      	pop	{r7, pc}
1004ca26:	46c0      	nop			@ (mov r8, r8)
1004ca28:	48400000 	.word	0x48400000

1004ca2c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
1004ca2c:	b580      	push	{r7, lr}
1004ca2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
1004ca30:	4b05      	ldr	r3, [pc, #20]	@ (1004ca48 <LL_RCC_LSI_IsReady+0x1c>)
1004ca32:	681b      	ldr	r3, [r3, #0]
1004ca34:	2208      	movs	r2, #8
1004ca36:	4013      	ands	r3, r2
1004ca38:	2b08      	cmp	r3, #8
1004ca3a:	d101      	bne.n	1004ca40 <LL_RCC_LSI_IsReady+0x14>
1004ca3c:	2301      	movs	r3, #1
1004ca3e:	e000      	b.n	1004ca42 <LL_RCC_LSI_IsReady+0x16>
1004ca40:	2300      	movs	r3, #0
}
1004ca42:	0018      	movs	r0, r3
1004ca44:	46bd      	mov	sp, r7
1004ca46:	bd80      	pop	{r7, pc}
1004ca48:	48400000 	.word	0x48400000

1004ca4c <LL_RCC_RC64MPLL_Enable>:
  * @brief  Enable RC64MPLL
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Enable(void)
{
1004ca4c:	b580      	push	{r7, lr}
1004ca4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
1004ca50:	4b04      	ldr	r3, [pc, #16]	@ (1004ca64 <LL_RCC_RC64MPLL_Enable+0x18>)
1004ca52:	681a      	ldr	r2, [r3, #0]
1004ca54:	4b03      	ldr	r3, [pc, #12]	@ (1004ca64 <LL_RCC_RC64MPLL_Enable+0x18>)
1004ca56:	2180      	movs	r1, #128	@ 0x80
1004ca58:	0189      	lsls	r1, r1, #6
1004ca5a:	430a      	orrs	r2, r1
1004ca5c:	601a      	str	r2, [r3, #0]
}
1004ca5e:	46c0      	nop			@ (mov r8, r8)
1004ca60:	46bd      	mov	sp, r7
1004ca62:	bd80      	pop	{r7, pc}
1004ca64:	48400000 	.word	0x48400000

1004ca68 <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
1004ca68:	b580      	push	{r7, lr}
1004ca6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
1004ca6c:	4b04      	ldr	r3, [pc, #16]	@ (1004ca80 <LL_RCC_RC64MPLL_Disable+0x18>)
1004ca6e:	681a      	ldr	r2, [r3, #0]
1004ca70:	4b03      	ldr	r3, [pc, #12]	@ (1004ca80 <LL_RCC_RC64MPLL_Disable+0x18>)
1004ca72:	4904      	ldr	r1, [pc, #16]	@ (1004ca84 <LL_RCC_RC64MPLL_Disable+0x1c>)
1004ca74:	400a      	ands	r2, r1
1004ca76:	601a      	str	r2, [r3, #0]
}
1004ca78:	46c0      	nop			@ (mov r8, r8)
1004ca7a:	46bd      	mov	sp, r7
1004ca7c:	bd80      	pop	{r7, pc}
1004ca7e:	46c0      	nop			@ (mov r8, r8)
1004ca80:	48400000 	.word	0x48400000
1004ca84:	ffffdfff 	.word	0xffffdfff

1004ca88 <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
1004ca88:	b580      	push	{r7, lr}
1004ca8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
1004ca8c:	4b07      	ldr	r3, [pc, #28]	@ (1004caac <LL_RCC_RC64MPLL_IsReady+0x24>)
1004ca8e:	681a      	ldr	r2, [r3, #0]
1004ca90:	2380      	movs	r3, #128	@ 0x80
1004ca92:	01db      	lsls	r3, r3, #7
1004ca94:	401a      	ands	r2, r3
1004ca96:	2380      	movs	r3, #128	@ 0x80
1004ca98:	01db      	lsls	r3, r3, #7
1004ca9a:	429a      	cmp	r2, r3
1004ca9c:	d101      	bne.n	1004caa2 <LL_RCC_RC64MPLL_IsReady+0x1a>
1004ca9e:	2301      	movs	r3, #1
1004caa0:	e000      	b.n	1004caa4 <LL_RCC_RC64MPLL_IsReady+0x1c>
1004caa2:	2300      	movs	r3, #0
}
1004caa4:	0018      	movs	r0, r3
1004caa6:	46bd      	mov	sp, r7
1004caa8:	bd80      	pop	{r7, pc}
1004caaa:	46c0      	nop			@ (mov r8, r8)
1004caac:	48400000 	.word	0x48400000

1004cab0 <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
1004cab0:	b580      	push	{r7, lr}
1004cab2:	b082      	sub	sp, #8
1004cab4:	af00      	add	r7, sp, #0
1004cab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
1004cab8:	4b06      	ldr	r3, [pc, #24]	@ (1004cad4 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
1004caba:	689b      	ldr	r3, [r3, #8]
1004cabc:	22e0      	movs	r2, #224	@ 0xe0
1004cabe:	4393      	bics	r3, r2
1004cac0:	0019      	movs	r1, r3
1004cac2:	4b04      	ldr	r3, [pc, #16]	@ (1004cad4 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
1004cac4:	687a      	ldr	r2, [r7, #4]
1004cac6:	430a      	orrs	r2, r1
1004cac8:	609a      	str	r2, [r3, #8]
}
1004caca:	46c0      	nop			@ (mov r8, r8)
1004cacc:	46bd      	mov	sp, r7
1004cace:	b002      	add	sp, #8
1004cad0:	bd80      	pop	{r7, pc}
1004cad2:	46c0      	nop			@ (mov r8, r8)
1004cad4:	48400000 	.word	0x48400000

1004cad8 <HAL_RCC_OscConfig>:
  * @param  RCC_OscInitStruct  pointer to a @ref RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
1004cad8:	b580      	push	{r7, lr}
1004cada:	b084      	sub	sp, #16
1004cadc:	af00      	add	r7, sp, #0
1004cade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
1004cae0:	687b      	ldr	r3, [r7, #4]
1004cae2:	2b00      	cmp	r3, #0
1004cae4:	d101      	bne.n	1004caea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
1004cae6:	2301      	movs	r3, #1
1004cae8:	e13c      	b.n	1004cd64 <HAL_RCC_OscConfig+0x28c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSI Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
1004caea:	687b      	ldr	r3, [r7, #4]
1004caec:	681b      	ldr	r3, [r3, #0]
1004caee:	2210      	movs	r2, #16
1004caf0:	4013      	ands	r3, r2
1004caf2:	d033      	beq.n	1004cb5c <HAL_RCC_OscConfig+0x84>
  {
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
1004caf4:	687b      	ldr	r3, [r7, #4]
1004caf6:	689b      	ldr	r3, [r3, #8]
1004caf8:	2b00      	cmp	r3, #0
1004cafa:	d102      	bne.n	1004cb02 <HAL_RCC_OscConfig+0x2a>
1004cafc:	f7ff fe96 	bl	1004c82c <LL_RCC_HSI_Enable>
1004cb00:	e001      	b.n	1004cb06 <HAL_RCC_OscConfig+0x2e>
1004cb02:	f7ff fea7 	bl	1004c854 <LL_RCC_HSI_Disable>

    if(RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
1004cb06:	687b      	ldr	r3, [r7, #4]
1004cb08:	689b      	ldr	r3, [r3, #8]
1004cb0a:	2b04      	cmp	r3, #4
1004cb0c:	d113      	bne.n	1004cb36 <HAL_RCC_OscConfig+0x5e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004cb0e:	f7fa febf 	bl	10047890 <HAL_GetTick>
1004cb12:	0003      	movs	r3, r0
1004cb14:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is disabled */
      while (LL_RCC_HSI_IsReady() == 1U)
1004cb16:	e008      	b.n	1004cb2a <HAL_RCC_OscConfig+0x52>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004cb18:	f7fa feba 	bl	10047890 <HAL_GetTick>
1004cb1c:	0002      	movs	r2, r0
1004cb1e:	68fb      	ldr	r3, [r7, #12]
1004cb20:	1ad3      	subs	r3, r2, r3
1004cb22:	2b64      	cmp	r3, #100	@ 0x64
1004cb24:	d901      	bls.n	1004cb2a <HAL_RCC_OscConfig+0x52>
        {
          return HAL_TIMEOUT;
1004cb26:	2303      	movs	r3, #3
1004cb28:	e11c      	b.n	1004cd64 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() == 1U)
1004cb2a:	f7ff fea7 	bl	1004c87c <LL_RCC_HSI_IsReady>
1004cb2e:	0003      	movs	r3, r0
1004cb30:	2b01      	cmp	r3, #1
1004cb32:	d0f1      	beq.n	1004cb18 <HAL_RCC_OscConfig+0x40>
1004cb34:	e012      	b.n	1004cb5c <HAL_RCC_OscConfig+0x84>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004cb36:	f7fa feab 	bl	10047890 <HAL_GetTick>
1004cb3a:	0003      	movs	r3, r0
1004cb3c:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is enabled */
      while (LL_RCC_HSI_IsReady() != 1U)
1004cb3e:	e008      	b.n	1004cb52 <HAL_RCC_OscConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004cb40:	f7fa fea6 	bl	10047890 <HAL_GetTick>
1004cb44:	0002      	movs	r2, r0
1004cb46:	68fb      	ldr	r3, [r7, #12]
1004cb48:	1ad3      	subs	r3, r2, r3
1004cb4a:	2b64      	cmp	r3, #100	@ 0x64
1004cb4c:	d901      	bls.n	1004cb52 <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
1004cb4e:	2303      	movs	r3, #3
1004cb50:	e108      	b.n	1004cd64 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() != 1U)
1004cb52:	f7ff fe93 	bl	1004c87c <LL_RCC_HSI_IsReady>
1004cb56:	0003      	movs	r3, r0
1004cb58:	2b01      	cmp	r3, #1
1004cb5a:	d1f1      	bne.n	1004cb40 <HAL_RCC_OscConfig+0x68>
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
1004cb5c:	687b      	ldr	r3, [r7, #4]
1004cb5e:	681b      	ldr	r3, [r3, #0]
1004cb60:	2201      	movs	r2, #1
1004cb62:	4013      	ands	r3, r2
1004cb64:	d039      	beq.n	1004cbda <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* Set HSE Capacitor Tuning */
    LL_RCC_HSE_SetCapacitorTuning(CFG_HW_RCC_HSE_CAPACITOR_TUNE);
1004cb66:	2020      	movs	r0, #32
1004cb68:	f7ff fe2a 	bl	1004c7c0 <LL_RCC_HSE_SetCapacitorTuning>

    /* Set HSE Current Control */
    LL_RCC_HSE_SetCurrentControl(LL_RCC_HSE_CURRENTMAX_3);
1004cb6c:	2030      	movs	r0, #48	@ 0x30
1004cb6e:	f7ff fe47 	bl	1004c800 <LL_RCC_HSE_SetCurrentControl>

    /* Set the new HSE configuration ---------------------------------------*/
    __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
1004cb72:	687b      	ldr	r3, [r7, #4]
1004cb74:	685a      	ldr	r2, [r3, #4]
1004cb76:	2380      	movs	r3, #128	@ 0x80
1004cb78:	025b      	lsls	r3, r3, #9
1004cb7a:	429a      	cmp	r2, r3
1004cb7c:	d102      	bne.n	1004cb84 <HAL_RCC_OscConfig+0xac>
1004cb7e:	f7ff fded 	bl	1004c75c <LL_RCC_HSE_Enable>
1004cb82:	e001      	b.n	1004cb88 <HAL_RCC_OscConfig+0xb0>
1004cb84:	f7ff fdf8 	bl	1004c778 <LL_RCC_HSE_Disable>

    /* Check the HSE State */
    if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
1004cb88:	687b      	ldr	r3, [r7, #4]
1004cb8a:	685b      	ldr	r3, [r3, #4]
1004cb8c:	2b00      	cmp	r3, #0
1004cb8e:	d012      	beq.n	1004cbb6 <HAL_RCC_OscConfig+0xde>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004cb90:	f7fa fe7e 	bl	10047890 <HAL_GetTick>
1004cb94:	0003      	movs	r3, r0
1004cb96:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is ready */
      while (LL_RCC_HSE_IsReady() == 0U)
1004cb98:	e008      	b.n	1004cbac <HAL_RCC_OscConfig+0xd4>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004cb9a:	f7fa fe79 	bl	10047890 <HAL_GetTick>
1004cb9e:	0002      	movs	r2, r0
1004cba0:	68fb      	ldr	r3, [r7, #12]
1004cba2:	1ad3      	subs	r3, r2, r3
1004cba4:	2b64      	cmp	r3, #100	@ 0x64
1004cba6:	d901      	bls.n	1004cbac <HAL_RCC_OscConfig+0xd4>
        {
          return HAL_TIMEOUT;
1004cba8:	2303      	movs	r3, #3
1004cbaa:	e0db      	b.n	1004cd64 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() == 0U)
1004cbac:	f7ff fdf4 	bl	1004c798 <LL_RCC_HSE_IsReady>
1004cbb0:	1e03      	subs	r3, r0, #0
1004cbb2:	d0f2      	beq.n	1004cb9a <HAL_RCC_OscConfig+0xc2>
1004cbb4:	e011      	b.n	1004cbda <HAL_RCC_OscConfig+0x102>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004cbb6:	f7fa fe6b 	bl	10047890 <HAL_GetTick>
1004cbba:	0003      	movs	r3, r0
1004cbbc:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is disabled */
      while (LL_RCC_HSE_IsReady() != 0U)
1004cbbe:	e008      	b.n	1004cbd2 <HAL_RCC_OscConfig+0xfa>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004cbc0:	f7fa fe66 	bl	10047890 <HAL_GetTick>
1004cbc4:	0002      	movs	r2, r0
1004cbc6:	68fb      	ldr	r3, [r7, #12]
1004cbc8:	1ad3      	subs	r3, r2, r3
1004cbca:	2b64      	cmp	r3, #100	@ 0x64
1004cbcc:	d901      	bls.n	1004cbd2 <HAL_RCC_OscConfig+0xfa>
        {
          return HAL_TIMEOUT;
1004cbce:	2303      	movs	r3, #3
1004cbd0:	e0c8      	b.n	1004cd64 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() != 0U)
1004cbd2:	f7ff fde1 	bl	1004c798 <LL_RCC_HSE_IsReady>
1004cbd6:	1e03      	subs	r3, r0, #0
1004cbd8:	d1f2      	bne.n	1004cbc0 <HAL_RCC_OscConfig+0xe8>
      }
    }
  }

  /*--------------------------------- LSI Configuration -----------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
1004cbda:	687b      	ldr	r3, [r7, #4]
1004cbdc:	681b      	ldr	r3, [r3, #0]
1004cbde:	2204      	movs	r2, #4
1004cbe0:	4013      	ands	r3, r2
1004cbe2:	d03a      	beq.n	1004cc5a <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
1004cbe4:	687b      	ldr	r3, [r7, #4]
1004cbe6:	691b      	ldr	r3, [r3, #16]
1004cbe8:	2b00      	cmp	r3, #0
1004cbea:	d022      	beq.n	1004cc32 <HAL_RCC_OscConfig+0x15a>
    {
      /* Disable the LSI */
      __HAL_RCC_LSI_DISABLE();
1004cbec:	f7ff ff10 	bl	1004ca10 <LL_RCC_LSI_Disable>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U);
1004cbf0:	46c0      	nop			@ (mov r8, r8)
1004cbf2:	f7ff ff1b 	bl	1004ca2c <LL_RCC_LSI_IsReady>
1004cbf6:	1e03      	subs	r3, r0, #0
1004cbf8:	d1fb      	bne.n	1004cbf2 <HAL_RCC_OscConfig+0x11a>

      /* Disable the LSE */
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
1004cbfa:	f7ff fe9d 	bl	1004c938 <LL_RCC_LSE_Disable>

      /* Configure the Low Speed Clock to LSI */
      LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSI);
1004cbfe:	2380      	movs	r3, #128	@ 0x80
1004cc00:	025b      	lsls	r3, r3, #9
1004cc02:	0018      	movs	r0, r3
1004cc04:	f7ff fe74 	bl	1004c8f0 <LL_RCC_LSCO_SetSource>

      /*  Enable the Internal Low Speed oscillator (LSI)  */
      __HAL_RCC_LSI_ENABLE();
1004cc08:	f7ff fef4 	bl	1004c9f4 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004cc0c:	f7fa fe40 	bl	10047890 <HAL_GetTick>
1004cc10:	0003      	movs	r3, r0
1004cc12:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
1004cc14:	e008      	b.n	1004cc28 <HAL_RCC_OscConfig+0x150>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1004cc16:	f7fa fe3b 	bl	10047890 <HAL_GetTick>
1004cc1a:	0002      	movs	r2, r0
1004cc1c:	68fb      	ldr	r3, [r7, #12]
1004cc1e:	1ad3      	subs	r3, r2, r3
1004cc20:	2b02      	cmp	r3, #2
1004cc22:	d901      	bls.n	1004cc28 <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
1004cc24:	2303      	movs	r3, #3
1004cc26:	e09d      	b.n	1004cd64 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
1004cc28:	f7ff ff00 	bl	1004ca2c <LL_RCC_LSI_IsReady>
1004cc2c:	1e03      	subs	r3, r0, #0
1004cc2e:	d0f2      	beq.n	1004cc16 <HAL_RCC_OscConfig+0x13e>
1004cc30:	e013      	b.n	1004cc5a <HAL_RCC_OscConfig+0x182>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
1004cc32:	f7ff feed 	bl	1004ca10 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004cc36:	f7fa fe2b 	bl	10047890 <HAL_GetTick>
1004cc3a:	0003      	movs	r3, r0
1004cc3c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
1004cc3e:	e008      	b.n	1004cc52 <HAL_RCC_OscConfig+0x17a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1004cc40:	f7fa fe26 	bl	10047890 <HAL_GetTick>
1004cc44:	0002      	movs	r2, r0
1004cc46:	68fb      	ldr	r3, [r7, #12]
1004cc48:	1ad3      	subs	r3, r2, r3
1004cc4a:	2b02      	cmp	r3, #2
1004cc4c:	d901      	bls.n	1004cc52 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
1004cc4e:	2303      	movs	r3, #3
1004cc50:	e088      	b.n	1004cd64 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
1004cc52:	f7ff feeb 	bl	1004ca2c <LL_RCC_LSI_IsReady>
1004cc56:	1e03      	subs	r3, r0, #0
1004cc58:	d1f2      	bne.n	1004cc40 <HAL_RCC_OscConfig+0x168>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
1004cc5a:	687b      	ldr	r3, [r7, #4]
1004cc5c:	681b      	ldr	r3, [r3, #0]
1004cc5e:	2202      	movs	r2, #2
1004cc60:	4013      	ands	r3, r2
1004cc62:	d047      	beq.n	1004ccf4 <HAL_RCC_OscConfig+0x21c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Disable LSI */
    __HAL_RCC_LSI_DISABLE();
1004cc64:	f7ff fed4 	bl	1004ca10 <LL_RCC_LSI_Disable>

    /* Disable LSE */
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
1004cc68:	f7ff fe66 	bl	1004c938 <LL_RCC_LSE_Disable>
    while (__HAL_RCC_GET_LSE_READYFLAG() != 0);
1004cc6c:	46c0      	nop			@ (mov r8, r8)
1004cc6e:	f7ff fe71 	bl	1004c954 <LL_RCC_LSE_IsReady>
1004cc72:	1e03      	subs	r3, r0, #0
1004cc74:	d1fb      	bne.n	1004cc6e <HAL_RCC_OscConfig+0x196>

    /* Configure the PB12 and PB13 in NO PULL mode */
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 |
1004cc76:	23c0      	movs	r3, #192	@ 0xc0
1004cc78:	019b      	lsls	r3, r3, #6
1004cc7a:	0018      	movs	r0, r3
1004cc7c:	f7ff fd56 	bl	1004c72c <LL_PWR_SetNoPullB>
                      LL_PWR_GPIO_BIT_13);

    /* Configure the Low Speed Clock to LSE */
    LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSE);
1004cc80:	2380      	movs	r3, #128	@ 0x80
1004cc82:	021b      	lsls	r3, r3, #8
1004cc84:	0018      	movs	r0, r3
1004cc86:	f7ff fe33 	bl	1004c8f0 <LL_RCC_LSCO_SetSource>

    /* Set LSE oscillator drive capability */
    __HAL_RCC_LSEDRIVE_CONFIG(LSE_DRIVE_LEVEL);
1004cc8a:	2020      	movs	r0, #32
1004cc8c:	f7ff fe9e 	bl	1004c9cc <LL_RCC_LSE_SetDriveCapability>


    /* Set the new LSE state */
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
1004cc90:	687b      	ldr	r3, [r7, #4]
1004cc92:	68db      	ldr	r3, [r3, #12]
1004cc94:	2b10      	cmp	r3, #16
1004cc96:	d102      	bne.n	1004cc9e <HAL_RCC_OscConfig+0x1c6>
1004cc98:	f7ff fe40 	bl	1004c91c <LL_RCC_LSE_Enable>
1004cc9c:	e001      	b.n	1004cca2 <HAL_RCC_OscConfig+0x1ca>
1004cc9e:	f7ff fe4b 	bl	1004c938 <LL_RCC_LSE_Disable>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
1004cca2:	687b      	ldr	r3, [r7, #4]
1004cca4:	68db      	ldr	r3, [r3, #12]
1004cca6:	2b00      	cmp	r3, #0
1004cca8:	d012      	beq.n	1004ccd0 <HAL_RCC_OscConfig+0x1f8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004ccaa:	f7fa fdf1 	bl	10047890 <HAL_GetTick>
1004ccae:	0003      	movs	r3, r0
1004ccb0:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
1004ccb2:	e008      	b.n	1004ccc6 <HAL_RCC_OscConfig+0x1ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004ccb4:	f7fa fdec 	bl	10047890 <HAL_GetTick>
1004ccb8:	0002      	movs	r2, r0
1004ccba:	68fb      	ldr	r3, [r7, #12]
1004ccbc:	1ad3      	subs	r3, r2, r3
1004ccbe:	2b64      	cmp	r3, #100	@ 0x64
1004ccc0:	d901      	bls.n	1004ccc6 <HAL_RCC_OscConfig+0x1ee>
        {
          return HAL_TIMEOUT;
1004ccc2:	2303      	movs	r3, #3
1004ccc4:	e04e      	b.n	1004cd64 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
1004ccc6:	f7ff fe45 	bl	1004c954 <LL_RCC_LSE_IsReady>
1004ccca:	1e03      	subs	r3, r0, #0
1004cccc:	d0f2      	beq.n	1004ccb4 <HAL_RCC_OscConfig+0x1dc>
1004ccce:	e011      	b.n	1004ccf4 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004ccd0:	f7fa fdde 	bl	10047890 <HAL_GetTick>
1004ccd4:	0003      	movs	r3, r0
1004ccd6:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
1004ccd8:	e008      	b.n	1004ccec <HAL_RCC_OscConfig+0x214>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004ccda:	f7fa fdd9 	bl	10047890 <HAL_GetTick>
1004ccde:	0002      	movs	r2, r0
1004cce0:	68fb      	ldr	r3, [r7, #12]
1004cce2:	1ad3      	subs	r3, r2, r3
1004cce4:	2b64      	cmp	r3, #100	@ 0x64
1004cce6:	d901      	bls.n	1004ccec <HAL_RCC_OscConfig+0x214>
        {
          return HAL_TIMEOUT;
1004cce8:	2303      	movs	r3, #3
1004ccea:	e03b      	b.n	1004cd64 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
1004ccec:	f7ff fe32 	bl	1004c954 <LL_RCC_LSE_IsReady>
1004ccf0:	1e03      	subs	r3, r0, #0
1004ccf2:	d1f2      	bne.n	1004ccda <HAL_RCC_OscConfig+0x202>
      }
    }
  }

  /*------------------------------ LSE Bypass Configuration ------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE_BYPASS) == RCC_OSCILLATORTYPE_LSE_BYPASS)
1004ccf4:	687b      	ldr	r3, [r7, #4]
1004ccf6:	681b      	ldr	r3, [r3, #0]
1004ccf8:	2208      	movs	r2, #8
1004ccfa:	4013      	ands	r3, r2
1004ccfc:	d031      	beq.n	1004cd62 <HAL_RCC_OscConfig+0x28a>

    /* Check the parameters */
    assert_param(IS_RCC_LSE_BYPASS(RCC_OscInitStruct->LSEBYPASSState));

    /* Set the new LSE Bypass configuration -----------------------------------------*/
    __HAL_RCC_LSE_BYPASS_CONFIG(RCC_OscInitStruct->LSEBYPASSState);
1004ccfe:	687b      	ldr	r3, [r7, #4]
1004cd00:	695b      	ldr	r3, [r3, #20]
1004cd02:	2b40      	cmp	r3, #64	@ 0x40
1004cd04:	d102      	bne.n	1004cd0c <HAL_RCC_OscConfig+0x234>
1004cd06:	f7ff fe35 	bl	1004c974 <LL_RCC_LSE_EnableBypass>
1004cd0a:	e001      	b.n	1004cd10 <HAL_RCC_OscConfig+0x238>
1004cd0c:	f7ff fe40 	bl	1004c990 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE Bypass State */
    if (RCC_OscInitStruct->LSEBYPASSState != RCC_LSE_OFF)
1004cd10:	687b      	ldr	r3, [r7, #4]
1004cd12:	695b      	ldr	r3, [r3, #20]
1004cd14:	2b00      	cmp	r3, #0
1004cd16:	d012      	beq.n	1004cd3e <HAL_RCC_OscConfig+0x266>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004cd18:	f7fa fdba 	bl	10047890 <HAL_GetTick>
1004cd1c:	0003      	movs	r3, r0
1004cd1e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
1004cd20:	e008      	b.n	1004cd34 <HAL_RCC_OscConfig+0x25c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004cd22:	f7fa fdb5 	bl	10047890 <HAL_GetTick>
1004cd26:	0002      	movs	r2, r0
1004cd28:	68fb      	ldr	r3, [r7, #12]
1004cd2a:	1ad3      	subs	r3, r2, r3
1004cd2c:	2b64      	cmp	r3, #100	@ 0x64
1004cd2e:	d901      	bls.n	1004cd34 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
1004cd30:	2303      	movs	r3, #3
1004cd32:	e017      	b.n	1004cd64 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
1004cd34:	f7ff fe3a 	bl	1004c9ac <LL_RCC_LSE_IsBypassEnabled>
1004cd38:	1e03      	subs	r3, r0, #0
1004cd3a:	d0f2      	beq.n	1004cd22 <HAL_RCC_OscConfig+0x24a>
1004cd3c:	e011      	b.n	1004cd62 <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004cd3e:	f7fa fda7 	bl	10047890 <HAL_GetTick>
1004cd42:	0003      	movs	r3, r0
1004cd44:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
1004cd46:	e008      	b.n	1004cd5a <HAL_RCC_OscConfig+0x282>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004cd48:	f7fa fda2 	bl	10047890 <HAL_GetTick>
1004cd4c:	0002      	movs	r2, r0
1004cd4e:	68fb      	ldr	r3, [r7, #12]
1004cd50:	1ad3      	subs	r3, r2, r3
1004cd52:	2b64      	cmp	r3, #100	@ 0x64
1004cd54:	d901      	bls.n	1004cd5a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
1004cd56:	2303      	movs	r3, #3
1004cd58:	e004      	b.n	1004cd64 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
1004cd5a:	f7ff fe27 	bl	1004c9ac <LL_RCC_LSE_IsBypassEnabled>
1004cd5e:	1e03      	subs	r3, r0, #0
1004cd60:	d1f2      	bne.n	1004cd48 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }

  return HAL_OK;
1004cd62:	2300      	movs	r3, #0
}
1004cd64:	0018      	movs	r0, r3
1004cd66:	46bd      	mov	sp, r7
1004cd68:	b004      	add	sp, #16
1004cd6a:	bd80      	pop	{r7, pc}

1004cd6c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
1004cd6c:	b580      	push	{r7, lr}
1004cd6e:	b084      	sub	sp, #16
1004cd70:	af00      	add	r7, sp, #0
1004cd72:	6078      	str	r0, [r7, #4]
1004cd74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
1004cd76:	687b      	ldr	r3, [r7, #4]
1004cd78:	2b00      	cmp	r3, #0
1004cd7a:	d101      	bne.n	1004cd80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
1004cd7c:	2301      	movs	r3, #1
1004cd7e:	e098      	b.n	1004ceb2 <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
1004cd80:	4b4e      	ldr	r3, [pc, #312]	@ (1004cebc <HAL_RCC_ClockConfig+0x150>)
1004cd82:	685b      	ldr	r3, [r3, #4]
1004cd84:	2230      	movs	r2, #48	@ 0x30
1004cd86:	4393      	bics	r3, r2
1004cd88:	0019      	movs	r1, r3
1004cd8a:	4b4c      	ldr	r3, [pc, #304]	@ (1004cebc <HAL_RCC_ClockConfig+0x150>)
1004cd8c:	683a      	ldr	r2, [r7, #0]
1004cd8e:	430a      	orrs	r2, r1
1004cd90:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
1004cd92:	687b      	ldr	r3, [r7, #4]
1004cd94:	681b      	ldr	r3, [r3, #0]
1004cd96:	2b02      	cmp	r3, #2
1004cd98:	d10e      	bne.n	1004cdb8 <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
1004cd9a:	f7ff fd47 	bl	1004c82c <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
1004cd9e:	f7ff fd6d 	bl	1004c87c <LL_RCC_HSI_IsReady>
1004cda2:	1e03      	subs	r3, r0, #0
1004cda4:	d101      	bne.n	1004cdaa <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
1004cda6:	2301      	movs	r3, #1
1004cda8:	e083      	b.n	1004ceb2 <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
1004cdaa:	f7ff fe5d 	bl	1004ca68 <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004cdae:	687b      	ldr	r3, [r7, #4]
1004cdb0:	685b      	ldr	r3, [r3, #4]
1004cdb2:	0018      	movs	r0, r3
1004cdb4:	f7ff fe7c 	bl	1004cab0 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
1004cdb8:	687b      	ldr	r3, [r7, #4]
1004cdba:	681b      	ldr	r3, [r3, #0]
1004cdbc:	2b00      	cmp	r3, #0
1004cdbe:	d124      	bne.n	1004ce0a <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
1004cdc0:	f7ff fd5c 	bl	1004c87c <LL_RCC_HSI_IsReady>
1004cdc4:	1e03      	subs	r3, r0, #0
1004cdc6:	d101      	bne.n	1004cdcc <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
1004cdc8:	2301      	movs	r3, #1
1004cdca:	e072      	b.n	1004ceb2 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
1004cdcc:	f7ff fce4 	bl	1004c798 <LL_RCC_HSE_IsReady>
1004cdd0:	1e03      	subs	r3, r0, #0
1004cdd2:	d101      	bne.n	1004cdd8 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
1004cdd4:	2301      	movs	r3, #1
1004cdd6:	e06c      	b.n	1004ceb2 <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
1004cdd8:	f7ff fe38 	bl	1004ca4c <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1004cddc:	f7fa fd58 	bl	10047890 <HAL_GetTick>
1004cde0:	0003      	movs	r3, r0
1004cde2:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
1004cde4:	e008      	b.n	1004cdf8 <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1004cde6:	f7fa fd53 	bl	10047890 <HAL_GetTick>
1004cdea:	0002      	movs	r2, r0
1004cdec:	68fb      	ldr	r3, [r7, #12]
1004cdee:	1ad3      	subs	r3, r2, r3
1004cdf0:	2b02      	cmp	r3, #2
1004cdf2:	d901      	bls.n	1004cdf8 <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
1004cdf4:	2303      	movs	r3, #3
1004cdf6:	e05c      	b.n	1004ceb2 <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
1004cdf8:	f7ff fe46 	bl	1004ca88 <LL_RCC_RC64MPLL_IsReady>
1004cdfc:	1e03      	subs	r3, r0, #0
1004cdfe:	d0f2      	beq.n	1004cde6 <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004ce00:	687b      	ldr	r3, [r7, #4]
1004ce02:	685b      	ldr	r3, [r3, #4]
1004ce04:	0018      	movs	r0, r3
1004ce06:	f7ff fe53 	bl	1004cab0 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
1004ce0a:	687b      	ldr	r3, [r7, #4]
1004ce0c:	681b      	ldr	r3, [r3, #0]
1004ce0e:	2b01      	cmp	r3, #1
1004ce10:	d117      	bne.n	1004ce42 <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
1004ce12:	f7ff fd47 	bl	1004c8a4 <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
1004ce16:	f7ff fd31 	bl	1004c87c <LL_RCC_HSI_IsReady>
1004ce1a:	1e03      	subs	r3, r0, #0
1004ce1c:	d001      	beq.n	1004ce22 <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
1004ce1e:	2301      	movs	r3, #1
1004ce20:	e047      	b.n	1004ceb2 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
1004ce22:	f7ff fcb9 	bl	1004c798 <LL_RCC_HSE_IsReady>
1004ce26:	1e03      	subs	r3, r0, #0
1004ce28:	d101      	bne.n	1004ce2e <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
1004ce2a:	2301      	movs	r3, #1
1004ce2c:	e041      	b.n	1004ceb2 <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004ce2e:	4b24      	ldr	r3, [pc, #144]	@ (1004cec0 <HAL_RCC_ClockConfig+0x154>)
1004ce30:	689b      	ldr	r3, [r3, #8]
1004ce32:	22e0      	movs	r2, #224	@ 0xe0
1004ce34:	4393      	bics	r3, r2
1004ce36:	0019      	movs	r1, r3
1004ce38:	687b      	ldr	r3, [r7, #4]
1004ce3a:	685a      	ldr	r2, [r3, #4]
1004ce3c:	4b20      	ldr	r3, [pc, #128]	@ (1004cec0 <HAL_RCC_ClockConfig+0x154>)
1004ce3e:	430a      	orrs	r2, r1
1004ce40:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
1004ce42:	4b1e      	ldr	r3, [pc, #120]	@ (1004cebc <HAL_RCC_ClockConfig+0x150>)
1004ce44:	685b      	ldr	r3, [r3, #4]
1004ce46:	2230      	movs	r2, #48	@ 0x30
1004ce48:	4013      	ands	r3, r2
1004ce4a:	683a      	ldr	r2, [r7, #0]
1004ce4c:	429a      	cmp	r2, r3
1004ce4e:	d01d      	beq.n	1004ce8c <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
1004ce50:	4b1a      	ldr	r3, [pc, #104]	@ (1004cebc <HAL_RCC_ClockConfig+0x150>)
1004ce52:	685b      	ldr	r3, [r3, #4]
1004ce54:	2230      	movs	r2, #48	@ 0x30
1004ce56:	4393      	bics	r3, r2
1004ce58:	0019      	movs	r1, r3
1004ce5a:	4b18      	ldr	r3, [pc, #96]	@ (1004cebc <HAL_RCC_ClockConfig+0x150>)
1004ce5c:	683a      	ldr	r2, [r7, #0]
1004ce5e:	430a      	orrs	r2, r1
1004ce60:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1004ce62:	f7fa fd15 	bl	10047890 <HAL_GetTick>
1004ce66:	0003      	movs	r3, r0
1004ce68:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
1004ce6a:	e008      	b.n	1004ce7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
1004ce6c:	f7fa fd10 	bl	10047890 <HAL_GetTick>
1004ce70:	0002      	movs	r2, r0
1004ce72:	68fb      	ldr	r3, [r7, #12]
1004ce74:	1ad3      	subs	r3, r2, r3
1004ce76:	2b02      	cmp	r3, #2
1004ce78:	d901      	bls.n	1004ce7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
1004ce7a:	2303      	movs	r3, #3
1004ce7c:	e019      	b.n	1004ceb2 <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
1004ce7e:	4b0f      	ldr	r3, [pc, #60]	@ (1004cebc <HAL_RCC_ClockConfig+0x150>)
1004ce80:	685b      	ldr	r3, [r3, #4]
1004ce82:	2230      	movs	r2, #48	@ 0x30
1004ce84:	4013      	ands	r3, r2
1004ce86:	683a      	ldr	r2, [r7, #0]
1004ce88:	429a      	cmp	r2, r3
1004ce8a:	d1ef      	bne.n	1004ce6c <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
1004ce8c:	2300      	movs	r3, #0
1004ce8e:	60bb      	str	r3, [r7, #8]
1004ce90:	e003      	b.n	1004ce9a <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
1004ce92:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
1004ce94:	68bb      	ldr	r3, [r7, #8]
1004ce96:	3301      	adds	r3, #1
1004ce98:	60bb      	str	r3, [r7, #8]
1004ce9a:	68bb      	ldr	r3, [r7, #8]
1004ce9c:	2b05      	cmp	r3, #5
1004ce9e:	ddf8      	ble.n	1004ce92 <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
1004cea0:	f7fa fb1c 	bl	100474dc <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
1004cea4:	f7fa fcfe 	bl	100478a4 <HAL_GetTickPrio>
1004cea8:	0003      	movs	r3, r0
1004ceaa:	0018      	movs	r0, r3
1004ceac:	f7fa fc96 	bl	100477dc <HAL_InitTick>
1004ceb0:	0003      	movs	r3, r0
}
1004ceb2:	0018      	movs	r0, r3
1004ceb4:	46bd      	mov	sp, r7
1004ceb6:	b004      	add	sp, #16
1004ceb8:	bd80      	pop	{r7, pc}
1004ceba:	46c0      	nop			@ (mov r8, r8)
1004cebc:	40001000 	.word	0x40001000
1004cec0:	48400000 	.word	0x48400000

1004cec4 <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
1004cec4:	b580      	push	{r7, lr}
1004cec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
1004cec8:	4b02      	ldr	r3, [pc, #8]	@ (1004ced4 <HAL_RCC_GetSysClockFreq+0x10>)
1004ceca:	681b      	ldr	r3, [r3, #0]
}
1004cecc:	0018      	movs	r0, r3
1004cece:	46bd      	mov	sp, r7
1004ced0:	bd80      	pop	{r7, pc}
1004ced2:	46c0      	nop			@ (mov r8, r8)
1004ced4:	20002714 	.word	0x20002714

1004ced8 <LL_RCC_HSE_IsReady>:
{
1004ced8:	b580      	push	{r7, lr}
1004ceda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
1004cedc:	4b07      	ldr	r3, [pc, #28]	@ (1004cefc <LL_RCC_HSE_IsReady+0x24>)
1004cede:	681a      	ldr	r2, [r3, #0]
1004cee0:	2380      	movs	r3, #128	@ 0x80
1004cee2:	029b      	lsls	r3, r3, #10
1004cee4:	401a      	ands	r2, r3
1004cee6:	2380      	movs	r3, #128	@ 0x80
1004cee8:	029b      	lsls	r3, r3, #10
1004ceea:	429a      	cmp	r2, r3
1004ceec:	d101      	bne.n	1004cef2 <LL_RCC_HSE_IsReady+0x1a>
1004ceee:	2301      	movs	r3, #1
1004cef0:	e000      	b.n	1004cef4 <LL_RCC_HSE_IsReady+0x1c>
1004cef2:	2300      	movs	r3, #0
}
1004cef4:	0018      	movs	r0, r3
1004cef6:	46bd      	mov	sp, r7
1004cef8:	bd80      	pop	{r7, pc}
1004cefa:	46c0      	nop			@ (mov r8, r8)
1004cefc:	48400000 	.word	0x48400000

1004cf00 <LL_RCC_DIRECT_HSE_IsEnabled>:
{
1004cf00:	b580      	push	{r7, lr}
1004cf02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
1004cf04:	4b05      	ldr	r3, [pc, #20]	@ (1004cf1c <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
1004cf06:	689b      	ldr	r3, [r3, #8]
1004cf08:	2208      	movs	r2, #8
1004cf0a:	4013      	ands	r3, r2
1004cf0c:	2b08      	cmp	r3, #8
1004cf0e:	d101      	bne.n	1004cf14 <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
1004cf10:	2301      	movs	r3, #1
1004cf12:	e000      	b.n	1004cf16 <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
1004cf14:	2300      	movs	r3, #0
}
1004cf16:	0018      	movs	r0, r3
1004cf18:	46bd      	mov	sp, r7
1004cf1a:	bd80      	pop	{r7, pc}
1004cf1c:	48400000 	.word	0x48400000

1004cf20 <LL_RCC_LSCO_SetSource>:
{
1004cf20:	b580      	push	{r7, lr}
1004cf22:	b082      	sub	sp, #8
1004cf24:	af00      	add	r7, sp, #0
1004cf26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
1004cf28:	4b06      	ldr	r3, [pc, #24]	@ (1004cf44 <LL_RCC_LSCO_SetSource+0x24>)
1004cf2a:	689b      	ldr	r3, [r3, #8]
1004cf2c:	4a06      	ldr	r2, [pc, #24]	@ (1004cf48 <LL_RCC_LSCO_SetSource+0x28>)
1004cf2e:	4013      	ands	r3, r2
1004cf30:	0019      	movs	r1, r3
1004cf32:	4b04      	ldr	r3, [pc, #16]	@ (1004cf44 <LL_RCC_LSCO_SetSource+0x24>)
1004cf34:	687a      	ldr	r2, [r7, #4]
1004cf36:	430a      	orrs	r2, r1
1004cf38:	609a      	str	r2, [r3, #8]
}
1004cf3a:	46c0      	nop			@ (mov r8, r8)
1004cf3c:	46bd      	mov	sp, r7
1004cf3e:	b002      	add	sp, #8
1004cf40:	bd80      	pop	{r7, pc}
1004cf42:	46c0      	nop			@ (mov r8, r8)
1004cf44:	48400000 	.word	0x48400000
1004cf48:	fffe7fff 	.word	0xfffe7fff

1004cf4c <LL_RCC_LSCO_GetSource>:
{
1004cf4c:	b580      	push	{r7, lr}
1004cf4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_CLKSLOWSEL));
1004cf50:	4b03      	ldr	r3, [pc, #12]	@ (1004cf60 <LL_RCC_LSCO_GetSource+0x14>)
1004cf52:	689a      	ldr	r2, [r3, #8]
1004cf54:	23c0      	movs	r3, #192	@ 0xc0
1004cf56:	025b      	lsls	r3, r3, #9
1004cf58:	4013      	ands	r3, r2
}
1004cf5a:	0018      	movs	r0, r3
1004cf5c:	46bd      	mov	sp, r7
1004cf5e:	bd80      	pop	{r7, pc}
1004cf60:	48400000 	.word	0x48400000

1004cf64 <LL_RCC_SetRFClock>:
{
1004cf64:	b580      	push	{r7, lr}
1004cf66:	b082      	sub	sp, #8
1004cf68:	af00      	add	r7, sp, #0
1004cf6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
1004cf6c:	4b06      	ldr	r3, [pc, #24]	@ (1004cf88 <LL_RCC_SetRFClock+0x24>)
1004cf6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004cf70:	2204      	movs	r2, #4
1004cf72:	4393      	bics	r3, r2
1004cf74:	0019      	movs	r1, r3
1004cf76:	4b04      	ldr	r3, [pc, #16]	@ (1004cf88 <LL_RCC_SetRFClock+0x24>)
1004cf78:	687a      	ldr	r2, [r7, #4]
1004cf7a:	430a      	orrs	r2, r1
1004cf7c:	661a      	str	r2, [r3, #96]	@ 0x60
}
1004cf7e:	46c0      	nop			@ (mov r8, r8)
1004cf80:	46bd      	mov	sp, r7
1004cf82:	b002      	add	sp, #8
1004cf84:	bd80      	pop	{r7, pc}
1004cf86:	46c0      	nop			@ (mov r8, r8)
1004cf88:	48400000 	.word	0x48400000

1004cf8c <LL_RCC_GetRFClock>:
{
1004cf8c:	b580      	push	{r7, lr}
1004cf8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV));
1004cf90:	4b03      	ldr	r3, [pc, #12]	@ (1004cfa0 <LL_RCC_GetRFClock+0x14>)
1004cf92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004cf94:	2204      	movs	r2, #4
1004cf96:	4013      	ands	r3, r2
}
1004cf98:	0018      	movs	r0, r3
1004cf9a:	46bd      	mov	sp, r7
1004cf9c:	bd80      	pop	{r7, pc}
1004cf9e:	46c0      	nop			@ (mov r8, r8)
1004cfa0:	48400000 	.word	0x48400000

1004cfa4 <LL_RCC_SetSMPSPrescaler>:
{
1004cfa4:	b580      	push	{r7, lr}
1004cfa6:	b082      	sub	sp, #8
1004cfa8:	af00      	add	r7, sp, #0
1004cfaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
1004cfac:	4b06      	ldr	r3, [pc, #24]	@ (1004cfc8 <LL_RCC_SetSMPSPrescaler+0x24>)
1004cfae:	689b      	ldr	r3, [r3, #8]
1004cfb0:	4a06      	ldr	r2, [pc, #24]	@ (1004cfcc <LL_RCC_SetSMPSPrescaler+0x28>)
1004cfb2:	4013      	ands	r3, r2
1004cfb4:	0019      	movs	r1, r3
1004cfb6:	4b04      	ldr	r3, [pc, #16]	@ (1004cfc8 <LL_RCC_SetSMPSPrescaler+0x24>)
1004cfb8:	687a      	ldr	r2, [r7, #4]
1004cfba:	430a      	orrs	r2, r1
1004cfbc:	609a      	str	r2, [r3, #8]
}
1004cfbe:	46c0      	nop			@ (mov r8, r8)
1004cfc0:	46bd      	mov	sp, r7
1004cfc2:	b002      	add	sp, #8
1004cfc4:	bd80      	pop	{r7, pc}
1004cfc6:	46c0      	nop			@ (mov r8, r8)
1004cfc8:	48400000 	.word	0x48400000
1004cfcc:	ffffefff 	.word	0xffffefff

1004cfd0 <LL_RCC_GetSMPSPrescaler>:
{
1004cfd0:	b580      	push	{r7, lr}
1004cfd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SMPSDIV));
1004cfd4:	4b03      	ldr	r3, [pc, #12]	@ (1004cfe4 <LL_RCC_GetSMPSPrescaler+0x14>)
1004cfd6:	689a      	ldr	r2, [r3, #8]
1004cfd8:	2380      	movs	r3, #128	@ 0x80
1004cfda:	015b      	lsls	r3, r3, #5
1004cfdc:	4013      	ands	r3, r2
}
1004cfde:	0018      	movs	r0, r3
1004cfe0:	46bd      	mov	sp, r7
1004cfe2:	bd80      	pop	{r7, pc}
1004cfe4:	48400000 	.word	0x48400000

1004cfe8 <LL_RCC_SetLPUARTClockSource>:
{
1004cfe8:	b580      	push	{r7, lr}
1004cfea:	b082      	sub	sp, #8
1004cfec:	af00      	add	r7, sp, #0
1004cfee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_LPUCLKSEL, Source);
1004cff0:	4b06      	ldr	r3, [pc, #24]	@ (1004d00c <LL_RCC_SetLPUARTClockSource+0x24>)
1004cff2:	689b      	ldr	r3, [r3, #8]
1004cff4:	4a06      	ldr	r2, [pc, #24]	@ (1004d010 <LL_RCC_SetLPUARTClockSource+0x28>)
1004cff6:	4013      	ands	r3, r2
1004cff8:	0019      	movs	r1, r3
1004cffa:	4b04      	ldr	r3, [pc, #16]	@ (1004d00c <LL_RCC_SetLPUARTClockSource+0x24>)
1004cffc:	687a      	ldr	r2, [r7, #4]
1004cffe:	430a      	orrs	r2, r1
1004d000:	609a      	str	r2, [r3, #8]
}
1004d002:	46c0      	nop			@ (mov r8, r8)
1004d004:	46bd      	mov	sp, r7
1004d006:	b002      	add	sp, #8
1004d008:	bd80      	pop	{r7, pc}
1004d00a:	46c0      	nop			@ (mov r8, r8)
1004d00c:	48400000 	.word	0x48400000
1004d010:	ffffdfff 	.word	0xffffdfff

1004d014 <LL_RCC_GetLPUARTClockSource>:
{
1004d014:	b580      	push	{r7, lr}
1004d016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
1004d018:	4b03      	ldr	r3, [pc, #12]	@ (1004d028 <LL_RCC_GetLPUARTClockSource+0x14>)
1004d01a:	689a      	ldr	r2, [r3, #8]
1004d01c:	2380      	movs	r3, #128	@ 0x80
1004d01e:	019b      	lsls	r3, r3, #6
1004d020:	4013      	ands	r3, r2
}
1004d022:	0018      	movs	r0, r3
1004d024:	46bd      	mov	sp, r7
1004d026:	bd80      	pop	{r7, pc}
1004d028:	48400000 	.word	0x48400000

1004d02c <LL_RCC_SetSPI3I2SClockSource>:
{
1004d02c:	b580      	push	{r7, lr}
1004d02e:	b082      	sub	sp, #8
1004d030:	af00      	add	r7, sp, #0
1004d032:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
1004d034:	4b06      	ldr	r3, [pc, #24]	@ (1004d050 <LL_RCC_SetSPI3I2SClockSource+0x24>)
1004d036:	689b      	ldr	r3, [r3, #8]
1004d038:	4a06      	ldr	r2, [pc, #24]	@ (1004d054 <LL_RCC_SetSPI3I2SClockSource+0x28>)
1004d03a:	4013      	ands	r3, r2
1004d03c:	0019      	movs	r1, r3
1004d03e:	4b04      	ldr	r3, [pc, #16]	@ (1004d050 <LL_RCC_SetSPI3I2SClockSource+0x24>)
1004d040:	687a      	ldr	r2, [r7, #4]
1004d042:	430a      	orrs	r2, r1
1004d044:	609a      	str	r2, [r3, #8]
}
1004d046:	46c0      	nop			@ (mov r8, r8)
1004d048:	46bd      	mov	sp, r7
1004d04a:	b002      	add	sp, #8
1004d04c:	bd80      	pop	{r7, pc}
1004d04e:	46c0      	nop			@ (mov r8, r8)
1004d050:	48400000 	.word	0x48400000
1004d054:	ff3fffff 	.word	0xff3fffff

1004d058 <LL_RCC_GetSPI3I2SClockSource>:
{
1004d058:	b580      	push	{r7, lr}
1004d05a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL));
1004d05c:	4b03      	ldr	r3, [pc, #12]	@ (1004d06c <LL_RCC_GetSPI3I2SClockSource+0x14>)
1004d05e:	689a      	ldr	r2, [r3, #8]
1004d060:	23c0      	movs	r3, #192	@ 0xc0
1004d062:	041b      	lsls	r3, r3, #16
1004d064:	4013      	ands	r3, r2
}
1004d066:	0018      	movs	r0, r3
1004d068:	46bd      	mov	sp, r7
1004d06a:	bd80      	pop	{r7, pc}
1004d06c:	48400000 	.word	0x48400000

1004d070 <LL_RCC_RC64MPLL_IsReady>:
{
1004d070:	b580      	push	{r7, lr}
1004d072:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
1004d074:	4b07      	ldr	r3, [pc, #28]	@ (1004d094 <LL_RCC_RC64MPLL_IsReady+0x24>)
1004d076:	681a      	ldr	r2, [r3, #0]
1004d078:	2380      	movs	r3, #128	@ 0x80
1004d07a:	01db      	lsls	r3, r3, #7
1004d07c:	401a      	ands	r2, r3
1004d07e:	2380      	movs	r3, #128	@ 0x80
1004d080:	01db      	lsls	r3, r3, #7
1004d082:	429a      	cmp	r2, r3
1004d084:	d101      	bne.n	1004d08a <LL_RCC_RC64MPLL_IsReady+0x1a>
1004d086:	2301      	movs	r3, #1
1004d088:	e000      	b.n	1004d08c <LL_RCC_RC64MPLL_IsReady+0x1c>
1004d08a:	2300      	movs	r3, #0
}
1004d08c:	0018      	movs	r0, r3
1004d08e:	46bd      	mov	sp, r7
1004d090:	bd80      	pop	{r7, pc}
1004d092:	46c0      	nop			@ (mov r8, r8)
1004d094:	48400000 	.word	0x48400000

1004d098 <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
1004d098:	b580      	push	{r7, lr}
1004d09a:	b082      	sub	sp, #8
1004d09c:	af00      	add	r7, sp, #0
1004d09e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
1004d0a0:	687b      	ldr	r3, [r7, #4]
1004d0a2:	681b      	ldr	r3, [r3, #0]
1004d0a4:	2201      	movs	r2, #1
1004d0a6:	4013      	ands	r3, r2
1004d0a8:	d004      	beq.n	1004d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
1004d0aa:	687b      	ldr	r3, [r7, #4]
1004d0ac:	691b      	ldr	r3, [r3, #16]
1004d0ae:	0018      	movs	r0, r3
1004d0b0:	f7ff ff58 	bl	1004cf64 <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
1004d0b4:	687b      	ldr	r3, [r7, #4]
1004d0b6:	681b      	ldr	r3, [r3, #0]
1004d0b8:	2202      	movs	r2, #2
1004d0ba:	4013      	ands	r3, r2
1004d0bc:	d004      	beq.n	1004d0c8 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
1004d0be:	687b      	ldr	r3, [r7, #4]
1004d0c0:	695b      	ldr	r3, [r3, #20]
1004d0c2:	0018      	movs	r0, r3
1004d0c4:	f7ff ff6e 	bl	1004cfa4 <LL_RCC_SetSMPSPrescaler>
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
1004d0c8:	687b      	ldr	r3, [r7, #4]
1004d0ca:	681b      	ldr	r3, [r3, #0]
1004d0cc:	2208      	movs	r2, #8
1004d0ce:	4013      	ands	r3, r2
1004d0d0:	d004      	beq.n	1004d0dc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
1004d0d2:	687b      	ldr	r3, [r7, #4]
1004d0d4:	685b      	ldr	r3, [r3, #4]
1004d0d6:	0018      	movs	r0, r3
1004d0d8:	f7ff ffa8 	bl	1004d02c <LL_RCC_SetSPI3I2SClockSource>
  }
#endif

#if defined(RCC_CFGR_LPUCLKSEL)
  /*-------------------------- LPUART1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1))
1004d0dc:	687b      	ldr	r3, [r7, #4]
1004d0de:	681b      	ldr	r3, [r3, #0]
1004d0e0:	2210      	movs	r2, #16
1004d0e2:	4013      	ands	r3, r2
1004d0e4:	d004      	beq.n	1004d0f0 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_LPUART1_CLOCK_SOURCE(PeriphClkInit->LPUART1ClockSelection));
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
1004d0e6:	687b      	ldr	r3, [r7, #4]
1004d0e8:	68db      	ldr	r3, [r3, #12]
1004d0ea:	0018      	movs	r0, r3
1004d0ec:	f7ff ff7c 	bl	1004cfe8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
1004d0f0:	687b      	ldr	r3, [r7, #4]
1004d0f2:	689b      	ldr	r3, [r3, #8]
1004d0f4:	2220      	movs	r2, #32
1004d0f6:	4013      	ands	r3, r2
1004d0f8:	d004      	beq.n	1004d104 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
1004d0fa:	687b      	ldr	r3, [r7, #4]
1004d0fc:	689b      	ldr	r3, [r3, #8]
1004d0fe:	0018      	movs	r0, r3
1004d100:	f7ff ff0e 	bl	1004cf20 <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
1004d104:	2300      	movs	r3, #0
}
1004d106:	0018      	movs	r0, r3
1004d108:	46bd      	mov	sp, r7
1004d10a:	b002      	add	sp, #8
1004d10c:	bd80      	pop	{r7, pc}
	...

1004d110 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RTC_WDG_BLEWKUP   RTC, WDG and BLEWKUP peripheral clock
  * @retval Frequency in Hz
  * @note   (*) Peripherals are not available on all devices
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
1004d110:	b580      	push	{r7, lr}
1004d112:	b084      	sub	sp, #16
1004d114:	af00      	add	r7, sp, #0
1004d116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  /* No if clausule is covered */
  frequency = 0;
1004d118:	2300      	movs	r3, #0
1004d11a:	60fb      	str	r3, [r7, #12]

  switch (PeriphClk)
1004d11c:	687b      	ldr	r3, [r7, #4]
1004d11e:	2b20      	cmp	r3, #32
1004d120:	d900      	bls.n	1004d124 <HAL_RCCEx_GetPeriphCLKFreq+0x14>
1004d122:	e07b      	b.n	1004d21c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
1004d124:	687b      	ldr	r3, [r7, #4]
1004d126:	009a      	lsls	r2, r3, #2
1004d128:	4b40      	ldr	r3, [pc, #256]	@ (1004d22c <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
1004d12a:	18d3      	adds	r3, r2, r3
1004d12c:	681b      	ldr	r3, [r3, #0]
1004d12e:	469f      	mov	pc, r3
  {
    case RCC_PERIPHCLK_RF :
      switch (__HAL_RCC_RF_CLK_GET_CONFIG())
1004d130:	f7ff ff2c 	bl	1004cf8c <LL_RCC_GetRFClock>
1004d134:	1e03      	subs	r3, r0, #0
1004d136:	d002      	beq.n	1004d13e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
1004d138:	2b04      	cmp	r3, #4
1004d13a:	d003      	beq.n	1004d144 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        case RCC_RF_CLK_16M:
          frequency = HSE_VALUE / 2;
          break;
      }

      break;
1004d13c:	e071      	b.n	1004d222 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE;
1004d13e:	4b3c      	ldr	r3, [pc, #240]	@ (1004d230 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
1004d140:	60fb      	str	r3, [r7, #12]
          break;
1004d142:	e002      	b.n	1004d14a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          frequency = HSE_VALUE / 2;
1004d144:	4b3b      	ldr	r3, [pc, #236]	@ (1004d234 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004d146:	60fb      	str	r3, [r7, #12]
          break;
1004d148:	46c0      	nop			@ (mov r8, r8)
      break;
1004d14a:	e06a      	b.n	1004d222 <HAL_RCCEx_GetPeriphCLKFreq+0x112>

    case RCC_PERIPHCLK_SMPS :
      switch (__HAL_RCC_GET_SMPS_DIV())
1004d14c:	f7ff ff40 	bl	1004cfd0 <LL_RCC_GetSMPSPrescaler>
1004d150:	1e03      	subs	r3, r0, #0
1004d152:	d004      	beq.n	1004d15e <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
1004d154:	2280      	movs	r2, #128	@ 0x80
1004d156:	0152      	lsls	r2, r2, #5
1004d158:	4293      	cmp	r3, r2
1004d15a:	d003      	beq.n	1004d164 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          break;
        case RCC_SMPSCLK_DIV4:
          frequency = HSE_VALUE / 8;
          break;
      }
      break;
1004d15c:	e061      	b.n	1004d222 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE / 4;
1004d15e:	4b36      	ldr	r3, [pc, #216]	@ (1004d238 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
1004d160:	60fb      	str	r3, [r7, #12]
          break;
1004d162:	e002      	b.n	1004d16a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSE_VALUE / 8;
1004d164:	4b35      	ldr	r3, [pc, #212]	@ (1004d23c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
1004d166:	60fb      	str	r3, [r7, #12]
          break;
1004d168:	46c0      	nop			@ (mov r8, r8)
      break;
1004d16a:	e05a      	b.n	1004d222 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      }
      break;
#endif

    case RCC_PERIPHCLK_SPI3_I2S :
      if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_DIRECT_HSE)
1004d16c:	f7ff fec8 	bl	1004cf00 <LL_RCC_DIRECT_HSE_IsEnabled>
1004d170:	1e03      	subs	r3, r0, #0
1004d172:	d005      	beq.n	1004d180 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      {
        if (__HAL_RCC_GET_HSE_READYFLAG() == 0)
1004d174:	f7ff feb0 	bl	1004ced8 <LL_RCC_HSE_IsReady>
1004d178:	1e03      	subs	r3, r0, #0
1004d17a:	d107      	bne.n	1004d18c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
1004d17c:	2300      	movs	r3, #0
1004d17e:	e051      	b.n	1004d224 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      else
      {
        if (__HAL_RCC_RC64MPLL_READYFLAG() == 0)
1004d180:	f7ff ff76 	bl	1004d070 <LL_RCC_RC64MPLL_IsReady>
1004d184:	1e03      	subs	r3, r0, #0
1004d186:	d101      	bne.n	1004d18c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
1004d188:	2300      	movs	r3, #0
1004d18a:	e04b      	b.n	1004d224 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      spiFreqValue = __HAL_RCC_GET_SPI3I2S_CLK_CONFIG();
1004d18c:	f7ff ff64 	bl	1004d058 <LL_RCC_GetSPI3I2SClockSource>
1004d190:	0003      	movs	r3, r0
1004d192:	60bb      	str	r3, [r7, #8]
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_16M)
1004d194:	68bb      	ldr	r3, [r7, #8]
1004d196:	2b00      	cmp	r3, #0
1004d198:	d101      	bne.n	1004d19e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
      {
        frequency = HSE_VALUE / 2;
1004d19a:	4b26      	ldr	r3, [pc, #152]	@ (1004d234 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004d19c:	60fb      	str	r3, [r7, #12]
      }

      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_32M)
1004d19e:	68ba      	ldr	r2, [r7, #8]
1004d1a0:	2380      	movs	r3, #128	@ 0x80
1004d1a2:	03db      	lsls	r3, r3, #15
1004d1a4:	429a      	cmp	r2, r3
1004d1a6:	d101      	bne.n	1004d1ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      {
        frequency = HSE_VALUE;
1004d1a8:	4b21      	ldr	r3, [pc, #132]	@ (1004d230 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
1004d1aa:	60fb      	str	r3, [r7, #12]
      }
#if defined(RCC_SPI3I2S_CLKSOURCE_64M)
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_64M)
1004d1ac:	68ba      	ldr	r2, [r7, #8]
1004d1ae:	2380      	movs	r3, #128	@ 0x80
1004d1b0:	041b      	lsls	r3, r3, #16
1004d1b2:	429a      	cmp	r2, r3
1004d1b4:	d134      	bne.n	1004d220 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
      {
        frequency = HSE_VALUE * 2;
1004d1b6:	4b22      	ldr	r3, [pc, #136]	@ (1004d240 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
1004d1b8:	60fb      	str	r3, [r7, #12]
      }
#endif
      break;
1004d1ba:	e031      	b.n	1004d220 <HAL_RCCEx_GetPeriphCLKFreq+0x110>

#if defined(RCC_CFGR_LPUCLKSEL)
    case RCC_PERIPHCLK_LPUART1 :
      switch (__HAL_RCC_GET_LPUART1_CLK_CONFIG())
1004d1bc:	f7ff ff2a 	bl	1004d014 <LL_RCC_GetLPUARTClockSource>
1004d1c0:	0002      	movs	r2, r0
1004d1c2:	2380      	movs	r3, #128	@ 0x80
1004d1c4:	019b      	lsls	r3, r3, #6
1004d1c6:	429a      	cmp	r2, r3
1004d1c8:	d103      	bne.n	1004d1d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      {
        case RCC_LPUART1_CLKSOURCE_LSE:
          frequency = LSE_VALUE;
1004d1ca:	2380      	movs	r3, #128	@ 0x80
1004d1cc:	021b      	lsls	r3, r3, #8
1004d1ce:	60fb      	str	r3, [r7, #12]
          break;
1004d1d0:	e002      	b.n	1004d1d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
        case RCC_LPUART1_CLKSOURCE_16M:
        default:
          frequency = HSE_VALUE / 2;
1004d1d2:	4b18      	ldr	r3, [pc, #96]	@ (1004d234 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004d1d4:	60fb      	str	r3, [r7, #12]
          break;
1004d1d6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
1004d1d8:	e023      	b.n	1004d222 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
#endif /* RCC_CFGR_LPUCLKSEL */

    case RCC_PERIPHCLK_RTC_WDG_BLEWKUP :
      switch (LL_RCC_LSCO_GetSource())
1004d1da:	f7ff feb7 	bl	1004cf4c <LL_RCC_LSCO_GetSource>
1004d1de:	0003      	movs	r3, r0
1004d1e0:	22c0      	movs	r2, #192	@ 0xc0
1004d1e2:	0252      	lsls	r2, r2, #9
1004d1e4:	4293      	cmp	r3, r2
1004d1e6:	d014      	beq.n	1004d212 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
1004d1e8:	22c0      	movs	r2, #192	@ 0xc0
1004d1ea:	0252      	lsls	r2, r2, #9
1004d1ec:	4293      	cmp	r3, r2
1004d1ee:	d813      	bhi.n	1004d218 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
1004d1f0:	2280      	movs	r2, #128	@ 0x80
1004d1f2:	0212      	lsls	r2, r2, #8
1004d1f4:	4293      	cmp	r3, r2
1004d1f6:	d004      	beq.n	1004d202 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
1004d1f8:	2280      	movs	r2, #128	@ 0x80
1004d1fa:	0252      	lsls	r2, r2, #9
1004d1fc:	4293      	cmp	r3, r2
1004d1fe:	d004      	beq.n	1004d20a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
          break;
        case LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048:
          frequency = HSE_VALUE >> 10;
          break;
        default :
          break;
1004d200:	e00a      	b.n	1004d218 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          frequency = LSE_VALUE;
1004d202:	2380      	movs	r3, #128	@ 0x80
1004d204:	021b      	lsls	r3, r3, #8
1004d206:	60fb      	str	r3, [r7, #12]
          break;
1004d208:	e007      	b.n	1004d21a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = LSI_VALUE;
1004d20a:	23fa      	movs	r3, #250	@ 0xfa
1004d20c:	01db      	lsls	r3, r3, #7
1004d20e:	60fb      	str	r3, [r7, #12]
          break;
1004d210:	e003      	b.n	1004d21a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = HSE_VALUE >> 10;
1004d212:	4b0c      	ldr	r3, [pc, #48]	@ (1004d244 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
1004d214:	60fb      	str	r3, [r7, #12]
          break;
1004d216:	e000      	b.n	1004d21a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          break;
1004d218:	46c0      	nop			@ (mov r8, r8)
      }
      break;
1004d21a:	e002      	b.n	1004d222 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    default :
      break;
1004d21c:	46c0      	nop			@ (mov r8, r8)
1004d21e:	e000      	b.n	1004d222 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      break;
1004d220:	46c0      	nop			@ (mov r8, r8)
  }

  return (frequency);
1004d222:	68fb      	ldr	r3, [r7, #12]
}
1004d224:	0018      	movs	r0, r3
1004d226:	46bd      	mov	sp, r7
1004d228:	b004      	add	sp, #16
1004d22a:	bd80      	pop	{r7, pc}
1004d22c:	100692a4 	.word	0x100692a4
1004d230:	01e84800 	.word	0x01e84800
1004d234:	00f42400 	.word	0x00f42400
1004d238:	007a1200 	.word	0x007a1200
1004d23c:	003d0900 	.word	0x003d0900
1004d240:	03d09000 	.word	0x03d09000
1004d244:	00007a12 	.word	0x00007a12

1004d248 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
1004d248:	b580      	push	{r7, lr}
1004d24a:	b082      	sub	sp, #8
1004d24c:	af00      	add	r7, sp, #0
1004d24e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
1004d250:	687b      	ldr	r3, [r7, #4]
1004d252:	2b00      	cmp	r3, #0
1004d254:	d101      	bne.n	1004d25a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
1004d256:	2301      	movs	r3, #1
1004d258:	e02d      	b.n	1004d2b6 <HAL_RNG_Init+0x6e>
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
#if defined (RNG_CR_TST_CLK)
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
#endif /* RNG_CR_TST_CLK */

  if (hrng->State == HAL_RNG_STATE_RESET)
1004d25a:	687b      	ldr	r3, [r7, #4]
1004d25c:	7a5b      	ldrb	r3, [r3, #9]
1004d25e:	b2db      	uxtb	r3, r3
1004d260:	2b00      	cmp	r3, #0
1004d262:	d106      	bne.n	1004d272 <HAL_RNG_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
1004d264:	687b      	ldr	r3, [r7, #4]
1004d266:	2200      	movs	r2, #0
1004d268:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
1004d26a:	687b      	ldr	r3, [r7, #4]
1004d26c:	0018      	movs	r0, r3
1004d26e:	f7f9 febf 	bl	10046ff0 <HAL_RNG_MspInit>
  }

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
1004d272:	687b      	ldr	r3, [r7, #4]
1004d274:	2202      	movs	r2, #2
1004d276:	725a      	strb	r2, [r3, #9]

  /* Reset the CR */
  hrng->Instance->CR = 0U;
1004d278:	687b      	ldr	r3, [r7, #4]
1004d27a:	681b      	ldr	r3, [r3, #0]
1004d27c:	2200      	movs	r2, #0
1004d27e:	601a      	str	r2, [r3, #0]

#if defined (RNG_CR_TST_CLK)
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_TST_CLK, hrng->Init.ClockErrorDetection);
1004d280:	687b      	ldr	r3, [r7, #4]
1004d282:	681b      	ldr	r3, [r3, #0]
1004d284:	681b      	ldr	r3, [r3, #0]
1004d286:	2208      	movs	r2, #8
1004d288:	4393      	bics	r3, r2
1004d28a:	0019      	movs	r1, r3
1004d28c:	687b      	ldr	r3, [r7, #4]
1004d28e:	685a      	ldr	r2, [r3, #4]
1004d290:	687b      	ldr	r3, [r7, #4]
1004d292:	681b      	ldr	r3, [r3, #0]
1004d294:	430a      	orrs	r2, r1
1004d296:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_TST_CLK */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
1004d298:	687b      	ldr	r3, [r7, #4]
1004d29a:	681b      	ldr	r3, [r3, #0]
1004d29c:	681a      	ldr	r2, [r3, #0]
1004d29e:	687b      	ldr	r3, [r7, #4]
1004d2a0:	681b      	ldr	r3, [r3, #0]
1004d2a2:	2104      	movs	r1, #4
1004d2a4:	438a      	bics	r2, r1
1004d2a6:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
1004d2a8:	687b      	ldr	r3, [r7, #4]
1004d2aa:	2201      	movs	r2, #1
1004d2ac:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
1004d2ae:	687b      	ldr	r3, [r7, #4]
1004d2b0:	2200      	movs	r2, #0
1004d2b2:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
1004d2b4:	2300      	movs	r3, #0
}
1004d2b6:	0018      	movs	r0, r3
1004d2b8:	46bd      	mov	sp, r7
1004d2ba:	b002      	add	sp, #8
1004d2bc:	bd80      	pop	{r7, pc}

1004d2be <HAL_RNG_GenerateRandomNumber>:
  * @param  random_number random 16/32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random_number)
{
1004d2be:	b580      	push	{r7, lr}
1004d2c0:	b084      	sub	sp, #16
1004d2c2:	af00      	add	r7, sp, #0
1004d2c4:	6078      	str	r0, [r7, #4]
1004d2c6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
1004d2c8:	230f      	movs	r3, #15
1004d2ca:	18fb      	adds	r3, r7, r3
1004d2cc:	2200      	movs	r2, #0
1004d2ce:	701a      	strb	r2, [r3, #0]

  /* Process Locked */
  __HAL_LOCK(hrng);
1004d2d0:	687b      	ldr	r3, [r7, #4]
1004d2d2:	7a1b      	ldrb	r3, [r3, #8]
1004d2d4:	2b01      	cmp	r3, #1
1004d2d6:	d101      	bne.n	1004d2dc <HAL_RNG_GenerateRandomNumber+0x1e>
1004d2d8:	2302      	movs	r3, #2
1004d2da:	e049      	b.n	1004d370 <HAL_RNG_GenerateRandomNumber+0xb2>
1004d2dc:	687b      	ldr	r3, [r7, #4]
1004d2de:	2201      	movs	r2, #1
1004d2e0:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
1004d2e2:	687b      	ldr	r3, [r7, #4]
1004d2e4:	7a5b      	ldrb	r3, [r3, #9]
1004d2e6:	b2db      	uxtb	r3, r3
1004d2e8:	2b01      	cmp	r3, #1
1004d2ea:	d134      	bne.n	1004d356 <HAL_RNG_GenerateRandomNumber+0x98>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
1004d2ec:	687b      	ldr	r3, [r7, #4]
1004d2ee:	2202      	movs	r2, #2
1004d2f0:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
1004d2f2:	f7fa facd 	bl	10047890 <HAL_GetTick>
1004d2f6:	0003      	movs	r3, r0
1004d2f8:	60bb      	str	r3, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
1004d2fa:	e018      	b.n	1004d32e <HAL_RNG_GenerateRandomNumber+0x70>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
1004d2fc:	f7fa fac8 	bl	10047890 <HAL_GetTick>
1004d300:	0002      	movs	r2, r0
1004d302:	68bb      	ldr	r3, [r7, #8]
1004d304:	1ad3      	subs	r3, r2, r3
1004d306:	2b02      	cmp	r3, #2
1004d308:	d911      	bls.n	1004d32e <HAL_RNG_GenerateRandomNumber+0x70>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
1004d30a:	687b      	ldr	r3, [r7, #4]
1004d30c:	681b      	ldr	r3, [r3, #0]
1004d30e:	685b      	ldr	r3, [r3, #4]
1004d310:	2201      	movs	r2, #1
1004d312:	4013      	ands	r3, r2
1004d314:	2b01      	cmp	r3, #1
1004d316:	d00a      	beq.n	1004d32e <HAL_RNG_GenerateRandomNumber+0x70>
        {
          hrng->State = HAL_RNG_STATE_READY;
1004d318:	687b      	ldr	r3, [r7, #4]
1004d31a:	2201      	movs	r2, #1
1004d31c:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
1004d31e:	687b      	ldr	r3, [r7, #4]
1004d320:	2202      	movs	r2, #2
1004d322:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
1004d324:	687b      	ldr	r3, [r7, #4]
1004d326:	2200      	movs	r2, #0
1004d328:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
1004d32a:	2301      	movs	r3, #1
1004d32c:	e020      	b.n	1004d370 <HAL_RNG_GenerateRandomNumber+0xb2>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
1004d32e:	687b      	ldr	r3, [r7, #4]
1004d330:	681b      	ldr	r3, [r3, #0]
1004d332:	685b      	ldr	r3, [r3, #4]
1004d334:	2201      	movs	r2, #1
1004d336:	4013      	ands	r3, r2
1004d338:	2b01      	cmp	r3, #1
1004d33a:	d1df      	bne.n	1004d2fc <HAL_RNG_GenerateRandomNumber+0x3e>
        }
      }
    }

    /* Get a 16/32bit Random number */
    hrng->RandomNumber = hrng->Instance->VAL;
1004d33c:	687b      	ldr	r3, [r7, #4]
1004d33e:	681b      	ldr	r3, [r3, #0]
1004d340:	689a      	ldr	r2, [r3, #8]
1004d342:	687b      	ldr	r3, [r7, #4]
1004d344:	611a      	str	r2, [r3, #16]
    *random_number = hrng->RandomNumber;
1004d346:	687b      	ldr	r3, [r7, #4]
1004d348:	691a      	ldr	r2, [r3, #16]
1004d34a:	683b      	ldr	r3, [r7, #0]
1004d34c:	601a      	str	r2, [r3, #0]
    hrng->State = HAL_RNG_STATE_READY;
1004d34e:	687b      	ldr	r3, [r7, #4]
1004d350:	2201      	movs	r2, #1
1004d352:	725a      	strb	r2, [r3, #9]
1004d354:	e006      	b.n	1004d364 <HAL_RNG_GenerateRandomNumber+0xa6>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
1004d356:	687b      	ldr	r3, [r7, #4]
1004d358:	2204      	movs	r2, #4
1004d35a:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
1004d35c:	230f      	movs	r3, #15
1004d35e:	18fb      	adds	r3, r7, r3
1004d360:	2201      	movs	r2, #1
1004d362:	701a      	strb	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
1004d364:	687b      	ldr	r3, [r7, #4]
1004d366:	2200      	movs	r2, #0
1004d368:	721a      	strb	r2, [r3, #8]

  return status;
1004d36a:	230f      	movs	r3, #15
1004d36c:	18fb      	adds	r3, r7, r3
1004d36e:	781b      	ldrb	r3, [r3, #0]
}
1004d370:	0018      	movs	r0, r3
1004d372:	46bd      	mov	sp, r7
1004d374:	b004      	add	sp, #16
1004d376:	bd80      	pop	{r7, pc}

1004d378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
1004d378:	b580      	push	{r7, lr}
1004d37a:	b082      	sub	sp, #8
1004d37c:	af00      	add	r7, sp, #0
1004d37e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
1004d380:	687b      	ldr	r3, [r7, #4]
1004d382:	2b00      	cmp	r3, #0
1004d384:	d101      	bne.n	1004d38a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
1004d386:	2301      	movs	r3, #1
1004d388:	e036      	b.n	1004d3f8 <HAL_TIM_Base_Init+0x80>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
1004d38a:	687b      	ldr	r3, [r7, #4]
1004d38c:	2235      	movs	r2, #53	@ 0x35
1004d38e:	5c9b      	ldrb	r3, [r3, r2]
1004d390:	b2db      	uxtb	r3, r3
1004d392:	2b00      	cmp	r3, #0
1004d394:	d107      	bne.n	1004d3a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
1004d396:	687b      	ldr	r3, [r7, #4]
1004d398:	2234      	movs	r2, #52	@ 0x34
1004d39a:	2100      	movs	r1, #0
1004d39c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
1004d39e:	687b      	ldr	r3, [r7, #4]
1004d3a0:	0018      	movs	r0, r3
1004d3a2:	f7f9 fe39 	bl	10047018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
1004d3a6:	687b      	ldr	r3, [r7, #4]
1004d3a8:	2235      	movs	r2, #53	@ 0x35
1004d3aa:	2102      	movs	r1, #2
1004d3ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
1004d3ae:	687b      	ldr	r3, [r7, #4]
1004d3b0:	681a      	ldr	r2, [r3, #0]
1004d3b2:	687b      	ldr	r3, [r7, #4]
1004d3b4:	3304      	adds	r3, #4
1004d3b6:	0019      	movs	r1, r3
1004d3b8:	0010      	movs	r0, r2
1004d3ba:	f000 fa39 	bl	1004d830 <TIM_Base_SetConfig>

#if defined(TIM_DMA_SUPPORT)
  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
1004d3be:	687b      	ldr	r3, [r7, #4]
1004d3c0:	223b      	movs	r2, #59	@ 0x3b
1004d3c2:	2101      	movs	r1, #1
1004d3c4:	5499      	strb	r1, [r3, r2]
#endif /* TIM_DMA_SUPPORT */

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
1004d3c6:	687b      	ldr	r3, [r7, #4]
1004d3c8:	2236      	movs	r2, #54	@ 0x36
1004d3ca:	2101      	movs	r1, #1
1004d3cc:	5499      	strb	r1, [r3, r2]
1004d3ce:	687b      	ldr	r3, [r7, #4]
1004d3d0:	2237      	movs	r2, #55	@ 0x37
1004d3d2:	2101      	movs	r1, #1
1004d3d4:	5499      	strb	r1, [r3, r2]
1004d3d6:	687b      	ldr	r3, [r7, #4]
1004d3d8:	2238      	movs	r2, #56	@ 0x38
1004d3da:	2101      	movs	r1, #1
1004d3dc:	5499      	strb	r1, [r3, r2]
1004d3de:	687b      	ldr	r3, [r7, #4]
1004d3e0:	2239      	movs	r2, #57	@ 0x39
1004d3e2:	2101      	movs	r1, #1
1004d3e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
1004d3e6:	687b      	ldr	r3, [r7, #4]
1004d3e8:	223a      	movs	r2, #58	@ 0x3a
1004d3ea:	2101      	movs	r1, #1
1004d3ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
1004d3ee:	687b      	ldr	r3, [r7, #4]
1004d3f0:	2235      	movs	r2, #53	@ 0x35
1004d3f2:	2101      	movs	r1, #1
1004d3f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004d3f6:	2300      	movs	r3, #0
}
1004d3f8:	0018      	movs	r0, r3
1004d3fa:	46bd      	mov	sp, r7
1004d3fc:	b002      	add	sp, #8
1004d3fe:	bd80      	pop	{r7, pc}

1004d400 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
1004d400:	b580      	push	{r7, lr}
1004d402:	b084      	sub	sp, #16
1004d404:	af00      	add	r7, sp, #0
1004d406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
1004d408:	687b      	ldr	r3, [r7, #4]
1004d40a:	2235      	movs	r2, #53	@ 0x35
1004d40c:	5c9b      	ldrb	r3, [r3, r2]
1004d40e:	b2db      	uxtb	r3, r3
1004d410:	2b01      	cmp	r3, #1
1004d412:	d001      	beq.n	1004d418 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
1004d414:	2301      	movs	r3, #1
1004d416:	e030      	b.n	1004d47a <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
1004d418:	687b      	ldr	r3, [r7, #4]
1004d41a:	2235      	movs	r2, #53	@ 0x35
1004d41c:	2102      	movs	r1, #2
1004d41e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
1004d420:	687b      	ldr	r3, [r7, #4]
1004d422:	681b      	ldr	r3, [r3, #0]
1004d424:	68da      	ldr	r2, [r3, #12]
1004d426:	687b      	ldr	r3, [r7, #4]
1004d428:	681b      	ldr	r3, [r3, #0]
1004d42a:	2101      	movs	r1, #1
1004d42c:	430a      	orrs	r2, r1
1004d42e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
1004d430:	687b      	ldr	r3, [r7, #4]
1004d432:	681b      	ldr	r3, [r3, #0]
1004d434:	4a13      	ldr	r2, [pc, #76]	@ (1004d484 <HAL_TIM_Base_Start_IT+0x84>)
1004d436:	4293      	cmp	r3, r2
1004d438:	d116      	bne.n	1004d468 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
1004d43a:	687b      	ldr	r3, [r7, #4]
1004d43c:	681b      	ldr	r3, [r3, #0]
1004d43e:	689b      	ldr	r3, [r3, #8]
1004d440:	4a11      	ldr	r2, [pc, #68]	@ (1004d488 <HAL_TIM_Base_Start_IT+0x88>)
1004d442:	4013      	ands	r3, r2
1004d444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
1004d446:	68fb      	ldr	r3, [r7, #12]
1004d448:	2b06      	cmp	r3, #6
1004d44a:	d015      	beq.n	1004d478 <HAL_TIM_Base_Start_IT+0x78>
1004d44c:	68fa      	ldr	r2, [r7, #12]
1004d44e:	2380      	movs	r3, #128	@ 0x80
1004d450:	025b      	lsls	r3, r3, #9
1004d452:	429a      	cmp	r2, r3
1004d454:	d010      	beq.n	1004d478 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
1004d456:	687b      	ldr	r3, [r7, #4]
1004d458:	681b      	ldr	r3, [r3, #0]
1004d45a:	681a      	ldr	r2, [r3, #0]
1004d45c:	687b      	ldr	r3, [r7, #4]
1004d45e:	681b      	ldr	r3, [r3, #0]
1004d460:	2101      	movs	r1, #1
1004d462:	430a      	orrs	r2, r1
1004d464:	601a      	str	r2, [r3, #0]
1004d466:	e007      	b.n	1004d478 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
1004d468:	687b      	ldr	r3, [r7, #4]
1004d46a:	681b      	ldr	r3, [r3, #0]
1004d46c:	681a      	ldr	r2, [r3, #0]
1004d46e:	687b      	ldr	r3, [r7, #4]
1004d470:	681b      	ldr	r3, [r3, #0]
1004d472:	2101      	movs	r1, #1
1004d474:	430a      	orrs	r2, r1
1004d476:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
1004d478:	2300      	movs	r3, #0
}
1004d47a:	0018      	movs	r0, r3
1004d47c:	46bd      	mov	sp, r7
1004d47e:	b004      	add	sp, #16
1004d480:	bd80      	pop	{r7, pc}
1004d482:	46c0      	nop			@ (mov r8, r8)
1004d484:	40002000 	.word	0x40002000
1004d488:	00010007 	.word	0x00010007

1004d48c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
1004d48c:	b580      	push	{r7, lr}
1004d48e:	b084      	sub	sp, #16
1004d490:	af00      	add	r7, sp, #0
1004d492:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
1004d494:	687b      	ldr	r3, [r7, #4]
1004d496:	681b      	ldr	r3, [r3, #0]
1004d498:	68db      	ldr	r3, [r3, #12]
1004d49a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
1004d49c:	687b      	ldr	r3, [r7, #4]
1004d49e:	681b      	ldr	r3, [r3, #0]
1004d4a0:	691b      	ldr	r3, [r3, #16]
1004d4a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
1004d4a4:	68bb      	ldr	r3, [r7, #8]
1004d4a6:	2202      	movs	r2, #2
1004d4a8:	4013      	ands	r3, r2
1004d4aa:	d021      	beq.n	1004d4f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
1004d4ac:	68fb      	ldr	r3, [r7, #12]
1004d4ae:	2202      	movs	r2, #2
1004d4b0:	4013      	ands	r3, r2
1004d4b2:	d01d      	beq.n	1004d4f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
1004d4b4:	687b      	ldr	r3, [r7, #4]
1004d4b6:	681b      	ldr	r3, [r3, #0]
1004d4b8:	2203      	movs	r2, #3
1004d4ba:	4252      	negs	r2, r2
1004d4bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
1004d4be:	687b      	ldr	r3, [r7, #4]
1004d4c0:	2201      	movs	r2, #1
1004d4c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
1004d4c4:	687b      	ldr	r3, [r7, #4]
1004d4c6:	681b      	ldr	r3, [r3, #0]
1004d4c8:	699b      	ldr	r3, [r3, #24]
1004d4ca:	2203      	movs	r2, #3
1004d4cc:	4013      	ands	r3, r2
1004d4ce:	d004      	beq.n	1004d4da <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
1004d4d0:	687b      	ldr	r3, [r7, #4]
1004d4d2:	0018      	movs	r0, r3
1004d4d4:	f000 f994 	bl	1004d800 <HAL_TIM_IC_CaptureCallback>
1004d4d8:	e007      	b.n	1004d4ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
1004d4da:	687b      	ldr	r3, [r7, #4]
1004d4dc:	0018      	movs	r0, r3
1004d4de:	f000 f987 	bl	1004d7f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
1004d4e2:	687b      	ldr	r3, [r7, #4]
1004d4e4:	0018      	movs	r0, r3
1004d4e6:	f000 f993 	bl	1004d810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004d4ea:	687b      	ldr	r3, [r7, #4]
1004d4ec:	2200      	movs	r2, #0
1004d4ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
1004d4f0:	68bb      	ldr	r3, [r7, #8]
1004d4f2:	2204      	movs	r2, #4
1004d4f4:	4013      	ands	r3, r2
1004d4f6:	d022      	beq.n	1004d53e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
1004d4f8:	68fb      	ldr	r3, [r7, #12]
1004d4fa:	2204      	movs	r2, #4
1004d4fc:	4013      	ands	r3, r2
1004d4fe:	d01e      	beq.n	1004d53e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
1004d500:	687b      	ldr	r3, [r7, #4]
1004d502:	681b      	ldr	r3, [r3, #0]
1004d504:	2205      	movs	r2, #5
1004d506:	4252      	negs	r2, r2
1004d508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
1004d50a:	687b      	ldr	r3, [r7, #4]
1004d50c:	2202      	movs	r2, #2
1004d50e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
1004d510:	687b      	ldr	r3, [r7, #4]
1004d512:	681b      	ldr	r3, [r3, #0]
1004d514:	699a      	ldr	r2, [r3, #24]
1004d516:	23c0      	movs	r3, #192	@ 0xc0
1004d518:	009b      	lsls	r3, r3, #2
1004d51a:	4013      	ands	r3, r2
1004d51c:	d004      	beq.n	1004d528 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004d51e:	687b      	ldr	r3, [r7, #4]
1004d520:	0018      	movs	r0, r3
1004d522:	f000 f96d 	bl	1004d800 <HAL_TIM_IC_CaptureCallback>
1004d526:	e007      	b.n	1004d538 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004d528:	687b      	ldr	r3, [r7, #4]
1004d52a:	0018      	movs	r0, r3
1004d52c:	f000 f960 	bl	1004d7f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1004d530:	687b      	ldr	r3, [r7, #4]
1004d532:	0018      	movs	r0, r3
1004d534:	f000 f96c 	bl	1004d810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004d538:	687b      	ldr	r3, [r7, #4]
1004d53a:	2200      	movs	r2, #0
1004d53c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
1004d53e:	68bb      	ldr	r3, [r7, #8]
1004d540:	2208      	movs	r2, #8
1004d542:	4013      	ands	r3, r2
1004d544:	d021      	beq.n	1004d58a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
1004d546:	68fb      	ldr	r3, [r7, #12]
1004d548:	2208      	movs	r2, #8
1004d54a:	4013      	ands	r3, r2
1004d54c:	d01d      	beq.n	1004d58a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
1004d54e:	687b      	ldr	r3, [r7, #4]
1004d550:	681b      	ldr	r3, [r3, #0]
1004d552:	2209      	movs	r2, #9
1004d554:	4252      	negs	r2, r2
1004d556:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
1004d558:	687b      	ldr	r3, [r7, #4]
1004d55a:	2204      	movs	r2, #4
1004d55c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
1004d55e:	687b      	ldr	r3, [r7, #4]
1004d560:	681b      	ldr	r3, [r3, #0]
1004d562:	69db      	ldr	r3, [r3, #28]
1004d564:	2203      	movs	r2, #3
1004d566:	4013      	ands	r3, r2
1004d568:	d004      	beq.n	1004d574 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004d56a:	687b      	ldr	r3, [r7, #4]
1004d56c:	0018      	movs	r0, r3
1004d56e:	f000 f947 	bl	1004d800 <HAL_TIM_IC_CaptureCallback>
1004d572:	e007      	b.n	1004d584 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004d574:	687b      	ldr	r3, [r7, #4]
1004d576:	0018      	movs	r0, r3
1004d578:	f000 f93a 	bl	1004d7f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1004d57c:	687b      	ldr	r3, [r7, #4]
1004d57e:	0018      	movs	r0, r3
1004d580:	f000 f946 	bl	1004d810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004d584:	687b      	ldr	r3, [r7, #4]
1004d586:	2200      	movs	r2, #0
1004d588:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
1004d58a:	68bb      	ldr	r3, [r7, #8]
1004d58c:	2210      	movs	r2, #16
1004d58e:	4013      	ands	r3, r2
1004d590:	d022      	beq.n	1004d5d8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
1004d592:	68fb      	ldr	r3, [r7, #12]
1004d594:	2210      	movs	r2, #16
1004d596:	4013      	ands	r3, r2
1004d598:	d01e      	beq.n	1004d5d8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
1004d59a:	687b      	ldr	r3, [r7, #4]
1004d59c:	681b      	ldr	r3, [r3, #0]
1004d59e:	2211      	movs	r2, #17
1004d5a0:	4252      	negs	r2, r2
1004d5a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
1004d5a4:	687b      	ldr	r3, [r7, #4]
1004d5a6:	2208      	movs	r2, #8
1004d5a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
1004d5aa:	687b      	ldr	r3, [r7, #4]
1004d5ac:	681b      	ldr	r3, [r3, #0]
1004d5ae:	69da      	ldr	r2, [r3, #28]
1004d5b0:	23c0      	movs	r3, #192	@ 0xc0
1004d5b2:	009b      	lsls	r3, r3, #2
1004d5b4:	4013      	ands	r3, r2
1004d5b6:	d004      	beq.n	1004d5c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004d5b8:	687b      	ldr	r3, [r7, #4]
1004d5ba:	0018      	movs	r0, r3
1004d5bc:	f000 f920 	bl	1004d800 <HAL_TIM_IC_CaptureCallback>
1004d5c0:	e007      	b.n	1004d5d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004d5c2:	687b      	ldr	r3, [r7, #4]
1004d5c4:	0018      	movs	r0, r3
1004d5c6:	f000 f913 	bl	1004d7f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1004d5ca:	687b      	ldr	r3, [r7, #4]
1004d5cc:	0018      	movs	r0, r3
1004d5ce:	f000 f91f 	bl	1004d810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004d5d2:	687b      	ldr	r3, [r7, #4]
1004d5d4:	2200      	movs	r2, #0
1004d5d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
1004d5d8:	68bb      	ldr	r3, [r7, #8]
1004d5da:	2201      	movs	r2, #1
1004d5dc:	4013      	ands	r3, r2
1004d5de:	d00c      	beq.n	1004d5fa <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
1004d5e0:	68fb      	ldr	r3, [r7, #12]
1004d5e2:	2201      	movs	r2, #1
1004d5e4:	4013      	ands	r3, r2
1004d5e6:	d008      	beq.n	1004d5fa <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
1004d5e8:	687b      	ldr	r3, [r7, #4]
1004d5ea:	681b      	ldr	r3, [r3, #0]
1004d5ec:	2202      	movs	r2, #2
1004d5ee:	4252      	negs	r2, r2
1004d5f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
1004d5f2:	687b      	ldr	r3, [r7, #4]
1004d5f4:	0018      	movs	r0, r3
1004d5f6:	f000 f8f3 	bl	1004d7e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
1004d5fa:	68bb      	ldr	r3, [r7, #8]
1004d5fc:	2280      	movs	r2, #128	@ 0x80
1004d5fe:	4013      	ands	r3, r2
1004d600:	d00c      	beq.n	1004d61c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
1004d602:	68fb      	ldr	r3, [r7, #12]
1004d604:	2280      	movs	r2, #128	@ 0x80
1004d606:	4013      	ands	r3, r2
1004d608:	d008      	beq.n	1004d61c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
1004d60a:	687b      	ldr	r3, [r7, #4]
1004d60c:	681b      	ldr	r3, [r3, #0]
1004d60e:	2281      	movs	r2, #129	@ 0x81
1004d610:	4252      	negs	r2, r2
1004d612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
1004d614:	687b      	ldr	r3, [r7, #4]
1004d616:	0018      	movs	r0, r3
1004d618:	f000 fa08 	bl	1004da2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
1004d61c:	68bb      	ldr	r3, [r7, #8]
1004d61e:	2240      	movs	r2, #64	@ 0x40
1004d620:	4013      	ands	r3, r2
1004d622:	d00c      	beq.n	1004d63e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
1004d624:	68fb      	ldr	r3, [r7, #12]
1004d626:	2240      	movs	r2, #64	@ 0x40
1004d628:	4013      	ands	r3, r2
1004d62a:	d008      	beq.n	1004d63e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
1004d62c:	687b      	ldr	r3, [r7, #4]
1004d62e:	681b      	ldr	r3, [r3, #0]
1004d630:	2241      	movs	r2, #65	@ 0x41
1004d632:	4252      	negs	r2, r2
1004d634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
1004d636:	687b      	ldr	r3, [r7, #4]
1004d638:	0018      	movs	r0, r3
1004d63a:	f000 f8f1 	bl	1004d820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
1004d63e:	68bb      	ldr	r3, [r7, #8]
1004d640:	2220      	movs	r2, #32
1004d642:	4013      	ands	r3, r2
1004d644:	d00c      	beq.n	1004d660 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
1004d646:	68fb      	ldr	r3, [r7, #12]
1004d648:	2220      	movs	r2, #32
1004d64a:	4013      	ands	r3, r2
1004d64c:	d008      	beq.n	1004d660 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
1004d64e:	687b      	ldr	r3, [r7, #4]
1004d650:	681b      	ldr	r3, [r3, #0]
1004d652:	2221      	movs	r2, #33	@ 0x21
1004d654:	4252      	negs	r2, r2
1004d656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
1004d658:	687b      	ldr	r3, [r7, #4]
1004d65a:	0018      	movs	r0, r3
1004d65c:	f000 f9de 	bl	1004da1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
1004d660:	46c0      	nop			@ (mov r8, r8)
1004d662:	46bd      	mov	sp, r7
1004d664:	b004      	add	sp, #16
1004d666:	bd80      	pop	{r7, pc}

1004d668 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
1004d668:	b580      	push	{r7, lr}
1004d66a:	b084      	sub	sp, #16
1004d66c:	af00      	add	r7, sp, #0
1004d66e:	6078      	str	r0, [r7, #4]
1004d670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004d672:	230f      	movs	r3, #15
1004d674:	18fb      	adds	r3, r7, r3
1004d676:	2200      	movs	r2, #0
1004d678:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
1004d67a:	687b      	ldr	r3, [r7, #4]
1004d67c:	2234      	movs	r2, #52	@ 0x34
1004d67e:	5c9b      	ldrb	r3, [r3, r2]
1004d680:	2b01      	cmp	r3, #1
1004d682:	d101      	bne.n	1004d688 <HAL_TIM_ConfigClockSource+0x20>
1004d684:	2302      	movs	r3, #2
1004d686:	e0a2      	b.n	1004d7ce <HAL_TIM_ConfigClockSource+0x166>
1004d688:	687b      	ldr	r3, [r7, #4]
1004d68a:	2234      	movs	r2, #52	@ 0x34
1004d68c:	2101      	movs	r1, #1
1004d68e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
1004d690:	687b      	ldr	r3, [r7, #4]
1004d692:	2235      	movs	r2, #53	@ 0x35
1004d694:	2102      	movs	r1, #2
1004d696:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
1004d698:	687b      	ldr	r3, [r7, #4]
1004d69a:	681b      	ldr	r3, [r3, #0]
1004d69c:	689b      	ldr	r3, [r3, #8]
1004d69e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
1004d6a0:	68bb      	ldr	r3, [r7, #8]
1004d6a2:	4a4d      	ldr	r2, [pc, #308]	@ (1004d7d8 <HAL_TIM_ConfigClockSource+0x170>)
1004d6a4:	4013      	ands	r3, r2
1004d6a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
1004d6a8:	68bb      	ldr	r3, [r7, #8]
1004d6aa:	4a4c      	ldr	r2, [pc, #304]	@ (1004d7dc <HAL_TIM_ConfigClockSource+0x174>)
1004d6ac:	4013      	ands	r3, r2
1004d6ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
1004d6b0:	687b      	ldr	r3, [r7, #4]
1004d6b2:	681b      	ldr	r3, [r3, #0]
1004d6b4:	68ba      	ldr	r2, [r7, #8]
1004d6b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
1004d6b8:	683b      	ldr	r3, [r7, #0]
1004d6ba:	681b      	ldr	r3, [r3, #0]
1004d6bc:	2280      	movs	r2, #128	@ 0x80
1004d6be:	0192      	lsls	r2, r2, #6
1004d6c0:	4293      	cmp	r3, r2
1004d6c2:	d02f      	beq.n	1004d724 <HAL_TIM_ConfigClockSource+0xbc>
1004d6c4:	2280      	movs	r2, #128	@ 0x80
1004d6c6:	0192      	lsls	r2, r2, #6
1004d6c8:	4293      	cmp	r3, r2
1004d6ca:	d900      	bls.n	1004d6ce <HAL_TIM_ConfigClockSource+0x66>
1004d6cc:	e06e      	b.n	1004d7ac <HAL_TIM_ConfigClockSource+0x144>
1004d6ce:	2280      	movs	r2, #128	@ 0x80
1004d6d0:	0152      	lsls	r2, r2, #5
1004d6d2:	4293      	cmp	r3, r2
1004d6d4:	d100      	bne.n	1004d6d8 <HAL_TIM_ConfigClockSource+0x70>
1004d6d6:	e06e      	b.n	1004d7b6 <HAL_TIM_ConfigClockSource+0x14e>
1004d6d8:	2280      	movs	r2, #128	@ 0x80
1004d6da:	0152      	lsls	r2, r2, #5
1004d6dc:	4293      	cmp	r3, r2
1004d6de:	d865      	bhi.n	1004d7ac <HAL_TIM_ConfigClockSource+0x144>
1004d6e0:	2b70      	cmp	r3, #112	@ 0x70
1004d6e2:	d008      	beq.n	1004d6f6 <HAL_TIM_ConfigClockSource+0x8e>
1004d6e4:	d862      	bhi.n	1004d7ac <HAL_TIM_ConfigClockSource+0x144>
1004d6e6:	2b60      	cmp	r3, #96	@ 0x60
1004d6e8:	d040      	beq.n	1004d76c <HAL_TIM_ConfigClockSource+0x104>
1004d6ea:	d85f      	bhi.n	1004d7ac <HAL_TIM_ConfigClockSource+0x144>
1004d6ec:	2b40      	cmp	r3, #64	@ 0x40
1004d6ee:	d04d      	beq.n	1004d78c <HAL_TIM_ConfigClockSource+0x124>
1004d6f0:	2b50      	cmp	r3, #80	@ 0x50
1004d6f2:	d02b      	beq.n	1004d74c <HAL_TIM_ConfigClockSource+0xe4>
1004d6f4:	e05a      	b.n	1004d7ac <HAL_TIM_ConfigClockSource+0x144>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
1004d6f6:	687b      	ldr	r3, [r7, #4]
1004d6f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
1004d6fa:	683b      	ldr	r3, [r7, #0]
1004d6fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
1004d6fe:	683b      	ldr	r3, [r7, #0]
1004d700:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
1004d702:	683b      	ldr	r3, [r7, #0]
1004d704:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
1004d706:	f000 f969 	bl	1004d9dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
1004d70a:	687b      	ldr	r3, [r7, #4]
1004d70c:	681b      	ldr	r3, [r3, #0]
1004d70e:	689b      	ldr	r3, [r3, #8]
1004d710:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
1004d712:	68bb      	ldr	r3, [r7, #8]
1004d714:	2277      	movs	r2, #119	@ 0x77
1004d716:	4313      	orrs	r3, r2
1004d718:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
1004d71a:	687b      	ldr	r3, [r7, #4]
1004d71c:	681b      	ldr	r3, [r3, #0]
1004d71e:	68ba      	ldr	r2, [r7, #8]
1004d720:	609a      	str	r2, [r3, #8]
      break;
1004d722:	e049      	b.n	1004d7b8 <HAL_TIM_ConfigClockSource+0x150>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
1004d724:	687b      	ldr	r3, [r7, #4]
1004d726:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
1004d728:	683b      	ldr	r3, [r7, #0]
1004d72a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
1004d72c:	683b      	ldr	r3, [r7, #0]
1004d72e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
1004d730:	683b      	ldr	r3, [r7, #0]
1004d732:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
1004d734:	f000 f952 	bl	1004d9dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
1004d738:	687b      	ldr	r3, [r7, #4]
1004d73a:	681b      	ldr	r3, [r3, #0]
1004d73c:	689a      	ldr	r2, [r3, #8]
1004d73e:	687b      	ldr	r3, [r7, #4]
1004d740:	681b      	ldr	r3, [r3, #0]
1004d742:	2180      	movs	r1, #128	@ 0x80
1004d744:	01c9      	lsls	r1, r1, #7
1004d746:	430a      	orrs	r2, r1
1004d748:	609a      	str	r2, [r3, #8]
      break;
1004d74a:	e035      	b.n	1004d7b8 <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
1004d74c:	687b      	ldr	r3, [r7, #4]
1004d74e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
1004d750:	683b      	ldr	r3, [r7, #0]
1004d752:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
1004d754:	683b      	ldr	r3, [r7, #0]
1004d756:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
1004d758:	001a      	movs	r2, r3
1004d75a:	f000 f8c5 	bl	1004d8e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
1004d75e:	687b      	ldr	r3, [r7, #4]
1004d760:	681b      	ldr	r3, [r3, #0]
1004d762:	2150      	movs	r1, #80	@ 0x50
1004d764:	0018      	movs	r0, r3
1004d766:	f000 f91f 	bl	1004d9a8 <TIM_ITRx_SetConfig>
      break;
1004d76a:	e025      	b.n	1004d7b8 <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
1004d76c:	687b      	ldr	r3, [r7, #4]
1004d76e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
1004d770:	683b      	ldr	r3, [r7, #0]
1004d772:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
1004d774:	683b      	ldr	r3, [r7, #0]
1004d776:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
1004d778:	001a      	movs	r2, r3
1004d77a:	f000 f8e3 	bl	1004d944 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
1004d77e:	687b      	ldr	r3, [r7, #4]
1004d780:	681b      	ldr	r3, [r3, #0]
1004d782:	2160      	movs	r1, #96	@ 0x60
1004d784:	0018      	movs	r0, r3
1004d786:	f000 f90f 	bl	1004d9a8 <TIM_ITRx_SetConfig>
      break;
1004d78a:	e015      	b.n	1004d7b8 <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
1004d78c:	687b      	ldr	r3, [r7, #4]
1004d78e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
1004d790:	683b      	ldr	r3, [r7, #0]
1004d792:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
1004d794:	683b      	ldr	r3, [r7, #0]
1004d796:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
1004d798:	001a      	movs	r2, r3
1004d79a:	f000 f8a5 	bl	1004d8e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
1004d79e:	687b      	ldr	r3, [r7, #4]
1004d7a0:	681b      	ldr	r3, [r3, #0]
1004d7a2:	2140      	movs	r1, #64	@ 0x40
1004d7a4:	0018      	movs	r0, r3
1004d7a6:	f000 f8ff 	bl	1004d9a8 <TIM_ITRx_SetConfig>
      break;
1004d7aa:	e005      	b.n	1004d7b8 <HAL_TIM_ConfigClockSource+0x150>
    }


    default:
      status = HAL_ERROR;
1004d7ac:	230f      	movs	r3, #15
1004d7ae:	18fb      	adds	r3, r7, r3
1004d7b0:	2201      	movs	r2, #1
1004d7b2:	701a      	strb	r2, [r3, #0]
      break;
1004d7b4:	e000      	b.n	1004d7b8 <HAL_TIM_ConfigClockSource+0x150>
      break;
1004d7b6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
1004d7b8:	687b      	ldr	r3, [r7, #4]
1004d7ba:	2235      	movs	r2, #53	@ 0x35
1004d7bc:	2101      	movs	r1, #1
1004d7be:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
1004d7c0:	687b      	ldr	r3, [r7, #4]
1004d7c2:	2234      	movs	r2, #52	@ 0x34
1004d7c4:	2100      	movs	r1, #0
1004d7c6:	5499      	strb	r1, [r3, r2]

  return status;
1004d7c8:	230f      	movs	r3, #15
1004d7ca:	18fb      	adds	r3, r7, r3
1004d7cc:	781b      	ldrb	r3, [r3, #0]
}
1004d7ce:	0018      	movs	r0, r3
1004d7d0:	46bd      	mov	sp, r7
1004d7d2:	b004      	add	sp, #16
1004d7d4:	bd80      	pop	{r7, pc}
1004d7d6:	46c0      	nop			@ (mov r8, r8)
1004d7d8:	fffeff88 	.word	0xfffeff88
1004d7dc:	ffff00ff 	.word	0xffff00ff

1004d7e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
1004d7e0:	b580      	push	{r7, lr}
1004d7e2:	b082      	sub	sp, #8
1004d7e4:	af00      	add	r7, sp, #0
1004d7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
1004d7e8:	46c0      	nop			@ (mov r8, r8)
1004d7ea:	46bd      	mov	sp, r7
1004d7ec:	b002      	add	sp, #8
1004d7ee:	bd80      	pop	{r7, pc}

1004d7f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
1004d7f0:	b580      	push	{r7, lr}
1004d7f2:	b082      	sub	sp, #8
1004d7f4:	af00      	add	r7, sp, #0
1004d7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
1004d7f8:	46c0      	nop			@ (mov r8, r8)
1004d7fa:	46bd      	mov	sp, r7
1004d7fc:	b002      	add	sp, #8
1004d7fe:	bd80      	pop	{r7, pc}

1004d800 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
1004d800:	b580      	push	{r7, lr}
1004d802:	b082      	sub	sp, #8
1004d804:	af00      	add	r7, sp, #0
1004d806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
1004d808:	46c0      	nop			@ (mov r8, r8)
1004d80a:	46bd      	mov	sp, r7
1004d80c:	b002      	add	sp, #8
1004d80e:	bd80      	pop	{r7, pc}

1004d810 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
1004d810:	b580      	push	{r7, lr}
1004d812:	b082      	sub	sp, #8
1004d814:	af00      	add	r7, sp, #0
1004d816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
1004d818:	46c0      	nop			@ (mov r8, r8)
1004d81a:	46bd      	mov	sp, r7
1004d81c:	b002      	add	sp, #8
1004d81e:	bd80      	pop	{r7, pc}

1004d820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
1004d820:	b580      	push	{r7, lr}
1004d822:	b082      	sub	sp, #8
1004d824:	af00      	add	r7, sp, #0
1004d826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
1004d828:	46c0      	nop			@ (mov r8, r8)
1004d82a:	46bd      	mov	sp, r7
1004d82c:	b002      	add	sp, #8
1004d82e:	bd80      	pop	{r7, pc}

1004d830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
1004d830:	b580      	push	{r7, lr}
1004d832:	b084      	sub	sp, #16
1004d834:	af00      	add	r7, sp, #0
1004d836:	6078      	str	r0, [r7, #4]
1004d838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
1004d83a:	687b      	ldr	r3, [r7, #4]
1004d83c:	681b      	ldr	r3, [r3, #0]
1004d83e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
1004d840:	687b      	ldr	r3, [r7, #4]
1004d842:	4a25      	ldr	r2, [pc, #148]	@ (1004d8d8 <TIM_Base_SetConfig+0xa8>)
1004d844:	4293      	cmp	r3, r2
1004d846:	d108      	bne.n	1004d85a <TIM_Base_SetConfig+0x2a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
1004d848:	68fb      	ldr	r3, [r7, #12]
1004d84a:	2270      	movs	r2, #112	@ 0x70
1004d84c:	4393      	bics	r3, r2
1004d84e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
1004d850:	683b      	ldr	r3, [r7, #0]
1004d852:	685b      	ldr	r3, [r3, #4]
1004d854:	68fa      	ldr	r2, [r7, #12]
1004d856:	4313      	orrs	r3, r2
1004d858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
1004d85a:	687b      	ldr	r3, [r7, #4]
1004d85c:	4a1e      	ldr	r2, [pc, #120]	@ (1004d8d8 <TIM_Base_SetConfig+0xa8>)
1004d85e:	4293      	cmp	r3, r2
1004d860:	d007      	beq.n	1004d872 <TIM_Base_SetConfig+0x42>
1004d862:	687b      	ldr	r3, [r7, #4]
1004d864:	4a1d      	ldr	r2, [pc, #116]	@ (1004d8dc <TIM_Base_SetConfig+0xac>)
1004d866:	4293      	cmp	r3, r2
1004d868:	d003      	beq.n	1004d872 <TIM_Base_SetConfig+0x42>
1004d86a:	687b      	ldr	r3, [r7, #4]
1004d86c:	4a1c      	ldr	r2, [pc, #112]	@ (1004d8e0 <TIM_Base_SetConfig+0xb0>)
1004d86e:	4293      	cmp	r3, r2
1004d870:	d108      	bne.n	1004d884 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
1004d872:	68fb      	ldr	r3, [r7, #12]
1004d874:	4a1b      	ldr	r2, [pc, #108]	@ (1004d8e4 <TIM_Base_SetConfig+0xb4>)
1004d876:	4013      	ands	r3, r2
1004d878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
1004d87a:	683b      	ldr	r3, [r7, #0]
1004d87c:	68db      	ldr	r3, [r3, #12]
1004d87e:	68fa      	ldr	r2, [r7, #12]
1004d880:	4313      	orrs	r3, r2
1004d882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
1004d884:	68fb      	ldr	r3, [r7, #12]
1004d886:	2280      	movs	r2, #128	@ 0x80
1004d888:	4393      	bics	r3, r2
1004d88a:	001a      	movs	r2, r3
1004d88c:	683b      	ldr	r3, [r7, #0]
1004d88e:	695b      	ldr	r3, [r3, #20]
1004d890:	4313      	orrs	r3, r2
1004d892:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
1004d894:	687b      	ldr	r3, [r7, #4]
1004d896:	68fa      	ldr	r2, [r7, #12]
1004d898:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
1004d89a:	683b      	ldr	r3, [r7, #0]
1004d89c:	689a      	ldr	r2, [r3, #8]
1004d89e:	687b      	ldr	r3, [r7, #4]
1004d8a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
1004d8a2:	683b      	ldr	r3, [r7, #0]
1004d8a4:	681a      	ldr	r2, [r3, #0]
1004d8a6:	687b      	ldr	r3, [r7, #4]
1004d8a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
1004d8aa:	687b      	ldr	r3, [r7, #4]
1004d8ac:	4a0a      	ldr	r2, [pc, #40]	@ (1004d8d8 <TIM_Base_SetConfig+0xa8>)
1004d8ae:	4293      	cmp	r3, r2
1004d8b0:	d007      	beq.n	1004d8c2 <TIM_Base_SetConfig+0x92>
1004d8b2:	687b      	ldr	r3, [r7, #4]
1004d8b4:	4a09      	ldr	r2, [pc, #36]	@ (1004d8dc <TIM_Base_SetConfig+0xac>)
1004d8b6:	4293      	cmp	r3, r2
1004d8b8:	d003      	beq.n	1004d8c2 <TIM_Base_SetConfig+0x92>
1004d8ba:	687b      	ldr	r3, [r7, #4]
1004d8bc:	4a08      	ldr	r2, [pc, #32]	@ (1004d8e0 <TIM_Base_SetConfig+0xb0>)
1004d8be:	4293      	cmp	r3, r2
1004d8c0:	d103      	bne.n	1004d8ca <TIM_Base_SetConfig+0x9a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
1004d8c2:	683b      	ldr	r3, [r7, #0]
1004d8c4:	691a      	ldr	r2, [r3, #16]
1004d8c6:	687b      	ldr	r3, [r7, #4]
1004d8c8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
1004d8ca:	687b      	ldr	r3, [r7, #4]
1004d8cc:	2201      	movs	r2, #1
1004d8ce:	615a      	str	r2, [r3, #20]
}
1004d8d0:	46c0      	nop			@ (mov r8, r8)
1004d8d2:	46bd      	mov	sp, r7
1004d8d4:	b004      	add	sp, #16
1004d8d6:	bd80      	pop	{r7, pc}
1004d8d8:	40002000 	.word	0x40002000
1004d8dc:	40005000 	.word	0x40005000
1004d8e0:	40006000 	.word	0x40006000
1004d8e4:	fffffcff 	.word	0xfffffcff

1004d8e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
1004d8e8:	b580      	push	{r7, lr}
1004d8ea:	b086      	sub	sp, #24
1004d8ec:	af00      	add	r7, sp, #0
1004d8ee:	60f8      	str	r0, [r7, #12]
1004d8f0:	60b9      	str	r1, [r7, #8]
1004d8f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
1004d8f4:	68fb      	ldr	r3, [r7, #12]
1004d8f6:	6a1b      	ldr	r3, [r3, #32]
1004d8f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
1004d8fa:	68fb      	ldr	r3, [r7, #12]
1004d8fc:	6a1b      	ldr	r3, [r3, #32]
1004d8fe:	2201      	movs	r2, #1
1004d900:	4393      	bics	r3, r2
1004d902:	001a      	movs	r2, r3
1004d904:	68fb      	ldr	r3, [r7, #12]
1004d906:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
1004d908:	68fb      	ldr	r3, [r7, #12]
1004d90a:	699b      	ldr	r3, [r3, #24]
1004d90c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
1004d90e:	693b      	ldr	r3, [r7, #16]
1004d910:	22f0      	movs	r2, #240	@ 0xf0
1004d912:	4393      	bics	r3, r2
1004d914:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
1004d916:	687b      	ldr	r3, [r7, #4]
1004d918:	011b      	lsls	r3, r3, #4
1004d91a:	693a      	ldr	r2, [r7, #16]
1004d91c:	4313      	orrs	r3, r2
1004d91e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
1004d920:	697b      	ldr	r3, [r7, #20]
1004d922:	220a      	movs	r2, #10
1004d924:	4393      	bics	r3, r2
1004d926:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
1004d928:	697a      	ldr	r2, [r7, #20]
1004d92a:	68bb      	ldr	r3, [r7, #8]
1004d92c:	4313      	orrs	r3, r2
1004d92e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
1004d930:	68fb      	ldr	r3, [r7, #12]
1004d932:	693a      	ldr	r2, [r7, #16]
1004d934:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
1004d936:	68fb      	ldr	r3, [r7, #12]
1004d938:	697a      	ldr	r2, [r7, #20]
1004d93a:	621a      	str	r2, [r3, #32]
}
1004d93c:	46c0      	nop			@ (mov r8, r8)
1004d93e:	46bd      	mov	sp, r7
1004d940:	b006      	add	sp, #24
1004d942:	bd80      	pop	{r7, pc}

1004d944 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
1004d944:	b580      	push	{r7, lr}
1004d946:	b086      	sub	sp, #24
1004d948:	af00      	add	r7, sp, #0
1004d94a:	60f8      	str	r0, [r7, #12]
1004d94c:	60b9      	str	r1, [r7, #8]
1004d94e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
1004d950:	68fb      	ldr	r3, [r7, #12]
1004d952:	6a1b      	ldr	r3, [r3, #32]
1004d954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
1004d956:	68fb      	ldr	r3, [r7, #12]
1004d958:	6a1b      	ldr	r3, [r3, #32]
1004d95a:	2210      	movs	r2, #16
1004d95c:	4393      	bics	r3, r2
1004d95e:	001a      	movs	r2, r3
1004d960:	68fb      	ldr	r3, [r7, #12]
1004d962:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
1004d964:	68fb      	ldr	r3, [r7, #12]
1004d966:	699b      	ldr	r3, [r3, #24]
1004d968:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
1004d96a:	693b      	ldr	r3, [r7, #16]
1004d96c:	4a0d      	ldr	r2, [pc, #52]	@ (1004d9a4 <TIM_TI2_ConfigInputStage+0x60>)
1004d96e:	4013      	ands	r3, r2
1004d970:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
1004d972:	687b      	ldr	r3, [r7, #4]
1004d974:	031b      	lsls	r3, r3, #12
1004d976:	693a      	ldr	r2, [r7, #16]
1004d978:	4313      	orrs	r3, r2
1004d97a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
1004d97c:	697b      	ldr	r3, [r7, #20]
1004d97e:	22a0      	movs	r2, #160	@ 0xa0
1004d980:	4393      	bics	r3, r2
1004d982:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
1004d984:	68bb      	ldr	r3, [r7, #8]
1004d986:	011b      	lsls	r3, r3, #4
1004d988:	697a      	ldr	r2, [r7, #20]
1004d98a:	4313      	orrs	r3, r2
1004d98c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
1004d98e:	68fb      	ldr	r3, [r7, #12]
1004d990:	693a      	ldr	r2, [r7, #16]
1004d992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
1004d994:	68fb      	ldr	r3, [r7, #12]
1004d996:	697a      	ldr	r2, [r7, #20]
1004d998:	621a      	str	r2, [r3, #32]
}
1004d99a:	46c0      	nop			@ (mov r8, r8)
1004d99c:	46bd      	mov	sp, r7
1004d99e:	b006      	add	sp, #24
1004d9a0:	bd80      	pop	{r7, pc}
1004d9a2:	46c0      	nop			@ (mov r8, r8)
1004d9a4:	ffff0fff 	.word	0xffff0fff

1004d9a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
1004d9a8:	b580      	push	{r7, lr}
1004d9aa:	b084      	sub	sp, #16
1004d9ac:	af00      	add	r7, sp, #0
1004d9ae:	6078      	str	r0, [r7, #4]
1004d9b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
1004d9b2:	687b      	ldr	r3, [r7, #4]
1004d9b4:	689b      	ldr	r3, [r3, #8]
1004d9b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
1004d9b8:	68fb      	ldr	r3, [r7, #12]
1004d9ba:	2270      	movs	r2, #112	@ 0x70
1004d9bc:	4393      	bics	r3, r2
1004d9be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
1004d9c0:	683a      	ldr	r2, [r7, #0]
1004d9c2:	68fb      	ldr	r3, [r7, #12]
1004d9c4:	4313      	orrs	r3, r2
1004d9c6:	2207      	movs	r2, #7
1004d9c8:	4313      	orrs	r3, r2
1004d9ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
1004d9cc:	687b      	ldr	r3, [r7, #4]
1004d9ce:	68fa      	ldr	r2, [r7, #12]
1004d9d0:	609a      	str	r2, [r3, #8]
}
1004d9d2:	46c0      	nop			@ (mov r8, r8)
1004d9d4:	46bd      	mov	sp, r7
1004d9d6:	b004      	add	sp, #16
1004d9d8:	bd80      	pop	{r7, pc}
	...

1004d9dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
1004d9dc:	b580      	push	{r7, lr}
1004d9de:	b086      	sub	sp, #24
1004d9e0:	af00      	add	r7, sp, #0
1004d9e2:	60f8      	str	r0, [r7, #12]
1004d9e4:	60b9      	str	r1, [r7, #8]
1004d9e6:	607a      	str	r2, [r7, #4]
1004d9e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
1004d9ea:	68fb      	ldr	r3, [r7, #12]
1004d9ec:	689b      	ldr	r3, [r3, #8]
1004d9ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
1004d9f0:	697b      	ldr	r3, [r7, #20]
1004d9f2:	4a09      	ldr	r2, [pc, #36]	@ (1004da18 <TIM_ETR_SetConfig+0x3c>)
1004d9f4:	4013      	ands	r3, r2
1004d9f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
1004d9f8:	683b      	ldr	r3, [r7, #0]
1004d9fa:	021a      	lsls	r2, r3, #8
1004d9fc:	687b      	ldr	r3, [r7, #4]
1004d9fe:	431a      	orrs	r2, r3
1004da00:	68bb      	ldr	r3, [r7, #8]
1004da02:	4313      	orrs	r3, r2
1004da04:	697a      	ldr	r2, [r7, #20]
1004da06:	4313      	orrs	r3, r2
1004da08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
1004da0a:	68fb      	ldr	r3, [r7, #12]
1004da0c:	697a      	ldr	r2, [r7, #20]
1004da0e:	609a      	str	r2, [r3, #8]
}
1004da10:	46c0      	nop			@ (mov r8, r8)
1004da12:	46bd      	mov	sp, r7
1004da14:	b006      	add	sp, #24
1004da16:	bd80      	pop	{r7, pc}
1004da18:	ffff00ff 	.word	0xffff00ff

1004da1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
1004da1c:	b580      	push	{r7, lr}
1004da1e:	b082      	sub	sp, #8
1004da20:	af00      	add	r7, sp, #0
1004da22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
1004da24:	46c0      	nop			@ (mov r8, r8)
1004da26:	46bd      	mov	sp, r7
1004da28:	b002      	add	sp, #8
1004da2a:	bd80      	pop	{r7, pc}

1004da2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
1004da2c:	b580      	push	{r7, lr}
1004da2e:	b082      	sub	sp, #8
1004da30:	af00      	add	r7, sp, #0
1004da32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
1004da34:	46c0      	nop			@ (mov r8, r8)
1004da36:	46bd      	mov	sp, r7
1004da38:	b002      	add	sp, #8
1004da3a:	bd80      	pop	{r7, pc}

1004da3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
1004da3c:	b580      	push	{r7, lr}
1004da3e:	b082      	sub	sp, #8
1004da40:	af00      	add	r7, sp, #0
1004da42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
1004da44:	687b      	ldr	r3, [r7, #4]
1004da46:	2b00      	cmp	r3, #0
1004da48:	d101      	bne.n	1004da4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
1004da4a:	2301      	movs	r3, #1
1004da4c:	e055      	b.n	1004dafa <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
1004da4e:	687b      	ldr	r3, [r7, #4]
1004da50:	2288      	movs	r2, #136	@ 0x88
1004da52:	589b      	ldr	r3, [r3, r2]
1004da54:	2b00      	cmp	r3, #0
1004da56:	d116      	bne.n	1004da86 <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
1004da58:	687b      	ldr	r3, [r7, #4]
1004da5a:	2284      	movs	r2, #132	@ 0x84
1004da5c:	2100      	movs	r1, #0
1004da5e:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
1004da60:	687b      	ldr	r3, [r7, #4]
1004da62:	0018      	movs	r0, r3
1004da64:	f000 f89e 	bl	1004dba4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
1004da68:	687b      	ldr	r3, [r7, #4]
1004da6a:	22c4      	movs	r2, #196	@ 0xc4
1004da6c:	589b      	ldr	r3, [r3, r2]
1004da6e:	2b00      	cmp	r3, #0
1004da70:	d103      	bne.n	1004da7a <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
1004da72:	687b      	ldr	r3, [r7, #4]
1004da74:	21c4      	movs	r1, #196	@ 0xc4
1004da76:	4a23      	ldr	r2, [pc, #140]	@ (1004db04 <HAL_UART_Init+0xc8>)
1004da78:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
1004da7a:	687b      	ldr	r3, [r7, #4]
1004da7c:	22c4      	movs	r2, #196	@ 0xc4
1004da7e:	589b      	ldr	r3, [r3, r2]
1004da80:	687a      	ldr	r2, [r7, #4]
1004da82:	0010      	movs	r0, r2
1004da84:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
1004da86:	687b      	ldr	r3, [r7, #4]
1004da88:	2288      	movs	r2, #136	@ 0x88
1004da8a:	2124      	movs	r1, #36	@ 0x24
1004da8c:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
1004da8e:	687b      	ldr	r3, [r7, #4]
1004da90:	681b      	ldr	r3, [r3, #0]
1004da92:	681a      	ldr	r2, [r3, #0]
1004da94:	687b      	ldr	r3, [r7, #4]
1004da96:	681b      	ldr	r3, [r3, #0]
1004da98:	2101      	movs	r1, #1
1004da9a:	438a      	bics	r2, r1
1004da9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
1004da9e:	687b      	ldr	r3, [r7, #4]
1004daa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004daa2:	2b00      	cmp	r3, #0
1004daa4:	d003      	beq.n	1004daae <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
1004daa6:	687b      	ldr	r3, [r7, #4]
1004daa8:	0018      	movs	r0, r3
1004daaa:	f000 fa33 	bl	1004df14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
1004daae:	687b      	ldr	r3, [r7, #4]
1004dab0:	0018      	movs	r0, r3
1004dab2:	f000 f8c7 	bl	1004dc44 <UART_SetConfig>
1004dab6:	0003      	movs	r3, r0
1004dab8:	2b01      	cmp	r3, #1
1004daba:	d101      	bne.n	1004dac0 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
1004dabc:	2301      	movs	r3, #1
1004dabe:	e01c      	b.n	1004dafa <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1004dac0:	687b      	ldr	r3, [r7, #4]
1004dac2:	681b      	ldr	r3, [r3, #0]
1004dac4:	685a      	ldr	r2, [r3, #4]
1004dac6:	687b      	ldr	r3, [r7, #4]
1004dac8:	681b      	ldr	r3, [r3, #0]
1004daca:	490f      	ldr	r1, [pc, #60]	@ (1004db08 <HAL_UART_Init+0xcc>)
1004dacc:	400a      	ands	r2, r1
1004dace:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
1004dad0:	687b      	ldr	r3, [r7, #4]
1004dad2:	681b      	ldr	r3, [r3, #0]
1004dad4:	689a      	ldr	r2, [r3, #8]
1004dad6:	687b      	ldr	r3, [r7, #4]
1004dad8:	681b      	ldr	r3, [r3, #0]
1004dada:	212a      	movs	r1, #42	@ 0x2a
1004dadc:	438a      	bics	r2, r1
1004dade:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
1004dae0:	687b      	ldr	r3, [r7, #4]
1004dae2:	681b      	ldr	r3, [r3, #0]
1004dae4:	681a      	ldr	r2, [r3, #0]
1004dae6:	687b      	ldr	r3, [r7, #4]
1004dae8:	681b      	ldr	r3, [r3, #0]
1004daea:	2101      	movs	r1, #1
1004daec:	430a      	orrs	r2, r1
1004daee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
1004daf0:	687b      	ldr	r3, [r7, #4]
1004daf2:	0018      	movs	r0, r3
1004daf4:	f000 fac2 	bl	1004e07c <UART_CheckIdleState>
1004daf8:	0003      	movs	r3, r0
}
1004dafa:	0018      	movs	r0, r3
1004dafc:	46bd      	mov	sp, r7
1004dafe:	b002      	add	sp, #8
1004db00:	bd80      	pop	{r7, pc}
1004db02:	46c0      	nop			@ (mov r8, r8)
1004db04:	10046df1 	.word	0x10046df1
1004db08:	ffffb7ff 	.word	0xffffb7ff

1004db0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
1004db0c:	b580      	push	{r7, lr}
1004db0e:	b082      	sub	sp, #8
1004db10:	af00      	add	r7, sp, #0
1004db12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
1004db14:	46c0      	nop			@ (mov r8, r8)
1004db16:	46bd      	mov	sp, r7
1004db18:	b002      	add	sp, #8
1004db1a:	bd80      	pop	{r7, pc}

1004db1c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
1004db1c:	b580      	push	{r7, lr}
1004db1e:	b082      	sub	sp, #8
1004db20:	af00      	add	r7, sp, #0
1004db22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
1004db24:	46c0      	nop			@ (mov r8, r8)
1004db26:	46bd      	mov	sp, r7
1004db28:	b002      	add	sp, #8
1004db2a:	bd80      	pop	{r7, pc}

1004db2c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
1004db2c:	b580      	push	{r7, lr}
1004db2e:	b082      	sub	sp, #8
1004db30:	af00      	add	r7, sp, #0
1004db32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
1004db34:	46c0      	nop			@ (mov r8, r8)
1004db36:	46bd      	mov	sp, r7
1004db38:	b002      	add	sp, #8
1004db3a:	bd80      	pop	{r7, pc}

1004db3c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
1004db3c:	b580      	push	{r7, lr}
1004db3e:	b082      	sub	sp, #8
1004db40:	af00      	add	r7, sp, #0
1004db42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
1004db44:	46c0      	nop			@ (mov r8, r8)
1004db46:	46bd      	mov	sp, r7
1004db48:	b002      	add	sp, #8
1004db4a:	bd80      	pop	{r7, pc}

1004db4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
1004db4c:	b580      	push	{r7, lr}
1004db4e:	b082      	sub	sp, #8
1004db50:	af00      	add	r7, sp, #0
1004db52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
1004db54:	46c0      	nop			@ (mov r8, r8)
1004db56:	46bd      	mov	sp, r7
1004db58:	b002      	add	sp, #8
1004db5a:	bd80      	pop	{r7, pc}

1004db5c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
1004db5c:	b580      	push	{r7, lr}
1004db5e:	b082      	sub	sp, #8
1004db60:	af00      	add	r7, sp, #0
1004db62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
1004db64:	46c0      	nop			@ (mov r8, r8)
1004db66:	46bd      	mov	sp, r7
1004db68:	b002      	add	sp, #8
1004db6a:	bd80      	pop	{r7, pc}

1004db6c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
1004db6c:	b580      	push	{r7, lr}
1004db6e:	b082      	sub	sp, #8
1004db70:	af00      	add	r7, sp, #0
1004db72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
1004db74:	46c0      	nop			@ (mov r8, r8)
1004db76:	46bd      	mov	sp, r7
1004db78:	b002      	add	sp, #8
1004db7a:	bd80      	pop	{r7, pc}

1004db7c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
1004db7c:	b580      	push	{r7, lr}
1004db7e:	b082      	sub	sp, #8
1004db80:	af00      	add	r7, sp, #0
1004db82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
1004db84:	46c0      	nop			@ (mov r8, r8)
1004db86:	46bd      	mov	sp, r7
1004db88:	b002      	add	sp, #8
1004db8a:	bd80      	pop	{r7, pc}

1004db8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
1004db8c:	b580      	push	{r7, lr}
1004db8e:	b082      	sub	sp, #8
1004db90:	af00      	add	r7, sp, #0
1004db92:	6078      	str	r0, [r7, #4]
1004db94:	000a      	movs	r2, r1
1004db96:	1cbb      	adds	r3, r7, #2
1004db98:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
1004db9a:	46c0      	nop			@ (mov r8, r8)
1004db9c:	46bd      	mov	sp, r7
1004db9e:	b002      	add	sp, #8
1004dba0:	bd80      	pop	{r7, pc}
	...

1004dba4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
1004dba4:	b580      	push	{r7, lr}
1004dba6:	b082      	sub	sp, #8
1004dba8:	af00      	add	r7, sp, #0
1004dbaa:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
1004dbac:	687b      	ldr	r3, [r7, #4]
1004dbae:	2194      	movs	r1, #148	@ 0x94
1004dbb0:	4a18      	ldr	r2, [pc, #96]	@ (1004dc14 <UART_InitCallbacksToDefault+0x70>)
1004dbb2:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
1004dbb4:	687b      	ldr	r3, [r7, #4]
1004dbb6:	2198      	movs	r1, #152	@ 0x98
1004dbb8:	4a17      	ldr	r2, [pc, #92]	@ (1004dc18 <UART_InitCallbacksToDefault+0x74>)
1004dbba:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
1004dbbc:	687b      	ldr	r3, [r7, #4]
1004dbbe:	219c      	movs	r1, #156	@ 0x9c
1004dbc0:	4a16      	ldr	r2, [pc, #88]	@ (1004dc1c <UART_InitCallbacksToDefault+0x78>)
1004dbc2:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
1004dbc4:	687b      	ldr	r3, [r7, #4]
1004dbc6:	21a0      	movs	r1, #160	@ 0xa0
1004dbc8:	4a15      	ldr	r2, [pc, #84]	@ (1004dc20 <UART_InitCallbacksToDefault+0x7c>)
1004dbca:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
1004dbcc:	687b      	ldr	r3, [r7, #4]
1004dbce:	21a4      	movs	r1, #164	@ 0xa4
1004dbd0:	4a14      	ldr	r2, [pc, #80]	@ (1004dc24 <UART_InitCallbacksToDefault+0x80>)
1004dbd2:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
1004dbd4:	687b      	ldr	r3, [r7, #4]
1004dbd6:	21a8      	movs	r1, #168	@ 0xa8
1004dbd8:	4a13      	ldr	r2, [pc, #76]	@ (1004dc28 <UART_InitCallbacksToDefault+0x84>)
1004dbda:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
1004dbdc:	687b      	ldr	r3, [r7, #4]
1004dbde:	21ac      	movs	r1, #172	@ 0xac
1004dbe0:	4a12      	ldr	r2, [pc, #72]	@ (1004dc2c <UART_InitCallbacksToDefault+0x88>)
1004dbe2:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
1004dbe4:	687b      	ldr	r3, [r7, #4]
1004dbe6:	21b0      	movs	r1, #176	@ 0xb0
1004dbe8:	4a11      	ldr	r2, [pc, #68]	@ (1004dc30 <UART_InitCallbacksToDefault+0x8c>)
1004dbea:	505a      	str	r2, [r3, r1]
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
1004dbec:	687b      	ldr	r3, [r7, #4]
1004dbee:	21b4      	movs	r1, #180	@ 0xb4
1004dbf0:	4a10      	ldr	r2, [pc, #64]	@ (1004dc34 <UART_InitCallbacksToDefault+0x90>)
1004dbf2:	505a      	str	r2, [r3, r1]
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
1004dbf4:	687b      	ldr	r3, [r7, #4]
1004dbf6:	21b8      	movs	r1, #184	@ 0xb8
1004dbf8:	4a0f      	ldr	r2, [pc, #60]	@ (1004dc38 <UART_InitCallbacksToDefault+0x94>)
1004dbfa:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
1004dbfc:	687b      	ldr	r3, [r7, #4]
1004dbfe:	21bc      	movs	r1, #188	@ 0xbc
1004dc00:	4a0e      	ldr	r2, [pc, #56]	@ (1004dc3c <UART_InitCallbacksToDefault+0x98>)
1004dc02:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
1004dc04:	687b      	ldr	r3, [r7, #4]
1004dc06:	21c0      	movs	r1, #192	@ 0xc0
1004dc08:	4a0d      	ldr	r2, [pc, #52]	@ (1004dc40 <UART_InitCallbacksToDefault+0x9c>)
1004dc0a:	505a      	str	r2, [r3, r1]

}
1004dc0c:	46c0      	nop			@ (mov r8, r8)
1004dc0e:	46bd      	mov	sp, r7
1004dc10:	b002      	add	sp, #8
1004dc12:	bd80      	pop	{r7, pc}
1004dc14:	1004db1d 	.word	0x1004db1d
1004dc18:	1004db0d 	.word	0x1004db0d
1004dc1c:	1004db3d 	.word	0x1004db3d
1004dc20:	1004db2d 	.word	0x1004db2d
1004dc24:	1004db4d 	.word	0x1004db4d
1004dc28:	1004db5d 	.word	0x1004db5d
1004dc2c:	1004db6d 	.word	0x1004db6d
1004dc30:	1004db7d 	.word	0x1004db7d
1004dc34:	1004e37d 	.word	0x1004e37d
1004dc38:	1004e38d 	.word	0x1004e38d
1004dc3c:	1004e39d 	.word	0x1004e39d
1004dc40:	1004db8d 	.word	0x1004db8d

1004dc44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
1004dc44:	b5b0      	push	{r4, r5, r7, lr}
1004dc46:	b090      	sub	sp, #64	@ 0x40
1004dc48:	af00      	add	r7, sp, #0
1004dc4a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
1004dc4c:	231b      	movs	r3, #27
1004dc4e:	2220      	movs	r2, #32
1004dc50:	189b      	adds	r3, r3, r2
1004dc52:	19db      	adds	r3, r3, r7
1004dc54:	2200      	movs	r2, #0
1004dc56:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
1004dc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dc5a:	689a      	ldr	r2, [r3, #8]
1004dc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dc5e:	691b      	ldr	r3, [r3, #16]
1004dc60:	431a      	orrs	r2, r3
1004dc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dc64:	695b      	ldr	r3, [r3, #20]
1004dc66:	431a      	orrs	r2, r3
1004dc68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dc6a:	69db      	ldr	r3, [r3, #28]
1004dc6c:	4313      	orrs	r3, r2
1004dc6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
1004dc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dc72:	681b      	ldr	r3, [r3, #0]
1004dc74:	681b      	ldr	r3, [r3, #0]
1004dc76:	4aa1      	ldr	r2, [pc, #644]	@ (1004defc <UART_SetConfig+0x2b8>)
1004dc78:	4013      	ands	r3, r2
1004dc7a:	0019      	movs	r1, r3
1004dc7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dc7e:	681a      	ldr	r2, [r3, #0]
1004dc80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004dc82:	430b      	orrs	r3, r1
1004dc84:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
1004dc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dc88:	681b      	ldr	r3, [r3, #0]
1004dc8a:	685b      	ldr	r3, [r3, #4]
1004dc8c:	4a9c      	ldr	r2, [pc, #624]	@ (1004df00 <UART_SetConfig+0x2bc>)
1004dc8e:	4013      	ands	r3, r2
1004dc90:	0018      	movs	r0, r3
1004dc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dc94:	68d9      	ldr	r1, [r3, #12]
1004dc96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dc98:	681a      	ldr	r2, [r3, #0]
1004dc9a:	0003      	movs	r3, r0
1004dc9c:	430b      	orrs	r3, r1
1004dc9e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
1004dca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dca2:	699b      	ldr	r3, [r3, #24]
1004dca4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
1004dca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dca8:	681b      	ldr	r3, [r3, #0]
1004dcaa:	4a96      	ldr	r2, [pc, #600]	@ (1004df04 <UART_SetConfig+0x2c0>)
1004dcac:	4293      	cmp	r3, r2
1004dcae:	d004      	beq.n	1004dcba <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
1004dcb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dcb2:	6a1b      	ldr	r3, [r3, #32]
1004dcb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004dcb6:	4313      	orrs	r3, r2
1004dcb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
1004dcba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dcbc:	681b      	ldr	r3, [r3, #0]
1004dcbe:	689b      	ldr	r3, [r3, #8]
1004dcc0:	4a91      	ldr	r2, [pc, #580]	@ (1004df08 <UART_SetConfig+0x2c4>)
1004dcc2:	4013      	ands	r3, r2
1004dcc4:	0019      	movs	r1, r3
1004dcc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dcc8:	681a      	ldr	r2, [r3, #0]
1004dcca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004dccc:	430b      	orrs	r3, r1
1004dcce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
1004dcd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dcd2:	681b      	ldr	r3, [r3, #0]
1004dcd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004dcd6:	220f      	movs	r2, #15
1004dcd8:	4393      	bics	r3, r2
1004dcda:	0018      	movs	r0, r3
1004dcdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dcde:	6a59      	ldr	r1, [r3, #36]	@ 0x24
1004dce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dce2:	681a      	ldr	r2, [r3, #0]
1004dce4:	0003      	movs	r3, r0
1004dce6:	430b      	orrs	r3, r1
1004dce8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
1004dcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dcec:	681b      	ldr	r3, [r3, #0]
1004dcee:	4a85      	ldr	r2, [pc, #532]	@ (1004df04 <UART_SetConfig+0x2c0>)
1004dcf0:	4293      	cmp	r3, r2
1004dcf2:	d16d      	bne.n	1004ddd0 <UART_SetConfig+0x18c>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
1004dcf4:	2010      	movs	r0, #16
1004dcf6:	f7ff fa0b 	bl	1004d110 <HAL_RCCEx_GetPeriphCLKFreq>
1004dcfa:	0003      	movs	r3, r0
1004dcfc:	637b      	str	r3, [r7, #52]	@ 0x34
#else
    pclk = UART_PERIPHCLK;
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
1004dcfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004dd00:	2b00      	cmp	r3, #0
1004dd02:	d100      	bne.n	1004dd06 <UART_SetConfig+0xc2>
1004dd04:	e0e3      	b.n	1004dece <UART_SetConfig+0x28a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
1004dd06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dd08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004dd0a:	4b80      	ldr	r3, [pc, #512]	@ (1004df0c <UART_SetConfig+0x2c8>)
1004dd0c:	0052      	lsls	r2, r2, #1
1004dd0e:	5ad3      	ldrh	r3, [r2, r3]
1004dd10:	0019      	movs	r1, r3
1004dd12:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004dd14:	f7f2 fa94 	bl	10040240 <__udivsi3>
1004dd18:	0003      	movs	r3, r0
1004dd1a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
1004dd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dd1e:	685a      	ldr	r2, [r3, #4]
1004dd20:	0013      	movs	r3, r2
1004dd22:	005b      	lsls	r3, r3, #1
1004dd24:	189b      	adds	r3, r3, r2
1004dd26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004dd28:	429a      	cmp	r2, r3
1004dd2a:	d305      	bcc.n	1004dd38 <UART_SetConfig+0xf4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
1004dd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dd2e:	685b      	ldr	r3, [r3, #4]
1004dd30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
1004dd32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004dd34:	429a      	cmp	r2, r3
1004dd36:	d906      	bls.n	1004dd46 <UART_SetConfig+0x102>
      {
        ret = HAL_ERROR;
1004dd38:	231b      	movs	r3, #27
1004dd3a:	2220      	movs	r2, #32
1004dd3c:	189b      	adds	r3, r3, r2
1004dd3e:	19db      	adds	r3, r3, r7
1004dd40:	2201      	movs	r2, #1
1004dd42:	701a      	strb	r2, [r3, #0]
1004dd44:	e0c3      	b.n	1004dece <UART_SetConfig+0x28a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1004dd46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004dd48:	61bb      	str	r3, [r7, #24]
1004dd4a:	2300      	movs	r3, #0
1004dd4c:	61fb      	str	r3, [r7, #28]
1004dd4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dd50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004dd52:	4b6e      	ldr	r3, [pc, #440]	@ (1004df0c <UART_SetConfig+0x2c8>)
1004dd54:	0052      	lsls	r2, r2, #1
1004dd56:	5ad3      	ldrh	r3, [r2, r3]
1004dd58:	613b      	str	r3, [r7, #16]
1004dd5a:	2300      	movs	r3, #0
1004dd5c:	617b      	str	r3, [r7, #20]
1004dd5e:	693a      	ldr	r2, [r7, #16]
1004dd60:	697b      	ldr	r3, [r7, #20]
1004dd62:	69b8      	ldr	r0, [r7, #24]
1004dd64:	69f9      	ldr	r1, [r7, #28]
1004dd66:	f7f2 fc0b 	bl	10040580 <__aeabi_uldivmod>
1004dd6a:	0002      	movs	r2, r0
1004dd6c:	000b      	movs	r3, r1
1004dd6e:	0e11      	lsrs	r1, r2, #24
1004dd70:	021d      	lsls	r5, r3, #8
1004dd72:	430d      	orrs	r5, r1
1004dd74:	0214      	lsls	r4, r2, #8
1004dd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dd78:	685b      	ldr	r3, [r3, #4]
1004dd7a:	085b      	lsrs	r3, r3, #1
1004dd7c:	60bb      	str	r3, [r7, #8]
1004dd7e:	2300      	movs	r3, #0
1004dd80:	60fb      	str	r3, [r7, #12]
1004dd82:	68b8      	ldr	r0, [r7, #8]
1004dd84:	68f9      	ldr	r1, [r7, #12]
1004dd86:	1900      	adds	r0, r0, r4
1004dd88:	4169      	adcs	r1, r5
1004dd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dd8c:	685b      	ldr	r3, [r3, #4]
1004dd8e:	603b      	str	r3, [r7, #0]
1004dd90:	2300      	movs	r3, #0
1004dd92:	607b      	str	r3, [r7, #4]
1004dd94:	683a      	ldr	r2, [r7, #0]
1004dd96:	687b      	ldr	r3, [r7, #4]
1004dd98:	f7f2 fbf2 	bl	10040580 <__aeabi_uldivmod>
1004dd9c:	0002      	movs	r2, r0
1004dd9e:	000b      	movs	r3, r1
1004dda0:	0013      	movs	r3, r2
1004dda2:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
1004dda4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004dda6:	23c0      	movs	r3, #192	@ 0xc0
1004dda8:	009b      	lsls	r3, r3, #2
1004ddaa:	429a      	cmp	r2, r3
1004ddac:	d309      	bcc.n	1004ddc2 <UART_SetConfig+0x17e>
1004ddae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004ddb0:	2380      	movs	r3, #128	@ 0x80
1004ddb2:	035b      	lsls	r3, r3, #13
1004ddb4:	429a      	cmp	r2, r3
1004ddb6:	d204      	bcs.n	1004ddc2 <UART_SetConfig+0x17e>
        {
          huart->Instance->BRR = usartdiv;
1004ddb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ddba:	681b      	ldr	r3, [r3, #0]
1004ddbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004ddbe:	60da      	str	r2, [r3, #12]
1004ddc0:	e085      	b.n	1004dece <UART_SetConfig+0x28a>
        }
        else
        {
          ret = HAL_ERROR;
1004ddc2:	231b      	movs	r3, #27
1004ddc4:	2220      	movs	r2, #32
1004ddc6:	189b      	adds	r3, r3, r2
1004ddc8:	19db      	adds	r3, r3, r7
1004ddca:	2201      	movs	r2, #1
1004ddcc:	701a      	strb	r2, [r3, #0]
1004ddce:	e07e      	b.n	1004dece <UART_SetConfig+0x28a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
1004ddd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ddd2:	69da      	ldr	r2, [r3, #28]
1004ddd4:	2380      	movs	r3, #128	@ 0x80
1004ddd6:	021b      	lsls	r3, r3, #8
1004ddd8:	429a      	cmp	r2, r3
1004ddda:	d148      	bne.n	1004de6e <UART_SetConfig+0x22a>
  {
    pclk = UART_PERIPHCLK;
1004dddc:	4b4c      	ldr	r3, [pc, #304]	@ (1004df10 <UART_SetConfig+0x2cc>)
1004ddde:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
1004dde0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004dde2:	2b00      	cmp	r3, #0
1004dde4:	d100      	bne.n	1004dde8 <UART_SetConfig+0x1a4>
1004dde6:	e072      	b.n	1004dece <UART_SetConfig+0x28a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1004dde8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ddea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004ddec:	4b47      	ldr	r3, [pc, #284]	@ (1004df0c <UART_SetConfig+0x2c8>)
1004ddee:	0052      	lsls	r2, r2, #1
1004ddf0:	5ad3      	ldrh	r3, [r2, r3]
1004ddf2:	0019      	movs	r1, r3
1004ddf4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004ddf6:	f7f2 fa23 	bl	10040240 <__udivsi3>
1004ddfa:	0003      	movs	r3, r0
1004ddfc:	005a      	lsls	r2, r3, #1
1004ddfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004de00:	685b      	ldr	r3, [r3, #4]
1004de02:	085b      	lsrs	r3, r3, #1
1004de04:	18d2      	adds	r2, r2, r3
1004de06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004de08:	685b      	ldr	r3, [r3, #4]
1004de0a:	0019      	movs	r1, r3
1004de0c:	0010      	movs	r0, r2
1004de0e:	f7f2 fa17 	bl	10040240 <__udivsi3>
1004de12:	0003      	movs	r3, r0
1004de14:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1004de16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004de18:	2b0f      	cmp	r3, #15
1004de1a:	d921      	bls.n	1004de60 <UART_SetConfig+0x21c>
1004de1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004de1e:	2380      	movs	r3, #128	@ 0x80
1004de20:	025b      	lsls	r3, r3, #9
1004de22:	429a      	cmp	r2, r3
1004de24:	d21c      	bcs.n	1004de60 <UART_SetConfig+0x21c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
1004de26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004de28:	b29a      	uxth	r2, r3
1004de2a:	200e      	movs	r0, #14
1004de2c:	2420      	movs	r4, #32
1004de2e:	1903      	adds	r3, r0, r4
1004de30:	19db      	adds	r3, r3, r7
1004de32:	210f      	movs	r1, #15
1004de34:	438a      	bics	r2, r1
1004de36:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
1004de38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004de3a:	085b      	lsrs	r3, r3, #1
1004de3c:	b29b      	uxth	r3, r3
1004de3e:	2207      	movs	r2, #7
1004de40:	4013      	ands	r3, r2
1004de42:	b299      	uxth	r1, r3
1004de44:	1903      	adds	r3, r0, r4
1004de46:	19db      	adds	r3, r3, r7
1004de48:	1902      	adds	r2, r0, r4
1004de4a:	19d2      	adds	r2, r2, r7
1004de4c:	8812      	ldrh	r2, [r2, #0]
1004de4e:	430a      	orrs	r2, r1
1004de50:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
1004de52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004de54:	681b      	ldr	r3, [r3, #0]
1004de56:	1902      	adds	r2, r0, r4
1004de58:	19d2      	adds	r2, r2, r7
1004de5a:	8812      	ldrh	r2, [r2, #0]
1004de5c:	60da      	str	r2, [r3, #12]
1004de5e:	e036      	b.n	1004dece <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
1004de60:	231b      	movs	r3, #27
1004de62:	2220      	movs	r2, #32
1004de64:	189b      	adds	r3, r3, r2
1004de66:	19db      	adds	r3, r3, r7
1004de68:	2201      	movs	r2, #1
1004de6a:	701a      	strb	r2, [r3, #0]
1004de6c:	e02f      	b.n	1004dece <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
1004de6e:	4b28      	ldr	r3, [pc, #160]	@ (1004df10 <UART_SetConfig+0x2cc>)
1004de70:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
1004de72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004de74:	2b00      	cmp	r3, #0
1004de76:	d02a      	beq.n	1004dece <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1004de78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004de7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004de7c:	4b23      	ldr	r3, [pc, #140]	@ (1004df0c <UART_SetConfig+0x2c8>)
1004de7e:	0052      	lsls	r2, r2, #1
1004de80:	5ad3      	ldrh	r3, [r2, r3]
1004de82:	0019      	movs	r1, r3
1004de84:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004de86:	f7f2 f9db 	bl	10040240 <__udivsi3>
1004de8a:	0003      	movs	r3, r0
1004de8c:	001a      	movs	r2, r3
1004de8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004de90:	685b      	ldr	r3, [r3, #4]
1004de92:	085b      	lsrs	r3, r3, #1
1004de94:	18d2      	adds	r2, r2, r3
1004de96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004de98:	685b      	ldr	r3, [r3, #4]
1004de9a:	0019      	movs	r1, r3
1004de9c:	0010      	movs	r0, r2
1004de9e:	f7f2 f9cf 	bl	10040240 <__udivsi3>
1004dea2:	0003      	movs	r3, r0
1004dea4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1004dea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004dea8:	2b0f      	cmp	r3, #15
1004deaa:	d90a      	bls.n	1004dec2 <UART_SetConfig+0x27e>
1004deac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004deae:	2380      	movs	r3, #128	@ 0x80
1004deb0:	025b      	lsls	r3, r3, #9
1004deb2:	429a      	cmp	r2, r3
1004deb4:	d205      	bcs.n	1004dec2 <UART_SetConfig+0x27e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
1004deb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004deb8:	b29a      	uxth	r2, r3
1004deba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004debc:	681b      	ldr	r3, [r3, #0]
1004debe:	60da      	str	r2, [r3, #12]
1004dec0:	e005      	b.n	1004dece <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
1004dec2:	231b      	movs	r3, #27
1004dec4:	2220      	movs	r2, #32
1004dec6:	189b      	adds	r3, r3, r2
1004dec8:	19db      	adds	r3, r3, r7
1004deca:	2201      	movs	r2, #1
1004decc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
1004dece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ded0:	226a      	movs	r2, #106	@ 0x6a
1004ded2:	2101      	movs	r1, #1
1004ded4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
1004ded6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ded8:	2268      	movs	r2, #104	@ 0x68
1004deda:	2101      	movs	r1, #1
1004dedc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
1004dede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dee0:	2200      	movs	r2, #0
1004dee2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
1004dee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dee6:	2200      	movs	r2, #0
1004dee8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
1004deea:	231b      	movs	r3, #27
1004deec:	2220      	movs	r2, #32
1004deee:	189b      	adds	r3, r3, r2
1004def0:	19db      	adds	r3, r3, r7
1004def2:	781b      	ldrb	r3, [r3, #0]
}
1004def4:	0018      	movs	r0, r3
1004def6:	46bd      	mov	sp, r7
1004def8:	b010      	add	sp, #64	@ 0x40
1004defa:	bdb0      	pop	{r4, r5, r7, pc}
1004defc:	cfff69f3 	.word	0xcfff69f3
1004df00:	ffffcfff 	.word	0xffffcfff
1004df04:	41005000 	.word	0x41005000
1004df08:	11fff4ff 	.word	0x11fff4ff
1004df0c:	10069328 	.word	0x10069328
1004df10:	00f42400 	.word	0x00f42400

1004df14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
1004df14:	b580      	push	{r7, lr}
1004df16:	b082      	sub	sp, #8
1004df18:	af00      	add	r7, sp, #0
1004df1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
1004df1c:	687b      	ldr	r3, [r7, #4]
1004df1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004df20:	2208      	movs	r2, #8
1004df22:	4013      	ands	r3, r2
1004df24:	d00b      	beq.n	1004df3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
1004df26:	687b      	ldr	r3, [r7, #4]
1004df28:	681b      	ldr	r3, [r3, #0]
1004df2a:	685b      	ldr	r3, [r3, #4]
1004df2c:	4a4a      	ldr	r2, [pc, #296]	@ (1004e058 <UART_AdvFeatureConfig+0x144>)
1004df2e:	4013      	ands	r3, r2
1004df30:	0019      	movs	r1, r3
1004df32:	687b      	ldr	r3, [r7, #4]
1004df34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1004df36:	687b      	ldr	r3, [r7, #4]
1004df38:	681b      	ldr	r3, [r3, #0]
1004df3a:	430a      	orrs	r2, r1
1004df3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
1004df3e:	687b      	ldr	r3, [r7, #4]
1004df40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004df42:	2201      	movs	r2, #1
1004df44:	4013      	ands	r3, r2
1004df46:	d00b      	beq.n	1004df60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
1004df48:	687b      	ldr	r3, [r7, #4]
1004df4a:	681b      	ldr	r3, [r3, #0]
1004df4c:	685b      	ldr	r3, [r3, #4]
1004df4e:	4a43      	ldr	r2, [pc, #268]	@ (1004e05c <UART_AdvFeatureConfig+0x148>)
1004df50:	4013      	ands	r3, r2
1004df52:	0019      	movs	r1, r3
1004df54:	687b      	ldr	r3, [r7, #4]
1004df56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004df58:	687b      	ldr	r3, [r7, #4]
1004df5a:	681b      	ldr	r3, [r3, #0]
1004df5c:	430a      	orrs	r2, r1
1004df5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
1004df60:	687b      	ldr	r3, [r7, #4]
1004df62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004df64:	2202      	movs	r2, #2
1004df66:	4013      	ands	r3, r2
1004df68:	d00b      	beq.n	1004df82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
1004df6a:	687b      	ldr	r3, [r7, #4]
1004df6c:	681b      	ldr	r3, [r3, #0]
1004df6e:	685b      	ldr	r3, [r3, #4]
1004df70:	4a3b      	ldr	r2, [pc, #236]	@ (1004e060 <UART_AdvFeatureConfig+0x14c>)
1004df72:	4013      	ands	r3, r2
1004df74:	0019      	movs	r1, r3
1004df76:	687b      	ldr	r3, [r7, #4]
1004df78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1004df7a:	687b      	ldr	r3, [r7, #4]
1004df7c:	681b      	ldr	r3, [r3, #0]
1004df7e:	430a      	orrs	r2, r1
1004df80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
1004df82:	687b      	ldr	r3, [r7, #4]
1004df84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004df86:	2204      	movs	r2, #4
1004df88:	4013      	ands	r3, r2
1004df8a:	d00b      	beq.n	1004dfa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
1004df8c:	687b      	ldr	r3, [r7, #4]
1004df8e:	681b      	ldr	r3, [r3, #0]
1004df90:	685b      	ldr	r3, [r3, #4]
1004df92:	4a34      	ldr	r2, [pc, #208]	@ (1004e064 <UART_AdvFeatureConfig+0x150>)
1004df94:	4013      	ands	r3, r2
1004df96:	0019      	movs	r1, r3
1004df98:	687b      	ldr	r3, [r7, #4]
1004df9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1004df9c:	687b      	ldr	r3, [r7, #4]
1004df9e:	681b      	ldr	r3, [r3, #0]
1004dfa0:	430a      	orrs	r2, r1
1004dfa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
1004dfa4:	687b      	ldr	r3, [r7, #4]
1004dfa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004dfa8:	2210      	movs	r2, #16
1004dfaa:	4013      	ands	r3, r2
1004dfac:	d00b      	beq.n	1004dfc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
1004dfae:	687b      	ldr	r3, [r7, #4]
1004dfb0:	681b      	ldr	r3, [r3, #0]
1004dfb2:	689b      	ldr	r3, [r3, #8]
1004dfb4:	4a2c      	ldr	r2, [pc, #176]	@ (1004e068 <UART_AdvFeatureConfig+0x154>)
1004dfb6:	4013      	ands	r3, r2
1004dfb8:	0019      	movs	r1, r3
1004dfba:	687b      	ldr	r3, [r7, #4]
1004dfbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
1004dfbe:	687b      	ldr	r3, [r7, #4]
1004dfc0:	681b      	ldr	r3, [r3, #0]
1004dfc2:	430a      	orrs	r2, r1
1004dfc4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
1004dfc6:	687b      	ldr	r3, [r7, #4]
1004dfc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004dfca:	2220      	movs	r2, #32
1004dfcc:	4013      	ands	r3, r2
1004dfce:	d00b      	beq.n	1004dfe8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
1004dfd0:	687b      	ldr	r3, [r7, #4]
1004dfd2:	681b      	ldr	r3, [r3, #0]
1004dfd4:	689b      	ldr	r3, [r3, #8]
1004dfd6:	4a25      	ldr	r2, [pc, #148]	@ (1004e06c <UART_AdvFeatureConfig+0x158>)
1004dfd8:	4013      	ands	r3, r2
1004dfda:	0019      	movs	r1, r3
1004dfdc:	687b      	ldr	r3, [r7, #4]
1004dfde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004dfe0:	687b      	ldr	r3, [r7, #4]
1004dfe2:	681b      	ldr	r3, [r3, #0]
1004dfe4:	430a      	orrs	r2, r1
1004dfe6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
1004dfe8:	687b      	ldr	r3, [r7, #4]
1004dfea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004dfec:	2240      	movs	r2, #64	@ 0x40
1004dfee:	4013      	ands	r3, r2
1004dff0:	d01d      	beq.n	1004e02e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
1004dff2:	687b      	ldr	r3, [r7, #4]
1004dff4:	681b      	ldr	r3, [r3, #0]
1004dff6:	685b      	ldr	r3, [r3, #4]
1004dff8:	4a1d      	ldr	r2, [pc, #116]	@ (1004e070 <UART_AdvFeatureConfig+0x15c>)
1004dffa:	4013      	ands	r3, r2
1004dffc:	0019      	movs	r1, r3
1004dffe:	687b      	ldr	r3, [r7, #4]
1004e000:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004e002:	687b      	ldr	r3, [r7, #4]
1004e004:	681b      	ldr	r3, [r3, #0]
1004e006:	430a      	orrs	r2, r1
1004e008:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
1004e00a:	687b      	ldr	r3, [r7, #4]
1004e00c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004e00e:	2380      	movs	r3, #128	@ 0x80
1004e010:	035b      	lsls	r3, r3, #13
1004e012:	429a      	cmp	r2, r3
1004e014:	d10b      	bne.n	1004e02e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
1004e016:	687b      	ldr	r3, [r7, #4]
1004e018:	681b      	ldr	r3, [r3, #0]
1004e01a:	685b      	ldr	r3, [r3, #4]
1004e01c:	4a15      	ldr	r2, [pc, #84]	@ (1004e074 <UART_AdvFeatureConfig+0x160>)
1004e01e:	4013      	ands	r3, r2
1004e020:	0019      	movs	r1, r3
1004e022:	687b      	ldr	r3, [r7, #4]
1004e024:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
1004e026:	687b      	ldr	r3, [r7, #4]
1004e028:	681b      	ldr	r3, [r3, #0]
1004e02a:	430a      	orrs	r2, r1
1004e02c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
1004e02e:	687b      	ldr	r3, [r7, #4]
1004e030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004e032:	2280      	movs	r2, #128	@ 0x80
1004e034:	4013      	ands	r3, r2
1004e036:	d00b      	beq.n	1004e050 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
1004e038:	687b      	ldr	r3, [r7, #4]
1004e03a:	681b      	ldr	r3, [r3, #0]
1004e03c:	685b      	ldr	r3, [r3, #4]
1004e03e:	4a0e      	ldr	r2, [pc, #56]	@ (1004e078 <UART_AdvFeatureConfig+0x164>)
1004e040:	4013      	ands	r3, r2
1004e042:	0019      	movs	r1, r3
1004e044:	687b      	ldr	r3, [r7, #4]
1004e046:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
1004e048:	687b      	ldr	r3, [r7, #4]
1004e04a:	681b      	ldr	r3, [r3, #0]
1004e04c:	430a      	orrs	r2, r1
1004e04e:	605a      	str	r2, [r3, #4]
  }
}
1004e050:	46c0      	nop			@ (mov r8, r8)
1004e052:	46bd      	mov	sp, r7
1004e054:	b002      	add	sp, #8
1004e056:	bd80      	pop	{r7, pc}
1004e058:	ffff7fff 	.word	0xffff7fff
1004e05c:	fffdffff 	.word	0xfffdffff
1004e060:	fffeffff 	.word	0xfffeffff
1004e064:	fffbffff 	.word	0xfffbffff
1004e068:	ffffefff 	.word	0xffffefff
1004e06c:	ffffdfff 	.word	0xffffdfff
1004e070:	ffefffff 	.word	0xffefffff
1004e074:	ff9fffff 	.word	0xff9fffff
1004e078:	fff7ffff 	.word	0xfff7ffff

1004e07c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
1004e07c:	b580      	push	{r7, lr}
1004e07e:	b092      	sub	sp, #72	@ 0x48
1004e080:	af02      	add	r7, sp, #8
1004e082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
1004e084:	687b      	ldr	r3, [r7, #4]
1004e086:	2290      	movs	r2, #144	@ 0x90
1004e088:	2100      	movs	r1, #0
1004e08a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
1004e08c:	f7f9 fc00 	bl	10047890 <HAL_GetTick>
1004e090:	0003      	movs	r3, r0
1004e092:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
1004e094:	687b      	ldr	r3, [r7, #4]
1004e096:	681b      	ldr	r3, [r3, #0]
1004e098:	681b      	ldr	r3, [r3, #0]
1004e09a:	2208      	movs	r2, #8
1004e09c:	4013      	ands	r3, r2
1004e09e:	2b08      	cmp	r3, #8
1004e0a0:	d12d      	bne.n	1004e0fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1004e0a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004e0a4:	2280      	movs	r2, #128	@ 0x80
1004e0a6:	0391      	lsls	r1, r2, #14
1004e0a8:	6878      	ldr	r0, [r7, #4]
1004e0aa:	4a47      	ldr	r2, [pc, #284]	@ (1004e1c8 <UART_CheckIdleState+0x14c>)
1004e0ac:	9200      	str	r2, [sp, #0]
1004e0ae:	2200      	movs	r2, #0
1004e0b0:	f000 f88e 	bl	1004e1d0 <UART_WaitOnFlagUntilTimeout>
1004e0b4:	1e03      	subs	r3, r0, #0
1004e0b6:	d022      	beq.n	1004e0fe <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e0b8:	f3ef 8310 	mrs	r3, PRIMASK
1004e0bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
1004e0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
1004e0c0:	63bb      	str	r3, [r7, #56]	@ 0x38
1004e0c2:	2301      	movs	r3, #1
1004e0c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004e0c8:	f383 8810 	msr	PRIMASK, r3
}
1004e0cc:	46c0      	nop			@ (mov r8, r8)
1004e0ce:	687b      	ldr	r3, [r7, #4]
1004e0d0:	681b      	ldr	r3, [r3, #0]
1004e0d2:	681a      	ldr	r2, [r3, #0]
1004e0d4:	687b      	ldr	r3, [r7, #4]
1004e0d6:	681b      	ldr	r3, [r3, #0]
1004e0d8:	2180      	movs	r1, #128	@ 0x80
1004e0da:	438a      	bics	r2, r1
1004e0dc:	601a      	str	r2, [r3, #0]
1004e0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004e0e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004e0e4:	f383 8810 	msr	PRIMASK, r3
}
1004e0e8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
1004e0ea:	687b      	ldr	r3, [r7, #4]
1004e0ec:	2288      	movs	r2, #136	@ 0x88
1004e0ee:	2120      	movs	r1, #32
1004e0f0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
1004e0f2:	687b      	ldr	r3, [r7, #4]
1004e0f4:	2284      	movs	r2, #132	@ 0x84
1004e0f6:	2100      	movs	r1, #0
1004e0f8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
1004e0fa:	2303      	movs	r3, #3
1004e0fc:	e060      	b.n	1004e1c0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
1004e0fe:	687b      	ldr	r3, [r7, #4]
1004e100:	681b      	ldr	r3, [r3, #0]
1004e102:	681b      	ldr	r3, [r3, #0]
1004e104:	2204      	movs	r2, #4
1004e106:	4013      	ands	r3, r2
1004e108:	2b04      	cmp	r3, #4
1004e10a:	d146      	bne.n	1004e19a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1004e10c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004e10e:	2280      	movs	r2, #128	@ 0x80
1004e110:	03d1      	lsls	r1, r2, #15
1004e112:	6878      	ldr	r0, [r7, #4]
1004e114:	4a2c      	ldr	r2, [pc, #176]	@ (1004e1c8 <UART_CheckIdleState+0x14c>)
1004e116:	9200      	str	r2, [sp, #0]
1004e118:	2200      	movs	r2, #0
1004e11a:	f000 f859 	bl	1004e1d0 <UART_WaitOnFlagUntilTimeout>
1004e11e:	1e03      	subs	r3, r0, #0
1004e120:	d03b      	beq.n	1004e19a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e122:	f3ef 8310 	mrs	r3, PRIMASK
1004e126:	60fb      	str	r3, [r7, #12]
  return(result);
1004e128:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004e12a:	637b      	str	r3, [r7, #52]	@ 0x34
1004e12c:	2301      	movs	r3, #1
1004e12e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e130:	693b      	ldr	r3, [r7, #16]
1004e132:	f383 8810 	msr	PRIMASK, r3
}
1004e136:	46c0      	nop			@ (mov r8, r8)
1004e138:	687b      	ldr	r3, [r7, #4]
1004e13a:	681b      	ldr	r3, [r3, #0]
1004e13c:	681a      	ldr	r2, [r3, #0]
1004e13e:	687b      	ldr	r3, [r7, #4]
1004e140:	681b      	ldr	r3, [r3, #0]
1004e142:	4922      	ldr	r1, [pc, #136]	@ (1004e1cc <UART_CheckIdleState+0x150>)
1004e144:	400a      	ands	r2, r1
1004e146:	601a      	str	r2, [r3, #0]
1004e148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004e14a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e14c:	697b      	ldr	r3, [r7, #20]
1004e14e:	f383 8810 	msr	PRIMASK, r3
}
1004e152:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e154:	f3ef 8310 	mrs	r3, PRIMASK
1004e158:	61bb      	str	r3, [r7, #24]
  return(result);
1004e15a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1004e15c:	633b      	str	r3, [r7, #48]	@ 0x30
1004e15e:	2301      	movs	r3, #1
1004e160:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e162:	69fb      	ldr	r3, [r7, #28]
1004e164:	f383 8810 	msr	PRIMASK, r3
}
1004e168:	46c0      	nop			@ (mov r8, r8)
1004e16a:	687b      	ldr	r3, [r7, #4]
1004e16c:	681b      	ldr	r3, [r3, #0]
1004e16e:	689a      	ldr	r2, [r3, #8]
1004e170:	687b      	ldr	r3, [r7, #4]
1004e172:	681b      	ldr	r3, [r3, #0]
1004e174:	2101      	movs	r1, #1
1004e176:	438a      	bics	r2, r1
1004e178:	609a      	str	r2, [r3, #8]
1004e17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004e17c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e17e:	6a3b      	ldr	r3, [r7, #32]
1004e180:	f383 8810 	msr	PRIMASK, r3
}
1004e184:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
1004e186:	687b      	ldr	r3, [r7, #4]
1004e188:	228c      	movs	r2, #140	@ 0x8c
1004e18a:	2120      	movs	r1, #32
1004e18c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
1004e18e:	687b      	ldr	r3, [r7, #4]
1004e190:	2284      	movs	r2, #132	@ 0x84
1004e192:	2100      	movs	r1, #0
1004e194:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
1004e196:	2303      	movs	r3, #3
1004e198:	e012      	b.n	1004e1c0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
1004e19a:	687b      	ldr	r3, [r7, #4]
1004e19c:	2288      	movs	r2, #136	@ 0x88
1004e19e:	2120      	movs	r1, #32
1004e1a0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
1004e1a2:	687b      	ldr	r3, [r7, #4]
1004e1a4:	228c      	movs	r2, #140	@ 0x8c
1004e1a6:	2120      	movs	r1, #32
1004e1a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004e1aa:	687b      	ldr	r3, [r7, #4]
1004e1ac:	2200      	movs	r2, #0
1004e1ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
1004e1b0:	687b      	ldr	r3, [r7, #4]
1004e1b2:	2200      	movs	r2, #0
1004e1b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
1004e1b6:	687b      	ldr	r3, [r7, #4]
1004e1b8:	2284      	movs	r2, #132	@ 0x84
1004e1ba:	2100      	movs	r1, #0
1004e1bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004e1be:	2300      	movs	r3, #0
}
1004e1c0:	0018      	movs	r0, r3
1004e1c2:	46bd      	mov	sp, r7
1004e1c4:	b010      	add	sp, #64	@ 0x40
1004e1c6:	bd80      	pop	{r7, pc}
1004e1c8:	01ffffff 	.word	0x01ffffff
1004e1cc:	fffffedf 	.word	0xfffffedf

1004e1d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
1004e1d0:	b580      	push	{r7, lr}
1004e1d2:	b084      	sub	sp, #16
1004e1d4:	af00      	add	r7, sp, #0
1004e1d6:	60f8      	str	r0, [r7, #12]
1004e1d8:	60b9      	str	r1, [r7, #8]
1004e1da:	603b      	str	r3, [r7, #0]
1004e1dc:	1dfb      	adds	r3, r7, #7
1004e1de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1004e1e0:	e051      	b.n	1004e286 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
1004e1e2:	69bb      	ldr	r3, [r7, #24]
1004e1e4:	3301      	adds	r3, #1
1004e1e6:	d04e      	beq.n	1004e286 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
1004e1e8:	f7f9 fb52 	bl	10047890 <HAL_GetTick>
1004e1ec:	0002      	movs	r2, r0
1004e1ee:	683b      	ldr	r3, [r7, #0]
1004e1f0:	1ad3      	subs	r3, r2, r3
1004e1f2:	69ba      	ldr	r2, [r7, #24]
1004e1f4:	429a      	cmp	r2, r3
1004e1f6:	d302      	bcc.n	1004e1fe <UART_WaitOnFlagUntilTimeout+0x2e>
1004e1f8:	69bb      	ldr	r3, [r7, #24]
1004e1fa:	2b00      	cmp	r3, #0
1004e1fc:	d101      	bne.n	1004e202 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
1004e1fe:	2303      	movs	r3, #3
1004e200:	e051      	b.n	1004e2a6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
1004e202:	68fb      	ldr	r3, [r7, #12]
1004e204:	681b      	ldr	r3, [r3, #0]
1004e206:	681b      	ldr	r3, [r3, #0]
1004e208:	2204      	movs	r2, #4
1004e20a:	4013      	ands	r3, r2
1004e20c:	d03b      	beq.n	1004e286 <UART_WaitOnFlagUntilTimeout+0xb6>
1004e20e:	68bb      	ldr	r3, [r7, #8]
1004e210:	2b80      	cmp	r3, #128	@ 0x80
1004e212:	d038      	beq.n	1004e286 <UART_WaitOnFlagUntilTimeout+0xb6>
1004e214:	68bb      	ldr	r3, [r7, #8]
1004e216:	2b40      	cmp	r3, #64	@ 0x40
1004e218:	d035      	beq.n	1004e286 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
1004e21a:	68fb      	ldr	r3, [r7, #12]
1004e21c:	681b      	ldr	r3, [r3, #0]
1004e21e:	69db      	ldr	r3, [r3, #28]
1004e220:	2208      	movs	r2, #8
1004e222:	4013      	ands	r3, r2
1004e224:	2b08      	cmp	r3, #8
1004e226:	d111      	bne.n	1004e24c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
1004e228:	68fb      	ldr	r3, [r7, #12]
1004e22a:	681b      	ldr	r3, [r3, #0]
1004e22c:	2208      	movs	r2, #8
1004e22e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1004e230:	68fb      	ldr	r3, [r7, #12]
1004e232:	0018      	movs	r0, r3
1004e234:	f000 f83c 	bl	1004e2b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
1004e238:	68fb      	ldr	r3, [r7, #12]
1004e23a:	2290      	movs	r2, #144	@ 0x90
1004e23c:	2108      	movs	r1, #8
1004e23e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004e240:	68fb      	ldr	r3, [r7, #12]
1004e242:	2284      	movs	r2, #132	@ 0x84
1004e244:	2100      	movs	r1, #0
1004e246:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
1004e248:	2301      	movs	r3, #1
1004e24a:	e02c      	b.n	1004e2a6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
1004e24c:	68fb      	ldr	r3, [r7, #12]
1004e24e:	681b      	ldr	r3, [r3, #0]
1004e250:	69da      	ldr	r2, [r3, #28]
1004e252:	2380      	movs	r3, #128	@ 0x80
1004e254:	011b      	lsls	r3, r3, #4
1004e256:	401a      	ands	r2, r3
1004e258:	2380      	movs	r3, #128	@ 0x80
1004e25a:	011b      	lsls	r3, r3, #4
1004e25c:	429a      	cmp	r2, r3
1004e25e:	d112      	bne.n	1004e286 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
1004e260:	68fb      	ldr	r3, [r7, #12]
1004e262:	681b      	ldr	r3, [r3, #0]
1004e264:	2280      	movs	r2, #128	@ 0x80
1004e266:	0112      	lsls	r2, r2, #4
1004e268:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1004e26a:	68fb      	ldr	r3, [r7, #12]
1004e26c:	0018      	movs	r0, r3
1004e26e:	f000 f81f 	bl	1004e2b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
1004e272:	68fb      	ldr	r3, [r7, #12]
1004e274:	2290      	movs	r2, #144	@ 0x90
1004e276:	2120      	movs	r1, #32
1004e278:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004e27a:	68fb      	ldr	r3, [r7, #12]
1004e27c:	2284      	movs	r2, #132	@ 0x84
1004e27e:	2100      	movs	r1, #0
1004e280:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
1004e282:	2303      	movs	r3, #3
1004e284:	e00f      	b.n	1004e2a6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1004e286:	68fb      	ldr	r3, [r7, #12]
1004e288:	681b      	ldr	r3, [r3, #0]
1004e28a:	69db      	ldr	r3, [r3, #28]
1004e28c:	68ba      	ldr	r2, [r7, #8]
1004e28e:	4013      	ands	r3, r2
1004e290:	68ba      	ldr	r2, [r7, #8]
1004e292:	1ad3      	subs	r3, r2, r3
1004e294:	425a      	negs	r2, r3
1004e296:	4153      	adcs	r3, r2
1004e298:	b2db      	uxtb	r3, r3
1004e29a:	001a      	movs	r2, r3
1004e29c:	1dfb      	adds	r3, r7, #7
1004e29e:	781b      	ldrb	r3, [r3, #0]
1004e2a0:	429a      	cmp	r2, r3
1004e2a2:	d09e      	beq.n	1004e1e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
1004e2a4:	2300      	movs	r3, #0
}
1004e2a6:	0018      	movs	r0, r3
1004e2a8:	46bd      	mov	sp, r7
1004e2aa:	b004      	add	sp, #16
1004e2ac:	bd80      	pop	{r7, pc}
	...

1004e2b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
1004e2b0:	b580      	push	{r7, lr}
1004e2b2:	b08e      	sub	sp, #56	@ 0x38
1004e2b4:	af00      	add	r7, sp, #0
1004e2b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e2b8:	f3ef 8310 	mrs	r3, PRIMASK
1004e2bc:	617b      	str	r3, [r7, #20]
  return(result);
1004e2be:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004e2c0:	637b      	str	r3, [r7, #52]	@ 0x34
1004e2c2:	2301      	movs	r3, #1
1004e2c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e2c6:	69bb      	ldr	r3, [r7, #24]
1004e2c8:	f383 8810 	msr	PRIMASK, r3
}
1004e2cc:	46c0      	nop			@ (mov r8, r8)
1004e2ce:	687b      	ldr	r3, [r7, #4]
1004e2d0:	681b      	ldr	r3, [r3, #0]
1004e2d2:	681a      	ldr	r2, [r3, #0]
1004e2d4:	687b      	ldr	r3, [r7, #4]
1004e2d6:	681b      	ldr	r3, [r3, #0]
1004e2d8:	4926      	ldr	r1, [pc, #152]	@ (1004e374 <UART_EndRxTransfer+0xc4>)
1004e2da:	400a      	ands	r2, r1
1004e2dc:	601a      	str	r2, [r3, #0]
1004e2de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004e2e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e2e2:	69fb      	ldr	r3, [r7, #28]
1004e2e4:	f383 8810 	msr	PRIMASK, r3
}
1004e2e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e2ea:	f3ef 8310 	mrs	r3, PRIMASK
1004e2ee:	623b      	str	r3, [r7, #32]
  return(result);
1004e2f0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
1004e2f2:	633b      	str	r3, [r7, #48]	@ 0x30
1004e2f4:	2301      	movs	r3, #1
1004e2f6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e2fa:	f383 8810 	msr	PRIMASK, r3
}
1004e2fe:	46c0      	nop			@ (mov r8, r8)
1004e300:	687b      	ldr	r3, [r7, #4]
1004e302:	681b      	ldr	r3, [r3, #0]
1004e304:	689a      	ldr	r2, [r3, #8]
1004e306:	687b      	ldr	r3, [r7, #4]
1004e308:	681b      	ldr	r3, [r3, #0]
1004e30a:	491b      	ldr	r1, [pc, #108]	@ (1004e378 <UART_EndRxTransfer+0xc8>)
1004e30c:	400a      	ands	r2, r1
1004e30e:	609a      	str	r2, [r3, #8]
1004e310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004e312:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004e316:	f383 8810 	msr	PRIMASK, r3
}
1004e31a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
1004e31c:	687b      	ldr	r3, [r7, #4]
1004e31e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
1004e320:	2b01      	cmp	r3, #1
1004e322:	d118      	bne.n	1004e356 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e324:	f3ef 8310 	mrs	r3, PRIMASK
1004e328:	60bb      	str	r3, [r7, #8]
  return(result);
1004e32a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
1004e32c:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004e32e:	2301      	movs	r3, #1
1004e330:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e332:	68fb      	ldr	r3, [r7, #12]
1004e334:	f383 8810 	msr	PRIMASK, r3
}
1004e338:	46c0      	nop			@ (mov r8, r8)
1004e33a:	687b      	ldr	r3, [r7, #4]
1004e33c:	681b      	ldr	r3, [r3, #0]
1004e33e:	681a      	ldr	r2, [r3, #0]
1004e340:	687b      	ldr	r3, [r7, #4]
1004e342:	681b      	ldr	r3, [r3, #0]
1004e344:	2110      	movs	r1, #16
1004e346:	438a      	bics	r2, r1
1004e348:	601a      	str	r2, [r3, #0]
1004e34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004e34c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e34e:	693b      	ldr	r3, [r7, #16]
1004e350:	f383 8810 	msr	PRIMASK, r3
}
1004e354:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
1004e356:	687b      	ldr	r3, [r7, #4]
1004e358:	228c      	movs	r2, #140	@ 0x8c
1004e35a:	2120      	movs	r1, #32
1004e35c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004e35e:	687b      	ldr	r3, [r7, #4]
1004e360:	2200      	movs	r2, #0
1004e362:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
1004e364:	687b      	ldr	r3, [r7, #4]
1004e366:	2200      	movs	r2, #0
1004e368:	675a      	str	r2, [r3, #116]	@ 0x74
}
1004e36a:	46c0      	nop			@ (mov r8, r8)
1004e36c:	46bd      	mov	sp, r7
1004e36e:	b00e      	add	sp, #56	@ 0x38
1004e370:	bd80      	pop	{r7, pc}
1004e372:	46c0      	nop			@ (mov r8, r8)
1004e374:	fffffedf 	.word	0xfffffedf
1004e378:	effffffe 	.word	0xeffffffe

1004e37c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
1004e37c:	b580      	push	{r7, lr}
1004e37e:	b082      	sub	sp, #8
1004e380:	af00      	add	r7, sp, #0
1004e382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
1004e384:	46c0      	nop			@ (mov r8, r8)
1004e386:	46bd      	mov	sp, r7
1004e388:	b002      	add	sp, #8
1004e38a:	bd80      	pop	{r7, pc}

1004e38c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
1004e38c:	b580      	push	{r7, lr}
1004e38e:	b082      	sub	sp, #8
1004e390:	af00      	add	r7, sp, #0
1004e392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
1004e394:	46c0      	nop			@ (mov r8, r8)
1004e396:	46bd      	mov	sp, r7
1004e398:	b002      	add	sp, #8
1004e39a:	bd80      	pop	{r7, pc}

1004e39c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
1004e39c:	b580      	push	{r7, lr}
1004e39e:	b082      	sub	sp, #8
1004e3a0:	af00      	add	r7, sp, #0
1004e3a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
1004e3a4:	46c0      	nop			@ (mov r8, r8)
1004e3a6:	46bd      	mov	sp, r7
1004e3a8:	b002      	add	sp, #8
1004e3aa:	bd80      	pop	{r7, pc}

1004e3ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1004e3ac:	b580      	push	{r7, lr}
1004e3ae:	b084      	sub	sp, #16
1004e3b0:	af00      	add	r7, sp, #0
1004e3b2:	6078      	str	r0, [r7, #4]
1004e3b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004e3b6:	687b      	ldr	r3, [r7, #4]
1004e3b8:	2284      	movs	r2, #132	@ 0x84
1004e3ba:	5c9b      	ldrb	r3, [r3, r2]
1004e3bc:	2b01      	cmp	r3, #1
1004e3be:	d101      	bne.n	1004e3c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
1004e3c0:	2302      	movs	r3, #2
1004e3c2:	e02e      	b.n	1004e422 <HAL_UARTEx_SetTxFifoThreshold+0x76>
1004e3c4:	687b      	ldr	r3, [r7, #4]
1004e3c6:	2284      	movs	r2, #132	@ 0x84
1004e3c8:	2101      	movs	r1, #1
1004e3ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004e3cc:	687b      	ldr	r3, [r7, #4]
1004e3ce:	2288      	movs	r2, #136	@ 0x88
1004e3d0:	2124      	movs	r1, #36	@ 0x24
1004e3d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004e3d4:	687b      	ldr	r3, [r7, #4]
1004e3d6:	681b      	ldr	r3, [r3, #0]
1004e3d8:	681b      	ldr	r3, [r3, #0]
1004e3da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004e3dc:	687b      	ldr	r3, [r7, #4]
1004e3de:	681b      	ldr	r3, [r3, #0]
1004e3e0:	681a      	ldr	r2, [r3, #0]
1004e3e2:	687b      	ldr	r3, [r7, #4]
1004e3e4:	681b      	ldr	r3, [r3, #0]
1004e3e6:	2101      	movs	r1, #1
1004e3e8:	438a      	bics	r2, r1
1004e3ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
1004e3ec:	687b      	ldr	r3, [r7, #4]
1004e3ee:	681b      	ldr	r3, [r3, #0]
1004e3f0:	689b      	ldr	r3, [r3, #8]
1004e3f2:	00db      	lsls	r3, r3, #3
1004e3f4:	08d9      	lsrs	r1, r3, #3
1004e3f6:	687b      	ldr	r3, [r7, #4]
1004e3f8:	681b      	ldr	r3, [r3, #0]
1004e3fa:	683a      	ldr	r2, [r7, #0]
1004e3fc:	430a      	orrs	r2, r1
1004e3fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004e400:	687b      	ldr	r3, [r7, #4]
1004e402:	0018      	movs	r0, r3
1004e404:	f000 f854 	bl	1004e4b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004e408:	687b      	ldr	r3, [r7, #4]
1004e40a:	681b      	ldr	r3, [r3, #0]
1004e40c:	68fa      	ldr	r2, [r7, #12]
1004e40e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004e410:	687b      	ldr	r3, [r7, #4]
1004e412:	2288      	movs	r2, #136	@ 0x88
1004e414:	2120      	movs	r1, #32
1004e416:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004e418:	687b      	ldr	r3, [r7, #4]
1004e41a:	2284      	movs	r2, #132	@ 0x84
1004e41c:	2100      	movs	r1, #0
1004e41e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004e420:	2300      	movs	r3, #0
}
1004e422:	0018      	movs	r0, r3
1004e424:	46bd      	mov	sp, r7
1004e426:	b004      	add	sp, #16
1004e428:	bd80      	pop	{r7, pc}
	...

1004e42c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1004e42c:	b580      	push	{r7, lr}
1004e42e:	b084      	sub	sp, #16
1004e430:	af00      	add	r7, sp, #0
1004e432:	6078      	str	r0, [r7, #4]
1004e434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004e436:	687b      	ldr	r3, [r7, #4]
1004e438:	2284      	movs	r2, #132	@ 0x84
1004e43a:	5c9b      	ldrb	r3, [r3, r2]
1004e43c:	2b01      	cmp	r3, #1
1004e43e:	d101      	bne.n	1004e444 <HAL_UARTEx_SetRxFifoThreshold+0x18>
1004e440:	2302      	movs	r3, #2
1004e442:	e02f      	b.n	1004e4a4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
1004e444:	687b      	ldr	r3, [r7, #4]
1004e446:	2284      	movs	r2, #132	@ 0x84
1004e448:	2101      	movs	r1, #1
1004e44a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004e44c:	687b      	ldr	r3, [r7, #4]
1004e44e:	2288      	movs	r2, #136	@ 0x88
1004e450:	2124      	movs	r1, #36	@ 0x24
1004e452:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004e454:	687b      	ldr	r3, [r7, #4]
1004e456:	681b      	ldr	r3, [r3, #0]
1004e458:	681b      	ldr	r3, [r3, #0]
1004e45a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004e45c:	687b      	ldr	r3, [r7, #4]
1004e45e:	681b      	ldr	r3, [r3, #0]
1004e460:	681a      	ldr	r2, [r3, #0]
1004e462:	687b      	ldr	r3, [r7, #4]
1004e464:	681b      	ldr	r3, [r3, #0]
1004e466:	2101      	movs	r1, #1
1004e468:	438a      	bics	r2, r1
1004e46a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
1004e46c:	687b      	ldr	r3, [r7, #4]
1004e46e:	681b      	ldr	r3, [r3, #0]
1004e470:	689b      	ldr	r3, [r3, #8]
1004e472:	4a0e      	ldr	r2, [pc, #56]	@ (1004e4ac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
1004e474:	4013      	ands	r3, r2
1004e476:	0019      	movs	r1, r3
1004e478:	687b      	ldr	r3, [r7, #4]
1004e47a:	681b      	ldr	r3, [r3, #0]
1004e47c:	683a      	ldr	r2, [r7, #0]
1004e47e:	430a      	orrs	r2, r1
1004e480:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004e482:	687b      	ldr	r3, [r7, #4]
1004e484:	0018      	movs	r0, r3
1004e486:	f000 f813 	bl	1004e4b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004e48a:	687b      	ldr	r3, [r7, #4]
1004e48c:	681b      	ldr	r3, [r3, #0]
1004e48e:	68fa      	ldr	r2, [r7, #12]
1004e490:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004e492:	687b      	ldr	r3, [r7, #4]
1004e494:	2288      	movs	r2, #136	@ 0x88
1004e496:	2120      	movs	r1, #32
1004e498:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004e49a:	687b      	ldr	r3, [r7, #4]
1004e49c:	2284      	movs	r2, #132	@ 0x84
1004e49e:	2100      	movs	r1, #0
1004e4a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004e4a2:	2300      	movs	r3, #0
}
1004e4a4:	0018      	movs	r0, r3
1004e4a6:	46bd      	mov	sp, r7
1004e4a8:	b004      	add	sp, #16
1004e4aa:	bd80      	pop	{r7, pc}
1004e4ac:	f1ffffff 	.word	0xf1ffffff

1004e4b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
1004e4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e4b2:	b085      	sub	sp, #20
1004e4b4:	af00      	add	r7, sp, #0
1004e4b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
1004e4b8:	687b      	ldr	r3, [r7, #4]
1004e4ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
1004e4bc:	2b00      	cmp	r3, #0
1004e4be:	d108      	bne.n	1004e4d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
1004e4c0:	687b      	ldr	r3, [r7, #4]
1004e4c2:	226a      	movs	r2, #106	@ 0x6a
1004e4c4:	2101      	movs	r1, #1
1004e4c6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
1004e4c8:	687b      	ldr	r3, [r7, #4]
1004e4ca:	2268      	movs	r2, #104	@ 0x68
1004e4cc:	2101      	movs	r1, #1
1004e4ce:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
1004e4d0:	e043      	b.n	1004e55a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
1004e4d2:	260f      	movs	r6, #15
1004e4d4:	19bb      	adds	r3, r7, r6
1004e4d6:	2208      	movs	r2, #8
1004e4d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
1004e4da:	200e      	movs	r0, #14
1004e4dc:	183b      	adds	r3, r7, r0
1004e4de:	2208      	movs	r2, #8
1004e4e0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1004e4e2:	687b      	ldr	r3, [r7, #4]
1004e4e4:	681b      	ldr	r3, [r3, #0]
1004e4e6:	689b      	ldr	r3, [r3, #8]
1004e4e8:	0e5b      	lsrs	r3, r3, #25
1004e4ea:	b2da      	uxtb	r2, r3
1004e4ec:	240d      	movs	r4, #13
1004e4ee:	193b      	adds	r3, r7, r4
1004e4f0:	2107      	movs	r1, #7
1004e4f2:	400a      	ands	r2, r1
1004e4f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
1004e4f6:	687b      	ldr	r3, [r7, #4]
1004e4f8:	681b      	ldr	r3, [r3, #0]
1004e4fa:	689b      	ldr	r3, [r3, #8]
1004e4fc:	0f5b      	lsrs	r3, r3, #29
1004e4fe:	b2da      	uxtb	r2, r3
1004e500:	250c      	movs	r5, #12
1004e502:	197b      	adds	r3, r7, r5
1004e504:	2107      	movs	r1, #7
1004e506:	400a      	ands	r2, r1
1004e508:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004e50a:	183b      	adds	r3, r7, r0
1004e50c:	781b      	ldrb	r3, [r3, #0]
1004e50e:	197a      	adds	r2, r7, r5
1004e510:	7812      	ldrb	r2, [r2, #0]
1004e512:	4914      	ldr	r1, [pc, #80]	@ (1004e564 <UARTEx_SetNbDataToProcess+0xb4>)
1004e514:	5c8a      	ldrb	r2, [r1, r2]
1004e516:	435a      	muls	r2, r3
1004e518:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
1004e51a:	197b      	adds	r3, r7, r5
1004e51c:	781b      	ldrb	r3, [r3, #0]
1004e51e:	4a12      	ldr	r2, [pc, #72]	@ (1004e568 <UARTEx_SetNbDataToProcess+0xb8>)
1004e520:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004e522:	0019      	movs	r1, r3
1004e524:	f7f1 ff16 	bl	10040354 <__divsi3>
1004e528:	0003      	movs	r3, r0
1004e52a:	b299      	uxth	r1, r3
1004e52c:	687b      	ldr	r3, [r7, #4]
1004e52e:	226a      	movs	r2, #106	@ 0x6a
1004e530:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004e532:	19bb      	adds	r3, r7, r6
1004e534:	781b      	ldrb	r3, [r3, #0]
1004e536:	193a      	adds	r2, r7, r4
1004e538:	7812      	ldrb	r2, [r2, #0]
1004e53a:	490a      	ldr	r1, [pc, #40]	@ (1004e564 <UARTEx_SetNbDataToProcess+0xb4>)
1004e53c:	5c8a      	ldrb	r2, [r1, r2]
1004e53e:	435a      	muls	r2, r3
1004e540:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
1004e542:	193b      	adds	r3, r7, r4
1004e544:	781b      	ldrb	r3, [r3, #0]
1004e546:	4a08      	ldr	r2, [pc, #32]	@ (1004e568 <UARTEx_SetNbDataToProcess+0xb8>)
1004e548:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004e54a:	0019      	movs	r1, r3
1004e54c:	f7f1 ff02 	bl	10040354 <__divsi3>
1004e550:	0003      	movs	r3, r0
1004e552:	b299      	uxth	r1, r3
1004e554:	687b      	ldr	r3, [r7, #4]
1004e556:	2268      	movs	r2, #104	@ 0x68
1004e558:	5299      	strh	r1, [r3, r2]
}
1004e55a:	46c0      	nop			@ (mov r8, r8)
1004e55c:	46bd      	mov	sp, r7
1004e55e:	b005      	add	sp, #20
1004e560:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e562:	46c0      	nop			@ (mov r8, r8)
1004e564:	10069340 	.word	0x10069340
1004e568:	10069348 	.word	0x10069348

1004e56c <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
1004e56c:	b580      	push	{r7, lr}
1004e56e:	b088      	sub	sp, #32
1004e570:	af00      	add	r7, sp, #0
1004e572:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
1004e574:	687b      	ldr	r3, [r7, #4]
1004e576:	681b      	ldr	r3, [r3, #0]
1004e578:	69db      	ldr	r3, [r3, #28]
1004e57a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
1004e57c:	687b      	ldr	r3, [r7, #4]
1004e57e:	681b      	ldr	r3, [r3, #0]
1004e580:	681b      	ldr	r3, [r3, #0]
1004e582:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
1004e584:	687b      	ldr	r3, [r7, #4]
1004e586:	681b      	ldr	r3, [r3, #0]
1004e588:	689b      	ldr	r3, [r3, #8]
1004e58a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
1004e58c:	69fb      	ldr	r3, [r7, #28]
1004e58e:	4ab3      	ldr	r2, [pc, #716]	@ (1004e85c <HAL_USART_IRQHandler+0x2f0>)
1004e590:	4013      	ands	r3, r2
1004e592:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
1004e594:	693b      	ldr	r3, [r7, #16]
1004e596:	2b00      	cmp	r3, #0
1004e598:	d117      	bne.n	1004e5ca <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
1004e59a:	69fb      	ldr	r3, [r7, #28]
1004e59c:	2220      	movs	r2, #32
1004e59e:	4013      	ands	r3, r2
1004e5a0:	d013      	beq.n	1004e5ca <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
1004e5a2:	69bb      	ldr	r3, [r7, #24]
1004e5a4:	2220      	movs	r2, #32
1004e5a6:	4013      	ands	r3, r2
1004e5a8:	d104      	bne.n	1004e5b4 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
1004e5aa:	697a      	ldr	r2, [r7, #20]
1004e5ac:	2380      	movs	r3, #128	@ 0x80
1004e5ae:	055b      	lsls	r3, r3, #21
1004e5b0:	4013      	ands	r3, r2
1004e5b2:	d00a      	beq.n	1004e5ca <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
1004e5b4:	687b      	ldr	r3, [r7, #4]
1004e5b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004e5b8:	2b00      	cmp	r3, #0
1004e5ba:	d100      	bne.n	1004e5be <HAL_USART_IRQHandler+0x52>
1004e5bc:	e14a      	b.n	1004e854 <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
1004e5be:	687b      	ldr	r3, [r7, #4]
1004e5c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004e5c2:	687a      	ldr	r2, [r7, #4]
1004e5c4:	0010      	movs	r0, r2
1004e5c6:	4798      	blx	r3
      }
      return;
1004e5c8:	e144      	b.n	1004e854 <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
1004e5ca:	693b      	ldr	r3, [r7, #16]
1004e5cc:	2b00      	cmp	r3, #0
1004e5ce:	d100      	bne.n	1004e5d2 <HAL_USART_IRQHandler+0x66>
1004e5d0:	e100      	b.n	1004e7d4 <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
1004e5d2:	697b      	ldr	r3, [r7, #20]
1004e5d4:	4aa2      	ldr	r2, [pc, #648]	@ (1004e860 <HAL_USART_IRQHandler+0x2f4>)
1004e5d6:	4013      	ands	r3, r2
1004e5d8:	d105      	bne.n	1004e5e6 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
1004e5da:	69ba      	ldr	r2, [r7, #24]
1004e5dc:	2390      	movs	r3, #144	@ 0x90
1004e5de:	005b      	lsls	r3, r3, #1
1004e5e0:	4013      	ands	r3, r2
1004e5e2:	d100      	bne.n	1004e5e6 <HAL_USART_IRQHandler+0x7a>
1004e5e4:	e0f6      	b.n	1004e7d4 <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
1004e5e6:	69fb      	ldr	r3, [r7, #28]
1004e5e8:	2201      	movs	r2, #1
1004e5ea:	4013      	ands	r3, r2
1004e5ec:	d00e      	beq.n	1004e60c <HAL_USART_IRQHandler+0xa0>
1004e5ee:	69ba      	ldr	r2, [r7, #24]
1004e5f0:	2380      	movs	r3, #128	@ 0x80
1004e5f2:	005b      	lsls	r3, r3, #1
1004e5f4:	4013      	ands	r3, r2
1004e5f6:	d009      	beq.n	1004e60c <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
1004e5f8:	687b      	ldr	r3, [r7, #4]
1004e5fa:	681b      	ldr	r3, [r3, #0]
1004e5fc:	2201      	movs	r2, #1
1004e5fe:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
1004e600:	687b      	ldr	r3, [r7, #4]
1004e602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004e604:	2201      	movs	r2, #1
1004e606:	431a      	orrs	r2, r3
1004e608:	687b      	ldr	r3, [r7, #4]
1004e60a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004e60c:	69fb      	ldr	r3, [r7, #28]
1004e60e:	2202      	movs	r2, #2
1004e610:	4013      	ands	r3, r2
1004e612:	d00d      	beq.n	1004e630 <HAL_USART_IRQHandler+0xc4>
1004e614:	697b      	ldr	r3, [r7, #20]
1004e616:	2201      	movs	r2, #1
1004e618:	4013      	ands	r3, r2
1004e61a:	d009      	beq.n	1004e630 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
1004e61c:	687b      	ldr	r3, [r7, #4]
1004e61e:	681b      	ldr	r3, [r3, #0]
1004e620:	2202      	movs	r2, #2
1004e622:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
1004e624:	687b      	ldr	r3, [r7, #4]
1004e626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004e628:	2204      	movs	r2, #4
1004e62a:	431a      	orrs	r2, r3
1004e62c:	687b      	ldr	r3, [r7, #4]
1004e62e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004e630:	69fb      	ldr	r3, [r7, #28]
1004e632:	2204      	movs	r2, #4
1004e634:	4013      	ands	r3, r2
1004e636:	d00d      	beq.n	1004e654 <HAL_USART_IRQHandler+0xe8>
1004e638:	697b      	ldr	r3, [r7, #20]
1004e63a:	2201      	movs	r2, #1
1004e63c:	4013      	ands	r3, r2
1004e63e:	d009      	beq.n	1004e654 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
1004e640:	687b      	ldr	r3, [r7, #4]
1004e642:	681b      	ldr	r3, [r3, #0]
1004e644:	2204      	movs	r2, #4
1004e646:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
1004e648:	687b      	ldr	r3, [r7, #4]
1004e64a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004e64c:	2202      	movs	r2, #2
1004e64e:	431a      	orrs	r2, r3
1004e650:	687b      	ldr	r3, [r7, #4]
1004e652:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
1004e654:	69fb      	ldr	r3, [r7, #28]
1004e656:	2208      	movs	r2, #8
1004e658:	4013      	ands	r3, r2
1004e65a:	d011      	beq.n	1004e680 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
1004e65c:	69bb      	ldr	r3, [r7, #24]
1004e65e:	2220      	movs	r2, #32
1004e660:	4013      	ands	r3, r2
1004e662:	d103      	bne.n	1004e66c <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
1004e664:	697b      	ldr	r3, [r7, #20]
1004e666:	4a7e      	ldr	r2, [pc, #504]	@ (1004e860 <HAL_USART_IRQHandler+0x2f4>)
1004e668:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
1004e66a:	d009      	beq.n	1004e680 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
1004e66c:	687b      	ldr	r3, [r7, #4]
1004e66e:	681b      	ldr	r3, [r3, #0]
1004e670:	2208      	movs	r2, #8
1004e672:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
1004e674:	687b      	ldr	r3, [r7, #4]
1004e676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004e678:	2208      	movs	r2, #8
1004e67a:	431a      	orrs	r2, r3
1004e67c:	687b      	ldr	r3, [r7, #4]
1004e67e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
1004e680:	69fa      	ldr	r2, [r7, #28]
1004e682:	2380      	movs	r3, #128	@ 0x80
1004e684:	011b      	lsls	r3, r3, #4
1004e686:	4013      	ands	r3, r2
1004e688:	d00f      	beq.n	1004e6aa <HAL_USART_IRQHandler+0x13e>
1004e68a:	69ba      	ldr	r2, [r7, #24]
1004e68c:	2380      	movs	r3, #128	@ 0x80
1004e68e:	04db      	lsls	r3, r3, #19
1004e690:	4013      	ands	r3, r2
1004e692:	d00a      	beq.n	1004e6aa <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
1004e694:	687b      	ldr	r3, [r7, #4]
1004e696:	681b      	ldr	r3, [r3, #0]
1004e698:	2280      	movs	r2, #128	@ 0x80
1004e69a:	0112      	lsls	r2, r2, #4
1004e69c:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
1004e69e:	687b      	ldr	r3, [r7, #4]
1004e6a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004e6a2:	2280      	movs	r2, #128	@ 0x80
1004e6a4:	431a      	orrs	r2, r3
1004e6a6:	687b      	ldr	r3, [r7, #4]
1004e6a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004e6aa:	69fa      	ldr	r2, [r7, #28]
1004e6ac:	2380      	movs	r3, #128	@ 0x80
1004e6ae:	019b      	lsls	r3, r3, #6
1004e6b0:	4013      	ands	r3, r2
1004e6b2:	d01a      	beq.n	1004e6ea <HAL_USART_IRQHandler+0x17e>
1004e6b4:	697b      	ldr	r3, [r7, #20]
1004e6b6:	2201      	movs	r2, #1
1004e6b8:	4013      	ands	r3, r2
1004e6ba:	d016      	beq.n	1004e6ea <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
1004e6bc:	687b      	ldr	r3, [r7, #4]
1004e6be:	2259      	movs	r2, #89	@ 0x59
1004e6c0:	5c9b      	ldrb	r3, [r3, r2]
1004e6c2:	b2db      	uxtb	r3, r3
1004e6c4:	2b22      	cmp	r3, #34	@ 0x22
1004e6c6:	d105      	bne.n	1004e6d4 <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
1004e6c8:	687b      	ldr	r3, [r7, #4]
1004e6ca:	681b      	ldr	r3, [r3, #0]
1004e6cc:	2280      	movs	r2, #128	@ 0x80
1004e6ce:	0192      	lsls	r2, r2, #6
1004e6d0:	621a      	str	r2, [r3, #32]
        return;
1004e6d2:	e0ca      	b.n	1004e86a <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
1004e6d4:	687b      	ldr	r3, [r7, #4]
1004e6d6:	681b      	ldr	r3, [r3, #0]
1004e6d8:	2280      	movs	r2, #128	@ 0x80
1004e6da:	0192      	lsls	r2, r2, #6
1004e6dc:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
1004e6de:	687b      	ldr	r3, [r7, #4]
1004e6e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004e6e2:	2220      	movs	r2, #32
1004e6e4:	431a      	orrs	r2, r3
1004e6e6:	687b      	ldr	r3, [r7, #4]
1004e6e8:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
1004e6ea:	687b      	ldr	r3, [r7, #4]
1004e6ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004e6ee:	2b00      	cmp	r3, #0
1004e6f0:	d100      	bne.n	1004e6f4 <HAL_USART_IRQHandler+0x188>
1004e6f2:	e0b1      	b.n	1004e858 <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
1004e6f4:	69fb      	ldr	r3, [r7, #28]
1004e6f6:	2220      	movs	r2, #32
1004e6f8:	4013      	ands	r3, r2
1004e6fa:	d011      	beq.n	1004e720 <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
1004e6fc:	69bb      	ldr	r3, [r7, #24]
1004e6fe:	2220      	movs	r2, #32
1004e700:	4013      	ands	r3, r2
1004e702:	d104      	bne.n	1004e70e <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
1004e704:	697a      	ldr	r2, [r7, #20]
1004e706:	2380      	movs	r3, #128	@ 0x80
1004e708:	055b      	lsls	r3, r3, #21
1004e70a:	4013      	ands	r3, r2
1004e70c:	d008      	beq.n	1004e720 <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
1004e70e:	687b      	ldr	r3, [r7, #4]
1004e710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004e712:	2b00      	cmp	r3, #0
1004e714:	d004      	beq.n	1004e720 <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
1004e716:	687b      	ldr	r3, [r7, #4]
1004e718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004e71a:	687a      	ldr	r2, [r7, #4]
1004e71c:	0010      	movs	r0, r2
1004e71e:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
1004e720:	687b      	ldr	r3, [r7, #4]
1004e722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004e724:	2208      	movs	r2, #8
1004e726:	4013      	ands	r3, r2
1004e728:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
1004e72a:	687b      	ldr	r3, [r7, #4]
1004e72c:	681b      	ldr	r3, [r3, #0]
1004e72e:	689b      	ldr	r3, [r3, #8]
1004e730:	2240      	movs	r2, #64	@ 0x40
1004e732:	4013      	ands	r3, r2
1004e734:	2b40      	cmp	r3, #64	@ 0x40
1004e736:	d002      	beq.n	1004e73e <HAL_USART_IRQHandler+0x1d2>
1004e738:	68fb      	ldr	r3, [r7, #12]
1004e73a:	2b00      	cmp	r3, #0
1004e73c:	d040      	beq.n	1004e7c0 <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
1004e73e:	687b      	ldr	r3, [r7, #4]
1004e740:	0018      	movs	r0, r3
1004e742:	f000 f8ad 	bl	1004e8a0 <USART_EndTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004e746:	687b      	ldr	r3, [r7, #4]
1004e748:	681b      	ldr	r3, [r3, #0]
1004e74a:	689b      	ldr	r3, [r3, #8]
1004e74c:	2240      	movs	r2, #64	@ 0x40
1004e74e:	4013      	ands	r3, r2
1004e750:	2b40      	cmp	r3, #64	@ 0x40
1004e752:	d130      	bne.n	1004e7b6 <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
1004e754:	687b      	ldr	r3, [r7, #4]
1004e756:	681b      	ldr	r3, [r3, #0]
1004e758:	689a      	ldr	r2, [r3, #8]
1004e75a:	687b      	ldr	r3, [r7, #4]
1004e75c:	681b      	ldr	r3, [r3, #0]
1004e75e:	2140      	movs	r1, #64	@ 0x40
1004e760:	438a      	bics	r2, r1
1004e762:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
1004e764:	687b      	ldr	r3, [r7, #4]
1004e766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004e768:	2b00      	cmp	r3, #0
1004e76a:	d008      	beq.n	1004e77e <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
1004e76c:	687b      	ldr	r3, [r7, #4]
1004e76e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004e770:	2200      	movs	r2, #0
1004e772:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
1004e774:	687b      	ldr	r3, [r7, #4]
1004e776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004e778:	0018      	movs	r0, r3
1004e77a:	f7f9 f99f 	bl	10047abc <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
1004e77e:	687b      	ldr	r3, [r7, #4]
1004e780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004e782:	2b00      	cmp	r3, #0
1004e784:	d012      	beq.n	1004e7ac <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
1004e786:	687b      	ldr	r3, [r7, #4]
1004e788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004e78a:	4a36      	ldr	r2, [pc, #216]	@ (1004e864 <HAL_USART_IRQHandler+0x2f8>)
1004e78c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
1004e78e:	687b      	ldr	r3, [r7, #4]
1004e790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004e792:	0018      	movs	r0, r3
1004e794:	f7f9 f992 	bl	10047abc <HAL_DMA_Abort_IT>
1004e798:	1e03      	subs	r3, r0, #0
1004e79a:	d019      	beq.n	1004e7d0 <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
1004e79c:	687b      	ldr	r3, [r7, #4]
1004e79e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004e7a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1004e7a2:	687b      	ldr	r3, [r7, #4]
1004e7a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004e7a6:	0018      	movs	r0, r3
1004e7a8:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004e7aa:	e011      	b.n	1004e7d0 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
1004e7ac:	687b      	ldr	r3, [r7, #4]
1004e7ae:	0018      	movs	r0, r3
1004e7b0:	f000 f86e 	bl	1004e890 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004e7b4:	e00c      	b.n	1004e7d0 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
1004e7b6:	687b      	ldr	r3, [r7, #4]
1004e7b8:	0018      	movs	r0, r3
1004e7ba:	f000 f869 	bl	1004e890 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004e7be:	e007      	b.n	1004e7d0 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
1004e7c0:	687b      	ldr	r3, [r7, #4]
1004e7c2:	0018      	movs	r0, r3
1004e7c4:	f000 f864 	bl	1004e890 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
1004e7c8:	687b      	ldr	r3, [r7, #4]
1004e7ca:	2200      	movs	r2, #0
1004e7cc:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }
    return;
1004e7ce:	e043      	b.n	1004e858 <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004e7d0:	46c0      	nop			@ (mov r8, r8)
    return;
1004e7d2:	e041      	b.n	1004e858 <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
1004e7d4:	69fb      	ldr	r3, [r7, #28]
1004e7d6:	2280      	movs	r2, #128	@ 0x80
1004e7d8:	4013      	ands	r3, r2
1004e7da:	d012      	beq.n	1004e802 <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
1004e7dc:	69bb      	ldr	r3, [r7, #24]
1004e7de:	2280      	movs	r2, #128	@ 0x80
1004e7e0:	4013      	ands	r3, r2
1004e7e2:	d104      	bne.n	1004e7ee <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
1004e7e4:	697a      	ldr	r2, [r7, #20]
1004e7e6:	2380      	movs	r3, #128	@ 0x80
1004e7e8:	041b      	lsls	r3, r3, #16
1004e7ea:	4013      	ands	r3, r2
1004e7ec:	d009      	beq.n	1004e802 <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
1004e7ee:	687b      	ldr	r3, [r7, #4]
1004e7f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004e7f2:	2b00      	cmp	r3, #0
1004e7f4:	d038      	beq.n	1004e868 <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
1004e7f6:	687b      	ldr	r3, [r7, #4]
1004e7f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004e7fa:	687a      	ldr	r2, [r7, #4]
1004e7fc:	0010      	movs	r0, r2
1004e7fe:	4798      	blx	r3
    }
    return;
1004e800:	e032      	b.n	1004e868 <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
1004e802:	69fb      	ldr	r3, [r7, #28]
1004e804:	2240      	movs	r2, #64	@ 0x40
1004e806:	4013      	ands	r3, r2
1004e808:	d008      	beq.n	1004e81c <HAL_USART_IRQHandler+0x2b0>
1004e80a:	69bb      	ldr	r3, [r7, #24]
1004e80c:	2240      	movs	r2, #64	@ 0x40
1004e80e:	4013      	ands	r3, r2
1004e810:	d004      	beq.n	1004e81c <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
1004e812:	687b      	ldr	r3, [r7, #4]
1004e814:	0018      	movs	r0, r3
1004e816:	f000 f878 	bl	1004e90a <USART_EndTransmit_IT>
    return;
1004e81a:	e026      	b.n	1004e86a <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
1004e81c:	69fa      	ldr	r2, [r7, #28]
1004e81e:	2380      	movs	r3, #128	@ 0x80
1004e820:	041b      	lsls	r3, r3, #16
1004e822:	4013      	ands	r3, r2
1004e824:	d009      	beq.n	1004e83a <HAL_USART_IRQHandler+0x2ce>
1004e826:	69ba      	ldr	r2, [r7, #24]
1004e828:	2380      	movs	r3, #128	@ 0x80
1004e82a:	05db      	lsls	r3, r3, #23
1004e82c:	4013      	ands	r3, r2
1004e82e:	d004      	beq.n	1004e83a <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
1004e830:	687b      	ldr	r3, [r7, #4]
1004e832:	0018      	movs	r0, r3
1004e834:	f000 f8b4 	bl	1004e9a0 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
1004e838:	e017      	b.n	1004e86a <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
1004e83a:	69fa      	ldr	r2, [r7, #28]
1004e83c:	2380      	movs	r3, #128	@ 0x80
1004e83e:	045b      	lsls	r3, r3, #17
1004e840:	4013      	ands	r3, r2
1004e842:	d012      	beq.n	1004e86a <HAL_USART_IRQHandler+0x2fe>
1004e844:	69bb      	ldr	r3, [r7, #24]
1004e846:	2b00      	cmp	r3, #0
1004e848:	da0f      	bge.n	1004e86a <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
1004e84a:	687b      	ldr	r3, [r7, #4]
1004e84c:	0018      	movs	r0, r3
1004e84e:	f000 f89f 	bl	1004e990 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
1004e852:	e00a      	b.n	1004e86a <HAL_USART_IRQHandler+0x2fe>
      return;
1004e854:	46c0      	nop			@ (mov r8, r8)
1004e856:	e008      	b.n	1004e86a <HAL_USART_IRQHandler+0x2fe>
    return;
1004e858:	46c0      	nop			@ (mov r8, r8)
1004e85a:	e006      	b.n	1004e86a <HAL_USART_IRQHandler+0x2fe>
1004e85c:	0000280f 	.word	0x0000280f
1004e860:	10000001 	.word	0x10000001
1004e864:	1004e8e1 	.word	0x1004e8e1
    return;
1004e868:	46c0      	nop			@ (mov r8, r8)
  }
}
1004e86a:	46bd      	mov	sp, r7
1004e86c:	b008      	add	sp, #32
1004e86e:	bd80      	pop	{r7, pc}

1004e870 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
1004e870:	b580      	push	{r7, lr}
1004e872:	b082      	sub	sp, #8
1004e874:	af00      	add	r7, sp, #0
1004e876:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
1004e878:	46c0      	nop			@ (mov r8, r8)
1004e87a:	46bd      	mov	sp, r7
1004e87c:	b002      	add	sp, #8
1004e87e:	bd80      	pop	{r7, pc}

1004e880 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
1004e880:	b580      	push	{r7, lr}
1004e882:	b082      	sub	sp, #8
1004e884:	af00      	add	r7, sp, #0
1004e886:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
1004e888:	46c0      	nop			@ (mov r8, r8)
1004e88a:	46bd      	mov	sp, r7
1004e88c:	b002      	add	sp, #8
1004e88e:	bd80      	pop	{r7, pc}

1004e890 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
1004e890:	b580      	push	{r7, lr}
1004e892:	b082      	sub	sp, #8
1004e894:	af00      	add	r7, sp, #0
1004e896:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
1004e898:	46c0      	nop			@ (mov r8, r8)
1004e89a:	46bd      	mov	sp, r7
1004e89c:	b002      	add	sp, #8
1004e89e:	bd80      	pop	{r7, pc}

1004e8a0 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
1004e8a0:	b580      	push	{r7, lr}
1004e8a2:	b082      	sub	sp, #8
1004e8a4:	af00      	add	r7, sp, #0
1004e8a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
1004e8a8:	687b      	ldr	r3, [r7, #4]
1004e8aa:	681b      	ldr	r3, [r3, #0]
1004e8ac:	681a      	ldr	r2, [r3, #0]
1004e8ae:	687b      	ldr	r3, [r7, #4]
1004e8b0:	681b      	ldr	r3, [r3, #0]
1004e8b2:	4909      	ldr	r1, [pc, #36]	@ (1004e8d8 <USART_EndTransfer+0x38>)
1004e8b4:	400a      	ands	r2, r1
1004e8b6:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
1004e8b8:	687b      	ldr	r3, [r7, #4]
1004e8ba:	681b      	ldr	r3, [r3, #0]
1004e8bc:	689a      	ldr	r2, [r3, #8]
1004e8be:	687b      	ldr	r3, [r7, #4]
1004e8c0:	681b      	ldr	r3, [r3, #0]
1004e8c2:	4906      	ldr	r1, [pc, #24]	@ (1004e8dc <USART_EndTransfer+0x3c>)
1004e8c4:	400a      	ands	r2, r1
1004e8c6:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
1004e8c8:	687b      	ldr	r3, [r7, #4]
1004e8ca:	2259      	movs	r2, #89	@ 0x59
1004e8cc:	2101      	movs	r1, #1
1004e8ce:	5499      	strb	r1, [r3, r2]
}
1004e8d0:	46c0      	nop			@ (mov r8, r8)
1004e8d2:	46bd      	mov	sp, r7
1004e8d4:	b002      	add	sp, #8
1004e8d6:	bd80      	pop	{r7, pc}
1004e8d8:	fffffe1f 	.word	0xfffffe1f
1004e8dc:	ef7ffffe 	.word	0xef7ffffe

1004e8e0 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
1004e8e0:	b580      	push	{r7, lr}
1004e8e2:	b084      	sub	sp, #16
1004e8e4:	af00      	add	r7, sp, #0
1004e8e6:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
1004e8e8:	687b      	ldr	r3, [r7, #4]
1004e8ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004e8ec:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
1004e8ee:	68fb      	ldr	r3, [r7, #12]
1004e8f0:	2200      	movs	r2, #0
1004e8f2:	86da      	strh	r2, [r3, #54]	@ 0x36
  husart->TxXferCount = 0U;
1004e8f4:	68fb      	ldr	r3, [r7, #12]
1004e8f6:	2200      	movs	r2, #0
1004e8f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
1004e8fa:	68fb      	ldr	r3, [r7, #12]
1004e8fc:	0018      	movs	r0, r3
1004e8fe:	f7ff ffc7 	bl	1004e890 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
1004e902:	46c0      	nop			@ (mov r8, r8)
1004e904:	46bd      	mov	sp, r7
1004e906:	b004      	add	sp, #16
1004e908:	bd80      	pop	{r7, pc}

1004e90a <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
1004e90a:	b580      	push	{r7, lr}
1004e90c:	b082      	sub	sp, #8
1004e90e:	af00      	add	r7, sp, #0
1004e910:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
1004e912:	687b      	ldr	r3, [r7, #4]
1004e914:	681b      	ldr	r3, [r3, #0]
1004e916:	681a      	ldr	r2, [r3, #0]
1004e918:	687b      	ldr	r3, [r7, #4]
1004e91a:	681b      	ldr	r3, [r3, #0]
1004e91c:	2140      	movs	r1, #64	@ 0x40
1004e91e:	438a      	bics	r2, r1
1004e920:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
1004e922:	687b      	ldr	r3, [r7, #4]
1004e924:	681b      	ldr	r3, [r3, #0]
1004e926:	689a      	ldr	r2, [r3, #8]
1004e928:	687b      	ldr	r3, [r7, #4]
1004e92a:	681b      	ldr	r3, [r3, #0]
1004e92c:	2101      	movs	r1, #1
1004e92e:	438a      	bics	r2, r1
1004e930:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
1004e932:	687b      	ldr	r3, [r7, #4]
1004e934:	2200      	movs	r2, #0
1004e936:	64da      	str	r2, [r3, #76]	@ 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
1004e938:	687b      	ldr	r3, [r7, #4]
1004e93a:	2259      	movs	r2, #89	@ 0x59
1004e93c:	5c9b      	ldrb	r3, [r3, r2]
1004e93e:	b2db      	uxtb	r3, r3
1004e940:	2b12      	cmp	r3, #18
1004e942:	d114      	bne.n	1004e96e <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
1004e944:	687b      	ldr	r3, [r7, #4]
1004e946:	681b      	ldr	r3, [r3, #0]
1004e948:	2208      	movs	r2, #8
1004e94a:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
1004e94c:	687b      	ldr	r3, [r7, #4]
1004e94e:	681b      	ldr	r3, [r3, #0]
1004e950:	699a      	ldr	r2, [r3, #24]
1004e952:	687b      	ldr	r3, [r7, #4]
1004e954:	681b      	ldr	r3, [r3, #0]
1004e956:	2108      	movs	r1, #8
1004e958:	430a      	orrs	r2, r1
1004e95a:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
1004e95c:	687b      	ldr	r3, [r7, #4]
1004e95e:	2259      	movs	r2, #89	@ 0x59
1004e960:	2101      	movs	r1, #1
1004e962:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
1004e964:	687b      	ldr	r3, [r7, #4]
1004e966:	0018      	movs	r0, r3
1004e968:	f7ff ff82 	bl	1004e870 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
1004e96c:	e00c      	b.n	1004e988 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
1004e96e:	687b      	ldr	r3, [r7, #4]
1004e970:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
1004e972:	b29b      	uxth	r3, r3
1004e974:	2b00      	cmp	r3, #0
1004e976:	d107      	bne.n	1004e988 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
1004e978:	687b      	ldr	r3, [r7, #4]
1004e97a:	2259      	movs	r2, #89	@ 0x59
1004e97c:	2101      	movs	r1, #1
1004e97e:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
1004e980:	687b      	ldr	r3, [r7, #4]
1004e982:	0018      	movs	r0, r3
1004e984:	f7ff ff7c 	bl	1004e880 <HAL_USART_TxRxCpltCallback>
}
1004e988:	46c0      	nop			@ (mov r8, r8)
1004e98a:	46bd      	mov	sp, r7
1004e98c:	b002      	add	sp, #8
1004e98e:	bd80      	pop	{r7, pc}

1004e990 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
1004e990:	b580      	push	{r7, lr}
1004e992:	b082      	sub	sp, #8
1004e994:	af00      	add	r7, sp, #0
1004e996:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
1004e998:	46c0      	nop			@ (mov r8, r8)
1004e99a:	46bd      	mov	sp, r7
1004e99c:	b002      	add	sp, #8
1004e99e:	bd80      	pop	{r7, pc}

1004e9a0 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
1004e9a0:	b580      	push	{r7, lr}
1004e9a2:	b082      	sub	sp, #8
1004e9a4:	af00      	add	r7, sp, #0
1004e9a6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
1004e9a8:	46c0      	nop			@ (mov r8, r8)
1004e9aa:	46bd      	mov	sp, r7
1004e9ac:	b002      	add	sp, #8
1004e9ae:	bd80      	pop	{r7, pc}

1004e9b0 <BLEEVT_RegisterGattEvtHandler>:

  return;
}

int BLEEVT_RegisterGattEvtHandler(BLEEVT_GattEvtHandlerFunc_t EvtHandlerFunc)
{
1004e9b0:	b580      	push	{r7, lr}
1004e9b2:	b082      	sub	sp, #8
1004e9b4:	af00      	add	r7, sp, #0
1004e9b6:	6078      	str	r0, [r7, #4]
  if(BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers == BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS)
1004e9b8:	4b0c      	ldr	r3, [pc, #48]	@ (1004e9ec <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004e9ba:	791b      	ldrb	r3, [r3, #4]
1004e9bc:	2b01      	cmp	r3, #1
1004e9be:	d102      	bne.n	1004e9c6 <BLEEVT_RegisterGattEvtHandler+0x16>
  {
    return -1;
1004e9c0:	2301      	movs	r3, #1
1004e9c2:	425b      	negs	r3, r3
1004e9c4:	e00d      	b.n	1004e9e2 <BLEEVT_RegisterGattEvtHandler+0x32>
  }
#if (BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS > 0)
  BLEEVT_GattEvtHandler.BLEEVT_SvcHandlerTab[BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers] = EvtHandlerFunc;
1004e9c6:	4b09      	ldr	r3, [pc, #36]	@ (1004e9ec <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004e9c8:	791b      	ldrb	r3, [r3, #4]
1004e9ca:	001a      	movs	r2, r3
1004e9cc:	4b07      	ldr	r3, [pc, #28]	@ (1004e9ec <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004e9ce:	0092      	lsls	r2, r2, #2
1004e9d0:	6879      	ldr	r1, [r7, #4]
1004e9d2:	50d1      	str	r1, [r2, r3]
  BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers++;
1004e9d4:	4b05      	ldr	r3, [pc, #20]	@ (1004e9ec <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004e9d6:	791b      	ldrb	r3, [r3, #4]
1004e9d8:	3301      	adds	r3, #1
1004e9da:	b2da      	uxtb	r2, r3
1004e9dc:	4b03      	ldr	r3, [pc, #12]	@ (1004e9ec <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004e9de:	711a      	strb	r2, [r3, #4]
#else
  (void)(EvtHandlerFunc);
#endif

  return 0;
1004e9e0:	2300      	movs	r3, #0
}
1004e9e2:	0018      	movs	r0, r3
1004e9e4:	46bd      	mov	sp, r7
1004e9e6:	b002      	add	sp, #8
1004e9e8:	bd80      	pop	{r7, pc}
1004e9ea:	46c0      	nop			@ (mov r8, r8)
1004e9ec:	200022a8 	.word	0x200022a8

1004e9f0 <BLE_STACK_Event>:

  return 0;
}

void BLE_STACK_Event(hci_pckt *hci_pckt, uint16_t length)
{
1004e9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e9f2:	b089      	sub	sp, #36	@ 0x24
1004e9f4:	af00      	add	r7, sp, #0
1004e9f6:	6078      	str	r0, [r7, #4]
1004e9f8:	000a      	movs	r2, r1
1004e9fa:	1cbb      	adds	r3, r7, #2
1004e9fc:	801a      	strh	r2, [r3, #0]
  BLEEVT_EvtAckStatus_t event_notification_status = BLEEVT_NoAck;
1004e9fe:	231f      	movs	r3, #31
1004ea00:	18fb      	adds	r3, r7, r3
1004ea02:	2200      	movs	r2, #0
1004ea04:	701a      	strb	r2, [r3, #0]
  
  if(hci_pckt->type == HCI_EVENT_PKT_TYPE || hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE)
1004ea06:	687b      	ldr	r3, [r7, #4]
1004ea08:	781b      	ldrb	r3, [r3, #0]
1004ea0a:	2b04      	cmp	r3, #4
1004ea0c:	d003      	beq.n	1004ea16 <BLE_STACK_Event+0x26>
1004ea0e:	687b      	ldr	r3, [r7, #4]
1004ea10:	781b      	ldrb	r3, [r3, #0]
1004ea12:	2b82      	cmp	r3, #130	@ 0x82
1004ea14:	d148      	bne.n	1004eaa8 <BLE_STACK_Event+0xb8>
  {
    void *data;
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
1004ea16:	687b      	ldr	r3, [r7, #4]
1004ea18:	3301      	adds	r3, #1
1004ea1a:	613b      	str	r3, [r7, #16]
    
    if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
1004ea1c:	687b      	ldr	r3, [r7, #4]
1004ea1e:	781b      	ldrb	r3, [r3, #0]
1004ea20:	2b04      	cmp	r3, #4
1004ea22:	d103      	bne.n	1004ea2c <BLE_STACK_Event+0x3c>
      data = event_pckt->data;
1004ea24:	693b      	ldr	r3, [r7, #16]
1004ea26:	3302      	adds	r3, #2
1004ea28:	61bb      	str	r3, [r7, #24]
1004ea2a:	e005      	b.n	1004ea38 <BLE_STACK_Event+0x48>
    }
    else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
      hci_event_ext_pckt *event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
1004ea2c:	687b      	ldr	r3, [r7, #4]
1004ea2e:	3301      	adds	r3, #1
1004ea30:	60fb      	str	r3, [r7, #12]
      data = event_pckt->data;
1004ea32:	68fb      	ldr	r3, [r7, #12]
1004ea34:	3303      	adds	r3, #3
1004ea36:	61bb      	str	r3, [r7, #24]
    }
    
    if(event_pckt->evt == HCI_VENDOR_EVT_CODE) /* evt fields is at same offset in hci_event_pckt and hci_event_ext_pckt */
1004ea38:	693b      	ldr	r3, [r7, #16]
1004ea3a:	781b      	ldrb	r3, [r3, #0]
1004ea3c:	2bff      	cmp	r3, #255	@ 0xff
1004ea3e:	d133      	bne.n	1004eaa8 <BLE_STACK_Event+0xb8>
    {
      aci_blecore_event * blecore_evt = (aci_blecore_event*) data;
1004ea40:	69bb      	ldr	r3, [r7, #24]
1004ea42:	60bb      	str	r3, [r7, #8]
      
      if((blecore_evt->ecode & BLEEVT_EGID_EVT_MASK) == BLEEVT_GATT_EVT_TYPE)
1004ea44:	68bb      	ldr	r3, [r7, #8]
1004ea46:	781a      	ldrb	r2, [r3, #0]
1004ea48:	785b      	ldrb	r3, [r3, #1]
1004ea4a:	021b      	lsls	r3, r3, #8
1004ea4c:	4313      	orrs	r3, r2
1004ea4e:	b29b      	uxth	r3, r3
1004ea50:	001a      	movs	r2, r3
1004ea52:	23fc      	movs	r3, #252	@ 0xfc
1004ea54:	021b      	lsls	r3, r3, #8
1004ea56:	401a      	ands	r2, r3
1004ea58:	23c0      	movs	r3, #192	@ 0xc0
1004ea5a:	011b      	lsls	r3, r3, #4
1004ea5c:	429a      	cmp	r2, r3
1004ea5e:	d123      	bne.n	1004eaa8 <BLE_STACK_Event+0xb8>
      {
        /* GATT events */
        
#if (BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS > 0)
        /* For GATT event handler */
        for (uint8_t index = 0; index < BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers; index++)
1004ea60:	2317      	movs	r3, #23
1004ea62:	18fb      	adds	r3, r7, r3
1004ea64:	2200      	movs	r2, #0
1004ea66:	701a      	strb	r2, [r3, #0]
1004ea68:	e015      	b.n	1004ea96 <BLE_STACK_Event+0xa6>
        {
          event_notification_status = BLEEVT_GattEvtHandler.BLEEVT_SvcHandlerTab[index](blecore_evt);
1004ea6a:	2517      	movs	r5, #23
1004ea6c:	197b      	adds	r3, r7, r5
1004ea6e:	781a      	ldrb	r2, [r3, #0]
1004ea70:	4b14      	ldr	r3, [pc, #80]	@ (1004eac4 <BLE_STACK_Event+0xd4>)
1004ea72:	0092      	lsls	r2, r2, #2
1004ea74:	58d3      	ldr	r3, [r2, r3]
1004ea76:	261f      	movs	r6, #31
1004ea78:	19bc      	adds	r4, r7, r6
1004ea7a:	68ba      	ldr	r2, [r7, #8]
1004ea7c:	0010      	movs	r0, r2
1004ea7e:	4798      	blx	r3
1004ea80:	0003      	movs	r3, r0
1004ea82:	7023      	strb	r3, [r4, #0]
          /**
          * When a GATT event has been acknowledged by application, do not call other registered handler.
          * a GATT event may be relevant for only one Service
          */
          if (event_notification_status == BLEEVT_Ack)
1004ea84:	19bb      	adds	r3, r7, r6
1004ea86:	781b      	ldrb	r3, [r3, #0]
1004ea88:	2b01      	cmp	r3, #1
1004ea8a:	d00c      	beq.n	1004eaa6 <BLE_STACK_Event+0xb6>
        for (uint8_t index = 0; index < BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers; index++)
1004ea8c:	197b      	adds	r3, r7, r5
1004ea8e:	781a      	ldrb	r2, [r3, #0]
1004ea90:	197b      	adds	r3, r7, r5
1004ea92:	3201      	adds	r2, #1
1004ea94:	701a      	strb	r2, [r3, #0]
1004ea96:	4b0b      	ldr	r3, [pc, #44]	@ (1004eac4 <BLE_STACK_Event+0xd4>)
1004ea98:	791b      	ldrb	r3, [r3, #4]
1004ea9a:	2217      	movs	r2, #23
1004ea9c:	18ba      	adds	r2, r7, r2
1004ea9e:	7812      	ldrb	r2, [r2, #0]
1004eaa0:	429a      	cmp	r2, r3
1004eaa2:	d3e2      	bcc.n	1004ea6a <BLE_STACK_Event+0x7a>
1004eaa4:	e000      	b.n	1004eaa8 <BLE_STACK_Event+0xb8>
          {
            /**
            *  The event has been managed. The Event processing should be stopped
            */
            break;
1004eaa6:	46c0      	nop			@ (mov r8, r8)
  
  /**
   * When no registered handlers has acknowledged the event, it is reported to the application.
   */
  
  if(event_notification_status == BLEEVT_NoAck)
1004eaa8:	231f      	movs	r3, #31
1004eaaa:	18fb      	adds	r3, r7, r3
1004eaac:	781b      	ldrb	r3, [r3, #0]
1004eaae:	2b00      	cmp	r3, #0
1004eab0:	d103      	bne.n	1004eaba <BLE_STACK_Event+0xca>
  {
    BLEEVT_App_Notification(hci_pckt);
1004eab2:	687b      	ldr	r3, [r7, #4]
1004eab4:	0018      	movs	r0, r3
1004eab6:	f003 f81d 	bl	10051af4 <BLEEVT_App_Notification>
  }
}
1004eaba:	46c0      	nop			@ (mov r8, r8)
1004eabc:	46bd      	mov	sp, r7
1004eabe:	b009      	add	sp, #36	@ 0x24
1004eac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004eac2:	46c0      	nop			@ (mov r8, r8)
1004eac4:	200022a8 	.word	0x200022a8

1004eac8 <GAP_name_disc_proc_connected_check_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAP_name_disc_proc_connected_check_ucfg(uint16_t task_idx)
{
1004eac8:	b580      	push	{r7, lr}
1004eaca:	b082      	sub	sp, #8
1004eacc:	af00      	add	r7, sp, #0
1004eace:	0002      	movs	r2, r0
1004ead0:	1dbb      	adds	r3, r7, #6
1004ead2:	801a      	strh	r2, [r3, #0]
    GAP_name_disc_proc_connected_check(task_idx);
1004ead4:	1dbb      	adds	r3, r7, #6
1004ead6:	881b      	ldrh	r3, [r3, #0]
1004ead8:	0018      	movs	r0, r3
1004eada:	f007 f89f 	bl	10055c1c <GAP_name_disc_proc_connected_check>
}
1004eade:	46c0      	nop			@ (mov r8, r8)
1004eae0:	46bd      	mov	sp, r7
1004eae2:	b002      	add	sp, #8
1004eae4:	bd80      	pop	{r7, pc}

1004eae6 <GAP_LimDiscTimeoutcb_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAP_LimDiscTimeoutcb_ucfg(uint8_t timer_id)
{
1004eae6:	b580      	push	{r7, lr}
1004eae8:	b082      	sub	sp, #8
1004eaea:	af00      	add	r7, sp, #0
1004eaec:	0002      	movs	r2, r0
1004eaee:	1dfb      	adds	r3, r7, #7
1004eaf0:	701a      	strb	r2, [r3, #0]
    GAP_LimDiscTimeoutcb(timer_id);
1004eaf2:	1dfb      	adds	r3, r7, #7
1004eaf4:	781b      	ldrb	r3, [r3, #0]
1004eaf6:	0018      	movs	r0, r3
1004eaf8:	f007 fad4 	bl	100560a4 <GAP_LimDiscTimeoutcb>
}
1004eafc:	46c0      	nop			@ (mov r8, r8)
1004eafe:	46bd      	mov	sp, r7
1004eb00:	b002      	add	sp, #8
1004eb02:	bd80      	pop	{r7, pc}

1004eb04 <hci_acl_data_tx_cmpl_event_int_cb_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_acl_data_tx_cmpl_event_int_cb_ucfg(void* header_p,
                                                  uint8_t* buff_p)
{
1004eb04:	b580      	push	{r7, lr}
1004eb06:	b082      	sub	sp, #8
1004eb08:	af00      	add	r7, sp, #0
1004eb0a:	6078      	str	r0, [r7, #4]
1004eb0c:	6039      	str	r1, [r7, #0]
    return hci_acl_data_tx_cmpl_event_int_cb(header_p,
1004eb0e:	683a      	ldr	r2, [r7, #0]
1004eb10:	687b      	ldr	r3, [r7, #4]
1004eb12:	0011      	movs	r1, r2
1004eb14:	0018      	movs	r0, r3
1004eb16:	f006 f8ab 	bl	10054c70 <hci_acl_data_tx_cmpl_event_int_cb>
1004eb1a:	0003      	movs	r3, r0
                                             buff_p);
}
1004eb1c:	0018      	movs	r0, r3
1004eb1e:	46bd      	mov	sp, r7
1004eb20:	b002      	add	sp, #8
1004eb22:	bd80      	pop	{r7, pc}

1004eb24 <hci_acl_data_ind_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_acl_data_ind_event_int_cb_ucfg(void* header_p,
                                              uint8_t* buff_p)
{
1004eb24:	b580      	push	{r7, lr}
1004eb26:	b082      	sub	sp, #8
1004eb28:	af00      	add	r7, sp, #0
1004eb2a:	6078      	str	r0, [r7, #4]
1004eb2c:	6039      	str	r1, [r7, #0]
    return hci_acl_data_ind_event_int_cb(header_p,
1004eb2e:	683a      	ldr	r2, [r7, #0]
1004eb30:	687b      	ldr	r3, [r7, #4]
1004eb32:	0011      	movs	r1, r2
1004eb34:	0018      	movs	r0, r3
1004eb36:	f006 f8c5 	bl	10054cc4 <hci_acl_data_ind_event_int_cb>
1004eb3a:	0003      	movs	r3, r0
                                         buff_p);
}
1004eb3c:	0018      	movs	r0, r3
1004eb3e:	46bd      	mov	sp, r7
1004eb40:	b002      	add	sp, #8
1004eb42:	bd80      	pop	{r7, pc}

1004eb44 <Controller_Process_Q_ucfg>:
#endif /* ((CONTROLLER_CHAN_CLASS_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void Controller_Process_Q_ucfg(uint16_t task_idx)
{
1004eb44:	b580      	push	{r7, lr}
1004eb46:	b082      	sub	sp, #8
1004eb48:	af00      	add	r7, sp, #0
1004eb4a:	0002      	movs	r2, r0
1004eb4c:	1dbb      	adds	r3, r7, #6
1004eb4e:	801a      	strh	r2, [r3, #0]
    Controller_Process_Q(task_idx);
1004eb50:	1dbb      	adds	r3, r7, #6
1004eb52:	881b      	ldrh	r3, [r3, #0]
1004eb54:	0018      	movs	r0, r3
1004eb56:	f00a fc03 	bl	10059360 <Controller_Process_Q>
}
1004eb5a:	46c0      	nop			@ (mov r8, r8)
1004eb5c:	46bd      	mov	sp, r7
1004eb5e:	b002      	add	sp, #8
1004eb60:	bd80      	pop	{r7, pc}

1004eb62 <LLC_offline_control_procedures_processing_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LLC_offline_control_procedures_processing_ucfg(uint16_t task_idx)
{
1004eb62:	b580      	push	{r7, lr}
1004eb64:	b082      	sub	sp, #8
1004eb66:	af00      	add	r7, sp, #0
1004eb68:	0002      	movs	r2, r0
1004eb6a:	1dbb      	adds	r3, r7, #6
1004eb6c:	801a      	strh	r2, [r3, #0]
    LLC_offline_control_procedures_processing(task_idx);
1004eb6e:	1dbb      	adds	r3, r7, #6
1004eb70:	881b      	ldrh	r3, [r3, #0]
1004eb72:	0018      	movs	r0, r3
1004eb74:	f00a fc44 	bl	10059400 <LLC_offline_control_procedures_processing>
}
1004eb78:	46c0      	nop			@ (mov r8, r8)
1004eb7a:	46bd      	mov	sp, r7
1004eb7c:	b002      	add	sp, #8
1004eb7e:	bd80      	pop	{r7, pc}

1004eb80 <phy_upd_csr_ucfg>:
#endif /* ((CONTROLLER_POWER_CONTROL_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1)
uint32_t phy_upd_csr_ucfg(void)
{
1004eb80:	b580      	push	{r7, lr}
1004eb82:	af00      	add	r7, sp, #0
    return phy_upd_csr();
1004eb84:	f00a fd06 	bl	10059594 <phy_upd_csr>
1004eb88:	0003      	movs	r3, r0
}
1004eb8a:	0018      	movs	r0, r3
1004eb8c:	46bd      	mov	sp, r7
1004eb8e:	bd80      	pop	{r7, pc}

1004eb90 <conn_supp_csr_ucfg>:
}
#endif /* (CONTROLLER_SCAN_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
uint32_t conn_supp_csr_ucfg(void)
{
1004eb90:	b580      	push	{r7, lr}
1004eb92:	af00      	add	r7, sp, #0
    return conn_supp_csr();
1004eb94:	f00a fd02 	bl	1005959c <conn_supp_csr>
1004eb98:	0003      	movs	r3, r0
}
1004eb9a:	0018      	movs	r0, r3
1004eb9c:	46bd      	mov	sp, r7
1004eb9e:	bd80      	pop	{r7, pc}

1004eba0 <ACL_pkt_init_ucfg>:
}
#endif /* (CONTROLLER_CTE_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus ACL_pkt_init_ucfg(void)
{
1004eba0:	b580      	push	{r7, lr}
1004eba2:	af00      	add	r7, sp, #0
    return ACL_pkt_init();
1004eba4:	f006 f8b0 	bl	10054d08 <ACL_pkt_init>
1004eba8:	0003      	movs	r3, r0
}
1004ebaa:	0018      	movs	r0, r3
1004ebac:	46bd      	mov	sp, r7
1004ebae:	bd80      	pop	{r7, pc}

1004ebb0 <hci_disconnection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_disconnection_complete_event_int_cb_ucfg(void* header_p,
                                                        uint8_t* buff_p)
{
1004ebb0:	b580      	push	{r7, lr}
1004ebb2:	b082      	sub	sp, #8
1004ebb4:	af00      	add	r7, sp, #0
1004ebb6:	6078      	str	r0, [r7, #4]
1004ebb8:	6039      	str	r1, [r7, #0]
    return hci_disconnection_complete_event_int_cb(header_p,
1004ebba:	683a      	ldr	r2, [r7, #0]
1004ebbc:	687b      	ldr	r3, [r7, #4]
1004ebbe:	0011      	movs	r1, r2
1004ebc0:	0018      	movs	r0, r3
1004ebc2:	f006 fc53 	bl	1005546c <hci_disconnection_complete_event_int_cb>
1004ebc6:	0003      	movs	r3, r0
                                                   buff_p);
}
1004ebc8:	0018      	movs	r0, r3
1004ebca:	46bd      	mov	sp, r7
1004ebcc:	b002      	add	sp, #8
1004ebce:	bd80      	pop	{r7, pc}

1004ebd0 <hci_encryption_change_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_encryption_change_event_int_cb_ucfg(void* header_p,
                                                   uint8_t* buff_p)
{
1004ebd0:	b580      	push	{r7, lr}
1004ebd2:	b082      	sub	sp, #8
1004ebd4:	af00      	add	r7, sp, #0
1004ebd6:	6078      	str	r0, [r7, #4]
1004ebd8:	6039      	str	r1, [r7, #0]
    return hci_encryption_change_event_int_cb(header_p,
1004ebda:	683a      	ldr	r2, [r7, #0]
1004ebdc:	687b      	ldr	r3, [r7, #4]
1004ebde:	0011      	movs	r1, r2
1004ebe0:	0018      	movs	r0, r3
1004ebe2:	f006 fc73 	bl	100554cc <hci_encryption_change_event_int_cb>
1004ebe6:	0003      	movs	r3, r0
                                              buff_p);
}
1004ebe8:	0018      	movs	r0, r3
1004ebea:	46bd      	mov	sp, r7
1004ebec:	b002      	add	sp, #8
1004ebee:	bd80      	pop	{r7, pc}

1004ebf0 <hci_encryption_key_refresh_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_encryption_key_refresh_complete_event_int_cb_ucfg(void* header_p,
                                                                 uint8_t* buff_p)
{
1004ebf0:	b580      	push	{r7, lr}
1004ebf2:	b082      	sub	sp, #8
1004ebf4:	af00      	add	r7, sp, #0
1004ebf6:	6078      	str	r0, [r7, #4]
1004ebf8:	6039      	str	r1, [r7, #0]
    return hci_encryption_key_refresh_complete_event_int_cb(header_p,
1004ebfa:	683a      	ldr	r2, [r7, #0]
1004ebfc:	687b      	ldr	r3, [r7, #4]
1004ebfe:	0011      	movs	r1, r2
1004ec00:	0018      	movs	r0, r3
1004ec02:	f006 fc7f 	bl	10055504 <hci_encryption_key_refresh_complete_event_int_cb>
1004ec06:	0003      	movs	r3, r0
                                                            buff_p);
}
1004ec08:	0018      	movs	r0, r3
1004ec0a:	46bd      	mov	sp, r7
1004ec0c:	b002      	add	sp, #8
1004ec0e:	bd80      	pop	{r7, pc}

1004ec10 <hci_le_connection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_connection_complete_event_int_cb_ucfg(void* header_p,
                                                        uint8_t* buff_p)
{
1004ec10:	b580      	push	{r7, lr}
1004ec12:	b082      	sub	sp, #8
1004ec14:	af00      	add	r7, sp, #0
1004ec16:	6078      	str	r0, [r7, #4]
1004ec18:	6039      	str	r1, [r7, #0]
    return hci_le_connection_complete_event_int_cb(header_p,
1004ec1a:	683a      	ldr	r2, [r7, #0]
1004ec1c:	687b      	ldr	r3, [r7, #4]
1004ec1e:	0011      	movs	r1, r2
1004ec20:	0018      	movs	r0, r3
1004ec22:	f006 fc8b 	bl	1005553c <hci_le_connection_complete_event_int_cb>
1004ec26:	0003      	movs	r3, r0
                                                   buff_p);
}
1004ec28:	0018      	movs	r0, r3
1004ec2a:	46bd      	mov	sp, r7
1004ec2c:	b002      	add	sp, #8
1004ec2e:	bd80      	pop	{r7, pc}

1004ec30 <hci_le_enhanced_connection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_enhanced_connection_complete_event_int_cb_ucfg(void* header_p,
                                                                 uint8_t* buff_p)
{
1004ec30:	b580      	push	{r7, lr}
1004ec32:	b082      	sub	sp, #8
1004ec34:	af00      	add	r7, sp, #0
1004ec36:	6078      	str	r0, [r7, #4]
1004ec38:	6039      	str	r1, [r7, #0]
    return hci_le_enhanced_connection_complete_event_int_cb(header_p,
1004ec3a:	683a      	ldr	r2, [r7, #0]
1004ec3c:	687b      	ldr	r3, [r7, #4]
1004ec3e:	0011      	movs	r1, r2
1004ec40:	0018      	movs	r0, r3
1004ec42:	f006 fcbb 	bl	100555bc <hci_le_enhanced_connection_complete_event_int_cb>
1004ec46:	0003      	movs	r3, r0
                                                            buff_p);
}
1004ec48:	0018      	movs	r0, r3
1004ec4a:	46bd      	mov	sp, r7
1004ec4c:	b002      	add	sp, #8
1004ec4e:	bd80      	pop	{r7, pc}

1004ec50 <hci_le_long_term_key_request_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_long_term_key_request_event_int_cb_ucfg(void* header_p,
                                                          uint8_t* buff_p)
{
1004ec50:	b580      	push	{r7, lr}
1004ec52:	b082      	sub	sp, #8
1004ec54:	af00      	add	r7, sp, #0
1004ec56:	6078      	str	r0, [r7, #4]
1004ec58:	6039      	str	r1, [r7, #0]
    return hci_le_long_term_key_request_event_int_cb(header_p,
1004ec5a:	683a      	ldr	r2, [r7, #0]
1004ec5c:	687b      	ldr	r3, [r7, #4]
1004ec5e:	0011      	movs	r1, r2
1004ec60:	0018      	movs	r0, r3
1004ec62:	f006 fcf1 	bl	10055648 <hci_le_long_term_key_request_event_int_cb>
1004ec66:	0003      	movs	r3, r0
                                                     buff_p);
}
1004ec68:	0018      	movs	r0, r3
1004ec6a:	46bd      	mov	sp, r7
1004ec6c:	b002      	add	sp, #8
1004ec6e:	bd80      	pop	{r7, pc}

1004ec70 <hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg(void* header_p,
                                                                        uint8_t* buff_p)
{
1004ec70:	b580      	push	{r7, lr}
1004ec72:	b082      	sub	sp, #8
1004ec74:	af00      	add	r7, sp, #0
1004ec76:	6078      	str	r0, [r7, #4]
1004ec78:	6039      	str	r1, [r7, #0]
    return hci_le_read_local_p256_public_key_complete_event_int_cb(header_p,
1004ec7a:	683a      	ldr	r2, [r7, #0]
1004ec7c:	687b      	ldr	r3, [r7, #4]
1004ec7e:	0011      	movs	r1, r2
1004ec80:	0018      	movs	r0, r3
1004ec82:	f006 fd11 	bl	100556a8 <hci_le_read_local_p256_public_key_complete_event_int_cb>
1004ec86:	0003      	movs	r3, r0
                                                                   buff_p);
}
1004ec88:	0018      	movs	r0, r3
1004ec8a:	46bd      	mov	sp, r7
1004ec8c:	b002      	add	sp, #8
1004ec8e:	bd80      	pop	{r7, pc}

1004ec90 <hci_le_generate_dhkey_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_generate_dhkey_complete_event_int_cb_ucfg(void* header_p,
                                                            uint8_t* buff_p)
{
1004ec90:	b580      	push	{r7, lr}
1004ec92:	b082      	sub	sp, #8
1004ec94:	af00      	add	r7, sp, #0
1004ec96:	6078      	str	r0, [r7, #4]
1004ec98:	6039      	str	r1, [r7, #0]
    return hci_le_generate_dhkey_complete_event_int_cb(header_p,
1004ec9a:	683a      	ldr	r2, [r7, #0]
1004ec9c:	687b      	ldr	r3, [r7, #4]
1004ec9e:	0011      	movs	r1, r2
1004eca0:	0018      	movs	r0, r3
1004eca2:	f006 fd1f 	bl	100556e4 <hci_le_generate_dhkey_complete_event_int_cb>
1004eca6:	0003      	movs	r3, r0
                                                       buff_p);
}
1004eca8:	0018      	movs	r0, r3
1004ecaa:	46bd      	mov	sp, r7
1004ecac:	b002      	add	sp, #8
1004ecae:	bd80      	pop	{r7, pc}

1004ecb0 <MBM_init_ucfg>:
      (CONTROLLER_PERIODIC_ADV_ENABLED == 1) &&\
      (CONTROLLER_BIS_ENABLED == 1)\
     )\
    )
tBleStatus MBM_init_ucfg(void)
{
1004ecb0:	b580      	push	{r7, lr}
1004ecb2:	af00      	add	r7, sp, #0
    return MBM_init();
1004ecb4:	f011 fe20 	bl	100608f8 <MBM_init>
1004ecb8:	0003      	movs	r3, r0
}
1004ecba:	0018      	movs	r0, r3
1004ecbc:	46bd      	mov	sp, r7
1004ecbe:	bd80      	pop	{r7, pc}

1004ecc0 <smp_debug_trudy__set_config_ucfg>:
#endif

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus smp_debug_trudy__set_config_ucfg(uint32_t config)
{
1004ecc0:	b580      	push	{r7, lr}
1004ecc2:	b082      	sub	sp, #8
1004ecc4:	af00      	add	r7, sp, #0
1004ecc6:	6078      	str	r0, [r7, #4]
    return smp_debug_trudy__set_config(config);
1004ecc8:	687b      	ldr	r3, [r7, #4]
1004ecca:	0018      	movs	r0, r3
1004eccc:	f012 fe0b 	bl	100618e6 <smp_debug_trudy__set_config>
1004ecd0:	0003      	movs	r3, r0
}
1004ecd2:	0018      	movs	r0, r3
1004ecd4:	46bd      	mov	sp, r7
1004ecd6:	b002      	add	sp, #8
1004ecd8:	bd80      	pop	{r7, pc}

1004ecda <smp_sap_scp_force_debug_key_usage_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus smp_sap_scp_force_debug_key_usage_ucfg(uint8_t config_val)
{
1004ecda:	b580      	push	{r7, lr}
1004ecdc:	b082      	sub	sp, #8
1004ecde:	af00      	add	r7, sp, #0
1004ece0:	0002      	movs	r2, r0
1004ece2:	1dfb      	adds	r3, r7, #7
1004ece4:	701a      	strb	r2, [r3, #0]
    return smp_sap_scp_force_debug_key_usage(config_val);
1004ece6:	1dfb      	adds	r3, r7, #7
1004ece8:	781b      	ldrb	r3, [r3, #0]
1004ecea:	0018      	movs	r0, r3
1004ecec:	f013 fafa 	bl	100622e4 <smp_sap_scp_force_debug_key_usage>
1004ecf0:	0003      	movs	r3, r0
}
1004ecf2:	0018      	movs	r0, r3
1004ecf4:	46bd      	mov	sp, r7
1004ecf6:	b002      	add	sp, #8
1004ecf8:	bd80      	pop	{r7, pc}

1004ecfa <L2C_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus L2C_init_ucfg(uint8_t cos_enabled)
{
1004ecfa:	b580      	push	{r7, lr}
1004ecfc:	b082      	sub	sp, #8
1004ecfe:	af00      	add	r7, sp, #0
1004ed00:	0002      	movs	r2, r0
1004ed02:	1dfb      	adds	r3, r7, #7
1004ed04:	701a      	strb	r2, [r3, #0]
    return L2C_init(cos_enabled);
1004ed06:	1dfb      	adds	r3, r7, #7
1004ed08:	781b      	ldrb	r3, [r3, #0]
1004ed0a:	0018      	movs	r0, r3
1004ed0c:	f00a fe26 	bl	1005995c <L2C_init>
1004ed10:	0003      	movs	r3, r0
}
1004ed12:	0018      	movs	r0, r3
1004ed14:	46bd      	mov	sp, r7
1004ed16:	b002      	add	sp, #8
1004ed18:	bd80      	pop	{r7, pc}

1004ed1a <llc_conn_multi_link_connection_ucfg>:
#endif /* ((CONNECTION_SUBRATING_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
tBleStatus llc_conn_multi_link_connection_ucfg(uint8_t enable)
{
1004ed1a:	b580      	push	{r7, lr}
1004ed1c:	b082      	sub	sp, #8
1004ed1e:	af00      	add	r7, sp, #0
1004ed20:	0002      	movs	r2, r0
1004ed22:	1dfb      	adds	r3, r7, #7
1004ed24:	701a      	strb	r2, [r3, #0]
    return llc_conn_multi_link_connection(enable);
1004ed26:	1dfb      	adds	r3, r7, #7
1004ed28:	781b      	ldrb	r3, [r3, #0]
1004ed2a:	0018      	movs	r0, r3
1004ed2c:	f00b fe75 	bl	1005aa1a <llc_conn_multi_link_connection>
1004ed30:	0003      	movs	r3, r0
}
1004ed32:	0018      	movs	r0, r3
1004ed34:	46bd      	mov	sp, r7
1004ed36:	b002      	add	sp, #8
1004ed38:	bd80      	pop	{r7, pc}

1004ed3a <llc_conn_peripheral_roll_back_params_tsk_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void llc_conn_peripheral_roll_back_params_tsk_ucfg(uint16_t task_idx)
{
1004ed3a:	b580      	push	{r7, lr}
1004ed3c:	b082      	sub	sp, #8
1004ed3e:	af00      	add	r7, sp, #0
1004ed40:	0002      	movs	r2, r0
1004ed42:	1dbb      	adds	r3, r7, #6
1004ed44:	801a      	strh	r2, [r3, #0]
    llc_conn_peripheral_roll_back_params_tsk(task_idx);
1004ed46:	1dbb      	adds	r3, r7, #6
1004ed48:	881b      	ldrh	r3, [r3, #0]
1004ed4a:	0018      	movs	r0, r3
1004ed4c:	f00c fcb0 	bl	1005b6b0 <llc_conn_peripheral_roll_back_params_tsk>
}
1004ed50:	46c0      	nop			@ (mov r8, r8)
1004ed52:	46bd      	mov	sp, r7
1004ed54:	b002      	add	sp, #8
1004ed56:	bd80      	pop	{r7, pc}

1004ed58 <LL_cpe_init_phy_update_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_cpe_init_phy_update_ucfg(void)
{
1004ed58:	b580      	push	{r7, lr}
1004ed5a:	af00      	add	r7, sp, #0
    LL_cpe_init_phy_update();
1004ed5c:	f00d fc82 	bl	1005c664 <LL_cpe_init_phy_update>
}
1004ed60:	46c0      	nop			@ (mov r8, r8)
1004ed62:	46bd      	mov	sp, r7
1004ed64:	bd80      	pop	{r7, pc}

1004ed66 <LL_cpe_init_conn_update_ucfg>:
#endif /* ((CONTROLLER_POWER_CONTROL_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_conn_update_ucfg(void)
{
1004ed66:	b580      	push	{r7, lr}
1004ed68:	af00      	add	r7, sp, #0
    LL_cpe_init_conn_update();
1004ed6a:	f00d fc83 	bl	1005c674 <LL_cpe_init_conn_update>
}
1004ed6e:	46c0      	nop			@ (mov r8, r8)
1004ed70:	46bd      	mov	sp, r7
1004ed72:	bd80      	pop	{r7, pc}

1004ed74 <LL_cpe_init_chmap_update_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_chmap_update_ucfg(void)
{
1004ed74:	b580      	push	{r7, lr}
1004ed76:	af00      	add	r7, sp, #0
    LL_cpe_init_chmap_update();
1004ed78:	f00d fc84 	bl	1005c684 <LL_cpe_init_chmap_update>
}
1004ed7c:	46c0      	nop			@ (mov r8, r8)
1004ed7e:	46bd      	mov	sp, r7
1004ed80:	bd80      	pop	{r7, pc}

1004ed82 <LL_cpe_init_ucfg>:
#endif /* ((CONTROLLER_CIS_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_ucfg(void)
{
1004ed82:	b580      	push	{r7, lr}
1004ed84:	af00      	add	r7, sp, #0
    LL_cpe_init();
1004ed86:	f00d fcc1 	bl	1005c70c <LL_cpe_init>
}
1004ed8a:	46c0      	nop			@ (mov r8, r8)
1004ed8c:	46bd      	mov	sp, r7
1004ed8e:	bd80      	pop	{r7, pc}

1004ed90 <LL_conn_upd_max_tx_time_coded_ucfg>:
          (CONNECTION_ENABLED == 1)) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_conn_upd_max_tx_time_coded_ucfg(void* params)
{
1004ed90:	b580      	push	{r7, lr}
1004ed92:	b082      	sub	sp, #8
1004ed94:	af00      	add	r7, sp, #0
1004ed96:	6078      	str	r0, [r7, #4]
    LL_conn_upd_max_tx_time_coded(params);
1004ed98:	687b      	ldr	r3, [r7, #4]
1004ed9a:	0018      	movs	r0, r3
1004ed9c:	f00e f8de 	bl	1005cf5c <LL_conn_upd_max_tx_time_coded>
}
1004eda0:	46c0      	nop			@ (mov r8, r8)
1004eda2:	46bd      	mov	sp, r7
1004eda4:	b002      	add	sp, #8
1004eda6:	bd80      	pop	{r7, pc}

1004eda8 <LL_conn_upd_data_length_change_event_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_conn_upd_data_length_change_event_ucfg(void* params)
{
1004eda8:	b580      	push	{r7, lr}
1004edaa:	b082      	sub	sp, #8
1004edac:	af00      	add	r7, sp, #0
1004edae:	6078      	str	r0, [r7, #4]
    LL_conn_upd_data_length_change_event(params);
1004edb0:	687b      	ldr	r3, [r7, #4]
1004edb2:	0018      	movs	r0, r3
1004edb4:	f00e f956 	bl	1005d064 <LL_conn_upd_data_length_change_event>
}
1004edb8:	46c0      	nop			@ (mov r8, r8)
1004edba:	46bd      	mov	sp, r7
1004edbc:	b002      	add	sp, #8
1004edbe:	bd80      	pop	{r7, pc}

1004edc0 <LLC_authenticated_payload_timeout_processing_ucfg>:
}
#endif /* (CONTROLLER_CTE_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LLC_authenticated_payload_timeout_processing_ucfg(uint16_t task_idx)
{
1004edc0:	b580      	push	{r7, lr}
1004edc2:	b082      	sub	sp, #8
1004edc4:	af00      	add	r7, sp, #0
1004edc6:	0002      	movs	r2, r0
1004edc8:	1dbb      	adds	r3, r7, #6
1004edca:	801a      	strh	r2, [r3, #0]
    LLC_authenticated_payload_timeout_processing(task_idx);
1004edcc:	1dbb      	adds	r3, r7, #6
1004edce:	881b      	ldrh	r3, [r3, #0]
1004edd0:	0018      	movs	r0, r3
1004edd2:	f00e ff47 	bl	1005dc64 <LLC_authenticated_payload_timeout_processing>
}
1004edd6:	46c0      	nop			@ (mov r8, r8)
1004edd8:	46bd      	mov	sp, r7
1004edda:	b002      	add	sp, #8
1004eddc:	bd80      	pop	{r7, pc}

1004edde <LL_phy_upd_pending_ucfg>:
          (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1)
uint8_t LL_phy_upd_pending_ucfg(uint8_t conn_idx)
{
1004edde:	b580      	push	{r7, lr}
1004ede0:	b082      	sub	sp, #8
1004ede2:	af00      	add	r7, sp, #0
1004ede4:	0002      	movs	r2, r0
1004ede6:	1dfb      	adds	r3, r7, #7
1004ede8:	701a      	strb	r2, [r3, #0]
    return LL_phy_upd_pending(conn_idx);
1004edea:	1dfb      	adds	r3, r7, #7
1004edec:	781b      	ldrb	r3, [r3, #0]
1004edee:	0018      	movs	r0, r3
1004edf0:	f00f f905 	bl	1005dffe <LL_phy_upd_pending>
1004edf4:	0003      	movs	r3, r0
}
1004edf6:	0018      	movs	r0, r3
1004edf8:	46bd      	mov	sp, r7
1004edfa:	b002      	add	sp, #8
1004edfc:	bd80      	pop	{r7, pc}

1004edfe <LL_phy_update_init_ucfg>:
#endif /* (CONTROLLER_2M_CODED_PHY_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
tBleStatus LL_phy_update_init_ucfg(void)
{
1004edfe:	b580      	push	{r7, lr}
1004ee00:	af00      	add	r7, sp, #0
    return LL_phy_update_init();
1004ee02:	f00f f8b7 	bl	1005df74 <LL_phy_update_init>
1004ee06:	0003      	movs	r3, r0
}
1004ee08:	0018      	movs	r0, r3
1004ee0a:	46bd      	mov	sp, r7
1004ee0c:	bd80      	pop	{r7, pc}

1004ee0e <LL_phy_update_init_per_st_data_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
tBleStatus LL_phy_update_init_per_st_data_ucfg(uint8_t conn_idx)
{
1004ee0e:	b580      	push	{r7, lr}
1004ee10:	b082      	sub	sp, #8
1004ee12:	af00      	add	r7, sp, #0
1004ee14:	0002      	movs	r2, r0
1004ee16:	1dfb      	adds	r3, r7, #7
1004ee18:	701a      	strb	r2, [r3, #0]
    return LL_phy_update_init_per_st_data(conn_idx);
1004ee1a:	1dfb      	adds	r3, r7, #7
1004ee1c:	781b      	ldrb	r3, [r3, #0]
1004ee1e:	0018      	movs	r0, r3
1004ee20:	f00f f8b2 	bl	1005df88 <LL_phy_update_init_per_st_data>
1004ee24:	0003      	movs	r3, r0
}
1004ee26:	0018      	movs	r0, r3
1004ee28:	46bd      	mov	sp, r7
1004ee2a:	b002      	add	sp, #8
1004ee2c:	bd80      	pop	{r7, pc}

1004ee2e <LL_phy_upd_evt_pending_check_isr_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_phy_upd_evt_pending_check_isr_ucfg(uint8_t conn_idx)
{
1004ee2e:	b580      	push	{r7, lr}
1004ee30:	b082      	sub	sp, #8
1004ee32:	af00      	add	r7, sp, #0
1004ee34:	0002      	movs	r2, r0
1004ee36:	1dfb      	adds	r3, r7, #7
1004ee38:	701a      	strb	r2, [r3, #0]
    LL_phy_upd_evt_pending_check_isr(conn_idx);
1004ee3a:	1dfb      	adds	r3, r7, #7
1004ee3c:	781b      	ldrb	r3, [r3, #0]
1004ee3e:	0018      	movs	r0, r3
1004ee40:	f00f fc8c 	bl	1005e75c <LL_phy_upd_evt_pending_check_isr>
}
1004ee44:	46c0      	nop			@ (mov r8, r8)
1004ee46:	46bd      	mov	sp, r7
1004ee48:	b002      	add	sp, #8
1004ee4a:	bd80      	pop	{r7, pc}

1004ee4c <ADV_ISR_connect_request_received_ucfg>:

#if (CONNECTION_ENABLED == 1)
void ADV_ISR_connect_request_received_ucfg(void* pointer,
                                           uint8_t* packet,
                                           void* PeerIDAddress_p)
{
1004ee4c:	b580      	push	{r7, lr}
1004ee4e:	b084      	sub	sp, #16
1004ee50:	af00      	add	r7, sp, #0
1004ee52:	60f8      	str	r0, [r7, #12]
1004ee54:	60b9      	str	r1, [r7, #8]
1004ee56:	607a      	str	r2, [r7, #4]
    ADV_ISR_connect_request_received(pointer,
1004ee58:	687a      	ldr	r2, [r7, #4]
1004ee5a:	68b9      	ldr	r1, [r7, #8]
1004ee5c:	68fb      	ldr	r3, [r7, #12]
1004ee5e:	0018      	movs	r0, r3
1004ee60:	f010 fd4a 	bl	1005f8f8 <ADV_ISR_connect_request_received>
                                     packet,
                                     PeerIDAddress_p);
}
1004ee64:	46c0      	nop			@ (mov r8, r8)
1004ee66:	46bd      	mov	sp, r7
1004ee68:	b004      	add	sp, #16
1004ee6a:	bd80      	pop	{r7, pc}

1004ee6c <EADV_start_request_radio_tasks_ucfg>:
}
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
uint8_t EADV_start_request_radio_tasks_ucfg(void* pointer)
{
1004ee6c:	b580      	push	{r7, lr}
1004ee6e:	b082      	sub	sp, #8
1004ee70:	af00      	add	r7, sp, #0
1004ee72:	6078      	str	r0, [r7, #4]
    return EADV_start_request_radio_tasks(pointer);
1004ee74:	687b      	ldr	r3, [r7, #4]
1004ee76:	0018      	movs	r0, r3
1004ee78:	f010 feca 	bl	1005fc10 <EADV_start_request_radio_tasks>
1004ee7c:	0003      	movs	r3, r0
}
1004ee7e:	0018      	movs	r0, r3
1004ee80:	46bd      	mov	sp, r7
1004ee82:	b002      	add	sp, #8
1004ee84:	bd80      	pop	{r7, pc}

1004ee86 <LL_init_ucfg>:
                  uint8_t PerAdvScanWr,
                  uint8_t Cte,
                  uint8_t Pcl,
                  uint8_t Cns,
                  uint8_t Chc)
{
1004ee86:	b5b0      	push	{r4, r5, r7, lr}
1004ee88:	b08a      	sub	sp, #40	@ 0x28
1004ee8a:	af08      	add	r7, sp, #32
1004ee8c:	0005      	movs	r5, r0
1004ee8e:	000c      	movs	r4, r1
1004ee90:	0010      	movs	r0, r2
1004ee92:	0019      	movs	r1, r3
1004ee94:	1dfb      	adds	r3, r7, #7
1004ee96:	1c2a      	adds	r2, r5, #0
1004ee98:	701a      	strb	r2, [r3, #0]
1004ee9a:	1dbb      	adds	r3, r7, #6
1004ee9c:	1c22      	adds	r2, r4, #0
1004ee9e:	701a      	strb	r2, [r3, #0]
1004eea0:	1d7b      	adds	r3, r7, #5
1004eea2:	1c02      	adds	r2, r0, #0
1004eea4:	701a      	strb	r2, [r3, #0]
1004eea6:	1d3b      	adds	r3, r7, #4
1004eea8:	1c0a      	adds	r2, r1, #0
1004eeaa:	701a      	strb	r2, [r3, #0]
    LL_init(dataLenExt,
1004eeac:	1d3b      	adds	r3, r7, #4
1004eeae:	781c      	ldrb	r4, [r3, #0]
1004eeb0:	1d7b      	adds	r3, r7, #5
1004eeb2:	781a      	ldrb	r2, [r3, #0]
1004eeb4:	1dbb      	adds	r3, r7, #6
1004eeb6:	7819      	ldrb	r1, [r3, #0]
1004eeb8:	1dfb      	adds	r3, r7, #7
1004eeba:	7818      	ldrb	r0, [r3, #0]
1004eebc:	2330      	movs	r3, #48	@ 0x30
1004eebe:	18fb      	adds	r3, r7, r3
1004eec0:	781b      	ldrb	r3, [r3, #0]
1004eec2:	9306      	str	r3, [sp, #24]
1004eec4:	232c      	movs	r3, #44	@ 0x2c
1004eec6:	18fb      	adds	r3, r7, r3
1004eec8:	781b      	ldrb	r3, [r3, #0]
1004eeca:	9305      	str	r3, [sp, #20]
1004eecc:	2328      	movs	r3, #40	@ 0x28
1004eece:	18fb      	adds	r3, r7, r3
1004eed0:	781b      	ldrb	r3, [r3, #0]
1004eed2:	9304      	str	r3, [sp, #16]
1004eed4:	2324      	movs	r3, #36	@ 0x24
1004eed6:	18fb      	adds	r3, r7, r3
1004eed8:	781b      	ldrb	r3, [r3, #0]
1004eeda:	9303      	str	r3, [sp, #12]
1004eedc:	2320      	movs	r3, #32
1004eede:	18fb      	adds	r3, r7, r3
1004eee0:	781b      	ldrb	r3, [r3, #0]
1004eee2:	9302      	str	r3, [sp, #8]
1004eee4:	231c      	movs	r3, #28
1004eee6:	18fb      	adds	r3, r7, r3
1004eee8:	781b      	ldrb	r3, [r3, #0]
1004eeea:	9301      	str	r3, [sp, #4]
1004eeec:	2318      	movs	r3, #24
1004eeee:	18fb      	adds	r3, r7, r3
1004eef0:	781b      	ldrb	r3, [r3, #0]
1004eef2:	9300      	str	r3, [sp, #0]
1004eef4:	0023      	movs	r3, r4
1004eef6:	f011 f94f 	bl	10060198 <LL_init>
            PerAdvScanWr,
            Cte,
            Pcl,
            Cns,
            Chc);
}
1004eefa:	46c0      	nop			@ (mov r8, r8)
1004eefc:	46bd      	mov	sp, r7
1004eefe:	b002      	add	sp, #8
1004ef00:	bdb0      	pop	{r4, r5, r7, pc}

1004ef02 <smp_fsm_process_actions_wrt_state_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_fsm_process_actions_wrt_state_tsk_ucfg(uint16_t task_idx)
{
1004ef02:	b580      	push	{r7, lr}
1004ef04:	b082      	sub	sp, #8
1004ef06:	af00      	add	r7, sp, #0
1004ef08:	0002      	movs	r2, r0
1004ef0a:	1dbb      	adds	r3, r7, #6
1004ef0c:	801a      	strh	r2, [r3, #0]
    smp_fsm_process_actions_wrt_state_tsk(task_idx);
1004ef0e:	1dbb      	adds	r3, r7, #6
1004ef10:	881b      	ldrh	r3, [r3, #0]
1004ef12:	0018      	movs	r0, r3
1004ef14:	f012 fcea 	bl	100618ec <smp_fsm_process_actions_wrt_state_tsk>
}
1004ef18:	46c0      	nop			@ (mov r8, r8)
1004ef1a:	46bd      	mov	sp, r7
1004ef1c:	b002      	add	sp, #8
1004ef1e:	bd80      	pop	{r7, pc}

1004ef20 <smp_rxp_process_rxed_packets_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_rxp_process_rxed_packets_tsk_ucfg(uint16_t task_idx)
{
1004ef20:	b580      	push	{r7, lr}
1004ef22:	b082      	sub	sp, #8
1004ef24:	af00      	add	r7, sp, #0
1004ef26:	0002      	movs	r2, r0
1004ef28:	1dbb      	adds	r3, r7, #6
1004ef2a:	801a      	strh	r2, [r3, #0]
    smp_rxp_process_rxed_packets_tsk(task_idx);
1004ef2c:	1dbb      	adds	r3, r7, #6
1004ef2e:	881b      	ldrh	r3, [r3, #0]
1004ef30:	0018      	movs	r0, r3
1004ef32:	f012 fdbf 	bl	10061ab4 <smp_rxp_process_rxed_packets_tsk>
}
1004ef36:	46c0      	nop			@ (mov r8, r8)
1004ef38:	46bd      	mov	sp, r7
1004ef3a:	b002      	add	sp, #8
1004ef3c:	bd80      	pop	{r7, pc}

1004ef3e <smp_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_init_ucfg(void)
{
1004ef3e:	b580      	push	{r7, lr}
1004ef40:	af00      	add	r7, sp, #0
    smp_init();
1004ef42:	f012 ff17 	bl	10061d74 <smp_init>
}
1004ef46:	46c0      	nop			@ (mov r8, r8)
1004ef48:	46bd      	mov	sp, r7
1004ef4a:	bd80      	pop	{r7, pc}

1004ef4c <GAT_att_cmn_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_init_ucfg(void)
{
1004ef4c:	b580      	push	{r7, lr}
1004ef4e:	af00      	add	r7, sp, #0
    GAT_att_cmn_init();
1004ef50:	f007 fc66 	bl	10056820 <GAT_att_cmn_init>
}
1004ef54:	46c0      	nop			@ (mov r8, r8)
1004ef56:	46bd      	mov	sp, r7
1004ef58:	bd80      	pop	{r7, pc}

1004ef5a <GAT_att_cmn_timer_expire_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_timer_expire_tsk_ucfg(uint16_t task_idx)
{
1004ef5a:	b580      	push	{r7, lr}
1004ef5c:	b082      	sub	sp, #8
1004ef5e:	af00      	add	r7, sp, #0
1004ef60:	0002      	movs	r2, r0
1004ef62:	1dbb      	adds	r3, r7, #6
1004ef64:	801a      	strh	r2, [r3, #0]
    GAT_att_cmn_timer_expire_tsk(task_idx);
1004ef66:	1dbb      	adds	r3, r7, #6
1004ef68:	881b      	ldrh	r3, [r3, #0]
1004ef6a:	0018      	movs	r0, r3
1004ef6c:	f007 fcc4 	bl	100568f8 <GAT_att_cmn_timer_expire_tsk>
}
1004ef70:	46c0      	nop			@ (mov r8, r8)
1004ef72:	46bd      	mov	sp, r7
1004ef74:	b002      	add	sp, #8
1004ef76:	bd80      	pop	{r7, pc}

1004ef78 <GAT_att_cmn_tx_pool_evt_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_tx_pool_evt_tsk_ucfg(uint16_t task_idx)
{
1004ef78:	b580      	push	{r7, lr}
1004ef7a:	b082      	sub	sp, #8
1004ef7c:	af00      	add	r7, sp, #0
1004ef7e:	0002      	movs	r2, r0
1004ef80:	1dbb      	adds	r3, r7, #6
1004ef82:	801a      	strh	r2, [r3, #0]
    GAT_att_cmn_tx_pool_evt_tsk(task_idx);
1004ef84:	1dbb      	adds	r3, r7, #6
1004ef86:	881b      	ldrh	r3, [r3, #0]
1004ef88:	0018      	movs	r0, r3
1004ef8a:	f007 fd29 	bl	100569e0 <GAT_att_cmn_tx_pool_evt_tsk>
}
1004ef8e:	46c0      	nop			@ (mov r8, r8)
1004ef90:	46bd      	mov	sp, r7
1004ef92:	b002      	add	sp, #8
1004ef94:	bd80      	pop	{r7, pc}

1004ef96 <GAT_att_srv_process_rx_pckt_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_srv_process_rx_pckt_tsk_ucfg(uint16_t task_idx)
{
1004ef96:	b580      	push	{r7, lr}
1004ef98:	b082      	sub	sp, #8
1004ef9a:	af00      	add	r7, sp, #0
1004ef9c:	0002      	movs	r2, r0
1004ef9e:	1dbb      	adds	r3, r7, #6
1004efa0:	801a      	strh	r2, [r3, #0]
    GAT_att_srv_process_rx_pckt_tsk(task_idx);
1004efa2:	1dbb      	adds	r3, r7, #6
1004efa4:	881b      	ldrh	r3, [r3, #0]
1004efa6:	0018      	movs	r0, r3
1004efa8:	f008 f846 	bl	10057038 <GAT_att_srv_process_rx_pckt_tsk>
}
1004efac:	46c0      	nop			@ (mov r8, r8)
1004efae:	46bd      	mov	sp, r7
1004efb0:	b002      	add	sp, #8
1004efb2:	bd80      	pop	{r7, pc}

1004efb4 <GAT_srv_db_hash_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_srv_db_hash_tsk_ucfg(uint16_t task_idx)
{
1004efb4:	b580      	push	{r7, lr}
1004efb6:	b082      	sub	sp, #8
1004efb8:	af00      	add	r7, sp, #0
1004efba:	0002      	movs	r2, r0
1004efbc:	1dbb      	adds	r3, r7, #6
1004efbe:	801a      	strh	r2, [r3, #0]
    GAT_srv_db_hash_tsk(task_idx);
1004efc0:	1dbb      	adds	r3, r7, #6
1004efc2:	881b      	ldrh	r3, [r3, #0]
1004efc4:	0018      	movs	r0, r3
1004efc6:	f009 f921 	bl	1005820c <GAT_srv_db_hash_tsk>
}
1004efca:	46c0      	nop			@ (mov r8, r8)
1004efcc:	46bd      	mov	sp, r7
1004efce:	b002      	add	sp, #8
1004efd0:	bd80      	pop	{r7, pc}

1004efd2 <GAT_srv_send_srv_change_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_srv_send_srv_change_tsk_ucfg(uint16_t task_idx)
{
1004efd2:	b580      	push	{r7, lr}
1004efd4:	b082      	sub	sp, #8
1004efd6:	af00      	add	r7, sp, #0
1004efd8:	0002      	movs	r2, r0
1004efda:	1dbb      	adds	r3, r7, #6
1004efdc:	801a      	strh	r2, [r3, #0]
    GAT_srv_send_srv_change_tsk(task_idx);
1004efde:	1dbb      	adds	r3, r7, #6
1004efe0:	881b      	ldrh	r3, [r3, #0]
1004efe2:	0018      	movs	r0, r3
1004efe4:	f009 f9cc 	bl	10058380 <GAT_srv_send_srv_change_tsk>
}
1004efe8:	46c0      	nop			@ (mov r8, r8)
1004efea:	46bd      	mov	sp, r7
1004efec:	b002      	add	sp, #8
1004efee:	bd80      	pop	{r7, pc}

1004eff0 <aci_gap_terminate>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_terminate(uint16_t Connection_Handle,
                             uint8_t Reason)
{
1004eff0:	b580      	push	{r7, lr}
1004eff2:	b082      	sub	sp, #8
1004eff4:	af00      	add	r7, sp, #0
1004eff6:	0002      	movs	r2, r0
1004eff8:	1dbb      	adds	r3, r7, #6
1004effa:	801a      	strh	r2, [r3, #0]
1004effc:	1d7b      	adds	r3, r7, #5
1004effe:	1c0a      	adds	r2, r1, #0
1004f000:	701a      	strb	r2, [r3, #0]
    return aci_gap_terminate_api(Connection_Handle,
1004f002:	1d7b      	adds	r3, r7, #5
1004f004:	781a      	ldrb	r2, [r3, #0]
1004f006:	1dbb      	adds	r3, r7, #6
1004f008:	881b      	ldrh	r3, [r3, #0]
1004f00a:	0011      	movs	r1, r2
1004f00c:	0018      	movs	r0, r3
1004f00e:	f005 fb49 	bl	100546a4 <aci_gap_terminate_api>
1004f012:	0003      	movs	r3, r0
                                 Reason);
}
1004f014:	0018      	movs	r0, r3
1004f016:	46bd      	mov	sp, r7
1004f018:	b002      	add	sp, #8
1004f01a:	bd80      	pop	{r7, pc}

1004f01c <aci_gap_set_io_capability>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
1004f01c:	b580      	push	{r7, lr}
1004f01e:	b082      	sub	sp, #8
1004f020:	af00      	add	r7, sp, #0
1004f022:	0002      	movs	r2, r0
1004f024:	1dfb      	adds	r3, r7, #7
1004f026:	701a      	strb	r2, [r3, #0]
    return aci_gap_set_io_capability_api(IO_Capability);
1004f028:	1dfb      	adds	r3, r7, #7
1004f02a:	781b      	ldrb	r3, [r3, #0]
1004f02c:	0018      	movs	r0, r3
1004f02e:	f005 fbc4 	bl	100547ba <aci_gap_set_io_capability_api>
1004f032:	0003      	movs	r3, r0
}
1004f034:	0018      	movs	r0, r3
1004f036:	46bd      	mov	sp, r7
1004f038:	b002      	add	sp, #8
1004f03a:	bd80      	pop	{r7, pc}

1004f03c <aci_gap_set_security_requirements>:
                                             uint8_t SC_Support,
                                             uint8_t KeyPress_Notification_Support,
                                             uint8_t Min_Encryption_Key_Size,
                                             uint8_t Max_Encryption_Key_Size,
                                             uint8_t Pairing_Response)
{
1004f03c:	b5b0      	push	{r4, r5, r7, lr}
1004f03e:	b086      	sub	sp, #24
1004f040:	af04      	add	r7, sp, #16
1004f042:	0005      	movs	r5, r0
1004f044:	000c      	movs	r4, r1
1004f046:	0010      	movs	r0, r2
1004f048:	0019      	movs	r1, r3
1004f04a:	1dfb      	adds	r3, r7, #7
1004f04c:	1c2a      	adds	r2, r5, #0
1004f04e:	701a      	strb	r2, [r3, #0]
1004f050:	1dbb      	adds	r3, r7, #6
1004f052:	1c22      	adds	r2, r4, #0
1004f054:	701a      	strb	r2, [r3, #0]
1004f056:	1d7b      	adds	r3, r7, #5
1004f058:	1c02      	adds	r2, r0, #0
1004f05a:	701a      	strb	r2, [r3, #0]
1004f05c:	1d3b      	adds	r3, r7, #4
1004f05e:	1c0a      	adds	r2, r1, #0
1004f060:	701a      	strb	r2, [r3, #0]
    return aci_gap_set_security_requirements_api(Bonding_Mode,
1004f062:	1d3b      	adds	r3, r7, #4
1004f064:	781c      	ldrb	r4, [r3, #0]
1004f066:	1d7b      	adds	r3, r7, #5
1004f068:	781a      	ldrb	r2, [r3, #0]
1004f06a:	1dbb      	adds	r3, r7, #6
1004f06c:	7819      	ldrb	r1, [r3, #0]
1004f06e:	1dfb      	adds	r3, r7, #7
1004f070:	7818      	ldrb	r0, [r3, #0]
1004f072:	2320      	movs	r3, #32
1004f074:	18fb      	adds	r3, r7, r3
1004f076:	781b      	ldrb	r3, [r3, #0]
1004f078:	9302      	str	r3, [sp, #8]
1004f07a:	231c      	movs	r3, #28
1004f07c:	18fb      	adds	r3, r7, r3
1004f07e:	781b      	ldrb	r3, [r3, #0]
1004f080:	9301      	str	r3, [sp, #4]
1004f082:	2318      	movs	r3, #24
1004f084:	18fb      	adds	r3, r7, r3
1004f086:	781b      	ldrb	r3, [r3, #0]
1004f088:	9300      	str	r3, [sp, #0]
1004f08a:	0023      	movs	r3, r4
1004f08c:	f005 fb9e 	bl	100547cc <aci_gap_set_security_requirements_api>
1004f090:	0003      	movs	r3, r0
                                                 SC_Support,
                                                 KeyPress_Notification_Support,
                                                 Min_Encryption_Key_Size,
                                                 Max_Encryption_Key_Size,
                                                 Pairing_Response);
}
1004f092:	0018      	movs	r0, r3
1004f094:	46bd      	mov	sp, r7
1004f096:	b002      	add	sp, #8
1004f098:	bdb0      	pop	{r4, r5, r7, pc}

1004f09a <aci_gap_passkey_resp>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_passkey_resp(uint16_t Connection_Handle,
                                uint32_t Passkey)
{
1004f09a:	b580      	push	{r7, lr}
1004f09c:	b082      	sub	sp, #8
1004f09e:	af00      	add	r7, sp, #0
1004f0a0:	0002      	movs	r2, r0
1004f0a2:	6039      	str	r1, [r7, #0]
1004f0a4:	1dbb      	adds	r3, r7, #6
1004f0a6:	801a      	strh	r2, [r3, #0]
    return aci_gap_passkey_resp_api(Connection_Handle,
1004f0a8:	683a      	ldr	r2, [r7, #0]
1004f0aa:	1dbb      	adds	r3, r7, #6
1004f0ac:	881b      	ldrh	r3, [r3, #0]
1004f0ae:	0011      	movs	r1, r2
1004f0b0:	0018      	movs	r0, r3
1004f0b2:	f005 fbcf 	bl	10054854 <aci_gap_passkey_resp_api>
1004f0b6:	0003      	movs	r3, r0
                                    Passkey);
}
1004f0b8:	0018      	movs	r0, r3
1004f0ba:	46bd      	mov	sp, r7
1004f0bc:	b002      	add	sp, #8
1004f0be:	bd80      	pop	{r7, pc}

1004f0c0 <aci_gatt_srv_add_service>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gatt_srv_add_service(ble_gatt_srv_def_t* Serv_p)
{
1004f0c0:	b580      	push	{r7, lr}
1004f0c2:	b082      	sub	sp, #8
1004f0c4:	af00      	add	r7, sp, #0
1004f0c6:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_add_service_api(Serv_p);
1004f0c8:	687b      	ldr	r3, [r7, #4]
1004f0ca:	0018      	movs	r0, r3
1004f0cc:	f005 fbce 	bl	1005486c <aci_gatt_srv_add_service_api>
1004f0d0:	0003      	movs	r3, r0
}
1004f0d2:	0018      	movs	r0, r3
1004f0d4:	46bd      	mov	sp, r7
1004f0d6:	b002      	add	sp, #8
1004f0d8:	bd80      	pop	{r7, pc}

1004f0da <aci_gatt_srv_get_service_handle>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
uint16_t aci_gatt_srv_get_service_handle(ble_gatt_srv_def_t* Serv_p)
{
1004f0da:	b580      	push	{r7, lr}
1004f0dc:	b082      	sub	sp, #8
1004f0de:	af00      	add	r7, sp, #0
1004f0e0:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_get_service_handle_api(Serv_p);
1004f0e2:	687b      	ldr	r3, [r7, #4]
1004f0e4:	0018      	movs	r0, r3
1004f0e6:	f005 fbc5 	bl	10054874 <aci_gatt_srv_get_service_handle_api>
1004f0ea:	0003      	movs	r3, r0
}
1004f0ec:	0018      	movs	r0, r3
1004f0ee:	46bd      	mov	sp, r7
1004f0f0:	b002      	add	sp, #8
1004f0f2:	bd80      	pop	{r7, pc}

1004f0f4 <aci_gatt_srv_add_char>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gatt_srv_add_char(ble_gatt_chr_def_t* Char_p,
                                 uint16_t Serv_Attr_H)
{
1004f0f4:	b580      	push	{r7, lr}
1004f0f6:	b082      	sub	sp, #8
1004f0f8:	af00      	add	r7, sp, #0
1004f0fa:	6078      	str	r0, [r7, #4]
1004f0fc:	000a      	movs	r2, r1
1004f0fe:	1cbb      	adds	r3, r7, #2
1004f100:	801a      	strh	r2, [r3, #0]
    return aci_gatt_srv_add_char_api(Char_p,
1004f102:	1cbb      	adds	r3, r7, #2
1004f104:	881a      	ldrh	r2, [r3, #0]
1004f106:	687b      	ldr	r3, [r7, #4]
1004f108:	0011      	movs	r1, r2
1004f10a:	0018      	movs	r0, r3
1004f10c:	f005 fbb6 	bl	1005487c <aci_gatt_srv_add_char_api>
1004f110:	0003      	movs	r3, r0
                                     Serv_Attr_H);
}
1004f112:	0018      	movs	r0, r3
1004f114:	46bd      	mov	sp, r7
1004f116:	b002      	add	sp, #8
1004f118:	bd80      	pop	{r7, pc}

1004f11a <aci_gatt_srv_get_char_decl_handle>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
uint16_t aci_gatt_srv_get_char_decl_handle(ble_gatt_chr_def_t* Char_p)
{
1004f11a:	b580      	push	{r7, lr}
1004f11c:	b082      	sub	sp, #8
1004f11e:	af00      	add	r7, sp, #0
1004f120:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_get_char_decl_handle_api(Char_p);
1004f122:	687b      	ldr	r3, [r7, #4]
1004f124:	0018      	movs	r0, r3
1004f126:	f005 fbad 	bl	10054884 <aci_gatt_srv_get_char_decl_handle_api>
1004f12a:	0003      	movs	r3, r0
}
1004f12c:	0018      	movs	r0, r3
1004f12e:	46bd      	mov	sp, r7
1004f130:	b002      	add	sp, #8
1004f132:	bd80      	pop	{r7, pc}

1004f134 <aci_gatt_srv_resp>:
                             uint16_t CID,
                             uint16_t Attr_Handle,
                             uint8_t Error_Code,
                             uint16_t Data_Len,
                             uint8_t* Data_p)
{
1004f134:	b5b0      	push	{r4, r5, r7, lr}
1004f136:	b084      	sub	sp, #16
1004f138:	af02      	add	r7, sp, #8
1004f13a:	0005      	movs	r5, r0
1004f13c:	000c      	movs	r4, r1
1004f13e:	0010      	movs	r0, r2
1004f140:	0019      	movs	r1, r3
1004f142:	1dbb      	adds	r3, r7, #6
1004f144:	1c2a      	adds	r2, r5, #0
1004f146:	801a      	strh	r2, [r3, #0]
1004f148:	1d3b      	adds	r3, r7, #4
1004f14a:	1c22      	adds	r2, r4, #0
1004f14c:	801a      	strh	r2, [r3, #0]
1004f14e:	1cbb      	adds	r3, r7, #2
1004f150:	1c02      	adds	r2, r0, #0
1004f152:	801a      	strh	r2, [r3, #0]
1004f154:	1c7b      	adds	r3, r7, #1
1004f156:	1c0a      	adds	r2, r1, #0
1004f158:	701a      	strb	r2, [r3, #0]
    return aci_gatt_srv_resp_api(Connection_Handle,
1004f15a:	1c7b      	adds	r3, r7, #1
1004f15c:	781c      	ldrb	r4, [r3, #0]
1004f15e:	1cbb      	adds	r3, r7, #2
1004f160:	881a      	ldrh	r2, [r3, #0]
1004f162:	1d3b      	adds	r3, r7, #4
1004f164:	8819      	ldrh	r1, [r3, #0]
1004f166:	1dbb      	adds	r3, r7, #6
1004f168:	8818      	ldrh	r0, [r3, #0]
1004f16a:	69fb      	ldr	r3, [r7, #28]
1004f16c:	9301      	str	r3, [sp, #4]
1004f16e:	2318      	movs	r3, #24
1004f170:	18fb      	adds	r3, r7, r3
1004f172:	881b      	ldrh	r3, [r3, #0]
1004f174:	9300      	str	r3, [sp, #0]
1004f176:	0023      	movs	r3, r4
1004f178:	f005 fb88 	bl	1005488c <aci_gatt_srv_resp_api>
1004f17c:	0003      	movs	r3, r0
                                 CID,
                                 Attr_Handle,
                                 Error_Code,
                                 Data_Len,
                                 Data_p);
}
1004f17e:	0018      	movs	r0, r3
1004f180:	46bd      	mov	sp, r7
1004f182:	b002      	add	sp, #8
1004f184:	bdb0      	pop	{r4, r5, r7, pc}

1004f186 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req(uint16_t Connection_Handle,
                                                     uint16_t Connection_Interval_Min,
                                                     uint16_t Connection_Interval_Max,
                                                     uint16_t Peripheral_Latency,
                                                     uint16_t Timeout_Multiplier)
{
1004f186:	b5b0      	push	{r4, r5, r7, lr}
1004f188:	b084      	sub	sp, #16
1004f18a:	af02      	add	r7, sp, #8
1004f18c:	0005      	movs	r5, r0
1004f18e:	000c      	movs	r4, r1
1004f190:	0010      	movs	r0, r2
1004f192:	0019      	movs	r1, r3
1004f194:	1dbb      	adds	r3, r7, #6
1004f196:	1c2a      	adds	r2, r5, #0
1004f198:	801a      	strh	r2, [r3, #0]
1004f19a:	1d3b      	adds	r3, r7, #4
1004f19c:	1c22      	adds	r2, r4, #0
1004f19e:	801a      	strh	r2, [r3, #0]
1004f1a0:	1cbb      	adds	r3, r7, #2
1004f1a2:	1c02      	adds	r2, r0, #0
1004f1a4:	801a      	strh	r2, [r3, #0]
1004f1a6:	003b      	movs	r3, r7
1004f1a8:	1c0a      	adds	r2, r1, #0
1004f1aa:	801a      	strh	r2, [r3, #0]
    return aci_l2cap_connection_parameter_update_req_api(Connection_Handle,
1004f1ac:	003b      	movs	r3, r7
1004f1ae:	881c      	ldrh	r4, [r3, #0]
1004f1b0:	1cbb      	adds	r3, r7, #2
1004f1b2:	881a      	ldrh	r2, [r3, #0]
1004f1b4:	1d3b      	adds	r3, r7, #4
1004f1b6:	8819      	ldrh	r1, [r3, #0]
1004f1b8:	1dbb      	adds	r3, r7, #6
1004f1ba:	8818      	ldrh	r0, [r3, #0]
1004f1bc:	2318      	movs	r3, #24
1004f1be:	18fb      	adds	r3, r7, r3
1004f1c0:	881b      	ldrh	r3, [r3, #0]
1004f1c2:	9300      	str	r3, [sp, #0]
1004f1c4:	0023      	movs	r3, r4
1004f1c6:	f005 fcd7 	bl	10054b78 <aci_l2cap_connection_parameter_update_req_api>
1004f1ca:	0003      	movs	r3, r0
                                                         Connection_Interval_Min,
                                                         Connection_Interval_Max,
                                                         Peripheral_Latency,
                                                         Timeout_Multiplier);
}
1004f1cc:	0018      	movs	r0, r3
1004f1ce:	46bd      	mov	sp, r7
1004f1d0:	b002      	add	sp, #8
1004f1d2:	bdb0      	pop	{r4, r5, r7, pc}

1004f1d4 <AES_128_HW_enc>:

/* Implementation of the AES 128 required by the crypto library. */
void AES_128_HW_enc(const uint32_t *P_pInputBuffer,
                    uint32_t *P_pOutputBuffer,
                    const uint8_t *P_pKey)
{
1004f1d4:	b580      	push	{r7, lr}
1004f1d6:	b094      	sub	sp, #80	@ 0x50
1004f1d8:	af00      	add	r7, sp, #0
1004f1da:	60f8      	str	r0, [r7, #12]
1004f1dc:	60b9      	str	r1, [r7, #8]
1004f1de:	607a      	str	r2, [r7, #4]
  uint32_t tmp_key_32[4], input_32[4], output_32[4];
  uint8_t *tmp_key = (uint8_t *)tmp_key_32;
1004f1e0:	2330      	movs	r3, #48	@ 0x30
1004f1e2:	18fb      	adds	r3, r7, r3
1004f1e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *input = (uint8_t *)input_32;
1004f1e6:	2320      	movs	r3, #32
1004f1e8:	18fb      	adds	r3, r7, r3
1004f1ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *output = (uint8_t *)output_32;
1004f1ec:	2310      	movs	r3, #16
1004f1ee:	18fb      	adds	r3, r7, r3
1004f1f0:	643b      	str	r3, [r7, #64]	@ 0x40
  int32_t i;

  for (i = 0; i < 16; i++)
1004f1f2:	2300      	movs	r3, #0
1004f1f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004f1f6:	e00d      	b.n	1004f214 <AES_128_HW_enc+0x40>
  {
    tmp_key[15 - i] =  P_pKey[i];
1004f1f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f1fa:	687a      	ldr	r2, [r7, #4]
1004f1fc:	18d2      	adds	r2, r2, r3
1004f1fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f200:	210f      	movs	r1, #15
1004f202:	1acb      	subs	r3, r1, r3
1004f204:	0019      	movs	r1, r3
1004f206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1004f208:	185b      	adds	r3, r3, r1
1004f20a:	7812      	ldrb	r2, [r2, #0]
1004f20c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 16; i++)
1004f20e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f210:	3301      	adds	r3, #1
1004f212:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004f214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f216:	2b0f      	cmp	r3, #15
1004f218:	ddee      	ble.n	1004f1f8 <AES_128_HW_enc+0x24>
  }

  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004f21a:	2300      	movs	r3, #0
1004f21c:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004f21e:	e03d      	b.n	1004f29c <AES_128_HW_enc+0xc8>
  {
    LEW32_2_BUFFER(input, i * 4, P_pInputBuffer[3 - i]);
1004f220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f222:	2203      	movs	r2, #3
1004f224:	1ad3      	subs	r3, r2, r3
1004f226:	009b      	lsls	r3, r3, #2
1004f228:	68fa      	ldr	r2, [r7, #12]
1004f22a:	18d3      	adds	r3, r2, r3
1004f22c:	681a      	ldr	r2, [r3, #0]
1004f22e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f230:	009b      	lsls	r3, r3, #2
1004f232:	0019      	movs	r1, r3
1004f234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004f236:	185b      	adds	r3, r3, r1
1004f238:	b2d2      	uxtb	r2, r2
1004f23a:	701a      	strb	r2, [r3, #0]
1004f23c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f23e:	2203      	movs	r2, #3
1004f240:	1ad3      	subs	r3, r2, r3
1004f242:	009b      	lsls	r3, r3, #2
1004f244:	68fa      	ldr	r2, [r7, #12]
1004f246:	18d3      	adds	r3, r2, r3
1004f248:	681b      	ldr	r3, [r3, #0]
1004f24a:	0a19      	lsrs	r1, r3, #8
1004f24c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f24e:	009b      	lsls	r3, r3, #2
1004f250:	3301      	adds	r3, #1
1004f252:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004f254:	18d3      	adds	r3, r2, r3
1004f256:	b2ca      	uxtb	r2, r1
1004f258:	701a      	strb	r2, [r3, #0]
1004f25a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f25c:	2203      	movs	r2, #3
1004f25e:	1ad3      	subs	r3, r2, r3
1004f260:	009b      	lsls	r3, r3, #2
1004f262:	68fa      	ldr	r2, [r7, #12]
1004f264:	18d3      	adds	r3, r2, r3
1004f266:	681b      	ldr	r3, [r3, #0]
1004f268:	0c19      	lsrs	r1, r3, #16
1004f26a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f26c:	009b      	lsls	r3, r3, #2
1004f26e:	3302      	adds	r3, #2
1004f270:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004f272:	18d3      	adds	r3, r2, r3
1004f274:	b2ca      	uxtb	r2, r1
1004f276:	701a      	strb	r2, [r3, #0]
1004f278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f27a:	2203      	movs	r2, #3
1004f27c:	1ad3      	subs	r3, r2, r3
1004f27e:	009b      	lsls	r3, r3, #2
1004f280:	68fa      	ldr	r2, [r7, #12]
1004f282:	18d3      	adds	r3, r2, r3
1004f284:	681b      	ldr	r3, [r3, #0]
1004f286:	0e19      	lsrs	r1, r3, #24
1004f288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f28a:	009b      	lsls	r3, r3, #2
1004f28c:	3303      	adds	r3, #3
1004f28e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004f290:	18d3      	adds	r3, r2, r3
1004f292:	b2ca      	uxtb	r2, r1
1004f294:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004f296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f298:	3301      	adds	r3, #1
1004f29a:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004f29c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f29e:	2b03      	cmp	r3, #3
1004f2a0:	ddbe      	ble.n	1004f220 <AES_128_HW_enc+0x4c>
  }

  HW_AES_Encrypt(input_32, tmp_key_32, output_32);
1004f2a2:	2310      	movs	r3, #16
1004f2a4:	18fa      	adds	r2, r7, r3
1004f2a6:	2330      	movs	r3, #48	@ 0x30
1004f2a8:	18f9      	adds	r1, r7, r3
1004f2aa:	2320      	movs	r3, #32
1004f2ac:	18fb      	adds	r3, r7, r3
1004f2ae:	0018      	movs	r0, r3
1004f2b0:	f000 f894 	bl	1004f3dc <HW_AES_Encrypt>

  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004f2b4:	2300      	movs	r3, #0
1004f2b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004f2b8:	e028      	b.n	1004f30c <AES_128_HW_enc+0x138>
  {
    P_pOutputBuffer[3 - i] = BUFFER_2_LEW32(output, i * 4);
1004f2ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f2bc:	009b      	lsls	r3, r3, #2
1004f2be:	3303      	adds	r3, #3
1004f2c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
1004f2c2:	18d3      	adds	r3, r2, r3
1004f2c4:	781b      	ldrb	r3, [r3, #0]
1004f2c6:	061a      	lsls	r2, r3, #24
1004f2c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f2ca:	009b      	lsls	r3, r3, #2
1004f2cc:	3302      	adds	r3, #2
1004f2ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
1004f2d0:	18cb      	adds	r3, r1, r3
1004f2d2:	781b      	ldrb	r3, [r3, #0]
1004f2d4:	041b      	lsls	r3, r3, #16
1004f2d6:	431a      	orrs	r2, r3
1004f2d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f2da:	009b      	lsls	r3, r3, #2
1004f2dc:	3301      	adds	r3, #1
1004f2de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
1004f2e0:	18cb      	adds	r3, r1, r3
1004f2e2:	781b      	ldrb	r3, [r3, #0]
1004f2e4:	021b      	lsls	r3, r3, #8
1004f2e6:	431a      	orrs	r2, r3
1004f2e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f2ea:	009b      	lsls	r3, r3, #2
1004f2ec:	0019      	movs	r1, r3
1004f2ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1004f2f0:	185b      	adds	r3, r3, r1
1004f2f2:	781b      	ldrb	r3, [r3, #0]
1004f2f4:	0018      	movs	r0, r3
1004f2f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f2f8:	2103      	movs	r1, #3
1004f2fa:	1acb      	subs	r3, r1, r3
1004f2fc:	009b      	lsls	r3, r3, #2
1004f2fe:	68b9      	ldr	r1, [r7, #8]
1004f300:	18cb      	adds	r3, r1, r3
1004f302:	4302      	orrs	r2, r0
1004f304:	601a      	str	r2, [r3, #0]
  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004f306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f308:	3301      	adds	r3, #1
1004f30a:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004f30c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f30e:	2b03      	cmp	r3, #3
1004f310:	ddd3      	ble.n	1004f2ba <AES_128_HW_enc+0xe6>
  }
}
1004f312:	46c0      	nop			@ (mov r8, r8)
1004f314:	46c0      	nop			@ (mov r8, r8)
1004f316:	46bd      	mov	sp, r7
1004f318:	b014      	add	sp, #80	@ 0x50
1004f31a:	bd80      	pop	{r7, pc}

1004f31c <LL_APB2_GRP1_EnableClock>:
{
1004f31c:	b580      	push	{r7, lr}
1004f31e:	b084      	sub	sp, #16
1004f320:	af00      	add	r7, sp, #0
1004f322:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
1004f324:	4b07      	ldr	r3, [pc, #28]	@ (1004f344 <LL_APB2_GRP1_EnableClock+0x28>)
1004f326:	6e19      	ldr	r1, [r3, #96]	@ 0x60
1004f328:	4b06      	ldr	r3, [pc, #24]	@ (1004f344 <LL_APB2_GRP1_EnableClock+0x28>)
1004f32a:	687a      	ldr	r2, [r7, #4]
1004f32c:	430a      	orrs	r2, r1
1004f32e:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
1004f330:	4b04      	ldr	r3, [pc, #16]	@ (1004f344 <LL_APB2_GRP1_EnableClock+0x28>)
1004f332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004f334:	687a      	ldr	r2, [r7, #4]
1004f336:	4013      	ands	r3, r2
1004f338:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004f33a:	68fb      	ldr	r3, [r7, #12]
}
1004f33c:	46c0      	nop			@ (mov r8, r8)
1004f33e:	46bd      	mov	sp, r7
1004f340:	b004      	add	sp, #16
1004f342:	bd80      	pop	{r7, pc}
1004f344:	48400000 	.word	0x48400000

1004f348 <LL_APB2_GRP1_IsEnabledClock>:
{
1004f348:	b580      	push	{r7, lr}
1004f34a:	b082      	sub	sp, #8
1004f34c:	af00      	add	r7, sp, #0
1004f34e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
1004f350:	4b06      	ldr	r3, [pc, #24]	@ (1004f36c <LL_APB2_GRP1_IsEnabledClock+0x24>)
1004f352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004f354:	687a      	ldr	r2, [r7, #4]
1004f356:	4013      	ands	r3, r2
1004f358:	687a      	ldr	r2, [r7, #4]
1004f35a:	429a      	cmp	r2, r3
1004f35c:	d101      	bne.n	1004f362 <LL_APB2_GRP1_IsEnabledClock+0x1a>
1004f35e:	2301      	movs	r3, #1
1004f360:	e000      	b.n	1004f364 <LL_APB2_GRP1_IsEnabledClock+0x1c>
1004f362:	2300      	movs	r3, #0
}
1004f364:	0018      	movs	r0, r3
1004f366:	46bd      	mov	sp, r7
1004f368:	b002      	add	sp, #8
1004f36a:	bd80      	pop	{r7, pc}
1004f36c:	48400000 	.word	0x48400000

1004f370 <LL_APB2_GRP1_ForceReset>:
{
1004f370:	b580      	push	{r7, lr}
1004f372:	b082      	sub	sp, #8
1004f374:	af00      	add	r7, sp, #0
1004f376:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
1004f378:	4b04      	ldr	r3, [pc, #16]	@ (1004f38c <LL_APB2_GRP1_ForceReset+0x1c>)
1004f37a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
1004f37c:	4b03      	ldr	r3, [pc, #12]	@ (1004f38c <LL_APB2_GRP1_ForceReset+0x1c>)
1004f37e:	687a      	ldr	r2, [r7, #4]
1004f380:	430a      	orrs	r2, r1
1004f382:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004f384:	46c0      	nop			@ (mov r8, r8)
1004f386:	46bd      	mov	sp, r7
1004f388:	b002      	add	sp, #8
1004f38a:	bd80      	pop	{r7, pc}
1004f38c:	48400000 	.word	0x48400000

1004f390 <LL_APB2_GRP1_ReleaseReset>:
{
1004f390:	b580      	push	{r7, lr}
1004f392:	b082      	sub	sp, #8
1004f394:	af00      	add	r7, sp, #0
1004f396:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
1004f398:	4b05      	ldr	r3, [pc, #20]	@ (1004f3b0 <LL_APB2_GRP1_ReleaseReset+0x20>)
1004f39a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004f39c:	687b      	ldr	r3, [r7, #4]
1004f39e:	43d9      	mvns	r1, r3
1004f3a0:	4b03      	ldr	r3, [pc, #12]	@ (1004f3b0 <LL_APB2_GRP1_ReleaseReset+0x20>)
1004f3a2:	400a      	ands	r2, r1
1004f3a4:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004f3a6:	46c0      	nop			@ (mov r8, r8)
1004f3a8:	46bd      	mov	sp, r7
1004f3aa:	b002      	add	sp, #8
1004f3ac:	bd80      	pop	{r7, pc}
1004f3ae:	46c0      	nop			@ (mov r8, r8)
1004f3b0:	48400000 	.word	0x48400000

1004f3b4 <HW_AES_Init>:
/** @defgroup AES_Manager_Public_Functions Public Functions
* @{
*/

HW_AES_ResultStatus HW_AES_Init(void)
{
1004f3b4:	b580      	push	{r7, lr}
1004f3b6:	af00      	add	r7, sp, #0
  if(!LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
1004f3b8:	2001      	movs	r0, #1
1004f3ba:	f7ff ffc5 	bl	1004f348 <LL_APB2_GRP1_IsEnabledClock>
1004f3be:	1e03      	subs	r3, r0, #0
1004f3c0:	d108      	bne.n	1004f3d4 <HW_AES_Init+0x20>
  {
    /* Peripheral reset */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_MRBLE);
1004f3c2:	2001      	movs	r0, #1
1004f3c4:	f7ff ffd4 	bl	1004f370 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_MRBLE);
1004f3c8:	2001      	movs	r0, #1
1004f3ca:	f7ff ffe1 	bl	1004f390 <LL_APB2_GRP1_ReleaseReset>

    /* Enable MR_BLE's clock */
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_MRBLE);
1004f3ce:	2001      	movs	r0, #1
1004f3d0:	f7ff ffa4 	bl	1004f31c <LL_APB2_GRP1_EnableClock>
  }
  return HW_AES_SUCCESS;
1004f3d4:	2300      	movs	r3, #0
}
1004f3d6:	0018      	movs	r0, r3
1004f3d8:	46bd      	mov	sp, r7
1004f3da:	bd80      	pop	{r7, pc}

1004f3dc <HW_AES_Encrypt>:
{
  return HW_AES_SUCCESS;
}

HW_AES_ResultStatus HW_AES_Encrypt(const uint32_t *plainTextData, const uint32_t *key, uint32_t *encryptedData)
{
1004f3dc:	b590      	push	{r4, r7, lr}
1004f3de:	b087      	sub	sp, #28
1004f3e0:	af00      	add	r7, sp, #0
1004f3e2:	60f8      	str	r0, [r7, #12]
1004f3e4:	60b9      	str	r1, [r7, #8]
1004f3e6:	607a      	str	r2, [r7, #4]
  /* Counter to signal interruption by a higher priority routine. */
  static volatile uint8_t start_cnt;
  uint8_t priv_start_cnt;

  start_cnt++;
1004f3e8:	4b31      	ldr	r3, [pc, #196]	@ (1004f4b0 <HW_AES_Encrypt+0xd4>)
1004f3ea:	781b      	ldrb	r3, [r3, #0]
1004f3ec:	b2db      	uxtb	r3, r3
1004f3ee:	3301      	adds	r3, #1
1004f3f0:	b2da      	uxtb	r2, r3
1004f3f2:	4b2f      	ldr	r3, [pc, #188]	@ (1004f4b0 <HW_AES_Encrypt+0xd4>)
1004f3f4:	701a      	strb	r2, [r3, #0]

  do
  {
    priv_start_cnt = start_cnt;
1004f3f6:	2417      	movs	r4, #23
1004f3f8:	193b      	adds	r3, r7, r4
1004f3fa:	4a2d      	ldr	r2, [pc, #180]	@ (1004f4b0 <HW_AES_Encrypt+0xd4>)
1004f3fc:	7812      	ldrb	r2, [r2, #0]
1004f3fe:	701a      	strb	r2, [r3, #0]
    /* Starting from this point, any call to HW_AES_Encrypt will change start_cnt. */

    /* Write the Key in the BLE register */
    BLUE->MANAESKEY0REG = key[0];
1004f400:	23c0      	movs	r3, #192	@ 0xc0
1004f402:	05db      	lsls	r3, r3, #23
1004f404:	68ba      	ldr	r2, [r7, #8]
1004f406:	6812      	ldr	r2, [r2, #0]
1004f408:	629a      	str	r2, [r3, #40]	@ 0x28
    BLUE->MANAESKEY1REG = key[1];
1004f40a:	68bb      	ldr	r3, [r7, #8]
1004f40c:	1d1a      	adds	r2, r3, #4
1004f40e:	23c0      	movs	r3, #192	@ 0xc0
1004f410:	05db      	lsls	r3, r3, #23
1004f412:	6812      	ldr	r2, [r2, #0]
1004f414:	62da      	str	r2, [r3, #44]	@ 0x2c
    BLUE->MANAESKEY2REG = key[2];
1004f416:	68bb      	ldr	r3, [r7, #8]
1004f418:	3308      	adds	r3, #8
1004f41a:	001a      	movs	r2, r3
1004f41c:	23c0      	movs	r3, #192	@ 0xc0
1004f41e:	05db      	lsls	r3, r3, #23
1004f420:	6812      	ldr	r2, [r2, #0]
1004f422:	631a      	str	r2, [r3, #48]	@ 0x30
    BLUE->MANAESKEY3REG = key[3];
1004f424:	68bb      	ldr	r3, [r7, #8]
1004f426:	330c      	adds	r3, #12
1004f428:	001a      	movs	r2, r3
1004f42a:	23c0      	movs	r3, #192	@ 0xc0
1004f42c:	05db      	lsls	r3, r3, #23
1004f42e:	6812      	ldr	r2, [r2, #0]
1004f430:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Write the plain text data in the BLE register */
    BLUE->MANAESCLEARTEXT0REG = plainTextData[0];
1004f432:	23c0      	movs	r3, #192	@ 0xc0
1004f434:	05db      	lsls	r3, r3, #23
1004f436:	68fa      	ldr	r2, [r7, #12]
1004f438:	6812      	ldr	r2, [r2, #0]
1004f43a:	639a      	str	r2, [r3, #56]	@ 0x38
    BLUE->MANAESCLEARTEXT1REG = plainTextData[1];
1004f43c:	68fb      	ldr	r3, [r7, #12]
1004f43e:	1d1a      	adds	r2, r3, #4
1004f440:	23c0      	movs	r3, #192	@ 0xc0
1004f442:	05db      	lsls	r3, r3, #23
1004f444:	6812      	ldr	r2, [r2, #0]
1004f446:	63da      	str	r2, [r3, #60]	@ 0x3c
    BLUE->MANAESCLEARTEXT2REG = plainTextData[2];
1004f448:	68fb      	ldr	r3, [r7, #12]
1004f44a:	3308      	adds	r3, #8
1004f44c:	001a      	movs	r2, r3
1004f44e:	23c0      	movs	r3, #192	@ 0xc0
1004f450:	05db      	lsls	r3, r3, #23
1004f452:	6812      	ldr	r2, [r2, #0]
1004f454:	641a      	str	r2, [r3, #64]	@ 0x40
    BLUE->MANAESCLEARTEXT3REG = plainTextData[3];
1004f456:	68fb      	ldr	r3, [r7, #12]
1004f458:	330c      	adds	r3, #12
1004f45a:	001a      	movs	r2, r3
1004f45c:	23c0      	movs	r3, #192	@ 0xc0
1004f45e:	05db      	lsls	r3, r3, #23
1004f460:	6812      	ldr	r2, [r2, #0]
1004f462:	645a      	str	r2, [r3, #68]	@ 0x44

    HW_AES_Start();
1004f464:	f000 f826 	bl	1004f4b4 <HW_AES_Start>

    /* Read the plain text data in the BLE register */
    encryptedData[0] = BLUE->MANAESCIPHERTEXT0REG;
1004f468:	23c0      	movs	r3, #192	@ 0xc0
1004f46a:	05db      	lsls	r3, r3, #23
1004f46c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
1004f46e:	687b      	ldr	r3, [r7, #4]
1004f470:	601a      	str	r2, [r3, #0]
    encryptedData[1] = BLUE->MANAESCIPHERTEXT1REG;
1004f472:	23c0      	movs	r3, #192	@ 0xc0
1004f474:	05da      	lsls	r2, r3, #23
1004f476:	687b      	ldr	r3, [r7, #4]
1004f478:	3304      	adds	r3, #4
1004f47a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
1004f47c:	601a      	str	r2, [r3, #0]
    encryptedData[2] = BLUE->MANAESCIPHERTEXT2REG;
1004f47e:	23c0      	movs	r3, #192	@ 0xc0
1004f480:	05da      	lsls	r2, r3, #23
1004f482:	687b      	ldr	r3, [r7, #4]
1004f484:	3308      	adds	r3, #8
1004f486:	6d12      	ldr	r2, [r2, #80]	@ 0x50
1004f488:	601a      	str	r2, [r3, #0]
    encryptedData[3] = BLUE->MANAESCIPHERTEXT3REG;
1004f48a:	23c0      	movs	r3, #192	@ 0xc0
1004f48c:	05da      	lsls	r2, r3, #23
1004f48e:	687b      	ldr	r3, [r7, #4]
1004f490:	330c      	adds	r3, #12
1004f492:	6d52      	ldr	r2, [r2, #84]	@ 0x54
1004f494:	601a      	str	r2, [r3, #0]

  } while (priv_start_cnt != start_cnt);
1004f496:	4b06      	ldr	r3, [pc, #24]	@ (1004f4b0 <HW_AES_Encrypt+0xd4>)
1004f498:	781b      	ldrb	r3, [r3, #0]
1004f49a:	b2db      	uxtb	r3, r3
1004f49c:	193a      	adds	r2, r7, r4
1004f49e:	7812      	ldrb	r2, [r2, #0]
1004f4a0:	429a      	cmp	r2, r3
1004f4a2:	d1a8      	bne.n	1004f3f6 <HW_AES_Encrypt+0x1a>

  return HW_AES_SUCCESS;
1004f4a4:	2300      	movs	r3, #0
}
1004f4a6:	0018      	movs	r0, r3
1004f4a8:	46bd      	mov	sp, r7
1004f4aa:	b007      	add	sp, #28
1004f4ac:	bd90      	pop	{r4, r7, pc}
1004f4ae:	46c0      	nop			@ (mov r8, r8)
1004f4b0:	200022b0 	.word	0x200022b0

1004f4b4 <HW_AES_Start>:
 * @param  None
 *
 * @retval i
 */
__STATIC_INLINE uint8_t HW_AES_Start(void)
{
1004f4b4:	b580      	push	{r7, lr}
1004f4b6:	b082      	sub	sp, #8
1004f4b8:	af00      	add	r7, sp, #0
    volatile uint8_t i = 100U;
1004f4ba:	1dfb      	adds	r3, r7, #7
1004f4bc:	2264      	movs	r2, #100	@ 0x64
1004f4be:	701a      	strb	r2, [r3, #0]

    /* Start AES encryption */
    LL_AES_StartManualEncription(BLUE);
1004f4c0:	23c0      	movs	r3, #192	@ 0xc0
1004f4c2:	05db      	lsls	r3, r3, #23
1004f4c4:	0018      	movs	r0, r3
1004f4c6:	f000 f81c 	bl	1004f502 <LL_AES_StartManualEncription>
    do
    {
        i--;
1004f4ca:	1dfb      	adds	r3, r7, #7
1004f4cc:	781b      	ldrb	r3, [r3, #0]
1004f4ce:	b2db      	uxtb	r3, r3
1004f4d0:	3b01      	subs	r3, #1
1004f4d2:	b2da      	uxtb	r2, r3
1004f4d4:	1dfb      	adds	r3, r7, #7
1004f4d6:	701a      	strb	r2, [r3, #0]
        if( !LL_AES_IsBusy(BLUE) )
1004f4d8:	23c0      	movs	r3, #192	@ 0xc0
1004f4da:	05db      	lsls	r3, r3, #23
1004f4dc:	0018      	movs	r0, r3
1004f4de:	f000 f81e 	bl	1004f51e <LL_AES_IsBusy>
1004f4e2:	1e03      	subs	r3, r0, #0
1004f4e4:	d005      	beq.n	1004f4f2 <HW_AES_Start+0x3e>
        {
            break;
        }
    } while (i != 0U);
1004f4e6:	1dfb      	adds	r3, r7, #7
1004f4e8:	781b      	ldrb	r3, [r3, #0]
1004f4ea:	b2db      	uxtb	r3, r3
1004f4ec:	2b00      	cmp	r3, #0
1004f4ee:	d1ec      	bne.n	1004f4ca <HW_AES_Start+0x16>
1004f4f0:	e000      	b.n	1004f4f4 <HW_AES_Start+0x40>
            break;
1004f4f2:	46c0      	nop			@ (mov r8, r8)

    return i;
1004f4f4:	1dfb      	adds	r3, r7, #7
1004f4f6:	781b      	ldrb	r3, [r3, #0]
1004f4f8:	b2db      	uxtb	r3, r3
}
1004f4fa:	0018      	movs	r0, r3
1004f4fc:	46bd      	mov	sp, r7
1004f4fe:	b002      	add	sp, #8
1004f500:	bd80      	pop	{r7, pc}

1004f502 <LL_AES_StartManualEncription>:
  * @rmtoll MANAESCMDREG          START         LL_AES_StartManualEncription
  * @param  BLUEx BLUE Instance
  * @retval None
  */
__STATIC_INLINE void LL_AES_StartManualEncription(BLUE_TypeDef *BLUEx)
{
1004f502:	b580      	push	{r7, lr}
1004f504:	b082      	sub	sp, #8
1004f506:	af00      	add	r7, sp, #0
1004f508:	6078      	str	r0, [r7, #4]
  SET_BIT(BLUEx->MANAESCMDREG, BLUE_MANAESCMDREG_START);
1004f50a:	687b      	ldr	r3, [r7, #4]
1004f50c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
1004f50e:	2201      	movs	r2, #1
1004f510:	431a      	orrs	r2, r3
1004f512:	687b      	ldr	r3, [r7, #4]
1004f514:	659a      	str	r2, [r3, #88]	@ 0x58
}
1004f516:	46c0      	nop			@ (mov r8, r8)
1004f518:	46bd      	mov	sp, r7
1004f51a:	b002      	add	sp, #8
1004f51c:	bd80      	pop	{r7, pc}

1004f51e <LL_AES_IsBusy>:
  * @rmtoll MANAESSTATREG          BUSY         LL_AES_IsBusy
  * @param  BLUEx BLUE Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_AES_IsBusy(BLUE_TypeDef *BLUEx)
{
1004f51e:	b580      	push	{r7, lr}
1004f520:	b082      	sub	sp, #8
1004f522:	af00      	add	r7, sp, #0
1004f524:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->MANAESSTATREG, BLUE_MANAESSTATREG_BUSY) == (BLUE_MANAESSTATREG_BUSY)) ? 1U : 0U);
1004f526:	687b      	ldr	r3, [r7, #4]
1004f528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004f52a:	2201      	movs	r2, #1
1004f52c:	4013      	ands	r3, r2
1004f52e:	2b01      	cmp	r3, #1
1004f530:	d101      	bne.n	1004f536 <LL_AES_IsBusy+0x18>
1004f532:	2301      	movs	r3, #1
1004f534:	e000      	b.n	1004f538 <LL_AES_IsBusy+0x1a>
1004f536:	2300      	movs	r3, #0
}
1004f538:	0018      	movs	r0, r3
1004f53a:	46bd      	mov	sp, r7
1004f53c:	b002      	add	sp, #8
1004f53e:	bd80      	pop	{r7, pc}

1004f540 <LL_PKA_EnableIT_ADDRERR>:
  * @rmtoll CR           ADDRERRIE     LL_PKA_EnableIT_ADDRERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_ADDRERR(PKA_TypeDef *PKAx)
{
1004f540:	b580      	push	{r7, lr}
1004f542:	b082      	sub	sp, #8
1004f544:	af00      	add	r7, sp, #0
1004f546:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_ADDRERRIE);
1004f548:	687b      	ldr	r3, [r7, #4]
1004f54a:	681b      	ldr	r3, [r3, #0]
1004f54c:	2280      	movs	r2, #128	@ 0x80
1004f54e:	0352      	lsls	r2, r2, #13
1004f550:	431a      	orrs	r2, r3
1004f552:	687b      	ldr	r3, [r7, #4]
1004f554:	601a      	str	r2, [r3, #0]
}
1004f556:	46c0      	nop			@ (mov r8, r8)
1004f558:	46bd      	mov	sp, r7
1004f55a:	b002      	add	sp, #8
1004f55c:	bd80      	pop	{r7, pc}

1004f55e <LL_PKA_EnableIT_RAMERR>:
  * @rmtoll CR           RAMERRIE      LL_PKA_EnableIT_RAMERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_RAMERR(PKA_TypeDef *PKAx)
{
1004f55e:	b580      	push	{r7, lr}
1004f560:	b082      	sub	sp, #8
1004f562:	af00      	add	r7, sp, #0
1004f564:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_RAMERRIE);
1004f566:	687b      	ldr	r3, [r7, #4]
1004f568:	681b      	ldr	r3, [r3, #0]
1004f56a:	2280      	movs	r2, #128	@ 0x80
1004f56c:	0312      	lsls	r2, r2, #12
1004f56e:	431a      	orrs	r2, r3
1004f570:	687b      	ldr	r3, [r7, #4]
1004f572:	601a      	str	r2, [r3, #0]
}
1004f574:	46c0      	nop			@ (mov r8, r8)
1004f576:	46bd      	mov	sp, r7
1004f578:	b002      	add	sp, #8
1004f57a:	bd80      	pop	{r7, pc}

1004f57c <LL_PKA_EnableIT_PROCEND>:
  * @rmtoll CR           PROCENDIE     LL_PKA_EnableIT_PROCEND
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_PROCEND(PKA_TypeDef *PKAx)
{
1004f57c:	b580      	push	{r7, lr}
1004f57e:	b082      	sub	sp, #8
1004f580:	af00      	add	r7, sp, #0
1004f582:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_PROCENDIE);
1004f584:	687b      	ldr	r3, [r7, #4]
1004f586:	681b      	ldr	r3, [r3, #0]
1004f588:	2280      	movs	r2, #128	@ 0x80
1004f58a:	0292      	lsls	r2, r2, #10
1004f58c:	431a      	orrs	r2, r3
1004f58e:	687b      	ldr	r3, [r7, #4]
1004f590:	601a      	str	r2, [r3, #0]
}
1004f592:	46c0      	nop			@ (mov r8, r8)
1004f594:	46bd      	mov	sp, r7
1004f596:	b002      	add	sp, #8
1004f598:	bd80      	pop	{r7, pc}
	...

1004f59c <HW_PKA_Init>:
}

#endif /* STM32WB06 STM32WB07 */

void HW_PKA_Init(void)
{
1004f59c:	b580      	push	{r7, lr}
1004f59e:	af00      	add	r7, sp, #0
  PKAMGR_Init();
1004f5a0:	f001 fc98 	bl	10050ed4 <PKAMGR_Init>
  /* Activate interrupts */
  LL_PKA_EnableIT_ADDRERR(PKA);
1004f5a4:	4b07      	ldr	r3, [pc, #28]	@ (1004f5c4 <HW_PKA_Init+0x28>)
1004f5a6:	0018      	movs	r0, r3
1004f5a8:	f7ff ffca 	bl	1004f540 <LL_PKA_EnableIT_ADDRERR>
  LL_PKA_EnableIT_RAMERR(PKA);
1004f5ac:	4b05      	ldr	r3, [pc, #20]	@ (1004f5c4 <HW_PKA_Init+0x28>)
1004f5ae:	0018      	movs	r0, r3
1004f5b0:	f7ff ffd5 	bl	1004f55e <LL_PKA_EnableIT_RAMERR>
  LL_PKA_EnableIT_PROCEND(PKA);
1004f5b4:	4b03      	ldr	r3, [pc, #12]	@ (1004f5c4 <HW_PKA_Init+0x28>)
1004f5b6:	0018      	movs	r0, r3
1004f5b8:	f7ff ffe0 	bl	1004f57c <LL_PKA_EnableIT_PROCEND>
}
1004f5bc:	46c0      	nop			@ (mov r8, r8)
1004f5be:	46bd      	mov	sp, r7
1004f5c0:	bd80      	pop	{r7, pc}
1004f5c2:	46c0      	nop			@ (mov r8, r8)
1004f5c4:	48300000 	.word	0x48300000

1004f5c8 <LL_AHB1_GRP1_EnableClock>:
{
1004f5c8:	b580      	push	{r7, lr}
1004f5ca:	b084      	sub	sp, #16
1004f5cc:	af00      	add	r7, sp, #0
1004f5ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
1004f5d0:	4b07      	ldr	r3, [pc, #28]	@ (1004f5f0 <LL_AHB1_GRP1_EnableClock+0x28>)
1004f5d2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
1004f5d4:	4b06      	ldr	r3, [pc, #24]	@ (1004f5f0 <LL_AHB1_GRP1_EnableClock+0x28>)
1004f5d6:	687a      	ldr	r2, [r7, #4]
1004f5d8:	430a      	orrs	r2, r1
1004f5da:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
1004f5dc:	4b04      	ldr	r3, [pc, #16]	@ (1004f5f0 <LL_AHB1_GRP1_EnableClock+0x28>)
1004f5de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004f5e0:	687a      	ldr	r2, [r7, #4]
1004f5e2:	4013      	ands	r3, r2
1004f5e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004f5e6:	68fb      	ldr	r3, [r7, #12]
}
1004f5e8:	46c0      	nop			@ (mov r8, r8)
1004f5ea:	46bd      	mov	sp, r7
1004f5ec:	b004      	add	sp, #16
1004f5ee:	bd80      	pop	{r7, pc}
1004f5f0:	48400000 	.word	0x48400000

1004f5f4 <LL_RNG_Enable>:
  * @rmtoll CR           RNG_DIS         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
1004f5f4:	b580      	push	{r7, lr}
1004f5f6:	b082      	sub	sp, #8
1004f5f8:	af00      	add	r7, sp, #0
1004f5fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RNGx->CR, RNG_CR_RNG_DIS);
1004f5fc:	687b      	ldr	r3, [r7, #4]
1004f5fe:	681b      	ldr	r3, [r3, #0]
1004f600:	2204      	movs	r2, #4
1004f602:	4393      	bics	r3, r2
1004f604:	001a      	movs	r2, r3
1004f606:	687b      	ldr	r3, [r7, #4]
1004f608:	601a      	str	r2, [r3, #0]
}
1004f60a:	46c0      	nop			@ (mov r8, r8)
1004f60c:	46bd      	mov	sp, r7
1004f60e:	b002      	add	sp, #8
1004f610:	bd80      	pop	{r7, pc}

1004f612 <LL_RNG_IsActiveFlag_RNGRDY>:
  * @rmtoll SR           RNGRDY          LL_RNG_IsActiveFlag_RNGRDY
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_RNGRDY(RNG_TypeDef *RNGx)
{
1004f612:	b580      	push	{r7, lr}
1004f614:	b082      	sub	sp, #8
1004f616:	af00      	add	r7, sp, #0
1004f618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_RNGRDY) == (RNG_SR_RNGRDY)) ? 1UL : 0UL);
1004f61a:	687b      	ldr	r3, [r7, #4]
1004f61c:	685b      	ldr	r3, [r3, #4]
1004f61e:	2201      	movs	r2, #1
1004f620:	4013      	ands	r3, r2
1004f622:	2b01      	cmp	r3, #1
1004f624:	d101      	bne.n	1004f62a <LL_RNG_IsActiveFlag_RNGRDY+0x18>
1004f626:	2301      	movs	r3, #1
1004f628:	e000      	b.n	1004f62c <LL_RNG_IsActiveFlag_RNGRDY+0x1a>
1004f62a:	2300      	movs	r3, #0
}
1004f62c:	0018      	movs	r0, r3
1004f62e:	46bd      	mov	sp, r7
1004f630:	b002      	add	sp, #8
1004f632:	bd80      	pop	{r7, pc}

1004f634 <LL_RNG_IsActiveFlag_FAULT>:
  * @rmtoll SR           FAULT          LL_RNG_IsActiveFlag_FAULT
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_FAULT(RNG_TypeDef *RNGx)
{
1004f634:	b580      	push	{r7, lr}
1004f636:	b082      	sub	sp, #8
1004f638:	af00      	add	r7, sp, #0
1004f63a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_FAULT) == (RNG_SR_FAULT)) ? 1UL : 0UL);
1004f63c:	687b      	ldr	r3, [r7, #4]
1004f63e:	685b      	ldr	r3, [r3, #4]
1004f640:	2204      	movs	r2, #4
1004f642:	4013      	ands	r3, r2
1004f644:	2b04      	cmp	r3, #4
1004f646:	d101      	bne.n	1004f64c <LL_RNG_IsActiveFlag_FAULT+0x18>
1004f648:	2301      	movs	r3, #1
1004f64a:	e000      	b.n	1004f64e <LL_RNG_IsActiveFlag_FAULT+0x1a>
1004f64c:	2300      	movs	r3, #0
}
1004f64e:	0018      	movs	r0, r3
1004f650:	46bd      	mov	sp, r7
1004f652:	b002      	add	sp, #8
1004f654:	bd80      	pop	{r7, pc}

1004f656 <LL_RNG_ReadRandData16>:
  * @rmtoll DR           RNDATA        LL_RNG_ReadRandData16
  * @param  RNGx RNG Instance
  * @retval Generated 16-bit random value
  */
__STATIC_INLINE uint16_t LL_RNG_ReadRandData16(RNG_TypeDef *RNGx)
{
1004f656:	b580      	push	{r7, lr}
1004f658:	b082      	sub	sp, #8
1004f65a:	af00      	add	r7, sp, #0
1004f65c:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_REG(RNGx->VAL));
1004f65e:	687b      	ldr	r3, [r7, #4]
1004f660:	689b      	ldr	r3, [r3, #8]
1004f662:	b29b      	uxth	r3, r3
}
1004f664:	0018      	movs	r0, r3
1004f666:	46bd      	mov	sp, r7
1004f668:	b002      	add	sp, #8
1004f66a:	bd80      	pop	{r7, pc}

1004f66c <HW_RNG_Init>:
/** @defgroup RNG_Manager_Public_Functions Public Functions
* @{
*/

HW_RNG_ResultStatus HW_RNG_Init(void)
{
1004f66c:	b580      	push	{r7, lr}
1004f66e:	af00      	add	r7, sp, #0
  }
#endif /* STM32WB09 */

#if defined (STM32WB07) || defined (STM32WB06) || defined(STM32WB05)
  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_RNG);
1004f670:	2380      	movs	r3, #128	@ 0x80
1004f672:	02db      	lsls	r3, r3, #11
1004f674:	0018      	movs	r0, r3
1004f676:	f7ff ffa7 	bl	1004f5c8 <LL_AHB1_GRP1_EnableClock>

  /* Initialize random numbers generation */
  LL_RNG_Enable(RNG);
1004f67a:	4b0b      	ldr	r3, [pc, #44]	@ (1004f6a8 <HW_RNG_Init+0x3c>)
1004f67c:	0018      	movs	r0, r3
1004f67e:	f7ff ffb9 	bl	1004f5f4 <LL_RNG_Enable>

  /* Wait for DRDY flag to be raised */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004f682:	46c0      	nop			@ (mov r8, r8)
1004f684:	4b08      	ldr	r3, [pc, #32]	@ (1004f6a8 <HW_RNG_Init+0x3c>)
1004f686:	0018      	movs	r0, r3
1004f688:	f7ff ffc3 	bl	1004f612 <LL_RNG_IsActiveFlag_RNGRDY>
1004f68c:	1e03      	subs	r3, r0, #0
1004f68e:	d0f9      	beq.n	1004f684 <HW_RNG_Init+0x18>

  /* Check if error occurs */
  if (  LL_RNG_IsActiveFlag_FAULT(RNG)  )
1004f690:	4b05      	ldr	r3, [pc, #20]	@ (1004f6a8 <HW_RNG_Init+0x3c>)
1004f692:	0018      	movs	r0, r3
1004f694:	f7ff ffce 	bl	1004f634 <LL_RNG_IsActiveFlag_FAULT>
1004f698:	1e03      	subs	r3, r0, #0
1004f69a:	d001      	beq.n	1004f6a0 <HW_RNG_Init+0x34>
  {
    /* Clock or Seed Error detected. Set LED to blinking mode (Error type)*/
    return HW_RNG_ERROR;
1004f69c:	2301      	movs	r3, #1
1004f69e:	e000      	b.n	1004f6a2 <HW_RNG_Init+0x36>
  }

  /* Values of Generated Random numbers are now available in num array. */

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/
  return HW_RNG_SUCCESS;
1004f6a0:	2300      	movs	r3, #0
}
1004f6a2:	0018      	movs	r0, r3
1004f6a4:	46bd      	mov	sp, r7
1004f6a6:	bd80      	pop	{r7, pc}
1004f6a8:	48600000 	.word	0x48600000

1004f6ac <HW_RNG_GetRandom16>:
 * @brief Provide a 16-bit true random number
 * @param num: pointer to the random value returned
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom16(uint16_t* num)
{
1004f6ac:	b580      	push	{r7, lr}
1004f6ae:	b082      	sub	sp, #8
1004f6b0:	af00      	add	r7, sp, #0
1004f6b2:	6078      	str	r0, [r7, #4]

#endif /* STM32WB09 */

#if defined (STM32WB07) || defined (STM32WB06) || defined(STM32WB05)
  /* Wait for RNGRDY signal */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004f6b4:	46c0      	nop			@ (mov r8, r8)
1004f6b6:	4b09      	ldr	r3, [pc, #36]	@ (1004f6dc <HW_RNG_GetRandom16+0x30>)
1004f6b8:	0018      	movs	r0, r3
1004f6ba:	f7ff ffaa 	bl	1004f612 <LL_RNG_IsActiveFlag_RNGRDY>
1004f6be:	1e03      	subs	r3, r0, #0
1004f6c0:	d0f9      	beq.n	1004f6b6 <HW_RNG_GetRandom16+0xa>

  *num = (uint16_t)LL_RNG_ReadRandData16(RNG);
1004f6c2:	4b06      	ldr	r3, [pc, #24]	@ (1004f6dc <HW_RNG_GetRandom16+0x30>)
1004f6c4:	0018      	movs	r0, r3
1004f6c6:	f7ff ffc6 	bl	1004f656 <LL_RNG_ReadRandData16>
1004f6ca:	0003      	movs	r3, r0
1004f6cc:	001a      	movs	r2, r3
1004f6ce:	687b      	ldr	r3, [r7, #4]
1004f6d0:	801a      	strh	r2, [r3, #0]

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
1004f6d2:	2300      	movs	r3, #0
}
1004f6d4:	0018      	movs	r0, r3
1004f6d6:	46bd      	mov	sp, r7
1004f6d8:	b002      	add	sp, #8
1004f6da:	bd80      	pop	{r7, pc}
1004f6dc:	48600000 	.word	0x48600000

1004f6e0 <HW_RNG_GetRandom32>:
 * @param num: pointer to the random value returned
 *
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom32(uint32_t* num)
{
1004f6e0:	b590      	push	{r4, r7, lr}
1004f6e2:	b085      	sub	sp, #20
1004f6e4:	af00      	add	r7, sp, #0
1004f6e6:	6078      	str	r0, [r7, #4]

  *num = LL_RNG_READRANDDATA32(RNG);
#endif /* STM32WB09 */

#if defined (STM32WB07) || defined (STM32WB06) || defined(STM32WB05)
  uint16_t *num_16 = (uint16_t *) num;
1004f6e8:	687b      	ldr	r3, [r7, #4]
1004f6ea:	60fb      	str	r3, [r7, #12]

  /* Wait for RNGRDY signal */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004f6ec:	46c0      	nop			@ (mov r8, r8)
1004f6ee:	4b11      	ldr	r3, [pc, #68]	@ (1004f734 <HW_RNG_GetRandom32+0x54>)
1004f6f0:	0018      	movs	r0, r3
1004f6f2:	f7ff ff8e 	bl	1004f612 <LL_RNG_IsActiveFlag_RNGRDY>
1004f6f6:	1e03      	subs	r3, r0, #0
1004f6f8:	d0f9      	beq.n	1004f6ee <HW_RNG_GetRandom32+0xe>

  num_16[0] = (uint16_t)LL_RNG_ReadRandData16(RNG);
1004f6fa:	4b0e      	ldr	r3, [pc, #56]	@ (1004f734 <HW_RNG_GetRandom32+0x54>)
1004f6fc:	0018      	movs	r0, r3
1004f6fe:	f7ff ffaa 	bl	1004f656 <LL_RNG_ReadRandData16>
1004f702:	0003      	movs	r3, r0
1004f704:	001a      	movs	r2, r3
1004f706:	68fb      	ldr	r3, [r7, #12]
1004f708:	801a      	strh	r2, [r3, #0]

  /* Wait for RNGRDY signal */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004f70a:	46c0      	nop			@ (mov r8, r8)
1004f70c:	4b09      	ldr	r3, [pc, #36]	@ (1004f734 <HW_RNG_GetRandom32+0x54>)
1004f70e:	0018      	movs	r0, r3
1004f710:	f7ff ff7f 	bl	1004f612 <LL_RNG_IsActiveFlag_RNGRDY>
1004f714:	1e03      	subs	r3, r0, #0
1004f716:	d0f9      	beq.n	1004f70c <HW_RNG_GetRandom32+0x2c>

  num_16[1] = (uint16_t)LL_RNG_ReadRandData16(RNG);
1004f718:	68fb      	ldr	r3, [r7, #12]
1004f71a:	1c9c      	adds	r4, r3, #2
1004f71c:	4b05      	ldr	r3, [pc, #20]	@ (1004f734 <HW_RNG_GetRandom32+0x54>)
1004f71e:	0018      	movs	r0, r3
1004f720:	f7ff ff99 	bl	1004f656 <LL_RNG_ReadRandData16>
1004f724:	0003      	movs	r3, r0
1004f726:	8023      	strh	r3, [r4, #0]
#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
1004f728:	2300      	movs	r3, #0
}
1004f72a:	0018      	movs	r0, r3
1004f72c:	46bd      	mov	sp, r7
1004f72e:	b005      	add	sp, #20
1004f730:	bd90      	pop	{r4, r7, pc}
1004f732:	46c0      	nop			@ (mov r8, r8)
1004f734:	48600000 	.word	0x48600000

1004f738 <NVMDB_get_info>:
}

#endif

static NVMDB_status_t NVMDB_get_info(NVMDB_info *info)
{
1004f738:	b580      	push	{r7, lr}
1004f73a:	b084      	sub	sp, #16
1004f73c:	af00      	add	r7, sp, #0
1004f73e:	6078      	str	r0, [r7, #4]
  uint32_t address = info->start_address;
1004f740:	687b      	ldr	r3, [r7, #4]
1004f742:	681b      	ldr	r3, [r3, #0]
1004f744:	60fb      	str	r3, [r7, #12]
  NVMDB_RecordType_ptr record_p;

  info->valid_records = 0;
1004f746:	687b      	ldr	r3, [r7, #4]
1004f748:	2200      	movs	r2, #0
1004f74a:	811a      	strh	r2, [r3, #8]
  info->invalid_records = 0;
1004f74c:	687b      	ldr	r3, [r7, #4]
1004f74e:	2200      	movs	r2, #0
1004f750:	815a      	strh	r2, [r3, #10]
  info->free_space = 0;
1004f752:	687b      	ldr	r3, [r7, #4]
1004f754:	2200      	movs	r2, #0
1004f756:	819a      	strh	r2, [r3, #12]
  info->locked = FALSE;
1004f758:	687b      	ldr	r3, [r7, #4]
1004f75a:	2200      	movs	r2, #0
1004f75c:	739a      	strb	r2, [r3, #14]

  while(1)
  {

    record_p = (NVMDB_RecordType_ptr)address;
1004f75e:	68fb      	ldr	r3, [r7, #12]
1004f760:	60bb      	str	r3, [r7, #8]

    if(record_p->header.valid_flag == NO_RECORD)
1004f762:	68bb      	ldr	r3, [r7, #8]
1004f764:	781b      	ldrb	r3, [r3, #0]
1004f766:	2bff      	cmp	r3, #255	@ 0xff
1004f768:	d10c      	bne.n	1004f784 <NVMDB_get_info+0x4c>
    {
      info->free_space = info->end_address - address - RECORD_HEADER_SIZE;
1004f76a:	687b      	ldr	r3, [r7, #4]
1004f76c:	685b      	ldr	r3, [r3, #4]
1004f76e:	b29a      	uxth	r2, r3
1004f770:	68fb      	ldr	r3, [r7, #12]
1004f772:	b29b      	uxth	r3, r3
1004f774:	1ad3      	subs	r3, r2, r3
1004f776:	b29b      	uxth	r3, r3
1004f778:	3b04      	subs	r3, #4
1004f77a:	b29a      	uxth	r2, r3
1004f77c:	687b      	ldr	r3, [r7, #4]
1004f77e:	819a      	strh	r2, [r3, #12]
      return NVMDB_STATUS_OK;
1004f780:	2300      	movs	r3, #0
1004f782:	e028      	b.n	1004f7d6 <NVMDB_get_info+0x9e>
    }
    else if(record_p->header.valid_flag == VALID_RECORD)
1004f784:	68bb      	ldr	r3, [r7, #8]
1004f786:	781b      	ldrb	r3, [r3, #0]
1004f788:	2bfe      	cmp	r3, #254	@ 0xfe
1004f78a:	d106      	bne.n	1004f79a <NVMDB_get_info+0x62>
    {
      info->valid_records++;
1004f78c:	687b      	ldr	r3, [r7, #4]
1004f78e:	891b      	ldrh	r3, [r3, #8]
1004f790:	3301      	adds	r3, #1
1004f792:	b29a      	uxth	r2, r3
1004f794:	687b      	ldr	r3, [r7, #4]
1004f796:	811a      	strh	r2, [r3, #8]
1004f798:	e00c      	b.n	1004f7b4 <NVMDB_get_info+0x7c>
    }
    else if(record_p->header.valid_flag == INVALID_RECORD)
1004f79a:	68bb      	ldr	r3, [r7, #8]
1004f79c:	781b      	ldrb	r3, [r3, #0]
1004f79e:	2b00      	cmp	r3, #0
1004f7a0:	d106      	bne.n	1004f7b0 <NVMDB_get_info+0x78>
    {
      info->invalid_records++;
1004f7a2:	687b      	ldr	r3, [r7, #4]
1004f7a4:	895b      	ldrh	r3, [r3, #10]
1004f7a6:	3301      	adds	r3, #1
1004f7a8:	b29a      	uxth	r2, r3
1004f7aa:	687b      	ldr	r3, [r7, #4]
1004f7ac:	815a      	strh	r2, [r3, #10]
1004f7ae:	e001      	b.n	1004f7b4 <NVMDB_get_info+0x7c>
    }
    else
    {
      // Wrong flag
      return NVMDB_STATUS_CORRUPTED_DB;
1004f7b0:	2303      	movs	r3, #3
1004f7b2:	e010      	b.n	1004f7d6 <NVMDB_get_info+0x9e>
    }

    address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
1004f7b4:	68bb      	ldr	r3, [r7, #8]
1004f7b6:	885b      	ldrh	r3, [r3, #2]
1004f7b8:	3303      	adds	r3, #3
1004f7ba:	2203      	movs	r2, #3
1004f7bc:	4313      	orrs	r3, r2
1004f7be:	001a      	movs	r2, r3
1004f7c0:	68fb      	ldr	r3, [r7, #12]
1004f7c2:	18d3      	adds	r3, r2, r3
1004f7c4:	3301      	adds	r3, #1
1004f7c6:	60fb      	str	r3, [r7, #12]

    if(address + MIN_RECORD_SIZE >= info->end_address)  // End of DB reached
1004f7c8:	68fb      	ldr	r3, [r7, #12]
1004f7ca:	1d5a      	adds	r2, r3, #5
1004f7cc:	687b      	ldr	r3, [r7, #4]
1004f7ce:	685b      	ldr	r3, [r3, #4]
1004f7d0:	429a      	cmp	r2, r3
1004f7d2:	d3c4      	bcc.n	1004f75e <NVMDB_get_info+0x26>
    {
      return NVMDB_STATUS_OK;
1004f7d4:	2300      	movs	r3, #0
    }
  }
}
1004f7d6:	0018      	movs	r0, r3
1004f7d8:	46bd      	mov	sp, r7
1004f7da:	b004      	add	sp, #16
1004f7dc:	bd80      	pop	{r7, pc}

1004f7de <NextRecordNoLock>:

/* Current_record_length is used to read the next record when the current record
   is no more present (because, for example, a clean operation has canceled it). */
static NVMDB_status_t NextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t type, uint8_t **data_p, NVMDB_RecordSizeType *data_len, NVMDB_RecordSizeType current_record_length, uint8_t *record_type)
{
1004f7de:	b580      	push	{r7, lr}
1004f7e0:	b086      	sub	sp, #24
1004f7e2:	af00      	add	r7, sp, #0
1004f7e4:	60f8      	str	r0, [r7, #12]
1004f7e6:	607a      	str	r2, [r7, #4]
1004f7e8:	603b      	str	r3, [r7, #0]
1004f7ea:	230b      	movs	r3, #11
1004f7ec:	18fb      	adds	r3, r7, r3
1004f7ee:	1c0a      	adds	r2, r1, #0
1004f7f0:	701a      	strb	r2, [r3, #0]
      return NVMDB_STATUS_END_OF_DB;
    }
  }
#endif

  if(current_record_length)
1004f7f2:	2020      	movs	r0, #32
1004f7f4:	183b      	adds	r3, r7, r0
1004f7f6:	881b      	ldrh	r3, [r3, #0]
1004f7f8:	2b00      	cmp	r3, #0
1004f7fa:	d00a      	beq.n	1004f812 <NextRecordNoLock+0x34>
  {
    header.length = current_record_length;
1004f7fc:	2110      	movs	r1, #16
1004f7fe:	187a      	adds	r2, r7, r1
1004f800:	183b      	adds	r3, r7, r0
1004f802:	881b      	ldrh	r3, [r3, #0]
1004f804:	8053      	strh	r3, [r2, #2]
    header.valid_flag = VALID_RECORD;
1004f806:	187b      	adds	r3, r7, r1
1004f808:	22fe      	movs	r2, #254	@ 0xfe
1004f80a:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
1004f80c:	187b      	adds	r3, r7, r1
1004f80e:	617b      	str	r3, [r7, #20]
1004f810:	e002      	b.n	1004f818 <NextRecordNoLock+0x3a>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004f812:	68fb      	ldr	r3, [r7, #12]
1004f814:	685b      	ldr	r3, [r3, #4]
1004f816:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004f818:	68fb      	ldr	r3, [r7, #12]
1004f81a:	685a      	ldr	r2, [r3, #4]
1004f81c:	68fb      	ldr	r3, [r7, #12]
1004f81e:	689b      	ldr	r3, [r3, #8]
1004f820:	429a      	cmp	r2, r3
1004f822:	d203      	bcs.n	1004f82c <NextRecordNoLock+0x4e>
1004f824:	697b      	ldr	r3, [r7, #20]
1004f826:	781b      	ldrb	r3, [r3, #0]
1004f828:	2bff      	cmp	r3, #255	@ 0xff
1004f82a:	d101      	bne.n	1004f830 <NextRecordNoLock+0x52>
  {
    return NVMDB_STATUS_END_OF_DB;
1004f82c:	2304      	movs	r3, #4
1004f82e:	e04b      	b.n	1004f8c8 <NextRecordNoLock+0xea>
  while(1)
  {

    // If it is the first read, the pointer already points to first record.
    // If it is not the first read, advance the pointer to the next record (word aligned).
    if(handle_p->first_read)
1004f830:	68fb      	ldr	r3, [r7, #12]
1004f832:	7b1b      	ldrb	r3, [r3, #12]
1004f834:	2b00      	cmp	r3, #0
1004f836:	d003      	beq.n	1004f840 <NextRecordNoLock+0x62>
    {
      handle_p->first_read = FALSE;
1004f838:	68fb      	ldr	r3, [r7, #12]
1004f83a:	2200      	movs	r2, #0
1004f83c:	731a      	strb	r2, [r3, #12]
1004f83e:	e019      	b.n	1004f874 <NextRecordNoLock+0x96>
    }
    else
    {
      handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
1004f840:	68fb      	ldr	r3, [r7, #12]
1004f842:	685b      	ldr	r3, [r3, #4]
1004f844:	697a      	ldr	r2, [r7, #20]
1004f846:	8852      	ldrh	r2, [r2, #2]
1004f848:	3203      	adds	r2, #3
1004f84a:	2103      	movs	r1, #3
1004f84c:	430a      	orrs	r2, r1
1004f84e:	189b      	adds	r3, r3, r2
1004f850:	1c5a      	adds	r2, r3, #1
1004f852:	68fb      	ldr	r3, [r7, #12]
1004f854:	605a      	str	r2, [r3, #4]
      record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004f856:	68fb      	ldr	r3, [r7, #12]
1004f858:	685b      	ldr	r3, [r3, #4]
1004f85a:	617b      	str	r3, [r7, #20]

      if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004f85c:	68fb      	ldr	r3, [r7, #12]
1004f85e:	685a      	ldr	r2, [r3, #4]
1004f860:	68fb      	ldr	r3, [r7, #12]
1004f862:	689b      	ldr	r3, [r3, #8]
1004f864:	429a      	cmp	r2, r3
1004f866:	d203      	bcs.n	1004f870 <NextRecordNoLock+0x92>
1004f868:	697b      	ldr	r3, [r7, #20]
1004f86a:	781b      	ldrb	r3, [r3, #0]
1004f86c:	2bff      	cmp	r3, #255	@ 0xff
1004f86e:	d101      	bne.n	1004f874 <NextRecordNoLock+0x96>
        {
          // A record to be written has been found in cache
          return NVMDB_STATUS_OK;
        }
#endif
        return NVMDB_STATUS_END_OF_DB;
1004f870:	2304      	movs	r3, #4
1004f872:	e029      	b.n	1004f8c8 <NextRecordNoLock+0xea>
      }
    }

    if(record_p->header.valid_flag == INVALID_RECORD)
1004f874:	697b      	ldr	r3, [r7, #20]
1004f876:	781b      	ldrb	r3, [r3, #0]
1004f878:	2b00      	cmp	r3, #0
1004f87a:	d023      	beq.n	1004f8c4 <NextRecordNoLock+0xe6>
    {
      // If record is invalidated, address is updated in next cycle.
      continue;
    }

    if(record_p->header.valid_flag != VALID_RECORD)
1004f87c:	697b      	ldr	r3, [r7, #20]
1004f87e:	781b      	ldrb	r3, [r3, #0]
1004f880:	2bfe      	cmp	r3, #254	@ 0xfe
1004f882:	d001      	beq.n	1004f888 <NextRecordNoLock+0xaa>
    {
      return NVMDB_STATUS_CORRUPTED_DB;
1004f884:	2303      	movs	r3, #3
1004f886:	e01f      	b.n	1004f8c8 <NextRecordNoLock+0xea>
    }

    if(type == ALL_TYPES || record_p->header.record_id == type)
1004f888:	220b      	movs	r2, #11
1004f88a:	18bb      	adds	r3, r7, r2
1004f88c:	781b      	ldrb	r3, [r3, #0]
1004f88e:	2bff      	cmp	r3, #255	@ 0xff
1004f890:	d005      	beq.n	1004f89e <NextRecordNoLock+0xc0>
1004f892:	697b      	ldr	r3, [r7, #20]
1004f894:	785b      	ldrb	r3, [r3, #1]
1004f896:	18ba      	adds	r2, r7, r2
1004f898:	7812      	ldrb	r2, [r2, #0]
1004f89a:	429a      	cmp	r2, r3
1004f89c:	d1c8      	bne.n	1004f830 <NextRecordNoLock+0x52>
      {
        continue;
      }
#endif

      *data_p = (uint8_t *)handle_p->address + RECORD_HEADER_SIZE;
1004f89e:	68fb      	ldr	r3, [r7, #12]
1004f8a0:	685b      	ldr	r3, [r3, #4]
1004f8a2:	3304      	adds	r3, #4
1004f8a4:	001a      	movs	r2, r3
1004f8a6:	687b      	ldr	r3, [r7, #4]
1004f8a8:	601a      	str	r2, [r3, #0]
      *data_len = record_p->header.length;
1004f8aa:	697b      	ldr	r3, [r7, #20]
1004f8ac:	885a      	ldrh	r2, [r3, #2]
1004f8ae:	683b      	ldr	r3, [r7, #0]
1004f8b0:	801a      	strh	r2, [r3, #0]

      if(record_type != NULL)
1004f8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f8b4:	2b00      	cmp	r3, #0
1004f8b6:	d003      	beq.n	1004f8c0 <NextRecordNoLock+0xe2>
      {
        *record_type = record_p->header.record_id;
1004f8b8:	697b      	ldr	r3, [r7, #20]
1004f8ba:	785a      	ldrb	r2, [r3, #1]
1004f8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f8be:	701a      	strb	r2, [r3, #0]
      }

      //memcpy(data_p, (uint8_t*)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
      //*size_p = record_p->header.length;

      return NVMDB_STATUS_OK;
1004f8c0:	2300      	movs	r3, #0
1004f8c2:	e001      	b.n	1004f8c8 <NextRecordNoLock+0xea>
      continue;
1004f8c4:	46c0      	nop			@ (mov r8, r8)
    if(handle_p->first_read)
1004f8c6:	e7b3      	b.n	1004f830 <NextRecordNoLock+0x52>
    }
  }
}
1004f8c8:	0018      	movs	r0, r3
1004f8ca:	46bd      	mov	sp, r7
1004f8cc:	b006      	add	sp, #24
1004f8ce:	bd80      	pop	{r7, pc}

1004f8d0 <ReadNextRecordNoLock>:

static NVMDB_status_t ReadNextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length, uint8_t *record_type_out)
{
1004f8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004f8d2:	b08b      	sub	sp, #44	@ 0x2c
1004f8d4:	af02      	add	r7, sp, #8
1004f8d6:	60f8      	str	r0, [r7, #12]
1004f8d8:	0008      	movs	r0, r1
1004f8da:	0011      	movs	r1, r2
1004f8dc:	607b      	str	r3, [r7, #4]
1004f8de:	230b      	movs	r3, #11
1004f8e0:	18fb      	adds	r3, r7, r3
1004f8e2:	1c02      	adds	r2, r0, #0
1004f8e4:	701a      	strb	r2, [r3, #0]
1004f8e6:	2208      	movs	r2, #8
1004f8e8:	0010      	movs	r0, r2
1004f8ea:	18bb      	adds	r3, r7, r2
1004f8ec:	1c0a      	adds	r2, r1, #0
1004f8ee:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;

  uint8_t *data;
  NVMDB_RecordSizeType data_len;

  *size_p = 0;
1004f8f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004f8f2:	2200      	movs	r2, #0
1004f8f4:	801a      	strh	r2, [r3, #0]

  status = NextRecordNoLock(handle_p, record_type, &data, &data_len, current_record_length, record_type_out);
1004f8f6:	261f      	movs	r6, #31
1004f8f8:	19bc      	adds	r4, r7, r6
1004f8fa:	2216      	movs	r2, #22
1004f8fc:	18bd      	adds	r5, r7, r2
1004f8fe:	2218      	movs	r2, #24
1004f900:	18ba      	adds	r2, r7, r2
1004f902:	230b      	movs	r3, #11
1004f904:	18fb      	adds	r3, r7, r3
1004f906:	7819      	ldrb	r1, [r3, #0]
1004f908:	68fb      	ldr	r3, [r7, #12]
1004f90a:	469c      	mov	ip, r3
1004f90c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004f90e:	9301      	str	r3, [sp, #4]
1004f910:	2338      	movs	r3, #56	@ 0x38
1004f912:	181b      	adds	r3, r3, r0
1004f914:	19db      	adds	r3, r3, r7
1004f916:	881b      	ldrh	r3, [r3, #0]
1004f918:	9300      	str	r3, [sp, #0]
1004f91a:	002b      	movs	r3, r5
1004f91c:	4660      	mov	r0, ip
1004f91e:	f7ff ff5e 	bl	1004f7de <NextRecordNoLock>
1004f922:	0003      	movs	r3, r0
1004f924:	7023      	strb	r3, [r4, #0]

  if(status != NVMDB_STATUS_OK)
1004f926:	19bb      	adds	r3, r7, r6
1004f928:	781b      	ldrb	r3, [r3, #0]
1004f92a:	2b00      	cmp	r3, #0
1004f92c:	d002      	beq.n	1004f934 <ReadNextRecordNoLock+0x64>
  {
    return status;
1004f92e:	19bb      	adds	r3, r7, r6
1004f930:	781b      	ldrb	r3, [r3, #0]
1004f932:	e027      	b.n	1004f984 <ReadNextRecordNoLock+0xb4>
  }

  if(offset >= data_len)
1004f934:	2316      	movs	r3, #22
1004f936:	18fb      	adds	r3, r7, r3
1004f938:	881b      	ldrh	r3, [r3, #0]
1004f93a:	2208      	movs	r2, #8
1004f93c:	18ba      	adds	r2, r7, r2
1004f93e:	8812      	ldrh	r2, [r2, #0]
1004f940:	429a      	cmp	r2, r3
1004f942:	d301      	bcc.n	1004f948 <ReadNextRecordNoLock+0x78>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
1004f944:	2306      	movs	r3, #6
1004f946:	e01d      	b.n	1004f984 <ReadNextRecordNoLock+0xb4>
  }

  memcpy(data_p, data + offset, MIN(data_len - offset, max_size));
1004f948:	69ba      	ldr	r2, [r7, #24]
1004f94a:	2408      	movs	r4, #8
1004f94c:	193b      	adds	r3, r7, r4
1004f94e:	881b      	ldrh	r3, [r3, #0]
1004f950:	18d1      	adds	r1, r2, r3
1004f952:	2330      	movs	r3, #48	@ 0x30
1004f954:	2208      	movs	r2, #8
1004f956:	189b      	adds	r3, r3, r2
1004f958:	19db      	adds	r3, r3, r7
1004f95a:	881a      	ldrh	r2, [r3, #0]
1004f95c:	2316      	movs	r3, #22
1004f95e:	18fb      	adds	r3, r7, r3
1004f960:	881b      	ldrh	r3, [r3, #0]
1004f962:	0018      	movs	r0, r3
1004f964:	193b      	adds	r3, r7, r4
1004f966:	881b      	ldrh	r3, [r3, #0]
1004f968:	1ac3      	subs	r3, r0, r3
1004f96a:	429a      	cmp	r2, r3
1004f96c:	dd00      	ble.n	1004f970 <ReadNextRecordNoLock+0xa0>
1004f96e:	001a      	movs	r2, r3
1004f970:	687b      	ldr	r3, [r7, #4]
1004f972:	0018      	movs	r0, r3
1004f974:	f018 f8e7 	bl	10067b46 <memcpy>
  *size_p = data_len;
1004f978:	2316      	movs	r3, #22
1004f97a:	18fb      	adds	r3, r7, r3
1004f97c:	881a      	ldrh	r2, [r3, #0]
1004f97e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004f980:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1004f982:	2300      	movs	r3, #0
}
1004f984:	0018      	movs	r0, r3
1004f986:	46bd      	mov	sp, r7
1004f988:	b009      	add	sp, #36	@ 0x24
1004f98a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004f98c <write_data>:
  return TRUE;
}

/* flash_address must be word aligned. */
static void write_data(uint32_t flash_address, uint16_t data_length, const void *data)
{
1004f98c:	b590      	push	{r4, r7, lr}
1004f98e:	b089      	sub	sp, #36	@ 0x24
1004f990:	af00      	add	r7, sp, #0
1004f992:	60f8      	str	r0, [r7, #12]
1004f994:	607a      	str	r2, [r7, #4]
1004f996:	200a      	movs	r0, #10
1004f998:	183b      	adds	r3, r7, r0
1004f99a:	1c0a      	adds	r2, r1, #0
1004f99c:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  uint16_t length_word;
  uint8_t rest;
  const uint8_t *data_8 = data;
1004f99e:	687b      	ldr	r3, [r7, #4]
1004f9a0:	61bb      	str	r3, [r7, #24]

  length_word = (data_length >> 2) << 2;
1004f9a2:	0001      	movs	r1, r0
1004f9a4:	187b      	adds	r3, r7, r1
1004f9a6:	881b      	ldrh	r3, [r3, #0]
1004f9a8:	089b      	lsrs	r3, r3, #2
1004f9aa:	b29a      	uxth	r2, r3
1004f9ac:	2016      	movs	r0, #22
1004f9ae:	183b      	adds	r3, r7, r0
1004f9b0:	0092      	lsls	r2, r2, #2
1004f9b2:	801a      	strh	r2, [r3, #0]
  rest = data_length - length_word;
1004f9b4:	187b      	adds	r3, r7, r1
1004f9b6:	881b      	ldrh	r3, [r3, #0]
1004f9b8:	b2d9      	uxtb	r1, r3
1004f9ba:	183b      	adds	r3, r7, r0
1004f9bc:	881b      	ldrh	r3, [r3, #0]
1004f9be:	b2da      	uxtb	r2, r3
1004f9c0:	2315      	movs	r3, #21
1004f9c2:	18fb      	adds	r3, r7, r3
1004f9c4:	1a8a      	subs	r2, r1, r2
1004f9c6:	701a      	strb	r2, [r3, #0]

  for(int i = 0; i < length_word; i += 4)
1004f9c8:	2300      	movs	r3, #0
1004f9ca:	61fb      	str	r3, [r7, #28]
1004f9cc:	e013      	b.n	1004f9f6 <write_data+0x6a>
  {
    memcpy(&word, data_8 + i, sizeof(word));
1004f9ce:	69fb      	ldr	r3, [r7, #28]
1004f9d0:	69ba      	ldr	r2, [r7, #24]
1004f9d2:	18d1      	adds	r1, r2, r3
1004f9d4:	2310      	movs	r3, #16
1004f9d6:	18fb      	adds	r3, r7, r3
1004f9d8:	2204      	movs	r2, #4
1004f9da:	0018      	movs	r0, r3
1004f9dc:	f018 f8b3 	bl	10067b46 <memcpy>
    NVMDB_FLASH_WRITE(flash_address + i, word);
1004f9e0:	69fa      	ldr	r2, [r7, #28]
1004f9e2:	68fb      	ldr	r3, [r7, #12]
1004f9e4:	18d3      	adds	r3, r2, r3
1004f9e6:	693a      	ldr	r2, [r7, #16]
1004f9e8:	0019      	movs	r1, r3
1004f9ea:	2000      	movs	r0, #0
1004f9ec:	f7f8 f8ba 	bl	10047b64 <HAL_FLASH_Program>
  for(int i = 0; i < length_word; i += 4)
1004f9f0:	69fb      	ldr	r3, [r7, #28]
1004f9f2:	3304      	adds	r3, #4
1004f9f4:	61fb      	str	r3, [r7, #28]
1004f9f6:	2416      	movs	r4, #22
1004f9f8:	193b      	adds	r3, r7, r4
1004f9fa:	881b      	ldrh	r3, [r3, #0]
1004f9fc:	69fa      	ldr	r2, [r7, #28]
1004f9fe:	429a      	cmp	r2, r3
1004fa00:	dbe5      	blt.n	1004f9ce <write_data+0x42>
  }
  word = 0xFFFFFFFF;
1004fa02:	2301      	movs	r3, #1
1004fa04:	425b      	negs	r3, r3
1004fa06:	613b      	str	r3, [r7, #16]
  memcpy(&word, data_8 + length_word, rest);
1004fa08:	193b      	adds	r3, r7, r4
1004fa0a:	881b      	ldrh	r3, [r3, #0]
1004fa0c:	69ba      	ldr	r2, [r7, #24]
1004fa0e:	18d1      	adds	r1, r2, r3
1004fa10:	2315      	movs	r3, #21
1004fa12:	18fb      	adds	r3, r7, r3
1004fa14:	781a      	ldrb	r2, [r3, #0]
1004fa16:	2310      	movs	r3, #16
1004fa18:	18fb      	adds	r3, r7, r3
1004fa1a:	0018      	movs	r0, r3
1004fa1c:	f018 f893 	bl	10067b46 <memcpy>
  NVMDB_FLASH_WRITE(flash_address + length_word, word);
1004fa20:	193b      	adds	r3, r7, r4
1004fa22:	881a      	ldrh	r2, [r3, #0]
1004fa24:	68fb      	ldr	r3, [r7, #12]
1004fa26:	18d3      	adds	r3, r2, r3
1004fa28:	693a      	ldr	r2, [r7, #16]
1004fa2a:	0019      	movs	r1, r3
1004fa2c:	2000      	movs	r0, #0
1004fa2e:	f7f8 f899 	bl	10047b64 <HAL_FLASH_Program>
}
1004fa32:	46c0      	nop			@ (mov r8, r8)
1004fa34:	46bd      	mov	sp, r7
1004fa36:	b009      	add	sp, #36	@ 0x24
1004fa38:	bd90      	pop	{r4, r7, pc}

1004fa3a <WriteRecord>:

static NVMDB_status_t WriteRecord(uint32_t flash_address, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
1004fa3a:	b5f0      	push	{r4, r5, r6, r7, lr}
1004fa3c:	b087      	sub	sp, #28
1004fa3e:	af00      	add	r7, sp, #0
1004fa40:	60f8      	str	r0, [r7, #12]
1004fa42:	0008      	movs	r0, r1
1004fa44:	0011      	movs	r1, r2
1004fa46:	607b      	str	r3, [r7, #4]
1004fa48:	250b      	movs	r5, #11
1004fa4a:	197b      	adds	r3, r7, r5
1004fa4c:	1c02      	adds	r2, r0, #0
1004fa4e:	701a      	strb	r2, [r3, #0]
1004fa50:	2408      	movs	r4, #8
1004fa52:	193b      	adds	r3, r7, r4
1004fa54:	1c0a      	adds	r2, r1, #0
1004fa56:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  NVMDB_RecordHeaderType *header_p = (NVMDB_RecordHeaderType *)&word;
1004fa58:	2310      	movs	r3, #16
1004fa5a:	18fb      	adds	r3, r7, r3
1004fa5c:	617b      	str	r3, [r7, #20]
#if NVM_CACHE
  int32_t needed_time;
#endif

  data1_length = ROUND4_R(data1_length); // Make sure data1_length is multiple of 4.
1004fa5e:	193b      	adds	r3, r7, r4
1004fa60:	881b      	ldrh	r3, [r3, #0]
1004fa62:	3b01      	subs	r3, #1
1004fa64:	b29b      	uxth	r3, r3
1004fa66:	b21b      	sxth	r3, r3
1004fa68:	2203      	movs	r2, #3
1004fa6a:	4313      	orrs	r3, r2
1004fa6c:	b21b      	sxth	r3, r3
1004fa6e:	b29a      	uxth	r2, r3
1004fa70:	193b      	adds	r3, r7, r4
1004fa72:	3201      	adds	r2, #1
1004fa74:	801a      	strh	r2, [r3, #0]

  header_p->valid_flag = VALID_RECORD;
1004fa76:	697b      	ldr	r3, [r7, #20]
1004fa78:	22fe      	movs	r2, #254	@ 0xfe
1004fa7a:	701a      	strb	r2, [r3, #0]
  header_p->record_id = record_id;
1004fa7c:	697b      	ldr	r3, [r7, #20]
1004fa7e:	197a      	adds	r2, r7, r5
1004fa80:	7812      	ldrb	r2, [r2, #0]
1004fa82:	705a      	strb	r2, [r3, #1]
  header_p->length = data1_length + data2_length;
1004fa84:	193a      	adds	r2, r7, r4
1004fa86:	2520      	movs	r5, #32
1004fa88:	2608      	movs	r6, #8
1004fa8a:	19ab      	adds	r3, r5, r6
1004fa8c:	2108      	movs	r1, #8
1004fa8e:	468c      	mov	ip, r1
1004fa90:	44bc      	add	ip, r7
1004fa92:	4463      	add	r3, ip
1004fa94:	8812      	ldrh	r2, [r2, #0]
1004fa96:	881b      	ldrh	r3, [r3, #0]
1004fa98:	18d3      	adds	r3, r2, r3
1004fa9a:	b29a      	uxth	r2, r3
1004fa9c:	697b      	ldr	r3, [r7, #20]
1004fa9e:	805a      	strh	r2, [r3, #2]
  }
#endif

  DEBUG_GPIO_HIGH();

  NVMDB_FLASH_WRITE(flash_address, word);
1004faa0:	693a      	ldr	r2, [r7, #16]
1004faa2:	68fb      	ldr	r3, [r7, #12]
1004faa4:	0019      	movs	r1, r3
1004faa6:	2000      	movs	r0, #0
1004faa8:	f7f8 f85c 	bl	10047b64 <HAL_FLASH_Program>

  write_data(flash_address + 4, data1_length, data1);
1004faac:	68fb      	ldr	r3, [r7, #12]
1004faae:	1d18      	adds	r0, r3, #4
1004fab0:	687a      	ldr	r2, [r7, #4]
1004fab2:	193b      	adds	r3, r7, r4
1004fab4:	881b      	ldrh	r3, [r3, #0]
1004fab6:	0019      	movs	r1, r3
1004fab8:	f7ff ff68 	bl	1004f98c <write_data>
  write_data(flash_address + 4 + data1_length, data2_length, data2);
1004fabc:	193b      	adds	r3, r7, r4
1004fabe:	881a      	ldrh	r2, [r3, #0]
1004fac0:	68fb      	ldr	r3, [r7, #12]
1004fac2:	18d3      	adds	r3, r2, r3
1004fac4:	1d18      	adds	r0, r3, #4
1004fac6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1004fac8:	19ab      	adds	r3, r5, r6
1004faca:	2108      	movs	r1, #8
1004facc:	468c      	mov	ip, r1
1004face:	44bc      	add	ip, r7
1004fad0:	4463      	add	r3, ip
1004fad2:	881b      	ldrh	r3, [r3, #0]
1004fad4:	0019      	movs	r1, r3
1004fad6:	f7ff ff59 	bl	1004f98c <write_data>
  DEBUG_GPIO_LOW();
#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
1004fada:	2300      	movs	r3, #0
}
1004fadc:	0018      	movs	r0, r3
1004fade:	46bd      	mov	sp, r7
1004fae0:	b007      	add	sp, #28
1004fae2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004fae4 <NVMDB_CompareCurrentRecord>:

int NVMDB_CompareCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, const uint8_t *data_p, NVMDB_RecordSizeType size)
{
1004fae4:	b580      	push	{r7, lr}
1004fae6:	b086      	sub	sp, #24
1004fae8:	af00      	add	r7, sp, #0
1004faea:	60f8      	str	r0, [r7, #12]
1004faec:	0008      	movs	r0, r1
1004faee:	607a      	str	r2, [r7, #4]
1004faf0:	0019      	movs	r1, r3
1004faf2:	230a      	movs	r3, #10
1004faf4:	18fb      	adds	r3, r7, r3
1004faf6:	1c02      	adds	r2, r0, #0
1004faf8:	801a      	strh	r2, [r3, #0]
1004fafa:	2308      	movs	r3, #8
1004fafc:	18fb      	adds	r3, r7, r3
1004fafe:	1c0a      	adds	r2, r1, #0
1004fb00:	801a      	strh	r2, [r3, #0]
    }
  }

#endif

  record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004fb02:	68fb      	ldr	r3, [r7, #12]
1004fb04:	685b      	ldr	r3, [r3, #4]
1004fb06:	617b      	str	r3, [r7, #20]

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004fb08:	68fb      	ldr	r3, [r7, #12]
1004fb0a:	685a      	ldr	r2, [r3, #4]
1004fb0c:	68fb      	ldr	r3, [r7, #12]
1004fb0e:	689b      	ldr	r3, [r3, #8]
1004fb10:	429a      	cmp	r2, r3
1004fb12:	d203      	bcs.n	1004fb1c <NVMDB_CompareCurrentRecord+0x38>
1004fb14:	697b      	ldr	r3, [r7, #20]
1004fb16:	781b      	ldrb	r3, [r3, #0]
1004fb18:	2bff      	cmp	r3, #255	@ 0xff
1004fb1a:	d101      	bne.n	1004fb20 <NVMDB_CompareCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_END_OF_DB;
1004fb1c:	2304      	movs	r3, #4
1004fb1e:	e02a      	b.n	1004fb76 <NVMDB_CompareCurrentRecord+0x92>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
1004fb20:	68fb      	ldr	r3, [r7, #12]
1004fb22:	7b1b      	ldrb	r3, [r3, #12]
1004fb24:	2b00      	cmp	r3, #0
1004fb26:	d103      	bne.n	1004fb30 <NVMDB_CompareCurrentRecord+0x4c>
1004fb28:	697b      	ldr	r3, [r7, #20]
1004fb2a:	781b      	ldrb	r3, [r3, #0]
1004fb2c:	2bfe      	cmp	r3, #254	@ 0xfe
1004fb2e:	d001      	beq.n	1004fb34 <NVMDB_CompareCurrentRecord+0x50>
  {
    return NVMDB_STATUS_INVALID_RECORD;
1004fb30:	2305      	movs	r3, #5
1004fb32:	e020      	b.n	1004fb76 <NVMDB_CompareCurrentRecord+0x92>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
1004fb34:	697b      	ldr	r3, [r7, #20]
1004fb36:	885b      	ldrh	r3, [r3, #2]
1004fb38:	220a      	movs	r2, #10
1004fb3a:	18ba      	adds	r2, r7, r2
1004fb3c:	8812      	ldrh	r2, [r2, #0]
1004fb3e:	429a      	cmp	r2, r3
1004fb40:	d301      	bcc.n	1004fb46 <NVMDB_CompareCurrentRecord+0x62>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
1004fb42:	2306      	movs	r3, #6
1004fb44:	e017      	b.n	1004fb76 <NVMDB_CompareCurrentRecord+0x92>
  }

  handle_p->first_read = FALSE;
1004fb46:	68fb      	ldr	r3, [r7, #12]
1004fb48:	2200      	movs	r2, #0
1004fb4a:	731a      	strb	r2, [r3, #12]

  if(memcmp(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, size) == 0)
1004fb4c:	230a      	movs	r3, #10
1004fb4e:	18fb      	adds	r3, r7, r3
1004fb50:	881a      	ldrh	r2, [r3, #0]
1004fb52:	68fb      	ldr	r3, [r7, #12]
1004fb54:	685b      	ldr	r3, [r3, #4]
1004fb56:	18d3      	adds	r3, r2, r3
1004fb58:	3304      	adds	r3, #4
1004fb5a:	0019      	movs	r1, r3
1004fb5c:	2308      	movs	r3, #8
1004fb5e:	18fb      	adds	r3, r7, r3
1004fb60:	881a      	ldrh	r2, [r3, #0]
1004fb62:	687b      	ldr	r3, [r7, #4]
1004fb64:	0018      	movs	r0, r3
1004fb66:	f017 ff6b 	bl	10067a40 <memcmp>
1004fb6a:	1e03      	subs	r3, r0, #0
1004fb6c:	d101      	bne.n	1004fb72 <NVMDB_CompareCurrentRecord+0x8e>
  {
    return NVMDB_STATUS_OK;
1004fb6e:	2300      	movs	r3, #0
1004fb70:	e001      	b.n	1004fb76 <NVMDB_CompareCurrentRecord+0x92>
  }
  else
  {
    return -1;
1004fb72:	2301      	movs	r3, #1
1004fb74:	425b      	negs	r3, r3
  }
}
1004fb76:	0018      	movs	r0, r3
1004fb78:	46bd      	mov	sp, r7
1004fb7a:	b006      	add	sp, #24
1004fb7c:	bd80      	pop	{r7, pc}

1004fb7e <ReadCurrentRecordNoLock>:

static NVMDB_status_t ReadCurrentRecordNoLock(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length)
{
1004fb7e:	b590      	push	{r4, r7, lr}
1004fb80:	b087      	sub	sp, #28
1004fb82:	af00      	add	r7, sp, #0
1004fb84:	60f8      	str	r0, [r7, #12]
1004fb86:	0008      	movs	r0, r1
1004fb88:	607a      	str	r2, [r7, #4]
1004fb8a:	0019      	movs	r1, r3
1004fb8c:	230a      	movs	r3, #10
1004fb8e:	18fb      	adds	r3, r7, r3
1004fb90:	1c02      	adds	r2, r0, #0
1004fb92:	801a      	strh	r2, [r3, #0]
1004fb94:	2308      	movs	r3, #8
1004fb96:	0018      	movs	r0, r3
1004fb98:	18fb      	adds	r3, r7, r3
1004fb9a:	1c0a      	adds	r2, r1, #0
1004fb9c:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordHeaderType header;
  NVMDB_RecordType_ptr record_p;

  *size_p = 0;
1004fb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004fba0:	2200      	movs	r2, #0
1004fba2:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(current_record_length)
1004fba4:	2224      	movs	r2, #36	@ 0x24
1004fba6:	1813      	adds	r3, r2, r0
1004fba8:	19db      	adds	r3, r3, r7
1004fbaa:	881b      	ldrh	r3, [r3, #0]
1004fbac:	2b00      	cmp	r3, #0
1004fbae:	d00b      	beq.n	1004fbc8 <ReadCurrentRecordNoLock+0x4a>
  {
    header.length = current_record_length;
1004fbb0:	2110      	movs	r1, #16
1004fbb2:	187b      	adds	r3, r7, r1
1004fbb4:	1812      	adds	r2, r2, r0
1004fbb6:	19d2      	adds	r2, r2, r7
1004fbb8:	8812      	ldrh	r2, [r2, #0]
1004fbba:	805a      	strh	r2, [r3, #2]
    header.valid_flag = VALID_RECORD;
1004fbbc:	187b      	adds	r3, r7, r1
1004fbbe:	22fe      	movs	r2, #254	@ 0xfe
1004fbc0:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
1004fbc2:	187b      	adds	r3, r7, r1
1004fbc4:	617b      	str	r3, [r7, #20]
1004fbc6:	e002      	b.n	1004fbce <ReadCurrentRecordNoLock+0x50>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004fbc8:	68fb      	ldr	r3, [r7, #12]
1004fbca:	685b      	ldr	r3, [r3, #4]
1004fbcc:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004fbce:	68fb      	ldr	r3, [r7, #12]
1004fbd0:	685a      	ldr	r2, [r3, #4]
1004fbd2:	68fb      	ldr	r3, [r7, #12]
1004fbd4:	689b      	ldr	r3, [r3, #8]
1004fbd6:	429a      	cmp	r2, r3
1004fbd8:	d203      	bcs.n	1004fbe2 <ReadCurrentRecordNoLock+0x64>
1004fbda:	697b      	ldr	r3, [r7, #20]
1004fbdc:	781b      	ldrb	r3, [r3, #0]
1004fbde:	2bff      	cmp	r3, #255	@ 0xff
1004fbe0:	d101      	bne.n	1004fbe6 <ReadCurrentRecordNoLock+0x68>
  {
    return NVMDB_STATUS_END_OF_DB;
1004fbe2:	2304      	movs	r3, #4
1004fbe4:	e033      	b.n	1004fc4e <ReadCurrentRecordNoLock+0xd0>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
1004fbe6:	68fb      	ldr	r3, [r7, #12]
1004fbe8:	7b1b      	ldrb	r3, [r3, #12]
1004fbea:	2b00      	cmp	r3, #0
1004fbec:	d103      	bne.n	1004fbf6 <ReadCurrentRecordNoLock+0x78>
1004fbee:	697b      	ldr	r3, [r7, #20]
1004fbf0:	781b      	ldrb	r3, [r3, #0]
1004fbf2:	2bfe      	cmp	r3, #254	@ 0xfe
1004fbf4:	d001      	beq.n	1004fbfa <ReadCurrentRecordNoLock+0x7c>
  {
    return NVMDB_STATUS_INVALID_RECORD;
1004fbf6:	2305      	movs	r3, #5
1004fbf8:	e029      	b.n	1004fc4e <ReadCurrentRecordNoLock+0xd0>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
1004fbfa:	697b      	ldr	r3, [r7, #20]
1004fbfc:	885b      	ldrh	r3, [r3, #2]
1004fbfe:	220a      	movs	r2, #10
1004fc00:	18ba      	adds	r2, r7, r2
1004fc02:	8812      	ldrh	r2, [r2, #0]
1004fc04:	429a      	cmp	r2, r3
1004fc06:	d301      	bcc.n	1004fc0c <ReadCurrentRecordNoLock+0x8e>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
1004fc08:	2306      	movs	r3, #6
1004fc0a:	e020      	b.n	1004fc4e <ReadCurrentRecordNoLock+0xd0>
  }

  handle_p->first_read = FALSE;
1004fc0c:	68fb      	ldr	r3, [r7, #12]
1004fc0e:	2200      	movs	r2, #0
1004fc10:	731a      	strb	r2, [r3, #12]

  memcpy(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
1004fc12:	240a      	movs	r4, #10
1004fc14:	193b      	adds	r3, r7, r4
1004fc16:	881a      	ldrh	r2, [r3, #0]
1004fc18:	68fb      	ldr	r3, [r7, #12]
1004fc1a:	685b      	ldr	r3, [r3, #4]
1004fc1c:	18d3      	adds	r3, r2, r3
1004fc1e:	3304      	adds	r3, #4
1004fc20:	0018      	movs	r0, r3
1004fc22:	2308      	movs	r3, #8
1004fc24:	18fb      	adds	r3, r7, r3
1004fc26:	881a      	ldrh	r2, [r3, #0]
1004fc28:	697b      	ldr	r3, [r7, #20]
1004fc2a:	885b      	ldrh	r3, [r3, #2]
1004fc2c:	0019      	movs	r1, r3
1004fc2e:	193b      	adds	r3, r7, r4
1004fc30:	881b      	ldrh	r3, [r3, #0]
1004fc32:	1acb      	subs	r3, r1, r3
1004fc34:	429a      	cmp	r2, r3
1004fc36:	dd00      	ble.n	1004fc3a <ReadCurrentRecordNoLock+0xbc>
1004fc38:	001a      	movs	r2, r3
1004fc3a:	687b      	ldr	r3, [r7, #4]
1004fc3c:	0001      	movs	r1, r0
1004fc3e:	0018      	movs	r0, r3
1004fc40:	f017 ff81 	bl	10067b46 <memcpy>
  *size_p = record_p->header.length;
1004fc44:	697b      	ldr	r3, [r7, #20]
1004fc46:	885a      	ldrh	r2, [r3, #2]
1004fc48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004fc4a:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1004fc4c:	2300      	movs	r3, #0
}
1004fc4e:	0018      	movs	r0, r3
1004fc50:	46bd      	mov	sp, r7
1004fc52:	b007      	add	sp, #28
1004fc54:	bd90      	pop	{r4, r7, pc}
	...

1004fc58 <InvalidateRecord>:

static NVMDB_status_t InvalidateRecord(uint32_t address)
{
1004fc58:	b580      	push	{r7, lr}
1004fc5a:	b084      	sub	sp, #16
1004fc5c:	af00      	add	r7, sp, #0
1004fc5e:	6078      	str	r0, [r7, #4]
  uint32_t word = 0xFFFFFF00;
1004fc60:	4b06      	ldr	r3, [pc, #24]	@ (1004fc7c <InvalidateRecord+0x24>)
1004fc62:	60fb      	str	r3, [r7, #12]
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif
  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_WRITE(address, word);
1004fc64:	68fa      	ldr	r2, [r7, #12]
1004fc66:	687b      	ldr	r3, [r7, #4]
1004fc68:	0019      	movs	r1, r3
1004fc6a:	2000      	movs	r0, #0
1004fc6c:	f7f7 ff7a 	bl	10047b64 <HAL_FLASH_Program>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
1004fc70:	2300      	movs	r3, #0
}
1004fc72:	0018      	movs	r0, r3
1004fc74:	46bd      	mov	sp, r7
1004fc76:	b004      	add	sp, #16
1004fc78:	bd80      	pop	{r7, pc}
1004fc7a:	46c0      	nop			@ (mov r8, r8)
1004fc7c:	ffffff00 	.word	0xffffff00

1004fc80 <NVMDB_DeleteRecordNoCache>:

static NVMDB_status_t NVMDB_DeleteRecordNoCache(const NVMDB_HandleType *handle_p)
{
1004fc80:	b5b0      	push	{r4, r5, r7, lr}
1004fc82:	b084      	sub	sp, #16
1004fc84:	af00      	add	r7, sp, #0
1004fc86:	6078      	str	r0, [r7, #4]
  NVMDB_RecordType *record_p;
  NVMDB_status_t status;

  record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004fc88:	687b      	ldr	r3, [r7, #4]
1004fc8a:	685b      	ldr	r3, [r3, #4]
1004fc8c:	60fb      	str	r3, [r7, #12]

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004fc8e:	687b      	ldr	r3, [r7, #4]
1004fc90:	685a      	ldr	r2, [r3, #4]
1004fc92:	687b      	ldr	r3, [r7, #4]
1004fc94:	689b      	ldr	r3, [r3, #8]
1004fc96:	429a      	cmp	r2, r3
1004fc98:	d203      	bcs.n	1004fca2 <NVMDB_DeleteRecordNoCache+0x22>
1004fc9a:	68fb      	ldr	r3, [r7, #12]
1004fc9c:	781b      	ldrb	r3, [r3, #0]
1004fc9e:	2bff      	cmp	r3, #255	@ 0xff
1004fca0:	d101      	bne.n	1004fca6 <NVMDB_DeleteRecordNoCache+0x26>
  {
    return NVMDB_STATUS_END_OF_DB;
1004fca2:	2304      	movs	r3, #4
1004fca4:	e041      	b.n	1004fd2a <NVMDB_DeleteRecordNoCache+0xaa>
  }
  if(record_p->header.valid_flag == VALID_RECORD)
1004fca6:	68fb      	ldr	r3, [r7, #12]
1004fca8:	781b      	ldrb	r3, [r3, #0]
1004fcaa:	2bfe      	cmp	r3, #254	@ 0xfe
1004fcac:	d13c      	bne.n	1004fd28 <NVMDB_DeleteRecordNoCache+0xa8>
  {

    status = InvalidateRecord((uint32_t)record_p);
1004fcae:	68fb      	ldr	r3, [r7, #12]
1004fcb0:	250b      	movs	r5, #11
1004fcb2:	197c      	adds	r4, r7, r5
1004fcb4:	0018      	movs	r0, r3
1004fcb6:	f7ff ffcf 	bl	1004fc58 <InvalidateRecord>
1004fcba:	0003      	movs	r3, r0
1004fcbc:	7023      	strb	r3, [r4, #0]
    if(status)
1004fcbe:	197b      	adds	r3, r7, r5
1004fcc0:	781b      	ldrb	r3, [r3, #0]
1004fcc2:	2b00      	cmp	r3, #0
1004fcc4:	d002      	beq.n	1004fccc <NVMDB_DeleteRecordNoCache+0x4c>
    {
      return status;
1004fcc6:	197b      	adds	r3, r7, r5
1004fcc8:	781b      	ldrb	r3, [r3, #0]
1004fcca:	e02e      	b.n	1004fd2a <NVMDB_DeleteRecordNoCache+0xaa>
    }

    DBInfo[handle_p->id].valid_records--;
1004fccc:	687b      	ldr	r3, [r7, #4]
1004fcce:	781b      	ldrb	r3, [r3, #0]
1004fcd0:	001a      	movs	r2, r3
1004fcd2:	4918      	ldr	r1, [pc, #96]	@ (1004fd34 <NVMDB_DeleteRecordNoCache+0xb4>)
1004fcd4:	0013      	movs	r3, r2
1004fcd6:	009b      	lsls	r3, r3, #2
1004fcd8:	189b      	adds	r3, r3, r2
1004fcda:	009b      	lsls	r3, r3, #2
1004fcdc:	18cb      	adds	r3, r1, r3
1004fcde:	3308      	adds	r3, #8
1004fce0:	881b      	ldrh	r3, [r3, #0]
1004fce2:	3b01      	subs	r3, #1
1004fce4:	b298      	uxth	r0, r3
1004fce6:	4913      	ldr	r1, [pc, #76]	@ (1004fd34 <NVMDB_DeleteRecordNoCache+0xb4>)
1004fce8:	0013      	movs	r3, r2
1004fcea:	009b      	lsls	r3, r3, #2
1004fcec:	189b      	adds	r3, r3, r2
1004fcee:	009b      	lsls	r3, r3, #2
1004fcf0:	18cb      	adds	r3, r1, r3
1004fcf2:	3308      	adds	r3, #8
1004fcf4:	1c02      	adds	r2, r0, #0
1004fcf6:	801a      	strh	r2, [r3, #0]
    DBInfo[handle_p->id].invalid_records++;
1004fcf8:	687b      	ldr	r3, [r7, #4]
1004fcfa:	781b      	ldrb	r3, [r3, #0]
1004fcfc:	001a      	movs	r2, r3
1004fcfe:	490d      	ldr	r1, [pc, #52]	@ (1004fd34 <NVMDB_DeleteRecordNoCache+0xb4>)
1004fd00:	0013      	movs	r3, r2
1004fd02:	009b      	lsls	r3, r3, #2
1004fd04:	189b      	adds	r3, r3, r2
1004fd06:	009b      	lsls	r3, r3, #2
1004fd08:	18cb      	adds	r3, r1, r3
1004fd0a:	330a      	adds	r3, #10
1004fd0c:	881b      	ldrh	r3, [r3, #0]
1004fd0e:	3301      	adds	r3, #1
1004fd10:	b298      	uxth	r0, r3
1004fd12:	4908      	ldr	r1, [pc, #32]	@ (1004fd34 <NVMDB_DeleteRecordNoCache+0xb4>)
1004fd14:	0013      	movs	r3, r2
1004fd16:	009b      	lsls	r3, r3, #2
1004fd18:	189b      	adds	r3, r3, r2
1004fd1a:	009b      	lsls	r3, r3, #2
1004fd1c:	18cb      	adds	r3, r1, r3
1004fd1e:	330a      	adds	r3, #10
1004fd20:	1c02      	adds	r2, r0, #0
1004fd22:	801a      	strh	r2, [r3, #0]

    return NVMDB_STATUS_OK;
1004fd24:	2300      	movs	r3, #0
1004fd26:	e000      	b.n	1004fd2a <NVMDB_DeleteRecordNoCache+0xaa>
  }
  else
  {
    return NVMDB_STATUS_INVALID_RECORD;
1004fd28:	2305      	movs	r3, #5
  }
}
1004fd2a:	0018      	movs	r0, r3
1004fd2c:	46bd      	mov	sp, r7
1004fd2e:	b004      	add	sp, #16
1004fd30:	bdb0      	pop	{r4, r5, r7, pc}
1004fd32:	46c0      	nop			@ (mov r8, r8)
1004fd34:	200022b4 	.word	0x200022b4

1004fd38 <ErasePage>:

static void ErasePage(uint32_t address, uint8_t num_pages)
{
1004fd38:	b580      	push	{r7, lr}
1004fd3a:	b088      	sub	sp, #32
1004fd3c:	af00      	add	r7, sp, #0
1004fd3e:	6078      	str	r0, [r7, #4]
1004fd40:	000a      	movs	r2, r1
1004fd42:	1cfb      	adds	r3, r7, #3
1004fd44:	701a      	strb	r2, [r3, #0]
  int page_num = (address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
1004fd46:	687b      	ldr	r3, [r7, #4]
1004fd48:	4a0d      	ldr	r2, [pc, #52]	@ (1004fd80 <ErasePage+0x48>)
1004fd4a:	4694      	mov	ip, r2
1004fd4c:	4463      	add	r3, ip
1004fd4e:	0adb      	lsrs	r3, r3, #11
1004fd50:	61fb      	str	r3, [r7, #28]

  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_ERASE_PAGE(page_num, num_pages);
1004fd52:	2110      	movs	r1, #16
1004fd54:	187b      	adds	r3, r7, r1
1004fd56:	2200      	movs	r2, #0
1004fd58:	601a      	str	r2, [r3, #0]
1004fd5a:	69fa      	ldr	r2, [r7, #28]
1004fd5c:	187b      	adds	r3, r7, r1
1004fd5e:	605a      	str	r2, [r3, #4]
1004fd60:	1cfb      	adds	r3, r7, #3
1004fd62:	781a      	ldrb	r2, [r3, #0]
1004fd64:	187b      	adds	r3, r7, r1
1004fd66:	609a      	str	r2, [r3, #8]
1004fd68:	230c      	movs	r3, #12
1004fd6a:	18fa      	adds	r2, r7, r3
1004fd6c:	187b      	adds	r3, r7, r1
1004fd6e:	0011      	movs	r1, r2
1004fd70:	0018      	movs	r0, r3
1004fd72:	f7f7 ffd1 	bl	10047d18 <HAL_FLASHEx_Erase>
  DEBUG_GPIO_LOW();
}
1004fd76:	46c0      	nop			@ (mov r8, r8)
1004fd78:	46bd      	mov	sp, r7
1004fd7a:	b008      	add	sp, #32
1004fd7c:	bd80      	pop	{r7, pc}
1004fd7e:	46c0      	nop			@ (mov r8, r8)
1004fd80:	effc0000 	.word	0xeffc0000

1004fd84 <WriteBufferToFlash>:

/* Size of data must be multiple of 4. This function also erases the page if needed. */
static void WriteBufferToFlash(uint32_t address, uint32_t *data, uint32_t size)
{
1004fd84:	b580      	push	{r7, lr}
1004fd86:	b086      	sub	sp, #24
1004fd88:	af00      	add	r7, sp, #0
1004fd8a:	60f8      	str	r0, [r7, #12]
1004fd8c:	60b9      	str	r1, [r7, #8]
1004fd8e:	607a      	str	r2, [r7, #4]
  /* Check if we are writing the same data in entire pages.
     If size is less than a page size, we need to erase the page to clean it. */
  if((size % PAGE_SIZE) == 0 && memcmp((uint8_t *)address, data, size) == 0)
1004fd90:	687b      	ldr	r3, [r7, #4]
1004fd92:	055b      	lsls	r3, r3, #21
1004fd94:	0d5b      	lsrs	r3, r3, #21
1004fd96:	d107      	bne.n	1004fda8 <WriteBufferToFlash+0x24>
1004fd98:	68fb      	ldr	r3, [r7, #12]
1004fd9a:	687a      	ldr	r2, [r7, #4]
1004fd9c:	68b9      	ldr	r1, [r7, #8]
1004fd9e:	0018      	movs	r0, r3
1004fda0:	f017 fe4e 	bl	10067a40 <memcmp>
1004fda4:	1e03      	subs	r3, r0, #0
1004fda6:	d026      	beq.n	1004fdf6 <WriteBufferToFlash+0x72>
  {
    return;
  }

  ErasePage(address, ROUNDPAGE_R(size) / PAGE_SIZE);
1004fda8:	687b      	ldr	r3, [r7, #4]
1004fdaa:	3b01      	subs	r3, #1
1004fdac:	4a14      	ldr	r2, [pc, #80]	@ (1004fe00 <WriteBufferToFlash+0x7c>)
1004fdae:	4313      	orrs	r3, r2
1004fdb0:	3301      	adds	r3, #1
1004fdb2:	0adb      	lsrs	r3, r3, #11
1004fdb4:	b2da      	uxtb	r2, r3
1004fdb6:	68fb      	ldr	r3, [r7, #12]
1004fdb8:	0011      	movs	r1, r2
1004fdba:	0018      	movs	r0, r3
1004fdbc:	f7ff ffbc 	bl	1004fd38 <ErasePage>

  DEBUG_GPIO_HIGH();
  for(int i = 0; i < size; i += 4)
1004fdc0:	2300      	movs	r3, #0
1004fdc2:	617b      	str	r3, [r7, #20]
1004fdc4:	e012      	b.n	1004fdec <WriteBufferToFlash+0x68>
  {
    NVMDB_FLASH_WRITE(address + i, data[i / 4]);
1004fdc6:	697a      	ldr	r2, [r7, #20]
1004fdc8:	68fb      	ldr	r3, [r7, #12]
1004fdca:	18d1      	adds	r1, r2, r3
1004fdcc:	697b      	ldr	r3, [r7, #20]
1004fdce:	2b00      	cmp	r3, #0
1004fdd0:	da00      	bge.n	1004fdd4 <WriteBufferToFlash+0x50>
1004fdd2:	3303      	adds	r3, #3
1004fdd4:	109b      	asrs	r3, r3, #2
1004fdd6:	009b      	lsls	r3, r3, #2
1004fdd8:	68ba      	ldr	r2, [r7, #8]
1004fdda:	18d3      	adds	r3, r2, r3
1004fddc:	681b      	ldr	r3, [r3, #0]
1004fdde:	001a      	movs	r2, r3
1004fde0:	2000      	movs	r0, #0
1004fde2:	f7f7 febf 	bl	10047b64 <HAL_FLASH_Program>
  for(int i = 0; i < size; i += 4)
1004fde6:	697b      	ldr	r3, [r7, #20]
1004fde8:	3304      	adds	r3, #4
1004fdea:	617b      	str	r3, [r7, #20]
1004fdec:	697b      	ldr	r3, [r7, #20]
1004fdee:	687a      	ldr	r2, [r7, #4]
1004fdf0:	429a      	cmp	r2, r3
1004fdf2:	d8e8      	bhi.n	1004fdc6 <WriteBufferToFlash+0x42>
1004fdf4:	e000      	b.n	1004fdf8 <WriteBufferToFlash+0x74>
    return;
1004fdf6:	46c0      	nop			@ (mov r8, r8)
  }
  DEBUG_GPIO_LOW();
}
1004fdf8:	46bd      	mov	sp, r7
1004fdfa:	b006      	add	sp, #24
1004fdfc:	bd80      	pop	{r7, pc}
1004fdfe:	46c0      	nop			@ (mov r8, r8)
1004fe00:	000007ff 	.word	0x000007ff

1004fe04 <InitReadState>:

static void InitReadState(ReadStateType *state_p)
{
1004fe04:	b580      	push	{r7, lr}
1004fe06:	b082      	sub	sp, #8
1004fe08:	af00      	add	r7, sp, #0
1004fe0a:	6078      	str	r0, [r7, #4]
  state_p->move_to_next_record = TRUE;
1004fe0c:	687b      	ldr	r3, [r7, #4]
1004fe0e:	2201      	movs	r2, #1
1004fe10:	701a      	strb	r2, [r3, #0]
  state_p->record_offset = 0;
1004fe12:	687b      	ldr	r3, [r7, #4]
1004fe14:	2200      	movs	r2, #0
1004fe16:	805a      	strh	r2, [r3, #2]
  state_p->record_length = 0;
1004fe18:	687b      	ldr	r3, [r7, #4]
1004fe1a:	2200      	movs	r2, #0
1004fe1c:	809a      	strh	r2, [r3, #4]
}
1004fe1e:	46c0      	nop			@ (mov r8, r8)
1004fe20:	46bd      	mov	sp, r7
1004fe22:	b002      	add	sp, #8
1004fe24:	bd80      	pop	{r7, pc}

1004fe26 <LoadDBToRAM>:
/* Call InitReadState() to initialize read_state before passing it to the function to start loading data from the database.
   This function returns NVMDB_STATUS_OK if other calls must be done to the same function to continue reading the database.
   Pass the same read_state variable to the function if calling it again to continue reading from the same database. */

static NVMDB_status_t LoadDBToRAM(NVMDB_HandleType *handle_p, uint8_t *buff, uint16_t buff_size, uint16_t *num_read_bytes_p, ReadStateType *read_state)
{
1004fe26:	b5f0      	push	{r4, r5, r6, r7, lr}
1004fe28:	b08d      	sub	sp, #52	@ 0x34
1004fe2a:	af04      	add	r7, sp, #16
1004fe2c:	60f8      	str	r0, [r7, #12]
1004fe2e:	60b9      	str	r1, [r7, #8]
1004fe30:	603b      	str	r3, [r7, #0]
1004fe32:	1dbb      	adds	r3, r7, #6
1004fe34:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;
  uint16_t free_buffer_size;
  NVMDB_RecordSizeType record_size, remaining_record_bytes;
  NVMDB_RecordHeaderType header;
  uint16_t index = 0;
1004fe36:	231e      	movs	r3, #30
1004fe38:	18fb      	adds	r3, r7, r3
1004fe3a:	2200      	movs	r2, #0
1004fe3c:	801a      	strh	r2, [r3, #0]

  memset(buff, 0xFF, buff_size);
1004fe3e:	1dbb      	adds	r3, r7, #6
1004fe40:	881a      	ldrh	r2, [r3, #0]
1004fe42:	68bb      	ldr	r3, [r7, #8]
1004fe44:	21ff      	movs	r1, #255	@ 0xff
1004fe46:	0018      	movs	r0, r3
1004fe48:	f017 fe08 	bl	10067a5c <memset>

  header.valid_flag = VALID_RECORD;
1004fe4c:	2310      	movs	r3, #16
1004fe4e:	18fb      	adds	r3, r7, r3
1004fe50:	22fe      	movs	r2, #254	@ 0xfe
1004fe52:	701a      	strb	r2, [r3, #0]

  while(1)
  {

    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
1004fe54:	1dba      	adds	r2, r7, #6
1004fe56:	251e      	movs	r5, #30
1004fe58:	197b      	adds	r3, r7, r5
1004fe5a:	8812      	ldrh	r2, [r2, #0]
1004fe5c:	881b      	ldrh	r3, [r3, #0]
1004fe5e:	1ad3      	subs	r3, r2, r3
1004fe60:	b29a      	uxth	r2, r3
1004fe62:	231c      	movs	r3, #28
1004fe64:	18fb      	adds	r3, r7, r3
1004fe66:	3a04      	subs	r2, #4
1004fe68:	801a      	strh	r2, [r3, #0]

    // Read the record
    if(read_state->move_to_next_record)
1004fe6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004fe6c:	781b      	ldrb	r3, [r3, #0]
1004fe6e:	2b00      	cmp	r3, #0
1004fe70:	d04e      	beq.n	1004ff10 <LoadDBToRAM+0xea>
    {
      /* Passing read_state->record_length to the function because we do not want
         the function to retrieve the info from the header of the current record,
         since it may not be anymore in the same position in flash. */
      status = ReadNextRecordNoLock(handle_p, ALL_TYPES, 0, buff + index + RECORD_HEADER_SIZE, free_buffer_size, &record_size, read_state->record_length, &header.record_id);
1004fe72:	197b      	adds	r3, r7, r5
1004fe74:	881b      	ldrh	r3, [r3, #0]
1004fe76:	3304      	adds	r3, #4
1004fe78:	68ba      	ldr	r2, [r7, #8]
1004fe7a:	18d1      	adds	r1, r2, r3
1004fe7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004fe7e:	889b      	ldrh	r3, [r3, #4]
1004fe80:	261b      	movs	r6, #27
1004fe82:	19bc      	adds	r4, r7, r6
1004fe84:	68f8      	ldr	r0, [r7, #12]
1004fe86:	2210      	movs	r2, #16
1004fe88:	18ba      	adds	r2, r7, r2
1004fe8a:	3201      	adds	r2, #1
1004fe8c:	9203      	str	r2, [sp, #12]
1004fe8e:	9302      	str	r3, [sp, #8]
1004fe90:	2216      	movs	r2, #22
1004fe92:	18bb      	adds	r3, r7, r2
1004fe94:	9301      	str	r3, [sp, #4]
1004fe96:	231c      	movs	r3, #28
1004fe98:	18fb      	adds	r3, r7, r3
1004fe9a:	881b      	ldrh	r3, [r3, #0]
1004fe9c:	9300      	str	r3, [sp, #0]
1004fe9e:	000b      	movs	r3, r1
1004fea0:	2200      	movs	r2, #0
1004fea2:	21ff      	movs	r1, #255	@ 0xff
1004fea4:	f7ff fd14 	bl	1004f8d0 <ReadNextRecordNoLock>
1004fea8:	0003      	movs	r3, r0
1004feaa:	7023      	strb	r3, [r4, #0]
      read_state->record_length = record_size;
1004feac:	2216      	movs	r2, #22
1004feae:	18bb      	adds	r3, r7, r2
1004feb0:	881a      	ldrh	r2, [r3, #0]
1004feb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004feb4:	809a      	strh	r2, [r3, #4]

      if(status != NVMDB_STATUS_OK)
1004feb6:	19bb      	adds	r3, r7, r6
1004feb8:	781b      	ldrb	r3, [r3, #0]
1004feba:	2b00      	cmp	r3, #0
1004febc:	d006      	beq.n	1004fecc <LoadDBToRAM+0xa6>
      {
        *num_read_bytes_p = index;
1004febe:	683b      	ldr	r3, [r7, #0]
1004fec0:	197a      	adds	r2, r7, r5
1004fec2:	8812      	ldrh	r2, [r2, #0]
1004fec4:	801a      	strh	r2, [r3, #0]
        return status;
1004fec6:	19bb      	adds	r3, r7, r6
1004fec8:	781b      	ldrb	r3, [r3, #0]
1004feca:	e0a1      	b.n	10050010 <LoadDBToRAM+0x1ea>
      }

      // Prepare the header and copy it to buffer
      header.length = record_size;
1004fecc:	2316      	movs	r3, #22
1004fece:	18fb      	adds	r3, r7, r3
1004fed0:	881a      	ldrh	r2, [r3, #0]
1004fed2:	2110      	movs	r1, #16
1004fed4:	187b      	adds	r3, r7, r1
1004fed6:	805a      	strh	r2, [r3, #2]
      memcpy(buff + index, &header, RECORD_HEADER_SIZE);
1004fed8:	251e      	movs	r5, #30
1004feda:	197b      	adds	r3, r7, r5
1004fedc:	881b      	ldrh	r3, [r3, #0]
1004fede:	68ba      	ldr	r2, [r7, #8]
1004fee0:	18d3      	adds	r3, r2, r3
1004fee2:	000c      	movs	r4, r1
1004fee4:	1879      	adds	r1, r7, r1
1004fee6:	2204      	movs	r2, #4
1004fee8:	0018      	movs	r0, r3
1004feea:	f017 fe2c 	bl	10067b46 <memcpy>
      index += ROUND4_R(header.length + RECORD_HEADER_SIZE);
1004feee:	193b      	adds	r3, r7, r4
1004fef0:	885b      	ldrh	r3, [r3, #2]
1004fef2:	3303      	adds	r3, #3
1004fef4:	b29b      	uxth	r3, r3
1004fef6:	b21b      	sxth	r3, r3
1004fef8:	2203      	movs	r2, #3
1004fefa:	4313      	orrs	r3, r2
1004fefc:	b21b      	sxth	r3, r3
1004fefe:	b29a      	uxth	r2, r3
1004ff00:	197b      	adds	r3, r7, r5
1004ff02:	881b      	ldrh	r3, [r3, #0]
1004ff04:	18d3      	adds	r3, r2, r3
1004ff06:	b29a      	uxth	r2, r3
1004ff08:	197b      	adds	r3, r7, r5
1004ff0a:	3201      	adds	r2, #1
1004ff0c:	801a      	strh	r2, [r3, #0]
1004ff0e:	e031      	b.n	1004ff74 <LoadDBToRAM+0x14e>
    }
    else
    {

      status = ReadCurrentRecordNoLock(handle_p, read_state->record_offset, buff + index, free_buffer_size, &record_size, read_state->record_length); // It will not read record in cache because this operation is not allowed if there are any.
1004ff10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ff12:	8859      	ldrh	r1, [r3, #2]
1004ff14:	231e      	movs	r3, #30
1004ff16:	18fb      	adds	r3, r7, r3
1004ff18:	881b      	ldrh	r3, [r3, #0]
1004ff1a:	68ba      	ldr	r2, [r7, #8]
1004ff1c:	18d5      	adds	r5, r2, r3
1004ff1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ff20:	889b      	ldrh	r3, [r3, #4]
1004ff22:	261b      	movs	r6, #27
1004ff24:	19bc      	adds	r4, r7, r6
1004ff26:	221c      	movs	r2, #28
1004ff28:	18ba      	adds	r2, r7, r2
1004ff2a:	8812      	ldrh	r2, [r2, #0]
1004ff2c:	68f8      	ldr	r0, [r7, #12]
1004ff2e:	9301      	str	r3, [sp, #4]
1004ff30:	2316      	movs	r3, #22
1004ff32:	18fb      	adds	r3, r7, r3
1004ff34:	9300      	str	r3, [sp, #0]
1004ff36:	0013      	movs	r3, r2
1004ff38:	002a      	movs	r2, r5
1004ff3a:	f7ff fe20 	bl	1004fb7e <ReadCurrentRecordNoLock>
1004ff3e:	0003      	movs	r3, r0
1004ff40:	7023      	strb	r3, [r4, #0]

      if(status != NVMDB_STATUS_OK)
1004ff42:	19bb      	adds	r3, r7, r6
1004ff44:	781b      	ldrb	r3, [r3, #0]
1004ff46:	2b00      	cmp	r3, #0
1004ff48:	d002      	beq.n	1004ff50 <LoadDBToRAM+0x12a>
      {
        // This should not happen
        return status;
1004ff4a:	19bb      	adds	r3, r7, r6
1004ff4c:	781b      	ldrb	r3, [r3, #0]
1004ff4e:	e05f      	b.n	10050010 <LoadDBToRAM+0x1ea>
      }
      index = ROUND4_R(record_size - read_state->record_offset);
1004ff50:	2316      	movs	r3, #22
1004ff52:	18fb      	adds	r3, r7, r3
1004ff54:	881a      	ldrh	r2, [r3, #0]
1004ff56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ff58:	885b      	ldrh	r3, [r3, #2]
1004ff5a:	1ad3      	subs	r3, r2, r3
1004ff5c:	b29b      	uxth	r3, r3
1004ff5e:	3b01      	subs	r3, #1
1004ff60:	b29b      	uxth	r3, r3
1004ff62:	b21b      	sxth	r3, r3
1004ff64:	2203      	movs	r2, #3
1004ff66:	4313      	orrs	r3, r2
1004ff68:	b21b      	sxth	r3, r3
1004ff6a:	b29a      	uxth	r2, r3
1004ff6c:	231e      	movs	r3, #30
1004ff6e:	18fb      	adds	r3, r7, r3
1004ff70:	3201      	adds	r2, #1
1004ff72:	801a      	strh	r2, [r3, #0]
    }

    // The number of remaining bytes for the current record that were to be read before calling last NVMDB_ReadNextRecord().
    // Rounded to the next multiple of 4 to find out if buffer can now be written inside the page or not.
    remaining_record_bytes = ROUND4_R(record_size - read_state->record_offset);
1004ff74:	2316      	movs	r3, #22
1004ff76:	18fb      	adds	r3, r7, r3
1004ff78:	881a      	ldrh	r2, [r3, #0]
1004ff7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ff7c:	885b      	ldrh	r3, [r3, #2]
1004ff7e:	1ad3      	subs	r3, r2, r3
1004ff80:	b29b      	uxth	r3, r3
1004ff82:	3b01      	subs	r3, #1
1004ff84:	b29b      	uxth	r3, r3
1004ff86:	b21b      	sxth	r3, r3
1004ff88:	2203      	movs	r2, #3
1004ff8a:	4313      	orrs	r3, r2
1004ff8c:	b21b      	sxth	r3, r3
1004ff8e:	b29a      	uxth	r2, r3
1004ff90:	2118      	movs	r1, #24
1004ff92:	187b      	adds	r3, r7, r1
1004ff94:	3201      	adds	r2, #1
1004ff96:	801a      	strh	r2, [r3, #0]

    if(remaining_record_bytes > free_buffer_size)
1004ff98:	187a      	adds	r2, r7, r1
1004ff9a:	211c      	movs	r1, #28
1004ff9c:	187b      	adds	r3, r7, r1
1004ff9e:	8812      	ldrh	r2, [r2, #0]
1004ffa0:	881b      	ldrh	r3, [r3, #0]
1004ffa2:	429a      	cmp	r2, r3
1004ffa4:	d910      	bls.n	1004ffc8 <LoadDBToRAM+0x1a2>
    {
      // Not able to read the entire record.
      read_state->move_to_next_record = FALSE;
1004ffa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ffa8:	2200      	movs	r2, #0
1004ffaa:	701a      	strb	r2, [r3, #0]
      read_state->record_offset += free_buffer_size;
1004ffac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ffae:	885a      	ldrh	r2, [r3, #2]
1004ffb0:	187b      	adds	r3, r7, r1
1004ffb2:	881b      	ldrh	r3, [r3, #0]
1004ffb4:	18d3      	adds	r3, r2, r3
1004ffb6:	b29a      	uxth	r2, r3
1004ffb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ffba:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
1004ffbc:	683b      	ldr	r3, [r7, #0]
1004ffbe:	1dba      	adds	r2, r7, #6
1004ffc0:	8812      	ldrh	r2, [r2, #0]
1004ffc2:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
1004ffc4:	2300      	movs	r3, #0
1004ffc6:	e023      	b.n	10050010 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes == free_buffer_size)
1004ffc8:	2318      	movs	r3, #24
1004ffca:	18fa      	adds	r2, r7, r3
1004ffcc:	231c      	movs	r3, #28
1004ffce:	18fb      	adds	r3, r7, r3
1004ffd0:	8812      	ldrh	r2, [r2, #0]
1004ffd2:	881b      	ldrh	r3, [r3, #0]
1004ffd4:	429a      	cmp	r2, r3
1004ffd6:	d10b      	bne.n	1004fff0 <LoadDBToRAM+0x1ca>
    {
      read_state->move_to_next_record = TRUE;
1004ffd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ffda:	2201      	movs	r2, #1
1004ffdc:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
1004ffde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ffe0:	2200      	movs	r2, #0
1004ffe2:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
1004ffe4:	683b      	ldr	r3, [r7, #0]
1004ffe6:	1dba      	adds	r2, r7, #6
1004ffe8:	8812      	ldrh	r2, [r2, #0]
1004ffea:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
1004ffec:	2300      	movs	r3, #0
1004ffee:	e00f      	b.n	10050010 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes < free_buffer_size)
1004fff0:	2318      	movs	r3, #24
1004fff2:	18fa      	adds	r2, r7, r3
1004fff4:	231c      	movs	r3, #28
1004fff6:	18fb      	adds	r3, r7, r3
1004fff8:	8812      	ldrh	r2, [r2, #0]
1004fffa:	881b      	ldrh	r3, [r3, #0]
1004fffc:	429a      	cmp	r2, r3
1004fffe:	d300      	bcc.n	10050002 <LoadDBToRAM+0x1dc>
10050000:	e728      	b.n	1004fe54 <LoadDBToRAM+0x2e>
    {
      read_state->move_to_next_record = TRUE;
10050002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050004:	2201      	movs	r2, #1
10050006:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
10050008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1005000a:	2200      	movs	r2, #0
1005000c:	805a      	strh	r2, [r3, #2]
    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
1005000e:	e721      	b.n	1004fe54 <LoadDBToRAM+0x2e>
    }
  }
}
10050010:	0018      	movs	r0, r3
10050012:	46bd      	mov	sp, r7
10050014:	b009      	add	sp, #36	@ 0x24
10050016:	bdf0      	pop	{r4, r5, r6, r7, pc}

10050018 <CleanLargeDB>:
// No inline to avoid allocating NVM_buffer multiple times at the same time.
__NOINLINE static NVMDB_status_t CleanLargeDB(NVMDB_IdType NVMDB_id)
{
10050018:	b5f0      	push	{r4, r5, r6, r7, lr}
1005001a:	4c60      	ldr	r4, [pc, #384]	@ (1005019c <CleanLargeDB+0x184>)
1005001c:	44a5      	add	sp, r4
1005001e:	af02      	add	r7, sp, #8
10050020:	0002      	movs	r2, r0
10050022:	4b5f      	ldr	r3, [pc, #380]	@ (100501a0 <CleanLargeDB+0x188>)
10050024:	2184      	movs	r1, #132	@ 0x84
10050026:	0109      	lsls	r1, r1, #4
10050028:	185b      	adds	r3, r3, r1
1005002a:	19db      	adds	r3, r3, r7
1005002c:	701a      	strb	r2, [r3, #0]
  ReadStateType previous_state;
  int32_t needed_time;
  uint8_t clean_started = FALSE;
#endif

  if(!DBInfo[NVMDB_id].invalid_records)
1005002e:	4b5c      	ldr	r3, [pc, #368]	@ (100501a0 <CleanLargeDB+0x188>)
10050030:	185b      	adds	r3, r3, r1
10050032:	19db      	adds	r3, r3, r7
10050034:	781a      	ldrb	r2, [r3, #0]
10050036:	495b      	ldr	r1, [pc, #364]	@ (100501a4 <CleanLargeDB+0x18c>)
10050038:	0013      	movs	r3, r2
1005003a:	009b      	lsls	r3, r3, #2
1005003c:	189b      	adds	r3, r3, r2
1005003e:	009b      	lsls	r3, r3, #2
10050040:	18cb      	adds	r3, r1, r3
10050042:	330a      	adds	r3, #10
10050044:	881b      	ldrh	r3, [r3, #0]
10050046:	2b00      	cmp	r3, #0
10050048:	d101      	bne.n	1005004e <CleanLargeDB+0x36>
  {
    return NVMDB_STATUS_OK;
1005004a:	2300      	movs	r3, #0
1005004c:	e0a0      	b.n	10050190 <CleanLargeDB+0x178>
  {
    return NVMDB_STATUS_CACHE_FULL;
  }
#endif

  status = NVMDB_HandleInit(NVMDB_id, &handle);
1005004e:	4b56      	ldr	r3, [pc, #344]	@ (100501a8 <CleanLargeDB+0x190>)
10050050:	18fc      	adds	r4, r7, r3
10050052:	4d56      	ldr	r5, [pc, #344]	@ (100501ac <CleanLargeDB+0x194>)
10050054:	197a      	adds	r2, r7, r5
10050056:	4b52      	ldr	r3, [pc, #328]	@ (100501a0 <CleanLargeDB+0x188>)
10050058:	2184      	movs	r1, #132	@ 0x84
1005005a:	0109      	lsls	r1, r1, #4
1005005c:	185b      	adds	r3, r3, r1
1005005e:	19db      	adds	r3, r3, r7
10050060:	781b      	ldrb	r3, [r3, #0]
10050062:	0011      	movs	r1, r2
10050064:	0018      	movs	r0, r3
10050066:	f000 fcd3 	bl	10050a10 <NVMDB_HandleInit>
1005006a:	0003      	movs	r3, r0
1005006c:	7023      	strb	r3, [r4, #0]
  flash_write_address = (uint32_t)handle.address;
1005006e:	197b      	adds	r3, r7, r5
10050070:	685b      	ldr	r3, [r3, #4]
10050072:	4a4f      	ldr	r2, [pc, #316]	@ (100501b0 <CleanLargeDB+0x198>)
10050074:	18ba      	adds	r2, r7, r2
10050076:	6013      	str	r3, [r2, #0]

  InitReadState(&state);
10050078:	4b4e      	ldr	r3, [pc, #312]	@ (100501b4 <CleanLargeDB+0x19c>)
1005007a:	18fb      	adds	r3, r7, r3
1005007c:	0018      	movs	r0, r3
1005007e:	f7ff fec1 	bl	1004fe04 <InitReadState>
#if NVM_CACHE
    previous_state = state;
    previous_handle = handle;
#endif

    status = LoadDBToRAM(&handle, NVM_buffer, sizeof(NVM_buffer), &num_read_bytes, &state);
10050082:	4e49      	ldr	r6, [pc, #292]	@ (100501a8 <CleanLargeDB+0x190>)
10050084:	19bc      	adds	r4, r7, r6
10050086:	4b4c      	ldr	r3, [pc, #304]	@ (100501b8 <CleanLargeDB+0x1a0>)
10050088:	18fd      	adds	r5, r7, r3
1005008a:	2380      	movs	r3, #128	@ 0x80
1005008c:	011a      	lsls	r2, r3, #4
1005008e:	230c      	movs	r3, #12
10050090:	18f9      	adds	r1, r7, r3
10050092:	4b46      	ldr	r3, [pc, #280]	@ (100501ac <CleanLargeDB+0x194>)
10050094:	18f8      	adds	r0, r7, r3
10050096:	4b47      	ldr	r3, [pc, #284]	@ (100501b4 <CleanLargeDB+0x19c>)
10050098:	18fb      	adds	r3, r7, r3
1005009a:	9300      	str	r3, [sp, #0]
1005009c:	002b      	movs	r3, r5
1005009e:	f7ff fec2 	bl	1004fe26 <LoadDBToRAM>
100500a2:	0003      	movs	r3, r0
100500a4:	7023      	strb	r3, [r4, #0]
    if(status != NVMDB_STATUS_END_OF_DB && status != NVMDB_STATUS_OK) // No other error codes are expected. This should not happen.
100500a6:	19bb      	adds	r3, r7, r6
100500a8:	781b      	ldrb	r3, [r3, #0]
100500aa:	2b04      	cmp	r3, #4
100500ac:	d006      	beq.n	100500bc <CleanLargeDB+0xa4>
100500ae:	19bb      	adds	r3, r7, r6
100500b0:	781b      	ldrb	r3, [r3, #0]
100500b2:	2b00      	cmp	r3, #0
100500b4:	d002      	beq.n	100500bc <CleanLargeDB+0xa4>
    {
      return status;
100500b6:	19bb      	adds	r3, r7, r6
100500b8:	781b      	ldrb	r3, [r3, #0]
100500ba:	e069      	b.n	10050190 <CleanLargeDB+0x178>
    }

    if(num_read_bytes == sizeof(NVM_buffer) || status != NVMDB_STATUS_OK)
100500bc:	4b3e      	ldr	r3, [pc, #248]	@ (100501b8 <CleanLargeDB+0x1a0>)
100500be:	18fb      	adds	r3, r7, r3
100500c0:	881a      	ldrh	r2, [r3, #0]
100500c2:	2380      	movs	r3, #128	@ 0x80
100500c4:	011b      	lsls	r3, r3, #4
100500c6:	429a      	cmp	r2, r3
100500c8:	d004      	beq.n	100500d4 <CleanLargeDB+0xbc>
100500ca:	4b37      	ldr	r3, [pc, #220]	@ (100501a8 <CleanLargeDB+0x190>)
100500cc:	18fb      	adds	r3, r7, r3
100500ce:	781b      	ldrb	r3, [r3, #0]
100500d0:	2b00      	cmp	r3, #0
100500d2:	d0d6      	beq.n	10050082 <CleanLargeDB+0x6a>
    {
      if(num_read_bytes == 0)
100500d4:	4a38      	ldr	r2, [pc, #224]	@ (100501b8 <CleanLargeDB+0x1a0>)
100500d6:	18bb      	adds	r3, r7, r2
100500d8:	881b      	ldrh	r3, [r3, #0]
100500da:	2b00      	cmp	r3, #0
100500dc:	d019      	beq.n	10050112 <CleanLargeDB+0xfa>
        }
      }
#endif

      // Write buffer to flash
      WriteBufferToFlash(flash_write_address, (uint32_t *)NVM_buffer, num_read_bytes);
100500de:	18bb      	adds	r3, r7, r2
100500e0:	881b      	ldrh	r3, [r3, #0]
100500e2:	001a      	movs	r2, r3
100500e4:	230c      	movs	r3, #12
100500e6:	18f9      	adds	r1, r7, r3
100500e8:	4c31      	ldr	r4, [pc, #196]	@ (100501b0 <CleanLargeDB+0x198>)
100500ea:	193b      	adds	r3, r7, r4
100500ec:	681b      	ldr	r3, [r3, #0]
100500ee:	0018      	movs	r0, r3
100500f0:	f7ff fe48 	bl	1004fd84 <WriteBufferToFlash>
#if NVM_CACHE
      ATOMIC_SECTION_END();

      clean_started = TRUE;
#endif
      flash_write_address += sizeof(NVM_buffer);
100500f4:	0022      	movs	r2, r4
100500f6:	18bb      	adds	r3, r7, r2
100500f8:	681b      	ldr	r3, [r3, #0]
100500fa:	2180      	movs	r1, #128	@ 0x80
100500fc:	0109      	lsls	r1, r1, #4
100500fe:	468c      	mov	ip, r1
10050100:	4463      	add	r3, ip
10050102:	18ba      	adds	r2, r7, r2
10050104:	6013      	str	r3, [r2, #0]
      if(status != NVMDB_STATUS_OK)
10050106:	4b28      	ldr	r3, [pc, #160]	@ (100501a8 <CleanLargeDB+0x190>)
10050108:	18fb      	adds	r3, r7, r3
1005010a:	781b      	ldrb	r3, [r3, #0]
1005010c:	2b00      	cmp	r3, #0
1005010e:	d102      	bne.n	10050116 <CleanLargeDB+0xfe>
  {
10050110:	e7b7      	b.n	10050082 <CleanLargeDB+0x6a>
        break;
10050112:	46c0      	nop			@ (mov r8, r8)
10050114:	e000      	b.n	10050118 <CleanLargeDB+0x100>
      {
        break;
10050116:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
  // Erase remaining pages. A possible optimization could be to erase the page only if it is not already erased.
  uint8_t num_pages = (ROUNDPAGE_R(handle.end_address) - flash_write_address) / PAGE_SIZE;
10050118:	4b24      	ldr	r3, [pc, #144]	@ (100501ac <CleanLargeDB+0x194>)
1005011a:	18fb      	adds	r3, r7, r3
1005011c:	689b      	ldr	r3, [r3, #8]
1005011e:	3b01      	subs	r3, #1
10050120:	4a26      	ldr	r2, [pc, #152]	@ (100501bc <CleanLargeDB+0x1a4>)
10050122:	431a      	orrs	r2, r3
10050124:	4922      	ldr	r1, [pc, #136]	@ (100501b0 <CleanLargeDB+0x198>)
10050126:	187b      	adds	r3, r7, r1
10050128:	681b      	ldr	r3, [r3, #0]
1005012a:	1ad3      	subs	r3, r2, r3
1005012c:	3301      	adds	r3, #1
1005012e:	0ada      	lsrs	r2, r3, #11
10050130:	4823      	ldr	r0, [pc, #140]	@ (100501c0 <CleanLargeDB+0x1a8>)
10050132:	183b      	adds	r3, r7, r0
10050134:	701a      	strb	r2, [r3, #0]
  uint8_t page_num_start = (flash_write_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
10050136:	187b      	adds	r3, r7, r1
10050138:	681b      	ldr	r3, [r3, #0]
1005013a:	4a22      	ldr	r2, [pc, #136]	@ (100501c4 <CleanLargeDB+0x1ac>)
1005013c:	4694      	mov	ip, r2
1005013e:	4463      	add	r3, ip
10050140:	0ada      	lsrs	r2, r3, #11
10050142:	4c21      	ldr	r4, [pc, #132]	@ (100501c8 <CleanLargeDB+0x1b0>)
10050144:	193b      	adds	r3, r7, r4
10050146:	701a      	strb	r2, [r3, #0]
  if(EraseWithTimeCheck(&page_num_start, &num_pages) == NVMDB_STATUS_NOT_ENOUGH_TIME)
  {
    return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
  }
#else
  NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
10050148:	2181      	movs	r1, #129	@ 0x81
1005014a:	0109      	lsls	r1, r1, #4
1005014c:	187b      	adds	r3, r7, r1
1005014e:	2200      	movs	r2, #0
10050150:	601a      	str	r2, [r3, #0]
10050152:	193b      	adds	r3, r7, r4
10050154:	781a      	ldrb	r2, [r3, #0]
10050156:	187b      	adds	r3, r7, r1
10050158:	605a      	str	r2, [r3, #4]
1005015a:	183b      	adds	r3, r7, r0
1005015c:	781a      	ldrb	r2, [r3, #0]
1005015e:	187b      	adds	r3, r7, r1
10050160:	609a      	str	r2, [r3, #8]
10050162:	4b1a      	ldr	r3, [pc, #104]	@ (100501cc <CleanLargeDB+0x1b4>)
10050164:	18fa      	adds	r2, r7, r3
10050166:	187b      	adds	r3, r7, r1
10050168:	0011      	movs	r1, r2
1005016a:	0018      	movs	r0, r3
1005016c:	f7f7 fdd4 	bl	10047d18 <HAL_FLASHEx_Erase>
#endif

  // Update free space.
  return NVMDB_get_info(&DBInfo[NVMDB_id]);
10050170:	4b0b      	ldr	r3, [pc, #44]	@ (100501a0 <CleanLargeDB+0x188>)
10050172:	2284      	movs	r2, #132	@ 0x84
10050174:	0112      	lsls	r2, r2, #4
10050176:	189b      	adds	r3, r3, r2
10050178:	19db      	adds	r3, r3, r7
1005017a:	781a      	ldrb	r2, [r3, #0]
1005017c:	0013      	movs	r3, r2
1005017e:	009b      	lsls	r3, r3, #2
10050180:	189b      	adds	r3, r3, r2
10050182:	009b      	lsls	r3, r3, #2
10050184:	4a07      	ldr	r2, [pc, #28]	@ (100501a4 <CleanLargeDB+0x18c>)
10050186:	189b      	adds	r3, r3, r2
10050188:	0018      	movs	r0, r3
1005018a:	f7ff fad5 	bl	1004f738 <NVMDB_get_info>
1005018e:	0003      	movs	r3, r0
}
10050190:	0018      	movs	r0, r3
10050192:	46bd      	mov	sp, r7
10050194:	4b0e      	ldr	r3, [pc, #56]	@ (100501d0 <CleanLargeDB+0x1b8>)
10050196:	449d      	add	sp, r3
10050198:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005019a:	46c0      	nop			@ (mov r8, r8)
1005019c:	fffff7b4 	.word	0xfffff7b4
100501a0:	fffff7c7 	.word	0xfffff7c7
100501a4:	200022b4 	.word	0x200022b4
100501a8:	0000083b 	.word	0x0000083b
100501ac:	00000824 	.word	0x00000824
100501b0:	0000083c 	.word	0x0000083c
100501b4:	0000081c 	.word	0x0000081c
100501b8:	00000836 	.word	0x00000836
100501bc:	000007ff 	.word	0x000007ff
100501c0:	0000083a 	.word	0x0000083a
100501c4:	effc0000 	.word	0xeffc0000
100501c8:	00000839 	.word	0x00000839
100501cc:	0000080c 	.word	0x0000080c
100501d0:	00000844 	.word	0x00000844

100501d4 <CleanPage>:
  return NVMDB_get_info(&DBInfo[op->handle.id]);
}
#endif

__NOINLINE static NVMDB_status_t CleanPage(const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
100501d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100501d6:	4c7a      	ldr	r4, [pc, #488]	@ (100503c0 <CleanPage+0x1ec>)
100501d8:	44a5      	add	sp, r4
100501da:	af02      	add	r7, sp, #8
100501dc:	6078      	str	r0, [r7, #4]
  NVMDB_status_t status;
  NVMDB_status_t ret = NVMDB_STATUS_OK;
100501de:	4b79      	ldr	r3, [pc, #484]	@ (100503c4 <CleanPage+0x1f0>)
100501e0:	18fb      	adds	r3, r7, r3
100501e2:	2200      	movs	r2, #0
100501e4:	701a      	strb	r2, [r3, #0]
  NVMDB_HandleType handle;
  uint32_t page_offset;
  uint16_t num_bytes;
  ReadStateType state;
  int i;
  uint8_t found = FALSE;
100501e6:	4b78      	ldr	r3, [pc, #480]	@ (100503c8 <CleanPage+0x1f4>)
100501e8:	18fb      	adds	r3, r7, r3
100501ea:	2200      	movs	r2, #0
100501ec:	701a      	strb	r2, [r3, #0]
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  /* Check if there are invalids record in the page and if there are pending operations on the databases. */
  for(i = 0; i < smallDBContainer_p->num_db; i++)
100501ee:	2300      	movs	r3, #0
100501f0:	4a76      	ldr	r2, [pc, #472]	@ (100503cc <CleanPage+0x1f8>)
100501f2:	18ba      	adds	r2, r7, r2
100501f4:	6013      	str	r3, [r2, #0]
100501f6:	e023      	b.n	10050240 <CleanPage+0x6c>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
100501f8:	687b      	ldr	r3, [r7, #4]
100501fa:	6899      	ldr	r1, [r3, #8]
100501fc:	4b73      	ldr	r3, [pc, #460]	@ (100503cc <CleanPage+0x1f8>)
100501fe:	18fb      	adds	r3, r7, r3
10050200:	681a      	ldr	r2, [r3, #0]
10050202:	0013      	movs	r3, r2
10050204:	005b      	lsls	r3, r3, #1
10050206:	189b      	adds	r3, r3, r2
10050208:	009b      	lsls	r3, r3, #2
1005020a:	18ca      	adds	r2, r1, r3
1005020c:	4970      	ldr	r1, [pc, #448]	@ (100503d0 <CleanPage+0x1fc>)
1005020e:	187b      	adds	r3, r7, r1
10050210:	7812      	ldrb	r2, [r2, #0]
10050212:	701a      	strb	r2, [r3, #0]
    if(DBInfo[NVMDB_id].invalid_records)
10050214:	187b      	adds	r3, r7, r1
10050216:	781a      	ldrb	r2, [r3, #0]
10050218:	496e      	ldr	r1, [pc, #440]	@ (100503d4 <CleanPage+0x200>)
1005021a:	0013      	movs	r3, r2
1005021c:	009b      	lsls	r3, r3, #2
1005021e:	189b      	adds	r3, r3, r2
10050220:	009b      	lsls	r3, r3, #2
10050222:	18cb      	adds	r3, r1, r3
10050224:	330a      	adds	r3, #10
10050226:	881b      	ldrh	r3, [r3, #0]
10050228:	2b00      	cmp	r3, #0
1005022a:	d003      	beq.n	10050234 <CleanPage+0x60>
    {
      found = TRUE;
1005022c:	4b66      	ldr	r3, [pc, #408]	@ (100503c8 <CleanPage+0x1f4>)
1005022e:	18fb      	adds	r3, r7, r3
10050230:	2201      	movs	r2, #1
10050232:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10050234:	4a65      	ldr	r2, [pc, #404]	@ (100503cc <CleanPage+0x1f8>)
10050236:	18bb      	adds	r3, r7, r2
10050238:	681b      	ldr	r3, [r3, #0]
1005023a:	3301      	adds	r3, #1
1005023c:	18ba      	adds	r2, r7, r2
1005023e:	6013      	str	r3, [r2, #0]
10050240:	687b      	ldr	r3, [r7, #4]
10050242:	791b      	ldrb	r3, [r3, #4]
10050244:	001a      	movs	r2, r3
10050246:	4b61      	ldr	r3, [pc, #388]	@ (100503cc <CleanPage+0x1f8>)
10050248:	18fb      	adds	r3, r7, r3
1005024a:	681b      	ldr	r3, [r3, #0]
1005024c:	4293      	cmp	r3, r2
1005024e:	dbd3      	blt.n	100501f8 <CleanPage+0x24>
    {
      return NVMDB_STATUS_CACHE_OP_PENDING;
    }
#endif
  }
  if(!found)
10050250:	4b5d      	ldr	r3, [pc, #372]	@ (100503c8 <CleanPage+0x1f4>)
10050252:	18fb      	adds	r3, r7, r3
10050254:	781b      	ldrb	r3, [r3, #0]
10050256:	2b00      	cmp	r3, #0
10050258:	d101      	bne.n	1005025e <CleanPage+0x8a>
  {
    /* No invalid records found. */
    return NVMDB_STATUS_OK;
1005025a:	2300      	movs	r3, #0
1005025c:	e0ab      	b.n	100503b6 <CleanPage+0x1e2>
  }

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
1005025e:	2380      	movs	r3, #128	@ 0x80
10050260:	011a      	lsls	r2, r3, #4
10050262:	2308      	movs	r3, #8
10050264:	18fb      	adds	r3, r7, r3
10050266:	21ff      	movs	r1, #255	@ 0xff
10050268:	0018      	movs	r0, r3
1005026a:	f017 fbf7 	bl	10067a5c <memset>

  for(i = 0; i < smallDBContainer_p->num_db; i++)
1005026e:	2300      	movs	r3, #0
10050270:	4a56      	ldr	r2, [pc, #344]	@ (100503cc <CleanPage+0x1f8>)
10050272:	18ba      	adds	r2, r7, r2
10050274:	6013      	str	r3, [r2, #0]
10050276:	e051      	b.n	1005031c <CleanPage+0x148>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
10050278:	687b      	ldr	r3, [r7, #4]
1005027a:	6899      	ldr	r1, [r3, #8]
1005027c:	4853      	ldr	r0, [pc, #332]	@ (100503cc <CleanPage+0x1f8>)
1005027e:	183b      	adds	r3, r7, r0
10050280:	681a      	ldr	r2, [r3, #0]
10050282:	0013      	movs	r3, r2
10050284:	005b      	lsls	r3, r3, #1
10050286:	189b      	adds	r3, r3, r2
10050288:	009b      	lsls	r3, r3, #2
1005028a:	18ca      	adds	r2, r1, r3
1005028c:	4d50      	ldr	r5, [pc, #320]	@ (100503d0 <CleanPage+0x1fc>)
1005028e:	197b      	adds	r3, r7, r5
10050290:	7812      	ldrb	r2, [r2, #0]
10050292:	701a      	strb	r2, [r3, #0]
    page_offset = smallDBContainer_p->dbs[i].offset;
10050294:	687b      	ldr	r3, [r7, #4]
10050296:	6899      	ldr	r1, [r3, #8]
10050298:	183b      	adds	r3, r7, r0
1005029a:	681a      	ldr	r2, [r3, #0]
1005029c:	0013      	movs	r3, r2
1005029e:	005b      	lsls	r3, r3, #1
100502a0:	189b      	adds	r3, r3, r2
100502a2:	009b      	lsls	r3, r3, #2
100502a4:	18cb      	adds	r3, r1, r3
100502a6:	685b      	ldr	r3, [r3, #4]
100502a8:	2282      	movs	r2, #130	@ 0x82
100502aa:	0112      	lsls	r2, r2, #4
100502ac:	18ba      	adds	r2, r7, r2
100502ae:	6013      	str	r3, [r2, #0]

    status = NVMDB_HandleInit(NVMDB_id, &handle);
100502b0:	4e49      	ldr	r6, [pc, #292]	@ (100503d8 <CleanPage+0x204>)
100502b2:	19bc      	adds	r4, r7, r6
100502b4:	2381      	movs	r3, #129	@ 0x81
100502b6:	011b      	lsls	r3, r3, #4
100502b8:	18fa      	adds	r2, r7, r3
100502ba:	197b      	adds	r3, r7, r5
100502bc:	781b      	ldrb	r3, [r3, #0]
100502be:	0011      	movs	r1, r2
100502c0:	0018      	movs	r0, r3
100502c2:	f000 fba5 	bl	10050a10 <NVMDB_HandleInit>
100502c6:	0003      	movs	r3, r0
100502c8:	7023      	strb	r3, [r4, #0]
    if(status) // This should not happen
100502ca:	19bb      	adds	r3, r7, r6
100502cc:	781b      	ldrb	r3, [r3, #0]
100502ce:	2b00      	cmp	r3, #0
100502d0:	d001      	beq.n	100502d6 <CleanPage+0x102>
    {
      return NVMDB_STATUS_OK;
100502d2:	2300      	movs	r3, #0
100502d4:	e06f      	b.n	100503b6 <CleanPage+0x1e2>
    }

    InitReadState(&state);
100502d6:	4d41      	ldr	r5, [pc, #260]	@ (100503dc <CleanPage+0x208>)
100502d8:	197b      	adds	r3, r7, r5
100502da:	0018      	movs	r0, r3
100502dc:	f7ff fd92 	bl	1004fe04 <InitReadState>
    // It cannot happen that the database does not fill inside the buffer. So we call LoadDBToRAM() just once for each db.
    LoadDBToRAM(&handle, NVM_buffer + page_offset, sizeof(NVM_buffer) - page_offset, &num_bytes, &state);
100502e0:	2308      	movs	r3, #8
100502e2:	18fa      	adds	r2, r7, r3
100502e4:	2082      	movs	r0, #130	@ 0x82
100502e6:	0100      	lsls	r0, r0, #4
100502e8:	183b      	adds	r3, r7, r0
100502ea:	681b      	ldr	r3, [r3, #0]
100502ec:	18d1      	adds	r1, r2, r3
100502ee:	183b      	adds	r3, r7, r0
100502f0:	681b      	ldr	r3, [r3, #0]
100502f2:	b29b      	uxth	r3, r3
100502f4:	2280      	movs	r2, #128	@ 0x80
100502f6:	0112      	lsls	r2, r2, #4
100502f8:	1ad3      	subs	r3, r2, r3
100502fa:	b29a      	uxth	r2, r3
100502fc:	4b38      	ldr	r3, [pc, #224]	@ (100503e0 <CleanPage+0x20c>)
100502fe:	18fc      	adds	r4, r7, r3
10050300:	2381      	movs	r3, #129	@ 0x81
10050302:	011b      	lsls	r3, r3, #4
10050304:	18f8      	adds	r0, r7, r3
10050306:	197b      	adds	r3, r7, r5
10050308:	9300      	str	r3, [sp, #0]
1005030a:	0023      	movs	r3, r4
1005030c:	f7ff fd8b 	bl	1004fe26 <LoadDBToRAM>
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10050310:	4a2e      	ldr	r2, [pc, #184]	@ (100503cc <CleanPage+0x1f8>)
10050312:	18bb      	adds	r3, r7, r2
10050314:	681b      	ldr	r3, [r3, #0]
10050316:	3301      	adds	r3, #1
10050318:	18ba      	adds	r2, r7, r2
1005031a:	6013      	str	r3, [r2, #0]
1005031c:	687b      	ldr	r3, [r7, #4]
1005031e:	791b      	ldrb	r3, [r3, #4]
10050320:	001a      	movs	r2, r3
10050322:	4c2a      	ldr	r4, [pc, #168]	@ (100503cc <CleanPage+0x1f8>)
10050324:	193b      	adds	r3, r7, r4
10050326:	681b      	ldr	r3, [r3, #0]
10050328:	4293      	cmp	r3, r2
1005032a:	dba5      	blt.n	10050278 <CleanPage+0xa4>
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
1005032c:	687b      	ldr	r3, [r7, #4]
1005032e:	681b      	ldr	r3, [r3, #0]
10050330:	2280      	movs	r2, #128	@ 0x80
10050332:	0112      	lsls	r2, r2, #4
10050334:	2108      	movs	r1, #8
10050336:	1879      	adds	r1, r7, r1
10050338:	0018      	movs	r0, r3
1005033a:	f7ff fd23 	bl	1004fd84 <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  for(i = 0; i < smallDBContainer_p->num_db; i++)
1005033e:	2300      	movs	r3, #0
10050340:	193a      	adds	r2, r7, r4
10050342:	6013      	str	r3, [r2, #0]
10050344:	e02c      	b.n	100503a0 <CleanPage+0x1cc>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
10050346:	687b      	ldr	r3, [r7, #4]
10050348:	6899      	ldr	r1, [r3, #8]
1005034a:	4b20      	ldr	r3, [pc, #128]	@ (100503cc <CleanPage+0x1f8>)
1005034c:	18fb      	adds	r3, r7, r3
1005034e:	681a      	ldr	r2, [r3, #0]
10050350:	0013      	movs	r3, r2
10050352:	005b      	lsls	r3, r3, #1
10050354:	189b      	adds	r3, r3, r2
10050356:	009b      	lsls	r3, r3, #2
10050358:	18ca      	adds	r2, r1, r3
1005035a:	491d      	ldr	r1, [pc, #116]	@ (100503d0 <CleanPage+0x1fc>)
1005035c:	187b      	adds	r3, r7, r1
1005035e:	7812      	ldrb	r2, [r2, #0]
10050360:	701a      	strb	r2, [r3, #0]
    // Update free space.
    status = NVMDB_get_info(&DBInfo[NVMDB_id]);
10050362:	187b      	adds	r3, r7, r1
10050364:	781a      	ldrb	r2, [r3, #0]
10050366:	0013      	movs	r3, r2
10050368:	009b      	lsls	r3, r3, #2
1005036a:	189b      	adds	r3, r3, r2
1005036c:	009b      	lsls	r3, r3, #2
1005036e:	4a19      	ldr	r2, [pc, #100]	@ (100503d4 <CleanPage+0x200>)
10050370:	189b      	adds	r3, r3, r2
10050372:	4d19      	ldr	r5, [pc, #100]	@ (100503d8 <CleanPage+0x204>)
10050374:	197c      	adds	r4, r7, r5
10050376:	0018      	movs	r0, r3
10050378:	f7ff f9de 	bl	1004f738 <NVMDB_get_info>
1005037c:	0003      	movs	r3, r0
1005037e:	7023      	strb	r3, [r4, #0]
    if(status)
10050380:	002a      	movs	r2, r5
10050382:	18bb      	adds	r3, r7, r2
10050384:	781b      	ldrb	r3, [r3, #0]
10050386:	2b00      	cmp	r3, #0
10050388:	d004      	beq.n	10050394 <CleanPage+0x1c0>
    {
      ret = status; // Return last error if any.
1005038a:	4b0e      	ldr	r3, [pc, #56]	@ (100503c4 <CleanPage+0x1f0>)
1005038c:	18fb      	adds	r3, r7, r3
1005038e:	18ba      	adds	r2, r7, r2
10050390:	7812      	ldrb	r2, [r2, #0]
10050392:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10050394:	4a0d      	ldr	r2, [pc, #52]	@ (100503cc <CleanPage+0x1f8>)
10050396:	18bb      	adds	r3, r7, r2
10050398:	681b      	ldr	r3, [r3, #0]
1005039a:	3301      	adds	r3, #1
1005039c:	18ba      	adds	r2, r7, r2
1005039e:	6013      	str	r3, [r2, #0]
100503a0:	687b      	ldr	r3, [r7, #4]
100503a2:	791b      	ldrb	r3, [r3, #4]
100503a4:	001a      	movs	r2, r3
100503a6:	4b09      	ldr	r3, [pc, #36]	@ (100503cc <CleanPage+0x1f8>)
100503a8:	18fb      	adds	r3, r7, r3
100503aa:	681b      	ldr	r3, [r3, #0]
100503ac:	4293      	cmp	r3, r2
100503ae:	dbca      	blt.n	10050346 <CleanPage+0x172>
    }
  }

  return ret;
100503b0:	4b04      	ldr	r3, [pc, #16]	@ (100503c4 <CleanPage+0x1f0>)
100503b2:	18fb      	adds	r3, r7, r3
100503b4:	781b      	ldrb	r3, [r3, #0]
}
100503b6:	0018      	movs	r0, r3
100503b8:	46bd      	mov	sp, r7
100503ba:	4b0a      	ldr	r3, [pc, #40]	@ (100503e4 <CleanPage+0x210>)
100503bc:	449d      	add	sp, r3
100503be:	bdf0      	pop	{r4, r5, r6, r7, pc}
100503c0:	fffff7c4 	.word	0xfffff7c4
100503c4:	0000082f 	.word	0x0000082f
100503c8:	00000827 	.word	0x00000827
100503cc:	00000828 	.word	0x00000828
100503d0:	00000826 	.word	0x00000826
100503d4:	200022b4 	.word	0x200022b4
100503d8:	00000825 	.word	0x00000825
100503dc:	00000808 	.word	0x00000808
100503e0:	0000080e 	.word	0x0000080e
100503e4:	00000834 	.word	0x00000834

100503e8 <GetDBType>:

static uint8_t GetDBType(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType **smallDBContainer)
{
100503e8:	b590      	push	{r4, r7, lr}
100503ea:	b087      	sub	sp, #28
100503ec:	af00      	add	r7, sp, #0
100503ee:	0002      	movs	r2, r0
100503f0:	6039      	str	r1, [r7, #0]
100503f2:	1dfb      	adds	r3, r7, #7
100503f4:	701a      	strb	r2, [r3, #0]
  uint8_t id;

  /* Check if it is a large DB. */

  for(int i = 0; i < NUM_LARGE_DBS; i++)
100503f6:	2300      	movs	r3, #0
100503f8:	617b      	str	r3, [r7, #20]
100503fa:	e016      	b.n	1005042a <GetDBType+0x42>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
100503fc:	240b      	movs	r4, #11
100503fe:	1939      	adds	r1, r7, r4
10050400:	482e      	ldr	r0, [pc, #184]	@ (100504bc <GetDBType+0xd4>)
10050402:	697a      	ldr	r2, [r7, #20]
10050404:	0013      	movs	r3, r2
10050406:	005b      	lsls	r3, r3, #1
10050408:	189b      	adds	r3, r3, r2
1005040a:	009b      	lsls	r3, r3, #2
1005040c:	18c3      	adds	r3, r0, r3
1005040e:	3306      	adds	r3, #6
10050410:	781b      	ldrb	r3, [r3, #0]
10050412:	700b      	strb	r3, [r1, #0]

    if(id == NVMDB_id)
10050414:	193a      	adds	r2, r7, r4
10050416:	1dfb      	adds	r3, r7, #7
10050418:	7812      	ldrb	r2, [r2, #0]
1005041a:	781b      	ldrb	r3, [r3, #0]
1005041c:	429a      	cmp	r2, r3
1005041e:	d101      	bne.n	10050424 <GetDBType+0x3c>
    {
      return LARGE_DB;
10050420:	2302      	movs	r3, #2
10050422:	e046      	b.n	100504b2 <GetDBType+0xca>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
10050424:	697b      	ldr	r3, [r7, #20]
10050426:	3301      	adds	r3, #1
10050428:	617b      	str	r3, [r7, #20]
1005042a:	697b      	ldr	r3, [r7, #20]
1005042c:	2b01      	cmp	r3, #1
1005042e:	dde5      	ble.n	100503fc <GetDBType+0x14>
    }
  }

  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10050430:	2300      	movs	r3, #0
10050432:	613b      	str	r3, [r7, #16]
10050434:	e039      	b.n	100504aa <GetDBType+0xc2>
  {

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10050436:	2300      	movs	r3, #0
10050438:	60fb      	str	r3, [r7, #12]
1005043a:	e026      	b.n	1005048a <GetDBType+0xa2>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
1005043c:	4920      	ldr	r1, [pc, #128]	@ (100504c0 <GetDBType+0xd8>)
1005043e:	693a      	ldr	r2, [r7, #16]
10050440:	0013      	movs	r3, r2
10050442:	005b      	lsls	r3, r3, #1
10050444:	189b      	adds	r3, r3, r2
10050446:	009b      	lsls	r3, r3, #2
10050448:	18cb      	adds	r3, r1, r3
1005044a:	3308      	adds	r3, #8
1005044c:	6819      	ldr	r1, [r3, #0]
1005044e:	68fa      	ldr	r2, [r7, #12]
10050450:	0013      	movs	r3, r2
10050452:	005b      	lsls	r3, r3, #1
10050454:	189b      	adds	r3, r3, r2
10050456:	009b      	lsls	r3, r3, #2
10050458:	18ca      	adds	r2, r1, r3
1005045a:	210b      	movs	r1, #11
1005045c:	187b      	adds	r3, r7, r1
1005045e:	7812      	ldrb	r2, [r2, #0]
10050460:	701a      	strb	r2, [r3, #0]

      if(id == NVMDB_id)
10050462:	187a      	adds	r2, r7, r1
10050464:	1dfb      	adds	r3, r7, #7
10050466:	7812      	ldrb	r2, [r2, #0]
10050468:	781b      	ldrb	r3, [r3, #0]
1005046a:	429a      	cmp	r2, r3
1005046c:	d10a      	bne.n	10050484 <GetDBType+0x9c>
      {
        // DB found inside this small db container.
        *smallDBContainer = &NVM_SMALL_DB_STATIC_INFO[i];
1005046e:	693a      	ldr	r2, [r7, #16]
10050470:	0013      	movs	r3, r2
10050472:	005b      	lsls	r3, r3, #1
10050474:	189b      	adds	r3, r3, r2
10050476:	009b      	lsls	r3, r3, #2
10050478:	4a11      	ldr	r2, [pc, #68]	@ (100504c0 <GetDBType+0xd8>)
1005047a:	189a      	adds	r2, r3, r2
1005047c:	683b      	ldr	r3, [r7, #0]
1005047e:	601a      	str	r2, [r3, #0]
        return SMALL_DB;
10050480:	2301      	movs	r3, #1
10050482:	e016      	b.n	100504b2 <GetDBType+0xca>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10050484:	68fb      	ldr	r3, [r7, #12]
10050486:	3301      	adds	r3, #1
10050488:	60fb      	str	r3, [r7, #12]
1005048a:	490d      	ldr	r1, [pc, #52]	@ (100504c0 <GetDBType+0xd8>)
1005048c:	693a      	ldr	r2, [r7, #16]
1005048e:	0013      	movs	r3, r2
10050490:	005b      	lsls	r3, r3, #1
10050492:	189b      	adds	r3, r3, r2
10050494:	009b      	lsls	r3, r3, #2
10050496:	18cb      	adds	r3, r1, r3
10050498:	3304      	adds	r3, #4
1005049a:	781b      	ldrb	r3, [r3, #0]
1005049c:	001a      	movs	r2, r3
1005049e:	68fb      	ldr	r3, [r7, #12]
100504a0:	4293      	cmp	r3, r2
100504a2:	dbcb      	blt.n	1005043c <GetDBType+0x54>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
100504a4:	693b      	ldr	r3, [r7, #16]
100504a6:	3301      	adds	r3, #1
100504a8:	613b      	str	r3, [r7, #16]
100504aa:	693b      	ldr	r3, [r7, #16]
100504ac:	2b00      	cmp	r3, #0
100504ae:	dbc2      	blt.n	10050436 <GetDBType+0x4e>
      }
    }
  }

  return 0;
100504b0:	2300      	movs	r3, #0
}
100504b2:	0018      	movs	r0, r3
100504b4:	46bd      	mov	sp, r7
100504b6:	b007      	add	sp, #28
100504b8:	bd90      	pop	{r4, r7, pc}
100504ba:	46c0      	nop			@ (mov r8, r8)
100504bc:	10069350 	.word	0x10069350
100504c0:	200022e0 	.word	0x200022e0

100504c4 <EraseSmallDB>:
}

#endif

__NOINLINE static NVMDB_status_t EraseSmallDB(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
100504c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100504c6:	4c3d      	ldr	r4, [pc, #244]	@ (100505bc <EraseSmallDB+0xf8>)
100504c8:	44a5      	add	sp, r4
100504ca:	af02      	add	r7, sp, #8
100504cc:	0002      	movs	r2, r0
100504ce:	6039      	str	r1, [r7, #0]
100504d0:	4b3b      	ldr	r3, [pc, #236]	@ (100505c0 <EraseSmallDB+0xfc>)
100504d2:	2183      	movs	r1, #131	@ 0x83
100504d4:	0109      	lsls	r1, r1, #4
100504d6:	185b      	adds	r3, r3, r1
100504d8:	19db      	adds	r3, r3, r7
100504da:	701a      	strb	r2, [r3, #0]
#endif
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
100504dc:	2380      	movs	r3, #128	@ 0x80
100504de:	011a      	lsls	r2, r3, #4
100504e0:	2324      	movs	r3, #36	@ 0x24
100504e2:	18fb      	adds	r3, r7, r3
100504e4:	21ff      	movs	r1, #255	@ 0xff
100504e6:	0018      	movs	r0, r3
100504e8:	f017 fab8 	bl	10067a5c <memset>

  // Search other databases in the same page
  for(int i = 0; i < smallDBContainer_p->num_db; i++)
100504ec:	2300      	movs	r3, #0
100504ee:	4a35      	ldr	r2, [pc, #212]	@ (100505c4 <EraseSmallDB+0x100>)
100504f0:	18ba      	adds	r2, r7, r2
100504f2:	6013      	str	r3, [r2, #0]
100504f4:	e04b      	b.n	1005058e <EraseSmallDB+0xca>
  {
    NVMDB_HandleType handle;
    uint16_t num_read_bytes;
    ReadStateType state;
    NVMDB_IdType id = smallDBContainer_p->dbs[i].id;
100504f6:	683b      	ldr	r3, [r7, #0]
100504f8:	6899      	ldr	r1, [r3, #8]
100504fa:	4c32      	ldr	r4, [pc, #200]	@ (100505c4 <EraseSmallDB+0x100>)
100504fc:	193b      	adds	r3, r7, r4
100504fe:	681a      	ldr	r2, [r3, #0]
10050500:	0013      	movs	r3, r2
10050502:	005b      	lsls	r3, r3, #1
10050504:	189b      	adds	r3, r3, r2
10050506:	009b      	lsls	r3, r3, #2
10050508:	18ca      	adds	r2, r1, r3
1005050a:	492f      	ldr	r1, [pc, #188]	@ (100505c8 <EraseSmallDB+0x104>)
1005050c:	187b      	adds	r3, r7, r1
1005050e:	7812      	ldrb	r2, [r2, #0]
10050510:	701a      	strb	r2, [r3, #0]
    if(id != NVMDB_id)
10050512:	187a      	adds	r2, r7, r1
10050514:	4b2a      	ldr	r3, [pc, #168]	@ (100505c0 <EraseSmallDB+0xfc>)
10050516:	2083      	movs	r0, #131	@ 0x83
10050518:	0100      	lsls	r0, r0, #4
1005051a:	181b      	adds	r3, r3, r0
1005051c:	19db      	adds	r3, r3, r7
1005051e:	7812      	ldrb	r2, [r2, #0]
10050520:	781b      	ldrb	r3, [r3, #0]
10050522:	429a      	cmp	r2, r3
10050524:	d02d      	beq.n	10050582 <EraseSmallDB+0xbe>
    {
      // This is not the db to be erased. Save it.
      NVMDB_HandleInit(id, &handle);
10050526:	2514      	movs	r5, #20
10050528:	197a      	adds	r2, r7, r5
1005052a:	187b      	adds	r3, r7, r1
1005052c:	781b      	ldrb	r3, [r3, #0]
1005052e:	0011      	movs	r1, r2
10050530:	0018      	movs	r0, r3
10050532:	f000 fa6d 	bl	10050a10 <NVMDB_HandleInit>
      uint32_t offset = smallDBContainer_p->dbs[i].offset;
10050536:	683b      	ldr	r3, [r7, #0]
10050538:	6899      	ldr	r1, [r3, #8]
1005053a:	193b      	adds	r3, r7, r4
1005053c:	681a      	ldr	r2, [r3, #0]
1005053e:	0013      	movs	r3, r2
10050540:	005b      	lsls	r3, r3, #1
10050542:	189b      	adds	r3, r3, r2
10050544:	009b      	lsls	r3, r3, #2
10050546:	18cb      	adds	r3, r1, r3
10050548:	685b      	ldr	r3, [r3, #4]
1005054a:	4c20      	ldr	r4, [pc, #128]	@ (100505cc <EraseSmallDB+0x108>)
1005054c:	193a      	adds	r2, r7, r4
1005054e:	6013      	str	r3, [r2, #0]
      InitReadState(&state);
10050550:	260c      	movs	r6, #12
10050552:	19bb      	adds	r3, r7, r6
10050554:	0018      	movs	r0, r3
10050556:	f7ff fc55 	bl	1004fe04 <InitReadState>
      LoadDBToRAM(&handle, NVM_buffer + offset, sizeof(NVM_buffer) - offset, &num_read_bytes, &state);
1005055a:	2324      	movs	r3, #36	@ 0x24
1005055c:	18fa      	adds	r2, r7, r3
1005055e:	193b      	adds	r3, r7, r4
10050560:	681b      	ldr	r3, [r3, #0]
10050562:	18d1      	adds	r1, r2, r3
10050564:	193b      	adds	r3, r7, r4
10050566:	681b      	ldr	r3, [r3, #0]
10050568:	b29b      	uxth	r3, r3
1005056a:	2280      	movs	r2, #128	@ 0x80
1005056c:	0112      	lsls	r2, r2, #4
1005056e:	1ad3      	subs	r3, r2, r3
10050570:	b29a      	uxth	r2, r3
10050572:	2312      	movs	r3, #18
10050574:	18fc      	adds	r4, r7, r3
10050576:	1978      	adds	r0, r7, r5
10050578:	19bb      	adds	r3, r7, r6
1005057a:	9300      	str	r3, [sp, #0]
1005057c:	0023      	movs	r3, r4
1005057e:	f7ff fc52 	bl	1004fe26 <LoadDBToRAM>
  for(int i = 0; i < smallDBContainer_p->num_db; i++)
10050582:	4a10      	ldr	r2, [pc, #64]	@ (100505c4 <EraseSmallDB+0x100>)
10050584:	18bb      	adds	r3, r7, r2
10050586:	681b      	ldr	r3, [r3, #0]
10050588:	3301      	adds	r3, #1
1005058a:	18ba      	adds	r2, r7, r2
1005058c:	6013      	str	r3, [r2, #0]
1005058e:	683b      	ldr	r3, [r7, #0]
10050590:	791b      	ldrb	r3, [r3, #4]
10050592:	001a      	movs	r2, r3
10050594:	4b0b      	ldr	r3, [pc, #44]	@ (100505c4 <EraseSmallDB+0x100>)
10050596:	18fb      	adds	r3, r7, r3
10050598:	681b      	ldr	r3, [r3, #0]
1005059a:	4293      	cmp	r3, r2
1005059c:	dbab      	blt.n	100504f6 <EraseSmallDB+0x32>
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  // Write buffer to flash
  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
1005059e:	683b      	ldr	r3, [r7, #0]
100505a0:	681b      	ldr	r3, [r3, #0]
100505a2:	2280      	movs	r2, #128	@ 0x80
100505a4:	0112      	lsls	r2, r2, #4
100505a6:	2124      	movs	r1, #36	@ 0x24
100505a8:	1879      	adds	r1, r7, r1
100505aa:	0018      	movs	r0, r3
100505ac:	f7ff fbea 	bl	1004fd84 <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
100505b0:	2300      	movs	r3, #0
}
100505b2:	0018      	movs	r0, r3
100505b4:	46bd      	mov	sp, r7
100505b6:	4b06      	ldr	r3, [pc, #24]	@ (100505d0 <EraseSmallDB+0x10c>)
100505b8:	449d      	add	sp, r3
100505ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
100505bc:	fffff7c4 	.word	0xfffff7c4
100505c0:	fffff7d7 	.word	0xfffff7d7
100505c4:	0000082c 	.word	0x0000082c
100505c8:	0000082b 	.word	0x0000082b
100505cc:	00000824 	.word	0x00000824
100505d0:	00000834 	.word	0x00000834

100505d4 <NVMDB_AppendRecordNoCache>:

static NVMDB_status_t NVMDB_AppendRecordNoCache(NVMDB_HandleType *handle_p, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
100505d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100505d6:	b089      	sub	sp, #36	@ 0x24
100505d8:	af02      	add	r7, sp, #8
100505da:	60f8      	str	r0, [r7, #12]
100505dc:	0008      	movs	r0, r1
100505de:	0011      	movs	r1, r2
100505e0:	607b      	str	r3, [r7, #4]
100505e2:	230b      	movs	r3, #11
100505e4:	18fb      	adds	r3, r7, r3
100505e6:	1c02      	adds	r2, r0, #0
100505e8:	701a      	strb	r2, [r3, #0]
100505ea:	2008      	movs	r0, #8
100505ec:	183b      	adds	r3, r7, r0
100505ee:	1c0a      	adds	r2, r1, #0
100505f0:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordType *record_p;
  NVMDB_RecordSizeType available_size;
  NVMDB_status_t status;

  data1_length = ROUND4_R(data1_length);
100505f2:	0001      	movs	r1, r0
100505f4:	187b      	adds	r3, r7, r1
100505f6:	881b      	ldrh	r3, [r3, #0]
100505f8:	3b01      	subs	r3, #1
100505fa:	b29b      	uxth	r3, r3
100505fc:	b21b      	sxth	r3, r3
100505fe:	2203      	movs	r2, #3
10050600:	4313      	orrs	r3, r2
10050602:	b21b      	sxth	r3, r3
10050604:	b29a      	uxth	r2, r3
10050606:	187b      	adds	r3, r7, r1
10050608:	3201      	adds	r2, #1
1005060a:	801a      	strh	r2, [r3, #0]
  /* Search for first available entry. */

  while(1)
  {

    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
1005060c:	68fb      	ldr	r3, [r7, #12]
1005060e:	685b      	ldr	r3, [r3, #4]
10050610:	1d5a      	adds	r2, r3, #5
10050612:	68fb      	ldr	r3, [r7, #12]
10050614:	689b      	ldr	r3, [r3, #8]
10050616:	429a      	cmp	r2, r3
10050618:	d310      	bcc.n	1005063c <NVMDB_AppendRecordNoCache+0x68>
    {
      /* End of DB reached. This should not happen since the free space has been checked before.
         Should we remove this code or keep it to be safer?  */
      if(DBInfo[handle_p->id].invalid_records)
1005061a:	68fb      	ldr	r3, [r7, #12]
1005061c:	781b      	ldrb	r3, [r3, #0]
1005061e:	0019      	movs	r1, r3
10050620:	4a4a      	ldr	r2, [pc, #296]	@ (1005074c <NVMDB_AppendRecordNoCache+0x178>)
10050622:	000b      	movs	r3, r1
10050624:	009b      	lsls	r3, r3, #2
10050626:	185b      	adds	r3, r3, r1
10050628:	009b      	lsls	r3, r3, #2
1005062a:	18d3      	adds	r3, r2, r3
1005062c:	330a      	adds	r3, #10
1005062e:	881b      	ldrh	r3, [r3, #0]
10050630:	2b00      	cmp	r3, #0
10050632:	d001      	beq.n	10050638 <NVMDB_AppendRecordNoCache+0x64>
      {
        return NVMDB_STATUS_CLEAN_NEEDED;
10050634:	230b      	movs	r3, #11
10050636:	e084      	b.n	10050742 <NVMDB_AppendRecordNoCache+0x16e>
      }
      return NVMDB_STATUS_FULL_DB;
10050638:	2302      	movs	r3, #2
1005063a:	e082      	b.n	10050742 <NVMDB_AppendRecordNoCache+0x16e>
    }

    record_p = (NVMDB_RecordType_ptr)handle_p->address;
1005063c:	68fb      	ldr	r3, [r7, #12]
1005063e:	685b      	ldr	r3, [r3, #4]
10050640:	617b      	str	r3, [r7, #20]

    if(record_p->header.valid_flag == NO_RECORD)
10050642:	697b      	ldr	r3, [r7, #20]
10050644:	781b      	ldrb	r3, [r3, #0]
10050646:	2bff      	cmp	r3, #255	@ 0xff
10050648:	d11c      	bne.n	10050684 <NVMDB_AppendRecordNoCache+0xb0>
    {
      available_size = MIN(handle_p->end_address - handle_p->address, MAX_RECORD_SIZE);
1005064a:	68fb      	ldr	r3, [r7, #12]
1005064c:	689a      	ldr	r2, [r3, #8]
1005064e:	68fb      	ldr	r3, [r7, #12]
10050650:	685b      	ldr	r3, [r3, #4]
10050652:	1ad3      	subs	r3, r2, r3
10050654:	2280      	movs	r2, #128	@ 0x80
10050656:	0252      	lsls	r2, r2, #9
10050658:	4293      	cmp	r3, r2
1005065a:	d300      	bcc.n	1005065e <NVMDB_AppendRecordNoCache+0x8a>
1005065c:	4b3c      	ldr	r3, [pc, #240]	@ (10050750 <NVMDB_AppendRecordNoCache+0x17c>)
1005065e:	2112      	movs	r1, #18
10050660:	187a      	adds	r2, r7, r1
10050662:	8013      	strh	r3, [r2, #0]
      break;
10050664:	46c0      	nop			@ (mov r8, r8)
    }

    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
  }

  if(available_size < data1_length + data2_length + RECORD_HEADER_SIZE)
10050666:	2308      	movs	r3, #8
10050668:	0018      	movs	r0, r3
1005066a:	18fb      	adds	r3, r7, r3
1005066c:	881a      	ldrh	r2, [r3, #0]
1005066e:	2328      	movs	r3, #40	@ 0x28
10050670:	181b      	adds	r3, r3, r0
10050672:	19db      	adds	r3, r3, r7
10050674:	881b      	ldrh	r3, [r3, #0]
10050676:	18d3      	adds	r3, r2, r3
10050678:	1cda      	adds	r2, r3, #3
1005067a:	187b      	adds	r3, r7, r1
1005067c:	881b      	ldrh	r3, [r3, #0]
1005067e:	429a      	cmp	r2, r3
10050680:	db27      	blt.n	100506d2 <NVMDB_AppendRecordNoCache+0xfe>
10050682:	e015      	b.n	100506b0 <NVMDB_AppendRecordNoCache+0xdc>
    else if(record_p->header.valid_flag != VALID_RECORD && record_p->header.valid_flag != INVALID_RECORD)
10050684:	697b      	ldr	r3, [r7, #20]
10050686:	781b      	ldrb	r3, [r3, #0]
10050688:	2bfe      	cmp	r3, #254	@ 0xfe
1005068a:	d005      	beq.n	10050698 <NVMDB_AppendRecordNoCache+0xc4>
1005068c:	697b      	ldr	r3, [r7, #20]
1005068e:	781b      	ldrb	r3, [r3, #0]
10050690:	2b00      	cmp	r3, #0
10050692:	d001      	beq.n	10050698 <NVMDB_AppendRecordNoCache+0xc4>
      return NVMDB_STATUS_CORRUPTED_DB;
10050694:	2303      	movs	r3, #3
10050696:	e054      	b.n	10050742 <NVMDB_AppendRecordNoCache+0x16e>
    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
10050698:	68fb      	ldr	r3, [r7, #12]
1005069a:	685b      	ldr	r3, [r3, #4]
1005069c:	697a      	ldr	r2, [r7, #20]
1005069e:	8852      	ldrh	r2, [r2, #2]
100506a0:	3203      	adds	r2, #3
100506a2:	2103      	movs	r1, #3
100506a4:	430a      	orrs	r2, r1
100506a6:	189b      	adds	r3, r3, r2
100506a8:	1c5a      	adds	r2, r3, #1
100506aa:	68fb      	ldr	r3, [r7, #12]
100506ac:	605a      	str	r2, [r3, #4]
    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
100506ae:	e7ad      	b.n	1005060c <NVMDB_AppendRecordNoCache+0x38>
  {
    /* End of DB reached. This should not happen since the free space has been checked before.
       Should we remove this code or keep it to be safer?  */
    if(DBInfo[handle_p->id].invalid_records)
100506b0:	68fb      	ldr	r3, [r7, #12]
100506b2:	781b      	ldrb	r3, [r3, #0]
100506b4:	0019      	movs	r1, r3
100506b6:	4a25      	ldr	r2, [pc, #148]	@ (1005074c <NVMDB_AppendRecordNoCache+0x178>)
100506b8:	000b      	movs	r3, r1
100506ba:	009b      	lsls	r3, r3, #2
100506bc:	185b      	adds	r3, r3, r1
100506be:	009b      	lsls	r3, r3, #2
100506c0:	18d3      	adds	r3, r2, r3
100506c2:	330a      	adds	r3, #10
100506c4:	881b      	ldrh	r3, [r3, #0]
100506c6:	2b00      	cmp	r3, #0
100506c8:	d001      	beq.n	100506ce <NVMDB_AppendRecordNoCache+0xfa>
    {
      return NVMDB_STATUS_CLEAN_NEEDED;
100506ca:	230b      	movs	r3, #11
100506cc:	e039      	b.n	10050742 <NVMDB_AppendRecordNoCache+0x16e>
    }
    return NVMDB_STATUS_FULL_DB;
100506ce:	2302      	movs	r3, #2
100506d0:	e037      	b.n	10050742 <NVMDB_AppendRecordNoCache+0x16e>
  }

  status = WriteRecord(handle_p->address, record_id, data1_length, data1, data2_length, data2);
100506d2:	68fb      	ldr	r3, [r7, #12]
100506d4:	6858      	ldr	r0, [r3, #4]
100506d6:	2611      	movs	r6, #17
100506d8:	19bc      	adds	r4, r7, r6
100506da:	687d      	ldr	r5, [r7, #4]
100506dc:	2308      	movs	r3, #8
100506de:	001a      	movs	r2, r3
100506e0:	18fb      	adds	r3, r7, r3
100506e2:	881b      	ldrh	r3, [r3, #0]
100506e4:	469c      	mov	ip, r3
100506e6:	230b      	movs	r3, #11
100506e8:	18fb      	adds	r3, r7, r3
100506ea:	7819      	ldrb	r1, [r3, #0]
100506ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100506ee:	9301      	str	r3, [sp, #4]
100506f0:	2328      	movs	r3, #40	@ 0x28
100506f2:	189b      	adds	r3, r3, r2
100506f4:	19db      	adds	r3, r3, r7
100506f6:	881b      	ldrh	r3, [r3, #0]
100506f8:	9300      	str	r3, [sp, #0]
100506fa:	002b      	movs	r3, r5
100506fc:	4662      	mov	r2, ip
100506fe:	f7ff f99c 	bl	1004fa3a <WriteRecord>
10050702:	0003      	movs	r3, r0
10050704:	7023      	strb	r3, [r4, #0]
  if(status)
10050706:	19bb      	adds	r3, r7, r6
10050708:	781b      	ldrb	r3, [r3, #0]
1005070a:	2b00      	cmp	r3, #0
1005070c:	d002      	beq.n	10050714 <NVMDB_AppendRecordNoCache+0x140>
  {
    return status;
1005070e:	19bb      	adds	r3, r7, r6
10050710:	781b      	ldrb	r3, [r3, #0]
10050712:	e016      	b.n	10050742 <NVMDB_AppendRecordNoCache+0x16e>
  }

  DBInfo[handle_p->id].valid_records++;
10050714:	68fb      	ldr	r3, [r7, #12]
10050716:	781b      	ldrb	r3, [r3, #0]
10050718:	001a      	movs	r2, r3
1005071a:	490c      	ldr	r1, [pc, #48]	@ (1005074c <NVMDB_AppendRecordNoCache+0x178>)
1005071c:	0013      	movs	r3, r2
1005071e:	009b      	lsls	r3, r3, #2
10050720:	189b      	adds	r3, r3, r2
10050722:	009b      	lsls	r3, r3, #2
10050724:	18cb      	adds	r3, r1, r3
10050726:	3308      	adds	r3, #8
10050728:	881b      	ldrh	r3, [r3, #0]
1005072a:	3301      	adds	r3, #1
1005072c:	b298      	uxth	r0, r3
1005072e:	4907      	ldr	r1, [pc, #28]	@ (1005074c <NVMDB_AppendRecordNoCache+0x178>)
10050730:	0013      	movs	r3, r2
10050732:	009b      	lsls	r3, r3, #2
10050734:	189b      	adds	r3, r3, r2
10050736:	009b      	lsls	r3, r3, #2
10050738:	18cb      	adds	r3, r1, r3
1005073a:	3308      	adds	r3, #8
1005073c:	1c02      	adds	r2, r0, #0
1005073e:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10050740:	2300      	movs	r3, #0
}
10050742:	0018      	movs	r0, r3
10050744:	46bd      	mov	sp, r7
10050746:	b007      	add	sp, #28
10050748:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005074a:	46c0      	nop			@ (mov r8, r8)
1005074c:	200022b4 	.word	0x200022b4
10050750:	0000ffff 	.word	0x0000ffff

10050754 <NVMDB_Init>:
 *
 * @param  None
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Init(void)
{
10050754:	b5b0      	push	{r4, r5, r7, lr}
10050756:	b088      	sub	sp, #32
10050758:	af00      	add	r7, sp, #0
  uint32_t page_address, offset;
  uint16_t clean_threshold;
  uint8_t id;

  /* Parse small DBs. */
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
1005075a:	2300      	movs	r3, #0
1005075c:	61fb      	str	r3, [r7, #28]
1005075e:	e0cd      	b.n	100508fc <NVMDB_Init+0x1a8>
  {

    page_address = NVM_SMALL_DB_STATIC_INFO[i].page_address;
10050760:	49a8      	ldr	r1, [pc, #672]	@ (10050a04 <NVMDB_Init+0x2b0>)
10050762:	69fa      	ldr	r2, [r7, #28]
10050764:	0013      	movs	r3, r2
10050766:	005b      	lsls	r3, r3, #1
10050768:	189b      	adds	r3, r3, r2
1005076a:	009b      	lsls	r3, r3, #2
1005076c:	585b      	ldr	r3, [r3, r1]
1005076e:	60fb      	str	r3, [r7, #12]

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10050770:	2300      	movs	r3, #0
10050772:	61bb      	str	r3, [r7, #24]
10050774:	e0b1      	b.n	100508da <NVMDB_Init+0x186>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
10050776:	49a3      	ldr	r1, [pc, #652]	@ (10050a04 <NVMDB_Init+0x2b0>)
10050778:	69fa      	ldr	r2, [r7, #28]
1005077a:	0013      	movs	r3, r2
1005077c:	005b      	lsls	r3, r3, #1
1005077e:	189b      	adds	r3, r3, r2
10050780:	009b      	lsls	r3, r3, #2
10050782:	18cb      	adds	r3, r1, r3
10050784:	3308      	adds	r3, #8
10050786:	6819      	ldr	r1, [r3, #0]
10050788:	69ba      	ldr	r2, [r7, #24]
1005078a:	0013      	movs	r3, r2
1005078c:	005b      	lsls	r3, r3, #1
1005078e:	189b      	adds	r3, r3, r2
10050790:	009b      	lsls	r3, r3, #2
10050792:	18ca      	adds	r2, r1, r3
10050794:	2013      	movs	r0, #19
10050796:	183b      	adds	r3, r7, r0
10050798:	7812      	ldrb	r2, [r2, #0]
1005079a:	701a      	strb	r2, [r3, #0]
      offset = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].offset;
1005079c:	4999      	ldr	r1, [pc, #612]	@ (10050a04 <NVMDB_Init+0x2b0>)
1005079e:	69fa      	ldr	r2, [r7, #28]
100507a0:	0013      	movs	r3, r2
100507a2:	005b      	lsls	r3, r3, #1
100507a4:	189b      	adds	r3, r3, r2
100507a6:	009b      	lsls	r3, r3, #2
100507a8:	18cb      	adds	r3, r1, r3
100507aa:	3308      	adds	r3, #8
100507ac:	6819      	ldr	r1, [r3, #0]
100507ae:	69ba      	ldr	r2, [r7, #24]
100507b0:	0013      	movs	r3, r2
100507b2:	005b      	lsls	r3, r3, #1
100507b4:	189b      	adds	r3, r3, r2
100507b6:	009b      	lsls	r3, r3, #2
100507b8:	18cb      	adds	r3, r1, r3
100507ba:	685b      	ldr	r3, [r3, #4]
100507bc:	60bb      	str	r3, [r7, #8]
#if AUTO_CLEAN
      clean_threshold = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].clean_threshold;
100507be:	4991      	ldr	r1, [pc, #580]	@ (10050a04 <NVMDB_Init+0x2b0>)
100507c0:	69fa      	ldr	r2, [r7, #28]
100507c2:	0013      	movs	r3, r2
100507c4:	005b      	lsls	r3, r3, #1
100507c6:	189b      	adds	r3, r3, r2
100507c8:	009b      	lsls	r3, r3, #2
100507ca:	18cb      	adds	r3, r1, r3
100507cc:	3308      	adds	r3, #8
100507ce:	6819      	ldr	r1, [r3, #0]
100507d0:	69ba      	ldr	r2, [r7, #24]
100507d2:	0013      	movs	r3, r2
100507d4:	005b      	lsls	r3, r3, #1
100507d6:	189b      	adds	r3, r3, r2
100507d8:	009b      	lsls	r3, r3, #2
100507da:	18ca      	adds	r2, r1, r3
100507dc:	1dbb      	adds	r3, r7, #6
100507de:	8912      	ldrh	r2, [r2, #8]
100507e0:	801a      	strh	r2, [r3, #0]
#endif
      if(DBInfo[id].start_address || id >= NUM_DB)
100507e2:	183b      	adds	r3, r7, r0
100507e4:	781a      	ldrb	r2, [r3, #0]
100507e6:	4988      	ldr	r1, [pc, #544]	@ (10050a08 <NVMDB_Init+0x2b4>)
100507e8:	0013      	movs	r3, r2
100507ea:	009b      	lsls	r3, r3, #2
100507ec:	189b      	adds	r3, r3, r2
100507ee:	009b      	lsls	r3, r3, #2
100507f0:	585b      	ldr	r3, [r3, r1]
100507f2:	2b00      	cmp	r3, #0
100507f4:	d103      	bne.n	100507fe <NVMDB_Init+0xaa>
100507f6:	183b      	adds	r3, r7, r0
100507f8:	781b      	ldrb	r3, [r3, #0]
100507fa:	2b01      	cmp	r3, #1
100507fc:	d901      	bls.n	10050802 <NVMDB_Init+0xae>
      {
        // ID already used.
        return NVMDB_STATUS_INVALID_ID;
100507fe:	2301      	movs	r3, #1
10050800:	e0fc      	b.n	100509fc <NVMDB_Init+0x2a8>
      }
      DBInfo[id].start_address = page_address + offset;
10050802:	2413      	movs	r4, #19
10050804:	193b      	adds	r3, r7, r4
10050806:	781a      	ldrb	r2, [r3, #0]
10050808:	68f9      	ldr	r1, [r7, #12]
1005080a:	68bb      	ldr	r3, [r7, #8]
1005080c:	18c8      	adds	r0, r1, r3
1005080e:	497e      	ldr	r1, [pc, #504]	@ (10050a08 <NVMDB_Init+0x2b4>)
10050810:	0013      	movs	r3, r2
10050812:	009b      	lsls	r3, r3, #2
10050814:	189b      	adds	r3, r3, r2
10050816:	009b      	lsls	r3, r3, #2
10050818:	5058      	str	r0, [r3, r1]

      if(j == NVM_SMALL_DB_STATIC_INFO[i].num_db - 1)
1005081a:	497a      	ldr	r1, [pc, #488]	@ (10050a04 <NVMDB_Init+0x2b0>)
1005081c:	69fa      	ldr	r2, [r7, #28]
1005081e:	0013      	movs	r3, r2
10050820:	005b      	lsls	r3, r3, #1
10050822:	189b      	adds	r3, r3, r2
10050824:	009b      	lsls	r3, r3, #2
10050826:	18cb      	adds	r3, r1, r3
10050828:	3304      	adds	r3, #4
1005082a:	781b      	ldrb	r3, [r3, #0]
1005082c:	3b01      	subs	r3, #1
1005082e:	69ba      	ldr	r2, [r7, #24]
10050830:	429a      	cmp	r2, r3
10050832:	d10e      	bne.n	10050852 <NVMDB_Init+0xfe>
      {
        // If it is the last db of the page, end address is the last address of the page
        DBInfo[id].end_address = page_address + PAGE_SIZE;
10050834:	193b      	adds	r3, r7, r4
10050836:	781a      	ldrb	r2, [r3, #0]
10050838:	68fb      	ldr	r3, [r7, #12]
1005083a:	2180      	movs	r1, #128	@ 0x80
1005083c:	0109      	lsls	r1, r1, #4
1005083e:	1859      	adds	r1, r3, r1
10050840:	4871      	ldr	r0, [pc, #452]	@ (10050a08 <NVMDB_Init+0x2b4>)
10050842:	0013      	movs	r3, r2
10050844:	009b      	lsls	r3, r3, #2
10050846:	189b      	adds	r3, r3, r2
10050848:	009b      	lsls	r3, r3, #2
1005084a:	18c3      	adds	r3, r0, r3
1005084c:	3304      	adds	r3, #4
1005084e:	6019      	str	r1, [r3, #0]
10050850:	e01d      	b.n	1005088e <NVMDB_Init+0x13a>
      }
      else
      {
        // If it is not the last db of the page, end address is the start address of the next db
        DBInfo[id].end_address = page_address + NVM_SMALL_DB_STATIC_INFO[i].dbs[j + 1].offset;
10050852:	496c      	ldr	r1, [pc, #432]	@ (10050a04 <NVMDB_Init+0x2b0>)
10050854:	69fa      	ldr	r2, [r7, #28]
10050856:	0013      	movs	r3, r2
10050858:	005b      	lsls	r3, r3, #1
1005085a:	189b      	adds	r3, r3, r2
1005085c:	009b      	lsls	r3, r3, #2
1005085e:	18cb      	adds	r3, r1, r3
10050860:	3308      	adds	r3, #8
10050862:	6819      	ldr	r1, [r3, #0]
10050864:	69bb      	ldr	r3, [r7, #24]
10050866:	1c5a      	adds	r2, r3, #1
10050868:	0013      	movs	r3, r2
1005086a:	005b      	lsls	r3, r3, #1
1005086c:	189b      	adds	r3, r3, r2
1005086e:	009b      	lsls	r3, r3, #2
10050870:	18cb      	adds	r3, r1, r3
10050872:	6859      	ldr	r1, [r3, #4]
10050874:	2313      	movs	r3, #19
10050876:	18fb      	adds	r3, r7, r3
10050878:	781a      	ldrb	r2, [r3, #0]
1005087a:	68fb      	ldr	r3, [r7, #12]
1005087c:	18c9      	adds	r1, r1, r3
1005087e:	4862      	ldr	r0, [pc, #392]	@ (10050a08 <NVMDB_Init+0x2b4>)
10050880:	0013      	movs	r3, r2
10050882:	009b      	lsls	r3, r3, #2
10050884:	189b      	adds	r3, r3, r2
10050886:	009b      	lsls	r3, r3, #2
10050888:	18c3      	adds	r3, r0, r3
1005088a:	3304      	adds	r3, #4
1005088c:	6019      	str	r1, [r3, #0]
      }
      DBInfo[id].clean_threshold = clean_threshold;
1005088e:	2013      	movs	r0, #19
10050890:	183b      	adds	r3, r7, r0
10050892:	781a      	ldrb	r2, [r3, #0]
10050894:	495c      	ldr	r1, [pc, #368]	@ (10050a08 <NVMDB_Init+0x2b4>)
10050896:	0013      	movs	r3, r2
10050898:	009b      	lsls	r3, r3, #2
1005089a:	189b      	adds	r3, r3, r2
1005089c:	009b      	lsls	r3, r3, #2
1005089e:	18cb      	adds	r3, r1, r3
100508a0:	3310      	adds	r3, #16
100508a2:	1dba      	adds	r2, r7, #6
100508a4:	8812      	ldrh	r2, [r2, #0]
100508a6:	801a      	strh	r2, [r3, #0]

      status = NVMDB_get_info(&DBInfo[id]);
100508a8:	183b      	adds	r3, r7, r0
100508aa:	781a      	ldrb	r2, [r3, #0]
100508ac:	0013      	movs	r3, r2
100508ae:	009b      	lsls	r3, r3, #2
100508b0:	189b      	adds	r3, r3, r2
100508b2:	009b      	lsls	r3, r3, #2
100508b4:	4a54      	ldr	r2, [pc, #336]	@ (10050a08 <NVMDB_Init+0x2b4>)
100508b6:	189b      	adds	r3, r3, r2
100508b8:	2512      	movs	r5, #18
100508ba:	197c      	adds	r4, r7, r5
100508bc:	0018      	movs	r0, r3
100508be:	f7fe ff3b 	bl	1004f738 <NVMDB_get_info>
100508c2:	0003      	movs	r3, r0
100508c4:	7023      	strb	r3, [r4, #0]
      if(status)
100508c6:	197b      	adds	r3, r7, r5
100508c8:	781b      	ldrb	r3, [r3, #0]
100508ca:	2b00      	cmp	r3, #0
100508cc:	d002      	beq.n	100508d4 <NVMDB_Init+0x180>
      {
        return status;
100508ce:	197b      	adds	r3, r7, r5
100508d0:	781b      	ldrb	r3, [r3, #0]
100508d2:	e093      	b.n	100509fc <NVMDB_Init+0x2a8>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
100508d4:	69bb      	ldr	r3, [r7, #24]
100508d6:	3301      	adds	r3, #1
100508d8:	61bb      	str	r3, [r7, #24]
100508da:	494a      	ldr	r1, [pc, #296]	@ (10050a04 <NVMDB_Init+0x2b0>)
100508dc:	69fa      	ldr	r2, [r7, #28]
100508de:	0013      	movs	r3, r2
100508e0:	005b      	lsls	r3, r3, #1
100508e2:	189b      	adds	r3, r3, r2
100508e4:	009b      	lsls	r3, r3, #2
100508e6:	18cb      	adds	r3, r1, r3
100508e8:	3304      	adds	r3, #4
100508ea:	781b      	ldrb	r3, [r3, #0]
100508ec:	001a      	movs	r2, r3
100508ee:	69bb      	ldr	r3, [r7, #24]
100508f0:	4293      	cmp	r3, r2
100508f2:	da00      	bge.n	100508f6 <NVMDB_Init+0x1a2>
100508f4:	e73f      	b.n	10050776 <NVMDB_Init+0x22>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
100508f6:	69fb      	ldr	r3, [r7, #28]
100508f8:	3301      	adds	r3, #1
100508fa:	61fb      	str	r3, [r7, #28]
100508fc:	69fb      	ldr	r3, [r7, #28]
100508fe:	2b00      	cmp	r3, #0
10050900:	da00      	bge.n	10050904 <NVMDB_Init+0x1b0>
10050902:	e72d      	b.n	10050760 <NVMDB_Init+0xc>
      }
    }
  }

  /* Parse large DBs. */
  for(int i = 0; i < NUM_LARGE_DBS; i++)
10050904:	2300      	movs	r3, #0
10050906:	617b      	str	r3, [r7, #20]
10050908:	e074      	b.n	100509f4 <NVMDB_Init+0x2a0>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
1005090a:	2413      	movs	r4, #19
1005090c:	1939      	adds	r1, r7, r4
1005090e:	483f      	ldr	r0, [pc, #252]	@ (10050a0c <NVMDB_Init+0x2b8>)
10050910:	697a      	ldr	r2, [r7, #20]
10050912:	0013      	movs	r3, r2
10050914:	005b      	lsls	r3, r3, #1
10050916:	189b      	adds	r3, r3, r2
10050918:	009b      	lsls	r3, r3, #2
1005091a:	18c3      	adds	r3, r0, r3
1005091c:	3306      	adds	r3, #6
1005091e:	781b      	ldrb	r3, [r3, #0]
10050920:	700b      	strb	r3, [r1, #0]

    if(DBInfo[id].start_address || id >= NUM_DB)
10050922:	193b      	adds	r3, r7, r4
10050924:	781a      	ldrb	r2, [r3, #0]
10050926:	4938      	ldr	r1, [pc, #224]	@ (10050a08 <NVMDB_Init+0x2b4>)
10050928:	0013      	movs	r3, r2
1005092a:	009b      	lsls	r3, r3, #2
1005092c:	189b      	adds	r3, r3, r2
1005092e:	009b      	lsls	r3, r3, #2
10050930:	585b      	ldr	r3, [r3, r1]
10050932:	2b00      	cmp	r3, #0
10050934:	d103      	bne.n	1005093e <NVMDB_Init+0x1ea>
10050936:	193b      	adds	r3, r7, r4
10050938:	781b      	ldrb	r3, [r3, #0]
1005093a:	2b01      	cmp	r3, #1
1005093c:	d901      	bls.n	10050942 <NVMDB_Init+0x1ee>
    {
      // ID already used.
      return NVMDB_STATUS_INVALID_ID;
1005093e:	2301      	movs	r3, #1
10050940:	e05c      	b.n	100509fc <NVMDB_Init+0x2a8>
    }

    DBInfo[id].start_address = NVM_LARGE_DB_STATIC_INFO[i].address;
10050942:	2413      	movs	r4, #19
10050944:	193b      	adds	r3, r7, r4
10050946:	781a      	ldrb	r2, [r3, #0]
10050948:	4830      	ldr	r0, [pc, #192]	@ (10050a0c <NVMDB_Init+0x2b8>)
1005094a:	6979      	ldr	r1, [r7, #20]
1005094c:	000b      	movs	r3, r1
1005094e:	005b      	lsls	r3, r3, #1
10050950:	185b      	adds	r3, r3, r1
10050952:	009b      	lsls	r3, r3, #2
10050954:	5818      	ldr	r0, [r3, r0]
10050956:	492c      	ldr	r1, [pc, #176]	@ (10050a08 <NVMDB_Init+0x2b4>)
10050958:	0013      	movs	r3, r2
1005095a:	009b      	lsls	r3, r3, #2
1005095c:	189b      	adds	r3, r3, r2
1005095e:	009b      	lsls	r3, r3, #2
10050960:	5058      	str	r0, [r3, r1]
    DBInfo[id].end_address = NVM_LARGE_DB_STATIC_INFO[i].address + NVM_LARGE_DB_STATIC_INFO[i].size;
10050962:	492a      	ldr	r1, [pc, #168]	@ (10050a0c <NVMDB_Init+0x2b8>)
10050964:	697a      	ldr	r2, [r7, #20]
10050966:	0013      	movs	r3, r2
10050968:	005b      	lsls	r3, r3, #1
1005096a:	189b      	adds	r3, r3, r2
1005096c:	009b      	lsls	r3, r3, #2
1005096e:	5859      	ldr	r1, [r3, r1]
10050970:	4826      	ldr	r0, [pc, #152]	@ (10050a0c <NVMDB_Init+0x2b8>)
10050972:	697a      	ldr	r2, [r7, #20]
10050974:	0013      	movs	r3, r2
10050976:	005b      	lsls	r3, r3, #1
10050978:	189b      	adds	r3, r3, r2
1005097a:	009b      	lsls	r3, r3, #2
1005097c:	18c3      	adds	r3, r0, r3
1005097e:	3304      	adds	r3, #4
10050980:	881b      	ldrh	r3, [r3, #0]
10050982:	0018      	movs	r0, r3
10050984:	193b      	adds	r3, r7, r4
10050986:	781a      	ldrb	r2, [r3, #0]
10050988:	1809      	adds	r1, r1, r0
1005098a:	481f      	ldr	r0, [pc, #124]	@ (10050a08 <NVMDB_Init+0x2b4>)
1005098c:	0013      	movs	r3, r2
1005098e:	009b      	lsls	r3, r3, #2
10050990:	189b      	adds	r3, r3, r2
10050992:	009b      	lsls	r3, r3, #2
10050994:	18c3      	adds	r3, r0, r3
10050996:	3304      	adds	r3, #4
10050998:	6019      	str	r1, [r3, #0]
#if AUTO_CLEAN
    DBInfo[id].clean_threshold = NVM_LARGE_DB_STATIC_INFO[i].clean_threshold;
1005099a:	193b      	adds	r3, r7, r4
1005099c:	781a      	ldrb	r2, [r3, #0]
1005099e:	481b      	ldr	r0, [pc, #108]	@ (10050a0c <NVMDB_Init+0x2b8>)
100509a0:	6979      	ldr	r1, [r7, #20]
100509a2:	000b      	movs	r3, r1
100509a4:	005b      	lsls	r3, r3, #1
100509a6:	185b      	adds	r3, r3, r1
100509a8:	009b      	lsls	r3, r3, #2
100509aa:	18c3      	adds	r3, r0, r3
100509ac:	3308      	adds	r3, #8
100509ae:	8818      	ldrh	r0, [r3, #0]
100509b0:	4915      	ldr	r1, [pc, #84]	@ (10050a08 <NVMDB_Init+0x2b4>)
100509b2:	0013      	movs	r3, r2
100509b4:	009b      	lsls	r3, r3, #2
100509b6:	189b      	adds	r3, r3, r2
100509b8:	009b      	lsls	r3, r3, #2
100509ba:	18cb      	adds	r3, r1, r3
100509bc:	3310      	adds	r3, #16
100509be:	1c02      	adds	r2, r0, #0
100509c0:	801a      	strh	r2, [r3, #0]
#endif

    status = NVMDB_get_info(&DBInfo[id]);
100509c2:	193b      	adds	r3, r7, r4
100509c4:	781a      	ldrb	r2, [r3, #0]
100509c6:	0013      	movs	r3, r2
100509c8:	009b      	lsls	r3, r3, #2
100509ca:	189b      	adds	r3, r3, r2
100509cc:	009b      	lsls	r3, r3, #2
100509ce:	4a0e      	ldr	r2, [pc, #56]	@ (10050a08 <NVMDB_Init+0x2b4>)
100509d0:	189b      	adds	r3, r3, r2
100509d2:	2512      	movs	r5, #18
100509d4:	197c      	adds	r4, r7, r5
100509d6:	0018      	movs	r0, r3
100509d8:	f7fe feae 	bl	1004f738 <NVMDB_get_info>
100509dc:	0003      	movs	r3, r0
100509de:	7023      	strb	r3, [r4, #0]
    if(status)
100509e0:	197b      	adds	r3, r7, r5
100509e2:	781b      	ldrb	r3, [r3, #0]
100509e4:	2b00      	cmp	r3, #0
100509e6:	d002      	beq.n	100509ee <NVMDB_Init+0x29a>
    {
      return status;
100509e8:	197b      	adds	r3, r7, r5
100509ea:	781b      	ldrb	r3, [r3, #0]
100509ec:	e006      	b.n	100509fc <NVMDB_Init+0x2a8>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
100509ee:	697b      	ldr	r3, [r7, #20]
100509f0:	3301      	adds	r3, #1
100509f2:	617b      	str	r3, [r7, #20]
100509f4:	697b      	ldr	r3, [r7, #20]
100509f6:	2b01      	cmp	r3, #1
100509f8:	dd87      	ble.n	1005090a <NVMDB_Init+0x1b6>
    }
  }

  return NVMDB_STATUS_OK;
100509fa:	2300      	movs	r3, #0
}
100509fc:	0018      	movs	r0, r3
100509fe:	46bd      	mov	sp, r7
10050a00:	b008      	add	sp, #32
10050a02:	bdb0      	pop	{r4, r5, r7, pc}
10050a04:	200022e0 	.word	0x200022e0
10050a08:	200022b4 	.word	0x200022b4
10050a0c:	10069350 	.word	0x10069350

10050a10 <NVMDB_HandleInit>:
 *             through NVM_SMALL_DB_STATIC_INFO and NVM_LARGE_DB_STATIC_INFO variables.
 * @param[out] handle_p Pointer to the handle to be initialized.
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_HandleInit(NVMDB_IdType NVMDB_id, NVMDB_HandleType *handle_p)
{
10050a10:	b580      	push	{r7, lr}
10050a12:	b082      	sub	sp, #8
10050a14:	af00      	add	r7, sp, #0
10050a16:	0002      	movs	r2, r0
10050a18:	6039      	str	r1, [r7, #0]
10050a1a:	1dfb      	adds	r3, r7, #7
10050a1c:	701a      	strb	r2, [r3, #0]
  if(NVMDB_id >= NUM_DB)
10050a1e:	1dfb      	adds	r3, r7, #7
10050a20:	781b      	ldrb	r3, [r3, #0]
10050a22:	2b01      	cmp	r3, #1
10050a24:	d901      	bls.n	10050a2a <NVMDB_HandleInit+0x1a>
  {
    return NVMDB_STATUS_INVALID_ID;
10050a26:	2301      	movs	r3, #1
10050a28:	e020      	b.n	10050a6c <NVMDB_HandleInit+0x5c>
  }

  handle_p->address = DBInfo[NVMDB_id].start_address;
10050a2a:	1dfb      	adds	r3, r7, #7
10050a2c:	781a      	ldrb	r2, [r3, #0]
10050a2e:	4911      	ldr	r1, [pc, #68]	@ (10050a74 <NVMDB_HandleInit+0x64>)
10050a30:	0013      	movs	r3, r2
10050a32:	009b      	lsls	r3, r3, #2
10050a34:	189b      	adds	r3, r3, r2
10050a36:	009b      	lsls	r3, r3, #2
10050a38:	585a      	ldr	r2, [r3, r1]
10050a3a:	683b      	ldr	r3, [r7, #0]
10050a3c:	605a      	str	r2, [r3, #4]
  handle_p->end_address = DBInfo[NVMDB_id].end_address;
10050a3e:	1dfb      	adds	r3, r7, #7
10050a40:	781a      	ldrb	r2, [r3, #0]
10050a42:	490c      	ldr	r1, [pc, #48]	@ (10050a74 <NVMDB_HandleInit+0x64>)
10050a44:	0013      	movs	r3, r2
10050a46:	009b      	lsls	r3, r3, #2
10050a48:	189b      	adds	r3, r3, r2
10050a4a:	009b      	lsls	r3, r3, #2
10050a4c:	18cb      	adds	r3, r1, r3
10050a4e:	3304      	adds	r3, #4
10050a50:	681a      	ldr	r2, [r3, #0]
10050a52:	683b      	ldr	r3, [r7, #0]
10050a54:	609a      	str	r2, [r3, #8]
  handle_p->first_read = TRUE;
10050a56:	683b      	ldr	r3, [r7, #0]
10050a58:	2201      	movs	r2, #1
10050a5a:	731a      	strb	r2, [r3, #12]
  handle_p->id = NVMDB_id;
10050a5c:	683b      	ldr	r3, [r7, #0]
10050a5e:	1dfa      	adds	r2, r7, #7
10050a60:	7812      	ldrb	r2, [r2, #0]
10050a62:	701a      	strb	r2, [r3, #0]
  handle_p->cache = FALSE;
10050a64:	683b      	ldr	r3, [r7, #0]
10050a66:	2200      	movs	r2, #0
10050a68:	735a      	strb	r2, [r3, #13]

  return NVMDB_STATUS_OK;
10050a6a:	2300      	movs	r3, #0
}
10050a6c:	0018      	movs	r0, r3
10050a6e:	46bd      	mov	sp, r7
10050a70:	b002      	add	sp, #8
10050a72:	bd80      	pop	{r7, pc}
10050a74:	200022b4 	.word	0x200022b4

10050a78 <NVMDB_ReadNextRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadNextRecord(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
10050a78:	b590      	push	{r4, r7, lr}
10050a7a:	b089      	sub	sp, #36	@ 0x24
10050a7c:	af04      	add	r7, sp, #16
10050a7e:	60f8      	str	r0, [r7, #12]
10050a80:	0008      	movs	r0, r1
10050a82:	0011      	movs	r1, r2
10050a84:	607b      	str	r3, [r7, #4]
10050a86:	230b      	movs	r3, #11
10050a88:	18fb      	adds	r3, r7, r3
10050a8a:	1c02      	adds	r2, r0, #0
10050a8c:	701a      	strb	r2, [r3, #0]
10050a8e:	2308      	movs	r3, #8
10050a90:	18fb      	adds	r3, r7, r3
10050a92:	1c0a      	adds	r2, r1, #0
10050a94:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
10050a96:	68fb      	ldr	r3, [r7, #12]
10050a98:	781b      	ldrb	r3, [r3, #0]
10050a9a:	0019      	movs	r1, r3
10050a9c:	4a12      	ldr	r2, [pc, #72]	@ (10050ae8 <NVMDB_ReadNextRecord+0x70>)
10050a9e:	000b      	movs	r3, r1
10050aa0:	009b      	lsls	r3, r3, #2
10050aa2:	185b      	adds	r3, r3, r1
10050aa4:	009b      	lsls	r3, r3, #2
10050aa6:	18d3      	adds	r3, r2, r3
10050aa8:	330e      	adds	r3, #14
10050aaa:	781b      	ldrb	r3, [r3, #0]
10050aac:	2b00      	cmp	r3, #0
10050aae:	d001      	beq.n	10050ab4 <NVMDB_ReadNextRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
10050ab0:	230a      	movs	r3, #10
10050ab2:	e015      	b.n	10050ae0 <NVMDB_ReadNextRecord+0x68>
  }

  return ReadNextRecordNoLock(handle_p, record_type, data_offset, data_p, max_size, size_p, 0, NULL);
10050ab4:	687c      	ldr	r4, [r7, #4]
10050ab6:	2308      	movs	r3, #8
10050ab8:	18fb      	adds	r3, r7, r3
10050aba:	881a      	ldrh	r2, [r3, #0]
10050abc:	230b      	movs	r3, #11
10050abe:	18fb      	adds	r3, r7, r3
10050ac0:	7819      	ldrb	r1, [r3, #0]
10050ac2:	68f8      	ldr	r0, [r7, #12]
10050ac4:	2300      	movs	r3, #0
10050ac6:	9303      	str	r3, [sp, #12]
10050ac8:	2300      	movs	r3, #0
10050aca:	9302      	str	r3, [sp, #8]
10050acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050ace:	9301      	str	r3, [sp, #4]
10050ad0:	2320      	movs	r3, #32
10050ad2:	18fb      	adds	r3, r7, r3
10050ad4:	881b      	ldrh	r3, [r3, #0]
10050ad6:	9300      	str	r3, [sp, #0]
10050ad8:	0023      	movs	r3, r4
10050ada:	f7fe fef9 	bl	1004f8d0 <ReadNextRecordNoLock>
10050ade:	0003      	movs	r3, r0
}
10050ae0:	0018      	movs	r0, r3
10050ae2:	46bd      	mov	sp, r7
10050ae4:	b005      	add	sp, #20
10050ae6:	bd90      	pop	{r4, r7, pc}
10050ae8:	200022b4 	.word	0x200022b4

10050aec <NVMDB_ReadCurrentRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
10050aec:	b590      	push	{r4, r7, lr}
10050aee:	b087      	sub	sp, #28
10050af0:	af02      	add	r7, sp, #8
10050af2:	60f8      	str	r0, [r7, #12]
10050af4:	0008      	movs	r0, r1
10050af6:	607a      	str	r2, [r7, #4]
10050af8:	0019      	movs	r1, r3
10050afa:	230a      	movs	r3, #10
10050afc:	18fb      	adds	r3, r7, r3
10050afe:	1c02      	adds	r2, r0, #0
10050b00:	801a      	strh	r2, [r3, #0]
10050b02:	2308      	movs	r3, #8
10050b04:	18fb      	adds	r3, r7, r3
10050b06:	1c0a      	adds	r2, r1, #0
10050b08:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
10050b0a:	68fb      	ldr	r3, [r7, #12]
10050b0c:	781b      	ldrb	r3, [r3, #0]
10050b0e:	0019      	movs	r1, r3
10050b10:	4a0f      	ldr	r2, [pc, #60]	@ (10050b50 <NVMDB_ReadCurrentRecord+0x64>)
10050b12:	000b      	movs	r3, r1
10050b14:	009b      	lsls	r3, r3, #2
10050b16:	185b      	adds	r3, r3, r1
10050b18:	009b      	lsls	r3, r3, #2
10050b1a:	18d3      	adds	r3, r2, r3
10050b1c:	330e      	adds	r3, #14
10050b1e:	781b      	ldrb	r3, [r3, #0]
10050b20:	2b00      	cmp	r3, #0
10050b22:	d001      	beq.n	10050b28 <NVMDB_ReadCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
10050b24:	230a      	movs	r3, #10
10050b26:	e00f      	b.n	10050b48 <NVMDB_ReadCurrentRecord+0x5c>
  }

  return ReadCurrentRecordNoLock(handle_p, data_offset, data_p, max_size, size_p, 0);
10050b28:	2308      	movs	r3, #8
10050b2a:	18fb      	adds	r3, r7, r3
10050b2c:	881c      	ldrh	r4, [r3, #0]
10050b2e:	687a      	ldr	r2, [r7, #4]
10050b30:	230a      	movs	r3, #10
10050b32:	18fb      	adds	r3, r7, r3
10050b34:	8819      	ldrh	r1, [r3, #0]
10050b36:	68f8      	ldr	r0, [r7, #12]
10050b38:	2300      	movs	r3, #0
10050b3a:	9301      	str	r3, [sp, #4]
10050b3c:	6a3b      	ldr	r3, [r7, #32]
10050b3e:	9300      	str	r3, [sp, #0]
10050b40:	0023      	movs	r3, r4
10050b42:	f7ff f81c 	bl	1004fb7e <ReadCurrentRecordNoLock>
10050b46:	0003      	movs	r3, r0
}
10050b48:	0018      	movs	r0, r3
10050b4a:	46bd      	mov	sp, r7
10050b4c:	b005      	add	sp, #20
10050b4e:	bd90      	pop	{r4, r7, pc}
10050b50:	200022b4 	.word	0x200022b4

10050b54 <NVMDB_AppendRecord>:
 * @param      header_length Length of bytes in data.
 * @param[in]  data Data to be stored inside the record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_AppendRecord(NVMDB_HandleType *handle_p, uint8_t record_type, uint16_t header_length, const void *header, uint16_t data_length, const void *data)
{
10050b54:	b5f0      	push	{r4, r5, r6, r7, lr}
10050b56:	46c6      	mov	lr, r8
10050b58:	b500      	push	{lr}
10050b5a:	b088      	sub	sp, #32
10050b5c:	af02      	add	r7, sp, #8
10050b5e:	60f8      	str	r0, [r7, #12]
10050b60:	0008      	movs	r0, r1
10050b62:	0011      	movs	r1, r2
10050b64:	607b      	str	r3, [r7, #4]
10050b66:	230b      	movs	r3, #11
10050b68:	001c      	movs	r4, r3
10050b6a:	18fb      	adds	r3, r7, r3
10050b6c:	1c02      	adds	r2, r0, #0
10050b6e:	701a      	strb	r2, [r3, #0]
10050b70:	2008      	movs	r0, #8
10050b72:	183b      	adds	r3, r7, r0
10050b74:	1c0a      	adds	r2, r1, #0
10050b76:	801a      	strh	r2, [r3, #0]
  }

success:

#else /* NVM_CACHE */
  status = NVMDB_AppendRecordNoCache(handle_p, record_type, header_length, header, data_length, data);
10050b78:	2617      	movs	r6, #23
10050b7a:	46b0      	mov	r8, r6
10050b7c:	44b8      	add	r8, r7
10050b7e:	687d      	ldr	r5, [r7, #4]
10050b80:	183b      	adds	r3, r7, r0
10050b82:	881a      	ldrh	r2, [r3, #0]
10050b84:	0023      	movs	r3, r4
10050b86:	18fb      	adds	r3, r7, r3
10050b88:	7819      	ldrb	r1, [r3, #0]
10050b8a:	68f8      	ldr	r0, [r7, #12]
10050b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10050b8e:	9301      	str	r3, [sp, #4]
10050b90:	2328      	movs	r3, #40	@ 0x28
10050b92:	2408      	movs	r4, #8
10050b94:	191b      	adds	r3, r3, r4
10050b96:	19db      	adds	r3, r3, r7
10050b98:	881b      	ldrh	r3, [r3, #0]
10050b9a:	9300      	str	r3, [sp, #0]
10050b9c:	002b      	movs	r3, r5
10050b9e:	f7ff fd19 	bl	100505d4 <NVMDB_AppendRecordNoCache>
10050ba2:	0003      	movs	r3, r0
10050ba4:	4642      	mov	r2, r8
10050ba6:	7013      	strb	r3, [r2, #0]

  if(status != NVMDB_STATUS_OK)
10050ba8:	19bb      	adds	r3, r7, r6
10050baa:	781b      	ldrb	r3, [r3, #0]
10050bac:	2b00      	cmp	r3, #0
10050bae:	d002      	beq.n	10050bb6 <NVMDB_AppendRecord+0x62>
  {
    return status;
10050bb0:	19bb      	adds	r3, r7, r6
10050bb2:	781b      	ldrb	r3, [r3, #0]
10050bb4:	e02c      	b.n	10050c10 <NVMDB_AppendRecord+0xbc>
  }

#endif

  /* Take into account that the free space is reduced, even if the record is actually in cache.  */
  DBInfo[handle_p->id].free_space -= ROUND4_R(header_length + data_length) + RECORD_HEADER_SIZE;
10050bb6:	68fb      	ldr	r3, [r7, #12]
10050bb8:	781b      	ldrb	r3, [r3, #0]
10050bba:	0019      	movs	r1, r3
10050bbc:	4a17      	ldr	r2, [pc, #92]	@ (10050c1c <NVMDB_AppendRecord+0xc8>)
10050bbe:	000b      	movs	r3, r1
10050bc0:	009b      	lsls	r3, r3, #2
10050bc2:	185b      	adds	r3, r3, r1
10050bc4:	009b      	lsls	r3, r3, #2
10050bc6:	18d3      	adds	r3, r2, r3
10050bc8:	330c      	adds	r3, #12
10050bca:	881a      	ldrh	r2, [r3, #0]
10050bcc:	2308      	movs	r3, #8
10050bce:	0018      	movs	r0, r3
10050bd0:	18f9      	adds	r1, r7, r3
10050bd2:	2328      	movs	r3, #40	@ 0x28
10050bd4:	181b      	adds	r3, r3, r0
10050bd6:	19db      	adds	r3, r3, r7
10050bd8:	8809      	ldrh	r1, [r1, #0]
10050bda:	881b      	ldrh	r3, [r3, #0]
10050bdc:	18cb      	adds	r3, r1, r3
10050bde:	b29b      	uxth	r3, r3
10050be0:	3b01      	subs	r3, #1
10050be2:	b29b      	uxth	r3, r3
10050be4:	b21b      	sxth	r3, r3
10050be6:	2103      	movs	r1, #3
10050be8:	430b      	orrs	r3, r1
10050bea:	b21b      	sxth	r3, r3
10050bec:	b29b      	uxth	r3, r3
10050bee:	1ad3      	subs	r3, r2, r3
10050bf0:	b29b      	uxth	r3, r3
10050bf2:	68fa      	ldr	r2, [r7, #12]
10050bf4:	7812      	ldrb	r2, [r2, #0]
10050bf6:	0011      	movs	r1, r2
10050bf8:	3b05      	subs	r3, #5
10050bfa:	b298      	uxth	r0, r3
10050bfc:	4a07      	ldr	r2, [pc, #28]	@ (10050c1c <NVMDB_AppendRecord+0xc8>)
10050bfe:	000b      	movs	r3, r1
10050c00:	009b      	lsls	r3, r3, #2
10050c02:	185b      	adds	r3, r3, r1
10050c04:	009b      	lsls	r3, r3, #2
10050c06:	18d3      	adds	r3, r2, r3
10050c08:	330c      	adds	r3, #12
10050c0a:	1c02      	adds	r2, r0, #0
10050c0c:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10050c0e:	2300      	movs	r3, #0
}
10050c10:	0018      	movs	r0, r3
10050c12:	46bd      	mov	sp, r7
10050c14:	b006      	add	sp, #24
10050c16:	bc80      	pop	{r7}
10050c18:	46b8      	mov	r8, r7
10050c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10050c1c:	200022b4 	.word	0x200022b4

10050c20 <NVMDB_DeleteRecord>:
 *
 * @param[in,out] handle_p Handle pointing to the record to be deleted.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_DeleteRecord(const NVMDB_HandleType *handle_p)
{
10050c20:	b580      	push	{r7, lr}
10050c22:	b082      	sub	sp, #8
10050c24:	af00      	add	r7, sp, #0
10050c26:	6078      	str	r0, [r7, #4]
  /* No time to complete the operation immediately.  */
  return ScheduleDeleteOperation(handle_p->id, handle_p->address);

#else /* NVM_CACHE */

  return NVMDB_DeleteRecordNoCache(handle_p);
10050c28:	687b      	ldr	r3, [r7, #4]
10050c2a:	0018      	movs	r0, r3
10050c2c:	f7ff f828 	bl	1004fc80 <NVMDB_DeleteRecordNoCache>
10050c30:	0003      	movs	r3, r0

#endif
}
10050c32:	0018      	movs	r0, r3
10050c34:	46bd      	mov	sp, r7
10050c36:	b002      	add	sp, #8
10050c38:	bd80      	pop	{r7, pc}
	...

10050c3c <NVMDB_Erase>:
 *
 * @param      NVMDB_id The ID of the record to be erased.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Erase(NVMDB_IdType NVMDB_id)
{
10050c3c:	b5b0      	push	{r4, r5, r7, lr}
10050c3e:	b08c      	sub	sp, #48	@ 0x30
10050c40:	af00      	add	r7, sp, #0
10050c42:	0002      	movs	r2, r0
10050c44:	1dfb      	adds	r3, r7, #7
10050c46:	701a      	strb	r2, [r3, #0]
  {
    return NVMDB_STATUS_CACHE_OP_PENDING;
  }
#endif

  type = GetDBType(NVMDB_id, &smallDBContainer_p);
10050c48:	252b      	movs	r5, #43	@ 0x2b
10050c4a:	197c      	adds	r4, r7, r5
10050c4c:	2318      	movs	r3, #24
10050c4e:	18fa      	adds	r2, r7, r3
10050c50:	1dfb      	adds	r3, r7, #7
10050c52:	781b      	ldrb	r3, [r3, #0]
10050c54:	0011      	movs	r1, r2
10050c56:	0018      	movs	r0, r3
10050c58:	f7ff fbc6 	bl	100503e8 <GetDBType>
10050c5c:	0003      	movs	r3, r0
10050c5e:	7023      	strb	r3, [r4, #0]

  if(type == LARGE_DB)
10050c60:	197b      	adds	r3, r7, r5
10050c62:	781b      	ldrb	r3, [r3, #0]
10050c64:	2b02      	cmp	r3, #2
10050c66:	d146      	bne.n	10050cf6 <NVMDB_Erase+0xba>
  {
    uint8_t page_num_start, num_pages;
    uint32_t start_address = DBInfo[NVMDB_id].start_address;
10050c68:	1dfb      	adds	r3, r7, #7
10050c6a:	781a      	ldrb	r2, [r3, #0]
10050c6c:	4942      	ldr	r1, [pc, #264]	@ (10050d78 <NVMDB_Erase+0x13c>)
10050c6e:	0013      	movs	r3, r2
10050c70:	009b      	lsls	r3, r3, #2
10050c72:	189b      	adds	r3, r3, r2
10050c74:	009b      	lsls	r3, r3, #2
10050c76:	585b      	ldr	r3, [r3, r1]
10050c78:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t end_address = DBInfo[NVMDB_id].end_address;
10050c7a:	1dfb      	adds	r3, r7, #7
10050c7c:	781a      	ldrb	r2, [r3, #0]
10050c7e:	493e      	ldr	r1, [pc, #248]	@ (10050d78 <NVMDB_Erase+0x13c>)
10050c80:	0013      	movs	r3, r2
10050c82:	009b      	lsls	r3, r3, #2
10050c84:	189b      	adds	r3, r3, r2
10050c86:	009b      	lsls	r3, r3, #2
10050c88:	18cb      	adds	r3, r1, r3
10050c8a:	3304      	adds	r3, #4
10050c8c:	681b      	ldr	r3, [r3, #0]
10050c8e:	623b      	str	r3, [r7, #32]

    page_num_start = (start_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
10050c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050c92:	4a3a      	ldr	r2, [pc, #232]	@ (10050d7c <NVMDB_Erase+0x140>)
10050c94:	4694      	mov	ip, r2
10050c96:	4463      	add	r3, ip
10050c98:	0ada      	lsrs	r2, r3, #11
10050c9a:	201f      	movs	r0, #31
10050c9c:	183b      	adds	r3, r7, r0
10050c9e:	701a      	strb	r2, [r3, #0]
    num_pages = (ROUNDPAGE_R(end_address) - start_address) / PAGE_SIZE;
10050ca0:	6a3b      	ldr	r3, [r7, #32]
10050ca2:	3b01      	subs	r3, #1
10050ca4:	4a36      	ldr	r2, [pc, #216]	@ (10050d80 <NVMDB_Erase+0x144>)
10050ca6:	431a      	orrs	r2, r3
10050ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050caa:	1ad3      	subs	r3, r2, r3
10050cac:	3301      	adds	r3, #1
10050cae:	0ada      	lsrs	r2, r3, #11
10050cb0:	241e      	movs	r4, #30
10050cb2:	193b      	adds	r3, r7, r4
10050cb4:	701a      	strb	r2, [r3, #0]
      return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
    }

#else

    NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
10050cb6:	210c      	movs	r1, #12
10050cb8:	187b      	adds	r3, r7, r1
10050cba:	2200      	movs	r2, #0
10050cbc:	601a      	str	r2, [r3, #0]
10050cbe:	183b      	adds	r3, r7, r0
10050cc0:	781a      	ldrb	r2, [r3, #0]
10050cc2:	187b      	adds	r3, r7, r1
10050cc4:	605a      	str	r2, [r3, #4]
10050cc6:	193b      	adds	r3, r7, r4
10050cc8:	781a      	ldrb	r2, [r3, #0]
10050cca:	187b      	adds	r3, r7, r1
10050ccc:	609a      	str	r2, [r3, #8]
10050cce:	2308      	movs	r3, #8
10050cd0:	18fa      	adds	r2, r7, r3
10050cd2:	187b      	adds	r3, r7, r1
10050cd4:	0011      	movs	r1, r2
10050cd6:	0018      	movs	r0, r3
10050cd8:	f7f7 f81e 	bl	10047d18 <HAL_FLASHEx_Erase>

#endif

    NVMDB_get_info(&DBInfo[NVMDB_id]);
10050cdc:	1dfb      	adds	r3, r7, #7
10050cde:	781a      	ldrb	r2, [r3, #0]
10050ce0:	0013      	movs	r3, r2
10050ce2:	009b      	lsls	r3, r3, #2
10050ce4:	189b      	adds	r3, r3, r2
10050ce6:	009b      	lsls	r3, r3, #2
10050ce8:	4a23      	ldr	r2, [pc, #140]	@ (10050d78 <NVMDB_Erase+0x13c>)
10050cea:	189b      	adds	r3, r3, r2
10050cec:	0018      	movs	r0, r3
10050cee:	f7fe fd23 	bl	1004f738 <NVMDB_get_info>

    return NVMDB_STATUS_OK;
10050cf2:	2300      	movs	r3, #0
10050cf4:	e03b      	b.n	10050d6e <NVMDB_Erase+0x132>
  }

  if(type == SMALL_DB)
10050cf6:	232b      	movs	r3, #43	@ 0x2b
10050cf8:	18fb      	adds	r3, r7, r3
10050cfa:	781b      	ldrb	r3, [r3, #0]
10050cfc:	2b01      	cmp	r3, #1
10050cfe:	d135      	bne.n	10050d6c <NVMDB_Erase+0x130>
  {

    status = EraseSmallDB(NVMDB_id, smallDBContainer_p);
10050d00:	69ba      	ldr	r2, [r7, #24]
10050d02:	252a      	movs	r5, #42	@ 0x2a
10050d04:	197c      	adds	r4, r7, r5
10050d06:	1dfb      	adds	r3, r7, #7
10050d08:	781b      	ldrb	r3, [r3, #0]
10050d0a:	0011      	movs	r1, r2
10050d0c:	0018      	movs	r0, r3
10050d0e:	f7ff fbd9 	bl	100504c4 <EraseSmallDB>
10050d12:	0003      	movs	r3, r0
10050d14:	7023      	strb	r3, [r4, #0]

    if(status == NVMDB_STATUS_OK)
10050d16:	197b      	adds	r3, r7, r5
10050d18:	781b      	ldrb	r3, [r3, #0]
10050d1a:	2b00      	cmp	r3, #0
10050d1c:	d122      	bne.n	10050d64 <NVMDB_Erase+0x128>
    {
      // Remove any operations in cache for all the DBs in the page. This means write and delete operations.
      // Cache operations for all the DBs in the same page have been executed by LoadDBToRAM().
      for(int i = 0; i < smallDBContainer_p->num_db; i++)
10050d1e:	2300      	movs	r3, #0
10050d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
10050d22:	e019      	b.n	10050d58 <NVMDB_Erase+0x11c>
      {
        NVMDB_IdType id = smallDBContainer_p->dbs[i].id;
10050d24:	69bb      	ldr	r3, [r7, #24]
10050d26:	6899      	ldr	r1, [r3, #8]
10050d28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10050d2a:	0013      	movs	r3, r2
10050d2c:	005b      	lsls	r3, r3, #1
10050d2e:	189b      	adds	r3, r3, r2
10050d30:	009b      	lsls	r3, r3, #2
10050d32:	18ca      	adds	r2, r1, r3
10050d34:	2129      	movs	r1, #41	@ 0x29
10050d36:	187b      	adds	r3, r7, r1
10050d38:	7812      	ldrb	r2, [r2, #0]
10050d3a:	701a      	strb	r2, [r3, #0]
#if NVM_CACHE
        RemoveCacheOp(id);
#endif
        NVMDB_get_info(&DBInfo[id]);
10050d3c:	187b      	adds	r3, r7, r1
10050d3e:	781a      	ldrb	r2, [r3, #0]
10050d40:	0013      	movs	r3, r2
10050d42:	009b      	lsls	r3, r3, #2
10050d44:	189b      	adds	r3, r3, r2
10050d46:	009b      	lsls	r3, r3, #2
10050d48:	4a0b      	ldr	r2, [pc, #44]	@ (10050d78 <NVMDB_Erase+0x13c>)
10050d4a:	189b      	adds	r3, r3, r2
10050d4c:	0018      	movs	r0, r3
10050d4e:	f7fe fcf3 	bl	1004f738 <NVMDB_get_info>
      for(int i = 0; i < smallDBContainer_p->num_db; i++)
10050d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10050d54:	3301      	adds	r3, #1
10050d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
10050d58:	69bb      	ldr	r3, [r7, #24]
10050d5a:	791b      	ldrb	r3, [r3, #4]
10050d5c:	001a      	movs	r2, r3
10050d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10050d60:	4293      	cmp	r3, r2
10050d62:	dbdf      	blt.n	10050d24 <NVMDB_Erase+0xe8>
#if NVM_CACHE
      return ScheduleSmallDBEraseOperation(NVMDB_id, smallDBContainer_p);
#endif
    }

    return status;
10050d64:	232a      	movs	r3, #42	@ 0x2a
10050d66:	18fb      	adds	r3, r7, r3
10050d68:	781b      	ldrb	r3, [r3, #0]
10050d6a:	e000      	b.n	10050d6e <NVMDB_Erase+0x132>
  }

  return NVMDB_STATUS_INVALID_ID;
10050d6c:	2301      	movs	r3, #1
}
10050d6e:	0018      	movs	r0, r3
10050d70:	46bd      	mov	sp, r7
10050d72:	b00c      	add	sp, #48	@ 0x30
10050d74:	bdb0      	pop	{r4, r5, r7, pc}
10050d76:	46c0      	nop			@ (mov r8, r8)
10050d78:	200022b4 	.word	0x200022b4
10050d7c:	effc0000 	.word	0xeffc0000
10050d80:	000007ff 	.word	0x000007ff

10050d84 <NVMDB_CleanDB>:
 *
 * @param      NVMDB_id The ID of the record to be cleaned.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_CleanDB(NVMDB_IdType NVMDB_id)
{
10050d84:	b5b0      	push	{r4, r5, r7, lr}
10050d86:	b084      	sub	sp, #16
10050d88:	af00      	add	r7, sp, #0
10050d8a:	0002      	movs	r2, r0
10050d8c:	1dfb      	adds	r3, r7, #7
10050d8e:	701a      	strb	r2, [r3, #0]
  const NVMDB_SmallDBContainerType *smallDBContainer;
  uint8_t type;

  type = GetDBType(NVMDB_id, &smallDBContainer);
10050d90:	250f      	movs	r5, #15
10050d92:	197c      	adds	r4, r7, r5
10050d94:	2308      	movs	r3, #8
10050d96:	18fa      	adds	r2, r7, r3
10050d98:	1dfb      	adds	r3, r7, #7
10050d9a:	781b      	ldrb	r3, [r3, #0]
10050d9c:	0011      	movs	r1, r2
10050d9e:	0018      	movs	r0, r3
10050da0:	f7ff fb22 	bl	100503e8 <GetDBType>
10050da4:	0003      	movs	r3, r0
10050da6:	7023      	strb	r3, [r4, #0]
  if(type == LARGE_DB)
10050da8:	197b      	adds	r3, r7, r5
10050daa:	781b      	ldrb	r3, [r3, #0]
10050dac:	2b02      	cmp	r3, #2
10050dae:	d106      	bne.n	10050dbe <NVMDB_CleanDB+0x3a>
  {
    return CleanLargeDB(NVMDB_id);
10050db0:	1dfb      	adds	r3, r7, #7
10050db2:	781b      	ldrb	r3, [r3, #0]
10050db4:	0018      	movs	r0, r3
10050db6:	f7ff f92f 	bl	10050018 <CleanLargeDB>
10050dba:	0003      	movs	r3, r0
10050dbc:	e00b      	b.n	10050dd6 <NVMDB_CleanDB+0x52>
  }
  if(type == SMALL_DB)
10050dbe:	230f      	movs	r3, #15
10050dc0:	18fb      	adds	r3, r7, r3
10050dc2:	781b      	ldrb	r3, [r3, #0]
10050dc4:	2b01      	cmp	r3, #1
10050dc6:	d105      	bne.n	10050dd4 <NVMDB_CleanDB+0x50>
  {
    return CleanPage(smallDBContainer);
10050dc8:	68bb      	ldr	r3, [r7, #8]
10050dca:	0018      	movs	r0, r3
10050dcc:	f7ff fa02 	bl	100501d4 <CleanPage>
10050dd0:	0003      	movs	r3, r0
10050dd2:	e000      	b.n	10050dd6 <NVMDB_CleanDB+0x52>
  }

  return NVMDB_STATUS_INVALID_ID;
10050dd4:	2301      	movs	r3, #1
}
10050dd6:	0018      	movs	r0, r3
10050dd8:	46bd      	mov	sp, r7
10050dda:	b004      	add	sp, #16
10050ddc:	bdb0      	pop	{r4, r5, r7, pc}
	...

10050de0 <NVMDB_Tick>:
 *             The value NVMDB_STATUS_NOT_ENOUGH_TIME indicates that some operations
 *             cannot be performed because there is not enough time. Other values
 *             indicates unexpected conditions of the database.
 */
NVMDB_status_t NVMDB_Tick(void)
{
10050de0:	b590      	push	{r4, r7, lr}
10050de2:	b083      	sub	sp, #12
10050de4:	af00      	add	r7, sp, #0
#endif

#endif /* NVM_CACHE */

#if AUTO_CLEAN
  dirty_db_id = NVMDB_CleanCheck();
10050de6:	1dfc      	adds	r4, r7, #7
10050de8:	f000 f816 	bl	10050e18 <NVMDB_CleanCheck>
10050dec:	0003      	movs	r3, r0
10050dee:	7023      	strb	r3, [r4, #0]
  if(dirty_db_id >= 0)
10050df0:	1dfb      	adds	r3, r7, #7
10050df2:	781b      	ldrb	r3, [r3, #0]
10050df4:	2b7f      	cmp	r3, #127	@ 0x7f
10050df6:	d808      	bhi.n	10050e0a <NVMDB_Tick+0x2a>
  {
    NVMDB_CleanDB((NVMDB_IdType)dirty_db_id);
10050df8:	1dfb      	adds	r3, r7, #7
10050dfa:	781b      	ldrb	r3, [r3, #0]
10050dfc:	0018      	movs	r0, r3
10050dfe:	f7ff ffc1 	bl	10050d84 <NVMDB_CleanDB>
    PRINTF("Handle possibly not valid anymore!\r\n");
10050e02:	4b04      	ldr	r3, [pc, #16]	@ (10050e14 <NVMDB_Tick+0x34>)
10050e04:	0018      	movs	r0, r3
10050e06:	f016 fd03 	bl	10067810 <puts>
  }
#endif

  return NVMDB_STATUS_OK;
10050e0a:	2300      	movs	r3, #0
}
10050e0c:	0018      	movs	r0, r3
10050e0e:	46bd      	mov	sp, r7
10050e10:	b003      	add	sp, #12
10050e12:	bd90      	pop	{r4, r7, pc}
10050e14:	10068b44 	.word	0x10068b44

10050e18 <NVMDB_CleanCheck>:

#if AUTO_CLEAN
// Checks if it is a good time to perform a clean operation
static int8_t NVMDB_CleanCheck(void)
{
10050e18:	b580      	push	{r7, lr}
10050e1a:	b082      	sub	sp, #8
10050e1c:	af00      	add	r7, sp, #0
  static int8_t db_start_index = 0;
  uint8_t i = db_start_index;
10050e1e:	4b2b      	ldr	r3, [pc, #172]	@ (10050ecc <NVMDB_CleanCheck+0xb4>)
10050e20:	2200      	movs	r2, #0
10050e22:	569a      	ldrsb	r2, [r3, r2]
10050e24:	1dfb      	adds	r3, r7, #7
10050e26:	701a      	strb	r2, [r3, #0]

  do
  {
    if(DBInfo[i].invalid_records)
10050e28:	1dfb      	adds	r3, r7, #7
10050e2a:	781a      	ldrb	r2, [r3, #0]
10050e2c:	4928      	ldr	r1, [pc, #160]	@ (10050ed0 <NVMDB_CleanCheck+0xb8>)
10050e2e:	0013      	movs	r3, r2
10050e30:	009b      	lsls	r3, r3, #2
10050e32:	189b      	adds	r3, r3, r2
10050e34:	009b      	lsls	r3, r3, #2
10050e36:	18cb      	adds	r3, r1, r3
10050e38:	330a      	adds	r3, #10
10050e3a:	881b      	ldrh	r3, [r3, #0]
10050e3c:	2b00      	cmp	r3, #0
10050e3e:	d028      	beq.n	10050e92 <NVMDB_CleanCheck+0x7a>
    {
      if(DBInfo[i].free_space < DBInfo[i].clean_threshold)
10050e40:	1dfb      	adds	r3, r7, #7
10050e42:	781a      	ldrb	r2, [r3, #0]
10050e44:	4922      	ldr	r1, [pc, #136]	@ (10050ed0 <NVMDB_CleanCheck+0xb8>)
10050e46:	0013      	movs	r3, r2
10050e48:	009b      	lsls	r3, r3, #2
10050e4a:	189b      	adds	r3, r3, r2
10050e4c:	009b      	lsls	r3, r3, #2
10050e4e:	18cb      	adds	r3, r1, r3
10050e50:	330c      	adds	r3, #12
10050e52:	8819      	ldrh	r1, [r3, #0]
10050e54:	1dfb      	adds	r3, r7, #7
10050e56:	781a      	ldrb	r2, [r3, #0]
10050e58:	481d      	ldr	r0, [pc, #116]	@ (10050ed0 <NVMDB_CleanCheck+0xb8>)
10050e5a:	0013      	movs	r3, r2
10050e5c:	009b      	lsls	r3, r3, #2
10050e5e:	189b      	adds	r3, r3, r2
10050e60:	009b      	lsls	r3, r3, #2
10050e62:	18c3      	adds	r3, r0, r3
10050e64:	3310      	adds	r3, #16
10050e66:	881b      	ldrh	r3, [r3, #0]
10050e68:	4299      	cmp	r1, r3
10050e6a:	d212      	bcs.n	10050e92 <NVMDB_CleanCheck+0x7a>
      {
        // Next time do not start from this db.
        // There may be time to clean another one if this one has not been successfully cleaned.
        db_start_index = i + 1;
10050e6c:	1dfb      	adds	r3, r7, #7
10050e6e:	781b      	ldrb	r3, [r3, #0]
10050e70:	3301      	adds	r3, #1
10050e72:	b2db      	uxtb	r3, r3
10050e74:	b25a      	sxtb	r2, r3
10050e76:	4b15      	ldr	r3, [pc, #84]	@ (10050ecc <NVMDB_CleanCheck+0xb4>)
10050e78:	701a      	strb	r2, [r3, #0]
        if(db_start_index == NUM_DB)
10050e7a:	4b14      	ldr	r3, [pc, #80]	@ (10050ecc <NVMDB_CleanCheck+0xb4>)
10050e7c:	781b      	ldrb	r3, [r3, #0]
10050e7e:	b25b      	sxtb	r3, r3
10050e80:	2b02      	cmp	r3, #2
10050e82:	d102      	bne.n	10050e8a <NVMDB_CleanCheck+0x72>
        {
          db_start_index = 0;
10050e84:	4b11      	ldr	r3, [pc, #68]	@ (10050ecc <NVMDB_CleanCheck+0xb4>)
10050e86:	2200      	movs	r2, #0
10050e88:	701a      	strb	r2, [r3, #0]
        }
        return i;
10050e8a:	1dfb      	adds	r3, r7, #7
10050e8c:	781b      	ldrb	r3, [r3, #0]
10050e8e:	b25b      	sxtb	r3, r3
10050e90:	e017      	b.n	10050ec2 <NVMDB_CleanCheck+0xaa>
      }
    }

    i++;
10050e92:	1dfb      	adds	r3, r7, #7
10050e94:	781a      	ldrb	r2, [r3, #0]
10050e96:	1dfb      	adds	r3, r7, #7
10050e98:	3201      	adds	r2, #1
10050e9a:	701a      	strb	r2, [r3, #0]
    if(i == NUM_DB)
10050e9c:	1dfb      	adds	r3, r7, #7
10050e9e:	781b      	ldrb	r3, [r3, #0]
10050ea0:	2b02      	cmp	r3, #2
10050ea2:	d102      	bne.n	10050eaa <NVMDB_CleanCheck+0x92>
    {
      i = 0;
10050ea4:	1dfb      	adds	r3, r7, #7
10050ea6:	2200      	movs	r2, #0
10050ea8:	701a      	strb	r2, [r3, #0]
    }
  }
  while(i != db_start_index);
10050eaa:	1dfb      	adds	r3, r7, #7
10050eac:	781b      	ldrb	r3, [r3, #0]
10050eae:	4a07      	ldr	r2, [pc, #28]	@ (10050ecc <NVMDB_CleanCheck+0xb4>)
10050eb0:	7812      	ldrb	r2, [r2, #0]
10050eb2:	b252      	sxtb	r2, r2
10050eb4:	4293      	cmp	r3, r2
10050eb6:	d1b7      	bne.n	10050e28 <NVMDB_CleanCheck+0x10>

  // All databases have been checked. We can start from first position next time (but not strictly needed).
  db_start_index = 0;
10050eb8:	4b04      	ldr	r3, [pc, #16]	@ (10050ecc <NVMDB_CleanCheck+0xb4>)
10050eba:	2200      	movs	r2, #0
10050ebc:	701a      	strb	r2, [r3, #0]

  return -1; // No db to clean
10050ebe:	2301      	movs	r3, #1
10050ec0:	425b      	negs	r3, r3
}
10050ec2:	0018      	movs	r0, r3
10050ec4:	46bd      	mov	sp, r7
10050ec6:	b002      	add	sp, #8
10050ec8:	bd80      	pop	{r7, pc}
10050eca:	46c0      	nop			@ (mov r8, r8)
10050ecc:	200022dc 	.word	0x200022dc
10050ed0:	200022b4 	.word	0x200022b4

10050ed4 <PKAMGR_Init>:

/** @defgroup PKA_Manager_Public_Functions Public Functions
* @{
*/
PKAMGR_ResultStatus PKAMGR_Init(void)
{
10050ed4:	b580      	push	{r7, lr}
10050ed6:	af00      	add	r7, sp, #0
    internalState = PKAMGR_STATE_IDLE;
10050ed8:	4b03      	ldr	r3, [pc, #12]	@ (10050ee8 <PKAMGR_Init+0x14>)
10050eda:	2201      	movs	r2, #1
10050edc:	601a      	str	r2, [r3, #0]

  return PKAMGR_SUCCESS;
10050ede:	2300      	movs	r3, #0
}
10050ee0:	0018      	movs	r0, r3
10050ee2:	46bd      	mov	sp, r7
10050ee4:	bd80      	pop	{r7, pc}
10050ee6:	46c0      	nop			@ (mov r8, r8)
10050ee8:	20002734 	.word	0x20002734

10050eec <aci_gap_profile_init>:
tBleStatus aci_gap_profile_init(uint8_t Role,
                                uint8_t Privacy_Type,
                                uint16_t *Dev_Name_Char_Handle,
                                uint16_t *Appearance_Char_Handle,
                                uint16_t *Periph_Pref_Conn_Param_Char_Handle)
{
10050eec:	b5f0      	push	{r4, r5, r6, r7, lr}
10050eee:	b087      	sub	sp, #28
10050ef0:	af00      	add	r7, sp, #0
10050ef2:	60ba      	str	r2, [r7, #8]
10050ef4:	607b      	str	r3, [r7, #4]
10050ef6:	240f      	movs	r4, #15
10050ef8:	193b      	adds	r3, r7, r4
10050efa:	1c02      	adds	r2, r0, #0
10050efc:	701a      	strb	r2, [r3, #0]
10050efe:	230e      	movs	r3, #14
10050f00:	18fb      	adds	r3, r7, r3
10050f02:	1c0a      	adds	r2, r1, #0
10050f04:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gap_srvc_handle;
  
  *Dev_Name_Char_Handle = 0x0000;
10050f06:	68bb      	ldr	r3, [r7, #8]
10050f08:	2200      	movs	r2, #0
10050f0a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle= 0x0000;
10050f0c:	687b      	ldr	r3, [r7, #4]
10050f0e:	2200      	movs	r2, #0
10050f10:	801a      	strh	r2, [r3, #0]
  *Periph_Pref_Conn_Param_Char_Handle = 0x0000;
10050f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10050f14:	2200      	movs	r2, #0
10050f16:	801a      	strh	r2, [r3, #0]
  
  if ((Role & (GAP_PERIPHERAL_ROLE | GAP_CENTRAL_ROLE)) != 0x0U)
10050f18:	193b      	adds	r3, r7, r4
10050f1a:	781b      	ldrb	r3, [r3, #0]
10050f1c:	2205      	movs	r2, #5
10050f1e:	4013      	ands	r3, r2
10050f20:	d046      	beq.n	10050fb0 <aci_gap_profile_init+0xc4>
  {
    /**
    * Register GAP service.
    * Device Name and Appearance Characteristics will be also registered.
    */
    ret = aci_gatt_srv_add_service(&gap_srvc);
10050f22:	2517      	movs	r5, #23
10050f24:	197c      	adds	r4, r7, r5
10050f26:	4b25      	ldr	r3, [pc, #148]	@ (10050fbc <aci_gap_profile_init+0xd0>)
10050f28:	0018      	movs	r0, r3
10050f2a:	f7fe f8c9 	bl	1004f0c0 <aci_gatt_srv_add_service>
10050f2e:	0003      	movs	r3, r0
10050f30:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
10050f32:	197b      	adds	r3, r7, r5
10050f34:	781b      	ldrb	r3, [r3, #0]
10050f36:	2b00      	cmp	r3, #0
10050f38:	d002      	beq.n	10050f40 <aci_gap_profile_init+0x54>
    {
      return ret;
10050f3a:	197b      	adds	r3, r7, r5
10050f3c:	781b      	ldrb	r3, [r3, #0]
10050f3e:	e038      	b.n	10050fb2 <aci_gap_profile_init+0xc6>
    }
    
    *Dev_Name_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[0U]);
10050f40:	4b1f      	ldr	r3, [pc, #124]	@ (10050fc0 <aci_gap_profile_init+0xd4>)
10050f42:	0018      	movs	r0, r3
10050f44:	f7fe f8e9 	bl	1004f11a <aci_gatt_srv_get_char_decl_handle>
10050f48:	0003      	movs	r3, r0
10050f4a:	001a      	movs	r2, r3
10050f4c:	68bb      	ldr	r3, [r7, #8]
10050f4e:	801a      	strh	r2, [r3, #0]
    *Appearance_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[1U]);
10050f50:	4b1c      	ldr	r3, [pc, #112]	@ (10050fc4 <aci_gap_profile_init+0xd8>)
10050f52:	0018      	movs	r0, r3
10050f54:	f7fe f8e1 	bl	1004f11a <aci_gatt_srv_get_char_decl_handle>
10050f58:	0003      	movs	r3, r0
10050f5a:	001a      	movs	r2, r3
10050f5c:	687b      	ldr	r3, [r7, #4]
10050f5e:	801a      	strh	r2, [r3, #0]
    
    gap_srvc_handle = aci_gatt_srv_get_service_handle(&gap_srvc);
10050f60:	2614      	movs	r6, #20
10050f62:	19bc      	adds	r4, r7, r6
10050f64:	4b15      	ldr	r3, [pc, #84]	@ (10050fbc <aci_gap_profile_init+0xd0>)
10050f66:	0018      	movs	r0, r3
10050f68:	f7fe f8b7 	bl	1004f0da <aci_gatt_srv_get_service_handle>
10050f6c:	0003      	movs	r3, r0
10050f6e:	8023      	strh	r3, [r4, #0]
      }
    }
    
    *Periph_Pref_Conn_Param_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[2U]);
#else
    *Periph_Pref_Conn_Param_Char_Handle = 0;
10050f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10050f72:	2200      	movs	r2, #0
10050f74:	801a      	strh	r2, [r3, #0]
#endif    
    
    if (Privacy_Type == 2U)
10050f76:	230e      	movs	r3, #14
10050f78:	18fb      	adds	r3, r7, r3
10050f7a:	781b      	ldrb	r3, [r3, #0]
10050f7c:	2b02      	cmp	r3, #2
10050f7e:	d111      	bne.n	10050fa4 <aci_gap_profile_init+0xb8>
    {
      /**
      * Register Central Address Resolution Characteristic.
      */
      ret = aci_gatt_srv_add_char(&gap_chrs[3U], gap_srvc_handle);
10050f80:	2517      	movs	r5, #23
10050f82:	197c      	adds	r4, r7, r5
10050f84:	19bb      	adds	r3, r7, r6
10050f86:	881a      	ldrh	r2, [r3, #0]
10050f88:	4b0f      	ldr	r3, [pc, #60]	@ (10050fc8 <aci_gap_profile_init+0xdc>)
10050f8a:	0011      	movs	r1, r2
10050f8c:	0018      	movs	r0, r3
10050f8e:	f7fe f8b1 	bl	1004f0f4 <aci_gatt_srv_add_char>
10050f92:	0003      	movs	r3, r0
10050f94:	7023      	strb	r3, [r4, #0]
      if (ret != BLE_STATUS_SUCCESS)
10050f96:	197b      	adds	r3, r7, r5
10050f98:	781b      	ldrb	r3, [r3, #0]
10050f9a:	2b00      	cmp	r3, #0
10050f9c:	d002      	beq.n	10050fa4 <aci_gap_profile_init+0xb8>
      {
        return ret;
10050f9e:	197b      	adds	r3, r7, r5
10050fa0:	781b      	ldrb	r3, [r3, #0]
10050fa2:	e006      	b.n	10050fb2 <aci_gap_profile_init+0xc6>
#endif /* CFG_BLE_GAP_ENCRYPTED_KEY_MATERIAL_CHARACTERISTIC */
    
    /**
    * Set default device name.
    */
    Gap_profile_set_dev_name(0U, sizeof(default_dev_name),
10050fa4:	4b09      	ldr	r3, [pc, #36]	@ (10050fcc <aci_gap_profile_init+0xe0>)
10050fa6:	001a      	movs	r2, r3
10050fa8:	2108      	movs	r1, #8
10050faa:	2000      	movs	r0, #0
10050fac:	f000 f810 	bl	10050fd0 <Gap_profile_set_dev_name>
                             (uint8_t *)default_dev_name);
    
  }
  
  return BLE_STATUS_SUCCESS;
10050fb0:	2300      	movs	r3, #0
}
10050fb2:	0018      	movs	r0, r3
10050fb4:	46bd      	mov	sp, r7
10050fb6:	b007      	add	sp, #28
10050fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10050fba:	46c0      	nop			@ (mov r8, r8)
10050fbc:	20002804 	.word	0x20002804
10050fc0:	20002750 	.word	0x20002750
10050fc4:	20002774 	.word	0x20002774
10050fc8:	200027bc 	.word	0x200027bc
10050fcc:	10069368 	.word	0x10069368

10050fd0 <Gap_profile_set_dev_name>:

tBleStatus Gap_profile_set_dev_name(uint16_t offset,
                                    uint16_t length,
                                    uint8_t *dev_name_p)
{
10050fd0:	b590      	push	{r4, r7, lr}
10050fd2:	b085      	sub	sp, #20
10050fd4:	af00      	add	r7, sp, #0
10050fd6:	603a      	str	r2, [r7, #0]
10050fd8:	1dbb      	adds	r3, r7, #6
10050fda:	1c02      	adds	r2, r0, #0
10050fdc:	801a      	strh	r2, [r3, #0]
10050fde:	1d3b      	adds	r3, r7, #4
10050fe0:	1c0a      	adds	r2, r1, #0
10050fe2:	801a      	strh	r2, [r3, #0]
    uint16_t handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[0U]) + 1U;
10050fe4:	4b0c      	ldr	r3, [pc, #48]	@ (10051018 <Gap_profile_set_dev_name+0x48>)
10050fe6:	0018      	movs	r0, r3
10050fe8:	f7fe f897 	bl	1004f11a <aci_gatt_srv_get_char_decl_handle>
10050fec:	0003      	movs	r3, r0
10050fee:	001a      	movs	r2, r3
10050ff0:	200e      	movs	r0, #14
10050ff2:	183b      	adds	r3, r7, r0
10050ff4:	3201      	adds	r2, #1
10050ff6:	801a      	strh	r2, [r3, #0]

    return Gap_profile_set_char_value(handle, offset, length, dev_name_p);
10050ff8:	683c      	ldr	r4, [r7, #0]
10050ffa:	1d3b      	adds	r3, r7, #4
10050ffc:	881a      	ldrh	r2, [r3, #0]
10050ffe:	1dbb      	adds	r3, r7, #6
10051000:	8819      	ldrh	r1, [r3, #0]
10051002:	183b      	adds	r3, r7, r0
10051004:	8818      	ldrh	r0, [r3, #0]
10051006:	0023      	movs	r3, r4
10051008:	f000 f82e 	bl	10051068 <Gap_profile_set_char_value>
1005100c:	0003      	movs	r3, r0
}
1005100e:	0018      	movs	r0, r3
10051010:	46bd      	mov	sp, r7
10051012:	b005      	add	sp, #20
10051014:	bd90      	pop	{r4, r7, pc}
10051016:	46c0      	nop			@ (mov r8, r8)
10051018:	20002750 	.word	0x20002750

1005101c <Gap_profile_set_appearance>:

tBleStatus Gap_profile_set_appearance(uint16_t offset,
                                      uint16_t length,
                                      uint8_t *appearance_p)
{
1005101c:	b590      	push	{r4, r7, lr}
1005101e:	b085      	sub	sp, #20
10051020:	af00      	add	r7, sp, #0
10051022:	603a      	str	r2, [r7, #0]
10051024:	1dbb      	adds	r3, r7, #6
10051026:	1c02      	adds	r2, r0, #0
10051028:	801a      	strh	r2, [r3, #0]
1005102a:	1d3b      	adds	r3, r7, #4
1005102c:	1c0a      	adds	r2, r1, #0
1005102e:	801a      	strh	r2, [r3, #0]
    uint16_t handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[1U]) + 1U;
10051030:	4b0c      	ldr	r3, [pc, #48]	@ (10051064 <Gap_profile_set_appearance+0x48>)
10051032:	0018      	movs	r0, r3
10051034:	f7fe f871 	bl	1004f11a <aci_gatt_srv_get_char_decl_handle>
10051038:	0003      	movs	r3, r0
1005103a:	001a      	movs	r2, r3
1005103c:	200e      	movs	r0, #14
1005103e:	183b      	adds	r3, r7, r0
10051040:	3201      	adds	r2, #1
10051042:	801a      	strh	r2, [r3, #0]

    return Gap_profile_set_char_value(handle, offset, length, appearance_p);
10051044:	683c      	ldr	r4, [r7, #0]
10051046:	1d3b      	adds	r3, r7, #4
10051048:	881a      	ldrh	r2, [r3, #0]
1005104a:	1dbb      	adds	r3, r7, #6
1005104c:	8819      	ldrh	r1, [r3, #0]
1005104e:	183b      	adds	r3, r7, r0
10051050:	8818      	ldrh	r0, [r3, #0]
10051052:	0023      	movs	r3, r4
10051054:	f000 f808 	bl	10051068 <Gap_profile_set_char_value>
10051058:	0003      	movs	r3, r0
}
1005105a:	0018      	movs	r0, r3
1005105c:	46bd      	mov	sp, r7
1005105e:	b005      	add	sp, #20
10051060:	bd90      	pop	{r4, r7, pc}
10051062:	46c0      	nop			@ (mov r8, r8)
10051064:	20002774 	.word	0x20002774

10051068 <Gap_profile_set_char_value>:

tBleStatus Gap_profile_set_char_value(uint16_t attr_h,
                                      uint16_t val_offset,
                                      uint16_t val_length,
                                      uint8_t *val_p)
{
10051068:	b5b0      	push	{r4, r5, r7, lr}
1005106a:	b086      	sub	sp, #24
1005106c:	af00      	add	r7, sp, #0
1005106e:	0004      	movs	r4, r0
10051070:	0008      	movs	r0, r1
10051072:	0011      	movs	r1, r2
10051074:	607b      	str	r3, [r7, #4]
10051076:	230e      	movs	r3, #14
10051078:	18fb      	adds	r3, r7, r3
1005107a:	1c22      	adds	r2, r4, #0
1005107c:	801a      	strh	r2, [r3, #0]
1005107e:	230c      	movs	r3, #12
10051080:	18fb      	adds	r3, r7, r3
10051082:	1c02      	adds	r2, r0, #0
10051084:	801a      	strh	r2, [r3, #0]
10051086:	230a      	movs	r3, #10
10051088:	18fb      	adds	r3, r7, r3
1005108a:	1c0a      	adds	r2, r1, #0
1005108c:	801a      	strh	r2, [r3, #0]
    uint16_t handle;

    /**
     * Search for GAP characteristic.
     */
    for (i = 0U; i < (sizeof(gap_chrs) / sizeof(gap_chrs[0U])); i++)
1005108e:	2317      	movs	r3, #23
10051090:	18fb      	adds	r3, r7, r3
10051092:	2200      	movs	r2, #0
10051094:	701a      	strb	r2, [r3, #0]
10051096:	e021      	b.n	100510dc <Gap_profile_set_char_value+0x74>
    {
        handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[i]);
10051098:	2317      	movs	r3, #23
1005109a:	18fb      	adds	r3, r7, r3
1005109c:	781a      	ldrb	r2, [r3, #0]
1005109e:	0013      	movs	r3, r2
100510a0:	00db      	lsls	r3, r3, #3
100510a2:	189b      	adds	r3, r3, r2
100510a4:	009b      	lsls	r3, r3, #2
100510a6:	4a43      	ldr	r2, [pc, #268]	@ (100511b4 <Gap_profile_set_char_value+0x14c>)
100510a8:	189b      	adds	r3, r3, r2
100510aa:	2514      	movs	r5, #20
100510ac:	197c      	adds	r4, r7, r5
100510ae:	0018      	movs	r0, r3
100510b0:	f7fe f833 	bl	1004f11a <aci_gatt_srv_get_char_decl_handle>
100510b4:	0003      	movs	r3, r0
100510b6:	8023      	strh	r3, [r4, #0]
        if ((handle != BLE_ATT_INVALID_ATTR_HANDLE) &&
100510b8:	197b      	adds	r3, r7, r5
100510ba:	881b      	ldrh	r3, [r3, #0]
100510bc:	2b00      	cmp	r3, #0
100510be:	d007      	beq.n	100510d0 <Gap_profile_set_char_value+0x68>
            ((handle + 1U) == attr_h))
100510c0:	197b      	adds	r3, r7, r5
100510c2:	881b      	ldrh	r3, [r3, #0]
100510c4:	1c5a      	adds	r2, r3, #1
100510c6:	230e      	movs	r3, #14
100510c8:	18fb      	adds	r3, r7, r3
100510ca:	881b      	ldrh	r3, [r3, #0]
        if ((handle != BLE_ATT_INVALID_ATTR_HANDLE) &&
100510cc:	429a      	cmp	r2, r3
100510ce:	d00b      	beq.n	100510e8 <Gap_profile_set_char_value+0x80>
    for (i = 0U; i < (sizeof(gap_chrs) / sizeof(gap_chrs[0U])); i++)
100510d0:	2117      	movs	r1, #23
100510d2:	187b      	adds	r3, r7, r1
100510d4:	781a      	ldrb	r2, [r3, #0]
100510d6:	187b      	adds	r3, r7, r1
100510d8:	3201      	adds	r2, #1
100510da:	701a      	strb	r2, [r3, #0]
100510dc:	2317      	movs	r3, #23
100510de:	18fb      	adds	r3, r7, r3
100510e0:	781b      	ldrb	r3, [r3, #0]
100510e2:	2b04      	cmp	r3, #4
100510e4:	d9d8      	bls.n	10051098 <Gap_profile_set_char_value+0x30>
100510e6:	e000      	b.n	100510ea <Gap_profile_set_char_value+0x82>
        {
            break;
100510e8:	46c0      	nop			@ (mov r8, r8)
        }
    }

    if (i == (sizeof(gap_chrs) / sizeof(gap_chrs[0U])))
100510ea:	2317      	movs	r3, #23
100510ec:	18fb      	adds	r3, r7, r3
100510ee:	781b      	ldrb	r3, [r3, #0]
100510f0:	2b05      	cmp	r3, #5
100510f2:	d101      	bne.n	100510f8 <Gap_profile_set_char_value+0x90>
    {
        /**
         * The given attribute handle is not registered for GAP service.
         */
        return BLE_STATUS_INVALID_PARAMS;
100510f4:	2312      	movs	r3, #18
100510f6:	e059      	b.n	100511ac <Gap_profile_set_char_value+0x144>
    }

    if ((val_offset + val_length) > gap_chrs[i].val_buffer_p->buffer_len)
100510f8:	230c      	movs	r3, #12
100510fa:	18fb      	adds	r3, r7, r3
100510fc:	881a      	ldrh	r2, [r3, #0]
100510fe:	230a      	movs	r3, #10
10051100:	18fb      	adds	r3, r7, r3
10051102:	881b      	ldrh	r3, [r3, #0]
10051104:	18d1      	adds	r1, r2, r3
10051106:	2317      	movs	r3, #23
10051108:	18fb      	adds	r3, r7, r3
1005110a:	781a      	ldrb	r2, [r3, #0]
1005110c:	4829      	ldr	r0, [pc, #164]	@ (100511b4 <Gap_profile_set_char_value+0x14c>)
1005110e:	0013      	movs	r3, r2
10051110:	00db      	lsls	r3, r3, #3
10051112:	189b      	adds	r3, r3, r2
10051114:	009b      	lsls	r3, r3, #2
10051116:	18c3      	adds	r3, r0, r3
10051118:	3320      	adds	r3, #32
1005111a:	681b      	ldr	r3, [r3, #0]
1005111c:	889b      	ldrh	r3, [r3, #4]
1005111e:	4299      	cmp	r1, r3
10051120:	dd01      	ble.n	10051126 <Gap_profile_set_char_value+0xbe>
    {
        /**
         * Invalid value length.
         */
        return BLE_STATUS_INVALID_PARAMS;
10051122:	2312      	movs	r3, #18
10051124:	e042      	b.n	100511ac <Gap_profile_set_char_value+0x144>
    }
    
    if(gap_chrs[i].val_buffer_p == NULL)
10051126:	2317      	movs	r3, #23
10051128:	18fb      	adds	r3, r7, r3
1005112a:	781a      	ldrb	r2, [r3, #0]
1005112c:	4921      	ldr	r1, [pc, #132]	@ (100511b4 <Gap_profile_set_char_value+0x14c>)
1005112e:	0013      	movs	r3, r2
10051130:	00db      	lsls	r3, r3, #3
10051132:	189b      	adds	r3, r3, r2
10051134:	009b      	lsls	r3, r3, #2
10051136:	18cb      	adds	r3, r1, r3
10051138:	3320      	adds	r3, #32
1005113a:	681b      	ldr	r3, [r3, #0]
1005113c:	2b00      	cmp	r3, #0
1005113e:	d101      	bne.n	10051144 <Gap_profile_set_char_value+0xdc>
    {
      /**
       * The given attribute handle is not related to a buffered characteristic.
       */
      return BLE_STATUS_INVALID_PARAMS;
10051140:	2312      	movs	r3, #18
10051142:	e033      	b.n	100511ac <Gap_profile_set_char_value+0x144>
    }

    /**
     * Write characteristic value.
     */
    memcpy(&gap_chrs[i].val_buffer_p->buffer_p[val_offset], val_p, val_length);
10051144:	2417      	movs	r4, #23
10051146:	193b      	adds	r3, r7, r4
10051148:	781a      	ldrb	r2, [r3, #0]
1005114a:	491a      	ldr	r1, [pc, #104]	@ (100511b4 <Gap_profile_set_char_value+0x14c>)
1005114c:	0013      	movs	r3, r2
1005114e:	00db      	lsls	r3, r3, #3
10051150:	189b      	adds	r3, r3, r2
10051152:	009b      	lsls	r3, r3, #2
10051154:	18cb      	adds	r3, r1, r3
10051156:	3320      	adds	r3, #32
10051158:	681b      	ldr	r3, [r3, #0]
1005115a:	689a      	ldr	r2, [r3, #8]
1005115c:	230c      	movs	r3, #12
1005115e:	18fb      	adds	r3, r7, r3
10051160:	881b      	ldrh	r3, [r3, #0]
10051162:	18d0      	adds	r0, r2, r3
10051164:	250a      	movs	r5, #10
10051166:	197b      	adds	r3, r7, r5
10051168:	881a      	ldrh	r2, [r3, #0]
1005116a:	687b      	ldr	r3, [r7, #4]
1005116c:	0019      	movs	r1, r3
1005116e:	f016 fcea 	bl	10067b46 <memcpy>
    if ((gap_chrs[i].val_buffer_p->op_flags & BLE_GATT_SRV_OP_VALUE_VAR_LENGTH_FLAG) != 0U)
10051172:	193b      	adds	r3, r7, r4
10051174:	781a      	ldrb	r2, [r3, #0]
10051176:	490f      	ldr	r1, [pc, #60]	@ (100511b4 <Gap_profile_set_char_value+0x14c>)
10051178:	0013      	movs	r3, r2
1005117a:	00db      	lsls	r3, r3, #3
1005117c:	189b      	adds	r3, r3, r2
1005117e:	009b      	lsls	r3, r3, #2
10051180:	18cb      	adds	r3, r1, r3
10051182:	3320      	adds	r3, #32
10051184:	681b      	ldr	r3, [r3, #0]
10051186:	781b      	ldrb	r3, [r3, #0]
10051188:	001a      	movs	r2, r3
1005118a:	2302      	movs	r3, #2
1005118c:	4013      	ands	r3, r2
1005118e:	d00c      	beq.n	100511aa <Gap_profile_set_char_value+0x142>
    {
        gap_chrs[i].val_buffer_p->val_len = val_length;
10051190:	193b      	adds	r3, r7, r4
10051192:	781a      	ldrb	r2, [r3, #0]
10051194:	4907      	ldr	r1, [pc, #28]	@ (100511b4 <Gap_profile_set_char_value+0x14c>)
10051196:	0013      	movs	r3, r2
10051198:	00db      	lsls	r3, r3, #3
1005119a:	189b      	adds	r3, r3, r2
1005119c:	009b      	lsls	r3, r3, #2
1005119e:	18cb      	adds	r3, r1, r3
100511a0:	3320      	adds	r3, #32
100511a2:	681b      	ldr	r3, [r3, #0]
100511a4:	197a      	adds	r2, r7, r5
100511a6:	8812      	ldrh	r2, [r2, #0]
100511a8:	805a      	strh	r2, [r3, #2]
    }

    return BLE_STATUS_SUCCESS;
100511aa:	2300      	movs	r3, #0
}
100511ac:	0018      	movs	r0, r3
100511ae:	46bd      	mov	sp, r7
100511b0:	b006      	add	sp, #24
100511b2:	bdb0      	pop	{r4, r5, r7, pc}
100511b4:	20002750 	.word	0x20002750

100511b8 <aci_gatt_srv_profile_init>:
    .chrs = {0, NULL},
};

tBleStatus aci_gatt_srv_profile_init(uint8_t Characteristics,
                                     uint16_t *Service_Changed_Handle)
{
100511b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100511ba:	b085      	sub	sp, #20
100511bc:	af00      	add	r7, sp, #0
100511be:	0002      	movs	r2, r0
100511c0:	6039      	str	r1, [r7, #0]
100511c2:	1dfb      	adds	r3, r7, #7
100511c4:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_srvc_handle;

  *Service_Changed_Handle = 0x0000;
100511c6:	683b      	ldr	r3, [r7, #0]
100511c8:	2200      	movs	r2, #0
100511ca:	801a      	strh	r2, [r3, #0]

  ret = aci_gatt_srv_add_service(&gatt_srvc);
100511cc:	250f      	movs	r5, #15
100511ce:	197c      	adds	r4, r7, r5
100511d0:	4b38      	ldr	r3, [pc, #224]	@ (100512b4 <aci_gatt_srv_profile_init+0xfc>)
100511d2:	0018      	movs	r0, r3
100511d4:	f7fd ff74 	bl	1004f0c0 <aci_gatt_srv_add_service>
100511d8:	0003      	movs	r3, r0
100511da:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
100511dc:	197b      	adds	r3, r7, r5
100511de:	781b      	ldrb	r3, [r3, #0]
100511e0:	2b00      	cmp	r3, #0
100511e2:	d002      	beq.n	100511ea <aci_gatt_srv_profile_init+0x32>
  {
    return ret;
100511e4:	197b      	adds	r3, r7, r5
100511e6:	781b      	ldrb	r3, [r3, #0]
100511e8:	e060      	b.n	100512ac <aci_gatt_srv_profile_init+0xf4>
  }

  gatt_srvc_handle = aci_gatt_srv_get_service_handle(&gatt_srvc);
100511ea:	260c      	movs	r6, #12
100511ec:	19bc      	adds	r4, r7, r6
100511ee:	4b31      	ldr	r3, [pc, #196]	@ (100512b4 <aci_gatt_srv_profile_init+0xfc>)
100511f0:	0018      	movs	r0, r3
100511f2:	f7fd ff72 	bl	1004f0da <aci_gatt_srv_get_service_handle>
100511f6:	0003      	movs	r3, r0
100511f8:	8023      	strh	r3, [r4, #0]

  if(Characteristics & GATT_INIT_SERVICE_CHANGED_BIT)
100511fa:	1dfb      	adds	r3, r7, #7
100511fc:	781b      	ldrb	r3, [r3, #0]
100511fe:	2201      	movs	r2, #1
10051200:	4013      	ands	r3, r2
10051202:	d011      	beq.n	10051228 <aci_gatt_srv_profile_init+0x70>
  {
    ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_srvc_changed_chr, gatt_srvc_handle);
10051204:	250f      	movs	r5, #15
10051206:	197c      	adds	r4, r7, r5
10051208:	19bb      	adds	r3, r7, r6
1005120a:	881a      	ldrh	r2, [r3, #0]
1005120c:	4b2a      	ldr	r3, [pc, #168]	@ (100512b8 <aci_gatt_srv_profile_init+0x100>)
1005120e:	0011      	movs	r1, r2
10051210:	0018      	movs	r0, r3
10051212:	f7fd ff6f 	bl	1004f0f4 <aci_gatt_srv_add_char>
10051216:	0003      	movs	r3, r0
10051218:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
1005121a:	197b      	adds	r3, r7, r5
1005121c:	781b      	ldrb	r3, [r3, #0]
1005121e:	2b00      	cmp	r3, #0
10051220:	d002      	beq.n	10051228 <aci_gatt_srv_profile_init+0x70>
    {
      return ret;
10051222:	197b      	adds	r3, r7, r5
10051224:	781b      	ldrb	r3, [r3, #0]
10051226:	e041      	b.n	100512ac <aci_gatt_srv_profile_init+0xf4>
    }
  }
  *Service_Changed_Handle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t*)&gatt_srvc_changed_chr);
10051228:	4b23      	ldr	r3, [pc, #140]	@ (100512b8 <aci_gatt_srv_profile_init+0x100>)
1005122a:	0018      	movs	r0, r3
1005122c:	f7fd ff75 	bl	1004f11a <aci_gatt_srv_get_char_decl_handle>
10051230:	0003      	movs	r3, r0
10051232:	001a      	movs	r2, r3
10051234:	683b      	ldr	r3, [r7, #0]
10051236:	801a      	strh	r2, [r3, #0]

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_clt_supp_feat_chr, gatt_srvc_handle);
10051238:	250f      	movs	r5, #15
1005123a:	197c      	adds	r4, r7, r5
1005123c:	230c      	movs	r3, #12
1005123e:	18fb      	adds	r3, r7, r3
10051240:	881a      	ldrh	r2, [r3, #0]
10051242:	4b1e      	ldr	r3, [pc, #120]	@ (100512bc <aci_gatt_srv_profile_init+0x104>)
10051244:	0011      	movs	r1, r2
10051246:	0018      	movs	r0, r3
10051248:	f7fd ff54 	bl	1004f0f4 <aci_gatt_srv_add_char>
1005124c:	0003      	movs	r3, r0
1005124e:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10051250:	197b      	adds	r3, r7, r5
10051252:	781b      	ldrb	r3, [r3, #0]
10051254:	2b00      	cmp	r3, #0
10051256:	d002      	beq.n	1005125e <aci_gatt_srv_profile_init+0xa6>
  {
    return ret;
10051258:	197b      	adds	r3, r7, r5
1005125a:	781b      	ldrb	r3, [r3, #0]
1005125c:	e026      	b.n	100512ac <aci_gatt_srv_profile_init+0xf4>
  }

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_db_hash_chr, gatt_srvc_handle);
1005125e:	250f      	movs	r5, #15
10051260:	197c      	adds	r4, r7, r5
10051262:	230c      	movs	r3, #12
10051264:	18fb      	adds	r3, r7, r3
10051266:	881a      	ldrh	r2, [r3, #0]
10051268:	4b15      	ldr	r3, [pc, #84]	@ (100512c0 <aci_gatt_srv_profile_init+0x108>)
1005126a:	0011      	movs	r1, r2
1005126c:	0018      	movs	r0, r3
1005126e:	f7fd ff41 	bl	1004f0f4 <aci_gatt_srv_add_char>
10051272:	0003      	movs	r3, r0
10051274:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10051276:	197b      	adds	r3, r7, r5
10051278:	781b      	ldrb	r3, [r3, #0]
1005127a:	2b00      	cmp	r3, #0
1005127c:	d002      	beq.n	10051284 <aci_gatt_srv_profile_init+0xcc>
  {
    return ret;
1005127e:	197b      	adds	r3, r7, r5
10051280:	781b      	ldrb	r3, [r3, #0]
10051282:	e013      	b.n	100512ac <aci_gatt_srv_profile_init+0xf4>
  }

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_srv_supp_feat_chr, gatt_srvc_handle);
10051284:	250f      	movs	r5, #15
10051286:	197c      	adds	r4, r7, r5
10051288:	230c      	movs	r3, #12
1005128a:	18fb      	adds	r3, r7, r3
1005128c:	881a      	ldrh	r2, [r3, #0]
1005128e:	4b0d      	ldr	r3, [pc, #52]	@ (100512c4 <aci_gatt_srv_profile_init+0x10c>)
10051290:	0011      	movs	r1, r2
10051292:	0018      	movs	r0, r3
10051294:	f7fd ff2e 	bl	1004f0f4 <aci_gatt_srv_add_char>
10051298:	0003      	movs	r3, r0
1005129a:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1005129c:	197b      	adds	r3, r7, r5
1005129e:	781b      	ldrb	r3, [r3, #0]
100512a0:	2b00      	cmp	r3, #0
100512a2:	d002      	beq.n	100512aa <aci_gatt_srv_profile_init+0xf2>
  {
    return ret;
100512a4:	197b      	adds	r3, r7, r5
100512a6:	781b      	ldrb	r3, [r3, #0]
100512a8:	e000      	b.n	100512ac <aci_gatt_srv_profile_init+0xf4>
  }

  return   BLE_STATUS_SUCCESS;
100512aa:	2300      	movs	r3, #0
}
100512ac:	0018      	movs	r0, r3
100512ae:	46bd      	mov	sp, r7
100512b0:	b005      	add	sp, #20
100512b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100512b4:	20002848 	.word	0x20002848
100512b8:	100693cc 	.word	0x100693cc
100512bc:	100693f0 	.word	0x100693f0
100512c0:	10069414 	.word	0x10069414
100512c4:	10069438 	.word	0x10069438

100512c8 <__NVIC_EnableIRQ>:
{
100512c8:	b580      	push	{r7, lr}
100512ca:	b082      	sub	sp, #8
100512cc:	af00      	add	r7, sp, #0
100512ce:	0002      	movs	r2, r0
100512d0:	1dfb      	adds	r3, r7, #7
100512d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100512d4:	1dfb      	adds	r3, r7, #7
100512d6:	781b      	ldrb	r3, [r3, #0]
100512d8:	2b7f      	cmp	r3, #127	@ 0x7f
100512da:	d809      	bhi.n	100512f0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100512dc:	1dfb      	adds	r3, r7, #7
100512de:	781b      	ldrb	r3, [r3, #0]
100512e0:	001a      	movs	r2, r3
100512e2:	231f      	movs	r3, #31
100512e4:	401a      	ands	r2, r3
100512e6:	4b04      	ldr	r3, [pc, #16]	@ (100512f8 <__NVIC_EnableIRQ+0x30>)
100512e8:	2101      	movs	r1, #1
100512ea:	4091      	lsls	r1, r2
100512ec:	000a      	movs	r2, r1
100512ee:	601a      	str	r2, [r3, #0]
}
100512f0:	46c0      	nop			@ (mov r8, r8)
100512f2:	46bd      	mov	sp, r7
100512f4:	b002      	add	sp, #8
100512f6:	bd80      	pop	{r7, pc}
100512f8:	e000e100 	.word	0xe000e100

100512fc <__NVIC_DisableIRQ>:
{
100512fc:	b580      	push	{r7, lr}
100512fe:	b082      	sub	sp, #8
10051300:	af00      	add	r7, sp, #0
10051302:	0002      	movs	r2, r0
10051304:	1dfb      	adds	r3, r7, #7
10051306:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10051308:	1dfb      	adds	r3, r7, #7
1005130a:	781b      	ldrb	r3, [r3, #0]
1005130c:	2b7f      	cmp	r3, #127	@ 0x7f
1005130e:	d810      	bhi.n	10051332 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10051310:	1dfb      	adds	r3, r7, #7
10051312:	781b      	ldrb	r3, [r3, #0]
10051314:	001a      	movs	r2, r3
10051316:	231f      	movs	r3, #31
10051318:	4013      	ands	r3, r2
1005131a:	4908      	ldr	r1, [pc, #32]	@ (1005133c <__NVIC_DisableIRQ+0x40>)
1005131c:	2201      	movs	r2, #1
1005131e:	409a      	lsls	r2, r3
10051320:	0013      	movs	r3, r2
10051322:	2280      	movs	r2, #128	@ 0x80
10051324:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
10051326:	f3bf 8f4f 	dsb	sy
}
1005132a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
1005132c:	f3bf 8f6f 	isb	sy
}
10051330:	46c0      	nop			@ (mov r8, r8)
}
10051332:	46c0      	nop			@ (mov r8, r8)
10051334:	46bd      	mov	sp, r7
10051336:	b002      	add	sp, #8
10051338:	bd80      	pop	{r7, pc}
1005133a:	46c0      	nop			@ (mov r8, r8)
1005133c:	e000e100 	.word	0xe000e100

10051340 <LL_PWR_IsSMPSReady>:
{
10051340:	b580      	push	{r7, lr}
10051342:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) == (PWR_SR2_SMPSRDY)) ? 1UL : 0UL);
10051344:	4b05      	ldr	r3, [pc, #20]	@ (1005135c <LL_PWR_IsSMPSReady+0x1c>)
10051346:	695b      	ldr	r3, [r3, #20]
10051348:	2204      	movs	r2, #4
1005134a:	4013      	ands	r3, r2
1005134c:	2b04      	cmp	r3, #4
1005134e:	d101      	bne.n	10051354 <LL_PWR_IsSMPSReady+0x14>
10051350:	2301      	movs	r3, #1
10051352:	e000      	b.n	10051356 <LL_PWR_IsSMPSReady+0x16>
10051354:	2300      	movs	r3, #0
}
10051356:	0018      	movs	r0, r3
10051358:	46bd      	mov	sp, r7
1005135a:	bd80      	pop	{r7, pc}
1005135c:	48500000 	.word	0x48500000

10051360 <LL_PWR_GetSMPSMode>:
{
10051360:	b580      	push	{r7, lr}
10051362:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(PWR->CR5, PWR_CR5_NOSMPS));
10051364:	4b03      	ldr	r3, [pc, #12]	@ (10051374 <LL_PWR_GetSMPSMode+0x14>)
10051366:	69da      	ldr	r2, [r3, #28]
10051368:	2380      	movs	r3, #128	@ 0x80
1005136a:	00db      	lsls	r3, r3, #3
1005136c:	4013      	ands	r3, r2
}
1005136e:	0018      	movs	r0, r3
10051370:	46bd      	mov	sp, r7
10051372:	bd80      	pop	{r7, pc}
10051374:	48500000 	.word	0x48500000

10051378 <LL_PWR_SetSMPSPrechargeMode>:
{
10051378:	b580      	push	{r7, lr}
1005137a:	b082      	sub	sp, #8
1005137c:	af00      	add	r7, sp, #0
1005137e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, mode);
10051380:	4b06      	ldr	r3, [pc, #24]	@ (1005139c <LL_PWR_SetSMPSPrechargeMode+0x24>)
10051382:	69db      	ldr	r3, [r3, #28]
10051384:	4a06      	ldr	r2, [pc, #24]	@ (100513a0 <LL_PWR_SetSMPSPrechargeMode+0x28>)
10051386:	4013      	ands	r3, r2
10051388:	0019      	movs	r1, r3
1005138a:	4b04      	ldr	r3, [pc, #16]	@ (1005139c <LL_PWR_SetSMPSPrechargeMode+0x24>)
1005138c:	687a      	ldr	r2, [r7, #4]
1005138e:	430a      	orrs	r2, r1
10051390:	61da      	str	r2, [r3, #28]
}
10051392:	46c0      	nop			@ (mov r8, r8)
10051394:	46bd      	mov	sp, r7
10051396:	b002      	add	sp, #8
10051398:	bd80      	pop	{r7, pc}
1005139a:	46c0      	nop			@ (mov r8, r8)
1005139c:	48500000 	.word	0x48500000
100513a0:	fffffdff 	.word	0xfffffdff

100513a4 <LL_PWR_IsEnabledSMPSPrechargeMode>:
{
100513a4:	b580      	push	{r7, lr}
100513a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR5, PWR_CR5_SMPSFBYP) == (PWR_CR5_SMPSFBYP)) ? 1UL : 0UL);
100513a8:	4b07      	ldr	r3, [pc, #28]	@ (100513c8 <LL_PWR_IsEnabledSMPSPrechargeMode+0x24>)
100513aa:	69da      	ldr	r2, [r3, #28]
100513ac:	2380      	movs	r3, #128	@ 0x80
100513ae:	009b      	lsls	r3, r3, #2
100513b0:	401a      	ands	r2, r3
100513b2:	2380      	movs	r3, #128	@ 0x80
100513b4:	009b      	lsls	r3, r3, #2
100513b6:	429a      	cmp	r2, r3
100513b8:	d101      	bne.n	100513be <LL_PWR_IsEnabledSMPSPrechargeMode+0x1a>
100513ba:	2301      	movs	r3, #1
100513bc:	e000      	b.n	100513c0 <LL_PWR_IsEnabledSMPSPrechargeMode+0x1c>
100513be:	2300      	movs	r3, #0
}
100513c0:	0018      	movs	r0, r3
100513c2:	46bd      	mov	sp, r7
100513c4:	bd80      	pop	{r7, pc}
100513c6:	46c0      	nop			@ (mov r8, r8)
100513c8:	48500000 	.word	0x48500000

100513cc <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
100513cc:	b580      	push	{r7, lr}
100513ce:	b082      	sub	sp, #8
100513d0:	af00      	add	r7, sp, #0
100513d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLVL, OutputVoltageLevel);
100513d4:	4b06      	ldr	r3, [pc, #24]	@ (100513f0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
100513d6:	69db      	ldr	r3, [r3, #28]
100513d8:	220f      	movs	r2, #15
100513da:	4393      	bics	r3, r2
100513dc:	0019      	movs	r1, r3
100513de:	4b04      	ldr	r3, [pc, #16]	@ (100513f0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
100513e0:	687a      	ldr	r2, [r7, #4]
100513e2:	430a      	orrs	r2, r1
100513e4:	61da      	str	r2, [r3, #28]
}
100513e6:	46c0      	nop			@ (mov r8, r8)
100513e8:	46bd      	mov	sp, r7
100513ea:	b002      	add	sp, #8
100513ec:	bd80      	pop	{r7, pc}
100513ee:	46c0      	nop			@ (mov r8, r8)
100513f0:	48500000 	.word	0x48500000

100513f4 <LL_SYSCFG_BLERXTX_EnableIT>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_EnableIT(uint32_t Signal)
{
100513f4:	b580      	push	{r7, lr}
100513f6:	b082      	sub	sp, #8
100513f8:	af00      	add	r7, sp, #0
100513fa:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->BLERXTX_IER, Signal);
100513fc:	2380      	movs	r3, #128	@ 0x80
100513fe:	05db      	lsls	r3, r3, #23
10051400:	6b99      	ldr	r1, [r3, #56]	@ 0x38
10051402:	2380      	movs	r3, #128	@ 0x80
10051404:	05db      	lsls	r3, r3, #23
10051406:	687a      	ldr	r2, [r7, #4]
10051408:	430a      	orrs	r2, r1
1005140a:	639a      	str	r2, [r3, #56]	@ 0x38
}
1005140c:	46c0      	nop			@ (mov r8, r8)
1005140e:	46bd      	mov	sp, r7
10051410:	b002      	add	sp, #8
10051412:	bd80      	pop	{r7, pc}

10051414 <LL_SYSCFG_BLERXTX_DisableIT>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_DisableIT(uint32_t Signal)
{
10051414:	b580      	push	{r7, lr}
10051416:	b082      	sub	sp, #8
10051418:	af00      	add	r7, sp, #0
1005141a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SYSCFG->BLERXTX_IER, Signal);
1005141c:	2380      	movs	r3, #128	@ 0x80
1005141e:	05db      	lsls	r3, r3, #23
10051420:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10051422:	687b      	ldr	r3, [r7, #4]
10051424:	43d9      	mvns	r1, r3
10051426:	2380      	movs	r3, #128	@ 0x80
10051428:	05db      	lsls	r3, r3, #23
1005142a:	400a      	ands	r2, r1
1005142c:	639a      	str	r2, [r3, #56]	@ 0x38
}
1005142e:	46c0      	nop			@ (mov r8, r8)
10051430:	46bd      	mov	sp, r7
10051432:	b002      	add	sp, #8
10051434:	bd80      	pop	{r7, pc}

10051436 <LL_SYSCFG_BLERXTX_SetType>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_SetType(uint8_t Type, uint32_t Signal)
{
10051436:	b580      	push	{r7, lr}
10051438:	b082      	sub	sp, #8
1005143a:	af00      	add	r7, sp, #0
1005143c:	0002      	movs	r2, r0
1005143e:	6039      	str	r1, [r7, #0]
10051440:	1dfb      	adds	r3, r7, #7
10051442:	701a      	strb	r2, [r3, #0]
  if (Type == LL_SYSCFG_BLERXTX_DET_TYPE_EDGE)
10051444:	1dfb      	adds	r3, r7, #7
10051446:	781b      	ldrb	r3, [r3, #0]
10051448:	2b00      	cmp	r3, #0
1005144a:	d109      	bne.n	10051460 <LL_SYSCFG_BLERXTX_SetType+0x2a>
  {
    CLEAR_BIT(SYSCFG->BLERXTX_DTR, Signal);
1005144c:	2380      	movs	r3, #128	@ 0x80
1005144e:	05db      	lsls	r3, r3, #23
10051450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10051452:	683b      	ldr	r3, [r7, #0]
10051454:	43d9      	mvns	r1, r3
10051456:	2380      	movs	r3, #128	@ 0x80
10051458:	05db      	lsls	r3, r3, #23
1005145a:	400a      	ands	r2, r1
1005145c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    SET_BIT(SYSCFG->BLERXTX_DTR, Signal);
  }
}
1005145e:	e007      	b.n	10051470 <LL_SYSCFG_BLERXTX_SetType+0x3a>
    SET_BIT(SYSCFG->BLERXTX_DTR, Signal);
10051460:	2380      	movs	r3, #128	@ 0x80
10051462:	05db      	lsls	r3, r3, #23
10051464:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10051466:	2380      	movs	r3, #128	@ 0x80
10051468:	05db      	lsls	r3, r3, #23
1005146a:	683a      	ldr	r2, [r7, #0]
1005146c:	430a      	orrs	r2, r1
1005146e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10051470:	46c0      	nop			@ (mov r8, r8)
10051472:	46bd      	mov	sp, r7
10051474:	b002      	add	sp, #8
10051476:	bd80      	pop	{r7, pc}

10051478 <LL_SYSCFG_BLERXTX_SetTrigger>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_SetTrigger(uint8_t Trigger, uint32_t Signal)
{
10051478:	b580      	push	{r7, lr}
1005147a:	b082      	sub	sp, #8
1005147c:	af00      	add	r7, sp, #0
1005147e:	0002      	movs	r2, r0
10051480:	6039      	str	r1, [r7, #0]
10051482:	1dfb      	adds	r3, r7, #7
10051484:	701a      	strb	r2, [r3, #0]
  switch (Trigger)
10051486:	1dfb      	adds	r3, r7, #7
10051488:	781b      	ldrb	r3, [r3, #0]
1005148a:	2b04      	cmp	r3, #4
1005148c:	d860      	bhi.n	10051550 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
1005148e:	009a      	lsls	r2, r3, #2
10051490:	4b31      	ldr	r3, [pc, #196]	@ (10051558 <LL_SYSCFG_BLERXTX_SetTrigger+0xe0>)
10051492:	18d3      	adds	r3, r2, r3
10051494:	681b      	ldr	r3, [r3, #0]
10051496:	469f      	mov	pc, r3
  {
    case LL_SYSCFG_BLERXTX_TRIGGER_BOTH_EDGE:
    {
      SET_BIT(SYSCFG->BLERXTX_IBER, Signal);
10051498:	2380      	movs	r3, #128	@ 0x80
1005149a:	05db      	lsls	r3, r3, #23
1005149c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
1005149e:	2380      	movs	r3, #128	@ 0x80
100514a0:	05db      	lsls	r3, r3, #23
100514a2:	683a      	ldr	r2, [r7, #0]
100514a4:	430a      	orrs	r2, r1
100514a6:	631a      	str	r2, [r3, #48]	@ 0x30
      CLEAR_BIT(SYSCFG->BLERXTX_IEVR, Signal);
100514a8:	2380      	movs	r3, #128	@ 0x80
100514aa:	05db      	lsls	r3, r3, #23
100514ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100514ae:	683b      	ldr	r3, [r7, #0]
100514b0:	43d9      	mvns	r1, r3
100514b2:	2380      	movs	r3, #128	@ 0x80
100514b4:	05db      	lsls	r3, r3, #23
100514b6:	400a      	ands	r2, r1
100514b8:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
100514ba:	e049      	b.n	10051550 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_RISING_EDGE:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
100514bc:	2380      	movs	r3, #128	@ 0x80
100514be:	05db      	lsls	r3, r3, #23
100514c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
100514c2:	683b      	ldr	r3, [r7, #0]
100514c4:	43d9      	mvns	r1, r3
100514c6:	2380      	movs	r3, #128	@ 0x80
100514c8:	05db      	lsls	r3, r3, #23
100514ca:	400a      	ands	r2, r1
100514cc:	631a      	str	r2, [r3, #48]	@ 0x30
      SET_BIT(SYSCFG->BLERXTX_IEVR, Signal);
100514ce:	2380      	movs	r3, #128	@ 0x80
100514d0:	05db      	lsls	r3, r3, #23
100514d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
100514d4:	2380      	movs	r3, #128	@ 0x80
100514d6:	05db      	lsls	r3, r3, #23
100514d8:	683a      	ldr	r2, [r7, #0]
100514da:	430a      	orrs	r2, r1
100514dc:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
100514de:	e037      	b.n	10051550 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_FALLING_EDGE:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
100514e0:	2380      	movs	r3, #128	@ 0x80
100514e2:	05db      	lsls	r3, r3, #23
100514e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
100514e6:	683b      	ldr	r3, [r7, #0]
100514e8:	43d9      	mvns	r1, r3
100514ea:	2380      	movs	r3, #128	@ 0x80
100514ec:	05db      	lsls	r3, r3, #23
100514ee:	400a      	ands	r2, r1
100514f0:	631a      	str	r2, [r3, #48]	@ 0x30
      CLEAR_BIT(SYSCFG->BLERXTX_IEVR, Signal);
100514f2:	2380      	movs	r3, #128	@ 0x80
100514f4:	05db      	lsls	r3, r3, #23
100514f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100514f8:	683b      	ldr	r3, [r7, #0]
100514fa:	43d9      	mvns	r1, r3
100514fc:	2380      	movs	r3, #128	@ 0x80
100514fe:	05db      	lsls	r3, r3, #23
10051500:	400a      	ands	r2, r1
10051502:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
10051504:	e024      	b.n	10051550 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_LOW_LEVEL:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
10051506:	2380      	movs	r3, #128	@ 0x80
10051508:	05db      	lsls	r3, r3, #23
1005150a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1005150c:	683b      	ldr	r3, [r7, #0]
1005150e:	43d9      	mvns	r1, r3
10051510:	2380      	movs	r3, #128	@ 0x80
10051512:	05db      	lsls	r3, r3, #23
10051514:	400a      	ands	r2, r1
10051516:	631a      	str	r2, [r3, #48]	@ 0x30
      CLEAR_BIT(SYSCFG->BLERXTX_IEVR, Signal);
10051518:	2380      	movs	r3, #128	@ 0x80
1005151a:	05db      	lsls	r3, r3, #23
1005151c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1005151e:	683b      	ldr	r3, [r7, #0]
10051520:	43d9      	mvns	r1, r3
10051522:	2380      	movs	r3, #128	@ 0x80
10051524:	05db      	lsls	r3, r3, #23
10051526:	400a      	ands	r2, r1
10051528:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
1005152a:	e011      	b.n	10051550 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_HIGH_LEVEL:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
1005152c:	2380      	movs	r3, #128	@ 0x80
1005152e:	05db      	lsls	r3, r3, #23
10051530:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10051532:	683b      	ldr	r3, [r7, #0]
10051534:	43d9      	mvns	r1, r3
10051536:	2380      	movs	r3, #128	@ 0x80
10051538:	05db      	lsls	r3, r3, #23
1005153a:	400a      	ands	r2, r1
1005153c:	631a      	str	r2, [r3, #48]	@ 0x30
      SET_BIT(SYSCFG->BLERXTX_IEVR, Signal);
1005153e:	2380      	movs	r3, #128	@ 0x80
10051540:	05db      	lsls	r3, r3, #23
10051542:	6b59      	ldr	r1, [r3, #52]	@ 0x34
10051544:	2380      	movs	r3, #128	@ 0x80
10051546:	05db      	lsls	r3, r3, #23
10051548:	683a      	ldr	r2, [r7, #0]
1005154a:	430a      	orrs	r2, r1
1005154c:	635a      	str	r2, [r3, #52]	@ 0x34
    }
  }
}
1005154e:	e7ff      	b.n	10051550 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
10051550:	46c0      	nop			@ (mov r8, r8)
10051552:	46bd      	mov	sp, r7
10051554:	b002      	add	sp, #8
10051556:	bd80      	pop	{r7, pc}
10051558:	1006945c 	.word	0x1006945c

1005155c <LL_SYSCFG_BLERXTX_IsInterruptPending>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSCFG_BLERXTX_IsInterruptPending(uint32_t Signal)
{
1005155c:	b580      	push	{r7, lr}
1005155e:	b082      	sub	sp, #8
10051560:	af00      	add	r7, sp, #0
10051562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SYSCFG->BLERXTX_ISCR, Signal) == (Signal)) ? 1UL : 0UL);
10051564:	2380      	movs	r3, #128	@ 0x80
10051566:	05db      	lsls	r3, r3, #23
10051568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1005156a:	687a      	ldr	r2, [r7, #4]
1005156c:	4013      	ands	r3, r2
1005156e:	687a      	ldr	r2, [r7, #4]
10051570:	429a      	cmp	r2, r3
10051572:	d101      	bne.n	10051578 <LL_SYSCFG_BLERXTX_IsInterruptPending+0x1c>
10051574:	2301      	movs	r3, #1
10051576:	e000      	b.n	1005157a <LL_SYSCFG_BLERXTX_IsInterruptPending+0x1e>
10051578:	2300      	movs	r3, #0
}
1005157a:	0018      	movs	r0, r3
1005157c:	46bd      	mov	sp, r7
1005157e:	b002      	add	sp, #8
10051580:	bd80      	pop	{r7, pc}

10051582 <LL_SYSCFG_BLERXTX_ClearInterrupt>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_ClearInterrupt(uint32_t Signal)
{
10051582:	b580      	push	{r7, lr}
10051584:	b082      	sub	sp, #8
10051586:	af00      	add	r7, sp, #0
10051588:	6078      	str	r0, [r7, #4]
  WRITE_REG(SYSCFG->BLERXTX_ISCR, Signal);
1005158a:	2380      	movs	r3, #128	@ 0x80
1005158c:	05db      	lsls	r3, r3, #23
1005158e:	687a      	ldr	r2, [r7, #4]
10051590:	63da      	str	r2, [r3, #60]	@ 0x3c
}
10051592:	46c0      	nop			@ (mov r8, r8)
10051594:	46bd      	mov	sp, r7
10051596:	b002      	add	sp, #8
10051598:	bd80      	pop	{r7, pc}
	...

1005159c <LL_APB0_GRP1_EnableClock>:
{
1005159c:	b580      	push	{r7, lr}
1005159e:	b084      	sub	sp, #16
100515a0:	af00      	add	r7, sp, #0
100515a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
100515a4:	4b07      	ldr	r3, [pc, #28]	@ (100515c4 <LL_APB0_GRP1_EnableClock+0x28>)
100515a6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
100515a8:	4b06      	ldr	r3, [pc, #24]	@ (100515c4 <LL_APB0_GRP1_EnableClock+0x28>)
100515aa:	687a      	ldr	r2, [r7, #4]
100515ac:	430a      	orrs	r2, r1
100515ae:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
100515b0:	4b04      	ldr	r3, [pc, #16]	@ (100515c4 <LL_APB0_GRP1_EnableClock+0x28>)
100515b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
100515b4:	687a      	ldr	r2, [r7, #4]
100515b6:	4013      	ands	r3, r2
100515b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100515ba:	68fb      	ldr	r3, [r7, #12]
}
100515bc:	46c0      	nop			@ (mov r8, r8)
100515be:	46bd      	mov	sp, r7
100515c0:	b004      	add	sp, #16
100515c2:	bd80      	pop	{r7, pc}
100515c4:	48400000 	.word	0x48400000

100515c8 <RADIO_GetMaxPALevel>:

  return pa_level_table[PA_Level];
}

uint8_t RADIO_GetMaxPALevel(void)
{
100515c8:	b580      	push	{r7, lr}
100515ca:	af00      	add	r7, sp, #0
  return HP_TX_POWER_LEVELS - 1;
100515cc:	231f      	movs	r3, #31
}
100515ce:	0018      	movs	r0, r3
100515d0:	46bd      	mov	sp, r7
100515d2:	bd80      	pop	{r7, pc}

100515d4 <RADIO_GetDefaultPALevel>:

uint8_t RADIO_GetDefaultPALevel(void)
{
100515d4:	b580      	push	{r7, lr}
100515d6:	af00      	add	r7, sp, #0
  return DEFAULT_TX_PA_LEVEL;
100515d8:	231f      	movs	r3, #31
}
100515da:	0018      	movs	r0, r3
100515dc:	46bd      	mov	sp, r7
100515de:	bd80      	pop	{r7, pc}

100515e0 <RADIO_SetHighPower>:
        *Max_Tx_Power = MAX_TX_POWER_LOW;
    }
}

void RADIO_SetHighPower(FunctionalState state)
{
100515e0:	b580      	push	{r7, lr}
100515e2:	b082      	sub	sp, #8
100515e4:	af00      	add	r7, sp, #0
100515e6:	0002      	movs	r2, r0
100515e8:	1dfb      	adds	r3, r7, #7
100515ea:	701a      	strb	r2, [r3, #0]
  if(state != DISABLE)
100515ec:	1dfb      	adds	r3, r7, #7
100515ee:	781b      	ldrb	r3, [r3, #0]
100515f0:	2b00      	cmp	r3, #0
100515f2:	d01d      	beq.n	10051630 <RADIO_SetHighPower+0x50>
  {
    if(high_power == FALSE)
100515f4:	4b2d      	ldr	r3, [pc, #180]	@ (100516ac <RADIO_SetHighPower+0xcc>)
100515f6:	781b      	ldrb	r3, [r3, #0]
100515f8:	2b00      	cmp	r3, #0
100515fa:	d129      	bne.n	10051650 <RADIO_SetHighPower+0x70>
    {
      high_power = TRUE;
100515fc:	4b2b      	ldr	r3, [pc, #172]	@ (100516ac <RADIO_SetHighPower+0xcc>)
100515fe:	2201      	movs	r2, #1
10051600:	701a      	strb	r2, [r3, #0]
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
      LL_APB0_GRP1_EnableClock(LL_APB0_GRP1_PERIPH_SYSCFG);
10051602:	2380      	movs	r3, #128	@ 0x80
10051604:	005b      	lsls	r3, r3, #1
10051606:	0018      	movs	r0, r3
10051608:	f7ff ffc8 	bl	1005159c <LL_APB0_GRP1_EnableClock>
      LL_SYSCFG_BLERXTX_SetTrigger(LL_SYSCFG_BLERXTX_TRIGGER_BOTH_EDGE, LL_SYSCFG_BLE_TX_EVENT);
1005160c:	2101      	movs	r1, #1
1005160e:	2002      	movs	r0, #2
10051610:	f7ff ff32 	bl	10051478 <LL_SYSCFG_BLERXTX_SetTrigger>
      LL_SYSCFG_BLERXTX_SetType(LL_SYSCFG_BLERXTX_DET_TYPE_EDGE, LL_SYSCFG_BLE_TX_EVENT);
10051614:	2101      	movs	r1, #1
10051616:	2000      	movs	r0, #0
10051618:	f7ff ff0d 	bl	10051436 <LL_SYSCFG_BLERXTX_SetType>
      LL_SYSCFG_BLERXTX_EnableIT(LL_SYSCFG_BLE_TX_EVENT);
1005161c:	2001      	movs	r0, #1
1005161e:	f7ff fee9 	bl	100513f4 <LL_SYSCFG_BLERXTX_EnableIT>
      LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
10051622:	2001      	movs	r0, #1
10051624:	f7ff ffad 	bl	10051582 <LL_SYSCFG_BLERXTX_ClearInterrupt>
      NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
10051628:	2019      	movs	r0, #25
1005162a:	f7ff fe4d 	bl	100512c8 <__NVIC_EnableIRQ>
1005162e:	e00f      	b.n	10051650 <RADIO_SetHighPower+0x70>
#endif
    }
  }
  else
  {
    if(high_power == TRUE)
10051630:	4b1e      	ldr	r3, [pc, #120]	@ (100516ac <RADIO_SetHighPower+0xcc>)
10051632:	781b      	ldrb	r3, [r3, #0]
10051634:	2b01      	cmp	r3, #1
10051636:	d10b      	bne.n	10051650 <RADIO_SetHighPower+0x70>
    {
      high_power = FALSE;
10051638:	4b1c      	ldr	r3, [pc, #112]	@ (100516ac <RADIO_SetHighPower+0xcc>)
1005163a:	2200      	movs	r2, #0
1005163c:	701a      	strb	r2, [r3, #0]
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
      LL_SYSCFG_BLERXTX_DisableIT(LL_SYSCFG_BLE_TX_EVENT);
1005163e:	2001      	movs	r0, #1
10051640:	f7ff fee8 	bl	10051414 <LL_SYSCFG_BLERXTX_DisableIT>
      NVIC_DisableIRQ(RADIO_TXRX_SEQ_IRQn);
10051644:	2019      	movs	r0, #25
10051646:	f7ff fe59 	bl	100512fc <__NVIC_DisableIRQ>
      LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
1005164a:	2001      	movs	r0, #1
1005164c:	f7ff ff99 	bl	10051582 <LL_SYSCFG_BLERXTX_ClearInterrupt>
#endif
    }
  }

  if (LL_PWR_IsEnabledSMPSPrechargeMode() || (LL_PWR_GetSMPSMode() == LL_PWR_NO_SMPS))
10051650:	f7ff fea8 	bl	100513a4 <LL_PWR_IsEnabledSMPSPrechargeMode>
10051654:	1e03      	subs	r3, r0, #0
10051656:	d124      	bne.n	100516a2 <RADIO_SetHighPower+0xc2>
10051658:	f7ff fe82 	bl	10051360 <LL_PWR_GetSMPSMode>
1005165c:	0002      	movs	r2, r0
1005165e:	2380      	movs	r3, #128	@ 0x80
10051660:	00db      	lsls	r3, r3, #3
10051662:	429a      	cmp	r2, r3
10051664:	d01d      	beq.n	100516a2 <RADIO_SetHighPower+0xc2>
    return;

  /* Bypass SMPS */
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_SMPS_PRECHARGE);
10051666:	2380      	movs	r3, #128	@ 0x80
10051668:	009b      	lsls	r3, r3, #2
1005166a:	0018      	movs	r0, r3
1005166c:	f7ff fe84 	bl	10051378 <LL_PWR_SetSMPSPrechargeMode>
  while(LL_PWR_IsSMPSReady());
10051670:	46c0      	nop			@ (mov r8, r8)
10051672:	f7ff fe65 	bl	10051340 <LL_PWR_IsSMPSReady>
10051676:	1e03      	subs	r3, r0, #0
10051678:	d1fb      	bne.n	10051672 <RADIO_SetHighPower+0x92>
  /* Change level */
  if(state != DISABLE)
1005167a:	1dfb      	adds	r3, r7, #7
1005167c:	781b      	ldrb	r3, [r3, #0]
1005167e:	2b00      	cmp	r3, #0
10051680:	d003      	beq.n	1005168a <RADIO_SetHighPower+0xaa>
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V90);
10051682:	200e      	movs	r0, #14
10051684:	f7ff fea2 	bl	100513cc <LL_PWR_SMPS_SetOutputVoltageLevel>
10051688:	e002      	b.n	10051690 <RADIO_SetHighPower+0xb0>
  }
  else
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V40);
1005168a:	2004      	movs	r0, #4
1005168c:	f7ff fe9e 	bl	100513cc <LL_PWR_SMPS_SetOutputVoltageLevel>
  }
  /* Disable bypass*/
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_NO_SMPS_PRECHARGE);
10051690:	2000      	movs	r0, #0
10051692:	f7ff fe71 	bl	10051378 <LL_PWR_SetSMPSPrechargeMode>
  while(!LL_PWR_IsSMPSReady());
10051696:	46c0      	nop			@ (mov r8, r8)
10051698:	f7ff fe52 	bl	10051340 <LL_PWR_IsSMPSReady>
1005169c:	1e03      	subs	r3, r0, #0
1005169e:	d0fb      	beq.n	10051698 <RADIO_SetHighPower+0xb8>
100516a0:	e000      	b.n	100516a4 <RADIO_SetHighPower+0xc4>
    return;
100516a2:	46c0      	nop			@ (mov r8, r8)
}
100516a4:	46bd      	mov	sp, r7
100516a6:	b002      	add	sp, #8
100516a8:	bd80      	pop	{r7, pc}
100516aa:	46c0      	nop			@ (mov r8, r8)
100516ac:	20002327 	.word	0x20002327

100516b0 <HAL_RADIO_TxRxSeqCallback>:

void HAL_RADIO_TxRxSeqCallback(void)
{
100516b0:	b580      	push	{r7, lr}
100516b2:	af00      	add	r7, sp, #0
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
  if(high_power == FALSE)
100516b4:	4b16      	ldr	r3, [pc, #88]	@ (10051710 <HAL_RADIO_TxRxSeqCallback+0x60>)
100516b6:	781b      	ldrb	r3, [r3, #0]
100516b8:	2b00      	cmp	r3, #0
100516ba:	d025      	beq.n	10051708 <HAL_RADIO_TxRxSeqCallback+0x58>
    return;

  if(LL_SYSCFG_BLERXTX_IsInterruptPending(LL_SYSCFG_BLE_TX_EVENT)){
100516bc:	2001      	movs	r0, #1
100516be:	f7ff ff4d 	bl	1005155c <LL_SYSCFG_BLERXTX_IsInterruptPending>
100516c2:	1e03      	subs	r3, r0, #0
100516c4:	d021      	beq.n	1005170a <HAL_RADIO_TxRxSeqCallback+0x5a>
    if(RRM->FSM_STATUS_DIG_OUT & RRM_FSM_STATUS_DIG_OUT_STATUS_4)
100516c6:	4a13      	ldr	r2, [pc, #76]	@ (10051714 <HAL_RADIO_TxRxSeqCallback+0x64>)
100516c8:	23a6      	movs	r3, #166	@ 0xa6
100516ca:	009b      	lsls	r3, r3, #2
100516cc:	58d3      	ldr	r3, [r2, r3]
100516ce:	2210      	movs	r2, #16
100516d0:	4013      	ands	r3, r2
100516d2:	d00a      	beq.n	100516ea <HAL_RADIO_TxRxSeqCallback+0x3a>
    {
      // Rising edge
      MODIFY_REG_FIELD(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS, 1);
100516d4:	4a0f      	ldr	r2, [pc, #60]	@ (10051714 <HAL_RADIO_TxRxSeqCallback+0x64>)
100516d6:	2395      	movs	r3, #149	@ 0x95
100516d8:	009b      	lsls	r3, r3, #2
100516da:	58d3      	ldr	r3, [r2, r3]
100516dc:	490d      	ldr	r1, [pc, #52]	@ (10051714 <HAL_RADIO_TxRxSeqCallback+0x64>)
100516de:	2202      	movs	r2, #2
100516e0:	431a      	orrs	r2, r3
100516e2:	2395      	movs	r3, #149	@ 0x95
100516e4:	009b      	lsls	r3, r3, #2
100516e6:	50ca      	str	r2, [r1, r3]
100516e8:	e00a      	b.n	10051700 <HAL_RADIO_TxRxSeqCallback+0x50>
    }
    else
    {
      // Falling edge
      MODIFY_REG_FIELD(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS, 0);
100516ea:	4a0a      	ldr	r2, [pc, #40]	@ (10051714 <HAL_RADIO_TxRxSeqCallback+0x64>)
100516ec:	2395      	movs	r3, #149	@ 0x95
100516ee:	009b      	lsls	r3, r3, #2
100516f0:	58d3      	ldr	r3, [r2, r3]
100516f2:	4908      	ldr	r1, [pc, #32]	@ (10051714 <HAL_RADIO_TxRxSeqCallback+0x64>)
100516f4:	2202      	movs	r2, #2
100516f6:	4393      	bics	r3, r2
100516f8:	001a      	movs	r2, r3
100516fa:	2395      	movs	r3, #149	@ 0x95
100516fc:	009b      	lsls	r3, r3, #2
100516fe:	50ca      	str	r2, [r1, r3]
    }
    LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
10051700:	2001      	movs	r0, #1
10051702:	f7ff ff3e 	bl	10051582 <LL_SYSCFG_BLERXTX_ClearInterrupt>
10051706:	e000      	b.n	1005170a <HAL_RADIO_TxRxSeqCallback+0x5a>
    return;
10051708:	46c0      	nop			@ (mov r8, r8)
  }
#endif
}
1005170a:	46bd      	mov	sp, r7
1005170c:	bd80      	pop	{r7, pc}
1005170e:	46c0      	nop			@ (mov r8, r8)
10051710:	20002327 	.word	0x20002327
10051714:	60001400 	.word	0x60001400

10051718 <LL_SYSCFG_GetDeviceRevision>:
{
10051718:	b580      	push	{r7, lr}
1005171a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_REVISION) >> SYSCFG_DIE_ID_REVISION_Pos);
1005171c:	2380      	movs	r3, #128	@ 0x80
1005171e:	05db      	lsls	r3, r3, #23
10051720:	681b      	ldr	r3, [r3, #0]
10051722:	220f      	movs	r2, #15
10051724:	4013      	ands	r3, r2
}
10051726:	0018      	movs	r0, r3
10051728:	46bd      	mov	sp, r7
1005172a:	bd80      	pop	{r7, pc}

1005172c <LL_SYSCFG_GetDeviceVersion>:
{
1005172c:	b580      	push	{r7, lr}
1005172e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_VERSION) >> SYSCFG_DIE_ID_VERSION_Pos);
10051730:	2380      	movs	r3, #128	@ 0x80
10051732:	05db      	lsls	r3, r3, #23
10051734:	681b      	ldr	r3, [r3, #0]
10051736:	091b      	lsrs	r3, r3, #4
10051738:	220f      	movs	r2, #15
1005173a:	4013      	ands	r3, r2
}
1005173c:	0018      	movs	r0, r3
1005173e:	46bd      	mov	sp, r7
10051740:	bd80      	pop	{r7, pc}

10051742 <LL_SYSCFG_GetDeviceJTAG_ID>:
{
10051742:	b580      	push	{r7, lr}
10051744:	af00      	add	r7, sp, #0
  return (uint32_t)READ_REG(SYSCFG->JTAG_ID);
10051746:	2380      	movs	r3, #128	@ 0x80
10051748:	05db      	lsls	r3, r3, #23
1005174a:	685b      	ldr	r3, [r3, #4]
}
1005174c:	0018      	movs	r0, r3
1005174e:	46bd      	mov	sp, r7
10051750:	bd80      	pop	{r7, pc}
	...

10051754 <LL_GetFlashSize>:
    * @note   This bitfield indicates the words number of the device Flash memory expressed.
    *         As an example, 0x7FFF corresponds to 128 Kbytes.
    * @retval FLASH_SIZE[15:0]: Flash memory size
    */
__STATIC_INLINE uint32_t LL_GetFlashSize(void)
{
10051754:	b580      	push	{r7, lr}
10051756:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)FLASHSIZE_BASE_ADDRESS)) & 0x0000FFFFUL);
10051758:	4b03      	ldr	r3, [pc, #12]	@ (10051768 <LL_GetFlashSize+0x14>)
1005175a:	681b      	ldr	r3, [r3, #0]
1005175c:	041b      	lsls	r3, r3, #16
1005175e:	0c1b      	lsrs	r3, r3, #16
}
10051760:	0018      	movs	r0, r3
10051762:	46bd      	mov	sp, r7
10051764:	bd80      	pop	{r7, pc}
10051766:	46c0      	nop			@ (mov r8, r8)
10051768:	40001014 	.word	0x40001014

1005176c <LL_GetRAMSize>:
    * @arg LL_UTILS_RAMSIZE_32K
    * @arg LL_UTILS_RAMSIZE_48K
    * @arg LL_UTILS_RAMSIZE_64K
    */
  __STATIC_INLINE uint32_t LL_GetRAMSize(void)
  {
1005176c:	b580      	push	{r7, lr}
1005176e:	b082      	sub	sp, #8
10051770:	af00      	add	r7, sp, #0

    if (tmpreg == 0) {
      tmpreg = LL_UTILS_RAMSIZE_32K;
    }
#else
    tmpreg = LL_UTILS_RAMSIZE_24K;
10051772:	2300      	movs	r3, #0
10051774:	607b      	str	r3, [r7, #4]
#endif
    
    return tmpreg;
10051776:	687b      	ldr	r3, [r7, #4]
  }
10051778:	0018      	movs	r0, r3
1005177a:	46bd      	mov	sp, r7
1005177c:	b002      	add	sp, #8
1005177e:	bd80      	pop	{r7, pc}

10051780 <GetPartInfo>:
/* Private variables ---------------------------------------------------------*/

/*---------------------------------------------------------------------------*/

void GetPartInfo(PartInfoType *partInfo)
{
10051780:	b580      	push	{r7, lr}
10051782:	b084      	sub	sp, #16
10051784:	af00      	add	r7, sp, #0
10051786:	6078      	str	r0, [r7, #4]
  uint32_t jtag_id;

  partInfo->die_id = DIE_SW_ID_UNKOWN;
10051788:	687b      	ldr	r3, [r7, #4]
1005178a:	22ff      	movs	r2, #255	@ 0xff
1005178c:	701a      	strb	r2, [r3, #0]

  jtag_id = LL_SYSCFG_GetDeviceJTAG_ID();
1005178e:	f7ff ffd8 	bl	10051742 <LL_SYSCFG_GetDeviceJTAG_ID>
10051792:	0003      	movs	r3, r0
10051794:	60fb      	str	r3, [r7, #12]
  if(jtag_id == JTAG_ID_CODE_STM32WB07XX)
  {
    partInfo->die_id = DIE_SW_ID_STM32WB07XX;
  }
#elif defined(STM32WB05)
  if(jtag_id == JTAG_ID_CODE_STM32WB05XX)
10051796:	68fb      	ldr	r3, [r7, #12]
10051798:	4a18      	ldr	r2, [pc, #96]	@ (100517fc <GetPartInfo+0x7c>)
1005179a:	4293      	cmp	r3, r2
1005179c:	d102      	bne.n	100517a4 <GetPartInfo+0x24>
  {
    partInfo->die_id = DIE_SW_ID_STM32WB05XX;
1005179e:	687b      	ldr	r3, [r7, #4]
100517a0:	2205      	movs	r2, #5
100517a2:	701a      	strb	r2, [r3, #0]
  }
#endif

  partInfo->die_major     =  LL_SYSCFG_GetDeviceVersion();
100517a4:	f7ff ffc2 	bl	1005172c <LL_SYSCFG_GetDeviceVersion>
100517a8:	0003      	movs	r3, r0
100517aa:	b2da      	uxtb	r2, r3
100517ac:	687b      	ldr	r3, [r7, #4]
100517ae:	705a      	strb	r2, [r3, #1]
  partInfo->die_cut       =  LL_SYSCFG_GetDeviceRevision();
100517b0:	f7ff ffb2 	bl	10051718 <LL_SYSCFG_GetDeviceRevision>
100517b4:	0003      	movs	r3, r0
100517b6:	b2da      	uxtb	r2, r3
100517b8:	687b      	ldr	r3, [r7, #4]
100517ba:	709a      	strb	r2, [r3, #2]
  partInfo->jtag_id_code  =  LL_SYSCFG_GetDeviceJTAG_ID(); // Duplicated
100517bc:	f7ff ffc1 	bl	10051742 <LL_SYSCFG_GetDeviceJTAG_ID>
100517c0:	0002      	movs	r2, r0
100517c2:	687b      	ldr	r3, [r7, #4]
100517c4:	605a      	str	r2, [r3, #4]
  partInfo->flash_size    =  (LL_GetFlashSize() + 1) * 4;
100517c6:	f7ff ffc5 	bl	10051754 <LL_GetFlashSize>
100517ca:	0003      	movs	r3, r0
100517cc:	3301      	adds	r3, #1
100517ce:	009a      	lsls	r2, r3, #2
100517d0:	687b      	ldr	r3, [r7, #4]
100517d2:	609a      	str	r2, [r3, #8]

  if (LL_GetRAMSize() != LL_UTILS_RAMSIZE_24K)
100517d4:	f7ff ffca 	bl	1005176c <LL_GetRAMSize>
100517d8:	1e03      	subs	r3, r0, #0
100517da:	d007      	beq.n	100517ec <GetPartInfo+0x6c>
  {
    partInfo->ram_size    =  (LL_GetRAMSize() + 1) * 16 * 1024;
100517dc:	f7ff ffc6 	bl	1005176c <LL_GetRAMSize>
100517e0:	0003      	movs	r3, r0
100517e2:	3301      	adds	r3, #1
100517e4:	039a      	lsls	r2, r3, #14
100517e6:	687b      	ldr	r3, [r7, #4]
100517e8:	60da      	str	r2, [r3, #12]
  else
  {
    partInfo->ram_size    =  24*1024;
  }

}
100517ea:	e003      	b.n	100517f4 <GetPartInfo+0x74>
    partInfo->ram_size    =  24*1024;
100517ec:	687b      	ldr	r3, [r7, #4]
100517ee:	22c0      	movs	r2, #192	@ 0xc0
100517f0:	01d2      	lsls	r2, r2, #7
100517f2:	60da      	str	r2, [r3, #12]
}
100517f4:	46c0      	nop			@ (mov r8, r8)
100517f6:	46bd      	mov	sp, r7
100517f8:	b004      	add	sp, #16
100517fa:	bd80      	pop	{r7, pc}
100517fc:	02028041 	.word	0x02028041

10051800 <__NVIC_SystemReset>:
{
10051800:	b580      	push	{r7, lr}
10051802:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
10051804:	f3bf 8f4f 	dsb	sy
}
10051808:	46c0      	nop			@ (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1005180a:	4b04      	ldr	r3, [pc, #16]	@ (1005181c <__NVIC_SystemReset+0x1c>)
1005180c:	4a04      	ldr	r2, [pc, #16]	@ (10051820 <__NVIC_SystemReset+0x20>)
1005180e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
10051810:	f3bf 8f4f 	dsb	sy
}
10051814:	46c0      	nop			@ (mov r8, r8)
    __NOP();
10051816:	46c0      	nop			@ (mov r8, r8)
10051818:	e7fd      	b.n	10051816 <__NVIC_SystemReset+0x16>
1005181a:	46c0      	nop			@ (mov r8, r8)
1005181c:	e000ed00 	.word	0xe000ed00
10051820:	05fa0004 	.word	0x05fa0004

10051824 <ModulesInit>:

/* USER CODE END PF */

/* Functions Definition ------------------------------------------------------*/
void ModulesInit(void)
{
10051824:	b580      	push	{r7, lr}
10051826:	af00      	add	r7, sp, #0
  BLENVM_Init();
10051828:	f000 fde4 	bl	100523f4 <BLENVM_Init>
  if (PKAMGR_Init() == PKAMGR_ERROR)
1005182c:	f7ff fb52 	bl	10050ed4 <PKAMGR_Init>
10051830:	0003      	movs	r3, r0
10051832:	3301      	adds	r3, #1
10051834:	d101      	bne.n	1005183a <ModulesInit+0x16>
  {
    Error_Handler();
10051836:	f7f0 fa1f 	bl	10041c78 <Error_Handler>
  }
}
1005183a:	46c0      	nop			@ (mov r8, r8)
1005183c:	46bd      	mov	sp, r7
1005183e:	bd80      	pop	{r7, pc}

10051840 <BLE_Init>:

void BLE_Init(void)
{
10051840:	b5f0      	push	{r4, r5, r6, r7, lr}
10051842:	b099      	sub	sp, #100	@ 0x64
10051844:	af04      	add	r7, sp, #16
  uint8_t role;
  uint8_t privacy_type = 0;
10051846:	234f      	movs	r3, #79	@ 0x4f
10051848:	18fb      	adds	r3, r7, r3
1005184a:	2200      	movs	r2, #0
1005184c:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_service_changed_handle;
  uint16_t gap_dev_name_char_handle;
  uint16_t gap_appearance_char_handle;
  uint16_t gap_periph_pref_conn_param_char_handle;
  uint8_t bd_address[6] = {0};
1005184e:	233c      	movs	r3, #60	@ 0x3c
10051850:	18fb      	adds	r3, r7, r3
10051852:	0018      	movs	r0, r3
10051854:	2306      	movs	r3, #6
10051856:	001a      	movs	r2, r3
10051858:	2100      	movs	r1, #0
1005185a:	f016 f8ff 	bl	10067a5c <memset>
  uint8_t bd_address_len= 6;
1005185e:	234e      	movs	r3, #78	@ 0x4e
10051860:	18fb      	adds	r3, r7, r3
10051862:	2206      	movs	r2, #6
10051864:	701a      	strb	r2, [r3, #0]
  uint16_t appearance = CFG_GAP_APPEARANCE;
10051866:	233a      	movs	r3, #58	@ 0x3a
10051868:	18fb      	adds	r3, r7, r3
1005186a:	22a0      	movs	r2, #160	@ 0xa0
1005186c:	0092      	lsls	r2, r2, #2
1005186e:	801a      	strh	r2, [r3, #0]

  BLE_STACK_InitTypeDef BLE_STACK_InitParams = {
10051870:	1d3a      	adds	r2, r7, #4
10051872:	4b5b      	ldr	r3, [pc, #364]	@ (100519e0 <BLE_Init+0x1a0>)
10051874:	0010      	movs	r0, r2
10051876:	0019      	movs	r1, r3
10051878:	2334      	movs	r3, #52	@ 0x34
1005187a:	001a      	movs	r2, r3
1005187c:	f016 f963 	bl	10067b46 <memcpy>
    .isr1_fifo_size = CFG_BLE_ISR1_FIFO_SIZE,
    .user_fifo_size = CFG_BLE_USER_FIFO_SIZE
  };

  /* Bluetooth LE stack init */
  ret = BLE_STACK_Init(&BLE_STACK_InitParams);
10051880:	254d      	movs	r5, #77	@ 0x4d
10051882:	197c      	adds	r4, r7, r5
10051884:	1d3b      	adds	r3, r7, #4
10051886:	0018      	movs	r0, r3
10051888:	f003 fbf2 	bl	10055070 <BLE_STACK_Init>
1005188c:	0003      	movs	r3, r0
1005188e:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS) {
10051890:	197b      	adds	r3, r7, r5
10051892:	781b      	ldrb	r3, [r3, #0]
10051894:	2b00      	cmp	r3, #0
10051896:	d001      	beq.n	1005189c <BLE_Init+0x5c>
    APP_DBG_MSG("Error in BLE_STACK_Init() 0x%02x\r\n", ret);
    Error_Handler();
10051898:	f7f0 f9ee 	bl	10041c78 <Error_Handler>
  }

#if (CFG_BD_ADDRESS_TYPE == HCI_ADDR_PUBLIC)

  bd_address[0] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x0000000000FF));
1005189c:	213c      	movs	r1, #60	@ 0x3c
1005189e:	187b      	adds	r3, r7, r1
100518a0:	2234      	movs	r2, #52	@ 0x34
100518a2:	701a      	strb	r2, [r3, #0]
  bd_address[1] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x00000000FF00) >> 8);
100518a4:	187b      	adds	r3, r7, r1
100518a6:	2212      	movs	r2, #18
100518a8:	705a      	strb	r2, [r3, #1]
  bd_address[2] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x000000FF0000) >> 16);
100518aa:	187b      	adds	r3, r7, r1
100518ac:	222a      	movs	r2, #42	@ 0x2a
100518ae:	709a      	strb	r2, [r3, #2]
  bd_address[3] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x0000FF000000) >> 24);
100518b0:	187b      	adds	r3, r7, r1
100518b2:	22e1      	movs	r2, #225	@ 0xe1
100518b4:	70da      	strb	r2, [r3, #3]
  bd_address[4] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x00FF00000000) >> 32);
100518b6:	187b      	adds	r3, r7, r1
100518b8:	2208      	movs	r2, #8
100518ba:	711a      	strb	r2, [r3, #4]
  bd_address[5] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0xFF0000000000) >> 40);
100518bc:	187b      	adds	r3, r7, r1
100518be:	2200      	movs	r2, #0
100518c0:	715a      	strb	r2, [r3, #5]
  (void)bd_address_len;

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bd_address);
100518c2:	254d      	movs	r5, #77	@ 0x4d
100518c4:	197c      	adds	r4, r7, r5
100518c6:	187b      	adds	r3, r7, r1
100518c8:	001a      	movs	r2, r3
100518ca:	2106      	movs	r1, #6
100518cc:	2000      	movs	r0, #0
100518ce:	f003 f8c7 	bl	10054a60 <aci_hal_write_config_data>
100518d2:	0003      	movs	r3, r0
100518d4:	7023      	strb	r3, [r4, #0]
#endif

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(0, CFG_TX_POWER);
100518d6:	197c      	adds	r4, r7, r5
100518d8:	211f      	movs	r1, #31
100518da:	2000      	movs	r0, #0
100518dc:	f003 f8c4 	bl	10054a68 <aci_hal_set_tx_power_level>
100518e0:	0003      	movs	r3, r0
100518e2:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_srv_profile_init(GATT_INIT_SERVICE_CHANGED_BIT, &gatt_service_changed_handle);
100518e4:	197c      	adds	r4, r7, r5
100518e6:	234a      	movs	r3, #74	@ 0x4a
100518e8:	18fb      	adds	r3, r7, r3
100518ea:	0019      	movs	r1, r3
100518ec:	2001      	movs	r0, #1
100518ee:	f7ff fc63 	bl	100511b8 <aci_gatt_srv_profile_init>
100518f2:	0003      	movs	r3, r0
100518f4:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize GAP interface
   */
  role = 0U;
100518f6:	214c      	movs	r1, #76	@ 0x4c
100518f8:	187b      	adds	r3, r7, r1
100518fa:	2200      	movs	r2, #0
100518fc:	701a      	strb	r2, [r3, #0]
  role |= GAP_PERIPHERAL_ROLE;
100518fe:	187b      	adds	r3, r7, r1
10051900:	187a      	adds	r2, r7, r1
10051902:	7812      	ldrb	r2, [r2, #0]
10051904:	2101      	movs	r1, #1
10051906:	430a      	orrs	r2, r1
10051908:	701a      	strb	r2, [r3, #0]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  ret = aci_gap_init(privacy_type, CFG_BD_ADDRESS_TYPE);
1005190a:	197c      	adds	r4, r7, r5
1005190c:	224f      	movs	r2, #79	@ 0x4f
1005190e:	18bb      	adds	r3, r7, r2
10051910:	781b      	ldrb	r3, [r3, #0]
10051912:	2100      	movs	r1, #0
10051914:	0018      	movs	r0, r3
10051916:	f002 febd 	bl	10054694 <aci_gap_init>
1005191a:	0003      	movs	r3, r0
1005191c:	7023      	strb	r3, [r4, #0]
  else
  {
    APP_DBG_MSG("  Success: aci_gap_init command\n");
  }

  ret = aci_gap_profile_init(role, privacy_type,
1005191e:	002e      	movs	r6, r5
10051920:	197c      	adds	r4, r7, r5
10051922:	2546      	movs	r5, #70	@ 0x46
10051924:	197d      	adds	r5, r7, r5
10051926:	2348      	movs	r3, #72	@ 0x48
10051928:	18fa      	adds	r2, r7, r3
1005192a:	204f      	movs	r0, #79	@ 0x4f
1005192c:	183b      	adds	r3, r7, r0
1005192e:	7819      	ldrb	r1, [r3, #0]
10051930:	234c      	movs	r3, #76	@ 0x4c
10051932:	18fb      	adds	r3, r7, r3
10051934:	7818      	ldrb	r0, [r3, #0]
10051936:	2344      	movs	r3, #68	@ 0x44
10051938:	18fb      	adds	r3, r7, r3
1005193a:	9300      	str	r3, [sp, #0]
1005193c:	002b      	movs	r3, r5
1005193e:	f7ff fad5 	bl	10050eec <aci_gap_profile_init>
10051942:	0003      	movs	r3, r0
10051944:	7023      	strb	r3, [r4, #0]
  APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",bd_address[5],bd_address[4],bd_address[3],bd_address[2],bd_address[1],bd_address[0]);
#else
#error "Invalid CFG_BD_ADDRESS_TYPE"
#endif

  ret = Gap_profile_set_dev_name(0, sizeof(a_GapDeviceName), (uint8_t*)a_GapDeviceName);
10051946:	0035      	movs	r5, r6
10051948:	197c      	adds	r4, r7, r5
1005194a:	4b26      	ldr	r3, [pc, #152]	@ (100519e4 <BLE_Init+0x1a4>)
1005194c:	001a      	movs	r2, r3
1005194e:	2119      	movs	r1, #25
10051950:	2000      	movs	r0, #0
10051952:	f7ff fb3d 	bl	10050fd0 <Gap_profile_set_dev_name>
10051956:	0003      	movs	r3, r0
10051958:	7023      	strb	r3, [r4, #0]
  else
  {
    APP_DBG_MSG("  Success: Gap_profile_set_dev_name - Device Name\n");
  }

  ret = Gap_profile_set_appearance(0, sizeof(appearance), (uint8_t*)&appearance);
1005195a:	197c      	adds	r4, r7, r5
1005195c:	233a      	movs	r3, #58	@ 0x3a
1005195e:	18fb      	adds	r3, r7, r3
10051960:	001a      	movs	r2, r3
10051962:	2102      	movs	r1, #2
10051964:	2000      	movs	r0, #0
10051966:	f7ff fb59 	bl	1005101c <Gap_profile_set_appearance>
1005196a:	0003      	movs	r3, r0
1005196c:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize IO capability
   */
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
1005196e:	4b1e      	ldr	r3, [pc, #120]	@ (100519e8 <BLE_Init+0x1a8>)
10051970:	2201      	movs	r2, #1
10051972:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
10051974:	4b1c      	ldr	r3, [pc, #112]	@ (100519e8 <BLE_Init+0x1a8>)
10051976:	781b      	ldrb	r3, [r3, #0]
10051978:	197c      	adds	r4, r7, r5
1005197a:	0018      	movs	r0, r3
1005197c:	f7fd fb4e 	bl	1004f01c <aci_gap_set_io_capability>
10051980:	0003      	movs	r3, r0
10051982:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize authentication
   */
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode             = CFG_MITM_PROTECTION;
10051984:	4b18      	ldr	r3, [pc, #96]	@ (100519e8 <BLE_Init+0x1a8>)
10051986:	2201      	movs	r2, #1
10051988:	705a      	strb	r2, [r3, #1]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin  = CFG_ENCRYPTION_KEY_SIZE_MIN;
1005198a:	4b17      	ldr	r3, [pc, #92]	@ (100519e8 <BLE_Init+0x1a8>)
1005198c:	2208      	movs	r2, #8
1005198e:	70da      	strb	r2, [r3, #3]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax  = CFG_ENCRYPTION_KEY_SIZE_MAX;
10051990:	4b15      	ldr	r3, [pc, #84]	@ (100519e8 <BLE_Init+0x1a8>)
10051992:	2210      	movs	r2, #16
10051994:	711a      	strb	r2, [r3, #4]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode          = CFG_BONDING_MODE;
10051996:	4b14      	ldr	r3, [pc, #80]	@ (100519e8 <BLE_Init+0x1a8>)
10051998:	2201      	movs	r2, #1
1005199a:	709a      	strb	r2, [r3, #2]

  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/
  ret = aci_gap_set_security_requirements(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
1005199c:	4b12      	ldr	r3, [pc, #72]	@ (100519e8 <BLE_Init+0x1a8>)
1005199e:	7898      	ldrb	r0, [r3, #2]
100519a0:	4b11      	ldr	r3, [pc, #68]	@ (100519e8 <BLE_Init+0x1a8>)
100519a2:	7859      	ldrb	r1, [r3, #1]
100519a4:	4b10      	ldr	r3, [pc, #64]	@ (100519e8 <BLE_Init+0x1a8>)
100519a6:	78db      	ldrb	r3, [r3, #3]
100519a8:	4a0f      	ldr	r2, [pc, #60]	@ (100519e8 <BLE_Init+0x1a8>)
100519aa:	7912      	ldrb	r2, [r2, #4]
100519ac:	002e      	movs	r6, r5
100519ae:	197c      	adds	r4, r7, r5
100519b0:	2500      	movs	r5, #0
100519b2:	9502      	str	r5, [sp, #8]
100519b4:	9201      	str	r2, [sp, #4]
100519b6:	9300      	str	r3, [sp, #0]
100519b8:	2300      	movs	r3, #0
100519ba:	2201      	movs	r2, #1
100519bc:	f7fd fb3e 	bl	1004f03c <aci_gap_set_security_requirements>
100519c0:	0003      	movs	r3, r0
100519c2:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize Filter Accept List
   */
  if (bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
100519c4:	4b08      	ldr	r3, [pc, #32]	@ (100519e8 <BLE_Init+0x1a8>)
100519c6:	789b      	ldrb	r3, [r3, #2]
100519c8:	2b00      	cmp	r3, #0
100519ca:	d005      	beq.n	100519d8 <BLE_Init+0x198>
  {
    ret = aci_gap_configure_filter_accept_and_resolving_list(0x01);
100519cc:	19bc      	adds	r4, r7, r6
100519ce:	2001      	movs	r0, #1
100519d0:	f002 fe8a 	bl	100546e8 <aci_gap_configure_filter_accept_and_resolving_list>
100519d4:	0003      	movs	r3, r0
100519d6:	7023      	strb	r3, [r4, #0]
      APP_DBG_MSG("  Success: aci_gap_configure_filter_accept_and_resolving_list command\n");
    }
  }
  APP_DBG_MSG("==>> End BLE_Init function\n");

}
100519d8:	46c0      	nop			@ (mov r8, r8)
100519da:	46bd      	mov	sp, r7
100519dc:	b015      	add	sp, #84	@ 0x54
100519de:	bdf0      	pop	{r4, r5, r6, r7, pc}
100519e0:	10068b68 	.word	0x10068b68
100519e4:	10069470 	.word	0x10069470
100519e8:	20002328 	.word	0x20002328

100519ec <BLEStack_Process_Schedule>:

void BLEStack_Process_Schedule(void)
{
100519ec:	b580      	push	{r7, lr}
100519ee:	af00      	add	r7, sp, #0
  /* Keep BLE Stack Process priority low, since there are limited cases
     where stack wants to be rescheduled for busy waiting.  */
  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_STACK, CFG_SEQ_PRIO_1);
100519f0:	2101      	movs	r1, #1
100519f2:	2001      	movs	r0, #1
100519f4:	f002 fd60 	bl	100544b8 <UTIL_SEQ_SetTask>
}
100519f8:	46c0      	nop			@ (mov r8, r8)
100519fa:	46bd      	mov	sp, r7
100519fc:	bd80      	pop	{r7, pc}

100519fe <BLEStack_Process>:
static void BLEStack_Process(void)
{
100519fe:	b580      	push	{r7, lr}
10051a00:	af00      	add	r7, sp, #0
  APP_DEBUG_SIGNAL_SET(APP_STACK_PROCESS);
10051a02:	2001      	movs	r0, #1
10051a04:	f002 fc1a 	bl	1005423c <APP_DEBUG_SIGNAL_SET>
  BLE_STACK_Tick();
10051a08:	f003 fa4e 	bl	10054ea8 <BLE_STACK_Tick>

  APP_DEBUG_SIGNAL_RESET(APP_STACK_PROCESS);
10051a0c:	2001      	movs	r0, #1
10051a0e:	f002 fc1f 	bl	10054250 <APP_DEBUG_SIGNAL_RESET>
}
10051a12:	46c0      	nop			@ (mov r8, r8)
10051a14:	46bd      	mov	sp, r7
10051a16:	bd80      	pop	{r7, pc}

10051a18 <VTimer_Process>:

void VTimer_Process(void)
{
10051a18:	b580      	push	{r7, lr}
10051a1a:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_Tick();
10051a1c:	f7f9 fcee 	bl	1004b3fc <HAL_RADIO_TIMER_Tick>
}
10051a20:	46c0      	nop			@ (mov r8, r8)
10051a22:	46bd      	mov	sp, r7
10051a24:	bd80      	pop	{r7, pc}

10051a26 <VTimer_Process_Schedule>:

void VTimer_Process_Schedule(void)
{
10051a26:	b580      	push	{r7, lr}
10051a28:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_VTIMER, CFG_SEQ_PRIO_0);
10051a2a:	2100      	movs	r1, #0
10051a2c:	2002      	movs	r0, #2
10051a2e:	f002 fd43 	bl	100544b8 <UTIL_SEQ_SetTask>
}
10051a32:	46c0      	nop			@ (mov r8, r8)
10051a34:	46bd      	mov	sp, r7
10051a36:	bd80      	pop	{r7, pc}

10051a38 <NVM_Process>:
void NVM_Process(void)
{
10051a38:	b580      	push	{r7, lr}
10051a3a:	af00      	add	r7, sp, #0
  NVMDB_Tick();
10051a3c:	f7ff f9d0 	bl	10050de0 <NVMDB_Tick>
}
10051a40:	46c0      	nop			@ (mov r8, r8)
10051a42:	46bd      	mov	sp, r7
10051a44:	bd80      	pop	{r7, pc}

10051a46 <NVM_Process_Schedule>:

void NVM_Process_Schedule(void)
{
10051a46:	b580      	push	{r7, lr}
10051a48:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_NVM, CFG_SEQ_PRIO_1);
10051a4a:	2101      	movs	r1, #1
10051a4c:	2004      	movs	r0, #4
10051a4e:	f002 fd33 	bl	100544b8 <UTIL_SEQ_SetTask>
}
10051a52:	46c0      	nop			@ (mov r8, r8)
10051a54:	46bd      	mov	sp, r7
10051a56:	bd80      	pop	{r7, pc}

10051a58 <HAL_RADIO_TIMER_CpuWakeUpCallback>:
  VTimer_Process_Schedule();
}

/* Function called from RADIO_TIMER_CPU_WKUP_IRQHandler() context. */
void HAL_RADIO_TIMER_CpuWakeUpCallback(void)
{
10051a58:	b580      	push	{r7, lr}
10051a5a:	af00      	add	r7, sp, #0
  VTimer_Process_Schedule();
10051a5c:	f7ff ffe3 	bl	10051a26 <VTimer_Process_Schedule>
}
10051a60:	46c0      	nop			@ (mov r8, r8)
10051a62:	46bd      	mov	sp, r7
10051a64:	bd80      	pop	{r7, pc}

10051a66 <HAL_RADIO_TxRxCallback>:

/* Function called from RADIO_TXRX_IRQHandler() context. */
void HAL_RADIO_TxRxCallback(uint32_t flags)
{
10051a66:	b580      	push	{r7, lr}
10051a68:	b082      	sub	sp, #8
10051a6a:	af00      	add	r7, sp, #0
10051a6c:	6078      	str	r0, [r7, #4]
  BLE_STACK_RadioHandler(flags);
10051a6e:	687b      	ldr	r3, [r7, #4]
10051a70:	0018      	movs	r0, r3
10051a72:	f00e f91b 	bl	1005fcac <BLE_STACK_RadioHandler>

  VTimer_Process_Schedule();
10051a76:	f7ff ffd6 	bl	10051a26 <VTimer_Process_Schedule>
  NVM_Process_Schedule();
10051a7a:	f7ff ffe4 	bl	10051a46 <NVM_Process_Schedule>
}
10051a7e:	46c0      	nop			@ (mov r8, r8)
10051a80:	46bd      	mov	sp, r7
10051a82:	b002      	add	sp, #8
10051a84:	bd80      	pop	{r7, pc}

10051a86 <BLE_STACK_ProcessRequest>:

void BLE_STACK_ProcessRequest(void)
{
10051a86:	b580      	push	{r7, lr}
10051a88:	af00      	add	r7, sp, #0
  BLEStack_Process_Schedule();
10051a8a:	f7ff ffaf 	bl	100519ec <BLEStack_Process_Schedule>
}
10051a8e:	46c0      	nop			@ (mov r8, r8)
10051a90:	46bd      	mov	sp, r7
10051a92:	bd80      	pop	{r7, pc}

10051a94 <APP_BLE_Init>:

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
10051a94:	b580      	push	{r7, lr}
10051a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1U << CFG_TASK_BLE_STACK, UTIL_SEQ_RFU, BLEStack_Process);
10051a98:	4b12      	ldr	r3, [pc, #72]	@ (10051ae4 <APP_BLE_Init+0x50>)
10051a9a:	001a      	movs	r2, r3
10051a9c:	2100      	movs	r1, #0
10051a9e:	2001      	movs	r0, #1
10051aa0:	f002 fce6 	bl	10054470 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_VTIMER, UTIL_SEQ_RFU, VTimer_Process);
10051aa4:	4b10      	ldr	r3, [pc, #64]	@ (10051ae8 <APP_BLE_Init+0x54>)
10051aa6:	001a      	movs	r2, r3
10051aa8:	2100      	movs	r1, #0
10051aaa:	2002      	movs	r0, #2
10051aac:	f002 fce0 	bl	10054470 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_NVM, UTIL_SEQ_RFU, NVM_Process);
10051ab0:	4b0e      	ldr	r3, [pc, #56]	@ (10051aec <APP_BLE_Init+0x58>)
10051ab2:	001a      	movs	r2, r3
10051ab4:	2100      	movs	r1, #0
10051ab6:	2004      	movs	r0, #4
10051ab8:	f002 fcda 	bl	10054470 <UTIL_SEQ_RegTask>
  ModulesInit();
10051abc:	f7ff feb2 	bl	10051824 <ModulesInit>

  /* Initialization of HCI & GATT & GAP layer */
  BLE_Init();
10051ac0:	f7ff febe 	bl	10051840 <BLE_Init>

  /**
  * Initialization of the BLE App Context
  */
  bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
10051ac4:	4b0a      	ldr	r3, [pc, #40]	@ (10051af0 <APP_BLE_Init+0x5c>)
10051ac6:	2200      	movs	r2, #0
10051ac8:	739a      	strb	r2, [r3, #14]
  bleAppContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
10051aca:	4b09      	ldr	r3, [pc, #36]	@ (10051af0 <APP_BLE_Init+0x5c>)
10051acc:	2201      	movs	r2, #1
10051ace:	4252      	negs	r2, r2
10051ad0:	819a      	strh	r2, [r3, #12]
  /**
  * Initialize Services and Characteristics.
  */
  APP_DBG_MSG("\n");
  APP_DBG_MSG("Services and Characteristics creation\n");
  USART_APP_Init();
10051ad2:	f000 fc81 	bl	100523d8 <USART_APP_Init>
  APP_DBG_MSG("\n");

  /* USER CODE BEGIN APP_BLE_Init_3 */

    /* Start to Advertise to accept a connection */
    APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
10051ad6:	2001      	movs	r0, #1
10051ad8:	f000 f9ac 	bl	10051e34 <APP_BLE_Procedure_Gap_Peripheral>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
10051adc:	46c0      	nop			@ (mov r8, r8)
}
10051ade:	46bd      	mov	sp, r7
10051ae0:	bd80      	pop	{r7, pc}
10051ae2:	46c0      	nop			@ (mov r8, r8)
10051ae4:	100519ff 	.word	0x100519ff
10051ae8:	10051a19 	.word	0x10051a19
10051aec:	10051a39 	.word	0x10051a39
10051af0:	20002328 	.word	0x20002328

10051af4 <BLEEVT_App_Notification>:

void BLEEVT_App_Notification(const hci_pckt *hci_pckt)
{
10051af4:	b5f0      	push	{r4, r5, r6, r7, lr}
10051af6:	b099      	sub	sp, #100	@ 0x64
10051af8:	af04      	add	r7, sp, #16
10051afa:	6078      	str	r0, [r7, #4]
  tBleStatus ret = BLE_STATUS_ERROR;
10051afc:	234b      	movs	r3, #75	@ 0x4b
10051afe:	18fb      	adds	r3, r7, r3
10051b00:	2286      	movs	r2, #134	@ 0x86
10051b02:	701a      	strb	r2, [r3, #0]
  UNUSED(ret);
  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  if(hci_pckt->type != HCI_EVENT_PKT_TYPE && hci_pckt->type != HCI_EVENT_EXT_PKT_TYPE)
10051b04:	687b      	ldr	r3, [r7, #4]
10051b06:	781b      	ldrb	r3, [r3, #0]
10051b08:	2b04      	cmp	r3, #4
10051b0a:	d004      	beq.n	10051b16 <BLEEVT_App_Notification+0x22>
10051b0c:	687b      	ldr	r3, [r7, #4]
10051b0e:	781b      	ldrb	r3, [r3, #0]
10051b10:	2b82      	cmp	r3, #130	@ 0x82
10051b12:	d000      	beq.n	10051b16 <BLEEVT_App_Notification+0x22>
10051b14:	e132      	b.n	10051d7c <BLEEVT_App_Notification+0x288>
  {
    /* Not an event */
    return;
  }

  p_event_pckt = (hci_event_pckt*)hci_pckt->data;
10051b16:	687b      	ldr	r3, [r7, #4]
10051b18:	3301      	adds	r3, #1
10051b1a:	647b      	str	r3, [r7, #68]	@ 0x44

  if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
10051b1c:	687b      	ldr	r3, [r7, #4]
10051b1e:	781b      	ldrb	r3, [r3, #0]
10051b20:	2b04      	cmp	r3, #4
10051b22:	d103      	bne.n	10051b2c <BLEEVT_App_Notification+0x38>
    event_data = p_event_pckt->data;
10051b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10051b26:	3302      	adds	r3, #2
10051b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
10051b2a:	e005      	b.n	10051b38 <BLEEVT_App_Notification+0x44>
  }
  else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
    hci_event_ext_pckt *p_event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
10051b2c:	687b      	ldr	r3, [r7, #4]
10051b2e:	3301      	adds	r3, #1
10051b30:	643b      	str	r3, [r7, #64]	@ 0x40
    event_data = p_event_pckt->data;
10051b32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10051b34:	3303      	adds	r3, #3
10051b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  switch (p_event_pckt->evt) /* evt field is at same offset in hci_event_pckt and hci_event_ext_pckt */
10051b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10051b3a:	781b      	ldrb	r3, [r3, #0]
10051b3c:	2bff      	cmp	r3, #255	@ 0xff
10051b3e:	d100      	bne.n	10051b42 <BLEEVT_App_Notification+0x4e>
10051b40:	e0a4      	b.n	10051c8c <BLEEVT_App_Notification+0x198>
10051b42:	dd00      	ble.n	10051b46 <BLEEVT_App_Notification+0x52>
10051b44:	e11c      	b.n	10051d80 <BLEEVT_App_Notification+0x28c>
10051b46:	2b3e      	cmp	r3, #62	@ 0x3e
10051b48:	d02d      	beq.n	10051ba6 <BLEEVT_App_Notification+0xb2>
10051b4a:	dd00      	ble.n	10051b4e <BLEEVT_App_Notification+0x5a>
10051b4c:	e118      	b.n	10051d80 <BLEEVT_App_Notification+0x28c>
10051b4e:	2b05      	cmp	r3, #5
10051b50:	d003      	beq.n	10051b5a <BLEEVT_App_Notification+0x66>
10051b52:	2b10      	cmp	r3, #16
10051b54:	d100      	bne.n	10051b58 <BLEEVT_App_Notification+0x64>
10051b56:	e108      	b.n	10051d6a <BLEEVT_App_Notification+0x276>

  default:
    /* USER CODE BEGIN ECODE_DEFAULT*/

    /* USER CODE END ECODE_DEFAULT*/
    break;
10051b58:	e112      	b.n	10051d80 <BLEEVT_App_Notification+0x28c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
10051b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10051b5c:	3302      	adds	r3, #2
10051b5e:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == bleAppContext.BleApplicationContext_legacy.connectionHandle)
10051b60:	68fb      	ldr	r3, [r7, #12]
10051b62:	785a      	ldrb	r2, [r3, #1]
10051b64:	789b      	ldrb	r3, [r3, #2]
10051b66:	021b      	lsls	r3, r3, #8
10051b68:	4313      	orrs	r3, r2
10051b6a:	b29a      	uxth	r2, r3
10051b6c:	4b87      	ldr	r3, [pc, #540]	@ (10051d8c <BLEEVT_App_Notification+0x298>)
10051b6e:	899b      	ldrh	r3, [r3, #12]
10051b70:	429a      	cmp	r2, r3
10051b72:	d106      	bne.n	10051b82 <BLEEVT_App_Notification+0x8e>
        bleAppContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
10051b74:	4b85      	ldr	r3, [pc, #532]	@ (10051d8c <BLEEVT_App_Notification+0x298>)
10051b76:	2201      	movs	r2, #1
10051b78:	4252      	negs	r2, r2
10051b7a:	819a      	strh	r2, [r3, #12]
        bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
10051b7c:	4b83      	ldr	r3, [pc, #524]	@ (10051d8c <BLEEVT_App_Notification+0x298>)
10051b7e:	2200      	movs	r2, #0
10051b80:	739a      	strb	r2, [r3, #14]
      gap_cmd_resp_release();
10051b82:	f000 fa2b 	bl	10051fdc <gap_cmd_resp_release>
      USARTHandleNotification.EvtOpcode = USART_DISCON_HANDLE_EVT;
10051b86:	4b82      	ldr	r3, [pc, #520]	@ (10051d90 <BLEEVT_App_Notification+0x29c>)
10051b88:	2201      	movs	r2, #1
10051b8a:	701a      	strb	r2, [r3, #0]
      USARTHandleNotification.ConnectionHandle = p_disconnection_complete_event->Connection_Handle;
10051b8c:	68fb      	ldr	r3, [r7, #12]
10051b8e:	785a      	ldrb	r2, [r3, #1]
10051b90:	789b      	ldrb	r3, [r3, #2]
10051b92:	021b      	lsls	r3, r3, #8
10051b94:	4313      	orrs	r3, r2
10051b96:	b29a      	uxth	r2, r3
10051b98:	4b7d      	ldr	r3, [pc, #500]	@ (10051d90 <BLEEVT_App_Notification+0x29c>)
10051b9a:	805a      	strh	r2, [r3, #2]
      USART_APP_EvtRx(&USARTHandleNotification);
10051b9c:	4b7c      	ldr	r3, [pc, #496]	@ (10051d90 <BLEEVT_App_Notification+0x29c>)
10051b9e:	0018      	movs	r0, r3
10051ba0:	f000 fbfc 	bl	1005239c <USART_APP_EvtRx>
    break;
10051ba4:	e0ef      	b.n	10051d86 <BLEEVT_App_Notification+0x292>
      p_meta_evt = (hci_le_meta_event*) p_event_pckt->data;
10051ba6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10051ba8:	3302      	adds	r3, #2
10051baa:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_meta_evt->subevent)
10051bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051bae:	781b      	ldrb	r3, [r3, #0]
10051bb0:	2b0c      	cmp	r3, #12
10051bb2:	d00b      	beq.n	10051bcc <BLEEVT_App_Notification+0xd8>
10051bb4:	dc68      	bgt.n	10051c88 <BLEEVT_App_Notification+0x194>
10051bb6:	2b0a      	cmp	r3, #10
10051bb8:	d00e      	beq.n	10051bd8 <BLEEVT_App_Notification+0xe4>
10051bba:	dc65      	bgt.n	10051c88 <BLEEVT_App_Notification+0x194>
10051bbc:	2b01      	cmp	r3, #1
10051bbe:	d037      	beq.n	10051c30 <BLEEVT_App_Notification+0x13c>
10051bc0:	2b03      	cmp	r3, #3
10051bc2:	d161      	bne.n	10051c88 <BLEEVT_App_Notification+0x194>
          p_conn_update_complete = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
10051bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051bc6:	3301      	adds	r3, #1
10051bc8:	61bb      	str	r3, [r7, #24]
        break;
10051bca:	e05e      	b.n	10051c8a <BLEEVT_App_Notification+0x196>
          p_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
10051bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051bce:	3301      	adds	r3, #1
10051bd0:	623b      	str	r3, [r7, #32]
          gap_cmd_resp_release();
10051bd2:	f000 fa03 	bl	10051fdc <gap_cmd_resp_release>
        break;
10051bd6:	e058      	b.n	10051c8a <BLEEVT_App_Notification+0x196>
          p_enhanced_conn_complete = (hci_le_enhanced_connection_complete_event_rp0 *) p_meta_evt->data;
10051bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051bda:	3301      	adds	r3, #1
10051bdc:	61fb      	str	r3, [r7, #28]
          connection_complete_event(p_enhanced_conn_complete->Status,
10051bde:	69fb      	ldr	r3, [r7, #28]
10051be0:	781c      	ldrb	r4, [r3, #0]
10051be2:	69fb      	ldr	r3, [r7, #28]
10051be4:	785a      	ldrb	r2, [r3, #1]
10051be6:	789b      	ldrb	r3, [r3, #2]
10051be8:	021b      	lsls	r3, r3, #8
10051bea:	4313      	orrs	r3, r2
10051bec:	b29d      	uxth	r5, r3
10051bee:	69fb      	ldr	r3, [r7, #28]
10051bf0:	791e      	ldrb	r6, [r3, #4]
                                    p_enhanced_conn_complete->Peer_Address,
10051bf2:	69fb      	ldr	r3, [r7, #28]
10051bf4:	3305      	adds	r3, #5
10051bf6:	469c      	mov	ip, r3
          connection_complete_event(p_enhanced_conn_complete->Status,
10051bf8:	69fb      	ldr	r3, [r7, #28]
10051bfa:	7dda      	ldrb	r2, [r3, #23]
10051bfc:	7e1b      	ldrb	r3, [r3, #24]
10051bfe:	021b      	lsls	r3, r3, #8
10051c00:	4313      	orrs	r3, r2
10051c02:	b29a      	uxth	r2, r3
10051c04:	69fb      	ldr	r3, [r7, #28]
10051c06:	7e59      	ldrb	r1, [r3, #25]
10051c08:	7e9b      	ldrb	r3, [r3, #26]
10051c0a:	021b      	lsls	r3, r3, #8
10051c0c:	430b      	orrs	r3, r1
10051c0e:	b299      	uxth	r1, r3
10051c10:	69fb      	ldr	r3, [r7, #28]
10051c12:	7ed8      	ldrb	r0, [r3, #27]
10051c14:	7f1b      	ldrb	r3, [r3, #28]
10051c16:	021b      	lsls	r3, r3, #8
10051c18:	4303      	orrs	r3, r0
10051c1a:	b29b      	uxth	r3, r3
10051c1c:	9302      	str	r3, [sp, #8]
10051c1e:	9101      	str	r1, [sp, #4]
10051c20:	9200      	str	r2, [sp, #0]
10051c22:	4663      	mov	r3, ip
10051c24:	0032      	movs	r2, r6
10051c26:	0029      	movs	r1, r5
10051c28:	0020      	movs	r0, r4
10051c2a:	f000 f8bf 	bl	10051dac <connection_complete_event>
        break;
10051c2e:	e02c      	b.n	10051c8a <BLEEVT_App_Notification+0x196>
          p_conn_complete = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
10051c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051c32:	3301      	adds	r3, #1
10051c34:	617b      	str	r3, [r7, #20]
          connection_complete_event(p_conn_complete->Status,
10051c36:	697b      	ldr	r3, [r7, #20]
10051c38:	781c      	ldrb	r4, [r3, #0]
10051c3a:	697b      	ldr	r3, [r7, #20]
10051c3c:	785a      	ldrb	r2, [r3, #1]
10051c3e:	789b      	ldrb	r3, [r3, #2]
10051c40:	021b      	lsls	r3, r3, #8
10051c42:	4313      	orrs	r3, r2
10051c44:	b29d      	uxth	r5, r3
10051c46:	697b      	ldr	r3, [r7, #20]
10051c48:	791e      	ldrb	r6, [r3, #4]
                                    p_conn_complete->Peer_Address,
10051c4a:	697b      	ldr	r3, [r7, #20]
10051c4c:	3305      	adds	r3, #5
10051c4e:	469c      	mov	ip, r3
          connection_complete_event(p_conn_complete->Status,
10051c50:	697b      	ldr	r3, [r7, #20]
10051c52:	7ada      	ldrb	r2, [r3, #11]
10051c54:	7b1b      	ldrb	r3, [r3, #12]
10051c56:	021b      	lsls	r3, r3, #8
10051c58:	4313      	orrs	r3, r2
10051c5a:	b29a      	uxth	r2, r3
10051c5c:	697b      	ldr	r3, [r7, #20]
10051c5e:	7b59      	ldrb	r1, [r3, #13]
10051c60:	7b9b      	ldrb	r3, [r3, #14]
10051c62:	021b      	lsls	r3, r3, #8
10051c64:	430b      	orrs	r3, r1
10051c66:	b299      	uxth	r1, r3
10051c68:	697b      	ldr	r3, [r7, #20]
10051c6a:	7bd8      	ldrb	r0, [r3, #15]
10051c6c:	7c1b      	ldrb	r3, [r3, #16]
10051c6e:	021b      	lsls	r3, r3, #8
10051c70:	4303      	orrs	r3, r0
10051c72:	b29b      	uxth	r3, r3
10051c74:	9302      	str	r3, [sp, #8]
10051c76:	9101      	str	r1, [sp, #4]
10051c78:	9200      	str	r2, [sp, #0]
10051c7a:	4663      	mov	r3, ip
10051c7c:	0032      	movs	r2, r6
10051c7e:	0029      	movs	r1, r5
10051c80:	0020      	movs	r0, r4
10051c82:	f000 f893 	bl	10051dac <connection_complete_event>
        break;
10051c86:	e000      	b.n	10051c8a <BLEEVT_App_Notification+0x196>
        break;
10051c88:	46c0      	nop			@ (mov r8, r8)
    break;
10051c8a:	e07c      	b.n	10051d86 <BLEEVT_App_Notification+0x292>
      aci_blecore_event *p_blecore_evt = (aci_blecore_event*) event_data;
10051c8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10051c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      switch (p_blecore_evt->ecode)
10051c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10051c92:	781a      	ldrb	r2, [r3, #0]
10051c94:	785b      	ldrb	r3, [r3, #1]
10051c96:	021b      	lsls	r3, r3, #8
10051c98:	4313      	orrs	r3, r2
10051c9a:	b29b      	uxth	r3, r3
10051c9c:	4a3d      	ldr	r2, [pc, #244]	@ (10051d94 <BLEEVT_App_Notification+0x2a0>)
10051c9e:	4293      	cmp	r3, r2
10051ca0:	d03b      	beq.n	10051d1a <BLEEVT_App_Notification+0x226>
10051ca2:	4a3c      	ldr	r2, [pc, #240]	@ (10051d94 <BLEEVT_App_Notification+0x2a0>)
10051ca4:	4293      	cmp	r3, r2
10051ca6:	dc5a      	bgt.n	10051d5e <BLEEVT_App_Notification+0x26a>
10051ca8:	2280      	movs	r2, #128	@ 0x80
10051caa:	0112      	lsls	r2, r2, #4
10051cac:	4293      	cmp	r3, r2
10051cae:	d01c      	beq.n	10051cea <BLEEVT_App_Notification+0x1f6>
10051cb0:	2280      	movs	r2, #128	@ 0x80
10051cb2:	0112      	lsls	r2, r2, #4
10051cb4:	4293      	cmp	r3, r2
10051cb6:	dc52      	bgt.n	10051d5e <BLEEVT_App_Notification+0x26a>
10051cb8:	4a37      	ldr	r2, [pc, #220]	@ (10051d98 <BLEEVT_App_Notification+0x2a4>)
10051cba:	4293      	cmp	r3, r2
10051cbc:	d051      	beq.n	10051d62 <BLEEVT_App_Notification+0x26e>
10051cbe:	4a36      	ldr	r2, [pc, #216]	@ (10051d98 <BLEEVT_App_Notification+0x2a4>)
10051cc0:	4293      	cmp	r3, r2
10051cc2:	dc4c      	bgt.n	10051d5e <BLEEVT_App_Notification+0x26a>
10051cc4:	4a35      	ldr	r2, [pc, #212]	@ (10051d9c <BLEEVT_App_Notification+0x2a8>)
10051cc6:	4293      	cmp	r3, r2
10051cc8:	d013      	beq.n	10051cf2 <BLEEVT_App_Notification+0x1fe>
10051cca:	2281      	movs	r2, #129	@ 0x81
10051ccc:	00d2      	lsls	r2, r2, #3
10051cce:	4293      	cmp	r3, r2
10051cd0:	da45      	bge.n	10051d5e <BLEEVT_App_Notification+0x26a>
10051cd2:	4a33      	ldr	r2, [pc, #204]	@ (10051da0 <BLEEVT_App_Notification+0x2ac>)
10051cd4:	4293      	cmp	r3, r2
10051cd6:	d010      	beq.n	10051cfa <BLEEVT_App_Notification+0x206>
10051cd8:	4a31      	ldr	r2, [pc, #196]	@ (10051da0 <BLEEVT_App_Notification+0x2ac>)
10051cda:	4293      	cmp	r3, r2
10051cdc:	dc3f      	bgt.n	10051d5e <BLEEVT_App_Notification+0x26a>
10051cde:	2b04      	cmp	r3, #4
10051ce0:	d041      	beq.n	10051d66 <BLEEVT_App_Notification+0x272>
10051ce2:	4a30      	ldr	r2, [pc, #192]	@ (10051da4 <BLEEVT_App_Notification+0x2b0>)
10051ce4:	4293      	cmp	r3, r2
10051ce6:	d014      	beq.n	10051d12 <BLEEVT_App_Notification+0x21e>
        break;
10051ce8:	e039      	b.n	10051d5e <BLEEVT_App_Notification+0x26a>
          p_l2cap_conn_update_resp = (aci_l2cap_connection_update_resp_event_rp0 *) p_blecore_evt->data;
10051cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10051cec:	3302      	adds	r3, #2
10051cee:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10051cf0:	e03a      	b.n	10051d68 <BLEEVT_App_Notification+0x274>
          p_gap_proc_complete = (aci_gap_proc_complete_event_rp0*) p_blecore_evt->data;
10051cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10051cf4:	3302      	adds	r3, #2
10051cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
10051cf8:	e036      	b.n	10051d68 <BLEEVT_App_Notification+0x274>
          ret = aci_gap_passkey_resp(bleAppContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
10051cfa:	4b24      	ldr	r3, [pc, #144]	@ (10051d8c <BLEEVT_App_Notification+0x298>)
10051cfc:	899b      	ldrh	r3, [r3, #12]
10051cfe:	224b      	movs	r2, #75	@ 0x4b
10051d00:	18bc      	adds	r4, r7, r2
10051d02:	4a29      	ldr	r2, [pc, #164]	@ (10051da8 <BLEEVT_App_Notification+0x2b4>)
10051d04:	0011      	movs	r1, r2
10051d06:	0018      	movs	r0, r3
10051d08:	f7fd f9c7 	bl	1004f09a <aci_gap_passkey_resp>
10051d0c:	0003      	movs	r3, r0
10051d0e:	7023      	strb	r3, [r4, #0]
        break;
10051d10:	e02a      	b.n	10051d68 <BLEEVT_App_Notification+0x274>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
10051d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10051d14:	3302      	adds	r3, #2
10051d16:	62bb      	str	r3, [r7, #40]	@ 0x28
        break;
10051d18:	e026      	b.n	10051d68 <BLEEVT_App_Notification+0x274>
          p_read = (aci_gatt_srv_read_event_rp0*)p_blecore_evt->data;
10051d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10051d1c:	3302      	adds	r3, #2
10051d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
          uint8_t error_code = BLE_ATT_ERR_INSUFF_AUTHORIZATION;
10051d20:	2437      	movs	r4, #55	@ 0x37
10051d22:	193b      	adds	r3, r7, r4
10051d24:	2208      	movs	r2, #8
10051d26:	701a      	strb	r2, [r3, #0]
          aci_gatt_srv_resp(p_read->Connection_Handle,
10051d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10051d2a:	781a      	ldrb	r2, [r3, #0]
10051d2c:	785b      	ldrb	r3, [r3, #1]
10051d2e:	021b      	lsls	r3, r3, #8
10051d30:	4313      	orrs	r3, r2
10051d32:	b298      	uxth	r0, r3
10051d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10051d36:	789a      	ldrb	r2, [r3, #2]
10051d38:	78db      	ldrb	r3, [r3, #3]
10051d3a:	021b      	lsls	r3, r3, #8
10051d3c:	4313      	orrs	r3, r2
10051d3e:	b299      	uxth	r1, r3
10051d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10051d42:	791a      	ldrb	r2, [r3, #4]
10051d44:	795b      	ldrb	r3, [r3, #5]
10051d46:	021b      	lsls	r3, r3, #8
10051d48:	4313      	orrs	r3, r2
10051d4a:	b29a      	uxth	r2, r3
10051d4c:	193b      	adds	r3, r7, r4
10051d4e:	781b      	ldrb	r3, [r3, #0]
10051d50:	2400      	movs	r4, #0
10051d52:	9401      	str	r4, [sp, #4]
10051d54:	2400      	movs	r4, #0
10051d56:	9400      	str	r4, [sp, #0]
10051d58:	f7fd f9ec 	bl	1004f134 <aci_gatt_srv_resp>
          break;
10051d5c:	e004      	b.n	10051d68 <BLEEVT_App_Notification+0x274>
        break;
10051d5e:	46c0      	nop			@ (mov r8, r8)
10051d60:	e011      	b.n	10051d86 <BLEEVT_App_Notification+0x292>
        break;
10051d62:	46c0      	nop			@ (mov r8, r8)
10051d64:	e00f      	b.n	10051d86 <BLEEVT_App_Notification+0x292>
        break;
10051d66:	46c0      	nop			@ (mov r8, r8)
    break;
10051d68:	e00d      	b.n	10051d86 <BLEEVT_App_Notification+0x292>
      p_hci_hardware_error_event = (hci_hardware_error_event_rp0*)p_event_pckt->data;
10051d6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10051d6c:	3302      	adds	r3, #2
10051d6e:	613b      	str	r3, [r7, #16]
      if (p_hci_hardware_error_event->Hardware_Code <= 0x03)
10051d70:	693b      	ldr	r3, [r7, #16]
10051d72:	781b      	ldrb	r3, [r3, #0]
10051d74:	2b03      	cmp	r3, #3
10051d76:	d805      	bhi.n	10051d84 <BLEEVT_App_Notification+0x290>
        NVIC_SystemReset();
10051d78:	f7ff fd42 	bl	10051800 <__NVIC_SystemReset>
    return;
10051d7c:	46c0      	nop			@ (mov r8, r8)
10051d7e:	e002      	b.n	10051d86 <BLEEVT_App_Notification+0x292>
    break;
10051d80:	46c0      	nop			@ (mov r8, r8)
10051d82:	e000      	b.n	10051d86 <BLEEVT_App_Notification+0x292>
    break;
10051d84:	46c0      	nop			@ (mov r8, r8)
  }
}
10051d86:	46bd      	mov	sp, r7
10051d88:	b015      	add	sp, #84	@ 0x54
10051d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10051d8c:	20002328 	.word	0x20002328
10051d90:	20002338 	.word	0x20002338
10051d94:	00000c19 	.word	0x00000c19
10051d98:	0000040a 	.word	0x0000040a
10051d9c:	00000407 	.word	0x00000407
10051da0:	00000402 	.word	0x00000402
10051da4:	00000401 	.word	0x00000401
10051da8:	0001b207 	.word	0x0001b207

10051dac <connection_complete_event>:
                                      uint8_t Peer_Address_Type,
                                      uint8_t Peer_Address[6],
                                      uint16_t Connection_Interval,
                                      uint16_t Peripheral_Latency,
                                      uint16_t Supervision_Timeout)
{
10051dac:	b590      	push	{r4, r7, lr}
10051dae:	b083      	sub	sp, #12
10051db0:	af00      	add	r7, sp, #0
10051db2:	0004      	movs	r4, r0
10051db4:	0008      	movs	r0, r1
10051db6:	0011      	movs	r1, r2
10051db8:	603b      	str	r3, [r7, #0]
10051dba:	1dfb      	adds	r3, r7, #7
10051dbc:	1c22      	adds	r2, r4, #0
10051dbe:	701a      	strb	r2, [r3, #0]
10051dc0:	1d3b      	adds	r3, r7, #4
10051dc2:	1c02      	adds	r2, r0, #0
10051dc4:	801a      	strh	r2, [r3, #0]
10051dc6:	1dbb      	adds	r3, r7, #6
10051dc8:	1c0a      	adds	r2, r1, #0
10051dca:	701a      	strb	r2, [r3, #0]
  if(Status != 0)
10051dcc:	1dfb      	adds	r3, r7, #7
10051dce:	781b      	ldrb	r3, [r3, #0]
10051dd0:	2b00      	cmp	r3, #0
10051dd2:	d003      	beq.n	10051ddc <connection_complete_event+0x30>
  {
    APP_DBG_MSG("==>> connection_complete_event Fail, Status: 0x%02X\n", Status);
    bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
10051dd4:	4b10      	ldr	r3, [pc, #64]	@ (10051e18 <connection_complete_event+0x6c>)
10051dd6:	2200      	movs	r2, #0
10051dd8:	739a      	strb	r2, [r3, #14]
    return;
10051dda:	e019      	b.n	10051e10 <connection_complete_event+0x64>
              FRACTIONAL_2DIGITS(Connection_Interval*1.25),
              Peripheral_Latency,
              Supervision_Timeout * 10
              );

  if (bleAppContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
10051ddc:	4b0e      	ldr	r3, [pc, #56]	@ (10051e18 <connection_complete_event+0x6c>)
10051dde:	7b9b      	ldrb	r3, [r3, #14]
10051de0:	2b01      	cmp	r3, #1
10051de2:	d103      	bne.n	10051dec <connection_complete_event+0x40>
  {
    /* Connection as client */
    bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
10051de4:	4b0c      	ldr	r3, [pc, #48]	@ (10051e18 <connection_complete_event+0x6c>)
10051de6:	2203      	movs	r2, #3
10051de8:	739a      	strb	r2, [r3, #14]
10051dea:	e002      	b.n	10051df2 <connection_complete_event+0x46>
  }
  else
  {
    /* Connection as server */
    bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
10051dec:	4b0a      	ldr	r3, [pc, #40]	@ (10051e18 <connection_complete_event+0x6c>)
10051dee:	2202      	movs	r2, #2
10051df0:	739a      	strb	r2, [r3, #14]
  }
  bleAppContext.BleApplicationContext_legacy.connectionHandle = Connection_Handle;
10051df2:	4b09      	ldr	r3, [pc, #36]	@ (10051e18 <connection_complete_event+0x6c>)
10051df4:	1d3a      	adds	r2, r7, #4
10051df6:	8812      	ldrh	r2, [r2, #0]
10051df8:	819a      	strh	r2, [r3, #12]

  USARTHandleNotification.EvtOpcode = USART_CONN_HANDLE_EVT;
10051dfa:	4b08      	ldr	r3, [pc, #32]	@ (10051e1c <connection_complete_event+0x70>)
10051dfc:	2200      	movs	r2, #0
10051dfe:	701a      	strb	r2, [r3, #0]
  USARTHandleNotification.ConnectionHandle = Connection_Handle;
10051e00:	4b06      	ldr	r3, [pc, #24]	@ (10051e1c <connection_complete_event+0x70>)
10051e02:	1d3a      	adds	r2, r7, #4
10051e04:	8812      	ldrh	r2, [r2, #0]
10051e06:	805a      	strh	r2, [r3, #2]
  USART_APP_EvtRx(&USARTHandleNotification);
10051e08:	4b04      	ldr	r3, [pc, #16]	@ (10051e1c <connection_complete_event+0x70>)
10051e0a:	0018      	movs	r0, r3
10051e0c:	f000 fac6 	bl	1005239c <USART_APP_EvtRx>

  /* USER CODE BEGIN HCI_EVT_LE_CONN_COMPLETE */

  /* USER CODE END HCI_EVT_LE_CONN_COMPLETE */
}/* end hci_le_connection_complete_event() */
10051e10:	46bd      	mov	sp, r7
10051e12:	b003      	add	sp, #12
10051e14:	bd90      	pop	{r4, r7, pc}
10051e16:	46c0      	nop			@ (mov r8, r8)
10051e18:	20002328 	.word	0x20002328
10051e1c:	20002338 	.word	0x20002338

10051e20 <APP_BLE_Get_Server_Connection_Status>:
/* USER CODE BEGIN EVT_VENDOR_3 */

/* USER CODE END EVT_VENDOR_3 */

APP_BLE_ConnStatus_t APP_BLE_Get_Server_Connection_Status(void)
{
10051e20:	b580      	push	{r7, lr}
10051e22:	af00      	add	r7, sp, #0
  return bleAppContext.Device_Connection_Status;
10051e24:	4b02      	ldr	r3, [pc, #8]	@ (10051e30 <APP_BLE_Get_Server_Connection_Status+0x10>)
10051e26:	7b9b      	ldrb	r3, [r3, #14]
}
10051e28:	0018      	movs	r0, r3
10051e2a:	46bd      	mov	sp, r7
10051e2c:	bd80      	pop	{r7, pc}
10051e2e:	46c0      	nop			@ (mov r8, r8)
10051e30:	20002328 	.word	0x20002328

10051e34 <APP_BLE_Procedure_Gap_Peripheral>:
  }
  return;
}

void APP_BLE_Procedure_Gap_Peripheral(ProcGapPeripheralId_t ProcGapPeripheralId)
{
10051e34:	b5b0      	push	{r4, r5, r7, lr}
10051e36:	b094      	sub	sp, #80	@ 0x50
10051e38:	af0c      	add	r7, sp, #48	@ 0x30
10051e3a:	0002      	movs	r2, r0
10051e3c:	1dfb      	adds	r3, r7, #7
10051e3e:	701a      	strb	r2, [r3, #0]
  tBleStatus status;
  uint32_t paramA = ADV_INTERVAL_MIN;
10051e40:	2380      	movs	r3, #128	@ 0x80
10051e42:	61fb      	str	r3, [r7, #28]
  uint32_t paramB = ADV_INTERVAL_MAX;
10051e44:	23a0      	movs	r3, #160	@ 0xa0
10051e46:	61bb      	str	r3, [r7, #24]
  uint32_t paramC, paramD;

  /* First set parameters before calling ACI APIs, only if needed */
  switch(ProcGapPeripheralId)
10051e48:	1dfb      	adds	r3, r7, #7
10051e4a:	781b      	ldrb	r3, [r3, #0]
10051e4c:	2b05      	cmp	r3, #5
10051e4e:	d834      	bhi.n	10051eba <APP_BLE_Procedure_Gap_Peripheral+0x86>
10051e50:	009a      	lsls	r2, r3, #2
10051e52:	4b5f      	ldr	r3, [pc, #380]	@ (10051fd0 <APP_BLE_Procedure_Gap_Peripheral+0x19c>)
10051e54:	18d3      	adds	r3, r2, r3
10051e56:	681b      	ldr	r3, [r3, #0]
10051e58:	469f      	mov	pc, r3
  {
    case PROC_GAP_PERIPH_ADVERTISE_START_FAST:
    {
      paramA = ADV_INTERVAL_MIN;
10051e5a:	2380      	movs	r3, #128	@ 0x80
10051e5c:	61fb      	str	r3, [r7, #28]
      paramB = ADV_INTERVAL_MAX;
10051e5e:	23a0      	movs	r3, #160	@ 0xa0
10051e60:	61bb      	str	r3, [r7, #24]
      paramC = APP_BLE_ADV_FAST;
10051e62:	2304      	movs	r3, #4
10051e64:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_START_FAST */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_START_FAST */
      break;
10051e66:	e02b      	b.n	10051ec0 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_ADVERTISE_START_FAST */
    case PROC_GAP_PERIPH_ADVERTISE_START_LP:
    {
      paramA = ADV_LP_INTERVAL_MIN;
10051e68:	23c8      	movs	r3, #200	@ 0xc8
10051e6a:	00db      	lsls	r3, r3, #3
10051e6c:	61fb      	str	r3, [r7, #28]
      paramB = ADV_LP_INTERVAL_MAX;
10051e6e:	23fa      	movs	r3, #250	@ 0xfa
10051e70:	011b      	lsls	r3, r3, #4
10051e72:	61bb      	str	r3, [r7, #24]
      paramC = APP_BLE_ADV_LP;
10051e74:	2305      	movs	r3, #5
10051e76:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_START_LP */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_START_LP */
      break;
10051e78:	e022      	b.n	10051ec0 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_ADVERTISE_START_LP */
    case PROC_GAP_PERIPH_ADVERTISE_STOP:
    {
      paramC = APP_BLE_IDLE;
10051e7a:	2300      	movs	r3, #0
10051e7c:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_STOP */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_STOP */
      break;
10051e7e:	e01f      	b.n	10051ec0 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_ADVERTISE_STOP */
    case PROC_GAP_PERIPH_CONN_PARAM_UPDATE:
    {
      paramA = CONN_INT_MS(1000);
10051e80:	23c8      	movs	r3, #200	@ 0xc8
10051e82:	009b      	lsls	r3, r3, #2
10051e84:	61fb      	str	r3, [r7, #28]
      paramB = CONN_INT_MS(1000);
10051e86:	23c8      	movs	r3, #200	@ 0xc8
10051e88:	009b      	lsls	r3, r3, #2
10051e8a:	61bb      	str	r3, [r7, #24]
      paramC = 0x0000;
10051e8c:	2300      	movs	r3, #0
10051e8e:	617b      	str	r3, [r7, #20]
      paramD = 0x01F4;
10051e90:	23fa      	movs	r3, #250	@ 0xfa
10051e92:	005b      	lsls	r3, r3, #1
10051e94:	613b      	str	r3, [r7, #16]

      /* USER CODE BEGIN CONN_PARAM_UPDATE */

      /* USER CODE END CONN_PARAM_UPDATE */
      break;
10051e96:	e013      	b.n	10051ec0 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_CONN_PARAM_UPDATE */
    case PROC_GAP_PERIPH_CONN_TERMINATE:
    {
      status = aci_gap_terminate(bleAppContext.BleApplicationContext_legacy.connectionHandle, 0x13);
10051e98:	4b4e      	ldr	r3, [pc, #312]	@ (10051fd4 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
10051e9a:	899b      	ldrh	r3, [r3, #12]
10051e9c:	250f      	movs	r5, #15
10051e9e:	197c      	adds	r4, r7, r5
10051ea0:	2113      	movs	r1, #19
10051ea2:	0018      	movs	r0, r3
10051ea4:	f7fd f8a4 	bl	1004eff0 <aci_gap_terminate>
10051ea8:	0003      	movs	r3, r0
10051eaa:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10051eac:	197b      	adds	r3, r7, r5
10051eae:	781b      	ldrb	r3, [r3, #0]
10051eb0:	2b00      	cmp	r3, #0
10051eb2:	d104      	bne.n	10051ebe <APP_BLE_Procedure_Gap_Peripheral+0x8a>
         APP_DBG_MSG("aci_gap_terminate failure: reason=0x%02X\n", status);
      }
      else
      {
        APP_DBG_MSG("==>> aci_gap_terminate : Success\n");
        gap_cmd_resp_wait();/* waiting for HCI_DISCONNECTION_COMPLETE_EVT_CODE */
10051eb4:	f000 f89a 	bl	10051fec <gap_cmd_resp_wait>
      }
      break;
10051eb8:	e001      	b.n	10051ebe <APP_BLE_Procedure_Gap_Peripheral+0x8a>
    /* PROC_GAP_PERIPH_CONN_TERMINATE */
    /* USER CODE BEGIN GAP_PERIPHERAL_1 */

    /* USER CODE END GAP_PERIPHERAL_1 */
    default:
      break;
10051eba:	46c0      	nop			@ (mov r8, r8)
10051ebc:	e000      	b.n	10051ec0 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
      break;
10051ebe:	46c0      	nop			@ (mov r8, r8)
  }

  /* Call ACI APIs */
  switch(ProcGapPeripheralId)
10051ec0:	1dfb      	adds	r3, r7, #7
10051ec2:	781b      	ldrb	r3, [r3, #0]
10051ec4:	2b06      	cmp	r3, #6
10051ec6:	d100      	bne.n	10051eca <APP_BLE_Procedure_Gap_Peripheral+0x96>
10051ec8:	e078      	b.n	10051fbc <APP_BLE_Procedure_Gap_Peripheral+0x188>
10051eca:	dd00      	ble.n	10051ece <APP_BLE_Procedure_Gap_Peripheral+0x9a>
10051ecc:	e078      	b.n	10051fc0 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
10051ece:	2b04      	cmp	r3, #4
10051ed0:	d061      	beq.n	10051f96 <APP_BLE_Procedure_Gap_Peripheral+0x162>
10051ed2:	dd00      	ble.n	10051ed6 <APP_BLE_Procedure_Gap_Peripheral+0xa2>
10051ed4:	e074      	b.n	10051fc0 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
10051ed6:	2b01      	cmp	r3, #1
10051ed8:	dc02      	bgt.n	10051ee0 <APP_BLE_Procedure_Gap_Peripheral+0xac>
10051eda:	2b00      	cmp	r3, #0
10051edc:	da03      	bge.n	10051ee6 <APP_BLE_Procedure_Gap_Peripheral+0xb2>
    }/* PROC_GAP_PERIPH_SET_BROADCAST_MODE */
    /* USER CODE BEGIN GAP_PERIPHERAL_2 */

    /* USER CODE END GAP_PERIPHERAL_2 */
    default:
      break;
10051ede:	e06f      	b.n	10051fc0 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
  switch(ProcGapPeripheralId)
10051ee0:	2b02      	cmp	r3, #2
10051ee2:	d046      	beq.n	10051f72 <APP_BLE_Procedure_Gap_Peripheral+0x13e>
      break;
10051ee4:	e06c      	b.n	10051fc0 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
      Advertising_Set_Parameters_t Advertising_Set_Parameters = {0};
10051ee6:	2308      	movs	r3, #8
10051ee8:	18fb      	adds	r3, r7, r3
10051eea:	0018      	movs	r0, r3
10051eec:	2306      	movs	r3, #6
10051eee:	001a      	movs	r2, r3
10051ef0:	2100      	movs	r1, #0
10051ef2:	f015 fdb3 	bl	10067a5c <memset>
      status = aci_gap_set_advertising_configuration(0,
10051ef6:	250f      	movs	r5, #15
10051ef8:	197c      	adds	r4, r7, r5
10051efa:	69fa      	ldr	r2, [r7, #28]
10051efc:	2300      	movs	r3, #0
10051efe:	930a      	str	r3, [sp, #40]	@ 0x28
10051f00:	2300      	movs	r3, #0
10051f02:	9309      	str	r3, [sp, #36]	@ 0x24
10051f04:	2301      	movs	r3, #1
10051f06:	9308      	str	r3, [sp, #32]
10051f08:	2300      	movs	r3, #0
10051f0a:	9307      	str	r3, [sp, #28]
10051f0c:	2301      	movs	r3, #1
10051f0e:	9306      	str	r3, [sp, #24]
10051f10:	2300      	movs	r3, #0
10051f12:	9305      	str	r3, [sp, #20]
10051f14:	2300      	movs	r3, #0
10051f16:	9304      	str	r3, [sp, #16]
10051f18:	2300      	movs	r3, #0
10051f1a:	9303      	str	r3, [sp, #12]
10051f1c:	2300      	movs	r3, #0
10051f1e:	9302      	str	r3, [sp, #8]
10051f20:	2307      	movs	r3, #7
10051f22:	9301      	str	r3, [sp, #4]
10051f24:	69bb      	ldr	r3, [r7, #24]
10051f26:	9300      	str	r3, [sp, #0]
10051f28:	0013      	movs	r3, r2
10051f2a:	2213      	movs	r2, #19
10051f2c:	2102      	movs	r1, #2
10051f2e:	2000      	movs	r0, #0
10051f30:	f002 fc06 	bl	10054740 <aci_gap_set_advertising_configuration>
10051f34:	0003      	movs	r3, r0
10051f36:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10051f38:	197b      	adds	r3, r7, r5
10051f3a:	781b      	ldrb	r3, [r3, #0]
10051f3c:	2b00      	cmp	r3, #0
10051f3e:	d103      	bne.n	10051f48 <APP_BLE_Procedure_Gap_Peripheral+0x114>
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
10051f40:	697b      	ldr	r3, [r7, #20]
10051f42:	b2da      	uxtb	r2, r3
10051f44:	4b23      	ldr	r3, [pc, #140]	@ (10051fd4 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
10051f46:	739a      	strb	r2, [r3, #14]
      status = aci_gap_set_advertising_data(0, ADV_COMPLETE_DATA, sizeof(a_AdvData), (uint8_t*) a_AdvData);
10051f48:	250f      	movs	r5, #15
10051f4a:	197c      	adds	r4, r7, r5
10051f4c:	4b22      	ldr	r3, [pc, #136]	@ (10051fd8 <APP_BLE_Procedure_Gap_Peripheral+0x1a4>)
10051f4e:	2210      	movs	r2, #16
10051f50:	2103      	movs	r1, #3
10051f52:	2000      	movs	r0, #0
10051f54:	f002 fc29 	bl	100547aa <aci_gap_set_advertising_data>
10051f58:	0003      	movs	r3, r0
10051f5a:	7023      	strb	r3, [r4, #0]
      status = aci_gap_set_advertising_enable(ENABLE, 1, &Advertising_Set_Parameters);
10051f5c:	197c      	adds	r4, r7, r5
10051f5e:	2308      	movs	r3, #8
10051f60:	18fb      	adds	r3, r7, r3
10051f62:	001a      	movs	r2, r3
10051f64:	2101      	movs	r1, #1
10051f66:	2001      	movs	r0, #1
10051f68:	f002 fc23 	bl	100547b2 <aci_gap_set_advertising_enable>
10051f6c:	0003      	movs	r3, r0
10051f6e:	7023      	strb	r3, [r4, #0]
      break;
10051f70:	e029      	b.n	10051fc6 <APP_BLE_Procedure_Gap_Peripheral+0x192>
      status = aci_gap_set_advertising_enable(DISABLE, 0, NULL);
10051f72:	250f      	movs	r5, #15
10051f74:	197c      	adds	r4, r7, r5
10051f76:	2200      	movs	r2, #0
10051f78:	2100      	movs	r1, #0
10051f7a:	2000      	movs	r0, #0
10051f7c:	f002 fc19 	bl	100547b2 <aci_gap_set_advertising_enable>
10051f80:	0003      	movs	r3, r0
10051f82:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10051f84:	197b      	adds	r3, r7, r5
10051f86:	781b      	ldrb	r3, [r3, #0]
10051f88:	2b00      	cmp	r3, #0
10051f8a:	d11b      	bne.n	10051fc4 <APP_BLE_Procedure_Gap_Peripheral+0x190>
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
10051f8c:	697b      	ldr	r3, [r7, #20]
10051f8e:	b2da      	uxtb	r2, r3
10051f90:	4b10      	ldr	r3, [pc, #64]	@ (10051fd4 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
10051f92:	739a      	strb	r2, [r3, #14]
      break;
10051f94:	e016      	b.n	10051fc4 <APP_BLE_Procedure_Gap_Peripheral+0x190>
       status = aci_l2cap_connection_parameter_update_req(
10051f96:	4b0f      	ldr	r3, [pc, #60]	@ (10051fd4 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
10051f98:	8998      	ldrh	r0, [r3, #12]
10051f9a:	69fb      	ldr	r3, [r7, #28]
10051f9c:	b299      	uxth	r1, r3
10051f9e:	69bb      	ldr	r3, [r7, #24]
10051fa0:	b29a      	uxth	r2, r3
10051fa2:	697b      	ldr	r3, [r7, #20]
10051fa4:	b29d      	uxth	r5, r3
10051fa6:	693b      	ldr	r3, [r7, #16]
10051fa8:	b29b      	uxth	r3, r3
10051faa:	240f      	movs	r4, #15
10051fac:	193c      	adds	r4, r7, r4
10051fae:	9300      	str	r3, [sp, #0]
10051fb0:	002b      	movs	r3, r5
10051fb2:	f7fd f8e8 	bl	1004f186 <aci_l2cap_connection_parameter_update_req>
10051fb6:	0003      	movs	r3, r0
10051fb8:	7023      	strb	r3, [r4, #0]
      break;
10051fba:	e004      	b.n	10051fc6 <APP_BLE_Procedure_Gap_Peripheral+0x192>
      break;
10051fbc:	46c0      	nop			@ (mov r8, r8)
10051fbe:	e002      	b.n	10051fc6 <APP_BLE_Procedure_Gap_Peripheral+0x192>
      break;
10051fc0:	46c0      	nop			@ (mov r8, r8)
10051fc2:	e000      	b.n	10051fc6 <APP_BLE_Procedure_Gap_Peripheral+0x192>
      break;
10051fc4:	46c0      	nop			@ (mov r8, r8)
  }
  return;
10051fc6:	46c0      	nop			@ (mov r8, r8)
}
10051fc8:	46bd      	mov	sp, r7
10051fca:	b008      	add	sp, #32
10051fcc:	bdb0      	pop	{r4, r5, r7, pc}
10051fce:	46c0      	nop			@ (mov r8, r8)
10051fd0:	1006948c 	.word	0x1006948c
10051fd4:	20002328 	.word	0x20002328
10051fd8:	20002870 	.word	0x20002870

10051fdc <gap_cmd_resp_release>:
/* USER CODE BEGIN FD*/

/* USER CODE END FD*/

static void gap_cmd_resp_release(void)
{
10051fdc:	b580      	push	{r7, lr}
10051fde:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_PROC_GAP_COMPLETE);
10051fe0:	2001      	movs	r0, #1
10051fe2:	f002 fa95 	bl	10054510 <UTIL_SEQ_SetEvt>
  return;
10051fe6:	46c0      	nop			@ (mov r8, r8)
}
10051fe8:	46bd      	mov	sp, r7
10051fea:	bd80      	pop	{r7, pc}

10051fec <gap_cmd_resp_wait>:

static void gap_cmd_resp_wait(void)
{
10051fec:	b580      	push	{r7, lr}
10051fee:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_PROC_GAP_COMPLETE);
10051ff0:	2001      	movs	r0, #1
10051ff2:	f002 faab 	bl	1005454c <UTIL_SEQ_WaitEvt>
  return;
10051ff6:	46c0      	nop			@ (mov r8, r8)
}
10051ff8:	46bd      	mov	sp, r7
10051ffa:	bd80      	pop	{r7, pc}

10051ffc <USART_EventHandler>:
 * @brief  Event handler
 * @param  p_Event: Address of the buffer holding the p_Event
 * @retval Ack: Return whether the p_Event has been managed or not
 */
static BLEEVT_EvtAckStatus_t USART_EventHandler(aci_blecore_event *p_evt)
{
10051ffc:	b580      	push	{r7, lr}
10051ffe:	b08e      	sub	sp, #56	@ 0x38
10052000:	af00      	add	r7, sp, #0
10052002:	6078      	str	r0, [r7, #4]
  BLEEVT_EvtAckStatus_t return_value = BLEEVT_NoAck;
10052004:	2337      	movs	r3, #55	@ 0x37
10052006:	18fb      	adds	r3, r7, r3
10052008:	2200      	movs	r2, #0
1005200a:	701a      	strb	r2, [r3, #0]
  USART_NotificationEvt_t notification;
  /* USER CODE BEGIN Service1_EventHandler_1 */

  /* USER CODE END Service1_EventHandler_1 */

  switch(p_evt->ecode)
1005200c:	687b      	ldr	r3, [r7, #4]
1005200e:	781a      	ldrb	r2, [r3, #0]
10052010:	785b      	ldrb	r3, [r3, #1]
10052012:	021b      	lsls	r3, r3, #8
10052014:	4313      	orrs	r3, r2
10052016:	b29b      	uxth	r3, r3
10052018:	4a62      	ldr	r2, [pc, #392]	@ (100521a4 <USART_EventHandler+0x1a8>)
1005201a:	4694      	mov	ip, r2
1005201c:	4463      	add	r3, ip
1005201e:	2b19      	cmp	r3, #25
10052020:	d900      	bls.n	10052024 <USART_EventHandler+0x28>
10052022:	e0b1      	b.n	10052188 <USART_EventHandler+0x18c>
10052024:	009a      	lsls	r2, r3, #2
10052026:	4b60      	ldr	r3, [pc, #384]	@ (100521a8 <USART_EventHandler+0x1ac>)
10052028:	18d3      	adds	r3, r2, r3
1005202a:	681b      	ldr	r3, [r3, #0]
1005202c:	469f      	mov	pc, r3
    case ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
      p_attribute_modified = (aci_gatt_srv_attribute_modified_event_rp0*)p_evt->data;
1005202e:	687b      	ldr	r3, [r7, #4]
10052030:	3302      	adds	r3, #2
10052032:	623b      	str	r3, [r7, #32]
      notification.ConnectionHandle         = p_attribute_modified->Connection_Handle;
10052034:	6a3b      	ldr	r3, [r7, #32]
10052036:	781a      	ldrb	r2, [r3, #0]
10052038:	785b      	ldrb	r3, [r3, #1]
1005203a:	021b      	lsls	r3, r3, #8
1005203c:	4313      	orrs	r3, r2
1005203e:	b29a      	uxth	r2, r3
10052040:	210c      	movs	r1, #12
10052042:	187b      	adds	r3, r7, r1
10052044:	819a      	strh	r2, [r3, #12]
      notification.AttributeHandle          = p_attribute_modified->Attr_Handle;
10052046:	6a3b      	ldr	r3, [r7, #32]
10052048:	791a      	ldrb	r2, [r3, #4]
1005204a:	795b      	ldrb	r3, [r3, #5]
1005204c:	021b      	lsls	r3, r3, #8
1005204e:	4313      	orrs	r3, r2
10052050:	b29a      	uxth	r2, r3
10052052:	187b      	adds	r3, r7, r1
10052054:	81da      	strh	r2, [r3, #14]
      notification.DataTransfered.Length    = p_attribute_modified->Attr_Data_Length;
10052056:	6a3b      	ldr	r3, [r7, #32]
10052058:	799a      	ldrb	r2, [r3, #6]
1005205a:	79db      	ldrb	r3, [r3, #7]
1005205c:	021b      	lsls	r3, r3, #8
1005205e:	4313      	orrs	r3, r2
10052060:	b29b      	uxth	r3, r3
10052062:	b2da      	uxtb	r2, r3
10052064:	187b      	adds	r3, r7, r1
10052066:	721a      	strb	r2, [r3, #8]
      notification.DataTransfered.p_Payload = p_attribute_modified->Attr_Data;
10052068:	6a3b      	ldr	r3, [r7, #32]
1005206a:	3308      	adds	r3, #8
1005206c:	001a      	movs	r2, r3
1005206e:	187b      	adds	r3, r7, r1
10052070:	605a      	str	r2, [r3, #4]
      if(p_attribute_modified->Attr_Handle == (USART_Context.RxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10052072:	6a3b      	ldr	r3, [r7, #32]
10052074:	791a      	ldrb	r2, [r3, #4]
10052076:	795b      	ldrb	r3, [r3, #5]
10052078:	021b      	lsls	r3, r3, #8
1005207a:	4313      	orrs	r3, r2
1005207c:	b29b      	uxth	r3, r3
1005207e:	001a      	movs	r2, r3
10052080:	4b4a      	ldr	r3, [pc, #296]	@ (100521ac <USART_EventHandler+0x1b0>)
10052082:	889b      	ldrh	r3, [r3, #4]
10052084:	3301      	adds	r3, #1
10052086:	429a      	cmp	r2, r3
10052088:	d10b      	bne.n	100520a2 <USART_EventHandler+0xa6>
      {
        return_value = BLEEVT_Ack;
1005208a:	2337      	movs	r3, #55	@ 0x37
1005208c:	18fb      	adds	r3, r7, r3
1005208e:	2201      	movs	r2, #1
10052090:	701a      	strb	r2, [r3, #0]

        notification.EvtOpcode = USART_RX_WRITE_NO_RESP_EVT;
10052092:	187b      	adds	r3, r7, r1
10052094:	2201      	movs	r2, #1
10052096:	701a      	strb	r2, [r3, #0]
        /* USER CODE BEGIN Service1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */

        /* USER CODE END Service1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
        USART_Notification(&notification);
10052098:	187b      	adds	r3, r7, r1
1005209a:	0018      	movs	r0, r3
1005209c:	f000 f914 	bl	100522c8 <USART_Notification>
      } /* if(p_attribute_modified->Attr_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
100520a0:	e074      	b.n	1005218c <USART_EventHandler+0x190>
      else if(p_attribute_modified->Attr_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
100520a2:	6a3b      	ldr	r3, [r7, #32]
100520a4:	791a      	ldrb	r2, [r3, #4]
100520a6:	795b      	ldrb	r3, [r3, #5]
100520a8:	021b      	lsls	r3, r3, #8
100520aa:	4313      	orrs	r3, r2
100520ac:	b29b      	uxth	r3, r3
100520ae:	001a      	movs	r2, r3
100520b0:	4b3e      	ldr	r3, [pc, #248]	@ (100521ac <USART_EventHandler+0x1b0>)
100520b2:	88db      	ldrh	r3, [r3, #6]
100520b4:	3301      	adds	r3, #1
100520b6:	429a      	cmp	r2, r3
100520b8:	d168      	bne.n	1005218c <USART_EventHandler+0x190>
        return_value = BLEEVT_Ack;
100520ba:	2337      	movs	r3, #55	@ 0x37
100520bc:	18fb      	adds	r3, r7, r3
100520be:	2201      	movs	r2, #1
100520c0:	701a      	strb	r2, [r3, #0]
        notification.EvtOpcode = USART_REQ_TX_WRITE_EVT;
100520c2:	210c      	movs	r1, #12
100520c4:	187b      	adds	r3, r7, r1
100520c6:	2203      	movs	r2, #3
100520c8:	701a      	strb	r2, [r3, #0]
        USART_Notification(&notification);
100520ca:	187b      	adds	r3, r7, r1
100520cc:	0018      	movs	r0, r3
100520ce:	f000 f8fb 	bl	100522c8 <USART_Notification>
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
100520d2:	e05b      	b.n	1005218c <USART_EventHandler+0x190>
    case ACI_GATT_SRV_READ_VSEVT_CODE :
    {
      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_READ_BEGIN */

      /* USER CODE END EVT_BLUE_GATT_SRV_READ_BEGIN */
      p_read = (aci_gatt_srv_read_event_rp0*)p_evt->data;
100520d4:	687b      	ldr	r3, [r7, #4]
100520d6:	3302      	adds	r3, #2
100520d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if(p_read->Attribute_Handle == (USART_Context.TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
100520da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100520dc:	791a      	ldrb	r2, [r3, #4]
100520de:	795b      	ldrb	r3, [r3, #5]
100520e0:	021b      	lsls	r3, r3, #8
100520e2:	4313      	orrs	r3, r2
100520e4:	b29b      	uxth	r3, r3
100520e6:	001a      	movs	r2, r3
100520e8:	4b30      	ldr	r3, [pc, #192]	@ (100521ac <USART_EventHandler+0x1b0>)
100520ea:	885b      	ldrh	r3, [r3, #2]
100520ec:	3301      	adds	r3, #1
100520ee:	429a      	cmp	r2, r3
100520f0:	d10c      	bne.n	1005210c <USART_EventHandler+0x110>
	  {
		return_value = BLEEVT_Ack;
100520f2:	2337      	movs	r3, #55	@ 0x37
100520f4:	18fb      	adds	r3, r7, r3
100520f6:	2201      	movs	r2, #1
100520f8:	701a      	strb	r2, [r3, #0]
		/*USER CODE BEGIN Service1_Char_1_ACI_GATT_SRV_READ_VSEVT_CODE_1 */
		notification.EvtOpcode = USART_TX_READ_EVT;
100520fa:	210c      	movs	r1, #12
100520fc:	187b      	adds	r3, r7, r1
100520fe:	2200      	movs	r2, #0
10052100:	701a      	strb	r2, [r3, #0]
		USART_Notification(&notification);
10052102:	187b      	adds	r3, r7, r1
10052104:	0018      	movs	r0, r3
10052106:	f000 f8df 	bl	100522c8 <USART_Notification>
	  } /* if(p_read->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_READ_END */

      /* USER CODE END EVT_EVT_BLUE_GATT_SRV_READ_END */
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
1005210a:	e041      	b.n	10052190 <USART_EventHandler+0x194>
	  else if(p_read->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
1005210c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1005210e:	791a      	ldrb	r2, [r3, #4]
10052110:	795b      	ldrb	r3, [r3, #5]
10052112:	021b      	lsls	r3, r3, #8
10052114:	4313      	orrs	r3, r2
10052116:	b29b      	uxth	r3, r3
10052118:	001a      	movs	r2, r3
1005211a:	4b24      	ldr	r3, [pc, #144]	@ (100521ac <USART_EventHandler+0x1b0>)
1005211c:	88db      	ldrh	r3, [r3, #6]
1005211e:	3301      	adds	r3, #1
10052120:	429a      	cmp	r2, r3
10052122:	d135      	bne.n	10052190 <USART_EventHandler+0x194>
		return_value = BLEEVT_Ack;
10052124:	2337      	movs	r3, #55	@ 0x37
10052126:	18fb      	adds	r3, r7, r3
10052128:	2201      	movs	r2, #1
1005212a:	701a      	strb	r2, [r3, #0]
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
1005212c:	e030      	b.n	10052190 <USART_EventHandler+0x194>
    case ACI_GATT_SRV_WRITE_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_SRV_GATT_BEGIN */

      /* USER CODE END EVT_BLUE_SRV_GATT_BEGIN */
      p_write = (aci_gatt_srv_write_event_rp0*)p_evt->data;
1005212e:	687b      	ldr	r3, [r7, #4]
10052130:	3302      	adds	r3, #2
10052132:	633b      	str	r3, [r7, #48]	@ 0x30
      if(p_write->Attribute_Handle == (USART_Context.RxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10052134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10052136:	795a      	ldrb	r2, [r3, #5]
10052138:	799b      	ldrb	r3, [r3, #6]
1005213a:	021b      	lsls	r3, r3, #8
1005213c:	4313      	orrs	r3, r2
1005213e:	b29b      	uxth	r3, r3
10052140:	001a      	movs	r2, r3
10052142:	4b1a      	ldr	r3, [pc, #104]	@ (100521ac <USART_EventHandler+0x1b0>)
10052144:	889b      	ldrh	r3, [r3, #4]
10052146:	3301      	adds	r3, #1
10052148:	429a      	cmp	r2, r3
1005214a:	d104      	bne.n	10052156 <USART_EventHandler+0x15a>
      {
        return_value = BLEEVT_Ack;
1005214c:	2337      	movs	r3, #55	@ 0x37
1005214e:	18fb      	adds	r3, r7, r3
10052150:	2201      	movs	r2, #1
10052152:	701a      	strb	r2, [r3, #0]
      } /*if(p_write->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_WRITE_END */

      /* USER CODE END EVT_BLUE_GATT_SRV_WRITE_END */
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
10052154:	e01e      	b.n	10052194 <USART_EventHandler+0x198>
      else if(p_write->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10052156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10052158:	795a      	ldrb	r2, [r3, #5]
1005215a:	799b      	ldrb	r3, [r3, #6]
1005215c:	021b      	lsls	r3, r3, #8
1005215e:	4313      	orrs	r3, r2
10052160:	b29b      	uxth	r3, r3
10052162:	001a      	movs	r2, r3
10052164:	4b11      	ldr	r3, [pc, #68]	@ (100521ac <USART_EventHandler+0x1b0>)
10052166:	88db      	ldrh	r3, [r3, #6]
10052168:	3301      	adds	r3, #1
1005216a:	429a      	cmp	r2, r3
1005216c:	d112      	bne.n	10052194 <USART_EventHandler+0x198>
        return_value = BLEEVT_Ack;
1005216e:	2337      	movs	r3, #55	@ 0x37
10052170:	18fb      	adds	r3, r7, r3
10052172:	2201      	movs	r2, #1
10052174:	701a      	strb	r2, [r3, #0]
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
10052176:	e00d      	b.n	10052194 <USART_EventHandler+0x198>
    }
    case ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE:
    {
      aci_gatt_tx_pool_available_event_rp0 *p_tx_pool_available_event;
      p_tx_pool_available_event = (aci_gatt_tx_pool_available_event_rp0 *) p_evt->data;
10052178:	687b      	ldr	r3, [r7, #4]
1005217a:	3302      	adds	r3, #2
1005217c:	62bb      	str	r3, [r7, #40]	@ 0x28
      UNUSED(p_tx_pool_available_event);

      /* USER CODE BEGIN ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */

      /* USER CODE END ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */
      break;/* ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE*/
1005217e:	e00a      	b.n	10052196 <USART_EventHandler+0x19a>
    }
    case ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE:
    {
      aci_att_exchange_mtu_resp_event_rp0 *p_exchange_mtu;
      p_exchange_mtu = (aci_att_exchange_mtu_resp_event_rp0 *)  p_evt->data;
10052180:	687b      	ldr	r3, [r7, #4]
10052182:	3302      	adds	r3, #2
10052184:	627b      	str	r3, [r7, #36]	@ 0x24
      UNUSED(p_exchange_mtu);

      /* USER CODE BEGIN ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */

      /* USER CODE END ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
      break;/* ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
10052186:	e006      	b.n	10052196 <USART_EventHandler+0x19a>
    /* USER CODE END BLECORE_EVT */
  default:
    /* USER CODE BEGIN EVT_DEFAULT */

    /* USER CODE END EVT_DEFAULT */
    break;
10052188:	46c0      	nop			@ (mov r8, r8)
1005218a:	e004      	b.n	10052196 <USART_EventHandler+0x19a>
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
1005218c:	46c0      	nop			@ (mov r8, r8)
1005218e:	e002      	b.n	10052196 <USART_EventHandler+0x19a>
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
10052190:	46c0      	nop			@ (mov r8, r8)
10052192:	e000      	b.n	10052196 <USART_EventHandler+0x19a>
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
10052194:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_EventHandler_2 */

  /* USER CODE END Service1_EventHandler_2 */

  return(return_value);
10052196:	2337      	movs	r3, #55	@ 0x37
10052198:	18fb      	adds	r3, r7, r3
1005219a:	781b      	ldrb	r3, [r3, #0]
}/* end USART_EventHandler */
1005219c:	0018      	movs	r0, r3
1005219e:	46bd      	mov	sp, r7
100521a0:	b00e      	add	sp, #56	@ 0x38
100521a2:	bd80      	pop	{r7, pc}
100521a4:	fffff3ff 	.word	0xfffff3ff
100521a8:	10069538 	.word	0x10069538
100521ac:	2000233c 	.word	0x2000233c

100521b0 <USART_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void USART_Init(void)
{
100521b0:	b590      	push	{r4, r7, lr}
100521b2:	b083      	sub	sp, #12
100521b4:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
100521b6:	1dfb      	adds	r3, r7, #7
100521b8:	2212      	movs	r2, #18
100521ba:	701a      	strb	r2, [r3, #0]
  /* USER CODE END InitService1Svc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  BLEEVT_RegisterGattEvtHandler(USART_EventHandler);
100521bc:	4b17      	ldr	r3, [pc, #92]	@ (1005221c <USART_Init+0x6c>)
100521be:	0018      	movs	r0, r3
100521c0:	f7fc fbf6 	bl	1004e9b0 <BLEEVT_RegisterGattEvtHandler>

  ret = aci_gatt_srv_add_service((ble_gatt_srv_def_t *)&usart_service);
100521c4:	1dfc      	adds	r4, r7, #7
100521c6:	4b16      	ldr	r3, [pc, #88]	@ (10052220 <USART_Init+0x70>)
100521c8:	0018      	movs	r0, r3
100521ca:	f7fc ff79 	bl	1004f0c0 <aci_gatt_srv_add_service>
100521ce:	0003      	movs	r3, r0
100521d0:	7023      	strb	r3, [r4, #0]
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_srv_add_service command: USART \n");
  }

  USART_Context.UsartSvcHdle = aci_gatt_srv_get_service_handle((ble_gatt_srv_def_t *) &usart_service);
100521d2:	4b13      	ldr	r3, [pc, #76]	@ (10052220 <USART_Init+0x70>)
100521d4:	0018      	movs	r0, r3
100521d6:	f7fc ff80 	bl	1004f0da <aci_gatt_srv_get_service_handle>
100521da:	0003      	movs	r3, r0
100521dc:	001a      	movs	r2, r3
100521de:	4b11      	ldr	r3, [pc, #68]	@ (10052224 <USART_Init+0x74>)
100521e0:	801a      	strh	r2, [r3, #0]
  USART_Context.TxCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&usart_chars[0]);
100521e2:	4b11      	ldr	r3, [pc, #68]	@ (10052228 <USART_Init+0x78>)
100521e4:	0018      	movs	r0, r3
100521e6:	f7fc ff98 	bl	1004f11a <aci_gatt_srv_get_char_decl_handle>
100521ea:	0003      	movs	r3, r0
100521ec:	001a      	movs	r2, r3
100521ee:	4b0d      	ldr	r3, [pc, #52]	@ (10052224 <USART_Init+0x74>)
100521f0:	805a      	strh	r2, [r3, #2]
  USART_Context.RxCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&usart_chars[1]);
100521f2:	4b0e      	ldr	r3, [pc, #56]	@ (1005222c <USART_Init+0x7c>)
100521f4:	0018      	movs	r0, r3
100521f6:	f7fc ff90 	bl	1004f11a <aci_gatt_srv_get_char_decl_handle>
100521fa:	0003      	movs	r3, r0
100521fc:	001a      	movs	r2, r3
100521fe:	4b09      	ldr	r3, [pc, #36]	@ (10052224 <USART_Init+0x74>)
10052200:	809a      	strh	r2, [r3, #4]
  USART_Context.Req_TxCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&usart_chars[2]);
10052202:	4b0b      	ldr	r3, [pc, #44]	@ (10052230 <USART_Init+0x80>)
10052204:	0018      	movs	r0, r3
10052206:	f7fc ff88 	bl	1004f11a <aci_gatt_srv_get_char_decl_handle>
1005220a:	0003      	movs	r3, r0
1005220c:	001a      	movs	r2, r3
1005220e:	4b05      	ldr	r3, [pc, #20]	@ (10052224 <USART_Init+0x74>)
10052210:	80da      	strh	r2, [r3, #6]
  if (ret != BLE_STATUS_SUCCESS)
  {
    APP_DBG_MSG("  Fail registering USART handlers\n");
  }

  return;
10052212:	46c0      	nop			@ (mov r8, r8)
}
10052214:	46bd      	mov	sp, r7
10052216:	b003      	add	sp, #12
10052218:	bd90      	pop	{r4, r7, pc}
1005221a:	46c0      	nop			@ (mov r8, r8)
1005221c:	10051ffd 	.word	0x10051ffd
10052220:	10069510 	.word	0x10069510
10052224:	2000233c 	.word	0x2000233c
10052228:	100694a4 	.word	0x100694a4
1005222c:	100694c8 	.word	0x100694c8
10052230:	100694ec 	.word	0x100694ec

10052234 <USART_UpdateValue>:
 * @param  CharOpcode: Characteristic identifier
 * @param  pData: pointer to the new data to be written in the characteristic
 *
 */
tBleStatus USART_UpdateValue(USART_CharOpcode_t CharOpcode, USART_Data_t *pData)
{
10052234:	b580      	push	{r7, lr}
10052236:	b084      	sub	sp, #16
10052238:	af00      	add	r7, sp, #0
1005223a:	0002      	movs	r2, r0
1005223c:	6039      	str	r1, [r7, #0]
1005223e:	1dfb      	adds	r3, r7, #7
10052240:	701a      	strb	r2, [r3, #0]
  tBleStatus ret = BLE_STATUS_SUCCESS;
10052242:	230f      	movs	r3, #15
10052244:	18fb      	adds	r3, r7, r3
10052246:	2200      	movs	r2, #0
10052248:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Service1_App_Update_Char_1 */

  /* USER CODE END Service1_App_Update_Char_1 */

  switch(CharOpcode)
1005224a:	1dfb      	adds	r3, r7, #7
1005224c:	781b      	ldrb	r3, [r3, #0]
1005224e:	2b02      	cmp	r3, #2
10052250:	d01f      	beq.n	10052292 <USART_UpdateValue+0x5e>
10052252:	dc2b      	bgt.n	100522ac <USART_UpdateValue+0x78>
10052254:	2b00      	cmp	r3, #0
10052256:	d002      	beq.n	1005225e <USART_UpdateValue+0x2a>
10052258:	2b01      	cmp	r3, #1
1005225a:	d00d      	beq.n	10052278 <USART_UpdateValue+0x44>

      /* USER CODE END Service1_Char_Value_3*/
      break;

    default:
      break;
1005225c:	e026      	b.n	100522ac <USART_UpdateValue+0x78>
      memcpy(tx_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(tx_val_buffer)));
1005225e:	683b      	ldr	r3, [r7, #0]
10052260:	6819      	ldr	r1, [r3, #0]
10052262:	683b      	ldr	r3, [r7, #0]
10052264:	791b      	ldrb	r3, [r3, #4]
10052266:	1e5a      	subs	r2, r3, #1
10052268:	4193      	sbcs	r3, r2
1005226a:	b2db      	uxtb	r3, r3
1005226c:	001a      	movs	r2, r3
1005226e:	4b13      	ldr	r3, [pc, #76]	@ (100522bc <USART_UpdateValue+0x88>)
10052270:	0018      	movs	r0, r3
10052272:	f015 fc68 	bl	10067b46 <memcpy>
      break;
10052276:	e01a      	b.n	100522ae <USART_UpdateValue+0x7a>
      memcpy(rx_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(rx_val_buffer)));
10052278:	683b      	ldr	r3, [r7, #0]
1005227a:	6819      	ldr	r1, [r3, #0]
1005227c:	683b      	ldr	r3, [r7, #0]
1005227e:	791b      	ldrb	r3, [r3, #4]
10052280:	1e5a      	subs	r2, r3, #1
10052282:	4193      	sbcs	r3, r2
10052284:	b2db      	uxtb	r3, r3
10052286:	001a      	movs	r2, r3
10052288:	4b0d      	ldr	r3, [pc, #52]	@ (100522c0 <USART_UpdateValue+0x8c>)
1005228a:	0018      	movs	r0, r3
1005228c:	f015 fc5b 	bl	10067b46 <memcpy>
      break;
10052290:	e00d      	b.n	100522ae <USART_UpdateValue+0x7a>
      memcpy(req_tx_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(req_tx_val_buffer)));
10052292:	683b      	ldr	r3, [r7, #0]
10052294:	6819      	ldr	r1, [r3, #0]
10052296:	683b      	ldr	r3, [r7, #0]
10052298:	791b      	ldrb	r3, [r3, #4]
1005229a:	1e5a      	subs	r2, r3, #1
1005229c:	4193      	sbcs	r3, r2
1005229e:	b2db      	uxtb	r3, r3
100522a0:	001a      	movs	r2, r3
100522a2:	4b08      	ldr	r3, [pc, #32]	@ (100522c4 <USART_UpdateValue+0x90>)
100522a4:	0018      	movs	r0, r3
100522a6:	f015 fc4e 	bl	10067b46 <memcpy>
      break;
100522aa:	e000      	b.n	100522ae <USART_UpdateValue+0x7a>
      break;
100522ac:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_App_Update_Char_2 */

  /* USER CODE END Service1_App_Update_Char_2 */

  return ret;
100522ae:	230f      	movs	r3, #15
100522b0:	18fb      	adds	r3, r7, r3
100522b2:	781b      	ldrb	r3, [r3, #0]
}
100522b4:	0018      	movs	r0, r3
100522b6:	46bd      	mov	sp, r7
100522b8:	b004      	add	sp, #16
100522ba:	bd80      	pop	{r7, pc}
100522bc:	20002344 	.word	0x20002344
100522c0:	20002348 	.word	0x20002348
100522c4:	2000234c 	.word	0x2000234c

100522c8 <USART_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void USART_Notification(USART_NotificationEvt_t *p_Notification)
{
100522c8:	b5b0      	push	{r4, r5, r7, lr}
100522ca:	b08e      	sub	sp, #56	@ 0x38
100522cc:	af00      	add	r7, sp, #0
100522ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service1_Notification_1 */

  /* USER CODE END Service1_Notification_1 */
  switch(p_Notification->EvtOpcode)
100522d0:	687b      	ldr	r3, [r7, #4]
100522d2:	781b      	ldrb	r3, [r3, #0]
100522d4:	2b03      	cmp	r3, #3
100522d6:	d017      	beq.n	10052308 <USART_Notification+0x40>
100522d8:	dc56      	bgt.n	10052388 <USART_Notification+0xc0>
100522da:	2b02      	cmp	r3, #2
100522dc:	d056      	beq.n	1005238c <USART_Notification+0xc4>
100522de:	dc53      	bgt.n	10052388 <USART_Notification+0xc0>
100522e0:	2b00      	cmp	r3, #0
100522e2:	d055      	beq.n	10052390 <USART_Notification+0xc8>
100522e4:	2b01      	cmp	r3, #1
100522e6:	d000      	beq.n	100522ea <USART_Notification+0x22>

    default:
      /* USER CODE BEGIN Service1_Notification_default */

      /* USER CODE END Service1_Notification_default */
      break;
100522e8:	e04e      	b.n	10052388 <USART_Notification+0xc0>
      Event_t recieved = {EVENT_USART, p_Notification->DataTransfered.p_Payload[0]};
100522ea:	2130      	movs	r1, #48	@ 0x30
100522ec:	187b      	adds	r3, r7, r1
100522ee:	2206      	movs	r2, #6
100522f0:	701a      	strb	r2, [r3, #0]
100522f2:	687b      	ldr	r3, [r7, #4]
100522f4:	685b      	ldr	r3, [r3, #4]
100522f6:	781b      	ldrb	r3, [r3, #0]
100522f8:	001a      	movs	r2, r3
100522fa:	187b      	adds	r3, r7, r1
100522fc:	805a      	strh	r2, [r3, #2]
      COMM_Event_Post(recieved);
100522fe:	187b      	adds	r3, r7, r1
10052300:	6818      	ldr	r0, [r3, #0]
10052302:	f7f1 fa33 	bl	1004376c <COMM_Event_Post>
      break;
10052306:	e044      	b.n	10052392 <USART_Notification+0xca>
        int16_t data = BLUETOOTH_ReadBuffer();
10052308:	2536      	movs	r5, #54	@ 0x36
1005230a:	197c      	adds	r4, r7, r5
1005230c:	f7ef fbc2 	bl	10041a94 <BLUETOOTH_ReadBuffer>
10052310:	0003      	movs	r3, r0
10052312:	8023      	strh	r3, [r4, #0]
        if(data != -1){
10052314:	002a      	movs	r2, r5
10052316:	18bb      	adds	r3, r7, r2
10052318:	2100      	movs	r1, #0
1005231a:	5e5b      	ldrsh	r3, [r3, r1]
1005231c:	3301      	adds	r3, #1
1005231e:	d022      	beq.n	10052366 <USART_Notification+0x9e>
        	uint8_t data1 = (uint8_t)data;
10052320:	18bb      	adds	r3, r7, r2
10052322:	881b      	ldrh	r3, [r3, #0]
10052324:	b2da      	uxtb	r2, r3
10052326:	202f      	movs	r0, #47	@ 0x2f
10052328:	183b      	adds	r3, r7, r0
1005232a:	701a      	strb	r2, [r3, #0]
			USART_Data_t value1 = {&data1, 1};
1005232c:	2124      	movs	r1, #36	@ 0x24
1005232e:	187b      	adds	r3, r7, r1
10052330:	183a      	adds	r2, r7, r0
10052332:	601a      	str	r2, [r3, #0]
10052334:	187b      	adds	r3, r7, r1
10052336:	2201      	movs	r2, #1
10052338:	711a      	strb	r2, [r3, #4]
			USART_UpdateValue(USART_TX, &value1);
1005233a:	187b      	adds	r3, r7, r1
1005233c:	0019      	movs	r1, r3
1005233e:	2000      	movs	r0, #0
10052340:	f7ff ff78 	bl	10052234 <USART_UpdateValue>
			uint8_t data2 = 0;
10052344:	2023      	movs	r0, #35	@ 0x23
10052346:	183b      	adds	r3, r7, r0
10052348:	2200      	movs	r2, #0
1005234a:	701a      	strb	r2, [r3, #0]
			USART_Data_t value2 = {&data2, 1};
1005234c:	2118      	movs	r1, #24
1005234e:	187b      	adds	r3, r7, r1
10052350:	183a      	adds	r2, r7, r0
10052352:	601a      	str	r2, [r3, #0]
10052354:	187b      	adds	r3, r7, r1
10052356:	2201      	movs	r2, #1
10052358:	711a      	strb	r2, [r3, #4]
			USART_UpdateValue(USART_REQ_TX, &value2);
1005235a:	187b      	adds	r3, r7, r1
1005235c:	0019      	movs	r1, r3
1005235e:	2002      	movs	r0, #2
10052360:	f7ff ff68 	bl	10052234 <USART_UpdateValue>
      break;
10052364:	e015      	b.n	10052392 <USART_Notification+0xca>
			uint8_t data2 = 2;
10052366:	2017      	movs	r0, #23
10052368:	183b      	adds	r3, r7, r0
1005236a:	2202      	movs	r2, #2
1005236c:	701a      	strb	r2, [r3, #0]
			USART_Data_t value2 = {&data2, 1};
1005236e:	210c      	movs	r1, #12
10052370:	187b      	adds	r3, r7, r1
10052372:	183a      	adds	r2, r7, r0
10052374:	601a      	str	r2, [r3, #0]
10052376:	187b      	adds	r3, r7, r1
10052378:	2201      	movs	r2, #1
1005237a:	711a      	strb	r2, [r3, #4]
			USART_UpdateValue(USART_REQ_TX, &value2);
1005237c:	187b      	adds	r3, r7, r1
1005237e:	0019      	movs	r1, r3
10052380:	2002      	movs	r0, #2
10052382:	f7ff ff57 	bl	10052234 <USART_UpdateValue>
      break;
10052386:	e004      	b.n	10052392 <USART_Notification+0xca>
      break;
10052388:	46c0      	nop			@ (mov r8, r8)
1005238a:	e002      	b.n	10052392 <USART_Notification+0xca>
      break;
1005238c:	46c0      	nop			@ (mov r8, r8)
1005238e:	e000      	b.n	10052392 <USART_Notification+0xca>
      break;
10052390:	46c0      	nop			@ (mov r8, r8)
  }
  /* USER CODE BEGIN Service1_Notification_2 */

  /* USER CODE END Service1_Notification_2 */
  return;
10052392:	46c0      	nop			@ (mov r8, r8)
}
10052394:	46bd      	mov	sp, r7
10052396:	b00e      	add	sp, #56	@ 0x38
10052398:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005239c <USART_APP_EvtRx>:

void USART_APP_EvtRx(USART_APP_ConnHandleNotEvt_t *p_Notification)
{
1005239c:	b580      	push	{r7, lr}
1005239e:	b082      	sub	sp, #8
100523a0:	af00      	add	r7, sp, #0
100523a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service1_APP_EvtRx_1 */

  /* USER CODE END Service1_APP_EvtRx_1 */

  switch(p_Notification->EvtOpcode)
100523a4:	687b      	ldr	r3, [r7, #4]
100523a6:	781b      	ldrb	r3, [r3, #0]
100523a8:	2b00      	cmp	r3, #0
100523aa:	d002      	beq.n	100523b2 <USART_APP_EvtRx+0x16>
100523ac:	2b01      	cmp	r3, #1
100523ae:	d005      	beq.n	100523bc <USART_APP_EvtRx+0x20>
      break;
    default:
      /* USER CODE BEGIN Service1_APP_EvtRx_default */

      /* USER CODE END Service1_APP_EvtRx_default */
      break;
100523b0:	e00c      	b.n	100523cc <USART_APP_EvtRx+0x30>
      USART_APP_Context.ConnectionHandle = p_Notification->ConnectionHandle;
100523b2:	687b      	ldr	r3, [r7, #4]
100523b4:	885a      	ldrh	r2, [r3, #2]
100523b6:	4b07      	ldr	r3, [pc, #28]	@ (100523d4 <USART_APP_EvtRx+0x38>)
100523b8:	801a      	strh	r2, [r3, #0]
      break;
100523ba:	e007      	b.n	100523cc <USART_APP_EvtRx+0x30>
      USART_APP_Context.ConnectionHandle = 0xFFFF;
100523bc:	4b05      	ldr	r3, [pc, #20]	@ (100523d4 <USART_APP_EvtRx+0x38>)
100523be:	2201      	movs	r2, #1
100523c0:	4252      	negs	r2, r2
100523c2:	801a      	strh	r2, [r3, #0]
            APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
100523c4:	2001      	movs	r0, #1
100523c6:	f7ff fd35 	bl	10051e34 <APP_BLE_Procedure_Gap_Peripheral>
      break;
100523ca:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_APP_EvtRx_2 */

  /* USER CODE END Service1_APP_EvtRx_2 */

  return;
100523cc:	46c0      	nop			@ (mov r8, r8)
}
100523ce:	46bd      	mov	sp, r7
100523d0:	b002      	add	sp, #8
100523d2:	bd80      	pop	{r7, pc}
100523d4:	20002350 	.word	0x20002350

100523d8 <USART_APP_Init>:

void USART_APP_Init(void)
{
100523d8:	b580      	push	{r7, lr}
100523da:	af00      	add	r7, sp, #0
  USART_APP_Context.ConnectionHandle = 0xFFFF;
100523dc:	4b04      	ldr	r3, [pc, #16]	@ (100523f0 <USART_APP_Init+0x18>)
100523de:	2201      	movs	r2, #1
100523e0:	4252      	negs	r2, r2
100523e2:	801a      	strh	r2, [r3, #0]
  USART_Init();
100523e4:	f7ff fee4 	bl	100521b0 <USART_Init>

  /* USER CODE BEGIN Service1_APP_Init */

  /* USER CODE END Service1_APP_Init */
  return;
100523e8:	46c0      	nop			@ (mov r8, r8)
}
100523ea:	46bd      	mov	sp, r7
100523ec:	bd80      	pop	{r7, pc}
100523ee:	46c0      	nop			@ (mov r8, r8)
100523f0:	20002350 	.word	0x20002350

100523f4 <BLENVM_Init>:
/** @defgroup NVM_UpperLayer_Public_Functions Public Functions
 * @{
 */

void BLENVM_Init(void)
{
100523f4:	b580      	push	{r7, lr}
100523f6:	af00      	add	r7, sp, #0
  NVMDB_Init();
100523f8:	f7fe f9ac 	bl	10050754 <NVMDB_Init>

  NVMDB_HandleInit(SEC_GATT_BD, &sec_gatt_db_h);
100523fc:	4b07      	ldr	r3, [pc, #28]	@ (1005241c <BLENVM_Init+0x28>)
100523fe:	0019      	movs	r1, r3
10052400:	2000      	movs	r0, #0
10052402:	f7fe fb05 	bl	10050a10 <NVMDB_HandleInit>
  NVMDB_HandleInit(DEVICE_ID_DB, &device_id_db_h);
10052406:	4b06      	ldr	r3, [pc, #24]	@ (10052420 <BLENVM_Init+0x2c>)
10052408:	0019      	movs	r1, r3
1005240a:	2001      	movs	r0, #1
1005240c:	f7fe fb00 	bl	10050a10 <NVMDB_HandleInit>
  curr_handle_p = &sec_gatt_db_h;
10052410:	4b04      	ldr	r3, [pc, #16]	@ (10052424 <BLENVM_Init+0x30>)
10052412:	4a02      	ldr	r2, [pc, #8]	@ (1005241c <BLENVM_Init+0x28>)
10052414:	601a      	str	r2, [r3, #0]
}
10052416:	46c0      	nop			@ (mov r8, r8)
10052418:	46bd      	mov	sp, r7
1005241a:	bd80      	pop	{r7, pc}
1005241c:	20002354 	.word	0x20002354
10052420:	20002364 	.word	0x20002364
10052424:	20002374 	.word	0x20002374

10052428 <BLEPLAT_NvmAdd>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmAdd(BLEPLAT_NvmRecordTypeDef Type,
                                        const uint8_t* pData,
                                        uint16_t Size,
                                        const uint8_t* pExtraData,
                                        uint16_t ExtraSize)
{
10052428:	b5f0      	push	{r4, r5, r6, r7, lr}
1005242a:	b089      	sub	sp, #36	@ 0x24
1005242c:	af02      	add	r7, sp, #8
1005242e:	60b9      	str	r1, [r7, #8]
10052430:	0011      	movs	r1, r2
10052432:	607b      	str	r3, [r7, #4]
10052434:	240f      	movs	r4, #15
10052436:	193b      	adds	r3, r7, r4
10052438:	1c02      	adds	r2, r0, #0
1005243a:	701a      	strb	r2, [r3, #0]
1005243c:	230c      	movs	r3, #12
1005243e:	18fb      	adds	r3, r7, r3
10052440:	1c0a      	adds	r2, r1, #0
10052442:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t ret;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
10052444:	193b      	adds	r3, r7, r4
10052446:	781b      	ldrb	r3, [r3, #0]
10052448:	2b02      	cmp	r3, #2
1005244a:	d103      	bne.n	10052454 <BLEPLAT_NvmAdd+0x2c>
  {
    curr_handle_p = &device_id_db_h;
1005244c:	4b1a      	ldr	r3, [pc, #104]	@ (100524b8 <BLEPLAT_NvmAdd+0x90>)
1005244e:	4a1b      	ldr	r2, [pc, #108]	@ (100524bc <BLEPLAT_NvmAdd+0x94>)
10052450:	601a      	str	r2, [r3, #0]
10052452:	e002      	b.n	1005245a <BLEPLAT_NvmAdd+0x32>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
10052454:	4b18      	ldr	r3, [pc, #96]	@ (100524b8 <BLEPLAT_NvmAdd+0x90>)
10052456:	4a1a      	ldr	r2, [pc, #104]	@ (100524c0 <BLEPLAT_NvmAdd+0x98>)
10052458:	601a      	str	r2, [r3, #0]
  }

  DEBUG_GPIO2_HIGH();

  ret = NVMDB_AppendRecord(curr_handle_p, Type, Size, pData, ExtraSize, pExtraData);
1005245a:	4b17      	ldr	r3, [pc, #92]	@ (100524b8 <BLEPLAT_NvmAdd+0x90>)
1005245c:	6818      	ldr	r0, [r3, #0]
1005245e:	2617      	movs	r6, #23
10052460:	19bc      	adds	r4, r7, r6
10052462:	68bd      	ldr	r5, [r7, #8]
10052464:	230c      	movs	r3, #12
10052466:	18fb      	adds	r3, r7, r3
10052468:	881b      	ldrh	r3, [r3, #0]
1005246a:	469c      	mov	ip, r3
1005246c:	230f      	movs	r3, #15
1005246e:	18fb      	adds	r3, r7, r3
10052470:	7819      	ldrb	r1, [r3, #0]
10052472:	687b      	ldr	r3, [r7, #4]
10052474:	9301      	str	r3, [sp, #4]
10052476:	2328      	movs	r3, #40	@ 0x28
10052478:	2208      	movs	r2, #8
1005247a:	189b      	adds	r3, r3, r2
1005247c:	19db      	adds	r3, r3, r7
1005247e:	881b      	ldrh	r3, [r3, #0]
10052480:	9300      	str	r3, [sp, #0]
10052482:	002b      	movs	r3, r5
10052484:	4662      	mov	r2, ip
10052486:	f7fe fb65 	bl	10050b54 <NVMDB_AppendRecord>
1005248a:	0003      	movs	r3, r0
1005248c:	7023      	strb	r3, [r4, #0]

  DEBUG_GPIO2_LOW();

  if(ret == NVMDB_STATUS_OK)
1005248e:	19bb      	adds	r3, r7, r6
10052490:	781b      	ldrb	r3, [r3, #0]
10052492:	2b00      	cmp	r3, #0
10052494:	d101      	bne.n	1005249a <BLEPLAT_NvmAdd+0x72>
  {
    return BLEPLAT_OK;
10052496:	2300      	movs	r3, #0
10052498:	e009      	b.n	100524ae <BLEPLAT_NvmAdd+0x86>
  }

  if(ret == NVMDB_STATUS_FULL_DB)
1005249a:	2317      	movs	r3, #23
1005249c:	18fb      	adds	r3, r7, r3
1005249e:	781b      	ldrb	r3, [r3, #0]
100524a0:	2b02      	cmp	r3, #2
100524a2:	d102      	bne.n	100524aa <BLEPLAT_NvmAdd+0x82>
  {
    return BLEPLAT_FULL;
100524a4:	2301      	movs	r3, #1
100524a6:	425b      	negs	r3, r3
100524a8:	e001      	b.n	100524ae <BLEPLAT_NvmAdd+0x86>
  }

  return BLEPLAT_BUSY;
100524aa:	2302      	movs	r3, #2
100524ac:	425b      	negs	r3, r3
}
100524ae:	0018      	movs	r0, r3
100524b0:	46bd      	mov	sp, r7
100524b2:	b007      	add	sp, #28
100524b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100524b6:	46c0      	nop			@ (mov r8, r8)
100524b8:	20002374 	.word	0x20002374
100524bc:	20002364 	.word	0x20002364
100524c0:	20002354 	.word	0x20002354

100524c4 <BLEPLAT_NvmGet>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmGet(BLEPLAT_NvmSeekModeTypeDef Mode,
                                        BLEPLAT_NvmRecordTypeDef Type,
                                        uint16_t Offset,
                                        uint8_t* pData,
                                        uint16_t Size)
{
100524c4:	b5b0      	push	{r4, r5, r7, lr}
100524c6:	b086      	sub	sp, #24
100524c8:	af02      	add	r7, sp, #8
100524ca:	0004      	movs	r4, r0
100524cc:	0008      	movs	r0, r1
100524ce:	0011      	movs	r1, r2
100524d0:	603b      	str	r3, [r7, #0]
100524d2:	1dfb      	adds	r3, r7, #7
100524d4:	1c22      	adds	r2, r4, #0
100524d6:	701a      	strb	r2, [r3, #0]
100524d8:	1dbb      	adds	r3, r7, #6
100524da:	1c02      	adds	r2, r0, #0
100524dc:	701a      	strb	r2, [r3, #0]
100524de:	1d3b      	adds	r3, r7, #4
100524e0:	1c0a      	adds	r2, r1, #0
100524e2:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordSizeType size_out;
  NVMDB_status_t ret;
  NVMDB_IdType db_id;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
100524e4:	1dbb      	adds	r3, r7, #6
100524e6:	781b      	ldrb	r3, [r3, #0]
100524e8:	2b02      	cmp	r3, #2
100524ea:	d107      	bne.n	100524fc <BLEPLAT_NvmGet+0x38>
  {
    curr_handle_p = &device_id_db_h;
100524ec:	4b2e      	ldr	r3, [pc, #184]	@ (100525a8 <BLEPLAT_NvmGet+0xe4>)
100524ee:	4a2f      	ldr	r2, [pc, #188]	@ (100525ac <BLEPLAT_NvmGet+0xe8>)
100524f0:	601a      	str	r2, [r3, #0]
    db_id = 1;
100524f2:	230e      	movs	r3, #14
100524f4:	18fb      	adds	r3, r7, r3
100524f6:	2201      	movs	r2, #1
100524f8:	701a      	strb	r2, [r3, #0]
100524fa:	e006      	b.n	1005250a <BLEPLAT_NvmGet+0x46>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
100524fc:	4b2a      	ldr	r3, [pc, #168]	@ (100525a8 <BLEPLAT_NvmGet+0xe4>)
100524fe:	4a2c      	ldr	r2, [pc, #176]	@ (100525b0 <BLEPLAT_NvmGet+0xec>)
10052500:	601a      	str	r2, [r3, #0]
    db_id = 0;
10052502:	230e      	movs	r3, #14
10052504:	18fb      	adds	r3, r7, r3
10052506:	2200      	movs	r2, #0
10052508:	701a      	strb	r2, [r3, #0]
  }

  if(Mode == BLEPLAT_NVM_CURRENT)
1005250a:	1dfb      	adds	r3, r7, #7
1005250c:	781b      	ldrb	r3, [r3, #0]
1005250e:	2b02      	cmp	r3, #2
10052510:	d112      	bne.n	10052538 <BLEPLAT_NvmGet+0x74>
  {
    ret = NVMDB_ReadCurrentRecord(curr_handle_p, Offset, pData, Size, &size_out);
10052512:	4b25      	ldr	r3, [pc, #148]	@ (100525a8 <BLEPLAT_NvmGet+0xe4>)
10052514:	6818      	ldr	r0, [r3, #0]
10052516:	230f      	movs	r3, #15
10052518:	18fc      	adds	r4, r7, r3
1005251a:	2320      	movs	r3, #32
1005251c:	18fb      	adds	r3, r7, r3
1005251e:	881d      	ldrh	r5, [r3, #0]
10052520:	683a      	ldr	r2, [r7, #0]
10052522:	1d3b      	adds	r3, r7, #4
10052524:	8819      	ldrh	r1, [r3, #0]
10052526:	230c      	movs	r3, #12
10052528:	18fb      	adds	r3, r7, r3
1005252a:	9300      	str	r3, [sp, #0]
1005252c:	002b      	movs	r3, r5
1005252e:	f7fe fadd 	bl	10050aec <NVMDB_ReadCurrentRecord>
10052532:	0003      	movs	r3, r0
10052534:	7023      	strb	r3, [r4, #0]
10052536:	e021      	b.n	1005257c <BLEPLAT_NvmGet+0xb8>
  }
  else
  {
    if(Mode == BLEPLAT_NVM_FIRST)
10052538:	1dfb      	adds	r3, r7, #7
1005253a:	781b      	ldrb	r3, [r3, #0]
1005253c:	2b00      	cmp	r3, #0
1005253e:	d108      	bne.n	10052552 <BLEPLAT_NvmGet+0x8e>
    {
      NVMDB_HandleInit(db_id, curr_handle_p);
10052540:	4b19      	ldr	r3, [pc, #100]	@ (100525a8 <BLEPLAT_NvmGet+0xe4>)
10052542:	681a      	ldr	r2, [r3, #0]
10052544:	230e      	movs	r3, #14
10052546:	18fb      	adds	r3, r7, r3
10052548:	781b      	ldrb	r3, [r3, #0]
1005254a:	0011      	movs	r1, r2
1005254c:	0018      	movs	r0, r3
1005254e:	f7fe fa5f 	bl	10050a10 <NVMDB_HandleInit>
    }
    ret = NVMDB_ReadNextRecord(curr_handle_p, Type, Offset, pData, Size, &size_out);
10052552:	4b15      	ldr	r3, [pc, #84]	@ (100525a8 <BLEPLAT_NvmGet+0xe4>)
10052554:	6818      	ldr	r0, [r3, #0]
10052556:	230f      	movs	r3, #15
10052558:	18fc      	adds	r4, r7, r3
1005255a:	683d      	ldr	r5, [r7, #0]
1005255c:	1d3b      	adds	r3, r7, #4
1005255e:	881a      	ldrh	r2, [r3, #0]
10052560:	1dbb      	adds	r3, r7, #6
10052562:	7819      	ldrb	r1, [r3, #0]
10052564:	230c      	movs	r3, #12
10052566:	18fb      	adds	r3, r7, r3
10052568:	9301      	str	r3, [sp, #4]
1005256a:	2320      	movs	r3, #32
1005256c:	18fb      	adds	r3, r7, r3
1005256e:	881b      	ldrh	r3, [r3, #0]
10052570:	9300      	str	r3, [sp, #0]
10052572:	002b      	movs	r3, r5
10052574:	f7fe fa80 	bl	10050a78 <NVMDB_ReadNextRecord>
10052578:	0003      	movs	r3, r0
1005257a:	7023      	strb	r3, [r4, #0]
  }

  if(ret == NVMDB_STATUS_OK)
1005257c:	230f      	movs	r3, #15
1005257e:	18fb      	adds	r3, r7, r3
10052580:	781b      	ldrb	r3, [r3, #0]
10052582:	2b00      	cmp	r3, #0
10052584:	d101      	bne.n	1005258a <BLEPLAT_NvmGet+0xc6>
  {
    return BLEPLAT_OK;
10052586:	2300      	movs	r3, #0
10052588:	e009      	b.n	1005259e <BLEPLAT_NvmGet+0xda>
  }

  if(ret == NVMDB_STATUS_END_OF_DB)
1005258a:	230f      	movs	r3, #15
1005258c:	18fb      	adds	r3, r7, r3
1005258e:	781b      	ldrb	r3, [r3, #0]
10052590:	2b04      	cmp	r3, #4
10052592:	d102      	bne.n	1005259a <BLEPLAT_NvmGet+0xd6>
  {
    return BLEPLAT_EOF;
10052594:	2303      	movs	r3, #3
10052596:	425b      	negs	r3, r3
10052598:	e001      	b.n	1005259e <BLEPLAT_NvmGet+0xda>
  }

  return BLEPLAT_BUSY;
1005259a:	2302      	movs	r3, #2
1005259c:	425b      	negs	r3, r3
}
1005259e:	0018      	movs	r0, r3
100525a0:	46bd      	mov	sp, r7
100525a2:	b004      	add	sp, #16
100525a4:	bdb0      	pop	{r4, r5, r7, pc}
100525a6:	46c0      	nop			@ (mov r8, r8)
100525a8:	20002374 	.word	0x20002374
100525ac:	20002364 	.word	0x20002364
100525b0:	20002354 	.word	0x20002354

100525b4 <BLEPLAT_NvmCompare>:

int BLEPLAT_NvmCompare(uint16_t Offset, const uint8_t* pData, uint16_t Size)
{
100525b4:	b590      	push	{r4, r7, lr}
100525b6:	b085      	sub	sp, #20
100525b8:	af00      	add	r7, sp, #0
100525ba:	6039      	str	r1, [r7, #0]
100525bc:	0011      	movs	r1, r2
100525be:	1dbb      	adds	r3, r7, #6
100525c0:	1c02      	adds	r2, r0, #0
100525c2:	801a      	strh	r2, [r3, #0]
100525c4:	1d3b      	adds	r3, r7, #4
100525c6:	1c0a      	adds	r2, r1, #0
100525c8:	801a      	strh	r2, [r3, #0]
  int ret;

  ret = NVMDB_CompareCurrentRecord(curr_handle_p, Offset, pData, Size);
100525ca:	4b0e      	ldr	r3, [pc, #56]	@ (10052604 <BLEPLAT_NvmCompare+0x50>)
100525cc:	6818      	ldr	r0, [r3, #0]
100525ce:	1d3b      	adds	r3, r7, #4
100525d0:	881c      	ldrh	r4, [r3, #0]
100525d2:	683a      	ldr	r2, [r7, #0]
100525d4:	1dbb      	adds	r3, r7, #6
100525d6:	8819      	ldrh	r1, [r3, #0]
100525d8:	0023      	movs	r3, r4
100525da:	f7fd fa83 	bl	1004fae4 <NVMDB_CompareCurrentRecord>
100525de:	0003      	movs	r3, r0
100525e0:	60fb      	str	r3, [r7, #12]

  if(ret == 0)
100525e2:	68fb      	ldr	r3, [r7, #12]
100525e4:	2b00      	cmp	r3, #0
100525e6:	d101      	bne.n	100525ec <BLEPLAT_NvmCompare+0x38>
  {
    return BLEPLAT_OK;
100525e8:	2300      	movs	r3, #0
100525ea:	e007      	b.n	100525fc <BLEPLAT_NvmCompare+0x48>
  }
  else if(ret < 0)
100525ec:	68fb      	ldr	r3, [r7, #12]
100525ee:	2b00      	cmp	r3, #0
100525f0:	da02      	bge.n	100525f8 <BLEPLAT_NvmCompare+0x44>
  {
    return Size;
100525f2:	1d3b      	adds	r3, r7, #4
100525f4:	881b      	ldrh	r3, [r3, #0]
100525f6:	e001      	b.n	100525fc <BLEPLAT_NvmCompare+0x48>
  }
  else
  {
    return BLEPLAT_EOF;
100525f8:	2303      	movs	r3, #3
100525fa:	425b      	negs	r3, r3
  }
}
100525fc:	0018      	movs	r0, r3
100525fe:	46bd      	mov	sp, r7
10052600:	b005      	add	sp, #20
10052602:	bd90      	pop	{r4, r7, pc}
10052604:	20002374 	.word	0x20002374

10052608 <BLEPLAT_NvmDiscard>:

void BLEPLAT_NvmDiscard(BLEPLAT_NvmSeekModeTypeDef Mode)
{
10052608:	b580      	push	{r7, lr}
1005260a:	b082      	sub	sp, #8
1005260c:	af00      	add	r7, sp, #0
1005260e:	0002      	movs	r2, r0
10052610:	1dfb      	adds	r3, r7, #7
10052612:	701a      	strb	r2, [r3, #0]
  DEBUG_GPIO2_HIGH();
  if(Mode == BLEPLAT_NVM_CURRENT)
10052614:	1dfb      	adds	r3, r7, #7
10052616:	781b      	ldrb	r3, [r3, #0]
10052618:	2b02      	cmp	r3, #2
1005261a:	d10a      	bne.n	10052632 <BLEPLAT_NvmDiscard+0x2a>
  {
    if(curr_handle_p == &device_id_db_h) // Do not allow to erase device ID data.
1005261c:	4b0b      	ldr	r3, [pc, #44]	@ (1005264c <BLEPLAT_NvmDiscard+0x44>)
1005261e:	681a      	ldr	r2, [r3, #0]
10052620:	4b0b      	ldr	r3, [pc, #44]	@ (10052650 <BLEPLAT_NvmDiscard+0x48>)
10052622:	429a      	cmp	r2, r3
10052624:	d00d      	beq.n	10052642 <BLEPLAT_NvmDiscard+0x3a>
    {
      return;
    }
    NVMDB_DeleteRecord(curr_handle_p);
10052626:	4b09      	ldr	r3, [pc, #36]	@ (1005264c <BLEPLAT_NvmDiscard+0x44>)
10052628:	681b      	ldr	r3, [r3, #0]
1005262a:	0018      	movs	r0, r3
1005262c:	f7fe faf8 	bl	10050c20 <NVMDB_DeleteRecord>
10052630:	e008      	b.n	10052644 <BLEPLAT_NvmDiscard+0x3c>
  }
  else if(Mode == BLEPLAT_NVM_ALL)
10052632:	1dfb      	adds	r3, r7, #7
10052634:	781b      	ldrb	r3, [r3, #0]
10052636:	2b03      	cmp	r3, #3
10052638:	d104      	bne.n	10052644 <BLEPLAT_NvmDiscard+0x3c>
  {

    NVMDB_Erase(SEC_GATT_BD);
1005263a:	2000      	movs	r0, #0
1005263c:	f7fe fafe 	bl	10050c3c <NVMDB_Erase>
10052640:	e000      	b.n	10052644 <BLEPLAT_NvmDiscard+0x3c>
      return;
10052642:	46c0      	nop			@ (mov r8, r8)
       else
        return;
       }*/
  }
  DEBUG_GPIO2_LOW();
}
10052644:	46bd      	mov	sp, r7
10052646:	b002      	add	sp, #8
10052648:	bd80      	pop	{r7, pc}
1005264a:	46c0      	nop			@ (mov r8, r8)
1005264c:	20002374 	.word	0x20002374
10052650:	20002364 	.word	0x20002364

10052654 <BLEPLAT_MemCpy>:
#if defined(STM32WB06) || defined(STM32WB07) || defined(STM32WB09)
uint32_t SYNTH0_ANA_ENG_bak, PWR_ENGTRIM_bak;
#endif

void BLEPLAT_MemCpy(void *Dest, const void *Src, unsigned int Size)
{
10052654:	b580      	push	{r7, lr}
10052656:	b084      	sub	sp, #16
10052658:	af00      	add	r7, sp, #0
1005265a:	60f8      	str	r0, [r7, #12]
1005265c:	60b9      	str	r1, [r7, #8]
1005265e:	607a      	str	r2, [r7, #4]
  Osal_MemCpy(Dest, Src, Size);
10052660:	687a      	ldr	r2, [r7, #4]
10052662:	68b9      	ldr	r1, [r7, #8]
10052664:	68fb      	ldr	r3, [r7, #12]
10052666:	0018      	movs	r0, r3
10052668:	f7ed fd4c 	bl	10040104 <Osal_MemCpy>
}
1005266c:	46c0      	nop			@ (mov r8, r8)
1005266e:	46bd      	mov	sp, r7
10052670:	b004      	add	sp, #16
10052672:	bd80      	pop	{r7, pc}

10052674 <BLEPLAT_MemSet>:

void BLEPLAT_MemSet(void *Ptr, int Value, unsigned int Size)
{
10052674:	b580      	push	{r7, lr}
10052676:	b084      	sub	sp, #16
10052678:	af00      	add	r7, sp, #0
1005267a:	60f8      	str	r0, [r7, #12]
1005267c:	60b9      	str	r1, [r7, #8]
1005267e:	607a      	str	r2, [r7, #4]
  memset(Ptr, Value, Size);
10052680:	687a      	ldr	r2, [r7, #4]
10052682:	68b9      	ldr	r1, [r7, #8]
10052684:	68fb      	ldr	r3, [r7, #12]
10052686:	0018      	movs	r0, r3
10052688:	f015 f9e8 	bl	10067a5c <memset>
}
1005268c:	46c0      	nop			@ (mov r8, r8)
1005268e:	46bd      	mov	sp, r7
10052690:	b004      	add	sp, #16
10052692:	bd80      	pop	{r7, pc}

10052694 <BLEPLAT_MemCmp>:

int BLEPLAT_MemCmp(void *S1, void *S2, unsigned int Size)
{
10052694:	b580      	push	{r7, lr}
10052696:	b084      	sub	sp, #16
10052698:	af00      	add	r7, sp, #0
1005269a:	60f8      	str	r0, [r7, #12]
1005269c:	60b9      	str	r1, [r7, #8]
1005269e:	607a      	str	r2, [r7, #4]
  return memcmp(S1, S2, Size);
100526a0:	687a      	ldr	r2, [r7, #4]
100526a2:	68b9      	ldr	r1, [r7, #8]
100526a4:	68fb      	ldr	r3, [r7, #12]
100526a6:	0018      	movs	r0, r3
100526a8:	f015 f9ca 	bl	10067a40 <memcmp>
100526ac:	0003      	movs	r3, r0
}
100526ae:	0018      	movs	r0, r3
100526b0:	46bd      	mov	sp, r7
100526b2:	b004      	add	sp, #16
100526b4:	bd80      	pop	{r7, pc}

100526b6 <BLEPLAT_GetPartInfo>:

/**
 * @brief Get Device ID, Version and Revision numbers
 */
void BLEPLAT_GetPartInfo(uint8_t *pDeviceId, uint8_t *pMajorCut, uint8_t *pMinorCut)
{
100526b6:	b590      	push	{r4, r7, lr}
100526b8:	b089      	sub	sp, #36	@ 0x24
100526ba:	af00      	add	r7, sp, #0
100526bc:	60f8      	str	r0, [r7, #12]
100526be:	60b9      	str	r1, [r7, #8]
100526c0:	607a      	str	r2, [r7, #4]
   PartInfoType partInfo;

   /* get partInfo */
   GetPartInfo(&partInfo);
100526c2:	2410      	movs	r4, #16
100526c4:	193b      	adds	r3, r7, r4
100526c6:	0018      	movs	r0, r3
100526c8:	f7ff f85a 	bl	10051780 <GetPartInfo>

  /* Set device ID */
  *pDeviceId  = partInfo.die_id;
100526cc:	0021      	movs	r1, r4
100526ce:	187b      	adds	r3, r7, r1
100526d0:	781a      	ldrb	r2, [r3, #0]
100526d2:	68fb      	ldr	r3, [r7, #12]
100526d4:	701a      	strb	r2, [r3, #0]

  /* Set major cut  */
  *pMajorCut = partInfo.die_major;
100526d6:	187b      	adds	r3, r7, r1
100526d8:	785a      	ldrb	r2, [r3, #1]
100526da:	68bb      	ldr	r3, [r7, #8]
100526dc:	701a      	strb	r2, [r3, #0]

  /* Set minor cut */
  *pMinorCut = partInfo.die_cut;
100526de:	187b      	adds	r3, r7, r1
100526e0:	789a      	ldrb	r2, [r3, #2]
100526e2:	687b      	ldr	r3, [r7, #4]
100526e4:	701a      	strb	r2, [r3, #0]
}
100526e6:	46c0      	nop			@ (mov r8, r8)
100526e8:	46bd      	mov	sp, r7
100526ea:	b009      	add	sp, #36	@ 0x24
100526ec:	bd90      	pop	{r4, r7, pc}

100526ee <BLEPLAT_AesEcbEncrypt>:
}

void BLEPLAT_AesEcbEncrypt(const uint32_t *plainTextData,
                           const uint32_t *key,
                           uint32_t *encryptedData)
{
100526ee:	b580      	push	{r7, lr}
100526f0:	b084      	sub	sp, #16
100526f2:	af00      	add	r7, sp, #0
100526f4:	60f8      	str	r0, [r7, #12]
100526f6:	60b9      	str	r1, [r7, #8]
100526f8:	607a      	str	r2, [r7, #4]
  HW_AES_Encrypt(plainTextData, key, encryptedData);
100526fa:	687a      	ldr	r2, [r7, #4]
100526fc:	68b9      	ldr	r1, [r7, #8]
100526fe:	68fb      	ldr	r3, [r7, #12]
10052700:	0018      	movs	r0, r3
10052702:	f7fc fe6b 	bl	1004f3dc <HW_AES_Encrypt>
}
10052706:	46c0      	nop			@ (mov r8, r8)
10052708:	46bd      	mov	sp, r7
1005270a:	b004      	add	sp, #16
1005270c:	bd80      	pop	{r7, pc}

1005270e <BLEPLAT_AesCMACEncryptInit>:

int32_t BLEPLAT_AesCMACEncryptInit(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx)
{
1005270e:	b580      	push	{r7, lr}
10052710:	b082      	sub	sp, #8
10052712:	af00      	add	r7, sp, #0
10052714:	6078      	str	r0, [r7, #4]
  return AES_CMAC_Encrypt_Init((AESCMACctx_stt*)pAESCMACctx);
10052716:	687b      	ldr	r3, [r7, #4]
10052718:	0018      	movs	r0, r3
1005271a:	f016 f843 	bl	100687a4 <AES_CMAC_Encrypt_Init>
1005271e:	0003      	movs	r3, r0
}
10052720:	0018      	movs	r0, r3
10052722:	46bd      	mov	sp, r7
10052724:	b002      	add	sp, #8
10052726:	bd80      	pop	{r7, pc}

10052728 <BLEPLAT_AesCMACEncryptAppend>:

int32_t BLEPLAT_AesCMACEncryptAppend(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx,
                                     const uint8_t  *pInputBuffer,
                                     int32_t InputSize)
{
10052728:	b580      	push	{r7, lr}
1005272a:	b084      	sub	sp, #16
1005272c:	af00      	add	r7, sp, #0
1005272e:	60f8      	str	r0, [r7, #12]
10052730:	60b9      	str	r1, [r7, #8]
10052732:	607a      	str	r2, [r7, #4]
  return AES_CMAC_Encrypt_Append((AESCMACctx_stt*)pAESCMACctx, pInputBuffer, InputSize);
10052734:	687a      	ldr	r2, [r7, #4]
10052736:	68b9      	ldr	r1, [r7, #8]
10052738:	68fb      	ldr	r3, [r7, #12]
1005273a:	0018      	movs	r0, r3
1005273c:	f015 fec8 	bl	100684d0 <AES_CMAC_Encrypt_Append>
10052740:	0003      	movs	r3, r0
}
10052742:	0018      	movs	r0, r3
10052744:	46bd      	mov	sp, r7
10052746:	b004      	add	sp, #16
10052748:	bd80      	pop	{r7, pc}

1005274a <BLEPLAT_AesCMACEncryptFinish>:

int32_t BLEPLAT_AesCMACEncryptFinish(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx,
                                     uint8_t *pOutputBuffer,
                                     int32_t *pOutputSize)
{
1005274a:	b580      	push	{r7, lr}
1005274c:	b084      	sub	sp, #16
1005274e:	af00      	add	r7, sp, #0
10052750:	60f8      	str	r0, [r7, #12]
10052752:	60b9      	str	r1, [r7, #8]
10052754:	607a      	str	r2, [r7, #4]
  return AES_CMAC_Encrypt_Finish((AESCMACctx_stt*)pAESCMACctx, pOutputBuffer, pOutputSize);
10052756:	687a      	ldr	r2, [r7, #4]
10052758:	68b9      	ldr	r1, [r7, #8]
1005275a:	68fb      	ldr	r3, [r7, #12]
1005275c:	0018      	movs	r0, r3
1005275e:	f015 ffeb 	bl	10068738 <AES_CMAC_Encrypt_Finish>
10052762:	0003      	movs	r3, r0
}
10052764:	0018      	movs	r0, r3
10052766:	46bd      	mov	sp, r7
10052768:	b004      	add	sp, #16
1005276a:	bd80      	pop	{r7, pc}

1005276c <BLEPLAT_RngGetRandom16>:

void BLEPLAT_RngGetRandom16(uint16_t* num)
{
1005276c:	b580      	push	{r7, lr}
1005276e:	b082      	sub	sp, #8
10052770:	af00      	add	r7, sp, #0
10052772:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom16(num);
10052774:	687b      	ldr	r3, [r7, #4]
10052776:	0018      	movs	r0, r3
10052778:	f7fc ff98 	bl	1004f6ac <HW_RNG_GetRandom16>
}
1005277c:	46c0      	nop			@ (mov r8, r8)
1005277e:	46bd      	mov	sp, r7
10052780:	b002      	add	sp, #8
10052782:	bd80      	pop	{r7, pc}

10052784 <BLEPLAT_RngGetRandom32>:

void BLEPLAT_RngGetRandom32(uint32_t* num)
{
10052784:	b580      	push	{r7, lr}
10052786:	b082      	sub	sp, #8
10052788:	af00      	add	r7, sp, #0
1005278a:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom32(num);
1005278c:	687b      	ldr	r3, [r7, #4]
1005278e:	0018      	movs	r0, r3
10052790:	f7fc ffa6 	bl	1004f6e0 <HW_RNG_GetRandom32>
}
10052794:	46c0      	nop			@ (mov r8, r8)
10052796:	46bd      	mov	sp, r7
10052798:	b002      	add	sp, #8
1005279a:	bd80      	pop	{r7, pc}

1005279c <BLEPLAT_GetMaxPALevel>:
{
  RADIO_ReadTransmitPower(Min_Tx_Power, Max_Tx_Power);
}

uint8_t BLEPLAT_GetMaxPALevel(void)
{
1005279c:	b580      	push	{r7, lr}
1005279e:	af00      	add	r7, sp, #0
  return RADIO_GetMaxPALevel();
100527a0:	f7fe ff12 	bl	100515c8 <RADIO_GetMaxPALevel>
100527a4:	0003      	movs	r3, r0
}
100527a6:	0018      	movs	r0, r3
100527a8:	46bd      	mov	sp, r7
100527aa:	bd80      	pop	{r7, pc}

100527ac <BLEPLAT_GetDefaultPALevel>:

uint8_t BLEPLAT_GetDefaultPALevel(void)
{
100527ac:	b580      	push	{r7, lr}
100527ae:	af00      	add	r7, sp, #0
  return RADIO_GetDefaultPALevel();
100527b0:	f7fe ff10 	bl	100515d4 <RADIO_GetDefaultPALevel>
100527b4:	0003      	movs	r3, r0
}
100527b6:	0018      	movs	r0, r3
100527b8:	46bd      	mov	sp, r7
100527ba:	bd80      	pop	{r7, pc}

100527bc <BLEPLAT_SetHighPower>:

void BLEPLAT_SetHighPower(uint8_t enable)
{
100527bc:	b580      	push	{r7, lr}
100527be:	b082      	sub	sp, #8
100527c0:	af00      	add	r7, sp, #0
100527c2:	0002      	movs	r2, r0
100527c4:	1dfb      	adds	r3, r7, #7
100527c6:	701a      	strb	r2, [r3, #0]
  RADIO_SetHighPower((FunctionalState)enable);
100527c8:	1dfb      	adds	r3, r7, #7
100527ca:	781b      	ldrb	r3, [r3, #0]
100527cc:	0018      	movs	r0, r3
100527ce:	f7fe ff07 	bl	100515e0 <RADIO_SetHighPower>
}
100527d2:	46c0      	nop			@ (mov r8, r8)
100527d4:	46bd      	mov	sp, r7
100527d6:	b002      	add	sp, #8
100527d8:	bd80      	pop	{r7, pc}

100527da <BLEPLAT_CalculateRSSI>:

int8_t BLEPLAT_CalculateRSSI(void)
{
100527da:	b580      	push	{r7, lr}
100527dc:	af00      	add	r7, sp, #0
  return HAL_RADIO_ReadRSSI();
100527de:	f7f8 fb35 	bl	1004ae4c <HAL_RADIO_ReadRSSI>
100527e2:	0003      	movs	r3, r0
}
100527e4:	0018      	movs	r0, r3
100527e6:	46bd      	mov	sp, r7
100527e8:	bd80      	pop	{r7, pc}

100527ea <BLEPLAT_GetCurrentSysTime>:
{
  RADIO_AntIdxRemap(AntPattLen, pAntRamTable, pAntPatt);
}

uint64_t BLEPLAT_GetCurrentSysTime(void)
{
100527ea:	b580      	push	{r7, lr}
100527ec:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_GetCurrentSysTime();
100527ee:	f7f9 f883 	bl	1004b8f8 <HAL_RADIO_TIMER_GetCurrentSysTime>
100527f2:	0002      	movs	r2, r0
100527f4:	000b      	movs	r3, r1

}
100527f6:	0010      	movs	r0, r2
100527f8:	0019      	movs	r1, r3
100527fa:	46bd      	mov	sp, r7
100527fc:	bd80      	pop	{r7, pc}

100527fe <BLEPLAT_StartTimer>:
{
  return HAL_RADIO_TIMER_GetFutureSysTime64(SysTime);
}

int BLEPLAT_StartTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle, uint64_t Time)
{
100527fe:	b580      	push	{r7, lr}
10052800:	b084      	sub	sp, #16
10052802:	af00      	add	r7, sp, #0
10052804:	60f8      	str	r0, [r7, #12]
10052806:	603a      	str	r2, [r7, #0]
10052808:	607b      	str	r3, [r7, #4]
  return HAL_RADIO_TIMER_StartVirtualTimerSysTime((VTIMER_HandleType*)TimerHandle, Time);
1005280a:	683a      	ldr	r2, [r7, #0]
1005280c:	687b      	ldr	r3, [r7, #4]
1005280e:	68f9      	ldr	r1, [r7, #12]
10052810:	0008      	movs	r0, r1
10052812:	f7f9 f883 	bl	1004b91c <HAL_RADIO_TIMER_StartVirtualTimerSysTime>
10052816:	0003      	movs	r3, r0
}
10052818:	0018      	movs	r0, r3
1005281a:	46bd      	mov	sp, r7
1005281c:	b004      	add	sp, #16
1005281e:	bd80      	pop	{r7, pc}

10052820 <BLEPLAT_StopTimer>:

void BLEPLAT_StopTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle)
{
10052820:	b580      	push	{r7, lr}
10052822:	b082      	sub	sp, #8
10052824:	af00      	add	r7, sp, #0
10052826:	6078      	str	r0, [r7, #4]
  HAL_RADIO_TIMER_StopVirtualTimer((VTIMER_HandleType*)TimerHandle);
10052828:	687b      	ldr	r3, [r7, #4]
1005282a:	0018      	movs	r0, r3
1005282c:	f7f9 f890 	bl	1004b950 <HAL_RADIO_TIMER_StopVirtualTimer>
}
10052830:	46c0      	nop			@ (mov r8, r8)
10052832:	46bd      	mov	sp, r7
10052834:	b002      	add	sp, #8
10052836:	bd80      	pop	{r7, pc}

10052838 <BLEPLAT_SetRadioTimerValue>:

uint8_t BLEPLAT_SetRadioTimerValue(uint32_t Time, uint8_t EventType, uint8_t CalReq)
{
10052838:	b580      	push	{r7, lr}
1005283a:	b082      	sub	sp, #8
1005283c:	af00      	add	r7, sp, #0
1005283e:	6078      	str	r0, [r7, #4]
10052840:	0008      	movs	r0, r1
10052842:	0011      	movs	r1, r2
10052844:	1cfb      	adds	r3, r7, #3
10052846:	1c02      	adds	r2, r0, #0
10052848:	701a      	strb	r2, [r3, #0]
1005284a:	1cbb      	adds	r3, r7, #2
1005284c:	1c0a      	adds	r2, r1, #0
1005284e:	701a      	strb	r2, [r3, #0]
  return HAL_RADIO_TIMER_SetRadioTimerValue(Time, EventType, CalReq);
10052850:	1cbb      	adds	r3, r7, #2
10052852:	781a      	ldrb	r2, [r3, #0]
10052854:	1cfb      	adds	r3, r7, #3
10052856:	7819      	ldrb	r1, [r3, #0]
10052858:	687b      	ldr	r3, [r7, #4]
1005285a:	0018      	movs	r0, r3
1005285c:	f7f8 ff36 	bl	1004b6cc <HAL_RADIO_TIMER_SetRadioTimerValue>
10052860:	0003      	movs	r3, r0
10052862:	b2db      	uxtb	r3, r3
}
10052864:	0018      	movs	r0, r3
10052866:	46bd      	mov	sp, r7
10052868:	b002      	add	sp, #8
1005286a:	bd80      	pop	{r7, pc}

1005286c <BLEPLAT_ClearRadioTimerValue>:

uint8_t BLEPLAT_ClearRadioTimerValue(void)
{
1005286c:	b580      	push	{r7, lr}
1005286e:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_ClearRadioTimerValue();
10052870:	f7f8 ff7c 	bl	1004b76c <HAL_RADIO_TIMER_ClearRadioTimerValue>
10052874:	0003      	movs	r3, r0
10052876:	b2db      	uxtb	r3, r3
}
10052878:	0018      	movs	r0, r3
1005287a:	46bd      	mov	sp, r7
1005287c:	bd80      	pop	{r7, pc}

1005287e <BLEPLAT_GetAnchorPoint>:

uint64_t BLEPLAT_GetAnchorPoint(uint64_t *pCurrentSysTime)
{
1005287e:	b580      	push	{r7, lr}
10052880:	b082      	sub	sp, #8
10052882:	af00      	add	r7, sp, #0
10052884:	6078      	str	r0, [r7, #4]
  return HAL_RADIO_TIMER_GetAnchorPoint(pCurrentSysTime);
10052886:	687b      	ldr	r3, [r7, #4]
10052888:	0018      	movs	r0, r3
1005288a:	f7f8 ff0b 	bl	1004b6a4 <HAL_RADIO_TIMER_GetAnchorPoint>
1005288e:	0002      	movs	r2, r0
10052890:	000b      	movs	r3, r1
}
10052892:	0010      	movs	r0, r2
10052894:	0019      	movs	r1, r3
10052896:	46bd      	mov	sp, r7
10052898:	b002      	add	sp, #8
1005289a:	bd80      	pop	{r7, pc}

1005289c <BLEPLAT_SetRadioCloseTimeout>:

void BLEPLAT_SetRadioCloseTimeout(void)
{
1005289c:	b580      	push	{r7, lr}
1005289e:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_SetRadioCloseTimeout();
100528a0:	f7f8 ffd8 	bl	1004b854 <HAL_RADIO_TIMER_SetRadioCloseTimeout>
}
100528a4:	46c0      	nop			@ (mov r8, r8)
100528a6:	46bd      	mov	sp, r7
100528a8:	bd80      	pop	{r7, pc}
	...

100528ac <LL_RADIO_SetCurrentConnectionMachineNumber>:
{
100528ac:	b580      	push	{r7, lr}
100528ae:	b082      	sub	sp, #8
100528b0:	af00      	add	r7, sp, #0
100528b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_CURSTMACHNUM, value);
100528b4:	4b07      	ldr	r3, [pc, #28]	@ (100528d4 <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
100528b6:	685b      	ldr	r3, [r3, #4]
100528b8:	227f      	movs	r2, #127	@ 0x7f
100528ba:	4393      	bics	r3, r2
100528bc:	0019      	movs	r1, r3
100528be:	687b      	ldr	r3, [r7, #4]
100528c0:	227f      	movs	r2, #127	@ 0x7f
100528c2:	401a      	ands	r2, r3
100528c4:	4b03      	ldr	r3, [pc, #12]	@ (100528d4 <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
100528c6:	430a      	orrs	r2, r1
100528c8:	605a      	str	r2, [r3, #4]
}
100528ca:	46c0      	nop			@ (mov r8, r8)
100528cc:	46bd      	mov	sp, r7
100528ce:	b002      	add	sp, #8
100528d0:	bd80      	pop	{r7, pc}
100528d2:	46c0      	nop			@ (mov r8, r8)
100528d4:	200000c0 	.word	0x200000c0

100528d8 <LL_RADIO_GlobalEnableBlue>:
{
100528d8:	b580      	push	{r7, lr}
100528da:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
100528dc:	4b04      	ldr	r3, [pc, #16]	@ (100528f0 <LL_RADIO_GlobalEnableBlue+0x18>)
100528de:	685a      	ldr	r2, [r3, #4]
100528e0:	4b03      	ldr	r3, [pc, #12]	@ (100528f0 <LL_RADIO_GlobalEnableBlue+0x18>)
100528e2:	2180      	movs	r1, #128	@ 0x80
100528e4:	430a      	orrs	r2, r1
100528e6:	605a      	str	r2, [r3, #4]
}
100528e8:	46c0      	nop			@ (mov r8, r8)
100528ea:	46bd      	mov	sp, r7
100528ec:	bd80      	pop	{r7, pc}
100528ee:	46c0      	nop			@ (mov r8, r8)
100528f0:	200000c0 	.word	0x200000c0

100528f4 <LL_RADIO_GlobalDisableBlue>:
{
100528f4:	b580      	push	{r7, lr}
100528f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
100528f8:	4b04      	ldr	r3, [pc, #16]	@ (1005290c <LL_RADIO_GlobalDisableBlue+0x18>)
100528fa:	685a      	ldr	r2, [r3, #4]
100528fc:	4b03      	ldr	r3, [pc, #12]	@ (1005290c <LL_RADIO_GlobalDisableBlue+0x18>)
100528fe:	2180      	movs	r1, #128	@ 0x80
10052900:	438a      	bics	r2, r1
10052902:	605a      	str	r2, [r3, #4]
}
10052904:	46c0      	nop			@ (mov r8, r8)
10052906:	46bd      	mov	sp, r7
10052908:	bd80      	pop	{r7, pc}
1005290a:	46c0      	nop			@ (mov r8, r8)
1005290c:	200000c0 	.word	0x200000c0

10052910 <LL_RADIO_SetReceiveWindowTimeout>:
{
10052910:	b580      	push	{r7, lr}
10052912:	b082      	sub	sp, #8
10052914:	af00      	add	r7, sp, #0
10052916:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_RCVTIMEOUT, value);
10052918:	4b07      	ldr	r3, [pc, #28]	@ (10052938 <LL_RADIO_SetReceiveWindowTimeout+0x28>)
1005291a:	691b      	ldr	r3, [r3, #16]
1005291c:	4a07      	ldr	r2, [pc, #28]	@ (1005293c <LL_RADIO_SetReceiveWindowTimeout+0x2c>)
1005291e:	4013      	ands	r3, r2
10052920:	0019      	movs	r1, r3
10052922:	687b      	ldr	r3, [r7, #4]
10052924:	021b      	lsls	r3, r3, #8
10052926:	4a06      	ldr	r2, [pc, #24]	@ (10052940 <LL_RADIO_SetReceiveWindowTimeout+0x30>)
10052928:	401a      	ands	r2, r3
1005292a:	4b03      	ldr	r3, [pc, #12]	@ (10052938 <LL_RADIO_SetReceiveWindowTimeout+0x28>)
1005292c:	430a      	orrs	r2, r1
1005292e:	611a      	str	r2, [r3, #16]
}
10052930:	46c0      	nop			@ (mov r8, r8)
10052932:	46bd      	mov	sp, r7
10052934:	b002      	add	sp, #8
10052936:	bd80      	pop	{r7, pc}
10052938:	200000c0 	.word	0x200000c0
1005293c:	f00000ff 	.word	0xf00000ff
10052940:	0fffff00 	.word	0x0fffff00

10052944 <LL_RADIO_SetUnmappedChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUnmappedChannel(uint8_t stateMachineNo, uint32_t value)
{
10052944:	b580      	push	{r7, lr}
10052946:	b082      	sub	sp, #8
10052948:	af00      	add	r7, sp, #0
1005294a:	0002      	movs	r2, r0
1005294c:	6039      	str	r1, [r7, #0]
1005294e:	1dfb      	adds	r3, r7, #7
10052950:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_UCHAN, value);
10052952:	1dfb      	adds	r3, r7, #7
10052954:	781b      	ldrb	r3, [r3, #0]
10052956:	225c      	movs	r2, #92	@ 0x5c
10052958:	4353      	muls	r3, r2
1005295a:	4a0b      	ldr	r2, [pc, #44]	@ (10052988 <LL_RADIO_SetUnmappedChannel+0x44>)
1005295c:	4694      	mov	ip, r2
1005295e:	4463      	add	r3, ip
10052960:	681b      	ldr	r3, [r3, #0]
10052962:	223f      	movs	r2, #63	@ 0x3f
10052964:	4393      	bics	r3, r2
10052966:	0019      	movs	r1, r3
10052968:	683b      	ldr	r3, [r7, #0]
1005296a:	223f      	movs	r2, #63	@ 0x3f
1005296c:	401a      	ands	r2, r3
1005296e:	1dfb      	adds	r3, r7, #7
10052970:	781b      	ldrb	r3, [r3, #0]
10052972:	205c      	movs	r0, #92	@ 0x5c
10052974:	4343      	muls	r3, r0
10052976:	4804      	ldr	r0, [pc, #16]	@ (10052988 <LL_RADIO_SetUnmappedChannel+0x44>)
10052978:	4684      	mov	ip, r0
1005297a:	4463      	add	r3, ip
1005297c:	430a      	orrs	r2, r1
1005297e:	601a      	str	r2, [r3, #0]
}
10052980:	46c0      	nop			@ (mov r8, r8)
10052982:	46bd      	mov	sp, r7
10052984:	b002      	add	sp, #8
10052986:	bd80      	pop	{r7, pc}
10052988:	200000dc 	.word	0x200000dc

1005298c <LL_RADIO_RadioCommandList_Enable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Enable(uint8_t stateMachineNo)
{
1005298c:	b580      	push	{r7, lr}
1005298e:	b082      	sub	sp, #8
10052990:	af00      	add	r7, sp, #0
10052992:	0002      	movs	r2, r0
10052994:	1dfb      	adds	r3, r7, #7
10052996:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
10052998:	1dfb      	adds	r3, r7, #7
1005299a:	781b      	ldrb	r3, [r3, #0]
1005299c:	225c      	movs	r2, #92	@ 0x5c
1005299e:	4353      	muls	r3, r2
100529a0:	4a08      	ldr	r2, [pc, #32]	@ (100529c4 <LL_RADIO_RadioCommandList_Enable+0x38>)
100529a2:	4694      	mov	ip, r2
100529a4:	4463      	add	r3, ip
100529a6:	681a      	ldr	r2, [r3, #0]
100529a8:	1dfb      	adds	r3, r7, #7
100529aa:	781b      	ldrb	r3, [r3, #0]
100529ac:	215c      	movs	r1, #92	@ 0x5c
100529ae:	434b      	muls	r3, r1
100529b0:	4904      	ldr	r1, [pc, #16]	@ (100529c4 <LL_RADIO_RadioCommandList_Enable+0x38>)
100529b2:	468c      	mov	ip, r1
100529b4:	4463      	add	r3, ip
100529b6:	2140      	movs	r1, #64	@ 0x40
100529b8:	430a      	orrs	r2, r1
100529ba:	601a      	str	r2, [r3, #0]
}
100529bc:	46c0      	nop			@ (mov r8, r8)
100529be:	46bd      	mov	sp, r7
100529c0:	b002      	add	sp, #8
100529c2:	bd80      	pop	{r7, pc}
100529c4:	200000dc 	.word	0x200000dc

100529c8 <LL_RADIO_RadioCommandList_Disable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Disable(uint8_t stateMachineNo)
{
100529c8:	b580      	push	{r7, lr}
100529ca:	b082      	sub	sp, #8
100529cc:	af00      	add	r7, sp, #0
100529ce:	0002      	movs	r2, r0
100529d0:	1dfb      	adds	r3, r7, #7
100529d2:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
100529d4:	1dfb      	adds	r3, r7, #7
100529d6:	781b      	ldrb	r3, [r3, #0]
100529d8:	225c      	movs	r2, #92	@ 0x5c
100529da:	4353      	muls	r3, r2
100529dc:	4a08      	ldr	r2, [pc, #32]	@ (10052a00 <LL_RADIO_RadioCommandList_Disable+0x38>)
100529de:	4694      	mov	ip, r2
100529e0:	4463      	add	r3, ip
100529e2:	681a      	ldr	r2, [r3, #0]
100529e4:	1dfb      	adds	r3, r7, #7
100529e6:	781b      	ldrb	r3, [r3, #0]
100529e8:	215c      	movs	r1, #92	@ 0x5c
100529ea:	434b      	muls	r3, r1
100529ec:	4904      	ldr	r1, [pc, #16]	@ (10052a00 <LL_RADIO_RadioCommandList_Disable+0x38>)
100529ee:	468c      	mov	ip, r1
100529f0:	4463      	add	r3, ip
100529f2:	2140      	movs	r1, #64	@ 0x40
100529f4:	438a      	bics	r2, r1
100529f6:	601a      	str	r2, [r3, #0]
}
100529f8:	46c0      	nop			@ (mov r8, r8)
100529fa:	46bd      	mov	sp, r7
100529fc:	b002      	add	sp, #8
100529fe:	bd80      	pop	{r7, pc}
10052a00:	200000dc 	.word	0x200000dc

10052a04 <LL_RADIO_TxMode_Enable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Enable(uint8_t stateMachineNo)
{
10052a04:	b580      	push	{r7, lr}
10052a06:	b082      	sub	sp, #8
10052a08:	af00      	add	r7, sp, #0
10052a0a:	0002      	movs	r2, r0
10052a0c:	1dfb      	adds	r3, r7, #7
10052a0e:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
10052a10:	1dfb      	adds	r3, r7, #7
10052a12:	781b      	ldrb	r3, [r3, #0]
10052a14:	225c      	movs	r2, #92	@ 0x5c
10052a16:	4353      	muls	r3, r2
10052a18:	4a08      	ldr	r2, [pc, #32]	@ (10052a3c <LL_RADIO_TxMode_Enable+0x38>)
10052a1a:	4694      	mov	ip, r2
10052a1c:	4463      	add	r3, ip
10052a1e:	681a      	ldr	r2, [r3, #0]
10052a20:	1dfb      	adds	r3, r7, #7
10052a22:	781b      	ldrb	r3, [r3, #0]
10052a24:	215c      	movs	r1, #92	@ 0x5c
10052a26:	434b      	muls	r3, r1
10052a28:	4904      	ldr	r1, [pc, #16]	@ (10052a3c <LL_RADIO_TxMode_Enable+0x38>)
10052a2a:	468c      	mov	ip, r1
10052a2c:	4463      	add	r3, ip
10052a2e:	2180      	movs	r1, #128	@ 0x80
10052a30:	430a      	orrs	r2, r1
10052a32:	601a      	str	r2, [r3, #0]
}
10052a34:	46c0      	nop			@ (mov r8, r8)
10052a36:	46bd      	mov	sp, r7
10052a38:	b002      	add	sp, #8
10052a3a:	bd80      	pop	{r7, pc}
10052a3c:	200000dc 	.word	0x200000dc

10052a40 <LL_RADIO_TxMode_Disable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Disable(uint8_t stateMachineNo)
{
10052a40:	b580      	push	{r7, lr}
10052a42:	b082      	sub	sp, #8
10052a44:	af00      	add	r7, sp, #0
10052a46:	0002      	movs	r2, r0
10052a48:	1dfb      	adds	r3, r7, #7
10052a4a:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
10052a4c:	1dfb      	adds	r3, r7, #7
10052a4e:	781b      	ldrb	r3, [r3, #0]
10052a50:	225c      	movs	r2, #92	@ 0x5c
10052a52:	4353      	muls	r3, r2
10052a54:	4a08      	ldr	r2, [pc, #32]	@ (10052a78 <LL_RADIO_TxMode_Disable+0x38>)
10052a56:	4694      	mov	ip, r2
10052a58:	4463      	add	r3, ip
10052a5a:	681a      	ldr	r2, [r3, #0]
10052a5c:	1dfb      	adds	r3, r7, #7
10052a5e:	781b      	ldrb	r3, [r3, #0]
10052a60:	215c      	movs	r1, #92	@ 0x5c
10052a62:	434b      	muls	r3, r1
10052a64:	4904      	ldr	r1, [pc, #16]	@ (10052a78 <LL_RADIO_TxMode_Disable+0x38>)
10052a66:	468c      	mov	ip, r1
10052a68:	4463      	add	r3, ip
10052a6a:	2180      	movs	r1, #128	@ 0x80
10052a6c:	438a      	bics	r2, r1
10052a6e:	601a      	str	r2, [r3, #0]
}
10052a70:	46c0      	nop			@ (mov r8, r8)
10052a72:	46bd      	mov	sp, r7
10052a74:	b002      	add	sp, #8
10052a76:	bd80      	pop	{r7, pc}
10052a78:	200000dc 	.word	0x200000dc

10052a7c <LL_RADIO_TxMode_IsEnabled>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_IsEnabled
  * @param  stateMachineNo
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TxMode_IsEnabled(uint8_t stateMachineNo)
{
10052a7c:	b580      	push	{r7, lr}
10052a7e:	b082      	sub	sp, #8
10052a80:	af00      	add	r7, sp, #0
10052a82:	0002      	movs	r2, r0
10052a84:	1dfb      	adds	r3, r7, #7
10052a86:	701a      	strb	r2, [r3, #0]
  return ((READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE) == (STATEMACH_WORD0_TXMODE)) ? 1U : 0U);
10052a88:	1dfb      	adds	r3, r7, #7
10052a8a:	781b      	ldrb	r3, [r3, #0]
10052a8c:	225c      	movs	r2, #92	@ 0x5c
10052a8e:	4353      	muls	r3, r2
10052a90:	4a07      	ldr	r2, [pc, #28]	@ (10052ab0 <LL_RADIO_TxMode_IsEnabled+0x34>)
10052a92:	4694      	mov	ip, r2
10052a94:	4463      	add	r3, ip
10052a96:	681b      	ldr	r3, [r3, #0]
10052a98:	2280      	movs	r2, #128	@ 0x80
10052a9a:	4013      	ands	r3, r2
10052a9c:	2b80      	cmp	r3, #128	@ 0x80
10052a9e:	d101      	bne.n	10052aa4 <LL_RADIO_TxMode_IsEnabled+0x28>
10052aa0:	2301      	movs	r3, #1
10052aa2:	e000      	b.n	10052aa6 <LL_RADIO_TxMode_IsEnabled+0x2a>
10052aa4:	2300      	movs	r3, #0
}
10052aa6:	0018      	movs	r0, r3
10052aa8:	46bd      	mov	sp, r7
10052aaa:	b002      	add	sp, #8
10052aac:	bd80      	pop	{r7, pc}
10052aae:	46c0      	nop			@ (mov r8, r8)
10052ab0:	200000dc 	.word	0x200000dc

10052ab4 <LL_RADIO_SetRemapChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRemapChannel(uint8_t stateMachineNo, uint32_t value)
{
10052ab4:	b580      	push	{r7, lr}
10052ab6:	b082      	sub	sp, #8
10052ab8:	af00      	add	r7, sp, #0
10052aba:	0002      	movs	r2, r0
10052abc:	6039      	str	r1, [r7, #0]
10052abe:	1dfb      	adds	r3, r7, #7
10052ac0:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_REMAP_CHAN, value);
10052ac2:	1dfb      	adds	r3, r7, #7
10052ac4:	781b      	ldrb	r3, [r3, #0]
10052ac6:	225c      	movs	r2, #92	@ 0x5c
10052ac8:	4353      	muls	r3, r2
10052aca:	4a0c      	ldr	r2, [pc, #48]	@ (10052afc <LL_RADIO_SetRemapChannel+0x48>)
10052acc:	4694      	mov	ip, r2
10052ace:	4463      	add	r3, ip
10052ad0:	681b      	ldr	r3, [r3, #0]
10052ad2:	4a0b      	ldr	r2, [pc, #44]	@ (10052b00 <LL_RADIO_SetRemapChannel+0x4c>)
10052ad4:	4013      	ands	r3, r2
10052ad6:	0019      	movs	r1, r3
10052ad8:	683b      	ldr	r3, [r7, #0]
10052ada:	021a      	lsls	r2, r3, #8
10052adc:	23fc      	movs	r3, #252	@ 0xfc
10052ade:	019b      	lsls	r3, r3, #6
10052ae0:	401a      	ands	r2, r3
10052ae2:	1dfb      	adds	r3, r7, #7
10052ae4:	781b      	ldrb	r3, [r3, #0]
10052ae6:	205c      	movs	r0, #92	@ 0x5c
10052ae8:	4343      	muls	r3, r0
10052aea:	4804      	ldr	r0, [pc, #16]	@ (10052afc <LL_RADIO_SetRemapChannel+0x48>)
10052aec:	4684      	mov	ip, r0
10052aee:	4463      	add	r3, ip
10052af0:	430a      	orrs	r2, r1
10052af2:	601a      	str	r2, [r3, #0]
}
10052af4:	46c0      	nop			@ (mov r8, r8)
10052af6:	46bd      	mov	sp, r7
10052af8:	b002      	add	sp, #8
10052afa:	bd80      	pop	{r7, pc}
10052afc:	200000dc 	.word	0x200000dc
10052b00:	ffffc0ff 	.word	0xffffc0ff

10052b04 <LL_RADIO_GetRemapChannel>:
  * @rmtoll WORD0          REMAP_CHAN       LL_RADIO_GetRemapChannel
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetRemapChannel(uint8_t stateMachineNo)
{
10052b04:	b580      	push	{r7, lr}
10052b06:	b082      	sub	sp, #8
10052b08:	af00      	add	r7, sp, #0
10052b0a:	0002      	movs	r2, r0
10052b0c:	1dfb      	adds	r3, r7, #7
10052b0e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0,
10052b10:	1dfb      	adds	r3, r7, #7
10052b12:	781b      	ldrb	r3, [r3, #0]
10052b14:	225c      	movs	r2, #92	@ 0x5c
10052b16:	4353      	muls	r3, r2
10052b18:	4a05      	ldr	r2, [pc, #20]	@ (10052b30 <LL_RADIO_GetRemapChannel+0x2c>)
10052b1a:	4694      	mov	ip, r2
10052b1c:	4463      	add	r3, ip
10052b1e:	681b      	ldr	r3, [r3, #0]
10052b20:	0a1b      	lsrs	r3, r3, #8
10052b22:	223f      	movs	r2, #63	@ 0x3f
10052b24:	4013      	ands	r3, r2
                             STATEMACH_WORD0_REMAP_CHAN) >> STATEMACH_WORD0_REMAP_CHAN_Pos);
}
10052b26:	0018      	movs	r0, r3
10052b28:	46bd      	mov	sp, r7
10052b2a:	b002      	add	sp, #8
10052b2c:	bd80      	pop	{r7, pc}
10052b2e:	46c0      	nop			@ (mov r8, r8)
10052b30:	200000dc 	.word	0x200000dc

10052b34 <LL_RADIO_ToggleNextExpectedSequenceNumber>:
  * @rmtoll WORD0          NESN       LL_RADIO_ToggleNextExpectedSequenceNumber
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ToggleNextExpectedSequenceNumber(uint8_t stateMachineNo)
{
10052b34:	b580      	push	{r7, lr}
10052b36:	b082      	sub	sp, #8
10052b38:	af00      	add	r7, sp, #0
10052b3a:	0002      	movs	r2, r0
10052b3c:	1dfb      	adds	r3, r7, #7
10052b3e:	701a      	strb	r2, [r3, #0]
  TOGGLE_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_NESN);
10052b40:	1dfb      	adds	r3, r7, #7
10052b42:	781b      	ldrb	r3, [r3, #0]
10052b44:	225c      	movs	r2, #92	@ 0x5c
10052b46:	4353      	muls	r3, r2
10052b48:	4a09      	ldr	r2, [pc, #36]	@ (10052b70 <LL_RADIO_ToggleNextExpectedSequenceNumber+0x3c>)
10052b4a:	4694      	mov	ip, r2
10052b4c:	4463      	add	r3, ip
10052b4e:	681a      	ldr	r2, [r3, #0]
10052b50:	1dfb      	adds	r3, r7, #7
10052b52:	781b      	ldrb	r3, [r3, #0]
10052b54:	215c      	movs	r1, #92	@ 0x5c
10052b56:	434b      	muls	r3, r1
10052b58:	4905      	ldr	r1, [pc, #20]	@ (10052b70 <LL_RADIO_ToggleNextExpectedSequenceNumber+0x3c>)
10052b5a:	468c      	mov	ip, r1
10052b5c:	4463      	add	r3, ip
10052b5e:	2180      	movs	r1, #128	@ 0x80
10052b60:	0209      	lsls	r1, r1, #8
10052b62:	404a      	eors	r2, r1
10052b64:	601a      	str	r2, [r3, #0]
}
10052b66:	46c0      	nop			@ (mov r8, r8)
10052b68:	46bd      	mov	sp, r7
10052b6a:	b002      	add	sp, #8
10052b6c:	bd80      	pop	{r7, pc}
10052b6e:	46c0      	nop			@ (mov r8, r8)
10052b70:	200000dc 	.word	0x200000dc

10052b74 <LL_RADIO_Encryption_Enable>:
  * @rmtoll WORD0          ENCRYPTON            LL_RADIO_Encryption_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Encryption_Enable(uint8_t stateMachineNo)
{
10052b74:	b580      	push	{r7, lr}
10052b76:	b082      	sub	sp, #8
10052b78:	af00      	add	r7, sp, #0
10052b7a:	0002      	movs	r2, r0
10052b7c:	1dfb      	adds	r3, r7, #7
10052b7e:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_ENCRYPTON);
10052b80:	1dfb      	adds	r3, r7, #7
10052b82:	781b      	ldrb	r3, [r3, #0]
10052b84:	225c      	movs	r2, #92	@ 0x5c
10052b86:	4353      	muls	r3, r2
10052b88:	4a09      	ldr	r2, [pc, #36]	@ (10052bb0 <LL_RADIO_Encryption_Enable+0x3c>)
10052b8a:	4694      	mov	ip, r2
10052b8c:	4463      	add	r3, ip
10052b8e:	681a      	ldr	r2, [r3, #0]
10052b90:	1dfb      	adds	r3, r7, #7
10052b92:	781b      	ldrb	r3, [r3, #0]
10052b94:	215c      	movs	r1, #92	@ 0x5c
10052b96:	434b      	muls	r3, r1
10052b98:	4905      	ldr	r1, [pc, #20]	@ (10052bb0 <LL_RADIO_Encryption_Enable+0x3c>)
10052b9a:	468c      	mov	ip, r1
10052b9c:	4463      	add	r3, ip
10052b9e:	2180      	movs	r1, #128	@ 0x80
10052ba0:	0389      	lsls	r1, r1, #14
10052ba2:	430a      	orrs	r2, r1
10052ba4:	601a      	str	r2, [r3, #0]
}
10052ba6:	46c0      	nop			@ (mov r8, r8)
10052ba8:	46bd      	mov	sp, r7
10052baa:	b002      	add	sp, #8
10052bac:	bd80      	pop	{r7, pc}
10052bae:	46c0      	nop			@ (mov r8, r8)
10052bb0:	200000dc 	.word	0x200000dc

10052bb4 <LL_RADIO_Encryption_Disable>:
  * @rmtoll WORD0          ENCRYPTON            LL_RADIO_Encryption_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Encryption_Disable(uint8_t stateMachineNo)
{
10052bb4:	b580      	push	{r7, lr}
10052bb6:	b082      	sub	sp, #8
10052bb8:	af00      	add	r7, sp, #0
10052bba:	0002      	movs	r2, r0
10052bbc:	1dfb      	adds	r3, r7, #7
10052bbe:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_ENCRYPTON);
10052bc0:	1dfb      	adds	r3, r7, #7
10052bc2:	781b      	ldrb	r3, [r3, #0]
10052bc4:	225c      	movs	r2, #92	@ 0x5c
10052bc6:	4353      	muls	r3, r2
10052bc8:	4a08      	ldr	r2, [pc, #32]	@ (10052bec <LL_RADIO_Encryption_Disable+0x38>)
10052bca:	4694      	mov	ip, r2
10052bcc:	4463      	add	r3, ip
10052bce:	681a      	ldr	r2, [r3, #0]
10052bd0:	1dfb      	adds	r3, r7, #7
10052bd2:	781b      	ldrb	r3, [r3, #0]
10052bd4:	215c      	movs	r1, #92	@ 0x5c
10052bd6:	434b      	muls	r3, r1
10052bd8:	4904      	ldr	r1, [pc, #16]	@ (10052bec <LL_RADIO_Encryption_Disable+0x38>)
10052bda:	468c      	mov	ip, r1
10052bdc:	4463      	add	r3, ip
10052bde:	4904      	ldr	r1, [pc, #16]	@ (10052bf0 <LL_RADIO_Encryption_Disable+0x3c>)
10052be0:	400a      	ands	r2, r1
10052be2:	601a      	str	r2, [r3, #0]
}
10052be4:	46c0      	nop			@ (mov r8, r8)
10052be6:	46bd      	mov	sp, r7
10052be8:	b002      	add	sp, #8
10052bea:	bd80      	pop	{r7, pc}
10052bec:	200000dc 	.word	0x200000dc
10052bf0:	ffdfffff 	.word	0xffdfffff

10052bf4 <LL_RADIO_SetTransmissionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionPhy(uint8_t stateMachineNo, uint32_t value)
{
10052bf4:	b580      	push	{r7, lr}
10052bf6:	b082      	sub	sp, #8
10052bf8:	af00      	add	r7, sp, #0
10052bfa:	0002      	movs	r2, r0
10052bfc:	6039      	str	r1, [r7, #0]
10052bfe:	1dfb      	adds	r3, r7, #7
10052c00:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY, value);
10052c02:	1dfb      	adds	r3, r7, #7
10052c04:	781b      	ldrb	r3, [r3, #0]
10052c06:	225c      	movs	r2, #92	@ 0x5c
10052c08:	4353      	muls	r3, r2
10052c0a:	4a0c      	ldr	r2, [pc, #48]	@ (10052c3c <LL_RADIO_SetTransmissionPhy+0x48>)
10052c0c:	4694      	mov	ip, r2
10052c0e:	4463      	add	r3, ip
10052c10:	681b      	ldr	r3, [r3, #0]
10052c12:	4a0b      	ldr	r2, [pc, #44]	@ (10052c40 <LL_RADIO_SetTransmissionPhy+0x4c>)
10052c14:	4013      	ands	r3, r2
10052c16:	0019      	movs	r1, r3
10052c18:	683b      	ldr	r3, [r7, #0]
10052c1a:	061a      	lsls	r2, r3, #24
10052c1c:	23e0      	movs	r3, #224	@ 0xe0
10052c1e:	04db      	lsls	r3, r3, #19
10052c20:	401a      	ands	r2, r3
10052c22:	1dfb      	adds	r3, r7, #7
10052c24:	781b      	ldrb	r3, [r3, #0]
10052c26:	205c      	movs	r0, #92	@ 0x5c
10052c28:	4343      	muls	r3, r0
10052c2a:	4804      	ldr	r0, [pc, #16]	@ (10052c3c <LL_RADIO_SetTransmissionPhy+0x48>)
10052c2c:	4684      	mov	ip, r0
10052c2e:	4463      	add	r3, ip
10052c30:	430a      	orrs	r2, r1
10052c32:	601a      	str	r2, [r3, #0]
}
10052c34:	46c0      	nop			@ (mov r8, r8)
10052c36:	46bd      	mov	sp, r7
10052c38:	b002      	add	sp, #8
10052c3a:	bd80      	pop	{r7, pc}
10052c3c:	200000dc 	.word	0x200000dc
10052c40:	f8ffffff 	.word	0xf8ffffff

10052c44 <LL_RADIO_GetTransmissionPhy>:
  * @rmtoll WORD0          TXPHY       LL_RADIO_GetTransmissionPhy
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetTransmissionPhy(uint8_t stateMachineNo)
{
10052c44:	b580      	push	{r7, lr}
10052c46:	b082      	sub	sp, #8
10052c48:	af00      	add	r7, sp, #0
10052c4a:	0002      	movs	r2, r0
10052c4c:	1dfb      	adds	r3, r7, #7
10052c4e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY) >> STATEMACH_WORD0_TXPHY_Pos);
10052c50:	1dfb      	adds	r3, r7, #7
10052c52:	781b      	ldrb	r3, [r3, #0]
10052c54:	225c      	movs	r2, #92	@ 0x5c
10052c56:	4353      	muls	r3, r2
10052c58:	4a05      	ldr	r2, [pc, #20]	@ (10052c70 <LL_RADIO_GetTransmissionPhy+0x2c>)
10052c5a:	4694      	mov	ip, r2
10052c5c:	4463      	add	r3, ip
10052c5e:	681b      	ldr	r3, [r3, #0]
10052c60:	0e1b      	lsrs	r3, r3, #24
10052c62:	2207      	movs	r2, #7
10052c64:	4013      	ands	r3, r2
}
10052c66:	0018      	movs	r0, r3
10052c68:	46bd      	mov	sp, r7
10052c6a:	b002      	add	sp, #8
10052c6c:	bd80      	pop	{r7, pc}
10052c6e:	46c0      	nop			@ (mov r8, r8)
10052c70:	200000dc 	.word	0x200000dc

10052c74 <LL_RADIO_SetCTEDisable>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCTEDisable(uint8_t stateMachineNo, uint32_t value)
{
10052c74:	b580      	push	{r7, lr}
10052c76:	b082      	sub	sp, #8
10052c78:	af00      	add	r7, sp, #0
10052c7a:	0002      	movs	r2, r0
10052c7c:	6039      	str	r1, [r7, #0]
10052c7e:	1dfb      	adds	r3, r7, #7
10052c80:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_CTEDISABLE, value);
10052c82:	1dfb      	adds	r3, r7, #7
10052c84:	781b      	ldrb	r3, [r3, #0]
10052c86:	225c      	movs	r2, #92	@ 0x5c
10052c88:	4353      	muls	r3, r2
10052c8a:	4a0c      	ldr	r2, [pc, #48]	@ (10052cbc <LL_RADIO_SetCTEDisable+0x48>)
10052c8c:	4694      	mov	ip, r2
10052c8e:	4463      	add	r3, ip
10052c90:	681b      	ldr	r3, [r3, #0]
10052c92:	4a0b      	ldr	r2, [pc, #44]	@ (10052cc0 <LL_RADIO_SetCTEDisable+0x4c>)
10052c94:	4013      	ands	r3, r2
10052c96:	0019      	movs	r1, r3
10052c98:	683b      	ldr	r3, [r7, #0]
10052c9a:	06da      	lsls	r2, r3, #27
10052c9c:	2380      	movs	r3, #128	@ 0x80
10052c9e:	051b      	lsls	r3, r3, #20
10052ca0:	401a      	ands	r2, r3
10052ca2:	1dfb      	adds	r3, r7, #7
10052ca4:	781b      	ldrb	r3, [r3, #0]
10052ca6:	205c      	movs	r0, #92	@ 0x5c
10052ca8:	4343      	muls	r3, r0
10052caa:	4804      	ldr	r0, [pc, #16]	@ (10052cbc <LL_RADIO_SetCTEDisable+0x48>)
10052cac:	4684      	mov	ip, r0
10052cae:	4463      	add	r3, ip
10052cb0:	430a      	orrs	r2, r1
10052cb2:	601a      	str	r2, [r3, #0]
}
10052cb4:	46c0      	nop			@ (mov r8, r8)
10052cb6:	46bd      	mov	sp, r7
10052cb8:	b002      	add	sp, #8
10052cba:	bd80      	pop	{r7, pc}
10052cbc:	200000dc 	.word	0x200000dc
10052cc0:	f7ffffff 	.word	0xf7ffffff

10052cc4 <LL_RADIO_SetReceptionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceptionPhy(uint8_t stateMachineNo, uint32_t value)
{
10052cc4:	b580      	push	{r7, lr}
10052cc6:	b082      	sub	sp, #8
10052cc8:	af00      	add	r7, sp, #0
10052cca:	0002      	movs	r2, r0
10052ccc:	6039      	str	r1, [r7, #0]
10052cce:	1dfb      	adds	r3, r7, #7
10052cd0:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY, value);
10052cd2:	1dfb      	adds	r3, r7, #7
10052cd4:	781b      	ldrb	r3, [r3, #0]
10052cd6:	225c      	movs	r2, #92	@ 0x5c
10052cd8:	4353      	muls	r3, r2
10052cda:	4a0c      	ldr	r2, [pc, #48]	@ (10052d0c <LL_RADIO_SetReceptionPhy+0x48>)
10052cdc:	4694      	mov	ip, r2
10052cde:	4463      	add	r3, ip
10052ce0:	681b      	ldr	r3, [r3, #0]
10052ce2:	4a0b      	ldr	r2, [pc, #44]	@ (10052d10 <LL_RADIO_SetReceptionPhy+0x4c>)
10052ce4:	4013      	ands	r3, r2
10052ce6:	0019      	movs	r1, r3
10052ce8:	683b      	ldr	r3, [r7, #0]
10052cea:	071a      	lsls	r2, r3, #28
10052cec:	23e0      	movs	r3, #224	@ 0xe0
10052cee:	05db      	lsls	r3, r3, #23
10052cf0:	401a      	ands	r2, r3
10052cf2:	1dfb      	adds	r3, r7, #7
10052cf4:	781b      	ldrb	r3, [r3, #0]
10052cf6:	205c      	movs	r0, #92	@ 0x5c
10052cf8:	4343      	muls	r3, r0
10052cfa:	4804      	ldr	r0, [pc, #16]	@ (10052d0c <LL_RADIO_SetReceptionPhy+0x48>)
10052cfc:	4684      	mov	ip, r0
10052cfe:	4463      	add	r3, ip
10052d00:	430a      	orrs	r2, r1
10052d02:	601a      	str	r2, [r3, #0]
}
10052d04:	46c0      	nop			@ (mov r8, r8)
10052d06:	46bd      	mov	sp, r7
10052d08:	b002      	add	sp, #8
10052d0a:	bd80      	pop	{r7, pc}
10052d0c:	200000dc 	.word	0x200000dc
10052d10:	8fffffff 	.word	0x8fffffff

10052d14 <LL_RADIO_GetReceptionPhy>:
  * @rmtoll WORD0          RXPHY       LL_RADIO_GetReceptionPhy
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetReceptionPhy(uint8_t stateMachineNo)
{
10052d14:	b580      	push	{r7, lr}
10052d16:	b082      	sub	sp, #8
10052d18:	af00      	add	r7, sp, #0
10052d1a:	0002      	movs	r2, r0
10052d1c:	1dfb      	adds	r3, r7, #7
10052d1e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY) >> STATEMACH_WORD0_RXPHY_Pos);
10052d20:	1dfb      	adds	r3, r7, #7
10052d22:	781b      	ldrb	r3, [r3, #0]
10052d24:	225c      	movs	r2, #92	@ 0x5c
10052d26:	4353      	muls	r3, r2
10052d28:	4a05      	ldr	r2, [pc, #20]	@ (10052d40 <LL_RADIO_GetReceptionPhy+0x2c>)
10052d2a:	4694      	mov	ip, r2
10052d2c:	4463      	add	r3, ip
10052d2e:	681b      	ldr	r3, [r3, #0]
10052d30:	0f1b      	lsrs	r3, r3, #28
10052d32:	2207      	movs	r2, #7
10052d34:	4013      	ands	r3, r2
}
10052d36:	0018      	movs	r0, r3
10052d38:	46bd      	mov	sp, r7
10052d3a:	b002      	add	sp, #8
10052d3c:	bd80      	pop	{r7, pc}
10052d3e:	46c0      	nop			@ (mov r8, r8)
10052d40:	200000dc 	.word	0x200000dc

10052d44 <LL_RADIO_SetTxPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxPoint(uint8_t stateMachineNo, uint32_t value)
{
10052d44:	b580      	push	{r7, lr}
10052d46:	b082      	sub	sp, #8
10052d48:	af00      	add	r7, sp, #0
10052d4a:	0002      	movs	r2, r0
10052d4c:	6039      	str	r1, [r7, #0]
10052d4e:	1dfb      	adds	r3, r7, #7
10052d50:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD1, STATEMACH_WORD1_TXPOINT, value);
10052d52:	1dfb      	adds	r3, r7, #7
10052d54:	781b      	ldrb	r3, [r3, #0]
10052d56:	225c      	movs	r2, #92	@ 0x5c
10052d58:	4353      	muls	r3, r2
10052d5a:	4a08      	ldr	r2, [pc, #32]	@ (10052d7c <LL_RADIO_SetTxPoint+0x38>)
10052d5c:	4694      	mov	ip, r2
10052d5e:	4463      	add	r3, ip
10052d60:	685b      	ldr	r3, [r3, #4]
10052d62:	1dfb      	adds	r3, r7, #7
10052d64:	781b      	ldrb	r3, [r3, #0]
10052d66:	225c      	movs	r2, #92	@ 0x5c
10052d68:	4353      	muls	r3, r2
10052d6a:	4a04      	ldr	r2, [pc, #16]	@ (10052d7c <LL_RADIO_SetTxPoint+0x38>)
10052d6c:	4694      	mov	ip, r2
10052d6e:	4463      	add	r3, ip
10052d70:	683a      	ldr	r2, [r7, #0]
10052d72:	605a      	str	r2, [r3, #4]
}
10052d74:	46c0      	nop			@ (mov r8, r8)
10052d76:	46bd      	mov	sp, r7
10052d78:	b002      	add	sp, #8
10052d7a:	bd80      	pop	{r7, pc}
10052d7c:	200000dc 	.word	0x200000dc

10052d80 <LL_RADIO_SetRcvPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRcvPoint(uint8_t stateMachineNo, uint32_t value)
{
10052d80:	b580      	push	{r7, lr}
10052d82:	b082      	sub	sp, #8
10052d84:	af00      	add	r7, sp, #0
10052d86:	0002      	movs	r2, r0
10052d88:	6039      	str	r1, [r7, #0]
10052d8a:	1dfb      	adds	r3, r7, #7
10052d8c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD2, STATEMACH_WORD2_RCVPOINT, value);
10052d8e:	1dfb      	adds	r3, r7, #7
10052d90:	781b      	ldrb	r3, [r3, #0]
10052d92:	225c      	movs	r2, #92	@ 0x5c
10052d94:	4353      	muls	r3, r2
10052d96:	4a08      	ldr	r2, [pc, #32]	@ (10052db8 <LL_RADIO_SetRcvPoint+0x38>)
10052d98:	4694      	mov	ip, r2
10052d9a:	4463      	add	r3, ip
10052d9c:	689b      	ldr	r3, [r3, #8]
10052d9e:	1dfb      	adds	r3, r7, #7
10052da0:	781b      	ldrb	r3, [r3, #0]
10052da2:	225c      	movs	r2, #92	@ 0x5c
10052da4:	4353      	muls	r3, r2
10052da6:	4a04      	ldr	r2, [pc, #16]	@ (10052db8 <LL_RADIO_SetRcvPoint+0x38>)
10052da8:	4694      	mov	ip, r2
10052daa:	4463      	add	r3, ip
10052dac:	683a      	ldr	r2, [r7, #0]
10052dae:	609a      	str	r2, [r3, #8]
}
10052db0:	46c0      	nop			@ (mov r8, r8)
10052db2:	46bd      	mov	sp, r7
10052db4:	b002      	add	sp, #8
10052db6:	bd80      	pop	{r7, pc}
10052db8:	200000dc 	.word	0x200000dc

10052dbc <LL_RADIO_SetPacketCounterTx_31_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterTx_31_0(uint8_t stateMachineNo, uint32_t value)
{
10052dbc:	b580      	push	{r7, lr}
10052dbe:	b082      	sub	sp, #8
10052dc0:	af00      	add	r7, sp, #0
10052dc2:	0002      	movs	r2, r0
10052dc4:	6039      	str	r1, [r7, #0]
10052dc6:	1dfb      	adds	r3, r7, #7
10052dc8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD6, STATEMACH_WORD6_PCNTTX_31_0, value);
10052dca:	1dfb      	adds	r3, r7, #7
10052dcc:	781b      	ldrb	r3, [r3, #0]
10052dce:	225c      	movs	r2, #92	@ 0x5c
10052dd0:	4353      	muls	r3, r2
10052dd2:	4a08      	ldr	r2, [pc, #32]	@ (10052df4 <LL_RADIO_SetPacketCounterTx_31_0+0x38>)
10052dd4:	4694      	mov	ip, r2
10052dd6:	4463      	add	r3, ip
10052dd8:	699b      	ldr	r3, [r3, #24]
10052dda:	1dfb      	adds	r3, r7, #7
10052ddc:	781b      	ldrb	r3, [r3, #0]
10052dde:	225c      	movs	r2, #92	@ 0x5c
10052de0:	4353      	muls	r3, r2
10052de2:	4a04      	ldr	r2, [pc, #16]	@ (10052df4 <LL_RADIO_SetPacketCounterTx_31_0+0x38>)
10052de4:	4694      	mov	ip, r2
10052de6:	4463      	add	r3, ip
10052de8:	683a      	ldr	r2, [r7, #0]
10052dea:	619a      	str	r2, [r3, #24]
}
10052dec:	46c0      	nop			@ (mov r8, r8)
10052dee:	46bd      	mov	sp, r7
10052df0:	b002      	add	sp, #8
10052df2:	bd80      	pop	{r7, pc}
10052df4:	200000dc 	.word	0x200000dc

10052df8 <LL_RADIO_SetPacketCounterTx_39_32>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterTx_39_32(uint8_t stateMachineNo, uint32_t value)
{
10052df8:	b580      	push	{r7, lr}
10052dfa:	b082      	sub	sp, #8
10052dfc:	af00      	add	r7, sp, #0
10052dfe:	0002      	movs	r2, r0
10052e00:	6039      	str	r1, [r7, #0]
10052e02:	1dfb      	adds	r3, r7, #7
10052e04:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD7, STATEMACH_WORD7_PCNTTX_39_32, value);
10052e06:	1dfb      	adds	r3, r7, #7
10052e08:	781b      	ldrb	r3, [r3, #0]
10052e0a:	225c      	movs	r2, #92	@ 0x5c
10052e0c:	4353      	muls	r3, r2
10052e0e:	4a0b      	ldr	r2, [pc, #44]	@ (10052e3c <LL_RADIO_SetPacketCounterTx_39_32+0x44>)
10052e10:	4694      	mov	ip, r2
10052e12:	4463      	add	r3, ip
10052e14:	69db      	ldr	r3, [r3, #28]
10052e16:	22ff      	movs	r2, #255	@ 0xff
10052e18:	4393      	bics	r3, r2
10052e1a:	0019      	movs	r1, r3
10052e1c:	683b      	ldr	r3, [r7, #0]
10052e1e:	22ff      	movs	r2, #255	@ 0xff
10052e20:	401a      	ands	r2, r3
10052e22:	1dfb      	adds	r3, r7, #7
10052e24:	781b      	ldrb	r3, [r3, #0]
10052e26:	205c      	movs	r0, #92	@ 0x5c
10052e28:	4343      	muls	r3, r0
10052e2a:	4804      	ldr	r0, [pc, #16]	@ (10052e3c <LL_RADIO_SetPacketCounterTx_39_32+0x44>)
10052e2c:	4684      	mov	ip, r0
10052e2e:	4463      	add	r3, ip
10052e30:	430a      	orrs	r2, r1
10052e32:	61da      	str	r2, [r3, #28]
}
10052e34:	46c0      	nop			@ (mov r8, r8)
10052e36:	46bd      	mov	sp, r7
10052e38:	b002      	add	sp, #8
10052e3a:	bd80      	pop	{r7, pc}
10052e3c:	200000dc 	.word	0x200000dc

10052e40 <LL_RADIO_GetPacketCounterTx_39_32>:
  * @rmtoll WORD7          PCNTTX_39_32       LL_RADIO_GetPacketCounterTx_39_32
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterTx_39_32(uint8_t stateMachineNo)
{
10052e40:	b580      	push	{r7, lr}
10052e42:	b082      	sub	sp, #8
10052e44:	af00      	add	r7, sp, #0
10052e46:	0002      	movs	r2, r0
10052e48:	1dfb      	adds	r3, r7, #7
10052e4a:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD7,
10052e4c:	1dfb      	adds	r3, r7, #7
10052e4e:	781b      	ldrb	r3, [r3, #0]
10052e50:	225c      	movs	r2, #92	@ 0x5c
10052e52:	4353      	muls	r3, r2
10052e54:	4a04      	ldr	r2, [pc, #16]	@ (10052e68 <LL_RADIO_GetPacketCounterTx_39_32+0x28>)
10052e56:	4694      	mov	ip, r2
10052e58:	4463      	add	r3, ip
10052e5a:	69db      	ldr	r3, [r3, #28]
10052e5c:	22ff      	movs	r2, #255	@ 0xff
10052e5e:	4013      	ands	r3, r2
                             STATEMACH_WORD7_PCNTTX_39_32) >> STATEMACH_WORD7_PCNTTX_39_32_Pos);
}
10052e60:	0018      	movs	r0, r3
10052e62:	46bd      	mov	sp, r7
10052e64:	b002      	add	sp, #8
10052e66:	bd80      	pop	{r7, pc}
10052e68:	200000dc 	.word	0x200000dc

10052e6c <LL_RADIO_SetPacketCounterRx_23_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterRx_23_0(uint8_t stateMachineNo, uint32_t value)
{
10052e6c:	b580      	push	{r7, lr}
10052e6e:	b082      	sub	sp, #8
10052e70:	af00      	add	r7, sp, #0
10052e72:	0002      	movs	r2, r0
10052e74:	6039      	str	r1, [r7, #0]
10052e76:	1dfb      	adds	r3, r7, #7
10052e78:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD7, STATEMACH_WORD7_PCNTRCV_23_0, value);
10052e7a:	1dfb      	adds	r3, r7, #7
10052e7c:	781b      	ldrb	r3, [r3, #0]
10052e7e:	225c      	movs	r2, #92	@ 0x5c
10052e80:	4353      	muls	r3, r2
10052e82:	4a0b      	ldr	r2, [pc, #44]	@ (10052eb0 <LL_RADIO_SetPacketCounterRx_23_0+0x44>)
10052e84:	4694      	mov	ip, r2
10052e86:	4463      	add	r3, ip
10052e88:	69db      	ldr	r3, [r3, #28]
10052e8a:	22ff      	movs	r2, #255	@ 0xff
10052e8c:	4013      	ands	r3, r2
10052e8e:	0019      	movs	r1, r3
10052e90:	683b      	ldr	r3, [r7, #0]
10052e92:	021a      	lsls	r2, r3, #8
10052e94:	1dfb      	adds	r3, r7, #7
10052e96:	781b      	ldrb	r3, [r3, #0]
10052e98:	205c      	movs	r0, #92	@ 0x5c
10052e9a:	4343      	muls	r3, r0
10052e9c:	4804      	ldr	r0, [pc, #16]	@ (10052eb0 <LL_RADIO_SetPacketCounterRx_23_0+0x44>)
10052e9e:	4684      	mov	ip, r0
10052ea0:	4463      	add	r3, ip
10052ea2:	430a      	orrs	r2, r1
10052ea4:	61da      	str	r2, [r3, #28]
}
10052ea6:	46c0      	nop			@ (mov r8, r8)
10052ea8:	46bd      	mov	sp, r7
10052eaa:	b002      	add	sp, #8
10052eac:	bd80      	pop	{r7, pc}
10052eae:	46c0      	nop			@ (mov r8, r8)
10052eb0:	200000dc 	.word	0x200000dc

10052eb4 <LL_RADIO_GetPacketCounterRx_23_0>:
  * @rmtoll WORD7          PCNTRCV_23_0       LL_RADIO_GetPacketCounterRx_23_0
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterRx_23_0(uint8_t stateMachineNo)
{
10052eb4:	b580      	push	{r7, lr}
10052eb6:	b082      	sub	sp, #8
10052eb8:	af00      	add	r7, sp, #0
10052eba:	0002      	movs	r2, r0
10052ebc:	1dfb      	adds	r3, r7, #7
10052ebe:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD7,
10052ec0:	1dfb      	adds	r3, r7, #7
10052ec2:	781b      	ldrb	r3, [r3, #0]
10052ec4:	225c      	movs	r2, #92	@ 0x5c
10052ec6:	4353      	muls	r3, r2
10052ec8:	4a05      	ldr	r2, [pc, #20]	@ (10052ee0 <LL_RADIO_GetPacketCounterRx_23_0+0x2c>)
10052eca:	4694      	mov	ip, r2
10052ecc:	4463      	add	r3, ip
10052ece:	69db      	ldr	r3, [r3, #28]
10052ed0:	0a1b      	lsrs	r3, r3, #8
10052ed2:	021b      	lsls	r3, r3, #8
10052ed4:	0a1b      	lsrs	r3, r3, #8
                             STATEMACH_WORD7_PCNTRCV_23_0) >> STATEMACH_WORD7_PCNTRCV_23_0_Pos);
}
10052ed6:	0018      	movs	r0, r3
10052ed8:	46bd      	mov	sp, r7
10052eda:	b002      	add	sp, #8
10052edc:	bd80      	pop	{r7, pc}
10052ede:	46c0      	nop			@ (mov r8, r8)
10052ee0:	200000dc 	.word	0x200000dc

10052ee4 <LL_RADIO_SetPacketCounterRx_39_24>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterRx_39_24(uint8_t stateMachineNo, uint32_t value)
{
10052ee4:	b580      	push	{r7, lr}
10052ee6:	b082      	sub	sp, #8
10052ee8:	af00      	add	r7, sp, #0
10052eea:	0002      	movs	r2, r0
10052eec:	6039      	str	r1, [r7, #0]
10052eee:	1dfb      	adds	r3, r7, #7
10052ef0:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_PCNTRCV_39_24, value);
10052ef2:	1dfb      	adds	r3, r7, #7
10052ef4:	781b      	ldrb	r3, [r3, #0]
10052ef6:	225c      	movs	r2, #92	@ 0x5c
10052ef8:	4353      	muls	r3, r2
10052efa:	4a0b      	ldr	r2, [pc, #44]	@ (10052f28 <LL_RADIO_SetPacketCounterRx_39_24+0x44>)
10052efc:	4694      	mov	ip, r2
10052efe:	4463      	add	r3, ip
10052f00:	6a1b      	ldr	r3, [r3, #32]
10052f02:	0c1b      	lsrs	r3, r3, #16
10052f04:	0419      	lsls	r1, r3, #16
10052f06:	683b      	ldr	r3, [r7, #0]
10052f08:	041b      	lsls	r3, r3, #16
10052f0a:	0c1a      	lsrs	r2, r3, #16
10052f0c:	1dfb      	adds	r3, r7, #7
10052f0e:	781b      	ldrb	r3, [r3, #0]
10052f10:	205c      	movs	r0, #92	@ 0x5c
10052f12:	4343      	muls	r3, r0
10052f14:	4804      	ldr	r0, [pc, #16]	@ (10052f28 <LL_RADIO_SetPacketCounterRx_39_24+0x44>)
10052f16:	4684      	mov	ip, r0
10052f18:	4463      	add	r3, ip
10052f1a:	430a      	orrs	r2, r1
10052f1c:	621a      	str	r2, [r3, #32]
}
10052f1e:	46c0      	nop			@ (mov r8, r8)
10052f20:	46bd      	mov	sp, r7
10052f22:	b002      	add	sp, #8
10052f24:	bd80      	pop	{r7, pc}
10052f26:	46c0      	nop			@ (mov r8, r8)
10052f28:	200000dc 	.word	0x200000dc

10052f2c <LL_RADIO_GetPacketCounterRx_39_24>:
  * @rmtoll WORD8          PCNTRCV_39_24       LL_RADIO_GetPacketCounterRx_39_24
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterRx_39_24(uint8_t stateMachineNo)
{
10052f2c:	b580      	push	{r7, lr}
10052f2e:	b082      	sub	sp, #8
10052f30:	af00      	add	r7, sp, #0
10052f32:	0002      	movs	r2, r0
10052f34:	1dfb      	adds	r3, r7, #7
10052f36:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD8,
10052f38:	1dfb      	adds	r3, r7, #7
10052f3a:	781b      	ldrb	r3, [r3, #0]
10052f3c:	225c      	movs	r2, #92	@ 0x5c
10052f3e:	4353      	muls	r3, r2
10052f40:	4a04      	ldr	r2, [pc, #16]	@ (10052f54 <LL_RADIO_GetPacketCounterRx_39_24+0x28>)
10052f42:	4694      	mov	ip, r2
10052f44:	4463      	add	r3, ip
10052f46:	6a1b      	ldr	r3, [r3, #32]
10052f48:	041b      	lsls	r3, r3, #16
10052f4a:	0c1b      	lsrs	r3, r3, #16
                             STATEMACH_WORD8_PCNTRCV_39_24) >> STATEMACH_WORD8_PCNTRCV_39_24_Pos);
}
10052f4c:	0018      	movs	r0, r3
10052f4e:	46bd      	mov	sp, r7
10052f50:	b002      	add	sp, #8
10052f52:	bd80      	pop	{r7, pc}
10052f54:	200000dc 	.word	0x200000dc

10052f58 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable>:
  * @rmtoll WORD8          INTENCERROR            LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable(uint8_t stateMachineNo)
{
10052f58:	b580      	push	{r7, lr}
10052f5a:	b082      	sub	sp, #8
10052f5c:	af00      	add	r7, sp, #0
10052f5e:	0002      	movs	r2, r0
10052f60:	1dfb      	adds	r3, r7, #7
10052f62:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_INTENCERROR);
10052f64:	1dfb      	adds	r3, r7, #7
10052f66:	781b      	ldrb	r3, [r3, #0]
10052f68:	225c      	movs	r2, #92	@ 0x5c
10052f6a:	4353      	muls	r3, r2
10052f6c:	4a09      	ldr	r2, [pc, #36]	@ (10052f94 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable+0x3c>)
10052f6e:	4694      	mov	ip, r2
10052f70:	4463      	add	r3, ip
10052f72:	6a1a      	ldr	r2, [r3, #32]
10052f74:	1dfb      	adds	r3, r7, #7
10052f76:	781b      	ldrb	r3, [r3, #0]
10052f78:	215c      	movs	r1, #92	@ 0x5c
10052f7a:	434b      	muls	r3, r1
10052f7c:	4905      	ldr	r1, [pc, #20]	@ (10052f94 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable+0x3c>)
10052f7e:	468c      	mov	ip, r1
10052f80:	4463      	add	r3, ip
10052f82:	2180      	movs	r1, #128	@ 0x80
10052f84:	0589      	lsls	r1, r1, #22
10052f86:	430a      	orrs	r2, r1
10052f88:	621a      	str	r2, [r3, #32]
}
10052f8a:	46c0      	nop			@ (mov r8, r8)
10052f8c:	46bd      	mov	sp, r7
10052f8e:	b002      	add	sp, #8
10052f90:	bd80      	pop	{r7, pc}
10052f92:	46c0      	nop			@ (mov r8, r8)
10052f94:	200000dc 	.word	0x200000dc

10052f98 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable>:
  * @rmtoll WORD8          INTENCERROR            LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable(uint8_t stateMachineNo)
{
10052f98:	b580      	push	{r7, lr}
10052f9a:	b082      	sub	sp, #8
10052f9c:	af00      	add	r7, sp, #0
10052f9e:	0002      	movs	r2, r0
10052fa0:	1dfb      	adds	r3, r7, #7
10052fa2:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_INTENCERROR);
10052fa4:	1dfb      	adds	r3, r7, #7
10052fa6:	781b      	ldrb	r3, [r3, #0]
10052fa8:	225c      	movs	r2, #92	@ 0x5c
10052faa:	4353      	muls	r3, r2
10052fac:	4a08      	ldr	r2, [pc, #32]	@ (10052fd0 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x38>)
10052fae:	4694      	mov	ip, r2
10052fb0:	4463      	add	r3, ip
10052fb2:	6a1a      	ldr	r2, [r3, #32]
10052fb4:	1dfb      	adds	r3, r7, #7
10052fb6:	781b      	ldrb	r3, [r3, #0]
10052fb8:	215c      	movs	r1, #92	@ 0x5c
10052fba:	434b      	muls	r3, r1
10052fbc:	4904      	ldr	r1, [pc, #16]	@ (10052fd0 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x38>)
10052fbe:	468c      	mov	ip, r1
10052fc0:	4463      	add	r3, ip
10052fc2:	4904      	ldr	r1, [pc, #16]	@ (10052fd4 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x3c>)
10052fc4:	400a      	ands	r2, r1
10052fc6:	621a      	str	r2, [r3, #32]
}
10052fc8:	46c0      	nop			@ (mov r8, r8)
10052fca:	46bd      	mov	sp, r7
10052fcc:	b002      	add	sp, #8
10052fce:	bd80      	pop	{r7, pc}
10052fd0:	200000dc 	.word	0x200000dc
10052fd4:	dfffffff 	.word	0xdfffffff

10052fd8 <LL_RADIO_SetAccessAddress>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAccessAddress(uint8_t stateMachineNo, uint32_t value)
{
10052fd8:	b580      	push	{r7, lr}
10052fda:	b082      	sub	sp, #8
10052fdc:	af00      	add	r7, sp, #0
10052fde:	0002      	movs	r2, r0
10052fe0:	6039      	str	r1, [r7, #0]
10052fe2:	1dfb      	adds	r3, r7, #7
10052fe4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD9, STATEMACH_WORD9_ACCADDR, value);
10052fe6:	1dfb      	adds	r3, r7, #7
10052fe8:	781b      	ldrb	r3, [r3, #0]
10052fea:	225c      	movs	r2, #92	@ 0x5c
10052fec:	4353      	muls	r3, r2
10052fee:	4a08      	ldr	r2, [pc, #32]	@ (10053010 <LL_RADIO_SetAccessAddress+0x38>)
10052ff0:	4694      	mov	ip, r2
10052ff2:	4463      	add	r3, ip
10052ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10052ff6:	1dfb      	adds	r3, r7, #7
10052ff8:	781b      	ldrb	r3, [r3, #0]
10052ffa:	225c      	movs	r2, #92	@ 0x5c
10052ffc:	4353      	muls	r3, r2
10052ffe:	4a04      	ldr	r2, [pc, #16]	@ (10053010 <LL_RADIO_SetAccessAddress+0x38>)
10053000:	4694      	mov	ip, r2
10053002:	4463      	add	r3, ip
10053004:	683a      	ldr	r2, [r7, #0]
10053006:	625a      	str	r2, [r3, #36]	@ 0x24
}
10053008:	46c0      	nop			@ (mov r8, r8)
1005300a:	46bd      	mov	sp, r7
1005300c:	b002      	add	sp, #8
1005300e:	bd80      	pop	{r7, pc}
10053010:	200000dc 	.word	0x200000dc

10053014 <LL_RADIO_GetAccessAddress>:
  * @rmtoll WORD9          ACCADDR       LL_RADIO_GetAccessAddress
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetAccessAddress(uint8_t stateMachineNo)
{
10053014:	b580      	push	{r7, lr}
10053016:	b082      	sub	sp, #8
10053018:	af00      	add	r7, sp, #0
1005301a:	0002      	movs	r2, r0
1005301c:	1dfb      	adds	r3, r7, #7
1005301e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD9,
10053020:	1dfb      	adds	r3, r7, #7
10053022:	781b      	ldrb	r3, [r3, #0]
10053024:	225c      	movs	r2, #92	@ 0x5c
10053026:	4353      	muls	r3, r2
10053028:	4a03      	ldr	r2, [pc, #12]	@ (10053038 <LL_RADIO_GetAccessAddress+0x24>)
1005302a:	4694      	mov	ip, r2
1005302c:	4463      	add	r3, ip
1005302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                             STATEMACH_WORD9_ACCADDR) >> STATEMACH_WORD9_ACCADDR_Pos);
}
10053030:	0018      	movs	r0, r3
10053032:	46bd      	mov	sp, r7
10053034:	b002      	add	sp, #8
10053036:	bd80      	pop	{r7, pc}
10053038:	200000dc 	.word	0x200000dc

1005303c <LL_RADIO_SetCRCInitializationValue>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationValue(uint8_t stateMachineNo, uint32_t value)
{
1005303c:	b580      	push	{r7, lr}
1005303e:	b082      	sub	sp, #8
10053040:	af00      	add	r7, sp, #0
10053042:	0002      	movs	r2, r0
10053044:	6039      	str	r1, [r7, #0]
10053046:	1dfb      	adds	r3, r7, #7
10053048:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_CRCINIT, value);
1005304a:	1dfb      	adds	r3, r7, #7
1005304c:	781b      	ldrb	r3, [r3, #0]
1005304e:	225c      	movs	r2, #92	@ 0x5c
10053050:	4353      	muls	r3, r2
10053052:	4a0b      	ldr	r2, [pc, #44]	@ (10053080 <LL_RADIO_SetCRCInitializationValue+0x44>)
10053054:	4694      	mov	ip, r2
10053056:	4463      	add	r3, ip
10053058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1005305a:	0e1b      	lsrs	r3, r3, #24
1005305c:	0619      	lsls	r1, r3, #24
1005305e:	683b      	ldr	r3, [r7, #0]
10053060:	021b      	lsls	r3, r3, #8
10053062:	0a1a      	lsrs	r2, r3, #8
10053064:	1dfb      	adds	r3, r7, #7
10053066:	781b      	ldrb	r3, [r3, #0]
10053068:	205c      	movs	r0, #92	@ 0x5c
1005306a:	4343      	muls	r3, r0
1005306c:	4804      	ldr	r0, [pc, #16]	@ (10053080 <LL_RADIO_SetCRCInitializationValue+0x44>)
1005306e:	4684      	mov	ip, r0
10053070:	4463      	add	r3, ip
10053072:	430a      	orrs	r2, r1
10053074:	629a      	str	r2, [r3, #40]	@ 0x28
}
10053076:	46c0      	nop			@ (mov r8, r8)
10053078:	46bd      	mov	sp, r7
1005307a:	b002      	add	sp, #8
1005307c:	bd80      	pop	{r7, pc}
1005307e:	46c0      	nop			@ (mov r8, r8)
10053080:	200000dc 	.word	0x200000dc

10053084 <LL_RADIO_SetMaximumReceiveLength>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetMaximumReceiveLength(uint8_t stateMachineNo, uint32_t value)
{
10053084:	b580      	push	{r7, lr}
10053086:	b082      	sub	sp, #8
10053088:	af00      	add	r7, sp, #0
1005308a:	0002      	movs	r2, r0
1005308c:	6039      	str	r1, [r7, #0]
1005308e:	1dfb      	adds	r3, r7, #7
10053090:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_MAXRECEIVEDLENGTH, value);
10053092:	1dfb      	adds	r3, r7, #7
10053094:	781b      	ldrb	r3, [r3, #0]
10053096:	225c      	movs	r2, #92	@ 0x5c
10053098:	4353      	muls	r3, r2
1005309a:	4a0a      	ldr	r2, [pc, #40]	@ (100530c4 <LL_RADIO_SetMaximumReceiveLength+0x40>)
1005309c:	4694      	mov	ip, r2
1005309e:	4463      	add	r3, ip
100530a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100530a2:	021b      	lsls	r3, r3, #8
100530a4:	0a19      	lsrs	r1, r3, #8
100530a6:	683b      	ldr	r3, [r7, #0]
100530a8:	061a      	lsls	r2, r3, #24
100530aa:	1dfb      	adds	r3, r7, #7
100530ac:	781b      	ldrb	r3, [r3, #0]
100530ae:	205c      	movs	r0, #92	@ 0x5c
100530b0:	4343      	muls	r3, r0
100530b2:	4804      	ldr	r0, [pc, #16]	@ (100530c4 <LL_RADIO_SetMaximumReceiveLength+0x40>)
100530b4:	4684      	mov	ip, r0
100530b6:	4463      	add	r3, ip
100530b8:	430a      	orrs	r2, r1
100530ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
100530bc:	46c0      	nop			@ (mov r8, r8)
100530be:	46bd      	mov	sp, r7
100530c0:	b002      	add	sp, #8
100530c2:	bd80      	pop	{r7, pc}
100530c4:	200000dc 	.word	0x200000dc

100530c8 <LL_RADIO_SetPAPower>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPAPower(uint8_t stateMachineNo, uint32_t value)
{
100530c8:	b580      	push	{r7, lr}
100530ca:	b082      	sub	sp, #8
100530cc:	af00      	add	r7, sp, #0
100530ce:	0002      	movs	r2, r0
100530d0:	6039      	str	r1, [r7, #0]
100530d2:	1dfb      	adds	r3, r7, #7
100530d4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_PAPOWER, value);
100530d6:	1dfb      	adds	r3, r7, #7
100530d8:	781b      	ldrb	r3, [r3, #0]
100530da:	225c      	movs	r2, #92	@ 0x5c
100530dc:	4353      	muls	r3, r2
100530de:	4a0b      	ldr	r2, [pc, #44]	@ (1005310c <LL_RADIO_SetPAPower+0x44>)
100530e0:	4694      	mov	ip, r2
100530e2:	4463      	add	r3, ip
100530e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100530e6:	221f      	movs	r2, #31
100530e8:	4393      	bics	r3, r2
100530ea:	0019      	movs	r1, r3
100530ec:	683b      	ldr	r3, [r7, #0]
100530ee:	221f      	movs	r2, #31
100530f0:	401a      	ands	r2, r3
100530f2:	1dfb      	adds	r3, r7, #7
100530f4:	781b      	ldrb	r3, [r3, #0]
100530f6:	205c      	movs	r0, #92	@ 0x5c
100530f8:	4343      	muls	r3, r0
100530fa:	4804      	ldr	r0, [pc, #16]	@ (1005310c <LL_RADIO_SetPAPower+0x44>)
100530fc:	4684      	mov	ip, r0
100530fe:	4463      	add	r3, ip
10053100:	430a      	orrs	r2, r1
10053102:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10053104:	46c0      	nop			@ (mov r8, r8)
10053106:	46bd      	mov	sp, r7
10053108:	b002      	add	sp, #8
1005310a:	bd80      	pop	{r7, pc}
1005310c:	200000dc 	.word	0x200000dc

10053110 <LL_RADIO_GetPAPower>:
  * @rmtoll WORDB          PAPOWER       LL_RADIO_GetPAPower
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPAPower(uint8_t stateMachineNo)
{
10053110:	b580      	push	{r7, lr}
10053112:	b082      	sub	sp, #8
10053114:	af00      	add	r7, sp, #0
10053116:	0002      	movs	r2, r0
10053118:	1dfb      	adds	r3, r7, #7
1005311a:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
1005311c:	1dfb      	adds	r3, r7, #7
1005311e:	781b      	ldrb	r3, [r3, #0]
10053120:	225c      	movs	r2, #92	@ 0x5c
10053122:	4353      	muls	r3, r2
10053124:	4a04      	ldr	r2, [pc, #16]	@ (10053138 <LL_RADIO_GetPAPower+0x28>)
10053126:	4694      	mov	ip, r2
10053128:	4463      	add	r3, ip
1005312a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1005312c:	221f      	movs	r2, #31
1005312e:	4013      	ands	r3, r2
                             STATEMACH_WORDB_PAPOWER) >> STATEMACH_WORDB_PAPOWER_Pos);
}
10053130:	0018      	movs	r0, r3
10053132:	46bd      	mov	sp, r7
10053134:	b002      	add	sp, #8
10053136:	bd80      	pop	{r7, pc}
10053138:	200000dc 	.word	0x200000dc

1005313c <LL_RADIO_SetHopIncrement>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetHopIncrement(uint8_t stateMachineNo, uint32_t value)
{
1005313c:	b580      	push	{r7, lr}
1005313e:	b082      	sub	sp, #8
10053140:	af00      	add	r7, sp, #0
10053142:	0002      	movs	r2, r0
10053144:	6039      	str	r1, [r7, #0]
10053146:	1dfb      	adds	r3, r7, #7
10053148:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_HOPINCR, value);
1005314a:	1dfb      	adds	r3, r7, #7
1005314c:	781b      	ldrb	r3, [r3, #0]
1005314e:	225c      	movs	r2, #92	@ 0x5c
10053150:	4353      	muls	r3, r2
10053152:	4a0c      	ldr	r2, [pc, #48]	@ (10053184 <LL_RADIO_SetHopIncrement+0x48>)
10053154:	4694      	mov	ip, r2
10053156:	4463      	add	r3, ip
10053158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1005315a:	4a0b      	ldr	r2, [pc, #44]	@ (10053188 <LL_RADIO_SetHopIncrement+0x4c>)
1005315c:	4013      	ands	r3, r2
1005315e:	0019      	movs	r1, r3
10053160:	683b      	ldr	r3, [r7, #0]
10053162:	021a      	lsls	r2, r3, #8
10053164:	23fc      	movs	r3, #252	@ 0xfc
10053166:	019b      	lsls	r3, r3, #6
10053168:	401a      	ands	r2, r3
1005316a:	1dfb      	adds	r3, r7, #7
1005316c:	781b      	ldrb	r3, [r3, #0]
1005316e:	205c      	movs	r0, #92	@ 0x5c
10053170:	4343      	muls	r3, r0
10053172:	4804      	ldr	r0, [pc, #16]	@ (10053184 <LL_RADIO_SetHopIncrement+0x48>)
10053174:	4684      	mov	ip, r0
10053176:	4463      	add	r3, ip
10053178:	430a      	orrs	r2, r1
1005317a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1005317c:	46c0      	nop			@ (mov r8, r8)
1005317e:	46bd      	mov	sp, r7
10053180:	b002      	add	sp, #8
10053182:	bd80      	pop	{r7, pc}
10053184:	200000dc 	.word	0x200000dc
10053188:	ffffc0ff 	.word	0xffffc0ff

1005318c <LL_RADIO_GetHopIncrement>:
  * @rmtoll WORDB          HOPINCR       LL_RADIO_GetHopIncrement
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetHopIncrement(uint8_t stateMachineNo)
{
1005318c:	b580      	push	{r7, lr}
1005318e:	b082      	sub	sp, #8
10053190:	af00      	add	r7, sp, #0
10053192:	0002      	movs	r2, r0
10053194:	1dfb      	adds	r3, r7, #7
10053196:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
10053198:	1dfb      	adds	r3, r7, #7
1005319a:	781b      	ldrb	r3, [r3, #0]
1005319c:	225c      	movs	r2, #92	@ 0x5c
1005319e:	4353      	muls	r3, r2
100531a0:	4a05      	ldr	r2, [pc, #20]	@ (100531b8 <LL_RADIO_GetHopIncrement+0x2c>)
100531a2:	4694      	mov	ip, r2
100531a4:	4463      	add	r3, ip
100531a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100531a8:	0a1b      	lsrs	r3, r3, #8
100531aa:	223f      	movs	r2, #63	@ 0x3f
100531ac:	4013      	ands	r3, r2
                             STATEMACH_WORDB_HOPINCR) >> STATEMACH_WORDB_HOPINCR_Pos);
}
100531ae:	0018      	movs	r0, r3
100531b0:	46bd      	mov	sp, r7
100531b2:	b002      	add	sp, #8
100531b4:	bd80      	pop	{r7, pc}
100531b6:	46c0      	nop			@ (mov r8, r8)
100531b8:	200000dc 	.word	0x200000dc

100531bc <LL_RADIO_SetUsedChannelFlags_15_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUsedChannelFlags_15_0(uint8_t stateMachineNo, uint32_t value)
{
100531bc:	b580      	push	{r7, lr}
100531be:	b082      	sub	sp, #8
100531c0:	af00      	add	r7, sp, #0
100531c2:	0002      	movs	r2, r0
100531c4:	6039      	str	r1, [r7, #0]
100531c6:	1dfb      	adds	r3, r7, #7
100531c8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_USEDCHANNELFLAGS_15_0, value);
100531ca:	1dfb      	adds	r3, r7, #7
100531cc:	781b      	ldrb	r3, [r3, #0]
100531ce:	225c      	movs	r2, #92	@ 0x5c
100531d0:	4353      	muls	r3, r2
100531d2:	4a0a      	ldr	r2, [pc, #40]	@ (100531fc <LL_RADIO_SetUsedChannelFlags_15_0+0x40>)
100531d4:	4694      	mov	ip, r2
100531d6:	4463      	add	r3, ip
100531d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100531da:	041b      	lsls	r3, r3, #16
100531dc:	0c19      	lsrs	r1, r3, #16
100531de:	683b      	ldr	r3, [r7, #0]
100531e0:	041a      	lsls	r2, r3, #16
100531e2:	1dfb      	adds	r3, r7, #7
100531e4:	781b      	ldrb	r3, [r3, #0]
100531e6:	205c      	movs	r0, #92	@ 0x5c
100531e8:	4343      	muls	r3, r0
100531ea:	4804      	ldr	r0, [pc, #16]	@ (100531fc <LL_RADIO_SetUsedChannelFlags_15_0+0x40>)
100531ec:	4684      	mov	ip, r0
100531ee:	4463      	add	r3, ip
100531f0:	430a      	orrs	r2, r1
100531f2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
100531f4:	46c0      	nop			@ (mov r8, r8)
100531f6:	46bd      	mov	sp, r7
100531f8:	b002      	add	sp, #8
100531fa:	bd80      	pop	{r7, pc}
100531fc:	200000dc 	.word	0x200000dc

10053200 <LL_RADIO_GetUsedChannelFlags_15_0>:
  * @rmtoll WORDB          USEDCHANNELFLAGS_15_0       LL_RADIO_GetUsedChannelFlags_15_0
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetUsedChannelFlags_15_0(uint8_t stateMachineNo)
{
10053200:	b580      	push	{r7, lr}
10053202:	b082      	sub	sp, #8
10053204:	af00      	add	r7, sp, #0
10053206:	0002      	movs	r2, r0
10053208:	1dfb      	adds	r3, r7, #7
1005320a:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
1005320c:	1dfb      	adds	r3, r7, #7
1005320e:	781b      	ldrb	r3, [r3, #0]
10053210:	225c      	movs	r2, #92	@ 0x5c
10053212:	4353      	muls	r3, r2
10053214:	4a05      	ldr	r2, [pc, #20]	@ (1005322c <LL_RADIO_GetUsedChannelFlags_15_0+0x2c>)
10053216:	4694      	mov	ip, r2
10053218:	4463      	add	r3, ip
1005321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1005321c:	0c1b      	lsrs	r3, r3, #16
1005321e:	041b      	lsls	r3, r3, #16
10053220:	0c1b      	lsrs	r3, r3, #16
                             STATEMACH_WORDB_USEDCHANNELFLAGS_15_0) >> STATEMACH_WORDB_USEDCHANNELFLAGS_15_0_Pos);
}
10053222:	0018      	movs	r0, r3
10053224:	46bd      	mov	sp, r7
10053226:	b002      	add	sp, #8
10053228:	bd80      	pop	{r7, pc}
1005322a:	46c0      	nop			@ (mov r8, r8)
1005322c:	200000dc 	.word	0x200000dc

10053230 <LL_RADIO_SetUsedChannelFlags_36_16>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUsedChannelFlags_36_16(uint8_t stateMachineNo, uint32_t value)
{
10053230:	b580      	push	{r7, lr}
10053232:	b082      	sub	sp, #8
10053234:	af00      	add	r7, sp, #0
10053236:	0002      	movs	r2, r0
10053238:	6039      	str	r1, [r7, #0]
1005323a:	1dfb      	adds	r3, r7, #7
1005323c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDC, STATEMACH_WORDC_USEDCHANNELFLAGS_36_16, value);
1005323e:	1dfb      	adds	r3, r7, #7
10053240:	781b      	ldrb	r3, [r3, #0]
10053242:	225c      	movs	r2, #92	@ 0x5c
10053244:	4353      	muls	r3, r2
10053246:	4a0b      	ldr	r2, [pc, #44]	@ (10053274 <LL_RADIO_SetUsedChannelFlags_36_16+0x44>)
10053248:	4694      	mov	ip, r2
1005324a:	4463      	add	r3, ip
1005324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1005324e:	0d9b      	lsrs	r3, r3, #22
10053250:	0599      	lsls	r1, r3, #22
10053252:	683b      	ldr	r3, [r7, #0]
10053254:	029b      	lsls	r3, r3, #10
10053256:	0a9a      	lsrs	r2, r3, #10
10053258:	1dfb      	adds	r3, r7, #7
1005325a:	781b      	ldrb	r3, [r3, #0]
1005325c:	205c      	movs	r0, #92	@ 0x5c
1005325e:	4343      	muls	r3, r0
10053260:	4804      	ldr	r0, [pc, #16]	@ (10053274 <LL_RADIO_SetUsedChannelFlags_36_16+0x44>)
10053262:	4684      	mov	ip, r0
10053264:	4463      	add	r3, ip
10053266:	430a      	orrs	r2, r1
10053268:	631a      	str	r2, [r3, #48]	@ 0x30
}
1005326a:	46c0      	nop			@ (mov r8, r8)
1005326c:	46bd      	mov	sp, r7
1005326e:	b002      	add	sp, #8
10053270:	bd80      	pop	{r7, pc}
10053272:	46c0      	nop			@ (mov r8, r8)
10053274:	200000dc 	.word	0x200000dc

10053278 <LL_RADIO_GetUsedChannelFlags_36_16>:
  * @rmtoll WORDC          USEDCHANNELFLAGS_36_16       LL_RADIO_GetUsedChannelFlags_36_16
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetUsedChannelFlags_36_16(uint8_t stateMachineNo)
{
10053278:	b580      	push	{r7, lr}
1005327a:	b082      	sub	sp, #8
1005327c:	af00      	add	r7, sp, #0
1005327e:	0002      	movs	r2, r0
10053280:	1dfb      	adds	r3, r7, #7
10053282:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDC,
10053284:	1dfb      	adds	r3, r7, #7
10053286:	781b      	ldrb	r3, [r3, #0]
10053288:	225c      	movs	r2, #92	@ 0x5c
1005328a:	4353      	muls	r3, r2
1005328c:	4a04      	ldr	r2, [pc, #16]	@ (100532a0 <LL_RADIO_GetUsedChannelFlags_36_16+0x28>)
1005328e:	4694      	mov	ip, r2
10053290:	4463      	add	r3, ip
10053292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10053294:	029b      	lsls	r3, r3, #10
10053296:	0a9b      	lsrs	r3, r3, #10
                             STATEMACH_WORDC_USEDCHANNELFLAGS_36_16) >> STATEMACH_WORDC_USEDCHANNELFLAGS_36_16_Pos);
}
10053298:	0018      	movs	r0, r3
1005329a:	46bd      	mov	sp, r7
1005329c:	b002      	add	sp, #8
1005329e:	bd80      	pop	{r7, pc}
100532a0:	200000dc 	.word	0x200000dc

100532a4 <LL_RADIO_SetNextPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
100532a4:	b580      	push	{r7, lr}
100532a6:	b082      	sub	sp, #8
100532a8:	af00      	add	r7, sp, #0
100532aa:	6078      	str	r0, [r7, #4]
100532ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD0, TXRXPACK_WORD0_NEXTPTR, value);
100532ae:	687b      	ldr	r3, [r7, #4]
100532b0:	681b      	ldr	r3, [r3, #0]
100532b2:	687b      	ldr	r3, [r7, #4]
100532b4:	683a      	ldr	r2, [r7, #0]
100532b6:	601a      	str	r2, [r3, #0]
}
100532b8:	46c0      	nop			@ (mov r8, r8)
100532ba:	46bd      	mov	sp, r7
100532bc:	b002      	add	sp, #8
100532be:	bd80      	pop	{r7, pc}

100532c0 <LL_RADIO_SetCalibrationRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCalibrationRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
100532c0:	b580      	push	{r7, lr}
100532c2:	b082      	sub	sp, #8
100532c4:	af00      	add	r7, sp, #0
100532c6:	6078      	str	r0, [r7, #4]
100532c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CALREQ, value);
100532ca:	687b      	ldr	r3, [r7, #4]
100532cc:	685b      	ldr	r3, [r3, #4]
100532ce:	2201      	movs	r2, #1
100532d0:	4393      	bics	r3, r2
100532d2:	001a      	movs	r2, r3
100532d4:	683b      	ldr	r3, [r7, #0]
100532d6:	2101      	movs	r1, #1
100532d8:	400b      	ands	r3, r1
100532da:	431a      	orrs	r2, r3
100532dc:	687b      	ldr	r3, [r7, #4]
100532de:	605a      	str	r2, [r3, #4]
}
100532e0:	46c0      	nop			@ (mov r8, r8)
100532e2:	46bd      	mov	sp, r7
100532e4:	b002      	add	sp, #8
100532e6:	bd80      	pop	{r7, pc}

100532e8 <LL_RADIO_SetKeepSemaRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetKeepSemaRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
100532e8:	b580      	push	{r7, lr}
100532ea:	b082      	sub	sp, #8
100532ec:	af00      	add	r7, sp, #0
100532ee:	6078      	str	r0, [r7, #4]
100532f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_KEEPSEMAREQ, value);
100532f2:	687b      	ldr	r3, [r7, #4]
100532f4:	685b      	ldr	r3, [r3, #4]
100532f6:	2204      	movs	r2, #4
100532f8:	4393      	bics	r3, r2
100532fa:	001a      	movs	r2, r3
100532fc:	683b      	ldr	r3, [r7, #0]
100532fe:	009b      	lsls	r3, r3, #2
10053300:	2104      	movs	r1, #4
10053302:	400b      	ands	r3, r1
10053304:	431a      	orrs	r2, r3
10053306:	687b      	ldr	r3, [r7, #4]
10053308:	605a      	str	r2, [r3, #4]
}
1005330a:	46c0      	nop			@ (mov r8, r8)
1005330c:	46bd      	mov	sp, r7
1005330e:	b002      	add	sp, #8
10053310:	bd80      	pop	{r7, pc}

10053312 <LL_RADIO_SetCTEAndSamplingEnable>:
  * @rmtoll WORD1          CTEANDSAMPLINGENABLE        LL_RADIO_SetCTEAndSamplingEnable
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCTEAndSamplingEnable(TXRXPACK_TypeDef *p, uint32_t value)
{
10053312:	b580      	push	{r7, lr}
10053314:	b082      	sub	sp, #8
10053316:	af00      	add	r7, sp, #0
10053318:	6078      	str	r0, [r7, #4]
1005331a:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CTEANDSAMPLINGENABLE, value);
1005331c:	687b      	ldr	r3, [r7, #4]
1005331e:	685b      	ldr	r3, [r3, #4]
10053320:	2208      	movs	r2, #8
10053322:	4393      	bics	r3, r2
10053324:	001a      	movs	r2, r3
10053326:	683b      	ldr	r3, [r7, #0]
10053328:	00db      	lsls	r3, r3, #3
1005332a:	2108      	movs	r1, #8
1005332c:	400b      	ands	r3, r1
1005332e:	431a      	orrs	r2, r3
10053330:	687b      	ldr	r3, [r7, #4]
10053332:	605a      	str	r2, [r3, #4]
}
10053334:	46c0      	nop			@ (mov r8, r8)
10053336:	46bd      	mov	sp, r7
10053338:	b002      	add	sp, #8
1005333a:	bd80      	pop	{r7, pc}

1005333c <LL_RADIO_SetCRCInitializationSelector>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationSelector(TXRXPACK_TypeDef *p, uint32_t value)
{
1005333c:	b580      	push	{r7, lr}
1005333e:	b082      	sub	sp, #8
10053340:	af00      	add	r7, sp, #0
10053342:	6078      	str	r0, [r7, #4]
10053344:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CRCINITSEL, value);
10053346:	687b      	ldr	r3, [r7, #4]
10053348:	685b      	ldr	r3, [r3, #4]
1005334a:	2210      	movs	r2, #16
1005334c:	4393      	bics	r3, r2
1005334e:	001a      	movs	r2, r3
10053350:	683b      	ldr	r3, [r7, #0]
10053352:	011b      	lsls	r3, r3, #4
10053354:	2110      	movs	r1, #16
10053356:	400b      	ands	r3, r1
10053358:	431a      	orrs	r2, r3
1005335a:	687b      	ldr	r3, [r7, #4]
1005335c:	605a      	str	r2, [r3, #4]
}
1005335e:	46c0      	nop			@ (mov r8, r8)
10053360:	46bd      	mov	sp, r7
10053362:	b002      	add	sp, #8
10053364:	bd80      	pop	{r7, pc}

10053366 <LL_RADIO_SetAdvertise>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAdvertise(TXRXPACK_TypeDef *p, uint32_t value)
{
10053366:	b580      	push	{r7, lr}
10053368:	b082      	sub	sp, #8
1005336a:	af00      	add	r7, sp, #0
1005336c:	6078      	str	r0, [r7, #4]
1005336e:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ADVERTISE, value);
10053370:	687b      	ldr	r3, [r7, #4]
10053372:	685b      	ldr	r3, [r3, #4]
10053374:	2220      	movs	r2, #32
10053376:	4393      	bics	r3, r2
10053378:	001a      	movs	r2, r3
1005337a:	683b      	ldr	r3, [r7, #0]
1005337c:	015b      	lsls	r3, r3, #5
1005337e:	2120      	movs	r1, #32
10053380:	400b      	ands	r3, r1
10053382:	431a      	orrs	r2, r3
10053384:	687b      	ldr	r3, [r7, #4]
10053386:	605a      	str	r2, [r3, #4]
}
10053388:	46c0      	nop			@ (mov r8, r8)
1005338a:	46bd      	mov	sp, r7
1005338c:	b002      	add	sp, #8
1005338e:	bd80      	pop	{r7, pc}

10053390 <LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable>:
  * @rmtoll WORD1          SN_EN            LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable(TXRXPACK_TypeDef *p)
{
10053390:	b580      	push	{r7, lr}
10053392:	b082      	sub	sp, #8
10053394:	af00      	add	r7, sp, #0
10053396:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_SN_EN);
10053398:	687b      	ldr	r3, [r7, #4]
1005339a:	685b      	ldr	r3, [r3, #4]
1005339c:	2240      	movs	r2, #64	@ 0x40
1005339e:	431a      	orrs	r2, r3
100533a0:	687b      	ldr	r3, [r7, #4]
100533a2:	605a      	str	r2, [r3, #4]
}
100533a4:	46c0      	nop			@ (mov r8, r8)
100533a6:	46bd      	mov	sp, r7
100533a8:	b002      	add	sp, #8
100533aa:	bd80      	pop	{r7, pc}

100533ac <LL_RADIO_IncrementerChannel_Enable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Enable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Enable(TXRXPACK_TypeDef *p)
{
100533ac:	b580      	push	{r7, lr}
100533ae:	b082      	sub	sp, #8
100533b0:	af00      	add	r7, sp, #0
100533b2:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
100533b4:	687b      	ldr	r3, [r7, #4]
100533b6:	685b      	ldr	r3, [r3, #4]
100533b8:	2280      	movs	r2, #128	@ 0x80
100533ba:	431a      	orrs	r2, r3
100533bc:	687b      	ldr	r3, [r7, #4]
100533be:	605a      	str	r2, [r3, #4]
}
100533c0:	46c0      	nop			@ (mov r8, r8)
100533c2:	46bd      	mov	sp, r7
100533c4:	b002      	add	sp, #8
100533c6:	bd80      	pop	{r7, pc}

100533c8 <LL_RADIO_IncrementerChannel_Disable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Disable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Disable(TXRXPACK_TypeDef *p)
{
100533c8:	b580      	push	{r7, lr}
100533ca:	b082      	sub	sp, #8
100533cc:	af00      	add	r7, sp, #0
100533ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
100533d0:	687b      	ldr	r3, [r7, #4]
100533d2:	685b      	ldr	r3, [r3, #4]
100533d4:	2280      	movs	r2, #128	@ 0x80
100533d6:	4393      	bics	r3, r2
100533d8:	001a      	movs	r2, r3
100533da:	687b      	ldr	r3, [r7, #4]
100533dc:	605a      	str	r2, [r3, #4]
}
100533de:	46c0      	nop			@ (mov r8, r8)
100533e0:	46bd      	mov	sp, r7
100533e2:	b002      	add	sp, #8
100533e4:	bd80      	pop	{r7, pc}
	...

100533e8 <LL_RADIO_SetNextTxMode>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextTxMode(TXRXPACK_TypeDef *p, uint32_t value)
{
100533e8:	b580      	push	{r7, lr}
100533ea:	b082      	sub	sp, #8
100533ec:	af00      	add	r7, sp, #0
100533ee:	6078      	str	r0, [r7, #4]
100533f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_NEXTTXMODE, value);
100533f2:	687b      	ldr	r3, [r7, #4]
100533f4:	685b      	ldr	r3, [r3, #4]
100533f6:	4a07      	ldr	r2, [pc, #28]	@ (10053414 <LL_RADIO_SetNextTxMode+0x2c>)
100533f8:	401a      	ands	r2, r3
100533fa:	683b      	ldr	r3, [r7, #0]
100533fc:	0219      	lsls	r1, r3, #8
100533fe:	2380      	movs	r3, #128	@ 0x80
10053400:	005b      	lsls	r3, r3, #1
10053402:	400b      	ands	r3, r1
10053404:	431a      	orrs	r2, r3
10053406:	687b      	ldr	r3, [r7, #4]
10053408:	605a      	str	r2, [r3, #4]
}
1005340a:	46c0      	nop			@ (mov r8, r8)
1005340c:	46bd      	mov	sp, r7
1005340e:	b002      	add	sp, #8
10053410:	bd80      	pop	{r7, pc}
10053412:	46c0      	nop			@ (mov r8, r8)
10053414:	fffffeff 	.word	0xfffffeff

10053418 <LL_RADIO_SetAllTableDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAllTableDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
10053418:	b580      	push	{r7, lr}
1005341a:	b082      	sub	sp, #8
1005341c:	af00      	add	r7, sp, #0
1005341e:	6078      	str	r0, [r7, #4]
10053420:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ALLTABLEREADY, value);
10053422:	687b      	ldr	r3, [r7, #4]
10053424:	685b      	ldr	r3, [r3, #4]
10053426:	4a07      	ldr	r2, [pc, #28]	@ (10053444 <LL_RADIO_SetAllTableDataReady+0x2c>)
10053428:	401a      	ands	r2, r3
1005342a:	683b      	ldr	r3, [r7, #0]
1005342c:	0259      	lsls	r1, r3, #9
1005342e:	2380      	movs	r3, #128	@ 0x80
10053430:	009b      	lsls	r3, r3, #2
10053432:	400b      	ands	r3, r1
10053434:	431a      	orrs	r2, r3
10053436:	687b      	ldr	r3, [r7, #4]
10053438:	605a      	str	r2, [r3, #4]
}
1005343a:	46c0      	nop			@ (mov r8, r8)
1005343c:	46bd      	mov	sp, r7
1005343e:	b002      	add	sp, #8
10053440:	bd80      	pop	{r7, pc}
10053442:	46c0      	nop			@ (mov r8, r8)
10053444:	fffffdff 	.word	0xfffffdff

10053448 <LL_RADIO_SetTransmissionDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
10053448:	b580      	push	{r7, lr}
1005344a:	b082      	sub	sp, #8
1005344c:	af00      	add	r7, sp, #0
1005344e:	6078      	str	r0, [r7, #4]
10053450:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_TXDATAREADY, value);
10053452:	687b      	ldr	r3, [r7, #4]
10053454:	685b      	ldr	r3, [r3, #4]
10053456:	4a07      	ldr	r2, [pc, #28]	@ (10053474 <LL_RADIO_SetTransmissionDataReady+0x2c>)
10053458:	401a      	ands	r2, r3
1005345a:	683b      	ldr	r3, [r7, #0]
1005345c:	0299      	lsls	r1, r3, #10
1005345e:	2380      	movs	r3, #128	@ 0x80
10053460:	00db      	lsls	r3, r3, #3
10053462:	400b      	ands	r3, r1
10053464:	431a      	orrs	r2, r3
10053466:	687b      	ldr	r3, [r7, #4]
10053468:	605a      	str	r2, [r3, #4]
}
1005346a:	46c0      	nop			@ (mov r8, r8)
1005346c:	46bd      	mov	sp, r7
1005346e:	b002      	add	sp, #8
10053470:	bd80      	pop	{r7, pc}
10053472:	46c0      	nop			@ (mov r8, r8)
10053474:	fffffbff 	.word	0xfffffbff

10053478 <LL_RADIO_SetDataPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetDataPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
10053478:	b580      	push	{r7, lr}
1005347a:	b082      	sub	sp, #8
1005347c:	af00      	add	r7, sp, #0
1005347e:	6078      	str	r0, [r7, #4]
10053480:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR, value);
10053482:	687b      	ldr	r3, [r7, #4]
10053484:	689b      	ldr	r3, [r3, #8]
10053486:	687b      	ldr	r3, [r7, #4]
10053488:	683a      	ldr	r2, [r7, #0]
1005348a:	609a      	str	r2, [r3, #8]
}
1005348c:	46c0      	nop			@ (mov r8, r8)
1005348e:	46bd      	mov	sp, r7
10053490:	b002      	add	sp, #8
10053492:	bd80      	pop	{r7, pc}

10053494 <LL_RADIO_GetDataPointer>:
  * @rmtoll WORD2          DATAPTR       LL_RADIO_GetDataPointer
  * @param  p RADIO Instance
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetDataPointer(TXRXPACK_TypeDef *p)
{
10053494:	b580      	push	{r7, lr}
10053496:	b082      	sub	sp, #8
10053498:	af00      	add	r7, sp, #0
1005349a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR) >> TXRXPACK_WORD2_DATAPTR_Pos);
1005349c:	687b      	ldr	r3, [r7, #4]
1005349e:	689b      	ldr	r3, [r3, #8]
}
100534a0:	0018      	movs	r0, r3
100534a2:	46bd      	mov	sp, r7
100534a4:	b002      	add	sp, #8
100534a6:	bd80      	pop	{r7, pc}

100534a8 <LL_RADIO_SetTimer2Triggering>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer2Triggering(TXRXPACK_TypeDef *p, uint32_t value)
{
100534a8:	b580      	push	{r7, lr}
100534aa:	b082      	sub	sp, #8
100534ac:	af00      	add	r7, sp, #0
100534ae:	6078      	str	r0, [r7, #4]
100534b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2, value);
100534b2:	687b      	ldr	r3, [r7, #4]
100534b4:	68db      	ldr	r3, [r3, #12]
100534b6:	0d1b      	lsrs	r3, r3, #20
100534b8:	051a      	lsls	r2, r3, #20
100534ba:	683b      	ldr	r3, [r7, #0]
100534bc:	031b      	lsls	r3, r3, #12
100534be:	0b1b      	lsrs	r3, r3, #12
100534c0:	431a      	orrs	r2, r3
100534c2:	687b      	ldr	r3, [r7, #4]
100534c4:	60da      	str	r2, [r3, #12]
}
100534c6:	46c0      	nop			@ (mov r8, r8)
100534c8:	46bd      	mov	sp, r7
100534ca:	b002      	add	sp, #8
100534cc:	bd80      	pop	{r7, pc}

100534ce <LL_RADIO_Timer2_Enable>:
  * @rmtoll WORD3          TIMER2EN            LL_RADIO_Timer2_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Timer2_Enable(TXRXPACK_TypeDef *p)
{
100534ce:	b580      	push	{r7, lr}
100534d0:	b082      	sub	sp, #8
100534d2:	af00      	add	r7, sp, #0
100534d4:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2EN);
100534d6:	687b      	ldr	r3, [r7, #4]
100534d8:	68db      	ldr	r3, [r3, #12]
100534da:	2280      	movs	r2, #128	@ 0x80
100534dc:	0352      	lsls	r2, r2, #13
100534de:	431a      	orrs	r2, r3
100534e0:	687b      	ldr	r3, [r7, #4]
100534e2:	60da      	str	r2, [r3, #12]
}
100534e4:	46c0      	nop			@ (mov r8, r8)
100534e6:	46bd      	mov	sp, r7
100534e8:	b002      	add	sp, #8
100534ea:	bd80      	pop	{r7, pc}

100534ec <LL_RADIO_SetTrigRcv>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigRcv(TXRXPACK_TypeDef *p, uint32_t value)
{
100534ec:	b580      	push	{r7, lr}
100534ee:	b082      	sub	sp, #8
100534f0:	af00      	add	r7, sp, #0
100534f2:	6078      	str	r0, [r7, #4]
100534f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGRCV, value);
100534f6:	687b      	ldr	r3, [r7, #4]
100534f8:	68db      	ldr	r3, [r3, #12]
100534fa:	4a07      	ldr	r2, [pc, #28]	@ (10053518 <LL_RADIO_SetTrigRcv+0x2c>)
100534fc:	401a      	ands	r2, r3
100534fe:	683b      	ldr	r3, [r7, #0]
10053500:	0599      	lsls	r1, r3, #22
10053502:	2380      	movs	r3, #128	@ 0x80
10053504:	03db      	lsls	r3, r3, #15
10053506:	400b      	ands	r3, r1
10053508:	431a      	orrs	r2, r3
1005350a:	687b      	ldr	r3, [r7, #4]
1005350c:	60da      	str	r2, [r3, #12]
}
1005350e:	46c0      	nop			@ (mov r8, r8)
10053510:	46bd      	mov	sp, r7
10053512:	b002      	add	sp, #8
10053514:	bd80      	pop	{r7, pc}
10053516:	46c0      	nop			@ (mov r8, r8)
10053518:	ffbfffff 	.word	0xffbfffff

1005351c <LL_RADIO_SetTrigDone>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigDone(TXRXPACK_TypeDef *p, uint32_t value)
{
1005351c:	b580      	push	{r7, lr}
1005351e:	b082      	sub	sp, #8
10053520:	af00      	add	r7, sp, #0
10053522:	6078      	str	r0, [r7, #4]
10053524:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGDONE, value);
10053526:	687b      	ldr	r3, [r7, #4]
10053528:	68db      	ldr	r3, [r3, #12]
1005352a:	4a07      	ldr	r2, [pc, #28]	@ (10053548 <LL_RADIO_SetTrigDone+0x2c>)
1005352c:	401a      	ands	r2, r3
1005352e:	683b      	ldr	r3, [r7, #0]
10053530:	05d9      	lsls	r1, r3, #23
10053532:	2380      	movs	r3, #128	@ 0x80
10053534:	041b      	lsls	r3, r3, #16
10053536:	400b      	ands	r3, r1
10053538:	431a      	orrs	r2, r3
1005353a:	687b      	ldr	r3, [r7, #4]
1005353c:	60da      	str	r2, [r3, #12]
}
1005353e:	46c0      	nop			@ (mov r8, r8)
10053540:	46bd      	mov	sp, r7
10053542:	b002      	add	sp, #8
10053544:	bd80      	pop	{r7, pc}
10053546:	46c0      	nop			@ (mov r8, r8)
10053548:	ff7fffff 	.word	0xff7fffff

1005354c <LL_RADIO_SetIntTxOk>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetIntTxOk(TXRXPACK_TypeDef *p, uint32_t value)
{
1005354c:	b580      	push	{r7, lr}
1005354e:	b082      	sub	sp, #8
10053550:	af00      	add	r7, sp, #0
10053552:	6078      	str	r0, [r7, #4]
10053554:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTTXOK, value);
10053556:	687b      	ldr	r3, [r7, #4]
10053558:	68db      	ldr	r3, [r3, #12]
1005355a:	4a07      	ldr	r2, [pc, #28]	@ (10053578 <LL_RADIO_SetIntTxOk+0x2c>)
1005355c:	401a      	ands	r2, r3
1005355e:	683b      	ldr	r3, [r7, #0]
10053560:	0619      	lsls	r1, r3, #24
10053562:	2380      	movs	r3, #128	@ 0x80
10053564:	045b      	lsls	r3, r3, #17
10053566:	400b      	ands	r3, r1
10053568:	431a      	orrs	r2, r3
1005356a:	687b      	ldr	r3, [r7, #4]
1005356c:	60da      	str	r2, [r3, #12]
}
1005356e:	46c0      	nop			@ (mov r8, r8)
10053570:	46bd      	mov	sp, r7
10053572:	b002      	add	sp, #8
10053574:	bd80      	pop	{r7, pc}
10053576:	46c0      	nop			@ (mov r8, r8)
10053578:	feffffff 	.word	0xfeffffff

1005357c <LL_RADIO_IntDone_Enable>:
  * @rmtoll WORD3          INTDONE            LL_RADIO_IntDone_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntDone_Enable(TXRXPACK_TypeDef *p)
{
1005357c:	b580      	push	{r7, lr}
1005357e:	b082      	sub	sp, #8
10053580:	af00      	add	r7, sp, #0
10053582:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTDONE);
10053584:	687b      	ldr	r3, [r7, #4]
10053586:	68db      	ldr	r3, [r3, #12]
10053588:	2280      	movs	r2, #128	@ 0x80
1005358a:	0492      	lsls	r2, r2, #18
1005358c:	431a      	orrs	r2, r3
1005358e:	687b      	ldr	r3, [r7, #4]
10053590:	60da      	str	r2, [r3, #12]
}
10053592:	46c0      	nop			@ (mov r8, r8)
10053594:	46bd      	mov	sp, r7
10053596:	b002      	add	sp, #8
10053598:	bd80      	pop	{r7, pc}

1005359a <LL_RADIO_IntRcvTimeout_Enable>:
  * @rmtoll WORD3          INTRCVTIMEOUT            LL_RADIO_IntRcvTimeout_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvTimeout_Enable(TXRXPACK_TypeDef *p)
{
1005359a:	b580      	push	{r7, lr}
1005359c:	b082      	sub	sp, #8
1005359e:	af00      	add	r7, sp, #0
100535a0:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVTIMEOUT);
100535a2:	687b      	ldr	r3, [r7, #4]
100535a4:	68db      	ldr	r3, [r3, #12]
100535a6:	2280      	movs	r2, #128	@ 0x80
100535a8:	04d2      	lsls	r2, r2, #19
100535aa:	431a      	orrs	r2, r3
100535ac:	687b      	ldr	r3, [r7, #4]
100535ae:	60da      	str	r2, [r3, #12]
}
100535b0:	46c0      	nop			@ (mov r8, r8)
100535b2:	46bd      	mov	sp, r7
100535b4:	b002      	add	sp, #8
100535b6:	bd80      	pop	{r7, pc}

100535b8 <LL_RADIO_IntRcvCRCErr_Enable>:
  * @rmtoll WORD3          INTRCVCRCERR            LL_RADIO_IntRcvCRCErr_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvCRCErr_Enable(TXRXPACK_TypeDef *p)
{
100535b8:	b580      	push	{r7, lr}
100535ba:	b082      	sub	sp, #8
100535bc:	af00      	add	r7, sp, #0
100535be:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVCRCERR);
100535c0:	687b      	ldr	r3, [r7, #4]
100535c2:	68db      	ldr	r3, [r3, #12]
100535c4:	2280      	movs	r2, #128	@ 0x80
100535c6:	05d2      	lsls	r2, r2, #23
100535c8:	431a      	orrs	r2, r3
100535ca:	687b      	ldr	r3, [r7, #4]
100535cc:	60da      	str	r2, [r3, #12]
}
100535ce:	46c0      	nop			@ (mov r8, r8)
100535d0:	46bd      	mov	sp, r7
100535d2:	b002      	add	sp, #8
100535d4:	bd80      	pop	{r7, pc}

100535d6 <LL_RADIO_IntRcvOk_Enable>:
  * @rmtoll WORD3          INTRCVOK            LL_RADIO_IntRcvOk_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvOk_Enable(TXRXPACK_TypeDef *p)
{
100535d6:	b580      	push	{r7, lr}
100535d8:	b082      	sub	sp, #8
100535da:	af00      	add	r7, sp, #0
100535dc:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVOK);
100535de:	687b      	ldr	r3, [r7, #4]
100535e0:	68db      	ldr	r3, [r3, #12]
100535e2:	2280      	movs	r2, #128	@ 0x80
100535e4:	0612      	lsls	r2, r2, #24
100535e6:	431a      	orrs	r2, r3
100535e8:	687b      	ldr	r3, [r7, #4]
100535ea:	60da      	str	r2, [r3, #12]
}
100535ec:	46c0      	nop			@ (mov r8, r8)
100535ee:	46bd      	mov	sp, r7
100535f0:	b002      	add	sp, #8
100535f2:	bd80      	pop	{r7, pc}

100535f4 <LL_RADIO_BlueSetInterrupt1RegRegister>:
  * @rmtoll INTERRUPT1REG          ALL       LL_RADIO_BlueSetInterrupt1RegRegister
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetInterrupt1RegRegister(uint32_t value)
{
100535f4:	b580      	push	{r7, lr}
100535f6:	b082      	sub	sp, #8
100535f8:	af00      	add	r7, sp, #0
100535fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->INTERRUPT1REG, BLUE_INTERRUPT1REG_ALL, value);
100535fc:	23c0      	movs	r3, #192	@ 0xc0
100535fe:	05db      	lsls	r3, r3, #23
10053600:	685b      	ldr	r3, [r3, #4]
10053602:	4a07      	ldr	r2, [pc, #28]	@ (10053620 <LL_RADIO_BlueSetInterrupt1RegRegister+0x2c>)
10053604:	4013      	ands	r3, r2
10053606:	0019      	movs	r1, r3
10053608:	687b      	ldr	r3, [r7, #4]
1005360a:	4a06      	ldr	r2, [pc, #24]	@ (10053624 <LL_RADIO_BlueSetInterrupt1RegRegister+0x30>)
1005360c:	401a      	ands	r2, r3
1005360e:	23c0      	movs	r3, #192	@ 0xc0
10053610:	05db      	lsls	r3, r3, #23
10053612:	430a      	orrs	r2, r1
10053614:	605a      	str	r2, [r3, #4]
}
10053616:	46c0      	nop			@ (mov r8, r8)
10053618:	46bd      	mov	sp, r7
1005361a:	b002      	add	sp, #8
1005361c:	bd80      	pop	{r7, pc}
1005361e:	46c0      	nop			@ (mov r8, r8)
10053620:	0002004f 	.word	0x0002004f
10053624:	fffdffb0 	.word	0xfffdffb0

10053628 <LL_RADIO_BlueSetClearSemaphoreRequest>:
  * @rmtoll CMDREG          CLEARSEMAREQ       LL_RADIO_BlueSetClearSemaphoreRequest
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetClearSemaphoreRequest(uint32_t value)
{
10053628:	b580      	push	{r7, lr}
1005362a:	b082      	sub	sp, #8
1005362c:	af00      	add	r7, sp, #0
1005362e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->CMDREG, BLUE_CMDREG_CLEARSEMAREQ, value);
10053630:	23c0      	movs	r3, #192	@ 0xc0
10053632:	05db      	lsls	r3, r3, #23
10053634:	699b      	ldr	r3, [r3, #24]
10053636:	2208      	movs	r2, #8
10053638:	4393      	bics	r3, r2
1005363a:	0019      	movs	r1, r3
1005363c:	687b      	ldr	r3, [r7, #4]
1005363e:	00db      	lsls	r3, r3, #3
10053640:	2208      	movs	r2, #8
10053642:	401a      	ands	r2, r3
10053644:	23c0      	movs	r3, #192	@ 0xc0
10053646:	05db      	lsls	r3, r3, #23
10053648:	430a      	orrs	r2, r1
1005364a:	619a      	str	r2, [r3, #24]
}
1005364c:	46c0      	nop			@ (mov r8, r8)
1005364e:	46bd      	mov	sp, r7
10053650:	b002      	add	sp, #8
10053652:	bd80      	pop	{r7, pc}

10053654 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>:
 */
/* Calculate the Timeout to be programmed on Timer2 to obtain a give T_IFS
 * when the next packet is a transmit one
*/
uint32_t BLEPLAT_CNTR_GetTimer2TimeoutForIfs(uint32_t T_Ifs, BLEPLAT_CNTR_Transaction Transaction, uint8_t Cal_Enabled)
{
10053654:	b580      	push	{r7, lr}
10053656:	b088      	sub	sp, #32
10053658:	af00      	add	r7, sp, #0
1005365a:	6078      	str	r0, [r7, #4]
1005365c:	0008      	movs	r0, r1
1005365e:	0011      	movs	r1, r2
10053660:	1cfb      	adds	r3, r7, #3
10053662:	1c02      	adds	r2, r0, #0
10053664:	701a      	strb	r2, [r3, #0]
10053666:	1cbb      	adds	r3, r7, #2
10053668:	1c0a      	adds	r2, r1, #0
1005366a:	701a      	strb	r2, [r3, #0]
    uint32_t Timeout = T_Ifs;
1005366c:	687b      	ldr	r3, [r7, #4]
1005366e:	617b      	str	r3, [r7, #20]
    uint32_t Tx_Delay_Comp;
    uint32_t Init_Delay;

    if(Transaction == BLEPLAT_CNTR_RxTx)
10053670:	1cfb      	adds	r3, r7, #3
10053672:	781b      	ldrb	r3, [r3, #0]
10053674:	2b01      	cmp	r3, #1
10053676:	d105      	bne.n	10053684 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x30>
        /* The correction values below have been determined by sniffer
         * T_IFS measurements in connection, initiating and active
         * scanning
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
10053678:	2304      	movs	r3, #4
1005367a:	60bb      	str	r3, [r7, #8]
#else
        const int32_t Adjust_Value = 6;
#endif
        Tx_Delay_Comp = (TX_DELAY_START>>3) + Adjust_Value;
1005367c:	68bb      	ldr	r3, [r7, #8]
1005367e:	3302      	adds	r3, #2
10053680:	61fb      	str	r3, [r7, #28]
10053682:	e015      	b.n	100536b0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxRx)
10053684:	1cfb      	adds	r3, r7, #3
10053686:	781b      	ldrb	r3, [r3, #0]
10053688:	2b00      	cmp	r3, #0
1005368a:	d105      	bne.n	10053698 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x44>
         * values used in prrevious versions of the stack.
         * They could be optimized after careful analysis of timing margins and
         * AGC behavior.
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
1005368c:	2304      	movs	r3, #4
1005368e:	60fb      	str	r3, [r7, #12]
#else
        const int32_t Adjust_Value = 4;
#endif
        Tx_Delay_Comp = (TX_DELAY_END>>3) + Adjust_Value;
10053690:	68fb      	ldr	r3, [r7, #12]
10053692:	3302      	adds	r3, #2
10053694:	61fb      	str	r3, [r7, #28]
10053696:	e00b      	b.n	100536b0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxTx)
10053698:	1cfb      	adds	r3, r7, #3
1005369a:	781b      	ldrb	r3, [r3, #0]
1005369c:	2b02      	cmp	r3, #2
1005369e:	d105      	bne.n	100536ac <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x58>
    {
        /* The correction values below have been determined by sniffer
         * T_IFS measurements in extended advertising (AUX_CHAIN_IND)
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 1;
100536a0:	2301      	movs	r3, #1
100536a2:	613b      	str	r3, [r7, #16]
#else
        const int32_t Adjust_Value = 2;
#endif
        Tx_Delay_Comp = ((TX_DELAY_START + TX_DELAY_END)>>3) + Adjust_Value;
100536a4:	693b      	ldr	r3, [r7, #16]
100536a6:	3304      	adds	r3, #4
100536a8:	61fb      	str	r3, [r7, #28]
100536aa:	e001      	b.n	100536b0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else
    {
        Tx_Delay_Comp = 0;
100536ac:	2300      	movs	r3, #0
100536ae:	61fb      	str	r3, [r7, #28]
    }

    if((Transaction == BLEPLAT_CNTR_RxTx) || (Transaction == BLEPLAT_CNTR_TxTx))
100536b0:	1cfb      	adds	r3, r7, #3
100536b2:	781b      	ldrb	r3, [r3, #0]
100536b4:	2b01      	cmp	r3, #1
100536b6:	d003      	beq.n	100536c0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x6c>
100536b8:	1cfb      	adds	r3, r7, #3
100536ba:	781b      	ldrb	r3, [r3, #0]
100536bc:	2b02      	cmp	r3, #2
100536be:	d109      	bne.n	100536d4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x80>
    {
        if(Cal_Enabled == TRUE)
100536c0:	1cbb      	adds	r3, r7, #2
100536c2:	781b      	ldrb	r3, [r3, #0]
100536c4:	2b01      	cmp	r3, #1
100536c6:	d102      	bne.n	100536ce <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x7a>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_TX_DELAY_CAL;
100536c8:	239b      	movs	r3, #155	@ 0x9b
100536ca:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
100536cc:	e013      	b.n	100536f6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_TX_DELAY_NO_CAL;
100536ce:	233d      	movs	r3, #61	@ 0x3d
100536d0:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
100536d2:	e010      	b.n	100536f6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
    }
    else if((Transaction == BLEPLAT_CNTR_TxRx) || (Transaction == BLEPLAT_CNTR_RxRx))
100536d4:	1cfb      	adds	r3, r7, #3
100536d6:	781b      	ldrb	r3, [r3, #0]
100536d8:	2b00      	cmp	r3, #0
100536da:	d003      	beq.n	100536e4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x90>
100536dc:	1cfb      	adds	r3, r7, #3
100536de:	781b      	ldrb	r3, [r3, #0]
100536e0:	2b03      	cmp	r3, #3
100536e2:	d108      	bne.n	100536f6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
         * The current calculation of Timer2 for TX-RX events is slightly conservative
         * since it soes not consider the delay from digital modulator to antenna and from
         * antenna to digital demodulator. As a consequence the demodulator is turned on
         * a few microseconds earlier than stricty needed.
         */
        if(Cal_Enabled == TRUE)
100536e4:	1cbb      	adds	r3, r7, #2
100536e6:	781b      	ldrb	r3, [r3, #0]
100536e8:	2b01      	cmp	r3, #1
100536ea:	d102      	bne.n	100536f2 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x9e>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_RX_DELAY_CAL;
100536ec:	2399      	movs	r3, #153	@ 0x99
100536ee:	61bb      	str	r3, [r7, #24]
100536f0:	e001      	b.n	100536f6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_RX_DELAY_NO_CAL;
100536f2:	233b      	movs	r3, #59	@ 0x3b
100536f4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
    }

    Timeout -= (Init_Delay + Tx_Delay_Comp);
100536f6:	69ba      	ldr	r2, [r7, #24]
100536f8:	69fb      	ldr	r3, [r7, #28]
100536fa:	18d3      	adds	r3, r2, r3
100536fc:	697a      	ldr	r2, [r7, #20]
100536fe:	1ad3      	subs	r3, r2, r3
10053700:	617b      	str	r3, [r7, #20]

    return Timeout;
10053702:	697b      	ldr	r3, [r7, #20]
}
10053704:	0018      	movs	r0, r3
10053706:	46bd      	mov	sp, r7
10053708:	b008      	add	sp, #32
1005370a:	bd80      	pop	{r7, pc}

1005370c <BLEPLAT_CNTR_ClearInterrupt>:

void BLEPLAT_CNTR_ClearInterrupt(uint32_t x)
{
1005370c:	b580      	push	{r7, lr}
1005370e:	b082      	sub	sp, #8
10053710:	af00      	add	r7, sp, #0
10053712:	6078      	str	r0, [r7, #4]
    LL_RADIO_BlueSetInterrupt1RegRegister(x);
10053714:	687b      	ldr	r3, [r7, #4]
10053716:	0018      	movs	r0, r3
10053718:	f7ff ff6c 	bl	100535f4 <LL_RADIO_BlueSetInterrupt1RegRegister>
}
1005371c:	46c0      	nop			@ (mov r8, r8)
1005371e:	46bd      	mov	sp, r7
10053720:	b002      	add	sp, #8
10053722:	bd80      	pop	{r7, pc}

10053724 <BLEPLAT_CNTR_ClearSemareq>:

void BLEPLAT_CNTR_ClearSemareq(void)
{
10053724:	b580      	push	{r7, lr}
10053726:	af00      	add	r7, sp, #0
    LL_RADIO_BlueSetClearSemaphoreRequest(0x1U);
10053728:	2001      	movs	r0, #1
1005372a:	f7ff ff7d 	bl	10053628 <LL_RADIO_BlueSetClearSemaphoreRequest>
}
1005372e:	46c0      	nop			@ (mov r8, r8)
10053730:	46bd      	mov	sp, r7
10053732:	bd80      	pop	{r7, pc}

10053734 <BLEPLAT_CNTR_GlobDisableBlue>:
{
    return LL_RADIO_BlueGetTimerCapture();
}

void BLEPLAT_CNTR_GlobDisableBlue()
{
10053734:	b580      	push	{r7, lr}
10053736:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalDisableBlue();
10053738:	f7ff f8dc 	bl	100528f4 <LL_RADIO_GlobalDisableBlue>
}
1005373c:	46c0      	nop			@ (mov r8, r8)
1005373e:	46bd      	mov	sp, r7
10053740:	bd80      	pop	{r7, pc}

10053742 <BLEPLAT_CNTR_GlobEnableBlue>:

void BLEPLAT_CNTR_GlobEnableBlue()
{
10053742:	b580      	push	{r7, lr}
10053744:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalEnableBlue();
10053746:	f7ff f8c7 	bl	100528d8 <LL_RADIO_GlobalEnableBlue>
}
1005374a:	46c0      	nop			@ (mov r8, r8)
1005374c:	46bd      	mov	sp, r7
1005374e:	bd80      	pop	{r7, pc}

10053750 <BLEPLAT_CNTR_GlobWriteSlot>:
{
    LL_RADIO_SetReceivedNoCalDelayChk((uint32_t) x);
}

void BLEPLAT_CNTR_GlobWriteSlot(uint8_t slotNo)
{
10053750:	b580      	push	{r7, lr}
10053752:	b082      	sub	sp, #8
10053754:	af00      	add	r7, sp, #0
10053756:	0002      	movs	r2, r0
10053758:	1dfb      	adds	r3, r7, #7
1005375a:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetCurrentConnectionMachineNumber((uint32_t) slotNo);
1005375c:	1dfb      	adds	r3, r7, #7
1005375e:	781b      	ldrb	r3, [r3, #0]
10053760:	0018      	movs	r0, r3
10053762:	f7ff f8a3 	bl	100528ac <LL_RADIO_SetCurrentConnectionMachineNumber>
}
10053766:	46c0      	nop			@ (mov r8, r8)
10053768:	46bd      	mov	sp, r7
1005376a:	b002      	add	sp, #8
1005376c:	bd80      	pop	{r7, pc}
	...

10053770 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>:
{
    LL_RADIO_SetTxDelayEnd((uint32_t) x);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusAnyHwError(uint32_t x)
{
10053770:	b580      	push	{r7, lr}
10053772:	b082      	sub	sp, #8
10053774:	af00      	add	r7, sp, #0
10053776:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & ANY_HW_ERROR_INTERRUPT_Msk);
10053778:	687b      	ldr	r3, [r7, #4]
1005377a:	4a03      	ldr	r2, [pc, #12]	@ (10053788 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError+0x18>)
1005377c:	4013      	ands	r3, r2
}
1005377e:	0018      	movs	r0, r3
10053780:	46bd      	mov	sp, r7
10053782:	b002      	add	sp, #8
10053784:	bd80      	pop	{r7, pc}
10053786:	46c0      	nop			@ (mov r8, r8)
10053788:	00c9df30 	.word	0x00c9df30

1005378c <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>:
{
    return (uint32_t)(x & BLUE_STATUSREG_RXOVERFLOWERROR_Msk);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitAct2Error(uint32_t x)
{
1005378c:	b580      	push	{r7, lr}
1005378e:	b082      	sub	sp, #8
10053790:	af00      	add	r7, sp, #0
10053792:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ACTIVE2ERROR_Msk);
10053794:	687a      	ldr	r2, [r7, #4]
10053796:	2380      	movs	r3, #128	@ 0x80
10053798:	03db      	lsls	r3, r3, #15
1005379a:	4013      	ands	r3, r2
}
1005379c:	0018      	movs	r0, r3
1005379e:	46bd      	mov	sp, r7
100537a0:	b002      	add	sp, #8
100537a2:	bd80      	pop	{r7, pc}

100537a4 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>:

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun(uint32_t x)
{
100537a4:	b580      	push	{r7, lr}
100537a6:	b082      	sub	sp, #8
100537a8:	af00      	add	r7, sp, #0
100537aa:	6078      	str	r0, [r7, #4]
    return 0;
100537ac:	2300      	movs	r3, #0
}
100537ae:	0018      	movs	r0, r3
100537b0:	46bd      	mov	sp, r7
100537b2:	b002      	add	sp, #8
100537b4:	bd80      	pop	{r7, pc}

100537b6 <BLEPLAT_CNTR_IntGetIntStatusCrcErr>:

#if defined(BLUE_STATUSREG_RCVCRCERR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusCrcErr(uint32_t x)
{
100537b6:	b580      	push	{r7, lr}
100537b8:	b082      	sub	sp, #8
100537ba:	af00      	add	r7, sp, #0
100537bc:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVCRCERR_Msk);
100537be:	687a      	ldr	r2, [r7, #4]
100537c0:	2380      	movs	r3, #128	@ 0x80
100537c2:	05db      	lsls	r3, r3, #23
100537c4:	4013      	ands	r3, r2
}
100537c6:	0018      	movs	r0, r3
100537c8:	46bd      	mov	sp, r7
100537ca:	b002      	add	sp, #8
100537cc:	bd80      	pop	{r7, pc}

100537ce <BLEPLAT_CNTR_IntGetIntStatusDone>:
#endif

#if defined(BLUE_STATUSREG_DONE_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusDone(uint32_t x)
{
100537ce:	b580      	push	{r7, lr}
100537d0:	b082      	sub	sp, #8
100537d2:	af00      	add	r7, sp, #0
100537d4:	6078      	str	r0, [r7, #4]
	return (uint32_t)(x & BLUE_STATUSREG_DONE_Msk);
100537d6:	687a      	ldr	r2, [r7, #4]
100537d8:	2380      	movs	r3, #128	@ 0x80
100537da:	049b      	lsls	r3, r3, #18
100537dc:	4013      	ands	r3, r2
}
100537de:	0018      	movs	r0, r3
100537e0:	46bd      	mov	sp, r7
100537e2:	b002      	add	sp, #8
100537e4:	bd80      	pop	{r7, pc}

100537e6 <BLEPLAT_CNTR_IntGetIntStatusEncErr>:
#endif

#if defined(BLUE_STATUSREG_ENCERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusEncErr(uint32_t x)
{
100537e6:	b580      	push	{r7, lr}
100537e8:	b082      	sub	sp, #8
100537ea:	af00      	add	r7, sp, #0
100537ec:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ENCERROR_Msk);
100537ee:	687a      	ldr	r2, [r7, #4]
100537f0:	2380      	movs	r3, #128	@ 0x80
100537f2:	019b      	lsls	r3, r3, #6
100537f4:	4013      	ands	r3, r2
}
100537f6:	0018      	movs	r0, r3
100537f8:	46bd      	mov	sp, r7
100537fa:	b002      	add	sp, #8
100537fc:	bd80      	pop	{r7, pc}

100537fe <BLEPLAT_CNTR_IntGetIntStatusLenErr>:
#endif

#if defined(BLUE_STATUSREG_RCVLENGTHERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusLenErr(uint32_t x)
{
100537fe:	b580      	push	{r7, lr}
10053800:	b082      	sub	sp, #8
10053802:	af00      	add	r7, sp, #0
10053804:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVLENGTHERROR_Msk);
10053806:	687a      	ldr	r2, [r7, #4]
10053808:	2380      	movs	r3, #128	@ 0x80
1005380a:	02db      	lsls	r3, r3, #11
1005380c:	4013      	ands	r3, r2
}
1005380e:	0018      	movs	r0, r3
10053810:	46bd      	mov	sp, r7
10053812:	b002      	add	sp, #8
10053814:	bd80      	pop	{r7, pc}

10053816 <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>:
#endif

#if defined(BLUE_STATUSREG_NOACTIVELERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusNoactiveError(uint32_t x)
{
10053816:	b580      	push	{r7, lr}
10053818:	b082      	sub	sp, #8
1005381a:	af00      	add	r7, sp, #0
1005381c:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_NOACTIVELERROR_Msk);
1005381e:	687a      	ldr	r2, [r7, #4]
10053820:	2380      	movs	r3, #128	@ 0x80
10053822:	025b      	lsls	r3, r3, #9
10053824:	4013      	ands	r3, r2
}
10053826:	0018      	movs	r0, r3
10053828:	46bd      	mov	sp, r7
1005382a:	b002      	add	sp, #8
1005382c:	bd80      	pop	{r7, pc}

1005382e <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>:
#endif

#if defined(BLUE_STATUSREG_TXRXSKIP_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxRxSkip(uint32_t x)
{
1005382e:	b580      	push	{r7, lr}
10053830:	b082      	sub	sp, #8
10053832:	af00      	add	r7, sp, #0
10053834:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXRXSKIP_Msk);
10053836:	687a      	ldr	r2, [r7, #4]
10053838:	2380      	movs	r3, #128	@ 0x80
1005383a:	039b      	lsls	r3, r3, #14
1005383c:	4013      	ands	r3, r2
}
1005383e:	0018      	movs	r0, r3
10053840:	46bd      	mov	sp, r7
10053842:	b002      	add	sp, #8
10053844:	bd80      	pop	{r7, pc}

10053846 <BLEPLAT_CNTR_IntGetIntStatusTxError1>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_1_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError1(uint32_t x)
{
10053846:	b580      	push	{r7, lr}
10053848:	b082      	sub	sp, #8
1005384a:	af00      	add	r7, sp, #0
1005384c:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_1_Msk);
1005384e:	687a      	ldr	r2, [r7, #4]
10053850:	2380      	movs	r3, #128	@ 0x80
10053852:	009b      	lsls	r3, r3, #2
10053854:	4013      	ands	r3, r2
}
10053856:	0018      	movs	r0, r3
10053858:	46bd      	mov	sp, r7
1005385a:	b002      	add	sp, #8
1005385c:	bd80      	pop	{r7, pc}

1005385e <BLEPLAT_CNTR_IntGetIntStatusTxError3>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_3_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError3(uint32_t x)
{
1005385e:	b580      	push	{r7, lr}
10053860:	b082      	sub	sp, #8
10053862:	af00      	add	r7, sp, #0
10053864:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_3_Msk);
10053866:	687a      	ldr	r2, [r7, #4]
10053868:	2380      	movs	r3, #128	@ 0x80
1005386a:	011b      	lsls	r3, r3, #4
1005386c:	4013      	ands	r3, r2
}
1005386e:	0018      	movs	r0, r3
10053870:	46bd      	mov	sp, r7
10053872:	b002      	add	sp, #8
10053874:	bd80      	pop	{r7, pc}

10053876 <BLEPLAT_CNTR_IntGetIntStatusRxOk>:
#endif

#if defined(BLUE_STATUSREG_RCVOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusRxOk(uint32_t x)
{
10053876:	b580      	push	{r7, lr}
10053878:	b082      	sub	sp, #8
1005387a:	af00      	add	r7, sp, #0
1005387c:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVOK_Msk);
1005387e:	687b      	ldr	r3, [r7, #4]
10053880:	0fdb      	lsrs	r3, r3, #31
10053882:	07db      	lsls	r3, r3, #31
}
10053884:	0018      	movs	r0, r3
10053886:	46bd      	mov	sp, r7
10053888:	b002      	add	sp, #8
1005388a:	bd80      	pop	{r7, pc}

1005388c <BLEPLAT_CNTR_IntGetIntStatusTimeout>:
#endif

#if defined(BLUE_STATUSREG_RCVTIMEOUT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTimeout(uint32_t x)
{
1005388c:	b580      	push	{r7, lr}
1005388e:	b082      	sub	sp, #8
10053890:	af00      	add	r7, sp, #0
10053892:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVTIMEOUT_Msk);
10053894:	687a      	ldr	r2, [r7, #4]
10053896:	2380      	movs	r3, #128	@ 0x80
10053898:	04db      	lsls	r3, r3, #19
1005389a:	4013      	ands	r3, r2
}
1005389c:	0018      	movs	r0, r3
1005389e:	46bd      	mov	sp, r7
100538a0:	b002      	add	sp, #8
100538a2:	bd80      	pop	{r7, pc}

100538a4 <BLEPLAT_CNTR_IntGetIntStatusTxDone>:
}
#endif

#if defined(BLUE_STATUSREG_PREVTRANSMIT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxDone(uint32_t x)
{
100538a4:	b580      	push	{r7, lr}
100538a6:	b082      	sub	sp, #8
100538a8:	af00      	add	r7, sp, #0
100538aa:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_PREVTRANSMIT_Msk);
100538ac:	687b      	ldr	r3, [r7, #4]
100538ae:	2240      	movs	r2, #64	@ 0x40
100538b0:	4013      	ands	r3, r2
}
100538b2:	0018      	movs	r0, r3
100538b4:	46bd      	mov	sp, r7
100538b6:	b002      	add	sp, #8
100538b8:	bd80      	pop	{r7, pc}

100538ba <BLEPLAT_CNTR_IntGetIntStatusTxOk>:
#endif

#if defined(BLUE_STATUSREG_TXOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxOk(uint32_t x)
{
100538ba:	b580      	push	{r7, lr}
100538bc:	b082      	sub	sp, #8
100538be:	af00      	add	r7, sp, #0
100538c0:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXOK_Msk);
100538c2:	687a      	ldr	r2, [r7, #4]
100538c4:	2380      	movs	r3, #128	@ 0x80
100538c6:	045b      	lsls	r3, r3, #17
100538c8:	4013      	ands	r3, r2
}
100538ca:	0018      	movs	r0, r3
100538cc:	46bd      	mov	sp, r7
100538ce:	b002      	add	sp, #8
100538d0:	bd80      	pop	{r7, pc}

100538d2 <BLEPLAT_CNTR_PacketClrCteSamplingEn>:
{
    LL_RADIO_SetCRCInitializationSelector((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketClrCteSamplingEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100538d2:	b580      	push	{r7, lr}
100538d4:	b082      	sub	sp, #8
100538d6:	af00      	add	r7, sp, #0
100538d8:	6078      	str	r0, [r7, #4]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEAndSamplingEnable((TXRXPACK_TypeDef*)packetP, 0x0);
100538da:	687b      	ldr	r3, [r7, #4]
100538dc:	2100      	movs	r1, #0
100538de:	0018      	movs	r0, r3
100538e0:	f7ff fd17 	bl	10053312 <LL_RADIO_SetCTEAndSamplingEnable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
100538e4:	46c0      	nop			@ (mov r8, r8)
100538e6:	46bd      	mov	sp, r7
100538e8:	b002      	add	sp, #8
100538ea:	bd80      	pop	{r7, pc}

100538ec <BLEPLAT_CNTR_PacketClrIncChan>:

void BLEPLAT_CNTR_PacketClrIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100538ec:	b580      	push	{r7, lr}
100538ee:	b082      	sub	sp, #8
100538f0:	af00      	add	r7, sp, #0
100538f2:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Disable((TXRXPACK_TypeDef*)packetP);
100538f4:	687b      	ldr	r3, [r7, #4]
100538f6:	0018      	movs	r0, r3
100538f8:	f7ff fd66 	bl	100533c8 <LL_RADIO_IncrementerChannel_Disable>
}
100538fc:	46c0      	nop			@ (mov r8, r8)
100538fe:	46bd      	mov	sp, r7
10053900:	b002      	add	sp, #8
10053902:	bd80      	pop	{r7, pc}

10053904 <BLEPLAT_CNTR_PacketClrPllTrig>:

void BLEPLAT_CNTR_PacketClrPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053904:	b580      	push	{r7, lr}
10053906:	b082      	sub	sp, #8
10053908:	af00      	add	r7, sp, #0
1005390a:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
1005390c:	687b      	ldr	r3, [r7, #4]
1005390e:	2100      	movs	r1, #0
10053910:	0018      	movs	r0, r3
10053912:	f7ff fcd5 	bl	100532c0 <LL_RADIO_SetCalibrationRequest>
}
10053916:	46c0      	nop			@ (mov r8, r8)
10053918:	46bd      	mov	sp, r7
1005391a:	b002      	add	sp, #8
1005391c:	bd80      	pop	{r7, pc}

1005391e <BLEPLAT_CNTR_PacketGetDataPtr>:
#endif

}

uint8_t* BLEPLAT_CNTR_PacketGetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1005391e:	b580      	push	{r7, lr}
10053920:	b082      	sub	sp, #8
10053922:	af00      	add	r7, sp, #0
10053924:	6078      	str	r0, [r7, #4]
    return (uint8_t*)CONV_ADR(LL_RADIO_GetDataPointer((TXRXPACK_TypeDef*)packetP));
10053926:	687b      	ldr	r3, [r7, #4]
10053928:	0018      	movs	r0, r3
1005392a:	f7ff fdb3 	bl	10053494 <LL_RADIO_GetDataPointer>
1005392e:	0003      	movs	r3, r0
}
10053930:	0018      	movs	r0, r3
10053932:	46bd      	mov	sp, r7
10053934:	b002      	add	sp, #8
10053936:	bd80      	pop	{r7, pc}

10053938 <BLEPLAT_CNTR_PacketInitTo0>:

void BLEPLAT_CNTR_PacketInitTo0(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053938:	b580      	push	{r7, lr}
1005393a:	b082      	sub	sp, #8
1005393c:	af00      	add	r7, sp, #0
1005393e:	6078      	str	r0, [r7, #4]
    memset((void*)packetP, 0, sizeof(TXRXPACK_WORD_TypeDef));
10053940:	687b      	ldr	r3, [r7, #4]
10053942:	2210      	movs	r2, #16
10053944:	2100      	movs	r1, #0
10053946:	0018      	movs	r0, r3
10053948:	f014 f888 	bl	10067a5c <memset>
}
1005394c:	46c0      	nop			@ (mov r8, r8)
1005394e:	46bd      	mov	sp, r7
10053950:	b002      	add	sp, #8
10053952:	bd80      	pop	{r7, pc}

10053954 <BLEPLAT_CNTR_PacketSetAdvPduFormat>:

void BLEPLAT_CNTR_PacketSetAdvPduFormat(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053954:	b580      	push	{r7, lr}
10053956:	b082      	sub	sp, #8
10053958:	af00      	add	r7, sp, #0
1005395a:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1005395c:	687b      	ldr	r3, [r7, #4]
1005395e:	2101      	movs	r1, #1
10053960:	0018      	movs	r0, r3
10053962:	f7ff fd00 	bl	10053366 <LL_RADIO_SetAdvertise>
}
10053966:	46c0      	nop			@ (mov r8, r8)
10053968:	46bd      	mov	sp, r7
1005396a:	b002      	add	sp, #8
1005396c:	bd80      	pop	{r7, pc}

1005396e <BLEPLAT_CNTR_PacketSetCrcinitSel>:

void BLEPLAT_CNTR_PacketSetCrcinitSel(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1005396e:	b580      	push	{r7, lr}
10053970:	b082      	sub	sp, #8
10053972:	af00      	add	r7, sp, #0
10053974:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCRCInitializationSelector((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053976:	687b      	ldr	r3, [r7, #4]
10053978:	2101      	movs	r1, #1
1005397a:	0018      	movs	r0, r3
1005397c:	f7ff fcde 	bl	1005333c <LL_RADIO_SetCRCInitializationSelector>
}
10053980:	46c0      	nop			@ (mov r8, r8)
10053982:	46bd      	mov	sp, r7
10053984:	b002      	add	sp, #8
10053986:	bd80      	pop	{r7, pc}

10053988 <BLEPLAT_CNTR_PacketSetCteSamplingEn>:

void BLEPLAT_CNTR_PacketSetCteSamplingEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053988:	b580      	push	{r7, lr}
1005398a:	b082      	sub	sp, #8
1005398c:	af00      	add	r7, sp, #0
1005398e:	6078      	str	r0, [r7, #4]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEAndSamplingEnable((TXRXPACK_TypeDef*)packetP, 0x01);
10053990:	687b      	ldr	r3, [r7, #4]
10053992:	2101      	movs	r1, #1
10053994:	0018      	movs	r0, r3
10053996:	f7ff fcbc 	bl	10053312 <LL_RADIO_SetCTEAndSamplingEnable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
1005399a:	46c0      	nop			@ (mov r8, r8)
1005399c:	46bd      	mov	sp, r7
1005399e:	b002      	add	sp, #8
100539a0:	bd80      	pop	{r7, pc}

100539a2 <BLEPLAT_CNTR_PacketSetDataPtr>:
{
     LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketSetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, void* dataP)
{
100539a2:	b580      	push	{r7, lr}
100539a4:	b082      	sub	sp, #8
100539a6:	af00      	add	r7, sp, #0
100539a8:	6078      	str	r0, [r7, #4]
100539aa:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetDataPointer((TXRXPACK_TypeDef*)packetP, BLUE_DATA_PTR_CAST(dataP));
100539ac:	683a      	ldr	r2, [r7, #0]
100539ae:	687b      	ldr	r3, [r7, #4]
100539b0:	0011      	movs	r1, r2
100539b2:	0018      	movs	r0, r3
100539b4:	f7ff fd60 	bl	10053478 <LL_RADIO_SetDataPointer>
}
100539b8:	46c0      	nop			@ (mov r8, r8)
100539ba:	46bd      	mov	sp, r7
100539bc:	b002      	add	sp, #8
100539be:	bd80      	pop	{r7, pc}

100539c0 <BLEPLAT_CNTR_PacketSetIncChan>:

void BLEPLAT_CNTR_PacketSetIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100539c0:	b580      	push	{r7, lr}
100539c2:	b082      	sub	sp, #8
100539c4:	af00      	add	r7, sp, #0
100539c6:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Enable((TXRXPACK_TypeDef*)packetP);
100539c8:	687b      	ldr	r3, [r7, #4]
100539ca:	0018      	movs	r0, r3
100539cc:	f7ff fcee 	bl	100533ac <LL_RADIO_IncrementerChannel_Enable>
}
100539d0:	46c0      	nop			@ (mov r8, r8)
100539d2:	46bd      	mov	sp, r7
100539d4:	b002      	add	sp, #8
100539d6:	bd80      	pop	{r7, pc}

100539d8 <BLEPLAT_CNTR_PacketSetIntCrcErr>:

void BLEPLAT_CNTR_PacketSetIntCrcErr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100539d8:	b580      	push	{r7, lr}
100539da:	b082      	sub	sp, #8
100539dc:	af00      	add	r7, sp, #0
100539de:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvCRCErr_Enable((TXRXPACK_TypeDef*)packetP);
100539e0:	687b      	ldr	r3, [r7, #4]
100539e2:	0018      	movs	r0, r3
100539e4:	f7ff fde8 	bl	100535b8 <LL_RADIO_IntRcvCRCErr_Enable>
}
100539e8:	46c0      	nop			@ (mov r8, r8)
100539ea:	46bd      	mov	sp, r7
100539ec:	b002      	add	sp, #8
100539ee:	bd80      	pop	{r7, pc}

100539f0 <BLEPLAT_CNTR_PacketSetIntDone>:

void BLEPLAT_CNTR_PacketSetIntDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100539f0:	b580      	push	{r7, lr}
100539f2:	b082      	sub	sp, #8
100539f4:	af00      	add	r7, sp, #0
100539f6:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntDone_Enable((TXRXPACK_TypeDef*)packetP);
100539f8:	687b      	ldr	r3, [r7, #4]
100539fa:	0018      	movs	r0, r3
100539fc:	f7ff fdbe 	bl	1005357c <LL_RADIO_IntDone_Enable>
}
10053a00:	46c0      	nop			@ (mov r8, r8)
10053a02:	46bd      	mov	sp, r7
10053a04:	b002      	add	sp, #8
10053a06:	bd80      	pop	{r7, pc}

10053a08 <BLEPLAT_CNTR_PacketSetIntRcvOk>:

void BLEPLAT_CNTR_PacketSetIntRcvOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053a08:	b580      	push	{r7, lr}
10053a0a:	b082      	sub	sp, #8
10053a0c:	af00      	add	r7, sp, #0
10053a0e:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvOk_Enable((TXRXPACK_TypeDef*)packetP);
10053a10:	687b      	ldr	r3, [r7, #4]
10053a12:	0018      	movs	r0, r3
10053a14:	f7ff fddf 	bl	100535d6 <LL_RADIO_IntRcvOk_Enable>
}
10053a18:	46c0      	nop			@ (mov r8, r8)
10053a1a:	46bd      	mov	sp, r7
10053a1c:	b002      	add	sp, #8
10053a1e:	bd80      	pop	{r7, pc}

10053a20 <BLEPLAT_CNTR_PacketSetIntTimeout>:

void BLEPLAT_CNTR_PacketSetIntTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053a20:	b580      	push	{r7, lr}
10053a22:	b082      	sub	sp, #8
10053a24:	af00      	add	r7, sp, #0
10053a26:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvTimeout_Enable((TXRXPACK_TypeDef*)packetP);
10053a28:	687b      	ldr	r3, [r7, #4]
10053a2a:	0018      	movs	r0, r3
10053a2c:	f7ff fdb5 	bl	1005359a <LL_RADIO_IntRcvTimeout_Enable>
}
10053a30:	46c0      	nop			@ (mov r8, r8)
10053a32:	46bd      	mov	sp, r7
10053a34:	b002      	add	sp, #8
10053a36:	bd80      	pop	{r7, pc}

10053a38 <BLEPLAT_CNTR_PacketSetIntTxOk>:
{
  LL_RADIO_SetIntTimeCapture((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1U);
}

void BLEPLAT_CNTR_PacketSetIntTxOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053a38:	b580      	push	{r7, lr}
10053a3a:	b082      	sub	sp, #8
10053a3c:	af00      	add	r7, sp, #0
10053a3e:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetIntTxOk((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053a40:	687b      	ldr	r3, [r7, #4]
10053a42:	2101      	movs	r1, #1
10053a44:	0018      	movs	r0, r3
10053a46:	f7ff fd81 	bl	1005354c <LL_RADIO_SetIntTxOk>
}
10053a4a:	46c0      	nop			@ (mov r8, r8)
10053a4c:	46bd      	mov	sp, r7
10053a4e:	b002      	add	sp, #8
10053a50:	bd80      	pop	{r7, pc}

10053a52 <BLEPLAT_CNTR_PacketSetKeepsemareq>:

void BLEPLAT_CNTR_PacketSetKeepsemareq(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053a52:	b580      	push	{r7, lr}
10053a54:	b082      	sub	sp, #8
10053a56:	af00      	add	r7, sp, #0
10053a58:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetKeepSemaRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053a5a:	687b      	ldr	r3, [r7, #4]
10053a5c:	2101      	movs	r1, #1
10053a5e:	0018      	movs	r0, r3
10053a60:	f7ff fc42 	bl	100532e8 <LL_RADIO_SetKeepSemaRequest>
}
10053a64:	46c0      	nop			@ (mov r8, r8)
10053a66:	46bd      	mov	sp, r7
10053a68:	b002      	add	sp, #8
10053a6a:	bd80      	pop	{r7, pc}

10053a6c <BLEPLAT_CNTR_PacketSetNextPtr>:

void BLEPLAT_CNTR_PacketSetNextPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetNextP)
{
10053a6c:	b580      	push	{r7, lr}
10053a6e:	b082      	sub	sp, #8
10053a70:	af00      	add	r7, sp, #0
10053a72:	6078      	str	r0, [r7, #4]
10053a74:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetNextPointer((TXRXPACK_TypeDef*)packetP, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetNextP));
10053a76:	683a      	ldr	r2, [r7, #0]
10053a78:	687b      	ldr	r3, [r7, #4]
10053a7a:	0011      	movs	r1, r2
10053a7c:	0018      	movs	r0, r3
10053a7e:	f7ff fc11 	bl	100532a4 <LL_RADIO_SetNextPointer>
}
10053a82:	46c0      	nop			@ (mov r8, r8)
10053a84:	46bd      	mov	sp, r7
10053a86:	b002      	add	sp, #8
10053a88:	bd80      	pop	{r7, pc}

10053a8a <BLEPLAT_CNTR_PacketSetNextRxMode>:

void BLEPLAT_CNTR_PacketSetNextRxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053a8a:	b580      	push	{r7, lr}
10053a8c:	b082      	sub	sp, #8
10053a8e:	af00      	add	r7, sp, #0
10053a90:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
10053a92:	687b      	ldr	r3, [r7, #4]
10053a94:	2100      	movs	r1, #0
10053a96:	0018      	movs	r0, r3
10053a98:	f7ff fca6 	bl	100533e8 <LL_RADIO_SetNextTxMode>
}
10053a9c:	46c0      	nop			@ (mov r8, r8)
10053a9e:	46bd      	mov	sp, r7
10053aa0:	b002      	add	sp, #8
10053aa2:	bd80      	pop	{r7, pc}

10053aa4 <BLEPLAT_CNTR_PacketSetNextSlot>:

void BLEPLAT_CNTR_PacketSetNextSlot(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint8_t slot)
{
10053aa4:	b580      	push	{r7, lr}
10053aa6:	b082      	sub	sp, #8
10053aa8:	af00      	add	r7, sp, #0
10053aaa:	6078      	str	r0, [r7, #4]
10053aac:	000a      	movs	r2, r1
10053aae:	1cfb      	adds	r3, r7, #3
10053ab0:	701a      	strb	r2, [r3, #0]
    /* nothing to do */
}
10053ab2:	46c0      	nop			@ (mov r8, r8)
10053ab4:	46bd      	mov	sp, r7
10053ab6:	b002      	add	sp, #8
10053ab8:	bd80      	pop	{r7, pc}

10053aba <BLEPLAT_CNTR_PacketSetNextTxMode>:

void BLEPLAT_CNTR_PacketSetNextTxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053aba:	b580      	push	{r7, lr}
10053abc:	b082      	sub	sp, #8
10053abe:	af00      	add	r7, sp, #0
10053ac0:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053ac2:	687b      	ldr	r3, [r7, #4]
10053ac4:	2101      	movs	r1, #1
10053ac6:	0018      	movs	r0, r3
10053ac8:	f7ff fc8e 	bl	100533e8 <LL_RADIO_SetNextTxMode>
}
10053acc:	46c0      	nop			@ (mov r8, r8)
10053ace:	46bd      	mov	sp, r7
10053ad0:	b002      	add	sp, #8
10053ad2:	bd80      	pop	{r7, pc}

10053ad4 <BLEPLAT_CNTR_PacketSetNsEn>:

void BLEPLAT_CNTR_PacketSetNsEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053ad4:	b580      	push	{r7, lr}
10053ad6:	b082      	sub	sp, #8
10053ad8:	af00      	add	r7, sp, #0
10053ada:	6078      	str	r0, [r7, #4]
    LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable((TXRXPACK_TypeDef*)packetP);
10053adc:	687b      	ldr	r3, [r7, #4]
10053ade:	0018      	movs	r0, r3
10053ae0:	f7ff fc56 	bl	10053390 <LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable>
}
10053ae4:	46c0      	nop			@ (mov r8, r8)
10053ae6:	46bd      	mov	sp, r7
10053ae8:	b002      	add	sp, #8
10053aea:	bd80      	pop	{r7, pc}

10053aec <BLEPLAT_CNTR_PacketSetPllTrig>:

void BLEPLAT_CNTR_PacketSetPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053aec:	b580      	push	{r7, lr}
10053aee:	b082      	sub	sp, #8
10053af0:	af00      	add	r7, sp, #0
10053af2:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053af4:	687b      	ldr	r3, [r7, #4]
10053af6:	2101      	movs	r1, #1
10053af8:	0018      	movs	r0, r3
10053afa:	f7ff fbe1 	bl	100532c0 <LL_RADIO_SetCalibrationRequest>
}
10053afe:	46c0      	nop			@ (mov r8, r8)
10053b00:	46bd      	mov	sp, r7
10053b02:	b002      	add	sp, #8
10053b04:	bd80      	pop	{r7, pc}

10053b06 <BLEPLAT_CNTR_PacketSetRxReady>:

void BLEPLAT_CNTR_PacketSetRxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053b06:	b580      	push	{r7, lr}
10053b08:	b082      	sub	sp, #8
10053b0a:	af00      	add	r7, sp, #0
10053b0c:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053b0e:	687b      	ldr	r3, [r7, #4]
10053b10:	2101      	movs	r1, #1
10053b12:	0018      	movs	r0, r3
10053b14:	f7ff fc80 	bl	10053418 <LL_RADIO_SetAllTableDataReady>
}
10053b18:	46c0      	nop			@ (mov r8, r8)
10053b1a:	46bd      	mov	sp, r7
10053b1c:	b002      	add	sp, #8
10053b1e:	bd80      	pop	{r7, pc}

10053b20 <BLEPLAT_CNTR_PacketSetTimeout>:

void BLEPLAT_CNTR_PacketSetTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t x)
{
10053b20:	b580      	push	{r7, lr}
10053b22:	b082      	sub	sp, #8
10053b24:	af00      	add	r7, sp, #0
10053b26:	6078      	str	r0, [r7, #4]
10053b28:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetTimer2Triggering((TXRXPACK_TypeDef*)packetP, x);
10053b2a:	683a      	ldr	r2, [r7, #0]
10053b2c:	687b      	ldr	r3, [r7, #4]
10053b2e:	0011      	movs	r1, r2
10053b30:	0018      	movs	r0, r3
10053b32:	f7ff fcb9 	bl	100534a8 <LL_RADIO_SetTimer2Triggering>
}
10053b36:	46c0      	nop			@ (mov r8, r8)
10053b38:	46bd      	mov	sp, r7
10053b3a:	b002      	add	sp, #8
10053b3c:	bd80      	pop	{r7, pc}

10053b3e <BLEPLAT_CNTR_PacketSetTimer2Active>:

void BLEPLAT_CNTR_PacketSetTimer2Active(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053b3e:	b580      	push	{r7, lr}
10053b40:	b082      	sub	sp, #8
10053b42:	af00      	add	r7, sp, #0
10053b44:	6078      	str	r0, [r7, #4]
    LL_RADIO_Timer2_Enable((TXRXPACK_TypeDef*)packetP);
10053b46:	687b      	ldr	r3, [r7, #4]
10053b48:	0018      	movs	r0, r3
10053b4a:	f7ff fcc0 	bl	100534ce <LL_RADIO_Timer2_Enable>
}
10053b4e:	46c0      	nop			@ (mov r8, r8)
10053b50:	46bd      	mov	sp, r7
10053b52:	b002      	add	sp, #8
10053b54:	bd80      	pop	{r7, pc}

10053b56 <BLEPLAT_CNTR_PacketSetTimerTrigDone>:

void BLEPLAT_CNTR_PacketSetTimerTrigDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053b56:	b580      	push	{r7, lr}
10053b58:	b082      	sub	sp, #8
10053b5a:	af00      	add	r7, sp, #0
10053b5c:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigDone((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053b5e:	687b      	ldr	r3, [r7, #4]
10053b60:	2101      	movs	r1, #1
10053b62:	0018      	movs	r0, r3
10053b64:	f7ff fcda 	bl	1005351c <LL_RADIO_SetTrigDone>
}
10053b68:	46c0      	nop			@ (mov r8, r8)
10053b6a:	46bd      	mov	sp, r7
10053b6c:	b002      	add	sp, #8
10053b6e:	bd80      	pop	{r7, pc}

10053b70 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>:

void BLEPLAT_CNTR_PacketSetTimerTrigRcv(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053b70:	b580      	push	{r7, lr}
10053b72:	b082      	sub	sp, #8
10053b74:	af00      	add	r7, sp, #0
10053b76:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigRcv((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053b78:	687b      	ldr	r3, [r7, #4]
10053b7a:	2101      	movs	r1, #1
10053b7c:	0018      	movs	r0, r3
10053b7e:	f7ff fcb5 	bl	100534ec <LL_RADIO_SetTrigRcv>
}
10053b82:	46c0      	nop			@ (mov r8, r8)
10053b84:	46bd      	mov	sp, r7
10053b86:	b002      	add	sp, #8
10053b88:	bd80      	pop	{r7, pc}

10053b8a <BLEPLAT_CNTR_PacketSetTxReady>:

void BLEPLAT_CNTR_PacketSetTxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053b8a:	b580      	push	{r7, lr}
10053b8c:	b082      	sub	sp, #8
10053b8e:	af00      	add	r7, sp, #0
10053b90:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTransmissionDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053b92:	687b      	ldr	r3, [r7, #4]
10053b94:	2101      	movs	r1, #1
10053b96:	0018      	movs	r0, r3
10053b98:	f7ff fc56 	bl	10053448 <LL_RADIO_SetTransmissionDataReady>
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053b9c:	687b      	ldr	r3, [r7, #4]
10053b9e:	2101      	movs	r1, #1
10053ba0:	0018      	movs	r0, r3
10053ba2:	f7ff fc39 	bl	10053418 <LL_RADIO_SetAllTableDataReady>
}
10053ba6:	46c0      	nop			@ (mov r8, r8)
10053ba8:	46bd      	mov	sp, r7
10053baa:	b002      	add	sp, #8
10053bac:	bd80      	pop	{r7, pc}

10053bae <BLEPLAT_CNTR_SetRcvLen>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SetRcvLen(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t rcvLen)
{
10053bae:	b580      	push	{r7, lr}
10053bb0:	b082      	sub	sp, #8
10053bb2:	af00      	add	r7, sp, #0
10053bb4:	6078      	str	r0, [r7, #4]
10053bb6:	6039      	str	r1, [r7, #0]
  (void)packetP;
  LL_RADIO_SetReceiveWindowTimeout((uint32_t) (rcvLen & 0xFFFFFU));
10053bb8:	683b      	ldr	r3, [r7, #0]
10053bba:	031b      	lsls	r3, r3, #12
10053bbc:	0b1b      	lsrs	r3, r3, #12
10053bbe:	0018      	movs	r0, r3
10053bc0:	f7fe fea6 	bl	10052910 <LL_RADIO_SetReceiveWindowTimeout>
}
10053bc4:	46c0      	nop			@ (mov r8, r8)
10053bc6:	46bd      	mov	sp, r7
10053bc8:	b002      	add	sp, #8
10053bca:	bd80      	pop	{r7, pc}

10053bcc <BLEPLAT_CNTR_SmCteOff>:

void BLEPLAT_CNTR_SmCteOff(uint8_t smNo)
{
10053bcc:	b580      	push	{r7, lr}
10053bce:	b082      	sub	sp, #8
10053bd0:	af00      	add	r7, sp, #0
10053bd2:	0002      	movs	r2, r0
10053bd4:	1dfb      	adds	r3, r7, #7
10053bd6:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEDisable(smNo, 0x01);
10053bd8:	1dfb      	adds	r3, r7, #7
10053bda:	781b      	ldrb	r3, [r3, #0]
10053bdc:	2101      	movs	r1, #1
10053bde:	0018      	movs	r0, r3
10053be0:	f7ff f848 	bl	10052c74 <LL_RADIO_SetCTEDisable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
10053be4:	46c0      	nop			@ (mov r8, r8)
10053be6:	46bd      	mov	sp, r7
10053be8:	b002      	add	sp, #8
10053bea:	bd80      	pop	{r7, pc}

10053bec <BLEPLAT_CNTR_SmEnRadioConfig>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmEnRadioConfig(uint8_t smNo, uint32_t enable)
{
10053bec:	b580      	push	{r7, lr}
10053bee:	b082      	sub	sp, #8
10053bf0:	af00      	add	r7, sp, #0
10053bf2:	0002      	movs	r2, r0
10053bf4:	6039      	str	r1, [r7, #0]
10053bf6:	1dfb      	adds	r3, r7, #7
10053bf8:	701a      	strb	r2, [r3, #0]
    if(enable)
10053bfa:	683b      	ldr	r3, [r7, #0]
10053bfc:	2b00      	cmp	r3, #0
10053bfe:	d005      	beq.n	10053c0c <BLEPLAT_CNTR_SmEnRadioConfig+0x20>
	    LL_RADIO_RadioCommandList_Enable(smNo);
10053c00:	1dfb      	adds	r3, r7, #7
10053c02:	781b      	ldrb	r3, [r3, #0]
10053c04:	0018      	movs	r0, r3
10053c06:	f7fe fec1 	bl	1005298c <LL_RADIO_RadioCommandList_Enable>
	else
	    LL_RADIO_RadioCommandList_Disable(smNo);
}
10053c0a:	e004      	b.n	10053c16 <BLEPLAT_CNTR_SmEnRadioConfig+0x2a>
	    LL_RADIO_RadioCommandList_Disable(smNo);
10053c0c:	1dfb      	adds	r3, r7, #7
10053c0e:	781b      	ldrb	r3, [r3, #0]
10053c10:	0018      	movs	r0, r3
10053c12:	f7fe fed9 	bl	100529c8 <LL_RADIO_RadioCommandList_Disable>
}
10053c16:	46c0      	nop			@ (mov r8, r8)
10053c18:	46bd      	mov	sp, r7
10053c1a:	b002      	add	sp, #8
10053c1c:	bd80      	pop	{r7, pc}

10053c1e <BLEPLAT_CNTR_SmEncOff>:

void BLEPLAT_CNTR_SmEncOff(uint8_t smNo)
{
10053c1e:	b580      	push	{r7, lr}
10053c20:	b082      	sub	sp, #8
10053c22:	af00      	add	r7, sp, #0
10053c24:	0002      	movs	r2, r0
10053c26:	1dfb      	adds	r3, r7, #7
10053c28:	701a      	strb	r2, [r3, #0]
    LL_RADIO_Encryption_Disable(smNo);
10053c2a:	1dfb      	adds	r3, r7, #7
10053c2c:	781b      	ldrb	r3, [r3, #0]
10053c2e:	0018      	movs	r0, r3
10053c30:	f7fe ffc0 	bl	10052bb4 <LL_RADIO_Encryption_Disable>
    LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable(smNo);
10053c34:	1dfb      	adds	r3, r7, #7
10053c36:	781b      	ldrb	r3, [r3, #0]
10053c38:	0018      	movs	r0, r3
10053c3a:	f7ff f9ad 	bl	10052f98 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable>
}
10053c3e:	46c0      	nop			@ (mov r8, r8)
10053c40:	46bd      	mov	sp, r7
10053c42:	b002      	add	sp, #8
10053c44:	bd80      	pop	{r7, pc}

10053c46 <BLEPLAT_CNTR_SmEncOn>:

void BLEPLAT_CNTR_SmEncOn(uint8_t smNo)
{
10053c46:	b580      	push	{r7, lr}
10053c48:	b082      	sub	sp, #8
10053c4a:	af00      	add	r7, sp, #0
10053c4c:	0002      	movs	r2, r0
10053c4e:	1dfb      	adds	r3, r7, #7
10053c50:	701a      	strb	r2, [r3, #0]
    LL_RADIO_Encryption_Enable(smNo);
10053c52:	1dfb      	adds	r3, r7, #7
10053c54:	781b      	ldrb	r3, [r3, #0]
10053c56:	0018      	movs	r0, r3
10053c58:	f7fe ff8c 	bl	10052b74 <LL_RADIO_Encryption_Enable>
    LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable(smNo);
10053c5c:	1dfb      	adds	r3, r7, #7
10053c5e:	781b      	ldrb	r3, [r3, #0]
10053c60:	0018      	movs	r0, r3
10053c62:	f7ff f979 	bl	10052f58 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable>
}
10053c66:	46c0      	nop			@ (mov r8, r8)
10053c68:	46bd      	mov	sp, r7
10053c6a:	b002      	add	sp, #8
10053c6c:	bd80      	pop	{r7, pc}

10053c6e <BLEPLAT_CNTR_SmGetAccessAddr>:

uint32_t BLEPLAT_CNTR_SmGetAccessAddr(uint8_t smNo)
{
10053c6e:	b580      	push	{r7, lr}
10053c70:	b082      	sub	sp, #8
10053c72:	af00      	add	r7, sp, #0
10053c74:	0002      	movs	r2, r0
10053c76:	1dfb      	adds	r3, r7, #7
10053c78:	701a      	strb	r2, [r3, #0]
    return LL_RADIO_GetAccessAddress(smNo);
10053c7a:	1dfb      	adds	r3, r7, #7
10053c7c:	781b      	ldrb	r3, [r3, #0]
10053c7e:	0018      	movs	r0, r3
10053c80:	f7ff f9c8 	bl	10053014 <LL_RADIO_GetAccessAddress>
10053c84:	0003      	movs	r3, r0
}
10053c86:	0018      	movs	r0, r3
10053c88:	46bd      	mov	sp, r7
10053c8a:	b002      	add	sp, #8
10053c8c:	bd80      	pop	{r7, pc}

10053c8e <BLEPLAT_CNTR_SmGetChannelMap>:

void BLEPLAT_CNTR_SmGetChannelMap(uint8_t smNo, uint8_t* chanMap)
{
10053c8e:	b580      	push	{r7, lr}
10053c90:	b082      	sub	sp, #8
10053c92:	af00      	add	r7, sp, #0
10053c94:	0002      	movs	r2, r0
10053c96:	6039      	str	r1, [r7, #0]
10053c98:	1dfb      	adds	r3, r7, #7
10053c9a:	701a      	strb	r2, [r3, #0]
    chanMap[0] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_15_0(smNo));
10053c9c:	1dfb      	adds	r3, r7, #7
10053c9e:	781b      	ldrb	r3, [r3, #0]
10053ca0:	0018      	movs	r0, r3
10053ca2:	f7ff faad 	bl	10053200 <LL_RADIO_GetUsedChannelFlags_15_0>
10053ca6:	0003      	movs	r3, r0
10053ca8:	b2da      	uxtb	r2, r3
10053caa:	683b      	ldr	r3, [r7, #0]
10053cac:	701a      	strb	r2, [r3, #0]
    chanMap[1] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_15_0(smNo) >> 8U);
10053cae:	1dfb      	adds	r3, r7, #7
10053cb0:	781b      	ldrb	r3, [r3, #0]
10053cb2:	0018      	movs	r0, r3
10053cb4:	f7ff faa4 	bl	10053200 <LL_RADIO_GetUsedChannelFlags_15_0>
10053cb8:	0003      	movs	r3, r0
10053cba:	0a1a      	lsrs	r2, r3, #8
10053cbc:	683b      	ldr	r3, [r7, #0]
10053cbe:	3301      	adds	r3, #1
10053cc0:	b2d2      	uxtb	r2, r2
10053cc2:	701a      	strb	r2, [r3, #0]
    chanMap[2] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo));
10053cc4:	1dfb      	adds	r3, r7, #7
10053cc6:	781b      	ldrb	r3, [r3, #0]
10053cc8:	0018      	movs	r0, r3
10053cca:	f7ff fad5 	bl	10053278 <LL_RADIO_GetUsedChannelFlags_36_16>
10053cce:	0002      	movs	r2, r0
10053cd0:	683b      	ldr	r3, [r7, #0]
10053cd2:	3302      	adds	r3, #2
10053cd4:	b2d2      	uxtb	r2, r2
10053cd6:	701a      	strb	r2, [r3, #0]
    chanMap[3] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo) >> 8U);
10053cd8:	1dfb      	adds	r3, r7, #7
10053cda:	781b      	ldrb	r3, [r3, #0]
10053cdc:	0018      	movs	r0, r3
10053cde:	f7ff facb 	bl	10053278 <LL_RADIO_GetUsedChannelFlags_36_16>
10053ce2:	0003      	movs	r3, r0
10053ce4:	0a1a      	lsrs	r2, r3, #8
10053ce6:	683b      	ldr	r3, [r7, #0]
10053ce8:	3303      	adds	r3, #3
10053cea:	b2d2      	uxtb	r2, r2
10053cec:	701a      	strb	r2, [r3, #0]
    chanMap[4] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo) >> 16U);
10053cee:	1dfb      	adds	r3, r7, #7
10053cf0:	781b      	ldrb	r3, [r3, #0]
10053cf2:	0018      	movs	r0, r3
10053cf4:	f7ff fac0 	bl	10053278 <LL_RADIO_GetUsedChannelFlags_36_16>
10053cf8:	0003      	movs	r3, r0
10053cfa:	0c1a      	lsrs	r2, r3, #16
10053cfc:	683b      	ldr	r3, [r7, #0]
10053cfe:	3304      	adds	r3, #4
10053d00:	b2d2      	uxtb	r2, r2
10053d02:	701a      	strb	r2, [r3, #0]
}
10053d04:	46c0      	nop			@ (mov r8, r8)
10053d06:	46bd      	mov	sp, r7
10053d08:	b002      	add	sp, #8
10053d0a:	bd80      	pop	{r7, pc}

10053d0c <BLEPLAT_CNTR_SmGetEncIvPtr>:
  return (uint8_t)0;
#endif
}

uint32_t* BLEPLAT_CNTR_SmGetEncIvPtr(uint8_t smNo)
{
10053d0c:	b580      	push	{r7, lr}
10053d0e:	b082      	sub	sp, #8
10053d10:	af00      	add	r7, sp, #0
10053d12:	0002      	movs	r2, r0
10053d14:	1dfb      	adds	r3, r7, #7
10053d16:	701a      	strb	r2, [r3, #0]
    return (uint32_t*)&(bluedata + smNo)->ENCRYPTIV[0];
10053d18:	1dfb      	adds	r3, r7, #7
10053d1a:	781b      	ldrb	r3, [r3, #0]
10053d1c:	225c      	movs	r2, #92	@ 0x5c
10053d1e:	4353      	muls	r3, r2
10053d20:	4a03      	ldr	r2, [pc, #12]	@ (10053d30 <BLEPLAT_CNTR_SmGetEncIvPtr+0x24>)
10053d22:	4694      	mov	ip, r2
10053d24:	4463      	add	r3, ip
10053d26:	3338      	adds	r3, #56	@ 0x38
}
10053d28:	0018      	movs	r0, r3
10053d2a:	46bd      	mov	sp, r7
10053d2c:	b002      	add	sp, #8
10053d2e:	bd80      	pop	{r7, pc}
10053d30:	200000dc 	.word	0x200000dc

10053d34 <BLEPLAT_CNTR_SmGetEncKeyPtr>:

uint32_t* BLEPLAT_CNTR_SmGetEncKeyPtr(uint8_t smNo)
{
10053d34:	b580      	push	{r7, lr}
10053d36:	b082      	sub	sp, #8
10053d38:	af00      	add	r7, sp, #0
10053d3a:	0002      	movs	r2, r0
10053d3c:	1dfb      	adds	r3, r7, #7
10053d3e:	701a      	strb	r2, [r3, #0]
	return (uint32_t*)&(bluedata + smNo)->ENCRYPTK[0];
10053d40:	1dfb      	adds	r3, r7, #7
10053d42:	781b      	ldrb	r3, [r3, #0]
10053d44:	225c      	movs	r2, #92	@ 0x5c
10053d46:	4353      	muls	r3, r2
10053d48:	4a03      	ldr	r2, [pc, #12]	@ (10053d58 <BLEPLAT_CNTR_SmGetEncKeyPtr+0x24>)
10053d4a:	4694      	mov	ip, r2
10053d4c:	4463      	add	r3, ip
10053d4e:	3340      	adds	r3, #64	@ 0x40
}
10053d50:	0018      	movs	r0, r3
10053d52:	46bd      	mov	sp, r7
10053d54:	b002      	add	sp, #8
10053d56:	bd80      	pop	{r7, pc}
10053d58:	200000dc 	.word	0x200000dc

10053d5c <BLEPLAT_CNTR_SmGetHopIncr>:
{
    return (uint8_t)LL_RADIO_Encryption_IsEnabled(smNo);
}

uint8_t BLEPLAT_CNTR_SmGetHopIncr(uint8_t smNo)
{
10053d5c:	b580      	push	{r7, lr}
10053d5e:	b082      	sub	sp, #8
10053d60:	af00      	add	r7, sp, #0
10053d62:	0002      	movs	r2, r0
10053d64:	1dfb      	adds	r3, r7, #7
10053d66:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetHopIncrement(smNo);
10053d68:	1dfb      	adds	r3, r7, #7
10053d6a:	781b      	ldrb	r3, [r3, #0]
10053d6c:	0018      	movs	r0, r3
10053d6e:	f7ff fa0d 	bl	1005318c <LL_RADIO_GetHopIncrement>
10053d72:	0003      	movs	r3, r0
10053d74:	b2db      	uxtb	r3, r3
}
10053d76:	0018      	movs	r0, r3
10053d78:	46bd      	mov	sp, r7
10053d7a:	b002      	add	sp, #8
10053d7c:	bd80      	pop	{r7, pc}

10053d7e <BLEPLAT_CNTR_SmGetMode>:

uint8_t BLEPLAT_CNTR_SmGetMode(uint8_t smNo)
{
10053d7e:	b580      	push	{r7, lr}
10053d80:	b082      	sub	sp, #8
10053d82:	af00      	add	r7, sp, #0
10053d84:	0002      	movs	r2, r0
10053d86:	1dfb      	adds	r3, r7, #7
10053d88:	701a      	strb	r2, [r3, #0]
    return LL_RADIO_TxMode_IsEnabled(smNo);
10053d8a:	1dfb      	adds	r3, r7, #7
10053d8c:	781b      	ldrb	r3, [r3, #0]
10053d8e:	0018      	movs	r0, r3
10053d90:	f7fe fe74 	bl	10052a7c <LL_RADIO_TxMode_IsEnabled>
10053d94:	0003      	movs	r3, r0
10053d96:	b2db      	uxtb	r3, r3
}
10053d98:	0018      	movs	r0, r3
10053d9a:	46bd      	mov	sp, r7
10053d9c:	b002      	add	sp, #8
10053d9e:	bd80      	pop	{r7, pc}

10053da0 <BLEPLAT_CNTR_SmGetRemapChan>:
{
    return (BLEPLAT_CNTR_TXRXPACK_TypeDef*)BLUE_TRANS_STRUCT_PTR_CAST(CONV_ADR(LL_RADIO_GetTxPointPrevious(smNo)));
}

uint8_t BLEPLAT_CNTR_SmGetRemapChan(uint8_t smNo)
{
10053da0:	b580      	push	{r7, lr}
10053da2:	b082      	sub	sp, #8
10053da4:	af00      	add	r7, sp, #0
10053da6:	0002      	movs	r2, r0
10053da8:	1dfb      	adds	r3, r7, #7
10053daa:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetRemapChannel(smNo);
10053dac:	1dfb      	adds	r3, r7, #7
10053dae:	781b      	ldrb	r3, [r3, #0]
10053db0:	0018      	movs	r0, r3
10053db2:	f7fe fea7 	bl	10052b04 <LL_RADIO_GetRemapChannel>
10053db6:	0003      	movs	r3, r0
10053db8:	b2db      	uxtb	r3, r3
}
10053dba:	0018      	movs	r0, r3
10053dbc:	46bd      	mov	sp, r7
10053dbe:	b002      	add	sp, #8
10053dc0:	bd80      	pop	{r7, pc}

10053dc2 <BLEPLAT_CNTR_SmGetRxCount>:

void BLEPLAT_CNTR_SmGetRxCount(uint8_t smNo, uint32_t* packetCount)
{
10053dc2:	b590      	push	{r4, r7, lr}
10053dc4:	b083      	sub	sp, #12
10053dc6:	af00      	add	r7, sp, #0
10053dc8:	0002      	movs	r2, r0
10053dca:	6039      	str	r1, [r7, #0]
10053dcc:	1dfb      	adds	r3, r7, #7
10053dce:	701a      	strb	r2, [r3, #0]

    packetCount[0] = LL_RADIO_GetPacketCounterRx_23_0(smNo);
10053dd0:	1dfb      	adds	r3, r7, #7
10053dd2:	781b      	ldrb	r3, [r3, #0]
10053dd4:	0018      	movs	r0, r3
10053dd6:	f7ff f86d 	bl	10052eb4 <LL_RADIO_GetPacketCounterRx_23_0>
10053dda:	0002      	movs	r2, r0
10053ddc:	683b      	ldr	r3, [r7, #0]
10053dde:	601a      	str	r2, [r3, #0]
    packetCount[0] = packetCount[0] | ((uint32_t)LL_RADIO_GetPacketCounterRx_39_24(smNo) << 24U);
10053de0:	683b      	ldr	r3, [r7, #0]
10053de2:	681c      	ldr	r4, [r3, #0]
10053de4:	1dfb      	adds	r3, r7, #7
10053de6:	781b      	ldrb	r3, [r3, #0]
10053de8:	0018      	movs	r0, r3
10053dea:	f7ff f89f 	bl	10052f2c <LL_RADIO_GetPacketCounterRx_39_24>
10053dee:	0003      	movs	r3, r0
10053df0:	061b      	lsls	r3, r3, #24
10053df2:	0022      	movs	r2, r4
10053df4:	431a      	orrs	r2, r3
10053df6:	683b      	ldr	r3, [r7, #0]
10053df8:	601a      	str	r2, [r3, #0]
    packetCount[1] = LL_RADIO_GetPacketCounterRx_39_24(smNo) >> 8U;
10053dfa:	1dfb      	adds	r3, r7, #7
10053dfc:	781b      	ldrb	r3, [r3, #0]
10053dfe:	0018      	movs	r0, r3
10053e00:	f7ff f894 	bl	10052f2c <LL_RADIO_GetPacketCounterRx_39_24>
10053e04:	0002      	movs	r2, r0
10053e06:	683b      	ldr	r3, [r7, #0]
10053e08:	3304      	adds	r3, #4
10053e0a:	0a12      	lsrs	r2, r2, #8
10053e0c:	601a      	str	r2, [r3, #0]
}
10053e0e:	46c0      	nop			@ (mov r8, r8)
10053e10:	46bd      	mov	sp, r7
10053e12:	b003      	add	sp, #12
10053e14:	bd90      	pop	{r4, r7, pc}

10053e16 <BLEPLAT_CNTR_SmGetRxPhy>:

uint8_t BLEPLAT_CNTR_SmGetRxPhy(uint8_t smNo)
{
10053e16:	b580      	push	{r7, lr}
10053e18:	b082      	sub	sp, #8
10053e1a:	af00      	add	r7, sp, #0
10053e1c:	0002      	movs	r2, r0
10053e1e:	1dfb      	adds	r3, r7, #7
10053e20:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetReceptionPhy(smNo);
10053e22:	1dfb      	adds	r3, r7, #7
10053e24:	781b      	ldrb	r3, [r3, #0]
10053e26:	0018      	movs	r0, r3
10053e28:	f7fe ff74 	bl	10052d14 <LL_RADIO_GetReceptionPhy>
10053e2c:	0003      	movs	r3, r0
10053e2e:	b2db      	uxtb	r3, r3
}
10053e30:	0018      	movs	r0, r3
10053e32:	46bd      	mov	sp, r7
10053e34:	b002      	add	sp, #8
10053e36:	bd80      	pop	{r7, pc}

10053e38 <BLEPLAT_CNTR_SmGetTxPhy>:
{
    return (BLEPLAT_CNTR_TXRXPACK_TypeDef*)BLUE_TRANS_STRUCT_PTR_CAST(CONV_ADR(LL_RADIO_GetTxPoint(smNo)));
}

uint8_t BLEPLAT_CNTR_SmGetTxPhy(uint8_t smNo)
{
10053e38:	b580      	push	{r7, lr}
10053e3a:	b082      	sub	sp, #8
10053e3c:	af00      	add	r7, sp, #0
10053e3e:	0002      	movs	r2, r0
10053e40:	1dfb      	adds	r3, r7, #7
10053e42:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetTransmissionPhy(smNo);
10053e44:	1dfb      	adds	r3, r7, #7
10053e46:	781b      	ldrb	r3, [r3, #0]
10053e48:	0018      	movs	r0, r3
10053e4a:	f7fe fefb 	bl	10052c44 <LL_RADIO_GetTransmissionPhy>
10053e4e:	0003      	movs	r3, r0
10053e50:	b2db      	uxtb	r3, r3
}
10053e52:	0018      	movs	r0, r3
10053e54:	46bd      	mov	sp, r7
10053e56:	b002      	add	sp, #8
10053e58:	bd80      	pop	{r7, pc}

10053e5a <BLEPLAT_CNTR_SmGetTxPwr>:

uint8_t BLEPLAT_CNTR_SmGetTxPwr(uint8_t smNo)
{
10053e5a:	b580      	push	{r7, lr}
10053e5c:	b084      	sub	sp, #16
10053e5e:	af00      	add	r7, sp, #0
10053e60:	0002      	movs	r2, r0
10053e62:	1dfb      	adds	r3, r7, #7
10053e64:	701a      	strb	r2, [r3, #0]
    uint8_t pa_level = LL_RADIO_GetPAPower(smNo);
10053e66:	1dfb      	adds	r3, r7, #7
10053e68:	781b      	ldrb	r3, [r3, #0]
10053e6a:	0018      	movs	r0, r3
10053e6c:	f7ff f950 	bl	10053110 <LL_RADIO_GetPAPower>
10053e70:	0002      	movs	r2, r0
10053e72:	210f      	movs	r1, #15
10053e74:	187b      	adds	r3, r7, r1
10053e76:	701a      	strb	r2, [r3, #0]
    if (LL_RADIO_TxHp_IsEnabled(smNo) && (pa_level == MAX_PA_LEVEL))
    {
        pa_level = HP_PA_LEVEL;
    }
#endif
    return pa_level;
10053e78:	187b      	adds	r3, r7, r1
10053e7a:	781b      	ldrb	r3, [r3, #0]
}
10053e7c:	0018      	movs	r0, r3
10053e7e:	46bd      	mov	sp, r7
10053e80:	b004      	add	sp, #16
10053e82:	bd80      	pop	{r7, pc}

10053e84 <BLEPLAT_CNTR_SmInitTo0>:
{
    return (uint8_t)LL_RADIO_GetUnmappedChannel(smNo);
}

void BLEPLAT_CNTR_SmInitTo0(uint8_t smNo)
{
10053e84:	b580      	push	{r7, lr}
10053e86:	b082      	sub	sp, #8
10053e88:	af00      	add	r7, sp, #0
10053e8a:	0002      	movs	r2, r0
10053e8c:	1dfb      	adds	r3, r7, #7
10053e8e:	701a      	strb	r2, [r3, #0]
  memset((void*)&bluedata[smNo], 0, sizeof(STATMACH_TypeDef));
10053e90:	1dfb      	adds	r3, r7, #7
10053e92:	781b      	ldrb	r3, [r3, #0]
10053e94:	225c      	movs	r2, #92	@ 0x5c
10053e96:	4353      	muls	r3, r2
10053e98:	4a08      	ldr	r2, [pc, #32]	@ (10053ebc <BLEPLAT_CNTR_SmInitTo0+0x38>)
10053e9a:	4694      	mov	ip, r2
10053e9c:	4463      	add	r3, ip
10053e9e:	225c      	movs	r2, #92	@ 0x5c
10053ea0:	2100      	movs	r1, #0
10053ea2:	0018      	movs	r0, r3
10053ea4:	f013 fdda 	bl	10067a5c <memset>
  BLEPLAT_CNTR_SmEnRadioConfig(smNo, 0x01);
10053ea8:	1dfb      	adds	r3, r7, #7
10053eaa:	781b      	ldrb	r3, [r3, #0]
10053eac:	2101      	movs	r1, #1
10053eae:	0018      	movs	r0, r3
10053eb0:	f7ff fe9c 	bl	10053bec <BLEPLAT_CNTR_SmEnRadioConfig>
}
10053eb4:	46c0      	nop			@ (mov r8, r8)
10053eb6:	46bd      	mov	sp, r7
10053eb8:	b002      	add	sp, #8
10053eba:	bd80      	pop	{r7, pc}
10053ebc:	200000dc 	.word	0x200000dc

10053ec0 <BLEPLAT_CNTR_SmSetAccessAddr>:

void BLEPLAT_CNTR_SmSetAccessAddr(uint8_t smNo, uint32_t x)
{
10053ec0:	b580      	push	{r7, lr}
10053ec2:	b082      	sub	sp, #8
10053ec4:	af00      	add	r7, sp, #0
10053ec6:	0002      	movs	r2, r0
10053ec8:	6039      	str	r1, [r7, #0]
10053eca:	1dfb      	adds	r3, r7, #7
10053ecc:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetAccessAddress(smNo, x);
10053ece:	683a      	ldr	r2, [r7, #0]
10053ed0:	1dfb      	adds	r3, r7, #7
10053ed2:	781b      	ldrb	r3, [r3, #0]
10053ed4:	0011      	movs	r1, r2
10053ed6:	0018      	movs	r0, r3
10053ed8:	f7ff f87e 	bl	10052fd8 <LL_RADIO_SetAccessAddress>
}
10053edc:	46c0      	nop			@ (mov r8, r8)
10053ede:	46bd      	mov	sp, r7
10053ee0:	b002      	add	sp, #8
10053ee2:	bd80      	pop	{r7, pc}

10053ee4 <BLEPLAT_CNTR_SmSetChannelMap>:

void BLEPLAT_CNTR_SmSetChannelMap(uint8_t smNo, uint8_t* chanMap)
{
10053ee4:	b580      	push	{r7, lr}
10053ee6:	b084      	sub	sp, #16
10053ee8:	af00      	add	r7, sp, #0
10053eea:	0002      	movs	r2, r0
10053eec:	6039      	str	r1, [r7, #0]
10053eee:	1dfb      	adds	r3, r7, #7
10053ef0:	701a      	strb	r2, [r3, #0]
    uint32_t value = (uint32_t)chanMap[0] | ((uint32_t)chanMap[1] << 8U);
10053ef2:	683b      	ldr	r3, [r7, #0]
10053ef4:	781b      	ldrb	r3, [r3, #0]
10053ef6:	001a      	movs	r2, r3
10053ef8:	683b      	ldr	r3, [r7, #0]
10053efa:	3301      	adds	r3, #1
10053efc:	781b      	ldrb	r3, [r3, #0]
10053efe:	021b      	lsls	r3, r3, #8
10053f00:	4313      	orrs	r3, r2
10053f02:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetUsedChannelFlags_15_0(smNo, value);
10053f04:	68fa      	ldr	r2, [r7, #12]
10053f06:	1dfb      	adds	r3, r7, #7
10053f08:	781b      	ldrb	r3, [r3, #0]
10053f0a:	0011      	movs	r1, r2
10053f0c:	0018      	movs	r0, r3
10053f0e:	f7ff f955 	bl	100531bc <LL_RADIO_SetUsedChannelFlags_15_0>
    value = (uint32_t)chanMap[2] | ((uint32_t)chanMap[3] << 8U) | ((uint32_t)chanMap[4] << 16U);
10053f12:	683b      	ldr	r3, [r7, #0]
10053f14:	3302      	adds	r3, #2
10053f16:	781b      	ldrb	r3, [r3, #0]
10053f18:	001a      	movs	r2, r3
10053f1a:	683b      	ldr	r3, [r7, #0]
10053f1c:	3303      	adds	r3, #3
10053f1e:	781b      	ldrb	r3, [r3, #0]
10053f20:	021b      	lsls	r3, r3, #8
10053f22:	431a      	orrs	r2, r3
10053f24:	683b      	ldr	r3, [r7, #0]
10053f26:	3304      	adds	r3, #4
10053f28:	781b      	ldrb	r3, [r3, #0]
10053f2a:	041b      	lsls	r3, r3, #16
10053f2c:	4313      	orrs	r3, r2
10053f2e:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetUsedChannelFlags_36_16(smNo, value);
10053f30:	68fa      	ldr	r2, [r7, #12]
10053f32:	1dfb      	adds	r3, r7, #7
10053f34:	781b      	ldrb	r3, [r3, #0]
10053f36:	0011      	movs	r1, r2
10053f38:	0018      	movs	r0, r3
10053f3a:	f7ff f979 	bl	10053230 <LL_RADIO_SetUsedChannelFlags_36_16>
}
10053f3e:	46c0      	nop			@ (mov r8, r8)
10053f40:	46bd      	mov	sp, r7
10053f42:	b004      	add	sp, #16
10053f44:	bd80      	pop	{r7, pc}

10053f46 <BLEPLAT_CNTR_SmSetCrcInit>:

void BLEPLAT_CNTR_SmSetCrcInit(uint8_t smNo, uint32_t x)
{
10053f46:	b580      	push	{r7, lr}
10053f48:	b082      	sub	sp, #8
10053f4a:	af00      	add	r7, sp, #0
10053f4c:	0002      	movs	r2, r0
10053f4e:	6039      	str	r1, [r7, #0]
10053f50:	1dfb      	adds	r3, r7, #7
10053f52:	701a      	strb	r2, [r3, #0]
  LL_RADIO_SetCRCInitializationValue(smNo, x);
10053f54:	683a      	ldr	r2, [r7, #0]
10053f56:	1dfb      	adds	r3, r7, #7
10053f58:	781b      	ldrb	r3, [r3, #0]
10053f5a:	0011      	movs	r1, r2
10053f5c:	0018      	movs	r0, r3
10053f5e:	f7ff f86d 	bl	1005303c <LL_RADIO_SetCRCInitializationValue>
}
10053f62:	46c0      	nop			@ (mov r8, r8)
10053f64:	46bd      	mov	sp, r7
10053f66:	b002      	add	sp, #8
10053f68:	bd80      	pop	{r7, pc}

10053f6a <BLEPLAT_CNTR_SmSetDataLength>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmSetDataLength(uint8_t smNo, uint8_t length)
{
10053f6a:	b580      	push	{r7, lr}
10053f6c:	b082      	sub	sp, #8
10053f6e:	af00      	add	r7, sp, #0
10053f70:	0002      	movs	r2, r0
10053f72:	1dfb      	adds	r3, r7, #7
10053f74:	701a      	strb	r2, [r3, #0]
10053f76:	1dbb      	adds	r3, r7, #6
10053f78:	1c0a      	adds	r2, r1, #0
10053f7a:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetMaximumReceiveLength(smNo, (uint32_t) length);
10053f7c:	1dbb      	adds	r3, r7, #6
10053f7e:	781a      	ldrb	r2, [r3, #0]
10053f80:	1dfb      	adds	r3, r7, #7
10053f82:	781b      	ldrb	r3, [r3, #0]
10053f84:	0011      	movs	r1, r2
10053f86:	0018      	movs	r0, r3
10053f88:	f7ff f87c 	bl	10053084 <LL_RADIO_SetMaximumReceiveLength>
}
10053f8c:	46c0      	nop			@ (mov r8, r8)
10053f8e:	46bd      	mov	sp, r7
10053f90:	b002      	add	sp, #8
10053f92:	bd80      	pop	{r7, pc}

10053f94 <BLEPLAT_CNTR_SmSetHopIncr>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SmSetHopIncr(uint8_t smNo, uint8_t x)
{
10053f94:	b580      	push	{r7, lr}
10053f96:	b082      	sub	sp, #8
10053f98:	af00      	add	r7, sp, #0
10053f9a:	0002      	movs	r2, r0
10053f9c:	1dfb      	adds	r3, r7, #7
10053f9e:	701a      	strb	r2, [r3, #0]
10053fa0:	1dbb      	adds	r3, r7, #6
10053fa2:	1c0a      	adds	r2, r1, #0
10053fa4:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetHopIncrement(smNo, (uint32_t) x);
10053fa6:	1dbb      	adds	r3, r7, #6
10053fa8:	781a      	ldrb	r2, [r3, #0]
10053faa:	1dfb      	adds	r3, r7, #7
10053fac:	781b      	ldrb	r3, [r3, #0]
10053fae:	0011      	movs	r1, r2
10053fb0:	0018      	movs	r0, r3
10053fb2:	f7ff f8c3 	bl	1005313c <LL_RADIO_SetHopIncrement>
}
10053fb6:	46c0      	nop			@ (mov r8, r8)
10053fb8:	46bd      	mov	sp, r7
10053fba:	b002      	add	sp, #8
10053fbc:	bd80      	pop	{r7, pc}

10053fbe <BLEPLAT_CNTR_SmSetRemapChan>:

void BLEPLAT_CNTR_SmSetRemapChan(uint8_t smNo, uint8_t chan)
{
10053fbe:	b580      	push	{r7, lr}
10053fc0:	b082      	sub	sp, #8
10053fc2:	af00      	add	r7, sp, #0
10053fc4:	0002      	movs	r2, r0
10053fc6:	1dfb      	adds	r3, r7, #7
10053fc8:	701a      	strb	r2, [r3, #0]
10053fca:	1dbb      	adds	r3, r7, #6
10053fcc:	1c0a      	adds	r2, r1, #0
10053fce:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRemapChannel(smNo, chan);
10053fd0:	1dbb      	adds	r3, r7, #6
10053fd2:	781a      	ldrb	r2, [r3, #0]
10053fd4:	1dfb      	adds	r3, r7, #7
10053fd6:	781b      	ldrb	r3, [r3, #0]
10053fd8:	0011      	movs	r1, r2
10053fda:	0018      	movs	r0, r3
10053fdc:	f7fe fd6a 	bl	10052ab4 <LL_RADIO_SetRemapChannel>
}
10053fe0:	46c0      	nop			@ (mov r8, r8)
10053fe2:	46bd      	mov	sp, r7
10053fe4:	b002      	add	sp, #8
10053fe6:	bd80      	pop	{r7, pc}

10053fe8 <BLEPLAT_CNTR_SmSetRxCount>:

void BLEPLAT_CNTR_SmSetRxCount(uint8_t smNo, uint32_t* packetCount)
{
10053fe8:	b580      	push	{r7, lr}
10053fea:	b084      	sub	sp, #16
10053fec:	af00      	add	r7, sp, #0
10053fee:	0002      	movs	r2, r0
10053ff0:	6039      	str	r1, [r7, #0]
10053ff2:	1dfb      	adds	r3, r7, #7
10053ff4:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetPacketCounterRx_23_0(smNo, (uint32_t) packetCount[0]);
10053ff6:	683b      	ldr	r3, [r7, #0]
10053ff8:	681a      	ldr	r2, [r3, #0]
10053ffa:	1dfb      	adds	r3, r7, #7
10053ffc:	781b      	ldrb	r3, [r3, #0]
10053ffe:	0011      	movs	r1, r2
10054000:	0018      	movs	r0, r3
10054002:	f7fe ff33 	bl	10052e6c <LL_RADIO_SetPacketCounterRx_23_0>
    uint32_t value = (uint32_t)(packetCount[1] << 8U) | (uint32_t)(packetCount[0] >> 24U);
10054006:	683b      	ldr	r3, [r7, #0]
10054008:	3304      	adds	r3, #4
1005400a:	681b      	ldr	r3, [r3, #0]
1005400c:	021a      	lsls	r2, r3, #8
1005400e:	683b      	ldr	r3, [r7, #0]
10054010:	681b      	ldr	r3, [r3, #0]
10054012:	0e1b      	lsrs	r3, r3, #24
10054014:	4313      	orrs	r3, r2
10054016:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
10054018:	68fa      	ldr	r2, [r7, #12]
1005401a:	1dfb      	adds	r3, r7, #7
1005401c:	781b      	ldrb	r3, [r3, #0]
1005401e:	0011      	movs	r1, r2
10054020:	0018      	movs	r0, r3
10054022:	f7fe ff5f 	bl	10052ee4 <LL_RADIO_SetPacketCounterRx_39_24>
}
10054026:	46c0      	nop			@ (mov r8, r8)
10054028:	46bd      	mov	sp, r7
1005402a:	b004      	add	sp, #16
1005402c:	bd80      	pop	{r7, pc}

1005402e <BLEPLAT_CNTR_SmSetRxCountDirectionBit>:

void BLEPLAT_CNTR_SmSetRxCountDirectionBit(uint8_t smNo)
{
1005402e:	b580      	push	{r7, lr}
10054030:	b084      	sub	sp, #16
10054032:	af00      	add	r7, sp, #0
10054034:	0002      	movs	r2, r0
10054036:	1dfb      	adds	r3, r7, #7
10054038:	701a      	strb	r2, [r3, #0]
    uint32_t value = LL_RADIO_GetPacketCounterRx_39_24(smNo) | 0x8000U;
1005403a:	1dfb      	adds	r3, r7, #7
1005403c:	781b      	ldrb	r3, [r3, #0]
1005403e:	0018      	movs	r0, r3
10054040:	f7fe ff74 	bl	10052f2c <LL_RADIO_GetPacketCounterRx_39_24>
10054044:	0002      	movs	r2, r0
10054046:	2380      	movs	r3, #128	@ 0x80
10054048:	021b      	lsls	r3, r3, #8
1005404a:	4313      	orrs	r3, r2
1005404c:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
1005404e:	68fa      	ldr	r2, [r7, #12]
10054050:	1dfb      	adds	r3, r7, #7
10054052:	781b      	ldrb	r3, [r3, #0]
10054054:	0011      	movs	r1, r2
10054056:	0018      	movs	r0, r3
10054058:	f7fe ff44 	bl	10052ee4 <LL_RADIO_SetPacketCounterRx_39_24>
}
1005405c:	46c0      	nop			@ (mov r8, r8)
1005405e:	46bd      	mov	sp, r7
10054060:	b004      	add	sp, #16
10054062:	bd80      	pop	{r7, pc}

10054064 <BLEPLAT_CNTR_SmSetRxMode>:

void BLEPLAT_CNTR_SmSetRxMode(uint8_t smNo)
{
10054064:	b580      	push	{r7, lr}
10054066:	b082      	sub	sp, #8
10054068:	af00      	add	r7, sp, #0
1005406a:	0002      	movs	r2, r0
1005406c:	1dfb      	adds	r3, r7, #7
1005406e:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Disable(smNo);
10054070:	1dfb      	adds	r3, r7, #7
10054072:	781b      	ldrb	r3, [r3, #0]
10054074:	0018      	movs	r0, r3
10054076:	f7fe fce3 	bl	10052a40 <LL_RADIO_TxMode_Disable>
}
1005407a:	46c0      	nop			@ (mov r8, r8)
1005407c:	46bd      	mov	sp, r7
1005407e:	b002      	add	sp, #8
10054080:	bd80      	pop	{r7, pc}

10054082 <BLEPLAT_CNTR_SmSetRxPacketPtr>:

void BLEPLAT_CNTR_SmSetRxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10054082:	b580      	push	{r7, lr}
10054084:	b082      	sub	sp, #8
10054086:	af00      	add	r7, sp, #0
10054088:	0002      	movs	r2, r0
1005408a:	6039      	str	r1, [r7, #0]
1005408c:	1dfb      	adds	r3, r7, #7
1005408e:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRcvPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
10054090:	683a      	ldr	r2, [r7, #0]
10054092:	1dfb      	adds	r3, r7, #7
10054094:	781b      	ldrb	r3, [r3, #0]
10054096:	0011      	movs	r1, r2
10054098:	0018      	movs	r0, r3
1005409a:	f7fe fe71 	bl	10052d80 <LL_RADIO_SetRcvPoint>
}
1005409e:	46c0      	nop			@ (mov r8, r8)
100540a0:	46bd      	mov	sp, r7
100540a2:	b002      	add	sp, #8
100540a4:	bd80      	pop	{r7, pc}

100540a6 <BLEPLAT_CNTR_SmSetRxPhy>:

void BLEPLAT_CNTR_SmSetRxPhy(uint8_t smNo, uint8_t rxPhy)
{
100540a6:	b580      	push	{r7, lr}
100540a8:	b082      	sub	sp, #8
100540aa:	af00      	add	r7, sp, #0
100540ac:	0002      	movs	r2, r0
100540ae:	1dfb      	adds	r3, r7, #7
100540b0:	701a      	strb	r2, [r3, #0]
100540b2:	1dbb      	adds	r3, r7, #6
100540b4:	1c0a      	adds	r2, r1, #0
100540b6:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetReceptionPhy(smNo, (uint32_t) rxPhy);
100540b8:	1dbb      	adds	r3, r7, #6
100540ba:	781a      	ldrb	r2, [r3, #0]
100540bc:	1dfb      	adds	r3, r7, #7
100540be:	781b      	ldrb	r3, [r3, #0]
100540c0:	0011      	movs	r1, r2
100540c2:	0018      	movs	r0, r3
100540c4:	f7fe fdfe 	bl	10052cc4 <LL_RADIO_SetReceptionPhy>
}
100540c8:	46c0      	nop			@ (mov r8, r8)
100540ca:	46bd      	mov	sp, r7
100540cc:	b002      	add	sp, #8
100540ce:	bd80      	pop	{r7, pc}

100540d0 <BLEPLAT_CNTR_SmSetTxCount>:

void BLEPLAT_CNTR_SmSetTxCount(uint8_t smNo, uint32_t* packetCount)
{
100540d0:	b580      	push	{r7, lr}
100540d2:	b082      	sub	sp, #8
100540d4:	af00      	add	r7, sp, #0
100540d6:	0002      	movs	r2, r0
100540d8:	6039      	str	r1, [r7, #0]
100540da:	1dfb      	adds	r3, r7, #7
100540dc:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetPacketCounterTx_31_0(smNo, (uint32_t) packetCount[0]);
100540de:	683b      	ldr	r3, [r7, #0]
100540e0:	681a      	ldr	r2, [r3, #0]
100540e2:	1dfb      	adds	r3, r7, #7
100540e4:	781b      	ldrb	r3, [r3, #0]
100540e6:	0011      	movs	r1, r2
100540e8:	0018      	movs	r0, r3
100540ea:	f7fe fe67 	bl	10052dbc <LL_RADIO_SetPacketCounterTx_31_0>
    LL_RADIO_SetPacketCounterTx_39_32(smNo, (uint32_t) packetCount[1]);
100540ee:	683b      	ldr	r3, [r7, #0]
100540f0:	3304      	adds	r3, #4
100540f2:	681a      	ldr	r2, [r3, #0]
100540f4:	1dfb      	adds	r3, r7, #7
100540f6:	781b      	ldrb	r3, [r3, #0]
100540f8:	0011      	movs	r1, r2
100540fa:	0018      	movs	r0, r3
100540fc:	f7fe fe7c 	bl	10052df8 <LL_RADIO_SetPacketCounterTx_39_32>
}
10054100:	46c0      	nop			@ (mov r8, r8)
10054102:	46bd      	mov	sp, r7
10054104:	b002      	add	sp, #8
10054106:	bd80      	pop	{r7, pc}

10054108 <BLEPLAT_CNTR_SmSetTxCountDirectionBit>:

void BLEPLAT_CNTR_SmSetTxCountDirectionBit(uint8_t smNo)
{
10054108:	b580      	push	{r7, lr}
1005410a:	b084      	sub	sp, #16
1005410c:	af00      	add	r7, sp, #0
1005410e:	0002      	movs	r2, r0
10054110:	1dfb      	adds	r3, r7, #7
10054112:	701a      	strb	r2, [r3, #0]
    uint32_t value =  (LL_RADIO_GetPacketCounterTx_39_32(smNo) | 0x00000080U);
10054114:	1dfb      	adds	r3, r7, #7
10054116:	781b      	ldrb	r3, [r3, #0]
10054118:	0018      	movs	r0, r3
1005411a:	f7fe fe91 	bl	10052e40 <LL_RADIO_GetPacketCounterTx_39_32>
1005411e:	0003      	movs	r3, r0
10054120:	2280      	movs	r2, #128	@ 0x80
10054122:	4313      	orrs	r3, r2
10054124:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterTx_39_32(smNo,  value);
10054126:	68fa      	ldr	r2, [r7, #12]
10054128:	1dfb      	adds	r3, r7, #7
1005412a:	781b      	ldrb	r3, [r3, #0]
1005412c:	0011      	movs	r1, r2
1005412e:	0018      	movs	r0, r3
10054130:	f7fe fe62 	bl	10052df8 <LL_RADIO_SetPacketCounterTx_39_32>
}
10054134:	46c0      	nop			@ (mov r8, r8)
10054136:	46bd      	mov	sp, r7
10054138:	b004      	add	sp, #16
1005413a:	bd80      	pop	{r7, pc}

1005413c <BLEPLAT_CNTR_SmSetTxMode>:

void BLEPLAT_CNTR_SmSetTxMode(uint8_t smNo)
{
1005413c:	b580      	push	{r7, lr}
1005413e:	b082      	sub	sp, #8
10054140:	af00      	add	r7, sp, #0
10054142:	0002      	movs	r2, r0
10054144:	1dfb      	adds	r3, r7, #7
10054146:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Enable(smNo);
10054148:	1dfb      	adds	r3, r7, #7
1005414a:	781b      	ldrb	r3, [r3, #0]
1005414c:	0018      	movs	r0, r3
1005414e:	f7fe fc59 	bl	10052a04 <LL_RADIO_TxMode_Enable>
}
10054152:	46c0      	nop			@ (mov r8, r8)
10054154:	46bd      	mov	sp, r7
10054156:	b002      	add	sp, #8
10054158:	bd80      	pop	{r7, pc}

1005415a <BLEPLAT_CNTR_SmSetTxPacketPtr>:

void BLEPLAT_CNTR_SmSetTxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1005415a:	b580      	push	{r7, lr}
1005415c:	b082      	sub	sp, #8
1005415e:	af00      	add	r7, sp, #0
10054160:	0002      	movs	r2, r0
10054162:	6039      	str	r1, [r7, #0]
10054164:	1dfb      	adds	r3, r7, #7
10054166:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTxPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
10054168:	683a      	ldr	r2, [r7, #0]
1005416a:	1dfb      	adds	r3, r7, #7
1005416c:	781b      	ldrb	r3, [r3, #0]
1005416e:	0011      	movs	r1, r2
10054170:	0018      	movs	r0, r3
10054172:	f7fe fde7 	bl	10052d44 <LL_RADIO_SetTxPoint>
}
10054176:	46c0      	nop			@ (mov r8, r8)
10054178:	46bd      	mov	sp, r7
1005417a:	b002      	add	sp, #8
1005417c:	bd80      	pop	{r7, pc}

1005417e <BLEPLAT_CNTR_SmSetTxPhy>:

void BLEPLAT_CNTR_SmSetTxPhy(uint8_t smNo, uint8_t txPhy)
{
1005417e:	b580      	push	{r7, lr}
10054180:	b082      	sub	sp, #8
10054182:	af00      	add	r7, sp, #0
10054184:	0002      	movs	r2, r0
10054186:	1dfb      	adds	r3, r7, #7
10054188:	701a      	strb	r2, [r3, #0]
1005418a:	1dbb      	adds	r3, r7, #6
1005418c:	1c0a      	adds	r2, r1, #0
1005418e:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTransmissionPhy(smNo, (uint32_t) txPhy);
10054190:	1dbb      	adds	r3, r7, #6
10054192:	781a      	ldrb	r2, [r3, #0]
10054194:	1dfb      	adds	r3, r7, #7
10054196:	781b      	ldrb	r3, [r3, #0]
10054198:	0011      	movs	r1, r2
1005419a:	0018      	movs	r0, r3
1005419c:	f7fe fd2a 	bl	10052bf4 <LL_RADIO_SetTransmissionPhy>
}
100541a0:	46c0      	nop			@ (mov r8, r8)
100541a2:	46bd      	mov	sp, r7
100541a4:	b002      	add	sp, #8
100541a6:	bd80      	pop	{r7, pc}

100541a8 <BLEPLAT_CNTR_SmSetTxPwr>:
#endif
}

/* Consider PA Level 32 the one used to enable high power. */
void BLEPLAT_CNTR_SmSetTxPwr(uint8_t smNo, uint8_t paLevel)
{
100541a8:	b580      	push	{r7, lr}
100541aa:	b082      	sub	sp, #8
100541ac:	af00      	add	r7, sp, #0
100541ae:	0002      	movs	r2, r0
100541b0:	1dfb      	adds	r3, r7, #7
100541b2:	701a      	strb	r2, [r3, #0]
100541b4:	1dbb      	adds	r3, r7, #6
100541b6:	1c0a      	adds	r2, r1, #0
100541b8:	701a      	strb	r2, [r3, #0]
  {
    LL_RADIO_TxHp_Disable(smNo);
  }
#endif

  LL_RADIO_SetPAPower(smNo, (uint32_t) paLevel);
100541ba:	1dbb      	adds	r3, r7, #6
100541bc:	781a      	ldrb	r2, [r3, #0]
100541be:	1dfb      	adds	r3, r7, #7
100541c0:	781b      	ldrb	r3, [r3, #0]
100541c2:	0011      	movs	r1, r2
100541c4:	0018      	movs	r0, r3
100541c6:	f7fe ff7f 	bl	100530c8 <LL_RADIO_SetPAPower>
}
100541ca:	46c0      	nop			@ (mov r8, r8)
100541cc:	46bd      	mov	sp, r7
100541ce:	b002      	add	sp, #8
100541d0:	bd80      	pop	{r7, pc}

100541d2 <BLEPLAT_CNTR_SmSetUnmappedChan>:

void BLEPLAT_CNTR_SmSetUnmappedChan(uint8_t smNo, uint8_t chan)
{
100541d2:	b580      	push	{r7, lr}
100541d4:	b082      	sub	sp, #8
100541d6:	af00      	add	r7, sp, #0
100541d8:	0002      	movs	r2, r0
100541da:	1dfb      	adds	r3, r7, #7
100541dc:	701a      	strb	r2, [r3, #0]
100541de:	1dbb      	adds	r3, r7, #6
100541e0:	1c0a      	adds	r2, r1, #0
100541e2:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetUnmappedChannel(smNo, (uint32_t) chan);
100541e4:	1dbb      	adds	r3, r7, #6
100541e6:	781a      	ldrb	r2, [r3, #0]
100541e8:	1dfb      	adds	r3, r7, #7
100541ea:	781b      	ldrb	r3, [r3, #0]
100541ec:	0011      	movs	r1, r2
100541ee:	0018      	movs	r0, r3
100541f0:	f7fe fba8 	bl	10052944 <LL_RADIO_SetUnmappedChannel>
}
100541f4:	46c0      	nop			@ (mov r8, r8)
100541f6:	46bd      	mov	sp, r7
100541f8:	b002      	add	sp, #8
100541fa:	bd80      	pop	{r7, pc}

100541fc <BLEPLAT_CNTR_SmToggleNesn>:

void BLEPLAT_CNTR_SmToggleNesn(uint8_t smNo)
{
100541fc:	b580      	push	{r7, lr}
100541fe:	b082      	sub	sp, #8
10054200:	af00      	add	r7, sp, #0
10054202:	0002      	movs	r2, r0
10054204:	1dfb      	adds	r3, r7, #7
10054206:	701a      	strb	r2, [r3, #0]
  LL_RADIO_ToggleNextExpectedSequenceNumber(smNo);
10054208:	1dfb      	adds	r3, r7, #7
1005420a:	781b      	ldrb	r3, [r3, #0]
1005420c:	0018      	movs	r0, r3
1005420e:	f7fe fc91 	bl	10052b34 <LL_RADIO_ToggleNextExpectedSequenceNumber>
}
10054212:	46c0      	nop			@ (mov r8, r8)
10054214:	46bd      	mov	sp, r7
10054216:	b002      	add	sp, #8
10054218:	bd80      	pop	{r7, pc}

1005421a <BLEPLAT_CNTR_DemodDelaySt>:
{
    return (uint32_t)(x - y);
}

uint8_t BLEPLAT_CNTR_DemodDelaySt(uint8_t RxPHY)
{
1005421a:	b580      	push	{r7, lr}
1005421c:	b082      	sub	sp, #8
1005421e:	af00      	add	r7, sp, #0
10054220:	0002      	movs	r2, r0
10054222:	1dfb      	adds	r3, r7, #7
10054224:	701a      	strb	r2, [r3, #0]
    return (uint8_t)((LL_PHY_CODED == RxPHY) ? 0x9DU : 0x12U);
10054226:	1dfb      	adds	r3, r7, #7
10054228:	781b      	ldrb	r3, [r3, #0]
1005422a:	2b04      	cmp	r3, #4
1005422c:	d101      	bne.n	10054232 <BLEPLAT_CNTR_DemodDelaySt+0x18>
1005422e:	239d      	movs	r3, #157	@ 0x9d
10054230:	e000      	b.n	10054234 <BLEPLAT_CNTR_DemodDelaySt+0x1a>
10054232:	2312      	movs	r3, #18
}
10054234:	0018      	movs	r0, r3
10054236:	46bd      	mov	sp, r7
10054238:	b002      	add	sp, #8
1005423a:	bd80      	pop	{r7, pc}

1005423c <APP_DEBUG_SIGNAL_SET>:
/****************************/
/** Application debug APIs **/
/****************************/

void APP_DEBUG_SIGNAL_SET(app_debug_signal_t signal)
{
1005423c:	b580      	push	{r7, lr}
1005423e:	b082      	sub	sp, #8
10054240:	af00      	add	r7, sp, #0
10054242:	0002      	movs	r2, r0
10054244:	1dfb      	adds	r3, r7, #7
10054246:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10054248:	46c0      	nop			@ (mov r8, r8)
1005424a:	46bd      	mov	sp, r7
1005424c:	b002      	add	sp, #8
1005424e:	bd80      	pop	{r7, pc}

10054250 <APP_DEBUG_SIGNAL_RESET>:
void APP_DEBUG_SIGNAL_RESET(app_debug_signal_t signal)
{
10054250:	b580      	push	{r7, lr}
10054252:	b082      	sub	sp, #8
10054254:	af00      	add	r7, sp, #0
10054256:	0002      	movs	r2, r0
10054258:	1dfb      	adds	r3, r7, #7
1005425a:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_RESET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
1005425c:	46c0      	nop			@ (mov r8, r8)
1005425e:	46bd      	mov	sp, r7
10054260:	b002      	add	sp, #8
10054262:	bd80      	pop	{r7, pc}

10054264 <RT_DEBUG_GPIO_Init>:
/*******************************/
/** Debug GPIO Initialization **/
/*******************************/

void RT_DEBUG_GPIO_Init(void)
{
10054264:	b580      	push	{r7, lr}
10054266:	af00      	add	r7, sp, #0
      GPIO_InitStruct.Pin = general_debug_table[cpt].GPIO_pin;
      HAL_GPIO_Init(general_debug_table[cpt].GPIO_port, &GPIO_InitStruct);
    }
  }
#endif /* RT_DEBUG_GPIO_MODULE */
}
10054268:	46c0      	nop			@ (mov r8, r8)
1005426a:	46bd      	mov	sp, r7
1005426c:	bd80      	pop	{r7, pc}
	...

10054270 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
10054270:	b580      	push	{r7, lr}
10054272:	b090      	sub	sp, #64	@ 0x40
10054274:	af00      	add	r7, sp, #0
10054276:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
10054278:	4b75      	ldr	r3, [pc, #468]	@ (10054450 <UTIL_SEQ_Run+0x1e0>)
1005427a:	681b      	ldr	r3, [r3, #0]
1005427c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
1005427e:	4b74      	ldr	r3, [pc, #464]	@ (10054450 <UTIL_SEQ_Run+0x1e0>)
10054280:	681b      	ldr	r3, [r3, #0]
10054282:	687a      	ldr	r2, [r7, #4]
10054284:	401a      	ands	r2, r3
10054286:	4b72      	ldr	r3, [pc, #456]	@ (10054450 <UTIL_SEQ_Run+0x1e0>)
10054288:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
1005428a:	4b72      	ldr	r3, [pc, #456]	@ (10054454 <UTIL_SEQ_Run+0x1e4>)
1005428c:	681b      	ldr	r3, [r3, #0]
1005428e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
10054290:	4b71      	ldr	r3, [pc, #452]	@ (10054458 <UTIL_SEQ_Run+0x1e8>)
10054292:	681b      	ldr	r3, [r3, #0]
10054294:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
10054296:	4b71      	ldr	r3, [pc, #452]	@ (1005445c <UTIL_SEQ_Run+0x1ec>)
10054298:	681b      	ldr	r3, [r3, #0]
1005429a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
1005429c:	4b70      	ldr	r3, [pc, #448]	@ (10054460 <UTIL_SEQ_Run+0x1f0>)
1005429e:	681b      	ldr	r3, [r3, #0]
100542a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
100542a2:	e090      	b.n	100543c6 <UTIL_SEQ_Run+0x156>
  {
    counter = 0U;
100542a4:	2300      	movs	r3, #0
100542a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
100542a8:	e002      	b.n	100542b0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
100542aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100542ac:	3301      	adds	r3, #1
100542ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
100542b0:	4b6c      	ldr	r3, [pc, #432]	@ (10054464 <UTIL_SEQ_Run+0x1f4>)
100542b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100542b4:	00d2      	lsls	r2, r2, #3
100542b6:	58d3      	ldr	r3, [r2, r3]
100542b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100542ba:	401a      	ands	r2, r3
100542bc:	4b64      	ldr	r3, [pc, #400]	@ (10054450 <UTIL_SEQ_Run+0x1e0>)
100542be:	681b      	ldr	r3, [r3, #0]
100542c0:	4013      	ands	r3, r2
100542c2:	d0f2      	beq.n	100542aa <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
100542c4:	4b67      	ldr	r3, [pc, #412]	@ (10054464 <UTIL_SEQ_Run+0x1f4>)
100542c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100542c8:	00d2      	lsls	r2, r2, #3
100542ca:	58d3      	ldr	r3, [r2, r3]
100542cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100542ce:	401a      	ands	r2, r3
100542d0:	4b5f      	ldr	r3, [pc, #380]	@ (10054450 <UTIL_SEQ_Run+0x1e0>)
100542d2:	681b      	ldr	r3, [r3, #0]
100542d4:	4013      	ands	r3, r2
100542d6:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
100542d8:	4a62      	ldr	r2, [pc, #392]	@ (10054464 <UTIL_SEQ_Run+0x1f4>)
100542da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100542dc:	00db      	lsls	r3, r3, #3
100542de:	18d3      	adds	r3, r2, r3
100542e0:	3304      	adds	r3, #4
100542e2:	681b      	ldr	r3, [r3, #0]
100542e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100542e6:	4013      	ands	r3, r2
100542e8:	d107      	bne.n	100542fa <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
100542ea:	4a5e      	ldr	r2, [pc, #376]	@ (10054464 <UTIL_SEQ_Run+0x1f4>)
100542ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100542ee:	00db      	lsls	r3, r3, #3
100542f0:	18d3      	adds	r3, r2, r3
100542f2:	3304      	adds	r3, #4
100542f4:	2201      	movs	r2, #1
100542f6:	4252      	negs	r2, r2
100542f8:	601a      	str	r2, [r3, #0]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
100542fa:	4a5a      	ldr	r2, [pc, #360]	@ (10054464 <UTIL_SEQ_Run+0x1f4>)
100542fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100542fe:	00db      	lsls	r3, r3, #3
10054300:	18d3      	adds	r3, r2, r3
10054302:	3304      	adds	r3, #4
10054304:	681b      	ldr	r3, [r3, #0]
10054306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10054308:	4013      	ands	r3, r2
1005430a:	0018      	movs	r0, r3
1005430c:	f000 f97c 	bl	10054608 <SEQ_BitPosition>
10054310:	0003      	movs	r3, r0
10054312:	001a      	movs	r2, r3
10054314:	4b54      	ldr	r3, [pc, #336]	@ (10054468 <UTIL_SEQ_Run+0x1f8>)
10054316:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
10054318:	4a52      	ldr	r2, [pc, #328]	@ (10054464 <UTIL_SEQ_Run+0x1f4>)
1005431a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1005431c:	00db      	lsls	r3, r3, #3
1005431e:	18d3      	adds	r3, r2, r3
10054320:	3304      	adds	r3, #4
10054322:	681a      	ldr	r2, [r3, #0]
10054324:	4b50      	ldr	r3, [pc, #320]	@ (10054468 <UTIL_SEQ_Run+0x1f8>)
10054326:	681b      	ldr	r3, [r3, #0]
10054328:	2101      	movs	r1, #1
1005432a:	4099      	lsls	r1, r3
1005432c:	000b      	movs	r3, r1
1005432e:	43db      	mvns	r3, r3
10054330:	401a      	ands	r2, r3
10054332:	494c      	ldr	r1, [pc, #304]	@ (10054464 <UTIL_SEQ_Run+0x1f4>)
10054334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10054336:	00db      	lsls	r3, r3, #3
10054338:	18cb      	adds	r3, r1, r3
1005433a:	3304      	adds	r3, #4
1005433c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1005433e:	f3ef 8310 	mrs	r3, PRIMASK
10054342:	61bb      	str	r3, [r7, #24]
  return(result);
10054344:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10054346:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
10054348:	b672      	cpsid	i
}
1005434a:	46c0      	nop			@ (mov r8, r8)
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
1005434c:	4b46      	ldr	r3, [pc, #280]	@ (10054468 <UTIL_SEQ_Run+0x1f8>)
1005434e:	681b      	ldr	r3, [r3, #0]
10054350:	2201      	movs	r2, #1
10054352:	409a      	lsls	r2, r3
10054354:	0013      	movs	r3, r2
10054356:	43da      	mvns	r2, r3
10054358:	4b3e      	ldr	r3, [pc, #248]	@ (10054454 <UTIL_SEQ_Run+0x1e4>)
1005435a:	681b      	ldr	r3, [r3, #0]
1005435c:	401a      	ands	r2, r3
1005435e:	4b3d      	ldr	r3, [pc, #244]	@ (10054454 <UTIL_SEQ_Run+0x1e4>)
10054360:	601a      	str	r2, [r3, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
10054362:	2302      	movs	r3, #2
10054364:	63fb      	str	r3, [r7, #60]	@ 0x3c
10054366:	e013      	b.n	10054390 <UTIL_SEQ_Run+0x120>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
10054368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1005436a:	1e5a      	subs	r2, r3, #1
1005436c:	4b3d      	ldr	r3, [pc, #244]	@ (10054464 <UTIL_SEQ_Run+0x1f4>)
1005436e:	00d2      	lsls	r2, r2, #3
10054370:	58d1      	ldr	r1, [r2, r3]
10054372:	4b3d      	ldr	r3, [pc, #244]	@ (10054468 <UTIL_SEQ_Run+0x1f8>)
10054374:	681b      	ldr	r3, [r3, #0]
10054376:	2201      	movs	r2, #1
10054378:	409a      	lsls	r2, r3
1005437a:	0013      	movs	r3, r2
1005437c:	43db      	mvns	r3, r3
1005437e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10054380:	3a01      	subs	r2, #1
10054382:	4019      	ands	r1, r3
10054384:	4b37      	ldr	r3, [pc, #220]	@ (10054464 <UTIL_SEQ_Run+0x1f4>)
10054386:	00d2      	lsls	r2, r2, #3
10054388:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
1005438a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1005438c:	3b01      	subs	r3, #1
1005438e:	63fb      	str	r3, [r7, #60]	@ 0x3c
10054390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10054392:	2b00      	cmp	r3, #0
10054394:	d1e8      	bne.n	10054368 <UTIL_SEQ_Run+0xf8>
10054396:	6a3b      	ldr	r3, [r7, #32]
10054398:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005439a:	697b      	ldr	r3, [r7, #20]
1005439c:	f383 8810 	msr	PRIMASK, r3
}
100543a0:	46c0      	nop			@ (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
100543a2:	4b31      	ldr	r3, [pc, #196]	@ (10054468 <UTIL_SEQ_Run+0x1f8>)
100543a4:	681a      	ldr	r2, [r3, #0]
100543a6:	4b31      	ldr	r3, [pc, #196]	@ (1005446c <UTIL_SEQ_Run+0x1fc>)
100543a8:	0092      	lsls	r2, r2, #2
100543aa:	58d3      	ldr	r3, [r2, r3]
100543ac:	4798      	blx	r3

    local_taskset = TaskSet;
100543ae:	4b29      	ldr	r3, [pc, #164]	@ (10054454 <UTIL_SEQ_Run+0x1e4>)
100543b0:	681b      	ldr	r3, [r3, #0]
100543b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
100543b4:	4b28      	ldr	r3, [pc, #160]	@ (10054458 <UTIL_SEQ_Run+0x1e8>)
100543b6:	681b      	ldr	r3, [r3, #0]
100543b8:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
100543ba:	4b28      	ldr	r3, [pc, #160]	@ (1005445c <UTIL_SEQ_Run+0x1ec>)
100543bc:	681b      	ldr	r3, [r3, #0]
100543be:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
100543c0:	4b27      	ldr	r3, [pc, #156]	@ (10054460 <UTIL_SEQ_Run+0x1f0>)
100543c2:	681b      	ldr	r3, [r3, #0]
100543c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
100543c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100543c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100543ca:	401a      	ands	r2, r3
100543cc:	4b20      	ldr	r3, [pc, #128]	@ (10054450 <UTIL_SEQ_Run+0x1e0>)
100543ce:	681b      	ldr	r3, [r3, #0]
100543d0:	4013      	ands	r3, r2
100543d2:	d004      	beq.n	100543de <UTIL_SEQ_Run+0x16e>
100543d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100543d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
100543d8:	4013      	ands	r3, r2
100543da:	d100      	bne.n	100543de <UTIL_SEQ_Run+0x16e>
100543dc:	e762      	b.n	100542a4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
100543de:	4b22      	ldr	r3, [pc, #136]	@ (10054468 <UTIL_SEQ_Run+0x1f8>)
100543e0:	2201      	movs	r2, #1
100543e2:	4252      	negs	r2, r2
100543e4:	601a      	str	r2, [r3, #0]
  /* if a waited event is present, ignore the IDLE sequence */
  if ((local_evtset & EvtWaited)== 0U)
100543e6:	4b1e      	ldr	r3, [pc, #120]	@ (10054460 <UTIL_SEQ_Run+0x1f0>)
100543e8:	681b      	ldr	r3, [r3, #0]
100543ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100543ec:	4013      	ands	r3, r2
100543ee:	d127      	bne.n	10054440 <UTIL_SEQ_Run+0x1d0>
  {
    UTIL_SEQ_PreIdle( );
100543f0:	f7f2 fa94 	bl	1004691c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100543f4:	f3ef 8310 	mrs	r3, PRIMASK
100543f8:	613b      	str	r3, [r7, #16]
  return(result);
100543fa:	693b      	ldr	r3, [r7, #16]

    UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
100543fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
100543fe:	b672      	cpsid	i
}
10054400:	46c0      	nop			@ (mov r8, r8)
    local_taskset = TaskSet;
10054402:	4b14      	ldr	r3, [pc, #80]	@ (10054454 <UTIL_SEQ_Run+0x1e4>)
10054404:	681b      	ldr	r3, [r3, #0]
10054406:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
10054408:	4b13      	ldr	r3, [pc, #76]	@ (10054458 <UTIL_SEQ_Run+0x1e8>)
1005440a:	681b      	ldr	r3, [r3, #0]
1005440c:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
1005440e:	4b13      	ldr	r3, [pc, #76]	@ (1005445c <UTIL_SEQ_Run+0x1ec>)
10054410:	681b      	ldr	r3, [r3, #0]
10054412:	633b      	str	r3, [r7, #48]	@ 0x30
    if ((local_taskset & local_taskmask & SuperMask) == 0U)
10054414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10054416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10054418:	401a      	ands	r2, r3
1005441a:	4b0d      	ldr	r3, [pc, #52]	@ (10054450 <UTIL_SEQ_Run+0x1e0>)
1005441c:	681b      	ldr	r3, [r3, #0]
1005441e:	4013      	ands	r3, r2
10054420:	d106      	bne.n	10054430 <UTIL_SEQ_Run+0x1c0>
    {
      if ((local_evtset & EvtWaited)== 0U)
10054422:	4b0f      	ldr	r3, [pc, #60]	@ (10054460 <UTIL_SEQ_Run+0x1f0>)
10054424:	681b      	ldr	r3, [r3, #0]
10054426:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10054428:	4013      	ands	r3, r2
1005442a:	d101      	bne.n	10054430 <UTIL_SEQ_Run+0x1c0>
      {
        UTIL_SEQ_Idle( );
1005442c:	f7f2 fa7b 	bl	10046926 <UTIL_SEQ_Idle>
10054430:	69fb      	ldr	r3, [r7, #28]
10054432:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10054434:	68fb      	ldr	r3, [r7, #12]
10054436:	f383 8810 	msr	PRIMASK, r3
}
1005443a:	46c0      	nop			@ (mov r8, r8)
      }
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

    UTIL_SEQ_PostIdle( );
1005443c:	f000 f8de 	bl	100545fc <UTIL_SEQ_PostIdle>
  }

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
10054440:	4b03      	ldr	r3, [pc, #12]	@ (10054450 <UTIL_SEQ_Run+0x1e0>)
10054442:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10054444:	601a      	str	r2, [r3, #0]

  return;
10054446:	46c0      	nop			@ (mov r8, r8)
}
10054448:	46bd      	mov	sp, r7
1005444a:	b010      	add	sp, #64	@ 0x40
1005444c:	bd80      	pop	{r7, pc}
1005444e:	46c0      	nop			@ (mov r8, r8)
10054450:	200028a8 	.word	0x200028a8
10054454:	20002378 	.word	0x20002378
10054458:	2000237c 	.word	0x2000237c
1005445c:	200028a4 	.word	0x200028a4
10054460:	20002380 	.word	0x20002380
10054464:	20002408 	.word	0x20002408
10054468:	20002384 	.word	0x20002384
1005446c:	20002388 	.word	0x20002388

10054470 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
10054470:	b580      	push	{r7, lr}
10054472:	b088      	sub	sp, #32
10054474:	af00      	add	r7, sp, #0
10054476:	60f8      	str	r0, [r7, #12]
10054478:	60b9      	str	r1, [r7, #8]
1005447a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1005447c:	f3ef 8310 	mrs	r3, PRIMASK
10054480:	617b      	str	r3, [r7, #20]
  return(result);
10054482:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
10054484:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10054486:	b672      	cpsid	i
}
10054488:	46c0      	nop			@ (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
1005448a:	68fb      	ldr	r3, [r7, #12]
1005448c:	0018      	movs	r0, r3
1005448e:	f000 f8bb 	bl	10054608 <SEQ_BitPosition>
10054492:	0003      	movs	r3, r0
10054494:	001a      	movs	r2, r3
10054496:	4b07      	ldr	r3, [pc, #28]	@ (100544b4 <UTIL_SEQ_RegTask+0x44>)
10054498:	0092      	lsls	r2, r2, #2
1005449a:	6879      	ldr	r1, [r7, #4]
1005449c:	50d1      	str	r1, [r2, r3]
1005449e:	69fb      	ldr	r3, [r7, #28]
100544a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100544a2:	69bb      	ldr	r3, [r7, #24]
100544a4:	f383 8810 	msr	PRIMASK, r3
}
100544a8:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
100544aa:	46c0      	nop			@ (mov r8, r8)
}
100544ac:	46bd      	mov	sp, r7
100544ae:	b008      	add	sp, #32
100544b0:	bd80      	pop	{r7, pc}
100544b2:	46c0      	nop			@ (mov r8, r8)
100544b4:	20002388 	.word	0x20002388

100544b8 <UTIL_SEQ_SetTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
100544b8:	b580      	push	{r7, lr}
100544ba:	b086      	sub	sp, #24
100544bc:	af00      	add	r7, sp, #0
100544be:	6078      	str	r0, [r7, #4]
100544c0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100544c2:	f3ef 8310 	mrs	r3, PRIMASK
100544c6:	60fb      	str	r3, [r7, #12]
  return(result);
100544c8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
100544ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
100544cc:	b672      	cpsid	i
}
100544ce:	46c0      	nop			@ (mov r8, r8)

  TaskSet |= TaskId_bm;
100544d0:	4b0d      	ldr	r3, [pc, #52]	@ (10054508 <UTIL_SEQ_SetTask+0x50>)
100544d2:	681a      	ldr	r2, [r3, #0]
100544d4:	687b      	ldr	r3, [r7, #4]
100544d6:	431a      	orrs	r2, r3
100544d8:	4b0b      	ldr	r3, [pc, #44]	@ (10054508 <UTIL_SEQ_SetTask+0x50>)
100544da:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
100544dc:	4b0b      	ldr	r3, [pc, #44]	@ (1005450c <UTIL_SEQ_SetTask+0x54>)
100544de:	683a      	ldr	r2, [r7, #0]
100544e0:	00d2      	lsls	r2, r2, #3
100544e2:	58d2      	ldr	r2, [r2, r3]
100544e4:	687b      	ldr	r3, [r7, #4]
100544e6:	431a      	orrs	r2, r3
100544e8:	0011      	movs	r1, r2
100544ea:	4b08      	ldr	r3, [pc, #32]	@ (1005450c <UTIL_SEQ_SetTask+0x54>)
100544ec:	683a      	ldr	r2, [r7, #0]
100544ee:	00d2      	lsls	r2, r2, #3
100544f0:	50d1      	str	r1, [r2, r3]
100544f2:	697b      	ldr	r3, [r7, #20]
100544f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100544f6:	693b      	ldr	r3, [r7, #16]
100544f8:	f383 8810 	msr	PRIMASK, r3
}
100544fc:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
100544fe:	46c0      	nop			@ (mov r8, r8)
}
10054500:	46bd      	mov	sp, r7
10054502:	b006      	add	sp, #24
10054504:	bd80      	pop	{r7, pc}
10054506:	46c0      	nop			@ (mov r8, r8)
10054508:	20002378 	.word	0x20002378
1005450c:	20002408 	.word	0x20002408

10054510 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
10054510:	b580      	push	{r7, lr}
10054512:	b086      	sub	sp, #24
10054514:	af00      	add	r7, sp, #0
10054516:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10054518:	f3ef 8310 	mrs	r3, PRIMASK
1005451c:	60fb      	str	r3, [r7, #12]
  return(result);
1005451e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10054520:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
10054522:	b672      	cpsid	i
}
10054524:	46c0      	nop			@ (mov r8, r8)

  EvtSet |= EvtId_bm;
10054526:	4b08      	ldr	r3, [pc, #32]	@ (10054548 <UTIL_SEQ_SetEvt+0x38>)
10054528:	681a      	ldr	r2, [r3, #0]
1005452a:	687b      	ldr	r3, [r7, #4]
1005452c:	431a      	orrs	r2, r3
1005452e:	4b06      	ldr	r3, [pc, #24]	@ (10054548 <UTIL_SEQ_SetEvt+0x38>)
10054530:	601a      	str	r2, [r3, #0]
10054532:	697b      	ldr	r3, [r7, #20]
10054534:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10054536:	693b      	ldr	r3, [r7, #16]
10054538:	f383 8810 	msr	PRIMASK, r3
}
1005453c:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
1005453e:	46c0      	nop			@ (mov r8, r8)
}
10054540:	46bd      	mov	sp, r7
10054542:	b006      	add	sp, #24
10054544:	bd80      	pop	{r7, pc}
10054546:	46c0      	nop			@ (mov r8, r8)
10054548:	2000237c 	.word	0x2000237c

1005454c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
1005454c:	b580      	push	{r7, lr}
1005454e:	b088      	sub	sp, #32
10054550:	af00      	add	r7, sp, #0
10054552:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
10054554:	4b1f      	ldr	r3, [pc, #124]	@ (100545d4 <UTIL_SEQ_WaitEvt+0x88>)
10054556:	681b      	ldr	r3, [r3, #0]
10054558:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
1005455a:	4b1e      	ldr	r3, [pc, #120]	@ (100545d4 <UTIL_SEQ_WaitEvt+0x88>)
1005455c:	681b      	ldr	r3, [r3, #0]
1005455e:	3301      	adds	r3, #1
10054560:	d102      	bne.n	10054568 <UTIL_SEQ_WaitEvt+0x1c>
  {
    wait_task_idx = 0u;
10054562:	2300      	movs	r3, #0
10054564:	61fb      	str	r3, [r7, #28]
10054566:	e005      	b.n	10054574 <UTIL_SEQ_WaitEvt+0x28>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
10054568:	4b1a      	ldr	r3, [pc, #104]	@ (100545d4 <UTIL_SEQ_WaitEvt+0x88>)
1005456a:	681b      	ldr	r3, [r3, #0]
1005456c:	2201      	movs	r2, #1
1005456e:	409a      	lsls	r2, r3
10054570:	0013      	movs	r3, r2
10054572:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
10054574:	4b18      	ldr	r3, [pc, #96]	@ (100545d8 <UTIL_SEQ_WaitEvt+0x8c>)
10054576:	681b      	ldr	r3, [r3, #0]
10054578:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
1005457a:	4b17      	ldr	r3, [pc, #92]	@ (100545d8 <UTIL_SEQ_WaitEvt+0x8c>)
1005457c:	687a      	ldr	r2, [r7, #4]
1005457e:	601a      	str	r2, [r3, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
10054580:	e005      	b.n	1005458e <UTIL_SEQ_WaitEvt+0x42>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
10054582:	687a      	ldr	r2, [r7, #4]
10054584:	69fb      	ldr	r3, [r7, #28]
10054586:	0011      	movs	r1, r2
10054588:	0018      	movs	r0, r3
1005458a:	f000 f829 	bl	100545e0 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
1005458e:	4b13      	ldr	r3, [pc, #76]	@ (100545dc <UTIL_SEQ_WaitEvt+0x90>)
10054590:	681b      	ldr	r3, [r3, #0]
10054592:	687a      	ldr	r2, [r7, #4]
10054594:	4013      	ands	r3, r2
10054596:	d0f4      	beq.n	10054582 <UTIL_SEQ_WaitEvt+0x36>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
10054598:	4b0e      	ldr	r3, [pc, #56]	@ (100545d4 <UTIL_SEQ_WaitEvt+0x88>)
1005459a:	69ba      	ldr	r2, [r7, #24]
1005459c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1005459e:	f3ef 8310 	mrs	r3, PRIMASK
100545a2:	60bb      	str	r3, [r7, #8]
  return(result);
100545a4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
100545a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
100545a8:	b672      	cpsid	i
}
100545aa:	46c0      	nop			@ (mov r8, r8)

  EvtSet &= (~EvtId_bm);
100545ac:	687b      	ldr	r3, [r7, #4]
100545ae:	43da      	mvns	r2, r3
100545b0:	4b0a      	ldr	r3, [pc, #40]	@ (100545dc <UTIL_SEQ_WaitEvt+0x90>)
100545b2:	681b      	ldr	r3, [r3, #0]
100545b4:	401a      	ands	r2, r3
100545b6:	4b09      	ldr	r3, [pc, #36]	@ (100545dc <UTIL_SEQ_WaitEvt+0x90>)
100545b8:	601a      	str	r2, [r3, #0]
100545ba:	693b      	ldr	r3, [r7, #16]
100545bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100545be:	68fb      	ldr	r3, [r7, #12]
100545c0:	f383 8810 	msr	PRIMASK, r3
}
100545c4:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
100545c6:	4b04      	ldr	r3, [pc, #16]	@ (100545d8 <UTIL_SEQ_WaitEvt+0x8c>)
100545c8:	697a      	ldr	r2, [r7, #20]
100545ca:	601a      	str	r2, [r3, #0]
  return;
100545cc:	46c0      	nop			@ (mov r8, r8)
}
100545ce:	46bd      	mov	sp, r7
100545d0:	b008      	add	sp, #32
100545d2:	bd80      	pop	{r7, pc}
100545d4:	20002384 	.word	0x20002384
100545d8:	20002380 	.word	0x20002380
100545dc:	2000237c 	.word	0x2000237c

100545e0 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
100545e0:	b580      	push	{r7, lr}
100545e2:	b082      	sub	sp, #8
100545e4:	af00      	add	r7, sp, #0
100545e6:	6078      	str	r0, [r7, #4]
100545e8:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
100545ea:	687b      	ldr	r3, [r7, #4]
100545ec:	43db      	mvns	r3, r3
100545ee:	0018      	movs	r0, r3
100545f0:	f7ff fe3e 	bl	10054270 <UTIL_SEQ_Run>
  return;
100545f4:	46c0      	nop			@ (mov r8, r8)
}
100545f6:	46bd      	mov	sp, r7
100545f8:	b002      	add	sp, #8
100545fa:	bd80      	pop	{r7, pc}

100545fc <UTIL_SEQ_PostIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PostIdle( void )
{
100545fc:	b580      	push	{r7, lr}
100545fe:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
10054600:	46c0      	nop			@ (mov r8, r8)
}
10054602:	46bd      	mov	sp, r7
10054604:	bd80      	pop	{r7, pc}
	...

10054608 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
10054608:	b580      	push	{r7, lr}
1005460a:	b084      	sub	sp, #16
1005460c:	af00      	add	r7, sp, #0
1005460e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
10054610:	210f      	movs	r1, #15
10054612:	187b      	adds	r3, r7, r1
10054614:	2200      	movs	r2, #0
10054616:	701a      	strb	r2, [r3, #0]
uint32_t lvalue = Value;
10054618:	687b      	ldr	r3, [r7, #4]
1005461a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
1005461c:	68ba      	ldr	r2, [r7, #8]
1005461e:	2380      	movs	r3, #128	@ 0x80
10054620:	025b      	lsls	r3, r3, #9
10054622:	429a      	cmp	r2, r3
10054624:	d205      	bcs.n	10054632 <SEQ_BitPosition+0x2a>
10054626:	187b      	adds	r3, r7, r1
10054628:	2210      	movs	r2, #16
1005462a:	701a      	strb	r2, [r3, #0]
1005462c:	68bb      	ldr	r3, [r7, #8]
1005462e:	041b      	lsls	r3, r3, #16
10054630:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
10054632:	68ba      	ldr	r2, [r7, #8]
10054634:	2380      	movs	r3, #128	@ 0x80
10054636:	045b      	lsls	r3, r3, #17
10054638:	429a      	cmp	r2, r3
1005463a:	d208      	bcs.n	1005464e <SEQ_BitPosition+0x46>
1005463c:	220f      	movs	r2, #15
1005463e:	18bb      	adds	r3, r7, r2
10054640:	18ba      	adds	r2, r7, r2
10054642:	7812      	ldrb	r2, [r2, #0]
10054644:	3208      	adds	r2, #8
10054646:	701a      	strb	r2, [r3, #0]
10054648:	68bb      	ldr	r3, [r7, #8]
1005464a:	021b      	lsls	r3, r3, #8
1005464c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
1005464e:	68ba      	ldr	r2, [r7, #8]
10054650:	2380      	movs	r3, #128	@ 0x80
10054652:	055b      	lsls	r3, r3, #21
10054654:	429a      	cmp	r2, r3
10054656:	d208      	bcs.n	1005466a <SEQ_BitPosition+0x62>
10054658:	220f      	movs	r2, #15
1005465a:	18bb      	adds	r3, r7, r2
1005465c:	18ba      	adds	r2, r7, r2
1005465e:	7812      	ldrb	r2, [r2, #0]
10054660:	3204      	adds	r2, #4
10054662:	701a      	strb	r2, [r3, #0]
10054664:	68bb      	ldr	r3, [r7, #8]
10054666:	011b      	lsls	r3, r3, #4
10054668:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
1005466a:	68bb      	ldr	r3, [r7, #8]
1005466c:	0f1b      	lsrs	r3, r3, #28
1005466e:	4a08      	ldr	r2, [pc, #32]	@ (10054690 <SEQ_BitPosition+0x88>)
10054670:	5cd1      	ldrb	r1, [r2, r3]
10054672:	200f      	movs	r0, #15
10054674:	183b      	adds	r3, r7, r0
10054676:	183a      	adds	r2, r7, r0
10054678:	7812      	ldrb	r2, [r2, #0]
1005467a:	188a      	adds	r2, r1, r2
1005467c:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
1005467e:	183b      	adds	r3, r7, r0
10054680:	781b      	ldrb	r3, [r3, #0]
10054682:	221f      	movs	r2, #31
10054684:	1ad3      	subs	r3, r2, r3
10054686:	b2db      	uxtb	r3, r3
}
10054688:	0018      	movs	r0, r3
1005468a:	46bd      	mov	sp, r7
1005468c:	b004      	add	sp, #16
1005468e:	bd80      	pop	{r7, pc}
10054690:	100695a0 	.word	0x100695a0

10054694 <aci_gap_init>:
10054694:	b580      	push	{r7, lr}
10054696:	2802      	cmp	r0, #2
10054698:	d901      	bls.n	1005469e <aci_gap_init+0xa>
1005469a:	2012      	movs	r0, #18
1005469c:	bd80      	pop	{r7, pc}
1005469e:	f001 fc17 	bl	10055ed0 <GAP_Init>
100546a2:	bd80      	pop	{r7, pc}

100546a4 <aci_gap_terminate_api>:
100546a4:	b580      	push	{r7, lr}
100546a6:	f001 fde9 	bl	1005627c <GAP_Terminate_Link>
100546aa:	bd80      	pop	{r7, pc}

100546ac <_aci_gap_lists_check>:
100546ac:	b5b0      	push	{r4, r5, r7, lr}
100546ae:	4604      	mov	r4, r0
100546b0:	7800      	ldrb	r0, [r0, #0]
100546b2:	2800      	cmp	r0, #0
100546b4:	d001      	beq.n	100546ba <_aci_gap_lists_check+0xe>
100546b6:	2804      	cmp	r0, #4
100546b8:	d301      	bcc.n	100546be <_aci_gap_lists_check+0x12>
100546ba:	2012      	movs	r0, #18
100546bc:	e000      	b.n	100546c0 <_aci_gap_lists_check+0x14>
100546be:	2000      	movs	r0, #0
100546c0:	2512      	movs	r5, #18
100546c2:	2a00      	cmp	r2, #0
100546c4:	462a      	mov	r2, r5
100546c6:	d000      	beq.n	100546ca <_aci_gap_lists_check+0x1e>
100546c8:	4602      	mov	r2, r0
100546ca:	2901      	cmp	r1, #1
100546cc:	d800      	bhi.n	100546d0 <_aci_gap_lists_check+0x24>
100546ce:	4615      	mov	r5, r2
100546d0:	2d00      	cmp	r5, #0
100546d2:	d107      	bne.n	100546e4 <_aci_gap_lists_check+0x38>
100546d4:	f007 f9b1 	bl	1005ba3a <llc_priv_controller_privacy_csr_ucfg_weak>
100546d8:	2800      	cmp	r0, #0
100546da:	d103      	bne.n	100546e4 <_aci_gap_lists_check+0x38>
100546dc:	7820      	ldrb	r0, [r4, #0]
100546de:	21fd      	movs	r1, #253	@ 0xfd
100546e0:	4001      	ands	r1, r0
100546e2:	7021      	strb	r1, [r4, #0]
100546e4:	4628      	mov	r0, r5
100546e6:	bdb0      	pop	{r4, r5, r7, pc}

100546e8 <aci_gap_configure_filter_accept_and_resolving_list>:
100546e8:	b5e0      	push	{r5, r6, r7, lr}
100546ea:	a901      	add	r1, sp, #4
100546ec:	7008      	strb	r0, [r1, #0]
100546ee:	2201      	movs	r2, #1
100546f0:	4608      	mov	r0, r1
100546f2:	4611      	mov	r1, r2
100546f4:	f7ff ffda 	bl	100546ac <_aci_gap_lists_check>
100546f8:	2800      	cmp	r0, #0
100546fa:	d000      	beq.n	100546fe <aci_gap_configure_filter_accept_and_resolving_list+0x16>
100546fc:	bd8c      	pop	{r2, r3, r7, pc}
100546fe:	a801      	add	r0, sp, #4
10054700:	7800      	ldrb	r0, [r0, #0]
10054702:	f001 fdd1 	bl	100562a8 <GAP_configure_filter_accept_and_resolving_list>
10054706:	bd8c      	pop	{r2, r3, r7, pc}

10054708 <GAP_set_advertising_configuration_ucfg_weak>:
10054708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1005470a:	461c      	mov	r4, r3
1005470c:	4608      	mov	r0, r1
1005470e:	990a      	ldr	r1, [sp, #40]	@ 0x28
10054710:	9103      	str	r1, [sp, #12]
10054712:	9909      	ldr	r1, [sp, #36]	@ 0x24
10054714:	9102      	str	r1, [sp, #8]
10054716:	9908      	ldr	r1, [sp, #32]
10054718:	9101      	str	r1, [sp, #4]
1005471a:	9907      	ldr	r1, [sp, #28]
1005471c:	9100      	str	r1, [sp, #0]
1005471e:	9b06      	ldr	r3, [sp, #24]
10054720:	4611      	mov	r1, r2
10054722:	4622      	mov	r2, r4
10054724:	f001 fea0 	bl	10056468 <GAP_set_legacy_advertising_configuration>
10054728:	b004      	add	sp, #16
1005472a:	bd10      	pop	{r4, pc}

1005472c <GAP_set_advertising_data_ucfg_weak>:
1005472c:	b580      	push	{r7, lr}
1005472e:	4619      	mov	r1, r3
10054730:	4610      	mov	r0, r2
10054732:	f002 f80d 	bl	10056750 <GAP_set_legacy_advertising_data>
10054736:	bd80      	pop	{r7, pc}

10054738 <GAP_set_advertising_enable_ucfg_weak>:
10054738:	b580      	push	{r7, lr}
1005473a:	f001 ff05 	bl	10056548 <GAP_set_legacy_advertising_enable>
1005473e:	bd80      	pop	{r7, pc}

10054740 <aci_gap_set_advertising_configuration>:
10054740:	b5f0      	push	{r4, r5, r6, r7, lr}
10054742:	b093      	sub	sp, #76	@ 0x4c
10054744:	461f      	mov	r7, r3
10054746:	4615      	mov	r5, r2
10054748:	460e      	mov	r6, r1
1005474a:	9012      	str	r0, [sp, #72]	@ 0x48
1005474c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
1005474e:	4608      	mov	r0, r1
10054750:	4611      	mov	r1, r2
10054752:	4622      	mov	r2, r4
10054754:	f001 fe5a 	bl	1005640c <GAP_check_discoverability_mode>
10054758:	2800      	cmp	r0, #0
1005475a:	d124      	bne.n	100547a6 <aci_gap_set_advertising_configuration+0x66>
1005475c:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005475e:	900d      	str	r0, [sp, #52]	@ 0x34
10054760:	ab1f      	add	r3, sp, #124	@ 0x7c
10054762:	cb0d      	ldmia	r3, {r0, r2, r3}
10054764:	9011      	str	r0, [sp, #68]	@ 0x44
10054766:	981e      	ldr	r0, [sp, #120]	@ 0x78
10054768:	900f      	str	r0, [sp, #60]	@ 0x3c
1005476a:	981d      	ldr	r0, [sp, #116]	@ 0x74
1005476c:	900e      	str	r0, [sp, #56]	@ 0x38
1005476e:	981b      	ldr	r0, [sp, #108]	@ 0x6c
10054770:	900c      	str	r0, [sp, #48]	@ 0x30
10054772:	991a      	ldr	r1, [sp, #104]	@ 0x68
10054774:	9819      	ldr	r0, [sp, #100]	@ 0x64
10054776:	9710      	str	r7, [sp, #64]	@ 0x40
10054778:	9f18      	ldr	r7, [sp, #96]	@ 0x60
1005477a:	9208      	str	r2, [sp, #32]
1005477c:	9309      	str	r3, [sp, #36]	@ 0x24
1005477e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10054780:	920a      	str	r2, [sp, #40]	@ 0x28
10054782:	9700      	str	r7, [sp, #0]
10054784:	9001      	str	r0, [sp, #4]
10054786:	9102      	str	r1, [sp, #8]
10054788:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005478a:	9003      	str	r0, [sp, #12]
1005478c:	9404      	str	r4, [sp, #16]
1005478e:	980e      	ldr	r0, [sp, #56]	@ 0x38
10054790:	9005      	str	r0, [sp, #20]
10054792:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10054794:	9006      	str	r0, [sp, #24]
10054796:	9811      	ldr	r0, [sp, #68]	@ 0x44
10054798:	9007      	str	r0, [sp, #28]
1005479a:	9812      	ldr	r0, [sp, #72]	@ 0x48
1005479c:	4631      	mov	r1, r6
1005479e:	462a      	mov	r2, r5
100547a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100547a2:	f7ff ffb1 	bl	10054708 <GAP_set_advertising_configuration_ucfg_weak>
100547a6:	b013      	add	sp, #76	@ 0x4c
100547a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

100547aa <aci_gap_set_advertising_data>:
100547aa:	b580      	push	{r7, lr}
100547ac:	f7ff ffbe 	bl	1005472c <GAP_set_advertising_data_ucfg_weak>
100547b0:	bd80      	pop	{r7, pc}

100547b2 <aci_gap_set_advertising_enable>:
100547b2:	b580      	push	{r7, lr}
100547b4:	f7ff ffc0 	bl	10054738 <GAP_set_advertising_enable_ucfg_weak>
100547b8:	bd80      	pop	{r7, pc}

100547ba <aci_gap_set_io_capability_api>:
100547ba:	b580      	push	{r7, lr}
100547bc:	2804      	cmp	r0, #4
100547be:	d901      	bls.n	100547c4 <aci_gap_set_io_capability_api+0xa>
100547c0:	2012      	movs	r0, #18
100547c2:	bd80      	pop	{r7, pc}
100547c4:	f00d fb26 	bl	10061e14 <smp_sap_aci_set_io_capabilities>
100547c8:	bd80      	pop	{r7, pc}
	...

100547cc <aci_gap_set_security_requirements_api>:
100547cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100547ce:	b089      	sub	sp, #36	@ 0x24
100547d0:	4605      	mov	r5, r0
100547d2:	4608      	mov	r0, r1
100547d4:	4328      	orrs	r0, r5
100547d6:	2412      	movs	r4, #18
100547d8:	2801      	cmp	r0, #1
100547da:	d836      	bhi.n	1005484a <aci_gap_set_security_requirements_api+0x7e>
100547dc:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
100547de:	2f07      	cmp	r7, #7
100547e0:	d333      	bcc.n	1005484a <aci_gap_set_security_requirements_api+0x7e>
100547e2:	2f10      	cmp	r7, #16
100547e4:	d831      	bhi.n	1005484a <aci_gap_set_security_requirements_api+0x7e>
100547e6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
100547e8:	2810      	cmp	r0, #16
100547ea:	d82e      	bhi.n	1005484a <aci_gap_set_security_requirements_api+0x7e>
100547ec:	42b8      	cmp	r0, r7
100547ee:	d32c      	bcc.n	1005484a <aci_gap_set_security_requirements_api+0x7e>
100547f0:	460e      	mov	r6, r1
100547f2:	9910      	ldr	r1, [sp, #64]	@ 0x40
100547f4:	2902      	cmp	r1, #2
100547f6:	d828      	bhi.n	1005484a <aci_gap_set_security_requirements_api+0x7e>
100547f8:	9101      	str	r1, [sp, #4]
100547fa:	9002      	str	r0, [sp, #8]
100547fc:	9303      	str	r3, [sp, #12]
100547fe:	9204      	str	r2, [sp, #16]
10054800:	f00d fd81 	bl	10062306 <secure_connections_csr_ucfg_weak>
10054804:	2801      	cmp	r0, #1
10054806:	d106      	bne.n	10054816 <aci_gap_set_security_requirements_api+0x4a>
10054808:	9904      	ldr	r1, [sp, #16]
1005480a:	2902      	cmp	r1, #2
1005480c:	d81d      	bhi.n	1005484a <aci_gap_set_security_requirements_api+0x7e>
1005480e:	9a03      	ldr	r2, [sp, #12]
10054810:	2a01      	cmp	r2, #1
10054812:	d907      	bls.n	10054824 <aci_gap_set_security_requirements_api+0x58>
10054814:	e019      	b.n	1005484a <aci_gap_set_security_requirements_api+0x7e>
10054816:	9a03      	ldr	r2, [sp, #12]
10054818:	4610      	mov	r0, r2
1005481a:	9904      	ldr	r1, [sp, #16]
1005481c:	4308      	orrs	r0, r1
1005481e:	d001      	beq.n	10054824 <aci_gap_set_security_requirements_api+0x58>
10054820:	2411      	movs	r4, #17
10054822:	e012      	b.n	1005484a <aci_gap_set_security_requirements_api+0x7e>
10054824:	ac05      	add	r4, sp, #20
10054826:	9801      	ldr	r0, [sp, #4]
10054828:	7320      	strb	r0, [r4, #12]
1005482a:	4809      	ldr	r0, [pc, #36]	@ (10054850 <__arm_cp.1_0>)
1005482c:	80e0      	strh	r0, [r4, #6]
1005482e:	9802      	ldr	r0, [sp, #8]
10054830:	7160      	strb	r0, [r4, #5]
10054832:	7127      	strb	r7, [r4, #4]
10054834:	70e2      	strb	r2, [r4, #3]
10054836:	70a1      	strb	r1, [r4, #2]
10054838:	7066      	strb	r6, [r4, #1]
1005483a:	7025      	strb	r5, [r4, #0]
1005483c:	f001 fcfe 	bl	1005623c <GAP_get_identity_address_type>
10054840:	7360      	strb	r0, [r4, #13]
10054842:	4620      	mov	r0, r4
10054844:	f00d fb1c 	bl	10061e80 <smp_sap_aci_set_authentication_req>
10054848:	4604      	mov	r4, r0
1005484a:	4620      	mov	r0, r4
1005484c:	b009      	add	sp, #36	@ 0x24
1005484e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10054850 <__arm_cp.1_0>:
10054850:	00000707 	.word	0x00000707

10054854 <aci_gap_passkey_resp_api>:
10054854:	b580      	push	{r7, lr}
10054856:	4a04      	ldr	r2, [pc, #16]	@ (10054868 <__arm_cp.4_0>)
10054858:	4291      	cmp	r1, r2
1005485a:	d901      	bls.n	10054860 <aci_gap_passkey_resp_api+0xc>
1005485c:	2012      	movs	r0, #18
1005485e:	bd80      	pop	{r7, pc}
10054860:	f00d fb38 	bl	10061ed4 <smp_sap_aci_passkey_response>
10054864:	bd80      	pop	{r7, pc}
10054866:	46c0      	nop			@ (mov r8, r8)

10054868 <__arm_cp.4_0>:
10054868:	000f423f 	.word	0x000f423f

1005486c <aci_gatt_srv_add_service_api>:
1005486c:	b580      	push	{r7, lr}
1005486e:	f004 fa37 	bl	10058ce0 <GAT_srv_add_service>
10054872:	bd80      	pop	{r7, pc}

10054874 <aci_gatt_srv_get_service_handle_api>:
10054874:	b580      	push	{r7, lr}
10054876:	f004 fc71 	bl	1005915c <GAT_srv_get_service_handle>
1005487a:	bd80      	pop	{r7, pc}

1005487c <aci_gatt_srv_add_char_api>:
1005487c:	b580      	push	{r7, lr}
1005487e:	f004 fadf 	bl	10058e40 <GAT_srv_add_characteristic>
10054882:	bd80      	pop	{r7, pc}

10054884 <aci_gatt_srv_get_char_decl_handle_api>:
10054884:	b580      	push	{r7, lr}
10054886:	f004 fc73 	bl	10059170 <GAT_srv_get_char_decl_handle>
1005488a:	bd80      	pop	{r7, pc}

1005488c <aci_gatt_srv_resp_api>:
1005488c:	b51c      	push	{r2, r3, r4, lr}
1005488e:	9c05      	ldr	r4, [sp, #20]
10054890:	9401      	str	r4, [sp, #4]
10054892:	9c04      	ldr	r4, [sp, #16]
10054894:	9400      	str	r4, [sp, #0]
10054896:	f004 fc59 	bl	1005914c <GAT_srv_resp>
1005489a:	2000      	movs	r0, #0
1005489c:	bd1c      	pop	{r2, r3, r4, pc}

1005489e <configBitmapSet>:
1005489e:	2000      	movs	r0, #0
100548a0:	4770      	bx	lr
	...

100548a4 <HAL_Write_ConfigData>:
100548a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100548a6:	b087      	sub	sp, #28
100548a8:	4614      	mov	r4, r2
100548aa:	460d      	mov	r5, r1
100548ac:	4606      	mov	r6, r0
100548ae:	4869      	ldr	r0, [pc, #420]	@ (10054a54 <__arm_cp.4_0>)
100548b0:	6800      	ldr	r0, [r0, #0]
100548b2:	2e00      	cmp	r6, #0
100548b4:	d101      	bne.n	100548ba <HAL_Write_ConfigData+0x16>
100548b6:	2d06      	cmp	r5, #6
100548b8:	d017      	beq.n	100548ea <HAL_Write_ConfigData+0x46>
100548ba:	2e06      	cmp	r6, #6
100548bc:	d101      	bne.n	100548c2 <HAL_Write_ConfigData+0x1e>
100548be:	2d02      	cmp	r5, #2
100548c0:	d013      	beq.n	100548ea <HAL_Write_ConfigData+0x46>
100548c2:	2e08      	cmp	r6, #8
100548c4:	d101      	bne.n	100548ca <HAL_Write_ConfigData+0x26>
100548c6:	2d10      	cmp	r5, #16
100548c8:	d00f      	beq.n	100548ea <HAL_Write_ConfigData+0x46>
100548ca:	2e18      	cmp	r6, #24
100548cc:	d101      	bne.n	100548d2 <HAL_Write_ConfigData+0x2e>
100548ce:	2d10      	cmp	r5, #16
100548d0:	d00b      	beq.n	100548ea <HAL_Write_ConfigData+0x46>
100548d2:	2e28      	cmp	r6, #40	@ 0x28
100548d4:	d101      	bne.n	100548da <HAL_Write_ConfigData+0x36>
100548d6:	2d02      	cmp	r5, #2
100548d8:	d007      	beq.n	100548ea <HAL_Write_ConfigData+0x46>
100548da:	2e2a      	cmp	r6, #42	@ 0x2a
100548dc:	d101      	bne.n	100548e2 <HAL_Write_ConfigData+0x3e>
100548de:	2d02      	cmp	r5, #2
100548e0:	d003      	beq.n	100548ea <HAL_Write_ConfigData+0x46>
100548e2:	2e2c      	cmp	r6, #44	@ 0x2c
100548e4:	d109      	bne.n	100548fa <HAL_Write_ConfigData+0x56>
100548e6:	2d01      	cmp	r5, #1
100548e8:	d107      	bne.n	100548fa <HAL_Write_ConfigData+0x56>
100548ea:	1980      	adds	r0, r0, r6
100548ec:	4621      	mov	r1, r4
100548ee:	462a      	mov	r2, r5
100548f0:	f7fd feb0 	bl	10052654 <BLEPLAT_MemCpy>
100548f4:	2000      	movs	r0, #0
100548f6:	b007      	add	sp, #28
100548f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100548fa:	2e2e      	cmp	r6, #46	@ 0x2e
100548fc:	d107      	bne.n	1005490e <HAL_Write_ConfigData+0x6a>
100548fe:	2d06      	cmp	r5, #6
10054900:	d105      	bne.n	1005490e <HAL_Write_ConfigData+0x6a>
10054902:	7961      	ldrb	r1, [r4, #5]
10054904:	0989      	lsrs	r1, r1, #6
10054906:	2903      	cmp	r1, #3
10054908:	d2ef      	bcs.n	100548ea <HAL_Write_ConfigData+0x46>
1005490a:	2012      	movs	r0, #18
1005490c:	e7f3      	b.n	100548f6 <HAL_Write_ConfigData+0x52>
1005490e:	2ed0      	cmp	r6, #208	@ 0xd0
10054910:	d105      	bne.n	1005491e <HAL_Write_ConfigData+0x7a>
10054912:	2d01      	cmp	r5, #1
10054914:	d103      	bne.n	1005491e <HAL_Write_ConfigData+0x7a>
10054916:	7820      	ldrb	r0, [r4, #0]
10054918:	f7fa f9df 	bl	1004ecda <smp_sap_scp_force_debug_key_usage_ucfg>
1005491c:	e7eb      	b.n	100548f6 <HAL_Write_ConfigData+0x52>
1005491e:	2ed2      	cmp	r6, #210	@ 0xd2
10054920:	d105      	bne.n	1005492e <HAL_Write_ConfigData+0x8a>
10054922:	2d01      	cmp	r5, #1
10054924:	d103      	bne.n	1005492e <HAL_Write_ConfigData+0x8a>
10054926:	7821      	ldrb	r1, [r4, #0]
10054928:	2236      	movs	r2, #54	@ 0x36
1005492a:	5481      	strb	r1, [r0, r2]
1005492c:	e7e2      	b.n	100548f4 <HAL_Write_ConfigData+0x50>
1005492e:	2ed5      	cmp	r6, #213	@ 0xd5
10054930:	d10a      	bne.n	10054948 <HAL_Write_ConfigData+0xa4>
10054932:	2d04      	cmp	r5, #4
10054934:	d108      	bne.n	10054948 <HAL_Write_ConfigData+0xa4>
10054936:	a802      	add	r0, sp, #8
10054938:	2204      	movs	r2, #4
1005493a:	4621      	mov	r1, r4
1005493c:	f7fd fe8a 	bl	10052654 <BLEPLAT_MemCpy>
10054940:	9802      	ldr	r0, [sp, #8]
10054942:	f7fa f9bd 	bl	1004ecc0 <smp_debug_trudy__set_config_ucfg>
10054946:	e7d6      	b.n	100548f6 <HAL_Write_ConfigData+0x52>
10054948:	f004 fe20 	bl	1005958c <data_length_extension_csr_ucfg_weak>
1005494c:	2d08      	cmp	r5, #8
1005494e:	d123      	bne.n	10054998 <HAL_Write_ConfigData+0xf4>
10054950:	2ed1      	cmp	r6, #209	@ 0xd1
10054952:	d121      	bne.n	10054998 <HAL_Write_ConfigData+0xf4>
10054954:	2801      	cmp	r0, #1
10054956:	d11f      	bne.n	10054998 <HAL_Write_ConfigData+0xf4>
10054958:	a802      	add	r0, sp, #8
1005495a:	9001      	str	r0, [sp, #4]
1005495c:	2602      	movs	r6, #2
1005495e:	4d3f      	ldr	r5, [pc, #252]	@ (10054a5c <__arm_cp.4_2>)
10054960:	4621      	mov	r1, r4
10054962:	4632      	mov	r2, r6
10054964:	47a8      	blx	r5
10054966:	1ca1      	adds	r1, r4, #2
10054968:	af06      	add	r7, sp, #24
1005496a:	4638      	mov	r0, r7
1005496c:	4632      	mov	r2, r6
1005496e:	47a8      	blx	r5
10054970:	1d21      	adds	r1, r4, #4
10054972:	ad05      	add	r5, sp, #20
10054974:	4628      	mov	r0, r5
10054976:	4632      	mov	r2, r6
10054978:	4b38      	ldr	r3, [pc, #224]	@ (10054a5c <__arm_cp.4_2>)
1005497a:	4798      	blx	r3
1005497c:	1da1      	adds	r1, r4, #6
1005497e:	ac04      	add	r4, sp, #16
10054980:	4620      	mov	r0, r4
10054982:	4632      	mov	r2, r6
10054984:	4b35      	ldr	r3, [pc, #212]	@ (10054a5c <__arm_cp.4_2>)
10054986:	4798      	blx	r3
10054988:	8823      	ldrh	r3, [r4, #0]
1005498a:	882a      	ldrh	r2, [r5, #0]
1005498c:	8839      	ldrh	r1, [r7, #0]
1005498e:	9801      	ldr	r0, [sp, #4]
10054990:	8800      	ldrh	r0, [r0, #0]
10054992:	f00b fa6d 	bl	1005fe70 <ll_write_supported_data_ucfg_weak>
10054996:	e7ae      	b.n	100548f6 <HAL_Write_ConfigData+0x52>
10054998:	2e30      	cmp	r6, #48	@ 0x30
1005499a:	d105      	bne.n	100549a8 <HAL_Write_ConfigData+0x104>
1005499c:	2d01      	cmp	r5, #1
1005499e:	d103      	bne.n	100549a8 <HAL_Write_ConfigData+0x104>
100549a0:	7820      	ldrb	r0, [r4, #0]
100549a2:	f7fa f9ba 	bl	1004ed1a <llc_conn_multi_link_connection_ucfg>
100549a6:	e7a6      	b.n	100548f6 <HAL_Write_ConfigData+0x52>
100549a8:	2ed3      	cmp	r6, #211	@ 0xd3
100549aa:	d105      	bne.n	100549b8 <HAL_Write_ConfigData+0x114>
100549ac:	2d01      	cmp	r5, #1
100549ae:	d103      	bne.n	100549b8 <HAL_Write_ConfigData+0x114>
100549b0:	7820      	ldrb	r0, [r4, #0]
100549b2:	f00b f96b 	bl	1005fc8c <LL_force_chsel_1>
100549b6:	e79e      	b.n	100548f6 <HAL_Write_ConfigData+0x52>
100549b8:	2eff      	cmp	r6, #255	@ 0xff
100549ba:	d10a      	bne.n	100549d2 <HAL_Write_ConfigData+0x12e>
100549bc:	2d04      	cmp	r5, #4
100549be:	d108      	bne.n	100549d2 <HAL_Write_ConfigData+0x12e>
100549c0:	a802      	add	r0, sp, #8
100549c2:	2204      	movs	r2, #4
100549c4:	4621      	mov	r1, r4
100549c6:	f7fd fe45 	bl	10052654 <BLEPLAT_MemCpy>
100549ca:	9802      	ldr	r0, [sp, #8]
100549cc:	f7ff ff67 	bl	1005489e <configBitmapSet>
100549d0:	e00c      	b.n	100549ec <HAL_Write_ConfigData+0x148>
100549d2:	2efe      	cmp	r6, #254	@ 0xfe
100549d4:	d10d      	bne.n	100549f2 <HAL_Write_ConfigData+0x14e>
100549d6:	2d05      	cmp	r5, #5
100549d8:	d10b      	bne.n	100549f2 <HAL_Write_ConfigData+0x14e>
100549da:	ad02      	add	r5, sp, #8
100549dc:	2205      	movs	r2, #5
100549de:	4628      	mov	r0, r5
100549e0:	4621      	mov	r1, r4
100549e2:	f7fd fe37 	bl	10052654 <BLEPLAT_MemCpy>
100549e6:	4628      	mov	r0, r5
100549e8:	f000 fb78 	bl	100550dc <log_verbosity_set_ucfg_weak>
100549ec:	2800      	cmp	r0, #0
100549ee:	d181      	bne.n	100548f4 <HAL_Write_ConfigData+0x50>
100549f0:	e78b      	b.n	1005490a <HAL_Write_ConfigData+0x66>
100549f2:	2e2f      	cmp	r6, #47	@ 0x2f
100549f4:	d105      	bne.n	10054a02 <HAL_Write_ConfigData+0x15e>
100549f6:	2d01      	cmp	r5, #1
100549f8:	d103      	bne.n	10054a02 <HAL_Write_ConfigData+0x15e>
100549fa:	7820      	ldrb	r0, [r4, #0]
100549fc:	f007 f85c 	bl	1005bab8 <llc_scan_set_scan_channel_bitmap>
10054a00:	e779      	b.n	100548f6 <HAL_Write_ConfigData+0x52>
10054a02:	2e32      	cmp	r6, #50	@ 0x32
10054a04:	d112      	bne.n	10054a2c <HAL_Write_ConfigData+0x188>
10054a06:	2d02      	cmp	r5, #2
10054a08:	d110      	bne.n	10054a2c <HAL_Write_ConfigData+0x188>
10054a0a:	ad02      	add	r5, sp, #8
10054a0c:	2202      	movs	r2, #2
10054a0e:	4628      	mov	r0, r5
10054a10:	4621      	mov	r1, r4
10054a12:	f7fd fe1f 	bl	10052654 <BLEPLAT_MemCpy>
10054a16:	8828      	ldrh	r0, [r5, #0]
10054a18:	1e41      	subs	r1, r0, #1
10054a1a:	08c9      	lsrs	r1, r1, #3
10054a1c:	29e0      	cmp	r1, #224	@ 0xe0
10054a1e:	d900      	bls.n	10054a22 <HAL_Write_ConfigData+0x17e>
10054a20:	e773      	b.n	1005490a <HAL_Write_ConfigData+0x66>
10054a22:	490d      	ldr	r1, [pc, #52]	@ (10054a58 <__arm_cp.4_1>)
10054a24:	6809      	ldr	r1, [r1, #0]
10054a26:	225a      	movs	r2, #90	@ 0x5a
10054a28:	5288      	strh	r0, [r1, r2]
10054a2a:	e763      	b.n	100548f4 <HAL_Write_ConfigData+0x50>
10054a2c:	2012      	movs	r0, #18
10054a2e:	2e33      	cmp	r6, #51	@ 0x33
10054a30:	d000      	beq.n	10054a34 <HAL_Write_ConfigData+0x190>
10054a32:	e760      	b.n	100548f6 <HAL_Write_ConfigData+0x52>
10054a34:	2d01      	cmp	r5, #1
10054a36:	d000      	beq.n	10054a3a <HAL_Write_ConfigData+0x196>
10054a38:	e75d      	b.n	100548f6 <HAL_Write_ConfigData+0x52>
10054a3a:	ad02      	add	r5, sp, #8
10054a3c:	2201      	movs	r2, #1
10054a3e:	4628      	mov	r0, r5
10054a40:	4621      	mov	r1, r4
10054a42:	f7fd fe07 	bl	10052654 <BLEPLAT_MemCpy>
10054a46:	7828      	ldrb	r0, [r5, #0]
10054a48:	f001 fcd8 	bl	100563fc <GAP_enable_rpa_change_at_timeout>
10054a4c:	7828      	ldrb	r0, [r5, #0]
10054a4e:	f006 fffb 	bl	1005ba48 <llc_priv_enable_rpa_change_at_timeout_ucfg_weak>
10054a52:	e74f      	b.n	100548f4 <HAL_Write_ConfigData+0x50>

10054a54 <__arm_cp.4_0>:
10054a54:	2000241c 	.word	0x2000241c

10054a58 <__arm_cp.4_1>:
10054a58:	20002424 	.word	0x20002424

10054a5c <__arm_cp.4_2>:
10054a5c:	10052655 	.word	0x10052655

10054a60 <aci_hal_write_config_data>:
10054a60:	b580      	push	{r7, lr}
10054a62:	f7ff ff1f 	bl	100548a4 <HAL_Write_ConfigData>
10054a66:	bd80      	pop	{r7, pc}

10054a68 <aci_hal_set_tx_power_level>:
10054a68:	b580      	push	{r7, lr}
10054a6a:	f000 f801 	bl	10054a70 <HAL_Set_TX_Power_Level>
10054a6e:	bd80      	pop	{r7, pc}

10054a70 <HAL_Set_TX_Power_Level>:
10054a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054a72:	460e      	mov	r6, r1
10054a74:	4605      	mov	r5, r0
10054a76:	2412      	movs	r4, #18
10054a78:	f7fd fe90 	bl	1005279c <BLEPLAT_GetMaxPALevel>
10054a7c:	42b0      	cmp	r0, r6
10054a7e:	d317      	bcc.n	10054ab0 <HAL_Set_TX_Power_Level+0x40>
10054a80:	2d01      	cmp	r5, #1
10054a82:	d815      	bhi.n	10054ab0 <HAL_Set_TX_Power_Level+0x40>
10054a84:	480b      	ldr	r0, [pc, #44]	@ (10054ab4 <__arm_cp.11_0>)
10054a86:	6800      	ldr	r0, [r0, #0]
10054a88:	7a81      	ldrb	r1, [r0, #10]
10054a8a:	9100      	str	r1, [sp, #0]
10054a8c:	7285      	strb	r5, [r0, #10]
10054a8e:	7a47      	ldrb	r7, [r0, #9]
10054a90:	7246      	strb	r6, [r0, #9]
10054a92:	4628      	mov	r0, r5
10054a94:	f7fd fe92 	bl	100527bc <BLEPLAT_SetHighPower>
10054a98:	2400      	movs	r4, #0
10054a9a:	42b7      	cmp	r7, r6
10054a9c:	d102      	bne.n	10054aa4 <HAL_Set_TX_Power_Level+0x34>
10054a9e:	9800      	ldr	r0, [sp, #0]
10054aa0:	42a8      	cmp	r0, r5
10054aa2:	d005      	beq.n	10054ab0 <HAL_Set_TX_Power_Level+0x40>
10054aa4:	20ff      	movs	r0, #255	@ 0xff
10054aa6:	227f      	movs	r2, #127	@ 0x7f
10054aa8:	2101      	movs	r1, #1
10054aaa:	460b      	mov	r3, r1
10054aac:	f009 fa5e 	bl	1005df6c <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
10054ab0:	4620      	mov	r0, r4
10054ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10054ab4 <__arm_cp.11_0>:
10054ab4:	20002470 	.word	0x20002470

10054ab8 <ble_HAL_Init>:
10054ab8:	b580      	push	{r7, lr}
10054aba:	4804      	ldr	r0, [pc, #16]	@ (10054acc <__arm_cp.17_0>)
10054abc:	6800      	ldr	r0, [r0, #0]
10054abe:	3060      	adds	r0, #96	@ 0x60
10054ac0:	2100      	movs	r1, #0
10054ac2:	2204      	movs	r2, #4
10054ac4:	f7fd fdd6 	bl	10052674 <BLEPLAT_MemSet>
10054ac8:	bd80      	pop	{r7, pc}
10054aca:	46c0      	nop			@ (mov r8, r8)

10054acc <__arm_cp.17_0>:
10054acc:	20002470 	.word	0x20002470

10054ad0 <hal_read_radio_activity_state>:
10054ad0:	b570      	push	{r4, r5, r6, lr}
10054ad2:	4603      	mov	r3, r0
10054ad4:	480a      	ldr	r0, [pc, #40]	@ (10054b00 <__arm_cp.18_0>)
10054ad6:	6804      	ldr	r4, [r0, #0]
10054ad8:	f3ef 8010 	mrs	r0, PRIMASK
10054adc:	b672      	cpsid	i
10054ade:	7d20      	ldrb	r0, [r4, #20]
10054ae0:	2500      	movs	r5, #0
10054ae2:	7525      	strb	r5, [r4, #20]
10054ae4:	7c25      	ldrb	r5, [r4, #16]
10054ae6:	260f      	movs	r6, #15
10054ae8:	402e      	ands	r6, r5
10054aea:	701e      	strb	r6, [r3, #0]
10054aec:	7c23      	ldrb	r3, [r4, #16]
10054aee:	091b      	lsrs	r3, r3, #4
10054af0:	700b      	strb	r3, [r1, #0]
10054af2:	68e1      	ldr	r1, [r4, #12]
10054af4:	6011      	str	r1, [r2, #0]
10054af6:	1e41      	subs	r1, r0, #1
10054af8:	4188      	sbcs	r0, r1
10054afa:	b662      	cpsie	i
10054afc:	bd70      	pop	{r4, r5, r6, pc}
10054afe:	46c0      	nop			@ (mov r8, r8)

10054b00 <__arm_cp.18_0>:
10054b00:	20002470 	.word	0x20002470

10054b04 <hal_radio_activity_state_init>:
10054b04:	4803      	ldr	r0, [pc, #12]	@ (10054b14 <__arm_cp.20_0>)
10054b06:	6800      	ldr	r0, [r0, #0]
10054b08:	2100      	movs	r1, #0
10054b0a:	7501      	strb	r1, [r0, #20]
10054b0c:	8241      	strh	r1, [r0, #18]
10054b0e:	7401      	strb	r1, [r0, #16]
10054b10:	4770      	bx	lr
10054b12:	46c0      	nop			@ (mov r8, r8)

10054b14 <__arm_cp.20_0>:
10054b14:	20002470 	.word	0x20002470

10054b18 <hal_radio_activity_state_cb_check>:
10054b18:	b510      	push	{r4, lr}
10054b1a:	b086      	sub	sp, #24
10054b1c:	4815      	ldr	r0, [pc, #84]	@ (10054b74 <__arm_cp.22_0>)
10054b1e:	6804      	ldr	r4, [r0, #0]
10054b20:	a802      	add	r0, sp, #8
10054b22:	a901      	add	r1, sp, #4
10054b24:	466a      	mov	r2, sp
10054b26:	f7ff ffd3 	bl	10054ad0 <hal_read_radio_activity_state>
10054b2a:	2800      	cmp	r0, #0
10054b2c:	d01f      	beq.n	10054b6e <hal_radio_activity_state_cb_check+0x56>
10054b2e:	a802      	add	r0, sp, #8
10054b30:	7801      	ldrb	r1, [r0, #0]
10054b32:	8a60      	ldrh	r0, [r4, #18]
10054b34:	40c8      	lsrs	r0, r1
10054b36:	07c0      	lsls	r0, r0, #31
10054b38:	d019      	beq.n	10054b6e <hal_radio_activity_state_cb_check+0x56>
10054b3a:	9a01      	ldr	r2, [sp, #4]
10054b3c:	9b00      	ldr	r3, [sp, #0]
10054b3e:	a803      	add	r0, sp, #12
10054b40:	2408      	movs	r4, #8
10054b42:	7084      	strb	r4, [r0, #2]
10054b44:	0e1c      	lsrs	r4, r3, #24
10054b46:	72c4      	strb	r4, [r0, #11]
10054b48:	0c1c      	lsrs	r4, r3, #16
10054b4a:	7284      	strb	r4, [r0, #10]
10054b4c:	0a1c      	lsrs	r4, r3, #8
10054b4e:	7244      	strb	r4, [r0, #9]
10054b50:	7203      	strb	r3, [r0, #8]
10054b52:	71c2      	strb	r2, [r0, #7]
10054b54:	7181      	strb	r1, [r0, #6]
10054b56:	21ff      	movs	r1, #255	@ 0xff
10054b58:	7041      	strb	r1, [r0, #1]
10054b5a:	2182      	movs	r1, #130	@ 0x82
10054b5c:	7001      	strb	r1, [r0, #0]
10054b5e:	2100      	movs	r1, #0
10054b60:	7141      	strb	r1, [r0, #5]
10054b62:	2204      	movs	r2, #4
10054b64:	7102      	strb	r2, [r0, #4]
10054b66:	70c1      	strb	r1, [r0, #3]
10054b68:	210c      	movs	r1, #12
10054b6a:	f7f9 ff41 	bl	1004e9f0 <BLE_STACK_Event>
10054b6e:	b006      	add	sp, #24
10054b70:	bd10      	pop	{r4, pc}
10054b72:	46c0      	nop			@ (mov r8, r8)

10054b74 <__arm_cp.22_0>:
10054b74:	20002470 	.word	0x20002470

10054b78 <aci_l2cap_connection_parameter_update_req_api>:
10054b78:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
10054b7a:	ac01      	add	r4, sp, #4
10054b7c:	9d08      	ldr	r5, [sp, #32]
10054b7e:	8125      	strh	r5, [r4, #8]
10054b80:	80e3      	strh	r3, [r4, #6]
10054b82:	80a2      	strh	r2, [r4, #4]
10054b84:	8061      	strh	r1, [r4, #2]
10054b86:	8020      	strh	r0, [r4, #0]
10054b88:	4620      	mov	r0, r4
10054b8a:	f004 fd0b 	bl	100595a4 <L2C_build_connect_update_request>
10054b8e:	b004      	add	sp, #16
10054b90:	bdb0      	pop	{r4, r5, r7, pc}
	...

10054b94 <Acl_Init>:
10054b94:	4803      	ldr	r0, [pc, #12]	@ (10054ba4 <__arm_cp.0_0>)
10054b96:	6800      	ldr	r0, [r0, #0]
10054b98:	2188      	movs	r1, #136	@ 0x88
10054b9a:	4a03      	ldr	r2, [pc, #12]	@ (10054ba8 <__arm_cp.0_1>)
10054b9c:	5042      	str	r2, [r0, r1]
10054b9e:	2000      	movs	r0, #0
10054ba0:	4770      	bx	lr
10054ba2:	46c0      	nop			@ (mov r8, r8)

10054ba4 <__arm_cp.0_0>:
10054ba4:	20002470 	.word	0x20002470

10054ba8 <__arm_cp.0_1>:
10054ba8:	03030000 	.word	0x03030000

10054bac <isr_Acl_Data_Indication_Queue_Full>:
10054bac:	4805      	ldr	r0, [pc, #20]	@ (10054bc4 <__arm_cp.1_0>)
10054bae:	6800      	ldr	r0, [r0, #0]
10054bb0:	2188      	movs	r1, #136	@ 0x88
10054bb2:	5c41      	ldrb	r1, [r0, r1]
10054bb4:	3088      	adds	r0, #136	@ 0x88
10054bb6:	7880      	ldrb	r0, [r0, #2]
10054bb8:	4281      	cmp	r1, r0
10054bba:	d801      	bhi.n	10054bc0 <isr_Acl_Data_Indication_Queue_Full+0x14>
10054bbc:	2000      	movs	r0, #0
10054bbe:	4770      	bx	lr
10054bc0:	2001      	movs	r0, #1
10054bc2:	4770      	bx	lr

10054bc4 <__arm_cp.1_0>:
10054bc4:	20002470 	.word	0x20002470

10054bc8 <isr_Acl_Data_TX_Cmpl_Queue_Full>:
10054bc8:	4805      	ldr	r0, [pc, #20]	@ (10054be0 <__arm_cp.2_0>)
10054bca:	6800      	ldr	r0, [r0, #0]
10054bcc:	2189      	movs	r1, #137	@ 0x89
10054bce:	5c41      	ldrb	r1, [r0, r1]
10054bd0:	3089      	adds	r0, #137	@ 0x89
10054bd2:	7880      	ldrb	r0, [r0, #2]
10054bd4:	4281      	cmp	r1, r0
10054bd6:	d801      	bhi.n	10054bdc <isr_Acl_Data_TX_Cmpl_Queue_Full+0x14>
10054bd8:	2000      	movs	r0, #0
10054bda:	4770      	bx	lr
10054bdc:	2001      	movs	r0, #1
10054bde:	4770      	bx	lr

10054be0 <__arm_cp.2_0>:
10054be0:	20002470 	.word	0x20002470

10054be4 <Acl_Rcv_Pkt_Handler>:
10054be4:	b510      	push	{r4, lr}
10054be6:	4604      	mov	r4, r0
10054be8:	480a      	ldr	r0, [pc, #40]	@ (10054c14 <__arm_cp.5_0>)
10054bea:	6800      	ldr	r0, [r0, #0]
10054bec:	6900      	ldr	r0, [r0, #16]
10054bee:	2190      	movs	r1, #144	@ 0x90
10054bf0:	2201      	movs	r2, #1
10054bf2:	4613      	mov	r3, r2
10054bf4:	f000 fa7a 	bl	100550ec <aci_event_fifo_push_header>
10054bf8:	2800      	cmp	r0, #0
10054bfa:	d004      	beq.n	10054c06 <Acl_Rcv_Pkt_Handler+0x22>
10054bfc:	4601      	mov	r1, r0
10054bfe:	6044      	str	r4, [r0, #4]
10054c00:	2090      	movs	r0, #144	@ 0x90
10054c02:	f000 fb10 	bl	10055226 <aci_event_fifo_push>
10054c06:	4804      	ldr	r0, [pc, #16]	@ (10054c18 <__arm_cp.5_1>)
10054c08:	6800      	ldr	r0, [r0, #0]
10054c0a:	2188      	movs	r1, #136	@ 0x88
10054c0c:	5c42      	ldrb	r2, [r0, r1]
10054c0e:	1c52      	adds	r2, r2, #1
10054c10:	5442      	strb	r2, [r0, r1]
10054c12:	bd10      	pop	{r4, pc}

10054c14 <__arm_cp.5_0>:
10054c14:	20002420 	.word	0x20002420

10054c18 <__arm_cp.5_1>:
10054c18:	20002470 	.word	0x20002470

10054c1c <Acl_Tx_Cmpl_Pkt_Handler>:
10054c1c:	b510      	push	{r4, lr}
10054c1e:	4604      	mov	r4, r0
10054c20:	7a00      	ldrb	r0, [r0, #8]
10054c22:	21f7      	movs	r1, #247	@ 0xf7
10054c24:	4001      	ands	r1, r0
10054c26:	7221      	strb	r1, [r4, #8]
10054c28:	480a      	ldr	r0, [pc, #40]	@ (10054c54 <__arm_cp.6_0>)
10054c2a:	6800      	ldr	r0, [r0, #0]
10054c2c:	6900      	ldr	r0, [r0, #16]
10054c2e:	2190      	movs	r1, #144	@ 0x90
10054c30:	2200      	movs	r2, #0
10054c32:	2301      	movs	r3, #1
10054c34:	f000 fa5a 	bl	100550ec <aci_event_fifo_push_header>
10054c38:	2800      	cmp	r0, #0
10054c3a:	d004      	beq.n	10054c46 <Acl_Tx_Cmpl_Pkt_Handler+0x2a>
10054c3c:	4601      	mov	r1, r0
10054c3e:	6044      	str	r4, [r0, #4]
10054c40:	2090      	movs	r0, #144	@ 0x90
10054c42:	f000 faf0 	bl	10055226 <aci_event_fifo_push>
10054c46:	4804      	ldr	r0, [pc, #16]	@ (10054c58 <__arm_cp.6_1>)
10054c48:	6800      	ldr	r0, [r0, #0]
10054c4a:	2189      	movs	r1, #137	@ 0x89
10054c4c:	5c42      	ldrb	r2, [r0, r1]
10054c4e:	1c52      	adds	r2, r2, #1
10054c50:	5442      	strb	r2, [r0, r1]
10054c52:	bd10      	pop	{r4, pc}

10054c54 <__arm_cp.6_0>:
10054c54:	20002420 	.word	0x20002420

10054c58 <__arm_cp.6_1>:
10054c58:	20002470 	.word	0x20002470

10054c5c <Acl_Transmit_Data>:
10054c5c:	b510      	push	{r4, lr}
10054c5e:	2400      	movs	r4, #0
10054c60:	61c4      	str	r4, [r0, #28]
10054c62:	f006 fc0f 	bl	1005b484 <llc_conn_send_acl_data>
10054c66:	2884      	cmp	r0, #132	@ 0x84
10054c68:	d000      	beq.n	10054c6c <Acl_Transmit_Data+0x10>
10054c6a:	2481      	movs	r4, #129	@ 0x81
10054c6c:	4620      	mov	r0, r4
10054c6e:	bd10      	pop	{r4, pc}

10054c70 <hci_acl_data_tx_cmpl_event_int_cb>:
10054c70:	b5b0      	push	{r4, r5, r7, lr}
10054c72:	6809      	ldr	r1, [r1, #0]
10054c74:	2483      	movs	r4, #131	@ 0x83
10054c76:	2200      	movs	r2, #0
10054c78:	2900      	cmp	r1, #0
10054c7a:	d012      	beq.n	10054ca2 <hci_acl_data_tx_cmpl_event_int_cb+0x32>
10054c7c:	69cd      	ldr	r5, [r1, #28]
10054c7e:	2400      	movs	r4, #0
10054c80:	61cc      	str	r4, [r1, #28]
10054c82:	7a08      	ldrb	r0, [r1, #8]
10054c84:	06c0      	lsls	r0, r0, #27
10054c86:	d403      	bmi.n	10054c90 <hci_acl_data_tx_cmpl_event_int_cb+0x20>
10054c88:	2000      	movs	r0, #0
10054c8a:	f004 ff87 	bl	10059b9c <L2C_mux_acl_packet>
10054c8e:	e002      	b.n	10054c96 <hci_acl_data_tx_cmpl_event_int_cb+0x26>
10054c90:	4608      	mov	r0, r1
10054c92:	f004 faab 	bl	100591ec <hci_tx_acl_data_done>
10054c96:	2201      	movs	r2, #1
10054c98:	2800      	cmp	r0, #0
10054c9a:	4629      	mov	r1, r5
10054c9c:	d0ec      	beq.n	10054c78 <hci_acl_data_tx_cmpl_event_int_cb+0x8>
10054c9e:	2483      	movs	r4, #131	@ 0x83
10054ca0:	e00c      	b.n	10054cbc <hci_acl_data_tx_cmpl_event_int_cb+0x4c>
10054ca2:	07d0      	lsls	r0, r2, #31
10054ca4:	d00a      	beq.n	10054cbc <hci_acl_data_tx_cmpl_event_int_cb+0x4c>
10054ca6:	f3ef 8010 	mrs	r0, PRIMASK
10054caa:	b672      	cpsid	i
10054cac:	4804      	ldr	r0, [pc, #16]	@ (10054cc0 <__arm_cp.9_0>)
10054cae:	6800      	ldr	r0, [r0, #0]
10054cb0:	2189      	movs	r1, #137	@ 0x89
10054cb2:	5c42      	ldrb	r2, [r0, r1]
10054cb4:	1e52      	subs	r2, r2, #1
10054cb6:	5442      	strb	r2, [r0, r1]
10054cb8:	b662      	cpsie	i
10054cba:	2400      	movs	r4, #0
10054cbc:	b2e0      	uxtb	r0, r4
10054cbe:	bdb0      	pop	{r4, r5, r7, pc}

10054cc0 <__arm_cp.9_0>:
10054cc0:	20002470 	.word	0x20002470

10054cc4 <hci_acl_data_ind_event_int_cb>:
10054cc4:	b580      	push	{r7, lr}
10054cc6:	480e      	ldr	r0, [pc, #56]	@ (10054d00 <__arm_cp.11_0>)
10054cc8:	6800      	ldr	r0, [r0, #0]
10054cca:	222c      	movs	r2, #44	@ 0x2c
10054ccc:	5c80      	ldrb	r0, [r0, r2]
10054cce:	07c0      	lsls	r0, r0, #31
10054cd0:	6808      	ldr	r0, [r1, #0]
10054cd2:	d102      	bne.n	10054cda <hci_acl_data_ind_event_int_cb+0x16>
10054cd4:	f004 fed4 	bl	10059a80 <L2C_receive_data>
10054cd8:	e001      	b.n	10054cde <hci_acl_data_ind_event_int_cb+0x1a>
10054cda:	f004 fa53 	bl	10059184 <hci_rx_acl_data>
10054cde:	2800      	cmp	r0, #0
10054ce0:	d001      	beq.n	10054ce6 <hci_acl_data_ind_event_int_cb+0x22>
10054ce2:	2083      	movs	r0, #131	@ 0x83
10054ce4:	bd80      	pop	{r7, pc}
10054ce6:	f3ef 8010 	mrs	r0, PRIMASK
10054cea:	b672      	cpsid	i
10054cec:	4805      	ldr	r0, [pc, #20]	@ (10054d04 <__arm_cp.11_1>)
10054cee:	6800      	ldr	r0, [r0, #0]
10054cf0:	2188      	movs	r1, #136	@ 0x88
10054cf2:	5c42      	ldrb	r2, [r0, r1]
10054cf4:	1e52      	subs	r2, r2, #1
10054cf6:	5442      	strb	r2, [r0, r1]
10054cf8:	b662      	cpsie	i
10054cfa:	2000      	movs	r0, #0
10054cfc:	bd80      	pop	{r7, pc}
10054cfe:	46c0      	nop			@ (mov r8, r8)

10054d00 <__arm_cp.11_0>:
10054d00:	2000241c 	.word	0x2000241c

10054d04 <__arm_cp.11_1>:
10054d04:	20002470 	.word	0x20002470

10054d08 <ACL_pkt_init>:
10054d08:	b570      	push	{r4, r5, r6, lr}
10054d0a:	4c0b      	ldr	r4, [pc, #44]	@ (10054d38 <__arm_cp.1_0>)
10054d0c:	2501      	movs	r5, #1
10054d0e:	2204      	movs	r2, #4
10054d10:	4620      	mov	r0, r4
10054d12:	4629      	mov	r1, r5
10054d14:	f00b ff4c 	bl	10060bb0 <csmem_mem_assign>
10054d18:	4e08      	ldr	r6, [pc, #32]	@ (10054d3c <__arm_cp.1_1>)
10054d1a:	6030      	str	r0, [r6, #0]
10054d1c:	2206      	movs	r2, #6
10054d1e:	4620      	mov	r0, r4
10054d20:	4629      	mov	r1, r5
10054d22:	f00b ff45 	bl	10060bb0 <csmem_mem_assign>
10054d26:	6831      	ldr	r1, [r6, #0]
10054d28:	6008      	str	r0, [r1, #0]
10054d2a:	6830      	ldr	r0, [r6, #0]
10054d2c:	6801      	ldr	r1, [r0, #0]
10054d2e:	2000      	movs	r0, #0
10054d30:	8088      	strh	r0, [r1, #4]
10054d32:	8048      	strh	r0, [r1, #2]
10054d34:	7008      	strb	r0, [r1, #0]
10054d36:	bd70      	pop	{r4, r5, r6, pc}

10054d38 <__arm_cp.1_0>:
10054d38:	20002480 	.word	0x20002480

10054d3c <__arm_cp.1_1>:
10054d3c:	20002418 	.word	0x20002418

10054d40 <ACL_pkt_get>:
10054d40:	b5b0      	push	{r4, r5, r7, lr}
10054d42:	460d      	mov	r5, r1
10054d44:	4604      	mov	r4, r0
10054d46:	1e41      	subs	r1, r0, #1
10054d48:	4188      	sbcs	r0, r1
10054d4a:	1e51      	subs	r1, r2, #1
10054d4c:	221f      	movs	r2, #31
10054d4e:	430a      	orrs	r2, r1
10054d50:	3221      	adds	r2, #33	@ 0x21
10054d52:	b291      	uxth	r1, r2
10054d54:	f00b fe0a 	bl	1006096c <MBM_get>
10054d58:	2800      	cmp	r0, #0
10054d5a:	d006      	beq.n	10054d6a <ACL_pkt_get+0x2a>
10054d5c:	8085      	strh	r5, [r0, #4]
10054d5e:	6801      	ldr	r1, [r0, #0]
10054d60:	6081      	str	r1, [r0, #8]
10054d62:	2c00      	cmp	r4, #0
10054d64:	d103      	bne.n	10054d6e <ACL_pkt_get+0x2e>
10054d66:	2140      	movs	r1, #64	@ 0x40
10054d68:	e003      	b.n	10054d72 <ACL_pkt_get+0x32>
10054d6a:	2000      	movs	r0, #0
10054d6c:	bdb0      	pop	{r4, r5, r7, pc}
10054d6e:	217f      	movs	r1, #127	@ 0x7f
10054d70:	43c9      	mvns	r1, r1
10054d72:	7301      	strb	r1, [r0, #12]
10054d74:	1d00      	adds	r0, r0, #4
10054d76:	bdb0      	pop	{r4, r5, r7, pc}

10054d78 <ACL_pkt_get_available_mem_buffers>:
10054d78:	b580      	push	{r7, lr}
10054d7a:	1e41      	subs	r1, r0, #1
10054d7c:	4188      	sbcs	r0, r1
10054d7e:	f00b fe5d 	bl	10060a3c <MBM_get_available_mem_buffers>
10054d82:	bd80      	pop	{r7, pc}

10054d84 <ACL_pkt_release>:
10054d84:	b580      	push	{r7, lr}
10054d86:	7a01      	ldrb	r1, [r0, #8]
10054d88:	098a      	lsrs	r2, r1, #6
10054d8a:	2101      	movs	r1, #1
10054d8c:	4391      	bics	r1, r2
10054d8e:	1f00      	subs	r0, r0, #4
10054d90:	f00b fe26 	bl	100609e0 <MBM_release>
10054d94:	bd80      	pop	{r7, pc}

10054d96 <ACL_pkt_resize>:
10054d96:	b580      	push	{r7, lr}
10054d98:	460a      	mov	r2, r1
10054d9a:	7a01      	ldrb	r1, [r0, #8]
10054d9c:	098b      	lsrs	r3, r1, #6
10054d9e:	2101      	movs	r1, #1
10054da0:	4399      	bics	r1, r3
10054da2:	6840      	ldr	r0, [r0, #4]
10054da4:	f00b fe5e 	bl	10060a64 <MBM_resize>
10054da8:	bd80      	pop	{r7, pc}

10054daa <ACL_pkt_cmp>:
10054daa:	b510      	push	{r4, lr}
10054dac:	4614      	mov	r4, r2
10054dae:	460a      	mov	r2, r1
10054db0:	6840      	ldr	r0, [r0, #4]
10054db2:	4619      	mov	r1, r3
10054db4:	4623      	mov	r3, r4
10054db6:	f00c f82f 	bl	10060e18 <Mem_Buff_cmp>
10054dba:	bd10      	pop	{r4, pc}

10054dbc <ACL_pkt_read>:
10054dbc:	b510      	push	{r4, lr}
10054dbe:	4614      	mov	r4, r2
10054dc0:	460a      	mov	r2, r1
10054dc2:	6840      	ldr	r0, [r0, #4]
10054dc4:	4619      	mov	r1, r3
10054dc6:	4623      	mov	r3, r4
10054dc8:	f00b ffed 	bl	10060da6 <Mem_Buff_read>
10054dcc:	bd10      	pop	{r4, pc}

10054dce <ACL_pkt_read_16b>:
10054dce:	b5e0      	push	{r5, r6, r7, lr}
10054dd0:	2202      	movs	r2, #2
10054dd2:	ab01      	add	r3, sp, #4
10054dd4:	f7ff fff2 	bl	10054dbc <ACL_pkt_read>
10054dd8:	2800      	cmp	r0, #0
10054dda:	d001      	beq.n	10054de0 <ACL_pkt_read_16b+0x12>
10054ddc:	2000      	movs	r0, #0
10054dde:	e004      	b.n	10054dea <ACL_pkt_read_16b+0x1c>
10054de0:	a801      	add	r0, sp, #4
10054de2:	7801      	ldrb	r1, [r0, #0]
10054de4:	7840      	ldrb	r0, [r0, #1]
10054de6:	0200      	lsls	r0, r0, #8
10054de8:	1840      	adds	r0, r0, r1
10054dea:	b280      	uxth	r0, r0
10054dec:	bd8c      	pop	{r2, r3, r7, pc}

10054dee <ACL_pkt_write_16b>:
10054dee:	b5e0      	push	{r5, r6, r7, lr}
10054df0:	ab01      	add	r3, sp, #4
10054df2:	701a      	strb	r2, [r3, #0]
10054df4:	0a12      	lsrs	r2, r2, #8
10054df6:	705a      	strb	r2, [r3, #1]
10054df8:	2202      	movs	r2, #2
10054dfa:	f000 f801 	bl	10054e00 <ACL_pkt_write>
10054dfe:	bd8c      	pop	{r2, r3, r7, pc}

10054e00 <ACL_pkt_write>:
10054e00:	b510      	push	{r4, lr}
10054e02:	4614      	mov	r4, r2
10054e04:	460a      	mov	r2, r1
10054e06:	6840      	ldr	r0, [r0, #4]
10054e08:	4619      	mov	r1, r3
10054e0a:	4623      	mov	r3, r4
10054e0c:	f00b ff91 	bl	10060d32 <Mem_Buff_write>
10054e10:	bd10      	pop	{r4, pc}

10054e12 <ACL_pkt_extract_pdu>:
10054e12:	1f01      	subs	r1, r0, #4
10054e14:	2200      	movs	r2, #0
10054e16:	600a      	str	r2, [r1, #0]
10054e18:	6840      	ldr	r0, [r0, #4]
10054e1a:	4770      	bx	lr

10054e1c <ACL_pkt_connection>:
10054e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054e1e:	480f      	ldr	r0, [pc, #60]	@ (10054e5c <__arm_cp.14_0>)
10054e20:	6800      	ldr	r0, [r0, #0]
10054e22:	6805      	ldr	r5, [r0, #0]
10054e24:	7828      	ldrb	r0, [r5, #0]
10054e26:	1c41      	adds	r1, r0, #1
10054e28:	7029      	strb	r1, [r5, #0]
10054e2a:	4f0d      	ldr	r7, [pc, #52]	@ (10054e60 <__arm_cp.14_1>)
10054e2c:	8a39      	ldrh	r1, [r7, #16]
10054e2e:	3125      	adds	r1, #37	@ 0x25
10054e30:	094e      	lsrs	r6, r1, #5
10054e32:	1c74      	adds	r4, r6, #1
10054e34:	2800      	cmp	r0, #0
10054e36:	d109      	bne.n	10054e4c <ACL_pkt_connection+0x30>
10054e38:	2000      	movs	r0, #0
10054e3a:	4621      	mov	r1, r4
10054e3c:	f00b fe4e 	bl	10060adc <MBM_reserve>
10054e40:	8a38      	ldrh	r0, [r7, #16]
10054e42:	3025      	adds	r0, #37	@ 0x25
10054e44:	0940      	lsrs	r0, r0, #5
10054e46:	1c40      	adds	r0, r0, #1
10054e48:	8068      	strh	r0, [r5, #2]
10054e4a:	1cb4      	adds	r4, r6, #2
10054e4c:	2001      	movs	r0, #1
10054e4e:	4621      	mov	r1, r4
10054e50:	f00b fe44 	bl	10060adc <MBM_reserve>
10054e54:	88a8      	ldrh	r0, [r5, #4]
10054e56:	1900      	adds	r0, r0, r4
10054e58:	80a8      	strh	r0, [r5, #4]
10054e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10054e5c <__arm_cp.14_0>:
10054e5c:	20002418 	.word	0x20002418

10054e60 <__arm_cp.14_1>:
10054e60:	20002484 	.word	0x20002484

10054e64 <ACL_pkt_disconnection>:
10054e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054e66:	480e      	ldr	r0, [pc, #56]	@ (10054ea0 <__arm_cp.15_0>)
10054e68:	6800      	ldr	r0, [r0, #0]
10054e6a:	6806      	ldr	r6, [r0, #0]
10054e6c:	7830      	ldrb	r0, [r6, #0]
10054e6e:	1e40      	subs	r0, r0, #1
10054e70:	7030      	strb	r0, [r6, #0]
10054e72:	490c      	ldr	r1, [pc, #48]	@ (10054ea4 <__arm_cp.15_1>)
10054e74:	8a09      	ldrh	r1, [r1, #16]
10054e76:	3125      	adds	r1, #37	@ 0x25
10054e78:	094f      	lsrs	r7, r1, #5
10054e7a:	1c7c      	adds	r4, r7, #1
10054e7c:	0600      	lsls	r0, r0, #24
10054e7e:	d106      	bne.n	10054e8e <ACL_pkt_disconnection+0x2a>
10054e80:	2500      	movs	r5, #0
10054e82:	4628      	mov	r0, r5
10054e84:	4621      	mov	r1, r4
10054e86:	f00b fe7d 	bl	10060b84 <MBM_unreserve>
10054e8a:	8075      	strh	r5, [r6, #2]
10054e8c:	1cbc      	adds	r4, r7, #2
10054e8e:	2001      	movs	r0, #1
10054e90:	4621      	mov	r1, r4
10054e92:	f00b fe77 	bl	10060b84 <MBM_unreserve>
10054e96:	88b0      	ldrh	r0, [r6, #4]
10054e98:	1b00      	subs	r0, r0, r4
10054e9a:	80b0      	strh	r0, [r6, #4]
10054e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10054e9e:	46c0      	nop			@ (mov r8, r8)

10054ea0 <__arm_cp.15_0>:
10054ea0:	20002418 	.word	0x20002418

10054ea4 <__arm_cp.15_1>:
10054ea4:	20002484 	.word	0x20002484

10054ea8 <BLE_STACK_Tick>:
10054ea8:	b580      	push	{r7, lr}
10054eaa:	f00d fc35 	bl	10062718 <tsk_scheduler>
10054eae:	bd80      	pop	{r7, pc}

10054eb0 <BlueNRG_Stack_Initialize_Layers>:
10054eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
10054eb2:	b08f      	sub	sp, #60	@ 0x3c
10054eb4:	9309      	str	r3, [sp, #36]	@ 0x24
10054eb6:	920b      	str	r2, [sp, #44]	@ 0x2c
10054eb8:	910a      	str	r1, [sp, #40]	@ 0x28
10054eba:	9008      	str	r0, [sp, #32]
10054ebc:	f00b fe72 	bl	10060ba4 <csmem_init>
10054ec0:	2401      	movs	r4, #1
10054ec2:	2138      	movs	r1, #56	@ 0x38
10054ec4:	4620      	mov	r0, r4
10054ec6:	f00b fe85 	bl	10060bd4 <csmem_mem_0_assign>
10054eca:	4933      	ldr	r1, [pc, #204]	@ (10054f98 <__arm_cp.1_0>)
10054ecc:	7ac9      	ldrb	r1, [r1, #11]
10054ece:	2234      	movs	r2, #52	@ 0x34
10054ed0:	5481      	strb	r1, [r0, r2]
10054ed2:	4e32      	ldr	r6, [pc, #200]	@ (10054f9c <__arm_cp.1_1>)
10054ed4:	6030      	str	r0, [r6, #0]
10054ed6:	2700      	movs	r7, #0
10054ed8:	7007      	strb	r7, [r0, #0]
10054eda:	6830      	ldr	r0, [r6, #0]
10054edc:	7047      	strb	r7, [r0, #1]
10054ede:	6830      	ldr	r0, [r6, #0]
10054ee0:	7087      	strb	r7, [r0, #2]
10054ee2:	6830      	ldr	r0, [r6, #0]
10054ee4:	21e1      	movs	r1, #225	@ 0xe1
10054ee6:	70c1      	strb	r1, [r0, #3]
10054ee8:	2005      	movs	r0, #5
10054eea:	01c0      	lsls	r0, r0, #7
10054eec:	6831      	ldr	r1, [r6, #0]
10054eee:	8088      	strh	r0, [r1, #4]
10054ef0:	2030      	movs	r0, #48	@ 0x30
10054ef2:	8508      	strh	r0, [r1, #40]	@ 0x28
10054ef4:	ad0e      	add	r5, sp, #56	@ 0x38
10054ef6:	a90d      	add	r1, sp, #52	@ 0x34
10054ef8:	aa0c      	add	r2, sp, #48	@ 0x30
10054efa:	4628      	mov	r0, r5
10054efc:	f7fd fbdb 	bl	100526b6 <BLEPLAT_GetPartInfo>
10054f00:	980c      	ldr	r0, [sp, #48]	@ 0x30
10054f02:	0200      	lsls	r0, r0, #8
10054f04:	7829      	ldrb	r1, [r5, #0]
10054f06:	0109      	lsls	r1, r1, #4
10054f08:	4301      	orrs	r1, r0
10054f0a:	980d      	ldr	r0, [sp, #52]	@ 0x34
10054f0c:	0300      	lsls	r0, r0, #12
10054f0e:	4308      	orrs	r0, r1
10054f10:	1d00      	adds	r0, r0, #4
10054f12:	6831      	ldr	r1, [r6, #0]
10054f14:	8548      	strh	r0, [r1, #42]	@ 0x2a
10054f16:	2118      	movs	r1, #24
10054f18:	4620      	mov	r0, r4
10054f1a:	f00b fe5b 	bl	10060bd4 <csmem_mem_0_assign>
10054f1e:	4920      	ldr	r1, [pc, #128]	@ (10054fa0 <__arm_cp.1_2>)
10054f20:	6008      	str	r0, [r1, #0]
10054f22:	7507      	strb	r7, [r0, #20]
10054f24:	f00d fbee 	bl	10062704 <tsk_init>
10054f28:	981c      	ldr	r0, [sp, #112]	@ 0x70
10054f2a:	9006      	str	r0, [sp, #24]
10054f2c:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
10054f2e:	9405      	str	r4, [sp, #20]
10054f30:	981a      	ldr	r0, [sp, #104]	@ 0x68
10054f32:	9004      	str	r0, [sp, #16]
10054f34:	9819      	ldr	r0, [sp, #100]	@ 0x64
10054f36:	9003      	str	r0, [sp, #12]
10054f38:	9818      	ldr	r0, [sp, #96]	@ 0x60
10054f3a:	9002      	str	r0, [sp, #8]
10054f3c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
10054f3e:	9001      	str	r0, [sp, #4]
10054f40:	9d15      	ldr	r5, [sp, #84]	@ 0x54
10054f42:	9500      	str	r5, [sp, #0]
10054f44:	9808      	ldr	r0, [sp, #32]
10054f46:	990a      	ldr	r1, [sp, #40]	@ 0x28
10054f48:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
10054f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10054f4c:	f7f9 ff9b 	bl	1004ee86 <LL_init_ucfg>
10054f50:	f7f9 feae 	bl	1004ecb0 <MBM_init_ucfg>
10054f54:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
10054f56:	2c01      	cmp	r4, #1
10054f58:	d101      	bne.n	10054f5e <BlueNRG_Stack_Initialize_Layers+0xae>
10054f5a:	f7f9 fe21 	bl	1004eba0 <ACL_pkt_init_ucfg>
10054f5e:	f000 f98b 	bl	10055278 <Events_Process_init>
10054f62:	2f01      	cmp	r7, #1
10054f64:	d101      	bne.n	10054f6a <BlueNRG_Stack_Initialize_Layers+0xba>
10054f66:	f000 f8bb 	bl	100550e0 <log_init_ucfg_weak>
10054f6a:	6830      	ldr	r0, [r6, #0]
10054f6c:	212c      	movs	r1, #44	@ 0x2c
10054f6e:	5c40      	ldrb	r0, [r0, r1]
10054f70:	07c0      	lsls	r0, r0, #31
10054f72:	d10e      	bne.n	10054f92 <BlueNRG_Stack_Initialize_Layers+0xe2>
10054f74:	2c01      	cmp	r4, #1
10054f76:	d106      	bne.n	10054f86 <BlueNRG_Stack_Initialize_Layers+0xd6>
10054f78:	9816      	ldr	r0, [sp, #88]	@ 0x58
10054f7a:	f7f9 febe 	bl	1004ecfa <L2C_init_ucfg>
10054f7e:	f7f9 ffde 	bl	1004ef3e <smp_init_ucfg>
10054f82:	f7f9 ffe3 	bl	1004ef4c <GAT_att_cmn_init_ucfg>
10054f86:	980a      	ldr	r0, [sp, #40]	@ 0x28
10054f88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10054f8a:	462a      	mov	r2, r5
10054f8c:	4623      	mov	r3, r4
10054f8e:	f000 ff03 	bl	10055d98 <GAP_init_context>
10054f92:	b00f      	add	sp, #60	@ 0x3c
10054f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
10054f96:	46c0      	nop			@ (mov r8, r8)

10054f98 <__arm_cp.1_0>:
10054f98:	20002484 	.word	0x20002484

10054f9c <__arm_cp.1_1>:
10054f9c:	2000241c 	.word	0x2000241c

10054fa0 <__arm_cp.1_2>:
10054fa0:	200024c4 	.word	0x200024c4

10054fa4 <_BlueNRG_Stack_Initialization>:
10054fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
10054fa6:	b095      	sub	sp, #84	@ 0x54
10054fa8:	2001      	movs	r0, #1
10054faa:	0481      	lsls	r1, r0, #18
10054fac:	9114      	str	r1, [sp, #80]	@ 0x50
10054fae:	482e      	ldr	r0, [pc, #184]	@ (10055068 <__arm_cp.2_0>)
10054fb0:	6001      	str	r1, [r0, #0]
10054fb2:	f3bf 8f4f 	dsb	sy
10054fb6:	f3bf 8f6f 	isb	sy
10054fba:	f7fe fbbb 	bl	10053734 <BLEPLAT_CNTR_GlobDisableBlue>
10054fbe:	f7fd fc55 	bl	1005286c <BLEPLAT_ClearRadioTimerValue>
10054fc2:	2000      	movs	r0, #0
10054fc4:	9012      	str	r0, [sp, #72]	@ 0x48
10054fc6:	43c0      	mvns	r0, r0
10054fc8:	f7fe fba0 	bl	1005370c <BLEPLAT_CNTR_ClearInterrupt>
10054fcc:	f004 fade 	bl	1005958c <data_length_extension_csr_ucfg_weak>
10054fd0:	9013      	str	r0, [sp, #76]	@ 0x4c
10054fd2:	f7f9 fdd5 	bl	1004eb80 <phy_upd_csr_ucfg>
10054fd6:	9011      	str	r0, [sp, #68]	@ 0x44
10054fd8:	f00a fe64 	bl	1005fca4 <ext_adv_scan_enabled_ucfg_weak>
10054fdc:	9010      	str	r0, [sp, #64]	@ 0x40
10054fde:	f006 fd2c 	bl	1005ba3a <llc_priv_controller_privacy_csr_ucfg_weak>
10054fe2:	900f      	str	r0, [sp, #60]	@ 0x3c
10054fe4:	f00d f98f 	bl	10062306 <secure_connections_csr_ucfg_weak>
10054fe8:	f004 fad6 	bl	10059598 <scan_csr_ucfg_weak>
10054fec:	900e      	str	r0, [sp, #56]	@ 0x38
10054fee:	f004 fc99 	bl	10059924 <l2c_cos_csr_ucfg_weak>
10054ff2:	900d      	str	r0, [sp, #52]	@ 0x34
10054ff4:	f006 fd18 	bl	1005ba28 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10054ff8:	900c      	str	r0, [sp, #48]	@ 0x30
10054ffa:	f006 fd17 	bl	1005ba2c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
10054ffe:	900b      	str	r0, [sp, #44]	@ 0x2c
10055000:	f004 fa68 	bl	100594d4 <cte_csr_ucfg_weak>
10055004:	4604      	mov	r4, r0
10055006:	f004 fac3 	bl	10059590 <pcl_csr_ucfg_weak>
1005500a:	4605      	mov	r5, r0
1005500c:	f7f9 fdc0 	bl	1004eb90 <conn_supp_csr_ucfg>
10055010:	4606      	mov	r6, r0
10055012:	f004 f96a 	bl	100592ea <chc_csr_ucfg_weak>
10055016:	4607      	mov	r7, r0
10055018:	f000 f865 	bl	100550e6 <log_csr_ucfg_weak>
1005501c:	b2c0      	uxtb	r0, r0
1005501e:	b2f9      	uxtb	r1, r7
10055020:	9108      	str	r1, [sp, #32]
10055022:	9009      	str	r0, [sp, #36]	@ 0x24
10055024:	b2f0      	uxtb	r0, r6
10055026:	b2e9      	uxtb	r1, r5
10055028:	b2e2      	uxtb	r2, r4
1005502a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1005502c:	b2db      	uxtb	r3, r3
1005502e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10055030:	b2e4      	uxtb	r4, r4
10055032:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10055034:	b2ed      	uxtb	r5, r5
10055036:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
10055038:	b2f6      	uxtb	r6, r6
1005503a:	9f12      	ldr	r7, [sp, #72]	@ 0x48
1005503c:	9700      	str	r7, [sp, #0]
1005503e:	9601      	str	r6, [sp, #4]
10055040:	9502      	str	r5, [sp, #8]
10055042:	9403      	str	r4, [sp, #12]
10055044:	9304      	str	r3, [sp, #16]
10055046:	9205      	str	r2, [sp, #20]
10055048:	9106      	str	r1, [sp, #24]
1005504a:	9007      	str	r0, [sp, #28]
1005504c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1005504e:	b2c0      	uxtb	r0, r0
10055050:	9911      	ldr	r1, [sp, #68]	@ 0x44
10055052:	b2c9      	uxtb	r1, r1
10055054:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
10055056:	b2d3      	uxtb	r3, r2
10055058:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1005505a:	f7ff ff29 	bl	10054eb0 <BlueNRG_Stack_Initialize_Layers>
1005505e:	4803      	ldr	r0, [pc, #12]	@ (1005506c <__arm_cp.2_1>)
10055060:	9914      	ldr	r1, [sp, #80]	@ 0x50
10055062:	6001      	str	r1, [r0, #0]
10055064:	b015      	add	sp, #84	@ 0x54
10055066:	bdf0      	pop	{r4, r5, r6, r7, pc}

10055068 <__arm_cp.2_0>:
10055068:	e000e180 	.word	0xe000e180

1005506c <__arm_cp.2_1>:
1005506c:	e000e100 	.word	0xe000e100

10055070 <BLE_STACK_Init>:
10055070:	b5b0      	push	{r4, r5, r7, lr}
10055072:	4605      	mov	r5, r0
10055074:	7ac0      	ldrb	r0, [r0, #11]
10055076:	2412      	movs	r4, #18
10055078:	2880      	cmp	r0, #128	@ 0x80
1005507a:	d829      	bhi.n	100550d0 <BLE_STACK_Init+0x60>
1005507c:	8c29      	ldrh	r1, [r5, #32]
1005507e:	2917      	cmp	r1, #23
10055080:	d326      	bcc.n	100550d0 <BLE_STACK_Init+0x60>
10055082:	4814      	ldr	r0, [pc, #80]	@ (100550d4 <__arm_cp.3_0>)
10055084:	1d82      	adds	r2, r0, #6
10055086:	4291      	cmp	r1, r2
10055088:	d822      	bhi.n	100550d0 <BLE_STACK_Init+0x60>
1005508a:	8a29      	ldrh	r1, [r5, #16]
1005508c:	2917      	cmp	r1, #23
1005508e:	d31f      	bcc.n	100550d0 <BLE_STACK_Init+0x60>
10055090:	4281      	cmp	r1, r0
10055092:	d81d      	bhi.n	100550d0 <BLE_STACK_Init+0x60>
10055094:	7ea8      	ldrb	r0, [r5, #26]
10055096:	2800      	cmp	r0, #0
10055098:	d01a      	beq.n	100550d0 <BLE_STACK_Init+0x60>
1005509a:	f006 fcc7 	bl	1005ba2c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005509e:	2800      	cmp	r0, #0
100550a0:	d008      	beq.n	100550b4 <BLE_STACK_Init+0x44>
100550a2:	7ee8      	ldrb	r0, [r5, #27]
100550a4:	2800      	cmp	r0, #0
100550a6:	d013      	beq.n	100550d0 <BLE_STACK_Init+0x60>
100550a8:	2880      	cmp	r0, #128	@ 0x80
100550aa:	d811      	bhi.n	100550d0 <BLE_STACK_Init+0x60>
100550ac:	7f28      	ldrb	r0, [r5, #28]
100550ae:	1e40      	subs	r0, r0, #1
100550b0:	280e      	cmp	r0, #14
100550b2:	d80d      	bhi.n	100550d0 <BLE_STACK_Init+0x60>
100550b4:	4808      	ldr	r0, [pc, #32]	@ (100550d8 <__arm_cp.3_1>)
100550b6:	2234      	movs	r2, #52	@ 0x34
100550b8:	4629      	mov	r1, r5
100550ba:	f7fd facb 	bl	10052654 <BLEPLAT_MemCpy>
100550be:	f00b ff23 	bl	10060f08 <BlueNRG_Stack_Initialize_RAM_check>
100550c2:	2800      	cmp	r0, #0
100550c4:	d403      	bmi.n	100550ce <BLE_STACK_Init+0x5e>
100550c6:	f7ff ff6d 	bl	10054fa4 <_BlueNRG_Stack_Initialization>
100550ca:	2400      	movs	r4, #0
100550cc:	e000      	b.n	100550d0 <BLE_STACK_Init+0x60>
100550ce:	2487      	movs	r4, #135	@ 0x87
100550d0:	4620      	mov	r0, r4
100550d2:	bdb0      	pop	{r4, r5, r7, pc}

100550d4 <__arm_cp.3_0>:
100550d4:	000003fa 	.word	0x000003fa

100550d8 <__arm_cp.3_1>:
100550d8:	20002484 	.word	0x20002484

100550dc <log_verbosity_set_ucfg_weak>:
100550dc:	2000      	movs	r0, #0
100550de:	4770      	bx	lr

100550e0 <log_init_ucfg_weak>:
100550e0:	4770      	bx	lr

100550e2 <log_notify_stu_ucfg_weak>:
100550e2:	4770      	bx	lr

100550e4 <log_notify_us_flush_ucfg_weak>:
100550e4:	4770      	bx	lr

100550e6 <log_csr_ucfg_weak>:
100550e6:	2000      	movs	r0, #0
100550e8:	4770      	bx	lr
	...

100550ec <aci_event_fifo_push_header>:
100550ec:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100550ee:	4615      	mov	r5, r2
100550f0:	460c      	mov	r4, r1
100550f2:	4606      	mov	r6, r0
100550f4:	0608      	lsls	r0, r1, #24
100550f6:	d414      	bmi.n	10055122 <aci_event_fifo_push_header+0x36>
100550f8:	aa02      	add	r2, sp, #8
100550fa:	af01      	add	r7, sp, #4
100550fc:	4630      	mov	r0, r6
100550fe:	4619      	mov	r1, r3
10055100:	463b      	mov	r3, r7
10055102:	f000 f853 	bl	100551ac <fifoBuf_getFreeHeader>
10055106:	2800      	cmp	r0, #0
10055108:	d021      	beq.n	1005514e <aci_event_fifo_push_header+0x62>
1005510a:	0660      	lsls	r0, r4, #25
1005510c:	d438      	bmi.n	10055180 <aci_event_fifo_push_header+0x94>
1005510e:	9802      	ldr	r0, [sp, #8]
10055110:	7881      	ldrb	r1, [r0, #2]
10055112:	22fc      	movs	r2, #252	@ 0xfc
10055114:	400a      	ands	r2, r1
10055116:	7082      	strb	r2, [r0, #2]
10055118:	9901      	ldr	r1, [sp, #4]
1005511a:	8001      	strh	r1, [r0, #0]
1005511c:	8071      	strh	r1, [r6, #2]
1005511e:	2701      	movs	r7, #1
10055120:	e02f      	b.n	10055182 <aci_event_fifo_push_header+0x96>
10055122:	f3ef 8010 	mrs	r0, PRIMASK
10055126:	b672      	cpsid	i
10055128:	aa02      	add	r2, sp, #8
1005512a:	af01      	add	r7, sp, #4
1005512c:	4630      	mov	r0, r6
1005512e:	4619      	mov	r1, r3
10055130:	463b      	mov	r3, r7
10055132:	f000 f83b 	bl	100551ac <fifoBuf_getFreeHeader>
10055136:	2800      	cmp	r0, #0
10055138:	d00b      	beq.n	10055152 <aci_event_fifo_push_header+0x66>
1005513a:	9902      	ldr	r1, [sp, #8]
1005513c:	788a      	ldrb	r2, [r1, #2]
1005513e:	23fc      	movs	r3, #252	@ 0xfc
10055140:	4013      	ands	r3, r2
10055142:	708b      	strb	r3, [r1, #2]
10055144:	9a01      	ldr	r2, [sp, #4]
10055146:	800a      	strh	r2, [r1, #0]
10055148:	8072      	strh	r2, [r6, #2]
1005514a:	2701      	movs	r7, #1
1005514c:	e002      	b.n	10055154 <aci_event_fifo_push_header+0x68>
1005514e:	2700      	movs	r7, #0
10055150:	e003      	b.n	1005515a <aci_event_fifo_push_header+0x6e>
10055152:	2700      	movs	r7, #0
10055154:	b662      	cpsie	i
10055156:	2800      	cmp	r0, #0
10055158:	d113      	bne.n	10055182 <aci_event_fifo_push_header+0x96>
1005515a:	f3ef 8010 	mrs	r0, PRIMASK
1005515e:	b672      	cpsid	i
10055160:	06a0      	lsls	r0, r4, #26
10055162:	d40a      	bmi.n	1005517a <aci_event_fifo_push_header+0x8e>
10055164:	4810      	ldr	r0, [pc, #64]	@ (100551a8 <__arm_cp.0_0>)
10055166:	6800      	ldr	r0, [r0, #0]
10055168:	6801      	ldr	r1, [r0, #0]
1005516a:	2208      	movs	r2, #8
1005516c:	430a      	orrs	r2, r1
1005516e:	6002      	str	r2, [r0, #0]
10055170:	2000      	movs	r0, #0
10055172:	f00d fb05 	bl	10062780 <tsk_notify_idx>
10055176:	f7fc fc86 	bl	10051a86 <BLE_STACK_ProcessRequest>
1005517a:	b662      	cpsie	i
1005517c:	2600      	movs	r6, #0
1005517e:	e00a      	b.n	10055196 <aci_event_fifo_push_header+0xaa>
10055180:	2700      	movs	r7, #0
10055182:	9e02      	ldr	r6, [sp, #8]
10055184:	70f5      	strb	r5, [r6, #3]
10055186:	00a0      	lsls	r0, r4, #2
10055188:	2160      	movs	r1, #96	@ 0x60
1005518a:	4001      	ands	r1, r0
1005518c:	78b0      	ldrb	r0, [r6, #2]
1005518e:	2203      	movs	r2, #3
10055190:	4002      	ands	r2, r0
10055192:	1850      	adds	r0, r2, r1
10055194:	70b0      	strb	r0, [r6, #2]
10055196:	2f00      	cmp	r7, #0
10055198:	d004      	beq.n	100551a4 <aci_event_fifo_push_header+0xb8>
1005519a:	2000      	movs	r0, #0
1005519c:	f00d faf0 	bl	10062780 <tsk_notify_idx>
100551a0:	f7fc fc71 	bl	10051a86 <BLE_STACK_ProcessRequest>
100551a4:	4630      	mov	r0, r6
100551a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100551a8 <__arm_cp.0_0>:
100551a8:	20002420 	.word	0x20002420

100551ac <fifoBuf_getFreeHeader>:
100551ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100551ae:	9200      	str	r2, [sp, #0]
100551b0:	8845      	ldrh	r5, [r0, #2]
100551b2:	08ac      	lsrs	r4, r5, #2
100551b4:	801c      	strh	r4, [r3, #0]
100551b6:	1c49      	adds	r1, r1, #1
100551b8:	b28a      	uxth	r2, r1
100551ba:	18a6      	adds	r6, r4, r2
100551bc:	8887      	ldrh	r7, [r0, #4]
100551be:	42be      	cmp	r6, r7
100551c0:	d900      	bls.n	100551c4 <fifoBuf_getFreeHeader+0x18>
100551c2:	1b09      	subs	r1, r1, r4
100551c4:	190a      	adds	r2, r1, r4
100551c6:	0092      	lsls	r2, r2, #2
100551c8:	42be      	cmp	r6, r7
100551ca:	d900      	bls.n	100551ce <fifoBuf_getFreeHeader+0x22>
100551cc:	1c6d      	adds	r5, r5, #1
100551ce:	2603      	movs	r6, #3
100551d0:	4035      	ands	r5, r6
100551d2:	1952      	adds	r2, r2, r5
100551d4:	801a      	strh	r2, [r3, #0]
100551d6:	00a3      	lsls	r3, r4, #2
100551d8:	181b      	adds	r3, r3, r0
100551da:	3308      	adds	r3, #8
100551dc:	9c00      	ldr	r4, [sp, #0]
100551de:	6023      	str	r3, [r4, #0]
100551e0:	b292      	uxth	r2, r2
100551e2:	8805      	ldrh	r5, [r0, #0]
100551e4:	1b52      	subs	r2, r2, r5
100551e6:	4617      	mov	r7, r2
100551e8:	4037      	ands	r7, r6
100551ea:	8884      	ldrh	r4, [r0, #4]
100551ec:	4367      	muls	r7, r4
100551ee:	4035      	ands	r5, r6
100551f0:	1952      	adds	r2, r2, r5
100551f2:	0892      	lsrs	r2, r2, #2
100551f4:	19d2      	adds	r2, r2, r7
100551f6:	b295      	uxth	r5, r2
100551f8:	88c6      	ldrh	r6, [r0, #6]
100551fa:	42b5      	cmp	r5, r6
100551fc:	d900      	bls.n	10055200 <fifoBuf_getFreeHeader+0x54>
100551fe:	80c2      	strh	r2, [r0, #6]
10055200:	42a5      	cmp	r5, r4
10055202:	d80a      	bhi.n	1005521a <fifoBuf_getFreeHeader+0x6e>
10055204:	b209      	sxth	r1, r1
10055206:	2900      	cmp	r1, #0
10055208:	d507      	bpl.n	1005521a <fifoBuf_getFreeHeader+0x6e>
1005520a:	7899      	ldrb	r1, [r3, #2]
1005520c:	22fc      	movs	r2, #252	@ 0xfc
1005520e:	400a      	ands	r2, r1
10055210:	1c51      	adds	r1, r2, #1
10055212:	7099      	strb	r1, [r3, #2]
10055214:	3008      	adds	r0, #8
10055216:	9900      	ldr	r1, [sp, #0]
10055218:	6008      	str	r0, [r1, #0]
1005521a:	42a5      	cmp	r5, r4
1005521c:	d901      	bls.n	10055222 <fifoBuf_getFreeHeader+0x76>
1005521e:	2000      	movs	r0, #0
10055220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10055222:	2001      	movs	r0, #1
10055224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10055226 <aci_event_fifo_push>:
10055226:	b580      	push	{r7, lr}
10055228:	0640      	lsls	r0, r0, #25
1005522a:	d405      	bmi.n	10055238 <aci_event_fifo_push+0x12>
1005522c:	7888      	ldrb	r0, [r1, #2]
1005522e:	22fc      	movs	r2, #252	@ 0xfc
10055230:	4002      	ands	r2, r0
10055232:	1c90      	adds	r0, r2, #2
10055234:	7088      	strb	r0, [r1, #2]
10055236:	bd80      	pop	{r7, pc}
10055238:	4608      	mov	r0, r1
1005523a:	f000 f801 	bl	10055240 <event_notify_cb>
1005523e:	bd80      	pop	{r7, pc}

10055240 <event_notify_cb>:
10055240:	b580      	push	{r7, lr}
10055242:	1d01      	adds	r1, r0, #4
10055244:	78c2      	ldrb	r2, [r0, #3]
10055246:	2a14      	cmp	r2, #20
10055248:	d804      	bhi.n	10055254 <event_notify_cb+0x14>
1005524a:	6842      	ldr	r2, [r0, #4]
1005524c:	7880      	ldrb	r0, [r0, #2]
1005524e:	0880      	lsrs	r0, r0, #2
10055250:	4790      	blx	r2
10055252:	bd80      	pop	{r7, pc}
10055254:	2a3d      	cmp	r2, #61	@ 0x3d
10055256:	d803      	bhi.n	10055260 <event_notify_cb+0x20>
10055258:	2000      	movs	r0, #0
1005525a:	f000 f8e9 	bl	10055430 <hci_event_notify_cb>
1005525e:	bd80      	pop	{r7, pc}
10055260:	2a3f      	cmp	r2, #63	@ 0x3f
10055262:	d803      	bhi.n	1005526c <event_notify_cb+0x2c>
10055264:	2000      	movs	r0, #0
10055266:	f000 f8f5 	bl	10055454 <hci_rx_data_notify_cb>
1005526a:	bd80      	pop	{r7, pc}
1005526c:	2a60      	cmp	r2, #96	@ 0x60
1005526e:	d802      	bhi.n	10055276 <event_notify_cb+0x36>
10055270:	2000      	movs	r0, #0
10055272:	f000 f8e4 	bl	1005543e <hci_aci_event_notify_cb>
10055276:	bd80      	pop	{r7, pc}

10055278 <Events_Process_init>:
10055278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005527a:	2001      	movs	r0, #1
1005527c:	211c      	movs	r1, #28
1005527e:	4a29      	ldr	r2, [pc, #164]	@ (10055324 <__arm_cp.7_0>)
10055280:	4790      	blx	r2
10055282:	4f29      	ldr	r7, [pc, #164]	@ (10055328 <__arm_cp.7_1>)
10055284:	6038      	str	r0, [r7, #0]
10055286:	4d29      	ldr	r5, [pc, #164]	@ (1005532c <__arm_cp.7_2>)
10055288:	8da8      	ldrh	r0, [r5, #44]	@ 0x2c
1005528a:	1e40      	subs	r0, r0, #1
1005528c:	2603      	movs	r6, #3
1005528e:	4330      	orrs	r0, r6
10055290:	1c40      	adds	r0, r0, #1
10055292:	0880      	lsrs	r0, r0, #2
10055294:	1cc0      	adds	r0, r0, #3
10055296:	2404      	movs	r4, #4
10055298:	4621      	mov	r1, r4
1005529a:	4a22      	ldr	r2, [pc, #136]	@ (10055324 <__arm_cp.7_0>)
1005529c:	4790      	blx	r2
1005529e:	6839      	ldr	r1, [r7, #0]
100552a0:	6048      	str	r0, [r1, #4]
100552a2:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
100552a4:	1e40      	subs	r0, r0, #1
100552a6:	4330      	orrs	r0, r6
100552a8:	1c40      	adds	r0, r0, #1
100552aa:	0880      	lsrs	r0, r0, #2
100552ac:	1cc0      	adds	r0, r0, #3
100552ae:	4621      	mov	r1, r4
100552b0:	4d1c      	ldr	r5, [pc, #112]	@ (10055324 <__arm_cp.7_0>)
100552b2:	47a8      	blx	r5
100552b4:	462a      	mov	r2, r5
100552b6:	6839      	ldr	r1, [r7, #0]
100552b8:	6088      	str	r0, [r1, #8]
100552ba:	4d1c      	ldr	r5, [pc, #112]	@ (1005532c <__arm_cp.7_2>)
100552bc:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
100552be:	1e40      	subs	r0, r0, #1
100552c0:	4330      	orrs	r0, r6
100552c2:	1c40      	adds	r0, r0, #1
100552c4:	0880      	lsrs	r0, r0, #2
100552c6:	1cc0      	adds	r0, r0, #3
100552c8:	4621      	mov	r1, r4
100552ca:	4790      	blx	r2
100552cc:	6839      	ldr	r1, [r7, #0]
100552ce:	60c8      	str	r0, [r1, #12]
100552d0:	f7ff fc18 	bl	10054b04 <hal_radio_activity_state_init>
100552d4:	6838      	ldr	r0, [r7, #0]
100552d6:	6842      	ldr	r2, [r0, #4]
100552d8:	2100      	movs	r1, #0
100552da:	8011      	strh	r1, [r2, #0]
100552dc:	8051      	strh	r1, [r2, #2]
100552de:	6883      	ldr	r3, [r0, #8]
100552e0:	8019      	strh	r1, [r3, #0]
100552e2:	80d1      	strh	r1, [r2, #6]
100552e4:	8daf      	ldrh	r7, [r5, #44]	@ 0x2c
100552e6:	1e7f      	subs	r7, r7, #1
100552e8:	4337      	orrs	r7, r6
100552ea:	1c7f      	adds	r7, r7, #1
100552ec:	08bf      	lsrs	r7, r7, #2
100552ee:	8097      	strh	r7, [r2, #4]
100552f0:	8059      	strh	r1, [r3, #2]
100552f2:	80d9      	strh	r1, [r3, #6]
100552f4:	8def      	ldrh	r7, [r5, #46]	@ 0x2e
100552f6:	1e7f      	subs	r7, r7, #1
100552f8:	4337      	orrs	r7, r6
100552fa:	1c7f      	adds	r7, r7, #1
100552fc:	08bf      	lsrs	r7, r7, #2
100552fe:	809f      	strh	r7, [r3, #4]
10055300:	68c7      	ldr	r7, [r0, #12]
10055302:	8039      	strh	r1, [r7, #0]
10055304:	6102      	str	r2, [r0, #16]
10055306:	6143      	str	r3, [r0, #20]
10055308:	80f9      	strh	r1, [r7, #6]
1005530a:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
1005530c:	1e52      	subs	r2, r2, #1
1005530e:	4332      	orrs	r2, r6
10055310:	1c52      	adds	r2, r2, #1
10055312:	0892      	lsrs	r2, r2, #2
10055314:	80ba      	strh	r2, [r7, #4]
10055316:	8079      	strh	r1, [r7, #2]
10055318:	6187      	str	r7, [r0, #24]
1005531a:	4622      	mov	r2, r4
1005531c:	f7fd f9aa 	bl	10052674 <BLEPLAT_MemSet>
10055320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10055322:	46c0      	nop			@ (mov r8, r8)

10055324 <__arm_cp.7_0>:
10055324:	10060bd5 	.word	0x10060bd5

10055328 <__arm_cp.7_1>:
10055328:	20002420 	.word	0x20002420

1005532c <__arm_cp.7_2>:
1005532c:	20002484 	.word	0x20002484

10055330 <Events_Process_Q>:
10055330:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10055332:	4d3d      	ldr	r5, [pc, #244]	@ (10055428 <__arm_cp.8_0>)
10055334:	6828      	ldr	r0, [r5, #0]
10055336:	3010      	adds	r0, #16
10055338:	2100      	movs	r1, #0
1005533a:	2906      	cmp	r1, #6
1005533c:	d005      	beq.n	1005534a <Events_Process_Q+0x1a>
1005533e:	c804      	ldmia	r0!, {r2}
10055340:	8852      	ldrh	r2, [r2, #2]
10055342:	ab01      	add	r3, sp, #4
10055344:	525a      	strh	r2, [r3, r1]
10055346:	1c89      	adds	r1, r1, #2
10055348:	e7f7      	b.n	1005533a <Events_Process_Q+0xa>
1005534a:	f3ef 8010 	mrs	r0, PRIMASK
1005534e:	b672      	cpsid	i
10055350:	6828      	ldr	r0, [r5, #0]
10055352:	6804      	ldr	r4, [r0, #0]
10055354:	2700      	movs	r7, #0
10055356:	6007      	str	r7, [r0, #0]
10055358:	b662      	cpsie	i
1005535a:	07e0      	lsls	r0, r4, #31
1005535c:	d002      	beq.n	10055364 <Events_Process_Q+0x34>
1005535e:	2000      	movs	r0, #0
10055360:	f000 fc4a 	bl	10055bf8 <hci_hardware_error_event_cb>
10055364:	07a0      	lsls	r0, r4, #30
10055366:	d502      	bpl.n	1005536e <Events_Process_Q+0x3e>
10055368:	2001      	movs	r0, #1
1005536a:	f000 fc45 	bl	10055bf8 <hci_hardware_error_event_cb>
1005536e:	0760      	lsls	r0, r4, #29
10055370:	d502      	bpl.n	10055378 <Events_Process_Q+0x48>
10055372:	2002      	movs	r0, #2
10055374:	f000 fc40 	bl	10055bf8 <hci_hardware_error_event_cb>
10055378:	0720      	lsls	r0, r4, #28
1005537a:	d502      	bpl.n	10055382 <Events_Process_Q+0x52>
1005537c:	2003      	movs	r0, #3
1005537e:	f000 fc3b 	bl	10055bf8 <hci_hardware_error_event_cb>
10055382:	06e0      	lsls	r0, r4, #27
10055384:	d54a      	bpl.n	1005541c <Events_Process_Q+0xec>
10055386:	2004      	movs	r0, #4
10055388:	f000 fc36 	bl	10055bf8 <hci_hardware_error_event_cb>
1005538c:	e046      	b.n	1005541c <Events_Process_Q+0xec>
1005538e:	0078      	lsls	r0, r7, #1
10055390:	a901      	add	r1, sp, #4
10055392:	5a0e      	ldrh	r6, [r1, r0]
10055394:	9700      	str	r7, [sp, #0]
10055396:	00bf      	lsls	r7, r7, #2
10055398:	6828      	ldr	r0, [r5, #0]
1005539a:	19c0      	adds	r0, r0, r7
1005539c:	6900      	ldr	r0, [r0, #16]
1005539e:	8801      	ldrh	r1, [r0, #0]
100553a0:	8802      	ldrh	r2, [r0, #0]
100553a2:	42b2      	cmp	r2, r6
100553a4:	d02a      	beq.n	100553fc <Events_Process_Q+0xcc>
100553a6:	0889      	lsrs	r1, r1, #2
100553a8:	1c89      	adds	r1, r1, #2
100553aa:	0089      	lsls	r1, r1, #2
100553ac:	1844      	adds	r4, r0, r1
100553ae:	78a1      	ldrb	r1, [r4, #2]
100553b0:	2203      	movs	r2, #3
100553b2:	400a      	ands	r2, r1
100553b4:	2a01      	cmp	r2, #1
100553b6:	d002      	beq.n	100553be <Events_Process_Q+0x8e>
100553b8:	2a00      	cmp	r2, #0
100553ba:	d103      	bne.n	100553c4 <Events_Process_Q+0x94>
100553bc:	e01e      	b.n	100553fc <Events_Process_Q+0xcc>
100553be:	7a81      	ldrb	r1, [r0, #10]
100553c0:	3008      	adds	r0, #8
100553c2:	4604      	mov	r4, r0
100553c4:	0648      	lsls	r0, r1, #25
100553c6:	d403      	bmi.n	100553d0 <Events_Process_Q+0xa0>
100553c8:	4620      	mov	r0, r4
100553ca:	f7ff ff39 	bl	10055240 <event_notify_cb>
100553ce:	e00a      	b.n	100553e6 <Events_Process_Q+0xb6>
100553d0:	78e0      	ldrb	r0, [r4, #3]
100553d2:	2813      	cmp	r0, #19
100553d4:	d207      	bcs.n	100553e6 <Events_Process_Q+0xb6>
100553d6:	0080      	lsls	r0, r0, #2
100553d8:	4914      	ldr	r1, [pc, #80]	@ (1005542c <__arm_cp.8_1>)
100553da:	580a      	ldr	r2, [r1, r0]
100553dc:	1d21      	adds	r1, r4, #4
100553de:	4620      	mov	r0, r4
100553e0:	4790      	blx	r2
100553e2:	2800      	cmp	r0, #0
100553e4:	d105      	bne.n	100553f2 <Events_Process_Q+0xc2>
100553e6:	6828      	ldr	r0, [r5, #0]
100553e8:	19c0      	adds	r0, r0, r7
100553ea:	6900      	ldr	r0, [r0, #16]
100553ec:	8821      	ldrh	r1, [r4, #0]
100553ee:	8001      	strh	r1, [r0, #0]
100553f0:	e7d5      	b.n	1005539e <Events_Process_Q+0x6e>
100553f2:	2000      	movs	r0, #0
100553f4:	f00d f9c4 	bl	10062780 <tsk_notify_idx>
100553f8:	f7fc fb45 	bl	10051a86 <BLE_STACK_ProcessRequest>
100553fc:	f3ef 8010 	mrs	r0, PRIMASK
10055400:	b672      	cpsid	i
10055402:	6828      	ldr	r0, [r5, #0]
10055404:	19c0      	adds	r0, r0, r7
10055406:	6900      	ldr	r0, [r0, #16]
10055408:	8841      	ldrh	r1, [r0, #2]
1005540a:	8802      	ldrh	r2, [r0, #0]
1005540c:	4291      	cmp	r1, r2
1005540e:	d102      	bne.n	10055416 <Events_Process_Q+0xe6>
10055410:	2100      	movs	r1, #0
10055412:	8001      	strh	r1, [r0, #0]
10055414:	8041      	strh	r1, [r0, #2]
10055416:	b662      	cpsie	i
10055418:	9f00      	ldr	r7, [sp, #0]
1005541a:	1c7f      	adds	r7, r7, #1
1005541c:	2f03      	cmp	r7, #3
1005541e:	d1b6      	bne.n	1005538e <Events_Process_Q+0x5e>
10055420:	f7ff fb7a 	bl	10054b18 <hal_radio_activity_state_cb_check>
10055424:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10055426:	46c0      	nop			@ (mov r8, r8)

10055428 <__arm_cp.8_0>:
10055428:	20002420 	.word	0x20002420

1005542c <__arm_cp.8_1>:
1005542c:	100695b0 	.word	0x100695b0

10055430 <hci_event_notify_cb>:
10055430:	b580      	push	{r7, lr}
10055432:	4608      	mov	r0, r1
10055434:	7889      	ldrb	r1, [r1, #2]
10055436:	1cc9      	adds	r1, r1, #3
10055438:	f7f9 fada 	bl	1004e9f0 <BLE_STACK_Event>
1005543c:	bd80      	pop	{r7, pc}

1005543e <hci_aci_event_notify_cb>:
1005543e:	b580      	push	{r7, lr}
10055440:	4608      	mov	r0, r1
10055442:	7889      	ldrb	r1, [r1, #2]
10055444:	78c2      	ldrb	r2, [r0, #3]
10055446:	0212      	lsls	r2, r2, #8
10055448:	1851      	adds	r1, r2, r1
1005544a:	1d09      	adds	r1, r1, #4
1005544c:	b289      	uxth	r1, r1
1005544e:	f7f9 facf 	bl	1004e9f0 <BLE_STACK_Event>
10055452:	bd80      	pop	{r7, pc}

10055454 <hci_rx_data_notify_cb>:
10055454:	b580      	push	{r7, lr}
10055456:	4608      	mov	r0, r1
10055458:	78c9      	ldrb	r1, [r1, #3]
1005545a:	7902      	ldrb	r2, [r0, #4]
1005545c:	0212      	lsls	r2, r2, #8
1005545e:	1851      	adds	r1, r2, r1
10055460:	1d49      	adds	r1, r1, #5
10055462:	b289      	uxth	r1, r1
10055464:	f7f9 fac4 	bl	1004e9f0 <BLE_STACK_Event>
10055468:	bd80      	pop	{r7, pc}
	...

1005546c <hci_disconnection_complete_event_int_cb>:
1005546c:	b5b0      	push	{r4, r5, r7, lr}
1005546e:	460d      	mov	r5, r1
10055470:	4604      	mov	r4, r0
10055472:	7908      	ldrb	r0, [r1, #4]
10055474:	7949      	ldrb	r1, [r1, #5]
10055476:	0209      	lsls	r1, r1, #8
10055478:	1808      	adds	r0, r1, r0
1005547a:	f001 fb3f 	bl	10056afc <GAT_att_cmn_disconnection>
1005547e:	7928      	ldrb	r0, [r5, #4]
10055480:	7969      	ldrb	r1, [r5, #5]
10055482:	0209      	lsls	r1, r1, #8
10055484:	1808      	adds	r0, r1, r0
10055486:	f00c feff 	bl	10062288 <smp_sap_hci_disconnection_complete_evt_hndl>
1005548a:	7928      	ldrb	r0, [r5, #4]
1005548c:	7969      	ldrb	r1, [r5, #5]
1005548e:	0209      	lsls	r1, r1, #8
10055490:	1808      	adds	r0, r1, r0
10055492:	f004 fd1b 	bl	10059ecc <l2c_sap_hci_disconnection_complete_evt_hndl>
10055496:	f000 feba 	bl	1005620e <GAP_hci_disconnection_complete_evt_hndl>
1005549a:	7928      	ldrb	r0, [r5, #4]
1005549c:	7969      	ldrb	r1, [r5, #5]
1005549e:	0209      	lsls	r1, r1, #8
100554a0:	1808      	adds	r0, r1, r0
100554a2:	f7ff fcdf 	bl	10054e64 <ACL_pkt_disconnection>
100554a6:	4808      	ldr	r0, [pc, #32]	@ (100554c8 <__arm_cp.14_0>)
100554a8:	6800      	ldr	r0, [r0, #0]
100554aa:	2136      	movs	r1, #54	@ 0x36
100554ac:	5c40      	ldrb	r0, [r0, r1]
100554ae:	06c0      	lsls	r0, r0, #27
100554b0:	d401      	bmi.n	100554b6 <hci_disconnection_complete_event_int_cb+0x4a>
100554b2:	2000      	movs	r0, #0
100554b4:	bdb0      	pop	{r4, r5, r7, pc}
100554b6:	2015      	movs	r0, #21
100554b8:	70e0      	strb	r0, [r4, #3]
100554ba:	78a0      	ldrb	r0, [r4, #2]
100554bc:	21bf      	movs	r1, #191	@ 0xbf
100554be:	4001      	ands	r1, r0
100554c0:	70a1      	strb	r1, [r4, #2]
100554c2:	2084      	movs	r0, #132	@ 0x84
100554c4:	bdb0      	pop	{r4, r5, r7, pc}
100554c6:	46c0      	nop			@ (mov r8, r8)

100554c8 <__arm_cp.14_0>:
100554c8:	20002470 	.word	0x20002470

100554cc <hci_encryption_change_event_int_cb>:
100554cc:	b510      	push	{r4, lr}
100554ce:	4604      	mov	r4, r0
100554d0:	7908      	ldrb	r0, [r1, #4]
100554d2:	794a      	ldrb	r2, [r1, #5]
100554d4:	0212      	lsls	r2, r2, #8
100554d6:	1812      	adds	r2, r2, r0
100554d8:	78c9      	ldrb	r1, [r1, #3]
100554da:	2006      	movs	r0, #6
100554dc:	f00c fe5a 	bl	10062194 <smp_sap_hci_encryption_change_evt_hndl>
100554e0:	4807      	ldr	r0, [pc, #28]	@ (10055500 <__arm_cp.16_0>)
100554e2:	6800      	ldr	r0, [r0, #0]
100554e4:	2136      	movs	r1, #54	@ 0x36
100554e6:	5640      	ldrsb	r0, [r0, r1]
100554e8:	2800      	cmp	r0, #0
100554ea:	d401      	bmi.n	100554f0 <hci_encryption_change_event_int_cb+0x24>
100554ec:	2000      	movs	r0, #0
100554ee:	bd10      	pop	{r4, pc}
100554f0:	2016      	movs	r0, #22
100554f2:	70e0      	strb	r0, [r4, #3]
100554f4:	78a0      	ldrb	r0, [r4, #2]
100554f6:	21bf      	movs	r1, #191	@ 0xbf
100554f8:	4001      	ands	r1, r0
100554fa:	70a1      	strb	r1, [r4, #2]
100554fc:	2084      	movs	r0, #132	@ 0x84
100554fe:	bd10      	pop	{r4, pc}

10055500 <__arm_cp.16_0>:
10055500:	20002470 	.word	0x20002470

10055504 <hci_encryption_key_refresh_complete_event_int_cb>:
10055504:	b510      	push	{r4, lr}
10055506:	4604      	mov	r4, r0
10055508:	7908      	ldrb	r0, [r1, #4]
1005550a:	794a      	ldrb	r2, [r1, #5]
1005550c:	0212      	lsls	r2, r2, #8
1005550e:	1812      	adds	r2, r2, r0
10055510:	78c9      	ldrb	r1, [r1, #3]
10055512:	2007      	movs	r0, #7
10055514:	f00c fe3e 	bl	10062194 <smp_sap_hci_encryption_change_evt_hndl>
10055518:	4807      	ldr	r0, [pc, #28]	@ (10055538 <__arm_cp.18_0>)
1005551a:	6800      	ldr	r0, [r0, #0]
1005551c:	213b      	movs	r1, #59	@ 0x3b
1005551e:	5640      	ldrsb	r0, [r0, r1]
10055520:	2800      	cmp	r0, #0
10055522:	d401      	bmi.n	10055528 <hci_encryption_key_refresh_complete_event_int_cb+0x24>
10055524:	2000      	movs	r0, #0
10055526:	bd10      	pop	{r4, pc}
10055528:	2017      	movs	r0, #23
1005552a:	70e0      	strb	r0, [r4, #3]
1005552c:	78a0      	ldrb	r0, [r4, #2]
1005552e:	21bf      	movs	r1, #191	@ 0xbf
10055530:	4001      	ands	r1, r0
10055532:	70a1      	strb	r1, [r4, #2]
10055534:	2084      	movs	r0, #132	@ 0x84
10055536:	bd10      	pop	{r4, pc}

10055538 <__arm_cp.18_0>:
10055538:	20002470 	.word	0x20002470

1005553c <hci_le_connection_complete_event_int_cb>:
1005553c:	b5b0      	push	{r4, r5, r7, lr}
1005553e:	460d      	mov	r5, r1
10055540:	4604      	mov	r4, r0
10055542:	7908      	ldrb	r0, [r1, #4]
10055544:	2800      	cmp	r0, #0
10055546:	d11d      	bne.n	10055584 <hci_le_connection_complete_event_int_cb+0x48>
10055548:	7968      	ldrb	r0, [r5, #5]
1005554a:	79a9      	ldrb	r1, [r5, #6]
1005554c:	0209      	lsls	r1, r1, #8
1005554e:	1808      	adds	r0, r1, r0
10055550:	f7ff fc64 	bl	10054e1c <ACL_pkt_connection>
10055554:	7968      	ldrb	r0, [r5, #5]
10055556:	79a9      	ldrb	r1, [r5, #6]
10055558:	0209      	lsls	r1, r1, #8
1005555a:	1808      	adds	r0, r1, r0
1005555c:	7a2a      	ldrb	r2, [r5, #8]
1005555e:	79e9      	ldrb	r1, [r5, #7]
10055560:	462b      	mov	r3, r5
10055562:	3309      	adds	r3, #9
10055564:	f00c fcd4 	bl	10061f10 <smp_sap_hci_le_connection_complete_evt_hndl>
10055568:	7968      	ldrb	r0, [r5, #5]
1005556a:	79a9      	ldrb	r1, [r5, #6]
1005556c:	0209      	lsls	r1, r1, #8
1005556e:	1808      	adds	r0, r1, r0
10055570:	f001 faa4 	bl	10056abc <GAT_att_cmn_connection>
10055574:	7968      	ldrb	r0, [r5, #5]
10055576:	79a9      	ldrb	r1, [r5, #6]
10055578:	0209      	lsls	r1, r1, #8
1005557a:	1808      	adds	r0, r1, r0
1005557c:	79e9      	ldrb	r1, [r5, #7]
1005557e:	f004 fc95 	bl	10059eac <l2c_sap_hci_le_connection_complete_evt_hndl>
10055582:	7928      	ldrb	r0, [r5, #4]
10055584:	7969      	ldrb	r1, [r5, #5]
10055586:	79aa      	ldrb	r2, [r5, #6]
10055588:	0212      	lsls	r2, r2, #8
1005558a:	1851      	adds	r1, r2, r1
1005558c:	79ea      	ldrb	r2, [r5, #7]
1005558e:	f000 fe3f 	bl	10056210 <GAP_hci_le_connection_complete_evt_hndl>
10055592:	4809      	ldr	r0, [pc, #36]	@ (100555b8 <__arm_cp.20_0>)
10055594:	6801      	ldr	r1, [r0, #0]
10055596:	203d      	movs	r0, #61	@ 0x3d
10055598:	5c0a      	ldrb	r2, [r1, r0]
1005559a:	2000      	movs	r0, #0
1005559c:	0692      	lsls	r2, r2, #26
1005559e:	d50a      	bpl.n	100555b6 <hci_le_connection_complete_event_int_cb+0x7a>
100555a0:	313d      	adds	r1, #61	@ 0x3d
100555a2:	7a49      	ldrb	r1, [r1, #9]
100555a4:	07c9      	lsls	r1, r1, #31
100555a6:	d006      	beq.n	100555b6 <hci_le_connection_complete_event_int_cb+0x7a>
100555a8:	2018      	movs	r0, #24
100555aa:	70e0      	strb	r0, [r4, #3]
100555ac:	78a0      	ldrb	r0, [r4, #2]
100555ae:	21bf      	movs	r1, #191	@ 0xbf
100555b0:	4001      	ands	r1, r0
100555b2:	70a1      	strb	r1, [r4, #2]
100555b4:	2084      	movs	r0, #132	@ 0x84
100555b6:	bdb0      	pop	{r4, r5, r7, pc}

100555b8 <__arm_cp.20_0>:
100555b8:	20002470 	.word	0x20002470

100555bc <hci_le_enhanced_connection_complete_event_int_cb>:
100555bc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100555be:	460d      	mov	r5, r1
100555c0:	4604      	mov	r4, r0
100555c2:	7908      	ldrb	r0, [r1, #4]
100555c4:	2800      	cmp	r0, #0
100555c6:	d123      	bne.n	10055610 <hci_le_enhanced_connection_complete_event_int_cb+0x54>
100555c8:	7968      	ldrb	r0, [r5, #5]
100555ca:	79a9      	ldrb	r1, [r5, #6]
100555cc:	0209      	lsls	r1, r1, #8
100555ce:	1808      	adds	r0, r1, r0
100555d0:	f7ff fc24 	bl	10054e1c <ACL_pkt_connection>
100555d4:	7a2a      	ldrb	r2, [r5, #8]
100555d6:	79e9      	ldrb	r1, [r5, #7]
100555d8:	7968      	ldrb	r0, [r5, #5]
100555da:	79ab      	ldrb	r3, [r5, #6]
100555dc:	462e      	mov	r6, r5
100555de:	3615      	adds	r6, #21
100555e0:	462f      	mov	r7, r5
100555e2:	370f      	adds	r7, #15
100555e4:	9700      	str	r7, [sp, #0]
100555e6:	9601      	str	r6, [sp, #4]
100555e8:	021b      	lsls	r3, r3, #8
100555ea:	1818      	adds	r0, r3, r0
100555ec:	462b      	mov	r3, r5
100555ee:	3309      	adds	r3, #9
100555f0:	f00c fd28 	bl	10062044 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl>
100555f4:	7968      	ldrb	r0, [r5, #5]
100555f6:	79a9      	ldrb	r1, [r5, #6]
100555f8:	0209      	lsls	r1, r1, #8
100555fa:	1808      	adds	r0, r1, r0
100555fc:	f001 fa5e 	bl	10056abc <GAT_att_cmn_connection>
10055600:	7968      	ldrb	r0, [r5, #5]
10055602:	79a9      	ldrb	r1, [r5, #6]
10055604:	0209      	lsls	r1, r1, #8
10055606:	1808      	adds	r0, r1, r0
10055608:	79e9      	ldrb	r1, [r5, #7]
1005560a:	f004 fc4f 	bl	10059eac <l2c_sap_hci_le_connection_complete_evt_hndl>
1005560e:	7928      	ldrb	r0, [r5, #4]
10055610:	7969      	ldrb	r1, [r5, #5]
10055612:	79aa      	ldrb	r2, [r5, #6]
10055614:	0212      	lsls	r2, r2, #8
10055616:	1851      	adds	r1, r2, r1
10055618:	79ea      	ldrb	r2, [r5, #7]
1005561a:	f000 fdf9 	bl	10056210 <GAP_hci_le_connection_complete_evt_hndl>
1005561e:	4809      	ldr	r0, [pc, #36]	@ (10055644 <__arm_cp.22_0>)
10055620:	6801      	ldr	r1, [r0, #0]
10055622:	203d      	movs	r0, #61	@ 0x3d
10055624:	5c0a      	ldrb	r2, [r1, r0]
10055626:	2000      	movs	r0, #0
10055628:	0692      	lsls	r2, r2, #26
1005562a:	d50a      	bpl.n	10055642 <hci_le_enhanced_connection_complete_event_int_cb+0x86>
1005562c:	313d      	adds	r1, #61	@ 0x3d
1005562e:	7a89      	ldrb	r1, [r1, #10]
10055630:	0789      	lsls	r1, r1, #30
10055632:	d506      	bpl.n	10055642 <hci_le_enhanced_connection_complete_event_int_cb+0x86>
10055634:	201c      	movs	r0, #28
10055636:	70e0      	strb	r0, [r4, #3]
10055638:	78a0      	ldrb	r0, [r4, #2]
1005563a:	21bf      	movs	r1, #191	@ 0xbf
1005563c:	4001      	ands	r1, r0
1005563e:	70a1      	strb	r1, [r4, #2]
10055640:	2084      	movs	r0, #132	@ 0x84
10055642:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10055644 <__arm_cp.22_0>:
10055644:	20002470 	.word	0x20002470

10055648 <hci_le_long_term_key_request_event_int_cb>:
10055648:	b570      	push	{r4, r5, r6, lr}
1005564a:	4604      	mov	r4, r0
1005564c:	4d14      	ldr	r5, [pc, #80]	@ (100556a0 <__arm_cp.24_0>)
1005564e:	6828      	ldr	r0, [r5, #0]
10055650:	2636      	movs	r6, #54	@ 0x36
10055652:	5d80      	ldrb	r0, [r0, r6]
10055654:	2800      	cmp	r0, #0
10055656:	d10e      	bne.n	10055676 <hci_le_long_term_key_request_event_int_cb+0x2e>
10055658:	7908      	ldrb	r0, [r1, #4]
1005565a:	794a      	ldrb	r2, [r1, #5]
1005565c:	0212      	lsls	r2, r2, #8
1005565e:	1810      	adds	r0, r2, r0
10055660:	7b8a      	ldrb	r2, [r1, #14]
10055662:	7bcb      	ldrb	r3, [r1, #15]
10055664:	021b      	lsls	r3, r3, #8
10055666:	189a      	adds	r2, r3, r2
10055668:	1d89      	adds	r1, r1, #6
1005566a:	f00c fd13 	bl	10062094 <smp_sap_hci_le_long_term_key_request_evt_hndl>
1005566e:	6828      	ldr	r0, [r5, #0]
10055670:	5d80      	ldrb	r0, [r0, r6]
10055672:	2800      	cmp	r0, #0
10055674:	d012      	beq.n	1005569c <hci_le_long_term_key_request_event_int_cb+0x54>
10055676:	480b      	ldr	r0, [pc, #44]	@ (100556a4 <__arm_cp.24_1>)
10055678:	6801      	ldr	r1, [r0, #0]
1005567a:	203d      	movs	r0, #61	@ 0x3d
1005567c:	5c0a      	ldrb	r2, [r1, r0]
1005567e:	2000      	movs	r0, #0
10055680:	0692      	lsls	r2, r2, #26
10055682:	d50a      	bpl.n	1005569a <hci_le_long_term_key_request_event_int_cb+0x52>
10055684:	313d      	adds	r1, #61	@ 0x3d
10055686:	7a49      	ldrb	r1, [r1, #9]
10055688:	06c9      	lsls	r1, r1, #27
1005568a:	d506      	bpl.n	1005569a <hci_le_long_term_key_request_event_int_cb+0x52>
1005568c:	2019      	movs	r0, #25
1005568e:	70e0      	strb	r0, [r4, #3]
10055690:	78a0      	ldrb	r0, [r4, #2]
10055692:	21bf      	movs	r1, #191	@ 0xbf
10055694:	4001      	ands	r1, r0
10055696:	70a1      	strb	r1, [r4, #2]
10055698:	2084      	movs	r0, #132	@ 0x84
1005569a:	bd70      	pop	{r4, r5, r6, pc}
1005569c:	2000      	movs	r0, #0
1005569e:	bd70      	pop	{r4, r5, r6, pc}

100556a0 <__arm_cp.24_0>:
100556a0:	2000241c 	.word	0x2000241c

100556a4 <__arm_cp.24_1>:
100556a4:	20002470 	.word	0x20002470

100556a8 <hci_le_read_local_p256_public_key_complete_event_int_cb>:
100556a8:	b510      	push	{r4, lr}
100556aa:	4604      	mov	r4, r0
100556ac:	7908      	ldrb	r0, [r1, #4]
100556ae:	1d49      	adds	r1, r1, #5
100556b0:	f00c fe2b 	bl	1006230a <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg_weak>
100556b4:	480a      	ldr	r0, [pc, #40]	@ (100556e0 <__arm_cp.26_0>)
100556b6:	6801      	ldr	r1, [r0, #0]
100556b8:	203d      	movs	r0, #61	@ 0x3d
100556ba:	5c0a      	ldrb	r2, [r1, r0]
100556bc:	2000      	movs	r0, #0
100556be:	0692      	lsls	r2, r2, #26
100556c0:	d504      	bpl.n	100556cc <hci_le_read_local_p256_public_key_complete_event_int_cb+0x24>
100556c2:	313d      	adds	r1, #61	@ 0x3d
100556c4:	2209      	movs	r2, #9
100556c6:	5689      	ldrsb	r1, [r1, r2]
100556c8:	2900      	cmp	r1, #0
100556ca:	d400      	bmi.n	100556ce <hci_le_read_local_p256_public_key_complete_event_int_cb+0x26>
100556cc:	bd10      	pop	{r4, pc}
100556ce:	201a      	movs	r0, #26
100556d0:	70e0      	strb	r0, [r4, #3]
100556d2:	78a0      	ldrb	r0, [r4, #2]
100556d4:	21bf      	movs	r1, #191	@ 0xbf
100556d6:	4001      	ands	r1, r0
100556d8:	70a1      	strb	r1, [r4, #2]
100556da:	2084      	movs	r0, #132	@ 0x84
100556dc:	bd10      	pop	{r4, pc}
100556de:	46c0      	nop			@ (mov r8, r8)

100556e0 <__arm_cp.26_0>:
100556e0:	20002470 	.word	0x20002470

100556e4 <hci_le_generate_dhkey_complete_event_int_cb>:
100556e4:	b510      	push	{r4, lr}
100556e6:	4604      	mov	r4, r0
100556e8:	7908      	ldrb	r0, [r1, #4]
100556ea:	1d49      	adds	r1, r1, #5
100556ec:	f00c fe0e 	bl	1006230c <smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg_weak>
100556f0:	4809      	ldr	r0, [pc, #36]	@ (10055718 <__arm_cp.28_0>)
100556f2:	6801      	ldr	r1, [r0, #0]
100556f4:	203d      	movs	r0, #61	@ 0x3d
100556f6:	5c0a      	ldrb	r2, [r1, r0]
100556f8:	2000      	movs	r0, #0
100556fa:	0692      	lsls	r2, r2, #26
100556fc:	d50a      	bpl.n	10055714 <hci_le_generate_dhkey_complete_event_int_cb+0x30>
100556fe:	313d      	adds	r1, #61	@ 0x3d
10055700:	7a89      	ldrb	r1, [r1, #10]
10055702:	07c9      	lsls	r1, r1, #31
10055704:	d006      	beq.n	10055714 <hci_le_generate_dhkey_complete_event_int_cb+0x30>
10055706:	201b      	movs	r0, #27
10055708:	70e0      	strb	r0, [r4, #3]
1005570a:	78a0      	ldrb	r0, [r4, #2]
1005570c:	21bf      	movs	r1, #191	@ 0xbf
1005570e:	4001      	ands	r1, r0
10055710:	70a1      	strb	r1, [r4, #2]
10055712:	2084      	movs	r0, #132	@ 0x84
10055714:	bd10      	pop	{r4, pc}
10055716:	46c0      	nop			@ (mov r8, r8)

10055718 <__arm_cp.28_0>:
10055718:	20002470 	.word	0x20002470

1005571c <hci_le_advertising_report_event_int_cb_ucfg_weak>:
1005571c:	2000      	movs	r0, #0
1005571e:	4770      	bx	lr

10055720 <hci_le_directed_advertising_report_event_int_cb_ucfg_weak>:
10055720:	2000      	movs	r0, #0
10055722:	4770      	bx	lr

10055724 <hci_le_extended_advertising_report_event_int_cb_ucfg_weak>:
10055724:	2000      	movs	r0, #0
10055726:	4770      	bx	lr

10055728 <hci_le_scan_timeout_event_int_cb_ucfg_weak>:
10055728:	2000      	movs	r0, #0
1005572a:	4770      	bx	lr

1005572c <hci_le_advertising_set_terminated_event_int_cb_ucfg_weak>:
1005572c:	2000      	movs	r0, #0
1005572e:	4770      	bx	lr

10055730 <hci_read_remote_version_information_complete_event_copy>:
10055730:	7101      	strb	r1, [r0, #4]
10055732:	2300      	movs	r3, #0
10055734:	70c3      	strb	r3, [r0, #3]
10055736:	0a09      	lsrs	r1, r1, #8
10055738:	7141      	strb	r1, [r0, #5]
1005573a:	7811      	ldrb	r1, [r2, #0]
1005573c:	7181      	strb	r1, [r0, #6]
1005573e:	7851      	ldrb	r1, [r2, #1]
10055740:	7893      	ldrb	r3, [r2, #2]
10055742:	7203      	strb	r3, [r0, #8]
10055744:	71c1      	strb	r1, [r0, #7]
10055746:	78d1      	ldrb	r1, [r2, #3]
10055748:	7912      	ldrb	r2, [r2, #4]
1005574a:	7282      	strb	r2, [r0, #10]
1005574c:	7241      	strb	r1, [r0, #9]
1005574e:	4770      	bx	lr

10055750 <hci_number_of_completed_packets_event_copy>:
10055750:	2200      	movs	r2, #0
10055752:	7102      	strb	r2, [r0, #4]
10055754:	2201      	movs	r2, #1
10055756:	70c2      	strb	r2, [r0, #3]
10055758:	7041      	strb	r1, [r0, #1]
1005575a:	7002      	strb	r2, [r0, #0]
1005575c:	0a09      	lsrs	r1, r1, #8
1005575e:	7081      	strb	r1, [r0, #2]
10055760:	4770      	bx	lr

10055762 <aci_gap_proc_complete_event_copy>:
10055762:	b510      	push	{r4, lr}
10055764:	7813      	ldrb	r3, [r2, #0]
10055766:	7183      	strb	r3, [r0, #6]
10055768:	7853      	ldrb	r3, [r2, #1]
1005576a:	1e8c      	subs	r4, r1, #2
1005576c:	7204      	strb	r4, [r0, #8]
1005576e:	71c3      	strb	r3, [r0, #7]
10055770:	3009      	adds	r0, #9
10055772:	1c91      	adds	r1, r2, #2
10055774:	b2e2      	uxtb	r2, r4
10055776:	f7fc ff6d 	bl	10052654 <BLEPLAT_MemCpy>
1005577a:	bd10      	pop	{r4, pc}

1005577c <aci_l2cap_connection_update_req_event_copy>:
1005577c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005577e:	b085      	sub	sp, #20
10055780:	4617      	mov	r7, r2
10055782:	9103      	str	r1, [sp, #12]
10055784:	4604      	mov	r4, r0
10055786:	6850      	ldr	r0, [r2, #4]
10055788:	7a40      	ldrb	r0, [r0, #9]
1005578a:	9004      	str	r0, [sp, #16]
1005578c:	2106      	movs	r1, #6
1005578e:	4d16      	ldr	r5, [pc, #88]	@ (100557e8 <__arm_cp.42_0>)
10055790:	4610      	mov	r0, r2
10055792:	47a8      	blx	r5
10055794:	9002      	str	r0, [sp, #8]
10055796:	2108      	movs	r1, #8
10055798:	4638      	mov	r0, r7
1005579a:	47a8      	blx	r5
1005579c:	9001      	str	r0, [sp, #4]
1005579e:	210a      	movs	r1, #10
100557a0:	4638      	mov	r0, r7
100557a2:	47a8      	blx	r5
100557a4:	4606      	mov	r6, r0
100557a6:	210c      	movs	r1, #12
100557a8:	4638      	mov	r0, r7
100557aa:	47a8      	blx	r5
100557ac:	462a      	mov	r2, r5
100557ae:	4605      	mov	r5, r0
100557b0:	210e      	movs	r1, #14
100557b2:	4638      	mov	r0, r7
100557b4:	4790      	blx	r2
100557b6:	7460      	strb	r0, [r4, #17]
100557b8:	0a29      	lsrs	r1, r5, #8
100557ba:	7421      	strb	r1, [r4, #16]
100557bc:	73e5      	strb	r5, [r4, #15]
100557be:	0a31      	lsrs	r1, r6, #8
100557c0:	73a1      	strb	r1, [r4, #14]
100557c2:	7366      	strb	r6, [r4, #13]
100557c4:	9a01      	ldr	r2, [sp, #4]
100557c6:	0a11      	lsrs	r1, r2, #8
100557c8:	7321      	strb	r1, [r4, #12]
100557ca:	72e2      	strb	r2, [r4, #11]
100557cc:	9a02      	ldr	r2, [sp, #8]
100557ce:	0a11      	lsrs	r1, r2, #8
100557d0:	72a1      	strb	r1, [r4, #10]
100557d2:	7262      	strb	r2, [r4, #9]
100557d4:	9a03      	ldr	r2, [sp, #12]
100557d6:	0a11      	lsrs	r1, r2, #8
100557d8:	71e1      	strb	r1, [r4, #7]
100557da:	71a2      	strb	r2, [r4, #6]
100557dc:	9904      	ldr	r1, [sp, #16]
100557de:	7221      	strb	r1, [r4, #8]
100557e0:	0a00      	lsrs	r0, r0, #8
100557e2:	74a0      	strb	r0, [r4, #18]
100557e4:	b005      	add	sp, #20
100557e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100557e8 <__arm_cp.42_0>:
100557e8:	10054dcf 	.word	0x10054dcf

100557ec <ACL_pkt_read_8b>:
100557ec:	b51c      	push	{r2, r3, r4, lr}
100557ee:	291f      	cmp	r1, #31
100557f0:	d803      	bhi.n	100557fa <ACL_pkt_read_8b+0xe>
100557f2:	aa01      	add	r2, sp, #4
100557f4:	8011      	strh	r1, [r2, #0]
100557f6:	6840      	ldr	r0, [r0, #4]
100557f8:	e005      	b.n	10055806 <ACL_pkt_read_8b+0x1a>
100557fa:	6840      	ldr	r0, [r0, #4]
100557fc:	ac01      	add	r4, sp, #4
100557fe:	4622      	mov	r2, r4
10055800:	f00b fa87 	bl	10060d12 <Mem_Buff_get_buff_off>
10055804:	8821      	ldrh	r1, [r4, #0]
10055806:	1840      	adds	r0, r0, r1
10055808:	7900      	ldrb	r0, [r0, #4]
1005580a:	bd1c      	pop	{r2, r3, r4, pc}

1005580c <aci_l2cap_command_reject_event_copy>:
1005580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005580e:	4615      	mov	r5, r2
10055810:	460e      	mov	r6, r1
10055812:	4604      	mov	r4, r0
10055814:	6850      	ldr	r0, [r2, #4]
10055816:	7a40      	ldrb	r0, [r0, #9]
10055818:	9000      	str	r0, [sp, #0]
1005581a:	2106      	movs	r1, #6
1005581c:	4610      	mov	r0, r2
1005581e:	f7ff fad6 	bl	10054dce <ACL_pkt_read_16b>
10055822:	4607      	mov	r7, r0
10055824:	2108      	movs	r1, #8
10055826:	4628      	mov	r0, r5
10055828:	f7ff fad1 	bl	10054dce <ACL_pkt_read_16b>
1005582c:	1eb9      	subs	r1, r7, #2
1005582e:	72e1      	strb	r1, [r4, #11]
10055830:	7260      	strb	r0, [r4, #9]
10055832:	9a00      	ldr	r2, [sp, #0]
10055834:	7222      	strb	r2, [r4, #8]
10055836:	0a32      	lsrs	r2, r6, #8
10055838:	71e2      	strb	r2, [r4, #7]
1005583a:	71a6      	strb	r6, [r4, #6]
1005583c:	0a00      	lsrs	r0, r0, #8
1005583e:	72a0      	strb	r0, [r4, #10]
10055840:	b2ca      	uxtb	r2, r1
10055842:	89a8      	ldrh	r0, [r5, #12]
10055844:	340c      	adds	r4, #12
10055846:	1d80      	adds	r0, r0, #6
10055848:	b281      	uxth	r1, r0
1005584a:	4628      	mov	r0, r5
1005584c:	4623      	mov	r3, r4
1005584e:	f7ff fab5 	bl	10054dbc <ACL_pkt_read>
10055852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10055854 <aci_att_clt_find_info_resp_event_copy>:
10055854:	b570      	push	{r4, r5, r6, lr}
10055856:	461c      	mov	r4, r3
10055858:	4605      	mov	r5, r0
1005585a:	885e      	ldrh	r6, [r3, #2]
1005585c:	0a10      	lsrs	r0, r2, #8
1005585e:	70e8      	strb	r0, [r5, #3]
10055860:	70aa      	strb	r2, [r5, #2]
10055862:	0a08      	lsrs	r0, r1, #8
10055864:	7068      	strb	r0, [r5, #1]
10055866:	7029      	strb	r1, [r5, #0]
10055868:	8998      	ldrh	r0, [r3, #12]
1005586a:	1c40      	adds	r0, r0, #1
1005586c:	b281      	uxth	r1, r0
1005586e:	4618      	mov	r0, r3
10055870:	f7ff ffbc 	bl	100557ec <ACL_pkt_read_8b>
10055874:	1eb1      	subs	r1, r6, #2
10055876:	0a0a      	lsrs	r2, r1, #8
10055878:	71aa      	strb	r2, [r5, #6]
1005587a:	7169      	strb	r1, [r5, #5]
1005587c:	7128      	strb	r0, [r5, #4]
1005587e:	89a0      	ldrh	r0, [r4, #12]
10055880:	1deb      	adds	r3, r5, #7
10055882:	b28a      	uxth	r2, r1
10055884:	1c80      	adds	r0, r0, #2
10055886:	b281      	uxth	r1, r0
10055888:	4620      	mov	r0, r4
1005588a:	f7ff fa97 	bl	10054dbc <ACL_pkt_read>
1005588e:	bd70      	pop	{r4, r5, r6, pc}

10055890 <aci_att_clt_find_by_type_value_resp_event_copy>:
10055890:	b5b0      	push	{r4, r5, r7, lr}
10055892:	461c      	mov	r4, r3
10055894:	885b      	ldrh	r3, [r3, #2]
10055896:	0a15      	lsrs	r5, r2, #8
10055898:	70c5      	strb	r5, [r0, #3]
1005589a:	7082      	strb	r2, [r0, #2]
1005589c:	0a0a      	lsrs	r2, r1, #8
1005589e:	7042      	strb	r2, [r0, #1]
100558a0:	7001      	strb	r1, [r0, #0]
100558a2:	1e59      	subs	r1, r3, #1
100558a4:	088a      	lsrs	r2, r1, #2
100558a6:	7102      	strb	r2, [r0, #4]
100558a8:	89a5      	ldrh	r5, [r4, #12]
100558aa:	1d43      	adds	r3, r0, #5
100558ac:	b28a      	uxth	r2, r1
100558ae:	1c68      	adds	r0, r5, #1
100558b0:	b281      	uxth	r1, r0
100558b2:	4620      	mov	r0, r4
100558b4:	f7ff fa82 	bl	10054dbc <ACL_pkt_read>
100558b8:	bdb0      	pop	{r4, r5, r7, pc}

100558ba <aci_att_clt_read_by_type_resp_event_copy>:
100558ba:	b570      	push	{r4, r5, r6, lr}
100558bc:	461c      	mov	r4, r3
100558be:	4605      	mov	r5, r0
100558c0:	885e      	ldrh	r6, [r3, #2]
100558c2:	0a10      	lsrs	r0, r2, #8
100558c4:	70e8      	strb	r0, [r5, #3]
100558c6:	70aa      	strb	r2, [r5, #2]
100558c8:	0a08      	lsrs	r0, r1, #8
100558ca:	7068      	strb	r0, [r5, #1]
100558cc:	7029      	strb	r1, [r5, #0]
100558ce:	8998      	ldrh	r0, [r3, #12]
100558d0:	1c40      	adds	r0, r0, #1
100558d2:	b281      	uxth	r1, r0
100558d4:	4618      	mov	r0, r3
100558d6:	f7ff ff89 	bl	100557ec <ACL_pkt_read_8b>
100558da:	1eb1      	subs	r1, r6, #2
100558dc:	0a0a      	lsrs	r2, r1, #8
100558de:	71aa      	strb	r2, [r5, #6]
100558e0:	7169      	strb	r1, [r5, #5]
100558e2:	7128      	strb	r0, [r5, #4]
100558e4:	89a0      	ldrh	r0, [r4, #12]
100558e6:	1deb      	adds	r3, r5, #7
100558e8:	b28a      	uxth	r2, r1
100558ea:	1c80      	adds	r0, r0, #2
100558ec:	b281      	uxth	r1, r0
100558ee:	4620      	mov	r0, r4
100558f0:	f7ff fa64 	bl	10054dbc <ACL_pkt_read>
100558f4:	bd70      	pop	{r4, r5, r6, pc}

100558f6 <aci_att_clt_read_resp_event_copy>:
100558f6:	b5b0      	push	{r4, r5, r7, lr}
100558f8:	461c      	mov	r4, r3
100558fa:	885b      	ldrh	r3, [r3, #2]
100558fc:	0a15      	lsrs	r5, r2, #8
100558fe:	70c5      	strb	r5, [r0, #3]
10055900:	7082      	strb	r2, [r0, #2]
10055902:	0a0a      	lsrs	r2, r1, #8
10055904:	7042      	strb	r2, [r0, #1]
10055906:	7001      	strb	r1, [r0, #0]
10055908:	1e59      	subs	r1, r3, #1
1005590a:	7101      	strb	r1, [r0, #4]
1005590c:	0a0a      	lsrs	r2, r1, #8
1005590e:	7142      	strb	r2, [r0, #5]
10055910:	89a5      	ldrh	r5, [r4, #12]
10055912:	1d83      	adds	r3, r0, #6
10055914:	b28a      	uxth	r2, r1
10055916:	1c68      	adds	r0, r5, #1
10055918:	b281      	uxth	r1, r0
1005591a:	4620      	mov	r0, r4
1005591c:	f7ff fa4e 	bl	10054dbc <ACL_pkt_read>
10055920:	bdb0      	pop	{r4, r5, r7, pc}

10055922 <aci_att_clt_read_blob_resp_event_copy>:
10055922:	b5b0      	push	{r4, r5, r7, lr}
10055924:	461c      	mov	r4, r3
10055926:	885b      	ldrh	r3, [r3, #2]
10055928:	0a15      	lsrs	r5, r2, #8
1005592a:	70c5      	strb	r5, [r0, #3]
1005592c:	7082      	strb	r2, [r0, #2]
1005592e:	0a0a      	lsrs	r2, r1, #8
10055930:	7042      	strb	r2, [r0, #1]
10055932:	7001      	strb	r1, [r0, #0]
10055934:	1e59      	subs	r1, r3, #1
10055936:	7101      	strb	r1, [r0, #4]
10055938:	0a0a      	lsrs	r2, r1, #8
1005593a:	7142      	strb	r2, [r0, #5]
1005593c:	89a5      	ldrh	r5, [r4, #12]
1005593e:	1d83      	adds	r3, r0, #6
10055940:	b28a      	uxth	r2, r1
10055942:	1c68      	adds	r0, r5, #1
10055944:	b281      	uxth	r1, r0
10055946:	4620      	mov	r0, r4
10055948:	f7ff fa38 	bl	10054dbc <ACL_pkt_read>
1005594c:	bdb0      	pop	{r4, r5, r7, pc}

1005594e <aci_att_clt_read_multiple_resp_event_copy>:
1005594e:	b5b0      	push	{r4, r5, r7, lr}
10055950:	461c      	mov	r4, r3
10055952:	885b      	ldrh	r3, [r3, #2]
10055954:	0a15      	lsrs	r5, r2, #8
10055956:	70c5      	strb	r5, [r0, #3]
10055958:	7082      	strb	r2, [r0, #2]
1005595a:	0a0a      	lsrs	r2, r1, #8
1005595c:	7042      	strb	r2, [r0, #1]
1005595e:	7001      	strb	r1, [r0, #0]
10055960:	1e59      	subs	r1, r3, #1
10055962:	7101      	strb	r1, [r0, #4]
10055964:	0a0a      	lsrs	r2, r1, #8
10055966:	7142      	strb	r2, [r0, #5]
10055968:	89a5      	ldrh	r5, [r4, #12]
1005596a:	1d83      	adds	r3, r0, #6
1005596c:	b28a      	uxth	r2, r1
1005596e:	1c68      	adds	r0, r5, #1
10055970:	b281      	uxth	r1, r0
10055972:	4620      	mov	r0, r4
10055974:	f7ff fa22 	bl	10054dbc <ACL_pkt_read>
10055978:	bdb0      	pop	{r4, r5, r7, pc}

1005597a <aci_att_clt_read_by_group_type_resp_event_copy>:
1005597a:	b570      	push	{r4, r5, r6, lr}
1005597c:	461c      	mov	r4, r3
1005597e:	4605      	mov	r5, r0
10055980:	885e      	ldrh	r6, [r3, #2]
10055982:	0a10      	lsrs	r0, r2, #8
10055984:	70e8      	strb	r0, [r5, #3]
10055986:	70aa      	strb	r2, [r5, #2]
10055988:	0a08      	lsrs	r0, r1, #8
1005598a:	7068      	strb	r0, [r5, #1]
1005598c:	7029      	strb	r1, [r5, #0]
1005598e:	8998      	ldrh	r0, [r3, #12]
10055990:	1c40      	adds	r0, r0, #1
10055992:	b281      	uxth	r1, r0
10055994:	4618      	mov	r0, r3
10055996:	f7ff ff29 	bl	100557ec <ACL_pkt_read_8b>
1005599a:	1eb1      	subs	r1, r6, #2
1005599c:	0a0a      	lsrs	r2, r1, #8
1005599e:	71aa      	strb	r2, [r5, #6]
100559a0:	7169      	strb	r1, [r5, #5]
100559a2:	7128      	strb	r0, [r5, #4]
100559a4:	89a0      	ldrh	r0, [r4, #12]
100559a6:	1deb      	adds	r3, r5, #7
100559a8:	b28a      	uxth	r2, r1
100559aa:	1c80      	adds	r0, r0, #2
100559ac:	b281      	uxth	r1, r0
100559ae:	4620      	mov	r0, r4
100559b0:	f7ff fa04 	bl	10054dbc <ACL_pkt_read>
100559b4:	bd70      	pop	{r4, r5, r6, pc}

100559b6 <aci_att_clt_prepare_write_resp_event_copy>:
100559b6:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100559b8:	461c      	mov	r4, r3
100559ba:	4617      	mov	r7, r2
100559bc:	9102      	str	r1, [sp, #8]
100559be:	4605      	mov	r5, r0
100559c0:	8858      	ldrh	r0, [r3, #2]
100559c2:	9001      	str	r0, [sp, #4]
100559c4:	8998      	ldrh	r0, [r3, #12]
100559c6:	1c40      	adds	r0, r0, #1
100559c8:	b281      	uxth	r1, r0
100559ca:	4618      	mov	r0, r3
100559cc:	f7ff f9ff 	bl	10054dce <ACL_pkt_read_16b>
100559d0:	4606      	mov	r6, r0
100559d2:	89a0      	ldrh	r0, [r4, #12]
100559d4:	1cc0      	adds	r0, r0, #3
100559d6:	b281      	uxth	r1, r0
100559d8:	4620      	mov	r0, r4
100559da:	f7ff f9f8 	bl	10054dce <ACL_pkt_read_16b>
100559de:	9901      	ldr	r1, [sp, #4]
100559e0:	1f49      	subs	r1, r1, #5
100559e2:	0a0a      	lsrs	r2, r1, #8
100559e4:	726a      	strb	r2, [r5, #9]
100559e6:	7229      	strb	r1, [r5, #8]
100559e8:	71a8      	strb	r0, [r5, #6]
100559ea:	0a32      	lsrs	r2, r6, #8
100559ec:	716a      	strb	r2, [r5, #5]
100559ee:	712e      	strb	r6, [r5, #4]
100559f0:	0a3a      	lsrs	r2, r7, #8
100559f2:	70ea      	strb	r2, [r5, #3]
100559f4:	70af      	strb	r7, [r5, #2]
100559f6:	9b02      	ldr	r3, [sp, #8]
100559f8:	0a1a      	lsrs	r2, r3, #8
100559fa:	706a      	strb	r2, [r5, #1]
100559fc:	702b      	strb	r3, [r5, #0]
100559fe:	0a00      	lsrs	r0, r0, #8
10055a00:	71e8      	strb	r0, [r5, #7]
10055a02:	89a0      	ldrh	r0, [r4, #12]
10055a04:	350a      	adds	r5, #10
10055a06:	b28a      	uxth	r2, r1
10055a08:	1d40      	adds	r0, r0, #5
10055a0a:	b281      	uxth	r1, r0
10055a0c:	4620      	mov	r0, r4
10055a0e:	462b      	mov	r3, r5
10055a10:	f7ff f9d4 	bl	10054dbc <ACL_pkt_read>
10055a14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10055a16 <aci_gatt_clt_indication_event_copy>:
10055a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055a18:	461c      	mov	r4, r3
10055a1a:	4617      	mov	r7, r2
10055a1c:	460e      	mov	r6, r1
10055a1e:	4605      	mov	r5, r0
10055a20:	8858      	ldrh	r0, [r3, #2]
10055a22:	9000      	str	r0, [sp, #0]
10055a24:	8998      	ldrh	r0, [r3, #12]
10055a26:	1c40      	adds	r0, r0, #1
10055a28:	b281      	uxth	r1, r0
10055a2a:	4618      	mov	r0, r3
10055a2c:	f7ff f9cf 	bl	10054dce <ACL_pkt_read_16b>
10055a30:	9900      	ldr	r1, [sp, #0]
10055a32:	1ec9      	subs	r1, r1, #3
10055a34:	0a0a      	lsrs	r2, r1, #8
10055a36:	71ea      	strb	r2, [r5, #7]
10055a38:	71a9      	strb	r1, [r5, #6]
10055a3a:	7128      	strb	r0, [r5, #4]
10055a3c:	0a3a      	lsrs	r2, r7, #8
10055a3e:	70ea      	strb	r2, [r5, #3]
10055a40:	70af      	strb	r7, [r5, #2]
10055a42:	0a32      	lsrs	r2, r6, #8
10055a44:	706a      	strb	r2, [r5, #1]
10055a46:	702e      	strb	r6, [r5, #0]
10055a48:	0a00      	lsrs	r0, r0, #8
10055a4a:	7168      	strb	r0, [r5, #5]
10055a4c:	89a0      	ldrh	r0, [r4, #12]
10055a4e:	3508      	adds	r5, #8
10055a50:	b28a      	uxth	r2, r1
10055a52:	1cc0      	adds	r0, r0, #3
10055a54:	b281      	uxth	r1, r0
10055a56:	4620      	mov	r0, r4
10055a58:	462b      	mov	r3, r5
10055a5a:	f7ff f9af 	bl	10054dbc <ACL_pkt_read>
10055a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10055a60 <aci_gatt_clt_notification_event_copy>:
10055a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055a62:	461c      	mov	r4, r3
10055a64:	4617      	mov	r7, r2
10055a66:	460e      	mov	r6, r1
10055a68:	4605      	mov	r5, r0
10055a6a:	8858      	ldrh	r0, [r3, #2]
10055a6c:	9000      	str	r0, [sp, #0]
10055a6e:	8998      	ldrh	r0, [r3, #12]
10055a70:	1c40      	adds	r0, r0, #1
10055a72:	b281      	uxth	r1, r0
10055a74:	4618      	mov	r0, r3
10055a76:	f7ff f9aa 	bl	10054dce <ACL_pkt_read_16b>
10055a7a:	9900      	ldr	r1, [sp, #0]
10055a7c:	1ec9      	subs	r1, r1, #3
10055a7e:	0a0a      	lsrs	r2, r1, #8
10055a80:	71ea      	strb	r2, [r5, #7]
10055a82:	71a9      	strb	r1, [r5, #6]
10055a84:	7128      	strb	r0, [r5, #4]
10055a86:	0a3a      	lsrs	r2, r7, #8
10055a88:	70ea      	strb	r2, [r5, #3]
10055a8a:	70af      	strb	r7, [r5, #2]
10055a8c:	0a32      	lsrs	r2, r6, #8
10055a8e:	706a      	strb	r2, [r5, #1]
10055a90:	702e      	strb	r6, [r5, #0]
10055a92:	0a00      	lsrs	r0, r0, #8
10055a94:	7168      	strb	r0, [r5, #5]
10055a96:	89a0      	ldrh	r0, [r4, #12]
10055a98:	3508      	adds	r5, #8
10055a9a:	b28a      	uxth	r2, r1
10055a9c:	1cc0      	adds	r0, r0, #3
10055a9e:	b281      	uxth	r1, r0
10055aa0:	4620      	mov	r0, r4
10055aa2:	462b      	mov	r3, r5
10055aa4:	f7ff f98a 	bl	10054dbc <ACL_pkt_read>
10055aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10055aaa <aci_gatt_clt_disc_read_char_by_uuid_resp_event_copy>:
10055aaa:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10055aac:	461d      	mov	r5, r3
10055aae:	4604      	mov	r4, r0
10055ab0:	7202      	strb	r2, [r0, #8]
10055ab2:	7181      	strb	r1, [r0, #6]
10055ab4:	0a10      	lsrs	r0, r2, #8
10055ab6:	7260      	strb	r0, [r4, #9]
10055ab8:	0a08      	lsrs	r0, r1, #8
10055aba:	71e0      	strb	r0, [r4, #7]
10055abc:	9e07      	ldr	r6, [sp, #28]
10055abe:	89b0      	ldrh	r0, [r6, #12]
10055ac0:	18c0      	adds	r0, r0, r3
10055ac2:	b281      	uxth	r1, r0
10055ac4:	2202      	movs	r2, #2
10055ac6:	ab01      	add	r3, sp, #4
10055ac8:	4630      	mov	r0, r6
10055aca:	f7ff f977 	bl	10054dbc <ACL_pkt_read>
10055ace:	9806      	ldr	r0, [sp, #24]
10055ad0:	1e80      	subs	r0, r0, #2
10055ad2:	7320      	strb	r0, [r4, #12]
10055ad4:	9901      	ldr	r1, [sp, #4]
10055ad6:	72a1      	strb	r1, [r4, #10]
10055ad8:	0a09      	lsrs	r1, r1, #8
10055ada:	72e1      	strb	r1, [r4, #11]
10055adc:	89b1      	ldrh	r1, [r6, #12]
10055ade:	1869      	adds	r1, r5, r1
10055ae0:	1c89      	adds	r1, r1, #2
10055ae2:	b289      	uxth	r1, r1
10055ae4:	340d      	adds	r4, #13
10055ae6:	b2c2      	uxtb	r2, r0
10055ae8:	4630      	mov	r0, r6
10055aea:	4623      	mov	r3, r4
10055aec:	f7ff f966 	bl	10054dbc <ACL_pkt_read>
10055af0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10055af2 <aci_gatt_srv_write_event_copy>:
10055af2:	b5b0      	push	{r4, r5, r7, lr}
10055af4:	4615      	mov	r5, r2
10055af6:	4604      	mov	r4, r0
10055af8:	9a05      	ldr	r2, [sp, #20]
10055afa:	71c2      	strb	r2, [r0, #7]
10055afc:	9804      	ldr	r0, [sp, #16]
10055afe:	7160      	strb	r0, [r4, #5]
10055b00:	7123      	strb	r3, [r4, #4]
10055b02:	70a5      	strb	r5, [r4, #2]
10055b04:	7021      	strb	r1, [r4, #0]
10055b06:	0a13      	lsrs	r3, r2, #8
10055b08:	7223      	strb	r3, [r4, #8]
10055b0a:	0a00      	lsrs	r0, r0, #8
10055b0c:	71a0      	strb	r0, [r4, #6]
10055b0e:	0a28      	lsrs	r0, r5, #8
10055b10:	70e0      	strb	r0, [r4, #3]
10055b12:	0a08      	lsrs	r0, r1, #8
10055b14:	7060      	strb	r0, [r4, #1]
10055b16:	9806      	ldr	r0, [sp, #24]
10055b18:	8981      	ldrh	r1, [r0, #12]
10055b1a:	3409      	adds	r4, #9
10055b1c:	1cc9      	adds	r1, r1, #3
10055b1e:	b289      	uxth	r1, r1
10055b20:	4623      	mov	r3, r4
10055b22:	f7ff f94b 	bl	10054dbc <ACL_pkt_read>
10055b26:	bdb0      	pop	{r4, r5, r7, pc}

10055b28 <aci_att_srv_prepare_write_req_event_copy>:
10055b28:	b570      	push	{r4, r5, r6, lr}
10055b2a:	4615      	mov	r5, r2
10055b2c:	4604      	mov	r4, r0
10055b2e:	9a05      	ldr	r2, [sp, #20]
10055b30:	7202      	strb	r2, [r0, #8]
10055b32:	9804      	ldr	r0, [sp, #16]
10055b34:	71a0      	strb	r0, [r4, #6]
10055b36:	7123      	strb	r3, [r4, #4]
10055b38:	70a5      	strb	r5, [r4, #2]
10055b3a:	7021      	strb	r1, [r4, #0]
10055b3c:	0a16      	lsrs	r6, r2, #8
10055b3e:	7266      	strb	r6, [r4, #9]
10055b40:	0a00      	lsrs	r0, r0, #8
10055b42:	71e0      	strb	r0, [r4, #7]
10055b44:	0a18      	lsrs	r0, r3, #8
10055b46:	7160      	strb	r0, [r4, #5]
10055b48:	0a28      	lsrs	r0, r5, #8
10055b4a:	70e0      	strb	r0, [r4, #3]
10055b4c:	0a08      	lsrs	r0, r1, #8
10055b4e:	7060      	strb	r0, [r4, #1]
10055b50:	9806      	ldr	r0, [sp, #24]
10055b52:	8981      	ldrh	r1, [r0, #12]
10055b54:	340a      	adds	r4, #10
10055b56:	1d49      	adds	r1, r1, #5
10055b58:	b289      	uxth	r1, r1
10055b5a:	4623      	mov	r3, r4
10055b5c:	f7ff f92e 	bl	10054dbc <ACL_pkt_read>
10055b60:	bd70      	pop	{r4, r5, r6, pc}

10055b62 <aci_gatt_clt_multi_notification_int_event_copy>:
10055b62:	b5b0      	push	{r4, r5, r7, lr}
10055b64:	461c      	mov	r4, r3
10055b66:	885b      	ldrh	r3, [r3, #2]
10055b68:	0a15      	lsrs	r5, r2, #8
10055b6a:	70c5      	strb	r5, [r0, #3]
10055b6c:	7082      	strb	r2, [r0, #2]
10055b6e:	0a0a      	lsrs	r2, r1, #8
10055b70:	7042      	strb	r2, [r0, #1]
10055b72:	7001      	strb	r1, [r0, #0]
10055b74:	1e59      	subs	r1, r3, #1
10055b76:	7101      	strb	r1, [r0, #4]
10055b78:	0a0a      	lsrs	r2, r1, #8
10055b7a:	7142      	strb	r2, [r0, #5]
10055b7c:	89a5      	ldrh	r5, [r4, #12]
10055b7e:	1d83      	adds	r3, r0, #6
10055b80:	b28a      	uxth	r2, r1
10055b82:	1c68      	adds	r0, r5, #1
10055b84:	b281      	uxth	r1, r0
10055b86:	4620      	mov	r0, r4
10055b88:	f7ff f918 	bl	10054dbc <ACL_pkt_read>
10055b8c:	bdb0      	pop	{r4, r5, r7, pc}

10055b8e <aci_att_clt_read_multiple_var_len_resp_event_copy>:
10055b8e:	b5b0      	push	{r4, r5, r7, lr}
10055b90:	461c      	mov	r4, r3
10055b92:	885b      	ldrh	r3, [r3, #2]
10055b94:	0a15      	lsrs	r5, r2, #8
10055b96:	70c5      	strb	r5, [r0, #3]
10055b98:	7082      	strb	r2, [r0, #2]
10055b9a:	0a0a      	lsrs	r2, r1, #8
10055b9c:	7042      	strb	r2, [r0, #1]
10055b9e:	7001      	strb	r1, [r0, #0]
10055ba0:	1e59      	subs	r1, r3, #1
10055ba2:	7101      	strb	r1, [r0, #4]
10055ba4:	0a0a      	lsrs	r2, r1, #8
10055ba6:	7142      	strb	r2, [r0, #5]
10055ba8:	89a5      	ldrh	r5, [r4, #12]
10055baa:	1d83      	adds	r3, r0, #6
10055bac:	b28a      	uxth	r2, r1
10055bae:	1c68      	adds	r0, r5, #1
10055bb0:	b281      	uxth	r1, r0
10055bb2:	4620      	mov	r0, r4
10055bb4:	f7ff f902 	bl	10054dbc <ACL_pkt_read>
10055bb8:	bdb0      	pop	{r4, r5, r7, pc}

10055bba <hci_rx_acl_data_event_copy>:
10055bba:	b5b0      	push	{r4, r5, r7, lr}
10055bbc:	4614      	mov	r4, r2
10055bbe:	9a04      	ldr	r2, [sp, #16]
10055bc0:	70c2      	strb	r2, [r0, #3]
10055bc2:	7041      	strb	r1, [r0, #1]
10055bc4:	0a15      	lsrs	r5, r2, #8
10055bc6:	7105      	strb	r5, [r0, #4]
10055bc8:	250f      	movs	r5, #15
10055bca:	022d      	lsls	r5, r5, #8
10055bcc:	400d      	ands	r5, r1
10055bce:	07a1      	lsls	r1, r4, #30
10055bd0:	0c89      	lsrs	r1, r1, #18
10055bd2:	1949      	adds	r1, r1, r5
10055bd4:	039b      	lsls	r3, r3, #14
10055bd6:	18c9      	adds	r1, r1, r3
10055bd8:	0a09      	lsrs	r1, r1, #8
10055bda:	7081      	strb	r1, [r0, #2]
10055bdc:	1d43      	adds	r3, r0, #5
10055bde:	9805      	ldr	r0, [sp, #20]
10055be0:	2100      	movs	r1, #0
10055be2:	f7ff f8eb 	bl	10054dbc <ACL_pkt_read>
10055be6:	bdb0      	pop	{r4, r5, r7, pc}

10055be8 <aci_l2cap_proc_timeout_event_copy>:
10055be8:	7001      	strb	r1, [r0, #0]
10055bea:	2200      	movs	r2, #0
10055bec:	7082      	strb	r2, [r0, #2]
10055bee:	0a09      	lsrs	r1, r1, #8
10055bf0:	7041      	strb	r1, [r0, #1]
10055bf2:	4770      	bx	lr

10055bf4 <hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg_weak>:
10055bf4:	2000      	movs	r0, #0
10055bf6:	4770      	bx	lr

10055bf8 <hci_hardware_error_event_cb>:
10055bf8:	b5e0      	push	{r5, r6, r7, lr}
10055bfa:	aa01      	add	r2, sp, #4
10055bfc:	70d0      	strb	r0, [r2, #3]
10055bfe:	2001      	movs	r0, #1
10055c00:	7090      	strb	r0, [r2, #2]
10055c02:	2010      	movs	r0, #16
10055c04:	7050      	strb	r0, [r2, #1]
10055c06:	2104      	movs	r1, #4
10055c08:	7011      	strb	r1, [r2, #0]
10055c0a:	4610      	mov	r0, r2
10055c0c:	f7f8 fef0 	bl	1004e9f0 <BLE_STACK_Event>
10055c10:	bd8c      	pop	{r2, r3, r7, pc}

10055c12 <GAP_enable_disable_scan_ucfg_weak>:
10055c12:	2000      	movs	r0, #0
10055c14:	4770      	bx	lr

10055c16 <GAP_discover_peer_name_ucfg_weak>:
10055c16:	2000      	movs	r0, #0
10055c18:	4770      	bx	lr
	...

10055c1c <GAP_name_disc_proc_connected_check>:
10055c1c:	b51c      	push	{r2, r3, r4, lr}
10055c1e:	4811      	ldr	r0, [pc, #68]	@ (10055c64 <__arm_cp.18_0>)
10055c20:	6804      	ldr	r4, [r0, #0]
10055c22:	f7ff fff8 	bl	10055c16 <GAP_discover_peer_name_ucfg_weak>
10055c26:	2888      	cmp	r0, #136	@ 0x88
10055c28:	d007      	beq.n	10055c3a <GAP_name_disc_proc_connected_check+0x1e>
10055c2a:	280c      	cmp	r0, #12
10055c2c:	d005      	beq.n	10055c3a <GAP_name_disc_proc_connected_check+0x1e>
10055c2e:	345d      	adds	r4, #93	@ 0x5d
10055c30:	2800      	cmp	r0, #0
10055c32:	d108      	bne.n	10055c46 <GAP_name_disc_proc_connected_check+0x2a>
10055c34:	2002      	movs	r0, #2
10055c36:	7060      	strb	r0, [r4, #1]
10055c38:	bd1c      	pop	{r2, r3, r4, pc}
10055c3a:	2005      	movs	r0, #5
10055c3c:	f00c fda0 	bl	10062780 <tsk_notify_idx>
10055c40:	f7fb ff21 	bl	10051a86 <BLE_STACK_ProcessRequest>
10055c44:	bd1c      	pop	{r2, r3, r4, pc}
10055c46:	2000      	movs	r0, #0
10055c48:	7060      	strb	r0, [r4, #1]
10055c4a:	7820      	ldrb	r0, [r4, #0]
10055c4c:	217f      	movs	r1, #127	@ 0x7f
10055c4e:	4001      	ands	r1, r0
10055c50:	7021      	strb	r1, [r4, #0]
10055c52:	a901      	add	r1, sp, #4
10055c54:	2086      	movs	r0, #134	@ 0x86
10055c56:	7048      	strb	r0, [r1, #1]
10055c58:	2080      	movs	r0, #128	@ 0x80
10055c5a:	7008      	strb	r0, [r1, #0]
10055c5c:	2002      	movs	r0, #2
10055c5e:	f000 f9bf 	bl	10055fe0 <aci_gap_proc_complete_event_wrapper>
10055c62:	bd1c      	pop	{r2, r3, r4, pc}

10055c64 <__arm_cp.18_0>:
10055c64:	20002424 	.word	0x20002424

10055c68 <GAP_central_connection_complete_handler_ucfg_weak>:
10055c68:	4770      	bx	lr

10055c6a <GAP_DiscProcTimeoutcb_ucfg_weak>:
10055c6a:	4770      	bx	lr

10055c6c <GAP_started_gatt_proc>:
10055c6c:	4907      	ldr	r1, [pc, #28]	@ (10055c8c <__arm_cp.28_0>)
10055c6e:	6809      	ldr	r1, [r1, #0]
10055c70:	225d      	movs	r2, #93	@ 0x5d
10055c72:	5c8a      	ldrb	r2, [r1, r2]
10055c74:	2388      	movs	r3, #136	@ 0x88
10055c76:	421a      	tst	r2, r3
10055c78:	d004      	beq.n	10055c84 <GAP_started_gatt_proc+0x18>
10055c7a:	3172      	adds	r1, #114	@ 0x72
10055c7c:	8809      	ldrh	r1, [r1, #0]
10055c7e:	4041      	eors	r1, r0
10055c80:	0508      	lsls	r0, r1, #20
10055c82:	d001      	beq.n	10055c88 <GAP_started_gatt_proc+0x1c>
10055c84:	2000      	movs	r0, #0
10055c86:	4770      	bx	lr
10055c88:	2001      	movs	r0, #1
10055c8a:	4770      	bx	lr

10055c8c <__arm_cp.28_0>:
10055c8c:	20002424 	.word	0x20002424

10055c90 <gap_timers_callback_wrapper>:
10055c90:	b580      	push	{r7, lr}
10055c92:	6940      	ldr	r0, [r0, #20]
10055c94:	4901      	ldr	r1, [pc, #4]	@ (10055c9c <__arm_cp.0_0>)
10055c96:	f00c feaa 	bl	100629ee <cst_sharedCallback>
10055c9a:	bd80      	pop	{r7, pc}

10055c9c <__arm_cp.0_0>:
10055c9c:	10055ca1 	.word	0x10055ca1

10055ca0 <gap_timers_callback>:
10055ca0:	b580      	push	{r7, lr}
10055ca2:	2802      	cmp	r0, #2
10055ca4:	d007      	beq.n	10055cb6 <gap_timers_callback+0x16>
10055ca6:	2801      	cmp	r0, #1
10055ca8:	d009      	beq.n	10055cbe <gap_timers_callback+0x1e>
10055caa:	2800      	cmp	r0, #0
10055cac:	d106      	bne.n	10055cbc <gap_timers_callback+0x1c>
10055cae:	2000      	movs	r0, #0
10055cb0:	f7f8 ff19 	bl	1004eae6 <GAP_LimDiscTimeoutcb_ucfg>
10055cb4:	bd80      	pop	{r7, pc}
10055cb6:	2000      	movs	r0, #0
10055cb8:	f7ff ffd7 	bl	10055c6a <GAP_DiscProcTimeoutcb_ucfg_weak>
10055cbc:	bd80      	pop	{r7, pc}
10055cbe:	2000      	movs	r0, #0
10055cc0:	f000 f802 	bl	10055cc8 <GAP_PrivateAddrTimercb>
10055cc4:	bd80      	pop	{r7, pc}
	...

10055cc8 <GAP_PrivateAddrTimercb>:
10055cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10055cca:	b087      	sub	sp, #28
10055ccc:	4831      	ldr	r0, [pc, #196]	@ (10055d94 <__arm_cp.2_0>)
10055cce:	6804      	ldr	r4, [r0, #0]
10055cd0:	a906      	add	r1, sp, #24
10055cd2:	9104      	str	r1, [sp, #16]
10055cd4:	2000      	movs	r0, #0
10055cd6:	9001      	str	r0, [sp, #4]
10055cd8:	7008      	strb	r0, [r1, #0]
10055cda:	ae05      	add	r6, sp, #20
10055cdc:	2001      	movs	r0, #1
10055cde:	7030      	strb	r0, [r6, #0]
10055ce0:	f000 f950 	bl	10055f84 <GAP_reset_privacy_timer>
10055ce4:	205d      	movs	r0, #93	@ 0x5d
10055ce6:	9403      	str	r4, [sp, #12]
10055ce8:	5c27      	ldrb	r7, [r4, r0]
10055cea:	1e78      	subs	r0, r7, #1
10055cec:	463d      	mov	r5, r7
10055cee:	4185      	sbcs	r5, r0
10055cf0:	2020      	movs	r0, #32
10055cf2:	4038      	ands	r0, r7
10055cf4:	4244      	negs	r4, r0
10055cf6:	9002      	str	r0, [sp, #8]
10055cf8:	4144      	adcs	r4, r0
10055cfa:	9804      	ldr	r0, [sp, #16]
10055cfc:	4631      	mov	r1, r6
10055cfe:	f000 fd51 	bl	100567a4 <GAP_check_adv_status>
10055d02:	2f00      	cmp	r7, #0
10055d04:	d101      	bne.n	10055d0a <GAP_PrivateAddrTimercb+0x42>
10055d06:	2801      	cmp	r0, #1
10055d08:	d13e      	bne.n	10055d88 <GAP_PrivateAddrTimercb+0xc0>
10055d0a:	402c      	ands	r4, r5
10055d0c:	d138      	bne.n	10055d80 <GAP_PrivateAddrTimercb+0xb8>
10055d0e:	a805      	add	r0, sp, #20
10055d10:	7800      	ldrb	r0, [r0, #0]
10055d12:	2800      	cmp	r0, #0
10055d14:	d034      	beq.n	10055d80 <GAP_PrivateAddrTimercb+0xb8>
10055d16:	9c03      	ldr	r4, [sp, #12]
10055d18:	4620      	mov	r0, r4
10055d1a:	305d      	adds	r0, #93	@ 0x5d
10055d1c:	7bc0      	ldrb	r0, [r0, #15]
10055d1e:	2800      	cmp	r0, #0
10055d20:	d034      	beq.n	10055d8c <GAP_PrivateAddrTimercb+0xc4>
10055d22:	3428      	adds	r4, #40	@ 0x28
10055d24:	9d02      	ldr	r5, [sp, #8]
10055d26:	2d00      	cmp	r5, #0
10055d28:	d003      	beq.n	10055d32 <GAP_PrivateAddrTimercb+0x6a>
10055d2a:	7821      	ldrb	r1, [r4, #0]
10055d2c:	2000      	movs	r0, #0
10055d2e:	f7ff ff70 	bl	10055c12 <GAP_enable_disable_scan_ucfg_weak>
10055d32:	a806      	add	r0, sp, #24
10055d34:	7800      	ldrb	r0, [r0, #0]
10055d36:	2801      	cmp	r0, #1
10055d38:	d102      	bne.n	10055d40 <GAP_PrivateAddrTimercb+0x78>
10055d3a:	2000      	movs	r0, #0
10055d3c:	f000 fcf6 	bl	1005672c <GAP_suspend_resume_active_advertising_sets_ucfg_weak>
10055d40:	f000 fafc 	bl	1005633c <GAP_generate_new_rpa>
10055d44:	2800      	cmp	r0, #0
10055d46:	d104      	bne.n	10055d52 <GAP_PrivateAddrTimercb+0x8a>
10055d48:	2000      	movs	r0, #0
10055d4a:	2101      	movs	r1, #1
10055d4c:	f000 face 	bl	100562ec <GAP_start_privacy_timer>
10055d50:	9001      	str	r0, [sp, #4]
10055d52:	2d00      	cmp	r5, #0
10055d54:	d00a      	beq.n	10055d6c <GAP_PrivateAddrTimercb+0xa4>
10055d56:	7821      	ldrb	r1, [r4, #0]
10055d58:	2001      	movs	r0, #1
10055d5a:	f7ff ff5a 	bl	10055c12 <GAP_enable_disable_scan_ucfg_weak>
10055d5e:	2800      	cmp	r0, #0
10055d60:	d004      	beq.n	10055d6c <GAP_PrivateAddrTimercb+0xa4>
10055d62:	9801      	ldr	r0, [sp, #4]
10055d64:	2800      	cmp	r0, #0
10055d66:	d001      	beq.n	10055d6c <GAP_PrivateAddrTimercb+0xa4>
10055d68:	f000 fa2c 	bl	100561c4 <GAP_stop_privacy_timer>
10055d6c:	a806      	add	r0, sp, #24
10055d6e:	7800      	ldrb	r0, [r0, #0]
10055d70:	2801      	cmp	r0, #1
10055d72:	d109      	bne.n	10055d88 <GAP_PrivateAddrTimercb+0xc0>
10055d74:	2006      	movs	r0, #6
10055d76:	f00c fd03 	bl	10062780 <tsk_notify_idx>
10055d7a:	f7fb fe84 	bl	10051a86 <BLE_STACK_ProcessRequest>
10055d7e:	e003      	b.n	10055d88 <GAP_PrivateAddrTimercb+0xc0>
10055d80:	2001      	movs	r0, #1
10055d82:	4601      	mov	r1, r0
10055d84:	f000 fab2 	bl	100562ec <GAP_start_privacy_timer>
10055d88:	b007      	add	sp, #28
10055d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10055d8c:	2000      	movs	r0, #0
10055d8e:	2101      	movs	r1, #1
10055d90:	e7f8      	b.n	10055d84 <GAP_PrivateAddrTimercb+0xbc>
10055d92:	46c0      	nop			@ (mov r8, r8)

10055d94 <__arm_cp.2_0>:
10055d94:	20002424 	.word	0x20002424

10055d98 <GAP_init_context>:
10055d98:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10055d9a:	461f      	mov	r7, r3
10055d9c:	9201      	str	r2, [sp, #4]
10055d9e:	9102      	str	r1, [sp, #8]
10055da0:	4605      	mov	r5, r0
10055da2:	2401      	movs	r4, #1
10055da4:	2178      	movs	r1, #120	@ 0x78
10055da6:	4620      	mov	r0, r4
10055da8:	f00a ff14 	bl	10060bd4 <csmem_mem_0_assign>
10055dac:	21e1      	movs	r1, #225	@ 0xe1
10055dae:	0089      	lsls	r1, r1, #2
10055db0:	225a      	movs	r2, #90	@ 0x5a
10055db2:	5281      	strh	r1, [r0, r2]
10055db4:	4e24      	ldr	r6, [pc, #144]	@ (10055e48 <__arm_cp.3_0>)
10055db6:	6030      	str	r0, [r6, #0]
10055db8:	2d01      	cmp	r5, #1
10055dba:	d117      	bne.n	10055dec <GAP_init_context+0x54>
10055dbc:	2001      	movs	r0, #1
10055dbe:	2106      	movs	r1, #6
10055dc0:	f00a ff08 	bl	10060bd4 <csmem_mem_0_assign>
10055dc4:	4601      	mov	r1, r0
10055dc6:	6830      	ldr	r0, [r6, #0]
10055dc8:	6381      	str	r1, [r0, #56]	@ 0x38
10055dca:	2f01      	cmp	r7, #1
10055dcc:	d10e      	bne.n	10055dec <GAP_init_context+0x54>
10055dce:	2501      	movs	r5, #1
10055dd0:	270e      	movs	r7, #14
10055dd2:	4628      	mov	r0, r5
10055dd4:	4639      	mov	r1, r7
10055dd6:	f00a fefd 	bl	10060bd4 <csmem_mem_0_assign>
10055dda:	6831      	ldr	r1, [r6, #0]
10055ddc:	64c8      	str	r0, [r1, #76]	@ 0x4c
10055dde:	4628      	mov	r0, r5
10055de0:	4639      	mov	r1, r7
10055de2:	f00a fef7 	bl	10060bd4 <csmem_mem_0_assign>
10055de6:	4601      	mov	r1, r0
10055de8:	6830      	ldr	r0, [r6, #0]
10055dea:	6501      	str	r1, [r0, #80]	@ 0x50
10055dec:	9902      	ldr	r1, [sp, #8]
10055dee:	2901      	cmp	r1, #1
10055df0:	d10b      	bne.n	10055e0a <GAP_init_context+0x72>
10055df2:	9801      	ldr	r0, [sp, #4]
10055df4:	2801      	cmp	r0, #1
10055df6:	d105      	bne.n	10055e04 <GAP_init_context+0x6c>
10055df8:	201c      	movs	r0, #28
10055dfa:	2101      	movs	r1, #1
10055dfc:	f00a feea 	bl	10060bd4 <csmem_mem_0_assign>
10055e00:	6831      	ldr	r1, [r6, #0]
10055e02:	62c8      	str	r0, [r1, #44]	@ 0x2c
10055e04:	4811      	ldr	r0, [pc, #68]	@ (10055e4c <__arm_cp.3_1>)
10055e06:	7e84      	ldrb	r4, [r0, #26]
10055e08:	e001      	b.n	10055e0e <GAP_init_context+0x76>
10055e0a:	2100      	movs	r1, #0
10055e0c:	62c1      	str	r1, [r0, #44]	@ 0x2c
10055e0e:	2114      	movs	r1, #20
10055e10:	4620      	mov	r0, r4
10055e12:	f00a fedf 	bl	10060bd4 <csmem_mem_0_assign>
10055e16:	6831      	ldr	r1, [r6, #0]
10055e18:	6548      	str	r0, [r1, #84]	@ 0x54
10055e1a:	4c0d      	ldr	r4, [pc, #52]	@ (10055e50 <__arm_cp.3_2>)
10055e1c:	2104      	movs	r1, #4
10055e1e:	2201      	movs	r2, #1
10055e20:	4620      	mov	r0, r4
10055e22:	f00a fec5 	bl	10060bb0 <csmem_mem_assign>
10055e26:	6831      	ldr	r1, [r6, #0]
10055e28:	6208      	str	r0, [r1, #32]
10055e2a:	2503      	movs	r5, #3
10055e2c:	2202      	movs	r2, #2
10055e2e:	4620      	mov	r0, r4
10055e30:	4629      	mov	r1, r5
10055e32:	f00a febd 	bl	10060bb0 <csmem_mem_assign>
10055e36:	6831      	ldr	r1, [r6, #0]
10055e38:	6248      	str	r0, [r1, #36]	@ 0x24
10055e3a:	4a06      	ldr	r2, [pc, #24]	@ (10055e54 <__arm_cp.3_3>)
10055e3c:	2307      	movs	r3, #7
10055e3e:	4608      	mov	r0, r1
10055e40:	4629      	mov	r1, r5
10055e42:	f00c fcfb 	bl	1006283c <CST_init>
10055e46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10055e48 <__arm_cp.3_0>:
10055e48:	20002424 	.word	0x20002424

10055e4c <__arm_cp.3_1>:
10055e4c:	20002484 	.word	0x20002484

10055e50 <__arm_cp.3_2>:
10055e50:	20002480 	.word	0x20002480

10055e54 <__arm_cp.3_3>:
10055e54:	10055c91 	.word	0x10055c91

10055e58 <GAP_get_default_le_event_mask>:
10055e58:	b5b0      	push	{r4, r5, r7, lr}
10055e5a:	4604      	mov	r4, r0
10055e5c:	2100      	movs	r1, #0
10055e5e:	2508      	movs	r5, #8
10055e60:	462a      	mov	r2, r5
10055e62:	f7fc fc07 	bl	10052674 <BLEPLAT_MemSet>
10055e66:	7820      	ldrb	r0, [r4, #0]
10055e68:	21df      	movs	r1, #223	@ 0xdf
10055e6a:	4301      	orrs	r1, r0
10055e6c:	7021      	strb	r1, [r4, #0]
10055e6e:	7860      	ldrb	r0, [r4, #1]
10055e70:	2109      	movs	r1, #9
10055e72:	4301      	orrs	r1, r0
10055e74:	7061      	strb	r1, [r4, #1]
10055e76:	78a1      	ldrb	r1, [r4, #2]
10055e78:	4329      	orrs	r1, r5
10055e7a:	70a1      	strb	r1, [r4, #2]
10055e7c:	4911      	ldr	r1, [pc, #68]	@ (10055ec4 <__arm_cp.4_0>)
10055e7e:	6809      	ldr	r1, [r1, #0]
10055e80:	225c      	movs	r2, #92	@ 0x5c
10055e82:	5c89      	ldrb	r1, [r1, r2]
10055e84:	0689      	lsls	r1, r1, #26
10055e86:	d502      	bpl.n	10055e8e <GAP_get_default_le_event_mask+0x36>
10055e88:	210f      	movs	r1, #15
10055e8a:	4308      	orrs	r0, r1
10055e8c:	7060      	strb	r0, [r4, #1]
10055e8e:	f009 ff09 	bl	1005fca4 <ext_adv_scan_enabled_ucfg_weak>
10055e92:	2801      	cmp	r0, #1
10055e94:	d107      	bne.n	10055ea6 <GAP_get_default_le_event_mask+0x4e>
10055e96:	7860      	ldrb	r0, [r4, #1]
10055e98:	2112      	movs	r1, #18
10055e9a:	4301      	orrs	r1, r0
10055e9c:	7061      	strb	r1, [r4, #1]
10055e9e:	78a0      	ldrb	r0, [r4, #2]
10055ea0:	2107      	movs	r1, #7
10055ea2:	4301      	orrs	r1, r0
10055ea4:	70a1      	strb	r1, [r4, #2]
10055ea6:	f005 fdbf 	bl	1005ba28 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10055eaa:	b2c0      	uxtb	r0, r0
10055eac:	2801      	cmp	r0, #1
10055eae:	d107      	bne.n	10055ec0 <GAP_get_default_le_event_mask+0x68>
10055eb0:	7860      	ldrb	r0, [r4, #1]
10055eb2:	21e0      	movs	r1, #224	@ 0xe0
10055eb4:	4301      	orrs	r1, r0
10055eb6:	7061      	strb	r1, [r4, #1]
10055eb8:	78a0      	ldrb	r0, [r4, #2]
10055eba:	2180      	movs	r1, #128	@ 0x80
10055ebc:	4301      	orrs	r1, r0
10055ebe:	70a1      	strb	r1, [r4, #2]
10055ec0:	bdb0      	pop	{r4, r5, r7, pc}
10055ec2:	46c0      	nop			@ (mov r8, r8)

10055ec4 <__arm_cp.4_0>:
10055ec4:	20002424 	.word	0x20002424

10055ec8 <gap_extended_adv_scan_supported>:
10055ec8:	b580      	push	{r7, lr}
10055eca:	f009 feeb 	bl	1005fca4 <ext_adv_scan_enabled_ucfg_weak>
10055ece:	bd80      	pop	{r7, pc}

10055ed0 <GAP_Init>:
10055ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
10055ed2:	b085      	sub	sp, #20
10055ed4:	4605      	mov	r5, r0
10055ed6:	a804      	add	r0, sp, #16
10055ed8:	2700      	movs	r7, #0
10055eda:	7007      	strb	r7, [r0, #0]
10055edc:	2412      	movs	r4, #18
10055ede:	2901      	cmp	r1, #1
10055ee0:	d901      	bls.n	10055ee6 <GAP_Init+0x16>
10055ee2:	4620      	mov	r0, r4
10055ee4:	e048      	b.n	10055f78 <GAP_Init+0xa8>
10055ee6:	460e      	mov	r6, r1
10055ee8:	4824      	ldr	r0, [pc, #144]	@ (10055f7c <__arm_cp.7_0>)
10055eea:	6800      	ldr	r0, [r0, #0]
10055eec:	9000      	str	r0, [sp, #0]
10055eee:	f00c ff85 	bl	10062dfc <IDD_Initialize_Device_IDs>
10055ef2:	2800      	cmp	r0, #0
10055ef4:	d140      	bne.n	10055f78 <GAP_Init+0xa8>
10055ef6:	9900      	ldr	r1, [sp, #0]
10055ef8:	315c      	adds	r1, #92	@ 0x5c
10055efa:	7808      	ldrb	r0, [r1, #0]
10055efc:	07c0      	lsls	r0, r0, #31
10055efe:	d111      	bne.n	10055f24 <GAP_Init+0x54>
10055f00:	78c8      	ldrb	r0, [r1, #3]
10055f02:	4330      	orrs	r0, r6
10055f04:	460e      	mov	r6, r1
10055f06:	70c8      	strb	r0, [r1, #3]
10055f08:	a803      	add	r0, sp, #12
10055f0a:	2107      	movs	r1, #7
10055f0c:	7001      	strb	r1, [r0, #0]
10055f0e:	2d00      	cmp	r5, #0
10055f10:	d012      	beq.n	10055f38 <GAP_Init+0x68>
10055f12:	2d02      	cmp	r5, #2
10055f14:	d008      	beq.n	10055f28 <GAP_Init+0x58>
10055f16:	2d01      	cmp	r5, #1
10055f18:	4620      	mov	r0, r4
10055f1a:	d12d      	bne.n	10055f78 <GAP_Init+0xa8>
10055f1c:	a804      	add	r0, sp, #16
10055f1e:	2110      	movs	r1, #16
10055f20:	7001      	strb	r1, [r0, #0]
10055f22:	e009      	b.n	10055f38 <GAP_Init+0x68>
10055f24:	200c      	movs	r0, #12
10055f26:	e027      	b.n	10055f78 <GAP_Init+0xa8>
10055f28:	a804      	add	r0, sp, #16
10055f2a:	2120      	movs	r1, #32
10055f2c:	7001      	strb	r1, [r0, #0]
10055f2e:	a903      	add	r1, sp, #12
10055f30:	f000 f9a2 	bl	10056278 <GAP_enable_controller_privacy_ucfg_weak>
10055f34:	2800      	cmp	r0, #0
10055f36:	d11f      	bne.n	10055f78 <GAP_Init+0xa8>
10055f38:	f000 f9d6 	bl	100562e8 <GAP_init_advertising_sets_ucfg_weak>
10055f3c:	2800      	cmp	r0, #0
10055f3e:	d11b      	bne.n	10055f78 <GAP_Init+0xa8>
10055f40:	9800      	ldr	r0, [sp, #0]
10055f42:	3060      	adds	r0, #96	@ 0x60
10055f44:	f000 f9cc 	bl	100562e0 <GAP_set_controller_random_address_ucfg_weak>
10055f48:	2800      	cmp	r0, #0
10055f4a:	d115      	bne.n	10055f78 <GAP_Init+0xa8>
10055f4c:	9804      	ldr	r0, [sp, #16]
10055f4e:	2101      	movs	r1, #1
10055f50:	7431      	strb	r1, [r6, #16]
10055f52:	4308      	orrs	r0, r1
10055f54:	7030      	strb	r0, [r6, #0]
10055f56:	f000 f815 	bl	10055f84 <GAP_reset_privacy_timer>
10055f5a:	ac01      	add	r4, sp, #4
10055f5c:	4620      	mov	r0, r4
10055f5e:	f7ff ff7b 	bl	10055e58 <GAP_get_default_le_event_mask>
10055f62:	4620      	mov	r0, r4
10055f64:	f003 fa24 	bl	100593b0 <hci_le_set_event_mask>
10055f68:	43f8      	mvns	r0, r7
10055f6a:	9001      	str	r0, [sp, #4]
10055f6c:	4804      	ldr	r0, [pc, #16]	@ (10055f80 <__arm_cp.7_1>)
10055f6e:	9002      	str	r0, [sp, #8]
10055f70:	4620      	mov	r0, r4
10055f72:	f003 fa0d 	bl	10059390 <hci_set_event_mask>
10055f76:	4638      	mov	r0, r7
10055f78:	b005      	add	sp, #20
10055f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10055f7c <__arm_cp.7_0>:
10055f7c:	20002424 	.word	0x20002424

10055f80 <__arm_cp.7_1>:
10055f80:	20009fff 	.word	0x20009fff

10055f84 <GAP_reset_privacy_timer>:
10055f84:	4806      	ldr	r0, [pc, #24]	@ (10055fa0 <__arm_cp.8_0>)
10055f86:	6800      	ldr	r0, [r0, #0]
10055f88:	215c      	movs	r1, #92	@ 0x5c
10055f8a:	5c41      	ldrb	r1, [r0, r1]
10055f8c:	0689      	lsls	r1, r1, #26
10055f8e:	0f89      	lsrs	r1, r1, #30
10055f90:	d004      	beq.n	10055f9c <GAP_reset_privacy_timer+0x18>
10055f92:	305c      	adds	r0, #92	@ 0x5c
10055f94:	78c1      	ldrb	r1, [r0, #3]
10055f96:	2202      	movs	r2, #2
10055f98:	430a      	orrs	r2, r1
10055f9a:	70c2      	strb	r2, [r0, #3]
10055f9c:	4770      	bx	lr
10055f9e:	46c0      	nop			@ (mov r8, r8)

10055fa0 <__arm_cp.8_0>:
10055fa0:	20002424 	.word	0x20002424

10055fa4 <GAP_internal_evt_handler>:
10055fa4:	b5b0      	push	{r4, r5, r7, lr}
10055fa6:	285c      	cmp	r0, #92	@ 0x5c
10055fa8:	d106      	bne.n	10055fb8 <GAP_internal_evt_handler+0x14>
10055faa:	480c      	ldr	r0, [pc, #48]	@ (10055fdc <__arm_cp.12_0>)
10055fac:	6804      	ldr	r4, [r0, #0]
10055fae:	345d      	adds	r4, #93	@ 0x5d
10055fb0:	2500      	movs	r5, #0
10055fb2:	5760      	ldrsb	r0, [r4, r5]
10055fb4:	2800      	cmp	r0, #0
10055fb6:	d400      	bmi.n	10055fba <GAP_internal_evt_handler+0x16>
10055fb8:	bdb0      	pop	{r4, r5, r7, pc}
10055fba:	7860      	ldrb	r0, [r4, #1]
10055fbc:	2802      	cmp	r0, #2
10055fbe:	d1fb      	bne.n	10055fb8 <GAP_internal_evt_handler+0x14>
10055fc0:	7055      	strb	r5, [r2, #1]
10055fc2:	2080      	movs	r0, #128	@ 0x80
10055fc4:	7010      	strb	r0, [r2, #0]
10055fc6:	b2c8      	uxtb	r0, r1
10055fc8:	4611      	mov	r1, r2
10055fca:	f000 f809 	bl	10055fe0 <aci_gap_proc_complete_event_wrapper>
10055fce:	7065      	strb	r5, [r4, #1]
10055fd0:	7820      	ldrb	r0, [r4, #0]
10055fd2:	217f      	movs	r1, #127	@ 0x7f
10055fd4:	4001      	ands	r1, r0
10055fd6:	7021      	strb	r1, [r4, #0]
10055fd8:	bdb0      	pop	{r4, r5, r7, pc}
10055fda:	46c0      	nop			@ (mov r8, r8)

10055fdc <__arm_cp.12_0>:
10055fdc:	20002424 	.word	0x20002424

10055fe0 <aci_gap_proc_complete_event_wrapper>:
10055fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055fe2:	2900      	cmp	r1, #0
10055fe4:	d016      	beq.n	10056014 <aci_gap_proc_complete_event_wrapper+0x34>
10055fe6:	460e      	mov	r6, r1
10055fe8:	4605      	mov	r5, r0
10055fea:	7809      	ldrb	r1, [r1, #0]
10055fec:	2400      	movs	r4, #0
10055fee:	07c8      	lsls	r0, r1, #31
10055ff0:	4620      	mov	r0, r4
10055ff2:	d11f      	bne.n	10056034 <aci_gap_proc_complete_event_wrapper+0x54>
10055ff4:	0788      	lsls	r0, r1, #30
10055ff6:	d40f      	bmi.n	10056018 <aci_gap_proc_complete_event_wrapper+0x38>
10055ff8:	0748      	lsls	r0, r1, #29
10055ffa:	d40f      	bmi.n	1005601c <aci_gap_proc_complete_event_wrapper+0x3c>
10055ffc:	0708      	lsls	r0, r1, #28
10055ffe:	d40f      	bmi.n	10056020 <aci_gap_proc_complete_event_wrapper+0x40>
10056000:	06c8      	lsls	r0, r1, #27
10056002:	d40f      	bmi.n	10056024 <aci_gap_proc_complete_event_wrapper+0x44>
10056004:	0688      	lsls	r0, r1, #26
10056006:	d40f      	bmi.n	10056028 <aci_gap_proc_complete_event_wrapper+0x48>
10056008:	0648      	lsls	r0, r1, #25
1005600a:	d40f      	bmi.n	1005602c <aci_gap_proc_complete_event_wrapper+0x4c>
1005600c:	0608      	lsls	r0, r1, #24
1005600e:	d50f      	bpl.n	10056030 <aci_gap_proc_complete_event_wrapper+0x50>
10056010:	2007      	movs	r0, #7
10056012:	e00f      	b.n	10056034 <aci_gap_proc_complete_event_wrapper+0x54>
10056014:	2412      	movs	r4, #18
10056016:	e03c      	b.n	10056092 <aci_gap_proc_complete_event_wrapper+0xb2>
10056018:	2001      	movs	r0, #1
1005601a:	e00b      	b.n	10056034 <aci_gap_proc_complete_event_wrapper+0x54>
1005601c:	2002      	movs	r0, #2
1005601e:	e009      	b.n	10056034 <aci_gap_proc_complete_event_wrapper+0x54>
10056020:	2003      	movs	r0, #3
10056022:	e007      	b.n	10056034 <aci_gap_proc_complete_event_wrapper+0x54>
10056024:	2004      	movs	r0, #4
10056026:	e005      	b.n	10056034 <aci_gap_proc_complete_event_wrapper+0x54>
10056028:	2005      	movs	r0, #5
1005602a:	e003      	b.n	10056034 <aci_gap_proc_complete_event_wrapper+0x54>
1005602c:	2006      	movs	r0, #6
1005602e:	e001      	b.n	10056034 <aci_gap_proc_complete_event_wrapper+0x54>
10056030:	2000      	movs	r0, #0
10056032:	43c0      	mvns	r0, r0
10056034:	7030      	strb	r0, [r6, #0]
10056036:	4818      	ldr	r0, [pc, #96]	@ (10056098 <__arm_cp.13_0>)
10056038:	6800      	ldr	r0, [r0, #0]
1005603a:	214e      	movs	r1, #78	@ 0x4e
1005603c:	5640      	ldrsb	r0, [r0, r1]
1005603e:	2800      	cmp	r0, #0
10056040:	d527      	bpl.n	10056092 <aci_gap_proc_complete_event_wrapper+0xb2>
10056042:	4816      	ldr	r0, [pc, #88]	@ (1005609c <__arm_cp.13_1>)
10056044:	1828      	adds	r0, r5, r0
10056046:	2103      	movs	r1, #3
10056048:	4301      	orrs	r1, r0
1005604a:	310d      	adds	r1, #13
1005604c:	0888      	lsrs	r0, r1, #2
1005604e:	b283      	uxth	r3, r0
10056050:	4813      	ldr	r0, [pc, #76]	@ (100560a0 <__arm_cp.13_2>)
10056052:	6800      	ldr	r0, [r0, #0]
10056054:	6980      	ldr	r0, [r0, #24]
10056056:	2102      	movs	r1, #2
10056058:	2247      	movs	r2, #71	@ 0x47
1005605a:	f7ff f847 	bl	100550ec <aci_event_fifo_push_header>
1005605e:	2800      	cmp	r0, #0
10056060:	d016      	beq.n	10056090 <aci_gap_proc_complete_event_wrapper+0xb0>
10056062:	4607      	mov	r7, r0
10056064:	1d00      	adds	r0, r0, #4
10056066:	4629      	mov	r1, r5
10056068:	4632      	mov	r2, r6
1005606a:	f7ff fb7a 	bl	10055762 <aci_gap_proc_complete_event_copy>
1005606e:	2004      	movs	r0, #4
10056070:	7278      	strb	r0, [r7, #9]
10056072:	2007      	movs	r0, #7
10056074:	7238      	strb	r0, [r7, #8]
10056076:	1ce8      	adds	r0, r5, #3
10056078:	0a01      	lsrs	r1, r0, #8
1005607a:	71f9      	strb	r1, [r7, #7]
1005607c:	71b8      	strb	r0, [r7, #6]
1005607e:	20ff      	movs	r0, #255	@ 0xff
10056080:	7178      	strb	r0, [r7, #5]
10056082:	2082      	movs	r0, #130	@ 0x82
10056084:	7138      	strb	r0, [r7, #4]
10056086:	2002      	movs	r0, #2
10056088:	4639      	mov	r1, r7
1005608a:	f7ff f8cc 	bl	10055226 <aci_event_fifo_push>
1005608e:	e000      	b.n	10056092 <aci_gap_proc_complete_event_wrapper+0xb2>
10056090:	2407      	movs	r4, #7
10056092:	4620      	mov	r0, r4
10056094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10056096:	46c0      	nop			@ (mov r8, r8)

10056098 <__arm_cp.13_0>:
10056098:	20002470 	.word	0x20002470

1005609c <__arm_cp.13_1>:
1005609c:	0003fffd 	.word	0x0003fffd

100560a0 <__arm_cp.13_2>:
100560a0:	20002420 	.word	0x20002420

100560a4 <GAP_LimDiscTimeoutcb>:
100560a4:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100560a6:	4811      	ldr	r0, [pc, #68]	@ (100560ec <__arm_cp.15_0>)
100560a8:	6800      	ldr	r0, [r0, #0]
100560aa:	6d44      	ldr	r4, [r0, #84]	@ 0x54
100560ac:	f009 fdfa 	bl	1005fca4 <ext_adv_scan_enabled_ucfg_weak>
100560b0:	2800      	cmp	r0, #0
100560b2:	d002      	beq.n	100560ba <GAP_LimDiscTimeoutcb+0x16>
100560b4:	480e      	ldr	r0, [pc, #56]	@ (100560f0 <__arm_cp.15_1>)
100560b6:	7e80      	ldrb	r0, [r0, #26]
100560b8:	e000      	b.n	100560bc <GAP_LimDiscTimeoutcb+0x18>
100560ba:	2001      	movs	r0, #1
100560bc:	b2c5      	uxtb	r5, r0
100560be:	3411      	adds	r4, #17
100560c0:	2d00      	cmp	r5, #0
100560c2:	d011      	beq.n	100560e8 <GAP_LimDiscTimeoutcb+0x44>
100560c4:	7820      	ldrb	r0, [r4, #0]
100560c6:	2800      	cmp	r0, #0
100560c8:	d00b      	beq.n	100560e2 <GAP_LimDiscTimeoutcb+0x3e>
100560ca:	4620      	mov	r0, r4
100560cc:	380f      	subs	r0, #15
100560ce:	7800      	ldrb	r0, [r0, #0]
100560d0:	0780      	lsls	r0, r0, #30
100560d2:	d506      	bpl.n	100560e2 <GAP_LimDiscTimeoutcb+0x3e>
100560d4:	7860      	ldrb	r0, [r4, #1]
100560d6:	466a      	mov	r2, sp
100560d8:	7010      	strb	r0, [r2, #0]
100560da:	2000      	movs	r0, #0
100560dc:	2101      	movs	r1, #1
100560de:	f7fe fb2b 	bl	10054738 <GAP_set_advertising_enable_ucfg_weak>
100560e2:	3414      	adds	r4, #20
100560e4:	1e6d      	subs	r5, r5, #1
100560e6:	e7eb      	b.n	100560c0 <GAP_LimDiscTimeoutcb+0x1c>
100560e8:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
100560ea:	46c0      	nop			@ (mov r8, r8)

100560ec <__arm_cp.15_0>:
100560ec:	20002424 	.word	0x20002424

100560f0 <__arm_cp.15_1>:
100560f0:	20002484 	.word	0x20002484

100560f4 <GAP_stop_discoverability>:
100560f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100560f6:	4604      	mov	r4, r0
100560f8:	4668      	mov	r0, sp
100560fa:	2500      	movs	r5, #0
100560fc:	7005      	strb	r5, [r0, #0]
100560fe:	f009 fdd1 	bl	1005fca4 <ext_adv_scan_enabled_ucfg_weak>
10056102:	2800      	cmp	r0, #0
10056104:	d005      	beq.n	10056112 <GAP_stop_discoverability+0x1e>
10056106:	466d      	mov	r5, sp
10056108:	4620      	mov	r0, r4
1005610a:	4629      	mov	r1, r5
1005610c:	f000 f9fe 	bl	1005650c <GAP_get_advertising_set_index>
10056110:	782d      	ldrb	r5, [r5, #0]
10056112:	f009 fdc7 	bl	1005fca4 <ext_adv_scan_enabled_ucfg_weak>
10056116:	2800      	cmp	r0, #0
10056118:	d002      	beq.n	10056120 <GAP_stop_discoverability+0x2c>
1005611a:	4826      	ldr	r0, [pc, #152]	@ (100561b4 <__arm_cp.18_0>)
1005611c:	7e83      	ldrb	r3, [r0, #26]
1005611e:	e000      	b.n	10056122 <GAP_stop_discoverability+0x2e>
10056120:	2301      	movs	r3, #1
10056122:	2614      	movs	r6, #20
10056124:	4375      	muls	r5, r6
10056126:	4f24      	ldr	r7, [pc, #144]	@ (100561b8 <__arm_cp.18_1>)
10056128:	6838      	ldr	r0, [r7, #0]
1005612a:	6d41      	ldr	r1, [r0, #84]	@ 0x54
1005612c:	194c      	adds	r4, r1, r5
1005612e:	78a5      	ldrb	r5, [r4, #2]
10056130:	2202      	movs	r2, #2
10056132:	402a      	ands	r2, r5
10056134:	d002      	beq.n	1005613c <GAP_stop_discoverability+0x48>
10056136:	1ca4      	adds	r4, r4, #2
10056138:	2500      	movs	r5, #0
1005613a:	7025      	strb	r5, [r4, #0]
1005613c:	3111      	adds	r1, #17
1005613e:	b2db      	uxtb	r3, r3
10056140:	2b00      	cmp	r3, #0
10056142:	d00a      	beq.n	1005615a <GAP_stop_discoverability+0x66>
10056144:	780c      	ldrb	r4, [r1, #0]
10056146:	2c00      	cmp	r4, #0
10056148:	d004      	beq.n	10056154 <GAP_stop_discoverability+0x60>
1005614a:	460c      	mov	r4, r1
1005614c:	3c0f      	subs	r4, #15
1005614e:	7824      	ldrb	r4, [r4, #0]
10056150:	07a4      	lsls	r4, r4, #30
10056152:	d426      	bmi.n	100561a2 <GAP_stop_discoverability+0xae>
10056154:	1e5b      	subs	r3, r3, #1
10056156:	3114      	adds	r1, #20
10056158:	e7f2      	b.n	10056140 <GAP_stop_discoverability+0x4c>
1005615a:	2a00      	cmp	r2, #0
1005615c:	d021      	beq.n	100561a2 <GAP_stop_discoverability+0xae>
1005615e:	2400      	movs	r4, #0
10056160:	4621      	mov	r1, r4
10056162:	f00c fb80 	bl	10062866 <CST_stop>
10056166:	4815      	ldr	r0, [pc, #84]	@ (100561bc <__arm_cp.18_2>)
10056168:	6800      	ldr	r0, [r0, #0]
1005616a:	214e      	movs	r1, #78	@ 0x4e
1005616c:	5c40      	ldrb	r0, [r0, r1]
1005616e:	07c0      	lsls	r0, r0, #31
10056170:	d017      	beq.n	100561a2 <GAP_stop_discoverability+0xae>
10056172:	4813      	ldr	r0, [pc, #76]	@ (100561c0 <__arm_cp.18_3>)
10056174:	6800      	ldr	r0, [r0, #0]
10056176:	6980      	ldr	r0, [r0, #24]
10056178:	2244      	movs	r2, #68	@ 0x44
1005617a:	2502      	movs	r5, #2
1005617c:	4629      	mov	r1, r5
1005617e:	462b      	mov	r3, r5
10056180:	f7fe ffb4 	bl	100550ec <aci_event_fifo_push_header>
10056184:	2800      	cmp	r0, #0
10056186:	d00c      	beq.n	100561a2 <GAP_stop_discoverability+0xae>
10056188:	4601      	mov	r1, r0
1005618a:	7185      	strb	r5, [r0, #6]
1005618c:	71c4      	strb	r4, [r0, #7]
1005618e:	7204      	strb	r4, [r0, #8]
10056190:	20ff      	movs	r0, #255	@ 0xff
10056192:	7148      	strb	r0, [r1, #5]
10056194:	2082      	movs	r0, #130	@ 0x82
10056196:	7108      	strb	r0, [r1, #4]
10056198:	2004      	movs	r0, #4
1005619a:	7248      	strb	r0, [r1, #9]
1005619c:	4628      	mov	r0, r5
1005619e:	f7ff f842 	bl	10055226 <aci_event_fifo_push>
100561a2:	4668      	mov	r0, sp
100561a4:	7800      	ldrb	r0, [r0, #0]
100561a6:	4346      	muls	r6, r0
100561a8:	6838      	ldr	r0, [r7, #0]
100561aa:	6d40      	ldr	r0, [r0, #84]	@ 0x54
100561ac:	1980      	adds	r0, r0, r6
100561ae:	2100      	movs	r1, #0
100561b0:	7441      	strb	r1, [r0, #17]
100561b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100561b4 <__arm_cp.18_0>:
100561b4:	20002484 	.word	0x20002484

100561b8 <__arm_cp.18_1>:
100561b8:	20002424 	.word	0x20002424

100561bc <__arm_cp.18_2>:
100561bc:	20002470 	.word	0x20002470

100561c0 <__arm_cp.18_3>:
100561c0:	20002420 	.word	0x20002420

100561c4 <GAP_stop_privacy_timer>:
100561c4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
100561c6:	4c0d      	ldr	r4, [pc, #52]	@ (100561fc <__arm_cp.19_0>)
100561c8:	6825      	ldr	r5, [r4, #0]
100561ca:	205c      	movs	r0, #92	@ 0x5c
100561cc:	5c28      	ldrb	r0, [r5, r0]
100561ce:	0680      	lsls	r0, r0, #26
100561d0:	0f80      	lsrs	r0, r0, #30
100561d2:	d012      	beq.n	100561fa <GAP_stop_privacy_timer+0x36>
100561d4:	355c      	adds	r5, #92	@ 0x5c
100561d6:	78e8      	ldrb	r0, [r5, #3]
100561d8:	2602      	movs	r6, #2
100561da:	4030      	ands	r0, r6
100561dc:	d10d      	bne.n	100561fa <GAP_stop_privacy_timer+0x36>
100561de:	a801      	add	r0, sp, #4
100561e0:	4669      	mov	r1, sp
100561e2:	f000 fadf 	bl	100567a4 <GAP_check_adv_status>
100561e6:	7869      	ldrb	r1, [r5, #1]
100561e8:	4301      	orrs	r1, r0
100561ea:	d106      	bne.n	100561fa <GAP_stop_privacy_timer+0x36>
100561ec:	78e8      	ldrb	r0, [r5, #3]
100561ee:	4330      	orrs	r0, r6
100561f0:	70e8      	strb	r0, [r5, #3]
100561f2:	6820      	ldr	r0, [r4, #0]
100561f4:	2101      	movs	r1, #1
100561f6:	f00c fb36 	bl	10062866 <CST_stop>
100561fa:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

100561fc <__arm_cp.19_0>:
100561fc:	20002424 	.word	0x20002424

10056200 <GAP_peripheral_connection_complete_handler_ucfg_weak>:
10056200:	b580      	push	{r7, lr}
10056202:	2000      	movs	r0, #0
10056204:	f7ff ff76 	bl	100560f4 <GAP_stop_discoverability>
10056208:	f7ff ffdc 	bl	100561c4 <GAP_stop_privacy_timer>
1005620c:	bd80      	pop	{r7, pc}

1005620e <GAP_hci_disconnection_complete_evt_hndl>:
1005620e:	4770      	bx	lr

10056210 <GAP_hci_le_connection_complete_evt_hndl>:
10056210:	b580      	push	{r7, lr}
10056212:	2a00      	cmp	r2, #0
10056214:	d003      	beq.n	1005621e <GAP_hci_le_connection_complete_evt_hndl+0xe>
10056216:	4608      	mov	r0, r1
10056218:	f7ff fff2 	bl	10056200 <GAP_peripheral_connection_complete_handler_ucfg_weak>
1005621c:	bd80      	pop	{r7, pc}
1005621e:	f7ff fd23 	bl	10055c68 <GAP_central_connection_complete_handler_ucfg_weak>
10056222:	bd80      	pop	{r7, pc}

10056224 <GapIsPrivacySupported>:
10056224:	4804      	ldr	r0, [pc, #16]	@ (10056238 <__arm_cp.26_0>)
10056226:	6800      	ldr	r0, [r0, #0]
10056228:	215c      	movs	r1, #92	@ 0x5c
1005622a:	5c41      	ldrb	r1, [r0, r1]
1005622c:	2030      	movs	r0, #48	@ 0x30
1005622e:	4008      	ands	r0, r1
10056230:	1e41      	subs	r1, r0, #1
10056232:	4188      	sbcs	r0, r1
10056234:	4770      	bx	lr
10056236:	46c0      	nop			@ (mov r8, r8)

10056238 <__arm_cp.26_0>:
10056238:	20002424 	.word	0x20002424

1005623c <GAP_get_identity_address_type>:
1005623c:	4803      	ldr	r0, [pc, #12]	@ (1005624c <__arm_cp.28_0>)
1005623e:	6800      	ldr	r0, [r0, #0]
10056240:	215f      	movs	r1, #95	@ 0x5f
10056242:	5c41      	ldrb	r1, [r0, r1]
10056244:	2001      	movs	r0, #1
10056246:	4008      	ands	r0, r1
10056248:	4770      	bx	lr
1005624a:	46c0      	nop			@ (mov r8, r8)

1005624c <__arm_cp.28_0>:
1005624c:	20002424 	.word	0x20002424

10056250 <GAP_get_own_address_type>:
10056250:	4808      	ldr	r0, [pc, #32]	@ (10056274 <__arm_cp.29_0>)
10056252:	6800      	ldr	r0, [r0, #0]
10056254:	215c      	movs	r1, #92	@ 0x5c
10056256:	5c41      	ldrb	r1, [r0, r1]
10056258:	06ca      	lsls	r2, r1, #27
1005625a:	d406      	bmi.n	1005626a <GAP_get_own_address_type+0x1a>
1005625c:	0689      	lsls	r1, r1, #26
1005625e:	d406      	bmi.n	1005626e <GAP_get_own_address_type+0x1e>
10056260:	305c      	adds	r0, #92	@ 0x5c
10056262:	78c1      	ldrb	r1, [r0, #3]
10056264:	2001      	movs	r0, #1
10056266:	4008      	ands	r0, r1
10056268:	4770      	bx	lr
1005626a:	2001      	movs	r0, #1
1005626c:	4770      	bx	lr
1005626e:	2003      	movs	r0, #3
10056270:	4770      	bx	lr
10056272:	46c0      	nop			@ (mov r8, r8)

10056274 <__arm_cp.29_0>:
10056274:	20002424 	.word	0x20002424

10056278 <GAP_enable_controller_privacy_ucfg_weak>:
10056278:	2012      	movs	r0, #18
1005627a:	4770      	bx	lr

1005627c <GAP_Terminate_Link>:
1005627c:	b580      	push	{r7, lr}
1005627e:	f004 fd17 	bl	1005acb0 <llc_conn_disconnect_link>
10056282:	bd80      	pop	{r7, pc}

10056284 <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak>:
10056284:	b580      	push	{r7, lr}
10056286:	07c0      	lsls	r0, r0, #31
10056288:	d101      	bne.n	1005628e <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak+0xa>
1005628a:	2000      	movs	r0, #0
1005628c:	bd80      	pop	{r7, pc}
1005628e:	4608      	mov	r0, r1
10056290:	4611      	mov	r1, r2
10056292:	f003 f966 	bl	10059562 <hci_le_add_device_to_filter_accept_list>
10056296:	bd80      	pop	{r7, pc}

10056298 <GAP_clear_filter_accept_and_resolving_list_ucfg_weak>:
10056298:	b580      	push	{r7, lr}
1005629a:	07c0      	lsls	r0, r0, #31
1005629c:	d101      	bne.n	100562a2 <GAP_clear_filter_accept_and_resolving_list_ucfg_weak+0xa>
1005629e:	2000      	movs	r0, #0
100562a0:	bd80      	pop	{r7, pc}
100562a2:	f003 f95a 	bl	1005955a <hci_le_clear_filter_accept_list>
100562a6:	bd80      	pop	{r7, pc}

100562a8 <GAP_configure_filter_accept_and_resolving_list>:
100562a8:	b570      	push	{r4, r5, r6, lr}
100562aa:	b094      	sub	sp, #80	@ 0x50
100562ac:	4604      	mov	r4, r0
100562ae:	f7ff fff3 	bl	10056298 <GAP_clear_filter_accept_and_resolving_list_ucfg_weak>
100562b2:	4606      	mov	r6, r0
100562b4:	466d      	mov	r5, sp
100562b6:	353e      	adds	r5, #62	@ 0x3e
100562b8:	4668      	mov	r0, sp
100562ba:	f00b f8d3 	bl	10061464 <sdb_sap_read_security_record_sequential>
100562be:	2800      	cmp	r0, #0
100562c0:	d10b      	bne.n	100562da <GAP_configure_filter_accept_and_resolving_list+0x32>
100562c2:	2e00      	cmp	r6, #0
100562c4:	d109      	bne.n	100562da <GAP_configure_filter_accept_and_resolving_list+0x32>
100562c6:	4668      	mov	r0, sp
100562c8:	7840      	ldrb	r0, [r0, #1]
100562ca:	2101      	movs	r1, #1
100562cc:	4001      	ands	r1, r0
100562ce:	4620      	mov	r0, r4
100562d0:	462a      	mov	r2, r5
100562d2:	f7ff ffd7 	bl	10056284 <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak>
100562d6:	4606      	mov	r6, r0
100562d8:	e7ee      	b.n	100562b8 <GAP_configure_filter_accept_and_resolving_list+0x10>
100562da:	b2f0      	uxtb	r0, r6
100562dc:	b014      	add	sp, #80	@ 0x50
100562de:	bd70      	pop	{r4, r5, r6, pc}

100562e0 <GAP_set_controller_random_address_ucfg_weak>:
100562e0:	b580      	push	{r7, lr}
100562e2:	f003 f851 	bl	10059388 <hci_le_set_random_address>
100562e6:	bd80      	pop	{r7, pc}

100562e8 <GAP_init_advertising_sets_ucfg_weak>:
100562e8:	2000      	movs	r0, #0
100562ea:	4770      	bx	lr

100562ec <GAP_start_privacy_timer>:
100562ec:	b5b0      	push	{r4, r5, r7, lr}
100562ee:	4602      	mov	r2, r0
100562f0:	4810      	ldr	r0, [pc, #64]	@ (10056334 <__arm_cp.47_0>)
100562f2:	6800      	ldr	r0, [r0, #0]
100562f4:	4605      	mov	r5, r0
100562f6:	355a      	adds	r5, #90	@ 0x5a
100562f8:	2900      	cmp	r1, #0
100562fa:	d108      	bne.n	1005630e <GAP_start_privacy_timer+0x22>
100562fc:	78a9      	ldrb	r1, [r5, #2]
100562fe:	0689      	lsls	r1, r1, #26
10056300:	2400      	movs	r4, #0
10056302:	0f89      	lsrs	r1, r1, #30
10056304:	d014      	beq.n	10056330 <GAP_start_privacy_timer+0x44>
10056306:	7969      	ldrb	r1, [r5, #5]
10056308:	2302      	movs	r3, #2
1005630a:	400b      	ands	r3, r1
1005630c:	d010      	beq.n	10056330 <GAP_start_privacy_timer+0x44>
1005630e:	2a00      	cmp	r2, #0
10056310:	d001      	beq.n	10056316 <GAP_start_privacy_timer+0x2a>
10056312:	4b09      	ldr	r3, [pc, #36]	@ (10056338 <__arm_cp.47_1>)
10056314:	e003      	b.n	1005631e <GAP_start_privacy_timer+0x32>
10056316:	217d      	movs	r1, #125	@ 0x7d
10056318:	00c9      	lsls	r1, r1, #3
1005631a:	882b      	ldrh	r3, [r5, #0]
1005631c:	434b      	muls	r3, r1
1005631e:	2401      	movs	r4, #1
10056320:	4621      	mov	r1, r4
10056322:	4622      	mov	r2, r4
10056324:	f00c fad5 	bl	100628d2 <CST_start>
10056328:	7968      	ldrb	r0, [r5, #5]
1005632a:	21fd      	movs	r1, #253	@ 0xfd
1005632c:	4001      	ands	r1, r0
1005632e:	7169      	strb	r1, [r5, #5]
10056330:	4620      	mov	r0, r4
10056332:	bdb0      	pop	{r4, r5, r7, pc}

10056334 <__arm_cp.47_0>:
10056334:	20002424 	.word	0x20002424

10056338 <__arm_cp.47_1>:
10056338:	00007530 	.word	0x00007530

1005633c <GAP_generate_new_rpa>:
1005633c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005633e:	4d0d      	ldr	r5, [pc, #52]	@ (10056374 <__arm_cp.48_0>)
10056340:	6828      	ldr	r0, [r5, #0]
10056342:	215f      	movs	r1, #95	@ 0x5f
10056344:	5c40      	ldrb	r0, [r0, r1]
10056346:	0780      	lsls	r0, r0, #30
10056348:	d401      	bmi.n	1005634e <GAP_generate_new_rpa+0x12>
1005634a:	240c      	movs	r4, #12
1005634c:	e00f      	b.n	1005636e <GAP_generate_new_rpa+0x32>
1005634e:	466c      	mov	r4, sp
10056350:	4620      	mov	r0, r4
10056352:	f00b f997 	bl	10061684 <smp_sap_crt_generate_rpa>
10056356:	4620      	mov	r0, r4
10056358:	f7ff ffc2 	bl	100562e0 <GAP_set_controller_random_address_ucfg_weak>
1005635c:	4604      	mov	r4, r0
1005635e:	2800      	cmp	r0, #0
10056360:	d105      	bne.n	1005636e <GAP_generate_new_rpa+0x32>
10056362:	6828      	ldr	r0, [r5, #0]
10056364:	3066      	adds	r0, #102	@ 0x66
10056366:	4669      	mov	r1, sp
10056368:	2206      	movs	r2, #6
1005636a:	f7fc f973 	bl	10052654 <BLEPLAT_MemCpy>
1005636e:	4620      	mov	r0, r4
10056370:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10056372:	46c0      	nop			@ (mov r8, r8)

10056374 <__arm_cp.48_0>:
10056374:	20002424 	.word	0x20002424

10056378 <GAP_get_current_address>:
10056378:	b5b0      	push	{r4, r5, r7, lr}
1005637a:	460d      	mov	r5, r1
1005637c:	4604      	mov	r4, r0
1005637e:	480f      	ldr	r0, [pc, #60]	@ (100563bc <__arm_cp.49_0>)
10056380:	6800      	ldr	r0, [r0, #0]
10056382:	215c      	movs	r1, #92	@ 0x5c
10056384:	5c40      	ldrb	r0, [r0, r1]
10056386:	0680      	lsls	r0, r0, #26
10056388:	0f80      	lsrs	r0, r0, #30
1005638a:	d005      	beq.n	10056398 <GAP_get_current_address+0x20>
1005638c:	2001      	movs	r0, #1
1005638e:	7028      	strb	r0, [r5, #0]
10056390:	4620      	mov	r0, r4
10056392:	f000 f815 	bl	100563c0 <GAP_get_rpa>
10056396:	e00e      	b.n	100563b6 <GAP_get_current_address+0x3e>
10056398:	f7ff ff5a 	bl	10056250 <GAP_get_own_address_type>
1005639c:	2800      	cmp	r0, #0
1005639e:	d005      	beq.n	100563ac <GAP_get_current_address+0x34>
100563a0:	2001      	movs	r0, #1
100563a2:	7028      	strb	r0, [r5, #0]
100563a4:	4620      	mov	r0, r4
100563a6:	f000 f81f 	bl	100563e8 <GAP_get_static_random_address>
100563aa:	e004      	b.n	100563b6 <GAP_get_current_address+0x3e>
100563ac:	2000      	movs	r0, #0
100563ae:	7028      	strb	r0, [r5, #0]
100563b0:	4620      	mov	r0, r4
100563b2:	f000 f80f 	bl	100563d4 <GAP_get_public_address>
100563b6:	2000      	movs	r0, #0
100563b8:	bdb0      	pop	{r4, r5, r7, pc}
100563ba:	46c0      	nop			@ (mov r8, r8)

100563bc <__arm_cp.49_0>:
100563bc:	20002424 	.word	0x20002424

100563c0 <GAP_get_rpa>:
100563c0:	b580      	push	{r7, lr}
100563c2:	4903      	ldr	r1, [pc, #12]	@ (100563d0 <__arm_cp.50_0>)
100563c4:	6809      	ldr	r1, [r1, #0]
100563c6:	3166      	adds	r1, #102	@ 0x66
100563c8:	2206      	movs	r2, #6
100563ca:	f7fc f943 	bl	10052654 <BLEPLAT_MemCpy>
100563ce:	bd80      	pop	{r7, pc}

100563d0 <__arm_cp.50_0>:
100563d0:	20002424 	.word	0x20002424

100563d4 <GAP_get_public_address>:
100563d4:	b580      	push	{r7, lr}
100563d6:	4903      	ldr	r1, [pc, #12]	@ (100563e4 <__arm_cp.51_0>)
100563d8:	6809      	ldr	r1, [r1, #0]
100563da:	2206      	movs	r2, #6
100563dc:	f7fc f93a 	bl	10052654 <BLEPLAT_MemCpy>
100563e0:	bd80      	pop	{r7, pc}
100563e2:	46c0      	nop			@ (mov r8, r8)

100563e4 <__arm_cp.51_0>:
100563e4:	2000241c 	.word	0x2000241c

100563e8 <GAP_get_static_random_address>:
100563e8:	b580      	push	{r7, lr}
100563ea:	4903      	ldr	r1, [pc, #12]	@ (100563f8 <__arm_cp.52_0>)
100563ec:	6809      	ldr	r1, [r1, #0]
100563ee:	3160      	adds	r1, #96	@ 0x60
100563f0:	2206      	movs	r2, #6
100563f2:	f7fc f92f 	bl	10052654 <BLEPLAT_MemCpy>
100563f6:	bd80      	pop	{r7, pc}

100563f8 <__arm_cp.52_0>:
100563f8:	20002424 	.word	0x20002424

100563fc <GAP_enable_rpa_change_at_timeout>:
100563fc:	4902      	ldr	r1, [pc, #8]	@ (10056408 <__arm_cp.53_0>)
100563fe:	6809      	ldr	r1, [r1, #0]
10056400:	226c      	movs	r2, #108	@ 0x6c
10056402:	5488      	strb	r0, [r1, r2]
10056404:	4770      	bx	lr
10056406:	46c0      	nop			@ (mov r8, r8)

10056408 <__arm_cp.53_0>:
10056408:	20002424 	.word	0x20002424

1005640c <GAP_check_discoverability_mode>:
1005640c:	1e43      	subs	r3, r0, #1
1005640e:	2b02      	cmp	r3, #2
10056410:	d309      	bcc.n	10056426 <GAP_check_discoverability_mode+0x1a>
10056412:	2800      	cmp	r0, #0
10056414:	d00c      	beq.n	10056430 <GAP_check_discoverability_mode+0x24>
10056416:	2803      	cmp	r0, #3
10056418:	d109      	bne.n	1005642e <GAP_check_discoverability_mode+0x22>
1005641a:	2001      	movs	r0, #1
1005641c:	4001      	ands	r1, r0
1005641e:	4249      	negs	r1, r1
10056420:	2012      	movs	r0, #18
10056422:	4008      	ands	r0, r1
10056424:	4770      	bx	lr
10056426:	2a00      	cmp	r2, #0
10056428:	d101      	bne.n	1005642e <GAP_check_discoverability_mode+0x22>
1005642a:	4610      	mov	r0, r2
1005642c:	4770      	bx	lr
1005642e:	2012      	movs	r0, #18
10056430:	4770      	bx	lr
	...

10056434 <GAP_advEvtProp_to_advType>:
10056434:	4601      	mov	r1, r0
10056436:	3910      	subs	r1, #16
10056438:	2905      	cmp	r1, #5
1005643a:	d80a      	bhi.n	10056452 <GAP_advEvtProp_to_advType+0x1e>
1005643c:	2000      	movs	r0, #0
1005643e:	46c0      	nop			@ (mov r8, r8)
10056440:	4479      	add	r1, pc
10056442:	7909      	ldrb	r1, [r1, #4]
10056444:	0049      	lsls	r1, r1, #1
10056446:	448f      	add	pc, r1
10056448:	090a0802 	.word	0x090a0802
1005644c:	0c08      	.short	0x0c08
1005644e:	2003      	movs	r0, #3
10056450:	4770      	bx	lr
10056452:	281d      	cmp	r0, #29
10056454:	d101      	bne.n	1005645a <GAP_advEvtProp_to_advType+0x26>
10056456:	2001      	movs	r0, #1
10056458:	4770      	bx	lr
1005645a:	2005      	movs	r0, #5
1005645c:	4770      	bx	lr
1005645e:	2002      	movs	r0, #2
10056460:	4770      	bx	lr
10056462:	2004      	movs	r0, #4
10056464:	4770      	bx	lr
	...

10056468 <GAP_set_legacy_advertising_configuration>:
10056468:	b5f0      	push	{r4, r5, r6, r7, lr}
1005646a:	b08b      	sub	sp, #44	@ 0x2c
1005646c:	4615      	mov	r5, r2
1005646e:	460f      	mov	r7, r1
10056470:	4601      	mov	r1, r0
10056472:	06fa      	lsls	r2, r7, #27
10056474:	2012      	movs	r0, #18
10056476:	2a00      	cmp	r2, #0
10056478:	d53f      	bpl.n	100564fa <GAP_set_legacy_advertising_configuration+0x92>
1005647a:	461c      	mov	r4, r3
1005647c:	2301      	movs	r3, #1
1005647e:	039a      	lsls	r2, r3, #14
10056480:	4295      	cmp	r5, r2
10056482:	d83a      	bhi.n	100564fa <GAP_set_legacy_advertising_configuration+0x92>
10056484:	4294      	cmp	r4, r2
10056486:	d838      	bhi.n	100564fa <GAP_set_legacy_advertising_configuration+0x92>
10056488:	930a      	str	r3, [sp, #40]	@ 0x28
1005648a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1005648c:	9009      	str	r0, [sp, #36]	@ 0x24
1005648e:	9812      	ldr	r0, [sp, #72]	@ 0x48
10056490:	9008      	str	r0, [sp, #32]
10056492:	9811      	ldr	r0, [sp, #68]	@ 0x44
10056494:	9006      	str	r0, [sp, #24]
10056496:	9810      	ldr	r0, [sp, #64]	@ 0x40
10056498:	9007      	str	r0, [sp, #28]
1005649a:	4819      	ldr	r0, [pc, #100]	@ (10056500 <__arm_cp.2_0>)
1005649c:	6800      	ldr	r0, [r0, #0]
1005649e:	6d46      	ldr	r6, [r0, #84]	@ 0x54
100564a0:	2000      	movs	r0, #0
100564a2:	9004      	str	r0, [sp, #16]
100564a4:	7070      	strb	r0, [r6, #1]
100564a6:	7031      	strb	r1, [r6, #0]
100564a8:	f7ff fed2 	bl	10056250 <GAP_get_own_address_type>
100564ac:	9005      	str	r0, [sp, #20]
100564ae:	4638      	mov	r0, r7
100564b0:	f7ff ffc0 	bl	10056434 <GAP_advEvtProp_to_advType>
100564b4:	4602      	mov	r2, r0
100564b6:	7870      	ldrb	r0, [r6, #1]
100564b8:	2120      	movs	r1, #32
100564ba:	4301      	orrs	r1, r0
100564bc:	7071      	strb	r1, [r6, #1]
100564be:	2a04      	cmp	r2, #4
100564c0:	d808      	bhi.n	100564d4 <GAP_set_legacy_advertising_configuration+0x6c>
100564c2:	2117      	movs	r1, #23
100564c4:	40d1      	lsrs	r1, r2
100564c6:	07c9      	lsls	r1, r1, #31
100564c8:	d004      	beq.n	100564d4 <GAP_set_legacy_advertising_configuration+0x6c>
100564ca:	b251      	sxtb	r1, r2
100564cc:	a30d      	add	r3, pc, #52	@ (adr r3, 10056504 <__arm_cp.2_0+0x4>)
100564ce:	5c59      	ldrb	r1, [r3, r1]
100564d0:	4308      	orrs	r0, r1
100564d2:	7070      	strb	r0, [r6, #1]
100564d4:	9806      	ldr	r0, [sp, #24]
100564d6:	9000      	str	r0, [sp, #0]
100564d8:	9808      	ldr	r0, [sp, #32]
100564da:	9001      	str	r0, [sp, #4]
100564dc:	9807      	ldr	r0, [sp, #28]
100564de:	9002      	str	r0, [sp, #8]
100564e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
100564e2:	9003      	str	r0, [sp, #12]
100564e4:	b2a8      	uxth	r0, r5
100564e6:	b2a1      	uxth	r1, r4
100564e8:	9b05      	ldr	r3, [sp, #20]
100564ea:	f002 fe8d 	bl	10059208 <hci_le_set_advertising_parameters>
100564ee:	2800      	cmp	r0, #0
100564f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
100564f2:	d102      	bne.n	100564fa <GAP_set_legacy_advertising_configuration+0x92>
100564f4:	9804      	ldr	r0, [sp, #16]
100564f6:	74b0      	strb	r0, [r6, #18]
100564f8:	7431      	strb	r1, [r6, #16]
100564fa:	b00b      	add	sp, #44	@ 0x2c
100564fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100564fe:	46c0      	nop			@ (mov r8, r8)

10056500 <__arm_cp.2_0>:
10056500:	20002424 	.word	0x20002424
10056504:	70287028 	.word	0x70287028
10056508:	00000030 	.word	0x00000030

1005650c <GAP_get_advertising_set_index>:
1005650c:	b570      	push	{r4, r5, r6, lr}
1005650e:	4602      	mov	r2, r0
10056510:	480b      	ldr	r0, [pc, #44]	@ (10056540 <__arm_cp.4_0>)
10056512:	7e84      	ldrb	r4, [r0, #26]
10056514:	480b      	ldr	r0, [pc, #44]	@ (10056544 <__arm_cp.4_1>)
10056516:	6800      	ldr	r0, [r0, #0]
10056518:	6d45      	ldr	r5, [r0, #84]	@ 0x54
1005651a:	3510      	adds	r5, #16
1005651c:	2000      	movs	r0, #0
1005651e:	4603      	mov	r3, r0
10056520:	429c      	cmp	r4, r3
10056522:	d008      	beq.n	10056536 <GAP_get_advertising_set_index+0x2a>
10056524:	782e      	ldrb	r6, [r5, #0]
10056526:	2e00      	cmp	r6, #0
10056528:	d008      	beq.n	1005653c <GAP_get_advertising_set_index+0x30>
1005652a:	78ae      	ldrb	r6, [r5, #2]
1005652c:	4296      	cmp	r6, r2
1005652e:	d004      	beq.n	1005653a <GAP_get_advertising_set_index+0x2e>
10056530:	3514      	adds	r5, #20
10056532:	1c5b      	adds	r3, r3, #1
10056534:	e7f4      	b.n	10056520 <GAP_get_advertising_set_index+0x14>
10056536:	4623      	mov	r3, r4
10056538:	e000      	b.n	1005653c <GAP_get_advertising_set_index+0x30>
1005653a:	2001      	movs	r0, #1
1005653c:	700b      	strb	r3, [r1, #0]
1005653e:	bd70      	pop	{r4, r5, r6, pc}

10056540 <__arm_cp.4_0>:
10056540:	20002484 	.word	0x20002484

10056544 <__arm_cp.4_1>:
10056544:	20002424 	.word	0x20002424

10056548 <GAP_set_legacy_advertising_enable>:
10056548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005654a:	4604      	mov	r4, r0
1005654c:	4819      	ldr	r0, [pc, #100]	@ (100565b4 <__arm_cp.5_0>)
1005654e:	6800      	ldr	r0, [r0, #0]
10056550:	6d47      	ldr	r7, [r0, #84]	@ 0x54
10056552:	2c00      	cmp	r4, #0
10056554:	d00d      	beq.n	10056572 <GAP_set_legacy_advertising_enable+0x2a>
10056556:	7c38      	ldrb	r0, [r7, #16]
10056558:	2800      	cmp	r0, #0
1005655a:	d023      	beq.n	100565a4 <GAP_set_legacy_advertising_enable+0x5c>
1005655c:	2000      	movs	r0, #0
1005655e:	4601      	mov	r1, r0
10056560:	f000 f82a 	bl	100565b8 <GAP_check_flags>
10056564:	4605      	mov	r5, r0
10056566:	2800      	cmp	r0, #0
10056568:	d122      	bne.n	100565b0 <GAP_set_legacy_advertising_enable+0x68>
1005656a:	f7ff fee7 	bl	1005633c <GAP_generate_new_rpa>
1005656e:	4606      	mov	r6, r0
10056570:	e000      	b.n	10056574 <GAP_set_legacy_advertising_enable+0x2c>
10056572:	260c      	movs	r6, #12
10056574:	4620      	mov	r0, r4
10056576:	f002 fea7 	bl	100592c8 <hci_le_set_advertising_enable>
1005657a:	4605      	mov	r5, r0
1005657c:	2800      	cmp	r0, #0
1005657e:	d117      	bne.n	100565b0 <GAP_set_legacy_advertising_enable+0x68>
10056580:	2500      	movs	r5, #0
10056582:	4620      	mov	r0, r4
10056584:	4629      	mov	r1, r5
10056586:	462a      	mov	r2, r5
10056588:	f000 f870 	bl	1005666c <GAP_set_discoverability_mode>
1005658c:	2c00      	cmp	r4, #0
1005658e:	d00b      	beq.n	100565a8 <GAP_set_legacy_advertising_enable+0x60>
10056590:	2001      	movs	r0, #1
10056592:	7478      	strb	r0, [r7, #17]
10056594:	2e00      	cmp	r6, #0
10056596:	d10b      	bne.n	100565b0 <GAP_set_legacy_advertising_enable+0x68>
10056598:	2500      	movs	r5, #0
1005659a:	4628      	mov	r0, r5
1005659c:	4629      	mov	r1, r5
1005659e:	f7ff fea5 	bl	100562ec <GAP_start_privacy_timer>
100565a2:	e005      	b.n	100565b0 <GAP_set_legacy_advertising_enable+0x68>
100565a4:	25d3      	movs	r5, #211	@ 0xd3
100565a6:	e003      	b.n	100565b0 <GAP_set_legacy_advertising_enable+0x68>
100565a8:	2500      	movs	r5, #0
100565aa:	747d      	strb	r5, [r7, #17]
100565ac:	f7ff fe0a 	bl	100561c4 <GAP_stop_privacy_timer>
100565b0:	4628      	mov	r0, r5
100565b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100565b4 <__arm_cp.5_0>:
100565b4:	20002424 	.word	0x20002424

100565b8 <GAP_check_flags>:
100565b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100565ba:	4a28      	ldr	r2, [pc, #160]	@ (1005665c <__arm_cp.6_0>)
100565bc:	7e92      	ldrb	r2, [r2, #26]
100565be:	2512      	movs	r5, #18
100565c0:	428a      	cmp	r2, r1
100565c2:	d925      	bls.n	10056610 <GAP_check_flags+0x58>
100565c4:	2800      	cmp	r0, #0
100565c6:	d100      	bne.n	100565ca <GAP_check_flags+0x12>
100565c8:	4601      	mov	r1, r0
100565ca:	2214      	movs	r2, #20
100565cc:	434a      	muls	r2, r1
100565ce:	4824      	ldr	r0, [pc, #144]	@ (10056660 <__arm_cp.6_1>)
100565d0:	6800      	ldr	r0, [r0, #0]
100565d2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
100565d4:	1899      	adds	r1, r3, r2
100565d6:	784c      	ldrb	r4, [r1, #1]
100565d8:	06a0      	lsls	r0, r4, #26
100565da:	0fc6      	lsrs	r6, r0, #31
100565dc:	2000      	movs	r0, #0
100565de:	2e00      	cmp	r6, #0
100565e0:	d002      	beq.n	100565e8 <GAP_check_flags+0x30>
100565e2:	2710      	movs	r7, #16
100565e4:	4027      	ands	r7, r4
100565e6:	d114      	bne.n	10056612 <GAP_check_flags+0x5a>
100565e8:	2e00      	cmp	r6, #0
100565ea:	d102      	bne.n	100565f2 <GAP_check_flags+0x3a>
100565ec:	2608      	movs	r6, #8
100565ee:	4034      	ands	r4, r6
100565f0:	d10f      	bne.n	10056612 <GAP_check_flags+0x5a>
100565f2:	5c9e      	ldrb	r6, [r3, r2]
100565f4:	684c      	ldr	r4, [r1, #4]
100565f6:	8988      	ldrh	r0, [r1, #12]
100565f8:	4621      	mov	r1, r4
100565fa:	f000 f8bb 	bl	10056774 <GAP_search_flags_index>
100565fe:	4919      	ldr	r1, [pc, #100]	@ (10056664 <__arm_cp.6_2>)
10056600:	4288      	cmp	r0, r1
10056602:	d008      	beq.n	10056616 <GAP_check_flags+0x5e>
10056604:	1900      	adds	r0, r0, r4
10056606:	7881      	ldrb	r1, [r0, #2]
10056608:	0748      	lsls	r0, r1, #29
1005660a:	d40b      	bmi.n	10056624 <GAP_check_flags+0x6c>
1005660c:	20d4      	movs	r0, #212	@ 0xd4
1005660e:	e000      	b.n	10056612 <GAP_check_flags+0x5a>
10056610:	4628      	mov	r0, r5
10056612:	b2c0      	uxtb	r0, r0
10056614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10056616:	2e03      	cmp	r6, #3
10056618:	4628      	mov	r0, r5
1005661a:	d8fa      	bhi.n	10056612 <GAP_check_flags+0x5a>
1005661c:	00f1      	lsls	r1, r6, #3
1005661e:	4812      	ldr	r0, [pc, #72]	@ (10056668 <__arm_cp.6_3>)
10056620:	40c8      	lsrs	r0, r1
10056622:	e7f6      	b.n	10056612 <GAP_check_flags+0x5a>
10056624:	2e03      	cmp	r6, #3
10056626:	4628      	mov	r0, r5
10056628:	d8f3      	bhi.n	10056612 <GAP_check_flags+0x5a>
1005662a:	46c0      	nop			@ (mov r8, r8)
1005662c:	447e      	add	r6, pc
1005662e:	7936      	ldrb	r6, [r6, #4]
10056630:	0076      	lsls	r6, r6, #1
10056632:	44b7      	add	pc, r6
10056634:	010d0601 	.word	0x010d0601
10056638:	2003      	movs	r0, #3
1005663a:	4001      	ands	r1, r0
1005663c:	d105      	bne.n	1005664a <GAP_check_flags+0x92>
1005663e:	4608      	mov	r0, r1
10056640:	e7e7      	b.n	10056612 <GAP_check_flags+0x5a>
10056642:	2003      	movs	r0, #3
10056644:	4001      	ands	r1, r0
10056646:	2901      	cmp	r1, #1
10056648:	d006      	beq.n	10056658 <GAP_check_flags+0xa0>
1005664a:	202b      	movs	r0, #43	@ 0x2b
1005664c:	43c0      	mvns	r0, r0
1005664e:	e7e0      	b.n	10056612 <GAP_check_flags+0x5a>
10056650:	2003      	movs	r0, #3
10056652:	4001      	ands	r1, r0
10056654:	2902      	cmp	r1, #2
10056656:	d1f8      	bne.n	1005664a <GAP_check_flags+0x92>
10056658:	2000      	movs	r0, #0
1005665a:	e7da      	b.n	10056612 <GAP_check_flags+0x5a>

1005665c <__arm_cp.6_0>:
1005665c:	20002484 	.word	0x20002484

10056660 <__arm_cp.6_1>:
10056660:	20002424 	.word	0x20002424

10056664 <__arm_cp.6_2>:
10056664:	0000ffff 	.word	0x0000ffff

10056668 <__arm_cp.6_3>:
10056668:	00d4d400 	.word	0x00d4d400

1005666c <GAP_set_discoverability_mode>:
1005666c:	b570      	push	{r4, r5, r6, lr}
1005666e:	4603      	mov	r3, r0
10056670:	2900      	cmp	r1, #0
10056672:	d100      	bne.n	10056676 <GAP_set_discoverability_mode+0xa>
10056674:	460a      	mov	r2, r1
10056676:	4829      	ldr	r0, [pc, #164]	@ (1005671c <__arm_cp.7_0>)
10056678:	6800      	ldr	r0, [r0, #0]
1005667a:	6d41      	ldr	r1, [r0, #84]	@ 0x54
1005667c:	2b01      	cmp	r3, #1
1005667e:	d10c      	bne.n	1005669a <GAP_set_discoverability_mode+0x2e>
10056680:	2314      	movs	r3, #20
10056682:	4353      	muls	r3, r2
10056684:	5cca      	ldrb	r2, [r1, r3]
10056686:	2a01      	cmp	r2, #1
10056688:	d033      	beq.n	100566f2 <GAP_set_discoverability_mode+0x86>
1005668a:	2a02      	cmp	r2, #2
1005668c:	d13e      	bne.n	1005670c <GAP_set_discoverability_mode+0xa0>
1005668e:	18ca      	adds	r2, r1, r3
10056690:	7894      	ldrb	r4, [r2, #2]
10056692:	2004      	movs	r0, #4
10056694:	4320      	orrs	r0, r4
10056696:	7090      	strb	r0, [r2, #2]
10056698:	e03a      	b.n	10056710 <GAP_set_discoverability_mode+0xa4>
1005669a:	2314      	movs	r3, #20
1005669c:	4353      	muls	r3, r2
1005669e:	18c9      	adds	r1, r1, r3
100566a0:	1c8e      	adds	r6, r1, #2
100566a2:	7889      	ldrb	r1, [r1, #2]
100566a4:	0789      	lsls	r1, r1, #30
100566a6:	d521      	bpl.n	100566ec <GAP_set_discoverability_mode+0x80>
100566a8:	2400      	movs	r4, #0
100566aa:	4621      	mov	r1, r4
100566ac:	f00c f8db 	bl	10062866 <CST_stop>
100566b0:	481b      	ldr	r0, [pc, #108]	@ (10056720 <__arm_cp.7_1>)
100566b2:	6800      	ldr	r0, [r0, #0]
100566b4:	214e      	movs	r1, #78	@ 0x4e
100566b6:	5c40      	ldrb	r0, [r0, r1]
100566b8:	07c0      	lsls	r0, r0, #31
100566ba:	d017      	beq.n	100566ec <GAP_set_discoverability_mode+0x80>
100566bc:	4819      	ldr	r0, [pc, #100]	@ (10056724 <__arm_cp.7_2>)
100566be:	6800      	ldr	r0, [r0, #0]
100566c0:	6980      	ldr	r0, [r0, #24]
100566c2:	2244      	movs	r2, #68	@ 0x44
100566c4:	2502      	movs	r5, #2
100566c6:	4629      	mov	r1, r5
100566c8:	462b      	mov	r3, r5
100566ca:	f7fe fd0f 	bl	100550ec <aci_event_fifo_push_header>
100566ce:	2800      	cmp	r0, #0
100566d0:	d00c      	beq.n	100566ec <GAP_set_discoverability_mode+0x80>
100566d2:	4601      	mov	r1, r0
100566d4:	7185      	strb	r5, [r0, #6]
100566d6:	71c4      	strb	r4, [r0, #7]
100566d8:	7204      	strb	r4, [r0, #8]
100566da:	20ff      	movs	r0, #255	@ 0xff
100566dc:	7148      	strb	r0, [r1, #5]
100566de:	2082      	movs	r0, #130	@ 0x82
100566e0:	7108      	strb	r0, [r1, #4]
100566e2:	2004      	movs	r0, #4
100566e4:	7248      	strb	r0, [r1, #9]
100566e6:	4628      	mov	r0, r5
100566e8:	f7fe fd9d 	bl	10055226 <aci_event_fifo_push>
100566ec:	2000      	movs	r0, #0
100566ee:	7030      	strb	r0, [r6, #0]
100566f0:	bd70      	pop	{r4, r5, r6, pc}
100566f2:	18c9      	adds	r1, r1, r3
100566f4:	784a      	ldrb	r2, [r1, #1]
100566f6:	788b      	ldrb	r3, [r1, #2]
100566f8:	4313      	orrs	r3, r2
100566fa:	2202      	movs	r2, #2
100566fc:	431a      	orrs	r2, r3
100566fe:	708a      	strb	r2, [r1, #2]
10056700:	2100      	movs	r1, #0
10056702:	2201      	movs	r2, #1
10056704:	4b08      	ldr	r3, [pc, #32]	@ (10056728 <__arm_cp.7_3>)
10056706:	f00c f8e4 	bl	100628d2 <CST_start>
1005670a:	bd70      	pop	{r4, r5, r6, pc}
1005670c:	18c8      	adds	r0, r1, r3
1005670e:	7880      	ldrb	r0, [r0, #2]
10056710:	18c9      	adds	r1, r1, r3
10056712:	784a      	ldrb	r2, [r1, #1]
10056714:	4302      	orrs	r2, r0
10056716:	708a      	strb	r2, [r1, #2]
10056718:	bd70      	pop	{r4, r5, r6, pc}
1005671a:	46c0      	nop			@ (mov r8, r8)

1005671c <__arm_cp.7_0>:
1005671c:	20002424 	.word	0x20002424

10056720 <__arm_cp.7_1>:
10056720:	20002470 	.word	0x20002470

10056724 <__arm_cp.7_2>:
10056724:	20002420 	.word	0x20002420

10056728 <__arm_cp.7_3>:
10056728:	0002bf20 	.word	0x0002bf20

1005672c <GAP_suspend_resume_active_advertising_sets_ucfg_weak>:
1005672c:	b580      	push	{r7, lr}
1005672e:	f000 f801 	bl	10056734 <GAP_suspend_resume_active_advertising_sets_legacy>
10056732:	bd80      	pop	{r7, pc}

10056734 <GAP_suspend_resume_active_advertising_sets_legacy>:
10056734:	b580      	push	{r7, lr}
10056736:	4905      	ldr	r1, [pc, #20]	@ (1005674c <__arm_cp.11_0>)
10056738:	6809      	ldr	r1, [r1, #0]
1005673a:	6d49      	ldr	r1, [r1, #84]	@ 0x54
1005673c:	7c49      	ldrb	r1, [r1, #17]
1005673e:	2901      	cmp	r1, #1
10056740:	d102      	bne.n	10056748 <GAP_suspend_resume_active_advertising_sets_legacy+0x14>
10056742:	f002 fdc1 	bl	100592c8 <hci_le_set_advertising_enable>
10056746:	bd80      	pop	{r7, pc}
10056748:	2000      	movs	r0, #0
1005674a:	bd80      	pop	{r7, pc}

1005674c <__arm_cp.11_0>:
1005674c:	20002424 	.word	0x20002424

10056750 <GAP_set_legacy_advertising_data>:
10056750:	b5b0      	push	{r4, r5, r7, lr}
10056752:	460c      	mov	r4, r1
10056754:	4605      	mov	r5, r0
10056756:	b2c0      	uxtb	r0, r0
10056758:	f008 fe9e 	bl	1005f498 <ll_set_legacy_advertising_data_ptr>
1005675c:	2800      	cmp	r0, #0
1005675e:	d000      	beq.n	10056762 <GAP_set_legacy_advertising_data+0x12>
10056760:	bdb0      	pop	{r4, r5, r7, pc}
10056762:	4903      	ldr	r1, [pc, #12]	@ (10056770 <__arm_cp.12_0>)
10056764:	6809      	ldr	r1, [r1, #0]
10056766:	6d49      	ldr	r1, [r1, #84]	@ 0x54
10056768:	818d      	strh	r5, [r1, #12]
1005676a:	604c      	str	r4, [r1, #4]
1005676c:	bdb0      	pop	{r4, r5, r7, pc}
1005676e:	46c0      	nop			@ (mov r8, r8)

10056770 <__arm_cp.12_0>:
10056770:	20002424 	.word	0x20002424

10056774 <GAP_search_flags_index>:
10056774:	b5b0      	push	{r4, r5, r7, lr}
10056776:	4a0a      	ldr	r2, [pc, #40]	@ (100567a0 <__arm_cp.16_0>)
10056778:	2803      	cmp	r0, #3
1005677a:	d30f      	bcc.n	1005679c <GAP_search_flags_index+0x28>
1005677c:	2300      	movs	r3, #0
1005677e:	b29d      	uxth	r5, r3
10056780:	5d4c      	ldrb	r4, [r1, r5]
10056782:	2c02      	cmp	r4, #2
10056784:	d103      	bne.n	1005678e <GAP_search_flags_index+0x1a>
10056786:	186d      	adds	r5, r5, r1
10056788:	786d      	ldrb	r5, [r5, #1]
1005678a:	2d01      	cmp	r5, #1
1005678c:	d005      	beq.n	1005679a <GAP_search_flags_index+0x26>
1005678e:	191b      	adds	r3, r3, r4
10056790:	1c5b      	adds	r3, r3, #1
10056792:	b29c      	uxth	r4, r3
10056794:	4284      	cmp	r4, r0
10056796:	d3f2      	bcc.n	1005677e <GAP_search_flags_index+0xa>
10056798:	e000      	b.n	1005679c <GAP_search_flags_index+0x28>
1005679a:	461a      	mov	r2, r3
1005679c:	b290      	uxth	r0, r2
1005679e:	bdb0      	pop	{r4, r5, r7, pc}

100567a0 <__arm_cp.16_0>:
100567a0:	0000ffff 	.word	0x0000ffff

100567a4 <GAP_check_adv_status>:
100567a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100567a6:	4605      	mov	r5, r0
100567a8:	2600      	movs	r6, #0
100567aa:	7006      	strb	r6, [r0, #0]
100567ac:	2401      	movs	r4, #1
100567ae:	9100      	str	r1, [sp, #0]
100567b0:	700c      	strb	r4, [r1, #0]
100567b2:	4816      	ldr	r0, [pc, #88]	@ (1005680c <__arm_cp.17_0>)
100567b4:	6800      	ldr	r0, [r0, #0]
100567b6:	6d47      	ldr	r7, [r0, #84]	@ 0x54
100567b8:	f7ff fb86 	bl	10055ec8 <gap_extended_adv_scan_supported>
100567bc:	2800      	cmp	r0, #0
100567be:	d001      	beq.n	100567c4 <GAP_check_adv_status+0x20>
100567c0:	4813      	ldr	r0, [pc, #76]	@ (10056810 <__arm_cp.17_1>)
100567c2:	7e84      	ldrb	r4, [r0, #26]
100567c4:	b2e1      	uxtb	r1, r4
100567c6:	3711      	adds	r7, #17
100567c8:	4630      	mov	r0, r6
100567ca:	4632      	mov	r2, r6
100567cc:	2900      	cmp	r1, #0
100567ce:	d00f      	beq.n	100567f0 <GAP_check_adv_status+0x4c>
100567d0:	783b      	ldrb	r3, [r7, #0]
100567d2:	2b00      	cmp	r3, #0
100567d4:	d009      	beq.n	100567ea <GAP_check_adv_status+0x46>
100567d6:	2b02      	cmp	r3, #2
100567d8:	d100      	bne.n	100567dc <GAP_check_adv_status+0x38>
100567da:	2001      	movs	r0, #1
100567dc:	463a      	mov	r2, r7
100567de:	3a0f      	subs	r2, #15
100567e0:	7813      	ldrb	r3, [r2, #0]
100567e2:	2201      	movs	r2, #1
100567e4:	079b      	lsls	r3, r3, #30
100567e6:	d500      	bpl.n	100567ea <GAP_check_adv_status+0x46>
100567e8:	4616      	mov	r6, r2
100567ea:	3714      	adds	r7, #20
100567ec:	1e49      	subs	r1, r1, #1
100567ee:	e7ed      	b.n	100567cc <GAP_check_adv_status+0x28>
100567f0:	2a01      	cmp	r2, #1
100567f2:	d101      	bne.n	100567f8 <GAP_check_adv_status+0x54>
100567f4:	2101      	movs	r1, #1
100567f6:	7029      	strb	r1, [r5, #0]
100567f8:	2801      	cmp	r0, #1
100567fa:	d002      	beq.n	10056802 <GAP_check_adv_status+0x5e>
100567fc:	b2f0      	uxtb	r0, r6
100567fe:	2801      	cmp	r0, #1
10056800:	d102      	bne.n	10056808 <GAP_check_adv_status+0x64>
10056802:	2000      	movs	r0, #0
10056804:	9900      	ldr	r1, [sp, #0]
10056806:	7008      	strb	r0, [r1, #0]
10056808:	b2d0      	uxtb	r0, r2
1005680a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005680c <__arm_cp.17_0>:
1005680c:	20002424 	.word	0x20002424

10056810 <__arm_cp.17_1>:
10056810:	20002484 	.word	0x20002484

10056814 <GAP_ResumeAdvertising_ucfg_weak>:
10056814:	b580      	push	{r7, lr}
10056816:	2001      	movs	r0, #1
10056818:	f7ff ff8c 	bl	10056734 <GAP_suspend_resume_active_advertising_sets_legacy>
1005681c:	bd80      	pop	{r7, pc}
	...

10056820 <GAT_att_cmn_init>:
10056820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10056822:	2001      	movs	r0, #1
10056824:	2198      	movs	r1, #152	@ 0x98
10056826:	f00a f9d5 	bl	10060bd4 <csmem_mem_0_assign>
1005682a:	4e2b      	ldr	r6, [pc, #172]	@ (100568d8 <__arm_cp.1_0>)
1005682c:	6030      	str	r0, [r6, #0]
1005682e:	4f2b      	ldr	r7, [pc, #172]	@ (100568dc <__arm_cp.1_1>)
10056830:	7af8      	ldrb	r0, [r7, #11]
10056832:	7b39      	ldrb	r1, [r7, #12]
10056834:	1808      	adds	r0, r1, r0
10056836:	2414      	movs	r4, #20
10056838:	4621      	mov	r1, r4
1005683a:	f00a f9cb 	bl	10060bd4 <csmem_mem_0_assign>
1005683e:	6832      	ldr	r2, [r6, #0]
10056840:	2500      	movs	r5, #0
10056842:	6355      	str	r5, [r2, #52]	@ 0x34
10056844:	62d5      	str	r5, [r2, #44]	@ 0x2c
10056846:	7af9      	ldrb	r1, [r7, #11]
10056848:	4603      	mov	r3, r0
1005684a:	462f      	mov	r7, r5
1005684c:	42b9      	cmp	r1, r7
1005684e:	d00a      	beq.n	10056866 <GAT_att_cmn_init+0x46>
10056850:	611d      	str	r5, [r3, #16]
10056852:	705f      	strb	r7, [r3, #1]
10056854:	701f      	strb	r7, [r3, #0]
10056856:	6832      	ldr	r2, [r6, #0]
10056858:	62d3      	str	r3, [r2, #44]	@ 0x2c
1005685a:	4625      	mov	r5, r4
1005685c:	437d      	muls	r5, r7
1005685e:	1945      	adds	r5, r0, r5
10056860:	3314      	adds	r3, #20
10056862:	1c7f      	adds	r7, r7, #1
10056864:	e7f2      	b.n	1005684c <GAT_att_cmn_init+0x2c>
10056866:	2300      	movs	r3, #0
10056868:	6313      	str	r3, [r2, #48]	@ 0x30
1005686a:	4a1c      	ldr	r2, [pc, #112]	@ (100568dc <__arm_cp.1_1>)
1005686c:	7b12      	ldrb	r2, [r2, #12]
1005686e:	1852      	adds	r2, r2, r1
10056870:	b2cd      	uxtb	r5, r1
10056872:	42aa      	cmp	r2, r5
10056874:	d90a      	bls.n	1005688c <GAT_att_cmn_init+0x6c>
10056876:	4365      	muls	r5, r4
10056878:	27ff      	movs	r7, #255	@ 0xff
1005687a:	5547      	strb	r7, [r0, r5]
1005687c:	1945      	adds	r5, r0, r5
1005687e:	612b      	str	r3, [r5, #16]
10056880:	7069      	strb	r1, [r5, #1]
10056882:	6833      	ldr	r3, [r6, #0]
10056884:	631d      	str	r5, [r3, #48]	@ 0x30
10056886:	1c49      	adds	r1, r1, #1
10056888:	462b      	mov	r3, r5
1005688a:	e7f1      	b.n	10056870 <GAT_att_cmn_init+0x50>
1005688c:	0690      	lsls	r0, r2, #26
1005688e:	0e00      	lsrs	r0, r0, #24
10056890:	1c41      	adds	r1, r0, #1
10056892:	4c13      	ldr	r4, [pc, #76]	@ (100568e0 <__arm_cp.1_2>)
10056894:	2201      	movs	r2, #1
10056896:	4620      	mov	r0, r4
10056898:	f00a f98a 	bl	10060bb0 <csmem_mem_assign>
1005689c:	6831      	ldr	r1, [r6, #0]
1005689e:	6208      	str	r0, [r1, #32]
100568a0:	4d0e      	ldr	r5, [pc, #56]	@ (100568dc <__arm_cp.1_1>)
100568a2:	7ae8      	ldrb	r0, [r5, #11]
100568a4:	7b29      	ldrb	r1, [r5, #12]
100568a6:	1808      	adds	r0, r1, r0
100568a8:	0680      	lsls	r0, r0, #26
100568aa:	0e01      	lsrs	r1, r0, #24
100568ac:	2202      	movs	r2, #2
100568ae:	4620      	mov	r0, r4
100568b0:	f00a f97e 	bl	10060bb0 <csmem_mem_assign>
100568b4:	6834      	ldr	r4, [r6, #0]
100568b6:	6260      	str	r0, [r4, #36]	@ 0x24
100568b8:	7ae8      	ldrb	r0, [r5, #11]
100568ba:	7b29      	ldrb	r1, [r5, #12]
100568bc:	1808      	adds	r0, r1, r0
100568be:	0680      	lsls	r0, r0, #26
100568c0:	0e01      	lsrs	r1, r0, #24
100568c2:	4a08      	ldr	r2, [pc, #32]	@ (100568e4 <__arm_cp.1_3>)
100568c4:	2307      	movs	r3, #7
100568c6:	4620      	mov	r0, r4
100568c8:	f00b ffb8 	bl	1006283c <CST_init>
100568cc:	f000 f9f2 	bl	10056cb4 <GAT_att_srv_init>
100568d0:	f00d fbfc 	bl	100640cc <GAT_att_clt_init>
100568d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100568d6:	46c0      	nop			@ (mov r8, r8)

100568d8 <__arm_cp.1_0>:
100568d8:	20002428 	.word	0x20002428

100568dc <__arm_cp.1_1>:
100568dc:	20002484 	.word	0x20002484

100568e0 <__arm_cp.1_2>:
100568e0:	20002480 	.word	0x20002480

100568e4 <__arm_cp.1_3>:
100568e4:	100568e9 	.word	0x100568e9

100568e8 <GAT_att_cmn_timeout_cb_wrapper>:
100568e8:	b580      	push	{r7, lr}
100568ea:	6940      	ldr	r0, [r0, #20]
100568ec:	4901      	ldr	r1, [pc, #4]	@ (100568f4 <__arm_cp.2_0>)
100568ee:	f00c f87e 	bl	100629ee <cst_sharedCallback>
100568f2:	bd80      	pop	{r7, pc}

100568f4 <__arm_cp.2_0>:
100568f4:	10056c61 	.word	0x10056c61

100568f8 <GAT_att_cmn_timer_expire_tsk>:
100568f8:	b5e0      	push	{r5, r6, r7, lr}
100568fa:	2000      	movs	r0, #0
100568fc:	9000      	str	r0, [sp, #0]
100568fe:	4b06      	ldr	r3, [pc, #24]	@ (10056918 <__arm_cp.4_0>)
10056900:	4601      	mov	r1, r0
10056902:	4602      	mov	r2, r0
10056904:	f000 f80a 	bl	1005691c <GAT_att_cmn_for_each_ch_descr>
10056908:	2800      	cmp	r0, #0
1005690a:	d004      	beq.n	10056916 <GAT_att_cmn_timer_expire_tsk+0x1e>
1005690c:	2007      	movs	r0, #7
1005690e:	f00b ff37 	bl	10062780 <tsk_notify_idx>
10056912:	f7fb f8b8 	bl	10051a86 <BLE_STACK_ProcessRequest>
10056916:	bd8c      	pop	{r2, r3, r7, pc}

10056918 <__arm_cp.4_0>:
10056918:	10056979 	.word	0x10056979

1005691c <GAT_att_cmn_for_each_ch_descr>:
1005691c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005691e:	b085      	sub	sp, #20
10056920:	9304      	str	r3, [sp, #16]
10056922:	9201      	str	r2, [sp, #4]
10056924:	9102      	str	r1, [sp, #8]
10056926:	4607      	mov	r7, r0
10056928:	2002      	movs	r0, #2
1005692a:	4038      	ands	r0, r7
1005692c:	9003      	str	r0, [sp, #12]
1005692e:	2401      	movs	r4, #1
10056930:	403c      	ands	r4, r7
10056932:	4810      	ldr	r0, [pc, #64]	@ (10056974 <__arm_cp.5_0>)
10056934:	6805      	ldr	r5, [r0, #0]
10056936:	3534      	adds	r5, #52	@ 0x34
10056938:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1005693a:	682d      	ldr	r5, [r5, #0]
1005693c:	2d00      	cmp	r5, #0
1005693e:	d016      	beq.n	1005696e <GAT_att_cmn_for_each_ch_descr+0x52>
10056940:	2f00      	cmp	r7, #0
10056942:	d00c      	beq.n	1005695e <GAT_att_cmn_for_each_ch_descr+0x42>
10056944:	2c00      	cmp	r4, #0
10056946:	d003      	beq.n	10056950 <GAT_att_cmn_for_each_ch_descr+0x34>
10056948:	8928      	ldrh	r0, [r5, #8]
1005694a:	9902      	ldr	r1, [sp, #8]
1005694c:	4288      	cmp	r0, r1
1005694e:	d10c      	bne.n	1005696a <GAT_att_cmn_for_each_ch_descr+0x4e>
10056950:	9803      	ldr	r0, [sp, #12]
10056952:	2800      	cmp	r0, #0
10056954:	d003      	beq.n	1005695e <GAT_att_cmn_for_each_ch_descr+0x42>
10056956:	8968      	ldrh	r0, [r5, #10]
10056958:	9901      	ldr	r1, [sp, #4]
1005695a:	4288      	cmp	r0, r1
1005695c:	d105      	bne.n	1005696a <GAT_att_cmn_for_each_ch_descr+0x4e>
1005695e:	4628      	mov	r0, r5
10056960:	4631      	mov	r1, r6
10056962:	9a04      	ldr	r2, [sp, #16]
10056964:	4790      	blx	r2
10056966:	2800      	cmp	r0, #0
10056968:	d102      	bne.n	10056970 <GAT_att_cmn_for_each_ch_descr+0x54>
1005696a:	3510      	adds	r5, #16
1005696c:	e7e5      	b.n	1005693a <GAT_att_cmn_for_each_ch_descr+0x1e>
1005696e:	2000      	movs	r0, #0
10056970:	b005      	add	sp, #20
10056972:	bdf0      	pop	{r4, r5, r6, r7, pc}

10056974 <__arm_cp.5_0>:
10056974:	20002428 	.word	0x20002428

10056978 <GAT_att_cmn_handle_disconnec_iterate_f>:
10056978:	b5b0      	push	{r4, r5, r7, lr}
1005697a:	4604      	mov	r4, r0
1005697c:	8880      	ldrh	r0, [r0, #4]
1005697e:	2500      	movs	r5, #0
10056980:	05c0      	lsls	r0, r0, #23
10056982:	d401      	bmi.n	10056988 <GAT_att_cmn_handle_disconnec_iterate_f+0x10>
10056984:	4628      	mov	r0, r5
10056986:	e006      	b.n	10056996 <GAT_att_cmn_handle_disconnec_iterate_f+0x1e>
10056988:	8962      	ldrh	r2, [r4, #10]
1005698a:	8921      	ldrh	r1, [r4, #8]
1005698c:	2002      	movs	r0, #2
1005698e:	f00c fd83 	bl	10063498 <aci_gatt_proc_timeout_event_push_noinline>
10056992:	2800      	cmp	r0, #0
10056994:	d000      	beq.n	10056998 <GAT_att_cmn_handle_disconnec_iterate_f+0x20>
10056996:	bdb0      	pop	{r4, r5, r7, pc}
10056998:	8920      	ldrh	r0, [r4, #8]
1005699a:	8961      	ldrh	r1, [r4, #10]
1005699c:	2904      	cmp	r1, #4
1005699e:	d102      	bne.n	100569a6 <GAT_att_cmn_handle_disconnec_iterate_f+0x2e>
100569a0:	f000 f8ac 	bl	10056afc <GAT_att_cmn_disconnection>
100569a4:	e7ee      	b.n	10056984 <GAT_att_cmn_handle_disconnec_iterate_f+0xc>
100569a6:	f000 fb17 	bl	10056fd8 <GAT_att_srv_bearer_close>
100569aa:	8961      	ldrh	r1, [r4, #10]
100569ac:	8920      	ldrh	r0, [r4, #8]
100569ae:	f00d fc7e 	bl	100642ae <GAT_att_clt_bearer_close>
100569b2:	2000      	movs	r0, #0
100569b4:	8120      	strh	r0, [r4, #8]
100569b6:	4909      	ldr	r1, [pc, #36]	@ (100569dc <__arm_cp.6_0>)
100569b8:	6809      	ldr	r1, [r1, #0]
100569ba:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
100569bc:	42a3      	cmp	r3, r4
100569be:	d005      	beq.n	100569cc <GAT_att_cmn_handle_disconnec_iterate_f+0x54>
100569c0:	461a      	mov	r2, r3
100569c2:	691b      	ldr	r3, [r3, #16]
100569c4:	42a3      	cmp	r3, r4
100569c6:	d1fb      	bne.n	100569c0 <GAT_att_cmn_handle_disconnec_iterate_f+0x48>
100569c8:	3210      	adds	r2, #16
100569ca:	e001      	b.n	100569d0 <GAT_att_cmn_handle_disconnec_iterate_f+0x58>
100569cc:	460a      	mov	r2, r1
100569ce:	3234      	adds	r2, #52	@ 0x34
100569d0:	6923      	ldr	r3, [r4, #16]
100569d2:	6013      	str	r3, [r2, #0]
100569d4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
100569d6:	6122      	str	r2, [r4, #16]
100569d8:	630c      	str	r4, [r1, #48]	@ 0x30
100569da:	bdb0      	pop	{r4, r5, r7, pc}

100569dc <__arm_cp.6_0>:
100569dc:	20002428 	.word	0x20002428

100569e0 <GAT_att_cmn_tx_pool_evt_tsk>:
100569e0:	b580      	push	{r7, lr}
100569e2:	2000      	movs	r0, #0
100569e4:	f7fe f9c8 	bl	10054d78 <ACL_pkt_get_available_mem_buffers>
100569e8:	490d      	ldr	r1, [pc, #52]	@ (10056a20 <__arm_cp.8_0>)
100569ea:	8a09      	ldrh	r1, [r1, #16]
100569ec:	3125      	adds	r1, #37	@ 0x25
100569ee:	0949      	lsrs	r1, r1, #5
100569f0:	4288      	cmp	r0, r1
100569f2:	d90f      	bls.n	10056a14 <GAT_att_cmn_tx_pool_evt_tsk+0x34>
100569f4:	1c49      	adds	r1, r1, #1
100569f6:	f7e9 fc23 	bl	10040240 <__udivsi3>
100569fa:	4602      	mov	r2, r0
100569fc:	2042      	movs	r0, #66	@ 0x42
100569fe:	2100      	movs	r1, #0
10056a00:	f00c fe86 	bl	10063710 <aci_gatt_tx_pool_available_event_push_noinline>
10056a04:	2800      	cmp	r0, #0
10056a06:	d004      	beq.n	10056a12 <GAT_att_cmn_tx_pool_evt_tsk+0x32>
10056a08:	2008      	movs	r0, #8
10056a0a:	f00b feb9 	bl	10062780 <tsk_notify_idx>
10056a0e:	f7fb f83a 	bl	10051a86 <BLE_STACK_ProcessRequest>
10056a12:	bd80      	pop	{r7, pc}
10056a14:	2008      	movs	r0, #8
10056a16:	2100      	movs	r1, #0
10056a18:	f00b fec4 	bl	100627a4 <tsk_wait_resource_idx>
10056a1c:	bd80      	pop	{r7, pc}
10056a1e:	46c0      	nop			@ (mov r8, r8)

10056a20 <__arm_cp.8_0>:
10056a20:	20002484 	.word	0x20002484

10056a24 <GAT_att_cmn_rcv>:
10056a24:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10056a26:	460c      	mov	r4, r1
10056a28:	2800      	cmp	r0, #0
10056a2a:	d013      	beq.n	10056a54 <GAT_att_cmn_rcv+0x30>
10056a2c:	8825      	ldrh	r5, [r4, #0]
10056a2e:	4620      	mov	r0, r4
10056a30:	f002 febf 	bl	100597b2 <L2C_get_cid_from_basic_packet_header>
10056a34:	4601      	mov	r1, r0
10056a36:	4628      	mov	r0, r5
10056a38:	f000 f82e 	bl	10056a98 <GAT_att_cmn_get_channel_descr_p>
10056a3c:	2800      	cmp	r0, #0
10056a3e:	d009      	beq.n	10056a54 <GAT_att_cmn_rcv+0x30>
10056a40:	8860      	ldrh	r0, [r4, #2]
10056a42:	2800      	cmp	r0, #0
10056a44:	d006      	beq.n	10056a54 <GAT_att_cmn_rcv+0x30>
10056a46:	89a1      	ldrh	r1, [r4, #12]
10056a48:	291f      	cmp	r1, #31
10056a4a:	d808      	bhi.n	10056a5e <GAT_att_cmn_rcv+0x3a>
10056a4c:	a801      	add	r0, sp, #4
10056a4e:	8001      	strh	r1, [r0, #0]
10056a50:	6860      	ldr	r0, [r4, #4]
10056a52:	e00a      	b.n	10056a6a <GAT_att_cmn_rcv+0x46>
10056a54:	4620      	mov	r0, r4
10056a56:	f7fe f995 	bl	10054d84 <ACL_pkt_release>
10056a5a:	2000      	movs	r0, #0
10056a5c:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10056a5e:	6860      	ldr	r0, [r4, #4]
10056a60:	ad01      	add	r5, sp, #4
10056a62:	462a      	mov	r2, r5
10056a64:	f00a f955 	bl	10060d12 <Mem_Buff_get_buff_off>
10056a68:	8829      	ldrh	r1, [r5, #0]
10056a6a:	1840      	adds	r0, r0, r1
10056a6c:	7900      	ldrb	r0, [r0, #4]
10056a6e:	07c1      	lsls	r1, r0, #31
10056a70:	d104      	bne.n	10056a7c <GAT_att_cmn_rcv+0x58>
10056a72:	281b      	cmp	r0, #27
10056a74:	d008      	beq.n	10056a88 <GAT_att_cmn_rcv+0x64>
10056a76:	281d      	cmp	r0, #29
10056a78:	d006      	beq.n	10056a88 <GAT_att_cmn_rcv+0x64>
10056a7a:	e009      	b.n	10056a90 <GAT_att_cmn_rcv+0x6c>
10056a7c:	281e      	cmp	r0, #30
10056a7e:	d303      	bcc.n	10056a88 <GAT_att_cmn_rcv+0x64>
10056a80:	2102      	movs	r1, #2
10056a82:	4308      	orrs	r0, r1
10056a84:	2823      	cmp	r0, #35	@ 0x23
10056a86:	d103      	bne.n	10056a90 <GAT_att_cmn_rcv+0x6c>
10056a88:	4620      	mov	r0, r4
10056a8a:	f00d fb23 	bl	100640d4 <GAT_att_clt_rcv>
10056a8e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10056a90:	4620      	mov	r0, r4
10056a92:	f000 f927 	bl	10056ce4 <GAT_att_srv_rcv>
10056a96:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10056a98 <GAT_att_cmn_get_channel_descr_p>:
10056a98:	4a07      	ldr	r2, [pc, #28]	@ (10056ab8 <__arm_cp.10_0>)
10056a9a:	6812      	ldr	r2, [r2, #0]
10056a9c:	3234      	adds	r2, #52	@ 0x34
10056a9e:	6812      	ldr	r2, [r2, #0]
10056aa0:	2a00      	cmp	r2, #0
10056aa2:	d007      	beq.n	10056ab4 <GAT_att_cmn_get_channel_descr_p+0x1c>
10056aa4:	8913      	ldrh	r3, [r2, #8]
10056aa6:	4283      	cmp	r3, r0
10056aa8:	d102      	bne.n	10056ab0 <GAT_att_cmn_get_channel_descr_p+0x18>
10056aaa:	8953      	ldrh	r3, [r2, #10]
10056aac:	428b      	cmp	r3, r1
10056aae:	d001      	beq.n	10056ab4 <GAT_att_cmn_get_channel_descr_p+0x1c>
10056ab0:	3210      	adds	r2, #16
10056ab2:	e7f4      	b.n	10056a9e <GAT_att_cmn_get_channel_descr_p+0x6>
10056ab4:	4610      	mov	r0, r2
10056ab6:	4770      	bx	lr

10056ab8 <__arm_cp.10_0>:
10056ab8:	20002428 	.word	0x20002428

10056abc <GAT_att_cmn_connection>:
10056abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10056abe:	4604      	mov	r4, r0
10056ac0:	4e0d      	ldr	r6, [pc, #52]	@ (10056af8 <__arm_cp.11_0>)
10056ac2:	6830      	ldr	r0, [r6, #0]
10056ac4:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
10056ac6:	6929      	ldr	r1, [r5, #16]
10056ac8:	62c1      	str	r1, [r0, #44]	@ 0x2c
10056aca:	882f      	ldrh	r7, [r5, #0]
10056acc:	2100      	movs	r1, #0
10056ace:	2214      	movs	r2, #20
10056ad0:	4628      	mov	r0, r5
10056ad2:	f7fb fdcf 	bl	10052674 <BLEPLAT_MemSet>
10056ad6:	2004      	movs	r0, #4
10056ad8:	8168      	strh	r0, [r5, #10]
10056ada:	2017      	movs	r0, #23
10056adc:	80e8      	strh	r0, [r5, #6]
10056ade:	812c      	strh	r4, [r5, #8]
10056ae0:	802f      	strh	r7, [r5, #0]
10056ae2:	6830      	ldr	r0, [r6, #0]
10056ae4:	6b41      	ldr	r1, [r0, #52]	@ 0x34
10056ae6:	6345      	str	r5, [r0, #52]	@ 0x34
10056ae8:	6129      	str	r1, [r5, #16]
10056aea:	4620      	mov	r0, r4
10056aec:	f000 fa70 	bl	10056fd0 <GAT_att_srv_connection>
10056af0:	4620      	mov	r0, r4
10056af2:	f00d fbd8 	bl	100642a6 <GAT_att_clt_connection>
10056af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10056af8 <__arm_cp.11_0>:
10056af8:	20002428 	.word	0x20002428

10056afc <GAT_att_cmn_disconnection>:
10056afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10056afe:	4604      	mov	r4, r0
10056b00:	f00b fceb 	bl	100624da <smp_sap_forget_device_upon_disconnection>
10056b04:	481c      	ldr	r0, [pc, #112]	@ (10056b78 <__arm_cp.12_0>)
10056b06:	6800      	ldr	r0, [r0, #0]
10056b08:	6b46      	ldr	r6, [r0, #52]	@ 0x34
10056b0a:	2e00      	cmp	r6, #0
10056b0c:	d032      	beq.n	10056b74 <GAT_att_cmn_disconnection+0x78>
10056b0e:	4637      	mov	r7, r6
10056b10:	6936      	ldr	r6, [r6, #16]
10056b12:	8938      	ldrh	r0, [r7, #8]
10056b14:	42a0      	cmp	r0, r4
10056b16:	d1f8      	bne.n	10056b0a <GAT_att_cmn_disconnection+0xe>
10056b18:	2500      	movs	r5, #0
10056b1a:	897a      	ldrh	r2, [r7, #10]
10056b1c:	b2e8      	uxtb	r0, r5
10056b1e:	2803      	cmp	r0, #3
10056b20:	d804      	bhi.n	10056b2c <GAT_att_cmn_disconnection+0x30>
10056b22:	4621      	mov	r1, r4
10056b24:	f000 f82a 	bl	10056b7c <GAT_att_cmn_stop_timer>
10056b28:	1c6d      	adds	r5, r5, #1
10056b2a:	e7f6      	b.n	10056b1a <GAT_att_cmn_disconnection+0x1e>
10056b2c:	4620      	mov	r0, r4
10056b2e:	4611      	mov	r1, r2
10056b30:	f000 fa52 	bl	10056fd8 <GAT_att_srv_bearer_close>
10056b34:	8979      	ldrh	r1, [r7, #10]
10056b36:	4620      	mov	r0, r4
10056b38:	f00d fbb9 	bl	100642ae <GAT_att_clt_bearer_close>
10056b3c:	2000      	movs	r0, #0
10056b3e:	8138      	strh	r0, [r7, #8]
10056b40:	480d      	ldr	r0, [pc, #52]	@ (10056b78 <__arm_cp.12_0>)
10056b42:	6800      	ldr	r0, [r0, #0]
10056b44:	6b42      	ldr	r2, [r0, #52]	@ 0x34
10056b46:	42ba      	cmp	r2, r7
10056b48:	d005      	beq.n	10056b56 <GAT_att_cmn_disconnection+0x5a>
10056b4a:	4611      	mov	r1, r2
10056b4c:	6912      	ldr	r2, [r2, #16]
10056b4e:	42ba      	cmp	r2, r7
10056b50:	d1fb      	bne.n	10056b4a <GAT_att_cmn_disconnection+0x4e>
10056b52:	3110      	adds	r1, #16
10056b54:	e001      	b.n	10056b5a <GAT_att_cmn_disconnection+0x5e>
10056b56:	4601      	mov	r1, r0
10056b58:	3134      	adds	r1, #52	@ 0x34
10056b5a:	693a      	ldr	r2, [r7, #16]
10056b5c:	600a      	str	r2, [r1, #0]
10056b5e:	8979      	ldrh	r1, [r7, #10]
10056b60:	2904      	cmp	r1, #4
10056b62:	d103      	bne.n	10056b6c <GAT_att_cmn_disconnection+0x70>
10056b64:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
10056b66:	6139      	str	r1, [r7, #16]
10056b68:	62c7      	str	r7, [r0, #44]	@ 0x2c
10056b6a:	e7ce      	b.n	10056b0a <GAT_att_cmn_disconnection+0xe>
10056b6c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
10056b6e:	6139      	str	r1, [r7, #16]
10056b70:	6307      	str	r7, [r0, #48]	@ 0x30
10056b72:	e7ca      	b.n	10056b0a <GAT_att_cmn_disconnection+0xe>
10056b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10056b76:	46c0      	nop			@ (mov r8, r8)

10056b78 <__arm_cp.12_0>:
10056b78:	20002428 	.word	0x20002428

10056b7c <GAT_att_cmn_stop_timer>:
10056b7c:	b510      	push	{r4, lr}
10056b7e:	4604      	mov	r4, r0
10056b80:	4608      	mov	r0, r1
10056b82:	4611      	mov	r1, r2
10056b84:	f000 f858 	bl	10056c38 <GAT_att_cmn_get_timer_index>
10056b88:	0080      	lsls	r0, r0, #2
10056b8a:	1900      	adds	r0, r0, r4
10056b8c:	b2c1      	uxtb	r1, r0
10056b8e:	4802      	ldr	r0, [pc, #8]	@ (10056b98 <__arm_cp.13_0>)
10056b90:	6800      	ldr	r0, [r0, #0]
10056b92:	f00b fe68 	bl	10062866 <CST_stop>
10056b96:	bd10      	pop	{r4, pc}

10056b98 <__arm_cp.13_0>:
10056b98:	20002428 	.word	0x20002428

10056b9c <GAT_att_cmn_send>:
10056b9c:	b5b0      	push	{r4, r5, r7, lr}
10056b9e:	460c      	mov	r4, r1
10056ba0:	4605      	mov	r5, r0
10056ba2:	8848      	ldrh	r0, [r1, #2]
10056ba4:	1d00      	adds	r0, r0, #4
10056ba6:	b281      	uxth	r1, r0
10056ba8:	4620      	mov	r0, r4
10056baa:	f7fe f8f4 	bl	10054d96 <ACL_pkt_resize>
10056bae:	4628      	mov	r0, r5
10056bb0:	4621      	mov	r1, r4
10056bb2:	f002 ff29 	bl	10059a08 <L2C_send_frame>
10056bb6:	2800      	cmp	r0, #0
10056bb8:	d004      	beq.n	10056bc4 <GAT_att_cmn_send+0x28>
10056bba:	4620      	mov	r0, r4
10056bbc:	f7fe f8e2 	bl	10054d84 <ACL_pkt_release>
10056bc0:	2081      	movs	r0, #129	@ 0x81
10056bc2:	bdb0      	pop	{r4, r5, r7, pc}
10056bc4:	2000      	movs	r0, #0
10056bc6:	bdb0      	pop	{r4, r5, r7, pc}

10056bc8 <GAT_att_cmn_dscr_flag_check_is_not_set_f>:
10056bc8:	8809      	ldrh	r1, [r1, #0]
10056bca:	8880      	ldrh	r0, [r0, #4]
10056bcc:	4008      	ands	r0, r1
10056bce:	d000      	beq.n	10056bd2 <GAT_att_cmn_dscr_flag_check_is_not_set_f+0xa>
10056bd0:	2086      	movs	r0, #134	@ 0x86
10056bd2:	4770      	bx	lr

10056bd4 <GAT_att_cmn_dscr_flag_set_f>:
10056bd4:	8809      	ldrh	r1, [r1, #0]
10056bd6:	8882      	ldrh	r2, [r0, #4]
10056bd8:	430a      	orrs	r2, r1
10056bda:	8082      	strh	r2, [r0, #4]
10056bdc:	2000      	movs	r0, #0
10056bde:	4770      	bx	lr

10056be0 <GAT_att_cmn_dscr_flag_clear_f>:
10056be0:	8809      	ldrh	r1, [r1, #0]
10056be2:	8882      	ldrh	r2, [r0, #4]
10056be4:	438a      	bics	r2, r1
10056be6:	8082      	strh	r2, [r0, #4]
10056be8:	2000      	movs	r0, #0
10056bea:	4770      	bx	lr

10056bec <GAT_att_cmn_get_conn_index>:
10056bec:	4907      	ldr	r1, [pc, #28]	@ (10056c0c <__arm_cp.22_0>)
10056bee:	6809      	ldr	r1, [r1, #0]
10056bf0:	3134      	adds	r1, #52	@ 0x34
10056bf2:	6809      	ldr	r1, [r1, #0]
10056bf4:	2900      	cmp	r1, #0
10056bf6:	d004      	beq.n	10056c02 <GAT_att_cmn_get_conn_index+0x16>
10056bf8:	890a      	ldrh	r2, [r1, #8]
10056bfa:	4282      	cmp	r2, r0
10056bfc:	d003      	beq.n	10056c06 <GAT_att_cmn_get_conn_index+0x1a>
10056bfe:	3110      	adds	r1, #16
10056c00:	e7f7      	b.n	10056bf2 <GAT_att_cmn_get_conn_index+0x6>
10056c02:	20ff      	movs	r0, #255	@ 0xff
10056c04:	4770      	bx	lr
10056c06:	7808      	ldrb	r0, [r1, #0]
10056c08:	4770      	bx	lr
10056c0a:	46c0      	nop			@ (mov r8, r8)

10056c0c <__arm_cp.22_0>:
10056c0c:	20002428 	.word	0x20002428

10056c10 <GAT_att_cmn_start_timer>:
10056c10:	b510      	push	{r4, lr}
10056c12:	4604      	mov	r4, r0
10056c14:	4608      	mov	r0, r1
10056c16:	4611      	mov	r1, r2
10056c18:	f000 f80e 	bl	10056c38 <GAT_att_cmn_get_timer_index>
10056c1c:	0080      	lsls	r0, r0, #2
10056c1e:	1900      	adds	r0, r0, r4
10056c20:	b2c1      	uxtb	r1, r0
10056c22:	4803      	ldr	r0, [pc, #12]	@ (10056c30 <__arm_cp.23_0>)
10056c24:	6800      	ldr	r0, [r0, #0]
10056c26:	2200      	movs	r2, #0
10056c28:	4b02      	ldr	r3, [pc, #8]	@ (10056c34 <__arm_cp.23_1>)
10056c2a:	f00b fe52 	bl	100628d2 <CST_start>
10056c2e:	bd10      	pop	{r4, pc}

10056c30 <__arm_cp.23_0>:
10056c30:	20002428 	.word	0x20002428

10056c34 <__arm_cp.23_1>:
10056c34:	00007530 	.word	0x00007530

10056c38 <GAT_att_cmn_get_timer_index>:
10056c38:	4a08      	ldr	r2, [pc, #32]	@ (10056c5c <__arm_cp.24_0>)
10056c3a:	6812      	ldr	r2, [r2, #0]
10056c3c:	3234      	adds	r2, #52	@ 0x34
10056c3e:	6812      	ldr	r2, [r2, #0]
10056c40:	2a00      	cmp	r2, #0
10056c42:	d007      	beq.n	10056c54 <GAT_att_cmn_get_timer_index+0x1c>
10056c44:	8913      	ldrh	r3, [r2, #8]
10056c46:	4283      	cmp	r3, r0
10056c48:	d102      	bne.n	10056c50 <GAT_att_cmn_get_timer_index+0x18>
10056c4a:	8953      	ldrh	r3, [r2, #10]
10056c4c:	428b      	cmp	r3, r1
10056c4e:	d003      	beq.n	10056c58 <GAT_att_cmn_get_timer_index+0x20>
10056c50:	3210      	adds	r2, #16
10056c52:	e7f4      	b.n	10056c3e <GAT_att_cmn_get_timer_index+0x6>
10056c54:	20ff      	movs	r0, #255	@ 0xff
10056c56:	4770      	bx	lr
10056c58:	7850      	ldrb	r0, [r2, #1]
10056c5a:	4770      	bx	lr

10056c5c <__arm_cp.24_0>:
10056c5c:	20002428 	.word	0x20002428

10056c60 <GAT_att_cmn_timeout_cb>:
10056c60:	b580      	push	{r7, lr}
10056c62:	0881      	lsrs	r1, r0, #2
10056c64:	480a      	ldr	r0, [pc, #40]	@ (10056c90 <__arm_cp.25_0>)
10056c66:	6800      	ldr	r0, [r0, #0]
10056c68:	3034      	adds	r0, #52	@ 0x34
10056c6a:	6800      	ldr	r0, [r0, #0]
10056c6c:	2800      	cmp	r0, #0
10056c6e:	d00e      	beq.n	10056c8e <GAT_att_cmn_timeout_cb+0x2e>
10056c70:	7842      	ldrb	r2, [r0, #1]
10056c72:	428a      	cmp	r2, r1
10056c74:	d001      	beq.n	10056c7a <GAT_att_cmn_timeout_cb+0x1a>
10056c76:	3010      	adds	r0, #16
10056c78:	e7f7      	b.n	10056c6a <GAT_att_cmn_timeout_cb+0xa>
10056c7a:	2101      	movs	r1, #1
10056c7c:	0209      	lsls	r1, r1, #8
10056c7e:	8882      	ldrh	r2, [r0, #4]
10056c80:	430a      	orrs	r2, r1
10056c82:	8082      	strh	r2, [r0, #4]
10056c84:	2007      	movs	r0, #7
10056c86:	f00b fd7b 	bl	10062780 <tsk_notify_idx>
10056c8a:	f7fa fefc 	bl	10051a86 <BLE_STACK_ProcessRequest>
10056c8e:	bd80      	pop	{r7, pc}

10056c90 <__arm_cp.25_0>:
10056c90:	20002428 	.word	0x20002428

10056c94 <GAT_att_cmn_get_pckt>:
10056c94:	b510      	push	{r4, lr}
10056c96:	8944      	ldrh	r4, [r0, #10]
10056c98:	2c04      	cmp	r4, #4
10056c9a:	d000      	beq.n	10056c9e <GAT_att_cmn_get_pckt+0xa>
10056c9c:	2406      	movs	r4, #6
10056c9e:	1861      	adds	r1, r4, r1
10056ca0:	b28a      	uxth	r2, r1
10056ca2:	8901      	ldrh	r1, [r0, #8]
10056ca4:	2000      	movs	r0, #0
10056ca6:	f7fe f84b 	bl	10054d40 <ACL_pkt_get>
10056caa:	2800      	cmp	r0, #0
10056cac:	d000      	beq.n	10056cb0 <GAT_att_cmn_get_pckt+0x1c>
10056cae:	8184      	strh	r4, [r0, #12]
10056cb0:	bd10      	pop	{r4, pc}
	...

10056cb4 <GAT_att_srv_init>:
10056cb4:	b510      	push	{r4, lr}
10056cb6:	4c08      	ldr	r4, [pc, #32]	@ (10056cd8 <__arm_cp.0_0>)
10056cb8:	6820      	ldr	r0, [r4, #0]
10056cba:	3040      	adds	r0, #64	@ 0x40
10056cbc:	f00b ff52 	bl	10062b64 <ACL_list_init>
10056cc0:	6820      	ldr	r0, [r4, #0]
10056cc2:	3038      	adds	r0, #56	@ 0x38
10056cc4:	f00b ff4e 	bl	10062b64 <ACL_list_init>
10056cc8:	4804      	ldr	r0, [pc, #16]	@ (10056cdc <__arm_cp.0_1>)
10056cca:	4905      	ldr	r1, [pc, #20]	@ (10056ce0 <__arm_cp.0_2>)
10056ccc:	223c      	movs	r2, #60	@ 0x3c
10056cce:	f7fb fcc1 	bl	10052654 <BLEPLAT_MemCpy>
10056cd2:	f001 f8ef 	bl	10057eb4 <GAT_srv_init>
10056cd6:	bd10      	pop	{r4, pc}

10056cd8 <__arm_cp.0_0>:
10056cd8:	20002428 	.word	0x20002428

10056cdc <__arm_cp.0_1>:
10056cdc:	2000242c 	.word	0x2000242c

10056ce0 <__arm_cp.0_2>:
10056ce0:	100695fc 	.word	0x100695fc

10056ce4 <GAT_att_srv_rcv>:
10056ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
10056ce6:	b087      	sub	sp, #28
10056ce8:	4604      	mov	r4, r0
10056cea:	8805      	ldrh	r5, [r0, #0]
10056cec:	f002 fd61 	bl	100597b2 <L2C_get_cid_from_basic_packet_header>
10056cf0:	4601      	mov	r1, r0
10056cf2:	4628      	mov	r0, r5
10056cf4:	f7ff fed0 	bl	10056a98 <GAT_att_cmn_get_channel_descr_p>
10056cf8:	4605      	mov	r5, r0
10056cfa:	4620      	mov	r0, r4
10056cfc:	f000 f858 	bl	10056db0 <GAT_att_cmn_get_opcode>
10056d00:	4606      	mov	r6, r0
10056d02:	f000 f85b 	bl	10056dbc <GAT_att_srv_get_exec_fn_id_by_op>
10056d06:	280f      	cmp	r0, #15
10056d08:	d119      	bne.n	10056d3e <GAT_att_srv_rcv+0x5a>
10056d0a:	2e1e      	cmp	r6, #30
10056d0c:	d047      	beq.n	10056d9e <GAT_att_srv_rcv+0xba>
10056d0e:	2040      	movs	r0, #64	@ 0x40
10056d10:	4030      	ands	r0, r6
10056d12:	d144      	bne.n	10056d9e <GAT_att_srv_rcv+0xba>
10056d14:	2105      	movs	r1, #5
10056d16:	4628      	mov	r0, r5
10056d18:	f7ff ffbc 	bl	10056c94 <GAT_att_cmn_get_pckt>
10056d1c:	2800      	cmp	r0, #0
10056d1e:	d045      	beq.n	10056dac <GAT_att_srv_rcv+0xc8>
10056d20:	4607      	mov	r7, r0
10056d22:	2100      	movs	r1, #0
10056d24:	2206      	movs	r2, #6
10056d26:	4630      	mov	r0, r6
10056d28:	463b      	mov	r3, r7
10056d2a:	f000 fafd 	bl	10057328 <GAT_att_srv_write_err_packet>
10056d2e:	8968      	ldrh	r0, [r5, #10]
10056d30:	4639      	mov	r1, r7
10056d32:	f7ff ff33 	bl	10056b9c <GAT_att_cmn_send>
10056d36:	4607      	mov	r7, r0
10056d38:	2800      	cmp	r0, #0
10056d3a:	d134      	bne.n	10056da6 <GAT_att_srv_rcv+0xc2>
10056d3c:	e02f      	b.n	10056d9e <GAT_att_srv_rcv+0xba>
10056d3e:	9501      	str	r5, [sp, #4]
10056d40:	2500      	movs	r5, #0
10056d42:	2e1e      	cmp	r6, #30
10056d44:	462f      	mov	r7, r5
10056d46:	d016      	beq.n	10056d76 <GAT_att_srv_rcv+0x92>
10056d48:	2040      	movs	r0, #64	@ 0x40
10056d4a:	4006      	ands	r6, r0
10056d4c:	462f      	mov	r7, r5
10056d4e:	d112      	bne.n	10056d76 <GAT_att_srv_rcv+0x92>
10056d50:	9b01      	ldr	r3, [sp, #4]
10056d52:	8898      	ldrh	r0, [r3, #4]
10056d54:	07c0      	lsls	r0, r0, #31
10056d56:	d118      	bne.n	10056d8a <GAT_att_srv_rcv+0xa6>
10056d58:	895a      	ldrh	r2, [r3, #10]
10056d5a:	8919      	ldrh	r1, [r3, #8]
10056d5c:	2600      	movs	r6, #0
10056d5e:	4630      	mov	r0, r6
10056d60:	f7ff ff56 	bl	10056c10 <GAT_att_cmn_start_timer>
10056d64:	4607      	mov	r7, r0
10056d66:	2800      	cmp	r0, #0
10056d68:	d105      	bne.n	10056d76 <GAT_att_srv_rcv+0x92>
10056d6a:	9a01      	ldr	r2, [sp, #4]
10056d6c:	8890      	ldrh	r0, [r2, #4]
10056d6e:	2101      	movs	r1, #1
10056d70:	4301      	orrs	r1, r0
10056d72:	8091      	strh	r1, [r2, #4]
10056d74:	4637      	mov	r7, r6
10056d76:	a802      	add	r0, sp, #8
10056d78:	8005      	strh	r5, [r0, #0]
10056d7a:	9506      	str	r5, [sp, #24]
10056d7c:	9505      	str	r5, [sp, #20]
10056d7e:	9901      	ldr	r1, [sp, #4]
10056d80:	9104      	str	r1, [sp, #16]
10056d82:	9403      	str	r4, [sp, #12]
10056d84:	f000 f854 	bl	10056e30 <GAT_att_srv_run>
10056d88:	e00d      	b.n	10056da6 <GAT_att_srv_rcv+0xc2>
10056d8a:	3308      	adds	r3, #8
10056d8c:	2042      	movs	r0, #66	@ 0x42
10056d8e:	2103      	movs	r1, #3
10056d90:	2202      	movs	r2, #2
10056d92:	f00d f8eb 	bl	10063f6c <aci_hal_fw_error_event_push_noinline>
10056d96:	2800      	cmp	r0, #0
10056d98:	d001      	beq.n	10056d9e <GAT_att_srv_rcv+0xba>
10056d9a:	2784      	movs	r7, #132	@ 0x84
10056d9c:	e003      	b.n	10056da6 <GAT_att_srv_rcv+0xc2>
10056d9e:	4620      	mov	r0, r4
10056da0:	f7fd fff0 	bl	10054d84 <ACL_pkt_release>
10056da4:	2700      	movs	r7, #0
10056da6:	4638      	mov	r0, r7
10056da8:	b007      	add	sp, #28
10056daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
10056dac:	2788      	movs	r7, #136	@ 0x88
10056dae:	e7fa      	b.n	10056da6 <GAT_att_srv_rcv+0xc2>

10056db0 <GAT_att_cmn_get_opcode>:
10056db0:	b580      	push	{r7, lr}
10056db2:	8981      	ldrh	r1, [r0, #12]
10056db4:	f001 f84d 	bl	10057e52 <ACL_pkt_read_8b>
10056db8:	bd80      	pop	{r7, pc}
	...

10056dbc <GAT_att_srv_get_exec_fn_id_by_op>:
10056dbc:	1e81      	subs	r1, r0, #2
10056dbe:	291e      	cmp	r1, #30
10056dc0:	d816      	bhi.n	10056df0 <GAT_att_srv_get_exec_fn_id_by_op+0x34>
10056dc2:	2000      	movs	r0, #0
10056dc4:	4479      	add	r1, pc
10056dc6:	7909      	ldrb	r1, [r1, #4]
10056dc8:	0049      	lsls	r1, r1, #1
10056dca:	448f      	add	pc, r1
10056dcc:	170f1718 	.word	0x170f1718
10056dd0:	171b1719 	.word	0x171b1719
10056dd4:	171f171d 	.word	0x171f171d
10056dd8:	17231721 	.word	0x17231721
10056ddc:	17171725 	.word	0x17171725
10056de0:	17291727 	.word	0x17291727
10056de4:	17171717 	.word	0x17171717
10056de8:	002d172b 	.word	0x002d172b
10056dec:	2001      	movs	r0, #1
10056dee:	4770      	bx	lr
10056df0:	2852      	cmp	r0, #82	@ 0x52
10056df2:	d01b      	beq.n	10056e2c <GAT_att_srv_get_exec_fn_id_by_op+0x70>
10056df4:	28d2      	cmp	r0, #210	@ 0xd2
10056df6:	d101      	bne.n	10056dfc <GAT_att_srv_get_exec_fn_id_by_op+0x40>
10056df8:	200a      	movs	r0, #10
10056dfa:	4770      	bx	lr
10056dfc:	200f      	movs	r0, #15
10056dfe:	4770      	bx	lr
10056e00:	2002      	movs	r0, #2
10056e02:	4770      	bx	lr
10056e04:	2003      	movs	r0, #3
10056e06:	4770      	bx	lr
10056e08:	2004      	movs	r0, #4
10056e0a:	4770      	bx	lr
10056e0c:	2005      	movs	r0, #5
10056e0e:	4770      	bx	lr
10056e10:	2006      	movs	r0, #6
10056e12:	4770      	bx	lr
10056e14:	2007      	movs	r0, #7
10056e16:	4770      	bx	lr
10056e18:	2008      	movs	r0, #8
10056e1a:	4770      	bx	lr
10056e1c:	200b      	movs	r0, #11
10056e1e:	4770      	bx	lr
10056e20:	200c      	movs	r0, #12
10056e22:	4770      	bx	lr
10056e24:	200d      	movs	r0, #13
10056e26:	4770      	bx	lr
10056e28:	200e      	movs	r0, #14
10056e2a:	4770      	bx	lr
10056e2c:	2009      	movs	r0, #9
10056e2e:	4770      	bx	lr

10056e30 <GAT_att_srv_run>:
10056e30:	b5f0      	push	{r4, r5, r6, r7, lr}
10056e32:	b085      	sub	sp, #20
10056e34:	4604      	mov	r4, r0
10056e36:	7800      	ldrb	r0, [r0, #0]
10056e38:	2800      	cmp	r0, #0
10056e3a:	d107      	bne.n	10056e4c <GAT_att_srv_run+0x1c>
10056e3c:	6860      	ldr	r0, [r4, #4]
10056e3e:	f7ff ffb7 	bl	10056db0 <GAT_att_cmn_get_opcode>
10056e42:	7060      	strb	r0, [r4, #1]
10056e44:	68a5      	ldr	r5, [r4, #8]
10056e46:	68e8      	ldr	r0, [r5, #12]
10056e48:	2800      	cmp	r0, #0
10056e4a:	d03c      	beq.n	10056ec6 <GAT_att_srv_run+0x96>
10056e4c:	7865      	ldrb	r5, [r4, #1]
10056e4e:	4628      	mov	r0, r5
10056e50:	f7ff ffb4 	bl	10056dbc <GAT_att_srv_get_exec_fn_id_by_op>
10056e54:	280e      	cmp	r0, #14
10056e56:	d808      	bhi.n	10056e6a <GAT_att_srv_run+0x3a>
10056e58:	0080      	lsls	r0, r0, #2
10056e5a:	495b      	ldr	r1, [pc, #364]	@ (10056fc8 <__arm_cp.4_3>)
10056e5c:	5809      	ldr	r1, [r1, r0]
10056e5e:	2900      	cmp	r1, #0
10056e60:	d003      	beq.n	10056e6a <GAT_att_srv_run+0x3a>
10056e62:	4620      	mov	r0, r4
10056e64:	4788      	blx	r1
10056e66:	4607      	mov	r7, r0
10056e68:	e007      	b.n	10056e7a <GAT_att_srv_run+0x4a>
10056e6a:	68a0      	ldr	r0, [r4, #8]
10056e6c:	68c3      	ldr	r3, [r0, #12]
10056e6e:	2100      	movs	r1, #0
10056e70:	2206      	movs	r2, #6
10056e72:	4628      	mov	r0, r5
10056e74:	f000 fa58 	bl	10057328 <GAT_att_srv_write_err_packet>
10056e78:	2786      	movs	r7, #134	@ 0x86
10056e7a:	6861      	ldr	r1, [r4, #4]
10056e7c:	2900      	cmp	r1, #0
10056e7e:	d019      	beq.n	10056eb4 <GAT_att_srv_run+0x84>
10056e80:	2f88      	cmp	r7, #136	@ 0x88
10056e82:	d003      	beq.n	10056e8c <GAT_att_srv_run+0x5c>
10056e84:	2f84      	cmp	r7, #132	@ 0x84
10056e86:	d00c      	beq.n	10056ea2 <GAT_att_srv_run+0x72>
10056e88:	2f07      	cmp	r7, #7
10056e8a:	d110      	bne.n	10056eae <GAT_att_srv_run+0x7e>
10056e8c:	484f      	ldr	r0, [pc, #316]	@ (10056fcc <__arm_cp.4_4>)
10056e8e:	6800      	ldr	r0, [r0, #0]
10056e90:	3040      	adds	r0, #64	@ 0x40
10056e92:	f00b fe6b 	bl	10062b6c <ACL_list_insert_tail>
10056e96:	2009      	movs	r0, #9
10056e98:	f00b fc72 	bl	10062780 <tsk_notify_idx>
10056e9c:	f7fa fdf3 	bl	10051a86 <BLE_STACK_ProcessRequest>
10056ea0:	e008      	b.n	10056eb4 <GAT_att_srv_run+0x84>
10056ea2:	484a      	ldr	r0, [pc, #296]	@ (10056fcc <__arm_cp.4_4>)
10056ea4:	6800      	ldr	r0, [r0, #0]
10056ea6:	3038      	adds	r0, #56	@ 0x38
10056ea8:	f00b fe60 	bl	10062b6c <ACL_list_insert_tail>
10056eac:	e009      	b.n	10056ec2 <GAT_att_srv_run+0x92>
10056eae:	4608      	mov	r0, r1
10056eb0:	f7fd ff68 	bl	10054d84 <ACL_pkt_release>
10056eb4:	2f86      	cmp	r7, #134	@ 0x86
10056eb6:	d001      	beq.n	10056ebc <GAT_att_srv_run+0x8c>
10056eb8:	2f00      	cmp	r7, #0
10056eba:	d102      	bne.n	10056ec2 <GAT_att_srv_run+0x92>
10056ebc:	68a0      	ldr	r0, [r4, #8]
10056ebe:	f000 fa47 	bl	10057350 <GAT_att_srv_send_response>
10056ec2:	b005      	add	sp, #20
10056ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10056ec6:	6867      	ldr	r7, [r4, #4]
10056ec8:	4638      	mov	r0, r7
10056eca:	f7ff ff71 	bl	10056db0 <GAT_att_cmn_get_opcode>
10056ece:	4606      	mov	r6, r0
10056ed0:	f7ff ff74 	bl	10056dbc <GAT_att_srv_get_exec_fn_id_by_op>
10056ed4:	8879      	ldrh	r1, [r7, #2]
10056ed6:	88ea      	ldrh	r2, [r5, #6]
10056ed8:	2304      	movs	r3, #4
10056eda:	9302      	str	r3, [sp, #8]
10056edc:	2300      	movs	r3, #0
10056ede:	4291      	cmp	r1, r2
10056ee0:	d83e      	bhi.n	10056f60 <GAT_att_srv_run+0x130>
10056ee2:	280e      	cmp	r0, #14
10056ee4:	d83c      	bhi.n	10056f60 <GAT_att_srv_run+0x130>
10056ee6:	9301      	str	r3, [sp, #4]
10056ee8:	0042      	lsls	r2, r0, #1
10056eea:	4b34      	ldr	r3, [pc, #208]	@ (10056fbc <__arm_cp.4_0>)
10056eec:	5a9a      	ldrh	r2, [r3, r2]
10056eee:	4b34      	ldr	r3, [pc, #208]	@ (10056fc0 <__arm_cp.4_1>)
10056ef0:	40c3      	lsrs	r3, r0
10056ef2:	07db      	lsls	r3, r3, #31
10056ef4:	d105      	bne.n	10056f02 <GAT_att_srv_run+0xd2>
10056ef6:	2380      	movs	r3, #128	@ 0x80
10056ef8:	439a      	bics	r2, r3
10056efa:	4291      	cmp	r1, r2
10056efc:	9b01      	ldr	r3, [sp, #4]
10056efe:	d003      	beq.n	10056f08 <GAT_att_srv_run+0xd8>
10056f00:	e02e      	b.n	10056f60 <GAT_att_srv_run+0x130>
10056f02:	4291      	cmp	r1, r2
10056f04:	9b01      	ldr	r3, [sp, #4]
10056f06:	d32b      	bcc.n	10056f60 <GAT_att_srv_run+0x130>
10056f08:	1e41      	subs	r1, r0, #1
10056f0a:	2903      	cmp	r1, #3
10056f0c:	d301      	bcc.n	10056f12 <GAT_att_srv_run+0xe2>
10056f0e:	2807      	cmp	r0, #7
10056f10:	d10d      	bne.n	10056f2e <GAT_att_srv_run+0xfe>
10056f12:	a904      	add	r1, sp, #16
10056f14:	aa03      	add	r2, sp, #12
10056f16:	9202      	str	r2, [sp, #8]
10056f18:	4638      	mov	r0, r7
10056f1a:	460f      	mov	r7, r1
10056f1c:	f000 ff49 	bl	10057db2 <GAT_att_srv_get_handle_range>
10056f20:	883b      	ldrh	r3, [r7, #0]
10056f22:	9802      	ldr	r0, [sp, #8]
10056f24:	8800      	ldrh	r0, [r0, #0]
10056f26:	4283      	cmp	r3, r0
10056f28:	d818      	bhi.n	10056f5c <GAT_att_srv_run+0x12c>
10056f2a:	2b00      	cmp	r3, #0
10056f2c:	d016      	beq.n	10056f5c <GAT_att_srv_run+0x12c>
10056f2e:	6866      	ldr	r6, [r4, #4]
10056f30:	4630      	mov	r0, r6
10056f32:	f7ff ff3d 	bl	10056db0 <GAT_att_cmn_get_opcode>
10056f36:	4607      	mov	r7, r0
10056f38:	8835      	ldrh	r5, [r6, #0]
10056f3a:	4630      	mov	r0, r6
10056f3c:	f002 fc39 	bl	100597b2 <L2C_get_cid_from_basic_packet_header>
10056f40:	4601      	mov	r1, r0
10056f42:	4628      	mov	r0, r5
10056f44:	f7ff fda8 	bl	10056a98 <GAT_att_cmn_get_channel_descr_p>
10056f48:	4605      	mov	r5, r0
10056f4a:	2f1e      	cmp	r7, #30
10056f4c:	d01d      	beq.n	10056f8a <GAT_att_srv_run+0x15a>
10056f4e:	2040      	movs	r0, #64	@ 0x40
10056f50:	4038      	ands	r0, r7
10056f52:	d11a      	bne.n	10056f8a <GAT_att_srv_run+0x15a>
10056f54:	2f16      	cmp	r7, #22
10056f56:	d11b      	bne.n	10056f90 <GAT_att_srv_run+0x160>
10056f58:	8871      	ldrh	r1, [r6, #2]
10056f5a:	e026      	b.n	10056faa <GAT_att_srv_run+0x17a>
10056f5c:	2001      	movs	r0, #1
10056f5e:	9002      	str	r0, [sp, #8]
10056f60:	2786      	movs	r7, #134	@ 0x86
10056f62:	2e1e      	cmp	r6, #30
10056f64:	d089      	beq.n	10056e7a <GAT_att_srv_run+0x4a>
10056f66:	2040      	movs	r0, #64	@ 0x40
10056f68:	4030      	ands	r0, r6
10056f6a:	d186      	bne.n	10056e7a <GAT_att_srv_run+0x4a>
10056f6c:	9301      	str	r3, [sp, #4]
10056f6e:	2105      	movs	r1, #5
10056f70:	4628      	mov	r0, r5
10056f72:	f7ff fe8f 	bl	10056c94 <GAT_att_cmn_get_pckt>
10056f76:	60e8      	str	r0, [r5, #12]
10056f78:	2800      	cmp	r0, #0
10056f7a:	d01d      	beq.n	10056fb8 <GAT_att_srv_run+0x188>
10056f7c:	4603      	mov	r3, r0
10056f7e:	4630      	mov	r0, r6
10056f80:	9901      	ldr	r1, [sp, #4]
10056f82:	9a02      	ldr	r2, [sp, #8]
10056f84:	f000 f9d0 	bl	10057328 <GAT_att_srv_write_err_packet>
10056f88:	e777      	b.n	10056e7a <GAT_att_srv_run+0x4a>
10056f8a:	2000      	movs	r0, #0
10056f8c:	60e8      	str	r0, [r5, #12]
10056f8e:	e75d      	b.n	10056e4c <GAT_att_srv_run+0x1c>
10056f90:	4638      	mov	r0, r7
10056f92:	f7ff ff13 	bl	10056dbc <GAT_att_srv_get_exec_fn_id_by_op>
10056f96:	280e      	cmp	r0, #14
10056f98:	d900      	bls.n	10056f9c <GAT_att_srv_run+0x16c>
10056f9a:	e76d      	b.n	10056e78 <GAT_att_srv_run+0x48>
10056f9c:	0040      	lsls	r0, r0, #1
10056f9e:	4909      	ldr	r1, [pc, #36]	@ (10056fc4 <__arm_cp.4_2>)
10056fa0:	5a09      	ldrh	r1, [r1, r0]
10056fa2:	88e8      	ldrh	r0, [r5, #6]
10056fa4:	4281      	cmp	r1, r0
10056fa6:	d300      	bcc.n	10056faa <GAT_att_srv_run+0x17a>
10056fa8:	4601      	mov	r1, r0
10056faa:	4628      	mov	r0, r5
10056fac:	f7ff fe72 	bl	10056c94 <GAT_att_cmn_get_pckt>
10056fb0:	60e8      	str	r0, [r5, #12]
10056fb2:	2800      	cmp	r0, #0
10056fb4:	d000      	beq.n	10056fb8 <GAT_att_srv_run+0x188>
10056fb6:	e749      	b.n	10056e4c <GAT_att_srv_run+0x1c>
10056fb8:	2788      	movs	r7, #136	@ 0x88
10056fba:	e75e      	b.n	10056e7a <GAT_att_srv_run+0x4a>

10056fbc <__arm_cp.4_0>:
10056fbc:	10069638 	.word	0x10069638

10056fc0 <__arm_cp.4_1>:
10056fc0:	00004fcc 	.word	0x00004fcc

10056fc4 <__arm_cp.4_2>:
10056fc4:	10069656 	.word	0x10069656

10056fc8 <__arm_cp.4_3>:
10056fc8:	2000242c 	.word	0x2000242c

10056fcc <__arm_cp.4_4>:
10056fcc:	20002428 	.word	0x20002428

10056fd0 <GAT_att_srv_connection>:
10056fd0:	b580      	push	{r7, lr}
10056fd2:	f000 ff81 	bl	10057ed8 <GAT_srv_connection>
10056fd6:	bd80      	pop	{r7, pc}

10056fd8 <GAT_att_srv_bearer_close>:
10056fd8:	b570      	push	{r4, r5, r6, lr}
10056fda:	460c      	mov	r4, r1
10056fdc:	4605      	mov	r5, r0
10056fde:	f001 f821 	bl	10058024 <GAT_srv_bearer_close>
10056fe2:	4e07      	ldr	r6, [pc, #28]	@ (10057000 <__arm_cp.6_0>)
10056fe4:	6832      	ldr	r2, [r6, #0]
10056fe6:	3240      	adds	r2, #64	@ 0x40
10056fe8:	4628      	mov	r0, r5
10056fea:	4621      	mov	r1, r4
10056fec:	f000 f80a 	bl	10057004 <GAT_att_srv_flush_rx_pckts>
10056ff0:	6832      	ldr	r2, [r6, #0]
10056ff2:	3238      	adds	r2, #56	@ 0x38
10056ff4:	4628      	mov	r0, r5
10056ff6:	4621      	mov	r1, r4
10056ff8:	f000 f804 	bl	10057004 <GAT_att_srv_flush_rx_pckts>
10056ffc:	bd70      	pop	{r4, r5, r6, pc}
10056ffe:	46c0      	nop			@ (mov r8, r8)

10057000 <__arm_cp.6_0>:
10057000:	20002428 	.word	0x20002428

10057004 <GAT_att_srv_flush_rx_pckts>:
10057004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10057006:	460d      	mov	r5, r1
10057008:	4606      	mov	r6, r0
1005700a:	9200      	str	r2, [sp, #0]
1005700c:	6814      	ldr	r4, [r2, #0]
1005700e:	2c00      	cmp	r4, #0
10057010:	d011      	beq.n	10057036 <GAT_att_srv_flush_rx_pckts+0x32>
10057012:	4627      	mov	r7, r4
10057014:	69e4      	ldr	r4, [r4, #28]
10057016:	8838      	ldrh	r0, [r7, #0]
10057018:	42b0      	cmp	r0, r6
1005701a:	d1f8      	bne.n	1005700e <GAT_att_srv_flush_rx_pckts+0xa>
1005701c:	4638      	mov	r0, r7
1005701e:	f002 fbc8 	bl	100597b2 <L2C_get_cid_from_basic_packet_header>
10057022:	42a8      	cmp	r0, r5
10057024:	d1f3      	bne.n	1005700e <GAT_att_srv_flush_rx_pckts+0xa>
10057026:	9800      	ldr	r0, [sp, #0]
10057028:	4639      	mov	r1, r7
1005702a:	f00b fdaf 	bl	10062b8c <ACL_list_remove>
1005702e:	4638      	mov	r0, r7
10057030:	f7fd fea8 	bl	10054d84 <ACL_pkt_release>
10057034:	e7eb      	b.n	1005700e <GAT_att_srv_flush_rx_pckts+0xa>
10057036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10057038 <GAT_att_srv_process_rx_pckt_tsk>:
10057038:	b5f0      	push	{r4, r5, r6, r7, lr}
1005703a:	b085      	sub	sp, #20
1005703c:	4f0f      	ldr	r7, [pc, #60]	@ (1005707c <__arm_cp.9_0>)
1005703e:	6838      	ldr	r0, [r7, #0]
10057040:	3040      	adds	r0, #64	@ 0x40
10057042:	f00b fdc3 	bl	10062bcc <ACL_list_get_pckt_count>
10057046:	4604      	mov	r4, r0
10057048:	0420      	lsls	r0, r4, #16
1005704a:	d014      	beq.n	10057076 <GAT_att_srv_process_rx_pckt_tsk+0x3e>
1005704c:	466d      	mov	r5, sp
1005704e:	2000      	movs	r0, #0
10057050:	7028      	strb	r0, [r5, #0]
10057052:	6838      	ldr	r0, [r7, #0]
10057054:	3040      	adds	r0, #64	@ 0x40
10057056:	f00b fdaf 	bl	10062bb8 <ACL_list_remove_head>
1005705a:	9001      	str	r0, [sp, #4]
1005705c:	8806      	ldrh	r6, [r0, #0]
1005705e:	f002 fba8 	bl	100597b2 <L2C_get_cid_from_basic_packet_header>
10057062:	4601      	mov	r1, r0
10057064:	4630      	mov	r0, r6
10057066:	f7ff fd17 	bl	10056a98 <GAT_att_cmn_get_channel_descr_p>
1005706a:	9002      	str	r0, [sp, #8]
1005706c:	4628      	mov	r0, r5
1005706e:	f7ff fedf 	bl	10056e30 <GAT_att_srv_run>
10057072:	1e64      	subs	r4, r4, #1
10057074:	e7e8      	b.n	10057048 <GAT_att_srv_process_rx_pckt_tsk+0x10>
10057076:	b005      	add	sp, #20
10057078:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005707a:	46c0      	nop			@ (mov r8, r8)

1005707c <__arm_cp.9_0>:
1005707c:	20002428 	.word	0x20002428

10057080 <GAT_att_srv_hvtx>:
10057080:	b5f0      	push	{r4, r5, r6, r7, lr}
10057082:	b08b      	sub	sp, #44	@ 0x2c
10057084:	930a      	str	r3, [sp, #40]	@ 0x28
10057086:	4614      	mov	r4, r2
10057088:	460d      	mov	r5, r1
1005708a:	4607      	mov	r7, r0
1005708c:	f7ff fd04 	bl	10056a98 <GAT_att_cmn_get_channel_descr_p>
10057090:	2800      	cmp	r0, #0
10057092:	d011      	beq.n	100570b8 <GAT_att_srv_hvtx+0x38>
10057094:	4606      	mov	r6, r0
10057096:	9704      	str	r7, [sp, #16]
10057098:	8880      	ldrh	r0, [r0, #4]
1005709a:	270c      	movs	r7, #12
1005709c:	0741      	lsls	r1, r0, #29
1005709e:	d47f      	bmi.n	100571a0 <GAT_att_srv_hvtx+0x120>
100570a0:	2c02      	cmp	r4, #2
100570a2:	d101      	bne.n	100570a8 <GAT_att_srv_hvtx+0x28>
100570a4:	0780      	lsls	r0, r0, #30
100570a6:	d47b      	bmi.n	100571a0 <GAT_att_srv_hvtx+0x120>
100570a8:	9502      	str	r5, [sp, #8]
100570aa:	9403      	str	r4, [sp, #12]
100570ac:	9c10      	ldr	r4, [sp, #64]	@ 0x40
100570ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100570b0:	2b01      	cmp	r3, #1
100570b2:	d803      	bhi.n	100570bc <GAT_att_srv_hvtx+0x3c>
100570b4:	2503      	movs	r5, #3
100570b6:	e003      	b.n	100570c0 <GAT_att_srv_hvtx+0x40>
100570b8:	2712      	movs	r7, #18
100570ba:	e071      	b.n	100571a0 <GAT_att_srv_hvtx+0x120>
100570bc:	0098      	lsls	r0, r3, #2
100570be:	1c45      	adds	r5, r0, #1
100570c0:	1ca0      	adds	r0, r4, #2
100570c2:	4619      	mov	r1, r3
100570c4:	2900      	cmp	r1, #0
100570c6:	d004      	beq.n	100570d2 <GAT_att_srv_hvtx+0x52>
100570c8:	8802      	ldrh	r2, [r0, #0]
100570ca:	1955      	adds	r5, r2, r5
100570cc:	3008      	adds	r0, #8
100570ce:	1e49      	subs	r1, r1, #1
100570d0:	e7f8      	b.n	100570c4 <GAT_att_srv_hvtx+0x44>
100570d2:	88f0      	ldrh	r0, [r6, #6]
100570d4:	2b02      	cmp	r3, #2
100570d6:	d302      	bcc.n	100570de <GAT_att_srv_hvtx+0x5e>
100570d8:	b2a9      	uxth	r1, r5
100570da:	4281      	cmp	r1, r0
100570dc:	d860      	bhi.n	100571a0 <GAT_att_srv_hvtx+0x120>
100570de:	b2a9      	uxth	r1, r5
100570e0:	4281      	cmp	r1, r0
100570e2:	d300      	bcc.n	100570e6 <GAT_att_srv_hvtx+0x66>
100570e4:	4605      	mov	r5, r0
100570e6:	b2a9      	uxth	r1, r5
100570e8:	4630      	mov	r0, r6
100570ea:	9106      	str	r1, [sp, #24]
100570ec:	f7ff fdd2 	bl	10056c94 <GAT_att_cmn_get_pckt>
100570f0:	2800      	cmp	r0, #0
100570f2:	d00e      	beq.n	10057112 <GAT_att_srv_hvtx+0x92>
100570f4:	4607      	mov	r7, r0
100570f6:	9803      	ldr	r0, [sp, #12]
100570f8:	2802      	cmp	r0, #2
100570fa:	9707      	str	r7, [sp, #28]
100570fc:	9601      	str	r6, [sp, #4]
100570fe:	d10f      	bne.n	10057120 <GAT_att_srv_hvtx+0xa0>
10057100:	89b9      	ldrh	r1, [r7, #12]
10057102:	221d      	movs	r2, #29
10057104:	4638      	mov	r0, r7
10057106:	f000 f889 	bl	1005721c <ACL_pkt_write_8b>
1005710a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005710c:	2801      	cmp	r0, #1
1005710e:	d00f      	beq.n	10057130 <GAT_att_srv_hvtx+0xb0>
10057110:	e04e      	b.n	100571b0 <GAT_att_srv_hvtx+0x130>
10057112:	2008      	movs	r0, #8
10057114:	f00b fb34 	bl	10062780 <tsk_notify_idx>
10057118:	f7fa fcb5 	bl	10051a86 <BLE_STACK_ProcessRequest>
1005711c:	2788      	movs	r7, #136	@ 0x88
1005711e:	e03f      	b.n	100571a0 <GAT_att_srv_hvtx+0x120>
10057120:	89b9      	ldrh	r1, [r7, #12]
10057122:	980a      	ldr	r0, [sp, #40]	@ 0x28
10057124:	2801      	cmp	r0, #1
10057126:	d13e      	bne.n	100571a6 <GAT_att_srv_hvtx+0x126>
10057128:	221b      	movs	r2, #27
1005712a:	4638      	mov	r0, r7
1005712c:	f000 f876 	bl	1005721c <ACL_pkt_write_8b>
10057130:	8822      	ldrh	r2, [r4, #0]
10057132:	89b8      	ldrh	r0, [r7, #12]
10057134:	1c40      	adds	r0, r0, #1
10057136:	b281      	uxth	r1, r0
10057138:	4638      	mov	r0, r7
1005713a:	f7fd fe58 	bl	10054dee <ACL_pkt_write_16b>
1005713e:	6863      	ldr	r3, [r4, #4]
10057140:	89b8      	ldrh	r0, [r7, #12]
10057142:	1ee9      	subs	r1, r5, #3
10057144:	b28a      	uxth	r2, r1
10057146:	1cc0      	adds	r0, r0, #3
10057148:	b281      	uxth	r1, r0
1005714a:	4638      	mov	r0, r7
1005714c:	f7fd fe58 	bl	10054e00 <ACL_pkt_write>
10057150:	9807      	ldr	r0, [sp, #28]
10057152:	8045      	strh	r5, [r0, #2]
10057154:	9d03      	ldr	r5, [sp, #12]
10057156:	2d02      	cmp	r5, #2
10057158:	d10c      	bne.n	10057174 <GAT_att_srv_hvtx+0xf4>
1005715a:	2001      	movs	r0, #1
1005715c:	9904      	ldr	r1, [sp, #16]
1005715e:	9a02      	ldr	r2, [sp, #8]
10057160:	f7ff fd56 	bl	10056c10 <GAT_att_cmn_start_timer>
10057164:	2800      	cmp	r0, #0
10057166:	9c01      	ldr	r4, [sp, #4]
10057168:	d00c      	beq.n	10057184 <GAT_att_srv_hvtx+0x104>
1005716a:	4607      	mov	r7, r0
1005716c:	9807      	ldr	r0, [sp, #28]
1005716e:	f7fd fe09 	bl	10054d84 <ACL_pkt_release>
10057172:	e015      	b.n	100571a0 <GAT_att_srv_hvtx+0x120>
10057174:	07e8      	lsls	r0, r5, #31
10057176:	9c01      	ldr	r4, [sp, #4]
10057178:	d004      	beq.n	10057184 <GAT_att_srv_hvtx+0x104>
1005717a:	9a07      	ldr	r2, [sp, #28]
1005717c:	7a10      	ldrb	r0, [r2, #8]
1005717e:	2108      	movs	r1, #8
10057180:	4301      	orrs	r1, r0
10057182:	7211      	strb	r1, [r2, #8]
10057184:	9802      	ldr	r0, [sp, #8]
10057186:	9907      	ldr	r1, [sp, #28]
10057188:	f7ff fd08 	bl	10056b9c <GAT_att_cmn_send>
1005718c:	4607      	mov	r7, r0
1005718e:	2d02      	cmp	r5, #2
10057190:	d106      	bne.n	100571a0 <GAT_att_srv_hvtx+0x120>
10057192:	2f00      	cmp	r7, #0
10057194:	d104      	bne.n	100571a0 <GAT_att_srv_hvtx+0x120>
10057196:	88a0      	ldrh	r0, [r4, #4]
10057198:	2102      	movs	r1, #2
1005719a:	4301      	orrs	r1, r0
1005719c:	80a1      	strh	r1, [r4, #4]
1005719e:	2700      	movs	r7, #0
100571a0:	4638      	mov	r0, r7
100571a2:	b00b      	add	sp, #44	@ 0x2c
100571a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100571a6:	2223      	movs	r2, #35	@ 0x23
100571a8:	4638      	mov	r0, r7
100571aa:	f000 f837 	bl	1005721c <ACL_pkt_write_8b>
100571ae:	980a      	ldr	r0, [sp, #40]	@ 0x28
100571b0:	1ca7      	adds	r7, r4, #2
100571b2:	2101      	movs	r1, #1
100571b4:	9505      	str	r5, [sp, #20]
100571b6:	2800      	cmp	r0, #0
100571b8:	d0ca      	beq.n	10057150 <GAT_att_srv_hvtx+0xd0>
100571ba:	900a      	str	r0, [sp, #40]	@ 0x28
100571bc:	9d07      	ldr	r5, [sp, #28]
100571be:	89a8      	ldrh	r0, [r5, #12]
100571c0:	1840      	adds	r0, r0, r1
100571c2:	9108      	str	r1, [sp, #32]
100571c4:	b281      	uxth	r1, r0
100571c6:	1ebb      	subs	r3, r7, #2
100571c8:	2402      	movs	r4, #2
100571ca:	4628      	mov	r0, r5
100571cc:	4622      	mov	r2, r4
100571ce:	4e12      	ldr	r6, [pc, #72]	@ (10057218 <__arm_cp.10_0>)
100571d0:	47b0      	blx	r6
100571d2:	89a8      	ldrh	r0, [r5, #12]
100571d4:	9e08      	ldr	r6, [sp, #32]
100571d6:	1830      	adds	r0, r6, r0
100571d8:	1c80      	adds	r0, r0, #2
100571da:	b281      	uxth	r1, r0
100571dc:	4628      	mov	r0, r5
100571de:	9409      	str	r4, [sp, #36]	@ 0x24
100571e0:	4622      	mov	r2, r4
100571e2:	463b      	mov	r3, r7
100571e4:	4c0c      	ldr	r4, [pc, #48]	@ (10057218 <__arm_cp.10_0>)
100571e6:	47a0      	blx	r4
100571e8:	1d31      	adds	r1, r6, #4
100571ea:	89a8      	ldrh	r0, [r5, #12]
100571ec:	1840      	adds	r0, r0, r1
100571ee:	b28e      	uxth	r6, r1
100571f0:	9906      	ldr	r1, [sp, #24]
100571f2:	1b8a      	subs	r2, r1, r6
100571f4:	8839      	ldrh	r1, [r7, #0]
100571f6:	428a      	cmp	r2, r1
100571f8:	db00      	blt.n	100571fc <GAT_att_srv_hvtx+0x17c>
100571fa:	460a      	mov	r2, r1
100571fc:	9909      	ldr	r1, [sp, #36]	@ 0x24
100571fe:	587b      	ldr	r3, [r7, r1]
10057200:	b281      	uxth	r1, r0
10057202:	b294      	uxth	r4, r2
10057204:	4628      	mov	r0, r5
10057206:	4622      	mov	r2, r4
10057208:	4d03      	ldr	r5, [pc, #12]	@ (10057218 <__arm_cp.10_0>)
1005720a:	47a8      	blx	r5
1005720c:	19a1      	adds	r1, r4, r6
1005720e:	3708      	adds	r7, #8
10057210:	980a      	ldr	r0, [sp, #40]	@ 0x28
10057212:	1e40      	subs	r0, r0, #1
10057214:	9d05      	ldr	r5, [sp, #20]
10057216:	e7ce      	b.n	100571b6 <GAT_att_srv_hvtx+0x136>

10057218 <__arm_cp.10_0>:
10057218:	10054e01 	.word	0x10054e01

1005721c <ACL_pkt_write_8b>:
1005721c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005721e:	4614      	mov	r4, r2
10057220:	6840      	ldr	r0, [r0, #4]
10057222:	2920      	cmp	r1, #32
10057224:	d304      	bcc.n	10057230 <ACL_pkt_write_8b+0x14>
10057226:	ad01      	add	r5, sp, #4
10057228:	462a      	mov	r2, r5
1005722a:	f009 fd72 	bl	10060d12 <Mem_Buff_get_buff_off>
1005722e:	8829      	ldrh	r1, [r5, #0]
10057230:	1840      	adds	r0, r0, r1
10057232:	7104      	strb	r4, [r0, #4]
10057234:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10057236 <GAT_att_srv_extract_write_packet_data>:
10057236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10057238:	461d      	mov	r5, r3
1005723a:	4614      	mov	r4, r2
1005723c:	460f      	mov	r7, r1
1005723e:	4606      	mov	r6, r0
10057240:	f7ff fdb6 	bl	10056db0 <GAT_att_cmn_get_opcode>
10057244:	210e      	movs	r1, #14
10057246:	43c9      	mvns	r1, r1
10057248:	28d2      	cmp	r0, #210	@ 0xd2
1005724a:	d000      	beq.n	1005724e <GAT_att_srv_extract_write_packet_data+0x18>
1005724c:	310c      	adds	r1, #12
1005724e:	8870      	ldrh	r0, [r6, #2]
10057250:	1808      	adds	r0, r1, r0
10057252:	b282      	uxth	r2, r0
10057254:	9906      	ldr	r1, [sp, #24]
10057256:	42ba      	cmp	r2, r7
10057258:	d905      	bls.n	10057266 <GAT_att_srv_extract_write_packet_data+0x30>
1005725a:	200d      	movs	r0, #13
1005725c:	7008      	strb	r0, [r1, #0]
1005725e:	2000      	movs	r0, #0
10057260:	8028      	strh	r0, [r5, #0]
10057262:	2786      	movs	r7, #134	@ 0x86
10057264:	e009      	b.n	1005727a <GAT_att_srv_extract_write_packet_data+0x44>
10057266:	2700      	movs	r7, #0
10057268:	700f      	strb	r7, [r1, #0]
1005726a:	8028      	strh	r0, [r5, #0]
1005726c:	89b0      	ldrh	r0, [r6, #12]
1005726e:	1cc0      	adds	r0, r0, #3
10057270:	b281      	uxth	r1, r0
10057272:	4630      	mov	r0, r6
10057274:	4623      	mov	r3, r4
10057276:	f7fd fda1 	bl	10054dbc <ACL_pkt_read>
1005727a:	4638      	mov	r0, r7
1005727c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10057280 <GAT_att_srv_resp>:
10057280:	b5f0      	push	{r4, r5, r6, r7, lr}
10057282:	b089      	sub	sp, #36	@ 0x24
10057284:	461f      	mov	r7, r3
10057286:	9203      	str	r2, [sp, #12]
10057288:	460e      	mov	r6, r1
1005728a:	4605      	mov	r5, r0
1005728c:	f7ff fc04 	bl	10056a98 <GAT_att_cmn_get_channel_descr_p>
10057290:	2800      	cmp	r0, #0
10057292:	d045      	beq.n	10057320 <GAT_att_srv_resp+0xa0>
10057294:	4604      	mov	r4, r0
10057296:	68c0      	ldr	r0, [r0, #12]
10057298:	2800      	cmp	r0, #0
1005729a:	d041      	beq.n	10057320 <GAT_att_srv_resp+0xa0>
1005729c:	9702      	str	r7, [sp, #8]
1005729e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
100572a0:	9001      	str	r0, [sp, #4]
100572a2:	980e      	ldr	r0, [sp, #56]	@ 0x38
100572a4:	9000      	str	r0, [sp, #0]
100572a6:	481f      	ldr	r0, [pc, #124]	@ (10057324 <__arm_cp.13_0>)
100572a8:	6807      	ldr	r7, [r0, #0]
100572aa:	3738      	adds	r7, #56	@ 0x38
100572ac:	683f      	ldr	r7, [r7, #0]
100572ae:	2f00      	cmp	r7, #0
100572b0:	d00f      	beq.n	100572d2 <GAT_att_srv_resp+0x52>
100572b2:	8838      	ldrh	r0, [r7, #0]
100572b4:	42a8      	cmp	r0, r5
100572b6:	d104      	bne.n	100572c2 <GAT_att_srv_resp+0x42>
100572b8:	4638      	mov	r0, r7
100572ba:	f002 fa7a 	bl	100597b2 <L2C_get_cid_from_basic_packet_header>
100572be:	42b0      	cmp	r0, r6
100572c0:	d001      	beq.n	100572c6 <GAT_att_srv_resp+0x46>
100572c2:	371c      	adds	r7, #28
100572c4:	e7f2      	b.n	100572ac <GAT_att_srv_resp+0x2c>
100572c6:	4817      	ldr	r0, [pc, #92]	@ (10057324 <__arm_cp.13_0>)
100572c8:	6800      	ldr	r0, [r0, #0]
100572ca:	3038      	adds	r0, #56	@ 0x38
100572cc:	4639      	mov	r1, r7
100572ce:	f00b fc5d 	bl	10062b8c <ACL_list_remove>
100572d2:	68e0      	ldr	r0, [r4, #12]
100572d4:	f7ff fd6c 	bl	10056db0 <GAT_att_cmn_get_opcode>
100572d8:	1e41      	subs	r1, r0, #1
100572da:	9802      	ldr	r0, [sp, #8]
100572dc:	2800      	cmp	r0, #0
100572de:	d013      	beq.n	10057308 <GAT_att_srv_resp+0x88>
100572e0:	b2c8      	uxtb	r0, r1
100572e2:	281e      	cmp	r0, #30
100572e4:	d007      	beq.n	100572f6 <GAT_att_srv_resp+0x76>
100572e6:	2240      	movs	r2, #64	@ 0x40
100572e8:	4011      	ands	r1, r2
100572ea:	d104      	bne.n	100572f6 <GAT_att_srv_resp+0x76>
100572ec:	68e3      	ldr	r3, [r4, #12]
100572ee:	9903      	ldr	r1, [sp, #12]
100572f0:	9a02      	ldr	r2, [sp, #8]
100572f2:	f000 f819 	bl	10057328 <GAT_att_srv_write_err_packet>
100572f6:	4620      	mov	r0, r4
100572f8:	f000 f82a 	bl	10057350 <GAT_att_srv_send_response>
100572fc:	2f00      	cmp	r7, #0
100572fe:	d00f      	beq.n	10057320 <GAT_att_srv_resp+0xa0>
10057300:	4638      	mov	r0, r7
10057302:	f7fd fd3f 	bl	10054d84 <ACL_pkt_release>
10057306:	e00b      	b.n	10057320 <GAT_att_srv_resp+0xa0>
10057308:	a804      	add	r0, sp, #16
1005730a:	9a00      	ldr	r2, [sp, #0]
1005730c:	8182      	strh	r2, [r0, #12]
1005730e:	7041      	strb	r1, [r0, #1]
10057310:	2101      	movs	r1, #1
10057312:	7001      	strb	r1, [r0, #0]
10057314:	9901      	ldr	r1, [sp, #4]
10057316:	9108      	str	r1, [sp, #32]
10057318:	9406      	str	r4, [sp, #24]
1005731a:	9705      	str	r7, [sp, #20]
1005731c:	f7ff fd88 	bl	10056e30 <GAT_att_srv_run>
10057320:	b009      	add	sp, #36	@ 0x24
10057322:	bdf0      	pop	{r4, r5, r6, r7, pc}

10057324 <__arm_cp.13_0>:
10057324:	20002428 	.word	0x20002428

10057328 <GAT_att_srv_write_err_packet>:
10057328:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005732a:	2b00      	cmp	r3, #0
1005732c:	d00f      	beq.n	1005734e <GAT_att_srv_write_err_packet+0x26>
1005732e:	461c      	mov	r4, r3
10057330:	466b      	mov	r3, sp
10057332:	7099      	strb	r1, [r3, #2]
10057334:	7058      	strb	r0, [r3, #1]
10057336:	2001      	movs	r0, #1
10057338:	7018      	strb	r0, [r3, #0]
1005733a:	711a      	strb	r2, [r3, #4]
1005733c:	0a08      	lsrs	r0, r1, #8
1005733e:	70d8      	strb	r0, [r3, #3]
10057340:	89a1      	ldrh	r1, [r4, #12]
10057342:	2505      	movs	r5, #5
10057344:	4620      	mov	r0, r4
10057346:	462a      	mov	r2, r5
10057348:	f7fd fd5a 	bl	10054e00 <ACL_pkt_write>
1005734c:	8065      	strh	r5, [r4, #2]
1005734e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10057350 <GAT_att_srv_send_response>:
10057350:	b510      	push	{r4, lr}
10057352:	4604      	mov	r4, r0
10057354:	68c0      	ldr	r0, [r0, #12]
10057356:	2800      	cmp	r0, #0
10057358:	d015      	beq.n	10057386 <GAT_att_srv_send_response+0x36>
1005735a:	8841      	ldrh	r1, [r0, #2]
1005735c:	1d09      	adds	r1, r1, #4
1005735e:	b289      	uxth	r1, r1
10057360:	f7fd fd19 	bl	10054d96 <ACL_pkt_resize>
10057364:	68e1      	ldr	r1, [r4, #12]
10057366:	8960      	ldrh	r0, [r4, #10]
10057368:	f7ff fc18 	bl	10056b9c <GAT_att_cmn_send>
1005736c:	2800      	cmp	r0, #0
1005736e:	d108      	bne.n	10057382 <GAT_att_srv_send_response+0x32>
10057370:	8962      	ldrh	r2, [r4, #10]
10057372:	8921      	ldrh	r1, [r4, #8]
10057374:	2000      	movs	r0, #0
10057376:	f7ff fc01 	bl	10056b7c <GAT_att_cmn_stop_timer>
1005737a:	88a0      	ldrh	r0, [r4, #4]
1005737c:	2101      	movs	r1, #1
1005737e:	4388      	bics	r0, r1
10057380:	80a0      	strh	r0, [r4, #4]
10057382:	2000      	movs	r0, #0
10057384:	60e0      	str	r0, [r4, #12]
10057386:	bd10      	pop	{r4, pc}

10057388 <GAT_att_srv_confirmation_pending>:
10057388:	b5e0      	push	{r5, r6, r7, lr}
1005738a:	a801      	add	r0, sp, #4
1005738c:	2102      	movs	r1, #2
1005738e:	8001      	strh	r1, [r0, #0]
10057390:	9000      	str	r0, [sp, #0]
10057392:	2000      	movs	r0, #0
10057394:	4b04      	ldr	r3, [pc, #16]	@ (100573a8 <__arm_cp.16_0>)
10057396:	4601      	mov	r1, r0
10057398:	4602      	mov	r2, r0
1005739a:	f7ff fabf 	bl	1005691c <GAT_att_cmn_for_each_ch_descr>
1005739e:	3886      	subs	r0, #134	@ 0x86
100573a0:	4241      	negs	r1, r0
100573a2:	4148      	adcs	r0, r1
100573a4:	bd8c      	pop	{r2, r3, r7, pc}
100573a6:	46c0      	nop			@ (mov r8, r8)

100573a8 <__arm_cp.16_0>:
100573a8:	10056bc9 	.word	0x10056bc9

100573ac <GAT_att_srv_request_user_pending>:
100573ac:	b510      	push	{r4, lr}
100573ae:	480a      	ldr	r0, [pc, #40]	@ (100573d8 <__arm_cp.17_0>)
100573b0:	6804      	ldr	r4, [r0, #0]
100573b2:	3438      	adds	r4, #56	@ 0x38
100573b4:	6824      	ldr	r4, [r4, #0]
100573b6:	2c00      	cmp	r4, #0
100573b8:	d009      	beq.n	100573ce <GAT_att_srv_request_user_pending+0x22>
100573ba:	4620      	mov	r0, r4
100573bc:	f7ff fcf8 	bl	10056db0 <GAT_att_cmn_get_opcode>
100573c0:	281e      	cmp	r0, #30
100573c2:	d002      	beq.n	100573ca <GAT_att_srv_request_user_pending+0x1e>
100573c4:	2140      	movs	r1, #64	@ 0x40
100573c6:	4008      	ands	r0, r1
100573c8:	d003      	beq.n	100573d2 <GAT_att_srv_request_user_pending+0x26>
100573ca:	341c      	adds	r4, #28
100573cc:	e7f2      	b.n	100573b4 <GAT_att_srv_request_user_pending+0x8>
100573ce:	2000      	movs	r0, #0
100573d0:	bd10      	pop	{r4, pc}
100573d2:	2001      	movs	r0, #1
100573d4:	bd10      	pop	{r4, pc}
100573d6:	46c0      	nop			@ (mov r8, r8)

100573d8 <__arm_cp.17_0>:
100573d8:	20002428 	.word	0x20002428

100573dc <GAT_att_srv_flush_user_pending_list>:
100573dc:	b570      	push	{r4, r5, r6, lr}
100573de:	4d08      	ldr	r5, [pc, #32]	@ (10057400 <__arm_cp.18_0>)
100573e0:	6828      	ldr	r0, [r5, #0]
100573e2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
100573e4:	2c00      	cmp	r4, #0
100573e6:	d00a      	beq.n	100573fe <GAT_att_srv_flush_user_pending_list+0x22>
100573e8:	69e6      	ldr	r6, [r4, #28]
100573ea:	6828      	ldr	r0, [r5, #0]
100573ec:	3038      	adds	r0, #56	@ 0x38
100573ee:	4621      	mov	r1, r4
100573f0:	f00b fbcc 	bl	10062b8c <ACL_list_remove>
100573f4:	4620      	mov	r0, r4
100573f6:	f7fd fcc5 	bl	10054d84 <ACL_pkt_release>
100573fa:	4634      	mov	r4, r6
100573fc:	e7f2      	b.n	100573e4 <GAT_att_srv_flush_user_pending_list+0x8>
100573fe:	bd70      	pop	{r4, r5, r6, pc}

10057400 <__arm_cp.18_0>:
10057400:	20002428 	.word	0x20002428

10057404 <GAT_att_srv_exchange_mtu_exc>:
10057404:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10057406:	4604      	mov	r4, r0
10057408:	6880      	ldr	r0, [r0, #8]
1005740a:	8941      	ldrh	r1, [r0, #10]
1005740c:	2904      	cmp	r1, #4
1005740e:	d11a      	bne.n	10057446 <GAT_att_srv_exchange_mtu_exc+0x42>
10057410:	6860      	ldr	r0, [r4, #4]
10057412:	8981      	ldrh	r1, [r0, #12]
10057414:	1c49      	adds	r1, r1, #1
10057416:	b289      	uxth	r1, r1
10057418:	f7fd fcd9 	bl	10054dce <ACL_pkt_read_16b>
1005741c:	4605      	mov	r5, r0
1005741e:	2817      	cmp	r0, #23
10057420:	d800      	bhi.n	10057424 <GAT_att_srv_exchange_mtu_exc+0x20>
10057422:	2517      	movs	r5, #23
10057424:	4e1d      	ldr	r6, [pc, #116]	@ (1005749c <__arm_cp.19_0>)
10057426:	8a30      	ldrh	r0, [r6, #16]
10057428:	4285      	cmp	r5, r0
1005742a:	d300      	bcc.n	1005742e <GAT_att_srv_exchange_mtu_exc+0x2a>
1005742c:	4605      	mov	r5, r0
1005742e:	68a3      	ldr	r3, [r4, #8]
10057430:	8898      	ldrh	r0, [r3, #4]
10057432:	0700      	lsls	r0, r0, #28
10057434:	d40f      	bmi.n	10057456 <GAT_att_srv_exchange_mtu_exc+0x52>
10057436:	8919      	ldrh	r1, [r3, #8]
10057438:	2002      	movs	r0, #2
1005743a:	462a      	mov	r2, r5
1005743c:	f00c fa66 	bl	1006390c <aci_att_exchange_mtu_resp_event_push_noinline>
10057440:	2800      	cmp	r0, #0
10057442:	d014      	beq.n	1005746e <GAT_att_srv_exchange_mtu_exc+0x6a>
10057444:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
10057446:	68c3      	ldr	r3, [r0, #12]
10057448:	2002      	movs	r0, #2
1005744a:	2100      	movs	r1, #0
1005744c:	2206      	movs	r2, #6
1005744e:	f7ff ff6b 	bl	10057328 <GAT_att_srv_write_err_packet>
10057452:	2086      	movs	r0, #134	@ 0x86
10057454:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
10057456:	88d8      	ldrh	r0, [r3, #6]
10057458:	42a8      	cmp	r0, r5
1005745a:	d00e      	beq.n	1005747a <GAT_att_srv_exchange_mtu_exc+0x76>
1005745c:	3308      	adds	r3, #8
1005745e:	2042      	movs	r0, #66	@ 0x42
10057460:	2103      	movs	r1, #3
10057462:	2202      	movs	r2, #2
10057464:	f00c fd82 	bl	10063f6c <aci_hal_fw_error_event_push_noinline>
10057468:	2800      	cmp	r0, #0
1005746a:	d1eb      	bne.n	10057444 <GAT_att_srv_exchange_mtu_exc+0x40>
1005746c:	e005      	b.n	1005747a <GAT_att_srv_exchange_mtu_exc+0x76>
1005746e:	68a0      	ldr	r0, [r4, #8]
10057470:	80c5      	strh	r5, [r0, #6]
10057472:	8881      	ldrh	r1, [r0, #4]
10057474:	2208      	movs	r2, #8
10057476:	430a      	orrs	r2, r1
10057478:	8082      	strh	r2, [r0, #4]
1005747a:	8a30      	ldrh	r0, [r6, #16]
1005747c:	ab01      	add	r3, sp, #4
1005747e:	7058      	strb	r0, [r3, #1]
10057480:	2503      	movs	r5, #3
10057482:	701d      	strb	r5, [r3, #0]
10057484:	0a00      	lsrs	r0, r0, #8
10057486:	7098      	strb	r0, [r3, #2]
10057488:	68a0      	ldr	r0, [r4, #8]
1005748a:	68c4      	ldr	r4, [r0, #12]
1005748c:	89a1      	ldrh	r1, [r4, #12]
1005748e:	4620      	mov	r0, r4
10057490:	462a      	mov	r2, r5
10057492:	f7fd fcb5 	bl	10054e00 <ACL_pkt_write>
10057496:	8065      	strh	r5, [r4, #2]
10057498:	2000      	movs	r0, #0
1005749a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

1005749c <__arm_cp.19_0>:
1005749c:	20002484 	.word	0x20002484

100574a0 <GAT_att_srv_find_info_exc>:
100574a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100574a2:	b08f      	sub	sp, #60	@ 0x3c
100574a4:	4601      	mov	r1, r0
100574a6:	6840      	ldr	r0, [r0, #4]
100574a8:	9101      	str	r1, [sp, #4]
100574aa:	6889      	ldr	r1, [r1, #8]
100574ac:	68cf      	ldr	r7, [r1, #12]
100574ae:	ad0d      	add	r5, sp, #52	@ 0x34
100574b0:	ac0e      	add	r4, sp, #56	@ 0x38
100574b2:	4629      	mov	r1, r5
100574b4:	4622      	mov	r2, r4
100574b6:	f000 fc7c 	bl	10057db2 <GAT_att_srv_get_handle_range>
100574ba:	8828      	ldrh	r0, [r5, #0]
100574bc:	9007      	str	r0, [sp, #28]
100574be:	f00d fa17 	bl	100648f0 <GAT_att_db_find_from_handle>
100574c2:	4602      	mov	r2, r0
100574c4:	8820      	ldrh	r0, [r4, #0]
100574c6:	9002      	str	r0, [sp, #8]
100574c8:	2500      	movs	r5, #0
100574ca:	462b      	mov	r3, r5
100574cc:	9500      	str	r5, [sp, #0]
100574ce:	9503      	str	r5, [sp, #12]
100574d0:	2a00      	cmp	r2, #0
100574d2:	9506      	str	r5, [sp, #24]
100574d4:	d050      	beq.n	10057578 <GAT_att_srv_find_info_exc+0xd8>
100574d6:	8850      	ldrh	r0, [r2, #2]
100574d8:	9007      	str	r0, [sp, #28]
100574da:	9902      	ldr	r1, [sp, #8]
100574dc:	4288      	cmp	r0, r1
100574de:	d84b      	bhi.n	10057578 <GAT_att_srv_find_info_exc+0xd8>
100574e0:	b2a8      	uxth	r0, r5
100574e2:	18c0      	adds	r0, r0, r3
100574e4:	9901      	ldr	r1, [sp, #4]
100574e6:	6889      	ldr	r1, [r1, #8]
100574e8:	88c9      	ldrh	r1, [r1, #6]
100574ea:	4288      	cmp	r0, r1
100574ec:	d844      	bhi.n	10057578 <GAT_att_srv_find_info_exc+0xd8>
100574ee:	461c      	mov	r4, r3
100574f0:	ad08      	add	r5, sp, #32
100574f2:	9205      	str	r2, [sp, #20]
100574f4:	4610      	mov	r0, r2
100574f6:	4629      	mov	r1, r5
100574f8:	f000 ffba 	bl	10058470 <GAT_srv_get_attr_type>
100574fc:	7c2e      	ldrb	r6, [r5, #16]
100574fe:	9803      	ldr	r0, [sp, #12]
10057500:	0600      	lsls	r0, r0, #24
10057502:	d006      	beq.n	10057512 <GAT_att_srv_find_info_exc+0x72>
10057504:	9800      	ldr	r0, [sp, #0]
10057506:	4286      	cmp	r6, r0
10057508:	d139      	bne.n	1005757e <GAT_att_srv_find_info_exc+0xde>
1005750a:	08c0      	lsrs	r0, r0, #3
1005750c:	9004      	str	r0, [sp, #16]
1005750e:	9d06      	ldr	r5, [sp, #24]
10057510:	e016      	b.n	10057540 <GAT_att_srv_find_info_exc+0xa0>
10057512:	89b9      	ldrh	r1, [r7, #12]
10057514:	2205      	movs	r2, #5
10057516:	4638      	mov	r0, r7
10057518:	f7ff fe80 	bl	1005721c <ACL_pkt_write_8b>
1005751c:	2e10      	cmp	r6, #16
1005751e:	d001      	beq.n	10057524 <GAT_att_srv_find_info_exc+0x84>
10057520:	2202      	movs	r2, #2
10057522:	e000      	b.n	10057526 <GAT_att_srv_find_info_exc+0x86>
10057524:	2201      	movs	r2, #1
10057526:	9d06      	ldr	r5, [sp, #24]
10057528:	89b8      	ldrh	r0, [r7, #12]
1005752a:	1c40      	adds	r0, r0, #1
1005752c:	b281      	uxth	r1, r0
1005752e:	4638      	mov	r0, r7
10057530:	9203      	str	r2, [sp, #12]
10057532:	f7ff fe73 	bl	1005721c <ACL_pkt_write_8b>
10057536:	1cad      	adds	r5, r5, #2
10057538:	08f0      	lsrs	r0, r6, #3
1005753a:	9004      	str	r0, [sp, #16]
1005753c:	1c84      	adds	r4, r0, #2
1005753e:	9600      	str	r6, [sp, #0]
10057540:	89b8      	ldrh	r0, [r7, #12]
10057542:	1940      	adds	r0, r0, r5
10057544:	b281      	uxth	r1, r0
10057546:	4638      	mov	r0, r7
10057548:	9a07      	ldr	r2, [sp, #28]
1005754a:	f7fd fc50 	bl	10054dee <ACL_pkt_write_16b>
1005754e:	89b8      	ldrh	r0, [r7, #12]
10057550:	1828      	adds	r0, r5, r0
10057552:	1c86      	adds	r6, r0, #2
10057554:	a808      	add	r0, sp, #32
10057556:	f00b fb00 	bl	10062b5a <UUID_get_value_p>
1005755a:	4603      	mov	r3, r0
1005755c:	b2b1      	uxth	r1, r6
1005755e:	9804      	ldr	r0, [sp, #16]
10057560:	b2c2      	uxtb	r2, r0
10057562:	4638      	mov	r0, r7
10057564:	f7fd fc4c 	bl	10054e00 <ACL_pkt_write>
10057568:	b2e0      	uxtb	r0, r4
1005756a:	182d      	adds	r5, r5, r0
1005756c:	9805      	ldr	r0, [sp, #20]
1005756e:	f00d fa21 	bl	100649b4 <GAT_att_db_get_next>
10057572:	4602      	mov	r2, r0
10057574:	4623      	mov	r3, r4
10057576:	e7ab      	b.n	100574d0 <GAT_att_srv_find_info_exc+0x30>
10057578:	9803      	ldr	r0, [sp, #12]
1005757a:	0600      	lsls	r0, r0, #24
1005757c:	d003      	beq.n	10057586 <GAT_att_srv_find_info_exc+0xe6>
1005757e:	9806      	ldr	r0, [sp, #24]
10057580:	8078      	strh	r0, [r7, #2]
10057582:	2000      	movs	r0, #0
10057584:	e007      	b.n	10057596 <GAT_att_srv_find_info_exc+0xf6>
10057586:	9807      	ldr	r0, [sp, #28]
10057588:	b281      	uxth	r1, r0
1005758a:	2004      	movs	r0, #4
1005758c:	220a      	movs	r2, #10
1005758e:	463b      	mov	r3, r7
10057590:	f7ff feca 	bl	10057328 <GAT_att_srv_write_err_packet>
10057594:	2086      	movs	r0, #134	@ 0x86
10057596:	b00f      	add	sp, #60	@ 0x3c
10057598:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005759a <GAT_att_srv_find_by_type_val_exc>:
1005759a:	b5f0      	push	{r4, r5, r6, r7, lr}
1005759c:	b091      	sub	sp, #68	@ 0x44
1005759e:	4607      	mov	r7, r0
100575a0:	ac09      	add	r4, sp, #36	@ 0x24
100575a2:	2010      	movs	r0, #16
100575a4:	7420      	strb	r0, [r4, #16]
100575a6:	6878      	ldr	r0, [r7, #4]
100575a8:	8981      	ldrh	r1, [r0, #12]
100575aa:	1d49      	adds	r1, r1, #5
100575ac:	b289      	uxth	r1, r1
100575ae:	f7fd fc0e 	bl	10054dce <ACL_pkt_read_16b>
100575b2:	81a0      	strh	r0, [r4, #12]
100575b4:	6878      	ldr	r0, [r7, #4]
100575b6:	ae0f      	add	r6, sp, #60	@ 0x3c
100575b8:	ad0e      	add	r5, sp, #56	@ 0x38
100575ba:	4631      	mov	r1, r6
100575bc:	462a      	mov	r2, r5
100575be:	f000 fbf8 	bl	10057db2 <GAT_att_srv_get_handle_range>
100575c2:	8836      	ldrh	r6, [r6, #0]
100575c4:	6878      	ldr	r0, [r7, #4]
100575c6:	9706      	str	r7, [sp, #24]
100575c8:	68b9      	ldr	r1, [r7, #8]
100575ca:	8844      	ldrh	r4, [r0, #2]
100575cc:	68c8      	ldr	r0, [r1, #12]
100575ce:	8981      	ldrh	r1, [r0, #12]
100575d0:	2207      	movs	r2, #7
100575d2:	9002      	str	r0, [sp, #8]
100575d4:	f7ff fe22 	bl	1005721c <ACL_pkt_write_8b>
100575d8:	1fe0      	subs	r0, r4, #7
100575da:	8829      	ldrh	r1, [r5, #0]
100575dc:	9104      	str	r1, [sp, #16]
100575de:	2101      	movs	r1, #1
100575e0:	9105      	str	r1, [sp, #20]
100575e2:	b280      	uxth	r0, r0
100575e4:	9003      	str	r0, [sp, #12]
100575e6:	9601      	str	r6, [sp, #4]
100575e8:	9805      	ldr	r0, [sp, #20]
100575ea:	b287      	uxth	r7, r0
100575ec:	1d3c      	adds	r4, r7, #4
100575ee:	9806      	ldr	r0, [sp, #24]
100575f0:	6880      	ldr	r0, [r0, #8]
100575f2:	88c0      	ldrh	r0, [r0, #6]
100575f4:	4284      	cmp	r4, r0
100575f6:	d83c      	bhi.n	10057672 <GAT_att_srv_find_by_type_val_exc+0xd8>
100575f8:	b2b0      	uxth	r0, r6
100575fa:	aa09      	add	r2, sp, #36	@ 0x24
100575fc:	9904      	ldr	r1, [sp, #16]
100575fe:	f001 faa7 	bl	10058b50 <GAT_srv_find_by_type_attr_p>
10057602:	2800      	cmp	r0, #0
10057604:	d035      	beq.n	10057672 <GAT_att_srv_find_by_type_val_exc+0xd8>
10057606:	4605      	mov	r5, r0
10057608:	a810      	add	r0, sp, #64	@ 0x40
1005760a:	9000      	str	r0, [sp, #0]
1005760c:	2200      	movs	r2, #0
1005760e:	ab08      	add	r3, sp, #32
10057610:	9806      	ldr	r0, [sp, #24]
10057612:	4629      	mov	r1, r5
10057614:	f000 fbe0 	bl	10057dd8 <GAT_att_srv_value_read>
10057618:	2886      	cmp	r0, #134	@ 0x86
1005761a:	d028      	beq.n	1005766e <GAT_att_srv_find_by_type_val_exc+0xd4>
1005761c:	2800      	cmp	r0, #0
1005761e:	d136      	bne.n	1005768e <GAT_att_srv_find_by_type_val_exc+0xf4>
10057620:	886e      	ldrh	r6, [r5, #2]
10057622:	9808      	ldr	r0, [sp, #32]
10057624:	6843      	ldr	r3, [r0, #4]
10057626:	9806      	ldr	r0, [sp, #24]
10057628:	6840      	ldr	r0, [r0, #4]
1005762a:	8981      	ldrh	r1, [r0, #12]
1005762c:	1dc9      	adds	r1, r1, #7
1005762e:	b289      	uxth	r1, r1
10057630:	9f03      	ldr	r7, [sp, #12]
10057632:	463a      	mov	r2, r7
10057634:	f7fd fbb9 	bl	10054daa <ACL_pkt_cmp>
10057638:	9908      	ldr	r1, [sp, #32]
1005763a:	8809      	ldrh	r1, [r1, #0]
1005763c:	42b9      	cmp	r1, r7
1005763e:	d116      	bne.n	1005766e <GAT_att_srv_find_by_type_val_exc+0xd4>
10057640:	2800      	cmp	r0, #0
10057642:	d114      	bne.n	1005766e <GAT_att_srv_find_by_type_val_exc+0xd4>
10057644:	af07      	add	r7, sp, #28
10057646:	703e      	strb	r6, [r7, #0]
10057648:	0a30      	lsrs	r0, r6, #8
1005764a:	7078      	strb	r0, [r7, #1]
1005764c:	4628      	mov	r0, r5
1005764e:	f000 ff37 	bl	100584c0 <GAT_srv_get_att_group_end_handle>
10057652:	4606      	mov	r6, r0
10057654:	70b8      	strb	r0, [r7, #2]
10057656:	0a00      	lsrs	r0, r0, #8
10057658:	70f8      	strb	r0, [r7, #3]
1005765a:	9802      	ldr	r0, [sp, #8]
1005765c:	8981      	ldrh	r1, [r0, #12]
1005765e:	9a05      	ldr	r2, [sp, #20]
10057660:	1889      	adds	r1, r1, r2
10057662:	b289      	uxth	r1, r1
10057664:	2204      	movs	r2, #4
10057666:	463b      	mov	r3, r7
10057668:	f7fd fbca 	bl	10054e00 <ACL_pkt_write>
1005766c:	9405      	str	r4, [sp, #20]
1005766e:	1c76      	adds	r6, r6, #1
10057670:	e7ba      	b.n	100575e8 <GAT_att_srv_find_by_type_val_exc+0x4e>
10057672:	2f01      	cmp	r7, #1
10057674:	d107      	bne.n	10057686 <GAT_att_srv_find_by_type_val_exc+0xec>
10057676:	2006      	movs	r0, #6
10057678:	220a      	movs	r2, #10
1005767a:	9901      	ldr	r1, [sp, #4]
1005767c:	9b02      	ldr	r3, [sp, #8]
1005767e:	f7ff fe53 	bl	10057328 <GAT_att_srv_write_err_packet>
10057682:	2086      	movs	r0, #134	@ 0x86
10057684:	e003      	b.n	1005768e <GAT_att_srv_find_by_type_val_exc+0xf4>
10057686:	9802      	ldr	r0, [sp, #8]
10057688:	9905      	ldr	r1, [sp, #20]
1005768a:	8041      	strh	r1, [r0, #2]
1005768c:	2000      	movs	r0, #0
1005768e:	b011      	add	sp, #68	@ 0x44
10057690:	bdf0      	pop	{r4, r5, r6, r7, pc}

10057692 <GAT_att_srv_read_by_type_exc>:
10057692:	b5f0      	push	{r4, r5, r6, r7, lr}
10057694:	b097      	sub	sp, #92	@ 0x5c
10057696:	4604      	mov	r4, r0
10057698:	6840      	ldr	r0, [r0, #4]
1005769a:	a915      	add	r1, sp, #84	@ 0x54
1005769c:	aa14      	add	r2, sp, #80	@ 0x50
1005769e:	f000 fb88 	bl	10057db2 <GAT_att_srv_get_handle_range>
100576a2:	940a      	str	r4, [sp, #40]	@ 0x28
100576a4:	6860      	ldr	r0, [r4, #4]
100576a6:	8981      	ldrh	r1, [r0, #12]
100576a8:	1d49      	adds	r1, r1, #5
100576aa:	8842      	ldrh	r2, [r0, #2]
100576ac:	b289      	uxth	r1, r1
100576ae:	2a07      	cmp	r2, #7
100576b0:	d105      	bne.n	100576be <GAT_att_srv_read_by_type_exc+0x2c>
100576b2:	f7fd fb8c 	bl	10054dce <ACL_pkt_read_16b>
100576b6:	a90f      	add	r1, sp, #60	@ 0x3c
100576b8:	8188      	strh	r0, [r1, #12]
100576ba:	2010      	movs	r0, #16
100576bc:	e004      	b.n	100576c8 <GAT_att_srv_read_by_type_exc+0x36>
100576be:	2210      	movs	r2, #16
100576c0:	ab0f      	add	r3, sp, #60	@ 0x3c
100576c2:	f7fd fb7b 	bl	10054dbc <ACL_pkt_read>
100576c6:	2080      	movs	r0, #128	@ 0x80
100576c8:	a90f      	add	r1, sp, #60	@ 0x3c
100576ca:	7408      	strb	r0, [r1, #16]
100576cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
100576ce:	7840      	ldrb	r0, [r0, #1]
100576d0:	2810      	cmp	r0, #16
100576d2:	d001      	beq.n	100576d8 <GAT_att_srv_read_by_type_exc+0x46>
100576d4:	2102      	movs	r1, #2
100576d6:	e000      	b.n	100576da <GAT_att_srv_read_by_type_exc+0x48>
100576d8:	2104      	movs	r1, #4
100576da:	9107      	str	r1, [sp, #28]
100576dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
100576de:	6891      	ldr	r1, [r2, #8]
100576e0:	68cc      	ldr	r4, [r1, #12]
100576e2:	88cb      	ldrh	r3, [r1, #6]
100576e4:	9305      	str	r3, [sp, #20]
100576e6:	7812      	ldrb	r2, [r2, #0]
100576e8:	2a00      	cmp	r2, #0
100576ea:	9404      	str	r4, [sp, #16]
100576ec:	d00a      	beq.n	10057704 <GAT_att_srv_read_by_type_exc+0x72>
100576ee:	8865      	ldrh	r5, [r4, #2]
100576f0:	2d02      	cmp	r5, #2
100576f2:	d315      	bcc.n	10057720 <GAT_att_srv_read_by_type_exc+0x8e>
100576f4:	89a0      	ldrh	r0, [r4, #12]
100576f6:	1c40      	adds	r0, r0, #1
100576f8:	b281      	uxth	r1, r0
100576fa:	4620      	mov	r0, r4
100576fc:	f000 fba9 	bl	10057e52 <ACL_pkt_read_8b>
10057700:	4606      	mov	r6, r0
10057702:	e00e      	b.n	10057722 <GAT_att_srv_read_by_type_exc+0x90>
10057704:	aa15      	add	r2, sp, #84	@ 0x54
10057706:	8815      	ldrh	r5, [r2, #0]
10057708:	2810      	cmp	r0, #16
1005770a:	d112      	bne.n	10057732 <GAT_att_srv_read_by_type_exc+0xa0>
1005770c:	a80f      	add	r0, sp, #60	@ 0x3c
1005770e:	f001 f981 	bl	10058a14 <GAT_srv_is_supported_grouping_type>
10057712:	2800      	cmp	r0, #0
10057714:	d100      	bne.n	10057718 <GAT_att_srv_read_by_type_exc+0x86>
10057716:	e0b8      	b.n	1005788a <GAT_att_srv_read_by_type_exc+0x1f8>
10057718:	9508      	str	r5, [sp, #32]
1005771a:	89a1      	ldrh	r1, [r4, #12]
1005771c:	2211      	movs	r2, #17
1005771e:	e01b      	b.n	10057758 <GAT_att_srv_read_by_type_exc+0xc6>
10057720:	2600      	movs	r6, #0
10057722:	89a0      	ldrh	r0, [r4, #12]
10057724:	1940      	adds	r0, r0, r5
10057726:	b281      	uxth	r1, r0
10057728:	4620      	mov	r0, r4
1005772a:	f7fd fb50 	bl	10054dce <ACL_pkt_read_16b>
1005772e:	9008      	str	r0, [sp, #32]
10057730:	e018      	b.n	10057764 <GAT_att_srv_read_by_type_exc+0xd2>
10057732:	a80b      	add	r0, sp, #44	@ 0x2c
10057734:	8105      	strh	r5, [r0, #8]
10057736:	2202      	movs	r2, #2
10057738:	7102      	strb	r2, [r0, #4]
1005773a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
1005773c:	8142      	strh	r2, [r0, #10]
1005773e:	910b      	str	r1, [sp, #44]	@ 0x2c
10057740:	a90f      	add	r1, sp, #60	@ 0x3c
10057742:	910e      	str	r1, [sp, #56]	@ 0x38
10057744:	f001 f9a8 	bl	10058a98 <GAT_srv_check_change_aware>
10057748:	2886      	cmp	r0, #134	@ 0x86
1005774a:	d102      	bne.n	10057752 <GAT_att_srv_read_by_type_exc+0xc0>
1005774c:	a816      	add	r0, sp, #88	@ 0x58
1005774e:	2212      	movs	r2, #18
10057750:	e09d      	b.n	1005788e <GAT_att_srv_read_by_type_exc+0x1fc>
10057752:	9508      	str	r5, [sp, #32]
10057754:	89a1      	ldrh	r1, [r4, #12]
10057756:	2209      	movs	r2, #9
10057758:	4620      	mov	r0, r4
1005775a:	f7ff fd5f 	bl	1005721c <ACL_pkt_write_8b>
1005775e:	2501      	movs	r5, #1
10057760:	8065      	strh	r5, [r4, #2]
10057762:	2600      	movs	r6, #0
10057764:	9805      	ldr	r0, [sp, #20]
10057766:	1e80      	subs	r0, r0, #2
10057768:	9001      	str	r0, [sp, #4]
1005776a:	a814      	add	r0, sp, #80	@ 0x50
1005776c:	8800      	ldrh	r0, [r0, #0]
1005776e:	9003      	str	r0, [sp, #12]
10057770:	9609      	str	r6, [sp, #36]	@ 0x24
10057772:	b2f6      	uxtb	r6, r6
10057774:	9506      	str	r5, [sp, #24]
10057776:	b2af      	uxth	r7, r5
10057778:	19b8      	adds	r0, r7, r6
1005777a:	9905      	ldr	r1, [sp, #20]
1005777c:	4288      	cmp	r0, r1
1005777e:	d874      	bhi.n	1005786a <GAT_att_srv_read_by_type_exc+0x1d8>
10057780:	9808      	ldr	r0, [sp, #32]
10057782:	b285      	uxth	r5, r0
10057784:	aa0f      	add	r2, sp, #60	@ 0x3c
10057786:	4628      	mov	r0, r5
10057788:	9903      	ldr	r1, [sp, #12]
1005778a:	f001 f9e1 	bl	10058b50 <GAT_srv_find_by_type_attr_p>
1005778e:	2800      	cmp	r0, #0
10057790:	d06b      	beq.n	1005786a <GAT_att_srv_read_by_type_exc+0x1d8>
10057792:	4604      	mov	r4, r0
10057794:	9502      	str	r5, [sp, #8]
10057796:	a816      	add	r0, sp, #88	@ 0x58
10057798:	9000      	str	r0, [sp, #0]
1005779a:	2500      	movs	r5, #0
1005779c:	ab0b      	add	r3, sp, #44	@ 0x2c
1005779e:	980a      	ldr	r0, [sp, #40]	@ 0x28
100577a0:	4621      	mov	r1, r4
100577a2:	462a      	mov	r2, r5
100577a4:	f000 fb18 	bl	10057dd8 <GAT_att_srv_value_read>
100577a8:	2800      	cmp	r0, #0
100577aa:	d14f      	bne.n	1005784c <GAT_att_srv_read_by_type_exc+0x1ba>
100577ac:	980b      	ldr	r0, [sp, #44]	@ 0x2c
100577ae:	8800      	ldrh	r0, [r0, #0]
100577b0:	9907      	ldr	r1, [sp, #28]
100577b2:	1809      	adds	r1, r1, r0
100577b4:	2f01      	cmp	r7, #1
100577b6:	d111      	bne.n	100577dc <GAT_att_srv_read_by_type_exc+0x14a>
100577b8:	29ff      	cmp	r1, #255	@ 0xff
100577ba:	d300      	bcc.n	100577be <GAT_att_srv_read_by_type_exc+0x12c>
100577bc:	21ff      	movs	r1, #255	@ 0xff
100577be:	9801      	ldr	r0, [sp, #4]
100577c0:	4281      	cmp	r1, r0
100577c2:	d300      	bcc.n	100577c6 <GAT_att_srv_read_by_type_exc+0x134>
100577c4:	9901      	ldr	r1, [sp, #4]
100577c6:	9109      	str	r1, [sp, #36]	@ 0x24
100577c8:	b2ca      	uxtb	r2, r1
100577ca:	9e04      	ldr	r6, [sp, #16]
100577cc:	89b0      	ldrh	r0, [r6, #12]
100577ce:	1c40      	adds	r0, r0, #1
100577d0:	b281      	uxth	r1, r0
100577d2:	4630      	mov	r0, r6
100577d4:	f7ff fd22 	bl	1005721c <ACL_pkt_write_8b>
100577d8:	2702      	movs	r7, #2
100577da:	e003      	b.n	100577e4 <GAT_att_srv_read_by_type_exc+0x152>
100577dc:	42b1      	cmp	r1, r6
100577de:	9e04      	ldr	r6, [sp, #16]
100577e0:	9f06      	ldr	r7, [sp, #24]
100577e2:	d15c      	bne.n	1005789e <GAT_att_srv_read_by_type_exc+0x20c>
100577e4:	8865      	ldrh	r5, [r4, #2]
100577e6:	4620      	mov	r0, r4
100577e8:	f000 fe6a 	bl	100584c0 <GAT_srv_get_att_group_end_handle>
100577ec:	9008      	str	r0, [sp, #32]
100577ee:	89b0      	ldrh	r0, [r6, #12]
100577f0:	19c0      	adds	r0, r0, r7
100577f2:	b281      	uxth	r1, r0
100577f4:	4630      	mov	r0, r6
100577f6:	462a      	mov	r2, r5
100577f8:	f7fd faf9 	bl	10054dee <ACL_pkt_write_16b>
100577fc:	9807      	ldr	r0, [sp, #28]
100577fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
10057800:	1a0a      	subs	r2, r1, r0
10057802:	463c      	mov	r4, r7
10057804:	1cbf      	adds	r7, r7, #2
10057806:	980a      	ldr	r0, [sp, #40]	@ 0x28
10057808:	7840      	ldrb	r0, [r0, #1]
1005780a:	2810      	cmp	r0, #16
1005780c:	d10a      	bne.n	10057824 <GAT_att_srv_read_by_type_exc+0x192>
1005780e:	89b0      	ldrh	r0, [r6, #12]
10057810:	19c0      	adds	r0, r0, r7
10057812:	b281      	uxth	r1, r0
10057814:	4630      	mov	r0, r6
10057816:	9d08      	ldr	r5, [sp, #32]
10057818:	4617      	mov	r7, r2
1005781a:	462a      	mov	r2, r5
1005781c:	f7fd fae7 	bl	10054dee <ACL_pkt_write_16b>
10057820:	463a      	mov	r2, r7
10057822:	1d27      	adds	r7, r4, #4
10057824:	462c      	mov	r4, r5
10057826:	89b0      	ldrh	r0, [r6, #12]
10057828:	19c0      	adds	r0, r0, r7
1005782a:	b281      	uxth	r1, r0
1005782c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005782e:	6843      	ldr	r3, [r0, #4]
10057830:	b2d5      	uxtb	r5, r2
10057832:	4630      	mov	r0, r6
10057834:	462a      	mov	r2, r5
10057836:	f7fd fae3 	bl	10054e00 <ACL_pkt_write>
1005783a:	197d      	adds	r5, r7, r5
1005783c:	8075      	strh	r5, [r6, #2]
1005783e:	2002      	movs	r0, #2
10057840:	990a      	ldr	r1, [sp, #40]	@ 0x28
10057842:	7008      	strb	r0, [r1, #0]
10057844:	1c60      	adds	r0, r4, #1
10057846:	9008      	str	r0, [sp, #32]
10057848:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1005784a:	e791      	b.n	10057770 <GAT_att_srv_read_by_type_exc+0xde>
1005784c:	2886      	cmp	r0, #134	@ 0x86
1005784e:	9a06      	ldr	r2, [sp, #24]
10057850:	d016      	beq.n	10057880 <GAT_att_srv_read_by_type_exc+0x1ee>
10057852:	2884      	cmp	r0, #132	@ 0x84
10057854:	4605      	mov	r5, r0
10057856:	9804      	ldr	r0, [sp, #16]
10057858:	d121      	bne.n	1005789e <GAT_att_srv_read_by_type_exc+0x20c>
1005785a:	8981      	ldrh	r1, [r0, #12]
1005785c:	1889      	adds	r1, r1, r2
1005785e:	b289      	uxth	r1, r1
10057860:	9a02      	ldr	r2, [sp, #8]
10057862:	f7fd fac4 	bl	10054dee <ACL_pkt_write_16b>
10057866:	2584      	movs	r5, #132	@ 0x84
10057868:	e019      	b.n	1005789e <GAT_att_srv_read_by_type_exc+0x20c>
1005786a:	2f01      	cmp	r7, #1
1005786c:	d106      	bne.n	1005787c <GAT_att_srv_read_by_type_exc+0x1ea>
1005786e:	a816      	add	r0, sp, #88	@ 0x58
10057870:	220a      	movs	r2, #10
10057872:	7002      	strb	r2, [r0, #0]
10057874:	a815      	add	r0, sp, #84	@ 0x54
10057876:	8805      	ldrh	r5, [r0, #0]
10057878:	9c04      	ldr	r4, [sp, #16]
1005787a:	e009      	b.n	10057890 <GAT_att_srv_read_by_type_exc+0x1fe>
1005787c:	2500      	movs	r5, #0
1005787e:	e00e      	b.n	1005789e <GAT_att_srv_read_by_type_exc+0x20c>
10057880:	a816      	add	r0, sp, #88	@ 0x58
10057882:	7802      	ldrb	r2, [r0, #0]
10057884:	9c04      	ldr	r4, [sp, #16]
10057886:	9d08      	ldr	r5, [sp, #32]
10057888:	e002      	b.n	10057890 <GAT_att_srv_read_by_type_exc+0x1fe>
1005788a:	a816      	add	r0, sp, #88	@ 0x58
1005788c:	2210      	movs	r2, #16
1005788e:	7002      	strb	r2, [r0, #0]
10057890:	980a      	ldr	r0, [sp, #40]	@ 0x28
10057892:	7840      	ldrb	r0, [r0, #1]
10057894:	b2a9      	uxth	r1, r5
10057896:	4623      	mov	r3, r4
10057898:	f7ff fd46 	bl	10057328 <GAT_att_srv_write_err_packet>
1005789c:	2586      	movs	r5, #134	@ 0x86
1005789e:	4628      	mov	r0, r5
100578a0:	b017      	add	sp, #92	@ 0x5c
100578a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100578a4 <GAT_att_srv_read_exc>:
100578a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100578a6:	b08b      	sub	sp, #44	@ 0x2c
100578a8:	4605      	mov	r5, r0
100578aa:	6880      	ldr	r0, [r0, #8]
100578ac:	68c4      	ldr	r4, [r0, #12]
100578ae:	88c7      	ldrh	r7, [r0, #6]
100578b0:	7828      	ldrb	r0, [r5, #0]
100578b2:	2800      	cmp	r0, #0
100578b4:	d024      	beq.n	10057900 <GAT_att_srv_read_exc+0x5c>
100578b6:	462e      	mov	r6, r5
100578b8:	360c      	adds	r6, #12
100578ba:	9605      	str	r6, [sp, #20]
100578bc:	6868      	ldr	r0, [r5, #4]
100578be:	8980      	ldrh	r0, [r0, #12]
100578c0:	1c40      	adds	r0, r0, #1
100578c2:	b281      	uxth	r1, r0
100578c4:	2204      	movs	r2, #4
100578c6:	ab04      	add	r3, sp, #16
100578c8:	4620      	mov	r0, r4
100578ca:	f7fd fa77 	bl	10054dbc <ACL_pkt_read>
100578ce:	8830      	ldrh	r0, [r6, #0]
100578d0:	7869      	ldrb	r1, [r5, #1]
100578d2:	1e7f      	subs	r7, r7, #1
100578d4:	290c      	cmp	r1, #12
100578d6:	d103      	bne.n	100578e0 <GAT_att_srv_read_exc+0x3c>
100578d8:	4287      	cmp	r7, r0
100578da:	d253      	bcs.n	10057984 <GAT_att_srv_read_exc+0xe0>
100578dc:	9904      	ldr	r1, [sp, #16]
100578de:	1a40      	subs	r0, r0, r1
100578e0:	b280      	uxth	r0, r0
100578e2:	4287      	cmp	r7, r0
100578e4:	d300      	bcc.n	100578e8 <GAT_att_srv_read_exc+0x44>
100578e6:	4607      	mov	r7, r0
100578e8:	b2ba      	uxth	r2, r7
100578ea:	6873      	ldr	r3, [r6, #4]
100578ec:	89a0      	ldrh	r0, [r4, #12]
100578ee:	1c40      	adds	r0, r0, #1
100578f0:	b281      	uxth	r1, r0
100578f2:	4620      	mov	r0, r4
100578f4:	f7fd fa84 	bl	10054e00 <ACL_pkt_write>
100578f8:	1c78      	adds	r0, r7, #1
100578fa:	8060      	strh	r0, [r4, #2]
100578fc:	2000      	movs	r0, #0
100578fe:	e04d      	b.n	1005799c <GAT_att_srv_read_exc+0xf8>
10057900:	7868      	ldrb	r0, [r5, #1]
10057902:	280c      	cmp	r0, #12
10057904:	9702      	str	r7, [sp, #8]
10057906:	d107      	bne.n	10057918 <GAT_att_srv_read_exc+0x74>
10057908:	6868      	ldr	r0, [r5, #4]
1005790a:	8981      	ldrh	r1, [r0, #12]
1005790c:	1cc9      	adds	r1, r1, #3
1005790e:	b289      	uxth	r1, r1
10057910:	f7fd fa5d 	bl	10054dce <ACL_pkt_read_16b>
10057914:	220d      	movs	r2, #13
10057916:	e001      	b.n	1005791c <GAT_att_srv_read_exc+0x78>
10057918:	220b      	movs	r2, #11
1005791a:	2000      	movs	r0, #0
1005791c:	af04      	add	r7, sp, #16
1005791e:	9003      	str	r0, [sp, #12]
10057920:	8038      	strh	r0, [r7, #0]
10057922:	89a1      	ldrh	r1, [r4, #12]
10057924:	4620      	mov	r0, r4
10057926:	f7ff fc79 	bl	1005721c <ACL_pkt_write_8b>
1005792a:	6868      	ldr	r0, [r5, #4]
1005792c:	8981      	ldrh	r1, [r0, #12]
1005792e:	1c49      	adds	r1, r1, #1
10057930:	b289      	uxth	r1, r1
10057932:	f7fd fa4c 	bl	10054dce <ACL_pkt_read_16b>
10057936:	4606      	mov	r6, r0
10057938:	8078      	strh	r0, [r7, #2]
1005793a:	a807      	add	r0, sp, #28
1005793c:	8106      	strh	r6, [r0, #8]
1005793e:	2701      	movs	r7, #1
10057940:	7107      	strb	r7, [r0, #4]
10057942:	68a9      	ldr	r1, [r5, #8]
10057944:	9107      	str	r1, [sp, #28]
10057946:	f001 f8a7 	bl	10058a98 <GAT_srv_check_change_aware>
1005794a:	2886      	cmp	r0, #134	@ 0x86
1005794c:	d101      	bne.n	10057952 <GAT_att_srv_read_exc+0xae>
1005794e:	2712      	movs	r7, #18
10057950:	e015      	b.n	1005797e <GAT_att_srv_read_exc+0xda>
10057952:	4630      	mov	r0, r6
10057954:	f00c ffa4 	bl	100648a0 <GAT_att_db_find_by_handle>
10057958:	2800      	cmp	r0, #0
1005795a:	d010      	beq.n	1005797e <GAT_att_srv_read_exc+0xda>
1005795c:	4601      	mov	r1, r0
1005795e:	a806      	add	r0, sp, #24
10057960:	9000      	str	r0, [sp, #0]
10057962:	ab05      	add	r3, sp, #20
10057964:	4628      	mov	r0, r5
10057966:	9a03      	ldr	r2, [sp, #12]
10057968:	f000 fa36 	bl	10057dd8 <GAT_att_srv_value_read>
1005796c:	2800      	cmp	r0, #0
1005796e:	d017      	beq.n	100579a0 <GAT_att_srv_read_exc+0xfc>
10057970:	2884      	cmp	r0, #132	@ 0x84
10057972:	d018      	beq.n	100579a6 <GAT_att_srv_read_exc+0x102>
10057974:	2886      	cmp	r0, #134	@ 0x86
10057976:	d111      	bne.n	1005799c <GAT_att_srv_read_exc+0xf8>
10057978:	a806      	add	r0, sp, #24
1005797a:	7807      	ldrb	r7, [r0, #0]
1005797c:	e007      	b.n	1005798e <GAT_att_srv_read_exc+0xea>
1005797e:	a806      	add	r0, sp, #24
10057980:	7007      	strb	r7, [r0, #0]
10057982:	e004      	b.n	1005798e <GAT_att_srv_read_exc+0xea>
10057984:	a806      	add	r0, sp, #24
10057986:	270b      	movs	r7, #11
10057988:	7007      	strb	r7, [r0, #0]
1005798a:	a804      	add	r0, sp, #16
1005798c:	8846      	ldrh	r6, [r0, #2]
1005798e:	7868      	ldrb	r0, [r5, #1]
10057990:	4631      	mov	r1, r6
10057992:	463a      	mov	r2, r7
10057994:	4623      	mov	r3, r4
10057996:	f7ff fcc7 	bl	10057328 <GAT_att_srv_write_err_packet>
1005799a:	2086      	movs	r0, #134	@ 0x86
1005799c:	b00b      	add	sp, #44	@ 0x2c
1005799e:	bdf0      	pop	{r4, r5, r6, r7, pc}
100579a0:	9e05      	ldr	r6, [sp, #20]
100579a2:	9f02      	ldr	r7, [sp, #8]
100579a4:	e793      	b.n	100578ce <GAT_att_srv_read_exc+0x2a>
100579a6:	89a0      	ldrh	r0, [r4, #12]
100579a8:	1c40      	adds	r0, r0, #1
100579aa:	b281      	uxth	r1, r0
100579ac:	2204      	movs	r2, #4
100579ae:	ab04      	add	r3, sp, #16
100579b0:	4620      	mov	r0, r4
100579b2:	f7fd fa25 	bl	10054e00 <ACL_pkt_write>
100579b6:	2084      	movs	r0, #132	@ 0x84
100579b8:	e7f0      	b.n	1005799c <GAT_att_srv_read_exc+0xf8>

100579ba <GAT_att_srv_read_multi_exc>:
100579ba:	b5f0      	push	{r4, r5, r6, r7, lr}
100579bc:	b08d      	sub	sp, #52	@ 0x34
100579be:	6881      	ldr	r1, [r0, #8]
100579c0:	68ce      	ldr	r6, [r1, #12]
100579c2:	88c9      	ldrh	r1, [r1, #6]
100579c4:	9106      	str	r1, [sp, #24]
100579c6:	7801      	ldrb	r1, [r0, #0]
100579c8:	2900      	cmp	r1, #0
100579ca:	9007      	str	r0, [sp, #28]
100579cc:	d009      	beq.n	100579e2 <GAT_att_srv_read_multi_exc+0x28>
100579ce:	8877      	ldrh	r7, [r6, #2]
100579d0:	89b0      	ldrh	r0, [r6, #12]
100579d2:	19c0      	adds	r0, r0, r7
100579d4:	b281      	uxth	r1, r0
100579d6:	4630      	mov	r0, r6
100579d8:	f7fd f9f9 	bl	10054dce <ACL_pkt_read_16b>
100579dc:	9907      	ldr	r1, [sp, #28]
100579de:	4602      	mov	r2, r0
100579e0:	e00c      	b.n	100579fc <GAT_att_srv_read_multi_exc+0x42>
100579e2:	7840      	ldrb	r0, [r0, #1]
100579e4:	280e      	cmp	r0, #14
100579e6:	d001      	beq.n	100579ec <GAT_att_srv_read_multi_exc+0x32>
100579e8:	2221      	movs	r2, #33	@ 0x21
100579ea:	e000      	b.n	100579ee <GAT_att_srv_read_multi_exc+0x34>
100579ec:	220f      	movs	r2, #15
100579ee:	89b1      	ldrh	r1, [r6, #12]
100579f0:	4630      	mov	r0, r6
100579f2:	f7ff fc13 	bl	1005721c <ACL_pkt_write_8b>
100579f6:	2201      	movs	r2, #1
100579f8:	4617      	mov	r7, r2
100579fa:	9907      	ldr	r1, [sp, #28]
100579fc:	6848      	ldr	r0, [r1, #4]
100579fe:	7880      	ldrb	r0, [r0, #2]
10057a00:	1a80      	subs	r0, r0, r2
10057a02:	b2c0      	uxtb	r0, r0
10057a04:	0845      	lsrs	r5, r0, #1
10057a06:	7808      	ldrb	r0, [r1, #0]
10057a08:	2800      	cmp	r0, #0
10057a0a:	9602      	str	r6, [sp, #8]
10057a0c:	d066      	beq.n	10057adc <GAT_att_srv_read_multi_exc+0x122>
10057a0e:	9907      	ldr	r1, [sp, #28]
10057a10:	4608      	mov	r0, r1
10057a12:	300c      	adds	r0, #12
10057a14:	9001      	str	r0, [sp, #4]
10057a16:	b2ed      	uxtb	r5, r5
10057a18:	35ff      	adds	r5, #255	@ 0xff
10057a1a:	b2e8      	uxtb	r0, r5
10057a1c:	2300      	movs	r3, #0
10057a1e:	9303      	str	r3, [sp, #12]
10057a20:	42a8      	cmp	r0, r5
10057a22:	d100      	bne.n	10057a26 <GAT_att_srv_read_multi_exc+0x6c>
10057a24:	e0b3      	b.n	10057b8e <GAT_att_srv_read_multi_exc+0x1d4>
10057a26:	b2bc      	uxth	r4, r7
10057a28:	9806      	ldr	r0, [sp, #24]
10057a2a:	42a0      	cmp	r0, r4
10057a2c:	d800      	bhi.n	10057a30 <GAT_att_srv_read_multi_exc+0x76>
10057a2e:	e0ae      	b.n	10057b8e <GAT_att_srv_read_multi_exc+0x1d4>
10057a30:	6848      	ldr	r0, [r1, #4]
10057a32:	8981      	ldrh	r1, [r0, #12]
10057a34:	9205      	str	r2, [sp, #20]
10057a36:	1889      	adds	r1, r1, r2
10057a38:	b289      	uxth	r1, r1
10057a3a:	2202      	movs	r2, #2
10057a3c:	ab0c      	add	r3, sp, #48	@ 0x30
10057a3e:	9204      	str	r2, [sp, #16]
10057a40:	f7fd f9bc 	bl	10054dbc <ACL_pkt_read>
10057a44:	9907      	ldr	r1, [sp, #28]
10057a46:	7808      	ldrb	r0, [r1, #0]
10057a48:	2801      	cmp	r0, #1
10057a4a:	d102      	bne.n	10057a52 <GAT_att_srv_read_multi_exc+0x98>
10057a4c:	9801      	ldr	r0, [sp, #4]
10057a4e:	9008      	str	r0, [sp, #32]
10057a50:	e00d      	b.n	10057a6e <GAT_att_srv_read_multi_exc+0xb4>
10057a52:	a80c      	add	r0, sp, #48	@ 0x30
10057a54:	8800      	ldrh	r0, [r0, #0]
10057a56:	f00c ff23 	bl	100648a0 <GAT_att_db_find_by_handle>
10057a5a:	4601      	mov	r1, r0
10057a5c:	9807      	ldr	r0, [sp, #28]
10057a5e:	6880      	ldr	r0, [r0, #8]
10057a60:	8900      	ldrh	r0, [r0, #8]
10057a62:	aa08      	add	r2, sp, #32
10057a64:	f000 fdc6 	bl	100585f4 <GAT_srv_get_attr_value>
10057a68:	9907      	ldr	r1, [sp, #28]
10057a6a:	2884      	cmp	r0, #132	@ 0x84
10057a6c:	d065      	beq.n	10057b3a <GAT_att_srv_read_multi_exc+0x180>
10057a6e:	9806      	ldr	r0, [sp, #24]
10057a70:	1b04      	subs	r4, r0, r4
10057a72:	7848      	ldrb	r0, [r1, #1]
10057a74:	280e      	cmp	r0, #14
10057a76:	d109      	bne.n	10057a8c <GAT_att_srv_read_multi_exc+0xd2>
10057a78:	89b0      	ldrh	r0, [r6, #12]
10057a7a:	19c1      	adds	r1, r0, r7
10057a7c:	9808      	ldr	r0, [sp, #32]
10057a7e:	8802      	ldrh	r2, [r0, #0]
10057a80:	4294      	cmp	r4, r2
10057a82:	db00      	blt.n	10057a86 <GAT_att_srv_read_multi_exc+0xcc>
10057a84:	4614      	mov	r4, r2
10057a86:	b289      	uxth	r1, r1
10057a88:	b2a2      	uxth	r2, r4
10057a8a:	e013      	b.n	10057ab4 <GAT_att_srv_read_multi_exc+0xfa>
10057a8c:	89b0      	ldrh	r0, [r6, #12]
10057a8e:	19c0      	adds	r0, r0, r7
10057a90:	b281      	uxth	r1, r0
10057a92:	9a08      	ldr	r2, [sp, #32]
10057a94:	4630      	mov	r0, r6
10057a96:	8816      	ldrh	r6, [r2, #0]
10057a98:	4632      	mov	r2, r6
10057a9a:	f7fd f9a8 	bl	10054dee <ACL_pkt_write_16b>
10057a9e:	1ea4      	subs	r4, r4, #2
10057aa0:	42b4      	cmp	r4, r6
10057aa2:	d300      	bcc.n	10057aa6 <GAT_att_srv_read_multi_exc+0xec>
10057aa4:	4634      	mov	r4, r6
10057aa6:	b2a2      	uxth	r2, r4
10057aa8:	1cbf      	adds	r7, r7, #2
10057aaa:	9e02      	ldr	r6, [sp, #8]
10057aac:	89b0      	ldrh	r0, [r6, #12]
10057aae:	19c0      	adds	r0, r0, r7
10057ab0:	b281      	uxth	r1, r0
10057ab2:	9808      	ldr	r0, [sp, #32]
10057ab4:	6843      	ldr	r3, [r0, #4]
10057ab6:	4630      	mov	r0, r6
10057ab8:	f7fd f9a2 	bl	10054e00 <ACL_pkt_write>
10057abc:	193f      	adds	r7, r7, r4
10057abe:	8077      	strh	r7, [r6, #2]
10057ac0:	9907      	ldr	r1, [sp, #28]
10057ac2:	7848      	ldrb	r0, [r1, #1]
10057ac4:	2820      	cmp	r0, #32
10057ac6:	9a05      	ldr	r2, [sp, #20]
10057ac8:	d104      	bne.n	10057ad4 <GAT_att_srv_read_multi_exc+0x11a>
10057aca:	9806      	ldr	r0, [sp, #24]
10057acc:	1bc0      	subs	r0, r0, r7
10057ace:	b280      	uxth	r0, r0
10057ad0:	2802      	cmp	r0, #2
10057ad2:	d35c      	bcc.n	10057b8e <GAT_att_srv_read_multi_exc+0x1d4>
10057ad4:	9804      	ldr	r0, [sp, #16]
10057ad6:	7008      	strb	r0, [r1, #0]
10057ad8:	1c92      	adds	r2, r2, #2
10057ada:	e79c      	b.n	10057a16 <GAT_att_srv_read_multi_exc+0x5c>
10057adc:	2100      	movs	r1, #0
10057ade:	9205      	str	r2, [sp, #20]
10057ae0:	9c07      	ldr	r4, [sp, #28]
10057ae2:	b288      	uxth	r0, r1
10057ae4:	42a8      	cmp	r0, r5
10057ae6:	d292      	bcs.n	10057a0e <GAT_att_srv_read_multi_exc+0x54>
10057ae8:	9104      	str	r1, [sp, #16]
10057aea:	0049      	lsls	r1, r1, #1
10057aec:	6860      	ldr	r0, [r4, #4]
10057aee:	8982      	ldrh	r2, [r0, #12]
10057af0:	1851      	adds	r1, r2, r1
10057af2:	1c49      	adds	r1, r1, #1
10057af4:	b289      	uxth	r1, r1
10057af6:	2202      	movs	r2, #2
10057af8:	ab0c      	add	r3, sp, #48	@ 0x30
10057afa:	f7fd f95f 	bl	10054dbc <ACL_pkt_read>
10057afe:	a808      	add	r0, sp, #32
10057b00:	2601      	movs	r6, #1
10057b02:	7106      	strb	r6, [r0, #4]
10057b04:	990c      	ldr	r1, [sp, #48]	@ 0x30
10057b06:	8101      	strh	r1, [r0, #8]
10057b08:	68a1      	ldr	r1, [r4, #8]
10057b0a:	9108      	str	r1, [sp, #32]
10057b0c:	f000 ffc4 	bl	10058a98 <GAT_srv_check_change_aware>
10057b10:	2886      	cmp	r0, #134	@ 0x86
10057b12:	d02a      	beq.n	10057b6a <GAT_att_srv_read_multi_exc+0x1b0>
10057b14:	a80c      	add	r0, sp, #48	@ 0x30
10057b16:	8800      	ldrh	r0, [r0, #0]
10057b18:	f00c fec2 	bl	100648a0 <GAT_att_db_find_by_handle>
10057b1c:	2800      	cmp	r0, #0
10057b1e:	d027      	beq.n	10057b70 <GAT_att_srv_read_multi_exc+0x1b6>
10057b20:	9907      	ldr	r1, [sp, #28]
10057b22:	6889      	ldr	r1, [r1, #8]
10057b24:	8909      	ldrh	r1, [r1, #8]
10057b26:	2201      	movs	r2, #1
10057b28:	f000 fcee 	bl	10058508 <GAT_srv_check_perms>
10057b2c:	2800      	cmp	r0, #0
10057b2e:	d11e      	bne.n	10057b6e <GAT_att_srv_read_multi_exc+0x1b4>
10057b30:	9904      	ldr	r1, [sp, #16]
10057b32:	1c49      	adds	r1, r1, #1
10057b34:	9e02      	ldr	r6, [sp, #8]
10057b36:	9a05      	ldr	r2, [sp, #20]
10057b38:	e7d3      	b.n	10057ae2 <GAT_att_srv_read_multi_exc+0x128>
10057b3a:	a80c      	add	r0, sp, #48	@ 0x30
10057b3c:	8803      	ldrh	r3, [r0, #0]
10057b3e:	6888      	ldr	r0, [r1, #8]
10057b40:	8942      	ldrh	r2, [r0, #10]
10057b42:	8901      	ldrh	r1, [r0, #8]
10057b44:	2000      	movs	r0, #0
10057b46:	9000      	str	r0, [sp, #0]
10057b48:	2002      	movs	r0, #2
10057b4a:	f00b fe45 	bl	100637d8 <aci_gatt_srv_read_event_push_noinline>
10057b4e:	9003      	str	r0, [sp, #12]
10057b50:	2800      	cmp	r0, #0
10057b52:	9a05      	ldr	r2, [sp, #20]
10057b54:	d11b      	bne.n	10057b8e <GAT_att_srv_read_multi_exc+0x1d4>
10057b56:	8077      	strh	r7, [r6, #2]
10057b58:	89b0      	ldrh	r0, [r6, #12]
10057b5a:	19c0      	adds	r0, r0, r7
10057b5c:	b281      	uxth	r1, r0
10057b5e:	b292      	uxth	r2, r2
10057b60:	4630      	mov	r0, r6
10057b62:	f7fd f944 	bl	10054dee <ACL_pkt_write_16b>
10057b66:	2084      	movs	r0, #132	@ 0x84
10057b68:	e010      	b.n	10057b8c <GAT_att_srv_read_multi_exc+0x1d2>
10057b6a:	2612      	movs	r6, #18
10057b6c:	e000      	b.n	10057b70 <GAT_att_srv_read_multi_exc+0x1b6>
10057b6e:	4606      	mov	r6, r0
10057b70:	a80c      	add	r0, sp, #48	@ 0x30
10057b72:	8801      	ldrh	r1, [r0, #0]
10057b74:	9807      	ldr	r0, [sp, #28]
10057b76:	7840      	ldrb	r0, [r0, #1]
10057b78:	280e      	cmp	r0, #14
10057b7a:	d101      	bne.n	10057b80 <GAT_att_srv_read_multi_exc+0x1c6>
10057b7c:	200e      	movs	r0, #14
10057b7e:	e000      	b.n	10057b82 <GAT_att_srv_read_multi_exc+0x1c8>
10057b80:	2020      	movs	r0, #32
10057b82:	4632      	mov	r2, r6
10057b84:	9b02      	ldr	r3, [sp, #8]
10057b86:	f7ff fbcf 	bl	10057328 <GAT_att_srv_write_err_packet>
10057b8a:	2086      	movs	r0, #134	@ 0x86
10057b8c:	9003      	str	r0, [sp, #12]
10057b8e:	9803      	ldr	r0, [sp, #12]
10057b90:	b00d      	add	sp, #52	@ 0x34
10057b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

10057b94 <GAT_att_srv_write_exc>:
10057b94:	b5f0      	push	{r4, r5, r6, r7, lr}
10057b96:	b089      	sub	sp, #36	@ 0x24
10057b98:	4604      	mov	r4, r0
10057b9a:	7800      	ldrb	r0, [r0, #0]
10057b9c:	2800      	cmp	r0, #0
10057b9e:	d001      	beq.n	10057ba4 <GAT_att_srv_write_exc+0x10>
10057ba0:	2000      	movs	r0, #0
10057ba2:	e03b      	b.n	10057c1c <GAT_att_srv_write_exc+0x88>
10057ba4:	6860      	ldr	r0, [r4, #4]
10057ba6:	68a1      	ldr	r1, [r4, #8]
10057ba8:	68c9      	ldr	r1, [r1, #12]
10057baa:	9106      	str	r1, [sp, #24]
10057bac:	8846      	ldrh	r6, [r0, #2]
10057bae:	8981      	ldrh	r1, [r0, #12]
10057bb0:	1c49      	adds	r1, r1, #1
10057bb2:	b289      	uxth	r1, r1
10057bb4:	f7fd f90b 	bl	10054dce <ACL_pkt_read_16b>
10057bb8:	4605      	mov	r5, r0
10057bba:	1ef1      	subs	r1, r6, #3
10057bbc:	7860      	ldrb	r0, [r4, #1]
10057bbe:	2700      	movs	r7, #0
10057bc0:	2852      	cmp	r0, #82	@ 0x52
10057bc2:	d00c      	beq.n	10057bde <GAT_att_srv_write_exc+0x4a>
10057bc4:	28d2      	cmp	r0, #210	@ 0xd2
10057bc6:	d10e      	bne.n	10057be6 <GAT_att_srv_write_exc+0x52>
10057bc8:	68a0      	ldr	r0, [r4, #8]
10057bca:	8940      	ldrh	r0, [r0, #10]
10057bcc:	2804      	cmp	r0, #4
10057bce:	d124      	bne.n	10057c1a <GAT_att_srv_write_exc+0x86>
10057bd0:	3e0f      	subs	r6, #15
10057bd2:	2205      	movs	r2, #5
10057bd4:	2701      	movs	r7, #1
10057bd6:	2000      	movs	r0, #0
10057bd8:	9004      	str	r0, [sp, #16]
10057bda:	9605      	str	r6, [sp, #20]
10057bdc:	e00e      	b.n	10057bfc <GAT_att_srv_write_exc+0x68>
10057bde:	9105      	str	r1, [sp, #20]
10057be0:	2204      	movs	r2, #4
10057be2:	9704      	str	r7, [sp, #16]
10057be4:	e00a      	b.n	10057bfc <GAT_att_srv_write_exc+0x68>
10057be6:	9105      	str	r1, [sp, #20]
10057be8:	9e06      	ldr	r6, [sp, #24]
10057bea:	89b1      	ldrh	r1, [r6, #12]
10057bec:	2213      	movs	r2, #19
10057bee:	4630      	mov	r0, r6
10057bf0:	f7ff fb14 	bl	1005721c <ACL_pkt_write_8b>
10057bf4:	2001      	movs	r0, #1
10057bf6:	9004      	str	r0, [sp, #16]
10057bf8:	8070      	strh	r0, [r6, #2]
10057bfa:	2203      	movs	r2, #3
10057bfc:	ab07      	add	r3, sp, #28
10057bfe:	4620      	mov	r0, r4
10057c00:	4629      	mov	r1, r5
10057c02:	f000 f936 	bl	10057e72 <GAT_att_srv_set_attr_value_check>
10057c06:	4602      	mov	r2, r0
10057c08:	a808      	add	r0, sp, #32
10057c0a:	7002      	strb	r2, [r0, #0]
10057c0c:	2a00      	cmp	r2, #0
10057c0e:	d007      	beq.n	10057c20 <GAT_att_srv_write_exc+0x8c>
10057c10:	7860      	ldrb	r0, [r4, #1]
10057c12:	4629      	mov	r1, r5
10057c14:	9b06      	ldr	r3, [sp, #24]
10057c16:	f7ff fb87 	bl	10057328 <GAT_att_srv_write_err_packet>
10057c1a:	2086      	movs	r0, #134	@ 0x86
10057c1c:	b009      	add	sp, #36	@ 0x24
10057c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057c20:	2f00      	cmp	r7, #0
10057c22:	d008      	beq.n	10057c36 <GAT_att_srv_write_exc+0xa2>
10057c24:	6861      	ldr	r1, [r4, #4]
10057c26:	68a0      	ldr	r0, [r4, #8]
10057c28:	8900      	ldrh	r0, [r0, #8]
10057c2a:	f00a fc94 	bl	10062556 <smp_sap_sm2_packet_data_signing_validate>
10057c2e:	2800      	cmp	r0, #0
10057c30:	d001      	beq.n	10057c36 <GAT_att_srv_write_exc+0xa2>
10057c32:	2200      	movs	r2, #0
10057c34:	e7ec      	b.n	10057c10 <GAT_att_srv_write_exc+0x7c>
10057c36:	6861      	ldr	r1, [r4, #4]
10057c38:	9807      	ldr	r0, [sp, #28]
10057c3a:	aa08      	add	r2, sp, #32
10057c3c:	f000 fdda 	bl	100587f4 <GAT_srv_attr_value_write>
10057c40:	2800      	cmp	r0, #0
10057c42:	d0eb      	beq.n	10057c1c <GAT_att_srv_write_exc+0x88>
10057c44:	2884      	cmp	r0, #132	@ 0x84
10057c46:	d112      	bne.n	10057c6e <GAT_att_srv_write_exc+0xda>
10057c48:	6860      	ldr	r0, [r4, #4]
10057c4a:	68a1      	ldr	r1, [r4, #8]
10057c4c:	894a      	ldrh	r2, [r1, #10]
10057c4e:	8909      	ldrh	r1, [r1, #8]
10057c50:	9b05      	ldr	r3, [sp, #20]
10057c52:	b29b      	uxth	r3, r3
10057c54:	9500      	str	r5, [sp, #0]
10057c56:	9301      	str	r3, [sp, #4]
10057c58:	9002      	str	r0, [sp, #8]
10057c5a:	200a      	movs	r0, #10
10057c5c:	9b04      	ldr	r3, [sp, #16]
10057c5e:	f00b fdf5 	bl	1006384c <aci_gatt_srv_write_event_push_noinline>
10057c62:	2800      	cmp	r0, #0
10057c64:	d1da      	bne.n	10057c1c <GAT_att_srv_write_exc+0x88>
10057c66:	2000      	movs	r0, #0
10057c68:	6060      	str	r0, [r4, #4]
10057c6a:	2084      	movs	r0, #132	@ 0x84
10057c6c:	e7d6      	b.n	10057c1c <GAT_att_srv_write_exc+0x88>
10057c6e:	a808      	add	r0, sp, #32
10057c70:	7802      	ldrb	r2, [r0, #0]
10057c72:	e7cd      	b.n	10057c10 <GAT_att_srv_write_exc+0x7c>

10057c74 <GAT_att_srv_prep_wr_exc>:
10057c74:	b570      	push	{r4, r5, r6, lr}
10057c76:	b086      	sub	sp, #24
10057c78:	4604      	mov	r4, r0
10057c7a:	7800      	ldrb	r0, [r0, #0]
10057c7c:	2800      	cmp	r0, #0
10057c7e:	d014      	beq.n	10057caa <GAT_att_srv_prep_wr_exc+0x36>
10057c80:	89a5      	ldrh	r5, [r4, #12]
10057c82:	68a0      	ldr	r0, [r4, #8]
10057c84:	88c1      	ldrh	r1, [r0, #6]
10057c86:	1f49      	subs	r1, r1, #5
10057c88:	42a9      	cmp	r1, r5
10057c8a:	d800      	bhi.n	10057c8e <GAT_att_srv_prep_wr_exc+0x1a>
10057c8c:	460d      	mov	r5, r1
10057c8e:	b2aa      	uxth	r2, r5
10057c90:	6923      	ldr	r3, [r4, #16]
10057c92:	68c0      	ldr	r0, [r0, #12]
10057c94:	8981      	ldrh	r1, [r0, #12]
10057c96:	1d49      	adds	r1, r1, #5
10057c98:	b289      	uxth	r1, r1
10057c9a:	f7fd f8b1 	bl	10054e00 <ACL_pkt_write>
10057c9e:	1d68      	adds	r0, r5, #5
10057ca0:	68a1      	ldr	r1, [r4, #8]
10057ca2:	68c9      	ldr	r1, [r1, #12]
10057ca4:	8048      	strh	r0, [r1, #2]
10057ca6:	2000      	movs	r0, #0
10057ca8:	e040      	b.n	10057d2c <GAT_att_srv_prep_wr_exc+0xb8>
10057caa:	6860      	ldr	r0, [r4, #4]
10057cac:	8981      	ldrh	r1, [r0, #12]
10057cae:	1c49      	adds	r1, r1, #1
10057cb0:	b289      	uxth	r1, r1
10057cb2:	f7fd f88c 	bl	10054dce <ACL_pkt_read_16b>
10057cb6:	4605      	mov	r5, r0
10057cb8:	2203      	movs	r2, #3
10057cba:	ab05      	add	r3, sp, #20
10057cbc:	4620      	mov	r0, r4
10057cbe:	4629      	mov	r1, r5
10057cc0:	f000 f8d7 	bl	10057e72 <GAT_att_srv_set_attr_value_check>
10057cc4:	2800      	cmp	r0, #0
10057cc6:	d008      	beq.n	10057cda <GAT_att_srv_prep_wr_exc+0x66>
10057cc8:	4602      	mov	r2, r0
10057cca:	68a0      	ldr	r0, [r4, #8]
10057ccc:	68c3      	ldr	r3, [r0, #12]
10057cce:	2016      	movs	r0, #22
10057cd0:	4629      	mov	r1, r5
10057cd2:	f7ff fb29 	bl	10057328 <GAT_att_srv_write_err_packet>
10057cd6:	2086      	movs	r0, #134	@ 0x86
10057cd8:	e028      	b.n	10057d2c <GAT_att_srv_prep_wr_exc+0xb8>
10057cda:	6860      	ldr	r0, [r4, #4]
10057cdc:	8981      	ldrh	r1, [r0, #12]
10057cde:	1cc9      	adds	r1, r1, #3
10057ce0:	b289      	uxth	r1, r1
10057ce2:	f7fd f874 	bl	10054dce <ACL_pkt_read_16b>
10057ce6:	4606      	mov	r6, r0
10057ce8:	6860      	ldr	r0, [r4, #4]
10057cea:	68a1      	ldr	r1, [r4, #8]
10057cec:	894a      	ldrh	r2, [r1, #10]
10057cee:	8909      	ldrh	r1, [r1, #8]
10057cf0:	8843      	ldrh	r3, [r0, #2]
10057cf2:	1f5b      	subs	r3, r3, #5
10057cf4:	b29b      	uxth	r3, r3
10057cf6:	9600      	str	r6, [sp, #0]
10057cf8:	9301      	str	r3, [sp, #4]
10057cfa:	9002      	str	r0, [sp, #8]
10057cfc:	200a      	movs	r0, #10
10057cfe:	462b      	mov	r3, r5
10057d00:	f00c f80c 	bl	10063d1c <aci_att_srv_prepare_write_req_event_push_noinline>
10057d04:	2800      	cmp	r0, #0
10057d06:	d111      	bne.n	10057d2c <GAT_att_srv_prep_wr_exc+0xb8>
10057d08:	ab03      	add	r3, sp, #12
10057d0a:	705d      	strb	r5, [r3, #1]
10057d0c:	0a28      	lsrs	r0, r5, #8
10057d0e:	7098      	strb	r0, [r3, #2]
10057d10:	70de      	strb	r6, [r3, #3]
10057d12:	2017      	movs	r0, #23
10057d14:	7018      	strb	r0, [r3, #0]
10057d16:	0a30      	lsrs	r0, r6, #8
10057d18:	7118      	strb	r0, [r3, #4]
10057d1a:	68a0      	ldr	r0, [r4, #8]
10057d1c:	68c0      	ldr	r0, [r0, #12]
10057d1e:	8981      	ldrh	r1, [r0, #12]
10057d20:	2205      	movs	r2, #5
10057d22:	f7fd f86d 	bl	10054e00 <ACL_pkt_write>
10057d26:	2000      	movs	r0, #0
10057d28:	6060      	str	r0, [r4, #4]
10057d2a:	2084      	movs	r0, #132	@ 0x84
10057d2c:	b006      	add	sp, #24
10057d2e:	bd70      	pop	{r4, r5, r6, pc}

10057d30 <GAT_att_srv_exec_wr_exc>:
10057d30:	b510      	push	{r4, lr}
10057d32:	4604      	mov	r4, r0
10057d34:	7800      	ldrb	r0, [r0, #0]
10057d36:	2800      	cmp	r0, #0
10057d38:	d001      	beq.n	10057d3e <GAT_att_srv_exec_wr_exc+0xe>
10057d3a:	2000      	movs	r0, #0
10057d3c:	bd10      	pop	{r4, pc}
10057d3e:	6860      	ldr	r0, [r4, #4]
10057d40:	8981      	ldrh	r1, [r0, #12]
10057d42:	1c49      	adds	r1, r1, #1
10057d44:	b289      	uxth	r1, r1
10057d46:	f000 f884 	bl	10057e52 <ACL_pkt_read_8b>
10057d4a:	4603      	mov	r3, r0
10057d4c:	68a0      	ldr	r0, [r4, #8]
10057d4e:	8942      	ldrh	r2, [r0, #10]
10057d50:	8901      	ldrh	r1, [r0, #8]
10057d52:	2002      	movs	r0, #2
10057d54:	f00c f810 	bl	10063d78 <aci_att_srv_exec_write_req_event_push_noinline>
10057d58:	2800      	cmp	r0, #0
10057d5a:	d000      	beq.n	10057d5e <GAT_att_srv_exec_wr_exc+0x2e>
10057d5c:	bd10      	pop	{r4, pc}
10057d5e:	68a0      	ldr	r0, [r4, #8]
10057d60:	68c0      	ldr	r0, [r0, #12]
10057d62:	8981      	ldrh	r1, [r0, #12]
10057d64:	2219      	movs	r2, #25
10057d66:	f7ff fa59 	bl	1005721c <ACL_pkt_write_8b>
10057d6a:	68a0      	ldr	r0, [r4, #8]
10057d6c:	68c0      	ldr	r0, [r0, #12]
10057d6e:	2101      	movs	r1, #1
10057d70:	8041      	strh	r1, [r0, #2]
10057d72:	2084      	movs	r0, #132	@ 0x84
10057d74:	bd10      	pop	{r4, pc}

10057d76 <GAT_att_srv_confirm_exc>:
10057d76:	b5b0      	push	{r4, r5, r7, lr}
10057d78:	4605      	mov	r5, r0
10057d7a:	6880      	ldr	r0, [r0, #8]
10057d7c:	8942      	ldrh	r2, [r0, #10]
10057d7e:	8901      	ldrh	r1, [r0, #8]
10057d80:	2042      	movs	r0, #66	@ 0x42
10057d82:	f00b fcf7 	bl	10063774 <aci_gatt_srv_confirmation_event_push_noinline>
10057d86:	4604      	mov	r4, r0
10057d88:	2800      	cmp	r0, #0
10057d8a:	d110      	bne.n	10057dae <GAT_att_srv_confirm_exc+0x38>
10057d8c:	68a8      	ldr	r0, [r5, #8]
10057d8e:	8942      	ldrh	r2, [r0, #10]
10057d90:	8901      	ldrh	r1, [r0, #8]
10057d92:	2001      	movs	r0, #1
10057d94:	f7fe fef2 	bl	10056b7c <GAT_att_cmn_stop_timer>
10057d98:	68a8      	ldr	r0, [r5, #8]
10057d9a:	8881      	ldrh	r1, [r0, #4]
10057d9c:	064a      	lsls	r2, r1, #25
10057d9e:	d503      	bpl.n	10057da8 <GAT_att_srv_confirm_exc+0x32>
10057da0:	f000 fe6c 	bl	10058a7c <GAT_srv_set_change_aware>
10057da4:	68a8      	ldr	r0, [r5, #8]
10057da6:	8881      	ldrh	r1, [r0, #4]
10057da8:	2202      	movs	r2, #2
10057daa:	4391      	bics	r1, r2
10057dac:	8081      	strh	r1, [r0, #4]
10057dae:	4620      	mov	r0, r4
10057db0:	bdb0      	pop	{r4, r5, r7, pc}

10057db2 <GAT_att_srv_get_handle_range>:
10057db2:	b570      	push	{r4, r5, r6, lr}
10057db4:	4614      	mov	r4, r2
10057db6:	460d      	mov	r5, r1
10057db8:	4606      	mov	r6, r0
10057dba:	8980      	ldrh	r0, [r0, #12]
10057dbc:	1c40      	adds	r0, r0, #1
10057dbe:	b281      	uxth	r1, r0
10057dc0:	4630      	mov	r0, r6
10057dc2:	f7fd f804 	bl	10054dce <ACL_pkt_read_16b>
10057dc6:	8028      	strh	r0, [r5, #0]
10057dc8:	89b0      	ldrh	r0, [r6, #12]
10057dca:	1cc0      	adds	r0, r0, #3
10057dcc:	b281      	uxth	r1, r0
10057dce:	4630      	mov	r0, r6
10057dd0:	f7fc fffd 	bl	10054dce <ACL_pkt_read_16b>
10057dd4:	8020      	strh	r0, [r4, #0]
10057dd6:	bd70      	pop	{r4, r5, r6, pc}

10057dd8 <GAT_att_srv_value_read>:
10057dd8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10057dda:	461f      	mov	r7, r3
10057ddc:	4606      	mov	r6, r0
10057dde:	9d08      	ldr	r5, [sp, #32]
10057de0:	2400      	movs	r4, #0
10057de2:	702c      	strb	r4, [r5, #0]
10057de4:	7800      	ldrb	r0, [r0, #0]
10057de6:	2801      	cmp	r0, #1
10057de8:	d107      	bne.n	10057dfa <GAT_att_srv_value_read+0x22>
10057dea:	6930      	ldr	r0, [r6, #16]
10057dec:	2800      	cmp	r0, #0
10057dee:	d01f      	beq.n	10057e30 <GAT_att_srv_value_read+0x58>
10057df0:	360c      	adds	r6, #12
10057df2:	603e      	str	r6, [r7, #0]
10057df4:	2000      	movs	r0, #0
10057df6:	7028      	strb	r0, [r5, #0]
10057df8:	e029      	b.n	10057e4e <GAT_att_srv_value_read+0x76>
10057dfa:	9202      	str	r2, [sp, #8]
10057dfc:	68b0      	ldr	r0, [r6, #8]
10057dfe:	8900      	ldrh	r0, [r0, #8]
10057e00:	9101      	str	r1, [sp, #4]
10057e02:	463a      	mov	r2, r7
10057e04:	462b      	mov	r3, r5
10057e06:	f000 fb66 	bl	100584d6 <GAT_srv_attr_value_read>
10057e0a:	2800      	cmp	r0, #0
10057e0c:	d012      	beq.n	10057e34 <GAT_att_srv_value_read+0x5c>
10057e0e:	2884      	cmp	r0, #132	@ 0x84
10057e10:	d11d      	bne.n	10057e4e <GAT_att_srv_value_read+0x76>
10057e12:	9801      	ldr	r0, [sp, #4]
10057e14:	8843      	ldrh	r3, [r0, #2]
10057e16:	68b0      	ldr	r0, [r6, #8]
10057e18:	8942      	ldrh	r2, [r0, #10]
10057e1a:	8901      	ldrh	r1, [r0, #8]
10057e1c:	9802      	ldr	r0, [sp, #8]
10057e1e:	9000      	str	r0, [sp, #0]
10057e20:	2002      	movs	r0, #2
10057e22:	f00b fcd9 	bl	100637d8 <aci_gatt_srv_read_event_push_noinline>
10057e26:	2800      	cmp	r0, #0
10057e28:	d111      	bne.n	10057e4e <GAT_att_srv_value_read+0x76>
10057e2a:	207b      	movs	r0, #123	@ 0x7b
10057e2c:	43c0      	mvns	r0, r0
10057e2e:	e00e      	b.n	10057e4e <GAT_att_srv_value_read+0x76>
10057e30:	200e      	movs	r0, #14
10057e32:	e005      	b.n	10057e40 <GAT_att_srv_value_read+0x68>
10057e34:	6838      	ldr	r0, [r7, #0]
10057e36:	8801      	ldrh	r1, [r0, #0]
10057e38:	9a02      	ldr	r2, [sp, #8]
10057e3a:	4291      	cmp	r1, r2
10057e3c:	d203      	bcs.n	10057e46 <GAT_att_srv_value_read+0x6e>
10057e3e:	2007      	movs	r0, #7
10057e40:	7028      	strb	r0, [r5, #0]
10057e42:	2086      	movs	r0, #134	@ 0x86
10057e44:	e003      	b.n	10057e4e <GAT_att_srv_value_read+0x76>
10057e46:	6841      	ldr	r1, [r0, #4]
10057e48:	1889      	adds	r1, r1, r2
10057e4a:	6041      	str	r1, [r0, #4]
10057e4c:	4620      	mov	r0, r4
10057e4e:	b2c0      	uxtb	r0, r0
10057e50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10057e52 <ACL_pkt_read_8b>:
10057e52:	b51c      	push	{r2, r3, r4, lr}
10057e54:	291f      	cmp	r1, #31
10057e56:	d803      	bhi.n	10057e60 <ACL_pkt_read_8b+0xe>
10057e58:	aa01      	add	r2, sp, #4
10057e5a:	8011      	strh	r1, [r2, #0]
10057e5c:	6840      	ldr	r0, [r0, #4]
10057e5e:	e005      	b.n	10057e6c <ACL_pkt_read_8b+0x1a>
10057e60:	6840      	ldr	r0, [r0, #4]
10057e62:	ac01      	add	r4, sp, #4
10057e64:	4622      	mov	r2, r4
10057e66:	f008 ff54 	bl	10060d12 <Mem_Buff_get_buff_off>
10057e6a:	8821      	ldrh	r1, [r4, #0]
10057e6c:	1840      	adds	r0, r0, r1
10057e6e:	7900      	ldrb	r0, [r0, #4]
10057e70:	bd1c      	pop	{r2, r3, r4, pc}

10057e72 <GAT_att_srv_set_attr_value_check>:
10057e72:	b5f0      	push	{r4, r5, r6, r7, lr}
10057e74:	b085      	sub	sp, #20
10057e76:	461e      	mov	r6, r3
10057e78:	4614      	mov	r4, r2
10057e7a:	460f      	mov	r7, r1
10057e7c:	4605      	mov	r5, r0
10057e7e:	a801      	add	r0, sp, #4
10057e80:	8101      	strh	r1, [r0, #8]
10057e82:	7102      	strb	r2, [r0, #4]
10057e84:	68a9      	ldr	r1, [r5, #8]
10057e86:	9101      	str	r1, [sp, #4]
10057e88:	f000 fe06 	bl	10058a98 <GAT_srv_check_change_aware>
10057e8c:	2886      	cmp	r0, #134	@ 0x86
10057e8e:	d101      	bne.n	10057e94 <GAT_att_srv_set_attr_value_check+0x22>
10057e90:	2012      	movs	r0, #18
10057e92:	e00c      	b.n	10057eae <GAT_att_srv_set_attr_value_check+0x3c>
10057e94:	4638      	mov	r0, r7
10057e96:	f00c fd03 	bl	100648a0 <GAT_att_db_find_by_handle>
10057e9a:	6030      	str	r0, [r6, #0]
10057e9c:	2800      	cmp	r0, #0
10057e9e:	d005      	beq.n	10057eac <GAT_att_srv_set_attr_value_check+0x3a>
10057ea0:	68a9      	ldr	r1, [r5, #8]
10057ea2:	8909      	ldrh	r1, [r1, #8]
10057ea4:	4622      	mov	r2, r4
10057ea6:	f000 fb2f 	bl	10058508 <GAT_srv_check_perms>
10057eaa:	e000      	b.n	10057eae <GAT_att_srv_set_attr_value_check+0x3c>
10057eac:	2001      	movs	r0, #1
10057eae:	b005      	add	sp, #20
10057eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10057eb4 <GAT_srv_init>:
10057eb4:	b580      	push	{r7, lr}
10057eb6:	4806      	ldr	r0, [pc, #24]	@ (10057ed0 <__arm_cp.0_0>)
10057eb8:	8900      	ldrh	r0, [r0, #8]
10057eba:	3016      	adds	r0, #22
10057ebc:	b280      	uxth	r0, r0
10057ebe:	f00c fc8b 	bl	100647d8 <GAT_att_db_init>
10057ec2:	4804      	ldr	r0, [pc, #16]	@ (10057ed4 <__arm_cp.0_1>)
10057ec4:	6800      	ldr	r0, [r0, #0]
10057ec6:	215c      	movs	r1, #92	@ 0x5c
10057ec8:	2201      	movs	r2, #1
10057eca:	5442      	strb	r2, [r0, r1]
10057ecc:	bd80      	pop	{r7, pc}
10057ece:	46c0      	nop			@ (mov r8, r8)

10057ed0 <__arm_cp.0_0>:
10057ed0:	20002484 	.word	0x20002484

10057ed4 <__arm_cp.0_1>:
10057ed4:	20002428 	.word	0x20002428

10057ed8 <GAT_srv_connection>:
10057ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
10057eda:	b0a1      	sub	sp, #132	@ 0x84
10057edc:	4604      	mov	r4, r0
10057ede:	f000 f89b 	bl	10058018 <GAT_srv_is_bonded>
10057ee2:	2801      	cmp	r0, #1
10057ee4:	d114      	bne.n	10057f10 <GAT_srv_connection+0x38>
10057ee6:	a807      	add	r0, sp, #28
10057ee8:	4945      	ldr	r1, [pc, #276]	@ (10058000 <__arm_cp.1_0>)
10057eea:	2514      	movs	r5, #20
10057eec:	462a      	mov	r2, r5
10057eee:	f00f fe26 	bl	10067b3e <__aeabi_memcpy>
10057ef2:	a802      	add	r0, sp, #8
10057ef4:	4943      	ldr	r1, [pc, #268]	@ (10058004 <__arm_cp.1_1>)
10057ef6:	462a      	mov	r2, r5
10057ef8:	f00f fe21 	bl	10067b3e <__aeabi_memcpy>
10057efc:	2044      	movs	r0, #68	@ 0x44
10057efe:	900f      	str	r0, [sp, #60]	@ 0x3c
10057f00:	2101      	movs	r1, #1
10057f02:	aa0d      	add	r2, sp, #52	@ 0x34
10057f04:	ab0c      	add	r3, sp, #48	@ 0x30
10057f06:	4620      	mov	r0, r4
10057f08:	f00a fa87 	bl	1006241a <smp_sap_get_remote_address_check_addr_type>
10057f0c:	2800      	cmp	r0, #0
10057f0e:	d001      	beq.n	10057f14 <GAT_srv_connection+0x3c>
10057f10:	b021      	add	sp, #132	@ 0x84
10057f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057f14:	a80c      	add	r0, sp, #48	@ 0x30
10057f16:	7801      	ldrb	r1, [r0, #0]
10057f18:	a80d      	add	r0, sp, #52	@ 0x34
10057f1a:	aa0f      	add	r2, sp, #60	@ 0x3c
10057f1c:	ab10      	add	r3, sp, #64	@ 0x40
10057f1e:	f009 fb1a 	bl	10061556 <SDB_sap_read_peer_bonded_gatt_client_data>
10057f22:	2800      	cmp	r0, #0
10057f24:	d1f4      	bne.n	10057f10 <GAT_srv_connection+0x38>
10057f26:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10057f28:	2844      	cmp	r0, #68	@ 0x44
10057f2a:	d8f1      	bhi.n	10057f10 <GAT_srv_connection+0x38>
10057f2c:	2001      	movs	r0, #1
10057f2e:	4d36      	ldr	r5, [pc, #216]	@ (10058008 <__arm_cp.1_2>)
10057f30:	aa02      	add	r2, sp, #8
10057f32:	4629      	mov	r1, r5
10057f34:	f000 fe0c 	bl	10058b50 <GAT_srv_find_by_type_attr_p>
10057f38:	2800      	cmp	r0, #0
10057f3a:	d010      	beq.n	10057f5e <GAT_srv_connection+0x86>
10057f3c:	4606      	mov	r6, r0
10057f3e:	4620      	mov	r0, r4
10057f40:	f7fe fe54 	bl	10056bec <GAT_att_cmn_get_conn_index>
10057f44:	a910      	add	r1, sp, #64	@ 0x40
10057f46:	7c0a      	ldrb	r2, [r1, #16]
10057f48:	4930      	ldr	r1, [pc, #192]	@ (1005800c <__arm_cp.1_3>)
10057f4a:	7ac9      	ldrb	r1, [r1, #11]
10057f4c:	6873      	ldr	r3, [r6, #4]
10057f4e:	6a1b      	ldr	r3, [r3, #32]
10057f50:	689b      	ldr	r3, [r3, #8]
10057f52:	9300      	str	r3, [sp, #0]
10057f54:	0849      	lsrs	r1, r1, #1
10057f56:	1c4b      	adds	r3, r1, #1
10057f58:	2104      	movs	r1, #4
10057f5a:	f000 fd08 	bl	1005896e <GAT_srv_set_zip_val>
10057f5e:	482c      	ldr	r0, [pc, #176]	@ (10058010 <__arm_cp.1_4>)
10057f60:	6801      	ldr	r1, [r0, #0]
10057f62:	3183      	adds	r1, #131	@ 0x83
10057f64:	a810      	add	r0, sp, #64	@ 0x40
10057f66:	2210      	movs	r2, #16
10057f68:	f7fa fb94 	bl	10052694 <BLEPLAT_MemCmp>
10057f6c:	2800      	cmp	r0, #0
10057f6e:	d01f      	beq.n	10057fb0 <GAT_srv_connection+0xd8>
10057f70:	2001      	movs	r0, #1
10057f72:	aa07      	add	r2, sp, #28
10057f74:	4629      	mov	r1, r5
10057f76:	f000 fdeb 	bl	10058b50 <GAT_srv_find_by_type_attr_p>
10057f7a:	2800      	cmp	r0, #0
10057f7c:	d0c8      	beq.n	10057f10 <GAT_srv_connection+0x38>
10057f7e:	f000 fe3f 	bl	10058c00 <GAT_srv_get_cccd_attr_p>
10057f82:	2800      	cmp	r0, #0
10057f84:	d0c4      	beq.n	10057f10 <GAT_srv_connection+0x38>
10057f86:	4605      	mov	r5, r0
10057f88:	2104      	movs	r1, #4
10057f8a:	4620      	mov	r0, r4
10057f8c:	f7fe fd84 	bl	10056a98 <GAT_att_cmn_get_channel_descr_p>
10057f90:	8881      	ldrh	r1, [r0, #4]
10057f92:	2240      	movs	r2, #64	@ 0x40
10057f94:	430a      	orrs	r2, r1
10057f96:	8082      	strh	r2, [r0, #4]
10057f98:	a810      	add	r0, sp, #64	@ 0x40
10057f9a:	7c42      	ldrb	r2, [r0, #17]
10057f9c:	4620      	mov	r0, r4
10057f9e:	4629      	mov	r1, r5
10057fa0:	f000 fd26 	bl	100589f0 <GAT_srv_set_cccd_val>
10057fa4:	200b      	movs	r0, #11
10057fa6:	f00a fbeb 	bl	10062780 <tsk_notify_idx>
10057faa:	f7f9 fd6c 	bl	10051a86 <BLE_STACK_ProcessRequest>
10057fae:	e7af      	b.n	10057f10 <GAT_srv_connection+0x38>
10057fb0:	2001      	movs	r0, #1
10057fb2:	f00c fc9d 	bl	100648f0 <GAT_att_db_find_from_handle>
10057fb6:	4606      	mov	r6, r0
10057fb8:	ad10      	add	r5, sp, #64	@ 0x40
10057fba:	3512      	adds	r5, #18
10057fbc:	2700      	movs	r7, #0
10057fbe:	2e00      	cmp	r6, #0
10057fc0:	d0a6      	beq.n	10057f10 <GAT_srv_connection+0x38>
10057fc2:	b2b8      	uxth	r0, r7
10057fc4:	2863      	cmp	r0, #99	@ 0x63
10057fc6:	d8a3      	bhi.n	10057f10 <GAT_srv_connection+0x38>
10057fc8:	7831      	ldrb	r1, [r6, #0]
10057fca:	2904      	cmp	r1, #4
10057fcc:	d112      	bne.n	10057ff4 <GAT_srv_connection+0x11c>
10057fce:	6871      	ldr	r1, [r6, #4]
10057fd0:	7d0a      	ldrb	r2, [r1, #20]
10057fd2:	2a10      	cmp	r2, #16
10057fd4:	d10e      	bne.n	10057ff4 <GAT_srv_connection+0x11c>
10057fd6:	8a09      	ldrh	r1, [r1, #16]
10057fd8:	4a0e      	ldr	r2, [pc, #56]	@ (10058014 <__arm_cp.1_5>)
10057fda:	4291      	cmp	r1, r2
10057fdc:	d10a      	bne.n	10057ff4 <GAT_srv_connection+0x11c>
10057fde:	2102      	movs	r1, #2
10057fe0:	2232      	movs	r2, #50	@ 0x32
10057fe2:	462b      	mov	r3, r5
10057fe4:	f000 fcb0 	bl	10058948 <GAT_srv_get_zip_val>
10057fe8:	4602      	mov	r2, r0
10057fea:	4620      	mov	r0, r4
10057fec:	4631      	mov	r1, r6
10057fee:	f000 fcff 	bl	100589f0 <GAT_srv_set_cccd_val>
10057ff2:	1c7f      	adds	r7, r7, #1
10057ff4:	4630      	mov	r0, r6
10057ff6:	f00c fcdd 	bl	100649b4 <GAT_att_db_get_next>
10057ffa:	4606      	mov	r6, r0
10057ffc:	e7df      	b.n	10057fbe <GAT_srv_connection+0xe6>
10057ffe:	46c0      	nop			@ (mov r8, r8)

10058000 <__arm_cp.1_0>:
10058000:	10069674 	.word	0x10069674

10058004 <__arm_cp.1_1>:
10058004:	10069688 	.word	0x10069688

10058008 <__arm_cp.1_2>:
10058008:	0000ffff 	.word	0x0000ffff

1005800c <__arm_cp.1_3>:
1005800c:	20002484 	.word	0x20002484

10058010 <__arm_cp.1_4>:
10058010:	20002428 	.word	0x20002428

10058014 <__arm_cp.1_5>:
10058014:	00002902 	.word	0x00002902

10058018 <GAT_srv_is_bonded>:
10058018:	b580      	push	{r7, lr}
1005801a:	f00a fa34 	bl	10062486 <smp_sap_check_is_peer_device_bonded>
1005801e:	4241      	negs	r1, r0
10058020:	4148      	adcs	r0, r1
10058022:	bd80      	pop	{r7, pc}

10058024 <GAT_srv_bearer_close>:
10058024:	b5f0      	push	{r4, r5, r6, r7, lr}
10058026:	b0a1      	sub	sp, #132	@ 0x84
10058028:	2904      	cmp	r1, #4
1005802a:	d000      	beq.n	1005802e <GAT_srv_bearer_close+0xa>
1005802c:	e0de      	b.n	100581ec <GAT_srv_bearer_close+0x1c8>
1005802e:	4607      	mov	r7, r0
10058030:	f7ff fff2 	bl	10058018 <GAT_srv_is_bonded>
10058034:	4c6e      	ldr	r4, [pc, #440]	@ (100581f0 <__arm_cp.3_0>)
10058036:	4e6f      	ldr	r6, [pc, #444]	@ (100581f4 <__arm_cp.3_1>)
10058038:	2801      	cmp	r0, #1
1005803a:	d000      	beq.n	1005803e <GAT_srv_bearer_close+0x1a>
1005803c:	e0a0      	b.n	10058180 <GAT_srv_bearer_close+0x15c>
1005803e:	ad0b      	add	r5, sp, #44	@ 0x2c
10058040:	496d      	ldr	r1, [pc, #436]	@ (100581f8 <__arm_cp.3_2>)
10058042:	2214      	movs	r2, #20
10058044:	4628      	mov	r0, r5
10058046:	f00f fd7a 	bl	10067b3e <__aeabi_memcpy>
1005804a:	a810      	add	r0, sp, #64	@ 0x40
1005804c:	4634      	mov	r4, r6
1005804e:	2600      	movs	r6, #0
10058050:	2244      	movs	r2, #68	@ 0x44
10058052:	4631      	mov	r1, r6
10058054:	f7fa fb0e 	bl	10052674 <BLEPLAT_MemSet>
10058058:	2001      	movs	r0, #1
1005805a:	4621      	mov	r1, r4
1005805c:	462a      	mov	r2, r5
1005805e:	f000 fd77 	bl	10058b50 <GAT_srv_find_by_type_attr_p>
10058062:	2800      	cmp	r0, #0
10058064:	d00f      	beq.n	10058086 <GAT_srv_bearer_close+0x62>
10058066:	4604      	mov	r4, r0
10058068:	4638      	mov	r0, r7
1005806a:	f7fe fdbf 	bl	10056bec <GAT_att_cmn_get_conn_index>
1005806e:	6861      	ldr	r1, [r4, #4]
10058070:	6a09      	ldr	r1, [r1, #32]
10058072:	688b      	ldr	r3, [r1, #8]
10058074:	4961      	ldr	r1, [pc, #388]	@ (100581fc <__arm_cp.3_3>)
10058076:	7ac9      	ldrb	r1, [r1, #11]
10058078:	0849      	lsrs	r1, r1, #1
1005807a:	1c4a      	adds	r2, r1, #1
1005807c:	2104      	movs	r1, #4
1005807e:	f000 fc63 	bl	10058948 <GAT_srv_get_zip_val>
10058082:	a910      	add	r1, sp, #64	@ 0x40
10058084:	7408      	strb	r0, [r1, #16]
10058086:	2104      	movs	r1, #4
10058088:	9704      	str	r7, [sp, #16]
1005808a:	4638      	mov	r0, r7
1005808c:	f7fe fd04 	bl	10056a98 <GAT_att_cmn_get_channel_descr_p>
10058090:	a910      	add	r1, sp, #64	@ 0x40
10058092:	7c09      	ldrb	r1, [r1, #16]
10058094:	2901      	cmp	r1, #1
10058096:	d103      	bne.n	100580a0 <GAT_srv_bearer_close+0x7c>
10058098:	8880      	ldrh	r0, [r0, #4]
1005809a:	0600      	lsls	r0, r0, #24
1005809c:	0f80      	lsrs	r0, r0, #30
1005809e:	d106      	bne.n	100580ae <GAT_srv_bearer_close+0x8a>
100580a0:	4857      	ldr	r0, [pc, #348]	@ (10058200 <__arm_cp.3_4>)
100580a2:	6801      	ldr	r1, [r0, #0]
100580a4:	3183      	adds	r1, #131	@ 0x83
100580a6:	a810      	add	r0, sp, #64	@ 0x40
100580a8:	2210      	movs	r2, #16
100580aa:	f7fa fad3 	bl	10052654 <BLEPLAT_MemCpy>
100580ae:	2001      	movs	r0, #1
100580b0:	9003      	str	r0, [sp, #12]
100580b2:	f00c fc1d 	bl	100648f0 <GAT_att_db_find_from_handle>
100580b6:	4605      	mov	r5, r0
100580b8:	a810      	add	r0, sp, #64	@ 0x40
100580ba:	3012      	adds	r0, #18
100580bc:	9002      	str	r0, [sp, #8]
100580be:	9605      	str	r6, [sp, #20]
100580c0:	4c4b      	ldr	r4, [pc, #300]	@ (100581f0 <__arm_cp.3_0>)
100580c2:	2d00      	cmp	r5, #0
100580c4:	d034      	beq.n	10058130 <GAT_srv_bearer_close+0x10c>
100580c6:	b2b7      	uxth	r7, r6
100580c8:	2f63      	cmp	r7, #99	@ 0x63
100580ca:	d831      	bhi.n	10058130 <GAT_srv_bearer_close+0x10c>
100580cc:	7828      	ldrb	r0, [r5, #0]
100580ce:	2804      	cmp	r0, #4
100580d0:	d00b      	beq.n	100580ea <GAT_srv_bearer_close+0xc6>
100580d2:	2802      	cmp	r0, #2
100580d4:	d127      	bne.n	10058126 <GAT_srv_bearer_close+0x102>
100580d6:	6868      	ldr	r0, [r5, #4]
100580d8:	7d01      	ldrb	r1, [r0, #20]
100580da:	2910      	cmp	r1, #16
100580dc:	d121      	bne.n	10058122 <GAT_srv_bearer_close+0xfe>
100580de:	8a00      	ldrh	r0, [r0, #16]
100580e0:	4949      	ldr	r1, [pc, #292]	@ (10058208 <__arm_cp.3_6>)
100580e2:	4288      	cmp	r0, r1
100580e4:	d11d      	bne.n	10058122 <GAT_srv_bearer_close+0xfe>
100580e6:	9803      	ldr	r0, [sp, #12]
100580e8:	e01c      	b.n	10058124 <GAT_srv_bearer_close+0x100>
100580ea:	6868      	ldr	r0, [r5, #4]
100580ec:	7d01      	ldrb	r1, [r0, #20]
100580ee:	2910      	cmp	r1, #16
100580f0:	d119      	bne.n	10058126 <GAT_srv_bearer_close+0x102>
100580f2:	8a00      	ldrh	r0, [r0, #16]
100580f4:	42a0      	cmp	r0, r4
100580f6:	d116      	bne.n	10058126 <GAT_srv_bearer_close+0x102>
100580f8:	9804      	ldr	r0, [sp, #16]
100580fa:	4629      	mov	r1, r5
100580fc:	f000 fdb0 	bl	10058c60 <GAT_srv_get_cccd_val>
10058100:	4604      	mov	r4, r0
10058102:	9802      	ldr	r0, [sp, #8]
10058104:	9000      	str	r0, [sp, #0]
10058106:	b2e2      	uxtb	r2, r4
10058108:	2102      	movs	r1, #2
1005810a:	2332      	movs	r3, #50	@ 0x32
1005810c:	4638      	mov	r0, r7
1005810e:	f000 fc2e 	bl	1005896e <GAT_srv_set_zip_val>
10058112:	9805      	ldr	r0, [sp, #20]
10058114:	2801      	cmp	r0, #1
10058116:	d101      	bne.n	1005811c <GAT_srv_bearer_close+0xf8>
10058118:	a810      	add	r0, sp, #64	@ 0x40
1005811a:	7444      	strb	r4, [r0, #17]
1005811c:	1c76      	adds	r6, r6, #1
1005811e:	4c34      	ldr	r4, [pc, #208]	@ (100581f0 <__arm_cp.3_0>)
10058120:	e001      	b.n	10058126 <GAT_srv_bearer_close+0x102>
10058122:	2000      	movs	r0, #0
10058124:	9005      	str	r0, [sp, #20]
10058126:	4628      	mov	r0, r5
10058128:	f00c fc44 	bl	100649b4 <GAT_att_db_get_next>
1005812c:	4605      	mov	r5, r0
1005812e:	e7c8      	b.n	100580c2 <GAT_srv_bearer_close+0x9e>
10058130:	2101      	movs	r1, #1
10058132:	aa09      	add	r2, sp, #36	@ 0x24
10058134:	ab08      	add	r3, sp, #32
10058136:	9f04      	ldr	r7, [sp, #16]
10058138:	4638      	mov	r0, r7
1005813a:	f00a f96e 	bl	1006241a <smp_sap_get_remote_address_check_addr_type>
1005813e:	2800      	cmp	r0, #0
10058140:	d11c      	bne.n	1005817c <GAT_srv_bearer_close+0x158>
10058142:	b2b0      	uxth	r0, r6
10058144:	0040      	lsls	r0, r0, #1
10058146:	492f      	ldr	r1, [pc, #188]	@ (10058204 <__arm_cp.3_5>)
10058148:	1840      	adds	r0, r0, r1
1005814a:	0880      	lsrs	r0, r0, #2
1005814c:	3013      	adds	r0, #19
1005814e:	b282      	uxth	r2, r0
10058150:	a808      	add	r0, sp, #32
10058152:	7801      	ldrb	r1, [r0, #0]
10058154:	a809      	add	r0, sp, #36	@ 0x24
10058156:	ab10      	add	r3, sp, #64	@ 0x40
10058158:	f009 f9cb 	bl	100614f2 <SDB_sap_write_peer_bonded_gatt_client_data>
1005815c:	2800      	cmp	r0, #0
1005815e:	d00d      	beq.n	1005817c <GAT_srv_bearer_close+0x158>
10058160:	4604      	mov	r4, r0
10058162:	ad06      	add	r5, sp, #24
10058164:	a909      	add	r1, sp, #36	@ 0x24
10058166:	2206      	movs	r2, #6
10058168:	4628      	mov	r0, r5
1005816a:	f7fa fa73 	bl	10052654 <BLEPLAT_MemCpy>
1005816e:	71ac      	strb	r4, [r5, #6]
10058170:	2042      	movs	r0, #66	@ 0x42
10058172:	2104      	movs	r1, #4
10058174:	2207      	movs	r2, #7
10058176:	462b      	mov	r3, r5
10058178:	f00b fef8 	bl	10063f6c <aci_hal_fw_error_event_push_noinline>
1005817c:	4e1d      	ldr	r6, [pc, #116]	@ (100581f4 <__arm_cp.3_1>)
1005817e:	4c1c      	ldr	r4, [pc, #112]	@ (100581f0 <__arm_cp.3_0>)
10058180:	2001      	movs	r0, #1
10058182:	f00c fbb5 	bl	100648f0 <GAT_att_db_find_from_handle>
10058186:	4605      	mov	r5, r0
10058188:	2800      	cmp	r0, #0
1005818a:	d012      	beq.n	100581b2 <GAT_srv_bearer_close+0x18e>
1005818c:	7828      	ldrb	r0, [r5, #0]
1005818e:	2804      	cmp	r0, #4
10058190:	d10b      	bne.n	100581aa <GAT_srv_bearer_close+0x186>
10058192:	6868      	ldr	r0, [r5, #4]
10058194:	7d01      	ldrb	r1, [r0, #20]
10058196:	2910      	cmp	r1, #16
10058198:	d107      	bne.n	100581aa <GAT_srv_bearer_close+0x186>
1005819a:	8a00      	ldrh	r0, [r0, #16]
1005819c:	42a0      	cmp	r0, r4
1005819e:	d104      	bne.n	100581aa <GAT_srv_bearer_close+0x186>
100581a0:	2200      	movs	r2, #0
100581a2:	4638      	mov	r0, r7
100581a4:	4629      	mov	r1, r5
100581a6:	f000 fc23 	bl	100589f0 <GAT_srv_set_cccd_val>
100581aa:	4628      	mov	r0, r5
100581ac:	f00c fc02 	bl	100649b4 <GAT_att_db_get_next>
100581b0:	e7e9      	b.n	10058186 <GAT_srv_bearer_close+0x162>
100581b2:	ac10      	add	r4, sp, #64	@ 0x40
100581b4:	4910      	ldr	r1, [pc, #64]	@ (100581f8 <__arm_cp.3_2>)
100581b6:	2214      	movs	r2, #20
100581b8:	4620      	mov	r0, r4
100581ba:	f00f fcc0 	bl	10067b3e <__aeabi_memcpy>
100581be:	2001      	movs	r0, #1
100581c0:	4631      	mov	r1, r6
100581c2:	4622      	mov	r2, r4
100581c4:	f000 fcc4 	bl	10058b50 <GAT_srv_find_by_type_attr_p>
100581c8:	2800      	cmp	r0, #0
100581ca:	d00f      	beq.n	100581ec <GAT_srv_bearer_close+0x1c8>
100581cc:	4604      	mov	r4, r0
100581ce:	4638      	mov	r0, r7
100581d0:	f7fe fd0c 	bl	10056bec <GAT_att_cmn_get_conn_index>
100581d4:	4909      	ldr	r1, [pc, #36]	@ (100581fc <__arm_cp.3_3>)
100581d6:	7ac9      	ldrb	r1, [r1, #11]
100581d8:	6862      	ldr	r2, [r4, #4]
100581da:	6a12      	ldr	r2, [r2, #32]
100581dc:	6892      	ldr	r2, [r2, #8]
100581de:	9200      	str	r2, [sp, #0]
100581e0:	0849      	lsrs	r1, r1, #1
100581e2:	1c4b      	adds	r3, r1, #1
100581e4:	2104      	movs	r1, #4
100581e6:	2200      	movs	r2, #0
100581e8:	f000 fbc1 	bl	1005896e <GAT_srv_set_zip_val>
100581ec:	b021      	add	sp, #132	@ 0x84
100581ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

100581f0 <__arm_cp.3_0>:
100581f0:	00002902 	.word	0x00002902

100581f4 <__arm_cp.3_1>:
100581f4:	0000ffff 	.word	0x0000ffff

100581f8 <__arm_cp.3_2>:
100581f8:	10069688 	.word	0x10069688

100581fc <__arm_cp.3_3>:
100581fc:	20002484 	.word	0x20002484

10058200 <__arm_cp.3_4>:
10058200:	20002428 	.word	0x20002428

10058204 <__arm_cp.3_5>:
10058204:	0003fffe 	.word	0x0003fffe

10058208 <__arm_cp.3_6>:
10058208:	00002a05 	.word	0x00002a05

1005820c <GAT_srv_db_hash_tsk>:
1005820c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005820e:	b0d3      	sub	sp, #332	@ 0x14c
10058210:	2500      	movs	r5, #0
10058212:	950c      	str	r5, [sp, #48]	@ 0x30
10058214:	950b      	str	r5, [sp, #44]	@ 0x2c
10058216:	950a      	str	r5, [sp, #40]	@ 0x28
10058218:	9509      	str	r5, [sp, #36]	@ 0x24
1005821a:	2041      	movs	r0, #65	@ 0x41
1005821c:	0082      	lsls	r2, r0, #2
1005821e:	ac0d      	add	r4, sp, #52	@ 0x34
10058220:	4620      	mov	r0, r4
10058222:	4629      	mov	r1, r5
10058224:	f7fa fa26 	bl	10052674 <BLEPLAT_MemSet>
10058228:	7125      	strb	r5, [r4, #4]
1005822a:	2010      	movs	r0, #16
1005822c:	9044      	str	r0, [sp, #272]	@ 0x110
1005822e:	9016      	str	r0, [sp, #88]	@ 0x58
10058230:	a809      	add	r0, sp, #36	@ 0x24
10058232:	900f      	str	r0, [sp, #60]	@ 0x3c
10058234:	4620      	mov	r0, r4
10058236:	f7fa fa6a 	bl	1005270e <BLEPLAT_AesCMACEncryptInit>
1005823a:	34dc      	adds	r4, #220	@ 0xdc
1005823c:	9401      	str	r4, [sp, #4]
1005823e:	2001      	movs	r0, #1
10058240:	f00c fb56 	bl	100648f0 <GAT_att_db_find_from_handle>
10058244:	4606      	mov	r6, r0
10058246:	a84e      	add	r0, sp, #312	@ 0x138
10058248:	300c      	adds	r0, #12
1005824a:	9002      	str	r0, [sp, #8]
1005824c:	4d48      	ldr	r5, [pc, #288]	@ (10058370 <__arm_cp.5_2>)
1005824e:	2e00      	cmp	r6, #0
10058250:	d041      	beq.n	100582d6 <GAT_srv_db_hash_tsk+0xca>
10058252:	7830      	ldrb	r0, [r6, #0]
10058254:	2803      	cmp	r0, #3
10058256:	d039      	beq.n	100582cc <GAT_srv_db_hash_tsk+0xc0>
10058258:	af4e      	add	r7, sp, #312	@ 0x138
1005825a:	4630      	mov	r0, r6
1005825c:	4639      	mov	r1, r7
1005825e:	f000 f907 	bl	10058470 <GAT_srv_get_attr_type>
10058262:	7c38      	ldrb	r0, [r7, #16]
10058264:	2810      	cmp	r0, #16
10058266:	d131      	bne.n	100582cc <GAT_srv_db_hash_tsk+0xc0>
10058268:	8870      	ldrh	r0, [r6, #2]
1005826a:	a904      	add	r1, sp, #16
1005826c:	8008      	strh	r0, [r1, #0]
1005826e:	a84e      	add	r0, sp, #312	@ 0x138
10058270:	8980      	ldrh	r0, [r0, #12]
10058272:	493d      	ldr	r1, [pc, #244]	@ (10058368 <__arm_cp.5_0>)
10058274:	1841      	adds	r1, r0, r1
10058276:	2905      	cmp	r1, #5
10058278:	d31c      	bcc.n	100582b4 <GAT_srv_db_hash_tsk+0xa8>
1005827a:	493c      	ldr	r1, [pc, #240]	@ (1005836c <__arm_cp.5_1>)
1005827c:	1841      	adds	r1, r0, r1
1005827e:	2904      	cmp	r1, #4
10058280:	d303      	bcc.n	1005828a <GAT_srv_db_hash_tsk+0x7e>
10058282:	2129      	movs	r1, #41	@ 0x29
10058284:	0209      	lsls	r1, r1, #8
10058286:	4288      	cmp	r0, r1
10058288:	d120      	bne.n	100582cc <GAT_srv_db_hash_tsk+0xc0>
1005828a:	af0d      	add	r7, sp, #52	@ 0x34
1005828c:	2402      	movs	r4, #2
1005828e:	aa04      	add	r2, sp, #16
10058290:	4638      	mov	r0, r7
10058292:	4621      	mov	r1, r4
10058294:	47a8      	blx	r5
10058296:	4638      	mov	r0, r7
10058298:	4621      	mov	r1, r4
1005829a:	9a02      	ldr	r2, [sp, #8]
1005829c:	47a8      	blx	r5
1005829e:	2000      	movs	r0, #0
100582a0:	aa05      	add	r2, sp, #20
100582a2:	4631      	mov	r1, r6
100582a4:	f000 f9a6 	bl	100585f4 <GAT_srv_get_attr_value>
100582a8:	9805      	ldr	r0, [sp, #20]
100582aa:	6842      	ldr	r2, [r0, #4]
100582ac:	8801      	ldrh	r1, [r0, #0]
100582ae:	4638      	mov	r0, r7
100582b0:	47a8      	blx	r5
100582b2:	e00b      	b.n	100582cc <GAT_srv_db_hash_tsk+0xc0>
100582b4:	ac0d      	add	r4, sp, #52	@ 0x34
100582b6:	2702      	movs	r7, #2
100582b8:	aa04      	add	r2, sp, #16
100582ba:	4620      	mov	r0, r4
100582bc:	4639      	mov	r1, r7
100582be:	f000 fcdb 	bl	10058c78 <GAT_srv_aes_cmac_append>
100582c2:	4620      	mov	r0, r4
100582c4:	4639      	mov	r1, r7
100582c6:	9a02      	ldr	r2, [sp, #8]
100582c8:	f000 fcd6 	bl	10058c78 <GAT_srv_aes_cmac_append>
100582cc:	4630      	mov	r0, r6
100582ce:	f00c fb71 	bl	100649b4 <GAT_att_db_get_next>
100582d2:	4606      	mov	r6, r0
100582d4:	e7bb      	b.n	1005824e <GAT_srv_db_hash_tsk+0x42>
100582d6:	9801      	ldr	r0, [sp, #4]
100582d8:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
100582da:	2a00      	cmp	r2, #0
100582dc:	d006      	beq.n	100582ec <GAT_srv_db_hash_tsk+0xe0>
100582de:	a80d      	add	r0, sp, #52	@ 0x34
100582e0:	2120      	movs	r1, #32
100582e2:	7101      	strb	r1, [r0, #4]
100582e4:	4601      	mov	r1, r0
100582e6:	31e0      	adds	r1, #224	@ 0xe0
100582e8:	f7fa fa1e 	bl	10052728 <BLEPLAT_AesCMACEncryptAppend>
100582ec:	a80d      	add	r0, sp, #52	@ 0x34
100582ee:	ac4e      	add	r4, sp, #312	@ 0x138
100582f0:	aa04      	add	r2, sp, #16
100582f2:	4621      	mov	r1, r4
100582f4:	f7fa fa29 	bl	1005274a <BLEPLAT_AesCMACEncryptFinish>
100582f8:	ad05      	add	r5, sp, #20
100582fa:	2610      	movs	r6, #16
100582fc:	2301      	movs	r3, #1
100582fe:	4628      	mov	r0, r5
10058300:	4621      	mov	r1, r4
10058302:	4632      	mov	r2, r6
10058304:	f00a fba2 	bl	10062a4c <copy_swap_buffer>
10058308:	4f1a      	ldr	r7, [pc, #104]	@ (10058374 <__arm_cp.5_3>)
1005830a:	6839      	ldr	r1, [r7, #0]
1005830c:	3183      	adds	r1, #131	@ 0x83
1005830e:	4628      	mov	r0, r5
10058310:	4632      	mov	r2, r6
10058312:	f7fa f9bf 	bl	10052694 <BLEPLAT_MemCmp>
10058316:	2800      	cmp	r0, #0
10058318:	d019      	beq.n	1005834e <GAT_srv_db_hash_tsk+0x142>
1005831a:	6838      	ldr	r0, [r7, #0]
1005831c:	3083      	adds	r0, #131	@ 0x83
1005831e:	a905      	add	r1, sp, #20
10058320:	2210      	movs	r2, #16
10058322:	f7fa f997 	bl	10052654 <BLEPLAT_MemCpy>
10058326:	ad03      	add	r5, sp, #12
10058328:	2082      	movs	r0, #130	@ 0x82
1005832a:	8028      	strh	r0, [r5, #0]
1005832c:	9500      	str	r5, [sp, #0]
1005832e:	2400      	movs	r4, #0
10058330:	4b11      	ldr	r3, [pc, #68]	@ (10058378 <__arm_cp.5_4>)
10058332:	4620      	mov	r0, r4
10058334:	4621      	mov	r1, r4
10058336:	4622      	mov	r2, r4
10058338:	f7fe faf0 	bl	1005691c <GAT_att_cmn_for_each_ch_descr>
1005833c:	2040      	movs	r0, #64	@ 0x40
1005833e:	8028      	strh	r0, [r5, #0]
10058340:	9500      	str	r5, [sp, #0]
10058342:	4b0e      	ldr	r3, [pc, #56]	@ (1005837c <__arm_cp.5_5>)
10058344:	4620      	mov	r0, r4
10058346:	4621      	mov	r1, r4
10058348:	4622      	mov	r2, r4
1005834a:	f7fe fae7 	bl	1005691c <GAT_att_cmn_for_each_ch_descr>
1005834e:	6838      	ldr	r0, [r7, #0]
10058350:	215c      	movs	r1, #92	@ 0x5c
10058352:	5c42      	ldrb	r2, [r0, r1]
10058354:	23fd      	movs	r3, #253	@ 0xfd
10058356:	4013      	ands	r3, r2
10058358:	5443      	strb	r3, [r0, r1]
1005835a:	200b      	movs	r0, #11
1005835c:	f00a fa10 	bl	10062780 <tsk_notify_idx>
10058360:	f7f9 fb91 	bl	10051a86 <BLE_STACK_ProcessRequest>
10058364:	b053      	add	sp, #332	@ 0x14c
10058366:	bdf0      	pop	{r4, r5, r6, r7, pc}

10058368 <__arm_cp.5_0>:
10058368:	ffffd6ff 	.word	0xffffd6ff

1005836c <__arm_cp.5_1>:
1005836c:	ffffd800 	.word	0xffffd800

10058370 <__arm_cp.5_2>:
10058370:	10058c79 	.word	0x10058c79

10058374 <__arm_cp.5_3>:
10058374:	20002428 	.word	0x20002428

10058378 <__arm_cp.5_4>:
10058378:	10056be1 	.word	0x10056be1

1005837c <__arm_cp.5_5>:
1005837c:	10056bd5 	.word	0x10056bd5

10058380 <GAT_srv_send_srv_change_tsk>:
10058380:	b5e0      	push	{r5, r6, r7, lr}
10058382:	2100      	movs	r1, #0
10058384:	9100      	str	r1, [sp, #0]
10058386:	2002      	movs	r0, #2
10058388:	2204      	movs	r2, #4
1005838a:	4b07      	ldr	r3, [pc, #28]	@ (100583a8 <__arm_cp.7_0>)
1005838c:	f7fe fac6 	bl	1005691c <GAT_att_cmn_for_each_ch_descr>
10058390:	2800      	cmp	r0, #0
10058392:	d001      	beq.n	10058398 <GAT_srv_send_srv_change_tsk+0x18>
10058394:	2881      	cmp	r0, #129	@ 0x81
10058396:	d100      	bne.n	1005839a <GAT_srv_send_srv_change_tsk+0x1a>
10058398:	bd8c      	pop	{r2, r3, r7, pc}
1005839a:	200b      	movs	r0, #11
1005839c:	f00a f9f0 	bl	10062780 <tsk_notify_idx>
100583a0:	f7f9 fb71 	bl	10051a86 <BLE_STACK_ProcessRequest>
100583a4:	bd8c      	pop	{r2, r3, r7, pc}
100583a6:	46c0      	nop			@ (mov r8, r8)

100583a8 <__arm_cp.7_0>:
100583a8:	100583ad 	.word	0x100583ad

100583ac <GAT_srv_tx_service_change>:
100583ac:	b5b0      	push	{r4, r5, r7, lr}
100583ae:	b08a      	sub	sp, #40	@ 0x28
100583b0:	4604      	mov	r4, r0
100583b2:	8880      	ldrh	r0, [r0, #4]
100583b4:	0640      	lsls	r0, r0, #25
100583b6:	d401      	bmi.n	100583bc <GAT_srv_tx_service_change+0x10>
100583b8:	2500      	movs	r5, #0
100583ba:	e04b      	b.n	10058454 <GAT_srv_tx_service_change+0xa8>
100583bc:	a809      	add	r0, sp, #36	@ 0x24
100583be:	2180      	movs	r1, #128	@ 0x80
100583c0:	8001      	strh	r1, [r0, #0]
100583c2:	8921      	ldrh	r1, [r4, #8]
100583c4:	9000      	str	r0, [sp, #0]
100583c6:	2001      	movs	r0, #1
100583c8:	2500      	movs	r5, #0
100583ca:	4b24      	ldr	r3, [pc, #144]	@ (1005845c <__arm_cp.8_0>)
100583cc:	462a      	mov	r2, r5
100583ce:	f7fe faa5 	bl	1005691c <GAT_att_cmn_for_each_ch_descr>
100583d2:	88a1      	ldrh	r1, [r4, #4]
100583d4:	0789      	lsls	r1, r1, #30
100583d6:	d43d      	bmi.n	10058454 <GAT_srv_tx_service_change+0xa8>
100583d8:	2800      	cmp	r0, #0
100583da:	d13b      	bne.n	10058454 <GAT_srv_tx_service_change+0xa8>
100583dc:	ad04      	add	r5, sp, #16
100583de:	4920      	ldr	r1, [pc, #128]	@ (10058460 <__arm_cp.8_1>)
100583e0:	2214      	movs	r2, #20
100583e2:	4628      	mov	r0, r5
100583e4:	f00f fbab 	bl	10067b3e <__aeabi_memcpy>
100583e8:	2001      	movs	r0, #1
100583ea:	491e      	ldr	r1, [pc, #120]	@ (10058464 <__arm_cp.8_2>)
100583ec:	462a      	mov	r2, r5
100583ee:	f000 fbaf 	bl	10058b50 <GAT_srv_find_by_type_attr_p>
100583f2:	2800      	cmp	r0, #0
100583f4:	d012      	beq.n	1005841c <GAT_srv_tx_service_change+0x70>
100583f6:	4605      	mov	r5, r0
100583f8:	f000 fc02 	bl	10058c00 <GAT_srv_get_cccd_attr_p>
100583fc:	2800      	cmp	r0, #0
100583fe:	d00d      	beq.n	1005841c <GAT_srv_tx_service_change+0x70>
10058400:	4601      	mov	r1, r0
10058402:	8920      	ldrh	r0, [r4, #8]
10058404:	f000 fc2c 	bl	10058c60 <GAT_srv_get_cccd_val>
10058408:	0780      	lsls	r0, r0, #30
1005840a:	d412      	bmi.n	10058432 <GAT_srv_tx_service_change+0x86>
1005840c:	8920      	ldrh	r0, [r4, #8]
1005840e:	2100      	movs	r1, #0
10058410:	2201      	movs	r2, #1
10058412:	f000 fbbd 	bl	10058b90 <GAT_srv_check_client_support_feature>
10058416:	4605      	mov	r5, r0
10058418:	2881      	cmp	r0, #129	@ 0x81
1005841a:	d11b      	bne.n	10058454 <GAT_srv_tx_service_change+0xa8>
1005841c:	a809      	add	r0, sp, #36	@ 0x24
1005841e:	2140      	movs	r1, #64	@ 0x40
10058420:	8001      	strh	r1, [r0, #0]
10058422:	8921      	ldrh	r1, [r4, #8]
10058424:	9000      	str	r0, [sp, #0]
10058426:	2001      	movs	r0, #1
10058428:	2200      	movs	r2, #0
1005842a:	4b10      	ldr	r3, [pc, #64]	@ (1005846c <__arm_cp.8_4>)
1005842c:	f7fe fa76 	bl	1005691c <GAT_att_cmn_for_each_ch_descr>
10058430:	e00f      	b.n	10058452 <GAT_srv_tx_service_change+0xa6>
10058432:	480d      	ldr	r0, [pc, #52]	@ (10058468 <__arm_cp.8_3>)
10058434:	9003      	str	r0, [sp, #12]
10058436:	aa01      	add	r2, sp, #4
10058438:	2004      	movs	r0, #4
1005843a:	8050      	strh	r0, [r2, #2]
1005843c:	8868      	ldrh	r0, [r5, #2]
1005843e:	8010      	strh	r0, [r2, #0]
10058440:	a803      	add	r0, sp, #12
10058442:	9002      	str	r0, [sp, #8]
10058444:	8961      	ldrh	r1, [r4, #10]
10058446:	8920      	ldrh	r0, [r4, #8]
10058448:	9200      	str	r2, [sp, #0]
1005844a:	2202      	movs	r2, #2
1005844c:	2301      	movs	r3, #1
1005844e:	f7fe fe17 	bl	10057080 <GAT_att_srv_hvtx>
10058452:	4605      	mov	r5, r0
10058454:	4628      	mov	r0, r5
10058456:	b00a      	add	sp, #40	@ 0x28
10058458:	bdb0      	pop	{r4, r5, r7, pc}
1005845a:	46c0      	nop			@ (mov r8, r8)

1005845c <__arm_cp.8_0>:
1005845c:	10056bc9 	.word	0x10056bc9

10058460 <__arm_cp.8_1>:
10058460:	10069674 	.word	0x10069674

10058464 <__arm_cp.8_2>:
10058464:	0000ffff 	.word	0x0000ffff

10058468 <__arm_cp.8_3>:
10058468:	ffff0001 	.word	0xffff0001

1005846c <__arm_cp.8_4>:
1005846c:	10056be1 	.word	0x10056be1

10058470 <GAT_srv_get_attr_type>:
10058470:	b580      	push	{r7, lr}
10058472:	2210      	movs	r2, #16
10058474:	740a      	strb	r2, [r1, #16]
10058476:	7802      	ldrb	r2, [r0, #0]
10058478:	2a04      	cmp	r2, #4
1005847a:	d80d      	bhi.n	10058498 <GAT_srv_get_attr_type+0x28>
1005847c:	447a      	add	r2, pc
1005847e:	7912      	ldrb	r2, [r2, #4]
10058480:	0052      	lsls	r2, r2, #1
10058482:	4497      	add	pc, r2
10058484:	0212160a 	.word	0x0212160a
10058488:	0002      	.short	0x0002
1005848a:	6840      	ldr	r0, [r0, #4]
1005848c:	1d03      	adds	r3, r0, #4
1005848e:	2214      	movs	r2, #20
10058490:	4608      	mov	r0, r1
10058492:	4619      	mov	r1, r3
10058494:	f7fa f8de 	bl	10052654 <BLEPLAT_MemCpy>
10058498:	bd80      	pop	{r7, pc}
1005849a:	2205      	movs	r2, #5
1005849c:	02d2      	lsls	r2, r2, #11
1005849e:	6840      	ldr	r0, [r0, #4]
100584a0:	7d00      	ldrb	r0, [r0, #20]
100584a2:	2801      	cmp	r0, #1
100584a4:	d109      	bne.n	100584ba <GAT_srv_get_attr_type+0x4a>
100584a6:	818a      	strh	r2, [r1, #12]
100584a8:	bd80      	pop	{r7, pc}
100584aa:	2005      	movs	r0, #5
100584ac:	02c0      	lsls	r0, r0, #11
100584ae:	1cc0      	adds	r0, r0, #3
100584b0:	e004      	b.n	100584bc <GAT_srv_get_attr_type+0x4c>
100584b2:	2005      	movs	r0, #5
100584b4:	02c0      	lsls	r0, r0, #11
100584b6:	1c80      	adds	r0, r0, #2
100584b8:	e000      	b.n	100584bc <GAT_srv_get_attr_type+0x4c>
100584ba:	1c50      	adds	r0, r2, #1
100584bc:	8188      	strh	r0, [r1, #12]
100584be:	bd80      	pop	{r7, pc}

100584c0 <GAT_srv_get_att_group_end_handle>:
100584c0:	b580      	push	{r7, lr}
100584c2:	7801      	ldrb	r1, [r0, #0]
100584c4:	2202      	movs	r2, #2
100584c6:	430a      	orrs	r2, r1
100584c8:	2a02      	cmp	r2, #2
100584ca:	d102      	bne.n	100584d2 <GAT_srv_get_att_group_end_handle+0x12>
100584cc:	f00c fa86 	bl	100649dc <GAT_att_db_get_last_group_handle>
100584d0:	bd80      	pop	{r7, pc}
100584d2:	8840      	ldrh	r0, [r0, #2]
100584d4:	bd80      	pop	{r7, pc}

100584d6 <GAT_srv_attr_value_read>:
100584d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100584d8:	461c      	mov	r4, r3
100584da:	9200      	str	r2, [sp, #0]
100584dc:	460e      	mov	r6, r1
100584de:	4607      	mov	r7, r0
100584e0:	2201      	movs	r2, #1
100584e2:	4608      	mov	r0, r1
100584e4:	4639      	mov	r1, r7
100584e6:	f000 f80f 	bl	10058508 <GAT_srv_check_perms>
100584ea:	7020      	strb	r0, [r4, #0]
100584ec:	2586      	movs	r5, #134	@ 0x86
100584ee:	2800      	cmp	r0, #0
100584f0:	d108      	bne.n	10058504 <GAT_srv_attr_value_read+0x2e>
100584f2:	4638      	mov	r0, r7
100584f4:	4631      	mov	r1, r6
100584f6:	9a00      	ldr	r2, [sp, #0]
100584f8:	f000 f87c 	bl	100585f4 <GAT_srv_get_attr_value>
100584fc:	2886      	cmp	r0, #134	@ 0x86
100584fe:	d102      	bne.n	10058506 <GAT_srv_attr_value_read+0x30>
10058500:	200e      	movs	r0, #14
10058502:	7020      	strb	r0, [r4, #0]
10058504:	4628      	mov	r0, r5
10058506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10058508 <GAT_srv_check_perms>:
10058508:	b5f0      	push	{r4, r5, r6, r7, lr}
1005850a:	b085      	sub	sp, #20
1005850c:	4615      	mov	r5, r2
1005850e:	9101      	str	r1, [sp, #4]
10058510:	4601      	mov	r1, r0
10058512:	7804      	ldrb	r4, [r0, #0]
10058514:	2700      	movs	r7, #0
10058516:	2302      	movs	r3, #2
10058518:	200e      	movs	r0, #14
1005851a:	2c03      	cmp	r4, #3
1005851c:	461a      	mov	r2, r3
1005851e:	463e      	mov	r6, r7
10058520:	d312      	bcc.n	10058548 <GAT_srv_check_perms+0x40>
10058522:	d00b      	beq.n	1005853c <GAT_srv_check_perms+0x34>
10058524:	2c04      	cmp	r4, #4
10058526:	d158      	bne.n	100585da <GAT_srv_check_perms+0xd2>
10058528:	6848      	ldr	r0, [r1, #4]
1005852a:	7801      	ldrb	r1, [r0, #0]
1005852c:	078c      	lsls	r4, r1, #30
1005852e:	07c9      	lsls	r1, r1, #31
10058530:	0f8a      	lsrs	r2, r1, #30
10058532:	2c00      	cmp	r4, #0
10058534:	d500      	bpl.n	10058538 <GAT_srv_check_perms+0x30>
10058536:	324c      	adds	r2, #76	@ 0x4c
10058538:	1c41      	adds	r1, r0, #1
1005853a:	e002      	b.n	10058542 <GAT_srv_check_perms+0x3a>
1005853c:	6848      	ldr	r0, [r1, #4]
1005853e:	1c41      	adds	r1, r0, #1
10058540:	7802      	ldrb	r2, [r0, #0]
10058542:	1c80      	adds	r0, r0, #2
10058544:	780e      	ldrb	r6, [r1, #0]
10058546:	7807      	ldrb	r7, [r0, #0]
10058548:	2d01      	cmp	r5, #1
1005854a:	d103      	bne.n	10058554 <GAT_srv_check_perms+0x4c>
1005854c:	4610      	mov	r0, r2
1005854e:	4018      	ands	r0, r3
10058550:	4618      	mov	r0, r3
10058552:	d042      	beq.n	100585da <GAT_srv_check_perms+0xd2>
10058554:	2003      	movs	r0, #3
10058556:	2d03      	cmp	r5, #3
10058558:	d102      	bne.n	10058560 <GAT_srv_check_perms+0x58>
1005855a:	2108      	movs	r1, #8
1005855c:	4011      	ands	r1, r2
1005855e:	d03c      	beq.n	100585da <GAT_srv_check_perms+0xd2>
10058560:	2d04      	cmp	r5, #4
10058562:	d102      	bne.n	1005856a <GAT_srv_check_perms+0x62>
10058564:	2104      	movs	r1, #4
10058566:	4011      	ands	r1, r2
10058568:	d037      	beq.n	100585da <GAT_srv_check_perms+0xd2>
1005856a:	2d05      	cmp	r5, #5
1005856c:	d102      	bne.n	10058574 <GAT_srv_check_perms+0x6c>
1005856e:	2140      	movs	r1, #64	@ 0x40
10058570:	400a      	ands	r2, r1
10058572:	d032      	beq.n	100585da <GAT_srv_check_perms+0xd2>
10058574:	a904      	add	r1, sp, #16
10058576:	aa03      	add	r2, sp, #12
10058578:	ab02      	add	r3, sp, #8
1005857a:	9c01      	ldr	r4, [sp, #4]
1005857c:	4620      	mov	r0, r4
1005857e:	f009 ff26 	bl	100623ce <smp_sap_get_security_level>
10058582:	2802      	cmp	r0, #2
10058584:	d102      	bne.n	1005858c <GAT_srv_check_perms+0x84>
10058586:	2f00      	cmp	r7, #0
10058588:	d10f      	bne.n	100585aa <GAT_srv_check_perms+0xa2>
1005858a:	e025      	b.n	100585d8 <GAT_srv_check_perms+0xd0>
1005858c:	2d01      	cmp	r5, #1
1005858e:	d000      	beq.n	10058592 <GAT_srv_check_perms+0x8a>
10058590:	08ff      	lsrs	r7, r7, #3
10058592:	2d05      	cmp	r5, #5
10058594:	d10b      	bne.n	100585ae <GAT_srv_check_perms+0xa6>
10058596:	a804      	add	r0, sp, #16
10058598:	7800      	ldrb	r0, [r0, #0]
1005859a:	2802      	cmp	r0, #2
1005859c:	d105      	bne.n	100585aa <GAT_srv_check_perms+0xa2>
1005859e:	a802      	add	r0, sp, #8
100585a0:	7800      	ldrb	r0, [r0, #0]
100585a2:	2802      	cmp	r0, #2
100585a4:	d114      	bne.n	100585d0 <GAT_srv_check_perms+0xc8>
100585a6:	2000      	movs	r0, #0
100585a8:	e013      	b.n	100585d2 <GAT_srv_check_perms+0xca>
100585aa:	200e      	movs	r0, #14
100585ac:	e015      	b.n	100585da <GAT_srv_check_perms+0xd2>
100585ae:	2000      	movs	r0, #0
100585b0:	2f00      	cmp	r7, #0
100585b2:	d012      	beq.n	100585da <GAT_srv_check_perms+0xd2>
100585b4:	a903      	add	r1, sp, #12
100585b6:	7809      	ldrb	r1, [r1, #0]
100585b8:	07fa      	lsls	r2, r7, #31
100585ba:	d003      	beq.n	100585c4 <GAT_srv_check_perms+0xbc>
100585bc:	2903      	cmp	r1, #3
100585be:	d201      	bcs.n	100585c4 <GAT_srv_check_perms+0xbc>
100585c0:	2005      	movs	r0, #5
100585c2:	e00a      	b.n	100585da <GAT_srv_check_perms+0xd2>
100585c4:	077a      	lsls	r2, r7, #29
100585c6:	d508      	bpl.n	100585da <GAT_srv_check_perms+0xd2>
100585c8:	2902      	cmp	r1, #2
100585ca:	d208      	bcs.n	100585de <GAT_srv_check_perms+0xd6>
100585cc:	200f      	movs	r0, #15
100585ce:	e004      	b.n	100585da <GAT_srv_check_perms+0xd2>
100585d0:	2005      	movs	r0, #5
100585d2:	2101      	movs	r1, #1
100585d4:	400f      	ands	r7, r1
100585d6:	d100      	bne.n	100585da <GAT_srv_check_perms+0xd2>
100585d8:	4638      	mov	r0, r7
100585da:	b005      	add	sp, #20
100585dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100585de:	4620      	mov	r0, r4
100585e0:	4631      	mov	r1, r6
100585e2:	f009 ff6a 	bl	100624ba <smp_sap_check_encryption_key_size>
100585e6:	28b6      	cmp	r0, #182	@ 0xb6
100585e8:	d001      	beq.n	100585ee <GAT_srv_check_perms+0xe6>
100585ea:	2000      	movs	r0, #0
100585ec:	e7f5      	b.n	100585da <GAT_srv_check_perms+0xd2>
100585ee:	200c      	movs	r0, #12
100585f0:	e7f3      	b.n	100585da <GAT_srv_check_perms+0xd2>
	...

100585f4 <GAT_srv_get_attr_value>:
100585f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100585f6:	b085      	sub	sp, #20
100585f8:	460d      	mov	r5, r1
100585fa:	7809      	ldrb	r1, [r1, #0]
100585fc:	2904      	cmp	r1, #4
100585fe:	d811      	bhi.n	10058624 <GAT_srv_get_attr_value+0x30>
10058600:	4614      	mov	r4, r2
10058602:	46c0      	nop			@ (mov r8, r8)
10058604:	4479      	add	r1, pc
10058606:	7909      	ldrb	r1, [r1, #4]
10058608:	0049      	lsls	r1, r1, #1
1005860a:	448f      	add	pc, r1
1005860c:	694a0d02 	.word	0x694a0d02
10058610:	007e      	.short	0x007e
10058612:	4e73      	ldr	r6, [pc, #460]	@ (100587e0 <__arm_cp.13_0>)
10058614:	6830      	ldr	r0, [r6, #0]
10058616:	4601      	mov	r1, r0
10058618:	3170      	adds	r1, #112	@ 0x70
1005861a:	66c1      	str	r1, [r0, #108]	@ 0x6c
1005861c:	6868      	ldr	r0, [r5, #4]
1005861e:	f00a fa87 	bl	10062b30 <UUID_write_to_flat>
10058622:	e057      	b.n	100586d4 <GAT_srv_get_attr_value+0xe0>
10058624:	2686      	movs	r6, #134	@ 0x86
10058626:	e0d3      	b.n	100587d0 <GAT_srv_get_attr_value+0x1dc>
10058628:	4f6d      	ldr	r7, [pc, #436]	@ (100587e0 <__arm_cp.13_0>)
1005862a:	6838      	ldr	r0, [r7, #0]
1005862c:	4601      	mov	r1, r0
1005862e:	3170      	adds	r1, #112	@ 0x70
10058630:	66c1      	str	r1, [r0, #108]	@ 0x6c
10058632:	686b      	ldr	r3, [r5, #4]
10058634:	2001      	movs	r0, #1
10058636:	496e      	ldr	r1, [pc, #440]	@ (100587f0 <__arm_cp.13_4>)
10058638:	2600      	movs	r6, #0
1005863a:	4632      	mov	r2, r6
1005863c:	f000 fad6 	bl	10058bec <GAT_srv_get_attribute_handle>
10058640:	a901      	add	r1, sp, #4
10058642:	8008      	strh	r0, [r1, #0]
10058644:	2800      	cmp	r0, #0
10058646:	d100      	bne.n	1005864a <GAT_srv_get_attr_value+0x56>
10058648:	e0ad      	b.n	100587a6 <GAT_srv_get_attr_value+0x1b2>
1005864a:	f00c f929 	bl	100648a0 <GAT_att_db_find_by_handle>
1005864e:	f7ff ff37 	bl	100584c0 <GAT_srv_get_att_group_end_handle>
10058652:	a902      	add	r1, sp, #8
10058654:	9100      	str	r1, [sp, #0]
10058656:	8008      	strh	r0, [r1, #0]
10058658:	6838      	ldr	r0, [r7, #0]
1005865a:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
1005865c:	a901      	add	r1, sp, #4
1005865e:	2702      	movs	r7, #2
10058660:	463a      	mov	r2, r7
10058662:	f7f9 fff7 	bl	10052654 <BLEPLAT_MemCpy>
10058666:	485e      	ldr	r0, [pc, #376]	@ (100587e0 <__arm_cp.13_0>)
10058668:	6800      	ldr	r0, [r0, #0]
1005866a:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
1005866c:	1c80      	adds	r0, r0, #2
1005866e:	9900      	ldr	r1, [sp, #0]
10058670:	463a      	mov	r2, r7
10058672:	f7f9 ffef 	bl	10052654 <BLEPLAT_MemCpy>
10058676:	485a      	ldr	r0, [pc, #360]	@ (100587e0 <__arm_cp.13_0>)
10058678:	6800      	ldr	r0, [r0, #0]
1005867a:	2768      	movs	r7, #104	@ 0x68
1005867c:	2104      	movs	r1, #4
1005867e:	53c1      	strh	r1, [r0, r7]
10058680:	6869      	ldr	r1, [r5, #4]
10058682:	7c0a      	ldrb	r2, [r1, #16]
10058684:	2a10      	cmp	r2, #16
10058686:	d000      	beq.n	1005868a <GAT_srv_get_attr_value+0x96>
10058688:	e091      	b.n	100587ae <GAT_srv_get_attr_value+0x1ba>
1005868a:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
1005868c:	310c      	adds	r1, #12
1005868e:	1d00      	adds	r0, r0, #4
10058690:	2202      	movs	r2, #2
10058692:	f7f9 ffdf 	bl	10052654 <BLEPLAT_MemCpy>
10058696:	4852      	ldr	r0, [pc, #328]	@ (100587e0 <__arm_cp.13_0>)
10058698:	6800      	ldr	r0, [r0, #0]
1005869a:	5bc1      	ldrh	r1, [r0, r7]
1005869c:	1c89      	adds	r1, r1, #2
1005869e:	53c1      	strh	r1, [r0, r7]
100586a0:	e085      	b.n	100587ae <GAT_srv_get_attr_value+0x1ba>
100586a2:	4e4f      	ldr	r6, [pc, #316]	@ (100587e0 <__arm_cp.13_0>)
100586a4:	6830      	ldr	r0, [r6, #0]
100586a6:	4601      	mov	r1, r0
100586a8:	3170      	adds	r1, #112	@ 0x70
100586aa:	66c1      	str	r1, [r0, #108]	@ 0x6c
100586ac:	6869      	ldr	r1, [r5, #4]
100586ae:	7809      	ldrb	r1, [r1, #0]
100586b0:	2270      	movs	r2, #112	@ 0x70
100586b2:	5481      	strb	r1, [r0, r2]
100586b4:	8869      	ldrh	r1, [r5, #2]
100586b6:	1c4a      	adds	r2, r1, #1
100586b8:	a903      	add	r1, sp, #12
100586ba:	800a      	strh	r2, [r1, #0]
100586bc:	3071      	adds	r0, #113	@ 0x71
100586be:	2202      	movs	r2, #2
100586c0:	f7f9 ffc8 	bl	10052654 <BLEPLAT_MemCpy>
100586c4:	6830      	ldr	r0, [r6, #0]
100586c6:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
100586c8:	6868      	ldr	r0, [r5, #4]
100586ca:	1d00      	adds	r0, r0, #4
100586cc:	1cc9      	adds	r1, r1, #3
100586ce:	f00a fa2f 	bl	10062b30 <UUID_write_to_flat>
100586d2:	1cc0      	adds	r0, r0, #3
100586d4:	6831      	ldr	r1, [r6, #0]
100586d6:	2268      	movs	r2, #104	@ 0x68
100586d8:	5288      	strh	r0, [r1, r2]
100586da:	3168      	adds	r1, #104	@ 0x68
100586dc:	6021      	str	r1, [r4, #0]
100586de:	e076      	b.n	100587ce <GAT_srv_get_attr_value+0x1da>
100586e0:	6869      	ldr	r1, [r5, #4]
100586e2:	7d0a      	ldrb	r2, [r1, #20]
100586e4:	2a10      	cmp	r2, #16
100586e6:	d132      	bne.n	1005874e <GAT_srv_get_attr_value+0x15a>
100586e8:	4a3f      	ldr	r2, [pc, #252]	@ (100587e8 <__arm_cp.13_2>)
100586ea:	1c52      	adds	r2, r2, #1
100586ec:	8a0b      	ldrh	r3, [r1, #16]
100586ee:	4293      	cmp	r3, r2
100586f0:	d12d      	bne.n	1005874e <GAT_srv_get_attr_value+0x15a>
100586f2:	483b      	ldr	r0, [pc, #236]	@ (100587e0 <__arm_cp.13_0>)
100586f4:	6801      	ldr	r1, [r0, #0]
100586f6:	3168      	adds	r1, #104	@ 0x68
100586f8:	6021      	str	r1, [r4, #0]
100586fa:	6800      	ldr	r0, [r0, #0]
100586fc:	2168      	movs	r1, #104	@ 0x68
100586fe:	2210      	movs	r2, #16
10058700:	5242      	strh	r2, [r0, r1]
10058702:	4601      	mov	r1, r0
10058704:	3183      	adds	r1, #131	@ 0x83
10058706:	66c1      	str	r1, [r0, #108]	@ 0x6c
10058708:	e061      	b.n	100587ce <GAT_srv_get_attr_value+0x1da>
1005870a:	6869      	ldr	r1, [r5, #4]
1005870c:	6989      	ldr	r1, [r1, #24]
1005870e:	2900      	cmp	r1, #0
10058710:	d045      	beq.n	1005879e <GAT_srv_get_attr_value+0x1aa>
10058712:	4e33      	ldr	r6, [pc, #204]	@ (100587e0 <__arm_cp.13_0>)
10058714:	6831      	ldr	r1, [r6, #0]
10058716:	3168      	adds	r1, #104	@ 0x68
10058718:	6021      	str	r1, [r4, #0]
1005871a:	6869      	ldr	r1, [r5, #4]
1005871c:	7d0a      	ldrb	r2, [r1, #20]
1005871e:	2a10      	cmp	r2, #16
10058720:	d13f      	bne.n	100587a2 <GAT_srv_get_attr_value+0x1ae>
10058722:	8a0a      	ldrh	r2, [r1, #16]
10058724:	4b2f      	ldr	r3, [pc, #188]	@ (100587e4 <__arm_cp.13_1>)
10058726:	429a      	cmp	r2, r3
10058728:	d13b      	bne.n	100587a2 <GAT_srv_get_attr_value+0x1ae>
1005872a:	6831      	ldr	r1, [r6, #0]
1005872c:	2268      	movs	r2, #104	@ 0x68
1005872e:	2402      	movs	r4, #2
10058730:	528c      	strh	r4, [r1, r2]
10058732:	460a      	mov	r2, r1
10058734:	3270      	adds	r2, #112	@ 0x70
10058736:	66ca      	str	r2, [r1, #108]	@ 0x6c
10058738:	4629      	mov	r1, r5
1005873a:	f000 fa91 	bl	10058c60 <GAT_srv_get_cccd_val>
1005873e:	a904      	add	r1, sp, #16
10058740:	8008      	strh	r0, [r1, #0]
10058742:	6830      	ldr	r0, [r6, #0]
10058744:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
10058746:	4622      	mov	r2, r4
10058748:	f7f9 ff84 	bl	10052654 <BLEPLAT_MemCpy>
1005874c:	e03f      	b.n	100587ce <GAT_srv_get_attr_value+0x1da>
1005874e:	6a09      	ldr	r1, [r1, #32]
10058750:	2900      	cmp	r1, #0
10058752:	d024      	beq.n	1005879e <GAT_srv_get_attr_value+0x1aa>
10058754:	4e22      	ldr	r6, [pc, #136]	@ (100587e0 <__arm_cp.13_0>)
10058756:	6831      	ldr	r1, [r6, #0]
10058758:	3168      	adds	r1, #104	@ 0x68
1005875a:	6021      	str	r1, [r4, #0]
1005875c:	6869      	ldr	r1, [r5, #4]
1005875e:	7d0a      	ldrb	r2, [r1, #20]
10058760:	2a10      	cmp	r2, #16
10058762:	d127      	bne.n	100587b4 <GAT_srv_get_attr_value+0x1c0>
10058764:	8a0a      	ldrh	r2, [r1, #16]
10058766:	4b20      	ldr	r3, [pc, #128]	@ (100587e8 <__arm_cp.13_2>)
10058768:	429a      	cmp	r2, r3
1005876a:	d123      	bne.n	100587b4 <GAT_srv_get_attr_value+0x1c0>
1005876c:	6831      	ldr	r1, [r6, #0]
1005876e:	2268      	movs	r2, #104	@ 0x68
10058770:	2301      	movs	r3, #1
10058772:	528b      	strh	r3, [r1, r2]
10058774:	460a      	mov	r2, r1
10058776:	3270      	adds	r2, #112	@ 0x70
10058778:	66ca      	str	r2, [r1, #108]	@ 0x6c
1005877a:	f7fe fa37 	bl	10056bec <GAT_att_cmn_get_conn_index>
1005877e:	28ff      	cmp	r0, #255	@ 0xff
10058780:	d029      	beq.n	100587d6 <GAT_srv_get_attr_value+0x1e2>
10058782:	6869      	ldr	r1, [r5, #4]
10058784:	6a09      	ldr	r1, [r1, #32]
10058786:	688b      	ldr	r3, [r1, #8]
10058788:	4918      	ldr	r1, [pc, #96]	@ (100587ec <__arm_cp.13_3>)
1005878a:	7ac9      	ldrb	r1, [r1, #11]
1005878c:	0849      	lsrs	r1, r1, #1
1005878e:	1c4a      	adds	r2, r1, #1
10058790:	2104      	movs	r1, #4
10058792:	f000 f8d9 	bl	10058948 <GAT_srv_get_zip_val>
10058796:	6831      	ldr	r1, [r6, #0]
10058798:	2270      	movs	r2, #112	@ 0x70
1005879a:	5488      	strb	r0, [r1, r2]
1005879c:	e017      	b.n	100587ce <GAT_srv_get_attr_value+0x1da>
1005879e:	2684      	movs	r6, #132	@ 0x84
100587a0:	e016      	b.n	100587d0 <GAT_srv_get_attr_value+0x1dc>
100587a2:	6988      	ldr	r0, [r1, #24]
100587a4:	e007      	b.n	100587b6 <GAT_srv_get_attr_value+0x1c2>
100587a6:	6838      	ldr	r0, [r7, #0]
100587a8:	2168      	movs	r1, #104	@ 0x68
100587aa:	2200      	movs	r2, #0
100587ac:	5242      	strh	r2, [r0, r1]
100587ae:	3068      	adds	r0, #104	@ 0x68
100587b0:	6020      	str	r0, [r4, #0]
100587b2:	e00d      	b.n	100587d0 <GAT_srv_get_attr_value+0x1dc>
100587b4:	6a08      	ldr	r0, [r1, #32]
100587b6:	7801      	ldrb	r1, [r0, #0]
100587b8:	0789      	lsls	r1, r1, #30
100587ba:	d501      	bpl.n	100587c0 <GAT_srv_get_attr_value+0x1cc>
100587bc:	2102      	movs	r1, #2
100587be:	e000      	b.n	100587c2 <GAT_srv_get_attr_value+0x1ce>
100587c0:	2104      	movs	r1, #4
100587c2:	5a41      	ldrh	r1, [r0, r1]
100587c4:	6880      	ldr	r0, [r0, #8]
100587c6:	6832      	ldr	r2, [r6, #0]
100587c8:	2368      	movs	r3, #104	@ 0x68
100587ca:	52d1      	strh	r1, [r2, r3]
100587cc:	66d0      	str	r0, [r2, #108]	@ 0x6c
100587ce:	2600      	movs	r6, #0
100587d0:	4630      	mov	r0, r6
100587d2:	b005      	add	sp, #20
100587d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100587d6:	6830      	ldr	r0, [r6, #0]
100587d8:	2170      	movs	r1, #112	@ 0x70
100587da:	2600      	movs	r6, #0
100587dc:	5446      	strb	r6, [r0, r1]
100587de:	e7f7      	b.n	100587d0 <GAT_srv_get_attr_value+0x1dc>

100587e0 <__arm_cp.13_0>:
100587e0:	20002428 	.word	0x20002428

100587e4 <__arm_cp.13_1>:
100587e4:	00002902 	.word	0x00002902

100587e8 <__arm_cp.13_2>:
100587e8:	00002b29 	.word	0x00002b29

100587ec <__arm_cp.13_3>:
100587ec:	20002484 	.word	0x20002484

100587f0 <__arm_cp.13_4>:
100587f0:	0000ffff 	.word	0x0000ffff

100587f4 <GAT_srv_attr_value_write>:
100587f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100587f6:	b089      	sub	sp, #36	@ 0x24
100587f8:	4617      	mov	r7, r2
100587fa:	460d      	mov	r5, r1
100587fc:	4606      	mov	r6, r0
100587fe:	7800      	ldrb	r0, [r0, #0]
10058800:	8874      	ldrh	r4, [r6, #2]
10058802:	2804      	cmp	r0, #4
10058804:	d045      	beq.n	10058892 <GAT_srv_attr_value_write+0x9e>
10058806:	2803      	cmp	r0, #3
10058808:	d177      	bne.n	100588fa <GAT_srv_attr_value_write+0x106>
1005880a:	6871      	ldr	r1, [r6, #4]
1005880c:	6a08      	ldr	r0, [r1, #32]
1005880e:	2800      	cmp	r0, #0
10058810:	d07d      	beq.n	1005890e <GAT_srv_attr_value_write+0x11a>
10058812:	7d0a      	ldrb	r2, [r1, #20]
10058814:	2a10      	cmp	r2, #16
10058816:	d174      	bne.n	10058902 <GAT_srv_attr_value_write+0x10e>
10058818:	8a09      	ldrh	r1, [r1, #16]
1005881a:	4a49      	ldr	r2, [pc, #292]	@ (10058940 <__arm_cp.14_1>)
1005881c:	4291      	cmp	r1, r2
1005881e:	d170      	bne.n	10058902 <GAT_srv_attr_value_write+0x10e>
10058820:	9700      	str	r7, [sp, #0]
10058822:	2101      	movs	r1, #1
10058824:	aa07      	add	r2, sp, #28
10058826:	ab08      	add	r3, sp, #32
10058828:	4628      	mov	r0, r5
1005882a:	f7fe fd04 	bl	10057236 <GAT_att_srv_extract_write_packet_data>
1005882e:	2800      	cmp	r0, #0
10058830:	d16e      	bne.n	10058910 <GAT_srv_attr_value_write+0x11c>
10058832:	8828      	ldrh	r0, [r5, #0]
10058834:	f7fe f9da 	bl	10056bec <GAT_att_cmn_get_conn_index>
10058838:	aa07      	add	r2, sp, #28
1005883a:	7811      	ldrb	r1, [r2, #0]
1005883c:	2307      	movs	r3, #7
1005883e:	400b      	ands	r3, r1
10058840:	9305      	str	r3, [sp, #20]
10058842:	7013      	strb	r3, [r2, #0]
10058844:	6871      	ldr	r1, [r6, #4]
10058846:	6a09      	ldr	r1, [r1, #32]
10058848:	688b      	ldr	r3, [r1, #8]
1005884a:	493e      	ldr	r1, [pc, #248]	@ (10058944 <__arm_cp.14_2>)
1005884c:	7ac9      	ldrb	r1, [r1, #11]
1005884e:	0849      	lsrs	r1, r1, #1
10058850:	1c4a      	adds	r2, r1, #1
10058852:	2104      	movs	r1, #4
10058854:	9004      	str	r0, [sp, #16]
10058856:	9203      	str	r2, [sp, #12]
10058858:	9302      	str	r3, [sp, #8]
1005885a:	f000 f875 	bl	10058948 <GAT_srv_get_zip_val>
1005885e:	9a05      	ldr	r2, [sp, #20]
10058860:	4601      	mov	r1, r0
10058862:	4011      	ands	r1, r2
10058864:	4281      	cmp	r1, r0
10058866:	d157      	bne.n	10058918 <GAT_srv_attr_value_write+0x124>
10058868:	9802      	ldr	r0, [sp, #8]
1005886a:	9000      	str	r0, [sp, #0]
1005886c:	2104      	movs	r1, #4
1005886e:	9804      	ldr	r0, [sp, #16]
10058870:	9b03      	ldr	r3, [sp, #12]
10058872:	f000 f87c 	bl	1005896e <GAT_srv_set_zip_val>
10058876:	6870      	ldr	r0, [r6, #4]
10058878:	6a00      	ldr	r0, [r0, #32]
1005887a:	7800      	ldrb	r0, [r0, #0]
1005887c:	07c0      	lsls	r0, r0, #31
1005887e:	d03a      	beq.n	100588f6 <GAT_srv_attr_value_write+0x102>
10058880:	882e      	ldrh	r6, [r5, #0]
10058882:	4628      	mov	r0, r5
10058884:	f000 ff95 	bl	100597b2 <L2C_get_cid_from_basic_packet_header>
10058888:	4602      	mov	r2, r0
1005888a:	a808      	add	r0, sp, #32
1005888c:	8800      	ldrh	r0, [r0, #0]
1005888e:	a907      	add	r1, sp, #28
10058890:	e04c      	b.n	1005892c <GAT_srv_attr_value_write+0x138>
10058892:	6871      	ldr	r1, [r6, #4]
10058894:	6988      	ldr	r0, [r1, #24]
10058896:	2800      	cmp	r0, #0
10058898:	d039      	beq.n	1005890e <GAT_srv_attr_value_write+0x11a>
1005889a:	7d0a      	ldrb	r2, [r1, #20]
1005889c:	2a10      	cmp	r2, #16
1005889e:	d130      	bne.n	10058902 <GAT_srv_attr_value_write+0x10e>
100588a0:	8a09      	ldrh	r1, [r1, #16]
100588a2:	4a26      	ldr	r2, [pc, #152]	@ (1005893c <__arm_cp.14_0>)
100588a4:	4291      	cmp	r1, r2
100588a6:	d12c      	bne.n	10058902 <GAT_srv_attr_value_write+0x10e>
100588a8:	9700      	str	r7, [sp, #0]
100588aa:	2102      	movs	r1, #2
100588ac:	aa06      	add	r2, sp, #24
100588ae:	ab08      	add	r3, sp, #32
100588b0:	4628      	mov	r0, r5
100588b2:	f7fe fcc0 	bl	10057236 <GAT_att_srv_extract_write_packet_data>
100588b6:	2800      	cmp	r0, #0
100588b8:	d12a      	bne.n	10058910 <GAT_srv_attr_value_write+0x11c>
100588ba:	a806      	add	r0, sp, #24
100588bc:	8800      	ldrh	r0, [r0, #0]
100588be:	9005      	str	r0, [sp, #20]
100588c0:	8870      	ldrh	r0, [r6, #2]
100588c2:	1e80      	subs	r0, r0, #2
100588c4:	b281      	uxth	r1, r0
100588c6:	2002      	movs	r0, #2
100588c8:	f00c f920 	bl	10064b0c <GAT_att_db_reverse_find_attr_of_type>
100588cc:	2800      	cmp	r0, #0
100588ce:	d021      	beq.n	10058914 <GAT_srv_attr_value_write+0x120>
100588d0:	9905      	ldr	r1, [sp, #20]
100588d2:	0789      	lsls	r1, r1, #30
100588d4:	0e89      	lsrs	r1, r1, #26
100588d6:	6840      	ldr	r0, [r0, #4]
100588d8:	7800      	ldrb	r0, [r0, #0]
100588da:	4008      	ands	r0, r1
100588dc:	4288      	cmp	r0, r1
100588de:	d119      	bne.n	10058914 <GAT_srv_attr_value_write+0x120>
100588e0:	a806      	add	r0, sp, #24
100588e2:	8802      	ldrh	r2, [r0, #0]
100588e4:	8828      	ldrh	r0, [r5, #0]
100588e6:	4631      	mov	r1, r6
100588e8:	f000 f882 	bl	100589f0 <GAT_srv_set_cccd_val>
100588ec:	6870      	ldr	r0, [r6, #4]
100588ee:	6980      	ldr	r0, [r0, #24]
100588f0:	7800      	ldrb	r0, [r0, #0]
100588f2:	07c0      	lsls	r0, r0, #31
100588f4:	d112      	bne.n	1005891c <GAT_srv_attr_value_write+0x128>
100588f6:	2000      	movs	r0, #0
100588f8:	e00a      	b.n	10058910 <GAT_srv_attr_value_write+0x11c>
100588fa:	2003      	movs	r0, #3
100588fc:	7038      	strb	r0, [r7, #0]
100588fe:	2086      	movs	r0, #134	@ 0x86
10058900:	e006      	b.n	10058910 <GAT_srv_attr_value_write+0x11c>
10058902:	4621      	mov	r1, r4
10058904:	462a      	mov	r2, r5
10058906:	463b      	mov	r3, r7
10058908:	f000 f847 	bl	1005899a <GAT_srv_attr_direct_value_write>
1005890c:	e000      	b.n	10058910 <GAT_srv_attr_value_write+0x11c>
1005890e:	2084      	movs	r0, #132	@ 0x84
10058910:	b009      	add	sp, #36	@ 0x24
10058912:	bdf0      	pop	{r4, r5, r6, r7, pc}
10058914:	20fd      	movs	r0, #253	@ 0xfd
10058916:	e7f1      	b.n	100588fc <GAT_srv_attr_value_write+0x108>
10058918:	2013      	movs	r0, #19
1005891a:	e7ef      	b.n	100588fc <GAT_srv_attr_value_write+0x108>
1005891c:	882e      	ldrh	r6, [r5, #0]
1005891e:	4628      	mov	r0, r5
10058920:	f000 ff47 	bl	100597b2 <L2C_get_cid_from_basic_packet_header>
10058924:	4602      	mov	r2, r0
10058926:	a808      	add	r0, sp, #32
10058928:	8800      	ldrh	r0, [r0, #0]
1005892a:	a906      	add	r1, sp, #24
1005892c:	9000      	str	r0, [sp, #0]
1005892e:	9101      	str	r1, [sp, #4]
10058930:	2002      	movs	r0, #2
10058932:	4631      	mov	r1, r6
10058934:	4623      	mov	r3, r4
10058936:	f00a fd59 	bl	100633ec <aci_gatt_srv_attribute_modified_event_push_noinline>
1005893a:	e7e9      	b.n	10058910 <GAT_srv_attr_value_write+0x11c>

1005893c <__arm_cp.14_0>:
1005893c:	00002902 	.word	0x00002902

10058940 <__arm_cp.14_1>:
10058940:	00002b29 	.word	0x00002b29

10058944 <__arm_cp.14_2>:
10058944:	20002484 	.word	0x20002484

10058948 <GAT_srv_get_zip_val>:
10058948:	b510      	push	{r4, lr}
1005894a:	4348      	muls	r0, r1
1005894c:	08c4      	lsrs	r4, r0, #3
1005894e:	b2a4      	uxth	r4, r4
10058950:	4294      	cmp	r4, r2
10058952:	d901      	bls.n	10058958 <GAT_srv_get_zip_val+0x10>
10058954:	2000      	movs	r0, #0
10058956:	bd10      	pop	{r4, pc}
10058958:	2207      	movs	r2, #7
1005895a:	4010      	ands	r0, r2
1005895c:	5d1a      	ldrb	r2, [r3, r4]
1005895e:	40c2      	lsrs	r2, r0
10058960:	2020      	movs	r0, #32
10058962:	1a41      	subs	r1, r0, r1
10058964:	2000      	movs	r0, #0
10058966:	43c0      	mvns	r0, r0
10058968:	40c8      	lsrs	r0, r1
1005896a:	4010      	ands	r0, r2
1005896c:	bd10      	pop	{r4, pc}

1005896e <GAT_srv_set_zip_val>:
1005896e:	b5b0      	push	{r4, r5, r7, lr}
10058970:	4348      	muls	r0, r1
10058972:	08c4      	lsrs	r4, r0, #3
10058974:	b2a4      	uxth	r4, r4
10058976:	429c      	cmp	r4, r3
10058978:	d80e      	bhi.n	10058998 <GAT_srv_set_zip_val+0x2a>
1005897a:	9b04      	ldr	r3, [sp, #16]
1005897c:	2507      	movs	r5, #7
1005897e:	4028      	ands	r0, r5
10058980:	2520      	movs	r5, #32
10058982:	1a69      	subs	r1, r5, r1
10058984:	2500      	movs	r5, #0
10058986:	43ed      	mvns	r5, r5
10058988:	40cd      	lsrs	r5, r1
1005898a:	402a      	ands	r2, r5
1005898c:	4082      	lsls	r2, r0
1005898e:	4085      	lsls	r5, r0
10058990:	5d18      	ldrb	r0, [r3, r4]
10058992:	43a8      	bics	r0, r5
10058994:	4310      	orrs	r0, r2
10058996:	5518      	strb	r0, [r3, r4]
10058998:	bdb0      	pop	{r4, r5, r7, pc}

1005899a <GAT_srv_attr_direct_value_write>:
1005899a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005899c:	4616      	mov	r6, r2
1005899e:	460c      	mov	r4, r1
100589a0:	4605      	mov	r5, r0
100589a2:	6882      	ldr	r2, [r0, #8]
100589a4:	8881      	ldrh	r1, [r0, #4]
100589a6:	9300      	str	r3, [sp, #0]
100589a8:	ab02      	add	r3, sp, #8
100589aa:	4630      	mov	r0, r6
100589ac:	f7fe fc43 	bl	10057236 <GAT_att_srv_extract_write_packet_data>
100589b0:	2800      	cmp	r0, #0
100589b2:	d000      	beq.n	100589b6 <GAT_srv_attr_direct_value_write+0x1c>
100589b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100589b6:	7828      	ldrb	r0, [r5, #0]
100589b8:	0781      	lsls	r1, r0, #30
100589ba:	d403      	bmi.n	100589c4 <GAT_srv_attr_direct_value_write+0x2a>
100589bc:	88a9      	ldrh	r1, [r5, #4]
100589be:	aa02      	add	r2, sp, #8
100589c0:	8011      	strh	r1, [r2, #0]
100589c2:	e001      	b.n	100589c8 <GAT_srv_attr_direct_value_write+0x2e>
100589c4:	9902      	ldr	r1, [sp, #8]
100589c6:	8069      	strh	r1, [r5, #2]
100589c8:	07c0      	lsls	r0, r0, #31
100589ca:	d101      	bne.n	100589d0 <GAT_srv_attr_direct_value_write+0x36>
100589cc:	2000      	movs	r0, #0
100589ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100589d0:	8837      	ldrh	r7, [r6, #0]
100589d2:	4630      	mov	r0, r6
100589d4:	f000 feed 	bl	100597b2 <L2C_get_cid_from_basic_packet_header>
100589d8:	4602      	mov	r2, r0
100589da:	a802      	add	r0, sp, #8
100589dc:	8800      	ldrh	r0, [r0, #0]
100589de:	68a9      	ldr	r1, [r5, #8]
100589e0:	9000      	str	r0, [sp, #0]
100589e2:	9101      	str	r1, [sp, #4]
100589e4:	2002      	movs	r0, #2
100589e6:	4639      	mov	r1, r7
100589e8:	4623      	mov	r3, r4
100589ea:	f00a fcff 	bl	100633ec <aci_gatt_srv_attribute_modified_event_push_noinline>
100589ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100589f0 <GAT_srv_set_cccd_val>:
100589f0:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100589f2:	4614      	mov	r4, r2
100589f4:	460d      	mov	r5, r1
100589f6:	f7fe f8f9 	bl	10056bec <GAT_att_cmn_get_conn_index>
100589fa:	6869      	ldr	r1, [r5, #4]
100589fc:	6989      	ldr	r1, [r1, #24]
100589fe:	888b      	ldrh	r3, [r1, #4]
10058a00:	6889      	ldr	r1, [r1, #8]
10058a02:	9100      	str	r1, [sp, #0]
10058a04:	2103      	movs	r1, #3
10058a06:	400c      	ands	r4, r1
10058a08:	2102      	movs	r1, #2
10058a0a:	4622      	mov	r2, r4
10058a0c:	f7ff ffaf 	bl	1005896e <GAT_srv_set_zip_val>
10058a10:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
	...

10058a14 <GAT_srv_is_supported_grouping_type>:
10058a14:	b570      	push	{r4, r5, r6, lr}
10058a16:	b08a      	sub	sp, #40	@ 0x28
10058a18:	4604      	mov	r4, r0
10058a1a:	ad05      	add	r5, sp, #20
10058a1c:	a10d      	add	r1, pc, #52	@ (adr r1, 10058a54 <GAT_srv_is_supported_grouping_type+0x40>)
10058a1e:	2614      	movs	r6, #20
10058a20:	4628      	mov	r0, r5
10058a22:	4632      	mov	r2, r6
10058a24:	f00f f88b 	bl	10067b3e <__aeabi_memcpy>
10058a28:	4668      	mov	r0, sp
10058a2a:	a10f      	add	r1, pc, #60	@ (adr r1, 10058a68 <GAT_srv_is_supported_grouping_type+0x54>)
10058a2c:	4632      	mov	r2, r6
10058a2e:	f00f f886 	bl	10067b3e <__aeabi_memcpy>
10058a32:	4620      	mov	r0, r4
10058a34:	4629      	mov	r1, r5
10058a36:	f00a f84b 	bl	10062ad0 <UUID_cmp_128bits>
10058a3a:	2800      	cmp	r0, #0
10058a3c:	d007      	beq.n	10058a4e <GAT_srv_is_supported_grouping_type+0x3a>
10058a3e:	4669      	mov	r1, sp
10058a40:	4620      	mov	r0, r4
10058a42:	f00a f845 	bl	10062ad0 <UUID_cmp_128bits>
10058a46:	4601      	mov	r1, r0
10058a48:	4240      	negs	r0, r0
10058a4a:	4148      	adcs	r0, r1
10058a4c:	e000      	b.n	10058a50 <GAT_srv_is_supported_grouping_type+0x3c>
10058a4e:	2001      	movs	r0, #1
10058a50:	b00a      	add	sp, #40	@ 0x28
10058a52:	bd70      	pop	{r4, r5, r6, pc}
10058a54:	5f9b34fb 	.word	0x5f9b34fb
10058a58:	80000080 	.word	0x80000080
10058a5c:	00001000 	.word	0x00001000
10058a60:	00002800 	.word	0x00002800
10058a64:	00000010 	.word	0x00000010
10058a68:	5f9b34fb 	.word	0x5f9b34fb
10058a6c:	80000080 	.word	0x80000080
10058a70:	00001000 	.word	0x00001000
10058a74:	00002801 	.word	0x00002801
10058a78:	00000010 	.word	0x00000010

10058a7c <GAT_srv_set_change_aware>:
10058a7c:	b5e0      	push	{r5, r6, r7, lr}
10058a7e:	aa01      	add	r2, sp, #4
10058a80:	21c2      	movs	r1, #194	@ 0xc2
10058a82:	8011      	strh	r1, [r2, #0]
10058a84:	8901      	ldrh	r1, [r0, #8]
10058a86:	9200      	str	r2, [sp, #0]
10058a88:	2001      	movs	r0, #1
10058a8a:	2200      	movs	r2, #0
10058a8c:	4b01      	ldr	r3, [pc, #4]	@ (10058a94 <__arm_cp.21_0>)
10058a8e:	f7fd ff45 	bl	1005691c <GAT_att_cmn_for_each_ch_descr>
10058a92:	bd8c      	pop	{r2, r3, r7, pc}

10058a94 <__arm_cp.21_0>:
10058a94:	10056be1 	.word	0x10056be1

10058a98 <GAT_srv_check_change_aware>:
10058a98:	b5f0      	push	{r4, r5, r6, r7, lr}
10058a9a:	b087      	sub	sp, #28
10058a9c:	4605      	mov	r5, r0
10058a9e:	ac02      	add	r4, sp, #8
10058aa0:	4927      	ldr	r1, [pc, #156]	@ (10058b40 <__arm_cp.22_0>)
10058aa2:	2214      	movs	r2, #20
10058aa4:	4620      	mov	r0, r4
10058aa6:	f00f f84a 	bl	10067b3e <__aeabi_memcpy>
10058aaa:	2001      	movs	r0, #1
10058aac:	4e25      	ldr	r6, [pc, #148]	@ (10058b44 <__arm_cp.22_1>)
10058aae:	4631      	mov	r1, r6
10058ab0:	4622      	mov	r2, r4
10058ab2:	f000 f84d 	bl	10058b50 <GAT_srv_find_by_type_attr_p>
10058ab6:	2700      	movs	r7, #0
10058ab8:	2800      	cmp	r0, #0
10058aba:	d03c      	beq.n	10058b36 <GAT_srv_check_change_aware+0x9e>
10058abc:	4601      	mov	r1, r0
10058abe:	6828      	ldr	r0, [r5, #0]
10058ac0:	8882      	ldrh	r2, [r0, #4]
10058ac2:	0652      	lsls	r2, r2, #25
10058ac4:	d537      	bpl.n	10058b36 <GAT_srv_check_change_aware+0x9e>
10058ac6:	792a      	ldrb	r2, [r5, #4]
10058ac8:	23fe      	movs	r3, #254	@ 0xfe
10058aca:	4013      	ands	r3, r2
10058acc:	2486      	movs	r4, #134	@ 0x86
10058ace:	2b04      	cmp	r3, #4
10058ad0:	d032      	beq.n	10058b38 <GAT_srv_check_change_aware+0xa0>
10058ad2:	8900      	ldrh	r0, [r0, #8]
10058ad4:	2201      	movs	r2, #1
10058ad6:	f000 f85b 	bl	10058b90 <GAT_srv_check_client_support_feature>
10058ada:	2881      	cmp	r0, #129	@ 0x81
10058adc:	d02b      	beq.n	10058b36 <GAT_srv_check_change_aware+0x9e>
10058ade:	6828      	ldr	r0, [r5, #0]
10058ae0:	8881      	ldrh	r1, [r0, #4]
10058ae2:	060a      	lsls	r2, r1, #24
10058ae4:	d425      	bmi.n	10058b32 <GAT_srv_check_change_aware+0x9a>
10058ae6:	2780      	movs	r7, #128	@ 0x80
10058ae8:	4339      	orrs	r1, r7
10058aea:	8081      	strh	r1, [r0, #4]
10058aec:	7928      	ldrb	r0, [r5, #4]
10058aee:	2802      	cmp	r0, #2
10058af0:	d122      	bne.n	10058b38 <GAT_srv_check_change_aware+0xa0>
10058af2:	8928      	ldrh	r0, [r5, #8]
10058af4:	2801      	cmp	r0, #1
10058af6:	d11f      	bne.n	10058b38 <GAT_srv_check_change_aware+0xa0>
10058af8:	8968      	ldrh	r0, [r5, #10]
10058afa:	42b0      	cmp	r0, r6
10058afc:	d11c      	bne.n	10058b38 <GAT_srv_check_change_aware+0xa0>
10058afe:	68ea      	ldr	r2, [r5, #12]
10058b00:	7c10      	ldrb	r0, [r2, #16]
10058b02:	2810      	cmp	r0, #16
10058b04:	d118      	bne.n	10058b38 <GAT_srv_check_change_aware+0xa0>
10058b06:	8990      	ldrh	r0, [r2, #12]
10058b08:	490f      	ldr	r1, [pc, #60]	@ (10058b48 <__arm_cp.22_2>)
10058b0a:	4288      	cmp	r0, r1
10058b0c:	d114      	bne.n	10058b38 <GAT_srv_check_change_aware+0xa0>
10058b0e:	2001      	movs	r0, #1
10058b10:	4631      	mov	r1, r6
10058b12:	f000 f81d 	bl	10058b50 <GAT_srv_find_by_type_attr_p>
10058b16:	2800      	cmp	r0, #0
10058b18:	d00e      	beq.n	10058b38 <GAT_srv_check_change_aware+0xa0>
10058b1a:	a801      	add	r0, sp, #4
10058b1c:	8007      	strh	r7, [r0, #0]
10058b1e:	6829      	ldr	r1, [r5, #0]
10058b20:	8909      	ldrh	r1, [r1, #8]
10058b22:	9000      	str	r0, [sp, #0]
10058b24:	2001      	movs	r0, #1
10058b26:	2400      	movs	r4, #0
10058b28:	4b08      	ldr	r3, [pc, #32]	@ (10058b4c <__arm_cp.22_3>)
10058b2a:	4622      	mov	r2, r4
10058b2c:	f7fd fef6 	bl	1005691c <GAT_att_cmn_for_each_ch_descr>
10058b30:	e002      	b.n	10058b38 <GAT_srv_check_change_aware+0xa0>
10058b32:	f7ff ffa3 	bl	10058a7c <GAT_srv_set_change_aware>
10058b36:	463c      	mov	r4, r7
10058b38:	4620      	mov	r0, r4
10058b3a:	b007      	add	sp, #28
10058b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10058b3e:	46c0      	nop			@ (mov r8, r8)

10058b40 <__arm_cp.22_0>:
10058b40:	10069688 	.word	0x10069688

10058b44 <__arm_cp.22_1>:
10058b44:	0000ffff 	.word	0x0000ffff

10058b48 <__arm_cp.22_2>:
10058b48:	00002b2a 	.word	0x00002b2a

10058b4c <__arm_cp.22_3>:
10058b4c:	10056bd5 	.word	0x10056bd5

10058b50 <GAT_srv_find_by_type_attr_p>:
10058b50:	b5f0      	push	{r4, r5, r6, r7, lr}
10058b52:	b085      	sub	sp, #20
10058b54:	4614      	mov	r4, r2
10058b56:	460d      	mov	r5, r1
10058b58:	f00b feca 	bl	100648f0 <GAT_att_db_find_from_handle>
10058b5c:	4606      	mov	r6, r0
10058b5e:	2000      	movs	r0, #0
10058b60:	2e00      	cmp	r6, #0
10058b62:	d012      	beq.n	10058b8a <GAT_srv_find_by_type_attr_p+0x3a>
10058b64:	8871      	ldrh	r1, [r6, #2]
10058b66:	42a9      	cmp	r1, r5
10058b68:	d80f      	bhi.n	10058b8a <GAT_srv_find_by_type_attr_p+0x3a>
10058b6a:	466f      	mov	r7, sp
10058b6c:	4630      	mov	r0, r6
10058b6e:	4639      	mov	r1, r7
10058b70:	f7ff fc7e 	bl	10058470 <GAT_srv_get_attr_type>
10058b74:	4620      	mov	r0, r4
10058b76:	4639      	mov	r1, r7
10058b78:	f009 ff93 	bl	10062aa2 <UUID_cmp>
10058b7c:	2800      	cmp	r0, #0
10058b7e:	d003      	beq.n	10058b88 <GAT_srv_find_by_type_attr_p+0x38>
10058b80:	4630      	mov	r0, r6
10058b82:	f00b ff17 	bl	100649b4 <GAT_att_db_get_next>
10058b86:	e7e9      	b.n	10058b5c <GAT_srv_find_by_type_attr_p+0xc>
10058b88:	4630      	mov	r0, r6
10058b8a:	b005      	add	sp, #20
10058b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10058b90 <GAT_srv_check_client_support_feature>:
10058b90:	b570      	push	{r4, r5, r6, lr}
10058b92:	b086      	sub	sp, #24
10058b94:	4614      	mov	r4, r2
10058b96:	460e      	mov	r6, r1
10058b98:	4605      	mov	r5, r0
10058b9a:	a801      	add	r0, sp, #4
10058b9c:	4910      	ldr	r1, [pc, #64]	@ (10058be0 <__arm_cp.24_0>)
10058b9e:	2214      	movs	r2, #20
10058ba0:	f00e ffcd 	bl	10067b3e <__aeabi_memcpy>
10058ba4:	2e00      	cmp	r6, #0
10058ba6:	d107      	bne.n	10058bb8 <GAT_srv_check_client_support_feature+0x28>
10058ba8:	2001      	movs	r0, #1
10058baa:	490e      	ldr	r1, [pc, #56]	@ (10058be4 <__arm_cp.24_1>)
10058bac:	aa01      	add	r2, sp, #4
10058bae:	f7ff ffcf 	bl	10058b50 <GAT_srv_find_by_type_attr_p>
10058bb2:	4606      	mov	r6, r0
10058bb4:	2800      	cmp	r0, #0
10058bb6:	d010      	beq.n	10058bda <GAT_srv_check_client_support_feature+0x4a>
10058bb8:	4628      	mov	r0, r5
10058bba:	f7fe f817 	bl	10056bec <GAT_att_cmn_get_conn_index>
10058bbe:	6871      	ldr	r1, [r6, #4]
10058bc0:	6a09      	ldr	r1, [r1, #32]
10058bc2:	688b      	ldr	r3, [r1, #8]
10058bc4:	4908      	ldr	r1, [pc, #32]	@ (10058be8 <__arm_cp.24_2>)
10058bc6:	7ac9      	ldrb	r1, [r1, #11]
10058bc8:	0849      	lsrs	r1, r1, #1
10058bca:	1c4a      	adds	r2, r1, #1
10058bcc:	2104      	movs	r1, #4
10058bce:	f7ff febb 	bl	10058948 <GAT_srv_get_zip_val>
10058bd2:	4220      	tst	r0, r4
10058bd4:	d001      	beq.n	10058bda <GAT_srv_check_client_support_feature+0x4a>
10058bd6:	2000      	movs	r0, #0
10058bd8:	e000      	b.n	10058bdc <GAT_srv_check_client_support_feature+0x4c>
10058bda:	2081      	movs	r0, #129	@ 0x81
10058bdc:	b006      	add	sp, #24
10058bde:	bd70      	pop	{r4, r5, r6, pc}

10058be0 <__arm_cp.24_0>:
10058be0:	10069688 	.word	0x10069688

10058be4 <__arm_cp.24_1>:
10058be4:	0000ffff 	.word	0x0000ffff

10058be8 <__arm_cp.24_2>:
10058be8:	20002484 	.word	0x20002484

10058bec <GAT_srv_get_attribute_handle>:
10058bec:	b580      	push	{r7, lr}
10058bee:	f00b fea9 	bl	10064944 <GAT_att_db_find_by_def>
10058bf2:	2800      	cmp	r0, #0
10058bf4:	d001      	beq.n	10058bfa <GAT_srv_get_attribute_handle+0xe>
10058bf6:	8840      	ldrh	r0, [r0, #2]
10058bf8:	bd80      	pop	{r7, pc}
10058bfa:	2000      	movs	r0, #0
10058bfc:	bd80      	pop	{r7, pc}
	...

10058c00 <GAT_srv_get_cccd_attr_p>:
10058c00:	b570      	push	{r4, r5, r6, lr}
10058c02:	b08a      	sub	sp, #40	@ 0x28
10058c04:	4605      	mov	r5, r0
10058c06:	a805      	add	r0, sp, #20
10058c08:	a110      	add	r1, pc, #64	@ (adr r1, 10058c4c <GAT_srv_get_cccd_attr_p+0x4c>)
10058c0a:	2214      	movs	r2, #20
10058c0c:	f00e ff97 	bl	10067b3e <__aeabi_memcpy>
10058c10:	7828      	ldrb	r0, [r5, #0]
10058c12:	21fe      	movs	r1, #254	@ 0xfe
10058c14:	4001      	ands	r1, r0
10058c16:	2400      	movs	r4, #0
10058c18:	2902      	cmp	r1, #2
10058c1a:	d114      	bne.n	10058c46 <GAT_srv_get_cccd_attr_p+0x46>
10058c1c:	4628      	mov	r0, r5
10058c1e:	f00b fec9 	bl	100649b4 <GAT_att_db_get_next>
10058c22:	4605      	mov	r5, r0
10058c24:	2800      	cmp	r0, #0
10058c26:	d00e      	beq.n	10058c46 <GAT_srv_get_cccd_attr_p+0x46>
10058c28:	7828      	ldrb	r0, [r5, #0]
10058c2a:	2802      	cmp	r0, #2
10058c2c:	d00b      	beq.n	10058c46 <GAT_srv_get_cccd_attr_p+0x46>
10058c2e:	466e      	mov	r6, sp
10058c30:	4628      	mov	r0, r5
10058c32:	4631      	mov	r1, r6
10058c34:	f7ff fc1c 	bl	10058470 <GAT_srv_get_attr_type>
10058c38:	a805      	add	r0, sp, #20
10058c3a:	4631      	mov	r1, r6
10058c3c:	f009 ff31 	bl	10062aa2 <UUID_cmp>
10058c40:	2800      	cmp	r0, #0
10058c42:	d1eb      	bne.n	10058c1c <GAT_srv_get_cccd_attr_p+0x1c>
10058c44:	462c      	mov	r4, r5
10058c46:	4620      	mov	r0, r4
10058c48:	b00a      	add	sp, #40	@ 0x28
10058c4a:	bd70      	pop	{r4, r5, r6, pc}
10058c4c:	5f9b34fb 	.word	0x5f9b34fb
10058c50:	80000080 	.word	0x80000080
10058c54:	00001000 	.word	0x00001000
10058c58:	00002902 	.word	0x00002902
10058c5c:	00000010 	.word	0x00000010

10058c60 <GAT_srv_get_cccd_val>:
10058c60:	b510      	push	{r4, lr}
10058c62:	460c      	mov	r4, r1
10058c64:	f7fd ffc2 	bl	10056bec <GAT_att_cmn_get_conn_index>
10058c68:	6861      	ldr	r1, [r4, #4]
10058c6a:	6989      	ldr	r1, [r1, #24]
10058c6c:	688b      	ldr	r3, [r1, #8]
10058c6e:	888a      	ldrh	r2, [r1, #4]
10058c70:	2102      	movs	r1, #2
10058c72:	f7ff fe69 	bl	10058948 <GAT_srv_get_zip_val>
10058c76:	bd10      	pop	{r4, pc}

10058c78 <GAT_srv_aes_cmac_append>:
10058c78:	b5f0      	push	{r4, r5, r6, r7, lr}
10058c7a:	b085      	sub	sp, #20
10058c7c:	9203      	str	r2, [sp, #12]
10058c7e:	460c      	mov	r4, r1
10058c80:	2101      	movs	r1, #1
10058c82:	0209      	lsls	r1, r1, #8
10058c84:	1841      	adds	r1, r0, r1
10058c86:	9104      	str	r1, [sp, #16]
10058c88:	9002      	str	r0, [sp, #8]
10058c8a:	30e0      	adds	r0, #224	@ 0xe0
10058c8c:	9001      	str	r0, [sp, #4]
10058c8e:	0420      	lsls	r0, r4, #16
10058c90:	d023      	beq.n	10058cda <GAT_srv_aes_cmac_append+0x62>
10058c92:	9804      	ldr	r0, [sp, #16]
10058c94:	8800      	ldrh	r0, [r0, #0]
10058c96:	2810      	cmp	r0, #16
10058c98:	d107      	bne.n	10058caa <GAT_srv_aes_cmac_append+0x32>
10058c9a:	2210      	movs	r2, #16
10058c9c:	9802      	ldr	r0, [sp, #8]
10058c9e:	9901      	ldr	r1, [sp, #4]
10058ca0:	f7f9 fd42 	bl	10052728 <BLEPLAT_AesCMACEncryptAppend>
10058ca4:	2000      	movs	r0, #0
10058ca6:	9904      	ldr	r1, [sp, #16]
10058ca8:	8008      	strh	r0, [r1, #0]
10058caa:	2110      	movs	r1, #16
10058cac:	1a0d      	subs	r5, r1, r0
10058cae:	b2a9      	uxth	r1, r5
10058cb0:	b2a2      	uxth	r2, r4
10058cb2:	4291      	cmp	r1, r2
10058cb4:	d300      	bcc.n	10058cb8 <GAT_srv_aes_cmac_append+0x40>
10058cb6:	4625      	mov	r5, r4
10058cb8:	b2af      	uxth	r7, r5
10058cba:	9902      	ldr	r1, [sp, #8]
10058cbc:	1808      	adds	r0, r1, r0
10058cbe:	30e0      	adds	r0, #224	@ 0xe0
10058cc0:	9e03      	ldr	r6, [sp, #12]
10058cc2:	4631      	mov	r1, r6
10058cc4:	463a      	mov	r2, r7
10058cc6:	f7f9 fcc5 	bl	10052654 <BLEPLAT_MemCpy>
10058cca:	9904      	ldr	r1, [sp, #16]
10058ccc:	8808      	ldrh	r0, [r1, #0]
10058cce:	1828      	adds	r0, r5, r0
10058cd0:	8008      	strh	r0, [r1, #0]
10058cd2:	1b64      	subs	r4, r4, r5
10058cd4:	19f6      	adds	r6, r6, r7
10058cd6:	9603      	str	r6, [sp, #12]
10058cd8:	e7d9      	b.n	10058c8e <GAT_srv_aes_cmac_append+0x16>
10058cda:	b005      	add	sp, #20
10058cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10058ce0 <GAT_srv_add_service>:
10058ce0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10058ce2:	4604      	mov	r4, r0
10058ce4:	f000 f89c 	bl	10058e20 <GAT_srv_db_update_allowed>
10058ce8:	250c      	movs	r5, #12
10058cea:	2800      	cmp	r0, #0
10058cec:	d025      	beq.n	10058d3a <GAT_srv_add_service+0x5a>
10058cee:	2612      	movs	r6, #18
10058cf0:	2c00      	cmp	r4, #0
10058cf2:	d023      	beq.n	10058d3c <GAT_srv_add_service+0x5c>
10058cf4:	7d20      	ldrb	r0, [r4, #20]
10058cf6:	1e40      	subs	r0, r0, #1
10058cf8:	2801      	cmp	r0, #1
10058cfa:	d81f      	bhi.n	10058d3c <GAT_srv_add_service+0x5c>
10058cfc:	7c20      	ldrb	r0, [r4, #16]
10058cfe:	2880      	cmp	r0, #128	@ 0x80
10058d00:	d01e      	beq.n	10058d40 <GAT_srv_add_service+0x60>
10058d02:	2810      	cmp	r0, #16
10058d04:	d11a      	bne.n	10058d3c <GAT_srv_add_service+0x5c>
10058d06:	89a0      	ldrh	r0, [r4, #12]
10058d08:	2101      	movs	r1, #1
10058d0a:	4388      	bics	r0, r1
10058d0c:	2103      	movs	r1, #3
10058d0e:	02c9      	lsls	r1, r1, #11
10058d10:	4288      	cmp	r0, r1
10058d12:	d115      	bne.n	10058d40 <GAT_srv_add_service+0x60>
10058d14:	2001      	movs	r0, #1
10058d16:	f00b fdeb 	bl	100648f0 <GAT_att_db_find_from_handle>
10058d1a:	2800      	cmp	r0, #0
10058d1c:	d010      	beq.n	10058d40 <GAT_srv_add_service+0x60>
10058d1e:	7801      	ldrb	r1, [r0, #0]
10058d20:	2900      	cmp	r1, #0
10058d22:	d107      	bne.n	10058d34 <GAT_srv_add_service+0x54>
10058d24:	6841      	ldr	r1, [r0, #4]
10058d26:	7c0a      	ldrb	r2, [r1, #16]
10058d28:	2a10      	cmp	r2, #16
10058d2a:	d103      	bne.n	10058d34 <GAT_srv_add_service+0x54>
10058d2c:	8989      	ldrh	r1, [r1, #12]
10058d2e:	89a2      	ldrh	r2, [r4, #12]
10058d30:	428a      	cmp	r2, r1
10058d32:	d002      	beq.n	10058d3a <GAT_srv_add_service+0x5a>
10058d34:	f00b fe3e 	bl	100649b4 <GAT_att_db_get_next>
10058d38:	e7ef      	b.n	10058d1a <GAT_srv_add_service+0x3a>
10058d3a:	462e      	mov	r6, r5
10058d3c:	4630      	mov	r0, r6
10058d3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10058d40:	2000      	movs	r0, #0
10058d42:	f00b fecd 	bl	10064ae0 <GAT_att_db_find_last_attr_of_type>
10058d46:	2800      	cmp	r0, #0
10058d48:	d006      	beq.n	10058d58 <GAT_srv_add_service+0x78>
10058d4a:	6841      	ldr	r1, [r0, #4]
10058d4c:	8ac9      	ldrh	r1, [r1, #22]
10058d4e:	2900      	cmp	r1, #0
10058d50:	d004      	beq.n	10058d5c <GAT_srv_add_service+0x7c>
10058d52:	8840      	ldrh	r0, [r0, #2]
10058d54:	1840      	adds	r0, r0, r1
10058d56:	e004      	b.n	10058d62 <GAT_srv_add_service+0x82>
10058d58:	2001      	movs	r0, #1
10058d5a:	e002      	b.n	10058d62 <GAT_srv_add_service+0x82>
10058d5c:	f00b fe6e 	bl	10064a3c <GAT_att_db_get_last_handle>
10058d60:	1c40      	adds	r0, r0, #1
10058d62:	b282      	uxth	r2, r0
10058d64:	2600      	movs	r6, #0
10058d66:	4630      	mov	r0, r6
10058d68:	4631      	mov	r1, r6
10058d6a:	4623      	mov	r3, r4
10058d6c:	f00b fd44 	bl	100647f8 <GAT_att_db_insert>
10058d70:	2800      	cmp	r0, #0
10058d72:	d020      	beq.n	10058db6 <GAT_srv_add_service+0xd6>
10058d74:	43f7      	mvns	r7, r6
10058d76:	8ae1      	ldrh	r1, [r4, #22]
10058d78:	1e49      	subs	r1, r1, #1
10058d7a:	9102      	str	r1, [sp, #8]
10058d7c:	9000      	str	r0, [sp, #0]
10058d7e:	9401      	str	r4, [sp, #4]
10058d80:	1c7f      	adds	r7, r7, #1
10058d82:	7e21      	ldrb	r1, [r4, #24]
10058d84:	428f      	cmp	r7, r1
10058d86:	d218      	bcs.n	10058dba <GAT_srv_add_service+0xda>
10058d88:	8ae1      	ldrh	r1, [r4, #22]
10058d8a:	2900      	cmp	r1, #0
10058d8c:	d004      	beq.n	10058d98 <GAT_srv_add_service+0xb8>
10058d8e:	9a02      	ldr	r2, [sp, #8]
10058d90:	0411      	lsls	r1, r2, #16
10058d92:	d03a      	beq.n	10058e0a <GAT_srv_add_service+0x12a>
10058d94:	1e52      	subs	r2, r2, #1
10058d96:	9202      	str	r2, [sp, #8]
10058d98:	1d35      	adds	r5, r6, #4
10058d9a:	1c40      	adds	r0, r0, #1
10058d9c:	9c01      	ldr	r4, [sp, #4]
10058d9e:	69e1      	ldr	r1, [r4, #28]
10058da0:	598b      	ldr	r3, [r1, r6]
10058da2:	b282      	uxth	r2, r0
10058da4:	2001      	movs	r0, #1
10058da6:	2100      	movs	r1, #0
10058da8:	f00b fd26 	bl	100647f8 <GAT_att_db_insert>
10058dac:	2800      	cmp	r0, #0
10058dae:	462e      	mov	r6, r5
10058db0:	d1e6      	bne.n	10058d80 <GAT_srv_add_service+0xa0>
10058db2:	2687      	movs	r6, #135	@ 0x87
10058db4:	e02e      	b.n	10058e14 <GAT_srv_add_service+0x134>
10058db6:	2687      	movs	r6, #135	@ 0x87
10058db8:	e7c0      	b.n	10058d3c <GAT_srv_add_service+0x5c>
10058dba:	4818      	ldr	r0, [pc, #96]	@ (10058e1c <__arm_cp.0_0>)
10058dbc:	6800      	ldr	r0, [r0, #0]
10058dbe:	215c      	movs	r1, #92	@ 0x5c
10058dc0:	5c42      	ldrb	r2, [r0, r1]
10058dc2:	2302      	movs	r3, #2
10058dc4:	4313      	orrs	r3, r2
10058dc6:	5443      	strb	r3, [r0, r1]
10058dc8:	200a      	movs	r0, #10
10058dca:	f009 fcd9 	bl	10062780 <tsk_notify_idx>
10058dce:	f7f8 fe5a 	bl	10051a86 <BLE_STACK_ProcessRequest>
10058dd2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
10058dd4:	2600      	movs	r6, #0
10058dd6:	2800      	cmp	r0, #0
10058dd8:	d0b0      	beq.n	10058d3c <GAT_srv_add_service+0x5c>
10058dda:	2020      	movs	r0, #32
10058ddc:	5c20      	ldrb	r0, [r4, r0]
10058dde:	2800      	cmp	r0, #0
10058de0:	d0ac      	beq.n	10058d3c <GAT_srv_add_service+0x5c>
10058de2:	4621      	mov	r1, r4
10058de4:	3120      	adds	r1, #32
10058de6:	9102      	str	r1, [sp, #8]
10058de8:	2500      	movs	r5, #0
10058dea:	462f      	mov	r7, r5
10058dec:	9501      	str	r5, [sp, #4]
10058dee:	4285      	cmp	r5, r0
10058df0:	9900      	ldr	r1, [sp, #0]
10058df2:	d20c      	bcs.n	10058e0e <GAT_srv_add_service+0x12e>
10058df4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
10058df6:	19c0      	adds	r0, r0, r7
10058df8:	f000 f822 	bl	10058e40 <GAT_srv_add_characteristic>
10058dfc:	2800      	cmp	r0, #0
10058dfe:	d108      	bne.n	10058e12 <GAT_srv_add_service+0x132>
10058e00:	3724      	adds	r7, #36	@ 0x24
10058e02:	9802      	ldr	r0, [sp, #8]
10058e04:	7800      	ldrb	r0, [r0, #0]
10058e06:	1c6d      	adds	r5, r5, #1
10058e08:	e7f1      	b.n	10058dee <GAT_srv_add_service+0x10e>
10058e0a:	2612      	movs	r6, #18
10058e0c:	e002      	b.n	10058e14 <GAT_srv_add_service+0x134>
10058e0e:	9e01      	ldr	r6, [sp, #4]
10058e10:	e794      	b.n	10058d3c <GAT_srv_add_service+0x5c>
10058e12:	4606      	mov	r6, r0
10058e14:	9800      	ldr	r0, [sp, #0]
10058e16:	f000 f8a3 	bl	10058f60 <GAT_srv_rm_service>
10058e1a:	e78f      	b.n	10058d3c <GAT_srv_add_service+0x5c>

10058e1c <__arm_cp.0_0>:
10058e1c:	20002428 	.word	0x20002428

10058e20 <GAT_srv_db_update_allowed>:
10058e20:	b510      	push	{r4, lr}
10058e22:	f7fe fac3 	bl	100573ac <GAT_att_srv_request_user_pending>
10058e26:	2400      	movs	r4, #0
10058e28:	2800      	cmp	r0, #0
10058e2a:	d106      	bne.n	10058e3a <GAT_srv_db_update_allowed+0x1a>
10058e2c:	f7fe faac 	bl	10057388 <GAT_att_srv_confirmation_pending>
10058e30:	2800      	cmp	r0, #0
10058e32:	d102      	bne.n	10058e3a <GAT_srv_db_update_allowed+0x1a>
10058e34:	f7fe fad2 	bl	100573dc <GAT_att_srv_flush_user_pending_list>
10058e38:	2401      	movs	r4, #1
10058e3a:	4620      	mov	r0, r4
10058e3c:	bd10      	pop	{r4, pc}
	...

10058e40 <GAT_srv_add_characteristic>:
10058e40:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10058e42:	460e      	mov	r6, r1
10058e44:	4604      	mov	r4, r0
10058e46:	f7ff ffeb 	bl	10058e20 <GAT_srv_db_update_allowed>
10058e4a:	2800      	cmp	r0, #0
10058e4c:	d066      	beq.n	10058f1c <GAT_srv_add_characteristic+0xdc>
10058e4e:	2512      	movs	r5, #18
10058e50:	2c00      	cmp	r4, #0
10058e52:	d064      	beq.n	10058f1e <GAT_srv_add_characteristic+0xde>
10058e54:	7d20      	ldrb	r0, [r4, #20]
10058e56:	2880      	cmp	r0, #128	@ 0x80
10058e58:	d013      	beq.n	10058e82 <GAT_srv_add_characteristic+0x42>
10058e5a:	2810      	cmp	r0, #16
10058e5c:	d15f      	bne.n	10058f1e <GAT_srv_add_characteristic+0xde>
10058e5e:	8a20      	ldrh	r0, [r4, #16]
10058e60:	493c      	ldr	r1, [pc, #240]	@ (10058f54 <__arm_cp.2_0>)
10058e62:	4288      	cmp	r0, r1
10058e64:	d10d      	bne.n	10058e82 <GAT_srv_add_characteristic+0x42>
10058e66:	6a20      	ldr	r0, [r4, #32]
10058e68:	2800      	cmp	r0, #0
10058e6a:	d058      	beq.n	10058f1e <GAT_srv_add_characteristic+0xde>
10058e6c:	8882      	ldrh	r2, [r0, #4]
10058e6e:	493a      	ldr	r1, [pc, #232]	@ (10058f58 <__arm_cp.2_1>)
10058e70:	7ac9      	ldrb	r1, [r1, #11]
10058e72:	0849      	lsrs	r1, r1, #1
10058e74:	1c49      	adds	r1, r1, #1
10058e76:	428a      	cmp	r2, r1
10058e78:	d351      	bcc.n	10058f1e <GAT_srv_add_characteristic+0xde>
10058e7a:	6880      	ldr	r0, [r0, #8]
10058e7c:	2100      	movs	r1, #0
10058e7e:	f7f9 fbf9 	bl	10052674 <BLEPLAT_MemSet>
10058e82:	78a0      	ldrb	r0, [r4, #2]
10058e84:	2124      	movs	r1, #36	@ 0x24
10058e86:	4208      	tst	r0, r1
10058e88:	d003      	beq.n	10058e92 <GAT_srv_add_characteristic+0x52>
10058e8a:	7860      	ldrb	r0, [r4, #1]
10058e8c:	1fc0      	subs	r0, r0, #7
10058e8e:	2809      	cmp	r0, #9
10058e90:	d845      	bhi.n	10058f1e <GAT_srv_add_characteristic+0xde>
10058e92:	4630      	mov	r0, r6
10058e94:	f00b fd04 	bl	100648a0 <GAT_att_db_find_by_handle>
10058e98:	2800      	cmp	r0, #0
10058e9a:	d040      	beq.n	10058f1e <GAT_srv_add_characteristic+0xde>
10058e9c:	4606      	mov	r6, r0
10058e9e:	7800      	ldrb	r0, [r0, #0]
10058ea0:	2800      	cmp	r0, #0
10058ea2:	d13c      	bne.n	10058f1e <GAT_srv_add_characteristic+0xde>
10058ea4:	7e20      	ldrb	r0, [r4, #24]
10058ea6:	1c81      	adds	r1, r0, #2
10058ea8:	4630      	mov	r0, r6
10058eaa:	f000 f883 	bl	10058fb4 <GAT_srv_check_group_size>
10058eae:	4605      	mov	r5, r0
10058eb0:	2800      	cmp	r0, #0
10058eb2:	d134      	bne.n	10058f1e <GAT_srv_add_characteristic+0xde>
10058eb4:	4630      	mov	r0, r6
10058eb6:	f7ff fb03 	bl	100584c0 <GAT_srv_get_att_group_end_handle>
10058eba:	4605      	mov	r5, r0
10058ebc:	f00b fcf0 	bl	100648a0 <GAT_att_db_find_by_handle>
10058ec0:	4601      	mov	r1, r0
10058ec2:	1c68      	adds	r0, r5, #1
10058ec4:	b286      	uxth	r6, r0
10058ec6:	2702      	movs	r7, #2
10058ec8:	4638      	mov	r0, r7
10058eca:	4632      	mov	r2, r6
10058ecc:	4623      	mov	r3, r4
10058ece:	f00b fc93 	bl	100647f8 <GAT_att_db_insert>
10058ed2:	42b0      	cmp	r0, r6
10058ed4:	d125      	bne.n	10058f22 <GAT_srv_add_characteristic+0xe2>
10058ed6:	4630      	mov	r0, r6
10058ed8:	f00b fce2 	bl	100648a0 <GAT_att_db_find_by_handle>
10058edc:	4601      	mov	r1, r0
10058ede:	1ca8      	adds	r0, r5, #2
10058ee0:	b282      	uxth	r2, r0
10058ee2:	2003      	movs	r0, #3
10058ee4:	4623      	mov	r3, r4
10058ee6:	f00b fc87 	bl	100647f8 <GAT_att_db_insert>
10058eea:	2800      	cmp	r0, #0
10058eec:	d029      	beq.n	10058f42 <GAT_srv_add_characteristic+0x102>
10058eee:	9701      	str	r7, [sp, #4]
10058ef0:	9602      	str	r6, [sp, #8]
10058ef2:	69e0      	ldr	r0, [r4, #28]
10058ef4:	2800      	cmp	r0, #0
10058ef6:	d016      	beq.n	10058f26 <GAT_srv_add_characteristic+0xe6>
10058ef8:	7e20      	ldrb	r0, [r4, #24]
10058efa:	2800      	cmp	r0, #0
10058efc:	d013      	beq.n	10058f26 <GAT_srv_add_characteristic+0xe6>
10058efe:	2600      	movs	r6, #0
10058f00:	4637      	mov	r7, r6
10058f02:	4287      	cmp	r7, r0
10058f04:	d20f      	bcs.n	10058f26 <GAT_srv_add_characteristic+0xe6>
10058f06:	69e0      	ldr	r0, [r4, #28]
10058f08:	1980      	adds	r0, r0, r6
10058f0a:	9902      	ldr	r1, [sp, #8]
10058f0c:	f000 f86c 	bl	10058fe8 <GAT_srv_add_char_descriptor>
10058f10:	2800      	cmp	r0, #0
10058f12:	d118      	bne.n	10058f46 <GAT_srv_add_characteristic+0x106>
10058f14:	361c      	adds	r6, #28
10058f16:	7e20      	ldrb	r0, [r4, #24]
10058f18:	1c7f      	adds	r7, r7, #1
10058f1a:	e7f2      	b.n	10058f02 <GAT_srv_add_characteristic+0xc2>
10058f1c:	250c      	movs	r5, #12
10058f1e:	4628      	mov	r0, r5
10058f20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10058f22:	2587      	movs	r5, #135	@ 0x87
10058f24:	e7fb      	b.n	10058f1e <GAT_srv_add_characteristic+0xde>
10058f26:	480d      	ldr	r0, [pc, #52]	@ (10058f5c <__arm_cp.2_2>)
10058f28:	6800      	ldr	r0, [r0, #0]
10058f2a:	215c      	movs	r1, #92	@ 0x5c
10058f2c:	5c42      	ldrb	r2, [r0, r1]
10058f2e:	9b01      	ldr	r3, [sp, #4]
10058f30:	431a      	orrs	r2, r3
10058f32:	5442      	strb	r2, [r0, r1]
10058f34:	200a      	movs	r0, #10
10058f36:	f009 fc23 	bl	10062780 <tsk_notify_idx>
10058f3a:	f7f8 fda4 	bl	10051a86 <BLE_STACK_ProcessRequest>
10058f3e:	2500      	movs	r5, #0
10058f40:	e7ed      	b.n	10058f1e <GAT_srv_add_characteristic+0xde>
10058f42:	2587      	movs	r5, #135	@ 0x87
10058f44:	e001      	b.n	10058f4a <GAT_srv_add_characteristic+0x10a>
10058f46:	4605      	mov	r5, r0
10058f48:	9e02      	ldr	r6, [sp, #8]
10058f4a:	4630      	mov	r0, r6
10058f4c:	f000 f8d4 	bl	100590f8 <GAT_srv_rm_characteristic>
10058f50:	e7e5      	b.n	10058f1e <GAT_srv_add_characteristic+0xde>
10058f52:	46c0      	nop			@ (mov r8, r8)

10058f54 <__arm_cp.2_0>:
10058f54:	00002b29 	.word	0x00002b29

10058f58 <__arm_cp.2_1>:
10058f58:	20002484 	.word	0x20002484

10058f5c <__arm_cp.2_2>:
10058f5c:	20002428 	.word	0x20002428

10058f60 <GAT_srv_rm_service>:
10058f60:	b510      	push	{r4, lr}
10058f62:	4604      	mov	r4, r0
10058f64:	f7ff ff5c 	bl	10058e20 <GAT_srv_db_update_allowed>
10058f68:	2800      	cmp	r0, #0
10058f6a:	d00a      	beq.n	10058f82 <GAT_srv_rm_service+0x22>
10058f6c:	4620      	mov	r0, r4
10058f6e:	f00b fc97 	bl	100648a0 <GAT_att_db_find_by_handle>
10058f72:	4601      	mov	r1, r0
10058f74:	2012      	movs	r0, #18
10058f76:	2900      	cmp	r1, #0
10058f78:	d002      	beq.n	10058f80 <GAT_srv_rm_service+0x20>
10058f7a:	780a      	ldrb	r2, [r1, #0]
10058f7c:	2a00      	cmp	r2, #0
10058f7e:	d002      	beq.n	10058f86 <GAT_srv_rm_service+0x26>
10058f80:	bd10      	pop	{r4, pc}
10058f82:	200c      	movs	r0, #12
10058f84:	bd10      	pop	{r4, pc}
10058f86:	4608      	mov	r0, r1
10058f88:	f00b fd28 	bl	100649dc <GAT_att_db_get_last_group_handle>
10058f8c:	4601      	mov	r1, r0
10058f8e:	4620      	mov	r0, r4
10058f90:	f00b fd64 	bl	10064a5c <GAT_att_db_rm_att_range>
10058f94:	4806      	ldr	r0, [pc, #24]	@ (10058fb0 <__arm_cp.3_0>)
10058f96:	6800      	ldr	r0, [r0, #0]
10058f98:	215c      	movs	r1, #92	@ 0x5c
10058f9a:	5c42      	ldrb	r2, [r0, r1]
10058f9c:	2302      	movs	r3, #2
10058f9e:	4313      	orrs	r3, r2
10058fa0:	5443      	strb	r3, [r0, r1]
10058fa2:	200a      	movs	r0, #10
10058fa4:	f009 fbec 	bl	10062780 <tsk_notify_idx>
10058fa8:	f7f8 fd6d 	bl	10051a86 <BLE_STACK_ProcessRequest>
10058fac:	2000      	movs	r0, #0
10058fae:	bd10      	pop	{r4, pc}

10058fb0 <__arm_cp.3_0>:
10058fb0:	20002428 	.word	0x20002428

10058fb4 <GAT_srv_check_group_size>:
10058fb4:	b5b0      	push	{r4, r5, r7, lr}
10058fb6:	460d      	mov	r5, r1
10058fb8:	4604      	mov	r4, r0
10058fba:	f7ff fa81 	bl	100584c0 <GAT_srv_get_att_group_end_handle>
10058fbe:	6861      	ldr	r1, [r4, #4]
10058fc0:	8ac9      	ldrh	r1, [r1, #22]
10058fc2:	2900      	cmp	r1, #0
10058fc4:	d008      	beq.n	10058fd8 <GAT_srv_check_group_size+0x24>
10058fc6:	43c0      	mvns	r0, r0
10058fc8:	1808      	adds	r0, r1, r0
10058fca:	8861      	ldrh	r1, [r4, #2]
10058fcc:	1840      	adds	r0, r0, r1
10058fce:	b280      	uxth	r0, r0
10058fd0:	42a8      	cmp	r0, r5
10058fd2:	d306      	bcc.n	10058fe2 <GAT_srv_check_group_size+0x2e>
10058fd4:	2000      	movs	r0, #0
10058fd6:	bdb0      	pop	{r4, r5, r7, pc}
10058fd8:	2000      	movs	r0, #0
10058fda:	f00b fd81 	bl	10064ae0 <GAT_att_db_find_last_attr_of_type>
10058fde:	42a0      	cmp	r0, r4
10058fe0:	d0f8      	beq.n	10058fd4 <GAT_srv_check_group_size+0x20>
10058fe2:	200c      	movs	r0, #12
10058fe4:	bdb0      	pop	{r4, r5, r7, pc}
	...

10058fe8 <GAT_srv_add_char_descriptor>:
10058fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10058fea:	460e      	mov	r6, r1
10058fec:	4604      	mov	r4, r0
10058fee:	f7ff ff17 	bl	10058e20 <GAT_srv_db_update_allowed>
10058ff2:	2800      	cmp	r0, #0
10058ff4:	d075      	beq.n	100590e2 <GAT_srv_add_char_descriptor+0xfa>
10058ff6:	2512      	movs	r5, #18
10058ff8:	2c00      	cmp	r4, #0
10058ffa:	d073      	beq.n	100590e4 <GAT_srv_add_char_descriptor+0xfc>
10058ffc:	7d20      	ldrb	r0, [r4, #20]
10058ffe:	2880      	cmp	r0, #128	@ 0x80
10059000:	d001      	beq.n	10059006 <GAT_srv_add_char_descriptor+0x1e>
10059002:	2810      	cmp	r0, #16
10059004:	d16e      	bne.n	100590e4 <GAT_srv_add_char_descriptor+0xfc>
10059006:	2810      	cmp	r0, #16
10059008:	d108      	bne.n	1005901c <GAT_srv_add_char_descriptor+0x34>
1005900a:	8a21      	ldrh	r1, [r4, #16]
1005900c:	2229      	movs	r2, #41	@ 0x29
1005900e:	0212      	lsls	r2, r2, #8
10059010:	1c92      	adds	r2, r2, #2
10059012:	4291      	cmp	r1, r2
10059014:	d102      	bne.n	1005901c <GAT_srv_add_char_descriptor+0x34>
10059016:	69a1      	ldr	r1, [r4, #24]
10059018:	2900      	cmp	r1, #0
1005901a:	d063      	beq.n	100590e4 <GAT_srv_add_char_descriptor+0xfc>
1005901c:	78a1      	ldrb	r1, [r4, #2]
1005901e:	2224      	movs	r2, #36	@ 0x24
10059020:	4211      	tst	r1, r2
10059022:	d003      	beq.n	1005902c <GAT_srv_add_char_descriptor+0x44>
10059024:	7862      	ldrb	r2, [r4, #1]
10059026:	1fd2      	subs	r2, r2, #7
10059028:	2a09      	cmp	r2, #9
1005902a:	d85b      	bhi.n	100590e4 <GAT_srv_add_char_descriptor+0xfc>
1005902c:	2810      	cmp	r0, #16
1005902e:	d115      	bne.n	1005905c <GAT_srv_add_char_descriptor+0x74>
10059030:	8a20      	ldrh	r0, [r4, #16]
10059032:	4a2f      	ldr	r2, [pc, #188]	@ (100590f0 <__arm_cp.7_0>)
10059034:	1882      	adds	r2, r0, r2
10059036:	2a05      	cmp	r2, #5
10059038:	d810      	bhi.n	1005905c <GAT_srv_add_char_descriptor+0x74>
1005903a:	2301      	movs	r3, #1
1005903c:	4093      	lsls	r3, r2
1005903e:	2231      	movs	r2, #49	@ 0x31
10059040:	4213      	tst	r3, r2
10059042:	d00b      	beq.n	1005905c <GAT_srv_add_char_descriptor+0x74>
10059044:	7822      	ldrb	r2, [r4, #0]
10059046:	2a01      	cmp	r2, #1
10059048:	d14c      	bne.n	100590e4 <GAT_srv_add_char_descriptor+0xfc>
1005904a:	2900      	cmp	r1, #0
1005904c:	d14a      	bne.n	100590e4 <GAT_srv_add_char_descriptor+0xfc>
1005904e:	2129      	movs	r1, #41	@ 0x29
10059050:	0209      	lsls	r1, r1, #8
10059052:	4288      	cmp	r0, r1
10059054:	d102      	bne.n	1005905c <GAT_srv_add_char_descriptor+0x74>
10059056:	69a0      	ldr	r0, [r4, #24]
10059058:	2800      	cmp	r0, #0
1005905a:	d043      	beq.n	100590e4 <GAT_srv_add_char_descriptor+0xfc>
1005905c:	4630      	mov	r0, r6
1005905e:	f00b fc1f 	bl	100648a0 <GAT_att_db_find_by_handle>
10059062:	2800      	cmp	r0, #0
10059064:	d03e      	beq.n	100590e4 <GAT_srv_add_char_descriptor+0xfc>
10059066:	4607      	mov	r7, r0
10059068:	7800      	ldrb	r0, [r0, #0]
1005906a:	2802      	cmp	r0, #2
1005906c:	d13a      	bne.n	100590e4 <GAT_srv_add_char_descriptor+0xfc>
1005906e:	2500      	movs	r5, #0
10059070:	4628      	mov	r0, r5
10059072:	4631      	mov	r1, r6
10059074:	f00b fd4a 	bl	10064b0c <GAT_att_db_reverse_find_attr_of_type>
10059078:	2800      	cmp	r0, #0
1005907a:	d035      	beq.n	100590e8 <GAT_srv_add_char_descriptor+0x100>
1005907c:	462e      	mov	r6, r5
1005907e:	2101      	movs	r1, #1
10059080:	f7ff ff98 	bl	10058fb4 <GAT_srv_check_group_size>
10059084:	4605      	mov	r5, r0
10059086:	2800      	cmp	r0, #0
10059088:	d12c      	bne.n	100590e4 <GAT_srv_add_char_descriptor+0xfc>
1005908a:	4638      	mov	r0, r7
1005908c:	f7ff fa18 	bl	100584c0 <GAT_srv_get_att_group_end_handle>
10059090:	4605      	mov	r5, r0
10059092:	f00b fc05 	bl	100648a0 <GAT_att_db_find_by_handle>
10059096:	4601      	mov	r1, r0
10059098:	1c6d      	adds	r5, r5, #1
1005909a:	b2aa      	uxth	r2, r5
1005909c:	2004      	movs	r0, #4
1005909e:	4623      	mov	r3, r4
100590a0:	f00b fbaa 	bl	100647f8 <GAT_att_db_insert>
100590a4:	4285      	cmp	r5, r0
100590a6:	d121      	bne.n	100590ec <GAT_srv_add_char_descriptor+0x104>
100590a8:	7d20      	ldrb	r0, [r4, #20]
100590aa:	2810      	cmp	r0, #16
100590ac:	d10b      	bne.n	100590c6 <GAT_srv_add_char_descriptor+0xde>
100590ae:	8a20      	ldrh	r0, [r4, #16]
100590b0:	2129      	movs	r1, #41	@ 0x29
100590b2:	0209      	lsls	r1, r1, #8
100590b4:	1c89      	adds	r1, r1, #2
100590b6:	4288      	cmp	r0, r1
100590b8:	d105      	bne.n	100590c6 <GAT_srv_add_char_descriptor+0xde>
100590ba:	69a0      	ldr	r0, [r4, #24]
100590bc:	8882      	ldrh	r2, [r0, #4]
100590be:	6880      	ldr	r0, [r0, #8]
100590c0:	2100      	movs	r1, #0
100590c2:	f7f9 fad7 	bl	10052674 <BLEPLAT_MemSet>
100590c6:	480b      	ldr	r0, [pc, #44]	@ (100590f4 <__arm_cp.7_1>)
100590c8:	6800      	ldr	r0, [r0, #0]
100590ca:	215c      	movs	r1, #92	@ 0x5c
100590cc:	5c42      	ldrb	r2, [r0, r1]
100590ce:	2302      	movs	r3, #2
100590d0:	4313      	orrs	r3, r2
100590d2:	5443      	strb	r3, [r0, r1]
100590d4:	200a      	movs	r0, #10
100590d6:	f009 fb53 	bl	10062780 <tsk_notify_idx>
100590da:	f7f8 fcd4 	bl	10051a86 <BLE_STACK_ProcessRequest>
100590de:	4635      	mov	r5, r6
100590e0:	e000      	b.n	100590e4 <GAT_srv_add_char_descriptor+0xfc>
100590e2:	250c      	movs	r5, #12
100590e4:	4628      	mov	r0, r5
100590e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100590e8:	2586      	movs	r5, #134	@ 0x86
100590ea:	e7fb      	b.n	100590e4 <GAT_srv_add_char_descriptor+0xfc>
100590ec:	2587      	movs	r5, #135	@ 0x87
100590ee:	e7f9      	b.n	100590e4 <GAT_srv_add_char_descriptor+0xfc>

100590f0 <__arm_cp.7_0>:
100590f0:	ffffd700 	.word	0xffffd700

100590f4 <__arm_cp.7_1>:
100590f4:	20002428 	.word	0x20002428

100590f8 <GAT_srv_rm_characteristic>:
100590f8:	b510      	push	{r4, lr}
100590fa:	4604      	mov	r4, r0
100590fc:	f7ff fe90 	bl	10058e20 <GAT_srv_db_update_allowed>
10059100:	2800      	cmp	r0, #0
10059102:	d01e      	beq.n	10059142 <GAT_srv_rm_characteristic+0x4a>
10059104:	4620      	mov	r0, r4
10059106:	f00b fbcb 	bl	100648a0 <GAT_att_db_find_by_handle>
1005910a:	4601      	mov	r1, r0
1005910c:	2012      	movs	r0, #18
1005910e:	2900      	cmp	r1, #0
10059110:	d016      	beq.n	10059140 <GAT_srv_rm_characteristic+0x48>
10059112:	780a      	ldrb	r2, [r1, #0]
10059114:	2a02      	cmp	r2, #2
10059116:	d113      	bne.n	10059140 <GAT_srv_rm_characteristic+0x48>
10059118:	4608      	mov	r0, r1
1005911a:	f00b fc5f 	bl	100649dc <GAT_att_db_get_last_group_handle>
1005911e:	4601      	mov	r1, r0
10059120:	4620      	mov	r0, r4
10059122:	f00b fc9b 	bl	10064a5c <GAT_att_db_rm_att_range>
10059126:	4808      	ldr	r0, [pc, #32]	@ (10059148 <__arm_cp.8_0>)
10059128:	6800      	ldr	r0, [r0, #0]
1005912a:	215c      	movs	r1, #92	@ 0x5c
1005912c:	5c42      	ldrb	r2, [r0, r1]
1005912e:	2302      	movs	r3, #2
10059130:	4313      	orrs	r3, r2
10059132:	5443      	strb	r3, [r0, r1]
10059134:	200a      	movs	r0, #10
10059136:	f009 fb23 	bl	10062780 <tsk_notify_idx>
1005913a:	f7f8 fca4 	bl	10051a86 <BLE_STACK_ProcessRequest>
1005913e:	2000      	movs	r0, #0
10059140:	bd10      	pop	{r4, pc}
10059142:	200c      	movs	r0, #12
10059144:	bd10      	pop	{r4, pc}
10059146:	46c0      	nop			@ (mov r8, r8)

10059148 <__arm_cp.8_0>:
10059148:	20002428 	.word	0x20002428

1005914c <GAT_srv_resp>:
1005914c:	b51c      	push	{r2, r3, r4, lr}
1005914e:	9c05      	ldr	r4, [sp, #20]
10059150:	9401      	str	r4, [sp, #4]
10059152:	9c04      	ldr	r4, [sp, #16]
10059154:	9400      	str	r4, [sp, #0]
10059156:	f7fe f893 	bl	10057280 <GAT_att_srv_resp>
1005915a:	bd1c      	pop	{r2, r3, r4, pc}

1005915c <GAT_srv_get_service_handle>:
1005915c:	b580      	push	{r7, lr}
1005915e:	4603      	mov	r3, r0
10059160:	2001      	movs	r0, #1
10059162:	4902      	ldr	r1, [pc, #8]	@ (1005916c <__arm_cp.14_0>)
10059164:	2200      	movs	r2, #0
10059166:	f7ff fd41 	bl	10058bec <GAT_srv_get_attribute_handle>
1005916a:	bd80      	pop	{r7, pc}

1005916c <__arm_cp.14_0>:
1005916c:	0000ffff 	.word	0x0000ffff

10059170 <GAT_srv_get_char_decl_handle>:
10059170:	b580      	push	{r7, lr}
10059172:	4603      	mov	r3, r0
10059174:	2001      	movs	r0, #1
10059176:	4902      	ldr	r1, [pc, #8]	@ (10059180 <__arm_cp.16_0>)
10059178:	2202      	movs	r2, #2
1005917a:	f7ff fd37 	bl	10058bec <GAT_srv_get_attribute_handle>
1005917e:	bd80      	pop	{r7, pc}

10059180 <__arm_cp.16_0>:
10059180:	0000ffff 	.word	0x0000ffff

10059184 <hci_rx_acl_data>:
10059184:	b5f0      	push	{r4, r5, r6, r7, lr}
10059186:	b085      	sub	sp, #20
10059188:	4604      	mov	r4, r0
1005918a:	7887      	ldrb	r7, [r0, #2]
1005918c:	1e78      	subs	r0, r7, #1
1005918e:	2103      	movs	r1, #3
10059190:	9104      	str	r1, [sp, #16]
10059192:	4308      	orrs	r0, r1
10059194:	3009      	adds	r0, #9
10059196:	0880      	lsrs	r0, r0, #2
10059198:	b283      	uxth	r3, r0
1005919a:	7a20      	ldrb	r0, [r4, #8]
1005919c:	9003      	str	r0, [sp, #12]
1005919e:	8820      	ldrh	r0, [r4, #0]
100591a0:	9002      	str	r0, [sp, #8]
100591a2:	4811      	ldr	r0, [pc, #68]	@ (100591e8 <__arm_cp.2_0>)
100591a4:	6800      	ldr	r0, [r0, #0]
100591a6:	6980      	ldr	r0, [r0, #24]
100591a8:	2502      	movs	r5, #2
100591aa:	223e      	movs	r2, #62	@ 0x3e
100591ac:	4629      	mov	r1, r5
100591ae:	f7fb ff9d 	bl	100550ec <aci_event_fifo_push_header>
100591b2:	2800      	cmp	r0, #0
100591b4:	d014      	beq.n	100591e0 <hci_rx_acl_data+0x5c>
100591b6:	4606      	mov	r6, r0
100591b8:	9700      	str	r7, [sp, #0]
100591ba:	9401      	str	r4, [sp, #4]
100591bc:	9804      	ldr	r0, [sp, #16]
100591be:	9a03      	ldr	r2, [sp, #12]
100591c0:	4002      	ands	r2, r0
100591c2:	1d30      	adds	r0, r6, #4
100591c4:	2700      	movs	r7, #0
100591c6:	9902      	ldr	r1, [sp, #8]
100591c8:	463b      	mov	r3, r7
100591ca:	f7fc fcf6 	bl	10055bba <hci_rx_acl_data_event_copy>
100591ce:	7135      	strb	r5, [r6, #4]
100591d0:	4628      	mov	r0, r5
100591d2:	4631      	mov	r1, r6
100591d4:	f7fc f827 	bl	10055226 <aci_event_fifo_push>
100591d8:	4620      	mov	r0, r4
100591da:	f7fb fdd3 	bl	10054d84 <ACL_pkt_release>
100591de:	e000      	b.n	100591e2 <hci_rx_acl_data+0x5e>
100591e0:	2707      	movs	r7, #7
100591e2:	4638      	mov	r0, r7
100591e4:	b005      	add	sp, #20
100591e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100591e8 <__arm_cp.2_0>:
100591e8:	20002420 	.word	0x20002420

100591ec <hci_tx_acl_data_done>:
100591ec:	b5b0      	push	{r4, r5, r7, lr}
100591ee:	4604      	mov	r4, r0
100591f0:	8801      	ldrh	r1, [r0, #0]
100591f2:	2002      	movs	r0, #2
100591f4:	f00a fe38 	bl	10063e68 <hci_number_of_completed_packets_event_push_noinline>
100591f8:	4605      	mov	r5, r0
100591fa:	2800      	cmp	r0, #0
100591fc:	d102      	bne.n	10059204 <hci_tx_acl_data_done+0x18>
100591fe:	4620      	mov	r0, r4
10059200:	f7fb fdc0 	bl	10054d84 <ACL_pkt_release>
10059204:	4628      	mov	r0, r5
10059206:	bdb0      	pop	{r4, r5, r7, pc}

10059208 <hci_le_set_advertising_parameters>:
10059208:	b5f0      	push	{r4, r5, r6, r7, lr}
1005920a:	b089      	sub	sp, #36	@ 0x24
1005920c:	461d      	mov	r5, r3
1005920e:	4616      	mov	r6, r2
10059210:	460f      	mov	r7, r1
10059212:	9004      	str	r0, [sp, #16]
10059214:	2002      	movs	r0, #2
10059216:	2401      	movs	r4, #1
10059218:	4621      	mov	r1, r4
1005921a:	f000 f8d9 	bl	100593d0 <hci_get_set_legacy_ext_flag>
1005921e:	2800      	cmp	r0, #0
10059220:	d150      	bne.n	100592c4 <hci_le_set_advertising_parameters+0xbc>
10059222:	9703      	str	r7, [sp, #12]
10059224:	2012      	movs	r0, #18
10059226:	2e04      	cmp	r6, #4
10059228:	d84c      	bhi.n	100592c4 <hci_le_set_advertising_parameters+0xbc>
1005922a:	9002      	str	r0, [sp, #8]
1005922c:	f7f5 fcb0 	bl	1004eb90 <conn_supp_csr_ucfg>
10059230:	2e01      	cmp	r6, #1
10059232:	d803      	bhi.n	1005923c <hci_le_set_advertising_parameters+0x34>
10059234:	2800      	cmp	r0, #0
10059236:	d101      	bne.n	1005923c <hci_le_set_advertising_parameters+0x34>
10059238:	2011      	movs	r0, #17
1005923a:	e043      	b.n	100592c4 <hci_le_set_advertising_parameters+0xbc>
1005923c:	9811      	ldr	r0, [sp, #68]	@ 0x44
1005923e:	9000      	str	r0, [sp, #0]
10059240:	9810      	ldr	r0, [sp, #64]	@ 0x40
10059242:	9001      	str	r0, [sp, #4]
10059244:	990f      	ldr	r1, [sp, #60]	@ 0x3c
10059246:	980e      	ldr	r0, [sp, #56]	@ 0x38
10059248:	af05      	add	r7, sp, #20
1005924a:	7238      	strb	r0, [r7, #8]
1005924c:	71fd      	strb	r5, [r7, #7]
1005924e:	713e      	strb	r6, [r7, #4]
10059250:	9803      	ldr	r0, [sp, #12]
10059252:	8078      	strh	r0, [r7, #2]
10059254:	9804      	ldr	r0, [sp, #16]
10059256:	8038      	strh	r0, [r7, #0]
10059258:	4638      	mov	r0, r7
1005925a:	3009      	adds	r0, #9
1005925c:	2206      	movs	r2, #6
1005925e:	f7f9 f9f9 	bl	10052654 <BLEPLAT_MemCpy>
10059262:	9900      	ldr	r1, [sp, #0]
10059264:	71b9      	strb	r1, [r7, #6]
10059266:	9801      	ldr	r0, [sp, #4]
10059268:	7178      	strb	r0, [r7, #5]
1005926a:	7938      	ldrb	r0, [r7, #4]
1005926c:	2804      	cmp	r0, #4
1005926e:	d001      	beq.n	10059274 <hci_le_set_advertising_parameters+0x6c>
10059270:	2801      	cmp	r0, #1
10059272:	d104      	bne.n	1005927e <hci_le_set_advertising_parameters+0x76>
10059274:	a905      	add	r1, sp, #20
10059276:	7a09      	ldrb	r1, [r1, #8]
10059278:	2902      	cmp	r1, #2
1005927a:	d302      	bcc.n	10059282 <hci_le_set_advertising_parameters+0x7a>
1005927c:	e021      	b.n	100592c2 <hci_le_set_advertising_parameters+0xba>
1005927e:	2903      	cmp	r1, #3
10059280:	d81f      	bhi.n	100592c2 <hci_le_set_advertising_parameters+0xba>
10059282:	2801      	cmp	r0, #1
10059284:	d10e      	bne.n	100592a4 <hci_le_set_advertising_parameters+0x9c>
10059286:	f000 f966 	bl	10059556 <hci_le_check_own_address_type_max_value_ucfg_weak>
1005928a:	a905      	add	r1, sp, #20
1005928c:	79c9      	ldrb	r1, [r1, #7]
1005928e:	4281      	cmp	r1, r0
10059290:	d817      	bhi.n	100592c2 <hci_le_set_advertising_parameters+0xba>
10059292:	a805      	add	r0, sp, #20
10059294:	7940      	ldrb	r0, [r0, #5]
10059296:	0740      	lsls	r0, r0, #29
10059298:	9802      	ldr	r0, [sp, #8]
1005929a:	d013      	beq.n	100592c4 <hci_le_set_advertising_parameters+0xbc>
1005929c:	a805      	add	r0, sp, #20
1005929e:	f005 fde1 	bl	1005ee64 <LL_LE_Set_Advertising_Parameters>
100592a2:	e00f      	b.n	100592c4 <hci_le_set_advertising_parameters+0xbc>
100592a4:	a805      	add	r0, sp, #20
100592a6:	8800      	ldrh	r0, [r0, #0]
100592a8:	2820      	cmp	r0, #32
100592aa:	d30a      	bcc.n	100592c2 <hci_le_set_advertising_parameters+0xba>
100592ac:	03a1      	lsls	r1, r4, #14
100592ae:	4288      	cmp	r0, r1
100592b0:	d807      	bhi.n	100592c2 <hci_le_set_advertising_parameters+0xba>
100592b2:	aa05      	add	r2, sp, #20
100592b4:	8852      	ldrh	r2, [r2, #2]
100592b6:	2a20      	cmp	r2, #32
100592b8:	d303      	bcc.n	100592c2 <hci_le_set_advertising_parameters+0xba>
100592ba:	428a      	cmp	r2, r1
100592bc:	d801      	bhi.n	100592c2 <hci_le_set_advertising_parameters+0xba>
100592be:	4290      	cmp	r0, r2
100592c0:	d9e1      	bls.n	10059286 <hci_le_set_advertising_parameters+0x7e>
100592c2:	9802      	ldr	r0, [sp, #8]
100592c4:	b009      	add	sp, #36	@ 0x24
100592c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100592c8 <hci_le_set_advertising_enable>:
100592c8:	b510      	push	{r4, lr}
100592ca:	4604      	mov	r4, r0
100592cc:	2002      	movs	r0, #2
100592ce:	2101      	movs	r1, #1
100592d0:	f000 f87e 	bl	100593d0 <hci_get_set_legacy_ext_flag>
100592d4:	2800      	cmp	r0, #0
100592d6:	d000      	beq.n	100592da <hci_le_set_advertising_enable+0x12>
100592d8:	bd10      	pop	{r4, pc}
100592da:	2c01      	cmp	r4, #1
100592dc:	d803      	bhi.n	100592e6 <hci_le_set_advertising_enable+0x1e>
100592de:	4620      	mov	r0, r4
100592e0:	f005 fe44 	bl	1005ef6c <LL_LE_Set_Advertise_Enable>
100592e4:	bd10      	pop	{r4, pc}
100592e6:	2012      	movs	r0, #18
100592e8:	bd10      	pop	{r4, pc}

100592ea <chc_csr_ucfg_weak>:
100592ea:	2000      	movs	r0, #0
100592ec:	4770      	bx	lr
	...

100592f0 <HCI_Init>:
100592f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100592f2:	4917      	ldr	r1, [pc, #92]	@ (10059350 <__arm_cp.0_0>)
100592f4:	6808      	ldr	r0, [r1, #0]
100592f6:	460d      	mov	r5, r1
100592f8:	2124      	movs	r1, #36	@ 0x24
100592fa:	2400      	movs	r4, #0
100592fc:	5444      	strb	r4, [r0, r1]
100592fe:	3025      	adds	r0, #37	@ 0x25
10059300:	2211      	movs	r2, #17
10059302:	4f14      	ldr	r7, [pc, #80]	@ (10059354 <__arm_cp.0_1>)
10059304:	4621      	mov	r1, r4
10059306:	47b8      	blx	r7
10059308:	6828      	ldr	r0, [r5, #0]
1005930a:	3036      	adds	r0, #54	@ 0x36
1005930c:	26ff      	movs	r6, #255	@ 0xff
1005930e:	2205      	movs	r2, #5
10059310:	4631      	mov	r1, r6
10059312:	47b8      	blx	r7
10059314:	6829      	ldr	r1, [r5, #0]
10059316:	203b      	movs	r0, #59	@ 0x3b
10059318:	231f      	movs	r3, #31
1005931a:	540b      	strb	r3, [r1, r0]
1005931c:	2201      	movs	r2, #1
1005931e:	0355      	lsls	r5, r2, #13
10059320:	4608      	mov	r0, r1
10059322:	303b      	adds	r0, #59	@ 0x3b
10059324:	5285      	strh	r5, [r0, r2]
10059326:	72c3      	strb	r3, [r0, #11]
10059328:	3147      	adds	r1, #71	@ 0x47
1005932a:	2207      	movs	r2, #7
1005932c:	4608      	mov	r0, r1
1005932e:	4621      	mov	r1, r4
10059330:	47b8      	blx	r7
10059332:	4d07      	ldr	r5, [pc, #28]	@ (10059350 <__arm_cp.0_0>)
10059334:	6828      	ldr	r0, [r5, #0]
10059336:	304e      	adds	r0, #78	@ 0x4e
10059338:	2208      	movs	r2, #8
1005933a:	4631      	mov	r1, r6
1005933c:	47b8      	blx	r7
1005933e:	4806      	ldr	r0, [pc, #24]	@ (10059358 <__arm_cp.0_2>)
10059340:	6800      	ldr	r0, [r0, #0]
10059342:	2135      	movs	r1, #53	@ 0x35
10059344:	5444      	strb	r4, [r0, r1]
10059346:	6828      	ldr	r0, [r5, #0]
10059348:	4904      	ldr	r1, [pc, #16]	@ (1005935c <__arm_cp.0_3>)
1005934a:	6201      	str	r1, [r0, #32]
1005934c:	65c4      	str	r4, [r0, #92]	@ 0x5c
1005934e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10059350 <__arm_cp.0_0>:
10059350:	20002470 	.word	0x20002470

10059354 <__arm_cp.0_1>:
10059354:	10052675 	.word	0x10052675

10059358 <__arm_cp.0_2>:
10059358:	2000241c 	.word	0x2000241c

1005935c <__arm_cp.0_3>:
1005935c:	fffffdbe 	.word	0xfffffdbe

10059360 <Controller_Process_Q>:
10059360:	b570      	push	{r4, r5, r6, lr}
10059362:	2500      	movs	r5, #0
10059364:	4e07      	ldr	r6, [pc, #28]	@ (10059384 <__arm_cp.2_0>)
10059366:	7af0      	ldrb	r0, [r6, #11]
10059368:	4285      	cmp	r5, r0
1005936a:	d20a      	bcs.n	10059382 <Controller_Process_Q+0x22>
1005936c:	b2ec      	uxtb	r4, r5
1005936e:	4620      	mov	r0, r4
10059370:	f002 fcc6 	bl	1005bd00 <LL_cpe_engine>
10059374:	2800      	cmp	r0, #0
10059376:	d002      	beq.n	1005937e <Controller_Process_Q+0x1e>
10059378:	4620      	mov	r0, r4
1005937a:	f002 fcc1 	bl	1005bd00 <LL_cpe_engine>
1005937e:	1c6d      	adds	r5, r5, #1
10059380:	e7f1      	b.n	10059366 <Controller_Process_Q+0x6>
10059382:	bd70      	pop	{r4, r5, r6, pc}

10059384 <__arm_cp.2_0>:
10059384:	20002484 	.word	0x20002484

10059388 <hci_le_set_random_address>:
10059388:	b580      	push	{r7, lr}
1005938a:	f005 ffff 	bl	1005f38c <LL_Set_Advertising_Set_Random_Address>
1005938e:	bd80      	pop	{r7, pc}

10059390 <hci_set_event_mask>:
10059390:	b510      	push	{r4, lr}
10059392:	2136      	movs	r1, #54	@ 0x36
10059394:	4a05      	ldr	r2, [pc, #20]	@ (100593ac <__arm_cp.14_0>)
10059396:	293e      	cmp	r1, #62	@ 0x3e
10059398:	d006      	beq.n	100593a8 <hci_set_event_mask+0x18>
1005939a:	1843      	adds	r3, r0, r1
1005939c:	3b36      	subs	r3, #54	@ 0x36
1005939e:	781b      	ldrb	r3, [r3, #0]
100593a0:	6814      	ldr	r4, [r2, #0]
100593a2:	5463      	strb	r3, [r4, r1]
100593a4:	1c49      	adds	r1, r1, #1
100593a6:	e7f6      	b.n	10059396 <hci_set_event_mask+0x6>
100593a8:	2000      	movs	r0, #0
100593aa:	bd10      	pop	{r4, pc}

100593ac <__arm_cp.14_0>:
100593ac:	20002470 	.word	0x20002470

100593b0 <hci_le_set_event_mask>:
100593b0:	b510      	push	{r4, lr}
100593b2:	2146      	movs	r1, #70	@ 0x46
100593b4:	4a05      	ldr	r2, [pc, #20]	@ (100593cc <__arm_cp.16_0>)
100593b6:	294e      	cmp	r1, #78	@ 0x4e
100593b8:	d006      	beq.n	100593c8 <hci_le_set_event_mask+0x18>
100593ba:	1843      	adds	r3, r0, r1
100593bc:	3b46      	subs	r3, #70	@ 0x46
100593be:	781b      	ldrb	r3, [r3, #0]
100593c0:	6814      	ldr	r4, [r2, #0]
100593c2:	5463      	strb	r3, [r4, r1]
100593c4:	1c49      	adds	r1, r1, #1
100593c6:	e7f6      	b.n	100593b6 <hci_le_set_event_mask+0x6>
100593c8:	2000      	movs	r0, #0
100593ca:	bd10      	pop	{r4, pc}

100593cc <__arm_cp.16_0>:
100593cc:	20002470 	.word	0x20002470

100593d0 <hci_get_set_legacy_ext_flag>:
100593d0:	4a05      	ldr	r2, [pc, #20]	@ (100593e8 <__arm_cp.18_0>)
100593d2:	6812      	ldr	r2, [r2, #0]
100593d4:	2335      	movs	r3, #53	@ 0x35
100593d6:	5cd3      	ldrb	r3, [r2, r3]
100593d8:	4203      	tst	r3, r0
100593da:	d001      	beq.n	100593e0 <hci_get_set_legacy_ext_flag+0x10>
100593dc:	200c      	movs	r0, #12
100593de:	4770      	bx	lr
100593e0:	3235      	adds	r2, #53	@ 0x35
100593e2:	7011      	strb	r1, [r2, #0]
100593e4:	2000      	movs	r0, #0
100593e6:	4770      	bx	lr

100593e8 <__arm_cp.18_0>:
100593e8:	2000241c 	.word	0x2000241c

100593ec <hci_check_legacy_ext_flag>:
100593ec:	4903      	ldr	r1, [pc, #12]	@ (100593fc <__arm_cp.25_0>)
100593ee:	6809      	ldr	r1, [r1, #0]
100593f0:	2235      	movs	r2, #53	@ 0x35
100593f2:	5c89      	ldrb	r1, [r1, r2]
100593f4:	4008      	ands	r0, r1
100593f6:	1e41      	subs	r1, r0, #1
100593f8:	4188      	sbcs	r0, r1
100593fa:	4770      	bx	lr

100593fc <__arm_cp.25_0>:
100593fc:	2000241c 	.word	0x2000241c

10059400 <LLC_offline_control_procedures_processing>:
10059400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10059402:	2400      	movs	r4, #0
10059404:	4620      	mov	r0, r4
10059406:	f000 fd97 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005940a:	4605      	mov	r5, r0
1005940c:	2201      	movs	r2, #1
1005940e:	4b30      	ldr	r3, [pc, #192]	@ (100594d0 <__arm_cp.27_0>)
10059410:	4627      	mov	r7, r4
10059412:	9200      	str	r2, [sp, #0]
10059414:	6818      	ldr	r0, [r3, #0]
10059416:	2134      	movs	r1, #52	@ 0x34
10059418:	5c40      	ldrb	r0, [r0, r1]
1005941a:	4284      	cmp	r4, r0
1005941c:	d250      	bcs.n	100594c0 <LLC_offline_control_procedures_processing+0xc0>
1005941e:	202c      	movs	r0, #44	@ 0x2c
10059420:	5c28      	ldrb	r0, [r5, r0]
10059422:	21fe      	movs	r1, #254	@ 0xfe
10059424:	4001      	ands	r1, r0
10059426:	2902      	cmp	r1, #2
10059428:	d13e      	bne.n	100594a8 <LLC_offline_control_procedures_processing+0xa8>
1005942a:	208c      	movs	r0, #140	@ 0x8c
1005942c:	582e      	ldr	r6, [r5, r0]
1005942e:	07f0      	lsls	r0, r6, #31
10059430:	d00d      	beq.n	1005944e <LLC_offline_control_procedures_processing+0x4e>
10059432:	8f69      	ldrh	r1, [r5, #58]	@ 0x3a
10059434:	2000      	movs	r0, #0
10059436:	f004 fb93 	bl	1005db60 <LL_Read_Remote_Used_Features>
1005943a:	283a      	cmp	r0, #58	@ 0x3a
1005943c:	9a00      	ldr	r2, [sp, #0]
1005943e:	4610      	mov	r0, r2
10059440:	d030      	beq.n	100594a4 <LLC_offline_control_procedures_processing+0xa4>
10059442:	4628      	mov	r0, r5
10059444:	308c      	adds	r0, #140	@ 0x8c
10059446:	6801      	ldr	r1, [r0, #0]
10059448:	2201      	movs	r2, #1
1005944a:	4391      	bics	r1, r2
1005944c:	6001      	str	r1, [r0, #0]
1005944e:	4628      	mov	r0, r5
10059450:	f002 fb7e 	bl	1005bb50 <llc_subrate_offline_processing_ucfg_weak>
10059454:	2800      	cmp	r0, #0
10059456:	9a00      	ldr	r2, [sp, #0]
10059458:	4610      	mov	r0, r2
1005945a:	d123      	bne.n	100594a4 <LLC_offline_control_procedures_processing+0xa4>
1005945c:	4628      	mov	r0, r5
1005945e:	4631      	mov	r1, r6
10059460:	f006 fd04 	bl	1005fe6c <Data_Len_Update_Offline_Processing_ucfg_weak>
10059464:	9a00      	ldr	r2, [sp, #0]
10059466:	2800      	cmp	r0, #0
10059468:	4610      	mov	r0, r2
1005946a:	d11b      	bne.n	100594a4 <LLC_offline_control_procedures_processing+0xa4>
1005946c:	b2e6      	uxtb	r6, r4
1005946e:	4630      	mov	r0, r6
10059470:	f003 fc0e 	bl	1005cc90 <LLC_channel_map_update_offline_processing_ucfg_weak>
10059474:	9a00      	ldr	r2, [sp, #0]
10059476:	2800      	cmp	r0, #0
10059478:	4610      	mov	r0, r2
1005947a:	d113      	bne.n	100594a4 <LLC_offline_control_procedures_processing+0xa4>
1005947c:	4630      	mov	r0, r6
1005947e:	f003 fc0b 	bl	1005cc98 <LLC_chc_reporting_offline_processing_ucfg_weak>
10059482:	9a00      	ldr	r2, [sp, #0]
10059484:	2800      	cmp	r0, #0
10059486:	4610      	mov	r0, r2
10059488:	d10c      	bne.n	100594a4 <LLC_offline_control_procedures_processing+0xa4>
1005948a:	4628      	mov	r0, r5
1005948c:	f003 fe45 	bl	1005d11a <LLC_cte_request_procedure_ucfg_weak>
10059490:	9a00      	ldr	r2, [sp, #0]
10059492:	2800      	cmp	r0, #0
10059494:	4610      	mov	r0, r2
10059496:	d105      	bne.n	100594a4 <LLC_offline_control_procedures_processing+0xa4>
10059498:	4630      	mov	r0, r6
1005949a:	f004 fd68 	bl	1005df6e <LLC_pcl_offline_processing_ucfg_weak>
1005949e:	9a00      	ldr	r2, [sp, #0]
100594a0:	1e41      	subs	r1, r0, #1
100594a2:	4188      	sbcs	r0, r1
100594a4:	4b0a      	ldr	r3, [pc, #40]	@ (100594d0 <__arm_cp.27_0>)
100594a6:	e000      	b.n	100594aa <LLC_offline_control_procedures_processing+0xaa>
100594a8:	2000      	movs	r0, #0
100594aa:	1e41      	subs	r1, r0, #1
100594ac:	4188      	sbcs	r0, r1
100594ae:	0639      	lsls	r1, r7, #24
100594b0:	4617      	mov	r7, r2
100594b2:	d100      	bne.n	100594b6 <LLC_offline_control_procedures_processing+0xb6>
100594b4:	4607      	mov	r7, r0
100594b6:	204d      	movs	r0, #77	@ 0x4d
100594b8:	0080      	lsls	r0, r0, #2
100594ba:	182d      	adds	r5, r5, r0
100594bc:	1c64      	adds	r4, r4, #1
100594be:	e7a9      	b.n	10059414 <LLC_offline_control_procedures_processing+0x14>
100594c0:	0638      	lsls	r0, r7, #24
100594c2:	d003      	beq.n	100594cc <LLC_offline_control_procedures_processing+0xcc>
100594c4:	2011      	movs	r0, #17
100594c6:	2101      	movs	r1, #1
100594c8:	f009 f96c 	bl	100627a4 <tsk_wait_resource_idx>
100594cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100594ce:	46c0      	nop			@ (mov r8, r8)

100594d0 <__arm_cp.27_0>:
100594d0:	2000241c 	.word	0x2000241c

100594d4 <cte_csr_ucfg_weak>:
100594d4:	2000      	movs	r0, #0
100594d6:	4770      	bx	lr

100594d8 <hci_le_encrypt>:
100594d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100594da:	b08f      	sub	sp, #60	@ 0x3c
100594dc:	9202      	str	r2, [sp, #8]
100594de:	4607      	mov	r7, r0
100594e0:	a807      	add	r0, sp, #28
100594e2:	9001      	str	r0, [sp, #4]
100594e4:	2510      	movs	r5, #16
100594e6:	4e0c      	ldr	r6, [pc, #48]	@ (10059518 <__arm_cp.0_0>)
100594e8:	462a      	mov	r2, r5
100594ea:	47b0      	blx	r6
100594ec:	ac0b      	add	r4, sp, #44	@ 0x2c
100594ee:	4620      	mov	r0, r4
100594f0:	4639      	mov	r1, r7
100594f2:	462a      	mov	r2, r5
100594f4:	47b0      	blx	r6
100594f6:	af03      	add	r7, sp, #12
100594f8:	2600      	movs	r6, #0
100594fa:	9801      	ldr	r0, [sp, #4]
100594fc:	4621      	mov	r1, r4
100594fe:	463a      	mov	r2, r7
10059500:	4633      	mov	r3, r6
10059502:	f009 fc53 	bl	10062dac <BLEPLAT_aes128_encrypt>
10059506:	9802      	ldr	r0, [sp, #8]
10059508:	4639      	mov	r1, r7
1005950a:	462a      	mov	r2, r5
1005950c:	4b02      	ldr	r3, [pc, #8]	@ (10059518 <__arm_cp.0_0>)
1005950e:	4798      	blx	r3
10059510:	4630      	mov	r0, r6
10059512:	b00f      	add	sp, #60	@ 0x3c
10059514:	bdf0      	pop	{r4, r5, r6, r7, pc}
10059516:	46c0      	nop			@ (mov r8, r8)

10059518 <__arm_cp.0_0>:
10059518:	10052655 	.word	0x10052655

1005951c <hci_le_long_term_key_request_reply_api>:
1005951c:	b5b0      	push	{r4, r5, r7, lr}
1005951e:	460c      	mov	r4, r1
10059520:	4605      	mov	r5, r0
10059522:	f000 ff83 	bl	1005a42c <llc_conn_get_conn_idx>
10059526:	28ff      	cmp	r0, #255	@ 0xff
10059528:	d005      	beq.n	10059536 <hci_le_long_term_key_request_reply_api+0x1a>
1005952a:	2000      	movs	r0, #0
1005952c:	4629      	mov	r1, r5
1005952e:	4622      	mov	r2, r4
10059530:	f004 f9c3 	bl	1005d8ba <LL_Get_LTK>
10059534:	bdb0      	pop	{r4, r5, r7, pc}
10059536:	2002      	movs	r0, #2
10059538:	bdb0      	pop	{r4, r5, r7, pc}

1005953a <hci_le_long_term_key_request_negative_reply_api>:
1005953a:	b510      	push	{r4, lr}
1005953c:	4604      	mov	r4, r0
1005953e:	f000 ff75 	bl	1005a42c <llc_conn_get_conn_idx>
10059542:	28ff      	cmp	r0, #255	@ 0xff
10059544:	d005      	beq.n	10059552 <hci_le_long_term_key_request_negative_reply_api+0x18>
10059546:	2081      	movs	r0, #129	@ 0x81
10059548:	2200      	movs	r2, #0
1005954a:	4621      	mov	r1, r4
1005954c:	f004 f9b5 	bl	1005d8ba <LL_Get_LTK>
10059550:	bd10      	pop	{r4, pc}
10059552:	2002      	movs	r0, #2
10059554:	bd10      	pop	{r4, pc}

10059556 <hci_le_check_own_address_type_max_value_ucfg_weak>:
10059556:	2001      	movs	r0, #1
10059558:	4770      	bx	lr

1005955a <hci_le_clear_filter_accept_list>:
1005955a:	b580      	push	{r7, lr}
1005955c:	f002 fa02 	bl	1005b964 <llc_wl_clear_filter_accept_list>
10059560:	bd80      	pop	{r7, pc}

10059562 <hci_le_add_device_to_filter_accept_list>:
10059562:	b5e0      	push	{r5, r6, r7, lr}
10059564:	2802      	cmp	r0, #2
10059566:	d301      	bcc.n	1005956c <hci_le_add_device_to_filter_accept_list+0xa>
10059568:	28ff      	cmp	r0, #255	@ 0xff
1005956a:	d10d      	bne.n	10059588 <hci_le_add_device_to_filter_accept_list+0x26>
1005956c:	2200      	movs	r2, #0
1005956e:	9200      	str	r2, [sp, #0]
10059570:	466b      	mov	r3, sp
10059572:	7018      	strb	r0, [r3, #0]
10059574:	9201      	str	r2, [sp, #4]
10059576:	1c58      	adds	r0, r3, #1
10059578:	2206      	movs	r2, #6
1005957a:	f7f9 f86b 	bl	10052654 <BLEPLAT_MemCpy>
1005957e:	9901      	ldr	r1, [sp, #4]
10059580:	9800      	ldr	r0, [sp, #0]
10059582:	f002 fa09 	bl	1005b998 <llc_wl_add_device_to_filter_accept_list>
10059586:	bd8c      	pop	{r2, r3, r7, pc}
10059588:	2012      	movs	r0, #18
1005958a:	bd8c      	pop	{r2, r3, r7, pc}

1005958c <data_length_extension_csr_ucfg_weak>:
1005958c:	2000      	movs	r0, #0
1005958e:	4770      	bx	lr

10059590 <pcl_csr_ucfg_weak>:
10059590:	2000      	movs	r0, #0
10059592:	4770      	bx	lr

10059594 <phy_upd_csr>:
10059594:	2001      	movs	r0, #1
10059596:	4770      	bx	lr

10059598 <scan_csr_ucfg_weak>:
10059598:	2000      	movs	r0, #0
1005959a:	4770      	bx	lr

1005959c <conn_supp_csr>:
1005959c:	2001      	movs	r0, #1
1005959e:	4770      	bx	lr

100595a0 <subrate_csr_ucfg_weak>:
100595a0:	2000      	movs	r0, #0
100595a2:	4770      	bx	lr

100595a4 <L2C_build_connect_update_request>:
100595a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100595a6:	b087      	sub	sp, #28
100595a8:	8901      	ldrh	r1, [r0, #8]
100595aa:	9104      	str	r1, [sp, #16]
100595ac:	88c1      	ldrh	r1, [r0, #6]
100595ae:	9105      	str	r1, [sp, #20]
100595b0:	8884      	ldrh	r4, [r0, #4]
100595b2:	8846      	ldrh	r6, [r0, #2]
100595b4:	8807      	ldrh	r7, [r0, #0]
100595b6:	2000      	movs	r0, #0
100595b8:	9006      	str	r0, [sp, #24]
100595ba:	a906      	add	r1, sp, #24
100595bc:	4638      	mov	r0, r7
100595be:	f000 f89f 	bl	10059700 <l2c_get_check_link_status_on_request_sending>
100595c2:	4605      	mov	r5, r0
100595c4:	2800      	cmp	r0, #0
100595c6:	d15a      	bne.n	1005967e <L2C_build_connect_update_request+0xda>
100595c8:	9603      	str	r6, [sp, #12]
100595ca:	9402      	str	r4, [sp, #8]
100595cc:	9806      	ldr	r0, [sp, #24]
100595ce:	7880      	ldrb	r0, [r0, #2]
100595d0:	07c0      	lsls	r0, r0, #31
100595d2:	d151      	bne.n	10059678 <L2C_build_connect_update_request+0xd4>
100595d4:	2400      	movs	r4, #0
100595d6:	2210      	movs	r2, #16
100595d8:	4620      	mov	r0, r4
100595da:	4639      	mov	r1, r7
100595dc:	f7fb fbb0 	bl	10054d40 <ACL_pkt_get>
100595e0:	2800      	cmp	r0, #0
100595e2:	d04b      	beq.n	1005967c <L2C_build_connect_update_request+0xd8>
100595e4:	4607      	mov	r7, r0
100595e6:	482a      	ldr	r0, [pc, #168]	@ (10059690 <__arm_cp.0_0>)
100595e8:	9a03      	ldr	r2, [sp, #12]
100595ea:	1f91      	subs	r1, r2, #6
100595ec:	b289      	uxth	r1, r1
100595ee:	2512      	movs	r5, #18
100595f0:	4281      	cmp	r1, r0
100595f2:	d23d      	bcs.n	10059670 <L2C_build_connect_update_request+0xcc>
100595f4:	9e02      	ldr	r6, [sp, #8]
100595f6:	2e06      	cmp	r6, #6
100595f8:	d33a      	bcc.n	10059670 <L2C_build_connect_update_request+0xcc>
100595fa:	1d80      	adds	r0, r0, #6
100595fc:	4286      	cmp	r6, r0
100595fe:	d237      	bcs.n	10059670 <L2C_build_connect_update_request+0xcc>
10059600:	42b2      	cmp	r2, r6
10059602:	d835      	bhi.n	10059670 <L2C_build_connect_update_request+0xcc>
10059604:	9a05      	ldr	r2, [sp, #20]
10059606:	0891      	lsrs	r1, r2, #2
10059608:	297c      	cmp	r1, #124	@ 0x7c
1005960a:	d831      	bhi.n	10059670 <L2C_build_connect_update_request+0xcc>
1005960c:	1c51      	adds	r1, r2, #1
1005960e:	4371      	muls	r1, r6
10059610:	9b04      	ldr	r3, [sp, #16]
10059612:	009a      	lsls	r2, r3, #2
10059614:	4291      	cmp	r1, r2
10059616:	d82b      	bhi.n	10059670 <L2C_build_connect_update_request+0xcc>
10059618:	2b0a      	cmp	r3, #10
1005961a:	d329      	bcc.n	10059670 <L2C_build_connect_update_request+0xcc>
1005961c:	4283      	cmp	r3, r0
1005961e:	d227      	bcs.n	10059670 <L2C_build_connect_update_request+0xcc>
10059620:	9401      	str	r4, [sp, #4]
10059622:	6878      	ldr	r0, [r7, #4]
10059624:	2112      	movs	r1, #18
10059626:	7201      	strb	r1, [r0, #8]
10059628:	6878      	ldr	r0, [r7, #4]
1005962a:	9906      	ldr	r1, [sp, #24]
1005962c:	7909      	ldrb	r1, [r1, #4]
1005962e:	7241      	strb	r1, [r0, #9]
10059630:	2106      	movs	r1, #6
10059632:	2508      	movs	r5, #8
10059634:	4c17      	ldr	r4, [pc, #92]	@ (10059694 <__arm_cp.0_1>)
10059636:	4638      	mov	r0, r7
10059638:	462a      	mov	r2, r5
1005963a:	47a0      	blx	r4
1005963c:	4638      	mov	r0, r7
1005963e:	4629      	mov	r1, r5
10059640:	9a03      	ldr	r2, [sp, #12]
10059642:	47a0      	blx	r4
10059644:	210a      	movs	r1, #10
10059646:	4638      	mov	r0, r7
10059648:	4632      	mov	r2, r6
1005964a:	4625      	mov	r5, r4
1005964c:	47a0      	blx	r4
1005964e:	240c      	movs	r4, #12
10059650:	4638      	mov	r0, r7
10059652:	4621      	mov	r1, r4
10059654:	9a05      	ldr	r2, [sp, #20]
10059656:	47a8      	blx	r5
10059658:	210e      	movs	r1, #14
1005965a:	4638      	mov	r0, r7
1005965c:	9a04      	ldr	r2, [sp, #16]
1005965e:	47a8      	blx	r5
10059660:	807c      	strh	r4, [r7, #2]
10059662:	2005      	movs	r0, #5
10059664:	4639      	mov	r1, r7
10059666:	f000 f9cf 	bl	10059a08 <L2C_send_frame>
1005966a:	2800      	cmp	r0, #0
1005966c:	d00a      	beq.n	10059684 <L2C_build_connect_update_request+0xe0>
1005966e:	2581      	movs	r5, #129	@ 0x81
10059670:	4638      	mov	r0, r7
10059672:	f7fb fb87 	bl	10054d84 <ACL_pkt_release>
10059676:	e002      	b.n	1005967e <L2C_build_connect_update_request+0xda>
10059678:	250c      	movs	r5, #12
1005967a:	e000      	b.n	1005967e <L2C_build_connect_update_request+0xda>
1005967c:	2588      	movs	r5, #136	@ 0x88
1005967e:	4628      	mov	r0, r5
10059680:	b007      	add	sp, #28
10059682:	bdf0      	pop	{r4, r5, r6, r7, pc}
10059684:	9906      	ldr	r1, [sp, #24]
10059686:	2012      	movs	r0, #18
10059688:	f000 f84f 	bl	1005972a <l2c_set_link_status_after_request_enqueued>
1005968c:	9d01      	ldr	r5, [sp, #4]
1005968e:	e7f6      	b.n	1005967e <L2C_build_connect_update_request+0xda>

10059690 <__arm_cp.0_0>:
10059690:	00000c7b 	.word	0x00000c7b

10059694 <__arm_cp.0_1>:
10059694:	10054def 	.word	0x10054def

10059698 <l2c_get_link_control_block_ref>:
10059698:	b570      	push	{r4, r5, r6, lr}
1005969a:	490b      	ldr	r1, [pc, #44]	@ (100596c8 <__arm_cp.0_0>)
1005969c:	7ac9      	ldrb	r1, [r1, #11]
1005969e:	2214      	movs	r2, #20
100596a0:	434a      	muls	r2, r1
100596a2:	3214      	adds	r2, #20
100596a4:	4909      	ldr	r1, [pc, #36]	@ (100596cc <__arm_cp.0_1>)
100596a6:	680b      	ldr	r3, [r1, #0]
100596a8:	2100      	movs	r1, #0
100596aa:	460d      	mov	r5, r1
100596ac:	460c      	mov	r4, r1
100596ae:	3414      	adds	r4, #20
100596b0:	42a2      	cmp	r2, r4
100596b2:	d006      	beq.n	100596c2 <l2c_get_link_control_block_ref+0x2a>
100596b4:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
100596b6:	5b75      	ldrh	r5, [r6, r5]
100596b8:	4285      	cmp	r5, r0
100596ba:	4625      	mov	r5, r4
100596bc:	d1f7      	bne.n	100596ae <l2c_get_link_control_block_ref+0x16>
100596be:	1931      	adds	r1, r6, r4
100596c0:	3914      	subs	r1, #20
100596c2:	4608      	mov	r0, r1
100596c4:	bd70      	pop	{r4, r5, r6, pc}
100596c6:	46c0      	nop			@ (mov r8, r8)

100596c8 <__arm_cp.0_0>:
100596c8:	20002484 	.word	0x20002484

100596cc <__arm_cp.0_1>:
100596cc:	20002468 	.word	0x20002468

100596d0 <l2c_get_link_control_block_index>:
100596d0:	b5b0      	push	{r4, r5, r7, lr}
100596d2:	4909      	ldr	r1, [pc, #36]	@ (100596f8 <__arm_cp.1_0>)
100596d4:	7aca      	ldrb	r2, [r1, #11]
100596d6:	4909      	ldr	r1, [pc, #36]	@ (100596fc <__arm_cp.1_1>)
100596d8:	680b      	ldr	r3, [r1, #0]
100596da:	2400      	movs	r4, #0
100596dc:	4621      	mov	r1, r4
100596de:	428a      	cmp	r2, r1
100596e0:	d006      	beq.n	100596f0 <l2c_get_link_control_block_index+0x20>
100596e2:	6add      	ldr	r5, [r3, #44]	@ 0x2c
100596e4:	5b2d      	ldrh	r5, [r5, r4]
100596e6:	4285      	cmp	r5, r0
100596e8:	d003      	beq.n	100596f2 <l2c_get_link_control_block_index+0x22>
100596ea:	3414      	adds	r4, #20
100596ec:	1c49      	adds	r1, r1, #1
100596ee:	e7f6      	b.n	100596de <l2c_get_link_control_block_index+0xe>
100596f0:	4611      	mov	r1, r2
100596f2:	b2c8      	uxtb	r0, r1
100596f4:	bdb0      	pop	{r4, r5, r7, pc}
100596f6:	46c0      	nop			@ (mov r8, r8)

100596f8 <__arm_cp.1_0>:
100596f8:	20002484 	.word	0x20002484

100596fc <__arm_cp.1_1>:
100596fc:	20002468 	.word	0x20002468

10059700 <l2c_get_check_link_status_on_request_sending>:
10059700:	b5b0      	push	{r4, r5, r7, lr}
10059702:	460c      	mov	r4, r1
10059704:	4605      	mov	r5, r0
10059706:	f7ff ffc7 	bl	10059698 <l2c_get_link_control_block_ref>
1005970a:	4601      	mov	r1, r0
1005970c:	6020      	str	r0, [r4, #0]
1005970e:	2002      	movs	r0, #2
10059710:	2d00      	cmp	r5, #0
10059712:	d009      	beq.n	10059728 <l2c_get_check_link_status_on_request_sending+0x28>
10059714:	2900      	cmp	r1, #0
10059716:	d007      	beq.n	10059728 <l2c_get_check_link_status_on_request_sending+0x28>
10059718:	7908      	ldrb	r0, [r1, #4]
1005971a:	2800      	cmp	r0, #0
1005971c:	d003      	beq.n	10059726 <l2c_get_check_link_status_on_request_sending+0x26>
1005971e:	7889      	ldrb	r1, [r1, #2]
10059720:	2006      	movs	r0, #6
10059722:	4008      	ands	r0, r1
10059724:	d000      	beq.n	10059728 <l2c_get_check_link_status_on_request_sending+0x28>
10059726:	200c      	movs	r0, #12
10059728:	bdb0      	pop	{r4, r5, r7, pc}

1005972a <l2c_set_link_status_after_request_enqueued>:
1005972a:	7188      	strb	r0, [r1, #6]
1005972c:	7908      	ldrb	r0, [r1, #4]
1005972e:	71c8      	strb	r0, [r1, #7]
10059730:	7888      	ldrb	r0, [r1, #2]
10059732:	2206      	movs	r2, #6
10059734:	4302      	orrs	r2, r0
10059736:	708a      	strb	r2, [r1, #2]
10059738:	4770      	bx	lr

1005973a <l2c_post_process_incoming_request_packet>:
1005973a:	7190      	strb	r0, [r2, #6]
1005973c:	7151      	strb	r1, [r2, #5]
1005973e:	7890      	ldrb	r0, [r2, #2]
10059740:	2104      	movs	r1, #4
10059742:	4301      	orrs	r1, r0
10059744:	7091      	strb	r1, [r2, #2]
10059746:	4770      	bx	lr

10059748 <l2c_pre_process_incoming_response_packet>:
10059748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005974a:	4604      	mov	r4, r0
1005974c:	2014      	movs	r0, #20
1005974e:	4360      	muls	r0, r4
10059750:	4b14      	ldr	r3, [pc, #80]	@ (100597a4 <__arm_cp.7_0>)
10059752:	681b      	ldr	r3, [r3, #0]
10059754:	6add      	ldr	r5, [r3, #44]	@ 0x2c
10059756:	182d      	adds	r5, r5, r0
10059758:	78a8      	ldrb	r0, [r5, #2]
1005975a:	0746      	lsls	r6, r0, #29
1005975c:	2081      	movs	r0, #129	@ 0x81
1005975e:	2e00      	cmp	r6, #0
10059760:	d51f      	bpl.n	100597a2 <l2c_pre_process_incoming_response_packet+0x5a>
10059762:	79ae      	ldrb	r6, [r5, #6]
10059764:	1c76      	adds	r6, r6, #1
10059766:	428e      	cmp	r6, r1
10059768:	d001      	beq.n	1005976e <l2c_pre_process_incoming_response_packet+0x26>
1005976a:	2901      	cmp	r1, #1
1005976c:	d119      	bne.n	100597a2 <l2c_pre_process_incoming_response_packet+0x5a>
1005976e:	79e9      	ldrb	r1, [r5, #7]
10059770:	4291      	cmp	r1, r2
10059772:	d116      	bne.n	100597a2 <l2c_pre_process_incoming_response_packet+0x5a>
10059774:	1cae      	adds	r6, r5, #2
10059776:	1daf      	adds	r7, r5, #6
10059778:	1de8      	adds	r0, r5, #7
1005977a:	9000      	str	r0, [sp, #0]
1005977c:	4618      	mov	r0, r3
1005977e:	4621      	mov	r1, r4
10059780:	f009 f871 	bl	10062866 <CST_stop>
10059784:	2000      	movs	r0, #0
10059786:	7038      	strb	r0, [r7, #0]
10059788:	9900      	ldr	r1, [sp, #0]
1005978a:	7008      	strb	r0, [r1, #0]
1005978c:	7831      	ldrb	r1, [r6, #0]
1005978e:	22fb      	movs	r2, #251	@ 0xfb
10059790:	400a      	ands	r2, r1
10059792:	7032      	strb	r2, [r6, #0]
10059794:	7929      	ldrb	r1, [r5, #4]
10059796:	1c4a      	adds	r2, r1, #1
10059798:	b2d1      	uxtb	r1, r2
1005979a:	4291      	cmp	r1, r2
1005979c:	d000      	beq.n	100597a0 <l2c_pre_process_incoming_response_packet+0x58>
1005979e:	2101      	movs	r1, #1
100597a0:	7129      	strb	r1, [r5, #4]
100597a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100597a4 <__arm_cp.7_0>:
100597a4:	20002468 	.word	0x20002468

100597a8 <l2c_release_unexpected_acl_packet>:
100597a8:	b580      	push	{r7, lr}
100597aa:	4608      	mov	r0, r1
100597ac:	f7fb faea 	bl	10054d84 <ACL_pkt_release>
100597b0:	bd80      	pop	{r7, pc}

100597b2 <L2C_get_cid_from_basic_packet_header>:
100597b2:	b580      	push	{r7, lr}
100597b4:	2102      	movs	r1, #2
100597b6:	f7fb fb0a 	bl	10054dce <ACL_pkt_read_16b>
100597ba:	bd80      	pop	{r7, pc}

100597bc <L2C_build_command_reject_pdu>:
100597bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100597be:	b085      	sub	sp, #20
100597c0:	461e      	mov	r6, r3
100597c2:	9204      	str	r2, [sp, #16]
100597c4:	460d      	mov	r5, r1
100597c6:	4607      	mov	r7, r0
100597c8:	f7ff ff66 	bl	10059698 <l2c_get_link_control_block_ref>
100597cc:	2800      	cmp	r0, #0
100597ce:	d00f      	beq.n	100597f0 <L2C_build_command_reject_pdu+0x34>
100597d0:	4604      	mov	r4, r0
100597d2:	9603      	str	r6, [sp, #12]
100597d4:	7940      	ldrb	r0, [r0, #5]
100597d6:	2612      	movs	r6, #18
100597d8:	42a8      	cmp	r0, r5
100597da:	d10a      	bne.n	100597f2 <L2C_build_command_reject_pdu+0x36>
100597dc:	9904      	ldr	r1, [sp, #16]
100597de:	2902      	cmp	r1, #2
100597e0:	d807      	bhi.n	100597f2 <L2C_build_command_reject_pdu+0x36>
100597e2:	78a0      	ldrb	r0, [r4, #2]
100597e4:	0780      	lsls	r0, r0, #30
100597e6:	d407      	bmi.n	100597f8 <L2C_build_command_reject_pdu+0x3c>
100597e8:	2901      	cmp	r1, #1
100597ea:	d007      	beq.n	100597fc <L2C_build_command_reject_pdu+0x40>
100597ec:	2004      	movs	r0, #4
100597ee:	e006      	b.n	100597fe <L2C_build_command_reject_pdu+0x42>
100597f0:	2602      	movs	r6, #2
100597f2:	4630      	mov	r0, r6
100597f4:	b005      	add	sp, #20
100597f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100597f8:	260c      	movs	r6, #12
100597fa:	e7fa      	b.n	100597f2 <L2C_build_command_reject_pdu+0x36>
100597fc:	2002      	movs	r0, #2
100597fe:	2900      	cmp	r1, #0
10059800:	d100      	bne.n	10059804 <L2C_build_command_reject_pdu+0x48>
10059802:	4608      	mov	r0, r1
10059804:	9002      	str	r0, [sp, #8]
10059806:	1d82      	adds	r2, r0, #6
10059808:	2600      	movs	r6, #0
1005980a:	4630      	mov	r0, r6
1005980c:	4639      	mov	r1, r7
1005980e:	9201      	str	r2, [sp, #4]
10059810:	f7fb fa96 	bl	10054d40 <ACL_pkt_get>
10059814:	2800      	cmp	r0, #0
10059816:	d027      	beq.n	10059868 <L2C_build_command_reject_pdu+0xac>
10059818:	4607      	mov	r7, r0
1005981a:	6840      	ldr	r0, [r0, #4]
1005981c:	2101      	movs	r1, #1
1005981e:	7201      	strb	r1, [r0, #8]
10059820:	6878      	ldr	r0, [r7, #4]
10059822:	7245      	strb	r5, [r0, #9]
10059824:	9802      	ldr	r0, [sp, #8]
10059826:	1c80      	adds	r0, r0, #2
10059828:	b282      	uxth	r2, r0
1005982a:	2106      	movs	r1, #6
1005982c:	4638      	mov	r0, r7
1005982e:	f7fb fade 	bl	10054dee <ACL_pkt_write_16b>
10059832:	2108      	movs	r1, #8
10059834:	4638      	mov	r0, r7
10059836:	9d04      	ldr	r5, [sp, #16]
10059838:	462a      	mov	r2, r5
1005983a:	f7fb fad8 	bl	10054dee <ACL_pkt_write_16b>
1005983e:	2d00      	cmp	r5, #0
10059840:	d005      	beq.n	1005984e <L2C_build_command_reject_pdu+0x92>
10059842:	210a      	movs	r1, #10
10059844:	4638      	mov	r0, r7
10059846:	9a02      	ldr	r2, [sp, #8]
10059848:	9b03      	ldr	r3, [sp, #12]
1005984a:	f7fb fad9 	bl	10054e00 <ACL_pkt_write>
1005984e:	9801      	ldr	r0, [sp, #4]
10059850:	8078      	strh	r0, [r7, #2]
10059852:	2005      	movs	r0, #5
10059854:	4639      	mov	r1, r7
10059856:	f000 f8d7 	bl	10059a08 <L2C_send_frame>
1005985a:	2800      	cmp	r0, #0
1005985c:	d006      	beq.n	1005986c <L2C_build_command_reject_pdu+0xb0>
1005985e:	4638      	mov	r0, r7
10059860:	f7fb fa90 	bl	10054d84 <ACL_pkt_release>
10059864:	2681      	movs	r6, #129	@ 0x81
10059866:	e7c4      	b.n	100597f2 <L2C_build_command_reject_pdu+0x36>
10059868:	2688      	movs	r6, #136	@ 0x88
1005986a:	e7c2      	b.n	100597f2 <L2C_build_command_reject_pdu+0x36>
1005986c:	71a6      	strb	r6, [r4, #6]
1005986e:	78a0      	ldrb	r0, [r4, #2]
10059870:	21fb      	movs	r1, #251	@ 0xfb
10059872:	4001      	ands	r1, r0
10059874:	70a1      	strb	r1, [r4, #2]
10059876:	e7bc      	b.n	100597f2 <L2C_build_command_reject_pdu+0x36>

10059878 <l2c_cos_channel_descriptor_reset>:
10059878:	b570      	push	{r4, r5, r6, lr}
1005987a:	4604      	mov	r4, r0
1005987c:	2022      	movs	r0, #34	@ 0x22
1005987e:	4910      	ldr	r1, [pc, #64]	@ (100598c0 <__arm_cp.4_0>)
10059880:	5c08      	ldrb	r0, [r1, r0]
10059882:	42a0      	cmp	r0, r4
10059884:	d91b      	bls.n	100598be <l2c_cos_channel_descriptor_reset+0x46>
10059886:	4d0f      	ldr	r5, [pc, #60]	@ (100598c4 <__arm_cp.4_1>)
10059888:	6829      	ldr	r1, [r5, #0]
1005988a:	2030      	movs	r0, #48	@ 0x30
1005988c:	5c0a      	ldrb	r2, [r1, r0]
1005988e:	1c52      	adds	r2, r2, #1
10059890:	540a      	strb	r2, [r1, r0]
10059892:	2234      	movs	r2, #52	@ 0x34
10059894:	4354      	muls	r4, r2
10059896:	3130      	adds	r1, #48	@ 0x30
10059898:	6848      	ldr	r0, [r1, #4]
1005989a:	1900      	adds	r0, r0, r4
1005989c:	7883      	ldrb	r3, [r0, #2]
1005989e:	071b      	lsls	r3, r3, #28
100598a0:	d505      	bpl.n	100598ae <l2c_cos_channel_descriptor_reset+0x36>
100598a2:	78c3      	ldrb	r3, [r0, #3]
100598a4:	2b11      	cmp	r3, #17
100598a6:	d302      	bcc.n	100598ae <l2c_cos_channel_descriptor_reset+0x36>
100598a8:	784b      	ldrb	r3, [r1, #1]
100598aa:	1e5b      	subs	r3, r3, #1
100598ac:	704b      	strb	r3, [r1, #1]
100598ae:	8946      	ldrh	r6, [r0, #10]
100598b0:	2100      	movs	r1, #0
100598b2:	f7f8 fedf 	bl	10052674 <BLEPLAT_MemSet>
100598b6:	6828      	ldr	r0, [r5, #0]
100598b8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
100598ba:	1900      	adds	r0, r0, r4
100598bc:	8146      	strh	r6, [r0, #10]
100598be:	bd70      	pop	{r4, r5, r6, pc}

100598c0 <__arm_cp.4_0>:
100598c0:	20002484 	.word	0x20002484

100598c4 <__arm_cp.4_1>:
100598c4:	20002468 	.word	0x20002468

100598c8 <L2C_cos_channel_descriptors_reset_pending>:
100598c8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100598ca:	460c      	mov	r4, r1
100598cc:	4605      	mov	r5, r0
100598ce:	2022      	movs	r0, #34	@ 0x22
100598d0:	4912      	ldr	r1, [pc, #72]	@ (1005991c <__arm_cp.5_0>)
100598d2:	9002      	str	r0, [sp, #8]
100598d4:	5c08      	ldrb	r0, [r1, r0]
100598d6:	2700      	movs	r7, #0
100598d8:	2603      	movs	r6, #3
100598da:	4b11      	ldr	r3, [pc, #68]	@ (10059920 <__arm_cp.5_1>)
100598dc:	9501      	str	r5, [sp, #4]
100598de:	b2c1      	uxtb	r1, r0
100598e0:	428f      	cmp	r7, r1
100598e2:	d219      	bcs.n	10059918 <L2C_cos_channel_descriptors_reset_pending+0x50>
100598e4:	6819      	ldr	r1, [r3, #0]
100598e6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
100598e8:	198a      	adds	r2, r1, r6
100598ea:	1ed2      	subs	r2, r2, #3
100598ec:	8812      	ldrh	r2, [r2, #0]
100598ee:	42aa      	cmp	r2, r5
100598f0:	d10f      	bne.n	10059912 <L2C_cos_channel_descriptors_reset_pending+0x4a>
100598f2:	2cff      	cmp	r4, #255	@ 0xff
100598f4:	d002      	beq.n	100598fc <L2C_cos_channel_descriptors_reset_pending+0x34>
100598f6:	5d89      	ldrb	r1, [r1, r6]
100598f8:	42a1      	cmp	r1, r4
100598fa:	d10a      	bne.n	10059912 <L2C_cos_channel_descriptors_reset_pending+0x4a>
100598fc:	b2f8      	uxtb	r0, r7
100598fe:	4625      	mov	r5, r4
10059900:	461c      	mov	r4, r3
10059902:	f7ff ffb9 	bl	10059878 <l2c_cos_channel_descriptor_reset>
10059906:	4623      	mov	r3, r4
10059908:	462c      	mov	r4, r5
1005990a:	9d01      	ldr	r5, [sp, #4]
1005990c:	9802      	ldr	r0, [sp, #8]
1005990e:	4903      	ldr	r1, [pc, #12]	@ (1005991c <__arm_cp.5_0>)
10059910:	5c08      	ldrb	r0, [r1, r0]
10059912:	3634      	adds	r6, #52	@ 0x34
10059914:	1c7f      	adds	r7, r7, #1
10059916:	e7e2      	b.n	100598de <L2C_cos_channel_descriptors_reset_pending+0x16>
10059918:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005991a:	46c0      	nop			@ (mov r8, r8)

1005991c <__arm_cp.5_0>:
1005991c:	20002484 	.word	0x20002484

10059920 <__arm_cp.5_1>:
10059920:	20002468 	.word	0x20002468

10059924 <l2c_cos_csr_ucfg_weak>:
10059924:	2000      	movs	r0, #0
10059926:	4770      	bx	lr

10059928 <L2C_cos_cfc_init_ucfg_weak>:
10059928:	2000      	movs	r0, #0
1005992a:	4770      	bx	lr

1005992c <l2c_cos_process_pending_actions_tsk_ucfg_weak>:
1005992c:	4770      	bx	lr

1005992e <L2C_cos_physical_link_disconnection_hndl_ucfg_weak>:
1005992e:	4770      	bx	lr

10059930 <l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak>:
10059930:	2000      	movs	r0, #0
10059932:	4770      	bx	lr

10059934 <l2c_cos_sdu_segmentation_tsk_ucfg_weak>:
10059934:	4770      	bx	lr

10059936 <l2c_cos_transmit_pdu_packets_tsk_ucfg_weak>:
10059936:	4770      	bx	lr

10059938 <l2cap_timers_callback_wrapper>:
10059938:	b580      	push	{r7, lr}
1005993a:	6940      	ldr	r0, [r0, #20]
1005993c:	4901      	ldr	r1, [pc, #4]	@ (10059944 <__arm_cp.0_0>)
1005993e:	f009 f856 	bl	100629ee <cst_sharedCallback>
10059942:	bd80      	pop	{r7, pc}

10059944 <__arm_cp.0_0>:
10059944:	10059949 	.word	0x10059949

10059948 <l2cap_timers_callback>:
10059948:	b580      	push	{r7, lr}
1005994a:	4903      	ldr	r1, [pc, #12]	@ (10059958 <__arm_cp.1_0>)
1005994c:	7ac9      	ldrb	r1, [r1, #11]
1005994e:	4281      	cmp	r1, r0
10059950:	d301      	bcc.n	10059956 <l2cap_timers_callback+0xe>
10059952:	f000 fa77 	bl	10059e44 <L2C_timeout_handler_signalling>
10059956:	bd80      	pop	{r7, pc}

10059958 <__arm_cp.1_0>:
10059958:	20002484 	.word	0x20002484

1005995c <L2C_init>:
1005995c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005995e:	4605      	mov	r5, r0
10059960:	2001      	movs	r0, #1
10059962:	2168      	movs	r1, #104	@ 0x68
10059964:	f007 f936 	bl	10060bd4 <csmem_mem_0_assign>
10059968:	4f23      	ldr	r7, [pc, #140]	@ (100599f8 <__arm_cp.3_0>)
1005996a:	6038      	str	r0, [r7, #0]
1005996c:	4e23      	ldr	r6, [pc, #140]	@ (100599fc <__arm_cp.3_1>)
1005996e:	7af0      	ldrb	r0, [r6, #11]
10059970:	2414      	movs	r4, #20
10059972:	4621      	mov	r1, r4
10059974:	f007 f92e 	bl	10060bd4 <csmem_mem_0_assign>
10059978:	4601      	mov	r1, r0
1005997a:	6838      	ldr	r0, [r7, #0]
1005997c:	62c1      	str	r1, [r0, #44]	@ 0x2c
1005997e:	2d01      	cmp	r5, #1
10059980:	d110      	bne.n	100599a4 <L2C_init+0x48>
10059982:	305c      	adds	r0, #92	@ 0x5c
10059984:	f009 f8ee 	bl	10062b64 <ACL_list_init>
10059988:	2522      	movs	r5, #34	@ 0x22
1005998a:	5d70      	ldrb	r0, [r6, r5]
1005998c:	2134      	movs	r1, #52	@ 0x34
1005998e:	f007 f921 	bl	10060bd4 <csmem_mem_0_assign>
10059992:	6839      	ldr	r1, [r7, #0]
10059994:	6348      	str	r0, [r1, #52]	@ 0x34
10059996:	5d70      	ldrb	r0, [r6, r5]
10059998:	0040      	lsls	r0, r0, #1
1005999a:	2110      	movs	r1, #16
1005999c:	f007 f91a 	bl	10060bd4 <csmem_mem_0_assign>
100599a0:	6839      	ldr	r1, [r7, #0]
100599a2:	6488      	str	r0, [r1, #72]	@ 0x48
100599a4:	7af0      	ldrb	r0, [r6, #11]
100599a6:	1c41      	adds	r1, r0, #1
100599a8:	4d15      	ldr	r5, [pc, #84]	@ (10059a00 <__arm_cp.3_2>)
100599aa:	2201      	movs	r2, #1
100599ac:	4628      	mov	r0, r5
100599ae:	f007 f8ff 	bl	10060bb0 <csmem_mem_assign>
100599b2:	6839      	ldr	r1, [r7, #0]
100599b4:	6208      	str	r0, [r1, #32]
100599b6:	7af1      	ldrb	r1, [r6, #11]
100599b8:	2202      	movs	r2, #2
100599ba:	4628      	mov	r0, r5
100599bc:	f007 f8f8 	bl	10060bb0 <csmem_mem_assign>
100599c0:	683d      	ldr	r5, [r7, #0]
100599c2:	6268      	str	r0, [r5, #36]	@ 0x24
100599c4:	7af1      	ldrb	r1, [r6, #11]
100599c6:	4a0f      	ldr	r2, [pc, #60]	@ (10059a04 <__arm_cp.3_3>)
100599c8:	2307      	movs	r3, #7
100599ca:	4628      	mov	r0, r5
100599cc:	f008 ff36 	bl	1006283c <CST_init>
100599d0:	6838      	ldr	r0, [r7, #0]
100599d2:	2117      	movs	r1, #23
100599d4:	8501      	strh	r1, [r0, #40]	@ 0x28
100599d6:	8c31      	ldrh	r1, [r6, #32]
100599d8:	2917      	cmp	r1, #23
100599da:	d201      	bcs.n	100599e0 <L2C_init+0x84>
100599dc:	2086      	movs	r0, #134	@ 0x86
100599de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100599e0:	8541      	strh	r1, [r0, #42]	@ 0x2a
100599e2:	7af1      	ldrb	r1, [r6, #11]
100599e4:	434c      	muls	r4, r1
100599e6:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
100599e8:	2100      	movs	r1, #0
100599ea:	4622      	mov	r2, r4
100599ec:	f7f8 fe42 	bl	10052674 <BLEPLAT_MemSet>
100599f0:	f7ff ff9a 	bl	10059928 <L2C_cos_cfc_init_ucfg_weak>
100599f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100599f6:	46c0      	nop			@ (mov r8, r8)

100599f8 <__arm_cp.3_0>:
100599f8:	20002468 	.word	0x20002468

100599fc <__arm_cp.3_1>:
100599fc:	20002484 	.word	0x20002484

10059a00 <__arm_cp.3_2>:
10059a00:	20002480 	.word	0x20002480

10059a04 <__arm_cp.3_3>:
10059a04:	10059939 	.word	0x10059939

10059a08 <L2C_send_frame>:
10059a08:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10059a0a:	460c      	mov	r4, r1
10059a0c:	1f01      	subs	r1, r0, #4
10059a0e:	4606      	mov	r6, r0
10059a10:	2902      	cmp	r1, #2
10059a12:	d821      	bhi.n	10059a58 <L2C_send_frame+0x50>
10059a14:	8862      	ldrh	r2, [r4, #2]
10059a16:	2500      	movs	r5, #0
10059a18:	4620      	mov	r0, r4
10059a1a:	4629      	mov	r1, r5
10059a1c:	f7fb f9e7 	bl	10054dee <ACL_pkt_write_16b>
10059a20:	2702      	movs	r7, #2
10059a22:	4620      	mov	r0, r4
10059a24:	4639      	mov	r1, r7
10059a26:	4632      	mov	r2, r6
10059a28:	f7fb f9e1 	bl	10054dee <ACL_pkt_write_16b>
10059a2c:	8225      	strh	r5, [r4, #16]
10059a2e:	81e5      	strh	r5, [r4, #14]
10059a30:	7325      	strb	r5, [r4, #12]
10059a32:	6860      	ldr	r0, [r4, #4]
10059a34:	6160      	str	r0, [r4, #20]
10059a36:	61a0      	str	r0, [r4, #24]
10059a38:	8860      	ldrh	r0, [r4, #2]
10059a3a:	1d00      	adds	r0, r0, #4
10059a3c:	8060      	strh	r0, [r4, #2]
10059a3e:	7a20      	ldrb	r0, [r4, #8]
10059a40:	4338      	orrs	r0, r7
10059a42:	7220      	strb	r0, [r4, #8]
10059a44:	4620      	mov	r0, r4
10059a46:	f7fb f909 	bl	10054c5c <Acl_Transmit_Data>
10059a4a:	2800      	cmp	r0, #0
10059a4c:	d014      	beq.n	10059a78 <L2C_send_frame+0x70>
10059a4e:	8860      	ldrh	r0, [r4, #2]
10059a50:	1f00      	subs	r0, r0, #4
10059a52:	8060      	strh	r0, [r4, #2]
10059a54:	2581      	movs	r5, #129	@ 0x81
10059a56:	e00f      	b.n	10059a78 <L2C_send_frame+0x70>
10059a58:	25a0      	movs	r5, #160	@ 0xa0
10059a5a:	283f      	cmp	r0, #63	@ 0x3f
10059a5c:	d00c      	beq.n	10059a78 <L2C_send_frame+0x70>
10059a5e:	3820      	subs	r0, #32
10059a60:	285f      	cmp	r0, #95	@ 0x5f
10059a62:	d809      	bhi.n	10059a78 <L2C_send_frame+0x70>
10059a64:	a801      	add	r0, sp, #4
10059a66:	8086      	strh	r6, [r0, #4]
10059a68:	2122      	movs	r1, #34	@ 0x22
10059a6a:	4a04      	ldr	r2, [pc, #16]	@ (10059a7c <__arm_cp.4_0>)
10059a6c:	5c51      	ldrb	r1, [r2, r1]
10059a6e:	7181      	strb	r1, [r0, #6]
10059a70:	9401      	str	r4, [sp, #4]
10059a72:	f7ff ff5d 	bl	10059930 <l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak>
10059a76:	4605      	mov	r5, r0
10059a78:	4628      	mov	r0, r5
10059a7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10059a7c <__arm_cp.4_0>:
10059a7c:	20002484 	.word	0x20002484

10059a80 <L2C_receive_data>:
10059a80:	b5f0      	push	{r4, r5, r6, r7, lr}
10059a82:	b0c3      	sub	sp, #268	@ 0x10c
10059a84:	4604      	mov	r4, r0
10059a86:	8800      	ldrh	r0, [r0, #0]
10059a88:	f7ff fe06 	bl	10059698 <l2c_get_link_control_block_ref>
10059a8c:	2800      	cmp	r0, #0
10059a8e:	d07c      	beq.n	10059b8a <L2C_receive_data+0x10a>
10059a90:	4605      	mov	r5, r0
10059a92:	7a20      	ldrb	r0, [r4, #8]
10059a94:	2703      	movs	r7, #3
10059a96:	4007      	ands	r7, r0
10059a98:	6928      	ldr	r0, [r5, #16]
10059a9a:	462a      	mov	r2, r5
10059a9c:	320c      	adds	r2, #12
10059a9e:	2f02      	cmp	r7, #2
10059aa0:	9203      	str	r2, [sp, #12]
10059aa2:	d108      	bne.n	10059ab6 <L2C_receive_data+0x36>
10059aa4:	2800      	cmp	r0, #0
10059aa6:	d02f      	beq.n	10059b08 <L2C_receive_data+0x88>
10059aa8:	8811      	ldrh	r1, [r2, #0]
10059aaa:	2684      	movs	r6, #132	@ 0x84
10059aac:	2904      	cmp	r1, #4
10059aae:	d354      	bcc.n	10059b5a <L2C_receive_data+0xda>
10059ab0:	2101      	movs	r1, #1
10059ab2:	9102      	str	r1, [sp, #8]
10059ab4:	e031      	b.n	10059b1a <L2C_receive_data+0x9a>
10059ab6:	2800      	cmp	r0, #0
10059ab8:	d04a      	beq.n	10059b50 <L2C_receive_data+0xd0>
10059aba:	8866      	ldrh	r6, [r4, #2]
10059abc:	2e00      	cmp	r6, #0
10059abe:	d026      	beq.n	10059b0e <L2C_receive_data+0x8e>
10059ac0:	2100      	movs	r1, #0
10059ac2:	9101      	str	r1, [sp, #4]
10059ac4:	a804      	add	r0, sp, #16
10059ac6:	9002      	str	r0, [sp, #8]
10059ac8:	4620      	mov	r0, r4
10059aca:	4632      	mov	r2, r6
10059acc:	9b02      	ldr	r3, [sp, #8]
10059ace:	f7fb f975 	bl	10054dbc <ACL_pkt_read>
10059ad2:	6928      	ldr	r0, [r5, #16]
10059ad4:	6840      	ldr	r0, [r0, #4]
10059ad6:	9000      	str	r0, [sp, #0]
10059ad8:	4620      	mov	r0, r4
10059ada:	f7fb f99a 	bl	10054e12 <ACL_pkt_extract_pdu>
10059ade:	4601      	mov	r1, r0
10059ae0:	9800      	ldr	r0, [sp, #0]
10059ae2:	f007 fa0a 	bl	10060efa <Mem_Buff_append>
10059ae6:	89a9      	ldrh	r1, [r5, #12]
10059ae8:	6928      	ldr	r0, [r5, #16]
10059aea:	4632      	mov	r2, r6
10059aec:	9b02      	ldr	r3, [sp, #8]
10059aee:	f7fb f987 	bl	10054e00 <ACL_pkt_write>
10059af2:	89a8      	ldrh	r0, [r5, #12]
10059af4:	1980      	adds	r0, r0, r6
10059af6:	81a8      	strh	r0, [r5, #12]
10059af8:	b281      	uxth	r1, r0
10059afa:	6928      	ldr	r0, [r5, #16]
10059afc:	f7fb f94b 	bl	10054d96 <ACL_pkt_resize>
10059b00:	9a03      	ldr	r2, [sp, #12]
10059b02:	9801      	ldr	r0, [sp, #4]
10059b04:	8060      	strh	r0, [r4, #2]
10059b06:	e002      	b.n	10059b0e <L2C_receive_data+0x8e>
10059b08:	612c      	str	r4, [r5, #16]
10059b0a:	8860      	ldrh	r0, [r4, #2]
10059b0c:	81a8      	strh	r0, [r5, #12]
10059b0e:	8810      	ldrh	r0, [r2, #0]
10059b10:	2804      	cmp	r0, #4
10059b12:	d31b      	bcc.n	10059b4c <L2C_receive_data+0xcc>
10059b14:	6928      	ldr	r0, [r5, #16]
10059b16:	2600      	movs	r6, #0
10059b18:	9602      	str	r6, [sp, #8]
10059b1a:	2100      	movs	r1, #0
10059b1c:	9101      	str	r1, [sp, #4]
10059b1e:	f7fb f956 	bl	10054dce <ACL_pkt_read_16b>
10059b22:	1d00      	adds	r0, r0, #4
10059b24:	b281      	uxth	r1, r0
10059b26:	89aa      	ldrh	r2, [r5, #12]
10059b28:	428a      	cmp	r2, r1
10059b2a:	d816      	bhi.n	10059b5a <L2C_receive_data+0xda>
10059b2c:	d112      	bne.n	10059b54 <L2C_receive_data+0xd4>
10059b2e:	6929      	ldr	r1, [r5, #16]
10059b30:	8048      	strh	r0, [r1, #2]
10059b32:	2001      	movs	r0, #1
10059b34:	f000 f832 	bl	10059b9c <L2C_mux_acl_packet>
10059b38:	2800      	cmp	r0, #0
10059b3a:	d02d      	beq.n	10059b98 <L2C_receive_data+0x118>
10059b3c:	6928      	ldr	r0, [r5, #16]
10059b3e:	2684      	movs	r6, #132	@ 0x84
10059b40:	42a0      	cmp	r0, r4
10059b42:	d126      	bne.n	10059b92 <L2C_receive_data+0x112>
10059b44:	9801      	ldr	r0, [sp, #4]
10059b46:	81a8      	strh	r0, [r5, #12]
10059b48:	6128      	str	r0, [r5, #16]
10059b4a:	e022      	b.n	10059b92 <L2C_receive_data+0x112>
10059b4c:	2600      	movs	r6, #0
10059b4e:	e018      	b.n	10059b82 <L2C_receive_data+0x102>
10059b50:	2600      	movs	r6, #0
10059b52:	e002      	b.n	10059b5a <L2C_receive_data+0xda>
10059b54:	9802      	ldr	r0, [sp, #8]
10059b56:	2800      	cmp	r0, #0
10059b58:	d013      	beq.n	10059b82 <L2C_receive_data+0x102>
10059b5a:	78a8      	ldrb	r0, [r5, #2]
10059b5c:	2110      	movs	r1, #16
10059b5e:	4301      	orrs	r1, r0
10059b60:	70a9      	strb	r1, [r5, #2]
10059b62:	2042      	movs	r0, #66	@ 0x42
10059b64:	2101      	movs	r1, #1
10059b66:	2202      	movs	r2, #2
10059b68:	462b      	mov	r3, r5
10059b6a:	f00a f9ff 	bl	10063f6c <aci_hal_fw_error_event_push_noinline>
10059b6e:	6928      	ldr	r0, [r5, #16]
10059b70:	2800      	cmp	r0, #0
10059b72:	d006      	beq.n	10059b82 <L2C_receive_data+0x102>
10059b74:	f7fb f906 	bl	10054d84 <ACL_pkt_release>
10059b78:	2000      	movs	r0, #0
10059b7a:	6128      	str	r0, [r5, #16]
10059b7c:	9903      	ldr	r1, [sp, #12]
10059b7e:	2000      	movs	r0, #0
10059b80:	8008      	strh	r0, [r1, #0]
10059b82:	2e00      	cmp	r6, #0
10059b84:	d105      	bne.n	10059b92 <L2C_receive_data+0x112>
10059b86:	2f01      	cmp	r7, #1
10059b88:	d103      	bne.n	10059b92 <L2C_receive_data+0x112>
10059b8a:	4620      	mov	r0, r4
10059b8c:	f7fb f8fa 	bl	10054d84 <ACL_pkt_release>
10059b90:	2600      	movs	r6, #0
10059b92:	4630      	mov	r0, r6
10059b94:	b043      	add	sp, #268	@ 0x10c
10059b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
10059b98:	9801      	ldr	r0, [sp, #4]
10059b9a:	e7ee      	b.n	10059b7a <L2C_receive_data+0xfa>

10059b9c <L2C_mux_acl_packet>:
10059b9c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10059b9e:	460c      	mov	r4, r1
10059ba0:	4605      	mov	r5, r0
10059ba2:	8848      	ldrh	r0, [r1, #2]
10059ba4:	1f00      	subs	r0, r0, #4
10059ba6:	8048      	strh	r0, [r1, #2]
10059ba8:	4608      	mov	r0, r1
10059baa:	f7ff fe02 	bl	100597b2 <L2C_get_cid_from_basic_packet_header>
10059bae:	1f01      	subs	r1, r0, #4
10059bb0:	2902      	cmp	r1, #2
10059bb2:	d80c      	bhi.n	10059bce <L2C_mux_acl_packet+0x32>
10059bb4:	2806      	cmp	r0, #6
10059bb6:	d01a      	beq.n	10059bee <L2C_mux_acl_packet+0x52>
10059bb8:	2805      	cmp	r0, #5
10059bba:	d01d      	beq.n	10059bf8 <L2C_mux_acl_packet+0x5c>
10059bbc:	2804      	cmp	r0, #4
10059bbe:	d111      	bne.n	10059be4 <L2C_mux_acl_packet+0x48>
10059bc0:	2004      	movs	r0, #4
10059bc2:	81a0      	strh	r0, [r4, #12]
10059bc4:	4628      	mov	r0, r5
10059bc6:	4621      	mov	r1, r4
10059bc8:	f7fc ff2c 	bl	10056a24 <GAT_att_cmn_rcv>
10059bcc:	e018      	b.n	10059c00 <L2C_mux_acl_packet+0x64>
10059bce:	283f      	cmp	r0, #63	@ 0x3f
10059bd0:	d008      	beq.n	10059be4 <L2C_mux_acl_packet+0x48>
10059bd2:	3820      	subs	r0, #32
10059bd4:	285f      	cmp	r0, #95	@ 0x5f
10059bd6:	d805      	bhi.n	10059be4 <L2C_mux_acl_packet+0x48>
10059bd8:	4668      	mov	r0, sp
10059bda:	7005      	strb	r5, [r0, #0]
10059bdc:	9401      	str	r4, [sp, #4]
10059bde:	f00b fb8b 	bl	100652f8 <l2c_cos_hndl_incoming_le_frame_ucfg_weak>
10059be2:	e00d      	b.n	10059c00 <L2C_mux_acl_packet+0x64>
10059be4:	4628      	mov	r0, r5
10059be6:	4621      	mov	r1, r4
10059be8:	f7ff fdde 	bl	100597a8 <l2c_release_unexpected_acl_packet>
10059bec:	e00e      	b.n	10059c0c <L2C_mux_acl_packet+0x70>
10059bee:	4628      	mov	r0, r5
10059bf0:	4621      	mov	r1, r4
10059bf2:	f008 fb8d 	bl	10062310 <smp_sap_l2c_acl_data_hndl>
10059bf6:	e003      	b.n	10059c00 <L2C_mux_acl_packet+0x64>
10059bf8:	4628      	mov	r0, r5
10059bfa:	4621      	mov	r1, r4
10059bfc:	f000 f808 	bl	10059c10 <L2C_acl_cframe_signaling_hndl>
10059c00:	2800      	cmp	r0, #0
10059c02:	d003      	beq.n	10059c0c <L2C_mux_acl_packet+0x70>
10059c04:	8861      	ldrh	r1, [r4, #2]
10059c06:	1d09      	adds	r1, r1, #4
10059c08:	8061      	strh	r1, [r4, #2]
10059c0a:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10059c0c:	2000      	movs	r0, #0
10059c0e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10059c10 <L2C_acl_cframe_signaling_hndl>:
10059c10:	b5f0      	push	{r4, r5, r6, r7, lr}
10059c12:	b085      	sub	sp, #20
10059c14:	460c      	mov	r4, r1
10059c16:	4606      	mov	r6, r0
10059c18:	880f      	ldrh	r7, [r1, #0]
10059c1a:	4638      	mov	r0, r7
10059c1c:	f7ff fd58 	bl	100596d0 <l2c_get_link_control_block_index>
10059c20:	4605      	mov	r5, r0
10059c22:	4880      	ldr	r0, [pc, #512]	@ (10059e24 <__arm_cp.7_0>)
10059c24:	7ac1      	ldrb	r1, [r0, #11]
10059c26:	428d      	cmp	r5, r1
10059c28:	d206      	bcs.n	10059c38 <L2C_acl_cframe_signaling_hndl+0x28>
10059c2a:	2014      	movs	r0, #20
10059c2c:	4368      	muls	r0, r5
10059c2e:	4a7e      	ldr	r2, [pc, #504]	@ (10059e28 <__arm_cp.7_1>)
10059c30:	6812      	ldr	r2, [r2, #0]
10059c32:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
10059c34:	1810      	adds	r0, r2, r0
10059c36:	9002      	str	r0, [sp, #8]
10059c38:	6862      	ldr	r2, [r4, #4]
10059c3a:	7a10      	ldrb	r0, [r2, #8]
10059c3c:	2300      	movs	r3, #0
10059c3e:	2e01      	cmp	r6, #1
10059c40:	d01c      	beq.n	10059c7c <L2C_acl_cframe_signaling_hndl+0x6c>
10059c42:	2e00      	cmp	r6, #0
10059c44:	d13c      	bne.n	10059cc0 <L2C_acl_cframe_signaling_hndl+0xb0>
10059c46:	461e      	mov	r6, r3
10059c48:	428d      	cmp	r5, r1
10059c4a:	d212      	bcs.n	10059c72 <L2C_acl_cframe_signaling_hndl+0x62>
10059c4c:	2819      	cmp	r0, #25
10059c4e:	d80b      	bhi.n	10059c68 <L2C_acl_cframe_signaling_hndl+0x58>
10059c50:	2101      	movs	r1, #1
10059c52:	4081      	lsls	r1, r0
10059c54:	4879      	ldr	r0, [pc, #484]	@ (10059e3c <__arm_cp.7_6>)
10059c56:	4201      	tst	r1, r0
10059c58:	d006      	beq.n	10059c68 <L2C_acl_cframe_signaling_hndl+0x58>
10059c5a:	4873      	ldr	r0, [pc, #460]	@ (10059e28 <__arm_cp.7_1>)
10059c5c:	6800      	ldr	r0, [r0, #0]
10059c5e:	2201      	movs	r2, #1
10059c60:	4b77      	ldr	r3, [pc, #476]	@ (10059e40 <__arm_cp.7_7>)
10059c62:	4629      	mov	r1, r5
10059c64:	f008 fe35 	bl	100628d2 <CST_start>
10059c68:	9a02      	ldr	r2, [sp, #8]
10059c6a:	7890      	ldrb	r0, [r2, #2]
10059c6c:	21fd      	movs	r1, #253	@ 0xfd
10059c6e:	4001      	ands	r1, r0
10059c70:	7091      	strb	r1, [r2, #2]
10059c72:	4620      	mov	r0, r4
10059c74:	f7fb f886 	bl	10054d84 <ACL_pkt_release>
10059c78:	4630      	mov	r0, r6
10059c7a:	e0d0      	b.n	10059e1e <L2C_acl_cframe_signaling_hndl+0x20e>
10059c7c:	428d      	cmp	r5, r1
10059c7e:	d300      	bcc.n	10059c82 <L2C_acl_cframe_signaling_hndl+0x72>
10059c80:	e0c8      	b.n	10059e14 <L2C_acl_cframe_signaling_hndl+0x204>
10059c82:	7a56      	ldrb	r6, [r2, #9]
10059c84:	2813      	cmp	r0, #19
10059c86:	d81d      	bhi.n	10059cc4 <L2C_acl_cframe_signaling_hndl+0xb4>
10059c88:	2101      	movs	r1, #1
10059c8a:	9100      	str	r1, [sp, #0]
10059c8c:	4081      	lsls	r1, r0
10059c8e:	4a67      	ldr	r2, [pc, #412]	@ (10059e2c <__arm_cp.7_2>)
10059c90:	4211      	tst	r1, r2
10059c92:	d017      	beq.n	10059cc4 <L2C_acl_cframe_signaling_hndl+0xb4>
10059c94:	2801      	cmp	r0, #1
10059c96:	d021      	beq.n	10059cdc <L2C_acl_cframe_signaling_hndl+0xcc>
10059c98:	2114      	movs	r1, #20
10059c9a:	4a63      	ldr	r2, [pc, #396]	@ (10059e28 <__arm_cp.7_1>)
10059c9c:	6812      	ldr	r2, [r2, #0]
10059c9e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
10059ca0:	2813      	cmp	r0, #19
10059ca2:	d03e      	beq.n	10059d22 <L2C_acl_cframe_signaling_hndl+0x112>
10059ca4:	2812      	cmp	r0, #18
10059ca6:	d000      	beq.n	10059caa <L2C_acl_cframe_signaling_hndl+0x9a>
10059ca8:	e0b4      	b.n	10059e14 <L2C_acl_cframe_signaling_hndl+0x204>
10059caa:	9301      	str	r3, [sp, #4]
10059cac:	4608      	mov	r0, r1
10059cae:	4368      	muls	r0, r5
10059cb0:	1810      	adds	r0, r2, r0
10059cb2:	7883      	ldrb	r3, [r0, #2]
10059cb4:	07df      	lsls	r7, r3, #31
10059cb6:	d166      	bne.n	10059d86 <L2C_acl_cframe_signaling_hndl+0x176>
10059cb8:	7146      	strb	r6, [r0, #5]
10059cba:	8820      	ldrh	r0, [r4, #0]
10059cbc:	2200      	movs	r2, #0
10059cbe:	e09d      	b.n	10059dfc <L2C_acl_cframe_signaling_hndl+0x1ec>
10059cc0:	4618      	mov	r0, r3
10059cc2:	e0ac      	b.n	10059e1e <L2C_acl_cframe_signaling_hndl+0x20e>
10059cc4:	9301      	str	r3, [sp, #4]
10059cc6:	f00b fb15 	bl	100652f4 <L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak>
10059cca:	2800      	cmp	r0, #0
10059ccc:	d100      	bne.n	10059cd0 <L2C_acl_cframe_signaling_hndl+0xc0>
10059cce:	e091      	b.n	10059df4 <L2C_acl_cframe_signaling_hndl+0x1e4>
10059cd0:	a803      	add	r0, sp, #12
10059cd2:	7105      	strb	r5, [r0, #4]
10059cd4:	9403      	str	r4, [sp, #12]
10059cd6:	f00b fb0b 	bl	100652f0 <L2C_cos_process_cfc_mode_command_ucfg_weak>
10059cda:	e093      	b.n	10059e04 <L2C_acl_cframe_signaling_hndl+0x1f4>
10059cdc:	2701      	movs	r7, #1
10059cde:	4628      	mov	r0, r5
10059ce0:	4639      	mov	r1, r7
10059ce2:	4632      	mov	r2, r6
10059ce4:	9301      	str	r3, [sp, #4]
10059ce6:	f7ff fd2f 	bl	10059748 <l2c_pre_process_incoming_response_packet>
10059cea:	9b01      	ldr	r3, [sp, #4]
10059cec:	2800      	cmp	r0, #0
10059cee:	d000      	beq.n	10059cf2 <L2C_acl_cframe_signaling_hndl+0xe2>
10059cf0:	e090      	b.n	10059e14 <L2C_acl_cframe_signaling_hndl+0x204>
10059cf2:	8826      	ldrh	r6, [r4, #0]
10059cf4:	484e      	ldr	r0, [pc, #312]	@ (10059e30 <__arm_cp.7_3>)
10059cf6:	6800      	ldr	r0, [r0, #0]
10059cf8:	6980      	ldr	r0, [r0, #24]
10059cfa:	2142      	movs	r1, #66	@ 0x42
10059cfc:	2252      	movs	r2, #82	@ 0x52
10059cfe:	2303      	movs	r3, #3
10059d00:	f7fb f9f4 	bl	100550ec <aci_event_fifo_push_header>
10059d04:	9b01      	ldr	r3, [sp, #4]
10059d06:	2800      	cmp	r0, #0
10059d08:	d100      	bne.n	10059d0c <L2C_acl_cframe_signaling_hndl+0xfc>
10059d0a:	e083      	b.n	10059e14 <L2C_acl_cframe_signaling_hndl+0x204>
10059d0c:	4605      	mov	r5, r0
10059d0e:	4631      	mov	r1, r6
10059d10:	1d06      	adds	r6, r0, #4
10059d12:	4630      	mov	r0, r6
10059d14:	4622      	mov	r2, r4
10059d16:	f7fb fd79 	bl	1005580c <aci_l2cap_command_reject_event_copy>
10059d1a:	02f8      	lsls	r0, r7, #11
10059d1c:	300a      	adds	r0, #10
10059d1e:	2108      	movs	r1, #8
10059d20:	e058      	b.n	10059dd4 <L2C_acl_cframe_signaling_hndl+0x1c4>
10059d22:	4369      	muls	r1, r5
10059d24:	1850      	adds	r0, r2, r1
10059d26:	7880      	ldrb	r0, [r0, #2]
10059d28:	07c0      	lsls	r0, r0, #31
10059d2a:	d173      	bne.n	10059e14 <L2C_acl_cframe_signaling_hndl+0x204>
10059d2c:	2113      	movs	r1, #19
10059d2e:	4628      	mov	r0, r5
10059d30:	4632      	mov	r2, r6
10059d32:	9301      	str	r3, [sp, #4]
10059d34:	f7ff fd08 	bl	10059748 <l2c_pre_process_incoming_response_packet>
10059d38:	9b01      	ldr	r3, [sp, #4]
10059d3a:	2800      	cmp	r0, #0
10059d3c:	d16a      	bne.n	10059e14 <L2C_acl_cframe_signaling_hndl+0x204>
10059d3e:	2108      	movs	r1, #8
10059d40:	4620      	mov	r0, r4
10059d42:	f7fb f844 	bl	10054dce <ACL_pkt_read_16b>
10059d46:	9b01      	ldr	r3, [sp, #4]
10059d48:	4606      	mov	r6, r0
10059d4a:	483a      	ldr	r0, [pc, #232]	@ (10059e34 <__arm_cp.7_4>)
10059d4c:	6800      	ldr	r0, [r0, #0]
10059d4e:	214f      	movs	r1, #79	@ 0x4f
10059d50:	5c40      	ldrb	r0, [r0, r1]
10059d52:	0780      	lsls	r0, r0, #30
10059d54:	d55e      	bpl.n	10059e14 <L2C_acl_cframe_signaling_hndl+0x204>
10059d56:	8827      	ldrh	r7, [r4, #0]
10059d58:	4835      	ldr	r0, [pc, #212]	@ (10059e30 <__arm_cp.7_3>)
10059d5a:	6800      	ldr	r0, [r0, #0]
10059d5c:	6980      	ldr	r0, [r0, #24]
10059d5e:	2142      	movs	r1, #66	@ 0x42
10059d60:	224c      	movs	r2, #76	@ 0x4c
10059d62:	2303      	movs	r3, #3
10059d64:	f7fb f9c2 	bl	100550ec <aci_event_fifo_push_header>
10059d68:	9b01      	ldr	r3, [sp, #4]
10059d6a:	2800      	cmp	r0, #0
10059d6c:	d052      	beq.n	10059e14 <L2C_acl_cframe_signaling_hndl+0x204>
10059d6e:	4605      	mov	r5, r0
10059d70:	7306      	strb	r6, [r0, #12]
10059d72:	7287      	strb	r7, [r0, #10]
10059d74:	0a30      	lsrs	r0, r6, #8
10059d76:	7368      	strb	r0, [r5, #13]
10059d78:	0a38      	lsrs	r0, r7, #8
10059d7a:	72e8      	strb	r0, [r5, #11]
10059d7c:	1d2e      	adds	r6, r5, #4
10059d7e:	9800      	ldr	r0, [sp, #0]
10059d80:	02c0      	lsls	r0, r0, #11
10059d82:	2106      	movs	r1, #6
10059d84:	e026      	b.n	10059dd4 <L2C_acl_cframe_signaling_hndl+0x1c4>
10059d86:	0758      	lsls	r0, r3, #29
10059d88:	9b01      	ldr	r3, [sp, #4]
10059d8a:	d443      	bmi.n	10059e14 <L2C_acl_cframe_signaling_hndl+0x204>
10059d8c:	4369      	muls	r1, r5
10059d8e:	1852      	adds	r2, r2, r1
10059d90:	2012      	movs	r0, #18
10059d92:	4631      	mov	r1, r6
10059d94:	f7ff fcd1 	bl	1005973a <l2c_post_process_incoming_request_packet>
10059d98:	9b01      	ldr	r3, [sp, #4]
10059d9a:	4826      	ldr	r0, [pc, #152]	@ (10059e34 <__arm_cp.7_4>)
10059d9c:	6800      	ldr	r0, [r0, #0]
10059d9e:	214f      	movs	r1, #79	@ 0x4f
10059da0:	5c40      	ldrb	r0, [r0, r1]
10059da2:	07c0      	lsls	r0, r0, #31
10059da4:	d036      	beq.n	10059e14 <L2C_acl_cframe_signaling_hndl+0x204>
10059da6:	8827      	ldrh	r7, [r4, #0]
10059da8:	4821      	ldr	r0, [pc, #132]	@ (10059e30 <__arm_cp.7_3>)
10059daa:	6800      	ldr	r0, [r0, #0]
10059dac:	6980      	ldr	r0, [r0, #24]
10059dae:	2142      	movs	r1, #66	@ 0x42
10059db0:	224d      	movs	r2, #77	@ 0x4d
10059db2:	2305      	movs	r3, #5
10059db4:	f7fb f99a 	bl	100550ec <aci_event_fifo_push_header>
10059db8:	9b01      	ldr	r3, [sp, #4]
10059dba:	2800      	cmp	r0, #0
10059dbc:	d02a      	beq.n	10059e14 <L2C_acl_cframe_signaling_hndl+0x204>
10059dbe:	4605      	mov	r5, r0
10059dc0:	1d06      	adds	r6, r0, #4
10059dc2:	4630      	mov	r0, r6
10059dc4:	4639      	mov	r1, r7
10059dc6:	4622      	mov	r2, r4
10059dc8:	f7fb fcd8 	bl	1005577c <aci_l2cap_connection_update_req_event_copy>
10059dcc:	9800      	ldr	r0, [sp, #0]
10059dce:	02c0      	lsls	r0, r0, #11
10059dd0:	1c80      	adds	r0, r0, #2
10059dd2:	210f      	movs	r1, #15
10059dd4:	22ff      	movs	r2, #255	@ 0xff
10059dd6:	7072      	strb	r2, [r6, #1]
10059dd8:	2282      	movs	r2, #130	@ 0x82
10059dda:	7032      	strb	r2, [r6, #0]
10059ddc:	0a02      	lsrs	r2, r0, #8
10059dde:	726a      	strb	r2, [r5, #9]
10059de0:	7228      	strb	r0, [r5, #8]
10059de2:	2000      	movs	r0, #0
10059de4:	71e8      	strb	r0, [r5, #7]
10059de6:	71a9      	strb	r1, [r5, #6]
10059de8:	2042      	movs	r0, #66	@ 0x42
10059dea:	4629      	mov	r1, r5
10059dec:	f7fb fa1b 	bl	10055226 <aci_event_fifo_push>
10059df0:	9b01      	ldr	r3, [sp, #4]
10059df2:	e00f      	b.n	10059e14 <L2C_acl_cframe_signaling_hndl+0x204>
10059df4:	9802      	ldr	r0, [sp, #8]
10059df6:	7146      	strb	r6, [r0, #5]
10059df8:	2200      	movs	r2, #0
10059dfa:	4638      	mov	r0, r7
10059dfc:	4631      	mov	r1, r6
10059dfe:	4613      	mov	r3, r2
10059e00:	f7ff fcdc 	bl	100597bc <L2C_build_command_reject_pdu>
10059e04:	9b01      	ldr	r3, [sp, #4]
10059e06:	2812      	cmp	r0, #18
10059e08:	d809      	bhi.n	10059e1e <L2C_acl_cframe_signaling_hndl+0x20e>
10059e0a:	2101      	movs	r1, #1
10059e0c:	4081      	lsls	r1, r0
10059e0e:	4a0a      	ldr	r2, [pc, #40]	@ (10059e38 <__arm_cp.7_5>)
10059e10:	4211      	tst	r1, r2
10059e12:	d004      	beq.n	10059e1e <L2C_acl_cframe_signaling_hndl+0x20e>
10059e14:	4620      	mov	r0, r4
10059e16:	461c      	mov	r4, r3
10059e18:	f7fa ffb4 	bl	10054d84 <ACL_pkt_release>
10059e1c:	4620      	mov	r0, r4
10059e1e:	b005      	add	sp, #20
10059e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
10059e22:	46c0      	nop			@ (mov r8, r8)

10059e24 <__arm_cp.7_0>:
10059e24:	20002484 	.word	0x20002484

10059e28 <__arm_cp.7_1>:
10059e28:	20002468 	.word	0x20002468

10059e2c <__arm_cp.7_2>:
10059e2c:	000c0002 	.word	0x000c0002

10059e30 <__arm_cp.7_3>:
10059e30:	20002420 	.word	0x20002420

10059e34 <__arm_cp.7_4>:
10059e34:	20002470 	.word	0x20002470

10059e38 <__arm_cp.7_5>:
10059e38:	00040005 	.word	0x00040005

10059e3c <__arm_cp.7_6>:
10059e3c:	02940040 	.word	0x02940040

10059e40 <__arm_cp.7_7>:
10059e40:	00007530 	.word	0x00007530

10059e44 <L2C_timeout_handler_signalling>:
10059e44:	b570      	push	{r4, r5, r6, lr}
10059e46:	2414      	movs	r4, #20
10059e48:	4344      	muls	r4, r0
10059e4a:	4d14      	ldr	r5, [pc, #80]	@ (10059e9c <__arm_cp.8_0>)
10059e4c:	4814      	ldr	r0, [pc, #80]	@ (10059ea0 <__arm_cp.8_1>)
10059e4e:	6800      	ldr	r0, [r0, #0]
10059e50:	214f      	movs	r1, #79	@ 0x4f
10059e52:	5c40      	ldrb	r0, [r0, r1]
10059e54:	0700      	lsls	r0, r0, #28
10059e56:	d513      	bpl.n	10059e80 <L2C_timeout_handler_signalling+0x3c>
10059e58:	6828      	ldr	r0, [r5, #0]
10059e5a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10059e5c:	5b06      	ldrh	r6, [r0, r4]
10059e5e:	4811      	ldr	r0, [pc, #68]	@ (10059ea4 <__arm_cp.8_2>)
10059e60:	6800      	ldr	r0, [r0, #0]
10059e62:	6980      	ldr	r0, [r0, #24]
10059e64:	2206      	movs	r2, #6
10059e66:	2102      	movs	r1, #2
10059e68:	460b      	mov	r3, r1
10059e6a:	f7fb f93f 	bl	100550ec <aci_event_fifo_push_header>
10059e6e:	2800      	cmp	r0, #0
10059e70:	d006      	beq.n	10059e80 <L2C_timeout_handler_signalling+0x3c>
10059e72:	4601      	mov	r1, r0
10059e74:	480c      	ldr	r0, [pc, #48]	@ (10059ea8 <__arm_cp.8_3>)
10059e76:	6048      	str	r0, [r1, #4]
10059e78:	810e      	strh	r6, [r1, #8]
10059e7a:	2002      	movs	r0, #2
10059e7c:	f7fb f9d3 	bl	10055226 <aci_event_fifo_push>
10059e80:	6828      	ldr	r0, [r5, #0]
10059e82:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10059e84:	1901      	adds	r1, r0, r4
10059e86:	2200      	movs	r2, #0
10059e88:	718a      	strb	r2, [r1, #6]
10059e8a:	788a      	ldrb	r2, [r1, #2]
10059e8c:	23f9      	movs	r3, #249	@ 0xf9
10059e8e:	4013      	ands	r3, r2
10059e90:	708b      	strb	r3, [r1, #2]
10059e92:	5b00      	ldrh	r0, [r0, r4]
10059e94:	21ff      	movs	r1, #255	@ 0xff
10059e96:	f7ff fd17 	bl	100598c8 <L2C_cos_channel_descriptors_reset_pending>
10059e9a:	bd70      	pop	{r4, r5, r6, pc}

10059e9c <__arm_cp.8_0>:
10059e9c:	20002468 	.word	0x20002468

10059ea0 <__arm_cp.8_1>:
10059ea0:	20002470 	.word	0x20002470

10059ea4 <__arm_cp.8_2>:
10059ea4:	20002420 	.word	0x20002420

10059ea8 <__arm_cp.8_3>:
10059ea8:	10063f35 	.word	0x10063f35

10059eac <l2c_sap_hci_le_connection_complete_evt_hndl>:
10059eac:	b5b0      	push	{r4, r5, r7, lr}
10059eae:	460c      	mov	r4, r1
10059eb0:	4605      	mov	r5, r0
10059eb2:	2000      	movs	r0, #0
10059eb4:	f7ff fbf0 	bl	10059698 <l2c_get_link_control_block_ref>
10059eb8:	2800      	cmp	r0, #0
10059eba:	d005      	beq.n	10059ec8 <l2c_sap_hci_le_connection_complete_evt_hndl+0x1c>
10059ebc:	2101      	movs	r1, #1
10059ebe:	8081      	strh	r1, [r0, #4]
10059ec0:	8005      	strh	r5, [r0, #0]
10059ec2:	4261      	negs	r1, r4
10059ec4:	4161      	adcs	r1, r4
10059ec6:	7081      	strb	r1, [r0, #2]
10059ec8:	bdb0      	pop	{r4, r5, r7, pc}
	...

10059ecc <l2c_sap_hci_disconnection_complete_evt_hndl>:
10059ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10059ece:	4604      	mov	r4, r0
10059ed0:	f7ff fbfe 	bl	100596d0 <l2c_get_link_control_block_index>
10059ed4:	4605      	mov	r5, r0
10059ed6:	4810      	ldr	r0, [pc, #64]	@ (10059f18 <__arm_cp.1_0>)
10059ed8:	7ac0      	ldrb	r0, [r0, #11]
10059eda:	4285      	cmp	r5, r0
10059edc:	d21b      	bcs.n	10059f16 <l2c_sap_hci_disconnection_complete_evt_hndl+0x4a>
10059ede:	4e0f      	ldr	r6, [pc, #60]	@ (10059f1c <__arm_cp.1_1>)
10059ee0:	6830      	ldr	r0, [r6, #0]
10059ee2:	4629      	mov	r1, r5
10059ee4:	f008 fcbf 	bl	10062866 <CST_stop>
10059ee8:	2714      	movs	r7, #20
10059eea:	436f      	muls	r7, r5
10059eec:	6830      	ldr	r0, [r6, #0]
10059eee:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10059ef0:	2500      	movs	r5, #0
10059ef2:	53c5      	strh	r5, [r0, r7]
10059ef4:	19c0      	adds	r0, r0, r7
10059ef6:	6900      	ldr	r0, [r0, #16]
10059ef8:	2800      	cmp	r0, #0
10059efa:	d009      	beq.n	10059f10 <l2c_sap_hci_disconnection_complete_evt_hndl+0x44>
10059efc:	f7fa ff42 	bl	10054d84 <ACL_pkt_release>
10059f00:	6830      	ldr	r0, [r6, #0]
10059f02:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10059f04:	19c0      	adds	r0, r0, r7
10059f06:	6105      	str	r5, [r0, #16]
10059f08:	6830      	ldr	r0, [r6, #0]
10059f0a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10059f0c:	19c0      	adds	r0, r0, r7
10059f0e:	8185      	strh	r5, [r0, #12]
10059f10:	4620      	mov	r0, r4
10059f12:	f7ff fd0c 	bl	1005992e <L2C_cos_physical_link_disconnection_hndl_ucfg_weak>
10059f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10059f18 <__arm_cp.1_0>:
10059f18:	20002484 	.word	0x20002484

10059f1c <__arm_cp.1_1>:
10059f1c:	20002468 	.word	0x20002468

10059f20 <llc_cig_cmn_start_cis_ucfg_weak>:
10059f20:	4770      	bx	lr

10059f22 <llc_cig_cmn_terminate_cises_on_acl_ucfg_weak>:
10059f22:	4770      	bx	lr

10059f24 <llc_conn_get_cntxt_p>:
10059f24:	4803      	ldr	r0, [pc, #12]	@ (10059f34 <__arm_cp.0_0>)
10059f26:	6800      	ldr	r0, [r0, #0]
10059f28:	219c      	movs	r1, #156	@ 0x9c
10059f2a:	5840      	ldr	r0, [r0, r1]
10059f2c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10059f2e:	6800      	ldr	r0, [r0, #0]
10059f30:	4770      	bx	lr
10059f32:	46c0      	nop			@ (mov r8, r8)

10059f34 <__arm_cp.0_0>:
10059f34:	20002470 	.word	0x20002470

10059f38 <llc_conn_get_cntxt_per_p>:
10059f38:	214d      	movs	r1, #77	@ 0x4d
10059f3a:	0089      	lsls	r1, r1, #2
10059f3c:	4341      	muls	r1, r0
10059f3e:	4804      	ldr	r0, [pc, #16]	@ (10059f50 <__arm_cp.1_0>)
10059f40:	6800      	ldr	r0, [r0, #0]
10059f42:	229c      	movs	r2, #156	@ 0x9c
10059f44:	5880      	ldr	r0, [r0, r2]
10059f46:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10059f48:	6840      	ldr	r0, [r0, #4]
10059f4a:	1840      	adds	r0, r0, r1
10059f4c:	4770      	bx	lr
10059f4e:	46c0      	nop			@ (mov r8, r8)

10059f50 <__arm_cp.1_0>:
10059f50:	20002470 	.word	0x20002470

10059f54 <llc_conn_get_cntxt_per_p_from_handle>:
10059f54:	b510      	push	{r4, lr}
10059f56:	4601      	mov	r1, r0
10059f58:	2000      	movs	r0, #0
10059f5a:	4a0d      	ldr	r2, [pc, #52]	@ (10059f90 <__arm_cp.2_0>)
10059f5c:	4291      	cmp	r1, r2
10059f5e:	d015      	beq.n	10059f8c <llc_conn_get_cntxt_per_p_from_handle+0x38>
10059f60:	4a0c      	ldr	r2, [pc, #48]	@ (10059f94 <__arm_cp.2_1>)
10059f62:	6812      	ldr	r2, [r2, #0]
10059f64:	2334      	movs	r3, #52	@ 0x34
10059f66:	5cd2      	ldrb	r2, [r2, r3]
10059f68:	1c52      	adds	r2, r2, #1
10059f6a:	4b0b      	ldr	r3, [pc, #44]	@ (10059f98 <__arm_cp.2_2>)
10059f6c:	681b      	ldr	r3, [r3, #0]
10059f6e:	249c      	movs	r4, #156	@ 0x9c
10059f70:	591b      	ldr	r3, [r3, r4]
10059f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10059f74:	685b      	ldr	r3, [r3, #4]
10059f76:	1e52      	subs	r2, r2, #1
10059f78:	d008      	beq.n	10059f8c <llc_conn_get_cntxt_per_p_from_handle+0x38>
10059f7a:	244d      	movs	r4, #77	@ 0x4d
10059f7c:	00a4      	lsls	r4, r4, #2
10059f7e:	191c      	adds	r4, r3, r4
10059f80:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
10059f82:	428b      	cmp	r3, r1
10059f84:	4623      	mov	r3, r4
10059f86:	d1f6      	bne.n	10059f76 <llc_conn_get_cntxt_per_p_from_handle+0x22>
10059f88:	4804      	ldr	r0, [pc, #16]	@ (10059f9c <__arm_cp.2_3>)
10059f8a:	1820      	adds	r0, r4, r0
10059f8c:	bd10      	pop	{r4, pc}
10059f8e:	46c0      	nop			@ (mov r8, r8)

10059f90 <__arm_cp.2_0>:
10059f90:	0000ffff 	.word	0x0000ffff

10059f94 <__arm_cp.2_1>:
10059f94:	2000241c 	.word	0x2000241c

10059f98 <__arm_cp.2_2>:
10059f98:	20002470 	.word	0x20002470

10059f9c <__arm_cp.2_3>:
10059f9c:	fffffecc 	.word	0xfffffecc

10059fa0 <llc_conn_get_phy_upd_cntxt_per_p>:
10059fa0:	b510      	push	{r4, lr}
10059fa2:	4604      	mov	r4, r0
10059fa4:	f7f4 fdec 	bl	1004eb80 <phy_upd_csr_ucfg>
10059fa8:	2801      	cmp	r0, #1
10059faa:	d109      	bne.n	10059fc0 <llc_conn_get_phy_upd_cntxt_per_p+0x20>
10059fac:	200e      	movs	r0, #14
10059fae:	4360      	muls	r0, r4
10059fb0:	4904      	ldr	r1, [pc, #16]	@ (10059fc4 <__arm_cp.7_0>)
10059fb2:	6809      	ldr	r1, [r1, #0]
10059fb4:	229c      	movs	r2, #156	@ 0x9c
10059fb6:	5889      	ldr	r1, [r1, r2]
10059fb8:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10059fba:	6949      	ldr	r1, [r1, #20]
10059fbc:	1808      	adds	r0, r1, r0
10059fbe:	bd10      	pop	{r4, pc}
10059fc0:	2000      	movs	r0, #0
10059fc2:	bd10      	pop	{r4, pc}

10059fc4 <__arm_cp.7_0>:
10059fc4:	20002470 	.word	0x20002470

10059fc8 <llc_conn_init>:
10059fc8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10059fca:	4c3e      	ldr	r4, [pc, #248]	@ (1005a0c4 <__arm_cp.8_0>)
10059fcc:	6820      	ldr	r0, [r4, #0]
10059fce:	259c      	movs	r5, #156	@ 0x9c
10059fd0:	5940      	ldr	r0, [r0, r5]
10059fd2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10059fd4:	6803      	ldr	r3, [r0, #0]
10059fd6:	2136      	movs	r1, #54	@ 0x36
10059fd8:	2600      	movs	r6, #0
10059fda:	545e      	strb	r6, [r3, r1]
10059fdc:	493a      	ldr	r1, [pc, #232]	@ (1005a0c8 <__arm_cp.8_1>)
10059fde:	6949      	ldr	r1, [r1, #20]
10059fe0:	0c0a      	lsrs	r2, r1, #16
10059fe2:	2a19      	cmp	r2, #25
10059fe4:	d301      	bcc.n	10059fea <llc_conn_init+0x22>
10059fe6:	2119      	movs	r1, #25
10059fe8:	0409      	lsls	r1, r1, #16
10059fea:	6059      	str	r1, [r3, #4]
10059fec:	6019      	str	r1, [r3, #0]
10059fee:	6900      	ldr	r0, [r0, #16]
10059ff0:	9302      	str	r3, [sp, #8]
10059ff2:	6098      	str	r0, [r3, #8]
10059ff4:	f000 fad0 	bl	1005a598 <llc_conn_list_reset>
10059ff8:	6820      	ldr	r0, [r4, #0]
10059ffa:	5940      	ldr	r0, [r0, r5]
10059ffc:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10059ffe:	6807      	ldr	r7, [r0, #0]
1005a000:	f7ff fac4 	bl	1005958c <data_length_extension_csr_ucfg_weak>
1005a004:	2801      	cmp	r0, #1
1005a006:	d001      	beq.n	1005a00c <llc_conn_init+0x44>
1005a008:	201b      	movs	r0, #27
1005a00a:	e000      	b.n	1005a00e <llc_conn_init+0x46>
1005a00c:	20fb      	movs	r0, #251	@ 0xfb
1005a00e:	82b8      	strh	r0, [r7, #20]
1005a010:	f7ff fabc 	bl	1005958c <data_length_extension_csr_ucfg_weak>
1005a014:	4604      	mov	r4, r0
1005a016:	2029      	movs	r0, #41	@ 0x29
1005a018:	00c0      	lsls	r0, r0, #3
1005a01a:	9000      	str	r0, [sp, #0]
1005a01c:	20a9      	movs	r0, #169	@ 0xa9
1005a01e:	0105      	lsls	r5, r0, #4
1005a020:	f7f4 fdae 	bl	1004eb80 <phy_upd_csr_ucfg>
1005a024:	2c01      	cmp	r4, #1
1005a026:	9501      	str	r5, [sp, #4]
1005a028:	d107      	bne.n	1005a03a <llc_conn_init+0x72>
1005a02a:	2801      	cmp	r0, #1
1005a02c:	4d27      	ldr	r5, [pc, #156]	@ (1005a0cc <__arm_cp.8_2>)
1005a02e:	9c00      	ldr	r4, [sp, #0]
1005a030:	d00c      	beq.n	1005a04c <llc_conn_init+0x84>
1005a032:	4d27      	ldr	r5, [pc, #156]	@ (1005a0d0 <__arm_cp.8_3>)
1005a034:	f7ff fa4e 	bl	100594d4 <cte_csr_ucfg_weak>
1005a038:	e005      	b.n	1005a046 <llc_conn_init+0x7e>
1005a03a:	2801      	cmp	r0, #1
1005a03c:	9c00      	ldr	r4, [sp, #0]
1005a03e:	d005      	beq.n	1005a04c <llc_conn_init+0x84>
1005a040:	f7ff fa48 	bl	100594d4 <cte_csr_ucfg_weak>
1005a044:	4625      	mov	r5, r4
1005a046:	2801      	cmp	r0, #1
1005a048:	d100      	bne.n	1005a04c <llc_conn_init+0x84>
1005a04a:	3508      	adds	r5, #8
1005a04c:	82fd      	strh	r5, [r7, #22]
1005a04e:	f7ff fa9d 	bl	1005958c <data_length_extension_csr_ucfg_weak>
1005a052:	2801      	cmp	r0, #1
1005a054:	d001      	beq.n	1005a05a <llc_conn_init+0x92>
1005a056:	201b      	movs	r0, #27
1005a058:	e000      	b.n	1005a05c <llc_conn_init+0x94>
1005a05a:	20fb      	movs	r0, #251	@ 0xfb
1005a05c:	8338      	strh	r0, [r7, #24]
1005a05e:	f7ff fa95 	bl	1005958c <data_length_extension_csr_ucfg_weak>
1005a062:	4605      	mov	r5, r0
1005a064:	f7f4 fd8c 	bl	1004eb80 <phy_upd_csr_ucfg>
1005a068:	2d01      	cmp	r5, #1
1005a06a:	d107      	bne.n	1005a07c <llc_conn_init+0xb4>
1005a06c:	2801      	cmp	r0, #1
1005a06e:	9d01      	ldr	r5, [sp, #4]
1005a070:	4916      	ldr	r1, [pc, #88]	@ (1005a0cc <__arm_cp.8_2>)
1005a072:	d00d      	beq.n	1005a090 <llc_conn_init+0xc8>
1005a074:	f7ff fa2e 	bl	100594d4 <cte_csr_ucfg_weak>
1005a078:	4915      	ldr	r1, [pc, #84]	@ (1005a0d0 <__arm_cp.8_3>)
1005a07a:	e006      	b.n	1005a08a <llc_conn_init+0xc2>
1005a07c:	2801      	cmp	r0, #1
1005a07e:	9d01      	ldr	r5, [sp, #4]
1005a080:	4629      	mov	r1, r5
1005a082:	d005      	beq.n	1005a090 <llc_conn_init+0xc8>
1005a084:	f7ff fa26 	bl	100594d4 <cte_csr_ucfg_weak>
1005a088:	4621      	mov	r1, r4
1005a08a:	2801      	cmp	r0, #1
1005a08c:	d100      	bne.n	1005a090 <llc_conn_init+0xc8>
1005a08e:	3108      	adds	r1, #8
1005a090:	83fc      	strh	r4, [r7, #30]
1005a092:	201b      	movs	r0, #27
1005a094:	83b8      	strh	r0, [r7, #28]
1005a096:	827d      	strh	r5, [r7, #18]
1005a098:	823c      	strh	r4, [r7, #16]
1005a09a:	81fc      	strh	r4, [r7, #14]
1005a09c:	81b8      	strh	r0, [r7, #12]
1005a09e:	8379      	strh	r1, [r7, #26]
1005a0a0:	f7f4 fead 	bl	1004edfe <LL_phy_update_init_ucfg>
1005a0a4:	9802      	ldr	r0, [sp, #8]
1005a0a6:	f001 fd33 	bl	1005bb10 <llc_subrate_init_acceptable>
1005a0aa:	4c0a      	ldr	r4, [pc, #40]	@ (1005a0d4 <__arm_cp.8_4>)
1005a0ac:	6820      	ldr	r0, [r4, #0]
1005a0ae:	2134      	movs	r1, #52	@ 0x34
1005a0b0:	5c41      	ldrb	r1, [r0, r1]
1005a0b2:	b2f0      	uxtb	r0, r6
1005a0b4:	4288      	cmp	r0, r1
1005a0b6:	d203      	bcs.n	1005a0c0 <llc_conn_init+0xf8>
1005a0b8:	f000 f80e 	bl	1005a0d8 <llc_conn_per_init>
1005a0bc:	1c76      	adds	r6, r6, #1
1005a0be:	e7f5      	b.n	1005a0ac <llc_conn_init+0xe4>
1005a0c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005a0c2:	46c0      	nop			@ (mov r8, r8)

1005a0c4 <__arm_cp.8_0>:
1005a0c4:	20002470 	.word	0x20002470

1005a0c8 <__arm_cp.8_1>:
1005a0c8:	20002484 	.word	0x20002484

1005a0cc <__arm_cp.8_2>:
1005a0cc:	00004290 	.word	0x00004290

1005a0d0 <__arm_cp.8_3>:
1005a0d0:	00000848 	.word	0x00000848

1005a0d4 <__arm_cp.8_4>:
1005a0d4:	2000241c 	.word	0x2000241c

1005a0d8 <llc_conn_per_init>:
1005a0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a0da:	4605      	mov	r5, r0
1005a0dc:	204d      	movs	r0, #77	@ 0x4d
1005a0de:	0080      	lsls	r0, r0, #2
1005a0e0:	4368      	muls	r0, r5
1005a0e2:	492d      	ldr	r1, [pc, #180]	@ (1005a198 <__arm_cp.9_0>)
1005a0e4:	6809      	ldr	r1, [r1, #0]
1005a0e6:	279c      	movs	r7, #156	@ 0x9c
1005a0e8:	59c9      	ldr	r1, [r1, r7]
1005a0ea:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a0ec:	6849      	ldr	r1, [r1, #4]
1005a0ee:	180c      	adds	r4, r1, r0
1005a0f0:	f001 fc9a 	bl	1005ba28 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005a0f4:	4606      	mov	r6, r0
1005a0f6:	f001 fc8d 	bl	1005ba14 <cis_csr_ucfg_weak>
1005a0fa:	4330      	orrs	r0, r6
1005a0fc:	b2c0      	uxtb	r0, r0
1005a0fe:	f006 f8a3 	bl	10060248 <LL_get_control_pdu_size>
1005a102:	2200      	movs	r2, #0
1005a104:	51e2      	str	r2, [r4, r7]
1005a106:	212e      	movs	r1, #46	@ 0x2e
1005a108:	231f      	movs	r3, #31
1005a10a:	5463      	strb	r3, [r4, r1]
1005a10c:	85a2      	strh	r2, [r4, #44]	@ 0x2c
1005a10e:	0880      	lsrs	r0, r0, #2
1005a110:	4368      	muls	r0, r5
1005a112:	0080      	lsls	r0, r0, #2
1005a114:	4920      	ldr	r1, [pc, #128]	@ (1005a198 <__arm_cp.9_0>)
1005a116:	6809      	ldr	r1, [r1, #0]
1005a118:	460b      	mov	r3, r1
1005a11a:	3394      	adds	r3, #148	@ 0x94
1005a11c:	685b      	ldr	r3, [r3, #4]
1005a11e:	181b      	adds	r3, r3, r0
1005a120:	2690      	movs	r6, #144	@ 0x90
1005a122:	51a3      	str	r3, [r4, r6]
1005a124:	238c      	movs	r3, #140	@ 0x8c
1005a126:	50e2      	str	r2, [r4, r3]
1005a128:	2388      	movs	r3, #136	@ 0x88
1005a12a:	50e2      	str	r2, [r4, r3]
1005a12c:	2330      	movs	r3, #48	@ 0x30
1005a12e:	54e5      	strb	r5, [r4, r3]
1005a130:	239a      	movs	r3, #154	@ 0x9a
1005a132:	52e2      	strh	r2, [r4, r3]
1005a134:	23ff      	movs	r3, #255	@ 0xff
1005a136:	461d      	mov	r5, r3
1005a138:	3508      	adds	r5, #8
1005a13a:	5562      	strb	r2, [r4, r5]
1005a13c:	2241      	movs	r2, #65	@ 0x41
1005a13e:	54a3      	strb	r3, [r4, r2]
1005a140:	222f      	movs	r2, #47	@ 0x2f
1005a142:	2307      	movs	r3, #7
1005a144:	54a3      	strb	r3, [r4, r2]
1005a146:	227d      	movs	r2, #125	@ 0x7d
1005a148:	0452      	lsls	r2, r2, #17
1005a14a:	66e2      	str	r2, [r4, #108]	@ 0x6c
1005a14c:	6722      	str	r2, [r4, #112]	@ 0x70
1005a14e:	2201      	movs	r2, #1
1005a150:	8522      	strh	r2, [r4, #40]	@ 0x28
1005a152:	4a12      	ldr	r2, [pc, #72]	@ (1005a19c <__arm_cp.9_1>)
1005a154:	8762      	strh	r2, [r4, #58]	@ 0x3a
1005a156:	2219      	movs	r2, #25
1005a158:	0412      	lsls	r2, r2, #16
1005a15a:	65a2      	str	r2, [r4, #88]	@ 0x58
1005a15c:	65e2      	str	r2, [r4, #92]	@ 0x5c
1005a15e:	6622      	str	r2, [r4, #96]	@ 0x60
1005a160:	4622      	mov	r2, r4
1005a162:	32b4      	adds	r2, #180	@ 0xb4
1005a164:	2394      	movs	r3, #148	@ 0x94
1005a166:	58c9      	ldr	r1, [r1, r3]
1005a168:	231b      	movs	r3, #27
1005a16a:	8053      	strh	r3, [r2, #2]
1005a16c:	1808      	adds	r0, r1, r0
1005a16e:	4621      	mov	r1, r4
1005a170:	3190      	adds	r1, #144	@ 0x90
1005a172:	6048      	str	r0, [r1, #4]
1005a174:	20b4      	movs	r0, #180	@ 0xb4
1005a176:	5223      	strh	r3, [r4, r0]
1005a178:	4809      	ldr	r0, [pc, #36]	@ (1005a1a0 <__arm_cp.9_2>)
1005a17a:	490a      	ldr	r1, [pc, #40]	@ (1005a1a4 <__arm_cp.9_3>)
1005a17c:	6050      	str	r0, [r2, #4]
1005a17e:	6091      	str	r1, [r2, #8]
1005a180:	2029      	movs	r0, #41	@ 0x29
1005a182:	00c0      	lsls	r0, r0, #3
1005a184:	8190      	strh	r0, [r2, #12]
1005a186:	4620      	mov	r0, r4
1005a188:	f001 fcd7 	bl	1005bb3a <llc_subrate_reset_params>
1005a18c:	3480      	adds	r4, #128	@ 0x80
1005a18e:	4620      	mov	r0, r4
1005a190:	f008 fce8 	bl	10062b64 <ACL_list_init>
1005a194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005a196:	46c0      	nop			@ (mov r8, r8)

1005a198 <__arm_cp.9_0>:
1005a198:	20002470 	.word	0x20002470

1005a19c <__arm_cp.9_1>:
1005a19c:	0000ffff 	.word	0x0000ffff

1005a1a0 <__arm_cp.9_2>:
1005a1a0:	0148001b 	.word	0x0148001b

1005a1a4 <__arm_cp.9_3>:
1005a1a4:	001b0148 	.word	0x001b0148

1005a1a8 <llc_conn_mem_allocate>:
1005a1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1005a1aa:	b085      	sub	sp, #20
1005a1ac:	2b01      	cmp	r3, #1
1005a1ae:	d000      	beq.n	1005a1b2 <llc_conn_mem_allocate+0xa>
1005a1b0:	e082      	b.n	1005a2b8 <llc_conn_mem_allocate+0x110>
1005a1b2:	ab02      	add	r3, sp, #8
1005a1b4:	c307      	stmia	r3!, {r0, r1, r2}
1005a1b6:	4841      	ldr	r0, [pc, #260]	@ (1005a2bc <__arm_cp.10_0>)
1005a1b8:	7fc1      	ldrb	r1, [r0, #31]
1005a1ba:	9101      	str	r1, [sp, #4]
1005a1bc:	7ac4      	ldrb	r4, [r0, #11]
1005a1be:	9400      	str	r4, [sp, #0]
1005a1c0:	2601      	movs	r6, #1
1005a1c2:	2124      	movs	r1, #36	@ 0x24
1005a1c4:	4a3e      	ldr	r2, [pc, #248]	@ (1005a2c0 <__arm_cp.10_1>)
1005a1c6:	4630      	mov	r0, r6
1005a1c8:	4790      	blx	r2
1005a1ca:	493e      	ldr	r1, [pc, #248]	@ (1005a2c4 <__arm_cp.10_2>)
1005a1cc:	6809      	ldr	r1, [r1, #0]
1005a1ce:	279c      	movs	r7, #156	@ 0x9c
1005a1d0:	59c9      	ldr	r1, [r1, r7]
1005a1d2:	63c8      	str	r0, [r1, #60]	@ 0x3c
1005a1d4:	2538      	movs	r5, #56	@ 0x38
1005a1d6:	4630      	mov	r0, r6
1005a1d8:	4629      	mov	r1, r5
1005a1da:	4a39      	ldr	r2, [pc, #228]	@ (1005a2c0 <__arm_cp.10_1>)
1005a1dc:	4790      	blx	r2
1005a1de:	4939      	ldr	r1, [pc, #228]	@ (1005a2c4 <__arm_cp.10_2>)
1005a1e0:	6809      	ldr	r1, [r1, #0]
1005a1e2:	59c9      	ldr	r1, [r1, r7]
1005a1e4:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a1e6:	6008      	str	r0, [r1, #0]
1005a1e8:	204d      	movs	r0, #77	@ 0x4d
1005a1ea:	0081      	lsls	r1, r0, #2
1005a1ec:	4620      	mov	r0, r4
1005a1ee:	4c34      	ldr	r4, [pc, #208]	@ (1005a2c0 <__arm_cp.10_1>)
1005a1f0:	47a0      	blx	r4
1005a1f2:	4934      	ldr	r1, [pc, #208]	@ (1005a2c4 <__arm_cp.10_2>)
1005a1f4:	6809      	ldr	r1, [r1, #0]
1005a1f6:	59c9      	ldr	r1, [r1, r7]
1005a1f8:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a1fa:	6048      	str	r0, [r1, #4]
1005a1fc:	9801      	ldr	r0, [sp, #4]
1005a1fe:	4086      	lsls	r6, r0
1005a200:	b2f0      	uxtb	r0, r6
1005a202:	2108      	movs	r1, #8
1005a204:	47a0      	blx	r4
1005a206:	492f      	ldr	r1, [pc, #188]	@ (1005a2c4 <__arm_cp.10_2>)
1005a208:	6809      	ldr	r1, [r1, #0]
1005a20a:	59c9      	ldr	r1, [r1, r7]
1005a20c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a20e:	6809      	ldr	r1, [r1, #0]
1005a210:	2228      	movs	r2, #40	@ 0x28
1005a212:	2300      	movs	r3, #0
1005a214:	548b      	strb	r3, [r1, r2]
1005a216:	6248      	str	r0, [r1, #36]	@ 0x24
1005a218:	3128      	adds	r1, #40	@ 0x28
1005a21a:	704e      	strb	r6, [r1, #1]
1005a21c:	9c00      	ldr	r4, [sp, #0]
1005a21e:	2013      	movs	r0, #19
1005a220:	2104      	movs	r1, #4
1005a222:	4e27      	ldr	r6, [pc, #156]	@ (1005a2c0 <__arm_cp.10_1>)
1005a224:	47b0      	blx	r6
1005a226:	4927      	ldr	r1, [pc, #156]	@ (1005a2c4 <__arm_cp.10_2>)
1005a228:	6809      	ldr	r1, [r1, #0]
1005a22a:	59c9      	ldr	r1, [r1, r7]
1005a22c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a22e:	6108      	str	r0, [r1, #16]
1005a230:	4620      	mov	r0, r4
1005a232:	4629      	mov	r1, r5
1005a234:	47b0      	blx	r6
1005a236:	4633      	mov	r3, r6
1005a238:	4a22      	ldr	r2, [pc, #136]	@ (1005a2c4 <__arm_cp.10_2>)
1005a23a:	6811      	ldr	r1, [r2, #0]
1005a23c:	59c9      	ldr	r1, [r1, r7]
1005a23e:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a240:	6088      	str	r0, [r1, #8]
1005a242:	4626      	mov	r6, r4
1005a244:	4620      	mov	r0, r4
1005a246:	4629      	mov	r1, r5
1005a248:	4615      	mov	r5, r2
1005a24a:	4798      	blx	r3
1005a24c:	6829      	ldr	r1, [r5, #0]
1005a24e:	59c9      	ldr	r1, [r1, r7]
1005a250:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a252:	60c8      	str	r0, [r1, #12]
1005a254:	9802      	ldr	r0, [sp, #8]
1005a256:	2801      	cmp	r0, #1
1005a258:	d107      	bne.n	1005a26a <llc_conn_mem_allocate+0xc2>
1005a25a:	210e      	movs	r1, #14
1005a25c:	4630      	mov	r0, r6
1005a25e:	f006 fcb9 	bl	10060bd4 <csmem_mem_0_assign>
1005a262:	6829      	ldr	r1, [r5, #0]
1005a264:	59c9      	ldr	r1, [r1, r7]
1005a266:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a268:	6148      	str	r0, [r1, #20]
1005a26a:	9803      	ldr	r0, [sp, #12]
1005a26c:	2801      	cmp	r0, #1
1005a26e:	d107      	bne.n	1005a280 <llc_conn_mem_allocate+0xd8>
1005a270:	2108      	movs	r1, #8
1005a272:	4630      	mov	r0, r6
1005a274:	f006 fcae 	bl	10060bd4 <csmem_mem_0_assign>
1005a278:	6829      	ldr	r1, [r5, #0]
1005a27a:	59c9      	ldr	r1, [r1, r7]
1005a27c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a27e:	6188      	str	r0, [r1, #24]
1005a280:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1005a282:	9804      	ldr	r0, [sp, #16]
1005a284:	2801      	cmp	r0, #1
1005a286:	d10d      	bne.n	1005a2a4 <llc_conn_mem_allocate+0xfc>
1005a288:	2120      	movs	r1, #32
1005a28a:	4630      	mov	r0, r6
1005a28c:	f006 fca2 	bl	10060bd4 <csmem_mem_0_assign>
1005a290:	6829      	ldr	r1, [r5, #0]
1005a292:	59c9      	ldr	r1, [r1, r7]
1005a294:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a296:	61c8      	str	r0, [r1, #28]
1005a298:	2001      	movs	r0, #1
1005a29a:	2111      	movs	r1, #17
1005a29c:	f006 fc9a 	bl	10060bd4 <csmem_mem_0_assign>
1005a2a0:	6829      	ldr	r1, [r5, #0]
1005a2a2:	6648      	str	r0, [r1, #100]	@ 0x64
1005a2a4:	2c01      	cmp	r4, #1
1005a2a6:	d107      	bne.n	1005a2b8 <llc_conn_mem_allocate+0x110>
1005a2a8:	211c      	movs	r1, #28
1005a2aa:	4630      	mov	r0, r6
1005a2ac:	f006 fc92 	bl	10060bd4 <csmem_mem_0_assign>
1005a2b0:	6829      	ldr	r1, [r5, #0]
1005a2b2:	59c9      	ldr	r1, [r1, r7]
1005a2b4:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a2b6:	6208      	str	r0, [r1, #32]
1005a2b8:	b005      	add	sp, #20
1005a2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005a2bc <__arm_cp.10_0>:
1005a2bc:	20002484 	.word	0x20002484

1005a2c0 <__arm_cp.10_1>:
1005a2c0:	10060bd5 	.word	0x10060bd5

1005a2c4 <__arm_cp.10_2>:
1005a2c4:	20002470 	.word	0x20002470

1005a2c8 <llc_conn_clr_instant_reached_passed>:
1005a2c8:	219a      	movs	r1, #154	@ 0x9a
1005a2ca:	5a42      	ldrh	r2, [r0, r1]
1005a2cc:	2304      	movs	r3, #4
1005a2ce:	439a      	bics	r2, r3
1005a2d0:	5242      	strh	r2, [r0, r1]
1005a2d2:	5a42      	ldrh	r2, [r0, r1]
1005a2d4:	2302      	movs	r3, #2
1005a2d6:	439a      	bics	r2, r3
1005a2d8:	5242      	strh	r2, [r0, r1]
1005a2da:	4770      	bx	lr

1005a2dc <llc_conn_clr_rx_acl_blocked>:
1005a2dc:	2194      	movs	r1, #148	@ 0x94
1005a2de:	5840      	ldr	r0, [r0, r1]
1005a2e0:	8801      	ldrh	r1, [r0, #0]
1005a2e2:	4a02      	ldr	r2, [pc, #8]	@ (1005a2ec <__arm_cp.5_0>)
1005a2e4:	400a      	ands	r2, r1
1005a2e6:	8002      	strh	r2, [r0, #0]
1005a2e8:	4770      	bx	lr
1005a2ea:	46c0      	nop			@ (mov r8, r8)

1005a2ec <__arm_cp.5_0>:
1005a2ec:	0000feff 	.word	0x0000feff

1005a2f0 <llc_conn_clr_rx_ctrl_pdu_full>:
1005a2f0:	2190      	movs	r1, #144	@ 0x90
1005a2f2:	5840      	ldr	r0, [r0, r1]
1005a2f4:	8801      	ldrh	r1, [r0, #0]
1005a2f6:	2201      	movs	r2, #1
1005a2f8:	4391      	bics	r1, r2
1005a2fa:	8001      	strh	r1, [r0, #0]
1005a2fc:	4770      	bx	lr

1005a2fe <llc_conn_clr_tx_acl_blocked>:
1005a2fe:	2194      	movs	r1, #148	@ 0x94
1005a300:	5840      	ldr	r0, [r0, r1]
1005a302:	8801      	ldrh	r1, [r0, #0]
1005a304:	2280      	movs	r2, #128	@ 0x80
1005a306:	4391      	bics	r1, r2
1005a308:	8001      	strh	r1, [r0, #0]
1005a30a:	4770      	bx	lr

1005a30c <llc_conn_copy_tx_data_packet>:
1005a30c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005a30e:	460c      	mov	r4, r1
1005a310:	2188      	movs	r1, #136	@ 0x88
1005a312:	5c41      	ldrb	r1, [r0, r1]
1005a314:	0649      	lsls	r1, r1, #25
1005a316:	d40c      	bmi.n	1005a332 <llc_conn_copy_tx_data_packet+0x26>
1005a318:	3088      	adds	r0, #136	@ 0x88
1005a31a:	8a21      	ldrh	r1, [r4, #16]
1005a31c:	8862      	ldrh	r2, [r4, #2]
1005a31e:	1a52      	subs	r2, r2, r1
1005a320:	b293      	uxth	r3, r2
1005a322:	8dc5      	ldrh	r5, [r0, #46]	@ 0x2e
1005a324:	42ab      	cmp	r3, r5
1005a326:	d909      	bls.n	1005a33c <llc_conn_copy_tx_data_packet+0x30>
1005a328:	7a20      	ldrb	r0, [r4, #8]
1005a32a:	22f7      	movs	r2, #247	@ 0xf7
1005a32c:	4002      	ands	r2, r0
1005a32e:	7222      	strb	r2, [r4, #8]
1005a330:	e001      	b.n	1005a336 <llc_conn_copy_tx_data_packet+0x2a>
1005a332:	8a21      	ldrh	r1, [r4, #16]
1005a334:	7b25      	ldrb	r5, [r4, #12]
1005a336:	2010      	movs	r0, #16
1005a338:	9001      	str	r0, [sp, #4]
1005a33a:	e005      	b.n	1005a348 <llc_conn_copy_tx_data_packet+0x3c>
1005a33c:	69e0      	ldr	r0, [r4, #28]
1005a33e:	1e43      	subs	r3, r0, #1
1005a340:	4198      	sbcs	r0, r3
1005a342:	0100      	lsls	r0, r0, #4
1005a344:	9001      	str	r0, [sp, #4]
1005a346:	4615      	mov	r5, r2
1005a348:	2900      	cmp	r1, #0
1005a34a:	d102      	bne.n	1005a352 <llc_conn_copy_tx_data_packet+0x46>
1005a34c:	7a20      	ldrb	r0, [r4, #8]
1005a34e:	0780      	lsls	r0, r0, #30
1005a350:	d401      	bmi.n	1005a356 <llc_conn_copy_tx_data_packet+0x4a>
1005a352:	2001      	movs	r0, #1
1005a354:	e000      	b.n	1005a358 <llc_conn_copy_tx_data_packet+0x4c>
1005a356:	2002      	movs	r0, #2
1005a358:	9002      	str	r0, [sp, #8]
1005a35a:	480e      	ldr	r0, [pc, #56]	@ (1005a394 <__arm_cp.8_0>)
1005a35c:	6800      	ldr	r0, [r0, #0]
1005a35e:	278c      	movs	r7, #140	@ 0x8c
1005a360:	59c0      	ldr	r0, [r0, r7]
1005a362:	1d00      	adds	r0, r0, #4
1005a364:	89e2      	ldrh	r2, [r4, #14]
1005a366:	1851      	adds	r1, r2, r1
1005a368:	261f      	movs	r6, #31
1005a36a:	400e      	ands	r6, r1
1005a36c:	19a9      	adds	r1, r5, r6
1005a36e:	b28a      	uxth	r2, r1
1005a370:	69a1      	ldr	r1, [r4, #24]
1005a372:	f006 fd90 	bl	10060e96 <Mem_Buff_block_copy>
1005a376:	6160      	str	r0, [r4, #20]
1005a378:	7325      	strb	r5, [r4, #12]
1005a37a:	4b06      	ldr	r3, [pc, #24]	@ (1005a394 <__arm_cp.8_0>)
1005a37c:	6818      	ldr	r0, [r3, #0]
1005a37e:	59c0      	ldr	r0, [r0, r7]
1005a380:	1830      	adds	r0, r6, r0
1005a382:	9901      	ldr	r1, [sp, #4]
1005a384:	9a02      	ldr	r2, [sp, #8]
1005a386:	4311      	orrs	r1, r2
1005a388:	7081      	strb	r1, [r0, #2]
1005a38a:	6818      	ldr	r0, [r3, #0]
1005a38c:	59c0      	ldr	r0, [r0, r7]
1005a38e:	1830      	adds	r0, r6, r0
1005a390:	70c5      	strb	r5, [r0, #3]
1005a392:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005a394 <__arm_cp.8_0>:
1005a394:	20002470 	.word	0x20002470

1005a398 <llc_conn_enhanced_get_latency>:
1005a398:	b570      	push	{r4, r5, r6, lr}
1005a39a:	4605      	mov	r5, r0
1005a39c:	202c      	movs	r0, #44	@ 0x2c
1005a39e:	5c28      	ldrb	r0, [r5, r0]
1005a3a0:	2401      	movs	r4, #1
1005a3a2:	2803      	cmp	r0, #3
1005a3a4:	d13f      	bne.n	1005a426 <llc_conn_enhanced_get_latency+0x8e>
1005a3a6:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
1005a3a8:	2800      	cmp	r0, #0
1005a3aa:	d03c      	beq.n	1005a426 <llc_conn_enhanced_get_latency+0x8e>
1005a3ac:	4628      	mov	r0, r5
1005a3ae:	f7f9 fab6 	bl	1005391e <BLEPLAT_CNTR_PacketGetDataPtr>
1005a3b2:	4629      	mov	r1, r5
1005a3b4:	3128      	adds	r1, #40	@ 0x28
1005a3b6:	4288      	cmp	r0, r1
1005a3b8:	d135      	bne.n	1005a426 <llc_conn_enhanced_get_latency+0x8e>
1005a3ba:	462e      	mov	r6, r5
1005a3bc:	362c      	adds	r6, #44	@ 0x2c
1005a3be:	205c      	movs	r0, #92	@ 0x5c
1005a3c0:	5c30      	ldrb	r0, [r6, r0]
1005a3c2:	0600      	lsls	r0, r0, #24
1005a3c4:	0f80      	lsrs	r0, r0, #30
1005a3c6:	d12e      	bne.n	1005a426 <llc_conn_enhanced_get_latency+0x8e>
1005a3c8:	20ff      	movs	r0, #255	@ 0xff
1005a3ca:	3008      	adds	r0, #8
1005a3cc:	1828      	adds	r0, r5, r0
1005a3ce:	7800      	ldrb	r0, [r0, #0]
1005a3d0:	0780      	lsls	r0, r0, #30
1005a3d2:	d428      	bmi.n	1005a426 <llc_conn_enhanced_get_latency+0x8e>
1005a3d4:	208f      	movs	r0, #143	@ 0x8f
1005a3d6:	0040      	lsls	r0, r0, #1
1005a3d8:	1828      	adds	r0, r5, r0
1005a3da:	8800      	ldrh	r0, [r0, #0]
1005a3dc:	2800      	cmp	r0, #0
1005a3de:	d122      	bne.n	1005a426 <llc_conn_enhanced_get_latency+0x8e>
1005a3e0:	7930      	ldrb	r0, [r6, #4]
1005a3e2:	2401      	movs	r4, #1
1005a3e4:	4621      	mov	r1, r4
1005a3e6:	f001 fbfc 	bl	1005bbe2 <LL_cpe_get_active_status>
1005a3ea:	2800      	cmp	r0, #0
1005a3ec:	d105      	bne.n	1005a3fa <llc_conn_enhanced_get_latency+0x62>
1005a3ee:	7930      	ldrb	r0, [r6, #4]
1005a3f0:	2100      	movs	r1, #0
1005a3f2:	f001 fbf6 	bl	1005bbe2 <LL_cpe_get_active_status>
1005a3f6:	2800      	cmp	r0, #0
1005a3f8:	d013      	beq.n	1005a422 <llc_conn_enhanced_get_latency+0x8a>
1005a3fa:	4628      	mov	r0, r5
1005a3fc:	3098      	adds	r0, #152	@ 0x98
1005a3fe:	8841      	ldrh	r1, [r0, #2]
1005a400:	07c9      	lsls	r1, r1, #31
1005a402:	d010      	beq.n	1005a426 <llc_conn_enhanced_get_latency+0x8e>
1005a404:	8af1      	ldrh	r1, [r6, #22]
1005a406:	8800      	ldrh	r0, [r0, #0]
1005a408:	1a40      	subs	r0, r0, r1
1005a40a:	b281      	uxth	r1, r0
1005a40c:	2902      	cmp	r1, #2
1005a40e:	d30a      	bcc.n	1005a426 <llc_conn_enhanced_get_latency+0x8e>
1005a410:	1e44      	subs	r4, r0, #1
1005a412:	b2a1      	uxth	r1, r4
1005a414:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
1005a416:	1c40      	adds	r0, r0, #1
1005a418:	b282      	uxth	r2, r0
1005a41a:	4291      	cmp	r1, r2
1005a41c:	d303      	bcc.n	1005a426 <llc_conn_enhanced_get_latency+0x8e>
1005a41e:	4604      	mov	r4, r0
1005a420:	e001      	b.n	1005a426 <llc_conn_enhanced_get_latency+0x8e>
1005a422:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
1005a424:	1c44      	adds	r4, r0, #1
1005a426:	b2a0      	uxth	r0, r4
1005a428:	bd70      	pop	{r4, r5, r6, pc}
	...

1005a42c <llc_conn_get_conn_idx>:
1005a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a42e:	4604      	mov	r4, r0
1005a430:	25ff      	movs	r5, #255	@ 0xff
1005a432:	480a      	ldr	r0, [pc, #40]	@ (1005a45c <__arm_cp.13_0>)
1005a434:	4284      	cmp	r4, r0
1005a436:	d00f      	beq.n	1005a458 <llc_conn_get_conn_idx+0x2c>
1005a438:	2600      	movs	r6, #0
1005a43a:	4f09      	ldr	r7, [pc, #36]	@ (1005a460 <__arm_cp.13_1>)
1005a43c:	6838      	ldr	r0, [r7, #0]
1005a43e:	2134      	movs	r1, #52	@ 0x34
1005a440:	5c41      	ldrb	r1, [r0, r1]
1005a442:	b2f0      	uxtb	r0, r6
1005a444:	4288      	cmp	r0, r1
1005a446:	d207      	bcs.n	1005a458 <llc_conn_get_conn_idx+0x2c>
1005a448:	f7ff fd76 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005a44c:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
1005a44e:	42a0      	cmp	r0, r4
1005a450:	d001      	beq.n	1005a456 <llc_conn_get_conn_idx+0x2a>
1005a452:	1c76      	adds	r6, r6, #1
1005a454:	e7f2      	b.n	1005a43c <llc_conn_get_conn_idx+0x10>
1005a456:	4635      	mov	r5, r6
1005a458:	b2e8      	uxtb	r0, r5
1005a45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005a45c <__arm_cp.13_0>:
1005a45c:	0000ffff 	.word	0x0000ffff

1005a460 <__arm_cp.13_1>:
1005a460:	2000241c 	.word	0x2000241c

1005a464 <llc_conn_get_ctrl_pdu_data_p>:
1005a464:	0089      	lsls	r1, r1, #2
1005a466:	1840      	adds	r0, r0, r1
1005a468:	2190      	movs	r1, #144	@ 0x90
1005a46a:	5840      	ldr	r0, [r0, r1]
1005a46c:	1c80      	adds	r0, r0, #2
1005a46e:	4770      	bx	lr

1005a470 <llc_conn_get_enc_on>:
1005a470:	2900      	cmp	r1, #0
1005a472:	d001      	beq.n	1005a478 <llc_conn_get_enc_on+0x8>
1005a474:	2102      	movs	r1, #2
1005a476:	e000      	b.n	1005a47a <llc_conn_get_enc_on+0xa>
1005a478:	2103      	movs	r1, #3
1005a47a:	2288      	movs	r2, #136	@ 0x88
1005a47c:	5882      	ldr	r2, [r0, r2]
1005a47e:	40ca      	lsrs	r2, r1
1005a480:	2001      	movs	r0, #1
1005a482:	4010      	ands	r0, r2
1005a484:	4770      	bx	lr

1005a486 <llc_conn_get_instant_passed>:
1005a486:	219a      	movs	r1, #154	@ 0x9a
1005a488:	5a40      	ldrh	r0, [r0, r1]
1005a48a:	0740      	lsls	r0, r0, #29
1005a48c:	0fc0      	lsrs	r0, r0, #31
1005a48e:	4770      	bx	lr

1005a490 <llc_conn_get_instant_reached>:
1005a490:	219a      	movs	r1, #154	@ 0x9a
1005a492:	5a40      	ldrh	r0, [r0, r1]
1005a494:	0780      	lsls	r0, r0, #30
1005a496:	0fc0      	lsrs	r0, r0, #31
1005a498:	4770      	bx	lr

1005a49a <llc_conn_get_rx_ctrl_pdu_full>:
1005a49a:	2190      	movs	r1, #144	@ 0x90
1005a49c:	5840      	ldr	r0, [r0, r1]
1005a49e:	8801      	ldrh	r1, [r0, #0]
1005a4a0:	2001      	movs	r0, #1
1005a4a2:	4008      	ands	r0, r1
1005a4a4:	4770      	bx	lr

1005a4a6 <llc_conn_get_rx_acl_blocked>:
1005a4a6:	2194      	movs	r1, #148	@ 0x94
1005a4a8:	5840      	ldr	r0, [r0, r1]
1005a4aa:	8800      	ldrh	r0, [r0, #0]
1005a4ac:	05c0      	lsls	r0, r0, #23
1005a4ae:	0fc0      	lsrs	r0, r0, #31
1005a4b0:	4770      	bx	lr

1005a4b2 <llc_conn_get_tx_acl_blocked>:
1005a4b2:	2194      	movs	r1, #148	@ 0x94
1005a4b4:	5840      	ldr	r0, [r0, r1]
1005a4b6:	8800      	ldrh	r0, [r0, #0]
1005a4b8:	b2c0      	uxtb	r0, r0
1005a4ba:	09c0      	lsrs	r0, r0, #7
1005a4bc:	4770      	bx	lr

1005a4be <llc_conn_get_tx_ctrl_pdu_state>:
1005a4be:	2194      	movs	r1, #148	@ 0x94
1005a4c0:	5840      	ldr	r0, [r0, r1]
1005a4c2:	8801      	ldrh	r1, [r0, #0]
1005a4c4:	2003      	movs	r0, #3
1005a4c6:	4008      	ands	r0, r1
1005a4c8:	4770      	bx	lr
	...

1005a4cc <llc_conn_guard_time_for_close_conn_event>:
1005a4cc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005a4ce:	4607      	mov	r7, r0
1005a4d0:	2441      	movs	r4, #65	@ 0x41
1005a4d2:	5d00      	ldrb	r0, [r0, r4]
1005a4d4:	f7f9 fcb0 	bl	10053e38 <BLEPLAT_CNTR_SmGetTxPhy>
1005a4d8:	4605      	mov	r5, r0
1005a4da:	5d38      	ldrb	r0, [r7, r4]
1005a4dc:	f7f9 fc9b 	bl	10053e16 <BLEPLAT_CNTR_SmGetRxPhy>
1005a4e0:	23b6      	movs	r3, #182	@ 0xb6
1005a4e2:	1e6c      	subs	r4, r5, #1
1005a4e4:	b2e1      	uxtb	r1, r4
1005a4e6:	9702      	str	r7, [sp, #8]
1005a4e8:	37b6      	adds	r7, #182	@ 0xb6
1005a4ea:	2570      	movs	r5, #112	@ 0x70
1005a4ec:	2603      	movs	r6, #3
1005a4ee:	2905      	cmp	r1, #5
1005a4f0:	4632      	mov	r2, r6
1005a4f2:	9501      	str	r5, [sp, #4]
1005a4f4:	4629      	mov	r1, r5
1005a4f6:	d805      	bhi.n	1005a504 <llc_conn_guard_time_for_close_conn_event+0x38>
1005a4f8:	b261      	sxtb	r1, r4
1005a4fa:	008a      	lsls	r2, r1, #2
1005a4fc:	4919      	ldr	r1, [pc, #100]	@ (1005a564 <__arm_cp.22_0>)
1005a4fe:	5889      	ldr	r1, [r1, r2]
1005a500:	4c19      	ldr	r4, [pc, #100]	@ (1005a568 <__arm_cp.22_1>)
1005a502:	58a2      	ldr	r2, [r4, r2]
1005a504:	9c02      	ldr	r4, [sp, #8]
1005a506:	5ae3      	ldrh	r3, [r4, r3]
1005a508:	887c      	ldrh	r4, [r7, #2]
1005a50a:	1e40      	subs	r0, r0, #1
1005a50c:	b2c5      	uxtb	r5, r0
1005a50e:	2d05      	cmp	r5, #5
1005a510:	d806      	bhi.n	1005a520 <llc_conn_guard_time_for_close_conn_event+0x54>
1005a512:	b240      	sxtb	r0, r0
1005a514:	0080      	lsls	r0, r0, #2
1005a516:	4d13      	ldr	r5, [pc, #76]	@ (1005a564 <__arm_cp.22_0>)
1005a518:	582d      	ldr	r5, [r5, r0]
1005a51a:	9501      	str	r5, [sp, #4]
1005a51c:	4d12      	ldr	r5, [pc, #72]	@ (1005a568 <__arm_cp.22_1>)
1005a51e:	582e      	ldr	r6, [r5, r0]
1005a520:	4093      	lsls	r3, r2
1005a522:	1858      	adds	r0, r3, r1
1005a524:	0200      	lsls	r0, r0, #8
1005a526:	2147      	movs	r1, #71	@ 0x47
1005a528:	00cd      	lsls	r5, r1, #3
1005a52a:	1940      	adds	r0, r0, r5
1005a52c:	490f      	ldr	r1, [pc, #60]	@ (1005a56c <__arm_cp.22_2>)
1005a52e:	f7e5 fe87 	bl	10040240 <__udivsi3>
1005a532:	9000      	str	r0, [sp, #0]
1005a534:	40b4      	lsls	r4, r6
1005a536:	9801      	ldr	r0, [sp, #4]
1005a538:	1820      	adds	r0, r4, r0
1005a53a:	0200      	lsls	r0, r0, #8
1005a53c:	1940      	adds	r0, r0, r5
1005a53e:	490b      	ldr	r1, [pc, #44]	@ (1005a56c <__arm_cp.22_2>)
1005a540:	f7e5 fe7e 	bl	10040240 <__udivsi3>
1005a544:	4606      	mov	r6, r0
1005a546:	88fc      	ldrh	r4, [r7, #6]
1005a548:	f005 fec2 	bl	100602d0 <LL_sched_engine_return_actual_scheduler_margin>
1005a54c:	9900      	ldr	r1, [sp, #0]
1005a54e:	1808      	adds	r0, r1, r0
1005a550:	b2b1      	uxth	r1, r6
1005a552:	428c      	cmp	r4, r1
1005a554:	d800      	bhi.n	1005a558 <llc_conn_guard_time_for_close_conn_event+0x8c>
1005a556:	4621      	mov	r1, r4
1005a558:	1840      	adds	r0, r0, r1
1005a55a:	30cd      	adds	r0, #205	@ 0xcd
1005a55c:	9902      	ldr	r1, [sp, #8]
1005a55e:	6748      	str	r0, [r1, #116]	@ 0x74
1005a560:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005a562:	46c0      	nop			@ (mov r8, r8)

1005a564 <__arm_cp.22_0>:
1005a564:	100696b4 	.word	0x100696b4

1005a568 <__arm_cp.22_1>:
1005a568:	1006969c 	.word	0x1006969c

1005a56c <__arm_cp.22_2>:
1005a56c:	00000271 	.word	0x00000271

1005a570 <llc_conn_list_add_address>:
1005a570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a572:	460a      	mov	r2, r1
1005a574:	4601      	mov	r1, r0
1005a576:	4807      	ldr	r0, [pc, #28]	@ (1005a594 <__arm_cp.23_0>)
1005a578:	6800      	ldr	r0, [r0, #0]
1005a57a:	239c      	movs	r3, #156	@ 0x9c
1005a57c:	58c0      	ldr	r0, [r0, r3]
1005a57e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a580:	6800      	ldr	r0, [r0, #0]
1005a582:	ab02      	add	r3, sp, #8
1005a584:	9301      	str	r3, [sp, #4]
1005a586:	ab03      	add	r3, sp, #12
1005a588:	9300      	str	r3, [sp, #0]
1005a58a:	3024      	adds	r0, #36	@ 0x24
1005a58c:	2301      	movs	r3, #1
1005a58e:	f008 fb8b 	bl	10062ca8 <addr8_list_add>
1005a592:	bd8f      	pop	{r0, r1, r2, r3, r7, pc}

1005a594 <__arm_cp.23_0>:
1005a594:	20002470 	.word	0x20002470

1005a598 <llc_conn_list_reset>:
1005a598:	b580      	push	{r7, lr}
1005a59a:	4805      	ldr	r0, [pc, #20]	@ (1005a5b0 <__arm_cp.24_0>)
1005a59c:	6800      	ldr	r0, [r0, #0]
1005a59e:	219c      	movs	r1, #156	@ 0x9c
1005a5a0:	5840      	ldr	r0, [r0, r1]
1005a5a2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a5a4:	6800      	ldr	r0, [r0, #0]
1005a5a6:	3024      	adds	r0, #36	@ 0x24
1005a5a8:	f008 fbfd 	bl	10062da6 <addr8_list_clear>
1005a5ac:	bd80      	pop	{r7, pc}
1005a5ae:	46c0      	nop			@ (mov r8, r8)

1005a5b0 <__arm_cp.24_0>:
1005a5b0:	20002470 	.word	0x20002470

1005a5b4 <llc_conn_list_remove_address>:
1005a5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a5b6:	460a      	mov	r2, r1
1005a5b8:	4601      	mov	r1, r0
1005a5ba:	4807      	ldr	r0, [pc, #28]	@ (1005a5d8 <__arm_cp.25_0>)
1005a5bc:	6800      	ldr	r0, [r0, #0]
1005a5be:	239c      	movs	r3, #156	@ 0x9c
1005a5c0:	58c0      	ldr	r0, [r0, r3]
1005a5c2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a5c4:	6800      	ldr	r0, [r0, #0]
1005a5c6:	ab02      	add	r3, sp, #8
1005a5c8:	9301      	str	r3, [sp, #4]
1005a5ca:	ab03      	add	r3, sp, #12
1005a5cc:	9300      	str	r3, [sp, #0]
1005a5ce:	3024      	adds	r0, #36	@ 0x24
1005a5d0:	2301      	movs	r3, #1
1005a5d2:	f008 fbac 	bl	10062d2e <addr8_list_remove_by_addr>
1005a5d6:	bd8f      	pop	{r0, r1, r2, r3, r7, pc}

1005a5d8 <__arm_cp.25_0>:
1005a5d8:	20002470 	.word	0x20002470

1005a5dc <llc_conn_list_search_address>:
1005a5dc:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1005a5de:	460c      	mov	r4, r1
1005a5e0:	4605      	mov	r5, r0
1005a5e2:	f7ff fc9f 	bl	10059f24 <llc_conn_get_cntxt_p>
1005a5e6:	2136      	movs	r1, #54	@ 0x36
1005a5e8:	5c40      	ldrb	r0, [r0, r1]
1005a5ea:	2800      	cmp	r0, #0
1005a5ec:	d001      	beq.n	1005a5f2 <llc_conn_list_search_address+0x16>
1005a5ee:	2000      	movs	r0, #0
1005a5f0:	e011      	b.n	1005a616 <llc_conn_list_search_address+0x3a>
1005a5f2:	480a      	ldr	r0, [pc, #40]	@ (1005a61c <__arm_cp.26_0>)
1005a5f4:	6800      	ldr	r0, [r0, #0]
1005a5f6:	219c      	movs	r1, #156	@ 0x9c
1005a5f8:	5840      	ldr	r0, [r0, r1]
1005a5fa:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a5fc:	6801      	ldr	r1, [r0, #0]
1005a5fe:	6a48      	ldr	r0, [r1, #36]	@ 0x24
1005a600:	6a89      	ldr	r1, [r1, #40]	@ 0x28
1005a602:	aa03      	add	r2, sp, #12
1005a604:	2301      	movs	r3, #1
1005a606:	9300      	str	r3, [sp, #0]
1005a608:	9201      	str	r2, [sp, #4]
1005a60a:	22fe      	movs	r2, #254	@ 0xfe
1005a60c:	4395      	bics	r5, r2
1005a60e:	462a      	mov	r2, r5
1005a610:	4623      	mov	r3, r4
1005a612:	f008 fae5 	bl	10062be0 <addr8_list_search>
1005a616:	b004      	add	sp, #16
1005a618:	bdb0      	pop	{r4, r5, r7, pc}
1005a61a:	46c0      	nop			@ (mov r8, r8)

1005a61c <__arm_cp.26_0>:
1005a61c:	20002470 	.word	0x20002470

1005a620 <llc_conn_push_adv_set_terminated_event>:
1005a620:	b570      	push	{r4, r5, r6, lr}
1005a622:	460d      	mov	r5, r1
1005a624:	4604      	mov	r4, r0
1005a626:	481a      	ldr	r0, [pc, #104]	@ (1005a690 <__arm_cp.27_0>)
1005a628:	6800      	ldr	r0, [r0, #0]
1005a62a:	212c      	movs	r1, #44	@ 0x2c
1005a62c:	5c40      	ldrb	r0, [r0, r1]
1005a62e:	07c0      	lsls	r0, r0, #31
1005a630:	0ec1      	lsrs	r1, r0, #27
1005a632:	d101      	bne.n	1005a638 <llc_conn_push_adv_set_terminated_event+0x18>
1005a634:	2211      	movs	r2, #17
1005a636:	e00a      	b.n	1005a64e <llc_conn_push_adv_set_terminated_event+0x2e>
1005a638:	4816      	ldr	r0, [pc, #88]	@ (1005a694 <__arm_cp.27_1>)
1005a63a:	6800      	ldr	r0, [r0, #0]
1005a63c:	223d      	movs	r2, #61	@ 0x3d
1005a63e:	5c82      	ldrb	r2, [r0, r2]
1005a640:	0692      	lsls	r2, r2, #26
1005a642:	d524      	bpl.n	1005a68e <llc_conn_push_adv_set_terminated_event+0x6e>
1005a644:	303d      	adds	r0, #61	@ 0x3d
1005a646:	7ac0      	ldrb	r0, [r0, #11]
1005a648:	0780      	lsls	r0, r0, #30
1005a64a:	d520      	bpl.n	1005a68e <llc_conn_push_adv_set_terminated_event+0x6e>
1005a64c:	221f      	movs	r2, #31
1005a64e:	204e      	movs	r0, #78	@ 0x4e
1005a650:	43c0      	mvns	r0, r0
1005a652:	4041      	eors	r1, r0
1005a654:	4810      	ldr	r0, [pc, #64]	@ (1005a698 <__arm_cp.27_2>)
1005a656:	6800      	ldr	r0, [r0, #0]
1005a658:	6940      	ldr	r0, [r0, #20]
1005a65a:	b2ce      	uxtb	r6, r1
1005a65c:	2303      	movs	r3, #3
1005a65e:	4631      	mov	r1, r6
1005a660:	f7fa fd44 	bl	100550ec <aci_event_fifo_push_header>
1005a664:	2800      	cmp	r0, #0
1005a666:	d012      	beq.n	1005a68e <llc_conn_push_adv_set_terminated_event+0x6e>
1005a668:	4601      	mov	r1, r0
1005a66a:	7284      	strb	r4, [r0, #10]
1005a66c:	2000      	movs	r0, #0
1005a66e:	7308      	strb	r0, [r1, #12]
1005a670:	724d      	strb	r5, [r1, #9]
1005a672:	7208      	strb	r0, [r1, #8]
1005a674:	2012      	movs	r0, #18
1005a676:	71c8      	strb	r0, [r1, #7]
1005a678:	2006      	movs	r0, #6
1005a67a:	7188      	strb	r0, [r1, #6]
1005a67c:	203e      	movs	r0, #62	@ 0x3e
1005a67e:	7148      	strb	r0, [r1, #5]
1005a680:	2004      	movs	r0, #4
1005a682:	7108      	strb	r0, [r1, #4]
1005a684:	0a20      	lsrs	r0, r4, #8
1005a686:	72c8      	strb	r0, [r1, #11]
1005a688:	4630      	mov	r0, r6
1005a68a:	f7fa fdcc 	bl	10055226 <aci_event_fifo_push>
1005a68e:	bd70      	pop	{r4, r5, r6, pc}

1005a690 <__arm_cp.27_0>:
1005a690:	2000241c 	.word	0x2000241c

1005a694 <__arm_cp.27_1>:
1005a694:	20002470 	.word	0x20002470

1005a698 <__arm_cp.27_2>:
1005a698:	20002420 	.word	0x20002420

1005a69c <llc_conn_push_connection_complete_event>:
1005a69c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005a69e:	b08d      	sub	sp, #52	@ 0x34
1005a6a0:	4604      	mov	r4, r0
1005a6a2:	4895      	ldr	r0, [pc, #596]	@ (1005a8f8 <__arm_cp.28_0>)
1005a6a4:	6800      	ldr	r0, [r0, #0]
1005a6a6:	212c      	movs	r1, #44	@ 0x2c
1005a6a8:	5c40      	ldrb	r0, [r0, r1]
1005a6aa:	07c0      	lsls	r0, r0, #31
1005a6ac:	0ec5      	lsrs	r5, r0, #27
1005a6ae:	206f      	movs	r0, #111	@ 0x6f
1005a6b0:	43c6      	mvns	r6, r0
1005a6b2:	406e      	eors	r6, r5
1005a6b4:	f001 f9ba 	bl	1005ba2c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005a6b8:	4990      	ldr	r1, [pc, #576]	@ (1005a8fc <__arm_cp.28_1>)
1005a6ba:	6809      	ldr	r1, [r1, #0]
1005a6bc:	223d      	movs	r2, #61	@ 0x3d
1005a6be:	5c8b      	ldrb	r3, [r1, r2]
1005a6c0:	2220      	movs	r2, #32
1005a6c2:	4013      	ands	r3, r2
1005a6c4:	313d      	adds	r1, #61	@ 0x3d
1005a6c6:	2800      	cmp	r0, #0
1005a6c8:	d066      	beq.n	1005a798 <llc_conn_push_connection_complete_event+0xfc>
1005a6ca:	2b00      	cmp	r3, #0
1005a6cc:	d100      	bne.n	1005a6d0 <llc_conn_push_connection_complete_event+0x34>
1005a6ce:	e110      	b.n	1005a8f2 <llc_conn_push_connection_complete_event+0x256>
1005a6d0:	7b88      	ldrb	r0, [r1, #14]
1005a6d2:	07c0      	lsls	r0, r0, #31
1005a6d4:	d063      	beq.n	1005a79e <llc_conn_push_connection_complete_event+0x102>
1005a6d6:	2d00      	cmp	r5, #0
1005a6d8:	d100      	bne.n	1005a6dc <llc_conn_push_connection_complete_event+0x40>
1005a6da:	2212      	movs	r2, #18
1005a6dc:	8aa0      	ldrh	r0, [r4, #20]
1005a6de:	900c      	str	r0, [sp, #48]	@ 0x30
1005a6e0:	7da7      	ldrb	r7, [r4, #22]
1005a6e2:	7de0      	ldrb	r0, [r4, #23]
1005a6e4:	9008      	str	r0, [sp, #32]
1005a6e6:	8a60      	ldrh	r0, [r4, #18]
1005a6e8:	900b      	str	r0, [sp, #44]	@ 0x2c
1005a6ea:	8a20      	ldrh	r0, [r4, #16]
1005a6ec:	9009      	str	r0, [sp, #36]	@ 0x24
1005a6ee:	89a0      	ldrh	r0, [r4, #12]
1005a6f0:	900a      	str	r0, [sp, #40]	@ 0x28
1005a6f2:	6820      	ldr	r0, [r4, #0]
1005a6f4:	9005      	str	r0, [sp, #20]
1005a6f6:	6860      	ldr	r0, [r4, #4]
1005a6f8:	9007      	str	r0, [sp, #28]
1005a6fa:	68a0      	ldr	r0, [r4, #8]
1005a6fc:	9006      	str	r0, [sp, #24]
1005a6fe:	7e20      	ldrb	r0, [r4, #24]
1005a700:	9003      	str	r0, [sp, #12]
1005a702:	7e60      	ldrb	r0, [r4, #25]
1005a704:	9004      	str	r0, [sp, #16]
1005a706:	89e5      	ldrh	r5, [r4, #14]
1005a708:	7ea0      	ldrb	r0, [r4, #26]
1005a70a:	9002      	str	r0, [sp, #8]
1005a70c:	487c      	ldr	r0, [pc, #496]	@ (1005a900 <__arm_cp.28_2>)
1005a70e:	6800      	ldr	r0, [r0, #0]
1005a710:	6900      	ldr	r0, [r0, #16]
1005a712:	b2f1      	uxtb	r1, r6
1005a714:	230a      	movs	r3, #10
1005a716:	f7fa fce9 	bl	100550ec <aci_event_fifo_push_header>
1005a71a:	2800      	cmp	r0, #0
1005a71c:	d100      	bne.n	1005a720 <llc_conn_push_connection_complete_event+0x84>
1005a71e:	e0e8      	b.n	1005a8f2 <llc_conn_push_connection_complete_event+0x256>
1005a720:	4604      	mov	r4, r0
1005a722:	9701      	str	r7, [sp, #4]
1005a724:	4607      	mov	r7, r0
1005a726:	371f      	adds	r7, #31
1005a728:	7245      	strb	r5, [r0, #9]
1005a72a:	9803      	ldr	r0, [sp, #12]
1005a72c:	7320      	strb	r0, [r4, #12]
1005a72e:	9804      	ldr	r0, [sp, #16]
1005a730:	72e0      	strb	r0, [r4, #11]
1005a732:	9802      	ldr	r0, [sp, #8]
1005a734:	7220      	strb	r0, [r4, #8]
1005a736:	0a28      	lsrs	r0, r5, #8
1005a738:	72a0      	strb	r0, [r4, #10]
1005a73a:	4620      	mov	r0, r4
1005a73c:	300d      	adds	r0, #13
1005a73e:	2506      	movs	r5, #6
1005a740:	9905      	ldr	r1, [sp, #20]
1005a742:	462a      	mov	r2, r5
1005a744:	4b6f      	ldr	r3, [pc, #444]	@ (1005a904 <__arm_cp.28_3>)
1005a746:	4798      	blx	r3
1005a748:	4620      	mov	r0, r4
1005a74a:	3013      	adds	r0, #19
1005a74c:	9906      	ldr	r1, [sp, #24]
1005a74e:	462a      	mov	r2, r5
1005a750:	4b6c      	ldr	r3, [pc, #432]	@ (1005a904 <__arm_cp.28_3>)
1005a752:	4798      	blx	r3
1005a754:	4b6b      	ldr	r3, [pc, #428]	@ (1005a904 <__arm_cp.28_3>)
1005a756:	4620      	mov	r0, r4
1005a758:	3019      	adds	r0, #25
1005a75a:	9907      	ldr	r1, [sp, #28]
1005a75c:	462a      	mov	r2, r5
1005a75e:	4798      	blx	r3
1005a760:	2021      	movs	r0, #33	@ 0x21
1005a762:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005a764:	5421      	strb	r1, [r4, r0]
1005a766:	2025      	movs	r0, #37	@ 0x25
1005a768:	9a08      	ldr	r2, [sp, #32]
1005a76a:	5422      	strb	r2, [r4, r0]
1005a76c:	4620      	mov	r0, r4
1005a76e:	3021      	adds	r0, #33	@ 0x21
1005a770:	0a09      	lsrs	r1, r1, #8
1005a772:	7041      	strb	r1, [r0, #1]
1005a774:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005a776:	0a08      	lsrs	r0, r1, #8
1005a778:	7078      	strb	r0, [r7, #1]
1005a77a:	7039      	strb	r1, [r7, #0]
1005a77c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005a77e:	0a08      	lsrs	r0, r1, #8
1005a780:	7178      	strb	r0, [r7, #5]
1005a782:	7139      	strb	r1, [r7, #4]
1005a784:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005a786:	0a08      	lsrs	r0, r1, #8
1005a788:	7278      	strb	r0, [r7, #9]
1005a78a:	7239      	strb	r1, [r7, #8]
1005a78c:	9801      	ldr	r0, [sp, #4]
1005a78e:	71f8      	strb	r0, [r7, #7]
1005a790:	1d20      	adds	r0, r4, #4
1005a792:	2129      	movs	r1, #41	@ 0x29
1005a794:	2222      	movs	r2, #34	@ 0x22
1005a796:	e0a2      	b.n	1005a8de <llc_conn_push_connection_complete_event+0x242>
1005a798:	2b00      	cmp	r3, #0
1005a79a:	d100      	bne.n	1005a79e <llc_conn_push_connection_complete_event+0x102>
1005a79c:	e0a9      	b.n	1005a8f2 <llc_conn_push_connection_complete_event+0x256>
1005a79e:	7a88      	ldrb	r0, [r1, #10]
1005a7a0:	0780      	lsls	r0, r0, #30
1005a7a2:	d445      	bmi.n	1005a830 <llc_conn_push_connection_complete_event+0x194>
1005a7a4:	7a48      	ldrb	r0, [r1, #9]
1005a7a6:	07c0      	lsls	r0, r0, #31
1005a7a8:	d100      	bne.n	1005a7ac <llc_conn_push_connection_complete_event+0x110>
1005a7aa:	e0a2      	b.n	1005a8f2 <llc_conn_push_connection_complete_event+0x256>
1005a7ac:	2008      	movs	r0, #8
1005a7ae:	4305      	orrs	r5, r0
1005a7b0:	7de0      	ldrb	r0, [r4, #23]
1005a7b2:	900c      	str	r0, [sp, #48]	@ 0x30
1005a7b4:	8a60      	ldrh	r0, [r4, #18]
1005a7b6:	900b      	str	r0, [sp, #44]	@ 0x2c
1005a7b8:	8a20      	ldrh	r0, [r4, #16]
1005a7ba:	9009      	str	r0, [sp, #36]	@ 0x24
1005a7bc:	89a0      	ldrh	r0, [r4, #12]
1005a7be:	900a      	str	r0, [sp, #40]	@ 0x28
1005a7c0:	6820      	ldr	r0, [r4, #0]
1005a7c2:	9008      	str	r0, [sp, #32]
1005a7c4:	7e20      	ldrb	r0, [r4, #24]
1005a7c6:	9006      	str	r0, [sp, #24]
1005a7c8:	7e60      	ldrb	r0, [r4, #25]
1005a7ca:	9007      	str	r0, [sp, #28]
1005a7cc:	89e7      	ldrh	r7, [r4, #14]
1005a7ce:	7ea0      	ldrb	r0, [r4, #26]
1005a7d0:	9005      	str	r0, [sp, #20]
1005a7d2:	484b      	ldr	r0, [pc, #300]	@ (1005a900 <__arm_cp.28_2>)
1005a7d4:	6800      	ldr	r0, [r0, #0]
1005a7d6:	6900      	ldr	r0, [r0, #16]
1005a7d8:	b2f1      	uxtb	r1, r6
1005a7da:	2306      	movs	r3, #6
1005a7dc:	462a      	mov	r2, r5
1005a7de:	f7fa fc85 	bl	100550ec <aci_event_fifo_push_header>
1005a7e2:	2800      	cmp	r0, #0
1005a7e4:	d100      	bne.n	1005a7e8 <llc_conn_push_connection_complete_event+0x14c>
1005a7e6:	e084      	b.n	1005a8f2 <llc_conn_push_connection_complete_event+0x256>
1005a7e8:	4604      	mov	r4, r0
1005a7ea:	4605      	mov	r5, r0
1005a7ec:	3513      	adds	r5, #19
1005a7ee:	7247      	strb	r7, [r0, #9]
1005a7f0:	9806      	ldr	r0, [sp, #24]
1005a7f2:	7320      	strb	r0, [r4, #12]
1005a7f4:	9807      	ldr	r0, [sp, #28]
1005a7f6:	72e0      	strb	r0, [r4, #11]
1005a7f8:	9805      	ldr	r0, [sp, #20]
1005a7fa:	7220      	strb	r0, [r4, #8]
1005a7fc:	0a38      	lsrs	r0, r7, #8
1005a7fe:	72a0      	strb	r0, [r4, #10]
1005a800:	4620      	mov	r0, r4
1005a802:	300d      	adds	r0, #13
1005a804:	2206      	movs	r2, #6
1005a806:	9908      	ldr	r1, [sp, #32]
1005a808:	f7f7 ff24 	bl	10052654 <BLEPLAT_MemCpy>
1005a80c:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005a80e:	0a08      	lsrs	r0, r1, #8
1005a810:	75a0      	strb	r0, [r4, #22]
1005a812:	7561      	strb	r1, [r4, #21]
1005a814:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005a816:	0a08      	lsrs	r0, r1, #8
1005a818:	7068      	strb	r0, [r5, #1]
1005a81a:	7029      	strb	r1, [r5, #0]
1005a81c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005a81e:	0a08      	lsrs	r0, r1, #8
1005a820:	7168      	strb	r0, [r5, #5]
1005a822:	7129      	strb	r1, [r5, #4]
1005a824:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005a826:	7660      	strb	r0, [r4, #25]
1005a828:	1d20      	adds	r0, r4, #4
1005a82a:	2101      	movs	r1, #1
1005a82c:	2213      	movs	r2, #19
1005a82e:	e056      	b.n	1005a8de <llc_conn_push_connection_complete_event+0x242>
1005a830:	2d00      	cmp	r5, #0
1005a832:	d001      	beq.n	1005a838 <llc_conn_push_connection_complete_event+0x19c>
1005a834:	221c      	movs	r2, #28
1005a836:	e000      	b.n	1005a83a <llc_conn_push_connection_complete_event+0x19e>
1005a838:	220d      	movs	r2, #13
1005a83a:	7de0      	ldrb	r0, [r4, #23]
1005a83c:	900a      	str	r0, [sp, #40]	@ 0x28
1005a83e:	8a67      	ldrh	r7, [r4, #18]
1005a840:	8a20      	ldrh	r0, [r4, #16]
1005a842:	900b      	str	r0, [sp, #44]	@ 0x2c
1005a844:	89a0      	ldrh	r0, [r4, #12]
1005a846:	900c      	str	r0, [sp, #48]	@ 0x30
1005a848:	6820      	ldr	r0, [r4, #0]
1005a84a:	9007      	str	r0, [sp, #28]
1005a84c:	6860      	ldr	r0, [r4, #4]
1005a84e:	9009      	str	r0, [sp, #36]	@ 0x24
1005a850:	68a0      	ldr	r0, [r4, #8]
1005a852:	9008      	str	r0, [sp, #32]
1005a854:	7e20      	ldrb	r0, [r4, #24]
1005a856:	9005      	str	r0, [sp, #20]
1005a858:	7e60      	ldrb	r0, [r4, #25]
1005a85a:	9006      	str	r0, [sp, #24]
1005a85c:	89e5      	ldrh	r5, [r4, #14]
1005a85e:	7ea0      	ldrb	r0, [r4, #26]
1005a860:	9004      	str	r0, [sp, #16]
1005a862:	4827      	ldr	r0, [pc, #156]	@ (1005a900 <__arm_cp.28_2>)
1005a864:	6800      	ldr	r0, [r0, #0]
1005a866:	6900      	ldr	r0, [r0, #16]
1005a868:	b2f1      	uxtb	r1, r6
1005a86a:	2309      	movs	r3, #9
1005a86c:	f7fa fc3e 	bl	100550ec <aci_event_fifo_push_header>
1005a870:	2800      	cmp	r0, #0
1005a872:	d03e      	beq.n	1005a8f2 <llc_conn_push_connection_complete_event+0x256>
1005a874:	4604      	mov	r4, r0
1005a876:	9703      	str	r7, [sp, #12]
1005a878:	4607      	mov	r7, r0
1005a87a:	371f      	adds	r7, #31
1005a87c:	7245      	strb	r5, [r0, #9]
1005a87e:	9805      	ldr	r0, [sp, #20]
1005a880:	7320      	strb	r0, [r4, #12]
1005a882:	9806      	ldr	r0, [sp, #24]
1005a884:	72e0      	strb	r0, [r4, #11]
1005a886:	9804      	ldr	r0, [sp, #16]
1005a888:	7220      	strb	r0, [r4, #8]
1005a88a:	0a28      	lsrs	r0, r5, #8
1005a88c:	72a0      	strb	r0, [r4, #10]
1005a88e:	4620      	mov	r0, r4
1005a890:	300d      	adds	r0, #13
1005a892:	2506      	movs	r5, #6
1005a894:	9907      	ldr	r1, [sp, #28]
1005a896:	462a      	mov	r2, r5
1005a898:	4b1a      	ldr	r3, [pc, #104]	@ (1005a904 <__arm_cp.28_3>)
1005a89a:	4798      	blx	r3
1005a89c:	4620      	mov	r0, r4
1005a89e:	3013      	adds	r0, #19
1005a8a0:	9908      	ldr	r1, [sp, #32]
1005a8a2:	462a      	mov	r2, r5
1005a8a4:	4b17      	ldr	r3, [pc, #92]	@ (1005a904 <__arm_cp.28_3>)
1005a8a6:	4798      	blx	r3
1005a8a8:	4b16      	ldr	r3, [pc, #88]	@ (1005a904 <__arm_cp.28_3>)
1005a8aa:	4620      	mov	r0, r4
1005a8ac:	3019      	adds	r0, #25
1005a8ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005a8b0:	462a      	mov	r2, r5
1005a8b2:	4798      	blx	r3
1005a8b4:	2021      	movs	r0, #33	@ 0x21
1005a8b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005a8b8:	5422      	strb	r2, [r4, r0]
1005a8ba:	2025      	movs	r0, #37	@ 0x25
1005a8bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005a8be:	5421      	strb	r1, [r4, r0]
1005a8c0:	1d20      	adds	r0, r4, #4
1005a8c2:	4621      	mov	r1, r4
1005a8c4:	3121      	adds	r1, #33	@ 0x21
1005a8c6:	0a12      	lsrs	r2, r2, #8
1005a8c8:	704a      	strb	r2, [r1, #1]
1005a8ca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1005a8cc:	0a11      	lsrs	r1, r2, #8
1005a8ce:	7079      	strb	r1, [r7, #1]
1005a8d0:	703a      	strb	r2, [r7, #0]
1005a8d2:	9a03      	ldr	r2, [sp, #12]
1005a8d4:	0a11      	lsrs	r1, r2, #8
1005a8d6:	7179      	strb	r1, [r7, #5]
1005a8d8:	713a      	strb	r2, [r7, #4]
1005a8da:	210a      	movs	r1, #10
1005a8dc:	221f      	movs	r2, #31
1005a8de:	2304      	movs	r3, #4
1005a8e0:	7123      	strb	r3, [r4, #4]
1005a8e2:	233e      	movs	r3, #62	@ 0x3e
1005a8e4:	7043      	strb	r3, [r0, #1]
1005a8e6:	71e1      	strb	r1, [r4, #7]
1005a8e8:	71a2      	strb	r2, [r4, #6]
1005a8ea:	b2f0      	uxtb	r0, r6
1005a8ec:	4621      	mov	r1, r4
1005a8ee:	f7fa fc9a 	bl	10055226 <aci_event_fifo_push>
1005a8f2:	b00d      	add	sp, #52	@ 0x34
1005a8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005a8f6:	46c0      	nop			@ (mov r8, r8)

1005a8f8 <__arm_cp.28_0>:
1005a8f8:	2000241c 	.word	0x2000241c

1005a8fc <__arm_cp.28_1>:
1005a8fc:	20002470 	.word	0x20002470

1005a900 <__arm_cp.28_2>:
1005a900:	20002420 	.word	0x20002420

1005a904 <__arm_cp.28_3>:
1005a904:	10052655 	.word	0x10052655

1005a908 <llc_conn_push_csa_event>:
1005a908:	b5b0      	push	{r4, r5, r7, lr}
1005a90a:	460d      	mov	r5, r1
1005a90c:	4604      	mov	r4, r0
1005a90e:	4812      	ldr	r0, [pc, #72]	@ (1005a958 <__arm_cp.29_0>)
1005a910:	6800      	ldr	r0, [r0, #0]
1005a912:	213d      	movs	r1, #61	@ 0x3d
1005a914:	5c41      	ldrb	r1, [r0, r1]
1005a916:	0689      	lsls	r1, r1, #26
1005a918:	d51c      	bpl.n	1005a954 <llc_conn_push_csa_event+0x4c>
1005a91a:	303d      	adds	r0, #61	@ 0x3d
1005a91c:	7ac0      	ldrb	r0, [r0, #11]
1005a91e:	0700      	lsls	r0, r0, #28
1005a920:	d518      	bpl.n	1005a954 <llc_conn_push_csa_event+0x4c>
1005a922:	480e      	ldr	r0, [pc, #56]	@ (1005a95c <__arm_cp.29_1>)
1005a924:	6800      	ldr	r0, [r0, #0]
1005a926:	6940      	ldr	r0, [r0, #20]
1005a928:	21a1      	movs	r1, #161	@ 0xa1
1005a92a:	222c      	movs	r2, #44	@ 0x2c
1005a92c:	2302      	movs	r3, #2
1005a92e:	f7fa fbdd 	bl	100550ec <aci_event_fifo_push_header>
1005a932:	2800      	cmp	r0, #0
1005a934:	d00e      	beq.n	1005a954 <llc_conn_push_csa_event+0x4c>
1005a936:	4601      	mov	r1, r0
1005a938:	7204      	strb	r4, [r0, #8]
1005a93a:	7285      	strb	r5, [r0, #10]
1005a93c:	2014      	movs	r0, #20
1005a93e:	71c8      	strb	r0, [r1, #7]
1005a940:	2004      	movs	r0, #4
1005a942:	7188      	strb	r0, [r1, #6]
1005a944:	223e      	movs	r2, #62	@ 0x3e
1005a946:	714a      	strb	r2, [r1, #5]
1005a948:	7108      	strb	r0, [r1, #4]
1005a94a:	0a20      	lsrs	r0, r4, #8
1005a94c:	7248      	strb	r0, [r1, #9]
1005a94e:	20a1      	movs	r0, #161	@ 0xa1
1005a950:	f7fa fc69 	bl	10055226 <aci_event_fifo_push>
1005a954:	bdb0      	pop	{r4, r5, r7, pc}
1005a956:	46c0      	nop			@ (mov r8, r8)

1005a958 <__arm_cp.29_0>:
1005a958:	20002470 	.word	0x20002470

1005a95c <__arm_cp.29_1>:
1005a95c:	20002420 	.word	0x20002420

1005a960 <llc_conn_set_chmap_params>:
1005a960:	2398      	movs	r3, #152	@ 0x98
1005a962:	52c2      	strh	r2, [r0, r3]
1005a964:	3098      	adds	r0, #152	@ 0x98
1005a966:	6341      	str	r1, [r0, #52]	@ 0x34
1005a968:	8841      	ldrh	r1, [r0, #2]
1005a96a:	2220      	movs	r2, #32
1005a96c:	430a      	orrs	r2, r1
1005a96e:	8042      	strh	r2, [r0, #2]
1005a970:	4770      	bx	lr

1005a972 <llc_conn_set_conn_update_params>:
1005a972:	2398      	movs	r3, #152	@ 0x98
1005a974:	52c2      	strh	r2, [r0, r3]
1005a976:	3098      	adds	r0, #152	@ 0x98
1005a978:	6301      	str	r1, [r0, #48]	@ 0x30
1005a97a:	8841      	ldrh	r1, [r0, #2]
1005a97c:	2208      	movs	r2, #8
1005a97e:	430a      	orrs	r2, r1
1005a980:	8042      	strh	r2, [r0, #2]
1005a982:	4770      	bx	lr

1005a984 <llc_conn_set_rx_acl_blocked>:
1005a984:	2194      	movs	r1, #148	@ 0x94
1005a986:	5840      	ldr	r0, [r0, r1]
1005a988:	8801      	ldrh	r1, [r0, #0]
1005a98a:	2201      	movs	r2, #1
1005a98c:	0212      	lsls	r2, r2, #8
1005a98e:	430a      	orrs	r2, r1
1005a990:	8002      	strh	r2, [r0, #0]
1005a992:	4770      	bx	lr

1005a994 <llc_conn_set_start_enc>:
1005a994:	2294      	movs	r2, #148	@ 0x94
1005a996:	5880      	ldr	r0, [r0, r2]
1005a998:	2900      	cmp	r1, #0
1005a99a:	d007      	beq.n	1005a9ac <llc_conn_set_start_enc+0x18>
1005a99c:	2901      	cmp	r1, #1
1005a99e:	d003      	beq.n	1005a9a8 <llc_conn_set_start_enc+0x14>
1005a9a0:	8801      	ldrh	r1, [r0, #0]
1005a9a2:	2210      	movs	r2, #16
1005a9a4:	430a      	orrs	r2, r1
1005a9a6:	8002      	strh	r2, [r0, #0]
1005a9a8:	2108      	movs	r1, #8
1005a9aa:	e000      	b.n	1005a9ae <llc_conn_set_start_enc+0x1a>
1005a9ac:	2110      	movs	r1, #16
1005a9ae:	8802      	ldrh	r2, [r0, #0]
1005a9b0:	430a      	orrs	r2, r1
1005a9b2:	8002      	strh	r2, [r0, #0]
1005a9b4:	4770      	bx	lr

1005a9b6 <llc_conn_set_stop_enc>:
1005a9b6:	2294      	movs	r2, #148	@ 0x94
1005a9b8:	5880      	ldr	r0, [r0, r2]
1005a9ba:	2900      	cmp	r1, #0
1005a9bc:	d007      	beq.n	1005a9ce <llc_conn_set_stop_enc+0x18>
1005a9be:	2901      	cmp	r1, #1
1005a9c0:	d003      	beq.n	1005a9ca <llc_conn_set_stop_enc+0x14>
1005a9c2:	8801      	ldrh	r1, [r0, #0]
1005a9c4:	2240      	movs	r2, #64	@ 0x40
1005a9c6:	430a      	orrs	r2, r1
1005a9c8:	8002      	strh	r2, [r0, #0]
1005a9ca:	2120      	movs	r1, #32
1005a9cc:	e000      	b.n	1005a9d0 <llc_conn_set_stop_enc+0x1a>
1005a9ce:	2140      	movs	r1, #64	@ 0x40
1005a9d0:	8802      	ldrh	r2, [r0, #0]
1005a9d2:	430a      	orrs	r2, r1
1005a9d4:	8002      	strh	r2, [r0, #0]
1005a9d6:	4770      	bx	lr

1005a9d8 <llc_conn_set_tx_acl_blocked>:
1005a9d8:	2194      	movs	r1, #148	@ 0x94
1005a9da:	5840      	ldr	r0, [r0, r1]
1005a9dc:	8801      	ldrh	r1, [r0, #0]
1005a9de:	2280      	movs	r2, #128	@ 0x80
1005a9e0:	430a      	orrs	r2, r1
1005a9e2:	8002      	strh	r2, [r0, #0]
1005a9e4:	4770      	bx	lr

1005a9e6 <llc_conn_set_tx_ctrl_pdu_has_instant>:
1005a9e6:	2194      	movs	r1, #148	@ 0x94
1005a9e8:	5840      	ldr	r0, [r0, r1]
1005a9ea:	8801      	ldrh	r1, [r0, #0]
1005a9ec:	2204      	movs	r2, #4
1005a9ee:	430a      	orrs	r2, r1
1005a9f0:	8002      	strh	r2, [r0, #0]
1005a9f2:	4770      	bx	lr

1005a9f4 <llc_conn_set_tx_ctrl_pdu_state>:
1005a9f4:	b580      	push	{r7, lr}
1005a9f6:	2294      	movs	r2, #148	@ 0x94
1005a9f8:	5880      	ldr	r0, [r0, r2]
1005a9fa:	8802      	ldrh	r2, [r0, #0]
1005a9fc:	2303      	movs	r3, #3
1005a9fe:	439a      	bics	r2, r3
1005aa00:	8002      	strh	r2, [r0, #0]
1005aa02:	4019      	ands	r1, r3
1005aa04:	8802      	ldrh	r2, [r0, #0]
1005aa06:	430a      	orrs	r2, r1
1005aa08:	8002      	strh	r2, [r0, #0]
1005aa0a:	2015      	movs	r0, #21
1005aa0c:	f007 feb8 	bl	10062780 <tsk_notify_idx>
1005aa10:	f7f7 f839 	bl	10051a86 <BLE_STACK_ProcessRequest>
1005aa14:	bd80      	pop	{r7, pc}

1005aa16 <llc_conn_calc_skip_ucfg_weak>:
1005aa16:	4610      	mov	r0, r2
1005aa18:	4770      	bx	lr

1005aa1a <llc_conn_multi_link_connection>:
1005aa1a:	b5b0      	push	{r4, r5, r7, lr}
1005aa1c:	4604      	mov	r4, r0
1005aa1e:	2536      	movs	r5, #54	@ 0x36
1005aa20:	f7ff fa80 	bl	10059f24 <llc_conn_get_cntxt_p>
1005aa24:	5544      	strb	r4, [r0, r5]
1005aa26:	2000      	movs	r0, #0
1005aa28:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005aa2c <llc_conn_check_connect_request_params>:
1005aa2c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005aa2e:	b087      	sub	sp, #28
1005aa30:	4604      	mov	r4, r0
1005aa32:	7e00      	ldrb	r0, [r0, #24]
1005aa34:	7e61      	ldrb	r1, [r4, #25]
1005aa36:	0209      	lsls	r1, r1, #8
1005aa38:	180e      	adds	r6, r1, r0
1005aa3a:	1e72      	subs	r2, r6, #1
1005aa3c:	2a08      	cmp	r2, #8
1005aa3e:	d300      	bcc.n	1005aa42 <llc_conn_check_connect_request_params+0x16>
1005aa40:	2208      	movs	r2, #8
1005aa42:	7ea0      	ldrb	r0, [r4, #26]
1005aa44:	9004      	str	r0, [sp, #16]
1005aa46:	7ee0      	ldrb	r0, [r4, #27]
1005aa48:	9003      	str	r0, [sp, #12]
1005aa4a:	7d60      	ldrb	r0, [r4, #21]
1005aa4c:	2101      	movs	r1, #1
1005aa4e:	4f27      	ldr	r7, [pc, #156]	@ (1005aaec <__arm_cp.1_0>)
1005aa50:	9101      	str	r1, [sp, #4]
1005aa52:	47b8      	blx	r7
1005aa54:	4605      	mov	r5, r0
1005aa56:	7da0      	ldrb	r0, [r4, #22]
1005aa58:	7de1      	ldrb	r1, [r4, #23]
1005aa5a:	0209      	lsls	r1, r1, #8
1005aa5c:	1808      	adds	r0, r1, r0
1005aa5e:	2100      	movs	r1, #0
1005aa60:	9106      	str	r1, [sp, #24]
1005aa62:	4632      	mov	r2, r6
1005aa64:	47b8      	blx	r7
1005aa66:	4633      	mov	r3, r6
1005aa68:	9602      	str	r6, [sp, #8]
1005aa6a:	4606      	mov	r6, r0
1005aa6c:	432e      	orrs	r6, r5
1005aa6e:	2019      	movs	r0, #25
1005aa70:	01c2      	lsls	r2, r0, #7
1005aa72:	2106      	movs	r1, #6
1005aa74:	4618      	mov	r0, r3
1005aa76:	9205      	str	r2, [sp, #20]
1005aa78:	47b8      	blx	r7
1005aa7a:	463b      	mov	r3, r7
1005aa7c:	4605      	mov	r5, r0
1005aa7e:	4335      	orrs	r5, r6
1005aa80:	9803      	ldr	r0, [sp, #12]
1005aa82:	0200      	lsls	r0, r0, #8
1005aa84:	9904      	ldr	r1, [sp, #16]
1005aa86:	1847      	adds	r7, r0, r1
1005aa88:	22ff      	movs	r2, #255	@ 0xff
1005aa8a:	32f4      	adds	r2, #244	@ 0xf4
1005aa8c:	4638      	mov	r0, r7
1005aa8e:	9906      	ldr	r1, [sp, #24]
1005aa90:	4798      	blx	r3
1005aa92:	4606      	mov	r6, r0
1005aa94:	432e      	orrs	r6, r5
1005aa96:	1c78      	adds	r0, r7, #1
1005aa98:	9902      	ldr	r1, [sp, #8]
1005aa9a:	4348      	muls	r0, r1
1005aa9c:	0880      	lsrs	r0, r0, #2
1005aa9e:	b281      	uxth	r1, r0
1005aaa0:	290a      	cmp	r1, #10
1005aaa2:	d800      	bhi.n	1005aaa6 <llc_conn_check_connect_request_params+0x7a>
1005aaa4:	210a      	movs	r1, #10
1005aaa6:	7f20      	ldrb	r0, [r4, #28]
1005aaa8:	7f62      	ldrb	r2, [r4, #29]
1005aaaa:	0212      	lsls	r2, r2, #8
1005aaac:	1810      	adds	r0, r2, r0
1005aaae:	9a05      	ldr	r2, [sp, #20]
1005aab0:	4d0e      	ldr	r5, [pc, #56]	@ (1005aaec <__arm_cp.1_0>)
1005aab2:	47a8      	blx	r5
1005aab4:	4306      	orrs	r6, r0
1005aab6:	2023      	movs	r0, #35	@ 0x23
1005aab8:	5c21      	ldrb	r1, [r4, r0]
1005aaba:	201f      	movs	r0, #31
1005aabc:	4008      	ands	r0, r1
1005aabe:	2105      	movs	r1, #5
1005aac0:	2210      	movs	r2, #16
1005aac2:	47a8      	blx	r5
1005aac4:	4330      	orrs	r0, r6
1005aac6:	d001      	beq.n	1005aacc <llc_conn_check_connect_request_params+0xa0>
1005aac8:	9806      	ldr	r0, [sp, #24]
1005aaca:	e00c      	b.n	1005aae6 <llc_conn_check_connect_request_params+0xba>
1005aacc:	4620      	mov	r0, r4
1005aace:	3022      	adds	r0, #34	@ 0x22
1005aad0:	7800      	ldrb	r0, [r0, #0]
1005aad2:	06c0      	lsls	r0, r0, #27
1005aad4:	d106      	bne.n	1005aae4 <llc_conn_check_connect_request_params+0xb8>
1005aad6:	201e      	movs	r0, #30
1005aad8:	2822      	cmp	r0, #34	@ 0x22
1005aada:	d0f5      	beq.n	1005aac8 <llc_conn_check_connect_request_params+0x9c>
1005aadc:	5c21      	ldrb	r1, [r4, r0]
1005aade:	1c40      	adds	r0, r0, #1
1005aae0:	2900      	cmp	r1, #0
1005aae2:	d0f9      	beq.n	1005aad8 <llc_conn_check_connect_request_params+0xac>
1005aae4:	9801      	ldr	r0, [sp, #4]
1005aae6:	b007      	add	sp, #28
1005aae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005aaea:	46c0      	nop			@ (mov r8, r8)

1005aaec <__arm_cp.1_0>:
1005aaec:	1005fe5d 	.word	0x1005fe5d

1005aaf0 <llc_conn_check_ctrl_proc_rsp_timer>:
1005aaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005aaf2:	460d      	mov	r5, r1
1005aaf4:	4604      	mov	r4, r0
1005aaf6:	2030      	movs	r0, #48	@ 0x30
1005aaf8:	5c20      	ldrb	r0, [r4, r0]
1005aafa:	2101      	movs	r1, #1
1005aafc:	f001 f871 	bl	1005bbe2 <LL_cpe_get_active_status>
1005ab00:	4627      	mov	r7, r4
1005ab02:	3730      	adds	r7, #48	@ 0x30
1005ab04:	2801      	cmp	r0, #1
1005ab06:	d10e      	bne.n	1005ab26 <llc_conn_check_ctrl_proc_rsp_timer+0x36>
1005ab08:	7838      	ldrb	r0, [r7, #0]
1005ab0a:	2101      	movs	r1, #1
1005ab0c:	f001 fe8a 	bl	1005c824 <LL_cpe_conn_exception_opcode_from_sm>
1005ab10:	2800      	cmp	r0, #0
1005ab12:	d108      	bne.n	1005ab26 <llc_conn_check_ctrl_proc_rsp_timer+0x36>
1005ab14:	6f20      	ldr	r0, [r4, #112]	@ 0x70
1005ab16:	1e41      	subs	r1, r0, #1
1005ab18:	d41d      	bmi.n	1005ab56 <llc_conn_check_ctrl_proc_rsp_timer+0x66>
1005ab1a:	217d      	movs	r1, #125	@ 0x7d
1005ab1c:	0449      	lsls	r1, r1, #17
1005ab1e:	4288      	cmp	r0, r1
1005ab20:	d800      	bhi.n	1005ab24 <llc_conn_check_ctrl_proc_rsp_timer+0x34>
1005ab22:	1b41      	subs	r1, r0, r5
1005ab24:	6721      	str	r1, [r4, #112]	@ 0x70
1005ab26:	7838      	ldrb	r0, [r7, #0]
1005ab28:	2600      	movs	r6, #0
1005ab2a:	4631      	mov	r1, r6
1005ab2c:	f001 f859 	bl	1005bbe2 <LL_cpe_get_active_status>
1005ab30:	2801      	cmp	r0, #1
1005ab32:	d111      	bne.n	1005ab58 <llc_conn_check_ctrl_proc_rsp_timer+0x68>
1005ab34:	7838      	ldrb	r0, [r7, #0]
1005ab36:	2600      	movs	r6, #0
1005ab38:	4631      	mov	r1, r6
1005ab3a:	f001 fe73 	bl	1005c824 <LL_cpe_conn_exception_opcode_from_sm>
1005ab3e:	2800      	cmp	r0, #0
1005ab40:	d10a      	bne.n	1005ab58 <llc_conn_check_ctrl_proc_rsp_timer+0x68>
1005ab42:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
1005ab44:	1e41      	subs	r1, r0, #1
1005ab46:	d406      	bmi.n	1005ab56 <llc_conn_check_ctrl_proc_rsp_timer+0x66>
1005ab48:	217d      	movs	r1, #125	@ 0x7d
1005ab4a:	0449      	lsls	r1, r1, #17
1005ab4c:	4288      	cmp	r0, r1
1005ab4e:	d800      	bhi.n	1005ab52 <llc_conn_check_ctrl_proc_rsp_timer+0x62>
1005ab50:	1b41      	subs	r1, r0, r5
1005ab52:	66e1      	str	r1, [r4, #108]	@ 0x6c
1005ab54:	e000      	b.n	1005ab58 <llc_conn_check_ctrl_proc_rsp_timer+0x68>
1005ab56:	2622      	movs	r6, #34	@ 0x22
1005ab58:	4630      	mov	r0, r6
1005ab5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005ab5c <llc_conn_check_instant_and_set_params>:
1005ab5c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005ab5e:	4604      	mov	r4, r0
1005ab60:	209a      	movs	r0, #154	@ 0x9a
1005ab62:	5a20      	ldrh	r0, [r4, r0]
1005ab64:	07c2      	lsls	r2, r0, #31
1005ab66:	4625      	mov	r5, r4
1005ab68:	352c      	adds	r5, #44	@ 0x2c
1005ab6a:	2a00      	cmp	r2, #0
1005ab6c:	d100      	bne.n	1005ab70 <llc_conn_check_instant_and_set_params+0x14>
1005ab6e:	e081      	b.n	1005ac74 <llc_conn_check_instant_and_set_params+0x118>
1005ab70:	4626      	mov	r6, r4
1005ab72:	3698      	adds	r6, #152	@ 0x98
1005ab74:	8832      	ldrh	r2, [r6, #0]
1005ab76:	1a51      	subs	r1, r2, r1
1005ab78:	040b      	lsls	r3, r1, #16
1005ab7a:	d004      	beq.n	1005ab86 <llc_conn_check_instant_and_set_params+0x2a>
1005ab7c:	b208      	sxth	r0, r1
1005ab7e:	2800      	cmp	r0, #0
1005ab80:	d578      	bpl.n	1005ac74 <llc_conn_check_instant_and_set_params+0x118>
1005ab82:	2028      	movs	r0, #40	@ 0x28
1005ab84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005ab86:	0541      	lsls	r1, r0, #21
1005ab88:	d40f      	bmi.n	1005abaa <llc_conn_check_instant_and_set_params+0x4e>
1005ab8a:	0701      	lsls	r1, r0, #28
1005ab8c:	d416      	bmi.n	1005abbc <llc_conn_check_instant_and_set_params+0x60>
1005ab8e:	0680      	lsls	r0, r0, #26
1005ab90:	d438      	bmi.n	1005ac04 <llc_conn_check_instant_and_set_params+0xa8>
1005ab92:	7928      	ldrb	r0, [r5, #4]
1005ab94:	f7f4 f923 	bl	1004edde <LL_phy_upd_pending_ucfg>
1005ab98:	2800      	cmp	r0, #0
1005ab9a:	d060      	beq.n	1005ac5e <llc_conn_check_instant_and_set_params+0x102>
1005ab9c:	7928      	ldrb	r0, [r5, #4]
1005ab9e:	2101      	movs	r1, #1
1005aba0:	2200      	movs	r2, #0
1005aba2:	4613      	mov	r3, r2
1005aba4:	f003 f9e2 	bl	1005df6c <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
1005aba8:	e059      	b.n	1005ac5e <llc_conn_check_instant_and_set_params+0x102>
1005abaa:	7928      	ldrb	r0, [r5, #4]
1005abac:	4611      	mov	r1, r2
1005abae:	f7ff f9b7 	bl	10059f20 <llc_cig_cmn_start_cis_ucfg_weak>
1005abb2:	8870      	ldrh	r0, [r6, #2]
1005abb4:	4932      	ldr	r1, [pc, #200]	@ (1005ac80 <__arm_cp.3_0>)
1005abb6:	4001      	ands	r1, r0
1005abb8:	8071      	strh	r1, [r6, #2]
1005abba:	e050      	b.n	1005ac5e <llc_conn_check_instant_and_set_params+0x102>
1005abbc:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005abbe:	6b37      	ldr	r7, [r6, #48]	@ 0x30
1005abc0:	6879      	ldr	r1, [r7, #4]
1005abc2:	1840      	adds	r0, r0, r1
1005abc4:	6460      	str	r0, [r4, #68]	@ 0x44
1005abc6:	68b9      	ldr	r1, [r7, #8]
1005abc8:	683a      	ldr	r2, [r7, #0]
1005abca:	7828      	ldrb	r0, [r5, #0]
1005abcc:	2802      	cmp	r0, #2
1005abce:	9102      	str	r1, [sp, #8]
1005abd0:	9201      	str	r2, [sp, #4]
1005abd2:	d129      	bne.n	1005ac28 <llc_conn_check_instant_and_set_params+0xcc>
1005abd4:	7d68      	ldrb	r0, [r5, #21]
1005abd6:	f7f9 f92f 	bl	10053e38 <BLEPLAT_CNTR_SmGetTxPhy>
1005abda:	2804      	cmp	r0, #4
1005abdc:	d001      	beq.n	1005abe2 <llc_conn_check_instant_and_set_params+0x86>
1005abde:	2806      	cmp	r0, #6
1005abe0:	d100      	bne.n	1005abe4 <llc_conn_check_instant_and_set_params+0x88>
1005abe2:	2002      	movs	r0, #2
1005abe4:	9b02      	ldr	r3, [sp, #8]
1005abe6:	6979      	ldr	r1, [r7, #20]
1005abe8:	4299      	cmp	r1, r3
1005abea:	460a      	mov	r2, r1
1005abec:	d300      	bcc.n	1005abf0 <llc_conn_check_instant_and_set_params+0x94>
1005abee:	461a      	mov	r2, r3
1005abf0:	6522      	str	r2, [r4, #80]	@ 0x50
1005abf2:	0080      	lsls	r0, r0, #2
1005abf4:	1820      	adds	r0, r4, r0
1005abf6:	6581      	str	r1, [r0, #88]	@ 0x58
1005abf8:	9801      	ldr	r0, [sp, #4]
1005abfa:	0840      	lsrs	r0, r0, #1
1005abfc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
1005abfe:	1808      	adds	r0, r1, r0
1005ac00:	6460      	str	r0, [r4, #68]	@ 0x44
1005ac02:	e01b      	b.n	1005ac3c <llc_conn_check_instant_and_set_params+0xe0>
1005ac04:	2083      	movs	r0, #131	@ 0x83
1005ac06:	0040      	lsls	r0, r0, #1
1005ac08:	1827      	adds	r7, r4, r0
1005ac0a:	6b71      	ldr	r1, [r6, #52]	@ 0x34
1005ac0c:	7d68      	ldrb	r0, [r5, #21]
1005ac0e:	f7f9 f969 	bl	10053ee4 <BLEPLAT_CNTR_SmSetChannelMap>
1005ac12:	7838      	ldrb	r0, [r7, #0]
1005ac14:	2801      	cmp	r0, #1
1005ac16:	d104      	bne.n	1005ac22 <llc_conn_check_instant_and_set_params+0xc6>
1005ac18:	6b71      	ldr	r1, [r6, #52]	@ 0x34
1005ac1a:	34e0      	adds	r4, #224	@ 0xe0
1005ac1c:	4620      	mov	r0, r4
1005ac1e:	f000 fdcf 	bl	1005b7c0 <llc_mngm_csa2_update_remapping_table>
1005ac22:	8870      	ldrh	r0, [r6, #2]
1005ac24:	2120      	movs	r1, #32
1005ac26:	e018      	b.n	1005ac5a <llc_conn_check_instant_and_set_params+0xfe>
1005ac28:	f7ff f97c 	bl	10059f24 <llc_conn_get_cntxt_p>
1005ac2c:	9b02      	ldr	r3, [sp, #8]
1005ac2e:	9901      	ldr	r1, [sp, #4]
1005ac30:	6361      	str	r1, [r4, #52]	@ 0x34
1005ac32:	6840      	ldr	r0, [r0, #4]
1005ac34:	4298      	cmp	r0, r3
1005ac36:	d300      	bcc.n	1005ac3a <llc_conn_check_instant_and_set_params+0xde>
1005ac38:	4618      	mov	r0, r3
1005ac3a:	6520      	str	r0, [r4, #80]	@ 0x50
1005ac3c:	68f8      	ldr	r0, [r7, #12]
1005ac3e:	8720      	strh	r0, [r4, #56]	@ 0x38
1005ac40:	6938      	ldr	r0, [r7, #16]
1005ac42:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
1005ac44:	180a      	adds	r2, r1, r0
1005ac46:	6662      	str	r2, [r4, #100]	@ 0x64
1005ac48:	66a0      	str	r0, [r4, #104]	@ 0x68
1005ac4a:	4299      	cmp	r1, r3
1005ac4c:	d003      	beq.n	1005ac56 <llc_conn_check_instant_and_set_params+0xfa>
1005ac4e:	64e3      	str	r3, [r4, #76]	@ 0x4c
1005ac50:	4620      	mov	r0, r4
1005ac52:	f000 ff72 	bl	1005bb3a <llc_subrate_reset_params>
1005ac56:	8870      	ldrh	r0, [r6, #2]
1005ac58:	2108      	movs	r1, #8
1005ac5a:	4388      	bics	r0, r1
1005ac5c:	8070      	strh	r0, [r6, #2]
1005ac5e:	8870      	ldrh	r0, [r6, #2]
1005ac60:	2102      	movs	r1, #2
1005ac62:	4301      	orrs	r1, r0
1005ac64:	2001      	movs	r0, #1
1005ac66:	4381      	bics	r1, r0
1005ac68:	8071      	strh	r1, [r6, #2]
1005ac6a:	2015      	movs	r0, #21
1005ac6c:	f007 fd88 	bl	10062780 <tsk_notify_idx>
1005ac70:	f7f6 ff09 	bl	10051a86 <BLE_STACK_ProcessRequest>
1005ac74:	7928      	ldrb	r0, [r5, #4]
1005ac76:	f7f4 f8da 	bl	1004ee2e <LL_phy_upd_evt_pending_check_isr_ucfg>
1005ac7a:	2000      	movs	r0, #0
1005ac7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005ac7e:	46c0      	nop			@ (mov r8, r8)

1005ac80 <__arm_cp.3_0>:
1005ac80:	0000fbff 	.word	0x0000fbff

1005ac84 <llc_conn_check_supervision_timer>:
1005ac84:	6e42      	ldr	r2, [r0, #100]	@ 0x64
1005ac86:	1a51      	subs	r1, r2, r1
1005ac88:	6641      	str	r1, [r0, #100]	@ 0x64
1005ac8a:	1e49      	subs	r1, r1, #1
1005ac8c:	d401      	bmi.n	1005ac92 <llc_conn_check_supervision_timer+0xe>
1005ac8e:	2000      	movs	r0, #0
1005ac90:	4770      	bx	lr
1005ac92:	2188      	movs	r1, #136	@ 0x88
1005ac94:	5c40      	ldrb	r0, [r0, r1]
1005ac96:	0680      	lsls	r0, r0, #26
1005ac98:	d501      	bpl.n	1005ac9e <llc_conn_check_supervision_timer+0x1a>
1005ac9a:	2008      	movs	r0, #8
1005ac9c:	4770      	bx	lr
1005ac9e:	203e      	movs	r0, #62	@ 0x3e
1005aca0:	4770      	bx	lr

1005aca2 <llc_conn_release_conn_idx>:
1005aca2:	b580      	push	{r7, lr}
1005aca4:	f7ff f948 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005aca8:	212c      	movs	r1, #44	@ 0x2c
1005acaa:	2200      	movs	r2, #0
1005acac:	5442      	strb	r2, [r0, r1]
1005acae:	bd80      	pop	{r7, pc}

1005acb0 <llc_conn_disconnect_link>:
1005acb0:	b5b0      	push	{r4, r5, r7, lr}
1005acb2:	460c      	mov	r4, r1
1005acb4:	4601      	mov	r1, r0
1005acb6:	0a02      	lsrs	r2, r0, #8
1005acb8:	2012      	movs	r0, #18
1005acba:	2a0e      	cmp	r2, #14
1005acbc:	d81c      	bhi.n	1005acf8 <llc_conn_disconnect_link+0x48>
1005acbe:	2c1a      	cmp	r4, #26
1005acc0:	d81a      	bhi.n	1005acf8 <llc_conn_disconnect_link+0x48>
1005acc2:	2201      	movs	r2, #1
1005acc4:	40a2      	lsls	r2, r4
1005acc6:	4b0d      	ldr	r3, [pc, #52]	@ (1005acfc <__arm_cp.9_0>)
1005acc8:	421a      	tst	r2, r3
1005acca:	d015      	beq.n	1005acf8 <llc_conn_disconnect_link+0x48>
1005accc:	4608      	mov	r0, r1
1005acce:	f7ff f941 	bl	10059f54 <llc_conn_get_cntxt_per_p_from_handle>
1005acd2:	2800      	cmp	r0, #0
1005acd4:	d008      	beq.n	1005ace8 <llc_conn_disconnect_link+0x38>
1005acd6:	4605      	mov	r5, r0
1005acd8:	2030      	movs	r0, #48	@ 0x30
1005acda:	5c28      	ldrb	r0, [r5, r0]
1005acdc:	f001 fd9b 	bl	1005c816 <LL_cpe_get_tx_terminate_in_progress>
1005ace0:	2801      	cmp	r0, #1
1005ace2:	d103      	bne.n	1005acec <llc_conn_disconnect_link+0x3c>
1005ace4:	203a      	movs	r0, #58	@ 0x3a
1005ace6:	bdb0      	pop	{r4, r5, r7, pc}
1005ace8:	2002      	movs	r0, #2
1005acea:	bdb0      	pop	{r4, r5, r7, pc}
1005acec:	3530      	adds	r5, #48	@ 0x30
1005acee:	7828      	ldrb	r0, [r5, #0]
1005acf0:	4621      	mov	r1, r4
1005acf2:	f001 fd83 	bl	1005c7fc <LL_cpe_set_disconnect>
1005acf6:	2000      	movs	r0, #0
1005acf8:	bdb0      	pop	{r4, r5, r7, pc}
1005acfa:	46c0      	nop			@ (mov r8, r8)

1005acfc <__arm_cp.9_0>:
1005acfc:	04080020 	.word	0x04080020

1005ad00 <llc_conn_disconnect_link_from_cpf>:
1005ad00:	b510      	push	{r4, lr}
1005ad02:	4604      	mov	r4, r0
1005ad04:	202d      	movs	r0, #45	@ 0x2d
1005ad06:	5421      	strb	r1, [r4, r0]
1005ad08:	342d      	adds	r4, #45	@ 0x2d
1005ad0a:	7d20      	ldrb	r0, [r4, #20]
1005ad0c:	f005 fd72 	bl	100607f4 <LL_sched_delete_taskslot>
1005ad10:	7d20      	ldrb	r0, [r4, #20]
1005ad12:	f005 fdc1 	bl	10060898 <LL_sched_check_and_wait_sched>
1005ad16:	bd10      	pop	{r4, pc}

1005ad18 <llc_conn_go_to_connect>:
1005ad18:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ad1a:	b0ad      	sub	sp, #180	@ 0xb4
1005ad1c:	4605      	mov	r5, r0
1005ad1e:	7ac0      	ldrb	r0, [r0, #11]
1005ad20:	f7ff f90a 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005ad24:	4606      	mov	r6, r0
1005ad26:	f7ff f8fd 	bl	10059f24 <llc_conn_get_cntxt_p>
1005ad2a:	901f      	str	r0, [sp, #124]	@ 0x7c
1005ad2c:	682c      	ldr	r4, [r5, #0]
1005ad2e:	2022      	movs	r0, #34	@ 0x22
1005ad30:	5c21      	ldrb	r1, [r4, r0]
1005ad32:	221f      	movs	r2, #31
1005ad34:	9217      	str	r2, [sp, #92]	@ 0x5c
1005ad36:	4011      	ands	r1, r2
1005ad38:	5421      	strb	r1, [r4, r0]
1005ad3a:	7d60      	ldrb	r0, [r4, #21]
1005ad3c:	9010      	str	r0, [sp, #64]	@ 0x40
1005ad3e:	7ba0      	ldrb	r0, [r4, #14]
1005ad40:	9020      	str	r0, [sp, #128]	@ 0x80
1005ad42:	7be0      	ldrb	r0, [r4, #15]
1005ad44:	900c      	str	r0, [sp, #48]	@ 0x30
1005ad46:	7c20      	ldrb	r0, [r4, #16]
1005ad48:	9018      	str	r0, [sp, #96]	@ 0x60
1005ad4a:	7c60      	ldrb	r0, [r4, #17]
1005ad4c:	901a      	str	r0, [sp, #104]	@ 0x68
1005ad4e:	7ca0      	ldrb	r0, [r4, #18]
1005ad50:	901c      	str	r0, [sp, #112]	@ 0x70
1005ad52:	7ce0      	ldrb	r0, [r4, #19]
1005ad54:	9013      	str	r0, [sp, #76]	@ 0x4c
1005ad56:	7d20      	ldrb	r0, [r4, #20]
1005ad58:	9016      	str	r0, [sp, #88]	@ 0x58
1005ad5a:	7da0      	ldrb	r0, [r4, #22]
1005ad5c:	9008      	str	r0, [sp, #32]
1005ad5e:	7de0      	ldrb	r0, [r4, #23]
1005ad60:	900e      	str	r0, [sp, #56]	@ 0x38
1005ad62:	7e20      	ldrb	r0, [r4, #24]
1005ad64:	9015      	str	r0, [sp, #84]	@ 0x54
1005ad66:	7e60      	ldrb	r0, [r4, #25]
1005ad68:	9009      	str	r0, [sp, #36]	@ 0x24
1005ad6a:	7ea0      	ldrb	r0, [r4, #26]
1005ad6c:	9011      	str	r0, [sp, #68]	@ 0x44
1005ad6e:	7ee0      	ldrb	r0, [r4, #27]
1005ad70:	900a      	str	r0, [sp, #40]	@ 0x28
1005ad72:	7f20      	ldrb	r0, [r4, #28]
1005ad74:	9014      	str	r0, [sp, #80]	@ 0x50
1005ad76:	7f60      	ldrb	r0, [r4, #29]
1005ad78:	900f      	str	r0, [sp, #60]	@ 0x3c
1005ad7a:	7820      	ldrb	r0, [r4, #0]
1005ad7c:	901d      	str	r0, [sp, #116]	@ 0x74
1005ad7e:	4620      	mov	r0, r4
1005ad80:	3022      	adds	r0, #34	@ 0x22
1005ad82:	7840      	ldrb	r0, [r0, #1]
1005ad84:	9019      	str	r0, [sp, #100]	@ 0x64
1005ad86:	7ba8      	ldrb	r0, [r5, #14]
1005ad88:	f7f9 f856 	bl	10053e38 <BLEPLAT_CNTR_SmGetTxPhy>
1005ad8c:	9022      	str	r0, [sp, #136]	@ 0x88
1005ad8e:	f004 ff77 	bl	1005fc80 <llc_get_channel_sel_algo2_enabled>
1005ad92:	900b      	str	r0, [sp, #44]	@ 0x2c
1005ad94:	2094      	movs	r0, #148	@ 0x94
1005ad96:	5830      	ldr	r0, [r6, r0]
1005ad98:	2300      	movs	r3, #0
1005ad9a:	6003      	str	r3, [r0, #0]
1005ad9c:	2090      	movs	r0, #144	@ 0x90
1005ad9e:	5830      	ldr	r0, [r6, r0]
1005ada0:	6003      	str	r3, [r0, #0]
1005ada2:	20a8      	movs	r0, #168	@ 0xa8
1005ada4:	5233      	strh	r3, [r6, r0]
1005ada6:	2042      	movs	r0, #66	@ 0x42
1005ada8:	5233      	strh	r3, [r6, r0]
1005adaa:	202d      	movs	r0, #45	@ 0x2d
1005adac:	5433      	strb	r3, [r6, r0]
1005adae:	2045      	movs	r0, #69	@ 0x45
1005adb0:	0080      	lsls	r0, r0, #2
1005adb2:	5033      	str	r3, [r6, r0]
1005adb4:	2111      	movs	r1, #17
1005adb6:	0109      	lsls	r1, r1, #4
1005adb8:	5473      	strb	r3, [r6, r1]
1005adba:	2121      	movs	r1, #33	@ 0x21
1005adbc:	00c9      	lsls	r1, r1, #3
1005adbe:	227f      	movs	r2, #127	@ 0x7f
1005adc0:	5472      	strb	r2, [r6, r1]
1005adc2:	212f      	movs	r1, #47	@ 0x2f
1005adc4:	2207      	movs	r2, #7
1005adc6:	5472      	strb	r2, [r6, r1]
1005adc8:	2188      	movs	r1, #136	@ 0x88
1005adca:	5073      	str	r3, [r6, r1]
1005adcc:	218c      	movs	r1, #140	@ 0x8c
1005adce:	5073      	str	r3, [r6, r1]
1005add0:	4631      	mov	r1, r6
1005add2:	31a8      	adds	r1, #168	@ 0xa8
1005add4:	810b      	strh	r3, [r1, #8]
1005add6:	9121      	str	r1, [sp, #132]	@ 0x84
1005add8:	728b      	strb	r3, [r1, #10]
1005adda:	1830      	adds	r0, r6, r0
1005addc:	931e      	str	r3, [sp, #120]	@ 0x78
1005adde:	900d      	str	r0, [sp, #52]	@ 0x34
1005ade0:	6043      	str	r3, [r0, #4]
1005ade2:	2701      	movs	r7, #1
1005ade4:	8537      	strh	r7, [r6, #40]	@ 0x28
1005ade6:	9523      	str	r5, [sp, #140]	@ 0x8c
1005ade8:	7ba8      	ldrb	r0, [r5, #14]
1005adea:	2141      	movs	r1, #65	@ 0x41
1005adec:	5470      	strb	r0, [r6, r1]
1005adee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
1005adf0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1005adf2:	4002      	ands	r2, r0
1005adf4:	7ae8      	ldrb	r0, [r5, #11]
1005adf6:	2131      	movs	r1, #49	@ 0x31
1005adf8:	921b      	str	r2, [sp, #108]	@ 0x6c
1005adfa:	5472      	strb	r2, [r6, r1]
1005adfc:	2130      	movs	r1, #48	@ 0x30
1005adfe:	9112      	str	r1, [sp, #72]	@ 0x48
1005ae00:	5470      	strb	r0, [r6, r1]
1005ae02:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005ae04:	0200      	lsls	r0, r0, #8
1005ae06:	9915      	ldr	r1, [sp, #84]	@ 0x54
1005ae08:	1840      	adds	r0, r0, r1
1005ae0a:	9015      	str	r0, [sp, #84]	@ 0x54
1005ae0c:	b280      	uxth	r0, r0
1005ae0e:	0241      	lsls	r1, r0, #9
1005ae10:	64f1      	str	r1, [r6, #76]	@ 0x4c
1005ae12:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1005ae14:	0209      	lsls	r1, r1, #8
1005ae16:	9a14      	ldr	r2, [sp, #80]	@ 0x50
1005ae18:	1889      	adds	r1, r1, r2
1005ae1a:	9114      	str	r1, [sp, #80]	@ 0x50
1005ae1c:	b289      	uxth	r1, r1
1005ae1e:	0309      	lsls	r1, r1, #12
1005ae20:	2203      	movs	r2, #3
1005ae22:	920f      	str	r2, [sp, #60]	@ 0x3c
1005ae24:	0292      	lsls	r2, r2, #10
1005ae26:	4342      	muls	r2, r0
1005ae28:	6672      	str	r2, [r6, #100]	@ 0x64
1005ae2a:	66b1      	str	r1, [r6, #104]	@ 0x68
1005ae2c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1005ae2e:	0200      	lsls	r0, r0, #8
1005ae30:	991c      	ldr	r1, [sp, #112]	@ 0x70
1005ae32:	1840      	adds	r0, r0, r1
1005ae34:	9916      	ldr	r1, [sp, #88]	@ 0x58
1005ae36:	0409      	lsls	r1, r1, #16
1005ae38:	1840      	adds	r0, r0, r1
1005ae3a:	9016      	str	r0, [sp, #88]	@ 0x58
1005ae3c:	6570      	str	r0, [r6, #84]	@ 0x54
1005ae3e:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005ae40:	0200      	lsls	r0, r0, #8
1005ae42:	9911      	ldr	r1, [sp, #68]	@ 0x44
1005ae44:	1840      	adds	r0, r0, r1
1005ae46:	9011      	str	r0, [sp, #68]	@ 0x44
1005ae48:	8730      	strh	r0, [r6, #56]	@ 0x38
1005ae4a:	25ff      	movs	r5, #255	@ 0xff
1005ae4c:	950a      	str	r5, [sp, #40]	@ 0x28
1005ae4e:	3512      	adds	r5, #18
1005ae50:	f005 fa08 	bl	10060264 <llc_get_next_free_conn_handle>
1005ae54:	971c      	str	r7, [sp, #112]	@ 0x70
1005ae56:	5577      	strb	r7, [r6, r5]
1005ae58:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005ae5a:	8770      	strh	r0, [r6, #58]	@ 0x3a
1005ae5c:	207d      	movs	r0, #125	@ 0x7d
1005ae5e:	0440      	lsls	r0, r0, #17
1005ae60:	66f0      	str	r0, [r6, #108]	@ 0x6c
1005ae62:	6730      	str	r0, [r6, #112]	@ 0x70
1005ae64:	2083      	movs	r0, #131	@ 0x83
1005ae66:	0040      	lsls	r0, r0, #1
1005ae68:	1833      	adds	r3, r6, r0
1005ae6a:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005ae6c:	0200      	lsls	r0, r0, #8
1005ae6e:	9920      	ldr	r1, [sp, #128]	@ 0x80
1005ae70:	1840      	adds	r0, r0, r1
1005ae72:	9918      	ldr	r1, [sp, #96]	@ 0x60
1005ae74:	0409      	lsls	r1, r1, #16
1005ae76:	1840      	adds	r0, r0, r1
1005ae78:	991a      	ldr	r1, [sp, #104]	@ 0x68
1005ae7a:	0609      	lsls	r1, r1, #24
1005ae7c:	1840      	adds	r0, r0, r1
1005ae7e:	901a      	str	r0, [sp, #104]	@ 0x68
1005ae80:	4632      	mov	r2, r6
1005ae82:	322c      	adds	r2, #44	@ 0x2c
1005ae84:	341e      	adds	r4, #30
1005ae86:	9418      	str	r4, [sp, #96]	@ 0x60
1005ae88:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005ae8a:	2801      	cmp	r0, #1
1005ae8c:	9220      	str	r2, [sp, #128]	@ 0x80
1005ae8e:	9313      	str	r3, [sp, #76]	@ 0x4c
1005ae90:	d106      	bne.n	1005aea0 <llc_conn_go_to_connect+0x188>
1005ae92:	7c38      	ldrb	r0, [r7, #16]
1005ae94:	2801      	cmp	r0, #1
1005ae96:	d103      	bne.n	1005aea0 <llc_conn_go_to_connect+0x188>
1005ae98:	2020      	movs	r0, #32
1005ae9a:	991d      	ldr	r1, [sp, #116]	@ 0x74
1005ae9c:	4008      	ands	r0, r1
1005ae9e:	d104      	bne.n	1005aeaa <llc_conn_go_to_connect+0x192>
1005aea0:	7b38      	ldrb	r0, [r7, #12]
1005aea2:	21fe      	movs	r1, #254	@ 0xfe
1005aea4:	4001      	ands	r1, r0
1005aea6:	2902      	cmp	r1, #2
1005aea8:	d11b      	bne.n	1005aee2 <llc_conn_go_to_connect+0x1ca>
1005aeaa:	2001      	movs	r0, #1
1005aeac:	7018      	strb	r0, [r3, #0]
1005aeae:	7bb8      	ldrb	r0, [r7, #14]
1005aeb0:	9c18      	ldr	r4, [sp, #96]	@ 0x60
1005aeb2:	4621      	mov	r1, r4
1005aeb4:	f7f9 f816 	bl	10053ee4 <BLEPLAT_CNTR_SmSetChannelMap>
1005aeb8:	4635      	mov	r5, r6
1005aeba:	35e0      	adds	r5, #224	@ 0xe0
1005aebc:	4628      	mov	r0, r5
1005aebe:	4621      	mov	r1, r4
1005aec0:	f000 fc7e 	bl	1005b7c0 <llc_mngm_csa2_update_remapping_table>
1005aec4:	9820      	ldr	r0, [sp, #128]	@ 0x80
1005aec6:	7d40      	ldrb	r0, [r0, #21]
1005aec8:	2200      	movs	r2, #0
1005aeca:	9200      	str	r2, [sp, #0]
1005aecc:	991a      	ldr	r1, [sp, #104]	@ 0x68
1005aece:	9101      	str	r1, [sp, #4]
1005aed0:	9202      	str	r2, [sp, #8]
1005aed2:	4629      	mov	r1, r5
1005aed4:	921b      	str	r2, [sp, #108]	@ 0x6c
1005aed6:	4613      	mov	r3, r2
1005aed8:	f000 fc8d 	bl	1005b7f6 <llc_mngm_csa2_select_channel_for_task>
1005aedc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
1005aede:	901e      	str	r0, [sp, #120]	@ 0x78
1005aee0:	e001      	b.n	1005aee6 <llc_conn_go_to_connect+0x1ce>
1005aee2:	981e      	ldr	r0, [sp, #120]	@ 0x78
1005aee4:	7018      	strb	r0, [r3, #0]
1005aee6:	209f      	movs	r0, #159	@ 0x9f
1005aee8:	990d      	ldr	r1, [sp, #52]	@ 0x34
1005aeea:	7788      	strb	r0, [r1, #30]
1005aeec:	48f8      	ldr	r0, [pc, #992]	@ (1005b2d0 <__arm_cp.11_0>)
1005aeee:	8388      	strh	r0, [r1, #28]
1005aef0:	48f8      	ldr	r0, [pc, #992]	@ (1005b2d4 <__arm_cp.11_1>)
1005aef2:	8348      	strh	r0, [r1, #26]
1005aef4:	6e10      	ldr	r0, [r2, #96]	@ 0x60
1005aef6:	991c      	ldr	r1, [sp, #112]	@ 0x70
1005aef8:	4388      	bics	r0, r1
1005aefa:	6610      	str	r0, [r2, #96]	@ 0x60
1005aefc:	7af8      	ldrb	r0, [r7, #11]
1005aefe:	f7f3 ff86 	bl	1004ee0e <LL_phy_update_init_per_st_data_ucfg>
1005af02:	2029      	movs	r0, #41	@ 0x29
1005af04:	00c5      	lsls	r5, r0, #3
1005af06:	20a9      	movs	r0, #169	@ 0xa9
1005af08:	0107      	lsls	r7, r0, #4
1005af0a:	f7fe fb3f 	bl	1005958c <data_length_extension_csr_ucfg_weak>
1005af0e:	2801      	cmp	r0, #1
1005af10:	d118      	bne.n	1005af44 <llc_conn_go_to_connect+0x22c>
1005af12:	981f      	ldr	r0, [sp, #124]	@ 0x7c
1005af14:	8980      	ldrh	r0, [r0, #12]
1005af16:	281b      	cmp	r0, #27
1005af18:	d10f      	bne.n	1005af3a <llc_conn_go_to_connect+0x222>
1005af1a:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005af1c:	2804      	cmp	r0, #4
1005af1e:	d108      	bne.n	1005af32 <llc_conn_go_to_connect+0x21a>
1005af20:	981f      	ldr	r0, [sp, #124]	@ 0x7c
1005af22:	8a40      	ldrh	r0, [r0, #18]
1005af24:	42b8      	cmp	r0, r7
1005af26:	d108      	bne.n	1005af3a <llc_conn_go_to_connect+0x222>
1005af28:	201b      	movs	r0, #27
1005af2a:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005af2c:	8208      	strh	r0, [r1, #16]
1005af2e:	8188      	strh	r0, [r1, #12]
1005af30:	e010      	b.n	1005af54 <llc_conn_go_to_connect+0x23c>
1005af32:	981f      	ldr	r0, [sp, #124]	@ 0x7c
1005af34:	8a00      	ldrh	r0, [r0, #16]
1005af36:	42a8      	cmp	r0, r5
1005af38:	d004      	beq.n	1005af44 <llc_conn_go_to_connect+0x22c>
1005af3a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
1005af3c:	6e10      	ldr	r0, [r2, #96]	@ 0x60
1005af3e:	2104      	movs	r1, #4
1005af40:	4301      	orrs	r1, r0
1005af42:	6611      	str	r1, [r2, #96]	@ 0x60
1005af44:	201b      	movs	r0, #27
1005af46:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005af48:	8208      	strh	r0, [r1, #16]
1005af4a:	8188      	strh	r0, [r1, #12]
1005af4c:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005af4e:	2804      	cmp	r0, #4
1005af50:	d000      	beq.n	1005af54 <llc_conn_go_to_connect+0x23c>
1005af52:	462f      	mov	r7, r5
1005af54:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005af56:	0200      	lsls	r0, r0, #8
1005af58:	900e      	str	r0, [sp, #56]	@ 0x38
1005af5a:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005af5c:	828f      	strh	r7, [r1, #20]
1005af5e:	824f      	strh	r7, [r1, #18]
1005af60:	830f      	strh	r7, [r1, #24]
1005af62:	201b      	movs	r0, #27
1005af64:	82c8      	strh	r0, [r1, #22]
1005af66:	81c8      	strh	r0, [r1, #14]
1005af68:	83cf      	strh	r7, [r1, #30]
1005af6a:	838f      	strh	r7, [r1, #28]
1005af6c:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
1005af6e:	8b68      	ldrh	r0, [r5, #26]
1005af70:	8348      	strh	r0, [r1, #26]
1005af72:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005af74:	7af8      	ldrb	r0, [r7, #11]
1005af76:	f002 f8cf 	bl	1005d118 <llc_conn_init_cte_ctxt_ucfg_weak>
1005af7a:	7af8      	ldrb	r0, [r7, #11]
1005af7c:	f002 ffe4 	bl	1005df48 <llc_conn_init_pcl_ctxt_ucfg_weak>
1005af80:	7af8      	ldrb	r0, [r7, #11]
1005af82:	f001 fe87 	bl	1005cc94 <LLC_conn_init_chc_ctxt_ucfg_weak>
1005af86:	4628      	mov	r0, r5
1005af88:	4631      	mov	r1, r6
1005af8a:	f000 fdcb 	bl	1005bb24 <llc_subrate_init_acceptable_per>
1005af8e:	7af8      	ldrb	r0, [r7, #11]
1005af90:	f002 ffde 	bl	1005df50 <LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak>
1005af94:	7af8      	ldrb	r0, [r7, #11]
1005af96:	f000 fd4b 	bl	1005ba30 <llc_past_init_ucfg_weak>
1005af9a:	4630      	mov	r0, r6
1005af9c:	f002 fe44 	bl	1005dc28 <LLC_init_le_ping_params>
1005afa0:	7af8      	ldrb	r0, [r7, #11]
1005afa2:	f001 fc5b 	bl	1005c85c <llc_cpe_init_sm_ctxt>
1005afa6:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005afa8:	f7f9 f937 	bl	1005421a <BLEPLAT_CNTR_DemodDelaySt>
1005afac:	7b39      	ldrb	r1, [r7, #12]
1005afae:	4aca      	ldr	r2, [pc, #808]	@ (1005b2d8 <__arm_cp.11_2>)
1005afb0:	6812      	ldr	r2, [r2, #0]
1005afb2:	6817      	ldr	r7, [r2, #0]
1005afb4:	2903      	cmp	r1, #3
1005afb6:	d004      	beq.n	1005afc2 <llc_conn_go_to_connect+0x2aa>
1005afb8:	2902      	cmp	r1, #2
1005afba:	d10b      	bne.n	1005afd4 <llc_conn_go_to_connect+0x2bc>
1005afbc:	1a38      	subs	r0, r7, r0
1005afbe:	383e      	subs	r0, #62	@ 0x3e
1005afc0:	e012      	b.n	1005afe8 <llc_conn_go_to_connect+0x2d0>
1005afc2:	210e      	movs	r1, #14
1005afc4:	9d22      	ldr	r5, [sp, #136]	@ 0x88
1005afc6:	4628      	mov	r0, r5
1005afc8:	f004 ff26 	bl	1005fe18 <LL_link_calc_packetlength>
1005afcc:	1a38      	subs	r0, r7, r0
1005afce:	383e      	subs	r0, #62	@ 0x3e
1005afd0:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005afd2:	e00b      	b.n	1005afec <llc_conn_go_to_connect+0x2d4>
1005afd4:	9923      	ldr	r1, [sp, #140]	@ 0x8c
1005afd6:	7b49      	ldrb	r1, [r1, #13]
1005afd8:	1a38      	subs	r0, r7, r0
1005afda:	2900      	cmp	r1, #0
1005afdc:	d001      	beq.n	1005afe2 <llc_conn_go_to_connect+0x2ca>
1005afde:	3090      	adds	r0, #144	@ 0x90
1005afe0:	e002      	b.n	1005afe8 <llc_conn_go_to_connect+0x2d0>
1005afe2:	2181      	movs	r1, #129	@ 0x81
1005afe4:	0049      	lsls	r1, r1, #1
1005afe6:	1840      	adds	r0, r0, r1
1005afe8:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005afea:	9d22      	ldr	r5, [sp, #136]	@ 0x88
1005afec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1005afee:	9908      	ldr	r1, [sp, #32]
1005aff0:	065a      	lsls	r2, r3, #25
1005aff2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1005aff4:	1861      	adds	r1, r4, r1
1005aff6:	2d04      	cmp	r5, #4
1005aff8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
1005affa:	d007      	beq.n	1005b00c <llc_conn_go_to_connect+0x2f4>
1005affc:	7b3d      	ldrb	r5, [r7, #12]
1005affe:	23fe      	movs	r3, #254	@ 0xfe
1005b000:	402b      	ands	r3, r5
1005b002:	2b02      	cmp	r3, #2
1005b004:	d100      	bne.n	1005b008 <llc_conn_go_to_connect+0x2f0>
1005b006:	931c      	str	r3, [sp, #112]	@ 0x70
1005b008:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
1005b00a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1005b00c:	09db      	lsrs	r3, r3, #7
1005b00e:	930e      	str	r3, [sp, #56]	@ 0x38
1005b010:	0fd2      	lsrs	r2, r2, #31
1005b012:	920f      	str	r2, [sp, #60]	@ 0x3c
1005b014:	1861      	adds	r1, r4, r1
1005b016:	024d      	lsls	r5, r1, #9
1005b018:	1829      	adds	r1, r5, r0
1005b01a:	683c      	ldr	r4, [r7, #0]
1005b01c:	7b78      	ldrb	r0, [r7, #13]
1005b01e:	2800      	cmp	r0, #0
1005b020:	d02a      	beq.n	1005b078 <llc_conn_go_to_connect+0x360>
1005b022:	911d      	str	r1, [sp, #116]	@ 0x74
1005b024:	9819      	ldr	r0, [sp, #100]	@ 0x64
1005b026:	0947      	lsrs	r7, r0, #5
1005b028:	f004 ff12 	bl	1005fe50 <LL_link_get_own_sca_ppm>
1005b02c:	9019      	str	r0, [sp, #100]	@ 0x64
1005b02e:	971c      	str	r7, [sp, #112]	@ 0x70
1005b030:	4638      	mov	r0, r7
1005b032:	f000 fd8f 	bl	1005bb54 <llc_convert_sca_to_ppm>
1005b036:	2103      	movs	r1, #3
1005b038:	9a20      	ldr	r2, [sp, #128]	@ 0x80
1005b03a:	7011      	strb	r1, [r2, #0]
1005b03c:	9910      	ldr	r1, [sp, #64]	@ 0x40
1005b03e:	0249      	lsls	r1, r1, #9
1005b040:	6371      	str	r1, [r6, #52]	@ 0x34
1005b042:	9919      	ldr	r1, [sp, #100]	@ 0x64
1005b044:	1840      	adds	r0, r0, r1
1005b046:	8570      	strh	r0, [r6, #42]	@ 0x2a
1005b048:	6cf1      	ldr	r1, [r6, #76]	@ 0x4c
1005b04a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
1005b04c:	6852      	ldr	r2, [r2, #4]
1005b04e:	4291      	cmp	r1, r2
1005b050:	d300      	bcc.n	1005b054 <llc_conn_go_to_connect+0x33c>
1005b052:	4611      	mov	r1, r2
1005b054:	6531      	str	r1, [r6, #80]	@ 0x50
1005b056:	b280      	uxth	r0, r0
1005b058:	4629      	mov	r1, r5
1005b05a:	f004 fed3 	bl	1005fe04 <LL_link_calculate_window_widening_from_ppm>
1005b05e:	300d      	adds	r0, #13
1005b060:	0041      	lsls	r1, r0, #1
1005b062:	6b72      	ldr	r2, [r6, #52]	@ 0x34
1005b064:	188a      	adds	r2, r1, r2
1005b066:	1ca4      	adds	r4, r4, #2
1005b068:	941f      	str	r4, [sp, #124]	@ 0x7c
1005b06a:	2102      	movs	r1, #2
1005b06c:	9110      	str	r1, [sp, #64]	@ 0x40
1005b06e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
1005b070:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005b072:	4b99      	ldr	r3, [pc, #612]	@ (1005b2d8 <__arm_cp.11_2>)
1005b074:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
1005b076:	e01b      	b.n	1005b0b0 <llc_conn_go_to_connect+0x398>
1005b078:	460d      	mov	r5, r1
1005b07a:	2102      	movs	r1, #2
1005b07c:	9820      	ldr	r0, [sp, #128]	@ 0x80
1005b07e:	7001      	strb	r1, [r0, #0]
1005b080:	2000      	movs	r0, #0
1005b082:	8570      	strh	r0, [r6, #42]	@ 0x2a
1005b084:	9a22      	ldr	r2, [sp, #136]	@ 0x88
1005b086:	2a04      	cmp	r2, #4
1005b088:	d000      	beq.n	1005b08c <llc_conn_go_to_connect+0x374>
1005b08a:	4611      	mov	r1, r2
1005b08c:	0089      	lsls	r1, r1, #2
1005b08e:	1871      	adds	r1, r6, r1
1005b090:	6d89      	ldr	r1, [r1, #88]	@ 0x58
1005b092:	6cf2      	ldr	r2, [r6, #76]	@ 0x4c
1005b094:	428a      	cmp	r2, r1
1005b096:	4b90      	ldr	r3, [pc, #576]	@ (1005b2d8 <__arm_cp.11_2>)
1005b098:	d300      	bcc.n	1005b09c <llc_conn_go_to_connect+0x384>
1005b09a:	460a      	mov	r2, r1
1005b09c:	6532      	str	r2, [r6, #80]	@ 0x50
1005b09e:	9910      	ldr	r1, [sp, #64]	@ 0x40
1005b0a0:	0209      	lsls	r1, r1, #8
1005b0a2:	186d      	adds	r5, r5, r1
1005b0a4:	3408      	adds	r4, #8
1005b0a6:	941f      	str	r4, [sp, #124]	@ 0x7c
1005b0a8:	2185      	movs	r1, #133	@ 0x85
1005b0aa:	9110      	str	r1, [sp, #64]	@ 0x40
1005b0ac:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1005b0ae:	901c      	str	r0, [sp, #112]	@ 0x70
1005b0b0:	6475      	str	r5, [r6, #68]	@ 0x44
1005b0b2:	64b0      	str	r0, [r6, #72]	@ 0x48
1005b0b4:	a824      	add	r0, sp, #144	@ 0x90
1005b0b6:	2100      	movs	r1, #0
1005b0b8:	8081      	strh	r1, [r0, #4]
1005b0ba:	911d      	str	r1, [sp, #116]	@ 0x74
1005b0bc:	9124      	str	r1, [sp, #144]	@ 0x90
1005b0be:	6818      	ldr	r0, [r3, #0]
1005b0c0:	213d      	movs	r1, #61	@ 0x3d
1005b0c2:	5c41      	ldrb	r1, [r0, r1]
1005b0c4:	0689      	lsls	r1, r1, #26
1005b0c6:	9219      	str	r2, [sp, #100]	@ 0x64
1005b0c8:	d506      	bpl.n	1005b0d8 <llc_conn_go_to_connect+0x3c0>
1005b0ca:	303d      	adds	r0, #61	@ 0x3d
1005b0cc:	7b81      	ldrb	r1, [r0, #14]
1005b0ce:	07c9      	lsls	r1, r1, #31
1005b0d0:	d105      	bne.n	1005b0de <llc_conn_go_to_connect+0x3c6>
1005b0d2:	7a80      	ldrb	r0, [r0, #10]
1005b0d4:	0780      	lsls	r0, r0, #30
1005b0d6:	d402      	bmi.n	1005b0de <llc_conn_go_to_connect+0x3c6>
1005b0d8:	4627      	mov	r7, r4
1005b0da:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
1005b0dc:	e036      	b.n	1005b14c <llc_conn_go_to_connect+0x434>
1005b0de:	6878      	ldr	r0, [r7, #4]
1005b0e0:	6801      	ldr	r1, [r0, #0]
1005b0e2:	23fe      	movs	r3, #254	@ 0xfe
1005b0e4:	400b      	ands	r3, r1
1005b0e6:	aa24      	add	r2, sp, #144	@ 0x90
1005b0e8:	2b02      	cmp	r3, #2
1005b0ea:	d000      	beq.n	1005b0ee <llc_conn_go_to_connect+0x3d6>
1005b0ec:	921f      	str	r2, [sp, #124]	@ 0x7c
1005b0ee:	b2cd      	uxtb	r5, r1
1005b0f0:	7b79      	ldrb	r1, [r7, #13]
1005b0f2:	2900      	cmp	r1, #0
1005b0f4:	d00c      	beq.n	1005b110 <llc_conn_go_to_connect+0x3f8>
1005b0f6:	a924      	add	r1, sp, #144	@ 0x90
1005b0f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005b0fa:	2a00      	cmp	r2, #0
1005b0fc:	d016      	beq.n	1005b12c <llc_conn_go_to_connect+0x414>
1005b0fe:	6839      	ldr	r1, [r7, #0]
1005b100:	7b4a      	ldrb	r2, [r1, #13]
1005b102:	23c0      	movs	r3, #192	@ 0xc0
1005b104:	4013      	ands	r3, r2
1005b106:	aa24      	add	r2, sp, #144	@ 0x90
1005b108:	2b40      	cmp	r3, #64	@ 0x40
1005b10a:	d00e      	beq.n	1005b12a <llc_conn_go_to_connect+0x412>
1005b10c:	4611      	mov	r1, r2
1005b10e:	e00d      	b.n	1005b12c <llc_conn_go_to_connect+0x414>
1005b110:	a924      	add	r1, sp, #144	@ 0x90
1005b112:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1005b114:	2a00      	cmp	r2, #0
1005b116:	d009      	beq.n	1005b12c <llc_conn_go_to_connect+0x414>
1005b118:	683a      	ldr	r2, [r7, #0]
1005b11a:	79d1      	ldrb	r1, [r2, #7]
1005b11c:	23c0      	movs	r3, #192	@ 0xc0
1005b11e:	400b      	ands	r3, r1
1005b120:	a924      	add	r1, sp, #144	@ 0x90
1005b122:	2b40      	cmp	r3, #64	@ 0x40
1005b124:	d102      	bne.n	1005b12c <llc_conn_go_to_connect+0x414>
1005b126:	1c91      	adds	r1, r2, #2
1005b128:	e000      	b.n	1005b12c <llc_conn_go_to_connect+0x414>
1005b12a:	3108      	adds	r1, #8
1005b12c:	7aba      	ldrb	r2, [r7, #10]
1005b12e:	ab26      	add	r3, sp, #152	@ 0x98
1005b130:	759a      	strb	r2, [r3, #22]
1005b132:	893a      	ldrh	r2, [r7, #8]
1005b134:	829a      	strh	r2, [r3, #20]
1005b136:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
1005b138:	9227      	str	r2, [sp, #156]	@ 0x9c
1005b13a:	9128      	str	r1, [sp, #160]	@ 0xa0
1005b13c:	2dfe      	cmp	r5, #254	@ 0xfe
1005b13e:	d003      	beq.n	1005b148 <llc_conn_go_to_connect+0x430>
1005b140:	2103      	movs	r1, #3
1005b142:	400d      	ands	r5, r1
1005b144:	462f      	mov	r7, r5
1005b146:	e000      	b.n	1005b14a <llc_conn_go_to_connect+0x432>
1005b148:	2701      	movs	r7, #1
1005b14a:	1c44      	adds	r4, r0, #1
1005b14c:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005b14e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
1005b150:	630d      	str	r5, [r1, #48]	@ 0x30
1005b152:	2001      	movs	r0, #1
1005b154:	4038      	ands	r0, r7
1005b156:	9a12      	ldr	r2, [sp, #72]	@ 0x48
1005b158:	5488      	strb	r0, [r1, r2]
1005b15a:	634d      	str	r5, [r1, #52]	@ 0x34
1005b15c:	4608      	mov	r0, r1
1005b15e:	3030      	adds	r0, #48	@ 0x30
1005b160:	1c40      	adds	r0, r0, #1
1005b162:	2206      	movs	r2, #6
1005b164:	4621      	mov	r1, r4
1005b166:	f7f7 fa75 	bl	10052654 <BLEPLAT_MemCpy>
1005b16a:	a826      	add	r0, sp, #152	@ 0x98
1005b16c:	7685      	strb	r5, [r0, #26]
1005b16e:	7607      	strb	r7, [r0, #24]
1005b170:	991c      	ldr	r1, [sp, #112]	@ 0x70
1005b172:	75c1      	strb	r1, [r0, #23]
1005b174:	9914      	ldr	r1, [sp, #80]	@ 0x50
1005b176:	8241      	strh	r1, [r0, #18]
1005b178:	9911      	ldr	r1, [sp, #68]	@ 0x44
1005b17a:	8201      	strh	r1, [r0, #16]
1005b17c:	9915      	ldr	r1, [sp, #84]	@ 0x54
1005b17e:	8181      	strh	r1, [r0, #12]
1005b180:	8f71      	ldrh	r1, [r6, #58]	@ 0x3a
1005b182:	81c1      	strh	r1, [r0, #14]
1005b184:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005b186:	7b79      	ldrb	r1, [r7, #13]
1005b188:	7641      	strb	r1, [r0, #25]
1005b18a:	9426      	str	r4, [sp, #152]	@ 0x98
1005b18c:	f7ff fa86 	bl	1005a69c <llc_conn_push_connection_complete_event>
1005b190:	7bf8      	ldrb	r0, [r7, #15]
1005b192:	2800      	cmp	r0, #0
1005b194:	d003      	beq.n	1005b19e <llc_conn_go_to_connect+0x486>
1005b196:	7ab9      	ldrb	r1, [r7, #10]
1005b198:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
1005b19a:	f7ff fa41 	bl	1005a620 <llc_conn_push_adv_set_terminated_event>
1005b19e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1005b1a0:	7801      	ldrb	r1, [r0, #0]
1005b1a2:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
1005b1a4:	f7ff fbb0 	bl	1005a908 <llc_conn_push_csa_event>
1005b1a8:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005b1aa:	6b08      	ldr	r0, [r1, #48]	@ 0x30
1005b1ac:	6b49      	ldr	r1, [r1, #52]	@ 0x34
1005b1ae:	f7ff f9df 	bl	1005a570 <llc_conn_list_add_address>
1005b1b2:	7b7c      	ldrb	r4, [r7, #13]
1005b1b4:	7bbf      	ldrb	r7, [r7, #14]
1005b1b6:	4638      	mov	r0, r7
1005b1b8:	f7f8 fe4f 	bl	10053e5a <BLEPLAT_CNTR_SmGetTxPwr>
1005b1bc:	9021      	str	r0, [sp, #132]	@ 0x84
1005b1be:	4638      	mov	r0, r7
1005b1c0:	f7f8 fe60 	bl	10053e84 <BLEPLAT_CNTR_SmInitTo0>
1005b1c4:	4638      	mov	r0, r7
1005b1c6:	9d22      	ldr	r5, [sp, #136]	@ 0x88
1005b1c8:	4629      	mov	r1, r5
1005b1ca:	f7f8 ffd8 	bl	1005417e <BLEPLAT_CNTR_SmSetTxPhy>
1005b1ce:	4638      	mov	r0, r7
1005b1d0:	4629      	mov	r1, r5
1005b1d2:	f7f8 ff68 	bl	100540a6 <BLEPLAT_CNTR_SmSetRxPhy>
1005b1d6:	4638      	mov	r0, r7
1005b1d8:	9918      	ldr	r1, [sp, #96]	@ 0x60
1005b1da:	f7f8 fe83 	bl	10053ee4 <BLEPLAT_CNTR_SmSetChannelMap>
1005b1de:	4638      	mov	r0, r7
1005b1e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
1005b1e2:	f7f8 fe6d 	bl	10053ec0 <BLEPLAT_CNTR_SmSetAccessAddr>
1005b1e6:	4638      	mov	r0, r7
1005b1e8:	991e      	ldr	r1, [sp, #120]	@ 0x78
1005b1ea:	f7f8 fff2 	bl	100541d2 <BLEPLAT_CNTR_SmSetUnmappedChan>
1005b1ee:	4638      	mov	r0, r7
1005b1f0:	991b      	ldr	r1, [sp, #108]	@ 0x6c
1005b1f2:	f7f8 fecf 	bl	10053f94 <BLEPLAT_CNTR_SmSetHopIncr>
1005b1f6:	4638      	mov	r0, r7
1005b1f8:	9916      	ldr	r1, [sp, #88]	@ 0x58
1005b1fa:	f7f8 fea4 	bl	10053f46 <BLEPLAT_CNTR_SmSetCrcInit>
1005b1fe:	4638      	mov	r0, r7
1005b200:	4631      	mov	r1, r6
1005b202:	f7f8 ffaa 	bl	1005415a <BLEPLAT_CNTR_SmSetTxPacketPtr>
1005b206:	4635      	mov	r5, r6
1005b208:	3514      	adds	r5, #20
1005b20a:	4638      	mov	r0, r7
1005b20c:	4629      	mov	r1, r5
1005b20e:	f7f8 ff38 	bl	10054082 <BLEPLAT_CNTR_SmSetRxPacketPtr>
1005b212:	4638      	mov	r0, r7
1005b214:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005b216:	f7f8 ffc7 	bl	100541a8 <BLEPLAT_CNTR_SmSetTxPwr>
1005b21a:	f7fe f95b 	bl	100594d4 <cte_csr_ucfg_weak>
1005b21e:	2800      	cmp	r0, #0
1005b220:	d102      	bne.n	1005b228 <llc_conn_go_to_connect+0x510>
1005b222:	4638      	mov	r0, r7
1005b224:	f7f8 fcd2 	bl	10053bcc <BLEPLAT_CNTR_SmCteOff>
1005b228:	4638      	mov	r0, r7
1005b22a:	2c00      	cmp	r4, #0
1005b22c:	d002      	beq.n	1005b234 <llc_conn_go_to_connect+0x51c>
1005b22e:	f7f8 ff19 	bl	10054064 <BLEPLAT_CNTR_SmSetRxMode>
1005b232:	e001      	b.n	1005b238 <llc_conn_go_to_connect+0x520>
1005b234:	f7f8 ff82 	bl	1005413c <BLEPLAT_CNTR_SmSetTxMode>
1005b238:	4634      	mov	r4, r6
1005b23a:	3428      	adds	r4, #40	@ 0x28
1005b23c:	f7fe f9a6 	bl	1005958c <data_length_extension_csr_ucfg_weak>
1005b240:	2801      	cmp	r0, #1
1005b242:	d101      	bne.n	1005b248 <llc_conn_go_to_connect+0x530>
1005b244:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005b246:	e00c      	b.n	1005b262 <llc_conn_go_to_connect+0x54a>
1005b248:	f000 fbee 	bl	1005ba28 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005b24c:	2801      	cmp	r0, #1
1005b24e:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005b250:	d007      	beq.n	1005b262 <llc_conn_go_to_connect+0x54a>
1005b252:	f000 fbdf 	bl	1005ba14 <cis_csr_ucfg_weak>
1005b256:	2801      	cmp	r0, #1
1005b258:	d001      	beq.n	1005b25e <llc_conn_go_to_connect+0x546>
1005b25a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1005b25c:	e001      	b.n	1005b262 <llc_conn_go_to_connect+0x54a>
1005b25e:	981d      	ldr	r0, [sp, #116]	@ 0x74
1005b260:	43c0      	mvns	r0, r0
1005b262:	b2c1      	uxtb	r1, r0
1005b264:	4638      	mov	r0, r7
1005b266:	f7f8 fe80 	bl	10053f6a <BLEPLAT_CNTR_SmSetDataLength>
1005b26a:	4630      	mov	r0, r6
1005b26c:	4621      	mov	r1, r4
1005b26e:	463a      	mov	r2, r7
1005b270:	f000 fa3c 	bl	1005b6ec <llc_conn_set_blue_packets>
1005b274:	2100      	movs	r1, #0
1005b276:	4628      	mov	r0, r5
1005b278:	463a      	mov	r2, r7
1005b27a:	f000 fa37 	bl	1005b6ec <llc_conn_set_blue_packets>
1005b27e:	4630      	mov	r0, r6
1005b280:	f7f8 fc83 	bl	10053b8a <BLEPLAT_CNTR_PacketSetTxReady>
1005b284:	4628      	mov	r0, r5
1005b286:	f7f8 fc3e 	bl	10053b06 <BLEPLAT_CNTR_PacketSetRxReady>
1005b28a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
1005b28c:	7b81      	ldrb	r1, [r0, #14]
1005b28e:	9122      	str	r1, [sp, #136]	@ 0x88
1005b290:	7c40      	ldrb	r0, [r0, #17]
1005b292:	4634      	mov	r4, r6
1005b294:	3444      	adds	r4, #68	@ 0x44
1005b296:	cc1c      	ldmia	r4, {r2, r3, r4}
1005b298:	9920      	ldr	r1, [sp, #128]	@ 0x80
1005b29a:	788d      	ldrb	r5, [r1, #2]
1005b29c:	78cf      	ldrb	r7, [r1, #3]
1005b29e:	490f      	ldr	r1, [pc, #60]	@ (1005b2dc <__arm_cp.11_3>)
1005b2a0:	9107      	str	r1, [sp, #28]
1005b2a2:	490f      	ldr	r1, [pc, #60]	@ (1005b2e0 <__arm_cp.11_4>)
1005b2a4:	9106      	str	r1, [sp, #24]
1005b2a6:	490f      	ldr	r1, [pc, #60]	@ (1005b2e4 <__arm_cp.11_5>)
1005b2a8:	9105      	str	r1, [sp, #20]
1005b2aa:	490f      	ldr	r1, [pc, #60]	@ (1005b2e8 <__arm_cp.11_6>)
1005b2ac:	9104      	str	r1, [sp, #16]
1005b2ae:	9703      	str	r7, [sp, #12]
1005b2b0:	9502      	str	r5, [sp, #8]
1005b2b2:	1ad1      	subs	r1, r2, r3
1005b2b4:	9101      	str	r1, [sp, #4]
1005b2b6:	9400      	str	r4, [sp, #0]
1005b2b8:	2800      	cmp	r0, #0
1005b2ba:	d001      	beq.n	1005b2c0 <llc_conn_go_to_connect+0x5a8>
1005b2bc:	4c0c      	ldr	r4, [pc, #48]	@ (1005b2f0 <__arm_cp.11_8>)
1005b2be:	e000      	b.n	1005b2c2 <llc_conn_go_to_connect+0x5aa>
1005b2c0:	4c0a      	ldr	r4, [pc, #40]	@ (1005b2ec <__arm_cp.11_7>)
1005b2c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1005b2c4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1005b2c6:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005b2c8:	4631      	mov	r1, r6
1005b2ca:	47a0      	blx	r4
1005b2cc:	b02d      	add	sp, #180	@ 0xb4
1005b2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005b2d0 <__arm_cp.11_0>:
1005b2d0:	000004ff 	.word	0x000004ff

1005b2d4 <__arm_cp.11_1>:
1005b2d4:	0000f7fb 	.word	0x0000f7fb

1005b2d8 <__arm_cp.11_2>:
1005b2d8:	20002470 	.word	0x20002470

1005b2dc <__arm_cp.11_3>:
1005b2dc:	1006530f 	.word	0x1006530f

1005b2e0 <__arm_cp.11_4>:
1005b2e0:	1006549d 	.word	0x1006549d

1005b2e4 <__arm_cp.11_5>:
1005b2e4:	10065347 	.word	0x10065347

1005b2e8 <__arm_cp.11_6>:
1005b2e8:	100653d1 	.word	0x100653d1

1005b2ec <__arm_cp.11_7>:
1005b2ec:	100607bd 	.word	0x100607bd

1005b2f0 <__arm_cp.11_8>:
1005b2f0:	10060359 	.word	0x10060359

1005b2f4 <llc_conn_peripheral_roll_back_params>:
1005b2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b2f6:	b089      	sub	sp, #36	@ 0x24
1005b2f8:	4604      	mov	r4, r0
1005b2fa:	2091      	movs	r0, #145	@ 0x91
1005b2fc:	0040      	lsls	r0, r0, #1
1005b2fe:	5a25      	ldrh	r5, [r4, r0]
1005b300:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
1005b302:	26ff      	movs	r6, #255	@ 0xff
1005b304:	3608      	adds	r6, #8
1005b306:	f7f7 fa70 	bl	100527ea <BLEPLAT_GetCurrentSysTime>
1005b30a:	5da1      	ldrb	r1, [r4, r6]
1005b30c:	22fe      	movs	r2, #254	@ 0xfe
1005b30e:	400a      	ands	r2, r1
1005b310:	55a2      	strb	r2, [r4, r6]
1005b312:	2135      	movs	r1, #53	@ 0x35
1005b314:	0109      	lsls	r1, r1, #4
1005b316:	1846      	adds	r6, r0, r1
1005b318:	437d      	muls	r5, r7
1005b31a:	0068      	lsls	r0, r5, #1
1005b31c:	1830      	adds	r0, r6, r0
1005b31e:	f3ef 8110 	mrs	r1, PRIMASK
1005b322:	b672      	cpsid	i
1005b324:	6c61      	ldr	r1, [r4, #68]	@ 0x44
1005b326:	43c9      	mvns	r1, r1
1005b328:	1840      	adds	r0, r0, r1
1005b32a:	d400      	bmi.n	1005b32e <llc_conn_peripheral_roll_back_params+0x3a>
1005b32c:	e089      	b.n	1005b442 <llc_conn_peripheral_roll_back_params+0x14e>
1005b32e:	2083      	movs	r0, #131	@ 0x83
1005b330:	0040      	lsls	r0, r0, #1
1005b332:	1820      	adds	r0, r4, r0
1005b334:	9008      	str	r0, [sp, #32]
1005b336:	4630      	mov	r0, r6
1005b338:	f005 f84a 	bl	100603d0 <LL_sched_is_scheduler_call_pending>
1005b33c:	2800      	cmp	r0, #0
1005b33e:	d004      	beq.n	1005b34a <llc_conn_peripheral_roll_back_params+0x56>
1005b340:	4941      	ldr	r1, [pc, #260]	@ (1005b448 <__arm_cp.14_0>)
1005b342:	6809      	ldr	r1, [r1, #0]
1005b344:	7bc9      	ldrb	r1, [r1, #15]
1005b346:	2903      	cmp	r1, #3
1005b348:	d171      	bne.n	1005b42e <llc_conn_peripheral_roll_back_params+0x13a>
1005b34a:	9706      	str	r7, [sp, #24]
1005b34c:	9004      	str	r0, [sp, #16]
1005b34e:	4620      	mov	r0, r4
1005b350:	3031      	adds	r0, #49	@ 0x31
1005b352:	9007      	str	r0, [sp, #28]
1005b354:	4620      	mov	r0, r4
1005b356:	3042      	adds	r0, #66	@ 0x42
1005b358:	9005      	str	r0, [sp, #20]
1005b35a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005b35c:	1b80      	subs	r0, r0, r6
1005b35e:	2700      	movs	r7, #0
1005b360:	2108      	movs	r1, #8
1005b362:	b24a      	sxtb	r2, r1
1005b364:	2a00      	cmp	r2, #0
1005b366:	d40c      	bmi.n	1005b382 <llc_conn_peripheral_roll_back_params+0x8e>
1005b368:	b2cb      	uxtb	r3, r1
1005b36a:	462a      	mov	r2, r5
1005b36c:	409a      	lsls	r2, r3
1005b36e:	4290      	cmp	r0, r2
1005b370:	d302      	bcc.n	1005b378 <llc_conn_peripheral_roll_back_params+0x84>
1005b372:	2601      	movs	r6, #1
1005b374:	409e      	lsls	r6, r3
1005b376:	19bf      	adds	r7, r7, r6
1005b378:	1a82      	subs	r2, r0, r2
1005b37a:	d300      	bcc.n	1005b37e <llc_conn_peripheral_roll_back_params+0x8a>
1005b37c:	4610      	mov	r0, r2
1005b37e:	1e49      	subs	r1, r1, #1
1005b380:	e7ef      	b.n	1005b362 <llc_conn_peripheral_roll_back_params+0x6e>
1005b382:	9908      	ldr	r1, [sp, #32]
1005b384:	8b88      	ldrh	r0, [r1, #28]
1005b386:	4347      	muls	r7, r0
1005b388:	9a05      	ldr	r2, [sp, #20]
1005b38a:	8810      	ldrh	r0, [r2, #0]
1005b38c:	1bc0      	subs	r0, r0, r7
1005b38e:	8010      	strh	r0, [r2, #0]
1005b390:	b2be      	uxth	r6, r7
1005b392:	9d07      	ldr	r5, [sp, #28]
1005b394:	7c28      	ldrb	r0, [r5, #16]
1005b396:	7809      	ldrb	r1, [r1, #0]
1005b398:	2901      	cmp	r1, #1
1005b39a:	d10f      	bne.n	1005b3bc <llc_conn_peripheral_roll_back_params+0xc8>
1005b39c:	4617      	mov	r7, r2
1005b39e:	f7f8 fc66 	bl	10053c6e <BLEPLAT_CNTR_SmGetAccessAddr>
1005b3a2:	883f      	ldrh	r7, [r7, #0]
1005b3a4:	7c2a      	ldrb	r2, [r5, #16]
1005b3a6:	2300      	movs	r3, #0
1005b3a8:	9300      	str	r3, [sp, #0]
1005b3aa:	9001      	str	r0, [sp, #4]
1005b3ac:	9302      	str	r3, [sp, #8]
1005b3ae:	4621      	mov	r1, r4
1005b3b0:	31e0      	adds	r1, #224	@ 0xe0
1005b3b2:	4610      	mov	r0, r2
1005b3b4:	463a      	mov	r2, r7
1005b3b6:	f000 fa1e 	bl	1005b7f6 <llc_mngm_csa2_select_channel_for_task>
1005b3ba:	e010      	b.n	1005b3de <llc_conn_peripheral_roll_back_params+0xea>
1005b3bc:	f7f8 fcce 	bl	10053d5c <BLEPLAT_CNTR_SmGetHopIncr>
1005b3c0:	2125      	movs	r1, #37	@ 0x25
1005b3c2:	1a08      	subs	r0, r1, r0
1005b3c4:	9008      	str	r0, [sp, #32]
1005b3c6:	4347      	muls	r7, r0
1005b3c8:	7828      	ldrb	r0, [r5, #0]
1005b3ca:	1838      	adds	r0, r7, r0
1005b3cc:	b280      	uxth	r0, r0
1005b3ce:	f000 f9e7 	bl	1005b7a0 <llc_mngm_mod_37>
1005b3d2:	7028      	strb	r0, [r5, #0]
1005b3d4:	9908      	ldr	r1, [sp, #32]
1005b3d6:	1808      	adds	r0, r1, r0
1005b3d8:	b280      	uxth	r0, r0
1005b3da:	f000 f9e1 	bl	1005b7a0 <llc_mngm_mod_37>
1005b3de:	4601      	mov	r1, r0
1005b3e0:	462f      	mov	r7, r5
1005b3e2:	7c28      	ldrb	r0, [r5, #16]
1005b3e4:	f7f8 fef5 	bl	100541d2 <BLEPLAT_CNTR_SmSetUnmappedChan>
1005b3e8:	9806      	ldr	r0, [sp, #24]
1005b3ea:	4346      	muls	r6, r0
1005b3ec:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005b3ee:	1b80      	subs	r0, r0, r6
1005b3f0:	6460      	str	r0, [r4, #68]	@ 0x44
1005b3f2:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
1005b3f4:	4631      	mov	r1, r6
1005b3f6:	f004 fd05 	bl	1005fe04 <LL_link_calculate_window_widening_from_ppm>
1005b3fa:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
1005b3fc:	4282      	cmp	r2, r0
1005b3fe:	d904      	bls.n	1005b40a <llc_conn_peripheral_roll_back_params+0x116>
1005b400:	1a12      	subs	r2, r2, r0
1005b402:	2a0d      	cmp	r2, #13
1005b404:	d800      	bhi.n	1005b408 <llc_conn_peripheral_roll_back_params+0x114>
1005b406:	220d      	movs	r2, #13
1005b408:	64a2      	str	r2, [r4, #72]	@ 0x48
1005b40a:	9d04      	ldr	r5, [sp, #16]
1005b40c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
1005b40e:	1980      	adds	r0, r0, r6
1005b410:	6660      	str	r0, [r4, #100]	@ 0x64
1005b412:	6f60      	ldr	r0, [r4, #116]	@ 0x74
1005b414:	0051      	lsls	r1, r2, #1
1005b416:	1809      	adds	r1, r1, r0
1005b418:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005b41a:	1a82      	subs	r2, r0, r2
1005b41c:	7c38      	ldrb	r0, [r7, #16]
1005b41e:	f004 ff7f 	bl	10060320 <LL_sched_set_taskslot_length_anchor>
1005b422:	2d00      	cmp	r5, #0
1005b424:	d10d      	bne.n	1005b442 <llc_conn_peripheral_roll_back_params+0x14e>
1005b426:	7c38      	ldrb	r0, [r7, #16]
1005b428:	f004 fff4 	bl	10060414 <LL_sched_engine>
1005b42c:	e009      	b.n	1005b442 <llc_conn_peripheral_roll_back_params+0x14e>
1005b42e:	9a08      	ldr	r2, [sp, #32]
1005b430:	7850      	ldrb	r0, [r2, #1]
1005b432:	2101      	movs	r1, #1
1005b434:	4301      	orrs	r1, r0
1005b436:	7051      	strb	r1, [r2, #1]
1005b438:	2013      	movs	r0, #19
1005b43a:	f007 f9a1 	bl	10062780 <tsk_notify_idx>
1005b43e:	f7f6 fb22 	bl	10051a86 <BLE_STACK_ProcessRequest>
1005b442:	b662      	cpsie	i
1005b444:	b009      	add	sp, #36	@ 0x24
1005b446:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005b448 <__arm_cp.14_0>:
1005b448:	20002474 	.word	0x20002474

1005b44c <llc_conn_reserve_conn_idx>:
1005b44c:	b510      	push	{r4, lr}
1005b44e:	2400      	movs	r4, #0
1005b450:	4620      	mov	r0, r4
1005b452:	f7fe fd71 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005b456:	490a      	ldr	r1, [pc, #40]	@ (1005b480 <__arm_cp.15_0>)
1005b458:	6809      	ldr	r1, [r1, #0]
1005b45a:	2234      	movs	r2, #52	@ 0x34
1005b45c:	5c89      	ldrb	r1, [r1, r2]
1005b45e:	302c      	adds	r0, #44	@ 0x2c
1005b460:	42a1      	cmp	r1, r4
1005b462:	d007      	beq.n	1005b474 <llc_conn_reserve_conn_idx+0x28>
1005b464:	7802      	ldrb	r2, [r0, #0]
1005b466:	2a00      	cmp	r2, #0
1005b468:	d006      	beq.n	1005b478 <llc_conn_reserve_conn_idx+0x2c>
1005b46a:	224d      	movs	r2, #77	@ 0x4d
1005b46c:	0092      	lsls	r2, r2, #2
1005b46e:	1880      	adds	r0, r0, r2
1005b470:	1c64      	adds	r4, r4, #1
1005b472:	e7f5      	b.n	1005b460 <llc_conn_reserve_conn_idx+0x14>
1005b474:	24ff      	movs	r4, #255	@ 0xff
1005b476:	e001      	b.n	1005b47c <llc_conn_reserve_conn_idx+0x30>
1005b478:	2101      	movs	r1, #1
1005b47a:	7001      	strb	r1, [r0, #0]
1005b47c:	b2e0      	uxtb	r0, r4
1005b47e:	bd10      	pop	{r4, pc}

1005b480 <__arm_cp.15_0>:
1005b480:	2000241c 	.word	0x2000241c

1005b484 <llc_conn_send_acl_data>:
1005b484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005b486:	4606      	mov	r6, r0
1005b488:	8800      	ldrh	r0, [r0, #0]
1005b48a:	f7fe fd63 	bl	10059f54 <llc_conn_get_cntxt_per_p_from_handle>
1005b48e:	2800      	cmp	r0, #0
1005b490:	d012      	beq.n	1005b4b8 <llc_conn_send_acl_data+0x34>
1005b492:	4604      	mov	r4, r0
1005b494:	4607      	mov	r7, r0
1005b496:	372c      	adds	r7, #44	@ 0x2c
1005b498:	f3ef 8010 	mrs	r0, PRIMASK
1005b49c:	b672      	cpsid	i
1005b49e:	463d      	mov	r5, r7
1005b4a0:	3554      	adds	r5, #84	@ 0x54
1005b4a2:	4628      	mov	r0, r5
1005b4a4:	4631      	mov	r1, r6
1005b4a6:	f007 fb61 	bl	10062b6c <ACL_list_insert_tail>
1005b4aa:	7838      	ldrb	r0, [r7, #0]
1005b4ac:	2803      	cmp	r0, #3
1005b4ae:	d105      	bne.n	1005b4bc <llc_conn_send_acl_data+0x38>
1005b4b0:	4620      	mov	r0, r4
1005b4b2:	f7ff ff1f 	bl	1005b2f4 <llc_conn_peripheral_roll_back_params>
1005b4b6:	e01a      	b.n	1005b4ee <llc_conn_send_acl_data+0x6a>
1005b4b8:	2002      	movs	r0, #2
1005b4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005b4bc:	7d78      	ldrb	r0, [r7, #21]
1005b4be:	4e28      	ldr	r6, [pc, #160]	@ (1005b560 <__arm_cp.16_0>)
1005b4c0:	6831      	ldr	r1, [r6, #0]
1005b4c2:	7b49      	ldrb	r1, [r1, #13]
1005b4c4:	4288      	cmp	r0, r1
1005b4c6:	d112      	bne.n	1005b4ee <llc_conn_send_acl_data+0x6a>
1005b4c8:	f7f7 f98f 	bl	100527ea <BLEPLAT_GetCurrentSysTime>
1005b4cc:	6831      	ldr	r1, [r6, #0]
1005b4ce:	6809      	ldr	r1, [r1, #0]
1005b4d0:	43c9      	mvns	r1, r1
1005b4d2:	1840      	adds	r0, r0, r1
1005b4d4:	2101      	movs	r1, #1
1005b4d6:	0289      	lsls	r1, r1, #10
1005b4d8:	1840      	adds	r0, r0, r1
1005b4da:	d508      	bpl.n	1005b4ee <llc_conn_send_acl_data+0x6a>
1005b4dc:	205c      	movs	r0, #92	@ 0x5c
1005b4de:	5c38      	ldrb	r0, [r7, r0]
1005b4e0:	0640      	lsls	r0, r0, #25
1005b4e2:	d404      	bmi.n	1005b4ee <llc_conn_send_acl_data+0x6a>
1005b4e4:	4620      	mov	r0, r4
1005b4e6:	f7fe ffe4 	bl	1005a4b2 <llc_conn_get_tx_acl_blocked>
1005b4ea:	2800      	cmp	r0, #0
1005b4ec:	d002      	beq.n	1005b4f4 <llc_conn_send_acl_data+0x70>
1005b4ee:	b662      	cpsie	i
1005b4f0:	2084      	movs	r0, #132	@ 0x84
1005b4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005b4f4:	4620      	mov	r0, r4
1005b4f6:	f7f8 fa12 	bl	1005391e <BLEPLAT_CNTR_PacketGetDataPtr>
1005b4fa:	4606      	mov	r6, r0
1005b4fc:	4620      	mov	r0, r4
1005b4fe:	3028      	adds	r0, #40	@ 0x28
1005b500:	4286      	cmp	r6, r0
1005b502:	d00a      	beq.n	1005b51a <llc_conn_send_acl_data+0x96>
1005b504:	2101      	movs	r1, #1
1005b506:	4620      	mov	r0, r4
1005b508:	f7fe ffac 	bl	1005a464 <llc_conn_get_ctrl_pdu_data_p>
1005b50c:	4286      	cmp	r6, r0
1005b50e:	d0ee      	beq.n	1005b4ee <llc_conn_send_acl_data+0x6a>
1005b510:	7830      	ldrb	r0, [r6, #0]
1005b512:	2110      	movs	r1, #16
1005b514:	4301      	orrs	r1, r0
1005b516:	7031      	strb	r1, [r6, #0]
1005b518:	e7e9      	b.n	1005b4ee <llc_conn_send_acl_data+0x6a>
1005b51a:	4812      	ldr	r0, [pc, #72]	@ (1005b564 <__arm_cp.16_1>)
1005b51c:	6800      	ldr	r0, [r0, #0]
1005b51e:	218c      	movs	r1, #140	@ 0x8c
1005b520:	5840      	ldr	r0, [r0, r1]
1005b522:	682e      	ldr	r6, [r5, #0]
1005b524:	8a31      	ldrh	r1, [r6, #16]
1005b526:	89f2      	ldrh	r2, [r6, #14]
1005b528:	1851      	adds	r1, r2, r1
1005b52a:	221f      	movs	r2, #31
1005b52c:	400a      	ands	r2, r1
1005b52e:	1817      	adds	r7, r2, r0
1005b530:	1cbd      	adds	r5, r7, #2
1005b532:	4620      	mov	r0, r4
1005b534:	4629      	mov	r1, r5
1005b536:	f7f8 fa34 	bl	100539a2 <BLEPLAT_CNTR_PacketSetDataPtr>
1005b53a:	4620      	mov	r0, r4
1005b53c:	4631      	mov	r1, r6
1005b53e:	f7fe fee5 	bl	1005a30c <llc_conn_copy_tx_data_packet>
1005b542:	67e6      	str	r6, [r4, #124]	@ 0x7c
1005b544:	78f8      	ldrb	r0, [r7, #3]
1005b546:	2800      	cmp	r0, #0
1005b548:	d0d1      	beq.n	1005b4ee <llc_conn_send_acl_data+0x6a>
1005b54a:	2101      	movs	r1, #1
1005b54c:	4620      	mov	r0, r4
1005b54e:	f7fe ff8f 	bl	1005a470 <llc_conn_get_enc_on>
1005b552:	2801      	cmp	r0, #1
1005b554:	d1cb      	bne.n	1005b4ee <llc_conn_send_acl_data+0x6a>
1005b556:	7868      	ldrb	r0, [r5, #1]
1005b558:	1d00      	adds	r0, r0, #4
1005b55a:	7068      	strb	r0, [r5, #1]
1005b55c:	e7c7      	b.n	1005b4ee <llc_conn_send_acl_data+0x6a>
1005b55e:	46c0      	nop			@ (mov r8, r8)

1005b560 <__arm_cp.16_0>:
1005b560:	20002474 	.word	0x20002474

1005b564 <__arm_cp.16_1>:
1005b564:	20002470 	.word	0x20002470

1005b568 <llc_conn_set_taskslot_params>:
1005b568:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b56a:	b085      	sub	sp, #20
1005b56c:	460f      	mov	r7, r1
1005b56e:	4604      	mov	r4, r0
1005b570:	2041      	movs	r0, #65	@ 0x41
1005b572:	5c20      	ldrb	r0, [r4, r0]
1005b574:	2183      	movs	r1, #131	@ 0x83
1005b576:	0049      	lsls	r1, r1, #1
1005b578:	5c61      	ldrb	r1, [r4, r1]
1005b57a:	4625      	mov	r5, r4
1005b57c:	352c      	adds	r5, #44	@ 0x2c
1005b57e:	2901      	cmp	r1, #1
1005b580:	d10d      	bne.n	1005b59e <llc_conn_set_taskslot_params+0x36>
1005b582:	f7f8 fb74 	bl	10053c6e <BLEPLAT_CNTR_SmGetAccessAddr>
1005b586:	8aea      	ldrh	r2, [r5, #22]
1005b588:	7d6e      	ldrb	r6, [r5, #21]
1005b58a:	2300      	movs	r3, #0
1005b58c:	9300      	str	r3, [sp, #0]
1005b58e:	9001      	str	r0, [sp, #4]
1005b590:	9302      	str	r3, [sp, #8]
1005b592:	4621      	mov	r1, r4
1005b594:	31e0      	adds	r1, #224	@ 0xe0
1005b596:	4630      	mov	r0, r6
1005b598:	f000 f92d 	bl	1005b7f6 <llc_mngm_csa2_select_channel_for_task>
1005b59c:	e010      	b.n	1005b5c0 <llc_conn_set_taskslot_params+0x58>
1005b59e:	4616      	mov	r6, r2
1005b5a0:	f7f8 fbdc 	bl	10053d5c <BLEPLAT_CNTR_SmGetHopIncr>
1005b5a4:	9704      	str	r7, [sp, #16]
1005b5a6:	4607      	mov	r7, r0
1005b5a8:	4346      	muls	r6, r0
1005b5aa:	7968      	ldrb	r0, [r5, #5]
1005b5ac:	1836      	adds	r6, r6, r0
1005b5ae:	b2b0      	uxth	r0, r6
1005b5b0:	f000 f8f6 	bl	1005b7a0 <llc_mngm_mod_37>
1005b5b4:	7168      	strb	r0, [r5, #5]
1005b5b6:	1bf0      	subs	r0, r6, r7
1005b5b8:	9f04      	ldr	r7, [sp, #16]
1005b5ba:	b280      	uxth	r0, r0
1005b5bc:	f000 f8f0 	bl	1005b7a0 <llc_mngm_mod_37>
1005b5c0:	4601      	mov	r1, r0
1005b5c2:	7d68      	ldrb	r0, [r5, #21]
1005b5c4:	f7f8 fe05 	bl	100541d2 <BLEPLAT_CNTR_SmSetUnmappedChan>
1005b5c8:	7828      	ldrb	r0, [r5, #0]
1005b5ca:	2802      	cmp	r0, #2
1005b5cc:	d10c      	bne.n	1005b5e8 <llc_conn_set_taskslot_params+0x80>
1005b5ce:	4620      	mov	r0, r4
1005b5d0:	f7f8 fa8c 	bl	10053aec <BLEPLAT_CNTR_PacketSetPllTrig>
1005b5d4:	4620      	mov	r0, r4
1005b5d6:	f7f8 f9f3 	bl	100539c0 <BLEPLAT_CNTR_PacketSetIncChan>
1005b5da:	7d68      	ldrb	r0, [r5, #21]
1005b5dc:	f7f8 fdae 	bl	1005413c <BLEPLAT_CNTR_SmSetTxMode>
1005b5e0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
1005b5e2:	6d21      	ldr	r1, [r4, #80]	@ 0x50
1005b5e4:	7d68      	ldrb	r0, [r5, #21]
1005b5e6:	e02d      	b.n	1005b644 <llc_conn_set_taskslot_params+0xdc>
1005b5e8:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
1005b5ea:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
1005b5ec:	4639      	mov	r1, r7
1005b5ee:	f004 fc09 	bl	1005fe04 <LL_link_calculate_window_widening_from_ppm>
1005b5f2:	1980      	adds	r0, r0, r6
1005b5f4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
1005b5f6:	2900      	cmp	r1, #0
1005b5f8:	d100      	bne.n	1005b5fc <llc_conn_set_taskslot_params+0x94>
1005b5fa:	300d      	adds	r0, #13
1005b5fc:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
1005b5fe:	0849      	lsrs	r1, r1, #1
1005b600:	393e      	subs	r1, #62	@ 0x3e
1005b602:	4288      	cmp	r0, r1
1005b604:	d901      	bls.n	1005b60a <llc_conn_set_taskslot_params+0xa2>
1005b606:	2008      	movs	r0, #8
1005b608:	e022      	b.n	1005b650 <llc_conn_set_taskslot_params+0xe8>
1005b60a:	64a0      	str	r0, [r4, #72]	@ 0x48
1005b60c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1005b60e:	0040      	lsls	r0, r0, #1
1005b610:	2900      	cmp	r1, #0
1005b612:	d001      	beq.n	1005b618 <llc_conn_set_taskslot_params+0xb0>
1005b614:	180f      	adds	r7, r1, r0
1005b616:	e005      	b.n	1005b624 <llc_conn_set_taskslot_params+0xbc>
1005b618:	6f61      	ldr	r1, [r4, #116]	@ 0x74
1005b61a:	1808      	adds	r0, r1, r0
1005b61c:	6d27      	ldr	r7, [r4, #80]	@ 0x50
1005b61e:	42b8      	cmp	r0, r7
1005b620:	d800      	bhi.n	1005b624 <llc_conn_set_taskslot_params+0xbc>
1005b622:	4607      	mov	r7, r0
1005b624:	4626      	mov	r6, r4
1005b626:	3614      	adds	r6, #20
1005b628:	4630      	mov	r0, r6
1005b62a:	f7f8 fa5f 	bl	10053aec <BLEPLAT_CNTR_PacketSetPllTrig>
1005b62e:	4630      	mov	r0, r6
1005b630:	f7f8 f9c6 	bl	100539c0 <BLEPLAT_CNTR_PacketSetIncChan>
1005b634:	7d68      	ldrb	r0, [r5, #21]
1005b636:	f7f8 fd15 	bl	10054064 <BLEPLAT_CNTR_SmSetRxMode>
1005b63a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005b63c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
1005b63e:	1a42      	subs	r2, r0, r1
1005b640:	7d68      	ldrb	r0, [r5, #21]
1005b642:	4639      	mov	r1, r7
1005b644:	f004 fe6c 	bl	10060320 <LL_sched_set_taskslot_length_anchor>
1005b648:	8e60      	ldrh	r0, [r4, #50]	@ 0x32
1005b64a:	1c40      	adds	r0, r0, #1
1005b64c:	8660      	strh	r0, [r4, #50]	@ 0x32
1005b64e:	2000      	movs	r0, #0
1005b650:	b005      	add	sp, #20
1005b652:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005b654 <llc_conn_update_receive_window>:
1005b654:	b570      	push	{r4, r5, r6, lr}
1005b656:	4604      	mov	r4, r0
1005b658:	4606      	mov	r6, r0
1005b65a:	362c      	adds	r6, #44	@ 0x2c
1005b65c:	4605      	mov	r5, r0
1005b65e:	35d0      	adds	r5, #208	@ 0xd0
1005b660:	f7f3 fa8e 	bl	1004eb80 <phy_upd_csr_ucfg>
1005b664:	2801      	cmp	r0, #1
1005b666:	d10b      	bne.n	1005b680 <llc_conn_update_receive_window+0x2c>
1005b668:	7930      	ldrb	r0, [r6, #4]
1005b66a:	210e      	movs	r1, #14
1005b66c:	4341      	muls	r1, r0
1005b66e:	480e      	ldr	r0, [pc, #56]	@ (1005b6a8 <__arm_cp.18_0>)
1005b670:	6800      	ldr	r0, [r0, #0]
1005b672:	229c      	movs	r2, #156	@ 0x9c
1005b674:	5880      	ldr	r0, [r0, r2]
1005b676:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005b678:	6940      	ldr	r0, [r0, #20]
1005b67a:	1840      	adds	r0, r0, r1
1005b67c:	79c0      	ldrb	r0, [r0, #7]
1005b67e:	e000      	b.n	1005b682 <llc_conn_update_receive_window+0x2e>
1005b680:	2001      	movs	r0, #1
1005b682:	f7f8 fdca 	bl	1005421a <BLEPLAT_CNTR_DemodDelaySt>
1005b686:	4909      	ldr	r1, [pc, #36]	@ (1005b6ac <__arm_cp.18_1>)
1005b688:	4348      	muls	r0, r1
1005b68a:	0a00      	lsrs	r0, r0, #8
1005b68c:	3010      	adds	r0, #16
1005b68e:	6028      	str	r0, [r5, #0]
1005b690:	7832      	ldrb	r2, [r6, #0]
1005b692:	2a03      	cmp	r2, #3
1005b694:	d107      	bne.n	1005b6a6 <llc_conn_update_receive_window+0x52>
1005b696:	6b62      	ldr	r2, [r4, #52]	@ 0x34
1005b698:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
1005b69a:	005b      	lsls	r3, r3, #1
1005b69c:	189a      	adds	r2, r3, r2
1005b69e:	4351      	muls	r1, r2
1005b6a0:	0a09      	lsrs	r1, r1, #8
1005b6a2:	1808      	adds	r0, r1, r0
1005b6a4:	6028      	str	r0, [r5, #0]
1005b6a6:	bd70      	pop	{r4, r5, r6, pc}

1005b6a8 <__arm_cp.18_0>:
1005b6a8:	20002470 	.word	0x20002470

1005b6ac <__arm_cp.18_1>:
1005b6ac:	00000271 	.word	0x00000271

1005b6b0 <llc_conn_peripheral_roll_back_params_tsk>:
1005b6b0:	b570      	push	{r4, r5, r6, lr}
1005b6b2:	2400      	movs	r4, #0
1005b6b4:	4620      	mov	r0, r4
1005b6b6:	f7fe fc3f 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005b6ba:	4605      	mov	r5, r0
1005b6bc:	4e0a      	ldr	r6, [pc, #40]	@ (1005b6e8 <__arm_cp.20_0>)
1005b6be:	6830      	ldr	r0, [r6, #0]
1005b6c0:	2134      	movs	r1, #52	@ 0x34
1005b6c2:	5c41      	ldrb	r1, [r0, r1]
1005b6c4:	428c      	cmp	r4, r1
1005b6c6:	d20d      	bcs.n	1005b6e4 <llc_conn_peripheral_roll_back_params_tsk+0x34>
1005b6c8:	21ff      	movs	r1, #255	@ 0xff
1005b6ca:	3108      	adds	r1, #8
1005b6cc:	5c69      	ldrb	r1, [r5, r1]
1005b6ce:	07c9      	lsls	r1, r1, #31
1005b6d0:	d003      	beq.n	1005b6da <llc_conn_peripheral_roll_back_params_tsk+0x2a>
1005b6d2:	4628      	mov	r0, r5
1005b6d4:	f7ff fe0e 	bl	1005b2f4 <llc_conn_peripheral_roll_back_params>
1005b6d8:	6830      	ldr	r0, [r6, #0]
1005b6da:	214d      	movs	r1, #77	@ 0x4d
1005b6dc:	0089      	lsls	r1, r1, #2
1005b6de:	186d      	adds	r5, r5, r1
1005b6e0:	1c64      	adds	r4, r4, #1
1005b6e2:	e7ed      	b.n	1005b6c0 <llc_conn_peripheral_roll_back_params_tsk+0x10>
1005b6e4:	bd70      	pop	{r4, r5, r6, pc}
1005b6e6:	46c0      	nop			@ (mov r8, r8)

1005b6e8 <__arm_cp.20_0>:
1005b6e8:	2000241c 	.word	0x2000241c

1005b6ec <llc_conn_set_blue_packets>:
1005b6ec:	b570      	push	{r4, r5, r6, lr}
1005b6ee:	4616      	mov	r6, r2
1005b6f0:	460d      	mov	r5, r1
1005b6f2:	4604      	mov	r4, r0
1005b6f4:	f7f8 f920 	bl	10053938 <BLEPLAT_CNTR_PacketInitTo0>
1005b6f8:	4620      	mov	r0, r4
1005b6fa:	f7f8 f938 	bl	1005396e <BLEPLAT_CNTR_PacketSetCrcinitSel>
1005b6fe:	4620      	mov	r0, r4
1005b700:	f7f8 f976 	bl	100539f0 <BLEPLAT_CNTR_PacketSetIntDone>
1005b704:	4620      	mov	r0, r4
1005b706:	4621      	mov	r1, r4
1005b708:	f7f8 f9b0 	bl	10053a6c <BLEPLAT_CNTR_PacketSetNextPtr>
1005b70c:	4620      	mov	r0, r4
1005b70e:	f7f8 f9e1 	bl	10053ad4 <BLEPLAT_CNTR_PacketSetNsEn>
1005b712:	4620      	mov	r0, r4
1005b714:	4631      	mov	r1, r6
1005b716:	f7f8 f9c5 	bl	10053aa4 <BLEPLAT_CNTR_PacketSetNextSlot>
1005b71a:	4620      	mov	r0, r4
1005b71c:	f7f8 fa0f 	bl	10053b3e <BLEPLAT_CNTR_PacketSetTimer2Active>
1005b720:	4620      	mov	r0, r4
1005b722:	f7f8 f9e3 	bl	10053aec <BLEPLAT_CNTR_PacketSetPllTrig>
1005b726:	4620      	mov	r0, r4
1005b728:	f7f8 f94a 	bl	100539c0 <BLEPLAT_CNTR_PacketSetIncChan>
1005b72c:	4620      	mov	r0, r4
1005b72e:	f7f8 f990 	bl	10053a52 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005b732:	2d00      	cmp	r5, #0
1005b734:	d00d      	beq.n	1005b752 <llc_conn_set_blue_packets+0x66>
1005b736:	2094      	movs	r0, #148	@ 0x94
1005b738:	2100      	movs	r1, #0
1005b73a:	460a      	mov	r2, r1
1005b73c:	f7f7 ff8a 	bl	10053654 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005b740:	4601      	mov	r1, r0
1005b742:	4620      	mov	r0, r4
1005b744:	f7f8 f9ec 	bl	10053b20 <BLEPLAT_CNTR_PacketSetTimeout>
1005b748:	4620      	mov	r0, r4
1005b74a:	4629      	mov	r1, r5
1005b74c:	f7f8 f929 	bl	100539a2 <BLEPLAT_CNTR_PacketSetDataPtr>
1005b750:	bd70      	pop	{r4, r5, r6, pc}
1005b752:	4812      	ldr	r0, [pc, #72]	@ (1005b79c <__arm_cp.21_0>)
1005b754:	6800      	ldr	r0, [r0, #0]
1005b756:	2190      	movs	r1, #144	@ 0x90
1005b758:	5845      	ldr	r5, [r0, r1]
1005b75a:	2096      	movs	r0, #150	@ 0x96
1005b75c:	2101      	movs	r1, #1
1005b75e:	2200      	movs	r2, #0
1005b760:	f7f7 ff78 	bl	10053654 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005b764:	4601      	mov	r1, r0
1005b766:	4620      	mov	r0, r4
1005b768:	f7f8 f9da 	bl	10053b20 <BLEPLAT_CNTR_PacketSetTimeout>
1005b76c:	4620      	mov	r0, r4
1005b76e:	f7f8 f94b 	bl	10053a08 <BLEPLAT_CNTR_PacketSetIntRcvOk>
1005b772:	4620      	mov	r0, r4
1005b774:	f7f8 f960 	bl	10053a38 <BLEPLAT_CNTR_PacketSetIntTxOk>
1005b778:	4620      	mov	r0, r4
1005b77a:	f7f8 f951 	bl	10053a20 <BLEPLAT_CNTR_PacketSetIntTimeout>
1005b77e:	4620      	mov	r0, r4
1005b780:	f7f8 f92a 	bl	100539d8 <BLEPLAT_CNTR_PacketSetIntCrcErr>
1005b784:	1ca9      	adds	r1, r5, #2
1005b786:	4620      	mov	r0, r4
1005b788:	f7f8 f90b 	bl	100539a2 <BLEPLAT_CNTR_PacketSetDataPtr>
1005b78c:	4620      	mov	r0, r4
1005b78e:	f7f8 f994 	bl	10053aba <BLEPLAT_CNTR_PacketSetNextTxMode>
1005b792:	4620      	mov	r0, r4
1005b794:	f7f8 f9ec 	bl	10053b70 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005b798:	bd70      	pop	{r4, r5, r6, pc}
1005b79a:	46c0      	nop			@ (mov r8, r8)

1005b79c <__arm_cp.21_0>:
1005b79c:	20002470 	.word	0x20002470

1005b7a0 <llc_mngm_mod_37>:
1005b7a0:	4906      	ldr	r1, [pc, #24]	@ (1005b7bc <__arm_cp.0_0>)
1005b7a2:	4341      	muls	r1, r0
1005b7a4:	0c09      	lsrs	r1, r1, #16
1005b7a6:	2224      	movs	r2, #36	@ 0x24
1005b7a8:	43d2      	mvns	r2, r2
1005b7aa:	434a      	muls	r2, r1
1005b7ac:	1810      	adds	r0, r2, r0
1005b7ae:	b281      	uxth	r1, r0
1005b7b0:	2924      	cmp	r1, #36	@ 0x24
1005b7b2:	d900      	bls.n	1005b7b6 <llc_mngm_mod_37+0x16>
1005b7b4:	3825      	subs	r0, #37	@ 0x25
1005b7b6:	b2c0      	uxtb	r0, r0
1005b7b8:	4770      	bx	lr
1005b7ba:	46c0      	nop			@ (mov r8, r8)

1005b7bc <__arm_cp.0_0>:
1005b7bc:	000006eb 	.word	0x000006eb

1005b7c0 <llc_mngm_csa2_update_remapping_table>:
1005b7c0:	b570      	push	{r4, r5, r6, lr}
1005b7c2:	460d      	mov	r5, r1
1005b7c4:	4604      	mov	r4, r0
1005b7c6:	1c40      	adds	r0, r0, #1
1005b7c8:	2600      	movs	r6, #0
1005b7ca:	2225      	movs	r2, #37	@ 0x25
1005b7cc:	4631      	mov	r1, r6
1005b7ce:	f7f6 ff51 	bl	10052674 <BLEPLAT_MemSet>
1005b7d2:	4630      	mov	r0, r6
1005b7d4:	2e25      	cmp	r6, #37	@ 0x25
1005b7d6:	d20c      	bcs.n	1005b7f2 <llc_mngm_csa2_update_remapping_table+0x32>
1005b7d8:	2107      	movs	r1, #7
1005b7da:	4031      	ands	r1, r6
1005b7dc:	08f2      	lsrs	r2, r6, #3
1005b7de:	5caa      	ldrb	r2, [r5, r2]
1005b7e0:	40ca      	lsrs	r2, r1
1005b7e2:	07d1      	lsls	r1, r2, #31
1005b7e4:	d003      	beq.n	1005b7ee <llc_mngm_csa2_update_remapping_table+0x2e>
1005b7e6:	b2c1      	uxtb	r1, r0
1005b7e8:	1861      	adds	r1, r4, r1
1005b7ea:	704e      	strb	r6, [r1, #1]
1005b7ec:	1c40      	adds	r0, r0, #1
1005b7ee:	1c76      	adds	r6, r6, #1
1005b7f0:	e7f0      	b.n	1005b7d4 <llc_mngm_csa2_update_remapping_table+0x14>
1005b7f2:	7020      	strb	r0, [r4, #0]
1005b7f4:	bd70      	pop	{r4, r5, r6, pc}

1005b7f6 <llc_mngm_csa2_select_channel_for_task>:
1005b7f6:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b7f8:	b08b      	sub	sp, #44	@ 0x2c
1005b7fa:	9305      	str	r3, [sp, #20]
1005b7fc:	4617      	mov	r7, r2
1005b7fe:	460d      	mov	r5, r1
1005b800:	a909      	add	r1, sp, #36	@ 0x24
1005b802:	f7f8 fa44 	bl	10053c8e <BLEPLAT_CNTR_SmGetChannelMap>
1005b806:	9c11      	ldr	r4, [sp, #68]	@ 0x44
1005b808:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005b80a:	9006      	str	r0, [sp, #24]
1005b80c:	2800      	cmp	r0, #0
1005b80e:	d018      	beq.n	1005b842 <llc_mngm_csa2_select_channel_for_task+0x4c>
1005b810:	9504      	str	r5, [sp, #16]
1005b812:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1005b814:	2500      	movs	r5, #0
1005b816:	9806      	ldr	r0, [sp, #24]
1005b818:	42a8      	cmp	r0, r5
1005b81a:	d010      	beq.n	1005b83e <llc_mngm_csa2_select_channel_for_task+0x48>
1005b81c:	9804      	ldr	r0, [sp, #16]
1005b81e:	9003      	str	r0, [sp, #12]
1005b820:	a809      	add	r0, sp, #36	@ 0x24
1005b822:	9002      	str	r0, [sp, #8]
1005b824:	a808      	add	r0, sp, #32
1005b826:	9001      	str	r0, [sp, #4]
1005b828:	a807      	add	r0, sp, #28
1005b82a:	9000      	str	r0, [sp, #0]
1005b82c:	b2eb      	uxtb	r3, r5
1005b82e:	4620      	mov	r0, r4
1005b830:	4639      	mov	r1, r7
1005b832:	9a05      	ldr	r2, [sp, #20]
1005b834:	f000 f812 	bl	1005b85c <llc_mngm_csa2_select_channel>
1005b838:	5570      	strb	r0, [r6, r5]
1005b83a:	1c6d      	adds	r5, r5, #1
1005b83c:	e7eb      	b.n	1005b816 <llc_mngm_csa2_select_channel_for_task+0x20>
1005b83e:	7830      	ldrb	r0, [r6, #0]
1005b840:	e00a      	b.n	1005b858 <llc_mngm_csa2_select_channel_for_task+0x62>
1005b842:	9503      	str	r5, [sp, #12]
1005b844:	a809      	add	r0, sp, #36	@ 0x24
1005b846:	9002      	str	r0, [sp, #8]
1005b848:	2200      	movs	r2, #0
1005b84a:	9201      	str	r2, [sp, #4]
1005b84c:	9200      	str	r2, [sp, #0]
1005b84e:	4620      	mov	r0, r4
1005b850:	4639      	mov	r1, r7
1005b852:	4613      	mov	r3, r2
1005b854:	f000 f802 	bl	1005b85c <llc_mngm_csa2_select_channel>
1005b858:	b00b      	add	sp, #44	@ 0x2c
1005b85a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005b85c <llc_mngm_csa2_select_channel>:
1005b85c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b85e:	b089      	sub	sp, #36	@ 0x24
1005b860:	4615      	mov	r5, r2
1005b862:	aa08      	add	r2, sp, #32
1005b864:	2600      	movs	r6, #0
1005b866:	7016      	strb	r6, [r2, #0]
1005b868:	2d00      	cmp	r5, #0
1005b86a:	9306      	str	r3, [sp, #24]
1005b86c:	461a      	mov	r2, r3
1005b86e:	d100      	bne.n	1005b872 <llc_mngm_csa2_select_channel+0x16>
1005b870:	462a      	mov	r2, r5
1005b872:	0c07      	lsrs	r7, r0, #16
1005b874:	4047      	eors	r7, r0
1005b876:	9811      	ldr	r0, [sp, #68]	@ 0x44
1005b878:	9007      	str	r0, [sp, #28]
1005b87a:	2d00      	cmp	r5, #0
1005b87c:	d104      	bne.n	1005b888 <llc_mngm_csa2_select_channel+0x2c>
1005b87e:	2300      	movs	r3, #0
1005b880:	9806      	ldr	r0, [sp, #24]
1005b882:	2801      	cmp	r0, #1
1005b884:	461c      	mov	r4, r3
1005b886:	d838      	bhi.n	1005b8fa <llc_mngm_csa2_select_channel+0x9e>
1005b888:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005b88a:	9005      	str	r0, [sp, #20]
1005b88c:	4079      	eors	r1, r7
1005b88e:	4051      	eors	r1, r2
1005b890:	460c      	mov	r4, r1
1005b892:	2e02      	cmp	r6, #2
1005b894:	d807      	bhi.n	1005b8a6 <llc_mngm_csa2_select_channel+0x4a>
1005b896:	b2a0      	uxth	r0, r4
1005b898:	f000 f842 	bl	1005b920 <llc_mngm_csa2_permutation>
1005b89c:	2111      	movs	r1, #17
1005b89e:	4341      	muls	r1, r0
1005b8a0:	19cc      	adds	r4, r1, r7
1005b8a2:	1c76      	adds	r6, r6, #1
1005b8a4:	e7f5      	b.n	1005b892 <llc_mngm_csa2_select_channel+0x36>
1005b8a6:	4620      	mov	r0, r4
1005b8a8:	4078      	eors	r0, r7
1005b8aa:	b286      	uxth	r6, r0
1005b8ac:	4630      	mov	r0, r6
1005b8ae:	f7ff ff77 	bl	1005b7a0 <llc_mngm_mod_37>
1005b8b2:	2824      	cmp	r0, #36	@ 0x24
1005b8b4:	d815      	bhi.n	1005b8e2 <llc_mngm_csa2_select_channel+0x86>
1005b8b6:	08c1      	lsrs	r1, r0, #3
1005b8b8:	9a05      	ldr	r2, [sp, #20]
1005b8ba:	5c52      	ldrb	r2, [r2, r1]
1005b8bc:	00c9      	lsls	r1, r1, #3
1005b8be:	1a41      	subs	r1, r0, r1
1005b8c0:	b2c9      	uxtb	r1, r1
1005b8c2:	40ca      	lsrs	r2, r1
1005b8c4:	07d1      	lsls	r1, r2, #31
1005b8c6:	d00c      	beq.n	1005b8e2 <llc_mngm_csa2_select_channel+0x86>
1005b8c8:	a908      	add	r1, sp, #32
1005b8ca:	7008      	strb	r0, [r1, #0]
1005b8cc:	9a07      	ldr	r2, [sp, #28]
1005b8ce:	1c51      	adds	r1, r2, #1
1005b8d0:	7812      	ldrb	r2, [r2, #0]
1005b8d2:	2300      	movs	r3, #0
1005b8d4:	429a      	cmp	r2, r3
1005b8d6:	d00d      	beq.n	1005b8f4 <llc_mngm_csa2_select_channel+0x98>
1005b8d8:	5cce      	ldrb	r6, [r1, r3]
1005b8da:	4286      	cmp	r6, r0
1005b8dc:	d00b      	beq.n	1005b8f6 <llc_mngm_csa2_select_channel+0x9a>
1005b8de:	1c5b      	adds	r3, r3, #1
1005b8e0:	e7f8      	b.n	1005b8d4 <llc_mngm_csa2_select_channel+0x78>
1005b8e2:	9907      	ldr	r1, [sp, #28]
1005b8e4:	7808      	ldrb	r0, [r1, #0]
1005b8e6:	4346      	muls	r6, r0
1005b8e8:	0c33      	lsrs	r3, r6, #16
1005b8ea:	18c8      	adds	r0, r1, r3
1005b8ec:	7840      	ldrb	r0, [r0, #1]
1005b8ee:	a908      	add	r1, sp, #32
1005b8f0:	7008      	strb	r0, [r1, #0]
1005b8f2:	e000      	b.n	1005b8f6 <llc_mngm_csa2_select_channel+0x9a>
1005b8f4:	2325      	movs	r3, #37	@ 0x25
1005b8f6:	2d00      	cmp	r5, #0
1005b8f8:	d10e      	bne.n	1005b918 <llc_mngm_csa2_select_channel+0xbc>
1005b8fa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1005b8fc:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005b8fe:	ad08      	add	r5, sp, #32
1005b900:	b2ba      	uxth	r2, r7
1005b902:	9000      	str	r0, [sp, #0]
1005b904:	9201      	str	r2, [sp, #4]
1005b906:	9807      	ldr	r0, [sp, #28]
1005b908:	9002      	str	r0, [sp, #8]
1005b90a:	9503      	str	r5, [sp, #12]
1005b90c:	b2a2      	uxth	r2, r4
1005b90e:	b2db      	uxtb	r3, r3
1005b910:	9806      	ldr	r0, [sp, #24]
1005b912:	f000 f803 	bl	1005b91c <llc_mngm_csa2_select_subevent_channel_ucfg_weak>
1005b916:	7828      	ldrb	r0, [r5, #0]
1005b918:	b009      	add	sp, #36	@ 0x24
1005b91a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005b91c <llc_mngm_csa2_select_subevent_channel_ucfg_weak>:
1005b91c:	4770      	bx	lr
	...

1005b920 <llc_mngm_csa2_permutation>:
1005b920:	0041      	lsls	r1, r0, #1
1005b922:	4a0a      	ldr	r2, [pc, #40]	@ (1005b94c <__arm_cp.7_0>)
1005b924:	400a      	ands	r2, r1
1005b926:	0840      	lsrs	r0, r0, #1
1005b928:	4909      	ldr	r1, [pc, #36]	@ (1005b950 <__arm_cp.7_1>)
1005b92a:	4001      	ands	r1, r0
1005b92c:	1888      	adds	r0, r1, r2
1005b92e:	0081      	lsls	r1, r0, #2
1005b930:	4a08      	ldr	r2, [pc, #32]	@ (1005b954 <__arm_cp.7_2>)
1005b932:	400a      	ands	r2, r1
1005b934:	0880      	lsrs	r0, r0, #2
1005b936:	4908      	ldr	r1, [pc, #32]	@ (1005b958 <__arm_cp.7_3>)
1005b938:	4001      	ands	r1, r0
1005b93a:	1888      	adds	r0, r1, r2
1005b93c:	0101      	lsls	r1, r0, #4
1005b93e:	4a07      	ldr	r2, [pc, #28]	@ (1005b95c <__arm_cp.7_4>)
1005b940:	400a      	ands	r2, r1
1005b942:	0900      	lsrs	r0, r0, #4
1005b944:	4906      	ldr	r1, [pc, #24]	@ (1005b960 <__arm_cp.7_5>)
1005b946:	4001      	ands	r1, r0
1005b948:	1888      	adds	r0, r1, r2
1005b94a:	4770      	bx	lr

1005b94c <__arm_cp.7_0>:
1005b94c:	0001aaaa 	.word	0x0001aaaa

1005b950 <__arm_cp.7_1>:
1005b950:	00005555 	.word	0x00005555

1005b954 <__arm_cp.7_2>:
1005b954:	0007cccc 	.word	0x0007cccc

1005b958 <__arm_cp.7_3>:
1005b958:	00003333 	.word	0x00003333

1005b95c <__arm_cp.7_4>:
1005b95c:	0000f0f0 	.word	0x0000f0f0

1005b960 <__arm_cp.7_5>:
1005b960:	00000f0f 	.word	0x00000f0f

1005b964 <llc_wl_clear_filter_accept_list>:
1005b964:	b5b0      	push	{r4, r5, r7, lr}
1005b966:	2401      	movs	r4, #1
1005b968:	4620      	mov	r0, r4
1005b96a:	f003 f9f7 	bl	1005ed5c <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>
1005b96e:	4605      	mov	r5, r0
1005b970:	4620      	mov	r0, r4
1005b972:	f000 f8b4 	bl	1005bade <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>
1005b976:	4328      	orrs	r0, r5
1005b978:	d10a      	bne.n	1005b990 <llc_wl_clear_filter_accept_list+0x2c>
1005b97a:	4806      	ldr	r0, [pc, #24]	@ (1005b994 <__arm_cp.1_0>)
1005b97c:	6800      	ldr	r0, [r0, #0]
1005b97e:	219c      	movs	r1, #156	@ 0x9c
1005b980:	5840      	ldr	r0, [r0, r1]
1005b982:	300c      	adds	r0, #12
1005b984:	f007 fa0f 	bl	10062da6 <addr8_list_clear>
1005b988:	f000 f85a 	bl	1005ba40 <llc_priv_clr_all_filter_accept_list_flags_in_resolving_list_ucfg_weak>
1005b98c:	2000      	movs	r0, #0
1005b98e:	bdb0      	pop	{r4, r5, r7, pc}
1005b990:	200c      	movs	r0, #12
1005b992:	bdb0      	pop	{r4, r5, r7, pc}

1005b994 <__arm_cp.1_0>:
1005b994:	20002470 	.word	0x20002470

1005b998 <llc_wl_add_device_to_filter_accept_list>:
1005b998:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b99a:	b087      	sub	sp, #28
1005b99c:	460c      	mov	r4, r1
1005b99e:	4605      	mov	r5, r0
1005b9a0:	9106      	str	r1, [sp, #24]
1005b9a2:	9005      	str	r0, [sp, #20]
1005b9a4:	2601      	movs	r6, #1
1005b9a6:	4630      	mov	r0, r6
1005b9a8:	f003 f9d8 	bl	1005ed5c <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>
1005b9ac:	4607      	mov	r7, r0
1005b9ae:	4630      	mov	r0, r6
1005b9b0:	f000 f895 	bl	1005bade <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>
1005b9b4:	4338      	orrs	r0, r7
1005b9b6:	d11d      	bne.n	1005b9f4 <llc_wl_add_device_to_filter_accept_list+0x5c>
1005b9b8:	b2e8      	uxtb	r0, r5
1005b9ba:	28ff      	cmp	r0, #255	@ 0xff
1005b9bc:	d105      	bne.n	1005b9ca <llc_wl_add_device_to_filter_accept_list+0x32>
1005b9be:	9005      	str	r0, [sp, #20]
1005b9c0:	21ff      	movs	r1, #255	@ 0xff
1005b9c2:	0609      	lsls	r1, r1, #24
1005b9c4:	400c      	ands	r4, r1
1005b9c6:	9406      	str	r4, [sp, #24]
1005b9c8:	4605      	mov	r5, r0
1005b9ca:	4810      	ldr	r0, [pc, #64]	@ (1005ba0c <__arm_cp.2_0>)
1005b9cc:	6800      	ldr	r0, [r0, #0]
1005b9ce:	219c      	movs	r1, #156	@ 0x9c
1005b9d0:	5840      	ldr	r0, [r0, r1]
1005b9d2:	a903      	add	r1, sp, #12
1005b9d4:	9101      	str	r1, [sp, #4]
1005b9d6:	a904      	add	r1, sp, #16
1005b9d8:	9100      	str	r1, [sp, #0]
1005b9da:	300c      	adds	r0, #12
1005b9dc:	2301      	movs	r3, #1
1005b9de:	4629      	mov	r1, r5
1005b9e0:	4622      	mov	r2, r4
1005b9e2:	f007 f961 	bl	10062ca8 <addr8_list_add>
1005b9e6:	2800      	cmp	r0, #0
1005b9e8:	d006      	beq.n	1005b9f8 <llc_wl_add_device_to_filter_accept_list+0x60>
1005b9ea:	a805      	add	r0, sp, #20
1005b9ec:	2101      	movs	r1, #1
1005b9ee:	f000 f826 	bl	1005ba3e <llc_priv_set_filter_accept_list_flag_in_resolving_list_ucfg_weak>
1005b9f2:	e005      	b.n	1005ba00 <llc_wl_add_device_to_filter_accept_list+0x68>
1005b9f4:	200c      	movs	r0, #12
1005b9f6:	e006      	b.n	1005ba06 <llc_wl_add_device_to_filter_accept_list+0x6e>
1005b9f8:	a803      	add	r0, sp, #12
1005b9fa:	7800      	ldrb	r0, [r0, #0]
1005b9fc:	2800      	cmp	r0, #0
1005b9fe:	d001      	beq.n	1005ba04 <llc_wl_add_device_to_filter_accept_list+0x6c>
1005ba00:	2000      	movs	r0, #0
1005ba02:	e000      	b.n	1005ba06 <llc_wl_add_device_to_filter_accept_list+0x6e>
1005ba04:	2007      	movs	r0, #7
1005ba06:	b007      	add	sp, #28
1005ba08:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005ba0a:	46c0      	nop			@ (mov r8, r8)

1005ba0c <__arm_cp.2_0>:
1005ba0c:	20002470 	.word	0x20002470

1005ba10 <bis_csr_ucfg_weak>:
1005ba10:	2000      	movs	r0, #0
1005ba12:	4770      	bx	lr

1005ba14 <cis_csr_ucfg_weak>:
1005ba14:	2000      	movs	r0, #0
1005ba16:	4770      	bx	lr

1005ba18 <llc_isoal_mem_alloc_ucfg_weak>:
1005ba18:	4770      	bx	lr

1005ba1a <iso_rx_bn_pdu_event_int_cb_ucfg_weak>:
1005ba1a:	2000      	movs	r0, #0
1005ba1c:	4770      	bx	lr

1005ba1e <iso_terminate_event_int_cb_ucfg_weak>:
1005ba1e:	2000      	movs	r0, #0
1005ba20:	4770      	bx	lr

1005ba22 <iso_tx_bn_pdu_event_int_cb_ucfg_weak>:
1005ba22:	2000      	movs	r0, #0
1005ba24:	4770      	bx	lr

1005ba26 <llc_iso_cmn_mem_alloc_ucfg_weak>:
1005ba26:	4770      	bx	lr

1005ba28 <llc_padv_periodic_adv_sync_csr_ucfg_weak>:
1005ba28:	2000      	movs	r0, #0
1005ba2a:	4770      	bx	lr

1005ba2c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>:
1005ba2c:	2000      	movs	r0, #0
1005ba2e:	4770      	bx	lr

1005ba30 <llc_past_init_ucfg_weak>:
1005ba30:	4770      	bx	lr

1005ba32 <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>:
1005ba32:	4770      	bx	lr

1005ba34 <llc_priv_init_ucfg_weak>:
1005ba34:	4770      	bx	lr

1005ba36 <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>:
1005ba36:	4770      	bx	lr

1005ba38 <llc_priv_offline_rpa_resolution_ucfg_weak>:
1005ba38:	4770      	bx	lr

1005ba3a <llc_priv_controller_privacy_csr_ucfg_weak>:
1005ba3a:	2000      	movs	r0, #0
1005ba3c:	4770      	bx	lr

1005ba3e <llc_priv_set_filter_accept_list_flag_in_resolving_list_ucfg_weak>:
1005ba3e:	4770      	bx	lr

1005ba40 <llc_priv_clr_all_filter_accept_list_flags_in_resolving_list_ucfg_weak>:
1005ba40:	4770      	bx	lr

1005ba42 <llc_priv_start_privacy_timer_ucfg_weak>:
1005ba42:	4770      	bx	lr

1005ba44 <llc_priv_stop_privacy_timer_ucfg_weak>:
1005ba44:	4770      	bx	lr

1005ba46 <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>:
1005ba46:	4770      	bx	lr

1005ba48 <llc_priv_enable_rpa_change_at_timeout_ucfg_weak>:
1005ba48:	4770      	bx	lr
	...

1005ba4c <llc_pscan_get_cntxt_per_p>:
1005ba4c:	218c      	movs	r1, #140	@ 0x8c
1005ba4e:	4341      	muls	r1, r0
1005ba50:	4804      	ldr	r0, [pc, #16]	@ (1005ba64 <__arm_cp.1_0>)
1005ba52:	6800      	ldr	r0, [r0, #0]
1005ba54:	229c      	movs	r2, #156	@ 0x9c
1005ba56:	5880      	ldr	r0, [r0, r2]
1005ba58:	6840      	ldr	r0, [r0, #4]
1005ba5a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
1005ba5c:	6800      	ldr	r0, [r0, #0]
1005ba5e:	6800      	ldr	r0, [r0, #0]
1005ba60:	1840      	adds	r0, r0, r1
1005ba62:	4770      	bx	lr

1005ba64 <__arm_cp.1_0>:
1005ba64:	20002470 	.word	0x20002470

1005ba68 <llc_pscan_init_ucfg_weak>:
1005ba68:	4770      	bx	lr

1005ba6a <llc_pscan_mem_allocate_ucfg_weak>:
1005ba6a:	4770      	bx	lr

1005ba6c <llc_pscan_wr_init_ucfg_weak>:
1005ba6c:	4770      	bx	lr
	...

1005ba70 <llc_pscan_wr_mem_allocate_ucfg_weak>:
1005ba70:	b510      	push	{r4, lr}
1005ba72:	2801      	cmp	r0, #1
1005ba74:	d110      	bne.n	1005ba98 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005ba76:	2901      	cmp	r1, #1
1005ba78:	d10e      	bne.n	1005ba98 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005ba7a:	2a01      	cmp	r2, #1
1005ba7c:	d10c      	bne.n	1005ba98 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005ba7e:	2400      	movs	r4, #0
1005ba80:	4620      	mov	r0, r4
1005ba82:	f7ff ffe3 	bl	1005ba4c <llc_pscan_get_cntxt_per_p>
1005ba86:	3014      	adds	r0, #20
1005ba88:	4904      	ldr	r1, [pc, #16]	@ (1005ba9c <__arm_cp.5_0>)
1005ba8a:	7f89      	ldrb	r1, [r1, #30]
1005ba8c:	2900      	cmp	r1, #0
1005ba8e:	d003      	beq.n	1005ba98 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005ba90:	6004      	str	r4, [r0, #0]
1005ba92:	308c      	adds	r0, #140	@ 0x8c
1005ba94:	1e49      	subs	r1, r1, #1
1005ba96:	e7f9      	b.n	1005ba8c <llc_pscan_wr_mem_allocate_ucfg_weak+0x1c>
1005ba98:	bd10      	pop	{r4, pc}
1005ba9a:	46c0      	nop			@ (mov r8, r8)

1005ba9c <__arm_cp.5_0>:
1005ba9c:	20002484 	.word	0x20002484

1005baa0 <llc_pscan_wr_check_pawr_active_ucfg_weak>:
1005baa0:	2000      	movs	r0, #0
1005baa2:	4770      	bx	lr

1005baa4 <llc_scan_get_cntxt_p>:
1005baa4:	4802      	ldr	r0, [pc, #8]	@ (1005bab0 <__arm_cp.0_0>)
1005baa6:	6800      	ldr	r0, [r0, #0]
1005baa8:	219c      	movs	r1, #156	@ 0x9c
1005baaa:	5840      	ldr	r0, [r0, r1]
1005baac:	6840      	ldr	r0, [r0, #4]
1005baae:	4770      	bx	lr

1005bab0 <__arm_cp.0_0>:
1005bab0:	20002470 	.word	0x20002470

1005bab4 <llc_scan_init_ucfg_weak>:
1005bab4:	4770      	bx	lr

1005bab6 <llc_scan_mem_allocate_ucfg_weak>:
1005bab6:	4770      	bx	lr

1005bab8 <llc_scan_set_scan_channel_bitmap>:
1005bab8:	b510      	push	{r4, lr}
1005baba:	4604      	mov	r4, r0
1005babc:	f7fd fd6c 	bl	10059598 <scan_csr_ucfg_weak>
1005bac0:	2801      	cmp	r0, #1
1005bac2:	d108      	bne.n	1005bad6 <llc_scan_set_scan_channel_bitmap+0x1e>
1005bac4:	1e60      	subs	r0, r4, #1
1005bac6:	2806      	cmp	r0, #6
1005bac8:	d807      	bhi.n	1005bada <llc_scan_set_scan_channel_bitmap+0x22>
1005baca:	f7ff ffeb 	bl	1005baa4 <llc_scan_get_cntxt_p>
1005bace:	21ef      	movs	r1, #239	@ 0xef
1005bad0:	5444      	strb	r4, [r0, r1]
1005bad2:	2000      	movs	r0, #0
1005bad4:	bd10      	pop	{r4, pc}
1005bad6:	2011      	movs	r0, #17
1005bad8:	bd10      	pop	{r4, pc}
1005bada:	2012      	movs	r0, #18
1005badc:	bd10      	pop	{r4, pc}

1005bade <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>:
1005bade:	b5b0      	push	{r4, r5, r7, lr}
1005bae0:	4605      	mov	r5, r0
1005bae2:	2400      	movs	r4, #0
1005bae4:	f7fd fd58 	bl	10059598 <scan_csr_ucfg_weak>
1005bae8:	2801      	cmp	r0, #1
1005baea:	d10d      	bne.n	1005bb08 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
1005baec:	f7ff ffda 	bl	1005baa4 <llc_scan_get_cntxt_p>
1005baf0:	21eb      	movs	r1, #235	@ 0xeb
1005baf2:	5c41      	ldrb	r1, [r0, r1]
1005baf4:	07c9      	lsls	r1, r1, #31
1005baf6:	d007      	beq.n	1005bb08 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
1005baf8:	2d00      	cmp	r5, #0
1005bafa:	d004      	beq.n	1005bb06 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x28>
1005bafc:	30ea      	adds	r0, #234	@ 0xea
1005bafe:	7800      	ldrb	r0, [r0, #0]
1005bb00:	2401      	movs	r4, #1
1005bb02:	4004      	ands	r4, r0
1005bb04:	e000      	b.n	1005bb08 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
1005bb06:	2401      	movs	r4, #1
1005bb08:	4620      	mov	r0, r4
1005bb0a:	bdb0      	pop	{r4, r5, r7, pc}

1005bb0c <llc_scan_stop_ucfg_weak>:
1005bb0c:	2000      	movs	r0, #0
1005bb0e:	4770      	bx	lr

1005bb10 <llc_subrate_init_acceptable>:
1005bb10:	2100      	movs	r1, #0
1005bb12:	4a03      	ldr	r2, [pc, #12]	@ (1005bb20 <__arm_cp.4_0>)
1005bb14:	62c1      	str	r1, [r0, #44]	@ 0x2c
1005bb16:	6302      	str	r2, [r0, #48]	@ 0x30
1005bb18:	2119      	movs	r1, #25
1005bb1a:	01c9      	lsls	r1, r1, #7
1005bb1c:	8681      	strh	r1, [r0, #52]	@ 0x34
1005bb1e:	4770      	bx	lr

1005bb20 <__arm_cp.4_0>:
1005bb20:	00010001 	.word	0x00010001

1005bb24 <llc_subrate_init_acceptable_per>:
1005bb24:	b580      	push	{r7, lr}
1005bb26:	4603      	mov	r3, r0
1005bb28:	2049      	movs	r0, #73	@ 0x49
1005bb2a:	0080      	lsls	r0, r0, #2
1005bb2c:	1808      	adds	r0, r1, r0
1005bb2e:	332c      	adds	r3, #44	@ 0x2c
1005bb30:	220a      	movs	r2, #10
1005bb32:	4619      	mov	r1, r3
1005bb34:	f7f6 fd8e 	bl	10052654 <BLEPLAT_MemCpy>
1005bb38:	bd80      	pop	{r7, pc}

1005bb3a <llc_subrate_reset_params>:
1005bb3a:	2147      	movs	r1, #71	@ 0x47
1005bb3c:	0089      	lsls	r1, r1, #2
1005bb3e:	2200      	movs	r2, #0
1005bb40:	5042      	str	r2, [r0, r1]
1005bb42:	1840      	adds	r0, r0, r1
1005bb44:	2101      	movs	r1, #1
1005bb46:	0409      	lsls	r1, r1, #16
1005bb48:	6041      	str	r1, [r0, #4]
1005bb4a:	4770      	bx	lr

1005bb4c <llc_subrate_new_sr_base_event_ucfg_weak>:
1005bb4c:	4770      	bx	lr

1005bb4e <llc_subrate_update_cont_counter_ucfg_weak>:
1005bb4e:	4770      	bx	lr

1005bb50 <llc_subrate_offline_processing_ucfg_weak>:
1005bb50:	2000      	movs	r0, #0
1005bb52:	4770      	bx	lr

1005bb54 <llc_convert_sca_to_ppm>:
1005bb54:	0740      	lsls	r0, r0, #29
1005bb56:	0f00      	lsrs	r0, r0, #28
1005bb58:	4901      	ldr	r1, [pc, #4]	@ (1005bb60 <__arm_cp.1_0>)
1005bb5a:	5a08      	ldrh	r0, [r1, r0]
1005bb5c:	4770      	bx	lr
1005bb5e:	46c0      	nop			@ (mov r8, r8)

1005bb60 <__arm_cp.1_0>:
1005bb60:	100696cc 	.word	0x100696cc

1005bb64 <llc_convert_hci_phy_enum_to_hw_phy>:
1005bb64:	1e80      	subs	r0, r0, #2
1005bb66:	b2c0      	uxtb	r0, r0
1005bb68:	2803      	cmp	r0, #3
1005bb6a:	d301      	bcc.n	1005bb70 <llc_convert_hci_phy_enum_to_hw_phy+0xc>
1005bb6c:	2000      	movs	r0, #0
1005bb6e:	e002      	b.n	1005bb76 <llc_convert_hci_phy_enum_to_hw_phy+0x12>
1005bb70:	00c1      	lsls	r1, r0, #3
1005bb72:	4802      	ldr	r0, [pc, #8]	@ (1005bb7c <__arm_cp.4_0>)
1005bb74:	40c8      	lsrs	r0, r1
1005bb76:	b2c0      	uxtb	r0, r0
1005bb78:	4770      	bx	lr
1005bb7a:	46c0      	nop			@ (mov r8, r8)

1005bb7c <__arm_cp.4_0>:
1005bb7c:	00060401 	.word	0x00060401

1005bb80 <ll_cpe_get_cpid_from_opcode>:
1005bb80:	282a      	cmp	r0, #42	@ 0x2a
1005bb82:	d804      	bhi.n	1005bb8e <ll_cpe_get_cpid_from_opcode+0xe>
1005bb84:	2103      	movs	r1, #3
1005bb86:	4341      	muls	r1, r0
1005bb88:	4802      	ldr	r0, [pc, #8]	@ (1005bb94 <__arm_cp.0_0>)
1005bb8a:	5c40      	ldrb	r0, [r0, r1]
1005bb8c:	4770      	bx	lr
1005bb8e:	2016      	movs	r0, #22
1005bb90:	4770      	bx	lr
1005bb92:	46c0      	nop			@ (mov r8, r8)

1005bb94 <__arm_cp.0_0>:
1005bb94:	100696dc 	.word	0x100696dc

1005bb98 <ll_cpe_set_unknown_rsp_pending>:
1005bb98:	b5b0      	push	{r4, r5, r7, lr}
1005bb9a:	4604      	mov	r4, r0
1005bb9c:	f7fe f9cc 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005bba0:	2100      	movs	r1, #0
1005bba2:	f7fe fc5f 	bl	1005a464 <llc_conn_get_ctrl_pdu_data_p>
1005bba6:	4605      	mov	r5, r0
1005bba8:	4620      	mov	r0, r4
1005bbaa:	f000 f80d 	bl	1005bbc8 <LL_cpe_get_ctrl_flds_common_p>
1005bbae:	8801      	ldrh	r1, [r0, #0]
1005bbb0:	4a04      	ldr	r2, [pc, #16]	@ (1005bbc4 <__arm_cp.1_0>)
1005bbb2:	400a      	ands	r2, r1
1005bbb4:	8869      	ldrh	r1, [r5, #2]
1005bbb6:	0609      	lsls	r1, r1, #24
1005bbb8:	0cc9      	lsrs	r1, r1, #19
1005bbba:	1889      	adds	r1, r1, r2
1005bbbc:	3110      	adds	r1, #16
1005bbbe:	8001      	strh	r1, [r0, #0]
1005bbc0:	bdb0      	pop	{r4, r5, r7, pc}
1005bbc2:	46c0      	nop			@ (mov r8, r8)

1005bbc4 <__arm_cp.1_0>:
1005bbc4:	0000e00f 	.word	0x0000e00f

1005bbc8 <LL_cpe_get_ctrl_flds_common_p>:
1005bbc8:	b580      	push	{r7, lr}
1005bbca:	f7fe f9b5 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005bbce:	30b0      	adds	r0, #176	@ 0xb0
1005bbd0:	bd80      	pop	{r7, pc}

1005bbd2 <LL_cpe_register_cpf>:
1005bbd2:	b5b0      	push	{r4, r5, r7, lr}
1005bbd4:	460c      	mov	r4, r1
1005bbd6:	0085      	lsls	r5, r0, #2
1005bbd8:	f7fe f9a4 	bl	10059f24 <llc_conn_get_cntxt_p>
1005bbdc:	6880      	ldr	r0, [r0, #8]
1005bbde:	5144      	str	r4, [r0, r5]
1005bbe0:	bdb0      	pop	{r4, r5, r7, pc}

1005bbe2 <LL_cpe_get_active_status>:
1005bbe2:	b580      	push	{r7, lr}
1005bbe4:	f000 f804 	bl	1005bbf0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005bbe8:	7801      	ldrb	r1, [r0, #0]
1005bbea:	2001      	movs	r0, #1
1005bbec:	4008      	ands	r0, r1
1005bbee:	bd80      	pop	{r7, pc}

1005bbf0 <ll_cpe_get_ctrl_flds_per_sm_p>:
1005bbf0:	b510      	push	{r4, lr}
1005bbf2:	460c      	mov	r4, r1
1005bbf4:	f7fe f9a0 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005bbf8:	1900      	adds	r0, r0, r4
1005bbfa:	30a8      	adds	r0, #168	@ 0xa8
1005bbfc:	bd10      	pop	{r4, pc}

1005bbfe <LL_cpe_set_active>:
1005bbfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005bc00:	461c      	mov	r4, r3
1005bc02:	4615      	mov	r5, r2
1005bc04:	460e      	mov	r6, r1
1005bc06:	4607      	mov	r7, r0
1005bc08:	f7fe f996 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005bc0c:	1980      	adds	r0, r0, r6
1005bc0e:	21ac      	movs	r1, #172	@ 0xac
1005bc10:	5445      	strb	r5, [r0, r1]
1005bc12:	4638      	mov	r0, r7
1005bc14:	4631      	mov	r1, r6
1005bc16:	f7ff ffeb 	bl	1005bbf0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005bc1a:	7801      	ldrb	r1, [r0, #0]
1005bc1c:	22de      	movs	r2, #222	@ 0xde
1005bc1e:	400a      	ands	r2, r1
1005bc20:	07e1      	lsls	r1, r4, #31
1005bc22:	0e89      	lsrs	r1, r1, #26
1005bc24:	1889      	adds	r1, r1, r2
1005bc26:	1c49      	adds	r1, r1, #1
1005bc28:	7001      	strb	r1, [r0, #0]
1005bc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005bc2c <LL_cpe_clr_active>:
1005bc2c:	b570      	push	{r4, r5, r6, lr}
1005bc2e:	4616      	mov	r6, r2
1005bc30:	460d      	mov	r5, r1
1005bc32:	4604      	mov	r4, r0
1005bc34:	f000 f814 	bl	1005bc60 <ll_cpe_get_cpid_from_sm>
1005bc38:	42b0      	cmp	r0, r6
1005bc3a:	d110      	bne.n	1005bc5e <LL_cpe_clr_active+0x32>
1005bc3c:	4620      	mov	r0, r4
1005bc3e:	4629      	mov	r1, r5
1005bc40:	f7ff ffd6 	bl	1005bbf0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005bc44:	2100      	movs	r1, #0
1005bc46:	7001      	strb	r1, [r0, #0]
1005bc48:	2d01      	cmp	r5, #1
1005bc4a:	d001      	beq.n	1005bc50 <LL_cpe_clr_active+0x24>
1005bc4c:	256c      	movs	r5, #108	@ 0x6c
1005bc4e:	e000      	b.n	1005bc52 <LL_cpe_clr_active+0x26>
1005bc50:	2570      	movs	r5, #112	@ 0x70
1005bc52:	4620      	mov	r0, r4
1005bc54:	f7fe f970 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005bc58:	217d      	movs	r1, #125	@ 0x7d
1005bc5a:	0449      	lsls	r1, r1, #17
1005bc5c:	5141      	str	r1, [r0, r5]
1005bc5e:	bd70      	pop	{r4, r5, r6, pc}

1005bc60 <ll_cpe_get_cpid_from_sm>:
1005bc60:	b510      	push	{r4, lr}
1005bc62:	460c      	mov	r4, r1
1005bc64:	f7fe f968 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005bc68:	1900      	adds	r0, r0, r4
1005bc6a:	21ac      	movs	r1, #172	@ 0xac
1005bc6c:	5c40      	ldrb	r0, [r0, r1]
1005bc6e:	bd10      	pop	{r4, pc}

1005bc70 <LL_cpe_set_blocked>:
1005bc70:	b510      	push	{r4, lr}
1005bc72:	4614      	mov	r4, r2
1005bc74:	f7ff ffbc 	bl	1005bbf0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005bc78:	2c02      	cmp	r4, #2
1005bc7a:	d805      	bhi.n	1005bc88 <LL_cpe_set_blocked+0x18>
1005bc7c:	00e1      	lsls	r1, r4, #3
1005bc7e:	4a03      	ldr	r2, [pc, #12]	@ (1005bc8c <__arm_cp.9_0>)
1005bc80:	40ca      	lsrs	r2, r1
1005bc82:	7801      	ldrb	r1, [r0, #0]
1005bc84:	4311      	orrs	r1, r2
1005bc86:	7001      	strb	r1, [r0, #0]
1005bc88:	bd10      	pop	{r4, pc}
1005bc8a:	46c0      	nop			@ (mov r8, r8)

1005bc8c <__arm_cp.9_0>:
1005bc8c:	00080402 	.word	0x00080402

1005bc90 <LL_cpe_set_prepare_tx_pdu>:
1005bc90:	b580      	push	{r7, lr}
1005bc92:	f7ff ffad 	bl	1005bbf0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005bc96:	7801      	ldrb	r1, [r0, #0]
1005bc98:	2210      	movs	r2, #16
1005bc9a:	430a      	orrs	r2, r1
1005bc9c:	7002      	strb	r2, [r0, #0]
1005bc9e:	2015      	movs	r0, #21
1005bca0:	f006 fd6e 	bl	10062780 <tsk_notify_idx>
1005bca4:	f7f5 feef 	bl	10051a86 <BLE_STACK_ProcessRequest>
1005bca8:	bd80      	pop	{r7, pc}

1005bcaa <LL_cpe_get_cntxt>:
1005bcaa:	b510      	push	{r4, lr}
1005bcac:	460c      	mov	r4, r1
1005bcae:	f7fe f943 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005bcb2:	00a1      	lsls	r1, r4, #2
1005bcb4:	1840      	adds	r0, r0, r1
1005bcb6:	21a0      	movs	r1, #160	@ 0xa0
1005bcb8:	5840      	ldr	r0, [r0, r1]
1005bcba:	bd10      	pop	{r4, pc}

1005bcbc <LL_cpe_set_tx_with_instant>:
1005bcbc:	b5b0      	push	{r4, r5, r7, lr}
1005bcbe:	4604      	mov	r4, r0
1005bcc0:	f7ff ff96 	bl	1005bbf0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005bcc4:	4605      	mov	r5, r0
1005bcc6:	4620      	mov	r0, r4
1005bcc8:	f7fe f936 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005bccc:	7829      	ldrb	r1, [r5, #0]
1005bcce:	2240      	movs	r2, #64	@ 0x40
1005bcd0:	430a      	orrs	r2, r1
1005bcd2:	702a      	strb	r2, [r5, #0]
1005bcd4:	f7fe fe87 	bl	1005a9e6 <llc_conn_set_tx_ctrl_pdu_has_instant>
1005bcd8:	bdb0      	pop	{r4, r5, r7, pc}

1005bcda <LL_cpe_set_rx_with_instant>:
1005bcda:	b5b0      	push	{r4, r5, r7, lr}
1005bcdc:	4604      	mov	r4, r0
1005bcde:	f7ff ff87 	bl	1005bbf0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005bce2:	4605      	mov	r5, r0
1005bce4:	4620      	mov	r0, r4
1005bce6:	f7fe f927 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005bcea:	7829      	ldrb	r1, [r5, #0]
1005bcec:	2240      	movs	r2, #64	@ 0x40
1005bcee:	430a      	orrs	r2, r1
1005bcf0:	702a      	strb	r2, [r5, #0]
1005bcf2:	219a      	movs	r1, #154	@ 0x9a
1005bcf4:	5a42      	ldrh	r2, [r0, r1]
1005bcf6:	2301      	movs	r3, #1
1005bcf8:	4313      	orrs	r3, r2
1005bcfa:	5243      	strh	r3, [r0, r1]
1005bcfc:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005bd00 <LL_cpe_engine>:
1005bd00:	b5f0      	push	{r4, r5, r6, r7, lr}
1005bd02:	b08d      	sub	sp, #52	@ 0x34
1005bd04:	4604      	mov	r4, r0
1005bd06:	a80c      	add	r0, sp, #48	@ 0x30
1005bd08:	2700      	movs	r7, #0
1005bd0a:	8007      	strh	r7, [r0, #0]
1005bd0c:	4620      	mov	r0, r4
1005bd0e:	f7fe f913 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005bd12:	21ff      	movs	r1, #255	@ 0xff
1005bd14:	3112      	adds	r1, #18
1005bd16:	900b      	str	r0, [sp, #44]	@ 0x2c
1005bd18:	5c40      	ldrb	r0, [r0, r1]
1005bd1a:	2800      	cmp	r0, #0
1005bd1c:	9406      	str	r4, [sp, #24]
1005bd1e:	d100      	bne.n	1005bd22 <LL_cpe_engine+0x22>
1005bd20:	e083      	b.n	1005be2a <LL_cpe_engine+0x12a>
1005bd22:	4620      	mov	r0, r4
1005bd24:	f000 fbc2 	bl	1005c4ac <ll_cpe_set_active>
1005bd28:	4620      	mov	r0, r4
1005bd2a:	f7ff ff4d 	bl	1005bbc8 <LL_cpe_get_ctrl_flds_common_p>
1005bd2e:	4606      	mov	r6, r0
1005bd30:	4620      	mov	r0, r4
1005bd32:	f7fe f901 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005bd36:	4604      	mov	r4, r0
1005bd38:	8835      	ldrh	r5, [r6, #0]
1005bd3a:	f7fe fbc0 	bl	1005a4be <llc_conn_get_tx_ctrl_pdu_state>
1005bd3e:	0729      	lsls	r1, r5, #28
1005bd40:	d509      	bpl.n	1005bd56 <LL_cpe_engine+0x56>
1005bd42:	2803      	cmp	r0, #3
1005bd44:	d107      	bne.n	1005bd56 <LL_cpe_engine+0x56>
1005bd46:	2100      	movs	r1, #0
1005bd48:	4620      	mov	r0, r4
1005bd4a:	f7fe fe53 	bl	1005a9f4 <llc_conn_set_tx_ctrl_pdu_state>
1005bd4e:	8830      	ldrh	r0, [r6, #0]
1005bd50:	2108      	movs	r1, #8
1005bd52:	4388      	bics	r0, r1
1005bd54:	8030      	strh	r0, [r6, #0]
1005bd56:	9806      	ldr	r0, [sp, #24]
1005bd58:	f000 fbb0 	bl	1005c4bc <ll_cpe_check_rx_pdu_can_be_processed>
1005bd5c:	2800      	cmp	r0, #0
1005bd5e:	d100      	bne.n	1005bd62 <LL_cpe_engine+0x62>
1005bd60:	e12e      	b.n	1005bfc0 <LL_cpe_engine+0x2c0>
1005bd62:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005bd64:	4606      	mov	r6, r0
1005bd66:	362c      	adds	r6, #44	@ 0x2c
1005bd68:	4639      	mov	r1, r7
1005bd6a:	f7fe fb7b 	bl	1005a464 <llc_conn_get_ctrl_pdu_data_p>
1005bd6e:	7885      	ldrb	r5, [r0, #2]
1005bd70:	9005      	str	r0, [sp, #20]
1005bd72:	7840      	ldrb	r0, [r0, #1]
1005bd74:	9008      	str	r0, [sp, #32]
1005bd76:	2101      	movs	r1, #1
1005bd78:	9c06      	ldr	r4, [sp, #24]
1005bd7a:	4620      	mov	r0, r4
1005bd7c:	9104      	str	r1, [sp, #16]
1005bd7e:	463a      	mov	r2, r7
1005bd80:	f000 fbad 	bl	1005c4de <ll_cpe_get_blocked_status>
1005bd84:	9009      	str	r0, [sp, #36]	@ 0x24
1005bd86:	4620      	mov	r0, r4
1005bd88:	4639      	mov	r1, r7
1005bd8a:	463a      	mov	r2, r7
1005bd8c:	f000 fba7 	bl	1005c4de <ll_cpe_get_blocked_status>
1005bd90:	4603      	mov	r3, r0
1005bd92:	9607      	str	r6, [sp, #28]
1005bd94:	7830      	ldrb	r0, [r6, #0]
1005bd96:	1e84      	subs	r4, r0, #2
1005bd98:	1e61      	subs	r1, r4, #1
1005bd9a:	4620      	mov	r0, r4
1005bd9c:	4188      	sbcs	r0, r1
1005bd9e:	950a      	str	r5, [sp, #40]	@ 0x28
1005bda0:	2d2a      	cmp	r5, #42	@ 0x2a
1005bda2:	d900      	bls.n	1005bda6 <LL_cpe_engine+0xa6>
1005bda4:	e068      	b.n	1005be78 <LL_cpe_engine+0x178>
1005bda6:	2103      	movs	r1, #3
1005bda8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005bdaa:	4351      	muls	r1, r2
1005bdac:	4aa1      	ldr	r2, [pc, #644]	@ (1005c034 <__arm_cp.14_7>)
1005bdae:	1851      	adds	r1, r2, r1
1005bdb0:	7849      	ldrb	r1, [r1, #1]
1005bdb2:	9a08      	ldr	r2, [sp, #32]
1005bdb4:	4291      	cmp	r1, r2
1005bdb6:	d000      	beq.n	1005bdba <LL_cpe_engine+0xba>
1005bdb8:	e05e      	b.n	1005be78 <LL_cpe_engine+0x178>
1005bdba:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005bdbc:	292a      	cmp	r1, #42	@ 0x2a
1005bdbe:	d900      	bls.n	1005bdc2 <LL_cpe_engine+0xc2>
1005bdc0:	e05a      	b.n	1005be78 <LL_cpe_engine+0x178>
1005bdc2:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005bdc4:	0049      	lsls	r1, r1, #1
1005bdc6:	46c0      	nop			@ (mov r8, r8)
1005bdc8:	4479      	add	r1, pc
1005bdca:	8889      	ldrh	r1, [r1, #4]
1005bdcc:	0049      	lsls	r1, r1, #1
1005bdce:	448f      	add	pc, r1
1005bdd0:	00540054 	.word	0x00540054
1005bdd4:	0054002a 	.word	0x0054002a
1005bdd8:	030e030e 	.word	0x030e030e
1005bddc:	002a002a 	.word	0x002a002a
1005bde0:	002a0054 	.word	0x002a0054
1005bde4:	002a0054 	.word	0x002a0054
1005bde8:	002a002a 	.word	0x002a002a
1005bdec:	0053030e 	.word	0x0053030e
1005bdf0:	002a0053 	.word	0x002a0053
1005bdf4:	002a002a 	.word	0x002a002a
1005bdf8:	03150315 	.word	0x03150315
1005bdfc:	03600321 	.word	0x03600321
1005be00:	00530325 	.word	0x00530325
1005be04:	03190319 	.word	0x03190319
1005be08:	002a0329 	.word	0x002a0329
1005be0c:	031d002a 	.word	0x031d002a
1005be10:	031d032d 	.word	0x031d032d
1005be14:	03110333 	.word	0x03110333
1005be18:	03110311 	.word	0x03110311
1005be1c:	033d0337 	.word	0x033d0337
1005be20:	034c0341 	.word	0x034c0341
1005be24:	0352      	.short	0x0352
1005be26:	9804      	ldr	r0, [sp, #16]
1005be28:	e027      	b.n	1005be7a <LL_cpe_engine+0x17a>
1005be2a:	4620      	mov	r0, r4
1005be2c:	f7fe f884 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005be30:	4605      	mov	r5, r0
1005be32:	202d      	movs	r0, #45	@ 0x2d
1005be34:	5c28      	ldrb	r0, [r5, r0]
1005be36:	2800      	cmp	r0, #0
1005be38:	d100      	bne.n	1005be3c <LL_cpe_engine+0x13c>
1005be3a:	e09b      	b.n	1005bf74 <LL_cpe_engine+0x274>
1005be3c:	900a      	str	r0, [sp, #40]	@ 0x28
1005be3e:	462f      	mov	r7, r5
1005be40:	372c      	adds	r7, #44	@ 0x2c
1005be42:	462e      	mov	r6, r5
1005be44:	36d8      	adds	r6, #216	@ 0xd8
1005be46:	6d78      	ldr	r0, [r7, #84]	@ 0x54
1005be48:	463c      	mov	r4, r7
1005be4a:	3454      	adds	r4, #84	@ 0x54
1005be4c:	7d79      	ldrb	r1, [r7, #21]
1005be4e:	910b      	str	r1, [sp, #44]	@ 0x2c
1005be50:	2800      	cmp	r0, #0
1005be52:	d001      	beq.n	1005be58 <LL_cpe_engine+0x158>
1005be54:	f7f8 fee2 	bl	10054c1c <Acl_Tx_Cmpl_Pkt_Handler>
1005be58:	4620      	mov	r0, r4
1005be5a:	f006 fe83 	bl	10062b64 <ACL_list_init>
1005be5e:	ce03      	ldmia	r6!, {r0, r1}
1005be60:	f7fe fba8 	bl	1005a5b4 <llc_conn_list_remove_address>
1005be64:	4874      	ldr	r0, [pc, #464]	@ (1005c038 <__arm_cp.14_8>)
1005be66:	6800      	ldr	r0, [r0, #0]
1005be68:	212c      	movs	r1, #44	@ 0x2c
1005be6a:	5c40      	ldrb	r0, [r0, r1]
1005be6c:	07c0      	lsls	r0, r0, #31
1005be6e:	0ec1      	lsrs	r1, r0, #27
1005be70:	8f6c      	ldrh	r4, [r5, #58]	@ 0x3a
1005be72:	d148      	bne.n	1005bf06 <LL_cpe_engine+0x206>
1005be74:	2205      	movs	r2, #5
1005be76:	e04d      	b.n	1005bf14 <LL_cpe_engine+0x214>
1005be78:	4638      	mov	r0, r7
1005be7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005be7c:	4319      	orrs	r1, r3
1005be7e:	d000      	beq.n	1005be82 <LL_cpe_engine+0x182>
1005be80:	e09e      	b.n	1005bfc0 <LL_cpe_engine+0x2c0>
1005be82:	2800      	cmp	r0, #0
1005be84:	d07d      	beq.n	1005bf82 <LL_cpe_engine+0x282>
1005be86:	9805      	ldr	r0, [sp, #20]
1005be88:	78c6      	ldrb	r6, [r0, #3]
1005be8a:	2401      	movs	r4, #1
1005be8c:	9f06      	ldr	r7, [sp, #24]
1005be8e:	4638      	mov	r0, r7
1005be90:	4621      	mov	r1, r4
1005be92:	f000 fb3d 	bl	1005c510 <ll_cpe_get_expected_opcode>
1005be96:	9005      	str	r0, [sp, #20]
1005be98:	4638      	mov	r0, r7
1005be9a:	4621      	mov	r1, r4
1005be9c:	f000 fb40 	bl	1005c520 <ll_cpe_get_state>
1005bea0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
1005bea2:	9004      	str	r0, [sp, #16]
1005bea4:	4628      	mov	r0, r5
1005bea6:	9603      	str	r6, [sp, #12]
1005bea8:	4631      	mov	r1, r6
1005beaa:	463a      	mov	r2, r7
1005beac:	9409      	str	r4, [sp, #36]	@ 0x24
1005beae:	4623      	mov	r3, r4
1005beb0:	f000 fb3e 	bl	1005c530 <LL_cpe_rxctrlpdu_checkreject>
1005beb4:	1e41      	subs	r1, r0, #1
1005beb6:	4188      	sbcs	r0, r1
1005beb8:	9905      	ldr	r1, [sp, #20]
1005beba:	1b49      	subs	r1, r1, r5
1005bebc:	424a      	negs	r2, r1
1005bebe:	414a      	adcs	r2, r1
1005bec0:	4302      	orrs	r2, r0
1005bec2:	9804      	ldr	r0, [sp, #16]
1005bec4:	1f00      	subs	r0, r0, #4
1005bec6:	4245      	negs	r5, r0
1005bec8:	4145      	adcs	r5, r0
1005beca:	4015      	ands	r5, r2
1005becc:	2400      	movs	r4, #0
1005bece:	4638      	mov	r0, r7
1005bed0:	4621      	mov	r1, r4
1005bed2:	f000 fb1d 	bl	1005c510 <ll_cpe_get_expected_opcode>
1005bed6:	4606      	mov	r6, r0
1005bed8:	9807      	ldr	r0, [sp, #28]
1005beda:	7800      	ldrb	r0, [r0, #0]
1005bedc:	9007      	str	r0, [sp, #28]
1005bede:	4638      	mov	r0, r7
1005bee0:	4621      	mov	r1, r4
1005bee2:	f000 fb1d 	bl	1005c520 <ll_cpe_get_state>
1005bee6:	4607      	mov	r7, r0
1005bee8:	2801      	cmp	r0, #1
1005beea:	d14e      	bne.n	1005bf8a <LL_cpe_engine+0x28a>
1005beec:	9807      	ldr	r0, [sp, #28]
1005beee:	1e81      	subs	r1, r0, #2
1005bef0:	1e48      	subs	r0, r1, #1
1005bef2:	4181      	sbcs	r1, r0
1005bef4:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005bef6:	4604      	mov	r4, r0
1005bef8:	9a08      	ldr	r2, [sp, #32]
1005befa:	f000 fb41 	bl	1005c580 <valid_first_opcode>
1005befe:	2800      	cmp	r0, #0
1005bf00:	d044      	beq.n	1005bf8c <LL_cpe_engine+0x28c>
1005bf02:	2501      	movs	r5, #1
1005bf04:	e042      	b.n	1005bf8c <LL_cpe_engine+0x28c>
1005bf06:	484d      	ldr	r0, [pc, #308]	@ (1005c03c <__arm_cp.14_9>)
1005bf08:	6800      	ldr	r0, [r0, #0]
1005bf0a:	2236      	movs	r2, #54	@ 0x36
1005bf0c:	5c80      	ldrb	r0, [r0, r2]
1005bf0e:	06c0      	lsls	r0, r0, #27
1005bf10:	d51d      	bpl.n	1005bf4e <LL_cpe_engine+0x24e>
1005bf12:	2215      	movs	r2, #21
1005bf14:	206f      	movs	r0, #111	@ 0x6f
1005bf16:	43c0      	mvns	r0, r0
1005bf18:	4041      	eors	r1, r0
1005bf1a:	4849      	ldr	r0, [pc, #292]	@ (1005c040 <__arm_cp.14_10>)
1005bf1c:	6800      	ldr	r0, [r0, #0]
1005bf1e:	6900      	ldr	r0, [r0, #16]
1005bf20:	b2ce      	uxtb	r6, r1
1005bf22:	2302      	movs	r3, #2
1005bf24:	4631      	mov	r1, r6
1005bf26:	f7f9 f8e1 	bl	100550ec <aci_event_fifo_push_header>
1005bf2a:	2800      	cmp	r0, #0
1005bf2c:	d00f      	beq.n	1005bf4e <LL_cpe_engine+0x24e>
1005bf2e:	4601      	mov	r1, r0
1005bf30:	7204      	strb	r4, [r0, #8]
1005bf32:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005bf34:	7288      	strb	r0, [r1, #10]
1005bf36:	2000      	movs	r0, #0
1005bf38:	71c8      	strb	r0, [r1, #7]
1005bf3a:	2004      	movs	r0, #4
1005bf3c:	7188      	strb	r0, [r1, #6]
1005bf3e:	2205      	movs	r2, #5
1005bf40:	714a      	strb	r2, [r1, #5]
1005bf42:	7108      	strb	r0, [r1, #4]
1005bf44:	0a20      	lsrs	r0, r4, #8
1005bf46:	7248      	strb	r0, [r1, #9]
1005bf48:	4630      	mov	r0, r6
1005bf4a:	f7f9 f96c 	bl	10055226 <aci_event_fifo_push>
1005bf4e:	4628      	mov	r0, r5
1005bf50:	f001 ffa4 	bl	1005de9c <LLC_authenticated_payload_timeout_reset>
1005bf54:	9c06      	ldr	r4, [sp, #24]
1005bf56:	4620      	mov	r0, r4
1005bf58:	f000 fc18 	bl	1005c78c <ll_cpe_reset_state_machines>
1005bf5c:	4620      	mov	r0, r4
1005bf5e:	f7fe f8bb 	bl	1005a0d8 <llc_conn_per_init>
1005bf62:	4620      	mov	r0, r4
1005bf64:	f7ff fd9c 	bl	1005baa0 <llc_pscan_wr_check_pawr_active_ucfg_weak>
1005bf68:	2800      	cmp	r0, #0
1005bf6a:	d003      	beq.n	1005bf74 <LL_cpe_engine+0x274>
1005bf6c:	2001      	movs	r0, #1
1005bf6e:	7038      	strb	r0, [r7, #0]
1005bf70:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005bf72:	7578      	strb	r0, [r7, #21]
1005bf74:	a80c      	add	r0, sp, #48	@ 0x30
1005bf76:	7841      	ldrb	r1, [r0, #1]
1005bf78:	2902      	cmp	r1, #2
1005bf7a:	d000      	beq.n	1005bf7e <LL_cpe_engine+0x27e>
1005bf7c:	e232      	b.n	1005c3e4 <__arm_cp.14_10+0x3a4>
1005bf7e:	2001      	movs	r0, #1
1005bf80:	e233      	b.n	1005c3ea <__arm_cp.14_10+0x3aa>
1005bf82:	9806      	ldr	r0, [sp, #24]
1005bf84:	f7ff fe08 	bl	1005bb98 <ll_cpe_set_unknown_rsp_pending>
1005bf88:	e017      	b.n	1005bfba <LL_cpe_engine+0x2ba>
1005bf8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1005bf8c:	9903      	ldr	r1, [sp, #12]
1005bf8e:	2204      	movs	r2, #4
1005bf90:	407a      	eors	r2, r7
1005bf92:	4620      	mov	r0, r4
1005bf94:	4066      	eors	r6, r4
1005bf96:	4316      	orrs	r6, r2
1005bf98:	4274      	negs	r4, r6
1005bf9a:	4174      	adcs	r4, r6
1005bf9c:	2f04      	cmp	r7, #4
1005bf9e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1005bfa0:	d000      	beq.n	1005bfa4 <LL_cpe_engine+0x2a4>
1005bfa2:	4626      	mov	r6, r4
1005bfa4:	2300      	movs	r3, #0
1005bfa6:	9a06      	ldr	r2, [sp, #24]
1005bfa8:	f000 fac2 	bl	1005c530 <LL_cpe_rxctrlpdu_checkreject>
1005bfac:	2800      	cmp	r0, #0
1005bfae:	d100      	bne.n	1005bfb2 <LL_cpe_engine+0x2b2>
1005bfb0:	4626      	mov	r6, r4
1005bfb2:	2e01      	cmp	r6, #1
1005bfb4:	d004      	beq.n	1005bfc0 <LL_cpe_engine+0x2c0>
1005bfb6:	2d00      	cmp	r5, #0
1005bfb8:	d102      	bne.n	1005bfc0 <LL_cpe_engine+0x2c0>
1005bfba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005bfbc:	f7fe f998 	bl	1005a2f0 <llc_conn_clr_rx_ctrl_pdu_full>
1005bfc0:	2000      	movs	r0, #0
1005bfc2:	9005      	str	r0, [sp, #20]
1005bfc4:	43c0      	mvns	r0, r0
1005bfc6:	9f06      	ldr	r7, [sp, #24]
1005bfc8:	2801      	cmp	r0, #1
1005bfca:	d100      	bne.n	1005bfce <LL_cpe_engine+0x2ce>
1005bfcc:	e1ff      	b.n	1005c3ce <__arm_cp.14_10+0x38e>
1005bfce:	900a      	str	r0, [sp, #40]	@ 0x28
1005bfd0:	1c40      	adds	r0, r0, #1
1005bfd2:	900b      	str	r0, [sp, #44]	@ 0x2c
1005bfd4:	4638      	mov	r0, r7
1005bfd6:	f000 fc5a 	bl	1005c88e <ll_cpe_get_active>
1005bfda:	2800      	cmp	r0, #0
1005bfdc:	d017      	beq.n	1005c00e <LL_cpe_engine+0x30e>
1005bfde:	4638      	mov	r0, r7
1005bfe0:	f7ff fdf2 	bl	1005bbc8 <LL_cpe_get_ctrl_flds_common_p>
1005bfe4:	4605      	mov	r5, r0
1005bfe6:	8800      	ldrh	r0, [r0, #0]
1005bfe8:	0780      	lsls	r0, r0, #30
1005bfea:	d500      	bpl.n	1005bfee <LL_cpe_engine+0x2ee>
1005bfec:	e1ed      	b.n	1005c3ca <__arm_cp.14_10+0x38a>
1005bfee:	4638      	mov	r0, r7
1005bff0:	f7fd ffa2 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005bff4:	24b2      	movs	r4, #178	@ 0xb2
1005bff6:	5d06      	ldrb	r6, [r0, r4]
1005bff8:	2e00      	cmp	r6, #0
1005bffa:	d008      	beq.n	1005c00e <LL_cpe_engine+0x30e>
1005bffc:	4638      	mov	r0, r7
1005bffe:	f7fd ff9b 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005c002:	9009      	str	r0, [sp, #36]	@ 0x24
1005c004:	f7fe fa5b 	bl	1005a4be <llc_conn_get_tx_ctrl_pdu_state>
1005c008:	2800      	cmp	r0, #0
1005c00a:	d100      	bne.n	1005c00e <LL_cpe_engine+0x30e>
1005c00c:	e0e1      	b.n	1005c1d2 <__arm_cp.14_10+0x192>
1005c00e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005c010:	b2c6      	uxtb	r6, r0
1005c012:	4638      	mov	r0, r7
1005c014:	4631      	mov	r1, r6
1005c016:	f000 fa83 	bl	1005c520 <ll_cpe_get_state>
1005c01a:	4605      	mov	r5, r0
1005c01c:	2805      	cmp	r0, #5
1005c01e:	9608      	str	r6, [sp, #32]
1005c020:	9009      	str	r0, [sp, #36]	@ 0x24
1005c022:	d816      	bhi.n	1005c052 <__arm_cp.14_10+0x12>
1005c024:	447d      	add	r5, pc
1005c026:	792d      	ldrb	r5, [r5, #4]
1005c028:	006d      	lsls	r5, r5, #1
1005c02a:	44af      	add	pc, r5
1005c02c:	6544140b 	.word	0x6544140b
1005c030:	46c0b799 	.word	0x46c0b799

1005c034 <__arm_cp.14_7>:
1005c034:	100696dc 	.word	0x100696dc

1005c038 <__arm_cp.14_8>:
1005c038:	2000241c 	.word	0x2000241c

1005c03c <__arm_cp.14_9>:
1005c03c:	20002470 	.word	0x20002470

1005c040 <__arm_cp.14_10>:
1005c040:	20002420 	.word	0x20002420
1005c044:	4638      	mov	r0, r7
1005c046:	f000 fc22 	bl	1005c88e <ll_cpe_get_active>
1005c04a:	4604      	mov	r4, r0
1005c04c:	1e40      	subs	r0, r0, #1
1005c04e:	4184      	sbcs	r4, r0
1005c050:	e180      	b.n	1005c354 <__arm_cp.14_10+0x314>
1005c052:	462c      	mov	r4, r5
1005c054:	e17e      	b.n	1005c354 <__arm_cp.14_10+0x314>
1005c056:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005c058:	2800      	cmp	r0, #0
1005c05a:	d100      	bne.n	1005c05e <__arm_cp.14_10+0x1e>
1005c05c:	e0df      	b.n	1005c21e <__arm_cp.14_10+0x1de>
1005c05e:	4638      	mov	r0, r7
1005c060:	f000 fa2c 	bl	1005c4bc <ll_cpe_check_rx_pdu_can_be_processed>
1005c064:	2800      	cmp	r0, #0
1005c066:	d100      	bne.n	1005c06a <__arm_cp.14_10+0x2a>
1005c068:	e0d7      	b.n	1005c21a <__arm_cp.14_10+0x1da>
1005c06a:	2501      	movs	r5, #1
1005c06c:	4638      	mov	r0, r7
1005c06e:	4629      	mov	r1, r5
1005c070:	f000 fa56 	bl	1005c520 <ll_cpe_get_state>
1005c074:	4604      	mov	r4, r0
1005c076:	4638      	mov	r0, r7
1005c078:	f000 fc10 	bl	1005c89c <ll_cpe_get_rx_pdu_discarded_by_one_sm>
1005c07c:	2c04      	cmp	r4, #4
1005c07e:	d103      	bne.n	1005c088 <__arm_cp.14_10+0x48>
1005c080:	462c      	mov	r4, r5
1005c082:	2800      	cmp	r0, #0
1005c084:	d100      	bne.n	1005c088 <__arm_cp.14_10+0x48>
1005c086:	e165      	b.n	1005c354 <__arm_cp.14_10+0x314>
1005c088:	2100      	movs	r1, #0
1005c08a:	2401      	movs	r4, #1
1005c08c:	4638      	mov	r0, r7
1005c08e:	4622      	mov	r2, r4
1005c090:	f000 fc0c 	bl	1005c8ac <ll_cpe_process_rx_pdu>
1005c094:	2800      	cmp	r0, #0
1005c096:	d100      	bne.n	1005c09a <__arm_cp.14_10+0x5a>
1005c098:	e153      	b.n	1005c342 <__arm_cp.14_10+0x302>
1005c09a:	2100      	movs	r1, #0
1005c09c:	4638      	mov	r0, r7
1005c09e:	f7ff fda0 	bl	1005bbe2 <LL_cpe_get_active_status>
1005c0a2:	2800      	cmp	r0, #0
1005c0a4:	d100      	bne.n	1005c0a8 <__arm_cp.14_10+0x68>
1005c0a6:	e152      	b.n	1005c34e <__arm_cp.14_10+0x30e>
1005c0a8:	2100      	movs	r1, #0
1005c0aa:	4638      	mov	r0, r7
1005c0ac:	f000 fcf4 	bl	1005ca98 <ll_cpe_get_instant_active>
1005c0b0:	2800      	cmp	r0, #0
1005c0b2:	d171      	bne.n	1005c198 <__arm_cp.14_10+0x158>
1005c0b4:	e143      	b.n	1005c33e <__arm_cp.14_10+0x2fe>
1005c0b6:	4638      	mov	r0, r7
1005c0b8:	f7fd ff3e 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005c0bc:	4604      	mov	r4, r0
1005c0be:	4638      	mov	r0, r7
1005c0c0:	4631      	mov	r1, r6
1005c0c2:	f7ff fd95 	bl	1005bbf0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c0c6:	7800      	ldrb	r0, [r0, #0]
1005c0c8:	06c7      	lsls	r7, r0, #27
1005c0ca:	9407      	str	r4, [sp, #28]
1005c0cc:	4620      	mov	r0, r4
1005c0ce:	f7fe f9f6 	bl	1005a4be <llc_conn_get_tx_ctrl_pdu_state>
1005c0d2:	2402      	movs	r4, #2
1005c0d4:	2f00      	cmp	r7, #0
1005c0d6:	d400      	bmi.n	1005c0da <__arm_cp.14_10+0x9a>
1005c0d8:	e09d      	b.n	1005c216 <__arm_cp.14_10+0x1d6>
1005c0da:	2800      	cmp	r0, #0
1005c0dc:	d000      	beq.n	1005c0e0 <__arm_cp.14_10+0xa0>
1005c0de:	e09a      	b.n	1005c216 <__arm_cp.14_10+0x1d6>
1005c0e0:	2701      	movs	r7, #1
1005c0e2:	9d06      	ldr	r5, [sp, #24]
1005c0e4:	4628      	mov	r0, r5
1005c0e6:	4631      	mov	r1, r6
1005c0e8:	463a      	mov	r2, r7
1005c0ea:	f000 f9f8 	bl	1005c4de <ll_cpe_get_blocked_status>
1005c0ee:	2800      	cmp	r0, #0
1005c0f0:	d100      	bne.n	1005c0f4 <__arm_cp.14_10+0xb4>
1005c0f2:	e0b6      	b.n	1005c262 <__arm_cp.14_10+0x222>
1005c0f4:	462f      	mov	r7, r5
1005c0f6:	e12d      	b.n	1005c354 <__arm_cp.14_10+0x314>
1005c0f8:	4638      	mov	r0, r7
1005c0fa:	f7fd ff1d 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005c0fe:	4605      	mov	r5, r0
1005c100:	f7fe f9dd 	bl	1005a4be <llc_conn_get_tx_ctrl_pdu_state>
1005c104:	2803      	cmp	r0, #3
1005c106:	d000      	beq.n	1005c10a <__arm_cp.14_10+0xca>
1005c108:	e0ed      	b.n	1005c2e6 <__arm_cp.14_10+0x2a6>
1005c10a:	4638      	mov	r0, r7
1005c10c:	4631      	mov	r1, r6
1005c10e:	f7ff fda7 	bl	1005bc60 <ll_cpe_get_cpid_from_sm>
1005c112:	f000 fcff 	bl	1005cb14 <LL_cpe_get_cpf>
1005c116:	4604      	mov	r4, r0
1005c118:	2600      	movs	r6, #0
1005c11a:	4638      	mov	r0, r7
1005c11c:	9908      	ldr	r1, [sp, #32]
1005c11e:	4632      	mov	r2, r6
1005c120:	4633      	mov	r3, r6
1005c122:	47a0      	blx	r4
1005c124:	4602      	mov	r2, r0
1005c126:	4638      	mov	r0, r7
1005c128:	9908      	ldr	r1, [sp, #32]
1005c12a:	f000 fd00 	bl	1005cb2e <ll_cpe_set_expected_opcode>
1005c12e:	4628      	mov	r0, r5
1005c130:	4631      	mov	r1, r6
1005c132:	9c08      	ldr	r4, [sp, #32]
1005c134:	f7fe fc5e 	bl	1005a9f4 <llc_conn_set_tx_ctrl_pdu_state>
1005c138:	4638      	mov	r0, r7
1005c13a:	4621      	mov	r1, r4
1005c13c:	f7ff fd51 	bl	1005bbe2 <LL_cpe_get_active_status>
1005c140:	2800      	cmp	r0, #0
1005c142:	d06a      	beq.n	1005c21a <__arm_cp.14_10+0x1da>
1005c144:	4638      	mov	r0, r7
1005c146:	4621      	mov	r1, r4
1005c148:	f000 fca6 	bl	1005ca98 <ll_cpe_get_instant_active>
1005c14c:	2800      	cmp	r0, #0
1005c14e:	d160      	bne.n	1005c212 <__arm_cp.14_10+0x1d2>
1005c150:	4638      	mov	r0, r7
1005c152:	4621      	mov	r1, r4
1005c154:	f000 f9dc 	bl	1005c510 <ll_cpe_get_expected_opcode>
1005c158:	28ff      	cmp	r0, #255	@ 0xff
1005c15a:	d068      	beq.n	1005c22e <__arm_cp.14_10+0x1ee>
1005c15c:	2404      	movs	r4, #4
1005c15e:	e0f9      	b.n	1005c354 <__arm_cp.14_10+0x314>
1005c160:	4638      	mov	r0, r7
1005c162:	f000 f9ab 	bl	1005c4bc <ll_cpe_check_rx_pdu_can_be_processed>
1005c166:	2404      	movs	r4, #4
1005c168:	2800      	cmp	r0, #0
1005c16a:	d100      	bne.n	1005c16e <__arm_cp.14_10+0x12e>
1005c16c:	e0f2      	b.n	1005c354 <__arm_cp.14_10+0x314>
1005c16e:	2203      	movs	r2, #3
1005c170:	4638      	mov	r0, r7
1005c172:	4631      	mov	r1, r6
1005c174:	f000 fb9a 	bl	1005c8ac <ll_cpe_process_rx_pdu>
1005c178:	2800      	cmp	r0, #0
1005c17a:	d05a      	beq.n	1005c232 <__arm_cp.14_10+0x1f2>
1005c17c:	4638      	mov	r0, r7
1005c17e:	4631      	mov	r1, r6
1005c180:	f7ff fd2f 	bl	1005bbe2 <LL_cpe_get_active_status>
1005c184:	2800      	cmp	r0, #0
1005c186:	d100      	bne.n	1005c18a <__arm_cp.14_10+0x14a>
1005c188:	e0bb      	b.n	1005c302 <__arm_cp.14_10+0x2c2>
1005c18a:	4638      	mov	r0, r7
1005c18c:	4631      	mov	r1, r6
1005c18e:	f000 fc83 	bl	1005ca98 <ll_cpe_get_instant_active>
1005c192:	2800      	cmp	r0, #0
1005c194:	d100      	bne.n	1005c198 <__arm_cp.14_10+0x158>
1005c196:	e0b6      	b.n	1005c306 <__arm_cp.14_10+0x2c6>
1005c198:	2405      	movs	r4, #5
1005c19a:	e0d8      	b.n	1005c34e <__arm_cp.14_10+0x30e>
1005c19c:	4638      	mov	r0, r7
1005c19e:	f7fd fecb 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005c1a2:	4604      	mov	r4, r0
1005c1a4:	f7fe f974 	bl	1005a490 <llc_conn_get_instant_reached>
1005c1a8:	2801      	cmp	r0, #1
1005c1aa:	d132      	bne.n	1005c212 <__arm_cp.14_10+0x1d2>
1005c1ac:	4638      	mov	r0, r7
1005c1ae:	4631      	mov	r1, r6
1005c1b0:	f7ff fd56 	bl	1005bc60 <ll_cpe_get_cpid_from_sm>
1005c1b4:	f000 fcae 	bl	1005cb14 <LL_cpe_get_cpf>
1005c1b8:	2800      	cmp	r0, #0
1005c1ba:	9407      	str	r4, [sp, #28]
1005c1bc:	d100      	bne.n	1005c1c0 <__arm_cp.14_10+0x180>
1005c1be:	e094      	b.n	1005c2ea <__arm_cp.14_10+0x2aa>
1005c1c0:	4605      	mov	r5, r0
1005c1c2:	4620      	mov	r0, r4
1005c1c4:	f7fe f95f 	bl	1005a486 <llc_conn_get_instant_passed>
1005c1c8:	2801      	cmp	r0, #1
1005c1ca:	d100      	bne.n	1005c1ce <__arm_cp.14_10+0x18e>
1005c1cc:	e08f      	b.n	1005c2ee <__arm_cp.14_10+0x2ae>
1005c1ce:	2207      	movs	r2, #7
1005c1d0:	e08e      	b.n	1005c2f0 <__arm_cp.14_10+0x2b0>
1005c1d2:	2101      	movs	r1, #1
1005c1d4:	910a      	str	r1, [sp, #40]	@ 0x28
1005c1d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005c1d8:	f7fe f944 	bl	1005a464 <llc_conn_get_ctrl_pdu_data_p>
1005c1dc:	49b2      	ldr	r1, [pc, #712]	@ (1005c4a8 <__arm_cp.14_1>)
1005c1de:	8001      	strh	r1, [r0, #0]
1005c1e0:	0671      	lsls	r1, r6, #25
1005c1e2:	0c49      	lsrs	r1, r1, #17
1005c1e4:	1c89      	adds	r1, r1, #2
1005c1e6:	8041      	strh	r1, [r0, #2]
1005c1e8:	8828      	ldrh	r0, [r5, #0]
1005c1ea:	2102      	movs	r1, #2
1005c1ec:	4301      	orrs	r1, r0
1005c1ee:	8029      	strh	r1, [r5, #0]
1005c1f0:	4638      	mov	r0, r7
1005c1f2:	f7fd fea1 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005c1f6:	9d05      	ldr	r5, [sp, #20]
1005c1f8:	5505      	strb	r5, [r0, r4]
1005c1fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005c1fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1005c1fe:	4621      	mov	r1, r4
1005c200:	f7fe fbf8 	bl	1005a9f4 <llc_conn_set_tx_ctrl_pdu_state>
1005c204:	2204      	movs	r2, #4
1005c206:	4638      	mov	r0, r7
1005c208:	4621      	mov	r1, r4
1005c20a:	462b      	mov	r3, r5
1005c20c:	f7ff fcf7 	bl	1005bbfe <LL_cpe_set_active>
1005c210:	e0db      	b.n	1005c3ca <__arm_cp.14_10+0x38a>
1005c212:	2405      	movs	r4, #5
1005c214:	e09e      	b.n	1005c354 <__arm_cp.14_10+0x314>
1005c216:	9f06      	ldr	r7, [sp, #24]
1005c218:	e09c      	b.n	1005c354 <__arm_cp.14_10+0x314>
1005c21a:	2401      	movs	r4, #1
1005c21c:	e09a      	b.n	1005c354 <__arm_cp.14_10+0x314>
1005c21e:	2401      	movs	r4, #1
1005c220:	4638      	mov	r0, r7
1005c222:	4621      	mov	r1, r4
1005c224:	f7ff fcdd 	bl	1005bbe2 <LL_cpe_get_active_status>
1005c228:	2800      	cmp	r0, #0
1005c22a:	d100      	bne.n	1005c22e <__arm_cp.14_10+0x1ee>
1005c22c:	e092      	b.n	1005c354 <__arm_cp.14_10+0x314>
1005c22e:	2402      	movs	r4, #2
1005c230:	e090      	b.n	1005c354 <__arm_cp.14_10+0x314>
1005c232:	4626      	mov	r6, r4
1005c234:	4638      	mov	r0, r7
1005c236:	f000 fb31 	bl	1005c89c <ll_cpe_get_rx_pdu_discarded_by_one_sm>
1005c23a:	4604      	mov	r4, r0
1005c23c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005c23e:	4241      	negs	r1, r0
1005c240:	4141      	adcs	r1, r0
1005c242:	4638      	mov	r0, r7
1005c244:	f000 f96c 	bl	1005c520 <ll_cpe_get_state>
1005c248:	2c00      	cmp	r4, #0
1005c24a:	d064      	beq.n	1005c316 <__arm_cp.14_10+0x2d6>
1005c24c:	4638      	mov	r0, r7
1005c24e:	f7fd fe73 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005c252:	2100      	movs	r1, #0
1005c254:	f7fe f906 	bl	1005a464 <llc_conn_get_ctrl_pdu_data_p>
1005c258:	4638      	mov	r0, r7
1005c25a:	f000 fc24 	bl	1005caa6 <ll_cpe_clr_rx_pdu_discarded_by_one_sm>
1005c25e:	4634      	mov	r4, r6
1005c260:	e078      	b.n	1005c354 <__arm_cp.14_10+0x314>
1005c262:	9704      	str	r7, [sp, #16]
1005c264:	22ff      	movs	r2, #255	@ 0xff
1005c266:	4628      	mov	r0, r5
1005c268:	4631      	mov	r1, r6
1005c26a:	f000 fc24 	bl	1005cab6 <ll_cpe_check_instant_blocked>
1005c26e:	2800      	cmp	r0, #0
1005c270:	462f      	mov	r7, r5
1005c272:	d16f      	bne.n	1005c354 <__arm_cp.14_10+0x314>
1005c274:	4638      	mov	r0, r7
1005c276:	4631      	mov	r1, r6
1005c278:	f7ff fcf2 	bl	1005bc60 <ll_cpe_get_cpid_from_sm>
1005c27c:	f000 fc4a 	bl	1005cb14 <LL_cpe_get_cpf>
1005c280:	4604      	mov	r4, r0
1005c282:	9807      	ldr	r0, [sp, #28]
1005c284:	9d04      	ldr	r5, [sp, #16]
1005c286:	4629      	mov	r1, r5
1005c288:	f7fe f8ec 	bl	1005a464 <llc_conn_get_ctrl_pdu_data_p>
1005c28c:	4603      	mov	r3, r0
1005c28e:	2206      	movs	r2, #6
1005c290:	4638      	mov	r0, r7
1005c292:	4631      	mov	r1, r6
1005c294:	9303      	str	r3, [sp, #12]
1005c296:	47a0      	blx	r4
1005c298:	4638      	mov	r0, r7
1005c29a:	4631      	mov	r1, r6
1005c29c:	f7ff fca1 	bl	1005bbe2 <LL_cpe_get_active_status>
1005c2a0:	2800      	cmp	r0, #0
1005c2a2:	462c      	mov	r4, r5
1005c2a4:	d056      	beq.n	1005c354 <__arm_cp.14_10+0x314>
1005c2a6:	4638      	mov	r0, r7
1005c2a8:	4631      	mov	r1, r6
1005c2aa:	f7ff fca1 	bl	1005bbf0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c2ae:	7801      	ldrb	r1, [r0, #0]
1005c2b0:	22ef      	movs	r2, #239	@ 0xef
1005c2b2:	400a      	ands	r2, r1
1005c2b4:	7002      	strb	r2, [r0, #0]
1005c2b6:	22ff      	movs	r2, #255	@ 0xff
1005c2b8:	4638      	mov	r0, r7
1005c2ba:	4631      	mov	r1, r6
1005c2bc:	f000 fc37 	bl	1005cb2e <ll_cpe_set_expected_opcode>
1005c2c0:	2401      	movs	r4, #1
1005c2c2:	9807      	ldr	r0, [sp, #28]
1005c2c4:	4621      	mov	r1, r4
1005c2c6:	f7fe fb95 	bl	1005a9f4 <llc_conn_set_tx_ctrl_pdu_state>
1005c2ca:	9a03      	ldr	r2, [sp, #12]
1005c2cc:	7850      	ldrb	r0, [r2, #1]
1005c2ce:	2108      	movs	r1, #8
1005c2d0:	1c80      	adds	r0, r0, #2
1005c2d2:	b2c0      	uxtb	r0, r0
1005c2d4:	9100      	str	r1, [sp, #0]
1005c2d6:	9001      	str	r0, [sp, #4]
1005c2d8:	9202      	str	r2, [sp, #8]
1005c2da:	2000      	movs	r0, #0
1005c2dc:	4621      	mov	r1, r4
1005c2de:	4622      	mov	r2, r4
1005c2e0:	4623      	mov	r3, r4
1005c2e2:	f7f8 fefe 	bl	100550e2 <log_notify_stu_ucfg_weak>
1005c2e6:	2403      	movs	r4, #3
1005c2e8:	e034      	b.n	1005c354 <__arm_cp.14_10+0x314>
1005c2ea:	2405      	movs	r4, #5
1005c2ec:	e005      	b.n	1005c2fa <__arm_cp.14_10+0x2ba>
1005c2ee:	2208      	movs	r2, #8
1005c2f0:	2300      	movs	r3, #0
1005c2f2:	4638      	mov	r0, r7
1005c2f4:	4631      	mov	r1, r6
1005c2f6:	47a8      	blx	r5
1005c2f8:	2401      	movs	r4, #1
1005c2fa:	9807      	ldr	r0, [sp, #28]
1005c2fc:	f7fd ffe4 	bl	1005a2c8 <llc_conn_clr_instant_reached_passed>
1005c300:	e028      	b.n	1005c354 <__arm_cp.14_10+0x314>
1005c302:	2401      	movs	r4, #1
1005c304:	e023      	b.n	1005c34e <__arm_cp.14_10+0x30e>
1005c306:	4638      	mov	r0, r7
1005c308:	4631      	mov	r1, r6
1005c30a:	f000 f901 	bl	1005c510 <ll_cpe_get_expected_opcode>
1005c30e:	28ff      	cmp	r0, #255	@ 0xff
1005c310:	d015      	beq.n	1005c33e <__arm_cp.14_10+0x2fe>
1005c312:	2404      	movs	r4, #4
1005c314:	e01b      	b.n	1005c34e <__arm_cp.14_10+0x30e>
1005c316:	2804      	cmp	r0, #4
1005c318:	d004      	beq.n	1005c324 <__arm_cp.14_10+0x2e4>
1005c31a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005c31c:	2900      	cmp	r1, #0
1005c31e:	d095      	beq.n	1005c24c <__arm_cp.14_10+0x20c>
1005c320:	2801      	cmp	r0, #1
1005c322:	d193      	bne.n	1005c24c <__arm_cp.14_10+0x20c>
1005c324:	4638      	mov	r0, r7
1005c326:	f7ff fc4f 	bl	1005bbc8 <LL_cpe_get_ctrl_flds_common_p>
1005c32a:	8801      	ldrh	r1, [r0, #0]
1005c32c:	2404      	movs	r4, #4
1005c32e:	4321      	orrs	r1, r4
1005c330:	8001      	strh	r1, [r0, #0]
1005c332:	2015      	movs	r0, #21
1005c334:	f006 fa24 	bl	10062780 <tsk_notify_idx>
1005c338:	f7f5 fba5 	bl	10051a86 <BLE_STACK_ProcessRequest>
1005c33c:	e00a      	b.n	1005c354 <__arm_cp.14_10+0x314>
1005c33e:	2402      	movs	r4, #2
1005c340:	e005      	b.n	1005c34e <__arm_cp.14_10+0x30e>
1005c342:	4638      	mov	r0, r7
1005c344:	f7fd fdf8 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005c348:	2100      	movs	r1, #0
1005c34a:	f7fe f88b 	bl	1005a464 <llc_conn_get_ctrl_pdu_data_p>
1005c34e:	4638      	mov	r0, r7
1005c350:	f000 fba9 	bl	1005caa6 <ll_cpe_clr_rx_pdu_discarded_by_one_sm>
1005c354:	4638      	mov	r0, r7
1005c356:	f7ff fc37 	bl	1005bbc8 <LL_cpe_get_ctrl_flds_common_p>
1005c35a:	4606      	mov	r6, r0
1005c35c:	8800      	ldrh	r0, [r0, #0]
1005c35e:	06c0      	lsls	r0, r0, #27
1005c360:	d527      	bpl.n	1005c3b2 <__arm_cp.14_10+0x372>
1005c362:	4638      	mov	r0, r7
1005c364:	f7fd fde8 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005c368:	4605      	mov	r5, r0
1005c36a:	f7fe f8a8 	bl	1005a4be <llc_conn_get_tx_ctrl_pdu_state>
1005c36e:	9407      	str	r4, [sp, #28]
1005c370:	4604      	mov	r4, r0
1005c372:	2100      	movs	r1, #0
1005c374:	2201      	movs	r2, #1
1005c376:	4638      	mov	r0, r7
1005c378:	f000 f8b1 	bl	1005c4de <ll_cpe_get_blocked_status>
1005c37c:	4320      	orrs	r0, r4
1005c37e:	9c07      	ldr	r4, [sp, #28]
1005c380:	d117      	bne.n	1005c3b2 <__arm_cp.14_10+0x372>
1005c382:	8837      	ldrh	r7, [r6, #0]
1005c384:	2401      	movs	r4, #1
1005c386:	4628      	mov	r0, r5
1005c388:	4621      	mov	r1, r4
1005c38a:	f7fe f86b 	bl	1005a464 <llc_conn_get_ctrl_pdu_data_p>
1005c38e:	4946      	ldr	r1, [pc, #280]	@ (1005c4a8 <__arm_cp.14_1>)
1005c390:	8001      	strh	r1, [r0, #0]
1005c392:	0979      	lsrs	r1, r7, #5
1005c394:	9f06      	ldr	r7, [sp, #24]
1005c396:	0209      	lsls	r1, r1, #8
1005c398:	1dc9      	adds	r1, r1, #7
1005c39a:	8041      	strh	r1, [r0, #2]
1005c39c:	8830      	ldrh	r0, [r6, #0]
1005c39e:	2108      	movs	r1, #8
1005c3a0:	4301      	orrs	r1, r0
1005c3a2:	2010      	movs	r0, #16
1005c3a4:	4381      	bics	r1, r0
1005c3a6:	8031      	strh	r1, [r6, #0]
1005c3a8:	4628      	mov	r0, r5
1005c3aa:	4621      	mov	r1, r4
1005c3ac:	9c07      	ldr	r4, [sp, #28]
1005c3ae:	f7fe fb21 	bl	1005a9f4 <llc_conn_set_tx_ctrl_pdu_state>
1005c3b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005c3b4:	42a0      	cmp	r0, r4
1005c3b6:	d004      	beq.n	1005c3c2 <__arm_cp.14_10+0x382>
1005c3b8:	4638      	mov	r0, r7
1005c3ba:	9908      	ldr	r1, [sp, #32]
1005c3bc:	4622      	mov	r2, r4
1005c3be:	f000 fa5d 	bl	1005c87c <ll_cpe_set_state>
1005c3c2:	a80c      	add	r0, sp, #48	@ 0x30
1005c3c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005c3c6:	1840      	adds	r0, r0, r1
1005c3c8:	7044      	strb	r4, [r0, #1]
1005c3ca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005c3cc:	e5fc      	b.n	1005bfc8 <LL_cpe_engine+0x2c8>
1005c3ce:	a80c      	add	r0, sp, #48	@ 0x30
1005c3d0:	7802      	ldrb	r2, [r0, #0]
1005c3d2:	2001      	movs	r0, #1
1005c3d4:	2a02      	cmp	r2, #2
1005c3d6:	d008      	beq.n	1005c3ea <__arm_cp.14_10+0x3aa>
1005c3d8:	a90c      	add	r1, sp, #48	@ 0x30
1005c3da:	7849      	ldrb	r1, [r1, #1]
1005c3dc:	2902      	cmp	r1, #2
1005c3de:	d004      	beq.n	1005c3ea <__arm_cp.14_10+0x3aa>
1005c3e0:	2a03      	cmp	r2, #3
1005c3e2:	d002      	beq.n	1005c3ea <__arm_cp.14_10+0x3aa>
1005c3e4:	1ec9      	subs	r1, r1, #3
1005c3e6:	4248      	negs	r0, r1
1005c3e8:	4148      	adcs	r0, r1
1005c3ea:	b00d      	add	sp, #52	@ 0x34
1005c3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005c3ee:	4260      	negs	r0, r4
1005c3f0:	4160      	adcs	r0, r4
1005c3f2:	e542      	b.n	1005be7a <LL_cpe_engine+0x17a>
1005c3f4:	461c      	mov	r4, r3
1005c3f6:	f7fd f8cb 	bl	10059590 <pcl_csr_ucfg_weak>
1005c3fa:	e046      	b.n	1005c48a <__arm_cp.14_10+0x44a>
1005c3fc:	461c      	mov	r4, r3
1005c3fe:	f7fd f8c5 	bl	1005958c <data_length_extension_csr_ucfg_weak>
1005c402:	e042      	b.n	1005c48a <__arm_cp.14_10+0x44a>
1005c404:	461c      	mov	r4, r3
1005c406:	f7fd f865 	bl	100594d4 <cte_csr_ucfg_weak>
1005c40a:	e03e      	b.n	1005c48a <__arm_cp.14_10+0x44a>
1005c40c:	461d      	mov	r5, r3
1005c40e:	f7ff fb01 	bl	1005ba14 <cis_csr_ucfg_weak>
1005c412:	e022      	b.n	1005c45a <__arm_cp.14_10+0x41a>
1005c414:	461c      	mov	r4, r3
1005c416:	f7f2 fbb3 	bl	1004eb80 <phy_upd_csr_ucfg>
1005c41a:	e036      	b.n	1005c48a <__arm_cp.14_10+0x44a>
1005c41c:	461d      	mov	r5, r3
1005c41e:	f7f2 fbaf 	bl	1004eb80 <phy_upd_csr_ucfg>
1005c422:	e01a      	b.n	1005c45a <__arm_cp.14_10+0x41a>
1005c424:	461c      	mov	r4, r3
1005c426:	f7ff faff 	bl	1005ba28 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005c42a:	e027      	b.n	1005c47c <__arm_cp.14_10+0x43c>
1005c42c:	4265      	negs	r5, r4
1005c42e:	4165      	adcs	r5, r4
1005c430:	461c      	mov	r4, r3
1005c432:	f7ff faef 	bl	1005ba14 <cis_csr_ucfg_weak>
1005c436:	e031      	b.n	1005c49c <__arm_cp.14_10+0x45c>
1005c438:	461c      	mov	r4, r3
1005c43a:	f7ff faeb 	bl	1005ba14 <cis_csr_ucfg_weak>
1005c43e:	e024      	b.n	1005c48a <__arm_cp.14_10+0x44a>
1005c440:	4265      	negs	r5, r4
1005c442:	4165      	adcs	r5, r4
1005c444:	461c      	mov	r4, r3
1005c446:	f7fd f8ab 	bl	100595a0 <subrate_csr_ucfg_weak>
1005c44a:	e027      	b.n	1005c49c <__arm_cp.14_10+0x45c>
1005c44c:	461d      	mov	r5, r3
1005c44e:	f7fd f8a7 	bl	100595a0 <subrate_csr_ucfg_weak>
1005c452:	e002      	b.n	1005c45a <__arm_cp.14_10+0x41a>
1005c454:	461d      	mov	r5, r3
1005c456:	f7fc ff48 	bl	100592ea <chc_csr_ucfg_weak>
1005c45a:	462b      	mov	r3, r5
1005c45c:	1e41      	subs	r1, r0, #1
1005c45e:	4188      	sbcs	r0, r1
1005c460:	1e61      	subs	r1, r4, #1
1005c462:	418c      	sbcs	r4, r1
1005c464:	4004      	ands	r4, r0
1005c466:	4620      	mov	r0, r4
1005c468:	e507      	b.n	1005be7a <LL_cpe_engine+0x17a>
1005c46a:	4265      	negs	r5, r4
1005c46c:	4165      	adcs	r5, r4
1005c46e:	461c      	mov	r4, r3
1005c470:	f7fc ff3b 	bl	100592ea <chc_csr_ucfg_weak>
1005c474:	e012      	b.n	1005c49c <__arm_cp.14_10+0x45c>
1005c476:	461c      	mov	r4, r3
1005c478:	f7ff fad8 	bl	1005ba2c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005c47c:	4623      	mov	r3, r4
1005c47e:	2800      	cmp	r0, #0
1005c480:	4638      	mov	r0, r7
1005c482:	d100      	bne.n	1005c486 <__arm_cp.14_10+0x446>
1005c484:	e4f9      	b.n	1005be7a <LL_cpe_engine+0x17a>
1005c486:	f7fd f887 	bl	10059598 <scan_csr_ucfg_weak>
1005c48a:	4623      	mov	r3, r4
1005c48c:	1e41      	subs	r1, r0, #1
1005c48e:	4188      	sbcs	r0, r1
1005c490:	e4f3      	b.n	1005be7a <LL_cpe_engine+0x17a>
1005c492:	4265      	negs	r5, r4
1005c494:	4165      	adcs	r5, r4
1005c496:	461c      	mov	r4, r3
1005c498:	f7f2 fb72 	bl	1004eb80 <phy_upd_csr_ucfg>
1005c49c:	4623      	mov	r3, r4
1005c49e:	1e41      	subs	r1, r0, #1
1005c4a0:	4188      	sbcs	r0, r1
1005c4a2:	4028      	ands	r0, r5
1005c4a4:	e4e9      	b.n	1005be7a <LL_cpe_engine+0x17a>
1005c4a6:	46c0      	nop			@ (mov r8, r8)

1005c4a8 <__arm_cp.14_1>:
1005c4a8:	00000203 	.word	0x00000203

1005c4ac <ll_cpe_set_active>:
1005c4ac:	b580      	push	{r7, lr}
1005c4ae:	f7ff fb8b 	bl	1005bbc8 <LL_cpe_get_ctrl_flds_common_p>
1005c4b2:	8801      	ldrh	r1, [r0, #0]
1005c4b4:	2201      	movs	r2, #1
1005c4b6:	430a      	orrs	r2, r1
1005c4b8:	8002      	strh	r2, [r0, #0]
1005c4ba:	bd80      	pop	{r7, pc}

1005c4bc <ll_cpe_check_rx_pdu_can_be_processed>:
1005c4bc:	b510      	push	{r4, lr}
1005c4be:	f7fd fd3b 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005c4c2:	4604      	mov	r4, r0
1005c4c4:	f7fd ffe9 	bl	1005a49a <llc_conn_get_rx_ctrl_pdu_full>
1005c4c8:	2800      	cmp	r0, #0
1005c4ca:	d006      	beq.n	1005c4da <ll_cpe_check_rx_pdu_can_be_processed+0x1e>
1005c4cc:	4620      	mov	r0, r4
1005c4ce:	f7fd fff6 	bl	1005a4be <llc_conn_get_tx_ctrl_pdu_state>
1005c4d2:	1ec0      	subs	r0, r0, #3
1005c4d4:	1e41      	subs	r1, r0, #1
1005c4d6:	4188      	sbcs	r0, r1
1005c4d8:	bd10      	pop	{r4, pc}
1005c4da:	2000      	movs	r0, #0
1005c4dc:	bd10      	pop	{r4, pc}

1005c4de <ll_cpe_get_blocked_status>:
1005c4de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005c4e0:	4614      	mov	r4, r2
1005c4e2:	4607      	mov	r7, r0
1005c4e4:	424e      	negs	r6, r1
1005c4e6:	414e      	adcs	r6, r1
1005c4e8:	4631      	mov	r1, r6
1005c4ea:	f7ff fb7a 	bl	1005bbe2 <LL_cpe_get_active_status>
1005c4ee:	2500      	movs	r5, #0
1005c4f0:	2800      	cmp	r0, #0
1005c4f2:	d00b      	beq.n	1005c50c <ll_cpe_get_blocked_status+0x2e>
1005c4f4:	4638      	mov	r0, r7
1005c4f6:	4631      	mov	r1, r6
1005c4f8:	f7ff fb7a 	bl	1005bbf0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c4fc:	2c02      	cmp	r4, #2
1005c4fe:	d805      	bhi.n	1005c50c <ll_cpe_get_blocked_status+0x2e>
1005c500:	7800      	ldrb	r0, [r0, #0]
1005c502:	1c61      	adds	r1, r4, #1
1005c504:	b2c9      	uxtb	r1, r1
1005c506:	40c8      	lsrs	r0, r1
1005c508:	2501      	movs	r5, #1
1005c50a:	4005      	ands	r5, r0
1005c50c:	4628      	mov	r0, r5
1005c50e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005c510 <ll_cpe_get_expected_opcode>:
1005c510:	b510      	push	{r4, lr}
1005c512:	460c      	mov	r4, r1
1005c514:	f7fd fd10 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005c518:	1900      	adds	r0, r0, r4
1005c51a:	21ae      	movs	r1, #174	@ 0xae
1005c51c:	5c40      	ldrb	r0, [r0, r1]
1005c51e:	bd10      	pop	{r4, pc}

1005c520 <ll_cpe_get_state>:
1005c520:	b510      	push	{r4, lr}
1005c522:	460c      	mov	r4, r1
1005c524:	f7fd fd08 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005c528:	1900      	adds	r0, r0, r4
1005c52a:	21aa      	movs	r1, #170	@ 0xaa
1005c52c:	5c40      	ldrb	r0, [r0, r1]
1005c52e:	bd10      	pop	{r4, pc}

1005c530 <LL_cpe_rxctrlpdu_checkreject>:
1005c530:	b5b0      	push	{r4, r5, r7, lr}
1005c532:	460c      	mov	r4, r1
1005c534:	4605      	mov	r5, r0
1005c536:	4610      	mov	r0, r2
1005c538:	4619      	mov	r1, r3
1005c53a:	f7ff fb91 	bl	1005bc60 <ll_cpe_get_cpid_from_sm>
1005c53e:	4601      	mov	r1, r0
1005c540:	2001      	movs	r0, #1
1005c542:	2d0d      	cmp	r5, #13
1005c544:	d102      	bne.n	1005c54c <LL_cpe_rxctrlpdu_checkreject+0x1c>
1005c546:	2901      	cmp	r1, #1
1005c548:	d100      	bne.n	1005c54c <LL_cpe_rxctrlpdu_checkreject+0x1c>
1005c54a:	bdb0      	pop	{r4, r5, r7, pc}
1005c54c:	2200      	movs	r2, #0
1005c54e:	2d11      	cmp	r5, #17
1005c550:	d001      	beq.n	1005c556 <LL_cpe_rxctrlpdu_checkreject+0x26>
1005c552:	2d07      	cmp	r5, #7
1005c554:	d110      	bne.n	1005c578 <LL_cpe_rxctrlpdu_checkreject+0x48>
1005c556:	2c2a      	cmp	r4, #42	@ 0x2a
1005c558:	d804      	bhi.n	1005c564 <LL_cpe_rxctrlpdu_checkreject+0x34>
1005c55a:	2303      	movs	r3, #3
1005c55c:	4363      	muls	r3, r4
1005c55e:	4d07      	ldr	r5, [pc, #28]	@ (1005c57c <__arm_cp.20_0>)
1005c560:	5ceb      	ldrb	r3, [r5, r3]
1005c562:	e000      	b.n	1005c566 <LL_cpe_rxctrlpdu_checkreject+0x36>
1005c564:	2316      	movs	r3, #22
1005c566:	4299      	cmp	r1, r3
1005c568:	d106      	bne.n	1005c578 <LL_cpe_rxctrlpdu_checkreject+0x48>
1005c56a:	2103      	movs	r1, #3
1005c56c:	4361      	muls	r1, r4
1005c56e:	4b03      	ldr	r3, [pc, #12]	@ (1005c57c <__arm_cp.20_0>)
1005c570:	1859      	adds	r1, r3, r1
1005c572:	7889      	ldrb	r1, [r1, #2]
1005c574:	2900      	cmp	r1, #0
1005c576:	d1e8      	bne.n	1005c54a <LL_cpe_rxctrlpdu_checkreject+0x1a>
1005c578:	4610      	mov	r0, r2
1005c57a:	bdb0      	pop	{r4, r5, r7, pc}

1005c57c <__arm_cp.20_0>:
1005c57c:	100696dc 	.word	0x100696dc

1005c580 <valid_first_opcode>:
1005c580:	b5b0      	push	{r4, r5, r7, lr}
1005c582:	2300      	movs	r3, #0
1005c584:	282a      	cmp	r0, #42	@ 0x2a
1005c586:	d863      	bhi.n	1005c650 <valid_first_opcode+0xd0>
1005c588:	2403      	movs	r4, #3
1005c58a:	4344      	muls	r4, r0
1005c58c:	4d34      	ldr	r5, [pc, #208]	@ (1005c660 <__arm_cp.21_0>)
1005c58e:	192c      	adds	r4, r5, r4
1005c590:	7864      	ldrb	r4, [r4, #1]
1005c592:	4294      	cmp	r4, r2
1005c594:	d15c      	bne.n	1005c650 <valid_first_opcode+0xd0>
1005c596:	282a      	cmp	r0, #42	@ 0x2a
1005c598:	d85a      	bhi.n	1005c650 <valid_first_opcode+0xd0>
1005c59a:	0080      	lsls	r0, r0, #2
1005c59c:	a201      	add	r2, pc, #4	@ (adr r2, 1005c5a4 <valid_first_opcode+0x24>)
1005c59e:	5810      	ldr	r0, [r2, r0]
1005c5a0:	4687      	mov	pc, r0
1005c5a2:	46c0      	nop			@ (mov r8, r8)
1005c5a4:	1005c653 	.word	0x1005c653
1005c5a8:	1005c653 	.word	0x1005c653
1005c5ac:	1005c651 	.word	0x1005c651
1005c5b0:	1005c653 	.word	0x1005c653
1005c5b4:	1005c651 	.word	0x1005c651
1005c5b8:	1005c651 	.word	0x1005c651
1005c5bc:	1005c651 	.word	0x1005c651
1005c5c0:	1005c651 	.word	0x1005c651
1005c5c4:	1005c653 	.word	0x1005c653
1005c5c8:	1005c651 	.word	0x1005c651
1005c5cc:	1005c653 	.word	0x1005c653
1005c5d0:	1005c651 	.word	0x1005c651
1005c5d4:	1005c657 	.word	0x1005c657
1005c5d8:	1005c651 	.word	0x1005c651
1005c5dc:	1005c65b 	.word	0x1005c65b
1005c5e0:	1005c651 	.word	0x1005c651
1005c5e4:	1005c651 	.word	0x1005c651
1005c5e8:	1005c651 	.word	0x1005c651
1005c5ec:	1005c657 	.word	0x1005c657
1005c5f0:	1005c651 	.word	0x1005c651
1005c5f4:	1005c657 	.word	0x1005c657
1005c5f8:	1005c651 	.word	0x1005c651
1005c5fc:	1005c657 	.word	0x1005c657
1005c600:	1005c651 	.word	0x1005c651
1005c604:	1005c651 	.word	0x1005c651
1005c608:	1005c651 	.word	0x1005c651
1005c60c:	1005c657 	.word	0x1005c657
1005c610:	1005c651 	.word	0x1005c651
1005c614:	1005c657 	.word	0x1005c657
1005c618:	1005c657 	.word	0x1005c657
1005c61c:	1005c651 	.word	0x1005c651
1005c620:	1005c653 	.word	0x1005c653
1005c624:	1005c651 	.word	0x1005c651
1005c628:	1005c651 	.word	0x1005c651
1005c62c:	1005c657 	.word	0x1005c657
1005c630:	1005c657 	.word	0x1005c657
1005c634:	1005c651 	.word	0x1005c651
1005c638:	1005c657 	.word	0x1005c657
1005c63c:	1005c657 	.word	0x1005c657
1005c640:	1005c657 	.word	0x1005c657
1005c644:	1005c657 	.word	0x1005c657
1005c648:	1005c657 	.word	0x1005c657
1005c64c:	1005c657 	.word	0x1005c657
1005c650:	4619      	mov	r1, r3
1005c652:	4608      	mov	r0, r1
1005c654:	bdb0      	pop	{r4, r5, r7, pc}
1005c656:	2101      	movs	r1, #1
1005c658:	e7fb      	b.n	1005c652 <valid_first_opcode+0xd2>
1005c65a:	4248      	negs	r0, r1
1005c65c:	4141      	adcs	r1, r0
1005c65e:	e7f8      	b.n	1005c652 <valid_first_opcode+0xd2>

1005c660 <__arm_cp.21_0>:
1005c660:	100696dc 	.word	0x100696dc

1005c664 <LL_cpe_init_phy_update>:
1005c664:	b580      	push	{r7, lr}
1005c666:	2007      	movs	r0, #7
1005c668:	4901      	ldr	r1, [pc, #4]	@ (1005c670 <__arm_cp.23_0>)
1005c66a:	f7ff fab2 	bl	1005bbd2 <LL_cpe_register_cpf>
1005c66e:	bd80      	pop	{r7, pc}

1005c670 <__arm_cp.23_0>:
1005c670:	1005e07d 	.word	0x1005e07d

1005c674 <LL_cpe_init_conn_update>:
1005c674:	b580      	push	{r7, lr}
1005c676:	2000      	movs	r0, #0
1005c678:	4901      	ldr	r1, [pc, #4]	@ (1005c680 <__arm_cp.28_0>)
1005c67a:	f7ff faaa 	bl	1005bbd2 <LL_cpe_register_cpf>
1005c67e:	bd80      	pop	{r7, pc}

1005c680 <__arm_cp.28_0>:
1005c680:	1005cca1 	.word	0x1005cca1

1005c684 <LL_cpe_init_chmap_update>:
1005c684:	b580      	push	{r7, lr}
1005c686:	2002      	movs	r0, #2
1005c688:	4901      	ldr	r1, [pc, #4]	@ (1005c690 <__arm_cp.29_0>)
1005c68a:	f7ff faa2 	bl	1005bbd2 <LL_cpe_register_cpf>
1005c68e:	bd80      	pop	{r7, pc}

1005c690 <__arm_cp.29_0>:
1005c690:	1005cb91 	.word	0x1005cb91

1005c694 <LL_cpe_init_length_update_ucfg_weak>:
1005c694:	b580      	push	{r7, lr}
1005c696:	2006      	movs	r0, #6
1005c698:	2100      	movs	r1, #0
1005c69a:	f7ff fa9a 	bl	1005bbd2 <LL_cpe_register_cpf>
1005c69e:	bd80      	pop	{r7, pc}

1005c6a0 <LL_cpe_init_cte_ucfg_weak>:
1005c6a0:	b580      	push	{r7, lr}
1005c6a2:	200a      	movs	r0, #10
1005c6a4:	2100      	movs	r1, #0
1005c6a6:	f7ff fa94 	bl	1005bbd2 <LL_cpe_register_cpf>
1005c6aa:	bd80      	pop	{r7, pc}

1005c6ac <LL_cpe_init_past_ucfg_weak>:
1005c6ac:	b580      	push	{r7, lr}
1005c6ae:	2009      	movs	r0, #9
1005c6b0:	2100      	movs	r1, #0
1005c6b2:	f7ff fa8e 	bl	1005bbd2 <LL_cpe_register_cpf>
1005c6b6:	bd80      	pop	{r7, pc}

1005c6b8 <LL_cpe_init_pcl_ucfg_weak>:
1005c6b8:	b580      	push	{r7, lr}
1005c6ba:	200b      	movs	r0, #11
1005c6bc:	2100      	movs	r1, #0
1005c6be:	f7ff fa88 	bl	1005bbd2 <LL_cpe_register_cpf>
1005c6c2:	bd80      	pop	{r7, pc}

1005c6c4 <LL_cpe_init_chc_enable_ucfg_weak>:
1005c6c4:	b580      	push	{r7, lr}
1005c6c6:	200c      	movs	r0, #12
1005c6c8:	2100      	movs	r1, #0
1005c6ca:	f7ff fa82 	bl	1005bbd2 <LL_cpe_register_cpf>
1005c6ce:	bd80      	pop	{r7, pc}

1005c6d0 <LL_cpe_init_chc_reporting_ucfg_weak>:
1005c6d0:	b580      	push	{r7, lr}
1005c6d2:	200d      	movs	r0, #13
1005c6d4:	2100      	movs	r1, #0
1005c6d6:	f7ff fa7c 	bl	1005bbd2 <LL_cpe_register_cpf>
1005c6da:	bd80      	pop	{r7, pc}

1005c6dc <LL_cpe_init_subrate_ucfg_weak>:
1005c6dc:	b580      	push	{r7, lr}
1005c6de:	2011      	movs	r0, #17
1005c6e0:	2100      	movs	r1, #0
1005c6e2:	f7ff fa76 	bl	1005bbd2 <LL_cpe_register_cpf>
1005c6e6:	bd80      	pop	{r7, pc}

1005c6e8 <LL_cpe_init_sca_upd_ucfg_weak>:
1005c6e8:	b580      	push	{r7, lr}
1005c6ea:	2012      	movs	r0, #18
1005c6ec:	2100      	movs	r1, #0
1005c6ee:	f7ff fa70 	bl	1005bbd2 <LL_cpe_register_cpf>
1005c6f2:	bd80      	pop	{r7, pc}

1005c6f4 <LL_cpe_init_cis_ucfg_weak>:
1005c6f4:	b510      	push	{r4, lr}
1005c6f6:	200e      	movs	r0, #14
1005c6f8:	2400      	movs	r4, #0
1005c6fa:	4621      	mov	r1, r4
1005c6fc:	f7ff fa69 	bl	1005bbd2 <LL_cpe_register_cpf>
1005c700:	2010      	movs	r0, #16
1005c702:	4621      	mov	r1, r4
1005c704:	f7ff fa65 	bl	1005bbd2 <LL_cpe_register_cpf>
1005c708:	bd10      	pop	{r4, pc}
	...

1005c70c <LL_cpe_init>:
1005c70c:	b5b0      	push	{r4, r5, r7, lr}
1005c70e:	2001      	movs	r0, #1
1005c710:	4918      	ldr	r1, [pc, #96]	@ (1005c774 <__arm_cp.47_0>)
1005c712:	4c19      	ldr	r4, [pc, #100]	@ (1005c778 <__arm_cp.47_1>)
1005c714:	47a0      	blx	r4
1005c716:	2003      	movs	r0, #3
1005c718:	4918      	ldr	r1, [pc, #96]	@ (1005c77c <__arm_cp.47_2>)
1005c71a:	47a0      	blx	r4
1005c71c:	2005      	movs	r0, #5
1005c71e:	4918      	ldr	r1, [pc, #96]	@ (1005c780 <__arm_cp.47_3>)
1005c720:	47a0      	blx	r4
1005c722:	2008      	movs	r0, #8
1005c724:	4917      	ldr	r1, [pc, #92]	@ (1005c784 <__arm_cp.47_4>)
1005c726:	47a0      	blx	r4
1005c728:	f7f2 fb1d 	bl	1004ed66 <LL_cpe_init_conn_update_ucfg>
1005c72c:	f7f2 fb22 	bl	1004ed74 <LL_cpe_init_chmap_update_ucfg>
1005c730:	f7ff ffb0 	bl	1005c694 <LL_cpe_init_length_update_ucfg_weak>
1005c734:	f7f2 fb10 	bl	1004ed58 <LL_cpe_init_phy_update_ucfg>
1005c738:	f7ff ffb8 	bl	1005c6ac <LL_cpe_init_past_ucfg_weak>
1005c73c:	f7ff ffb0 	bl	1005c6a0 <LL_cpe_init_cte_ucfg_weak>
1005c740:	f7ff ffba 	bl	1005c6b8 <LL_cpe_init_pcl_ucfg_weak>
1005c744:	f7ff ffbe 	bl	1005c6c4 <LL_cpe_init_chc_enable_ucfg_weak>
1005c748:	f7ff ffc2 	bl	1005c6d0 <LL_cpe_init_chc_reporting_ucfg_weak>
1005c74c:	f7ff ffd2 	bl	1005c6f4 <LL_cpe_init_cis_ucfg_weak>
1005c750:	f7ff ffc4 	bl	1005c6dc <LL_cpe_init_subrate_ucfg_weak>
1005c754:	f7ff ffc8 	bl	1005c6e8 <LL_cpe_init_sca_upd_ucfg_weak>
1005c758:	2400      	movs	r4, #0
1005c75a:	4d0b      	ldr	r5, [pc, #44]	@ (1005c788 <__arm_cp.47_5>)
1005c75c:	6828      	ldr	r0, [r5, #0]
1005c75e:	2134      	movs	r1, #52	@ 0x34
1005c760:	5c41      	ldrb	r1, [r0, r1]
1005c762:	b2e0      	uxtb	r0, r4
1005c764:	4288      	cmp	r0, r1
1005c766:	d203      	bcs.n	1005c770 <LL_cpe_init+0x64>
1005c768:	f000 f810 	bl	1005c78c <ll_cpe_reset_state_machines>
1005c76c:	1c64      	adds	r4, r4, #1
1005c76e:	e7f5      	b.n	1005c75c <LL_cpe_init+0x50>
1005c770:	bdb0      	pop	{r4, r5, r7, pc}
1005c772:	46c0      	nop			@ (mov r8, r8)

1005c774 <__arm_cp.47_0>:
1005c774:	1005d125 	.word	0x1005d125

1005c778 <__arm_cp.47_1>:
1005c778:	1005bbd3 	.word	0x1005bbd3

1005c77c <__arm_cp.47_2>:
1005c77c:	1005d911 	.word	0x1005d911

1005c780 <__arm_cp.47_3>:
1005c780:	1005e945 	.word	0x1005e945

1005c784 <__arm_cp.47_4>:
1005c784:	1005ded1 	.word	0x1005ded1

1005c788 <__arm_cp.47_5>:
1005c788:	2000241c 	.word	0x2000241c

1005c78c <ll_cpe_reset_state_machines>:
1005c78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005c78e:	2638      	movs	r6, #56	@ 0x38
1005c790:	4346      	muls	r6, r0
1005c792:	9000      	str	r0, [sp, #0]
1005c794:	f7fd fbd0 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005c798:	4605      	mov	r5, r0
1005c79a:	4816      	ldr	r0, [pc, #88]	@ (1005c7f4 <__arm_cp.48_0>)
1005c79c:	6800      	ldr	r0, [r0, #0]
1005c79e:	219c      	movs	r1, #156	@ 0x9c
1005c7a0:	5842      	ldr	r2, [r0, r1]
1005c7a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
1005c7a4:	6892      	ldr	r2, [r2, #8]
1005c7a6:	1992      	adds	r2, r2, r6
1005c7a8:	23a0      	movs	r3, #160	@ 0xa0
1005c7aa:	50ea      	str	r2, [r5, r3]
1005c7ac:	5840      	ldr	r0, [r0, r1]
1005c7ae:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005c7b0:	68c0      	ldr	r0, [r0, #12]
1005c7b2:	1980      	adds	r0, r0, r6
1005c7b4:	462e      	mov	r6, r5
1005c7b6:	36a0      	adds	r6, #160	@ 0xa0
1005c7b8:	6070      	str	r0, [r6, #4]
1005c7ba:	27ae      	movs	r7, #174	@ 0xae
1005c7bc:	2fb0      	cmp	r7, #176	@ 0xb0
1005c7be:	d00f      	beq.n	1005c7e0 <ll_cpe_reset_state_machines+0x54>
1005c7c0:	4638      	mov	r0, r7
1005c7c2:	38ae      	subs	r0, #174	@ 0xae
1005c7c4:	19e9      	adds	r1, r5, r7
1005c7c6:	1f09      	subs	r1, r1, #4
1005c7c8:	2400      	movs	r4, #0
1005c7ca:	700c      	strb	r4, [r1, #0]
1005c7cc:	b2c1      	uxtb	r1, r0
1005c7ce:	9800      	ldr	r0, [sp, #0]
1005c7d0:	f7ff fa0e 	bl	1005bbf0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c7d4:	7004      	strb	r4, [r0, #0]
1005c7d6:	20ff      	movs	r0, #255	@ 0xff
1005c7d8:	55e8      	strb	r0, [r5, r7]
1005c7da:	74f4      	strb	r4, [r6, #19]
1005c7dc:	1c7f      	adds	r7, r7, #1
1005c7de:	e7ed      	b.n	1005c7bc <ll_cpe_reset_state_machines+0x30>
1005c7e0:	2400      	movs	r4, #0
1005c7e2:	74b4      	strb	r4, [r6, #18]
1005c7e4:	9800      	ldr	r0, [sp, #0]
1005c7e6:	f7ff f9ef 	bl	1005bbc8 <LL_cpe_get_ctrl_flds_common_p>
1005c7ea:	8004      	strh	r4, [r0, #0]
1005c7ec:	4802      	ldr	r0, [pc, #8]	@ (1005c7f8 <__arm_cp.48_1>)
1005c7ee:	8768      	strh	r0, [r5, #58]	@ 0x3a
1005c7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005c7f2:	46c0      	nop			@ (mov r8, r8)

1005c7f4 <__arm_cp.48_0>:
1005c7f4:	20002470 	.word	0x20002470

1005c7f8 <__arm_cp.48_1>:
1005c7f8:	0000ffff 	.word	0x0000ffff

1005c7fc <LL_cpe_set_disconnect>:
1005c7fc:	b510      	push	{r4, lr}
1005c7fe:	2480      	movs	r4, #128	@ 0x80
1005c800:	430c      	orrs	r4, r1
1005c802:	f7fd fb99 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005c806:	21b2      	movs	r1, #178	@ 0xb2
1005c808:	5444      	strb	r4, [r0, r1]
1005c80a:	2015      	movs	r0, #21
1005c80c:	f005 ffb8 	bl	10062780 <tsk_notify_idx>
1005c810:	f7f5 f939 	bl	10051a86 <BLE_STACK_ProcessRequest>
1005c814:	bd10      	pop	{r4, pc}

1005c816 <LL_cpe_get_tx_terminate_in_progress>:
1005c816:	b580      	push	{r7, lr}
1005c818:	f7ff f9d6 	bl	1005bbc8 <LL_cpe_get_ctrl_flds_common_p>
1005c81c:	7800      	ldrb	r0, [r0, #0]
1005c81e:	0780      	lsls	r0, r0, #30
1005c820:	0fc0      	lsrs	r0, r0, #31
1005c822:	bd80      	pop	{r7, pc}

1005c824 <LL_cpe_conn_exception_opcode_from_sm>:
1005c824:	b580      	push	{r7, lr}
1005c826:	f7ff fa1b 	bl	1005bc60 <ll_cpe_get_cpid_from_sm>
1005c82a:	21fd      	movs	r1, #253	@ 0xfd
1005c82c:	4008      	ands	r0, r1
1005c82e:	4241      	negs	r1, r0
1005c830:	4148      	adcs	r0, r1
1005c832:	bd80      	pop	{r7, pc}

1005c834 <LL_cpe_conn_get_proc_id_from_sm>:
1005c834:	b580      	push	{r7, lr}
1005c836:	f7ff fa13 	bl	1005bc60 <ll_cpe_get_cpid_from_sm>
1005c83a:	bd80      	pop	{r7, pc}

1005c83c <llc_cpe_calc_instant>:
1005c83c:	b580      	push	{r7, lr}
1005c83e:	f7fd fb7b 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005c842:	2142      	movs	r1, #66	@ 0x42
1005c844:	5a41      	ldrh	r1, [r0, r1]
1005c846:	2291      	movs	r2, #145	@ 0x91
1005c848:	0052      	lsls	r2, r2, #1
1005c84a:	5a82      	ldrh	r2, [r0, r2]
1005c84c:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
1005c84e:	1c40      	adds	r0, r0, #1
1005c850:	4350      	muls	r0, r2
1005c852:	2206      	movs	r2, #6
1005c854:	4342      	muls	r2, r0
1005c856:	1850      	adds	r0, r2, r1
1005c858:	b280      	uxth	r0, r0
1005c85a:	bd80      	pop	{r7, pc}

1005c85c <llc_cpe_init_sm_ctxt>:
1005c85c:	b5b0      	push	{r4, r5, r7, lr}
1005c85e:	4604      	mov	r4, r0
1005c860:	f7ff fe24 	bl	1005c4ac <ll_cpe_set_active>
1005c864:	4620      	mov	r0, r4
1005c866:	f7fd fb67 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005c86a:	21aa      	movs	r1, #170	@ 0xaa
1005c86c:	2501      	movs	r5, #1
1005c86e:	5445      	strb	r5, [r0, r1]
1005c870:	4620      	mov	r0, r4
1005c872:	f7fd fb61 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005c876:	21ab      	movs	r1, #171	@ 0xab
1005c878:	5445      	strb	r5, [r0, r1]
1005c87a:	bdb0      	pop	{r4, r5, r7, pc}

1005c87c <ll_cpe_set_state>:
1005c87c:	b5b0      	push	{r4, r5, r7, lr}
1005c87e:	4614      	mov	r4, r2
1005c880:	460d      	mov	r5, r1
1005c882:	f7fd fb59 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005c886:	1940      	adds	r0, r0, r5
1005c888:	21aa      	movs	r1, #170	@ 0xaa
1005c88a:	5444      	strb	r4, [r0, r1]
1005c88c:	bdb0      	pop	{r4, r5, r7, pc}

1005c88e <ll_cpe_get_active>:
1005c88e:	b580      	push	{r7, lr}
1005c890:	f7ff f99a 	bl	1005bbc8 <LL_cpe_get_ctrl_flds_common_p>
1005c894:	8801      	ldrh	r1, [r0, #0]
1005c896:	2001      	movs	r0, #1
1005c898:	4008      	ands	r0, r1
1005c89a:	bd80      	pop	{r7, pc}

1005c89c <ll_cpe_get_rx_pdu_discarded_by_one_sm>:
1005c89c:	b580      	push	{r7, lr}
1005c89e:	f7ff f993 	bl	1005bbc8 <LL_cpe_get_ctrl_flds_common_p>
1005c8a2:	7800      	ldrb	r0, [r0, #0]
1005c8a4:	0740      	lsls	r0, r0, #29
1005c8a6:	0fc0      	lsrs	r0, r0, #31
1005c8a8:	bd80      	pop	{r7, pc}
	...

1005c8ac <ll_cpe_process_rx_pdu>:
1005c8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1005c8ae:	b08f      	sub	sp, #60	@ 0x3c
1005c8b0:	9206      	str	r2, [sp, #24]
1005c8b2:	460d      	mov	r5, r1
1005c8b4:	4606      	mov	r6, r0
1005c8b6:	f7fd fb3f 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005c8ba:	212c      	movs	r1, #44	@ 0x2c
1005c8bc:	5c41      	ldrb	r1, [r0, r1]
1005c8be:	1ec9      	subs	r1, r1, #3
1005c8c0:	424a      	negs	r2, r1
1005c8c2:	414a      	adcs	r2, r1
1005c8c4:	9205      	str	r2, [sp, #20]
1005c8c6:	2400      	movs	r4, #0
1005c8c8:	900a      	str	r0, [sp, #40]	@ 0x28
1005c8ca:	4621      	mov	r1, r4
1005c8cc:	f7fd fdca 	bl	1005a464 <llc_conn_get_ctrl_pdu_data_p>
1005c8d0:	7841      	ldrb	r1, [r0, #1]
1005c8d2:	9104      	str	r1, [sp, #16]
1005c8d4:	9009      	str	r0, [sp, #36]	@ 0x24
1005c8d6:	8847      	ldrh	r7, [r0, #2]
1005c8d8:	4630      	mov	r0, r6
1005c8da:	4629      	mov	r1, r5
1005c8dc:	f7ff fe18 	bl	1005c510 <ll_cpe_get_expected_opcode>
1005c8e0:	9003      	str	r0, [sp, #12]
1005c8e2:	4630      	mov	r0, r6
1005c8e4:	4629      	mov	r1, r5
1005c8e6:	9407      	str	r4, [sp, #28]
1005c8e8:	4622      	mov	r2, r4
1005c8ea:	f7ff fdf8 	bl	1005c4de <ll_cpe_get_blocked_status>
1005c8ee:	900b      	str	r0, [sp, #44]	@ 0x2c
1005c8f0:	b2fa      	uxtb	r2, r7
1005c8f2:	4630      	mov	r0, r6
1005c8f4:	4629      	mov	r1, r5
1005c8f6:	920e      	str	r2, [sp, #56]	@ 0x38
1005c8f8:	f000 f8dd 	bl	1005cab6 <ll_cpe_check_instant_blocked>
1005c8fc:	900c      	str	r0, [sp, #48]	@ 0x30
1005c8fe:	426c      	negs	r4, r5
1005c900:	9508      	str	r5, [sp, #32]
1005c902:	416c      	adcs	r4, r5
1005c904:	4630      	mov	r0, r6
1005c906:	4621      	mov	r1, r4
1005c908:	f7ff fe0a 	bl	1005c520 <ll_cpe_get_state>
1005c90c:	4605      	mov	r5, r0
1005c90e:	960d      	str	r6, [sp, #52]	@ 0x34
1005c910:	4630      	mov	r0, r6
1005c912:	4621      	mov	r1, r4
1005c914:	f7ff fdfc 	bl	1005c510 <ll_cpe_get_expected_opcode>
1005c918:	463a      	mov	r2, r7
1005c91a:	1ff9      	subs	r1, r7, #7
1005c91c:	b2cb      	uxtb	r3, r1
1005c91e:	2b0b      	cmp	r3, #11
1005c920:	d302      	bcc.n	1005c928 <ll_cpe_process_rx_pdu+0x7c>
1005c922:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005c924:	9f07      	ldr	r7, [sp, #28]
1005c926:	e001      	b.n	1005c92c <ll_cpe_process_rx_pdu+0x80>
1005c928:	2701      	movs	r7, #1
1005c92a:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005c92c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1005c92e:	2e01      	cmp	r6, #1
1005c930:	d103      	bne.n	1005c93a <ll_cpe_process_rx_pdu+0x8e>
1005c932:	2d04      	cmp	r5, #4
1005c934:	d147      	bne.n	1005c9c6 <ll_cpe_process_rx_pdu+0x11a>
1005c936:	4288      	cmp	r0, r1
1005c938:	d145      	bne.n	1005c9c6 <ll_cpe_process_rx_pdu+0x11a>
1005c93a:	4955      	ldr	r1, [pc, #340]	@ (1005ca90 <__arm_cp.58_0>)
1005c93c:	40d9      	lsrs	r1, r3
1005c93e:	400f      	ands	r7, r1
1005c940:	0a16      	lsrs	r6, r2, #8
1005c942:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005c944:	2901      	cmp	r1, #1
1005c946:	d11d      	bne.n	1005c984 <ll_cpe_process_rx_pdu+0xd8>
1005c948:	900c      	str	r0, [sp, #48]	@ 0x30
1005c94a:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005c94c:	4631      	mov	r1, r6
1005c94e:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1005c950:	4632      	mov	r2, r6
1005c952:	4623      	mov	r3, r4
1005c954:	f7ff fdec 	bl	1005c530 <LL_cpe_rxctrlpdu_checkreject>
1005c958:	2d04      	cmp	r5, #4
1005c95a:	d10c      	bne.n	1005c976 <ll_cpe_process_rx_pdu+0xca>
1005c95c:	2101      	movs	r1, #1
1005c95e:	404f      	eors	r7, r1
1005c960:	d101      	bne.n	1005c966 <ll_cpe_process_rx_pdu+0xba>
1005c962:	2800      	cmp	r0, #0
1005c964:	d007      	beq.n	1005c976 <ll_cpe_process_rx_pdu+0xca>
1005c966:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005c968:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005c96a:	1a40      	subs	r0, r0, r1
1005c96c:	1e41      	subs	r1, r0, #1
1005c96e:	4188      	sbcs	r0, r1
1005c970:	4007      	ands	r7, r0
1005c972:	2f01      	cmp	r7, #1
1005c974:	d16e      	bne.n	1005ca54 <ll_cpe_process_rx_pdu+0x1a8>
1005c976:	4630      	mov	r0, r6
1005c978:	4621      	mov	r1, r4
1005c97a:	f7ff f971 	bl	1005bc60 <ll_cpe_get_cpid_from_sm>
1005c97e:	4605      	mov	r5, r0
1005c980:	2605      	movs	r6, #5
1005c982:	e026      	b.n	1005c9d2 <ll_cpe_process_rx_pdu+0x126>
1005c984:	2400      	movs	r4, #0
1005c986:	9806      	ldr	r0, [sp, #24]
1005c988:	2803      	cmp	r0, #3
1005c98a:	d049      	beq.n	1005ca20 <ll_cpe_process_rx_pdu+0x174>
1005c98c:	2801      	cmp	r0, #1
1005c98e:	d144      	bne.n	1005ca1a <ll_cpe_process_rx_pdu+0x16e>
1005c990:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
1005c992:	4630      	mov	r0, r6
1005c994:	9905      	ldr	r1, [sp, #20]
1005c996:	9a04      	ldr	r2, [sp, #16]
1005c998:	f7ff fdf2 	bl	1005c580 <valid_first_opcode>
1005c99c:	2801      	cmp	r0, #1
1005c99e:	d13c      	bne.n	1005ca1a <ll_cpe_process_rx_pdu+0x16e>
1005c9a0:	2401      	movs	r4, #1
1005c9a2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
1005c9a4:	4628      	mov	r0, r5
1005c9a6:	4621      	mov	r1, r4
1005c9a8:	f7ff f91b 	bl	1005bbe2 <LL_cpe_get_active_status>
1005c9ac:	4607      	mov	r7, r0
1005c9ae:	4628      	mov	r0, r5
1005c9b0:	4621      	mov	r1, r4
1005c9b2:	f000 f897 	bl	1005cae4 <ll_cpe_get_instant_supported>
1005c9b6:	4605      	mov	r5, r0
1005c9b8:	4630      	mov	r0, r6
1005c9ba:	f000 f89b 	bl	1005caf4 <LL_cpe_is_opcode_supporting_instant>
1005c9be:	2801      	cmp	r0, #1
1005c9c0:	d04a      	beq.n	1005ca58 <ll_cpe_process_rx_pdu+0x1ac>
1005c9c2:	4622      	mov	r2, r4
1005c9c4:	e049      	b.n	1005ca5a <ll_cpe_process_rx_pdu+0x1ae>
1005c9c6:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005c9c8:	4621      	mov	r1, r4
1005c9ca:	f7ff f949 	bl	1005bc60 <ll_cpe_get_cpid_from_sm>
1005c9ce:	4605      	mov	r5, r0
1005c9d0:	2604      	movs	r6, #4
1005c9d2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005c9d4:	7878      	ldrb	r0, [r7, #1]
1005c9d6:	2110      	movs	r1, #16
1005c9d8:	1c80      	adds	r0, r0, #2
1005c9da:	b2c0      	uxtb	r0, r0
1005c9dc:	9100      	str	r1, [sp, #0]
1005c9de:	9001      	str	r0, [sp, #4]
1005c9e0:	9702      	str	r7, [sp, #8]
1005c9e2:	2401      	movs	r4, #1
1005c9e4:	2000      	movs	r0, #0
1005c9e6:	4621      	mov	r1, r4
1005c9e8:	4622      	mov	r2, r4
1005c9ea:	4603      	mov	r3, r0
1005c9ec:	f7f8 fb79 	bl	100550e2 <log_notify_stu_ucfg_weak>
1005c9f0:	4628      	mov	r0, r5
1005c9f2:	f000 f88f 	bl	1005cb14 <LL_cpe_get_cpf>
1005c9f6:	2800      	cmp	r0, #0
1005c9f8:	d00c      	beq.n	1005ca14 <ll_cpe_process_rx_pdu+0x168>
1005c9fa:	4605      	mov	r5, r0
1005c9fc:	4632      	mov	r2, r6
1005c9fe:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1005ca00:	4630      	mov	r0, r6
1005ca02:	463b      	mov	r3, r7
1005ca04:	9f08      	ldr	r7, [sp, #32]
1005ca06:	4639      	mov	r1, r7
1005ca08:	47a8      	blx	r5
1005ca0a:	4602      	mov	r2, r0
1005ca0c:	4630      	mov	r0, r6
1005ca0e:	4639      	mov	r1, r7
1005ca10:	f000 f88d 	bl	1005cb2e <ll_cpe_set_expected_opcode>
1005ca14:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005ca16:	f7fd fc6b 	bl	1005a2f0 <llc_conn_clr_rx_ctrl_pdu_full>
1005ca1a:	4620      	mov	r0, r4
1005ca1c:	b00f      	add	sp, #60	@ 0x3c
1005ca1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005ca20:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005ca22:	9d08      	ldr	r5, [sp, #32]
1005ca24:	4629      	mov	r1, r5
1005ca26:	f7ff f91b 	bl	1005bc60 <ll_cpe_get_cpid_from_sm>
1005ca2a:	900c      	str	r0, [sp, #48]	@ 0x30
1005ca2c:	2f00      	cmp	r7, #0
1005ca2e:	d009      	beq.n	1005ca44 <ll_cpe_process_rx_pdu+0x198>
1005ca30:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005ca32:	4631      	mov	r1, r6
1005ca34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1005ca36:	462b      	mov	r3, r5
1005ca38:	f7ff fd7a 	bl	1005c530 <LL_cpe_rxctrlpdu_checkreject>
1005ca3c:	4604      	mov	r4, r0
1005ca3e:	2801      	cmp	r0, #1
1005ca40:	d004      	beq.n	1005ca4c <ll_cpe_process_rx_pdu+0x1a0>
1005ca42:	e7ea      	b.n	1005ca1a <ll_cpe_process_rx_pdu+0x16e>
1005ca44:	9803      	ldr	r0, [sp, #12]
1005ca46:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005ca48:	4288      	cmp	r0, r1
1005ca4a:	d113      	bne.n	1005ca74 <ll_cpe_process_rx_pdu+0x1c8>
1005ca4c:	2603      	movs	r6, #3
1005ca4e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005ca50:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
1005ca52:	e7bf      	b.n	1005c9d4 <ll_cpe_process_rx_pdu+0x128>
1005ca54:	2400      	movs	r4, #0
1005ca56:	e7e0      	b.n	1005ca1a <ll_cpe_process_rx_pdu+0x16e>
1005ca58:	2202      	movs	r2, #2
1005ca5a:	4067      	eors	r7, r4
1005ca5c:	4065      	eors	r5, r4
1005ca5e:	433d      	orrs	r5, r7
1005ca60:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005ca62:	d000      	beq.n	1005ca66 <ll_cpe_process_rx_pdu+0x1ba>
1005ca64:	4622      	mov	r2, r4
1005ca66:	2e2a      	cmp	r6, #42	@ 0x2a
1005ca68:	d80e      	bhi.n	1005ca88 <ll_cpe_process_rx_pdu+0x1dc>
1005ca6a:	2003      	movs	r0, #3
1005ca6c:	4370      	muls	r0, r6
1005ca6e:	4909      	ldr	r1, [pc, #36]	@ (1005ca94 <__arm_cp.58_1>)
1005ca70:	5c0d      	ldrb	r5, [r1, r0]
1005ca72:	e00a      	b.n	1005ca8a <ll_cpe_process_rx_pdu+0x1de>
1005ca74:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005ca76:	f7fd fd16 	bl	1005a4a6 <llc_conn_get_rx_acl_blocked>
1005ca7a:	2801      	cmp	r0, #1
1005ca7c:	d1cd      	bne.n	1005ca1a <ll_cpe_process_rx_pdu+0x16e>
1005ca7e:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005ca80:	2801      	cmp	r0, #1
1005ca82:	d1ca      	bne.n	1005ca1a <ll_cpe_process_rx_pdu+0x16e>
1005ca84:	2501      	movs	r5, #1
1005ca86:	e77b      	b.n	1005c980 <ll_cpe_process_rx_pdu+0xd4>
1005ca88:	2516      	movs	r5, #22
1005ca8a:	4616      	mov	r6, r2
1005ca8c:	e7a2      	b.n	1005c9d4 <ll_cpe_process_rx_pdu+0x128>
1005ca8e:	46c0      	nop			@ (mov r8, r8)

1005ca90 <__arm_cp.58_0>:
1005ca90:	00000441 	.word	0x00000441

1005ca94 <__arm_cp.58_1>:
1005ca94:	100696dc 	.word	0x100696dc

1005ca98 <ll_cpe_get_instant_active>:
1005ca98:	b580      	push	{r7, lr}
1005ca9a:	f7ff f8a9 	bl	1005bbf0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005ca9e:	7800      	ldrb	r0, [r0, #0]
1005caa0:	0640      	lsls	r0, r0, #25
1005caa2:	0fc0      	lsrs	r0, r0, #31
1005caa4:	bd80      	pop	{r7, pc}

1005caa6 <ll_cpe_clr_rx_pdu_discarded_by_one_sm>:
1005caa6:	b580      	push	{r7, lr}
1005caa8:	f7ff f88e 	bl	1005bbc8 <LL_cpe_get_ctrl_flds_common_p>
1005caac:	8801      	ldrh	r1, [r0, #0]
1005caae:	2204      	movs	r2, #4
1005cab0:	4391      	bics	r1, r2
1005cab2:	8001      	strh	r1, [r0, #0]
1005cab4:	bd80      	pop	{r7, pc}

1005cab6 <ll_cpe_check_instant_blocked>:
1005cab6:	b5b0      	push	{r4, r5, r7, lr}
1005cab8:	460c      	mov	r4, r1
1005caba:	4605      	mov	r5, r0
1005cabc:	2aff      	cmp	r2, #255	@ 0xff
1005cabe:	d003      	beq.n	1005cac8 <ll_cpe_check_instant_blocked+0x12>
1005cac0:	4610      	mov	r0, r2
1005cac2:	f000 f817 	bl	1005caf4 <LL_cpe_is_opcode_supporting_instant>
1005cac6:	e003      	b.n	1005cad0 <ll_cpe_check_instant_blocked+0x1a>
1005cac8:	4628      	mov	r0, r5
1005caca:	4621      	mov	r1, r4
1005cacc:	f000 f80a 	bl	1005cae4 <ll_cpe_get_instant_supported>
1005cad0:	2800      	cmp	r0, #0
1005cad2:	d005      	beq.n	1005cae0 <ll_cpe_check_instant_blocked+0x2a>
1005cad4:	2202      	movs	r2, #2
1005cad6:	4628      	mov	r0, r5
1005cad8:	4621      	mov	r1, r4
1005cada:	f7ff fd00 	bl	1005c4de <ll_cpe_get_blocked_status>
1005cade:	bdb0      	pop	{r4, r5, r7, pc}
1005cae0:	2000      	movs	r0, #0
1005cae2:	bdb0      	pop	{r4, r5, r7, pc}

1005cae4 <ll_cpe_get_instant_supported>:
1005cae4:	b580      	push	{r7, lr}
1005cae6:	f7ff f883 	bl	1005bbf0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005caea:	7800      	ldrb	r0, [r0, #0]
1005caec:	0680      	lsls	r0, r0, #26
1005caee:	0fc0      	lsrs	r0, r0, #31
1005caf0:	bd80      	pop	{r7, pc}
	...

1005caf4 <LL_cpe_is_opcode_supporting_instant>:
1005caf4:	b510      	push	{r4, lr}
1005caf6:	4601      	mov	r1, r0
1005caf8:	2000      	movs	r0, #0
1005cafa:	a205      	add	r2, pc, #20	@ (adr r2, 1005cb10 <LL_cpe_is_opcode_supporting_instant+0x1c>)
1005cafc:	4603      	mov	r3, r0
1005cafe:	2b04      	cmp	r3, #4
1005cb00:	d004      	beq.n	1005cb0c <LL_cpe_is_opcode_supporting_instant+0x18>
1005cb02:	5cd4      	ldrb	r4, [r2, r3]
1005cb04:	1c5b      	adds	r3, r3, #1
1005cb06:	428c      	cmp	r4, r1
1005cb08:	d1f9      	bne.n	1005cafe <LL_cpe_is_opcode_supporting_instant+0xa>
1005cb0a:	2001      	movs	r0, #1
1005cb0c:	bd10      	pop	{r4, pc}
1005cb0e:	46c0      	nop			@ (mov r8, r8)
1005cb10:	1f160001 	.word	0x1f160001

1005cb14 <LL_cpe_get_cpf>:
1005cb14:	b510      	push	{r4, lr}
1005cb16:	4601      	mov	r1, r0
1005cb18:	3914      	subs	r1, #20
1005cb1a:	2903      	cmp	r1, #3
1005cb1c:	d201      	bcs.n	1005cb22 <LL_cpe_get_cpf+0xe>
1005cb1e:	2000      	movs	r0, #0
1005cb20:	bd10      	pop	{r4, pc}
1005cb22:	0084      	lsls	r4, r0, #2
1005cb24:	f7fd f9fe 	bl	10059f24 <llc_conn_get_cntxt_p>
1005cb28:	6880      	ldr	r0, [r0, #8]
1005cb2a:	5900      	ldr	r0, [r0, r4]
1005cb2c:	bd10      	pop	{r4, pc}

1005cb2e <ll_cpe_set_expected_opcode>:
1005cb2e:	b5b0      	push	{r4, r5, r7, lr}
1005cb30:	4614      	mov	r4, r2
1005cb32:	460d      	mov	r5, r1
1005cb34:	f7fd fa00 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005cb38:	1940      	adds	r0, r0, r5
1005cb3a:	21ae      	movs	r1, #174	@ 0xae
1005cb3c:	5444      	strb	r4, [r0, r1]
1005cb3e:	bdb0      	pop	{r4, r5, r7, pc}

1005cb40 <LL_channel_map_update_param_check>:
1005cb40:	b5b0      	push	{r4, r5, r7, lr}
1005cb42:	4601      	mov	r1, r0
1005cb44:	7900      	ldrb	r0, [r0, #4]
1005cb46:	281f      	cmp	r0, #31
1005cb48:	d811      	bhi.n	1005cb6e <LL_channel_map_update_param_check+0x2e>
1005cb4a:	2000      	movs	r0, #0
1005cb4c:	4602      	mov	r2, r0
1005cb4e:	4603      	mov	r3, r0
1005cb50:	2a25      	cmp	r2, #37	@ 0x25
1005cb52:	d00f      	beq.n	1005cb74 <LL_channel_map_update_param_check+0x34>
1005cb54:	2407      	movs	r4, #7
1005cb56:	4014      	ands	r4, r2
1005cb58:	08d5      	lsrs	r5, r2, #3
1005cb5a:	5d4d      	ldrb	r5, [r1, r5]
1005cb5c:	40e5      	lsrs	r5, r4
1005cb5e:	07ec      	lsls	r4, r5, #31
1005cb60:	d003      	beq.n	1005cb6a <LL_channel_map_update_param_check+0x2a>
1005cb62:	1c5b      	adds	r3, r3, #1
1005cb64:	b2dc      	uxtb	r4, r3
1005cb66:	2c02      	cmp	r4, #2
1005cb68:	d003      	beq.n	1005cb72 <LL_channel_map_update_param_check+0x32>
1005cb6a:	1c52      	adds	r2, r2, #1
1005cb6c:	e7f0      	b.n	1005cb50 <LL_channel_map_update_param_check+0x10>
1005cb6e:	2000      	movs	r0, #0
1005cb70:	bdb0      	pop	{r4, r5, r7, pc}
1005cb72:	2001      	movs	r0, #1
1005cb74:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005cb78 <LLC_channel_map_copy_to_cpf_context_ucfg_weak>:
1005cb78:	b580      	push	{r7, lr}
1005cb7a:	4904      	ldr	r1, [pc, #16]	@ (1005cb8c <__arm_cp.1_0>)
1005cb7c:	6809      	ldr	r1, [r1, #0]
1005cb7e:	229c      	movs	r2, #156	@ 0x9c
1005cb80:	5889      	ldr	r1, [r1, r2]
1005cb82:	3148      	adds	r1, #72	@ 0x48
1005cb84:	2205      	movs	r2, #5
1005cb86:	f7f5 fd65 	bl	10052654 <BLEPLAT_MemCpy>
1005cb8a:	bd80      	pop	{r7, pc}

1005cb8c <__arm_cp.1_0>:
1005cb8c:	20002470 	.word	0x20002470

1005cb90 <LL_channel_map_update>:
1005cb90:	b5f0      	push	{r4, r5, r6, r7, lr}
1005cb92:	b085      	sub	sp, #20
1005cb94:	461e      	mov	r6, r3
1005cb96:	4617      	mov	r7, r2
1005cb98:	4605      	mov	r5, r0
1005cb9a:	9103      	str	r1, [sp, #12]
1005cb9c:	f7ff f885 	bl	1005bcaa <LL_cpe_get_cntxt>
1005cba0:	4604      	mov	r4, r0
1005cba2:	4628      	mov	r0, r5
1005cba4:	f7fd f9c8 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005cba8:	4602      	mov	r2, r0
1005cbaa:	1e78      	subs	r0, r7, #1
1005cbac:	2806      	cmp	r0, #6
1005cbae:	d86c      	bhi.n	1005cc8a <LL_channel_map_update+0xfa>
1005cbb0:	4478      	add	r0, pc
1005cbb2:	7900      	ldrb	r0, [r0, #4]
1005cbb4:	0040      	lsls	r0, r0, #1
1005cbb6:	4487      	add	pc, r0
1005cbb8:	30680303 	.word	0x30680303
1005cbbc:	005a3568 	.word	0x005a3568
1005cbc0:	202c      	movs	r0, #44	@ 0x2c
1005cbc2:	5c10      	ldrb	r0, [r2, r0]
1005cbc4:	2803      	cmp	r0, #3
1005cbc6:	d160      	bne.n	1005cc8a <LL_channel_map_update+0xfa>
1005cbc8:	9202      	str	r2, [sp, #8]
1005cbca:	1cf0      	adds	r0, r6, #3
1005cbcc:	4607      	mov	r7, r0
1005cbce:	f7ff ffb7 	bl	1005cb40 <LL_channel_map_update_param_check>
1005cbd2:	2801      	cmp	r0, #1
1005cbd4:	d151      	bne.n	1005cc7a <LL_channel_map_update+0xea>
1005cbd6:	7a30      	ldrb	r0, [r6, #8]
1005cbd8:	9001      	str	r0, [sp, #4]
1005cbda:	7a76      	ldrb	r6, [r6, #9]
1005cbdc:	2205      	movs	r2, #5
1005cbde:	4638      	mov	r0, r7
1005cbe0:	4621      	mov	r1, r4
1005cbe2:	f005 ff55 	bl	10062a90 <char_copy>
1005cbe6:	0230      	lsls	r0, r6, #8
1005cbe8:	9901      	ldr	r1, [sp, #4]
1005cbea:	1840      	adds	r0, r0, r1
1005cbec:	b282      	uxth	r2, r0
1005cbee:	9802      	ldr	r0, [sp, #8]
1005cbf0:	4621      	mov	r1, r4
1005cbf2:	f7fd feb5 	bl	1005a960 <llc_conn_set_chmap_params>
1005cbf6:	2600      	movs	r6, #0
1005cbf8:	2702      	movs	r7, #2
1005cbfa:	4628      	mov	r0, r5
1005cbfc:	4631      	mov	r1, r6
1005cbfe:	463a      	mov	r2, r7
1005cc00:	f7ff f836 	bl	1005bc70 <LL_cpe_set_blocked>
1005cc04:	2301      	movs	r3, #1
1005cc06:	4628      	mov	r0, r5
1005cc08:	4631      	mov	r1, r6
1005cc0a:	463a      	mov	r2, r7
1005cc0c:	f7fe fff7 	bl	1005bbfe <LL_cpe_set_active>
1005cc10:	4628      	mov	r0, r5
1005cc12:	9903      	ldr	r1, [sp, #12]
1005cc14:	f7ff f861 	bl	1005bcda <LL_cpe_set_rx_with_instant>
1005cc18:	e037      	b.n	1005cc8a <LL_channel_map_update+0xfa>
1005cc1a:	78b0      	ldrb	r0, [r6, #2]
1005cc1c:	2801      	cmp	r0, #1
1005cc1e:	d030      	beq.n	1005cc82 <LL_channel_map_update+0xf2>
1005cc20:	212a      	movs	r1, #42	@ 0x2a
1005cc22:	e02f      	b.n	1005cc84 <LL_channel_map_update+0xf4>
1005cc24:	4628      	mov	r0, r5
1005cc26:	9202      	str	r2, [sp, #8]
1005cc28:	f7ff fe08 	bl	1005c83c <llc_cpe_calc_instant>
1005cc2c:	af04      	add	r7, sp, #16
1005cc2e:	8038      	strh	r0, [r7, #0]
1005cc30:	4620      	mov	r0, r4
1005cc32:	4629      	mov	r1, r5
1005cc34:	f7ff ffa0 	bl	1005cb78 <LLC_channel_map_copy_to_cpf_context_ucfg_weak>
1005cc38:	2001      	movs	r0, #1
1005cc3a:	70b0      	strb	r0, [r6, #2]
1005cc3c:	2008      	movs	r0, #8
1005cc3e:	7070      	strb	r0, [r6, #1]
1005cc40:	2003      	movs	r0, #3
1005cc42:	7030      	strb	r0, [r6, #0]
1005cc44:	1cf1      	adds	r1, r6, #3
1005cc46:	2205      	movs	r2, #5
1005cc48:	4620      	mov	r0, r4
1005cc4a:	f005 ff21 	bl	10062a90 <char_copy>
1005cc4e:	3608      	adds	r6, #8
1005cc50:	2202      	movs	r2, #2
1005cc52:	4638      	mov	r0, r7
1005cc54:	4631      	mov	r1, r6
1005cc56:	f005 ff1b 	bl	10062a90 <char_copy>
1005cc5a:	883a      	ldrh	r2, [r7, #0]
1005cc5c:	9802      	ldr	r0, [sp, #8]
1005cc5e:	4621      	mov	r1, r4
1005cc60:	f7fd fe7e 	bl	1005a960 <llc_conn_set_chmap_params>
1005cc64:	4628      	mov	r0, r5
1005cc66:	9903      	ldr	r1, [sp, #12]
1005cc68:	f7ff f828 	bl	1005bcbc <LL_cpe_set_tx_with_instant>
1005cc6c:	e00d      	b.n	1005cc8a <LL_channel_map_update+0xfa>
1005cc6e:	2202      	movs	r2, #2
1005cc70:	4628      	mov	r0, r5
1005cc72:	9903      	ldr	r1, [sp, #12]
1005cc74:	f7fe ffda 	bl	1005bc2c <LL_cpe_clr_active>
1005cc78:	e007      	b.n	1005cc8a <LL_channel_map_update+0xfa>
1005cc7a:	4628      	mov	r0, r5
1005cc7c:	f7fe ff8c 	bl	1005bb98 <ll_cpe_set_unknown_rsp_pending>
1005cc80:	e003      	b.n	1005cc8a <LL_channel_map_update+0xfa>
1005cc82:	2123      	movs	r1, #35	@ 0x23
1005cc84:	4610      	mov	r0, r2
1005cc86:	f7fe f83b 	bl	1005ad00 <llc_conn_disconnect_link_from_cpf>
1005cc8a:	20ff      	movs	r0, #255	@ 0xff
1005cc8c:	b005      	add	sp, #20
1005cc8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005cc90 <LLC_channel_map_update_offline_processing_ucfg_weak>:
1005cc90:	2000      	movs	r0, #0
1005cc92:	4770      	bx	lr

1005cc94 <LLC_conn_init_chc_ctxt_ucfg_weak>:
1005cc94:	4770      	bx	lr

1005cc96 <LLC_chc_ll_cntxt_init_ucfg_weak>:
1005cc96:	4770      	bx	lr

1005cc98 <LLC_chc_reporting_offline_processing_ucfg_weak>:
1005cc98:	2000      	movs	r0, #0
1005cc9a:	4770      	bx	lr

1005cc9c <LL_cpf_cis_processing_ucfg_weak>:
1005cc9c:	4770      	bx	lr
	...

1005cca0 <LL_cpf_conn_upd>:
1005cca0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005cca2:	b091      	sub	sp, #68	@ 0x44
1005cca4:	461e      	mov	r6, r3
1005cca6:	4614      	mov	r4, r2
1005cca8:	4605      	mov	r5, r0
1005ccaa:	910c      	str	r1, [sp, #48]	@ 0x30
1005ccac:	f7fe fffd 	bl	1005bcaa <LL_cpe_get_cntxt>
1005ccb0:	4607      	mov	r7, r0
1005ccb2:	4628      	mov	r0, r5
1005ccb4:	f7fd f940 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005ccb8:	4603      	mov	r3, r0
1005ccba:	1e60      	subs	r0, r4, #1
1005ccbc:	2807      	cmp	r0, #7
1005ccbe:	d900      	bls.n	1005ccc2 <LL_cpf_conn_upd+0x22>
1005ccc0:	e0ce      	b.n	1005ce60 <LL_cpf_conn_upd+0x1c0>
1005ccc2:	46c0      	nop			@ (mov r8, r8)
1005ccc4:	4478      	add	r0, pc
1005ccc6:	7900      	ldrb	r0, [r0, #4]
1005ccc8:	0040      	lsls	r0, r0, #1
1005ccca:	4487      	add	pc, r0
1005cccc:	22c90303 	.word	0x22c90303
1005ccd0:	c47c2fc9 	.word	0xc47c2fc9
1005ccd4:	4618      	mov	r0, r3
1005ccd6:	302c      	adds	r0, #44	@ 0x2c
1005ccd8:	7800      	ldrb	r0, [r0, #0]
1005ccda:	2803      	cmp	r0, #3
1005ccdc:	d000      	beq.n	1005cce0 <LL_cpf_conn_upd+0x40>
1005ccde:	e0bf      	b.n	1005ce60 <LL_cpf_conn_upd+0x1c0>
1005cce0:	2091      	movs	r0, #145	@ 0x91
1005cce2:	0040      	lsls	r0, r0, #1
1005cce4:	930b      	str	r3, [sp, #44]	@ 0x2c
1005cce6:	1819      	adds	r1, r3, r0
1005cce8:	8973      	ldrh	r3, [r6, #10]
1005ccea:	8932      	ldrh	r2, [r6, #8]
1005ccec:	88f0      	ldrh	r0, [r6, #6]
1005ccee:	880c      	ldrh	r4, [r1, #0]
1005ccf0:	2100      	movs	r1, #0
1005ccf2:	9100      	str	r1, [sp, #0]
1005ccf4:	9101      	str	r1, [sp, #4]
1005ccf6:	9402      	str	r4, [sp, #8]
1005ccf8:	900a      	str	r0, [sp, #40]	@ 0x28
1005ccfa:	4601      	mov	r1, r0
1005ccfc:	9209      	str	r2, [sp, #36]	@ 0x24
1005ccfe:	461c      	mov	r4, r3
1005cd00:	f000 f906 	bl	1005cf10 <llc_conn_upd_params_check>
1005cd04:	2800      	cmp	r0, #0
1005cd06:	d100      	bne.n	1005cd0a <LL_cpf_conn_upd+0x6a>
1005cd08:	e0ad      	b.n	1005ce66 <LL_cpf_conn_upd+0x1c6>
1005cd0a:	4628      	mov	r0, r5
1005cd0c:	f7fe ff44 	bl	1005bb98 <ll_cpe_set_unknown_rsp_pending>
1005cd10:	e0a6      	b.n	1005ce60 <LL_cpf_conn_upd+0x1c0>
1005cd12:	78b0      	ldrb	r0, [r6, #2]
1005cd14:	2123      	movs	r1, #35	@ 0x23
1005cd16:	280f      	cmp	r0, #15
1005cd18:	460a      	mov	r2, r1
1005cd1a:	d000      	beq.n	1005cd1e <LL_cpf_conn_upd+0x7e>
1005cd1c:	222a      	movs	r2, #42	@ 0x2a
1005cd1e:	2800      	cmp	r0, #0
1005cd20:	d000      	beq.n	1005cd24 <LL_cpf_conn_upd+0x84>
1005cd22:	4611      	mov	r1, r2
1005cd24:	4618      	mov	r0, r3
1005cd26:	f7fd ffeb 	bl	1005ad00 <llc_conn_disconnect_link_from_cpf>
1005cd2a:	e099      	b.n	1005ce60 <LL_cpf_conn_upd+0x1c0>
1005cd2c:	930b      	str	r3, [sp, #44]	@ 0x2c
1005cd2e:	1cb0      	adds	r0, r6, #2
1005cd30:	9008      	str	r0, [sp, #32]
1005cd32:	f7fd f8f7 	bl	10059f24 <llc_conn_get_cntxt_p>
1005cd36:	9009      	str	r0, [sp, #36]	@ 0x24
1005cd38:	4628      	mov	r0, r5
1005cd3a:	f7ff fd7f 	bl	1005c83c <llc_cpe_calc_instant>
1005cd3e:	4604      	mov	r4, r0
1005cd40:	2028      	movs	r0, #40	@ 0x28
1005cd42:	2101      	movs	r1, #1
1005cd44:	9107      	str	r1, [sp, #28]
1005cd46:	5439      	strb	r1, [r7, r0]
1005cd48:	8b38      	ldrh	r0, [r7, #24]
1005cd4a:	8b79      	ldrh	r1, [r7, #26]
1005cd4c:	1808      	adds	r0, r1, r0
1005cd4e:	0840      	lsrs	r0, r0, #1
1005cd50:	9010      	str	r0, [sp, #64]	@ 0x40
1005cd52:	8bb8      	ldrh	r0, [r7, #28]
1005cd54:	9006      	str	r0, [sp, #24]
1005cd56:	8bf8      	ldrh	r0, [r7, #30]
1005cd58:	9005      	str	r0, [sp, #20]
1005cd5a:	a80d      	add	r0, sp, #52	@ 0x34
1005cd5c:	7105      	strb	r5, [r0, #4]
1005cd5e:	a910      	add	r1, sp, #64	@ 0x40
1005cd60:	910f      	str	r1, [sp, #60]	@ 0x3c
1005cd62:	970d      	str	r7, [sp, #52]	@ 0x34
1005cd64:	f7f2 f814 	bl	1004ed90 <LL_conn_upd_max_tx_time_coded_ucfg>
1005cd68:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005cd6a:	8338      	strh	r0, [r7, #24]
1005cd6c:	940a      	str	r4, [sp, #40]	@ 0x28
1005cd6e:	0421      	lsls	r1, r4, #16
1005cd70:	9a05      	ldr	r2, [sp, #20]
1005cd72:	1889      	adds	r1, r1, r2
1005cd74:	9104      	str	r1, [sp, #16]
1005cd76:	9c06      	ldr	r4, [sp, #24]
1005cd78:	0423      	lsls	r3, r4, #16
1005cd7a:	4303      	orrs	r3, r0
1005cd7c:	9808      	ldr	r0, [sp, #32]
1005cd7e:	4962      	ldr	r1, [pc, #392]	@ (1005cf08 <__arm_cp.0_2>)
1005cd80:	c00a      	stmia	r0!, {r1, r3}
1005cd82:	9904      	ldr	r1, [sp, #16]
1005cd84:	6001      	str	r1, [r0, #0]
1005cd86:	4861      	ldr	r0, [pc, #388]	@ (1005cf0c <__arm_cp.0_3>)
1005cd88:	8030      	strh	r0, [r6, #0]
1005cd8a:	2003      	movs	r0, #3
1005cd8c:	0240      	lsls	r0, r0, #9
1005cd8e:	0311      	lsls	r1, r2, #12
1005cd90:	60fc      	str	r4, [r7, #12]
1005cd92:	6139      	str	r1, [r7, #16]
1005cd94:	9907      	ldr	r1, [sp, #28]
1005cd96:	0249      	lsls	r1, r1, #9
1005cd98:	c703      	stmia	r7!, {r0, r1}
1005cd9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005cd9c:	6800      	ldr	r0, [r0, #0]
1005cd9e:	8b79      	ldrh	r1, [r7, #26]
1005cda0:	0209      	lsls	r1, r1, #8
1005cda2:	3f08      	subs	r7, #8
1005cda4:	4288      	cmp	r0, r1
1005cda6:	d300      	bcc.n	1005cdaa <LL_cpf_conn_upd+0x10a>
1005cda8:	4608      	mov	r0, r1
1005cdaa:	6178      	str	r0, [r7, #20]
1005cdac:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005cdae:	0240      	lsls	r0, r0, #9
1005cdb0:	60b8      	str	r0, [r7, #8]
1005cdb2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005cdb4:	4639      	mov	r1, r7
1005cdb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005cdb8:	f7fd fddb 	bl	1005a972 <llc_conn_set_conn_update_params>
1005cdbc:	4628      	mov	r0, r5
1005cdbe:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005cdc0:	f7fe ff7c 	bl	1005bcbc <LL_cpe_set_tx_with_instant>
1005cdc4:	e04c      	b.n	1005ce60 <LL_cpf_conn_upd+0x1c0>
1005cdc6:	2028      	movs	r0, #40	@ 0x28
1005cdc8:	5c38      	ldrb	r0, [r7, r0]
1005cdca:	2801      	cmp	r0, #1
1005cdcc:	d143      	bne.n	1005ce56 <LL_cpf_conn_upd+0x1b6>
1005cdce:	461c      	mov	r4, r3
1005cdd0:	a80d      	add	r0, sp, #52	@ 0x34
1005cdd2:	7105      	strb	r5, [r0, #4]
1005cdd4:	970d      	str	r7, [sp, #52]	@ 0x34
1005cdd6:	f7f1 ffe7 	bl	1004eda8 <LL_conn_upd_data_length_change_event_ucfg>
1005cdda:	4849      	ldr	r0, [pc, #292]	@ (1005cf00 <__arm_cp.0_0>)
1005cddc:	6800      	ldr	r0, [r0, #0]
1005cdde:	213d      	movs	r1, #61	@ 0x3d
1005cde0:	5c41      	ldrb	r1, [r0, r1]
1005cde2:	0689      	lsls	r1, r1, #26
1005cde4:	d532      	bpl.n	1005ce4c <LL_cpf_conn_upd+0x1ac>
1005cde6:	303d      	adds	r0, #61	@ 0x3d
1005cde8:	7a40      	ldrb	r0, [r0, #9]
1005cdea:	0740      	lsls	r0, r0, #29
1005cdec:	d52e      	bpl.n	1005ce4c <LL_cpf_conn_upd+0x1ac>
1005cdee:	8bf8      	ldrh	r0, [r7, #30]
1005cdf0:	900a      	str	r0, [sp, #40]	@ 0x28
1005cdf2:	8bb8      	ldrh	r0, [r7, #28]
1005cdf4:	9009      	str	r0, [sp, #36]	@ 0x24
1005cdf6:	8b3f      	ldrh	r7, [r7, #24]
1005cdf8:	8f64      	ldrh	r4, [r4, #58]	@ 0x3a
1005cdfa:	4842      	ldr	r0, [pc, #264]	@ (1005cf04 <__arm_cp.0_1>)
1005cdfc:	6800      	ldr	r0, [r0, #0]
1005cdfe:	6900      	ldr	r0, [r0, #16]
1005ce00:	2180      	movs	r1, #128	@ 0x80
1005ce02:	2224      	movs	r2, #36	@ 0x24
1005ce04:	2604      	movs	r6, #4
1005ce06:	4633      	mov	r3, r6
1005ce08:	f7f8 f970 	bl	100550ec <aci_event_fifo_push_header>
1005ce0c:	2800      	cmp	r0, #0
1005ce0e:	d01d      	beq.n	1005ce4c <LL_cpf_conn_upd+0x1ac>
1005ce10:	4601      	mov	r1, r0
1005ce12:	300b      	adds	r0, #11
1005ce14:	724c      	strb	r4, [r1, #9]
1005ce16:	7007      	strb	r7, [r0, #0]
1005ce18:	970b      	str	r7, [sp, #44]	@ 0x2c
1005ce1a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005ce1c:	734f      	strb	r7, [r1, #13]
1005ce1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1005ce20:	7103      	strb	r3, [r0, #4]
1005ce22:	2200      	movs	r2, #0
1005ce24:	720a      	strb	r2, [r1, #8]
1005ce26:	2203      	movs	r2, #3
1005ce28:	71ca      	strb	r2, [r1, #7]
1005ce2a:	220a      	movs	r2, #10
1005ce2c:	718a      	strb	r2, [r1, #6]
1005ce2e:	223e      	movs	r2, #62	@ 0x3e
1005ce30:	714a      	strb	r2, [r1, #5]
1005ce32:	710e      	strb	r6, [r1, #4]
1005ce34:	0a22      	lsrs	r2, r4, #8
1005ce36:	728a      	strb	r2, [r1, #10]
1005ce38:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005ce3a:	0a12      	lsrs	r2, r2, #8
1005ce3c:	7042      	strb	r2, [r0, #1]
1005ce3e:	0a3a      	lsrs	r2, r7, #8
1005ce40:	738a      	strb	r2, [r1, #14]
1005ce42:	0a1a      	lsrs	r2, r3, #8
1005ce44:	7142      	strb	r2, [r0, #5]
1005ce46:	2080      	movs	r0, #128	@ 0x80
1005ce48:	f7f8 f9ed 	bl	10055226 <aci_event_fifo_push>
1005ce4c:	2100      	movs	r1, #0
1005ce4e:	4628      	mov	r0, r5
1005ce50:	460a      	mov	r2, r1
1005ce52:	f000 fec0 	bl	1005dbd6 <LLC_update_le_ping_params>
1005ce56:	2200      	movs	r2, #0
1005ce58:	4628      	mov	r0, r5
1005ce5a:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005ce5c:	f7fe fee6 	bl	1005bc2c <LL_cpe_clr_active>
1005ce60:	20ff      	movs	r0, #255	@ 0xff
1005ce62:	b011      	add	sp, #68	@ 0x44
1005ce64:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005ce66:	78f0      	ldrb	r0, [r6, #3]
1005ce68:	2800      	cmp	r0, #0
1005ce6a:	d100      	bne.n	1005ce6e <LL_cpf_conn_upd+0x1ce>
1005ce6c:	e74d      	b.n	1005cd0a <LL_cpf_conn_upd+0x6a>
1005ce6e:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005ce70:	1e49      	subs	r1, r1, #1
1005ce72:	2908      	cmp	r1, #8
1005ce74:	d300      	bcc.n	1005ce78 <LL_cpf_conn_upd+0x1d8>
1005ce76:	2108      	movs	r1, #8
1005ce78:	4281      	cmp	r1, r0
1005ce7a:	d200      	bcs.n	1005ce7e <LL_cpf_conn_upd+0x1de>
1005ce7c:	e745      	b.n	1005cd0a <LL_cpf_conn_upd+0x6a>
1005ce7e:	88b2      	ldrh	r2, [r6, #4]
1005ce80:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005ce82:	428a      	cmp	r2, r1
1005ce84:	d900      	bls.n	1005ce88 <LL_cpf_conn_upd+0x1e8>
1005ce86:	e740      	b.n	1005cd0a <LL_cpf_conn_upd+0x6a>
1005ce88:	83fc      	strh	r4, [r7, #30]
1005ce8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005ce8c:	83b9      	strh	r1, [r7, #28]
1005ce8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1005ce90:	833b      	strh	r3, [r7, #24]
1005ce92:	837b      	strh	r3, [r7, #26]
1005ce94:	0324      	lsls	r4, r4, #12
1005ce96:	025b      	lsls	r3, r3, #9
1005ce98:	0252      	lsls	r2, r2, #9
1005ce9a:	0240      	lsls	r0, r0, #9
1005ce9c:	c70d      	stmia	r7!, {r0, r2, r3}
1005ce9e:	6039      	str	r1, [r7, #0]
1005cea0:	607c      	str	r4, [r7, #4]
1005cea2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005cea4:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
1005cea6:	2001      	movs	r0, #1
1005cea8:	3f0c      	subs	r7, #12
1005ceaa:	429a      	cmp	r2, r3
1005ceac:	d107      	bne.n	1005cebe <LL_cpf_conn_upd+0x21e>
1005ceae:	6e8a      	ldr	r2, [r1, #104]	@ 0x68
1005ceb0:	4294      	cmp	r4, r2
1005ceb2:	d104      	bne.n	1005cebe <LL_cpf_conn_upd+0x21e>
1005ceb4:	8f08      	ldrh	r0, [r1, #56]	@ 0x38
1005ceb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005ceb8:	1a08      	subs	r0, r1, r0
1005ceba:	1e41      	subs	r1, r0, #1
1005cebc:	4188      	sbcs	r0, r1
1005cebe:	2128      	movs	r1, #40	@ 0x28
1005cec0:	5478      	strb	r0, [r7, r1]
1005cec2:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005cec4:	9010      	str	r0, [sp, #64]	@ 0x40
1005cec6:	a80d      	add	r0, sp, #52	@ 0x34
1005cec8:	7105      	strb	r5, [r0, #4]
1005ceca:	a910      	add	r1, sp, #64	@ 0x40
1005cecc:	910f      	str	r1, [sp, #60]	@ 0x3c
1005cece:	970d      	str	r7, [sp, #52]	@ 0x34
1005ced0:	f7f1 ff5e 	bl	1004ed90 <LL_conn_upd_max_tx_time_coded_ucfg>
1005ced4:	2202      	movs	r2, #2
1005ced6:	4628      	mov	r0, r5
1005ced8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
1005ceda:	4621      	mov	r1, r4
1005cedc:	f7fe fec8 	bl	1005bc70 <LL_cpe_set_blocked>
1005cee0:	2200      	movs	r2, #0
1005cee2:	2301      	movs	r3, #1
1005cee4:	4628      	mov	r0, r5
1005cee6:	4621      	mov	r1, r4
1005cee8:	f7fe fe89 	bl	1005bbfe <LL_cpe_set_active>
1005ceec:	89b2      	ldrh	r2, [r6, #12]
1005ceee:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005cef0:	4639      	mov	r1, r7
1005cef2:	f7fd fd3e 	bl	1005a972 <llc_conn_set_conn_update_params>
1005cef6:	4628      	mov	r0, r5
1005cef8:	4621      	mov	r1, r4
1005cefa:	f7fe feee 	bl	1005bcda <LL_cpe_set_rx_with_instant>
1005cefe:	e7af      	b.n	1005ce60 <LL_cpf_conn_upd+0x1c0>

1005cf00 <__arm_cp.0_0>:
1005cf00:	20002470 	.word	0x20002470

1005cf04 <__arm_cp.0_1>:
1005cf04:	20002420 	.word	0x20002420

1005cf08 <__arm_cp.0_2>:
1005cf08:	00010300 	.word	0x00010300

1005cf0c <__arm_cp.0_3>:
1005cf0c:	00000c03 	.word	0x00000c03

1005cf10 <llc_conn_upd_params_check>:
1005cf10:	b570      	push	{r4, r5, r6, lr}
1005cf12:	4604      	mov	r4, r0
1005cf14:	2012      	movs	r0, #18
1005cf16:	2c06      	cmp	r4, #6
1005cf18:	d31c      	bcc.n	1005cf54 <llc_conn_upd_params_check+0x44>
1005cf1a:	2519      	movs	r5, #25
1005cf1c:	01ed      	lsls	r5, r5, #7
1005cf1e:	42ac      	cmp	r4, r5
1005cf20:	d818      	bhi.n	1005cf54 <llc_conn_upd_params_check+0x44>
1005cf22:	2906      	cmp	r1, #6
1005cf24:	d316      	bcc.n	1005cf54 <llc_conn_upd_params_check+0x44>
1005cf26:	42a9      	cmp	r1, r5
1005cf28:	d814      	bhi.n	1005cf54 <llc_conn_upd_params_check+0x44>
1005cf2a:	42a1      	cmp	r1, r4
1005cf2c:	d312      	bcc.n	1005cf54 <llc_conn_upd_params_check+0x44>
1005cf2e:	0894      	lsrs	r4, r2, #2
1005cf30:	2c7c      	cmp	r4, #124	@ 0x7c
1005cf32:	d80f      	bhi.n	1005cf54 <llc_conn_upd_params_check+0x44>
1005cf34:	9c05      	ldr	r4, [sp, #20]
1005cf36:	9e04      	ldr	r6, [sp, #16]
1005cf38:	42b4      	cmp	r4, r6
1005cf3a:	d30b      	bcc.n	1005cf54 <llc_conn_upd_params_check+0x44>
1005cf3c:	2b0a      	cmp	r3, #10
1005cf3e:	d309      	bcc.n	1005cf54 <llc_conn_upd_params_check+0x44>
1005cf40:	42ab      	cmp	r3, r5
1005cf42:	d807      	bhi.n	1005cf54 <llc_conn_upd_params_check+0x44>
1005cf44:	9806      	ldr	r0, [sp, #24]
1005cf46:	1c52      	adds	r2, r2, #1
1005cf48:	434a      	muls	r2, r1
1005cf4a:	4342      	muls	r2, r0
1005cf4c:	0890      	lsrs	r0, r2, #2
1005cf4e:	4283      	cmp	r3, r0
1005cf50:	d801      	bhi.n	1005cf56 <llc_conn_upd_params_check+0x46>
1005cf52:	2012      	movs	r0, #18
1005cf54:	bd70      	pop	{r4, r5, r6, pc}
1005cf56:	2000      	movs	r0, #0
1005cf58:	bd70      	pop	{r4, r5, r6, pc}
	...

1005cf5c <LL_conn_upd_max_tx_time_coded>:
1005cf5c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005cf5e:	4606      	mov	r6, r0
1005cf60:	6887      	ldr	r7, [r0, #8]
1005cf62:	7904      	ldrb	r4, [r0, #4]
1005cf64:	4620      	mov	r0, r4
1005cf66:	f7fc ffe7 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005cf6a:	4605      	mov	r5, r0
1005cf6c:	4620      	mov	r0, r4
1005cf6e:	f7fd f817 	bl	10059fa0 <llc_conn_get_phy_upd_cntxt_per_p>
1005cf72:	2800      	cmp	r0, #0
1005cf74:	d044      	beq.n	1005d000 <LL_conn_upd_max_tx_time_coded+0xa4>
1005cf76:	7980      	ldrb	r0, [r0, #6]
1005cf78:	2804      	cmp	r0, #4
1005cf7a:	d141      	bne.n	1005d000 <LL_conn_upd_max_tx_time_coded+0xa4>
1005cf7c:	0278      	lsls	r0, r7, #9
1005cf7e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
1005cf80:	4281      	cmp	r1, r0
1005cf82:	d03d      	beq.n	1005d000 <LL_conn_upd_max_tx_time_coded+0xa4>
1005cf84:	4628      	mov	r0, r5
1005cf86:	302c      	adds	r0, #44	@ 0x2c
1005cf88:	9502      	str	r5, [sp, #8]
1005cf8a:	35b6      	adds	r5, #182	@ 0xb6
1005cf8c:	6839      	ldr	r1, [r7, #0]
1005cf8e:	223d      	movs	r2, #61	@ 0x3d
1005cf90:	0112      	lsls	r2, r2, #4
1005cf92:	886b      	ldrh	r3, [r5, #2]
1005cf94:	019b      	lsls	r3, r3, #6
1005cf96:	189a      	adds	r2, r3, r2
1005cf98:	88eb      	ldrh	r3, [r5, #6]
1005cf9a:	429a      	cmp	r2, r3
1005cf9c:	d800      	bhi.n	1005cfa0 <LL_conn_upd_max_tx_time_coded+0x44>
1005cf9e:	4613      	mov	r3, r2
1005cfa0:	4a18      	ldr	r2, [pc, #96]	@ (1005d004 <__arm_cp.3_0>)
1005cfa2:	434a      	muls	r2, r1
1005cfa4:	4611      	mov	r1, r2
1005cfa6:	6836      	ldr	r6, [r6, #0]
1005cfa8:	7800      	ldrb	r0, [r0, #0]
1005cfaa:	2802      	cmp	r0, #2
1005cfac:	d10b      	bne.n	1005cfc6 <LL_conn_upd_max_tx_time_coded+0x6a>
1005cfae:	4816      	ldr	r0, [pc, #88]	@ (1005d008 <__arm_cp.3_1>)
1005cfb0:	1818      	adds	r0, r3, r0
1005cfb2:	4281      	cmp	r1, r0
1005cfb4:	d207      	bcs.n	1005cfc6 <LL_conn_upd_max_tx_time_coded+0x6a>
1005cfb6:	9101      	str	r1, [sp, #4]
1005cfb8:	4912      	ldr	r1, [pc, #72]	@ (1005d004 <__arm_cp.3_0>)
1005cfba:	9300      	str	r3, [sp, #0]
1005cfbc:	f7e3 f940 	bl	10040240 <__udivsi3>
1005cfc0:	9b00      	ldr	r3, [sp, #0]
1005cfc2:	9901      	ldr	r1, [sp, #4]
1005cfc4:	6038      	str	r0, [r7, #0]
1005cfc6:	8828      	ldrh	r0, [r5, #0]
1005cfc8:	84f0      	strh	r0, [r6, #38]	@ 0x26
1005cfca:	204b      	movs	r0, #75	@ 0x4b
1005cfcc:	0080      	lsls	r0, r0, #2
1005cfce:	1818      	adds	r0, r3, r0
1005cfd0:	1a09      	subs	r1, r1, r0
1005cfd2:	d200      	bcs.n	1005cfd6 <LL_conn_upd_max_tx_time_coded+0x7a>
1005cfd4:	2100      	movs	r1, #0
1005cfd6:	8968      	ldrh	r0, [r5, #10]
1005cfd8:	8a2a      	ldrh	r2, [r5, #16]
1005cfda:	4290      	cmp	r0, r2
1005cfdc:	d300      	bcc.n	1005cfe0 <LL_conn_upd_max_tx_time_coded+0x84>
1005cfde:	4610      	mov	r0, r2
1005cfe0:	4281      	cmp	r1, r0
1005cfe2:	9b02      	ldr	r3, [sp, #8]
1005cfe4:	d800      	bhi.n	1005cfe8 <LL_conn_upd_max_tx_time_coded+0x8c>
1005cfe6:	4608      	mov	r0, r1
1005cfe8:	b282      	uxth	r2, r0
1005cfea:	21a9      	movs	r1, #169	@ 0xa9
1005cfec:	0109      	lsls	r1, r1, #4
1005cfee:	428a      	cmp	r2, r1
1005cff0:	d800      	bhi.n	1005cff4 <LL_conn_upd_max_tx_time_coded+0x98>
1005cff2:	4608      	mov	r0, r1
1005cff4:	84b0      	strh	r0, [r6, #36]	@ 0x24
1005cff6:	2101      	movs	r1, #1
1005cff8:	4620      	mov	r0, r4
1005cffa:	4632      	mov	r2, r6
1005cffc:	f000 f806 	bl	1005d00c <LL_adjust_max_tx_data_frag_coded>
1005d000:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005d002:	46c0      	nop			@ (mov r8, r8)

1005d004 <__arm_cp.3_0>:
1005d004:	000004e2 	.word	0x000004e2

1005d008 <__arm_cp.3_1>:
1005d008:	00000bbc 	.word	0x00000bbc

1005d00c <LL_adjust_max_tx_data_frag_coded>:
1005d00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d00e:	461c      	mov	r4, r3
1005d010:	4615      	mov	r5, r2
1005d012:	460e      	mov	r6, r1
1005d014:	461f      	mov	r7, r3
1005d016:	37b4      	adds	r7, #180	@ 0xb4
1005d018:	f7fc ffc2 	bl	10059fa0 <llc_conn_get_phy_upd_cntxt_per_p>
1005d01c:	2800      	cmp	r0, #0
1005d01e:	d002      	beq.n	1005d026 <LL_adjust_max_tx_data_frag_coded+0x1a>
1005d020:	8800      	ldrh	r0, [r0, #0]
1005d022:	2802      	cmp	r0, #2
1005d024:	d001      	beq.n	1005d02a <LL_adjust_max_tx_data_frag_coded+0x1e>
1005d026:	2001      	movs	r0, #1
1005d028:	e000      	b.n	1005d02c <LL_adjust_max_tx_data_frag_coded+0x20>
1005d02a:	2003      	movs	r0, #3
1005d02c:	8ca9      	ldrh	r1, [r5, #36]	@ 0x24
1005d02e:	4a0b      	ldr	r2, [pc, #44]	@ (1005d05c <__arm_cp.4_0>)
1005d030:	1889      	adds	r1, r1, r2
1005d032:	40c1      	lsrs	r1, r0
1005d034:	480a      	ldr	r0, [pc, #40]	@ (1005d060 <__arm_cp.4_1>)
1005d036:	1808      	adds	r0, r1, r0
1005d038:	08c0      	lsrs	r0, r0, #3
1005d03a:	b281      	uxth	r1, r0
1005d03c:	8838      	ldrh	r0, [r7, #0]
1005d03e:	4288      	cmp	r0, r1
1005d040:	d300      	bcc.n	1005d044 <LL_adjust_max_tx_data_frag_coded+0x38>
1005d042:	4608      	mov	r0, r1
1005d044:	2e00      	cmp	r6, #0
1005d046:	d002      	beq.n	1005d04e <LL_adjust_max_tx_data_frag_coded+0x42>
1005d048:	8ce9      	ldrh	r1, [r5, #38]	@ 0x26
1005d04a:	4281      	cmp	r1, r0
1005d04c:	d300      	bcc.n	1005d050 <LL_adjust_max_tx_data_frag_coded+0x44>
1005d04e:	4601      	mov	r1, r0
1005d050:	8079      	strh	r1, [r7, #2]
1005d052:	4620      	mov	r0, r4
1005d054:	f7fd fa3a 	bl	1005a4cc <llc_conn_guard_time_for_close_conn_event>
1005d058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d05a:	46c0      	nop			@ (mov r8, r8)

1005d05c <__arm_cp.4_0>:
1005d05c:	fffffe88 	.word	0xfffffe88

1005d060 <__arm_cp.4_1>:
1005d060:	0007ffb5 	.word	0x0007ffb5

1005d064 <LL_conn_upd_data_length_change_event>:
1005d064:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005d066:	6805      	ldr	r5, [r0, #0]
1005d068:	7906      	ldrb	r6, [r0, #4]
1005d06a:	4630      	mov	r0, r6
1005d06c:	f7fc ff64 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005d070:	4607      	mov	r7, r0
1005d072:	4630      	mov	r0, r6
1005d074:	f7fc ff94 	bl	10059fa0 <llc_conn_get_phy_upd_cntxt_per_p>
1005d078:	2800      	cmp	r0, #0
1005d07a:	d047      	beq.n	1005d10c <LL_conn_upd_data_length_change_event+0xa8>
1005d07c:	7980      	ldrb	r0, [r0, #6]
1005d07e:	2804      	cmp	r0, #4
1005d080:	d144      	bne.n	1005d10c <LL_conn_upd_data_length_change_event+0xa8>
1005d082:	463c      	mov	r4, r7
1005d084:	34b4      	adds	r4, #180	@ 0xb4
1005d086:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
1005d088:	88e1      	ldrh	r1, [r4, #6]
1005d08a:	4281      	cmp	r1, r0
1005d08c:	d03e      	beq.n	1005d10c <LL_conn_upd_data_length_change_event+0xa8>
1005d08e:	80e0      	strh	r0, [r4, #6]
1005d090:	2100      	movs	r1, #0
1005d092:	4630      	mov	r0, r6
1005d094:	462a      	mov	r2, r5
1005d096:	463b      	mov	r3, r7
1005d098:	f7ff ffb8 	bl	1005d00c <LL_adjust_max_tx_data_frag_coded>
1005d09c:	481c      	ldr	r0, [pc, #112]	@ (1005d110 <__arm_cp.6_0>)
1005d09e:	6800      	ldr	r0, [r0, #0]
1005d0a0:	213d      	movs	r1, #61	@ 0x3d
1005d0a2:	5c41      	ldrb	r1, [r0, r1]
1005d0a4:	0689      	lsls	r1, r1, #26
1005d0a6:	d531      	bpl.n	1005d10c <LL_conn_upd_data_length_change_event+0xa8>
1005d0a8:	303d      	adds	r0, #61	@ 0x3d
1005d0aa:	7a40      	ldrb	r0, [r0, #9]
1005d0ac:	0640      	lsls	r0, r0, #25
1005d0ae:	d52d      	bpl.n	1005d10c <LL_conn_upd_data_length_change_event+0xa8>
1005d0b0:	8926      	ldrh	r6, [r4, #8]
1005d0b2:	88a5      	ldrh	r5, [r4, #4]
1005d0b4:	88e0      	ldrh	r0, [r4, #6]
1005d0b6:	9001      	str	r0, [sp, #4]
1005d0b8:	8820      	ldrh	r0, [r4, #0]
1005d0ba:	9002      	str	r0, [sp, #8]
1005d0bc:	8f7f      	ldrh	r7, [r7, #58]	@ 0x3a
1005d0be:	4815      	ldr	r0, [pc, #84]	@ (1005d114 <__arm_cp.6_1>)
1005d0c0:	6800      	ldr	r0, [r0, #0]
1005d0c2:	6900      	ldr	r0, [r0, #16]
1005d0c4:	2180      	movs	r1, #128	@ 0x80
1005d0c6:	2226      	movs	r2, #38	@ 0x26
1005d0c8:	2404      	movs	r4, #4
1005d0ca:	4623      	mov	r3, r4
1005d0cc:	f7f8 f80e 	bl	100550ec <aci_event_fifo_push_header>
1005d0d0:	2800      	cmp	r0, #0
1005d0d2:	d01b      	beq.n	1005d10c <LL_conn_upd_data_length_change_event+0xa8>
1005d0d4:	4601      	mov	r1, r0
1005d0d6:	7406      	strb	r6, [r0, #16]
1005d0d8:	7385      	strb	r5, [r0, #14]
1005d0da:	9b01      	ldr	r3, [sp, #4]
1005d0dc:	7303      	strb	r3, [r0, #12]
1005d0de:	9a02      	ldr	r2, [sp, #8]
1005d0e0:	7282      	strb	r2, [r0, #10]
1005d0e2:	7207      	strb	r7, [r0, #8]
1005d0e4:	2007      	movs	r0, #7
1005d0e6:	71c8      	strb	r0, [r1, #7]
1005d0e8:	200b      	movs	r0, #11
1005d0ea:	7188      	strb	r0, [r1, #6]
1005d0ec:	203e      	movs	r0, #62	@ 0x3e
1005d0ee:	7148      	strb	r0, [r1, #5]
1005d0f0:	710c      	strb	r4, [r1, #4]
1005d0f2:	0a30      	lsrs	r0, r6, #8
1005d0f4:	7448      	strb	r0, [r1, #17]
1005d0f6:	0a28      	lsrs	r0, r5, #8
1005d0f8:	73c8      	strb	r0, [r1, #15]
1005d0fa:	0a18      	lsrs	r0, r3, #8
1005d0fc:	7348      	strb	r0, [r1, #13]
1005d0fe:	0a10      	lsrs	r0, r2, #8
1005d100:	72c8      	strb	r0, [r1, #11]
1005d102:	0a38      	lsrs	r0, r7, #8
1005d104:	7248      	strb	r0, [r1, #9]
1005d106:	2080      	movs	r0, #128	@ 0x80
1005d108:	f7f8 f88d 	bl	10055226 <aci_event_fifo_push>
1005d10c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005d10e:	46c0      	nop			@ (mov r8, r8)

1005d110 <__arm_cp.6_0>:
1005d110:	20002470 	.word	0x20002470

1005d114 <__arm_cp.6_1>:
1005d114:	20002420 	.word	0x20002420

1005d118 <llc_conn_init_cte_ctxt_ucfg_weak>:
1005d118:	4770      	bx	lr

1005d11a <LLC_cte_request_procedure_ucfg_weak>:
1005d11a:	2000      	movs	r0, #0
1005d11c:	4770      	bx	lr

1005d11e <LLC_connection_cte_response_pause_resume_ucfg_weak>:
1005d11e:	4770      	bx	lr

1005d120 <LLC_connection_cte_response_disable_ucfg_weak>:
1005d120:	4770      	bx	lr

1005d122 <llc_cte_process_rx_cte_ucfg_weak>:
1005d122:	4770      	bx	lr

1005d124 <LL_encryption>:
1005d124:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d126:	b08d      	sub	sp, #52	@ 0x34
1005d128:	9309      	str	r3, [sp, #36]	@ 0x24
1005d12a:	4617      	mov	r7, r2
1005d12c:	460d      	mov	r5, r1
1005d12e:	4606      	mov	r6, r0
1005d130:	f7fe fdbb 	bl	1005bcaa <LL_cpe_get_cntxt>
1005d134:	4604      	mov	r4, r0
1005d136:	9608      	str	r6, [sp, #32]
1005d138:	4630      	mov	r0, r6
1005d13a:	f7fc fefd 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005d13e:	4603      	mov	r3, r0
1005d140:	2f05      	cmp	r7, #5
1005d142:	d107      	bne.n	1005d154 <LL_encryption+0x30>
1005d144:	213d      	movs	r1, #61	@ 0x3d
1005d146:	4618      	mov	r0, r3
1005d148:	f7fd fdda 	bl	1005ad00 <llc_conn_disconnect_link_from_cpf>
1005d14c:	27ff      	movs	r7, #255	@ 0xff
1005d14e:	4638      	mov	r0, r7
1005d150:	b00d      	add	sp, #52	@ 0x34
1005d152:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005d154:	9407      	str	r4, [sp, #28]
1005d156:	4622      	mov	r2, r4
1005d158:	3228      	adds	r2, #40	@ 0x28
1005d15a:	461e      	mov	r6, r3
1005d15c:	362c      	adds	r6, #44	@ 0x2c
1005d15e:	7830      	ldrb	r0, [r6, #0]
1005d160:	2802      	cmp	r0, #2
1005d162:	d129      	bne.n	1005d1b8 <LL_encryption+0x94>
1005d164:	7810      	ldrb	r0, [r2, #0]
1005d166:	1e40      	subs	r0, r0, #1
1005d168:	27ff      	movs	r7, #255	@ 0xff
1005d16a:	280b      	cmp	r0, #11
1005d16c:	d8ef      	bhi.n	1005d14e <LL_encryption+0x2a>
1005d16e:	0040      	lsls	r0, r0, #1
1005d170:	4478      	add	r0, pc
1005d172:	8880      	ldrh	r0, [r0, #4]
1005d174:	0040      	lsls	r0, r0, #1
1005d176:	4487      	add	pc, r0
1005d178:	00a4000b 	.word	0x00a4000b
1005d17c:	00c200a7 	.word	0x00c200a7
1005d180:	00d000cc 	.word	0x00d000cc
1005d184:	01370133 	.word	0x01370133
1005d188:	016f015f 	.word	0x016f015f
1005d18c:	0181017e 	.word	0x0181017e
1005d190:	200a      	movs	r0, #10
1005d192:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d194:	7088      	strb	r0, [r1, #2]
1005d196:	27ff      	movs	r7, #255	@ 0xff
1005d198:	4638      	mov	r0, r7
1005d19a:	3004      	adds	r0, #4
1005d19c:	8008      	strh	r0, [r1, #0]
1005d19e:	2101      	movs	r1, #1
1005d1a0:	9808      	ldr	r0, [sp, #32]
1005d1a2:	4615      	mov	r5, r2
1005d1a4:	460a      	mov	r2, r1
1005d1a6:	461c      	mov	r4, r3
1005d1a8:	f7fe fd62 	bl	1005bc70 <LL_cpe_set_blocked>
1005d1ac:	4620      	mov	r0, r4
1005d1ae:	f7fd fc13 	bl	1005a9d8 <llc_conn_set_tx_acl_blocked>
1005d1b2:	2002      	movs	r0, #2
1005d1b4:	7028      	strb	r0, [r5, #0]
1005d1b6:	e7ca      	b.n	1005d14e <LL_encryption+0x2a>
1005d1b8:	2f01      	cmp	r7, #1
1005d1ba:	d12e      	bne.n	1005d21a <LL_encryption+0xf6>
1005d1bc:	2000      	movs	r0, #0
1005d1be:	7050      	strb	r0, [r2, #1]
1005d1c0:	9206      	str	r2, [sp, #24]
1005d1c2:	2500      	movs	r5, #0
1005d1c4:	461e      	mov	r6, r3
1005d1c6:	4618      	mov	r0, r3
1005d1c8:	4629      	mov	r1, r5
1005d1ca:	f7fd f951 	bl	1005a470 <llc_conn_get_enc_on>
1005d1ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d1d0:	7889      	ldrb	r1, [r1, #2]
1005d1d2:	2903      	cmp	r1, #3
1005d1d4:	d157      	bne.n	1005d286 <LL_encryption+0x162>
1005d1d6:	2800      	cmp	r0, #0
1005d1d8:	4633      	mov	r3, r6
1005d1da:	9f07      	ldr	r7, [sp, #28]
1005d1dc:	d1b2      	bne.n	1005d144 <LL_encryption+0x20>
1005d1de:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005d1e0:	1ce0      	adds	r0, r4, #3
1005d1e2:	4639      	mov	r1, r7
1005d1e4:	3130      	adds	r1, #48	@ 0x30
1005d1e6:	2208      	movs	r2, #8
1005d1e8:	9205      	str	r2, [sp, #20]
1005d1ea:	4b19      	ldr	r3, [pc, #100]	@ (1005d250 <LL_encryption+0x12c>)
1005d1ec:	4798      	blx	r3
1005d1ee:	4620      	mov	r0, r4
1005d1f0:	300b      	adds	r0, #11
1005d1f2:	4639      	mov	r1, r7
1005d1f4:	312e      	adds	r1, #46	@ 0x2e
1005d1f6:	2202      	movs	r2, #2
1005d1f8:	4b15      	ldr	r3, [pc, #84]	@ (1005d250 <LL_encryption+0x12c>)
1005d1fa:	4798      	blx	r3
1005d1fc:	4620      	mov	r0, r4
1005d1fe:	300d      	adds	r0, #13
1005d200:	4639      	mov	r1, r7
1005d202:	9a05      	ldr	r2, [sp, #20]
1005d204:	4b12      	ldr	r3, [pc, #72]	@ (1005d250 <LL_encryption+0x12c>)
1005d206:	4798      	blx	r3
1005d208:	3415      	adds	r4, #21
1005d20a:	3720      	adds	r7, #32
1005d20c:	2204      	movs	r2, #4
1005d20e:	4620      	mov	r0, r4
1005d210:	4639      	mov	r1, r7
1005d212:	4b0f      	ldr	r3, [pc, #60]	@ (1005d250 <LL_encryption+0x12c>)
1005d214:	4798      	blx	r3
1005d216:	2005      	movs	r0, #5
1005d218:	e03b      	b.n	1005d292 <LL_encryption+0x16e>
1005d21a:	7850      	ldrb	r0, [r2, #1]
1005d21c:	27ff      	movs	r7, #255	@ 0xff
1005d21e:	280d      	cmp	r0, #13
1005d220:	d895      	bhi.n	1005d14e <LL_encryption+0x2a>
1005d222:	9705      	str	r7, [sp, #20]
1005d224:	2111      	movs	r1, #17
1005d226:	0109      	lsls	r1, r1, #4
1005d228:	185f      	adds	r7, r3, r1
1005d22a:	0040      	lsls	r0, r0, #1
1005d22c:	4478      	add	r0, pc
1005d22e:	8880      	ldrh	r0, [r0, #4]
1005d230:	0040      	lsls	r0, r0, #1
1005d232:	4487      	add	pc, r0
1005d234:	0010000f 	.word	0x0010000f
1005d238:	016d0165 	.word	0x016d0165
1005d23c:	019b0176 	.word	0x019b0176
1005d240:	022001d6 	.word	0x022001d6
1005d244:	024001e9 	.word	0x024001e9
1005d248:	01fe01ed 	.word	0x01fe01ed
1005d24c:	02340214 	.word	0x02340214
1005d250:	10062a91 	.word	0x10062a91
1005d254:	e7b4      	b.n	1005d1c0 <LL_encryption+0x9c>
1005d256:	200b      	movs	r0, #11
1005d258:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d25a:	7088      	strb	r0, [r1, #2]
1005d25c:	2002      	movs	r0, #2
1005d25e:	7050      	strb	r0, [r2, #1]
1005d260:	27ff      	movs	r7, #255	@ 0xff
1005d262:	4638      	mov	r0, r7
1005d264:	3004      	adds	r0, #4
1005d266:	8008      	strh	r0, [r1, #0]
1005d268:	2400      	movs	r4, #0
1005d26a:	2201      	movs	r2, #1
1005d26c:	9808      	ldr	r0, [sp, #32]
1005d26e:	4621      	mov	r1, r4
1005d270:	461d      	mov	r5, r3
1005d272:	f7fe fcfd 	bl	1005bc70 <LL_cpe_set_blocked>
1005d276:	4628      	mov	r0, r5
1005d278:	f7fd fbae 	bl	1005a9d8 <llc_conn_set_tx_acl_blocked>
1005d27c:	4628      	mov	r0, r5
1005d27e:	4621      	mov	r1, r4
1005d280:	f7fd fb99 	bl	1005a9b6 <llc_conn_set_stop_enc>
1005d284:	e763      	b.n	1005d14e <LL_encryption+0x2a>
1005d286:	2801      	cmp	r0, #1
1005d288:	4633      	mov	r3, r6
1005d28a:	d000      	beq.n	1005d28e <LL_encryption+0x16a>
1005d28c:	e75a      	b.n	1005d144 <LL_encryption+0x20>
1005d28e:	2501      	movs	r5, #1
1005d290:	4628      	mov	r0, r5
1005d292:	9f06      	ldr	r7, [sp, #24]
1005d294:	7078      	strb	r0, [r7, #1]
1005d296:	713d      	strb	r5, [r7, #4]
1005d298:	2400      	movs	r4, #0
1005d29a:	9d08      	ldr	r5, [sp, #32]
1005d29c:	4628      	mov	r0, r5
1005d29e:	4621      	mov	r1, r4
1005d2a0:	4622      	mov	r2, r4
1005d2a2:	f7fe fce5 	bl	1005bc70 <LL_cpe_set_blocked>
1005d2a6:	4630      	mov	r0, r6
1005d2a8:	f7fd fb6c 	bl	1005a984 <llc_conn_set_rx_acl_blocked>
1005d2ac:	4628      	mov	r0, r5
1005d2ae:	4621      	mov	r1, r4
1005d2b0:	f7fe fcee 	bl	1005bc90 <LL_cpe_set_prepare_tx_pdu>
1005d2b4:	2201      	movs	r2, #1
1005d2b6:	4628      	mov	r0, r5
1005d2b8:	4621      	mov	r1, r4
1005d2ba:	4623      	mov	r3, r4
1005d2bc:	f7fe fc9f 	bl	1005bbfe <LL_cpe_set_active>
1005d2c0:	e744      	b.n	1005d14c <LL_encryption+0x28>
1005d2c2:	2003      	movs	r0, #3
1005d2c4:	7010      	strb	r0, [r2, #0]
1005d2c6:	e121      	b.n	1005d50c <LL_encryption+0x3e8>
1005d2c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d2ca:	7880      	ldrb	r0, [r0, #2]
1005d2cc:	280b      	cmp	r0, #11
1005d2ce:	d000      	beq.n	1005d2d2 <LL_encryption+0x1ae>
1005d2d0:	e738      	b.n	1005d144 <LL_encryption+0x20>
1005d2d2:	2004      	movs	r0, #4
1005d2d4:	7010      	strb	r0, [r2, #0]
1005d2d6:	2102      	movs	r1, #2
1005d2d8:	4618      	mov	r0, r3
1005d2da:	461d      	mov	r5, r3
1005d2dc:	f7fd fb6b 	bl	1005a9b6 <llc_conn_set_stop_enc>
1005d2e0:	2401      	movs	r4, #1
1005d2e2:	9e08      	ldr	r6, [sp, #32]
1005d2e4:	4630      	mov	r0, r6
1005d2e6:	4621      	mov	r1, r4
1005d2e8:	f7fe fcd2 	bl	1005bc90 <LL_cpe_set_prepare_tx_pdu>
1005d2ec:	2200      	movs	r2, #0
1005d2ee:	4630      	mov	r0, r6
1005d2f0:	4621      	mov	r1, r4
1005d2f2:	f7fe fcbd 	bl	1005bc70 <LL_cpe_set_blocked>
1005d2f6:	4628      	mov	r0, r5
1005d2f8:	f7fd fb44 	bl	1005a984 <llc_conn_set_rx_acl_blocked>
1005d2fc:	e727      	b.n	1005d14e <LL_encryption+0x2a>
1005d2fe:	200b      	movs	r0, #11
1005d300:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d302:	7088      	strb	r0, [r1, #2]
1005d304:	2005      	movs	r0, #5
1005d306:	7010      	strb	r0, [r2, #0]
1005d308:	27ff      	movs	r7, #255	@ 0xff
1005d30a:	4638      	mov	r0, r7
1005d30c:	3004      	adds	r0, #4
1005d30e:	8008      	strh	r0, [r1, #0]
1005d310:	e71d      	b.n	1005d14e <LL_encryption+0x2a>
1005d312:	2006      	movs	r0, #6
1005d314:	7010      	strb	r0, [r2, #0]
1005d316:	2101      	movs	r1, #1
1005d318:	e1d6      	b.n	1005d6c8 <LL_encryption+0x5a4>
1005d31a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005d31c:	1ca0      	adds	r0, r4, #2
1005d31e:	9001      	str	r0, [sp, #4]
1005d320:	9705      	str	r7, [sp, #20]
1005d322:	2700      	movs	r7, #0
1005d324:	4dfd      	ldr	r5, [pc, #1012]	@ (1005d71c <LL_encryption+0x5f8>)
1005d326:	4638      	mov	r0, r7
1005d328:	9304      	str	r3, [sp, #16]
1005d32a:	4616      	mov	r6, r2
1005d32c:	47a8      	blx	r5
1005d32e:	9002      	str	r0, [sp, #8]
1005d330:	900b      	str	r0, [sp, #44]	@ 0x2c
1005d332:	4638      	mov	r0, r7
1005d334:	47a8      	blx	r5
1005d336:	900c      	str	r0, [sp, #48]	@ 0x30
1005d338:	4638      	mov	r0, r7
1005d33a:	9f05      	ldr	r7, [sp, #20]
1005d33c:	47a8      	blx	r5
1005d33e:	9003      	str	r0, [sp, #12]
1005d340:	49fc      	ldr	r1, [pc, #1008]	@ (1005d734 <__arm_cp.0_10>)
1005d342:	8021      	strh	r1, [r4, #0]
1005d344:	900a      	str	r0, [sp, #40]	@ 0x28
1005d346:	4635      	mov	r5, r6
1005d348:	7a30      	ldrb	r0, [r6, #8]
1005d34a:	0200      	lsls	r0, r0, #8
1005d34c:	7a71      	ldrb	r1, [r6, #9]
1005d34e:	0409      	lsls	r1, r1, #16
1005d350:	1840      	adds	r0, r0, r1
1005d352:	7ab1      	ldrb	r1, [r6, #10]
1005d354:	9606      	str	r6, [sp, #24]
1005d356:	0609      	lsls	r1, r1, #24
1005d358:	1840      	adds	r0, r0, r1
1005d35a:	1cc0      	adds	r0, r0, #3
1005d35c:	9c01      	ldr	r4, [sp, #4]
1005d35e:	6020      	str	r0, [r4, #0]
1005d360:	9e07      	ldr	r6, [sp, #28]
1005d362:	4630      	mov	r0, r6
1005d364:	3033      	adds	r0, #51	@ 0x33
1005d366:	f000 fa25 	bl	1005d7b4 <le4ByteToInt32>
1005d36a:	6060      	str	r0, [r4, #4]
1005d36c:	9802      	ldr	r0, [sp, #8]
1005d36e:	0600      	lsls	r0, r0, #24
1005d370:	8df1      	ldrh	r1, [r6, #46]	@ 0x2e
1005d372:	0209      	lsls	r1, r1, #8
1005d374:	1808      	adds	r0, r1, r0
1005d376:	7be9      	ldrb	r1, [r5, #15]
1005d378:	1840      	adds	r0, r0, r1
1005d37a:	60a0      	str	r0, [r4, #8]
1005d37c:	4625      	mov	r5, r4
1005d37e:	ac0b      	add	r4, sp, #44	@ 0x2c
1005d380:	1c60      	adds	r0, r4, #1
1005d382:	f000 fa17 	bl	1005d7b4 <le4ByteToInt32>
1005d386:	60e8      	str	r0, [r5, #12]
1005d388:	9803      	ldr	r0, [sp, #12]
1005d38a:	0600      	lsls	r0, r0, #24
1005d38c:	7961      	ldrb	r1, [r4, #5]
1005d38e:	1840      	adds	r0, r0, r1
1005d390:	79a1      	ldrb	r1, [r4, #6]
1005d392:	0209      	lsls	r1, r1, #8
1005d394:	1840      	adds	r0, r0, r1
1005d396:	79e1      	ldrb	r1, [r4, #7]
1005d398:	0409      	lsls	r1, r1, #16
1005d39a:	1840      	adds	r0, r0, r1
1005d39c:	6128      	str	r0, [r5, #16]
1005d39e:	462a      	mov	r2, r5
1005d3a0:	ad0a      	add	r5, sp, #40	@ 0x28
1005d3a2:	7868      	ldrb	r0, [r5, #1]
1005d3a4:	78a9      	ldrb	r1, [r5, #2]
1005d3a6:	0209      	lsls	r1, r1, #8
1005d3a8:	1808      	adds	r0, r1, r0
1005d3aa:	78e9      	ldrb	r1, [r5, #3]
1005d3ac:	0409      	lsls	r1, r1, #16
1005d3ae:	1840      	adds	r0, r0, r1
1005d3b0:	6150      	str	r0, [r2, #20]
1005d3b2:	2208      	movs	r2, #8
1005d3b4:	4620      	mov	r0, r4
1005d3b6:	4631      	mov	r1, r6
1005d3b8:	f005 fb6a 	bl	10062a90 <char_copy>
1005d3bc:	3620      	adds	r6, #32
1005d3be:	2204      	movs	r2, #4
1005d3c0:	4628      	mov	r0, r5
1005d3c2:	4631      	mov	r1, r6
1005d3c4:	f005 fb64 	bl	10062a90 <char_copy>
1005d3c8:	2007      	movs	r0, #7
1005d3ca:	9906      	ldr	r1, [sp, #24]
1005d3cc:	7008      	strb	r0, [r1, #0]
1005d3ce:	2101      	movs	r1, #1
1005d3d0:	9808      	ldr	r0, [sp, #32]
1005d3d2:	460a      	mov	r2, r1
1005d3d4:	f7fe fc4c 	bl	1005bc70 <LL_cpe_set_blocked>
1005d3d8:	9804      	ldr	r0, [sp, #16]
1005d3da:	f7fd fafd 	bl	1005a9d8 <llc_conn_set_tx_acl_blocked>
1005d3de:	e6b6      	b.n	1005d14e <LL_encryption+0x2a>
1005d3e0:	2008      	movs	r0, #8
1005d3e2:	7010      	strb	r0, [r2, #0]
1005d3e4:	2704      	movs	r7, #4
1005d3e6:	e6b2      	b.n	1005d14e <LL_encryption+0x2a>
1005d3e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d3ea:	7880      	ldrb	r0, [r0, #2]
1005d3ec:	2811      	cmp	r0, #17
1005d3ee:	d061      	beq.n	1005d4b4 <LL_encryption+0x390>
1005d3f0:	2807      	cmp	r0, #7
1005d3f2:	d05f      	beq.n	1005d4b4 <LL_encryption+0x390>
1005d3f4:	280d      	cmp	r0, #13
1005d3f6:	d05d      	beq.n	1005d4b4 <LL_encryption+0x390>
1005d3f8:	2804      	cmp	r0, #4
1005d3fa:	9c07      	ldr	r4, [sp, #28]
1005d3fc:	d000      	beq.n	1005d400 <LL_encryption+0x2dc>
1005d3fe:	e6a1      	b.n	1005d144 <LL_encryption+0x20>
1005d400:	2009      	movs	r0, #9
1005d402:	7010      	strb	r0, [r2, #0]
1005d404:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005d406:	1cf8      	adds	r0, r7, #3
1005d408:	4621      	mov	r1, r4
1005d40a:	3108      	adds	r1, #8
1005d40c:	2208      	movs	r2, #8
1005d40e:	461d      	mov	r5, r3
1005d410:	f005 fb3e 	bl	10062a90 <char_copy>
1005d414:	370b      	adds	r7, #11
1005d416:	4621      	mov	r1, r4
1005d418:	3124      	adds	r1, #36	@ 0x24
1005d41a:	2204      	movs	r2, #4
1005d41c:	4638      	mov	r0, r7
1005d41e:	f005 fb37 	bl	10062a90 <char_copy>
1005d422:	6734      	str	r4, [r6, #112]	@ 0x70
1005d424:	2101      	movs	r1, #1
1005d426:	2200      	movs	r2, #0
1005d428:	9808      	ldr	r0, [sp, #32]
1005d42a:	f7fe fc21 	bl	1005bc70 <LL_cpe_set_blocked>
1005d42e:	4628      	mov	r0, r5
1005d430:	f7fd faa8 	bl	1005a984 <llc_conn_set_rx_acl_blocked>
1005d434:	2705      	movs	r7, #5
1005d436:	e68a      	b.n	1005d14e <LL_encryption+0x2a>
1005d438:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d43a:	7880      	ldrb	r0, [r0, #2]
1005d43c:	2811      	cmp	r0, #17
1005d43e:	d046      	beq.n	1005d4ce <LL_encryption+0x3aa>
1005d440:	280d      	cmp	r0, #13
1005d442:	d044      	beq.n	1005d4ce <LL_encryption+0x3aa>
1005d444:	2805      	cmp	r0, #5
1005d446:	d000      	beq.n	1005d44a <LL_encryption+0x326>
1005d448:	e67c      	b.n	1005d144 <LL_encryption+0x20>
1005d44a:	4614      	mov	r4, r2
1005d44c:	2101      	movs	r1, #1
1005d44e:	9808      	ldr	r0, [sp, #32]
1005d450:	f7fe fc1e 	bl	1005bc90 <LL_cpe_set_prepare_tx_pdu>
1005d454:	200a      	movs	r0, #10
1005d456:	e00c      	b.n	1005d472 <LL_encryption+0x34e>
1005d458:	2006      	movs	r0, #6
1005d45a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d45c:	7088      	strb	r0, [r1, #2]
1005d45e:	27ff      	movs	r7, #255	@ 0xff
1005d460:	4638      	mov	r0, r7
1005d462:	3004      	adds	r0, #4
1005d464:	8008      	strh	r0, [r1, #0]
1005d466:	2102      	movs	r1, #2
1005d468:	4618      	mov	r0, r3
1005d46a:	4614      	mov	r4, r2
1005d46c:	f7fd fa92 	bl	1005a994 <llc_conn_set_start_enc>
1005d470:	200b      	movs	r0, #11
1005d472:	7020      	strb	r0, [r4, #0]
1005d474:	e66b      	b.n	1005d14e <LL_encryption+0x2a>
1005d476:	200c      	movs	r0, #12
1005d478:	7010      	strb	r0, [r2, #0]
1005d47a:	e0c7      	b.n	1005d60c <LL_encryption+0x4e8>
1005d47c:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d47e:	7880      	ldrb	r0, [r0, #2]
1005d480:	2806      	cmp	r0, #6
1005d482:	d000      	beq.n	1005d486 <LL_encryption+0x362>
1005d484:	e65e      	b.n	1005d144 <LL_encryption+0x20>
1005d486:	2000      	movs	r0, #0
1005d488:	4615      	mov	r5, r2
1005d48a:	7010      	strb	r0, [r2, #0]
1005d48c:	48c4      	ldr	r0, [pc, #784]	@ (1005d7a0 <__arm_cp.0_0>)
1005d48e:	6800      	ldr	r0, [r0, #0]
1005d490:	212c      	movs	r1, #44	@ 0x2c
1005d492:	5c40      	ldrb	r0, [r0, r1]
1005d494:	07c0      	lsls	r0, r0, #31
1005d496:	0ec1      	lsrs	r1, r0, #27
1005d498:	206f      	movs	r0, #111	@ 0x6f
1005d49a:	43c0      	mvns	r0, r0
1005d49c:	4048      	eors	r0, r1
1005d49e:	461c      	mov	r4, r3
1005d4a0:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005d4a2:	7929      	ldrb	r1, [r5, #4]
1005d4a4:	b2c0      	uxtb	r0, r0
1005d4a6:	2901      	cmp	r1, #1
1005d4a8:	d000      	beq.n	1005d4ac <LL_encryption+0x388>
1005d4aa:	e111      	b.n	1005d6d0 <LL_encryption+0x5ac>
1005d4ac:	4611      	mov	r1, r2
1005d4ae:	f000 f9bf 	bl	1005d830 <hci_encryption_key_refresh_complete_event_push>
1005d4b2:	e111      	b.n	1005d6d8 <LL_encryption+0x5b4>
1005d4b4:	48ba      	ldr	r0, [pc, #744]	@ (1005d7a0 <__arm_cp.0_0>)
1005d4b6:	6800      	ldr	r0, [r0, #0]
1005d4b8:	212c      	movs	r1, #44	@ 0x2c
1005d4ba:	5c40      	ldrb	r0, [r0, r1]
1005d4bc:	0100      	lsls	r0, r0, #4
1005d4be:	43c0      	mvns	r0, r0
1005d4c0:	2180      	movs	r1, #128	@ 0x80
1005d4c2:	4301      	orrs	r1, r0
1005d4c4:	2090      	movs	r0, #144	@ 0x90
1005d4c6:	4008      	ands	r0, r1
1005d4c8:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005d4ca:	211a      	movs	r1, #26
1005d4cc:	e00b      	b.n	1005d4e6 <LL_encryption+0x3c2>
1005d4ce:	48b4      	ldr	r0, [pc, #720]	@ (1005d7a0 <__arm_cp.0_0>)
1005d4d0:	6800      	ldr	r0, [r0, #0]
1005d4d2:	212c      	movs	r1, #44	@ 0x2c
1005d4d4:	5c40      	ldrb	r0, [r0, r1]
1005d4d6:	0100      	lsls	r0, r0, #4
1005d4d8:	43c0      	mvns	r0, r0
1005d4da:	2180      	movs	r1, #128	@ 0x80
1005d4dc:	4301      	orrs	r1, r0
1005d4de:	2090      	movs	r0, #144	@ 0x90
1005d4e0:	4008      	ands	r0, r1
1005d4e2:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005d4e4:	2106      	movs	r1, #6
1005d4e6:	461c      	mov	r4, r3
1005d4e8:	2300      	movs	r3, #0
1005d4ea:	f000 f96f 	bl	1005d7cc <hci_encryption_change_event_push>
1005d4ee:	4620      	mov	r0, r4
1005d4f0:	f7fc ff05 	bl	1005a2fe <llc_conn_clr_tx_acl_blocked>
1005d4f4:	4620      	mov	r0, r4
1005d4f6:	f7fc fef1 	bl	1005a2dc <llc_conn_clr_rx_acl_blocked>
1005d4fa:	2101      	movs	r1, #1
1005d4fc:	9808      	ldr	r0, [sp, #32]
1005d4fe:	e0f4      	b.n	1005d6ea <LL_encryption+0x5c6>
1005d500:	2003      	movs	r0, #3
1005d502:	7050      	strb	r0, [r2, #1]
1005d504:	2101      	movs	r1, #1
1005d506:	4618      	mov	r0, r3
1005d508:	f7fd fa55 	bl	1005a9b6 <llc_conn_set_stop_enc>
1005d50c:	270b      	movs	r7, #11
1005d50e:	e61e      	b.n	1005d14e <LL_encryption+0x2a>
1005d510:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d512:	7880      	ldrb	r0, [r0, #2]
1005d514:	280b      	cmp	r0, #11
1005d516:	d000      	beq.n	1005d51a <LL_encryption+0x3f6>
1005d518:	e614      	b.n	1005d144 <LL_encryption+0x20>
1005d51a:	2004      	movs	r0, #4
1005d51c:	7050      	strb	r0, [r2, #1]
1005d51e:	2703      	movs	r7, #3
1005d520:	e615      	b.n	1005d14e <LL_encryption+0x2a>
1005d522:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d524:	7880      	ldrb	r0, [r0, #2]
1005d526:	2803      	cmp	r0, #3
1005d528:	9f05      	ldr	r7, [sp, #20]
1005d52a:	9e07      	ldr	r6, [sp, #28]
1005d52c:	d000      	beq.n	1005d530 <LL_encryption+0x40c>
1005d52e:	e609      	b.n	1005d144 <LL_encryption+0x20>
1005d530:	2005      	movs	r0, #5
1005d532:	7050      	strb	r0, [r2, #1]
1005d534:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005d536:	1ce0      	adds	r0, r4, #3
1005d538:	4631      	mov	r1, r6
1005d53a:	3130      	adds	r1, #48	@ 0x30
1005d53c:	2508      	movs	r5, #8
1005d53e:	462a      	mov	r2, r5
1005d540:	4b9b      	ldr	r3, [pc, #620]	@ (1005d7b0 <__arm_cp.0_4>)
1005d542:	4798      	blx	r3
1005d544:	4620      	mov	r0, r4
1005d546:	300b      	adds	r0, #11
1005d548:	4631      	mov	r1, r6
1005d54a:	312e      	adds	r1, #46	@ 0x2e
1005d54c:	2202      	movs	r2, #2
1005d54e:	4b98      	ldr	r3, [pc, #608]	@ (1005d7b0 <__arm_cp.0_4>)
1005d550:	4798      	blx	r3
1005d552:	4620      	mov	r0, r4
1005d554:	300d      	adds	r0, #13
1005d556:	4631      	mov	r1, r6
1005d558:	462a      	mov	r2, r5
1005d55a:	4d95      	ldr	r5, [pc, #596]	@ (1005d7b0 <__arm_cp.0_4>)
1005d55c:	47a8      	blx	r5
1005d55e:	3415      	adds	r4, #21
1005d560:	3620      	adds	r6, #32
1005d562:	2204      	movs	r2, #4
1005d564:	4620      	mov	r0, r4
1005d566:	4631      	mov	r1, r6
1005d568:	47a8      	blx	r5
1005d56a:	e0ac      	b.n	1005d6c6 <LL_encryption+0x5a2>
1005d56c:	2400      	movs	r4, #0
1005d56e:	9403      	str	r4, [sp, #12]
1005d570:	4d8e      	ldr	r5, [pc, #568]	@ (1005d7ac <__arm_cp.0_3>)
1005d572:	4620      	mov	r0, r4
1005d574:	9304      	str	r3, [sp, #16]
1005d576:	9206      	str	r2, [sp, #24]
1005d578:	47a8      	blx	r5
1005d57a:	900b      	str	r0, [sp, #44]	@ 0x2c
1005d57c:	4620      	mov	r0, r4
1005d57e:	47a8      	blx	r5
1005d580:	900c      	str	r0, [sp, #48]	@ 0x30
1005d582:	4620      	mov	r0, r4
1005d584:	47a8      	blx	r5
1005d586:	2604      	movs	r6, #4
1005d588:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005d58a:	70a6      	strb	r6, [r4, #2]
1005d58c:	210d      	movs	r1, #13
1005d58e:	7061      	strb	r1, [r4, #1]
1005d590:	2103      	movs	r1, #3
1005d592:	7021      	strb	r1, [r4, #0]
1005d594:	900a      	str	r0, [sp, #40]	@ 0x28
1005d596:	1ce1      	adds	r1, r4, #3
1005d598:	ad0b      	add	r5, sp, #44	@ 0x2c
1005d59a:	2208      	movs	r2, #8
1005d59c:	9202      	str	r2, [sp, #8]
1005d59e:	4b84      	ldr	r3, [pc, #528]	@ (1005d7b0 <__arm_cp.0_4>)
1005d5a0:	4628      	mov	r0, r5
1005d5a2:	4798      	blx	r3
1005d5a4:	340b      	adds	r4, #11
1005d5a6:	af0a      	add	r7, sp, #40	@ 0x28
1005d5a8:	4638      	mov	r0, r7
1005d5aa:	4621      	mov	r1, r4
1005d5ac:	4632      	mov	r2, r6
1005d5ae:	4b80      	ldr	r3, [pc, #512]	@ (1005d7b0 <__arm_cp.0_4>)
1005d5b0:	4798      	blx	r3
1005d5b2:	9c07      	ldr	r4, [sp, #28]
1005d5b4:	4621      	mov	r1, r4
1005d5b6:	3108      	adds	r1, #8
1005d5b8:	4628      	mov	r0, r5
1005d5ba:	9a02      	ldr	r2, [sp, #8]
1005d5bc:	4d7c      	ldr	r5, [pc, #496]	@ (1005d7b0 <__arm_cp.0_4>)
1005d5be:	47a8      	blx	r5
1005d5c0:	3424      	adds	r4, #36	@ 0x24
1005d5c2:	4638      	mov	r0, r7
1005d5c4:	4621      	mov	r1, r4
1005d5c6:	4632      	mov	r2, r6
1005d5c8:	47a8      	blx	r5
1005d5ca:	2006      	movs	r0, #6
1005d5cc:	9906      	ldr	r1, [sp, #24]
1005d5ce:	7048      	strb	r0, [r1, #1]
1005d5d0:	2201      	movs	r2, #1
1005d5d2:	9808      	ldr	r0, [sp, #32]
1005d5d4:	9903      	ldr	r1, [sp, #12]
1005d5d6:	f7fe fb4b 	bl	1005bc70 <LL_cpe_set_blocked>
1005d5da:	9804      	ldr	r0, [sp, #16]
1005d5dc:	f7fd f9fc 	bl	1005a9d8 <llc_conn_set_tx_acl_blocked>
1005d5e0:	e0db      	b.n	1005d79a <__arm_cp.0_10+0x66>
1005d5e2:	4870      	ldr	r0, [pc, #448]	@ (1005d7a4 <__arm_cp.0_1>)
1005d5e4:	6800      	ldr	r0, [r0, #0]
1005d5e6:	213d      	movs	r1, #61	@ 0x3d
1005d5e8:	5c41      	ldrb	r1, [r0, r1]
1005d5ea:	0689      	lsls	r1, r1, #26
1005d5ec:	d504      	bpl.n	1005d5f8 <LL_encryption+0x4d4>
1005d5ee:	303d      	adds	r0, #61	@ 0x3d
1005d5f0:	7a40      	ldrb	r0, [r0, #9]
1005d5f2:	06c0      	lsls	r0, r0, #27
1005d5f4:	d500      	bpl.n	1005d5f8 <LL_encryption+0x4d4>
1005d5f6:	e093      	b.n	1005d720 <LL_encryption+0x5fc>
1005d5f8:	2100      	movs	r1, #0
1005d5fa:	9808      	ldr	r0, [sp, #32]
1005d5fc:	4614      	mov	r4, r2
1005d5fe:	f7fe fb47 	bl	1005bc90 <LL_cpe_set_prepare_tx_pdu>
1005d602:	4620      	mov	r0, r4
1005d604:	270d      	movs	r7, #13
1005d606:	e0c7      	b.n	1005d798 <__arm_cp.0_10+0x64>
1005d608:	2009      	movs	r0, #9
1005d60a:	7050      	strb	r0, [r2, #1]
1005d60c:	2706      	movs	r7, #6
1005d60e:	e59e      	b.n	1005d14e <LL_encryption+0x2a>
1005d610:	2006      	movs	r0, #6
1005d612:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d614:	7088      	strb	r0, [r1, #2]
1005d616:	200b      	movs	r0, #11
1005d618:	7050      	strb	r0, [r2, #1]
1005d61a:	25ff      	movs	r5, #255	@ 0xff
1005d61c:	4628      	mov	r0, r5
1005d61e:	3004      	adds	r0, #4
1005d620:	8008      	strh	r0, [r1, #0]
1005d622:	2401      	movs	r4, #1
1005d624:	4618      	mov	r0, r3
1005d626:	4621      	mov	r1, r4
1005d628:	f7fd f9b4 	bl	1005a994 <llc_conn_set_start_enc>
1005d62c:	703c      	strb	r4, [r7, #0]
1005d62e:	462f      	mov	r7, r5
1005d630:	e58d      	b.n	1005d14e <LL_encryption+0x2a>
1005d632:	2400      	movs	r4, #0
1005d634:	7054      	strb	r4, [r2, #1]
1005d636:	485a      	ldr	r0, [pc, #360]	@ (1005d7a0 <__arm_cp.0_0>)
1005d638:	6800      	ldr	r0, [r0, #0]
1005d63a:	212c      	movs	r1, #44	@ 0x2c
1005d63c:	5c40      	ldrb	r0, [r0, r1]
1005d63e:	07c0      	lsls	r0, r0, #31
1005d640:	0ec1      	lsrs	r1, r0, #27
1005d642:	206f      	movs	r0, #111	@ 0x6f
1005d644:	43c0      	mvns	r0, r0
1005d646:	4048      	eors	r0, r1
1005d648:	4611      	mov	r1, r2
1005d64a:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005d64c:	7909      	ldrb	r1, [r1, #4]
1005d64e:	b2c0      	uxtb	r0, r0
1005d650:	2901      	cmp	r1, #1
1005d652:	d14e      	bne.n	1005d6f2 <LL_encryption+0x5ce>
1005d654:	4611      	mov	r1, r2
1005d656:	461e      	mov	r6, r3
1005d658:	f000 f8ea 	bl	1005d830 <hci_encryption_key_refresh_complete_event_push>
1005d65c:	e04e      	b.n	1005d6fc <LL_encryption+0x5d8>
1005d65e:	4618      	mov	r0, r3
1005d660:	4615      	mov	r5, r2
1005d662:	f7fc fe4c 	bl	1005a2fe <llc_conn_clr_tx_acl_blocked>
1005d666:	2400      	movs	r4, #0
1005d668:	2201      	movs	r2, #1
1005d66a:	9808      	ldr	r0, [sp, #32]
1005d66c:	4621      	mov	r1, r4
1005d66e:	f7fe fadd 	bl	1005bc2c <LL_cpe_clr_active>
1005d672:	706c      	strb	r4, [r5, #1]
1005d674:	e091      	b.n	1005d79a <__arm_cp.0_10+0x66>
1005d676:	78d0      	ldrb	r0, [r2, #3]
1005d678:	2801      	cmp	r0, #1
1005d67a:	d110      	bne.n	1005d69e <LL_encryption+0x57a>
1005d67c:	2005      	movs	r0, #5
1005d67e:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d680:	7088      	strb	r0, [r1, #2]
1005d682:	9807      	ldr	r0, [sp, #28]
1005d684:	6730      	str	r0, [r6, #112]	@ 0x70
1005d686:	27ff      	movs	r7, #255	@ 0xff
1005d688:	4638      	mov	r0, r7
1005d68a:	3004      	adds	r0, #4
1005d68c:	8008      	strh	r0, [r1, #0]
1005d68e:	2100      	movs	r1, #0
1005d690:	4618      	mov	r0, r3
1005d692:	4614      	mov	r4, r2
1005d694:	f7fd f97e 	bl	1005a994 <llc_conn_set_start_enc>
1005d698:	2008      	movs	r0, #8
1005d69a:	7060      	strb	r0, [r4, #1]
1005d69c:	e557      	b.n	1005d14e <LL_encryption+0x2a>
1005d69e:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d6a0:	4619      	mov	r1, r3
1005d6a2:	461c      	mov	r4, r3
1005d6a4:	4615      	mov	r5, r2
1005d6a6:	f000 f8f5 	bl	1005d894 <llc_enc_prepare_reject>
1005d6aa:	200c      	movs	r0, #12
1005d6ac:	7068      	strb	r0, [r5, #1]
1005d6ae:	4620      	mov	r0, r4
1005d6b0:	f7fc fe14 	bl	1005a2dc <llc_conn_clr_rx_acl_blocked>
1005d6b4:	e071      	b.n	1005d79a <__arm_cp.0_10+0x66>
1005d6b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d6b8:	7880      	ldrb	r0, [r0, #2]
1005d6ba:	2806      	cmp	r0, #6
1005d6bc:	9f05      	ldr	r7, [sp, #20]
1005d6be:	d000      	beq.n	1005d6c2 <LL_encryption+0x59e>
1005d6c0:	e540      	b.n	1005d144 <LL_encryption+0x20>
1005d6c2:	200a      	movs	r0, #10
1005d6c4:	7050      	strb	r0, [r2, #1]
1005d6c6:	2100      	movs	r1, #0
1005d6c8:	9808      	ldr	r0, [sp, #32]
1005d6ca:	f7fe fae1 	bl	1005bc90 <LL_cpe_set_prepare_tx_pdu>
1005d6ce:	e53e      	b.n	1005d14e <LL_encryption+0x2a>
1005d6d0:	2100      	movs	r1, #0
1005d6d2:	2301      	movs	r3, #1
1005d6d4:	f000 f87a 	bl	1005d7cc <hci_encryption_change_event_push>
1005d6d8:	9d08      	ldr	r5, [sp, #32]
1005d6da:	4620      	mov	r0, r4
1005d6dc:	f7fc fe0f 	bl	1005a2fe <llc_conn_clr_tx_acl_blocked>
1005d6e0:	4620      	mov	r0, r4
1005d6e2:	f7fc fdfb 	bl	1005a2dc <llc_conn_clr_rx_acl_blocked>
1005d6e6:	2101      	movs	r1, #1
1005d6e8:	4628      	mov	r0, r5
1005d6ea:	460a      	mov	r2, r1
1005d6ec:	f7fe fa9e 	bl	1005bc2c <LL_cpe_clr_active>
1005d6f0:	e52d      	b.n	1005d14e <LL_encryption+0x2a>
1005d6f2:	2100      	movs	r1, #0
1005d6f4:	461e      	mov	r6, r3
1005d6f6:	2301      	movs	r3, #1
1005d6f8:	f000 f868 	bl	1005d7cc <hci_encryption_change_event_push>
1005d6fc:	4630      	mov	r0, r6
1005d6fe:	9e08      	ldr	r6, [sp, #32]
1005d700:	703c      	strb	r4, [r7, #0]
1005d702:	4604      	mov	r4, r0
1005d704:	f7fc fdfb 	bl	1005a2fe <llc_conn_clr_tx_acl_blocked>
1005d708:	4620      	mov	r0, r4
1005d70a:	f7fc fde7 	bl	1005a2dc <llc_conn_clr_rx_acl_blocked>
1005d70e:	2201      	movs	r2, #1
1005d710:	4630      	mov	r0, r6
1005d712:	4629      	mov	r1, r5
1005d714:	f7fe fa8a 	bl	1005bc2c <LL_cpe_clr_active>
1005d718:	e03f      	b.n	1005d79a <__arm_cp.0_10+0x66>
1005d71a:	46c0      	nop			@ (mov r8, r8)
1005d71c:	10062dc3 	.word	0x10062dc3
1005d720:	481f      	ldr	r0, [pc, #124]	@ (1005d7a0 <__arm_cp.0_0>)
1005d722:	6800      	ldr	r0, [r0, #0]
1005d724:	212c      	movs	r1, #44	@ 0x2c
1005d726:	5c40      	ldrb	r0, [r0, r1]
1005d728:	07c0      	lsls	r0, r0, #31
1005d72a:	0ec0      	lsrs	r0, r0, #27
1005d72c:	9206      	str	r2, [sp, #24]
1005d72e:	d003      	beq.n	1005d738 <__arm_cp.0_10+0x4>
1005d730:	2219      	movs	r2, #25
1005d732:	e002      	b.n	1005d73a <__arm_cp.0_10+0x6>

1005d734 <__arm_cp.0_10>:
1005d734:	00001703 	.word	0x00001703
1005d738:	220a      	movs	r2, #10
1005d73a:	9d07      	ldr	r5, [sp, #28]
1005d73c:	216f      	movs	r1, #111	@ 0x6f
1005d73e:	43c9      	mvns	r1, r1
1005d740:	4048      	eors	r0, r1
1005d742:	b2c1      	uxtb	r1, r0
1005d744:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
1005d746:	9007      	str	r0, [sp, #28]
1005d748:	8f5c      	ldrh	r4, [r3, #58]	@ 0x3a
1005d74a:	4817      	ldr	r0, [pc, #92]	@ (1005d7a8 <__arm_cp.0_2>)
1005d74c:	6800      	ldr	r0, [r0, #0]
1005d74e:	6900      	ldr	r0, [r0, #16]
1005d750:	2304      	movs	r3, #4
1005d752:	9109      	str	r1, [sp, #36]	@ 0x24
1005d754:	9308      	str	r3, [sp, #32]
1005d756:	f7f7 fcc9 	bl	100550ec <aci_event_fifo_push_header>
1005d75a:	2707      	movs	r7, #7
1005d75c:	2800      	cmp	r0, #0
1005d75e:	d01a      	beq.n	1005d796 <__arm_cp.0_10+0x62>
1005d760:	4606      	mov	r6, r0
1005d762:	7204      	strb	r4, [r0, #8]
1005d764:	0a20      	lsrs	r0, r4, #8
1005d766:	7270      	strb	r0, [r6, #9]
1005d768:	4630      	mov	r0, r6
1005d76a:	300a      	adds	r0, #10
1005d76c:	3530      	adds	r5, #48	@ 0x30
1005d76e:	2208      	movs	r2, #8
1005d770:	4629      	mov	r1, r5
1005d772:	f7f4 ff6f 	bl	10052654 <BLEPLAT_MemCpy>
1005d776:	9907      	ldr	r1, [sp, #28]
1005d778:	0a08      	lsrs	r0, r1, #8
1005d77a:	74f0      	strb	r0, [r6, #19]
1005d77c:	74b1      	strb	r1, [r6, #18]
1005d77e:	2005      	movs	r0, #5
1005d780:	71f0      	strb	r0, [r6, #7]
1005d782:	200d      	movs	r0, #13
1005d784:	71b0      	strb	r0, [r6, #6]
1005d786:	203e      	movs	r0, #62	@ 0x3e
1005d788:	7170      	strb	r0, [r6, #5]
1005d78a:	9808      	ldr	r0, [sp, #32]
1005d78c:	7130      	strb	r0, [r6, #4]
1005d78e:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d790:	4631      	mov	r1, r6
1005d792:	f7f7 fd48 	bl	10055226 <aci_event_fifo_push>
1005d796:	9806      	ldr	r0, [sp, #24]
1005d798:	7047      	strb	r7, [r0, #1]
1005d79a:	9f05      	ldr	r7, [sp, #20]
1005d79c:	e4d7      	b.n	1005d14e <LL_encryption+0x2a>
1005d79e:	46c0      	nop			@ (mov r8, r8)

1005d7a0 <__arm_cp.0_0>:
1005d7a0:	2000241c 	.word	0x2000241c

1005d7a4 <__arm_cp.0_1>:
1005d7a4:	20002470 	.word	0x20002470

1005d7a8 <__arm_cp.0_2>:
1005d7a8:	20002420 	.word	0x20002420

1005d7ac <__arm_cp.0_3>:
1005d7ac:	10062dc3 	.word	0x10062dc3

1005d7b0 <__arm_cp.0_4>:
1005d7b0:	10062a91 	.word	0x10062a91

1005d7b4 <le4ByteToInt32>:
1005d7b4:	7801      	ldrb	r1, [r0, #0]
1005d7b6:	7842      	ldrb	r2, [r0, #1]
1005d7b8:	0212      	lsls	r2, r2, #8
1005d7ba:	1851      	adds	r1, r2, r1
1005d7bc:	7882      	ldrb	r2, [r0, #2]
1005d7be:	0412      	lsls	r2, r2, #16
1005d7c0:	1889      	adds	r1, r1, r2
1005d7c2:	78c0      	ldrb	r0, [r0, #3]
1005d7c4:	0600      	lsls	r0, r0, #24
1005d7c6:	1808      	adds	r0, r1, r0
1005d7c8:	4770      	bx	lr
	...

1005d7cc <hci_encryption_change_event_push>:
1005d7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d7ce:	461e      	mov	r6, r3
1005d7d0:	4615      	mov	r5, r2
1005d7d2:	460f      	mov	r7, r1
1005d7d4:	4604      	mov	r4, r0
1005d7d6:	06c0      	lsls	r0, r0, #27
1005d7d8:	d406      	bmi.n	1005d7e8 <hci_encryption_change_event_push+0x1c>
1005d7da:	4813      	ldr	r0, [pc, #76]	@ (1005d828 <__arm_cp.2_0>)
1005d7dc:	6800      	ldr	r0, [r0, #0]
1005d7de:	2136      	movs	r1, #54	@ 0x36
1005d7e0:	5640      	ldrsb	r0, [r0, r1]
1005d7e2:	2800      	cmp	r0, #0
1005d7e4:	d404      	bmi.n	1005d7f0 <hci_encryption_change_event_push+0x24>
1005d7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d7e8:	20bf      	movs	r0, #191	@ 0xbf
1005d7ea:	4004      	ands	r4, r0
1005d7ec:	2206      	movs	r2, #6
1005d7ee:	e000      	b.n	1005d7f2 <hci_encryption_change_event_push+0x26>
1005d7f0:	2216      	movs	r2, #22
1005d7f2:	480e      	ldr	r0, [pc, #56]	@ (1005d82c <__arm_cp.2_1>)
1005d7f4:	6800      	ldr	r0, [r0, #0]
1005d7f6:	0761      	lsls	r1, r4, #29
1005d7f8:	0ec9      	lsrs	r1, r1, #27
1005d7fa:	1840      	adds	r0, r0, r1
1005d7fc:	6900      	ldr	r0, [r0, #16]
1005d7fe:	2302      	movs	r3, #2
1005d800:	4621      	mov	r1, r4
1005d802:	f7f7 fc73 	bl	100550ec <aci_event_fifo_push_header>
1005d806:	2800      	cmp	r0, #0
1005d808:	d0ed      	beq.n	1005d7e6 <hci_encryption_change_event_push+0x1a>
1005d80a:	4601      	mov	r1, r0
1005d80c:	7205      	strb	r5, [r0, #8]
1005d80e:	7286      	strb	r6, [r0, #10]
1005d810:	71c7      	strb	r7, [r0, #7]
1005d812:	2004      	movs	r0, #4
1005d814:	7188      	strb	r0, [r1, #6]
1005d816:	2208      	movs	r2, #8
1005d818:	714a      	strb	r2, [r1, #5]
1005d81a:	7108      	strb	r0, [r1, #4]
1005d81c:	0a28      	lsrs	r0, r5, #8
1005d81e:	7248      	strb	r0, [r1, #9]
1005d820:	4620      	mov	r0, r4
1005d822:	f7f7 fd00 	bl	10055226 <aci_event_fifo_push>
1005d826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005d828 <__arm_cp.2_0>:
1005d828:	20002470 	.word	0x20002470

1005d82c <__arm_cp.2_1>:
1005d82c:	20002420 	.word	0x20002420

1005d830 <hci_encryption_key_refresh_complete_event_push>:
1005d830:	b5b0      	push	{r4, r5, r7, lr}
1005d832:	460d      	mov	r5, r1
1005d834:	4604      	mov	r4, r0
1005d836:	06c0      	lsls	r0, r0, #27
1005d838:	d406      	bmi.n	1005d848 <hci_encryption_key_refresh_complete_event_push+0x18>
1005d83a:	4814      	ldr	r0, [pc, #80]	@ (1005d88c <__arm_cp.3_0>)
1005d83c:	6800      	ldr	r0, [r0, #0]
1005d83e:	213b      	movs	r1, #59	@ 0x3b
1005d840:	5640      	ldrsb	r0, [r0, r1]
1005d842:	2800      	cmp	r0, #0
1005d844:	d404      	bmi.n	1005d850 <hci_encryption_key_refresh_complete_event_push+0x20>
1005d846:	bdb0      	pop	{r4, r5, r7, pc}
1005d848:	20bf      	movs	r0, #191	@ 0xbf
1005d84a:	4004      	ands	r4, r0
1005d84c:	2207      	movs	r2, #7
1005d84e:	e000      	b.n	1005d852 <hci_encryption_key_refresh_complete_event_push+0x22>
1005d850:	2217      	movs	r2, #23
1005d852:	480f      	ldr	r0, [pc, #60]	@ (1005d890 <__arm_cp.3_1>)
1005d854:	6800      	ldr	r0, [r0, #0]
1005d856:	0761      	lsls	r1, r4, #29
1005d858:	0ec9      	lsrs	r1, r1, #27
1005d85a:	1840      	adds	r0, r0, r1
1005d85c:	6900      	ldr	r0, [r0, #16]
1005d85e:	2302      	movs	r3, #2
1005d860:	4621      	mov	r1, r4
1005d862:	f7f7 fc43 	bl	100550ec <aci_event_fifo_push_header>
1005d866:	2800      	cmp	r0, #0
1005d868:	d0ed      	beq.n	1005d846 <hci_encryption_key_refresh_complete_event_push+0x16>
1005d86a:	4601      	mov	r1, r0
1005d86c:	7205      	strb	r5, [r0, #8]
1005d86e:	2000      	movs	r0, #0
1005d870:	71c8      	strb	r0, [r1, #7]
1005d872:	2003      	movs	r0, #3
1005d874:	7188      	strb	r0, [r1, #6]
1005d876:	2030      	movs	r0, #48	@ 0x30
1005d878:	7148      	strb	r0, [r1, #5]
1005d87a:	2004      	movs	r0, #4
1005d87c:	7108      	strb	r0, [r1, #4]
1005d87e:	0a28      	lsrs	r0, r5, #8
1005d880:	7248      	strb	r0, [r1, #9]
1005d882:	4620      	mov	r0, r4
1005d884:	f7f7 fccf 	bl	10055226 <aci_event_fifo_push>
1005d888:	bdb0      	pop	{r4, r5, r7, pc}
1005d88a:	46c0      	nop			@ (mov r8, r8)

1005d88c <__arm_cp.3_0>:
1005d88c:	20002470 	.word	0x20002470

1005d890 <__arm_cp.3_1>:
1005d890:	20002420 	.word	0x20002420

1005d894 <llc_enc_prepare_reject>:
1005d894:	2203      	movs	r2, #3
1005d896:	7002      	strb	r2, [r0, #0]
1005d898:	2397      	movs	r3, #151	@ 0x97
1005d89a:	005b      	lsls	r3, r3, #1
1005d89c:	5cc9      	ldrb	r1, [r1, r3]
1005d89e:	0749      	lsls	r1, r1, #29
1005d8a0:	d403      	bmi.n	1005d8aa <llc_enc_prepare_reject+0x16>
1005d8a2:	2306      	movs	r3, #6
1005d8a4:	210d      	movs	r1, #13
1005d8a6:	2202      	movs	r2, #2
1005d8a8:	e003      	b.n	1005d8b2 <llc_enc_prepare_reject+0x1e>
1005d8aa:	2106      	movs	r1, #6
1005d8ac:	7101      	strb	r1, [r0, #4]
1005d8ae:	2111      	movs	r1, #17
1005d8b0:	4613      	mov	r3, r2
1005d8b2:	70c3      	strb	r3, [r0, #3]
1005d8b4:	7081      	strb	r1, [r0, #2]
1005d8b6:	7042      	strb	r2, [r0, #1]
1005d8b8:	4770      	bx	lr

1005d8ba <LL_Get_LTK>:
1005d8ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d8bc:	4614      	mov	r4, r2
1005d8be:	4606      	mov	r6, r0
1005d8c0:	4608      	mov	r0, r1
1005d8c2:	f7fc fb47 	bl	10059f54 <llc_conn_get_cntxt_per_p_from_handle>
1005d8c6:	2130      	movs	r1, #48	@ 0x30
1005d8c8:	5641      	ldrsb	r1, [r0, r1]
1005d8ca:	2900      	cmp	r1, #0
1005d8cc:	d405      	bmi.n	1005d8da <LL_Get_LTK+0x20>
1005d8ce:	302c      	adds	r0, #44	@ 0x2c
1005d8d0:	7800      	ldrb	r0, [r0, #0]
1005d8d2:	2802      	cmp	r0, #2
1005d8d4:	d103      	bne.n	1005d8de <LL_Get_LTK+0x24>
1005d8d6:	2512      	movs	r5, #18
1005d8d8:	e018      	b.n	1005d90c <LL_Get_LTK+0x52>
1005d8da:	2502      	movs	r5, #2
1005d8dc:	e016      	b.n	1005d90c <LL_Get_LTK+0x52>
1005d8de:	b2cf      	uxtb	r7, r1
1005d8e0:	2500      	movs	r5, #0
1005d8e2:	4638      	mov	r0, r7
1005d8e4:	4629      	mov	r1, r5
1005d8e6:	f7fe f9d3 	bl	1005bc90 <LL_cpe_set_prepare_tx_pdu>
1005d8ea:	4638      	mov	r0, r7
1005d8ec:	4629      	mov	r1, r5
1005d8ee:	f7fe f9dc 	bl	1005bcaa <LL_cpe_get_cntxt>
1005d8f2:	4601      	mov	r1, r0
1005d8f4:	302b      	adds	r0, #43	@ 0x2b
1005d8f6:	2e00      	cmp	r6, #0
1005d8f8:	d001      	beq.n	1005d8fe <LL_Get_LTK+0x44>
1005d8fa:	7005      	strb	r5, [r0, #0]
1005d8fc:	e006      	b.n	1005d90c <LL_Get_LTK+0x52>
1005d8fe:	2201      	movs	r2, #1
1005d900:	7002      	strb	r2, [r0, #0]
1005d902:	3110      	adds	r1, #16
1005d904:	2210      	movs	r2, #16
1005d906:	4620      	mov	r0, r4
1005d908:	f005 f8c2 	bl	10062a90 <char_copy>
1005d90c:	4628      	mov	r0, r5
1005d90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005d910 <LL_feature_exchange>:
1005d910:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d912:	b085      	sub	sp, #20
1005d914:	461c      	mov	r4, r3
1005d916:	4615      	mov	r5, r2
1005d918:	460e      	mov	r6, r1
1005d91a:	4607      	mov	r7, r0
1005d91c:	f7fe f9c5 	bl	1005bcaa <LL_cpe_get_cntxt>
1005d920:	9003      	str	r0, [sp, #12]
1005d922:	9702      	str	r7, [sp, #8]
1005d924:	4638      	mov	r0, r7
1005d926:	f7fc fb07 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005d92a:	4607      	mov	r7, r0
1005d92c:	20ff      	movs	r0, #255	@ 0xff
1005d92e:	2d06      	cmp	r5, #6
1005d930:	d900      	bls.n	1005d934 <LL_feature_exchange+0x24>
1005d932:	e099      	b.n	1005da68 <LL_feature_exchange+0x158>
1005d934:	9604      	str	r6, [sp, #16]
1005d936:	2197      	movs	r1, #151	@ 0x97
1005d938:	0049      	lsls	r1, r1, #1
1005d93a:	187b      	adds	r3, r7, r1
1005d93c:	463e      	mov	r6, r7
1005d93e:	362c      	adds	r6, #44	@ 0x2c
1005d940:	447d      	add	r5, pc
1005d942:	792d      	ldrb	r5, [r5, #4]
1005d944:	006d      	lsls	r5, r5, #1
1005d946:	44af      	add	pc, r5
1005d948:	298f0803 	.word	0x298f0803
1005d94c:	004a8f8f 	.word	0x004a8f8f
1005d950:	9904      	ldr	r1, [sp, #16]
1005d952:	2901      	cmp	r1, #1
1005d954:	d160      	bne.n	1005da18 <LL_feature_exchange+0x108>
1005d956:	2009      	movs	r0, #9
1005d958:	e086      	b.n	1005da68 <LL_feature_exchange+0x158>
1005d95a:	78a1      	ldrb	r1, [r4, #2]
1005d95c:	290e      	cmp	r1, #14
1005d95e:	d002      	beq.n	1005d966 <LL_feature_exchange+0x56>
1005d960:	2908      	cmp	r1, #8
1005d962:	d000      	beq.n	1005d966 <LL_feature_exchange+0x56>
1005d964:	e080      	b.n	1005da68 <LL_feature_exchange+0x158>
1005d966:	1ce4      	adds	r4, r4, #3
1005d968:	9903      	ldr	r1, [sp, #12]
1005d96a:	3108      	adds	r1, #8
1005d96c:	4605      	mov	r5, r0
1005d96e:	2208      	movs	r2, #8
1005d970:	4620      	mov	r0, r4
1005d972:	461e      	mov	r6, r3
1005d974:	f005 f88c 	bl	10062a90 <char_copy>
1005d978:	2205      	movs	r2, #5
1005d97a:	4630      	mov	r0, r6
1005d97c:	4621      	mov	r1, r4
1005d97e:	f7f4 fe69 	bl	10052654 <BLEPLAT_MemCpy>
1005d982:	9e02      	ldr	r6, [sp, #8]
1005d984:	4630      	mov	r0, r6
1005d986:	9c04      	ldr	r4, [sp, #16]
1005d988:	4621      	mov	r1, r4
1005d98a:	f7fe f981 	bl	1005bc90 <LL_cpe_set_prepare_tx_pdu>
1005d98e:	2203      	movs	r2, #3
1005d990:	2300      	movs	r3, #0
1005d992:	4630      	mov	r0, r6
1005d994:	4621      	mov	r1, r4
1005d996:	f7fe f932 	bl	1005bbfe <LL_cpe_set_active>
1005d99a:	e01e      	b.n	1005d9da <LL_feature_exchange+0xca>
1005d99c:	78a1      	ldrb	r1, [r4, #2]
1005d99e:	2907      	cmp	r1, #7
1005d9a0:	d046      	beq.n	1005da30 <LL_feature_exchange+0x120>
1005d9a2:	2909      	cmp	r1, #9
1005d9a4:	d160      	bne.n	1005da68 <LL_feature_exchange+0x158>
1005d9a6:	4605      	mov	r5, r0
1005d9a8:	1ce4      	adds	r4, r4, #3
1005d9aa:	2205      	movs	r2, #5
1005d9ac:	4618      	mov	r0, r3
1005d9ae:	4621      	mov	r1, r4
1005d9b0:	f7f4 fe50 	bl	10052654 <BLEPLAT_MemCpy>
1005d9b4:	9803      	ldr	r0, [sp, #12]
1005d9b6:	7c40      	ldrb	r0, [r0, #17]
1005d9b8:	2800      	cmp	r0, #0
1005d9ba:	d005      	beq.n	1005d9c8 <LL_feature_exchange+0xb8>
1005d9bc:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
1005d9be:	2080      	movs	r0, #128	@ 0x80
1005d9c0:	2100      	movs	r1, #0
1005d9c2:	4623      	mov	r3, r4
1005d9c4:	f006 fa74 	bl	10063eb0 <hci_le_read_remote_features_complete_event_push_noinline>
1005d9c8:	6e30      	ldr	r0, [r6, #96]	@ 0x60
1005d9ca:	2110      	movs	r1, #16
1005d9cc:	4301      	orrs	r1, r0
1005d9ce:	6631      	str	r1, [r6, #96]	@ 0x60
1005d9d0:	2203      	movs	r2, #3
1005d9d2:	9802      	ldr	r0, [sp, #8]
1005d9d4:	9904      	ldr	r1, [sp, #16]
1005d9d6:	f7fe f929 	bl	1005bc2c <LL_cpe_clr_active>
1005d9da:	4628      	mov	r0, r5
1005d9dc:	e044      	b.n	1005da68 <LL_feature_exchange+0x158>
1005d9de:	9002      	str	r0, [sp, #8]
1005d9e0:	2009      	movs	r0, #9
1005d9e2:	9001      	str	r0, [sp, #4]
1005d9e4:	7060      	strb	r0, [r4, #1]
1005d9e6:	2003      	movs	r0, #3
1005d9e8:	7020      	strb	r0, [r4, #0]
1005d9ea:	1ce7      	adds	r7, r4, #3
1005d9ec:	4638      	mov	r0, r7
1005d9ee:	f000 f83d 	bl	1005da6c <LL_Get_Supported_Features>
1005d9f2:	79a0      	ldrb	r0, [r4, #6]
1005d9f4:	21f7      	movs	r1, #247	@ 0xf7
1005d9f6:	4001      	ands	r1, r0
1005d9f8:	71a1      	strb	r1, [r4, #6]
1005d9fa:	2508      	movs	r5, #8
1005d9fc:	4638      	mov	r0, r7
1005d9fe:	9f03      	ldr	r7, [sp, #12]
1005da00:	4639      	mov	r1, r7
1005da02:	462a      	mov	r2, r5
1005da04:	f005 f844 	bl	10062a90 <char_copy>
1005da08:	9804      	ldr	r0, [sp, #16]
1005da0a:	2801      	cmp	r0, #1
1005da0c:	d108      	bne.n	1005da20 <LL_feature_exchange+0x110>
1005da0e:	7830      	ldrb	r0, [r6, #0]
1005da10:	2802      	cmp	r0, #2
1005da12:	d126      	bne.n	1005da62 <LL_feature_exchange+0x152>
1005da14:	70a5      	strb	r5, [r4, #2]
1005da16:	e026      	b.n	1005da66 <LL_feature_exchange+0x156>
1005da18:	4604      	mov	r4, r0
1005da1a:	2203      	movs	r2, #3
1005da1c:	9802      	ldr	r0, [sp, #8]
1005da1e:	e01c      	b.n	1005da5a <LL_feature_exchange+0x14a>
1005da20:	9801      	ldr	r0, [sp, #4]
1005da22:	70a0      	strb	r0, [r4, #2]
1005da24:	78e0      	ldrb	r0, [r4, #3]
1005da26:	7a39      	ldrb	r1, [r7, #8]
1005da28:	4001      	ands	r1, r0
1005da2a:	70e1      	strb	r1, [r4, #3]
1005da2c:	7439      	strb	r1, [r7, #16]
1005da2e:	e01a      	b.n	1005da66 <LL_feature_exchange+0x156>
1005da30:	7831      	ldrb	r1, [r6, #0]
1005da32:	2903      	cmp	r1, #3
1005da34:	d118      	bne.n	1005da68 <LL_feature_exchange+0x158>
1005da36:	4604      	mov	r4, r0
1005da38:	7818      	ldrb	r0, [r3, #0]
1005da3a:	21f7      	movs	r1, #247	@ 0xf7
1005da3c:	4001      	ands	r1, r0
1005da3e:	7019      	strb	r1, [r3, #0]
1005da40:	9b03      	ldr	r3, [sp, #12]
1005da42:	7c58      	ldrb	r0, [r3, #17]
1005da44:	2800      	cmp	r0, #0
1005da46:	d005      	beq.n	1005da54 <LL_feature_exchange+0x144>
1005da48:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
1005da4a:	3308      	adds	r3, #8
1005da4c:	2080      	movs	r0, #128	@ 0x80
1005da4e:	211a      	movs	r1, #26
1005da50:	f006 fa2e 	bl	10063eb0 <hci_le_read_remote_features_complete_event_push_noinline>
1005da54:	2203      	movs	r2, #3
1005da56:	9802      	ldr	r0, [sp, #8]
1005da58:	9904      	ldr	r1, [sp, #16]
1005da5a:	f7fe f8e7 	bl	1005bc2c <LL_cpe_clr_active>
1005da5e:	4620      	mov	r0, r4
1005da60:	e002      	b.n	1005da68 <LL_feature_exchange+0x158>
1005da62:	200e      	movs	r0, #14
1005da64:	70a0      	strb	r0, [r4, #2]
1005da66:	9802      	ldr	r0, [sp, #8]
1005da68:	b005      	add	sp, #20
1005da6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005da6c <LL_Get_Supported_Features>:
1005da6c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005da6e:	9000      	str	r0, [sp, #0]
1005da70:	f7fb fd8c 	bl	1005958c <data_length_extension_csr_ucfg_weak>
1005da74:	4605      	mov	r5, r0
1005da76:	f7fd ffe0 	bl	1005ba3a <llc_priv_controller_privacy_csr_ucfg_weak>
1005da7a:	b2c0      	uxtb	r0, r0
1005da7c:	21c0      	movs	r1, #192	@ 0xc0
1005da7e:	4341      	muls	r1, r0
1005da80:	0628      	lsls	r0, r5, #24
1005da82:	0cc5      	lsrs	r5, r0, #19
1005da84:	430d      	orrs	r5, r1
1005da86:	2009      	movs	r0, #9
1005da88:	0206      	lsls	r6, r0, #8
1005da8a:	f7f1 f879 	bl	1004eb80 <phy_upd_csr_ucfg>
1005da8e:	b2c7      	uxtb	r7, r0
1005da90:	4377      	muls	r7, r6
1005da92:	432f      	orrs	r7, r5
1005da94:	f002 f906 	bl	1005fca4 <ext_adv_scan_enabled_ucfg_weak>
1005da98:	0305      	lsls	r5, r0, #12
1005da9a:	433d      	orrs	r5, r7
1005da9c:	4e2c      	ldr	r6, [pc, #176]	@ (1005db50 <__arm_cp.1_0>)
1005da9e:	47b0      	blx	r6
1005daa0:	b2c0      	uxtb	r0, r0
1005daa2:	4f2c      	ldr	r7, [pc, #176]	@ (1005db54 <__arm_cp.1_1>)
1005daa4:	4347      	muls	r7, r0
1005daa6:	432f      	orrs	r7, r5
1005daa8:	200d      	movs	r0, #13
1005daaa:	0685      	lsls	r5, r0, #26
1005daac:	f7fd ffb2 	bl	1005ba14 <cis_csr_ucfg_weak>
1005dab0:	b2c4      	uxtb	r4, r0
1005dab2:	436c      	muls	r4, r5
1005dab4:	433c      	orrs	r4, r7
1005dab6:	2073      	movs	r0, #115	@ 0x73
1005dab8:	0445      	lsls	r5, r0, #17
1005daba:	f7fb fd0b 	bl	100594d4 <cte_csr_ucfg_weak>
1005dabe:	b2c7      	uxtb	r7, r0
1005dac0:	436f      	muls	r7, r5
1005dac2:	4327      	orrs	r7, r4
1005dac4:	f7fb fd06 	bl	100594d4 <cte_csr_ucfg_weak>
1005dac8:	4605      	mov	r5, r0
1005daca:	47b0      	blx	r6
1005dacc:	4028      	ands	r0, r5
1005dace:	b2c0      	uxtb	r0, r0
1005dad0:	2503      	movs	r5, #3
1005dad2:	04ec      	lsls	r4, r5, #19
1005dad4:	4344      	muls	r4, r0
1005dad6:	433c      	orrs	r4, r7
1005dad8:	f7fd ff9a 	bl	1005ba10 <bis_csr_ucfg_weak>
1005dadc:	0780      	lsls	r0, r0, #30
1005dade:	4247      	negs	r7, r0
1005dae0:	4327      	orrs	r7, r4
1005dae2:	f002 f8cd 	bl	1005fc80 <llc_get_channel_sel_algo2_enabled>
1005dae6:	0380      	lsls	r0, r0, #14
1005dae8:	4338      	orrs	r0, r7
1005daea:	491b      	ldr	r1, [pc, #108]	@ (1005db58 <__arm_cp.1_2>)
1005daec:	4301      	orrs	r1, r0
1005daee:	9101      	str	r1, [sp, #4]
1005daf0:	f7fb fd4e 	bl	10059590 <pcl_csr_ucfg_weak>
1005daf4:	b2c0      	uxtb	r0, r0
1005daf6:	240e      	movs	r4, #14
1005daf8:	4344      	muls	r4, r0
1005dafa:	f7fb fbf6 	bl	100592ea <chc_csr_ucfg_weak>
1005dafe:	0600      	lsls	r0, r0, #24
1005db00:	0c47      	lsrs	r7, r0, #17
1005db02:	4327      	orrs	r7, r4
1005db04:	47b0      	blx	r6
1005db06:	21f9      	movs	r1, #249	@ 0xf9
1005db08:	0109      	lsls	r1, r1, #4
1005db0a:	0104      	lsls	r4, r0, #4
1005db0c:	400c      	ands	r4, r1
1005db0e:	433c      	orrs	r4, r7
1005db10:	022e      	lsls	r6, r5, #8
1005db12:	f002 f8c7 	bl	1005fca4 <ext_adv_scan_enabled_ucfg_weak>
1005db16:	4605      	mov	r5, r0
1005db18:	4375      	muls	r5, r6
1005db1a:	4325      	orrs	r5, r4
1005db1c:	2001      	movs	r0, #1
1005db1e:	02c4      	lsls	r4, r0, #11
1005db20:	f7fb fd3a 	bl	10059598 <scan_csr_ucfg_weak>
1005db24:	0600      	lsls	r0, r0, #24
1005db26:	0b00      	lsrs	r0, r0, #12
1005db28:	1904      	adds	r4, r0, r4
1005db2a:	f7fd ff7f 	bl	1005ba2c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005db2e:	b2c0      	uxtb	r0, r0
1005db30:	4360      	muls	r0, r4
1005db32:	4328      	orrs	r0, r5
1005db34:	2161      	movs	r1, #97	@ 0x61
1005db36:	4301      	orrs	r1, r0
1005db38:	4808      	ldr	r0, [pc, #32]	@ (1005db5c <__arm_cp.1_3>)
1005db3a:	6800      	ldr	r0, [r0, #0]
1005db3c:	6a00      	ldr	r0, [r0, #32]
1005db3e:	4008      	ands	r0, r1
1005db40:	9002      	str	r0, [sp, #8]
1005db42:	a901      	add	r1, sp, #4
1005db44:	2208      	movs	r2, #8
1005db46:	9800      	ldr	r0, [sp, #0]
1005db48:	f7f4 fd84 	bl	10052654 <BLEPLAT_MemCpy>
1005db4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005db4e:	46c0      	nop			@ (mov r8, r8)

1005db50 <__arm_cp.1_0>:
1005db50:	1005ba29 	.word	0x1005ba29

1005db54 <__arm_cp.1_1>:
1005db54:	03002000 	.word	0x03002000

1005db58 <__arm_cp.1_2>:
1005db58:	0800001d 	.word	0x0800001d

1005db5c <__arm_cp.1_3>:
1005db5c:	20002470 	.word	0x20002470

1005db60 <LL_Read_Remote_Used_Features>:
1005db60:	b570      	push	{r4, r5, r6, lr}
1005db62:	4604      	mov	r4, r0
1005db64:	4608      	mov	r0, r1
1005db66:	f7fc f9f5 	bl	10059f54 <llc_conn_get_cntxt_per_p_from_handle>
1005db6a:	2800      	cmp	r0, #0
1005db6c:	d01c      	beq.n	1005dba8 <LL_Read_Remote_Used_Features+0x48>
1005db6e:	4606      	mov	r6, r0
1005db70:	362c      	adds	r6, #44	@ 0x2c
1005db72:	7831      	ldrb	r1, [r6, #0]
1005db74:	2903      	cmp	r1, #3
1005db76:	d107      	bne.n	1005db88 <LL_Read_Remote_Used_Features+0x28>
1005db78:	2197      	movs	r1, #151	@ 0x97
1005db7a:	0049      	lsls	r1, r1, #1
1005db7c:	1840      	adds	r0, r0, r1
1005db7e:	7800      	ldrb	r0, [r0, #0]
1005db80:	0700      	lsls	r0, r0, #28
1005db82:	d401      	bmi.n	1005db88 <LL_Read_Remote_Used_Features+0x28>
1005db84:	241a      	movs	r4, #26
1005db86:	e024      	b.n	1005dbd2 <LL_Read_Remote_Used_Features+0x72>
1005db88:	7930      	ldrb	r0, [r6, #4]
1005db8a:	2101      	movs	r1, #1
1005db8c:	f7fe f829 	bl	1005bbe2 <LL_cpe_get_active_status>
1005db90:	2800      	cmp	r0, #0
1005db92:	d00d      	beq.n	1005dbb0 <LL_Read_Remote_Used_Features+0x50>
1005db94:	2c00      	cmp	r4, #0
1005db96:	d109      	bne.n	1005dbac <LL_Read_Remote_Used_Features+0x4c>
1005db98:	7930      	ldrb	r0, [r6, #4]
1005db9a:	2101      	movs	r1, #1
1005db9c:	f7fe fe4a 	bl	1005c834 <LL_cpe_conn_get_proc_id_from_sm>
1005dba0:	2803      	cmp	r0, #3
1005dba2:	d103      	bne.n	1005dbac <LL_Read_Remote_Used_Features+0x4c>
1005dba4:	2400      	movs	r4, #0
1005dba6:	e014      	b.n	1005dbd2 <LL_Read_Remote_Used_Features+0x72>
1005dba8:	2402      	movs	r4, #2
1005dbaa:	e012      	b.n	1005dbd2 <LL_Read_Remote_Used_Features+0x72>
1005dbac:	243a      	movs	r4, #58	@ 0x3a
1005dbae:	e010      	b.n	1005dbd2 <LL_Read_Remote_Used_Features+0x72>
1005dbb0:	7930      	ldrb	r0, [r6, #4]
1005dbb2:	2501      	movs	r5, #1
1005dbb4:	4629      	mov	r1, r5
1005dbb6:	f7fe f878 	bl	1005bcaa <LL_cpe_get_cntxt>
1005dbba:	7444      	strb	r4, [r0, #17]
1005dbbc:	7930      	ldrb	r0, [r6, #4]
1005dbbe:	4629      	mov	r1, r5
1005dbc0:	f7fe f866 	bl	1005bc90 <LL_cpe_set_prepare_tx_pdu>
1005dbc4:	7930      	ldrb	r0, [r6, #4]
1005dbc6:	2203      	movs	r2, #3
1005dbc8:	2400      	movs	r4, #0
1005dbca:	4629      	mov	r1, r5
1005dbcc:	4623      	mov	r3, r4
1005dbce:	f7fe f816 	bl	1005bbfe <LL_cpe_set_active>
1005dbd2:	4620      	mov	r0, r4
1005dbd4:	bd70      	pop	{r4, r5, r6, pc}

1005dbd6 <LLC_update_le_ping_params>:
1005dbd6:	b5b0      	push	{r4, r5, r7, lr}
1005dbd8:	4615      	mov	r5, r2
1005dbda:	460c      	mov	r4, r1
1005dbdc:	f7fc f9ac 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005dbe0:	2185      	movs	r1, #133	@ 0x85
1005dbe2:	0049      	lsls	r1, r1, #1
1005dbe4:	5a43      	ldrh	r3, [r0, r1]
1005dbe6:	2d00      	cmp	r5, #0
1005dbe8:	461a      	mov	r2, r3
1005dbea:	d000      	beq.n	1005dbee <LLC_update_le_ping_params+0x18>
1005dbec:	4622      	mov	r2, r4
1005dbee:	1841      	adds	r1, r0, r1
1005dbf0:	8b0c      	ldrh	r4, [r1, #24]
1005dbf2:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
1005dbf4:	4365      	muls	r5, r4
1005dbf6:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
1005dbf8:	300a      	adds	r0, #10
1005dbfa:	4368      	muls	r0, r5
1005dbfc:	0b00      	lsrs	r0, r0, #12
1005dbfe:	b284      	uxth	r4, r0
1005dc00:	1d64      	adds	r4, r4, #5
1005dc02:	4294      	cmp	r4, r2
1005dc04:	d300      	bcc.n	1005dc08 <LLC_update_le_ping_params+0x32>
1005dc06:	4622      	mov	r2, r4
1005dc08:	b294      	uxth	r4, r2
1005dc0a:	42a3      	cmp	r3, r4
1005dc0c:	d00b      	beq.n	1005dc26 <LLC_update_le_ping_params+0x50>
1005dc0e:	8048      	strh	r0, [r1, #2]
1005dc10:	800a      	strh	r2, [r1, #0]
1005dc12:	7908      	ldrb	r0, [r1, #4]
1005dc14:	2801      	cmp	r0, #1
1005dc16:	d006      	beq.n	1005dc26 <LLC_update_le_ping_params+0x50>
1005dc18:	2002      	movs	r0, #2
1005dc1a:	7108      	strb	r0, [r1, #4]
1005dc1c:	2012      	movs	r0, #18
1005dc1e:	f004 fdaf 	bl	10062780 <tsk_notify_idx>
1005dc22:	f7f3 ff30 	bl	10051a86 <BLE_STACK_ProcessRequest>
1005dc26:	bdb0      	pop	{r4, r5, r7, pc}

1005dc28 <LLC_init_le_ping_params>:
1005dc28:	b5b0      	push	{r4, r5, r7, lr}
1005dc2a:	2185      	movs	r1, #133	@ 0x85
1005dc2c:	004a      	lsls	r2, r1, #1
1005dc2e:	1881      	adds	r1, r0, r2
1005dc30:	8b0b      	ldrh	r3, [r1, #24]
1005dc32:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
1005dc34:	435c      	muls	r4, r3
1005dc36:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
1005dc38:	330a      	adds	r3, #10
1005dc3a:	4363      	muls	r3, r4
1005dc3c:	0b1b      	lsrs	r3, r3, #12
1005dc3e:	b29c      	uxth	r4, r3
1005dc40:	4d07      	ldr	r5, [pc, #28]	@ (1005dc60 <__arm_cp.3_0>)
1005dc42:	42ac      	cmp	r4, r5
1005dc44:	d800      	bhi.n	1005dc48 <LLC_init_le_ping_params+0x20>
1005dc46:	462c      	mov	r4, r5
1005dc48:	1d64      	adds	r4, r4, #5
1005dc4a:	5284      	strh	r4, [r0, r2]
1005dc4c:	2001      	movs	r0, #1
1005dc4e:	7108      	strb	r0, [r1, #4]
1005dc50:	804b      	strh	r3, [r1, #2]
1005dc52:	2012      	movs	r0, #18
1005dc54:	f004 fd94 	bl	10062780 <tsk_notify_idx>
1005dc58:	f7f3 ff15 	bl	10051a86 <BLE_STACK_ProcessRequest>
1005dc5c:	bdb0      	pop	{r4, r5, r7, pc}
1005dc5e:	46c0      	nop			@ (mov r8, r8)

1005dc60 <__arm_cp.3_0>:
1005dc60:	00000bb3 	.word	0x00000bb3

1005dc64 <LLC_authenticated_payload_timeout_processing>:
1005dc64:	b5f0      	push	{r4, r5, r6, r7, lr}
1005dc66:	b089      	sub	sp, #36	@ 0x24
1005dc68:	2400      	movs	r4, #0
1005dc6a:	4620      	mov	r0, r4
1005dc6c:	f7fc f964 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005dc70:	9000      	str	r0, [sp, #0]
1005dc72:	2001      	movs	r0, #1
1005dc74:	9008      	str	r0, [sp, #32]
1005dc76:	4843      	ldr	r0, [pc, #268]	@ (1005dd84 <__arm_cp.5_0>)
1005dc78:	6800      	ldr	r0, [r0, #0]
1005dc7a:	2134      	movs	r1, #52	@ 0x34
1005dc7c:	5c40      	ldrb	r0, [r0, r1]
1005dc7e:	4284      	cmp	r4, r0
1005dc80:	d300      	bcc.n	1005dc84 <LLC_authenticated_payload_timeout_processing+0x20>
1005dc82:	e07d      	b.n	1005dd80 <LLC_authenticated_payload_timeout_processing+0x11c>
1005dc84:	204d      	movs	r0, #77	@ 0x4d
1005dc86:	0080      	lsls	r0, r0, #2
1005dc88:	9405      	str	r4, [sp, #20]
1005dc8a:	4360      	muls	r0, r4
1005dc8c:	9900      	ldr	r1, [sp, #0]
1005dc8e:	180c      	adds	r4, r1, r0
1005dc90:	202c      	movs	r0, #44	@ 0x2c
1005dc92:	5c20      	ldrb	r0, [r4, r0]
1005dc94:	21fe      	movs	r1, #254	@ 0xfe
1005dc96:	4001      	ands	r1, r0
1005dc98:	2902      	cmp	r1, #2
1005dc9a:	d16e      	bne.n	1005dd7a <LLC_authenticated_payload_timeout_processing+0x116>
1005dc9c:	2101      	movs	r1, #1
1005dc9e:	9e00      	ldr	r6, [sp, #0]
1005dca0:	4630      	mov	r0, r6
1005dca2:	9107      	str	r1, [sp, #28]
1005dca4:	f7fc fbe4 	bl	1005a470 <llc_conn_get_enc_on>
1005dca8:	4605      	mov	r5, r0
1005dcaa:	2100      	movs	r1, #0
1005dcac:	4630      	mov	r0, r6
1005dcae:	9101      	str	r1, [sp, #4]
1005dcb0:	f7fc fbde 	bl	1005a470 <llc_conn_get_enc_on>
1005dcb4:	1e41      	subs	r1, r0, #1
1005dcb6:	4188      	sbcs	r0, r1
1005dcb8:	2d00      	cmp	r5, #0
1005dcba:	9908      	ldr	r1, [sp, #32]
1005dcbc:	9104      	str	r1, [sp, #16]
1005dcbe:	d100      	bne.n	1005dcc2 <LLC_authenticated_payload_timeout_processing+0x5e>
1005dcc0:	9004      	str	r0, [sp, #16]
1005dcc2:	2043      	movs	r0, #67	@ 0x43
1005dcc4:	0080      	lsls	r0, r0, #2
1005dcc6:	1820      	adds	r0, r4, r0
1005dcc8:	9003      	str	r0, [sp, #12]
1005dcca:	2085      	movs	r0, #133	@ 0x85
1005dccc:	0040      	lsls	r0, r0, #1
1005dcce:	1820      	adds	r0, r4, r0
1005dcd0:	9002      	str	r0, [sp, #8]
1005dcd2:	2087      	movs	r0, #135	@ 0x87
1005dcd4:	0040      	lsls	r0, r0, #1
1005dcd6:	1823      	adds	r3, r4, r0
1005dcd8:	9f08      	ldr	r7, [sp, #32]
1005dcda:	9306      	str	r3, [sp, #24]
1005dcdc:	781c      	ldrb	r4, [r3, #0]
1005dcde:	26f0      	movs	r6, #240	@ 0xf0
1005dce0:	4026      	ands	r6, r4
1005dce2:	250f      	movs	r5, #15
1005dce4:	4025      	ands	r5, r4
1005dce6:	2d03      	cmp	r5, #3
1005dce8:	d01f      	beq.n	1005dd2a <LLC_authenticated_payload_timeout_processing+0xc6>
1005dcea:	2d02      	cmp	r5, #2
1005dcec:	d00b      	beq.n	1005dd06 <LLC_authenticated_payload_timeout_processing+0xa2>
1005dcee:	2d01      	cmp	r5, #1
1005dcf0:	d12b      	bne.n	1005dd4a <LLC_authenticated_payload_timeout_processing+0xe6>
1005dcf2:	9804      	ldr	r0, [sp, #16]
1005dcf4:	2800      	cmp	r0, #0
1005dcf6:	d02c      	beq.n	1005dd52 <LLC_authenticated_payload_timeout_processing+0xee>
1005dcf8:	2012      	movs	r0, #18
1005dcfa:	2101      	movs	r1, #1
1005dcfc:	f004 fd52 	bl	100627a4 <tsk_wait_resource_idx>
1005dd00:	9b06      	ldr	r3, [sp, #24]
1005dd02:	2502      	movs	r5, #2
1005dd04:	e025      	b.n	1005dd52 <LLC_authenticated_payload_timeout_processing+0xee>
1005dd06:	9803      	ldr	r0, [sp, #12]
1005dd08:	8800      	ldrh	r0, [r0, #0]
1005dd0a:	9902      	ldr	r1, [sp, #8]
1005dd0c:	8809      	ldrh	r1, [r1, #0]
1005dd0e:	1a08      	subs	r0, r1, r0
1005dd10:	230a      	movs	r3, #10
1005dd12:	4343      	muls	r3, r0
1005dd14:	481c      	ldr	r0, [pc, #112]	@ (1005dd88 <__arm_cp.5_1>)
1005dd16:	6800      	ldr	r0, [r0, #0]
1005dd18:	9905      	ldr	r1, [sp, #20]
1005dd1a:	b2c9      	uxtb	r1, r1
1005dd1c:	30b0      	adds	r0, #176	@ 0xb0
1005dd1e:	2201      	movs	r2, #1
1005dd20:	f004 fdd7 	bl	100628d2 <CST_start>
1005dd24:	9b06      	ldr	r3, [sp, #24]
1005dd26:	2503      	movs	r5, #3
1005dd28:	e013      	b.n	1005dd52 <LLC_authenticated_payload_timeout_processing+0xee>
1005dd2a:	06a0      	lsls	r0, r4, #26
1005dd2c:	d511      	bpl.n	1005dd52 <LLC_authenticated_payload_timeout_processing+0xee>
1005dd2e:	9804      	ldr	r0, [sp, #16]
1005dd30:	2800      	cmp	r0, #0
1005dd32:	d00c      	beq.n	1005dd4e <LLC_authenticated_payload_timeout_processing+0xea>
1005dd34:	9805      	ldr	r0, [sp, #20]
1005dd36:	b2c0      	uxtb	r0, r0
1005dd38:	f000 f828 	bl	1005dd8c <LLC_authenticated_payload_timeout_start_le_ping>
1005dd3c:	2800      	cmp	r0, #0
1005dd3e:	d001      	beq.n	1005dd44 <LLC_authenticated_payload_timeout_processing+0xe0>
1005dd40:	26d0      	movs	r6, #208	@ 0xd0
1005dd42:	4026      	ands	r6, r4
1005dd44:	9808      	ldr	r0, [sp, #32]
1005dd46:	9b06      	ldr	r3, [sp, #24]
1005dd48:	e004      	b.n	1005dd54 <LLC_authenticated_payload_timeout_processing+0xf0>
1005dd4a:	9801      	ldr	r0, [sp, #4]
1005dd4c:	e002      	b.n	1005dd54 <LLC_authenticated_payload_timeout_processing+0xf0>
1005dd4e:	26d0      	movs	r6, #208	@ 0xd0
1005dd50:	4026      	ands	r6, r4
1005dd52:	9808      	ldr	r0, [sp, #32]
1005dd54:	f3ef 8110 	mrs	r1, PRIMASK
1005dd58:	b672      	cpsid	i
1005dd5a:	7819      	ldrb	r1, [r3, #0]
1005dd5c:	428c      	cmp	r4, r1
1005dd5e:	d103      	bne.n	1005dd68 <LLC_authenticated_payload_timeout_processing+0x104>
1005dd60:	432e      	orrs	r6, r5
1005dd62:	701e      	strb	r6, [r3, #0]
1005dd64:	2100      	movs	r1, #0
1005dd66:	e002      	b.n	1005dd6e <LLC_authenticated_payload_timeout_processing+0x10a>
1005dd68:	9907      	ldr	r1, [sp, #28]
1005dd6a:	400f      	ands	r7, r1
1005dd6c:	4639      	mov	r1, r7
1005dd6e:	1e4a      	subs	r2, r1, #1
1005dd70:	4191      	sbcs	r1, r2
1005dd72:	b662      	cpsie	i
1005dd74:	2700      	movs	r7, #0
1005dd76:	4208      	tst	r0, r1
1005dd78:	d1b0      	bne.n	1005dcdc <LLC_authenticated_payload_timeout_processing+0x78>
1005dd7a:	9c05      	ldr	r4, [sp, #20]
1005dd7c:	1c64      	adds	r4, r4, #1
1005dd7e:	e77a      	b.n	1005dc76 <LLC_authenticated_payload_timeout_processing+0x12>
1005dd80:	b009      	add	sp, #36	@ 0x24
1005dd82:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005dd84 <__arm_cp.5_0>:
1005dd84:	2000241c 	.word	0x2000241c

1005dd88 <__arm_cp.5_1>:
1005dd88:	20002470 	.word	0x20002470

1005dd8c <LLC_authenticated_payload_timeout_start_le_ping>:
1005dd8c:	b570      	push	{r4, r5, r6, lr}
1005dd8e:	4605      	mov	r5, r0
1005dd90:	2101      	movs	r1, #1
1005dd92:	f7fd ff26 	bl	1005bbe2 <LL_cpe_get_active_status>
1005dd96:	4604      	mov	r4, r0
1005dd98:	2801      	cmp	r0, #1
1005dd9a:	d104      	bne.n	1005dda6 <LLC_authenticated_payload_timeout_start_le_ping+0x1a>
1005dd9c:	2012      	movs	r0, #18
1005dd9e:	2101      	movs	r1, #1
1005dda0:	f004 fd00 	bl	100627a4 <tsk_wait_resource_idx>
1005dda4:	e00a      	b.n	1005ddbc <LLC_authenticated_payload_timeout_start_le_ping+0x30>
1005dda6:	2601      	movs	r6, #1
1005dda8:	4628      	mov	r0, r5
1005ddaa:	4631      	mov	r1, r6
1005ddac:	f7fd ff70 	bl	1005bc90 <LL_cpe_set_prepare_tx_pdu>
1005ddb0:	2208      	movs	r2, #8
1005ddb2:	2300      	movs	r3, #0
1005ddb4:	4628      	mov	r0, r5
1005ddb6:	4631      	mov	r1, r6
1005ddb8:	f7fd ff21 	bl	1005bbfe <LL_cpe_set_active>
1005ddbc:	4260      	negs	r0, r4
1005ddbe:	4160      	adcs	r0, r4
1005ddc0:	bd70      	pop	{r4, r5, r6, pc}
	...

1005ddc4 <LLC_authenticated_payload_timeout_cb>:
1005ddc4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005ddc6:	4604      	mov	r4, r0
1005ddc8:	f7fc f8b6 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005ddcc:	4605      	mov	r5, r0
1005ddce:	202c      	movs	r0, #44	@ 0x2c
1005ddd0:	5c28      	ldrb	r0, [r5, r0]
1005ddd2:	21fe      	movs	r1, #254	@ 0xfe
1005ddd4:	4001      	ands	r1, r0
1005ddd6:	2902      	cmp	r1, #2
1005ddd8:	d15b      	bne.n	1005de92 <LLC_authenticated_payload_timeout_cb+0xce>
1005ddda:	9402      	str	r4, [sp, #8]
1005dddc:	2085      	movs	r0, #133	@ 0x85
1005ddde:	0040      	lsls	r0, r0, #1
1005dde0:	182f      	adds	r7, r5, r0
1005dde2:	793a      	ldrb	r2, [r7, #4]
1005dde4:	06d0      	lsls	r0, r2, #27
1005dde6:	d419      	bmi.n	1005de1c <LLC_authenticated_payload_timeout_cb+0x58>
1005dde8:	24f0      	movs	r4, #240	@ 0xf0
1005ddea:	9201      	str	r2, [sp, #4]
1005ddec:	4014      	ands	r4, r2
1005ddee:	2101      	movs	r1, #1
1005ddf0:	4628      	mov	r0, r5
1005ddf2:	f7fc fb3d 	bl	1005a470 <llc_conn_get_enc_on>
1005ddf6:	4606      	mov	r6, r0
1005ddf8:	2100      	movs	r1, #0
1005ddfa:	4628      	mov	r0, r5
1005ddfc:	f7fc fb38 	bl	1005a470 <llc_conn_get_enc_on>
1005de00:	4330      	orrs	r0, r6
1005de02:	d006      	beq.n	1005de12 <LLC_authenticated_payload_timeout_cb+0x4e>
1005de04:	9802      	ldr	r0, [sp, #8]
1005de06:	f7ff ffc1 	bl	1005dd8c <LLC_authenticated_payload_timeout_start_le_ping>
1005de0a:	2801      	cmp	r0, #1
1005de0c:	d001      	beq.n	1005de12 <LLC_authenticated_payload_timeout_cb+0x4e>
1005de0e:	2020      	movs	r0, #32
1005de10:	4304      	orrs	r4, r0
1005de12:	9a01      	ldr	r2, [sp, #4]
1005de14:	2610      	movs	r6, #16
1005de16:	4326      	orrs	r6, r4
1005de18:	8878      	ldrh	r0, [r7, #2]
1005de1a:	e027      	b.n	1005de6c <LLC_authenticated_payload_timeout_cb+0xa8>
1005de1c:	26c0      	movs	r6, #192	@ 0xc0
1005de1e:	481d      	ldr	r0, [pc, #116]	@ (1005de94 <__arm_cp.7_0>)
1005de20:	6800      	ldr	r0, [r0, #0]
1005de22:	2140      	movs	r1, #64	@ 0x40
1005de24:	5640      	ldrsb	r0, [r0, r1]
1005de26:	2800      	cmp	r0, #0
1005de28:	d51c      	bpl.n	1005de64 <LLC_authenticated_payload_timeout_cb+0xa0>
1005de2a:	8f68      	ldrh	r0, [r5, #58]	@ 0x3a
1005de2c:	9001      	str	r0, [sp, #4]
1005de2e:	481a      	ldr	r0, [pc, #104]	@ (1005de98 <__arm_cp.7_1>)
1005de30:	6800      	ldr	r0, [r0, #0]
1005de32:	6980      	ldr	r0, [r0, #24]
1005de34:	2142      	movs	r1, #66	@ 0x42
1005de36:	4614      	mov	r4, r2
1005de38:	2223      	movs	r2, #35	@ 0x23
1005de3a:	2502      	movs	r5, #2
1005de3c:	462b      	mov	r3, r5
1005de3e:	f7f7 f955 	bl	100550ec <aci_event_fifo_push_header>
1005de42:	4622      	mov	r2, r4
1005de44:	2800      	cmp	r0, #0
1005de46:	d00d      	beq.n	1005de64 <LLC_authenticated_payload_timeout_cb+0xa0>
1005de48:	4601      	mov	r1, r0
1005de4a:	9a01      	ldr	r2, [sp, #4]
1005de4c:	71c2      	strb	r2, [r0, #7]
1005de4e:	7185      	strb	r5, [r0, #6]
1005de50:	2057      	movs	r0, #87	@ 0x57
1005de52:	7148      	strb	r0, [r1, #5]
1005de54:	2004      	movs	r0, #4
1005de56:	7108      	strb	r0, [r1, #4]
1005de58:	0a10      	lsrs	r0, r2, #8
1005de5a:	7208      	strb	r0, [r1, #8]
1005de5c:	2042      	movs	r0, #66	@ 0x42
1005de5e:	f7f7 f9e2 	bl	10055226 <aci_event_fifo_push>
1005de62:	4622      	mov	r2, r4
1005de64:	4016      	ands	r6, r2
1005de66:	8878      	ldrh	r0, [r7, #2]
1005de68:	8839      	ldrh	r1, [r7, #0]
1005de6a:	1a08      	subs	r0, r1, r0
1005de6c:	230a      	movs	r3, #10
1005de6e:	4343      	muls	r3, r0
1005de70:	f3ef 8010 	mrs	r0, PRIMASK
1005de74:	b672      	cpsid	i
1005de76:	7938      	ldrb	r0, [r7, #4]
1005de78:	4282      	cmp	r2, r0
1005de7a:	9902      	ldr	r1, [sp, #8]
1005de7c:	d102      	bne.n	1005de84 <LLC_authenticated_payload_timeout_cb+0xc0>
1005de7e:	2003      	movs	r0, #3
1005de80:	4306      	orrs	r6, r0
1005de82:	713e      	strb	r6, [r7, #4]
1005de84:	b662      	cpsie	i
1005de86:	4803      	ldr	r0, [pc, #12]	@ (1005de94 <__arm_cp.7_0>)
1005de88:	6800      	ldr	r0, [r0, #0]
1005de8a:	30b0      	adds	r0, #176	@ 0xb0
1005de8c:	2201      	movs	r2, #1
1005de8e:	f004 fd20 	bl	100628d2 <CST_start>
1005de92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005de94 <__arm_cp.7_0>:
1005de94:	20002470 	.word	0x20002470

1005de98 <__arm_cp.7_1>:
1005de98:	20002420 	.word	0x20002420

1005de9c <LLC_authenticated_payload_timeout_reset>:
1005de9c:	b510      	push	{r4, lr}
1005de9e:	4604      	mov	r4, r0
1005dea0:	2087      	movs	r0, #135	@ 0x87
1005dea2:	0040      	lsls	r0, r0, #1
1005dea4:	5c20      	ldrb	r0, [r4, r0]
1005dea6:	2801      	cmp	r0, #1
1005dea8:	d00e      	beq.n	1005dec8 <LLC_authenticated_payload_timeout_reset+0x2c>
1005deaa:	4620      	mov	r0, r4
1005deac:	3030      	adds	r0, #48	@ 0x30
1005deae:	7801      	ldrb	r1, [r0, #0]
1005deb0:	4806      	ldr	r0, [pc, #24]	@ (1005decc <__arm_cp.8_0>)
1005deb2:	6800      	ldr	r0, [r0, #0]
1005deb4:	30b0      	adds	r0, #176	@ 0xb0
1005deb6:	f004 fcd6 	bl	10062866 <CST_stop>
1005deba:	2085      	movs	r0, #133	@ 0x85
1005debc:	0040      	lsls	r0, r0, #1
1005debe:	2100      	movs	r1, #0
1005dec0:	5221      	strh	r1, [r4, r0]
1005dec2:	1820      	adds	r0, r4, r0
1005dec4:	8041      	strh	r1, [r0, #2]
1005dec6:	7101      	strb	r1, [r0, #4]
1005dec8:	bd10      	pop	{r4, pc}
1005deca:	46c0      	nop			@ (mov r8, r8)

1005decc <__arm_cp.8_0>:
1005decc:	20002470 	.word	0x20002470

1005ded0 <LLC_le_ping>:
1005ded0:	b570      	push	{r4, r5, r6, lr}
1005ded2:	24ff      	movs	r4, #255	@ 0xff
1005ded4:	2a06      	cmp	r2, #6
1005ded6:	d835      	bhi.n	1005df44 <LLC_le_ping+0x74>
1005ded8:	4605      	mov	r5, r0
1005deda:	0090      	lsls	r0, r2, #2
1005dedc:	a201      	add	r2, pc, #4	@ (adr r2, 1005dee4 <LLC_le_ping+0x14>)
1005dede:	5810      	ldr	r0, [r2, r0]
1005dee0:	4687      	mov	pc, r0
1005dee2:	46c0      	nop			@ (mov r8, r8)
1005dee4:	1005df01 	.word	0x1005df01
1005dee8:	1005df09 	.word	0x1005df09
1005deec:	1005df45 	.word	0x1005df45
1005def0:	1005df21 	.word	0x1005df21
1005def4:	1005df45 	.word	0x1005df45
1005def8:	1005df45 	.word	0x1005df45
1005defc:	1005df25 	.word	0x1005df25
1005df00:	2901      	cmp	r1, #1
1005df02:	d117      	bne.n	1005df34 <LLC_le_ping+0x64>
1005df04:	2413      	movs	r4, #19
1005df06:	e01d      	b.n	1005df44 <LLC_le_ping+0x74>
1005df08:	2600      	movs	r6, #0
1005df0a:	4628      	mov	r0, r5
1005df0c:	4631      	mov	r1, r6
1005df0e:	f7fd febf 	bl	1005bc90 <LL_cpe_set_prepare_tx_pdu>
1005df12:	2208      	movs	r2, #8
1005df14:	4628      	mov	r0, r5
1005df16:	4631      	mov	r1, r6
1005df18:	4633      	mov	r3, r6
1005df1a:	f7fd fe70 	bl	1005bbfe <LL_cpe_set_active>
1005df1e:	e011      	b.n	1005df44 <LLC_le_ping+0x74>
1005df20:	2101      	movs	r1, #1
1005df22:	e008      	b.n	1005df36 <LLC_le_ping+0x66>
1005df24:	2001      	movs	r0, #1
1005df26:	7058      	strb	r0, [r3, #1]
1005df28:	2003      	movs	r0, #3
1005df2a:	7018      	strb	r0, [r3, #0]
1005df2c:	2901      	cmp	r1, #1
1005df2e:	d007      	beq.n	1005df40 <LLC_le_ping+0x70>
1005df30:	2013      	movs	r0, #19
1005df32:	e006      	b.n	1005df42 <LLC_le_ping+0x72>
1005df34:	2100      	movs	r1, #0
1005df36:	2208      	movs	r2, #8
1005df38:	4628      	mov	r0, r5
1005df3a:	f7fd fe77 	bl	1005bc2c <LL_cpe_clr_active>
1005df3e:	e001      	b.n	1005df44 <LLC_le_ping+0x74>
1005df40:	2012      	movs	r0, #18
1005df42:	7098      	strb	r0, [r3, #2]
1005df44:	4620      	mov	r0, r4
1005df46:	bd70      	pop	{r4, r5, r6, pc}

1005df48 <llc_conn_init_pcl_ctxt_ucfg_weak>:
1005df48:	4770      	bx	lr

1005df4a <LLC_pcl_hal_cntxt_init_ucfg_weak>:
1005df4a:	4770      	bx	lr

1005df4c <LLC_pcl_incr_rx_packets_ucfg_weak>:
1005df4c:	4770      	bx	lr

1005df4e <LLC_pcl_update_avg_rssi_ucfg_weak>:
1005df4e:	4770      	bx	lr

1005df50 <LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak>:
1005df50:	b580      	push	{r7, lr}
1005df52:	f7fb fff1 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005df56:	2141      	movs	r1, #65	@ 0x41
1005df58:	5c40      	ldrb	r0, [r0, r1]
1005df5a:	4903      	ldr	r1, [pc, #12]	@ (1005df68 <__arm_cp.22_0>)
1005df5c:	6809      	ldr	r1, [r1, #0]
1005df5e:	7a49      	ldrb	r1, [r1, #9]
1005df60:	f7f6 f922 	bl	100541a8 <BLEPLAT_CNTR_SmSetTxPwr>
1005df64:	bd80      	pop	{r7, pc}
1005df66:	46c0      	nop			@ (mov r8, r8)

1005df68 <__arm_cp.22_0>:
1005df68:	20002470 	.word	0x20002470

1005df6c <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>:
1005df6c:	4770      	bx	lr

1005df6e <LLC_pcl_offline_processing_ucfg_weak>:
1005df6e:	2000      	movs	r0, #0
1005df70:	4770      	bx	lr
	...

1005df74 <LL_phy_update_init>:
1005df74:	b580      	push	{r7, lr}
1005df76:	f7fb ffd5 	bl	10059f24 <llc_conn_get_cntxt_p>
1005df7a:	4902      	ldr	r1, [pc, #8]	@ (1005df84 <__arm_cp.3_0>)
1005df7c:	6201      	str	r1, [r0, #32]
1005df7e:	2000      	movs	r0, #0
1005df80:	bd80      	pop	{r7, pc}
1005df82:	46c0      	nop			@ (mov r8, r8)

1005df84 <__arm_cp.3_0>:
1005df84:	07070002 	.word	0x07070002

1005df88 <LL_phy_update_init_per_st_data>:
1005df88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005df8a:	4605      	mov	r5, r0
1005df8c:	f7fc f808 	bl	10059fa0 <llc_conn_get_phy_upd_cntxt_per_p>
1005df90:	2800      	cmp	r0, #0
1005df92:	d027      	beq.n	1005dfe4 <LL_phy_update_init_per_st_data+0x5c>
1005df94:	4604      	mov	r4, r0
1005df96:	f7fb ffc5 	bl	10059f24 <llc_conn_get_cntxt_p>
1005df9a:	4606      	mov	r6, r0
1005df9c:	4628      	mov	r0, r5
1005df9e:	f7fb ffcb 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005dfa2:	4605      	mov	r5, r0
1005dfa4:	2100      	movs	r1, #0
1005dfa6:	220e      	movs	r2, #14
1005dfa8:	4620      	mov	r0, r4
1005dfaa:	f7f4 fb63 	bl	10052674 <BLEPLAT_MemSet>
1005dfae:	8c70      	ldrh	r0, [r6, #34]	@ 0x22
1005dfb0:	8060      	strh	r0, [r4, #2]
1005dfb2:	8c30      	ldrh	r0, [r6, #32]
1005dfb4:	8020      	strh	r0, [r4, #0]
1005dfb6:	2741      	movs	r7, #65	@ 0x41
1005dfb8:	9500      	str	r5, [sp, #0]
1005dfba:	5de8      	ldrb	r0, [r5, r7]
1005dfbc:	f7f5 ff3c 	bl	10053e38 <BLEPLAT_CNTR_SmGetTxPhy>
1005dfc0:	2501      	movs	r5, #1
1005dfc2:	2804      	cmp	r0, #4
1005dfc4:	d101      	bne.n	1005dfca <LL_phy_update_init_per_st_data+0x42>
1005dfc6:	4606      	mov	r6, r0
1005dfc8:	e001      	b.n	1005dfce <LL_phy_update_init_per_st_data+0x46>
1005dfca:	462e      	mov	r6, r5
1005dfcc:	4086      	lsls	r6, r0
1005dfce:	9800      	ldr	r0, [sp, #0]
1005dfd0:	5dc0      	ldrb	r0, [r0, r7]
1005dfd2:	f7f5 ff20 	bl	10053e16 <BLEPLAT_CNTR_SmGetRxPhy>
1005dfd6:	71a6      	strb	r6, [r4, #6]
1005dfd8:	2804      	cmp	r0, #4
1005dfda:	d101      	bne.n	1005dfe0 <LL_phy_update_init_per_st_data+0x58>
1005dfdc:	4605      	mov	r5, r0
1005dfde:	e000      	b.n	1005dfe2 <LL_phy_update_init_per_st_data+0x5a>
1005dfe0:	4085      	lsls	r5, r0
1005dfe2:	71e5      	strb	r5, [r4, #7]
1005dfe4:	2000      	movs	r0, #0
1005dfe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005dfe8 <LL_phy_upd_compute_data_PDU_length_params_ucfg_weak>:
1005dfe8:	6800      	ldr	r0, [r0, #0]
1005dfea:	21a9      	movs	r1, #169	@ 0xa9
1005dfec:	0109      	lsls	r1, r1, #4
1005dfee:	8181      	strh	r1, [r0, #12]
1005dff0:	2229      	movs	r2, #41	@ 0x29
1005dff2:	00d2      	lsls	r2, r2, #3
1005dff4:	80c2      	strh	r2, [r0, #6]
1005dff6:	8141      	strh	r1, [r0, #10]
1005dff8:	8101      	strh	r1, [r0, #8]
1005dffa:	8082      	strh	r2, [r0, #4]
1005dffc:	4770      	bx	lr

1005dffe <LL_phy_upd_pending>:
1005dffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005e000:	4605      	mov	r5, r0
1005e002:	f7fb ff99 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005e006:	4604      	mov	r4, r0
1005e008:	4628      	mov	r0, r5
1005e00a:	f7fb ffc9 	bl	10059fa0 <llc_conn_get_phy_upd_cntxt_per_p>
1005e00e:	219a      	movs	r1, #154	@ 0x9a
1005e010:	5a66      	ldrh	r6, [r4, r1]
1005e012:	b271      	sxtb	r1, r6
1005e014:	2900      	cmp	r1, #0
1005e016:	d52e      	bpl.n	1005e076 <LL_phy_upd_pending+0x78>
1005e018:	4627      	mov	r7, r4
1005e01a:	372c      	adds	r7, #44	@ 0x2c
1005e01c:	7839      	ldrb	r1, [r7, #0]
1005e01e:	2902      	cmp	r1, #2
1005e020:	d106      	bne.n	1005e030 <LL_phy_upd_pending+0x32>
1005e022:	7a01      	ldrb	r1, [r0, #8]
1005e024:	2900      	cmp	r1, #0
1005e026:	d100      	bne.n	1005e02a <LL_phy_upd_pending+0x2c>
1005e028:	7981      	ldrb	r1, [r0, #6]
1005e02a:	7181      	strb	r1, [r0, #6]
1005e02c:	7a45      	ldrb	r5, [r0, #9]
1005e02e:	e005      	b.n	1005e03c <LL_phy_upd_pending+0x3e>
1005e030:	7a41      	ldrb	r1, [r0, #9]
1005e032:	2900      	cmp	r1, #0
1005e034:	d100      	bne.n	1005e038 <LL_phy_upd_pending+0x3a>
1005e036:	7981      	ldrb	r1, [r0, #6]
1005e038:	7181      	strb	r1, [r0, #6]
1005e03a:	7a05      	ldrb	r5, [r0, #8]
1005e03c:	2d00      	cmp	r5, #0
1005e03e:	d100      	bne.n	1005e042 <LL_phy_upd_pending+0x44>
1005e040:	79c5      	ldrb	r5, [r0, #7]
1005e042:	71c5      	strb	r5, [r0, #7]
1005e044:	2904      	cmp	r1, #4
1005e046:	d104      	bne.n	1005e052 <LL_phy_upd_pending+0x54>
1005e048:	8800      	ldrh	r0, [r0, #0]
1005e04a:	2801      	cmp	r0, #1
1005e04c:	d003      	beq.n	1005e056 <LL_phy_upd_pending+0x58>
1005e04e:	2104      	movs	r1, #4
1005e050:	e002      	b.n	1005e058 <LL_phy_upd_pending+0x5a>
1005e052:	0849      	lsrs	r1, r1, #1
1005e054:	e000      	b.n	1005e058 <LL_phy_upd_pending+0x5a>
1005e056:	2106      	movs	r1, #6
1005e058:	349a      	adds	r4, #154	@ 0x9a
1005e05a:	7d78      	ldrb	r0, [r7, #21]
1005e05c:	f7f6 f88f 	bl	1005417e <BLEPLAT_CNTR_SmSetTxPhy>
1005e060:	2d04      	cmp	r5, #4
1005e062:	d000      	beq.n	1005e066 <LL_phy_upd_pending+0x68>
1005e064:	086d      	lsrs	r5, r5, #1
1005e066:	7d78      	ldrb	r0, [r7, #21]
1005e068:	4629      	mov	r1, r5
1005e06a:	f7f6 f81c 	bl	100540a6 <BLEPLAT_CNTR_SmSetRxPhy>
1005e06e:	8820      	ldrh	r0, [r4, #0]
1005e070:	2180      	movs	r1, #128	@ 0x80
1005e072:	4388      	bics	r0, r1
1005e074:	8020      	strh	r0, [r4, #0]
1005e076:	b2f0      	uxtb	r0, r6
1005e078:	09c0      	lsrs	r0, r0, #7
1005e07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005e07c <LL_phy_update>:
1005e07c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e07e:	b087      	sub	sp, #28
1005e080:	461e      	mov	r6, r3
1005e082:	4617      	mov	r7, r2
1005e084:	460d      	mov	r5, r1
1005e086:	4604      	mov	r4, r0
1005e088:	f7fd fe0f 	bl	1005bcaa <LL_cpe_get_cntxt>
1005e08c:	9003      	str	r0, [sp, #12]
1005e08e:	9404      	str	r4, [sp, #16]
1005e090:	4620      	mov	r0, r4
1005e092:	f7fb ff51 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005e096:	23ff      	movs	r3, #255	@ 0xff
1005e098:	2f07      	cmp	r7, #7
1005e09a:	d900      	bls.n	1005e09e <LL_phy_update+0x22>
1005e09c:	e18d      	b.n	1005e3ba <LL_phy_update+0x33e>
1005e09e:	9502      	str	r5, [sp, #8]
1005e0a0:	4605      	mov	r5, r0
1005e0a2:	352c      	adds	r5, #44	@ 0x2c
1005e0a4:	4604      	mov	r4, r0
1005e0a6:	3498      	adds	r4, #152	@ 0x98
1005e0a8:	007f      	lsls	r7, r7, #1
1005e0aa:	46c0      	nop			@ (mov r8, r8)
1005e0ac:	447f      	add	r7, pc
1005e0ae:	88bf      	ldrh	r7, [r7, #4]
1005e0b0:	007f      	lsls	r7, r7, #1
1005e0b2:	44bf      	add	pc, r7
1005e0b4:	001c0007 	.word	0x001c0007
1005e0b8:	004d0041 	.word	0x004d0041
1005e0bc:	01820067 	.word	0x01820067
1005e0c0:	006e0026 	.word	0x006e0026
1005e0c4:	7828      	ldrb	r0, [r5, #0]
1005e0c6:	9902      	ldr	r1, [sp, #8]
1005e0c8:	2901      	cmp	r1, #1
1005e0ca:	d000      	beq.n	1005e0ce <LL_phy_update+0x52>
1005e0cc:	e0b5      	b.n	1005e23a <LL_phy_update+0x1be>
1005e0ce:	2802      	cmp	r0, #2
1005e0d0:	d000      	beq.n	1005e0d4 <LL_phy_update+0x58>
1005e0d2:	e103      	b.n	1005e2dc <LL_phy_update+0x260>
1005e0d4:	9e03      	ldr	r6, [sp, #12]
1005e0d6:	7c30      	ldrb	r0, [r6, #16]
1005e0d8:	2803      	cmp	r0, #3
1005e0da:	d100      	bne.n	1005e0de <LL_phy_update+0x62>
1005e0dc:	e158      	b.n	1005e390 <LL_phy_update+0x314>
1005e0de:	2801      	cmp	r0, #1
1005e0e0:	d000      	beq.n	1005e0e4 <LL_phy_update+0x68>
1005e0e2:	e16a      	b.n	1005e3ba <LL_phy_update+0x33e>
1005e0e4:	2002      	movs	r0, #2
1005e0e6:	9903      	ldr	r1, [sp, #12]
1005e0e8:	7408      	strb	r0, [r1, #16]
1005e0ea:	2317      	movs	r3, #23
1005e0ec:	e165      	b.n	1005e3ba <LL_phy_update+0x33e>
1005e0ee:	78f0      	ldrb	r0, [r6, #3]
1005e0f0:	a905      	add	r1, sp, #20
1005e0f2:	7088      	strb	r0, [r1, #2]
1005e0f4:	7930      	ldrb	r0, [r6, #4]
1005e0f6:	70c8      	strb	r0, [r1, #3]
1005e0f8:	9804      	ldr	r0, [sp, #16]
1005e0fa:	461c      	mov	r4, r3
1005e0fc:	f000 fac8 	bl	1005e690 <LL_process_phy_req_rcpt>
1005e100:	e15a      	b.n	1005e3b8 <LL_phy_update+0x33c>
1005e102:	7828      	ldrb	r0, [r5, #0]
1005e104:	9902      	ldr	r1, [sp, #8]
1005e106:	2901      	cmp	r1, #1
1005e108:	d171      	bne.n	1005e1ee <LL_phy_update+0x172>
1005e10a:	2802      	cmp	r0, #2
1005e10c:	9903      	ldr	r1, [sp, #12]
1005e10e:	d000      	beq.n	1005e112 <LL_phy_update+0x96>
1005e110:	e0ce      	b.n	1005e2b0 <LL_phy_update+0x234>
1005e112:	7c08      	ldrb	r0, [r1, #16]
1005e114:	2802      	cmp	r0, #2
1005e116:	d100      	bne.n	1005e11a <LL_phy_update+0x9e>
1005e118:	e152      	b.n	1005e3c0 <LL_phy_update+0x344>
1005e11a:	2800      	cmp	r0, #0
1005e11c:	d000      	beq.n	1005e120 <LL_phy_update+0xa4>
1005e11e:	e14c      	b.n	1005e3ba <LL_phy_update+0x33e>
1005e120:	2016      	movs	r0, #22
1005e122:	70b0      	strb	r0, [r6, #2]
1005e124:	2003      	movs	r0, #3
1005e126:	7070      	strb	r0, [r6, #1]
1005e128:	7030      	strb	r0, [r6, #0]
1005e12a:	7cc8      	ldrb	r0, [r1, #19]
1005e12c:	70f0      	strb	r0, [r6, #3]
1005e12e:	7d08      	ldrb	r0, [r1, #20]
1005e130:	7130      	strb	r0, [r6, #4]
1005e132:	2001      	movs	r0, #1
1005e134:	7408      	strb	r0, [r1, #16]
1005e136:	e140      	b.n	1005e3ba <LL_phy_update+0x33e>
1005e138:	78f1      	ldrb	r1, [r6, #3]
1005e13a:	a805      	add	r0, sp, #20
1005e13c:	7081      	strb	r1, [r0, #2]
1005e13e:	7931      	ldrb	r1, [r6, #4]
1005e140:	70c1      	strb	r1, [r0, #3]
1005e142:	7d65      	ldrb	r5, [r4, #21]
1005e144:	461e      	mov	r6, r3
1005e146:	2d07      	cmp	r5, #7
1005e148:	d100      	bne.n	1005e14c <LL_phy_update+0xd0>
1005e14a:	e090      	b.n	1005e26e <LL_phy_update+0x1f2>
1005e14c:	2102      	movs	r1, #2
1005e14e:	e08f      	b.n	1005e270 <LL_phy_update+0x1f4>
1005e150:	78b0      	ldrb	r0, [r6, #2]
1005e152:	2807      	cmp	r0, #7
1005e154:	d100      	bne.n	1005e158 <LL_phy_update+0xdc>
1005e156:	e0d2      	b.n	1005e2fe <LL_phy_update+0x282>
1005e158:	2811      	cmp	r0, #17
1005e15a:	9f04      	ldr	r7, [sp, #16]
1005e15c:	d100      	bne.n	1005e160 <LL_phy_update+0xe4>
1005e15e:	e0e7      	b.n	1005e330 <LL_phy_update+0x2b4>
1005e160:	2818      	cmp	r0, #24
1005e162:	d100      	bne.n	1005e166 <LL_phy_update+0xea>
1005e164:	e0fa      	b.n	1005e35c <LL_phy_update+0x2e0>
1005e166:	2817      	cmp	r0, #23
1005e168:	d000      	beq.n	1005e16c <LL_phy_update+0xf0>
1005e16a:	e126      	b.n	1005e3ba <LL_phy_update+0x33e>
1005e16c:	a905      	add	r1, sp, #20
1005e16e:	2000      	movs	r0, #0
1005e170:	7108      	strb	r0, [r1, #4]
1005e172:	78f0      	ldrb	r0, [r6, #3]
1005e174:	7088      	strb	r0, [r1, #2]
1005e176:	7930      	ldrb	r0, [r6, #4]
1005e178:	70c8      	strb	r0, [r1, #3]
1005e17a:	4638      	mov	r0, r7
1005e17c:	461c      	mov	r4, r3
1005e17e:	f000 f9cf 	bl	1005e520 <LL_compute_phy_upd_ind>
1005e182:	e119      	b.n	1005e3b8 <LL_phy_update+0x33c>
1005e184:	78b1      	ldrb	r1, [r6, #2]
1005e186:	461c      	mov	r4, r3
1005e188:	2916      	cmp	r1, #22
1005e18a:	d100      	bne.n	1005e18e <LL_phy_update+0x112>
1005e18c:	e085      	b.n	1005e29a <LL_phy_update+0x21e>
1005e18e:	212a      	movs	r1, #42	@ 0x2a
1005e190:	e084      	b.n	1005e29c <LL_phy_update+0x220>
1005e192:	9301      	str	r3, [sp, #4]
1005e194:	9f04      	ldr	r7, [sp, #16]
1005e196:	4638      	mov	r0, r7
1005e198:	9e03      	ldr	r6, [sp, #12]
1005e19a:	4631      	mov	r1, r6
1005e19c:	f000 f9a3 	bl	1005e4e6 <LL_reset_max_tx_data_frag>
1005e1a0:	7d69      	ldrb	r1, [r5, #21]
1005e1a2:	4638      	mov	r0, r7
1005e1a4:	f7fe ffbc 	bl	1005d120 <LLC_connection_cte_response_disable_ucfg_weak>
1005e1a8:	8871      	ldrh	r1, [r6, #2]
1005e1aa:	8830      	ldrh	r0, [r6, #0]
1005e1ac:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
1005e1ae:	4290      	cmp	r0, r2
1005e1b0:	d102      	bne.n	1005e1b8 <LL_phy_update+0x13c>
1005e1b2:	8ca2      	ldrh	r2, [r4, #36]	@ 0x24
1005e1b4:	4291      	cmp	r1, r2
1005e1b6:	d00a      	beq.n	1005e1ce <LL_phy_update+0x152>
1005e1b8:	84a1      	strh	r1, [r4, #36]	@ 0x24
1005e1ba:	8460      	strh	r0, [r4, #34]	@ 0x22
1005e1bc:	f3ef 8010 	mrs	r0, PRIMASK
1005e1c0:	b672      	cpsid	i
1005e1c2:	2001      	movs	r0, #1
1005e1c4:	0240      	lsls	r0, r0, #9
1005e1c6:	8861      	ldrh	r1, [r4, #2]
1005e1c8:	4301      	orrs	r1, r0
1005e1ca:	8061      	strh	r1, [r4, #2]
1005e1cc:	b662      	cpsie	i
1005e1ce:	f3ef 8010 	mrs	r0, PRIMASK
1005e1d2:	b672      	cpsid	i
1005e1d4:	2001      	movs	r0, #1
1005e1d6:	0200      	lsls	r0, r0, #8
1005e1d8:	8861      	ldrh	r1, [r4, #2]
1005e1da:	4301      	orrs	r1, r0
1005e1dc:	8061      	strh	r1, [r4, #2]
1005e1de:	b662      	cpsie	i
1005e1e0:	2207      	movs	r2, #7
1005e1e2:	4638      	mov	r0, r7
1005e1e4:	9902      	ldr	r1, [sp, #8]
1005e1e6:	f7fd fd21 	bl	1005bc2c <LL_cpe_clr_active>
1005e1ea:	9b01      	ldr	r3, [sp, #4]
1005e1ec:	e0e5      	b.n	1005e3ba <LL_phy_update+0x33e>
1005e1ee:	2802      	cmp	r0, #2
1005e1f0:	9903      	ldr	r1, [sp, #12]
1005e1f2:	d166      	bne.n	1005e2c2 <LL_phy_update+0x246>
1005e1f4:	7c08      	ldrb	r0, [r1, #16]
1005e1f6:	2805      	cmp	r0, #5
1005e1f8:	d100      	bne.n	1005e1fc <LL_phy_update+0x180>
1005e1fa:	e100      	b.n	1005e3fe <LL_phy_update+0x382>
1005e1fc:	2800      	cmp	r0, #0
1005e1fe:	d000      	beq.n	1005e202 <LL_phy_update+0x186>
1005e200:	e0db      	b.n	1005e3ba <LL_phy_update+0x33e>
1005e202:	9301      	str	r3, [sp, #4]
1005e204:	9f04      	ldr	r7, [sp, #16]
1005e206:	4638      	mov	r0, r7
1005e208:	f7fb feca 	bl	10059fa0 <llc_conn_get_phy_upd_cntxt_per_p>
1005e20c:	2118      	movs	r1, #24
1005e20e:	70b1      	strb	r1, [r6, #2]
1005e210:	2105      	movs	r1, #5
1005e212:	7071      	strb	r1, [r6, #1]
1005e214:	2503      	movs	r5, #3
1005e216:	7035      	strb	r5, [r6, #0]
1005e218:	7a01      	ldrb	r1, [r0, #8]
1005e21a:	70f1      	strb	r1, [r6, #3]
1005e21c:	7a40      	ldrb	r0, [r0, #9]
1005e21e:	7130      	strb	r0, [r6, #4]
1005e220:	1d71      	adds	r1, r6, #5
1005e222:	2202      	movs	r2, #2
1005e224:	4620      	mov	r0, r4
1005e226:	f004 fc33 	bl	10062a90 <char_copy>
1005e22a:	9803      	ldr	r0, [sp, #12]
1005e22c:	7405      	strb	r5, [r0, #16]
1005e22e:	8820      	ldrh	r0, [r4, #0]
1005e230:	2800      	cmp	r0, #0
1005e232:	d0da      	beq.n	1005e1ea <LL_phy_update+0x16e>
1005e234:	4638      	mov	r0, r7
1005e236:	9902      	ldr	r1, [sp, #8]
1005e238:	e0de      	b.n	1005e3f8 <LL_phy_update+0x37c>
1005e23a:	2802      	cmp	r0, #2
1005e23c:	d14a      	bne.n	1005e2d4 <LL_phy_update+0x258>
1005e23e:	9e03      	ldr	r6, [sp, #12]
1005e240:	7c30      	ldrb	r0, [r6, #16]
1005e242:	2803      	cmp	r0, #3
1005e244:	d000      	beq.n	1005e248 <LL_phy_update+0x1cc>
1005e246:	e09f      	b.n	1005e388 <LL_phy_update+0x30c>
1005e248:	461c      	mov	r4, r3
1005e24a:	7c70      	ldrb	r0, [r6, #17]
1005e24c:	a905      	add	r1, sp, #20
1005e24e:	7108      	strb	r0, [r1, #4]
1005e250:	9d04      	ldr	r5, [sp, #16]
1005e252:	4628      	mov	r0, r5
1005e254:	4632      	mov	r2, r6
1005e256:	f000 f8f0 	bl	1005e43a <LL_process_phy_upd_ind>
1005e25a:	2800      	cmp	r0, #0
1005e25c:	d100      	bne.n	1005e260 <LL_phy_update+0x1e4>
1005e25e:	e0ab      	b.n	1005e3b8 <LL_phy_update+0x33c>
1005e260:	4628      	mov	r0, r5
1005e262:	4631      	mov	r1, r6
1005e264:	f000 f93f 	bl	1005e4e6 <LL_reset_max_tx_data_frag>
1005e268:	2207      	movs	r2, #7
1005e26a:	4628      	mov	r0, r5
1005e26c:	e074      	b.n	1005e358 <LL_phy_update+0x2dc>
1005e26e:	2101      	movs	r1, #1
1005e270:	9f04      	ldr	r7, [sp, #16]
1005e272:	7181      	strb	r1, [r0, #6]
1005e274:	2100      	movs	r1, #0
1005e276:	4638      	mov	r0, r7
1005e278:	f7fd fd17 	bl	1005bcaa <LL_cpe_get_cntxt>
1005e27c:	4604      	mov	r4, r0
1005e27e:	4638      	mov	r0, r7
1005e280:	f7fb fe5a 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005e284:	212c      	movs	r1, #44	@ 0x2c
1005e286:	5c40      	ldrb	r0, [r0, r1]
1005e288:	2802      	cmp	r0, #2
1005e28a:	d10a      	bne.n	1005e2a2 <LL_phy_update+0x226>
1005e28c:	20ff      	movs	r0, #255	@ 0xff
1005e28e:	3006      	adds	r0, #6
1005e290:	8220      	strh	r0, [r4, #16]
1005e292:	2d07      	cmp	r5, #7
1005e294:	d024      	beq.n	1005e2e0 <LL_phy_update+0x264>
1005e296:	202a      	movs	r0, #42	@ 0x2a
1005e298:	e023      	b.n	1005e2e2 <LL_phy_update+0x266>
1005e29a:	2123      	movs	r1, #35	@ 0x23
1005e29c:	f7fc fd30 	bl	1005ad00 <llc_conn_disconnect_link_from_cpf>
1005e2a0:	e08a      	b.n	1005e3b8 <LL_phy_update+0x33c>
1005e2a2:	2d07      	cmp	r5, #7
1005e2a4:	d129      	bne.n	1005e2fa <LL_phy_update+0x27e>
1005e2a6:	a905      	add	r1, sp, #20
1005e2a8:	4638      	mov	r0, r7
1005e2aa:	f000 f9f1 	bl	1005e690 <LL_process_phy_req_rcpt>
1005e2ae:	e024      	b.n	1005e2fa <LL_phy_update+0x27e>
1005e2b0:	2016      	movs	r0, #22
1005e2b2:	70b0      	strb	r0, [r6, #2]
1005e2b4:	2003      	movs	r0, #3
1005e2b6:	7070      	strb	r0, [r6, #1]
1005e2b8:	7030      	strb	r0, [r6, #0]
1005e2ba:	7cc8      	ldrb	r0, [r1, #19]
1005e2bc:	70f0      	strb	r0, [r6, #3]
1005e2be:	7d08      	ldrb	r0, [r1, #20]
1005e2c0:	e0a5      	b.n	1005e40e <LL_phy_update+0x392>
1005e2c2:	2017      	movs	r0, #23
1005e2c4:	70b0      	strb	r0, [r6, #2]
1005e2c6:	2003      	movs	r0, #3
1005e2c8:	7070      	strb	r0, [r6, #1]
1005e2ca:	7030      	strb	r0, [r6, #0]
1005e2cc:	7d48      	ldrb	r0, [r1, #21]
1005e2ce:	70f0      	strb	r0, [r6, #3]
1005e2d0:	7d88      	ldrb	r0, [r1, #22]
1005e2d2:	e09c      	b.n	1005e40e <LL_phy_update+0x392>
1005e2d4:	2202      	movs	r2, #2
1005e2d6:	9804      	ldr	r0, [sp, #16]
1005e2d8:	f7fd fcca 	bl	1005bc70 <LL_cpe_set_blocked>
1005e2dc:	2318      	movs	r3, #24
1005e2de:	e06c      	b.n	1005e3ba <LL_phy_update+0x33e>
1005e2e0:	2023      	movs	r0, #35	@ 0x23
1005e2e2:	74a0      	strb	r0, [r4, #18]
1005e2e4:	2400      	movs	r4, #0
1005e2e6:	4638      	mov	r0, r7
1005e2e8:	4621      	mov	r1, r4
1005e2ea:	f7fd fcd1 	bl	1005bc90 <LL_cpe_set_prepare_tx_pdu>
1005e2ee:	2207      	movs	r2, #7
1005e2f0:	2301      	movs	r3, #1
1005e2f2:	4638      	mov	r0, r7
1005e2f4:	4621      	mov	r1, r4
1005e2f6:	f7fd fc82 	bl	1005bbfe <LL_cpe_set_active>
1005e2fa:	4633      	mov	r3, r6
1005e2fc:	e05d      	b.n	1005e3ba <LL_phy_update+0x33e>
1005e2fe:	461c      	mov	r4, r3
1005e300:	a905      	add	r1, sp, #20
1005e302:	2007      	movs	r0, #7
1005e304:	7088      	strb	r0, [r1, #2]
1005e306:	2000      	movs	r0, #0
1005e308:	7048      	strb	r0, [r1, #1]
1005e30a:	78f0      	ldrb	r0, [r6, #3]
1005e30c:	7008      	strb	r0, [r1, #0]
1005e30e:	9f03      	ldr	r7, [sp, #12]
1005e310:	7c78      	ldrb	r0, [r7, #17]
1005e312:	70c8      	strb	r0, [r1, #3]
1005e314:	9e04      	ldr	r6, [sp, #16]
1005e316:	4630      	mov	r0, r6
1005e318:	f000 f992 	bl	1005e640 <LL_process_unknown_rsp_reject_ind_rcpt>
1005e31c:	7828      	ldrb	r0, [r5, #0]
1005e31e:	2803      	cmp	r0, #3
1005e320:	d103      	bne.n	1005e32a <LL_phy_update+0x2ae>
1005e322:	4630      	mov	r0, r6
1005e324:	4639      	mov	r1, r7
1005e326:	f000 f8de 	bl	1005e4e6 <LL_reset_max_tx_data_frag>
1005e32a:	2207      	movs	r2, #7
1005e32c:	4630      	mov	r0, r6
1005e32e:	e013      	b.n	1005e358 <LL_phy_update+0x2dc>
1005e330:	a905      	add	r1, sp, #20
1005e332:	2011      	movs	r0, #17
1005e334:	7088      	strb	r0, [r1, #2]
1005e336:	78f0      	ldrb	r0, [r6, #3]
1005e338:	7008      	strb	r0, [r1, #0]
1005e33a:	7930      	ldrb	r0, [r6, #4]
1005e33c:	7048      	strb	r0, [r1, #1]
1005e33e:	9d03      	ldr	r5, [sp, #12]
1005e340:	7c68      	ldrb	r0, [r5, #17]
1005e342:	70c8      	strb	r0, [r1, #3]
1005e344:	4638      	mov	r0, r7
1005e346:	461c      	mov	r4, r3
1005e348:	f000 f97a 	bl	1005e640 <LL_process_unknown_rsp_reject_ind_rcpt>
1005e34c:	4638      	mov	r0, r7
1005e34e:	4629      	mov	r1, r5
1005e350:	f000 f8c9 	bl	1005e4e6 <LL_reset_max_tx_data_frag>
1005e354:	2207      	movs	r2, #7
1005e356:	4638      	mov	r0, r7
1005e358:	9902      	ldr	r1, [sp, #8]
1005e35a:	e02b      	b.n	1005e3b4 <LL_phy_update+0x338>
1005e35c:	9301      	str	r3, [sp, #4]
1005e35e:	1cf0      	adds	r0, r6, #3
1005e360:	ae05      	add	r6, sp, #20
1005e362:	2205      	movs	r2, #5
1005e364:	4631      	mov	r1, r6
1005e366:	f004 fb93 	bl	10062a90 <char_copy>
1005e36a:	9d03      	ldr	r5, [sp, #12]
1005e36c:	7c68      	ldrb	r0, [r5, #17]
1005e36e:	7130      	strb	r0, [r6, #4]
1005e370:	4638      	mov	r0, r7
1005e372:	4631      	mov	r1, r6
1005e374:	462a      	mov	r2, r5
1005e376:	f000 f860 	bl	1005e43a <LL_process_phy_upd_ind>
1005e37a:	2800      	cmp	r0, #0
1005e37c:	d049      	beq.n	1005e412 <LL_phy_update+0x396>
1005e37e:	4638      	mov	r0, r7
1005e380:	4629      	mov	r1, r5
1005e382:	f000 f8b0 	bl	1005e4e6 <LL_reset_max_tx_data_frag>
1005e386:	e72b      	b.n	1005e1e0 <LL_phy_update+0x164>
1005e388:	2207      	movs	r2, #7
1005e38a:	9804      	ldr	r0, [sp, #16]
1005e38c:	461c      	mov	r4, r3
1005e38e:	e011      	b.n	1005e3b4 <LL_phy_update+0x338>
1005e390:	461c      	mov	r4, r3
1005e392:	7c70      	ldrb	r0, [r6, #17]
1005e394:	a905      	add	r1, sp, #20
1005e396:	7108      	strb	r0, [r1, #4]
1005e398:	9d04      	ldr	r5, [sp, #16]
1005e39a:	4628      	mov	r0, r5
1005e39c:	4632      	mov	r2, r6
1005e39e:	f000 f84c 	bl	1005e43a <LL_process_phy_upd_ind>
1005e3a2:	2800      	cmp	r0, #0
1005e3a4:	d046      	beq.n	1005e434 <LL_phy_update+0x3b8>
1005e3a6:	4628      	mov	r0, r5
1005e3a8:	4631      	mov	r1, r6
1005e3aa:	f000 f89c 	bl	1005e4e6 <LL_reset_max_tx_data_frag>
1005e3ae:	2101      	movs	r1, #1
1005e3b0:	2207      	movs	r2, #7
1005e3b2:	4628      	mov	r0, r5
1005e3b4:	f7fd fc3a 	bl	1005bc2c <LL_cpe_clr_active>
1005e3b8:	4623      	mov	r3, r4
1005e3ba:	4618      	mov	r0, r3
1005e3bc:	b007      	add	sp, #28
1005e3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005e3c0:	9301      	str	r3, [sp, #4]
1005e3c2:	9f04      	ldr	r7, [sp, #16]
1005e3c4:	4638      	mov	r0, r7
1005e3c6:	f7fb fdeb 	bl	10059fa0 <llc_conn_get_phy_upd_cntxt_per_p>
1005e3ca:	2118      	movs	r1, #24
1005e3cc:	70b1      	strb	r1, [r6, #2]
1005e3ce:	2105      	movs	r1, #5
1005e3d0:	7071      	strb	r1, [r6, #1]
1005e3d2:	2503      	movs	r5, #3
1005e3d4:	7035      	strb	r5, [r6, #0]
1005e3d6:	7a01      	ldrb	r1, [r0, #8]
1005e3d8:	70f1      	strb	r1, [r6, #3]
1005e3da:	7a40      	ldrb	r0, [r0, #9]
1005e3dc:	7130      	strb	r0, [r6, #4]
1005e3de:	1d71      	adds	r1, r6, #5
1005e3e0:	2202      	movs	r2, #2
1005e3e2:	4620      	mov	r0, r4
1005e3e4:	f004 fb54 	bl	10062a90 <char_copy>
1005e3e8:	9803      	ldr	r0, [sp, #12]
1005e3ea:	7405      	strb	r5, [r0, #16]
1005e3ec:	8820      	ldrh	r0, [r4, #0]
1005e3ee:	2800      	cmp	r0, #0
1005e3f0:	d100      	bne.n	1005e3f4 <LL_phy_update+0x378>
1005e3f2:	e6fa      	b.n	1005e1ea <LL_phy_update+0x16e>
1005e3f4:	2101      	movs	r1, #1
1005e3f6:	4638      	mov	r0, r7
1005e3f8:	f7fd fc60 	bl	1005bcbc <LL_cpe_set_tx_with_instant>
1005e3fc:	e015      	b.n	1005e42a <LL_phy_update+0x3ae>
1005e3fe:	2016      	movs	r0, #22
1005e400:	70f0      	strb	r0, [r6, #3]
1005e402:	2011      	movs	r0, #17
1005e404:	70b0      	strb	r0, [r6, #2]
1005e406:	2003      	movs	r0, #3
1005e408:	7070      	strb	r0, [r6, #1]
1005e40a:	7030      	strb	r0, [r6, #0]
1005e40c:	7c88      	ldrb	r0, [r1, #18]
1005e40e:	7130      	strb	r0, [r6, #4]
1005e410:	e7d3      	b.n	1005e3ba <LL_phy_update+0x33e>
1005e412:	9d02      	ldr	r5, [sp, #8]
1005e414:	2d01      	cmp	r5, #1
1005e416:	d104      	bne.n	1005e422 <LL_phy_update+0x3a6>
1005e418:	2101      	movs	r1, #1
1005e41a:	2202      	movs	r2, #2
1005e41c:	4638      	mov	r0, r7
1005e41e:	f7fd fc27 	bl	1005bc70 <LL_cpe_set_blocked>
1005e422:	4638      	mov	r0, r7
1005e424:	4629      	mov	r1, r5
1005e426:	f7fd fc58 	bl	1005bcda <LL_cpe_set_rx_with_instant>
1005e42a:	8860      	ldrh	r0, [r4, #2]
1005e42c:	2180      	movs	r1, #128	@ 0x80
1005e42e:	4301      	orrs	r1, r0
1005e430:	8061      	strh	r1, [r4, #2]
1005e432:	e6da      	b.n	1005e1ea <LL_phy_update+0x16e>
1005e434:	2004      	movs	r0, #4
1005e436:	7430      	strb	r0, [r6, #16]
1005e438:	e7be      	b.n	1005e3b8 <LL_phy_update+0x33c>

1005e43a <LL_process_phy_upd_ind>:
1005e43a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005e43c:	9201      	str	r2, [sp, #4]
1005e43e:	460c      	mov	r4, r1
1005e440:	4606      	mov	r6, r0
1005e442:	f7fb fd79 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005e446:	4607      	mov	r7, r0
1005e448:	4630      	mov	r0, r6
1005e44a:	f7fb fda9 	bl	10059fa0 <llc_conn_get_phy_upd_cntxt_per_p>
1005e44e:	4605      	mov	r5, r0
1005e450:	202c      	movs	r0, #44	@ 0x2c
1005e452:	9702      	str	r7, [sp, #8]
1005e454:	5c39      	ldrb	r1, [r7, r0]
1005e456:	2903      	cmp	r1, #3
1005e458:	d111      	bne.n	1005e47e <LL_process_phy_upd_ind+0x44>
1005e45a:	7827      	ldrb	r7, [r4, #0]
1005e45c:	2001      	movs	r0, #1
1005e45e:	2f04      	cmp	r7, #4
1005e460:	d82e      	bhi.n	1005e4c0 <LL_process_phy_upd_ind+0x86>
1005e462:	2f03      	cmp	r7, #3
1005e464:	d02c      	beq.n	1005e4c0 <LL_process_phy_upd_ind+0x86>
1005e466:	7862      	ldrb	r2, [r4, #1]
1005e468:	2a04      	cmp	r2, #4
1005e46a:	d829      	bhi.n	1005e4c0 <LL_process_phy_upd_ind+0x86>
1005e46c:	2a03      	cmp	r2, #3
1005e46e:	d027      	beq.n	1005e4c0 <LL_process_phy_upd_ind+0x86>
1005e470:	9b02      	ldr	r3, [sp, #8]
1005e472:	3398      	adds	r3, #152	@ 0x98
1005e474:	726a      	strb	r2, [r5, #9]
1005e476:	722f      	strb	r7, [r5, #8]
1005e478:	8862      	ldrh	r2, [r4, #2]
1005e47a:	801a      	strh	r2, [r3, #0]
1005e47c:	e000      	b.n	1005e480 <LL_process_phy_upd_ind+0x46>
1005e47e:	7a2f      	ldrb	r7, [r5, #8]
1005e480:	2f00      	cmp	r7, #0
1005e482:	d102      	bne.n	1005e48a <LL_process_phy_upd_ind+0x50>
1005e484:	7a6a      	ldrb	r2, [r5, #9]
1005e486:	2a00      	cmp	r2, #0
1005e488:	d016      	beq.n	1005e4b8 <LL_process_phy_upd_ind+0x7e>
1005e48a:	2000      	movs	r0, #0
1005e48c:	2903      	cmp	r1, #3
1005e48e:	d117      	bne.n	1005e4c0 <LL_process_phy_upd_ind+0x86>
1005e490:	7a69      	ldrb	r1, [r5, #9]
1005e492:	2900      	cmp	r1, #0
1005e494:	d014      	beq.n	1005e4c0 <LL_process_phy_upd_ind+0x86>
1005e496:	79ea      	ldrb	r2, [r5, #7]
1005e498:	9b01      	ldr	r3, [sp, #4]
1005e49a:	9300      	str	r3, [sp, #0]
1005e49c:	403a      	ands	r2, r7
1005e49e:	0752      	lsls	r2, r2, #29
1005e4a0:	0fd2      	lsrs	r2, r2, #31
1005e4a2:	4604      	mov	r4, r0
1005e4a4:	2301      	movs	r3, #1
1005e4a6:	4630      	mov	r0, r6
1005e4a8:	f000 fa04 	bl	1005e8b4 <LL_adjust_max_tx_data_frag>
1005e4ac:	7a69      	ldrb	r1, [r5, #9]
1005e4ae:	4630      	mov	r0, r6
1005e4b0:	f7fe fe35 	bl	1005d11e <LLC_connection_cte_response_pause_resume_ucfg_weak>
1005e4b4:	4620      	mov	r0, r4
1005e4b6:	e003      	b.n	1005e4c0 <LL_process_phy_upd_ind+0x86>
1005e4b8:	7921      	ldrb	r1, [r4, #4]
1005e4ba:	2001      	movs	r0, #1
1005e4bc:	2900      	cmp	r1, #0
1005e4be:	d000      	beq.n	1005e4c2 <LL_process_phy_upd_ind+0x88>
1005e4c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005e4c2:	4604      	mov	r4, r0
1005e4c4:	79e9      	ldrb	r1, [r5, #7]
1005e4c6:	2003      	movs	r0, #3
1005e4c8:	074a      	lsls	r2, r1, #29
1005e4ca:	d500      	bpl.n	1005e4ce <LL_process_phy_upd_ind+0x94>
1005e4cc:	4601      	mov	r1, r0
1005e4ce:	9a02      	ldr	r2, [sp, #8]
1005e4d0:	8f52      	ldrh	r2, [r2, #58]	@ 0x3a
1005e4d2:	79ab      	ldrb	r3, [r5, #6]
1005e4d4:	9100      	str	r1, [sp, #0]
1005e4d6:	0759      	lsls	r1, r3, #29
1005e4d8:	d500      	bpl.n	1005e4dc <LL_process_phy_upd_ind+0xa2>
1005e4da:	4603      	mov	r3, r0
1005e4dc:	2080      	movs	r0, #128	@ 0x80
1005e4de:	2100      	movs	r1, #0
1005e4e0:	f000 f9b2 	bl	1005e848 <hci_le_phy_update_complete_event_push>
1005e4e4:	e7e6      	b.n	1005e4b4 <LL_process_phy_upd_ind+0x7a>

1005e4e6 <LL_reset_max_tx_data_frag>:
1005e4e6:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005e4e8:	460d      	mov	r5, r1
1005e4ea:	4604      	mov	r4, r0
1005e4ec:	f7fb fd58 	bl	10059fa0 <llc_conn_get_phy_upd_cntxt_per_p>
1005e4f0:	2800      	cmp	r0, #0
1005e4f2:	d007      	beq.n	1005e504 <LL_reset_max_tx_data_frag+0x1e>
1005e4f4:	7981      	ldrb	r1, [r0, #6]
1005e4f6:	79c0      	ldrb	r0, [r0, #7]
1005e4f8:	2804      	cmp	r0, #4
1005e4fa:	d107      	bne.n	1005e50c <LL_reset_max_tx_data_frag+0x26>
1005e4fc:	4628      	mov	r0, r5
1005e4fe:	300c      	adds	r0, #12
1005e500:	2201      	movs	r2, #1
1005e502:	e005      	b.n	1005e510 <LL_reset_max_tx_data_frag+0x2a>
1005e504:	1da8      	adds	r0, r5, #6
1005e506:	2200      	movs	r2, #0
1005e508:	2101      	movs	r1, #1
1005e50a:	e001      	b.n	1005e510 <LL_reset_max_tx_data_frag+0x2a>
1005e50c:	1da8      	adds	r0, r5, #6
1005e50e:	2200      	movs	r2, #0
1005e510:	8800      	ldrh	r0, [r0, #0]
1005e512:	8068      	strh	r0, [r5, #2]
1005e514:	9500      	str	r5, [sp, #0]
1005e516:	2300      	movs	r3, #0
1005e518:	4620      	mov	r0, r4
1005e51a:	f000 f9cb 	bl	1005e8b4 <LL_adjust_max_tx_data_frag>
1005e51e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1005e520 <LL_compute_phy_upd_ind>:
1005e520:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005e522:	460d      	mov	r5, r1
1005e524:	4604      	mov	r4, r0
1005e526:	f7fb fd3b 	bl	10059fa0 <llc_conn_get_phy_upd_cntxt_per_p>
1005e52a:	4606      	mov	r6, r0
1005e52c:	7928      	ldrb	r0, [r5, #4]
1005e52e:	2801      	cmp	r0, #1
1005e530:	9002      	str	r0, [sp, #8]
1005e532:	d114      	bne.n	1005e55e <LL_compute_phy_upd_ind+0x3e>
1005e534:	2500      	movs	r5, #0
1005e536:	4620      	mov	r0, r4
1005e538:	4629      	mov	r1, r5
1005e53a:	f7fd fbb6 	bl	1005bcaa <LL_cpe_get_cntxt>
1005e53e:	4607      	mov	r7, r0
1005e540:	7d02      	ldrb	r2, [r0, #20]
1005e542:	7cc3      	ldrb	r3, [r0, #19]
1005e544:	4293      	cmp	r3, r2
1005e546:	9501      	str	r5, [sp, #4]
1005e548:	d105      	bne.n	1005e556 <LL_compute_phy_upd_ind+0x36>
1005e54a:	2b03      	cmp	r3, #3
1005e54c:	d302      	bcc.n	1005e554 <LL_compute_phy_upd_ind+0x34>
1005e54e:	2b04      	cmp	r3, #4
1005e550:	9d01      	ldr	r5, [sp, #4]
1005e552:	d100      	bne.n	1005e556 <LL_compute_phy_upd_ind+0x36>
1005e554:	2501      	movs	r5, #1
1005e556:	78f0      	ldrb	r0, [r6, #3]
1005e558:	4018      	ands	r0, r3
1005e55a:	78b3      	ldrb	r3, [r6, #2]
1005e55c:	e014      	b.n	1005e588 <LL_compute_phy_upd_ind+0x68>
1005e55e:	2101      	movs	r1, #1
1005e560:	4620      	mov	r0, r4
1005e562:	9101      	str	r1, [sp, #4]
1005e564:	f7fd fba1 	bl	1005bcaa <LL_cpe_get_cntxt>
1005e568:	4607      	mov	r7, r0
1005e56a:	78ab      	ldrb	r3, [r5, #2]
1005e56c:	7543      	strb	r3, [r0, #21]
1005e56e:	78ea      	ldrb	r2, [r5, #3]
1005e570:	7582      	strb	r2, [r0, #22]
1005e572:	2500      	movs	r5, #0
1005e574:	4293      	cmp	r3, r2
1005e576:	d104      	bne.n	1005e582 <LL_compute_phy_upd_ind+0x62>
1005e578:	2b03      	cmp	r3, #3
1005e57a:	d301      	bcc.n	1005e580 <LL_compute_phy_upd_ind+0x60>
1005e57c:	2b04      	cmp	r3, #4
1005e57e:	d100      	bne.n	1005e582 <LL_compute_phy_upd_ind+0x62>
1005e580:	2501      	movs	r5, #1
1005e582:	7d38      	ldrb	r0, [r7, #20]
1005e584:	4018      	ands	r0, r3
1005e586:	7cfb      	ldrb	r3, [r7, #19]
1005e588:	4013      	ands	r3, r2
1005e58a:	2d00      	cmp	r5, #0
1005e58c:	d002      	beq.n	1005e594 <LL_compute_phy_upd_ind+0x74>
1005e58e:	4283      	cmp	r3, r0
1005e590:	4603      	mov	r3, r0
1005e592:	d107      	bne.n	1005e5a4 <LL_compute_phy_upd_ind+0x84>
1005e594:	2100      	movs	r1, #0
1005e596:	2b00      	cmp	r3, #0
1005e598:	460a      	mov	r2, r1
1005e59a:	d00a      	beq.n	1005e5b2 <LL_compute_phy_upd_ind+0x92>
1005e59c:	07da      	lsls	r2, r3, #31
1005e59e:	d004      	beq.n	1005e5aa <LL_compute_phy_upd_ind+0x8a>
1005e5a0:	2201      	movs	r2, #1
1005e5a2:	e003      	b.n	1005e5ac <LL_compute_phy_upd_ind+0x8c>
1005e5a4:	2200      	movs	r2, #0
1005e5a6:	4611      	mov	r1, r2
1005e5a8:	e00d      	b.n	1005e5c6 <LL_compute_phy_upd_ind+0xa6>
1005e5aa:	2204      	movs	r2, #4
1005e5ac:	079b      	lsls	r3, r3, #30
1005e5ae:	d500      	bpl.n	1005e5b2 <LL_compute_phy_upd_ind+0x92>
1005e5b0:	2202      	movs	r2, #2
1005e5b2:	2800      	cmp	r0, #0
1005e5b4:	d007      	beq.n	1005e5c6 <LL_compute_phy_upd_ind+0xa6>
1005e5b6:	07c1      	lsls	r1, r0, #31
1005e5b8:	d001      	beq.n	1005e5be <LL_compute_phy_upd_ind+0x9e>
1005e5ba:	2101      	movs	r1, #1
1005e5bc:	e000      	b.n	1005e5c0 <LL_compute_phy_upd_ind+0xa0>
1005e5be:	2104      	movs	r1, #4
1005e5c0:	0780      	lsls	r0, r0, #30
1005e5c2:	d500      	bpl.n	1005e5c6 <LL_compute_phy_upd_ind+0xa6>
1005e5c4:	2102      	movs	r1, #2
1005e5c6:	79b3      	ldrb	r3, [r6, #6]
1005e5c8:	2000      	movs	r0, #0
1005e5ca:	429a      	cmp	r2, r3
1005e5cc:	4603      	mov	r3, r0
1005e5ce:	d000      	beq.n	1005e5d2 <LL_compute_phy_upd_ind+0xb2>
1005e5d0:	4613      	mov	r3, r2
1005e5d2:	7233      	strb	r3, [r6, #8]
1005e5d4:	79f2      	ldrb	r2, [r6, #7]
1005e5d6:	4291      	cmp	r1, r2
1005e5d8:	d000      	beq.n	1005e5dc <LL_compute_phy_upd_ind+0xbc>
1005e5da:	4608      	mov	r0, r1
1005e5dc:	7270      	strb	r0, [r6, #9]
1005e5de:	4620      	mov	r0, r4
1005e5e0:	f7fb fcaa 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005e5e4:	4605      	mov	r5, r0
1005e5e6:	7a70      	ldrb	r0, [r6, #9]
1005e5e8:	2800      	cmp	r0, #0
1005e5ea:	d102      	bne.n	1005e5f2 <LL_compute_phy_upd_ind+0xd2>
1005e5ec:	7a30      	ldrb	r0, [r6, #8]
1005e5ee:	2800      	cmp	r0, #0
1005e5f0:	d015      	beq.n	1005e61e <LL_compute_phy_upd_ind+0xfe>
1005e5f2:	4620      	mov	r0, r4
1005e5f4:	f7fe f922 	bl	1005c83c <llc_cpe_calc_instant>
1005e5f8:	2198      	movs	r1, #152	@ 0x98
1005e5fa:	5268      	strh	r0, [r5, r1]
1005e5fc:	7a31      	ldrb	r1, [r6, #8]
1005e5fe:	2900      	cmp	r1, #0
1005e600:	d010      	beq.n	1005e624 <LL_compute_phy_upd_ind+0x104>
1005e602:	79f0      	ldrb	r0, [r6, #7]
1005e604:	9700      	str	r7, [sp, #0]
1005e606:	4008      	ands	r0, r1
1005e608:	0740      	lsls	r0, r0, #29
1005e60a:	0fc2      	lsrs	r2, r0, #31
1005e60c:	2301      	movs	r3, #1
1005e60e:	4620      	mov	r0, r4
1005e610:	f000 f950 	bl	1005e8b4 <LL_adjust_max_tx_data_frag>
1005e614:	7a31      	ldrb	r1, [r6, #8]
1005e616:	4620      	mov	r0, r4
1005e618:	f7fe fd81 	bl	1005d11e <LLC_connection_cte_response_pause_resume_ucfg_weak>
1005e61c:	e002      	b.n	1005e624 <LL_compute_phy_upd_ind+0x104>
1005e61e:	2098      	movs	r0, #152	@ 0x98
1005e620:	2100      	movs	r1, #0
1005e622:	5229      	strh	r1, [r5, r0]
1005e624:	9802      	ldr	r0, [sp, #8]
1005e626:	2801      	cmp	r0, #1
1005e628:	d009      	beq.n	1005e63e <LL_compute_phy_upd_ind+0x11e>
1005e62a:	4620      	mov	r0, r4
1005e62c:	9d01      	ldr	r5, [sp, #4]
1005e62e:	4629      	mov	r1, r5
1005e630:	f7fd fb2e 	bl	1005bc90 <LL_cpe_set_prepare_tx_pdu>
1005e634:	2202      	movs	r2, #2
1005e636:	4620      	mov	r0, r4
1005e638:	4629      	mov	r1, r5
1005e63a:	f7fd fb19 	bl	1005bc70 <LL_cpe_set_blocked>
1005e63e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005e640 <LL_process_unknown_rsp_reject_ind_rcpt>:
1005e640:	b57c      	push	{r2, r3, r4, r5, r6, lr}
1005e642:	460d      	mov	r5, r1
1005e644:	4606      	mov	r6, r0
1005e646:	f7fb fcab 	bl	10059fa0 <llc_conn_get_phy_upd_cntxt_per_p>
1005e64a:	4604      	mov	r4, r0
1005e64c:	4630      	mov	r0, r6
1005e64e:	f7fb fc73 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005e652:	78a9      	ldrb	r1, [r5, #2]
1005e654:	2907      	cmp	r1, #7
1005e656:	d107      	bne.n	1005e668 <LL_process_unknown_rsp_reject_ind_rcpt+0x28>
1005e658:	21ff      	movs	r1, #255	@ 0xff
1005e65a:	3130      	adds	r1, #48	@ 0x30
1005e65c:	5c42      	ldrb	r2, [r0, r1]
1005e65e:	23f6      	movs	r3, #246	@ 0xf6
1005e660:	4013      	ands	r3, r2
1005e662:	5443      	strb	r3, [r0, r1]
1005e664:	211a      	movs	r1, #26
1005e666:	e000      	b.n	1005e66a <LL_process_unknown_rsp_reject_ind_rcpt+0x2a>
1005e668:	7869      	ldrb	r1, [r5, #1]
1005e66a:	78ea      	ldrb	r2, [r5, #3]
1005e66c:	2a00      	cmp	r2, #0
1005e66e:	d000      	beq.n	1005e672 <LL_process_unknown_rsp_reject_ind_rcpt+0x32>
1005e670:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
1005e672:	79e6      	ldrb	r6, [r4, #7]
1005e674:	2503      	movs	r5, #3
1005e676:	0772      	lsls	r2, r6, #29
1005e678:	d500      	bpl.n	1005e67c <LL_process_unknown_rsp_reject_ind_rcpt+0x3c>
1005e67a:	462e      	mov	r6, r5
1005e67c:	8f42      	ldrh	r2, [r0, #58]	@ 0x3a
1005e67e:	79a3      	ldrb	r3, [r4, #6]
1005e680:	9600      	str	r6, [sp, #0]
1005e682:	0758      	lsls	r0, r3, #29
1005e684:	d500      	bpl.n	1005e688 <LL_process_unknown_rsp_reject_ind_rcpt+0x48>
1005e686:	462b      	mov	r3, r5
1005e688:	2080      	movs	r0, #128	@ 0x80
1005e68a:	f000 f8dd 	bl	1005e848 <hci_le_phy_update_complete_event_push>
1005e68e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

1005e690 <LL_process_phy_req_rcpt>:
1005e690:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e692:	b085      	sub	sp, #20
1005e694:	460f      	mov	r7, r1
1005e696:	4604      	mov	r4, r0
1005e698:	f7fb fc4e 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005e69c:	4605      	mov	r5, r0
1005e69e:	2100      	movs	r1, #0
1005e6a0:	4620      	mov	r0, r4
1005e6a2:	9102      	str	r1, [sp, #8]
1005e6a4:	f7fd fb01 	bl	1005bcaa <LL_cpe_get_cntxt>
1005e6a8:	4606      	mov	r6, r0
1005e6aa:	2001      	movs	r0, #1
1005e6ac:	9001      	str	r0, [sp, #4]
1005e6ae:	7470      	strb	r0, [r6, #17]
1005e6b0:	78b8      	ldrb	r0, [r7, #2]
1005e6b2:	74f0      	strb	r0, [r6, #19]
1005e6b4:	78f8      	ldrb	r0, [r7, #3]
1005e6b6:	7530      	strb	r0, [r6, #20]
1005e6b8:	20b6      	movs	r0, #182	@ 0xb6
1005e6ba:	5a28      	ldrh	r0, [r5, r0]
1005e6bc:	81f0      	strh	r0, [r6, #14]
1005e6be:	a803      	add	r0, sp, #12
1005e6c0:	7104      	strb	r4, [r0, #4]
1005e6c2:	9603      	str	r6, [sp, #12]
1005e6c4:	f7ff fc90 	bl	1005dfe8 <LL_phy_upd_compute_data_PDU_length_params_ucfg_weak>
1005e6c8:	202c      	movs	r0, #44	@ 0x2c
1005e6ca:	5c28      	ldrb	r0, [r5, r0]
1005e6cc:	352c      	adds	r5, #44	@ 0x2c
1005e6ce:	2802      	cmp	r0, #2
1005e6d0:	d108      	bne.n	1005e6e4 <LL_process_phy_req_rcpt+0x54>
1005e6d2:	7c70      	ldrb	r0, [r6, #17]
1005e6d4:	7138      	strb	r0, [r7, #4]
1005e6d6:	4620      	mov	r0, r4
1005e6d8:	4639      	mov	r1, r7
1005e6da:	f7ff ff21 	bl	1005e520 <LL_compute_phy_upd_ind>
1005e6de:	9802      	ldr	r0, [sp, #8]
1005e6e0:	7430      	strb	r0, [r6, #16]
1005e6e2:	e025      	b.n	1005e730 <LL_process_phy_req_rcpt+0xa0>
1005e6e4:	4620      	mov	r0, r4
1005e6e6:	f7fb fc5b 	bl	10059fa0 <llc_conn_get_phy_upd_cntxt_per_p>
1005e6ea:	7881      	ldrb	r1, [r0, #2]
1005e6ec:	7571      	strb	r1, [r6, #21]
1005e6ee:	78c7      	ldrb	r7, [r0, #3]
1005e6f0:	75b7      	strb	r7, [r6, #22]
1005e6f2:	7d33      	ldrb	r3, [r6, #20]
1005e6f4:	400b      	ands	r3, r1
1005e6f6:	b2db      	uxtb	r3, r3
1005e6f8:	2b00      	cmp	r3, #0
1005e6fa:	d019      	beq.n	1005e730 <LL_process_phy_req_rcpt+0xa0>
1005e6fc:	7981      	ldrb	r1, [r0, #6]
1005e6fe:	428b      	cmp	r3, r1
1005e700:	d016      	beq.n	1005e730 <LL_process_phy_req_rcpt+0xa0>
1005e702:	07d9      	lsls	r1, r3, #31
1005e704:	d002      	beq.n	1005e70c <LL_process_phy_req_rcpt+0x7c>
1005e706:	9a01      	ldr	r2, [sp, #4]
1005e708:	4611      	mov	r1, r2
1005e70a:	e001      	b.n	1005e710 <LL_process_phy_req_rcpt+0x80>
1005e70c:	2102      	movs	r1, #2
1005e70e:	9a01      	ldr	r2, [sp, #4]
1005e710:	075b      	lsls	r3, r3, #29
1005e712:	d500      	bpl.n	1005e716 <LL_process_phy_req_rcpt+0x86>
1005e714:	2104      	movs	r1, #4
1005e716:	7cf3      	ldrb	r3, [r6, #19]
1005e718:	401f      	ands	r7, r3
1005e71a:	077b      	lsls	r3, r7, #29
1005e71c:	d403      	bmi.n	1005e726 <LL_process_phy_req_rcpt+0x96>
1005e71e:	79c0      	ldrb	r0, [r0, #7]
1005e720:	1f00      	subs	r0, r0, #4
1005e722:	4242      	negs	r2, r0
1005e724:	4142      	adcs	r2, r0
1005e726:	9600      	str	r6, [sp, #0]
1005e728:	2301      	movs	r3, #1
1005e72a:	4620      	mov	r0, r4
1005e72c:	f000 f8c2 	bl	1005e8b4 <LL_adjust_max_tx_data_frag>
1005e730:	2600      	movs	r6, #0
1005e732:	4620      	mov	r0, r4
1005e734:	4631      	mov	r1, r6
1005e736:	f7fd faab 	bl	1005bc90 <LL_cpe_set_prepare_tx_pdu>
1005e73a:	2207      	movs	r2, #7
1005e73c:	2301      	movs	r3, #1
1005e73e:	4620      	mov	r0, r4
1005e740:	4631      	mov	r1, r6
1005e742:	f7fd fa5c 	bl	1005bbfe <LL_cpe_set_active>
1005e746:	7828      	ldrb	r0, [r5, #0]
1005e748:	2802      	cmp	r0, #2
1005e74a:	d104      	bne.n	1005e756 <LL_process_phy_req_rcpt+0xc6>
1005e74c:	2100      	movs	r1, #0
1005e74e:	2202      	movs	r2, #2
1005e750:	4620      	mov	r0, r4
1005e752:	f7fd fa8d 	bl	1005bc70 <LL_cpe_set_blocked>
1005e756:	b005      	add	sp, #20
1005e758:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1005e75c <LL_phy_upd_evt_pending_check_isr>:
1005e75c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e75e:	b087      	sub	sp, #28
1005e760:	4605      	mov	r5, r0
1005e762:	f7fb fbe9 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005e766:	4604      	mov	r4, r0
1005e768:	4628      	mov	r0, r5
1005e76a:	f7fb fc19 	bl	10059fa0 <llc_conn_get_phy_upd_cntxt_per_p>
1005e76e:	4605      	mov	r5, r0
1005e770:	209a      	movs	r0, #154	@ 0x9a
1005e772:	5a26      	ldrh	r6, [r4, r0]
1005e774:	05b0      	lsls	r0, r6, #22
1005e776:	4627      	mov	r7, r4
1005e778:	379a      	adds	r7, #154	@ 0x9a
1005e77a:	2800      	cmp	r0, #0
1005e77c:	d545      	bpl.n	1005e80a <LL_phy_upd_evt_pending_check_isr+0xae>
1005e77e:	482e      	ldr	r0, [pc, #184]	@ (1005e838 <__arm_cp.15_0>)
1005e780:	6800      	ldr	r0, [r0, #0]
1005e782:	213d      	movs	r1, #61	@ 0x3d
1005e784:	5c41      	ldrb	r1, [r0, r1]
1005e786:	0689      	lsls	r1, r1, #26
1005e788:	d53b      	bpl.n	1005e802 <LL_phy_upd_evt_pending_check_isr+0xa6>
1005e78a:	303d      	adds	r0, #61	@ 0x3d
1005e78c:	7a40      	ldrb	r0, [r0, #9]
1005e78e:	0640      	lsls	r0, r0, #25
1005e790:	d537      	bpl.n	1005e802 <LL_phy_upd_evt_pending_check_isr+0xa6>
1005e792:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
1005e794:	9002      	str	r0, [sp, #8]
1005e796:	8bf8      	ldrh	r0, [r7, #30]
1005e798:	9003      	str	r0, [sp, #12]
1005e79a:	8c38      	ldrh	r0, [r7, #32]
1005e79c:	9004      	str	r0, [sp, #16]
1005e79e:	8b78      	ldrh	r0, [r7, #26]
1005e7a0:	9005      	str	r0, [sp, #20]
1005e7a2:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
1005e7a4:	9006      	str	r0, [sp, #24]
1005e7a6:	4825      	ldr	r0, [pc, #148]	@ (1005e83c <__arm_cp.15_1>)
1005e7a8:	6800      	ldr	r0, [r0, #0]
1005e7aa:	6900      	ldr	r0, [r0, #16]
1005e7ac:	2180      	movs	r1, #128	@ 0x80
1005e7ae:	2226      	movs	r2, #38	@ 0x26
1005e7b0:	2304      	movs	r3, #4
1005e7b2:	9301      	str	r3, [sp, #4]
1005e7b4:	f7f6 fc9a 	bl	100550ec <aci_event_fifo_push_header>
1005e7b8:	2800      	cmp	r0, #0
1005e7ba:	d022      	beq.n	1005e802 <LL_phy_upd_evt_pending_check_isr+0xa6>
1005e7bc:	4601      	mov	r1, r0
1005e7be:	9a02      	ldr	r2, [sp, #8]
1005e7c0:	7402      	strb	r2, [r0, #16]
1005e7c2:	9b03      	ldr	r3, [sp, #12]
1005e7c4:	7383      	strb	r3, [r0, #14]
1005e7c6:	9804      	ldr	r0, [sp, #16]
1005e7c8:	7308      	strb	r0, [r1, #12]
1005e7ca:	9805      	ldr	r0, [sp, #20]
1005e7cc:	7288      	strb	r0, [r1, #10]
1005e7ce:	9806      	ldr	r0, [sp, #24]
1005e7d0:	7208      	strb	r0, [r1, #8]
1005e7d2:	2007      	movs	r0, #7
1005e7d4:	71c8      	strb	r0, [r1, #7]
1005e7d6:	200b      	movs	r0, #11
1005e7d8:	7188      	strb	r0, [r1, #6]
1005e7da:	203e      	movs	r0, #62	@ 0x3e
1005e7dc:	7148      	strb	r0, [r1, #5]
1005e7de:	9801      	ldr	r0, [sp, #4]
1005e7e0:	7108      	strb	r0, [r1, #4]
1005e7e2:	0a10      	lsrs	r0, r2, #8
1005e7e4:	7448      	strb	r0, [r1, #17]
1005e7e6:	0a18      	lsrs	r0, r3, #8
1005e7e8:	73c8      	strb	r0, [r1, #15]
1005e7ea:	9804      	ldr	r0, [sp, #16]
1005e7ec:	0a00      	lsrs	r0, r0, #8
1005e7ee:	7348      	strb	r0, [r1, #13]
1005e7f0:	9805      	ldr	r0, [sp, #20]
1005e7f2:	0a00      	lsrs	r0, r0, #8
1005e7f4:	72c8      	strb	r0, [r1, #11]
1005e7f6:	9806      	ldr	r0, [sp, #24]
1005e7f8:	0a00      	lsrs	r0, r0, #8
1005e7fa:	7248      	strb	r0, [r1, #9]
1005e7fc:	2080      	movs	r0, #128	@ 0x80
1005e7fe:	f7f6 fd12 	bl	10055226 <aci_event_fifo_push>
1005e802:	8838      	ldrh	r0, [r7, #0]
1005e804:	490e      	ldr	r1, [pc, #56]	@ (1005e840 <__arm_cp.15_2>)
1005e806:	4001      	ands	r1, r0
1005e808:	8039      	strh	r1, [r7, #0]
1005e80a:	05f0      	lsls	r0, r6, #23
1005e80c:	d512      	bpl.n	1005e834 <LL_phy_upd_evt_pending_check_isr+0xd8>
1005e80e:	79e9      	ldrb	r1, [r5, #7]
1005e810:	2003      	movs	r0, #3
1005e812:	074a      	lsls	r2, r1, #29
1005e814:	d500      	bpl.n	1005e818 <LL_phy_upd_evt_pending_check_isr+0xbc>
1005e816:	4601      	mov	r1, r0
1005e818:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
1005e81a:	79ab      	ldrb	r3, [r5, #6]
1005e81c:	9100      	str	r1, [sp, #0]
1005e81e:	0759      	lsls	r1, r3, #29
1005e820:	d500      	bpl.n	1005e824 <LL_phy_upd_evt_pending_check_isr+0xc8>
1005e822:	4603      	mov	r3, r0
1005e824:	2080      	movs	r0, #128	@ 0x80
1005e826:	2100      	movs	r1, #0
1005e828:	f000 f80e 	bl	1005e848 <hci_le_phy_update_complete_event_push>
1005e82c:	8838      	ldrh	r0, [r7, #0]
1005e82e:	4905      	ldr	r1, [pc, #20]	@ (1005e844 <__arm_cp.15_3>)
1005e830:	4001      	ands	r1, r0
1005e832:	8039      	strh	r1, [r7, #0]
1005e834:	b007      	add	sp, #28
1005e836:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005e838 <__arm_cp.15_0>:
1005e838:	20002470 	.word	0x20002470

1005e83c <__arm_cp.15_1>:
1005e83c:	20002420 	.word	0x20002420

1005e840 <__arm_cp.15_2>:
1005e840:	0000fdff 	.word	0x0000fdff

1005e844 <__arm_cp.15_3>:
1005e844:	0000feff 	.word	0x0000feff

1005e848 <hci_le_phy_update_complete_event_push>:
1005e848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005e84a:	4604      	mov	r4, r0
1005e84c:	06c0      	lsls	r0, r0, #27
1005e84e:	d42c      	bmi.n	1005e8aa <hci_le_phy_update_complete_event_push+0x62>
1005e850:	460f      	mov	r7, r1
1005e852:	4816      	ldr	r0, [pc, #88]	@ (1005e8ac <__arm_cp.16_0>)
1005e854:	6800      	ldr	r0, [r0, #0]
1005e856:	213d      	movs	r1, #61	@ 0x3d
1005e858:	5c41      	ldrb	r1, [r0, r1]
1005e85a:	0689      	lsls	r1, r1, #26
1005e85c:	d525      	bpl.n	1005e8aa <hci_le_phy_update_complete_event_push+0x62>
1005e85e:	303d      	adds	r0, #61	@ 0x3d
1005e860:	7a80      	ldrb	r0, [r0, #10]
1005e862:	0700      	lsls	r0, r0, #28
1005e864:	d521      	bpl.n	1005e8aa <hci_le_phy_update_complete_event_push+0x62>
1005e866:	461e      	mov	r6, r3
1005e868:	4615      	mov	r5, r2
1005e86a:	4811      	ldr	r0, [pc, #68]	@ (1005e8b0 <__arm_cp.16_1>)
1005e86c:	6800      	ldr	r0, [r0, #0]
1005e86e:	0761      	lsls	r1, r4, #29
1005e870:	0ec9      	lsrs	r1, r1, #27
1005e872:	1840      	adds	r0, r0, r1
1005e874:	6900      	ldr	r0, [r0, #16]
1005e876:	2227      	movs	r2, #39	@ 0x27
1005e878:	2303      	movs	r3, #3
1005e87a:	4621      	mov	r1, r4
1005e87c:	f7f6 fc36 	bl	100550ec <aci_event_fifo_push_header>
1005e880:	2800      	cmp	r0, #0
1005e882:	d012      	beq.n	1005e8aa <hci_le_phy_update_complete_event_push+0x62>
1005e884:	4601      	mov	r1, r0
1005e886:	9806      	ldr	r0, [sp, #24]
1005e888:	724d      	strb	r5, [r1, #9]
1005e88a:	7308      	strb	r0, [r1, #12]
1005e88c:	72ce      	strb	r6, [r1, #11]
1005e88e:	720f      	strb	r7, [r1, #8]
1005e890:	200c      	movs	r0, #12
1005e892:	71c8      	strb	r0, [r1, #7]
1005e894:	2006      	movs	r0, #6
1005e896:	7188      	strb	r0, [r1, #6]
1005e898:	203e      	movs	r0, #62	@ 0x3e
1005e89a:	7148      	strb	r0, [r1, #5]
1005e89c:	2004      	movs	r0, #4
1005e89e:	7108      	strb	r0, [r1, #4]
1005e8a0:	0a28      	lsrs	r0, r5, #8
1005e8a2:	7288      	strb	r0, [r1, #10]
1005e8a4:	4620      	mov	r0, r4
1005e8a6:	f7f6 fcbe 	bl	10055226 <aci_event_fifo_push>
1005e8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005e8ac <__arm_cp.16_0>:
1005e8ac:	20002470 	.word	0x20002470

1005e8b0 <__arm_cp.16_1>:
1005e8b0:	20002420 	.word	0x20002420

1005e8b4 <LL_adjust_max_tx_data_frag>:
1005e8b4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005e8b6:	9302      	str	r3, [sp, #8]
1005e8b8:	9201      	str	r2, [sp, #4]
1005e8ba:	460e      	mov	r6, r1
1005e8bc:	4605      	mov	r5, r0
1005e8be:	f7fb fb3b 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005e8c2:	4604      	mov	r4, r0
1005e8c4:	4607      	mov	r7, r0
1005e8c6:	34b4      	adds	r4, #180	@ 0xb4
1005e8c8:	4628      	mov	r0, r5
1005e8ca:	f7fb fb69 	bl	10059fa0 <llc_conn_get_phy_upd_cntxt_per_p>
1005e8ce:	9908      	ldr	r1, [sp, #32]
1005e8d0:	2e04      	cmp	r6, #4
1005e8d2:	d106      	bne.n	1005e8e2 <LL_adjust_max_tx_data_frag+0x2e>
1005e8d4:	2800      	cmp	r0, #0
1005e8d6:	d004      	beq.n	1005e8e2 <LL_adjust_max_tx_data_frag+0x2e>
1005e8d8:	9a01      	ldr	r2, [sp, #4]
1005e8da:	2a00      	cmp	r2, #0
1005e8dc:	d00c      	beq.n	1005e8f8 <LL_adjust_max_tx_data_frag+0x44>
1005e8de:	220a      	movs	r2, #10
1005e8e0:	e00b      	b.n	1005e8fa <LL_adjust_max_tx_data_frag+0x46>
1005e8e2:	8888      	ldrh	r0, [r1, #4]
1005e8e4:	8008      	strh	r0, [r1, #0]
1005e8e6:	2e01      	cmp	r6, #1
1005e8e8:	d102      	bne.n	1005e8f0 <LL_adjust_max_tx_data_frag+0x3c>
1005e8ea:	08c0      	lsrs	r0, r0, #3
1005e8ec:	380e      	subs	r0, #14
1005e8ee:	e001      	b.n	1005e8f4 <LL_adjust_max_tx_data_frag+0x40>
1005e8f0:	0880      	lsrs	r0, r0, #2
1005e8f2:	380f      	subs	r0, #15
1005e8f4:	9e02      	ldr	r6, [sp, #8]
1005e8f6:	e00f      	b.n	1005e918 <LL_adjust_max_tx_data_frag+0x64>
1005e8f8:	2208      	movs	r2, #8
1005e8fa:	9e02      	ldr	r6, [sp, #8]
1005e8fc:	5a8a      	ldrh	r2, [r1, r2]
1005e8fe:	800a      	strh	r2, [r1, #0]
1005e900:	8800      	ldrh	r0, [r0, #0]
1005e902:	2802      	cmp	r0, #2
1005e904:	d001      	beq.n	1005e90a <LL_adjust_max_tx_data_frag+0x56>
1005e906:	2001      	movs	r0, #1
1005e908:	e000      	b.n	1005e90c <LL_adjust_max_tx_data_frag+0x58>
1005e90a:	2003      	movs	r0, #3
1005e90c:	4b0b      	ldr	r3, [pc, #44]	@ (1005e93c <__arm_cp.20_0>)
1005e90e:	18d2      	adds	r2, r2, r3
1005e910:	40c2      	lsrs	r2, r0
1005e912:	480b      	ldr	r0, [pc, #44]	@ (1005e940 <__arm_cp.20_1>)
1005e914:	1810      	adds	r0, r2, r0
1005e916:	08c0      	lsrs	r0, r0, #3
1005e918:	b283      	uxth	r3, r0
1005e91a:	8822      	ldrh	r2, [r4, #0]
1005e91c:	429a      	cmp	r2, r3
1005e91e:	d300      	bcc.n	1005e922 <LL_adjust_max_tx_data_frag+0x6e>
1005e920:	4602      	mov	r2, r0
1005e922:	2e00      	cmp	r6, #0
1005e924:	d003      	beq.n	1005e92e <LL_adjust_max_tx_data_frag+0x7a>
1005e926:	b293      	uxth	r3, r2
1005e928:	89c8      	ldrh	r0, [r1, #14]
1005e92a:	4298      	cmp	r0, r3
1005e92c:	d300      	bcc.n	1005e930 <LL_adjust_max_tx_data_frag+0x7c>
1005e92e:	4610      	mov	r0, r2
1005e930:	8060      	strh	r0, [r4, #2]
1005e932:	4638      	mov	r0, r7
1005e934:	f7fb fdca 	bl	1005a4cc <llc_conn_guard_time_for_close_conn_event>
1005e938:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005e93a:	46c0      	nop			@ (mov r8, r8)

1005e93c <__arm_cp.20_0>:
1005e93c:	fffffe88 	.word	0xfffffe88

1005e940 <__arm_cp.20_1>:
1005e940:	0007ffb5 	.word	0x0007ffb5

1005e944 <LL_version_exchange>:
1005e944:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e946:	b087      	sub	sp, #28
1005e948:	461f      	mov	r7, r3
1005e94a:	4616      	mov	r6, r2
1005e94c:	460c      	mov	r4, r1
1005e94e:	4605      	mov	r5, r0
1005e950:	f7fd f9ab 	bl	1005bcaa <LL_cpe_get_cntxt>
1005e954:	9004      	str	r0, [sp, #16]
1005e956:	4628      	mov	r0, r5
1005e958:	f7fb faee 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005e95c:	22ff      	movs	r2, #255	@ 0xff
1005e95e:	2e06      	cmp	r6, #6
1005e960:	d900      	bls.n	1005e964 <LL_version_exchange+0x20>
1005e962:	e0b2      	b.n	1005eaca <LL_version_exchange+0x186>
1005e964:	4603      	mov	r3, r0
1005e966:	46c0      	nop			@ (mov r8, r8)
1005e968:	447e      	add	r6, pc
1005e96a:	7936      	ldrb	r6, [r6, #4]
1005e96c:	0076      	lsls	r6, r6, #1
1005e96e:	44b7      	add	pc, r6
1005e970:	3aac0e03 	.word	0x3aac0e03
1005e974:	0053acac 	.word	0x0053acac
1005e978:	2c01      	cmp	r4, #1
1005e97a:	d15c      	bne.n	1005ea36 <LL_version_exchange+0xf2>
1005e97c:	208c      	movs	r0, #140	@ 0x8c
1005e97e:	5818      	ldr	r0, [r3, r0]
1005e980:	0601      	lsls	r1, r0, #24
1005e982:	338c      	adds	r3, #140	@ 0x8c
1005e984:	2900      	cmp	r1, #0
1005e986:	9904      	ldr	r1, [sp, #16]
1005e988:	d460      	bmi.n	1005ea4c <LL_version_exchange+0x108>
1005e98a:	220c      	movs	r2, #12
1005e98c:	e06c      	b.n	1005ea68 <LL_version_exchange+0x124>
1005e98e:	9302      	str	r3, [sp, #8]
1005e990:	9203      	str	r2, [sp, #12]
1005e992:	4628      	mov	r0, r5
1005e994:	f000 f8d4 	bl	1005eb40 <LL_conn_get_version_exchange_cached>
1005e998:	2800      	cmp	r0, #0
1005e99a:	d000      	beq.n	1005e99e <LL_version_exchange+0x5a>
1005e99c:	e094      	b.n	1005eac8 <LL_version_exchange+0x184>
1005e99e:	1cf8      	adds	r0, r7, #3
1005e9a0:	2205      	movs	r2, #5
1005e9a2:	9201      	str	r2, [sp, #4]
1005e9a4:	9e04      	ldr	r6, [sp, #16]
1005e9a6:	4631      	mov	r1, r6
1005e9a8:	f004 f872 	bl	10062a90 <char_copy>
1005e9ac:	9f02      	ldr	r7, [sp, #8]
1005e9ae:	4639      	mov	r1, r7
1005e9b0:	313c      	adds	r1, #60	@ 0x3c
1005e9b2:	4630      	mov	r0, r6
1005e9b4:	9a01      	ldr	r2, [sp, #4]
1005e9b6:	f004 f86b 	bl	10062a90 <char_copy>
1005e9ba:	208c      	movs	r0, #140	@ 0x8c
1005e9bc:	5838      	ldr	r0, [r7, r0]
1005e9be:	0642      	lsls	r2, r0, #25
1005e9c0:	4639      	mov	r1, r7
1005e9c2:	318c      	adds	r1, #140	@ 0x8c
1005e9c4:	2a00      	cmp	r2, #0
1005e9c6:	d46e      	bmi.n	1005eaa6 <LL_version_exchange+0x162>
1005e9c8:	2201      	movs	r2, #1
1005e9ca:	0212      	lsls	r2, r2, #8
1005e9cc:	4310      	orrs	r0, r2
1005e9ce:	6008      	str	r0, [r1, #0]
1005e9d0:	4628      	mov	r0, r5
1005e9d2:	4621      	mov	r1, r4
1005e9d4:	f7fd f95c 	bl	1005bc90 <LL_cpe_set_prepare_tx_pdu>
1005e9d8:	2205      	movs	r2, #5
1005e9da:	2300      	movs	r3, #0
1005e9dc:	4628      	mov	r0, r5
1005e9de:	4621      	mov	r1, r4
1005e9e0:	f7fd f90d 	bl	1005bbfe <LL_cpe_set_active>
1005e9e4:	e070      	b.n	1005eac8 <LL_version_exchange+0x184>
1005e9e6:	78b8      	ldrb	r0, [r7, #2]
1005e9e8:	280c      	cmp	r0, #12
1005e9ea:	d16e      	bne.n	1005eaca <LL_version_exchange+0x186>
1005e9ec:	1cf8      	adds	r0, r7, #3
1005e9ee:	2605      	movs	r6, #5
1005e9f0:	9f04      	ldr	r7, [sp, #16]
1005e9f2:	4639      	mov	r1, r7
1005e9f4:	9203      	str	r2, [sp, #12]
1005e9f6:	4632      	mov	r2, r6
1005e9f8:	9302      	str	r3, [sp, #8]
1005e9fa:	f004 f849 	bl	10062a90 <char_copy>
1005e9fe:	4628      	mov	r0, r5
1005ea00:	4621      	mov	r1, r4
1005ea02:	4632      	mov	r2, r6
1005ea04:	f7fd f912 	bl	1005bc2c <LL_cpe_clr_active>
1005ea08:	9802      	ldr	r0, [sp, #8]
1005ea0a:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
1005ea0c:	4639      	mov	r1, r7
1005ea0e:	f000 f86f 	bl	1005eaf0 <hci_read_remote_version_information_complete_event_push>
1005ea12:	4628      	mov	r0, r5
1005ea14:	4639      	mov	r1, r7
1005ea16:	e055      	b.n	1005eac4 <LL_version_exchange+0x180>
1005ea18:	4616      	mov	r6, r2
1005ea1a:	a806      	add	r0, sp, #24
1005ea1c:	2130      	movs	r1, #48	@ 0x30
1005ea1e:	8001      	strh	r1, [r0, #0]
1005ea20:	2c01      	cmp	r4, #1
1005ea22:	d12a      	bne.n	1005ea7a <LL_version_exchange+0x136>
1005ea24:	208c      	movs	r0, #140	@ 0x8c
1005ea26:	5818      	ldr	r0, [r3, r0]
1005ea28:	05c1      	lsls	r1, r0, #23
1005ea2a:	d421      	bmi.n	1005ea70 <LL_version_exchange+0x12c>
1005ea2c:	338c      	adds	r3, #140	@ 0x8c
1005ea2e:	2140      	movs	r1, #64	@ 0x40
1005ea30:	4308      	orrs	r0, r1
1005ea32:	6018      	str	r0, [r3, #0]
1005ea34:	e021      	b.n	1005ea7a <LL_version_exchange+0x136>
1005ea36:	4616      	mov	r6, r2
1005ea38:	2205      	movs	r2, #5
1005ea3a:	4628      	mov	r0, r5
1005ea3c:	4621      	mov	r1, r4
1005ea3e:	f7fd f8f5 	bl	1005bc2c <LL_cpe_clr_active>
1005ea42:	4628      	mov	r0, r5
1005ea44:	9904      	ldr	r1, [sp, #16]
1005ea46:	f000 f843 	bl	1005ead0 <LL_conn_version_exchange_set_cached>
1005ea4a:	e02a      	b.n	1005eaa2 <LL_version_exchange+0x15e>
1005ea4c:	4628      	mov	r0, r5
1005ea4e:	461c      	mov	r4, r3
1005ea50:	f000 f83e 	bl	1005ead0 <LL_conn_version_exchange_set_cached>
1005ea54:	2101      	movs	r1, #1
1005ea56:	2205      	movs	r2, #5
1005ea58:	4628      	mov	r0, r5
1005ea5a:	f7fd f8e7 	bl	1005bc2c <LL_cpe_clr_active>
1005ea5e:	4623      	mov	r3, r4
1005ea60:	6820      	ldr	r0, [r4, #0]
1005ea62:	2180      	movs	r1, #128	@ 0x80
1005ea64:	4388      	bics	r0, r1
1005ea66:	22ff      	movs	r2, #255	@ 0xff
1005ea68:	2140      	movs	r1, #64	@ 0x40
1005ea6a:	4388      	bics	r0, r1
1005ea6c:	6018      	str	r0, [r3, #0]
1005ea6e:	e02c      	b.n	1005eaca <LL_version_exchange+0x186>
1005ea70:	2101      	movs	r1, #1
1005ea72:	2205      	movs	r2, #5
1005ea74:	4628      	mov	r0, r5
1005ea76:	f7fd f8d9 	bl	1005bc2c <LL_cpe_clr_active>
1005ea7a:	200d      	movs	r0, #13
1005ea7c:	70f8      	strb	r0, [r7, #3]
1005ea7e:	200c      	movs	r0, #12
1005ea80:	70b8      	strb	r0, [r7, #2]
1005ea82:	2006      	movs	r0, #6
1005ea84:	7078      	strb	r0, [r7, #1]
1005ea86:	2503      	movs	r5, #3
1005ea88:	703d      	strb	r5, [r7, #0]
1005ea8a:	1d39      	adds	r1, r7, #4
1005ea8c:	a806      	add	r0, sp, #24
1005ea8e:	2402      	movs	r4, #2
1005ea90:	4622      	mov	r2, r4
1005ea92:	f003 fffd 	bl	10062a90 <char_copy>
1005ea96:	a805      	add	r0, sp, #20
1005ea98:	8005      	strh	r5, [r0, #0]
1005ea9a:	1db9      	adds	r1, r7, #6
1005ea9c:	4622      	mov	r2, r4
1005ea9e:	f003 fff7 	bl	10062a90 <char_copy>
1005eaa2:	4632      	mov	r2, r6
1005eaa4:	e011      	b.n	1005eaca <LL_version_exchange+0x186>
1005eaa6:	2280      	movs	r2, #128	@ 0x80
1005eaa8:	4310      	orrs	r0, r2
1005eaaa:	6008      	str	r0, [r1, #0]
1005eaac:	2205      	movs	r2, #5
1005eaae:	4628      	mov	r0, r5
1005eab0:	4621      	mov	r1, r4
1005eab2:	463c      	mov	r4, r7
1005eab4:	f7fd f8ba 	bl	1005bc2c <LL_cpe_clr_active>
1005eab8:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
1005eaba:	4631      	mov	r1, r6
1005eabc:	f000 f818 	bl	1005eaf0 <hci_read_remote_version_information_complete_event_push>
1005eac0:	4628      	mov	r0, r5
1005eac2:	4631      	mov	r1, r6
1005eac4:	f000 f804 	bl	1005ead0 <LL_conn_version_exchange_set_cached>
1005eac8:	9a03      	ldr	r2, [sp, #12]
1005eaca:	4610      	mov	r0, r2
1005eacc:	b007      	add	sp, #28
1005eace:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ead0 <LL_conn_version_exchange_set_cached>:
1005ead0:	b510      	push	{r4, lr}
1005ead2:	460c      	mov	r4, r1
1005ead4:	f7fb fa30 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005ead8:	4601      	mov	r1, r0
1005eada:	208c      	movs	r0, #140	@ 0x8c
1005eadc:	580a      	ldr	r2, [r1, r0]
1005eade:	2308      	movs	r3, #8
1005eae0:	4313      	orrs	r3, r2
1005eae2:	500b      	str	r3, [r1, r0]
1005eae4:	313c      	adds	r1, #60	@ 0x3c
1005eae6:	2205      	movs	r2, #5
1005eae8:	4620      	mov	r0, r4
1005eaea:	f003 ffd1 	bl	10062a90 <char_copy>
1005eaee:	bd10      	pop	{r4, pc}

1005eaf0 <hci_read_remote_version_information_complete_event_push>:
1005eaf0:	b570      	push	{r4, r5, r6, lr}
1005eaf2:	460c      	mov	r4, r1
1005eaf4:	4605      	mov	r5, r0
1005eaf6:	4810      	ldr	r0, [pc, #64]	@ (1005eb38 <__arm_cp.2_0>)
1005eaf8:	6800      	ldr	r0, [r0, #0]
1005eafa:	2137      	movs	r1, #55	@ 0x37
1005eafc:	5c40      	ldrb	r0, [r0, r1]
1005eafe:	0700      	lsls	r0, r0, #28
1005eb00:	d519      	bpl.n	1005eb36 <hci_read_remote_version_information_complete_event_push+0x46>
1005eb02:	480e      	ldr	r0, [pc, #56]	@ (1005eb3c <__arm_cp.2_1>)
1005eb04:	6800      	ldr	r0, [r0, #0]
1005eb06:	6980      	ldr	r0, [r0, #24]
1005eb08:	2102      	movs	r1, #2
1005eb0a:	2221      	movs	r2, #33	@ 0x21
1005eb0c:	2303      	movs	r3, #3
1005eb0e:	f7f6 faed 	bl	100550ec <aci_event_fifo_push_header>
1005eb12:	2800      	cmp	r0, #0
1005eb14:	d00f      	beq.n	1005eb36 <hci_read_remote_version_information_complete_event_push+0x46>
1005eb16:	4606      	mov	r6, r0
1005eb18:	1d00      	adds	r0, r0, #4
1005eb1a:	4629      	mov	r1, r5
1005eb1c:	4622      	mov	r2, r4
1005eb1e:	f7f6 fe07 	bl	10055730 <hci_read_remote_version_information_complete_event_copy>
1005eb22:	2008      	movs	r0, #8
1005eb24:	71b0      	strb	r0, [r6, #6]
1005eb26:	200c      	movs	r0, #12
1005eb28:	7170      	strb	r0, [r6, #5]
1005eb2a:	2004      	movs	r0, #4
1005eb2c:	7130      	strb	r0, [r6, #4]
1005eb2e:	2002      	movs	r0, #2
1005eb30:	4631      	mov	r1, r6
1005eb32:	f7f6 fb78 	bl	10055226 <aci_event_fifo_push>
1005eb36:	bd70      	pop	{r4, r5, r6, pc}

1005eb38 <__arm_cp.2_0>:
1005eb38:	20002470 	.word	0x20002470

1005eb3c <__arm_cp.2_1>:
1005eb3c:	20002420 	.word	0x20002420

1005eb40 <LL_conn_get_version_exchange_cached>:
1005eb40:	b580      	push	{r7, lr}
1005eb42:	f7fb f9f9 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1005eb46:	218c      	movs	r1, #140	@ 0x8c
1005eb48:	5840      	ldr	r0, [r0, r1]
1005eb4a:	0700      	lsls	r0, r0, #28
1005eb4c:	0fc0      	lsrs	r0, r0, #31
1005eb4e:	bd80      	pop	{r7, pc}

1005eb50 <llc_cte_get_ctxt>:
1005eb50:	4802      	ldr	r0, [pc, #8]	@ (1005eb5c <__arm_cp.2_0>)
1005eb52:	6800      	ldr	r0, [r0, #0]
1005eb54:	219c      	movs	r1, #156	@ 0x9c
1005eb56:	5840      	ldr	r0, [r0, r1]
1005eb58:	6d00      	ldr	r0, [r0, #80]	@ 0x50
1005eb5a:	4770      	bx	lr

1005eb5c <__arm_cp.2_0>:
1005eb5c:	20002470 	.word	0x20002470

1005eb60 <llc_cte_init_ucfg_weak>:
1005eb60:	4770      	bx	lr

1005eb62 <llc_cte_mem_allocate_ucfg_weak>:
1005eb62:	4770      	bx	lr

1005eb64 <llc_cte_timer_error_ucfg_weak>:
1005eb64:	4770      	bx	lr

1005eb66 <llc_cte_timer_stop_ucfg_weak>:
1005eb66:	2000      	movs	r0, #0
1005eb68:	4770      	bx	lr
	...

1005eb6c <LL_dtm_init>:
1005eb6c:	b5b0      	push	{r4, r5, r7, lr}
1005eb6e:	480e      	ldr	r0, [pc, #56]	@ (1005eba8 <__arm_cp.0_0>)
1005eb70:	6800      	ldr	r0, [r0, #0]
1005eb72:	21ac      	movs	r1, #172	@ 0xac
1005eb74:	5844      	ldr	r4, [r0, r1]
1005eb76:	20ff      	movs	r0, #255	@ 0xff
1005eb78:	77a0      	strb	r0, [r4, #30]
1005eb7a:	2500      	movs	r5, #0
1005eb7c:	77e5      	strb	r5, [r4, #31]
1005eb7e:	f7fa fca9 	bl	100594d4 <cte_csr_ucfg_weak>
1005eb82:	2801      	cmp	r0, #1
1005eb84:	d10f      	bne.n	1005eba6 <LL_dtm_init+0x3a>
1005eb86:	f7ff ffe3 	bl	1005eb50 <llc_cte_get_ctxt>
1005eb8a:	2224      	movs	r2, #36	@ 0x24
1005eb8c:	4907      	ldr	r1, [pc, #28]	@ (1005ebac <__arm_cp.0_1>)
1005eb8e:	5c8a      	ldrb	r2, [r1, r2]
1005eb90:	2a00      	cmp	r2, #0
1005eb92:	462a      	mov	r2, r5
1005eb94:	d000      	beq.n	1005eb98 <LL_dtm_init+0x2c>
1005eb96:	6802      	ldr	r2, [r0, #0]
1005eb98:	62a2      	str	r2, [r4, #40]	@ 0x28
1005eb9a:	2223      	movs	r2, #35	@ 0x23
1005eb9c:	5c89      	ldrb	r1, [r1, r2]
1005eb9e:	2900      	cmp	r1, #0
1005eba0:	d000      	beq.n	1005eba4 <LL_dtm_init+0x38>
1005eba2:	6845      	ldr	r5, [r0, #4]
1005eba4:	62e5      	str	r5, [r4, #44]	@ 0x2c
1005eba6:	bdb0      	pop	{r4, r5, r7, pc}

1005eba8 <__arm_cp.0_0>:
1005eba8:	20002470 	.word	0x20002470

1005ebac <__arm_cp.0_1>:
1005ebac:	20002484 	.word	0x20002484

1005ebb0 <LL_eadv_switchbackupdata_data_struc>:
1005ebb0:	b510      	push	{r4, lr}
1005ebb2:	7c01      	ldrb	r1, [r0, #16]
1005ebb4:	2902      	cmp	r1, #2
1005ebb6:	d109      	bne.n	1005ebcc <LL_eadv_switchbackupdata_data_struc+0x1c>
1005ebb8:	2401      	movs	r4, #1
1005ebba:	7404      	strb	r4, [r0, #16]
1005ebbc:	6801      	ldr	r1, [r0, #0]
1005ebbe:	6882      	ldr	r2, [r0, #8]
1005ebc0:	68c3      	ldr	r3, [r0, #12]
1005ebc2:	c00c      	stmia	r0!, {r2, r3}
1005ebc4:	20a1      	movs	r0, #161	@ 0xa1
1005ebc6:	f005 fa0b 	bl	10063fe0 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1005ebca:	e000      	b.n	1005ebce <LL_eadv_switchbackupdata_data_struc+0x1e>
1005ebcc:	2400      	movs	r4, #0
1005ebce:	4620      	mov	r0, r4
1005ebd0:	bd10      	pop	{r4, pc}

1005ebd2 <LL_eadv_Blue_Tx>:
1005ebd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ebd4:	461e      	mov	r6, r3
1005ebd6:	4617      	mov	r7, r2
1005ebd8:	460d      	mov	r5, r1
1005ebda:	4604      	mov	r4, r0
1005ebdc:	f7f4 feac 	bl	10053938 <BLEPLAT_CNTR_PacketInitTo0>
1005ebe0:	4620      	mov	r0, r4
1005ebe2:	f7f4 feb7 	bl	10053954 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1005ebe6:	4620      	mov	r0, r4
1005ebe8:	f7f4 ff33 	bl	10053a52 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005ebec:	4620      	mov	r0, r4
1005ebee:	4621      	mov	r1, r4
1005ebf0:	f7f4 ff3c 	bl	10053a6c <BLEPLAT_CNTR_PacketSetNextPtr>
1005ebf4:	4620      	mov	r0, r4
1005ebf6:	4639      	mov	r1, r7
1005ebf8:	f7f4 fed3 	bl	100539a2 <BLEPLAT_CNTR_PacketSetDataPtr>
1005ebfc:	4620      	mov	r0, r4
1005ebfe:	4631      	mov	r1, r6
1005ec00:	f7f4 ff8e 	bl	10053b20 <BLEPLAT_CNTR_PacketSetTimeout>
1005ec04:	9f06      	ldr	r7, [sp, #24]
1005ec06:	2e00      	cmp	r6, #0
1005ec08:	d002      	beq.n	1005ec10 <LL_eadv_Blue_Tx+0x3e>
1005ec0a:	4620      	mov	r0, r4
1005ec0c:	f7f4 ff97 	bl	10053b3e <BLEPLAT_CNTR_PacketSetTimer2Active>
1005ec10:	4620      	mov	r0, r4
1005ec12:	f7f4 fe6b 	bl	100538ec <BLEPLAT_CNTR_PacketClrIncChan>
1005ec16:	4620      	mov	r0, r4
1005ec18:	f7f4 feea 	bl	100539f0 <BLEPLAT_CNTR_PacketSetIntDone>
1005ec1c:	4620      	mov	r0, r4
1005ec1e:	f7f4 ffb4 	bl	10053b8a <BLEPLAT_CNTR_PacketSetTxReady>
1005ec22:	4620      	mov	r0, r4
1005ec24:	2f81      	cmp	r7, #129	@ 0x81
1005ec26:	d109      	bne.n	1005ec3c <LL_eadv_Blue_Tx+0x6a>
1005ec28:	4629      	mov	r1, r5
1005ec2a:	f7f4 ff3b 	bl	10053aa4 <BLEPLAT_CNTR_PacketSetNextSlot>
1005ec2e:	4620      	mov	r0, r4
1005ec30:	f7f4 ff5c 	bl	10053aec <BLEPLAT_CNTR_PacketSetPllTrig>
1005ec34:	4620      	mov	r0, r4
1005ec36:	f7f4 ff8e 	bl	10053b56 <BLEPLAT_CNTR_PacketSetTimerTrigDone>
1005ec3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005ec3c:	f7f4 ff98 	bl	10053b70 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005ec40:	4620      	mov	r0, r4
1005ec42:	f7f4 ff22 	bl	10053a8a <BLEPLAT_CNTR_PacketSetNextRxMode>
1005ec46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005ec48 <LL_eadv_Blue_Rx>:
1005ec48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ec4a:	461e      	mov	r6, r3
1005ec4c:	4617      	mov	r7, r2
1005ec4e:	460d      	mov	r5, r1
1005ec50:	4604      	mov	r4, r0
1005ec52:	f7f4 fe71 	bl	10053938 <BLEPLAT_CNTR_PacketInitTo0>
1005ec56:	4620      	mov	r0, r4
1005ec58:	f7f4 fe7c 	bl	10053954 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1005ec5c:	4620      	mov	r0, r4
1005ec5e:	f7f4 fef8 	bl	10053a52 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005ec62:	4620      	mov	r0, r4
1005ec64:	4621      	mov	r1, r4
1005ec66:	f7f4 ff01 	bl	10053a6c <BLEPLAT_CNTR_PacketSetNextPtr>
1005ec6a:	4620      	mov	r0, r4
1005ec6c:	4639      	mov	r1, r7
1005ec6e:	f7f4 fe98 	bl	100539a2 <BLEPLAT_CNTR_PacketSetDataPtr>
1005ec72:	4620      	mov	r0, r4
1005ec74:	4631      	mov	r1, r6
1005ec76:	f7f4 ff53 	bl	10053b20 <BLEPLAT_CNTR_PacketSetTimeout>
1005ec7a:	9f07      	ldr	r7, [sp, #28]
1005ec7c:	2e00      	cmp	r6, #0
1005ec7e:	d002      	beq.n	1005ec86 <LL_eadv_Blue_Rx+0x3e>
1005ec80:	4620      	mov	r0, r4
1005ec82:	f7f4 ff5c 	bl	10053b3e <BLEPLAT_CNTR_PacketSetTimer2Active>
1005ec86:	4620      	mov	r0, r4
1005ec88:	f7f4 ff17 	bl	10053aba <BLEPLAT_CNTR_PacketSetNextTxMode>
1005ec8c:	4620      	mov	r0, r4
1005ec8e:	f7f4 fe2d 	bl	100538ec <BLEPLAT_CNTR_PacketClrIncChan>
1005ec92:	4620      	mov	r0, r4
1005ec94:	f7f4 feac 	bl	100539f0 <BLEPLAT_CNTR_PacketSetIntDone>
1005ec98:	4620      	mov	r0, r4
1005ec9a:	f7f4 ff69 	bl	10053b70 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005ec9e:	4620      	mov	r0, r4
1005eca0:	f7f4 feb2 	bl	10053a08 <BLEPLAT_CNTR_PacketSetIntRcvOk>
1005eca4:	4620      	mov	r0, r4
1005eca6:	f7f4 ff2e 	bl	10053b06 <BLEPLAT_CNTR_PacketSetRxReady>
1005ecaa:	2f81      	cmp	r7, #129	@ 0x81
1005ecac:	d107      	bne.n	1005ecbe <LL_eadv_Blue_Rx+0x76>
1005ecae:	4620      	mov	r0, r4
1005ecb0:	4629      	mov	r1, r5
1005ecb2:	f7f4 fef7 	bl	10053aa4 <BLEPLAT_CNTR_PacketSetNextSlot>
1005ecb6:	4620      	mov	r0, r4
1005ecb8:	f7f4 fe24 	bl	10053904 <BLEPLAT_CNTR_PacketClrPllTrig>
1005ecbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005ecbe:	4620      	mov	r0, r4
1005ecc0:	f7f4 ff14 	bl	10053aec <BLEPLAT_CNTR_PacketSetPllTrig>
1005ecc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1005ecc8 <LL_eadv_BLUE_SM>:
1005ecc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ecca:	461d      	mov	r5, r3
1005eccc:	4616      	mov	r6, r2
1005ecce:	460f      	mov	r7, r1
1005ecd0:	4604      	mov	r4, r0
1005ecd2:	f7f5 f8d7 	bl	10053e84 <BLEPLAT_CNTR_SmInitTo0>
1005ecd6:	4911      	ldr	r1, [pc, #68]	@ (1005ed1c <__arm_cp.10_0>)
1005ecd8:	4620      	mov	r0, r4
1005ecda:	f7f5 f8f1 	bl	10053ec0 <BLEPLAT_CNTR_SmSetAccessAddr>
1005ecde:	4910      	ldr	r1, [pc, #64]	@ (1005ed20 <__arm_cp.10_1>)
1005ece0:	4620      	mov	r0, r4
1005ece2:	f7f5 f930 	bl	10053f46 <BLEPLAT_CNTR_SmSetCrcInit>
1005ece6:	4620      	mov	r0, r4
1005ece8:	4639      	mov	r1, r7
1005ecea:	f7f5 fa5d 	bl	100541a8 <BLEPLAT_CNTR_SmSetTxPwr>
1005ecee:	4620      	mov	r0, r4
1005ecf0:	4631      	mov	r1, r6
1005ecf2:	f7f5 fa32 	bl	1005415a <BLEPLAT_CNTR_SmSetTxPacketPtr>
1005ecf6:	4620      	mov	r0, r4
1005ecf8:	4629      	mov	r1, r5
1005ecfa:	f7f5 f9c2 	bl	10054082 <BLEPLAT_CNTR_SmSetRxPacketPtr>
1005ecfe:	9806      	ldr	r0, [sp, #24]
1005ed00:	2881      	cmp	r0, #129	@ 0x81
1005ed02:	d103      	bne.n	1005ed0c <LL_eadv_BLUE_SM+0x44>
1005ed04:	4620      	mov	r0, r4
1005ed06:	f7f5 fa19 	bl	1005413c <BLEPLAT_CNTR_SmSetTxMode>
1005ed0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005ed0c:	4620      	mov	r0, r4
1005ed0e:	f7f5 f9a9 	bl	10054064 <BLEPLAT_CNTR_SmSetRxMode>
1005ed12:	2101      	movs	r1, #1
1005ed14:	4620      	mov	r0, r4
1005ed16:	f7f5 f93d 	bl	10053f94 <BLEPLAT_CNTR_SmSetHopIncr>
1005ed1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005ed1c <__arm_cp.10_0>:
1005ed1c:	8e89bed6 	.word	0x8e89bed6

1005ed20 <__arm_cp.10_1>:
1005ed20:	00555555 	.word	0x00555555

1005ed24 <llc_get_advertising_set_index>:
1005ed24:	b570      	push	{r4, r5, r6, lr}
1005ed26:	4604      	mov	r4, r0
1005ed28:	f001 fa94 	bl	10060254 <llc_get_linkms_cntxt_p>
1005ed2c:	214d      	movs	r1, #77	@ 0x4d
1005ed2e:	5c41      	ldrb	r1, [r0, r1]
1005ed30:	4d09      	ldr	r5, [pc, #36]	@ (1005ed58 <__arm_cp.12_0>)
1005ed32:	2200      	movs	r2, #0
1005ed34:	23be      	movs	r3, #190	@ 0xbe
1005ed36:	4291      	cmp	r1, r2
1005ed38:	d00b      	beq.n	1005ed52 <llc_get_advertising_set_index+0x2e>
1005ed3a:	6806      	ldr	r6, [r0, #0]
1005ed3c:	5af6      	ldrh	r6, [r6, r3]
1005ed3e:	42a6      	cmp	r6, r4
1005ed40:	4616      	mov	r6, r2
1005ed42:	d000      	beq.n	1005ed46 <llc_get_advertising_set_index+0x22>
1005ed44:	462e      	mov	r6, r5
1005ed46:	2501      	movs	r5, #1
1005ed48:	022d      	lsls	r5, r5, #8
1005ed4a:	195b      	adds	r3, r3, r5
1005ed4c:	1c52      	adds	r2, r2, #1
1005ed4e:	4635      	mov	r5, r6
1005ed50:	e7f1      	b.n	1005ed36 <llc_get_advertising_set_index+0x12>
1005ed52:	b2a8      	uxth	r0, r5
1005ed54:	bd70      	pop	{r4, r5, r6, pc}
1005ed56:	46c0      	nop			@ (mov r8, r8)

1005ed58 <__arm_cp.12_0>:
1005ed58:	0000ffff 	.word	0x0000ffff

1005ed5c <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>:
1005ed5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ed5e:	4604      	mov	r4, r0
1005ed60:	f001 fa78 	bl	10060254 <llc_get_linkms_cntxt_p>
1005ed64:	4601      	mov	r1, r0
1005ed66:	204d      	movs	r0, #77	@ 0x4d
1005ed68:	5c08      	ldrb	r0, [r1, r0]
1005ed6a:	0202      	lsls	r2, r0, #8
1005ed6c:	2000      	movs	r0, #0
1005ed6e:	4b0d      	ldr	r3, [pc, #52]	@ (1005eda4 <__arm_cp.17_0>)
1005ed70:	4605      	mov	r5, r0
1005ed72:	42aa      	cmp	r2, r5
1005ed74:	d013      	beq.n	1005ed9e <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x42>
1005ed76:	680e      	ldr	r6, [r1, #0]
1005ed78:	1976      	adds	r6, r6, r5
1005ed7a:	27be      	movs	r7, #190	@ 0xbe
1005ed7c:	5bf7      	ldrh	r7, [r6, r7]
1005ed7e:	429f      	cmp	r7, r3
1005ed80:	d003      	beq.n	1005ed8a <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x2e>
1005ed82:	27ce      	movs	r7, #206	@ 0xce
1005ed84:	5df7      	ldrb	r7, [r6, r7]
1005ed86:	2f01      	cmp	r7, #1
1005ed88:	d003      	beq.n	1005ed92 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x36>
1005ed8a:	2601      	movs	r6, #1
1005ed8c:	0236      	lsls	r6, r6, #8
1005ed8e:	19ad      	adds	r5, r5, r6
1005ed90:	e7ef      	b.n	1005ed72 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x16>
1005ed92:	2c00      	cmp	r4, #0
1005ed94:	d004      	beq.n	1005eda0 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x44>
1005ed96:	20c3      	movs	r0, #195	@ 0xc3
1005ed98:	5c30      	ldrb	r0, [r6, r0]
1005ed9a:	1e41      	subs	r1, r0, #1
1005ed9c:	4188      	sbcs	r0, r1
1005ed9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005eda0:	2001      	movs	r0, #1
1005eda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005eda4 <__arm_cp.17_0>:
1005eda4:	0000ffff 	.word	0x0000ffff

1005eda8 <llc_eadv_generate_new_rpa_for_one_adv_set>:
1005eda8:	b5b0      	push	{r4, r5, r7, lr}
1005edaa:	4604      	mov	r4, r0
1005edac:	20d6      	movs	r0, #214	@ 0xd6
1005edae:	5c20      	ldrb	r0, [r4, r0]
1005edb0:	0780      	lsls	r0, r0, #30
1005edb2:	d401      	bmi.n	1005edb8 <llc_eadv_generate_new_rpa_for_one_adv_set+0x10>
1005edb4:	2000      	movs	r0, #0
1005edb6:	bdb0      	pop	{r4, r5, r7, pc}
1005edb8:	4625      	mov	r5, r4
1005edba:	3584      	adds	r5, #132	@ 0x84
1005edbc:	4628      	mov	r0, r5
1005edbe:	f7fc fe42 	bl	1005ba46 <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>
1005edc2:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1005edc4:	4628      	mov	r0, r5
1005edc6:	f7fc fe36 	bl	1005ba36 <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>
1005edca:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
1005edcc:	3008      	adds	r0, #8
1005edce:	2100      	movs	r1, #0
1005edd0:	f7fc fe2f 	bl	1005ba32 <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>
1005edd4:	6f60      	ldr	r0, [r4, #116]	@ 0x74
1005edd6:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1005edd8:	6761      	str	r1, [r4, #116]	@ 0x74
1005edda:	67a0      	str	r0, [r4, #120]	@ 0x78
1005eddc:	2001      	movs	r0, #1
1005edde:	bdb0      	pop	{r4, r5, r7, pc}

1005ede0 <EADV_init>:
1005ede0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ede2:	b085      	sub	sp, #20
1005ede4:	9204      	str	r2, [sp, #16]
1005ede6:	460e      	mov	r6, r1
1005ede8:	4605      	mov	r5, r0
1005edea:	244d      	movs	r4, #77	@ 0x4d
1005edec:	f001 fa32 	bl	10060254 <llc_get_linkms_cntxt_p>
1005edf0:	5505      	strb	r5, [r0, r4]
1005edf2:	6006      	str	r6, [r0, #0]
1005edf4:	9003      	str	r0, [sp, #12]
1005edf6:	304d      	adds	r0, #77	@ 0x4d
1005edf8:	2101      	movs	r1, #1
1005edfa:	9002      	str	r0, [sp, #8]
1005edfc:	7041      	strb	r1, [r0, #1]
1005edfe:	9101      	str	r1, [sp, #4]
1005ee00:	04cb      	lsls	r3, r1, #19
1005ee02:	2600      	movs	r6, #0
1005ee04:	277c      	movs	r7, #124	@ 0x7c
1005ee06:	9a04      	ldr	r2, [sp, #16]
1005ee08:	b2e8      	uxtb	r0, r5
1005ee0a:	4286      	cmp	r6, r0
1005ee0c:	d226      	bcs.n	1005ee5c <EADV_init+0x7c>
1005ee0e:	9803      	ldr	r0, [sp, #12]
1005ee10:	6800      	ldr	r0, [r0, #0]
1005ee12:	51c3      	str	r3, [r0, r7]
1005ee14:	19c5      	adds	r5, r0, r7
1005ee16:	2054      	movs	r0, #84	@ 0x54
1005ee18:	4911      	ldr	r1, [pc, #68]	@ (1005ee60 <__arm_cp.19_0>)
1005ee1a:	5229      	strh	r1, [r5, r0]
1005ee1c:	2452      	movs	r4, #82	@ 0x52
1005ee1e:	2000      	movs	r0, #0
1005ee20:	5328      	strh	r0, [r5, r4]
1005ee22:	2442      	movs	r4, #66	@ 0x42
1005ee24:	5329      	strh	r1, [r5, r4]
1005ee26:	245e      	movs	r4, #94	@ 0x5e
1005ee28:	5528      	strb	r0, [r5, r4]
1005ee2a:	245c      	movs	r4, #92	@ 0x5c
1005ee2c:	21ff      	movs	r1, #255	@ 0xff
1005ee2e:	5529      	strb	r1, [r5, r4]
1005ee30:	215a      	movs	r1, #90	@ 0x5a
1005ee32:	5468      	strb	r0, [r5, r1]
1005ee34:	2146      	movs	r1, #70	@ 0x46
1005ee36:	2407      	movs	r4, #7
1005ee38:	526c      	strh	r4, [r5, r1]
1005ee3a:	6128      	str	r0, [r5, #16]
1005ee3c:	6168      	str	r0, [r5, #20]
1005ee3e:	606b      	str	r3, [r5, #4]
1005ee40:	9904      	ldr	r1, [sp, #16]
1005ee42:	2900      	cmp	r1, #0
1005ee44:	d002      	beq.n	1005ee4c <EADV_init+0x6c>
1005ee46:	6550      	str	r0, [r2, #84]	@ 0x54
1005ee48:	3d2c      	subs	r5, #44	@ 0x2c
1005ee4a:	602a      	str	r2, [r5, #0]
1005ee4c:	9801      	ldr	r0, [sp, #4]
1005ee4e:	0200      	lsls	r0, r0, #8
1005ee50:	183f      	adds	r7, r7, r0
1005ee52:	325c      	adds	r2, #92	@ 0x5c
1005ee54:	9802      	ldr	r0, [sp, #8]
1005ee56:	7805      	ldrb	r5, [r0, #0]
1005ee58:	1c76      	adds	r6, r6, #1
1005ee5a:	e7d5      	b.n	1005ee08 <EADV_init+0x28>
1005ee5c:	b005      	add	sp, #20
1005ee5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ee60 <__arm_cp.19_0>:
1005ee60:	0000ffff 	.word	0x0000ffff

1005ee64 <LL_LE_Set_Advertising_Parameters>:
1005ee64:	b570      	push	{r4, r5, r6, lr}
1005ee66:	4604      	mov	r4, r0
1005ee68:	f001 f9f4 	bl	10060254 <llc_get_linkms_cntxt_p>
1005ee6c:	4605      	mov	r5, r0
1005ee6e:	4e30      	ldr	r6, [pc, #192]	@ (1005ef30 <__arm_cp.20_0>)
1005ee70:	4630      	mov	r0, r6
1005ee72:	f7ff ff57 	bl	1005ed24 <llc_get_advertising_set_index>
1005ee76:	492f      	ldr	r1, [pc, #188]	@ (1005ef34 <__arm_cp.20_1>)
1005ee78:	4288      	cmp	r0, r1
1005ee7a:	d112      	bne.n	1005eea2 <LL_LE_Set_Advertising_Parameters+0x3e>
1005ee7c:	f000 f860 	bl	1005ef40 <LL_Context_ReturnFree>
1005ee80:	28ff      	cmp	r0, #255	@ 0xff
1005ee82:	d034      	beq.n	1005eeee <LL_LE_Set_Advertising_Parameters+0x8a>
1005ee84:	0200      	lsls	r0, r0, #8
1005ee86:	6829      	ldr	r1, [r5, #0]
1005ee88:	1808      	adds	r0, r1, r0
1005ee8a:	21be      	movs	r1, #190	@ 0xbe
1005ee8c:	5246      	strh	r6, [r0, r1]
1005ee8e:	214c      	movs	r1, #76	@ 0x4c
1005ee90:	2200      	movs	r2, #0
1005ee92:	5442      	strb	r2, [r0, r1]
1005ee94:	2138      	movs	r1, #56	@ 0x38
1005ee96:	5442      	strb	r2, [r0, r1]
1005ee98:	63c2      	str	r2, [r0, #60]	@ 0x3c
1005ee9a:	6402      	str	r2, [r0, #64]	@ 0x40
1005ee9c:	6282      	str	r2, [r0, #40]	@ 0x28
1005ee9e:	62c2      	str	r2, [r0, #44]	@ 0x2c
1005eea0:	e008      	b.n	1005eeb4 <LL_LE_Set_Advertising_Parameters+0x50>
1005eea2:	0200      	lsls	r0, r0, #8
1005eea4:	6829      	ldr	r1, [r5, #0]
1005eea6:	1808      	adds	r0, r1, r0
1005eea8:	21ce      	movs	r1, #206	@ 0xce
1005eeaa:	5c41      	ldrb	r1, [r0, r1]
1005eeac:	2901      	cmp	r1, #1
1005eeae:	d101      	bne.n	1005eeb4 <LL_LE_Set_Advertising_Parameters+0x50>
1005eeb0:	250c      	movs	r5, #12
1005eeb2:	e03a      	b.n	1005ef2a <LL_LE_Set_Advertising_Parameters+0xc6>
1005eeb4:	7961      	ldrb	r1, [r4, #5]
1005eeb6:	22c2      	movs	r2, #194	@ 0xc2
1005eeb8:	5481      	strb	r1, [r0, r2]
1005eeba:	4606      	mov	r6, r0
1005eebc:	36c2      	adds	r6, #194	@ 0xc2
1005eebe:	2500      	movs	r5, #0
1005eec0:	72f5      	strb	r5, [r6, #11]
1005eec2:	2101      	movs	r1, #1
1005eec4:	70f1      	strb	r1, [r6, #3]
1005eec6:	79a1      	ldrb	r1, [r4, #6]
1005eec8:	7071      	strb	r1, [r6, #1]
1005eeca:	8821      	ldrh	r1, [r4, #0]
1005eecc:	0209      	lsls	r1, r1, #8
1005eece:	67c1      	str	r1, [r0, #124]	@ 0x7c
1005eed0:	4601      	mov	r1, r0
1005eed2:	3184      	adds	r1, #132	@ 0x84
1005eed4:	7922      	ldrb	r2, [r4, #4]
1005eed6:	2a04      	cmp	r2, #4
1005eed8:	d815      	bhi.n	1005ef06 <LL_LE_Set_Advertising_Parameters+0xa2>
1005eeda:	46c0      	nop			@ (mov r8, r8)
1005eedc:	447a      	add	r2, pc
1005eede:	7912      	ldrb	r2, [r2, #4]
1005eee0:	0052      	lsls	r2, r2, #1
1005eee2:	4497      	add	pc, r2
1005eee4:	0c0a0602 	.word	0x0c0a0602
1005eee8:	000e      	.short	0x000e
1005eeea:	20f3      	movs	r0, #243	@ 0xf3
1005eeec:	e00a      	b.n	1005ef04 <LL_LE_Set_Advertising_Parameters+0xa0>
1005eeee:	2507      	movs	r5, #7
1005eef0:	e01b      	b.n	1005ef2a <LL_LE_Set_Advertising_Parameters+0xc6>
1005eef2:	4a11      	ldr	r2, [pc, #68]	@ (1005ef38 <__arm_cp.20_2>)
1005eef4:	67c2      	str	r2, [r0, #124]	@ 0x7c
1005eef6:	20fd      	movs	r0, #253	@ 0xfd
1005eef8:	e004      	b.n	1005ef04 <LL_LE_Set_Advertising_Parameters+0xa0>
1005eefa:	20f2      	movs	r0, #242	@ 0xf2
1005eefc:	e002      	b.n	1005ef04 <LL_LE_Set_Advertising_Parameters+0xa0>
1005eefe:	20f0      	movs	r0, #240	@ 0xf0
1005ef00:	e000      	b.n	1005ef04 <LL_LE_Set_Advertising_Parameters+0xa0>
1005ef02:	20f5      	movs	r0, #245	@ 0xf5
1005ef04:	8688      	strh	r0, [r1, #52]	@ 0x34
1005ef06:	7a20      	ldrb	r0, [r4, #8]
1005ef08:	79e2      	ldrb	r2, [r4, #7]
1005ef0a:	600d      	str	r5, [r1, #0]
1005ef0c:	604d      	str	r5, [r1, #4]
1005ef0e:	7532      	strb	r2, [r6, #20]
1005ef10:	7570      	strb	r0, [r6, #21]
1005ef12:	7a20      	ldrb	r0, [r4, #8]
1005ef14:	7008      	strb	r0, [r1, #0]
1005ef16:	1c48      	adds	r0, r1, #1
1005ef18:	3409      	adds	r4, #9
1005ef1a:	2206      	movs	r2, #6
1005ef1c:	4621      	mov	r1, r4
1005ef1e:	f7f3 fb99 	bl	10052654 <BLEPLAT_MemCpy>
1005ef22:	4806      	ldr	r0, [pc, #24]	@ (1005ef3c <__arm_cp.20_3>)
1005ef24:	6800      	ldr	r0, [r0, #0]
1005ef26:	7a40      	ldrb	r0, [r0, #9]
1005ef28:	70b0      	strb	r0, [r6, #2]
1005ef2a:	4628      	mov	r0, r5
1005ef2c:	bd70      	pop	{r4, r5, r6, pc}
1005ef2e:	46c0      	nop			@ (mov r8, r8)

1005ef30 <__arm_cp.20_0>:
1005ef30:	0000fffc 	.word	0x0000fffc

1005ef34 <__arm_cp.20_1>:
1005ef34:	0000ffff 	.word	0x0000ffff

1005ef38 <__arm_cp.20_2>:
1005ef38:	000005dc 	.word	0x000005dc

1005ef3c <__arm_cp.20_3>:
1005ef3c:	20002470 	.word	0x20002470

1005ef40 <LL_Context_ReturnFree>:
1005ef40:	b510      	push	{r4, lr}
1005ef42:	f001 f987 	bl	10060254 <llc_get_linkms_cntxt_p>
1005ef46:	214d      	movs	r1, #77	@ 0x4d
1005ef48:	5c42      	ldrb	r2, [r0, r1]
1005ef4a:	2100      	movs	r1, #0
1005ef4c:	23be      	movs	r3, #190	@ 0xbe
1005ef4e:	428a      	cmp	r2, r1
1005ef50:	d008      	beq.n	1005ef64 <LL_Context_ReturnFree+0x24>
1005ef52:	6804      	ldr	r4, [r0, #0]
1005ef54:	5ae4      	ldrh	r4, [r4, r3]
1005ef56:	0b24      	lsrs	r4, r4, #12
1005ef58:	d105      	bne.n	1005ef66 <LL_Context_ReturnFree+0x26>
1005ef5a:	2401      	movs	r4, #1
1005ef5c:	0224      	lsls	r4, r4, #8
1005ef5e:	191b      	adds	r3, r3, r4
1005ef60:	1c49      	adds	r1, r1, #1
1005ef62:	e7f4      	b.n	1005ef4e <LL_Context_ReturnFree+0xe>
1005ef64:	21ff      	movs	r1, #255	@ 0xff
1005ef66:	b2c8      	uxtb	r0, r1
1005ef68:	bd10      	pop	{r4, pc}
	...

1005ef6c <LL_LE_Set_Advertise_Enable>:
1005ef6c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005ef6e:	4604      	mov	r4, r0
1005ef70:	f000 f816 	bl	1005efa0 <LL_LE_Set_Advertising_Parameters_Default>
1005ef74:	2300      	movs	r3, #0
1005ef76:	9300      	str	r3, [sp, #0]
1005ef78:	2101      	movs	r1, #1
1005ef7a:	4d07      	ldr	r5, [pc, #28]	@ (1005ef98 <__arm_cp.22_0>)
1005ef7c:	4620      	mov	r0, r4
1005ef7e:	462a      	mov	r2, r5
1005ef80:	f000 f82c 	bl	1005efdc <LL_Set_Extented_Advertising_Enable>
1005ef84:	4604      	mov	r4, r0
1005ef86:	4805      	ldr	r0, [pc, #20]	@ (1005ef9c <__arm_cp.22_1>)
1005ef88:	6801      	ldr	r1, [r0, #0]
1005ef8a:	3156      	adds	r1, #86	@ 0x56
1005ef8c:	4628      	mov	r0, r5
1005ef8e:	f000 f98f 	bl	1005f2b0 <LL_Set_Extented_Advertising_Set_Random_Address>
1005ef92:	4620      	mov	r0, r4
1005ef94:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005ef96:	46c0      	nop			@ (mov r8, r8)

1005ef98 <__arm_cp.22_0>:
1005ef98:	0000fffc 	.word	0x0000fffc

1005ef9c <__arm_cp.22_1>:
1005ef9c:	20002470 	.word	0x20002470

1005efa0 <LL_LE_Set_Advertising_Parameters_Default>:
1005efa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1005efa2:	480c      	ldr	r0, [pc, #48]	@ (1005efd4 <__arm_cp.23_0>)
1005efa4:	f7ff febe 	bl	1005ed24 <llc_get_advertising_set_index>
1005efa8:	490b      	ldr	r1, [pc, #44]	@ (1005efd8 <__arm_cp.23_1>)
1005efaa:	4288      	cmp	r0, r1
1005efac:	d110      	bne.n	1005efd0 <LL_LE_Set_Advertising_Parameters_Default+0x30>
1005efae:	466c      	mov	r4, sp
1005efb0:	2100      	movs	r1, #0
1005efb2:	7221      	strb	r1, [r4, #8]
1005efb4:	2001      	movs	r0, #1
1005efb6:	02c0      	lsls	r0, r0, #11
1005efb8:	8020      	strh	r0, [r4, #0]
1005efba:	2007      	movs	r0, #7
1005efbc:	0200      	lsls	r0, r0, #8
1005efbe:	9001      	str	r0, [sp, #4]
1005efc0:	4620      	mov	r0, r4
1005efc2:	3009      	adds	r0, #9
1005efc4:	2206      	movs	r2, #6
1005efc6:	f7f3 fb55 	bl	10052674 <BLEPLAT_MemSet>
1005efca:	4620      	mov	r0, r4
1005efcc:	f7ff ff4a 	bl	1005ee64 <LL_LE_Set_Advertising_Parameters>
1005efd0:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
1005efd2:	46c0      	nop			@ (mov r8, r8)

1005efd4 <__arm_cp.23_0>:
1005efd4:	0000fffc 	.word	0x0000fffc

1005efd8 <__arm_cp.23_1>:
1005efd8:	0000ffff 	.word	0x0000ffff

1005efdc <LL_Set_Extented_Advertising_Enable>:
1005efdc:	b5f0      	push	{r4, r5, r6, r7, lr}
1005efde:	b08f      	sub	sp, #60	@ 0x3c
1005efe0:	930e      	str	r3, [sp, #56]	@ 0x38
1005efe2:	4617      	mov	r7, r2
1005efe4:	460d      	mov	r5, r1
1005efe6:	4606      	mov	r6, r0
1005efe8:	4305      	orrs	r5, r0
1005efea:	f001 f933 	bl	10060254 <llc_get_linkms_cntxt_p>
1005efee:	4604      	mov	r4, r0
1005eff0:	2d00      	cmp	r5, #0
1005eff2:	d007      	beq.n	1005f004 <LL_Set_Extented_Advertising_Enable+0x28>
1005eff4:	4638      	mov	r0, r7
1005eff6:	f7ff fe95 	bl	1005ed24 <llc_get_advertising_set_index>
1005effa:	49a7      	ldr	r1, [pc, #668]	@ (1005f298 <__arm_cp.24_1>)
1005effc:	4288      	cmp	r0, r1
1005effe:	d118      	bne.n	1005f032 <LL_Set_Extented_Advertising_Enable+0x56>
1005f000:	2042      	movs	r0, #66	@ 0x42
1005f002:	e04a      	b.n	1005f09a <LL_Set_Extented_Advertising_Enable+0xbe>
1005f004:	4625      	mov	r5, r4
1005f006:	354d      	adds	r5, #77	@ 0x4d
1005f008:	2600      	movs	r6, #0
1005f00a:	4637      	mov	r7, r6
1005f00c:	960e      	str	r6, [sp, #56]	@ 0x38
1005f00e:	7828      	ldrb	r0, [r5, #0]
1005f010:	4286      	cmp	r6, r0
1005f012:	d20c      	bcs.n	1005f02e <LL_Set_Extented_Advertising_Enable+0x52>
1005f014:	6820      	ldr	r0, [r4, #0]
1005f016:	19c0      	adds	r0, r0, r7
1005f018:	21ce      	movs	r1, #206	@ 0xce
1005f01a:	5c41      	ldrb	r1, [r0, r1]
1005f01c:	2901      	cmp	r1, #1
1005f01e:	d101      	bne.n	1005f024 <LL_Set_Extented_Advertising_Enable+0x48>
1005f020:	f000 f992 	bl	1005f348 <EADV_stop>
1005f024:	2001      	movs	r0, #1
1005f026:	0200      	lsls	r0, r0, #8
1005f028:	183f      	adds	r7, r7, r0
1005f02a:	1c76      	adds	r6, r6, #1
1005f02c:	e7ef      	b.n	1005f00e <LL_Set_Extented_Advertising_Enable+0x32>
1005f02e:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005f030:	e033      	b.n	1005f09a <LL_Set_Extented_Advertising_Enable+0xbe>
1005f032:	0201      	lsls	r1, r0, #8
1005f034:	6822      	ldr	r2, [r4, #0]
1005f036:	1854      	adds	r4, r2, r1
1005f038:	21ce      	movs	r1, #206	@ 0xce
1005f03a:	5c61      	ldrb	r1, [r4, r1]
1005f03c:	2e01      	cmp	r6, #1
1005f03e:	d124      	bne.n	1005f08a <LL_Set_Extented_Advertising_Enable+0xae>
1005f040:	0200      	lsls	r0, r0, #8
1005f042:	1815      	adds	r5, r2, r0
1005f044:	20d6      	movs	r0, #214	@ 0xd6
1005f046:	5c28      	ldrb	r0, [r5, r0]
1005f048:	2701      	movs	r7, #1
1005f04a:	4038      	ands	r0, r7
1005f04c:	2900      	cmp	r1, #0
1005f04e:	d026      	beq.n	1005f09e <LL_Set_Extented_Advertising_Enable+0xc2>
1005f050:	2800      	cmp	r0, #0
1005f052:	d00a      	beq.n	1005f06a <LL_Set_Extented_Advertising_Enable+0x8e>
1005f054:	208c      	movs	r0, #140	@ 0x8c
1005f056:	5828      	ldr	r0, [r5, r0]
1005f058:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1005f05a:	462a      	mov	r2, r5
1005f05c:	328c      	adds	r2, #140	@ 0x8c
1005f05e:	6852      	ldr	r2, [r2, #4]
1005f060:	c105      	stmia	r1!, {r0, r2}
1005f062:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1005f064:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1005f066:	6769      	str	r1, [r5, #116]	@ 0x74
1005f068:	67a8      	str	r0, [r5, #120]	@ 0x78
1005f06a:	2094      	movs	r0, #148	@ 0x94
1005f06c:	5828      	ldr	r0, [r5, r0]
1005f06e:	2600      	movs	r6, #0
1005f070:	2800      	cmp	r0, #0
1005f072:	d008      	beq.n	1005f086 <LL_Set_Extented_Advertising_Enable+0xaa>
1005f074:	3594      	adds	r5, #148	@ 0x94
1005f076:	207d      	movs	r0, #125	@ 0x7d
1005f078:	0144      	lsls	r4, r0, #5
1005f07a:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005f07c:	4344      	muls	r4, r0
1005f07e:	f7f3 fbb4 	bl	100527ea <BLEPLAT_GetCurrentSysTime>
1005f082:	1820      	adds	r0, r4, r0
1005f084:	6028      	str	r0, [r5, #0]
1005f086:	4630      	mov	r0, r6
1005f088:	e007      	b.n	1005f09a <LL_Set_Extented_Advertising_Enable+0xbe>
1005f08a:	2000      	movs	r0, #0
1005f08c:	2901      	cmp	r1, #1
1005f08e:	d104      	bne.n	1005f09a <LL_Set_Extented_Advertising_Enable+0xbe>
1005f090:	4605      	mov	r5, r0
1005f092:	4620      	mov	r0, r4
1005f094:	f000 f958 	bl	1005f348 <EADV_stop>
1005f098:	4628      	mov	r0, r5
1005f09a:	b00f      	add	sp, #60	@ 0x3c
1005f09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005f09e:	2800      	cmp	r0, #0
1005f0a0:	d007      	beq.n	1005f0b2 <LL_Set_Extented_Advertising_Enable+0xd6>
1005f0a2:	208c      	movs	r0, #140	@ 0x8c
1005f0a4:	5828      	ldr	r0, [r5, r0]
1005f0a6:	2800      	cmp	r0, #0
1005f0a8:	d103      	bne.n	1005f0b2 <LL_Set_Extented_Advertising_Enable+0xd6>
1005f0aa:	2090      	movs	r0, #144	@ 0x90
1005f0ac:	5828      	ldr	r0, [r5, r0]
1005f0ae:	2800      	cmp	r0, #0
1005f0b0:	d006      	beq.n	1005f0c0 <LL_Set_Extented_Advertising_Enable+0xe4>
1005f0b2:	20b8      	movs	r0, #184	@ 0xb8
1005f0b4:	5a28      	ldrh	r0, [r5, r0]
1005f0b6:	07c1      	lsls	r1, r0, #31
1005f0b8:	d004      	beq.n	1005f0c4 <LL_Set_Extented_Advertising_Enable+0xe8>
1005f0ba:	8de9      	ldrh	r1, [r5, #46]	@ 0x2e
1005f0bc:	29f5      	cmp	r1, #245	@ 0xf5
1005f0be:	d901      	bls.n	1005f0c4 <LL_Set_Extented_Advertising_Enable+0xe8>
1005f0c0:	2012      	movs	r0, #18
1005f0c2:	e7ea      	b.n	1005f09a <LL_Set_Extented_Advertising_Enable+0xbe>
1005f0c4:	2312      	movs	r3, #18
1005f0c6:	4601      	mov	r1, r0
1005f0c8:	461a      	mov	r2, r3
1005f0ca:	4019      	ands	r1, r3
1005f0cc:	2902      	cmp	r1, #2
1005f0ce:	d103      	bne.n	1005f0d8 <LL_Set_Extented_Advertising_Enable+0xfc>
1005f0d0:	2142      	movs	r1, #66	@ 0x42
1005f0d2:	5a69      	ldrh	r1, [r5, r1]
1005f0d4:	2900      	cmp	r1, #0
1005f0d6:	d040      	beq.n	1005f15a <LL_Set_Extented_Advertising_Enable+0x17e>
1005f0d8:	0700      	lsls	r0, r0, #28
1005f0da:	d50f      	bpl.n	1005f0fc <LL_Set_Extented_Advertising_Enable+0x120>
1005f0dc:	486d      	ldr	r0, [pc, #436]	@ (1005f294 <__arm_cp.24_0>)
1005f0de:	21be      	movs	r1, #190	@ 0xbe
1005f0e0:	5a69      	ldrh	r1, [r5, r1]
1005f0e2:	4281      	cmp	r1, r0
1005f0e4:	d001      	beq.n	1005f0ea <LL_Set_Extented_Advertising_Enable+0x10e>
1005f0e6:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005f0e8:	e000      	b.n	1005f0ec <LL_Set_Extented_Advertising_Enable+0x110>
1005f0ea:	2080      	movs	r0, #128	@ 0x80
1005f0ec:	2880      	cmp	r0, #128	@ 0x80
1005f0ee:	d901      	bls.n	1005f0f4 <LL_Set_Extented_Advertising_Enable+0x118>
1005f0f0:	4610      	mov	r0, r2
1005f0f2:	e7d2      	b.n	1005f09a <LL_Set_Extented_Advertising_Enable+0xbe>
1005f0f4:	900e      	str	r0, [sp, #56]	@ 0x38
1005f0f6:	2800      	cmp	r0, #0
1005f0f8:	4610      	mov	r0, r2
1005f0fa:	d0ce      	beq.n	1005f09a <LL_Set_Extented_Advertising_Enable+0xbe>
1005f0fc:	9814      	ldr	r0, [sp, #80]	@ 0x50
1005f0fe:	21ba      	movs	r1, #186	@ 0xba
1005f100:	5268      	strh	r0, [r5, r1]
1005f102:	267d      	movs	r6, #125	@ 0x7d
1005f104:	0171      	lsls	r1, r6, #5
1005f106:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005f108:	4351      	muls	r1, r2
1005f10a:	2294      	movs	r2, #148	@ 0x94
1005f10c:	50a9      	str	r1, [r5, r2]
1005f10e:	2800      	cmp	r0, #0
1005f110:	d001      	beq.n	1005f116 <LL_Set_Extented_Advertising_Enable+0x13a>
1005f112:	21cf      	movs	r1, #207	@ 0xcf
1005f114:	546f      	strb	r7, [r5, r1]
1005f116:	21bc      	movs	r1, #188	@ 0xbc
1005f118:	5268      	strh	r0, [r5, r1]
1005f11a:	4620      	mov	r0, r4
1005f11c:	f7ef fea6 	bl	1004ee6c <EADV_start_request_radio_tasks_ucfg>
1005f120:	2800      	cmp	r0, #0
1005f122:	d1ba      	bne.n	1005f09a <LL_Set_Extented_Advertising_Enable+0xbe>
1005f124:	4629      	mov	r1, r5
1005f126:	31d6      	adds	r1, #214	@ 0xd6
1005f128:	4628      	mov	r0, r5
1005f12a:	3064      	adds	r0, #100	@ 0x64
1005f12c:	462a      	mov	r2, r5
1005f12e:	3254      	adds	r2, #84	@ 0x54
1005f130:	676a      	str	r2, [r5, #116]	@ 0x74
1005f132:	67a8      	str	r0, [r5, #120]	@ 0x78
1005f134:	462b      	mov	r3, r5
1005f136:	3378      	adds	r3, #120	@ 0x78
1005f138:	7809      	ldrb	r1, [r1, #0]
1005f13a:	07c9      	lsls	r1, r1, #31
1005f13c:	930d      	str	r3, [sp, #52]	@ 0x34
1005f13e:	d10e      	bne.n	1005f15e <LL_Set_Extented_Advertising_Enable+0x182>
1005f140:	2100      	movs	r1, #0
1005f142:	6001      	str	r1, [r0, #0]
1005f144:	66a9      	str	r1, [r5, #104]	@ 0x68
1005f146:	4855      	ldr	r0, [pc, #340]	@ (1005f29c <__arm_cp.24_2>)
1005f148:	6801      	ldr	r1, [r0, #0]
1005f14a:	4620      	mov	r0, r4
1005f14c:	3065      	adds	r0, #101	@ 0x65
1005f14e:	2206      	movs	r2, #6
1005f150:	f7f3 fa80 	bl	10052654 <BLEPLAT_MemCpy>
1005f154:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005f156:	6800      	ldr	r0, [r0, #0]
1005f158:	e008      	b.n	1005f16c <LL_Set_Extented_Advertising_Enable+0x190>
1005f15a:	200c      	movs	r0, #12
1005f15c:	e79d      	b.n	1005f09a <LL_Set_Extented_Advertising_Enable+0xbe>
1005f15e:	218c      	movs	r1, #140	@ 0x8c
1005f160:	5869      	ldr	r1, [r5, r1]
1005f162:	462a      	mov	r2, r5
1005f164:	328c      	adds	r2, #140	@ 0x8c
1005f166:	6852      	ldr	r2, [r2, #4]
1005f168:	c006      	stmia	r0!, {r1, r2}
1005f16a:	3808      	subs	r0, #8
1005f16c:	4629      	mov	r1, r5
1005f16e:	3194      	adds	r1, #148	@ 0x94
1005f170:	910e      	str	r1, [sp, #56]	@ 0x38
1005f172:	2184      	movs	r1, #132	@ 0x84
1005f174:	5869      	ldr	r1, [r5, r1]
1005f176:	462a      	mov	r2, r5
1005f178:	3284      	adds	r2, #132	@ 0x84
1005f17a:	6852      	ldr	r2, [r2, #4]
1005f17c:	6081      	str	r1, [r0, #8]
1005f17e:	60c2      	str	r2, [r0, #12]
1005f180:	4620      	mov	r0, r4
1005f182:	f7ff fe11 	bl	1005eda8 <llc_eadv_generate_new_rpa_for_one_adv_set>
1005f186:	2800      	cmp	r0, #0
1005f188:	960c      	str	r6, [sp, #48]	@ 0x30
1005f18a:	d002      	beq.n	1005f192 <LL_Set_Extented_Advertising_Enable+0x1b6>
1005f18c:	f7fc fc59 	bl	1005ba42 <llc_priv_start_privacy_timer_ucfg_weak>
1005f190:	e006      	b.n	1005f1a0 <LL_Set_Extented_Advertising_Enable+0x1c4>
1005f192:	4628      	mov	r0, r5
1005f194:	3074      	adds	r0, #116	@ 0x74
1005f196:	6801      	ldr	r1, [r0, #0]
1005f198:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1005f19a:	681a      	ldr	r2, [r3, #0]
1005f19c:	6002      	str	r2, [r0, #0]
1005f19e:	6019      	str	r1, [r3, #0]
1005f1a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005f1a2:	4626      	mov	r6, r4
1005f1a4:	36ce      	adds	r6, #206	@ 0xce
1005f1a6:	4628      	mov	r0, r5
1005f1a8:	30b8      	adds	r0, #184	@ 0xb8
1005f1aa:	900d      	str	r0, [sp, #52]	@ 0x34
1005f1ac:	6808      	ldr	r0, [r1, #0]
1005f1ae:	2800      	cmp	r0, #0
1005f1b0:	d005      	beq.n	1005f1be <LL_Set_Extented_Advertising_Enable+0x1e2>
1005f1b2:	f7f3 fb1a 	bl	100527ea <BLEPLAT_GetCurrentSysTime>
1005f1b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005f1b8:	6811      	ldr	r1, [r2, #0]
1005f1ba:	1808      	adds	r0, r1, r0
1005f1bc:	6010      	str	r0, [r2, #0]
1005f1be:	7037      	strb	r7, [r6, #0]
1005f1c0:	20c4      	movs	r0, #196	@ 0xc4
1005f1c2:	5c29      	ldrb	r1, [r5, r0]
1005f1c4:	27d0      	movs	r7, #208	@ 0xd0
1005f1c6:	5de8      	ldrb	r0, [r5, r7]
1005f1c8:	2281      	movs	r2, #129	@ 0x81
1005f1ca:	920e      	str	r2, [sp, #56]	@ 0x38
1005f1cc:	9200      	str	r2, [sp, #0]
1005f1ce:	462e      	mov	r6, r5
1005f1d0:	3614      	adds	r6, #20
1005f1d2:	4622      	mov	r2, r4
1005f1d4:	4633      	mov	r3, r6
1005f1d6:	f7ff fd77 	bl	1005ecc8 <LL_eadv_BLUE_SM>
1005f1da:	5de8      	ldrb	r0, [r5, r7]
1005f1dc:	2125      	movs	r1, #37	@ 0x25
1005f1de:	f7f4 fec4 	bl	10053f6a <BLEPLAT_CNTR_SmSetDataLength>
1005f1e2:	462f      	mov	r7, r5
1005f1e4:	37d0      	adds	r7, #208	@ 0xd0
1005f1e6:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005f1e8:	8800      	ldrh	r0, [r0, #0]
1005f1ea:	06c0      	lsls	r0, r0, #27
1005f1ec:	d403      	bmi.n	1005f1f6 <LL_Set_Extented_Advertising_Enable+0x21a>
1005f1ee:	4620      	mov	r0, r4
1005f1f0:	f000 fd57 	bl	1005fca2 <LL_eadv_start_extended_ucfg_weak>
1005f1f4:	e042      	b.n	1005f27c <LL_Set_Extented_Advertising_Enable+0x2a0>
1005f1f6:	f7f3 faf8 	bl	100527ea <BLEPLAT_GetCurrentSysTime>
1005f1fa:	219c      	movs	r1, #156	@ 0x9c
1005f1fc:	910b      	str	r1, [sp, #44]	@ 0x2c
1005f1fe:	5068      	str	r0, [r5, r1]
1005f200:	f001 f812 	bl	10060228 <LL_get_tx_common_buffer_p>
1005f204:	9009      	str	r0, [sp, #36]	@ 0x24
1005f206:	f001 f817 	bl	10060238 <LL_get_rx_common_buffer_p>
1005f20a:	900a      	str	r0, [sp, #40]	@ 0x28
1005f20c:	7838      	ldrb	r0, [r7, #0]
1005f20e:	9008      	str	r0, [sp, #32]
1005f210:	2094      	movs	r0, #148	@ 0x94
1005f212:	2100      	movs	r1, #0
1005f214:	910d      	str	r1, [sp, #52]	@ 0x34
1005f216:	460a      	mov	r2, r1
1005f218:	f7f4 fa1c 	bl	10053654 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005f21c:	4603      	mov	r3, r0
1005f21e:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005f220:	9000      	str	r0, [sp, #0]
1005f222:	4620      	mov	r0, r4
1005f224:	9908      	ldr	r1, [sp, #32]
1005f226:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1005f228:	f7ff fcd3 	bl	1005ebd2 <LL_eadv_Blue_Tx>
1005f22c:	7838      	ldrb	r0, [r7, #0]
1005f22e:	9009      	str	r0, [sp, #36]	@ 0x24
1005f230:	2096      	movs	r0, #150	@ 0x96
1005f232:	2101      	movs	r1, #1
1005f234:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1005f236:	f7f4 fa0d 	bl	10053654 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005f23a:	4603      	mov	r3, r0
1005f23c:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005f23e:	9000      	str	r0, [sp, #0]
1005f240:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005f242:	9001      	str	r0, [sp, #4]
1005f244:	4630      	mov	r0, r6
1005f246:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005f248:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005f24a:	f7ff fcfd 	bl	1005ec48 <LL_eadv_Blue_Rx>
1005f24e:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
1005f250:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005f252:	582a      	ldr	r2, [r5, r0]
1005f254:	7838      	ldrb	r0, [r7, #0]
1005f256:	4b12      	ldr	r3, [pc, #72]	@ (1005f2a0 <__arm_cp.24_3>)
1005f258:	9307      	str	r3, [sp, #28]
1005f25a:	4b12      	ldr	r3, [pc, #72]	@ (1005f2a4 <__arm_cp.24_4>)
1005f25c:	9306      	str	r3, [sp, #24]
1005f25e:	4b12      	ldr	r3, [pc, #72]	@ (1005f2a8 <__arm_cp.24_5>)
1005f260:	9305      	str	r3, [sp, #20]
1005f262:	4b12      	ldr	r3, [pc, #72]	@ (1005f2ac <__arm_cp.24_6>)
1005f264:	9304      	str	r3, [sp, #16]
1005f266:	2314      	movs	r3, #20
1005f268:	9303      	str	r3, [sp, #12]
1005f26a:	231f      	movs	r3, #31
1005f26c:	ae00      	add	r6, sp, #0
1005f26e:	c60e      	stmia	r6!, {r1, r2, r3}
1005f270:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005f272:	00cb      	lsls	r3, r1, #3
1005f274:	4621      	mov	r1, r4
1005f276:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005f278:	f001 f86e 	bl	10060358 <LL_sched_enable_taskslot>
1005f27c:	249c      	movs	r4, #156	@ 0x9c
1005f27e:	5929      	ldr	r1, [r5, r4]
1005f280:	7838      	ldrb	r0, [r7, #0]
1005f282:	f001 f845 	bl	10060310 <LL_sched_set_anchor>
1005f286:	5928      	ldr	r0, [r5, r4]
1005f288:	7839      	ldrb	r1, [r7, #0]
1005f28a:	f001 faf5 	bl	10060878 <LL_sched_check_and_call_sched>
1005f28e:	2000      	movs	r0, #0
1005f290:	e703      	b.n	1005f09a <LL_Set_Extented_Advertising_Enable+0xbe>
1005f292:	46c0      	nop			@ (mov r8, r8)

1005f294 <__arm_cp.24_0>:
1005f294:	0000fffc 	.word	0x0000fffc

1005f298 <__arm_cp.24_1>:
1005f298:	0000ffff 	.word	0x0000ffff

1005f29c <__arm_cp.24_2>:
1005f29c:	2000241c 	.word	0x2000241c

1005f2a0 <__arm_cp.24_3>:
1005f2a0:	1005f4e5 	.word	0x1005f4e5

1005f2a4 <__arm_cp.24_4>:
1005f2a4:	1005f96d 	.word	0x1005f96d

1005f2a8 <__arm_cp.24_5>:
1005f2a8:	1005f7dd 	.word	0x1005f7dd

1005f2ac <__arm_cp.24_6>:
1005f2ac:	1005f4ed 	.word	0x1005f4ed

1005f2b0 <LL_Set_Extented_Advertising_Set_Random_Address>:
1005f2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f2b2:	460c      	mov	r4, r1
1005f2b4:	4606      	mov	r6, r0
1005f2b6:	f7ff fd35 	bl	1005ed24 <llc_get_advertising_set_index>
1005f2ba:	4605      	mov	r5, r0
1005f2bc:	4818      	ldr	r0, [pc, #96]	@ (1005f320 <__arm_cp.25_0>)
1005f2be:	4285      	cmp	r5, r0
1005f2c0:	d02b      	beq.n	1005f31a <LL_Set_Extented_Advertising_Set_Random_Address+0x6a>
1005f2c2:	9400      	str	r4, [sp, #0]
1005f2c4:	022c      	lsls	r4, r5, #8
1005f2c6:	f000 ffc5 	bl	10060254 <llc_get_linkms_cntxt_p>
1005f2ca:	6807      	ldr	r7, [r0, #0]
1005f2cc:	1938      	adds	r0, r7, r4
1005f2ce:	21be      	movs	r1, #190	@ 0xbe
1005f2d0:	5246      	strh	r6, [r0, r1]
1005f2d2:	21b8      	movs	r1, #184	@ 0xb8
1005f2d4:	5c40      	ldrb	r0, [r0, r1]
1005f2d6:	07c0      	lsls	r0, r0, #31
1005f2d8:	d007      	beq.n	1005f2ea <LL_Set_Extented_Advertising_Set_Random_Address+0x3a>
1005f2da:	0228      	lsls	r0, r5, #8
1005f2dc:	1838      	adds	r0, r7, r0
1005f2de:	21ce      	movs	r1, #206	@ 0xce
1005f2e0:	5c40      	ldrb	r0, [r0, r1]
1005f2e2:	2801      	cmp	r0, #1
1005f2e4:	d101      	bne.n	1005f2ea <LL_Set_Extented_Advertising_Set_Random_Address+0x3a>
1005f2e6:	250c      	movs	r5, #12
1005f2e8:	e018      	b.n	1005f31c <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1005f2ea:	480e      	ldr	r0, [pc, #56]	@ (1005f324 <__arm_cp.25_1>)
1005f2ec:	6800      	ldr	r0, [r0, #0]
1005f2ee:	3056      	adds	r0, #86	@ 0x56
1005f2f0:	2606      	movs	r6, #6
1005f2f2:	9c00      	ldr	r4, [sp, #0]
1005f2f4:	4621      	mov	r1, r4
1005f2f6:	4632      	mov	r2, r6
1005f2f8:	f7f3 f9ac 	bl	10052654 <BLEPLAT_MemCpy>
1005f2fc:	0228      	lsls	r0, r5, #8
1005f2fe:	1838      	adds	r0, r7, r0
1005f300:	218c      	movs	r1, #140	@ 0x8c
1005f302:	2201      	movs	r2, #1
1005f304:	5042      	str	r2, [r0, r1]
1005f306:	4601      	mov	r1, r0
1005f308:	318c      	adds	r1, #140	@ 0x8c
1005f30a:	2500      	movs	r5, #0
1005f30c:	604d      	str	r5, [r1, #4]
1005f30e:	308d      	adds	r0, #141	@ 0x8d
1005f310:	4621      	mov	r1, r4
1005f312:	4632      	mov	r2, r6
1005f314:	f7f3 f99e 	bl	10052654 <BLEPLAT_MemCpy>
1005f318:	e000      	b.n	1005f31c <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1005f31a:	2512      	movs	r5, #18
1005f31c:	4628      	mov	r0, r5
1005f31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005f320 <__arm_cp.25_0>:
1005f320:	0000ffff 	.word	0x0000ffff

1005f324 <__arm_cp.25_1>:
1005f324:	20002470 	.word	0x20002470

1005f328 <LL_eadv_update_did>:
1005f328:	b510      	push	{r4, lr}
1005f32a:	4604      	mov	r4, r0
1005f32c:	2000      	movs	r0, #0
1005f32e:	f003 fd41 	bl	10062db4 <Hal_Get_Random_Number>
1005f332:	4904      	ldr	r1, [pc, #16]	@ (1005f344 <__arm_cp.27_0>)
1005f334:	4001      	ands	r1, r0
1005f336:	8820      	ldrh	r0, [r4, #0]
1005f338:	1a40      	subs	r0, r0, r1
1005f33a:	4242      	negs	r2, r0
1005f33c:	4142      	adcs	r2, r0
1005f33e:	404a      	eors	r2, r1
1005f340:	8022      	strh	r2, [r4, #0]
1005f342:	bd10      	pop	{r4, pc}

1005f344 <__arm_cp.27_0>:
1005f344:	00000fff 	.word	0x00000fff

1005f348 <EADV_stop>:
1005f348:	b5b0      	push	{r4, r5, r7, lr}
1005f34a:	4604      	mov	r4, r0
1005f34c:	f3ef 8010 	mrs	r0, PRIMASK
1005f350:	b672      	cpsid	i
1005f352:	4625      	mov	r5, r4
1005f354:	35ce      	adds	r5, #206	@ 0xce
1005f356:	78a8      	ldrb	r0, [r5, #2]
1005f358:	f000 ffec 	bl	10060334 <LL_sched_set_cancel_request>
1005f35c:	20d1      	movs	r0, #209	@ 0xd1
1005f35e:	5c20      	ldrb	r0, [r4, r0]
1005f360:	f000 ffe8 	bl	10060334 <LL_sched_set_cancel_request>
1005f364:	b662      	cpsie	i
1005f366:	78a8      	ldrb	r0, [r5, #2]
1005f368:	f001 fa96 	bl	10060898 <LL_sched_check_and_wait_sched>
1005f36c:	20ce      	movs	r0, #206	@ 0xce
1005f36e:	2100      	movs	r1, #0
1005f370:	5221      	strh	r1, [r4, r0]
1005f372:	7aa8      	ldrb	r0, [r5, #10]
1005f374:	28ff      	cmp	r0, #255	@ 0xff
1005f376:	d001      	beq.n	1005f37c <EADV_stop+0x34>
1005f378:	f7fb fc93 	bl	1005aca2 <llc_conn_release_conn_idx>
1005f37c:	20ff      	movs	r0, #255	@ 0xff
1005f37e:	72a8      	strb	r0, [r5, #10]
1005f380:	7a28      	ldrb	r0, [r5, #8]
1005f382:	0780      	lsls	r0, r0, #30
1005f384:	d501      	bpl.n	1005f38a <EADV_stop+0x42>
1005f386:	f7fc fb5d 	bl	1005ba44 <llc_priv_stop_privacy_timer_ucfg_weak>
1005f38a:	bdb0      	pop	{r4, r5, r7, pc}

1005f38c <LL_Set_Advertising_Set_Random_Address>:
1005f38c:	b510      	push	{r4, lr}
1005f38e:	4604      	mov	r4, r0
1005f390:	f7fa f902 	bl	10059598 <scan_csr_ucfg_weak>
1005f394:	2801      	cmp	r0, #1
1005f396:	d105      	bne.n	1005f3a4 <LL_Set_Advertising_Set_Random_Address+0x18>
1005f398:	f7fc fb84 	bl	1005baa4 <llc_scan_get_cntxt_p>
1005f39c:	21eb      	movs	r1, #235	@ 0xeb
1005f39e:	5c40      	ldrb	r0, [r0, r1]
1005f3a0:	07c0      	lsls	r0, r0, #31
1005f3a2:	d106      	bne.n	1005f3b2 <LL_Set_Advertising_Set_Random_Address+0x26>
1005f3a4:	f7ff fdfc 	bl	1005efa0 <LL_LE_Set_Advertising_Parameters_Default>
1005f3a8:	4803      	ldr	r0, [pc, #12]	@ (1005f3b8 <__arm_cp.29_0>)
1005f3aa:	4621      	mov	r1, r4
1005f3ac:	f7ff ff80 	bl	1005f2b0 <LL_Set_Extented_Advertising_Set_Random_Address>
1005f3b0:	bd10      	pop	{r4, pc}
1005f3b2:	200c      	movs	r0, #12
1005f3b4:	bd10      	pop	{r4, pc}
1005f3b6:	46c0      	nop			@ (mov r8, r8)

1005f3b8 <__arm_cp.29_0>:
1005f3b8:	0000fffc 	.word	0x0000fffc

1005f3bc <ll_set_advertising_data_ptr>:
1005f3bc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005f3be:	9302      	str	r3, [sp, #8]
1005f3c0:	4614      	mov	r4, r2
1005f3c2:	460f      	mov	r7, r1
1005f3c4:	4605      	mov	r5, r0
1005f3c6:	f000 ff45 	bl	10060254 <llc_get_linkms_cntxt_p>
1005f3ca:	4606      	mov	r6, r0
1005f3cc:	4830      	ldr	r0, [pc, #192]	@ (1005f490 <__arm_cp.33_0>)
1005f3ce:	4285      	cmp	r5, r0
1005f3d0:	d101      	bne.n	1005f3d6 <ll_set_advertising_data_ptr+0x1a>
1005f3d2:	201f      	movs	r0, #31
1005f3d4:	e007      	b.n	1005f3e6 <ll_set_advertising_data_ptr+0x2a>
1005f3d6:	2001      	movs	r0, #1
1005f3d8:	2102      	movs	r1, #2
1005f3da:	f7f9 fff9 	bl	100593d0 <hci_get_set_legacy_ext_flag>
1005f3de:	2800      	cmp	r0, #0
1005f3e0:	d000      	beq.n	1005f3e4 <ll_set_advertising_data_ptr+0x28>
1005f3e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f3e4:	482b      	ldr	r0, [pc, #172]	@ (1005f494 <__arm_cp.33_1>)
1005f3e6:	2112      	movs	r1, #18
1005f3e8:	42a0      	cmp	r0, r4
1005f3ea:	d201      	bcs.n	1005f3f0 <ll_set_advertising_data_ptr+0x34>
1005f3ec:	4608      	mov	r0, r1
1005f3ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f3f0:	9101      	str	r1, [sp, #4]
1005f3f2:	4628      	mov	r0, r5
1005f3f4:	f7ff fc96 	bl	1005ed24 <llc_get_advertising_set_index>
1005f3f8:	0200      	lsls	r0, r0, #8
1005f3fa:	6831      	ldr	r1, [r6, #0]
1005f3fc:	180e      	adds	r6, r1, r0
1005f3fe:	4620      	mov	r0, r4
1005f400:	4631      	mov	r1, r6
1005f402:	f000 fc4c 	bl	1005fc9e <llc_eadv_max_supported_data_check_ucfg_weak>
1005f406:	2800      	cmp	r0, #0
1005f408:	d1eb      	bne.n	1005f3e2 <ll_set_advertising_data_ptr+0x26>
1005f40a:	20ce      	movs	r0, #206	@ 0xce
1005f40c:	5c31      	ldrb	r1, [r6, r0]
1005f40e:	2038      	movs	r0, #56	@ 0x38
1005f410:	5c30      	ldrb	r0, [r6, r0]
1005f412:	2f04      	cmp	r7, #4
1005f414:	d112      	bne.n	1005f43c <ll_set_advertising_data_ptr+0x80>
1005f416:	2900      	cmp	r1, #0
1005f418:	d038      	beq.n	1005f48c <ll_set_advertising_data_ptr+0xd0>
1005f41a:	2800      	cmp	r0, #0
1005f41c:	9a01      	ldr	r2, [sp, #4]
1005f41e:	d01b      	beq.n	1005f458 <ll_set_advertising_data_ptr+0x9c>
1005f420:	481b      	ldr	r0, [pc, #108]	@ (1005f490 <__arm_cp.33_0>)
1005f422:	4285      	cmp	r5, r0
1005f424:	d118      	bne.n	1005f458 <ll_set_advertising_data_ptr+0x9c>
1005f426:	8df0      	ldrh	r0, [r6, #46]	@ 0x2e
1005f428:	2800      	cmp	r0, #0
1005f42a:	d015      	beq.n	1005f458 <ll_set_advertising_data_ptr+0x9c>
1005f42c:	20b8      	movs	r0, #184	@ 0xb8
1005f42e:	5a30      	ldrh	r0, [r6, r0]
1005f430:	2110      	movs	r1, #16
1005f432:	4001      	ands	r1, r0
1005f434:	4321      	orrs	r1, r4
1005f436:	4610      	mov	r0, r2
1005f438:	d1d3      	bne.n	1005f3e2 <ll_set_advertising_data_ptr+0x26>
1005f43a:	e00f      	b.n	1005f45c <ll_set_advertising_data_ptr+0xa0>
1005f43c:	4635      	mov	r5, r6
1005f43e:	3538      	adds	r5, #56	@ 0x38
1005f440:	2900      	cmp	r1, #0
1005f442:	d011      	beq.n	1005f468 <ll_set_advertising_data_ptr+0xac>
1005f444:	2f03      	cmp	r7, #3
1005f446:	d109      	bne.n	1005f45c <ll_set_advertising_data_ptr+0xa0>
1005f448:	2002      	movs	r0, #2
1005f44a:	7028      	strb	r0, [r5, #0]
1005f44c:	86f4      	strh	r4, [r6, #54]	@ 0x36
1005f44e:	2000      	movs	r0, #0
1005f450:	86b0      	strh	r0, [r6, #52]	@ 0x34
1005f452:	9902      	ldr	r1, [sp, #8]
1005f454:	6331      	str	r1, [r6, #48]	@ 0x30
1005f456:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f458:	4610      	mov	r0, r2
1005f45a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f45c:	36b6      	adds	r6, #182	@ 0xb6
1005f45e:	4630      	mov	r0, r6
1005f460:	f7ff ff62 	bl	1005f328 <LL_eadv_update_did>
1005f464:	2000      	movs	r0, #0
1005f466:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f468:	4637      	mov	r7, r6
1005f46a:	3728      	adds	r7, #40	@ 0x28
1005f46c:	2800      	cmp	r0, #0
1005f46e:	9a02      	ldr	r2, [sp, #8]
1005f470:	d005      	beq.n	1005f47e <ll_set_advertising_data_ptr+0xc2>
1005f472:	6839      	ldr	r1, [r7, #0]
1005f474:	20a1      	movs	r0, #161	@ 0xa1
1005f476:	9a02      	ldr	r2, [sp, #8]
1005f478:	f004 fdb2 	bl	10063fe0 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1005f47c:	9a02      	ldr	r2, [sp, #8]
1005f47e:	603a      	str	r2, [r7, #0]
1005f480:	2001      	movs	r0, #1
1005f482:	7028      	strb	r0, [r5, #0]
1005f484:	85f4      	strh	r4, [r6, #46]	@ 0x2e
1005f486:	2000      	movs	r0, #0
1005f488:	85b0      	strh	r0, [r6, #44]	@ 0x2c
1005f48a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f48c:	9801      	ldr	r0, [sp, #4]
1005f48e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005f490 <__arm_cp.33_0>:
1005f490:	0000fffc 	.word	0x0000fffc

1005f494 <__arm_cp.33_1>:
1005f494:	00000672 	.word	0x00000672

1005f498 <ll_set_legacy_advertising_data_ptr>:
1005f498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f49a:	460c      	mov	r4, r1
1005f49c:	4605      	mov	r5, r0
1005f49e:	f000 fed9 	bl	10060254 <llc_get_linkms_cntxt_p>
1005f4a2:	4607      	mov	r7, r0
1005f4a4:	f7ff fd7c 	bl	1005efa0 <LL_LE_Set_Advertising_Parameters_Default>
1005f4a8:	4e0c      	ldr	r6, [pc, #48]	@ (1005f4dc <__arm_cp.36_0>)
1005f4aa:	4630      	mov	r0, r6
1005f4ac:	f7ff fc3a 	bl	1005ed24 <llc_get_advertising_set_index>
1005f4b0:	490b      	ldr	r1, [pc, #44]	@ (1005f4e0 <__arm_cp.36_1>)
1005f4b2:	4288      	cmp	r0, r1
1005f4b4:	d108      	bne.n	1005f4c8 <ll_set_legacy_advertising_data_ptr+0x30>
1005f4b6:	f7ff fd43 	bl	1005ef40 <LL_Context_ReturnFree>
1005f4ba:	28ff      	cmp	r0, #255	@ 0xff
1005f4bc:	d00b      	beq.n	1005f4d6 <ll_set_legacy_advertising_data_ptr+0x3e>
1005f4be:	0200      	lsls	r0, r0, #8
1005f4c0:	6839      	ldr	r1, [r7, #0]
1005f4c2:	1808      	adds	r0, r1, r0
1005f4c4:	21be      	movs	r1, #190	@ 0xbe
1005f4c6:	5246      	strh	r6, [r0, r1]
1005f4c8:	2103      	movs	r1, #3
1005f4ca:	4630      	mov	r0, r6
1005f4cc:	462a      	mov	r2, r5
1005f4ce:	4623      	mov	r3, r4
1005f4d0:	f7ff ff74 	bl	1005f3bc <ll_set_advertising_data_ptr>
1005f4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005f4d6:	2001      	movs	r0, #1
1005f4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005f4da:	46c0      	nop			@ (mov r8, r8)

1005f4dc <__arm_cp.36_0>:
1005f4dc:	0000fffc 	.word	0x0000fffc

1005f4e0 <__arm_cp.36_1>:
1005f4e0:	0000ffff 	.word	0x0000ffff

1005f4e4 <ADV_cancelslot>:
1005f4e4:	21d0      	movs	r1, #208	@ 0xd0
1005f4e6:	22ff      	movs	r2, #255	@ 0xff
1005f4e8:	5442      	strb	r2, [r0, r1]
1005f4ea:	4770      	bx	lr

1005f4ec <ADV_skiproutine>:
1005f4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f4ee:	b08f      	sub	sp, #60	@ 0x3c
1005f4f0:	4607      	mov	r7, r0
1005f4f2:	20d0      	movs	r0, #208	@ 0xd0
1005f4f4:	5c38      	ldrb	r0, [r7, r0]
1005f4f6:	232c      	movs	r3, #44	@ 0x2c
1005f4f8:	4358      	muls	r0, r3
1005f4fa:	4a68      	ldr	r2, [pc, #416]	@ (1005f69c <__arm_cp.40_0>)
1005f4fc:	6812      	ldr	r2, [r2, #0]
1005f4fe:	1810      	adds	r0, r2, r0
1005f500:	7d80      	ldrb	r0, [r0, #22]
1005f502:	463c      	mov	r4, r7
1005f504:	3494      	adds	r4, #148	@ 0x94
1005f506:	463a      	mov	r2, r7
1005f508:	32b4      	adds	r2, #180	@ 0xb4
1005f50a:	9205      	str	r2, [sp, #20]
1005f50c:	463e      	mov	r6, r7
1005f50e:	36d6      	adds	r6, #214	@ 0xd6
1005f510:	2814      	cmp	r0, #20
1005f512:	9604      	str	r6, [sp, #16]
1005f514:	9302      	str	r3, [sp, #8]
1005f516:	d10a      	bne.n	1005f52e <ADV_skiproutine+0x42>
1005f518:	f7f3 f967 	bl	100527ea <BLEPLAT_GetCurrentSysTime>
1005f51c:	4605      	mov	r5, r0
1005f51e:	f000 fed7 	bl	100602d0 <LL_sched_engine_return_actual_scheduler_margin>
1005f522:	9b05      	ldr	r3, [sp, #20]
1005f524:	1828      	adds	r0, r5, r0
1005f526:	3032      	adds	r0, #50	@ 0x32
1005f528:	60a0      	str	r0, [r4, #8]
1005f52a:	2501      	movs	r5, #1
1005f52c:	e01b      	b.n	1005f566 <ADV_skiproutine+0x7a>
1005f52e:	68a2      	ldr	r2, [r4, #8]
1005f530:	1856      	adds	r6, r2, r1
1005f532:	2500      	movs	r5, #0
1005f534:	4630      	mov	r0, r6
1005f536:	4611      	mov	r1, r2
1005f538:	f000 fec6 	bl	100602c8 <LL_sched_time_t1_ge_t2>
1005f53c:	2800      	cmp	r0, #0
1005f53e:	d005      	beq.n	1005f54c <ADV_skiproutine+0x60>
1005f540:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
1005f542:	68a1      	ldr	r1, [r4, #8]
1005f544:	180a      	adds	r2, r1, r0
1005f546:	60a2      	str	r2, [r4, #8]
1005f548:	1c6d      	adds	r5, r5, #1
1005f54a:	e7f3      	b.n	1005f534 <ADV_skiproutine+0x48>
1005f54c:	9b05      	ldr	r3, [sp, #20]
1005f54e:	8898      	ldrh	r0, [r3, #4]
1005f550:	0700      	lsls	r0, r0, #28
1005f552:	d408      	bmi.n	1005f566 <ADV_skiproutine+0x7a>
1005f554:	2001      	movs	r0, #1
1005f556:	f003 fc34 	bl	10062dc2 <Hal_Get_Random_Number32>
1005f55a:	9b05      	ldr	r3, [sp, #20]
1005f55c:	4950      	ldr	r1, [pc, #320]	@ (1005f6a0 <__arm_cp.40_1>)
1005f55e:	4001      	ands	r1, r0
1005f560:	68a0      	ldr	r0, [r4, #8]
1005f562:	1840      	adds	r0, r0, r1
1005f564:	60a0      	str	r0, [r4, #8]
1005f566:	8898      	ldrh	r0, [r3, #4]
1005f568:	2103      	movs	r1, #3
1005f56a:	4001      	ands	r1, r0
1005f56c:	1e48      	subs	r0, r1, #1
1005f56e:	4181      	sbcs	r1, r0
1005f570:	0048      	lsls	r0, r1, #1
1005f572:	8018      	strh	r0, [r3, #0]
1005f574:	7b98      	ldrb	r0, [r3, #14]
1005f576:	2201      	movs	r2, #1
1005f578:	4601      	mov	r1, r0
1005f57a:	9201      	str	r2, [sp, #4]
1005f57c:	4011      	ands	r1, r2
1005f57e:	0782      	lsls	r2, r0, #30
1005f580:	0fd2      	lsrs	r2, r2, #31
1005f582:	1889      	adds	r1, r1, r2
1005f584:	0740      	lsls	r0, r0, #29
1005f586:	0fc0      	lsrs	r0, r0, #31
1005f588:	1808      	adds	r0, r1, r0
1005f58a:	1e40      	subs	r0, r0, #1
1005f58c:	7798      	strb	r0, [r3, #30]
1005f58e:	4638      	mov	r0, r7
1005f590:	461e      	mov	r6, r3
1005f592:	f000 f88b 	bl	1005f6ac <UTIL_u8GetNextAdvChannel>
1005f596:	4601      	mov	r1, r0
1005f598:	7f30      	ldrb	r0, [r6, #28]
1005f59a:	f7f4 fd10 	bl	10053fbe <BLEPLAT_CNTR_SmSetRemapChan>
1005f59e:	7f30      	ldrb	r0, [r6, #28]
1005f5a0:	f7f4 fdcc 	bl	1005413c <BLEPLAT_CNTR_SmSetTxMode>
1005f5a4:	2000      	movs	r0, #0
1005f5a6:	9003      	str	r0, [sp, #12]
1005f5a8:	9904      	ldr	r1, [sp, #16]
1005f5aa:	7148      	strb	r0, [r1, #5]
1005f5ac:	4638      	mov	r0, r7
1005f5ae:	3028      	adds	r0, #40	@ 0x28
1005f5b0:	f7ff fafe 	bl	1005ebb0 <LL_eadv_switchbackupdata_data_struc>
1005f5b4:	4606      	mov	r6, r0
1005f5b6:	4638      	mov	r0, r7
1005f5b8:	303c      	adds	r0, #60	@ 0x3c
1005f5ba:	f7ff faf9 	bl	1005ebb0 <LL_eadv_switchbackupdata_data_struc>
1005f5be:	2e00      	cmp	r6, #0
1005f5c0:	9e04      	ldr	r6, [sp, #16]
1005f5c2:	d002      	beq.n	1005f5ca <ADV_skiproutine+0xde>
1005f5c4:	7931      	ldrb	r1, [r6, #4]
1005f5c6:	07c9      	lsls	r1, r1, #31
1005f5c8:	d104      	bne.n	1005f5d4 <ADV_skiproutine+0xe8>
1005f5ca:	2800      	cmp	r0, #0
1005f5cc:	d005      	beq.n	1005f5da <ADV_skiproutine+0xee>
1005f5ce:	7930      	ldrb	r0, [r6, #4]
1005f5d0:	0780      	lsls	r0, r0, #30
1005f5d2:	d502      	bpl.n	1005f5da <ADV_skiproutine+0xee>
1005f5d4:	4638      	mov	r0, r7
1005f5d6:	f7ff fbe7 	bl	1005eda8 <llc_eadv_generate_new_rpa_for_one_adv_set>
1005f5da:	68a1      	ldr	r1, [r4, #8]
1005f5dc:	6820      	ldr	r0, [r4, #0]
1005f5de:	9b05      	ldr	r3, [sp, #20]
1005f5e0:	88da      	ldrh	r2, [r3, #6]
1005f5e2:	2a00      	cmp	r2, #0
1005f5e4:	d102      	bne.n	1005f5ec <ADV_skiproutine+0x100>
1005f5e6:	7eda      	ldrb	r2, [r3, #27]
1005f5e8:	2a01      	cmp	r2, #1
1005f5ea:	d003      	beq.n	1005f5f4 <ADV_skiproutine+0x108>
1005f5ec:	4288      	cmp	r0, r1
1005f5ee:	da4c      	bge.n	1005f68a <ADV_skiproutine+0x19e>
1005f5f0:	2800      	cmp	r0, #0
1005f5f2:	d04a      	beq.n	1005f68a <ADV_skiproutine+0x19e>
1005f5f4:	7e98      	ldrb	r0, [r3, #26]
1005f5f6:	2800      	cmp	r0, #0
1005f5f8:	d047      	beq.n	1005f68a <ADV_skiproutine+0x19e>
1005f5fa:	8898      	ldrh	r0, [r3, #4]
1005f5fc:	0700      	lsls	r0, r0, #28
1005f5fe:	d520      	bpl.n	1005f642 <ADV_skiproutine+0x156>
1005f600:	a80d      	add	r0, sp, #52	@ 0x34
1005f602:	9000      	str	r0, [sp, #0]
1005f604:	9903      	ldr	r1, [sp, #12]
1005f606:	8081      	strh	r1, [r0, #4]
1005f608:	910d      	str	r1, [sp, #52]	@ 0x34
1005f60a:	a806      	add	r0, sp, #24
1005f60c:	9a01      	ldr	r2, [sp, #4]
1005f60e:	7642      	strb	r2, [r0, #25]
1005f610:	223c      	movs	r2, #60	@ 0x3c
1005f612:	7682      	strb	r2, [r0, #26]
1005f614:	22ff      	movs	r2, #255	@ 0xff
1005f616:	7582      	strb	r2, [r0, #22]
1005f618:	81c1      	strh	r1, [r0, #14]
1005f61a:	4a22      	ldr	r2, [pc, #136]	@ (1005f6a4 <__arm_cp.40_2>)
1005f61c:	8282      	strh	r2, [r0, #20]
1005f61e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
1005f620:	7a13      	ldrb	r3, [r2, #8]
1005f622:	7603      	strb	r3, [r0, #24]
1005f624:	8181      	strh	r1, [r0, #12]
1005f626:	75c1      	strb	r1, [r0, #23]
1005f628:	9b00      	ldr	r3, [sp, #0]
1005f62a:	9307      	str	r3, [sp, #28]
1005f62c:	3209      	adds	r2, #9
1005f62e:	9206      	str	r2, [sp, #24]
1005f630:	910a      	str	r1, [sp, #40]	@ 0x28
1005f632:	9308      	str	r3, [sp, #32]
1005f634:	f7fb f832 	bl	1005a69c <llc_conn_push_connection_complete_event>
1005f638:	7830      	ldrb	r0, [r6, #0]
1005f63a:	0780      	lsls	r0, r0, #30
1005f63c:	d501      	bpl.n	1005f642 <ADV_skiproutine+0x156>
1005f63e:	f7fc fa01 	bl	1005ba44 <llc_priv_stop_privacy_timer_ucfg_weak>
1005f642:	2002      	movs	r0, #2
1005f644:	f7f9 fed2 	bl	100593ec <hci_check_legacy_ext_flag>
1005f648:	2801      	cmp	r0, #1
1005f64a:	d119      	bne.n	1005f680 <ADV_skiproutine+0x194>
1005f64c:	9b05      	ldr	r3, [sp, #20]
1005f64e:	88da      	ldrh	r2, [r3, #6]
1005f650:	2a00      	cmp	r2, #0
1005f652:	d001      	beq.n	1005f658 <ADV_skiproutine+0x16c>
1005f654:	203c      	movs	r0, #60	@ 0x3c
1005f656:	e000      	b.n	1005f65a <ADV_skiproutine+0x16e>
1005f658:	2043      	movs	r0, #67	@ 0x43
1005f65a:	9001      	str	r0, [sp, #4]
1005f65c:	4812      	ldr	r0, [pc, #72]	@ (1005f6a8 <__arm_cp.40_3>)
1005f65e:	6800      	ldr	r0, [r0, #0]
1005f660:	9902      	ldr	r1, [sp, #8]
1005f662:	5c40      	ldrb	r0, [r0, r1]
1005f664:	0100      	lsls	r0, r0, #4
1005f666:	43c0      	mvns	r0, r0
1005f668:	4619      	mov	r1, r3
1005f66a:	23a1      	movs	r3, #161	@ 0xa1
1005f66c:	4303      	orrs	r3, r0
1005f66e:	20b1      	movs	r0, #177	@ 0xb1
1005f670:	4018      	ands	r0, r3
1005f672:	7a0b      	ldrb	r3, [r1, #8]
1005f674:	1a9a      	subs	r2, r3, r2
1005f676:	b2d3      	uxtb	r3, r2
1005f678:	7a8a      	ldrb	r2, [r1, #10]
1005f67a:	9901      	ldr	r1, [sp, #4]
1005f67c:	f000 f85e 	bl	1005f73c <hci_le_advertising_set_terminated_event_push>
1005f680:	4638      	mov	r0, r7
1005f682:	f000 f895 	bl	1005f7b0 <EADV_stop_isr>
1005f686:	68a1      	ldr	r1, [r4, #8]
1005f688:	9b05      	ldr	r3, [sp, #20]
1005f68a:	7f18      	ldrb	r0, [r3, #28]
1005f68c:	f000 fe40 	bl	10060310 <LL_sched_set_anchor>
1005f690:	9803      	ldr	r0, [sp, #12]
1005f692:	7170      	strb	r0, [r6, #5]
1005f694:	4628      	mov	r0, r5
1005f696:	b00f      	add	sp, #60	@ 0x3c
1005f698:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005f69a:	46c0      	nop			@ (mov r8, r8)

1005f69c <__arm_cp.40_0>:
1005f69c:	20002478 	.word	0x20002478

1005f6a0 <__arm_cp.40_1>:
1005f6a0:	00000fff 	.word	0x00000fff

1005f6a4 <__arm_cp.40_2>:
1005f6a4:	0000ffff 	.word	0x0000ffff

1005f6a8 <__arm_cp.40_3>:
1005f6a8:	2000241c 	.word	0x2000241c

1005f6ac <UTIL_u8GetNextAdvChannel>:
1005f6ac:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005f6ae:	4604      	mov	r4, r0
1005f6b0:	20c2      	movs	r0, #194	@ 0xc2
1005f6b2:	5c27      	ldrb	r7, [r4, r0]
1005f6b4:	2501      	movs	r5, #1
1005f6b6:	403d      	ands	r5, r7
1005f6b8:	07ba      	lsls	r2, r7, #30
1005f6ba:	0fd0      	lsrs	r0, r2, #31
1005f6bc:	1828      	adds	r0, r5, r0
1005f6be:	0779      	lsls	r1, r7, #29
1005f6c0:	0fc9      	lsrs	r1, r1, #31
1005f6c2:	1840      	adds	r0, r0, r1
1005f6c4:	1e40      	subs	r0, r0, #1
1005f6c6:	b2c0      	uxtb	r0, r0
1005f6c8:	34c2      	adds	r4, #194	@ 0xc2
1005f6ca:	7c26      	ldrb	r6, [r4, #16]
1005f6cc:	42b0      	cmp	r0, r6
1005f6ce:	d10f      	bne.n	1005f6f0 <UTIL_u8GetNextAdvChannel+0x44>
1005f6d0:	9201      	str	r2, [sp, #4]
1005f6d2:	2001      	movs	r0, #1
1005f6d4:	9002      	str	r0, [sp, #8]
1005f6d6:	f003 fb6d 	bl	10062db4 <Hal_Get_Random_Number>
1005f6da:	2e01      	cmp	r6, #1
1005f6dc:	d00a      	beq.n	1005f6f4 <UTIL_u8GetNextAdvChannel+0x48>
1005f6de:	2e02      	cmp	r6, #2
1005f6e0:	d10e      	bne.n	1005f700 <UTIL_u8GetNextAdvChannel+0x54>
1005f6e2:	b2c0      	uxtb	r0, r0
1005f6e4:	2106      	movs	r1, #6
1005f6e6:	f7e0 fe31 	bl	1004034c <__aeabi_uidivmod>
1005f6ea:	a012      	add	r0, pc, #72	@ (adr r0, 1005f734 <UTIL_u8GetNextAdvChannel+0x88>)
1005f6ec:	5c40      	ldrb	r0, [r0, r1]
1005f6ee:	e012      	b.n	1005f716 <UTIL_u8GetNextAdvChannel+0x6a>
1005f6f0:	7c60      	ldrb	r0, [r4, #17]
1005f6f2:	e011      	b.n	1005f718 <UTIL_u8GetNextAdvChannel+0x6c>
1005f6f4:	9902      	ldr	r1, [sp, #8]
1005f6f6:	4008      	ands	r0, r1
1005f6f8:	2d00      	cmp	r5, #0
1005f6fa:	d104      	bne.n	1005f706 <UTIL_u8GetNextAdvChannel+0x5a>
1005f6fc:	a10c      	add	r1, pc, #48	@ (adr r1, 1005f730 <UTIL_u8GetNextAdvChannel+0x84>)
1005f6fe:	e008      	b.n	1005f712 <UTIL_u8GetNextAdvChannel+0x66>
1005f700:	08b8      	lsrs	r0, r7, #2
1005f702:	1a38      	subs	r0, r7, r0
1005f704:	e007      	b.n	1005f716 <UTIL_u8GetNextAdvChannel+0x6a>
1005f706:	9901      	ldr	r1, [sp, #4]
1005f708:	2900      	cmp	r1, #0
1005f70a:	d401      	bmi.n	1005f710 <UTIL_u8GetNextAdvChannel+0x64>
1005f70c:	a107      	add	r1, pc, #28	@ (adr r1, 1005f72c <UTIL_u8GetNextAdvChannel+0x80>)
1005f70e:	e000      	b.n	1005f712 <UTIL_u8GetNextAdvChannel+0x66>
1005f710:	a105      	add	r1, pc, #20	@ (adr r1, 1005f728 <UTIL_u8GetNextAdvChannel+0x7c>)
1005f712:	1808      	adds	r0, r1, r0
1005f714:	7800      	ldrb	r0, [r0, #0]
1005f716:	7460      	strb	r0, [r4, #17]
1005f718:	0071      	lsls	r1, r6, #1
1005f71a:	b2c2      	uxtb	r2, r0
1005f71c:	40ca      	lsrs	r2, r1
1005f71e:	2003      	movs	r0, #3
1005f720:	4010      	ands	r0, r2
1005f722:	3024      	adds	r0, #36	@ 0x24
1005f724:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f726:	46c0      	nop			@ (mov r8, r8)
1005f728:	00000906 	.word	0x00000906
1005f72c:	00000d07 	.word	0x00000d07
1005f730:	00000e0b 	.word	0x00000e0b
1005f734:	2d271e1b 	.word	0x2d271e1b
1005f738:	00003936 	.word	0x00003936

1005f73c <hci_le_advertising_set_terminated_event_push>:
1005f73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f73e:	461f      	mov	r7, r3
1005f740:	4616      	mov	r6, r2
1005f742:	460d      	mov	r5, r1
1005f744:	4604      	mov	r4, r0
1005f746:	06c0      	lsls	r0, r0, #27
1005f748:	d40b      	bmi.n	1005f762 <hci_le_advertising_set_terminated_event_push+0x26>
1005f74a:	4817      	ldr	r0, [pc, #92]	@ (1005f7a8 <__arm_cp.42_0>)
1005f74c:	6800      	ldr	r0, [r0, #0]
1005f74e:	213d      	movs	r1, #61	@ 0x3d
1005f750:	5c41      	ldrb	r1, [r0, r1]
1005f752:	0689      	lsls	r1, r1, #26
1005f754:	d527      	bpl.n	1005f7a6 <hci_le_advertising_set_terminated_event_push+0x6a>
1005f756:	303d      	adds	r0, #61	@ 0x3d
1005f758:	7ac0      	ldrb	r0, [r0, #11]
1005f75a:	0780      	lsls	r0, r0, #30
1005f75c:	d523      	bpl.n	1005f7a6 <hci_le_advertising_set_terminated_event_push+0x6a>
1005f75e:	221f      	movs	r2, #31
1005f760:	e002      	b.n	1005f768 <hci_le_advertising_set_terminated_event_push+0x2c>
1005f762:	20bf      	movs	r0, #191	@ 0xbf
1005f764:	4004      	ands	r4, r0
1005f766:	2211      	movs	r2, #17
1005f768:	4810      	ldr	r0, [pc, #64]	@ (1005f7ac <__arm_cp.42_1>)
1005f76a:	6800      	ldr	r0, [r0, #0]
1005f76c:	0761      	lsls	r1, r4, #29
1005f76e:	0ec9      	lsrs	r1, r1, #27
1005f770:	1840      	adds	r0, r0, r1
1005f772:	6900      	ldr	r0, [r0, #16]
1005f774:	2303      	movs	r3, #3
1005f776:	4621      	mov	r1, r4
1005f778:	f7f5 fcb8 	bl	100550ec <aci_event_fifo_push_header>
1005f77c:	2800      	cmp	r0, #0
1005f77e:	d012      	beq.n	1005f7a6 <hci_le_advertising_set_terminated_event_push+0x6a>
1005f780:	4601      	mov	r1, r0
1005f782:	200f      	movs	r0, #15
1005f784:	72c8      	strb	r0, [r1, #11]
1005f786:	20ff      	movs	r0, #255	@ 0xff
1005f788:	7288      	strb	r0, [r1, #10]
1005f78a:	730f      	strb	r7, [r1, #12]
1005f78c:	724e      	strb	r6, [r1, #9]
1005f78e:	720d      	strb	r5, [r1, #8]
1005f790:	2012      	movs	r0, #18
1005f792:	71c8      	strb	r0, [r1, #7]
1005f794:	2006      	movs	r0, #6
1005f796:	7188      	strb	r0, [r1, #6]
1005f798:	203e      	movs	r0, #62	@ 0x3e
1005f79a:	7148      	strb	r0, [r1, #5]
1005f79c:	2004      	movs	r0, #4
1005f79e:	7108      	strb	r0, [r1, #4]
1005f7a0:	4620      	mov	r0, r4
1005f7a2:	f7f5 fd40 	bl	10055226 <aci_event_fifo_push>
1005f7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005f7a8 <__arm_cp.42_0>:
1005f7a8:	20002470 	.word	0x20002470

1005f7ac <__arm_cp.42_1>:
1005f7ac:	20002420 	.word	0x20002420

1005f7b0 <EADV_stop_isr>:
1005f7b0:	b5b0      	push	{r4, r5, r7, lr}
1005f7b2:	4604      	mov	r4, r0
1005f7b4:	20d1      	movs	r0, #209	@ 0xd1
1005f7b6:	5c20      	ldrb	r0, [r4, r0]
1005f7b8:	f000 fdbc 	bl	10060334 <LL_sched_set_cancel_request>
1005f7bc:	4625      	mov	r5, r4
1005f7be:	35ce      	adds	r5, #206	@ 0xce
1005f7c0:	78a8      	ldrb	r0, [r5, #2]
1005f7c2:	f000 fdb7 	bl	10060334 <LL_sched_set_cancel_request>
1005f7c6:	20ce      	movs	r0, #206	@ 0xce
1005f7c8:	2100      	movs	r1, #0
1005f7ca:	5221      	strh	r1, [r4, r0]
1005f7cc:	7aa8      	ldrb	r0, [r5, #10]
1005f7ce:	28ff      	cmp	r0, #255	@ 0xff
1005f7d0:	d001      	beq.n	1005f7d6 <EADV_stop_isr+0x26>
1005f7d2:	f7fb fa66 	bl	1005aca2 <llc_conn_release_conn_idx>
1005f7d6:	20ff      	movs	r0, #255	@ 0xff
1005f7d8:	72a8      	strb	r0, [r5, #10]
1005f7da:	bdb0      	pop	{r4, r5, r7, pc}

1005f7dc <ADV_createslot>:
1005f7dc:	b570      	push	{r4, r5, r6, lr}
1005f7de:	4604      	mov	r4, r0
1005f7e0:	20c5      	movs	r0, #197	@ 0xc5
1005f7e2:	5c20      	ldrb	r0, [r4, r0]
1005f7e4:	f7fc f9be 	bl	1005bb64 <llc_convert_hci_phy_enum_to_hw_phy>
1005f7e8:	4605      	mov	r5, r0
1005f7ea:	4626      	mov	r6, r4
1005f7ec:	36c5      	adds	r6, #197	@ 0xc5
1005f7ee:	7af0      	ldrb	r0, [r6, #11]
1005f7f0:	4629      	mov	r1, r5
1005f7f2:	f7f4 fcc4 	bl	1005417e <BLEPLAT_CNTR_SmSetTxPhy>
1005f7f6:	7af0      	ldrb	r0, [r6, #11]
1005f7f8:	4629      	mov	r1, r5
1005f7fa:	f7f4 fc54 	bl	100540a6 <BLEPLAT_CNTR_SmSetRxPhy>
1005f7fe:	f7f3 ffa0 	bl	10053742 <BLEPLAT_CNTR_GlobEnableBlue>
1005f802:	f000 fd11 	bl	10060228 <LL_get_tx_common_buffer_p>
1005f806:	4602      	mov	r2, r0
1005f808:	7db0      	ldrb	r0, [r6, #22]
1005f80a:	4621      	mov	r1, r4
1005f80c:	f000 f801 	bl	1005f812 <EADV_vPrepareAdvOrRspLegacyPacket>
1005f810:	bd70      	pop	{r4, r5, r6, pc}

1005f812 <EADV_vPrepareAdvOrRspLegacyPacket>:
1005f812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f814:	4614      	mov	r4, r2
1005f816:	460d      	mov	r5, r1
1005f818:	4606      	mov	r6, r0
1005f81a:	460f      	mov	r7, r1
1005f81c:	37b8      	adds	r7, #184	@ 0xb8
1005f81e:	2004      	movs	r0, #4
1005f820:	2e00      	cmp	r6, #0
1005f822:	4601      	mov	r1, r0
1005f824:	d10d      	bne.n	1005f842 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005f826:	8839      	ldrh	r1, [r7, #0]
1005f828:	074a      	lsls	r2, r1, #29
1005f82a:	d407      	bmi.n	1005f83c <EADV_vPrepareAdvOrRspLegacyPacket+0x2a>
1005f82c:	2203      	movs	r2, #3
1005f82e:	4011      	ands	r1, r2
1005f830:	424a      	negs	r2, r1
1005f832:	414a      	adcs	r2, r1
1005f834:	2902      	cmp	r1, #2
1005f836:	d003      	beq.n	1005f840 <EADV_vPrepareAdvOrRspLegacyPacket+0x2e>
1005f838:	0051      	lsls	r1, r2, #1
1005f83a:	e002      	b.n	1005f842 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005f83c:	2101      	movs	r1, #1
1005f83e:	e000      	b.n	1005f842 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005f840:	2106      	movs	r1, #6
1005f842:	7021      	strb	r1, [r4, #0]
1005f844:	2e00      	cmp	r6, #0
1005f846:	d107      	bne.n	1005f858 <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1005f848:	8839      	ldrh	r1, [r7, #0]
1005f84a:	4001      	ands	r1, r0
1005f84c:	d104      	bne.n	1005f858 <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1005f84e:	202e      	movs	r0, #46	@ 0x2e
1005f850:	5c28      	ldrb	r0, [r5, r0]
1005f852:	1d80      	adds	r0, r0, #6
1005f854:	7060      	strb	r0, [r4, #1]
1005f856:	e00f      	b.n	1005f878 <EADV_vPrepareAdvOrRspLegacyPacket+0x66>
1005f858:	2e00      	cmp	r6, #0
1005f85a:	d004      	beq.n	1005f866 <EADV_vPrepareAdvOrRspLegacyPacket+0x54>
1005f85c:	4628      	mov	r0, r5
1005f85e:	3042      	adds	r0, #66	@ 0x42
1005f860:	7800      	ldrb	r0, [r0, #0]
1005f862:	1d80      	adds	r0, r0, #6
1005f864:	e000      	b.n	1005f868 <EADV_vPrepareAdvOrRspLegacyPacket+0x56>
1005f866:	200c      	movs	r0, #12
1005f868:	7060      	strb	r0, [r4, #1]
1005f86a:	4620      	mov	r0, r4
1005f86c:	3008      	adds	r0, #8
1005f86e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005f870:	3109      	adds	r1, #9
1005f872:	2206      	movs	r2, #6
1005f874:	f7f2 feee 	bl	10052654 <BLEPLAT_MemCpy>
1005f878:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005f87a:	1ca0      	adds	r0, r4, #2
1005f87c:	1c49      	adds	r1, r1, #1
1005f87e:	2206      	movs	r2, #6
1005f880:	f7f2 fee8 	bl	10052654 <BLEPLAT_MemCpy>
1005f884:	7820      	ldrb	r0, [r4, #0]
1005f886:	212f      	movs	r1, #47	@ 0x2f
1005f888:	4001      	ands	r1, r0
1005f88a:	7021      	strb	r1, [r4, #0]
1005f88c:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1005f88e:	7800      	ldrb	r0, [r0, #0]
1005f890:	07c0      	lsls	r0, r0, #31
1005f892:	0e40      	lsrs	r0, r0, #25
1005f894:	1840      	adds	r0, r0, r1
1005f896:	7020      	strb	r0, [r4, #0]
1005f898:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005f89a:	7a09      	ldrb	r1, [r1, #8]
1005f89c:	01c9      	lsls	r1, r1, #7
1005f89e:	1808      	adds	r0, r1, r0
1005f8a0:	7020      	strb	r0, [r4, #0]
1005f8a2:	f000 f9ed 	bl	1005fc80 <llc_get_channel_sel_algo2_enabled>
1005f8a6:	7821      	ldrb	r1, [r4, #0]
1005f8a8:	0140      	lsls	r0, r0, #5
1005f8aa:	4308      	orrs	r0, r1
1005f8ac:	7020      	strb	r0, [r4, #0]
1005f8ae:	4271      	negs	r1, r6
1005f8b0:	4171      	adcs	r1, r6
1005f8b2:	8838      	ldrh	r0, [r7, #0]
1005f8b4:	2204      	movs	r2, #4
1005f8b6:	4002      	ands	r2, r0
1005f8b8:	0890      	lsrs	r0, r2, #2
1005f8ba:	4008      	ands	r0, r1
1005f8bc:	d101      	bne.n	1005f8c2 <EADV_vPrepareAdvOrRspLegacyPacket+0xb0>
1005f8be:	2708      	movs	r7, #8
1005f8c0:	e000      	b.n	1005f8c4 <EADV_vPrepareAdvOrRspLegacyPacket+0xb2>
1005f8c2:	270e      	movs	r7, #14
1005f8c4:	2800      	cmp	r0, #0
1005f8c6:	d001      	beq.n	1005f8cc <EADV_vPrepareAdvOrRspLegacyPacket+0xba>
1005f8c8:	200c      	movs	r0, #12
1005f8ca:	e011      	b.n	1005f8f0 <EADV_vPrepareAdvOrRspLegacyPacket+0xde>
1005f8cc:	2e00      	cmp	r6, #0
1005f8ce:	d001      	beq.n	1005f8d4 <EADV_vPrepareAdvOrRspLegacyPacket+0xc2>
1005f8d0:	203c      	movs	r0, #60	@ 0x3c
1005f8d2:	e000      	b.n	1005f8d6 <EADV_vPrepareAdvOrRspLegacyPacket+0xc4>
1005f8d4:	2028      	movs	r0, #40	@ 0x28
1005f8d6:	5829      	ldr	r1, [r5, r0]
1005f8d8:	2e00      	cmp	r6, #0
1005f8da:	d001      	beq.n	1005f8e0 <EADV_vPrepareAdvOrRspLegacyPacket+0xce>
1005f8dc:	2042      	movs	r0, #66	@ 0x42
1005f8de:	e000      	b.n	1005f8e2 <EADV_vPrepareAdvOrRspLegacyPacket+0xd0>
1005f8e0:	202e      	movs	r0, #46	@ 0x2e
1005f8e2:	5a2d      	ldrh	r5, [r5, r0]
1005f8e4:	19e0      	adds	r0, r4, r7
1005f8e6:	462a      	mov	r2, r5
1005f8e8:	f7f2 feb4 	bl	10052654 <BLEPLAT_MemCpy>
1005f8ec:	1978      	adds	r0, r7, r5
1005f8ee:	1e80      	subs	r0, r0, #2
1005f8f0:	7060      	strb	r0, [r4, #1]
1005f8f2:	2000      	movs	r0, #0
1005f8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1005f8f8 <ADV_ISR_connect_request_received>:
1005f8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f8fa:	b085      	sub	sp, #20
1005f8fc:	4616      	mov	r6, r2
1005f8fe:	460d      	mov	r5, r1
1005f900:	4604      	mov	r4, r0
1005f902:	f7f3 ffff 	bl	10053904 <BLEPLAT_CNTR_PacketClrPllTrig>
1005f906:	f7f2 ffb1 	bl	1005286c <BLEPLAT_ClearRadioTimerValue>
1005f90a:	2003      	movs	r0, #3
1005f90c:	43c0      	mvns	r0, r0
1005f90e:	1cc1      	adds	r1, r0, #3
1005f910:	4668      	mov	r0, sp
1005f912:	8101      	strh	r1, [r0, #8]
1005f914:	2101      	movs	r1, #1
1005f916:	8201      	strh	r1, [r0, #16]
1005f918:	7341      	strb	r1, [r0, #13]
1005f91a:	21be      	movs	r1, #190	@ 0xbe
1005f91c:	5a61      	ldrh	r1, [r4, r1]
1005f91e:	7281      	strb	r1, [r0, #10]
1005f920:	4627      	mov	r7, r4
1005f922:	37be      	adds	r7, #190	@ 0xbe
1005f924:	7eba      	ldrb	r2, [r7, #26]
1005f926:	72c2      	strb	r2, [r0, #11]
1005f928:	7cba      	ldrb	r2, [r7, #18]
1005f92a:	7382      	strb	r2, [r0, #14]
1005f92c:	4a0e      	ldr	r2, [pc, #56]	@ (1005f968 <__arm_cp.47_0>)
1005f92e:	1a89      	subs	r1, r1, r2
1005f930:	1e4a      	subs	r2, r1, #1
1005f932:	4191      	sbcs	r1, r2
1005f934:	73c1      	strb	r1, [r0, #15]
1005f936:	7301      	strb	r1, [r0, #12]
1005f938:	9601      	str	r6, [sp, #4]
1005f93a:	9500      	str	r5, [sp, #0]
1005f93c:	f7fb f9ec 	bl	1005ad18 <llc_conn_go_to_connect>
1005f940:	4620      	mov	r0, r4
1005f942:	3028      	adds	r0, #40	@ 0x28
1005f944:	f7ff f934 	bl	1005ebb0 <LL_eadv_switchbackupdata_data_struc>
1005f948:	343c      	adds	r4, #60	@ 0x3c
1005f94a:	4620      	mov	r0, r4
1005f94c:	f7ff f930 	bl	1005ebb0 <LL_eadv_switchbackupdata_data_struc>
1005f950:	2000      	movs	r0, #0
1005f952:	7438      	strb	r0, [r7, #16]
1005f954:	7cb8      	ldrb	r0, [r7, #18]
1005f956:	f000 fd5d 	bl	10060414 <LL_sched_engine>
1005f95a:	7e38      	ldrb	r0, [r7, #24]
1005f95c:	0780      	lsls	r0, r0, #30
1005f95e:	d501      	bpl.n	1005f964 <ADV_ISR_connect_request_received+0x6c>
1005f960:	f7fc f870 	bl	1005ba44 <llc_priv_stop_privacy_timer_ucfg_weak>
1005f964:	b005      	add	sp, #20
1005f966:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f968 <__arm_cp.47_0>:
1005f968:	0000fffc 	.word	0x0000fffc

1005f96c <ADV_ISR>:
1005f96c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f96e:	b08d      	sub	sp, #52	@ 0x34
1005f970:	4605      	mov	r5, r0
1005f972:	f000 fc61 	bl	10060238 <LL_get_rx_common_buffer_p>
1005f976:	9006      	str	r0, [sp, #24]
1005f978:	4c87      	ldr	r4, [pc, #540]	@ (1005fb98 <__arm_cp.48_0>)
1005f97a:	6820      	ldr	r0, [r4, #0]
1005f97c:	f7f3 ff7b 	bl	10053876 <BLEPLAT_CNTR_IntGetIntStatusRxOk>
1005f980:	4606      	mov	r6, r0
1005f982:	6820      	ldr	r0, [r4, #0]
1005f984:	f7f3 ff8e 	bl	100538a4 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1005f988:	4607      	mov	r7, r0
1005f98a:	20d0      	movs	r0, #208	@ 0xd0
1005f98c:	5c28      	ldrb	r0, [r5, r0]
1005f98e:	212c      	movs	r1, #44	@ 0x2c
1005f990:	4341      	muls	r1, r0
1005f992:	4a82      	ldr	r2, [pc, #520]	@ (1005fb9c <__arm_cp.48_1>)
1005f994:	6812      	ldr	r2, [r2, #0]
1005f996:	1851      	adds	r1, r2, r1
1005f998:	7d89      	ldrb	r1, [r1, #22]
1005f99a:	2914      	cmp	r1, #20
1005f99c:	d103      	bne.n	1005f9a6 <ADV_ISR+0x3a>
1005f99e:	210a      	movs	r1, #10
1005f9a0:	2203      	movs	r2, #3
1005f9a2:	f000 fefd 	bl	100607a0 <LL_sched_set_priority>
1005f9a6:	462c      	mov	r4, r5
1005f9a8:	34b4      	adds	r4, #180	@ 0xb4
1005f9aa:	4628      	mov	r0, r5
1005f9ac:	30db      	adds	r0, #219	@ 0xdb
1005f9ae:	9004      	str	r0, [sp, #16]
1005f9b0:	2e00      	cmp	r6, #0
1005f9b2:	d038      	beq.n	1005fa26 <ADV_ISR+0xba>
1005f9b4:	9505      	str	r5, [sp, #20]
1005f9b6:	2700      	movs	r7, #0
1005f9b8:	970c      	str	r7, [sp, #48]	@ 0x30
1005f9ba:	970b      	str	r7, [sp, #44]	@ 0x2c
1005f9bc:	9d06      	ldr	r5, [sp, #24]
1005f9be:	7828      	ldrb	r0, [r5, #0]
1005f9c0:	09c0      	lsrs	r0, r0, #7
1005f9c2:	a90b      	add	r1, sp, #44	@ 0x2c
1005f9c4:	7008      	strb	r0, [r1, #0]
1005f9c6:	4876      	ldr	r0, [pc, #472]	@ (1005fba0 <__arm_cp.48_2>)
1005f9c8:	6800      	ldr	r0, [r0, #0]
1005f9ca:	22d8      	movs	r2, #216	@ 0xd8
1005f9cc:	5c80      	ldrb	r0, [r0, r2]
1005f9ce:	9003      	str	r0, [sp, #12]
1005f9d0:	1c48      	adds	r0, r1, #1
1005f9d2:	4629      	mov	r1, r5
1005f9d4:	3108      	adds	r1, #8
1005f9d6:	2606      	movs	r6, #6
1005f9d8:	4632      	mov	r2, r6
1005f9da:	f7f2 fe3b 	bl	10052654 <BLEPLAT_MemCpy>
1005f9de:	970a      	str	r7, [sp, #40]	@ 0x28
1005f9e0:	9709      	str	r7, [sp, #36]	@ 0x24
1005f9e2:	7828      	ldrb	r0, [r5, #0]
1005f9e4:	0640      	lsls	r0, r0, #25
1005f9e6:	0fc0      	lsrs	r0, r0, #31
1005f9e8:	a909      	add	r1, sp, #36	@ 0x24
1005f9ea:	7008      	strb	r0, [r1, #0]
1005f9ec:	1c48      	adds	r0, r1, #1
1005f9ee:	1ca9      	adds	r1, r5, #2
1005f9f0:	4632      	mov	r2, r6
1005f9f2:	f7f2 fe2f 	bl	10052654 <BLEPLAT_MemCpy>
1005f9f6:	7828      	ldrb	r0, [r5, #0]
1005f9f8:	260f      	movs	r6, #15
1005f9fa:	4006      	ands	r6, r0
1005f9fc:	2e05      	cmp	r6, #5
1005f9fe:	d101      	bne.n	1005fa04 <ADV_ISR+0x98>
1005fa00:	f7f2 ff34 	bl	1005286c <BLEPLAT_ClearRadioTimerValue>
1005fa04:	7be3      	ldrb	r3, [r4, #15]
1005fa06:	7922      	ldrb	r2, [r4, #4]
1005fa08:	9702      	str	r7, [sp, #8]
1005fa0a:	ad07      	add	r5, sp, #28
1005fa0c:	9501      	str	r5, [sp, #4]
1005fa0e:	9805      	ldr	r0, [sp, #20]
1005fa10:	3084      	adds	r0, #132	@ 0x84
1005fa12:	9000      	str	r0, [sp, #0]
1005fa14:	a809      	add	r0, sp, #36	@ 0x24
1005fa16:	4631      	mov	r1, r6
1005fa18:	f006 faee 	bl	10065ff8 <llc_check_sreq_or_creq_tx_addr_ucfg_weak>
1005fa1c:	0841      	lsrs	r1, r0, #1
1005fa1e:	297e      	cmp	r1, #126	@ 0x7e
1005fa20:	d807      	bhi.n	1005fa32 <ADV_ISR+0xc6>
1005fa22:	4601      	mov	r1, r0
1005fa24:	e006      	b.n	1005fa34 <ADV_ISR+0xc8>
1005fa26:	2601      	movs	r6, #1
1005fa28:	2f00      	cmp	r7, #0
1005fa2a:	d154      	bne.n	1005fad6 <ADV_ISR+0x16a>
1005fa2c:	2700      	movs	r7, #0
1005fa2e:	8027      	strh	r7, [r4, #0]
1005fa30:	e056      	b.n	1005fae0 <ADV_ISR+0x174>
1005fa32:	2101      	movs	r1, #1
1005fa34:	7029      	strb	r1, [r5, #0]
1005fa36:	9d05      	ldr	r5, [sp, #20]
1005fa38:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005fa3a:	680a      	ldr	r2, [r1, #0]
1005fa3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1005fa3e:	429a      	cmp	r2, r3
1005fa40:	d12d      	bne.n	1005fa9e <ADV_ISR+0x132>
1005fa42:	6849      	ldr	r1, [r1, #4]
1005fa44:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1005fa46:	4291      	cmp	r1, r2
1005fa48:	d129      	bne.n	1005fa9e <ADV_ISR+0x132>
1005fa4a:	4607      	mov	r7, r0
1005fa4c:	3fff      	subs	r7, #255	@ 0xff
1005fa4e:	1e79      	subs	r1, r7, #1
1005fa50:	418f      	sbcs	r7, r1
1005fa52:	2e03      	cmp	r6, #3
1005fa54:	d123      	bne.n	1005fa9e <ADV_ISR+0x132>
1005fa56:	28ff      	cmp	r0, #255	@ 0xff
1005fa58:	d021      	beq.n	1005fa9e <ADV_ISR+0x132>
1005fa5a:	88a0      	ldrh	r0, [r4, #4]
1005fa5c:	2701      	movs	r7, #1
1005fa5e:	0780      	lsls	r0, r0, #30
1005fa60:	d51d      	bpl.n	1005fa9e <ADV_ISR+0x132>
1005fa62:	9803      	ldr	r0, [sp, #12]
1005fa64:	2801      	cmp	r0, #1
1005fa66:	d11a      	bne.n	1005fa9e <ADV_ISR+0x132>
1005fa68:	4628      	mov	r0, r5
1005fa6a:	f7f3 ff4b 	bl	10053904 <BLEPLAT_CNTR_PacketClrPllTrig>
1005fa6e:	7e60      	ldrb	r0, [r4, #25]
1005fa70:	2801      	cmp	r0, #1
1005fa72:	d109      	bne.n	1005fa88 <ADV_ISR+0x11c>
1005fa74:	8960      	ldrh	r0, [r4, #10]
1005fa76:	494b      	ldr	r1, [pc, #300]	@ (1005fba4 <__arm_cp.48_3>)
1005fa78:	4288      	cmp	r0, r1
1005fa7a:	d005      	beq.n	1005fa88 <ADV_ISR+0x11c>
1005fa7c:	aa07      	add	r2, sp, #28
1005fa7e:	7811      	ldrb	r1, [r2, #0]
1005fa80:	b2c0      	uxtb	r0, r0
1005fa82:	1c52      	adds	r2, r2, #1
1005fa84:	f000 f892 	bl	1005fbac <hci_le_scan_request_received_event_push>
1005fa88:	7f20      	ldrb	r0, [r4, #28]
1005fa8a:	f7f4 fb57 	bl	1005413c <BLEPLAT_CNTR_SmSetTxMode>
1005fa8e:	2001      	movs	r0, #1
1005fa90:	9904      	ldr	r1, [sp, #16]
1005fa92:	7008      	strb	r0, [r1, #0]
1005fa94:	4628      	mov	r0, r5
1005fa96:	f7ff fea1 	bl	1005f7dc <ADV_createslot>
1005fa9a:	2600      	movs	r6, #0
1005fa9c:	e020      	b.n	1005fae0 <ADV_ISR+0x174>
1005fa9e:	88a0      	ldrh	r0, [r4, #4]
1005faa0:	07c0      	lsls	r0, r0, #31
1005faa2:	d01a      	beq.n	1005fada <ADV_ISR+0x16e>
1005faa4:	2e05      	cmp	r6, #5
1005faa6:	d118      	bne.n	1005fada <ADV_ISR+0x16e>
1005faa8:	9806      	ldr	r0, [sp, #24]
1005faaa:	f7fa ffbf 	bl	1005aa2c <llc_conn_check_connect_request_params>
1005faae:	2801      	cmp	r0, #1
1005fab0:	d113      	bne.n	1005fada <ADV_ISR+0x16e>
1005fab2:	9908      	ldr	r1, [sp, #32]
1005fab4:	9807      	ldr	r0, [sp, #28]
1005fab6:	f7fa fd91 	bl	1005a5dc <llc_conn_list_search_address>
1005faba:	4241      	negs	r1, r0
1005fabc:	4141      	adcs	r1, r0
1005fabe:	4039      	ands	r1, r7
1005fac0:	2901      	cmp	r1, #1
1005fac2:	d10a      	bne.n	1005fada <ADV_ISR+0x16e>
1005fac4:	9803      	ldr	r0, [sp, #12]
1005fac6:	2801      	cmp	r0, #1
1005fac8:	d107      	bne.n	1005fada <ADV_ISR+0x16e>
1005faca:	aa07      	add	r2, sp, #28
1005facc:	4628      	mov	r0, r5
1005face:	9906      	ldr	r1, [sp, #24]
1005fad0:	f7ef f9bc 	bl	1004ee4c <ADV_ISR_connect_request_received_ucfg>
1005fad4:	2601      	movs	r6, #1
1005fad6:	2700      	movs	r7, #0
1005fad8:	e002      	b.n	1005fae0 <ADV_ISR+0x174>
1005fada:	2700      	movs	r7, #0
1005fadc:	8027      	strh	r7, [r4, #0]
1005fade:	2601      	movs	r6, #1
1005fae0:	8821      	ldrh	r1, [r4, #0]
1005fae2:	7fa0      	ldrb	r0, [r4, #30]
1005fae4:	2800      	cmp	r0, #0
1005fae6:	d022      	beq.n	1005fb2e <ADV_ISR+0x1c2>
1005fae8:	2900      	cmp	r1, #0
1005faea:	d122      	bne.n	1005fb32 <ADV_ISR+0x1c6>
1005faec:	1e40      	subs	r0, r0, #1
1005faee:	77a0      	strb	r0, [r4, #30]
1005faf0:	88a0      	ldrh	r0, [r4, #4]
1005faf2:	2103      	movs	r1, #3
1005faf4:	4001      	ands	r1, r0
1005faf6:	1e48      	subs	r0, r1, #1
1005faf8:	4181      	sbcs	r1, r0
1005fafa:	0048      	lsls	r0, r1, #1
1005fafc:	8020      	strh	r0, [r4, #0]
1005fafe:	4628      	mov	r0, r5
1005fb00:	f7ff fdd4 	bl	1005f6ac <UTIL_u8GetNextAdvChannel>
1005fb04:	4601      	mov	r1, r0
1005fb06:	7f20      	ldrb	r0, [r4, #28]
1005fb08:	f7f4 fa59 	bl	10053fbe <BLEPLAT_CNTR_SmSetRemapChan>
1005fb0c:	7f20      	ldrb	r0, [r4, #28]
1005fb0e:	f7f4 fb15 	bl	1005413c <BLEPLAT_CNTR_SmSetTxMode>
1005fb12:	4628      	mov	r0, r5
1005fb14:	f7f3 ffea 	bl	10053aec <BLEPLAT_CNTR_PacketSetPllTrig>
1005fb18:	f7f2 fea8 	bl	1005286c <BLEPLAT_ClearRadioTimerValue>
1005fb1c:	2000      	movs	r0, #0
1005fb1e:	9904      	ldr	r1, [sp, #16]
1005fb20:	7008      	strb	r0, [r1, #0]
1005fb22:	4628      	mov	r0, r5
1005fb24:	f7ff fe5a 	bl	1005f7dc <ADV_createslot>
1005fb28:	f7f2 feb8 	bl	1005289c <BLEPLAT_SetRadioCloseTimeout>
1005fb2c:	e02a      	b.n	1005fb84 <ADV_ISR+0x218>
1005fb2e:	2900      	cmp	r1, #0
1005fb30:	d019      	beq.n	1005fb66 <ADV_ISR+0x1fa>
1005fb32:	4819      	ldr	r0, [pc, #100]	@ (1005fb98 <__arm_cp.48_0>)
1005fb34:	6800      	ldr	r0, [r0, #0]
1005fb36:	f7f3 feb5 	bl	100538a4 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1005fb3a:	2800      	cmp	r0, #0
1005fb3c:	d022      	beq.n	1005fb84 <ADV_ISR+0x218>
1005fb3e:	4628      	mov	r0, r5
1005fb40:	f7f3 ffd4 	bl	10053aec <BLEPLAT_CNTR_PacketSetPllTrig>
1005fb44:	7c60      	ldrb	r0, [r4, #17]
1005fb46:	2801      	cmp	r0, #1
1005fb48:	d001      	beq.n	1005fb4e <ADV_ISR+0x1e2>
1005fb4a:	4917      	ldr	r1, [pc, #92]	@ (1005fba8 <__arm_cp.48_4>)
1005fb4c:	e000      	b.n	1005fb50 <ADV_ISR+0x1e4>
1005fb4e:	2146      	movs	r1, #70	@ 0x46
1005fb50:	3514      	adds	r5, #20
1005fb52:	4628      	mov	r0, r5
1005fb54:	f7f4 f82b 	bl	10053bae <BLEPLAT_CNTR_SetRcvLen>
1005fb58:	8820      	ldrh	r0, [r4, #0]
1005fb5a:	1e40      	subs	r0, r0, #1
1005fb5c:	8020      	strh	r0, [r4, #0]
1005fb5e:	f7f3 fdf0 	bl	10053742 <BLEPLAT_CNTR_GlobEnableBlue>
1005fb62:	2600      	movs	r6, #0
1005fb64:	e00e      	b.n	1005fb84 <ADV_ISR+0x218>
1005fb66:	f7f2 fe81 	bl	1005286c <BLEPLAT_ClearRadioTimerValue>
1005fb6a:	4628      	mov	r0, r5
1005fb6c:	f7f3 ffbe 	bl	10053aec <BLEPLAT_CNTR_PacketSetPllTrig>
1005fb70:	88e0      	ldrh	r0, [r4, #6]
1005fb72:	1e40      	subs	r0, r0, #1
1005fb74:	80e0      	strh	r0, [r4, #6]
1005fb76:	2100      	movs	r1, #0
1005fb78:	4628      	mov	r0, r5
1005fb7a:	f7ff fcb7 	bl	1005f4ec <ADV_skiproutine>
1005fb7e:	7f20      	ldrb	r0, [r4, #28]
1005fb80:	f000 fc48 	bl	10060414 <LL_sched_engine>
1005fb84:	2f00      	cmp	r7, #0
1005fb86:	d002      	beq.n	1005fb8e <ADV_ISR+0x222>
1005fb88:	8820      	ldrh	r0, [r4, #0]
1005fb8a:	1e40      	subs	r0, r0, #1
1005fb8c:	8020      	strh	r0, [r4, #0]
1005fb8e:	f7f5 faa9 	bl	100550e4 <log_notify_us_flush_ucfg_weak>
1005fb92:	4630      	mov	r0, r6
1005fb94:	b00d      	add	sp, #52	@ 0x34
1005fb96:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005fb98 <__arm_cp.48_0>:
1005fb98:	2000246c 	.word	0x2000246c

1005fb9c <__arm_cp.48_1>:
1005fb9c:	20002478 	.word	0x20002478

1005fba0 <__arm_cp.48_2>:
1005fba0:	20002470 	.word	0x20002470

1005fba4 <__arm_cp.48_3>:
1005fba4:	0000fffc 	.word	0x0000fffc

1005fba8 <__arm_cp.48_4>:
1005fba8:	000002ee 	.word	0x000002ee

1005fbac <hci_le_scan_request_received_event_push>:
1005fbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005fbae:	460e      	mov	r6, r1
1005fbb0:	4605      	mov	r5, r0
1005fbb2:	4815      	ldr	r0, [pc, #84]	@ (1005fc08 <__arm_cp.49_0>)
1005fbb4:	6800      	ldr	r0, [r0, #0]
1005fbb6:	213d      	movs	r1, #61	@ 0x3d
1005fbb8:	5c41      	ldrb	r1, [r0, r1]
1005fbba:	0689      	lsls	r1, r1, #26
1005fbbc:	d522      	bpl.n	1005fc04 <hci_le_scan_request_received_event_push+0x58>
1005fbbe:	303d      	adds	r0, #61	@ 0x3d
1005fbc0:	7ac0      	ldrb	r0, [r0, #11]
1005fbc2:	0740      	lsls	r0, r0, #29
1005fbc4:	d51e      	bpl.n	1005fc04 <hci_le_scan_request_received_event_push+0x58>
1005fbc6:	4614      	mov	r4, r2
1005fbc8:	4810      	ldr	r0, [pc, #64]	@ (1005fc0c <__arm_cp.49_1>)
1005fbca:	6800      	ldr	r0, [r0, #0]
1005fbcc:	6940      	ldr	r0, [r0, #20]
1005fbce:	21a1      	movs	r1, #161	@ 0xa1
1005fbd0:	222b      	movs	r2, #43	@ 0x2b
1005fbd2:	2303      	movs	r3, #3
1005fbd4:	f7f5 fa8a 	bl	100550ec <aci_event_fifo_push_header>
1005fbd8:	2800      	cmp	r0, #0
1005fbda:	d013      	beq.n	1005fc04 <hci_le_scan_request_received_event_push+0x58>
1005fbdc:	4607      	mov	r7, r0
1005fbde:	7246      	strb	r6, [r0, #9]
1005fbe0:	7205      	strb	r5, [r0, #8]
1005fbe2:	300a      	adds	r0, #10
1005fbe4:	2206      	movs	r2, #6
1005fbe6:	4621      	mov	r1, r4
1005fbe8:	f7f2 fd34 	bl	10052654 <BLEPLAT_MemCpy>
1005fbec:	2013      	movs	r0, #19
1005fbee:	71f8      	strb	r0, [r7, #7]
1005fbf0:	2009      	movs	r0, #9
1005fbf2:	71b8      	strb	r0, [r7, #6]
1005fbf4:	203e      	movs	r0, #62	@ 0x3e
1005fbf6:	7178      	strb	r0, [r7, #5]
1005fbf8:	2004      	movs	r0, #4
1005fbfa:	7138      	strb	r0, [r7, #4]
1005fbfc:	20a1      	movs	r0, #161	@ 0xa1
1005fbfe:	4639      	mov	r1, r7
1005fc00:	f7f5 fb11 	bl	10055226 <aci_event_fifo_push>
1005fc04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005fc06:	46c0      	nop			@ (mov r8, r8)

1005fc08 <__arm_cp.49_0>:
1005fc08:	20002470 	.word	0x20002470

1005fc0c <__arm_cp.49_1>:
1005fc0c:	20002420 	.word	0x20002420

1005fc10 <EADV_start_request_radio_tasks>:
1005fc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005fc12:	4604      	mov	r4, r0
1005fc14:	20d8      	movs	r0, #216	@ 0xd8
1005fc16:	21ff      	movs	r1, #255	@ 0xff
1005fc18:	5421      	strb	r1, [r4, r0]
1005fc1a:	20b8      	movs	r0, #184	@ 0xb8
1005fc1c:	5a25      	ldrh	r5, [r4, r0]
1005fc1e:	2701      	movs	r7, #1
1005fc20:	402f      	ands	r7, r5
1005fc22:	4626      	mov	r6, r4
1005fc24:	36d8      	adds	r6, #216	@ 0xd8
1005fc26:	2f00      	cmp	r7, #0
1005fc28:	d004      	beq.n	1005fc34 <EADV_start_request_radio_tasks+0x24>
1005fc2a:	f7fb fc0f 	bl	1005b44c <llc_conn_reserve_conn_idx>
1005fc2e:	7030      	strb	r0, [r6, #0]
1005fc30:	28ff      	cmp	r0, #255	@ 0xff
1005fc32:	d022      	beq.n	1005fc7a <EADV_start_request_radio_tasks+0x6a>
1005fc34:	34b8      	adds	r4, #184	@ 0xb8
1005fc36:	f000 fdf1 	bl	1006081c <LL_sched_reserve_taskslot>
1005fc3a:	7620      	strb	r0, [r4, #24]
1005fc3c:	28ff      	cmp	r0, #255	@ 0xff
1005fc3e:	d013      	beq.n	1005fc68 <EADV_start_request_radio_tasks+0x58>
1005fc40:	2100      	movs	r1, #0
1005fc42:	06e8      	lsls	r0, r5, #27
1005fc44:	d41a      	bmi.n	1005fc7c <EADV_start_request_radio_tasks+0x6c>
1005fc46:	460d      	mov	r5, r1
1005fc48:	f000 fde8 	bl	1006081c <LL_sched_reserve_taskslot>
1005fc4c:	4629      	mov	r1, r5
1005fc4e:	7660      	strb	r0, [r4, #25]
1005fc50:	28ff      	cmp	r0, #255	@ 0xff
1005fc52:	d113      	bne.n	1005fc7c <EADV_start_request_radio_tasks+0x6c>
1005fc54:	2f00      	cmp	r7, #0
1005fc56:	d002      	beq.n	1005fc5e <EADV_start_request_radio_tasks+0x4e>
1005fc58:	7830      	ldrb	r0, [r6, #0]
1005fc5a:	f7fb f822 	bl	1005aca2 <llc_conn_release_conn_idx>
1005fc5e:	7e20      	ldrb	r0, [r4, #24]
1005fc60:	f000 fdfe 	bl	10060860 <LL_sched_release_taskslot>
1005fc64:	2107      	movs	r1, #7
1005fc66:	e009      	b.n	1005fc7c <EADV_start_request_radio_tasks+0x6c>
1005fc68:	2107      	movs	r1, #7
1005fc6a:	2f00      	cmp	r7, #0
1005fc6c:	d006      	beq.n	1005fc7c <EADV_start_request_radio_tasks+0x6c>
1005fc6e:	7830      	ldrb	r0, [r6, #0]
1005fc70:	460c      	mov	r4, r1
1005fc72:	f7fb f816 	bl	1005aca2 <llc_conn_release_conn_idx>
1005fc76:	4621      	mov	r1, r4
1005fc78:	e000      	b.n	1005fc7c <EADV_start_request_radio_tasks+0x6c>
1005fc7a:	210c      	movs	r1, #12
1005fc7c:	4608      	mov	r0, r1
1005fc7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005fc80 <llc_get_channel_sel_algo2_enabled>:
1005fc80:	b580      	push	{r7, lr}
1005fc82:	f000 fae7 	bl	10060254 <llc_get_linkms_cntxt_p>
1005fc86:	214e      	movs	r1, #78	@ 0x4e
1005fc88:	5c40      	ldrb	r0, [r0, r1]
1005fc8a:	bd80      	pop	{r7, pc}

1005fc8c <LL_force_chsel_1>:
1005fc8c:	b510      	push	{r4, lr}
1005fc8e:	4244      	negs	r4, r0
1005fc90:	4144      	adcs	r4, r0
1005fc92:	f000 fadf 	bl	10060254 <llc_get_linkms_cntxt_p>
1005fc96:	214e      	movs	r1, #78	@ 0x4e
1005fc98:	5444      	strb	r4, [r0, r1]
1005fc9a:	2000      	movs	r0, #0
1005fc9c:	bd10      	pop	{r4, pc}

1005fc9e <llc_eadv_max_supported_data_check_ucfg_weak>:
1005fc9e:	2000      	movs	r0, #0
1005fca0:	4770      	bx	lr

1005fca2 <LL_eadv_start_extended_ucfg_weak>:
1005fca2:	4770      	bx	lr

1005fca4 <ext_adv_scan_enabled_ucfg_weak>:
1005fca4:	2000      	movs	r0, #0
1005fca6:	4770      	bx	lr

1005fca8 <BLE_STACK_EndOfRadioActivityCb>:
1005fca8:	4770      	bx	lr
	...

1005fcac <BLE_STACK_RadioHandler>:
1005fcac:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fcae:	b083      	sub	sp, #12
1005fcb0:	4604      	mov	r4, r0
1005fcb2:	484c      	ldr	r0, [pc, #304]	@ (1005fde4 <__arm_cp.1_0>)
1005fcb4:	6004      	str	r4, [r0, #0]
1005fcb6:	4620      	mov	r0, r4
1005fcb8:	f7f3 fdb9 	bl	1005382e <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>
1005fcbc:	4605      	mov	r5, r0
1005fcbe:	4620      	mov	r0, r4
1005fcc0:	f7f3 fd85 	bl	100537ce <BLEPLAT_CNTR_IntGetIntStatusDone>
1005fcc4:	4606      	mov	r6, r0
1005fcc6:	4668      	mov	r0, sp
1005fcc8:	f7f2 fdd9 	bl	1005287e <BLEPLAT_GetAnchorPoint>
1005fccc:	9900      	ldr	r1, [sp, #0]
1005fcce:	1a09      	subs	r1, r1, r0
1005fcd0:	0b4b      	lsrs	r3, r1, #13
1005fcd2:	4945      	ldr	r1, [pc, #276]	@ (1005fde8 <__arm_cp.1_1>)
1005fcd4:	680a      	ldr	r2, [r1, #0]
1005fcd6:	4611      	mov	r1, r2
1005fcd8:	31d8      	adds	r1, #216	@ 0xd8
1005fcda:	2b00      	cmp	r3, #0
1005fcdc:	d102      	bne.n	1005fce4 <BLE_STACK_RadioHandler+0x38>
1005fcde:	6010      	str	r0, [r2, #0]
1005fce0:	2001      	movs	r0, #1
1005fce2:	e000      	b.n	1005fce6 <BLE_STACK_RadioHandler+0x3a>
1005fce4:	2000      	movs	r0, #0
1005fce6:	7008      	strb	r0, [r1, #0]
1005fce8:	4840      	ldr	r0, [pc, #256]	@ (1005fdec <__arm_cp.1_2>)
1005fcea:	6800      	ldr	r0, [r0, #0]
1005fcec:	7b44      	ldrb	r4, [r0, #13]
1005fcee:	2100      	movs	r1, #0
1005fcf0:	2cff      	cmp	r4, #255	@ 0xff
1005fcf2:	d00a      	beq.n	1005fd0a <BLE_STACK_RadioHandler+0x5e>
1005fcf4:	202c      	movs	r0, #44	@ 0x2c
1005fcf6:	4360      	muls	r0, r4
1005fcf8:	4a3d      	ldr	r2, [pc, #244]	@ (1005fdf0 <__arm_cp.1_3>)
1005fcfa:	6812      	ldr	r2, [r2, #0]
1005fcfc:	1810      	adds	r0, r2, r0
1005fcfe:	7c82      	ldrb	r2, [r0, #18]
1005fd00:	2a00      	cmp	r2, #0
1005fd02:	d002      	beq.n	1005fd0a <BLE_STACK_RadioHandler+0x5e>
1005fd04:	6a41      	ldr	r1, [r0, #36]	@ 0x24
1005fd06:	68c0      	ldr	r0, [r0, #12]
1005fd08:	e7ff      	b.n	1005fd0a <BLE_STACK_RadioHandler+0x5e>
1005fd0a:	2701      	movs	r7, #1
1005fd0c:	2e00      	cmp	r6, #0
1005fd0e:	d003      	beq.n	1005fd18 <BLE_STACK_RadioHandler+0x6c>
1005fd10:	2d00      	cmp	r5, #0
1005fd12:	d101      	bne.n	1005fd18 <BLE_STACK_RadioHandler+0x6c>
1005fd14:	2900      	cmp	r1, #0
1005fd16:	e011      	b.n	1005fd3c <BLE_STACK_RadioHandler+0x90>
1005fd18:	2d00      	cmp	r5, #0
1005fd1a:	d015      	beq.n	1005fd48 <BLE_STACK_RadioHandler+0x9c>
1005fd1c:	4a35      	ldr	r2, [pc, #212]	@ (1005fdf4 <__arm_cp.1_4>)
1005fd1e:	1a8b      	subs	r3, r1, r2
1005fd20:	425a      	negs	r2, r3
1005fd22:	415a      	adcs	r2, r3
1005fd24:	4b34      	ldr	r3, [pc, #208]	@ (1005fdf8 <__arm_cp.1_5>)
1005fd26:	1acd      	subs	r5, r1, r3
1005fd28:	426b      	negs	r3, r5
1005fd2a:	416b      	adcs	r3, r5
1005fd2c:	4d33      	ldr	r5, [pc, #204]	@ (1005fdfc <__arm_cp.1_6>)
1005fd2e:	1b4e      	subs	r6, r1, r5
1005fd30:	4275      	negs	r5, r6
1005fd32:	4175      	adcs	r5, r6
1005fd34:	2900      	cmp	r1, #0
1005fd36:	d007      	beq.n	1005fd48 <BLE_STACK_RadioHandler+0x9c>
1005fd38:	4313      	orrs	r3, r2
1005fd3a:	431d      	orrs	r5, r3
1005fd3c:	4e2a      	ldr	r6, [pc, #168]	@ (1005fde8 <__arm_cp.1_1>)
1005fd3e:	4d29      	ldr	r5, [pc, #164]	@ (1005fde4 <__arm_cp.1_0>)
1005fd40:	d004      	beq.n	1005fd4c <BLE_STACK_RadioHandler+0xa0>
1005fd42:	4788      	blx	r1
1005fd44:	2700      	movs	r7, #0
1005fd46:	e001      	b.n	1005fd4c <BLE_STACK_RadioHandler+0xa0>
1005fd48:	4e27      	ldr	r6, [pc, #156]	@ (1005fde8 <__arm_cp.1_1>)
1005fd4a:	4d26      	ldr	r5, [pc, #152]	@ (1005fde4 <__arm_cp.1_0>)
1005fd4c:	6828      	ldr	r0, [r5, #0]
1005fd4e:	f7f3 fd62 	bl	10053816 <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>
1005fd52:	2800      	cmp	r0, #0
1005fd54:	d001      	beq.n	1005fd5a <BLE_STACK_RadioHandler+0xae>
1005fd56:	2504      	movs	r5, #4
1005fd58:	e020      	b.n	1005fd9c <BLE_STACK_RadioHandler+0xf0>
1005fd5a:	6828      	ldr	r0, [r5, #0]
1005fd5c:	f7f3 fd16 	bl	1005378c <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>
1005fd60:	2800      	cmp	r0, #0
1005fd62:	d001      	beq.n	1005fd68 <BLE_STACK_RadioHandler+0xbc>
1005fd64:	2501      	movs	r5, #1
1005fd66:	e019      	b.n	1005fd9c <BLE_STACK_RadioHandler+0xf0>
1005fd68:	6828      	ldr	r0, [r5, #0]
1005fd6a:	f7f3 fd1b 	bl	100537a4 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>
1005fd6e:	2800      	cmp	r0, #0
1005fd70:	d001      	beq.n	1005fd76 <BLE_STACK_RadioHandler+0xca>
1005fd72:	2502      	movs	r5, #2
1005fd74:	e012      	b.n	1005fd9c <BLE_STACK_RadioHandler+0xf0>
1005fd76:	6828      	ldr	r0, [r5, #0]
1005fd78:	f7f3 fd65 	bl	10053846 <BLEPLAT_CNTR_IntGetIntStatusTxError1>
1005fd7c:	4629      	mov	r1, r5
1005fd7e:	2505      	movs	r5, #5
1005fd80:	2800      	cmp	r0, #0
1005fd82:	d10b      	bne.n	1005fd9c <BLE_STACK_RadioHandler+0xf0>
1005fd84:	6808      	ldr	r0, [r1, #0]
1005fd86:	f7f3 fd6a 	bl	1005385e <BLEPLAT_CNTR_IntGetIntStatusTxError3>
1005fd8a:	2800      	cmp	r0, #0
1005fd8c:	d106      	bne.n	1005fd9c <BLE_STACK_RadioHandler+0xf0>
1005fd8e:	4815      	ldr	r0, [pc, #84]	@ (1005fde4 <__arm_cp.1_0>)
1005fd90:	6800      	ldr	r0, [r0, #0]
1005fd92:	f7f3 fced 	bl	10053770 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>
1005fd96:	2800      	cmp	r0, #0
1005fd98:	d020      	beq.n	1005fddc <BLE_STACK_RadioHandler+0x130>
1005fd9a:	2500      	movs	r5, #0
1005fd9c:	2001      	movs	r0, #1
1005fd9e:	40a8      	lsls	r0, r5
1005fda0:	4917      	ldr	r1, [pc, #92]	@ (1005fe00 <__arm_cp.1_7>)
1005fda2:	6809      	ldr	r1, [r1, #0]
1005fda4:	680a      	ldr	r2, [r1, #0]
1005fda6:	4302      	orrs	r2, r0
1005fda8:	600a      	str	r2, [r1, #0]
1005fdaa:	2000      	movs	r0, #0
1005fdac:	f002 fce8 	bl	10062780 <tsk_notify_idx>
1005fdb0:	f7f1 fe69 	bl	10051a86 <BLE_STACK_ProcessRequest>
1005fdb4:	f7f2 fd5a 	bl	1005286c <BLEPLAT_ClearRadioTimerValue>
1005fdb8:	4620      	mov	r0, r4
1005fdba:	f000 fb2b 	bl	10060414 <LL_sched_engine>
1005fdbe:	6834      	ldr	r4, [r6, #0]
1005fdc0:	7d60      	ldrb	r0, [r4, #21]
1005fdc2:	2801      	cmp	r0, #1
1005fdc4:	d108      	bne.n	1005fdd8 <BLE_STACK_RadioHandler+0x12c>
1005fdc6:	7c21      	ldrb	r1, [r4, #16]
1005fdc8:	200f      	movs	r0, #15
1005fdca:	4008      	ands	r0, r1
1005fdcc:	68e2      	ldr	r2, [r4, #12]
1005fdce:	0909      	lsrs	r1, r1, #4
1005fdd0:	f7ff ff6a 	bl	1005fca8 <BLE_STACK_EndOfRadioActivityCb>
1005fdd4:	2000      	movs	r0, #0
1005fdd6:	7560      	strb	r0, [r4, #21]
1005fdd8:	b003      	add	sp, #12
1005fdda:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005fddc:	2f00      	cmp	r7, #0
1005fdde:	d1e9      	bne.n	1005fdb4 <BLE_STACK_RadioHandler+0x108>
1005fde0:	e7ed      	b.n	1005fdbe <BLE_STACK_RadioHandler+0x112>
1005fde2:	46c0      	nop			@ (mov r8, r8)

1005fde4 <__arm_cp.1_0>:
1005fde4:	2000246c 	.word	0x2000246c

1005fde8 <__arm_cp.1_1>:
1005fde8:	20002470 	.word	0x20002470

1005fdec <__arm_cp.1_2>:
1005fdec:	20002474 	.word	0x20002474

1005fdf0 <__arm_cp.1_3>:
1005fdf0:	20002478 	.word	0x20002478

1005fdf4 <__arm_cp.1_4>:
1005fdf4:	10066115 	.word	0x10066115

1005fdf8 <__arm_cp.1_5>:
1005fdf8:	10066111 	.word	0x10066111

1005fdfc <__arm_cp.1_6>:
1005fdfc:	10066119 	.word	0x10066119

1005fe00 <__arm_cp.1_7>:
1005fe00:	20002420 	.word	0x20002420

1005fe04 <LL_link_calculate_window_widening_from_ppm>:
1005fe04:	22ff      	movs	r2, #255	@ 0xff
1005fe06:	320e      	adds	r2, #14
1005fe08:	4342      	muls	r2, r0
1005fe0a:	0a10      	lsrs	r0, r2, #8
1005fe0c:	0889      	lsrs	r1, r1, #2
1005fe0e:	4341      	muls	r1, r0
1005fe10:	0c88      	lsrs	r0, r1, #18
1005fe12:	1c40      	adds	r0, r0, #1
1005fe14:	4770      	bx	lr
	...

1005fe18 <LL_link_calc_packetlength>:
1005fe18:	2804      	cmp	r0, #4
1005fe1a:	d005      	beq.n	1005fe28 <LL_link_calc_packetlength+0x10>
1005fe1c:	2801      	cmp	r0, #1
1005fe1e:	d106      	bne.n	1005fe2e <LL_link_calc_packetlength+0x16>
1005fe20:	20ff      	movs	r0, #255	@ 0xff
1005fe22:	30a4      	adds	r0, #164	@ 0xa4
1005fe24:	4a07      	ldr	r2, [pc, #28]	@ (1005fe44 <__arm_cp.7_2>)
1005fe26:	e004      	b.n	1005fe32 <LL_link_calc_packetlength+0x1a>
1005fe28:	4a04      	ldr	r2, [pc, #16]	@ (1005fe3c <__arm_cp.7_0>)
1005fe2a:	4805      	ldr	r0, [pc, #20]	@ (1005fe40 <__arm_cp.7_1>)
1005fe2c:	e001      	b.n	1005fe32 <LL_link_calc_packetlength+0x1a>
1005fe2e:	4a06      	ldr	r2, [pc, #24]	@ (1005fe48 <__arm_cp.7_3>)
1005fe30:	4806      	ldr	r0, [pc, #24]	@ (1005fe4c <__arm_cp.7_4>)
1005fe32:	4341      	muls	r1, r0
1005fe34:	1888      	adds	r0, r1, r2
1005fe36:	0a00      	lsrs	r0, r0, #8
1005fe38:	4770      	bx	lr
1005fe3a:	46c0      	nop			@ (mov r8, r8)

1005fe3c <__arm_cp.7_0>:
1005fe3c:	000126e9 	.word	0x000126e9

1005fe40 <__arm_cp.7_1>:
1005fe40:	00001a38 	.word	0x00001a38

1005fe44 <__arm_cp.7_2>:
1005fe44:	00001206 	.word	0x00001206

1005fe48 <__arm_cp.7_3>:
1005fe48:	000020c6 	.word	0x000020c6

1005fe4c <__arm_cp.7_4>:
1005fe4c:	00000347 	.word	0x00000347

1005fe50 <LL_link_get_own_sca_ppm>:
1005fe50:	4801      	ldr	r0, [pc, #4]	@ (1005fe58 <__arm_cp.8_0>)
1005fe52:	6800      	ldr	r0, [r0, #0]
1005fe54:	8b00      	ldrh	r0, [r0, #24]
1005fe56:	4770      	bx	lr

1005fe58 <__arm_cp.8_0>:
1005fe58:	20002470 	.word	0x20002470

1005fe5c <LL_link_is_arg_in_range>:
1005fe5c:	4290      	cmp	r0, r2
1005fe5e:	d801      	bhi.n	1005fe64 <LL_link_is_arg_in_range+0x8>
1005fe60:	4288      	cmp	r0, r1
1005fe62:	d201      	bcs.n	1005fe68 <LL_link_is_arg_in_range+0xc>
1005fe64:	2012      	movs	r0, #18
1005fe66:	4770      	bx	lr
1005fe68:	2000      	movs	r0, #0
1005fe6a:	4770      	bx	lr

1005fe6c <Data_Len_Update_Offline_Processing_ucfg_weak>:
1005fe6c:	2000      	movs	r0, #0
1005fe6e:	4770      	bx	lr

1005fe70 <ll_write_supported_data_ucfg_weak>:
1005fe70:	2012      	movs	r0, #18
1005fe72:	4770      	bx	lr

1005fe74 <llc_timers_callback_wrapper>:
1005fe74:	b580      	push	{r7, lr}
1005fe76:	6940      	ldr	r0, [r0, #20]
1005fe78:	4901      	ldr	r1, [pc, #4]	@ (1005fe80 <__arm_cp.4_0>)
1005fe7a:	f002 fdb8 	bl	100629ee <cst_sharedCallback>
1005fe7e:	bd80      	pop	{r7, pc}

1005fe80 <__arm_cp.4_0>:
1005fe80:	1005fe85 	.word	0x1005fe85

1005fe84 <llc_timers_callback>:
1005fe84:	b580      	push	{r7, lr}
1005fe86:	4903      	ldr	r1, [pc, #12]	@ (1005fe94 <__arm_cp.5_0>)
1005fe88:	7ac9      	ldrb	r1, [r1, #11]
1005fe8a:	4281      	cmp	r1, r0
1005fe8c:	d901      	bls.n	1005fe92 <llc_timers_callback+0xe>
1005fe8e:	f7fd ff99 	bl	1005ddc4 <LLC_authenticated_payload_timeout_cb>
1005fe92:	bd80      	pop	{r7, pc}

1005fe94 <__arm_cp.5_0>:
1005fe94:	20002484 	.word	0x20002484

1005fe98 <LL_init_ucfg_weak>:
1005fe98:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fe9a:	b091      	sub	sp, #68	@ 0x44
1005fe9c:	9306      	str	r3, [sp, #24]
1005fe9e:	4614      	mov	r4, r2
1005fea0:	910d      	str	r1, [sp, #52]	@ 0x34
1005fea2:	900b      	str	r0, [sp, #44]	@ 0x2c
1005fea4:	48b8      	ldr	r0, [pc, #736]	@ (10060188 <__arm_cp.6_0>)
1005fea6:	7ac1      	ldrb	r1, [r0, #11]
1005fea8:	910c      	str	r1, [sp, #48]	@ 0x30
1005feaa:	7f01      	ldrb	r1, [r0, #28]
1005feac:	9109      	str	r1, [sp, #36]	@ 0x24
1005feae:	7ec1      	ldrb	r1, [r0, #27]
1005feb0:	910a      	str	r1, [sp, #40]	@ 0x28
1005feb2:	7e81      	ldrb	r1, [r0, #26]
1005feb4:	9108      	str	r1, [sp, #32]
1005feb6:	7fc7      	ldrb	r7, [r0, #31]
1005feb8:	2501      	movs	r5, #1
1005feba:	21e8      	movs	r1, #232	@ 0xe8
1005febc:	4628      	mov	r0, r5
1005febe:	f000 fe89 	bl	10060bd4 <csmem_mem_0_assign>
1005fec2:	4eb2      	ldr	r6, [pc, #712]	@ (1006018c <__arm_cp.6_1>)
1005fec4:	6030      	str	r0, [r6, #0]
1005fec6:	2158      	movs	r1, #88	@ 0x58
1005fec8:	4628      	mov	r0, r5
1005feca:	f000 fe83 	bl	10060bd4 <csmem_mem_0_assign>
1005fece:	6831      	ldr	r1, [r6, #0]
1005fed0:	229c      	movs	r2, #156	@ 0x9c
1005fed2:	9207      	str	r2, [sp, #28]
1005fed4:	5088      	str	r0, [r1, r2]
1005fed6:	4638      	mov	r0, r7
1005fed8:	f006 f8b6 	bl	10066048 <llc_wl_mem_allocate>
1005fedc:	2107      	movs	r1, #7
1005fede:	4039      	ands	r1, r7
1005fee0:	9806      	ldr	r0, [sp, #24]
1005fee2:	f006 f8c5 	bl	10066070 <llc_priv_mem_allocate>
1005fee6:	981c      	ldr	r0, [sp, #112]	@ 0x70
1005fee8:	9000      	str	r0, [sp, #0]
1005feea:	ab19      	add	r3, sp, #100	@ 0x64
1005feec:	cb0e      	ldmia	r3, {r1, r2, r3}
1005feee:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005fef0:	9106      	str	r1, [sp, #24]
1005fef2:	930d      	str	r3, [sp, #52]	@ 0x34
1005fef4:	f7fa f958 	bl	1005a1a8 <llc_conn_mem_allocate>
1005fef8:	2c01      	cmp	r4, #1
1005fefa:	d000      	beq.n	1005fefe <LL_init_ucfg_weak+0x66>
1005fefc:	9508      	str	r5, [sp, #32]
1005fefe:	2000      	movs	r0, #0
1005ff00:	2c01      	cmp	r4, #1
1005ff02:	d000      	beq.n	1005ff06 <LL_init_ucfg_weak+0x6e>
1005ff04:	900a      	str	r0, [sp, #40]	@ 0x28
1005ff06:	2c01      	cmp	r4, #1
1005ff08:	4fa0      	ldr	r7, [pc, #640]	@ (1006018c <__arm_cp.6_1>)
1005ff0a:	d000      	beq.n	1005ff0e <LL_init_ucfg_weak+0x76>
1005ff0c:	9009      	str	r0, [sp, #36]	@ 0x24
1005ff0e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
1005ff10:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005ff12:	2801      	cmp	r0, #1
1005ff14:	9205      	str	r2, [sp, #20]
1005ff16:	d118      	bne.n	1005ff4a <LL_init_ucfg_weak+0xb2>
1005ff18:	2029      	movs	r0, #41	@ 0x29
1005ff1a:	499b      	ldr	r1, [pc, #620]	@ (10060188 <__arm_cp.6_0>)
1005ff1c:	5c08      	ldrb	r0, [r1, r0]
1005ff1e:	1e41      	subs	r1, r0, #1
1005ff20:	4188      	sbcs	r0, r1
1005ff22:	4310      	orrs	r0, r2
1005ff24:	d001      	beq.n	1005ff2a <LL_init_ucfg_weak+0x92>
1005ff26:	2530      	movs	r5, #48	@ 0x30
1005ff28:	e000      	b.n	1005ff2c <LL_init_ucfg_weak+0x94>
1005ff2a:	2520      	movs	r5, #32
1005ff2c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1005ff2e:	4630      	mov	r0, r6
1005ff30:	4629      	mov	r1, r5
1005ff32:	f000 fe4f 	bl	10060bd4 <csmem_mem_0_assign>
1005ff36:	6839      	ldr	r1, [r7, #0]
1005ff38:	2294      	movs	r2, #148	@ 0x94
1005ff3a:	5088      	str	r0, [r1, r2]
1005ff3c:	4630      	mov	r0, r6
1005ff3e:	4629      	mov	r1, r5
1005ff40:	f000 fe48 	bl	10060bd4 <csmem_mem_0_assign>
1005ff44:	6839      	ldr	r1, [r7, #0]
1005ff46:	2298      	movs	r2, #152	@ 0x98
1005ff48:	5088      	str	r0, [r1, r2]
1005ff4a:	262c      	movs	r6, #44	@ 0x2c
1005ff4c:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005ff4e:	4631      	mov	r1, r6
1005ff50:	f000 fe40 	bl	10060bd4 <csmem_mem_0_assign>
1005ff54:	6839      	ldr	r1, [r7, #0]
1005ff56:	22a4      	movs	r2, #164	@ 0xa4
1005ff58:	5088      	str	r0, [r1, r2]
1005ff5a:	2041      	movs	r0, #65	@ 0x41
1005ff5c:	0082      	lsls	r2, r0, #2
1005ff5e:	2c01      	cmp	r4, #1
1005ff60:	9402      	str	r4, [sp, #8]
1005ff62:	d10a      	bne.n	1005ff7a <LL_init_ucfg_weak+0xe2>
1005ff64:	4611      	mov	r1, r2
1005ff66:	3120      	adds	r1, #32
1005ff68:	2001      	movs	r0, #1
1005ff6a:	4614      	mov	r4, r2
1005ff6c:	f000 fe32 	bl	10060bd4 <csmem_mem_0_assign>
1005ff70:	6839      	ldr	r1, [r7, #0]
1005ff72:	228c      	movs	r2, #140	@ 0x8c
1005ff74:	5088      	str	r0, [r1, r2]
1005ff76:	4621      	mov	r1, r4
1005ff78:	e038      	b.n	1005ffec <LL_init_ucfg_weak+0x154>
1005ff7a:	2125      	movs	r1, #37	@ 0x25
1005ff7c:	4882      	ldr	r0, [pc, #520]	@ (10060188 <__arm_cp.6_0>)
1005ff7e:	910c      	str	r1, [sp, #48]	@ 0x30
1005ff80:	5c41      	ldrb	r1, [r0, r1]
1005ff82:	4610      	mov	r0, r2
1005ff84:	3020      	adds	r0, #32
1005ff86:	2900      	cmp	r1, #0
1005ff88:	9201      	str	r2, [sp, #4]
1005ff8a:	d001      	beq.n	1005ff90 <LL_init_ucfg_weak+0xf8>
1005ff8c:	4601      	mov	r1, r0
1005ff8e:	e000      	b.n	1005ff92 <LL_init_ucfg_weak+0xfa>
1005ff90:	2144      	movs	r1, #68	@ 0x44
1005ff92:	2726      	movs	r7, #38	@ 0x26
1005ff94:	4a7c      	ldr	r2, [pc, #496]	@ (10060188 <__arm_cp.6_0>)
1005ff96:	5dd2      	ldrb	r2, [r2, r7]
1005ff98:	2a00      	cmp	r2, #0
1005ff9a:	d000      	beq.n	1005ff9e <LL_init_ucfg_weak+0x106>
1005ff9c:	4601      	mov	r1, r0
1005ff9e:	2529      	movs	r5, #41	@ 0x29
1005ffa0:	4a79      	ldr	r2, [pc, #484]	@ (10060188 <__arm_cp.6_0>)
1005ffa2:	5d52      	ldrb	r2, [r2, r5]
1005ffa4:	2a00      	cmp	r2, #0
1005ffa6:	d000      	beq.n	1005ffaa <LL_init_ucfg_weak+0x112>
1005ffa8:	4601      	mov	r1, r0
1005ffaa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005ffac:	2a01      	cmp	r2, #1
1005ffae:	d100      	bne.n	1005ffb2 <LL_init_ucfg_weak+0x11a>
1005ffb0:	4601      	mov	r1, r0
1005ffb2:	2001      	movs	r0, #1
1005ffb4:	f000 fe0e 	bl	10060bd4 <csmem_mem_0_assign>
1005ffb8:	4974      	ldr	r1, [pc, #464]	@ (1006018c <__arm_cp.6_1>)
1005ffba:	6809      	ldr	r1, [r1, #0]
1005ffbc:	228c      	movs	r2, #140	@ 0x8c
1005ffbe:	5088      	str	r0, [r1, r2]
1005ffc0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005ffc2:	2801      	cmp	r0, #1
1005ffc4:	9c01      	ldr	r4, [sp, #4]
1005ffc6:	4621      	mov	r1, r4
1005ffc8:	d010      	beq.n	1005ffec <LL_init_ucfg_weak+0x154>
1005ffca:	486f      	ldr	r0, [pc, #444]	@ (10060188 <__arm_cp.6_0>)
1005ffcc:	5d40      	ldrb	r0, [r0, r5]
1005ffce:	2800      	cmp	r0, #0
1005ffd0:	4621      	mov	r1, r4
1005ffd2:	d10b      	bne.n	1005ffec <LL_init_ucfg_weak+0x154>
1005ffd4:	486c      	ldr	r0, [pc, #432]	@ (10060188 <__arm_cp.6_0>)
1005ffd6:	5dc0      	ldrb	r0, [r0, r7]
1005ffd8:	2800      	cmp	r0, #0
1005ffda:	4621      	mov	r1, r4
1005ffdc:	d106      	bne.n	1005ffec <LL_init_ucfg_weak+0x154>
1005ffde:	486a      	ldr	r0, [pc, #424]	@ (10060188 <__arm_cp.6_0>)
1005ffe0:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005ffe2:	5c40      	ldrb	r0, [r0, r1]
1005ffe4:	2800      	cmp	r0, #0
1005ffe6:	d000      	beq.n	1005ffea <LL_init_ucfg_weak+0x152>
1005ffe8:	4626      	mov	r6, r4
1005ffea:	4631      	mov	r1, r6
1005ffec:	9818      	ldr	r0, [sp, #96]	@ 0x60
1005ffee:	900b      	str	r0, [sp, #44]	@ 0x2c
1005fff0:	9816      	ldr	r0, [sp, #88]	@ 0x58
1005fff2:	9003      	str	r0, [sp, #12]
1005fff4:	2601      	movs	r6, #1
1005fff6:	4d66      	ldr	r5, [pc, #408]	@ (10060190 <__arm_cp.6_2>)
1005fff8:	4630      	mov	r0, r6
1005fffa:	47a8      	blx	r5
1005fffc:	4f63      	ldr	r7, [pc, #396]	@ (1006018c <__arm_cp.6_1>)
1005fffe:	6839      	ldr	r1, [r7, #0]
10060000:	2290      	movs	r2, #144	@ 0x90
10060002:	5088      	str	r0, [r1, r2]
10060004:	2110      	movs	r1, #16
10060006:	4630      	mov	r0, r6
10060008:	47a8      	blx	r5
1006000a:	6839      	ldr	r1, [r7, #0]
1006000c:	22a0      	movs	r2, #160	@ 0xa0
1006000e:	9204      	str	r2, [sp, #16]
10060010:	5088      	str	r0, [r1, r2]
10060012:	2104      	movs	r1, #4
10060014:	4630      	mov	r0, r6
10060016:	47a8      	blx	r5
10060018:	6839      	ldr	r1, [r7, #0]
1006001a:	22a8      	movs	r2, #168	@ 0xa8
1006001c:	5088      	str	r0, [r1, r2]
1006001e:	2134      	movs	r1, #52	@ 0x34
10060020:	960c      	str	r6, [sp, #48]	@ 0x30
10060022:	4630      	mov	r0, r6
10060024:	47a8      	blx	r5
10060026:	6839      	ldr	r1, [r7, #0]
10060028:	22ac      	movs	r2, #172	@ 0xac
1006002a:	5088      	str	r0, [r1, r2]
1006002c:	9808      	ldr	r0, [sp, #32]
1006002e:	b2c7      	uxtb	r7, r0
10060030:	1f21      	subs	r1, r4, #4
10060032:	4638      	mov	r0, r7
10060034:	47a8      	blx	r5
10060036:	4605      	mov	r5, r0
10060038:	9c02      	ldr	r4, [sp, #8]
1006003a:	2c01      	cmp	r4, #1
1006003c:	d105      	bne.n	1006004a <LL_init_ucfg_weak+0x1b2>
1006003e:	215c      	movs	r1, #92	@ 0x5c
10060040:	4638      	mov	r0, r7
10060042:	f000 fdc7 	bl	10060bd4 <csmem_mem_0_assign>
10060046:	4602      	mov	r2, r0
10060048:	e000      	b.n	1006004c <LL_init_ucfg_weak+0x1b4>
1006004a:	2200      	movs	r2, #0
1006004c:	4638      	mov	r0, r7
1006004e:	4629      	mov	r1, r5
10060050:	f7fe fec6 	bl	1005ede0 <EADV_init>
10060054:	ab10      	add	r3, sp, #64	@ 0x40
10060056:	9809      	ldr	r0, [sp, #36]	@ 0x24
10060058:	70d8      	strb	r0, [r3, #3]
1006005a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1006005c:	7098      	strb	r0, [r3, #2]
1006005e:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10060060:	705e      	strb	r6, [r3, #1]
10060062:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10060064:	7018      	strb	r0, [r3, #0]
10060066:	4620      	mov	r0, r4
10060068:	9d05      	ldr	r5, [sp, #20]
1006006a:	4629      	mov	r1, r5
1006006c:	463a      	mov	r2, r7
1006006e:	f005 fffb 	bl	10066068 <llc_padv_mem_allocate_ucfg_weak>
10060072:	9f03      	ldr	r7, [sp, #12]
10060074:	4638      	mov	r0, r7
10060076:	4621      	mov	r1, r4
10060078:	f7fb fd1d 	bl	1005bab6 <llc_scan_mem_allocate_ucfg_weak>
1006007c:	4638      	mov	r0, r7
1006007e:	4621      	mov	r1, r4
10060080:	462a      	mov	r2, r5
10060082:	f7fb fcf2 	bl	1005ba6a <llc_pscan_mem_allocate_ucfg_weak>
10060086:	4638      	mov	r0, r7
10060088:	4621      	mov	r1, r4
1006008a:	462a      	mov	r2, r5
1006008c:	4633      	mov	r3, r6
1006008e:	f005 ffed 	bl	1006606c <llc_past_mem_allocate_ucfg_weak>
10060092:	9600      	str	r6, [sp, #0]
10060094:	463e      	mov	r6, r7
10060096:	4638      	mov	r0, r7
10060098:	4621      	mov	r1, r4
1006009a:	462a      	mov	r2, r5
1006009c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1006009e:	f7fb fce7 	bl	1005ba70 <llc_pscan_wr_mem_allocate_ucfg_weak>
100600a2:	f7fb fcc0 	bl	1005ba26 <llc_iso_cmn_mem_alloc_ucfg_weak>
100600a6:	2c01      	cmp	r4, #1
100600a8:	d107      	bne.n	100600ba <LL_init_ucfg_weak+0x222>
100600aa:	2d01      	cmp	r5, #1
100600ac:	d105      	bne.n	100600ba <LL_init_ucfg_weak+0x222>
100600ae:	f005 f92b 	bl	10065308 <llc_big_brc_mem_alloc_ucfg_weak>
100600b2:	2e01      	cmp	r6, #1
100600b4:	d101      	bne.n	100600ba <LL_init_ucfg_weak+0x222>
100600b6:	f005 f928 	bl	1006530a <llc_big_sync_mem_alloc_ucfg_weak>
100600ba:	980d      	ldr	r0, [sp, #52]	@ 0x34
100600bc:	2801      	cmp	r0, #1
100600be:	4f33      	ldr	r7, [pc, #204]	@ (1006018c <__arm_cp.6_1>)
100600c0:	d101      	bne.n	100600c6 <LL_init_ucfg_weak+0x22e>
100600c2:	f005 f923 	bl	1006530c <llc_cig_cmn_mem_alloc_ucfg_weak>
100600c6:	f7fb fca7 	bl	1005ba18 <llc_isoal_mem_alloc_ucfg_weak>
100600ca:	9806      	ldr	r0, [sp, #24]
100600cc:	4631      	mov	r1, r6
100600ce:	4622      	mov	r2, r4
100600d0:	462b      	mov	r3, r5
100600d2:	f7fe fd46 	bl	1005eb62 <llc_cte_mem_allocate_ucfg_weak>
100600d6:	4e2c      	ldr	r6, [pc, #176]	@ (10060188 <__arm_cp.6_0>)
100600d8:	7af0      	ldrb	r0, [r6, #11]
100600da:	1c41      	adds	r1, r0, #1
100600dc:	4d2d      	ldr	r5, [pc, #180]	@ (10060194 <__arm_cp.6_3>)
100600de:	4628      	mov	r0, r5
100600e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
100600e2:	f000 fd65 	bl	10060bb0 <csmem_mem_assign>
100600e6:	6839      	ldr	r1, [r7, #0]
100600e8:	22d0      	movs	r2, #208	@ 0xd0
100600ea:	5088      	str	r0, [r1, r2]
100600ec:	7af1      	ldrb	r1, [r6, #11]
100600ee:	2202      	movs	r2, #2
100600f0:	4628      	mov	r0, r5
100600f2:	f000 fd5d 	bl	10060bb0 <csmem_mem_assign>
100600f6:	6839      	ldr	r1, [r7, #0]
100600f8:	460a      	mov	r2, r1
100600fa:	32a0      	adds	r2, #160	@ 0xa0
100600fc:	6350      	str	r0, [r2, #52]	@ 0x34
100600fe:	9804      	ldr	r0, [sp, #16]
10060100:	5808      	ldr	r0, [r1, r0]
10060102:	6078      	str	r0, [r7, #4]
10060104:	6850      	ldr	r0, [r2, #4]
10060106:	60b8      	str	r0, [r7, #8]
10060108:	4620      	mov	r0, r4
1006010a:	f7fb fcd3 	bl	1005bab4 <llc_scan_init_ucfg_weak>
1006010e:	f7fb fcab 	bl	1005ba68 <llc_pscan_init_ucfg_weak>
10060112:	f000 f8e3 	bl	100602dc <LL_sched_init>
10060116:	f7fe fd29 	bl	1005eb6c <LL_dtm_init>
1006011a:	f005 ffa6 	bl	1006606a <llc_padv_init_ucfg_weak>
1006011e:	f7fe fd1f 	bl	1005eb60 <llc_cte_init_ucfg_weak>
10060122:	f7f9 f8e5 	bl	100592f0 <HCI_Init>
10060126:	f7f2 fb41 	bl	100527ac <BLEPLAT_GetDefaultPALevel>
1006012a:	6839      	ldr	r1, [r7, #0]
1006012c:	2400      	movs	r4, #0
1006012e:	728c      	strb	r4, [r1, #10]
10060130:	7248      	strb	r0, [r1, #9]
10060132:	4620      	mov	r0, r4
10060134:	f7f2 fb42 	bl	100527bc <BLEPLAT_SetHighPower>
10060138:	f7f4 fcbe 	bl	10054ab8 <ble_HAL_Init>
1006013c:	6838      	ldr	r0, [r7, #0]
1006013e:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10060140:	f7fd ff03 	bl	1005df4a <LLC_pcl_hal_cntxt_init_ucfg_weak>
10060144:	6838      	ldr	r0, [r7, #0]
10060146:	9d07      	ldr	r5, [sp, #28]
10060148:	5940      	ldr	r0, [r0, r5]
1006014a:	300c      	adds	r0, #12
1006014c:	f002 fe2b 	bl	10062da6 <addr8_list_clear>
10060150:	463e      	mov	r6, r7
10060152:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
10060154:	4638      	mov	r0, r7
10060156:	f7fb fc6d 	bl	1005ba34 <llc_priv_init_ucfg_weak>
1006015a:	6830      	ldr	r0, [r6, #0]
1006015c:	5941      	ldr	r1, [r0, r5]
1006015e:	2240      	movs	r2, #64	@ 0x40
10060160:	548c      	strb	r4, [r1, r2]
10060162:	4a09      	ldr	r2, [pc, #36]	@ (10060188 <__arm_cp.6_0>)
10060164:	8b12      	ldrh	r2, [r2, #24]
10060166:	8302      	strh	r2, [r0, #24]
10060168:	201f      	movs	r0, #31
1006016a:	900f      	str	r0, [sp, #60]	@ 0x3c
1006016c:	43e0      	mvns	r0, r4
1006016e:	900e      	str	r0, [sp, #56]	@ 0x38
10060170:	3148      	adds	r1, #72	@ 0x48
10060172:	a80e      	add	r0, sp, #56	@ 0x38
10060174:	2205      	movs	r2, #5
10060176:	f002 fc8b 	bl	10062a90 <char_copy>
1006017a:	6830      	ldr	r0, [r6, #0]
1006017c:	5940      	ldr	r0, [r0, r5]
1006017e:	02f9      	lsls	r1, r7, #11
10060180:	2254      	movs	r2, #84	@ 0x54
10060182:	5281      	strh	r1, [r0, r2]
10060184:	b011      	add	sp, #68	@ 0x44
10060186:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060188 <__arm_cp.6_0>:
10060188:	20002484 	.word	0x20002484

1006018c <__arm_cp.6_1>:
1006018c:	20002470 	.word	0x20002470

10060190 <__arm_cp.6_2>:
10060190:	10060bd5 	.word	0x10060bd5

10060194 <__arm_cp.6_3>:
10060194:	20002480 	.word	0x20002480

10060198 <LL_init>:
10060198:	b5b0      	push	{r4, r5, r7, lr}
1006019a:	b088      	sub	sp, #32
1006019c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
1006019e:	9406      	str	r4, [sp, #24]
100601a0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
100601a2:	9405      	str	r4, [sp, #20]
100601a4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
100601a6:	9504      	str	r5, [sp, #16]
100601a8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
100601aa:	9503      	str	r5, [sp, #12]
100601ac:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
100601ae:	9502      	str	r5, [sp, #8]
100601b0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
100601b2:	9501      	str	r5, [sp, #4]
100601b4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
100601b6:	9500      	str	r5, [sp, #0]
100601b8:	f7ff fe6e 	bl	1005fe98 <LL_init_ucfg_weak>
100601bc:	2c01      	cmp	r4, #1
100601be:	d112      	bne.n	100601e6 <LL_init+0x4e>
100601c0:	f7fb fc54 	bl	1005ba6c <llc_pscan_wr_init_ucfg_weak>
100601c4:	f7f9 ff00 	bl	10059fc8 <llc_conn_init>
100601c8:	f7ee fddb 	bl	1004ed82 <LL_cpe_init_ucfg>
100601cc:	4807      	ldr	r0, [pc, #28]	@ (100601ec <__arm_cp.7_0>)
100601ce:	7ac1      	ldrb	r1, [r0, #11]
100601d0:	4807      	ldr	r0, [pc, #28]	@ (100601f0 <__arm_cp.7_1>)
100601d2:	6800      	ldr	r0, [r0, #0]
100601d4:	30b0      	adds	r0, #176	@ 0xb0
100601d6:	4a07      	ldr	r2, [pc, #28]	@ (100601f4 <__arm_cp.7_2>)
100601d8:	2305      	movs	r3, #5
100601da:	f002 fb2f 	bl	1006283c <CST_init>
100601de:	f7f4 fcd9 	bl	10054b94 <Acl_Init>
100601e2:	f7fc fd58 	bl	1005cc96 <LLC_chc_ll_cntxt_init_ucfg_weak>
100601e6:	b008      	add	sp, #32
100601e8:	bdb0      	pop	{r4, r5, r7, pc}
100601ea:	46c0      	nop			@ (mov r8, r8)

100601ec <__arm_cp.7_0>:
100601ec:	20002484 	.word	0x20002484

100601f0 <__arm_cp.7_1>:
100601f0:	20002470 	.word	0x20002470

100601f4 <__arm_cp.7_2>:
100601f4:	1005fe75 	.word	0x1005fe75

100601f8 <Is_Address_Initialized>:
100601f8:	2100      	movs	r1, #0
100601fa:	460a      	mov	r2, r1
100601fc:	2906      	cmp	r1, #6
100601fe:	d005      	beq.n	1006020c <Is_Address_Initialized+0x14>
10060200:	5c43      	ldrb	r3, [r0, r1]
10060202:	2b00      	cmp	r3, #0
10060204:	d000      	beq.n	10060208 <Is_Address_Initialized+0x10>
10060206:	2201      	movs	r2, #1
10060208:	1c49      	adds	r1, r1, #1
1006020a:	e7f7      	b.n	100601fc <Is_Address_Initialized+0x4>
1006020c:	b2d0      	uxtb	r0, r2
1006020e:	4770      	bx	lr

10060210 <get_rf_rx_path_compensation_db>:
10060210:	4804      	ldr	r0, [pc, #16]	@ (10060224 <__arm_cp.10_0>)
10060212:	6800      	ldr	r0, [r0, #0]
10060214:	215e      	movs	r1, #94	@ 0x5e
10060216:	5e40      	ldrsh	r0, [r0, r1]
10060218:	210d      	movs	r1, #13
1006021a:	4341      	muls	r1, r0
1006021c:	3140      	adds	r1, #64	@ 0x40
1006021e:	11c8      	asrs	r0, r1, #7
10060220:	4770      	bx	lr
10060222:	46c0      	nop			@ (mov r8, r8)

10060224 <__arm_cp.10_0>:
10060224:	20002470 	.word	0x20002470

10060228 <LL_get_tx_common_buffer_p>:
10060228:	4802      	ldr	r0, [pc, #8]	@ (10060234 <__arm_cp.11_0>)
1006022a:	6800      	ldr	r0, [r0, #0]
1006022c:	218c      	movs	r1, #140	@ 0x8c
1006022e:	5840      	ldr	r0, [r0, r1]
10060230:	4770      	bx	lr
10060232:	46c0      	nop			@ (mov r8, r8)

10060234 <__arm_cp.11_0>:
10060234:	20002470 	.word	0x20002470

10060238 <LL_get_rx_common_buffer_p>:
10060238:	4802      	ldr	r0, [pc, #8]	@ (10060244 <__arm_cp.12_0>)
1006023a:	6800      	ldr	r0, [r0, #0]
1006023c:	2190      	movs	r1, #144	@ 0x90
1006023e:	5840      	ldr	r0, [r0, r1]
10060240:	4770      	bx	lr
10060242:	46c0      	nop			@ (mov r8, r8)

10060244 <__arm_cp.12_0>:
10060244:	20002470 	.word	0x20002470

10060248 <LL_get_control_pdu_size>:
10060248:	2800      	cmp	r0, #0
1006024a:	d001      	beq.n	10060250 <LL_get_control_pdu_size+0x8>
1006024c:	2030      	movs	r0, #48	@ 0x30
1006024e:	4770      	bx	lr
10060250:	2020      	movs	r0, #32
10060252:	4770      	bx	lr

10060254 <llc_get_linkms_cntxt_p>:
10060254:	4802      	ldr	r0, [pc, #8]	@ (10060260 <__arm_cp.15_0>)
10060256:	6800      	ldr	r0, [r0, #0]
10060258:	219c      	movs	r1, #156	@ 0x9c
1006025a:	5840      	ldr	r0, [r0, r1]
1006025c:	4770      	bx	lr
1006025e:	46c0      	nop			@ (mov r8, r8)

10060260 <__arm_cp.15_0>:
10060260:	20002470 	.word	0x20002470

10060264 <llc_get_next_free_conn_handle>:
10060264:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10060266:	4815      	ldr	r0, [pc, #84]	@ (100602bc <__arm_cp.16_0>)
10060268:	6800      	ldr	r0, [r0, #0]
1006026a:	219c      	movs	r1, #156	@ 0x9c
1006026c:	9102      	str	r1, [sp, #8]
1006026e:	5841      	ldr	r1, [r0, r1]
10060270:	2054      	movs	r0, #84	@ 0x54
10060272:	9001      	str	r0, [sp, #4]
10060274:	5a08      	ldrh	r0, [r1, r0]
10060276:	6bcf      	ldr	r7, [r1, #60]	@ 0x3c
10060278:	4c12      	ldr	r4, [pc, #72]	@ (100602c4 <__arm_cp.16_2>)
1006027a:	1c45      	adds	r5, r0, #1
1006027c:	b2a9      	uxth	r1, r5
1006027e:	0a09      	lsrs	r1, r1, #8
10060280:	290e      	cmp	r1, #14
10060282:	d901      	bls.n	10060288 <llc_get_next_free_conn_handle+0x24>
10060284:	490e      	ldr	r1, [pc, #56]	@ (100602c0 <__arm_cp.16_1>)
10060286:	1845      	adds	r5, r0, r1
10060288:	2f00      	cmp	r7, #0
1006028a:	d00f      	beq.n	100602ac <llc_get_next_free_conn_handle+0x48>
1006028c:	2600      	movs	r6, #0
1006028e:	6820      	ldr	r0, [r4, #0]
10060290:	2134      	movs	r1, #52	@ 0x34
10060292:	5c41      	ldrb	r1, [r0, r1]
10060294:	b2f0      	uxtb	r0, r6
10060296:	4288      	cmp	r0, r1
10060298:	d208      	bcs.n	100602ac <llc_get_next_free_conn_handle+0x48>
1006029a:	f7f9 fe4d 	bl	10059f38 <llc_conn_get_cntxt_per_p>
1006029e:	1c76      	adds	r6, r6, #1
100602a0:	b2a9      	uxth	r1, r5
100602a2:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
100602a4:	4281      	cmp	r1, r0
100602a6:	d1f2      	bne.n	1006028e <llc_get_next_free_conn_handle+0x2a>
100602a8:	4628      	mov	r0, r5
100602aa:	e7e6      	b.n	1006027a <llc_get_next_free_conn_handle+0x16>
100602ac:	4803      	ldr	r0, [pc, #12]	@ (100602bc <__arm_cp.16_0>)
100602ae:	6800      	ldr	r0, [r0, #0]
100602b0:	9902      	ldr	r1, [sp, #8]
100602b2:	5840      	ldr	r0, [r0, r1]
100602b4:	9901      	ldr	r1, [sp, #4]
100602b6:	5245      	strh	r5, [r0, r1]
100602b8:	b2a8      	uxth	r0, r5
100602ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100602bc <__arm_cp.16_0>:
100602bc:	20002470 	.word	0x20002470

100602c0 <__arm_cp.16_1>:
100602c0:	fffff102 	.word	0xfffff102

100602c4 <__arm_cp.16_2>:
100602c4:	2000241c 	.word	0x2000241c

100602c8 <LL_sched_time_t1_ge_t2>:
100602c8:	43c0      	mvns	r0, r0
100602ca:	1840      	adds	r0, r0, r1
100602cc:	0fc0      	lsrs	r0, r0, #31
100602ce:	4770      	bx	lr

100602d0 <LL_sched_engine_return_actual_scheduler_margin>:
100602d0:	4801      	ldr	r0, [pc, #4]	@ (100602d8 <__arm_cp.2_0>)
100602d2:	6800      	ldr	r0, [r0, #0]
100602d4:	6880      	ldr	r0, [r0, #8]
100602d6:	4770      	bx	lr

100602d8 <__arm_cp.2_0>:
100602d8:	20002474 	.word	0x20002474

100602dc <LL_sched_init>:
100602dc:	4809      	ldr	r0, [pc, #36]	@ (10060304 <__arm_cp.4_0>)
100602de:	7ac0      	ldrb	r0, [r0, #11]
100602e0:	4909      	ldr	r1, [pc, #36]	@ (10060308 <__arm_cp.4_1>)
100602e2:	6809      	ldr	r1, [r1, #0]
100602e4:	3112      	adds	r1, #18
100602e6:	2800      	cmp	r0, #0
100602e8:	d004      	beq.n	100602f4 <LL_sched_init+0x18>
100602ea:	2200      	movs	r2, #0
100602ec:	800a      	strh	r2, [r1, #0]
100602ee:	312c      	adds	r1, #44	@ 0x2c
100602f0:	1e40      	subs	r0, r0, #1
100602f2:	e7f8      	b.n	100602e6 <LL_sched_init+0xa>
100602f4:	4805      	ldr	r0, [pc, #20]	@ (1006030c <__arm_cp.4_2>)
100602f6:	6800      	ldr	r0, [r0, #0]
100602f8:	2100      	movs	r1, #0
100602fa:	73c1      	strb	r1, [r0, #15]
100602fc:	21ff      	movs	r1, #255	@ 0xff
100602fe:	0209      	lsls	r1, r1, #8
10060300:	8181      	strh	r1, [r0, #12]
10060302:	4770      	bx	lr

10060304 <__arm_cp.4_0>:
10060304:	20002484 	.word	0x20002484

10060308 <__arm_cp.4_1>:
10060308:	20002478 	.word	0x20002478

1006030c <__arm_cp.4_2>:
1006030c:	20002474 	.word	0x20002474

10060310 <LL_sched_set_anchor>:
10060310:	222c      	movs	r2, #44	@ 0x2c
10060312:	4342      	muls	r2, r0
10060314:	4801      	ldr	r0, [pc, #4]	@ (1006031c <__arm_cp.5_0>)
10060316:	6800      	ldr	r0, [r0, #0]
10060318:	5081      	str	r1, [r0, r2]
1006031a:	4770      	bx	lr

1006031c <__arm_cp.5_0>:
1006031c:	20002478 	.word	0x20002478

10060320 <LL_sched_set_taskslot_length_anchor>:
10060320:	232c      	movs	r3, #44	@ 0x2c
10060322:	4343      	muls	r3, r0
10060324:	4802      	ldr	r0, [pc, #8]	@ (10060330 <__arm_cp.6_0>)
10060326:	6800      	ldr	r0, [r0, #0]
10060328:	50c2      	str	r2, [r0, r3]
1006032a:	18c0      	adds	r0, r0, r3
1006032c:	6041      	str	r1, [r0, #4]
1006032e:	4770      	bx	lr

10060330 <__arm_cp.6_0>:
10060330:	20002478 	.word	0x20002478

10060334 <LL_sched_set_cancel_request>:
10060334:	28ff      	cmp	r0, #255	@ 0xff
10060336:	d00b      	beq.n	10060350 <LL_sched_set_cancel_request+0x1c>
10060338:	212c      	movs	r1, #44	@ 0x2c
1006033a:	4341      	muls	r1, r0
1006033c:	4805      	ldr	r0, [pc, #20]	@ (10060354 <__arm_cp.9_0>)
1006033e:	6800      	ldr	r0, [r0, #0]
10060340:	1840      	adds	r0, r0, r1
10060342:	7c81      	ldrb	r1, [r0, #18]
10060344:	2908      	cmp	r1, #8
10060346:	d001      	beq.n	1006034c <LL_sched_set_cancel_request+0x18>
10060348:	2110      	movs	r1, #16
1006034a:	e000      	b.n	1006034e <LL_sched_set_cancel_request+0x1a>
1006034c:	2120      	movs	r1, #32
1006034e:	7481      	strb	r1, [r0, #18]
10060350:	4770      	bx	lr
10060352:	46c0      	nop			@ (mov r8, r8)

10060354 <__arm_cp.9_0>:
10060354:	20002478 	.word	0x20002478

10060358 <LL_sched_enable_taskslot>:
10060358:	b5f0      	push	{r4, r5, r6, r7, lr}
1006035a:	b088      	sub	sp, #32
1006035c:	9307      	str	r3, [sp, #28]
1006035e:	272c      	movs	r7, #44	@ 0x2c
10060360:	4347      	muls	r7, r0
10060362:	481a      	ldr	r0, [pc, #104]	@ (100603cc <__arm_cp.10_0>)
10060364:	6806      	ldr	r6, [r0, #0]
10060366:	19f0      	adds	r0, r6, r7
10060368:	7c84      	ldrb	r4, [r0, #18]
1006036a:	2c01      	cmp	r4, #1
1006036c:	d12b      	bne.n	100603c6 <LL_sched_enable_taskslot+0x6e>
1006036e:	4603      	mov	r3, r0
10060370:	3312      	adds	r3, #18
10060372:	9d14      	ldr	r5, [sp, #80]	@ 0x50
10060374:	9506      	str	r5, [sp, #24]
10060376:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
10060378:	9505      	str	r5, [sp, #20]
1006037a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1006037c:	9503      	str	r5, [sp, #12]
1006037e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
10060380:	9502      	str	r5, [sp, #8]
10060382:	9104      	str	r1, [sp, #16]
10060384:	9910      	ldr	r1, [sp, #64]	@ 0x40
10060386:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10060388:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1006038a:	9400      	str	r4, [sp, #0]
1006038c:	9201      	str	r2, [sp, #4]
1006038e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10060390:	9c07      	ldr	r4, [sp, #28]
10060392:	6044      	str	r4, [r0, #4]
10060394:	6082      	str	r2, [r0, #8]
10060396:	9a00      	ldr	r2, [sp, #0]
10060398:	51f2      	str	r2, [r6, r7]
1006039a:	221f      	movs	r2, #31
1006039c:	4015      	ands	r5, r2
1006039e:	7545      	strb	r5, [r0, #21]
100603a0:	4011      	ands	r1, r2
100603a2:	7581      	strb	r1, [r0, #22]
100603a4:	2101      	movs	r1, #1
100603a6:	7501      	strb	r1, [r0, #20]
100603a8:	9a01      	ldr	r2, [sp, #4]
100603aa:	74c2      	strb	r2, [r0, #19]
100603ac:	8201      	strh	r1, [r0, #16]
100603ae:	9902      	ldr	r1, [sp, #8]
100603b0:	61c1      	str	r1, [r0, #28]
100603b2:	9903      	ldr	r1, [sp, #12]
100603b4:	6201      	str	r1, [r0, #32]
100603b6:	9905      	ldr	r1, [sp, #20]
100603b8:	6241      	str	r1, [r0, #36]	@ 0x24
100603ba:	9906      	ldr	r1, [sp, #24]
100603bc:	6281      	str	r1, [r0, #40]	@ 0x28
100603be:	9904      	ldr	r1, [sp, #16]
100603c0:	60c1      	str	r1, [r0, #12]
100603c2:	2002      	movs	r0, #2
100603c4:	7018      	strb	r0, [r3, #0]
100603c6:	b008      	add	sp, #32
100603c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100603ca:	46c0      	nop			@ (mov r8, r8)

100603cc <__arm_cp.10_0>:
100603cc:	20002478 	.word	0x20002478

100603d0 <LL_sched_is_scheduler_call_pending>:
100603d0:	b580      	push	{r7, lr}
100603d2:	490a      	ldr	r1, [pc, #40]	@ (100603fc <__arm_cp.11_0>)
100603d4:	6809      	ldr	r1, [r1, #0]
100603d6:	7b0a      	ldrb	r2, [r1, #12]
100603d8:	2a01      	cmp	r2, #1
100603da:	d106      	bne.n	100603ea <LL_sched_is_scheduler_call_pending+0x1a>
100603dc:	7bca      	ldrb	r2, [r1, #15]
100603de:	2a03      	cmp	r2, #3
100603e0:	d105      	bne.n	100603ee <LL_sched_is_scheduler_call_pending+0x1e>
100603e2:	2000      	movs	r0, #0
100603e4:	f7fb fb92 	bl	1005bb0c <llc_scan_stop_ucfg_weak>
100603e8:	bd80      	pop	{r7, pc}
100603ea:	2000      	movs	r0, #0
100603ec:	bd80      	pop	{r7, pc}
100603ee:	6809      	ldr	r1, [r1, #0]
100603f0:	1a08      	subs	r0, r1, r0
100603f2:	4903      	ldr	r1, [pc, #12]	@ (10060400 <__arm_cp.11_1>)
100603f4:	1840      	adds	r0, r0, r1
100603f6:	0fc0      	lsrs	r0, r0, #31
100603f8:	bd80      	pop	{r7, pc}
100603fa:	46c0      	nop			@ (mov r8, r8)

100603fc <__arm_cp.11_0>:
100603fc:	20002474 	.word	0x20002474

10060400 <__arm_cp.11_1>:
10060400:	fffffe0b 	.word	0xfffffe0b

10060404 <LL_sched_anchorstretch>:
10060404:	4902      	ldr	r1, [pc, #8]	@ (10060410 <__arm_cp.12_0>)
10060406:	6809      	ldr	r1, [r1, #0]
10060408:	684a      	ldr	r2, [r1, #4]
1006040a:	6002      	str	r2, [r0, #0]
1006040c:	7b88      	ldrb	r0, [r1, #14]
1006040e:	4770      	bx	lr

10060410 <__arm_cp.12_0>:
10060410:	20002474 	.word	0x20002474

10060414 <LL_sched_engine>:
10060414:	b5f0      	push	{r4, r5, r6, r7, lr}
10060416:	b0b3      	sub	sp, #204	@ 0xcc
10060418:	4607      	mov	r7, r0
1006041a:	48dc      	ldr	r0, [pc, #880]	@ (1006078c <__arm_cp.13_0>)
1006041c:	6800      	ldr	r0, [r0, #0]
1006041e:	900b      	str	r0, [sp, #44]	@ 0x2c
10060420:	2001      	movs	r0, #1
10060422:	9001      	str	r0, [sp, #4]
10060424:	9009      	str	r0, [sp, #36]	@ 0x24
10060426:	2100      	movs	r1, #0
10060428:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1006042a:	7381      	strb	r1, [r0, #14]
1006042c:	48d8      	ldr	r0, [pc, #864]	@ (10060790 <__arm_cp.13_1>)
1006042e:	6803      	ldr	r3, [r0, #0]
10060430:	910a      	str	r1, [sp, #40]	@ 0x28
10060432:	7219      	strb	r1, [r3, #8]
10060434:	20ff      	movs	r0, #255	@ 0xff
10060436:	9008      	str	r0, [sp, #32]
10060438:	3002      	adds	r0, #2
1006043a:	8298      	strh	r0, [r3, #20]
1006043c:	7c18      	ldrb	r0, [r3, #16]
1006043e:	21f0      	movs	r1, #240	@ 0xf0
10060440:	4001      	ands	r1, r0
10060442:	090a      	lsrs	r2, r1, #4
10060444:	1888      	adds	r0, r1, r2
10060446:	7418      	strb	r0, [r3, #16]
10060448:	8a59      	ldrh	r1, [r3, #18]
1006044a:	40d1      	lsrs	r1, r2
1006044c:	07c9      	lsls	r1, r1, #31
1006044e:	49d1      	ldr	r1, [pc, #836]	@ (10060794 <__arm_cp.13_2>)
10060450:	6809      	ldr	r1, [r1, #0]
10060452:	9107      	str	r1, [sp, #28]
10060454:	9305      	str	r3, [sp, #20]
10060456:	d006      	beq.n	10060466 <LL_sched_engine+0x52>
10060458:	2000      	movs	r0, #0
1006045a:	f002 f991 	bl	10062780 <tsk_notify_idx>
1006045e:	f7f1 fb12 	bl	10051a86 <BLE_STACK_ProcessRequest>
10060462:	9b05      	ldr	r3, [sp, #20]
10060464:	7c18      	ldrb	r0, [r3, #16]
10060466:	210f      	movs	r1, #15
10060468:	9102      	str	r1, [sp, #8]
1006046a:	4008      	ands	r0, r1
1006046c:	7418      	strb	r0, [r3, #16]
1006046e:	2196      	movs	r1, #150	@ 0x96
10060470:	9809      	ldr	r0, [sp, #36]	@ 0x24
10060472:	4341      	muls	r1, r0
10060474:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10060476:	9112      	str	r1, [sp, #72]	@ 0x48
10060478:	6081      	str	r1, [r0, #8]
1006047a:	2001      	movs	r0, #1
1006047c:	9004      	str	r0, [sp, #16]
1006047e:	43c0      	mvns	r0, r0
10060480:	b279      	sxtb	r1, r7
10060482:	4281      	cmp	r1, r0
10060484:	dc10      	bgt.n	100604a8 <LL_sched_engine+0x94>
10060486:	207f      	movs	r0, #127	@ 0x7f
10060488:	4007      	ands	r7, r0
1006048a:	252c      	movs	r5, #44	@ 0x2c
1006048c:	437d      	muls	r5, r7
1006048e:	9c07      	ldr	r4, [sp, #28]
10060490:	1960      	adds	r0, r4, r5
10060492:	900a      	str	r0, [sp, #40]	@ 0x28
10060494:	5966      	ldr	r6, [r4, r5]
10060496:	f7f2 f9a8 	bl	100527ea <BLEPLAT_GetCurrentSysTime>
1006049a:	1a30      	subs	r0, r6, r0
1006049c:	49be      	ldr	r1, [pc, #760]	@ (10060798 <__arm_cp.13_3>)
1006049e:	1840      	adds	r0, r0, r1
100604a0:	d500      	bpl.n	100604a4 <LL_sched_engine+0x90>
100604a2:	e0ef      	b.n	10060684 <LL_sched_engine+0x270>
100604a4:	4638      	mov	r0, r7
100604a6:	e004      	b.n	100604b2 <LL_sched_engine+0x9e>
100604a8:	b2f8      	uxtb	r0, r7
100604aa:	28ff      	cmp	r0, #255	@ 0xff
100604ac:	d00e      	beq.n	100604cc <LL_sched_engine+0xb8>
100604ae:	2100      	movs	r1, #0
100604b0:	910a      	str	r1, [sp, #40]	@ 0x28
100604b2:	212c      	movs	r1, #44	@ 0x2c
100604b4:	4341      	muls	r1, r0
100604b6:	9807      	ldr	r0, [sp, #28]
100604b8:	1840      	adds	r0, r0, r1
100604ba:	2101      	movs	r1, #1
100604bc:	7501      	strb	r1, [r0, #20]
100604be:	7c81      	ldrb	r1, [r0, #18]
100604c0:	2908      	cmp	r1, #8
100604c2:	d102      	bne.n	100604ca <LL_sched_engine+0xb6>
100604c4:	3012      	adds	r0, #18
100604c6:	2104      	movs	r1, #4
100604c8:	7001      	strb	r1, [r0, #0]
100604ca:	9708      	str	r7, [sp, #32]
100604cc:	f7f2 f98d 	bl	100527ea <BLEPLAT_GetCurrentSysTime>
100604d0:	9912      	ldr	r1, [sp, #72]	@ 0x48
100604d2:	180c      	adds	r4, r1, r0
100604d4:	48af      	ldr	r0, [pc, #700]	@ (10060794 <__arm_cp.13_2>)
100604d6:	6807      	ldr	r7, [r0, #0]
100604d8:	3728      	adds	r7, #40	@ 0x28
100604da:	2500      	movs	r5, #0
100604dc:	4628      	mov	r0, r5
100604de:	49af      	ldr	r1, [pc, #700]	@ (1006079c <__arm_cp.13_4>)
100604e0:	7aca      	ldrb	r2, [r1, #11]
100604e2:	4295      	cmp	r5, r2
100604e4:	d23a      	bcs.n	1006055c <LL_sched_engine+0x148>
100604e6:	463e      	mov	r6, r7
100604e8:	3e16      	subs	r6, #22
100604ea:	7831      	ldrb	r1, [r6, #0]
100604ec:	070a      	lsls	r2, r1, #28
100604ee:	0f52      	lsrs	r2, r2, #29
100604f0:	d01e      	beq.n	10060530 <LL_sched_engine+0x11c>
100604f2:	2104      	movs	r1, #4
100604f4:	7031      	strb	r1, [r6, #0]
100604f6:	4639      	mov	r1, r7
100604f8:	3928      	subs	r1, #40	@ 0x28
100604fa:	6809      	ldr	r1, [r1, #0]
100604fc:	43ca      	mvns	r2, r1
100604fe:	18a2      	adds	r2, r4, r2
10060500:	d429      	bmi.n	10060556 <LL_sched_engine+0x142>
10060502:	1a61      	subs	r1, r4, r1
10060504:	4638      	mov	r0, r7
10060506:	381c      	subs	r0, #28
10060508:	6800      	ldr	r0, [r0, #0]
1006050a:	463a      	mov	r2, r7
1006050c:	3a0c      	subs	r2, #12
1006050e:	6812      	ldr	r2, [r2, #0]
10060510:	4790      	blx	r2
10060512:	4639      	mov	r1, r7
10060514:	3918      	subs	r1, #24
10060516:	880a      	ldrh	r2, [r1, #0]
10060518:	1812      	adds	r2, r2, r0
1006051a:	800a      	strh	r2, [r1, #0]
1006051c:	4639      	mov	r1, r7
1006051e:	3914      	subs	r1, #20
10060520:	780a      	ldrb	r2, [r1, #0]
10060522:	1880      	adds	r0, r0, r2
10060524:	287f      	cmp	r0, #127	@ 0x7f
10060526:	d300      	bcc.n	1006052a <LL_sched_engine+0x116>
10060528:	207f      	movs	r0, #127	@ 0x7f
1006052a:	7008      	strb	r0, [r1, #0]
1006052c:	7831      	ldrb	r1, [r6, #0]
1006052e:	2001      	movs	r0, #1
10060530:	0689      	lsls	r1, r1, #26
10060532:	0f89      	lsrs	r1, r1, #30
10060534:	d00f      	beq.n	10060556 <LL_sched_engine+0x142>
10060536:	6839      	ldr	r1, [r7, #0]
10060538:	2900      	cmp	r1, #0
1006053a:	d006      	beq.n	1006054a <LL_sched_engine+0x136>
1006053c:	4638      	mov	r0, r7
1006053e:	381c      	subs	r0, #28
10060540:	6800      	ldr	r0, [r0, #0]
10060542:	4788      	blx	r1
10060544:	7830      	ldrb	r0, [r6, #0]
10060546:	2801      	cmp	r0, #1
10060548:	d004      	beq.n	10060554 <LL_sched_engine+0x140>
1006054a:	2000      	movs	r0, #0
1006054c:	7030      	strb	r0, [r6, #0]
1006054e:	4639      	mov	r1, r7
10060550:	3915      	subs	r1, #21
10060552:	7008      	strb	r0, [r1, #0]
10060554:	2001      	movs	r0, #1
10060556:	372c      	adds	r7, #44	@ 0x2c
10060558:	1c6d      	adds	r5, r5, #1
1006055a:	e7c0      	b.n	100604de <LL_sched_engine+0xca>
1006055c:	2800      	cmp	r0, #0
1006055e:	d1b5      	bne.n	100604cc <LL_sched_engine+0xb8>
10060560:	488c      	ldr	r0, [pc, #560]	@ (10060794 <__arm_cp.13_2>)
10060562:	6800      	ldr	r0, [r0, #0]
10060564:	4603      	mov	r3, r0
10060566:	3312      	adds	r3, #18
10060568:	2400      	movs	r4, #0
1006056a:	4621      	mov	r1, r4
1006056c:	42a2      	cmp	r2, r4
1006056e:	d009      	beq.n	10060584 <LL_sched_engine+0x170>
10060570:	781d      	ldrb	r5, [r3, #0]
10060572:	2d04      	cmp	r5, #4
10060574:	d103      	bne.n	1006057e <LL_sched_engine+0x16a>
10060576:	b2cd      	uxtb	r5, r1
10060578:	ae13      	add	r6, sp, #76	@ 0x4c
1006057a:	5574      	strb	r4, [r6, r5]
1006057c:	1c49      	adds	r1, r1, #1
1006057e:	332c      	adds	r3, #44	@ 0x2c
10060580:	1c64      	adds	r4, r4, #1
10060582:	e7f3      	b.n	1006056c <LL_sched_engine+0x158>
10060584:	060a      	lsls	r2, r1, #24
10060586:	d074      	beq.n	10060672 <LL_sched_engine+0x25e>
10060588:	b2ca      	uxtb	r2, r1
1006058a:	920e      	str	r2, [sp, #56]	@ 0x38
1006058c:	2200      	movs	r2, #0
1006058e:	9206      	str	r2, [sp, #24]
10060590:	460c      	mov	r4, r1
10060592:	9203      	str	r2, [sp, #12]
10060594:	4616      	mov	r6, r2
10060596:	910d      	str	r1, [sp, #52]	@ 0x34
10060598:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1006059a:	4296      	cmp	r6, r2
1006059c:	d06e      	beq.n	1006067c <LL_sched_engine+0x268>
1006059e:	9612      	str	r6, [sp, #72]	@ 0x48
100605a0:	9410      	str	r4, [sp, #64]	@ 0x40
100605a2:	b2e3      	uxtb	r3, r4
100605a4:	2700      	movs	r7, #0
100605a6:	462c      	mov	r4, r5
100605a8:	463e      	mov	r6, r7
100605aa:	42bb      	cmp	r3, r7
100605ac:	d00d      	beq.n	100605ca <LL_sched_engine+0x1b6>
100605ae:	aa13      	add	r2, sp, #76	@ 0x4c
100605b0:	5dd2      	ldrb	r2, [r2, r7]
100605b2:	252c      	movs	r5, #44	@ 0x2c
100605b4:	4355      	muls	r5, r2
100605b6:	5945      	ldr	r5, [r0, r5]
100605b8:	2f00      	cmp	r7, #0
100605ba:	d002      	beq.n	100605c2 <LL_sched_engine+0x1ae>
100605bc:	43f2      	mvns	r2, r6
100605be:	18aa      	adds	r2, r5, r2
100605c0:	d501      	bpl.n	100605c6 <LL_sched_engine+0x1b2>
100605c2:	463c      	mov	r4, r7
100605c4:	462e      	mov	r6, r5
100605c6:	1c7f      	adds	r7, r7, #1
100605c8:	e7ef      	b.n	100605aa <LL_sched_engine+0x196>
100605ca:	9d12      	ldr	r5, [sp, #72]	@ 0x48
100605cc:	1b4a      	subs	r2, r1, r5
100605ce:	b2d2      	uxtb	r2, r2
100605d0:	1e51      	subs	r1, r2, #1
100605d2:	aa13      	add	r2, sp, #76	@ 0x4c
100605d4:	5c53      	ldrb	r3, [r2, r1]
100605d6:	b2e4      	uxtb	r4, r4
100605d8:	5d17      	ldrb	r7, [r2, r4]
100605da:	5457      	strb	r7, [r2, r1]
100605dc:	5513      	strb	r3, [r2, r4]
100605de:	910f      	str	r1, [sp, #60]	@ 0x3c
100605e0:	b2cb      	uxtb	r3, r1
100605e2:	5cd3      	ldrb	r3, [r2, r3]
100605e4:	2d00      	cmp	r5, #0
100605e6:	d02e      	beq.n	10060646 <LL_sched_engine+0x232>
100605e8:	461d      	mov	r5, r3
100605ea:	9911      	ldr	r1, [sp, #68]	@ 0x44
100605ec:	b2ca      	uxtb	r2, r1
100605ee:	ac13      	add	r4, sp, #76	@ 0x4c
100605f0:	5ca4      	ldrb	r4, [r4, r2]
100605f2:	272c      	movs	r7, #44	@ 0x2c
100605f4:	437c      	muls	r4, r7
100605f6:	5902      	ldr	r2, [r0, r4]
100605f8:	1b91      	subs	r1, r2, r6
100605fa:	1904      	adds	r4, r0, r4
100605fc:	6863      	ldr	r3, [r4, #4]
100605fe:	18c9      	adds	r1, r1, r3
10060600:	3195      	adds	r1, #149	@ 0x95
10060602:	d44a      	bmi.n	1006069a <LL_sched_engine+0x286>
10060604:	43d1      	mvns	r1, r2
10060606:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10060608:	1851      	adds	r1, r2, r1
1006060a:	d449      	bmi.n	100606a0 <LL_sched_engine+0x28c>
1006060c:	436f      	muls	r7, r5
1006060e:	19c1      	adds	r1, r0, r7
10060610:	7d8a      	ldrb	r2, [r1, #22]
10060612:	7d0b      	ldrb	r3, [r1, #20]
10060614:	4093      	lsls	r3, r2
10060616:	7d49      	ldrb	r1, [r1, #21]
10060618:	2601      	movs	r6, #1
1006061a:	4632      	mov	r2, r6
1006061c:	408a      	lsls	r2, r1
1006061e:	429a      	cmp	r2, r3
10060620:	d800      	bhi.n	10060624 <LL_sched_engine+0x210>
10060622:	4613      	mov	r3, r2
10060624:	7da1      	ldrb	r1, [r4, #22]
10060626:	7d27      	ldrb	r7, [r4, #20]
10060628:	408f      	lsls	r7, r1
1006062a:	7d61      	ldrb	r1, [r4, #21]
1006062c:	408e      	lsls	r6, r1
1006062e:	42be      	cmp	r6, r7
10060630:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10060632:	d800      	bhi.n	10060636 <LL_sched_engine+0x222>
10060634:	4637      	mov	r7, r6
10060636:	429f      	cmp	r7, r3
10060638:	462b      	mov	r3, r5
1006063a:	990d      	ldr	r1, [sp, #52]	@ 0x34
1006063c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1006063e:	d300      	bcc.n	10060642 <LL_sched_engine+0x22e>
10060640:	9b11      	ldr	r3, [sp, #68]	@ 0x44
10060642:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10060644:	e011      	b.n	1006066a <LL_sched_engine+0x256>
10060646:	990d      	ldr	r1, [sp, #52]	@ 0x34
10060648:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1006064a:	2a01      	cmp	r2, #1
1006064c:	d101      	bne.n	10060652 <LL_sched_engine+0x23e>
1006064e:	2202      	movs	r2, #2
10060650:	9206      	str	r2, [sp, #24]
10060652:	9c10      	ldr	r4, [sp, #64]	@ 0x40
10060654:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10060656:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10060658:	222c      	movs	r2, #44	@ 0x2c
1006065a:	435a      	muls	r2, r3
1006065c:	5883      	ldr	r3, [r0, r2]
1006065e:	1882      	adds	r2, r0, r2
10060660:	6852      	ldr	r2, [r2, #4]
10060662:	189a      	adds	r2, r3, r2
10060664:	3296      	adds	r2, #150	@ 0x96
10060666:	920c      	str	r2, [sp, #48]	@ 0x30
10060668:	462b      	mov	r3, r5
1006066a:	1e64      	subs	r4, r4, #1
1006066c:	1c76      	adds	r6, r6, #1
1006066e:	9311      	str	r3, [sp, #68]	@ 0x44
10060670:	e792      	b.n	10060598 <LL_sched_engine+0x184>
10060672:	2000      	movs	r0, #0
10060674:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10060676:	6048      	str	r0, [r1, #4]
10060678:	7388      	strb	r0, [r1, #14]
1006067a:	e02d      	b.n	100606d8 <LL_sched_engine+0x2c4>
1006067c:	9a03      	ldr	r2, [sp, #12]
1006067e:	4616      	mov	r6, r2
10060680:	9b06      	ldr	r3, [sp, #24]
10060682:	e013      	b.n	100606ac <LL_sched_engine+0x298>
10060684:	1960      	adds	r0, r4, r5
10060686:	7c80      	ldrb	r0, [r0, #18]
10060688:	2810      	cmp	r0, #16
1006068a:	d100      	bne.n	1006068e <LL_sched_engine+0x27a>
1006068c:	e70a      	b.n	100604a4 <LL_sched_engine+0x90>
1006068e:	2820      	cmp	r0, #32
10060690:	d100      	bne.n	10060694 <LL_sched_engine+0x280>
10060692:	e707      	b.n	100604a4 <LL_sched_engine+0x90>
10060694:	2400      	movs	r4, #0
10060696:	463d      	mov	r5, r7
10060698:	e021      	b.n	100606de <LL_sched_engine+0x2ca>
1006069a:	3e96      	subs	r6, #150	@ 0x96
1006069c:	9b04      	ldr	r3, [sp, #16]
1006069e:	e004      	b.n	100606aa <LL_sched_engine+0x296>
100606a0:	980d      	ldr	r0, [sp, #52]	@ 0x34
100606a2:	1e40      	subs	r0, r0, #1
100606a4:	9011      	str	r0, [sp, #68]	@ 0x44
100606a6:	2600      	movs	r6, #0
100606a8:	4633      	mov	r3, r6
100606aa:	9a03      	ldr	r2, [sp, #12]
100606ac:	9811      	ldr	r0, [sp, #68]	@ 0x44
100606ae:	b2c0      	uxtb	r0, r0
100606b0:	a913      	add	r1, sp, #76	@ 0x4c
100606b2:	5c0d      	ldrb	r5, [r1, r0]
100606b4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
100606b6:	6042      	str	r2, [r0, #4]
100606b8:	7383      	strb	r3, [r0, #14]
100606ba:	2dff      	cmp	r5, #255	@ 0xff
100606bc:	d00c      	beq.n	100606d8 <LL_sched_engine+0x2c4>
100606be:	202c      	movs	r0, #44	@ 0x2c
100606c0:	4368      	muls	r0, r5
100606c2:	9907      	ldr	r1, [sp, #28]
100606c4:	1809      	adds	r1, r1, r0
100606c6:	b2d8      	uxtb	r0, r3
100606c8:	2801      	cmp	r0, #1
100606ca:	910a      	str	r1, [sp, #40]	@ 0x28
100606cc:	d105      	bne.n	100606da <LL_sched_engine+0x2c6>
100606ce:	6808      	ldr	r0, [r1, #0]
100606d0:	1a30      	subs	r0, r6, r0
100606d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
100606d4:	6048      	str	r0, [r1, #4]
100606d6:	e000      	b.n	100606da <LL_sched_engine+0x2c6>
100606d8:	25ff      	movs	r5, #255	@ 0xff
100606da:	9c01      	ldr	r4, [sp, #4]
100606dc:	9f08      	ldr	r7, [sp, #32]
100606de:	f7f3 f821 	bl	10053724 <BLEPLAT_CNTR_ClearSemareq>
100606e2:	482a      	ldr	r0, [pc, #168]	@ (1006078c <__arm_cp.13_0>)
100606e4:	6800      	ldr	r0, [r0, #0]
100606e6:	2dff      	cmp	r5, #255	@ 0xff
100606e8:	d02f      	beq.n	1006074a <LL_sched_engine+0x336>
100606ea:	9711      	str	r7, [sp, #68]	@ 0x44
100606ec:	9412      	str	r4, [sp, #72]	@ 0x48
100606ee:	4604      	mov	r4, r0
100606f0:	2008      	movs	r0, #8
100606f2:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
100606f4:	74b8      	strb	r0, [r7, #18]
100606f6:	f7fe fa36 	bl	1005eb66 <llc_cte_timer_stop_ucfg_weak>
100606fa:	7365      	strb	r5, [r4, #13]
100606fc:	6a3a      	ldr	r2, [r7, #32]
100606fe:	68f8      	ldr	r0, [r7, #12]
10060700:	6879      	ldr	r1, [r7, #4]
10060702:	4790      	blx	r2
10060704:	683e      	ldr	r6, [r7, #0]
10060706:	940b      	str	r4, [sp, #44]	@ 0x2c
10060708:	6026      	str	r6, [r4, #0]
1006070a:	4628      	mov	r0, r5
1006070c:	f7f3 f820 	bl	10053750 <BLEPLAT_CNTR_GlobWriteSlot>
10060710:	f7f3 f817 	bl	10053742 <BLEPLAT_CNTR_GlobEnableBlue>
10060714:	9812      	ldr	r0, [sp, #72]	@ 0x48
10060716:	2800      	cmp	r0, #0
10060718:	d023      	beq.n	10060762 <LL_sched_engine+0x34e>
1006071a:	7cf8      	ldrb	r0, [r7, #19]
1006071c:	09c1      	lsrs	r1, r0, #7
1006071e:	2201      	movs	r2, #1
10060720:	4630      	mov	r0, r6
10060722:	f7f2 f889 	bl	10052838 <BLEPLAT_SetRadioTimerValue>
10060726:	2800      	cmp	r0, #0
10060728:	d01d      	beq.n	10060766 <LL_sched_engine+0x352>
1006072a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1006072c:	0040      	lsls	r0, r0, #1
1006072e:	9009      	str	r0, [sp, #36]	@ 0x24
10060730:	2810      	cmp	r0, #16
10060732:	9f11      	ldr	r7, [sp, #68]	@ 0x44
10060734:	d200      	bcs.n	10060738 <LL_sched_engine+0x324>
10060736:	e676      	b.n	10060426 <LL_sched_engine+0x12>
10060738:	f7fe fa14 	bl	1005eb64 <llc_cte_timer_error_ucfg_weak>
1006073c:	20a1      	movs	r0, #161	@ 0xa1
1006073e:	2106      	movs	r1, #6
10060740:	2200      	movs	r2, #0
10060742:	4613      	mov	r3, r2
10060744:	f003 fc12 	bl	10063f6c <aci_hal_fw_error_event_push_noinline>
10060748:	e009      	b.n	1006075e <LL_sched_engine+0x34a>
1006074a:	4604      	mov	r4, r0
1006074c:	f7f2 f88e 	bl	1005286c <BLEPLAT_ClearRadioTimerValue>
10060750:	f7f2 fff0 	bl	10053734 <BLEPLAT_CNTR_GlobDisableBlue>
10060754:	2000      	movs	r0, #0
10060756:	73e0      	strb	r0, [r4, #15]
10060758:	20ff      	movs	r0, #255	@ 0xff
1006075a:	0200      	lsls	r0, r0, #8
1006075c:	81a0      	strh	r0, [r4, #12]
1006075e:	9904      	ldr	r1, [sp, #16]
10060760:	e00f      	b.n	10060782 <LL_sched_engine+0x36e>
10060762:	f7f2 f89b 	bl	1005289c <BLEPLAT_SetRadioCloseTimeout>
10060766:	9b04      	ldr	r3, [sp, #16]
10060768:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1006076a:	730b      	strb	r3, [r1, #12]
1006076c:	7cf8      	ldrb	r0, [r7, #19]
1006076e:	73c8      	strb	r0, [r1, #15]
10060770:	9a05      	ldr	r2, [sp, #20]
10060772:	60d6      	str	r6, [r2, #12]
10060774:	7c11      	ldrb	r1, [r2, #16]
10060776:	9c02      	ldr	r4, [sp, #8]
10060778:	4021      	ands	r1, r4
1006077a:	0100      	lsls	r0, r0, #4
1006077c:	1808      	adds	r0, r1, r0
1006077e:	4619      	mov	r1, r3
10060780:	7410      	strb	r0, [r2, #16]
10060782:	4803      	ldr	r0, [pc, #12]	@ (10060790 <__arm_cp.13_1>)
10060784:	6800      	ldr	r0, [r0, #0]
10060786:	7201      	strb	r1, [r0, #8]
10060788:	b033      	add	sp, #204	@ 0xcc
1006078a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006078c <__arm_cp.13_0>:
1006078c:	20002474 	.word	0x20002474

10060790 <__arm_cp.13_1>:
10060790:	20002470 	.word	0x20002470

10060794 <__arm_cp.13_2>:
10060794:	20002478 	.word	0x20002478

10060798 <__arm_cp.13_3>:
10060798:	fffffed4 	.word	0xfffffed4

1006079c <__arm_cp.13_4>:
1006079c:	20002484 	.word	0x20002484

100607a0 <LL_sched_set_priority>:
100607a0:	b510      	push	{r4, lr}
100607a2:	231f      	movs	r3, #31
100607a4:	401a      	ands	r2, r3
100607a6:	242c      	movs	r4, #44	@ 0x2c
100607a8:	4344      	muls	r4, r0
100607aa:	4803      	ldr	r0, [pc, #12]	@ (100607b8 <__arm_cp.14_0>)
100607ac:	6800      	ldr	r0, [r0, #0]
100607ae:	1900      	adds	r0, r0, r4
100607b0:	7582      	strb	r2, [r0, #22]
100607b2:	4019      	ands	r1, r3
100607b4:	7541      	strb	r1, [r0, #21]
100607b6:	bd10      	pop	{r4, pc}

100607b8 <__arm_cp.14_0>:
100607b8:	20002478 	.word	0x20002478

100607bc <LL_sched_set_params>:
100607bc:	b5b0      	push	{r4, r5, r7, lr}
100607be:	242c      	movs	r4, #44	@ 0x2c
100607c0:	4344      	muls	r4, r0
100607c2:	480b      	ldr	r0, [pc, #44]	@ (100607f0 <__arm_cp.15_0>)
100607c4:	6800      	ldr	r0, [r0, #0]
100607c6:	9d05      	ldr	r5, [sp, #20]
100607c8:	5105      	str	r5, [r0, r4]
100607ca:	1900      	adds	r0, r0, r4
100607cc:	9c04      	ldr	r4, [sp, #16]
100607ce:	6084      	str	r4, [r0, #8]
100607d0:	60c1      	str	r1, [r0, #12]
100607d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
100607d4:	6281      	str	r1, [r0, #40]	@ 0x28
100607d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
100607d8:	6241      	str	r1, [r0, #36]	@ 0x24
100607da:	9909      	ldr	r1, [sp, #36]	@ 0x24
100607dc:	6201      	str	r1, [r0, #32]
100607de:	9908      	ldr	r1, [sp, #32]
100607e0:	61c1      	str	r1, [r0, #28]
100607e2:	9907      	ldr	r1, [sp, #28]
100607e4:	7581      	strb	r1, [r0, #22]
100607e6:	9906      	ldr	r1, [sp, #24]
100607e8:	7541      	strb	r1, [r0, #21]
100607ea:	74c2      	strb	r2, [r0, #19]
100607ec:	6043      	str	r3, [r0, #4]
100607ee:	bdb0      	pop	{r4, r5, r7, pc}

100607f0 <__arm_cp.15_0>:
100607f0:	20002478 	.word	0x20002478

100607f4 <LL_sched_delete_taskslot>:
100607f4:	212c      	movs	r1, #44	@ 0x2c
100607f6:	4341      	muls	r1, r0
100607f8:	4802      	ldr	r0, [pc, #8]	@ (10060804 <__arm_cp.19_0>)
100607fa:	6800      	ldr	r0, [r0, #0]
100607fc:	1840      	adds	r0, r0, r1
100607fe:	2110      	movs	r1, #16
10060800:	8241      	strh	r1, [r0, #18]
10060802:	4770      	bx	lr

10060804 <__arm_cp.19_0>:
10060804:	20002478 	.word	0x20002478

10060808 <LL_sched_set_per_state>:
10060808:	222c      	movs	r2, #44	@ 0x2c
1006080a:	4342      	muls	r2, r0
1006080c:	4802      	ldr	r0, [pc, #8]	@ (10060818 <__arm_cp.21_0>)
1006080e:	6800      	ldr	r0, [r0, #0]
10060810:	1880      	adds	r0, r0, r2
10060812:	7481      	strb	r1, [r0, #18]
10060814:	4770      	bx	lr
10060816:	46c0      	nop			@ (mov r8, r8)

10060818 <__arm_cp.21_0>:
10060818:	20002478 	.word	0x20002478

1006081c <LL_sched_reserve_taskslot>:
1006081c:	b510      	push	{r4, lr}
1006081e:	480e      	ldr	r0, [pc, #56]	@ (10060858 <__arm_cp.22_0>)
10060820:	6801      	ldr	r1, [r0, #0]
10060822:	3128      	adds	r1, #40	@ 0x28
10060824:	2000      	movs	r0, #0
10060826:	4a0d      	ldr	r2, [pc, #52]	@ (1006085c <__arm_cp.22_1>)
10060828:	7ad3      	ldrb	r3, [r2, #11]
1006082a:	4298      	cmp	r0, r3
1006082c:	d20b      	bcs.n	10060846 <LL_sched_reserve_taskslot+0x2a>
1006082e:	f3ef 8310 	mrs	r3, PRIMASK
10060832:	b672      	cpsid	i
10060834:	460b      	mov	r3, r1
10060836:	3b16      	subs	r3, #22
10060838:	781c      	ldrb	r4, [r3, #0]
1006083a:	2c00      	cmp	r4, #0
1006083c:	d005      	beq.n	1006084a <LL_sched_reserve_taskslot+0x2e>
1006083e:	b662      	cpsie	i
10060840:	312c      	adds	r1, #44	@ 0x2c
10060842:	1c40      	adds	r0, r0, #1
10060844:	e7f0      	b.n	10060828 <LL_sched_reserve_taskslot+0xc>
10060846:	20ff      	movs	r0, #255	@ 0xff
10060848:	e004      	b.n	10060854 <LL_sched_reserve_taskslot+0x38>
1006084a:	2200      	movs	r2, #0
1006084c:	600a      	str	r2, [r1, #0]
1006084e:	2101      	movs	r1, #1
10060850:	7019      	strb	r1, [r3, #0]
10060852:	b662      	cpsie	i
10060854:	b2c0      	uxtb	r0, r0
10060856:	bd10      	pop	{r4, pc}

10060858 <__arm_cp.22_0>:
10060858:	20002478 	.word	0x20002478

1006085c <__arm_cp.22_1>:
1006085c:	20002484 	.word	0x20002484

10060860 <LL_sched_release_taskslot>:
10060860:	28ff      	cmp	r0, #255	@ 0xff
10060862:	d006      	beq.n	10060872 <LL_sched_release_taskslot+0x12>
10060864:	212c      	movs	r1, #44	@ 0x2c
10060866:	4341      	muls	r1, r0
10060868:	4802      	ldr	r0, [pc, #8]	@ (10060874 <__arm_cp.23_0>)
1006086a:	6800      	ldr	r0, [r0, #0]
1006086c:	1840      	adds	r0, r0, r1
1006086e:	2100      	movs	r1, #0
10060870:	8241      	strh	r1, [r0, #18]
10060872:	4770      	bx	lr

10060874 <__arm_cp.23_0>:
10060874:	20002478 	.word	0x20002478

10060878 <LL_sched_check_and_call_sched>:
10060878:	b510      	push	{r4, lr}
1006087a:	460c      	mov	r4, r1
1006087c:	f3ef 8110 	mrs	r1, PRIMASK
10060880:	b672      	cpsid	i
10060882:	f7ff fda5 	bl	100603d0 <LL_sched_is_scheduler_call_pending>
10060886:	b662      	cpsie	i
10060888:	2800      	cmp	r0, #0
1006088a:	d000      	beq.n	1006088e <LL_sched_check_and_call_sched+0x16>
1006088c:	bd10      	pop	{r4, pc}
1006088e:	4620      	mov	r0, r4
10060890:	f7ff fdc0 	bl	10060414 <LL_sched_engine>
10060894:	bd10      	pop	{r4, pc}
	...

10060898 <LL_sched_check_and_wait_sched>:
10060898:	b5b0      	push	{r4, r5, r7, lr}
1006089a:	4604      	mov	r4, r0
1006089c:	4813      	ldr	r0, [pc, #76]	@ (100608ec <__arm_cp.25_0>)
1006089e:	7ac0      	ldrb	r0, [r0, #11]
100608a0:	42a0      	cmp	r0, r4
100608a2:	d922      	bls.n	100608ea <LL_sched_check_and_wait_sched+0x52>
100608a4:	f3ef 8010 	mrs	r0, PRIMASK
100608a8:	b672      	cpsid	i
100608aa:	25ff      	movs	r5, #255	@ 0xff
100608ac:	35ec      	adds	r5, #236	@ 0xec
100608ae:	f7f1 ff9c 	bl	100527ea <BLEPLAT_GetCurrentSysTime>
100608b2:	1940      	adds	r0, r0, r5
100608b4:	f7ff fd8c 	bl	100603d0 <LL_sched_is_scheduler_call_pending>
100608b8:	4a0d      	ldr	r2, [pc, #52]	@ (100608f0 <__arm_cp.25_1>)
100608ba:	6813      	ldr	r3, [r2, #0]
100608bc:	2100      	movs	r1, #0
100608be:	7219      	strb	r1, [r3, #8]
100608c0:	b662      	cpsie	i
100608c2:	2801      	cmp	r0, #1
100608c4:	d10c      	bne.n	100608e0 <LL_sched_check_and_wait_sched+0x48>
100608c6:	6810      	ldr	r0, [r2, #0]
100608c8:	6041      	str	r1, [r0, #4]
100608ca:	4a0a      	ldr	r2, [pc, #40]	@ (100608f4 <__arm_cp.25_2>)
100608cc:	6843      	ldr	r3, [r0, #4]
100608ce:	4293      	cmp	r3, r2
100608d0:	d80b      	bhi.n	100608ea <LL_sched_check_and_wait_sched+0x52>
100608d2:	7a03      	ldrb	r3, [r0, #8]
100608d4:	2b00      	cmp	r3, #0
100608d6:	d107      	bne.n	100608e8 <LL_sched_check_and_wait_sched+0x50>
100608d8:	6843      	ldr	r3, [r0, #4]
100608da:	1c5b      	adds	r3, r3, #1
100608dc:	6043      	str	r3, [r0, #4]
100608de:	e7f5      	b.n	100608cc <LL_sched_check_and_wait_sched+0x34>
100608e0:	4620      	mov	r0, r4
100608e2:	f7ff fd97 	bl	10060414 <LL_sched_engine>
100608e6:	bdb0      	pop	{r4, r5, r7, pc}
100608e8:	7201      	strb	r1, [r0, #8]
100608ea:	bdb0      	pop	{r4, r5, r7, pc}

100608ec <__arm_cp.25_0>:
100608ec:	20002484 	.word	0x20002484

100608f0 <__arm_cp.25_1>:
100608f0:	20002470 	.word	0x20002470

100608f4 <__arm_cp.25_2>:
100608f4:	0004e1ff 	.word	0x0004e1ff

100608f8 <MBM_init>:
100608f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100608fa:	4c18      	ldr	r4, [pc, #96]	@ (1006095c <__arm_cp.1_0>)
100608fc:	2501      	movs	r5, #1
100608fe:	2204      	movs	r2, #4
10060900:	4e17      	ldr	r6, [pc, #92]	@ (10060960 <__arm_cp.1_1>)
10060902:	4620      	mov	r0, r4
10060904:	4629      	mov	r1, r5
10060906:	47b0      	blx	r6
10060908:	4f16      	ldr	r7, [pc, #88]	@ (10060964 <__arm_cp.1_2>)
1006090a:	6038      	str	r0, [r7, #0]
1006090c:	2210      	movs	r2, #16
1006090e:	4620      	mov	r0, r4
10060910:	4629      	mov	r1, r5
10060912:	47b0      	blx	r6
10060914:	6839      	ldr	r1, [r7, #0]
10060916:	6008      	str	r0, [r1, #0]
10060918:	220c      	movs	r2, #12
1006091a:	4620      	mov	r0, r4
1006091c:	4629      	mov	r1, r5
1006091e:	47b0      	blx	r6
10060920:	6839      	ldr	r1, [r7, #0]
10060922:	6809      	ldr	r1, [r1, #0]
10060924:	60c8      	str	r0, [r1, #12]
10060926:	4d10      	ldr	r5, [pc, #64]	@ (10060968 <__arm_cp.1_3>)
10060928:	89e9      	ldrh	r1, [r5, #14]
1006092a:	2224      	movs	r2, #36	@ 0x24
1006092c:	4620      	mov	r0, r4
1006092e:	47b0      	blx	r6
10060930:	4601      	mov	r1, r0
10060932:	6838      	ldr	r0, [r7, #0]
10060934:	6802      	ldr	r2, [r0, #0]
10060936:	68d0      	ldr	r0, [r2, #12]
10060938:	6081      	str	r1, [r0, #8]
1006093a:	2100      	movs	r1, #0
1006093c:	2908      	cmp	r1, #8
1006093e:	d003      	beq.n	10060948 <MBM_init+0x50>
10060940:	2300      	movs	r3, #0
10060942:	5253      	strh	r3, [r2, r1]
10060944:	1c89      	adds	r1, r1, #2
10060946:	e7f9      	b.n	1006093c <MBM_init+0x44>
10060948:	89e9      	ldrh	r1, [r5, #14]
1006094a:	80d1      	strh	r1, [r2, #6]
1006094c:	2100      	movs	r1, #0
1006094e:	8111      	strh	r1, [r2, #8]
10060950:	89e9      	ldrh	r1, [r5, #14]
10060952:	8041      	strh	r1, [r0, #2]
10060954:	f000 f948 	bl	10060be8 <Mem_Buff_init>
10060958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006095a:	46c0      	nop			@ (mov r8, r8)

1006095c <__arm_cp.1_0>:
1006095c:	20002480 	.word	0x20002480

10060960 <__arm_cp.1_1>:
10060960:	10060bb1 	.word	0x10060bb1

10060964 <__arm_cp.1_2>:
10060964:	2000247c 	.word	0x2000247c

10060968 <__arm_cp.1_3>:
10060968:	20002484 	.word	0x20002484

1006096c <MBM_get>:
1006096c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1006096e:	4a1a      	ldr	r2, [pc, #104]	@ (100609d8 <__arm_cp.2_0>)
10060970:	6812      	ldr	r2, [r2, #0]
10060972:	6813      	ldr	r3, [r2, #0]
10060974:	f3ef 8210 	mrs	r2, PRIMASK
10060978:	b672      	cpsid	i
1006097a:	2206      	movs	r2, #6
1006097c:	5e9c      	ldrsh	r4, [r3, r2]
1006097e:	17e2      	asrs	r2, r4, #31
10060980:	4627      	mov	r7, r4
10060982:	4397      	bics	r7, r2
10060984:	0040      	lsls	r0, r0, #1
10060986:	9000      	str	r0, [sp, #0]
10060988:	5e18      	ldrsh	r0, [r3, r0]
1006098a:	4a14      	ldr	r2, [pc, #80]	@ (100609dc <__arm_cp.2_1>)
1006098c:	9102      	str	r1, [sp, #8]
1006098e:	1889      	adds	r1, r1, r2
10060990:	0949      	lsrs	r1, r1, #5
10060992:	1c4d      	adds	r5, r1, #1
10060994:	2801      	cmp	r0, #1
10060996:	9501      	str	r5, [sp, #4]
10060998:	db05      	blt.n	100609a6 <MBM_get+0x3a>
1006099a:	1b42      	subs	r2, r0, r5
1006099c:	4256      	negs	r6, r2
1006099e:	b212      	sxth	r2, r2
100609a0:	13d5      	asrs	r5, r2, #15
100609a2:	4035      	ands	r5, r6
100609a4:	183f      	adds	r7, r7, r0
100609a6:	68d8      	ldr	r0, [r3, #12]
100609a8:	2200      	movs	r2, #0
100609aa:	5e86      	ldrsh	r6, [r0, r2]
100609ac:	b209      	sxth	r1, r1
100609ae:	428e      	cmp	r6, r1
100609b0:	dd0e      	ble.n	100609d0 <MBM_get+0x64>
100609b2:	b23e      	sxth	r6, r7
100609b4:	428e      	cmp	r6, r1
100609b6:	dd0b      	ble.n	100609d0 <MBM_get+0x64>
100609b8:	9900      	ldr	r1, [sp, #0]
100609ba:	1859      	adds	r1, r3, r1
100609bc:	1b62      	subs	r2, r4, r5
100609be:	80da      	strh	r2, [r3, #6]
100609c0:	880a      	ldrh	r2, [r1, #0]
100609c2:	9b01      	ldr	r3, [sp, #4]
100609c4:	1ad2      	subs	r2, r2, r3
100609c6:	800a      	strh	r2, [r1, #0]
100609c8:	9902      	ldr	r1, [sp, #8]
100609ca:	f000 f943 	bl	10060c54 <Mem_Buff_get>
100609ce:	4602      	mov	r2, r0
100609d0:	b662      	cpsie	i
100609d2:	4610      	mov	r0, r2
100609d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100609d6:	46c0      	nop			@ (mov r8, r8)

100609d8 <__arm_cp.2_0>:
100609d8:	2000247c 	.word	0x2000247c

100609dc <__arm_cp.2_1>:
100609dc:	001fffff 	.word	0x001fffff

100609e0 <MBM_release>:
100609e0:	b5b0      	push	{r4, r5, r7, lr}
100609e2:	460d      	mov	r5, r1
100609e4:	4604      	mov	r4, r0
100609e6:	f000 f95b 	bl	10060ca0 <Mem_Buff_get_chain_count>
100609ea:	4601      	mov	r1, r0
100609ec:	4628      	mov	r0, r5
100609ee:	f000 f80b 	bl	10060a08 <MBM_release_balance>
100609f2:	4804      	ldr	r0, [pc, #16]	@ (10060a04 <__arm_cp.3_0>)
100609f4:	6800      	ldr	r0, [r0, #0]
100609f6:	6800      	ldr	r0, [r0, #0]
100609f8:	68c0      	ldr	r0, [r0, #12]
100609fa:	4621      	mov	r1, r4
100609fc:	f000 f90f 	bl	10060c1e <Mem_Buff_release>
10060a00:	bdb0      	pop	{r4, r5, r7, pc}
10060a02:	46c0      	nop			@ (mov r8, r8)

10060a04 <__arm_cp.3_0>:
10060a04:	2000247c 	.word	0x2000247c

10060a08 <MBM_release_balance>:
10060a08:	b510      	push	{r4, lr}
10060a0a:	4a0b      	ldr	r2, [pc, #44]	@ (10060a38 <__arm_cp.4_0>)
10060a0c:	6812      	ldr	r2, [r2, #0]
10060a0e:	6812      	ldr	r2, [r2, #0]
10060a10:	f3ef 8310 	mrs	r3, PRIMASK
10060a14:	b672      	cpsid	i
10060a16:	0043      	lsls	r3, r0, #1
10060a18:	5ed0      	ldrsh	r0, [r2, r3]
10060a1a:	1844      	adds	r4, r0, r1
10060a1c:	52d4      	strh	r4, [r2, r3]
10060a1e:	b20b      	sxth	r3, r1
10060a20:	18c3      	adds	r3, r0, r3
10060a22:	2b01      	cmp	r3, #1
10060a24:	db02      	blt.n	10060a2c <MBM_release_balance+0x24>
10060a26:	4243      	negs	r3, r0
10060a28:	0bc1      	lsrs	r1, r0, #15
10060a2a:	4019      	ands	r1, r3
10060a2c:	88d0      	ldrh	r0, [r2, #6]
10060a2e:	1808      	adds	r0, r1, r0
10060a30:	80d0      	strh	r0, [r2, #6]
10060a32:	b662      	cpsie	i
10060a34:	bd10      	pop	{r4, pc}
10060a36:	46c0      	nop			@ (mov r8, r8)

10060a38 <__arm_cp.4_0>:
10060a38:	2000247c 	.word	0x2000247c

10060a3c <MBM_get_available_mem_buffers>:
10060a3c:	4908      	ldr	r1, [pc, #32]	@ (10060a60 <__arm_cp.5_0>)
10060a3e:	6809      	ldr	r1, [r1, #0]
10060a40:	680a      	ldr	r2, [r1, #0]
10060a42:	f3ef 8110 	mrs	r1, PRIMASK
10060a46:	b672      	cpsid	i
10060a48:	2106      	movs	r1, #6
10060a4a:	5e51      	ldrsh	r1, [r2, r1]
10060a4c:	17cb      	asrs	r3, r1, #31
10060a4e:	4399      	bics	r1, r3
10060a50:	0040      	lsls	r0, r0, #1
10060a52:	5e10      	ldrsh	r0, [r2, r0]
10060a54:	2800      	cmp	r0, #0
10060a56:	dd00      	ble.n	10060a5a <MBM_get_available_mem_buffers+0x1e>
10060a58:	1809      	adds	r1, r1, r0
10060a5a:	b288      	uxth	r0, r1
10060a5c:	b662      	cpsie	i
10060a5e:	4770      	bx	lr

10060a60 <__arm_cp.5_0>:
10060a60:	2000247c 	.word	0x2000247c

10060a64 <MBM_resize>:
10060a64:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10060a66:	2481      	movs	r4, #129	@ 0x81
10060a68:	2800      	cmp	r0, #0
10060a6a:	d032      	beq.n	10060ad2 <MBM_resize+0x6e>
10060a6c:	4606      	mov	r6, r0
10060a6e:	9102      	str	r1, [sp, #8]
10060a70:	9401      	str	r4, [sp, #4]
10060a72:	4819      	ldr	r0, [pc, #100]	@ (10060ad8 <__arm_cp.6_0>)
10060a74:	6800      	ldr	r0, [r0, #0]
10060a76:	6800      	ldr	r0, [r0, #0]
10060a78:	9000      	str	r0, [sp, #0]
10060a7a:	1e50      	subs	r0, r2, #1
10060a7c:	211f      	movs	r1, #31
10060a7e:	4301      	orrs	r1, r0
10060a80:	1c4c      	adds	r4, r1, #1
10060a82:	b2a7      	uxth	r7, r4
10060a84:	4630      	mov	r0, r6
10060a86:	f000 f913 	bl	10060cb0 <Mem_Buff_get_chain_size>
10060a8a:	4605      	mov	r5, r0
10060a8c:	4287      	cmp	r7, r0
10060a8e:	d90c      	bls.n	10060aaa <MBM_resize+0x46>
10060a90:	1b60      	subs	r0, r4, r5
10060a92:	b281      	uxth	r1, r0
10060a94:	9802      	ldr	r0, [sp, #8]
10060a96:	f7ff ff69 	bl	1006096c <MBM_get>
10060a9a:	2800      	cmp	r0, #0
10060a9c:	9c01      	ldr	r4, [sp, #4]
10060a9e:	d018      	beq.n	10060ad2 <MBM_resize+0x6e>
10060aa0:	4601      	mov	r1, r0
10060aa2:	4630      	mov	r0, r6
10060aa4:	f000 fa29 	bl	10060efa <Mem_Buff_append>
10060aa8:	e012      	b.n	10060ad0 <MBM_resize+0x6c>
10060aaa:	42af      	cmp	r7, r5
10060aac:	d210      	bcs.n	10060ad0 <MBM_resize+0x6c>
10060aae:	9800      	ldr	r0, [sp, #0]
10060ab0:	68c0      	ldr	r0, [r0, #12]
10060ab2:	4631      	mov	r1, r6
10060ab4:	463a      	mov	r2, r7
10060ab6:	f000 f907 	bl	10060cc8 <Mem_Buff_resize>
10060aba:	4604      	mov	r4, r0
10060abc:	1e78      	subs	r0, r7, #1
10060abe:	0940      	lsrs	r0, r0, #5
10060ac0:	1e69      	subs	r1, r5, #1
10060ac2:	0949      	lsrs	r1, r1, #5
10060ac4:	1a08      	subs	r0, r1, r0
10060ac6:	b281      	uxth	r1, r0
10060ac8:	9802      	ldr	r0, [sp, #8]
10060aca:	f7ff ff9d 	bl	10060a08 <MBM_release_balance>
10060ace:	e000      	b.n	10060ad2 <MBM_resize+0x6e>
10060ad0:	2400      	movs	r4, #0
10060ad2:	4620      	mov	r0, r4
10060ad4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10060ad6:	46c0      	nop			@ (mov r8, r8)

10060ad8 <__arm_cp.6_0>:
10060ad8:	2000247c 	.word	0x2000247c

10060adc <MBM_reserve>:
10060adc:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10060ade:	460c      	mov	r4, r1
10060ae0:	4601      	mov	r1, r0
10060ae2:	481c      	ldr	r0, [pc, #112]	@ (10060b54 <__arm_cp.7_0>)
10060ae4:	6800      	ldr	r0, [r0, #0]
10060ae6:	6805      	ldr	r5, [r0, #0]
10060ae8:	8928      	ldrh	r0, [r5, #8]
10060aea:	68ea      	ldr	r2, [r5, #12]
10060aec:	8852      	ldrh	r2, [r2, #2]
10060aee:	1a13      	subs	r3, r2, r0
10060af0:	42a3      	cmp	r3, r4
10060af2:	da26      	bge.n	10060b42 <MBM_reserve+0x66>
10060af4:	1aa1      	subs	r1, r4, r2
10060af6:	1808      	adds	r0, r1, r0
10060af8:	a901      	add	r1, sp, #4
10060afa:	8008      	strh	r0, [r1, #0]
10060afc:	4816      	ldr	r0, [pc, #88]	@ (10060b58 <__arm_cp.7_1>)
10060afe:	6800      	ldr	r0, [r0, #0]
10060b00:	6980      	ldr	r0, [r0, #24]
10060b02:	2142      	movs	r1, #66	@ 0x42
10060b04:	2240      	movs	r2, #64	@ 0x40
10060b06:	2303      	movs	r3, #3
10060b08:	f7f4 faf0 	bl	100550ec <aci_event_fifo_push_header>
10060b0c:	2800      	cmp	r0, #0
10060b0e:	d017      	beq.n	10060b40 <MBM_reserve+0x64>
10060b10:	4604      	mov	r4, r0
10060b12:	2202      	movs	r2, #2
10060b14:	72c2      	strb	r2, [r0, #11]
10060b16:	2009      	movs	r0, #9
10060b18:	72a0      	strb	r0, [r4, #10]
10060b1a:	4620      	mov	r0, r4
10060b1c:	300c      	adds	r0, #12
10060b1e:	a901      	add	r1, sp, #4
10060b20:	f7f1 fd98 	bl	10052654 <BLEPLAT_MemCpy>
10060b24:	2000      	movs	r0, #0
10060b26:	7260      	strb	r0, [r4, #9]
10060b28:	2106      	movs	r1, #6
10060b2a:	7221      	strb	r1, [r4, #8]
10060b2c:	71e0      	strb	r0, [r4, #7]
10060b2e:	71a1      	strb	r1, [r4, #6]
10060b30:	20ff      	movs	r0, #255	@ 0xff
10060b32:	7160      	strb	r0, [r4, #5]
10060b34:	2082      	movs	r0, #130	@ 0x82
10060b36:	7120      	strb	r0, [r4, #4]
10060b38:	2042      	movs	r0, #66	@ 0x42
10060b3a:	4621      	mov	r1, r4
10060b3c:	f7f4 fb73 	bl	10055226 <aci_event_fifo_push>
10060b40:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10060b42:	2003      	movs	r0, #3
10060b44:	4622      	mov	r2, r4
10060b46:	f000 f809 	bl	10060b5c <MBM_move_class>
10060b4a:	8928      	ldrh	r0, [r5, #8]
10060b4c:	1900      	adds	r0, r0, r4
10060b4e:	8128      	strh	r0, [r5, #8]
10060b50:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10060b52:	46c0      	nop			@ (mov r8, r8)

10060b54 <__arm_cp.7_0>:
10060b54:	2000247c 	.word	0x2000247c

10060b58 <__arm_cp.7_1>:
10060b58:	20002420 	.word	0x20002420

10060b5c <MBM_move_class>:
10060b5c:	b510      	push	{r4, lr}
10060b5e:	4b08      	ldr	r3, [pc, #32]	@ (10060b80 <__arm_cp.8_0>)
10060b60:	681b      	ldr	r3, [r3, #0]
10060b62:	681b      	ldr	r3, [r3, #0]
10060b64:	f3ef 8410 	mrs	r4, PRIMASK
10060b68:	b672      	cpsid	i
10060b6a:	0040      	lsls	r0, r0, #1
10060b6c:	5a1c      	ldrh	r4, [r3, r0]
10060b6e:	1aa4      	subs	r4, r4, r2
10060b70:	521c      	strh	r4, [r3, r0]
10060b72:	0048      	lsls	r0, r1, #1
10060b74:	5a19      	ldrh	r1, [r3, r0]
10060b76:	1889      	adds	r1, r1, r2
10060b78:	5219      	strh	r1, [r3, r0]
10060b7a:	b662      	cpsie	i
10060b7c:	bd10      	pop	{r4, pc}
10060b7e:	46c0      	nop			@ (mov r8, r8)

10060b80 <__arm_cp.8_0>:
10060b80:	2000247c 	.word	0x2000247c

10060b84 <MBM_unreserve>:
10060b84:	b5b0      	push	{r4, r5, r7, lr}
10060b86:	460c      	mov	r4, r1
10060b88:	4905      	ldr	r1, [pc, #20]	@ (10060ba0 <__arm_cp.9_0>)
10060b8a:	6809      	ldr	r1, [r1, #0]
10060b8c:	680d      	ldr	r5, [r1, #0]
10060b8e:	2103      	movs	r1, #3
10060b90:	4622      	mov	r2, r4
10060b92:	f7ff ffe3 	bl	10060b5c <MBM_move_class>
10060b96:	8928      	ldrh	r0, [r5, #8]
10060b98:	1b00      	subs	r0, r0, r4
10060b9a:	8128      	strh	r0, [r5, #8]
10060b9c:	bdb0      	pop	{r4, r5, r7, pc}
10060b9e:	46c0      	nop			@ (mov r8, r8)

10060ba0 <__arm_cp.9_0>:
10060ba0:	2000247c 	.word	0x2000247c

10060ba4 <csmem_init>:
10060ba4:	4801      	ldr	r0, [pc, #4]	@ (10060bac <__arm_cp.0_0>)
10060ba6:	6841      	ldr	r1, [r0, #4]
10060ba8:	6001      	str	r1, [r0, #0]
10060baa:	4770      	bx	lr

10060bac <__arm_cp.0_0>:
10060bac:	20002480 	.word	0x20002480

10060bb0 <csmem_mem_assign>:
10060bb0:	b570      	push	{r4, r5, r6, lr}
10060bb2:	4614      	mov	r4, r2
10060bb4:	4605      	mov	r5, r0
10060bb6:	434c      	muls	r4, r1
10060bb8:	6800      	ldr	r0, [r0, #0]
10060bba:	1e40      	subs	r0, r0, #1
10060bbc:	2103      	movs	r1, #3
10060bbe:	4301      	orrs	r1, r0
10060bc0:	1c4e      	adds	r6, r1, #1
10060bc2:	2100      	movs	r1, #0
10060bc4:	4630      	mov	r0, r6
10060bc6:	4622      	mov	r2, r4
10060bc8:	f7f1 fd54 	bl	10052674 <BLEPLAT_MemSet>
10060bcc:	1930      	adds	r0, r6, r4
10060bce:	6028      	str	r0, [r5, #0]
10060bd0:	4630      	mov	r0, r6
10060bd2:	bd70      	pop	{r4, r5, r6, pc}

10060bd4 <csmem_mem_0_assign>:
10060bd4:	b580      	push	{r7, lr}
10060bd6:	460a      	mov	r2, r1
10060bd8:	4601      	mov	r1, r0
10060bda:	4802      	ldr	r0, [pc, #8]	@ (10060be4 <__arm_cp.3_0>)
10060bdc:	f7ff ffe8 	bl	10060bb0 <csmem_mem_assign>
10060be0:	bd80      	pop	{r7, pc}
10060be2:	46c0      	nop			@ (mov r8, r8)

10060be4 <__arm_cp.3_0>:
10060be4:	20002480 	.word	0x20002480

10060be8 <Mem_Buff_init>:
10060be8:	b5f0      	push	{r4, r5, r6, r7, lr}
10060bea:	b081      	sub	sp, #4
10060bec:	4605      	mov	r5, r0
10060bee:	8840      	ldrh	r0, [r0, #2]
10060bf0:	2486      	movs	r4, #134	@ 0x86
10060bf2:	2800      	cmp	r0, #0
10060bf4:	d010      	beq.n	10060c18 <Mem_Buff_init+0x30>
10060bf6:	68ae      	ldr	r6, [r5, #8]
10060bf8:	2e00      	cmp	r6, #0
10060bfa:	d00d      	beq.n	10060c18 <Mem_Buff_init+0x30>
10060bfc:	2400      	movs	r4, #0
10060bfe:	606c      	str	r4, [r5, #4]
10060c00:	802c      	strh	r4, [r5, #0]
10060c02:	4627      	mov	r7, r4
10060c04:	6034      	str	r4, [r6, #0]
10060c06:	4628      	mov	r0, r5
10060c08:	4631      	mov	r1, r6
10060c0a:	f000 f808 	bl	10060c1e <Mem_Buff_release>
10060c0e:	3624      	adds	r6, #36	@ 0x24
10060c10:	1c7f      	adds	r7, r7, #1
10060c12:	8868      	ldrh	r0, [r5, #2]
10060c14:	4287      	cmp	r7, r0
10060c16:	d3f5      	bcc.n	10060c04 <Mem_Buff_init+0x1c>
10060c18:	4620      	mov	r0, r4
10060c1a:	b001      	add	sp, #4
10060c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060c1e <Mem_Buff_release>:
10060c1e:	b510      	push	{r4, lr}
10060c20:	2900      	cmp	r1, #0
10060c22:	d015      	beq.n	10060c50 <Mem_Buff_release+0x32>
10060c24:	2200      	movs	r2, #0
10060c26:	460c      	mov	r4, r1
10060c28:	4623      	mov	r3, r4
10060c2a:	1c52      	adds	r2, r2, #1
10060c2c:	6824      	ldr	r4, [r4, #0]
10060c2e:	2c00      	cmp	r4, #0
10060c30:	d1fa      	bne.n	10060c28 <Mem_Buff_release+0xa>
10060c32:	f3ef 8410 	mrs	r4, PRIMASK
10060c36:	b672      	cpsid	i
10060c38:	6844      	ldr	r4, [r0, #4]
10060c3a:	6041      	str	r1, [r0, #4]
10060c3c:	601c      	str	r4, [r3, #0]
10060c3e:	8801      	ldrh	r1, [r0, #0]
10060c40:	1889      	adds	r1, r1, r2
10060c42:	8001      	strh	r1, [r0, #0]
10060c44:	b662      	cpsie	i
10060c46:	2000      	movs	r0, #0
10060c48:	f001 fdc2 	bl	100627d0 <tsk_signal_resource_idx>
10060c4c:	f7f0 ff1b 	bl	10051a86 <BLE_STACK_ProcessRequest>
10060c50:	bd10      	pop	{r4, pc}
	...

10060c54 <Mem_Buff_get>:
10060c54:	b5f0      	push	{r4, r5, r6, r7, lr}
10060c56:	4a11      	ldr	r2, [pc, #68]	@ (10060c9c <__arm_cp.2_0>)
10060c58:	1889      	adds	r1, r1, r2
10060c5a:	0949      	lsrs	r1, r1, #5
10060c5c:	1c4a      	adds	r2, r1, #1
10060c5e:	b294      	uxth	r4, r2
10060c60:	f3ef 8110 	mrs	r1, PRIMASK
10060c64:	b672      	cpsid	i
10060c66:	2100      	movs	r1, #0
10060c68:	2c00      	cmp	r4, #0
10060c6a:	d013      	beq.n	10060c94 <Mem_Buff_get+0x40>
10060c6c:	8803      	ldrh	r3, [r0, #0]
10060c6e:	429c      	cmp	r4, r3
10060c70:	d810      	bhi.n	10060c94 <Mem_Buff_get+0x40>
10060c72:	1e64      	subs	r4, r4, #1
10060c74:	6841      	ldr	r1, [r0, #4]
10060c76:	460d      	mov	r5, r1
10060c78:	d006      	beq.n	10060c88 <Mem_Buff_get+0x34>
10060c7a:	2600      	movs	r6, #0
10060c7c:	460d      	mov	r5, r1
10060c7e:	682d      	ldr	r5, [r5, #0]
10060c80:	1c76      	adds	r6, r6, #1
10060c82:	b2b7      	uxth	r7, r6
10060c84:	42bc      	cmp	r4, r7
10060c86:	d8fa      	bhi.n	10060c7e <Mem_Buff_get+0x2a>
10060c88:	682c      	ldr	r4, [r5, #0]
10060c8a:	6044      	str	r4, [r0, #4]
10060c8c:	2400      	movs	r4, #0
10060c8e:	602c      	str	r4, [r5, #0]
10060c90:	1a9a      	subs	r2, r3, r2
10060c92:	8002      	strh	r2, [r0, #0]
10060c94:	b662      	cpsie	i
10060c96:	4608      	mov	r0, r1
10060c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
10060c9a:	46c0      	nop			@ (mov r8, r8)

10060c9c <__arm_cp.2_0>:
10060c9c:	001fffff 	.word	0x001fffff

10060ca0 <Mem_Buff_get_chain_count>:
10060ca0:	2100      	movs	r1, #0
10060ca2:	2800      	cmp	r0, #0
10060ca4:	d002      	beq.n	10060cac <Mem_Buff_get_chain_count+0xc>
10060ca6:	6800      	ldr	r0, [r0, #0]
10060ca8:	1c49      	adds	r1, r1, #1
10060caa:	e7fa      	b.n	10060ca2 <Mem_Buff_get_chain_count+0x2>
10060cac:	b288      	uxth	r0, r1
10060cae:	4770      	bx	lr

10060cb0 <Mem_Buff_get_chain_size>:
10060cb0:	2800      	cmp	r0, #0
10060cb2:	d006      	beq.n	10060cc2 <Mem_Buff_get_chain_size+0x12>
10060cb4:	2100      	movs	r1, #0
10060cb6:	6800      	ldr	r0, [r0, #0]
10060cb8:	1c49      	adds	r1, r1, #1
10060cba:	2800      	cmp	r0, #0
10060cbc:	d1fb      	bne.n	10060cb6 <Mem_Buff_get_chain_size+0x6>
10060cbe:	0148      	lsls	r0, r1, #5
10060cc0:	e000      	b.n	10060cc4 <Mem_Buff_get_chain_size+0x14>
10060cc2:	2000      	movs	r0, #0
10060cc4:	b280      	uxth	r0, r0
10060cc6:	4770      	bx	lr

10060cc8 <Mem_Buff_resize>:
10060cc8:	b570      	push	{r4, r5, r6, lr}
10060cca:	2400      	movs	r4, #0
10060ccc:	2900      	cmp	r1, #0
10060cce:	d00a      	beq.n	10060ce6 <Mem_Buff_resize+0x1e>
10060cd0:	2600      	movs	r6, #0
10060cd2:	460d      	mov	r5, r1
10060cd4:	6809      	ldr	r1, [r1, #0]
10060cd6:	4633      	mov	r3, r6
10060cd8:	3320      	adds	r3, #32
10060cda:	b29e      	uxth	r6, r3
10060cdc:	4296      	cmp	r6, r2
10060cde:	d20e      	bcs.n	10060cfe <Mem_Buff_resize+0x36>
10060ce0:	2900      	cmp	r1, #0
10060ce2:	d1f6      	bne.n	10060cd2 <Mem_Buff_resize+0xa>
10060ce4:	e001      	b.n	10060cea <Mem_Buff_resize+0x22>
10060ce6:	4623      	mov	r3, r4
10060ce8:	4625      	mov	r5, r4
10060cea:	1ad1      	subs	r1, r2, r3
10060cec:	b289      	uxth	r1, r1
10060cee:	f7ff ffb1 	bl	10060c54 <Mem_Buff_get>
10060cf2:	6028      	str	r0, [r5, #0]
10060cf4:	2800      	cmp	r0, #0
10060cf6:	d10a      	bne.n	10060d0e <Mem_Buff_resize+0x46>
10060cf8:	2079      	movs	r0, #121	@ 0x79
10060cfa:	43c4      	mvns	r4, r0
10060cfc:	e007      	b.n	10060d0e <Mem_Buff_resize+0x46>
10060cfe:	2900      	cmp	r1, #0
10060d00:	d004      	beq.n	10060d0c <Mem_Buff_resize+0x44>
10060d02:	f7ff ff8c 	bl	10060c1e <Mem_Buff_release>
10060d06:	2400      	movs	r4, #0
10060d08:	602c      	str	r4, [r5, #0]
10060d0a:	e000      	b.n	10060d0e <Mem_Buff_resize+0x46>
10060d0c:	2400      	movs	r4, #0
10060d0e:	b2e0      	uxtb	r0, r4
10060d10:	bd70      	pop	{r4, r5, r6, pc}

10060d12 <Mem_Buff_get_buff_off>:
10060d12:	2900      	cmp	r1, #0
10060d14:	d008      	beq.n	10060d28 <Mem_Buff_get_buff_off+0x16>
10060d16:	2800      	cmp	r0, #0
10060d18:	d009      	beq.n	10060d2e <Mem_Buff_get_buff_off+0x1c>
10060d1a:	b28b      	uxth	r3, r1
10060d1c:	2b20      	cmp	r3, #32
10060d1e:	d304      	bcc.n	10060d2a <Mem_Buff_get_buff_off+0x18>
10060d20:	6800      	ldr	r0, [r0, #0]
10060d22:	3920      	subs	r1, #32
10060d24:	040b      	lsls	r3, r1, #16
10060d26:	d1f6      	bne.n	10060d16 <Mem_Buff_get_buff_off+0x4>
10060d28:	2100      	movs	r1, #0
10060d2a:	8011      	strh	r1, [r2, #0]
10060d2c:	4770      	bx	lr
10060d2e:	2000      	movs	r0, #0
10060d30:	4770      	bx	lr

10060d32 <Mem_Buff_write>:
10060d32:	b5f0      	push	{r4, r5, r6, r7, lr}
10060d34:	b081      	sub	sp, #4
10060d36:	4606      	mov	r6, r0
10060d38:	0950      	lsrs	r0, r2, #5
10060d3a:	0604      	lsls	r4, r0, #24
10060d3c:	d004      	beq.n	10060d48 <Mem_Buff_write+0x16>
10060d3e:	2e00      	cmp	r6, #0
10060d40:	d02d      	beq.n	10060d9e <Mem_Buff_write+0x6c>
10060d42:	6836      	ldr	r6, [r6, #0]
10060d44:	1e40      	subs	r0, r0, #1
10060d46:	e7f8      	b.n	10060d3a <Mem_Buff_write+0x8>
10060d48:	461c      	mov	r4, r3
10060d4a:	1e5b      	subs	r3, r3, #1
10060d4c:	4620      	mov	r0, r4
10060d4e:	4198      	sbcs	r0, r3
10060d50:	2c00      	cmp	r4, #0
10060d52:	d01f      	beq.n	10060d94 <Mem_Buff_write+0x62>
10060d54:	2e00      	cmp	r6, #0
10060d56:	d01d      	beq.n	10060d94 <Mem_Buff_write+0x62>
10060d58:	201f      	movs	r0, #31
10060d5a:	4002      	ands	r2, r0
10060d5c:	2020      	movs	r0, #32
10060d5e:	1a85      	subs	r5, r0, r2
10060d60:	b2a8      	uxth	r0, r5
10060d62:	b2a3      	uxth	r3, r4
10060d64:	4298      	cmp	r0, r3
10060d66:	d300      	bcc.n	10060d6a <Mem_Buff_write+0x38>
10060d68:	4625      	mov	r5, r4
10060d6a:	9500      	str	r5, [sp, #0]
10060d6c:	b2af      	uxth	r7, r5
10060d6e:	18b0      	adds	r0, r6, r2
10060d70:	1d00      	adds	r0, r0, #4
10060d72:	463a      	mov	r2, r7
10060d74:	460d      	mov	r5, r1
10060d76:	f7f1 fc6d 	bl	10052654 <BLEPLAT_MemCpy>
10060d7a:	9800      	ldr	r0, [sp, #0]
10060d7c:	1a24      	subs	r4, r4, r0
10060d7e:	b2a1      	uxth	r1, r4
10060d80:	1e4a      	subs	r2, r1, #1
10060d82:	4608      	mov	r0, r1
10060d84:	4190      	sbcs	r0, r2
10060d86:	2900      	cmp	r1, #0
10060d88:	d004      	beq.n	10060d94 <Mem_Buff_write+0x62>
10060d8a:	19e9      	adds	r1, r5, r7
10060d8c:	6836      	ldr	r6, [r6, #0]
10060d8e:	2200      	movs	r2, #0
10060d90:	2e00      	cmp	r6, #0
10060d92:	d1e3      	bne.n	10060d5c <Mem_Buff_write+0x2a>
10060d94:	2800      	cmp	r0, #0
10060d96:	d003      	beq.n	10060da0 <Mem_Buff_write+0x6e>
10060d98:	207e      	movs	r0, #126	@ 0x7e
10060d9a:	43c0      	mvns	r0, r0
10060d9c:	e000      	b.n	10060da0 <Mem_Buff_write+0x6e>
10060d9e:	2081      	movs	r0, #129	@ 0x81
10060da0:	b2c0      	uxtb	r0, r0
10060da2:	b001      	add	sp, #4
10060da4:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060da6 <Mem_Buff_read>:
10060da6:	b5f0      	push	{r4, r5, r6, r7, lr}
10060da8:	b081      	sub	sp, #4
10060daa:	460d      	mov	r5, r1
10060dac:	4606      	mov	r6, r0
10060dae:	2a00      	cmp	r2, #0
10060db0:	d008      	beq.n	10060dc4 <Mem_Buff_read+0x1e>
10060db2:	2e00      	cmp	r6, #0
10060db4:	d02a      	beq.n	10060e0c <Mem_Buff_read+0x66>
10060db6:	b290      	uxth	r0, r2
10060db8:	2820      	cmp	r0, #32
10060dba:	d306      	bcc.n	10060dca <Mem_Buff_read+0x24>
10060dbc:	6836      	ldr	r6, [r6, #0]
10060dbe:	3a20      	subs	r2, #32
10060dc0:	0410      	lsls	r0, r2, #16
10060dc2:	d1f6      	bne.n	10060db2 <Mem_Buff_read+0xc>
10060dc4:	2e00      	cmp	r6, #0
10060dc6:	d021      	beq.n	10060e0c <Mem_Buff_read+0x66>
10060dc8:	2200      	movs	r2, #0
10060dca:	2b00      	cmp	r3, #0
10060dcc:	d020      	beq.n	10060e10 <Mem_Buff_read+0x6a>
10060dce:	2020      	movs	r0, #32
10060dd0:	1a84      	subs	r4, r0, r2
10060dd2:	b2a0      	uxth	r0, r4
10060dd4:	b299      	uxth	r1, r3
10060dd6:	4288      	cmp	r0, r1
10060dd8:	d300      	bcc.n	10060ddc <Mem_Buff_read+0x36>
10060dda:	461c      	mov	r4, r3
10060ddc:	b2a7      	uxth	r7, r4
10060dde:	b290      	uxth	r0, r2
10060de0:	1830      	adds	r0, r6, r0
10060de2:	1d01      	adds	r1, r0, #4
10060de4:	4628      	mov	r0, r5
10060de6:	463a      	mov	r2, r7
10060de8:	9300      	str	r3, [sp, #0]
10060dea:	f7f1 fc33 	bl	10052654 <BLEPLAT_MemCpy>
10060dee:	9b00      	ldr	r3, [sp, #0]
10060df0:	1b1b      	subs	r3, r3, r4
10060df2:	0418      	lsls	r0, r3, #16
10060df4:	d004      	beq.n	10060e00 <Mem_Buff_read+0x5a>
10060df6:	19ed      	adds	r5, r5, r7
10060df8:	6836      	ldr	r6, [r6, #0]
10060dfa:	2200      	movs	r2, #0
10060dfc:	2e00      	cmp	r6, #0
10060dfe:	d1e6      	bne.n	10060dce <Mem_Buff_read+0x28>
10060e00:	b298      	uxth	r0, r3
10060e02:	2800      	cmp	r0, #0
10060e04:	d005      	beq.n	10060e12 <Mem_Buff_read+0x6c>
10060e06:	207e      	movs	r0, #126	@ 0x7e
10060e08:	43c0      	mvns	r0, r0
10060e0a:	e002      	b.n	10060e12 <Mem_Buff_read+0x6c>
10060e0c:	2081      	movs	r0, #129	@ 0x81
10060e0e:	e000      	b.n	10060e12 <Mem_Buff_read+0x6c>
10060e10:	2000      	movs	r0, #0
10060e12:	b2c0      	uxtb	r0, r0
10060e14:	b001      	add	sp, #4
10060e16:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060e18 <Mem_Buff_cmp>:
10060e18:	b5f0      	push	{r4, r5, r6, r7, lr}
10060e1a:	b083      	sub	sp, #12
10060e1c:	9102      	str	r1, [sp, #8]
10060e1e:	4606      	mov	r6, r0
10060e20:	2a00      	cmp	r2, #0
10060e22:	d008      	beq.n	10060e36 <Mem_Buff_cmp+0x1e>
10060e24:	2e00      	cmp	r6, #0
10060e26:	d033      	beq.n	10060e90 <Mem_Buff_cmp+0x78>
10060e28:	b290      	uxth	r0, r2
10060e2a:	2820      	cmp	r0, #32
10060e2c:	d306      	bcc.n	10060e3c <Mem_Buff_cmp+0x24>
10060e2e:	6836      	ldr	r6, [r6, #0]
10060e30:	3a20      	subs	r2, #32
10060e32:	0410      	lsls	r0, r2, #16
10060e34:	d1f6      	bne.n	10060e24 <Mem_Buff_cmp+0xc>
10060e36:	2e00      	cmp	r6, #0
10060e38:	d02a      	beq.n	10060e90 <Mem_Buff_cmp+0x78>
10060e3a:	2200      	movs	r2, #0
10060e3c:	2b00      	cmp	r3, #0
10060e3e:	9301      	str	r3, [sp, #4]
10060e40:	d020      	beq.n	10060e84 <Mem_Buff_cmp+0x6c>
10060e42:	2700      	movs	r7, #0
10060e44:	461d      	mov	r5, r3
10060e46:	b290      	uxth	r0, r2
10060e48:	281f      	cmp	r0, #31
10060e4a:	d814      	bhi.n	10060e76 <Mem_Buff_cmp+0x5e>
10060e4c:	2120      	movs	r1, #32
10060e4e:	1a8c      	subs	r4, r1, r2
10060e50:	b2a1      	uxth	r1, r4
10060e52:	b2aa      	uxth	r2, r5
10060e54:	4291      	cmp	r1, r2
10060e56:	d300      	bcc.n	10060e5a <Mem_Buff_cmp+0x42>
10060e58:	462c      	mov	r4, r5
10060e5a:	b2a2      	uxth	r2, r4
10060e5c:	b2b9      	uxth	r1, r7
10060e5e:	9b02      	ldr	r3, [sp, #8]
10060e60:	1859      	adds	r1, r3, r1
10060e62:	1830      	adds	r0, r6, r0
10060e64:	1d00      	adds	r0, r0, #4
10060e66:	f7f1 fc15 	bl	10052694 <BLEPLAT_MemCmp>
10060e6a:	2800      	cmp	r0, #0
10060e6c:	d10f      	bne.n	10060e8e <Mem_Buff_cmp+0x76>
10060e6e:	1b2d      	subs	r5, r5, r4
10060e70:	19e7      	adds	r7, r4, r7
10060e72:	2200      	movs	r2, #0
10060e74:	e000      	b.n	10060e78 <Mem_Buff_cmp+0x60>
10060e76:	3a20      	subs	r2, #32
10060e78:	0428      	lsls	r0, r5, #16
10060e7a:	d004      	beq.n	10060e86 <Mem_Buff_cmp+0x6e>
10060e7c:	6836      	ldr	r6, [r6, #0]
10060e7e:	2e00      	cmp	r6, #0
10060e80:	d1e1      	bne.n	10060e46 <Mem_Buff_cmp+0x2e>
10060e82:	e000      	b.n	10060e86 <Mem_Buff_cmp+0x6e>
10060e84:	2700      	movs	r7, #0
10060e86:	b2b8      	uxth	r0, r7
10060e88:	9b01      	ldr	r3, [sp, #4]
10060e8a:	1a1b      	subs	r3, r3, r0
10060e8c:	e000      	b.n	10060e90 <Mem_Buff_cmp+0x78>
10060e8e:	4603      	mov	r3, r0
10060e90:	4618      	mov	r0, r3
10060e92:	b003      	add	sp, #12
10060e94:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060e96 <Mem_Buff_block_copy>:
10060e96:	b510      	push	{r4, lr}
10060e98:	1e52      	subs	r2, r2, #1
10060e9a:	231f      	movs	r3, #31
10060e9c:	4313      	orrs	r3, r2
10060e9e:	b29a      	uxth	r2, r3
10060ea0:	1c53      	adds	r3, r2, #1
10060ea2:	b29a      	uxth	r2, r3
10060ea4:	429a      	cmp	r2, r3
10060ea6:	d001      	beq.n	10060eac <Mem_Buff_block_copy+0x16>
10060ea8:	2200      	movs	r2, #0
10060eaa:	e00d      	b.n	10060ec8 <Mem_Buff_block_copy+0x32>
10060eac:	0953      	lsrs	r3, r2, #5
10060eae:	460a      	mov	r2, r1
10060eb0:	2100      	movs	r1, #0
10060eb2:	1854      	adds	r4, r2, r1
10060eb4:	6864      	ldr	r4, [r4, #4]
10060eb6:	5044      	str	r4, [r0, r1]
10060eb8:	1d09      	adds	r1, r1, #4
10060eba:	2920      	cmp	r1, #32
10060ebc:	d1f9      	bne.n	10060eb2 <Mem_Buff_block_copy+0x1c>
10060ebe:	6811      	ldr	r1, [r2, #0]
10060ec0:	3020      	adds	r0, #32
10060ec2:	1e5b      	subs	r3, r3, #1
10060ec4:	041c      	lsls	r4, r3, #16
10060ec6:	d1f2      	bne.n	10060eae <Mem_Buff_block_copy+0x18>
10060ec8:	4610      	mov	r0, r2
10060eca:	bd10      	pop	{r4, pc}

10060ecc <Mem_Buff_block_write>:
10060ecc:	b5b0      	push	{r4, r5, r7, lr}
10060ece:	1e52      	subs	r2, r2, #1
10060ed0:	231f      	movs	r3, #31
10060ed2:	4313      	orrs	r3, r2
10060ed4:	b29a      	uxth	r2, r3
10060ed6:	1c53      	adds	r3, r2, #1
10060ed8:	b29a      	uxth	r2, r3
10060eda:	429a      	cmp	r2, r3
10060edc:	d10c      	bne.n	10060ef8 <Mem_Buff_block_write+0x2c>
10060ede:	0952      	lsrs	r2, r2, #5
10060ee0:	1d03      	adds	r3, r0, #4
10060ee2:	2400      	movs	r4, #0
10060ee4:	590d      	ldr	r5, [r1, r4]
10060ee6:	511d      	str	r5, [r3, r4]
10060ee8:	1d24      	adds	r4, r4, #4
10060eea:	2c20      	cmp	r4, #32
10060eec:	d1fa      	bne.n	10060ee4 <Mem_Buff_block_write+0x18>
10060eee:	6800      	ldr	r0, [r0, #0]
10060ef0:	3120      	adds	r1, #32
10060ef2:	1e52      	subs	r2, r2, #1
10060ef4:	0413      	lsls	r3, r2, #16
10060ef6:	d1f3      	bne.n	10060ee0 <Mem_Buff_block_write+0x14>
10060ef8:	bdb0      	pop	{r4, r5, r7, pc}

10060efa <Mem_Buff_append>:
10060efa:	4602      	mov	r2, r0
10060efc:	6800      	ldr	r0, [r0, #0]
10060efe:	2800      	cmp	r0, #0
10060f00:	d1fb      	bne.n	10060efa <Mem_Buff_append>
10060f02:	6011      	str	r1, [r2, #0]
10060f04:	4770      	bx	lr
	...

10060f08 <BlueNRG_Stack_Initialize_RAM_check>:
10060f08:	b5f0      	push	{r4, r5, r6, r7, lr}
10060f0a:	b097      	sub	sp, #92	@ 0x5c
10060f0c:	4ce5      	ldr	r4, [pc, #916]	@ (100612a4 <__arm_cp.0_4>)
10060f0e:	2067      	movs	r0, #103	@ 0x67
10060f10:	43c5      	mvns	r5, r0
10060f12:	f7ed fe3d 	bl	1004eb90 <conn_supp_csr_ucfg>
10060f16:	4ee4      	ldr	r6, [pc, #912]	@ (100612a8 <__arm_cp.0_5>)
10060f18:	2801      	cmp	r0, #1
10060f1a:	d002      	beq.n	10060f22 <BlueNRG_Stack_Initialize_RAM_check+0x1a>
10060f1c:	7af0      	ldrb	r0, [r6, #11]
10060f1e:	2800      	cmp	r0, #0
10060f20:	d010      	beq.n	10060f44 <BlueNRG_Stack_Initialize_RAM_check+0x3c>
10060f22:	4627      	mov	r7, r4
10060f24:	462c      	mov	r4, r5
10060f26:	3438      	adds	r4, #56	@ 0x38
10060f28:	f7ed fe32 	bl	1004eb90 <conn_supp_csr_ucfg>
10060f2c:	7af1      	ldrb	r1, [r6, #11]
10060f2e:	4361      	muls	r1, r4
10060f30:	4378      	muls	r0, r7
10060f32:	1838      	adds	r0, r7, r0
10060f34:	1844      	adds	r4, r0, r1
10060f36:	f7ed fe2b 	bl	1004eb90 <conn_supp_csr_ucfg>
10060f3a:	7af1      	ldrb	r1, [r6, #11]
10060f3c:	4341      	muls	r1, r0
10060f3e:	48db      	ldr	r0, [pc, #876]	@ (100612ac <__arm_cp.0_6>)
10060f40:	4348      	muls	r0, r1
10060f42:	1824      	adds	r4, r4, r0
10060f44:	342e      	adds	r4, #46	@ 0x2e
10060f46:	f7ed fe23 	bl	1004eb90 <conn_supp_csr_ucfg>
10060f4a:	2801      	cmp	r0, #1
10060f4c:	d10e      	bne.n	10060f6c <BlueNRG_Stack_Initialize_RAM_check+0x64>
10060f4e:	4628      	mov	r0, r5
10060f50:	3060      	adds	r0, #96	@ 0x60
10060f52:	8931      	ldrh	r1, [r6, #8]
10060f54:	4341      	muls	r1, r0
10060f56:	4628      	mov	r0, r5
10060f58:	3044      	adds	r0, #68	@ 0x44
10060f5a:	7ab2      	ldrb	r2, [r6, #10]
10060f5c:	4342      	muls	r2, r0
10060f5e:	1850      	adds	r0, r2, r1
10060f60:	4629      	mov	r1, r5
10060f62:	3148      	adds	r1, #72	@ 0x48
10060f64:	7b32      	ldrb	r2, [r6, #12]
10060f66:	434a      	muls	r2, r1
10060f68:	1880      	adds	r0, r0, r2
10060f6a:	e000      	b.n	10060f6e <BlueNRG_Stack_Initialize_RAM_check+0x66>
10060f6c:	2000      	movs	r0, #0
10060f6e:	9003      	str	r0, [sp, #12]
10060f70:	89f0      	ldrh	r0, [r6, #14]
10060f72:	900a      	str	r0, [sp, #40]	@ 0x28
10060f74:	f7f8 fb0a 	bl	1005958c <data_length_extension_csr_ucfg_weak>
10060f78:	2801      	cmp	r0, #1
10060f7a:	d001      	beq.n	10060f80 <BlueNRG_Stack_Initialize_RAM_check+0x78>
10060f7c:	f7fe fe92 	bl	1005fca4 <ext_adv_scan_enabled_ucfg_weak>
10060f80:	f7ed fdfe 	bl	1004eb80 <phy_upd_csr_ucfg>
10060f84:	2801      	cmp	r0, #1
10060f86:	9411      	str	r4, [sp, #68]	@ 0x44
10060f88:	d109      	bne.n	10060f9e <BlueNRG_Stack_Initialize_RAM_check+0x96>
10060f8a:	462c      	mov	r4, r5
10060f8c:	3438      	adds	r4, #56	@ 0x38
10060f8e:	f7ed fdff 	bl	1004eb90 <conn_supp_csr_ucfg>
10060f92:	4360      	muls	r0, r4
10060f94:	7af1      	ldrb	r1, [r6, #11]
10060f96:	4341      	muls	r1, r0
10060f98:	3908      	subs	r1, #8
10060f9a:	9109      	str	r1, [sp, #36]	@ 0x24
10060f9c:	e001      	b.n	10060fa2 <BlueNRG_Stack_Initialize_RAM_check+0x9a>
10060f9e:	2000      	movs	r0, #0
10060fa0:	9009      	str	r0, [sp, #36]	@ 0x24
10060fa2:	48f2      	ldr	r0, [pc, #968]	@ (1006136c <__arm_cp.0_3>)
10060fa4:	304c      	adds	r0, #76	@ 0x4c
10060fa6:	9013      	str	r0, [sp, #76]	@ 0x4c
10060fa8:	f7fe fe7c 	bl	1005fca4 <ext_adv_scan_enabled_ucfg_weak>
10060fac:	2801      	cmp	r0, #1
10060fae:	d015      	beq.n	10060fdc <BlueNRG_Stack_Initialize_RAM_check+0xd4>
10060fb0:	f7f8 faec 	bl	1005958c <data_length_extension_csr_ucfg_weak>
10060fb4:	2801      	cmp	r0, #1
10060fb6:	d011      	beq.n	10060fdc <BlueNRG_Stack_Initialize_RAM_check+0xd4>
10060fb8:	2029      	movs	r0, #41	@ 0x29
10060fba:	5c30      	ldrb	r0, [r6, r0]
10060fbc:	2800      	cmp	r0, #0
10060fbe:	d10d      	bne.n	10060fdc <BlueNRG_Stack_Initialize_RAM_check+0xd4>
10060fc0:	2025      	movs	r0, #37	@ 0x25
10060fc2:	5c30      	ldrb	r0, [r6, r0]
10060fc4:	2800      	cmp	r0, #0
10060fc6:	d109      	bne.n	10060fdc <BlueNRG_Stack_Initialize_RAM_check+0xd4>
10060fc8:	2026      	movs	r0, #38	@ 0x26
10060fca:	5c30      	ldrb	r0, [r6, r0]
10060fcc:	2800      	cmp	r0, #0
10060fce:	d002      	beq.n	10060fd6 <BlueNRG_Stack_Initialize_RAM_check+0xce>
10060fd0:	48e6      	ldr	r0, [pc, #920]	@ (1006136c <__arm_cp.0_3>)
10060fd2:	304c      	adds	r0, #76	@ 0x4c
10060fd4:	e001      	b.n	10060fda <BlueNRG_Stack_Initialize_RAM_check+0xd2>
10060fd6:	4628      	mov	r0, r5
10060fd8:	3024      	adds	r0, #36	@ 0x24
10060fda:	9013      	str	r0, [sp, #76]	@ 0x4c
10060fdc:	48e3      	ldr	r0, [pc, #908]	@ (1006136c <__arm_cp.0_3>)
10060fde:	306c      	adds	r0, #108	@ 0x6c
10060fe0:	9012      	str	r0, [sp, #72]	@ 0x48
10060fe2:	f7fe fe5f 	bl	1005fca4 <ext_adv_scan_enabled_ucfg_weak>
10060fe6:	2801      	cmp	r0, #1
10060fe8:	d015      	beq.n	10061016 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
10060fea:	f7f8 facf 	bl	1005958c <data_length_extension_csr_ucfg_weak>
10060fee:	2801      	cmp	r0, #1
10060ff0:	d011      	beq.n	10061016 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
10060ff2:	2029      	movs	r0, #41	@ 0x29
10060ff4:	5c30      	ldrb	r0, [r6, r0]
10060ff6:	2800      	cmp	r0, #0
10060ff8:	d10d      	bne.n	10061016 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
10060ffa:	2025      	movs	r0, #37	@ 0x25
10060ffc:	5c30      	ldrb	r0, [r6, r0]
10060ffe:	2800      	cmp	r0, #0
10061000:	d109      	bne.n	10061016 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
10061002:	2026      	movs	r0, #38	@ 0x26
10061004:	5c30      	ldrb	r0, [r6, r0]
10061006:	2800      	cmp	r0, #0
10061008:	d002      	beq.n	10061010 <BlueNRG_Stack_Initialize_RAM_check+0x108>
1006100a:	48d8      	ldr	r0, [pc, #864]	@ (1006136c <__arm_cp.0_3>)
1006100c:	306c      	adds	r0, #108	@ 0x6c
1006100e:	e001      	b.n	10061014 <BlueNRG_Stack_Initialize_RAM_check+0x10c>
10061010:	4628      	mov	r0, r5
10061012:	303c      	adds	r0, #60	@ 0x3c
10061014:	9012      	str	r0, [sp, #72]	@ 0x48
10061016:	f7fe fe45 	bl	1005fca4 <ext_adv_scan_enabled_ucfg_weak>
1006101a:	9010      	str	r0, [sp, #64]	@ 0x40
1006101c:	7eb0      	ldrb	r0, [r6, #26]
1006101e:	9000      	str	r0, [sp, #0]
10061020:	7ff0      	ldrb	r0, [r6, #31]
10061022:	900f      	str	r0, [sp, #60]	@ 0x3c
10061024:	f7ed fdb4 	bl	1004eb90 <conn_supp_csr_ucfg>
10061028:	9007      	str	r0, [sp, #28]
1006102a:	7ff0      	ldrb	r0, [r6, #31]
1006102c:	9001      	str	r0, [sp, #4]
1006102e:	f7fa fd04 	bl	1005ba3a <llc_priv_controller_privacy_csr_ucfg_weak>
10061032:	9008      	str	r0, [sp, #32]
10061034:	7ff0      	ldrb	r0, [r6, #31]
10061036:	9002      	str	r0, [sp, #8]
10061038:	f001 f965 	bl	10062306 <secure_connections_csr_ucfg_weak>
1006103c:	2700      	movs	r7, #0
1006103e:	f7f8 faab 	bl	10059598 <scan_csr_ucfg_weak>
10061042:	2801      	cmp	r0, #1
10061044:	4638      	mov	r0, r7
10061046:	9515      	str	r5, [sp, #84]	@ 0x54
10061048:	9716      	str	r7, [sp, #88]	@ 0x58
1006104a:	d14f      	bne.n	100610ec <BlueNRG_Stack_Initialize_RAM_check+0x1e4>
1006104c:	7f70      	ldrb	r0, [r6, #29]
1006104e:	280a      	cmp	r0, #10
10061050:	d300      	bcc.n	10061054 <BlueNRG_Stack_Initialize_RAM_check+0x14c>
10061052:	200a      	movs	r0, #10
10061054:	462c      	mov	r4, r5
10061056:	3438      	adds	r4, #56	@ 0x38
10061058:	4344      	muls	r4, r0
1006105a:	3cc0      	subs	r4, #192	@ 0xc0
1006105c:	2500      	movs	r5, #0
1006105e:	f7fa fce3 	bl	1005ba28 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10061062:	2801      	cmp	r0, #1
10061064:	462f      	mov	r7, r5
10061066:	d120      	bne.n	100610aa <BlueNRG_Stack_Initialize_RAM_check+0x1a2>
10061068:	f7ed fd92 	bl	1004eb90 <conn_supp_csr_ucfg>
1006106c:	2801      	cmp	r0, #1
1006106e:	950e      	str	r5, [sp, #56]	@ 0x38
10061070:	d003      	beq.n	1006107a <BlueNRG_Stack_Initialize_RAM_check+0x172>
10061072:	9b15      	ldr	r3, [sp, #84]	@ 0x54
10061074:	4618      	mov	r0, r3
10061076:	3054      	adds	r0, #84	@ 0x54
10061078:	e002      	b.n	10061080 <BlueNRG_Stack_Initialize_RAM_check+0x178>
1006107a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1006107c:	4618      	mov	r0, r3
1006107e:	3048      	adds	r0, #72	@ 0x48
10061080:	49ba      	ldr	r1, [pc, #744]	@ (1006136c <__arm_cp.0_3>)
10061082:	31e4      	adds	r1, #228	@ 0xe4
10061084:	7fb2      	ldrb	r2, [r6, #30]
10061086:	434a      	muls	r2, r1
10061088:	1810      	adds	r0, r2, r0
1006108a:	4635      	mov	r5, r6
1006108c:	461e      	mov	r6, r3
1006108e:	3660      	adds	r6, #96	@ 0x60
10061090:	7fe9      	ldrb	r1, [r5, #31]
10061092:	4632      	mov	r2, r6
10061094:	408a      	lsls	r2, r1
10061096:	1887      	adds	r7, r0, r2
10061098:	f7ed fd7a 	bl	1004eb90 <conn_supp_csr_ucfg>
1006109c:	2801      	cmp	r0, #1
1006109e:	d102      	bne.n	100610a6 <BlueNRG_Stack_Initialize_RAM_check+0x19e>
100610a0:	7ae8      	ldrb	r0, [r5, #11]
100610a2:	4346      	muls	r6, r0
100610a4:	19bf      	adds	r7, r7, r6
100610a6:	462e      	mov	r6, r5
100610a8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
100610aa:	19e0      	adds	r0, r4, r7
100610ac:	9014      	str	r0, [sp, #80]	@ 0x50
100610ae:	f7fa fcbd 	bl	1005ba2c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
100610b2:	4607      	mov	r7, r0
100610b4:	f7fa fcb8 	bl	1005ba28 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
100610b8:	4604      	mov	r4, r0
100610ba:	403c      	ands	r4, r7
100610bc:	f7ed fd68 	bl	1004eb90 <conn_supp_csr_ucfg>
100610c0:	4020      	ands	r0, r4
100610c2:	2801      	cmp	r0, #1
100610c4:	d108      	bne.n	100610d8 <BlueNRG_Stack_Initialize_RAM_check+0x1d0>
100610c6:	7ef0      	ldrb	r0, [r6, #27]
100610c8:	1e40      	subs	r0, r0, #1
100610ca:	2103      	movs	r1, #3
100610cc:	4301      	orrs	r1, r0
100610ce:	7fb0      	ldrb	r0, [r6, #30]
100610d0:	22b0      	movs	r2, #176	@ 0xb0
100610d2:	4342      	muls	r2, r0
100610d4:	43d0      	mvns	r0, r2
100610d6:	1a45      	subs	r5, r0, r1
100610d8:	9814      	ldr	r0, [sp, #80]	@ 0x50
100610da:	1944      	adds	r4, r0, r5
100610dc:	f7fe fde2 	bl	1005fca4 <ext_adv_scan_enabled_ucfg_weak>
100610e0:	4360      	muls	r0, r4
100610e2:	49a2      	ldr	r1, [pc, #648]	@ (1006136c <__arm_cp.0_3>)
100610e4:	1808      	adds	r0, r1, r0
100610e6:	302c      	adds	r0, #44	@ 0x2c
100610e8:	9d15      	ldr	r5, [sp, #84]	@ 0x54
100610ea:	9f16      	ldr	r7, [sp, #88]	@ 0x58
100610ec:	9006      	str	r0, [sp, #24]
100610ee:	f7ed fd4f 	bl	1004eb90 <conn_supp_csr_ucfg>
100610f2:	2801      	cmp	r0, #1
100610f4:	4639      	mov	r1, r7
100610f6:	d109      	bne.n	1006110c <BlueNRG_Stack_Initialize_RAM_check+0x204>
100610f8:	f7f8 fc14 	bl	10059924 <l2c_cos_csr_ucfg_weak>
100610fc:	2801      	cmp	r0, #1
100610fe:	4639      	mov	r1, r7
10061100:	d104      	bne.n	1006110c <BlueNRG_Stack_Initialize_RAM_check+0x204>
10061102:	2022      	movs	r0, #34	@ 0x22
10061104:	5c30      	ldrb	r0, [r6, r0]
10061106:	4629      	mov	r1, r5
10061108:	3114      	adds	r1, #20
1006110a:	4341      	muls	r1, r0
1006110c:	9105      	str	r1, [sp, #20]
1006110e:	f7fa fc8b 	bl	1005ba28 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10061112:	2801      	cmp	r0, #1
10061114:	4638      	mov	r0, r7
10061116:	d121      	bne.n	1006115c <BlueNRG_Stack_Initialize_RAM_check+0x254>
10061118:	4894      	ldr	r0, [pc, #592]	@ (1006136c <__arm_cp.0_3>)
1006111a:	30d4      	adds	r0, #212	@ 0xd4
1006111c:	7eb1      	ldrb	r1, [r6, #26]
1006111e:	4341      	muls	r1, r0
10061120:	4628      	mov	r0, r5
10061122:	3048      	adds	r0, #72	@ 0x48
10061124:	7af2      	ldrb	r2, [r6, #11]
10061126:	4342      	muls	r2, r0
10061128:	1854      	adds	r4, r2, r1
1006112a:	2700      	movs	r7, #0
1006112c:	f7fa fc7e 	bl	1005ba2c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
10061130:	2801      	cmp	r0, #1
10061132:	d110      	bne.n	10061156 <BlueNRG_Stack_Initialize_RAM_check+0x24e>
10061134:	f7ed fd2c 	bl	1004eb90 <conn_supp_csr_ucfg>
10061138:	2801      	cmp	r0, #1
1006113a:	d10c      	bne.n	10061156 <BlueNRG_Stack_Initialize_RAM_check+0x24e>
1006113c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1006113e:	4610      	mov	r0, r2
10061140:	3058      	adds	r0, #88	@ 0x58
10061142:	7f31      	ldrb	r1, [r6, #28]
10061144:	4341      	muls	r1, r0
10061146:	4610      	mov	r0, r2
10061148:	3060      	adds	r0, #96	@ 0x60
1006114a:	7ef2      	ldrb	r2, [r6, #27]
1006114c:	4342      	muls	r2, r0
1006114e:	1850      	adds	r0, r2, r1
10061150:	3884      	subs	r0, #132	@ 0x84
10061152:	7eb7      	ldrb	r7, [r6, #26]
10061154:	4347      	muls	r7, r0
10061156:	19e0      	adds	r0, r4, r7
10061158:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1006115a:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1006115c:	900e      	str	r0, [sp, #56]	@ 0x38
1006115e:	f7f8 f9b9 	bl	100594d4 <cte_csr_ucfg_weak>
10061162:	2801      	cmp	r0, #1
10061164:	4638      	mov	r0, r7
10061166:	d133      	bne.n	100611d0 <BlueNRG_Stack_Initialize_RAM_check+0x2c8>
10061168:	f7ed fd12 	bl	1004eb90 <conn_supp_csr_ucfg>
1006116c:	2801      	cmp	r0, #1
1006116e:	d002      	beq.n	10061176 <BlueNRG_Stack_Initialize_RAM_check+0x26e>
10061170:	462f      	mov	r7, r5
10061172:	375c      	adds	r7, #92	@ 0x5c
10061174:	e004      	b.n	10061180 <BlueNRG_Stack_Initialize_RAM_check+0x278>
10061176:	4628      	mov	r0, r5
10061178:	3060      	adds	r0, #96	@ 0x60
1006117a:	7af7      	ldrb	r7, [r6, #11]
1006117c:	4347      	muls	r7, r0
1006117e:	3f0c      	subs	r7, #12
10061180:	2523      	movs	r5, #35	@ 0x23
10061182:	5d70      	ldrb	r0, [r6, r5]
10061184:	2400      	movs	r4, #0
10061186:	2800      	cmp	r0, #0
10061188:	4620      	mov	r0, r4
1006118a:	d005      	beq.n	10061198 <BlueNRG_Stack_Initialize_RAM_check+0x290>
1006118c:	f7ed fd00 	bl	1004eb90 <conn_supp_csr_ucfg>
10061190:	5d70      	ldrb	r0, [r6, r5]
10061192:	4240      	negs	r0, r0
10061194:	2103      	movs	r1, #3
10061196:	4388      	bics	r0, r1
10061198:	19c0      	adds	r0, r0, r7
1006119a:	2724      	movs	r7, #36	@ 0x24
1006119c:	5df1      	ldrb	r1, [r6, r7]
1006119e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
100611a0:	3264      	adds	r2, #100	@ 0x64
100611a2:	434a      	muls	r2, r1
100611a4:	1885      	adds	r5, r0, r2
100611a6:	f7f8 f9f7 	bl	10059598 <scan_csr_ucfg_weak>
100611aa:	2801      	cmp	r0, #1
100611ac:	d10d      	bne.n	100611ca <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
100611ae:	f7fe fd79 	bl	1005fca4 <ext_adv_scan_enabled_ucfg_weak>
100611b2:	2801      	cmp	r0, #1
100611b4:	d109      	bne.n	100611ca <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
100611b6:	f7fa fc37 	bl	1005ba28 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
100611ba:	2801      	cmp	r0, #1
100611bc:	d105      	bne.n	100611ca <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
100611be:	5df4      	ldrb	r4, [r6, r7]
100611c0:	2c00      	cmp	r4, #0
100611c2:	9815      	ldr	r0, [sp, #84]	@ 0x54
100611c4:	d001      	beq.n	100611ca <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
100611c6:	4604      	mov	r4, r0
100611c8:	3450      	adds	r4, #80	@ 0x50
100611ca:	1928      	adds	r0, r5, r4
100611cc:	9d15      	ldr	r5, [sp, #84]	@ 0x54
100611ce:	9f16      	ldr	r7, [sp, #88]	@ 0x58
100611d0:	900d      	str	r0, [sp, #52]	@ 0x34
100611d2:	f7ed fcdd 	bl	1004eb90 <conn_supp_csr_ucfg>
100611d6:	2801      	cmp	r0, #1
100611d8:	4639      	mov	r1, r7
100611da:	d109      	bne.n	100611f0 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
100611dc:	f7f8 f9d8 	bl	10059590 <pcl_csr_ucfg_weak>
100611e0:	2801      	cmp	r0, #1
100611e2:	4639      	mov	r1, r7
100611e4:	d104      	bne.n	100611f0 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
100611e6:	4628      	mov	r0, r5
100611e8:	3048      	adds	r0, #72	@ 0x48
100611ea:	7af1      	ldrb	r1, [r6, #11]
100611ec:	4341      	muls	r1, r0
100611ee:	3914      	subs	r1, #20
100611f0:	910c      	str	r1, [sp, #48]	@ 0x30
100611f2:	f7ed fccd 	bl	1004eb90 <conn_supp_csr_ucfg>
100611f6:	2801      	cmp	r0, #1
100611f8:	463a      	mov	r2, r7
100611fa:	d108      	bne.n	1006120e <BlueNRG_Stack_Initialize_RAM_check+0x306>
100611fc:	f7f8 f875 	bl	100592ea <chc_csr_ucfg_weak>
10061200:	2801      	cmp	r0, #1
10061202:	463a      	mov	r2, r7
10061204:	d103      	bne.n	1006120e <BlueNRG_Stack_Initialize_RAM_check+0x306>
10061206:	4628      	mov	r0, r5
10061208:	304c      	adds	r0, #76	@ 0x4c
1006120a:	7af2      	ldrb	r2, [r6, #11]
1006120c:	4342      	muls	r2, r0
1006120e:	2026      	movs	r0, #38	@ 0x26
10061210:	5c31      	ldrb	r1, [r6, r0]
10061212:	2025      	movs	r0, #37	@ 0x25
10061214:	5c34      	ldrb	r4, [r6, r0]
10061216:	1863      	adds	r3, r4, r1
10061218:	2029      	movs	r0, #41	@ 0x29
1006121a:	5c30      	ldrb	r0, [r6, r0]
1006121c:	9304      	str	r3, [sp, #16]
1006121e:	2b00      	cmp	r3, #0
10061220:	9014      	str	r0, [sp, #80]	@ 0x50
10061222:	d010      	beq.n	10061246 <BlueNRG_Stack_Initialize_RAM_check+0x33e>
10061224:	2028      	movs	r0, #40	@ 0x28
10061226:	5c33      	ldrb	r3, [r6, r0]
10061228:	4628      	mov	r0, r5
1006122a:	3060      	adds	r0, #96	@ 0x60
1006122c:	4358      	muls	r0, r3
1006122e:	38f8      	subs	r0, #248	@ 0xf8
10061230:	4348      	muls	r0, r1
10061232:	2327      	movs	r3, #39	@ 0x27
10061234:	5cf3      	ldrb	r3, [r6, r3]
10061236:	3554      	adds	r5, #84	@ 0x54
10061238:	435d      	muls	r5, r3
1006123a:	4b4c      	ldr	r3, [pc, #304]	@ (1006136c <__arm_cp.0_3>)
1006123c:	195b      	adds	r3, r3, r5
1006123e:	3348      	adds	r3, #72	@ 0x48
10061240:	4363      	muls	r3, r4
10061242:	181f      	adds	r7, r3, r0
10061244:	9814      	ldr	r0, [sp, #80]	@ 0x50
10061246:	2800      	cmp	r0, #0
10061248:	9716      	str	r7, [sp, #88]	@ 0x58
1006124a:	920b      	str	r2, [sp, #44]	@ 0x2c
1006124c:	d00d      	beq.n	1006126a <BlueNRG_Stack_Initialize_RAM_check+0x362>
1006124e:	4602      	mov	r2, r0
10061250:	202a      	movs	r0, #42	@ 0x2a
10061252:	5c30      	ldrb	r0, [r6, r0]
10061254:	4d45      	ldr	r5, [pc, #276]	@ (1006136c <__arm_cp.0_3>)
10061256:	462b      	mov	r3, r5
10061258:	33b0      	adds	r3, #176	@ 0xb0
1006125a:	4343      	muls	r3, r0
1006125c:	4637      	mov	r7, r6
1006125e:	462e      	mov	r6, r5
10061260:	36c8      	adds	r6, #200	@ 0xc8
10061262:	4356      	muls	r6, r2
10061264:	18f3      	adds	r3, r6, r3
10061266:	3b48      	subs	r3, #72	@ 0x48
10061268:	e003      	b.n	10061272 <BlueNRG_Stack_Initialize_RAM_check+0x36a>
1006126a:	202a      	movs	r0, #42	@ 0x2a
1006126c:	5c30      	ldrb	r0, [r6, r0]
1006126e:	2300      	movs	r3, #0
10061270:	4637      	mov	r7, r6
10061272:	2628      	movs	r6, #40	@ 0x28
10061274:	5dbe      	ldrb	r6, [r7, r6]
10061276:	4371      	muls	r1, r6
10061278:	1809      	adds	r1, r1, r0
1006127a:	2627      	movs	r6, #39	@ 0x27
1006127c:	463d      	mov	r5, r7
1006127e:	5dbe      	ldrb	r6, [r7, r6]
10061280:	4374      	muls	r4, r6
10061282:	1824      	adds	r4, r4, r0
10061284:	1860      	adds	r0, r4, r1
10061286:	d013      	beq.n	100612b0 <__arm_cp.0_6+0x4>
10061288:	9f15      	ldr	r7, [sp, #84]	@ 0x54
1006128a:	463e      	mov	r6, r7
1006128c:	364c      	adds	r6, #76	@ 0x4c
1006128e:	4366      	muls	r6, r4
10061290:	463c      	mov	r4, r7
10061292:	3434      	adds	r4, #52	@ 0x34
10061294:	434c      	muls	r4, r1
10061296:	19a1      	adds	r1, r4, r6
10061298:	463c      	mov	r4, r7
1006129a:	345c      	adds	r4, #92	@ 0x5c
1006129c:	4344      	muls	r4, r0
1006129e:	190c      	adds	r4, r1, r4
100612a0:	3c14      	subs	r4, #20
100612a2:	e007      	b.n	100612b4 <__arm_cp.0_6+0x8>

100612a4 <__arm_cp.0_4>:
100612a4:	fffffc00 	.word	0xfffffc00

100612a8 <__arm_cp.0_5>:
100612a8:	20002484 	.word	0x20002484

100612ac <__arm_cp.0_6>:
100612ac:	fffffd70 	.word	0xfffffd70
100612b0:	2400      	movs	r4, #0
100612b2:	9f15      	ldr	r7, [sp, #84]	@ 0x54
100612b4:	9903      	ldr	r1, [sp, #12]
100612b6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
100612b8:	9811      	ldr	r0, [sp, #68]	@ 0x44
100612ba:	1808      	adds	r0, r1, r0
100612bc:	4639      	mov	r1, r7
100612be:	3144      	adds	r1, #68	@ 0x44
100612c0:	4371      	muls	r1, r6
100612c2:	1840      	adds	r0, r0, r1
100612c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
100612c6:	1840      	adds	r0, r0, r1
100612c8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
100612ca:	1840      	adds	r0, r0, r1
100612cc:	9912      	ldr	r1, [sp, #72]	@ 0x48
100612ce:	1841      	adds	r1, r0, r1
100612d0:	4638      	mov	r0, r7
100612d2:	3060      	adds	r0, #96	@ 0x60
100612d4:	4606      	mov	r6, r0
100612d6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
100612d8:	4096      	lsls	r6, r2
100612da:	1989      	adds	r1, r1, r6
100612dc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
100612de:	2a01      	cmp	r2, #1
100612e0:	d106      	bne.n	100612f0 <__arm_cp.0_6+0x44>
100612e2:	4e22      	ldr	r6, [pc, #136]	@ (1006136c <__arm_cp.0_3>)
100612e4:	9a00      	ldr	r2, [sp, #0]
100612e6:	4356      	muls	r6, r2
100612e8:	1871      	adds	r1, r6, r1
100612ea:	2645      	movs	r6, #69	@ 0x45
100612ec:	00b6      	lsls	r6, r6, #2
100612ee:	1989      	adds	r1, r1, r6
100612f0:	462e      	mov	r6, r5
100612f2:	9d07      	ldr	r5, [sp, #28]
100612f4:	9a05      	ldr	r2, [sp, #20]
100612f6:	2d01      	cmp	r5, #1
100612f8:	d102      	bne.n	10061300 <__arm_cp.0_6+0x54>
100612fa:	9d01      	ldr	r5, [sp, #4]
100612fc:	40a8      	lsls	r0, r5
100612fe:	1809      	adds	r1, r1, r0
10061300:	9808      	ldr	r0, [sp, #32]
10061302:	2801      	cmp	r0, #1
10061304:	d105      	bne.n	10061312 <__arm_cp.0_6+0x66>
10061306:	4638      	mov	r0, r7
10061308:	3018      	adds	r0, #24
1006130a:	9d02      	ldr	r5, [sp, #8]
1006130c:	40a8      	lsls	r0, r5
1006130e:	1841      	adds	r1, r0, r1
10061310:	3970      	subs	r1, #112	@ 0x70
10061312:	9806      	ldr	r0, [sp, #24]
10061314:	9d04      	ldr	r5, [sp, #16]
10061316:	1808      	adds	r0, r1, r0
10061318:	1880      	adds	r0, r0, r2
1006131a:	990e      	ldr	r1, [sp, #56]	@ 0x38
1006131c:	1840      	adds	r0, r0, r1
1006131e:	990d      	ldr	r1, [sp, #52]	@ 0x34
10061320:	1840      	adds	r0, r0, r1
10061322:	990c      	ldr	r1, [sp, #48]	@ 0x30
10061324:	1840      	adds	r0, r0, r1
10061326:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10061328:	1840      	adds	r0, r0, r1
1006132a:	9914      	ldr	r1, [sp, #80]	@ 0x50
1006132c:	42cd      	cmn	r5, r1
1006132e:	d001      	beq.n	10061334 <__arm_cp.0_6+0x88>
10061330:	1838      	adds	r0, r7, r0
10061332:	3058      	adds	r0, #88	@ 0x58
10061334:	9916      	ldr	r1, [sp, #88]	@ 0x58
10061336:	1840      	adds	r0, r0, r1
10061338:	18c0      	adds	r0, r0, r3
1006133a:	1904      	adds	r4, r0, r4
1006133c:	f7f3 fed3 	bl	100550e6 <log_csr_ucfg_weak>
10061340:	2801      	cmp	r0, #1
10061342:	d100      	bne.n	10061346 <__arm_cp.0_6+0x9a>
10061344:	19e4      	adds	r4, r4, r7
10061346:	6870      	ldr	r0, [r6, #4]
10061348:	1820      	adds	r0, r4, r0
1006134a:	2103      	movs	r1, #3
1006134c:	43c9      	mvns	r1, r1
1006134e:	8df2      	ldrh	r2, [r6, #46]	@ 0x2e
10061350:	1cd2      	adds	r2, r2, #3
10061352:	400a      	ands	r2, r1
10061354:	8db3      	ldrh	r3, [r6, #44]	@ 0x2c
10061356:	1cdb      	adds	r3, r3, #3
10061358:	400b      	ands	r3, r1
1006135a:	189a      	adds	r2, r3, r2
1006135c:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
1006135e:	1cdb      	adds	r3, r3, #3
10061360:	400b      	ands	r3, r1
10061362:	18d1      	adds	r1, r2, r3
10061364:	1a40      	subs	r0, r0, r1
10061366:	b017      	add	sp, #92	@ 0x5c
10061368:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006136a:	46c0      	nop			@ (mov r8, r8)

1006136c <__arm_cp.0_3>:
1006136c:	fffffe90 	.word	0xfffffe90

10061370 <sdb_sap_get_security_records_count>:
10061370:	b580      	push	{r7, lr}
10061372:	f001 f996 	bl	100626a2 <nvm_sec_db_get_record_count>
10061376:	bd80      	pop	{r7, pc}

10061378 <sdb_sap_add_security_record>:
10061378:	b5b0      	push	{r4, r5, r7, lr}
1006137a:	b094      	sub	sp, #80	@ 0x50
1006137c:	4604      	mov	r4, r0
1006137e:	7841      	ldrb	r1, [r0, #1]
10061380:	2501      	movs	r5, #1
10061382:	4029      	ands	r1, r5
10061384:	303e      	adds	r0, #62	@ 0x3e
10061386:	466a      	mov	r2, sp
10061388:	f000 f819 	bl	100613be <sdb_sap_read_security_record>
1006138c:	2800      	cmp	r0, #0
1006138e:	d10c      	bne.n	100613aa <sdb_sap_add_security_record+0x32>
10061390:	4669      	mov	r1, sp
10061392:	2250      	movs	r2, #80	@ 0x50
10061394:	4620      	mov	r0, r4
10061396:	f7f1 f97d 	bl	10052694 <BLEPLAT_MemCmp>
1006139a:	2800      	cmp	r0, #0
1006139c:	d008      	beq.n	100613b0 <sdb_sap_add_security_record+0x38>
1006139e:	4669      	mov	r1, sp
100613a0:	7848      	ldrb	r0, [r1, #1]
100613a2:	4028      	ands	r0, r5
100613a4:	313e      	adds	r1, #62	@ 0x3e
100613a6:	f000 f83b 	bl	10061420 <sdb_remove_security_record_by_address>
100613aa:	7860      	ldrb	r0, [r4, #1]
100613ac:	2810      	cmp	r0, #16
100613ae:	d201      	bcs.n	100613b4 <sdb_sap_add_security_record+0x3c>
100613b0:	2000      	movs	r0, #0
100613b2:	e002      	b.n	100613ba <sdb_sap_add_security_record+0x42>
100613b4:	4620      	mov	r0, r4
100613b6:	f001 f969 	bl	1006268c <nvm_sec_db_add_record>
100613ba:	b014      	add	sp, #80	@ 0x50
100613bc:	bdb0      	pop	{r4, r5, r7, pc}

100613be <sdb_sap_read_security_record>:
100613be:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100613c0:	4614      	mov	r4, r2
100613c2:	4606      	mov	r6, r0
100613c4:	2501      	movs	r5, #1
100613c6:	9102      	str	r1, [sp, #8]
100613c8:	2901      	cmp	r1, #1
100613ca:	d105      	bne.n	100613d8 <sdb_sap_read_security_record+0x1a>
100613cc:	7970      	ldrb	r0, [r6, #5]
100613ce:	21c0      	movs	r1, #192	@ 0xc0
100613d0:	4001      	ands	r1, r0
100613d2:	2940      	cmp	r1, #64	@ 0x40
100613d4:	d100      	bne.n	100613d8 <sdb_sap_read_security_record+0x1a>
100613d6:	2500      	movs	r5, #0
100613d8:	f001 f940 	bl	1006265c <nvm_sec_db_read_init>
100613dc:	4620      	mov	r0, r4
100613de:	303e      	adds	r0, #62	@ 0x3e
100613e0:	9001      	str	r0, [sp, #4]
100613e2:	4627      	mov	r7, r4
100613e4:	371e      	adds	r7, #30
100613e6:	4620      	mov	r0, r4
100613e8:	f001 f93e 	bl	10062668 <nvm_sec_db_read_next_record>
100613ec:	2800      	cmp	r0, #0
100613ee:	d115      	bne.n	1006141c <sdb_sap_read_security_record+0x5e>
100613f0:	2d00      	cmp	r5, #0
100613f2:	d00b      	beq.n	1006140c <sdb_sap_read_security_record+0x4e>
100613f4:	7860      	ldrb	r0, [r4, #1]
100613f6:	2101      	movs	r1, #1
100613f8:	4001      	ands	r1, r0
100613fa:	9802      	ldr	r0, [sp, #8]
100613fc:	4281      	cmp	r1, r0
100613fe:	d1f2      	bne.n	100613e6 <sdb_sap_read_security_record+0x28>
10061400:	2206      	movs	r2, #6
10061402:	9801      	ldr	r0, [sp, #4]
10061404:	4631      	mov	r1, r6
10061406:	f7f1 f945 	bl	10052694 <BLEPLAT_MemCmp>
1006140a:	e003      	b.n	10061414 <sdb_sap_read_security_record+0x56>
1006140c:	4630      	mov	r0, r6
1006140e:	4639      	mov	r1, r7
10061410:	f000 f980 	bl	10061714 <smp_sap_crt_resolve_rpa>
10061414:	2800      	cmp	r0, #0
10061416:	d1e6      	bne.n	100613e6 <sdb_sap_read_security_record+0x28>
10061418:	2000      	movs	r0, #0
1006141a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006141c:	20b3      	movs	r0, #179	@ 0xb3
1006141e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10061420 <sdb_remove_security_record_by_address>:
10061420:	b5f0      	push	{r4, r5, r6, r7, lr}
10061422:	b095      	sub	sp, #84	@ 0x54
10061424:	460c      	mov	r4, r1
10061426:	4605      	mov	r5, r0
10061428:	f001 f918 	bl	1006265c <nvm_sec_db_read_init>
1006142c:	ae01      	add	r6, sp, #4
1006142e:	363e      	adds	r6, #62	@ 0x3e
10061430:	27b3      	movs	r7, #179	@ 0xb3
10061432:	a801      	add	r0, sp, #4
10061434:	f001 f918 	bl	10062668 <nvm_sec_db_read_next_record>
10061438:	2800      	cmp	r0, #0
1006143a:	d110      	bne.n	1006145e <sdb_remove_security_record_by_address+0x3e>
1006143c:	2206      	movs	r2, #6
1006143e:	4630      	mov	r0, r6
10061440:	4621      	mov	r1, r4
10061442:	f7f1 f927 	bl	10052694 <BLEPLAT_MemCmp>
10061446:	a901      	add	r1, sp, #4
10061448:	7849      	ldrb	r1, [r1, #1]
1006144a:	2201      	movs	r2, #1
1006144c:	400a      	ands	r2, r1
1006144e:	42aa      	cmp	r2, r5
10061450:	d1ef      	bne.n	10061432 <sdb_remove_security_record_by_address+0x12>
10061452:	2800      	cmp	r0, #0
10061454:	d1ed      	bne.n	10061432 <sdb_remove_security_record_by_address+0x12>
10061456:	f001 f937 	bl	100626c8 <nvm_discard_current_record>
1006145a:	2700      	movs	r7, #0
1006145c:	e7e9      	b.n	10061432 <sdb_remove_security_record_by_address+0x12>
1006145e:	b2f8      	uxtb	r0, r7
10061460:	b015      	add	sp, #84	@ 0x54
10061462:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061464 <sdb_sap_read_security_record_sequential>:
10061464:	b5b0      	push	{r4, r5, r7, lr}
10061466:	4604      	mov	r4, r0
10061468:	4d07      	ldr	r5, [pc, #28]	@ (10061488 <__arm_cp.5_0>)
1006146a:	7828      	ldrb	r0, [r5, #0]
1006146c:	2800      	cmp	r0, #0
1006146e:	d103      	bne.n	10061478 <sdb_sap_read_security_record_sequential+0x14>
10061470:	f001 f8f4 	bl	1006265c <nvm_sec_db_read_init>
10061474:	2001      	movs	r0, #1
10061476:	7028      	strb	r0, [r5, #0]
10061478:	4620      	mov	r0, r4
1006147a:	f001 f8f5 	bl	10062668 <nvm_sec_db_read_next_record>
1006147e:	2800      	cmp	r0, #0
10061480:	d001      	beq.n	10061486 <sdb_sap_read_security_record_sequential+0x22>
10061482:	2100      	movs	r1, #0
10061484:	7029      	strb	r1, [r5, #0]
10061486:	bdb0      	pop	{r4, r5, r7, pc}

10061488 <__arm_cp.5_0>:
10061488:	200024b8 	.word	0x200024b8

1006148c <sdb_sap_del_bonded_device>:
1006148c:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1006148e:	460d      	mov	r5, r1
10061490:	4604      	mov	r4, r0
10061492:	aa01      	add	r2, sp, #4
10061494:	4608      	mov	r0, r1
10061496:	4621      	mov	r1, r4
10061498:	f000 f87f 	bl	1006159a <sdb_gatt_search_record>
1006149c:	2800      	cmp	r0, #0
1006149e:	d101      	bne.n	100614a4 <sdb_sap_del_bonded_device+0x18>
100614a0:	f001 f912 	bl	100626c8 <nvm_discard_current_record>
100614a4:	4628      	mov	r0, r5
100614a6:	4621      	mov	r1, r4
100614a8:	f7ff ffba 	bl	10061420 <sdb_remove_security_record_by_address>
100614ac:	b004      	add	sp, #16
100614ae:	bdb0      	pop	{r4, r5, r7, pc}

100614b0 <sdb_sap_read_security_record_matching>:
100614b0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100614b2:	4614      	mov	r4, r2
100614b4:	9101      	str	r1, [sp, #4]
100614b6:	4606      	mov	r6, r0
100614b8:	f001 f8d0 	bl	1006265c <nvm_sec_db_read_init>
100614bc:	4627      	mov	r7, r4
100614be:	3744      	adds	r7, #68	@ 0x44
100614c0:	4620      	mov	r0, r4
100614c2:	f001 f8d1 	bl	10062668 <nvm_sec_db_read_next_record>
100614c6:	2800      	cmp	r0, #0
100614c8:	d111      	bne.n	100614ee <sdb_sap_read_security_record_matching+0x3e>
100614ca:	7860      	ldrb	r0, [r4, #1]
100614cc:	06c0      	lsls	r0, r0, #27
100614ce:	d5f7      	bpl.n	100614c0 <sdb_sap_read_security_record_matching+0x10>
100614d0:	ad02      	add	r5, sp, #8
100614d2:	4638      	mov	r0, r7
100614d4:	9901      	ldr	r1, [sp, #4]
100614d6:	462a      	mov	r2, r5
100614d8:	f000 f87a 	bl	100615d0 <smp_sap_crt_generate_ediv>
100614dc:	2202      	movs	r2, #2
100614de:	4628      	mov	r0, r5
100614e0:	4631      	mov	r1, r6
100614e2:	f7f1 f8d7 	bl	10052694 <BLEPLAT_MemCmp>
100614e6:	2800      	cmp	r0, #0
100614e8:	d1ea      	bne.n	100614c0 <sdb_sap_read_security_record_matching+0x10>
100614ea:	2000      	movs	r0, #0
100614ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100614ee:	2081      	movs	r0, #129	@ 0x81
100614f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100614f2 <SDB_sap_write_peer_bonded_gatt_client_data>:
100614f2:	b5f0      	push	{r4, r5, r6, r7, lr}
100614f4:	b085      	sub	sp, #20
100614f6:	461e      	mov	r6, r3
100614f8:	4617      	mov	r7, r2
100614fa:	460d      	mov	r5, r1
100614fc:	4604      	mov	r4, r0
100614fe:	aa02      	add	r2, sp, #8
10061500:	4608      	mov	r0, r1
10061502:	4621      	mov	r1, r4
10061504:	f000 f849 	bl	1006159a <sdb_gatt_search_record>
10061508:	2800      	cmp	r0, #0
1006150a:	d10b      	bne.n	10061524 <SDB_sap_write_peer_bonded_gatt_client_data+0x32>
1006150c:	9804      	ldr	r0, [sp, #16]
1006150e:	42b8      	cmp	r0, r7
10061510:	d106      	bne.n	10061520 <SDB_sap_write_peer_bonded_gatt_client_data+0x2e>
10061512:	b2ba      	uxth	r2, r7
10061514:	200c      	movs	r0, #12
10061516:	4631      	mov	r1, r6
10061518:	f7f1 f84c 	bl	100525b4 <BLEPLAT_NvmCompare>
1006151c:	2800      	cmp	r0, #0
1006151e:	d016      	beq.n	1006154e <SDB_sap_write_peer_bonded_gatt_client_data+0x5c>
10061520:	f001 f8d2 	bl	100626c8 <nvm_discard_current_record>
10061524:	9601      	str	r6, [sp, #4]
10061526:	ae02      	add	r6, sp, #8
10061528:	7035      	strb	r5, [r6, #0]
1006152a:	1c70      	adds	r0, r6, #1
1006152c:	2206      	movs	r2, #6
1006152e:	4621      	mov	r1, r4
10061530:	f7f1 f890 	bl	10052654 <BLEPLAT_MemCpy>
10061534:	9704      	str	r7, [sp, #16]
10061536:	4630      	mov	r0, r6
10061538:	9901      	ldr	r1, [sp, #4]
1006153a:	f001 f882 	bl	10062642 <nvm_gatt_db_update_record>
1006153e:	2800      	cmp	r0, #0
10061540:	d005      	beq.n	1006154e <SDB_sap_write_peer_bonded_gatt_client_data+0x5c>
10061542:	4606      	mov	r6, r0
10061544:	4628      	mov	r0, r5
10061546:	4621      	mov	r1, r4
10061548:	f7ff ff6a 	bl	10061420 <sdb_remove_security_record_by_address>
1006154c:	e000      	b.n	10061550 <SDB_sap_write_peer_bonded_gatt_client_data+0x5e>
1006154e:	2600      	movs	r6, #0
10061550:	4630      	mov	r0, r6
10061552:	b005      	add	sp, #20
10061554:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061556 <SDB_sap_read_peer_bonded_gatt_client_data>:
10061556:	b5b0      	push	{r4, r5, r7, lr}
10061558:	b098      	sub	sp, #96	@ 0x60
1006155a:	461c      	mov	r4, r3
1006155c:	4615      	mov	r5, r2
1006155e:	aa01      	add	r2, sp, #4
10061560:	f7ff ff2d 	bl	100613be <sdb_sap_read_security_record>
10061564:	2800      	cmp	r0, #0
10061566:	d116      	bne.n	10061596 <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
10061568:	a901      	add	r1, sp, #4
1006156a:	784a      	ldrb	r2, [r1, #1]
1006156c:	2001      	movs	r0, #1
1006156e:	4010      	ands	r0, r2
10061570:	313e      	adds	r1, #62	@ 0x3e
10061572:	aa15      	add	r2, sp, #84	@ 0x54
10061574:	f000 f811 	bl	1006159a <sdb_gatt_search_record>
10061578:	2800      	cmp	r0, #0
1006157a:	d001      	beq.n	10061580 <SDB_sap_read_peer_bonded_gatt_client_data+0x2a>
1006157c:	20b3      	movs	r0, #179	@ 0xb3
1006157e:	e00a      	b.n	10061596 <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
10061580:	6829      	ldr	r1, [r5, #0]
10061582:	9817      	ldr	r0, [sp, #92]	@ 0x5c
10061584:	4288      	cmp	r0, r1
10061586:	d901      	bls.n	1006158c <SDB_sap_read_peer_bonded_gatt_client_data+0x36>
10061588:	2087      	movs	r0, #135	@ 0x87
1006158a:	e004      	b.n	10061596 <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
1006158c:	6028      	str	r0, [r5, #0]
1006158e:	b281      	uxth	r1, r0
10061590:	4620      	mov	r0, r4
10061592:	f001 f84b 	bl	1006262c <nvm_gatt_db_read_full_current_record>
10061596:	b018      	add	sp, #96	@ 0x60
10061598:	bdb0      	pop	{r4, r5, r7, pc}

1006159a <sdb_gatt_search_record>:
1006159a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006159c:	4614      	mov	r4, r2
1006159e:	460d      	mov	r5, r1
100615a0:	4606      	mov	r6, r0
100615a2:	f001 f81d 	bl	100625e0 <nvm_gatt_db_read_init>
100615a6:	1c67      	adds	r7, r4, #1
100615a8:	4620      	mov	r0, r4
100615aa:	f001 f81f 	bl	100625ec <nvm_gatt_db_read_next_record>
100615ae:	2800      	cmp	r0, #0
100615b0:	d10b      	bne.n	100615ca <sdb_gatt_search_record+0x30>
100615b2:	2206      	movs	r2, #6
100615b4:	4628      	mov	r0, r5
100615b6:	4639      	mov	r1, r7
100615b8:	f7f1 f86c 	bl	10052694 <BLEPLAT_MemCmp>
100615bc:	2800      	cmp	r0, #0
100615be:	d1f3      	bne.n	100615a8 <sdb_gatt_search_record+0xe>
100615c0:	7820      	ldrb	r0, [r4, #0]
100615c2:	42b0      	cmp	r0, r6
100615c4:	d1f0      	bne.n	100615a8 <sdb_gatt_search_record+0xe>
100615c6:	2000      	movs	r0, #0
100615c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100615ca:	20b3      	movs	r0, #179	@ 0xb3
100615cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100615d0 <smp_sap_crt_generate_ediv>:
100615d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100615d2:	b091      	sub	sp, #68	@ 0x44
100615d4:	9201      	str	r2, [sp, #4]
100615d6:	9100      	str	r1, [sp, #0]
100615d8:	4605      	mov	r5, r0
100615da:	a908      	add	r1, sp, #32
100615dc:	2003      	movs	r0, #3
100615de:	8008      	strh	r0, [r1, #0]
100615e0:	aa07      	add	r2, sp, #28
100615e2:	2400      	movs	r4, #0
100615e4:	8014      	strh	r4, [r2, #0]
100615e6:	4814      	ldr	r0, [pc, #80]	@ (10061638 <__arm_cp.0_0>)
100615e8:	6800      	ldr	r0, [r0, #0]
100615ea:	3018      	adds	r0, #24
100615ec:	af03      	add	r7, sp, #12
100615ee:	463b      	mov	r3, r7
100615f0:	f000 f824 	bl	1006163c <smp_crt_diversify>
100615f4:	ae0d      	add	r6, sp, #52	@ 0x34
100615f6:	2210      	movs	r2, #16
100615f8:	4630      	mov	r0, r6
100615fa:	4621      	mov	r1, r4
100615fc:	f7f1 f83a 	bl	10052674 <BLEPLAT_MemSet>
10061600:	2208      	movs	r2, #8
10061602:	4630      	mov	r0, r6
10061604:	9900      	ldr	r1, [sp, #0]
10061606:	f7f1 f825 	bl	10052654 <BLEPLAT_MemCpy>
1006160a:	ac09      	add	r4, sp, #36	@ 0x24
1006160c:	4638      	mov	r0, r7
1006160e:	4631      	mov	r1, r6
10061610:	4622      	mov	r2, r4
10061612:	f7f7 ff61 	bl	100594d8 <hci_le_encrypt>
10061616:	ae02      	add	r6, sp, #8
10061618:	2202      	movs	r2, #2
1006161a:	4630      	mov	r0, r6
1006161c:	4621      	mov	r1, r4
1006161e:	f7f1 f819 	bl	10052654 <BLEPLAT_MemCpy>
10061622:	7828      	ldrb	r0, [r5, #0]
10061624:	9902      	ldr	r1, [sp, #8]
10061626:	4041      	eors	r1, r0
10061628:	9a01      	ldr	r2, [sp, #4]
1006162a:	7011      	strb	r1, [r2, #0]
1006162c:	7870      	ldrb	r0, [r6, #1]
1006162e:	7869      	ldrb	r1, [r5, #1]
10061630:	4041      	eors	r1, r0
10061632:	7051      	strb	r1, [r2, #1]
10061634:	b011      	add	sp, #68	@ 0x44
10061636:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061638 <__arm_cp.0_0>:
10061638:	2000241c 	.word	0x2000241c

1006163c <smp_crt_diversify>:
1006163c:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1006163e:	780d      	ldrb	r5, [r1, #0]
10061640:	466c      	mov	r4, sp
10061642:	7025      	strb	r5, [r4, #0]
10061644:	7849      	ldrb	r1, [r1, #1]
10061646:	7061      	strb	r1, [r4, #1]
10061648:	7811      	ldrb	r1, [r2, #0]
1006164a:	70a1      	strb	r1, [r4, #2]
1006164c:	7851      	ldrb	r1, [r2, #1]
1006164e:	70e1      	strb	r1, [r4, #3]
10061650:	2100      	movs	r1, #0
10061652:	9103      	str	r1, [sp, #12]
10061654:	9102      	str	r1, [sp, #8]
10061656:	9101      	str	r1, [sp, #4]
10061658:	4621      	mov	r1, r4
1006165a:	461a      	mov	r2, r3
1006165c:	f7f7 ff3c 	bl	100594d8 <hci_le_encrypt>
10061660:	bdbf      	pop	{r0, r1, r2, r3, r4, r5, r7, pc}
	...

10061664 <smp_sap_crt_generate_local_irk>:
10061664:	b5e0      	push	{r5, r6, r7, lr}
10061666:	4603      	mov	r3, r0
10061668:	a901      	add	r1, sp, #4
1006166a:	2001      	movs	r0, #1
1006166c:	8008      	strh	r0, [r1, #0]
1006166e:	466a      	mov	r2, sp
10061670:	2000      	movs	r0, #0
10061672:	8010      	strh	r0, [r2, #0]
10061674:	4802      	ldr	r0, [pc, #8]	@ (10061680 <__arm_cp.2_0>)
10061676:	6800      	ldr	r0, [r0, #0]
10061678:	3018      	adds	r0, #24
1006167a:	f7ff ffdf 	bl	1006163c <smp_crt_diversify>
1006167e:	bd8c      	pop	{r2, r3, r7, pc}

10061680 <__arm_cp.2_0>:
10061680:	2000241c 	.word	0x2000241c

10061684 <smp_sap_crt_generate_rpa>:
10061684:	b5f0      	push	{r4, r5, r6, r7, lr}
10061686:	b087      	sub	sp, #28
10061688:	9000      	str	r0, [sp, #0]
1006168a:	ae03      	add	r6, sp, #12
1006168c:	4630      	mov	r0, r6
1006168e:	f7ff ffe9 	bl	10061664 <smp_sap_crt_generate_local_irk>
10061692:	2700      	movs	r7, #0
10061694:	4638      	mov	r0, r7
10061696:	f001 fb8d 	bl	10062db4 <Hal_Get_Random_Number>
1006169a:	0a01      	lsrs	r1, r0, #8
1006169c:	ad02      	add	r5, sp, #8
1006169e:	7069      	strb	r1, [r5, #1]
100616a0:	243f      	movs	r4, #63	@ 0x3f
100616a2:	4004      	ands	r4, r0
100616a4:	3440      	adds	r4, #64	@ 0x40
100616a6:	4638      	mov	r0, r7
100616a8:	f001 fb84 	bl	10062db4 <Hal_Get_Random_Number>
100616ac:	70ac      	strb	r4, [r5, #2]
100616ae:	7028      	strb	r0, [r5, #0]
100616b0:	af01      	add	r7, sp, #4
100616b2:	4630      	mov	r0, r6
100616b4:	4629      	mov	r1, r5
100616b6:	463a      	mov	r2, r7
100616b8:	f000 f80e 	bl	100616d8 <smp_crt_calculate_hash>
100616bc:	2603      	movs	r6, #3
100616be:	9c00      	ldr	r4, [sp, #0]
100616c0:	4620      	mov	r0, r4
100616c2:	4639      	mov	r1, r7
100616c4:	4632      	mov	r2, r6
100616c6:	f7f0 ffc5 	bl	10052654 <BLEPLAT_MemCpy>
100616ca:	1ce0      	adds	r0, r4, #3
100616cc:	4629      	mov	r1, r5
100616ce:	4632      	mov	r2, r6
100616d0:	f7f0 ffc0 	bl	10052654 <BLEPLAT_MemCpy>
100616d4:	b007      	add	sp, #28
100616d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100616d8 <smp_crt_calculate_hash>:
100616d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100616da:	b089      	sub	sp, #36	@ 0x24
100616dc:	9200      	str	r2, [sp, #0]
100616de:	460f      	mov	r7, r1
100616e0:	4605      	mov	r5, r0
100616e2:	ae05      	add	r6, sp, #20
100616e4:	2100      	movs	r1, #0
100616e6:	2210      	movs	r2, #16
100616e8:	4630      	mov	r0, r6
100616ea:	f7f0 ffc3 	bl	10052674 <BLEPLAT_MemSet>
100616ee:	2403      	movs	r4, #3
100616f0:	4630      	mov	r0, r6
100616f2:	4639      	mov	r1, r7
100616f4:	4622      	mov	r2, r4
100616f6:	f7f0 ffad 	bl	10052654 <BLEPLAT_MemCpy>
100616fa:	af01      	add	r7, sp, #4
100616fc:	4628      	mov	r0, r5
100616fe:	4631      	mov	r1, r6
10061700:	463a      	mov	r2, r7
10061702:	f7f7 fee9 	bl	100594d8 <hci_le_encrypt>
10061706:	9800      	ldr	r0, [sp, #0]
10061708:	4639      	mov	r1, r7
1006170a:	4622      	mov	r2, r4
1006170c:	f7f0 ffa2 	bl	10052654 <BLEPLAT_MemCpy>
10061710:	b009      	add	sp, #36	@ 0x24
10061712:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061714 <smp_sap_crt_resolve_rpa>:
10061714:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10061716:	460a      	mov	r2, r1
10061718:	4604      	mov	r4, r0
1006171a:	1cc1      	adds	r1, r0, #3
1006171c:	ad01      	add	r5, sp, #4
1006171e:	4610      	mov	r0, r2
10061720:	462a      	mov	r2, r5
10061722:	f7ff ffd9 	bl	100616d8 <smp_crt_calculate_hash>
10061726:	2203      	movs	r2, #3
10061728:	4628      	mov	r0, r5
1006172a:	4621      	mov	r1, r4
1006172c:	f7f0 ffb2 	bl	10052694 <BLEPLAT_MemCmp>
10061730:	2800      	cmp	r0, #0
10061732:	d000      	beq.n	10061736 <smp_sap_crt_resolve_rpa+0x22>
10061734:	2081      	movs	r0, #129	@ 0x81
10061736:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10061738 <smp_crt_s1_generate_stk>:
10061738:	b5f0      	push	{r4, r5, r6, r7, lr}
1006173a:	b085      	sub	sp, #20
1006173c:	9300      	str	r3, [sp, #0]
1006173e:	4617      	mov	r7, r2
10061740:	4605      	mov	r5, r0
10061742:	ae01      	add	r6, sp, #4
10061744:	4630      	mov	r0, r6
10061746:	3008      	adds	r0, #8
10061748:	2408      	movs	r4, #8
1006174a:	4622      	mov	r2, r4
1006174c:	f7f0 ff82 	bl	10052654 <BLEPLAT_MemCpy>
10061750:	4630      	mov	r0, r6
10061752:	4639      	mov	r1, r7
10061754:	4622      	mov	r2, r4
10061756:	f7f0 ff7d 	bl	10052654 <BLEPLAT_MemCpy>
1006175a:	4628      	mov	r0, r5
1006175c:	4631      	mov	r1, r6
1006175e:	9a00      	ldr	r2, [sp, #0]
10061760:	f7f7 feba 	bl	100594d8 <hci_le_encrypt>
10061764:	b005      	add	sp, #20
10061766:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061768 <smp_crt_generate_csrk>:
10061768:	b5e0      	push	{r5, r6, r7, lr}
1006176a:	460b      	mov	r3, r1
1006176c:	4601      	mov	r1, r0
1006176e:	aa01      	add	r2, sp, #4
10061770:	2001      	movs	r0, #1
10061772:	8010      	strh	r0, [r2, #0]
10061774:	4802      	ldr	r0, [pc, #8]	@ (10061780 <__arm_cp.7_0>)
10061776:	6800      	ldr	r0, [r0, #0]
10061778:	3008      	adds	r0, #8
1006177a:	f7ff ff5f 	bl	1006163c <smp_crt_diversify>
1006177e:	bd8c      	pop	{r2, r3, r7, pc}

10061780 <__arm_cp.7_0>:
10061780:	2000241c 	.word	0x2000241c

10061784 <smp_crt_generate_cmac_tag>:
10061784:	b5f0      	push	{r4, r5, r6, r7, lr}
10061786:	b095      	sub	sp, #84	@ 0x54
10061788:	9301      	str	r3, [sp, #4]
1006178a:	4617      	mov	r7, r2
1006178c:	9103      	str	r1, [sp, #12]
1006178e:	2500      	movs	r5, #0
10061790:	9514      	str	r5, [sp, #80]	@ 0x50
10061792:	9513      	str	r5, [sp, #76]	@ 0x4c
10061794:	9512      	str	r5, [sp, #72]	@ 0x48
10061796:	9511      	str	r5, [sp, #68]	@ 0x44
10061798:	a911      	add	r1, sp, #68	@ 0x44
1006179a:	ac0d      	add	r4, sp, #52	@ 0x34
1006179c:	9004      	str	r0, [sp, #16]
1006179e:	4622      	mov	r2, r4
100617a0:	f7f7 fe9a 	bl	100594d8 <hci_le_encrypt>
100617a4:	200f      	movs	r0, #15
100617a6:	9002      	str	r0, [sp, #8]
100617a8:	5626      	ldrsb	r6, [r4, r0]
100617aa:	a909      	add	r1, sp, #36	@ 0x24
100617ac:	4620      	mov	r0, r4
100617ae:	f000 f885 	bl	100618bc <smp_crt_left_shift>
100617b2:	2e00      	cmp	r6, #0
100617b4:	d467      	bmi.n	10061886 <smp_crt_generate_cmac_tag+0x102>
100617b6:	a809      	add	r0, sp, #36	@ 0x24
100617b8:	9902      	ldr	r1, [sp, #8]
100617ba:	5644      	ldrsb	r4, [r0, r1]
100617bc:	a905      	add	r1, sp, #20
100617be:	f000 f87d 	bl	100618bc <smp_crt_left_shift>
100617c2:	2c00      	cmp	r4, #0
100617c4:	d46c      	bmi.n	100618a0 <smp_crt_generate_cmac_tag+0x11c>
100617c6:	a811      	add	r0, sp, #68	@ 0x44
100617c8:	2400      	movs	r4, #0
100617ca:	2210      	movs	r2, #16
100617cc:	4621      	mov	r1, r4
100617ce:	f7f0 ff51 	bl	10052674 <BLEPLAT_MemSet>
100617d2:	b2fd      	uxtb	r5, r7
100617d4:	2d11      	cmp	r5, #17
100617d6:	d321      	bcc.n	1006181c <smp_crt_generate_cmac_tag+0x98>
100617d8:	1d20      	adds	r0, r4, #4
100617da:	b281      	uxth	r1, r0
100617dc:	2210      	movs	r2, #16
100617de:	ab0d      	add	r3, sp, #52	@ 0x34
100617e0:	9803      	ldr	r0, [sp, #12]
100617e2:	f7f3 faeb 	bl	10054dbc <ACL_pkt_read>
100617e6:	2000      	movs	r0, #0
100617e8:	2810      	cmp	r0, #16
100617ea:	d007      	beq.n	100617fc <smp_crt_generate_cmac_tag+0x78>
100617ec:	a90d      	add	r1, sp, #52	@ 0x34
100617ee:	5c09      	ldrb	r1, [r1, r0]
100617f0:	aa11      	add	r2, sp, #68	@ 0x44
100617f2:	5c13      	ldrb	r3, [r2, r0]
100617f4:	404b      	eors	r3, r1
100617f6:	5413      	strb	r3, [r2, r0]
100617f8:	1c40      	adds	r0, r0, #1
100617fa:	e7f5      	b.n	100617e8 <smp_crt_generate_cmac_tag+0x64>
100617fc:	ad11      	add	r5, sp, #68	@ 0x44
100617fe:	ae0d      	add	r6, sp, #52	@ 0x34
10061800:	9804      	ldr	r0, [sp, #16]
10061802:	4629      	mov	r1, r5
10061804:	4632      	mov	r2, r6
10061806:	f7f7 fe67 	bl	100594d8 <hci_le_encrypt>
1006180a:	2210      	movs	r2, #16
1006180c:	4628      	mov	r0, r5
1006180e:	4631      	mov	r1, r6
10061810:	f7f0 ff20 	bl	10052654 <BLEPLAT_MemCpy>
10061814:	3f10      	subs	r7, #16
10061816:	3410      	adds	r4, #16
10061818:	b2a4      	uxth	r4, r4
1006181a:	e7da      	b.n	100617d2 <smp_crt_generate_cmac_tag+0x4e>
1006181c:	2d10      	cmp	r5, #16
1006181e:	d108      	bne.n	10061832 <smp_crt_generate_cmac_tag+0xae>
10061820:	1d20      	adds	r0, r4, #4
10061822:	b281      	uxth	r1, r0
10061824:	2210      	movs	r2, #16
10061826:	ab0d      	add	r3, sp, #52	@ 0x34
10061828:	9803      	ldr	r0, [sp, #12]
1006182a:	f7f3 fac7 	bl	10054dbc <ACL_pkt_read>
1006182e:	a809      	add	r0, sp, #36	@ 0x24
10061830:	e014      	b.n	1006185c <smp_crt_generate_cmac_tag+0xd8>
10061832:	a80d      	add	r0, sp, #52	@ 0x34
10061834:	2100      	movs	r1, #0
10061836:	2210      	movs	r2, #16
10061838:	f7f0 ff1c 	bl	10052674 <BLEPLAT_MemSet>
1006183c:	0638      	lsls	r0, r7, #24
1006183e:	d008      	beq.n	10061852 <smp_crt_generate_cmac_tag+0xce>
10061840:	a80d      	add	r0, sp, #52	@ 0x34
10061842:	1b43      	subs	r3, r0, r5
10061844:	3310      	adds	r3, #16
10061846:	1d20      	adds	r0, r4, #4
10061848:	b281      	uxth	r1, r0
1006184a:	9803      	ldr	r0, [sp, #12]
1006184c:	462a      	mov	r2, r5
1006184e:	f7f3 fab5 	bl	10054dbc <ACL_pkt_read>
10061852:	a80d      	add	r0, sp, #52	@ 0x34
10061854:	1b40      	subs	r0, r0, r5
10061856:	2180      	movs	r1, #128	@ 0x80
10061858:	73c1      	strb	r1, [r0, #15]
1006185a:	a805      	add	r0, sp, #20
1006185c:	9a01      	ldr	r2, [sp, #4]
1006185e:	2100      	movs	r1, #0
10061860:	2910      	cmp	r1, #16
10061862:	d009      	beq.n	10061878 <smp_crt_generate_cmac_tag+0xf4>
10061864:	ab0d      	add	r3, sp, #52	@ 0x34
10061866:	5c5c      	ldrb	r4, [r3, r1]
10061868:	5c43      	ldrb	r3, [r0, r1]
1006186a:	4063      	eors	r3, r4
1006186c:	ad11      	add	r5, sp, #68	@ 0x44
1006186e:	5c6c      	ldrb	r4, [r5, r1]
10061870:	405c      	eors	r4, r3
10061872:	546c      	strb	r4, [r5, r1]
10061874:	1c49      	adds	r1, r1, #1
10061876:	e7f3      	b.n	10061860 <smp_crt_generate_cmac_tag+0xdc>
10061878:	a911      	add	r1, sp, #68	@ 0x44
1006187a:	9804      	ldr	r0, [sp, #16]
1006187c:	f7f7 fe2c 	bl	100594d8 <hci_le_encrypt>
10061880:	2000      	movs	r0, #0
10061882:	b015      	add	sp, #84	@ 0x54
10061884:	bdf0      	pop	{r4, r5, r6, r7, pc}
10061886:	a811      	add	r0, sp, #68	@ 0x44
10061888:	2187      	movs	r1, #135	@ 0x87
1006188a:	7001      	strb	r1, [r0, #0]
1006188c:	2d0f      	cmp	r5, #15
1006188e:	d092      	beq.n	100617b6 <smp_crt_generate_cmac_tag+0x32>
10061890:	a809      	add	r0, sp, #36	@ 0x24
10061892:	5d41      	ldrb	r1, [r0, r5]
10061894:	aa11      	add	r2, sp, #68	@ 0x44
10061896:	5d52      	ldrb	r2, [r2, r5]
10061898:	404a      	eors	r2, r1
1006189a:	5542      	strb	r2, [r0, r5]
1006189c:	1c6d      	adds	r5, r5, #1
1006189e:	e7f5      	b.n	1006188c <smp_crt_generate_cmac_tag+0x108>
100618a0:	a811      	add	r0, sp, #68	@ 0x44
100618a2:	2187      	movs	r1, #135	@ 0x87
100618a4:	7001      	strb	r1, [r0, #0]
100618a6:	2000      	movs	r0, #0
100618a8:	280f      	cmp	r0, #15
100618aa:	d08c      	beq.n	100617c6 <smp_crt_generate_cmac_tag+0x42>
100618ac:	a905      	add	r1, sp, #20
100618ae:	5c0a      	ldrb	r2, [r1, r0]
100618b0:	ab11      	add	r3, sp, #68	@ 0x44
100618b2:	5c1b      	ldrb	r3, [r3, r0]
100618b4:	4053      	eors	r3, r2
100618b6:	540b      	strb	r3, [r1, r0]
100618b8:	1c40      	adds	r0, r0, #1
100618ba:	e7f5      	b.n	100618a8 <smp_crt_generate_cmac_tag+0x124>

100618bc <smp_crt_left_shift>:
100618bc:	b510      	push	{r4, lr}
100618be:	7802      	ldrb	r2, [r0, #0]
100618c0:	0052      	lsls	r2, r2, #1
100618c2:	700a      	strb	r2, [r1, #0]
100618c4:	1c49      	adds	r1, r1, #1
100618c6:	2200      	movs	r2, #0
100618c8:	2a0f      	cmp	r2, #15
100618ca:	d00b      	beq.n	100618e4 <smp_crt_left_shift+0x28>
100618cc:	1883      	adds	r3, r0, r2
100618ce:	785b      	ldrb	r3, [r3, #1]
100618d0:	005b      	lsls	r3, r3, #1
100618d2:	548b      	strb	r3, [r1, r2]
100618d4:	5684      	ldrsb	r4, [r0, r2]
100618d6:	2c00      	cmp	r4, #0
100618d8:	d502      	bpl.n	100618e0 <smp_crt_left_shift+0x24>
100618da:	2401      	movs	r4, #1
100618dc:	4323      	orrs	r3, r4
100618de:	548b      	strb	r3, [r1, r2]
100618e0:	1c52      	adds	r2, r2, #1
100618e2:	e7f1      	b.n	100618c8 <smp_crt_left_shift+0xc>
100618e4:	bd10      	pop	{r4, pc}

100618e6 <smp_debug_trudy__set_config>:
100618e6:	200c      	movs	r0, #12
100618e8:	4770      	bx	lr
	...

100618ec <smp_fsm_process_actions_wrt_state_tsk>:
100618ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100618ee:	2700      	movs	r7, #0
100618f0:	4b6b      	ldr	r3, [pc, #428]	@ (10061aa0 <__arm_cp.0_0>)
100618f2:	4a6c      	ldr	r2, [pc, #432]	@ (10061aa4 <__arm_cp.0_1>)
100618f4:	463d      	mov	r5, r7
100618f6:	6818      	ldr	r0, [r3, #0]
100618f8:	2134      	movs	r1, #52	@ 0x34
100618fa:	5c40      	ldrb	r0, [r0, r1]
100618fc:	4285      	cmp	r5, r0
100618fe:	d300      	bcc.n	10061902 <smp_fsm_process_actions_wrt_state_tsk+0x16>
10061900:	e0cd      	b.n	10061a9e <smp_fsm_process_actions_wrt_state_tsk+0x1b2>
10061902:	6810      	ldr	r0, [r2, #0]
10061904:	21a4      	movs	r1, #164	@ 0xa4
10061906:	5840      	ldr	r0, [r0, r1]
10061908:	2800      	cmp	r0, #0
1006190a:	d100      	bne.n	1006190e <smp_fsm_process_actions_wrt_state_tsk+0x22>
1006190c:	e0b2      	b.n	10061a74 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006190e:	19c4      	adds	r4, r0, r7
10061910:	8920      	ldrh	r0, [r4, #8]
10061912:	2800      	cmp	r0, #0
10061914:	d100      	bne.n	10061918 <smp_fsm_process_actions_wrt_state_tsk+0x2c>
10061916:	e0ad      	b.n	10061a74 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061918:	7aa0      	ldrb	r0, [r4, #10]
1006191a:	4601      	mov	r1, r0
1006191c:	39d1      	subs	r1, #209	@ 0xd1
1006191e:	2905      	cmp	r1, #5
10061920:	d35d      	bcc.n	100619de <smp_fsm_process_actions_wrt_state_tsk+0xf2>
10061922:	2800      	cmp	r0, #0
10061924:	d100      	bne.n	10061928 <smp_fsm_process_actions_wrt_state_tsk+0x3c>
10061926:	e0a5      	b.n	10061a74 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061928:	28fe      	cmp	r0, #254	@ 0xfe
1006192a:	d100      	bne.n	1006192e <smp_fsm_process_actions_wrt_state_tsk+0x42>
1006192c:	e08a      	b.n	10061a44 <smp_fsm_process_actions_wrt_state_tsk+0x158>
1006192e:	28a2      	cmp	r0, #162	@ 0xa2
10061930:	d059      	beq.n	100619e6 <smp_fsm_process_actions_wrt_state_tsk+0xfa>
10061932:	28aa      	cmp	r0, #170	@ 0xaa
10061934:	d100      	bne.n	10061938 <smp_fsm_process_actions_wrt_state_tsk+0x4c>
10061936:	e081      	b.n	10061a3c <smp_fsm_process_actions_wrt_state_tsk+0x150>
10061938:	28b2      	cmp	r0, #178	@ 0xb2
1006193a:	d054      	beq.n	100619e6 <smp_fsm_process_actions_wrt_state_tsk+0xfa>
1006193c:	28b4      	cmp	r0, #180	@ 0xb4
1006193e:	d100      	bne.n	10061942 <smp_fsm_process_actions_wrt_state_tsk+0x56>
10061940:	e08a      	b.n	10061a58 <smp_fsm_process_actions_wrt_state_tsk+0x16c>
10061942:	28ba      	cmp	r0, #186	@ 0xba
10061944:	d07a      	beq.n	10061a3c <smp_fsm_process_actions_wrt_state_tsk+0x150>
10061946:	28bf      	cmp	r0, #191	@ 0xbf
10061948:	d100      	bne.n	1006194c <smp_fsm_process_actions_wrt_state_tsk+0x60>
1006194a:	e089      	b.n	10061a60 <smp_fsm_process_actions_wrt_state_tsk+0x174>
1006194c:	28f0      	cmp	r0, #240	@ 0xf0
1006194e:	d100      	bne.n	10061952 <smp_fsm_process_actions_wrt_state_tsk+0x66>
10061950:	e08b      	b.n	10061a6a <smp_fsm_process_actions_wrt_state_tsk+0x17e>
10061952:	2810      	cmp	r0, #16
10061954:	d000      	beq.n	10061958 <smp_fsm_process_actions_wrt_state_tsk+0x6c>
10061956:	e090      	b.n	10061a7a <smp_fsm_process_actions_wrt_state_tsk+0x18e>
10061958:	2101      	movs	r1, #1
1006195a:	4620      	mov	r0, r4
1006195c:	f004 fcb8 	bl	100662d0 <smp_dep_sdb_find_bonding_record_by_conn_addr>
10061960:	2800      	cmp	r0, #0
10061962:	d100      	bne.n	10061966 <smp_fsm_process_actions_wrt_state_tsk+0x7a>
10061964:	e096      	b.n	10061a94 <smp_fsm_process_actions_wrt_state_tsk+0x1a8>
10061966:	2600      	movs	r6, #0
10061968:	72a6      	strb	r6, [r4, #10]
1006196a:	f7f4 fc5b 	bl	10056224 <GapIsPrivacySupported>
1006196e:	2800      	cmp	r0, #0
10061970:	4b4b      	ldr	r3, [pc, #300]	@ (10061aa0 <__arm_cp.0_0>)
10061972:	4a4c      	ldr	r2, [pc, #304]	@ (10061aa4 <__arm_cp.0_1>)
10061974:	d07e      	beq.n	10061a74 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061976:	2060      	movs	r0, #96	@ 0x60
10061978:	5c20      	ldrb	r0, [r4, r0]
1006197a:	07c0      	lsls	r0, r0, #31
1006197c:	d07a      	beq.n	10061a74 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006197e:	f004 fc18 	bl	100661b2 <smp_dep_sdb_get_bonding_records_count>
10061982:	4a48      	ldr	r2, [pc, #288]	@ (10061aa4 <__arm_cp.0_1>)
10061984:	4b46      	ldr	r3, [pc, #280]	@ (10061aa0 <__arm_cp.0_0>)
10061986:	2800      	cmp	r0, #0
10061988:	d074      	beq.n	10061a74 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006198a:	79e0      	ldrb	r0, [r4, #7]
1006198c:	21c0      	movs	r1, #192	@ 0xc0
1006198e:	4001      	ands	r1, r0
10061990:	2940      	cmp	r1, #64	@ 0x40
10061992:	d16f      	bne.n	10061a74 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061994:	4844      	ldr	r0, [pc, #272]	@ (10061aa8 <__arm_cp.0_2>)
10061996:	6800      	ldr	r0, [r0, #0]
10061998:	214f      	movs	r1, #79	@ 0x4f
1006199a:	5c40      	ldrb	r0, [r0, r1]
1006199c:	0700      	lsls	r0, r0, #28
1006199e:	d569      	bpl.n	10061a74 <smp_fsm_process_actions_wrt_state_tsk+0x188>
100619a0:	8924      	ldrh	r4, [r4, #8]
100619a2:	4842      	ldr	r0, [pc, #264]	@ (10061aac <__arm_cp.0_3>)
100619a4:	6800      	ldr	r0, [r0, #0]
100619a6:	6980      	ldr	r0, [r0, #24]
100619a8:	2248      	movs	r2, #72	@ 0x48
100619aa:	2102      	movs	r1, #2
100619ac:	460b      	mov	r3, r1
100619ae:	f7f3 fb9d 	bl	100550ec <aci_event_fifo_push_header>
100619b2:	4a3c      	ldr	r2, [pc, #240]	@ (10061aa4 <__arm_cp.0_1>)
100619b4:	4b3a      	ldr	r3, [pc, #232]	@ (10061aa0 <__arm_cp.0_0>)
100619b6:	2800      	cmp	r0, #0
100619b8:	d05c      	beq.n	10061a74 <smp_fsm_process_actions_wrt_state_tsk+0x188>
100619ba:	4601      	mov	r1, r0
100619bc:	2004      	movs	r0, #4
100619be:	7248      	strb	r0, [r1, #9]
100619c0:	2208      	movs	r2, #8
100619c2:	720a      	strb	r2, [r1, #8]
100619c4:	71ce      	strb	r6, [r1, #7]
100619c6:	7188      	strb	r0, [r1, #6]
100619c8:	728c      	strb	r4, [r1, #10]
100619ca:	20ff      	movs	r0, #255	@ 0xff
100619cc:	7148      	strb	r0, [r1, #5]
100619ce:	2082      	movs	r0, #130	@ 0x82
100619d0:	7108      	strb	r0, [r1, #4]
100619d2:	0a20      	lsrs	r0, r4, #8
100619d4:	72c8      	strb	r0, [r1, #11]
100619d6:	2002      	movs	r0, #2
100619d8:	f7f3 fc25 	bl	10055226 <aci_event_fifo_push>
100619dc:	e048      	b.n	10061a70 <smp_fsm_process_actions_wrt_state_tsk+0x184>
100619de:	4620      	mov	r0, r4
100619e0:	f005 fa2c 	bl	10066e3c <smp_pp3_keys_distribution_send>
100619e4:	e044      	b.n	10061a70 <smp_fsm_process_actions_wrt_state_tsk+0x184>
100619e6:	7de0      	ldrb	r0, [r4, #23]
100619e8:	2601      	movs	r6, #1
100619ea:	0700      	lsls	r0, r0, #28
100619ec:	4630      	mov	r0, r6
100619ee:	d513      	bpl.n	10061a18 <smp_fsm_process_actions_wrt_state_tsk+0x12c>
100619f0:	4620      	mov	r0, r4
100619f2:	f005 fd28 	bl	10067446 <smp_scp_public_key_prepare_and_exchange_ucfg_weak>
100619f6:	2800      	cmp	r0, #0
100619f8:	d006      	beq.n	10061a08 <smp_fsm_process_actions_wrt_state_tsk+0x11c>
100619fa:	2812      	cmp	r0, #18
100619fc:	d004      	beq.n	10061a08 <smp_fsm_process_actions_wrt_state_tsk+0x11c>
100619fe:	200e      	movs	r0, #14
10061a00:	f000 febe 	bl	10062780 <tsk_notify_idx>
10061a04:	f7f0 f83f 	bl	10051a86 <BLE_STACK_ProcessRequest>
10061a08:	7de0      	ldrb	r0, [r4, #23]
10061a0a:	2160      	movs	r1, #96	@ 0x60
10061a0c:	4001      	ands	r1, r0
10061a0e:	3960      	subs	r1, #96	@ 0x60
10061a10:	4248      	negs	r0, r1
10061a12:	4148      	adcs	r0, r1
10061a14:	4b22      	ldr	r3, [pc, #136]	@ (10061aa0 <__arm_cp.0_0>)
10061a16:	4a23      	ldr	r2, [pc, #140]	@ (10061aa4 <__arm_cp.0_1>)
10061a18:	7ce1      	ldrb	r1, [r4, #19]
10061a1a:	2902      	cmp	r1, #2
10061a1c:	d104      	bne.n	10061a28 <smp_fsm_process_actions_wrt_state_tsk+0x13c>
10061a1e:	7be1      	ldrb	r1, [r4, #15]
10061a20:	2210      	movs	r2, #16
10061a22:	400a      	ands	r2, r1
10061a24:	0916      	lsrs	r6, r2, #4
10061a26:	4a1f      	ldr	r2, [pc, #124]	@ (10061aa4 <__arm_cp.0_1>)
10061a28:	2800      	cmp	r0, #0
10061a2a:	d023      	beq.n	10061a74 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061a2c:	2e00      	cmp	r6, #0
10061a2e:	d021      	beq.n	10061a74 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061a30:	2060      	movs	r0, #96	@ 0x60
10061a32:	5c20      	ldrb	r0, [r4, r0]
10061a34:	07c0      	lsls	r0, r0, #31
10061a36:	d024      	beq.n	10061a82 <smp_fsm_process_actions_wrt_state_tsk+0x196>
10061a38:	204b      	movs	r0, #75	@ 0x4b
10061a3a:	e023      	b.n	10061a84 <smp_fsm_process_actions_wrt_state_tsk+0x198>
10061a3c:	4620      	mov	r0, r4
10061a3e:	f000 f837 	bl	10061ab0 <smp_fsm_execute_actions_scp_phase2as2_ucfg_weak>
10061a42:	e015      	b.n	10061a70 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061a44:	2060      	movs	r0, #96	@ 0x60
10061a46:	5620      	ldrsb	r0, [r4, r0]
10061a48:	2800      	cmp	r0, #0
10061a4a:	d513      	bpl.n	10061a74 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061a4c:	2100      	movs	r1, #0
10061a4e:	2270      	movs	r2, #112	@ 0x70
10061a50:	4620      	mov	r0, r4
10061a52:	f7f0 fe0f 	bl	10052674 <BLEPLAT_MemSet>
10061a56:	e00b      	b.n	10061a70 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061a58:	4620      	mov	r0, r4
10061a5a:	f005 f859 	bl	10066b10 <smp_pp2_per_auth_stage_1_start>
10061a5e:	e007      	b.n	10061a70 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061a60:	2100      	movs	r1, #0
10061a62:	4620      	mov	r0, r4
10061a64:	f005 f9a1 	bl	10066daa <smp_pp3_keys_distribution_start>
10061a68:	e002      	b.n	10061a70 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061a6a:	4620      	mov	r0, r4
10061a6c:	f004 fcb2 	bl	100663d4 <smp_pp3_pairing_completed_successful>
10061a70:	4a0c      	ldr	r2, [pc, #48]	@ (10061aa4 <__arm_cp.0_1>)
10061a72:	4b0b      	ldr	r3, [pc, #44]	@ (10061aa0 <__arm_cp.0_0>)
10061a74:	3770      	adds	r7, #112	@ 0x70
10061a76:	1c6d      	adds	r5, r5, #1
10061a78:	e73d      	b.n	100618f6 <smp_fsm_process_actions_wrt_state_tsk+0xa>
10061a7a:	4620      	mov	r0, r4
10061a7c:	f000 f819 	bl	10061ab2 <smp_fsm_execute_actions_excerpt_cei_ucfg_weak>
10061a80:	e00a      	b.n	10061a98 <smp_fsm_process_actions_wrt_state_tsk+0x1ac>
10061a82:	205b      	movs	r0, #91	@ 0x5b
10061a84:	43c0      	mvns	r0, r0
10061a86:	72a0      	strb	r0, [r4, #10]
10061a88:	200e      	movs	r0, #14
10061a8a:	f000 fe79 	bl	10062780 <tsk_notify_idx>
10061a8e:	f7ef fffa 	bl	10051a86 <BLE_STACK_ProcessRequest>
10061a92:	e001      	b.n	10061a98 <smp_fsm_process_actions_wrt_state_tsk+0x1ac>
10061a94:	20f1      	movs	r0, #241	@ 0xf1
10061a96:	72a0      	strb	r0, [r4, #10]
10061a98:	4b01      	ldr	r3, [pc, #4]	@ (10061aa0 <__arm_cp.0_0>)
10061a9a:	4a02      	ldr	r2, [pc, #8]	@ (10061aa4 <__arm_cp.0_1>)
10061a9c:	e7ea      	b.n	10061a74 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10061aa0 <__arm_cp.0_0>:
10061aa0:	2000241c 	.word	0x2000241c

10061aa4 <__arm_cp.0_1>:
10061aa4:	200024bc 	.word	0x200024bc

10061aa8 <__arm_cp.0_2>:
10061aa8:	20002470 	.word	0x20002470

10061aac <__arm_cp.0_3>:
10061aac:	20002420 	.word	0x20002420

10061ab0 <smp_fsm_execute_actions_scp_phase2as2_ucfg_weak>:
10061ab0:	4770      	bx	lr

10061ab2 <smp_fsm_execute_actions_excerpt_cei_ucfg_weak>:
10061ab2:	4770      	bx	lr

10061ab4 <smp_rxp_process_rxed_packets_tsk>:
10061ab4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10061ab6:	4f60      	ldr	r7, [pc, #384]	@ (10061c38 <__arm_cp.0_0>)
10061ab8:	4c60      	ldr	r4, [pc, #384]	@ (10061c3c <__arm_cp.0_1>)
10061aba:	6838      	ldr	r0, [r7, #0]
10061abc:	6801      	ldr	r1, [r0, #0]
10061abe:	2900      	cmp	r1, #0
10061ac0:	d100      	bne.n	10061ac4 <smp_rxp_process_rxed_packets_tsk+0x10>
10061ac2:	e0b8      	b.n	10061c36 <smp_rxp_process_rxed_packets_tsk+0x182>
10061ac4:	f001 f878 	bl	10062bb8 <ACL_list_remove_head>
10061ac8:	4605      	mov	r5, r0
10061aca:	8800      	ldrh	r0, [r0, #0]
10061acc:	f005 fc4c 	bl	10067368 <smp_get_remote_device_list_item>
10061ad0:	2800      	cmp	r0, #0
10061ad2:	d0f2      	beq.n	10061aba <smp_rxp_process_rxed_packets_tsk+0x6>
10061ad4:	4606      	mov	r6, r0
10061ad6:	6838      	ldr	r0, [r7, #0]
10061ad8:	21b0      	movs	r1, #176	@ 0xb0
10061ada:	5c40      	ldrb	r0, [r0, r1]
10061adc:	2800      	cmp	r0, #0
10061ade:	d00e      	beq.n	10061afe <smp_rxp_process_rxed_packets_tsk+0x4a>
10061ae0:	2108      	movs	r1, #8
10061ae2:	2200      	movs	r2, #0
10061ae4:	2301      	movs	r3, #1
10061ae6:	4630      	mov	r0, r6
10061ae8:	f004 fd2c 	bl	10066544 <smp_pp3_pairing_failed_send>
10061aec:	2800      	cmp	r0, #0
10061aee:	d00e      	beq.n	10061b0e <smp_rxp_process_rxed_packets_tsk+0x5a>
10061af0:	28fd      	cmp	r0, #253	@ 0xfd
10061af2:	d000      	beq.n	10061af6 <smp_rxp_process_rxed_packets_tsk+0x42>
10061af4:	e096      	b.n	10061c24 <smp_rxp_process_rxed_packets_tsk+0x170>
10061af6:	4628      	mov	r0, r5
10061af8:	f7f3 f944 	bl	10054d84 <ACL_pkt_release>
10061afc:	e7dd      	b.n	10061aba <smp_rxp_process_rxed_packets_tsk+0x6>
10061afe:	6868      	ldr	r0, [r5, #4]
10061b00:	7a00      	ldrb	r0, [r0, #8]
10061b02:	2805      	cmp	r0, #5
10061b04:	d10c      	bne.n	10061b20 <smp_rxp_process_rxed_packets_tsk+0x6c>
10061b06:	4628      	mov	r0, r5
10061b08:	4631      	mov	r1, r6
10061b0a:	f004 fcef 	bl	100664ec <smp_pp3_pairing_failed_receive>
10061b0e:	4628      	mov	r0, r5
10061b10:	f7f3 f938 	bl	10054d84 <ACL_pkt_release>
10061b14:	200e      	movs	r0, #14
10061b16:	f000 fe33 	bl	10062780 <tsk_notify_idx>
10061b1a:	f7ef ffb4 	bl	10051a86 <BLE_STACK_ProcessRequest>
10061b1e:	e7cc      	b.n	10061aba <smp_rxp_process_rxed_packets_tsk+0x6>
10061b20:	7ab1      	ldrb	r1, [r6, #10]
10061b22:	29f1      	cmp	r1, #241	@ 0xf1
10061b24:	d001      	beq.n	10061b2a <smp_rxp_process_rxed_packets_tsk+0x76>
10061b26:	2900      	cmp	r1, #0
10061b28:	d10a      	bne.n	10061b40 <smp_rxp_process_rxed_packets_tsk+0x8c>
10061b2a:	2160      	movs	r1, #96	@ 0x60
10061b2c:	5c72      	ldrb	r2, [r6, r1]
10061b2e:	2101      	movs	r1, #1
10061b30:	4011      	ands	r1, r2
10061b32:	d101      	bne.n	10061b38 <smp_rxp_process_rxed_packets_tsk+0x84>
10061b34:	280b      	cmp	r0, #11
10061b36:	d1de      	bne.n	10061af6 <smp_rxp_process_rxed_packets_tsk+0x42>
10061b38:	2900      	cmp	r1, #0
10061b3a:	d001      	beq.n	10061b40 <smp_rxp_process_rxed_packets_tsk+0x8c>
10061b3c:	2801      	cmp	r0, #1
10061b3e:	d1da      	bne.n	10061af6 <smp_rxp_process_rxed_packets_tsk+0x42>
10061b40:	7df0      	ldrb	r0, [r6, #23]
10061b42:	0700      	lsls	r0, r0, #28
10061b44:	d506      	bpl.n	10061b54 <smp_rxp_process_rxed_packets_tsk+0xa0>
10061b46:	9602      	str	r6, [sp, #8]
10061b48:	9501      	str	r5, [sp, #4]
10061b4a:	a801      	add	r0, sp, #4
10061b4c:	f000 f894 	bl	10061c78 <smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg_weak>
10061b50:	28fc      	cmp	r0, #252	@ 0xfc
10061b52:	d1cb      	bne.n	10061aec <smp_rxp_process_rxed_packets_tsk+0x38>
10061b54:	2060      	movs	r0, #96	@ 0x60
10061b56:	5c30      	ldrb	r0, [r6, r0]
10061b58:	07c0      	lsls	r0, r0, #31
10061b5a:	d107      	bne.n	10061b6c <smp_rxp_process_rxed_packets_tsk+0xb8>
10061b5c:	9602      	str	r6, [sp, #8]
10061b5e:	9501      	str	r5, [sp, #4]
10061b60:	a801      	add	r0, sp, #4
10061b62:	f000 f88b 	bl	10061c7c <smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak>
10061b66:	28fc      	cmp	r0, #252	@ 0xfc
10061b68:	d1c0      	bne.n	10061aec <smp_rxp_process_rxed_packets_tsk+0x38>
10061b6a:	e022      	b.n	10061bb2 <smp_rxp_process_rxed_packets_tsk+0xfe>
10061b6c:	6868      	ldr	r0, [r5, #4]
10061b6e:	7a00      	ldrb	r0, [r0, #8]
10061b70:	2804      	cmp	r0, #4
10061b72:	d031      	beq.n	10061bd8 <smp_rxp_process_rxed_packets_tsk+0x124>
10061b74:	2803      	cmp	r0, #3
10061b76:	d037      	beq.n	10061be8 <smp_rxp_process_rxed_packets_tsk+0x134>
10061b78:	2801      	cmp	r0, #1
10061b7a:	d11a      	bne.n	10061bb2 <smp_rxp_process_rxed_packets_tsk+0xfe>
10061b7c:	7ab0      	ldrb	r0, [r6, #10]
10061b7e:	2800      	cmp	r0, #0
10061b80:	d003      	beq.n	10061b8a <smp_rxp_process_rxed_packets_tsk+0xd6>
10061b82:	28fb      	cmp	r0, #251	@ 0xfb
10061b84:	d047      	beq.n	10061c16 <smp_rxp_process_rxed_packets_tsk+0x162>
10061b86:	28f1      	cmp	r0, #241	@ 0xf1
10061b88:	d1b5      	bne.n	10061af6 <smp_rxp_process_rxed_packets_tsk+0x42>
10061b8a:	8930      	ldrh	r0, [r6, #8]
10061b8c:	f005 fbcc 	bl	10067328 <smp_get_remote_device_list_index>
10061b90:	4602      	mov	r2, r0
10061b92:	2000      	movs	r0, #0
10061b94:	4601      	mov	r1, r0
10061b96:	4623      	mov	r3, r4
10061b98:	f000 f88e 	bl	10061cb8 <smp_timer_reset>
10061b9c:	7e30      	ldrb	r0, [r6, #24]
10061b9e:	0781      	lsls	r1, r0, #30
10061ba0:	d502      	bpl.n	10061ba8 <smp_rxp_process_rxed_packets_tsk+0xf4>
10061ba2:	2103      	movs	r1, #3
10061ba4:	4308      	orrs	r0, r1
10061ba6:	7630      	strb	r0, [r6, #24]
10061ba8:	4628      	mov	r0, r5
10061baa:	4631      	mov	r1, r6
10061bac:	f004 fe9e 	bl	100668ec <smp_pp1_per_rxp_pairing_request>
10061bb0:	e7d9      	b.n	10061b66 <smp_rxp_process_rxed_packets_tsk+0xb2>
10061bb2:	4628      	mov	r0, r5
10061bb4:	4631      	mov	r1, r6
10061bb6:	f005 fa0f 	bl	10066fd8 <smp_pp3_keys_distribution_receive>
10061bba:	28fc      	cmp	r0, #252	@ 0xfc
10061bbc:	d003      	beq.n	10061bc6 <smp_rxp_process_rxed_packets_tsk+0x112>
10061bbe:	2886      	cmp	r0, #134	@ 0x86
10061bc0:	d099      	beq.n	10061af6 <smp_rxp_process_rxed_packets_tsk+0x42>
10061bc2:	2884      	cmp	r0, #132	@ 0x84
10061bc4:	d192      	bne.n	10061aec <smp_rxp_process_rxed_packets_tsk+0x38>
10061bc6:	7df0      	ldrb	r0, [r6, #23]
10061bc8:	0700      	lsls	r0, r0, #28
10061bca:	d594      	bpl.n	10061af6 <smp_rxp_process_rxed_packets_tsk+0x42>
10061bcc:	9602      	str	r6, [sp, #8]
10061bce:	9501      	str	r5, [sp, #4]
10061bd0:	a801      	add	r0, sp, #4
10061bd2:	f000 f84f 	bl	10061c74 <smp_rxp_process_exception_cases_excerpt_scp_ucfg_weak>
10061bd6:	e789      	b.n	10061aec <smp_rxp_process_rxed_packets_tsk+0x38>
10061bd8:	7ab0      	ldrb	r0, [r6, #10]
10061bda:	28b6      	cmp	r0, #182	@ 0xb6
10061bdc:	d18b      	bne.n	10061af6 <smp_rxp_process_rxed_packets_tsk+0x42>
10061bde:	4628      	mov	r0, r5
10061be0:	4631      	mov	r1, r6
10061be2:	f005 f84d 	bl	10066c80 <smp_pp2_per_rx_process_pairing_random>
10061be6:	e7be      	b.n	10061b66 <smp_rxp_process_rxed_packets_tsk+0xb2>
10061be8:	7ab0      	ldrb	r0, [r6, #10]
10061bea:	28b2      	cmp	r0, #178	@ 0xb2
10061bec:	d009      	beq.n	10061c02 <smp_rxp_process_rxed_packets_tsk+0x14e>
10061bee:	28b4      	cmp	r0, #180	@ 0xb4
10061bf0:	d007      	beq.n	10061c02 <smp_rxp_process_rxed_packets_tsk+0x14e>
10061bf2:	28b5      	cmp	r0, #181	@ 0xb5
10061bf4:	d000      	beq.n	10061bf8 <smp_rxp_process_rxed_packets_tsk+0x144>
10061bf6:	e77e      	b.n	10061af6 <smp_rxp_process_rxed_packets_tsk+0x42>
10061bf8:	4628      	mov	r0, r5
10061bfa:	4631      	mov	r1, r6
10061bfc:	f004 ff4a 	bl	10066a94 <smp_pp2_per_rx_process_pairing_confirm>
10061c00:	e7b1      	b.n	10061b66 <smp_rxp_process_rxed_packets_tsk+0xb2>
10061c02:	7cf0      	ldrb	r0, [r6, #19]
10061c04:	2802      	cmp	r0, #2
10061c06:	d000      	beq.n	10061c0a <smp_rxp_process_rxed_packets_tsk+0x156>
10061c08:	e775      	b.n	10061af6 <smp_rxp_process_rxed_packets_tsk+0x42>
10061c0a:	6838      	ldr	r0, [r7, #0]
10061c0c:	2140      	movs	r1, #64	@ 0x40
10061c0e:	5c41      	ldrb	r1, [r0, r1]
10061c10:	2903      	cmp	r1, #3
10061c12:	d108      	bne.n	10061c26 <smp_rxp_process_rxed_packets_tsk+0x172>
10061c14:	e76f      	b.n	10061af6 <smp_rxp_process_rxed_packets_tsk+0x42>
10061c16:	2109      	movs	r1, #9
10061c18:	2200      	movs	r2, #0
10061c1a:	2301      	movs	r3, #1
10061c1c:	4630      	mov	r0, r6
10061c1e:	f004 fc91 	bl	10066544 <smp_pp3_pairing_failed_send>
10061c22:	e7a0      	b.n	10061b66 <smp_rxp_process_rxed_packets_tsk+0xb2>
10061c24:	6838      	ldr	r0, [r7, #0]
10061c26:	4629      	mov	r1, r5
10061c28:	f000 ffa7 	bl	10062b7a <ACL_list_insert_head>
10061c2c:	200f      	movs	r0, #15
10061c2e:	f000 fda7 	bl	10062780 <tsk_notify_idx>
10061c32:	f7ef ff28 	bl	10051a86 <BLE_STACK_ProcessRequest>
10061c36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10061c38 <__arm_cp.0_0>:
10061c38:	200024bc 	.word	0x200024bc

10061c3c <__arm_cp.0_1>:
10061c3c:	00007530 	.word	0x00007530

10061c40 <smp_rxp_flush_packet_queues>:
10061c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10061c42:	4d0a      	ldr	r5, [pc, #40]	@ (10061c6c <__arm_cp.4_0>)
10061c44:	4005      	ands	r5, r0
10061c46:	4e0a      	ldr	r6, [pc, #40]	@ (10061c70 <__arm_cp.4_1>)
10061c48:	6830      	ldr	r0, [r6, #0]
10061c4a:	6807      	ldr	r7, [r0, #0]
10061c4c:	2f00      	cmp	r7, #0
10061c4e:	d00c      	beq.n	10061c6a <smp_rxp_flush_packet_queues+0x2a>
10061c50:	463c      	mov	r4, r7
10061c52:	69ff      	ldr	r7, [r7, #28]
10061c54:	8820      	ldrh	r0, [r4, #0]
10061c56:	42a8      	cmp	r0, r5
10061c58:	d1f8      	bne.n	10061c4c <smp_rxp_flush_packet_queues+0xc>
10061c5a:	6830      	ldr	r0, [r6, #0]
10061c5c:	4621      	mov	r1, r4
10061c5e:	f000 ff95 	bl	10062b8c <ACL_list_remove>
10061c62:	4620      	mov	r0, r4
10061c64:	f7f3 f88e 	bl	10054d84 <ACL_pkt_release>
10061c68:	e7f0      	b.n	10061c4c <smp_rxp_flush_packet_queues+0xc>
10061c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10061c6c <__arm_cp.4_0>:
10061c6c:	00000fff 	.word	0x00000fff

10061c70 <__arm_cp.4_1>:
10061c70:	200024bc 	.word	0x200024bc

10061c74 <smp_rxp_process_exception_cases_excerpt_scp_ucfg_weak>:
10061c74:	201f      	movs	r0, #31
10061c76:	4770      	bx	lr

10061c78 <smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg_weak>:
10061c78:	201f      	movs	r0, #31
10061c7a:	4770      	bx	lr

10061c7c <smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak>:
10061c7c:	201f      	movs	r0, #31
10061c7e:	4770      	bx	lr

10061c80 <smp_timer_init>:
10061c80:	b580      	push	{r7, lr}
10061c82:	4806      	ldr	r0, [pc, #24]	@ (10061c9c <__arm_cp.0_0>)
10061c84:	7ac1      	ldrb	r1, [r0, #11]
10061c86:	4806      	ldr	r0, [pc, #24]	@ (10061ca0 <__arm_cp.0_1>)
10061c88:	6800      	ldr	r0, [r0, #0]
10061c8a:	3008      	adds	r0, #8
10061c8c:	1cc9      	adds	r1, r1, #3
10061c8e:	b2c9      	uxtb	r1, r1
10061c90:	4a04      	ldr	r2, [pc, #16]	@ (10061ca4 <__arm_cp.0_2>)
10061c92:	2307      	movs	r3, #7
10061c94:	f000 fdd2 	bl	1006283c <CST_init>
10061c98:	bd80      	pop	{r7, pc}
10061c9a:	46c0      	nop			@ (mov r8, r8)

10061c9c <__arm_cp.0_0>:
10061c9c:	20002484 	.word	0x20002484

10061ca0 <__arm_cp.0_1>:
10061ca0:	200024bc 	.word	0x200024bc

10061ca4 <__arm_cp.0_2>:
10061ca4:	10061ca9 	.word	0x10061ca9

10061ca8 <smp_timers_cb_wrapper>:
10061ca8:	b580      	push	{r7, lr}
10061caa:	6940      	ldr	r0, [r0, #20]
10061cac:	4901      	ldr	r1, [pc, #4]	@ (10061cb4 <__arm_cp.1_0>)
10061cae:	f000 fe9e 	bl	100629ee <cst_sharedCallback>
10061cb2:	bd80      	pop	{r7, pc}

10061cb4 <__arm_cp.1_0>:
10061cb4:	10061d51 	.word	0x10061d51

10061cb8 <smp_timer_reset>:
10061cb8:	b510      	push	{r4, lr}
10061cba:	2900      	cmp	r1, #0
10061cbc:	d006      	beq.n	10061ccc <smp_timer_reset+0x14>
10061cbe:	2486      	movs	r4, #134	@ 0x86
10061cc0:	2901      	cmp	r1, #1
10061cc2:	d11b      	bne.n	10061cfc <smp_timer_reset+0x44>
10061cc4:	2a02      	cmp	r2, #2
10061cc6:	d819      	bhi.n	10061cfc <smp_timer_reset+0x44>
10061cc8:	2100      	movs	r1, #0
10061cca:	e000      	b.n	10061cce <smp_timer_reset+0x16>
10061ccc:	2103      	movs	r1, #3
10061cce:	2801      	cmp	r0, #1
10061cd0:	d00a      	beq.n	10061ce8 <smp_timer_reset+0x30>
10061cd2:	2800      	cmp	r0, #0
10061cd4:	d111      	bne.n	10061cfa <smp_timer_reset+0x42>
10061cd6:	1888      	adds	r0, r1, r2
10061cd8:	b2c1      	uxtb	r1, r0
10061cda:	4809      	ldr	r0, [pc, #36]	@ (10061d00 <__arm_cp.2_0>)
10061cdc:	6800      	ldr	r0, [r0, #0]
10061cde:	3008      	adds	r0, #8
10061ce0:	2201      	movs	r2, #1
10061ce2:	f000 fdf6 	bl	100628d2 <CST_start>
10061ce6:	e006      	b.n	10061cf6 <smp_timer_reset+0x3e>
10061ce8:	1888      	adds	r0, r1, r2
10061cea:	b2c1      	uxtb	r1, r0
10061cec:	4804      	ldr	r0, [pc, #16]	@ (10061d00 <__arm_cp.2_0>)
10061cee:	6800      	ldr	r0, [r0, #0]
10061cf0:	3008      	adds	r0, #8
10061cf2:	f000 fdb8 	bl	10062866 <CST_stop>
10061cf6:	4604      	mov	r4, r0
10061cf8:	e000      	b.n	10061cfc <smp_timer_reset+0x44>
10061cfa:	2400      	movs	r4, #0
10061cfc:	4620      	mov	r0, r4
10061cfe:	bd10      	pop	{r4, pc}

10061d00 <__arm_cp.2_0>:
10061d00:	200024bc 	.word	0x200024bc

10061d04 <smp_timers_protocol_timeout_cb>:
10061d04:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10061d06:	4605      	mov	r5, r0
10061d08:	2070      	movs	r0, #112	@ 0x70
10061d0a:	9002      	str	r0, [sp, #8]
10061d0c:	4345      	muls	r5, r0
10061d0e:	480f      	ldr	r0, [pc, #60]	@ (10061d4c <__arm_cp.3_0>)
10061d10:	6800      	ldr	r0, [r0, #0]
10061d12:	21a4      	movs	r1, #164	@ 0xa4
10061d14:	9101      	str	r1, [sp, #4]
10061d16:	5840      	ldr	r0, [r0, r1]
10061d18:	1947      	adds	r7, r0, r5
10061d1a:	8939      	ldrh	r1, [r7, #8]
10061d1c:	2002      	movs	r0, #2
10061d1e:	2401      	movs	r4, #1
10061d20:	2600      	movs	r6, #0
10061d22:	4622      	mov	r2, r4
10061d24:	4633      	mov	r3, r6
10061d26:	f002 f995 	bl	10064054 <aci_gap_pairing_complete_event_push_noinline>
10061d2a:	4638      	mov	r0, r7
10061d2c:	4621      	mov	r1, r4
10061d2e:	f004 fbb9 	bl	100664a4 <smp_pp3_pairing_completed_update_stats>
10061d32:	8938      	ldrh	r0, [r7, #8]
10061d34:	f7ff ff84 	bl	10061c40 <smp_rxp_flush_packet_queues>
10061d38:	4804      	ldr	r0, [pc, #16]	@ (10061d4c <__arm_cp.3_0>)
10061d3a:	6800      	ldr	r0, [r0, #0]
10061d3c:	9901      	ldr	r1, [sp, #4]
10061d3e:	5840      	ldr	r0, [r0, r1]
10061d40:	1940      	adds	r0, r0, r5
10061d42:	4631      	mov	r1, r6
10061d44:	9a02      	ldr	r2, [sp, #8]
10061d46:	f7f0 fc95 	bl	10052674 <BLEPLAT_MemSet>
10061d4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10061d4c <__arm_cp.3_0>:
10061d4c:	200024bc 	.word	0x200024bc

10061d50 <smp_timers_cb>:
10061d50:	b580      	push	{r7, lr}
10061d52:	2802      	cmp	r0, #2
10061d54:	d802      	bhi.n	10061d5c <smp_timers_cb+0xc>
10061d56:	f005 fa57 	bl	10067208 <smp_cmn_repeated_attacks_timer_cb>
10061d5a:	bd80      	pop	{r7, pc}
10061d5c:	4904      	ldr	r1, [pc, #16]	@ (10061d70 <__arm_cp.4_0>)
10061d5e:	7ac9      	ldrb	r1, [r1, #11]
10061d60:	1cc9      	adds	r1, r1, #3
10061d62:	4281      	cmp	r1, r0
10061d64:	d903      	bls.n	10061d6e <smp_timers_cb+0x1e>
10061d66:	1ec0      	subs	r0, r0, #3
10061d68:	b2c0      	uxtb	r0, r0
10061d6a:	f7ff ffcb 	bl	10061d04 <smp_timers_protocol_timeout_cb>
10061d6e:	bd80      	pop	{r7, pc}

10061d70 <__arm_cp.4_0>:
10061d70:	20002484 	.word	0x20002484

10061d74 <smp_init>:
10061d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10061d76:	2029      	movs	r0, #41	@ 0x29
10061d78:	00c1      	lsls	r1, r0, #3
10061d7a:	2401      	movs	r4, #1
10061d7c:	4d20      	ldr	r5, [pc, #128]	@ (10061e00 <__arm_cp.0_0>)
10061d7e:	4620      	mov	r0, r4
10061d80:	47a8      	blx	r5
10061d82:	4e20      	ldr	r6, [pc, #128]	@ (10061e04 <__arm_cp.0_1>)
10061d84:	6030      	str	r0, [r6, #0]
10061d86:	4f20      	ldr	r7, [pc, #128]	@ (10061e08 <__arm_cp.0_2>)
10061d88:	7af8      	ldrb	r0, [r7, #11]
10061d8a:	2170      	movs	r1, #112	@ 0x70
10061d8c:	47a8      	blx	r5
10061d8e:	6831      	ldr	r1, [r6, #0]
10061d90:	22a4      	movs	r2, #164	@ 0xa4
10061d92:	5088      	str	r0, [r1, r2]
10061d94:	f005 f9c0 	bl	10067118 <smp_cmn_rejectlist_init>
10061d98:	2128      	movs	r1, #40	@ 0x28
10061d9a:	4620      	mov	r0, r4
10061d9c:	47a8      	blx	r5
10061d9e:	6831      	ldr	r1, [r6, #0]
10061da0:	22ac      	movs	r2, #172	@ 0xac
10061da2:	5088      	str	r0, [r1, r2]
10061da4:	7af8      	ldrb	r0, [r7, #11]
10061da6:	1cc0      	adds	r0, r0, #3
10061da8:	b2c0      	uxtb	r0, r0
10061daa:	1c41      	adds	r1, r0, #1
10061dac:	4d17      	ldr	r5, [pc, #92]	@ (10061e0c <__arm_cp.0_3>)
10061dae:	4628      	mov	r0, r5
10061db0:	4622      	mov	r2, r4
10061db2:	f7fe fefd 	bl	10060bb0 <csmem_mem_assign>
10061db6:	6831      	ldr	r1, [r6, #0]
10061db8:	6288      	str	r0, [r1, #40]	@ 0x28
10061dba:	7af8      	ldrb	r0, [r7, #11]
10061dbc:	1cc0      	adds	r0, r0, #3
10061dbe:	b2c1      	uxtb	r1, r0
10061dc0:	2202      	movs	r2, #2
10061dc2:	4628      	mov	r0, r5
10061dc4:	f7fe fef4 	bl	10060bb0 <csmem_mem_assign>
10061dc8:	6831      	ldr	r1, [r6, #0]
10061dca:	62c8      	str	r0, [r1, #44]	@ 0x2c
10061dcc:	4608      	mov	r0, r1
10061dce:	f000 fec9 	bl	10062b64 <ACL_list_init>
10061dd2:	f7ff ff55 	bl	10061c80 <smp_timer_init>
10061dd6:	6830      	ldr	r0, [r6, #0]
10061dd8:	2142      	movs	r1, #66	@ 0x42
10061dda:	2500      	movs	r5, #0
10061ddc:	5245      	strh	r5, [r0, r1]
10061dde:	2140      	movs	r1, #64	@ 0x40
10061de0:	2203      	movs	r2, #3
10061de2:	5442      	strb	r2, [r0, r1]
10061de4:	490a      	ldr	r1, [pc, #40]	@ (10061e10 <__arm_cp.0_4>)
10061de6:	6304      	str	r4, [r0, #48]	@ 0x30
10061de8:	6341      	str	r1, [r0, #52]	@ 0x34
10061dea:	6385      	str	r5, [r0, #56]	@ 0x38
10061dec:	3044      	adds	r0, #68	@ 0x44
10061dee:	2110      	movs	r1, #16
10061df0:	462a      	mov	r2, r5
10061df2:	f000 ffec 	bl	10062dce <HAL_Generate_Random_Bytes_To>
10061df6:	4628      	mov	r0, r5
10061df8:	f005 fb22 	bl	10067440 <smp_scp_init_ucfg_weak>
10061dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10061dfe:	46c0      	nop			@ (mov r8, r8)

10061e00 <__arm_cp.0_0>:
10061e00:	10060bd5 	.word	0x10060bd5

10061e04 <__arm_cp.0_1>:
10061e04:	200024bc 	.word	0x200024bc

10061e08 <__arm_cp.0_2>:
10061e08:	20002484 	.word	0x20002484

10061e0c <__arm_cp.0_3>:
10061e0c:	20002480 	.word	0x20002480

10061e10 <__arm_cp.0_4>:
10061e10:	07071007 	.word	0x07071007

10061e14 <smp_sap_aci_set_io_capabilities>:
10061e14:	b510      	push	{r4, lr}
10061e16:	4604      	mov	r4, r0
10061e18:	f000 f80c 	bl	10061e34 <smp_check_is_any_pairing_ongoing>
10061e1c:	2800      	cmp	r0, #0
10061e1e:	d001      	beq.n	10061e24 <smp_sap_aci_set_io_capabilities+0x10>
10061e20:	200c      	movs	r0, #12
10061e22:	bd10      	pop	{r4, pc}
10061e24:	4802      	ldr	r0, [pc, #8]	@ (10061e30 <__arm_cp.2_0>)
10061e26:	6800      	ldr	r0, [r0, #0]
10061e28:	2140      	movs	r1, #64	@ 0x40
10061e2a:	5444      	strb	r4, [r0, r1]
10061e2c:	2000      	movs	r0, #0
10061e2e:	bd10      	pop	{r4, pc}

10061e30 <__arm_cp.2_0>:
10061e30:	200024bc 	.word	0x200024bc

10061e34 <smp_check_is_any_pairing_ongoing>:
10061e34:	b570      	push	{r4, r5, r6, lr}
10061e36:	4810      	ldr	r0, [pc, #64]	@ (10061e78 <__arm_cp.3_0>)
10061e38:	6800      	ldr	r0, [r0, #0]
10061e3a:	2134      	movs	r1, #52	@ 0x34
10061e3c:	5c40      	ldrb	r0, [r0, r1]
10061e3e:	2170      	movs	r1, #112	@ 0x70
10061e40:	4341      	muls	r1, r0
10061e42:	480e      	ldr	r0, [pc, #56]	@ (10061e7c <__arm_cp.3_1>)
10061e44:	6802      	ldr	r2, [r0, #0]
10061e46:	32a4      	adds	r2, #164	@ 0xa4
10061e48:	2000      	movs	r0, #0
10061e4a:	4603      	mov	r3, r0
10061e4c:	4299      	cmp	r1, r3
10061e4e:	d012      	beq.n	10061e76 <smp_check_is_any_pairing_ongoing+0x42>
10061e50:	6814      	ldr	r4, [r2, #0]
10061e52:	18e5      	adds	r5, r4, r3
10061e54:	7aac      	ldrb	r4, [r5, #10]
10061e56:	2660      	movs	r6, #96	@ 0x60
10061e58:	5dad      	ldrb	r5, [r5, r6]
10061e5a:	07ed      	lsls	r5, r5, #31
10061e5c:	d104      	bne.n	10061e68 <smp_check_is_any_pairing_ongoing+0x34>
10061e5e:	3460      	adds	r4, #96	@ 0x60
10061e60:	b2e4      	uxtb	r4, r4
10061e62:	2c51      	cmp	r4, #81	@ 0x51
10061e64:	d204      	bcs.n	10061e70 <smp_check_is_any_pairing_ongoing+0x3c>
10061e66:	e005      	b.n	10061e74 <smp_check_is_any_pairing_ongoing+0x40>
10061e68:	3450      	adds	r4, #80	@ 0x50
10061e6a:	b2e4      	uxtb	r4, r4
10061e6c:	2c41      	cmp	r4, #65	@ 0x41
10061e6e:	d301      	bcc.n	10061e74 <smp_check_is_any_pairing_ongoing+0x40>
10061e70:	3370      	adds	r3, #112	@ 0x70
10061e72:	e7eb      	b.n	10061e4c <smp_check_is_any_pairing_ongoing+0x18>
10061e74:	2001      	movs	r0, #1
10061e76:	bd70      	pop	{r4, r5, r6, pc}

10061e78 <__arm_cp.3_0>:
10061e78:	2000241c 	.word	0x2000241c

10061e7c <__arm_cp.3_1>:
10061e7c:	200024bc 	.word	0x200024bc

10061e80 <smp_sap_aci_set_authentication_req>:
10061e80:	b510      	push	{r4, lr}
10061e82:	4604      	mov	r4, r0
10061e84:	f7ff ffd6 	bl	10061e34 <smp_check_is_any_pairing_ongoing>
10061e88:	7861      	ldrb	r1, [r4, #1]
10061e8a:	2901      	cmp	r1, #1
10061e8c:	d103      	bne.n	10061e96 <smp_sap_aci_set_authentication_req+0x16>
10061e8e:	2800      	cmp	r0, #0
10061e90:	d105      	bne.n	10061e9e <smp_sap_aci_set_authentication_req+0x1e>
10061e92:	4602      	mov	r2, r0
10061e94:	e004      	b.n	10061ea0 <smp_sap_aci_set_authentication_req+0x20>
10061e96:	2800      	cmp	r0, #0
10061e98:	d00f      	beq.n	10061eba <smp_sap_aci_set_authentication_req+0x3a>
10061e9a:	220c      	movs	r2, #12
10061e9c:	e016      	b.n	10061ecc <smp_sap_aci_set_authentication_req+0x4c>
10061e9e:	220c      	movs	r2, #12
10061ea0:	490b      	ldr	r1, [pc, #44]	@ (10061ed0 <__arm_cp.4_0>)
10061ea2:	6809      	ldr	r1, [r1, #0]
10061ea4:	2340      	movs	r3, #64	@ 0x40
10061ea6:	5ccb      	ldrb	r3, [r1, r3]
10061ea8:	2b03      	cmp	r3, #3
10061eaa:	d101      	bne.n	10061eb0 <smp_sap_aci_set_authentication_req+0x30>
10061eac:	226e      	movs	r2, #110	@ 0x6e
10061eae:	43d2      	mvns	r2, r2
10061eb0:	2b03      	cmp	r3, #3
10061eb2:	d00b      	beq.n	10061ecc <smp_sap_aci_set_authentication_req+0x4c>
10061eb4:	2800      	cmp	r0, #0
10061eb6:	d002      	beq.n	10061ebe <smp_sap_aci_set_authentication_req+0x3e>
10061eb8:	e008      	b.n	10061ecc <smp_sap_aci_set_authentication_req+0x4c>
10061eba:	4805      	ldr	r0, [pc, #20]	@ (10061ed0 <__arm_cp.4_0>)
10061ebc:	6801      	ldr	r1, [r0, #0]
10061ebe:	3130      	adds	r1, #48	@ 0x30
10061ec0:	2210      	movs	r2, #16
10061ec2:	4608      	mov	r0, r1
10061ec4:	4621      	mov	r1, r4
10061ec6:	f7f0 fbc5 	bl	10052654 <BLEPLAT_MemCpy>
10061eca:	2200      	movs	r2, #0
10061ecc:	b2d0      	uxtb	r0, r2
10061ece:	bd10      	pop	{r4, pc}

10061ed0 <__arm_cp.4_0>:
10061ed0:	200024bc 	.word	0x200024bc

10061ed4 <smp_sap_aci_passkey_response>:
10061ed4:	b510      	push	{r4, lr}
10061ed6:	460c      	mov	r4, r1
10061ed8:	f005 fa46 	bl	10067368 <smp_get_remote_device_list_item>
10061edc:	2800      	cmp	r0, #0
10061ede:	d010      	beq.n	10061f02 <smp_sap_aci_passkey_response+0x2e>
10061ee0:	7cc1      	ldrb	r1, [r0, #19]
10061ee2:	2902      	cmp	r1, #2
10061ee4:	d10f      	bne.n	10061f06 <smp_sap_aci_passkey_response+0x32>
10061ee6:	4909      	ldr	r1, [pc, #36]	@ (10061f0c <__arm_cp.5_0>)
10061ee8:	6809      	ldr	r1, [r1, #0]
10061eea:	638c      	str	r4, [r1, #56]	@ 0x38
10061eec:	7bc1      	ldrb	r1, [r0, #15]
10061eee:	2210      	movs	r2, #16
10061ef0:	430a      	orrs	r2, r1
10061ef2:	73c2      	strb	r2, [r0, #15]
10061ef4:	200e      	movs	r0, #14
10061ef6:	f000 fc43 	bl	10062780 <tsk_notify_idx>
10061efa:	f7ef fdc4 	bl	10051a86 <BLE_STACK_ProcessRequest>
10061efe:	2000      	movs	r0, #0
10061f00:	bd10      	pop	{r4, pc}
10061f02:	2002      	movs	r0, #2
10061f04:	bd10      	pop	{r4, pc}
10061f06:	200c      	movs	r0, #12
10061f08:	bd10      	pop	{r4, pc}
10061f0a:	46c0      	nop			@ (mov r8, r8)

10061f0c <__arm_cp.5_0>:
10061f0c:	200024bc 	.word	0x200024bc

10061f10 <smp_sap_hci_le_connection_complete_evt_hndl>:
10061f10:	b5f0      	push	{r4, r5, r6, r7, lr}
10061f12:	b089      	sub	sp, #36	@ 0x24
10061f14:	9304      	str	r3, [sp, #16]
10061f16:	4615      	mov	r5, r2
10061f18:	9105      	str	r1, [sp, #20]
10061f1a:	4607      	mov	r7, r0
10061f1c:	ae06      	add	r6, sp, #24
10061f1e:	ac08      	add	r4, sp, #32
10061f20:	4630      	mov	r0, r6
10061f22:	4621      	mov	r1, r4
10061f24:	f7f4 fa28 	bl	10056378 <GAP_get_current_address>
10061f28:	7822      	ldrb	r2, [r4, #0]
10061f2a:	2000      	movs	r0, #0
10061f2c:	9500      	str	r5, [sp, #0]
10061f2e:	9904      	ldr	r1, [sp, #16]
10061f30:	9101      	str	r1, [sp, #4]
10061f32:	9002      	str	r0, [sp, #8]
10061f34:	4638      	mov	r0, r7
10061f36:	9905      	ldr	r1, [sp, #20]
10061f38:	4633      	mov	r3, r6
10061f3a:	f000 f803 	bl	10061f44 <smp_connection_complete_handler>
10061f3e:	b009      	add	sp, #36	@ 0x24
10061f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10061f44 <smp_connection_complete_handler>:
10061f44:	b5f0      	push	{r4, r5, r6, r7, lr}
10061f46:	b087      	sub	sp, #28
10061f48:	9302      	str	r3, [sp, #8]
10061f4a:	9200      	str	r2, [sp, #0]
10061f4c:	9101      	str	r1, [sp, #4]
10061f4e:	493a      	ldr	r1, [pc, #232]	@ (10062038 <__arm_cp.1_0>)
10061f50:	6809      	ldr	r1, [r1, #0]
10061f52:	2334      	movs	r3, #52	@ 0x34
10061f54:	5cca      	ldrb	r2, [r1, r3]
10061f56:	2770      	movs	r7, #112	@ 0x70
10061f58:	4357      	muls	r7, r2
10061f5a:	2500      	movs	r5, #0
10061f5c:	43ec      	mvns	r4, r5
10061f5e:	4b37      	ldr	r3, [pc, #220]	@ (1006203c <__arm_cp.1_1>)
10061f60:	681e      	ldr	r6, [r3, #0]
10061f62:	36a4      	adds	r6, #164	@ 0xa4
10061f64:	990c      	ldr	r1, [sp, #48]	@ 0x30
10061f66:	9106      	str	r1, [sp, #24]
10061f68:	990e      	ldr	r1, [sp, #56]	@ 0x38
10061f6a:	9103      	str	r1, [sp, #12]
10061f6c:	990d      	ldr	r1, [sp, #52]	@ 0x34
10061f6e:	9105      	str	r1, [sp, #20]
10061f70:	9404      	str	r4, [sp, #16]
10061f72:	42af      	cmp	r7, r5
10061f74:	d05e      	beq.n	10062034 <smp_connection_complete_handler+0xf0>
10061f76:	6833      	ldr	r3, [r6, #0]
10061f78:	1959      	adds	r1, r3, r5
10061f7a:	8909      	ldrh	r1, [r1, #8]
10061f7c:	3570      	adds	r5, #112	@ 0x70
10061f7e:	1c64      	adds	r4, r4, #1
10061f80:	2900      	cmp	r1, #0
10061f82:	d1f6      	bne.n	10061f72 <smp_connection_complete_handler+0x2e>
10061f84:	4294      	cmp	r4, r2
10061f86:	d255      	bcs.n	10062034 <smp_connection_complete_handler+0xf0>
10061f88:	195f      	adds	r7, r3, r5
10061f8a:	4639      	mov	r1, r7
10061f8c:	3968      	subs	r1, #104	@ 0x68
10061f8e:	8008      	strh	r0, [r1, #0]
10061f90:	4638      	mov	r0, r7
10061f92:	3870      	subs	r0, #112	@ 0x70
10061f94:	2105      	movs	r1, #5
10061f96:	7001      	strb	r1, [r0, #0]
10061f98:	4638      	mov	r0, r7
10061f9a:	380f      	subs	r0, #15
10061f9c:	9900      	ldr	r1, [sp, #0]
10061f9e:	7001      	strb	r1, [r0, #0]
10061fa0:	4638      	mov	r0, r7
10061fa2:	3810      	subs	r0, #16
10061fa4:	9000      	str	r0, [sp, #0]
10061fa6:	9901      	ldr	r1, [sp, #4]
10061fa8:	7001      	strb	r1, [r0, #0]
10061faa:	4638      	mov	r0, r7
10061fac:	380e      	subs	r0, #14
10061fae:	2206      	movs	r2, #6
10061fb0:	4b23      	ldr	r3, [pc, #140]	@ (10062040 <__arm_cp.1_2>)
10061fb2:	9902      	ldr	r1, [sp, #8]
10061fb4:	4616      	mov	r6, r2
10061fb6:	4798      	blx	r3
10061fb8:	20fe      	movs	r0, #254	@ 0xfe
10061fba:	9a06      	ldr	r2, [sp, #24]
10061fbc:	4010      	ands	r0, r2
10061fbe:	2101      	movs	r1, #1
10061fc0:	400a      	ands	r2, r1
10061fc2:	2802      	cmp	r0, #2
10061fc4:	d000      	beq.n	10061fc8 <smp_connection_complete_handler+0x84>
10061fc6:	4611      	mov	r1, r2
10061fc8:	9206      	str	r2, [sp, #24]
10061fca:	463c      	mov	r4, r7
10061fcc:	3c6f      	subs	r4, #111	@ 0x6f
10061fce:	7021      	strb	r1, [r4, #0]
10061fd0:	2802      	cmp	r0, #2
10061fd2:	9805      	ldr	r0, [sp, #20]
10061fd4:	9903      	ldr	r1, [sp, #12]
10061fd6:	d000      	beq.n	10061fda <smp_connection_complete_handler+0x96>
10061fd8:	4601      	mov	r1, r0
10061fda:	463d      	mov	r5, r7
10061fdc:	3d6e      	subs	r5, #110	@ 0x6e
10061fde:	4628      	mov	r0, r5
10061fe0:	4632      	mov	r2, r6
10061fe2:	4b17      	ldr	r3, [pc, #92]	@ (10062040 <__arm_cp.1_2>)
10061fe4:	4798      	blx	r3
10061fe6:	4638      	mov	r0, r7
10061fe8:	3817      	subs	r0, #23
10061fea:	9906      	ldr	r1, [sp, #24]
10061fec:	7001      	strb	r1, [r0, #0]
10061fee:	4638      	mov	r0, r7
10061ff0:	3816      	subs	r0, #22
10061ff2:	9905      	ldr	r1, [sp, #20]
10061ff4:	4632      	mov	r2, r6
10061ff6:	4b12      	ldr	r3, [pc, #72]	@ (10062040 <__arm_cp.1_2>)
10061ff8:	4798      	blx	r3
10061ffa:	4638      	mov	r0, r7
10061ffc:	3858      	subs	r0, #88	@ 0x58
10061ffe:	2100      	movs	r1, #0
10062000:	2204      	movs	r2, #4
10062002:	f7f0 fb37 	bl	10052674 <BLEPLAT_MemSet>
10062006:	1f38      	subs	r0, r7, #4
10062008:	3f66      	subs	r7, #102	@ 0x66
1006200a:	2110      	movs	r1, #16
1006200c:	7039      	strb	r1, [r7, #0]
1006200e:	9904      	ldr	r1, [sp, #16]
10062010:	6001      	str	r1, [r0, #0]
10062012:	7820      	ldrb	r0, [r4, #0]
10062014:	4629      	mov	r1, r5
10062016:	f005 f967 	bl	100672e8 <smp_cmn_is_peer_rejectlisted>
1006201a:	2800      	cmp	r0, #0
1006201c:	d005      	beq.n	1006202a <smp_connection_complete_handler+0xe6>
1006201e:	9800      	ldr	r0, [sp, #0]
10062020:	7800      	ldrb	r0, [r0, #0]
10062022:	07c0      	lsls	r0, r0, #31
10062024:	d001      	beq.n	1006202a <smp_connection_complete_handler+0xe6>
10062026:	20fb      	movs	r0, #251	@ 0xfb
10062028:	7038      	strb	r0, [r7, #0]
1006202a:	200e      	movs	r0, #14
1006202c:	f000 fba8 	bl	10062780 <tsk_notify_idx>
10062030:	f7ef fd29 	bl	10051a86 <BLE_STACK_ProcessRequest>
10062034:	b007      	add	sp, #28
10062036:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062038 <__arm_cp.1_0>:
10062038:	2000241c 	.word	0x2000241c

1006203c <__arm_cp.1_1>:
1006203c:	200024bc 	.word	0x200024bc

10062040 <__arm_cp.1_2>:
10062040:	10052655 	.word	0x10052655

10062044 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl>:
10062044:	b5f0      	push	{r4, r5, r6, r7, lr}
10062046:	b089      	sub	sp, #36	@ 0x24
10062048:	9304      	str	r3, [sp, #16]
1006204a:	4617      	mov	r7, r2
1006204c:	9105      	str	r1, [sp, #20]
1006204e:	4606      	mov	r6, r0
10062050:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
10062052:	4620      	mov	r0, r4
10062054:	f7fe f8d0 	bl	100601f8 <Is_Address_Initialized>
10062058:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1006205a:	2800      	cmp	r0, #0
1006205c:	d008      	beq.n	10062070 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl+0x2c>
1006205e:	a807      	add	r0, sp, #28
10062060:	2206      	movs	r2, #6
10062062:	4621      	mov	r1, r4
10062064:	f7f0 faf6 	bl	10052654 <BLEPLAT_MemCpy>
10062068:	a806      	add	r0, sp, #24
1006206a:	2201      	movs	r2, #1
1006206c:	7002      	strb	r2, [r0, #0]
1006206e:	e005      	b.n	1006207c <smp_sap_hci_le_enhanced_connection_complete_evt_hndl+0x38>
10062070:	a807      	add	r0, sp, #28
10062072:	ac06      	add	r4, sp, #24
10062074:	4621      	mov	r1, r4
10062076:	f7f4 f97f 	bl	10056378 <GAP_get_current_address>
1006207a:	7822      	ldrb	r2, [r4, #0]
1006207c:	9700      	str	r7, [sp, #0]
1006207e:	9804      	ldr	r0, [sp, #16]
10062080:	9001      	str	r0, [sp, #4]
10062082:	9502      	str	r5, [sp, #8]
10062084:	ab07      	add	r3, sp, #28
10062086:	4630      	mov	r0, r6
10062088:	9905      	ldr	r1, [sp, #20]
1006208a:	f7ff ff5b 	bl	10061f44 <smp_connection_complete_handler>
1006208e:	b009      	add	sp, #36	@ 0x24
10062090:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10062094 <smp_sap_hci_le_long_term_key_request_evt_hndl>:
10062094:	b5f0      	push	{r4, r5, r6, r7, lr}
10062096:	b089      	sub	sp, #36	@ 0x24
10062098:	4615      	mov	r5, r2
1006209a:	460e      	mov	r6, r1
1006209c:	f005 f964 	bl	10067368 <smp_get_remote_device_list_item>
100620a0:	2800      	cmp	r0, #0
100620a2:	d070      	beq.n	10062186 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xf2>
100620a4:	4604      	mov	r4, r0
100620a6:	7a80      	ldrb	r0, [r0, #10]
100620a8:	28bc      	cmp	r0, #188	@ 0xbc
100620aa:	d106      	bne.n	100620ba <smp_sap_hci_le_long_term_key_request_evt_hndl+0x26>
100620ac:	8927      	ldrh	r7, [r4, #8]
100620ae:	a808      	add	r0, sp, #32
100620b0:	2100      	movs	r1, #0
100620b2:	8001      	strh	r1, [r0, #0]
100620b4:	4626      	mov	r6, r4
100620b6:	3628      	adds	r6, #40	@ 0x28
100620b8:	e056      	b.n	10062168 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd4>
100620ba:	4627      	mov	r7, r4
100620bc:	3730      	adds	r7, #48	@ 0x30
100620be:	7de1      	ldrb	r1, [r4, #23]
100620c0:	0709      	lsls	r1, r1, #28
100620c2:	d409      	bmi.n	100620d8 <smp_sap_hci_le_long_term_key_request_evt_hndl+0x44>
100620c4:	4620      	mov	r0, r4
100620c6:	3028      	adds	r0, #40	@ 0x28
100620c8:	2208      	movs	r2, #8
100620ca:	4631      	mov	r1, r6
100620cc:	f7f0 fac2 	bl	10052654 <BLEPLAT_MemCpy>
100620d0:	703d      	strb	r5, [r7, #0]
100620d2:	0a28      	lsrs	r0, r5, #8
100620d4:	7078      	strb	r0, [r7, #1]
100620d6:	7aa0      	ldrb	r0, [r4, #10]
100620d8:	8921      	ldrh	r1, [r4, #8]
100620da:	9102      	str	r1, [sp, #8]
100620dc:	a908      	add	r1, sp, #32
100620de:	2200      	movs	r2, #0
100620e0:	800a      	strh	r2, [r1, #0]
100620e2:	4626      	mov	r6, r4
100620e4:	3628      	adds	r6, #40	@ 0x28
100620e6:	28bc      	cmp	r0, #188	@ 0xbc
100620e8:	d03d      	beq.n	10062166 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd2>
100620ea:	4625      	mov	r5, r4
100620ec:	351c      	adds	r5, #28
100620ee:	28f1      	cmp	r0, #241	@ 0xf1
100620f0:	d10f      	bne.n	10062112 <smp_sap_hci_le_long_term_key_request_evt_hndl+0x7e>
100620f2:	7de0      	ldrb	r0, [r4, #23]
100620f4:	0700      	lsls	r0, r0, #28
100620f6:	d436      	bmi.n	10062166 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd2>
100620f8:	aa07      	add	r2, sp, #28
100620fa:	9201      	str	r2, [sp, #4]
100620fc:	4628      	mov	r0, r5
100620fe:	4631      	mov	r1, r6
10062100:	f7ff fa66 	bl	100615d0 <smp_sap_crt_generate_ediv>
10062104:	2202      	movs	r2, #2
10062106:	9801      	ldr	r0, [sp, #4]
10062108:	4639      	mov	r1, r7
1006210a:	f7f0 fac3 	bl	10052694 <BLEPLAT_MemCmp>
1006210e:	2800      	cmp	r0, #0
10062110:	d021      	beq.n	10062156 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xc2>
10062112:	4638      	mov	r0, r7
10062114:	4631      	mov	r1, r6
10062116:	4622      	mov	r2, r4
10062118:	f004 f949 	bl	100663ae <smp_dep_sdb_find_matching_ltk_read_record>
1006211c:	2800      	cmp	r0, #0
1006211e:	d01a      	beq.n	10062156 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xc2>
10062120:	9d02      	ldr	r5, [sp, #8]
10062122:	4628      	mov	r0, r5
10062124:	f7f7 fa09 	bl	1005953a <hci_le_long_term_key_request_negative_reply_api>
10062128:	7e20      	ldrb	r0, [r4, #24]
1006212a:	0780      	lsls	r0, r0, #30
1006212c:	d00c      	beq.n	10062148 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xb4>
1006212e:	4628      	mov	r0, r5
10062130:	f005 f8fa 	bl	10067328 <smp_get_remote_device_list_index>
10062134:	4602      	mov	r2, r0
10062136:	2001      	movs	r0, #1
10062138:	2100      	movs	r1, #0
1006213a:	4b15      	ldr	r3, [pc, #84]	@ (10062190 <__arm_cp.3_1>)
1006213c:	f7ff fdbc 	bl	10061cb8 <smp_timer_reset>
10062140:	7e20      	ldrb	r0, [r4, #24]
10062142:	21fc      	movs	r1, #252	@ 0xfc
10062144:	4001      	ands	r1, r0
10062146:	7621      	strb	r1, [r4, #24]
10062148:	2002      	movs	r0, #2
1006214a:	2203      	movs	r2, #3
1006214c:	2300      	movs	r3, #0
1006214e:	4629      	mov	r1, r5
10062150:	f001 ff80 	bl	10064054 <aci_gap_pairing_complete_event_push_noinline>
10062154:	e017      	b.n	10062186 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xf2>
10062156:	480d      	ldr	r0, [pc, #52]	@ (1006218c <__arm_cp.3_0>)
10062158:	6800      	ldr	r0, [r0, #0]
1006215a:	3008      	adds	r0, #8
1006215c:	aa08      	add	r2, sp, #32
1006215e:	4629      	mov	r1, r5
10062160:	4633      	mov	r3, r6
10062162:	f7ff fa6b 	bl	1006163c <smp_crt_diversify>
10062166:	9f02      	ldr	r7, [sp, #8]
10062168:	ad03      	add	r5, sp, #12
1006216a:	2100      	movs	r1, #0
1006216c:	2210      	movs	r2, #16
1006216e:	4628      	mov	r0, r5
10062170:	f7f0 fa80 	bl	10052674 <BLEPLAT_MemSet>
10062174:	7c22      	ldrb	r2, [r4, #16]
10062176:	4628      	mov	r0, r5
10062178:	4631      	mov	r1, r6
1006217a:	f7f0 fa6b 	bl	10052654 <BLEPLAT_MemCpy>
1006217e:	4638      	mov	r0, r7
10062180:	4629      	mov	r1, r5
10062182:	f7f7 f9cb 	bl	1005951c <hci_le_long_term_key_request_reply_api>
10062186:	b009      	add	sp, #36	@ 0x24
10062188:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006218a:	46c0      	nop			@ (mov r8, r8)

1006218c <__arm_cp.3_0>:
1006218c:	2000241c 	.word	0x2000241c

10062190 <__arm_cp.3_1>:
10062190:	00007530 	.word	0x00007530

10062194 <smp_sap_hci_encryption_change_evt_hndl>:
10062194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062196:	460e      	mov	r6, r1
10062198:	4605      	mov	r5, r0
1006219a:	4610      	mov	r0, r2
1006219c:	f005 f8e4 	bl	10067368 <smp_get_remote_device_list_item>
100621a0:	2800      	cmp	r0, #0
100621a2:	d056      	beq.n	10062252 <smp_sap_hci_encryption_change_evt_hndl+0xbe>
100621a4:	4604      	mov	r4, r0
100621a6:	4607      	mov	r7, r0
100621a8:	2e00      	cmp	r6, #0
100621aa:	d00b      	beq.n	100621c4 <smp_sap_hci_encryption_change_evt_hndl+0x30>
100621ac:	2000      	movs	r0, #0
100621ae:	72b8      	strb	r0, [r7, #10]
100621b0:	3408      	adds	r4, #8
100621b2:	2201      	movs	r2, #1
100621b4:	2d06      	cmp	r5, #6
100621b6:	d132      	bne.n	1006221e <smp_sap_hci_encryption_change_evt_hndl+0x8a>
100621b8:	8939      	ldrh	r1, [r7, #8]
100621ba:	4615      	mov	r5, r2
100621bc:	2e06      	cmp	r6, #6
100621be:	d00e      	beq.n	100621de <smp_sap_hci_encryption_change_evt_hndl+0x4a>
100621c0:	2205      	movs	r2, #5
100621c2:	e00d      	b.n	100621e0 <smp_sap_hci_encryption_change_evt_hndl+0x4c>
100621c4:	7af9      	ldrb	r1, [r7, #11]
100621c6:	2001      	movs	r0, #1
100621c8:	4308      	orrs	r0, r1
100621ca:	72f8      	strb	r0, [r7, #11]
100621cc:	7cf9      	ldrb	r1, [r7, #19]
100621ce:	1e89      	subs	r1, r1, #2
100621d0:	2902      	cmp	r1, #2
100621d2:	d810      	bhi.n	100621f6 <smp_sap_hci_encryption_change_evt_hndl+0x62>
100621d4:	7df9      	ldrb	r1, [r7, #23]
100621d6:	0709      	lsls	r1, r1, #28
100621d8:	d508      	bpl.n	100621ec <smp_sap_hci_encryption_change_evt_hndl+0x58>
100621da:	2104      	movs	r1, #4
100621dc:	e007      	b.n	100621ee <smp_sap_hci_encryption_change_evt_hndl+0x5a>
100621de:	2204      	movs	r2, #4
100621e0:	2002      	movs	r0, #2
100621e2:	2300      	movs	r3, #0
100621e4:	f001 ff36 	bl	10064054 <aci_gap_pairing_complete_event_push_noinline>
100621e8:	462a      	mov	r2, r5
100621ea:	e018      	b.n	1006221e <smp_sap_hci_encryption_change_evt_hndl+0x8a>
100621ec:	2102      	movs	r1, #2
100621ee:	22f9      	movs	r2, #249	@ 0xf9
100621f0:	4010      	ands	r0, r2
100621f2:	1840      	adds	r0, r0, r1
100621f4:	72f8      	strb	r0, [r7, #11]
100621f6:	7ab8      	ldrb	r0, [r7, #10]
100621f8:	28ad      	cmp	r0, #173	@ 0xad
100621fa:	d005      	beq.n	10062208 <smp_sap_hci_encryption_change_evt_hndl+0x74>
100621fc:	28ae      	cmp	r0, #174	@ 0xae
100621fe:	d005      	beq.n	1006220c <smp_sap_hci_encryption_change_evt_hndl+0x78>
10062200:	28bc      	cmp	r0, #188	@ 0xbc
10062202:	d127      	bne.n	10062254 <smp_sap_hci_encryption_change_evt_hndl+0xc0>
10062204:	20bf      	movs	r0, #191	@ 0xbf
10062206:	e002      	b.n	1006220e <smp_sap_hci_encryption_change_evt_hndl+0x7a>
10062208:	20af      	movs	r0, #175	@ 0xaf
1006220a:	e000      	b.n	1006220e <smp_sap_hci_encryption_change_evt_hndl+0x7a>
1006220c:	20f0      	movs	r0, #240	@ 0xf0
1006220e:	72b8      	strb	r0, [r7, #10]
10062210:	3408      	adds	r4, #8
10062212:	200e      	movs	r0, #14
10062214:	f000 fab4 	bl	10062780 <tsk_notify_idx>
10062218:	f7ef fc35 	bl	10051a86 <BLE_STACK_ProcessRequest>
1006221c:	2200      	movs	r2, #0
1006221e:	2060      	movs	r0, #96	@ 0x60
10062220:	5c38      	ldrb	r0, [r7, r0]
10062222:	07c0      	lsls	r0, r0, #31
10062224:	d10b      	bne.n	1006223e <smp_sap_hci_encryption_change_evt_hndl+0xaa>
10062226:	7eb8      	ldrb	r0, [r7, #26]
10062228:	06c1      	lsls	r1, r0, #27
1006222a:	d505      	bpl.n	10062238 <smp_sap_hci_encryption_change_evt_hndl+0xa4>
1006222c:	21ef      	movs	r1, #239	@ 0xef
1006222e:	4001      	ands	r1, r0
10062230:	76b9      	strb	r1, [r7, #26]
10062232:	b241      	sxtb	r1, r0
10062234:	2900      	cmp	r1, #0
10062236:	d418      	bmi.n	1006226a <smp_sap_hci_encryption_change_evt_hndl+0xd6>
10062238:	2a00      	cmp	r2, #0
1006223a:	d119      	bne.n	10062270 <smp_sap_hci_encryption_change_evt_hndl+0xdc>
1006223c:	e009      	b.n	10062252 <smp_sap_hci_encryption_change_evt_hndl+0xbe>
1006223e:	7e38      	ldrb	r0, [r7, #24]
10062240:	21fc      	movs	r1, #252	@ 0xfc
10062242:	4001      	ands	r1, r0
10062244:	7639      	strb	r1, [r7, #24]
10062246:	2103      	movs	r1, #3
10062248:	4001      	ands	r1, r0
1006224a:	1e48      	subs	r0, r1, #1
1006224c:	4181      	sbcs	r1, r0
1006224e:	430a      	orrs	r2, r1
10062250:	d10e      	bne.n	10062270 <smp_sap_hci_encryption_change_evt_hndl+0xdc>
10062252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062254:	2d06      	cmp	r5, #6
10062256:	d1db      	bne.n	10062210 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
10062258:	28f1      	cmp	r0, #241	@ 0xf1
1006225a:	d1d9      	bne.n	10062210 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
1006225c:	8939      	ldrh	r1, [r7, #8]
1006225e:	2002      	movs	r0, #2
10062260:	2200      	movs	r2, #0
10062262:	4613      	mov	r3, r2
10062264:	f001 fef6 	bl	10064054 <aci_gap_pairing_complete_event_push_noinline>
10062268:	e7d2      	b.n	10062210 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
1006226a:	216f      	movs	r1, #111	@ 0x6f
1006226c:	4008      	ands	r0, r1
1006226e:	76b8      	strb	r0, [r7, #26]
10062270:	8820      	ldrh	r0, [r4, #0]
10062272:	f005 f859 	bl	10067328 <smp_get_remote_device_list_index>
10062276:	4602      	mov	r2, r0
10062278:	2001      	movs	r0, #1
1006227a:	2100      	movs	r1, #0
1006227c:	4b01      	ldr	r3, [pc, #4]	@ (10062284 <__arm_cp.4_0>)
1006227e:	f7ff fd1b 	bl	10061cb8 <smp_timer_reset>
10062282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10062284 <__arm_cp.4_0>:
10062284:	00007530 	.word	0x00007530

10062288 <smp_sap_hci_disconnection_complete_evt_hndl>:
10062288:	b510      	push	{r4, lr}
1006228a:	f005 f86d 	bl	10067368 <smp_get_remote_device_list_item>
1006228e:	2800      	cmp	r0, #0
10062290:	d025      	beq.n	100622de <smp_sap_hci_disconnection_complete_evt_hndl+0x56>
10062292:	4604      	mov	r4, r0
10062294:	8900      	ldrh	r0, [r0, #8]
10062296:	f005 f847 	bl	10067328 <smp_get_remote_device_list_index>
1006229a:	4602      	mov	r2, r0
1006229c:	2001      	movs	r0, #1
1006229e:	2100      	movs	r1, #0
100622a0:	4b0f      	ldr	r3, [pc, #60]	@ (100622e0 <__arm_cp.5_0>)
100622a2:	f7ff fd09 	bl	10061cb8 <smp_timer_reset>
100622a6:	8920      	ldrh	r0, [r4, #8]
100622a8:	f7ff fcca 	bl	10061c40 <smp_rxp_flush_packet_queues>
100622ac:	2060      	movs	r0, #96	@ 0x60
100622ae:	5c20      	ldrb	r0, [r4, r0]
100622b0:	07c0      	lsls	r0, r0, #31
100622b2:	7aa0      	ldrb	r0, [r4, #10]
100622b4:	d104      	bne.n	100622c0 <smp_sap_hci_disconnection_complete_evt_hndl+0x38>
100622b6:	3060      	adds	r0, #96	@ 0x60
100622b8:	b2c0      	uxtb	r0, r0
100622ba:	2851      	cmp	r0, #81	@ 0x51
100622bc:	d304      	bcc.n	100622c8 <smp_sap_hci_disconnection_complete_evt_hndl+0x40>
100622be:	e007      	b.n	100622d0 <smp_sap_hci_disconnection_complete_evt_hndl+0x48>
100622c0:	3050      	adds	r0, #80	@ 0x50
100622c2:	b2c0      	uxtb	r0, r0
100622c4:	2840      	cmp	r0, #64	@ 0x40
100622c6:	d803      	bhi.n	100622d0 <smp_sap_hci_disconnection_complete_evt_hndl+0x48>
100622c8:	2102      	movs	r1, #2
100622ca:	4620      	mov	r0, r4
100622cc:	f004 f8ea 	bl	100664a4 <smp_pp3_pairing_completed_update_stats>
100622d0:	20fe      	movs	r0, #254	@ 0xfe
100622d2:	72a0      	strb	r0, [r4, #10]
100622d4:	200e      	movs	r0, #14
100622d6:	f000 fa53 	bl	10062780 <tsk_notify_idx>
100622da:	f7ef fbd4 	bl	10051a86 <BLE_STACK_ProcessRequest>
100622de:	bd10      	pop	{r4, pc}

100622e0 <__arm_cp.5_0>:
100622e0:	00007530 	.word	0x00007530

100622e4 <smp_sap_scp_force_debug_key_usage>:
100622e4:	b5b0      	push	{r4, r5, r7, lr}
100622e6:	4605      	mov	r5, r0
100622e8:	2400      	movs	r4, #0
100622ea:	4620      	mov	r0, r4
100622ec:	f005 f888 	bl	10067400 <smp_scp_is_another_sc_pairing_ongoing>
100622f0:	2800      	cmp	r0, #0
100622f2:	d001      	beq.n	100622f8 <smp_sap_scp_force_debug_key_usage+0x14>
100622f4:	240c      	movs	r4, #12
100622f6:	e004      	b.n	10062302 <smp_sap_scp_force_debug_key_usage+0x1e>
100622f8:	2d01      	cmp	r5, #1
100622fa:	d102      	bne.n	10062302 <smp_sap_scp_force_debug_key_usage+0x1e>
100622fc:	2001      	movs	r0, #1
100622fe:	f005 f89f 	bl	10067440 <smp_scp_init_ucfg_weak>
10062302:	4620      	mov	r0, r4
10062304:	bdb0      	pop	{r4, r5, r7, pc}

10062306 <secure_connections_csr_ucfg_weak>:
10062306:	2000      	movs	r0, #0
10062308:	4770      	bx	lr

1006230a <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg_weak>:
1006230a:	4770      	bx	lr

1006230c <smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg_weak>:
1006230c:	4770      	bx	lr
	...

10062310 <smp_sap_l2c_acl_data_hndl>:
10062310:	b5b0      	push	{r4, r5, r7, lr}
10062312:	460c      	mov	r4, r1
10062314:	4605      	mov	r5, r0
10062316:	8808      	ldrh	r0, [r1, #0]
10062318:	f005 f826 	bl	10067368 <smp_get_remote_device_list_item>
1006231c:	2800      	cmp	r0, #0
1006231e:	d025      	beq.n	1006236c <smp_sap_l2c_acl_data_hndl+0x5c>
10062320:	2d00      	cmp	r5, #0
10062322:	d00f      	beq.n	10062344 <smp_sap_l2c_acl_data_hndl+0x34>
10062324:	2d01      	cmp	r5, #1
10062326:	d121      	bne.n	1006236c <smp_sap_l2c_acl_data_hndl+0x5c>
10062328:	8860      	ldrh	r0, [r4, #2]
1006232a:	2841      	cmp	r0, #65	@ 0x41
1006232c:	d81e      	bhi.n	1006236c <smp_sap_l2c_acl_data_hndl+0x5c>
1006232e:	4812      	ldr	r0, [pc, #72]	@ (10062378 <__arm_cp.0_0>)
10062330:	6800      	ldr	r0, [r0, #0]
10062332:	4621      	mov	r1, r4
10062334:	f000 fc1a 	bl	10062b6c <ACL_list_insert_tail>
10062338:	200f      	movs	r0, #15
1006233a:	f000 fa21 	bl	10062780 <tsk_notify_idx>
1006233e:	f7ef fba2 	bl	10051a86 <BLE_STACK_ProcessRequest>
10062342:	e016      	b.n	10062372 <smp_sap_l2c_acl_data_hndl+0x62>
10062344:	6861      	ldr	r1, [r4, #4]
10062346:	7a09      	ldrb	r1, [r1, #8]
10062348:	290b      	cmp	r1, #11
1006234a:	d109      	bne.n	10062360 <smp_sap_l2c_acl_data_hndl+0x50>
1006234c:	7e01      	ldrb	r1, [r0, #24]
1006234e:	2203      	movs	r2, #3
10062350:	400a      	ands	r2, r1
10062352:	2a01      	cmp	r2, #1
10062354:	d10a      	bne.n	1006236c <smp_sap_l2c_acl_data_hndl+0x5c>
10062356:	22fc      	movs	r2, #252	@ 0xfc
10062358:	4011      	ands	r1, r2
1006235a:	1c89      	adds	r1, r1, #2
1006235c:	7601      	strb	r1, [r0, #24]
1006235e:	e005      	b.n	1006236c <smp_sap_l2c_acl_data_hndl+0x5c>
10062360:	1f8a      	subs	r2, r1, #6
10062362:	b2d2      	uxtb	r2, r2
10062364:	2a04      	cmp	r2, #4
10062366:	d801      	bhi.n	1006236c <smp_sap_l2c_acl_data_hndl+0x5c>
10062368:	f004 fe0c 	bl	10066f84 <smp_pp3_keys_distribution_signaling_ack>
1006236c:	4620      	mov	r0, r4
1006236e:	f7f2 fd09 	bl	10054d84 <ACL_pkt_release>
10062372:	2000      	movs	r0, #0
10062374:	bdb0      	pop	{r4, r5, r7, pc}
10062376:	46c0      	nop			@ (mov r8, r8)

10062378 <__arm_cp.0_0>:
10062378:	200024bc 	.word	0x200024bc

1006237c <smp_get_sec_level_for_mode1>:
1006237c:	b510      	push	{r4, lr}
1006237e:	7ac3      	ldrb	r3, [r0, #11]
10062380:	075c      	lsls	r4, r3, #29
10062382:	0fa2      	lsrs	r2, r4, #30
10062384:	d009      	beq.n	1006239a <smp_get_sec_level_for_mode1+0x1e>
10062386:	2201      	movs	r2, #1
10062388:	4013      	ands	r3, r2
1006238a:	425a      	negs	r2, r3
1006238c:	415a      	adcs	r2, r3
1006238e:	7c03      	ldrb	r3, [r0, #16]
10062390:	2003      	movs	r0, #3
10062392:	2b10      	cmp	r3, #16
10062394:	d009      	beq.n	100623aa <smp_get_sec_level_for_mode1+0x2e>
10062396:	4603      	mov	r3, r0
10062398:	e008      	b.n	100623ac <smp_get_sec_level_for_mode1+0x30>
1006239a:	07da      	lsls	r2, r3, #31
1006239c:	d10a      	bne.n	100623b4 <smp_get_sec_level_for_mode1+0x38>
1006239e:	7a80      	ldrb	r0, [r0, #10]
100623a0:	2201      	movs	r2, #1
100623a2:	28f1      	cmp	r0, #241	@ 0xf1
100623a4:	d009      	beq.n	100623ba <smp_get_sec_level_for_mode1+0x3e>
100623a6:	4613      	mov	r3, r2
100623a8:	e008      	b.n	100623bc <smp_get_sec_level_for_mode1+0x40>
100623aa:	2304      	movs	r3, #4
100623ac:	2c00      	cmp	r4, #0
100623ae:	d405      	bmi.n	100623bc <smp_get_sec_level_for_mode1+0x40>
100623b0:	4603      	mov	r3, r0
100623b2:	e003      	b.n	100623bc <smp_get_sec_level_for_mode1+0x40>
100623b4:	2302      	movs	r3, #2
100623b6:	2200      	movs	r2, #0
100623b8:	e000      	b.n	100623bc <smp_get_sec_level_for_mode1+0x40>
100623ba:	2302      	movs	r3, #2
100623bc:	2a00      	cmp	r2, #0
100623be:	d101      	bne.n	100623c4 <smp_get_sec_level_for_mode1+0x48>
100623c0:	4618      	mov	r0, r3
100623c2:	e000      	b.n	100623c6 <smp_get_sec_level_for_mode1+0x4a>
100623c4:	2001      	movs	r0, #1
100623c6:	2900      	cmp	r1, #0
100623c8:	d000      	beq.n	100623cc <smp_get_sec_level_for_mode1+0x50>
100623ca:	4618      	mov	r0, r3
100623cc:	bd10      	pop	{r4, pc}

100623ce <smp_sap_get_security_level>:
100623ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100623d0:	461c      	mov	r4, r3
100623d2:	4616      	mov	r6, r2
100623d4:	460d      	mov	r5, r1
100623d6:	2100      	movs	r1, #0
100623d8:	7029      	strb	r1, [r5, #0]
100623da:	7011      	strb	r1, [r2, #0]
100623dc:	7019      	strb	r1, [r3, #0]
100623de:	f004 ffc3 	bl	10067368 <smp_get_remote_device_list_item>
100623e2:	2800      	cmp	r0, #0
100623e4:	d017      	beq.n	10062416 <smp_sap_get_security_level+0x48>
100623e6:	4607      	mov	r7, r0
100623e8:	2101      	movs	r1, #1
100623ea:	7029      	strb	r1, [r5, #0]
100623ec:	7a80      	ldrb	r0, [r0, #10]
100623ee:	28f1      	cmp	r0, #241	@ 0xf1
100623f0:	d110      	bne.n	10062414 <smp_sap_get_security_level+0x46>
100623f2:	9100      	str	r1, [sp, #0]
100623f4:	2100      	movs	r1, #0
100623f6:	4638      	mov	r0, r7
100623f8:	f7ff ffc0 	bl	1006237c <smp_get_sec_level_for_mode1>
100623fc:	7030      	strb	r0, [r6, #0]
100623fe:	2801      	cmp	r0, #1
10062400:	d109      	bne.n	10062416 <smp_sap_get_security_level+0x48>
10062402:	2002      	movs	r0, #2
10062404:	7028      	strb	r0, [r5, #0]
10062406:	7af9      	ldrb	r1, [r7, #11]
10062408:	0749      	lsls	r1, r1, #29
1006240a:	0f89      	lsrs	r1, r1, #30
1006240c:	d100      	bne.n	10062410 <smp_sap_get_security_level+0x42>
1006240e:	9800      	ldr	r0, [sp, #0]
10062410:	7020      	strb	r0, [r4, #0]
10062412:	e000      	b.n	10062416 <smp_sap_get_security_level+0x48>
10062414:	7031      	strb	r1, [r6, #0]
10062416:	2000      	movs	r0, #0
10062418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1006241a <smp_sap_get_remote_address_check_addr_type>:
1006241a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006241c:	461c      	mov	r4, r3
1006241e:	4615      	mov	r5, r2
10062420:	460f      	mov	r7, r1
10062422:	f004 ffa1 	bl	10067368 <smp_get_remote_device_list_item>
10062426:	2800      	cmp	r0, #0
10062428:	d016      	beq.n	10062458 <smp_sap_get_remote_address_check_addr_type+0x3e>
1006242a:	4606      	mov	r6, r0
1006242c:	1c81      	adds	r1, r0, #2
1006242e:	2206      	movs	r2, #6
10062430:	4628      	mov	r0, r5
10062432:	f7f0 f90f 	bl	10052654 <BLEPLAT_MemCpy>
10062436:	7870      	ldrb	r0, [r6, #1]
10062438:	4669      	mov	r1, sp
1006243a:	7008      	strb	r0, [r1, #0]
1006243c:	2f00      	cmp	r7, #0
1006243e:	d01f      	beq.n	10062480 <smp_sap_get_remote_address_check_addr_type+0x66>
10062440:	2800      	cmp	r0, #0
10062442:	d01d      	beq.n	10062480 <smp_sap_get_remote_address_check_addr_type+0x66>
10062444:	2801      	cmp	r0, #1
10062446:	d109      	bne.n	1006245c <smp_sap_get_remote_address_check_addr_type+0x42>
10062448:	79f1      	ldrb	r1, [r6, #7]
1006244a:	098a      	lsrs	r2, r1, #6
1006244c:	2001      	movs	r0, #1
1006244e:	2a02      	cmp	r2, #2
10062450:	d816      	bhi.n	10062480 <smp_sap_get_remote_address_check_addr_type+0x66>
10062452:	2940      	cmp	r1, #64	@ 0x40
10062454:	d203      	bcs.n	1006245e <smp_sap_get_remote_address_check_addr_type+0x44>
10062456:	e013      	b.n	10062480 <smp_sap_get_remote_address_check_addr_type+0x66>
10062458:	2002      	movs	r0, #2
1006245a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006245c:	79f1      	ldrb	r1, [r6, #7]
1006245e:	20c0      	movs	r0, #192	@ 0xc0
10062460:	4008      	ands	r0, r1
10062462:	2840      	cmp	r0, #64	@ 0x40
10062464:	d108      	bne.n	10062478 <smp_sap_get_remote_address_check_addr_type+0x5e>
10062466:	4669      	mov	r1, sp
10062468:	4630      	mov	r0, r6
1006246a:	462a      	mov	r2, r5
1006246c:	f003 ff88 	bl	10066380 <smp_dep_sdb_find_bonding_record_read_address>
10062470:	2800      	cmp	r0, #0
10062472:	d003      	beq.n	1006247c <smp_sap_get_remote_address_check_addr_type+0x62>
10062474:	2081      	movs	r0, #129	@ 0x81
10062476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062478:	2086      	movs	r0, #134	@ 0x86
1006247a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006247c:	4668      	mov	r0, sp
1006247e:	7800      	ldrb	r0, [r0, #0]
10062480:	7020      	strb	r0, [r4, #0]
10062482:	2000      	movs	r0, #0
10062484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10062486 <smp_sap_check_is_peer_device_bonded>:
10062486:	b5b0      	push	{r4, r5, r7, lr}
10062488:	f004 ff6e 	bl	10067368 <smp_get_remote_device_list_item>
1006248c:	2800      	cmp	r0, #0
1006248e:	d011      	beq.n	100624b4 <smp_sap_check_is_peer_device_bonded+0x2e>
10062490:	4604      	mov	r4, r0
10062492:	2500      	movs	r5, #0
10062494:	4629      	mov	r1, r5
10062496:	f003 ff1b 	bl	100662d0 <smp_dep_sdb_find_bonding_record_by_conn_addr>
1006249a:	2800      	cmp	r0, #0
1006249c:	d00b      	beq.n	100624b6 <smp_sap_check_is_peer_device_bonded+0x30>
1006249e:	7aa1      	ldrb	r1, [r4, #10]
100624a0:	29f1      	cmp	r1, #241	@ 0xf1
100624a2:	d105      	bne.n	100624b0 <smp_sap_check_is_peer_device_bonded+0x2a>
100624a4:	7ba1      	ldrb	r1, [r4, #14]
100624a6:	07ca      	lsls	r2, r1, #31
100624a8:	d002      	beq.n	100624b0 <smp_sap_check_is_peer_device_bonded+0x2a>
100624aa:	0789      	lsls	r1, r1, #30
100624ac:	d500      	bpl.n	100624b0 <smp_sap_check_is_peer_device_bonded+0x2a>
100624ae:	2000      	movs	r0, #0
100624b0:	4605      	mov	r5, r0
100624b2:	e000      	b.n	100624b6 <smp_sap_check_is_peer_device_bonded+0x30>
100624b4:	2502      	movs	r5, #2
100624b6:	4628      	mov	r0, r5
100624b8:	bdb0      	pop	{r4, r5, r7, pc}

100624ba <smp_sap_check_encryption_key_size>:
100624ba:	b510      	push	{r4, lr}
100624bc:	460c      	mov	r4, r1
100624be:	f004 ff53 	bl	10067368 <smp_get_remote_device_list_item>
100624c2:	2800      	cmp	r0, #0
100624c4:	d005      	beq.n	100624d2 <smp_sap_check_encryption_key_size+0x18>
100624c6:	7a81      	ldrb	r1, [r0, #10]
100624c8:	29f1      	cmp	r1, #241	@ 0xf1
100624ca:	d102      	bne.n	100624d2 <smp_sap_check_encryption_key_size+0x18>
100624cc:	7c00      	ldrb	r0, [r0, #16]
100624ce:	42a0      	cmp	r0, r4
100624d0:	d201      	bcs.n	100624d6 <smp_sap_check_encryption_key_size+0x1c>
100624d2:	20b6      	movs	r0, #182	@ 0xb6
100624d4:	bd10      	pop	{r4, pc}
100624d6:	2000      	movs	r0, #0
100624d8:	bd10      	pop	{r4, pc}

100624da <smp_sap_forget_device_upon_disconnection>:
100624da:	b580      	push	{r7, lr}
100624dc:	f004 ff44 	bl	10067368 <smp_get_remote_device_list_item>
100624e0:	2800      	cmp	r0, #0
100624e2:	d006      	beq.n	100624f2 <smp_sap_forget_device_upon_disconnection+0x18>
100624e4:	2160      	movs	r1, #96	@ 0x60
100624e6:	5c42      	ldrb	r2, [r0, r1]
100624e8:	2380      	movs	r3, #128	@ 0x80
100624ea:	4313      	orrs	r3, r2
100624ec:	5443      	strb	r3, [r0, r1]
100624ee:	2000      	movs	r0, #0
100624f0:	bd80      	pop	{r7, pc}
100624f2:	2081      	movs	r0, #129	@ 0x81
100624f4:	bd80      	pop	{r7, pc}

100624f6 <smp_sap_sm2_packet_data_signing_compute>:
100624f6:	b5f0      	push	{r4, r5, r6, r7, lr}
100624f8:	b089      	sub	sp, #36	@ 0x24
100624fa:	460e      	mov	r6, r1
100624fc:	f004 ff34 	bl	10067368 <smp_get_remote_device_list_item>
10062500:	2800      	cmp	r0, #0
10062502:	d025      	beq.n	10062550 <smp_sap_sm2_packet_data_signing_compute+0x5a>
10062504:	4605      	mov	r5, r0
10062506:	301c      	adds	r0, #28
10062508:	a905      	add	r1, sp, #20
1006250a:	9100      	str	r1, [sp, #0]
1006250c:	f7ff f92c 	bl	10061768 <smp_crt_generate_csrk>
10062510:	8874      	ldrh	r4, [r6, #2]
10062512:	462b      	mov	r3, r5
10062514:	3368      	adds	r3, #104	@ 0x68
10062516:	1d27      	adds	r7, r4, #4
10062518:	b2b9      	uxth	r1, r7
1006251a:	2204      	movs	r2, #4
1006251c:	4630      	mov	r0, r6
1006251e:	f7f2 fc6f 	bl	10054e00 <ACL_pkt_write>
10062522:	b2fa      	uxtb	r2, r7
10062524:	af01      	add	r7, sp, #4
10062526:	9800      	ldr	r0, [sp, #0]
10062528:	4631      	mov	r1, r6
1006252a:	463b      	mov	r3, r7
1006252c:	f7ff f92a 	bl	10061784 <smp_crt_generate_cmac_tag>
10062530:	3708      	adds	r7, #8
10062532:	4620      	mov	r0, r4
10062534:	3008      	adds	r0, #8
10062536:	b281      	uxth	r1, r0
10062538:	2208      	movs	r2, #8
1006253a:	4630      	mov	r0, r6
1006253c:	463b      	mov	r3, r7
1006253e:	f7f2 fc5f 	bl	10054e00 <ACL_pkt_write>
10062542:	340c      	adds	r4, #12
10062544:	8074      	strh	r4, [r6, #2]
10062546:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
10062548:	1c40      	adds	r0, r0, #1
1006254a:	66a8      	str	r0, [r5, #104]	@ 0x68
1006254c:	2000      	movs	r0, #0
1006254e:	e000      	b.n	10062552 <smp_sap_sm2_packet_data_signing_compute+0x5c>
10062550:	2002      	movs	r0, #2
10062552:	b009      	add	sp, #36	@ 0x24
10062554:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062556 <smp_sap_sm2_packet_data_signing_validate>:
10062556:	b5f0      	push	{r4, r5, r6, r7, lr}
10062558:	b08d      	sub	sp, #52	@ 0x34
1006255a:	460d      	mov	r5, r1
1006255c:	884f      	ldrh	r7, [r1, #2]
1006255e:	f004 ff03 	bl	10067368 <smp_get_remote_device_list_item>
10062562:	2800      	cmp	r0, #0
10062564:	d005      	beq.n	10062572 <smp_sap_sm2_packet_data_signing_validate+0x1c>
10062566:	4604      	mov	r4, r0
10062568:	7c40      	ldrb	r0, [r0, #17]
1006256a:	0640      	lsls	r0, r0, #25
1006256c:	d403      	bmi.n	10062576 <smp_sap_sm2_packet_data_signing_validate+0x20>
1006256e:	20b1      	movs	r0, #177	@ 0xb1
10062570:	e034      	b.n	100625dc <smp_sap_sm2_packet_data_signing_validate+0x86>
10062572:	2002      	movs	r0, #2
10062574:	e032      	b.n	100625dc <smp_sap_sm2_packet_data_signing_validate+0x86>
10062576:	4621      	mov	r1, r4
10062578:	3148      	adds	r1, #72	@ 0x48
1006257a:	a805      	add	r0, sp, #20
1006257c:	2210      	movs	r2, #16
1006257e:	f7f0 f869 	bl	10052654 <BLEPLAT_MemCpy>
10062582:	3f08      	subs	r7, #8
10062584:	b2b9      	uxth	r1, r7
10062586:	220c      	movs	r2, #12
10062588:	ae02      	add	r6, sp, #8
1006258a:	4628      	mov	r0, r5
1006258c:	4633      	mov	r3, r6
1006258e:	f7f2 fc15 	bl	10054dbc <ACL_pkt_read>
10062592:	7830      	ldrb	r0, [r6, #0]
10062594:	7871      	ldrb	r1, [r6, #1]
10062596:	0209      	lsls	r1, r1, #8
10062598:	1808      	adds	r0, r1, r0
1006259a:	78b1      	ldrb	r1, [r6, #2]
1006259c:	0409      	lsls	r1, r1, #16
1006259e:	1840      	adds	r0, r0, r1
100625a0:	78f1      	ldrb	r1, [r6, #3]
100625a2:	0609      	lsls	r1, r1, #24
100625a4:	1841      	adds	r1, r0, r1
100625a6:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
100625a8:	4281      	cmp	r1, r0
100625aa:	d801      	bhi.n	100625b0 <smp_sap_sm2_packet_data_signing_validate+0x5a>
100625ac:	1c40      	adds	r0, r0, #1
100625ae:	d110      	bne.n	100625d2 <smp_sap_sm2_packet_data_signing_validate+0x7c>
100625b0:	9101      	str	r1, [sp, #4]
100625b2:	b2fa      	uxtb	r2, r7
100625b4:	a805      	add	r0, sp, #20
100625b6:	ae09      	add	r6, sp, #36	@ 0x24
100625b8:	4629      	mov	r1, r5
100625ba:	4633      	mov	r3, r6
100625bc:	f7ff f8e2 	bl	10061784 <smp_crt_generate_cmac_tag>
100625c0:	a802      	add	r0, sp, #8
100625c2:	1d00      	adds	r0, r0, #4
100625c4:	3608      	adds	r6, #8
100625c6:	2208      	movs	r2, #8
100625c8:	4631      	mov	r1, r6
100625ca:	f7f0 f863 	bl	10052694 <BLEPLAT_MemCmp>
100625ce:	2800      	cmp	r0, #0
100625d0:	d001      	beq.n	100625d6 <smp_sap_sm2_packet_data_signing_validate+0x80>
100625d2:	2005      	movs	r0, #5
100625d4:	e002      	b.n	100625dc <smp_sap_sm2_packet_data_signing_validate+0x86>
100625d6:	9801      	ldr	r0, [sp, #4]
100625d8:	66e0      	str	r0, [r4, #108]	@ 0x6c
100625da:	2000      	movs	r0, #0
100625dc:	b00d      	add	sp, #52	@ 0x34
100625de:	bdf0      	pop	{r4, r5, r6, r7, pc}

100625e0 <nvm_gatt_db_read_init>:
100625e0:	4801      	ldr	r0, [pc, #4]	@ (100625e8 <__arm_cp.0_0>)
100625e2:	2100      	movs	r1, #0
100625e4:	7001      	strb	r1, [r0, #0]
100625e6:	4770      	bx	lr

100625e8 <__arm_cp.0_0>:
100625e8:	200024c0 	.word	0x200024c0

100625ec <nvm_gatt_db_read_next_record>:
100625ec:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100625ee:	4603      	mov	r3, r0
100625f0:	4d06      	ldr	r5, [pc, #24]	@ (1006260c <__arm_cp.1_0>)
100625f2:	7828      	ldrb	r0, [r5, #0]
100625f4:	210c      	movs	r1, #12
100625f6:	9100      	str	r1, [sp, #0]
100625f8:	2401      	movs	r4, #1
100625fa:	2200      	movs	r2, #0
100625fc:	4621      	mov	r1, r4
100625fe:	f7ef ff61 	bl	100524c4 <BLEPLAT_NvmGet>
10062602:	702c      	strb	r4, [r5, #0]
10062604:	f000 f804 	bl	10062610 <nvm_convert_bleplat_to_blestack_status>
10062608:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1006260a:	46c0      	nop			@ (mov r8, r8)

1006260c <__arm_cp.1_0>:
1006260c:	200024c0 	.word	0x200024c0

10062610 <nvm_convert_bleplat_to_blestack_status>:
10062610:	1cc0      	adds	r0, r0, #3
10062612:	b2c0      	uxtb	r0, r0
10062614:	2804      	cmp	r0, #4
10062616:	d302      	bcc.n	1006261e <nvm_convert_bleplat_to_blestack_status+0xe>
10062618:	207e      	movs	r0, #126	@ 0x7e
1006261a:	43c0      	mvns	r0, r0
1006261c:	e002      	b.n	10062624 <nvm_convert_bleplat_to_blestack_status+0x14>
1006261e:	00c1      	lsls	r1, r0, #3
10062620:	4801      	ldr	r0, [pc, #4]	@ (10062628 <__arm_cp.2_0>)
10062622:	40c8      	lsrs	r0, r1
10062624:	b2c0      	uxtb	r0, r0
10062626:	4770      	bx	lr

10062628 <__arm_cp.2_0>:
10062628:	00b4b7b3 	.word	0x00b4b7b3

1006262c <nvm_gatt_db_read_full_current_record>:
1006262c:	b5e0      	push	{r5, r6, r7, lr}
1006262e:	4603      	mov	r3, r0
10062630:	9100      	str	r1, [sp, #0]
10062632:	2002      	movs	r0, #2
10062634:	2101      	movs	r1, #1
10062636:	220c      	movs	r2, #12
10062638:	f7ef ff44 	bl	100524c4 <BLEPLAT_NvmGet>
1006263c:	f7ff ffe8 	bl	10062610 <nvm_convert_bleplat_to_blestack_status>
10062640:	bd8c      	pop	{r2, r3, r7, pc}

10062642 <nvm_gatt_db_update_record>:
10062642:	b5e0      	push	{r5, r6, r7, lr}
10062644:	460b      	mov	r3, r1
10062646:	4601      	mov	r1, r0
10062648:	8900      	ldrh	r0, [r0, #8]
1006264a:	9000      	str	r0, [sp, #0]
1006264c:	2001      	movs	r0, #1
1006264e:	220c      	movs	r2, #12
10062650:	f7ef feea 	bl	10052428 <BLEPLAT_NvmAdd>
10062654:	f7ff ffdc 	bl	10062610 <nvm_convert_bleplat_to_blestack_status>
10062658:	bd8c      	pop	{r2, r3, r7, pc}
	...

1006265c <nvm_sec_db_read_init>:
1006265c:	4801      	ldr	r0, [pc, #4]	@ (10062664 <__arm_cp.5_0>)
1006265e:	2100      	movs	r1, #0
10062660:	7001      	strb	r1, [r0, #0]
10062662:	4770      	bx	lr

10062664 <__arm_cp.5_0>:
10062664:	200024c1 	.word	0x200024c1

10062668 <nvm_sec_db_read_next_record>:
10062668:	b51c      	push	{r2, r3, r4, lr}
1006266a:	4603      	mov	r3, r0
1006266c:	4c06      	ldr	r4, [pc, #24]	@ (10062688 <__arm_cp.6_0>)
1006266e:	7820      	ldrb	r0, [r4, #0]
10062670:	2150      	movs	r1, #80	@ 0x50
10062672:	9100      	str	r1, [sp, #0]
10062674:	2100      	movs	r1, #0
10062676:	460a      	mov	r2, r1
10062678:	f7ef ff24 	bl	100524c4 <BLEPLAT_NvmGet>
1006267c:	2101      	movs	r1, #1
1006267e:	7021      	strb	r1, [r4, #0]
10062680:	f7ff ffc6 	bl	10062610 <nvm_convert_bleplat_to_blestack_status>
10062684:	bd1c      	pop	{r2, r3, r4, pc}
10062686:	46c0      	nop			@ (mov r8, r8)

10062688 <__arm_cp.6_0>:
10062688:	200024c1 	.word	0x200024c1

1006268c <nvm_sec_db_add_record>:
1006268c:	b5e0      	push	{r5, r6, r7, lr}
1006268e:	4601      	mov	r1, r0
10062690:	2000      	movs	r0, #0
10062692:	9000      	str	r0, [sp, #0]
10062694:	2250      	movs	r2, #80	@ 0x50
10062696:	4603      	mov	r3, r0
10062698:	f7ef fec6 	bl	10052428 <BLEPLAT_NvmAdd>
1006269c:	f7ff ffb8 	bl	10062610 <nvm_convert_bleplat_to_blestack_status>
100626a0:	bd8c      	pop	{r2, r3, r7, pc}

100626a2 <nvm_sec_db_get_record_count>:
100626a2:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100626a4:	2400      	movs	r4, #0
100626a6:	4621      	mov	r1, r4
100626a8:	4620      	mov	r0, r4
100626aa:	460d      	mov	r5, r1
100626ac:	9400      	str	r4, [sp, #0]
100626ae:	b2c0      	uxtb	r0, r0
100626b0:	4621      	mov	r1, r4
100626b2:	4622      	mov	r2, r4
100626b4:	4623      	mov	r3, r4
100626b6:	f7ef ff05 	bl	100524c4 <BLEPLAT_NvmGet>
100626ba:	1cc2      	adds	r2, r0, #3
100626bc:	1c69      	adds	r1, r5, #1
100626be:	2001      	movs	r0, #1
100626c0:	2a00      	cmp	r2, #0
100626c2:	d1f2      	bne.n	100626aa <nvm_sec_db_get_record_count+0x8>
100626c4:	b2e8      	uxtb	r0, r5
100626c6:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100626c8 <nvm_discard_current_record>:
100626c8:	b580      	push	{r7, lr}
100626ca:	2002      	movs	r0, #2
100626cc:	f7ef ff9c 	bl	10052608 <BLEPLAT_NvmDiscard>
100626d0:	bd80      	pop	{r7, pc}

100626d2 <nvm_dev_id_data_get_record>:
100626d2:	b5e0      	push	{r5, r6, r7, lr}
100626d4:	4603      	mov	r3, r0
100626d6:	2026      	movs	r0, #38	@ 0x26
100626d8:	9000      	str	r0, [sp, #0]
100626da:	2102      	movs	r1, #2
100626dc:	2000      	movs	r0, #0
100626de:	4602      	mov	r2, r0
100626e0:	f7ef fef0 	bl	100524c4 <BLEPLAT_NvmGet>
100626e4:	2800      	cmp	r0, #0
100626e6:	d000      	beq.n	100626ea <nvm_dev_id_data_get_record+0x18>
100626e8:	2081      	movs	r0, #129	@ 0x81
100626ea:	bd8c      	pop	{r2, r3, r7, pc}

100626ec <nvm_dev_id_data_add_record>:
100626ec:	b5e0      	push	{r5, r6, r7, lr}
100626ee:	4601      	mov	r1, r0
100626f0:	2300      	movs	r3, #0
100626f2:	9300      	str	r3, [sp, #0]
100626f4:	2002      	movs	r0, #2
100626f6:	2226      	movs	r2, #38	@ 0x26
100626f8:	f7ef fe96 	bl	10052428 <BLEPLAT_NvmAdd>
100626fc:	2800      	cmp	r0, #0
100626fe:	d000      	beq.n	10062702 <nvm_dev_id_data_add_record+0x16>
10062700:	2081      	movs	r0, #129	@ 0x81
10062702:	bd8c      	pop	{r2, r3, r7, pc}

10062704 <tsk_init>:
10062704:	4803      	ldr	r0, [pc, #12]	@ (10062714 <__arm_cp.0_0>)
10062706:	6800      	ldr	r0, [r0, #0]
10062708:	2100      	movs	r1, #0
1006270a:	6081      	str	r1, [r0, #8]
1006270c:	60c1      	str	r1, [r0, #12]
1006270e:	6101      	str	r1, [r0, #16]
10062710:	6001      	str	r1, [r0, #0]
10062712:	4770      	bx	lr

10062714 <__arm_cp.0_0>:
10062714:	200024c4 	.word	0x200024c4

10062718 <tsk_scheduler>:
10062718:	b570      	push	{r4, r5, r6, lr}
1006271a:	4d17      	ldr	r5, [pc, #92]	@ (10062778 <__arm_cp.1_0>)
1006271c:	6828      	ldr	r0, [r5, #0]
1006271e:	f3ef 8110 	mrs	r1, PRIMASK
10062722:	b672      	cpsid	i
10062724:	6801      	ldr	r1, [r0, #0]
10062726:	2600      	movs	r6, #0
10062728:	6006      	str	r6, [r0, #0]
1006272a:	6842      	ldr	r2, [r0, #4]
1006272c:	430a      	orrs	r2, r1
1006272e:	6042      	str	r2, [r0, #4]
10062730:	b662      	cpsie	i
10062732:	682c      	ldr	r4, [r5, #0]
10062734:	3410      	adds	r4, #16
10062736:	6820      	ldr	r0, [r4, #0]
10062738:	2800      	cmp	r0, #0
1006273a:	d00f      	beq.n	1006275c <tsk_scheduler+0x44>
1006273c:	4620      	mov	r0, r4
1006273e:	f000 f85b 	bl	100627f8 <lsbit>
10062742:	0080      	lsls	r0, r0, #2
10062744:	6829      	ldr	r1, [r5, #0]
10062746:	1808      	adds	r0, r1, r0
10062748:	f3ef 8210 	mrs	r2, PRIMASK
1006274c:	b672      	cpsid	i
1006274e:	6882      	ldr	r2, [r0, #8]
10062750:	6086      	str	r6, [r0, #8]
10062752:	6848      	ldr	r0, [r1, #4]
10062754:	4310      	orrs	r0, r2
10062756:	6048      	str	r0, [r1, #4]
10062758:	b662      	cpsie	i
1006275a:	e7ec      	b.n	10062736 <tsk_scheduler+0x1e>
1006275c:	6828      	ldr	r0, [r5, #0]
1006275e:	1d04      	adds	r4, r0, #4
10062760:	4d06      	ldr	r5, [pc, #24]	@ (1006277c <__arm_cp.1_1>)
10062762:	6820      	ldr	r0, [r4, #0]
10062764:	2800      	cmp	r0, #0
10062766:	d006      	beq.n	10062776 <tsk_scheduler+0x5e>
10062768:	4620      	mov	r0, r4
1006276a:	f000 f845 	bl	100627f8 <lsbit>
1006276e:	0081      	lsls	r1, r0, #2
10062770:	5869      	ldr	r1, [r5, r1]
10062772:	4788      	blx	r1
10062774:	e7f5      	b.n	10062762 <tsk_scheduler+0x4a>
10062776:	bd70      	pop	{r4, r5, r6, pc}

10062778 <__arm_cp.1_0>:
10062778:	200024c4 	.word	0x200024c4

1006277c <__arm_cp.1_1>:
1006277c:	10069760 	.word	0x10069760

10062780 <tsk_notify_idx>:
10062780:	211f      	movs	r1, #31
10062782:	4001      	ands	r1, r0
10062784:	2201      	movs	r2, #1
10062786:	408a      	lsls	r2, r1
10062788:	f3ef 8110 	mrs	r1, PRIMASK
1006278c:	b672      	cpsid	i
1006278e:	4904      	ldr	r1, [pc, #16]	@ (100627a0 <__arm_cp.3_0>)
10062790:	6809      	ldr	r1, [r1, #0]
10062792:	0940      	lsrs	r0, r0, #5
10062794:	0080      	lsls	r0, r0, #2
10062796:	580b      	ldr	r3, [r1, r0]
10062798:	4313      	orrs	r3, r2
1006279a:	500b      	str	r3, [r1, r0]
1006279c:	b662      	cpsie	i
1006279e:	4770      	bx	lr

100627a0 <__arm_cp.3_0>:
100627a0:	200024c4 	.word	0x200024c4

100627a4 <tsk_wait_resource_idx>:
100627a4:	221f      	movs	r2, #31
100627a6:	4002      	ands	r2, r0
100627a8:	2301      	movs	r3, #1
100627aa:	4093      	lsls	r3, r2
100627ac:	f3ef 8210 	mrs	r2, PRIMASK
100627b0:	b672      	cpsid	i
100627b2:	0089      	lsls	r1, r1, #2
100627b4:	4a05      	ldr	r2, [pc, #20]	@ (100627cc <__arm_cp.4_0>)
100627b6:	6812      	ldr	r2, [r2, #0]
100627b8:	1851      	adds	r1, r2, r1
100627ba:	0940      	lsrs	r0, r0, #5
100627bc:	0080      	lsls	r0, r0, #2
100627be:	1808      	adds	r0, r1, r0
100627c0:	6881      	ldr	r1, [r0, #8]
100627c2:	4319      	orrs	r1, r3
100627c4:	6081      	str	r1, [r0, #8]
100627c6:	b662      	cpsie	i
100627c8:	4770      	bx	lr
100627ca:	46c0      	nop			@ (mov r8, r8)

100627cc <__arm_cp.4_0>:
100627cc:	200024c4 	.word	0x200024c4

100627d0 <tsk_signal_resource_idx>:
100627d0:	211f      	movs	r1, #31
100627d2:	4001      	ands	r1, r0
100627d4:	2201      	movs	r2, #1
100627d6:	408a      	lsls	r2, r1
100627d8:	f3ef 8110 	mrs	r1, PRIMASK
100627dc:	b672      	cpsid	i
100627de:	4905      	ldr	r1, [pc, #20]	@ (100627f4 <__arm_cp.5_0>)
100627e0:	6809      	ldr	r1, [r1, #0]
100627e2:	0940      	lsrs	r0, r0, #5
100627e4:	0080      	lsls	r0, r0, #2
100627e6:	1808      	adds	r0, r1, r0
100627e8:	6901      	ldr	r1, [r0, #16]
100627ea:	4311      	orrs	r1, r2
100627ec:	6101      	str	r1, [r0, #16]
100627ee:	b662      	cpsie	i
100627f0:	4770      	bx	lr
100627f2:	46c0      	nop			@ (mov r8, r8)

100627f4 <__arm_cp.5_0>:
100627f4:	200024c4 	.word	0x200024c4

100627f8 <lsbit>:
100627f8:	f3ef 8110 	mrs	r1, PRIMASK
100627fc:	b672      	cpsid	i
100627fe:	6801      	ldr	r1, [r0, #0]
10062800:	424a      	negs	r2, r1
10062802:	400a      	ands	r2, r1
10062804:	4051      	eors	r1, r2
10062806:	6001      	str	r1, [r0, #0]
10062808:	4803      	ldr	r0, [pc, #12]	@ (10062818 <__arm_cp.7_0>)
1006280a:	4350      	muls	r0, r2
1006280c:	0ec0      	lsrs	r0, r0, #27
1006280e:	a103      	add	r1, pc, #12	@ (adr r1, 1006281c <__arm_cp.7_0+0x4>)
10062810:	5c08      	ldrb	r0, [r1, r0]
10062812:	b662      	cpsie	i
10062814:	4770      	bx	lr
10062816:	46c0      	nop			@ (mov r8, r8)

10062818 <__arm_cp.7_0>:
10062818:	04653adf 	.word	0x04653adf
1006281c:	06020100 	.word	0x06020100
10062820:	10070b03 	.word	0x10070b03
10062824:	150c0e04 	.word	0x150c0e04
10062828:	1a111708 	.word	0x1a111708
1006282c:	0f0a051f 	.word	0x0f0a051f
10062830:	1916140d 	.word	0x1916140d
10062834:	1813091e 	.word	0x1813091e
10062838:	1b1c121d 	.word	0x1b1c121d

1006283c <CST_init>:
1006283c:	b510      	push	{r4, lr}
1006283e:	2412      	movs	r4, #18
10062840:	2800      	cmp	r0, #0
10062842:	d00e      	beq.n	10062862 <CST_init+0x26>
10062844:	2a00      	cmp	r2, #0
10062846:	d00c      	beq.n	10062862 <CST_init+0x26>
10062848:	2b0b      	cmp	r3, #11
1006284a:	d80a      	bhi.n	10062862 <CST_init+0x26>
1006284c:	7041      	strb	r1, [r0, #1]
1006284e:	7003      	strb	r3, [r0, #0]
10062850:	6a03      	ldr	r3, [r0, #32]
10062852:	5459      	strb	r1, [r3, r1]
10062854:	1e49      	subs	r1, r1, #1
10062856:	1c4b      	adds	r3, r1, #1
10062858:	d3fa      	bcc.n	10062850 <CST_init+0x14>
1006285a:	6102      	str	r2, [r0, #16]
1006285c:	2400      	movs	r4, #0
1006285e:	7504      	strb	r4, [r0, #20]
10062860:	61c0      	str	r0, [r0, #28]
10062862:	4620      	mov	r0, r4
10062864:	bd10      	pop	{r4, pc}

10062866 <CST_stop>:
10062866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062868:	4605      	mov	r5, r0
1006286a:	2012      	movs	r0, #18
1006286c:	2d00      	cmp	r5, #0
1006286e:	d01b      	beq.n	100628a8 <CST_stop+0x42>
10062870:	460c      	mov	r4, r1
10062872:	786a      	ldrb	r2, [r5, #1]
10062874:	428a      	cmp	r2, r1
10062876:	d917      	bls.n	100628a8 <CST_stop+0x42>
10062878:	6a2b      	ldr	r3, [r5, #32]
1006287a:	5d19      	ldrb	r1, [r3, r4]
1006287c:	42a1      	cmp	r1, r4
1006287e:	d101      	bne.n	10062884 <CST_stop+0x1e>
10062880:	2000      	movs	r0, #0
10062882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062884:	4617      	mov	r7, r2
10062886:	463e      	mov	r6, r7
10062888:	5ddf      	ldrb	r7, [r3, r7]
1006288a:	4297      	cmp	r7, r2
1006288c:	d001      	beq.n	10062892 <CST_stop+0x2c>
1006288e:	42a7      	cmp	r7, r4
10062890:	d1f9      	bne.n	10062886 <CST_stop+0x20>
10062892:	2000      	movs	r0, #0
10062894:	4297      	cmp	r7, r2
10062896:	d005      	beq.n	100628a4 <CST_stop+0x3e>
10062898:	5599      	strb	r1, [r3, r6]
1006289a:	4296      	cmp	r6, r2
1006289c:	d102      	bne.n	100628a4 <CST_stop+0x3e>
1006289e:	4628      	mov	r0, r5
100628a0:	f000 f803 	bl	100628aa <Timer_TryStartFirstActive>
100628a4:	6a29      	ldr	r1, [r5, #32]
100628a6:	550c      	strb	r4, [r1, r4]
100628a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100628aa <Timer_TryStartFirstActive>:
100628aa:	b510      	push	{r4, lr}
100628ac:	7842      	ldrb	r2, [r0, #1]
100628ae:	428a      	cmp	r2, r1
100628b0:	d107      	bne.n	100628c2 <Timer_TryStartFirstActive+0x18>
100628b2:	7d01      	ldrb	r1, [r0, #20]
100628b4:	2400      	movs	r4, #0
100628b6:	2900      	cmp	r1, #0
100628b8:	d009      	beq.n	100628ce <Timer_TryStartFirstActive+0x24>
100628ba:	3008      	adds	r0, #8
100628bc:	f7ef ffb0 	bl	10052820 <BLEPLAT_StopTimer>
100628c0:	e005      	b.n	100628ce <Timer_TryStartFirstActive+0x24>
100628c2:	0049      	lsls	r1, r1, #1
100628c4:	6a42      	ldr	r2, [r0, #36]	@ 0x24
100628c6:	5e51      	ldrsh	r1, [r2, r1]
100628c8:	f000 f86a 	bl	100629a0 <Timer_StartFirstActive_sysT>
100628cc:	4604      	mov	r4, r0
100628ce:	4620      	mov	r0, r4
100628d0:	bd10      	pop	{r4, pc}

100628d2 <CST_start>:
100628d2:	b5f0      	push	{r4, r5, r6, r7, lr}
100628d4:	b085      	sub	sp, #20
100628d6:	2612      	movs	r6, #18
100628d8:	2800      	cmp	r0, #0
100628da:	d05e      	beq.n	1006299a <CST_start+0xc8>
100628dc:	461f      	mov	r7, r3
100628de:	460d      	mov	r5, r1
100628e0:	4604      	mov	r4, r0
100628e2:	7843      	ldrb	r3, [r0, #1]
100628e4:	428b      	cmp	r3, r1
100628e6:	d958      	bls.n	1006299a <CST_start+0xc8>
100628e8:	7820      	ldrb	r0, [r4, #0]
100628ea:	2105      	movs	r1, #5
100628ec:	0309      	lsls	r1, r1, #12
100628ee:	4081      	lsls	r1, r0
100628f0:	428f      	cmp	r7, r1
100628f2:	d852      	bhi.n	1006299a <CST_start+0xc8>
100628f4:	9204      	str	r2, [sp, #16]
100628f6:	9302      	str	r3, [sp, #8]
100628f8:	f7ef ff77 	bl	100527ea <BLEPLAT_GetCurrentSysTime>
100628fc:	4602      	mov	r2, r0
100628fe:	7823      	ldrb	r3, [r4, #0]
10062900:	6a20      	ldr	r0, [r4, #32]
10062902:	5d40      	ldrb	r0, [r0, r5]
10062904:	42a8      	cmp	r0, r5
10062906:	d00c      	beq.n	10062922 <CST_start+0x50>
10062908:	9804      	ldr	r0, [sp, #16]
1006290a:	2800      	cmp	r0, #0
1006290c:	d045      	beq.n	1006299a <CST_start+0xc8>
1006290e:	4620      	mov	r0, r4
10062910:	9103      	str	r1, [sp, #12]
10062912:	4629      	mov	r1, r5
10062914:	9304      	str	r3, [sp, #16]
10062916:	4616      	mov	r6, r2
10062918:	f7ff ffa5 	bl	10062866 <CST_stop>
1006291c:	9903      	ldr	r1, [sp, #12]
1006291e:	4632      	mov	r2, r6
10062920:	9b04      	ldr	r3, [sp, #16]
10062922:	2033      	movs	r0, #51	@ 0x33
10062924:	4378      	muls	r0, r7
10062926:	460e      	mov	r6, r1
10062928:	0a01      	lsrs	r1, r0, #8
1006292a:	1808      	adds	r0, r1, r0
1006292c:	0c01      	lsrs	r1, r0, #16
1006292e:	1808      	adds	r0, r1, r0
10062930:	0771      	lsls	r1, r6, #29
10062932:	08d2      	lsrs	r2, r2, #3
10062934:	1851      	adds	r1, r2, r1
10062936:	1842      	adds	r2, r0, r1
10062938:	1d58      	adds	r0, r3, #5
1006293a:	b2c0      	uxtb	r0, r0
1006293c:	40c2      	lsrs	r2, r0
1006293e:	9501      	str	r5, [sp, #4]
10062940:	0068      	lsls	r0, r5, #1
10062942:	6a61      	ldr	r1, [r4, #36]	@ 0x24
10062944:	9204      	str	r2, [sp, #16]
10062946:	520a      	strh	r2, [r1, r0]
10062948:	f7ef ff4f 	bl	100527ea <BLEPLAT_GetCurrentSysTime>
1006294c:	08c0      	lsrs	r0, r0, #3
1006294e:	9003      	str	r0, [sp, #12]
10062950:	7862      	ldrb	r2, [r4, #1]
10062952:	6a20      	ldr	r0, [r4, #32]
10062954:	4617      	mov	r7, r2
10062956:	463b      	mov	r3, r7
10062958:	5dc7      	ldrb	r7, [r0, r7]
1006295a:	4297      	cmp	r7, r2
1006295c:	d00d      	beq.n	1006297a <CST_start+0xa8>
1006295e:	007d      	lsls	r5, r7, #1
10062960:	6a66      	ldr	r6, [r4, #36]	@ 0x24
10062962:	5b75      	ldrh	r5, [r6, r5]
10062964:	7826      	ldrb	r6, [r4, #0]
10062966:	1d76      	adds	r6, r6, #5
10062968:	9903      	ldr	r1, [sp, #12]
1006296a:	40f1      	lsrs	r1, r6
1006296c:	1a6d      	subs	r5, r5, r1
1006296e:	b22d      	sxth	r5, r5
10062970:	9e04      	ldr	r6, [sp, #16]
10062972:	1a71      	subs	r1, r6, r1
10062974:	b209      	sxth	r1, r1
10062976:	428d      	cmp	r5, r1
10062978:	dded      	ble.n	10062956 <CST_start+0x84>
1006297a:	5cc1      	ldrb	r1, [r0, r3]
1006297c:	9a01      	ldr	r2, [sp, #4]
1006297e:	5481      	strb	r1, [r0, r2]
10062980:	6a20      	ldr	r0, [r4, #32]
10062982:	54c2      	strb	r2, [r0, r3]
10062984:	9802      	ldr	r0, [sp, #8]
10062986:	4283      	cmp	r3, r0
10062988:	d106      	bne.n	10062998 <CST_start+0xc6>
1006298a:	9804      	ldr	r0, [sp, #16]
1006298c:	b201      	sxth	r1, r0
1006298e:	4620      	mov	r0, r4
10062990:	f000 f806 	bl	100629a0 <Timer_StartFirstActive_sysT>
10062994:	4606      	mov	r6, r0
10062996:	e000      	b.n	1006299a <CST_start+0xc8>
10062998:	2600      	movs	r6, #0
1006299a:	4630      	mov	r0, r6
1006299c:	b005      	add	sp, #20
1006299e:	bdf0      	pop	{r4, r5, r6, r7, pc}

100629a0 <Timer_StartFirstActive_sysT>:
100629a0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100629a2:	9101      	str	r1, [sp, #4]
100629a4:	4604      	mov	r4, r0
100629a6:	4607      	mov	r7, r0
100629a8:	3708      	adds	r7, #8
100629aa:	f7ef ff1e 	bl	100527ea <BLEPLAT_GetCurrentSysTime>
100629ae:	9002      	str	r0, [sp, #8]
100629b0:	460d      	mov	r5, r1
100629b2:	7826      	ldrb	r6, [r4, #0]
100629b4:	7d20      	ldrb	r0, [r4, #20]
100629b6:	2800      	cmp	r0, #0
100629b8:	d004      	beq.n	100629c4 <Timer_StartFirstActive_sysT+0x24>
100629ba:	4638      	mov	r0, r7
100629bc:	f7ef ff30 	bl	10052820 <BLEPLAT_StopTimer>
100629c0:	7822      	ldrb	r2, [r4, #0]
100629c2:	e000      	b.n	100629c6 <Timer_StartFirstActive_sysT+0x26>
100629c4:	4632      	mov	r2, r6
100629c6:	1d70      	adds	r0, r6, #5
100629c8:	9c02      	ldr	r4, [sp, #8]
100629ca:	08e1      	lsrs	r1, r4, #3
100629cc:	40c1      	lsrs	r1, r0
100629ce:	9801      	ldr	r0, [sp, #4]
100629d0:	1a40      	subs	r0, r0, r1
100629d2:	b200      	sxth	r0, r0
100629d4:	1e40      	subs	r0, r0, #1
100629d6:	17c1      	asrs	r1, r0, #31
100629d8:	3208      	adds	r2, #8
100629da:	f7dd fda7 	bl	1004052c <__aeabi_llsl>
100629de:	1902      	adds	r2, r0, r4
100629e0:	414d      	adcs	r5, r1
100629e2:	4638      	mov	r0, r7
100629e4:	462b      	mov	r3, r5
100629e6:	f7ef ff0a 	bl	100527fe <BLEPLAT_StartTimer>
100629ea:	b2c0      	uxtb	r0, r0
100629ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100629ee <cst_sharedCallback>:
100629ee:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100629f0:	9102      	str	r1, [sp, #8]
100629f2:	4605      	mov	r5, r0
100629f4:	7847      	ldrb	r7, [r0, #1]
100629f6:	6a00      	ldr	r0, [r0, #32]
100629f8:	5dc4      	ldrb	r4, [r0, r7]
100629fa:	f7ef fef6 	bl	100527ea <BLEPLAT_GetCurrentSysTime>
100629fe:	08c0      	lsrs	r0, r0, #3
10062a00:	9001      	str	r0, [sp, #4]
10062a02:	4620      	mov	r0, r4
10062a04:	b2c2      	uxtb	r2, r0
10062a06:	42ba      	cmp	r2, r7
10062a08:	d00d      	beq.n	10062a26 <cst_sharedCallback+0x38>
10062a0a:	0053      	lsls	r3, r2, #1
10062a0c:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
10062a0e:	5af3      	ldrh	r3, [r6, r3]
10062a10:	782e      	ldrb	r6, [r5, #0]
10062a12:	1d76      	adds	r6, r6, #5
10062a14:	9901      	ldr	r1, [sp, #4]
10062a16:	40f1      	lsrs	r1, r6
10062a18:	1a59      	subs	r1, r3, r1
10062a1a:	b209      	sxth	r1, r1
10062a1c:	2901      	cmp	r1, #1
10062a1e:	dc03      	bgt.n	10062a28 <cst_sharedCallback+0x3a>
10062a20:	6a28      	ldr	r0, [r5, #32]
10062a22:	5c80      	ldrb	r0, [r0, r2]
10062a24:	e7ee      	b.n	10062a04 <cst_sharedCallback+0x16>
10062a26:	4638      	mov	r0, r7
10062a28:	6a29      	ldr	r1, [r5, #32]
10062a2a:	55c8      	strb	r0, [r1, r7]
10062a2c:	b2c6      	uxtb	r6, r0
10062a2e:	4628      	mov	r0, r5
10062a30:	4631      	mov	r1, r6
10062a32:	f7ff ff3a 	bl	100628aa <Timer_TryStartFirstActive>
10062a36:	b2e0      	uxtb	r0, r4
10062a38:	42b0      	cmp	r0, r6
10062a3a:	d006      	beq.n	10062a4a <cst_sharedCallback+0x5c>
10062a3c:	6a29      	ldr	r1, [r5, #32]
10062a3e:	5c0f      	ldrb	r7, [r1, r0]
10062a40:	540c      	strb	r4, [r1, r0]
10062a42:	9902      	ldr	r1, [sp, #8]
10062a44:	4788      	blx	r1
10062a46:	463c      	mov	r4, r7
10062a48:	e7f5      	b.n	10062a36 <cst_sharedCallback+0x48>
10062a4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10062a4c <copy_swap_buffer>:
10062a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10062a4e:	2a00      	cmp	r2, #0
10062a50:	d00b      	beq.n	10062a6a <copy_swap_buffer+0x1e>
10062a52:	2400      	movs	r4, #0
10062a54:	43e5      	mvns	r5, r4
10062a56:	2b00      	cmp	r3, #0
10062a58:	4626      	mov	r6, r4
10062a5a:	d000      	beq.n	10062a5e <copy_swap_buffer+0x12>
10062a5c:	1956      	adds	r6, r2, r5
10062a5e:	5d0f      	ldrb	r7, [r1, r4]
10062a60:	5587      	strb	r7, [r0, r6]
10062a62:	1e6d      	subs	r5, r5, #1
10062a64:	1c64      	adds	r4, r4, #1
10062a66:	42a2      	cmp	r2, r4
10062a68:	d1f5      	bne.n	10062a56 <copy_swap_buffer+0xa>
10062a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062a6c <is_Buffer_All_Set_To>:
10062a6c:	b570      	push	{r4, r5, r6, lr}
10062a6e:	4603      	mov	r3, r0
10062a70:	2001      	movs	r0, #1
10062a72:	2900      	cmp	r1, #0
10062a74:	d009      	beq.n	10062a8a <is_Buffer_All_Set_To+0x1e>
10062a76:	2400      	movs	r4, #0
10062a78:	4626      	mov	r6, r4
10062a7a:	4625      	mov	r5, r4
10062a7c:	5d96      	ldrb	r6, [r2, r6]
10062a7e:	429e      	cmp	r6, r3
10062a80:	d104      	bne.n	10062a8c <is_Buffer_All_Set_To+0x20>
10062a82:	1c6d      	adds	r5, r5, #1
10062a84:	b2ee      	uxtb	r6, r5
10062a86:	428e      	cmp	r6, r1
10062a88:	d3f8      	bcc.n	10062a7c <is_Buffer_All_Set_To+0x10>
10062a8a:	bd70      	pop	{r4, r5, r6, pc}
10062a8c:	4620      	mov	r0, r4
10062a8e:	bd70      	pop	{r4, r5, r6, pc}

10062a90 <char_copy>:
10062a90:	2a00      	cmp	r2, #0
10062a92:	d005      	beq.n	10062aa0 <char_copy+0x10>
10062a94:	7803      	ldrb	r3, [r0, #0]
10062a96:	700b      	strb	r3, [r1, #0]
10062a98:	1e52      	subs	r2, r2, #1
10062a9a:	1c49      	adds	r1, r1, #1
10062a9c:	1c40      	adds	r0, r0, #1
10062a9e:	e7f7      	b.n	10062a90 <char_copy>
10062aa0:	4770      	bx	lr

10062aa2 <UUID_cmp>:
10062aa2:	b580      	push	{r7, lr}
10062aa4:	7c02      	ldrb	r2, [r0, #16]
10062aa6:	7c0b      	ldrb	r3, [r1, #16]
10062aa8:	429a      	cmp	r2, r3
10062aaa:	d106      	bne.n	10062aba <UUID_cmp+0x18>
10062aac:	2a20      	cmp	r2, #32
10062aae:	d007      	beq.n	10062ac0 <UUID_cmp+0x1e>
10062ab0:	2a10      	cmp	r2, #16
10062ab2:	d109      	bne.n	10062ac8 <UUID_cmp+0x26>
10062ab4:	8989      	ldrh	r1, [r1, #12]
10062ab6:	8980      	ldrh	r0, [r0, #12]
10062ab8:	e008      	b.n	10062acc <UUID_cmp+0x2a>
10062aba:	2000      	movs	r0, #0
10062abc:	43c0      	mvns	r0, r0
10062abe:	bd80      	pop	{r7, pc}
10062ac0:	2210      	movs	r2, #16
10062ac2:	f7ef fde7 	bl	10052694 <BLEPLAT_MemCmp>
10062ac6:	bd80      	pop	{r7, pc}
10062ac8:	68c9      	ldr	r1, [r1, #12]
10062aca:	68c0      	ldr	r0, [r0, #12]
10062acc:	1a40      	subs	r0, r0, r1
10062ace:	bd80      	pop	{r7, pc}

10062ad0 <UUID_cmp_128bits>:
10062ad0:	b570      	push	{r4, r5, r6, lr}
10062ad2:	b08a      	sub	sp, #40	@ 0x28
10062ad4:	460c      	mov	r4, r1
10062ad6:	4601      	mov	r1, r0
10062ad8:	ad05      	add	r5, sp, #20
10062ada:	2614      	movs	r6, #20
10062adc:	4628      	mov	r0, r5
10062ade:	4632      	mov	r2, r6
10062ae0:	f7ef fdb8 	bl	10052654 <BLEPLAT_MemCpy>
10062ae4:	4668      	mov	r0, sp
10062ae6:	4621      	mov	r1, r4
10062ae8:	4632      	mov	r2, r6
10062aea:	f7ef fdb3 	bl	10052654 <BLEPLAT_MemCpy>
10062aee:	7c28      	ldrb	r0, [r5, #16]
10062af0:	2880      	cmp	r0, #128	@ 0x80
10062af2:	d007      	beq.n	10062b04 <UUID_cmp_128bits+0x34>
10062af4:	ac05      	add	r4, sp, #20
10062af6:	490d      	ldr	r1, [pc, #52]	@ (10062b2c <__arm_cp.1_0>)
10062af8:	220c      	movs	r2, #12
10062afa:	4620      	mov	r0, r4
10062afc:	f7ef fdaa 	bl	10052654 <BLEPLAT_MemCpy>
10062b00:	2000      	movs	r0, #0
10062b02:	81e0      	strh	r0, [r4, #14]
10062b04:	4668      	mov	r0, sp
10062b06:	7c00      	ldrb	r0, [r0, #16]
10062b08:	2880      	cmp	r0, #128	@ 0x80
10062b0a:	d007      	beq.n	10062b1c <UUID_cmp_128bits+0x4c>
10062b0c:	466c      	mov	r4, sp
10062b0e:	4907      	ldr	r1, [pc, #28]	@ (10062b2c <__arm_cp.1_0>)
10062b10:	220c      	movs	r2, #12
10062b12:	4620      	mov	r0, r4
10062b14:	f7ef fd9e 	bl	10052654 <BLEPLAT_MemCpy>
10062b18:	2000      	movs	r0, #0
10062b1a:	81e0      	strh	r0, [r4, #14]
10062b1c:	a805      	add	r0, sp, #20
10062b1e:	4669      	mov	r1, sp
10062b20:	2210      	movs	r2, #16
10062b22:	f7ef fdb7 	bl	10052694 <BLEPLAT_MemCmp>
10062b26:	b00a      	add	sp, #40	@ 0x28
10062b28:	bd70      	pop	{r4, r5, r6, pc}
10062b2a:	46c0      	nop			@ (mov r8, r8)

10062b2c <__arm_cp.1_0>:
10062b2c:	100697b8 	.word	0x100697b8

10062b30 <UUID_write_to_flat>:
10062b30:	b510      	push	{r4, lr}
10062b32:	460a      	mov	r2, r1
10062b34:	4601      	mov	r1, r0
10062b36:	7c00      	ldrb	r0, [r0, #16]
10062b38:	2820      	cmp	r0, #32
10062b3a:	d004      	beq.n	10062b46 <UUID_write_to_flat+0x16>
10062b3c:	2810      	cmp	r0, #16
10062b3e:	d105      	bne.n	10062b4c <UUID_write_to_flat+0x1c>
10062b40:	310c      	adds	r1, #12
10062b42:	2402      	movs	r4, #2
10062b44:	e003      	b.n	10062b4e <UUID_write_to_flat+0x1e>
10062b46:	310c      	adds	r1, #12
10062b48:	2404      	movs	r4, #4
10062b4a:	e000      	b.n	10062b4e <UUID_write_to_flat+0x1e>
10062b4c:	2410      	movs	r4, #16
10062b4e:	4610      	mov	r0, r2
10062b50:	4622      	mov	r2, r4
10062b52:	f7ef fd7f 	bl	10052654 <BLEPLAT_MemCpy>
10062b56:	4620      	mov	r0, r4
10062b58:	bd10      	pop	{r4, pc}

10062b5a <UUID_get_value_p>:
10062b5a:	7c01      	ldrb	r1, [r0, #16]
10062b5c:	2980      	cmp	r1, #128	@ 0x80
10062b5e:	d000      	beq.n	10062b62 <UUID_get_value_p+0x8>
10062b60:	300c      	adds	r0, #12
10062b62:	4770      	bx	lr

10062b64 <ACL_list_init>:
10062b64:	2100      	movs	r1, #0
10062b66:	6001      	str	r1, [r0, #0]
10062b68:	6040      	str	r0, [r0, #4]
10062b6a:	4770      	bx	lr

10062b6c <ACL_list_insert_tail>:
10062b6c:	2200      	movs	r2, #0
10062b6e:	61ca      	str	r2, [r1, #28]
10062b70:	6842      	ldr	r2, [r0, #4]
10062b72:	6011      	str	r1, [r2, #0]
10062b74:	311c      	adds	r1, #28
10062b76:	6041      	str	r1, [r0, #4]
10062b78:	4770      	bx	lr

10062b7a <ACL_list_insert_head>:
10062b7a:	6802      	ldr	r2, [r0, #0]
10062b7c:	61ca      	str	r2, [r1, #28]
10062b7e:	2a00      	cmp	r2, #0
10062b80:	d102      	bne.n	10062b88 <ACL_list_insert_head+0xe>
10062b82:	460a      	mov	r2, r1
10062b84:	321c      	adds	r2, #28
10062b86:	6042      	str	r2, [r0, #4]
10062b88:	6001      	str	r1, [r0, #0]
10062b8a:	4770      	bx	lr

10062b8c <ACL_list_remove>:
10062b8c:	6803      	ldr	r3, [r0, #0]
10062b8e:	428b      	cmp	r3, r1
10062b90:	d009      	beq.n	10062ba6 <ACL_list_remove+0x1a>
10062b92:	461a      	mov	r2, r3
10062b94:	69db      	ldr	r3, [r3, #28]
10062b96:	428b      	cmp	r3, r1
10062b98:	d1fb      	bne.n	10062b92 <ACL_list_remove+0x6>
10062b9a:	69cb      	ldr	r3, [r1, #28]
10062b9c:	61d3      	str	r3, [r2, #28]
10062b9e:	2b00      	cmp	r3, #0
10062ba0:	d107      	bne.n	10062bb2 <ACL_list_remove+0x26>
10062ba2:	321c      	adds	r2, #28
10062ba4:	e004      	b.n	10062bb0 <ACL_list_remove+0x24>
10062ba6:	69ca      	ldr	r2, [r1, #28]
10062ba8:	6002      	str	r2, [r0, #0]
10062baa:	2a00      	cmp	r2, #0
10062bac:	d101      	bne.n	10062bb2 <ACL_list_remove+0x26>
10062bae:	4602      	mov	r2, r0
10062bb0:	6042      	str	r2, [r0, #4]
10062bb2:	2000      	movs	r0, #0
10062bb4:	61c8      	str	r0, [r1, #28]
10062bb6:	4770      	bx	lr

10062bb8 <ACL_list_remove_head>:
10062bb8:	4601      	mov	r1, r0
10062bba:	6800      	ldr	r0, [r0, #0]
10062bbc:	69c2      	ldr	r2, [r0, #28]
10062bbe:	600a      	str	r2, [r1, #0]
10062bc0:	2a00      	cmp	r2, #0
10062bc2:	d100      	bne.n	10062bc6 <ACL_list_remove_head+0xe>
10062bc4:	6049      	str	r1, [r1, #4]
10062bc6:	2100      	movs	r1, #0
10062bc8:	61c1      	str	r1, [r0, #28]
10062bca:	4770      	bx	lr

10062bcc <ACL_list_get_pckt_count>:
10062bcc:	2100      	movs	r1, #0
10062bce:	6800      	ldr	r0, [r0, #0]
10062bd0:	2800      	cmp	r0, #0
10062bd2:	d002      	beq.n	10062bda <ACL_list_get_pckt_count+0xe>
10062bd4:	301c      	adds	r0, #28
10062bd6:	1c49      	adds	r1, r1, #1
10062bd8:	e7f9      	b.n	10062bce <ACL_list_get_pckt_count+0x2>
10062bda:	b288      	uxth	r0, r1
10062bdc:	4770      	bx	lr
	...

10062be0 <addr8_list_search>:
10062be0:	b5f0      	push	{r4, r5, r6, r7, lr}
10062be2:	b087      	sub	sp, #28
10062be4:	4604      	mov	r4, r0
10062be6:	0608      	lsls	r0, r1, #24
10062be8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10062bea:	d052      	beq.n	10062c92 <addr8_list_search+0xb2>
10062bec:	9501      	str	r5, [sp, #4]
10062bee:	20ff      	movs	r0, #255	@ 0xff
10062bf0:	4615      	mov	r5, r2
10062bf2:	4385      	bics	r5, r0
10062bf4:	2601      	movs	r6, #1
10062bf6:	9305      	str	r3, [sp, #20]
10062bf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10062bfa:	461f      	mov	r7, r3
10062bfc:	9600      	str	r6, [sp, #0]
10062bfe:	4037      	ands	r7, r6
10062c00:	9703      	str	r7, [sp, #12]
10062c02:	427e      	negs	r6, r7
10062c04:	4016      	ands	r6, r2
10062c06:	b2f2      	uxtb	r2, r6
10062c08:	1952      	adds	r2, r2, r5
10062c0a:	9206      	str	r2, [sp, #24]
10062c0c:	4d25      	ldr	r5, [pc, #148]	@ (10062ca4 <__arm_cp.0_0>)
10062c0e:	9f05      	ldr	r7, [sp, #20]
10062c10:	463a      	mov	r2, r7
10062c12:	402a      	ands	r2, r5
10062c14:	461e      	mov	r6, r3
10062c16:	079d      	lsls	r5, r3, #30
10062c18:	17ed      	asrs	r5, r5, #31
10062c1a:	403d      	ands	r5, r7
10062c1c:	9004      	str	r0, [sp, #16]
10062c1e:	0603      	lsls	r3, r0, #24
10062c20:	402b      	ands	r3, r5
10062c22:	189b      	adds	r3, r3, r2
10062c24:	2002      	movs	r0, #2
10062c26:	4030      	ands	r0, r6
10062c28:	9002      	str	r0, [sp, #8]
10062c2a:	1e48      	subs	r0, r1, #1
10062c2c:	9005      	str	r0, [sp, #20]
10062c2e:	b2c8      	uxtb	r0, r1
10062c30:	0841      	lsrs	r1, r0, #1
10062c32:	2600      	movs	r6, #0
10062c34:	b2c8      	uxtb	r0, r1
10062c36:	00c2      	lsls	r2, r0, #3
10062c38:	18a0      	adds	r0, r4, r2
10062c3a:	6845      	ldr	r5, [r0, #4]
10062c3c:	9802      	ldr	r0, [sp, #8]
10062c3e:	2800      	cmp	r0, #0
10062c40:	d101      	bne.n	10062c46 <addr8_list_search+0x66>
10062c42:	4818      	ldr	r0, [pc, #96]	@ (10062ca4 <__arm_cp.0_0>)
10062c44:	4005      	ands	r5, r0
10062c46:	58a0      	ldr	r0, [r4, r2]
10062c48:	4602      	mov	r2, r0
10062c4a:	9f04      	ldr	r7, [sp, #16]
10062c4c:	43ba      	bics	r2, r7
10062c4e:	9f03      	ldr	r7, [sp, #12]
10062c50:	2f00      	cmp	r7, #0
10062c52:	d101      	bne.n	10062c58 <addr8_list_search+0x78>
10062c54:	4638      	mov	r0, r7
10062c56:	e000      	b.n	10062c5a <addr8_list_search+0x7a>
10062c58:	b2c0      	uxtb	r0, r0
10062c5a:	1882      	adds	r2, r0, r2
10062c5c:	9806      	ldr	r0, [sp, #24]
10062c5e:	4290      	cmp	r0, r2
10062c60:	d101      	bne.n	10062c66 <addr8_list_search+0x86>
10062c62:	42ab      	cmp	r3, r5
10062c64:	d018      	beq.n	10062c98 <addr8_list_search+0xb8>
10062c66:	42ab      	cmp	r3, r5
10062c68:	d803      	bhi.n	10062c72 <addr8_list_search+0x92>
10062c6a:	d104      	bne.n	10062c76 <addr8_list_search+0x96>
10062c6c:	9806      	ldr	r0, [sp, #24]
10062c6e:	4290      	cmp	r0, r2
10062c70:	d901      	bls.n	10062c76 <addr8_list_search+0x96>
10062c72:	1c4e      	adds	r6, r1, #1
10062c74:	e001      	b.n	10062c7a <addr8_list_search+0x9a>
10062c76:	1e48      	subs	r0, r1, #1
10062c78:	9005      	str	r0, [sp, #20]
10062c7a:	9805      	ldr	r0, [sp, #20]
10062c7c:	1b80      	subs	r0, r0, r6
10062c7e:	b2c0      	uxtb	r0, r0
10062c80:	1c40      	adds	r0, r0, #1
10062c82:	b2c2      	uxtb	r2, r0
10062c84:	0851      	lsrs	r1, r2, #1
10062c86:	1989      	adds	r1, r1, r6
10062c88:	4282      	cmp	r2, r0
10062c8a:	d0d3      	beq.n	10062c34 <addr8_list_search+0x54>
10062c8c:	2000      	movs	r0, #0
10062c8e:	9d01      	ldr	r5, [sp, #4]
10062c90:	e004      	b.n	10062c9c <addr8_list_search+0xbc>
10062c92:	2100      	movs	r1, #0
10062c94:	4608      	mov	r0, r1
10062c96:	e001      	b.n	10062c9c <addr8_list_search+0xbc>
10062c98:	9d01      	ldr	r5, [sp, #4]
10062c9a:	9800      	ldr	r0, [sp, #0]
10062c9c:	7029      	strb	r1, [r5, #0]
10062c9e:	b007      	add	sp, #28
10062ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10062ca2:	46c0      	nop			@ (mov r8, r8)

10062ca4 <__arm_cp.0_0>:
10062ca4:	00ffffff 	.word	0x00ffffff

10062ca8 <addr8_list_add>:
10062ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
10062caa:	b089      	sub	sp, #36	@ 0x24
10062cac:	4615      	mov	r5, r2
10062cae:	460f      	mov	r7, r1
10062cb0:	4604      	mov	r4, r0
10062cb2:	7906      	ldrb	r6, [r0, #4]
10062cb4:	6800      	ldr	r0, [r0, #0]
10062cb6:	6861      	ldr	r1, [r4, #4]
10062cb8:	aa08      	add	r2, sp, #32
10062cba:	9300      	str	r3, [sp, #0]
10062cbc:	9201      	str	r2, [sp, #4]
10062cbe:	463a      	mov	r2, r7
10062cc0:	462b      	mov	r3, r5
10062cc2:	f7ff ff8d 	bl	10062be0 <addr8_list_search>
10062cc6:	2100      	movs	r1, #0
10062cc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10062cca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10062ccc:	2800      	cmp	r0, #0
10062cce:	9207      	str	r2, [sp, #28]
10062cd0:	d126      	bne.n	10062d20 <addr8_list_add+0x78>
10062cd2:	9706      	str	r7, [sp, #24]
10062cd4:	7967      	ldrb	r7, [r4, #5]
10062cd6:	42be      	cmp	r6, r7
10062cd8:	d222      	bcs.n	10062d20 <addr8_list_add+0x78>
10062cda:	9302      	str	r3, [sp, #8]
10062cdc:	9003      	str	r0, [sp, #12]
10062cde:	9504      	str	r5, [sp, #16]
10062ce0:	a908      	add	r1, sp, #32
10062ce2:	7808      	ldrb	r0, [r1, #0]
10062ce4:	9605      	str	r6, [sp, #20]
10062ce6:	4286      	cmp	r6, r0
10062ce8:	d00d      	beq.n	10062d06 <addr8_list_add+0x5e>
10062cea:	9f05      	ldr	r7, [sp, #20]
10062cec:	6822      	ldr	r2, [r4, #0]
10062cee:	b2fd      	uxtb	r5, r7
10062cf0:	00ed      	lsls	r5, r5, #3
10062cf2:	1956      	adds	r6, r2, r5
10062cf4:	4633      	mov	r3, r6
10062cf6:	3b08      	subs	r3, #8
10062cf8:	cb0a      	ldmia	r3, {r1, r3}
10062cfa:	5151      	str	r1, [r2, r5]
10062cfc:	6073      	str	r3, [r6, #4]
10062cfe:	1e7f      	subs	r7, r7, #1
10062d00:	b2f9      	uxtb	r1, r7
10062d02:	4281      	cmp	r1, r0
10062d04:	d1f2      	bne.n	10062cec <addr8_list_add+0x44>
10062d06:	6821      	ldr	r1, [r4, #0]
10062d08:	00c0      	lsls	r0, r0, #3
10062d0a:	9a06      	ldr	r2, [sp, #24]
10062d0c:	500a      	str	r2, [r1, r0]
10062d0e:	1808      	adds	r0, r1, r0
10062d10:	9904      	ldr	r1, [sp, #16]
10062d12:	6041      	str	r1, [r0, #4]
10062d14:	9805      	ldr	r0, [sp, #20]
10062d16:	1c40      	adds	r0, r0, #1
10062d18:	7120      	strb	r0, [r4, #4]
10062d1a:	2101      	movs	r1, #1
10062d1c:	9803      	ldr	r0, [sp, #12]
10062d1e:	9b02      	ldr	r3, [sp, #8]
10062d20:	9a08      	ldr	r2, [sp, #32]
10062d22:	9c07      	ldr	r4, [sp, #28]
10062d24:	7022      	strb	r2, [r4, #0]
10062d26:	7018      	strb	r0, [r3, #0]
10062d28:	4608      	mov	r0, r1
10062d2a:	b009      	add	sp, #36	@ 0x24
10062d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062d2e <addr8_list_remove_by_addr>:
10062d2e:	b5f0      	push	{r4, r5, r6, r7, lr}
10062d30:	b087      	sub	sp, #28
10062d32:	460f      	mov	r7, r1
10062d34:	4601      	mov	r1, r0
10062d36:	7900      	ldrb	r0, [r0, #4]
10062d38:	2600      	movs	r6, #0
10062d3a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10062d3c:	2800      	cmp	r0, #0
10062d3e:	d02f      	beq.n	10062da0 <addr8_list_remove_by_addr+0x72>
10062d40:	9003      	str	r0, [sp, #12]
10062d42:	6808      	ldr	r0, [r1, #0]
10062d44:	9104      	str	r1, [sp, #16]
10062d46:	6849      	ldr	r1, [r1, #4]
10062d48:	9205      	str	r2, [sp, #20]
10062d4a:	ad06      	add	r5, sp, #24
10062d4c:	9300      	str	r3, [sp, #0]
10062d4e:	9501      	str	r5, [sp, #4]
10062d50:	463a      	mov	r2, r7
10062d52:	9b05      	ldr	r3, [sp, #20]
10062d54:	f7ff ff44 	bl	10062be0 <addr8_list_search>
10062d58:	2800      	cmp	r0, #0
10062d5a:	d021      	beq.n	10062da0 <addr8_list_remove_by_addr+0x72>
10062d5c:	9002      	str	r0, [sp, #8]
10062d5e:	9405      	str	r4, [sp, #20]
10062d60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10062d62:	9c04      	ldr	r4, [sp, #16]
10062d64:	6823      	ldr	r3, [r4, #0]
10062d66:	a906      	add	r1, sp, #24
10062d68:	7809      	ldrb	r1, [r1, #0]
10062d6a:	00cd      	lsls	r5, r1, #3
10062d6c:	195b      	adds	r3, r3, r5
10062d6e:	79db      	ldrb	r3, [r3, #7]
10062d70:	7013      	strb	r3, [r2, #0]
10062d72:	9803      	ldr	r0, [sp, #12]
10062d74:	1e40      	subs	r0, r0, #1
10062d76:	9003      	str	r0, [sp, #12]
10062d78:	b2c0      	uxtb	r0, r0
10062d7a:	4281      	cmp	r1, r0
10062d7c:	4623      	mov	r3, r4
10062d7e:	d00b      	beq.n	10062d98 <addr8_list_remove_by_addr+0x6a>
10062d80:	681d      	ldr	r5, [r3, #0]
10062d82:	b2ce      	uxtb	r6, r1
10062d84:	00f6      	lsls	r6, r6, #3
10062d86:	19af      	adds	r7, r5, r6
10062d88:	68ba      	ldr	r2, [r7, #8]
10062d8a:	68fc      	ldr	r4, [r7, #12]
10062d8c:	51aa      	str	r2, [r5, r6]
10062d8e:	607c      	str	r4, [r7, #4]
10062d90:	1c49      	adds	r1, r1, #1
10062d92:	b2ca      	uxtb	r2, r1
10062d94:	4282      	cmp	r2, r0
10062d96:	d1f3      	bne.n	10062d80 <addr8_list_remove_by_addr+0x52>
10062d98:	9803      	ldr	r0, [sp, #12]
10062d9a:	7118      	strb	r0, [r3, #4]
10062d9c:	9e02      	ldr	r6, [sp, #8]
10062d9e:	9c05      	ldr	r4, [sp, #20]
10062da0:	7026      	strb	r6, [r4, #0]
10062da2:	b007      	add	sp, #28
10062da4:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062da6 <addr8_list_clear>:
10062da6:	2100      	movs	r1, #0
10062da8:	7101      	strb	r1, [r0, #4]
10062daa:	4770      	bx	lr

10062dac <BLEPLAT_aes128_encrypt>:
10062dac:	b580      	push	{r7, lr}
10062dae:	f7ef fc9e 	bl	100526ee <BLEPLAT_AesEcbEncrypt>
10062db2:	bd80      	pop	{r7, pc}

10062db4 <Hal_Get_Random_Number>:
10062db4:	b51c      	push	{r2, r3, r4, lr}
10062db6:	ac01      	add	r4, sp, #4
10062db8:	4620      	mov	r0, r4
10062dba:	f7ef fcd7 	bl	1005276c <BLEPLAT_RngGetRandom16>
10062dbe:	8820      	ldrh	r0, [r4, #0]
10062dc0:	bd1c      	pop	{r2, r3, r4, pc}

10062dc2 <Hal_Get_Random_Number32>:
10062dc2:	b5e0      	push	{r5, r6, r7, lr}
10062dc4:	a801      	add	r0, sp, #4
10062dc6:	f7ef fcdd 	bl	10052784 <BLEPLAT_RngGetRandom32>
10062dca:	9801      	ldr	r0, [sp, #4]
10062dcc:	bd8c      	pop	{r2, r3, r7, pc}

10062dce <HAL_Generate_Random_Bytes_To>:
10062dce:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10062dd0:	460c      	mov	r4, r1
10062dd2:	4605      	mov	r5, r0
10062dd4:	2000      	movs	r0, #0
10062dd6:	b2c6      	uxtb	r6, r0
10062dd8:	42a6      	cmp	r6, r4
10062dda:	d20e      	bcs.n	10062dfa <HAL_Generate_Random_Bytes_To+0x2c>
10062ddc:	2000      	movs	r0, #0
10062dde:	f7ff ffe9 	bl	10062db4 <Hal_Get_Random_Number>
10062de2:	55a8      	strb	r0, [r5, r6]
10062de4:	a901      	add	r1, sp, #4
10062de6:	7008      	strb	r0, [r1, #0]
10062de8:	0a00      	lsrs	r0, r0, #8
10062dea:	4669      	mov	r1, sp
10062dec:	7008      	strb	r0, [r1, #0]
10062dee:	1c71      	adds	r1, r6, #1
10062df0:	42a1      	cmp	r1, r4
10062df2:	d200      	bcs.n	10062df6 <HAL_Generate_Random_Bytes_To+0x28>
10062df4:	5468      	strb	r0, [r5, r1]
10062df6:	1cb0      	adds	r0, r6, #2
10062df8:	e7ed      	b.n	10062dd6 <HAL_Generate_Random_Bytes_To+0x8>
10062dfa:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10062dfc <IDD_Initialize_Device_IDs>:
10062dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
10062dfe:	b095      	sub	sp, #84	@ 0x54
10062e00:	4839      	ldr	r0, [pc, #228]	@ (10062ee8 <__arm_cp.0_0>)
10062e02:	6800      	ldr	r0, [r0, #0]
10062e04:	9000      	str	r0, [sp, #0]
10062e06:	a80b      	add	r0, sp, #44	@ 0x2c
10062e08:	f7ff fc63 	bl	100626d2 <nvm_dev_id_data_get_record>
10062e0c:	2800      	cmp	r0, #0
10062e0e:	d031      	beq.n	10062e74 <IDD_Initialize_Device_IDs+0x78>
10062e10:	af01      	add	r7, sp, #4
10062e12:	2406      	movs	r4, #6
10062e14:	2500      	movs	r5, #0
10062e16:	4b35      	ldr	r3, [pc, #212]	@ (10062eec <__arm_cp.0_1>)
10062e18:	4638      	mov	r0, r7
10062e1a:	4621      	mov	r1, r4
10062e1c:	462a      	mov	r2, r5
10062e1e:	4798      	blx	r3
10062e20:	7978      	ldrb	r0, [r7, #5]
10062e22:	21c0      	movs	r1, #192	@ 0xc0
10062e24:	4301      	orrs	r1, r0
10062e26:	7179      	strb	r1, [r7, #5]
10062e28:	ae0b      	add	r6, sp, #44	@ 0x2c
10062e2a:	4630      	mov	r0, r6
10062e2c:	3020      	adds	r0, #32
10062e2e:	4b30      	ldr	r3, [pc, #192]	@ (10062ef0 <__arm_cp.0_2>)
10062e30:	4639      	mov	r1, r7
10062e32:	4622      	mov	r2, r4
10062e34:	4798      	blx	r3
10062e36:	ac07      	add	r4, sp, #28
10062e38:	2710      	movs	r7, #16
10062e3a:	4620      	mov	r0, r4
10062e3c:	4639      	mov	r1, r7
10062e3e:	462a      	mov	r2, r5
10062e40:	4b2a      	ldr	r3, [pc, #168]	@ (10062eec <__arm_cp.0_1>)
10062e42:	4798      	blx	r3
10062e44:	4630      	mov	r0, r6
10062e46:	4621      	mov	r1, r4
10062e48:	463a      	mov	r2, r7
10062e4a:	4b29      	ldr	r3, [pc, #164]	@ (10062ef0 <__arm_cp.0_2>)
10062e4c:	4798      	blx	r3
10062e4e:	ac03      	add	r4, sp, #12
10062e50:	4620      	mov	r0, r4
10062e52:	4639      	mov	r1, r7
10062e54:	462a      	mov	r2, r5
10062e56:	4b25      	ldr	r3, [pc, #148]	@ (10062eec <__arm_cp.0_1>)
10062e58:	4798      	blx	r3
10062e5a:	4630      	mov	r0, r6
10062e5c:	3010      	adds	r0, #16
10062e5e:	4621      	mov	r1, r4
10062e60:	463a      	mov	r2, r7
10062e62:	4b23      	ldr	r3, [pc, #140]	@ (10062ef0 <__arm_cp.0_2>)
10062e64:	4798      	blx	r3
10062e66:	4630      	mov	r0, r6
10062e68:	f7ff fc40 	bl	100626ec <nvm_dev_id_data_add_record>
10062e6c:	2800      	cmp	r0, #0
10062e6e:	d103      	bne.n	10062e78 <IDD_Initialize_Device_IDs+0x7c>
10062e70:	4605      	mov	r5, r0
10062e72:	e003      	b.n	10062e7c <IDD_Initialize_Device_IDs+0x80>
10062e74:	2500      	movs	r5, #0
10062e76:	e001      	b.n	10062e7c <IDD_Initialize_Device_IDs+0x80>
10062e78:	200e      	movs	r0, #14
10062e7a:	43c5      	mvns	r5, r0
10062e7c:	4c1d      	ldr	r4, [pc, #116]	@ (10062ef4 <__arm_cp.0_3>)
10062e7e:	6822      	ldr	r2, [r4, #0]
10062e80:	322e      	adds	r2, #46	@ 0x2e
10062e82:	2600      	movs	r6, #0
10062e84:	2706      	movs	r7, #6
10062e86:	4630      	mov	r0, r6
10062e88:	4639      	mov	r1, r7
10062e8a:	f7ff fdef 	bl	10062a6c <is_Buffer_All_Set_To>
10062e8e:	a90b      	add	r1, sp, #44	@ 0x2c
10062e90:	2800      	cmp	r0, #0
10062e92:	d001      	beq.n	10062e98 <IDD_Initialize_Device_IDs+0x9c>
10062e94:	3120      	adds	r1, #32
10062e96:	e001      	b.n	10062e9c <IDD_Initialize_Device_IDs+0xa0>
10062e98:	6821      	ldr	r1, [r4, #0]
10062e9a:	312e      	adds	r1, #46	@ 0x2e
10062e9c:	9800      	ldr	r0, [sp, #0]
10062e9e:	3060      	adds	r0, #96	@ 0x60
10062ea0:	463a      	mov	r2, r7
10062ea2:	f7ef fbd7 	bl	10052654 <BLEPLAT_MemCpy>
10062ea6:	6822      	ldr	r2, [r4, #0]
10062ea8:	3208      	adds	r2, #8
10062eaa:	2110      	movs	r1, #16
10062eac:	4630      	mov	r0, r6
10062eae:	f7ff fddd 	bl	10062a6c <is_Buffer_All_Set_To>
10062eb2:	2800      	cmp	r0, #0
10062eb4:	d005      	beq.n	10062ec2 <IDD_Initialize_Device_IDs+0xc6>
10062eb6:	6820      	ldr	r0, [r4, #0]
10062eb8:	3008      	adds	r0, #8
10062eba:	a90b      	add	r1, sp, #44	@ 0x2c
10062ebc:	2210      	movs	r2, #16
10062ebe:	f7ef fbc9 	bl	10052654 <BLEPLAT_MemCpy>
10062ec2:	6822      	ldr	r2, [r4, #0]
10062ec4:	3218      	adds	r2, #24
10062ec6:	2000      	movs	r0, #0
10062ec8:	2110      	movs	r1, #16
10062eca:	f7ff fdcf 	bl	10062a6c <is_Buffer_All_Set_To>
10062ece:	2800      	cmp	r0, #0
10062ed0:	d006      	beq.n	10062ee0 <IDD_Initialize_Device_IDs+0xe4>
10062ed2:	a90b      	add	r1, sp, #44	@ 0x2c
10062ed4:	3110      	adds	r1, #16
10062ed6:	6820      	ldr	r0, [r4, #0]
10062ed8:	3018      	adds	r0, #24
10062eda:	2210      	movs	r2, #16
10062edc:	f7ef fbba 	bl	10052654 <BLEPLAT_MemCpy>
10062ee0:	b2e8      	uxtb	r0, r5
10062ee2:	b015      	add	sp, #84	@ 0x54
10062ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10062ee6:	46c0      	nop			@ (mov r8, r8)

10062ee8 <__arm_cp.0_0>:
10062ee8:	20002424 	.word	0x20002424

10062eec <__arm_cp.0_1>:
10062eec:	10062dcf 	.word	0x10062dcf

10062ef0 <__arm_cp.0_2>:
10062ef0:	10052655 	.word	0x10052655

10062ef4 <__arm_cp.0_3>:
10062ef4:	2000241c 	.word	0x2000241c

10062ef8 <aci_gatt_clt_notification_event_notify>:
10062ef8:	b5b0      	push	{r4, r5, r7, lr}
10062efa:	b0ff      	sub	sp, #508	@ 0x1fc
10062efc:	b083      	sub	sp, #12
10062efe:	461c      	mov	r4, r3
10062f00:	466d      	mov	r5, sp
10062f02:	732b      	strb	r3, [r5, #12]
10062f04:	72aa      	strb	r2, [r5, #10]
10062f06:	7229      	strb	r1, [r5, #8]
10062f08:	71a8      	strb	r0, [r5, #6]
10062f0a:	0a1b      	lsrs	r3, r3, #8
10062f0c:	736b      	strb	r3, [r5, #13]
10062f0e:	0a12      	lsrs	r2, r2, #8
10062f10:	72ea      	strb	r2, [r5, #11]
10062f12:	0a09      	lsrs	r1, r1, #8
10062f14:	7269      	strb	r1, [r5, #9]
10062f16:	0a00      	lsrs	r0, r0, #8
10062f18:	71e8      	strb	r0, [r5, #7]
10062f1a:	4628      	mov	r0, r5
10062f1c:	300e      	adds	r0, #14
10062f1e:	9986      	ldr	r1, [sp, #536]	@ 0x218
10062f20:	4622      	mov	r2, r4
10062f22:	f7ef fb97 	bl	10052654 <BLEPLAT_MemCpy>
10062f26:	4620      	mov	r0, r4
10062f28:	300a      	adds	r0, #10
10062f2a:	70a8      	strb	r0, [r5, #2]
10062f2c:	0a00      	lsrs	r0, r0, #8
10062f2e:	70e8      	strb	r0, [r5, #3]
10062f30:	200f      	movs	r0, #15
10062f32:	7128      	strb	r0, [r5, #4]
10062f34:	20ff      	movs	r0, #255	@ 0xff
10062f36:	7068      	strb	r0, [r5, #1]
10062f38:	2082      	movs	r0, #130	@ 0x82
10062f3a:	7028      	strb	r0, [r5, #0]
10062f3c:	200c      	movs	r0, #12
10062f3e:	7168      	strb	r0, [r5, #5]
10062f40:	340e      	adds	r4, #14
10062f42:	b2a1      	uxth	r1, r4
10062f44:	4628      	mov	r0, r5
10062f46:	f7eb fd53 	bl	1004e9f0 <BLE_STACK_Event>
10062f4a:	b07f      	add	sp, #508	@ 0x1fc
10062f4c:	b003      	add	sp, #12
10062f4e:	bdb0      	pop	{r4, r5, r7, pc}

10062f50 <aci_gatt_clt_indication_event_cb>:
10062f50:	b5b0      	push	{r4, r5, r7, lr}
10062f52:	b0ff      	sub	sp, #508	@ 0x1fc
10062f54:	b083      	sub	sp, #12
10062f56:	460c      	mov	r4, r1
10062f58:	4605      	mov	r5, r0
10062f5a:	688b      	ldr	r3, [r1, #8]
10062f5c:	88ca      	ldrh	r2, [r1, #6]
10062f5e:	8889      	ldrh	r1, [r1, #4]
10062f60:	4668      	mov	r0, sp
10062f62:	1d80      	adds	r0, r0, #6
10062f64:	f7f2 fd57 	bl	10055a16 <aci_gatt_clt_indication_event_copy>
10062f68:	0728      	lsls	r0, r5, #28
10062f6a:	d502      	bpl.n	10062f72 <aci_gatt_clt_indication_event_cb+0x22>
10062f6c:	68a0      	ldr	r0, [r4, #8]
10062f6e:	f7f1 ff09 	bl	10054d84 <ACL_pkt_release>
10062f72:	9903      	ldr	r1, [sp, #12]
10062f74:	460a      	mov	r2, r1
10062f76:	320a      	adds	r2, #10
10062f78:	4668      	mov	r0, sp
10062f7a:	7082      	strb	r2, [r0, #2]
10062f7c:	0a12      	lsrs	r2, r2, #8
10062f7e:	70c2      	strb	r2, [r0, #3]
10062f80:	220e      	movs	r2, #14
10062f82:	7102      	strb	r2, [r0, #4]
10062f84:	4a05      	ldr	r2, [pc, #20]	@ (10062f9c <__arm_cp.1_0>)
10062f86:	8002      	strh	r2, [r0, #0]
10062f88:	220c      	movs	r2, #12
10062f8a:	7142      	strb	r2, [r0, #5]
10062f8c:	310e      	adds	r1, #14
10062f8e:	b289      	uxth	r1, r1
10062f90:	f7eb fd2e 	bl	1004e9f0 <BLE_STACK_Event>
10062f94:	b07f      	add	sp, #508	@ 0x1fc
10062f96:	b003      	add	sp, #12
10062f98:	bdb0      	pop	{r4, r5, r7, pc}
10062f9a:	46c0      	nop			@ (mov r8, r8)

10062f9c <__arm_cp.1_0>:
10062f9c:	0000ff82 	.word	0x0000ff82

10062fa0 <aci_gatt_clt_notification_event_cb>:
10062fa0:	b5b0      	push	{r4, r5, r7, lr}
10062fa2:	b0ff      	sub	sp, #508	@ 0x1fc
10062fa4:	b085      	sub	sp, #20
10062fa6:	460c      	mov	r4, r1
10062fa8:	4605      	mov	r5, r0
10062faa:	688b      	ldr	r3, [r1, #8]
10062fac:	88ca      	ldrh	r2, [r1, #6]
10062fae:	8889      	ldrh	r1, [r1, #4]
10062fb0:	a802      	add	r0, sp, #8
10062fb2:	1d80      	adds	r0, r0, #6
10062fb4:	f7f2 fd54 	bl	10055a60 <aci_gatt_clt_notification_event_copy>
10062fb8:	0728      	lsls	r0, r5, #28
10062fba:	d502      	bpl.n	10062fc2 <aci_gatt_clt_notification_event_cb+0x22>
10062fbc:	68a0      	ldr	r0, [r4, #8]
10062fbe:	f7f1 fee1 	bl	10054d84 <ACL_pkt_release>
10062fc2:	ac02      	add	r4, sp, #8
10062fc4:	89a3      	ldrh	r3, [r4, #12]
10062fc6:	8962      	ldrh	r2, [r4, #10]
10062fc8:	8921      	ldrh	r1, [r4, #8]
10062fca:	88e0      	ldrh	r0, [r4, #6]
10062fcc:	340e      	adds	r4, #14
10062fce:	9400      	str	r4, [sp, #0]
10062fd0:	f7ff ff92 	bl	10062ef8 <aci_gatt_clt_notification_event_notify>
10062fd4:	b07f      	add	sp, #508	@ 0x1fc
10062fd6:	b005      	add	sp, #20
10062fd8:	bdb0      	pop	{r4, r5, r7, pc}
	...

10062fdc <aci_gatt_srv_write_event_cb>:
10062fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
10062fde:	b0ff      	sub	sp, #508	@ 0x1fc
10062fe0:	b086      	sub	sp, #24
10062fe2:	460c      	mov	r4, r1
10062fe4:	4605      	mov	r5, r0
10062fe6:	7a0b      	ldrb	r3, [r1, #8]
10062fe8:	88ca      	ldrh	r2, [r1, #6]
10062fea:	8889      	ldrh	r1, [r1, #4]
10062fec:	8960      	ldrh	r0, [r4, #10]
10062fee:	89a6      	ldrh	r6, [r4, #12]
10062ff0:	6927      	ldr	r7, [r4, #16]
10062ff2:	9000      	str	r0, [sp, #0]
10062ff4:	9601      	str	r6, [sp, #4]
10062ff6:	9702      	str	r7, [sp, #8]
10062ff8:	a803      	add	r0, sp, #12
10062ffa:	1d80      	adds	r0, r0, #6
10062ffc:	f7f2 fd79 	bl	10055af2 <aci_gatt_srv_write_event_copy>
10063000:	0728      	lsls	r0, r5, #28
10063002:	d502      	bpl.n	1006300a <aci_gatt_srv_write_event_cb+0x2e>
10063004:	6920      	ldr	r0, [r4, #16]
10063006:	f7f1 febd 	bl	10054d84 <ACL_pkt_release>
1006300a:	a803      	add	r0, sp, #12
1006300c:	7b41      	ldrb	r1, [r0, #13]
1006300e:	7b82      	ldrb	r2, [r0, #14]
10063010:	0212      	lsls	r2, r2, #8
10063012:	1851      	adds	r1, r2, r1
10063014:	460a      	mov	r2, r1
10063016:	320b      	adds	r2, #11
10063018:	7082      	strb	r2, [r0, #2]
1006301a:	0a12      	lsrs	r2, r2, #8
1006301c:	70c2      	strb	r2, [r0, #3]
1006301e:	221a      	movs	r2, #26
10063020:	7102      	strb	r2, [r0, #4]
10063022:	4a05      	ldr	r2, [pc, #20]	@ (10063038 <__arm_cp.3_0>)
10063024:	8002      	strh	r2, [r0, #0]
10063026:	220c      	movs	r2, #12
10063028:	7142      	strb	r2, [r0, #5]
1006302a:	310f      	adds	r1, #15
1006302c:	b289      	uxth	r1, r1
1006302e:	f7eb fcdf 	bl	1004e9f0 <BLE_STACK_Event>
10063032:	b07f      	add	sp, #508	@ 0x1fc
10063034:	b006      	add	sp, #24
10063036:	bdf0      	pop	{r4, r5, r6, r7, pc}

10063038 <__arm_cp.3_0>:
10063038:	0000ff82 	.word	0x0000ff82

1006303c <aci_gatt_clt_multi_notification_int_event_cb>:
1006303c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006303e:	b0ff      	sub	sp, #508	@ 0x1fc
10063040:	b08c      	sub	sp, #48	@ 0x30
10063042:	460c      	mov	r4, r1
10063044:	4605      	mov	r5, r0
10063046:	688b      	ldr	r3, [r1, #8]
10063048:	88ca      	ldrh	r2, [r1, #6]
1006304a:	8889      	ldrh	r1, [r1, #4]
1006304c:	a807      	add	r0, sp, #28
1006304e:	1d80      	adds	r0, r0, #6
10063050:	f7f2 fd87 	bl	10055b62 <aci_gatt_clt_multi_notification_int_event_copy>
10063054:	0728      	lsls	r0, r5, #28
10063056:	d502      	bpl.n	1006305e <aci_gatt_clt_multi_notification_int_event_cb+0x22>
10063058:	68a0      	ldr	r0, [r4, #8]
1006305a:	f7f1 fe93 	bl	10054d84 <ACL_pkt_release>
1006305e:	a807      	add	r0, sp, #28
10063060:	8941      	ldrh	r1, [r0, #10]
10063062:	9105      	str	r1, [sp, #20]
10063064:	8901      	ldrh	r1, [r0, #8]
10063066:	9103      	str	r1, [sp, #12]
10063068:	88c1      	ldrh	r1, [r0, #6]
1006306a:	9102      	str	r1, [sp, #8]
1006306c:	300c      	adds	r0, #12
1006306e:	9004      	str	r0, [sp, #16]
10063070:	2500      	movs	r5, #0
10063072:	9e04      	ldr	r6, [sp, #16]
10063074:	b2a8      	uxth	r0, r5
10063076:	9905      	ldr	r1, [sp, #20]
10063078:	4288      	cmp	r0, r1
1006307a:	d21c      	bcs.n	100630b6 <aci_gatt_clt_multi_notification_int_event_cb+0x7a>
1006307c:	1831      	adds	r1, r6, r0
1006307e:	a88a      	add	r0, sp, #552	@ 0x228
10063080:	9006      	str	r0, [sp, #24]
10063082:	2402      	movs	r4, #2
10063084:	4622      	mov	r2, r4
10063086:	f7ef fae5 	bl	10052654 <BLEPLAT_MemCpy>
1006308a:	1ca8      	adds	r0, r5, #2
1006308c:	b280      	uxth	r0, r0
1006308e:	1831      	adds	r1, r6, r0
10063090:	af89      	add	r7, sp, #548	@ 0x224
10063092:	4638      	mov	r0, r7
10063094:	4622      	mov	r2, r4
10063096:	f7ef fadd 	bl	10052654 <BLEPLAT_MemCpy>
1006309a:	1d28      	adds	r0, r5, #4
1006309c:	b284      	uxth	r4, r0
1006309e:	1930      	adds	r0, r6, r4
100630a0:	883b      	ldrh	r3, [r7, #0]
100630a2:	9906      	ldr	r1, [sp, #24]
100630a4:	880a      	ldrh	r2, [r1, #0]
100630a6:	9000      	str	r0, [sp, #0]
100630a8:	9802      	ldr	r0, [sp, #8]
100630aa:	9903      	ldr	r1, [sp, #12]
100630ac:	f7ff ff24 	bl	10062ef8 <aci_gatt_clt_notification_event_notify>
100630b0:	8838      	ldrh	r0, [r7, #0]
100630b2:	1825      	adds	r5, r4, r0
100630b4:	e7de      	b.n	10063074 <aci_gatt_clt_multi_notification_int_event_cb+0x38>
100630b6:	b07f      	add	sp, #508	@ 0x1fc
100630b8:	b00c      	add	sp, #48	@ 0x30
100630ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

100630bc <aci_att_clt_find_info_resp_event_cb>:
100630bc:	b5b0      	push	{r4, r5, r7, lr}
100630be:	b0ff      	sub	sp, #508	@ 0x1fc
100630c0:	b083      	sub	sp, #12
100630c2:	460c      	mov	r4, r1
100630c4:	4605      	mov	r5, r0
100630c6:	688b      	ldr	r3, [r1, #8]
100630c8:	88ca      	ldrh	r2, [r1, #6]
100630ca:	8889      	ldrh	r1, [r1, #4]
100630cc:	4668      	mov	r0, sp
100630ce:	1d80      	adds	r0, r0, #6
100630d0:	f7f2 fbc0 	bl	10055854 <aci_att_clt_find_info_resp_event_copy>
100630d4:	0728      	lsls	r0, r5, #28
100630d6:	d502      	bpl.n	100630de <aci_att_clt_find_info_resp_event_cb+0x22>
100630d8:	68a0      	ldr	r0, [r4, #8]
100630da:	f7f1 fe53 	bl	10054d84 <ACL_pkt_release>
100630de:	4668      	mov	r0, sp
100630e0:	7ac1      	ldrb	r1, [r0, #11]
100630e2:	9a03      	ldr	r2, [sp, #12]
100630e4:	0212      	lsls	r2, r2, #8
100630e6:	1851      	adds	r1, r2, r1
100630e8:	460a      	mov	r2, r1
100630ea:	3209      	adds	r2, #9
100630ec:	7082      	strb	r2, [r0, #2]
100630ee:	0a12      	lsrs	r2, r2, #8
100630f0:	70c2      	strb	r2, [r0, #3]
100630f2:	2204      	movs	r2, #4
100630f4:	7102      	strb	r2, [r0, #4]
100630f6:	4a05      	ldr	r2, [pc, #20]	@ (1006310c <__arm_cp.5_0>)
100630f8:	8002      	strh	r2, [r0, #0]
100630fa:	220c      	movs	r2, #12
100630fc:	7142      	strb	r2, [r0, #5]
100630fe:	310d      	adds	r1, #13
10063100:	b289      	uxth	r1, r1
10063102:	f7eb fc75 	bl	1004e9f0 <BLE_STACK_Event>
10063106:	b07f      	add	sp, #508	@ 0x1fc
10063108:	b003      	add	sp, #12
1006310a:	bdb0      	pop	{r4, r5, r7, pc}

1006310c <__arm_cp.5_0>:
1006310c:	0000ff82 	.word	0x0000ff82

10063110 <aci_att_clt_find_by_type_value_resp_event_cb>:
10063110:	b5b0      	push	{r4, r5, r7, lr}
10063112:	b0ff      	sub	sp, #508	@ 0x1fc
10063114:	b083      	sub	sp, #12
10063116:	460c      	mov	r4, r1
10063118:	4605      	mov	r5, r0
1006311a:	688b      	ldr	r3, [r1, #8]
1006311c:	88ca      	ldrh	r2, [r1, #6]
1006311e:	8889      	ldrh	r1, [r1, #4]
10063120:	4668      	mov	r0, sp
10063122:	1d80      	adds	r0, r0, #6
10063124:	f7f2 fbb4 	bl	10055890 <aci_att_clt_find_by_type_value_resp_event_copy>
10063128:	0728      	lsls	r0, r5, #28
1006312a:	d502      	bpl.n	10063132 <aci_att_clt_find_by_type_value_resp_event_cb+0x22>
1006312c:	68a0      	ldr	r0, [r4, #8]
1006312e:	f7f1 fe29 	bl	10054d84 <ACL_pkt_release>
10063132:	4668      	mov	r0, sp
10063134:	7a81      	ldrb	r1, [r0, #10]
10063136:	0089      	lsls	r1, r1, #2
10063138:	1dca      	adds	r2, r1, #7
1006313a:	7082      	strb	r2, [r0, #2]
1006313c:	0a12      	lsrs	r2, r2, #8
1006313e:	70c2      	strb	r2, [r0, #3]
10063140:	2205      	movs	r2, #5
10063142:	7102      	strb	r2, [r0, #4]
10063144:	4a04      	ldr	r2, [pc, #16]	@ (10063158 <__arm_cp.6_0>)
10063146:	8002      	strh	r2, [r0, #0]
10063148:	220c      	movs	r2, #12
1006314a:	7142      	strb	r2, [r0, #5]
1006314c:	310b      	adds	r1, #11
1006314e:	f7eb fc4f 	bl	1004e9f0 <BLE_STACK_Event>
10063152:	b07f      	add	sp, #508	@ 0x1fc
10063154:	b003      	add	sp, #12
10063156:	bdb0      	pop	{r4, r5, r7, pc}

10063158 <__arm_cp.6_0>:
10063158:	0000ff82 	.word	0x0000ff82

1006315c <aci_att_clt_read_by_type_resp_event_cb>:
1006315c:	b5b0      	push	{r4, r5, r7, lr}
1006315e:	b0ff      	sub	sp, #508	@ 0x1fc
10063160:	b083      	sub	sp, #12
10063162:	460c      	mov	r4, r1
10063164:	4605      	mov	r5, r0
10063166:	688b      	ldr	r3, [r1, #8]
10063168:	88ca      	ldrh	r2, [r1, #6]
1006316a:	8889      	ldrh	r1, [r1, #4]
1006316c:	4668      	mov	r0, sp
1006316e:	1d80      	adds	r0, r0, #6
10063170:	f7f2 fba3 	bl	100558ba <aci_att_clt_read_by_type_resp_event_copy>
10063174:	0728      	lsls	r0, r5, #28
10063176:	d502      	bpl.n	1006317e <aci_att_clt_read_by_type_resp_event_cb+0x22>
10063178:	68a0      	ldr	r0, [r4, #8]
1006317a:	f7f1 fe03 	bl	10054d84 <ACL_pkt_release>
1006317e:	4668      	mov	r0, sp
10063180:	7ac1      	ldrb	r1, [r0, #11]
10063182:	9a03      	ldr	r2, [sp, #12]
10063184:	0212      	lsls	r2, r2, #8
10063186:	1851      	adds	r1, r2, r1
10063188:	460a      	mov	r2, r1
1006318a:	3209      	adds	r2, #9
1006318c:	7082      	strb	r2, [r0, #2]
1006318e:	0a12      	lsrs	r2, r2, #8
10063190:	70c2      	strb	r2, [r0, #3]
10063192:	2206      	movs	r2, #6
10063194:	7102      	strb	r2, [r0, #4]
10063196:	4a05      	ldr	r2, [pc, #20]	@ (100631ac <__arm_cp.7_0>)
10063198:	8002      	strh	r2, [r0, #0]
1006319a:	220c      	movs	r2, #12
1006319c:	7142      	strb	r2, [r0, #5]
1006319e:	310d      	adds	r1, #13
100631a0:	b289      	uxth	r1, r1
100631a2:	f7eb fc25 	bl	1004e9f0 <BLE_STACK_Event>
100631a6:	b07f      	add	sp, #508	@ 0x1fc
100631a8:	b003      	add	sp, #12
100631aa:	bdb0      	pop	{r4, r5, r7, pc}

100631ac <__arm_cp.7_0>:
100631ac:	0000ff82 	.word	0x0000ff82

100631b0 <aci_att_clt_read_resp_event_cb>:
100631b0:	b5b0      	push	{r4, r5, r7, lr}
100631b2:	b0ff      	sub	sp, #508	@ 0x1fc
100631b4:	b083      	sub	sp, #12
100631b6:	460c      	mov	r4, r1
100631b8:	4605      	mov	r5, r0
100631ba:	688b      	ldr	r3, [r1, #8]
100631bc:	88ca      	ldrh	r2, [r1, #6]
100631be:	8889      	ldrh	r1, [r1, #4]
100631c0:	4668      	mov	r0, sp
100631c2:	1d80      	adds	r0, r0, #6
100631c4:	f7f2 fb97 	bl	100558f6 <aci_att_clt_read_resp_event_copy>
100631c8:	0728      	lsls	r0, r5, #28
100631ca:	d502      	bpl.n	100631d2 <aci_att_clt_read_resp_event_cb+0x22>
100631cc:	68a0      	ldr	r0, [r4, #8]
100631ce:	f7f1 fdd9 	bl	10054d84 <ACL_pkt_release>
100631d2:	4668      	mov	r0, sp
100631d4:	8941      	ldrh	r1, [r0, #10]
100631d6:	460a      	mov	r2, r1
100631d8:	3208      	adds	r2, #8
100631da:	7082      	strb	r2, [r0, #2]
100631dc:	0a12      	lsrs	r2, r2, #8
100631de:	70c2      	strb	r2, [r0, #3]
100631e0:	2207      	movs	r2, #7
100631e2:	7102      	strb	r2, [r0, #4]
100631e4:	4a05      	ldr	r2, [pc, #20]	@ (100631fc <__arm_cp.8_0>)
100631e6:	8002      	strh	r2, [r0, #0]
100631e8:	220c      	movs	r2, #12
100631ea:	7142      	strb	r2, [r0, #5]
100631ec:	310c      	adds	r1, #12
100631ee:	b289      	uxth	r1, r1
100631f0:	f7eb fbfe 	bl	1004e9f0 <BLE_STACK_Event>
100631f4:	b07f      	add	sp, #508	@ 0x1fc
100631f6:	b003      	add	sp, #12
100631f8:	bdb0      	pop	{r4, r5, r7, pc}
100631fa:	46c0      	nop			@ (mov r8, r8)

100631fc <__arm_cp.8_0>:
100631fc:	0000ff82 	.word	0x0000ff82

10063200 <aci_att_clt_read_blob_resp_event_cb>:
10063200:	b5b0      	push	{r4, r5, r7, lr}
10063202:	b0ff      	sub	sp, #508	@ 0x1fc
10063204:	b083      	sub	sp, #12
10063206:	460c      	mov	r4, r1
10063208:	4605      	mov	r5, r0
1006320a:	688b      	ldr	r3, [r1, #8]
1006320c:	88ca      	ldrh	r2, [r1, #6]
1006320e:	8889      	ldrh	r1, [r1, #4]
10063210:	4668      	mov	r0, sp
10063212:	1d80      	adds	r0, r0, #6
10063214:	f7f2 fb85 	bl	10055922 <aci_att_clt_read_blob_resp_event_copy>
10063218:	0728      	lsls	r0, r5, #28
1006321a:	d502      	bpl.n	10063222 <aci_att_clt_read_blob_resp_event_cb+0x22>
1006321c:	68a0      	ldr	r0, [r4, #8]
1006321e:	f7f1 fdb1 	bl	10054d84 <ACL_pkt_release>
10063222:	4668      	mov	r0, sp
10063224:	8941      	ldrh	r1, [r0, #10]
10063226:	460a      	mov	r2, r1
10063228:	3208      	adds	r2, #8
1006322a:	7082      	strb	r2, [r0, #2]
1006322c:	0a12      	lsrs	r2, r2, #8
1006322e:	70c2      	strb	r2, [r0, #3]
10063230:	2208      	movs	r2, #8
10063232:	7102      	strb	r2, [r0, #4]
10063234:	4a05      	ldr	r2, [pc, #20]	@ (1006324c <__arm_cp.9_0>)
10063236:	8002      	strh	r2, [r0, #0]
10063238:	220c      	movs	r2, #12
1006323a:	7142      	strb	r2, [r0, #5]
1006323c:	310c      	adds	r1, #12
1006323e:	b289      	uxth	r1, r1
10063240:	f7eb fbd6 	bl	1004e9f0 <BLE_STACK_Event>
10063244:	b07f      	add	sp, #508	@ 0x1fc
10063246:	b003      	add	sp, #12
10063248:	bdb0      	pop	{r4, r5, r7, pc}
1006324a:	46c0      	nop			@ (mov r8, r8)

1006324c <__arm_cp.9_0>:
1006324c:	0000ff82 	.word	0x0000ff82

10063250 <aci_att_clt_read_multiple_resp_event_cb>:
10063250:	b5b0      	push	{r4, r5, r7, lr}
10063252:	b0ff      	sub	sp, #508	@ 0x1fc
10063254:	b083      	sub	sp, #12
10063256:	460c      	mov	r4, r1
10063258:	4605      	mov	r5, r0
1006325a:	688b      	ldr	r3, [r1, #8]
1006325c:	88ca      	ldrh	r2, [r1, #6]
1006325e:	8889      	ldrh	r1, [r1, #4]
10063260:	4668      	mov	r0, sp
10063262:	1d80      	adds	r0, r0, #6
10063264:	f7f2 fb73 	bl	1005594e <aci_att_clt_read_multiple_resp_event_copy>
10063268:	0728      	lsls	r0, r5, #28
1006326a:	d502      	bpl.n	10063272 <aci_att_clt_read_multiple_resp_event_cb+0x22>
1006326c:	68a0      	ldr	r0, [r4, #8]
1006326e:	f7f1 fd89 	bl	10054d84 <ACL_pkt_release>
10063272:	4668      	mov	r0, sp
10063274:	8941      	ldrh	r1, [r0, #10]
10063276:	460a      	mov	r2, r1
10063278:	3208      	adds	r2, #8
1006327a:	7082      	strb	r2, [r0, #2]
1006327c:	0a12      	lsrs	r2, r2, #8
1006327e:	70c2      	strb	r2, [r0, #3]
10063280:	2209      	movs	r2, #9
10063282:	7102      	strb	r2, [r0, #4]
10063284:	4a05      	ldr	r2, [pc, #20]	@ (1006329c <__arm_cp.10_0>)
10063286:	8002      	strh	r2, [r0, #0]
10063288:	220c      	movs	r2, #12
1006328a:	7142      	strb	r2, [r0, #5]
1006328c:	310c      	adds	r1, #12
1006328e:	b289      	uxth	r1, r1
10063290:	f7eb fbae 	bl	1004e9f0 <BLE_STACK_Event>
10063294:	b07f      	add	sp, #508	@ 0x1fc
10063296:	b003      	add	sp, #12
10063298:	bdb0      	pop	{r4, r5, r7, pc}
1006329a:	46c0      	nop			@ (mov r8, r8)

1006329c <__arm_cp.10_0>:
1006329c:	0000ff82 	.word	0x0000ff82

100632a0 <aci_att_clt_read_by_group_type_resp_event_cb>:
100632a0:	b5b0      	push	{r4, r5, r7, lr}
100632a2:	b0ff      	sub	sp, #508	@ 0x1fc
100632a4:	b083      	sub	sp, #12
100632a6:	460c      	mov	r4, r1
100632a8:	4605      	mov	r5, r0
100632aa:	688b      	ldr	r3, [r1, #8]
100632ac:	88ca      	ldrh	r2, [r1, #6]
100632ae:	8889      	ldrh	r1, [r1, #4]
100632b0:	4668      	mov	r0, sp
100632b2:	1d80      	adds	r0, r0, #6
100632b4:	f7f2 fb61 	bl	1005597a <aci_att_clt_read_by_group_type_resp_event_copy>
100632b8:	0728      	lsls	r0, r5, #28
100632ba:	d502      	bpl.n	100632c2 <aci_att_clt_read_by_group_type_resp_event_cb+0x22>
100632bc:	68a0      	ldr	r0, [r4, #8]
100632be:	f7f1 fd61 	bl	10054d84 <ACL_pkt_release>
100632c2:	4668      	mov	r0, sp
100632c4:	7ac1      	ldrb	r1, [r0, #11]
100632c6:	9a03      	ldr	r2, [sp, #12]
100632c8:	0212      	lsls	r2, r2, #8
100632ca:	1851      	adds	r1, r2, r1
100632cc:	460a      	mov	r2, r1
100632ce:	3209      	adds	r2, #9
100632d0:	7082      	strb	r2, [r0, #2]
100632d2:	0a12      	lsrs	r2, r2, #8
100632d4:	70c2      	strb	r2, [r0, #3]
100632d6:	220a      	movs	r2, #10
100632d8:	7102      	strb	r2, [r0, #4]
100632da:	4a05      	ldr	r2, [pc, #20]	@ (100632f0 <__arm_cp.11_0>)
100632dc:	8002      	strh	r2, [r0, #0]
100632de:	220c      	movs	r2, #12
100632e0:	7142      	strb	r2, [r0, #5]
100632e2:	310d      	adds	r1, #13
100632e4:	b289      	uxth	r1, r1
100632e6:	f7eb fb83 	bl	1004e9f0 <BLE_STACK_Event>
100632ea:	b07f      	add	sp, #508	@ 0x1fc
100632ec:	b003      	add	sp, #12
100632ee:	bdb0      	pop	{r4, r5, r7, pc}

100632f0 <__arm_cp.11_0>:
100632f0:	0000ff82 	.word	0x0000ff82

100632f4 <aci_att_clt_prepare_write_resp_event_cb>:
100632f4:	b5b0      	push	{r4, r5, r7, lr}
100632f6:	b0ff      	sub	sp, #508	@ 0x1fc
100632f8:	b083      	sub	sp, #12
100632fa:	460c      	mov	r4, r1
100632fc:	4605      	mov	r5, r0
100632fe:	688b      	ldr	r3, [r1, #8]
10063300:	88ca      	ldrh	r2, [r1, #6]
10063302:	8889      	ldrh	r1, [r1, #4]
10063304:	4668      	mov	r0, sp
10063306:	1d80      	adds	r0, r0, #6
10063308:	f7f2 fb55 	bl	100559b6 <aci_att_clt_prepare_write_resp_event_copy>
1006330c:	0728      	lsls	r0, r5, #28
1006330e:	d502      	bpl.n	10063316 <aci_att_clt_prepare_write_resp_event_cb+0x22>
10063310:	68a0      	ldr	r0, [r4, #8]
10063312:	f7f1 fd37 	bl	10054d84 <ACL_pkt_release>
10063316:	4668      	mov	r0, sp
10063318:	89c1      	ldrh	r1, [r0, #14]
1006331a:	460a      	mov	r2, r1
1006331c:	320c      	adds	r2, #12
1006331e:	7082      	strb	r2, [r0, #2]
10063320:	0a12      	lsrs	r2, r2, #8
10063322:	70c2      	strb	r2, [r0, #3]
10063324:	220c      	movs	r2, #12
10063326:	7102      	strb	r2, [r0, #4]
10063328:	4b04      	ldr	r3, [pc, #16]	@ (1006333c <__arm_cp.12_0>)
1006332a:	8003      	strh	r3, [r0, #0]
1006332c:	7142      	strb	r2, [r0, #5]
1006332e:	3110      	adds	r1, #16
10063330:	b289      	uxth	r1, r1
10063332:	f7eb fb5d 	bl	1004e9f0 <BLE_STACK_Event>
10063336:	b07f      	add	sp, #508	@ 0x1fc
10063338:	b003      	add	sp, #12
1006333a:	bdb0      	pop	{r4, r5, r7, pc}

1006333c <__arm_cp.12_0>:
1006333c:	0000ff82 	.word	0x0000ff82

10063340 <aci_att_srv_prepare_write_req_event_cb>:
10063340:	b5f0      	push	{r4, r5, r6, r7, lr}
10063342:	b0ff      	sub	sp, #508	@ 0x1fc
10063344:	b086      	sub	sp, #24
10063346:	460c      	mov	r4, r1
10063348:	4605      	mov	r5, r0
1006334a:	890b      	ldrh	r3, [r1, #8]
1006334c:	88ca      	ldrh	r2, [r1, #6]
1006334e:	8889      	ldrh	r1, [r1, #4]
10063350:	8960      	ldrh	r0, [r4, #10]
10063352:	89a6      	ldrh	r6, [r4, #12]
10063354:	6927      	ldr	r7, [r4, #16]
10063356:	9000      	str	r0, [sp, #0]
10063358:	9601      	str	r6, [sp, #4]
1006335a:	9702      	str	r7, [sp, #8]
1006335c:	a803      	add	r0, sp, #12
1006335e:	1d80      	adds	r0, r0, #6
10063360:	f7f2 fbe2 	bl	10055b28 <aci_att_srv_prepare_write_req_event_copy>
10063364:	0728      	lsls	r0, r5, #28
10063366:	d502      	bpl.n	1006336e <aci_att_srv_prepare_write_req_event_cb+0x2e>
10063368:	6920      	ldr	r0, [r4, #16]
1006336a:	f7f1 fd0b 	bl	10054d84 <ACL_pkt_release>
1006336e:	a803      	add	r0, sp, #12
10063370:	89c1      	ldrh	r1, [r0, #14]
10063372:	460a      	mov	r2, r1
10063374:	320c      	adds	r2, #12
10063376:	7082      	strb	r2, [r0, #2]
10063378:	0a12      	lsrs	r2, r2, #8
1006337a:	70c2      	strb	r2, [r0, #3]
1006337c:	221b      	movs	r2, #27
1006337e:	7102      	strb	r2, [r0, #4]
10063380:	4a05      	ldr	r2, [pc, #20]	@ (10063398 <__arm_cp.13_0>)
10063382:	8002      	strh	r2, [r0, #0]
10063384:	220c      	movs	r2, #12
10063386:	7142      	strb	r2, [r0, #5]
10063388:	3110      	adds	r1, #16
1006338a:	b289      	uxth	r1, r1
1006338c:	f7eb fb30 	bl	1004e9f0 <BLE_STACK_Event>
10063390:	b07f      	add	sp, #508	@ 0x1fc
10063392:	b006      	add	sp, #24
10063394:	bdf0      	pop	{r4, r5, r6, r7, pc}
10063396:	46c0      	nop			@ (mov r8, r8)

10063398 <__arm_cp.13_0>:
10063398:	0000ff82 	.word	0x0000ff82

1006339c <aci_att_clt_read_multiple_var_len_resp_event_cb>:
1006339c:	b5b0      	push	{r4, r5, r7, lr}
1006339e:	b0ff      	sub	sp, #508	@ 0x1fc
100633a0:	b083      	sub	sp, #12
100633a2:	460c      	mov	r4, r1
100633a4:	4605      	mov	r5, r0
100633a6:	688b      	ldr	r3, [r1, #8]
100633a8:	88ca      	ldrh	r2, [r1, #6]
100633aa:	8889      	ldrh	r1, [r1, #4]
100633ac:	4668      	mov	r0, sp
100633ae:	1d80      	adds	r0, r0, #6
100633b0:	f7f2 fbed 	bl	10055b8e <aci_att_clt_read_multiple_var_len_resp_event_copy>
100633b4:	0728      	lsls	r0, r5, #28
100633b6:	d502      	bpl.n	100633be <aci_att_clt_read_multiple_var_len_resp_event_cb+0x22>
100633b8:	68a0      	ldr	r0, [r4, #8]
100633ba:	f7f1 fce3 	bl	10054d84 <ACL_pkt_release>
100633be:	4668      	mov	r0, sp
100633c0:	8941      	ldrh	r1, [r0, #10]
100633c2:	460a      	mov	r2, r1
100633c4:	3208      	adds	r2, #8
100633c6:	7082      	strb	r2, [r0, #2]
100633c8:	0a12      	lsrs	r2, r2, #8
100633ca:	70c2      	strb	r2, [r0, #3]
100633cc:	221e      	movs	r2, #30
100633ce:	7102      	strb	r2, [r0, #4]
100633d0:	4a05      	ldr	r2, [pc, #20]	@ (100633e8 <__arm_cp.14_0>)
100633d2:	8002      	strh	r2, [r0, #0]
100633d4:	220c      	movs	r2, #12
100633d6:	7142      	strb	r2, [r0, #5]
100633d8:	310c      	adds	r1, #12
100633da:	b289      	uxth	r1, r1
100633dc:	f7eb fb08 	bl	1004e9f0 <BLE_STACK_Event>
100633e0:	b07f      	add	sp, #508	@ 0x1fc
100633e2:	b003      	add	sp, #12
100633e4:	bdb0      	pop	{r4, r5, r7, pc}
100633e6:	46c0      	nop			@ (mov r8, r8)

100633e8 <__arm_cp.14_0>:
100633e8:	0000ff82 	.word	0x0000ff82

100633ec <aci_gatt_srv_attribute_modified_event_push_noinline>:
100633ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100633ee:	b085      	sub	sp, #20
100633f0:	4605      	mov	r5, r0
100633f2:	06c0      	lsls	r0, r0, #27
100633f4:	d445      	bmi.n	10063482 <aci_gatt_srv_attribute_modified_event_push_noinline+0x96>
100633f6:	4826      	ldr	r0, [pc, #152]	@ (10063490 <__arm_cp.15_0>)
100633f8:	6800      	ldr	r0, [r0, #0]
100633fa:	2450      	movs	r4, #80	@ 0x50
100633fc:	5d00      	ldrb	r0, [r0, r4]
100633fe:	2400      	movs	r4, #0
10063400:	07c0      	lsls	r0, r0, #31
10063402:	d03f      	beq.n	10063484 <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
10063404:	9302      	str	r3, [sp, #8]
10063406:	9203      	str	r2, [sp, #12]
10063408:	9104      	str	r1, [sp, #16]
1006340a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1006340c:	4821      	ldr	r0, [pc, #132]	@ (10063494 <__arm_cp.15_1>)
1006340e:	6800      	ldr	r0, [r0, #0]
10063410:	0769      	lsls	r1, r5, #29
10063412:	0ec9      	lsrs	r1, r1, #27
10063414:	1840      	adds	r0, r0, r1
10063416:	6900      	ldr	r0, [r0, #16]
10063418:	1e71      	subs	r1, r6, #1
1006341a:	2203      	movs	r2, #3
1006341c:	430a      	orrs	r2, r1
1006341e:	3211      	adds	r2, #17
10063420:	0891      	lsrs	r1, r2, #2
10063422:	b28b      	uxth	r3, r1
10063424:	2256      	movs	r2, #86	@ 0x56
10063426:	4629      	mov	r1, r5
10063428:	f7f1 fe60 	bl	100550ec <aci_event_fifo_push_header>
1006342c:	2800      	cmp	r0, #0
1006342e:	d02c      	beq.n	1006348a <aci_gatt_srv_attribute_modified_event_push_noinline+0x9e>
10063430:	4607      	mov	r7, r0
10063432:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10063434:	9001      	str	r0, [sp, #4]
10063436:	743e      	strb	r6, [r7, #16]
10063438:	9902      	ldr	r1, [sp, #8]
1006343a:	73b9      	strb	r1, [r7, #14]
1006343c:	9b03      	ldr	r3, [sp, #12]
1006343e:	733b      	strb	r3, [r7, #12]
10063440:	9a04      	ldr	r2, [sp, #16]
10063442:	72ba      	strb	r2, [r7, #10]
10063444:	0a30      	lsrs	r0, r6, #8
10063446:	7478      	strb	r0, [r7, #17]
10063448:	0a08      	lsrs	r0, r1, #8
1006344a:	73f8      	strb	r0, [r7, #15]
1006344c:	0a18      	lsrs	r0, r3, #8
1006344e:	7378      	strb	r0, [r7, #13]
10063450:	0a10      	lsrs	r0, r2, #8
10063452:	72f8      	strb	r0, [r7, #11]
10063454:	4638      	mov	r0, r7
10063456:	3012      	adds	r0, #18
10063458:	9901      	ldr	r1, [sp, #4]
1006345a:	4632      	mov	r2, r6
1006345c:	f7ef f8fa 	bl	10052654 <BLEPLAT_MemCpy>
10063460:	200c      	movs	r0, #12
10063462:	7278      	strb	r0, [r7, #9]
10063464:	2001      	movs	r0, #1
10063466:	7238      	strb	r0, [r7, #8]
10063468:	360a      	adds	r6, #10
1006346a:	0a30      	lsrs	r0, r6, #8
1006346c:	71f8      	strb	r0, [r7, #7]
1006346e:	71be      	strb	r6, [r7, #6]
10063470:	20ff      	movs	r0, #255	@ 0xff
10063472:	7178      	strb	r0, [r7, #5]
10063474:	2082      	movs	r0, #130	@ 0x82
10063476:	7138      	strb	r0, [r7, #4]
10063478:	4628      	mov	r0, r5
1006347a:	4639      	mov	r1, r7
1006347c:	f7f1 fed3 	bl	10055226 <aci_event_fifo_push>
10063480:	e000      	b.n	10063484 <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
10063482:	2486      	movs	r4, #134	@ 0x86
10063484:	4620      	mov	r0, r4
10063486:	b005      	add	sp, #20
10063488:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006348a:	2407      	movs	r4, #7
1006348c:	e7fa      	b.n	10063484 <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
1006348e:	46c0      	nop			@ (mov r8, r8)

10063490 <__arm_cp.15_0>:
10063490:	20002470 	.word	0x20002470

10063494 <__arm_cp.15_1>:
10063494:	20002420 	.word	0x20002420

10063498 <aci_gatt_proc_timeout_event_push_noinline>:
10063498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006349a:	4604      	mov	r4, r0
1006349c:	06c0      	lsls	r0, r0, #27
1006349e:	d408      	bmi.n	100634b2 <aci_gatt_proc_timeout_event_push_noinline+0x1a>
100634a0:	460d      	mov	r5, r1
100634a2:	4819      	ldr	r0, [pc, #100]	@ (10063508 <__arm_cp.16_0>)
100634a4:	6800      	ldr	r0, [r0, #0]
100634a6:	2150      	movs	r1, #80	@ 0x50
100634a8:	5c40      	ldrb	r0, [r0, r1]
100634aa:	0780      	lsls	r0, r0, #30
100634ac:	d403      	bmi.n	100634b6 <aci_gatt_proc_timeout_event_push_noinline+0x1e>
100634ae:	2700      	movs	r7, #0
100634b0:	e027      	b.n	10063502 <aci_gatt_proc_timeout_event_push_noinline+0x6a>
100634b2:	2786      	movs	r7, #134	@ 0x86
100634b4:	e025      	b.n	10063502 <aci_gatt_proc_timeout_event_push_noinline+0x6a>
100634b6:	4616      	mov	r6, r2
100634b8:	4814      	ldr	r0, [pc, #80]	@ (1006350c <__arm_cp.16_1>)
100634ba:	6800      	ldr	r0, [r0, #0]
100634bc:	0761      	lsls	r1, r4, #29
100634be:	0ec9      	lsrs	r1, r1, #27
100634c0:	1840      	adds	r0, r0, r1
100634c2:	6900      	ldr	r0, [r0, #16]
100634c4:	2257      	movs	r2, #87	@ 0x57
100634c6:	2303      	movs	r3, #3
100634c8:	4621      	mov	r1, r4
100634ca:	f7f1 fe0f 	bl	100550ec <aci_event_fifo_push_header>
100634ce:	2800      	cmp	r0, #0
100634d0:	d016      	beq.n	10063500 <aci_gatt_proc_timeout_event_push_noinline+0x68>
100634d2:	4601      	mov	r1, r0
100634d4:	7306      	strb	r6, [r0, #12]
100634d6:	7285      	strb	r5, [r0, #10]
100634d8:	200c      	movs	r0, #12
100634da:	7248      	strb	r0, [r1, #9]
100634dc:	2002      	movs	r0, #2
100634de:	7208      	strb	r0, [r1, #8]
100634e0:	2700      	movs	r7, #0
100634e2:	71cf      	strb	r7, [r1, #7]
100634e4:	2006      	movs	r0, #6
100634e6:	7188      	strb	r0, [r1, #6]
100634e8:	20ff      	movs	r0, #255	@ 0xff
100634ea:	7148      	strb	r0, [r1, #5]
100634ec:	2082      	movs	r0, #130	@ 0x82
100634ee:	7108      	strb	r0, [r1, #4]
100634f0:	0a30      	lsrs	r0, r6, #8
100634f2:	7348      	strb	r0, [r1, #13]
100634f4:	0a28      	lsrs	r0, r5, #8
100634f6:	72c8      	strb	r0, [r1, #11]
100634f8:	4620      	mov	r0, r4
100634fa:	f7f1 fe94 	bl	10055226 <aci_event_fifo_push>
100634fe:	e000      	b.n	10063502 <aci_gatt_proc_timeout_event_push_noinline+0x6a>
10063500:	2707      	movs	r7, #7
10063502:	4638      	mov	r0, r7
10063504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063506:	46c0      	nop			@ (mov r8, r8)

10063508 <__arm_cp.16_0>:
10063508:	20002470 	.word	0x20002470

1006350c <__arm_cp.16_1>:
1006350c:	20002420 	.word	0x20002420

10063510 <aci_gatt_clt_indication_event_push_noinline>:
10063510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063512:	4605      	mov	r5, r0
10063514:	06c0      	lsls	r0, r0, #27
10063516:	d421      	bmi.n	1006355c <aci_gatt_clt_indication_event_push_noinline+0x4c>
10063518:	460e      	mov	r6, r1
1006351a:	4813      	ldr	r0, [pc, #76]	@ (10063568 <__arm_cp.17_0>)
1006351c:	6800      	ldr	r0, [r0, #0]
1006351e:	2151      	movs	r1, #81	@ 0x51
10063520:	5c40      	ldrb	r0, [r0, r1]
10063522:	2400      	movs	r4, #0
10063524:	0680      	lsls	r0, r0, #26
10063526:	d51a      	bpl.n	1006355e <aci_gatt_clt_indication_event_push_noinline+0x4e>
10063528:	4617      	mov	r7, r2
1006352a:	9300      	str	r3, [sp, #0]
1006352c:	480f      	ldr	r0, [pc, #60]	@ (1006356c <__arm_cp.17_1>)
1006352e:	6800      	ldr	r0, [r0, #0]
10063530:	0769      	lsls	r1, r5, #29
10063532:	0ec9      	lsrs	r1, r1, #27
10063534:	1840      	adds	r0, r0, r1
10063536:	6900      	ldr	r0, [r0, #16]
10063538:	220f      	movs	r2, #15
1006353a:	2303      	movs	r3, #3
1006353c:	4629      	mov	r1, r5
1006353e:	f7f1 fdd5 	bl	100550ec <aci_event_fifo_push_header>
10063542:	2800      	cmp	r0, #0
10063544:	d00d      	beq.n	10063562 <aci_gatt_clt_indication_event_push_noinline+0x52>
10063546:	4601      	mov	r1, r0
10063548:	9800      	ldr	r0, [sp, #0]
1006354a:	60c8      	str	r0, [r1, #12]
1006354c:	814f      	strh	r7, [r1, #10]
1006354e:	810e      	strh	r6, [r1, #8]
10063550:	4807      	ldr	r0, [pc, #28]	@ (10063570 <__arm_cp.17_2>)
10063552:	6048      	str	r0, [r1, #4]
10063554:	4628      	mov	r0, r5
10063556:	f7f1 fe66 	bl	10055226 <aci_event_fifo_push>
1006355a:	e000      	b.n	1006355e <aci_gatt_clt_indication_event_push_noinline+0x4e>
1006355c:	2486      	movs	r4, #134	@ 0x86
1006355e:	4620      	mov	r0, r4
10063560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063562:	2407      	movs	r4, #7
10063564:	e7fb      	b.n	1006355e <aci_gatt_clt_indication_event_push_noinline+0x4e>
10063566:	46c0      	nop			@ (mov r8, r8)

10063568 <__arm_cp.17_0>:
10063568:	20002470 	.word	0x20002470

1006356c <__arm_cp.17_1>:
1006356c:	20002420 	.word	0x20002420

10063570 <__arm_cp.17_2>:
10063570:	10062f51 	.word	0x10062f51

10063574 <aci_gatt_clt_notification_event_push_noinline>:
10063574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063576:	4605      	mov	r5, r0
10063578:	06c0      	lsls	r0, r0, #27
1006357a:	d421      	bmi.n	100635c0 <aci_gatt_clt_notification_event_push_noinline+0x4c>
1006357c:	460e      	mov	r6, r1
1006357e:	4813      	ldr	r0, [pc, #76]	@ (100635cc <__arm_cp.18_0>)
10063580:	6800      	ldr	r0, [r0, #0]
10063582:	2151      	movs	r1, #81	@ 0x51
10063584:	5c40      	ldrb	r0, [r0, r1]
10063586:	2400      	movs	r4, #0
10063588:	0640      	lsls	r0, r0, #25
1006358a:	d51a      	bpl.n	100635c2 <aci_gatt_clt_notification_event_push_noinline+0x4e>
1006358c:	4617      	mov	r7, r2
1006358e:	9300      	str	r3, [sp, #0]
10063590:	480f      	ldr	r0, [pc, #60]	@ (100635d0 <__arm_cp.18_1>)
10063592:	6800      	ldr	r0, [r0, #0]
10063594:	0769      	lsls	r1, r5, #29
10063596:	0ec9      	lsrs	r1, r1, #27
10063598:	1840      	adds	r0, r0, r1
1006359a:	6900      	ldr	r0, [r0, #16]
1006359c:	2210      	movs	r2, #16
1006359e:	2303      	movs	r3, #3
100635a0:	4629      	mov	r1, r5
100635a2:	f7f1 fda3 	bl	100550ec <aci_event_fifo_push_header>
100635a6:	2800      	cmp	r0, #0
100635a8:	d00d      	beq.n	100635c6 <aci_gatt_clt_notification_event_push_noinline+0x52>
100635aa:	4601      	mov	r1, r0
100635ac:	9800      	ldr	r0, [sp, #0]
100635ae:	60c8      	str	r0, [r1, #12]
100635b0:	814f      	strh	r7, [r1, #10]
100635b2:	810e      	strh	r6, [r1, #8]
100635b4:	4807      	ldr	r0, [pc, #28]	@ (100635d4 <__arm_cp.18_2>)
100635b6:	6048      	str	r0, [r1, #4]
100635b8:	4628      	mov	r0, r5
100635ba:	f7f1 fe34 	bl	10055226 <aci_event_fifo_push>
100635be:	e000      	b.n	100635c2 <aci_gatt_clt_notification_event_push_noinline+0x4e>
100635c0:	2486      	movs	r4, #134	@ 0x86
100635c2:	4620      	mov	r0, r4
100635c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100635c6:	2407      	movs	r4, #7
100635c8:	e7fb      	b.n	100635c2 <aci_gatt_clt_notification_event_push_noinline+0x4e>
100635ca:	46c0      	nop			@ (mov r8, r8)

100635cc <__arm_cp.18_0>:
100635cc:	20002470 	.word	0x20002470

100635d0 <__arm_cp.18_1>:
100635d0:	20002420 	.word	0x20002420

100635d4 <__arm_cp.18_2>:
100635d4:	10062fa1 	.word	0x10062fa1

100635d8 <aci_gatt_clt_error_resp_event_push_noinline>:
100635d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100635da:	4604      	mov	r4, r0
100635dc:	06c0      	lsls	r0, r0, #27
100635de:	d408      	bmi.n	100635f2 <aci_gatt_clt_error_resp_event_push_noinline+0x1a>
100635e0:	460d      	mov	r5, r1
100635e2:	481e      	ldr	r0, [pc, #120]	@ (1006365c <__arm_cp.20_0>)
100635e4:	6800      	ldr	r0, [r0, #0]
100635e6:	2151      	movs	r1, #81	@ 0x51
100635e8:	5640      	ldrsb	r0, [r0, r1]
100635ea:	2800      	cmp	r0, #0
100635ec:	d404      	bmi.n	100635f8 <aci_gatt_clt_error_resp_event_push_noinline+0x20>
100635ee:	2700      	movs	r7, #0
100635f0:	e000      	b.n	100635f4 <aci_gatt_clt_error_resp_event_push_noinline+0x1c>
100635f2:	2786      	movs	r7, #134	@ 0x86
100635f4:	4638      	mov	r0, r7
100635f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100635f8:	461f      	mov	r7, r3
100635fa:	4616      	mov	r6, r2
100635fc:	4818      	ldr	r0, [pc, #96]	@ (10063660 <__arm_cp.20_1>)
100635fe:	6800      	ldr	r0, [r0, #0]
10063600:	0761      	lsls	r1, r4, #29
10063602:	0ec9      	lsrs	r1, r1, #27
10063604:	1840      	adds	r0, r0, r1
10063606:	6900      	ldr	r0, [r0, #16]
10063608:	225b      	movs	r2, #91	@ 0x5b
1006360a:	2304      	movs	r3, #4
1006360c:	4621      	mov	r1, r4
1006360e:	f7f1 fd6d 	bl	100550ec <aci_event_fifo_push_header>
10063612:	2800      	cmp	r0, #0
10063614:	d020      	beq.n	10063658 <aci_gatt_clt_error_resp_event_push_noinline+0x80>
10063616:	4601      	mov	r1, r0
10063618:	9a07      	ldr	r2, [sp, #28]
1006361a:	9806      	ldr	r0, [sp, #24]
1006361c:	9000      	str	r0, [sp, #0]
1006361e:	73c8      	strb	r0, [r1, #15]
10063620:	730e      	strb	r6, [r1, #12]
10063622:	728d      	strb	r5, [r1, #10]
10063624:	230c      	movs	r3, #12
10063626:	724b      	strb	r3, [r1, #9]
10063628:	2311      	movs	r3, #17
1006362a:	720b      	strb	r3, [r1, #8]
1006362c:	4638      	mov	r0, r7
1006362e:	2700      	movs	r7, #0
10063630:	71cf      	strb	r7, [r1, #7]
10063632:	230a      	movs	r3, #10
10063634:	718b      	strb	r3, [r1, #6]
10063636:	744a      	strb	r2, [r1, #17]
10063638:	7388      	strb	r0, [r1, #14]
1006363a:	22ff      	movs	r2, #255	@ 0xff
1006363c:	714a      	strb	r2, [r1, #5]
1006363e:	2282      	movs	r2, #130	@ 0x82
10063640:	710a      	strb	r2, [r1, #4]
10063642:	9800      	ldr	r0, [sp, #0]
10063644:	0a00      	lsrs	r0, r0, #8
10063646:	7408      	strb	r0, [r1, #16]
10063648:	0a30      	lsrs	r0, r6, #8
1006364a:	7348      	strb	r0, [r1, #13]
1006364c:	0a28      	lsrs	r0, r5, #8
1006364e:	72c8      	strb	r0, [r1, #11]
10063650:	4620      	mov	r0, r4
10063652:	f7f1 fde8 	bl	10055226 <aci_event_fifo_push>
10063656:	e7cd      	b.n	100635f4 <aci_gatt_clt_error_resp_event_push_noinline+0x1c>
10063658:	2707      	movs	r7, #7
1006365a:	e7cb      	b.n	100635f4 <aci_gatt_clt_error_resp_event_push_noinline+0x1c>

1006365c <__arm_cp.20_0>:
1006365c:	20002470 	.word	0x20002470

10063660 <__arm_cp.20_1>:
10063660:	20002420 	.word	0x20002420

10063664 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>:
10063664:	b5f0      	push	{r4, r5, r6, r7, lr}
10063666:	b087      	sub	sp, #28
10063668:	4605      	mov	r5, r0
1006366a:	06c0      	lsls	r0, r0, #27
1006366c:	d443      	bmi.n	100636f6 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x92>
1006366e:	460e      	mov	r6, r1
10063670:	4824      	ldr	r0, [pc, #144]	@ (10063704 <__arm_cp.21_0>)
10063672:	6800      	ldr	r0, [r0, #0]
10063674:	2152      	movs	r1, #82	@ 0x52
10063676:	5c40      	ldrb	r0, [r0, r1]
10063678:	2400      	movs	r4, #0
1006367a:	0780      	lsls	r0, r0, #30
1006367c:	d53c      	bpl.n	100636f8 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
1006367e:	9204      	str	r2, [sp, #16]
10063680:	9305      	str	r3, [sp, #20]
10063682:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10063684:	4820      	ldr	r0, [pc, #128]	@ (10063708 <__arm_cp.21_1>)
10063686:	6800      	ldr	r0, [r0, #0]
10063688:	0769      	lsls	r1, r5, #29
1006368a:	0ec9      	lsrs	r1, r1, #27
1006368c:	1840      	adds	r0, r0, r1
1006368e:	6900      	ldr	r0, [r0, #16]
10063690:	491e      	ldr	r1, [pc, #120]	@ (1006370c <__arm_cp.21_2>)
10063692:	9206      	str	r2, [sp, #24]
10063694:	1851      	adds	r1, r2, r1
10063696:	2203      	movs	r2, #3
10063698:	430a      	orrs	r2, r1
1006369a:	3211      	adds	r2, #17
1006369c:	0891      	lsrs	r1, r2, #2
1006369e:	b28b      	uxth	r3, r1
100636a0:	225c      	movs	r2, #92	@ 0x5c
100636a2:	4629      	mov	r1, r5
100636a4:	f7f1 fd22 	bl	100550ec <aci_event_fifo_push_header>
100636a8:	2800      	cmp	r0, #0
100636aa:	d028      	beq.n	100636fe <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x9a>
100636ac:	4607      	mov	r7, r0
100636ae:	990d      	ldr	r1, [sp, #52]	@ 0x34
100636b0:	9806      	ldr	r0, [sp, #24]
100636b2:	9000      	str	r0, [sp, #0]
100636b4:	9103      	str	r1, [sp, #12]
100636b6:	9101      	str	r1, [sp, #4]
100636b8:	1d38      	adds	r0, r7, #4
100636ba:	4631      	mov	r1, r6
100636bc:	9a04      	ldr	r2, [sp, #16]
100636be:	9b05      	ldr	r3, [sp, #20]
100636c0:	f7f2 f9f3 	bl	10055aaa <aci_gatt_clt_disc_read_char_by_uuid_resp_event_copy>
100636c4:	0728      	lsls	r0, r5, #28
100636c6:	d504      	bpl.n	100636d2 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x6e>
100636c8:	9803      	ldr	r0, [sp, #12]
100636ca:	f7f1 fb5b 	bl	10054d84 <ACL_pkt_release>
100636ce:	20f7      	movs	r0, #247	@ 0xf7
100636d0:	4005      	ands	r5, r0
100636d2:	200c      	movs	r0, #12
100636d4:	7278      	strb	r0, [r7, #9]
100636d6:	2012      	movs	r0, #18
100636d8:	7238      	strb	r0, [r7, #8]
100636da:	20ff      	movs	r0, #255	@ 0xff
100636dc:	7178      	strb	r0, [r7, #5]
100636de:	2082      	movs	r0, #130	@ 0x82
100636e0:	7138      	strb	r0, [r7, #4]
100636e2:	9806      	ldr	r0, [sp, #24]
100636e4:	1dc0      	adds	r0, r0, #7
100636e6:	71b8      	strb	r0, [r7, #6]
100636e8:	0a00      	lsrs	r0, r0, #8
100636ea:	71f8      	strb	r0, [r7, #7]
100636ec:	4628      	mov	r0, r5
100636ee:	4639      	mov	r1, r7
100636f0:	f7f1 fd99 	bl	10055226 <aci_event_fifo_push>
100636f4:	e000      	b.n	100636f8 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
100636f6:	2486      	movs	r4, #134	@ 0x86
100636f8:	4620      	mov	r0, r4
100636fa:	b007      	add	sp, #28
100636fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100636fe:	2407      	movs	r4, #7
10063700:	e7fa      	b.n	100636f8 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
10063702:	46c0      	nop			@ (mov r8, r8)

10063704 <__arm_cp.21_0>:
10063704:	20002470 	.word	0x20002470

10063708 <__arm_cp.21_1>:
10063708:	20002420 	.word	0x20002420

1006370c <__arm_cp.21_2>:
1006370c:	0003fffd 	.word	0x0003fffd

10063710 <aci_gatt_tx_pool_available_event_push_noinline>:
10063710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063712:	4604      	mov	r4, r0
10063714:	06c0      	lsls	r0, r0, #27
10063716:	d425      	bmi.n	10063764 <aci_gatt_tx_pool_available_event_push_noinline+0x54>
10063718:	4616      	mov	r6, r2
1006371a:	460d      	mov	r5, r1
1006371c:	4814      	ldr	r0, [pc, #80]	@ (10063770 <__arm_cp.22_0>)
1006371e:	6800      	ldr	r0, [r0, #0]
10063720:	0761      	lsls	r1, r4, #29
10063722:	0ec9      	lsrs	r1, r1, #27
10063724:	1840      	adds	r0, r0, r1
10063726:	6900      	ldr	r0, [r0, #16]
10063728:	225d      	movs	r2, #93	@ 0x5d
1006372a:	2303      	movs	r3, #3
1006372c:	4621      	mov	r1, r4
1006372e:	f7f1 fcdd 	bl	100550ec <aci_event_fifo_push_header>
10063732:	2800      	cmp	r0, #0
10063734:	d018      	beq.n	10063768 <aci_gatt_tx_pool_available_event_push_noinline+0x58>
10063736:	4601      	mov	r1, r0
10063738:	7306      	strb	r6, [r0, #12]
1006373a:	7285      	strb	r5, [r0, #10]
1006373c:	200c      	movs	r0, #12
1006373e:	7248      	strb	r0, [r1, #9]
10063740:	2016      	movs	r0, #22
10063742:	7208      	strb	r0, [r1, #8]
10063744:	2700      	movs	r7, #0
10063746:	71cf      	strb	r7, [r1, #7]
10063748:	2006      	movs	r0, #6
1006374a:	7188      	strb	r0, [r1, #6]
1006374c:	20ff      	movs	r0, #255	@ 0xff
1006374e:	7148      	strb	r0, [r1, #5]
10063750:	2082      	movs	r0, #130	@ 0x82
10063752:	7108      	strb	r0, [r1, #4]
10063754:	0a30      	lsrs	r0, r6, #8
10063756:	7348      	strb	r0, [r1, #13]
10063758:	0a28      	lsrs	r0, r5, #8
1006375a:	72c8      	strb	r0, [r1, #11]
1006375c:	4620      	mov	r0, r4
1006375e:	f7f1 fd62 	bl	10055226 <aci_event_fifo_push>
10063762:	e002      	b.n	1006376a <aci_gatt_tx_pool_available_event_push_noinline+0x5a>
10063764:	2786      	movs	r7, #134	@ 0x86
10063766:	e000      	b.n	1006376a <aci_gatt_tx_pool_available_event_push_noinline+0x5a>
10063768:	2707      	movs	r7, #7
1006376a:	4638      	mov	r0, r7
1006376c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006376e:	46c0      	nop			@ (mov r8, r8)

10063770 <__arm_cp.22_0>:
10063770:	20002420 	.word	0x20002420

10063774 <aci_gatt_srv_confirmation_event_push_noinline>:
10063774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063776:	4604      	mov	r4, r0
10063778:	06c0      	lsls	r0, r0, #27
1006377a:	d425      	bmi.n	100637c8 <aci_gatt_srv_confirmation_event_push_noinline+0x54>
1006377c:	4616      	mov	r6, r2
1006377e:	460d      	mov	r5, r1
10063780:	4814      	ldr	r0, [pc, #80]	@ (100637d4 <__arm_cp.23_0>)
10063782:	6800      	ldr	r0, [r0, #0]
10063784:	0761      	lsls	r1, r4, #29
10063786:	0ec9      	lsrs	r1, r1, #27
10063788:	1840      	adds	r0, r0, r1
1006378a:	6900      	ldr	r0, [r0, #16]
1006378c:	225e      	movs	r2, #94	@ 0x5e
1006378e:	2303      	movs	r3, #3
10063790:	4621      	mov	r1, r4
10063792:	f7f1 fcab 	bl	100550ec <aci_event_fifo_push_header>
10063796:	2800      	cmp	r0, #0
10063798:	d018      	beq.n	100637cc <aci_gatt_srv_confirmation_event_push_noinline+0x58>
1006379a:	4601      	mov	r1, r0
1006379c:	7306      	strb	r6, [r0, #12]
1006379e:	7285      	strb	r5, [r0, #10]
100637a0:	200c      	movs	r0, #12
100637a2:	7248      	strb	r0, [r1, #9]
100637a4:	2017      	movs	r0, #23
100637a6:	7208      	strb	r0, [r1, #8]
100637a8:	2700      	movs	r7, #0
100637aa:	71cf      	strb	r7, [r1, #7]
100637ac:	2006      	movs	r0, #6
100637ae:	7188      	strb	r0, [r1, #6]
100637b0:	20ff      	movs	r0, #255	@ 0xff
100637b2:	7148      	strb	r0, [r1, #5]
100637b4:	2082      	movs	r0, #130	@ 0x82
100637b6:	7108      	strb	r0, [r1, #4]
100637b8:	0a30      	lsrs	r0, r6, #8
100637ba:	7348      	strb	r0, [r1, #13]
100637bc:	0a28      	lsrs	r0, r5, #8
100637be:	72c8      	strb	r0, [r1, #11]
100637c0:	4620      	mov	r0, r4
100637c2:	f7f1 fd30 	bl	10055226 <aci_event_fifo_push>
100637c6:	e002      	b.n	100637ce <aci_gatt_srv_confirmation_event_push_noinline+0x5a>
100637c8:	2786      	movs	r7, #134	@ 0x86
100637ca:	e000      	b.n	100637ce <aci_gatt_srv_confirmation_event_push_noinline+0x5a>
100637cc:	2707      	movs	r7, #7
100637ce:	4638      	mov	r0, r7
100637d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100637d2:	46c0      	nop			@ (mov r8, r8)

100637d4 <__arm_cp.23_0>:
100637d4:	20002420 	.word	0x20002420

100637d8 <aci_gatt_srv_read_event_push_noinline>:
100637d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100637da:	4604      	mov	r4, r0
100637dc:	06c0      	lsls	r0, r0, #27
100637de:	d42e      	bmi.n	1006383e <aci_gatt_srv_read_event_push_noinline+0x66>
100637e0:	461f      	mov	r7, r3
100637e2:	4616      	mov	r6, r2
100637e4:	460d      	mov	r5, r1
100637e6:	4818      	ldr	r0, [pc, #96]	@ (10063848 <__arm_cp.24_0>)
100637e8:	6800      	ldr	r0, [r0, #0]
100637ea:	0761      	lsls	r1, r4, #29
100637ec:	0ec9      	lsrs	r1, r1, #27
100637ee:	1840      	adds	r0, r0, r1
100637f0:	6900      	ldr	r0, [r0, #16]
100637f2:	225f      	movs	r2, #95	@ 0x5f
100637f4:	2304      	movs	r3, #4
100637f6:	4621      	mov	r1, r4
100637f8:	f7f1 fc78 	bl	100550ec <aci_event_fifo_push_header>
100637fc:	2800      	cmp	r0, #0
100637fe:	d020      	beq.n	10063842 <aci_gatt_srv_read_event_push_noinline+0x6a>
10063800:	4601      	mov	r1, r0
10063802:	9806      	ldr	r0, [sp, #24]
10063804:	7408      	strb	r0, [r1, #16]
10063806:	738f      	strb	r7, [r1, #14]
10063808:	730e      	strb	r6, [r1, #12]
1006380a:	728d      	strb	r5, [r1, #10]
1006380c:	220c      	movs	r2, #12
1006380e:	724a      	strb	r2, [r1, #9]
10063810:	2219      	movs	r2, #25
10063812:	720a      	strb	r2, [r1, #8]
10063814:	462b      	mov	r3, r5
10063816:	2500      	movs	r5, #0
10063818:	71cd      	strb	r5, [r1, #7]
1006381a:	220a      	movs	r2, #10
1006381c:	718a      	strb	r2, [r1, #6]
1006381e:	22ff      	movs	r2, #255	@ 0xff
10063820:	714a      	strb	r2, [r1, #5]
10063822:	2282      	movs	r2, #130	@ 0x82
10063824:	710a      	strb	r2, [r1, #4]
10063826:	0a00      	lsrs	r0, r0, #8
10063828:	7448      	strb	r0, [r1, #17]
1006382a:	0a38      	lsrs	r0, r7, #8
1006382c:	73c8      	strb	r0, [r1, #15]
1006382e:	0a30      	lsrs	r0, r6, #8
10063830:	7348      	strb	r0, [r1, #13]
10063832:	0a18      	lsrs	r0, r3, #8
10063834:	72c8      	strb	r0, [r1, #11]
10063836:	4620      	mov	r0, r4
10063838:	f7f1 fcf5 	bl	10055226 <aci_event_fifo_push>
1006383c:	e002      	b.n	10063844 <aci_gatt_srv_read_event_push_noinline+0x6c>
1006383e:	2586      	movs	r5, #134	@ 0x86
10063840:	e000      	b.n	10063844 <aci_gatt_srv_read_event_push_noinline+0x6c>
10063842:	2507      	movs	r5, #7
10063844:	4628      	mov	r0, r5
10063846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10063848 <__arm_cp.24_0>:
10063848:	20002420 	.word	0x20002420

1006384c <aci_gatt_srv_write_event_push_noinline>:
1006384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006384e:	4604      	mov	r4, r0
10063850:	06c0      	lsls	r0, r0, #27
10063852:	d420      	bmi.n	10063896 <aci_gatt_srv_write_event_push_noinline+0x4a>
10063854:	461f      	mov	r7, r3
10063856:	4616      	mov	r6, r2
10063858:	460d      	mov	r5, r1
1006385a:	4811      	ldr	r0, [pc, #68]	@ (100638a0 <__arm_cp.25_0>)
1006385c:	6800      	ldr	r0, [r0, #0]
1006385e:	0761      	lsls	r1, r4, #29
10063860:	0ec9      	lsrs	r1, r1, #27
10063862:	1840      	adds	r0, r0, r1
10063864:	6900      	ldr	r0, [r0, #16]
10063866:	2211      	movs	r2, #17
10063868:	2305      	movs	r3, #5
1006386a:	4621      	mov	r1, r4
1006386c:	f7f1 fc3e 	bl	100550ec <aci_event_fifo_push_header>
10063870:	2800      	cmp	r0, #0
10063872:	d012      	beq.n	1006389a <aci_gatt_srv_write_event_push_noinline+0x4e>
10063874:	4601      	mov	r1, r0
10063876:	9808      	ldr	r0, [sp, #32]
10063878:	9a07      	ldr	r2, [sp, #28]
1006387a:	9b06      	ldr	r3, [sp, #24]
1006387c:	6148      	str	r0, [r1, #20]
1006387e:	820a      	strh	r2, [r1, #16]
10063880:	81cb      	strh	r3, [r1, #14]
10063882:	730f      	strb	r7, [r1, #12]
10063884:	814e      	strh	r6, [r1, #10]
10063886:	810d      	strh	r5, [r1, #8]
10063888:	4806      	ldr	r0, [pc, #24]	@ (100638a4 <__arm_cp.25_1>)
1006388a:	6048      	str	r0, [r1, #4]
1006388c:	4620      	mov	r0, r4
1006388e:	f7f1 fcca 	bl	10055226 <aci_event_fifo_push>
10063892:	2000      	movs	r0, #0
10063894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063896:	2086      	movs	r0, #134	@ 0x86
10063898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006389a:	2007      	movs	r0, #7
1006389c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006389e:	46c0      	nop			@ (mov r8, r8)

100638a0 <__arm_cp.25_0>:
100638a0:	20002420 	.word	0x20002420

100638a4 <__arm_cp.25_1>:
100638a4:	10062fdd 	.word	0x10062fdd

100638a8 <aci_gatt_clt_multi_notification_int_event_push_noinline>:
100638a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100638aa:	4605      	mov	r5, r0
100638ac:	06c0      	lsls	r0, r0, #27
100638ae:	d421      	bmi.n	100638f4 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4c>
100638b0:	460e      	mov	r6, r1
100638b2:	4813      	ldr	r0, [pc, #76]	@ (10063900 <__arm_cp.26_0>)
100638b4:	6800      	ldr	r0, [r0, #0]
100638b6:	2152      	movs	r1, #82	@ 0x52
100638b8:	5c40      	ldrb	r0, [r0, r1]
100638ba:	2400      	movs	r4, #0
100638bc:	0700      	lsls	r0, r0, #28
100638be:	d51a      	bpl.n	100638f6 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
100638c0:	4617      	mov	r7, r2
100638c2:	9300      	str	r3, [sp, #0]
100638c4:	480f      	ldr	r0, [pc, #60]	@ (10063904 <__arm_cp.26_1>)
100638c6:	6800      	ldr	r0, [r0, #0]
100638c8:	0769      	lsls	r1, r5, #29
100638ca:	0ec9      	lsrs	r1, r1, #27
100638cc:	1840      	adds	r0, r0, r1
100638ce:	6900      	ldr	r0, [r0, #16]
100638d0:	2214      	movs	r2, #20
100638d2:	2303      	movs	r3, #3
100638d4:	4629      	mov	r1, r5
100638d6:	f7f1 fc09 	bl	100550ec <aci_event_fifo_push_header>
100638da:	2800      	cmp	r0, #0
100638dc:	d00d      	beq.n	100638fa <aci_gatt_clt_multi_notification_int_event_push_noinline+0x52>
100638de:	4601      	mov	r1, r0
100638e0:	9800      	ldr	r0, [sp, #0]
100638e2:	60c8      	str	r0, [r1, #12]
100638e4:	814f      	strh	r7, [r1, #10]
100638e6:	810e      	strh	r6, [r1, #8]
100638e8:	4807      	ldr	r0, [pc, #28]	@ (10063908 <__arm_cp.26_2>)
100638ea:	6048      	str	r0, [r1, #4]
100638ec:	4628      	mov	r0, r5
100638ee:	f7f1 fc9a 	bl	10055226 <aci_event_fifo_push>
100638f2:	e000      	b.n	100638f6 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
100638f4:	2486      	movs	r4, #134	@ 0x86
100638f6:	4620      	mov	r0, r4
100638f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100638fa:	2407      	movs	r4, #7
100638fc:	e7fb      	b.n	100638f6 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
100638fe:	46c0      	nop			@ (mov r8, r8)

10063900 <__arm_cp.26_0>:
10063900:	20002470 	.word	0x20002470

10063904 <__arm_cp.26_1>:
10063904:	20002420 	.word	0x20002420

10063908 <__arm_cp.26_2>:
10063908:	1006303d 	.word	0x1006303d

1006390c <aci_att_exchange_mtu_resp_event_push_noinline>:
1006390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006390e:	4604      	mov	r4, r0
10063910:	06c0      	lsls	r0, r0, #27
10063912:	d408      	bmi.n	10063926 <aci_att_exchange_mtu_resp_event_push_noinline+0x1a>
10063914:	460d      	mov	r5, r1
10063916:	4819      	ldr	r0, [pc, #100]	@ (1006397c <__arm_cp.27_0>)
10063918:	6800      	ldr	r0, [r0, #0]
1006391a:	2150      	movs	r1, #80	@ 0x50
1006391c:	5c40      	ldrb	r0, [r0, r1]
1006391e:	0740      	lsls	r0, r0, #29
10063920:	d403      	bmi.n	1006392a <aci_att_exchange_mtu_resp_event_push_noinline+0x1e>
10063922:	2700      	movs	r7, #0
10063924:	e027      	b.n	10063976 <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
10063926:	2786      	movs	r7, #134	@ 0x86
10063928:	e025      	b.n	10063976 <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
1006392a:	4616      	mov	r6, r2
1006392c:	4814      	ldr	r0, [pc, #80]	@ (10063980 <__arm_cp.27_1>)
1006392e:	6800      	ldr	r0, [r0, #0]
10063930:	0761      	lsls	r1, r4, #29
10063932:	0ec9      	lsrs	r1, r1, #27
10063934:	1840      	adds	r0, r0, r1
10063936:	6900      	ldr	r0, [r0, #16]
10063938:	2258      	movs	r2, #88	@ 0x58
1006393a:	2703      	movs	r7, #3
1006393c:	4621      	mov	r1, r4
1006393e:	463b      	mov	r3, r7
10063940:	f7f1 fbd4 	bl	100550ec <aci_event_fifo_push_header>
10063944:	2800      	cmp	r0, #0
10063946:	d015      	beq.n	10063974 <aci_att_exchange_mtu_resp_event_push_noinline+0x68>
10063948:	4601      	mov	r1, r0
1006394a:	7306      	strb	r6, [r0, #12]
1006394c:	7285      	strb	r5, [r0, #10]
1006394e:	200c      	movs	r0, #12
10063950:	7248      	strb	r0, [r1, #9]
10063952:	720f      	strb	r7, [r1, #8]
10063954:	2700      	movs	r7, #0
10063956:	71cf      	strb	r7, [r1, #7]
10063958:	2006      	movs	r0, #6
1006395a:	7188      	strb	r0, [r1, #6]
1006395c:	20ff      	movs	r0, #255	@ 0xff
1006395e:	7148      	strb	r0, [r1, #5]
10063960:	2082      	movs	r0, #130	@ 0x82
10063962:	7108      	strb	r0, [r1, #4]
10063964:	0a30      	lsrs	r0, r6, #8
10063966:	7348      	strb	r0, [r1, #13]
10063968:	0a28      	lsrs	r0, r5, #8
1006396a:	72c8      	strb	r0, [r1, #11]
1006396c:	4620      	mov	r0, r4
1006396e:	f7f1 fc5a 	bl	10055226 <aci_event_fifo_push>
10063972:	e000      	b.n	10063976 <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
10063974:	2707      	movs	r7, #7
10063976:	4638      	mov	r0, r7
10063978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006397a:	46c0      	nop			@ (mov r8, r8)

1006397c <__arm_cp.27_0>:
1006397c:	20002470 	.word	0x20002470

10063980 <__arm_cp.27_1>:
10063980:	20002420 	.word	0x20002420

10063984 <aci_att_clt_find_info_resp_event_push_noinline>:
10063984:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10063986:	4604      	mov	r4, r0
10063988:	06c0      	lsls	r0, r0, #27
1006398a:	d424      	bmi.n	100639d6 <aci_att_clt_find_info_resp_event_push_noinline+0x52>
1006398c:	4616      	mov	r6, r2
1006398e:	4813      	ldr	r0, [pc, #76]	@ (100639dc <__arm_cp.28_0>)
10063990:	6800      	ldr	r0, [r0, #0]
10063992:	2250      	movs	r2, #80	@ 0x50
10063994:	5c80      	ldrb	r0, [r0, r2]
10063996:	2500      	movs	r5, #0
10063998:	0700      	lsls	r0, r0, #28
1006399a:	d51d      	bpl.n	100639d8 <aci_att_clt_find_info_resp_event_push_noinline+0x54>
1006399c:	461f      	mov	r7, r3
1006399e:	9101      	str	r1, [sp, #4]
100639a0:	9502      	str	r5, [sp, #8]
100639a2:	480f      	ldr	r0, [pc, #60]	@ (100639e0 <__arm_cp.28_1>)
100639a4:	6800      	ldr	r0, [r0, #0]
100639a6:	0761      	lsls	r1, r4, #29
100639a8:	0ec9      	lsrs	r1, r1, #27
100639aa:	1840      	adds	r0, r0, r1
100639ac:	6900      	ldr	r0, [r0, #16]
100639ae:	2507      	movs	r5, #7
100639b0:	2303      	movs	r3, #3
100639b2:	4621      	mov	r1, r4
100639b4:	462a      	mov	r2, r5
100639b6:	f7f1 fb99 	bl	100550ec <aci_event_fifo_push_header>
100639ba:	2800      	cmp	r0, #0
100639bc:	d00c      	beq.n	100639d8 <aci_att_clt_find_info_resp_event_push_noinline+0x54>
100639be:	4601      	mov	r1, r0
100639c0:	60c7      	str	r7, [r0, #12]
100639c2:	8146      	strh	r6, [r0, #10]
100639c4:	9801      	ldr	r0, [sp, #4]
100639c6:	8108      	strh	r0, [r1, #8]
100639c8:	4806      	ldr	r0, [pc, #24]	@ (100639e4 <__arm_cp.28_2>)
100639ca:	6048      	str	r0, [r1, #4]
100639cc:	4620      	mov	r0, r4
100639ce:	f7f1 fc2a 	bl	10055226 <aci_event_fifo_push>
100639d2:	9d02      	ldr	r5, [sp, #8]
100639d4:	e000      	b.n	100639d8 <aci_att_clt_find_info_resp_event_push_noinline+0x54>
100639d6:	2586      	movs	r5, #134	@ 0x86
100639d8:	4628      	mov	r0, r5
100639da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100639dc <__arm_cp.28_0>:
100639dc:	20002470 	.word	0x20002470

100639e0 <__arm_cp.28_1>:
100639e0:	20002420 	.word	0x20002420

100639e4 <__arm_cp.28_2>:
100639e4:	100630bd 	.word	0x100630bd

100639e8 <aci_att_clt_find_by_type_value_resp_event_push_noinline>:
100639e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100639ea:	4605      	mov	r5, r0
100639ec:	06c0      	lsls	r0, r0, #27
100639ee:	d421      	bmi.n	10063a34 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4c>
100639f0:	460e      	mov	r6, r1
100639f2:	4813      	ldr	r0, [pc, #76]	@ (10063a40 <__arm_cp.29_0>)
100639f4:	6800      	ldr	r0, [r0, #0]
100639f6:	2150      	movs	r1, #80	@ 0x50
100639f8:	5c40      	ldrb	r0, [r0, r1]
100639fa:	2400      	movs	r4, #0
100639fc:	06c0      	lsls	r0, r0, #27
100639fe:	d51a      	bpl.n	10063a36 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
10063a00:	4617      	mov	r7, r2
10063a02:	9300      	str	r3, [sp, #0]
10063a04:	480f      	ldr	r0, [pc, #60]	@ (10063a44 <__arm_cp.29_1>)
10063a06:	6800      	ldr	r0, [r0, #0]
10063a08:	0769      	lsls	r1, r5, #29
10063a0a:	0ec9      	lsrs	r1, r1, #27
10063a0c:	1840      	adds	r0, r0, r1
10063a0e:	6900      	ldr	r0, [r0, #16]
10063a10:	2208      	movs	r2, #8
10063a12:	2303      	movs	r3, #3
10063a14:	4629      	mov	r1, r5
10063a16:	f7f1 fb69 	bl	100550ec <aci_event_fifo_push_header>
10063a1a:	2800      	cmp	r0, #0
10063a1c:	d00d      	beq.n	10063a3a <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x52>
10063a1e:	4601      	mov	r1, r0
10063a20:	9800      	ldr	r0, [sp, #0]
10063a22:	60c8      	str	r0, [r1, #12]
10063a24:	814f      	strh	r7, [r1, #10]
10063a26:	810e      	strh	r6, [r1, #8]
10063a28:	4807      	ldr	r0, [pc, #28]	@ (10063a48 <__arm_cp.29_2>)
10063a2a:	6048      	str	r0, [r1, #4]
10063a2c:	4628      	mov	r0, r5
10063a2e:	f7f1 fbfa 	bl	10055226 <aci_event_fifo_push>
10063a32:	e000      	b.n	10063a36 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
10063a34:	2486      	movs	r4, #134	@ 0x86
10063a36:	4620      	mov	r0, r4
10063a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063a3a:	2407      	movs	r4, #7
10063a3c:	e7fb      	b.n	10063a36 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
10063a3e:	46c0      	nop			@ (mov r8, r8)

10063a40 <__arm_cp.29_0>:
10063a40:	20002470 	.word	0x20002470

10063a44 <__arm_cp.29_1>:
10063a44:	20002420 	.word	0x20002420

10063a48 <__arm_cp.29_2>:
10063a48:	10063111 	.word	0x10063111

10063a4c <aci_att_clt_read_by_type_resp_event_push_noinline>:
10063a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063a4e:	4605      	mov	r5, r0
10063a50:	06c0      	lsls	r0, r0, #27
10063a52:	d421      	bmi.n	10063a98 <aci_att_clt_read_by_type_resp_event_push_noinline+0x4c>
10063a54:	460e      	mov	r6, r1
10063a56:	4813      	ldr	r0, [pc, #76]	@ (10063aa4 <__arm_cp.30_0>)
10063a58:	6800      	ldr	r0, [r0, #0]
10063a5a:	2150      	movs	r1, #80	@ 0x50
10063a5c:	5c40      	ldrb	r0, [r0, r1]
10063a5e:	2400      	movs	r4, #0
10063a60:	0680      	lsls	r0, r0, #26
10063a62:	d51a      	bpl.n	10063a9a <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
10063a64:	4617      	mov	r7, r2
10063a66:	9300      	str	r3, [sp, #0]
10063a68:	480f      	ldr	r0, [pc, #60]	@ (10063aa8 <__arm_cp.30_1>)
10063a6a:	6800      	ldr	r0, [r0, #0]
10063a6c:	0769      	lsls	r1, r5, #29
10063a6e:	0ec9      	lsrs	r1, r1, #27
10063a70:	1840      	adds	r0, r0, r1
10063a72:	6900      	ldr	r0, [r0, #16]
10063a74:	2209      	movs	r2, #9
10063a76:	2303      	movs	r3, #3
10063a78:	4629      	mov	r1, r5
10063a7a:	f7f1 fb37 	bl	100550ec <aci_event_fifo_push_header>
10063a7e:	2800      	cmp	r0, #0
10063a80:	d00d      	beq.n	10063a9e <aci_att_clt_read_by_type_resp_event_push_noinline+0x52>
10063a82:	4601      	mov	r1, r0
10063a84:	9800      	ldr	r0, [sp, #0]
10063a86:	60c8      	str	r0, [r1, #12]
10063a88:	814f      	strh	r7, [r1, #10]
10063a8a:	810e      	strh	r6, [r1, #8]
10063a8c:	4807      	ldr	r0, [pc, #28]	@ (10063aac <__arm_cp.30_2>)
10063a8e:	6048      	str	r0, [r1, #4]
10063a90:	4628      	mov	r0, r5
10063a92:	f7f1 fbc8 	bl	10055226 <aci_event_fifo_push>
10063a96:	e000      	b.n	10063a9a <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
10063a98:	2486      	movs	r4, #134	@ 0x86
10063a9a:	4620      	mov	r0, r4
10063a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063a9e:	2407      	movs	r4, #7
10063aa0:	e7fb      	b.n	10063a9a <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
10063aa2:	46c0      	nop			@ (mov r8, r8)

10063aa4 <__arm_cp.30_0>:
10063aa4:	20002470 	.word	0x20002470

10063aa8 <__arm_cp.30_1>:
10063aa8:	20002420 	.word	0x20002420

10063aac <__arm_cp.30_2>:
10063aac:	1006315d 	.word	0x1006315d

10063ab0 <aci_att_clt_read_resp_event_push_noinline>:
10063ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063ab2:	4605      	mov	r5, r0
10063ab4:	06c0      	lsls	r0, r0, #27
10063ab6:	d421      	bmi.n	10063afc <aci_att_clt_read_resp_event_push_noinline+0x4c>
10063ab8:	460e      	mov	r6, r1
10063aba:	4813      	ldr	r0, [pc, #76]	@ (10063b08 <__arm_cp.31_0>)
10063abc:	6800      	ldr	r0, [r0, #0]
10063abe:	2150      	movs	r1, #80	@ 0x50
10063ac0:	5c40      	ldrb	r0, [r0, r1]
10063ac2:	2400      	movs	r4, #0
10063ac4:	0640      	lsls	r0, r0, #25
10063ac6:	d51a      	bpl.n	10063afe <aci_att_clt_read_resp_event_push_noinline+0x4e>
10063ac8:	4617      	mov	r7, r2
10063aca:	9300      	str	r3, [sp, #0]
10063acc:	480f      	ldr	r0, [pc, #60]	@ (10063b0c <__arm_cp.31_1>)
10063ace:	6800      	ldr	r0, [r0, #0]
10063ad0:	0769      	lsls	r1, r5, #29
10063ad2:	0ec9      	lsrs	r1, r1, #27
10063ad4:	1840      	adds	r0, r0, r1
10063ad6:	6900      	ldr	r0, [r0, #16]
10063ad8:	220a      	movs	r2, #10
10063ada:	2303      	movs	r3, #3
10063adc:	4629      	mov	r1, r5
10063ade:	f7f1 fb05 	bl	100550ec <aci_event_fifo_push_header>
10063ae2:	2800      	cmp	r0, #0
10063ae4:	d00d      	beq.n	10063b02 <aci_att_clt_read_resp_event_push_noinline+0x52>
10063ae6:	4601      	mov	r1, r0
10063ae8:	9800      	ldr	r0, [sp, #0]
10063aea:	60c8      	str	r0, [r1, #12]
10063aec:	814f      	strh	r7, [r1, #10]
10063aee:	810e      	strh	r6, [r1, #8]
10063af0:	4807      	ldr	r0, [pc, #28]	@ (10063b10 <__arm_cp.31_2>)
10063af2:	6048      	str	r0, [r1, #4]
10063af4:	4628      	mov	r0, r5
10063af6:	f7f1 fb96 	bl	10055226 <aci_event_fifo_push>
10063afa:	e000      	b.n	10063afe <aci_att_clt_read_resp_event_push_noinline+0x4e>
10063afc:	2486      	movs	r4, #134	@ 0x86
10063afe:	4620      	mov	r0, r4
10063b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063b02:	2407      	movs	r4, #7
10063b04:	e7fb      	b.n	10063afe <aci_att_clt_read_resp_event_push_noinline+0x4e>
10063b06:	46c0      	nop			@ (mov r8, r8)

10063b08 <__arm_cp.31_0>:
10063b08:	20002470 	.word	0x20002470

10063b0c <__arm_cp.31_1>:
10063b0c:	20002420 	.word	0x20002420

10063b10 <__arm_cp.31_2>:
10063b10:	100631b1 	.word	0x100631b1

10063b14 <aci_att_clt_read_blob_resp_event_push_noinline>:
10063b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063b16:	4605      	mov	r5, r0
10063b18:	06c0      	lsls	r0, r0, #27
10063b1a:	d421      	bmi.n	10063b60 <aci_att_clt_read_blob_resp_event_push_noinline+0x4c>
10063b1c:	460e      	mov	r6, r1
10063b1e:	4813      	ldr	r0, [pc, #76]	@ (10063b6c <__arm_cp.32_0>)
10063b20:	6800      	ldr	r0, [r0, #0]
10063b22:	2150      	movs	r1, #80	@ 0x50
10063b24:	5640      	ldrsb	r0, [r0, r1]
10063b26:	2400      	movs	r4, #0
10063b28:	2800      	cmp	r0, #0
10063b2a:	d51a      	bpl.n	10063b62 <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
10063b2c:	4617      	mov	r7, r2
10063b2e:	9300      	str	r3, [sp, #0]
10063b30:	480f      	ldr	r0, [pc, #60]	@ (10063b70 <__arm_cp.32_1>)
10063b32:	6800      	ldr	r0, [r0, #0]
10063b34:	0769      	lsls	r1, r5, #29
10063b36:	0ec9      	lsrs	r1, r1, #27
10063b38:	1840      	adds	r0, r0, r1
10063b3a:	6900      	ldr	r0, [r0, #16]
10063b3c:	220b      	movs	r2, #11
10063b3e:	2303      	movs	r3, #3
10063b40:	4629      	mov	r1, r5
10063b42:	f7f1 fad3 	bl	100550ec <aci_event_fifo_push_header>
10063b46:	2800      	cmp	r0, #0
10063b48:	d00d      	beq.n	10063b66 <aci_att_clt_read_blob_resp_event_push_noinline+0x52>
10063b4a:	4601      	mov	r1, r0
10063b4c:	9800      	ldr	r0, [sp, #0]
10063b4e:	60c8      	str	r0, [r1, #12]
10063b50:	814f      	strh	r7, [r1, #10]
10063b52:	810e      	strh	r6, [r1, #8]
10063b54:	4807      	ldr	r0, [pc, #28]	@ (10063b74 <__arm_cp.32_2>)
10063b56:	6048      	str	r0, [r1, #4]
10063b58:	4628      	mov	r0, r5
10063b5a:	f7f1 fb64 	bl	10055226 <aci_event_fifo_push>
10063b5e:	e000      	b.n	10063b62 <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
10063b60:	2486      	movs	r4, #134	@ 0x86
10063b62:	4620      	mov	r0, r4
10063b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063b66:	2407      	movs	r4, #7
10063b68:	e7fb      	b.n	10063b62 <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
10063b6a:	46c0      	nop			@ (mov r8, r8)

10063b6c <__arm_cp.32_0>:
10063b6c:	20002470 	.word	0x20002470

10063b70 <__arm_cp.32_1>:
10063b70:	20002420 	.word	0x20002420

10063b74 <__arm_cp.32_2>:
10063b74:	10063201 	.word	0x10063201

10063b78 <aci_att_clt_read_multiple_resp_event_push_noinline>:
10063b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063b7a:	4605      	mov	r5, r0
10063b7c:	06c0      	lsls	r0, r0, #27
10063b7e:	d421      	bmi.n	10063bc4 <aci_att_clt_read_multiple_resp_event_push_noinline+0x4c>
10063b80:	460e      	mov	r6, r1
10063b82:	4813      	ldr	r0, [pc, #76]	@ (10063bd0 <__arm_cp.33_0>)
10063b84:	6800      	ldr	r0, [r0, #0]
10063b86:	2151      	movs	r1, #81	@ 0x51
10063b88:	5c40      	ldrb	r0, [r0, r1]
10063b8a:	2400      	movs	r4, #0
10063b8c:	07c0      	lsls	r0, r0, #31
10063b8e:	d01a      	beq.n	10063bc6 <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
10063b90:	4617      	mov	r7, r2
10063b92:	9300      	str	r3, [sp, #0]
10063b94:	480f      	ldr	r0, [pc, #60]	@ (10063bd4 <__arm_cp.33_1>)
10063b96:	6800      	ldr	r0, [r0, #0]
10063b98:	0769      	lsls	r1, r5, #29
10063b9a:	0ec9      	lsrs	r1, r1, #27
10063b9c:	1840      	adds	r0, r0, r1
10063b9e:	6900      	ldr	r0, [r0, #16]
10063ba0:	220c      	movs	r2, #12
10063ba2:	2303      	movs	r3, #3
10063ba4:	4629      	mov	r1, r5
10063ba6:	f7f1 faa1 	bl	100550ec <aci_event_fifo_push_header>
10063baa:	2800      	cmp	r0, #0
10063bac:	d00d      	beq.n	10063bca <aci_att_clt_read_multiple_resp_event_push_noinline+0x52>
10063bae:	4601      	mov	r1, r0
10063bb0:	9800      	ldr	r0, [sp, #0]
10063bb2:	60c8      	str	r0, [r1, #12]
10063bb4:	814f      	strh	r7, [r1, #10]
10063bb6:	810e      	strh	r6, [r1, #8]
10063bb8:	4807      	ldr	r0, [pc, #28]	@ (10063bd8 <__arm_cp.33_2>)
10063bba:	6048      	str	r0, [r1, #4]
10063bbc:	4628      	mov	r0, r5
10063bbe:	f7f1 fb32 	bl	10055226 <aci_event_fifo_push>
10063bc2:	e000      	b.n	10063bc6 <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
10063bc4:	2486      	movs	r4, #134	@ 0x86
10063bc6:	4620      	mov	r0, r4
10063bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063bca:	2407      	movs	r4, #7
10063bcc:	e7fb      	b.n	10063bc6 <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
10063bce:	46c0      	nop			@ (mov r8, r8)

10063bd0 <__arm_cp.33_0>:
10063bd0:	20002470 	.word	0x20002470

10063bd4 <__arm_cp.33_1>:
10063bd4:	20002420 	.word	0x20002420

10063bd8 <__arm_cp.33_2>:
10063bd8:	10063251 	.word	0x10063251

10063bdc <aci_att_clt_read_by_group_type_resp_event_push_noinline>:
10063bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063bde:	4605      	mov	r5, r0
10063be0:	06c0      	lsls	r0, r0, #27
10063be2:	d421      	bmi.n	10063c28 <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4c>
10063be4:	460e      	mov	r6, r1
10063be6:	4813      	ldr	r0, [pc, #76]	@ (10063c34 <__arm_cp.34_0>)
10063be8:	6800      	ldr	r0, [r0, #0]
10063bea:	2151      	movs	r1, #81	@ 0x51
10063bec:	5c40      	ldrb	r0, [r0, r1]
10063bee:	2400      	movs	r4, #0
10063bf0:	0780      	lsls	r0, r0, #30
10063bf2:	d51a      	bpl.n	10063c2a <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
10063bf4:	4617      	mov	r7, r2
10063bf6:	9300      	str	r3, [sp, #0]
10063bf8:	480f      	ldr	r0, [pc, #60]	@ (10063c38 <__arm_cp.34_1>)
10063bfa:	6800      	ldr	r0, [r0, #0]
10063bfc:	0769      	lsls	r1, r5, #29
10063bfe:	0ec9      	lsrs	r1, r1, #27
10063c00:	1840      	adds	r0, r0, r1
10063c02:	6900      	ldr	r0, [r0, #16]
10063c04:	220d      	movs	r2, #13
10063c06:	2303      	movs	r3, #3
10063c08:	4629      	mov	r1, r5
10063c0a:	f7f1 fa6f 	bl	100550ec <aci_event_fifo_push_header>
10063c0e:	2800      	cmp	r0, #0
10063c10:	d00d      	beq.n	10063c2e <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x52>
10063c12:	4601      	mov	r1, r0
10063c14:	9800      	ldr	r0, [sp, #0]
10063c16:	60c8      	str	r0, [r1, #12]
10063c18:	814f      	strh	r7, [r1, #10]
10063c1a:	810e      	strh	r6, [r1, #8]
10063c1c:	4807      	ldr	r0, [pc, #28]	@ (10063c3c <__arm_cp.34_2>)
10063c1e:	6048      	str	r0, [r1, #4]
10063c20:	4628      	mov	r0, r5
10063c22:	f7f1 fb00 	bl	10055226 <aci_event_fifo_push>
10063c26:	e000      	b.n	10063c2a <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
10063c28:	2486      	movs	r4, #134	@ 0x86
10063c2a:	4620      	mov	r0, r4
10063c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063c2e:	2407      	movs	r4, #7
10063c30:	e7fb      	b.n	10063c2a <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
10063c32:	46c0      	nop			@ (mov r8, r8)

10063c34 <__arm_cp.34_0>:
10063c34:	20002470 	.word	0x20002470

10063c38 <__arm_cp.34_1>:
10063c38:	20002420 	.word	0x20002420

10063c3c <__arm_cp.34_2>:
10063c3c:	100632a1 	.word	0x100632a1

10063c40 <aci_att_clt_prepare_write_resp_event_push_noinline>:
10063c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063c42:	4605      	mov	r5, r0
10063c44:	06c0      	lsls	r0, r0, #27
10063c46:	d421      	bmi.n	10063c8c <aci_att_clt_prepare_write_resp_event_push_noinline+0x4c>
10063c48:	460e      	mov	r6, r1
10063c4a:	4813      	ldr	r0, [pc, #76]	@ (10063c98 <__arm_cp.35_0>)
10063c4c:	6800      	ldr	r0, [r0, #0]
10063c4e:	2151      	movs	r1, #81	@ 0x51
10063c50:	5c40      	ldrb	r0, [r0, r1]
10063c52:	2400      	movs	r4, #0
10063c54:	0700      	lsls	r0, r0, #28
10063c56:	d51a      	bpl.n	10063c8e <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
10063c58:	4617      	mov	r7, r2
10063c5a:	9300      	str	r3, [sp, #0]
10063c5c:	480f      	ldr	r0, [pc, #60]	@ (10063c9c <__arm_cp.35_1>)
10063c5e:	6800      	ldr	r0, [r0, #0]
10063c60:	0769      	lsls	r1, r5, #29
10063c62:	0ec9      	lsrs	r1, r1, #27
10063c64:	1840      	adds	r0, r0, r1
10063c66:	6900      	ldr	r0, [r0, #16]
10063c68:	220e      	movs	r2, #14
10063c6a:	2303      	movs	r3, #3
10063c6c:	4629      	mov	r1, r5
10063c6e:	f7f1 fa3d 	bl	100550ec <aci_event_fifo_push_header>
10063c72:	2800      	cmp	r0, #0
10063c74:	d00d      	beq.n	10063c92 <aci_att_clt_prepare_write_resp_event_push_noinline+0x52>
10063c76:	4601      	mov	r1, r0
10063c78:	9800      	ldr	r0, [sp, #0]
10063c7a:	60c8      	str	r0, [r1, #12]
10063c7c:	814f      	strh	r7, [r1, #10]
10063c7e:	810e      	strh	r6, [r1, #8]
10063c80:	4807      	ldr	r0, [pc, #28]	@ (10063ca0 <__arm_cp.35_2>)
10063c82:	6048      	str	r0, [r1, #4]
10063c84:	4628      	mov	r0, r5
10063c86:	f7f1 face 	bl	10055226 <aci_event_fifo_push>
10063c8a:	e000      	b.n	10063c8e <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
10063c8c:	2486      	movs	r4, #134	@ 0x86
10063c8e:	4620      	mov	r0, r4
10063c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063c92:	2407      	movs	r4, #7
10063c94:	e7fb      	b.n	10063c8e <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
10063c96:	46c0      	nop			@ (mov r8, r8)

10063c98 <__arm_cp.35_0>:
10063c98:	20002470 	.word	0x20002470

10063c9c <__arm_cp.35_1>:
10063c9c:	20002420 	.word	0x20002420

10063ca0 <__arm_cp.35_2>:
10063ca0:	100632f5 	.word	0x100632f5

10063ca4 <aci_att_clt_exec_write_resp_event_push_noinline>:
10063ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063ca6:	4604      	mov	r4, r0
10063ca8:	06c0      	lsls	r0, r0, #27
10063caa:	d408      	bmi.n	10063cbe <aci_att_clt_exec_write_resp_event_push_noinline+0x1a>
10063cac:	460d      	mov	r5, r1
10063cae:	4819      	ldr	r0, [pc, #100]	@ (10063d14 <__arm_cp.36_0>)
10063cb0:	6800      	ldr	r0, [r0, #0]
10063cb2:	2151      	movs	r1, #81	@ 0x51
10063cb4:	5c40      	ldrb	r0, [r0, r1]
10063cb6:	06c0      	lsls	r0, r0, #27
10063cb8:	d403      	bmi.n	10063cc2 <aci_att_clt_exec_write_resp_event_push_noinline+0x1e>
10063cba:	2700      	movs	r7, #0
10063cbc:	e027      	b.n	10063d0e <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
10063cbe:	2786      	movs	r7, #134	@ 0x86
10063cc0:	e025      	b.n	10063d0e <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
10063cc2:	4616      	mov	r6, r2
10063cc4:	4814      	ldr	r0, [pc, #80]	@ (10063d18 <__arm_cp.36_1>)
10063cc6:	6800      	ldr	r0, [r0, #0]
10063cc8:	0761      	lsls	r1, r4, #29
10063cca:	0ec9      	lsrs	r1, r1, #27
10063ccc:	1840      	adds	r0, r0, r1
10063cce:	6900      	ldr	r0, [r0, #16]
10063cd0:	2259      	movs	r2, #89	@ 0x59
10063cd2:	2303      	movs	r3, #3
10063cd4:	4621      	mov	r1, r4
10063cd6:	f7f1 fa09 	bl	100550ec <aci_event_fifo_push_header>
10063cda:	2800      	cmp	r0, #0
10063cdc:	d016      	beq.n	10063d0c <aci_att_clt_exec_write_resp_event_push_noinline+0x68>
10063cde:	4601      	mov	r1, r0
10063ce0:	7306      	strb	r6, [r0, #12]
10063ce2:	7285      	strb	r5, [r0, #10]
10063ce4:	200c      	movs	r0, #12
10063ce6:	7248      	strb	r0, [r1, #9]
10063ce8:	200d      	movs	r0, #13
10063cea:	7208      	strb	r0, [r1, #8]
10063cec:	2700      	movs	r7, #0
10063cee:	71cf      	strb	r7, [r1, #7]
10063cf0:	2006      	movs	r0, #6
10063cf2:	7188      	strb	r0, [r1, #6]
10063cf4:	20ff      	movs	r0, #255	@ 0xff
10063cf6:	7148      	strb	r0, [r1, #5]
10063cf8:	2082      	movs	r0, #130	@ 0x82
10063cfa:	7108      	strb	r0, [r1, #4]
10063cfc:	0a30      	lsrs	r0, r6, #8
10063cfe:	7348      	strb	r0, [r1, #13]
10063d00:	0a28      	lsrs	r0, r5, #8
10063d02:	72c8      	strb	r0, [r1, #11]
10063d04:	4620      	mov	r0, r4
10063d06:	f7f1 fa8e 	bl	10055226 <aci_event_fifo_push>
10063d0a:	e000      	b.n	10063d0e <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
10063d0c:	2707      	movs	r7, #7
10063d0e:	4638      	mov	r0, r7
10063d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063d12:	46c0      	nop			@ (mov r8, r8)

10063d14 <__arm_cp.36_0>:
10063d14:	20002470 	.word	0x20002470

10063d18 <__arm_cp.36_1>:
10063d18:	20002420 	.word	0x20002420

10063d1c <aci_att_srv_prepare_write_req_event_push_noinline>:
10063d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063d1e:	4604      	mov	r4, r0
10063d20:	06c0      	lsls	r0, r0, #27
10063d22:	d420      	bmi.n	10063d66 <aci_att_srv_prepare_write_req_event_push_noinline+0x4a>
10063d24:	461f      	mov	r7, r3
10063d26:	4616      	mov	r6, r2
10063d28:	460d      	mov	r5, r1
10063d2a:	4811      	ldr	r0, [pc, #68]	@ (10063d70 <__arm_cp.37_0>)
10063d2c:	6800      	ldr	r0, [r0, #0]
10063d2e:	0761      	lsls	r1, r4, #29
10063d30:	0ec9      	lsrs	r1, r1, #27
10063d32:	1840      	adds	r0, r0, r1
10063d34:	6900      	ldr	r0, [r0, #16]
10063d36:	2212      	movs	r2, #18
10063d38:	2305      	movs	r3, #5
10063d3a:	4621      	mov	r1, r4
10063d3c:	f7f1 f9d6 	bl	100550ec <aci_event_fifo_push_header>
10063d40:	2800      	cmp	r0, #0
10063d42:	d012      	beq.n	10063d6a <aci_att_srv_prepare_write_req_event_push_noinline+0x4e>
10063d44:	4601      	mov	r1, r0
10063d46:	9808      	ldr	r0, [sp, #32]
10063d48:	9a07      	ldr	r2, [sp, #28]
10063d4a:	9b06      	ldr	r3, [sp, #24]
10063d4c:	6148      	str	r0, [r1, #20]
10063d4e:	820a      	strh	r2, [r1, #16]
10063d50:	81cb      	strh	r3, [r1, #14]
10063d52:	818f      	strh	r7, [r1, #12]
10063d54:	814e      	strh	r6, [r1, #10]
10063d56:	810d      	strh	r5, [r1, #8]
10063d58:	4806      	ldr	r0, [pc, #24]	@ (10063d74 <__arm_cp.37_1>)
10063d5a:	6048      	str	r0, [r1, #4]
10063d5c:	4620      	mov	r0, r4
10063d5e:	f7f1 fa62 	bl	10055226 <aci_event_fifo_push>
10063d62:	2000      	movs	r0, #0
10063d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063d66:	2086      	movs	r0, #134	@ 0x86
10063d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063d6a:	2007      	movs	r0, #7
10063d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063d6e:	46c0      	nop			@ (mov r8, r8)

10063d70 <__arm_cp.37_0>:
10063d70:	20002420 	.word	0x20002420

10063d74 <__arm_cp.37_1>:
10063d74:	10063341 	.word	0x10063341

10063d78 <aci_att_srv_exec_write_req_event_push_noinline>:
10063d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063d7a:	4604      	mov	r4, r0
10063d7c:	06c0      	lsls	r0, r0, #27
10063d7e:	d428      	bmi.n	10063dd2 <aci_att_srv_exec_write_req_event_push_noinline+0x5a>
10063d80:	461f      	mov	r7, r3
10063d82:	4616      	mov	r6, r2
10063d84:	460d      	mov	r5, r1
10063d86:	4815      	ldr	r0, [pc, #84]	@ (10063ddc <__arm_cp.38_0>)
10063d88:	6800      	ldr	r0, [r0, #0]
10063d8a:	0761      	lsls	r1, r4, #29
10063d8c:	0ec9      	lsrs	r1, r1, #27
10063d8e:	1840      	adds	r0, r0, r1
10063d90:	6900      	ldr	r0, [r0, #16]
10063d92:	2260      	movs	r2, #96	@ 0x60
10063d94:	2303      	movs	r3, #3
10063d96:	4621      	mov	r1, r4
10063d98:	f7f1 f9a8 	bl	100550ec <aci_event_fifo_push_header>
10063d9c:	2800      	cmp	r0, #0
10063d9e:	d01a      	beq.n	10063dd6 <aci_att_srv_exec_write_req_event_push_noinline+0x5e>
10063da0:	4601      	mov	r1, r0
10063da2:	7306      	strb	r6, [r0, #12]
10063da4:	7285      	strb	r5, [r0, #10]
10063da6:	200c      	movs	r0, #12
10063da8:	7248      	strb	r0, [r1, #9]
10063daa:	201c      	movs	r0, #28
10063dac:	7208      	strb	r0, [r1, #8]
10063dae:	463a      	mov	r2, r7
10063db0:	2700      	movs	r7, #0
10063db2:	71cf      	strb	r7, [r1, #7]
10063db4:	2007      	movs	r0, #7
10063db6:	7188      	strb	r0, [r1, #6]
10063db8:	738a      	strb	r2, [r1, #14]
10063dba:	20ff      	movs	r0, #255	@ 0xff
10063dbc:	7148      	strb	r0, [r1, #5]
10063dbe:	2082      	movs	r0, #130	@ 0x82
10063dc0:	7108      	strb	r0, [r1, #4]
10063dc2:	0a30      	lsrs	r0, r6, #8
10063dc4:	7348      	strb	r0, [r1, #13]
10063dc6:	0a28      	lsrs	r0, r5, #8
10063dc8:	72c8      	strb	r0, [r1, #11]
10063dca:	4620      	mov	r0, r4
10063dcc:	f7f1 fa2b 	bl	10055226 <aci_event_fifo_push>
10063dd0:	e002      	b.n	10063dd8 <aci_att_srv_exec_write_req_event_push_noinline+0x60>
10063dd2:	2786      	movs	r7, #134	@ 0x86
10063dd4:	e000      	b.n	10063dd8 <aci_att_srv_exec_write_req_event_push_noinline+0x60>
10063dd6:	2707      	movs	r7, #7
10063dd8:	4638      	mov	r0, r7
10063dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10063ddc <__arm_cp.38_0>:
10063ddc:	20002420 	.word	0x20002420

10063de0 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline>:
10063de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063de2:	4605      	mov	r5, r0
10063de4:	06c0      	lsls	r0, r0, #27
10063de6:	d421      	bmi.n	10063e2c <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4c>
10063de8:	460e      	mov	r6, r1
10063dea:	4813      	ldr	r0, [pc, #76]	@ (10063e38 <__arm_cp.39_0>)
10063dec:	6800      	ldr	r0, [r0, #0]
10063dee:	2152      	movs	r1, #82	@ 0x52
10063df0:	5c40      	ldrb	r0, [r0, r1]
10063df2:	2400      	movs	r4, #0
10063df4:	0740      	lsls	r0, r0, #29
10063df6:	d51a      	bpl.n	10063e2e <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
10063df8:	4617      	mov	r7, r2
10063dfa:	9300      	str	r3, [sp, #0]
10063dfc:	480f      	ldr	r0, [pc, #60]	@ (10063e3c <__arm_cp.39_1>)
10063dfe:	6800      	ldr	r0, [r0, #0]
10063e00:	0769      	lsls	r1, r5, #29
10063e02:	0ec9      	lsrs	r1, r1, #27
10063e04:	1840      	adds	r0, r0, r1
10063e06:	6900      	ldr	r0, [r0, #16]
10063e08:	2213      	movs	r2, #19
10063e0a:	2303      	movs	r3, #3
10063e0c:	4629      	mov	r1, r5
10063e0e:	f7f1 f96d 	bl	100550ec <aci_event_fifo_push_header>
10063e12:	2800      	cmp	r0, #0
10063e14:	d00d      	beq.n	10063e32 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x52>
10063e16:	4601      	mov	r1, r0
10063e18:	9800      	ldr	r0, [sp, #0]
10063e1a:	60c8      	str	r0, [r1, #12]
10063e1c:	814f      	strh	r7, [r1, #10]
10063e1e:	810e      	strh	r6, [r1, #8]
10063e20:	4807      	ldr	r0, [pc, #28]	@ (10063e40 <__arm_cp.39_2>)
10063e22:	6048      	str	r0, [r1, #4]
10063e24:	4628      	mov	r0, r5
10063e26:	f7f1 f9fe 	bl	10055226 <aci_event_fifo_push>
10063e2a:	e000      	b.n	10063e2e <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
10063e2c:	2486      	movs	r4, #134	@ 0x86
10063e2e:	4620      	mov	r0, r4
10063e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063e32:	2407      	movs	r4, #7
10063e34:	e7fb      	b.n	10063e2e <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
10063e36:	46c0      	nop			@ (mov r8, r8)

10063e38 <__arm_cp.39_0>:
10063e38:	20002470 	.word	0x20002470

10063e3c <__arm_cp.39_1>:
10063e3c:	20002420 	.word	0x20002420

10063e40 <__arm_cp.39_2>:
10063e40:	1006339d 	.word	0x1006339d

10063e44 <hci_number_of_completed_packets_event_cb>:
10063e44:	b51c      	push	{r2, r3, r4, lr}
10063e46:	8889      	ldrh	r1, [r1, #4]
10063e48:	466c      	mov	r4, sp
10063e4a:	1ce0      	adds	r0, r4, #3
10063e4c:	f7f1 fc80 	bl	10055750 <hci_number_of_completed_packets_event_copy>
10063e50:	2005      	movs	r0, #5
10063e52:	70a0      	strb	r0, [r4, #2]
10063e54:	2013      	movs	r0, #19
10063e56:	7060      	strb	r0, [r4, #1]
10063e58:	2004      	movs	r0, #4
10063e5a:	7020      	strb	r0, [r4, #0]
10063e5c:	2108      	movs	r1, #8
10063e5e:	4620      	mov	r0, r4
10063e60:	f7ea fdc6 	bl	1004e9f0 <BLE_STACK_Event>
10063e64:	bd1c      	pop	{r2, r3, r4, pc}
	...

10063e68 <hci_number_of_completed_packets_event_push_noinline>:
10063e68:	b5b0      	push	{r4, r5, r7, lr}
10063e6a:	4604      	mov	r4, r0
10063e6c:	06c0      	lsls	r0, r0, #27
10063e6e:	d416      	bmi.n	10063e9e <hci_number_of_completed_packets_event_push_noinline+0x36>
10063e70:	460d      	mov	r5, r1
10063e72:	480d      	ldr	r0, [pc, #52]	@ (10063ea8 <__arm_cp.22_0>)
10063e74:	6800      	ldr	r0, [r0, #0]
10063e76:	0761      	lsls	r1, r4, #29
10063e78:	0ec9      	lsrs	r1, r1, #27
10063e7a:	1840      	adds	r0, r0, r1
10063e7c:	6900      	ldr	r0, [r0, #16]
10063e7e:	2202      	movs	r2, #2
10063e80:	4621      	mov	r1, r4
10063e82:	4613      	mov	r3, r2
10063e84:	f7f1 f932 	bl	100550ec <aci_event_fifo_push_header>
10063e88:	2800      	cmp	r0, #0
10063e8a:	d00a      	beq.n	10063ea2 <hci_number_of_completed_packets_event_push_noinline+0x3a>
10063e8c:	4601      	mov	r1, r0
10063e8e:	4807      	ldr	r0, [pc, #28]	@ (10063eac <__arm_cp.22_1>)
10063e90:	6048      	str	r0, [r1, #4]
10063e92:	810d      	strh	r5, [r1, #8]
10063e94:	4620      	mov	r0, r4
10063e96:	f7f1 f9c6 	bl	10055226 <aci_event_fifo_push>
10063e9a:	2000      	movs	r0, #0
10063e9c:	bdb0      	pop	{r4, r5, r7, pc}
10063e9e:	2086      	movs	r0, #134	@ 0x86
10063ea0:	bdb0      	pop	{r4, r5, r7, pc}
10063ea2:	2007      	movs	r0, #7
10063ea4:	bdb0      	pop	{r4, r5, r7, pc}
10063ea6:	46c0      	nop			@ (mov r8, r8)

10063ea8 <__arm_cp.22_0>:
10063ea8:	20002420 	.word	0x20002420

10063eac <__arm_cp.22_1>:
10063eac:	10063e45 	.word	0x10063e45

10063eb0 <hci_le_read_remote_features_complete_event_push_noinline>:
10063eb0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10063eb2:	4605      	mov	r5, r0
10063eb4:	06c0      	lsls	r0, r0, #27
10063eb6:	d433      	bmi.n	10063f20 <hci_le_read_remote_features_complete_event_push_noinline+0x70>
10063eb8:	4617      	mov	r7, r2
10063eba:	481c      	ldr	r0, [pc, #112]	@ (10063f2c <__arm_cp.26_0>)
10063ebc:	6800      	ldr	r0, [r0, #0]
10063ebe:	223d      	movs	r2, #61	@ 0x3d
10063ec0:	5c82      	ldrb	r2, [r0, r2]
10063ec2:	2400      	movs	r4, #0
10063ec4:	0692      	lsls	r2, r2, #26
10063ec6:	d52c      	bpl.n	10063f22 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10063ec8:	303d      	adds	r0, #61	@ 0x3d
10063eca:	7a40      	ldrb	r0, [r0, #9]
10063ecc:	0700      	lsls	r0, r0, #28
10063ece:	d528      	bpl.n	10063f22 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10063ed0:	9101      	str	r1, [sp, #4]
10063ed2:	9302      	str	r3, [sp, #8]
10063ed4:	4816      	ldr	r0, [pc, #88]	@ (10063f30 <__arm_cp.26_1>)
10063ed6:	6800      	ldr	r0, [r0, #0]
10063ed8:	0769      	lsls	r1, r5, #29
10063eda:	0ec9      	lsrs	r1, r1, #27
10063edc:	1840      	adds	r0, r0, r1
10063ede:	6900      	ldr	r0, [r0, #16]
10063ee0:	2225      	movs	r2, #37	@ 0x25
10063ee2:	2304      	movs	r3, #4
10063ee4:	4629      	mov	r1, r5
10063ee6:	9300      	str	r3, [sp, #0]
10063ee8:	f7f1 f900 	bl	100550ec <aci_event_fifo_push_header>
10063eec:	2800      	cmp	r0, #0
10063eee:	d01a      	beq.n	10063f26 <hci_le_read_remote_features_complete_event_push_noinline+0x76>
10063ef0:	4606      	mov	r6, r0
10063ef2:	7247      	strb	r7, [r0, #9]
10063ef4:	9801      	ldr	r0, [sp, #4]
10063ef6:	7230      	strb	r0, [r6, #8]
10063ef8:	0a38      	lsrs	r0, r7, #8
10063efa:	72b0      	strb	r0, [r6, #10]
10063efc:	4630      	mov	r0, r6
10063efe:	300b      	adds	r0, #11
10063f00:	2208      	movs	r2, #8
10063f02:	9902      	ldr	r1, [sp, #8]
10063f04:	f7ee fba6 	bl	10052654 <BLEPLAT_MemCpy>
10063f08:	9900      	ldr	r1, [sp, #0]
10063f0a:	71f1      	strb	r1, [r6, #7]
10063f0c:	200c      	movs	r0, #12
10063f0e:	71b0      	strb	r0, [r6, #6]
10063f10:	203e      	movs	r0, #62	@ 0x3e
10063f12:	7170      	strb	r0, [r6, #5]
10063f14:	7131      	strb	r1, [r6, #4]
10063f16:	4628      	mov	r0, r5
10063f18:	4631      	mov	r1, r6
10063f1a:	f7f1 f984 	bl	10055226 <aci_event_fifo_push>
10063f1e:	e000      	b.n	10063f22 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10063f20:	2486      	movs	r4, #134	@ 0x86
10063f22:	4620      	mov	r0, r4
10063f24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10063f26:	2407      	movs	r4, #7
10063f28:	e7fb      	b.n	10063f22 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10063f2a:	46c0      	nop			@ (mov r8, r8)

10063f2c <__arm_cp.26_0>:
10063f2c:	20002470 	.word	0x20002470

10063f30 <__arm_cp.26_1>:
10063f30:	20002420 	.word	0x20002420

10063f34 <aci_l2cap_proc_timeout_event_cb>:
10063f34:	b510      	push	{r4, lr}
10063f36:	b0ff      	sub	sp, #508	@ 0x1fc
10063f38:	b083      	sub	sp, #12
10063f3a:	8889      	ldrh	r1, [r1, #4]
10063f3c:	466c      	mov	r4, sp
10063f3e:	1da0      	adds	r0, r4, #6
10063f40:	f7f1 fe52 	bl	10055be8 <aci_l2cap_proc_timeout_event_copy>
10063f44:	7a21      	ldrb	r1, [r4, #8]
10063f46:	1d48      	adds	r0, r1, #5
10063f48:	70a0      	strb	r0, [r4, #2]
10063f4a:	0a00      	lsrs	r0, r0, #8
10063f4c:	70e0      	strb	r0, [r4, #3]
10063f4e:	2001      	movs	r0, #1
10063f50:	7120      	strb	r0, [r4, #4]
10063f52:	20ff      	movs	r0, #255	@ 0xff
10063f54:	7060      	strb	r0, [r4, #1]
10063f56:	2082      	movs	r0, #130	@ 0x82
10063f58:	7020      	strb	r0, [r4, #0]
10063f5a:	2008      	movs	r0, #8
10063f5c:	7160      	strb	r0, [r4, #5]
10063f5e:	3109      	adds	r1, #9
10063f60:	4620      	mov	r0, r4
10063f62:	f7ea fd45 	bl	1004e9f0 <BLE_STACK_Event>
10063f66:	b07f      	add	sp, #508	@ 0x1fc
10063f68:	b003      	add	sp, #12
10063f6a:	bd10      	pop	{r4, pc}

10063f6c <aci_hal_fw_error_event_push_noinline>:
10063f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063f6e:	4604      	mov	r4, r0
10063f70:	06c0      	lsls	r0, r0, #27
10063f72:	d42d      	bmi.n	10063fd0 <aci_hal_fw_error_event_push_noinline+0x64>
10063f74:	4615      	mov	r5, r2
10063f76:	460f      	mov	r7, r1
10063f78:	9300      	str	r3, [sp, #0]
10063f7a:	4818      	ldr	r0, [pc, #96]	@ (10063fdc <__arm_cp.0_0>)
10063f7c:	6800      	ldr	r0, [r0, #0]
10063f7e:	0761      	lsls	r1, r4, #29
10063f80:	0ec9      	lsrs	r1, r1, #27
10063f82:	1840      	adds	r0, r0, r1
10063f84:	6900      	ldr	r0, [r0, #16]
10063f86:	1e51      	subs	r1, r2, #1
10063f88:	2203      	movs	r2, #3
10063f8a:	430a      	orrs	r2, r1
10063f8c:	3209      	adds	r2, #9
10063f8e:	0891      	lsrs	r1, r2, #2
10063f90:	b28b      	uxth	r3, r1
10063f92:	2240      	movs	r2, #64	@ 0x40
10063f94:	4621      	mov	r1, r4
10063f96:	f7f1 f8a9 	bl	100550ec <aci_event_fifo_push_header>
10063f9a:	2800      	cmp	r0, #0
10063f9c:	d01a      	beq.n	10063fd4 <aci_hal_fw_error_event_push_noinline+0x68>
10063f9e:	4606      	mov	r6, r0
10063fa0:	72c5      	strb	r5, [r0, #11]
10063fa2:	7287      	strb	r7, [r0, #10]
10063fa4:	300c      	adds	r0, #12
10063fa6:	9900      	ldr	r1, [sp, #0]
10063fa8:	462a      	mov	r2, r5
10063faa:	f7ee fb53 	bl	10052654 <BLEPLAT_MemCpy>
10063fae:	2700      	movs	r7, #0
10063fb0:	7277      	strb	r7, [r6, #9]
10063fb2:	2006      	movs	r0, #6
10063fb4:	7230      	strb	r0, [r6, #8]
10063fb6:	1d28      	adds	r0, r5, #4
10063fb8:	0a01      	lsrs	r1, r0, #8
10063fba:	71f1      	strb	r1, [r6, #7]
10063fbc:	71b0      	strb	r0, [r6, #6]
10063fbe:	20ff      	movs	r0, #255	@ 0xff
10063fc0:	7170      	strb	r0, [r6, #5]
10063fc2:	2082      	movs	r0, #130	@ 0x82
10063fc4:	7130      	strb	r0, [r6, #4]
10063fc6:	4620      	mov	r0, r4
10063fc8:	4631      	mov	r1, r6
10063fca:	f7f1 f92c 	bl	10055226 <aci_event_fifo_push>
10063fce:	e002      	b.n	10063fd6 <aci_hal_fw_error_event_push_noinline+0x6a>
10063fd0:	2786      	movs	r7, #134	@ 0x86
10063fd2:	e000      	b.n	10063fd6 <aci_hal_fw_error_event_push_noinline+0x6a>
10063fd4:	2707      	movs	r7, #7
10063fd6:	4638      	mov	r0, r7
10063fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063fda:	46c0      	nop			@ (mov r8, r8)

10063fdc <__arm_cp.0_0>:
10063fdc:	20002420 	.word	0x20002420

10063fe0 <aci_hal_adv_scan_resp_data_update_event_push_noinline>:
10063fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063fe2:	4604      	mov	r4, r0
10063fe4:	06c0      	lsls	r0, r0, #27
10063fe6:	d42d      	bmi.n	10064044 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x64>
10063fe8:	4616      	mov	r6, r2
10063fea:	460d      	mov	r5, r1
10063fec:	4818      	ldr	r0, [pc, #96]	@ (10064050 <__arm_cp.1_0>)
10063fee:	6800      	ldr	r0, [r0, #0]
10063ff0:	0761      	lsls	r1, r4, #29
10063ff2:	0ec9      	lsrs	r1, r1, #27
10063ff4:	1840      	adds	r0, r0, r1
10063ff6:	6900      	ldr	r0, [r0, #16]
10063ff8:	2241      	movs	r2, #65	@ 0x41
10063ffa:	2304      	movs	r3, #4
10063ffc:	4621      	mov	r1, r4
10063ffe:	f7f1 f875 	bl	100550ec <aci_event_fifo_push_header>
10064002:	2800      	cmp	r0, #0
10064004:	d020      	beq.n	10064048 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x68>
10064006:	4601      	mov	r1, r0
10064008:	300a      	adds	r0, #10
1006400a:	7106      	strb	r6, [r0, #4]
1006400c:	7005      	strb	r5, [r0, #0]
1006400e:	2700      	movs	r7, #0
10064010:	724f      	strb	r7, [r1, #9]
10064012:	2210      	movs	r2, #16
10064014:	720a      	strb	r2, [r1, #8]
10064016:	71cf      	strb	r7, [r1, #7]
10064018:	220a      	movs	r2, #10
1006401a:	718a      	strb	r2, [r1, #6]
1006401c:	22ff      	movs	r2, #255	@ 0xff
1006401e:	714a      	strb	r2, [r1, #5]
10064020:	2282      	movs	r2, #130	@ 0x82
10064022:	710a      	strb	r2, [r1, #4]
10064024:	0e32      	lsrs	r2, r6, #24
10064026:	71c2      	strb	r2, [r0, #7]
10064028:	0c32      	lsrs	r2, r6, #16
1006402a:	7182      	strb	r2, [r0, #6]
1006402c:	0a32      	lsrs	r2, r6, #8
1006402e:	7142      	strb	r2, [r0, #5]
10064030:	0e2a      	lsrs	r2, r5, #24
10064032:	70c2      	strb	r2, [r0, #3]
10064034:	0c2a      	lsrs	r2, r5, #16
10064036:	7082      	strb	r2, [r0, #2]
10064038:	0a2a      	lsrs	r2, r5, #8
1006403a:	7042      	strb	r2, [r0, #1]
1006403c:	4620      	mov	r0, r4
1006403e:	f7f1 f8f2 	bl	10055226 <aci_event_fifo_push>
10064042:	e002      	b.n	1006404a <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
10064044:	2786      	movs	r7, #134	@ 0x86
10064046:	e000      	b.n	1006404a <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
10064048:	2707      	movs	r7, #7
1006404a:	4638      	mov	r0, r7
1006404c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006404e:	46c0      	nop			@ (mov r8, r8)

10064050 <__arm_cp.1_0>:
10064050:	20002420 	.word	0x20002420

10064054 <aci_gap_pairing_complete_event_push_noinline>:
10064054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064056:	4604      	mov	r4, r0
10064058:	06c0      	lsls	r0, r0, #27
1006405a:	d408      	bmi.n	1006406e <aci_gap_pairing_complete_event_push_noinline+0x1a>
1006405c:	460d      	mov	r5, r1
1006405e:	4819      	ldr	r0, [pc, #100]	@ (100640c4 <__arm_cp.1_0>)
10064060:	6800      	ldr	r0, [r0, #0]
10064062:	214e      	movs	r1, #78	@ 0x4e
10064064:	5c40      	ldrb	r0, [r0, r1]
10064066:	0780      	lsls	r0, r0, #30
10064068:	d403      	bmi.n	10064072 <aci_gap_pairing_complete_event_push_noinline+0x1e>
1006406a:	2600      	movs	r6, #0
1006406c:	e028      	b.n	100640c0 <aci_gap_pairing_complete_event_push_noinline+0x6c>
1006406e:	2686      	movs	r6, #134	@ 0x86
10064070:	e026      	b.n	100640c0 <aci_gap_pairing_complete_event_push_noinline+0x6c>
10064072:	461f      	mov	r7, r3
10064074:	4616      	mov	r6, r2
10064076:	4814      	ldr	r0, [pc, #80]	@ (100640c8 <__arm_cp.1_1>)
10064078:	6800      	ldr	r0, [r0, #0]
1006407a:	0761      	lsls	r1, r4, #29
1006407c:	0ec9      	lsrs	r1, r1, #27
1006407e:	1840      	adds	r0, r0, r1
10064080:	6900      	ldr	r0, [r0, #16]
10064082:	2245      	movs	r2, #69	@ 0x45
10064084:	2303      	movs	r3, #3
10064086:	4621      	mov	r1, r4
10064088:	f7f1 f830 	bl	100550ec <aci_event_fifo_push_header>
1006408c:	2800      	cmp	r0, #0
1006408e:	d016      	beq.n	100640be <aci_gap_pairing_complete_event_push_noinline+0x6a>
10064090:	4601      	mov	r1, r0
10064092:	7285      	strb	r5, [r0, #10]
10064094:	2004      	movs	r0, #4
10064096:	7248      	strb	r0, [r1, #9]
10064098:	2001      	movs	r0, #1
1006409a:	7208      	strb	r0, [r1, #8]
1006409c:	4632      	mov	r2, r6
1006409e:	2600      	movs	r6, #0
100640a0:	71ce      	strb	r6, [r1, #7]
100640a2:	2006      	movs	r0, #6
100640a4:	7188      	strb	r0, [r1, #6]
100640a6:	734f      	strb	r7, [r1, #13]
100640a8:	730a      	strb	r2, [r1, #12]
100640aa:	20ff      	movs	r0, #255	@ 0xff
100640ac:	7148      	strb	r0, [r1, #5]
100640ae:	2082      	movs	r0, #130	@ 0x82
100640b0:	7108      	strb	r0, [r1, #4]
100640b2:	0a28      	lsrs	r0, r5, #8
100640b4:	72c8      	strb	r0, [r1, #11]
100640b6:	4620      	mov	r0, r4
100640b8:	f7f1 f8b5 	bl	10055226 <aci_event_fifo_push>
100640bc:	e000      	b.n	100640c0 <aci_gap_pairing_complete_event_push_noinline+0x6c>
100640be:	2607      	movs	r6, #7
100640c0:	4630      	mov	r0, r6
100640c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100640c4 <__arm_cp.1_0>:
100640c4:	20002470 	.word	0x20002470

100640c8 <__arm_cp.1_1>:
100640c8:	20002420 	.word	0x20002420

100640cc <GAT_att_clt_init>:
100640cc:	b580      	push	{r7, lr}
100640ce:	f000 fd35 	bl	10064b3c <GAT_clt_init>
100640d2:	bd80      	pop	{r7, pc}

100640d4 <GAT_att_clt_rcv>:
100640d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100640d6:	4604      	mov	r4, r0
100640d8:	8805      	ldrh	r5, [r0, #0]
100640da:	f7f5 fb6a 	bl	100597b2 <L2C_get_cid_from_basic_packet_header>
100640de:	4601      	mov	r1, r0
100640e0:	4628      	mov	r0, r5
100640e2:	f7f2 fcd9 	bl	10056a98 <GAT_att_cmn_get_channel_descr_p>
100640e6:	4605      	mov	r5, r0
100640e8:	4620      	mov	r0, r4
100640ea:	f000 f8d7 	bl	1006429c <GAT_att_cmn_get_opcode>
100640ee:	281d      	cmp	r0, #29
100640f0:	d003      	beq.n	100640fa <GAT_att_clt_rcv+0x26>
100640f2:	2823      	cmp	r0, #35	@ 0x23
100640f4:	d001      	beq.n	100640fa <GAT_att_clt_rcv+0x26>
100640f6:	281b      	cmp	r0, #27
100640f8:	d10e      	bne.n	10064118 <GAT_att_clt_rcv+0x44>
100640fa:	8861      	ldrh	r1, [r4, #2]
100640fc:	88ea      	ldrh	r2, [r5, #6]
100640fe:	4291      	cmp	r1, r2
10064100:	d805      	bhi.n	1006410e <GAT_att_clt_rcv+0x3a>
10064102:	2903      	cmp	r1, #3
10064104:	d303      	bcc.n	1006410e <GAT_att_clt_rcv+0x3a>
10064106:	2823      	cmp	r0, #35	@ 0x23
10064108:	d167      	bne.n	100641da <GAT_att_clt_rcv+0x106>
1006410a:	2904      	cmp	r1, #4
1006410c:	d865      	bhi.n	100641da <GAT_att_clt_rcv+0x106>
1006410e:	4620      	mov	r0, r4
10064110:	f7f0 fe38 	bl	10054d84 <ACL_pkt_release>
10064114:	2000      	movs	r0, #0
10064116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064118:	4620      	mov	r0, r4
1006411a:	f000 f8bf 	bl	1006429c <GAT_att_cmn_get_opcode>
1006411e:	88a9      	ldrh	r1, [r5, #4]
10064120:	06ca      	lsls	r2, r1, #27
10064122:	d56e      	bpl.n	10064202 <GAT_att_clt_rcv+0x12e>
10064124:	2801      	cmp	r0, #1
10064126:	d002      	beq.n	1006412e <GAT_att_clt_rcv+0x5a>
10064128:	78aa      	ldrb	r2, [r5, #2]
1006412a:	4290      	cmp	r0, r2
1006412c:	d169      	bne.n	10064202 <GAT_att_clt_rcv+0x12e>
1006412e:	2010      	movs	r0, #16
10064130:	4381      	bics	r1, r0
10064132:	80a9      	strh	r1, [r5, #4]
10064134:	896a      	ldrh	r2, [r5, #10]
10064136:	8929      	ldrh	r1, [r5, #8]
10064138:	2603      	movs	r6, #3
1006413a:	4630      	mov	r0, r6
1006413c:	f7f2 fd1e 	bl	10056b7c <GAT_att_cmn_stop_timer>
10064140:	8861      	ldrh	r1, [r4, #2]
10064142:	88e8      	ldrh	r0, [r5, #6]
10064144:	9100      	str	r1, [sp, #0]
10064146:	4281      	cmp	r1, r0
10064148:	d900      	bls.n	1006414c <GAT_att_clt_rcv+0x78>
1006414a:	e09a      	b.n	10064282 <GAT_att_clt_rcv+0x1ae>
1006414c:	4620      	mov	r0, r4
1006414e:	f000 f8a5 	bl	1006429c <GAT_att_cmn_get_opcode>
10064152:	1e42      	subs	r2, r0, #1
10064154:	2101      	movs	r1, #1
10064156:	41ca      	rors	r2, r1
10064158:	2300      	movs	r3, #0
1006415a:	2a10      	cmp	r2, #16
1006415c:	d900      	bls.n	10064160 <GAT_att_clt_rcv+0x8c>
1006415e:	e088      	b.n	10064272 <GAT_att_clt_rcv+0x19e>
10064160:	0092      	lsls	r2, r2, #2
10064162:	461f      	mov	r7, r3
10064164:	a301      	add	r3, pc, #4	@ (adr r3, 1006416c <GAT_att_clt_rcv+0x98>)
10064166:	589a      	ldr	r2, [r3, r2]
10064168:	463b      	mov	r3, r7
1006416a:	4697      	mov	pc, r2
1006416c:	10064223 	.word	0x10064223
10064170:	10064227 	.word	0x10064227
10064174:	10064233 	.word	0x10064233
10064178:	10064251 	.word	0x10064251
1006417c:	100641b1 	.word	0x100641b1
10064180:	10064279 	.word	0x10064279
10064184:	10064279 	.word	0x10064279
10064188:	10064279 	.word	0x10064279
1006418c:	100641b1 	.word	0x100641b1
10064190:	1006421f 	.word	0x1006421f
10064194:	10064273 	.word	0x10064273
10064198:	1006422b 	.word	0x1006422b
1006419c:	1006421f 	.word	0x1006421f
100641a0:	10064273 	.word	0x10064273
100641a4:	10064273 	.word	0x10064273
100641a8:	10064273 	.word	0x10064273
100641ac:	10064279 	.word	0x10064279
100641b0:	2809      	cmp	r0, #9
100641b2:	d102      	bne.n	100641ba <GAT_att_clt_rcv+0xe6>
100641b4:	9900      	ldr	r1, [sp, #0]
100641b6:	2904      	cmp	r1, #4
100641b8:	d35b      	bcc.n	10064272 <GAT_att_clt_rcv+0x19e>
100641ba:	2811      	cmp	r0, #17
100641bc:	d102      	bne.n	100641c4 <GAT_att_clt_rcv+0xf0>
100641be:	9800      	ldr	r0, [sp, #0]
100641c0:	2806      	cmp	r0, #6
100641c2:	d356      	bcc.n	10064272 <GAT_att_clt_rcv+0x19e>
100641c4:	89a0      	ldrh	r0, [r4, #12]
100641c6:	1c40      	adds	r0, r0, #1
100641c8:	b281      	uxth	r1, r0
100641ca:	4620      	mov	r0, r4
100641cc:	f000 fa47 	bl	1006465e <ACL_pkt_read_8b>
100641d0:	463b      	mov	r3, r7
100641d2:	2800      	cmp	r0, #0
100641d4:	d04d      	beq.n	10064272 <GAT_att_clt_rcv+0x19e>
100641d6:	4601      	mov	r1, r0
100641d8:	e043      	b.n	10064262 <GAT_att_clt_rcv+0x18e>
100641da:	281d      	cmp	r0, #29
100641dc:	d10d      	bne.n	100641fa <GAT_att_clt_rcv+0x126>
100641de:	88a8      	ldrh	r0, [r5, #4]
100641e0:	0680      	lsls	r0, r0, #26
100641e2:	d412      	bmi.n	1006420a <GAT_att_clt_rcv+0x136>
100641e4:	896a      	ldrh	r2, [r5, #10]
100641e6:	8929      	ldrh	r1, [r5, #8]
100641e8:	2002      	movs	r0, #2
100641ea:	f7f2 fd11 	bl	10056c10 <GAT_att_cmn_start_timer>
100641ee:	2800      	cmp	r0, #0
100641f0:	d14c      	bne.n	1006428c <GAT_att_clt_rcv+0x1b8>
100641f2:	88a8      	ldrh	r0, [r5, #4]
100641f4:	2120      	movs	r1, #32
100641f6:	4301      	orrs	r1, r0
100641f8:	80a9      	strh	r1, [r5, #4]
100641fa:	4620      	mov	r0, r4
100641fc:	f000 ffb7 	bl	1006516e <GAT_clt_rcv_srv_initiated>
10064200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064202:	4620      	mov	r0, r4
10064204:	f000 fab7 	bl	10064776 <GAT_att_clt_unexpect_rx>
10064208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006420a:	3508      	adds	r5, #8
1006420c:	2042      	movs	r0, #66	@ 0x42
1006420e:	2103      	movs	r1, #3
10064210:	2202      	movs	r2, #2
10064212:	462b      	mov	r3, r5
10064214:	f7ff feaa 	bl	10063f6c <aci_hal_fw_error_event_push_noinline>
10064218:	2800      	cmp	r0, #0
1006421a:	d137      	bne.n	1006428c <GAT_att_clt_rcv+0x1b8>
1006421c:	e777      	b.n	1006410e <GAT_att_clt_rcv+0x3a>
1006421e:	460b      	mov	r3, r1
10064220:	e027      	b.n	10064272 <GAT_att_clt_rcv+0x19e>
10064222:	2305      	movs	r3, #5
10064224:	e025      	b.n	10064272 <GAT_att_clt_rcv+0x19e>
10064226:	4633      	mov	r3, r6
10064228:	e023      	b.n	10064272 <GAT_att_clt_rcv+0x19e>
1006422a:	9b00      	ldr	r3, [sp, #0]
1006422c:	2b04      	cmp	r3, #4
1006422e:	d91f      	bls.n	10064270 <GAT_att_clt_rcv+0x19c>
10064230:	e01f      	b.n	10064272 <GAT_att_clt_rcv+0x19e>
10064232:	9800      	ldr	r0, [sp, #0]
10064234:	2806      	cmp	r0, #6
10064236:	d31c      	bcc.n	10064272 <GAT_att_clt_rcv+0x19e>
10064238:	89a0      	ldrh	r0, [r4, #12]
1006423a:	1c40      	adds	r0, r0, #1
1006423c:	b281      	uxth	r1, r0
1006423e:	4620      	mov	r0, r4
10064240:	f000 fa0d 	bl	1006465e <ACL_pkt_read_8b>
10064244:	2801      	cmp	r0, #1
10064246:	d00b      	beq.n	10064260 <GAT_att_clt_rcv+0x18c>
10064248:	2802      	cmp	r0, #2
1006424a:	d11a      	bne.n	10064282 <GAT_att_clt_rcv+0x1ae>
1006424c:	2112      	movs	r1, #18
1006424e:	e008      	b.n	10064262 <GAT_att_clt_rcv+0x18e>
10064250:	9800      	ldr	r0, [sp, #0]
10064252:	2802      	cmp	r0, #2
10064254:	d30d      	bcc.n	10064272 <GAT_att_clt_rcv+0x19e>
10064256:	9b00      	ldr	r3, [sp, #0]
10064258:	1e58      	subs	r0, r3, #1
1006425a:	0780      	lsls	r0, r0, #30
1006425c:	d108      	bne.n	10064270 <GAT_att_clt_rcv+0x19c>
1006425e:	e008      	b.n	10064272 <GAT_att_clt_rcv+0x19e>
10064260:	2104      	movs	r1, #4
10064262:	9e00      	ldr	r6, [sp, #0]
10064264:	1eb0      	subs	r0, r6, #2
10064266:	f7dc f871 	bl	1004034c <__aeabi_uidivmod>
1006426a:	2900      	cmp	r1, #0
1006426c:	4633      	mov	r3, r6
1006426e:	d000      	beq.n	10064272 <GAT_att_clt_rcv+0x19e>
10064270:	2300      	movs	r3, #0
10064272:	9800      	ldr	r0, [sp, #0]
10064274:	4298      	cmp	r0, r3
10064276:	d104      	bne.n	10064282 <GAT_att_clt_rcv+0x1ae>
10064278:	4807      	ldr	r0, [pc, #28]	@ (10064298 <__arm_cp.1_0>)
1006427a:	6801      	ldr	r1, [r0, #0]
1006427c:	4620      	mov	r0, r4
1006427e:	4788      	blx	r1
10064280:	e002      	b.n	10064288 <GAT_att_clt_rcv+0x1b4>
10064282:	4620      	mov	r0, r4
10064284:	f000 ff5e 	bl	10065144 <GAT_clt_rcv_corrupted>
10064288:	2884      	cmp	r0, #132	@ 0x84
1006428a:	d101      	bne.n	10064290 <GAT_att_clt_rcv+0x1bc>
1006428c:	2084      	movs	r0, #132	@ 0x84
1006428e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064290:	2000      	movs	r0, #0
10064292:	70a8      	strb	r0, [r5, #2]
10064294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064296:	46c0      	nop			@ (mov r8, r8)

10064298 <__arm_cp.1_0>:
10064298:	200028ac 	.word	0x200028ac

1006429c <GAT_att_cmn_get_opcode>:
1006429c:	b580      	push	{r7, lr}
1006429e:	8981      	ldrh	r1, [r0, #12]
100642a0:	f000 f9dd 	bl	1006465e <ACL_pkt_read_8b>
100642a4:	bd80      	pop	{r7, pc}

100642a6 <GAT_att_clt_connection>:
100642a6:	b580      	push	{r7, lr}
100642a8:	f000 fc70 	bl	10064b8c <GAT_clt_connection>
100642ac:	bd80      	pop	{r7, pc}

100642ae <GAT_att_clt_bearer_close>:
100642ae:	b580      	push	{r7, lr}
100642b0:	f000 fc6e 	bl	10064b90 <GAT_clt_bearer_close>
100642b4:	bd80      	pop	{r7, pc}
	...

100642b8 <GAT_att_clt_tx>:
100642b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100642ba:	4605      	mov	r5, r0
100642bc:	8881      	ldrh	r1, [r0, #4]
100642be:	8840      	ldrh	r0, [r0, #2]
100642c0:	f7f2 fbea 	bl	10056a98 <GAT_att_cmn_get_channel_descr_p>
100642c4:	2800      	cmp	r0, #0
100642c6:	d008      	beq.n	100642da <GAT_att_clt_tx+0x22>
100642c8:	4604      	mov	r4, r0
100642ca:	7829      	ldrb	r1, [r5, #0]
100642cc:	291e      	cmp	r1, #30
100642ce:	d106      	bne.n	100642de <GAT_att_clt_tx+0x26>
100642d0:	88a0      	ldrh	r0, [r4, #4]
100642d2:	0680      	lsls	r0, r0, #26
100642d4:	d439      	bmi.n	1006434a <GAT_att_clt_tx+0x92>
100642d6:	260c      	movs	r6, #12
100642d8:	e193      	b.n	10064602 <GAT_att_clt_tx+0x34a>
100642da:	2612      	movs	r6, #18
100642dc:	e191      	b.n	10064602 <GAT_att_clt_tx+0x34a>
100642de:	0648      	lsls	r0, r1, #25
100642e0:	d406      	bmi.n	100642f0 <GAT_att_clt_tx+0x38>
100642e2:	48ca      	ldr	r0, [pc, #808]	@ (1006460c <__arm_cp.5_0>)
100642e4:	4aca      	ldr	r2, [pc, #808]	@ (10064610 <__arm_cp.5_1>)
100642e6:	6002      	str	r2, [r0, #0]
100642e8:	88a0      	ldrh	r0, [r4, #4]
100642ea:	06c0      	lsls	r0, r0, #27
100642ec:	d500      	bpl.n	100642f0 <GAT_att_clt_tx+0x38>
100642ee:	e16d      	b.n	100645cc <GAT_att_clt_tx+0x314>
100642f0:	88e0      	ldrh	r0, [r4, #6]
100642f2:	1e8a      	subs	r2, r1, #2
100642f4:	2686      	movs	r6, #134	@ 0x86
100642f6:	2a1e      	cmp	r2, #30
100642f8:	d900      	bls.n	100642fc <GAT_att_clt_tx+0x44>
100642fa:	e091      	b.n	10064420 <GAT_att_clt_tx+0x168>
100642fc:	2703      	movs	r7, #3
100642fe:	0052      	lsls	r2, r2, #1
10064300:	447a      	add	r2, pc
10064302:	8892      	ldrh	r2, [r2, #4]
10064304:	0052      	lsls	r2, r2, #1
10064306:	4497      	add	pc, r2
10064308:	017c0022 	.word	0x017c0022
1006430c:	017c001e 	.word	0x017c001e
10064310:	017c009f 	.word	0x017c009f
10064314:	017c00a2 	.word	0x017c00a2
10064318:	017c0022 	.word	0x017c0022
1006431c:	017c001e 	.word	0x017c001e
10064320:	017c0094 	.word	0x017c0094
10064324:	017c012d 	.word	0x017c012d
10064328:	017c0090 	.word	0x017c0090
1006432c:	017c017c 	.word	0x017c017c
10064330:	017c00a9 	.word	0x017c00a9
10064334:	017c00ac 	.word	0x017c00ac
10064338:	017c017c 	.word	0x017c017c
1006433c:	017c017c 	.word	0x017c017c
10064340:	017c0021 	.word	0x017c0021
10064344:	0094      	.short	0x0094
10064346:	2705      	movs	r7, #5
10064348:	e001      	b.n	1006434e <GAT_att_clt_tx+0x96>
1006434a:	88e0      	ldrh	r0, [r4, #6]
1006434c:	2701      	movs	r7, #1
1006434e:	b2b9      	uxth	r1, r7
10064350:	4281      	cmp	r1, r0
10064352:	d300      	bcc.n	10064356 <GAT_att_clt_tx+0x9e>
10064354:	4607      	mov	r7, r0
10064356:	9700      	str	r7, [sp, #0]
10064358:	b2bf      	uxth	r7, r7
1006435a:	4620      	mov	r0, r4
1006435c:	4639      	mov	r1, r7
1006435e:	f7f2 fc99 	bl	10056c94 <GAT_att_cmn_get_pckt>
10064362:	2800      	cmp	r0, #0
10064364:	d02f      	beq.n	100643c6 <GAT_att_clt_tx+0x10e>
10064366:	4606      	mov	r6, r0
10064368:	782a      	ldrb	r2, [r5, #0]
1006436a:	8981      	ldrh	r1, [r0, #12]
1006436c:	f000 f954 	bl	10064618 <ACL_pkt_write_8b>
10064370:	7828      	ldrb	r0, [r5, #0]
10064372:	1e81      	subs	r1, r0, #2
10064374:	2916      	cmp	r1, #22
10064376:	d82d      	bhi.n	100643d4 <GAT_att_clt_tx+0x11c>
10064378:	0049      	lsls	r1, r1, #1
1006437a:	46c0      	nop			@ (mov r8, r8)
1006437c:	4479      	add	r1, pc
1006437e:	8889      	ldrh	r1, [r1, #4]
10064380:	0049      	lsls	r1, r1, #1
10064382:	448f      	add	pc, r1
10064384:	010d0016 	.word	0x010d0016
10064388:	010d0070 	.word	0x010d0070
1006438c:	010d0077 	.word	0x010d0077
10064390:	010d0093 	.word	0x010d0093
10064394:	010d00a1 	.word	0x010d00a1
10064398:	010d00aa 	.word	0x010d00aa
1006439c:	010d00ba 	.word	0x010d00ba
100643a0:	010d00c0 	.word	0x010d00c0
100643a4:	010d002f 	.word	0x010d002f
100643a8:	010d010d 	.word	0x010d010d
100643ac:	010d00ce 	.word	0x010d00ce
100643b0:	00e6      	.short	0x00e6
100643b2:	4898      	ldr	r0, [pc, #608]	@ (10064614 <__arm_cp.5_2>)
100643b4:	8a02      	ldrh	r2, [r0, #16]
100643b6:	89b0      	ldrh	r0, [r6, #12]
100643b8:	1c40      	adds	r0, r0, #1
100643ba:	b281      	uxth	r1, r0
100643bc:	4630      	mov	r0, r6
100643be:	f7f0 fd16 	bl	10054dee <ACL_pkt_write_16b>
100643c2:	2003      	movs	r0, #3
100643c4:	e0eb      	b.n	1006459e <GAT_att_clt_tx+0x2e6>
100643c6:	2008      	movs	r0, #8
100643c8:	f7fe f9da 	bl	10062780 <tsk_notify_idx>
100643cc:	f7ed fb5b 	bl	10051a86 <BLE_STACK_ProcessRequest>
100643d0:	2688      	movs	r6, #136	@ 0x88
100643d2:	e116      	b.n	10064602 <GAT_att_clt_tx+0x34a>
100643d4:	2820      	cmp	r0, #32
100643d6:	d100      	bne.n	100643da <GAT_att_clt_tx+0x122>
100643d8:	e0ca      	b.n	10064570 <GAT_att_clt_tx+0x2b8>
100643da:	2852      	cmp	r0, #82	@ 0x52
100643dc:	d002      	beq.n	100643e4 <GAT_att_clt_tx+0x12c>
100643de:	28d2      	cmp	r0, #210	@ 0xd2
100643e0:	d000      	beq.n	100643e4 <GAT_att_clt_tx+0x12c>
100643e2:	e0dd      	b.n	100645a0 <GAT_att_clt_tx+0x2e8>
100643e4:	892a      	ldrh	r2, [r5, #8]
100643e6:	89b0      	ldrh	r0, [r6, #12]
100643e8:	1c40      	adds	r0, r0, #1
100643ea:	b281      	uxth	r1, r0
100643ec:	4630      	mov	r0, r6
100643ee:	f7f0 fcfe 	bl	10054dee <ACL_pkt_write_16b>
100643f2:	68eb      	ldr	r3, [r5, #12]
100643f4:	896a      	ldrh	r2, [r5, #10]
100643f6:	89b0      	ldrh	r0, [r6, #12]
100643f8:	1cc0      	adds	r0, r0, #3
100643fa:	b281      	uxth	r1, r0
100643fc:	4630      	mov	r0, r6
100643fe:	f7f0 fcff 	bl	10054e00 <ACL_pkt_write>
10064402:	7828      	ldrb	r0, [r5, #0]
10064404:	2812      	cmp	r0, #18
10064406:	d100      	bne.n	1006440a <GAT_att_clt_tx+0x152>
10064408:	e0b8      	b.n	1006457c <GAT_att_clt_tx+0x2c4>
1006440a:	28d2      	cmp	r0, #210	@ 0xd2
1006440c:	d000      	beq.n	10064410 <GAT_att_clt_tx+0x158>
1006440e:	e0c7      	b.n	100645a0 <GAT_att_clt_tx+0x2e8>
10064410:	9800      	ldr	r0, [sp, #0]
10064412:	380c      	subs	r0, #12
10064414:	8070      	strh	r0, [r6, #2]
10064416:	8920      	ldrh	r0, [r4, #8]
10064418:	4631      	mov	r1, r6
1006441a:	f7fe f86c 	bl	100624f6 <smp_sap_sm2_packet_data_signing_compute>
1006441e:	e0bf      	b.n	100645a0 <GAT_att_clt_tx+0x2e8>
10064420:	2952      	cmp	r1, #82	@ 0x52
10064422:	d002      	beq.n	1006442a <GAT_att_clt_tx+0x172>
10064424:	29d2      	cmp	r1, #210	@ 0xd2
10064426:	d000      	beq.n	1006442a <GAT_att_clt_tx+0x172>
10064428:	e0eb      	b.n	10064602 <GAT_att_clt_tx+0x34a>
1006442a:	29d2      	cmp	r1, #210	@ 0xd2
1006442c:	d008      	beq.n	10064440 <GAT_att_clt_tx+0x188>
1006442e:	2103      	movs	r1, #3
10064430:	e007      	b.n	10064442 <GAT_att_clt_tx+0x18a>
10064432:	7a29      	ldrb	r1, [r5, #8]
10064434:	0049      	lsls	r1, r1, #1
10064436:	1c4f      	adds	r7, r1, #1
10064438:	4287      	cmp	r7, r0
1006443a:	d800      	bhi.n	1006443e <GAT_att_clt_tx+0x186>
1006443c:	e787      	b.n	1006434e <GAT_att_clt_tx+0x96>
1006443e:	e0e0      	b.n	10064602 <GAT_att_clt_tx+0x34a>
10064440:	210f      	movs	r1, #15
10064442:	896a      	ldrh	r2, [r5, #10]
10064444:	1857      	adds	r7, r2, r1
10064446:	e782      	b.n	1006434e <GAT_att_clt_tx+0x96>
10064448:	89e9      	ldrh	r1, [r5, #14]
1006444a:	1dcf      	adds	r7, r1, #7
1006444c:	e77f      	b.n	1006434e <GAT_att_clt_tx+0x96>
1006444e:	68e9      	ldr	r1, [r5, #12]
10064450:	7c09      	ldrb	r1, [r1, #16]
10064452:	2980      	cmp	r1, #128	@ 0x80
10064454:	d000      	beq.n	10064458 <GAT_att_clt_tx+0x1a0>
10064456:	e089      	b.n	1006456c <GAT_att_clt_tx+0x2b4>
10064458:	2715      	movs	r7, #21
1006445a:	e778      	b.n	1006434e <GAT_att_clt_tx+0x96>
1006445c:	89a9      	ldrh	r1, [r5, #12]
1006445e:	1d4f      	adds	r7, r1, #5
10064460:	e775      	b.n	1006434e <GAT_att_clt_tx+0x96>
10064462:	2702      	movs	r7, #2
10064464:	e773      	b.n	1006434e <GAT_att_clt_tx+0x96>
10064466:	896a      	ldrh	r2, [r5, #10]
10064468:	8929      	ldrh	r1, [r5, #8]
1006446a:	4630      	mov	r0, r6
1006446c:	f000 f9a2 	bl	100647b4 <GAT_att_clt_fill_handle_range>
10064470:	2005      	movs	r0, #5
10064472:	e094      	b.n	1006459e <GAT_att_clt_tx+0x2e6>
10064474:	896a      	ldrh	r2, [r5, #10]
10064476:	8929      	ldrh	r1, [r5, #8]
10064478:	4630      	mov	r0, r6
1006447a:	f000 f99b 	bl	100647b4 <GAT_att_clt_fill_handle_range>
1006447e:	89aa      	ldrh	r2, [r5, #12]
10064480:	89b0      	ldrh	r0, [r6, #12]
10064482:	1d40      	adds	r0, r0, #5
10064484:	b281      	uxth	r1, r0
10064486:	4630      	mov	r0, r6
10064488:	f7f0 fcb1 	bl	10054dee <ACL_pkt_write_16b>
1006448c:	89e8      	ldrh	r0, [r5, #14]
1006448e:	1dc0      	adds	r0, r0, #7
10064490:	42b8      	cmp	r0, r7
10064492:	d800      	bhi.n	10064496 <GAT_att_clt_tx+0x1de>
10064494:	4607      	mov	r7, r0
10064496:	1ff8      	subs	r0, r7, #7
10064498:	b282      	uxth	r2, r0
1006449a:	692b      	ldr	r3, [r5, #16]
1006449c:	89b0      	ldrh	r0, [r6, #12]
1006449e:	1dc0      	adds	r0, r0, #7
100644a0:	b281      	uxth	r1, r0
100644a2:	4630      	mov	r0, r6
100644a4:	f7f0 fcac 	bl	10054e00 <ACL_pkt_write>
100644a8:	2007      	movs	r0, #7
100644aa:	e078      	b.n	1006459e <GAT_att_clt_tx+0x2e6>
100644ac:	896a      	ldrh	r2, [r5, #10]
100644ae:	8929      	ldrh	r1, [r5, #8]
100644b0:	4630      	mov	r0, r6
100644b2:	f000 f97f 	bl	100647b4 <GAT_att_clt_fill_handle_range>
100644b6:	89b0      	ldrh	r0, [r6, #12]
100644b8:	1d40      	adds	r0, r0, #5
100644ba:	68eb      	ldr	r3, [r5, #12]
100644bc:	7c19      	ldrb	r1, [r3, #16]
100644be:	2980      	cmp	r1, #128	@ 0x80
100644c0:	d15e      	bne.n	10064580 <GAT_att_clt_tx+0x2c8>
100644c2:	b281      	uxth	r1, r0
100644c4:	2210      	movs	r2, #16
100644c6:	e05e      	b.n	10064586 <GAT_att_clt_tx+0x2ce>
100644c8:	892a      	ldrh	r2, [r5, #8]
100644ca:	89b0      	ldrh	r0, [r6, #12]
100644cc:	1c40      	adds	r0, r0, #1
100644ce:	b281      	uxth	r1, r0
100644d0:	4630      	mov	r0, r6
100644d2:	f7f0 fc8c 	bl	10054dee <ACL_pkt_write_16b>
100644d6:	200b      	movs	r0, #11
100644d8:	e061      	b.n	1006459e <GAT_att_clt_tx+0x2e6>
100644da:	892a      	ldrh	r2, [r5, #8]
100644dc:	89b0      	ldrh	r0, [r6, #12]
100644de:	1c40      	adds	r0, r0, #1
100644e0:	b281      	uxth	r1, r0
100644e2:	4630      	mov	r0, r6
100644e4:	f7f0 fc83 	bl	10054dee <ACL_pkt_write_16b>
100644e8:	896a      	ldrh	r2, [r5, #10]
100644ea:	89b0      	ldrh	r0, [r6, #12]
100644ec:	1cc0      	adds	r0, r0, #3
100644ee:	b281      	uxth	r1, r0
100644f0:	4630      	mov	r0, r6
100644f2:	f7f0 fc7c 	bl	10054dee <ACL_pkt_write_16b>
100644f6:	200d      	movs	r0, #13
100644f8:	e051      	b.n	1006459e <GAT_att_clt_tx+0x2e6>
100644fa:	4628      	mov	r0, r5
100644fc:	4631      	mov	r1, r6
100644fe:	f000 f94d 	bl	1006479c <GAT_att_clt_fill_read_multi_req>
10064502:	200f      	movs	r0, #15
10064504:	e04b      	b.n	1006459e <GAT_att_clt_tx+0x2e6>
10064506:	896a      	ldrh	r2, [r5, #10]
10064508:	8929      	ldrh	r1, [r5, #8]
1006450a:	4630      	mov	r0, r6
1006450c:	f000 f952 	bl	100647b4 <GAT_att_clt_fill_handle_range>
10064510:	89b0      	ldrh	r0, [r6, #12]
10064512:	1d40      	adds	r0, r0, #5
10064514:	68eb      	ldr	r3, [r5, #12]
10064516:	7c19      	ldrb	r1, [r3, #16]
10064518:	2980      	cmp	r1, #128	@ 0x80
1006451a:	d139      	bne.n	10064590 <GAT_att_clt_tx+0x2d8>
1006451c:	b281      	uxth	r1, r0
1006451e:	2210      	movs	r2, #16
10064520:	e039      	b.n	10064596 <GAT_att_clt_tx+0x2de>
10064522:	892a      	ldrh	r2, [r5, #8]
10064524:	89b0      	ldrh	r0, [r6, #12]
10064526:	1c40      	adds	r0, r0, #1
10064528:	b281      	uxth	r1, r0
1006452a:	4630      	mov	r0, r6
1006452c:	f7f0 fc5f 	bl	10054dee <ACL_pkt_write_16b>
10064530:	896a      	ldrh	r2, [r5, #10]
10064532:	89b0      	ldrh	r0, [r6, #12]
10064534:	1cc0      	adds	r0, r0, #3
10064536:	b281      	uxth	r1, r0
10064538:	4630      	mov	r0, r6
1006453a:	f7f0 fc58 	bl	10054dee <ACL_pkt_write_16b>
1006453e:	692b      	ldr	r3, [r5, #16]
10064540:	89aa      	ldrh	r2, [r5, #12]
10064542:	89b0      	ldrh	r0, [r6, #12]
10064544:	1d40      	adds	r0, r0, #5
10064546:	b281      	uxth	r1, r0
10064548:	4630      	mov	r0, r6
1006454a:	f7f0 fc59 	bl	10054e00 <ACL_pkt_write>
1006454e:	2017      	movs	r0, #23
10064550:	e025      	b.n	1006459e <GAT_att_clt_tx+0x2e6>
10064552:	7a2a      	ldrb	r2, [r5, #8]
10064554:	89b0      	ldrh	r0, [r6, #12]
10064556:	1c40      	adds	r0, r0, #1
10064558:	b281      	uxth	r1, r0
1006455a:	4630      	mov	r0, r6
1006455c:	f000 f85c 	bl	10064618 <ACL_pkt_write_8b>
10064560:	2019      	movs	r0, #25
10064562:	e01c      	b.n	1006459e <GAT_att_clt_tx+0x2e6>
10064564:	68e9      	ldr	r1, [r5, #12]
10064566:	7c09      	ldrb	r1, [r1, #16]
10064568:	2980      	cmp	r1, #128	@ 0x80
1006456a:	d04c      	beq.n	10064606 <GAT_att_clt_tx+0x34e>
1006456c:	2707      	movs	r7, #7
1006456e:	e6ee      	b.n	1006434e <GAT_att_clt_tx+0x96>
10064570:	4628      	mov	r0, r5
10064572:	4631      	mov	r1, r6
10064574:	f000 f912 	bl	1006479c <GAT_att_clt_fill_read_multi_req>
10064578:	2021      	movs	r0, #33	@ 0x21
1006457a:	e010      	b.n	1006459e <GAT_att_clt_tx+0x2e6>
1006457c:	2013      	movs	r0, #19
1006457e:	e00e      	b.n	1006459e <GAT_att_clt_tx+0x2e6>
10064580:	b281      	uxth	r1, r0
10064582:	330c      	adds	r3, #12
10064584:	2202      	movs	r2, #2
10064586:	4630      	mov	r0, r6
10064588:	f7f0 fc3a 	bl	10054e00 <ACL_pkt_write>
1006458c:	2009      	movs	r0, #9
1006458e:	e006      	b.n	1006459e <GAT_att_clt_tx+0x2e6>
10064590:	b281      	uxth	r1, r0
10064592:	330c      	adds	r3, #12
10064594:	2202      	movs	r2, #2
10064596:	4630      	mov	r0, r6
10064598:	f7f0 fc32 	bl	10054e00 <ACL_pkt_write>
1006459c:	2011      	movs	r0, #17
1006459e:	70a0      	strb	r0, [r4, #2]
100645a0:	9800      	ldr	r0, [sp, #0]
100645a2:	8070      	strh	r0, [r6, #2]
100645a4:	782a      	ldrb	r2, [r5, #0]
100645a6:	89b1      	ldrh	r1, [r6, #12]
100645a8:	4630      	mov	r0, r6
100645aa:	f000 f835 	bl	10064618 <ACL_pkt_write_8b>
100645ae:	7828      	ldrb	r0, [r5, #0]
100645b0:	0641      	lsls	r1, r0, #25
100645b2:	d411      	bmi.n	100645d8 <GAT_att_clt_tx+0x320>
100645b4:	281e      	cmp	r0, #30
100645b6:	d00f      	beq.n	100645d8 <GAT_att_clt_tx+0x320>
100645b8:	8962      	ldrh	r2, [r4, #10]
100645ba:	8921      	ldrh	r1, [r4, #8]
100645bc:	2003      	movs	r0, #3
100645be:	f7f2 fb27 	bl	10056c10 <GAT_att_cmn_start_timer>
100645c2:	2800      	cmp	r0, #0
100645c4:	d004      	beq.n	100645d0 <GAT_att_clt_tx+0x318>
100645c6:	4630      	mov	r0, r6
100645c8:	f7f0 fbdc 	bl	10054d84 <ACL_pkt_release>
100645cc:	2684      	movs	r6, #132	@ 0x84
100645ce:	e018      	b.n	10064602 <GAT_att_clt_tx+0x34a>
100645d0:	88a0      	ldrh	r0, [r4, #4]
100645d2:	2110      	movs	r1, #16
100645d4:	4301      	orrs	r1, r0
100645d6:	80a1      	strh	r1, [r4, #4]
100645d8:	8960      	ldrh	r0, [r4, #10]
100645da:	4631      	mov	r1, r6
100645dc:	f7f2 fade 	bl	10056b9c <GAT_att_cmn_send>
100645e0:	2800      	cmp	r0, #0
100645e2:	d001      	beq.n	100645e8 <GAT_att_clt_tx+0x330>
100645e4:	2681      	movs	r6, #129	@ 0x81
100645e6:	e00c      	b.n	10064602 <GAT_att_clt_tx+0x34a>
100645e8:	7828      	ldrb	r0, [r5, #0]
100645ea:	2600      	movs	r6, #0
100645ec:	281e      	cmp	r0, #30
100645ee:	d108      	bne.n	10064602 <GAT_att_clt_tx+0x34a>
100645f0:	8962      	ldrh	r2, [r4, #10]
100645f2:	8921      	ldrh	r1, [r4, #8]
100645f4:	2002      	movs	r0, #2
100645f6:	f7f2 fac1 	bl	10056b7c <GAT_att_cmn_stop_timer>
100645fa:	88a0      	ldrh	r0, [r4, #4]
100645fc:	2120      	movs	r1, #32
100645fe:	4388      	bics	r0, r1
10064600:	80a0      	strh	r0, [r4, #4]
10064602:	4630      	mov	r0, r6
10064604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064606:	2711      	movs	r7, #17
10064608:	e6a1      	b.n	1006434e <GAT_att_clt_tx+0x96>
1006460a:	46c0      	nop			@ (mov r8, r8)

1006460c <__arm_cp.5_0>:
1006460c:	200028ac 	.word	0x200028ac

10064610 <__arm_cp.5_1>:
10064610:	10064c11 	.word	0x10064c11

10064614 <__arm_cp.5_2>:
10064614:	20002484 	.word	0x20002484

10064618 <ACL_pkt_write_8b>:
10064618:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1006461a:	4614      	mov	r4, r2
1006461c:	6840      	ldr	r0, [r0, #4]
1006461e:	2920      	cmp	r1, #32
10064620:	d304      	bcc.n	1006462c <ACL_pkt_write_8b+0x14>
10064622:	ad01      	add	r5, sp, #4
10064624:	462a      	mov	r2, r5
10064626:	f7fc fb74 	bl	10060d12 <Mem_Buff_get_buff_off>
1006462a:	8829      	ldrh	r1, [r5, #0]
1006462c:	1840      	adds	r0, r0, r1
1006462e:	7104      	strb	r4, [r0, #4]
10064630:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10064632 <GAT_att_clt_read_grp_type_get_last_attr_h>:
10064632:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10064634:	4604      	mov	r4, r0
10064636:	8980      	ldrh	r0, [r0, #12]
10064638:	1c40      	adds	r0, r0, #1
1006463a:	b281      	uxth	r1, r0
1006463c:	4620      	mov	r0, r4
1006463e:	f000 f80e 	bl	1006465e <ACL_pkt_read_8b>
10064642:	8861      	ldrh	r1, [r4, #2]
10064644:	1a08      	subs	r0, r1, r0
10064646:	89a1      	ldrh	r1, [r4, #12]
10064648:	1840      	adds	r0, r0, r1
1006464a:	1c80      	adds	r0, r0, #2
1006464c:	b281      	uxth	r1, r0
1006464e:	2202      	movs	r2, #2
10064650:	ad01      	add	r5, sp, #4
10064652:	4620      	mov	r0, r4
10064654:	462b      	mov	r3, r5
10064656:	f7f0 fbb1 	bl	10054dbc <ACL_pkt_read>
1006465a:	8828      	ldrh	r0, [r5, #0]
1006465c:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1006465e <ACL_pkt_read_8b>:
1006465e:	b51c      	push	{r2, r3, r4, lr}
10064660:	291f      	cmp	r1, #31
10064662:	d803      	bhi.n	1006466c <ACL_pkt_read_8b+0xe>
10064664:	aa01      	add	r2, sp, #4
10064666:	8011      	strh	r1, [r2, #0]
10064668:	6840      	ldr	r0, [r0, #4]
1006466a:	e005      	b.n	10064678 <ACL_pkt_read_8b+0x1a>
1006466c:	6840      	ldr	r0, [r0, #4]
1006466e:	ac01      	add	r4, sp, #4
10064670:	4622      	mov	r2, r4
10064672:	f7fc fb4e 	bl	10060d12 <Mem_Buff_get_buff_off>
10064676:	8821      	ldrh	r1, [r4, #0]
10064678:	1840      	adds	r0, r0, r1
1006467a:	7900      	ldrb	r0, [r0, #4]
1006467c:	bd1c      	pop	{r2, r3, r4, pc}

1006467e <GAT_att_clt_find_type_val_get_last_attr_h>:
1006467e:	b51c      	push	{r2, r3, r4, lr}
10064680:	8981      	ldrh	r1, [r0, #12]
10064682:	8842      	ldrh	r2, [r0, #2]
10064684:	1851      	adds	r1, r2, r1
10064686:	1e89      	subs	r1, r1, #2
10064688:	b289      	uxth	r1, r1
1006468a:	2202      	movs	r2, #2
1006468c:	ac01      	add	r4, sp, #4
1006468e:	4623      	mov	r3, r4
10064690:	f7f0 fb94 	bl	10054dbc <ACL_pkt_read>
10064694:	8820      	ldrh	r0, [r4, #0]
10064696:	bd1c      	pop	{r2, r3, r4, pc}

10064698 <GAT_att_clt_parse_error_resp>:
10064698:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1006469a:	460e      	mov	r6, r1
1006469c:	8841      	ldrh	r1, [r0, #2]
1006469e:	2905      	cmp	r1, #5
100646a0:	d112      	bne.n	100646c8 <GAT_att_clt_parse_error_resp+0x30>
100646a2:	461c      	mov	r4, r3
100646a4:	4615      	mov	r5, r2
100646a6:	8981      	ldrh	r1, [r0, #12]
100646a8:	2205      	movs	r2, #5
100646aa:	af01      	add	r7, sp, #4
100646ac:	463b      	mov	r3, r7
100646ae:	f7f0 fb85 	bl	10054dbc <ACL_pkt_read>
100646b2:	7878      	ldrb	r0, [r7, #1]
100646b4:	7030      	strb	r0, [r6, #0]
100646b6:	78b8      	ldrb	r0, [r7, #2]
100646b8:	78f9      	ldrb	r1, [r7, #3]
100646ba:	0209      	lsls	r1, r1, #8
100646bc:	1808      	adds	r0, r1, r0
100646be:	8028      	strh	r0, [r5, #0]
100646c0:	9802      	ldr	r0, [sp, #8]
100646c2:	7020      	strb	r0, [r4, #0]
100646c4:	2000      	movs	r0, #0
100646c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100646c8:	2086      	movs	r0, #134	@ 0x86
100646ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100646cc <GAT_att_clt_read_type_get_last_attr_h>:
100646cc:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100646ce:	4604      	mov	r4, r0
100646d0:	8980      	ldrh	r0, [r0, #12]
100646d2:	1c40      	adds	r0, r0, #1
100646d4:	b281      	uxth	r1, r0
100646d6:	4620      	mov	r0, r4
100646d8:	f7ff ffc1 	bl	1006465e <ACL_pkt_read_8b>
100646dc:	8861      	ldrh	r1, [r4, #2]
100646de:	1a08      	subs	r0, r1, r0
100646e0:	89a1      	ldrh	r1, [r4, #12]
100646e2:	1840      	adds	r0, r0, r1
100646e4:	b281      	uxth	r1, r0
100646e6:	2202      	movs	r2, #2
100646e8:	ad01      	add	r5, sp, #4
100646ea:	4620      	mov	r0, r4
100646ec:	462b      	mov	r3, r5
100646ee:	f7f0 fb65 	bl	10054dbc <ACL_pkt_read>
100646f2:	8828      	ldrh	r0, [r5, #0]
100646f4:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100646f6 <GAT_att_clt_read_type_get_data>:
100646f6:	b570      	push	{r4, r5, r6, lr}
100646f8:	4614      	mov	r4, r2
100646fa:	460e      	mov	r6, r1
100646fc:	4605      	mov	r5, r0
100646fe:	8980      	ldrh	r0, [r0, #12]
10064700:	1c40      	adds	r0, r0, #1
10064702:	b281      	uxth	r1, r0
10064704:	4628      	mov	r0, r5
10064706:	f7ff ffaa 	bl	1006465e <ACL_pkt_read_8b>
1006470a:	4602      	mov	r2, r0
1006470c:	4346      	muls	r6, r0
1006470e:	1cb0      	adds	r0, r6, #2
10064710:	8869      	ldrh	r1, [r5, #2]
10064712:	4288      	cmp	r0, r1
10064714:	d208      	bcs.n	10064728 <GAT_att_clt_read_type_get_data+0x32>
10064716:	89a9      	ldrh	r1, [r5, #12]
10064718:	1808      	adds	r0, r1, r0
1006471a:	b281      	uxth	r1, r0
1006471c:	4628      	mov	r0, r5
1006471e:	4623      	mov	r3, r4
10064720:	f7f0 fb4c 	bl	10054dbc <ACL_pkt_read>
10064724:	2000      	movs	r0, #0
10064726:	bd70      	pop	{r4, r5, r6, pc}
10064728:	2086      	movs	r0, #134	@ 0x86
1006472a:	bd70      	pop	{r4, r5, r6, pc}

1006472c <GAT_att_clt_find_info_get_last_attr_h>:
1006472c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1006472e:	4604      	mov	r4, r0
10064730:	8980      	ldrh	r0, [r0, #12]
10064732:	1c40      	adds	r0, r0, #1
10064734:	b281      	uxth	r1, r0
10064736:	4620      	mov	r0, r4
10064738:	f7ff ff91 	bl	1006465e <ACL_pkt_read_8b>
1006473c:	2111      	movs	r1, #17
1006473e:	43c9      	mvns	r1, r1
10064740:	2801      	cmp	r0, #1
10064742:	d100      	bne.n	10064746 <GAT_att_clt_find_info_get_last_attr_h+0x1a>
10064744:	310e      	adds	r1, #14
10064746:	8860      	ldrh	r0, [r4, #2]
10064748:	1840      	adds	r0, r0, r1
1006474a:	89a1      	ldrh	r1, [r4, #12]
1006474c:	1808      	adds	r0, r1, r0
1006474e:	b281      	uxth	r1, r0
10064750:	2202      	movs	r2, #2
10064752:	ad01      	add	r5, sp, #4
10064754:	4620      	mov	r0, r4
10064756:	462b      	mov	r3, r5
10064758:	f7f0 fb30 	bl	10054dbc <ACL_pkt_read>
1006475c:	8828      	ldrh	r0, [r5, #0]
1006475e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10064760 <GAT_att_clt_prep_wr_cmp_data>:
10064760:	b580      	push	{r7, lr}
10064762:	460b      	mov	r3, r1
10064764:	8842      	ldrh	r2, [r0, #2]
10064766:	8981      	ldrh	r1, [r0, #12]
10064768:	1d49      	adds	r1, r1, #5
1006476a:	b289      	uxth	r1, r1
1006476c:	1f52      	subs	r2, r2, #5
1006476e:	b292      	uxth	r2, r2
10064770:	f7f0 fb1b 	bl	10054daa <ACL_pkt_cmp>
10064774:	bd80      	pop	{r7, pc}

10064776 <GAT_att_clt_unexpect_rx>:
10064776:	b51c      	push	{r2, r3, r4, lr}
10064778:	4604      	mov	r4, r0
1006477a:	8800      	ldrh	r0, [r0, #0]
1006477c:	ab01      	add	r3, sp, #4
1006477e:	8018      	strh	r0, [r3, #0]
10064780:	2042      	movs	r0, #66	@ 0x42
10064782:	2102      	movs	r1, #2
10064784:	460a      	mov	r2, r1
10064786:	f7ff fbf1 	bl	10063f6c <aci_hal_fw_error_event_push_noinline>
1006478a:	2800      	cmp	r0, #0
1006478c:	d001      	beq.n	10064792 <GAT_att_clt_unexpect_rx+0x1c>
1006478e:	2084      	movs	r0, #132	@ 0x84
10064790:	bd1c      	pop	{r2, r3, r4, pc}
10064792:	4620      	mov	r0, r4
10064794:	f7f0 faf6 	bl	10054d84 <ACL_pkt_release>
10064798:	2000      	movs	r0, #0
1006479a:	bd1c      	pop	{r2, r3, r4, pc}

1006479c <GAT_att_clt_fill_read_multi_req>:
1006479c:	b510      	push	{r4, lr}
1006479e:	460c      	mov	r4, r1
100647a0:	68c3      	ldr	r3, [r0, #12]
100647a2:	8989      	ldrh	r1, [r1, #12]
100647a4:	7a00      	ldrb	r0, [r0, #8]
100647a6:	0042      	lsls	r2, r0, #1
100647a8:	1c48      	adds	r0, r1, #1
100647aa:	b281      	uxth	r1, r0
100647ac:	4620      	mov	r0, r4
100647ae:	f7f0 fb27 	bl	10054e00 <ACL_pkt_write>
100647b2:	bd10      	pop	{r4, pc}

100647b4 <GAT_att_clt_fill_handle_range>:
100647b4:	b5b0      	push	{r4, r5, r7, lr}
100647b6:	4614      	mov	r4, r2
100647b8:	460a      	mov	r2, r1
100647ba:	4605      	mov	r5, r0
100647bc:	8980      	ldrh	r0, [r0, #12]
100647be:	1c40      	adds	r0, r0, #1
100647c0:	b281      	uxth	r1, r0
100647c2:	4628      	mov	r0, r5
100647c4:	f7f0 fb13 	bl	10054dee <ACL_pkt_write_16b>
100647c8:	89a8      	ldrh	r0, [r5, #12]
100647ca:	1cc0      	adds	r0, r0, #3
100647cc:	b281      	uxth	r1, r0
100647ce:	4628      	mov	r0, r5
100647d0:	4622      	mov	r2, r4
100647d2:	f7f0 fb0c 	bl	10054dee <ACL_pkt_write_16b>
100647d6:	bdb0      	pop	{r4, r5, r7, pc}

100647d8 <GAT_att_db_init>:
100647d8:	b510      	push	{r4, lr}
100647da:	4604      	mov	r4, r0
100647dc:	2108      	movs	r1, #8
100647de:	f7fc f9f9 	bl	10060bd4 <csmem_mem_0_assign>
100647e2:	4904      	ldr	r1, [pc, #16]	@ (100647f4 <__arm_cp.0_0>)
100647e4:	6809      	ldr	r1, [r1, #0]
100647e6:	2260      	movs	r2, #96	@ 0x60
100647e8:	2300      	movs	r3, #0
100647ea:	528b      	strh	r3, [r1, r2]
100647ec:	6648      	str	r0, [r1, #100]	@ 0x64
100647ee:	3160      	adds	r1, #96	@ 0x60
100647f0:	804c      	strh	r4, [r1, #2]
100647f2:	bd10      	pop	{r4, pc}

100647f4 <__arm_cp.0_0>:
100647f4:	20002428 	.word	0x20002428

100647f8 <GAT_att_db_insert>:
100647f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100647fa:	b085      	sub	sp, #20
100647fc:	4617      	mov	r7, r2
100647fe:	9004      	str	r0, [sp, #16]
10064800:	4d1c      	ldr	r5, [pc, #112]	@ (10064874 <__arm_cp.1_0>)
10064802:	6828      	ldr	r0, [r5, #0]
10064804:	2460      	movs	r4, #96	@ 0x60
10064806:	5b06      	ldrh	r6, [r0, r4]
10064808:	4602      	mov	r2, r0
1006480a:	3260      	adds	r2, #96	@ 0x60
1006480c:	8852      	ldrh	r2, [r2, #2]
1006480e:	4296      	cmp	r6, r2
10064810:	d217      	bcs.n	10064842 <GAT_att_db_insert+0x4a>
10064812:	9402      	str	r4, [sp, #8]
10064814:	9303      	str	r3, [sp, #12]
10064816:	2900      	cmp	r1, #0
10064818:	d017      	beq.n	1006484a <GAT_att_db_insert+0x52>
1006481a:	9701      	str	r7, [sp, #4]
1006481c:	4608      	mov	r0, r1
1006481e:	f000 f82b 	bl	10064878 <GAT_att_db_get_att_idx>
10064822:	1c44      	adds	r4, r0, #1
10064824:	6828      	ldr	r0, [r5, #0]
10064826:	b2b1      	uxth	r1, r6
10064828:	b2a2      	uxth	r2, r4
1006482a:	4291      	cmp	r1, r2
1006482c:	d30b      	bcc.n	10064846 <GAT_att_db_insert+0x4e>
1006482e:	00c9      	lsls	r1, r1, #3
10064830:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10064832:	1840      	adds	r0, r0, r1
10064834:	4601      	mov	r1, r0
10064836:	3908      	subs	r1, #8
10064838:	2208      	movs	r2, #8
1006483a:	f7ed ff0b 	bl	10052654 <BLEPLAT_MemCpy>
1006483e:	1e76      	subs	r6, r6, #1
10064840:	e7f0      	b.n	10064824 <GAT_att_db_insert+0x2c>
10064842:	2700      	movs	r7, #0
10064844:	e012      	b.n	1006486c <GAT_att_db_insert+0x74>
10064846:	9f01      	ldr	r7, [sp, #4]
10064848:	e000      	b.n	1006484c <GAT_att_db_insert+0x54>
1006484a:	4634      	mov	r4, r6
1006484c:	6e40      	ldr	r0, [r0, #100]	@ 0x64
1006484e:	b2a1      	uxth	r1, r4
10064850:	00c9      	lsls	r1, r1, #3
10064852:	9a04      	ldr	r2, [sp, #16]
10064854:	5442      	strb	r2, [r0, r1]
10064856:	1840      	adds	r0, r0, r1
10064858:	9a03      	ldr	r2, [sp, #12]
1006485a:	6042      	str	r2, [r0, #4]
1006485c:	6828      	ldr	r0, [r5, #0]
1006485e:	9b02      	ldr	r3, [sp, #8]
10064860:	5ac2      	ldrh	r2, [r0, r3]
10064862:	1c52      	adds	r2, r2, #1
10064864:	52c2      	strh	r2, [r0, r3]
10064866:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10064868:	1840      	adds	r0, r0, r1
1006486a:	8047      	strh	r7, [r0, #2]
1006486c:	4638      	mov	r0, r7
1006486e:	b005      	add	sp, #20
10064870:	bdf0      	pop	{r4, r5, r6, r7, pc}
10064872:	46c0      	nop			@ (mov r8, r8)

10064874 <__arm_cp.1_0>:
10064874:	20002428 	.word	0x20002428

10064878 <GAT_att_db_get_att_idx>:
10064878:	4908      	ldr	r1, [pc, #32]	@ (1006489c <__arm_cp.2_0>)
1006487a:	680a      	ldr	r2, [r1, #0]
1006487c:	6e51      	ldr	r1, [r2, #100]	@ 0x64
1006487e:	2362      	movs	r3, #98	@ 0x62
10064880:	5ad2      	ldrh	r2, [r2, r3]
10064882:	00d2      	lsls	r2, r2, #3
10064884:	1852      	adds	r2, r2, r1
10064886:	3a08      	subs	r2, #8
10064888:	4282      	cmp	r2, r0
1006488a:	d302      	bcc.n	10064892 <GAT_att_db_get_att_idx+0x1a>
1006488c:	1a40      	subs	r0, r0, r1
1006488e:	08c0      	lsrs	r0, r0, #3
10064890:	e001      	b.n	10064896 <GAT_att_db_get_att_idx+0x1e>
10064892:	2000      	movs	r0, #0
10064894:	43c0      	mvns	r0, r0
10064896:	b280      	uxth	r0, r0
10064898:	4770      	bx	lr
1006489a:	46c0      	nop			@ (mov r8, r8)

1006489c <__arm_cp.2_0>:
1006489c:	20002428 	.word	0x20002428

100648a0 <GAT_att_db_find_by_handle>:
100648a0:	b580      	push	{r7, lr}
100648a2:	f000 f80f 	bl	100648c4 <GAT_att_db_find_attr_idx_with_handle>
100648a6:	4905      	ldr	r1, [pc, #20]	@ (100648bc <__arm_cp.3_0>)
100648a8:	4288      	cmp	r0, r1
100648aa:	d005      	beq.n	100648b8 <GAT_att_db_find_by_handle+0x18>
100648ac:	00c0      	lsls	r0, r0, #3
100648ae:	4904      	ldr	r1, [pc, #16]	@ (100648c0 <__arm_cp.3_1>)
100648b0:	6809      	ldr	r1, [r1, #0]
100648b2:	6e49      	ldr	r1, [r1, #100]	@ 0x64
100648b4:	1808      	adds	r0, r1, r0
100648b6:	bd80      	pop	{r7, pc}
100648b8:	2000      	movs	r0, #0
100648ba:	bd80      	pop	{r7, pc}

100648bc <__arm_cp.3_0>:
100648bc:	0000ffff 	.word	0x0000ffff

100648c0 <__arm_cp.3_1>:
100648c0:	20002428 	.word	0x20002428

100648c4 <GAT_att_db_find_attr_idx_with_handle>:
100648c4:	b510      	push	{r4, lr}
100648c6:	4604      	mov	r4, r0
100648c8:	f000 f824 	bl	10064914 <GAT_att_db_find_attr_idx_from_handle>
100648cc:	4906      	ldr	r1, [pc, #24]	@ (100648e8 <__arm_cp.4_0>)
100648ce:	4288      	cmp	r0, r1
100648d0:	d007      	beq.n	100648e2 <GAT_att_db_find_attr_idx_with_handle+0x1e>
100648d2:	00c2      	lsls	r2, r0, #3
100648d4:	4b05      	ldr	r3, [pc, #20]	@ (100648ec <__arm_cp.4_1>)
100648d6:	681b      	ldr	r3, [r3, #0]
100648d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
100648da:	189a      	adds	r2, r3, r2
100648dc:	8852      	ldrh	r2, [r2, #2]
100648de:	42a2      	cmp	r2, r4
100648e0:	d000      	beq.n	100648e4 <GAT_att_db_find_attr_idx_with_handle+0x20>
100648e2:	4608      	mov	r0, r1
100648e4:	bd10      	pop	{r4, pc}
100648e6:	46c0      	nop			@ (mov r8, r8)

100648e8 <__arm_cp.4_0>:
100648e8:	0000ffff 	.word	0x0000ffff

100648ec <__arm_cp.4_1>:
100648ec:	20002428 	.word	0x20002428

100648f0 <GAT_att_db_find_from_handle>:
100648f0:	b580      	push	{r7, lr}
100648f2:	f000 f80f 	bl	10064914 <GAT_att_db_find_attr_idx_from_handle>
100648f6:	4905      	ldr	r1, [pc, #20]	@ (1006490c <__arm_cp.5_0>)
100648f8:	4288      	cmp	r0, r1
100648fa:	d005      	beq.n	10064908 <GAT_att_db_find_from_handle+0x18>
100648fc:	00c0      	lsls	r0, r0, #3
100648fe:	4904      	ldr	r1, [pc, #16]	@ (10064910 <__arm_cp.5_1>)
10064900:	6809      	ldr	r1, [r1, #0]
10064902:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10064904:	1808      	adds	r0, r1, r0
10064906:	bd80      	pop	{r7, pc}
10064908:	2000      	movs	r0, #0
1006490a:	bd80      	pop	{r7, pc}

1006490c <__arm_cp.5_0>:
1006490c:	0000ffff 	.word	0x0000ffff

10064910 <__arm_cp.5_1>:
10064910:	20002428 	.word	0x20002428

10064914 <GAT_att_db_find_attr_idx_from_handle>:
10064914:	b570      	push	{r4, r5, r6, lr}
10064916:	4909      	ldr	r1, [pc, #36]	@ (1006493c <__arm_cp.6_0>)
10064918:	680a      	ldr	r2, [r1, #0]
1006491a:	2160      	movs	r1, #96	@ 0x60
1006491c:	5a53      	ldrh	r3, [r2, r1]
1006491e:	2100      	movs	r1, #0
10064920:	2502      	movs	r5, #2
10064922:	4c07      	ldr	r4, [pc, #28]	@ (10064940 <__arm_cp.6_1>)
10064924:	428b      	cmp	r3, r1
10064926:	d006      	beq.n	10064936 <GAT_att_db_find_attr_idx_from_handle+0x22>
10064928:	6e56      	ldr	r6, [r2, #100]	@ 0x64
1006492a:	5b76      	ldrh	r6, [r6, r5]
1006492c:	4286      	cmp	r6, r0
1006492e:	d203      	bcs.n	10064938 <GAT_att_db_find_attr_idx_from_handle+0x24>
10064930:	3508      	adds	r5, #8
10064932:	1c49      	adds	r1, r1, #1
10064934:	e7f6      	b.n	10064924 <GAT_att_db_find_attr_idx_from_handle+0x10>
10064936:	4621      	mov	r1, r4
10064938:	b288      	uxth	r0, r1
1006493a:	bd70      	pop	{r4, r5, r6, pc}

1006493c <__arm_cp.6_0>:
1006493c:	20002428 	.word	0x20002428

10064940 <__arm_cp.6_1>:
10064940:	0000ffff 	.word	0x0000ffff

10064944 <GAT_att_db_find_by_def>:
10064944:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10064946:	9302      	str	r3, [sp, #8]
10064948:	4615      	mov	r5, r2
1006494a:	2200      	movs	r2, #0
1006494c:	4288      	cmp	r0, r1
1006494e:	d823      	bhi.n	10064998 <GAT_att_db_find_by_def+0x54>
10064950:	460c      	mov	r4, r1
10064952:	4916      	ldr	r1, [pc, #88]	@ (100649ac <__arm_cp.8_0>)
10064954:	680f      	ldr	r7, [r1, #0]
10064956:	2160      	movs	r1, #96	@ 0x60
10064958:	5a79      	ldrh	r1, [r7, r1]
1006495a:	2900      	cmp	r1, #0
1006495c:	d01c      	beq.n	10064998 <GAT_att_db_find_by_def+0x54>
1006495e:	9200      	str	r2, [sp, #0]
10064960:	9101      	str	r1, [sp, #4]
10064962:	f7ff ffd7 	bl	10064914 <GAT_att_db_find_attr_idx_from_handle>
10064966:	4606      	mov	r6, r0
10064968:	4620      	mov	r0, r4
1006496a:	f7ff ffd3 	bl	10064914 <GAT_att_db_find_attr_idx_from_handle>
1006496e:	9901      	ldr	r1, [sp, #4]
10064970:	1e49      	subs	r1, r1, #1
10064972:	4281      	cmp	r1, r0
10064974:	d300      	bcc.n	10064978 <GAT_att_db_find_by_def+0x34>
10064976:	4601      	mov	r1, r0
10064978:	b289      	uxth	r1, r1
1006497a:	b2b2      	uxth	r2, r6
1006497c:	428a      	cmp	r2, r1
1006497e:	d80d      	bhi.n	1006499c <GAT_att_db_find_by_def+0x58>
10064980:	6e78      	ldr	r0, [r7, #100]	@ 0x64
10064982:	00d3      	lsls	r3, r2, #3
10064984:	5cc4      	ldrb	r4, [r0, r3]
10064986:	42ac      	cmp	r4, r5
10064988:	d104      	bne.n	10064994 <GAT_att_db_find_by_def+0x50>
1006498a:	18c0      	adds	r0, r0, r3
1006498c:	6843      	ldr	r3, [r0, #4]
1006498e:	9c02      	ldr	r4, [sp, #8]
10064990:	42a3      	cmp	r3, r4
10064992:	d005      	beq.n	100649a0 <GAT_att_db_find_by_def+0x5c>
10064994:	1c76      	adds	r6, r6, #1
10064996:	e7f0      	b.n	1006497a <GAT_att_db_find_by_def+0x36>
10064998:	4610      	mov	r0, r2
1006499a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006499c:	9800      	ldr	r0, [sp, #0]
1006499e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100649a0:	4903      	ldr	r1, [pc, #12]	@ (100649b0 <__arm_cp.8_1>)
100649a2:	428a      	cmp	r2, r1
100649a4:	d100      	bne.n	100649a8 <GAT_att_db_find_by_def+0x64>
100649a6:	2000      	movs	r0, #0
100649a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100649aa:	46c0      	nop			@ (mov r8, r8)

100649ac <__arm_cp.8_0>:
100649ac:	20002428 	.word	0x20002428

100649b0 <__arm_cp.8_1>:
100649b0:	0000ffff 	.word	0x0000ffff

100649b4 <GAT_att_db_get_next>:
100649b4:	b580      	push	{r7, lr}
100649b6:	f7ff ff5f 	bl	10064878 <GAT_att_db_get_att_idx>
100649ba:	4907      	ldr	r1, [pc, #28]	@ (100649d8 <__arm_cp.10_0>)
100649bc:	6809      	ldr	r1, [r1, #0]
100649be:	2260      	movs	r2, #96	@ 0x60
100649c0:	5a8a      	ldrh	r2, [r1, r2]
100649c2:	1c40      	adds	r0, r0, #1
100649c4:	b280      	uxth	r0, r0
100649c6:	4290      	cmp	r0, r2
100649c8:	d203      	bcs.n	100649d2 <GAT_att_db_get_next+0x1e>
100649ca:	6e49      	ldr	r1, [r1, #100]	@ 0x64
100649cc:	00c0      	lsls	r0, r0, #3
100649ce:	1808      	adds	r0, r1, r0
100649d0:	bd80      	pop	{r7, pc}
100649d2:	2000      	movs	r0, #0
100649d4:	bd80      	pop	{r7, pc}
100649d6:	46c0      	nop			@ (mov r8, r8)

100649d8 <__arm_cp.10_0>:
100649d8:	20002428 	.word	0x20002428

100649dc <GAT_att_db_get_last_group_handle>:
100649dc:	b580      	push	{r7, lr}
100649de:	f000 f803 	bl	100649e8 <GAT_att_db_get_last_group_attribute>
100649e2:	8840      	ldrh	r0, [r0, #2]
100649e4:	bd80      	pop	{r7, pc}
	...

100649e8 <GAT_att_db_get_last_group_attribute>:
100649e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100649ea:	7804      	ldrb	r4, [r0, #0]
100649ec:	2502      	movs	r5, #2
100649ee:	4621      	mov	r1, r4
100649f0:	4329      	orrs	r1, r5
100649f2:	2902      	cmp	r1, #2
100649f4:	d11e      	bne.n	10064a34 <GAT_att_db_get_last_group_attribute+0x4c>
100649f6:	f7ff ff3f 	bl	10064878 <GAT_att_db_get_att_idx>
100649fa:	490f      	ldr	r1, [pc, #60]	@ (10064a38 <__arm_cp.12_0>)
100649fc:	6809      	ldr	r1, [r1, #0]
100649fe:	2260      	movs	r2, #96	@ 0x60
10064a00:	5a8b      	ldrh	r3, [r1, r2]
10064a02:	1c40      	adds	r0, r0, #1
10064a04:	b282      	uxth	r2, r0
10064a06:	429a      	cmp	r2, r3
10064a08:	d210      	bcs.n	10064a2c <GAT_att_db_get_last_group_attribute+0x44>
10064a0a:	2c00      	cmp	r4, #0
10064a0c:	d008      	beq.n	10064a20 <GAT_att_db_get_last_group_attribute+0x38>
10064a0e:	2c02      	cmp	r4, #2
10064a10:	d1f7      	bne.n	10064a02 <GAT_att_db_get_last_group_attribute+0x1a>
10064a12:	00d7      	lsls	r7, r2, #3
10064a14:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
10064a16:	5df7      	ldrb	r7, [r6, r7]
10064a18:	432f      	orrs	r7, r5
10064a1a:	2f02      	cmp	r7, #2
10064a1c:	d1f1      	bne.n	10064a02 <GAT_att_db_get_last_group_attribute+0x1a>
10064a1e:	e006      	b.n	10064a2e <GAT_att_db_get_last_group_attribute+0x46>
10064a20:	00d7      	lsls	r7, r2, #3
10064a22:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
10064a24:	5df7      	ldrb	r7, [r6, r7]
10064a26:	2f00      	cmp	r7, #0
10064a28:	d1eb      	bne.n	10064a02 <GAT_att_db_get_last_group_attribute+0x1a>
10064a2a:	e000      	b.n	10064a2e <GAT_att_db_get_last_group_attribute+0x46>
10064a2c:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
10064a2e:	00d0      	lsls	r0, r2, #3
10064a30:	1980      	adds	r0, r0, r6
10064a32:	3808      	subs	r0, #8
10064a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064a36:	46c0      	nop			@ (mov r8, r8)

10064a38 <__arm_cp.12_0>:
10064a38:	20002428 	.word	0x20002428

10064a3c <GAT_att_db_get_last_handle>:
10064a3c:	4806      	ldr	r0, [pc, #24]	@ (10064a58 <__arm_cp.14_0>)
10064a3e:	6800      	ldr	r0, [r0, #0]
10064a40:	2160      	movs	r1, #96	@ 0x60
10064a42:	5a41      	ldrh	r1, [r0, r1]
10064a44:	2900      	cmp	r1, #0
10064a46:	d005      	beq.n	10064a54 <GAT_att_db_get_last_handle+0x18>
10064a48:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10064a4a:	00c9      	lsls	r1, r1, #3
10064a4c:	1808      	adds	r0, r1, r0
10064a4e:	1f80      	subs	r0, r0, #6
10064a50:	8800      	ldrh	r0, [r0, #0]
10064a52:	4770      	bx	lr
10064a54:	2000      	movs	r0, #0
10064a56:	4770      	bx	lr

10064a58 <__arm_cp.14_0>:
10064a58:	20002428 	.word	0x20002428

10064a5c <GAT_att_db_rm_att_range>:
10064a5c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10064a5e:	460d      	mov	r5, r1
10064a60:	4604      	mov	r4, r0
10064a62:	f7ff ffeb 	bl	10064a3c <GAT_att_db_get_last_handle>
10064a66:	2800      	cmp	r0, #0
10064a68:	d034      	beq.n	10064ad4 <GAT_att_db_rm_att_range+0x78>
10064a6a:	42ac      	cmp	r4, r5
10064a6c:	d832      	bhi.n	10064ad4 <GAT_att_db_rm_att_range+0x78>
10064a6e:	4606      	mov	r6, r0
10064a70:	42a0      	cmp	r0, r4
10064a72:	d32f      	bcc.n	10064ad4 <GAT_att_db_rm_att_range+0x78>
10064a74:	4620      	mov	r0, r4
10064a76:	f7ff ff25 	bl	100648c4 <GAT_att_db_find_attr_idx_with_handle>
10064a7a:	4604      	mov	r4, r0
10064a7c:	4816      	ldr	r0, [pc, #88]	@ (10064ad8 <__arm_cp.16_0>)
10064a7e:	4284      	cmp	r4, r0
10064a80:	d028      	beq.n	10064ad4 <GAT_att_db_rm_att_range+0x78>
10064a82:	42ae      	cmp	r6, r5
10064a84:	d300      	bcc.n	10064a88 <GAT_att_db_rm_att_range+0x2c>
10064a86:	462e      	mov	r6, r5
10064a88:	4630      	mov	r0, r6
10064a8a:	f7ff ff1b 	bl	100648c4 <GAT_att_db_find_attr_idx_with_handle>
10064a8e:	4913      	ldr	r1, [pc, #76]	@ (10064adc <__arm_cp.16_1>)
10064a90:	680f      	ldr	r7, [r1, #0]
10064a92:	2660      	movs	r6, #96	@ 0x60
10064a94:	5bb9      	ldrh	r1, [r7, r6]
10064a96:	1e4a      	subs	r2, r1, #1
10064a98:	4282      	cmp	r2, r0
10064a9a:	d917      	bls.n	10064acc <GAT_att_db_rm_att_range+0x70>
10064a9c:	9001      	str	r0, [sp, #4]
10064a9e:	4605      	mov	r5, r0
10064aa0:	9402      	str	r4, [sp, #8]
10064aa2:	b28b      	uxth	r3, r1
10064aa4:	1c6d      	adds	r5, r5, #1
10064aa6:	b2aa      	uxth	r2, r5
10064aa8:	429a      	cmp	r2, r3
10064aaa:	d20d      	bcs.n	10064ac8 <GAT_att_db_rm_att_range+0x6c>
10064aac:	6e79      	ldr	r1, [r7, #100]	@ 0x64
10064aae:	b2a0      	uxth	r0, r4
10064ab0:	00c0      	lsls	r0, r0, #3
10064ab2:	1808      	adds	r0, r1, r0
10064ab4:	00d2      	lsls	r2, r2, #3
10064ab6:	1889      	adds	r1, r1, r2
10064ab8:	2208      	movs	r2, #8
10064aba:	f7ed fdcb 	bl	10052654 <BLEPLAT_MemCpy>
10064abe:	4807      	ldr	r0, [pc, #28]	@ (10064adc <__arm_cp.16_1>)
10064ac0:	6807      	ldr	r7, [r0, #0]
10064ac2:	5bb9      	ldrh	r1, [r7, r6]
10064ac4:	1c64      	adds	r4, r4, #1
10064ac6:	e7ec      	b.n	10064aa2 <GAT_att_db_rm_att_range+0x46>
10064ac8:	9c02      	ldr	r4, [sp, #8]
10064aca:	9801      	ldr	r0, [sp, #4]
10064acc:	43c2      	mvns	r2, r0
10064ace:	18a2      	adds	r2, r4, r2
10064ad0:	1851      	adds	r1, r2, r1
10064ad2:	53b9      	strh	r1, [r7, r6]
10064ad4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10064ad6:	46c0      	nop			@ (mov r8, r8)

10064ad8 <__arm_cp.16_0>:
10064ad8:	0000ffff 	.word	0x0000ffff

10064adc <__arm_cp.16_1>:
10064adc:	20002428 	.word	0x20002428

10064ae0 <GAT_att_db_find_last_attr_of_type>:
10064ae0:	b510      	push	{r4, lr}
10064ae2:	4909      	ldr	r1, [pc, #36]	@ (10064b08 <__arm_cp.17_0>)
10064ae4:	680a      	ldr	r2, [r1, #0]
10064ae6:	2160      	movs	r1, #96	@ 0x60
10064ae8:	5a53      	ldrh	r3, [r2, r1]
10064aea:	0419      	lsls	r1, r3, #16
10064aec:	d009      	beq.n	10064b02 <GAT_att_db_find_last_attr_of_type+0x22>
10064aee:	6e51      	ldr	r1, [r2, #100]	@ 0x64
10064af0:	b29c      	uxth	r4, r3
10064af2:	00e4      	lsls	r4, r4, #3
10064af4:	1861      	adds	r1, r4, r1
10064af6:	3908      	subs	r1, #8
10064af8:	780c      	ldrb	r4, [r1, #0]
10064afa:	1e5b      	subs	r3, r3, #1
10064afc:	4284      	cmp	r4, r0
10064afe:	d1f4      	bne.n	10064aea <GAT_att_db_find_last_attr_of_type+0xa>
10064b00:	e000      	b.n	10064b04 <GAT_att_db_find_last_attr_of_type+0x24>
10064b02:	2100      	movs	r1, #0
10064b04:	4608      	mov	r0, r1
10064b06:	bd10      	pop	{r4, pc}

10064b08 <__arm_cp.17_0>:
10064b08:	20002428 	.word	0x20002428

10064b0c <GAT_att_db_reverse_find_attr_of_type>:
10064b0c:	b510      	push	{r4, lr}
10064b0e:	4604      	mov	r4, r0
10064b10:	4608      	mov	r0, r1
10064b12:	f7ff feff 	bl	10064914 <GAT_att_db_find_attr_idx_from_handle>
10064b16:	4908      	ldr	r1, [pc, #32]	@ (10064b38 <__arm_cp.18_0>)
10064b18:	6809      	ldr	r1, [r1, #0]
10064b1a:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10064b1c:	b282      	uxth	r2, r0
10064b1e:	00d2      	lsls	r2, r2, #3
10064b20:	5c8b      	ldrb	r3, [r1, r2]
10064b22:	42a3      	cmp	r3, r4
10064b24:	d005      	beq.n	10064b32 <GAT_att_db_reverse_find_attr_of_type+0x26>
10064b26:	1e42      	subs	r2, r0, #1
10064b28:	0400      	lsls	r0, r0, #16
10064b2a:	4610      	mov	r0, r2
10064b2c:	d1f6      	bne.n	10064b1c <GAT_att_db_reverse_find_attr_of_type+0x10>
10064b2e:	2000      	movs	r0, #0
10064b30:	bd10      	pop	{r4, pc}
10064b32:	1888      	adds	r0, r1, r2
10064b34:	bd10      	pop	{r4, pc}
10064b36:	46c0      	nop			@ (mov r8, r8)

10064b38 <__arm_cp.18_0>:
10064b38:	20002428 	.word	0x20002428

10064b3c <GAT_clt_init>:
10064b3c:	b570      	push	{r4, r5, r6, lr}
10064b3e:	4c11      	ldr	r4, [pc, #68]	@ (10064b84 <__arm_cp.0_0>)
10064b40:	7aa0      	ldrb	r0, [r4, #10]
10064b42:	2124      	movs	r1, #36	@ 0x24
10064b44:	f7fc f846 	bl	10060bd4 <csmem_mem_0_assign>
10064b48:	490f      	ldr	r1, [pc, #60]	@ (10064b88 <__arm_cp.0_1>)
10064b4a:	680b      	ldr	r3, [r1, #0]
10064b4c:	2200      	movs	r2, #0
10064b4e:	461d      	mov	r5, r3
10064b50:	3550      	adds	r5, #80	@ 0x50
10064b52:	461e      	mov	r6, r3
10064b54:	3648      	adds	r6, #72	@ 0x48
10064b56:	649a      	str	r2, [r3, #72]	@ 0x48
10064b58:	64de      	str	r6, [r3, #76]	@ 0x4c
10064b5a:	651a      	str	r2, [r3, #80]	@ 0x50
10064b5c:	655d      	str	r5, [r3, #84]	@ 0x54
10064b5e:	7aa4      	ldrb	r4, [r4, #10]
10064b60:	2c00      	cmp	r4, #0
10064b62:	d00c      	beq.n	10064b7e <GAT_clt_init+0x42>
10064b64:	6202      	str	r2, [r0, #32]
10064b66:	680b      	ldr	r3, [r1, #0]
10064b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10064b6a:	6018      	str	r0, [r3, #0]
10064b6c:	2301      	movs	r3, #1
10064b6e:	7003      	strb	r3, [r0, #0]
10064b70:	4605      	mov	r5, r0
10064b72:	3520      	adds	r5, #32
10064b74:	680b      	ldr	r3, [r1, #0]
10064b76:	655d      	str	r5, [r3, #84]	@ 0x54
10064b78:	3024      	adds	r0, #36	@ 0x24
10064b7a:	1e64      	subs	r4, r4, #1
10064b7c:	e7f0      	b.n	10064b60 <GAT_clt_init+0x24>
10064b7e:	659a      	str	r2, [r3, #88]	@ 0x58
10064b80:	bd70      	pop	{r4, r5, r6, pc}
10064b82:	46c0      	nop			@ (mov r8, r8)

10064b84 <__arm_cp.0_0>:
10064b84:	20002484 	.word	0x20002484

10064b88 <__arm_cp.0_1>:
10064b88:	20002428 	.word	0x20002428

10064b8c <GAT_clt_connection>:
10064b8c:	4770      	bx	lr
	...

10064b90 <GAT_clt_bearer_close>:
10064b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064b92:	460d      	mov	r5, r1
10064b94:	4604      	mov	r4, r0
10064b96:	4e19      	ldr	r6, [pc, #100]	@ (10064bfc <__arm_cp.2_0>)
10064b98:	6837      	ldr	r7, [r6, #0]
10064b9a:	3748      	adds	r7, #72	@ 0x48
10064b9c:	683f      	ldr	r7, [r7, #0]
10064b9e:	2f00      	cmp	r7, #0
10064ba0:	d010      	beq.n	10064bc4 <GAT_clt_bearer_close+0x34>
10064ba2:	8878      	ldrh	r0, [r7, #2]
10064ba4:	42a0      	cmp	r0, r4
10064ba6:	d10b      	bne.n	10064bc0 <GAT_clt_bearer_close+0x30>
10064ba8:	88b8      	ldrh	r0, [r7, #4]
10064baa:	42a8      	cmp	r0, r5
10064bac:	d108      	bne.n	10064bc0 <GAT_clt_bearer_close+0x30>
10064bae:	7838      	ldrb	r0, [r7, #0]
10064bb0:	2118      	movs	r1, #24
10064bb2:	4301      	orrs	r1, r0
10064bb4:	7039      	strb	r1, [r7, #0]
10064bb6:	200c      	movs	r0, #12
10064bb8:	f7fd fde2 	bl	10062780 <tsk_notify_idx>
10064bbc:	f7ec ff63 	bl	10051a86 <BLE_STACK_ProcessRequest>
10064bc0:	3720      	adds	r7, #32
10064bc2:	e7eb      	b.n	10064b9c <GAT_clt_bearer_close+0xc>
10064bc4:	2d04      	cmp	r5, #4
10064bc6:	d117      	bne.n	10064bf8 <GAT_clt_bearer_close+0x68>
10064bc8:	6830      	ldr	r0, [r6, #0]
10064bca:	6d81      	ldr	r1, [r0, #88]	@ 0x58
10064bcc:	460b      	mov	r3, r1
10064bce:	2b00      	cmp	r3, #0
10064bd0:	d00b      	beq.n	10064bea <GAT_clt_bearer_close+0x5a>
10064bd2:	461a      	mov	r2, r3
10064bd4:	689d      	ldr	r5, [r3, #8]
10064bd6:	2300      	movs	r3, #0
10064bd8:	2d00      	cmp	r5, #0
10064bda:	d0f8      	beq.n	10064bce <GAT_clt_bearer_close+0x3e>
10064bdc:	88ab      	ldrh	r3, [r5, #4]
10064bde:	42a3      	cmp	r3, r4
10064be0:	462b      	mov	r3, r5
10064be2:	d1f4      	bne.n	10064bce <GAT_clt_bearer_close+0x3e>
10064be4:	68ab      	ldr	r3, [r5, #8]
10064be6:	6093      	str	r3, [r2, #8]
10064be8:	e7f1      	b.n	10064bce <GAT_clt_bearer_close+0x3e>
10064bea:	2900      	cmp	r1, #0
10064bec:	d004      	beq.n	10064bf8 <GAT_clt_bearer_close+0x68>
10064bee:	888a      	ldrh	r2, [r1, #4]
10064bf0:	42a2      	cmp	r2, r4
10064bf2:	d101      	bne.n	10064bf8 <GAT_clt_bearer_close+0x68>
10064bf4:	6889      	ldr	r1, [r1, #8]
10064bf6:	6581      	str	r1, [r0, #88]	@ 0x58
10064bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064bfa:	46c0      	nop			@ (mov r8, r8)

10064bfc <__arm_cp.2_0>:
10064bfc:	20002428 	.word	0x20002428

10064c00 <GAT_clt_proc_exec_tsk>:
10064c00:	b580      	push	{r7, lr}
10064c02:	4802      	ldr	r0, [pc, #8]	@ (10064c0c <__arm_cp.3_0>)
10064c04:	6800      	ldr	r0, [r0, #0]
10064c06:	4780      	blx	r0
10064c08:	bd80      	pop	{r7, pc}
10064c0a:	46c0      	nop			@ (mov r8, r8)

10064c0c <__arm_cp.3_0>:
10064c0c:	200028b0 	.word	0x200028b0

10064c10 <GAT_clt_rcv>:
10064c10:	b5f0      	push	{r4, r5, r6, r7, lr}
10064c12:	b095      	sub	sp, #84	@ 0x54
10064c14:	4605      	mov	r5, r0
10064c16:	8804      	ldrh	r4, [r0, #0]
10064c18:	f7f4 fdcb 	bl	100597b2 <L2C_get_cid_from_basic_packet_header>
10064c1c:	4601      	mov	r1, r0
10064c1e:	4620      	mov	r0, r4
10064c20:	f000 fa6e 	bl	10065100 <GAT_clt_get_proc_per_channel>
10064c24:	2686      	movs	r6, #134	@ 0x86
10064c26:	2800      	cmp	r0, #0
10064c28:	d100      	bne.n	10064c2c <GAT_clt_rcv+0x1c>
10064c2a:	e208      	b.n	1006503e <GAT_clt_rcv+0x42e>
10064c2c:	4604      	mov	r4, r0
10064c2e:	882f      	ldrh	r7, [r5, #0]
10064c30:	4628      	mov	r0, r5
10064c32:	f7f4 fdbe 	bl	100597b2 <L2C_get_cid_from_basic_packet_header>
10064c36:	4601      	mov	r1, r0
10064c38:	4638      	mov	r0, r7
10064c3a:	f7f1 ff2d 	bl	10056a98 <GAT_att_cmn_get_channel_descr_p>
10064c3e:	9008      	str	r0, [sp, #32]
10064c40:	7820      	ldrb	r0, [r4, #0]
10064c42:	21fb      	movs	r1, #251	@ 0xfb
10064c44:	4001      	ands	r1, r0
10064c46:	7021      	strb	r1, [r4, #0]
10064c48:	270c      	movs	r7, #12
10064c4a:	4638      	mov	r0, r7
10064c4c:	f7fd fd98 	bl	10062780 <tsk_notify_idx>
10064c50:	f7ec ff19 	bl	10051a86 <BLE_STACK_ProcessRequest>
10064c54:	4628      	mov	r0, r5
10064c56:	f000 fa65 	bl	10065124 <GAT_att_cmn_get_opcode>
10064c5a:	2801      	cmp	r0, #1
10064c5c:	d107      	bne.n	10064c6e <GAT_clt_rcv+0x5e>
10064c5e:	8860      	ldrh	r0, [r4, #2]
10064c60:	f7f1 f804 	bl	10055c6c <GAP_started_gatt_proc>
10064c64:	2800      	cmp	r0, #0
10064c66:	d060      	beq.n	10064d2a <GAT_clt_rcv+0x11a>
10064c68:	4620      	mov	r0, r4
10064c6a:	f000 fa60 	bl	1006512e <GAT_clt_stop_proc>
10064c6e:	7820      	ldrb	r0, [r4, #0]
10064c70:	2200      	movs	r2, #0
10064c72:	0701      	lsls	r1, r0, #28
10064c74:	d457      	bmi.n	10064d26 <GAT_clt_rcv+0x116>
10064c76:	79a3      	ldrb	r3, [r4, #6]
10064c78:	1e59      	subs	r1, r3, #1
10064c7a:	2911      	cmp	r1, #17
10064c7c:	d900      	bls.n	10064c80 <GAT_clt_rcv+0x70>
10064c7e:	e1de      	b.n	1006503e <GAT_clt_rcv+0x42e>
10064c80:	9207      	str	r2, [sp, #28]
10064c82:	0049      	lsls	r1, r1, #1
10064c84:	4479      	add	r1, pc
10064c86:	8889      	ldrh	r1, [r1, #4]
10064c88:	0049      	lsls	r1, r1, #1
10064c8a:	448f      	add	pc, r1
10064c8c:	010200c5 	.word	0x010200c5
10064c90:	0099010f 	.word	0x0099010f
10064c94:	011f0099 	.word	0x011f0099
10064c98:	01750164 	.word	0x01750164
10064c9c:	01b9017c 	.word	0x01b9017c
10064ca0:	00a600a6 	.word	0x00a600a6
10064ca4:	001100b8 	.word	0x001100b8
10064ca8:	001100b0 	.word	0x001100b0
10064cac:	00b00011 	.word	0x00b00011
10064cb0:	06c0      	lsls	r0, r0, #27
10064cb2:	d500      	bpl.n	10064cb6 <GAT_clt_rcv+0xa6>
10064cb4:	e0a7      	b.n	10064e06 <GAT_clt_rcv+0x1f6>
10064cb6:	88a2      	ldrh	r2, [r4, #4]
10064cb8:	8861      	ldrh	r1, [r4, #2]
10064cba:	200a      	movs	r0, #10
10064cbc:	462b      	mov	r3, r5
10064cbe:	f7fe ffbf 	bl	10063c40 <aci_att_clt_prepare_write_resp_event_push_noinline>
10064cc2:	2800      	cmp	r0, #0
10064cc4:	d000      	beq.n	10064cc8 <GAT_clt_rcv+0xb8>
10064cc6:	e1b4      	b.n	10065032 <GAT_clt_rcv+0x422>
10064cc8:	79a0      	ldrb	r0, [r4, #6]
10064cca:	2811      	cmp	r0, #17
10064ccc:	d100      	bne.n	10064cd0 <GAT_clt_rcv+0xc0>
10064cce:	e1b2      	b.n	10065036 <GAT_clt_rcv+0x426>
10064cd0:	7a63      	ldrb	r3, [r4, #9]
10064cd2:	6921      	ldr	r1, [r4, #16]
10064cd4:	9108      	str	r1, [sp, #32]
10064cd6:	2810      	cmp	r0, #16
10064cd8:	d000      	beq.n	10064cdc <GAT_clt_rcv+0xcc>
10064cda:	e1d0      	b.n	1006507e <GAT_clt_rcv+0x46e>
10064cdc:	9306      	str	r3, [sp, #24]
10064cde:	89a8      	ldrh	r0, [r5, #12]
10064ce0:	1c40      	adds	r0, r0, #1
10064ce2:	b281      	uxth	r1, r0
10064ce4:	4628      	mov	r0, r5
10064ce6:	f7f0 f872 	bl	10054dce <ACL_pkt_read_16b>
10064cea:	9005      	str	r0, [sp, #20]
10064cec:	89a8      	ldrh	r0, [r5, #12]
10064cee:	1cc0      	adds	r0, r0, #3
10064cf0:	b281      	uxth	r1, r0
10064cf2:	4628      	mov	r0, r5
10064cf4:	f7f0 f86b 	bl	10054dce <ACL_pkt_read_16b>
10064cf8:	2600      	movs	r6, #0
10064cfa:	89a2      	ldrh	r2, [r4, #12]
10064cfc:	8869      	ldrh	r1, [r5, #2]
10064cfe:	1f49      	subs	r1, r1, #5
10064d00:	4291      	cmp	r1, r2
10064d02:	9004      	str	r0, [sp, #16]
10064d04:	d000      	beq.n	10064d08 <GAT_clt_rcv+0xf8>
10064d06:	e1cf      	b.n	100650a8 <GAT_clt_rcv+0x498>
10064d08:	4638      	mov	r0, r7
10064d0a:	9906      	ldr	r1, [sp, #24]
10064d0c:	4348      	muls	r0, r1
10064d0e:	9a08      	ldr	r2, [sp, #32]
10064d10:	1810      	adds	r0, r2, r0
10064d12:	6880      	ldr	r0, [r0, #8]
10064d14:	8961      	ldrh	r1, [r4, #10]
10064d16:	1841      	adds	r1, r0, r1
10064d18:	4628      	mov	r0, r5
10064d1a:	4615      	mov	r5, r2
10064d1c:	f7ff fd20 	bl	10064760 <GAT_att_clt_prep_wr_cmp_data>
10064d20:	9b06      	ldr	r3, [sp, #24]
10064d22:	9003      	str	r0, [sp, #12]
10064d24:	e1c4      	b.n	100650b0 <GAT_clt_rcv+0x4a0>
10064d26:	4616      	mov	r6, r2
10064d28:	e189      	b.n	1006503e <GAT_clt_rcv+0x42e>
10064d2a:	a909      	add	r1, sp, #36	@ 0x24
10064d2c:	aa0f      	add	r2, sp, #60	@ 0x3c
10064d2e:	ab0e      	add	r3, sp, #56	@ 0x38
10064d30:	4628      	mov	r0, r5
10064d32:	f7ff fcb1 	bl	10064698 <GAT_att_clt_parse_error_resp>
10064d36:	2800      	cmp	r0, #0
10064d38:	d02b      	beq.n	10064d92 <GAT_clt_rcv+0x182>
10064d3a:	4628      	mov	r0, r5
10064d3c:	f7f0 f822 	bl	10054d84 <ACL_pkt_release>
10064d40:	a80e      	add	r0, sp, #56	@ 0x38
10064d42:	7800      	ldrb	r0, [r0, #0]
10064d44:	2812      	cmp	r0, #18
10064d46:	d108      	bne.n	10064d5a <GAT_clt_rcv+0x14a>
10064d48:	8860      	ldrh	r0, [r4, #2]
10064d4a:	2104      	movs	r1, #4
10064d4c:	f7f1 fea4 	bl	10056a98 <GAT_att_cmn_get_channel_descr_p>
10064d50:	8881      	ldrh	r1, [r0, #4]
10064d52:	2201      	movs	r2, #1
10064d54:	0252      	lsls	r2, r2, #9
10064d56:	430a      	orrs	r2, r1
10064d58:	8082      	strh	r2, [r0, #4]
10064d5a:	79a0      	ldrb	r0, [r4, #6]
10064d5c:	2801      	cmp	r0, #1
10064d5e:	d104      	bne.n	10064d6a <GAT_clt_rcv+0x15a>
10064d60:	9b08      	ldr	r3, [sp, #32]
10064d62:	8899      	ldrh	r1, [r3, #4]
10064d64:	2204      	movs	r2, #4
10064d66:	4391      	bics	r1, r2
10064d68:	8099      	strh	r1, [r3, #4]
10064d6a:	a90e      	add	r1, sp, #56	@ 0x38
10064d6c:	7809      	ldrb	r1, [r1, #0]
10064d6e:	290a      	cmp	r1, #10
10064d70:	d008      	beq.n	10064d84 <GAT_clt_rcv+0x174>
10064d72:	2907      	cmp	r1, #7
10064d74:	d102      	bne.n	10064d7c <GAT_clt_rcv+0x16c>
10064d76:	280a      	cmp	r0, #10
10064d78:	d100      	bne.n	10064d7c <GAT_clt_rcv+0x16c>
10064d7a:	e775      	b.n	10064c68 <GAT_clt_rcv+0x58>
10064d7c:	7821      	ldrb	r1, [r4, #0]
10064d7e:	2210      	movs	r2, #16
10064d80:	430a      	orrs	r2, r1
10064d82:	7022      	strb	r2, [r4, #0]
10064d84:	280e      	cmp	r0, #14
10064d86:	d100      	bne.n	10064d8a <GAT_clt_rcv+0x17a>
10064d88:	e771      	b.n	10064c6e <GAT_clt_rcv+0x5e>
10064d8a:	2810      	cmp	r0, #16
10064d8c:	d100      	bne.n	10064d90 <GAT_clt_rcv+0x180>
10064d8e:	e76e      	b.n	10064c6e <GAT_clt_rcv+0x5e>
10064d90:	e76a      	b.n	10064c68 <GAT_clt_rcv+0x58>
10064d92:	a809      	add	r0, sp, #36	@ 0x24
10064d94:	7800      	ldrb	r0, [r0, #0]
10064d96:	9007      	str	r0, [sp, #28]
10064d98:	88a3      	ldrh	r3, [r4, #4]
10064d9a:	8862      	ldrh	r2, [r4, #2]
10064d9c:	a80f      	add	r0, sp, #60	@ 0x3c
10064d9e:	8800      	ldrh	r0, [r0, #0]
10064da0:	4621      	mov	r1, r4
10064da2:	ac0e      	add	r4, sp, #56	@ 0x38
10064da4:	7824      	ldrb	r4, [r4, #0]
10064da6:	9000      	str	r0, [sp, #0]
10064da8:	9401      	str	r4, [sp, #4]
10064daa:	460c      	mov	r4, r1
10064dac:	2002      	movs	r0, #2
10064dae:	4611      	mov	r1, r2
10064db0:	461a      	mov	r2, r3
10064db2:	9b07      	ldr	r3, [sp, #28]
10064db4:	f7fe fc10 	bl	100635d8 <aci_gatt_clt_error_resp_event_push_noinline>
10064db8:	2800      	cmp	r0, #0
10064dba:	d0be      	beq.n	10064d3a <GAT_clt_rcv+0x12a>
10064dbc:	4606      	mov	r6, r0
10064dbe:	e13e      	b.n	1006503e <GAT_clt_rcv+0x42e>
10064dc0:	88a2      	ldrh	r2, [r4, #4]
10064dc2:	8861      	ldrh	r1, [r4, #2]
10064dc4:	200a      	movs	r0, #10
10064dc6:	462b      	mov	r3, r5
10064dc8:	f7fe fe40 	bl	10063a4c <aci_att_clt_read_by_type_resp_event_push_noinline>
10064dcc:	2800      	cmp	r0, #0
10064dce:	d000      	beq.n	10064dd2 <GAT_clt_rcv+0x1c2>
10064dd0:	e12f      	b.n	10065032 <GAT_clt_rcv+0x422>
10064dd2:	4628      	mov	r0, r5
10064dd4:	f7ff fc7a 	bl	100646cc <GAT_att_clt_read_type_get_last_attr_h>
10064dd8:	e0c8      	b.n	10064f6c <GAT_clt_rcv+0x35c>
10064dda:	88a2      	ldrh	r2, [r4, #4]
10064ddc:	8861      	ldrh	r1, [r4, #2]
10064dde:	200a      	movs	r0, #10
10064de0:	2b0b      	cmp	r3, #11
10064de2:	d000      	beq.n	10064de6 <GAT_clt_rcv+0x1d6>
10064de4:	e120      	b.n	10065028 <GAT_clt_rcv+0x418>
10064de6:	462b      	mov	r3, r5
10064de8:	f7fe fec6 	bl	10063b78 <aci_att_clt_read_multiple_resp_event_push_noinline>
10064dec:	e11f      	b.n	1006502e <GAT_clt_rcv+0x41e>
10064dee:	88a2      	ldrh	r2, [r4, #4]
10064df0:	8861      	ldrh	r1, [r4, #2]
10064df2:	2002      	movs	r0, #2
10064df4:	f7fe ff56 	bl	10063ca4 <aci_att_clt_exec_write_resp_event_push_noinline>
10064df8:	2800      	cmp	r0, #0
10064dfa:	d000      	beq.n	10064dfe <GAT_clt_rcv+0x1ee>
10064dfc:	e119      	b.n	10065032 <GAT_clt_rcv+0x422>
10064dfe:	4628      	mov	r0, r5
10064e00:	f7ef ffc0 	bl	10054d84 <ACL_pkt_release>
10064e04:	e117      	b.n	10065036 <GAT_clt_rcv+0x426>
10064e06:	8960      	ldrh	r0, [r4, #10]
10064e08:	2800      	cmp	r0, #0
10064e0a:	d100      	bne.n	10064e0e <GAT_clt_rcv+0x1fe>
10064e0c:	e113      	b.n	10065036 <GAT_clt_rcv+0x426>
10064e0e:	2600      	movs	r6, #0
10064e10:	7226      	strb	r6, [r4, #8]
10064e12:	200f      	movs	r0, #15
10064e14:	71a0      	strb	r0, [r4, #6]
10064e16:	e112      	b.n	1006503e <GAT_clt_rcv+0x42e>
10064e18:	89a8      	ldrh	r0, [r5, #12]
10064e1a:	1c40      	adds	r0, r0, #1
10064e1c:	b281      	uxth	r1, r0
10064e1e:	4628      	mov	r0, r5
10064e20:	f7ef ffd5 	bl	10054dce <ACL_pkt_read_16b>
10064e24:	4606      	mov	r6, r0
10064e26:	2817      	cmp	r0, #23
10064e28:	d800      	bhi.n	10064e2c <GAT_clt_rcv+0x21c>
10064e2a:	2617      	movs	r6, #23
10064e2c:	48b3      	ldr	r0, [pc, #716]	@ (100650fc <__arm_cp.4_3>)
10064e2e:	8a00      	ldrh	r0, [r0, #16]
10064e30:	4286      	cmp	r6, r0
10064e32:	9f08      	ldr	r7, [sp, #32]
10064e34:	d300      	bcc.n	10064e38 <GAT_clt_rcv+0x228>
10064e36:	4606      	mov	r6, r0
10064e38:	88b8      	ldrh	r0, [r7, #4]
10064e3a:	0700      	lsls	r0, r0, #28
10064e3c:	d514      	bpl.n	10064e68 <GAT_clt_rcv+0x258>
10064e3e:	88f8      	ldrh	r0, [r7, #6]
10064e40:	42b0      	cmp	r0, r6
10064e42:	d011      	beq.n	10064e68 <GAT_clt_rcv+0x258>
10064e44:	463b      	mov	r3, r7
10064e46:	3308      	adds	r3, #8
10064e48:	2042      	movs	r0, #66	@ 0x42
10064e4a:	2103      	movs	r1, #3
10064e4c:	2202      	movs	r2, #2
10064e4e:	f7ff f88d 	bl	10063f6c <aci_hal_fw_error_event_push_noinline>
10064e52:	2800      	cmp	r0, #0
10064e54:	d000      	beq.n	10064e58 <GAT_clt_rcv+0x248>
10064e56:	e0ec      	b.n	10065032 <GAT_clt_rcv+0x422>
10064e58:	7820      	ldrb	r0, [r4, #0]
10064e5a:	2110      	movs	r1, #16
10064e5c:	4301      	orrs	r1, r0
10064e5e:	7021      	strb	r1, [r4, #0]
10064e60:	88b8      	ldrh	r0, [r7, #4]
10064e62:	2108      	movs	r1, #8
10064e64:	4388      	bics	r0, r1
10064e66:	80b8      	strh	r0, [r7, #4]
10064e68:	7820      	ldrb	r0, [r4, #0]
10064e6a:	06c0      	lsls	r0, r0, #27
10064e6c:	d500      	bpl.n	10064e70 <GAT_clt_rcv+0x260>
10064e6e:	88fe      	ldrh	r6, [r7, #6]
10064e70:	8861      	ldrh	r1, [r4, #2]
10064e72:	2002      	movs	r0, #2
10064e74:	4632      	mov	r2, r6
10064e76:	f7fe fd49 	bl	1006390c <aci_att_exchange_mtu_resp_event_push_noinline>
10064e7a:	2800      	cmp	r0, #0
10064e7c:	d000      	beq.n	10064e80 <GAT_clt_rcv+0x270>
10064e7e:	e0d8      	b.n	10065032 <GAT_clt_rcv+0x422>
10064e80:	80fe      	strh	r6, [r7, #6]
10064e82:	88b8      	ldrh	r0, [r7, #4]
10064e84:	2108      	movs	r1, #8
10064e86:	4301      	orrs	r1, r0
10064e88:	2004      	movs	r0, #4
10064e8a:	4381      	bics	r1, r0
10064e8c:	80b9      	strh	r1, [r7, #4]
10064e8e:	4620      	mov	r0, r4
10064e90:	e0dc      	b.n	1006504c <GAT_clt_rcv+0x43c>
10064e92:	88a2      	ldrh	r2, [r4, #4]
10064e94:	8861      	ldrh	r1, [r4, #2]
10064e96:	200a      	movs	r0, #10
10064e98:	462b      	mov	r3, r5
10064e9a:	f7fe fe9f 	bl	10063bdc <aci_att_clt_read_by_group_type_resp_event_push_noinline>
10064e9e:	2800      	cmp	r0, #0
10064ea0:	d000      	beq.n	10064ea4 <GAT_clt_rcv+0x294>
10064ea2:	e0c6      	b.n	10065032 <GAT_clt_rcv+0x422>
10064ea4:	4628      	mov	r0, r5
10064ea6:	f7ff fbc4 	bl	10064632 <GAT_att_clt_read_grp_type_get_last_attr_h>
10064eaa:	e00b      	b.n	10064ec4 <GAT_clt_rcv+0x2b4>
10064eac:	88a2      	ldrh	r2, [r4, #4]
10064eae:	8861      	ldrh	r1, [r4, #2]
10064eb0:	200a      	movs	r0, #10
10064eb2:	462b      	mov	r3, r5
10064eb4:	f7fe fd98 	bl	100639e8 <aci_att_clt_find_by_type_value_resp_event_push_noinline>
10064eb8:	2800      	cmp	r0, #0
10064eba:	d000      	beq.n	10064ebe <GAT_clt_rcv+0x2ae>
10064ebc:	e0b9      	b.n	10065032 <GAT_clt_rcv+0x422>
10064ebe:	4628      	mov	r0, r5
10064ec0:	f7ff fbdd 	bl	1006467e <GAT_att_clt_find_type_val_get_last_attr_h>
10064ec4:	498c      	ldr	r1, [pc, #560]	@ (100650f8 <__arm_cp.4_2>)
10064ec6:	4288      	cmp	r0, r1
10064ec8:	d153      	bne.n	10064f72 <GAT_clt_rcv+0x362>
10064eca:	e0b4      	b.n	10065036 <GAT_clt_rcv+0x426>
10064ecc:	4628      	mov	r0, r5
10064ece:	f000 fa08 	bl	100652e2 <GAT_att_clt_read_type_get_len>
10064ed2:	9008      	str	r0, [sp, #32]
10064ed4:	8960      	ldrh	r0, [r4, #10]
10064ed6:	a90e      	add	r1, sp, #56	@ 0x38
10064ed8:	8008      	strh	r0, [r1, #0]
10064eda:	4620      	mov	r0, r4
10064edc:	300c      	adds	r0, #12
10064ede:	9007      	str	r0, [sp, #28]
10064ee0:	a809      	add	r0, sp, #36	@ 0x24
10064ee2:	300c      	adds	r0, #12
10064ee4:	9005      	str	r0, [sp, #20]
10064ee6:	a80f      	add	r0, sp, #60	@ 0x3c
10064ee8:	1d40      	adds	r0, r0, #5
10064eea:	9006      	str	r0, [sp, #24]
10064eec:	2600      	movs	r6, #0
10064eee:	b2f7      	uxtb	r7, r6
10064ef0:	aa0f      	add	r2, sp, #60	@ 0x3c
10064ef2:	4628      	mov	r0, r5
10064ef4:	4639      	mov	r1, r7
10064ef6:	f7ff fbfe 	bl	100646f6 <GAT_att_clt_read_type_get_data>
10064efa:	2800      	cmp	r0, #0
10064efc:	d000      	beq.n	10064f00 <GAT_clt_rcv+0x2f0>
10064efe:	e0a1      	b.n	10065044 <GAT_clt_rcv+0x434>
10064f00:	9808      	ldr	r0, [sp, #32]
10064f02:	2807      	cmp	r0, #7
10064f04:	d105      	bne.n	10064f12 <GAT_clt_rcv+0x302>
10064f06:	a809      	add	r0, sp, #36	@ 0x24
10064f08:	2110      	movs	r1, #16
10064f0a:	7401      	strb	r1, [r0, #16]
10064f0c:	2202      	movs	r2, #2
10064f0e:	9805      	ldr	r0, [sp, #20]
10064f10:	e003      	b.n	10064f1a <GAT_clt_rcv+0x30a>
10064f12:	a809      	add	r0, sp, #36	@ 0x24
10064f14:	2180      	movs	r1, #128	@ 0x80
10064f16:	7401      	strb	r1, [r0, #16]
10064f18:	2210      	movs	r2, #16
10064f1a:	9906      	ldr	r1, [sp, #24]
10064f1c:	f7ed fb9a 	bl	10052654 <BLEPLAT_MemCpy>
10064f20:	a80e      	add	r0, sp, #56	@ 0x38
10064f22:	a90f      	add	r1, sp, #60	@ 0x3c
10064f24:	2202      	movs	r2, #2
10064f26:	f7ed fb95 	bl	10052654 <BLEPLAT_MemCpy>
10064f2a:	a809      	add	r0, sp, #36	@ 0x24
10064f2c:	9907      	ldr	r1, [sp, #28]
10064f2e:	f7fd fdcf 	bl	10062ad0 <UUID_cmp_128bits>
10064f32:	2800      	cmp	r0, #0
10064f34:	d10d      	bne.n	10064f52 <GAT_clt_rcv+0x342>
10064f36:	88a2      	ldrh	r2, [r4, #4]
10064f38:	8861      	ldrh	r1, [r4, #2]
10064f3a:	9808      	ldr	r0, [sp, #32]
10064f3c:	9000      	str	r0, [sp, #0]
10064f3e:	9501      	str	r5, [sp, #4]
10064f40:	4347      	muls	r7, r0
10064f42:	1cb8      	adds	r0, r7, #2
10064f44:	b283      	uxth	r3, r0
10064f46:	2002      	movs	r0, #2
10064f48:	f7fe fb8c 	bl	10063664 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>
10064f4c:	2800      	cmp	r0, #0
10064f4e:	d000      	beq.n	10064f52 <GAT_clt_rcv+0x342>
10064f50:	e082      	b.n	10065058 <GAT_clt_rcv+0x448>
10064f52:	1c76      	adds	r6, r6, #1
10064f54:	e7cb      	b.n	10064eee <GAT_clt_rcv+0x2de>
10064f56:	88a2      	ldrh	r2, [r4, #4]
10064f58:	8861      	ldrh	r1, [r4, #2]
10064f5a:	200a      	movs	r0, #10
10064f5c:	462b      	mov	r3, r5
10064f5e:	f7fe fd11 	bl	10063984 <aci_att_clt_find_info_resp_event_push_noinline>
10064f62:	2800      	cmp	r0, #0
10064f64:	d165      	bne.n	10065032 <GAT_clt_rcv+0x422>
10064f66:	4628      	mov	r0, r5
10064f68:	f7ff fbe0 	bl	1006472c <GAT_att_clt_find_info_get_last_attr_h>
10064f6c:	8961      	ldrh	r1, [r4, #10]
10064f6e:	4288      	cmp	r0, r1
10064f70:	d261      	bcs.n	10065036 <GAT_clt_rcv+0x426>
10064f72:	1c40      	adds	r0, r0, #1
10064f74:	8120      	strh	r0, [r4, #8]
10064f76:	e061      	b.n	1006503c <GAT_clt_rcv+0x42c>
10064f78:	88a2      	ldrh	r2, [r4, #4]
10064f7a:	8861      	ldrh	r1, [r4, #2]
10064f7c:	200a      	movs	r0, #10
10064f7e:	462b      	mov	r3, r5
10064f80:	f7fe fd96 	bl	10063ab0 <aci_att_clt_read_resp_event_push_noinline>
10064f84:	e053      	b.n	1006502e <GAT_clt_rcv+0x41e>
10064f86:	4628      	mov	r0, r5
10064f88:	f000 f9ab 	bl	100652e2 <GAT_att_clt_read_type_get_len>
10064f8c:	4606      	mov	r6, r0
10064f8e:	9406      	str	r4, [sp, #24]
10064f90:	8860      	ldrh	r0, [r4, #2]
10064f92:	f7f0 fe6b 	bl	10055c6c <GAP_started_gatt_proc>
10064f96:	9008      	str	r0, [sp, #32]
10064f98:	2402      	movs	r4, #2
10064f9a:	8868      	ldrh	r0, [r5, #2]
10064f9c:	b2a3      	uxth	r3, r4
10064f9e:	4283      	cmp	r3, r0
10064fa0:	d253      	bcs.n	1006504a <GAT_clt_rcv+0x43a>
10064fa2:	9808      	ldr	r0, [sp, #32]
10064fa4:	2801      	cmp	r0, #1
10064fa6:	d10e      	bne.n	10064fc6 <GAT_clt_rcv+0x3b6>
10064fa8:	89a8      	ldrh	r0, [r5, #12]
10064faa:	1900      	adds	r0, r0, r4
10064fac:	b281      	uxth	r1, r0
10064fae:	af0f      	add	r7, sp, #60	@ 0x3c
10064fb0:	4628      	mov	r0, r5
10064fb2:	4632      	mov	r2, r6
10064fb4:	463b      	mov	r3, r7
10064fb6:	f7ef ff01 	bl	10054dbc <ACL_pkt_read>
10064fba:	205c      	movs	r0, #92	@ 0x5c
10064fbc:	4631      	mov	r1, r6
10064fbe:	463a      	mov	r2, r7
10064fc0:	f7f0 fff0 	bl	10055fa4 <GAP_internal_evt_handler>
10064fc4:	e01a      	b.n	10064ffc <GAT_clt_rcv+0x3ec>
10064fc6:	9f06      	ldr	r7, [sp, #24]
10064fc8:	88ba      	ldrh	r2, [r7, #4]
10064fca:	8879      	ldrh	r1, [r7, #2]
10064fcc:	9600      	str	r6, [sp, #0]
10064fce:	9501      	str	r5, [sp, #4]
10064fd0:	2002      	movs	r0, #2
10064fd2:	f7fe fb47 	bl	10063664 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>
10064fd6:	2800      	cmp	r0, #0
10064fd8:	d12b      	bne.n	10065032 <GAT_clt_rcv+0x422>
10064fda:	7f38      	ldrb	r0, [r7, #28]
10064fdc:	2810      	cmp	r0, #16
10064fde:	d10d      	bne.n	10064ffc <GAT_clt_rcv+0x3ec>
10064fe0:	9806      	ldr	r0, [sp, #24]
10064fe2:	8b00      	ldrh	r0, [r0, #24]
10064fe4:	4942      	ldr	r1, [pc, #264]	@ (100650f0 <__arm_cp.4_0>)
10064fe6:	4288      	cmp	r0, r1
10064fe8:	d108      	bne.n	10064ffc <GAT_clt_rcv+0x3ec>
10064fea:	9806      	ldr	r0, [sp, #24]
10064fec:	8840      	ldrh	r0, [r0, #2]
10064fee:	2104      	movs	r1, #4
10064ff0:	f7f1 fd52 	bl	10056a98 <GAT_att_cmn_get_channel_descr_p>
10064ff4:	8881      	ldrh	r1, [r0, #4]
10064ff6:	4a3f      	ldr	r2, [pc, #252]	@ (100650f4 <__arm_cp.4_1>)
10064ff8:	4011      	ands	r1, r2
10064ffa:	8081      	strh	r1, [r0, #4]
10064ffc:	19a4      	adds	r4, r4, r6
10064ffe:	e7cc      	b.n	10064f9a <GAT_clt_rcv+0x38a>
10065000:	88a2      	ldrh	r2, [r4, #4]
10065002:	8861      	ldrh	r1, [r4, #2]
10065004:	200a      	movs	r0, #10
10065006:	462b      	mov	r3, r5
10065008:	f7fe fd84 	bl	10063b14 <aci_att_clt_read_blob_resp_event_push_noinline>
1006500c:	2800      	cmp	r0, #0
1006500e:	d110      	bne.n	10065032 <GAT_clt_rcv+0x422>
10065010:	9808      	ldr	r0, [sp, #32]
10065012:	88c0      	ldrh	r0, [r0, #6]
10065014:	1e41      	subs	r1, r0, #1
10065016:	8868      	ldrh	r0, [r5, #2]
10065018:	1e40      	subs	r0, r0, #1
1006501a:	b282      	uxth	r2, r0
1006501c:	4291      	cmp	r1, r2
1006501e:	d80a      	bhi.n	10065036 <GAT_clt_rcv+0x426>
10065020:	8961      	ldrh	r1, [r4, #10]
10065022:	1808      	adds	r0, r1, r0
10065024:	8160      	strh	r0, [r4, #10]
10065026:	e009      	b.n	1006503c <GAT_clt_rcv+0x42c>
10065028:	462b      	mov	r3, r5
1006502a:	f7fe fed9 	bl	10063de0 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline>
1006502e:	2800      	cmp	r0, #0
10065030:	d001      	beq.n	10065036 <GAT_clt_rcv+0x426>
10065032:	2684      	movs	r6, #132	@ 0x84
10065034:	e003      	b.n	1006503e <GAT_clt_rcv+0x42e>
10065036:	4620      	mov	r0, r4
10065038:	f000 f879 	bl	1006512e <GAT_clt_stop_proc>
1006503c:	9e07      	ldr	r6, [sp, #28]
1006503e:	4630      	mov	r0, r6
10065040:	b015      	add	sp, #84	@ 0x54
10065042:	bdf0      	pop	{r4, r5, r6, r7, pc}
10065044:	a80e      	add	r0, sp, #56	@ 0x38
10065046:	8800      	ldrh	r0, [r0, #0]
10065048:	e00a      	b.n	10065060 <GAT_clt_rcv+0x450>
1006504a:	9806      	ldr	r0, [sp, #24]
1006504c:	f000 f86f 	bl	1006512e <GAT_clt_stop_proc>
10065050:	4628      	mov	r0, r5
10065052:	f7ef fe97 	bl	10054d84 <ACL_pkt_release>
10065056:	e7f1      	b.n	1006503c <GAT_clt_rcv+0x42c>
10065058:	980e      	ldr	r0, [sp, #56]	@ 0x38
1006505a:	1e40      	subs	r0, r0, #1
1006505c:	a90e      	add	r1, sp, #56	@ 0x38
1006505e:	8008      	strh	r0, [r1, #0]
10065060:	8961      	ldrh	r1, [r4, #10]
10065062:	b282      	uxth	r2, r0
10065064:	428a      	cmp	r2, r1
10065066:	d202      	bcs.n	1006506e <GAT_clt_rcv+0x45e>
10065068:	1c40      	adds	r0, r0, #1
1006506a:	8120      	strh	r0, [r4, #8]
1006506c:	e002      	b.n	10065074 <GAT_clt_rcv+0x464>
1006506e:	4620      	mov	r0, r4
10065070:	f000 f85d 	bl	1006512e <GAT_clt_stop_proc>
10065074:	4628      	mov	r0, r5
10065076:	f7ef fe85 	bl	10054d84 <ACL_pkt_release>
1006507a:	2600      	movs	r6, #0
1006507c:	e7df      	b.n	1006503e <GAT_clt_rcv+0x42e>
1006507e:	8961      	ldrh	r1, [r4, #10]
10065080:	9a08      	ldr	r2, [sp, #32]
10065082:	89a0      	ldrh	r0, [r4, #12]
10065084:	1840      	adds	r0, r0, r1
10065086:	8160      	strh	r0, [r4, #10]
10065088:	b280      	uxth	r0, r0
1006508a:	435f      	muls	r7, r3
1006508c:	19d1      	adds	r1, r2, r7
1006508e:	8889      	ldrh	r1, [r1, #4]
10065090:	4288      	cmp	r0, r1
10065092:	d1d3      	bne.n	1006503c <GAT_clt_rcv+0x42c>
10065094:	7a20      	ldrb	r0, [r4, #8]
10065096:	1e40      	subs	r0, r0, #1
10065098:	4298      	cmp	r0, r3
1006509a:	d924      	bls.n	100650e6 <GAT_clt_rcv+0x4d6>
1006509c:	2600      	movs	r6, #0
1006509e:	8166      	strh	r6, [r4, #10]
100650a0:	7a60      	ldrb	r0, [r4, #9]
100650a2:	1c40      	adds	r0, r0, #1
100650a4:	7260      	strb	r0, [r4, #9]
100650a6:	e7ca      	b.n	1006503e <GAT_clt_rcv+0x42e>
100650a8:	43f0      	mvns	r0, r6
100650aa:	9003      	str	r0, [sp, #12]
100650ac:	9b06      	ldr	r3, [sp, #24]
100650ae:	9d08      	ldr	r5, [sp, #32]
100650b0:	4639      	mov	r1, r7
100650b2:	4359      	muls	r1, r3
100650b4:	5a6a      	ldrh	r2, [r5, r1]
100650b6:	4628      	mov	r0, r5
100650b8:	9d05      	ldr	r5, [sp, #20]
100650ba:	4295      	cmp	r5, r2
100650bc:	d10b      	bne.n	100650d6 <GAT_clt_rcv+0x4c6>
100650be:	4602      	mov	r2, r0
100650c0:	1841      	adds	r1, r0, r1
100650c2:	884a      	ldrh	r2, [r1, #2]
100650c4:	8961      	ldrh	r1, [r4, #10]
100650c6:	188a      	adds	r2, r1, r2
100650c8:	9d04      	ldr	r5, [sp, #16]
100650ca:	42aa      	cmp	r2, r5
100650cc:	d103      	bne.n	100650d6 <GAT_clt_rcv+0x4c6>
100650ce:	4602      	mov	r2, r0
100650d0:	9803      	ldr	r0, [sp, #12]
100650d2:	2800      	cmp	r0, #0
100650d4:	d0d5      	beq.n	10065082 <GAT_clt_rcv+0x472>
100650d6:	7226      	strb	r6, [r4, #8]
100650d8:	200f      	movs	r0, #15
100650da:	71a0      	strb	r0, [r4, #6]
100650dc:	7820      	ldrb	r0, [r4, #0]
100650de:	2110      	movs	r1, #16
100650e0:	4301      	orrs	r1, r0
100650e2:	7021      	strb	r1, [r4, #0]
100650e4:	e7ab      	b.n	1006503e <GAT_clt_rcv+0x42e>
100650e6:	2001      	movs	r0, #1
100650e8:	7220      	strb	r0, [r4, #8]
100650ea:	200f      	movs	r0, #15
100650ec:	71a0      	strb	r0, [r4, #6]
100650ee:	e7a5      	b.n	1006503c <GAT_clt_rcv+0x42c>

100650f0 <__arm_cp.4_0>:
100650f0:	00002b2a 	.word	0x00002b2a

100650f4 <__arm_cp.4_1>:
100650f4:	0000fdff 	.word	0x0000fdff

100650f8 <__arm_cp.4_2>:
100650f8:	0000ffff 	.word	0x0000ffff

100650fc <__arm_cp.4_3>:
100650fc:	20002484 	.word	0x20002484

10065100 <GAT_clt_get_proc_per_channel>:
10065100:	4a07      	ldr	r2, [pc, #28]	@ (10065120 <__arm_cp.5_0>)
10065102:	6812      	ldr	r2, [r2, #0]
10065104:	3248      	adds	r2, #72	@ 0x48
10065106:	6812      	ldr	r2, [r2, #0]
10065108:	2a00      	cmp	r2, #0
1006510a:	d007      	beq.n	1006511c <GAT_clt_get_proc_per_channel+0x1c>
1006510c:	8853      	ldrh	r3, [r2, #2]
1006510e:	4283      	cmp	r3, r0
10065110:	d102      	bne.n	10065118 <GAT_clt_get_proc_per_channel+0x18>
10065112:	8893      	ldrh	r3, [r2, #4]
10065114:	428b      	cmp	r3, r1
10065116:	d001      	beq.n	1006511c <GAT_clt_get_proc_per_channel+0x1c>
10065118:	3220      	adds	r2, #32
1006511a:	e7f4      	b.n	10065106 <GAT_clt_get_proc_per_channel+0x6>
1006511c:	4610      	mov	r0, r2
1006511e:	4770      	bx	lr

10065120 <__arm_cp.5_0>:
10065120:	20002428 	.word	0x20002428

10065124 <GAT_att_cmn_get_opcode>:
10065124:	b580      	push	{r7, lr}
10065126:	8981      	ldrh	r1, [r0, #12]
10065128:	f000 f8cb 	bl	100652c2 <ACL_pkt_read_8b>
1006512c:	bd80      	pop	{r7, pc}

1006512e <GAT_clt_stop_proc>:
1006512e:	b580      	push	{r7, lr}
10065130:	7801      	ldrb	r1, [r0, #0]
10065132:	2208      	movs	r2, #8
10065134:	430a      	orrs	r2, r1
10065136:	7002      	strb	r2, [r0, #0]
10065138:	200c      	movs	r0, #12
1006513a:	f7fd fb21 	bl	10062780 <tsk_notify_idx>
1006513e:	f7ec fca2 	bl	10051a86 <BLE_STACK_ProcessRequest>
10065142:	bd80      	pop	{r7, pc}

10065144 <GAT_clt_rcv_corrupted>:
10065144:	b510      	push	{r4, lr}
10065146:	8804      	ldrh	r4, [r0, #0]
10065148:	f7f4 fb33 	bl	100597b2 <L2C_get_cid_from_basic_packet_header>
1006514c:	4601      	mov	r1, r0
1006514e:	4620      	mov	r0, r4
10065150:	f7ff ffd6 	bl	10065100 <GAT_clt_get_proc_per_channel>
10065154:	2800      	cmp	r0, #0
10065156:	d008      	beq.n	1006516a <GAT_clt_rcv_corrupted+0x26>
10065158:	7801      	ldrb	r1, [r0, #0]
1006515a:	2218      	movs	r2, #24
1006515c:	430a      	orrs	r2, r1
1006515e:	7002      	strb	r2, [r0, #0]
10065160:	200c      	movs	r0, #12
10065162:	f7fd fb0d 	bl	10062780 <tsk_notify_idx>
10065166:	f7ec fc8e 	bl	10051a86 <BLE_STACK_ProcessRequest>
1006516a:	2000      	movs	r0, #0
1006516c:	bd10      	pop	{r4, pc}

1006516e <GAT_clt_rcv_srv_initiated>:
1006516e:	b5f0      	push	{r4, r5, r6, r7, lr}
10065170:	b085      	sub	sp, #20
10065172:	4604      	mov	r4, r0
10065174:	8805      	ldrh	r5, [r0, #0]
10065176:	8980      	ldrh	r0, [r0, #12]
10065178:	1c46      	adds	r6, r0, #1
1006517a:	4620      	mov	r0, r4
1006517c:	f7ff ffd2 	bl	10065124 <GAT_att_cmn_get_opcode>
10065180:	2823      	cmp	r0, #35	@ 0x23
10065182:	d010      	beq.n	100651a6 <GAT_clt_rcv_srv_initiated+0x38>
10065184:	b2b1      	uxth	r1, r6
10065186:	281b      	cmp	r0, #27
10065188:	d122      	bne.n	100651d0 <GAT_clt_rcv_srv_initiated+0x62>
1006518a:	4620      	mov	r0, r4
1006518c:	f7ef fe1f 	bl	10054dce <ACL_pkt_read_16b>
10065190:	4601      	mov	r1, r0
10065192:	4628      	mov	r0, r5
10065194:	f000 f85c 	bl	10065250 <GAT_clt_check_security>
10065198:	2800      	cmp	r0, #0
1006519a:	d03d      	beq.n	10065218 <GAT_clt_rcv_srv_initiated+0xaa>
1006519c:	4620      	mov	r0, r4
1006519e:	f7ef fdf1 	bl	10054d84 <ACL_pkt_release>
100651a2:	2500      	movs	r5, #0
100651a4:	e050      	b.n	10065248 <GAT_clt_rcv_srv_initiated+0xda>
100651a6:	8867      	ldrh	r7, [r4, #2]
100651a8:	b2b1      	uxth	r1, r6
100651aa:	4620      	mov	r0, r4
100651ac:	42b9      	cmp	r1, r7
100651ae:	d22a      	bcs.n	10065206 <GAT_clt_rcv_srv_initiated+0x98>
100651b0:	f7ef fe0d 	bl	10054dce <ACL_pkt_read_16b>
100651b4:	4601      	mov	r1, r0
100651b6:	4628      	mov	r0, r5
100651b8:	f000 f84a 	bl	10065250 <GAT_clt_check_security>
100651bc:	2800      	cmp	r0, #0
100651be:	d1ed      	bne.n	1006519c <GAT_clt_rcv_srv_initiated+0x2e>
100651c0:	1cb0      	adds	r0, r6, #2
100651c2:	b281      	uxth	r1, r0
100651c4:	4620      	mov	r0, r4
100651c6:	f7ef fe02 	bl	10054dce <ACL_pkt_read_16b>
100651ca:	1830      	adds	r0, r6, r0
100651cc:	1d06      	adds	r6, r0, #4
100651ce:	e7eb      	b.n	100651a8 <GAT_clt_rcv_srv_initiated+0x3a>
100651d0:	4620      	mov	r0, r4
100651d2:	f7ef fdfc 	bl	10054dce <ACL_pkt_read_16b>
100651d6:	4601      	mov	r1, r0
100651d8:	4628      	mov	r0, r5
100651da:	f000 f839 	bl	10065250 <GAT_clt_check_security>
100651de:	2800      	cmp	r0, #0
100651e0:	d024      	beq.n	1006522c <GAT_clt_rcv_srv_initiated+0xbe>
100651e2:	466e      	mov	r6, sp
100651e4:	8075      	strh	r5, [r6, #2]
100651e6:	4620      	mov	r0, r4
100651e8:	f7f4 fae3 	bl	100597b2 <L2C_get_cid_from_basic_packet_header>
100651ec:	80b0      	strh	r0, [r6, #4]
100651ee:	201e      	movs	r0, #30
100651f0:	7030      	strb	r0, [r6, #0]
100651f2:	4630      	mov	r0, r6
100651f4:	f7ff f860 	bl	100642b8 <GAT_att_clt_tx>
100651f8:	4605      	mov	r5, r0
100651fa:	2800      	cmp	r0, #0
100651fc:	d120      	bne.n	10065240 <GAT_clt_rcv_srv_initiated+0xd2>
100651fe:	4620      	mov	r0, r4
10065200:	f7ef fdc0 	bl	10054d84 <ACL_pkt_release>
10065204:	e01c      	b.n	10065240 <GAT_clt_rcv_srv_initiated+0xd2>
10065206:	f7f4 fad4 	bl	100597b2 <L2C_get_cid_from_basic_packet_header>
1006520a:	4602      	mov	r2, r0
1006520c:	200a      	movs	r0, #10
1006520e:	4629      	mov	r1, r5
10065210:	4623      	mov	r3, r4
10065212:	f7fe fb49 	bl	100638a8 <aci_gatt_clt_multi_notification_int_event_push_noinline>
10065216:	e012      	b.n	1006523e <GAT_clt_rcv_srv_initiated+0xd0>
10065218:	4620      	mov	r0, r4
1006521a:	f7f4 faca 	bl	100597b2 <L2C_get_cid_from_basic_packet_header>
1006521e:	4602      	mov	r2, r0
10065220:	200a      	movs	r0, #10
10065222:	4629      	mov	r1, r5
10065224:	4623      	mov	r3, r4
10065226:	f7fe f9a5 	bl	10063574 <aci_gatt_clt_notification_event_push_noinline>
1006522a:	e008      	b.n	1006523e <GAT_clt_rcv_srv_initiated+0xd0>
1006522c:	4620      	mov	r0, r4
1006522e:	f7f4 fac0 	bl	100597b2 <L2C_get_cid_from_basic_packet_header>
10065232:	4602      	mov	r2, r0
10065234:	200a      	movs	r0, #10
10065236:	4629      	mov	r1, r5
10065238:	4623      	mov	r3, r4
1006523a:	f7fe f969 	bl	10063510 <aci_gatt_clt_indication_event_push_noinline>
1006523e:	4605      	mov	r5, r0
10065240:	2d00      	cmp	r5, #0
10065242:	d001      	beq.n	10065248 <GAT_clt_rcv_srv_initiated+0xda>
10065244:	207b      	movs	r0, #123	@ 0x7b
10065246:	43c5      	mvns	r5, r0
10065248:	b2e8      	uxtb	r0, r5
1006524a:	b005      	add	sp, #20
1006524c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10065250 <GAT_clt_check_security>:
10065250:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
10065252:	4604      	mov	r4, r0
10065254:	f000 f822 	bl	1006529c <GAT_clt_find_sec_level_entry_p>
10065258:	4605      	mov	r5, r0
1006525a:	2800      	cmp	r0, #0
1006525c:	d106      	bne.n	1006526c <GAT_clt_check_security+0x1c>
1006525e:	480e      	ldr	r0, [pc, #56]	@ (10065298 <__arm_cp.13_0>)
10065260:	4601      	mov	r1, r0
10065262:	f000 f81b 	bl	1006529c <GAT_clt_find_sec_level_entry_p>
10065266:	4605      	mov	r5, r0
10065268:	2800      	cmp	r0, #0
1006526a:	d002      	beq.n	10065272 <GAT_clt_check_security+0x22>
1006526c:	7828      	ldrb	r0, [r5, #0]
1006526e:	2802      	cmp	r0, #2
10065270:	d201      	bcs.n	10065276 <GAT_clt_check_security+0x26>
10065272:	2000      	movs	r0, #0
10065274:	e00d      	b.n	10065292 <GAT_clt_check_security+0x42>
10065276:	a903      	add	r1, sp, #12
10065278:	aa02      	add	r2, sp, #8
1006527a:	ab01      	add	r3, sp, #4
1006527c:	4620      	mov	r0, r4
1006527e:	f7fd f8a6 	bl	100623ce <smp_sap_get_security_level>
10065282:	2800      	cmp	r0, #0
10065284:	d104      	bne.n	10065290 <GAT_clt_check_security+0x40>
10065286:	7828      	ldrb	r0, [r5, #0]
10065288:	a902      	add	r1, sp, #8
1006528a:	7809      	ldrb	r1, [r1, #0]
1006528c:	4281      	cmp	r1, r0
1006528e:	d2f0      	bcs.n	10065272 <GAT_clt_check_security+0x22>
10065290:	20c0      	movs	r0, #192	@ 0xc0
10065292:	b004      	add	sp, #16
10065294:	bdb0      	pop	{r4, r5, r7, pc}
10065296:	46c0      	nop			@ (mov r8, r8)

10065298 <__arm_cp.13_0>:
10065298:	0000ffff 	.word	0x0000ffff

1006529c <GAT_clt_find_sec_level_entry_p>:
1006529c:	4a07      	ldr	r2, [pc, #28]	@ (100652bc <__arm_cp.15_0>)
1006529e:	6812      	ldr	r2, [r2, #0]
100652a0:	3258      	adds	r2, #88	@ 0x58
100652a2:	6812      	ldr	r2, [r2, #0]
100652a4:	2a00      	cmp	r2, #0
100652a6:	d007      	beq.n	100652b8 <GAT_clt_find_sec_level_entry_p+0x1c>
100652a8:	8893      	ldrh	r3, [r2, #4]
100652aa:	4283      	cmp	r3, r0
100652ac:	d102      	bne.n	100652b4 <GAT_clt_find_sec_level_entry_p+0x18>
100652ae:	8853      	ldrh	r3, [r2, #2]
100652b0:	428b      	cmp	r3, r1
100652b2:	d001      	beq.n	100652b8 <GAT_clt_find_sec_level_entry_p+0x1c>
100652b4:	3208      	adds	r2, #8
100652b6:	e7f4      	b.n	100652a2 <GAT_clt_find_sec_level_entry_p+0x6>
100652b8:	4610      	mov	r0, r2
100652ba:	4770      	bx	lr

100652bc <__arm_cp.15_0>:
100652bc:	20002428 	.word	0x20002428

100652c0 <GAT_clt_exec_empty>:
100652c0:	4770      	bx	lr

100652c2 <ACL_pkt_read_8b>:
100652c2:	b51c      	push	{r2, r3, r4, lr}
100652c4:	291f      	cmp	r1, #31
100652c6:	d803      	bhi.n	100652d0 <ACL_pkt_read_8b+0xe>
100652c8:	aa01      	add	r2, sp, #4
100652ca:	8011      	strh	r1, [r2, #0]
100652cc:	6840      	ldr	r0, [r0, #4]
100652ce:	e005      	b.n	100652dc <ACL_pkt_read_8b+0x1a>
100652d0:	6840      	ldr	r0, [r0, #4]
100652d2:	ac01      	add	r4, sp, #4
100652d4:	4622      	mov	r2, r4
100652d6:	f7fb fd1c 	bl	10060d12 <Mem_Buff_get_buff_off>
100652da:	8821      	ldrh	r1, [r4, #0]
100652dc:	1840      	adds	r0, r0, r1
100652de:	7900      	ldrb	r0, [r0, #4]
100652e0:	bd1c      	pop	{r2, r3, r4, pc}

100652e2 <GAT_att_clt_read_type_get_len>:
100652e2:	b580      	push	{r7, lr}
100652e4:	8981      	ldrh	r1, [r0, #12]
100652e6:	1c49      	adds	r1, r1, #1
100652e8:	b289      	uxth	r1, r1
100652ea:	f7ff ffea 	bl	100652c2 <ACL_pkt_read_8b>
100652ee:	bd80      	pop	{r7, pc}

100652f0 <L2C_cos_process_cfc_mode_command_ucfg_weak>:
100652f0:	2000      	movs	r0, #0
100652f2:	4770      	bx	lr

100652f4 <L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak>:
100652f4:	2000      	movs	r0, #0
100652f6:	4770      	bx	lr

100652f8 <l2c_cos_hndl_incoming_le_frame_ucfg_weak>:
100652f8:	b580      	push	{r7, lr}
100652fa:	6841      	ldr	r1, [r0, #4]
100652fc:	7800      	ldrb	r0, [r0, #0]
100652fe:	f7f4 fa53 	bl	100597a8 <l2c_release_unexpected_acl_packet>
10065302:	2000      	movs	r0, #0
10065304:	bd80      	pop	{r7, pc}

10065306 <l2c_cos_sdu_reassembly_tsk_ucfg_weak>:
10065306:	4770      	bx	lr

10065308 <llc_big_brc_mem_alloc_ucfg_weak>:
10065308:	4770      	bx	lr

1006530a <llc_big_sync_mem_alloc_ucfg_weak>:
1006530a:	4770      	bx	lr

1006530c <llc_cig_cmn_mem_alloc_ucfg_weak>:
1006530c:	4770      	bx	lr

1006530e <llc_conn_cancel_slot>:
1006530e:	b570      	push	{r4, r5, r6, lr}
10065310:	4604      	mov	r4, r0
10065312:	2030      	movs	r0, #48	@ 0x30
10065314:	5c25      	ldrb	r5, [r4, r0]
10065316:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
10065318:	f7f4 fe03 	bl	10059f22 <llc_cig_cmn_terminate_cises_on_acl_ucfg_weak>
1006531c:	20ff      	movs	r0, #255	@ 0xff
1006531e:	3012      	adds	r0, #18
10065320:	1826      	adds	r6, r4, r0
10065322:	4628      	mov	r0, r5
10065324:	f7f6 fbbc 	bl	1005baa0 <llc_pscan_wr_check_pawr_active_ucfg_weak>
10065328:	2800      	cmp	r0, #0
1006532a:	d004      	beq.n	10065336 <llc_conn_cancel_slot+0x28>
1006532c:	3430      	adds	r4, #48	@ 0x30
1006532e:	7c60      	ldrb	r0, [r4, #17]
10065330:	2101      	movs	r1, #1
10065332:	f7fb fa69 	bl	10060808 <LL_sched_set_per_state>
10065336:	2000      	movs	r0, #0
10065338:	7030      	strb	r0, [r6, #0]
1006533a:	2015      	movs	r0, #21
1006533c:	f7fd fa20 	bl	10062780 <tsk_notify_idx>
10065340:	f7ec fba1 	bl	10051a86 <BLE_STACK_ProcessRequest>
10065344:	bd70      	pop	{r4, r5, r6, pc}

10065346 <llc_conn_program_slot>:
10065346:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10065348:	4604      	mov	r4, r0
1006534a:	f7ee fae8 	bl	1005391e <BLEPLAT_CNTR_PacketGetDataPtr>
1006534e:	4605      	mov	r5, r0
10065350:	2101      	movs	r1, #1
10065352:	4620      	mov	r0, r4
10065354:	f7f5 f886 	bl	1005a464 <llc_conn_get_ctrl_pdu_data_p>
10065358:	4626      	mov	r6, r4
1006535a:	362c      	adds	r6, #44	@ 0x2c
1006535c:	4621      	mov	r1, r4
1006535e:	3128      	adds	r1, #40	@ 0x28
10065360:	428d      	cmp	r5, r1
10065362:	d010      	beq.n	10065386 <llc_conn_program_slot+0x40>
10065364:	4285      	cmp	r5, r0
10065366:	d00e      	beq.n	10065386 <llc_conn_program_slot+0x40>
10065368:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
1006536a:	4620      	mov	r0, r4
1006536c:	f7f4 ffce 	bl	1005a30c <llc_conn_copy_tx_data_packet>
10065370:	2101      	movs	r1, #1
10065372:	4620      	mov	r0, r4
10065374:	f7f5 f87c 	bl	1005a470 <llc_conn_get_enc_on>
10065378:	2801      	cmp	r0, #1
1006537a:	d104      	bne.n	10065386 <llc_conn_program_slot+0x40>
1006537c:	7868      	ldrb	r0, [r5, #1]
1006537e:	2800      	cmp	r0, #0
10065380:	d001      	beq.n	10065386 <llc_conn_program_slot+0x40>
10065382:	1d00      	adds	r0, r0, #4
10065384:	7068      	strb	r0, [r5, #1]
10065386:	4625      	mov	r5, r4
10065388:	35d0      	adds	r5, #208	@ 0xd0
1006538a:	7830      	ldrb	r0, [r6, #0]
1006538c:	2803      	cmp	r0, #3
1006538e:	d113      	bne.n	100653b8 <llc_conn_program_slot+0x72>
10065390:	a801      	add	r0, sp, #4
10065392:	f7fb f837 	bl	10060404 <LL_sched_anchorstretch>
10065396:	2801      	cmp	r0, #1
10065398:	d006      	beq.n	100653a8 <llc_conn_program_slot+0x62>
1006539a:	2800      	cmp	r0, #0
1006539c:	d10a      	bne.n	100653b4 <llc_conn_program_slot+0x6e>
1006539e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
100653a0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
100653a2:	0049      	lsls	r1, r1, #1
100653a4:	1808      	adds	r0, r1, r0
100653a6:	e006      	b.n	100653b6 <llc_conn_program_slot+0x70>
100653a8:	6d21      	ldr	r1, [r4, #80]	@ 0x50
100653aa:	9801      	ldr	r0, [sp, #4]
100653ac:	4288      	cmp	r0, r1
100653ae:	d302      	bcc.n	100653b6 <llc_conn_program_slot+0x70>
100653b0:	4608      	mov	r0, r1
100653b2:	e000      	b.n	100653b6 <llc_conn_program_slot+0x70>
100653b4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
100653b6:	6068      	str	r0, [r5, #4]
100653b8:	4620      	mov	r0, r4
100653ba:	f7f5 f887 	bl	1005a4cc <llc_conn_guard_time_for_close_conn_event>
100653be:	4620      	mov	r0, r4
100653c0:	f7f6 f948 	bl	1005b654 <llc_conn_update_receive_window>
100653c4:	6829      	ldr	r1, [r5, #0]
100653c6:	3414      	adds	r4, #20
100653c8:	4620      	mov	r0, r4
100653ca:	f7ee fbf0 	bl	10053bae <BLEPLAT_CNTR_SetRcvLen>
100653ce:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

100653d0 <llc_conn_skip_slot>:
100653d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100653d2:	b089      	sub	sp, #36	@ 0x24
100653d4:	2242      	movs	r2, #66	@ 0x42
100653d6:	5a85      	ldrh	r5, [r0, r2]
100653d8:	6c42      	ldr	r2, [r0, #68]	@ 0x44
100653da:	9201      	str	r2, [sp, #4]
100653dc:	1851      	adds	r1, r2, r1
100653de:	9106      	str	r1, [sp, #24]
100653e0:	2191      	movs	r1, #145	@ 0x91
100653e2:	0049      	lsls	r1, r1, #1
100653e4:	1841      	adds	r1, r0, r1
100653e6:	9102      	str	r1, [sp, #8]
100653e8:	4601      	mov	r1, r0
100653ea:	3142      	adds	r1, #66	@ 0x42
100653ec:	9105      	str	r1, [sp, #20]
100653ee:	4601      	mov	r1, r0
100653f0:	312d      	adds	r1, #45	@ 0x2d
100653f2:	9103      	str	r1, [sp, #12]
100653f4:	9007      	str	r0, [sp, #28]
100653f6:	309a      	adds	r0, #154	@ 0x9a
100653f8:	9004      	str	r0, [sp, #16]
100653fa:	2000      	movs	r0, #0
100653fc:	9008      	str	r0, [sp, #32]
100653fe:	b2a9      	uxth	r1, r5
10065400:	2201      	movs	r2, #1
10065402:	9e07      	ldr	r6, [sp, #28]
10065404:	4630      	mov	r0, r6
10065406:	f7f5 fb06 	bl	1005aa16 <llc_conn_calc_skip_ucfg_weak>
1006540a:	6cf1      	ldr	r1, [r6, #76]	@ 0x4c
1006540c:	4341      	muls	r1, r0
1006540e:	6c72      	ldr	r2, [r6, #68]	@ 0x44
10065410:	1854      	adds	r4, r2, r1
10065412:	6474      	str	r4, [r6, #68]	@ 0x44
10065414:	9908      	ldr	r1, [sp, #32]
10065416:	1841      	adds	r1, r0, r1
10065418:	9108      	str	r1, [sp, #32]
1006541a:	182d      	adds	r5, r5, r0
1006541c:	b2af      	uxth	r7, r5
1006541e:	4630      	mov	r0, r6
10065420:	4639      	mov	r1, r7
10065422:	f7f5 fb9b 	bl	1005ab5c <llc_conn_check_instant_and_set_params>
10065426:	4606      	mov	r6, r0
10065428:	2800      	cmp	r0, #0
1006542a:	d102      	bne.n	10065432 <llc_conn_skip_slot+0x62>
1006542c:	9806      	ldr	r0, [sp, #24]
1006542e:	1a20      	subs	r0, r4, r0
10065430:	d4e5      	bmi.n	100653fe <llc_conn_skip_slot+0x2e>
10065432:	9c05      	ldr	r4, [sp, #20]
10065434:	8820      	ldrh	r0, [r4, #0]
10065436:	42b8      	cmp	r0, r7
10065438:	d907      	bls.n	1006544a <llc_conn_skip_slot+0x7a>
1006543a:	2009      	movs	r0, #9
1006543c:	0140      	lsls	r0, r0, #5
1006543e:	9907      	ldr	r1, [sp, #28]
10065440:	1809      	adds	r1, r1, r0
10065442:	9802      	ldr	r0, [sp, #8]
10065444:	8800      	ldrh	r0, [r0, #0]
10065446:	f7f6 fb81 	bl	1005bb4c <llc_subrate_new_sr_base_event_ucfg_weak>
1006544a:	8025      	strh	r5, [r4, #0]
1006544c:	2e00      	cmp	r6, #0
1006544e:	9d08      	ldr	r5, [sp, #32]
10065450:	d118      	bne.n	10065484 <llc_conn_skip_slot+0xb4>
10065452:	9807      	ldr	r0, [sp, #28]
10065454:	6c41      	ldr	r1, [r0, #68]	@ 0x44
10065456:	9a01      	ldr	r2, [sp, #4]
10065458:	1a8f      	subs	r7, r1, r2
1006545a:	4639      	mov	r1, r7
1006545c:	f7f5 fc12 	bl	1005ac84 <llc_conn_check_supervision_timer>
10065460:	4606      	mov	r6, r0
10065462:	2800      	cmp	r0, #0
10065464:	d10e      	bne.n	10065484 <llc_conn_skip_slot+0xb4>
10065466:	9807      	ldr	r0, [sp, #28]
10065468:	4639      	mov	r1, r7
1006546a:	f7f5 fb41 	bl	1005aaf0 <llc_conn_check_ctrl_proc_rsp_timer>
1006546e:	4606      	mov	r6, r0
10065470:	2800      	cmp	r0, #0
10065472:	d107      	bne.n	10065484 <llc_conn_skip_slot+0xb4>
10065474:	9807      	ldr	r0, [sp, #28]
10065476:	4639      	mov	r1, r7
10065478:	462a      	mov	r2, r5
1006547a:	f7f6 f875 	bl	1005b568 <llc_conn_set_taskslot_params>
1006547e:	4606      	mov	r6, r0
10065480:	2800      	cmp	r0, #0
10065482:	d007      	beq.n	10065494 <llc_conn_skip_slot+0xc4>
10065484:	9c03      	ldr	r4, [sp, #12]
10065486:	7d20      	ldrb	r0, [r4, #20]
10065488:	f7fb f9b4 	bl	100607f4 <LL_sched_delete_taskslot>
1006548c:	7026      	strb	r6, [r4, #0]
1006548e:	2000      	movs	r0, #0
10065490:	9904      	ldr	r1, [sp, #16]
10065492:	8008      	strh	r0, [r1, #0]
10065494:	4628      	mov	r0, r5
10065496:	b009      	add	sp, #36	@ 0x24
10065498:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1006549c <llc_conn_isr>:
1006549c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006549e:	b099      	sub	sp, #100	@ 0x64
100654a0:	4607      	mov	r7, r0
100654a2:	8e40      	ldrh	r0, [r0, #50]	@ 0x32
100654a4:	1c40      	adds	r0, r0, #1
100654a6:	8678      	strh	r0, [r7, #50]	@ 0x32
100654a8:	2041      	movs	r0, #65	@ 0x41
100654aa:	5c3d      	ldrb	r5, [r7, r0]
100654ac:	202d      	movs	r0, #45	@ 0x2d
100654ae:	5c38      	ldrb	r0, [r7, r0]
100654b0:	2800      	cmp	r0, #0
100654b2:	d008      	beq.n	100654c6 <llc_conn_isr+0x2a>
100654b4:	f7ed f9da 	bl	1005286c <BLEPLAT_ClearRadioTimerValue>
100654b8:	4628      	mov	r0, r5
100654ba:	f7fb f99b 	bl	100607f4 <LL_sched_delete_taskslot>
100654be:	4628      	mov	r0, r5
100654c0:	f7fa ffa8 	bl	10060414 <LL_sched_engine>
100654c4:	e2a5      	b.n	10065a12 <__arm_cp.0_5+0x182>
100654c6:	2021      	movs	r0, #33	@ 0x21
100654c8:	00c0      	lsls	r0, r0, #3
100654ca:	183e      	adds	r6, r7, r0
100654cc:	4638      	mov	r0, r7
100654ce:	302c      	adds	r0, #44	@ 0x2c
100654d0:	900d      	str	r0, [sp, #52]	@ 0x34
100654d2:	463c      	mov	r4, r7
100654d4:	3480      	adds	r4, #128	@ 0x80
100654d6:	4638      	mov	r0, r7
100654d8:	30d0      	adds	r0, #208	@ 0xd0
100654da:	9007      	str	r0, [sp, #28]
100654dc:	48ea      	ldr	r0, [pc, #936]	@ (10065888 <__arm_cp.0_3>)
100654de:	6800      	ldr	r0, [r0, #0]
100654e0:	f7ee f9e0 	bl	100538a4 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
100654e4:	9009      	str	r0, [sp, #36]	@ 0x24
100654e6:	2800      	cmp	r0, #0
100654e8:	940b      	str	r4, [sp, #44]	@ 0x2c
100654ea:	960a      	str	r6, [sp, #40]	@ 0x28
100654ec:	9508      	str	r5, [sp, #32]
100654ee:	d040      	beq.n	10065572 <llc_conn_isr+0xd6>
100654f0:	463e      	mov	r6, r7
100654f2:	3614      	adds	r6, #20
100654f4:	4630      	mov	r0, r6
100654f6:	f7ee fa05 	bl	10053904 <BLEPLAT_CNTR_PacketClrPllTrig>
100654fa:	4630      	mov	r0, r6
100654fc:	f7ee f9f6 	bl	100538ec <BLEPLAT_CNTR_PacketClrIncChan>
10065500:	4620      	mov	r0, r4
10065502:	3008      	adds	r0, #8
10065504:	900c      	str	r0, [sp, #48]	@ 0x30
10065506:	7a20      	ldrb	r0, [r4, #8]
10065508:	0780      	lsls	r0, r0, #30
1006550a:	d445      	bmi.n	10065598 <llc_conn_isr+0xfc>
1006550c:	4638      	mov	r0, r7
1006550e:	f7ee fa06 	bl	1005391e <BLEPLAT_CNTR_PacketGetDataPtr>
10065512:	4605      	mov	r5, r0
10065514:	463c      	mov	r4, r7
10065516:	3428      	adds	r4, #40	@ 0x28
10065518:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006551a:	7800      	ldrb	r0, [r0, #0]
1006551c:	2100      	movs	r1, #0
1006551e:	9106      	str	r1, [sp, #24]
10065520:	2803      	cmp	r0, #3
10065522:	d000      	beq.n	10065526 <llc_conn_isr+0x8a>
10065524:	e0a6      	b.n	10065674 <llc_conn_isr+0x1d8>
10065526:	4630      	mov	r0, r6
10065528:	f7ee f9f9 	bl	1005391e <BLEPLAT_CNTR_PacketGetDataPtr>
1006552c:	4603      	mov	r3, r0
1006552e:	42a5      	cmp	r5, r4
10065530:	d015      	beq.n	1006555e <llc_conn_isr+0xc2>
10065532:	7829      	ldrb	r1, [r5, #0]
10065534:	2003      	movs	r0, #3
10065536:	460a      	mov	r2, r1
10065538:	4002      	ands	r2, r0
1006553a:	2a03      	cmp	r2, #3
1006553c:	d10a      	bne.n	10065554 <llc_conn_isr+0xb8>
1006553e:	0689      	lsls	r1, r1, #26
10065540:	d400      	bmi.n	10065544 <llc_conn_isr+0xa8>
10065542:	2002      	movs	r0, #2
10065544:	5c28      	ldrb	r0, [r5, r0]
10065546:	2806      	cmp	r0, #6
10065548:	d104      	bne.n	10065554 <llc_conn_isr+0xb8>
1006554a:	4638      	mov	r0, r7
1006554c:	9305      	str	r3, [sp, #20]
1006554e:	f7f4 fec5 	bl	1005a2dc <llc_conn_clr_rx_acl_blocked>
10065552:	9b05      	ldr	r3, [sp, #20]
10065554:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10065556:	6810      	ldr	r0, [r2, #0]
10065558:	2140      	movs	r1, #64	@ 0x40
1006555a:	4301      	orrs	r1, r0
1006555c:	6011      	str	r1, [r2, #0]
1006555e:	7818      	ldrb	r0, [r3, #0]
10065560:	7829      	ldrb	r1, [r5, #0]
10065562:	4301      	orrs	r1, r0
10065564:	06c8      	lsls	r0, r1, #27
10065566:	d474      	bmi.n	10065652 <llc_conn_isr+0x1b6>
10065568:	980c      	ldr	r0, [sp, #48]	@ 0x30
1006556a:	7800      	ldrb	r0, [r0, #0]
1006556c:	06c0      	lsls	r0, r0, #27
1006556e:	d57d      	bpl.n	1006566c <llc_conn_isr+0x1d0>
10065570:	e080      	b.n	10065674 <llc_conn_isr+0x1d8>
10065572:	4638      	mov	r0, r7
10065574:	f7ee f9c6 	bl	10053904 <BLEPLAT_CNTR_PacketClrPllTrig>
10065578:	4638      	mov	r0, r7
1006557a:	f7ee f9b7 	bl	100538ec <BLEPLAT_CNTR_PacketClrIncChan>
1006557e:	a80e      	add	r0, sp, #56	@ 0x38
10065580:	2600      	movs	r6, #0
10065582:	7786      	strb	r6, [r0, #30]
10065584:	7606      	strb	r6, [r0, #24]
10065586:	7746      	strb	r6, [r0, #29]
10065588:	4cbf      	ldr	r4, [pc, #764]	@ (10065888 <__arm_cp.0_3>)
1006558a:	6820      	ldr	r0, [r4, #0]
1006558c:	f7ee f97e 	bl	1005388c <BLEPLAT_CNTR_IntGetIntStatusTimeout>
10065590:	2800      	cmp	r0, #0
10065592:	d010      	beq.n	100655b6 <llc_conn_isr+0x11a>
10065594:	2501      	movs	r5, #1
10065596:	e014      	b.n	100655c2 <llc_conn_isr+0x126>
10065598:	463d      	mov	r5, r7
1006559a:	35a8      	adds	r5, #168	@ 0xa8
1006559c:	f7ed f966 	bl	1005286c <BLEPLAT_ClearRadioTimerValue>
100655a0:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
100655a2:	7d70      	ldrb	r0, [r6, #21]
100655a4:	f7fb f926 	bl	100607f4 <LL_sched_delete_taskslot>
100655a8:	2000      	movs	r0, #0
100655aa:	8028      	strh	r0, [r5, #0]
100655ac:	2113      	movs	r1, #19
100655ae:	7071      	strb	r1, [r6, #1]
100655b0:	8360      	strh	r0, [r4, #26]
100655b2:	4634      	mov	r4, r6
100655b4:	e1e5      	b.n	10065982 <__arm_cp.0_5+0xf2>
100655b6:	6820      	ldr	r0, [r4, #0]
100655b8:	f7ee f921 	bl	100537fe <BLEPLAT_CNTR_IntGetIntStatusLenErr>
100655bc:	4605      	mov	r5, r0
100655be:	1e40      	subs	r0, r0, #1
100655c0:	4185      	sbcs	r5, r0
100655c2:	a80e      	add	r0, sp, #56	@ 0x38
100655c4:	76c5      	strb	r5, [r0, #27]
100655c6:	6820      	ldr	r0, [r4, #0]
100655c8:	f7ee f977 	bl	100538ba <BLEPLAT_CNTR_IntGetIntStatusTxOk>
100655cc:	9006      	str	r0, [sp, #24]
100655ce:	900f      	str	r0, [sp, #60]	@ 0x3c
100655d0:	2d00      	cmp	r5, #0
100655d2:	d01f      	beq.n	10065614 <llc_conn_isr+0x178>
100655d4:	f7ed f94a 	bl	1005286c <BLEPLAT_ClearRadioTimerValue>
100655d8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
100655da:	68e8      	ldr	r0, [r5, #12]
100655dc:	2800      	cmp	r0, #0
100655de:	d002      	beq.n	100655e6 <llc_conn_isr+0x14a>
100655e0:	88c1      	ldrh	r1, [r0, #6]
100655e2:	1c49      	adds	r1, r1, #1
100655e4:	80c1      	strh	r1, [r0, #6]
100655e6:	6928      	ldr	r0, [r5, #16]
100655e8:	2800      	cmp	r0, #0
100655ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
100655ec:	9e06      	ldr	r6, [sp, #24]
100655ee:	d00a      	beq.n	10065606 <llc_conn_isr+0x16a>
100655f0:	980d      	ldr	r0, [sp, #52]	@ 0x34
100655f2:	7d40      	ldrb	r0, [r0, #21]
100655f4:	f7ee fbd4 	bl	10053da0 <BLEPLAT_CNTR_SmGetRemapChan>
100655f8:	0040      	lsls	r0, r0, #1
100655fa:	6929      	ldr	r1, [r5, #16]
100655fc:	1808      	adds	r0, r1, r0
100655fe:	2194      	movs	r1, #148	@ 0x94
10065600:	5a42      	ldrh	r2, [r0, r1]
10065602:	1c52      	adds	r2, r2, #1
10065604:	5242      	strh	r2, [r0, r1]
10065606:	a80e      	add	r0, sp, #56	@ 0x38
10065608:	2501      	movs	r5, #1
1006560a:	7605      	strb	r5, [r0, #24]
1006560c:	68a0      	ldr	r0, [r4, #8]
1006560e:	3408      	adds	r4, #8
10065610:	2300      	movs	r3, #0
10065612:	e0b9      	b.n	10065788 <llc_conn_isr+0x2ec>
10065614:	6820      	ldr	r0, [r4, #0]
10065616:	f7ee f92e 	bl	10053876 <BLEPLAT_CNTR_IntGetIntStatusRxOk>
1006561a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1006561c:	7a11      	ldrb	r1, [r2, #8]
1006561e:	094b      	lsrs	r3, r1, #5
10065620:	2501      	movs	r5, #1
10065622:	4629      	mov	r1, r5
10065624:	4399      	bics	r1, r3
10065626:	ab0e      	add	r3, sp, #56	@ 0x38
10065628:	7699      	strb	r1, [r3, #26]
1006562a:	9005      	str	r0, [sp, #20]
1006562c:	900e      	str	r0, [sp, #56]	@ 0x38
1006562e:	6820      	ldr	r0, [r4, #0]
10065630:	4614      	mov	r4, r2
10065632:	3408      	adds	r4, #8
10065634:	f7ee f8bf 	bl	100537b6 <BLEPLAT_CNTR_IntGetIntStatusCrcErr>
10065638:	2800      	cmp	r0, #0
1006563a:	d06e      	beq.n	1006571a <llc_conn_isr+0x27e>
1006563c:	7820      	ldrb	r0, [r4, #0]
1006563e:	06c0      	lsls	r0, r0, #27
10065640:	9704      	str	r7, [sp, #16]
10065642:	d479      	bmi.n	10065738 <llc_conn_isr+0x29c>
10065644:	f7ee f87d 	bl	10053742 <BLEPLAT_CNTR_GlobEnableBlue>
10065648:	6820      	ldr	r0, [r4, #0]
1006564a:	2110      	movs	r1, #16
1006564c:	4301      	orrs	r1, r0
1006564e:	6021      	str	r1, [r4, #0]
10065650:	e076      	b.n	10065740 <llc_conn_isr+0x2a4>
10065652:	9807      	ldr	r0, [sp, #28]
10065654:	6840      	ldr	r0, [r0, #4]
10065656:	9005      	str	r0, [sp, #20]
10065658:	f7ed f8c7 	bl	100527ea <BLEPLAT_GetCurrentSysTime>
1006565c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
1006565e:	1a08      	subs	r0, r1, r0
10065660:	9905      	ldr	r1, [sp, #20]
10065662:	1840      	adds	r0, r0, r1
10065664:	d402      	bmi.n	1006566c <llc_conn_isr+0x1d0>
10065666:	6f79      	ldr	r1, [r7, #116]	@ 0x74
10065668:	4288      	cmp	r0, r1
1006566a:	d203      	bcs.n	10065674 <llc_conn_isr+0x1d8>
1006566c:	f7ed f8fe 	bl	1005286c <BLEPLAT_ClearRadioTimerValue>
10065670:	2001      	movs	r0, #1
10065672:	9006      	str	r0, [sp, #24]
10065674:	4638      	mov	r0, r7
10065676:	f7f4 ff22 	bl	1005a4be <llc_conn_get_tx_ctrl_pdu_state>
1006567a:	2802      	cmp	r0, #2
1006567c:	d13d      	bne.n	100656fa <llc_conn_isr+0x25e>
1006567e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10065680:	6940      	ldr	r0, [r0, #20]
10065682:	6800      	ldr	r0, [r0, #0]
10065684:	06c1      	lsls	r1, r0, #27
10065686:	d415      	bmi.n	100656b4 <llc_conn_isr+0x218>
10065688:	0640      	lsls	r0, r0, #25
1006568a:	d536      	bpl.n	100656fa <llc_conn_isr+0x25e>
1006568c:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006568e:	7d40      	ldrb	r0, [r0, #21]
10065690:	f7ee fac5 	bl	10053c1e <BLEPLAT_CNTR_SmEncOff>
10065694:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10065696:	6958      	ldr	r0, [r3, #20]
10065698:	6801      	ldr	r1, [r0, #0]
1006569a:	2240      	movs	r2, #64	@ 0x40
1006569c:	4391      	bics	r1, r2
1006569e:	6001      	str	r1, [r0, #0]
100656a0:	6898      	ldr	r0, [r3, #8]
100656a2:	2108      	movs	r1, #8
100656a4:	4388      	bics	r0, r1
100656a6:	6098      	str	r0, [r3, #8]
100656a8:	2012      	movs	r0, #18
100656aa:	f7fd f869 	bl	10062780 <tsk_notify_idx>
100656ae:	f7ec f9ea 	bl	10051a86 <BLE_STACK_ProcessRequest>
100656b2:	e022      	b.n	100656fa <llc_conn_isr+0x25e>
100656b4:	9505      	str	r5, [sp, #20]
100656b6:	2000      	movs	r0, #0
100656b8:	900f      	str	r0, [sp, #60]	@ 0x3c
100656ba:	900e      	str	r0, [sp, #56]	@ 0x38
100656bc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
100656be:	7d68      	ldrb	r0, [r5, #21]
100656c0:	f7ee fac1 	bl	10053c46 <BLEPLAT_CNTR_SmEncOn>
100656c4:	7d68      	ldrb	r0, [r5, #21]
100656c6:	a90e      	add	r1, sp, #56	@ 0x38
100656c8:	f7ee fc8e 	bl	10053fe8 <BLEPLAT_CNTR_SmSetRxCount>
100656cc:	7828      	ldrb	r0, [r5, #0]
100656ce:	2803      	cmp	r0, #3
100656d0:	d103      	bne.n	100656da <llc_conn_isr+0x23e>
100656d2:	980d      	ldr	r0, [sp, #52]	@ 0x34
100656d4:	7d40      	ldrb	r0, [r0, #21]
100656d6:	f7ee fcaa 	bl	1005402e <BLEPLAT_CNTR_SmSetRxCountDirectionBit>
100656da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
100656dc:	6958      	ldr	r0, [r3, #20]
100656de:	6801      	ldr	r1, [r0, #0]
100656e0:	2210      	movs	r2, #16
100656e2:	4391      	bics	r1, r2
100656e4:	6001      	str	r1, [r0, #0]
100656e6:	6898      	ldr	r0, [r3, #8]
100656e8:	2108      	movs	r1, #8
100656ea:	4301      	orrs	r1, r0
100656ec:	6099      	str	r1, [r3, #8]
100656ee:	2012      	movs	r0, #18
100656f0:	f7fd f846 	bl	10062780 <tsk_notify_idx>
100656f4:	f7ec f9c7 	bl	10051a86 <BLE_STACK_ProcessRequest>
100656f8:	9d05      	ldr	r5, [sp, #20]
100656fa:	42a5      	cmp	r5, r4
100656fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
100656fe:	d001      	beq.n	10065704 <llc_conn_isr+0x268>
10065700:	8a88      	ldrh	r0, [r1, #20]
10065702:	82c8      	strh	r0, [r1, #22]
10065704:	9806      	ldr	r0, [sp, #24]
10065706:	2800      	cmp	r0, #0
10065708:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
1006570a:	d000      	beq.n	1006570e <llc_conn_isr+0x272>
1006570c:	e136      	b.n	1006597c <__arm_cp.0_5+0xec>
1006570e:	9807      	ldr	r0, [sp, #28]
10065710:	6801      	ldr	r1, [r0, #0]
10065712:	4630      	mov	r0, r6
10065714:	f7ee fa4b 	bl	10053bae <BLEPLAT_CNTR_SetRcvLen>
10065718:	e135      	b.n	10065986 <__arm_cp.0_5+0xf6>
1006571a:	485b      	ldr	r0, [pc, #364]	@ (10065888 <__arm_cp.0_3>)
1006571c:	6800      	ldr	r0, [r0, #0]
1006571e:	f7ee f862 	bl	100537e6 <BLEPLAT_CNTR_IntGetIntStatusEncErr>
10065722:	2800      	cmp	r0, #0
10065724:	d026      	beq.n	10065774 <llc_conn_isr+0x2d8>
10065726:	9805      	ldr	r0, [sp, #20]
10065728:	2800      	cmp	r0, #0
1006572a:	d023      	beq.n	10065774 <llc_conn_isr+0x2d8>
1006572c:	f7ed f89e 	bl	1005286c <BLEPLAT_ClearRadioTimerValue>
10065730:	a80e      	add	r0, sp, #56	@ 0x38
10065732:	233d      	movs	r3, #61	@ 0x3d
10065734:	7783      	strb	r3, [r0, #30]
10065736:	e023      	b.n	10065780 <llc_conn_isr+0x2e4>
10065738:	f7ed f898 	bl	1005286c <BLEPLAT_ClearRadioTimerValue>
1006573c:	a80e      	add	r0, sp, #56	@ 0x38
1006573e:	7605      	strb	r5, [r0, #24]
10065740:	4637      	mov	r7, r6
10065742:	980a      	ldr	r0, [sp, #40]	@ 0x28
10065744:	68c0      	ldr	r0, [r0, #12]
10065746:	2800      	cmp	r0, #0
10065748:	d002      	beq.n	10065750 <llc_conn_isr+0x2b4>
1006574a:	8841      	ldrh	r1, [r0, #2]
1006574c:	1c49      	adds	r1, r1, #1
1006574e:	8041      	strh	r1, [r0, #2]
10065750:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10065752:	6930      	ldr	r0, [r6, #16]
10065754:	2800      	cmp	r0, #0
10065756:	d00a      	beq.n	1006576e <llc_conn_isr+0x2d2>
10065758:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006575a:	7d40      	ldrb	r0, [r0, #21]
1006575c:	f7ee fb20 	bl	10053da0 <BLEPLAT_CNTR_SmGetRemapChan>
10065760:	0040      	lsls	r0, r0, #1
10065762:	6931      	ldr	r1, [r6, #16]
10065764:	1808      	adds	r0, r1, r0
10065766:	214a      	movs	r1, #74	@ 0x4a
10065768:	5a42      	ldrh	r2, [r0, r1]
1006576a:	1c52      	adds	r2, r2, #1
1006576c:	5242      	strh	r2, [r0, r1]
1006576e:	463b      	mov	r3, r7
10065770:	9f04      	ldr	r7, [sp, #16]
10065772:	e005      	b.n	10065780 <llc_conn_isr+0x2e4>
10065774:	6820      	ldr	r0, [r4, #0]
10065776:	2110      	movs	r1, #16
10065778:	4388      	bics	r0, r1
1006577a:	6020      	str	r0, [r4, #0]
1006577c:	2300      	movs	r3, #0
1006577e:	461d      	mov	r5, r3
10065780:	9e06      	ldr	r6, [sp, #24]
10065782:	6821      	ldr	r1, [r4, #0]
10065784:	2020      	movs	r0, #32
10065786:	4308      	orrs	r0, r1
10065788:	4271      	negs	r1, r6
1006578a:	4171      	adcs	r1, r6
1006578c:	0189      	lsls	r1, r1, #6
1006578e:	2240      	movs	r2, #64	@ 0x40
10065790:	4390      	bics	r0, r2
10065792:	1840      	adds	r0, r0, r1
10065794:	940c      	str	r4, [sp, #48]	@ 0x30
10065796:	6020      	str	r0, [r4, #0]
10065798:	2d00      	cmp	r5, #0
1006579a:	d025      	beq.n	100657e8 <llc_conn_isr+0x34c>
1006579c:	a80e      	add	r0, sp, #56	@ 0x38
1006579e:	7f80      	ldrb	r0, [r0, #30]
100657a0:	2800      	cmp	r0, #0
100657a2:	d169      	bne.n	10065878 <llc_conn_isr+0x3dc>
100657a4:	a80e      	add	r0, sp, #56	@ 0x38
100657a6:	7ec0      	ldrb	r0, [r0, #27]
100657a8:	2800      	cmp	r0, #0
100657aa:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
100657ac:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
100657ae:	d000      	beq.n	100657b2 <llc_conn_isr+0x316>
100657b0:	e0dc      	b.n	1006596c <__arm_cp.0_5+0xdc>
100657b2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
100657b4:	2800      	cmp	r0, #0
100657b6:	d100      	bne.n	100657ba <llc_conn_isr+0x31e>
100657b8:	e0b6      	b.n	10065928 <__arm_cp.0_5+0x98>
100657ba:	4e34      	ldr	r6, [pc, #208]	@ (1006588c <__arm_cp.0_3+0x4>)
100657bc:	6830      	ldr	r0, [r6, #0]
100657be:	21d8      	movs	r1, #216	@ 0xd8
100657c0:	5c41      	ldrb	r1, [r0, r1]
100657c2:	2901      	cmp	r1, #1
100657c4:	d14b      	bne.n	1006585e <llc_conn_isr+0x3c2>
100657c6:	6805      	ldr	r5, [r0, #0]
100657c8:	f7e9 f9da 	bl	1004eb80 <phy_upd_csr_ucfg>
100657cc:	2801      	cmp	r0, #1
100657ce:	d000      	beq.n	100657d2 <llc_conn_isr+0x336>
100657d0:	e094      	b.n	100658fc <__arm_cp.0_5+0x6c>
100657d2:	7920      	ldrb	r0, [r4, #4]
100657d4:	210e      	movs	r1, #14
100657d6:	4341      	muls	r1, r0
100657d8:	6830      	ldr	r0, [r6, #0]
100657da:	229c      	movs	r2, #156	@ 0x9c
100657dc:	5880      	ldr	r0, [r0, r2]
100657de:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
100657e0:	6940      	ldr	r0, [r0, #20]
100657e2:	1840      	adds	r0, r0, r1
100657e4:	79c0      	ldrb	r0, [r0, #7]
100657e6:	e08a      	b.n	100658fe <__arm_cp.0_5+0x6e>
100657e8:	461c      	mov	r4, r3
100657ea:	9202      	str	r2, [sp, #8]
100657ec:	4638      	mov	r0, r7
100657ee:	3014      	adds	r0, #20
100657f0:	f7ee f895 	bl	1005391e <BLEPLAT_CNTR_PacketGetDataPtr>
100657f4:	4605      	mov	r5, r0
100657f6:	9011      	str	r0, [sp, #68]	@ 0x44
100657f8:	7801      	ldrb	r1, [r0, #0]
100657fa:	2003      	movs	r0, #3
100657fc:	4001      	ands	r1, r0
100657fe:	ae0e      	add	r6, sp, #56	@ 0x38
10065800:	9103      	str	r1, [sp, #12]
10065802:	7571      	strb	r1, [r6, #21]
10065804:	7829      	ldrb	r1, [r5, #0]
10065806:	0689      	lsls	r1, r1, #26
10065808:	d400      	bmi.n	1006580c <llc_conn_isr+0x370>
1006580a:	2002      	movs	r0, #2
1006580c:	5c28      	ldrb	r0, [r5, r0]
1006580e:	75f0      	strb	r0, [r6, #23]
10065810:	f7f6 f9b6 	bl	1005bb80 <ll_cpe_get_cpid_from_opcode>
10065814:	7530      	strb	r0, [r6, #20]
10065816:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
10065818:	6679      	str	r1, [r7, #100]	@ 0x64
1006581a:	2301      	movs	r3, #1
1006581c:	9906      	ldr	r1, [sp, #24]
1006581e:	2900      	cmp	r1, #0
10065820:	d009      	beq.n	10065836 <llc_conn_isr+0x39a>
10065822:	990c      	ldr	r1, [sp, #48]	@ 0x30
10065824:	6809      	ldr	r1, [r1, #0]
10065826:	4019      	ands	r1, r3
10065828:	d005      	beq.n	10065836 <llc_conn_isr+0x39a>
1006582a:	2616      	movs	r6, #22
1006582c:	f7ed f81e 	bl	1005286c <BLEPLAT_ClearRadioTimerValue>
10065830:	a80e      	add	r0, sp, #56	@ 0x38
10065832:	7786      	strb	r6, [r0, #30]
10065834:	e020      	b.n	10065878 <llc_conn_isr+0x3dc>
10065836:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10065838:	6949      	ldr	r1, [r1, #20]
1006583a:	7849      	ldrb	r1, [r1, #1]
1006583c:	07c9      	lsls	r1, r1, #31
1006583e:	9a05      	ldr	r2, [sp, #20]
10065840:	d018      	beq.n	10065874 <llc_conn_isr+0x3d8>
10065842:	2a00      	cmp	r2, #0
10065844:	d016      	beq.n	10065874 <llc_conn_isr+0x3d8>
10065846:	9903      	ldr	r1, [sp, #12]
10065848:	2903      	cmp	r1, #3
1006584a:	d10e      	bne.n	1006586a <llc_conn_isr+0x3ce>
1006584c:	263d      	movs	r6, #61	@ 0x3d
1006584e:	2814      	cmp	r0, #20
10065850:	d8ec      	bhi.n	1006582c <llc_conn_isr+0x390>
10065852:	4619      	mov	r1, r3
10065854:	4081      	lsls	r1, r0
10065856:	480e      	ldr	r0, [pc, #56]	@ (10065890 <__arm_cp.0_5>)
10065858:	4201      	tst	r1, r0
1006585a:	d10b      	bne.n	10065874 <llc_conn_isr+0x3d8>
1006585c:	e7e6      	b.n	1006582c <llc_conn_isr+0x390>
1006585e:	f7ed f805 	bl	1005286c <BLEPLAT_ClearRadioTimerValue>
10065862:	a80e      	add	r0, sp, #56	@ 0x38
10065864:	2101      	movs	r1, #1
10065866:	7601      	strb	r1, [r0, #24]
10065868:	e05d      	b.n	10065926 <__arm_cp.0_5+0x96>
1006586a:	7868      	ldrb	r0, [r5, #1]
1006586c:	2800      	cmp	r0, #0
1006586e:	d001      	beq.n	10065874 <llc_conn_isr+0x3d8>
10065870:	263d      	movs	r6, #61	@ 0x3d
10065872:	e7db      	b.n	1006582c <llc_conn_isr+0x390>
10065874:	2c00      	cmp	r4, #0
10065876:	d00d      	beq.n	10065894 <__arm_cp.0_5+0x4>
10065878:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
1006587a:	7d60      	ldrb	r0, [r4, #21]
1006587c:	f7fa ffba 	bl	100607f4 <LL_sched_delete_taskslot>
10065880:	a80e      	add	r0, sp, #56	@ 0x38
10065882:	7f80      	ldrb	r0, [r0, #30]
10065884:	7060      	strb	r0, [r4, #1]
10065886:	e07c      	b.n	10065982 <__arm_cp.0_5+0xf2>

10065888 <__arm_cp.0_3>:
10065888:	2000246c 	.word	0x2000246c
1006588c:	20002470 	.word	0x20002470

10065890 <__arm_cp.0_5>:
10065890:	00100012 	.word	0x00100012
10065894:	9301      	str	r3, [sp, #4]
10065896:	4638      	mov	r0, r7
10065898:	4614      	mov	r4, r2
1006589a:	f7ee f840 	bl	1005391e <BLEPLAT_CNTR_PacketGetDataPtr>
1006589e:	4606      	mov	r6, r0
100658a0:	a80e      	add	r0, sp, #56	@ 0x38
100658a2:	2100      	movs	r1, #0
100658a4:	7701      	strb	r1, [r0, #28]
100658a6:	7641      	strb	r1, [r0, #25]
100658a8:	9612      	str	r6, [sp, #72]	@ 0x48
100658aa:	9106      	str	r1, [sp, #24]
100658ac:	9110      	str	r1, [sp, #64]	@ 0x40
100658ae:	2c00      	cmp	r4, #0
100658b0:	980d      	ldr	r0, [sp, #52]	@ 0x34
100658b2:	d100      	bne.n	100658b6 <__arm_cp.0_5+0x26>
100658b4:	e147      	b.n	10065b46 <__arm_cp.0_5+0x2b6>
100658b6:	7800      	ldrb	r0, [r0, #0]
100658b8:	2802      	cmp	r0, #2
100658ba:	d113      	bne.n	100658e4 <__arm_cp.0_5+0x54>
100658bc:	7828      	ldrb	r0, [r5, #0]
100658be:	7831      	ldrb	r1, [r6, #0]
100658c0:	4301      	orrs	r1, r0
100658c2:	06c8      	lsls	r0, r1, #27
100658c4:	d509      	bpl.n	100658da <__arm_cp.0_5+0x4a>
100658c6:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
100658c8:	f7ec ff8f 	bl	100527ea <BLEPLAT_GetCurrentSysTime>
100658cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
100658ce:	1a08      	subs	r0, r1, r0
100658d0:	1900      	adds	r0, r0, r4
100658d2:	d402      	bmi.n	100658da <__arm_cp.0_5+0x4a>
100658d4:	6f79      	ldr	r1, [r7, #116]	@ 0x74
100658d6:	4288      	cmp	r0, r1
100658d8:	d204      	bcs.n	100658e4 <__arm_cp.0_5+0x54>
100658da:	f7ec ffc7 	bl	1005286c <BLEPLAT_ClearRadioTimerValue>
100658de:	a80e      	add	r0, sp, #56	@ 0x38
100658e0:	2101      	movs	r1, #1
100658e2:	7601      	strb	r1, [r0, #24]
100658e4:	786c      	ldrb	r4, [r5, #1]
100658e6:	2c00      	cmp	r4, #0
100658e8:	d100      	bne.n	100658ec <__arm_cp.0_5+0x5c>
100658ea:	e12c      	b.n	10065b46 <__arm_cp.0_5+0x2b6>
100658ec:	980c      	ldr	r0, [sp, #48]	@ 0x30
100658ee:	6800      	ldr	r0, [r0, #0]
100658f0:	2608      	movs	r6, #8
100658f2:	4006      	ands	r6, r0
100658f4:	d000      	beq.n	100658f8 <__arm_cp.0_5+0x68>
100658f6:	e095      	b.n	10065a24 <__arm_cp.0_5+0x194>
100658f8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
100658fa:	e0aa      	b.n	10065a52 <__arm_cp.0_5+0x1c2>
100658fc:	2001      	movs	r0, #1
100658fe:	6c7e      	ldr	r6, [r7, #68]	@ 0x44
10065900:	f7ee fc8b 	bl	1005421a <BLEPLAT_CNTR_DemodDelaySt>
10065904:	1a28      	subs	r0, r5, r0
10065906:	6478      	str	r0, [r7, #68]	@ 0x44
10065908:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
1006590a:	1b89      	subs	r1, r1, r6
1006590c:	1808      	adds	r0, r1, r0
1006590e:	9a07      	ldr	r2, [sp, #28]
10065910:	6851      	ldr	r1, [r2, #4]
10065912:	4281      	cmp	r1, r0
10065914:	d901      	bls.n	1006591a <__arm_cp.0_5+0x8a>
10065916:	1a08      	subs	r0, r1, r0
10065918:	6050      	str	r0, [r2, #4]
1006591a:	2000      	movs	r0, #0
1006591c:	64b8      	str	r0, [r7, #72]	@ 0x48
1006591e:	6378      	str	r0, [r7, #52]	@ 0x34
10065920:	4638      	mov	r0, r7
10065922:	f7f5 fe97 	bl	1005b654 <llc_conn_update_receive_window>
10065926:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10065928:	a80e      	add	r0, sp, #56	@ 0x38
1006592a:	7e80      	ldrb	r0, [r0, #26]
1006592c:	2801      	cmp	r0, #1
1006592e:	d102      	bne.n	10065936 <__arm_cp.0_5+0xa6>
10065930:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
10065932:	6678      	str	r0, [r7, #100]	@ 0x64
10065934:	e004      	b.n	10065940 <__arm_cp.0_5+0xb0>
10065936:	2011      	movs	r0, #17
10065938:	f7fc ff22 	bl	10062780 <tsk_notify_idx>
1006593c:	f7ec f8a3 	bl	10051a86 <BLE_STACK_ProcessRequest>
10065940:	980a      	ldr	r0, [sp, #40]	@ 0x28
10065942:	68c0      	ldr	r0, [r0, #12]
10065944:	2800      	cmp	r0, #0
10065946:	d002      	beq.n	1006594e <__arm_cp.0_5+0xbe>
10065948:	8801      	ldrh	r1, [r0, #0]
1006594a:	1c49      	adds	r1, r1, #1
1006594c:	8001      	strh	r1, [r0, #0]
1006594e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10065950:	6930      	ldr	r0, [r6, #16]
10065952:	2800      	cmp	r0, #0
10065954:	d007      	beq.n	10065966 <__arm_cp.0_5+0xd6>
10065956:	7d60      	ldrb	r0, [r4, #21]
10065958:	f7ee fa22 	bl	10053da0 <BLEPLAT_CNTR_SmGetRemapChan>
1006595c:	0040      	lsls	r0, r0, #1
1006595e:	6931      	ldr	r1, [r6, #16]
10065960:	5a0a      	ldrh	r2, [r1, r0]
10065962:	1c52      	adds	r2, r2, #1
10065964:	520a      	strh	r2, [r1, r0]
10065966:	7920      	ldrb	r0, [r4, #4]
10065968:	f7f8 faf0 	bl	1005df4c <LLC_pcl_incr_rx_packets_ucfg_weak>
1006596c:	a80e      	add	r0, sp, #56	@ 0x38
1006596e:	7e00      	ldrb	r0, [r0, #24]
10065970:	2801      	cmp	r0, #1
10065972:	d108      	bne.n	10065986 <__arm_cp.0_5+0xf6>
10065974:	6828      	ldr	r0, [r5, #0]
10065976:	2110      	movs	r1, #16
10065978:	4388      	bics	r0, r1
1006597a:	6028      	str	r0, [r5, #0]
1006597c:	4638      	mov	r0, r7
1006597e:	f000 fa82 	bl	10065e86 <llc_conn_close_event>
10065982:	2601      	movs	r6, #1
10065984:	e000      	b.n	10065988 <__arm_cp.0_5+0xf8>
10065986:	2600      	movs	r6, #0
10065988:	7d65      	ldrb	r5, [r4, #21]
1006598a:	4628      	mov	r0, r5
1006598c:	f7ee f9f7 	bl	10053d7e <BLEPLAT_CNTR_SmGetMode>
10065990:	990c      	ldr	r1, [sp, #48]	@ 0x30
10065992:	6809      	ldr	r1, [r1, #0]
10065994:	2800      	cmp	r0, #0
10065996:	d005      	beq.n	100659a4 <__arm_cp.0_5+0x114>
10065998:	0748      	lsls	r0, r1, #29
1006599a:	d405      	bmi.n	100659a8 <__arm_cp.0_5+0x118>
1006599c:	4628      	mov	r0, r5
1006599e:	f7ee f93e 	bl	10053c1e <BLEPLAT_CNTR_SmEncOff>
100659a2:	e004      	b.n	100659ae <__arm_cp.0_5+0x11e>
100659a4:	0708      	lsls	r0, r1, #28
100659a6:	d5f9      	bpl.n	1006599c <__arm_cp.0_5+0x10c>
100659a8:	4628      	mov	r0, r5
100659aa:	f7ee f94c 	bl	10053c46 <BLEPLAT_CNTR_SmEncOn>
100659ae:	2e00      	cmp	r6, #0
100659b0:	d01d      	beq.n	100659ee <__arm_cp.0_5+0x15e>
100659b2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
100659b4:	69e5      	ldr	r5, [r4, #28]
100659b6:	2d00      	cmp	r5, #0
100659b8:	d015      	beq.n	100659e6 <__arm_cp.0_5+0x156>
100659ba:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
100659bc:	7d70      	ldrb	r0, [r6, #21]
100659be:	f7ee f9b9 	bl	10053d34 <BLEPLAT_CNTR_SmGetEncKeyPtr>
100659c2:	4602      	mov	r2, r0
100659c4:	4629      	mov	r1, r5
100659c6:	3110      	adds	r1, #16
100659c8:	2301      	movs	r3, #1
100659ca:	4628      	mov	r0, r5
100659cc:	f7fd f9ee 	bl	10062dac <BLEPLAT_aes128_encrypt>
100659d0:	7d70      	ldrb	r0, [r6, #21]
100659d2:	f7ee f99b 	bl	10053d0c <BLEPLAT_CNTR_SmGetEncIvPtr>
100659d6:	4601      	mov	r1, r0
100659d8:	3520      	adds	r5, #32
100659da:	2208      	movs	r2, #8
100659dc:	4628      	mov	r0, r5
100659de:	f7fd f857 	bl	10062a90 <char_copy>
100659e2:	2000      	movs	r0, #0
100659e4:	61e0      	str	r0, [r4, #28]
100659e6:	9808      	ldr	r0, [sp, #32]
100659e8:	f7fa fd14 	bl	10060414 <LL_sched_engine>
100659ec:	e001      	b.n	100659f2 <__arm_cp.0_5+0x162>
100659ee:	f7ed fea8 	bl	10053742 <BLEPLAT_CNTR_GlobEnableBlue>
100659f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
100659f4:	2800      	cmp	r0, #0
100659f6:	d10c      	bne.n	10065a12 <__arm_cp.0_5+0x182>
100659f8:	f7ec feef 	bl	100527da <BLEPLAT_CalculateRSSI>
100659fc:	287f      	cmp	r0, #127	@ 0x7f
100659fe:	d005      	beq.n	10065a0c <__arm_cp.0_5+0x17c>
10065a00:	4605      	mov	r5, r0
10065a02:	f7fa fc05 	bl	10060210 <get_rf_rx_path_compensation_db>
10065a06:	1828      	adds	r0, r5, r0
10065a08:	990a      	ldr	r1, [sp, #40]	@ 0x28
10065a0a:	7008      	strb	r0, [r1, #0]
10065a0c:	4638      	mov	r0, r7
10065a0e:	f7f8 fa9e 	bl	1005df4e <LLC_pcl_update_avg_rssi_ucfg_weak>
10065a12:	2401      	movs	r4, #1
10065a14:	4620      	mov	r0, r4
10065a16:	f7fc fedb 	bl	100627d0 <tsk_signal_resource_idx>
10065a1a:	f7ec f834 	bl	10051a86 <BLE_STACK_ProcessRequest>
10065a1e:	4620      	mov	r0, r4
10065a20:	b019      	add	sp, #100	@ 0x64
10065a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
10065a24:	f7f3 fdb2 	bl	1005958c <data_length_extension_csr_ucfg_weak>
10065a28:	2801      	cmp	r0, #1
10065a2a:	d001      	beq.n	10065a30 <__arm_cp.0_5+0x1a0>
10065a2c:	201c      	movs	r0, #28
10065a2e:	e000      	b.n	10065a32 <__arm_cp.0_5+0x1a2>
10065a30:	20fc      	movs	r0, #252	@ 0xfc
10065a32:	4220      	tst	r0, r4
10065a34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
10065a36:	d00c      	beq.n	10065a52 <__arm_cp.0_5+0x1c2>
10065a38:	7868      	ldrb	r0, [r5, #1]
10065a3a:	1f00      	subs	r0, r0, #4
10065a3c:	7068      	strb	r0, [r5, #1]
10065a3e:	2002      	movs	r0, #2
10065a40:	71a0      	strb	r0, [r4, #6]
10065a42:	2012      	movs	r0, #18
10065a44:	f7fc fe9c 	bl	10062780 <tsk_notify_idx>
10065a48:	f7ec f81d 	bl	10051a86 <BLE_STACK_ProcessRequest>
10065a4c:	a80e      	add	r0, sp, #56	@ 0x38
10065a4e:	7d40      	ldrb	r0, [r0, #21]
10065a50:	9003      	str	r0, [sp, #12]
10065a52:	9803      	ldr	r0, [sp, #12]
10065a54:	2803      	cmp	r0, #3
10065a56:	d110      	bne.n	10065a7a <__arm_cp.0_5+0x1ea>
10065a58:	a80e      	add	r0, sp, #56	@ 0x38
10065a5a:	7dc5      	ldrb	r5, [r0, #23]
10065a5c:	2d02      	cmp	r5, #2
10065a5e:	d117      	bne.n	10065a90 <__arm_cp.0_5+0x200>
10065a60:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065a62:	7840      	ldrb	r0, [r0, #1]
10065a64:	2802      	cmp	r0, #2
10065a66:	d113      	bne.n	10065a90 <__arm_cp.0_5+0x200>
10065a68:	a80e      	add	r0, sp, #56	@ 0x38
10065a6a:	2101      	movs	r1, #1
10065a6c:	7701      	strb	r1, [r0, #28]
10065a6e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10065a70:	6828      	ldr	r0, [r5, #0]
10065a72:	2102      	movs	r1, #2
10065a74:	4301      	orrs	r1, r0
10065a76:	6029      	str	r1, [r5, #0]
10065a78:	e042      	b.n	10065b00 <__arm_cp.0_5+0x270>
10065a7a:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065a7c:	7800      	ldrb	r0, [r0, #0]
10065a7e:	2803      	cmp	r0, #3
10065a80:	d117      	bne.n	10065ab2 <__arm_cp.0_5+0x222>
10065a82:	7a20      	ldrb	r0, [r4, #8]
10065a84:	2800      	cmp	r0, #0
10065a86:	d014      	beq.n	10065ab2 <__arm_cp.0_5+0x222>
10065a88:	2002      	movs	r0, #2
10065a8a:	9910      	ldr	r1, [sp, #64]	@ 0x40
10065a8c:	4301      	orrs	r1, r0
10065a8e:	e04a      	b.n	10065b26 <__arm_cp.0_5+0x296>
10065a90:	4638      	mov	r0, r7
10065a92:	f7f4 fd02 	bl	1005a49a <llc_conn_get_rx_ctrl_pdu_full>
10065a96:	2800      	cmp	r0, #0
10065a98:	d021      	beq.n	10065ade <__arm_cp.0_5+0x24e>
10065a9a:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065a9c:	7d40      	ldrb	r0, [r0, #21]
10065a9e:	f7ee fbad 	bl	100541fc <BLEPLAT_CNTR_SmToggleNesn>
10065aa2:	2e00      	cmp	r6, #0
10065aa4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10065aa6:	d02b      	beq.n	10065b00 <__arm_cp.0_5+0x270>
10065aa8:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065aaa:	7d40      	ldrb	r0, [r0, #21]
10065aac:	f000 fa61 	bl	10065f72 <llc_conn_decrement_enc_count_rx>
10065ab0:	e026      	b.n	10065b00 <__arm_cp.0_5+0x270>
10065ab2:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065ab4:	7846      	ldrb	r6, [r0, #1]
10065ab6:	f7f3 fd69 	bl	1005958c <data_length_extension_csr_ucfg_weak>
10065aba:	2801      	cmp	r0, #1
10065abc:	d001      	beq.n	10065ac2 <__arm_cp.0_5+0x232>
10065abe:	251f      	movs	r5, #31
10065ac0:	e001      	b.n	10065ac6 <__arm_cp.0_5+0x236>
10065ac2:	9806      	ldr	r0, [sp, #24]
10065ac4:	43c5      	mvns	r5, r0
10065ac6:	4035      	ands	r5, r6
10065ac8:	0628      	lsls	r0, r5, #24
10065aca:	d01e      	beq.n	10065b0a <__arm_cp.0_5+0x27a>
10065acc:	9806      	ldr	r0, [sp, #24]
10065ace:	67b8      	str	r0, [r7, #120]	@ 0x78
10065ad0:	f7ef f86c 	bl	10054bac <isr_Acl_Data_Indication_Queue_Full>
10065ad4:	2800      	cmp	r0, #0
10065ad6:	d01b      	beq.n	10065b10 <__arm_cp.0_5+0x280>
10065ad8:	2002      	movs	r0, #2
10065ada:	9010      	str	r0, [sp, #64]	@ 0x40
10065adc:	e026      	b.n	10065b2c <__arm_cp.0_5+0x29c>
10065ade:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065ae0:	7800      	ldrb	r0, [r0, #0]
10065ae2:	2803      	cmp	r0, #3
10065ae4:	d108      	bne.n	10065af8 <__arm_cp.0_5+0x268>
10065ae6:	2d27      	cmp	r5, #39	@ 0x27
10065ae8:	d106      	bne.n	10065af8 <__arm_cp.0_5+0x268>
10065aea:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065aec:	7840      	ldrb	r0, [r0, #1]
10065aee:	280b      	cmp	r0, #11
10065af0:	d102      	bne.n	10065af8 <__arm_cp.0_5+0x268>
10065af2:	a80e      	add	r0, sp, #56	@ 0x38
10065af4:	2101      	movs	r1, #1
10065af6:	7741      	strb	r1, [r0, #29]
10065af8:	a80e      	add	r0, sp, #56	@ 0x38
10065afa:	2101      	movs	r1, #1
10065afc:	7641      	strb	r1, [r0, #25]
10065afe:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10065b00:	6828      	ldr	r0, [r5, #0]
10065b02:	2180      	movs	r1, #128	@ 0x80
10065b04:	4301      	orrs	r1, r0
10065b06:	6029      	str	r1, [r5, #0]
10065b08:	e014      	b.n	10065b34 <__arm_cp.0_5+0x2a4>
10065b0a:	9806      	ldr	r0, [sp, #24]
10065b0c:	9010      	str	r0, [sp, #64]	@ 0x40
10065b0e:	e011      	b.n	10065b34 <__arm_cp.0_5+0x2a4>
10065b10:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
10065b12:	b2ea      	uxtb	r2, r5
10065b14:	9801      	ldr	r0, [sp, #4]
10065b16:	f7ef f913 	bl	10054d40 <ACL_pkt_get>
10065b1a:	67b8      	str	r0, [r7, #120]	@ 0x78
10065b1c:	2800      	cmp	r0, #0
10065b1e:	d001      	beq.n	10065b24 <__arm_cp.0_5+0x294>
10065b20:	9901      	ldr	r1, [sp, #4]
10065b22:	e000      	b.n	10065b26 <__arm_cp.0_5+0x296>
10065b24:	2102      	movs	r1, #2
10065b26:	9110      	str	r1, [sp, #64]	@ 0x40
10065b28:	0788      	lsls	r0, r1, #30
10065b2a:	d503      	bpl.n	10065b34 <__arm_cp.0_5+0x2a4>
10065b2c:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065b2e:	7d40      	ldrb	r0, [r0, #21]
10065b30:	f7ee fb64 	bl	100541fc <BLEPLAT_CNTR_SmToggleNesn>
10065b34:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065b36:	7800      	ldrb	r0, [r0, #0]
10065b38:	8aa1      	ldrh	r1, [r4, #20]
10065b3a:	82e1      	strh	r1, [r4, #22]
10065b3c:	2120      	movs	r1, #32
10065b3e:	4001      	ands	r1, r0
10065b40:	a80e      	add	r0, sp, #56	@ 0x38
10065b42:	7581      	strb	r1, [r0, #22]
10065b44:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10065b46:	2101      	movs	r1, #1
10065b48:	4638      	mov	r0, r7
10065b4a:	9105      	str	r1, [sp, #20]
10065b4c:	f7f4 fc8a 	bl	1005a464 <llc_conn_get_ctrl_pdu_data_p>
10065b50:	4605      	mov	r5, r0
10065b52:	463b      	mov	r3, r7
10065b54:	3328      	adds	r3, #40	@ 0x28
10065b56:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10065b58:	6801      	ldr	r1, [r0, #0]
10065b5a:	2900      	cmp	r1, #0
10065b5c:	d011      	beq.n	10065b82 <__arm_cp.0_5+0x2f2>
10065b5e:	7a08      	ldrb	r0, [r1, #8]
10065b60:	0700      	lsls	r0, r0, #28
10065b62:	d50e      	bpl.n	10065b82 <__arm_cp.0_5+0x2f2>
10065b64:	69c8      	ldr	r0, [r1, #28]
10065b66:	2800      	cmp	r0, #0
10065b68:	d00b      	beq.n	10065b82 <__arm_cp.0_5+0x2f2>
10065b6a:	42ae      	cmp	r6, r5
10065b6c:	d009      	beq.n	10065b82 <__arm_cp.0_5+0x2f2>
10065b6e:	429e      	cmp	r6, r3
10065b70:	d007      	beq.n	10065b82 <__arm_cp.0_5+0x2f2>
10065b72:	460c      	mov	r4, r1
10065b74:	990c      	ldr	r1, [sp, #48]	@ 0x30
10065b76:	6808      	ldr	r0, [r1, #0]
10065b78:	9a02      	ldr	r2, [sp, #8]
10065b7a:	4390      	bics	r0, r2
10065b7c:	6008      	str	r0, [r1, #0]
10065b7e:	4621      	mov	r1, r4
10065b80:	e003      	b.n	10065b8a <__arm_cp.0_5+0x2fa>
10065b82:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10065b84:	2800      	cmp	r0, #0
10065b86:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065b88:	d017      	beq.n	10065bba <__arm_cp.0_5+0x32a>
10065b8a:	42ae      	cmp	r6, r5
10065b8c:	9303      	str	r3, [sp, #12]
10065b8e:	d018      	beq.n	10065bc2 <__arm_cp.0_5+0x332>
10065b90:	429e      	cmp	r6, r3
10065b92:	d025      	beq.n	10065be0 <__arm_cp.0_5+0x350>
10065b94:	6948      	ldr	r0, [r1, #20]
10065b96:	6188      	str	r0, [r1, #24]
10065b98:	460e      	mov	r6, r1
10065b9a:	7b09      	ldrb	r1, [r1, #12]
10065b9c:	9d06      	ldr	r5, [sp, #24]
10065b9e:	7335      	strb	r5, [r6, #12]
10065ba0:	8a32      	ldrh	r2, [r6, #16]
10065ba2:	1851      	adds	r1, r2, r1
10065ba4:	8231      	strh	r1, [r6, #16]
10065ba6:	b28a      	uxth	r2, r1
10065ba8:	8873      	ldrh	r3, [r6, #2]
10065baa:	429a      	cmp	r2, r3
10065bac:	d21a      	bcs.n	10065be4 <__arm_cp.0_5+0x354>
10065bae:	89f2      	ldrh	r2, [r6, #14]
10065bb0:	1851      	adds	r1, r2, r1
10065bb2:	06c9      	lsls	r1, r1, #27
10065bb4:	d019      	beq.n	10065bea <__arm_cp.0_5+0x35a>
10065bb6:	4634      	mov	r4, r6
10065bb8:	e01a      	b.n	10065bf0 <__arm_cp.0_5+0x360>
10065bba:	f7ed fdc2 	bl	10053742 <BLEPLAT_CNTR_GlobEnableBlue>
10065bbe:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10065bc0:	e0e3      	b.n	10065d8a <__arm_cp.0_5+0x4fa>
10065bc2:	460c      	mov	r4, r1
10065bc4:	2103      	movs	r1, #3
10065bc6:	4638      	mov	r0, r7
10065bc8:	f7f4 ff14 	bl	1005a9f4 <llc_conn_set_tx_ctrl_pdu_state>
10065bcc:	4638      	mov	r0, r7
10065bce:	f7ed fe80 	bl	100538d2 <BLEPLAT_CNTR_PacketClrCteSamplingEn>
10065bd2:	78a8      	ldrb	r0, [r5, #2]
10065bd4:	2827      	cmp	r0, #39	@ 0x27
10065bd6:	d10e      	bne.n	10065bf6 <__arm_cp.0_5+0x366>
10065bd8:	a80e      	add	r0, sp, #56	@ 0x38
10065bda:	2101      	movs	r1, #1
10065bdc:	7741      	strb	r1, [r0, #29]
10065bde:	e00a      	b.n	10065bf6 <__arm_cp.0_5+0x366>
10065be0:	460c      	mov	r4, r1
10065be2:	e008      	b.n	10065bf6 <__arm_cp.0_5+0x366>
10065be4:	69f4      	ldr	r4, [r6, #28]
10065be6:	2504      	movs	r5, #4
10065be8:	e002      	b.n	10065bf0 <__arm_cp.0_5+0x360>
10065bea:	6800      	ldr	r0, [r0, #0]
10065bec:	4634      	mov	r4, r6
10065bee:	61b0      	str	r0, [r6, #24]
10065bf0:	9810      	ldr	r0, [sp, #64]	@ 0x40
10065bf2:	4328      	orrs	r0, r5
10065bf4:	9010      	str	r0, [sp, #64]	@ 0x40
10065bf6:	4638      	mov	r0, r7
10065bf8:	f7f4 fc5b 	bl	1005a4b2 <llc_conn_get_tx_acl_blocked>
10065bfc:	4605      	mov	r5, r0
10065bfe:	4638      	mov	r0, r7
10065c00:	f7f4 fc5d 	bl	1005a4be <llc_conn_get_tx_ctrl_pdu_state>
10065c04:	a90e      	add	r1, sp, #56	@ 0x38
10065c06:	7f0e      	ldrb	r6, [r1, #28]
10065c08:	2e00      	cmp	r6, #0
10065c0a:	d124      	bne.n	10065c56 <__arm_cp.0_5+0x3c6>
10065c0c:	2801      	cmp	r0, #1
10065c0e:	d122      	bne.n	10065c56 <__arm_cp.0_5+0x3c6>
10065c10:	2101      	movs	r1, #1
10065c12:	4638      	mov	r0, r7
10065c14:	9106      	str	r1, [sp, #24]
10065c16:	f7f4 fc25 	bl	1005a464 <llc_conn_get_ctrl_pdu_data_p>
10065c1a:	4606      	mov	r6, r0
10065c1c:	4638      	mov	r0, r7
10065c1e:	4631      	mov	r1, r6
10065c20:	f7ed febf 	bl	100539a2 <BLEPLAT_CNTR_PacketSetDataPtr>
10065c24:	4632      	mov	r2, r6
10065c26:	7830      	ldrb	r0, [r6, #0]
10065c28:	0680      	lsls	r0, r0, #26
10065c2a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10065c2c:	d421      	bmi.n	10065c72 <__arm_cp.0_5+0x3e2>
10065c2e:	7890      	ldrb	r0, [r2, #2]
10065c30:	2827      	cmp	r0, #39	@ 0x27
10065c32:	d04c      	beq.n	10065cce <__arm_cp.0_5+0x43e>
10065c34:	4615      	mov	r5, r2
10065c36:	2802      	cmp	r0, #2
10065c38:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065c3a:	d152      	bne.n	10065ce2 <__arm_cp.0_5+0x452>
10065c3c:	990c      	ldr	r1, [sp, #48]	@ 0x30
10065c3e:	6808      	ldr	r0, [r1, #0]
10065c40:	9a06      	ldr	r2, [sp, #24]
10065c42:	4310      	orrs	r0, r2
10065c44:	6008      	str	r0, [r1, #0]
10065c46:	7d60      	ldrb	r0, [r4, #21]
10065c48:	211f      	movs	r1, #31
10065c4a:	460a      	mov	r2, r1
10065c4c:	f7fa fda8 	bl	100607a0 <LL_sched_set_priority>
10065c50:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
10065c52:	6738      	str	r0, [r7, #112]	@ 0x70
10065c54:	e045      	b.n	10065ce2 <__arm_cp.0_5+0x452>
10065c56:	f7ee ffb7 	bl	10054bc8 <isr_Acl_Data_TX_Cmpl_Queue_Full>
10065c5a:	2800      	cmp	r0, #0
10065c5c:	d018      	beq.n	10065c90 <__arm_cp.0_5+0x400>
10065c5e:	f7ed fd70 	bl	10053742 <BLEPLAT_CNTR_GlobEnableBlue>
10065c62:	980e      	ldr	r0, [sp, #56]	@ 0x38
10065c64:	2800      	cmp	r0, #0
10065c66:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065c68:	d009      	beq.n	10065c7e <__arm_cp.0_5+0x3ee>
10065c6a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10065c6c:	9903      	ldr	r1, [sp, #12]
10065c6e:	9805      	ldr	r0, [sp, #20]
10065c70:	e008      	b.n	10065c84 <__arm_cp.0_5+0x3f4>
10065c72:	4615      	mov	r5, r2
10065c74:	4638      	mov	r0, r7
10065c76:	f7ed fe87 	bl	10053988 <BLEPLAT_CNTR_PacketSetCteSamplingEn>
10065c7a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065c7c:	e031      	b.n	10065ce2 <__arm_cp.0_5+0x452>
10065c7e:	2011      	movs	r0, #17
10065c80:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10065c82:	9903      	ldr	r1, [sp, #12]
10065c84:	8538      	strh	r0, [r7, #40]	@ 0x28
10065c86:	4638      	mov	r0, r7
10065c88:	460d      	mov	r5, r1
10065c8a:	f7ed fe8a 	bl	100539a2 <BLEPLAT_CNTR_PacketSetDataPtr>
10065c8e:	e071      	b.n	10065d74 <__arm_cp.0_5+0x4e4>
10065c90:	2c00      	cmp	r4, #0
10065c92:	d0e4      	beq.n	10065c5e <__arm_cp.0_5+0x3ce>
10065c94:	2d01      	cmp	r5, #1
10065c96:	d0e2      	beq.n	10065c5e <__arm_cp.0_5+0x3ce>
10065c98:	2e01      	cmp	r6, #1
10065c9a:	d0e0      	beq.n	10065c5e <__arm_cp.0_5+0x3ce>
10065c9c:	f7ed fd51 	bl	10053742 <BLEPLAT_CNTR_GlobEnableBlue>
10065ca0:	4877      	ldr	r0, [pc, #476]	@ (10065e80 <__arm_cp.0_2>)
10065ca2:	6800      	ldr	r0, [r0, #0]
10065ca4:	218c      	movs	r1, #140	@ 0x8c
10065ca6:	5840      	ldr	r0, [r0, r1]
10065ca8:	8a21      	ldrh	r1, [r4, #16]
10065caa:	89e2      	ldrh	r2, [r4, #14]
10065cac:	1851      	adds	r1, r2, r1
10065cae:	221f      	movs	r2, #31
10065cb0:	400a      	ands	r2, r1
10065cb2:	1810      	adds	r0, r2, r0
10065cb4:	1c81      	adds	r1, r0, #2
10065cb6:	4638      	mov	r0, r7
10065cb8:	460d      	mov	r5, r1
10065cba:	f7ed fe72 	bl	100539a2 <BLEPLAT_CNTR_PacketSetDataPtr>
10065cbe:	4638      	mov	r0, r7
10065cc0:	4621      	mov	r1, r4
10065cc2:	f7f4 fb23 	bl	1005a30c <llc_conn_copy_tx_data_packet>
10065cc6:	67fc      	str	r4, [r7, #124]	@ 0x7c
10065cc8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10065cca:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065ccc:	e052      	b.n	10065d74 <__arm_cp.0_5+0x4e4>
10065cce:	990d      	ldr	r1, [sp, #52]	@ 0x34
10065cd0:	7d88      	ldrb	r0, [r1, #22]
10065cd2:	7150      	strb	r0, [r2, #5]
10065cd4:	7dc8      	ldrb	r0, [r1, #23]
10065cd6:	4615      	mov	r5, r2
10065cd8:	7190      	strb	r0, [r2, #6]
10065cda:	2000      	movs	r0, #0
10065cdc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10065cde:	8290      	strh	r0, [r2, #20]
10065ce0:	460c      	mov	r4, r1
10065ce2:	6970      	ldr	r0, [r6, #20]
10065ce4:	6800      	ldr	r0, [r0, #0]
10065ce6:	0701      	lsls	r1, r0, #28
10065ce8:	d415      	bmi.n	10065d16 <__arm_cp.0_5+0x486>
10065cea:	0680      	lsls	r0, r0, #26
10065cec:	d510      	bpl.n	10065d10 <__arm_cp.0_5+0x480>
10065cee:	7d60      	ldrb	r0, [r4, #21]
10065cf0:	f7ed ff95 	bl	10053c1e <BLEPLAT_CNTR_SmEncOff>
10065cf4:	6970      	ldr	r0, [r6, #20]
10065cf6:	6801      	ldr	r1, [r0, #0]
10065cf8:	2220      	movs	r2, #32
10065cfa:	4391      	bics	r1, r2
10065cfc:	6001      	str	r1, [r0, #0]
10065cfe:	68b0      	ldr	r0, [r6, #8]
10065d00:	2104      	movs	r1, #4
10065d02:	4388      	bics	r0, r1
10065d04:	60b0      	str	r0, [r6, #8]
10065d06:	2012      	movs	r0, #18
10065d08:	f7fc fd3a 	bl	10062780 <tsk_notify_idx>
10065d0c:	f7eb febb 	bl	10051a86 <BLE_STACK_ProcessRequest>
10065d10:	f7ed fd17 	bl	10053742 <BLEPLAT_CNTR_GlobEnableBlue>
10065d14:	e01f      	b.n	10065d56 <__arm_cp.0_5+0x4c6>
10065d16:	2000      	movs	r0, #0
10065d18:	9017      	str	r0, [sp, #92]	@ 0x5c
10065d1a:	9016      	str	r0, [sp, #88]	@ 0x58
10065d1c:	7d60      	ldrb	r0, [r4, #21]
10065d1e:	f7ed ff92 	bl	10053c46 <BLEPLAT_CNTR_SmEncOn>
10065d22:	7d60      	ldrb	r0, [r4, #21]
10065d24:	a916      	add	r1, sp, #88	@ 0x58
10065d26:	f7ee f9d3 	bl	100540d0 <BLEPLAT_CNTR_SmSetTxCount>
10065d2a:	7820      	ldrb	r0, [r4, #0]
10065d2c:	2802      	cmp	r0, #2
10065d2e:	d102      	bne.n	10065d36 <__arm_cp.0_5+0x4a6>
10065d30:	7d60      	ldrb	r0, [r4, #21]
10065d32:	f7ee f9e9 	bl	10054108 <BLEPLAT_CNTR_SmSetTxCountDirectionBit>
10065d36:	f7ed fd04 	bl	10053742 <BLEPLAT_CNTR_GlobEnableBlue>
10065d3a:	6970      	ldr	r0, [r6, #20]
10065d3c:	6801      	ldr	r1, [r0, #0]
10065d3e:	2208      	movs	r2, #8
10065d40:	4391      	bics	r1, r2
10065d42:	6001      	str	r1, [r0, #0]
10065d44:	68b0      	ldr	r0, [r6, #8]
10065d46:	2104      	movs	r1, #4
10065d48:	4301      	orrs	r1, r0
10065d4a:	60b1      	str	r1, [r6, #8]
10065d4c:	2012      	movs	r0, #18
10065d4e:	f7fc fd17 	bl	10062780 <tsk_notify_idx>
10065d52:	f7eb fe98 	bl	10051a86 <BLE_STACK_ProcessRequest>
10065d56:	2102      	movs	r1, #2
10065d58:	4638      	mov	r0, r7
10065d5a:	f7f4 fe4b 	bl	1005a9f4 <llc_conn_set_tx_ctrl_pdu_state>
10065d5e:	6970      	ldr	r0, [r6, #20]
10065d60:	6801      	ldr	r1, [r0, #0]
10065d62:	074a      	lsls	r2, r1, #29
10065d64:	d506      	bpl.n	10065d74 <__arm_cp.0_5+0x4e4>
10065d66:	2204      	movs	r2, #4
10065d68:	4391      	bics	r1, r2
10065d6a:	6001      	str	r1, [r0, #0]
10065d6c:	8b70      	ldrh	r0, [r6, #26]
10065d6e:	9906      	ldr	r1, [sp, #24]
10065d70:	4308      	orrs	r0, r1
10065d72:	8370      	strh	r0, [r6, #26]
10065d74:	2101      	movs	r1, #1
10065d76:	4638      	mov	r0, r7
10065d78:	f7f4 fb7a 	bl	1005a470 <llc_conn_get_enc_on>
10065d7c:	2801      	cmp	r0, #1
10065d7e:	d104      	bne.n	10065d8a <__arm_cp.0_5+0x4fa>
10065d80:	7868      	ldrb	r0, [r5, #1]
10065d82:	2800      	cmp	r0, #0
10065d84:	d001      	beq.n	10065d8a <__arm_cp.0_5+0x4fa>
10065d86:	1d00      	adds	r0, r0, #4
10065d88:	7068      	strb	r0, [r5, #1]
10065d8a:	9810      	ldr	r0, [sp, #64]	@ 0x40
10065d8c:	0781      	lsls	r1, r0, #30
10065d8e:	d507      	bpl.n	10065da0 <__arm_cp.0_5+0x510>
10065d90:	990c      	ldr	r1, [sp, #48]	@ 0x30
10065d92:	7809      	ldrb	r1, [r1, #0]
10065d94:	0709      	lsls	r1, r1, #28
10065d96:	d503      	bpl.n	10065da0 <__arm_cp.0_5+0x510>
10065d98:	7d60      	ldrb	r0, [r4, #21]
10065d9a:	f000 f8ea 	bl	10065f72 <llc_conn_decrement_enc_count_rx>
10065d9e:	9810      	ldr	r0, [sp, #64]	@ 0x40
10065da0:	0741      	lsls	r1, r0, #29
10065da2:	d505      	bpl.n	10065db0 <__arm_cp.0_5+0x520>
10065da4:	4630      	mov	r0, r6
10065da6:	f7fc ff07 	bl	10062bb8 <ACL_list_remove_head>
10065daa:	f7ee ff37 	bl	10054c1c <Acl_Tx_Cmpl_Pkt_Handler>
10065dae:	9810      	ldr	r0, [sp, #64]	@ 0x40
10065db0:	07c0      	lsls	r0, r0, #31
10065db2:	d01e      	beq.n	10065df2 <__arm_cp.0_5+0x562>
10065db4:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065db6:	7844      	ldrb	r4, [r0, #1]
10065db8:	2600      	movs	r6, #0
10065dba:	f7f3 fbe7 	bl	1005958c <data_length_extension_csr_ucfg_weak>
10065dbe:	2801      	cmp	r0, #1
10065dc0:	d001      	beq.n	10065dc6 <__arm_cp.0_5+0x536>
10065dc2:	251f      	movs	r5, #31
10065dc4:	e000      	b.n	10065dc8 <__arm_cp.0_5+0x538>
10065dc6:	43f5      	mvns	r5, r6
10065dc8:	4025      	ands	r5, r4
10065dca:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
10065dcc:	6840      	ldr	r0, [r0, #4]
10065dce:	9911      	ldr	r1, [sp, #68]	@ 0x44
10065dd0:	1c89      	adds	r1, r1, #2
10065dd2:	462a      	mov	r2, r5
10065dd4:	f7fb f87a 	bl	10060ecc <Mem_Buff_block_write>
10065dd8:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
10065dda:	61c6      	str	r6, [r0, #28]
10065ddc:	8045      	strh	r5, [r0, #2]
10065dde:	9911      	ldr	r1, [sp, #68]	@ 0x44
10065de0:	7809      	ldrb	r1, [r1, #0]
10065de2:	2203      	movs	r2, #3
10065de4:	400a      	ands	r2, r1
10065de6:	7a01      	ldrb	r1, [r0, #8]
10065de8:	4311      	orrs	r1, r2
10065dea:	7201      	strb	r1, [r0, #8]
10065dec:	f7ee fefa 	bl	10054be4 <Acl_Rcv_Pkt_Handler>
10065df0:	67be      	str	r6, [r7, #120]	@ 0x78
10065df2:	a80e      	add	r0, sp, #56	@ 0x38
10065df4:	7e40      	ldrb	r0, [r0, #25]
10065df6:	2801      	cmp	r0, #1
10065df8:	d131      	bne.n	10065e5e <__arm_cp.0_5+0x5ce>
10065dfa:	2100      	movs	r1, #0
10065dfc:	4638      	mov	r0, r7
10065dfe:	f7f4 fb31 	bl	1005a464 <llc_conn_get_ctrl_pdu_data_p>
10065e02:	4605      	mov	r5, r0
10065e04:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065e06:	7801      	ldrb	r1, [r0, #0]
10065e08:	7840      	ldrb	r0, [r0, #1]
10065e0a:	0200      	lsls	r0, r0, #8
10065e0c:	1840      	adds	r0, r0, r1
10065e0e:	8028      	strh	r0, [r5, #0]
10065e10:	f7f5 fe0a 	bl	1005ba28 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10065e14:	4606      	mov	r6, r0
10065e16:	f7f5 fdfd 	bl	1005ba14 <cis_csr_ucfg_weak>
10065e1a:	4330      	orrs	r0, r6
10065e1c:	b2c0      	uxtb	r0, r0
10065e1e:	f7fa fa13 	bl	10060248 <LL_get_control_pdu_size>
10065e22:	a90e      	add	r1, sp, #56	@ 0x38
10065e24:	7d89      	ldrb	r1, [r1, #22]
10065e26:	2920      	cmp	r1, #32
10065e28:	d001      	beq.n	10065e2e <__arm_cp.0_5+0x59e>
10065e2a:	2102      	movs	r1, #2
10065e2c:	e000      	b.n	10065e30 <__arm_cp.0_5+0x5a0>
10065e2e:	2103      	movs	r1, #3
10065e30:	9a11      	ldr	r2, [sp, #68]	@ 0x44
10065e32:	1851      	adds	r1, r2, r1
10065e34:	1f00      	subs	r0, r0, #4
10065e36:	b2c3      	uxtb	r3, r0
10065e38:	7852      	ldrb	r2, [r2, #1]
10065e3a:	429a      	cmp	r2, r3
10065e3c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10065e3e:	d300      	bcc.n	10065e42 <__arm_cp.0_5+0x5b2>
10065e40:	4602      	mov	r2, r0
10065e42:	b2d2      	uxtb	r2, r2
10065e44:	1ca8      	adds	r0, r5, #2
10065e46:	f7ec fc05 	bl	10052654 <BLEPLAT_MemCpy>
10065e4a:	6920      	ldr	r0, [r4, #16]
10065e4c:	6801      	ldr	r1, [r0, #0]
10065e4e:	2201      	movs	r2, #1
10065e50:	430a      	orrs	r2, r1
10065e52:	6002      	str	r2, [r0, #0]
10065e54:	2015      	movs	r0, #21
10065e56:	f7fc fc93 	bl	10062780 <tsk_notify_idx>
10065e5a:	f7eb fe14 	bl	10051a86 <BLE_STACK_ProcessRequest>
10065e5e:	ad0e      	add	r5, sp, #56	@ 0x38
10065e60:	4638      	mov	r0, r7
10065e62:	4629      	mov	r1, r5
10065e64:	f000 f80e 	bl	10065e84 <llc_conn_check_subrate_and_set_params_ucfg_weak>
10065e68:	7da8      	ldrb	r0, [r5, #22]
10065e6a:	2820      	cmp	r0, #32
10065e6c:	d000      	beq.n	10065e70 <__arm_cp.0_5+0x5e0>
10065e6e:	e495      	b.n	1006579c <llc_conn_isr+0x300>
10065e70:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065e72:	7880      	ldrb	r0, [r0, #2]
10065e74:	0981      	lsrs	r1, r0, #6
10065e76:	4638      	mov	r0, r7
10065e78:	f7f7 f953 	bl	1005d122 <llc_cte_process_rx_cte_ucfg_weak>
10065e7c:	e48e      	b.n	1006579c <llc_conn_isr+0x300>
10065e7e:	46c0      	nop			@ (mov r8, r8)

10065e80 <__arm_cp.0_2>:
10065e80:	20002470 	.word	0x20002470

10065e84 <llc_conn_check_subrate_and_set_params_ucfg_weak>:
10065e84:	4770      	bx	lr

10065e86 <llc_conn_close_event>:
10065e86:	b5f0      	push	{r4, r5, r6, r7, lr}
10065e88:	b085      	sub	sp, #20
10065e8a:	4605      	mov	r5, r0
10065e8c:	2045      	movs	r0, #69	@ 0x45
10065e8e:	0080      	lsls	r0, r0, #2
10065e90:	9003      	str	r0, [sp, #12]
10065e92:	5828      	ldr	r0, [r5, r0]
10065e94:	462e      	mov	r6, r5
10065e96:	3642      	adds	r6, #66	@ 0x42
10065e98:	2800      	cmp	r0, #0
10065e9a:	d002      	beq.n	10065ea2 <llc_conn_close_event+0x1c>
10065e9c:	8881      	ldrh	r1, [r0, #4]
10065e9e:	1c49      	adds	r1, r1, #1
10065ea0:	8081      	strh	r1, [r0, #4]
10065ea2:	462c      	mov	r4, r5
10065ea4:	3480      	adds	r4, #128	@ 0x80
10065ea6:	4628      	mov	r0, r5
10065ea8:	f7f5 fe51 	bl	1005bb4e <llc_subrate_update_cont_counter_ucfg_weak>
10065eac:	6c68      	ldr	r0, [r5, #68]	@ 0x44
10065eae:	9002      	str	r0, [sp, #8]
10065eb0:	8837      	ldrh	r7, [r6, #0]
10065eb2:	4628      	mov	r0, r5
10065eb4:	f7f4 fa70 	bl	1005a398 <llc_conn_enhanced_get_latency>
10065eb8:	4602      	mov	r2, r0
10065eba:	4628      	mov	r0, r5
10065ebc:	4639      	mov	r1, r7
10065ebe:	f7f4 fdaa 	bl	1005aa16 <llc_conn_calc_skip_ucfg_weak>
10065ec2:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
10065ec4:	4342      	muls	r2, r0
10065ec6:	6c69      	ldr	r1, [r5, #68]	@ 0x44
10065ec8:	1889      	adds	r1, r1, r2
10065eca:	6469      	str	r1, [r5, #68]	@ 0x44
10065ecc:	9001      	str	r0, [sp, #4]
10065ece:	1838      	adds	r0, r7, r0
10065ed0:	9004      	str	r0, [sp, #16]
10065ed2:	b287      	uxth	r7, r0
10065ed4:	8830      	ldrh	r0, [r6, #0]
10065ed6:	42b8      	cmp	r0, r7
10065ed8:	d907      	bls.n	10065eea <llc_conn_close_event+0x64>
10065eda:	9803      	ldr	r0, [sp, #12]
10065edc:	1828      	adds	r0, r5, r0
10065ede:	2109      	movs	r1, #9
10065ee0:	0149      	lsls	r1, r1, #5
10065ee2:	1869      	adds	r1, r5, r1
10065ee4:	89c0      	ldrh	r0, [r0, #14]
10065ee6:	f7f5 fe31 	bl	1005bb4c <llc_subrate_new_sr_base_event_ucfg_weak>
10065eea:	68a0      	ldr	r0, [r4, #8]
10065eec:	2180      	movs	r1, #128	@ 0x80
10065eee:	4388      	bics	r0, r1
10065ef0:	60a0      	str	r0, [r4, #8]
10065ef2:	4628      	mov	r0, r5
10065ef4:	4639      	mov	r1, r7
10065ef6:	f7f4 fe31 	bl	1005ab5c <llc_conn_check_instant_and_set_params>
10065efa:	4607      	mov	r7, r0
10065efc:	9804      	ldr	r0, [sp, #16]
10065efe:	8030      	strh	r0, [r6, #0]
10065f00:	2f00      	cmp	r7, #0
10065f02:	d118      	bne.n	10065f36 <llc_conn_close_event+0xb0>
10065f04:	6c68      	ldr	r0, [r5, #68]	@ 0x44
10065f06:	9902      	ldr	r1, [sp, #8]
10065f08:	1a46      	subs	r6, r0, r1
10065f0a:	4628      	mov	r0, r5
10065f0c:	4631      	mov	r1, r6
10065f0e:	f7f4 feb9 	bl	1005ac84 <llc_conn_check_supervision_timer>
10065f12:	4607      	mov	r7, r0
10065f14:	2800      	cmp	r0, #0
10065f16:	d10e      	bne.n	10065f36 <llc_conn_close_event+0xb0>
10065f18:	4628      	mov	r0, r5
10065f1a:	4631      	mov	r1, r6
10065f1c:	f7f4 fde8 	bl	1005aaf0 <llc_conn_check_ctrl_proc_rsp_timer>
10065f20:	4607      	mov	r7, r0
10065f22:	2800      	cmp	r0, #0
10065f24:	d107      	bne.n	10065f36 <llc_conn_close_event+0xb0>
10065f26:	4628      	mov	r0, r5
10065f28:	4631      	mov	r1, r6
10065f2a:	9a01      	ldr	r2, [sp, #4]
10065f2c:	f7f5 fb1c 	bl	1005b568 <llc_conn_set_taskslot_params>
10065f30:	4607      	mov	r7, r0
10065f32:	2800      	cmp	r0, #0
10065f34:	d006      	beq.n	10065f44 <llc_conn_close_event+0xbe>
10065f36:	352d      	adds	r5, #45	@ 0x2d
10065f38:	7d28      	ldrb	r0, [r5, #20]
10065f3a:	f7fa fc5b 	bl	100607f4 <LL_sched_delete_taskslot>
10065f3e:	702f      	strb	r7, [r5, #0]
10065f40:	2000      	movs	r0, #0
10065f42:	8360      	strh	r0, [r4, #26]
10065f44:	6820      	ldr	r0, [r4, #0]
10065f46:	2800      	cmp	r0, #0
10065f48:	d001      	beq.n	10065f4e <llc_conn_close_event+0xc8>
10065f4a:	69c6      	ldr	r6, [r0, #28]
10065f4c:	e00d      	b.n	10065f6a <llc_conn_close_event+0xe4>
10065f4e:	2600      	movs	r6, #0
10065f50:	e00b      	b.n	10065f6a <llc_conn_close_event+0xe4>
10065f52:	4635      	mov	r5, r6
10065f54:	69f6      	ldr	r6, [r6, #28]
10065f56:	7a28      	ldrb	r0, [r5, #8]
10065f58:	0700      	lsls	r0, r0, #28
10065f5a:	d506      	bpl.n	10065f6a <llc_conn_close_event+0xe4>
10065f5c:	4620      	mov	r0, r4
10065f5e:	4629      	mov	r1, r5
10065f60:	f7fc fe14 	bl	10062b8c <ACL_list_remove>
10065f64:	4628      	mov	r0, r5
10065f66:	f7ee ff0d 	bl	10054d84 <ACL_pkt_release>
10065f6a:	2e00      	cmp	r6, #0
10065f6c:	d1f1      	bne.n	10065f52 <llc_conn_close_event+0xcc>
10065f6e:	b005      	add	sp, #20
10065f70:	bdf0      	pop	{r4, r5, r6, r7, pc}

10065f72 <llc_conn_decrement_enc_count_rx>:
10065f72:	b51c      	push	{r2, r3, r4, lr}
10065f74:	4604      	mov	r4, r0
10065f76:	4669      	mov	r1, sp
10065f78:	f7ed ff23 	bl	10053dc2 <BLEPLAT_CNTR_SmGetRxCount>
10065f7c:	9800      	ldr	r0, [sp, #0]
10065f7e:	1e41      	subs	r1, r0, #1
10065f80:	9100      	str	r1, [sp, #0]
10065f82:	2800      	cmp	r0, #0
10065f84:	d102      	bne.n	10065f8c <llc_conn_decrement_enc_count_rx+0x1a>
10065f86:	9801      	ldr	r0, [sp, #4]
10065f88:	1e40      	subs	r0, r0, #1
10065f8a:	9001      	str	r0, [sp, #4]
10065f8c:	4669      	mov	r1, sp
10065f8e:	4620      	mov	r0, r4
10065f90:	f7ee f82a 	bl	10053fe8 <BLEPLAT_CNTR_SmSetRxCount>
10065f94:	bd1c      	pop	{r2, r3, r4, pc}
	...

10065f98 <llc_check_sreq_or_creq_tx_addr_res_off>:
10065f98:	b570      	push	{r4, r5, r6, lr}
10065f9a:	b084      	sub	sp, #16
10065f9c:	4615      	mov	r5, r2
10065f9e:	460a      	mov	r2, r1
10065fa0:	4604      	mov	r4, r0
10065fa2:	2b00      	cmp	r3, #0
10065fa4:	d007      	beq.n	10065fb6 <llc_check_sreq_or_creq_tx_addr_res_off+0x1e>
10065fa6:	980a      	ldr	r0, [sp, #40]	@ 0x28
10065fa8:	4282      	cmp	r2, r0
10065faa:	d11f      	bne.n	10065fec <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
10065fac:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10065fae:	4068      	eors	r0, r5
10065fb0:	0200      	lsls	r0, r0, #8
10065fb2:	d11b      	bne.n	10065fec <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
10065fb4:	e01b      	b.n	10065fee <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
10065fb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
10065fb8:	9908      	ldr	r1, [sp, #32]
10065fba:	2301      	movs	r3, #1
10065fbc:	2900      	cmp	r1, #0
10065fbe:	d002      	beq.n	10065fc6 <llc_check_sreq_or_creq_tx_addr_res_off+0x2e>
10065fc0:	4606      	mov	r6, r0
10065fc2:	401e      	ands	r6, r3
10065fc4:	d104      	bne.n	10065fd0 <llc_check_sreq_or_creq_tx_addr_res_off+0x38>
10065fc6:	2900      	cmp	r1, #0
10065fc8:	d111      	bne.n	10065fee <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
10065fca:	2102      	movs	r1, #2
10065fcc:	4008      	ands	r0, r1
10065fce:	d00e      	beq.n	10065fee <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
10065fd0:	4808      	ldr	r0, [pc, #32]	@ (10065ff4 <__arm_cp.1_0>)
10065fd2:	6800      	ldr	r0, [r0, #0]
10065fd4:	219c      	movs	r1, #156	@ 0x9c
10065fd6:	5841      	ldr	r1, [r0, r1]
10065fd8:	68c8      	ldr	r0, [r1, #12]
10065fda:	6909      	ldr	r1, [r1, #16]
10065fdc:	ae03      	add	r6, sp, #12
10065fde:	9300      	str	r3, [sp, #0]
10065fe0:	9601      	str	r6, [sp, #4]
10065fe2:	462b      	mov	r3, r5
10065fe4:	f7fc fdfc 	bl	10062be0 <addr8_list_search>
10065fe8:	2800      	cmp	r0, #0
10065fea:	d100      	bne.n	10065fee <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
10065fec:	24ff      	movs	r4, #255	@ 0xff
10065fee:	4620      	mov	r0, r4
10065ff0:	b004      	add	sp, #16
10065ff2:	bd70      	pop	{r4, r5, r6, pc}

10065ff4 <__arm_cp.1_0>:
10065ff4:	20002470 	.word	0x20002470

10065ff8 <llc_check_sreq_or_creq_tx_addr_ucfg_weak>:
10065ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
10065ffa:	b087      	sub	sp, #28
10065ffc:	1ecd      	subs	r5, r1, #3
10065ffe:	21ff      	movs	r1, #255	@ 0xff
10066000:	24fd      	movs	r4, #253	@ 0xfd
10066002:	4225      	tst	r5, r4
10066004:	d11c      	bne.n	10066040 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
10066006:	2a00      	cmp	r2, #0
10066008:	d01a      	beq.n	10066040 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
1006600a:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1006600c:	990c      	ldr	r1, [sp, #48]	@ 0x30
1006600e:	680c      	ldr	r4, [r1, #0]
10066010:	9405      	str	r4, [sp, #20]
10066012:	9306      	str	r3, [sp, #24]
10066014:	684b      	ldr	r3, [r1, #4]
10066016:	c882      	ldmia	r0!, {r1, r7}
10066018:	20ff      	movs	r0, #255	@ 0xff
1006601a:	0600      	lsls	r0, r0, #24
1006601c:	463c      	mov	r4, r7
1006601e:	4384      	bics	r4, r0
10066020:	c612      	stmia	r6!, {r1, r4}
10066022:	9303      	str	r3, [sp, #12]
10066024:	9805      	ldr	r0, [sp, #20]
10066026:	9002      	str	r0, [sp, #8]
10066028:	9806      	ldr	r0, [sp, #24]
1006602a:	9001      	str	r0, [sp, #4]
1006602c:	4268      	negs	r0, r5
1006602e:	4168      	adcs	r0, r5
10066030:	9000      	str	r0, [sp, #0]
10066032:	b2c8      	uxtb	r0, r1
10066034:	0752      	lsls	r2, r2, #29
10066036:	0fd3      	lsrs	r3, r2, #31
10066038:	463a      	mov	r2, r7
1006603a:	f7ff ffad 	bl	10065f98 <llc_check_sreq_or_creq_tx_addr_res_off>
1006603e:	4601      	mov	r1, r0
10066040:	4608      	mov	r0, r1
10066042:	b007      	add	sp, #28
10066044:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10066048 <llc_wl_mem_allocate>:
10066048:	b510      	push	{r4, lr}
1006604a:	2401      	movs	r4, #1
1006604c:	4084      	lsls	r4, r0
1006604e:	2108      	movs	r1, #8
10066050:	4620      	mov	r0, r4
10066052:	f7fa fdbf 	bl	10060bd4 <csmem_mem_0_assign>
10066056:	4903      	ldr	r1, [pc, #12]	@ (10066064 <__arm_cp.0_0>)
10066058:	6809      	ldr	r1, [r1, #0]
1006605a:	229c      	movs	r2, #156	@ 0x9c
1006605c:	5889      	ldr	r1, [r1, r2]
1006605e:	744c      	strb	r4, [r1, #17]
10066060:	60c8      	str	r0, [r1, #12]
10066062:	bd10      	pop	{r4, pc}

10066064 <__arm_cp.0_0>:
10066064:	20002470 	.word	0x20002470

10066068 <llc_padv_mem_allocate_ucfg_weak>:
10066068:	4770      	bx	lr

1006606a <llc_padv_init_ucfg_weak>:
1006606a:	4770      	bx	lr

1006606c <llc_past_mem_allocate_ucfg_weak>:
1006606c:	4770      	bx	lr
	...

10066070 <llc_priv_mem_allocate>:
10066070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10066072:	2800      	cmp	r0, #0
10066074:	d046      	beq.n	10066104 <llc_priv_mem_allocate+0x94>
10066076:	460e      	mov	r6, r1
10066078:	2501      	movs	r5, #1
1006607a:	2168      	movs	r1, #104	@ 0x68
1006607c:	4628      	mov	r0, r5
1006607e:	f7fa fda9 	bl	10060bd4 <csmem_mem_0_assign>
10066082:	4f21      	ldr	r7, [pc, #132]	@ (10066108 <__arm_cp.0_0>)
10066084:	6839      	ldr	r1, [r7, #0]
10066086:	249c      	movs	r4, #156	@ 0x9c
10066088:	5909      	ldr	r1, [r1, r4]
1006608a:	6088      	str	r0, [r1, #8]
1006608c:	40b5      	lsls	r5, r6
1006608e:	b2ee      	uxtb	r6, r5
10066090:	2108      	movs	r1, #8
10066092:	4630      	mov	r0, r6
10066094:	f7fa fd9e 	bl	10060bd4 <csmem_mem_0_assign>
10066098:	6839      	ldr	r1, [r7, #0]
1006609a:	5909      	ldr	r1, [r1, r4]
1006609c:	6889      	ldr	r1, [r1, #8]
1006609e:	724d      	strb	r5, [r1, #9]
100660a0:	6048      	str	r0, [r1, #4]
100660a2:	9600      	str	r6, [sp, #0]
100660a4:	0075      	lsls	r5, r6, #1
100660a6:	2611      	movs	r6, #17
100660a8:	2e21      	cmp	r6, #33	@ 0x21
100660aa:	d00f      	beq.n	100660cc <llc_priv_mem_allocate+0x5c>
100660ac:	2108      	movs	r1, #8
100660ae:	4628      	mov	r0, r5
100660b0:	f7fa fd90 	bl	10060bd4 <csmem_mem_0_assign>
100660b4:	6839      	ldr	r1, [r7, #0]
100660b6:	5909      	ldr	r1, [r1, r4]
100660b8:	6889      	ldr	r1, [r1, #8]
100660ba:	1989      	adds	r1, r1, r6
100660bc:	1f49      	subs	r1, r1, #5
100660be:	6008      	str	r0, [r1, #0]
100660c0:	6838      	ldr	r0, [r7, #0]
100660c2:	5900      	ldr	r0, [r0, r4]
100660c4:	6880      	ldr	r0, [r0, #8]
100660c6:	5585      	strb	r5, [r0, r6]
100660c8:	3608      	adds	r6, #8
100660ca:	e7ed      	b.n	100660a8 <llc_priv_mem_allocate+0x38>
100660cc:	2128      	movs	r1, #40	@ 0x28
100660ce:	9800      	ldr	r0, [sp, #0]
100660d0:	f7fa fd80 	bl	10060bd4 <csmem_mem_0_assign>
100660d4:	6839      	ldr	r1, [r7, #0]
100660d6:	5909      	ldr	r1, [r1, r4]
100660d8:	6889      	ldr	r1, [r1, #8]
100660da:	6008      	str	r0, [r1, #0]
100660dc:	480b      	ldr	r0, [pc, #44]	@ (1006610c <__arm_cp.0_1>)
100660de:	2502      	movs	r5, #2
100660e0:	2601      	movs	r6, #1
100660e2:	4629      	mov	r1, r5
100660e4:	4632      	mov	r2, r6
100660e6:	f7fa fd63 	bl	10060bb0 <csmem_mem_assign>
100660ea:	6839      	ldr	r1, [r7, #0]
100660ec:	5909      	ldr	r1, [r1, r4]
100660ee:	6889      	ldr	r1, [r1, #8]
100660f0:	6488      	str	r0, [r1, #72]	@ 0x48
100660f2:	4806      	ldr	r0, [pc, #24]	@ (1006610c <__arm_cp.0_1>)
100660f4:	4631      	mov	r1, r6
100660f6:	462a      	mov	r2, r5
100660f8:	f7fa fd5a 	bl	10060bb0 <csmem_mem_assign>
100660fc:	6839      	ldr	r1, [r7, #0]
100660fe:	5909      	ldr	r1, [r1, r4]
10066100:	6889      	ldr	r1, [r1, #8]
10066102:	64c8      	str	r0, [r1, #76]	@ 0x4c
10066104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066106:	46c0      	nop			@ (mov r8, r8)

10066108 <__arm_cp.0_0>:
10066108:	20002470 	.word	0x20002470

1006610c <__arm_cp.0_1>:
1006610c:	20002480 	.word	0x20002480

10066110 <llc_pscan_isr_ucfg_weak>:
10066110:	2000      	movs	r0, #0
10066112:	4770      	bx	lr

10066114 <llc_scan_isr_uncoded_ucfg_weak>:
10066114:	2000      	movs	r0, #0
10066116:	4770      	bx	lr

10066118 <llc_scan_isr_coded_ucfg_weak>:
10066118:	2000      	movs	r0, #0
1006611a:	4770      	bx	lr

1006611c <smp_dep_gap_get_local_identity_address>:
1006611c:	b580      	push	{r7, lr}
1006611e:	4a0a      	ldr	r2, [pc, #40]	@ (10066148 <__arm_cp.0_0>)
10066120:	6812      	ldr	r2, [r2, #0]
10066122:	233d      	movs	r3, #61	@ 0x3d
10066124:	5cd2      	ldrb	r2, [r2, r3]
10066126:	7002      	strb	r2, [r0, #0]
10066128:	2a01      	cmp	r2, #1
1006612a:	d005      	beq.n	10066138 <smp_dep_gap_get_local_identity_address+0x1c>
1006612c:	2a00      	cmp	r2, #0
1006612e:	d108      	bne.n	10066142 <smp_dep_gap_get_local_identity_address+0x26>
10066130:	4608      	mov	r0, r1
10066132:	f7f0 f94f 	bl	100563d4 <GAP_get_public_address>
10066136:	e002      	b.n	1006613e <smp_dep_gap_get_local_identity_address+0x22>
10066138:	4608      	mov	r0, r1
1006613a:	f7f0 f955 	bl	100563e8 <GAP_get_static_random_address>
1006613e:	2000      	movs	r0, #0
10066140:	bd80      	pop	{r7, pc}
10066142:	2086      	movs	r0, #134	@ 0x86
10066144:	bd80      	pop	{r7, pc}
10066146:	46c0      	nop			@ (mov r8, r8)

10066148 <__arm_cp.0_0>:
10066148:	200024bc 	.word	0x200024bc

1006614c <smp_dep_l2c_send_acl_packet>:
1006614c:	b570      	push	{r4, r5, r6, lr}
1006614e:	460d      	mov	r5, r1
10066150:	4606      	mov	r6, r0
10066152:	2006      	movs	r0, #6
10066154:	f7f3 fc58 	bl	10059a08 <L2C_send_frame>
10066158:	4604      	mov	r4, r0
1006615a:	2800      	cmp	r0, #0
1006615c:	d003      	beq.n	10066166 <smp_dep_l2c_send_acl_packet+0x1a>
1006615e:	4628      	mov	r0, r5
10066160:	f7ee fe10 	bl	10054d84 <ACL_pkt_release>
10066164:	e008      	b.n	10066178 <smp_dep_l2c_send_acl_packet+0x2c>
10066166:	8930      	ldrh	r0, [r6, #8]
10066168:	f001 f8de 	bl	10067328 <smp_get_remote_device_list_index>
1006616c:	4602      	mov	r2, r0
1006616e:	2000      	movs	r0, #0
10066170:	4b02      	ldr	r3, [pc, #8]	@ (1006617c <__arm_cp.0_0>)
10066172:	4601      	mov	r1, r0
10066174:	f7fb fda0 	bl	10061cb8 <smp_timer_reset>
10066178:	4620      	mov	r0, r4
1006617a:	bd70      	pop	{r4, r5, r6, pc}

1006617c <__arm_cp.0_0>:
1006617c:	00007530 	.word	0x00007530

10066180 <smp_dep_l2c_send_acl_short_pdu>:
10066180:	b5b0      	push	{r4, r5, r7, lr}
10066182:	461c      	mov	r4, r3
10066184:	4615      	mov	r5, r2
10066186:	2900      	cmp	r1, #0
10066188:	d107      	bne.n	1006619a <smp_dep_l2c_send_acl_short_pdu+0x1a>
1006618a:	8901      	ldrh	r1, [r0, #8]
1006618c:	2000      	movs	r0, #0
1006618e:	2206      	movs	r2, #6
10066190:	f7ee fdd6 	bl	10054d40 <ACL_pkt_get>
10066194:	4601      	mov	r1, r0
10066196:	2800      	cmp	r0, #0
10066198:	d009      	beq.n	100661ae <smp_dep_l2c_send_acl_short_pdu+0x2e>
1006619a:	2002      	movs	r0, #2
1006619c:	8048      	strh	r0, [r1, #2]
1006619e:	6848      	ldr	r0, [r1, #4]
100661a0:	7205      	strb	r5, [r0, #8]
100661a2:	6848      	ldr	r0, [r1, #4]
100661a4:	7244      	strb	r4, [r0, #9]
100661a6:	2006      	movs	r0, #6
100661a8:	f7f3 fc2e 	bl	10059a08 <L2C_send_frame>
100661ac:	bdb0      	pop	{r4, r5, r7, pc}
100661ae:	2088      	movs	r0, #136	@ 0x88
100661b0:	bdb0      	pop	{r4, r5, r7, pc}

100661b2 <smp_dep_sdb_get_bonding_records_count>:
100661b2:	b580      	push	{r7, lr}
100661b4:	f7fb f8dc 	bl	10061370 <sdb_sap_get_security_records_count>
100661b8:	bd80      	pop	{r7, pc}

100661ba <smp_dep_sdb_add_bonding_record>:
100661ba:	b5f0      	push	{r4, r5, r6, r7, lr}
100661bc:	b097      	sub	sp, #92	@ 0x5c
100661be:	4604      	mov	r4, r0
100661c0:	ae03      	add	r6, sp, #12
100661c2:	2100      	movs	r1, #0
100661c4:	2250      	movs	r2, #80	@ 0x50
100661c6:	4630      	mov	r0, r6
100661c8:	f7ec fa54 	bl	10052674 <BLEPLAT_MemSet>
100661cc:	2059      	movs	r0, #89	@ 0x59
100661ce:	5c20      	ldrb	r0, [r4, r0]
100661d0:	7871      	ldrb	r1, [r6, #1]
100661d2:	4301      	orrs	r1, r0
100661d4:	7071      	strb	r1, [r6, #1]
100661d6:	4630      	mov	r0, r6
100661d8:	303e      	adds	r0, #62	@ 0x3e
100661da:	4621      	mov	r1, r4
100661dc:	315a      	adds	r1, #90	@ 0x5a
100661de:	2506      	movs	r5, #6
100661e0:	462a      	mov	r2, r5
100661e2:	f7ec fa37 	bl	10052654 <BLEPLAT_MemCpy>
100661e6:	7c20      	ldrb	r0, [r4, #16]
100661e8:	70f0      	strb	r0, [r6, #3]
100661ea:	7de0      	ldrb	r0, [r4, #23]
100661ec:	0701      	lsls	r1, r0, #28
100661ee:	d416      	bmi.n	1006621e <smp_dep_sdb_add_bonding_record+0x64>
100661f0:	2011      	movs	r0, #17
100661f2:	5620      	ldrsb	r0, [r4, r0]
100661f4:	2800      	cmp	r0, #0
100661f6:	d504      	bpl.n	10066202 <smp_dep_sdb_add_bonding_record+0x48>
100661f8:	a803      	add	r0, sp, #12
100661fa:	7841      	ldrb	r1, [r0, #1]
100661fc:	2280      	movs	r2, #128	@ 0x80
100661fe:	430a      	orrs	r2, r1
10066200:	7042      	strb	r2, [r0, #1]
10066202:	ae03      	add	r6, sp, #12
10066204:	1d30      	adds	r0, r6, #4
10066206:	4621      	mov	r1, r4
10066208:	311e      	adds	r1, #30
1006620a:	2202      	movs	r2, #2
1006620c:	f7ec fa22 	bl	10052654 <BLEPLAT_MemCpy>
10066210:	1db0      	adds	r0, r6, #6
10066212:	4621      	mov	r1, r4
10066214:	3120      	adds	r1, #32
10066216:	2208      	movs	r2, #8
10066218:	f7ec fa1c 	bl	10052654 <BLEPLAT_MemCpy>
1006621c:	e003      	b.n	10066226 <smp_dep_sdb_add_bonding_record+0x6c>
1006621e:	21fe      	movs	r1, #254	@ 0xfe
10066220:	4008      	ands	r0, r1
10066222:	a903      	add	r1, sp, #12
10066224:	7088      	strb	r0, [r1, #2]
10066226:	a803      	add	r0, sp, #12
10066228:	300e      	adds	r0, #14
1006622a:	4621      	mov	r1, r4
1006622c:	3128      	adds	r1, #40	@ 0x28
1006622e:	2610      	movs	r6, #16
10066230:	4632      	mov	r2, r6
10066232:	f7ec fa0f 	bl	10052654 <BLEPLAT_MemCpy>
10066236:	7c60      	ldrb	r0, [r4, #17]
10066238:	0681      	lsls	r1, r0, #26
1006623a:	d50c      	bpl.n	10066256 <smp_dep_sdb_add_bonding_record+0x9c>
1006623c:	af03      	add	r7, sp, #12
1006623e:	4638      	mov	r0, r7
10066240:	301e      	adds	r0, #30
10066242:	4621      	mov	r1, r4
10066244:	3138      	adds	r1, #56	@ 0x38
10066246:	2210      	movs	r2, #16
10066248:	f7ec fa04 	bl	10052654 <BLEPLAT_MemCpy>
1006624c:	7878      	ldrb	r0, [r7, #1]
1006624e:	2120      	movs	r1, #32
10066250:	4301      	orrs	r1, r0
10066252:	7079      	strb	r1, [r7, #1]
10066254:	7c60      	ldrb	r0, [r4, #17]
10066256:	0640      	lsls	r0, r0, #25
10066258:	d50b      	bpl.n	10066272 <smp_dep_sdb_add_bonding_record+0xb8>
1006625a:	af03      	add	r7, sp, #12
1006625c:	4638      	mov	r0, r7
1006625e:	302e      	adds	r0, #46	@ 0x2e
10066260:	4621      	mov	r1, r4
10066262:	3148      	adds	r1, #72	@ 0x48
10066264:	2210      	movs	r2, #16
10066266:	f7ec f9f5 	bl	10052654 <BLEPLAT_MemCpy>
1006626a:	7878      	ldrb	r0, [r7, #1]
1006626c:	2140      	movs	r1, #64	@ 0x40
1006626e:	4301      	orrs	r1, r0
10066270:	7079      	strb	r1, [r7, #1]
10066272:	7ca0      	ldrb	r0, [r4, #18]
10066274:	2105      	movs	r1, #5
10066276:	4208      	tst	r0, r1
10066278:	d00a      	beq.n	10066290 <smp_dep_sdb_add_bonding_record+0xd6>
1006627a:	af03      	add	r7, sp, #12
1006627c:	4638      	mov	r0, r7
1006627e:	3044      	adds	r0, #68	@ 0x44
10066280:	4621      	mov	r1, r4
10066282:	311c      	adds	r1, #28
10066284:	2202      	movs	r2, #2
10066286:	f7ec f9e5 	bl	10052654 <BLEPLAT_MemCpy>
1006628a:	7878      	ldrb	r0, [r7, #1]
1006628c:	4330      	orrs	r0, r6
1006628e:	e001      	b.n	10066294 <smp_dep_sdb_add_bonding_record+0xda>
10066290:	a803      	add	r0, sp, #12
10066292:	7840      	ldrb	r0, [r0, #1]
10066294:	7ae1      	ldrb	r1, [r4, #11]
10066296:	4029      	ands	r1, r5
10066298:	4301      	orrs	r1, r0
1006629a:	a803      	add	r0, sp, #12
1006629c:	7041      	strb	r1, [r0, #1]
1006629e:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
100662a0:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
100662a2:	9115      	str	r1, [sp, #84]	@ 0x54
100662a4:	9216      	str	r2, [sp, #88]	@ 0x58
100662a6:	f7fb f867 	bl	10061378 <sdb_sap_add_security_record>
100662aa:	4605      	mov	r5, r0
100662ac:	2800      	cmp	r0, #0
100662ae:	d00c      	beq.n	100662ca <smp_dep_sdb_add_bonding_record+0x110>
100662b0:	1ca1      	adds	r1, r4, #2
100662b2:	ac01      	add	r4, sp, #4
100662b4:	2206      	movs	r2, #6
100662b6:	4620      	mov	r0, r4
100662b8:	f7ec f9cc 	bl	10052654 <BLEPLAT_MemCpy>
100662bc:	71a5      	strb	r5, [r4, #6]
100662be:	2042      	movs	r0, #66	@ 0x42
100662c0:	2105      	movs	r1, #5
100662c2:	2207      	movs	r2, #7
100662c4:	4623      	mov	r3, r4
100662c6:	f7fd fe51 	bl	10063f6c <aci_hal_fw_error_event_push_noinline>
100662ca:	4628      	mov	r0, r5
100662cc:	b017      	add	sp, #92	@ 0x5c
100662ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

100662d0 <smp_dep_sdb_find_bonding_record_by_conn_addr>:
100662d0:	b570      	push	{r4, r5, r6, lr}
100662d2:	b094      	sub	sp, #80	@ 0x50
100662d4:	460e      	mov	r6, r1
100662d6:	4604      	mov	r4, r0
100662d8:	7841      	ldrb	r1, [r0, #1]
100662da:	1c80      	adds	r0, r0, #2
100662dc:	466a      	mov	r2, sp
100662de:	f7fb f86e 	bl	100613be <sdb_sap_read_security_record>
100662e2:	4605      	mov	r5, r0
100662e4:	2e00      	cmp	r6, #0
100662e6:	d005      	beq.n	100662f4 <smp_dep_sdb_find_bonding_record_by_conn_addr+0x24>
100662e8:	2d00      	cmp	r5, #0
100662ea:	d103      	bne.n	100662f4 <smp_dep_sdb_find_bonding_record_by_conn_addr+0x24>
100662ec:	4668      	mov	r0, sp
100662ee:	4621      	mov	r1, r4
100662f0:	f000 f804 	bl	100662fc <smp_dep_sdb_copy_bonding_record_data_to_remdev>
100662f4:	4628      	mov	r0, r5
100662f6:	b014      	add	sp, #80	@ 0x50
100662f8:	bd70      	pop	{r4, r5, r6, pc}
	...

100662fc <smp_dep_sdb_copy_bonding_record_data_to_remdev>:
100662fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100662fe:	460c      	mov	r4, r1
10066300:	4605      	mov	r5, r0
10066302:	2001      	movs	r0, #1
10066304:	7388      	strb	r0, [r1, #14]
10066306:	78e8      	ldrb	r0, [r5, #3]
10066308:	7408      	strb	r0, [r1, #16]
1006630a:	4608      	mov	r0, r1
1006630c:	301c      	adds	r0, #28
1006630e:	4629      	mov	r1, r5
10066310:	3144      	adds	r1, #68	@ 0x44
10066312:	2602      	movs	r6, #2
10066314:	4f19      	ldr	r7, [pc, #100]	@ (1006637c <__arm_cp.3_0>)
10066316:	4632      	mov	r2, r6
10066318:	47b8      	blx	r7
1006631a:	4620      	mov	r0, r4
1006631c:	301e      	adds	r0, #30
1006631e:	1d29      	adds	r1, r5, #4
10066320:	4632      	mov	r2, r6
10066322:	47b8      	blx	r7
10066324:	4620      	mov	r0, r4
10066326:	3020      	adds	r0, #32
10066328:	1da9      	adds	r1, r5, #6
1006632a:	2208      	movs	r2, #8
1006632c:	47b8      	blx	r7
1006632e:	4620      	mov	r0, r4
10066330:	3028      	adds	r0, #40	@ 0x28
10066332:	4629      	mov	r1, r5
10066334:	310e      	adds	r1, #14
10066336:	2610      	movs	r6, #16
10066338:	4632      	mov	r2, r6
1006633a:	47b8      	blx	r7
1006633c:	4620      	mov	r0, r4
1006633e:	3038      	adds	r0, #56	@ 0x38
10066340:	4629      	mov	r1, r5
10066342:	311e      	adds	r1, #30
10066344:	4632      	mov	r2, r6
10066346:	47b8      	blx	r7
10066348:	4620      	mov	r0, r4
1006634a:	3048      	adds	r0, #72	@ 0x48
1006634c:	4629      	mov	r1, r5
1006634e:	312e      	adds	r1, #46	@ 0x2e
10066350:	4632      	mov	r2, r6
10066352:	47b8      	blx	r7
10066354:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
10066356:	66a0      	str	r0, [r4, #104]	@ 0x68
10066358:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
1006635a:	66e0      	str	r0, [r4, #108]	@ 0x6c
1006635c:	7868      	ldrb	r0, [r5, #1]
1006635e:	2106      	movs	r1, #6
10066360:	4001      	ands	r1, r0
10066362:	72e1      	strb	r1, [r4, #11]
10066364:	21e0      	movs	r1, #224	@ 0xe0
10066366:	4001      	ands	r1, r0
10066368:	7c60      	ldrb	r0, [r4, #17]
1006636a:	4308      	orrs	r0, r1
1006636c:	7460      	strb	r0, [r4, #17]
1006636e:	78a8      	ldrb	r0, [r5, #2]
10066370:	0701      	lsls	r1, r0, #28
10066372:	d502      	bpl.n	1006637a <smp_dep_sdb_copy_bonding_record_data_to_remdev+0x7e>
10066374:	21fe      	movs	r1, #254	@ 0xfe
10066376:	4008      	ands	r0, r1
10066378:	75e0      	strb	r0, [r4, #23]
1006637a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1006637c <__arm_cp.3_0>:
1006637c:	10052655 	.word	0x10052655

10066380 <smp_dep_sdb_find_bonding_record_read_address>:
10066380:	b570      	push	{r4, r5, r6, lr}
10066382:	b094      	sub	sp, #80	@ 0x50
10066384:	4614      	mov	r4, r2
10066386:	460e      	mov	r6, r1
10066388:	7841      	ldrb	r1, [r0, #1]
1006638a:	1c80      	adds	r0, r0, #2
1006638c:	466a      	mov	r2, sp
1006638e:	f7fb f816 	bl	100613be <sdb_sap_read_security_record>
10066392:	4605      	mov	r5, r0
10066394:	2800      	cmp	r0, #0
10066396:	d107      	bne.n	100663a8 <smp_dep_sdb_find_bonding_record_read_address+0x28>
10066398:	2000      	movs	r0, #0
1006639a:	7030      	strb	r0, [r6, #0]
1006639c:	4669      	mov	r1, sp
1006639e:	313e      	adds	r1, #62	@ 0x3e
100663a0:	2206      	movs	r2, #6
100663a2:	4620      	mov	r0, r4
100663a4:	f7ec f956 	bl	10052654 <BLEPLAT_MemCpy>
100663a8:	4628      	mov	r0, r5
100663aa:	b014      	add	sp, #80	@ 0x50
100663ac:	bd70      	pop	{r4, r5, r6, pc}

100663ae <smp_dep_sdb_find_matching_ltk_read_record>:
100663ae:	b5b0      	push	{r4, r5, r7, lr}
100663b0:	b094      	sub	sp, #80	@ 0x50
100663b2:	4614      	mov	r4, r2
100663b4:	466a      	mov	r2, sp
100663b6:	f7fb f87b 	bl	100614b0 <sdb_sap_read_security_record_matching>
100663ba:	4605      	mov	r5, r0
100663bc:	2800      	cmp	r0, #0
100663be:	d103      	bne.n	100663c8 <smp_dep_sdb_find_matching_ltk_read_record+0x1a>
100663c0:	4668      	mov	r0, sp
100663c2:	4621      	mov	r1, r4
100663c4:	f7ff ff9a 	bl	100662fc <smp_dep_sdb_copy_bonding_record_data_to_remdev>
100663c8:	4628      	mov	r0, r5
100663ca:	b014      	add	sp, #80	@ 0x50
100663cc:	bdb0      	pop	{r4, r5, r7, pc}

100663ce <smp_start_encryption_ucfg_weak>:
100663ce:	201f      	movs	r0, #31
100663d0:	4770      	bx	lr
	...

100663d4 <smp_pp3_pairing_completed_successful>:
100663d4:	b570      	push	{r4, r5, r6, lr}
100663d6:	4604      	mov	r4, r0
100663d8:	7b80      	ldrb	r0, [r0, #14]
100663da:	2103      	movs	r1, #3
100663dc:	4001      	ands	r1, r0
100663de:	8925      	ldrh	r5, [r4, #8]
100663e0:	2903      	cmp	r1, #3
100663e2:	d10a      	bne.n	100663fa <smp_pp3_pairing_completed_successful+0x26>
100663e4:	4620      	mov	r0, r4
100663e6:	f7ff fee8 	bl	100661ba <smp_dep_sdb_add_bonding_record>
100663ea:	2800      	cmp	r0, #0
100663ec:	d005      	beq.n	100663fa <smp_pp3_pairing_completed_successful+0x26>
100663ee:	2108      	movs	r1, #8
100663f0:	2200      	movs	r2, #0
100663f2:	4620      	mov	r0, r4
100663f4:	f000 f826 	bl	10066444 <smp_pp3_pairing_process_abort>
100663f8:	bd70      	pop	{r4, r5, r6, pc}
100663fa:	4628      	mov	r0, r5
100663fc:	f000 ff94 	bl	10067328 <smp_get_remote_device_list_index>
10066400:	4602      	mov	r2, r0
10066402:	2001      	movs	r0, #1
10066404:	2100      	movs	r1, #0
10066406:	4b0e      	ldr	r3, [pc, #56]	@ (10066440 <__arm_cp.0_0>)
10066408:	f7fb fc56 	bl	10061cb8 <smp_timer_reset>
1006640c:	7ce0      	ldrb	r0, [r4, #19]
1006640e:	2803      	cmp	r0, #3
10066410:	d102      	bne.n	10066418 <smp_pp3_pairing_completed_successful+0x44>
10066412:	2000      	movs	r0, #0
10066414:	f000 ffe6 	bl	100673e4 <smp_oob_clear_remote_data_entry>
10066418:	4620      	mov	r0, r4
1006641a:	3018      	adds	r0, #24
1006641c:	2600      	movs	r6, #0
1006641e:	2204      	movs	r2, #4
10066420:	4631      	mov	r1, r6
10066422:	f7ec f927 	bl	10052674 <BLEPLAT_MemSet>
10066426:	4620      	mov	r0, r4
10066428:	4631      	mov	r1, r6
1006642a:	f000 f83b 	bl	100664a4 <smp_pp3_pairing_completed_update_stats>
1006642e:	20f1      	movs	r0, #241	@ 0xf1
10066430:	72a0      	strb	r0, [r4, #10]
10066432:	2002      	movs	r0, #2
10066434:	4629      	mov	r1, r5
10066436:	4632      	mov	r2, r6
10066438:	4633      	mov	r3, r6
1006643a:	f7fd fe0b 	bl	10064054 <aci_gap_pairing_complete_event_push_noinline>
1006643e:	bd70      	pop	{r4, r5, r6, pc}

10066440 <__arm_cp.0_0>:
10066440:	00007530 	.word	0x00007530

10066444 <smp_pp3_pairing_process_abort>:
10066444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10066446:	4616      	mov	r6, r2
10066448:	460c      	mov	r4, r1
1006644a:	4605      	mov	r5, r0
1006644c:	8900      	ldrh	r0, [r0, #8]
1006644e:	f000 ff6b 	bl	10067328 <smp_get_remote_device_list_index>
10066452:	4602      	mov	r2, r0
10066454:	2001      	movs	r0, #1
10066456:	2700      	movs	r7, #0
10066458:	4b11      	ldr	r3, [pc, #68]	@ (100664a0 <__arm_cp.1_0>)
1006645a:	4639      	mov	r1, r7
1006645c:	f7fb fc2c 	bl	10061cb8 <smp_timer_reset>
10066460:	8928      	ldrh	r0, [r5, #8]
10066462:	f7fb fbed 	bl	10061c40 <smp_rxp_flush_packet_queues>
10066466:	2102      	movs	r1, #2
10066468:	4628      	mov	r0, r5
1006646a:	f000 f81b 	bl	100664a4 <smp_pp3_pairing_completed_update_stats>
1006646e:	4628      	mov	r0, r5
10066470:	3018      	adds	r0, #24
10066472:	2204      	movs	r2, #4
10066474:	4639      	mov	r1, r7
10066476:	f7ec f8fd 	bl	10052674 <BLEPLAT_MemSet>
1006647a:	7be8      	ldrb	r0, [r5, #15]
1006647c:	212f      	movs	r1, #47	@ 0x2f
1006647e:	4001      	ands	r1, r0
10066480:	73e9      	strb	r1, [r5, #15]
10066482:	2e00      	cmp	r6, #0
10066484:	d004      	beq.n	10066490 <smp_pp3_pairing_process_abort+0x4c>
10066486:	7868      	ldrb	r0, [r5, #1]
10066488:	1ca9      	adds	r1, r5, #2
1006648a:	f000 fe51 	bl	10067130 <smp_cmn_repeated_attacks_protection_start>
1006648e:	27fb      	movs	r7, #251	@ 0xfb
10066490:	72af      	strb	r7, [r5, #10]
10066492:	8929      	ldrh	r1, [r5, #8]
10066494:	2002      	movs	r0, #2
10066496:	4602      	mov	r2, r0
10066498:	4623      	mov	r3, r4
1006649a:	f7fd fddb 	bl	10064054 <aci_gap_pairing_complete_event_push_noinline>
1006649e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100664a0 <__arm_cp.1_0>:
100664a0:	00007530 	.word	0x00007530

100664a4 <smp_pp3_pairing_completed_update_stats>:
100664a4:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100664a6:	2260      	movs	r2, #96	@ 0x60
100664a8:	5c82      	ldrb	r2, [r0, r2]
100664aa:	07d2      	lsls	r2, r2, #31
100664ac:	7a82      	ldrb	r2, [r0, #10]
100664ae:	d104      	bne.n	100664ba <smp_pp3_pairing_completed_update_stats+0x16>
100664b0:	3260      	adds	r2, #96	@ 0x60
100664b2:	b2d2      	uxtb	r2, r2
100664b4:	2a51      	cmp	r2, #81	@ 0x51
100664b6:	d304      	bcc.n	100664c2 <smp_pp3_pairing_completed_update_stats+0x1e>
100664b8:	e00f      	b.n	100664da <smp_pp3_pairing_completed_update_stats+0x36>
100664ba:	3250      	adds	r2, #80	@ 0x50
100664bc:	b2d2      	uxtb	r2, r2
100664be:	2a40      	cmp	r2, #64	@ 0x40
100664c0:	d80b      	bhi.n	100664da <smp_pp3_pairing_completed_update_stats+0x36>
100664c2:	4a09      	ldr	r2, [pc, #36]	@ (100664e8 <__arm_cp.2_0>)
100664c4:	6812      	ldr	r2, [r2, #0]
100664c6:	23b1      	movs	r3, #177	@ 0xb1
100664c8:	5cd3      	ldrb	r3, [r2, r3]
100664ca:	2b00      	cmp	r3, #0
100664cc:	d005      	beq.n	100664da <smp_pp3_pairing_completed_update_stats+0x36>
100664ce:	32b1      	adds	r2, #177	@ 0xb1
100664d0:	7d04      	ldrb	r4, [r0, #20]
100664d2:	2501      	movs	r5, #1
100664d4:	40a5      	lsls	r5, r4
100664d6:	43ab      	bics	r3, r5
100664d8:	7013      	strb	r3, [r2, #0]
100664da:	466a      	mov	r2, sp
100664dc:	7111      	strb	r1, [r2, #4]
100664de:	9000      	str	r0, [sp, #0]
100664e0:	4610      	mov	r0, r2
100664e2:	f000 ffb2 	bl	1006744a <smp_scp_stats_update_on_pairing_complete_ucfg_weak>
100664e6:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100664e8 <__arm_cp.2_0>:
100664e8:	200024bc 	.word	0x200024bc

100664ec <smp_pp3_pairing_failed_receive>:
100664ec:	b5b0      	push	{r4, r5, r7, lr}
100664ee:	460c      	mov	r4, r1
100664f0:	2160      	movs	r1, #96	@ 0x60
100664f2:	5c61      	ldrb	r1, [r4, r1]
100664f4:	2201      	movs	r2, #1
100664f6:	400a      	ands	r2, r1
100664f8:	7aa3      	ldrb	r3, [r4, #10]
100664fa:	6840      	ldr	r0, [r0, #4]
100664fc:	7a41      	ldrb	r1, [r0, #9]
100664fe:	d102      	bne.n	10066506 <smp_pp3_pairing_failed_receive+0x1a>
10066500:	2b9f      	cmp	r3, #159	@ 0x9f
10066502:	d802      	bhi.n	1006650a <smp_pp3_pairing_failed_receive+0x1e>
10066504:	bdb0      	pop	{r4, r5, r7, pc}
10066506:	2bb0      	cmp	r3, #176	@ 0xb0
10066508:	d314      	bcc.n	10066534 <smp_pp3_pairing_failed_receive+0x48>
1006650a:	2bf0      	cmp	r3, #240	@ 0xf0
1006650c:	d915      	bls.n	1006653a <smp_pp3_pairing_failed_receive+0x4e>
1006650e:	2bf1      	cmp	r3, #241	@ 0xf1
10066510:	d10e      	bne.n	10066530 <smp_pp3_pairing_failed_receive+0x44>
10066512:	290f      	cmp	r1, #15
10066514:	d10c      	bne.n	10066530 <smp_pp3_pairing_failed_receive+0x44>
10066516:	4625      	mov	r5, r4
10066518:	3559      	adds	r5, #89	@ 0x59
1006651a:	210f      	movs	r1, #15
1006651c:	2201      	movs	r2, #1
1006651e:	4620      	mov	r0, r4
10066520:	f7ff ff90 	bl	10066444 <smp_pp3_pairing_process_abort>
10066524:	7829      	ldrb	r1, [r5, #0]
10066526:	345a      	adds	r4, #90	@ 0x5a
10066528:	4620      	mov	r0, r4
1006652a:	f7fa ffaf 	bl	1006148c <sdb_sap_del_bonded_device>
1006652e:	bdb0      	pop	{r4, r5, r7, pc}
10066530:	2a00      	cmp	r2, #0
10066532:	d0e7      	beq.n	10066504 <smp_pp3_pairing_failed_receive+0x18>
10066534:	7e20      	ldrb	r0, [r4, #24]
10066536:	0780      	lsls	r0, r0, #30
10066538:	d0e4      	beq.n	10066504 <smp_pp3_pairing_failed_receive+0x18>
1006653a:	2201      	movs	r2, #1
1006653c:	4620      	mov	r0, r4
1006653e:	f7ff ff81 	bl	10066444 <smp_pp3_pairing_process_abort>
10066542:	bdb0      	pop	{r4, r5, r7, pc}

10066544 <smp_pp3_pairing_failed_send>:
10066544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10066546:	461f      	mov	r7, r3
10066548:	4613      	mov	r3, r2
1006654a:	460c      	mov	r4, r1
1006654c:	4605      	mov	r5, r0
1006654e:	2205      	movs	r2, #5
10066550:	4619      	mov	r1, r3
10066552:	4623      	mov	r3, r4
10066554:	f7ff fe14 	bl	10066180 <smp_dep_l2c_send_acl_short_pdu>
10066558:	4606      	mov	r6, r0
1006655a:	2f00      	cmp	r7, #0
1006655c:	d101      	bne.n	10066562 <smp_pp3_pairing_failed_send+0x1e>
1006655e:	2e88      	cmp	r6, #136	@ 0x88
10066560:	d004      	beq.n	1006656c <smp_pp3_pairing_failed_send+0x28>
10066562:	2201      	movs	r2, #1
10066564:	4628      	mov	r0, r5
10066566:	4621      	mov	r1, r4
10066568:	f7ff ff6c 	bl	10066444 <smp_pp3_pairing_process_abort>
1006656c:	4630      	mov	r0, r6
1006656e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10066570 <smp_pp1_get_next_free_pairing_idx>:
10066570:	b510      	push	{r4, lr}
10066572:	490b      	ldr	r1, [pc, #44]	@ (100665a0 <__arm_cp.0_0>)
10066574:	680a      	ldr	r2, [r1, #0]
10066576:	21b1      	movs	r1, #177	@ 0xb1
10066578:	5c53      	ldrb	r3, [r2, r1]
1006657a:	32b1      	adds	r2, #177	@ 0xb1
1006657c:	2100      	movs	r1, #0
1006657e:	2903      	cmp	r1, #3
10066580:	d005      	beq.n	1006658e <smp_pp1_get_next_free_pairing_idx+0x1e>
10066582:	2401      	movs	r4, #1
10066584:	408c      	lsls	r4, r1
10066586:	421c      	tst	r4, r3
10066588:	d003      	beq.n	10066592 <smp_pp1_get_next_free_pairing_idx+0x22>
1006658a:	1c49      	adds	r1, r1, #1
1006658c:	e7f7      	b.n	1006657e <smp_pp1_get_next_free_pairing_idx+0xe>
1006658e:	2103      	movs	r1, #3
10066590:	e003      	b.n	1006659a <smp_pp1_get_next_free_pairing_idx+0x2a>
10066592:	2800      	cmp	r0, #0
10066594:	d001      	beq.n	1006659a <smp_pp1_get_next_free_pairing_idx+0x2a>
10066596:	4323      	orrs	r3, r4
10066598:	7013      	strb	r3, [r2, #0]
1006659a:	b2c8      	uxtb	r0, r1
1006659c:	bd10      	pop	{r4, pc}
1006659e:	46c0      	nop			@ (mov r8, r8)

100665a0 <__arm_cp.0_0>:
100665a0:	200024bc 	.word	0x200024bc

100665a4 <smp_pp1_get_pairing_pdu_offset>:
100665a4:	0100      	lsls	r0, r0, #4
100665a6:	2900      	cmp	r1, #0
100665a8:	d000      	beq.n	100665ac <smp_pp1_get_pairing_pdu_offset+0x8>
100665aa:	3008      	adds	r0, #8
100665ac:	b2c0      	uxtb	r0, r0
100665ae:	4770      	bx	lr

100665b0 <smp_pp1_reqrsp_pdu_params_check>:
100665b0:	b51c      	push	{r2, r3, r4, lr}
100665b2:	2104      	movs	r1, #4
100665b4:	2207      	movs	r2, #7
100665b6:	466c      	mov	r4, sp
100665b8:	4623      	mov	r3, r4
100665ba:	f7ee fbff 	bl	10054dbc <ACL_pkt_read>
100665be:	7862      	ldrb	r2, [r4, #1]
100665c0:	210a      	movs	r1, #10
100665c2:	2a04      	cmp	r2, #4
100665c4:	d813      	bhi.n	100665ee <smp_pp1_reqrsp_pdu_params_check+0x3e>
100665c6:	466a      	mov	r2, sp
100665c8:	7892      	ldrb	r2, [r2, #2]
100665ca:	2a01      	cmp	r2, #1
100665cc:	d80f      	bhi.n	100665ee <smp_pp1_reqrsp_pdu_params_check+0x3e>
100665ce:	466a      	mov	r2, sp
100665d0:	78d2      	ldrb	r2, [r2, #3]
100665d2:	0792      	lsls	r2, r2, #30
100665d4:	d40b      	bmi.n	100665ee <smp_pp1_reqrsp_pdu_params_check+0x3e>
100665d6:	4907      	ldr	r1, [pc, #28]	@ (100665f4 <__arm_cp.2_0>)
100665d8:	6809      	ldr	r1, [r1, #0]
100665da:	2234      	movs	r2, #52	@ 0x34
100665dc:	5c8a      	ldrb	r2, [r1, r2]
100665de:	4669      	mov	r1, sp
100665e0:	7909      	ldrb	r1, [r1, #4]
100665e2:	4291      	cmp	r1, r2
100665e4:	d302      	bcc.n	100665ec <smp_pp1_reqrsp_pdu_params_check+0x3c>
100665e6:	2911      	cmp	r1, #17
100665e8:	4601      	mov	r1, r0
100665ea:	d300      	bcc.n	100665ee <smp_pp1_reqrsp_pdu_params_check+0x3e>
100665ec:	2106      	movs	r1, #6
100665ee:	4608      	mov	r0, r1
100665f0:	bd1c      	pop	{r2, r3, r4, pc}
100665f2:	46c0      	nop			@ (mov r8, r8)

100665f4 <__arm_cp.2_0>:
100665f4:	200024bc 	.word	0x200024bc

100665f8 <smp_pp1_reqrsp_pdu_copy_to_pairing_data>:
100665f8:	b580      	push	{r7, lr}
100665fa:	7d12      	ldrb	r2, [r2, #20]
100665fc:	0112      	lsls	r2, r2, #4
100665fe:	2900      	cmp	r1, #0
10066600:	d000      	beq.n	10066604 <smp_pp1_reqrsp_pdu_copy_to_pairing_data+0xc>
10066602:	3208      	adds	r2, #8
10066604:	b2d1      	uxtb	r1, r2
10066606:	4a04      	ldr	r2, [pc, #16]	@ (10066618 <__arm_cp.3_0>)
10066608:	6812      	ldr	r2, [r2, #0]
1006660a:	1853      	adds	r3, r2, r1
1006660c:	33b4      	adds	r3, #180	@ 0xb4
1006660e:	2104      	movs	r1, #4
10066610:	2207      	movs	r2, #7
10066612:	f7ee fbd3 	bl	10054dbc <ACL_pkt_read>
10066616:	bd80      	pop	{r7, pc}

10066618 <__arm_cp.3_0>:
10066618:	200024bc 	.word	0x200024bc

1006661c <smp_pp1_reqrsp_pdu_extract_from_pairing_data>:
1006661c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006661e:	4924      	ldr	r1, [pc, #144]	@ (100666b0 <__arm_cp.4_0>)
10066620:	6809      	ldr	r1, [r1, #0]
10066622:	7d02      	ldrb	r2, [r0, #20]
10066624:	0112      	lsls	r2, r2, #4
10066626:	3208      	adds	r2, #8
10066628:	b2d2      	uxtb	r2, r2
1006662a:	188b      	adds	r3, r1, r2
1006662c:	24b5      	movs	r4, #181	@ 0xb5
1006662e:	5d1c      	ldrb	r4, [r3, r4]
10066630:	7304      	strb	r4, [r0, #12]
10066632:	24b6      	movs	r4, #182	@ 0xb6
10066634:	5d1b      	ldrb	r3, [r3, r4]
10066636:	2b01      	cmp	r3, #1
10066638:	d103      	bne.n	10066642 <smp_pp1_reqrsp_pdu_extract_from_pairing_data+0x26>
1006663a:	7b43      	ldrb	r3, [r0, #13]
1006663c:	2402      	movs	r4, #2
1006663e:	431c      	orrs	r4, r3
10066640:	7344      	strb	r4, [r0, #13]
10066642:	460b      	mov	r3, r1
10066644:	3336      	adds	r3, #54	@ 0x36
10066646:	2503      	movs	r5, #3
10066648:	4315      	orrs	r5, r2
1006664a:	460c      	mov	r4, r1
1006664c:	34b4      	adds	r4, #180	@ 0xb4
1006664e:	5d65      	ldrb	r5, [r4, r5]
10066650:	2601      	movs	r6, #1
10066652:	402e      	ands	r6, r5
10066654:	7b87      	ldrb	r7, [r0, #14]
10066656:	4337      	orrs	r7, r6
10066658:	7387      	strb	r7, [r0, #14]
1006665a:	2604      	movs	r6, #4
1006665c:	4035      	ands	r5, r6
1006665e:	7bc7      	ldrb	r7, [r0, #15]
10066660:	432f      	orrs	r7, r5
10066662:	73c7      	strb	r7, [r0, #15]
10066664:	4316      	orrs	r6, r2
10066666:	5da5      	ldrb	r5, [r4, r6]
10066668:	7405      	strb	r5, [r0, #16]
1006666a:	2505      	movs	r5, #5
1006666c:	4315      	orrs	r5, r2
1006666e:	5d64      	ldrb	r4, [r4, r5]
10066670:	2560      	movs	r5, #96	@ 0x60
10066672:	5d45      	ldrb	r5, [r0, r5]
10066674:	07ed      	lsls	r5, r5, #31
10066676:	d10e      	bne.n	10066696 <smp_pp1_reqrsp_pdu_extract_from_pairing_data+0x7a>
10066678:	781d      	ldrb	r5, [r3, #0]
1006667a:	402c      	ands	r4, r5
1006667c:	2507      	movs	r5, #7
1006667e:	402c      	ands	r4, r5
10066680:	7484      	strb	r4, [r0, #18]
10066682:	2406      	movs	r4, #6
10066684:	4322      	orrs	r2, r4
10066686:	1889      	adds	r1, r1, r2
10066688:	22b4      	movs	r2, #180	@ 0xb4
1006668a:	5c89      	ldrb	r1, [r1, r2]
1006668c:	785a      	ldrb	r2, [r3, #1]
1006668e:	400a      	ands	r2, r1
10066690:	402a      	ands	r2, r5
10066692:	7442      	strb	r2, [r0, #17]
10066694:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066696:	785d      	ldrb	r5, [r3, #1]
10066698:	4025      	ands	r5, r4
1006669a:	7445      	strb	r5, [r0, #17]
1006669c:	2406      	movs	r4, #6
1006669e:	4322      	orrs	r2, r4
100666a0:	1889      	adds	r1, r1, r2
100666a2:	22b4      	movs	r2, #180	@ 0xb4
100666a4:	5c89      	ldrb	r1, [r1, r2]
100666a6:	781a      	ldrb	r2, [r3, #0]
100666a8:	400a      	ands	r2, r1
100666aa:	7482      	strb	r2, [r0, #18]
100666ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
100666ae:	46c0      	nop			@ (mov r8, r8)

100666b0 <__arm_cp.4_0>:
100666b0:	200024bc 	.word	0x200024bc

100666b4 <smp_pp1_key_generation_method_selection>:
100666b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100666b6:	7b01      	ldrb	r1, [r0, #12]
100666b8:	7b42      	ldrb	r2, [r0, #13]
100666ba:	07d3      	lsls	r3, r2, #31
100666bc:	d001      	beq.n	100666c2 <smp_pp1_key_generation_method_selection+0xe>
100666be:	0793      	lsls	r3, r2, #30
100666c0:	d405      	bmi.n	100666ce <smp_pp1_key_generation_method_selection+0x1a>
100666c2:	7dc3      	ldrb	r3, [r0, #23]
100666c4:	2408      	movs	r4, #8
100666c6:	401c      	ands	r4, r3
100666c8:	d003      	beq.n	100666d2 <smp_pp1_key_generation_method_selection+0x1e>
100666ca:	0792      	lsls	r2, r2, #30
100666cc:	d001      	beq.n	100666d2 <smp_pp1_key_generation_method_selection+0x1e>
100666ce:	2203      	movs	r2, #3
100666d0:	e019      	b.n	10066706 <smp_pp1_key_generation_method_selection+0x52>
100666d2:	7bc3      	ldrb	r3, [r0, #15]
100666d4:	2205      	movs	r2, #5
100666d6:	4213      	tst	r3, r2
100666d8:	d014      	beq.n	10066704 <smp_pp1_key_generation_method_selection+0x50>
100666da:	4b42      	ldr	r3, [pc, #264]	@ (100667e4 <__arm_cp.5_0>)
100666dc:	681b      	ldr	r3, [r3, #0]
100666de:	2540      	movs	r5, #64	@ 0x40
100666e0:	5d5d      	ldrb	r5, [r3, r5]
100666e2:	434a      	muls	r2, r1
100666e4:	4b40      	ldr	r3, [pc, #256]	@ (100667e8 <__arm_cp.5_1>)
100666e6:	189a      	adds	r2, r3, r2
100666e8:	5d52      	ldrb	r2, [r2, r5]
100666ea:	74c2      	strb	r2, [r0, #19]
100666ec:	4603      	mov	r3, r0
100666ee:	3313      	adds	r3, #19
100666f0:	2a00      	cmp	r2, #0
100666f2:	d10b      	bne.n	1006670c <smp_pp1_key_generation_method_selection+0x58>
100666f4:	2c00      	cmp	r4, #0
100666f6:	d13d      	bne.n	10066774 <smp_pp1_key_generation_method_selection+0xc0>
100666f8:	2901      	cmp	r1, #1
100666fa:	d16f      	bne.n	100667dc <smp_pp1_key_generation_method_selection+0x128>
100666fc:	2d01      	cmp	r5, #1
100666fe:	d16d      	bne.n	100667dc <smp_pp1_key_generation_method_selection+0x128>
10066700:	2201      	movs	r2, #1
10066702:	e06c      	b.n	100667de <smp_pp1_key_generation_method_selection+0x12a>
10066704:	2201      	movs	r2, #1
10066706:	74c2      	strb	r2, [r0, #19]
10066708:	4603      	mov	r3, r0
1006670a:	3313      	adds	r3, #19
1006670c:	2460      	movs	r4, #96	@ 0x60
1006670e:	5d05      	ldrb	r5, [r0, r4]
10066710:	2601      	movs	r6, #1
10066712:	4035      	ands	r5, r6
10066714:	d103      	bne.n	1006671e <smp_pp1_key_generation_method_selection+0x6a>
10066716:	241a      	movs	r4, #26
10066718:	5704      	ldrsb	r4, [r0, r4]
1006671a:	2c00      	cmp	r4, #0
1006671c:	d426      	bmi.n	1006676c <smp_pp1_key_generation_method_selection+0xb8>
1006671e:	4604      	mov	r4, r0
10066720:	340f      	adds	r4, #15
10066722:	7824      	ldrb	r4, [r4, #0]
10066724:	07e4      	lsls	r4, r4, #31
10066726:	d004      	beq.n	10066732 <smp_pp1_key_generation_method_selection+0x7e>
10066728:	2a01      	cmp	r2, #1
1006672a:	d102      	bne.n	10066732 <smp_pp1_key_generation_method_selection+0x7e>
1006672c:	2403      	movs	r4, #3
1006672e:	701c      	strb	r4, [r3, #0]
10066730:	e052      	b.n	100667d8 <smp_pp1_key_generation_method_selection+0x124>
10066732:	7dc3      	ldrb	r3, [r0, #23]
10066734:	071b      	lsls	r3, r3, #28
10066736:	d503      	bpl.n	10066740 <smp_pp1_key_generation_method_selection+0x8c>
10066738:	2a02      	cmp	r2, #2
1006673a:	d101      	bne.n	10066740 <smp_pp1_key_generation_method_selection+0x8c>
1006673c:	2300      	movs	r3, #0
1006673e:	76c3      	strb	r3, [r0, #27]
10066740:	2a02      	cmp	r2, #2
10066742:	d111      	bne.n	10066768 <smp_pp1_key_generation_method_selection+0xb4>
10066744:	7bc2      	ldrb	r2, [r0, #15]
10066746:	23ef      	movs	r3, #239	@ 0xef
10066748:	4013      	ands	r3, r2
1006674a:	73c3      	strb	r3, [r0, #15]
1006674c:	4a25      	ldr	r2, [pc, #148]	@ (100667e4 <__arm_cp.5_0>)
1006674e:	6812      	ldr	r2, [r2, #0]
10066750:	2340      	movs	r3, #64	@ 0x40
10066752:	5cd2      	ldrb	r2, [r2, r3]
10066754:	2400      	movs	r4, #0
10066756:	2a02      	cmp	r2, #2
10066758:	4627      	mov	r7, r4
1006675a:	d318      	bcc.n	1006678e <smp_pp1_key_generation_method_selection+0xda>
1006675c:	2a04      	cmp	r2, #4
1006675e:	d00b      	beq.n	10066778 <smp_pp1_key_generation_method_selection+0xc4>
10066760:	2a02      	cmp	r2, #2
10066762:	d113      	bne.n	1006678c <smp_pp1_key_generation_method_selection+0xd8>
10066764:	4637      	mov	r7, r6
10066766:	e012      	b.n	1006678e <smp_pp1_key_generation_method_selection+0xda>
10066768:	2400      	movs	r4, #0
1006676a:	e035      	b.n	100667d8 <smp_pp1_key_generation_method_selection+0x124>
1006676c:	4c1d      	ldr	r4, [pc, #116]	@ (100667e4 <__arm_cp.5_0>)
1006676e:	6824      	ldr	r4, [r4, #0]
10066770:	3431      	adds	r4, #49	@ 0x31
10066772:	e7d6      	b.n	10066722 <smp_pp1_key_generation_method_selection+0x6e>
10066774:	2204      	movs	r2, #4
10066776:	e032      	b.n	100667de <smp_pp1_key_generation_method_selection+0x12a>
10066778:	2902      	cmp	r1, #2
1006677a:	4637      	mov	r7, r6
1006677c:	d307      	bcc.n	1006678e <smp_pp1_key_generation_method_selection+0xda>
1006677e:	2904      	cmp	r1, #4
10066780:	462f      	mov	r7, r5
10066782:	d004      	beq.n	1006678e <smp_pp1_key_generation_method_selection+0xda>
10066784:	2902      	cmp	r1, #2
10066786:	d101      	bne.n	1006678c <smp_pp1_key_generation_method_selection+0xd8>
10066788:	4627      	mov	r7, r4
1006678a:	e000      	b.n	1006678e <smp_pp1_key_generation_method_selection+0xda>
1006678c:	27ff      	movs	r7, #255	@ 0xff
1006678e:	4917      	ldr	r1, [pc, #92]	@ (100667ec <__arm_cp.5_2>)
10066790:	6809      	ldr	r1, [r1, #0]
10066792:	224e      	movs	r2, #78	@ 0x4e
10066794:	5c89      	ldrb	r1, [r1, r2]
10066796:	0749      	lsls	r1, r1, #29
10066798:	d51e      	bpl.n	100667d8 <smp_pp1_key_generation_method_selection+0x124>
1006679a:	8906      	ldrh	r6, [r0, #8]
1006679c:	4814      	ldr	r0, [pc, #80]	@ (100667f0 <__arm_cp.5_3>)
1006679e:	6800      	ldr	r0, [r0, #0]
100667a0:	6980      	ldr	r0, [r0, #24]
100667a2:	2502      	movs	r5, #2
100667a4:	2246      	movs	r2, #70	@ 0x46
100667a6:	2303      	movs	r3, #3
100667a8:	4629      	mov	r1, r5
100667aa:	f7ee fc9f 	bl	100550ec <aci_event_fifo_push_header>
100667ae:	2800      	cmp	r0, #0
100667b0:	d012      	beq.n	100667d8 <smp_pp1_key_generation_method_selection+0x124>
100667b2:	4601      	mov	r1, r0
100667b4:	7286      	strb	r6, [r0, #10]
100667b6:	2004      	movs	r0, #4
100667b8:	7248      	strb	r0, [r1, #9]
100667ba:	720d      	strb	r5, [r1, #8]
100667bc:	2400      	movs	r4, #0
100667be:	71cc      	strb	r4, [r1, #7]
100667c0:	2005      	movs	r0, #5
100667c2:	7188      	strb	r0, [r1, #6]
100667c4:	730f      	strb	r7, [r1, #12]
100667c6:	20ff      	movs	r0, #255	@ 0xff
100667c8:	7148      	strb	r0, [r1, #5]
100667ca:	2082      	movs	r0, #130	@ 0x82
100667cc:	7108      	strb	r0, [r1, #4]
100667ce:	0a30      	lsrs	r0, r6, #8
100667d0:	72c8      	strb	r0, [r1, #11]
100667d2:	4628      	mov	r0, r5
100667d4:	f7ee fd27 	bl	10055226 <aci_event_fifo_push>
100667d8:	4620      	mov	r0, r4
100667da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100667dc:	2202      	movs	r2, #2
100667de:	701a      	strb	r2, [r3, #0]
100667e0:	e794      	b.n	1006670c <smp_pp1_key_generation_method_selection+0x58>
100667e2:	46c0      	nop			@ (mov r8, r8)

100667e4 <__arm_cp.5_0>:
100667e4:	200024bc 	.word	0x200024bc

100667e8 <__arm_cp.5_1>:
100667e8:	100697c4 	.word	0x100697c4

100667ec <__arm_cp.5_2>:
100667ec:	20002470 	.word	0x20002470

100667f0 <__arm_cp.5_3>:
100667f0:	20002420 	.word	0x20002420

100667f4 <smp_pp1_auth_req_field_generate_from_device_config>:
100667f4:	490b      	ldr	r1, [pc, #44]	@ (10066824 <__arm_cp.6_0>)
100667f6:	6809      	ldr	r1, [r1, #0]
100667f8:	2230      	movs	r2, #48	@ 0x30
100667fa:	5c8a      	ldrb	r2, [r1, r2]
100667fc:	2301      	movs	r3, #1
100667fe:	4013      	ands	r3, r2
10066800:	3130      	adds	r1, #48	@ 0x30
10066802:	784a      	ldrb	r2, [r1, #1]
10066804:	07d2      	lsls	r2, r2, #31
10066806:	0f52      	lsrs	r2, r2, #29
10066808:	18d2      	adds	r2, r2, r3
1006680a:	78cb      	ldrb	r3, [r1, #3]
1006680c:	07db      	lsls	r3, r3, #31
1006680e:	0edb      	lsrs	r3, r3, #27
10066810:	18d2      	adds	r2, r2, r3
10066812:	7889      	ldrb	r1, [r1, #2]
10066814:	084b      	lsrs	r3, r1, #1
10066816:	430b      	orrs	r3, r1
10066818:	07d9      	lsls	r1, r3, #31
1006681a:	0f09      	lsrs	r1, r1, #28
1006681c:	1851      	adds	r1, r2, r1
1006681e:	7001      	strb	r1, [r0, #0]
10066820:	4770      	bx	lr
10066822:	46c0      	nop			@ (mov r8, r8)

10066824 <__arm_cp.6_0>:
10066824:	200024bc 	.word	0x200024bc

10066828 <smp_pp1_hndl_pairing_response_mode_through_event>:
10066828:	b570      	push	{r4, r5, r6, lr}
1006682a:	4605      	mov	r5, r0
1006682c:	8900      	ldrh	r0, [r0, #8]
1006682e:	f7fb fe2a 	bl	10062486 <smp_sap_check_is_peer_device_bonded>
10066832:	4246      	negs	r6, r0
10066834:	4146      	adcs	r6, r0
10066836:	491b      	ldr	r1, [pc, #108]	@ (100668a4 <__arm_cp.8_0>)
10066838:	6809      	ldr	r1, [r1, #0]
1006683a:	223c      	movs	r2, #60	@ 0x3c
1006683c:	5c89      	ldrb	r1, [r1, r2]
1006683e:	2902      	cmp	r1, #2
10066840:	d004      	beq.n	1006684c <smp_pp1_hndl_pairing_response_mode_through_event+0x24>
10066842:	2400      	movs	r4, #0
10066844:	2901      	cmp	r1, #1
10066846:	d12a      	bne.n	1006689e <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10066848:	2800      	cmp	r0, #0
1006684a:	d128      	bne.n	1006689e <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
1006684c:	2008      	movs	r0, #8
1006684e:	4301      	orrs	r1, r0
10066850:	75a9      	strb	r1, [r5, #22]
10066852:	4815      	ldr	r0, [pc, #84]	@ (100668a8 <__arm_cp.8_1>)
10066854:	6800      	ldr	r0, [r0, #0]
10066856:	214e      	movs	r1, #78	@ 0x4e
10066858:	5c40      	ldrb	r0, [r0, r1]
1006685a:	2401      	movs	r4, #1
1006685c:	0780      	lsls	r0, r0, #30
1006685e:	d51e      	bpl.n	1006689e <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10066860:	892d      	ldrh	r5, [r5, #8]
10066862:	4812      	ldr	r0, [pc, #72]	@ (100668ac <__arm_cp.8_2>)
10066864:	6800      	ldr	r0, [r0, #0]
10066866:	6980      	ldr	r0, [r0, #24]
10066868:	2102      	movs	r1, #2
1006686a:	224b      	movs	r2, #75	@ 0x4b
1006686c:	2303      	movs	r3, #3
1006686e:	f7ee fc3d 	bl	100550ec <aci_event_fifo_push_header>
10066872:	2800      	cmp	r0, #0
10066874:	d013      	beq.n	1006689e <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10066876:	4601      	mov	r1, r0
10066878:	7285      	strb	r5, [r0, #10]
1006687a:	2004      	movs	r0, #4
1006687c:	7248      	strb	r0, [r1, #9]
1006687e:	200b      	movs	r0, #11
10066880:	7208      	strb	r0, [r1, #8]
10066882:	2000      	movs	r0, #0
10066884:	71c8      	strb	r0, [r1, #7]
10066886:	2005      	movs	r0, #5
10066888:	7188      	strb	r0, [r1, #6]
1006688a:	730e      	strb	r6, [r1, #12]
1006688c:	20ff      	movs	r0, #255	@ 0xff
1006688e:	7148      	strb	r0, [r1, #5]
10066890:	2082      	movs	r0, #130	@ 0x82
10066892:	7108      	strb	r0, [r1, #4]
10066894:	0a28      	lsrs	r0, r5, #8
10066896:	72c8      	strb	r0, [r1, #11]
10066898:	2002      	movs	r0, #2
1006689a:	f7ee fcc4 	bl	10055226 <aci_event_fifo_push>
1006689e:	4620      	mov	r0, r4
100668a0:	bd70      	pop	{r4, r5, r6, pc}
100668a2:	46c0      	nop			@ (mov r8, r8)

100668a4 <__arm_cp.8_0>:
100668a4:	200024bc 	.word	0x200024bc

100668a8 <__arm_cp.8_1>:
100668a8:	20002470 	.word	0x20002470

100668ac <__arm_cp.8_2>:
100668ac:	20002420 	.word	0x20002420

100668b0 <smp_pp1_pairing_packet_build>:
100668b0:	b510      	push	{r4, lr}
100668b2:	2407      	movs	r4, #7
100668b4:	8044      	strh	r4, [r0, #2]
100668b6:	6844      	ldr	r4, [r0, #4]
100668b8:	7221      	strb	r1, [r4, #8]
100668ba:	490b      	ldr	r1, [pc, #44]	@ (100668e8 <__arm_cp.9_0>)
100668bc:	6809      	ldr	r1, [r1, #0]
100668be:	2440      	movs	r4, #64	@ 0x40
100668c0:	5d09      	ldrb	r1, [r1, r4]
100668c2:	6844      	ldr	r4, [r0, #4]
100668c4:	7261      	strb	r1, [r4, #9]
100668c6:	2101      	movs	r1, #1
100668c8:	4011      	ands	r1, r2
100668ca:	6842      	ldr	r2, [r0, #4]
100668cc:	7291      	strb	r1, [r2, #10]
100668ce:	6841      	ldr	r1, [r0, #4]
100668d0:	72cb      	strb	r3, [r1, #11]
100668d2:	6841      	ldr	r1, [r0, #4]
100668d4:	9a02      	ldr	r2, [sp, #8]
100668d6:	730a      	strb	r2, [r1, #12]
100668d8:	6841      	ldr	r1, [r0, #4]
100668da:	9a03      	ldr	r2, [sp, #12]
100668dc:	734a      	strb	r2, [r1, #13]
100668de:	6840      	ldr	r0, [r0, #4]
100668e0:	9904      	ldr	r1, [sp, #16]
100668e2:	7381      	strb	r1, [r0, #14]
100668e4:	bd10      	pop	{r4, pc}
100668e6:	46c0      	nop			@ (mov r8, r8)

100668e8 <__arm_cp.9_0>:
100668e8:	200024bc 	.word	0x200024bc

100668ec <smp_pp1_per_rxp_pairing_request>:
100668ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100668ee:	460c      	mov	r4, r1
100668f0:	4607      	mov	r7, r0
100668f2:	2501      	movs	r5, #1
100668f4:	4628      	mov	r0, r5
100668f6:	f7ff fe3b 	bl	10066570 <smp_pp1_get_next_free_pairing_idx>
100668fa:	2802      	cmp	r0, #2
100668fc:	d901      	bls.n	10066902 <smp_pp1_per_rxp_pairing_request+0x16>
100668fe:	2038      	movs	r0, #56	@ 0x38
10066900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066902:	4606      	mov	r6, r0
10066904:	4638      	mov	r0, r7
10066906:	f7ff fe53 	bl	100665b0 <smp_pp1_reqrsp_pdu_params_check>
1006690a:	2800      	cmp	r0, #0
1006690c:	d010      	beq.n	10066930 <smp_pp1_per_rxp_pairing_request+0x44>
1006690e:	4601      	mov	r1, r0
10066910:	4810      	ldr	r0, [pc, #64]	@ (10066954 <__arm_cp.1_0>)
10066912:	6800      	ldr	r0, [r0, #0]
10066914:	22b1      	movs	r2, #177	@ 0xb1
10066916:	5c82      	ldrb	r2, [r0, r2]
10066918:	2a00      	cmp	r2, #0
1006691a:	d003      	beq.n	10066924 <smp_pp1_per_rxp_pairing_request+0x38>
1006691c:	30b1      	adds	r0, #177	@ 0xb1
1006691e:	40b5      	lsls	r5, r6
10066920:	43aa      	bics	r2, r5
10066922:	7002      	strb	r2, [r0, #0]
10066924:	2200      	movs	r2, #0
10066926:	2301      	movs	r3, #1
10066928:	4620      	mov	r0, r4
1006692a:	f7ff fe0b 	bl	10066544 <smp_pp3_pairing_failed_send>
1006692e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066930:	7526      	strb	r6, [r4, #20]
10066932:	2101      	movs	r1, #1
10066934:	4638      	mov	r0, r7
10066936:	4622      	mov	r2, r4
10066938:	f7ff fe5e 	bl	100665f8 <smp_pp1_reqrsp_pdu_copy_to_pairing_data>
1006693c:	4620      	mov	r0, r4
1006693e:	f7ff ff73 	bl	10066828 <smp_pp1_hndl_pairing_response_mode_through_event>
10066942:	2800      	cmp	r0, #0
10066944:	d001      	beq.n	1006694a <smp_pp1_per_rxp_pairing_request+0x5e>
10066946:	2000      	movs	r0, #0
10066948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006694a:	4620      	mov	r0, r4
1006694c:	f000 f804 	bl	10066958 <smp_pp1_per_send_pairing_response>
10066950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066952:	46c0      	nop			@ (mov r8, r8)

10066954 <__arm_cp.1_0>:
10066954:	200024bc 	.word	0x200024bc

10066958 <smp_pp1_per_send_pairing_response>:
10066958:	b5f0      	push	{r4, r5, r6, r7, lr}
1006695a:	b087      	sub	sp, #28
1006695c:	4604      	mov	r4, r0
1006695e:	a806      	add	r0, sp, #24
10066960:	2600      	movs	r6, #0
10066962:	7006      	strb	r6, [r0, #0]
10066964:	8921      	ldrh	r1, [r4, #8]
10066966:	220b      	movs	r2, #11
10066968:	4630      	mov	r0, r6
1006696a:	f7ee f9e9 	bl	10054d40 <ACL_pkt_get>
1006696e:	2800      	cmp	r0, #0
10066970:	d01b      	beq.n	100669aa <smp_pp1_per_send_pairing_response+0x52>
10066972:	9005      	str	r0, [sp, #20]
10066974:	20b0      	movs	r0, #176	@ 0xb0
10066976:	72a0      	strb	r0, [r4, #10]
10066978:	75e6      	strb	r6, [r4, #23]
1006697a:	7be0      	ldrb	r0, [r4, #15]
1006697c:	212f      	movs	r1, #47	@ 0x2f
1006697e:	4001      	ands	r1, r0
10066980:	73e1      	strb	r1, [r4, #15]
10066982:	4f43      	ldr	r7, [pc, #268]	@ (10066a90 <__arm_cp.2_0>)
10066984:	683d      	ldr	r5, [r7, #0]
10066986:	7d20      	ldrb	r0, [r4, #20]
10066988:	2101      	movs	r1, #1
1006698a:	9104      	str	r1, [sp, #16]
1006698c:	f7ff fe0a 	bl	100665a4 <smp_pp1_get_pairing_pdu_offset>
10066990:	1940      	adds	r0, r0, r5
10066992:	21b7      	movs	r1, #183	@ 0xb7
10066994:	5c45      	ldrb	r5, [r0, r1]
10066996:	6838      	ldr	r0, [r7, #0]
10066998:	2132      	movs	r1, #50	@ 0x32
1006699a:	5c40      	ldrb	r0, [r0, r1]
1006699c:	2802      	cmp	r0, #2
1006699e:	d106      	bne.n	100669ae <smp_pp1_per_send_pairing_response+0x56>
100669a0:	2008      	movs	r0, #8
100669a2:	4028      	ands	r0, r5
100669a4:	d103      	bne.n	100669ae <smp_pp1_per_send_pairing_response+0x56>
100669a6:	2103      	movs	r1, #3
100669a8:	e051      	b.n	10066a4e <smp_pp1_per_send_pairing_response+0xf6>
100669aa:	2688      	movs	r6, #136	@ 0x88
100669ac:	e061      	b.n	10066a72 <smp_pp1_per_send_pairing_response+0x11a>
100669ae:	7e20      	ldrb	r0, [r4, #24]
100669b0:	07c0      	lsls	r0, r0, #31
100669b2:	d105      	bne.n	100669c0 <smp_pp1_per_send_pairing_response+0x68>
100669b4:	af06      	add	r7, sp, #24
100669b6:	4638      	mov	r0, r7
100669b8:	f7ff ff1c 	bl	100667f4 <smp_pp1_auth_req_field_generate_from_device_config>
100669bc:	7838      	ldrb	r0, [r7, #0]
100669be:	e002      	b.n	100669c6 <smp_pp1_per_send_pairing_response+0x6e>
100669c0:	7d60      	ldrb	r0, [r4, #21]
100669c2:	a906      	add	r1, sp, #24
100669c4:	7008      	strb	r0, [r1, #0]
100669c6:	4005      	ands	r5, r0
100669c8:	2018      	movs	r0, #24
100669ca:	4028      	ands	r0, r5
100669cc:	7de1      	ldrb	r1, [r4, #23]
100669ce:	4301      	orrs	r1, r0
100669d0:	75e1      	strb	r1, [r4, #23]
100669d2:	0708      	lsls	r0, r1, #28
100669d4:	d401      	bmi.n	100669da <smp_pp1_per_send_pairing_response+0x82>
100669d6:	27b4      	movs	r7, #180	@ 0xb4
100669d8:	e006      	b.n	100669e8 <smp_pp1_per_send_pairing_response+0x90>
100669da:	4620      	mov	r0, r4
100669dc:	f000 fd31 	bl	10067442 <smp_scp_continue_on_exclusive_sc_pairing_ucfg_weak>
100669e0:	4601      	mov	r1, r0
100669e2:	2800      	cmp	r0, #0
100669e4:	d133      	bne.n	10066a4e <smp_pp1_per_send_pairing_response+0xf6>
100669e6:	27b2      	movs	r7, #178	@ 0xb2
100669e8:	4620      	mov	r0, r4
100669ea:	f000 fcdf 	bl	100673ac <smp_oob_check_is_remote_data_present>
100669ee:	9806      	ldr	r0, [sp, #24]
100669f0:	0741      	lsls	r1, r0, #29
100669f2:	0fc9      	lsrs	r1, r1, #31
100669f4:	73e1      	strb	r1, [r4, #15]
100669f6:	07c0      	lsls	r0, r0, #31
100669f8:	0f80      	lsrs	r0, r0, #30
100669fa:	73a0      	strb	r0, [r4, #14]
100669fc:	4620      	mov	r0, r4
100669fe:	f7ff fe0d 	bl	1006661c <smp_pp1_reqrsp_pdu_extract_from_pairing_data>
10066a02:	4620      	mov	r0, r4
10066a04:	f7ff fe56 	bl	100666b4 <smp_pp1_key_generation_method_selection>
10066a08:	4601      	mov	r1, r0
10066a0a:	2800      	cmp	r0, #0
10066a0c:	d11f      	bne.n	10066a4e <smp_pp1_per_send_pairing_response+0xf6>
10066a0e:	7ce0      	ldrb	r0, [r4, #19]
10066a10:	2802      	cmp	r0, #2
10066a12:	d104      	bne.n	10066a1e <smp_pp1_per_send_pairing_response+0xc6>
10066a14:	7be0      	ldrb	r0, [r4, #15]
10066a16:	06c0      	lsls	r0, r0, #27
10066a18:	d401      	bmi.n	10066a1e <smp_pp1_per_send_pairing_response+0xc6>
10066a1a:	204d      	movs	r0, #77	@ 0x4d
10066a1c:	43c7      	mvns	r7, r0
10066a1e:	481c      	ldr	r0, [pc, #112]	@ (10066a90 <__arm_cp.2_0>)
10066a20:	6800      	ldr	r0, [r0, #0]
10066a22:	2135      	movs	r1, #53	@ 0x35
10066a24:	5c40      	ldrb	r0, [r0, r1]
10066a26:	a906      	add	r1, sp, #24
10066a28:	780b      	ldrb	r3, [r1, #0]
10066a2a:	7b62      	ldrb	r2, [r4, #13]
10066a2c:	7c61      	ldrb	r1, [r4, #17]
10066a2e:	7ca5      	ldrb	r5, [r4, #18]
10066a30:	9000      	str	r0, [sp, #0]
10066a32:	9101      	str	r1, [sp, #4]
10066a34:	9502      	str	r5, [sp, #8]
10066a36:	2102      	movs	r1, #2
10066a38:	9d05      	ldr	r5, [sp, #20]
10066a3a:	4628      	mov	r0, r5
10066a3c:	f7ff ff38 	bl	100668b0 <smp_pp1_pairing_packet_build>
10066a40:	4620      	mov	r0, r4
10066a42:	4629      	mov	r1, r5
10066a44:	f7ff fb82 	bl	1006614c <smp_dep_l2c_send_acl_packet>
10066a48:	4601      	mov	r1, r0
10066a4a:	2800      	cmp	r0, #0
10066a4c:	d014      	beq.n	10066a78 <smp_pp1_per_send_pairing_response+0x120>
10066a4e:	4810      	ldr	r0, [pc, #64]	@ (10066a90 <__arm_cp.2_0>)
10066a50:	6800      	ldr	r0, [r0, #0]
10066a52:	22b1      	movs	r2, #177	@ 0xb1
10066a54:	5c82      	ldrb	r2, [r0, r2]
10066a56:	2a00      	cmp	r2, #0
10066a58:	d005      	beq.n	10066a66 <smp_pp1_per_send_pairing_response+0x10e>
10066a5a:	30b1      	adds	r0, #177	@ 0xb1
10066a5c:	7d23      	ldrb	r3, [r4, #20]
10066a5e:	9d04      	ldr	r5, [sp, #16]
10066a60:	409d      	lsls	r5, r3
10066a62:	43aa      	bics	r2, r5
10066a64:	7002      	strb	r2, [r0, #0]
10066a66:	2301      	movs	r3, #1
10066a68:	4620      	mov	r0, r4
10066a6a:	9a05      	ldr	r2, [sp, #20]
10066a6c:	f7ff fd6a 	bl	10066544 <smp_pp3_pairing_failed_send>
10066a70:	4606      	mov	r6, r0
10066a72:	4630      	mov	r0, r6
10066a74:	b007      	add	sp, #28
10066a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066a78:	7ae0      	ldrb	r0, [r4, #11]
10066a7a:	21f8      	movs	r1, #248	@ 0xf8
10066a7c:	4001      	ands	r1, r0
10066a7e:	72e1      	strb	r1, [r4, #11]
10066a80:	9805      	ldr	r0, [sp, #20]
10066a82:	4631      	mov	r1, r6
10066a84:	4622      	mov	r2, r4
10066a86:	f7ff fdb7 	bl	100665f8 <smp_pp1_reqrsp_pdu_copy_to_pairing_data>
10066a8a:	72a7      	strb	r7, [r4, #10]
10066a8c:	e7f1      	b.n	10066a72 <smp_pp1_per_send_pairing_response+0x11a>
10066a8e:	46c0      	nop			@ (mov r8, r8)

10066a90 <__arm_cp.2_0>:
10066a90:	200024bc 	.word	0x200024bc

10066a94 <smp_pp2_per_rx_process_pairing_confirm>:
10066a94:	b5f0      	push	{r4, r5, r6, r7, lr}
10066a96:	b089      	sub	sp, #36	@ 0x24
10066a98:	460c      	mov	r4, r1
10066a9a:	4607      	mov	r7, r0
10066a9c:	8909      	ldrh	r1, [r1, #8]
10066a9e:	2500      	movs	r5, #0
10066aa0:	2215      	movs	r2, #21
10066aa2:	4628      	mov	r0, r5
10066aa4:	f7ee f94c 	bl	10054d40 <ACL_pkt_get>
10066aa8:	2800      	cmp	r0, #0
10066aaa:	d013      	beq.n	10066ad4 <smp_pp2_per_rx_process_pairing_confirm+0x40>
10066aac:	4606      	mov	r6, r0
10066aae:	2f00      	cmp	r7, #0
10066ab0:	d006      	beq.n	10066ac0 <smp_pp2_per_rx_process_pairing_confirm+0x2c>
10066ab2:	4623      	mov	r3, r4
10066ab4:	3328      	adds	r3, #40	@ 0x28
10066ab6:	2105      	movs	r1, #5
10066ab8:	2210      	movs	r2, #16
10066aba:	4638      	mov	r0, r7
10066abc:	f7ee f97e 	bl	10054dbc <ACL_pkt_read>
10066ac0:	7de0      	ldrb	r0, [r4, #23]
10066ac2:	0700      	lsls	r0, r0, #28
10066ac4:	d408      	bmi.n	10066ad8 <smp_pp2_per_rx_process_pairing_confirm+0x44>
10066ac6:	4621      	mov	r1, r4
10066ac8:	3148      	adds	r1, #72	@ 0x48
10066aca:	aa05      	add	r2, sp, #20
10066acc:	4620      	mov	r0, r4
10066ace:	f000 f831 	bl	10066b34 <smp_pp2_per_lep_confirm_value_compute>
10066ad2:	e007      	b.n	10066ae4 <smp_pp2_per_rx_process_pairing_confirm+0x50>
10066ad4:	2088      	movs	r0, #136	@ 0x88
10066ad6:	e019      	b.n	10066b0c <smp_pp2_per_rx_process_pairing_confirm+0x78>
10066ad8:	a805      	add	r0, sp, #20
10066ada:	9002      	str	r0, [sp, #8]
10066adc:	9401      	str	r4, [sp, #4]
10066ade:	a801      	add	r0, sp, #4
10066ae0:	f000 f961 	bl	10066da6 <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg_weak>
10066ae4:	2011      	movs	r0, #17
10066ae6:	8070      	strh	r0, [r6, #2]
10066ae8:	6870      	ldr	r0, [r6, #4]
10066aea:	2103      	movs	r1, #3
10066aec:	7201      	strb	r1, [r0, #8]
10066aee:	2105      	movs	r1, #5
10066af0:	2210      	movs	r2, #16
10066af2:	ab05      	add	r3, sp, #20
10066af4:	4630      	mov	r0, r6
10066af6:	f7ee f983 	bl	10054e00 <ACL_pkt_write>
10066afa:	4620      	mov	r0, r4
10066afc:	4631      	mov	r1, r6
10066afe:	f7ff fb25 	bl	1006614c <smp_dep_l2c_send_acl_packet>
10066b02:	2800      	cmp	r0, #0
10066b04:	d102      	bne.n	10066b0c <smp_pp2_per_rx_process_pairing_confirm+0x78>
10066b06:	20b6      	movs	r0, #182	@ 0xb6
10066b08:	72a0      	strb	r0, [r4, #10]
10066b0a:	4628      	mov	r0, r5
10066b0c:	b009      	add	sp, #36	@ 0x24
10066b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10066b10 <smp_pp2_per_auth_stage_1_start>:
10066b10:	b510      	push	{r4, lr}
10066b12:	4604      	mov	r4, r0
10066b14:	3048      	adds	r0, #72	@ 0x48
10066b16:	2110      	movs	r1, #16
10066b18:	2200      	movs	r2, #0
10066b1a:	f7fc f958 	bl	10062dce <HAL_Generate_Random_Bytes_To>
10066b1e:	7de0      	ldrb	r0, [r4, #23]
10066b20:	0700      	lsls	r0, r0, #28
10066b22:	d402      	bmi.n	10066b2a <smp_pp2_per_auth_stage_1_start+0x1a>
10066b24:	20b5      	movs	r0, #181	@ 0xb5
10066b26:	72a0      	strb	r0, [r4, #10]
10066b28:	bd10      	pop	{r4, pc}
10066b2a:	4620      	mov	r0, r4
10066b2c:	f000 f93a 	bl	10066da4 <smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg_weak>
10066b30:	bd10      	pop	{r4, pc}
	...

10066b34 <smp_pp2_per_lep_confirm_value_compute>:
10066b34:	b5f0      	push	{r4, r5, r6, r7, lr}
10066b36:	b09b      	sub	sp, #108	@ 0x6c
10066b38:	4614      	mov	r4, r2
10066b3a:	9106      	str	r1, [sp, #24]
10066b3c:	4607      	mov	r7, r0
10066b3e:	ae0f      	add	r6, sp, #60	@ 0x3c
10066b40:	2500      	movs	r5, #0
10066b42:	222e      	movs	r2, #46	@ 0x2e
10066b44:	4630      	mov	r0, r6
10066b46:	4629      	mov	r1, r5
10066b48:	f7eb fd94 	bl	10052674 <BLEPLAT_MemSet>
10066b4c:	4630      	mov	r0, r6
10066b4e:	3010      	adds	r0, #16
10066b50:	2210      	movs	r2, #16
10066b52:	9906      	ldr	r1, [sp, #24]
10066b54:	f7eb fd7e 	bl	10052654 <BLEPLAT_MemCpy>
10066b58:	3620      	adds	r6, #32
10066b5a:	7cf8      	ldrb	r0, [r7, #19]
10066b5c:	2803      	cmp	r0, #3
10066b5e:	d00d      	beq.n	10066b7c <smp_pp2_per_lep_confirm_value_compute+0x48>
10066b60:	2802      	cmp	r0, #2
10066b62:	d112      	bne.n	10066b8a <smp_pp2_per_lep_confirm_value_compute+0x56>
10066b64:	4844      	ldr	r0, [pc, #272]	@ (10066c78 <__arm_cp.16_0>)
10066b66:	6800      	ldr	r0, [r0, #0]
10066b68:	6b80      	ldr	r0, [r0, #56]	@ 0x38
10066b6a:	a90f      	add	r1, sp, #60	@ 0x3c
10066b6c:	7008      	strb	r0, [r1, #0]
10066b6e:	0a02      	lsrs	r2, r0, #8
10066b70:	704a      	strb	r2, [r1, #1]
10066b72:	0c02      	lsrs	r2, r0, #16
10066b74:	708a      	strb	r2, [r1, #2]
10066b76:	0e00      	lsrs	r0, r0, #24
10066b78:	70c8      	strb	r0, [r1, #3]
10066b7a:	e006      	b.n	10066b8a <smp_pp2_per_lep_confirm_value_compute+0x56>
10066b7c:	483e      	ldr	r0, [pc, #248]	@ (10066c78 <__arm_cp.16_0>)
10066b7e:	6801      	ldr	r1, [r0, #0]
10066b80:	3144      	adds	r1, #68	@ 0x44
10066b82:	a80f      	add	r0, sp, #60	@ 0x3c
10066b84:	2210      	movs	r2, #16
10066b86:	f7eb fd65 	bl	10052654 <BLEPLAT_MemCpy>
10066b8a:	7d38      	ldrb	r0, [r7, #20]
10066b8c:	2101      	movs	r1, #1
10066b8e:	9105      	str	r1, [sp, #20]
10066b90:	f7ff fd08 	bl	100665a4 <smp_pp1_get_pairing_pdu_offset>
10066b94:	9002      	str	r0, [sp, #8]
10066b96:	7d38      	ldrb	r0, [r7, #20]
10066b98:	4629      	mov	r1, r5
10066b9a:	f7ff fd03 	bl	100665a4 <smp_pp1_get_pairing_pdu_offset>
10066b9e:	9001      	str	r0, [sp, #4]
10066ba0:	2061      	movs	r0, #97	@ 0x61
10066ba2:	5c38      	ldrb	r0, [r7, r0]
10066ba4:	71f0      	strb	r0, [r6, #7]
10066ba6:	9606      	str	r6, [sp, #24]
10066ba8:	ae0f      	add	r6, sp, #60	@ 0x3c
10066baa:	4630      	mov	r0, r6
10066bac:	3028      	adds	r0, #40	@ 0x28
10066bae:	4639      	mov	r1, r7
10066bb0:	3162      	adds	r1, #98	@ 0x62
10066bb2:	2206      	movs	r2, #6
10066bb4:	9200      	str	r2, [sp, #0]
10066bb6:	4b31      	ldr	r3, [pc, #196]	@ (10066c7c <__arm_cp.16_1>)
10066bb8:	9004      	str	r0, [sp, #16]
10066bba:	4798      	blx	r3
10066bbc:	7878      	ldrb	r0, [r7, #1]
10066bbe:	9906      	ldr	r1, [sp, #24]
10066bc0:	7008      	strb	r0, [r1, #0]
10066bc2:	4630      	mov	r0, r6
10066bc4:	3021      	adds	r0, #33	@ 0x21
10066bc6:	1cb9      	adds	r1, r7, #2
10066bc8:	9003      	str	r0, [sp, #12]
10066bca:	9a00      	ldr	r2, [sp, #0]
10066bcc:	4b2b      	ldr	r3, [pc, #172]	@ (10066c7c <__arm_cp.16_1>)
10066bce:	4798      	blx	r3
10066bd0:	4829      	ldr	r0, [pc, #164]	@ (10066c78 <__arm_cp.16_0>)
10066bd2:	6800      	ldr	r0, [r0, #0]
10066bd4:	9901      	ldr	r1, [sp, #4]
10066bd6:	1841      	adds	r1, r0, r1
10066bd8:	31b4      	adds	r1, #180	@ 0xb4
10066bda:	af0b      	add	r7, sp, #44	@ 0x2c
10066bdc:	4638      	mov	r0, r7
10066bde:	3009      	adds	r0, #9
10066be0:	2207      	movs	r2, #7
10066be2:	9201      	str	r2, [sp, #4]
10066be4:	4b25      	ldr	r3, [pc, #148]	@ (10066c7c <__arm_cp.16_1>)
10066be6:	4798      	blx	r3
10066be8:	4823      	ldr	r0, [pc, #140]	@ (10066c78 <__arm_cp.16_0>)
10066bea:	6800      	ldr	r0, [r0, #0]
10066bec:	9902      	ldr	r1, [sp, #8]
10066bee:	1841      	adds	r1, r0, r1
10066bf0:	31b4      	adds	r1, #180	@ 0xb4
10066bf2:	1cb8      	adds	r0, r7, #2
10066bf4:	9a01      	ldr	r2, [sp, #4]
10066bf6:	4b21      	ldr	r3, [pc, #132]	@ (10066c7c <__arm_cp.16_1>)
10066bf8:	4798      	blx	r3
10066bfa:	1c78      	adds	r0, r7, #1
10066bfc:	9906      	ldr	r1, [sp, #24]
10066bfe:	1dc9      	adds	r1, r1, #7
10066c00:	9a05      	ldr	r2, [sp, #20]
10066c02:	4b1e      	ldr	r3, [pc, #120]	@ (10066c7c <__arm_cp.16_1>)
10066c04:	4798      	blx	r3
10066c06:	4b1d      	ldr	r3, [pc, #116]	@ (10066c7c <__arm_cp.16_1>)
10066c08:	4638      	mov	r0, r7
10066c0a:	9906      	ldr	r1, [sp, #24]
10066c0c:	9a05      	ldr	r2, [sp, #20]
10066c0e:	4798      	blx	r3
10066c10:	3610      	adds	r6, #16
10066c12:	2d10      	cmp	r5, #16
10066c14:	d007      	beq.n	10066c26 <smp_pp2_per_lep_confirm_value_compute+0xf2>
10066c16:	5d70      	ldrb	r0, [r6, r5]
10066c18:	a90b      	add	r1, sp, #44	@ 0x2c
10066c1a:	5d49      	ldrb	r1, [r1, r5]
10066c1c:	4041      	eors	r1, r0
10066c1e:	a807      	add	r0, sp, #28
10066c20:	5541      	strb	r1, [r0, r5]
10066c22:	1c6d      	adds	r5, r5, #1
10066c24:	e7f5      	b.n	10066c12 <smp_pp2_per_lep_confirm_value_compute+0xde>
10066c26:	a80f      	add	r0, sp, #60	@ 0x3c
10066c28:	a907      	add	r1, sp, #28
10066c2a:	4622      	mov	r2, r4
10066c2c:	f7f2 fc54 	bl	100594d8 <hci_le_encrypt>
10066c30:	ae0b      	add	r6, sp, #44	@ 0x2c
10066c32:	2500      	movs	r5, #0
10066c34:	2210      	movs	r2, #16
10066c36:	4630      	mov	r0, r6
10066c38:	4629      	mov	r1, r5
10066c3a:	f7eb fd1b 	bl	10052674 <BLEPLAT_MemSet>
10066c3e:	2706      	movs	r7, #6
10066c40:	4630      	mov	r0, r6
10066c42:	9904      	ldr	r1, [sp, #16]
10066c44:	463a      	mov	r2, r7
10066c46:	f7eb fd05 	bl	10052654 <BLEPLAT_MemCpy>
10066c4a:	1db0      	adds	r0, r6, #6
10066c4c:	9903      	ldr	r1, [sp, #12]
10066c4e:	463a      	mov	r2, r7
10066c50:	f7eb fd00 	bl	10052654 <BLEPLAT_MemCpy>
10066c54:	2d10      	cmp	r5, #16
10066c56:	d007      	beq.n	10066c68 <smp_pp2_per_lep_confirm_value_compute+0x134>
10066c58:	5d60      	ldrb	r0, [r4, r5]
10066c5a:	a90b      	add	r1, sp, #44	@ 0x2c
10066c5c:	5d49      	ldrb	r1, [r1, r5]
10066c5e:	4041      	eors	r1, r0
10066c60:	a807      	add	r0, sp, #28
10066c62:	5541      	strb	r1, [r0, r5]
10066c64:	1c6d      	adds	r5, r5, #1
10066c66:	e7f5      	b.n	10066c54 <smp_pp2_per_lep_confirm_value_compute+0x120>
10066c68:	a80f      	add	r0, sp, #60	@ 0x3c
10066c6a:	a907      	add	r1, sp, #28
10066c6c:	4622      	mov	r2, r4
10066c6e:	f7f2 fc33 	bl	100594d8 <hci_le_encrypt>
10066c72:	b01b      	add	sp, #108	@ 0x6c
10066c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066c76:	46c0      	nop			@ (mov r8, r8)

10066c78 <__arm_cp.16_0>:
10066c78:	200024bc 	.word	0x200024bc

10066c7c <__arm_cp.16_1>:
10066c7c:	10052655 	.word	0x10052655

10066c80 <smp_pp2_per_rx_process_pairing_random>:
10066c80:	b5f0      	push	{r4, r5, r6, r7, lr}
10066c82:	b08b      	sub	sp, #44	@ 0x2c
10066c84:	460d      	mov	r5, r1
10066c86:	4606      	mov	r6, r0
10066c88:	2400      	movs	r4, #0
10066c8a:	9402      	str	r4, [sp, #8]
10066c8c:	8909      	ldrh	r1, [r1, #8]
10066c8e:	2215      	movs	r2, #21
10066c90:	4620      	mov	r0, r4
10066c92:	f7ee f855 	bl	10054d40 <ACL_pkt_get>
10066c96:	2800      	cmp	r0, #0
10066c98:	d020      	beq.n	10066cdc <smp_pp2_per_rx_process_pairing_random+0x5c>
10066c9a:	4607      	mov	r7, r0
10066c9c:	462b      	mov	r3, r5
10066c9e:	3338      	adds	r3, #56	@ 0x38
10066ca0:	2105      	movs	r1, #5
10066ca2:	2210      	movs	r2, #16
10066ca4:	4630      	mov	r0, r6
10066ca6:	461e      	mov	r6, r3
10066ca8:	f7ee f888 	bl	10054dbc <ACL_pkt_read>
10066cac:	7de8      	ldrb	r0, [r5, #23]
10066cae:	0700      	lsls	r0, r0, #28
10066cb0:	d416      	bmi.n	10066ce0 <smp_pp2_per_rx_process_pairing_random+0x60>
10066cb2:	9400      	str	r4, [sp, #0]
10066cb4:	4634      	mov	r4, r6
10066cb6:	ae03      	add	r6, sp, #12
10066cb8:	4628      	mov	r0, r5
10066cba:	4621      	mov	r1, r4
10066cbc:	4632      	mov	r2, r6
10066cbe:	f7ff ff39 	bl	10066b34 <smp_pp2_per_lep_confirm_value_compute>
10066cc2:	4629      	mov	r1, r5
10066cc4:	3128      	adds	r1, #40	@ 0x28
10066cc6:	2210      	movs	r2, #16
10066cc8:	4630      	mov	r0, r6
10066cca:	4626      	mov	r6, r4
10066ccc:	9c00      	ldr	r4, [sp, #0]
10066cce:	f7eb fce1 	bl	10052694 <BLEPLAT_MemCmp>
10066cd2:	a901      	add	r1, sp, #4
10066cd4:	22bc      	movs	r2, #188	@ 0xbc
10066cd6:	700a      	strb	r2, [r1, #0]
10066cd8:	9002      	str	r0, [sp, #8]
10066cda:	e00c      	b.n	10066cf6 <smp_pp2_per_rx_process_pairing_random+0x76>
10066cdc:	2488      	movs	r4, #136	@ 0x88
10066cde:	e05b      	b.n	10066d98 <smp_pp2_per_rx_process_pairing_random+0x118>
10066ce0:	a801      	add	r0, sp, #4
10066ce2:	900a      	str	r0, [sp, #40]	@ 0x28
10066ce4:	a802      	add	r0, sp, #8
10066ce6:	9009      	str	r0, [sp, #36]	@ 0x24
10066ce8:	a803      	add	r0, sp, #12
10066cea:	9008      	str	r0, [sp, #32]
10066cec:	9507      	str	r5, [sp, #28]
10066cee:	a807      	add	r0, sp, #28
10066cf0:	f000 f85a 	bl	10066da8 <smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg_weak>
10066cf4:	9802      	ldr	r0, [sp, #8]
10066cf6:	2800      	cmp	r0, #0
10066cf8:	d006      	beq.n	10066d08 <smp_pp2_per_rx_process_pairing_random+0x88>
10066cfa:	2104      	movs	r1, #4
10066cfc:	2301      	movs	r3, #1
10066cfe:	4628      	mov	r0, r5
10066d00:	463a      	mov	r2, r7
10066d02:	f7ff fc1f 	bl	10066544 <smp_pp3_pairing_failed_send>
10066d06:	e01b      	b.n	10066d40 <smp_pp2_per_rx_process_pairing_random+0xc0>
10066d08:	2011      	movs	r0, #17
10066d0a:	8078      	strh	r0, [r7, #2]
10066d0c:	6878      	ldr	r0, [r7, #4]
10066d0e:	2104      	movs	r1, #4
10066d10:	7201      	strb	r1, [r0, #8]
10066d12:	462b      	mov	r3, r5
10066d14:	3348      	adds	r3, #72	@ 0x48
10066d16:	2105      	movs	r1, #5
10066d18:	2210      	movs	r2, #16
10066d1a:	4638      	mov	r0, r7
10066d1c:	f7ee f870 	bl	10054e00 <ACL_pkt_write>
10066d20:	4628      	mov	r0, r5
10066d22:	4639      	mov	r1, r7
10066d24:	f7ff fa12 	bl	1006614c <smp_dep_l2c_send_acl_packet>
10066d28:	2800      	cmp	r0, #0
10066d2a:	d109      	bne.n	10066d40 <smp_pp2_per_rx_process_pairing_random+0xc0>
10066d2c:	9801      	ldr	r0, [sp, #4]
10066d2e:	72a8      	strb	r0, [r5, #10]
10066d30:	481b      	ldr	r0, [pc, #108]	@ (10066da0 <__arm_cp.17_0>)
10066d32:	6800      	ldr	r0, [r0, #0]
10066d34:	2135      	movs	r1, #53	@ 0x35
10066d36:	5c40      	ldrb	r0, [r0, r1]
10066d38:	7c29      	ldrb	r1, [r5, #16]
10066d3a:	4281      	cmp	r1, r0
10066d3c:	d900      	bls.n	10066d40 <smp_pp2_per_rx_process_pairing_random+0xc0>
10066d3e:	7428      	strb	r0, [r5, #16]
10066d40:	9802      	ldr	r0, [sp, #8]
10066d42:	2800      	cmp	r0, #0
10066d44:	d128      	bne.n	10066d98 <smp_pp2_per_rx_process_pairing_random+0x118>
10066d46:	7de8      	ldrb	r0, [r5, #23]
10066d48:	0700      	lsls	r0, r0, #28
10066d4a:	d425      	bmi.n	10066d98 <smp_pp2_per_rx_process_pairing_random+0x118>
10066d4c:	a807      	add	r0, sp, #28
10066d4e:	2400      	movs	r4, #0
10066d50:	2210      	movs	r2, #16
10066d52:	4621      	mov	r1, r4
10066d54:	f7eb fc8e 	bl	10052674 <BLEPLAT_MemSet>
10066d58:	7ce8      	ldrb	r0, [r5, #19]
10066d5a:	2803      	cmp	r0, #3
10066d5c:	d00d      	beq.n	10066d7a <smp_pp2_per_rx_process_pairing_random+0xfa>
10066d5e:	2802      	cmp	r0, #2
10066d60:	d112      	bne.n	10066d88 <smp_pp2_per_rx_process_pairing_random+0x108>
10066d62:	480f      	ldr	r0, [pc, #60]	@ (10066da0 <__arm_cp.17_0>)
10066d64:	6800      	ldr	r0, [r0, #0]
10066d66:	6b80      	ldr	r0, [r0, #56]	@ 0x38
10066d68:	a907      	add	r1, sp, #28
10066d6a:	7008      	strb	r0, [r1, #0]
10066d6c:	0a02      	lsrs	r2, r0, #8
10066d6e:	704a      	strb	r2, [r1, #1]
10066d70:	0c02      	lsrs	r2, r0, #16
10066d72:	708a      	strb	r2, [r1, #2]
10066d74:	0e00      	lsrs	r0, r0, #24
10066d76:	70c8      	strb	r0, [r1, #3]
10066d78:	e006      	b.n	10066d88 <smp_pp2_per_rx_process_pairing_random+0x108>
10066d7a:	4809      	ldr	r0, [pc, #36]	@ (10066da0 <__arm_cp.17_0>)
10066d7c:	6801      	ldr	r1, [r0, #0]
10066d7e:	3144      	adds	r1, #68	@ 0x44
10066d80:	a807      	add	r0, sp, #28
10066d82:	2210      	movs	r2, #16
10066d84:	f7eb fc66 	bl	10052654 <BLEPLAT_MemCpy>
10066d88:	4629      	mov	r1, r5
10066d8a:	3148      	adds	r1, #72	@ 0x48
10066d8c:	3528      	adds	r5, #40	@ 0x28
10066d8e:	a807      	add	r0, sp, #28
10066d90:	4632      	mov	r2, r6
10066d92:	462b      	mov	r3, r5
10066d94:	f7fa fcd0 	bl	10061738 <smp_crt_s1_generate_stk>
10066d98:	4620      	mov	r0, r4
10066d9a:	b00b      	add	sp, #44	@ 0x2c
10066d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066d9e:	46c0      	nop			@ (mov r8, r8)

10066da0 <__arm_cp.17_0>:
10066da0:	200024bc 	.word	0x200024bc

10066da4 <smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg_weak>:
10066da4:	4770      	bx	lr

10066da6 <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg_weak>:
10066da6:	4770      	bx	lr

10066da8 <smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg_weak>:
10066da8:	4770      	bx	lr

10066daa <smp_pp3_keys_distribution_start>:
10066daa:	b580      	push	{r7, lr}
10066dac:	2901      	cmp	r1, #1
10066dae:	d111      	bne.n	10066dd4 <smp_pp3_keys_distribution_start+0x2a>
10066db0:	7c42      	ldrb	r2, [r0, #17]
10066db2:	0753      	lsls	r3, r2, #29
10066db4:	d005      	beq.n	10066dc2 <smp_pp3_keys_distribution_start+0x18>
10066db6:	7dc3      	ldrb	r3, [r0, #23]
10066db8:	071b      	lsls	r3, r3, #28
10066dba:	d51d      	bpl.n	10066df8 <smp_pp3_keys_distribution_start+0x4e>
10066dbc:	2306      	movs	r3, #6
10066dbe:	401a      	ands	r2, r3
10066dc0:	d11a      	bne.n	10066df8 <smp_pp3_keys_distribution_start+0x4e>
10066dc2:	2260      	movs	r2, #96	@ 0x60
10066dc4:	5c83      	ldrb	r3, [r0, r2]
10066dc6:	2201      	movs	r2, #1
10066dc8:	401a      	ands	r2, r3
10066dca:	2900      	cmp	r1, #0
10066dcc:	d006      	beq.n	10066ddc <smp_pp3_keys_distribution_start+0x32>
10066dce:	2a00      	cmp	r2, #0
10066dd0:	d119      	bne.n	10066e06 <smp_pp3_keys_distribution_start+0x5c>
10066dd2:	e003      	b.n	10066ddc <smp_pp3_keys_distribution_start+0x32>
10066dd4:	2900      	cmp	r1, #0
10066dd6:	d000      	beq.n	10066dda <smp_pp3_keys_distribution_start+0x30>
10066dd8:	bd80      	pop	{r7, pc}
10066dda:	2200      	movs	r2, #0
10066ddc:	7c81      	ldrb	r1, [r0, #18]
10066dde:	07cb      	lsls	r3, r1, #31
10066de0:	d004      	beq.n	10066dec <smp_pp3_keys_distribution_start+0x42>
10066de2:	7dc3      	ldrb	r3, [r0, #23]
10066de4:	071b      	lsls	r3, r3, #28
10066de6:	d401      	bmi.n	10066dec <smp_pp3_keys_distribution_start+0x42>
10066de8:	21d1      	movs	r1, #209	@ 0xd1
10066dea:	e009      	b.n	10066e00 <smp_pp3_keys_distribution_start+0x56>
10066dec:	078b      	lsls	r3, r1, #30
10066dee:	d406      	bmi.n	10066dfe <smp_pp3_keys_distribution_start+0x54>
10066df0:	0749      	lsls	r1, r1, #29
10066df2:	d508      	bpl.n	10066e06 <smp_pp3_keys_distribution_start+0x5c>
10066df4:	21d5      	movs	r1, #213	@ 0xd5
10066df6:	e003      	b.n	10066e00 <smp_pp3_keys_distribution_start+0x56>
10066df8:	21d0      	movs	r1, #208	@ 0xd0
10066dfa:	7281      	strb	r1, [r0, #10]
10066dfc:	bd80      	pop	{r7, pc}
10066dfe:	21d3      	movs	r1, #211	@ 0xd3
10066e00:	7281      	strb	r1, [r0, #10]
10066e02:	2a00      	cmp	r2, #0
10066e04:	d002      	beq.n	10066e0c <smp_pp3_keys_distribution_start+0x62>
10066e06:	f000 f804 	bl	10066e12 <smp_pp3_keys_distribution_completed>
10066e0a:	bd80      	pop	{r7, pc}
10066e0c:	f000 f816 	bl	10066e3c <smp_pp3_keys_distribution_send>
10066e10:	bd80      	pop	{r7, pc}

10066e12 <smp_pp3_keys_distribution_completed>:
10066e12:	b580      	push	{r7, lr}
10066e14:	2160      	movs	r1, #96	@ 0x60
10066e16:	5c41      	ldrb	r1, [r0, r1]
10066e18:	07c9      	lsls	r1, r1, #31
10066e1a:	d106      	bne.n	10066e2a <smp_pp3_keys_distribution_completed+0x18>
10066e1c:	2111      	movs	r1, #17
10066e1e:	5641      	ldrsb	r1, [r0, r1]
10066e20:	2900      	cmp	r1, #0
10066e22:	d502      	bpl.n	10066e2a <smp_pp3_keys_distribution_completed+0x18>
10066e24:	7e81      	ldrb	r1, [r0, #26]
10066e26:	068a      	lsls	r2, r1, #26
10066e28:	d402      	bmi.n	10066e30 <smp_pp3_keys_distribution_completed+0x1e>
10066e2a:	f7ff fad3 	bl	100663d4 <smp_pp3_pairing_completed_successful>
10066e2e:	bd80      	pop	{r7, pc}
10066e30:	2204      	movs	r2, #4
10066e32:	4311      	orrs	r1, r2
10066e34:	7681      	strb	r1, [r0, #26]
10066e36:	f7ff faca 	bl	100663ce <smp_start_encryption_ucfg_weak>
10066e3a:	bd80      	pop	{r7, pc}

10066e3c <smp_pp3_keys_distribution_send>:
10066e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
10066e3e:	b089      	sub	sp, #36	@ 0x24
10066e40:	4604      	mov	r4, r0
10066e42:	a808      	add	r0, sp, #32
10066e44:	2600      	movs	r6, #0
10066e46:	8006      	strh	r6, [r0, #0]
10066e48:	8921      	ldrh	r1, [r4, #8]
10066e4a:	2215      	movs	r2, #21
10066e4c:	4630      	mov	r0, r6
10066e4e:	f7ed ff77 	bl	10054d40 <ACL_pkt_get>
10066e52:	2800      	cmp	r0, #0
10066e54:	d02d      	beq.n	10066eb2 <smp_pp3_keys_distribution_send+0x76>
10066e56:	4605      	mov	r5, r0
10066e58:	2060      	movs	r0, #96	@ 0x60
10066e5a:	5c20      	ldrb	r0, [r4, r0]
10066e5c:	06c0      	lsls	r0, r0, #27
10066e5e:	d40b      	bmi.n	10066e78 <smp_pp3_keys_distribution_send+0x3c>
10066e60:	4627      	mov	r7, r4
10066e62:	3760      	adds	r7, #96	@ 0x60
10066e64:	4620      	mov	r0, r4
10066e66:	301c      	adds	r0, #28
10066e68:	2102      	movs	r1, #2
10066e6a:	2200      	movs	r2, #0
10066e6c:	f7fb ffaf 	bl	10062dce <HAL_Generate_Random_Bytes_To>
10066e70:	7838      	ldrb	r0, [r7, #0]
10066e72:	2110      	movs	r1, #16
10066e74:	4301      	orrs	r1, r0
10066e76:	7039      	strb	r1, [r7, #0]
10066e78:	7aa0      	ldrb	r0, [r4, #10]
10066e7a:	38d1      	subs	r0, #209	@ 0xd1
10066e7c:	2804      	cmp	r0, #4
10066e7e:	d875      	bhi.n	10066f6c <smp_pp3_keys_distribution_send+0x130>
10066e80:	4478      	add	r0, pc
10066e82:	7900      	ldrb	r0, [r0, #4]
10066e84:	0040      	lsls	r0, r0, #1
10066e86:	4487      	add	pc, r0
10066e88:	4e381902 	.word	0x4e381902
10066e8c:	0060      	.short	0x0060
10066e8e:	483c      	ldr	r0, [pc, #240]	@ (10066f80 <__arm_cp.2_0>)
10066e90:	6800      	ldr	r0, [r0, #0]
10066e92:	4621      	mov	r1, r4
10066e94:	311c      	adds	r1, #28
10066e96:	3008      	adds	r0, #8
10066e98:	aa08      	add	r2, sp, #32
10066e9a:	ae04      	add	r6, sp, #16
10066e9c:	4633      	mov	r3, r6
10066e9e:	f7fa fbcd 	bl	1006163c <smp_crt_diversify>
10066ea2:	6868      	ldr	r0, [r5, #4]
10066ea4:	2106      	movs	r1, #6
10066ea6:	7201      	strb	r1, [r0, #8]
10066ea8:	2011      	movs	r0, #17
10066eaa:	8068      	strh	r0, [r5, #2]
10066eac:	7c22      	ldrb	r2, [r4, #16]
10066eae:	2105      	movs	r1, #5
10066eb0:	e058      	b.n	10066f64 <smp_pp3_keys_distribution_send+0x128>
10066eb2:	200e      	movs	r0, #14
10066eb4:	2100      	movs	r1, #0
10066eb6:	f7fb fc75 	bl	100627a4 <tsk_wait_resource_idx>
10066eba:	e05f      	b.n	10066f7c <smp_pp3_keys_distribution_send+0x140>
10066ebc:	ae04      	add	r6, sp, #16
10066ebe:	2108      	movs	r1, #8
10066ec0:	9102      	str	r1, [sp, #8]
10066ec2:	2200      	movs	r2, #0
10066ec4:	4630      	mov	r0, r6
10066ec6:	9601      	str	r6, [sp, #4]
10066ec8:	f7fb ff81 	bl	10062dce <HAL_Generate_Random_Bytes_To>
10066ecc:	4620      	mov	r0, r4
10066ece:	301c      	adds	r0, #28
10066ed0:	af08      	add	r7, sp, #32
10066ed2:	4631      	mov	r1, r6
10066ed4:	463a      	mov	r2, r7
10066ed6:	f7fa fb7b 	bl	100615d0 <smp_sap_crt_generate_ediv>
10066eda:	200b      	movs	r0, #11
10066edc:	8068      	strh	r0, [r5, #2]
10066ede:	6868      	ldr	r0, [r5, #4]
10066ee0:	2607      	movs	r6, #7
10066ee2:	7206      	strb	r6, [r0, #8]
10066ee4:	2105      	movs	r1, #5
10066ee6:	2202      	movs	r2, #2
10066ee8:	4628      	mov	r0, r5
10066eea:	463b      	mov	r3, r7
10066eec:	f7ed ff88 	bl	10054e00 <ACL_pkt_write>
10066ef0:	4628      	mov	r0, r5
10066ef2:	4631      	mov	r1, r6
10066ef4:	9a02      	ldr	r2, [sp, #8]
10066ef6:	9b01      	ldr	r3, [sp, #4]
10066ef8:	e036      	b.n	10066f68 <smp_pp3_keys_distribution_send+0x12c>
10066efa:	2011      	movs	r0, #17
10066efc:	8068      	strh	r0, [r5, #2]
10066efe:	6868      	ldr	r0, [r5, #4]
10066f00:	2108      	movs	r1, #8
10066f02:	7201      	strb	r1, [r0, #8]
10066f04:	a804      	add	r0, sp, #16
10066f06:	2100      	movs	r1, #0
10066f08:	2210      	movs	r2, #16
10066f0a:	f7eb fbb3 	bl	10052674 <BLEPLAT_MemSet>
10066f0e:	f7ef f989 	bl	10056224 <GapIsPrivacySupported>
10066f12:	2800      	cmp	r0, #0
10066f14:	d002      	beq.n	10066f1c <smp_pp3_keys_distribution_send+0xe0>
10066f16:	a804      	add	r0, sp, #16
10066f18:	f7fa fba4 	bl	10061664 <smp_sap_crt_generate_local_irk>
10066f1c:	2105      	movs	r1, #5
10066f1e:	2210      	movs	r2, #16
10066f20:	ab04      	add	r3, sp, #16
10066f22:	4628      	mov	r0, r5
10066f24:	e020      	b.n	10066f68 <smp_pp3_keys_distribution_send+0x12c>
10066f26:	a803      	add	r0, sp, #12
10066f28:	7006      	strb	r6, [r0, #0]
10066f2a:	ae04      	add	r6, sp, #16
10066f2c:	4631      	mov	r1, r6
10066f2e:	f7ff f8f5 	bl	1006611c <smp_dep_gap_get_local_identity_address>
10066f32:	2008      	movs	r0, #8
10066f34:	8068      	strh	r0, [r5, #2]
10066f36:	6868      	ldr	r0, [r5, #4]
10066f38:	2109      	movs	r1, #9
10066f3a:	7201      	strb	r1, [r0, #8]
10066f3c:	6868      	ldr	r0, [r5, #4]
10066f3e:	9903      	ldr	r1, [sp, #12]
10066f40:	7241      	strb	r1, [r0, #9]
10066f42:	2106      	movs	r1, #6
10066f44:	4628      	mov	r0, r5
10066f46:	460a      	mov	r2, r1
10066f48:	e00d      	b.n	10066f66 <smp_pp3_keys_distribution_send+0x12a>
10066f4a:	2011      	movs	r0, #17
10066f4c:	8068      	strh	r0, [r5, #2]
10066f4e:	6868      	ldr	r0, [r5, #4]
10066f50:	210a      	movs	r1, #10
10066f52:	7201      	strb	r1, [r0, #8]
10066f54:	4620      	mov	r0, r4
10066f56:	301c      	adds	r0, #28
10066f58:	ae04      	add	r6, sp, #16
10066f5a:	4631      	mov	r1, r6
10066f5c:	f7fa fc04 	bl	10061768 <smp_crt_generate_csrk>
10066f60:	2105      	movs	r1, #5
10066f62:	2210      	movs	r2, #16
10066f64:	4628      	mov	r0, r5
10066f66:	4633      	mov	r3, r6
10066f68:	f7ed ff4a 	bl	10054e00 <ACL_pkt_write>
10066f6c:	4620      	mov	r0, r4
10066f6e:	4629      	mov	r1, r5
10066f70:	f7ff f8ec 	bl	1006614c <smp_dep_l2c_send_acl_packet>
10066f74:	2800      	cmp	r0, #0
10066f76:	d101      	bne.n	10066f7c <smp_pp3_keys_distribution_send+0x140>
10066f78:	20dd      	movs	r0, #221	@ 0xdd
10066f7a:	72a0      	strb	r0, [r4, #10]
10066f7c:	b009      	add	sp, #36	@ 0x24
10066f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10066f80 <__arm_cp.2_0>:
10066f80:	2000241c 	.word	0x2000241c

10066f84 <smp_pp3_keys_distribution_signaling_ack>:
10066f84:	b580      	push	{r7, lr}
10066f86:	7a82      	ldrb	r2, [r0, #10]
10066f88:	2add      	cmp	r2, #221	@ 0xdd
10066f8a:	d123      	bne.n	10066fd4 <smp_pp3_keys_distribution_signaling_ack+0x50>
10066f8c:	1f8a      	subs	r2, r1, #6
10066f8e:	2a04      	cmp	r2, #4
10066f90:	d81e      	bhi.n	10066fd0 <smp_pp3_keys_distribution_signaling_ack+0x4c>
10066f92:	21d2      	movs	r1, #210	@ 0xd2
10066f94:	447a      	add	r2, pc
10066f96:	7912      	ldrb	r2, [r2, #4]
10066f98:	0052      	lsls	r2, r2, #1
10066f9a:	4497      	add	pc, r2
10066f9c:	07110218 	.word	0x07110218
10066fa0:	000a      	.short	0x000a
10066fa2:	7c81      	ldrb	r1, [r0, #18]
10066fa4:	078a      	lsls	r2, r1, #30
10066fa6:	d502      	bpl.n	10066fae <smp_pp3_keys_distribution_signaling_ack+0x2a>
10066fa8:	21d3      	movs	r1, #211	@ 0xd3
10066faa:	e010      	b.n	10066fce <smp_pp3_keys_distribution_signaling_ack+0x4a>
10066fac:	7c81      	ldrb	r1, [r0, #18]
10066fae:	0749      	lsls	r1, r1, #29
10066fb0:	d40c      	bmi.n	10066fcc <smp_pp3_keys_distribution_signaling_ack+0x48>
10066fb2:	2160      	movs	r1, #96	@ 0x60
10066fb4:	5c41      	ldrb	r1, [r0, r1]
10066fb6:	07c9      	lsls	r1, r1, #31
10066fb8:	d104      	bne.n	10066fc4 <smp_pp3_keys_distribution_signaling_ack+0x40>
10066fba:	f7ff ff2a 	bl	10066e12 <smp_pp3_keys_distribution_completed>
10066fbe:	bd80      	pop	{r7, pc}
10066fc0:	21d4      	movs	r1, #212	@ 0xd4
10066fc2:	e004      	b.n	10066fce <smp_pp3_keys_distribution_signaling_ack+0x4a>
10066fc4:	2101      	movs	r1, #1
10066fc6:	f7ff fef0 	bl	10066daa <smp_pp3_keys_distribution_start>
10066fca:	bd80      	pop	{r7, pc}
10066fcc:	21d5      	movs	r1, #213	@ 0xd5
10066fce:	7281      	strb	r1, [r0, #10]
10066fd0:	f7ff ff34 	bl	10066e3c <smp_pp3_keys_distribution_send>
10066fd4:	bd80      	pop	{r7, pc}
	...

10066fd8 <smp_pp3_keys_distribution_receive>:
10066fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
10066fda:	b085      	sub	sp, #20
10066fdc:	4607      	mov	r7, r0
10066fde:	6840      	ldr	r0, [r0, #4]
10066fe0:	7a05      	ldrb	r5, [r0, #8]
10066fe2:	1fa8      	subs	r0, r5, #6
10066fe4:	2804      	cmp	r0, #4
10066fe6:	d823      	bhi.n	10067030 <smp_pp3_keys_distribution_receive+0x58>
10066fe8:	460c      	mov	r4, r1
10066fea:	7a88      	ldrb	r0, [r1, #10]
10066fec:	2686      	movs	r6, #134	@ 0x86
10066fee:	28d0      	cmp	r0, #208	@ 0xd0
10066ff0:	d11f      	bne.n	10067032 <smp_pp3_keys_distribution_receive+0x5a>
10066ff2:	4620      	mov	r0, r4
10066ff4:	3059      	adds	r0, #89	@ 0x59
10066ff6:	9001      	str	r0, [sp, #4]
10066ff8:	8920      	ldrh	r0, [r4, #8]
10066ffa:	f000 f995 	bl	10067328 <smp_get_remote_device_list_index>
10066ffe:	4602      	mov	r2, r0
10067000:	2000      	movs	r0, #0
10067002:	4b44      	ldr	r3, [pc, #272]	@ (10067114 <__arm_cp.4_0>)
10067004:	9002      	str	r0, [sp, #8]
10067006:	4601      	mov	r1, r0
10067008:	f7fa fe56 	bl	10061cb8 <smp_timer_reset>
1006700c:	2d06      	cmp	r5, #6
1006700e:	d005      	beq.n	1006701c <smp_pp3_keys_distribution_receive+0x44>
10067010:	2d09      	cmp	r5, #9
10067012:	d011      	beq.n	10067038 <smp_pp3_keys_distribution_receive+0x60>
10067014:	2d08      	cmp	r5, #8
10067016:	d034      	beq.n	10067082 <smp_pp3_keys_distribution_receive+0xaa>
10067018:	2d07      	cmp	r5, #7
1006701a:	d13d      	bne.n	10067098 <smp_pp3_keys_distribution_receive+0xc0>
1006701c:	7de0      	ldrb	r0, [r4, #23]
1006701e:	0700      	lsls	r0, r0, #28
10067020:	d407      	bmi.n	10067032 <smp_pp3_keys_distribution_receive+0x5a>
10067022:	7c60      	ldrb	r0, [r4, #17]
10067024:	07c0      	lsls	r0, r0, #31
10067026:	d004      	beq.n	10067032 <smp_pp3_keys_distribution_receive+0x5a>
10067028:	2d06      	cmp	r5, #6
1006702a:	d144      	bne.n	100670b6 <smp_pp3_keys_distribution_receive+0xde>
1006702c:	3428      	adds	r4, #40	@ 0x28
1006702e:	e02c      	b.n	1006708a <smp_pp3_keys_distribution_receive+0xb2>
10067030:	2684      	movs	r6, #132	@ 0x84
10067032:	4630      	mov	r0, r6
10067034:	b005      	add	sp, #20
10067036:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067038:	7c60      	ldrb	r0, [r4, #17]
1006703a:	0780      	lsls	r0, r0, #30
1006703c:	d5f9      	bpl.n	10067032 <smp_pp3_keys_distribution_receive+0x5a>
1006703e:	ab03      	add	r3, sp, #12
10067040:	2600      	movs	r6, #0
10067042:	809e      	strh	r6, [r3, #4]
10067044:	9603      	str	r6, [sp, #12]
10067046:	2106      	movs	r1, #6
10067048:	4638      	mov	r0, r7
1006704a:	460a      	mov	r2, r1
1006704c:	f7ed fead 	bl	10054daa <ACL_pkt_cmp>
10067050:	2800      	cmp	r0, #0
10067052:	d045      	beq.n	100670e0 <smp_pp3_keys_distribution_receive+0x108>
10067054:	6878      	ldr	r0, [r7, #4]
10067056:	7a40      	ldrb	r0, [r0, #9]
10067058:	9d01      	ldr	r5, [sp, #4]
1006705a:	7028      	strb	r0, [r5, #0]
1006705c:	4623      	mov	r3, r4
1006705e:	335a      	adds	r3, #90	@ 0x5a
10067060:	2106      	movs	r1, #6
10067062:	4638      	mov	r0, r7
10067064:	460a      	mov	r2, r1
10067066:	f7ed fea9 	bl	10054dbc <ACL_pkt_read>
1006706a:	7828      	ldrb	r0, [r5, #0]
1006706c:	2801      	cmp	r0, #1
1006706e:	d103      	bne.n	10067078 <smp_pp3_keys_distribution_receive+0xa0>
10067070:	79a8      	ldrb	r0, [r5, #6]
10067072:	0980      	lsrs	r0, r0, #6
10067074:	2803      	cmp	r0, #3
10067076:	d345      	bcc.n	10067104 <smp_pp3_keys_distribution_receive+0x12c>
10067078:	7c61      	ldrb	r1, [r4, #17]
1006707a:	2020      	movs	r0, #32
1006707c:	4308      	orrs	r0, r1
1006707e:	7460      	strb	r0, [r4, #17]
10067080:	e02f      	b.n	100670e2 <smp_pp3_keys_distribution_receive+0x10a>
10067082:	7c60      	ldrb	r0, [r4, #17]
10067084:	0780      	lsls	r0, r0, #30
10067086:	d5d4      	bpl.n	10067032 <smp_pp3_keys_distribution_receive+0x5a>
10067088:	3438      	adds	r4, #56	@ 0x38
1006708a:	2105      	movs	r1, #5
1006708c:	2210      	movs	r2, #16
1006708e:	4638      	mov	r0, r7
10067090:	4623      	mov	r3, r4
10067092:	f7ed fe93 	bl	10054dbc <ACL_pkt_read>
10067096:	e033      	b.n	10067100 <smp_pp3_keys_distribution_receive+0x128>
10067098:	7c60      	ldrb	r0, [r4, #17]
1006709a:	0740      	lsls	r0, r0, #29
1006709c:	d5c9      	bpl.n	10067032 <smp_pp3_keys_distribution_receive+0x5a>
1006709e:	4623      	mov	r3, r4
100670a0:	3348      	adds	r3, #72	@ 0x48
100670a2:	2105      	movs	r1, #5
100670a4:	2210      	movs	r2, #16
100670a6:	4638      	mov	r0, r7
100670a8:	f7ed fe88 	bl	10054dbc <ACL_pkt_read>
100670ac:	7c60      	ldrb	r0, [r4, #17]
100670ae:	2140      	movs	r1, #64	@ 0x40
100670b0:	4301      	orrs	r1, r0
100670b2:	7461      	strb	r1, [r4, #17]
100670b4:	e017      	b.n	100670e6 <smp_pp3_keys_distribution_receive+0x10e>
100670b6:	6878      	ldr	r0, [r7, #4]
100670b8:	7a40      	ldrb	r0, [r0, #9]
100670ba:	77a0      	strb	r0, [r4, #30]
100670bc:	6878      	ldr	r0, [r7, #4]
100670be:	7a80      	ldrb	r0, [r0, #10]
100670c0:	77e0      	strb	r0, [r4, #31]
100670c2:	4623      	mov	r3, r4
100670c4:	3320      	adds	r3, #32
100670c6:	2107      	movs	r1, #7
100670c8:	2208      	movs	r2, #8
100670ca:	4638      	mov	r0, r7
100670cc:	f7ed fe76 	bl	10054dbc <ACL_pkt_read>
100670d0:	7c60      	ldrb	r0, [r4, #17]
100670d2:	2180      	movs	r1, #128	@ 0x80
100670d4:	4301      	orrs	r1, r0
100670d6:	7461      	strb	r1, [r4, #17]
100670d8:	0740      	lsls	r0, r0, #29
100670da:	0f80      	lsrs	r0, r0, #30
100670dc:	d110      	bne.n	10067100 <smp_pp3_keys_distribution_receive+0x128>
100670de:	e002      	b.n	100670e6 <smp_pp3_keys_distribution_receive+0x10e>
100670e0:	7c60      	ldrb	r0, [r4, #17]
100670e2:	0740      	lsls	r0, r0, #29
100670e4:	d4a5      	bmi.n	10067032 <smp_pp3_keys_distribution_receive+0x5a>
100670e6:	9801      	ldr	r0, [sp, #4]
100670e8:	79c0      	ldrb	r0, [r0, #7]
100670ea:	07c0      	lsls	r0, r0, #31
100670ec:	d105      	bne.n	100670fa <smp_pp3_keys_distribution_receive+0x122>
100670ee:	2600      	movs	r6, #0
100670f0:	4620      	mov	r0, r4
100670f2:	4631      	mov	r1, r6
100670f4:	f7ff fe59 	bl	10066daa <smp_pp3_keys_distribution_start>
100670f8:	e79b      	b.n	10067032 <smp_pp3_keys_distribution_receive+0x5a>
100670fa:	4620      	mov	r0, r4
100670fc:	f7ff f96a 	bl	100663d4 <smp_pp3_pairing_completed_successful>
10067100:	9e02      	ldr	r6, [sp, #8]
10067102:	e796      	b.n	10067032 <smp_pp3_keys_distribution_receive+0x5a>
10067104:	2108      	movs	r1, #8
10067106:	2200      	movs	r2, #0
10067108:	2301      	movs	r3, #1
1006710a:	4620      	mov	r0, r4
1006710c:	f7ff fa1a 	bl	10066544 <smp_pp3_pairing_failed_send>
10067110:	4606      	mov	r6, r0
10067112:	e78e      	b.n	10067032 <smp_pp3_keys_distribution_receive+0x5a>

10067114 <__arm_cp.4_0>:
10067114:	00007530 	.word	0x00007530

10067118 <smp_cmn_rejectlist_init>:
10067118:	b580      	push	{r7, lr}
1006711a:	2003      	movs	r0, #3
1006711c:	2108      	movs	r1, #8
1006711e:	f7f9 fd59 	bl	10060bd4 <csmem_mem_0_assign>
10067122:	4902      	ldr	r1, [pc, #8]	@ (1006712c <__arm_cp.0_0>)
10067124:	6809      	ldr	r1, [r1, #0]
10067126:	22a8      	movs	r2, #168	@ 0xa8
10067128:	5088      	str	r0, [r1, r2]
1006712a:	bd80      	pop	{r7, pc}

1006712c <__arm_cp.0_0>:
1006712c:	200024bc 	.word	0x200024bc

10067130 <smp_cmn_repeated_attacks_protection_start>:
10067130:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10067132:	9101      	str	r1, [sp, #4]
10067134:	2003      	movs	r0, #3
10067136:	9002      	str	r0, [sp, #8]
10067138:	2700      	movs	r7, #0
1006713a:	4a30      	ldr	r2, [pc, #192]	@ (100671fc <__arm_cp.1_0>)
1006713c:	463d      	mov	r5, r7
1006713e:	4616      	mov	r6, r2
10067140:	6810      	ldr	r0, [r2, #0]
10067142:	24a8      	movs	r4, #168	@ 0xa8
10067144:	5900      	ldr	r0, [r0, r4]
10067146:	19c0      	adds	r0, r0, r7
10067148:	1c80      	adds	r0, r0, #2
1006714a:	2206      	movs	r2, #6
1006714c:	9901      	ldr	r1, [sp, #4]
1006714e:	f7eb faa1 	bl	10052694 <BLEPLAT_MemCmp>
10067152:	2800      	cmp	r0, #0
10067154:	d031      	beq.n	100671ba <smp_cmn_repeated_attacks_protection_start+0x8a>
10067156:	9802      	ldr	r0, [sp, #8]
10067158:	2803      	cmp	r0, #3
1006715a:	4632      	mov	r2, r6
1006715c:	d109      	bne.n	10067172 <smp_cmn_repeated_attacks_protection_start+0x42>
1006715e:	6810      	ldr	r0, [r2, #0]
10067160:	5900      	ldr	r0, [r0, r4]
10067162:	5dc0      	ldrb	r0, [r0, r7]
10067164:	0680      	lsls	r0, r0, #26
10067166:	0f80      	lsrs	r0, r0, #30
10067168:	d001      	beq.n	1006716e <smp_cmn_repeated_attacks_protection_start+0x3e>
1006716a:	2003      	movs	r0, #3
1006716c:	e000      	b.n	10067170 <smp_cmn_repeated_attacks_protection_start+0x40>
1006716e:	b2e8      	uxtb	r0, r5
10067170:	9002      	str	r0, [sp, #8]
10067172:	3708      	adds	r7, #8
10067174:	1c6d      	adds	r5, r5, #1
10067176:	2d03      	cmp	r5, #3
10067178:	d1e1      	bne.n	1006713e <smp_cmn_repeated_attacks_protection_start+0xe>
1006717a:	6810      	ldr	r0, [r2, #0]
1006717c:	2541      	movs	r5, #65	@ 0x41
1006717e:	5d41      	ldrb	r1, [r0, r5]
10067180:	30a8      	adds	r0, #168	@ 0xa8
10067182:	2902      	cmp	r1, #2
10067184:	d836      	bhi.n	100671f4 <smp_cmn_repeated_attacks_protection_start+0xc4>
10067186:	9902      	ldr	r1, [sp, #8]
10067188:	00cf      	lsls	r7, r1, #3
1006718a:	6800      	ldr	r0, [r0, #0]
1006718c:	19c0      	adds	r0, r0, r7
1006718e:	1c80      	adds	r0, r0, #2
10067190:	4616      	mov	r6, r2
10067192:	2206      	movs	r2, #6
10067194:	9901      	ldr	r1, [sp, #4]
10067196:	f7eb fa5d 	bl	10052654 <BLEPLAT_MemCpy>
1006719a:	6830      	ldr	r0, [r6, #0]
1006719c:	5900      	ldr	r0, [r0, r4]
1006719e:	2110      	movs	r1, #16
100671a0:	55c1      	strb	r1, [r0, r7]
100671a2:	9802      	ldr	r0, [sp, #8]
100671a4:	b2c2      	uxtb	r2, r0
100671a6:	2000      	movs	r0, #0
100671a8:	2101      	movs	r1, #1
100671aa:	4b15      	ldr	r3, [pc, #84]	@ (10067200 <__arm_cp.1_1>)
100671ac:	f7fa fd84 	bl	10061cb8 <smp_timer_reset>
100671b0:	6830      	ldr	r0, [r6, #0]
100671b2:	5d41      	ldrb	r1, [r0, r5]
100671b4:	1c49      	adds	r1, r1, #1
100671b6:	5541      	strb	r1, [r0, r5]
100671b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100671ba:	6830      	ldr	r0, [r6, #0]
100671bc:	5900      	ldr	r0, [r0, r4]
100671be:	5dc3      	ldrb	r3, [r0, r7]
100671c0:	21cf      	movs	r1, #207	@ 0xcf
100671c2:	4019      	ands	r1, r3
100671c4:	3110      	adds	r1, #16
100671c6:	2203      	movs	r2, #3
100671c8:	401a      	ands	r2, r3
100671ca:	1c53      	adds	r3, r2, #1
100671cc:	2a03      	cmp	r2, #3
100671ce:	d002      	beq.n	100671d6 <smp_cmn_repeated_attacks_protection_start+0xa6>
100671d0:	24dc      	movs	r4, #220	@ 0xdc
100671d2:	4021      	ands	r1, r4
100671d4:	4319      	orrs	r1, r3
100671d6:	55c1      	strb	r1, [r0, r7]
100671d8:	2a03      	cmp	r2, #3
100671da:	d100      	bne.n	100671de <smp_cmn_repeated_attacks_protection_start+0xae>
100671dc:	4613      	mov	r3, r2
100671de:	a009      	add	r0, pc, #36	@ (adr r0, 10067204 <__arm_cp.1_1+0x4>)
100671e0:	5cc0      	ldrb	r0, [r0, r3]
100671e2:	217d      	movs	r1, #125	@ 0x7d
100671e4:	00cb      	lsls	r3, r1, #3
100671e6:	4343      	muls	r3, r0
100671e8:	b2ea      	uxtb	r2, r5
100671ea:	2000      	movs	r0, #0
100671ec:	2101      	movs	r1, #1
100671ee:	f7fa fd63 	bl	10061cb8 <smp_timer_reset>
100671f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100671f4:	2101      	movs	r1, #1
100671f6:	7201      	strb	r1, [r0, #8]
100671f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100671fa:	46c0      	nop			@ (mov r8, r8)

100671fc <__arm_cp.1_0>:
100671fc:	200024bc 	.word	0x200024bc

10067200 <__arm_cp.1_1>:
10067200:	00000bb8 	.word	0x00000bb8
10067204:	140a0503 	.word	0x140a0503

10067208 <smp_cmn_repeated_attacks_timer_cb>:
10067208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006720a:	4e29      	ldr	r6, [pc, #164]	@ (100672b0 <__arm_cp.2_0>)
1006720c:	6831      	ldr	r1, [r6, #0]
1006720e:	25a8      	movs	r5, #168	@ 0xa8
10067210:	5949      	ldr	r1, [r1, r5]
10067212:	00c4      	lsls	r4, r0, #3
10067214:	5d0a      	ldrb	r2, [r1, r4]
10067216:	06d3      	lsls	r3, r2, #27
10067218:	d40e      	bmi.n	10067238 <smp_cmn_repeated_attacks_timer_cb+0x30>
1006721a:	0693      	lsls	r3, r2, #26
1006721c:	d546      	bpl.n	100672ac <smp_cmn_repeated_attacks_timer_cb+0xa4>
1006721e:	1909      	adds	r1, r1, r4
10067220:	0793      	lsls	r3, r2, #30
10067222:	d035      	beq.n	10067290 <smp_cmn_repeated_attacks_timer_cb+0x88>
10067224:	23fc      	movs	r3, #252	@ 0xfc
10067226:	4013      	ands	r3, r2
10067228:	1e52      	subs	r2, r2, #1
1006722a:	2403      	movs	r4, #3
1006722c:	4014      	ands	r4, r2
1006722e:	18e2      	adds	r2, r4, r3
10067230:	700a      	strb	r2, [r1, #0]
10067232:	f000 f841 	bl	100672b8 <smp_cmn_rejectlist_start_probation_timer2>
10067236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10067238:	f000 f83e 	bl	100672b8 <smp_cmn_rejectlist_start_probation_timer2>
1006723c:	6830      	ldr	r0, [r6, #0]
1006723e:	5940      	ldr	r0, [r0, r5]
10067240:	1900      	adds	r0, r0, r4
10067242:	1c84      	adds	r4, r0, #2
10067244:	2065      	movs	r0, #101	@ 0x65
10067246:	43c6      	mvns	r6, r0
10067248:	4637      	mov	r7, r6
1006724a:	3765      	adds	r7, #101	@ 0x65
1006724c:	4819      	ldr	r0, [pc, #100]	@ (100672b4 <__arm_cp.2_1>)
1006724e:	6800      	ldr	r0, [r0, #0]
10067250:	2134      	movs	r1, #52	@ 0x34
10067252:	5c40      	ldrb	r0, [r0, r1]
10067254:	1c7f      	adds	r7, r7, #1
10067256:	4287      	cmp	r7, r0
10067258:	d228      	bcs.n	100672ac <smp_cmn_repeated_attacks_timer_cb+0xa4>
1006725a:	4815      	ldr	r0, [pc, #84]	@ (100672b0 <__arm_cp.2_0>)
1006725c:	6800      	ldr	r0, [r0, #0]
1006725e:	25a4      	movs	r5, #164	@ 0xa4
10067260:	5940      	ldr	r0, [r0, r5]
10067262:	1980      	adds	r0, r0, r6
10067264:	3670      	adds	r6, #112	@ 0x70
10067266:	3068      	adds	r0, #104	@ 0x68
10067268:	2206      	movs	r2, #6
1006726a:	4621      	mov	r1, r4
1006726c:	f7eb fa12 	bl	10052694 <BLEPLAT_MemCmp>
10067270:	2800      	cmp	r0, #0
10067272:	d1eb      	bne.n	1006724c <smp_cmn_repeated_attacks_timer_cb+0x44>
10067274:	480e      	ldr	r0, [pc, #56]	@ (100672b0 <__arm_cp.2_0>)
10067276:	6800      	ldr	r0, [r0, #0]
10067278:	5940      	ldr	r0, [r0, r5]
1006727a:	5d81      	ldrb	r1, [r0, r6]
1006727c:	29fb      	cmp	r1, #251	@ 0xfb
1006727e:	d115      	bne.n	100672ac <smp_cmn_repeated_attacks_timer_cb+0xa4>
10067280:	2110      	movs	r1, #16
10067282:	5581      	strb	r1, [r0, r6]
10067284:	200e      	movs	r0, #14
10067286:	f7fb fa7b 	bl	10062780 <tsk_notify_idx>
1006728a:	f7ea fbfc 	bl	10051a86 <BLE_STACK_ProcessRequest>
1006728e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10067290:	4635      	mov	r5, r6
10067292:	2400      	movs	r4, #0
10067294:	2208      	movs	r2, #8
10067296:	4608      	mov	r0, r1
10067298:	4621      	mov	r1, r4
1006729a:	f7eb f9eb 	bl	10052674 <BLEPLAT_MemSet>
1006729e:	6830      	ldr	r0, [r6, #0]
100672a0:	21b0      	movs	r1, #176	@ 0xb0
100672a2:	5444      	strb	r4, [r0, r1]
100672a4:	2141      	movs	r1, #65	@ 0x41
100672a6:	5c42      	ldrb	r2, [r0, r1]
100672a8:	1e52      	subs	r2, r2, #1
100672aa:	5442      	strb	r2, [r0, r1]
100672ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100672ae:	46c0      	nop			@ (mov r8, r8)

100672b0 <__arm_cp.2_0>:
100672b0:	200024bc 	.word	0x200024bc

100672b4 <__arm_cp.2_1>:
100672b4:	2000241c 	.word	0x2000241c

100672b8 <smp_cmn_rejectlist_start_probation_timer2>:
100672b8:	b510      	push	{r4, lr}
100672ba:	4604      	mov	r4, r0
100672bc:	2000      	movs	r0, #0
100672be:	2101      	movs	r1, #1
100672c0:	4b07      	ldr	r3, [pc, #28]	@ (100672e0 <__arm_cp.3_0>)
100672c2:	4622      	mov	r2, r4
100672c4:	f7fa fcf8 	bl	10061cb8 <smp_timer_reset>
100672c8:	4806      	ldr	r0, [pc, #24]	@ (100672e4 <__arm_cp.3_1>)
100672ca:	6800      	ldr	r0, [r0, #0]
100672cc:	21a8      	movs	r1, #168	@ 0xa8
100672ce:	5840      	ldr	r0, [r0, r1]
100672d0:	00e1      	lsls	r1, r4, #3
100672d2:	5c42      	ldrb	r2, [r0, r1]
100672d4:	23cf      	movs	r3, #207	@ 0xcf
100672d6:	4013      	ands	r3, r2
100672d8:	3320      	adds	r3, #32
100672da:	5443      	strb	r3, [r0, r1]
100672dc:	bd10      	pop	{r4, pc}
100672de:	46c0      	nop			@ (mov r8, r8)

100672e0 <__arm_cp.3_0>:
100672e0:	00004e20 	.word	0x00004e20

100672e4 <__arm_cp.3_1>:
100672e4:	200024bc 	.word	0x200024bc

100672e8 <smp_cmn_is_peer_rejectlisted>:
100672e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100672ea:	460c      	mov	r4, r1
100672ec:	2007      	movs	r0, #7
100672ee:	43c0      	mvns	r0, r0
100672f0:	4e0c      	ldr	r6, [pc, #48]	@ (10067324 <__arm_cp.4_0>)
100672f2:	4605      	mov	r5, r0
100672f4:	3508      	adds	r5, #8
100672f6:	2d18      	cmp	r5, #24
100672f8:	d010      	beq.n	1006731c <smp_cmn_is_peer_rejectlisted+0x34>
100672fa:	6831      	ldr	r1, [r6, #0]
100672fc:	27a8      	movs	r7, #168	@ 0xa8
100672fe:	59c9      	ldr	r1, [r1, r7]
10067300:	1808      	adds	r0, r1, r0
10067302:	300a      	adds	r0, #10
10067304:	2206      	movs	r2, #6
10067306:	4621      	mov	r1, r4
10067308:	f7eb f9c4 	bl	10052694 <BLEPLAT_MemCmp>
1006730c:	2800      	cmp	r0, #0
1006730e:	4628      	mov	r0, r5
10067310:	d1f0      	bne.n	100672f4 <smp_cmn_is_peer_rejectlisted+0xc>
10067312:	6830      	ldr	r0, [r6, #0]
10067314:	59c0      	ldr	r0, [r0, r7]
10067316:	5d40      	ldrb	r0, [r0, r5]
10067318:	06c0      	lsls	r0, r0, #27
1006731a:	d401      	bmi.n	10067320 <smp_cmn_is_peer_rejectlisted+0x38>
1006731c:	2000      	movs	r0, #0
1006731e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10067320:	2001      	movs	r0, #1
10067322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10067324 <__arm_cp.4_0>:
10067324:	200024bc 	.word	0x200024bc

10067328 <smp_get_remote_device_list_index>:
10067328:	b5b0      	push	{r4, r5, r7, lr}
1006732a:	490d      	ldr	r1, [pc, #52]	@ (10067360 <__arm_cp.0_0>)
1006732c:	6809      	ldr	r1, [r1, #0]
1006732e:	2234      	movs	r2, #52	@ 0x34
10067330:	5c89      	ldrb	r1, [r1, r2]
10067332:	2800      	cmp	r0, #0
10067334:	d011      	beq.n	1006735a <smp_get_remote_device_list_index+0x32>
10067336:	4a0b      	ldr	r2, [pc, #44]	@ (10067364 <__arm_cp.0_1>)
10067338:	6812      	ldr	r2, [r2, #0]
1006733a:	32a4      	adds	r2, #164	@ 0xa4
1006733c:	2300      	movs	r3, #0
1006733e:	b2dc      	uxtb	r4, r3
10067340:	428c      	cmp	r4, r1
10067342:	d20a      	bcs.n	1006735a <smp_get_remote_device_list_index+0x32>
10067344:	2570      	movs	r5, #112	@ 0x70
10067346:	4365      	muls	r5, r4
10067348:	6814      	ldr	r4, [r2, #0]
1006734a:	1964      	adds	r4, r4, r5
1006734c:	8924      	ldrh	r4, [r4, #8]
1006734e:	4044      	eors	r4, r0
10067350:	0524      	lsls	r4, r4, #20
10067352:	d001      	beq.n	10067358 <smp_get_remote_device_list_index+0x30>
10067354:	1c5b      	adds	r3, r3, #1
10067356:	e7f2      	b.n	1006733e <smp_get_remote_device_list_index+0x16>
10067358:	4619      	mov	r1, r3
1006735a:	b2c8      	uxtb	r0, r1
1006735c:	bdb0      	pop	{r4, r5, r7, pc}
1006735e:	46c0      	nop			@ (mov r8, r8)

10067360 <__arm_cp.0_0>:
10067360:	2000241c 	.word	0x2000241c

10067364 <__arm_cp.0_1>:
10067364:	200024bc 	.word	0x200024bc

10067368 <smp_get_remote_device_list_item>:
10067368:	b5f0      	push	{r4, r5, r6, r7, lr}
1006736a:	4601      	mov	r1, r0
1006736c:	2000      	movs	r0, #0
1006736e:	2900      	cmp	r1, #0
10067370:	d017      	beq.n	100673a2 <smp_get_remote_device_list_item+0x3a>
10067372:	4a0c      	ldr	r2, [pc, #48]	@ (100673a4 <__arm_cp.1_0>)
10067374:	6812      	ldr	r2, [r2, #0]
10067376:	2334      	movs	r3, #52	@ 0x34
10067378:	5cd3      	ldrb	r3, [r2, r3]
1006737a:	2270      	movs	r2, #112	@ 0x70
1006737c:	435a      	muls	r2, r3
1006737e:	236f      	movs	r3, #111	@ 0x6f
10067380:	43dd      	mvns	r5, r3
10067382:	4b09      	ldr	r3, [pc, #36]	@ (100673a8 <__arm_cp.1_1>)
10067384:	681b      	ldr	r3, [r3, #0]
10067386:	33a4      	adds	r3, #164	@ 0xa4
10067388:	462c      	mov	r4, r5
1006738a:	3470      	adds	r4, #112	@ 0x70
1006738c:	42a2      	cmp	r2, r4
1006738e:	d008      	beq.n	100673a2 <smp_get_remote_device_list_item+0x3a>
10067390:	681e      	ldr	r6, [r3, #0]
10067392:	1975      	adds	r5, r6, r5
10067394:	2778      	movs	r7, #120	@ 0x78
10067396:	5bed      	ldrh	r5, [r5, r7]
10067398:	404d      	eors	r5, r1
1006739a:	052d      	lsls	r5, r5, #20
1006739c:	4625      	mov	r5, r4
1006739e:	d1f4      	bne.n	1006738a <smp_get_remote_device_list_item+0x22>
100673a0:	1930      	adds	r0, r6, r4
100673a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100673a4 <__arm_cp.1_0>:
100673a4:	2000241c 	.word	0x2000241c

100673a8 <__arm_cp.1_1>:
100673a8:	200024bc 	.word	0x200024bc

100673ac <smp_oob_check_is_remote_data_present>:
100673ac:	b5b0      	push	{r4, r5, r7, lr}
100673ae:	4604      	mov	r4, r0
100673b0:	480b      	ldr	r0, [pc, #44]	@ (100673e0 <__arm_cp.2_0>)
100673b2:	6800      	ldr	r0, [r0, #0]
100673b4:	21ac      	movs	r1, #172	@ 0xac
100673b6:	5840      	ldr	r0, [r0, r1]
100673b8:	7845      	ldrb	r5, [r0, #1]
100673ba:	1c80      	adds	r0, r0, #2
100673bc:	1ca1      	adds	r1, r4, #2
100673be:	2206      	movs	r2, #6
100673c0:	f7eb f968 	bl	10052694 <BLEPLAT_MemCmp>
100673c4:	4601      	mov	r1, r0
100673c6:	2000      	movs	r0, #0
100673c8:	2900      	cmp	r1, #0
100673ca:	d000      	beq.n	100673ce <smp_oob_check_is_remote_data_present+0x22>
100673cc:	bdb0      	pop	{r4, r5, r7, pc}
100673ce:	7861      	ldrb	r1, [r4, #1]
100673d0:	428d      	cmp	r5, r1
100673d2:	d1fb      	bne.n	100673cc <smp_oob_check_is_remote_data_present+0x20>
100673d4:	7b61      	ldrb	r1, [r4, #13]
100673d6:	2001      	movs	r0, #1
100673d8:	4301      	orrs	r1, r0
100673da:	7361      	strb	r1, [r4, #13]
100673dc:	bdb0      	pop	{r4, r5, r7, pc}
100673de:	46c0      	nop			@ (mov r8, r8)

100673e0 <__arm_cp.2_0>:
100673e0:	200024bc 	.word	0x200024bc

100673e4 <smp_oob_clear_remote_data_entry>:
100673e4:	b580      	push	{r7, lr}
100673e6:	2228      	movs	r2, #40	@ 0x28
100673e8:	4350      	muls	r0, r2
100673ea:	4904      	ldr	r1, [pc, #16]	@ (100673fc <__arm_cp.4_0>)
100673ec:	6809      	ldr	r1, [r1, #0]
100673ee:	23ac      	movs	r3, #172	@ 0xac
100673f0:	58c9      	ldr	r1, [r1, r3]
100673f2:	1808      	adds	r0, r1, r0
100673f4:	2100      	movs	r1, #0
100673f6:	f7eb f93d 	bl	10052674 <BLEPLAT_MemSet>
100673fa:	bd80      	pop	{r7, pc}

100673fc <__arm_cp.4_0>:
100673fc:	200024bc 	.word	0x200024bc

10067400 <smp_scp_is_another_sc_pairing_ongoing>:
10067400:	b570      	push	{r4, r5, r6, lr}
10067402:	490d      	ldr	r1, [pc, #52]	@ (10067438 <__arm_cp.1_0>)
10067404:	6809      	ldr	r1, [r1, #0]
10067406:	2234      	movs	r2, #52	@ 0x34
10067408:	5c89      	ldrb	r1, [r1, r2]
1006740a:	2270      	movs	r2, #112	@ 0x70
1006740c:	434a      	muls	r2, r1
1006740e:	490b      	ldr	r1, [pc, #44]	@ (1006743c <__arm_cp.1_1>)
10067410:	680b      	ldr	r3, [r1, #0]
10067412:	33a4      	adds	r3, #164	@ 0xa4
10067414:	2100      	movs	r1, #0
10067416:	460c      	mov	r4, r1
10067418:	42a2      	cmp	r2, r4
1006741a:	d00a      	beq.n	10067432 <smp_scp_is_another_sc_pairing_ongoing+0x32>
1006741c:	681d      	ldr	r5, [r3, #0]
1006741e:	192d      	adds	r5, r5, r4
10067420:	7dee      	ldrb	r6, [r5, #23]
10067422:	07f6      	lsls	r6, r6, #31
10067424:	d002      	beq.n	1006742c <smp_scp_is_another_sc_pairing_ongoing+0x2c>
10067426:	892d      	ldrh	r5, [r5, #8]
10067428:	4285      	cmp	r5, r0
1006742a:	d101      	bne.n	10067430 <smp_scp_is_another_sc_pairing_ongoing+0x30>
1006742c:	3470      	adds	r4, #112	@ 0x70
1006742e:	e7f3      	b.n	10067418 <smp_scp_is_another_sc_pairing_ongoing+0x18>
10067430:	2101      	movs	r1, #1
10067432:	4608      	mov	r0, r1
10067434:	bd70      	pop	{r4, r5, r6, pc}
10067436:	46c0      	nop			@ (mov r8, r8)

10067438 <__arm_cp.1_0>:
10067438:	2000241c 	.word	0x2000241c

1006743c <__arm_cp.1_1>:
1006743c:	200024bc 	.word	0x200024bc

10067440 <smp_scp_init_ucfg_weak>:
10067440:	4770      	bx	lr

10067442 <smp_scp_continue_on_exclusive_sc_pairing_ucfg_weak>:
10067442:	201f      	movs	r0, #31
10067444:	4770      	bx	lr

10067446 <smp_scp_public_key_prepare_and_exchange_ucfg_weak>:
10067446:	201f      	movs	r0, #31
10067448:	4770      	bx	lr

1006744a <smp_scp_stats_update_on_pairing_complete_ucfg_weak>:
1006744a:	4770      	bx	lr

1006744c <smp_pka_process_ecc_computation_tsk_ucfg_weak>:
1006744c:	4770      	bx	lr
	...

10067450 <malloc>:
10067450:	b510      	push	{r4, lr}
10067452:	4b03      	ldr	r3, [pc, #12]	@ (10067460 <malloc+0x10>)
10067454:	0001      	movs	r1, r0
10067456:	6818      	ldr	r0, [r3, #0]
10067458:	f000 f830 	bl	100674bc <_malloc_r>
1006745c:	bd10      	pop	{r4, pc}
1006745e:	46c0      	nop			@ (mov r8, r8)
10067460:	200028c0 	.word	0x200028c0

10067464 <free>:
10067464:	b510      	push	{r4, lr}
10067466:	4b03      	ldr	r3, [pc, #12]	@ (10067474 <free+0x10>)
10067468:	0001      	movs	r1, r0
1006746a:	6818      	ldr	r0, [r3, #0]
1006746c:	f000 fb74 	bl	10067b58 <_free_r>
10067470:	bd10      	pop	{r4, pc}
10067472:	46c0      	nop			@ (mov r8, r8)
10067474:	200028c0 	.word	0x200028c0

10067478 <sbrk_aligned>:
10067478:	b570      	push	{r4, r5, r6, lr}
1006747a:	4e0f      	ldr	r6, [pc, #60]	@ (100674b8 <sbrk_aligned+0x40>)
1006747c:	000d      	movs	r5, r1
1006747e:	6831      	ldr	r1, [r6, #0]
10067480:	0004      	movs	r4, r0
10067482:	2900      	cmp	r1, #0
10067484:	d102      	bne.n	1006748c <sbrk_aligned+0x14>
10067486:	f000 fb2b 	bl	10067ae0 <_sbrk_r>
1006748a:	6030      	str	r0, [r6, #0]
1006748c:	0029      	movs	r1, r5
1006748e:	0020      	movs	r0, r4
10067490:	f000 fb26 	bl	10067ae0 <_sbrk_r>
10067494:	1c43      	adds	r3, r0, #1
10067496:	d103      	bne.n	100674a0 <sbrk_aligned+0x28>
10067498:	2501      	movs	r5, #1
1006749a:	426d      	negs	r5, r5
1006749c:	0028      	movs	r0, r5
1006749e:	bd70      	pop	{r4, r5, r6, pc}
100674a0:	2303      	movs	r3, #3
100674a2:	1cc5      	adds	r5, r0, #3
100674a4:	439d      	bics	r5, r3
100674a6:	42a8      	cmp	r0, r5
100674a8:	d0f8      	beq.n	1006749c <sbrk_aligned+0x24>
100674aa:	1a29      	subs	r1, r5, r0
100674ac:	0020      	movs	r0, r4
100674ae:	f000 fb17 	bl	10067ae0 <_sbrk_r>
100674b2:	3001      	adds	r0, #1
100674b4:	d1f2      	bne.n	1006749c <sbrk_aligned+0x24>
100674b6:	e7ef      	b.n	10067498 <sbrk_aligned+0x20>
100674b8:	200024c8 	.word	0x200024c8

100674bc <_malloc_r>:
100674bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100674be:	2203      	movs	r2, #3
100674c0:	1ccb      	adds	r3, r1, #3
100674c2:	4393      	bics	r3, r2
100674c4:	3308      	adds	r3, #8
100674c6:	0005      	movs	r5, r0
100674c8:	001f      	movs	r7, r3
100674ca:	2b0c      	cmp	r3, #12
100674cc:	d234      	bcs.n	10067538 <_malloc_r+0x7c>
100674ce:	270c      	movs	r7, #12
100674d0:	42b9      	cmp	r1, r7
100674d2:	d833      	bhi.n	1006753c <_malloc_r+0x80>
100674d4:	0028      	movs	r0, r5
100674d6:	f000 f871 	bl	100675bc <__malloc_lock>
100674da:	4e37      	ldr	r6, [pc, #220]	@ (100675b8 <_malloc_r+0xfc>)
100674dc:	6833      	ldr	r3, [r6, #0]
100674de:	001c      	movs	r4, r3
100674e0:	2c00      	cmp	r4, #0
100674e2:	d12f      	bne.n	10067544 <_malloc_r+0x88>
100674e4:	0039      	movs	r1, r7
100674e6:	0028      	movs	r0, r5
100674e8:	f7ff ffc6 	bl	10067478 <sbrk_aligned>
100674ec:	0004      	movs	r4, r0
100674ee:	1c43      	adds	r3, r0, #1
100674f0:	d15f      	bne.n	100675b2 <_malloc_r+0xf6>
100674f2:	6834      	ldr	r4, [r6, #0]
100674f4:	9400      	str	r4, [sp, #0]
100674f6:	9b00      	ldr	r3, [sp, #0]
100674f8:	2b00      	cmp	r3, #0
100674fa:	d14a      	bne.n	10067592 <_malloc_r+0xd6>
100674fc:	2c00      	cmp	r4, #0
100674fe:	d052      	beq.n	100675a6 <_malloc_r+0xea>
10067500:	6823      	ldr	r3, [r4, #0]
10067502:	0028      	movs	r0, r5
10067504:	18e3      	adds	r3, r4, r3
10067506:	9900      	ldr	r1, [sp, #0]
10067508:	9301      	str	r3, [sp, #4]
1006750a:	f000 fae9 	bl	10067ae0 <_sbrk_r>
1006750e:	9b01      	ldr	r3, [sp, #4]
10067510:	4283      	cmp	r3, r0
10067512:	d148      	bne.n	100675a6 <_malloc_r+0xea>
10067514:	6823      	ldr	r3, [r4, #0]
10067516:	0028      	movs	r0, r5
10067518:	1aff      	subs	r7, r7, r3
1006751a:	0039      	movs	r1, r7
1006751c:	f7ff ffac 	bl	10067478 <sbrk_aligned>
10067520:	3001      	adds	r0, #1
10067522:	d040      	beq.n	100675a6 <_malloc_r+0xea>
10067524:	6823      	ldr	r3, [r4, #0]
10067526:	19db      	adds	r3, r3, r7
10067528:	6023      	str	r3, [r4, #0]
1006752a:	6833      	ldr	r3, [r6, #0]
1006752c:	685a      	ldr	r2, [r3, #4]
1006752e:	2a00      	cmp	r2, #0
10067530:	d133      	bne.n	1006759a <_malloc_r+0xde>
10067532:	9b00      	ldr	r3, [sp, #0]
10067534:	6033      	str	r3, [r6, #0]
10067536:	e019      	b.n	1006756c <_malloc_r+0xb0>
10067538:	2b00      	cmp	r3, #0
1006753a:	dac9      	bge.n	100674d0 <_malloc_r+0x14>
1006753c:	230c      	movs	r3, #12
1006753e:	602b      	str	r3, [r5, #0]
10067540:	2000      	movs	r0, #0
10067542:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10067544:	6821      	ldr	r1, [r4, #0]
10067546:	1bc9      	subs	r1, r1, r7
10067548:	d420      	bmi.n	1006758c <_malloc_r+0xd0>
1006754a:	290b      	cmp	r1, #11
1006754c:	d90a      	bls.n	10067564 <_malloc_r+0xa8>
1006754e:	19e2      	adds	r2, r4, r7
10067550:	6027      	str	r7, [r4, #0]
10067552:	42a3      	cmp	r3, r4
10067554:	d104      	bne.n	10067560 <_malloc_r+0xa4>
10067556:	6032      	str	r2, [r6, #0]
10067558:	6863      	ldr	r3, [r4, #4]
1006755a:	6011      	str	r1, [r2, #0]
1006755c:	6053      	str	r3, [r2, #4]
1006755e:	e005      	b.n	1006756c <_malloc_r+0xb0>
10067560:	605a      	str	r2, [r3, #4]
10067562:	e7f9      	b.n	10067558 <_malloc_r+0x9c>
10067564:	6862      	ldr	r2, [r4, #4]
10067566:	42a3      	cmp	r3, r4
10067568:	d10e      	bne.n	10067588 <_malloc_r+0xcc>
1006756a:	6032      	str	r2, [r6, #0]
1006756c:	0028      	movs	r0, r5
1006756e:	f000 f82d 	bl	100675cc <__malloc_unlock>
10067572:	0020      	movs	r0, r4
10067574:	2207      	movs	r2, #7
10067576:	300b      	adds	r0, #11
10067578:	1d23      	adds	r3, r4, #4
1006757a:	4390      	bics	r0, r2
1006757c:	1ac2      	subs	r2, r0, r3
1006757e:	4298      	cmp	r0, r3
10067580:	d0df      	beq.n	10067542 <_malloc_r+0x86>
10067582:	1a1b      	subs	r3, r3, r0
10067584:	50a3      	str	r3, [r4, r2]
10067586:	e7dc      	b.n	10067542 <_malloc_r+0x86>
10067588:	605a      	str	r2, [r3, #4]
1006758a:	e7ef      	b.n	1006756c <_malloc_r+0xb0>
1006758c:	0023      	movs	r3, r4
1006758e:	6864      	ldr	r4, [r4, #4]
10067590:	e7a6      	b.n	100674e0 <_malloc_r+0x24>
10067592:	9c00      	ldr	r4, [sp, #0]
10067594:	6863      	ldr	r3, [r4, #4]
10067596:	9300      	str	r3, [sp, #0]
10067598:	e7ad      	b.n	100674f6 <_malloc_r+0x3a>
1006759a:	001a      	movs	r2, r3
1006759c:	685b      	ldr	r3, [r3, #4]
1006759e:	42a3      	cmp	r3, r4
100675a0:	d1fb      	bne.n	1006759a <_malloc_r+0xde>
100675a2:	2300      	movs	r3, #0
100675a4:	e7da      	b.n	1006755c <_malloc_r+0xa0>
100675a6:	230c      	movs	r3, #12
100675a8:	0028      	movs	r0, r5
100675aa:	602b      	str	r3, [r5, #0]
100675ac:	f000 f80e 	bl	100675cc <__malloc_unlock>
100675b0:	e7c6      	b.n	10067540 <_malloc_r+0x84>
100675b2:	6007      	str	r7, [r0, #0]
100675b4:	e7da      	b.n	1006756c <_malloc_r+0xb0>
100675b6:	46c0      	nop			@ (mov r8, r8)
100675b8:	200024cc 	.word	0x200024cc

100675bc <__malloc_lock>:
100675bc:	b510      	push	{r4, lr}
100675be:	4802      	ldr	r0, [pc, #8]	@ (100675c8 <__malloc_lock+0xc>)
100675c0:	f000 fabb 	bl	10067b3a <__retarget_lock_acquire_recursive>
100675c4:	bd10      	pop	{r4, pc}
100675c6:	46c0      	nop			@ (mov r8, r8)
100675c8:	20002610 	.word	0x20002610

100675cc <__malloc_unlock>:
100675cc:	b510      	push	{r4, lr}
100675ce:	4802      	ldr	r0, [pc, #8]	@ (100675d8 <__malloc_unlock+0xc>)
100675d0:	f000 fab4 	bl	10067b3c <__retarget_lock_release_recursive>
100675d4:	bd10      	pop	{r4, pc}
100675d6:	46c0      	nop			@ (mov r8, r8)
100675d8:	20002610 	.word	0x20002610

100675dc <std>:
100675dc:	2300      	movs	r3, #0
100675de:	b510      	push	{r4, lr}
100675e0:	0004      	movs	r4, r0
100675e2:	6003      	str	r3, [r0, #0]
100675e4:	6043      	str	r3, [r0, #4]
100675e6:	6083      	str	r3, [r0, #8]
100675e8:	8181      	strh	r1, [r0, #12]
100675ea:	6643      	str	r3, [r0, #100]	@ 0x64
100675ec:	81c2      	strh	r2, [r0, #14]
100675ee:	6103      	str	r3, [r0, #16]
100675f0:	6143      	str	r3, [r0, #20]
100675f2:	6183      	str	r3, [r0, #24]
100675f4:	0019      	movs	r1, r3
100675f6:	2208      	movs	r2, #8
100675f8:	305c      	adds	r0, #92	@ 0x5c
100675fa:	f000 fa2f 	bl	10067a5c <memset>
100675fe:	4b0b      	ldr	r3, [pc, #44]	@ (1006762c <std+0x50>)
10067600:	6224      	str	r4, [r4, #32]
10067602:	6263      	str	r3, [r4, #36]	@ 0x24
10067604:	4b0a      	ldr	r3, [pc, #40]	@ (10067630 <std+0x54>)
10067606:	62a3      	str	r3, [r4, #40]	@ 0x28
10067608:	4b0a      	ldr	r3, [pc, #40]	@ (10067634 <std+0x58>)
1006760a:	62e3      	str	r3, [r4, #44]	@ 0x2c
1006760c:	4b0a      	ldr	r3, [pc, #40]	@ (10067638 <std+0x5c>)
1006760e:	6323      	str	r3, [r4, #48]	@ 0x30
10067610:	4b0a      	ldr	r3, [pc, #40]	@ (1006763c <std+0x60>)
10067612:	429c      	cmp	r4, r3
10067614:	d005      	beq.n	10067622 <std+0x46>
10067616:	4b0a      	ldr	r3, [pc, #40]	@ (10067640 <std+0x64>)
10067618:	429c      	cmp	r4, r3
1006761a:	d002      	beq.n	10067622 <std+0x46>
1006761c:	4b09      	ldr	r3, [pc, #36]	@ (10067644 <std+0x68>)
1006761e:	429c      	cmp	r4, r3
10067620:	d103      	bne.n	1006762a <std+0x4e>
10067622:	0020      	movs	r0, r4
10067624:	3058      	adds	r0, #88	@ 0x58
10067626:	f000 fa87 	bl	10067b38 <__retarget_lock_init_recursive>
1006762a:	bd10      	pop	{r4, pc}
1006762c:	10067869 	.word	0x10067869
10067630:	10067891 	.word	0x10067891
10067634:	100678c9 	.word	0x100678c9
10067638:	100678f5 	.word	0x100678f5
1006763c:	200024d0 	.word	0x200024d0
10067640:	20002538 	.word	0x20002538
10067644:	200025a0 	.word	0x200025a0

10067648 <stdio_exit_handler>:
10067648:	b510      	push	{r4, lr}
1006764a:	4a03      	ldr	r2, [pc, #12]	@ (10067658 <stdio_exit_handler+0x10>)
1006764c:	4903      	ldr	r1, [pc, #12]	@ (1006765c <stdio_exit_handler+0x14>)
1006764e:	4804      	ldr	r0, [pc, #16]	@ (10067660 <stdio_exit_handler+0x18>)
10067650:	f000 f86c 	bl	1006772c <_fwalk_sglue>
10067654:	bd10      	pop	{r4, pc}
10067656:	46c0      	nop			@ (mov r8, r8)
10067658:	200028b4 	.word	0x200028b4
1006765c:	100682ad 	.word	0x100682ad
10067660:	200028c4 	.word	0x200028c4

10067664 <cleanup_stdio>:
10067664:	6841      	ldr	r1, [r0, #4]
10067666:	4b0b      	ldr	r3, [pc, #44]	@ (10067694 <cleanup_stdio+0x30>)
10067668:	b510      	push	{r4, lr}
1006766a:	0004      	movs	r4, r0
1006766c:	4299      	cmp	r1, r3
1006766e:	d001      	beq.n	10067674 <cleanup_stdio+0x10>
10067670:	f000 fe1c 	bl	100682ac <_fflush_r>
10067674:	68a1      	ldr	r1, [r4, #8]
10067676:	4b08      	ldr	r3, [pc, #32]	@ (10067698 <cleanup_stdio+0x34>)
10067678:	4299      	cmp	r1, r3
1006767a:	d002      	beq.n	10067682 <cleanup_stdio+0x1e>
1006767c:	0020      	movs	r0, r4
1006767e:	f000 fe15 	bl	100682ac <_fflush_r>
10067682:	68e1      	ldr	r1, [r4, #12]
10067684:	4b05      	ldr	r3, [pc, #20]	@ (1006769c <cleanup_stdio+0x38>)
10067686:	4299      	cmp	r1, r3
10067688:	d002      	beq.n	10067690 <cleanup_stdio+0x2c>
1006768a:	0020      	movs	r0, r4
1006768c:	f000 fe0e 	bl	100682ac <_fflush_r>
10067690:	bd10      	pop	{r4, pc}
10067692:	46c0      	nop			@ (mov r8, r8)
10067694:	200024d0 	.word	0x200024d0
10067698:	20002538 	.word	0x20002538
1006769c:	200025a0 	.word	0x200025a0

100676a0 <global_stdio_init.part.0>:
100676a0:	b510      	push	{r4, lr}
100676a2:	4b09      	ldr	r3, [pc, #36]	@ (100676c8 <global_stdio_init.part.0+0x28>)
100676a4:	4a09      	ldr	r2, [pc, #36]	@ (100676cc <global_stdio_init.part.0+0x2c>)
100676a6:	2104      	movs	r1, #4
100676a8:	601a      	str	r2, [r3, #0]
100676aa:	4809      	ldr	r0, [pc, #36]	@ (100676d0 <global_stdio_init.part.0+0x30>)
100676ac:	2200      	movs	r2, #0
100676ae:	f7ff ff95 	bl	100675dc <std>
100676b2:	2201      	movs	r2, #1
100676b4:	2109      	movs	r1, #9
100676b6:	4807      	ldr	r0, [pc, #28]	@ (100676d4 <global_stdio_init.part.0+0x34>)
100676b8:	f7ff ff90 	bl	100675dc <std>
100676bc:	2202      	movs	r2, #2
100676be:	2112      	movs	r1, #18
100676c0:	4805      	ldr	r0, [pc, #20]	@ (100676d8 <global_stdio_init.part.0+0x38>)
100676c2:	f7ff ff8b 	bl	100675dc <std>
100676c6:	bd10      	pop	{r4, pc}
100676c8:	20002608 	.word	0x20002608
100676cc:	10067649 	.word	0x10067649
100676d0:	200024d0 	.word	0x200024d0
100676d4:	20002538 	.word	0x20002538
100676d8:	200025a0 	.word	0x200025a0

100676dc <__sfp_lock_acquire>:
100676dc:	b510      	push	{r4, lr}
100676de:	4802      	ldr	r0, [pc, #8]	@ (100676e8 <__sfp_lock_acquire+0xc>)
100676e0:	f000 fa2b 	bl	10067b3a <__retarget_lock_acquire_recursive>
100676e4:	bd10      	pop	{r4, pc}
100676e6:	46c0      	nop			@ (mov r8, r8)
100676e8:	20002611 	.word	0x20002611

100676ec <__sfp_lock_release>:
100676ec:	b510      	push	{r4, lr}
100676ee:	4802      	ldr	r0, [pc, #8]	@ (100676f8 <__sfp_lock_release+0xc>)
100676f0:	f000 fa24 	bl	10067b3c <__retarget_lock_release_recursive>
100676f4:	bd10      	pop	{r4, pc}
100676f6:	46c0      	nop			@ (mov r8, r8)
100676f8:	20002611 	.word	0x20002611

100676fc <__sinit>:
100676fc:	b510      	push	{r4, lr}
100676fe:	0004      	movs	r4, r0
10067700:	f7ff ffec 	bl	100676dc <__sfp_lock_acquire>
10067704:	6a23      	ldr	r3, [r4, #32]
10067706:	2b00      	cmp	r3, #0
10067708:	d002      	beq.n	10067710 <__sinit+0x14>
1006770a:	f7ff ffef 	bl	100676ec <__sfp_lock_release>
1006770e:	bd10      	pop	{r4, pc}
10067710:	4b04      	ldr	r3, [pc, #16]	@ (10067724 <__sinit+0x28>)
10067712:	6223      	str	r3, [r4, #32]
10067714:	4b04      	ldr	r3, [pc, #16]	@ (10067728 <__sinit+0x2c>)
10067716:	681b      	ldr	r3, [r3, #0]
10067718:	2b00      	cmp	r3, #0
1006771a:	d1f6      	bne.n	1006770a <__sinit+0xe>
1006771c:	f7ff ffc0 	bl	100676a0 <global_stdio_init.part.0>
10067720:	e7f3      	b.n	1006770a <__sinit+0xe>
10067722:	46c0      	nop			@ (mov r8, r8)
10067724:	10067665 	.word	0x10067665
10067728:	20002608 	.word	0x20002608

1006772c <_fwalk_sglue>:
1006772c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1006772e:	0014      	movs	r4, r2
10067730:	2600      	movs	r6, #0
10067732:	9000      	str	r0, [sp, #0]
10067734:	9101      	str	r1, [sp, #4]
10067736:	68a5      	ldr	r5, [r4, #8]
10067738:	6867      	ldr	r7, [r4, #4]
1006773a:	3f01      	subs	r7, #1
1006773c:	d504      	bpl.n	10067748 <_fwalk_sglue+0x1c>
1006773e:	6824      	ldr	r4, [r4, #0]
10067740:	2c00      	cmp	r4, #0
10067742:	d1f8      	bne.n	10067736 <_fwalk_sglue+0xa>
10067744:	0030      	movs	r0, r6
10067746:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10067748:	89ab      	ldrh	r3, [r5, #12]
1006774a:	2b01      	cmp	r3, #1
1006774c:	d908      	bls.n	10067760 <_fwalk_sglue+0x34>
1006774e:	220e      	movs	r2, #14
10067750:	5eab      	ldrsh	r3, [r5, r2]
10067752:	3301      	adds	r3, #1
10067754:	d004      	beq.n	10067760 <_fwalk_sglue+0x34>
10067756:	0029      	movs	r1, r5
10067758:	9800      	ldr	r0, [sp, #0]
1006775a:	9b01      	ldr	r3, [sp, #4]
1006775c:	4798      	blx	r3
1006775e:	4306      	orrs	r6, r0
10067760:	3568      	adds	r5, #104	@ 0x68
10067762:	e7ea      	b.n	1006773a <_fwalk_sglue+0xe>

10067764 <_puts_r>:
10067764:	6a03      	ldr	r3, [r0, #32]
10067766:	b570      	push	{r4, r5, r6, lr}
10067768:	0005      	movs	r5, r0
1006776a:	000e      	movs	r6, r1
1006776c:	6884      	ldr	r4, [r0, #8]
1006776e:	2b00      	cmp	r3, #0
10067770:	d101      	bne.n	10067776 <_puts_r+0x12>
10067772:	f7ff ffc3 	bl	100676fc <__sinit>
10067776:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10067778:	07db      	lsls	r3, r3, #31
1006777a:	d405      	bmi.n	10067788 <_puts_r+0x24>
1006777c:	89a3      	ldrh	r3, [r4, #12]
1006777e:	059b      	lsls	r3, r3, #22
10067780:	d402      	bmi.n	10067788 <_puts_r+0x24>
10067782:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10067784:	f000 f9d9 	bl	10067b3a <__retarget_lock_acquire_recursive>
10067788:	89a3      	ldrh	r3, [r4, #12]
1006778a:	071b      	lsls	r3, r3, #28
1006778c:	d502      	bpl.n	10067794 <_puts_r+0x30>
1006778e:	6923      	ldr	r3, [r4, #16]
10067790:	2b00      	cmp	r3, #0
10067792:	d11f      	bne.n	100677d4 <_puts_r+0x70>
10067794:	0021      	movs	r1, r4
10067796:	0028      	movs	r0, r5
10067798:	f000 f8f4 	bl	10067984 <__swsetup_r>
1006779c:	2800      	cmp	r0, #0
1006779e:	d019      	beq.n	100677d4 <_puts_r+0x70>
100677a0:	2501      	movs	r5, #1
100677a2:	426d      	negs	r5, r5
100677a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100677a6:	07db      	lsls	r3, r3, #31
100677a8:	d405      	bmi.n	100677b6 <_puts_r+0x52>
100677aa:	89a3      	ldrh	r3, [r4, #12]
100677ac:	059b      	lsls	r3, r3, #22
100677ae:	d402      	bmi.n	100677b6 <_puts_r+0x52>
100677b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100677b2:	f000 f9c3 	bl	10067b3c <__retarget_lock_release_recursive>
100677b6:	0028      	movs	r0, r5
100677b8:	bd70      	pop	{r4, r5, r6, pc}
100677ba:	3601      	adds	r6, #1
100677bc:	60a3      	str	r3, [r4, #8]
100677be:	2b00      	cmp	r3, #0
100677c0:	da04      	bge.n	100677cc <_puts_r+0x68>
100677c2:	69a2      	ldr	r2, [r4, #24]
100677c4:	429a      	cmp	r2, r3
100677c6:	dc16      	bgt.n	100677f6 <_puts_r+0x92>
100677c8:	290a      	cmp	r1, #10
100677ca:	d014      	beq.n	100677f6 <_puts_r+0x92>
100677cc:	6823      	ldr	r3, [r4, #0]
100677ce:	1c5a      	adds	r2, r3, #1
100677d0:	6022      	str	r2, [r4, #0]
100677d2:	7019      	strb	r1, [r3, #0]
100677d4:	68a3      	ldr	r3, [r4, #8]
100677d6:	7831      	ldrb	r1, [r6, #0]
100677d8:	3b01      	subs	r3, #1
100677da:	2900      	cmp	r1, #0
100677dc:	d1ed      	bne.n	100677ba <_puts_r+0x56>
100677de:	60a3      	str	r3, [r4, #8]
100677e0:	2b00      	cmp	r3, #0
100677e2:	da0f      	bge.n	10067804 <_puts_r+0xa0>
100677e4:	0022      	movs	r2, r4
100677e6:	0028      	movs	r0, r5
100677e8:	310a      	adds	r1, #10
100677ea:	f000 f889 	bl	10067900 <__swbuf_r>
100677ee:	3001      	adds	r0, #1
100677f0:	d0d6      	beq.n	100677a0 <_puts_r+0x3c>
100677f2:	250a      	movs	r5, #10
100677f4:	e7d6      	b.n	100677a4 <_puts_r+0x40>
100677f6:	0022      	movs	r2, r4
100677f8:	0028      	movs	r0, r5
100677fa:	f000 f881 	bl	10067900 <__swbuf_r>
100677fe:	3001      	adds	r0, #1
10067800:	d1e8      	bne.n	100677d4 <_puts_r+0x70>
10067802:	e7cd      	b.n	100677a0 <_puts_r+0x3c>
10067804:	6823      	ldr	r3, [r4, #0]
10067806:	1c5a      	adds	r2, r3, #1
10067808:	6022      	str	r2, [r4, #0]
1006780a:	220a      	movs	r2, #10
1006780c:	701a      	strb	r2, [r3, #0]
1006780e:	e7f0      	b.n	100677f2 <_puts_r+0x8e>

10067810 <puts>:
10067810:	b510      	push	{r4, lr}
10067812:	4b03      	ldr	r3, [pc, #12]	@ (10067820 <puts+0x10>)
10067814:	0001      	movs	r1, r0
10067816:	6818      	ldr	r0, [r3, #0]
10067818:	f7ff ffa4 	bl	10067764 <_puts_r>
1006781c:	bd10      	pop	{r4, pc}
1006781e:	46c0      	nop			@ (mov r8, r8)
10067820:	200028c0 	.word	0x200028c0

10067824 <siprintf>:
10067824:	b40e      	push	{r1, r2, r3}
10067826:	b510      	push	{r4, lr}
10067828:	2400      	movs	r4, #0
1006782a:	490c      	ldr	r1, [pc, #48]	@ (1006785c <siprintf+0x38>)
1006782c:	b09d      	sub	sp, #116	@ 0x74
1006782e:	ab1f      	add	r3, sp, #124	@ 0x7c
10067830:	9002      	str	r0, [sp, #8]
10067832:	9006      	str	r0, [sp, #24]
10067834:	9107      	str	r1, [sp, #28]
10067836:	9104      	str	r1, [sp, #16]
10067838:	4809      	ldr	r0, [pc, #36]	@ (10067860 <siprintf+0x3c>)
1006783a:	490a      	ldr	r1, [pc, #40]	@ (10067864 <siprintf+0x40>)
1006783c:	cb04      	ldmia	r3!, {r2}
1006783e:	9105      	str	r1, [sp, #20]
10067840:	6800      	ldr	r0, [r0, #0]
10067842:	a902      	add	r1, sp, #8
10067844:	9301      	str	r3, [sp, #4]
10067846:	941b      	str	r4, [sp, #108]	@ 0x6c
10067848:	f000 fa30 	bl	10067cac <_svfiprintf_r>
1006784c:	9b02      	ldr	r3, [sp, #8]
1006784e:	701c      	strb	r4, [r3, #0]
10067850:	b01d      	add	sp, #116	@ 0x74
10067852:	bc10      	pop	{r4}
10067854:	bc08      	pop	{r3}
10067856:	b003      	add	sp, #12
10067858:	4718      	bx	r3
1006785a:	46c0      	nop			@ (mov r8, r8)
1006785c:	7fffffff 	.word	0x7fffffff
10067860:	200028c0 	.word	0x200028c0
10067864:	ffff0208 	.word	0xffff0208

10067868 <__sread>:
10067868:	b570      	push	{r4, r5, r6, lr}
1006786a:	000c      	movs	r4, r1
1006786c:	250e      	movs	r5, #14
1006786e:	5f49      	ldrsh	r1, [r1, r5]
10067870:	f000 f922 	bl	10067ab8 <_read_r>
10067874:	2800      	cmp	r0, #0
10067876:	db03      	blt.n	10067880 <__sread+0x18>
10067878:	6d63      	ldr	r3, [r4, #84]	@ 0x54
1006787a:	181b      	adds	r3, r3, r0
1006787c:	6563      	str	r3, [r4, #84]	@ 0x54
1006787e:	bd70      	pop	{r4, r5, r6, pc}
10067880:	89a3      	ldrh	r3, [r4, #12]
10067882:	4a02      	ldr	r2, [pc, #8]	@ (1006788c <__sread+0x24>)
10067884:	4013      	ands	r3, r2
10067886:	81a3      	strh	r3, [r4, #12]
10067888:	e7f9      	b.n	1006787e <__sread+0x16>
1006788a:	46c0      	nop			@ (mov r8, r8)
1006788c:	ffffefff 	.word	0xffffefff

10067890 <__swrite>:
10067890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10067892:	001f      	movs	r7, r3
10067894:	898b      	ldrh	r3, [r1, #12]
10067896:	0005      	movs	r5, r0
10067898:	000c      	movs	r4, r1
1006789a:	0016      	movs	r6, r2
1006789c:	05db      	lsls	r3, r3, #23
1006789e:	d505      	bpl.n	100678ac <__swrite+0x1c>
100678a0:	230e      	movs	r3, #14
100678a2:	5ec9      	ldrsh	r1, [r1, r3]
100678a4:	2200      	movs	r2, #0
100678a6:	2302      	movs	r3, #2
100678a8:	f000 f8f2 	bl	10067a90 <_lseek_r>
100678ac:	89a3      	ldrh	r3, [r4, #12]
100678ae:	4a05      	ldr	r2, [pc, #20]	@ (100678c4 <__swrite+0x34>)
100678b0:	0028      	movs	r0, r5
100678b2:	4013      	ands	r3, r2
100678b4:	81a3      	strh	r3, [r4, #12]
100678b6:	0032      	movs	r2, r6
100678b8:	230e      	movs	r3, #14
100678ba:	5ee1      	ldrsh	r1, [r4, r3]
100678bc:	003b      	movs	r3, r7
100678be:	f000 f921 	bl	10067b04 <_write_r>
100678c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100678c4:	ffffefff 	.word	0xffffefff

100678c8 <__sseek>:
100678c8:	b570      	push	{r4, r5, r6, lr}
100678ca:	000c      	movs	r4, r1
100678cc:	250e      	movs	r5, #14
100678ce:	5f49      	ldrsh	r1, [r1, r5]
100678d0:	f000 f8de 	bl	10067a90 <_lseek_r>
100678d4:	89a3      	ldrh	r3, [r4, #12]
100678d6:	1c42      	adds	r2, r0, #1
100678d8:	d103      	bne.n	100678e2 <__sseek+0x1a>
100678da:	4a05      	ldr	r2, [pc, #20]	@ (100678f0 <__sseek+0x28>)
100678dc:	4013      	ands	r3, r2
100678de:	81a3      	strh	r3, [r4, #12]
100678e0:	bd70      	pop	{r4, r5, r6, pc}
100678e2:	2280      	movs	r2, #128	@ 0x80
100678e4:	0152      	lsls	r2, r2, #5
100678e6:	4313      	orrs	r3, r2
100678e8:	81a3      	strh	r3, [r4, #12]
100678ea:	6560      	str	r0, [r4, #84]	@ 0x54
100678ec:	e7f8      	b.n	100678e0 <__sseek+0x18>
100678ee:	46c0      	nop			@ (mov r8, r8)
100678f0:	ffffefff 	.word	0xffffefff

100678f4 <__sclose>:
100678f4:	b510      	push	{r4, lr}
100678f6:	230e      	movs	r3, #14
100678f8:	5ec9      	ldrsh	r1, [r1, r3]
100678fa:	f000 f8b7 	bl	10067a6c <_close_r>
100678fe:	bd10      	pop	{r4, pc}

10067900 <__swbuf_r>:
10067900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10067902:	0006      	movs	r6, r0
10067904:	000d      	movs	r5, r1
10067906:	0014      	movs	r4, r2
10067908:	2800      	cmp	r0, #0
1006790a:	d004      	beq.n	10067916 <__swbuf_r+0x16>
1006790c:	6a03      	ldr	r3, [r0, #32]
1006790e:	2b00      	cmp	r3, #0
10067910:	d101      	bne.n	10067916 <__swbuf_r+0x16>
10067912:	f7ff fef3 	bl	100676fc <__sinit>
10067916:	69a3      	ldr	r3, [r4, #24]
10067918:	60a3      	str	r3, [r4, #8]
1006791a:	89a3      	ldrh	r3, [r4, #12]
1006791c:	071b      	lsls	r3, r3, #28
1006791e:	d502      	bpl.n	10067926 <__swbuf_r+0x26>
10067920:	6923      	ldr	r3, [r4, #16]
10067922:	2b00      	cmp	r3, #0
10067924:	d109      	bne.n	1006793a <__swbuf_r+0x3a>
10067926:	0021      	movs	r1, r4
10067928:	0030      	movs	r0, r6
1006792a:	f000 f82b 	bl	10067984 <__swsetup_r>
1006792e:	2800      	cmp	r0, #0
10067930:	d003      	beq.n	1006793a <__swbuf_r+0x3a>
10067932:	2501      	movs	r5, #1
10067934:	426d      	negs	r5, r5
10067936:	0028      	movs	r0, r5
10067938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006793a:	6923      	ldr	r3, [r4, #16]
1006793c:	6820      	ldr	r0, [r4, #0]
1006793e:	b2ef      	uxtb	r7, r5
10067940:	1ac0      	subs	r0, r0, r3
10067942:	6963      	ldr	r3, [r4, #20]
10067944:	b2ed      	uxtb	r5, r5
10067946:	4283      	cmp	r3, r0
10067948:	dc05      	bgt.n	10067956 <__swbuf_r+0x56>
1006794a:	0021      	movs	r1, r4
1006794c:	0030      	movs	r0, r6
1006794e:	f000 fcad 	bl	100682ac <_fflush_r>
10067952:	2800      	cmp	r0, #0
10067954:	d1ed      	bne.n	10067932 <__swbuf_r+0x32>
10067956:	68a3      	ldr	r3, [r4, #8]
10067958:	3001      	adds	r0, #1
1006795a:	3b01      	subs	r3, #1
1006795c:	60a3      	str	r3, [r4, #8]
1006795e:	6823      	ldr	r3, [r4, #0]
10067960:	1c5a      	adds	r2, r3, #1
10067962:	6022      	str	r2, [r4, #0]
10067964:	701f      	strb	r7, [r3, #0]
10067966:	6963      	ldr	r3, [r4, #20]
10067968:	4283      	cmp	r3, r0
1006796a:	d004      	beq.n	10067976 <__swbuf_r+0x76>
1006796c:	89a3      	ldrh	r3, [r4, #12]
1006796e:	07db      	lsls	r3, r3, #31
10067970:	d5e1      	bpl.n	10067936 <__swbuf_r+0x36>
10067972:	2d0a      	cmp	r5, #10
10067974:	d1df      	bne.n	10067936 <__swbuf_r+0x36>
10067976:	0021      	movs	r1, r4
10067978:	0030      	movs	r0, r6
1006797a:	f000 fc97 	bl	100682ac <_fflush_r>
1006797e:	2800      	cmp	r0, #0
10067980:	d0d9      	beq.n	10067936 <__swbuf_r+0x36>
10067982:	e7d6      	b.n	10067932 <__swbuf_r+0x32>

10067984 <__swsetup_r>:
10067984:	4b2d      	ldr	r3, [pc, #180]	@ (10067a3c <__swsetup_r+0xb8>)
10067986:	b570      	push	{r4, r5, r6, lr}
10067988:	0005      	movs	r5, r0
1006798a:	6818      	ldr	r0, [r3, #0]
1006798c:	000c      	movs	r4, r1
1006798e:	2800      	cmp	r0, #0
10067990:	d004      	beq.n	1006799c <__swsetup_r+0x18>
10067992:	6a03      	ldr	r3, [r0, #32]
10067994:	2b00      	cmp	r3, #0
10067996:	d101      	bne.n	1006799c <__swsetup_r+0x18>
10067998:	f7ff feb0 	bl	100676fc <__sinit>
1006799c:	220c      	movs	r2, #12
1006799e:	5ea3      	ldrsh	r3, [r4, r2]
100679a0:	071a      	lsls	r2, r3, #28
100679a2:	d423      	bmi.n	100679ec <__swsetup_r+0x68>
100679a4:	06da      	lsls	r2, r3, #27
100679a6:	d407      	bmi.n	100679b8 <__swsetup_r+0x34>
100679a8:	2209      	movs	r2, #9
100679aa:	602a      	str	r2, [r5, #0]
100679ac:	2240      	movs	r2, #64	@ 0x40
100679ae:	2001      	movs	r0, #1
100679b0:	4313      	orrs	r3, r2
100679b2:	81a3      	strh	r3, [r4, #12]
100679b4:	4240      	negs	r0, r0
100679b6:	e03a      	b.n	10067a2e <__swsetup_r+0xaa>
100679b8:	075b      	lsls	r3, r3, #29
100679ba:	d513      	bpl.n	100679e4 <__swsetup_r+0x60>
100679bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
100679be:	2900      	cmp	r1, #0
100679c0:	d008      	beq.n	100679d4 <__swsetup_r+0x50>
100679c2:	0023      	movs	r3, r4
100679c4:	3344      	adds	r3, #68	@ 0x44
100679c6:	4299      	cmp	r1, r3
100679c8:	d002      	beq.n	100679d0 <__swsetup_r+0x4c>
100679ca:	0028      	movs	r0, r5
100679cc:	f000 f8c4 	bl	10067b58 <_free_r>
100679d0:	2300      	movs	r3, #0
100679d2:	6363      	str	r3, [r4, #52]	@ 0x34
100679d4:	2224      	movs	r2, #36	@ 0x24
100679d6:	89a3      	ldrh	r3, [r4, #12]
100679d8:	4393      	bics	r3, r2
100679da:	81a3      	strh	r3, [r4, #12]
100679dc:	2300      	movs	r3, #0
100679de:	6063      	str	r3, [r4, #4]
100679e0:	6923      	ldr	r3, [r4, #16]
100679e2:	6023      	str	r3, [r4, #0]
100679e4:	2308      	movs	r3, #8
100679e6:	89a2      	ldrh	r2, [r4, #12]
100679e8:	4313      	orrs	r3, r2
100679ea:	81a3      	strh	r3, [r4, #12]
100679ec:	6923      	ldr	r3, [r4, #16]
100679ee:	2b00      	cmp	r3, #0
100679f0:	d10b      	bne.n	10067a0a <__swsetup_r+0x86>
100679f2:	21a0      	movs	r1, #160	@ 0xa0
100679f4:	2280      	movs	r2, #128	@ 0x80
100679f6:	89a3      	ldrh	r3, [r4, #12]
100679f8:	0089      	lsls	r1, r1, #2
100679fa:	0092      	lsls	r2, r2, #2
100679fc:	400b      	ands	r3, r1
100679fe:	4293      	cmp	r3, r2
10067a00:	d003      	beq.n	10067a0a <__swsetup_r+0x86>
10067a02:	0021      	movs	r1, r4
10067a04:	0028      	movs	r0, r5
10067a06:	f000 fca7 	bl	10068358 <__smakebuf_r>
10067a0a:	220c      	movs	r2, #12
10067a0c:	5ea3      	ldrsh	r3, [r4, r2]
10067a0e:	2101      	movs	r1, #1
10067a10:	001a      	movs	r2, r3
10067a12:	400a      	ands	r2, r1
10067a14:	420b      	tst	r3, r1
10067a16:	d00b      	beq.n	10067a30 <__swsetup_r+0xac>
10067a18:	2200      	movs	r2, #0
10067a1a:	60a2      	str	r2, [r4, #8]
10067a1c:	6962      	ldr	r2, [r4, #20]
10067a1e:	4252      	negs	r2, r2
10067a20:	61a2      	str	r2, [r4, #24]
10067a22:	2000      	movs	r0, #0
10067a24:	6922      	ldr	r2, [r4, #16]
10067a26:	4282      	cmp	r2, r0
10067a28:	d101      	bne.n	10067a2e <__swsetup_r+0xaa>
10067a2a:	061a      	lsls	r2, r3, #24
10067a2c:	d4be      	bmi.n	100679ac <__swsetup_r+0x28>
10067a2e:	bd70      	pop	{r4, r5, r6, pc}
10067a30:	0799      	lsls	r1, r3, #30
10067a32:	d400      	bmi.n	10067a36 <__swsetup_r+0xb2>
10067a34:	6962      	ldr	r2, [r4, #20]
10067a36:	60a2      	str	r2, [r4, #8]
10067a38:	e7f3      	b.n	10067a22 <__swsetup_r+0x9e>
10067a3a:	46c0      	nop			@ (mov r8, r8)
10067a3c:	200028c0 	.word	0x200028c0

10067a40 <memcmp>:
10067a40:	b530      	push	{r4, r5, lr}
10067a42:	2400      	movs	r4, #0
10067a44:	3901      	subs	r1, #1
10067a46:	42a2      	cmp	r2, r4
10067a48:	d101      	bne.n	10067a4e <memcmp+0xe>
10067a4a:	2000      	movs	r0, #0
10067a4c:	e005      	b.n	10067a5a <memcmp+0x1a>
10067a4e:	5d03      	ldrb	r3, [r0, r4]
10067a50:	3401      	adds	r4, #1
10067a52:	5d0d      	ldrb	r5, [r1, r4]
10067a54:	42ab      	cmp	r3, r5
10067a56:	d0f6      	beq.n	10067a46 <memcmp+0x6>
10067a58:	1b58      	subs	r0, r3, r5
10067a5a:	bd30      	pop	{r4, r5, pc}

10067a5c <memset>:
10067a5c:	0003      	movs	r3, r0
10067a5e:	1882      	adds	r2, r0, r2
10067a60:	4293      	cmp	r3, r2
10067a62:	d100      	bne.n	10067a66 <memset+0xa>
10067a64:	4770      	bx	lr
10067a66:	7019      	strb	r1, [r3, #0]
10067a68:	3301      	adds	r3, #1
10067a6a:	e7f9      	b.n	10067a60 <memset+0x4>

10067a6c <_close_r>:
10067a6c:	2300      	movs	r3, #0
10067a6e:	b570      	push	{r4, r5, r6, lr}
10067a70:	4d06      	ldr	r5, [pc, #24]	@ (10067a8c <_close_r+0x20>)
10067a72:	0004      	movs	r4, r0
10067a74:	0008      	movs	r0, r1
10067a76:	602b      	str	r3, [r5, #0]
10067a78:	f7df fb75 	bl	10047166 <_close>
10067a7c:	1c43      	adds	r3, r0, #1
10067a7e:	d103      	bne.n	10067a88 <_close_r+0x1c>
10067a80:	682b      	ldr	r3, [r5, #0]
10067a82:	2b00      	cmp	r3, #0
10067a84:	d000      	beq.n	10067a88 <_close_r+0x1c>
10067a86:	6023      	str	r3, [r4, #0]
10067a88:	bd70      	pop	{r4, r5, r6, pc}
10067a8a:	46c0      	nop			@ (mov r8, r8)
10067a8c:	2000260c 	.word	0x2000260c

10067a90 <_lseek_r>:
10067a90:	b570      	push	{r4, r5, r6, lr}
10067a92:	0004      	movs	r4, r0
10067a94:	0008      	movs	r0, r1
10067a96:	0011      	movs	r1, r2
10067a98:	001a      	movs	r2, r3
10067a9a:	2300      	movs	r3, #0
10067a9c:	4d05      	ldr	r5, [pc, #20]	@ (10067ab4 <_lseek_r+0x24>)
10067a9e:	602b      	str	r3, [r5, #0]
10067aa0:	f7df fb82 	bl	100471a8 <_lseek>
10067aa4:	1c43      	adds	r3, r0, #1
10067aa6:	d103      	bne.n	10067ab0 <_lseek_r+0x20>
10067aa8:	682b      	ldr	r3, [r5, #0]
10067aaa:	2b00      	cmp	r3, #0
10067aac:	d000      	beq.n	10067ab0 <_lseek_r+0x20>
10067aae:	6023      	str	r3, [r4, #0]
10067ab0:	bd70      	pop	{r4, r5, r6, pc}
10067ab2:	46c0      	nop			@ (mov r8, r8)
10067ab4:	2000260c 	.word	0x2000260c

10067ab8 <_read_r>:
10067ab8:	b570      	push	{r4, r5, r6, lr}
10067aba:	0004      	movs	r4, r0
10067abc:	0008      	movs	r0, r1
10067abe:	0011      	movs	r1, r2
10067ac0:	001a      	movs	r2, r3
10067ac2:	2300      	movs	r3, #0
10067ac4:	4d05      	ldr	r5, [pc, #20]	@ (10067adc <_read_r+0x24>)
10067ac6:	602b      	str	r3, [r5, #0]
10067ac8:	f7df fb14 	bl	100470f4 <_read>
10067acc:	1c43      	adds	r3, r0, #1
10067ace:	d103      	bne.n	10067ad8 <_read_r+0x20>
10067ad0:	682b      	ldr	r3, [r5, #0]
10067ad2:	2b00      	cmp	r3, #0
10067ad4:	d000      	beq.n	10067ad8 <_read_r+0x20>
10067ad6:	6023      	str	r3, [r4, #0]
10067ad8:	bd70      	pop	{r4, r5, r6, pc}
10067ada:	46c0      	nop			@ (mov r8, r8)
10067adc:	2000260c 	.word	0x2000260c

10067ae0 <_sbrk_r>:
10067ae0:	2300      	movs	r3, #0
10067ae2:	b570      	push	{r4, r5, r6, lr}
10067ae4:	4d06      	ldr	r5, [pc, #24]	@ (10067b00 <_sbrk_r+0x20>)
10067ae6:	0004      	movs	r4, r0
10067ae8:	0008      	movs	r0, r1
10067aea:	602b      	str	r3, [r5, #0]
10067aec:	f7df fb68 	bl	100471c0 <_sbrk>
10067af0:	1c43      	adds	r3, r0, #1
10067af2:	d103      	bne.n	10067afc <_sbrk_r+0x1c>
10067af4:	682b      	ldr	r3, [r5, #0]
10067af6:	2b00      	cmp	r3, #0
10067af8:	d000      	beq.n	10067afc <_sbrk_r+0x1c>
10067afa:	6023      	str	r3, [r4, #0]
10067afc:	bd70      	pop	{r4, r5, r6, pc}
10067afe:	46c0      	nop			@ (mov r8, r8)
10067b00:	2000260c 	.word	0x2000260c

10067b04 <_write_r>:
10067b04:	b570      	push	{r4, r5, r6, lr}
10067b06:	0004      	movs	r4, r0
10067b08:	0008      	movs	r0, r1
10067b0a:	0011      	movs	r1, r2
10067b0c:	001a      	movs	r2, r3
10067b0e:	2300      	movs	r3, #0
10067b10:	4d05      	ldr	r5, [pc, #20]	@ (10067b28 <_write_r+0x24>)
10067b12:	602b      	str	r3, [r5, #0]
10067b14:	f7df fb0b 	bl	1004712e <_write>
10067b18:	1c43      	adds	r3, r0, #1
10067b1a:	d103      	bne.n	10067b24 <_write_r+0x20>
10067b1c:	682b      	ldr	r3, [r5, #0]
10067b1e:	2b00      	cmp	r3, #0
10067b20:	d000      	beq.n	10067b24 <_write_r+0x20>
10067b22:	6023      	str	r3, [r4, #0]
10067b24:	bd70      	pop	{r4, r5, r6, pc}
10067b26:	46c0      	nop			@ (mov r8, r8)
10067b28:	2000260c 	.word	0x2000260c

10067b2c <__errno>:
10067b2c:	4b01      	ldr	r3, [pc, #4]	@ (10067b34 <__errno+0x8>)
10067b2e:	6818      	ldr	r0, [r3, #0]
10067b30:	4770      	bx	lr
10067b32:	46c0      	nop			@ (mov r8, r8)
10067b34:	200028c0 	.word	0x200028c0

10067b38 <__retarget_lock_init_recursive>:
10067b38:	4770      	bx	lr

10067b3a <__retarget_lock_acquire_recursive>:
10067b3a:	4770      	bx	lr

10067b3c <__retarget_lock_release_recursive>:
10067b3c:	4770      	bx	lr

10067b3e <__aeabi_memcpy>:
10067b3e:	b510      	push	{r4, lr}
10067b40:	f000 f801 	bl	10067b46 <memcpy>
10067b44:	bd10      	pop	{r4, pc}

10067b46 <memcpy>:
10067b46:	2300      	movs	r3, #0
10067b48:	b510      	push	{r4, lr}
10067b4a:	429a      	cmp	r2, r3
10067b4c:	d100      	bne.n	10067b50 <memcpy+0xa>
10067b4e:	bd10      	pop	{r4, pc}
10067b50:	5ccc      	ldrb	r4, [r1, r3]
10067b52:	54c4      	strb	r4, [r0, r3]
10067b54:	3301      	adds	r3, #1
10067b56:	e7f8      	b.n	10067b4a <memcpy+0x4>

10067b58 <_free_r>:
10067b58:	b570      	push	{r4, r5, r6, lr}
10067b5a:	0005      	movs	r5, r0
10067b5c:	1e0c      	subs	r4, r1, #0
10067b5e:	d010      	beq.n	10067b82 <_free_r+0x2a>
10067b60:	3c04      	subs	r4, #4
10067b62:	6823      	ldr	r3, [r4, #0]
10067b64:	2b00      	cmp	r3, #0
10067b66:	da00      	bge.n	10067b6a <_free_r+0x12>
10067b68:	18e4      	adds	r4, r4, r3
10067b6a:	0028      	movs	r0, r5
10067b6c:	f7ff fd26 	bl	100675bc <__malloc_lock>
10067b70:	4a1d      	ldr	r2, [pc, #116]	@ (10067be8 <_free_r+0x90>)
10067b72:	6813      	ldr	r3, [r2, #0]
10067b74:	2b00      	cmp	r3, #0
10067b76:	d105      	bne.n	10067b84 <_free_r+0x2c>
10067b78:	6063      	str	r3, [r4, #4]
10067b7a:	6014      	str	r4, [r2, #0]
10067b7c:	0028      	movs	r0, r5
10067b7e:	f7ff fd25 	bl	100675cc <__malloc_unlock>
10067b82:	bd70      	pop	{r4, r5, r6, pc}
10067b84:	42a3      	cmp	r3, r4
10067b86:	d908      	bls.n	10067b9a <_free_r+0x42>
10067b88:	6820      	ldr	r0, [r4, #0]
10067b8a:	1821      	adds	r1, r4, r0
10067b8c:	428b      	cmp	r3, r1
10067b8e:	d1f3      	bne.n	10067b78 <_free_r+0x20>
10067b90:	6819      	ldr	r1, [r3, #0]
10067b92:	685b      	ldr	r3, [r3, #4]
10067b94:	1809      	adds	r1, r1, r0
10067b96:	6021      	str	r1, [r4, #0]
10067b98:	e7ee      	b.n	10067b78 <_free_r+0x20>
10067b9a:	001a      	movs	r2, r3
10067b9c:	685b      	ldr	r3, [r3, #4]
10067b9e:	2b00      	cmp	r3, #0
10067ba0:	d001      	beq.n	10067ba6 <_free_r+0x4e>
10067ba2:	42a3      	cmp	r3, r4
10067ba4:	d9f9      	bls.n	10067b9a <_free_r+0x42>
10067ba6:	6811      	ldr	r1, [r2, #0]
10067ba8:	1850      	adds	r0, r2, r1
10067baa:	42a0      	cmp	r0, r4
10067bac:	d10b      	bne.n	10067bc6 <_free_r+0x6e>
10067bae:	6820      	ldr	r0, [r4, #0]
10067bb0:	1809      	adds	r1, r1, r0
10067bb2:	1850      	adds	r0, r2, r1
10067bb4:	6011      	str	r1, [r2, #0]
10067bb6:	4283      	cmp	r3, r0
10067bb8:	d1e0      	bne.n	10067b7c <_free_r+0x24>
10067bba:	6818      	ldr	r0, [r3, #0]
10067bbc:	685b      	ldr	r3, [r3, #4]
10067bbe:	1841      	adds	r1, r0, r1
10067bc0:	6011      	str	r1, [r2, #0]
10067bc2:	6053      	str	r3, [r2, #4]
10067bc4:	e7da      	b.n	10067b7c <_free_r+0x24>
10067bc6:	42a0      	cmp	r0, r4
10067bc8:	d902      	bls.n	10067bd0 <_free_r+0x78>
10067bca:	230c      	movs	r3, #12
10067bcc:	602b      	str	r3, [r5, #0]
10067bce:	e7d5      	b.n	10067b7c <_free_r+0x24>
10067bd0:	6820      	ldr	r0, [r4, #0]
10067bd2:	1821      	adds	r1, r4, r0
10067bd4:	428b      	cmp	r3, r1
10067bd6:	d103      	bne.n	10067be0 <_free_r+0x88>
10067bd8:	6819      	ldr	r1, [r3, #0]
10067bda:	685b      	ldr	r3, [r3, #4]
10067bdc:	1809      	adds	r1, r1, r0
10067bde:	6021      	str	r1, [r4, #0]
10067be0:	6063      	str	r3, [r4, #4]
10067be2:	6054      	str	r4, [r2, #4]
10067be4:	e7ca      	b.n	10067b7c <_free_r+0x24>
10067be6:	46c0      	nop			@ (mov r8, r8)
10067be8:	200024cc 	.word	0x200024cc

10067bec <__ssputs_r>:
10067bec:	b5f0      	push	{r4, r5, r6, r7, lr}
10067bee:	688e      	ldr	r6, [r1, #8]
10067bf0:	b085      	sub	sp, #20
10067bf2:	001f      	movs	r7, r3
10067bf4:	000c      	movs	r4, r1
10067bf6:	680b      	ldr	r3, [r1, #0]
10067bf8:	9002      	str	r0, [sp, #8]
10067bfa:	9203      	str	r2, [sp, #12]
10067bfc:	42be      	cmp	r6, r7
10067bfe:	d830      	bhi.n	10067c62 <__ssputs_r+0x76>
10067c00:	210c      	movs	r1, #12
10067c02:	5e62      	ldrsh	r2, [r4, r1]
10067c04:	2190      	movs	r1, #144	@ 0x90
10067c06:	00c9      	lsls	r1, r1, #3
10067c08:	420a      	tst	r2, r1
10067c0a:	d028      	beq.n	10067c5e <__ssputs_r+0x72>
10067c0c:	2003      	movs	r0, #3
10067c0e:	6921      	ldr	r1, [r4, #16]
10067c10:	1a5b      	subs	r3, r3, r1
10067c12:	9301      	str	r3, [sp, #4]
10067c14:	6963      	ldr	r3, [r4, #20]
10067c16:	4343      	muls	r3, r0
10067c18:	9801      	ldr	r0, [sp, #4]
10067c1a:	0fdd      	lsrs	r5, r3, #31
10067c1c:	18ed      	adds	r5, r5, r3
10067c1e:	1c7b      	adds	r3, r7, #1
10067c20:	181b      	adds	r3, r3, r0
10067c22:	106d      	asrs	r5, r5, #1
10067c24:	42ab      	cmp	r3, r5
10067c26:	d900      	bls.n	10067c2a <__ssputs_r+0x3e>
10067c28:	001d      	movs	r5, r3
10067c2a:	0552      	lsls	r2, r2, #21
10067c2c:	d528      	bpl.n	10067c80 <__ssputs_r+0x94>
10067c2e:	0029      	movs	r1, r5
10067c30:	9802      	ldr	r0, [sp, #8]
10067c32:	f7ff fc43 	bl	100674bc <_malloc_r>
10067c36:	1e06      	subs	r6, r0, #0
10067c38:	d02c      	beq.n	10067c94 <__ssputs_r+0xa8>
10067c3a:	9a01      	ldr	r2, [sp, #4]
10067c3c:	6921      	ldr	r1, [r4, #16]
10067c3e:	f7ff ff82 	bl	10067b46 <memcpy>
10067c42:	89a2      	ldrh	r2, [r4, #12]
10067c44:	4b18      	ldr	r3, [pc, #96]	@ (10067ca8 <__ssputs_r+0xbc>)
10067c46:	401a      	ands	r2, r3
10067c48:	2380      	movs	r3, #128	@ 0x80
10067c4a:	4313      	orrs	r3, r2
10067c4c:	81a3      	strh	r3, [r4, #12]
10067c4e:	9b01      	ldr	r3, [sp, #4]
10067c50:	6126      	str	r6, [r4, #16]
10067c52:	18f6      	adds	r6, r6, r3
10067c54:	6026      	str	r6, [r4, #0]
10067c56:	003e      	movs	r6, r7
10067c58:	6165      	str	r5, [r4, #20]
10067c5a:	1aed      	subs	r5, r5, r3
10067c5c:	60a5      	str	r5, [r4, #8]
10067c5e:	42be      	cmp	r6, r7
10067c60:	d900      	bls.n	10067c64 <__ssputs_r+0x78>
10067c62:	003e      	movs	r6, r7
10067c64:	0032      	movs	r2, r6
10067c66:	9903      	ldr	r1, [sp, #12]
10067c68:	6820      	ldr	r0, [r4, #0]
10067c6a:	f000 fbb6 	bl	100683da <memmove>
10067c6e:	2000      	movs	r0, #0
10067c70:	68a3      	ldr	r3, [r4, #8]
10067c72:	1b9b      	subs	r3, r3, r6
10067c74:	60a3      	str	r3, [r4, #8]
10067c76:	6823      	ldr	r3, [r4, #0]
10067c78:	199b      	adds	r3, r3, r6
10067c7a:	6023      	str	r3, [r4, #0]
10067c7c:	b005      	add	sp, #20
10067c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067c80:	002a      	movs	r2, r5
10067c82:	9802      	ldr	r0, [sp, #8]
10067c84:	f000 fbeb 	bl	1006845e <_realloc_r>
10067c88:	1e06      	subs	r6, r0, #0
10067c8a:	d1e0      	bne.n	10067c4e <__ssputs_r+0x62>
10067c8c:	6921      	ldr	r1, [r4, #16]
10067c8e:	9802      	ldr	r0, [sp, #8]
10067c90:	f7ff ff62 	bl	10067b58 <_free_r>
10067c94:	230c      	movs	r3, #12
10067c96:	2001      	movs	r0, #1
10067c98:	9a02      	ldr	r2, [sp, #8]
10067c9a:	4240      	negs	r0, r0
10067c9c:	6013      	str	r3, [r2, #0]
10067c9e:	89a2      	ldrh	r2, [r4, #12]
10067ca0:	3334      	adds	r3, #52	@ 0x34
10067ca2:	4313      	orrs	r3, r2
10067ca4:	81a3      	strh	r3, [r4, #12]
10067ca6:	e7e9      	b.n	10067c7c <__ssputs_r+0x90>
10067ca8:	fffffb7f 	.word	0xfffffb7f

10067cac <_svfiprintf_r>:
10067cac:	b5f0      	push	{r4, r5, r6, r7, lr}
10067cae:	b0a1      	sub	sp, #132	@ 0x84
10067cb0:	9003      	str	r0, [sp, #12]
10067cb2:	001d      	movs	r5, r3
10067cb4:	898b      	ldrh	r3, [r1, #12]
10067cb6:	000f      	movs	r7, r1
10067cb8:	0016      	movs	r6, r2
10067cba:	061b      	lsls	r3, r3, #24
10067cbc:	d511      	bpl.n	10067ce2 <_svfiprintf_r+0x36>
10067cbe:	690b      	ldr	r3, [r1, #16]
10067cc0:	2b00      	cmp	r3, #0
10067cc2:	d10e      	bne.n	10067ce2 <_svfiprintf_r+0x36>
10067cc4:	2140      	movs	r1, #64	@ 0x40
10067cc6:	f7ff fbf9 	bl	100674bc <_malloc_r>
10067cca:	6038      	str	r0, [r7, #0]
10067ccc:	6138      	str	r0, [r7, #16]
10067cce:	2800      	cmp	r0, #0
10067cd0:	d105      	bne.n	10067cde <_svfiprintf_r+0x32>
10067cd2:	230c      	movs	r3, #12
10067cd4:	9a03      	ldr	r2, [sp, #12]
10067cd6:	6013      	str	r3, [r2, #0]
10067cd8:	2001      	movs	r0, #1
10067cda:	4240      	negs	r0, r0
10067cdc:	e0cf      	b.n	10067e7e <_svfiprintf_r+0x1d2>
10067cde:	2340      	movs	r3, #64	@ 0x40
10067ce0:	617b      	str	r3, [r7, #20]
10067ce2:	2300      	movs	r3, #0
10067ce4:	ac08      	add	r4, sp, #32
10067ce6:	6163      	str	r3, [r4, #20]
10067ce8:	3320      	adds	r3, #32
10067cea:	7663      	strb	r3, [r4, #25]
10067cec:	3310      	adds	r3, #16
10067cee:	76a3      	strb	r3, [r4, #26]
10067cf0:	9507      	str	r5, [sp, #28]
10067cf2:	0035      	movs	r5, r6
10067cf4:	782b      	ldrb	r3, [r5, #0]
10067cf6:	2b00      	cmp	r3, #0
10067cf8:	d001      	beq.n	10067cfe <_svfiprintf_r+0x52>
10067cfa:	2b25      	cmp	r3, #37	@ 0x25
10067cfc:	d148      	bne.n	10067d90 <_svfiprintf_r+0xe4>
10067cfe:	1bab      	subs	r3, r5, r6
10067d00:	9305      	str	r3, [sp, #20]
10067d02:	42b5      	cmp	r5, r6
10067d04:	d00b      	beq.n	10067d1e <_svfiprintf_r+0x72>
10067d06:	0032      	movs	r2, r6
10067d08:	0039      	movs	r1, r7
10067d0a:	9803      	ldr	r0, [sp, #12]
10067d0c:	f7ff ff6e 	bl	10067bec <__ssputs_r>
10067d10:	3001      	adds	r0, #1
10067d12:	d100      	bne.n	10067d16 <_svfiprintf_r+0x6a>
10067d14:	e0ae      	b.n	10067e74 <_svfiprintf_r+0x1c8>
10067d16:	6963      	ldr	r3, [r4, #20]
10067d18:	9a05      	ldr	r2, [sp, #20]
10067d1a:	189b      	adds	r3, r3, r2
10067d1c:	6163      	str	r3, [r4, #20]
10067d1e:	782b      	ldrb	r3, [r5, #0]
10067d20:	2b00      	cmp	r3, #0
10067d22:	d100      	bne.n	10067d26 <_svfiprintf_r+0x7a>
10067d24:	e0a6      	b.n	10067e74 <_svfiprintf_r+0x1c8>
10067d26:	2201      	movs	r2, #1
10067d28:	2300      	movs	r3, #0
10067d2a:	4252      	negs	r2, r2
10067d2c:	6062      	str	r2, [r4, #4]
10067d2e:	a904      	add	r1, sp, #16
10067d30:	3254      	adds	r2, #84	@ 0x54
10067d32:	1852      	adds	r2, r2, r1
10067d34:	1c6e      	adds	r6, r5, #1
10067d36:	6023      	str	r3, [r4, #0]
10067d38:	60e3      	str	r3, [r4, #12]
10067d3a:	60a3      	str	r3, [r4, #8]
10067d3c:	7013      	strb	r3, [r2, #0]
10067d3e:	65a3      	str	r3, [r4, #88]	@ 0x58
10067d40:	4b54      	ldr	r3, [pc, #336]	@ (10067e94 <_svfiprintf_r+0x1e8>)
10067d42:	2205      	movs	r2, #5
10067d44:	0018      	movs	r0, r3
10067d46:	7831      	ldrb	r1, [r6, #0]
10067d48:	9305      	str	r3, [sp, #20]
10067d4a:	f000 fb7d 	bl	10068448 <memchr>
10067d4e:	1c75      	adds	r5, r6, #1
10067d50:	2800      	cmp	r0, #0
10067d52:	d11f      	bne.n	10067d94 <_svfiprintf_r+0xe8>
10067d54:	6822      	ldr	r2, [r4, #0]
10067d56:	06d3      	lsls	r3, r2, #27
10067d58:	d504      	bpl.n	10067d64 <_svfiprintf_r+0xb8>
10067d5a:	2353      	movs	r3, #83	@ 0x53
10067d5c:	a904      	add	r1, sp, #16
10067d5e:	185b      	adds	r3, r3, r1
10067d60:	2120      	movs	r1, #32
10067d62:	7019      	strb	r1, [r3, #0]
10067d64:	0713      	lsls	r3, r2, #28
10067d66:	d504      	bpl.n	10067d72 <_svfiprintf_r+0xc6>
10067d68:	2353      	movs	r3, #83	@ 0x53
10067d6a:	a904      	add	r1, sp, #16
10067d6c:	185b      	adds	r3, r3, r1
10067d6e:	212b      	movs	r1, #43	@ 0x2b
10067d70:	7019      	strb	r1, [r3, #0]
10067d72:	7833      	ldrb	r3, [r6, #0]
10067d74:	2b2a      	cmp	r3, #42	@ 0x2a
10067d76:	d016      	beq.n	10067da6 <_svfiprintf_r+0xfa>
10067d78:	0035      	movs	r5, r6
10067d7a:	2100      	movs	r1, #0
10067d7c:	200a      	movs	r0, #10
10067d7e:	68e3      	ldr	r3, [r4, #12]
10067d80:	782a      	ldrb	r2, [r5, #0]
10067d82:	1c6e      	adds	r6, r5, #1
10067d84:	3a30      	subs	r2, #48	@ 0x30
10067d86:	2a09      	cmp	r2, #9
10067d88:	d950      	bls.n	10067e2c <_svfiprintf_r+0x180>
10067d8a:	2900      	cmp	r1, #0
10067d8c:	d111      	bne.n	10067db2 <_svfiprintf_r+0x106>
10067d8e:	e017      	b.n	10067dc0 <_svfiprintf_r+0x114>
10067d90:	3501      	adds	r5, #1
10067d92:	e7af      	b.n	10067cf4 <_svfiprintf_r+0x48>
10067d94:	9b05      	ldr	r3, [sp, #20]
10067d96:	6822      	ldr	r2, [r4, #0]
10067d98:	1ac0      	subs	r0, r0, r3
10067d9a:	2301      	movs	r3, #1
10067d9c:	4083      	lsls	r3, r0
10067d9e:	4313      	orrs	r3, r2
10067da0:	002e      	movs	r6, r5
10067da2:	6023      	str	r3, [r4, #0]
10067da4:	e7cc      	b.n	10067d40 <_svfiprintf_r+0x94>
10067da6:	9b07      	ldr	r3, [sp, #28]
10067da8:	1d19      	adds	r1, r3, #4
10067daa:	681b      	ldr	r3, [r3, #0]
10067dac:	9107      	str	r1, [sp, #28]
10067dae:	2b00      	cmp	r3, #0
10067db0:	db01      	blt.n	10067db6 <_svfiprintf_r+0x10a>
10067db2:	930b      	str	r3, [sp, #44]	@ 0x2c
10067db4:	e004      	b.n	10067dc0 <_svfiprintf_r+0x114>
10067db6:	425b      	negs	r3, r3
10067db8:	60e3      	str	r3, [r4, #12]
10067dba:	2302      	movs	r3, #2
10067dbc:	4313      	orrs	r3, r2
10067dbe:	6023      	str	r3, [r4, #0]
10067dc0:	782b      	ldrb	r3, [r5, #0]
10067dc2:	2b2e      	cmp	r3, #46	@ 0x2e
10067dc4:	d10c      	bne.n	10067de0 <_svfiprintf_r+0x134>
10067dc6:	786b      	ldrb	r3, [r5, #1]
10067dc8:	2b2a      	cmp	r3, #42	@ 0x2a
10067dca:	d134      	bne.n	10067e36 <_svfiprintf_r+0x18a>
10067dcc:	9b07      	ldr	r3, [sp, #28]
10067dce:	3502      	adds	r5, #2
10067dd0:	1d1a      	adds	r2, r3, #4
10067dd2:	681b      	ldr	r3, [r3, #0]
10067dd4:	9207      	str	r2, [sp, #28]
10067dd6:	2b00      	cmp	r3, #0
10067dd8:	da01      	bge.n	10067dde <_svfiprintf_r+0x132>
10067dda:	2301      	movs	r3, #1
10067ddc:	425b      	negs	r3, r3
10067dde:	9309      	str	r3, [sp, #36]	@ 0x24
10067de0:	4e2d      	ldr	r6, [pc, #180]	@ (10067e98 <_svfiprintf_r+0x1ec>)
10067de2:	2203      	movs	r2, #3
10067de4:	0030      	movs	r0, r6
10067de6:	7829      	ldrb	r1, [r5, #0]
10067de8:	f000 fb2e 	bl	10068448 <memchr>
10067dec:	2800      	cmp	r0, #0
10067dee:	d006      	beq.n	10067dfe <_svfiprintf_r+0x152>
10067df0:	2340      	movs	r3, #64	@ 0x40
10067df2:	1b80      	subs	r0, r0, r6
10067df4:	4083      	lsls	r3, r0
10067df6:	6822      	ldr	r2, [r4, #0]
10067df8:	3501      	adds	r5, #1
10067dfa:	4313      	orrs	r3, r2
10067dfc:	6023      	str	r3, [r4, #0]
10067dfe:	7829      	ldrb	r1, [r5, #0]
10067e00:	2206      	movs	r2, #6
10067e02:	4826      	ldr	r0, [pc, #152]	@ (10067e9c <_svfiprintf_r+0x1f0>)
10067e04:	1c6e      	adds	r6, r5, #1
10067e06:	7621      	strb	r1, [r4, #24]
10067e08:	f000 fb1e 	bl	10068448 <memchr>
10067e0c:	2800      	cmp	r0, #0
10067e0e:	d038      	beq.n	10067e82 <_svfiprintf_r+0x1d6>
10067e10:	4b23      	ldr	r3, [pc, #140]	@ (10067ea0 <_svfiprintf_r+0x1f4>)
10067e12:	2b00      	cmp	r3, #0
10067e14:	d122      	bne.n	10067e5c <_svfiprintf_r+0x1b0>
10067e16:	2207      	movs	r2, #7
10067e18:	9b07      	ldr	r3, [sp, #28]
10067e1a:	3307      	adds	r3, #7
10067e1c:	4393      	bics	r3, r2
10067e1e:	3308      	adds	r3, #8
10067e20:	9307      	str	r3, [sp, #28]
10067e22:	6963      	ldr	r3, [r4, #20]
10067e24:	9a04      	ldr	r2, [sp, #16]
10067e26:	189b      	adds	r3, r3, r2
10067e28:	6163      	str	r3, [r4, #20]
10067e2a:	e762      	b.n	10067cf2 <_svfiprintf_r+0x46>
10067e2c:	4343      	muls	r3, r0
10067e2e:	0035      	movs	r5, r6
10067e30:	2101      	movs	r1, #1
10067e32:	189b      	adds	r3, r3, r2
10067e34:	e7a4      	b.n	10067d80 <_svfiprintf_r+0xd4>
10067e36:	2300      	movs	r3, #0
10067e38:	200a      	movs	r0, #10
10067e3a:	0019      	movs	r1, r3
10067e3c:	3501      	adds	r5, #1
10067e3e:	6063      	str	r3, [r4, #4]
10067e40:	782a      	ldrb	r2, [r5, #0]
10067e42:	1c6e      	adds	r6, r5, #1
10067e44:	3a30      	subs	r2, #48	@ 0x30
10067e46:	2a09      	cmp	r2, #9
10067e48:	d903      	bls.n	10067e52 <_svfiprintf_r+0x1a6>
10067e4a:	2b00      	cmp	r3, #0
10067e4c:	d0c8      	beq.n	10067de0 <_svfiprintf_r+0x134>
10067e4e:	9109      	str	r1, [sp, #36]	@ 0x24
10067e50:	e7c6      	b.n	10067de0 <_svfiprintf_r+0x134>
10067e52:	4341      	muls	r1, r0
10067e54:	0035      	movs	r5, r6
10067e56:	2301      	movs	r3, #1
10067e58:	1889      	adds	r1, r1, r2
10067e5a:	e7f1      	b.n	10067e40 <_svfiprintf_r+0x194>
10067e5c:	aa07      	add	r2, sp, #28
10067e5e:	9200      	str	r2, [sp, #0]
10067e60:	0021      	movs	r1, r4
10067e62:	003a      	movs	r2, r7
10067e64:	4b0f      	ldr	r3, [pc, #60]	@ (10067ea4 <_svfiprintf_r+0x1f8>)
10067e66:	9803      	ldr	r0, [sp, #12]
10067e68:	e000      	b.n	10067e6c <_svfiprintf_r+0x1c0>
10067e6a:	bf00      	nop
10067e6c:	9004      	str	r0, [sp, #16]
10067e6e:	9b04      	ldr	r3, [sp, #16]
10067e70:	3301      	adds	r3, #1
10067e72:	d1d6      	bne.n	10067e22 <_svfiprintf_r+0x176>
10067e74:	89bb      	ldrh	r3, [r7, #12]
10067e76:	980d      	ldr	r0, [sp, #52]	@ 0x34
10067e78:	065b      	lsls	r3, r3, #25
10067e7a:	d500      	bpl.n	10067e7e <_svfiprintf_r+0x1d2>
10067e7c:	e72c      	b.n	10067cd8 <_svfiprintf_r+0x2c>
10067e7e:	b021      	add	sp, #132	@ 0x84
10067e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067e82:	aa07      	add	r2, sp, #28
10067e84:	9200      	str	r2, [sp, #0]
10067e86:	0021      	movs	r1, r4
10067e88:	003a      	movs	r2, r7
10067e8a:	4b06      	ldr	r3, [pc, #24]	@ (10067ea4 <_svfiprintf_r+0x1f8>)
10067e8c:	9803      	ldr	r0, [sp, #12]
10067e8e:	f000 f87b 	bl	10067f88 <_printf_i>
10067e92:	e7eb      	b.n	10067e6c <_svfiprintf_r+0x1c0>
10067e94:	100697dd 	.word	0x100697dd
10067e98:	100697e3 	.word	0x100697e3
10067e9c:	100697e7 	.word	0x100697e7
10067ea0:	00000000 	.word	0x00000000
10067ea4:	10067bed 	.word	0x10067bed

10067ea8 <_printf_common>:
10067ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10067eaa:	0016      	movs	r6, r2
10067eac:	9301      	str	r3, [sp, #4]
10067eae:	688a      	ldr	r2, [r1, #8]
10067eb0:	690b      	ldr	r3, [r1, #16]
10067eb2:	000c      	movs	r4, r1
10067eb4:	9000      	str	r0, [sp, #0]
10067eb6:	4293      	cmp	r3, r2
10067eb8:	da00      	bge.n	10067ebc <_printf_common+0x14>
10067eba:	0013      	movs	r3, r2
10067ebc:	0022      	movs	r2, r4
10067ebe:	6033      	str	r3, [r6, #0]
10067ec0:	3243      	adds	r2, #67	@ 0x43
10067ec2:	7812      	ldrb	r2, [r2, #0]
10067ec4:	2a00      	cmp	r2, #0
10067ec6:	d001      	beq.n	10067ecc <_printf_common+0x24>
10067ec8:	3301      	adds	r3, #1
10067eca:	6033      	str	r3, [r6, #0]
10067ecc:	6823      	ldr	r3, [r4, #0]
10067ece:	069b      	lsls	r3, r3, #26
10067ed0:	d502      	bpl.n	10067ed8 <_printf_common+0x30>
10067ed2:	6833      	ldr	r3, [r6, #0]
10067ed4:	3302      	adds	r3, #2
10067ed6:	6033      	str	r3, [r6, #0]
10067ed8:	6822      	ldr	r2, [r4, #0]
10067eda:	2306      	movs	r3, #6
10067edc:	0015      	movs	r5, r2
10067ede:	401d      	ands	r5, r3
10067ee0:	421a      	tst	r2, r3
10067ee2:	d027      	beq.n	10067f34 <_printf_common+0x8c>
10067ee4:	0023      	movs	r3, r4
10067ee6:	3343      	adds	r3, #67	@ 0x43
10067ee8:	781b      	ldrb	r3, [r3, #0]
10067eea:	1e5a      	subs	r2, r3, #1
10067eec:	4193      	sbcs	r3, r2
10067eee:	6822      	ldr	r2, [r4, #0]
10067ef0:	0692      	lsls	r2, r2, #26
10067ef2:	d430      	bmi.n	10067f56 <_printf_common+0xae>
10067ef4:	0022      	movs	r2, r4
10067ef6:	9901      	ldr	r1, [sp, #4]
10067ef8:	9800      	ldr	r0, [sp, #0]
10067efa:	9d08      	ldr	r5, [sp, #32]
10067efc:	3243      	adds	r2, #67	@ 0x43
10067efe:	47a8      	blx	r5
10067f00:	3001      	adds	r0, #1
10067f02:	d025      	beq.n	10067f50 <_printf_common+0xa8>
10067f04:	2206      	movs	r2, #6
10067f06:	6823      	ldr	r3, [r4, #0]
10067f08:	2500      	movs	r5, #0
10067f0a:	4013      	ands	r3, r2
10067f0c:	2b04      	cmp	r3, #4
10067f0e:	d105      	bne.n	10067f1c <_printf_common+0x74>
10067f10:	6833      	ldr	r3, [r6, #0]
10067f12:	68e5      	ldr	r5, [r4, #12]
10067f14:	1aed      	subs	r5, r5, r3
10067f16:	43eb      	mvns	r3, r5
10067f18:	17db      	asrs	r3, r3, #31
10067f1a:	401d      	ands	r5, r3
10067f1c:	68a3      	ldr	r3, [r4, #8]
10067f1e:	6922      	ldr	r2, [r4, #16]
10067f20:	4293      	cmp	r3, r2
10067f22:	dd01      	ble.n	10067f28 <_printf_common+0x80>
10067f24:	1a9b      	subs	r3, r3, r2
10067f26:	18ed      	adds	r5, r5, r3
10067f28:	2600      	movs	r6, #0
10067f2a:	42b5      	cmp	r5, r6
10067f2c:	d120      	bne.n	10067f70 <_printf_common+0xc8>
10067f2e:	2000      	movs	r0, #0
10067f30:	e010      	b.n	10067f54 <_printf_common+0xac>
10067f32:	3501      	adds	r5, #1
10067f34:	68e3      	ldr	r3, [r4, #12]
10067f36:	6832      	ldr	r2, [r6, #0]
10067f38:	1a9b      	subs	r3, r3, r2
10067f3a:	42ab      	cmp	r3, r5
10067f3c:	ddd2      	ble.n	10067ee4 <_printf_common+0x3c>
10067f3e:	0022      	movs	r2, r4
10067f40:	2301      	movs	r3, #1
10067f42:	9901      	ldr	r1, [sp, #4]
10067f44:	9800      	ldr	r0, [sp, #0]
10067f46:	9f08      	ldr	r7, [sp, #32]
10067f48:	3219      	adds	r2, #25
10067f4a:	47b8      	blx	r7
10067f4c:	3001      	adds	r0, #1
10067f4e:	d1f0      	bne.n	10067f32 <_printf_common+0x8a>
10067f50:	2001      	movs	r0, #1
10067f52:	4240      	negs	r0, r0
10067f54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10067f56:	2030      	movs	r0, #48	@ 0x30
10067f58:	18e1      	adds	r1, r4, r3
10067f5a:	3143      	adds	r1, #67	@ 0x43
10067f5c:	7008      	strb	r0, [r1, #0]
10067f5e:	0021      	movs	r1, r4
10067f60:	1c5a      	adds	r2, r3, #1
10067f62:	3145      	adds	r1, #69	@ 0x45
10067f64:	7809      	ldrb	r1, [r1, #0]
10067f66:	18a2      	adds	r2, r4, r2
10067f68:	3243      	adds	r2, #67	@ 0x43
10067f6a:	3302      	adds	r3, #2
10067f6c:	7011      	strb	r1, [r2, #0]
10067f6e:	e7c1      	b.n	10067ef4 <_printf_common+0x4c>
10067f70:	0022      	movs	r2, r4
10067f72:	2301      	movs	r3, #1
10067f74:	9901      	ldr	r1, [sp, #4]
10067f76:	9800      	ldr	r0, [sp, #0]
10067f78:	9f08      	ldr	r7, [sp, #32]
10067f7a:	321a      	adds	r2, #26
10067f7c:	47b8      	blx	r7
10067f7e:	3001      	adds	r0, #1
10067f80:	d0e6      	beq.n	10067f50 <_printf_common+0xa8>
10067f82:	3601      	adds	r6, #1
10067f84:	e7d1      	b.n	10067f2a <_printf_common+0x82>
	...

10067f88 <_printf_i>:
10067f88:	b5f0      	push	{r4, r5, r6, r7, lr}
10067f8a:	b08b      	sub	sp, #44	@ 0x2c
10067f8c:	9206      	str	r2, [sp, #24]
10067f8e:	000a      	movs	r2, r1
10067f90:	3243      	adds	r2, #67	@ 0x43
10067f92:	9307      	str	r3, [sp, #28]
10067f94:	9005      	str	r0, [sp, #20]
10067f96:	9203      	str	r2, [sp, #12]
10067f98:	7e0a      	ldrb	r2, [r1, #24]
10067f9a:	000c      	movs	r4, r1
10067f9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10067f9e:	2a78      	cmp	r2, #120	@ 0x78
10067fa0:	d809      	bhi.n	10067fb6 <_printf_i+0x2e>
10067fa2:	2a62      	cmp	r2, #98	@ 0x62
10067fa4:	d80b      	bhi.n	10067fbe <_printf_i+0x36>
10067fa6:	2a00      	cmp	r2, #0
10067fa8:	d100      	bne.n	10067fac <_printf_i+0x24>
10067faa:	e0ba      	b.n	10068122 <_printf_i+0x19a>
10067fac:	497a      	ldr	r1, [pc, #488]	@ (10068198 <_printf_i+0x210>)
10067fae:	9104      	str	r1, [sp, #16]
10067fb0:	2a58      	cmp	r2, #88	@ 0x58
10067fb2:	d100      	bne.n	10067fb6 <_printf_i+0x2e>
10067fb4:	e08e      	b.n	100680d4 <_printf_i+0x14c>
10067fb6:	0025      	movs	r5, r4
10067fb8:	3542      	adds	r5, #66	@ 0x42
10067fba:	702a      	strb	r2, [r5, #0]
10067fbc:	e022      	b.n	10068004 <_printf_i+0x7c>
10067fbe:	0010      	movs	r0, r2
10067fc0:	3863      	subs	r0, #99	@ 0x63
10067fc2:	2815      	cmp	r0, #21
10067fc4:	d8f7      	bhi.n	10067fb6 <_printf_i+0x2e>
10067fc6:	f7d8 f931 	bl	1004022c <__gnu_thumb1_case_shi>
10067fca:	0016      	.short	0x0016
10067fcc:	fff6001f 	.word	0xfff6001f
10067fd0:	fff6fff6 	.word	0xfff6fff6
10067fd4:	001ffff6 	.word	0x001ffff6
10067fd8:	fff6fff6 	.word	0xfff6fff6
10067fdc:	fff6fff6 	.word	0xfff6fff6
10067fe0:	0036009f 	.word	0x0036009f
10067fe4:	fff6007e 	.word	0xfff6007e
10067fe8:	00b0fff6 	.word	0x00b0fff6
10067fec:	0036fff6 	.word	0x0036fff6
10067ff0:	fff6fff6 	.word	0xfff6fff6
10067ff4:	0082      	.short	0x0082
10067ff6:	0025      	movs	r5, r4
10067ff8:	681a      	ldr	r2, [r3, #0]
10067ffa:	3542      	adds	r5, #66	@ 0x42
10067ffc:	1d11      	adds	r1, r2, #4
10067ffe:	6019      	str	r1, [r3, #0]
10068000:	6813      	ldr	r3, [r2, #0]
10068002:	702b      	strb	r3, [r5, #0]
10068004:	2301      	movs	r3, #1
10068006:	e09e      	b.n	10068146 <_printf_i+0x1be>
10068008:	6818      	ldr	r0, [r3, #0]
1006800a:	6809      	ldr	r1, [r1, #0]
1006800c:	1d02      	adds	r2, r0, #4
1006800e:	060d      	lsls	r5, r1, #24
10068010:	d50b      	bpl.n	1006802a <_printf_i+0xa2>
10068012:	6806      	ldr	r6, [r0, #0]
10068014:	601a      	str	r2, [r3, #0]
10068016:	2e00      	cmp	r6, #0
10068018:	da03      	bge.n	10068022 <_printf_i+0x9a>
1006801a:	232d      	movs	r3, #45	@ 0x2d
1006801c:	9a03      	ldr	r2, [sp, #12]
1006801e:	4276      	negs	r6, r6
10068020:	7013      	strb	r3, [r2, #0]
10068022:	4b5d      	ldr	r3, [pc, #372]	@ (10068198 <_printf_i+0x210>)
10068024:	270a      	movs	r7, #10
10068026:	9304      	str	r3, [sp, #16]
10068028:	e018      	b.n	1006805c <_printf_i+0xd4>
1006802a:	6806      	ldr	r6, [r0, #0]
1006802c:	601a      	str	r2, [r3, #0]
1006802e:	0649      	lsls	r1, r1, #25
10068030:	d5f1      	bpl.n	10068016 <_printf_i+0x8e>
10068032:	b236      	sxth	r6, r6
10068034:	e7ef      	b.n	10068016 <_printf_i+0x8e>
10068036:	6808      	ldr	r0, [r1, #0]
10068038:	6819      	ldr	r1, [r3, #0]
1006803a:	c940      	ldmia	r1!, {r6}
1006803c:	0605      	lsls	r5, r0, #24
1006803e:	d402      	bmi.n	10068046 <_printf_i+0xbe>
10068040:	0640      	lsls	r0, r0, #25
10068042:	d500      	bpl.n	10068046 <_printf_i+0xbe>
10068044:	b2b6      	uxth	r6, r6
10068046:	6019      	str	r1, [r3, #0]
10068048:	4b53      	ldr	r3, [pc, #332]	@ (10068198 <_printf_i+0x210>)
1006804a:	270a      	movs	r7, #10
1006804c:	9304      	str	r3, [sp, #16]
1006804e:	2a6f      	cmp	r2, #111	@ 0x6f
10068050:	d100      	bne.n	10068054 <_printf_i+0xcc>
10068052:	3f02      	subs	r7, #2
10068054:	0023      	movs	r3, r4
10068056:	2200      	movs	r2, #0
10068058:	3343      	adds	r3, #67	@ 0x43
1006805a:	701a      	strb	r2, [r3, #0]
1006805c:	6863      	ldr	r3, [r4, #4]
1006805e:	60a3      	str	r3, [r4, #8]
10068060:	2b00      	cmp	r3, #0
10068062:	db06      	blt.n	10068072 <_printf_i+0xea>
10068064:	2104      	movs	r1, #4
10068066:	6822      	ldr	r2, [r4, #0]
10068068:	9d03      	ldr	r5, [sp, #12]
1006806a:	438a      	bics	r2, r1
1006806c:	6022      	str	r2, [r4, #0]
1006806e:	4333      	orrs	r3, r6
10068070:	d00c      	beq.n	1006808c <_printf_i+0x104>
10068072:	9d03      	ldr	r5, [sp, #12]
10068074:	0030      	movs	r0, r6
10068076:	0039      	movs	r1, r7
10068078:	f7d8 f968 	bl	1004034c <__aeabi_uidivmod>
1006807c:	9b04      	ldr	r3, [sp, #16]
1006807e:	3d01      	subs	r5, #1
10068080:	5c5b      	ldrb	r3, [r3, r1]
10068082:	702b      	strb	r3, [r5, #0]
10068084:	0033      	movs	r3, r6
10068086:	0006      	movs	r6, r0
10068088:	429f      	cmp	r7, r3
1006808a:	d9f3      	bls.n	10068074 <_printf_i+0xec>
1006808c:	2f08      	cmp	r7, #8
1006808e:	d109      	bne.n	100680a4 <_printf_i+0x11c>
10068090:	6823      	ldr	r3, [r4, #0]
10068092:	07db      	lsls	r3, r3, #31
10068094:	d506      	bpl.n	100680a4 <_printf_i+0x11c>
10068096:	6862      	ldr	r2, [r4, #4]
10068098:	6923      	ldr	r3, [r4, #16]
1006809a:	429a      	cmp	r2, r3
1006809c:	dc02      	bgt.n	100680a4 <_printf_i+0x11c>
1006809e:	2330      	movs	r3, #48	@ 0x30
100680a0:	3d01      	subs	r5, #1
100680a2:	702b      	strb	r3, [r5, #0]
100680a4:	9b03      	ldr	r3, [sp, #12]
100680a6:	1b5b      	subs	r3, r3, r5
100680a8:	6123      	str	r3, [r4, #16]
100680aa:	9b07      	ldr	r3, [sp, #28]
100680ac:	0021      	movs	r1, r4
100680ae:	9300      	str	r3, [sp, #0]
100680b0:	9805      	ldr	r0, [sp, #20]
100680b2:	9b06      	ldr	r3, [sp, #24]
100680b4:	aa09      	add	r2, sp, #36	@ 0x24
100680b6:	f7ff fef7 	bl	10067ea8 <_printf_common>
100680ba:	3001      	adds	r0, #1
100680bc:	d148      	bne.n	10068150 <_printf_i+0x1c8>
100680be:	2001      	movs	r0, #1
100680c0:	4240      	negs	r0, r0
100680c2:	b00b      	add	sp, #44	@ 0x2c
100680c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100680c6:	2220      	movs	r2, #32
100680c8:	6809      	ldr	r1, [r1, #0]
100680ca:	430a      	orrs	r2, r1
100680cc:	6022      	str	r2, [r4, #0]
100680ce:	2278      	movs	r2, #120	@ 0x78
100680d0:	4932      	ldr	r1, [pc, #200]	@ (1006819c <_printf_i+0x214>)
100680d2:	9104      	str	r1, [sp, #16]
100680d4:	0021      	movs	r1, r4
100680d6:	3145      	adds	r1, #69	@ 0x45
100680d8:	700a      	strb	r2, [r1, #0]
100680da:	6819      	ldr	r1, [r3, #0]
100680dc:	6822      	ldr	r2, [r4, #0]
100680de:	c940      	ldmia	r1!, {r6}
100680e0:	0610      	lsls	r0, r2, #24
100680e2:	d402      	bmi.n	100680ea <_printf_i+0x162>
100680e4:	0650      	lsls	r0, r2, #25
100680e6:	d500      	bpl.n	100680ea <_printf_i+0x162>
100680e8:	b2b6      	uxth	r6, r6
100680ea:	6019      	str	r1, [r3, #0]
100680ec:	07d3      	lsls	r3, r2, #31
100680ee:	d502      	bpl.n	100680f6 <_printf_i+0x16e>
100680f0:	2320      	movs	r3, #32
100680f2:	4313      	orrs	r3, r2
100680f4:	6023      	str	r3, [r4, #0]
100680f6:	2e00      	cmp	r6, #0
100680f8:	d001      	beq.n	100680fe <_printf_i+0x176>
100680fa:	2710      	movs	r7, #16
100680fc:	e7aa      	b.n	10068054 <_printf_i+0xcc>
100680fe:	2220      	movs	r2, #32
10068100:	6823      	ldr	r3, [r4, #0]
10068102:	4393      	bics	r3, r2
10068104:	6023      	str	r3, [r4, #0]
10068106:	e7f8      	b.n	100680fa <_printf_i+0x172>
10068108:	681a      	ldr	r2, [r3, #0]
1006810a:	680d      	ldr	r5, [r1, #0]
1006810c:	1d10      	adds	r0, r2, #4
1006810e:	6949      	ldr	r1, [r1, #20]
10068110:	6018      	str	r0, [r3, #0]
10068112:	6813      	ldr	r3, [r2, #0]
10068114:	062e      	lsls	r6, r5, #24
10068116:	d501      	bpl.n	1006811c <_printf_i+0x194>
10068118:	6019      	str	r1, [r3, #0]
1006811a:	e002      	b.n	10068122 <_printf_i+0x19a>
1006811c:	066d      	lsls	r5, r5, #25
1006811e:	d5fb      	bpl.n	10068118 <_printf_i+0x190>
10068120:	8019      	strh	r1, [r3, #0]
10068122:	2300      	movs	r3, #0
10068124:	9d03      	ldr	r5, [sp, #12]
10068126:	6123      	str	r3, [r4, #16]
10068128:	e7bf      	b.n	100680aa <_printf_i+0x122>
1006812a:	681a      	ldr	r2, [r3, #0]
1006812c:	1d11      	adds	r1, r2, #4
1006812e:	6019      	str	r1, [r3, #0]
10068130:	6815      	ldr	r5, [r2, #0]
10068132:	2100      	movs	r1, #0
10068134:	0028      	movs	r0, r5
10068136:	6862      	ldr	r2, [r4, #4]
10068138:	f000 f986 	bl	10068448 <memchr>
1006813c:	2800      	cmp	r0, #0
1006813e:	d001      	beq.n	10068144 <_printf_i+0x1bc>
10068140:	1b40      	subs	r0, r0, r5
10068142:	6060      	str	r0, [r4, #4]
10068144:	6863      	ldr	r3, [r4, #4]
10068146:	6123      	str	r3, [r4, #16]
10068148:	2300      	movs	r3, #0
1006814a:	9a03      	ldr	r2, [sp, #12]
1006814c:	7013      	strb	r3, [r2, #0]
1006814e:	e7ac      	b.n	100680aa <_printf_i+0x122>
10068150:	002a      	movs	r2, r5
10068152:	6923      	ldr	r3, [r4, #16]
10068154:	9906      	ldr	r1, [sp, #24]
10068156:	9805      	ldr	r0, [sp, #20]
10068158:	9d07      	ldr	r5, [sp, #28]
1006815a:	47a8      	blx	r5
1006815c:	3001      	adds	r0, #1
1006815e:	d0ae      	beq.n	100680be <_printf_i+0x136>
10068160:	6823      	ldr	r3, [r4, #0]
10068162:	079b      	lsls	r3, r3, #30
10068164:	d415      	bmi.n	10068192 <_printf_i+0x20a>
10068166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10068168:	68e0      	ldr	r0, [r4, #12]
1006816a:	4298      	cmp	r0, r3
1006816c:	daa9      	bge.n	100680c2 <_printf_i+0x13a>
1006816e:	0018      	movs	r0, r3
10068170:	e7a7      	b.n	100680c2 <_printf_i+0x13a>
10068172:	0022      	movs	r2, r4
10068174:	2301      	movs	r3, #1
10068176:	9906      	ldr	r1, [sp, #24]
10068178:	9805      	ldr	r0, [sp, #20]
1006817a:	9e07      	ldr	r6, [sp, #28]
1006817c:	3219      	adds	r2, #25
1006817e:	47b0      	blx	r6
10068180:	3001      	adds	r0, #1
10068182:	d09c      	beq.n	100680be <_printf_i+0x136>
10068184:	3501      	adds	r5, #1
10068186:	68e3      	ldr	r3, [r4, #12]
10068188:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1006818a:	1a9b      	subs	r3, r3, r2
1006818c:	42ab      	cmp	r3, r5
1006818e:	dcf0      	bgt.n	10068172 <_printf_i+0x1ea>
10068190:	e7e9      	b.n	10068166 <_printf_i+0x1de>
10068192:	2500      	movs	r5, #0
10068194:	e7f7      	b.n	10068186 <_printf_i+0x1fe>
10068196:	46c0      	nop			@ (mov r8, r8)
10068198:	100697ee 	.word	0x100697ee
1006819c:	100697ff 	.word	0x100697ff

100681a0 <__sflush_r>:
100681a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100681a2:	220c      	movs	r2, #12
100681a4:	5e8b      	ldrsh	r3, [r1, r2]
100681a6:	0005      	movs	r5, r0
100681a8:	000c      	movs	r4, r1
100681aa:	071a      	lsls	r2, r3, #28
100681ac:	d456      	bmi.n	1006825c <__sflush_r+0xbc>
100681ae:	684a      	ldr	r2, [r1, #4]
100681b0:	2a00      	cmp	r2, #0
100681b2:	dc02      	bgt.n	100681ba <__sflush_r+0x1a>
100681b4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
100681b6:	2a00      	cmp	r2, #0
100681b8:	dd4e      	ble.n	10068258 <__sflush_r+0xb8>
100681ba:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
100681bc:	2f00      	cmp	r7, #0
100681be:	d04b      	beq.n	10068258 <__sflush_r+0xb8>
100681c0:	2200      	movs	r2, #0
100681c2:	2080      	movs	r0, #128	@ 0x80
100681c4:	682e      	ldr	r6, [r5, #0]
100681c6:	602a      	str	r2, [r5, #0]
100681c8:	001a      	movs	r2, r3
100681ca:	0140      	lsls	r0, r0, #5
100681cc:	6a21      	ldr	r1, [r4, #32]
100681ce:	4002      	ands	r2, r0
100681d0:	4203      	tst	r3, r0
100681d2:	d033      	beq.n	1006823c <__sflush_r+0x9c>
100681d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
100681d6:	89a3      	ldrh	r3, [r4, #12]
100681d8:	075b      	lsls	r3, r3, #29
100681da:	d506      	bpl.n	100681ea <__sflush_r+0x4a>
100681dc:	6863      	ldr	r3, [r4, #4]
100681de:	1ad2      	subs	r2, r2, r3
100681e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
100681e2:	2b00      	cmp	r3, #0
100681e4:	d001      	beq.n	100681ea <__sflush_r+0x4a>
100681e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
100681e8:	1ad2      	subs	r2, r2, r3
100681ea:	2300      	movs	r3, #0
100681ec:	0028      	movs	r0, r5
100681ee:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
100681f0:	6a21      	ldr	r1, [r4, #32]
100681f2:	47b8      	blx	r7
100681f4:	89a2      	ldrh	r2, [r4, #12]
100681f6:	1c43      	adds	r3, r0, #1
100681f8:	d106      	bne.n	10068208 <__sflush_r+0x68>
100681fa:	6829      	ldr	r1, [r5, #0]
100681fc:	291d      	cmp	r1, #29
100681fe:	d846      	bhi.n	1006828e <__sflush_r+0xee>
10068200:	4b29      	ldr	r3, [pc, #164]	@ (100682a8 <__sflush_r+0x108>)
10068202:	40cb      	lsrs	r3, r1
10068204:	07db      	lsls	r3, r3, #31
10068206:	d542      	bpl.n	1006828e <__sflush_r+0xee>
10068208:	2300      	movs	r3, #0
1006820a:	6063      	str	r3, [r4, #4]
1006820c:	6923      	ldr	r3, [r4, #16]
1006820e:	6023      	str	r3, [r4, #0]
10068210:	04d2      	lsls	r2, r2, #19
10068212:	d505      	bpl.n	10068220 <__sflush_r+0x80>
10068214:	1c43      	adds	r3, r0, #1
10068216:	d102      	bne.n	1006821e <__sflush_r+0x7e>
10068218:	682b      	ldr	r3, [r5, #0]
1006821a:	2b00      	cmp	r3, #0
1006821c:	d100      	bne.n	10068220 <__sflush_r+0x80>
1006821e:	6560      	str	r0, [r4, #84]	@ 0x54
10068220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10068222:	602e      	str	r6, [r5, #0]
10068224:	2900      	cmp	r1, #0
10068226:	d017      	beq.n	10068258 <__sflush_r+0xb8>
10068228:	0023      	movs	r3, r4
1006822a:	3344      	adds	r3, #68	@ 0x44
1006822c:	4299      	cmp	r1, r3
1006822e:	d002      	beq.n	10068236 <__sflush_r+0x96>
10068230:	0028      	movs	r0, r5
10068232:	f7ff fc91 	bl	10067b58 <_free_r>
10068236:	2300      	movs	r3, #0
10068238:	6363      	str	r3, [r4, #52]	@ 0x34
1006823a:	e00d      	b.n	10068258 <__sflush_r+0xb8>
1006823c:	2301      	movs	r3, #1
1006823e:	0028      	movs	r0, r5
10068240:	47b8      	blx	r7
10068242:	0002      	movs	r2, r0
10068244:	1c43      	adds	r3, r0, #1
10068246:	d1c6      	bne.n	100681d6 <__sflush_r+0x36>
10068248:	682b      	ldr	r3, [r5, #0]
1006824a:	2b00      	cmp	r3, #0
1006824c:	d0c3      	beq.n	100681d6 <__sflush_r+0x36>
1006824e:	2b1d      	cmp	r3, #29
10068250:	d001      	beq.n	10068256 <__sflush_r+0xb6>
10068252:	2b16      	cmp	r3, #22
10068254:	d11a      	bne.n	1006828c <__sflush_r+0xec>
10068256:	602e      	str	r6, [r5, #0]
10068258:	2000      	movs	r0, #0
1006825a:	e01e      	b.n	1006829a <__sflush_r+0xfa>
1006825c:	690e      	ldr	r6, [r1, #16]
1006825e:	2e00      	cmp	r6, #0
10068260:	d0fa      	beq.n	10068258 <__sflush_r+0xb8>
10068262:	680f      	ldr	r7, [r1, #0]
10068264:	600e      	str	r6, [r1, #0]
10068266:	1bba      	subs	r2, r7, r6
10068268:	9201      	str	r2, [sp, #4]
1006826a:	2200      	movs	r2, #0
1006826c:	079b      	lsls	r3, r3, #30
1006826e:	d100      	bne.n	10068272 <__sflush_r+0xd2>
10068270:	694a      	ldr	r2, [r1, #20]
10068272:	60a2      	str	r2, [r4, #8]
10068274:	9b01      	ldr	r3, [sp, #4]
10068276:	2b00      	cmp	r3, #0
10068278:	ddee      	ble.n	10068258 <__sflush_r+0xb8>
1006827a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
1006827c:	0032      	movs	r2, r6
1006827e:	001f      	movs	r7, r3
10068280:	0028      	movs	r0, r5
10068282:	9b01      	ldr	r3, [sp, #4]
10068284:	6a21      	ldr	r1, [r4, #32]
10068286:	47b8      	blx	r7
10068288:	2800      	cmp	r0, #0
1006828a:	dc07      	bgt.n	1006829c <__sflush_r+0xfc>
1006828c:	89a2      	ldrh	r2, [r4, #12]
1006828e:	2340      	movs	r3, #64	@ 0x40
10068290:	2001      	movs	r0, #1
10068292:	4313      	orrs	r3, r2
10068294:	b21b      	sxth	r3, r3
10068296:	81a3      	strh	r3, [r4, #12]
10068298:	4240      	negs	r0, r0
1006829a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006829c:	9b01      	ldr	r3, [sp, #4]
1006829e:	1836      	adds	r6, r6, r0
100682a0:	1a1b      	subs	r3, r3, r0
100682a2:	9301      	str	r3, [sp, #4]
100682a4:	e7e6      	b.n	10068274 <__sflush_r+0xd4>
100682a6:	46c0      	nop			@ (mov r8, r8)
100682a8:	20400001 	.word	0x20400001

100682ac <_fflush_r>:
100682ac:	690b      	ldr	r3, [r1, #16]
100682ae:	b570      	push	{r4, r5, r6, lr}
100682b0:	0005      	movs	r5, r0
100682b2:	000c      	movs	r4, r1
100682b4:	2b00      	cmp	r3, #0
100682b6:	d102      	bne.n	100682be <_fflush_r+0x12>
100682b8:	2500      	movs	r5, #0
100682ba:	0028      	movs	r0, r5
100682bc:	bd70      	pop	{r4, r5, r6, pc}
100682be:	2800      	cmp	r0, #0
100682c0:	d004      	beq.n	100682cc <_fflush_r+0x20>
100682c2:	6a03      	ldr	r3, [r0, #32]
100682c4:	2b00      	cmp	r3, #0
100682c6:	d101      	bne.n	100682cc <_fflush_r+0x20>
100682c8:	f7ff fa18 	bl	100676fc <__sinit>
100682cc:	220c      	movs	r2, #12
100682ce:	5ea3      	ldrsh	r3, [r4, r2]
100682d0:	2b00      	cmp	r3, #0
100682d2:	d0f1      	beq.n	100682b8 <_fflush_r+0xc>
100682d4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
100682d6:	07d2      	lsls	r2, r2, #31
100682d8:	d404      	bmi.n	100682e4 <_fflush_r+0x38>
100682da:	059b      	lsls	r3, r3, #22
100682dc:	d402      	bmi.n	100682e4 <_fflush_r+0x38>
100682de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100682e0:	f7ff fc2b 	bl	10067b3a <__retarget_lock_acquire_recursive>
100682e4:	0028      	movs	r0, r5
100682e6:	0021      	movs	r1, r4
100682e8:	f7ff ff5a 	bl	100681a0 <__sflush_r>
100682ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100682ee:	0005      	movs	r5, r0
100682f0:	07db      	lsls	r3, r3, #31
100682f2:	d4e2      	bmi.n	100682ba <_fflush_r+0xe>
100682f4:	89a3      	ldrh	r3, [r4, #12]
100682f6:	059b      	lsls	r3, r3, #22
100682f8:	d4df      	bmi.n	100682ba <_fflush_r+0xe>
100682fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100682fc:	f7ff fc1e 	bl	10067b3c <__retarget_lock_release_recursive>
10068300:	e7db      	b.n	100682ba <_fflush_r+0xe>
	...

10068304 <__swhatbuf_r>:
10068304:	b570      	push	{r4, r5, r6, lr}
10068306:	000e      	movs	r6, r1
10068308:	001d      	movs	r5, r3
1006830a:	230e      	movs	r3, #14
1006830c:	5ec9      	ldrsh	r1, [r1, r3]
1006830e:	0014      	movs	r4, r2
10068310:	b096      	sub	sp, #88	@ 0x58
10068312:	2900      	cmp	r1, #0
10068314:	da0c      	bge.n	10068330 <__swhatbuf_r+0x2c>
10068316:	89b2      	ldrh	r2, [r6, #12]
10068318:	2380      	movs	r3, #128	@ 0x80
1006831a:	0011      	movs	r1, r2
1006831c:	4019      	ands	r1, r3
1006831e:	421a      	tst	r2, r3
10068320:	d114      	bne.n	1006834c <__swhatbuf_r+0x48>
10068322:	2380      	movs	r3, #128	@ 0x80
10068324:	00db      	lsls	r3, r3, #3
10068326:	2000      	movs	r0, #0
10068328:	6029      	str	r1, [r5, #0]
1006832a:	6023      	str	r3, [r4, #0]
1006832c:	b016      	add	sp, #88	@ 0x58
1006832e:	bd70      	pop	{r4, r5, r6, pc}
10068330:	466a      	mov	r2, sp
10068332:	f000 f865 	bl	10068400 <_fstat_r>
10068336:	2800      	cmp	r0, #0
10068338:	dbed      	blt.n	10068316 <__swhatbuf_r+0x12>
1006833a:	23f0      	movs	r3, #240	@ 0xf0
1006833c:	9901      	ldr	r1, [sp, #4]
1006833e:	021b      	lsls	r3, r3, #8
10068340:	4019      	ands	r1, r3
10068342:	4b04      	ldr	r3, [pc, #16]	@ (10068354 <__swhatbuf_r+0x50>)
10068344:	18c9      	adds	r1, r1, r3
10068346:	424b      	negs	r3, r1
10068348:	4159      	adcs	r1, r3
1006834a:	e7ea      	b.n	10068322 <__swhatbuf_r+0x1e>
1006834c:	2100      	movs	r1, #0
1006834e:	2340      	movs	r3, #64	@ 0x40
10068350:	e7e9      	b.n	10068326 <__swhatbuf_r+0x22>
10068352:	46c0      	nop			@ (mov r8, r8)
10068354:	ffffe000 	.word	0xffffe000

10068358 <__smakebuf_r>:
10068358:	b5f0      	push	{r4, r5, r6, r7, lr}
1006835a:	2602      	movs	r6, #2
1006835c:	898b      	ldrh	r3, [r1, #12]
1006835e:	0005      	movs	r5, r0
10068360:	000c      	movs	r4, r1
10068362:	b085      	sub	sp, #20
10068364:	4233      	tst	r3, r6
10068366:	d007      	beq.n	10068378 <__smakebuf_r+0x20>
10068368:	0023      	movs	r3, r4
1006836a:	3347      	adds	r3, #71	@ 0x47
1006836c:	6023      	str	r3, [r4, #0]
1006836e:	6123      	str	r3, [r4, #16]
10068370:	2301      	movs	r3, #1
10068372:	6163      	str	r3, [r4, #20]
10068374:	b005      	add	sp, #20
10068376:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068378:	ab03      	add	r3, sp, #12
1006837a:	aa02      	add	r2, sp, #8
1006837c:	f7ff ffc2 	bl	10068304 <__swhatbuf_r>
10068380:	9f02      	ldr	r7, [sp, #8]
10068382:	9001      	str	r0, [sp, #4]
10068384:	0039      	movs	r1, r7
10068386:	0028      	movs	r0, r5
10068388:	f7ff f898 	bl	100674bc <_malloc_r>
1006838c:	2800      	cmp	r0, #0
1006838e:	d108      	bne.n	100683a2 <__smakebuf_r+0x4a>
10068390:	220c      	movs	r2, #12
10068392:	5ea3      	ldrsh	r3, [r4, r2]
10068394:	059a      	lsls	r2, r3, #22
10068396:	d4ed      	bmi.n	10068374 <__smakebuf_r+0x1c>
10068398:	2203      	movs	r2, #3
1006839a:	4393      	bics	r3, r2
1006839c:	431e      	orrs	r6, r3
1006839e:	81a6      	strh	r6, [r4, #12]
100683a0:	e7e2      	b.n	10068368 <__smakebuf_r+0x10>
100683a2:	2380      	movs	r3, #128	@ 0x80
100683a4:	89a2      	ldrh	r2, [r4, #12]
100683a6:	6020      	str	r0, [r4, #0]
100683a8:	4313      	orrs	r3, r2
100683aa:	81a3      	strh	r3, [r4, #12]
100683ac:	9b03      	ldr	r3, [sp, #12]
100683ae:	6120      	str	r0, [r4, #16]
100683b0:	6167      	str	r7, [r4, #20]
100683b2:	2b00      	cmp	r3, #0
100683b4:	d00c      	beq.n	100683d0 <__smakebuf_r+0x78>
100683b6:	0028      	movs	r0, r5
100683b8:	230e      	movs	r3, #14
100683ba:	5ee1      	ldrsh	r1, [r4, r3]
100683bc:	f000 f832 	bl	10068424 <_isatty_r>
100683c0:	2800      	cmp	r0, #0
100683c2:	d005      	beq.n	100683d0 <__smakebuf_r+0x78>
100683c4:	2303      	movs	r3, #3
100683c6:	89a2      	ldrh	r2, [r4, #12]
100683c8:	439a      	bics	r2, r3
100683ca:	3b02      	subs	r3, #2
100683cc:	4313      	orrs	r3, r2
100683ce:	81a3      	strh	r3, [r4, #12]
100683d0:	89a3      	ldrh	r3, [r4, #12]
100683d2:	9a01      	ldr	r2, [sp, #4]
100683d4:	4313      	orrs	r3, r2
100683d6:	81a3      	strh	r3, [r4, #12]
100683d8:	e7cc      	b.n	10068374 <__smakebuf_r+0x1c>

100683da <memmove>:
100683da:	b510      	push	{r4, lr}
100683dc:	4288      	cmp	r0, r1
100683de:	d902      	bls.n	100683e6 <memmove+0xc>
100683e0:	188b      	adds	r3, r1, r2
100683e2:	4298      	cmp	r0, r3
100683e4:	d308      	bcc.n	100683f8 <memmove+0x1e>
100683e6:	2300      	movs	r3, #0
100683e8:	429a      	cmp	r2, r3
100683ea:	d007      	beq.n	100683fc <memmove+0x22>
100683ec:	5ccc      	ldrb	r4, [r1, r3]
100683ee:	54c4      	strb	r4, [r0, r3]
100683f0:	3301      	adds	r3, #1
100683f2:	e7f9      	b.n	100683e8 <memmove+0xe>
100683f4:	5c8b      	ldrb	r3, [r1, r2]
100683f6:	5483      	strb	r3, [r0, r2]
100683f8:	3a01      	subs	r2, #1
100683fa:	d2fb      	bcs.n	100683f4 <memmove+0x1a>
100683fc:	bd10      	pop	{r4, pc}
	...

10068400 <_fstat_r>:
10068400:	2300      	movs	r3, #0
10068402:	b570      	push	{r4, r5, r6, lr}
10068404:	4d06      	ldr	r5, [pc, #24]	@ (10068420 <_fstat_r+0x20>)
10068406:	0004      	movs	r4, r0
10068408:	0008      	movs	r0, r1
1006840a:	0011      	movs	r1, r2
1006840c:	602b      	str	r3, [r5, #0]
1006840e:	f7de feb4 	bl	1004717a <_fstat>
10068412:	1c43      	adds	r3, r0, #1
10068414:	d103      	bne.n	1006841e <_fstat_r+0x1e>
10068416:	682b      	ldr	r3, [r5, #0]
10068418:	2b00      	cmp	r3, #0
1006841a:	d000      	beq.n	1006841e <_fstat_r+0x1e>
1006841c:	6023      	str	r3, [r4, #0]
1006841e:	bd70      	pop	{r4, r5, r6, pc}
10068420:	2000260c 	.word	0x2000260c

10068424 <_isatty_r>:
10068424:	2300      	movs	r3, #0
10068426:	b570      	push	{r4, r5, r6, lr}
10068428:	4d06      	ldr	r5, [pc, #24]	@ (10068444 <_isatty_r+0x20>)
1006842a:	0004      	movs	r4, r0
1006842c:	0008      	movs	r0, r1
1006842e:	602b      	str	r3, [r5, #0]
10068430:	f7de feb1 	bl	10047196 <_isatty>
10068434:	1c43      	adds	r3, r0, #1
10068436:	d103      	bne.n	10068440 <_isatty_r+0x1c>
10068438:	682b      	ldr	r3, [r5, #0]
1006843a:	2b00      	cmp	r3, #0
1006843c:	d000      	beq.n	10068440 <_isatty_r+0x1c>
1006843e:	6023      	str	r3, [r4, #0]
10068440:	bd70      	pop	{r4, r5, r6, pc}
10068442:	46c0      	nop			@ (mov r8, r8)
10068444:	2000260c 	.word	0x2000260c

10068448 <memchr>:
10068448:	b2c9      	uxtb	r1, r1
1006844a:	1882      	adds	r2, r0, r2
1006844c:	4290      	cmp	r0, r2
1006844e:	d101      	bne.n	10068454 <memchr+0xc>
10068450:	2000      	movs	r0, #0
10068452:	4770      	bx	lr
10068454:	7803      	ldrb	r3, [r0, #0]
10068456:	428b      	cmp	r3, r1
10068458:	d0fb      	beq.n	10068452 <memchr+0xa>
1006845a:	3001      	adds	r0, #1
1006845c:	e7f6      	b.n	1006844c <memchr+0x4>

1006845e <_realloc_r>:
1006845e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10068460:	0006      	movs	r6, r0
10068462:	000c      	movs	r4, r1
10068464:	0015      	movs	r5, r2
10068466:	2900      	cmp	r1, #0
10068468:	d105      	bne.n	10068476 <_realloc_r+0x18>
1006846a:	0011      	movs	r1, r2
1006846c:	f7ff f826 	bl	100674bc <_malloc_r>
10068470:	0004      	movs	r4, r0
10068472:	0020      	movs	r0, r4
10068474:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10068476:	2a00      	cmp	r2, #0
10068478:	d103      	bne.n	10068482 <_realloc_r+0x24>
1006847a:	f7ff fb6d 	bl	10067b58 <_free_r>
1006847e:	002c      	movs	r4, r5
10068480:	e7f7      	b.n	10068472 <_realloc_r+0x14>
10068482:	f000 f81c 	bl	100684be <_malloc_usable_size_r>
10068486:	0007      	movs	r7, r0
10068488:	4285      	cmp	r5, r0
1006848a:	d802      	bhi.n	10068492 <_realloc_r+0x34>
1006848c:	0843      	lsrs	r3, r0, #1
1006848e:	42ab      	cmp	r3, r5
10068490:	d3ef      	bcc.n	10068472 <_realloc_r+0x14>
10068492:	0029      	movs	r1, r5
10068494:	0030      	movs	r0, r6
10068496:	f7ff f811 	bl	100674bc <_malloc_r>
1006849a:	9001      	str	r0, [sp, #4]
1006849c:	2800      	cmp	r0, #0
1006849e:	d101      	bne.n	100684a4 <_realloc_r+0x46>
100684a0:	9c01      	ldr	r4, [sp, #4]
100684a2:	e7e6      	b.n	10068472 <_realloc_r+0x14>
100684a4:	002a      	movs	r2, r5
100684a6:	42bd      	cmp	r5, r7
100684a8:	d900      	bls.n	100684ac <_realloc_r+0x4e>
100684aa:	003a      	movs	r2, r7
100684ac:	0021      	movs	r1, r4
100684ae:	9801      	ldr	r0, [sp, #4]
100684b0:	f7ff fb49 	bl	10067b46 <memcpy>
100684b4:	0021      	movs	r1, r4
100684b6:	0030      	movs	r0, r6
100684b8:	f7ff fb4e 	bl	10067b58 <_free_r>
100684bc:	e7f0      	b.n	100684a0 <_realloc_r+0x42>

100684be <_malloc_usable_size_r>:
100684be:	1f0b      	subs	r3, r1, #4
100684c0:	681b      	ldr	r3, [r3, #0]
100684c2:	1f18      	subs	r0, r3, #4
100684c4:	2b00      	cmp	r3, #0
100684c6:	da01      	bge.n	100684cc <_malloc_usable_size_r+0xe>
100684c8:	580b      	ldr	r3, [r1, r0]
100684ca:	18c0      	adds	r0, r0, r3
100684cc:	4770      	bx	lr
	...

100684d0 <AES_CMAC_Encrypt_Append>:
100684d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100684d2:	2500      	movs	r5, #0
100684d4:	b08a      	sub	sp, #40	@ 0x28
100684d6:	460e      	mov	r6, r1
100684d8:	4604      	mov	r4, r0
100684da:	2800      	cmp	r0, #0
100684dc:	d004      	beq.n	100684e8 <AES_CMAC_Encrypt_Append+0x18>
100684de:	2e00      	cmp	r6, #0
100684e0:	d106      	bne.n	100684f0 <AES_CMAC_Encrypt_Append+0x20>
100684e2:	980c      	ldr	r0, [sp, #48]	@ 0x30
100684e4:	2800      	cmp	r0, #0
100684e6:	dd03      	ble.n	100684f0 <AES_CMAC_Encrypt_Append+0x20>
100684e8:	2061      	movs	r0, #97	@ 0x61
100684ea:	0140      	lsls	r0, r0, #5
100684ec:	b00d      	add	sp, #52	@ 0x34
100684ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
100684f0:	980c      	ldr	r0, [sp, #48]	@ 0x30
100684f2:	2800      	cmp	r0, #0
100684f4:	db04      	blt.n	10068500 <AES_CMAC_Encrypt_Append+0x30>
100684f6:	2810      	cmp	r0, #16
100684f8:	da04      	bge.n	10068504 <AES_CMAC_Encrypt_Append+0x34>
100684fa:	7920      	ldrb	r0, [r4, #4]
100684fc:	0680      	lsls	r0, r0, #26
100684fe:	d401      	bmi.n	10068504 <AES_CMAC_Encrypt_Append+0x34>
10068500:	488c      	ldr	r0, [pc, #560]	@ (10068734 <AES_CMAC_Encrypt_Append+0x264>)
10068502:	e7f3      	b.n	100684ec <AES_CMAC_Encrypt_Append+0x1c>
10068504:	7920      	ldrb	r0, [r4, #4]
10068506:	0741      	lsls	r1, r0, #29
10068508:	d401      	bmi.n	1006850e <AES_CMAC_Encrypt_Append+0x3e>
1006850a:	0781      	lsls	r1, r0, #30
1006850c:	d502      	bpl.n	10068514 <AES_CMAC_Encrypt_Append+0x44>
1006850e:	4889      	ldr	r0, [pc, #548]	@ (10068734 <AES_CMAC_Encrypt_Append+0x264>)
10068510:	1c40      	adds	r0, r0, #1
10068512:	e7eb      	b.n	100684ec <AES_CMAC_Encrypt_Append+0x1c>
10068514:	2140      	movs	r1, #64	@ 0x40
10068516:	4308      	orrs	r0, r1
10068518:	7120      	strb	r0, [r4, #4]
1006851a:	4620      	mov	r0, r4
1006851c:	3014      	adds	r0, #20
1006851e:	9008      	str	r0, [sp, #32]
10068520:	e01c      	b.n	1006855c <AES_CMAC_Encrypt_Append+0x8c>
10068522:	2000      	movs	r0, #0
10068524:	0081      	lsls	r1, r0, #2
10068526:	194a      	adds	r2, r1, r5
10068528:	1992      	adds	r2, r2, r6
1006852a:	7853      	ldrb	r3, [r2, #1]
1006852c:	7817      	ldrb	r7, [r2, #0]
1006852e:	021b      	lsls	r3, r3, #8
10068530:	433b      	orrs	r3, r7
10068532:	7897      	ldrb	r7, [r2, #2]
10068534:	ba5b      	rev16	r3, r3
10068536:	041b      	lsls	r3, r3, #16
10068538:	023f      	lsls	r7, r7, #8
1006853a:	78d2      	ldrb	r2, [r2, #3]
1006853c:	433b      	orrs	r3, r7
1006853e:	4313      	orrs	r3, r2
10068540:	190a      	adds	r2, r1, r4
10068542:	6952      	ldr	r2, [r2, #20]
10068544:	1c40      	adds	r0, r0, #1
10068546:	4053      	eors	r3, r2
10068548:	aa04      	add	r2, sp, #16
1006854a:	5053      	str	r3, [r2, r1]
1006854c:	2804      	cmp	r0, #4
1006854e:	dbe9      	blt.n	10068524 <AES_CMAC_Encrypt_Append+0x54>
10068550:	68a2      	ldr	r2, [r4, #8]
10068552:	a804      	add	r0, sp, #16
10068554:	9908      	ldr	r1, [sp, #32]
10068556:	f7e6 fe3d 	bl	1004f1d4 <AES_128_HW_enc>
1006855a:	9d00      	ldr	r5, [sp, #0]
1006855c:	990c      	ldr	r1, [sp, #48]	@ 0x30
1006855e:	4628      	mov	r0, r5
10068560:	3010      	adds	r0, #16
10068562:	9000      	str	r0, [sp, #0]
10068564:	4288      	cmp	r0, r1
10068566:	dbdc      	blt.n	10068522 <AES_CMAC_Encrypt_Append+0x52>
10068568:	7920      	ldrb	r0, [r4, #4]
1006856a:	0680      	lsls	r0, r0, #26
1006856c:	d41e      	bmi.n	100685ac <AES_CMAC_Encrypt_Append+0xdc>
1006856e:	2900      	cmp	r1, #0
10068570:	dd1c      	ble.n	100685ac <AES_CMAC_Encrypt_Append+0xdc>
10068572:	2000      	movs	r0, #0
10068574:	0081      	lsls	r1, r0, #2
10068576:	194a      	adds	r2, r1, r5
10068578:	1992      	adds	r2, r2, r6
1006857a:	7853      	ldrb	r3, [r2, #1]
1006857c:	7817      	ldrb	r7, [r2, #0]
1006857e:	021b      	lsls	r3, r3, #8
10068580:	433b      	orrs	r3, r7
10068582:	7897      	ldrb	r7, [r2, #2]
10068584:	ba5b      	rev16	r3, r3
10068586:	041b      	lsls	r3, r3, #16
10068588:	023f      	lsls	r7, r7, #8
1006858a:	78d2      	ldrb	r2, [r2, #3]
1006858c:	433b      	orrs	r3, r7
1006858e:	4313      	orrs	r3, r2
10068590:	190a      	adds	r2, r1, r4
10068592:	6952      	ldr	r2, [r2, #20]
10068594:	1c40      	adds	r0, r0, #1
10068596:	4053      	eors	r3, r2
10068598:	aa04      	add	r2, sp, #16
1006859a:	5053      	str	r3, [r2, r1]
1006859c:	2804      	cmp	r0, #4
1006859e:	dbe9      	blt.n	10068574 <AES_CMAC_Encrypt_Append+0xa4>
100685a0:	68a2      	ldr	r2, [r4, #8]
100685a2:	a804      	add	r0, sp, #16
100685a4:	9908      	ldr	r1, [sp, #32]
100685a6:	f7e6 fe15 	bl	1004f1d4 <AES_128_HW_enc>
100685aa:	e0c0      	b.n	1006872e <AES_CMAC_Encrypt_Append+0x25e>
100685ac:	2000      	movs	r0, #0
100685ae:	9000      	str	r0, [sp, #0]
100685b0:	9001      	str	r0, [sp, #4]
100685b2:	9002      	str	r0, [sp, #8]
100685b4:	9003      	str	r0, [sp, #12]
100685b6:	4669      	mov	r1, sp
100685b8:	4608      	mov	r0, r1
100685ba:	68a2      	ldr	r2, [r4, #8]
100685bc:	f7e6 fe0a 	bl	1004f1d4 <AES_128_HW_enc>
100685c0:	9900      	ldr	r1, [sp, #0]
100685c2:	2287      	movs	r2, #135	@ 0x87
100685c4:	0fc8      	lsrs	r0, r1, #31
100685c6:	4350      	muls	r0, r2
100685c8:	9a01      	ldr	r2, [sp, #4]
100685ca:	0049      	lsls	r1, r1, #1
100685cc:	0fd2      	lsrs	r2, r2, #31
100685ce:	4311      	orrs	r1, r2
100685d0:	9100      	str	r1, [sp, #0]
100685d2:	9901      	ldr	r1, [sp, #4]
100685d4:	9a02      	ldr	r2, [sp, #8]
100685d6:	0049      	lsls	r1, r1, #1
100685d8:	0fd2      	lsrs	r2, r2, #31
100685da:	4311      	orrs	r1, r2
100685dc:	9101      	str	r1, [sp, #4]
100685de:	9902      	ldr	r1, [sp, #8]
100685e0:	9a03      	ldr	r2, [sp, #12]
100685e2:	0049      	lsls	r1, r1, #1
100685e4:	0fd2      	lsrs	r2, r2, #31
100685e6:	4311      	orrs	r1, r2
100685e8:	9102      	str	r1, [sp, #8]
100685ea:	9903      	ldr	r1, [sp, #12]
100685ec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
100685ee:	0049      	lsls	r1, r1, #1
100685f0:	4041      	eors	r1, r0
100685f2:	4628      	mov	r0, r5
100685f4:	3010      	adds	r0, #16
100685f6:	9103      	str	r1, [sp, #12]
100685f8:	4290      	cmp	r0, r2
100685fa:	d11a      	bne.n	10068632 <AES_CMAC_Encrypt_Append+0x162>
100685fc:	2000      	movs	r0, #0
100685fe:	0081      	lsls	r1, r0, #2
10068600:	194a      	adds	r2, r1, r5
10068602:	1993      	adds	r3, r2, r6
10068604:	785a      	ldrb	r2, [r3, #1]
10068606:	781f      	ldrb	r7, [r3, #0]
10068608:	0212      	lsls	r2, r2, #8
1006860a:	433a      	orrs	r2, r7
1006860c:	789f      	ldrb	r7, [r3, #2]
1006860e:	ba52      	rev16	r2, r2
10068610:	0412      	lsls	r2, r2, #16
10068612:	023f      	lsls	r7, r7, #8
10068614:	433a      	orrs	r2, r7
10068616:	78db      	ldrb	r3, [r3, #3]
10068618:	466f      	mov	r7, sp
1006861a:	431a      	orrs	r2, r3
1006861c:	190b      	adds	r3, r1, r4
1006861e:	695b      	ldr	r3, [r3, #20]
10068620:	587f      	ldr	r7, [r7, r1]
10068622:	1c40      	adds	r0, r0, #1
10068624:	407b      	eors	r3, r7
10068626:	405a      	eors	r2, r3
10068628:	ab04      	add	r3, sp, #16
1006862a:	505a      	str	r2, [r3, r1]
1006862c:	2804      	cmp	r0, #4
1006862e:	dbe6      	blt.n	100685fe <AES_CMAC_Encrypt_Append+0x12e>
10068630:	e074      	b.n	1006871c <AES_CMAC_Encrypt_Append+0x24c>
10068632:	9a00      	ldr	r2, [sp, #0]
10068634:	2387      	movs	r3, #135	@ 0x87
10068636:	0fd0      	lsrs	r0, r2, #31
10068638:	4358      	muls	r0, r3
1006863a:	9b01      	ldr	r3, [sp, #4]
1006863c:	0052      	lsls	r2, r2, #1
1006863e:	0fdb      	lsrs	r3, r3, #31
10068640:	431a      	orrs	r2, r3
10068642:	9200      	str	r2, [sp, #0]
10068644:	9a01      	ldr	r2, [sp, #4]
10068646:	9b02      	ldr	r3, [sp, #8]
10068648:	0052      	lsls	r2, r2, #1
1006864a:	0fdb      	lsrs	r3, r3, #31
1006864c:	431a      	orrs	r2, r3
1006864e:	9201      	str	r2, [sp, #4]
10068650:	9a02      	ldr	r2, [sp, #8]
10068652:	0fcb      	lsrs	r3, r1, #31
10068654:	0052      	lsls	r2, r2, #1
10068656:	431a      	orrs	r2, r3
10068658:	9202      	str	r2, [sp, #8]
1006865a:	004a      	lsls	r2, r1, #1
1006865c:	4042      	eors	r2, r0
1006865e:	9203      	str	r2, [sp, #12]
10068660:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10068662:	2000      	movs	r0, #0
10068664:	1b53      	subs	r3, r2, r5
10068666:	17da      	asrs	r2, r3, #31
10068668:	469c      	mov	ip, r3
1006866a:	0f92      	lsrs	r2, r2, #30
1006866c:	4462      	add	r2, ip
1006866e:	1092      	asrs	r2, r2, #2
10068670:	4696      	mov	lr, r2
10068672:	e016      	b.n	100686a2 <AES_CMAC_Encrypt_Append+0x1d2>
10068674:	0081      	lsls	r1, r0, #2
10068676:	194a      	adds	r2, r1, r5
10068678:	1993      	adds	r3, r2, r6
1006867a:	785a      	ldrb	r2, [r3, #1]
1006867c:	781f      	ldrb	r7, [r3, #0]
1006867e:	0212      	lsls	r2, r2, #8
10068680:	433a      	orrs	r2, r7
10068682:	789f      	ldrb	r7, [r3, #2]
10068684:	ba52      	rev16	r2, r2
10068686:	0412      	lsls	r2, r2, #16
10068688:	023f      	lsls	r7, r7, #8
1006868a:	433a      	orrs	r2, r7
1006868c:	78db      	ldrb	r3, [r3, #3]
1006868e:	466f      	mov	r7, sp
10068690:	431a      	orrs	r2, r3
10068692:	190b      	adds	r3, r1, r4
10068694:	695b      	ldr	r3, [r3, #20]
10068696:	587f      	ldr	r7, [r7, r1]
10068698:	407b      	eors	r3, r7
1006869a:	405a      	eors	r2, r3
1006869c:	ab04      	add	r3, sp, #16
1006869e:	505a      	str	r2, [r3, r1]
100686a0:	1c40      	adds	r0, r0, #1
100686a2:	4586      	cmp	lr, r0
100686a4:	dce6      	bgt.n	10068674 <AES_CMAC_Encrypt_Append+0x1a4>
100686a6:	0081      	lsls	r1, r0, #2
100686a8:	190a      	adds	r2, r1, r4
100686aa:	466b      	mov	r3, sp
100686ac:	6952      	ldr	r2, [r2, #20]
100686ae:	585b      	ldr	r3, [r3, r1]
100686b0:	4667      	mov	r7, ip
100686b2:	405a      	eors	r2, r3
100686b4:	ab04      	add	r3, sp, #16
100686b6:	505a      	str	r2, [r3, r1]
100686b8:	1a7f      	subs	r7, r7, r1
100686ba:	2200      	movs	r2, #0
100686bc:	194b      	adds	r3, r1, r5
100686be:	46bc      	mov	ip, r7
100686c0:	469e      	mov	lr, r3
100686c2:	e00b      	b.n	100686dc <AES_CMAC_Encrypt_Append+0x20c>
100686c4:	4673      	mov	r3, lr
100686c6:	189b      	adds	r3, r3, r2
100686c8:	5cf3      	ldrb	r3, [r6, r3]
100686ca:	00d7      	lsls	r7, r2, #3
100686cc:	2518      	movs	r5, #24
100686ce:	1bed      	subs	r5, r5, r7
100686d0:	40ab      	lsls	r3, r5
100686d2:	ad04      	add	r5, sp, #16
100686d4:	586f      	ldr	r7, [r5, r1]
100686d6:	407b      	eors	r3, r7
100686d8:	506b      	str	r3, [r5, r1]
100686da:	1c52      	adds	r2, r2, #1
100686dc:	4594      	cmp	ip, r2
100686de:	dcf1      	bgt.n	100686c4 <AES_CMAC_Encrypt_Append+0x1f4>
100686e0:	2a00      	cmp	r2, #0
100686e2:	d009      	beq.n	100686f8 <AES_CMAC_Encrypt_Append+0x228>
100686e4:	00d6      	lsls	r6, r2, #3
100686e6:	2218      	movs	r2, #24
100686e8:	ab04      	add	r3, sp, #16
100686ea:	1b96      	subs	r6, r2, r6
100686ec:	585d      	ldr	r5, [r3, r1]
100686ee:	2280      	movs	r2, #128	@ 0x80
100686f0:	40b2      	lsls	r2, r6
100686f2:	4055      	eors	r5, r2
100686f4:	505d      	str	r5, [r3, r1]
100686f6:	e005      	b.n	10068704 <AES_CMAC_Encrypt_Append+0x234>
100686f8:	aa04      	add	r2, sp, #16
100686fa:	5853      	ldr	r3, [r2, r1]
100686fc:	2501      	movs	r5, #1
100686fe:	07ed      	lsls	r5, r5, #31
10068700:	406b      	eors	r3, r5
10068702:	5053      	str	r3, [r2, r1]
10068704:	ab04      	add	r3, sp, #16
10068706:	466a      	mov	r2, sp
10068708:	e005      	b.n	10068716 <AES_CMAC_Encrypt_Append+0x246>
1006870a:	0081      	lsls	r1, r0, #2
1006870c:	190d      	adds	r5, r1, r4
1006870e:	696d      	ldr	r5, [r5, #20]
10068710:	5856      	ldr	r6, [r2, r1]
10068712:	4075      	eors	r5, r6
10068714:	505d      	str	r5, [r3, r1]
10068716:	1c40      	adds	r0, r0, #1
10068718:	2804      	cmp	r0, #4
1006871a:	dbf6      	blt.n	1006870a <AES_CMAC_Encrypt_Append+0x23a>
1006871c:	68a2      	ldr	r2, [r4, #8]
1006871e:	4618      	mov	r0, r3
10068720:	9908      	ldr	r1, [sp, #32]
10068722:	f7e6 fd57 	bl	1004f1d4 <AES_128_HW_enc>
10068726:	7920      	ldrb	r0, [r4, #4]
10068728:	2104      	movs	r1, #4
1006872a:	4308      	orrs	r0, r1
1006872c:	7120      	strb	r0, [r4, #4]
1006872e:	2000      	movs	r0, #0
10068730:	e6dc      	b.n	100684ec <AES_CMAC_Encrypt_Append+0x1c>
10068732:	0000      	.short	0x0000
10068734:	00000c1d 	.word	0x00000c1d

10068738 <AES_CMAC_Encrypt_Finish>:
10068738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006873a:	4616      	mov	r6, r2
1006873c:	460f      	mov	r7, r1
1006873e:	0004      	movs	r4, r0
10068740:	d009      	beq.n	10068756 <AES_CMAC_Encrypt_Finish+0x1e>
10068742:	2e00      	cmp	r6, #0
10068744:	d007      	beq.n	10068756 <AES_CMAC_Encrypt_Finish+0x1e>
10068746:	4625      	mov	r5, r4
10068748:	3580      	adds	r5, #128	@ 0x80
1006874a:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
1006874c:	1e40      	subs	r0, r0, #1
1006874e:	2810      	cmp	r0, #16
10068750:	d304      	bcc.n	1006875c <AES_CMAC_Encrypt_Finish+0x24>
10068752:	4813      	ldr	r0, [pc, #76]	@ (100687a0 <AES_CMAC_Encrypt_Finish+0x68>)
10068754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10068756:	2061      	movs	r0, #97	@ 0x61
10068758:	0140      	lsls	r0, r0, #5
1006875a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006875c:	7920      	ldrb	r0, [r4, #4]
1006875e:	0640      	lsls	r0, r0, #25
10068760:	d404      	bmi.n	1006876c <AES_CMAC_Encrypt_Finish+0x34>
10068762:	2200      	movs	r2, #0
10068764:	4611      	mov	r1, r2
10068766:	4620      	mov	r0, r4
10068768:	f7ff feb2 	bl	100684d0 <AES_CMAC_Encrypt_Append>
1006876c:	7920      	ldrb	r0, [r4, #4]
1006876e:	2102      	movs	r1, #2
10068770:	4308      	orrs	r0, r1
10068772:	7120      	strb	r0, [r4, #4]
10068774:	2000      	movs	r0, #0
10068776:	2118      	movs	r1, #24
10068778:	e00c      	b.n	10068794 <AES_CMAC_Encrypt_Finish+0x5c>
1006877a:	17c2      	asrs	r2, r0, #31
1006877c:	0f92      	lsrs	r2, r2, #30
1006877e:	1812      	adds	r2, r2, r0
10068780:	0892      	lsrs	r2, r2, #2
10068782:	0092      	lsls	r2, r2, #2
10068784:	1912      	adds	r2, r2, r4
10068786:	0783      	lsls	r3, r0, #30
10068788:	6952      	ldr	r2, [r2, #20]
1006878a:	0edb      	lsrs	r3, r3, #27
1006878c:	1acb      	subs	r3, r1, r3
1006878e:	40da      	lsrs	r2, r3
10068790:	543a      	strb	r2, [r7, r0]
10068792:	1c40      	adds	r0, r0, #1
10068794:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
10068796:	4282      	cmp	r2, r0
10068798:	dcef      	bgt.n	1006877a <AES_CMAC_Encrypt_Finish+0x42>
1006879a:	2000      	movs	r0, #0
1006879c:	6032      	str	r2, [r6, #0]
1006879e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100687a0:	00000c1f 	.word	0x00000c1f

100687a4 <AES_CMAC_Encrypt_Init>:
100687a4:	b510      	push	{r4, lr}
100687a6:	0004      	movs	r4, r0
100687a8:	d007      	beq.n	100687ba <AES_CMAC_Encrypt_Init+0x16>
100687aa:	2302      	movs	r3, #2
100687ac:	2200      	movs	r2, #0
100687ae:	68a1      	ldr	r1, [r4, #8]
100687b0:	f000 f81a 	bl	100687e8 <AESstdInitEnc>
100687b4:	0001      	movs	r1, r0
100687b6:	d003      	beq.n	100687c0 <AES_CMAC_Encrypt_Init+0x1c>
100687b8:	e00c      	b.n	100687d4 <AES_CMAC_Encrypt_Init+0x30>
100687ba:	2061      	movs	r0, #97	@ 0x61
100687bc:	0140      	lsls	r0, r0, #5
100687be:	bd10      	pop	{r4, pc}
100687c0:	2000      	movs	r0, #0
100687c2:	2210      	movs	r2, #16
100687c4:	6122      	str	r2, [r4, #16]
100687c6:	4602      	mov	r2, r0
100687c8:	0083      	lsls	r3, r0, #2
100687ca:	191b      	adds	r3, r3, r4
100687cc:	1c40      	adds	r0, r0, #1
100687ce:	615a      	str	r2, [r3, #20]
100687d0:	2804      	cmp	r0, #4
100687d2:	dbf9      	blt.n	100687c8 <AES_CMAC_Encrypt_Init+0x24>
100687d4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
100687d6:	2810      	cmp	r0, #16
100687d8:	d001      	beq.n	100687de <AES_CMAC_Encrypt_Init+0x3a>
100687da:	4802      	ldr	r0, [pc, #8]	@ (100687e4 <AES_CMAC_Encrypt_Init+0x40>)
100687dc:	bd10      	pop	{r4, pc}
100687de:	4608      	mov	r0, r1
100687e0:	bd10      	pop	{r4, pc}
100687e2:	0000      	.short	0x0000
100687e4:	00000c1d 	.word	0x00000c1d

100687e8 <AESstdInitEnc>:
100687e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100687ea:	2800      	cmp	r0, #0
100687ec:	d007      	beq.n	100687fe <AESstdInitEnc+0x16>
100687ee:	2900      	cmp	r1, #0
100687f0:	d005      	beq.n	100687fe <AESstdInitEnc+0x16>
100687f2:	075b      	lsls	r3, r3, #29
100687f4:	0f9c      	lsrs	r4, r3, #30
100687f6:	2a00      	cmp	r2, #0
100687f8:	d104      	bne.n	10068804 <AESstdInitEnc+0x1c>
100687fa:	2c01      	cmp	r4, #1
100687fc:	d002      	beq.n	10068804 <AESstdInitEnc+0x1c>
100687fe:	2061      	movs	r0, #97	@ 0x61
10068800:	0140      	lsls	r0, r0, #5
10068802:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068804:	6a43      	ldr	r3, [r0, #36]	@ 0x24
10068806:	2b10      	cmp	r3, #16
10068808:	d003      	beq.n	10068812 <AESstdInitEnc+0x2a>
1006880a:	2b18      	cmp	r3, #24
1006880c:	d001      	beq.n	10068812 <AESstdInitEnc+0x2a>
1006880e:	2b20      	cmp	r3, #32
10068810:	d105      	bne.n	1006881e <AESstdInitEnc+0x36>
10068812:	2c01      	cmp	r4, #1
10068814:	d005      	beq.n	10068822 <AESstdInitEnc+0x3a>
10068816:	6905      	ldr	r5, [r0, #16]
10068818:	1e6d      	subs	r5, r5, #1
1006881a:	2d10      	cmp	r5, #16
1006881c:	d301      	bcc.n	10068822 <AESstdInitEnc+0x3a>
1006881e:	481a      	ldr	r0, [pc, #104]	@ (10068888 <AESstdInitEnc+0xa0>)
10068820:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068822:	2b10      	cmp	r3, #16
10068824:	d002      	beq.n	1006882c <AESstdInitEnc+0x44>
10068826:	4818      	ldr	r0, [pc, #96]	@ (10068888 <AESstdInitEnc+0xa0>)
10068828:	1e80      	subs	r0, r0, #2
1006882a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006882c:	60c2      	str	r2, [r0, #12]
1006882e:	7903      	ldrb	r3, [r0, #4]
10068830:	25f9      	movs	r5, #249	@ 0xf9
10068832:	402b      	ands	r3, r5
10068834:	7103      	strb	r3, [r0, #4]
10068836:	2c01      	cmp	r4, #1
10068838:	d020      	beq.n	1006887c <AESstdInitEnc+0x94>
1006883a:	2300      	movs	r3, #0
1006883c:	461c      	mov	r4, r3
1006883e:	009d      	lsls	r5, r3, #2
10068840:	182d      	adds	r5, r5, r0
10068842:	1c5b      	adds	r3, r3, #1
10068844:	616c      	str	r4, [r5, #20]
10068846:	2b04      	cmp	r3, #4
10068848:	dbf9      	blt.n	1006883e <AESstdInitEnc+0x56>
1006884a:	2300      	movs	r3, #0
1006884c:	e013      	b.n	10068876 <AESstdInitEnc+0x8e>
1006884e:	17dc      	asrs	r4, r3, #31
10068850:	0fa4      	lsrs	r4, r4, #30
10068852:	18e4      	adds	r4, r4, r3
10068854:	08a4      	lsrs	r4, r4, #2
10068856:	00a4      	lsls	r4, r4, #2
10068858:	1825      	adds	r5, r4, r0
1006885a:	462e      	mov	r6, r5
1006885c:	3614      	adds	r6, #20
1006885e:	46b4      	mov	ip, r6
10068860:	1b1c      	subs	r4, r3, r4
10068862:	5cd6      	ldrb	r6, [r2, r3]
10068864:	00e4      	lsls	r4, r4, #3
10068866:	2718      	movs	r7, #24
10068868:	696d      	ldr	r5, [r5, #20]
1006886a:	1b3c      	subs	r4, r7, r4
1006886c:	40a6      	lsls	r6, r4
1006886e:	4335      	orrs	r5, r6
10068870:	4666      	mov	r6, ip
10068872:	1c5b      	adds	r3, r3, #1
10068874:	6035      	str	r5, [r6, #0]
10068876:	6904      	ldr	r4, [r0, #16]
10068878:	429c      	cmp	r4, r3
1006887a:	dce8      	bgt.n	1006884e <AESstdInitEnc+0x66>
1006887c:	7902      	ldrb	r2, [r0, #4]
1006887e:	07d2      	lsls	r2, r2, #31
10068880:	d100      	bne.n	10068884 <AESstdInitEnc+0x9c>
10068882:	6081      	str	r1, [r0, #8]
10068884:	2000      	movs	r0, #0
10068886:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068888:	00000c1f 	.word	0x00000c1f

Disassembly of section .init:

1006888c <_init>:
1006888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006888e:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

10068890 <_fini>:
10068890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10068892:	46c0      	nop			@ (mov r8, r8)
