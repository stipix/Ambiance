
WildlifeSource.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003620  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  100436e0  100436e0  000046e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  100436e4  100436e4  000046e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000000ec  100436e8  100436e8  000046e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  100437d4  100437d4  000047d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000009c  200002bc  100437dc  000052bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  00006004  2**2
                  ALLOC
  8 .bss.blueRAM  00000000  200000c0  200000c0  00000000  2**0
                  ALLOC
  9 .bss          000001fc  200000c0  200000c0  00006004  2**2
                  ALLOC
 10 .noinit       00000000  20000358  10043878  00000000  2**0
                  ALLOC
 11 .ota_region_end 00000000  10043878  10043878  00005358  2**0
                  CONTENTS
 12 .heap         00000000  20000358  20000358  00005358  2**0
                  CONTENTS
 13 .stack        00000c00  20005400  20005400  00005400  2**0
                  ALLOC
 14 .rom_info     00000000  10000000  10000000  00005358  2**0
                  CONTENTS
 15 .ARM.attributes 00000028  00000000  00000000  00005358  2**0
                  CONTENTS, READONLY
 16 .debug_info   0000a224  00000000  00000000  00005380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00001bc1  00000000  00000000  0000f5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000009b8  00000000  00000000  00011168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000761  00000000  00000000  00011b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00018d68  00000000  00000000  00012281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0000b348  00000000  00000000  0002afe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000a2c82  00000000  00000000  00036331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  000d8fb3  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000028e0  00000000  00000000  000d8ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000007c  00000000  00000000  000db8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <__gnu_thumb1_case_shi>:
100400c0:	b403      	push	{r0, r1}
100400c2:	4671      	mov	r1, lr
100400c4:	0849      	lsrs	r1, r1, #1
100400c6:	0040      	lsls	r0, r0, #1
100400c8:	0049      	lsls	r1, r1, #1
100400ca:	5e09      	ldrsh	r1, [r1, r0]
100400cc:	0049      	lsls	r1, r1, #1
100400ce:	448e      	add	lr, r1
100400d0:	bc03      	pop	{r0, r1}
100400d2:	4770      	bx	lr

100400d4 <__udivsi3>:
100400d4:	2200      	movs	r2, #0
100400d6:	0843      	lsrs	r3, r0, #1
100400d8:	428b      	cmp	r3, r1
100400da:	d374      	bcc.n	100401c6 <__udivsi3+0xf2>
100400dc:	0903      	lsrs	r3, r0, #4
100400de:	428b      	cmp	r3, r1
100400e0:	d35f      	bcc.n	100401a2 <__udivsi3+0xce>
100400e2:	0a03      	lsrs	r3, r0, #8
100400e4:	428b      	cmp	r3, r1
100400e6:	d344      	bcc.n	10040172 <__udivsi3+0x9e>
100400e8:	0b03      	lsrs	r3, r0, #12
100400ea:	428b      	cmp	r3, r1
100400ec:	d328      	bcc.n	10040140 <__udivsi3+0x6c>
100400ee:	0c03      	lsrs	r3, r0, #16
100400f0:	428b      	cmp	r3, r1
100400f2:	d30d      	bcc.n	10040110 <__udivsi3+0x3c>
100400f4:	22ff      	movs	r2, #255	@ 0xff
100400f6:	0209      	lsls	r1, r1, #8
100400f8:	ba12      	rev	r2, r2
100400fa:	0c03      	lsrs	r3, r0, #16
100400fc:	428b      	cmp	r3, r1
100400fe:	d302      	bcc.n	10040106 <__udivsi3+0x32>
10040100:	1212      	asrs	r2, r2, #8
10040102:	0209      	lsls	r1, r1, #8
10040104:	d065      	beq.n	100401d2 <__udivsi3+0xfe>
10040106:	0b03      	lsrs	r3, r0, #12
10040108:	428b      	cmp	r3, r1
1004010a:	d319      	bcc.n	10040140 <__udivsi3+0x6c>
1004010c:	e000      	b.n	10040110 <__udivsi3+0x3c>
1004010e:	0a09      	lsrs	r1, r1, #8
10040110:	0bc3      	lsrs	r3, r0, #15
10040112:	428b      	cmp	r3, r1
10040114:	d301      	bcc.n	1004011a <__udivsi3+0x46>
10040116:	03cb      	lsls	r3, r1, #15
10040118:	1ac0      	subs	r0, r0, r3
1004011a:	4152      	adcs	r2, r2
1004011c:	0b83      	lsrs	r3, r0, #14
1004011e:	428b      	cmp	r3, r1
10040120:	d301      	bcc.n	10040126 <__udivsi3+0x52>
10040122:	038b      	lsls	r3, r1, #14
10040124:	1ac0      	subs	r0, r0, r3
10040126:	4152      	adcs	r2, r2
10040128:	0b43      	lsrs	r3, r0, #13
1004012a:	428b      	cmp	r3, r1
1004012c:	d301      	bcc.n	10040132 <__udivsi3+0x5e>
1004012e:	034b      	lsls	r3, r1, #13
10040130:	1ac0      	subs	r0, r0, r3
10040132:	4152      	adcs	r2, r2
10040134:	0b03      	lsrs	r3, r0, #12
10040136:	428b      	cmp	r3, r1
10040138:	d301      	bcc.n	1004013e <__udivsi3+0x6a>
1004013a:	030b      	lsls	r3, r1, #12
1004013c:	1ac0      	subs	r0, r0, r3
1004013e:	4152      	adcs	r2, r2
10040140:	0ac3      	lsrs	r3, r0, #11
10040142:	428b      	cmp	r3, r1
10040144:	d301      	bcc.n	1004014a <__udivsi3+0x76>
10040146:	02cb      	lsls	r3, r1, #11
10040148:	1ac0      	subs	r0, r0, r3
1004014a:	4152      	adcs	r2, r2
1004014c:	0a83      	lsrs	r3, r0, #10
1004014e:	428b      	cmp	r3, r1
10040150:	d301      	bcc.n	10040156 <__udivsi3+0x82>
10040152:	028b      	lsls	r3, r1, #10
10040154:	1ac0      	subs	r0, r0, r3
10040156:	4152      	adcs	r2, r2
10040158:	0a43      	lsrs	r3, r0, #9
1004015a:	428b      	cmp	r3, r1
1004015c:	d301      	bcc.n	10040162 <__udivsi3+0x8e>
1004015e:	024b      	lsls	r3, r1, #9
10040160:	1ac0      	subs	r0, r0, r3
10040162:	4152      	adcs	r2, r2
10040164:	0a03      	lsrs	r3, r0, #8
10040166:	428b      	cmp	r3, r1
10040168:	d301      	bcc.n	1004016e <__udivsi3+0x9a>
1004016a:	020b      	lsls	r3, r1, #8
1004016c:	1ac0      	subs	r0, r0, r3
1004016e:	4152      	adcs	r2, r2
10040170:	d2cd      	bcs.n	1004010e <__udivsi3+0x3a>
10040172:	09c3      	lsrs	r3, r0, #7
10040174:	428b      	cmp	r3, r1
10040176:	d301      	bcc.n	1004017c <__udivsi3+0xa8>
10040178:	01cb      	lsls	r3, r1, #7
1004017a:	1ac0      	subs	r0, r0, r3
1004017c:	4152      	adcs	r2, r2
1004017e:	0983      	lsrs	r3, r0, #6
10040180:	428b      	cmp	r3, r1
10040182:	d301      	bcc.n	10040188 <__udivsi3+0xb4>
10040184:	018b      	lsls	r3, r1, #6
10040186:	1ac0      	subs	r0, r0, r3
10040188:	4152      	adcs	r2, r2
1004018a:	0943      	lsrs	r3, r0, #5
1004018c:	428b      	cmp	r3, r1
1004018e:	d301      	bcc.n	10040194 <__udivsi3+0xc0>
10040190:	014b      	lsls	r3, r1, #5
10040192:	1ac0      	subs	r0, r0, r3
10040194:	4152      	adcs	r2, r2
10040196:	0903      	lsrs	r3, r0, #4
10040198:	428b      	cmp	r3, r1
1004019a:	d301      	bcc.n	100401a0 <__udivsi3+0xcc>
1004019c:	010b      	lsls	r3, r1, #4
1004019e:	1ac0      	subs	r0, r0, r3
100401a0:	4152      	adcs	r2, r2
100401a2:	08c3      	lsrs	r3, r0, #3
100401a4:	428b      	cmp	r3, r1
100401a6:	d301      	bcc.n	100401ac <__udivsi3+0xd8>
100401a8:	00cb      	lsls	r3, r1, #3
100401aa:	1ac0      	subs	r0, r0, r3
100401ac:	4152      	adcs	r2, r2
100401ae:	0883      	lsrs	r3, r0, #2
100401b0:	428b      	cmp	r3, r1
100401b2:	d301      	bcc.n	100401b8 <__udivsi3+0xe4>
100401b4:	008b      	lsls	r3, r1, #2
100401b6:	1ac0      	subs	r0, r0, r3
100401b8:	4152      	adcs	r2, r2
100401ba:	0843      	lsrs	r3, r0, #1
100401bc:	428b      	cmp	r3, r1
100401be:	d301      	bcc.n	100401c4 <__udivsi3+0xf0>
100401c0:	004b      	lsls	r3, r1, #1
100401c2:	1ac0      	subs	r0, r0, r3
100401c4:	4152      	adcs	r2, r2
100401c6:	1a41      	subs	r1, r0, r1
100401c8:	d200      	bcs.n	100401cc <__udivsi3+0xf8>
100401ca:	4601      	mov	r1, r0
100401cc:	4152      	adcs	r2, r2
100401ce:	4610      	mov	r0, r2
100401d0:	4770      	bx	lr
100401d2:	e7ff      	b.n	100401d4 <__udivsi3+0x100>
100401d4:	b501      	push	{r0, lr}
100401d6:	2000      	movs	r0, #0
100401d8:	f000 f806 	bl	100401e8 <__aeabi_idiv0>
100401dc:	bd02      	pop	{r1, pc}
100401de:	46c0      	nop			@ (mov r8, r8)

100401e0 <__aeabi_uidivmod>:
100401e0:	2900      	cmp	r1, #0
100401e2:	d0f7      	beq.n	100401d4 <__udivsi3+0x100>
100401e4:	e776      	b.n	100400d4 <__udivsi3>
100401e6:	4770      	bx	lr

100401e8 <__aeabi_idiv0>:
100401e8:	4770      	bx	lr
100401ea:	46c0      	nop			@ (mov r8, r8)

100401ec <__aeabi_uldivmod>:
100401ec:	2b00      	cmp	r3, #0
100401ee:	d111      	bne.n	10040214 <__aeabi_uldivmod+0x28>
100401f0:	2a00      	cmp	r2, #0
100401f2:	d10f      	bne.n	10040214 <__aeabi_uldivmod+0x28>
100401f4:	2900      	cmp	r1, #0
100401f6:	d100      	bne.n	100401fa <__aeabi_uldivmod+0xe>
100401f8:	2800      	cmp	r0, #0
100401fa:	d002      	beq.n	10040202 <__aeabi_uldivmod+0x16>
100401fc:	2100      	movs	r1, #0
100401fe:	43c9      	mvns	r1, r1
10040200:	0008      	movs	r0, r1
10040202:	b407      	push	{r0, r1, r2}
10040204:	4802      	ldr	r0, [pc, #8]	@ (10040210 <__aeabi_uldivmod+0x24>)
10040206:	a102      	add	r1, pc, #8	@ (adr r1, 10040210 <__aeabi_uldivmod+0x24>)
10040208:	1840      	adds	r0, r0, r1
1004020a:	9002      	str	r0, [sp, #8]
1004020c:	bd03      	pop	{r0, r1, pc}
1004020e:	46c0      	nop			@ (mov r8, r8)
10040210:	ffffffd9 	.word	0xffffffd9
10040214:	b403      	push	{r0, r1}
10040216:	4668      	mov	r0, sp
10040218:	b501      	push	{r0, lr}
1004021a:	9802      	ldr	r0, [sp, #8]
1004021c:	f000 f806 	bl	1004022c <__udivmoddi4>
10040220:	9b01      	ldr	r3, [sp, #4]
10040222:	469e      	mov	lr, r3
10040224:	b002      	add	sp, #8
10040226:	bc0c      	pop	{r2, r3}
10040228:	4770      	bx	lr
1004022a:	46c0      	nop			@ (mov r8, r8)

1004022c <__udivmoddi4>:
1004022c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004022e:	4657      	mov	r7, sl
10040230:	464e      	mov	r6, r9
10040232:	4645      	mov	r5, r8
10040234:	46de      	mov	lr, fp
10040236:	b5e0      	push	{r5, r6, r7, lr}
10040238:	0004      	movs	r4, r0
1004023a:	000d      	movs	r5, r1
1004023c:	4692      	mov	sl, r2
1004023e:	4699      	mov	r9, r3
10040240:	b083      	sub	sp, #12
10040242:	428b      	cmp	r3, r1
10040244:	d830      	bhi.n	100402a8 <__udivmoddi4+0x7c>
10040246:	d02d      	beq.n	100402a4 <__udivmoddi4+0x78>
10040248:	4649      	mov	r1, r9
1004024a:	4650      	mov	r0, sl
1004024c:	f000 f8ba 	bl	100403c4 <__clzdi2>
10040250:	0029      	movs	r1, r5
10040252:	0006      	movs	r6, r0
10040254:	0020      	movs	r0, r4
10040256:	f000 f8b5 	bl	100403c4 <__clzdi2>
1004025a:	1a33      	subs	r3, r6, r0
1004025c:	4698      	mov	r8, r3
1004025e:	3b20      	subs	r3, #32
10040260:	d434      	bmi.n	100402cc <__udivmoddi4+0xa0>
10040262:	469b      	mov	fp, r3
10040264:	4653      	mov	r3, sl
10040266:	465a      	mov	r2, fp
10040268:	4093      	lsls	r3, r2
1004026a:	4642      	mov	r2, r8
1004026c:	001f      	movs	r7, r3
1004026e:	4653      	mov	r3, sl
10040270:	4093      	lsls	r3, r2
10040272:	001e      	movs	r6, r3
10040274:	42af      	cmp	r7, r5
10040276:	d83b      	bhi.n	100402f0 <__udivmoddi4+0xc4>
10040278:	42af      	cmp	r7, r5
1004027a:	d100      	bne.n	1004027e <__udivmoddi4+0x52>
1004027c:	e079      	b.n	10040372 <__udivmoddi4+0x146>
1004027e:	465b      	mov	r3, fp
10040280:	1ba4      	subs	r4, r4, r6
10040282:	41bd      	sbcs	r5, r7
10040284:	2b00      	cmp	r3, #0
10040286:	da00      	bge.n	1004028a <__udivmoddi4+0x5e>
10040288:	e076      	b.n	10040378 <__udivmoddi4+0x14c>
1004028a:	2200      	movs	r2, #0
1004028c:	2300      	movs	r3, #0
1004028e:	9200      	str	r2, [sp, #0]
10040290:	9301      	str	r3, [sp, #4]
10040292:	2301      	movs	r3, #1
10040294:	465a      	mov	r2, fp
10040296:	4093      	lsls	r3, r2
10040298:	9301      	str	r3, [sp, #4]
1004029a:	2301      	movs	r3, #1
1004029c:	4642      	mov	r2, r8
1004029e:	4093      	lsls	r3, r2
100402a0:	9300      	str	r3, [sp, #0]
100402a2:	e029      	b.n	100402f8 <__udivmoddi4+0xcc>
100402a4:	4282      	cmp	r2, r0
100402a6:	d9cf      	bls.n	10040248 <__udivmoddi4+0x1c>
100402a8:	2200      	movs	r2, #0
100402aa:	2300      	movs	r3, #0
100402ac:	9200      	str	r2, [sp, #0]
100402ae:	9301      	str	r3, [sp, #4]
100402b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100402b2:	2b00      	cmp	r3, #0
100402b4:	d001      	beq.n	100402ba <__udivmoddi4+0x8e>
100402b6:	601c      	str	r4, [r3, #0]
100402b8:	605d      	str	r5, [r3, #4]
100402ba:	9800      	ldr	r0, [sp, #0]
100402bc:	9901      	ldr	r1, [sp, #4]
100402be:	b003      	add	sp, #12
100402c0:	bcf0      	pop	{r4, r5, r6, r7}
100402c2:	46bb      	mov	fp, r7
100402c4:	46b2      	mov	sl, r6
100402c6:	46a9      	mov	r9, r5
100402c8:	46a0      	mov	r8, r4
100402ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
100402cc:	4642      	mov	r2, r8
100402ce:	469b      	mov	fp, r3
100402d0:	2320      	movs	r3, #32
100402d2:	1a9b      	subs	r3, r3, r2
100402d4:	4652      	mov	r2, sl
100402d6:	40da      	lsrs	r2, r3
100402d8:	4641      	mov	r1, r8
100402da:	0013      	movs	r3, r2
100402dc:	464a      	mov	r2, r9
100402de:	408a      	lsls	r2, r1
100402e0:	0017      	movs	r7, r2
100402e2:	4642      	mov	r2, r8
100402e4:	431f      	orrs	r7, r3
100402e6:	4653      	mov	r3, sl
100402e8:	4093      	lsls	r3, r2
100402ea:	001e      	movs	r6, r3
100402ec:	42af      	cmp	r7, r5
100402ee:	d9c3      	bls.n	10040278 <__udivmoddi4+0x4c>
100402f0:	2200      	movs	r2, #0
100402f2:	2300      	movs	r3, #0
100402f4:	9200      	str	r2, [sp, #0]
100402f6:	9301      	str	r3, [sp, #4]
100402f8:	4643      	mov	r3, r8
100402fa:	2b00      	cmp	r3, #0
100402fc:	d0d8      	beq.n	100402b0 <__udivmoddi4+0x84>
100402fe:	07fb      	lsls	r3, r7, #31
10040300:	0872      	lsrs	r2, r6, #1
10040302:	431a      	orrs	r2, r3
10040304:	4646      	mov	r6, r8
10040306:	087b      	lsrs	r3, r7, #1
10040308:	e00e      	b.n	10040328 <__udivmoddi4+0xfc>
1004030a:	42ab      	cmp	r3, r5
1004030c:	d101      	bne.n	10040312 <__udivmoddi4+0xe6>
1004030e:	42a2      	cmp	r2, r4
10040310:	d80c      	bhi.n	1004032c <__udivmoddi4+0x100>
10040312:	1aa4      	subs	r4, r4, r2
10040314:	419d      	sbcs	r5, r3
10040316:	2001      	movs	r0, #1
10040318:	1924      	adds	r4, r4, r4
1004031a:	416d      	adcs	r5, r5
1004031c:	2100      	movs	r1, #0
1004031e:	3e01      	subs	r6, #1
10040320:	1824      	adds	r4, r4, r0
10040322:	414d      	adcs	r5, r1
10040324:	2e00      	cmp	r6, #0
10040326:	d006      	beq.n	10040336 <__udivmoddi4+0x10a>
10040328:	42ab      	cmp	r3, r5
1004032a:	d9ee      	bls.n	1004030a <__udivmoddi4+0xde>
1004032c:	3e01      	subs	r6, #1
1004032e:	1924      	adds	r4, r4, r4
10040330:	416d      	adcs	r5, r5
10040332:	2e00      	cmp	r6, #0
10040334:	d1f8      	bne.n	10040328 <__udivmoddi4+0xfc>
10040336:	9800      	ldr	r0, [sp, #0]
10040338:	9901      	ldr	r1, [sp, #4]
1004033a:	465b      	mov	r3, fp
1004033c:	1900      	adds	r0, r0, r4
1004033e:	4169      	adcs	r1, r5
10040340:	2b00      	cmp	r3, #0
10040342:	db24      	blt.n	1004038e <__udivmoddi4+0x162>
10040344:	002b      	movs	r3, r5
10040346:	465a      	mov	r2, fp
10040348:	4644      	mov	r4, r8
1004034a:	40d3      	lsrs	r3, r2
1004034c:	002a      	movs	r2, r5
1004034e:	40e2      	lsrs	r2, r4
10040350:	001c      	movs	r4, r3
10040352:	465b      	mov	r3, fp
10040354:	0015      	movs	r5, r2
10040356:	2b00      	cmp	r3, #0
10040358:	db2a      	blt.n	100403b0 <__udivmoddi4+0x184>
1004035a:	0026      	movs	r6, r4
1004035c:	409e      	lsls	r6, r3
1004035e:	0033      	movs	r3, r6
10040360:	0026      	movs	r6, r4
10040362:	4647      	mov	r7, r8
10040364:	40be      	lsls	r6, r7
10040366:	0032      	movs	r2, r6
10040368:	1a80      	subs	r0, r0, r2
1004036a:	4199      	sbcs	r1, r3
1004036c:	9000      	str	r0, [sp, #0]
1004036e:	9101      	str	r1, [sp, #4]
10040370:	e79e      	b.n	100402b0 <__udivmoddi4+0x84>
10040372:	42a3      	cmp	r3, r4
10040374:	d8bc      	bhi.n	100402f0 <__udivmoddi4+0xc4>
10040376:	e782      	b.n	1004027e <__udivmoddi4+0x52>
10040378:	4642      	mov	r2, r8
1004037a:	2320      	movs	r3, #32
1004037c:	2100      	movs	r1, #0
1004037e:	1a9b      	subs	r3, r3, r2
10040380:	2200      	movs	r2, #0
10040382:	9100      	str	r1, [sp, #0]
10040384:	9201      	str	r2, [sp, #4]
10040386:	2201      	movs	r2, #1
10040388:	40da      	lsrs	r2, r3
1004038a:	9201      	str	r2, [sp, #4]
1004038c:	e785      	b.n	1004029a <__udivmoddi4+0x6e>
1004038e:	4642      	mov	r2, r8
10040390:	2320      	movs	r3, #32
10040392:	1a9b      	subs	r3, r3, r2
10040394:	002a      	movs	r2, r5
10040396:	4646      	mov	r6, r8
10040398:	409a      	lsls	r2, r3
1004039a:	0023      	movs	r3, r4
1004039c:	40f3      	lsrs	r3, r6
1004039e:	4644      	mov	r4, r8
100403a0:	4313      	orrs	r3, r2
100403a2:	002a      	movs	r2, r5
100403a4:	40e2      	lsrs	r2, r4
100403a6:	001c      	movs	r4, r3
100403a8:	465b      	mov	r3, fp
100403aa:	0015      	movs	r5, r2
100403ac:	2b00      	cmp	r3, #0
100403ae:	dad4      	bge.n	1004035a <__udivmoddi4+0x12e>
100403b0:	4642      	mov	r2, r8
100403b2:	002f      	movs	r7, r5
100403b4:	2320      	movs	r3, #32
100403b6:	0026      	movs	r6, r4
100403b8:	4097      	lsls	r7, r2
100403ba:	1a9b      	subs	r3, r3, r2
100403bc:	40de      	lsrs	r6, r3
100403be:	003b      	movs	r3, r7
100403c0:	4333      	orrs	r3, r6
100403c2:	e7cd      	b.n	10040360 <__udivmoddi4+0x134>

100403c4 <__clzdi2>:
100403c4:	b510      	push	{r4, lr}
100403c6:	2900      	cmp	r1, #0
100403c8:	d103      	bne.n	100403d2 <__clzdi2+0xe>
100403ca:	f000 f807 	bl	100403dc <__clzsi2>
100403ce:	3020      	adds	r0, #32
100403d0:	e002      	b.n	100403d8 <__clzdi2+0x14>
100403d2:	0008      	movs	r0, r1
100403d4:	f000 f802 	bl	100403dc <__clzsi2>
100403d8:	bd10      	pop	{r4, pc}
100403da:	46c0      	nop			@ (mov r8, r8)

100403dc <__clzsi2>:
100403dc:	211c      	movs	r1, #28
100403de:	2301      	movs	r3, #1
100403e0:	041b      	lsls	r3, r3, #16
100403e2:	4298      	cmp	r0, r3
100403e4:	d301      	bcc.n	100403ea <__clzsi2+0xe>
100403e6:	0c00      	lsrs	r0, r0, #16
100403e8:	3910      	subs	r1, #16
100403ea:	0a1b      	lsrs	r3, r3, #8
100403ec:	4298      	cmp	r0, r3
100403ee:	d301      	bcc.n	100403f4 <__clzsi2+0x18>
100403f0:	0a00      	lsrs	r0, r0, #8
100403f2:	3908      	subs	r1, #8
100403f4:	091b      	lsrs	r3, r3, #4
100403f6:	4298      	cmp	r0, r3
100403f8:	d301      	bcc.n	100403fe <__clzsi2+0x22>
100403fa:	0900      	lsrs	r0, r0, #4
100403fc:	3904      	subs	r1, #4
100403fe:	a202      	add	r2, pc, #8	@ (adr r2, 10040408 <__clzsi2+0x2c>)
10040400:	5c10      	ldrb	r0, [r2, r0]
10040402:	1840      	adds	r0, r0, r1
10040404:	4770      	bx	lr
10040406:	46c0      	nop			@ (mov r8, r8)
10040408:	02020304 	.word	0x02020304
1004040c:	01010101 	.word	0x01010101
	...

10040418 <LL_PWR_SetNoPullA>:
  *         @arg @ref LL_PWR_GPIO_BIT_15(*)
  *         (*) available only on STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullA(uint32_t GPIONumber)
{
10040418:	b580      	push	{r7, lr}
1004041a:	b082      	sub	sp, #8
1004041c:	af00      	add	r7, sp, #0
1004041e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRA, GPIONumber);
10040420:	4b08      	ldr	r3, [pc, #32]	@ (10040444 <LL_PWR_SetNoPullA+0x2c>)
10040422:	6a1a      	ldr	r2, [r3, #32]
10040424:	687b      	ldr	r3, [r7, #4]
10040426:	43d9      	mvns	r1, r3
10040428:	4b06      	ldr	r3, [pc, #24]	@ (10040444 <LL_PWR_SetNoPullA+0x2c>)
1004042a:	400a      	ands	r2, r1
1004042c:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(PWR->PDCRA, GPIONumber);
1004042e:	4b05      	ldr	r3, [pc, #20]	@ (10040444 <LL_PWR_SetNoPullA+0x2c>)
10040430:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10040432:	687b      	ldr	r3, [r7, #4]
10040434:	43d9      	mvns	r1, r3
10040436:	4b03      	ldr	r3, [pc, #12]	@ (10040444 <LL_PWR_SetNoPullA+0x2c>)
10040438:	400a      	ands	r2, r1
1004043a:	625a      	str	r2, [r3, #36]	@ 0x24
}
1004043c:	46c0      	nop			@ (mov r8, r8)
1004043e:	46bd      	mov	sp, r7
10040440:	b002      	add	sp, #8
10040442:	bd80      	pop	{r7, pc}
10040444:	48500000 	.word	0x48500000

10040448 <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
10040448:	b580      	push	{r7, lr}
1004044a:	b082      	sub	sp, #8
1004044c:	af00      	add	r7, sp, #0
1004044e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10040450:	4b08      	ldr	r3, [pc, #32]	@ (10040474 <LL_PWR_SetNoPullB+0x2c>)
10040452:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10040454:	687b      	ldr	r3, [r7, #4]
10040456:	43d9      	mvns	r1, r3
10040458:	4b06      	ldr	r3, [pc, #24]	@ (10040474 <LL_PWR_SetNoPullB+0x2c>)
1004045a:	400a      	ands	r2, r1
1004045c:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004045e:	4b05      	ldr	r3, [pc, #20]	@ (10040474 <LL_PWR_SetNoPullB+0x2c>)
10040460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10040462:	687b      	ldr	r3, [r7, #4]
10040464:	43d9      	mvns	r1, r3
10040466:	4b03      	ldr	r3, [pc, #12]	@ (10040474 <LL_PWR_SetNoPullB+0x2c>)
10040468:	400a      	ands	r2, r1
1004046a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004046c:	46c0      	nop			@ (mov r8, r8)
1004046e:	46bd      	mov	sp, r7
10040470:	b002      	add	sp, #8
10040472:	bd80      	pop	{r7, pc}
10040474:	48500000 	.word	0x48500000

10040478 <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
10040478:	b580      	push	{r7, lr}
1004047a:	b084      	sub	sp, #16
1004047c:	af00      	add	r7, sp, #0
1004047e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
10040480:	4b07      	ldr	r3, [pc, #28]	@ (100404a0 <LL_AHB1_GRP1_EnableClock+0x28>)
10040482:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10040484:	4b06      	ldr	r3, [pc, #24]	@ (100404a0 <LL_AHB1_GRP1_EnableClock+0x28>)
10040486:	687a      	ldr	r2, [r7, #4]
10040488:	430a      	orrs	r2, r1
1004048a:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
1004048c:	4b04      	ldr	r3, [pc, #16]	@ (100404a0 <LL_AHB1_GRP1_EnableClock+0x28>)
1004048e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10040490:	687a      	ldr	r2, [r7, #4]
10040492:	4013      	ands	r3, r2
10040494:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040496:	68fb      	ldr	r3, [r7, #12]
}
10040498:	46c0      	nop			@ (mov r8, r8)
1004049a:	46bd      	mov	sp, r7
1004049c:	b004      	add	sp, #16
1004049e:	bd80      	pop	{r7, pc}
100404a0:	48400000 	.word	0x48400000

100404a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
100404a4:	b580      	push	{r7, lr}
100404a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
100404a8:	f000 fe80 	bl	100411ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
100404ac:	f000 f860 	bl	10040570 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
100404b0:	f000 f87b 	bl	100405aa <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
100404b4:	f000 f896 	bl	100405e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
100404b8:	2000      	movs	r0, #0
100404ba:	f000 fc47 	bl	10040d4c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
100404be:	2001      	movs	r0, #1
100404c0:	f000 fc44 	bl	10040d4c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
100404c4:	2002      	movs	r0, #2
100404c6:	f000 fc41 	bl	10040d4c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(B1, BUTTON_MODE_EXTI);
100404ca:	2101      	movs	r1, #1
100404cc:	2000      	movs	r0, #0
100404ce:	f000 fced 	bl	10040eac <BSP_PB_Init>
  BSP_PB_Init(B2, BUTTON_MODE_EXTI);
100404d2:	2101      	movs	r1, #1
100404d4:	2001      	movs	r0, #1
100404d6:	f000 fce9 	bl	10040eac <BSP_PB_Init>
  BSP_PB_Init(B3, BUTTON_MODE_EXTI);
100404da:	2101      	movs	r1, #1
100404dc:	2002      	movs	r0, #2
100404de:	f000 fce5 	bl	10040eac <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
100404e2:	4b20      	ldr	r3, [pc, #128]	@ (10040564 <main+0xc0>)
100404e4:	22e1      	movs	r2, #225	@ 0xe1
100404e6:	0252      	lsls	r2, r2, #9
100404e8:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
100404ea:	4b1e      	ldr	r3, [pc, #120]	@ (10040564 <main+0xc0>)
100404ec:	2200      	movs	r2, #0
100404ee:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
100404f0:	4b1c      	ldr	r3, [pc, #112]	@ (10040564 <main+0xc0>)
100404f2:	2200      	movs	r2, #0
100404f4:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
100404f6:	4b1b      	ldr	r3, [pc, #108]	@ (10040564 <main+0xc0>)
100404f8:	2200      	movs	r2, #0
100404fa:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
100404fc:	4b19      	ldr	r3, [pc, #100]	@ (10040564 <main+0xc0>)
100404fe:	2200      	movs	r2, #0
10040500:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
10040502:	4b18      	ldr	r3, [pc, #96]	@ (10040564 <main+0xc0>)
10040504:	0019      	movs	r1, r3
10040506:	2000      	movs	r0, #0
10040508:	f000 fd7e 	bl	10041008 <BSP_COM_Init>
1004050c:	1e03      	subs	r3, r0, #0
1004050e:	d001      	beq.n	10040514 <main+0x70>
  {
    Error_Handler();
10040510:	f000 f8f4 	bl	100406fc <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
10040514:	4b14      	ldr	r3, [pc, #80]	@ (10040568 <main+0xc4>)
10040516:	0018      	movs	r0, r3
10040518:	f002 fa68 	bl	100429ec <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_BLUE);
1004051c:	2000      	movs	r0, #0
1004051e:	f000 fc8b 	bl	10040e38 <BSP_LED_On>
  BSP_LED_On(LED_GREEN);
10040522:	2001      	movs	r0, #1
10040524:	f000 fc88 	bl	10040e38 <BSP_LED_On>
  BSP_LED_On(LED_RED);
10040528:	2002      	movs	r0, #2
1004052a:	f000 fc85 	bl	10040e38 <BSP_LED_On>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    BSP_LED_Toggle(LED_BLUE);
1004052e:	2000      	movs	r0, #0
10040530:	f000 fca0 	bl	10040e74 <BSP_LED_Toggle>
    HAL_Delay(delay);
10040534:	4b0d      	ldr	r3, [pc, #52]	@ (1004056c <main+0xc8>)
10040536:	681b      	ldr	r3, [r3, #0]
10040538:	0018      	movs	r0, r3
1004053a:	f000 febd 	bl	100412b8 <HAL_Delay>

    BSP_LED_Toggle(LED_GREEN);
1004053e:	2001      	movs	r0, #1
10040540:	f000 fc98 	bl	10040e74 <BSP_LED_Toggle>
    HAL_Delay(delay);
10040544:	4b09      	ldr	r3, [pc, #36]	@ (1004056c <main+0xc8>)
10040546:	681b      	ldr	r3, [r3, #0]
10040548:	0018      	movs	r0, r3
1004054a:	f000 feb5 	bl	100412b8 <HAL_Delay>

    BSP_LED_Toggle(LED_RED);
1004054e:	2002      	movs	r0, #2
10040550:	f000 fc90 	bl	10040e74 <BSP_LED_Toggle>
    HAL_Delay(delay);
10040554:	4b05      	ldr	r3, [pc, #20]	@ (1004056c <main+0xc8>)
10040556:	681b      	ldr	r3, [r3, #0]
10040558:	0018      	movs	r0, r3
1004055a:	f000 fead 	bl	100412b8 <HAL_Delay>
    BSP_LED_Toggle(LED_BLUE);
1004055e:	46c0      	nop			@ (mov r8, r8)
10040560:	e7e5      	b.n	1004052e <main+0x8a>
10040562:	46c0      	nop			@ (mov r8, r8)
10040564:	200000c0 	.word	0x200000c0
10040568:	100436e8 	.word	0x100436e8
1004056c:	200002bc 	.word	0x200002bc

10040570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10040570:	b580      	push	{r7, lr}
10040572:	b082      	sub	sp, #8
10040574:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10040576:	003b      	movs	r3, r7
10040578:	0018      	movs	r0, r3
1004057a:	2308      	movs	r3, #8
1004057c:	001a      	movs	r2, r3
1004057e:	2100      	movs	r1, #0
10040580:	f002 fa90 	bl	10042aa4 <memset>

  /** Configure the SYSCLKSource and SYSCLKDivider
  */
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
10040584:	003b      	movs	r3, r7
10040586:	2202      	movs	r2, #2
10040588:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV1;
1004058a:	003b      	movs	r3, r7
1004058c:	2200      	movs	r2, #0
1004058e:	605a      	str	r2, [r3, #4]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_1) != HAL_OK)
10040590:	003b      	movs	r3, r7
10040592:	2110      	movs	r1, #16
10040594:	0018      	movs	r0, r3
10040596:	f001 fa59 	bl	10041a4c <HAL_RCC_ClockConfig>
1004059a:	1e03      	subs	r3, r0, #0
1004059c:	d001      	beq.n	100405a2 <SystemClock_Config+0x32>
  {
    Error_Handler();
1004059e:	f000 f8ad 	bl	100406fc <Error_Handler>
  }
}
100405a2:	46c0      	nop			@ (mov r8, r8)
100405a4:	46bd      	mov	sp, r7
100405a6:	b002      	add	sp, #8
100405a8:	bd80      	pop	{r7, pc}

100405aa <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
100405aa:	b580      	push	{r7, lr}
100405ac:	b086      	sub	sp, #24
100405ae:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
100405b0:	003b      	movs	r3, r7
100405b2:	0018      	movs	r0, r3
100405b4:	2318      	movs	r3, #24
100405b6:	001a      	movs	r2, r3
100405b8:	2100      	movs	r1, #0
100405ba:	f002 fa73 	bl	10042aa4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
100405be:	003b      	movs	r3, r7
100405c0:	2202      	movs	r2, #2
100405c2:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
100405c4:	003b      	movs	r3, r7
100405c6:	2280      	movs	r2, #128	@ 0x80
100405c8:	0152      	lsls	r2, r2, #5
100405ca:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
100405cc:	003b      	movs	r3, r7
100405ce:	0018      	movs	r0, r3
100405d0:	f001 fbd2 	bl	10041d78 <HAL_RCCEx_PeriphCLKConfig>
100405d4:	1e03      	subs	r3, r0, #0
100405d6:	d001      	beq.n	100405dc <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
100405d8:	f000 f890 	bl	100406fc <Error_Handler>
  }
}
100405dc:	46c0      	nop			@ (mov r8, r8)
100405de:	46bd      	mov	sp, r7
100405e0:	b006      	add	sp, #24
100405e2:	bd80      	pop	{r7, pc}

100405e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
100405e4:	b580      	push	{r7, lr}
100405e6:	b086      	sub	sp, #24
100405e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
100405ea:	1d3b      	adds	r3, r7, #4
100405ec:	0018      	movs	r0, r3
100405ee:	2314      	movs	r3, #20
100405f0:	001a      	movs	r2, r3
100405f2:	2100      	movs	r1, #0
100405f4:	f002 fa56 	bl	10042aa4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
100405f8:	2008      	movs	r0, #8
100405fa:	f7ff ff3d 	bl	10040478 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
100405fe:	2004      	movs	r0, #4
10040600:	f7ff ff3a 	bl	10040478 <LL_AHB1_GRP1_EnableClock>

  /*Configure GPIO pin : SPI3_SCK_Pin */
  GPIO_InitStruct.Pin = SPI3_SCK_Pin;
10040604:	1d3b      	adds	r3, r7, #4
10040606:	2208      	movs	r2, #8
10040608:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
1004060a:	1d3b      	adds	r3, r7, #4
1004060c:	2202      	movs	r2, #2
1004060e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
10040610:	1d3b      	adds	r3, r7, #4
10040612:	2200      	movs	r2, #0
10040614:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
10040616:	1d3b      	adds	r3, r7, #4
10040618:	2203      	movs	r2, #3
1004061a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_SPI3;
1004061c:	1d3b      	adds	r3, r7, #4
1004061e:	2204      	movs	r2, #4
10040620:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
10040622:	1d3b      	adds	r3, r7, #4
10040624:	4a1e      	ldr	r2, [pc, #120]	@ (100406a0 <MX_GPIO_Init+0xbc>)
10040626:	0019      	movs	r1, r3
10040628:	0010      	movs	r0, r2
1004062a:	f000 ff47 	bl	100414bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_MISO_Pin SPI3_NSS_Pin SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_NSS_Pin|SPI3_MOSI_Pin;
1004062e:	1d3b      	adds	r3, r7, #4
10040630:	22b0      	movs	r2, #176	@ 0xb0
10040632:	0112      	lsls	r2, r2, #4
10040634:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10040636:	1d3b      	adds	r3, r7, #4
10040638:	2202      	movs	r2, #2
1004063a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
1004063c:	1d3b      	adds	r3, r7, #4
1004063e:	2200      	movs	r2, #0
10040640:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
10040642:	1d3b      	adds	r3, r7, #4
10040644:	2203      	movs	r2, #3
10040646:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF3_SPI3;
10040648:	1d3b      	adds	r3, r7, #4
1004064a:	2203      	movs	r2, #3
1004064c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
1004064e:	1d3a      	adds	r2, r7, #4
10040650:	2390      	movs	r3, #144	@ 0x90
10040652:	05db      	lsls	r3, r3, #23
10040654:	0011      	movs	r1, r2
10040656:	0018      	movs	r0, r3
10040658:	f000 ff30 	bl	100414bc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SDA_Pin I2C1_SCL_Pin */
  GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
1004065c:	1d3b      	adds	r3, r7, #4
1004065e:	22c0      	movs	r2, #192	@ 0xc0
10040660:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
10040662:	1d3b      	adds	r3, r7, #4
10040664:	2212      	movs	r2, #18
10040666:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
10040668:	1d3b      	adds	r3, r7, #4
1004066a:	2200      	movs	r2, #0
1004066c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
1004066e:	1d3b      	adds	r3, r7, #4
10040670:	2203      	movs	r2, #3
10040672:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
10040674:	1d3b      	adds	r3, r7, #4
10040676:	2200      	movs	r2, #0
10040678:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
1004067a:	1d3b      	adds	r3, r7, #4
1004067c:	4a08      	ldr	r2, [pc, #32]	@ (100406a0 <MX_GPIO_Init+0xbc>)
1004067e:	0019      	movs	r1, r3
10040680:	0010      	movs	r0, r2
10040682:	f000 ff1b 	bl	100414bc <HAL_GPIO_Init>

  /**/
  LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_3|LL_PWR_GPIO_BIT_7|LL_PWR_GPIO_BIT_6);
10040686:	20c8      	movs	r0, #200	@ 0xc8
10040688:	f7ff fede 	bl	10040448 <LL_PWR_SetNoPullB>

  /**/
  LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_8|LL_PWR_GPIO_BIT_9|LL_PWR_GPIO_BIT_11);
1004068c:	23b0      	movs	r3, #176	@ 0xb0
1004068e:	011b      	lsls	r3, r3, #4
10040690:	0018      	movs	r0, r3
10040692:	f7ff fec1 	bl	10040418 <LL_PWR_SetNoPullA>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
10040696:	46c0      	nop			@ (mov r8, r8)
10040698:	46bd      	mov	sp, r7
1004069a:	b006      	add	sp, #24
1004069c:	bd80      	pop	{r7, pc}
1004069e:	46c0      	nop			@ (mov r8, r8)
100406a0:	48100000 	.word	0x48100000

100406a4 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callback.
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(GPIO_TypeDef* GPIOx,uint16_t GPIO_Pin)
{
100406a4:	b580      	push	{r7, lr}
100406a6:	b082      	sub	sp, #8
100406a8:	af00      	add	r7, sp, #0
100406aa:	6078      	str	r0, [r7, #4]
100406ac:	000a      	movs	r2, r1
100406ae:	1cbb      	adds	r3, r7, #2
100406b0:	801a      	strh	r2, [r3, #0]
  switch(GPIO_Pin)
100406b2:	1cbb      	adds	r3, r7, #2
100406b4:	881b      	ldrh	r3, [r3, #0]
100406b6:	2280      	movs	r2, #128	@ 0x80
100406b8:	01d2      	lsls	r2, r2, #7
100406ba:	4293      	cmp	r3, r2
100406bc:	d011      	beq.n	100406e2 <HAL_GPIO_EXTI_Callback+0x3e>
100406be:	2280      	movs	r2, #128	@ 0x80
100406c0:	01d2      	lsls	r2, r2, #7
100406c2:	4293      	cmp	r3, r2
100406c4:	dc12      	bgt.n	100406ec <HAL_GPIO_EXTI_Callback+0x48>
100406c6:	2b01      	cmp	r3, #1
100406c8:	d002      	beq.n	100406d0 <HAL_GPIO_EXTI_Callback+0x2c>
100406ca:	2b20      	cmp	r3, #32
100406cc:	d004      	beq.n	100406d8 <HAL_GPIO_EXTI_Callback+0x34>
    case B3_PIN:
      /* Change the period to 1000 ms */
      delay = 1000;
      break;
    default:
      break;
100406ce:	e00d      	b.n	100406ec <HAL_GPIO_EXTI_Callback+0x48>
      delay = 100;
100406d0:	4b09      	ldr	r3, [pc, #36]	@ (100406f8 <HAL_GPIO_EXTI_Callback+0x54>)
100406d2:	2264      	movs	r2, #100	@ 0x64
100406d4:	601a      	str	r2, [r3, #0]
      break;
100406d6:	e00a      	b.n	100406ee <HAL_GPIO_EXTI_Callback+0x4a>
      delay = 500;
100406d8:	4b07      	ldr	r3, [pc, #28]	@ (100406f8 <HAL_GPIO_EXTI_Callback+0x54>)
100406da:	22fa      	movs	r2, #250	@ 0xfa
100406dc:	0052      	lsls	r2, r2, #1
100406de:	601a      	str	r2, [r3, #0]
      break;
100406e0:	e005      	b.n	100406ee <HAL_GPIO_EXTI_Callback+0x4a>
      delay = 1000;
100406e2:	4b05      	ldr	r3, [pc, #20]	@ (100406f8 <HAL_GPIO_EXTI_Callback+0x54>)
100406e4:	22fa      	movs	r2, #250	@ 0xfa
100406e6:	0092      	lsls	r2, r2, #2
100406e8:	601a      	str	r2, [r3, #0]
      break;
100406ea:	e000      	b.n	100406ee <HAL_GPIO_EXTI_Callback+0x4a>
      break;
100406ec:	46c0      	nop			@ (mov r8, r8)
  }
}
100406ee:	46c0      	nop			@ (mov r8, r8)
100406f0:	46bd      	mov	sp, r7
100406f2:	b002      	add	sp, #8
100406f4:	bd80      	pop	{r7, pc}
100406f6:	46c0      	nop			@ (mov r8, r8)
100406f8:	200002bc 	.word	0x200002bc

100406fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
100406fc:	b580      	push	{r7, lr}
100406fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10040700:	b672      	cpsid	i
}
10040702:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
10040704:	46c0      	nop			@ (mov r8, r8)
10040706:	e7fd      	b.n	10040704 <Error_Handler+0x8>

10040708 <LL_APB0_GRP1_EnableClock>:
  * @retval None
  * @note   LL_APB0_GRP1_PERIPH_TIM1 is valid only for STM32WB06 and STM32WB07
  * @note   LL_APB0_GRP1_PERIPH_TIM2, LL_APB0_GRP1_PERIPH_TIM16 and LL_APB0_GRP1_PERIPH_TIM17 are valid for STM32WB05 and STM32WB09
  */
__STATIC_INLINE void LL_APB0_GRP1_EnableClock(uint32_t Periphs)
{
10040708:	b580      	push	{r7, lr}
1004070a:	b084      	sub	sp, #16
1004070c:	af00      	add	r7, sp, #0
1004070e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB0ENR, Periphs);
10040710:	4b07      	ldr	r3, [pc, #28]	@ (10040730 <LL_APB0_GRP1_EnableClock+0x28>)
10040712:	6d59      	ldr	r1, [r3, #84]	@ 0x54
10040714:	4b06      	ldr	r3, [pc, #24]	@ (10040730 <LL_APB0_GRP1_EnableClock+0x28>)
10040716:	687a      	ldr	r2, [r7, #4]
10040718:	430a      	orrs	r2, r1
1004071a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
1004071c:	4b04      	ldr	r3, [pc, #16]	@ (10040730 <LL_APB0_GRP1_EnableClock+0x28>)
1004071e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10040720:	687a      	ldr	r2, [r7, #4]
10040722:	4013      	ands	r3, r2
10040724:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040726:	68fb      	ldr	r3, [r7, #12]
}
10040728:	46c0      	nop			@ (mov r8, r8)
1004072a:	46bd      	mov	sp, r7
1004072c:	b004      	add	sp, #16
1004072e:	bd80      	pop	{r7, pc}
10040730:	48400000 	.word	0x48400000

10040734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10040734:	b580      	push	{r7, lr}
10040736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
10040738:	2380      	movs	r3, #128	@ 0x80
1004073a:	005b      	lsls	r3, r3, #1
1004073c:	0018      	movs	r0, r3
1004073e:	f7ff ffe3 	bl	10040708 <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10040742:	46c0      	nop			@ (mov r8, r8)
10040744:	46bd      	mov	sp, r7
10040746:	bd80      	pop	{r7, pc}

10040748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10040748:	b580      	push	{r7, lr}
1004074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
1004074c:	46c0      	nop			@ (mov r8, r8)
1004074e:	e7fd      	b.n	1004074c <NMI_Handler+0x4>

10040750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10040750:	b580      	push	{r7, lr}
10040752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10040754:	46c0      	nop			@ (mov r8, r8)
10040756:	e7fd      	b.n	10040754 <HardFault_Handler+0x4>

10040758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10040758:	b580      	push	{r7, lr}
1004075a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
1004075c:	46c0      	nop			@ (mov r8, r8)
1004075e:	46bd      	mov	sp, r7
10040760:	bd80      	pop	{r7, pc}

10040762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10040762:	b580      	push	{r7, lr}
10040764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10040766:	46c0      	nop			@ (mov r8, r8)
10040768:	46bd      	mov	sp, r7
1004076a:	bd80      	pop	{r7, pc}

1004076c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
1004076c:	b580      	push	{r7, lr}
1004076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10040770:	f000 fd7c 	bl	1004126c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10040774:	46c0      	nop			@ (mov r8, r8)
10040776:	46bd      	mov	sp, r7
10040778:	bd80      	pop	{r7, pc}

1004077a <GPIOA_IRQHandler>:

/**
  * @brief This function handles GPIOA interrupt.
  */
void GPIOA_IRQHandler(void)
{
1004077a:	b580      	push	{r7, lr}
1004077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPIOA_IRQn 0 */

  /* USER CODE END GPIOA_IRQn 0 */
  BSP_PB_IRQHandler(GPIOA,B1_PIN);
1004077e:	2390      	movs	r3, #144	@ 0x90
10040780:	05db      	lsls	r3, r3, #23
10040782:	2101      	movs	r1, #1
10040784:	0018      	movs	r0, r3
10040786:	f000 fc2d 	bl	10040fe4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN GPIOA_IRQn 1 */

  /* USER CODE END GPIOA_IRQn 1 */
}
1004078a:	46c0      	nop			@ (mov r8, r8)
1004078c:	46bd      	mov	sp, r7
1004078e:	bd80      	pop	{r7, pc}

10040790 <GPIOB_IRQHandler>:

/**
  * @brief This function handles GPIOB interrupt.
  */
void GPIOB_IRQHandler(void)
{
10040790:	b580      	push	{r7, lr}
10040792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPIOB_IRQn 0 */

  /* USER CODE END GPIOB_IRQn 0 */
  BSP_PB_IRQHandler(GPIOB,B3_PIN);
10040794:	2380      	movs	r3, #128	@ 0x80
10040796:	01db      	lsls	r3, r3, #7
10040798:	4a06      	ldr	r2, [pc, #24]	@ (100407b4 <GPIOB_IRQHandler+0x24>)
1004079a:	0019      	movs	r1, r3
1004079c:	0010      	movs	r0, r2
1004079e:	f000 fc21 	bl	10040fe4 <BSP_PB_IRQHandler>
  BSP_PB_IRQHandler(GPIOB,B2_PIN);
100407a2:	4b04      	ldr	r3, [pc, #16]	@ (100407b4 <GPIOB_IRQHandler+0x24>)
100407a4:	2120      	movs	r1, #32
100407a6:	0018      	movs	r0, r3
100407a8:	f000 fc1c 	bl	10040fe4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN GPIOB_IRQn 1 */

  /* USER CODE END GPIOB_IRQn 1 */
}
100407ac:	46c0      	nop			@ (mov r8, r8)
100407ae:	46bd      	mov	sp, r7
100407b0:	bd80      	pop	{r7, pc}
100407b2:	46c0      	nop			@ (mov r8, r8)
100407b4:	48100000 	.word	0x48100000

100407b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
100407b8:	b580      	push	{r7, lr}
100407ba:	b086      	sub	sp, #24
100407bc:	af00      	add	r7, sp, #0
100407be:	60f8      	str	r0, [r7, #12]
100407c0:	60b9      	str	r1, [r7, #8]
100407c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
100407c4:	2300      	movs	r3, #0
100407c6:	617b      	str	r3, [r7, #20]
100407c8:	e00a      	b.n	100407e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
100407ca:	e000      	b.n	100407ce <_read+0x16>
100407cc:	bf00      	nop
100407ce:	0001      	movs	r1, r0
100407d0:	68bb      	ldr	r3, [r7, #8]
100407d2:	1c5a      	adds	r2, r3, #1
100407d4:	60ba      	str	r2, [r7, #8]
100407d6:	b2ca      	uxtb	r2, r1
100407d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
100407da:	697b      	ldr	r3, [r7, #20]
100407dc:	3301      	adds	r3, #1
100407de:	617b      	str	r3, [r7, #20]
100407e0:	697a      	ldr	r2, [r7, #20]
100407e2:	687b      	ldr	r3, [r7, #4]
100407e4:	429a      	cmp	r2, r3
100407e6:	dbf0      	blt.n	100407ca <_read+0x12>
  }

  return len;
100407e8:	687b      	ldr	r3, [r7, #4]
}
100407ea:	0018      	movs	r0, r3
100407ec:	46bd      	mov	sp, r7
100407ee:	b006      	add	sp, #24
100407f0:	bd80      	pop	{r7, pc}

100407f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
100407f2:	b580      	push	{r7, lr}
100407f4:	b086      	sub	sp, #24
100407f6:	af00      	add	r7, sp, #0
100407f8:	60f8      	str	r0, [r7, #12]
100407fa:	60b9      	str	r1, [r7, #8]
100407fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
100407fe:	2300      	movs	r3, #0
10040800:	617b      	str	r3, [r7, #20]
10040802:	e009      	b.n	10040818 <_write+0x26>
  {
    __io_putchar(*ptr++);
10040804:	68bb      	ldr	r3, [r7, #8]
10040806:	1c5a      	adds	r2, r3, #1
10040808:	60ba      	str	r2, [r7, #8]
1004080a:	781b      	ldrb	r3, [r3, #0]
1004080c:	0018      	movs	r0, r3
1004080e:	f000 fc3b 	bl	10041088 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10040812:	697b      	ldr	r3, [r7, #20]
10040814:	3301      	adds	r3, #1
10040816:	617b      	str	r3, [r7, #20]
10040818:	697a      	ldr	r2, [r7, #20]
1004081a:	687b      	ldr	r3, [r7, #4]
1004081c:	429a      	cmp	r2, r3
1004081e:	dbf1      	blt.n	10040804 <_write+0x12>
  }
  return len;
10040820:	687b      	ldr	r3, [r7, #4]
}
10040822:	0018      	movs	r0, r3
10040824:	46bd      	mov	sp, r7
10040826:	b006      	add	sp, #24
10040828:	bd80      	pop	{r7, pc}

1004082a <_close>:

int _close(int file)
{
1004082a:	b580      	push	{r7, lr}
1004082c:	b082      	sub	sp, #8
1004082e:	af00      	add	r7, sp, #0
10040830:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
10040832:	2301      	movs	r3, #1
10040834:	425b      	negs	r3, r3
}
10040836:	0018      	movs	r0, r3
10040838:	46bd      	mov	sp, r7
1004083a:	b002      	add	sp, #8
1004083c:	bd80      	pop	{r7, pc}

1004083e <_fstat>:


int _fstat(int file, struct stat *st)
{
1004083e:	b580      	push	{r7, lr}
10040840:	b082      	sub	sp, #8
10040842:	af00      	add	r7, sp, #0
10040844:	6078      	str	r0, [r7, #4]
10040846:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
10040848:	683b      	ldr	r3, [r7, #0]
1004084a:	2280      	movs	r2, #128	@ 0x80
1004084c:	0192      	lsls	r2, r2, #6
1004084e:	605a      	str	r2, [r3, #4]
  return 0;
10040850:	2300      	movs	r3, #0
}
10040852:	0018      	movs	r0, r3
10040854:	46bd      	mov	sp, r7
10040856:	b002      	add	sp, #8
10040858:	bd80      	pop	{r7, pc}

1004085a <_isatty>:

int _isatty(int file)
{
1004085a:	b580      	push	{r7, lr}
1004085c:	b082      	sub	sp, #8
1004085e:	af00      	add	r7, sp, #0
10040860:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
10040862:	2301      	movs	r3, #1
}
10040864:	0018      	movs	r0, r3
10040866:	46bd      	mov	sp, r7
10040868:	b002      	add	sp, #8
1004086a:	bd80      	pop	{r7, pc}

1004086c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
1004086c:	b580      	push	{r7, lr}
1004086e:	b084      	sub	sp, #16
10040870:	af00      	add	r7, sp, #0
10040872:	60f8      	str	r0, [r7, #12]
10040874:	60b9      	str	r1, [r7, #8]
10040876:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
10040878:	2300      	movs	r3, #0
}
1004087a:	0018      	movs	r0, r3
1004087c:	46bd      	mov	sp, r7
1004087e:	b004      	add	sp, #16
10040880:	bd80      	pop	{r7, pc}
	...

10040884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10040884:	b580      	push	{r7, lr}
10040886:	b086      	sub	sp, #24
10040888:	af00      	add	r7, sp, #0
1004088a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
1004088c:	4a14      	ldr	r2, [pc, #80]	@ (100408e0 <_sbrk+0x5c>)
1004088e:	4b15      	ldr	r3, [pc, #84]	@ (100408e4 <_sbrk+0x60>)
10040890:	1ad3      	subs	r3, r2, r3
10040892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10040894:	697b      	ldr	r3, [r7, #20]
10040896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10040898:	4b13      	ldr	r3, [pc, #76]	@ (100408e8 <_sbrk+0x64>)
1004089a:	681b      	ldr	r3, [r3, #0]
1004089c:	2b00      	cmp	r3, #0
1004089e:	d102      	bne.n	100408a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
100408a0:	4b11      	ldr	r3, [pc, #68]	@ (100408e8 <_sbrk+0x64>)
100408a2:	4a12      	ldr	r2, [pc, #72]	@ (100408ec <_sbrk+0x68>)
100408a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
100408a6:	4b10      	ldr	r3, [pc, #64]	@ (100408e8 <_sbrk+0x64>)
100408a8:	681a      	ldr	r2, [r3, #0]
100408aa:	687b      	ldr	r3, [r7, #4]
100408ac:	18d3      	adds	r3, r2, r3
100408ae:	693a      	ldr	r2, [r7, #16]
100408b0:	429a      	cmp	r2, r3
100408b2:	d207      	bcs.n	100408c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
100408b4:	f002 f94c 	bl	10042b50 <__errno>
100408b8:	0003      	movs	r3, r0
100408ba:	220c      	movs	r2, #12
100408bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
100408be:	2301      	movs	r3, #1
100408c0:	425b      	negs	r3, r3
100408c2:	e009      	b.n	100408d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
100408c4:	4b08      	ldr	r3, [pc, #32]	@ (100408e8 <_sbrk+0x64>)
100408c6:	681b      	ldr	r3, [r3, #0]
100408c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
100408ca:	4b07      	ldr	r3, [pc, #28]	@ (100408e8 <_sbrk+0x64>)
100408cc:	681a      	ldr	r2, [r3, #0]
100408ce:	687b      	ldr	r3, [r7, #4]
100408d0:	18d2      	adds	r2, r2, r3
100408d2:	4b05      	ldr	r3, [pc, #20]	@ (100408e8 <_sbrk+0x64>)
100408d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
100408d6:	68fb      	ldr	r3, [r7, #12]
}
100408d8:	0018      	movs	r0, r3
100408da:	46bd      	mov	sp, r7
100408dc:	b006      	add	sp, #24
100408de:	bd80      	pop	{r7, pc}
100408e0:	20006000 	.word	0x20006000
100408e4:	00000c00 	.word	0x00000c00
100408e8:	200000d0 	.word	0x200000d0
100408ec:	20000358 	.word	0x20000358

100408f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100408f0:	b590      	push	{r4, r7, lr}
100408f2:	b083      	sub	sp, #12
100408f4:	af00      	add	r7, sp, #0
100408f6:	0002      	movs	r2, r0
100408f8:	6039      	str	r1, [r7, #0]
100408fa:	1dfb      	adds	r3, r7, #7
100408fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100408fe:	1dfb      	adds	r3, r7, #7
10040900:	781b      	ldrb	r3, [r3, #0]
10040902:	2b7f      	cmp	r3, #127	@ 0x7f
10040904:	d828      	bhi.n	10040958 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040906:	4a2f      	ldr	r2, [pc, #188]	@ (100409c4 <__NVIC_SetPriority+0xd4>)
10040908:	1dfb      	adds	r3, r7, #7
1004090a:	781b      	ldrb	r3, [r3, #0]
1004090c:	b25b      	sxtb	r3, r3
1004090e:	089b      	lsrs	r3, r3, #2
10040910:	33c0      	adds	r3, #192	@ 0xc0
10040912:	009b      	lsls	r3, r3, #2
10040914:	589b      	ldr	r3, [r3, r2]
10040916:	1dfa      	adds	r2, r7, #7
10040918:	7812      	ldrb	r2, [r2, #0]
1004091a:	0011      	movs	r1, r2
1004091c:	2203      	movs	r2, #3
1004091e:	400a      	ands	r2, r1
10040920:	00d2      	lsls	r2, r2, #3
10040922:	21ff      	movs	r1, #255	@ 0xff
10040924:	4091      	lsls	r1, r2
10040926:	000a      	movs	r2, r1
10040928:	43d2      	mvns	r2, r2
1004092a:	401a      	ands	r2, r3
1004092c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004092e:	683b      	ldr	r3, [r7, #0]
10040930:	019b      	lsls	r3, r3, #6
10040932:	22ff      	movs	r2, #255	@ 0xff
10040934:	401a      	ands	r2, r3
10040936:	1dfb      	adds	r3, r7, #7
10040938:	781b      	ldrb	r3, [r3, #0]
1004093a:	0018      	movs	r0, r3
1004093c:	2303      	movs	r3, #3
1004093e:	4003      	ands	r3, r0
10040940:	00db      	lsls	r3, r3, #3
10040942:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040944:	481f      	ldr	r0, [pc, #124]	@ (100409c4 <__NVIC_SetPriority+0xd4>)
10040946:	1dfb      	adds	r3, r7, #7
10040948:	781b      	ldrb	r3, [r3, #0]
1004094a:	b25b      	sxtb	r3, r3
1004094c:	089b      	lsrs	r3, r3, #2
1004094e:	430a      	orrs	r2, r1
10040950:	33c0      	adds	r3, #192	@ 0xc0
10040952:	009b      	lsls	r3, r3, #2
10040954:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10040956:	e031      	b.n	100409bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040958:	4a1b      	ldr	r2, [pc, #108]	@ (100409c8 <__NVIC_SetPriority+0xd8>)
1004095a:	1dfb      	adds	r3, r7, #7
1004095c:	781b      	ldrb	r3, [r3, #0]
1004095e:	0019      	movs	r1, r3
10040960:	230f      	movs	r3, #15
10040962:	400b      	ands	r3, r1
10040964:	3b08      	subs	r3, #8
10040966:	089b      	lsrs	r3, r3, #2
10040968:	3306      	adds	r3, #6
1004096a:	009b      	lsls	r3, r3, #2
1004096c:	18d3      	adds	r3, r2, r3
1004096e:	3304      	adds	r3, #4
10040970:	681b      	ldr	r3, [r3, #0]
10040972:	1dfa      	adds	r2, r7, #7
10040974:	7812      	ldrb	r2, [r2, #0]
10040976:	0011      	movs	r1, r2
10040978:	2203      	movs	r2, #3
1004097a:	400a      	ands	r2, r1
1004097c:	00d2      	lsls	r2, r2, #3
1004097e:	21ff      	movs	r1, #255	@ 0xff
10040980:	4091      	lsls	r1, r2
10040982:	000a      	movs	r2, r1
10040984:	43d2      	mvns	r2, r2
10040986:	401a      	ands	r2, r3
10040988:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004098a:	683b      	ldr	r3, [r7, #0]
1004098c:	019b      	lsls	r3, r3, #6
1004098e:	22ff      	movs	r2, #255	@ 0xff
10040990:	401a      	ands	r2, r3
10040992:	1dfb      	adds	r3, r7, #7
10040994:	781b      	ldrb	r3, [r3, #0]
10040996:	0018      	movs	r0, r3
10040998:	2303      	movs	r3, #3
1004099a:	4003      	ands	r3, r0
1004099c:	00db      	lsls	r3, r3, #3
1004099e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100409a0:	4809      	ldr	r0, [pc, #36]	@ (100409c8 <__NVIC_SetPriority+0xd8>)
100409a2:	1dfb      	adds	r3, r7, #7
100409a4:	781b      	ldrb	r3, [r3, #0]
100409a6:	001c      	movs	r4, r3
100409a8:	230f      	movs	r3, #15
100409aa:	4023      	ands	r3, r4
100409ac:	3b08      	subs	r3, #8
100409ae:	089b      	lsrs	r3, r3, #2
100409b0:	430a      	orrs	r2, r1
100409b2:	3306      	adds	r3, #6
100409b4:	009b      	lsls	r3, r3, #2
100409b6:	18c3      	adds	r3, r0, r3
100409b8:	3304      	adds	r3, #4
100409ba:	601a      	str	r2, [r3, #0]
}
100409bc:	46c0      	nop			@ (mov r8, r8)
100409be:	46bd      	mov	sp, r7
100409c0:	b003      	add	sp, #12
100409c2:	bd90      	pop	{r4, r7, pc}
100409c4:	e000e100 	.word	0xe000e100
100409c8:	e000ed00 	.word	0xe000ed00

100409cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
100409cc:	b580      	push	{r7, lr}
100409ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
100409d0:	f3bf 8f4f 	dsb	sy
}
100409d4:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
100409d6:	4b04      	ldr	r3, [pc, #16]	@ (100409e8 <__NVIC_SystemReset+0x1c>)
100409d8:	4a04      	ldr	r2, [pc, #16]	@ (100409ec <__NVIC_SystemReset+0x20>)
100409da:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
100409dc:	f3bf 8f4f 	dsb	sy
}
100409e0:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
100409e2:	46c0      	nop			@ (mov r8, r8)
100409e4:	e7fd      	b.n	100409e2 <__NVIC_SystemReset+0x16>
100409e6:	46c0      	nop			@ (mov r8, r8)
100409e8:	e000ed00 	.word	0xe000ed00
100409ec:	05fa0004 	.word	0x05fa0004

100409f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
100409f0:	b590      	push	{r4, r7, lr}
100409f2:	b087      	sub	sp, #28
100409f4:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
100409f6:	4a5e      	ldr	r2, [pc, #376]	@ (10040b70 <SystemInit+0x180>)
100409f8:	2394      	movs	r3, #148	@ 0x94
100409fa:	58d3      	ldr	r3, [r2, r3]
100409fc:	2b00      	cmp	r3, #0
100409fe:	d10e      	bne.n	10040a1e <SystemInit+0x2e>
10040a00:	4b5c      	ldr	r3, [pc, #368]	@ (10040b74 <SystemInit+0x184>)
10040a02:	691b      	ldr	r3, [r3, #16]
10040a04:	2b00      	cmp	r3, #0
10040a06:	d103      	bne.n	10040a10 <SystemInit+0x20>
10040a08:	4b5a      	ldr	r3, [pc, #360]	@ (10040b74 <SystemInit+0x184>)
10040a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10040a0c:	2b00      	cmp	r3, #0
10040a0e:	d006      	beq.n	10040a1e <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
10040a10:	4b59      	ldr	r3, [pc, #356]	@ (10040b78 <SystemInit+0x188>)
10040a12:	2201      	movs	r2, #1
10040a14:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
10040a16:	f000 f8f5 	bl	10040c04 <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
10040a1a:	f7ff ffd7 	bl	100409cc <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
10040a1e:	4b57      	ldr	r3, [pc, #348]	@ (10040b7c <SystemInit+0x18c>)
10040a20:	4a57      	ldr	r2, [pc, #348]	@ (10040b80 <SystemInit+0x190>)
10040a22:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
10040a24:	4b55      	ldr	r3, [pc, #340]	@ (10040b7c <SystemInit+0x18c>)
10040a26:	689a      	ldr	r2, [r3, #8]
10040a28:	4b53      	ldr	r3, [pc, #332]	@ (10040b78 <SystemInit+0x188>)
10040a2a:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
10040a2c:	4b51      	ldr	r3, [pc, #324]	@ (10040b74 <SystemInit+0x184>)
10040a2e:	685a      	ldr	r2, [r3, #4]
10040a30:	4b50      	ldr	r3, [pc, #320]	@ (10040b74 <SystemInit+0x184>)
10040a32:	2120      	movs	r1, #32
10040a34:	430a      	orrs	r2, r1
10040a36:	605a      	str	r2, [r3, #4]
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
#endif /* PWR_CR2_RAMRET3 */

  /* Disable the GPIO retention in power save configuration */
#if defined(PWR_CR2_GPIORET)
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
10040a38:	4b4e      	ldr	r3, [pc, #312]	@ (10040b74 <SystemInit+0x184>)
10040a3a:	685a      	ldr	r2, [r3, #4]
10040a3c:	4b4d      	ldr	r3, [pc, #308]	@ (10040b74 <SystemInit+0x184>)
10040a3e:	4951      	ldr	r1, [pc, #324]	@ (10040b84 <SystemInit+0x194>)
10040a40:	400a      	ands	r2, r1
10040a42:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
10040a44:	46c0      	nop			@ (mov r8, r8)
10040a46:	4b4b      	ldr	r3, [pc, #300]	@ (10040b74 <SystemInit+0x184>)
10040a48:	695b      	ldr	r3, [r3, #20]
10040a4a:	2204      	movs	r2, #4
10040a4c:	4013      	ands	r3, r2
10040a4e:	2b04      	cmp	r3, #4
10040a50:	d1f9      	bne.n	10040a46 <SystemInit+0x56>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
10040a52:	4b48      	ldr	r3, [pc, #288]	@ (10040b74 <SystemInit+0x184>)
10040a54:	69db      	ldr	r3, [r3, #28]
10040a56:	2230      	movs	r2, #48	@ 0x30
10040a58:	4393      	bics	r3, r2
10040a5a:	001a      	movs	r2, r3
10040a5c:	4b45      	ldr	r3, [pc, #276]	@ (10040b74 <SystemInit+0x184>)
10040a5e:	2120      	movs	r1, #32
10040a60:	430a      	orrs	r2, r1
10040a62:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
10040a64:	4b43      	ldr	r3, [pc, #268]	@ (10040b74 <SystemInit+0x184>)
10040a66:	69da      	ldr	r2, [r3, #28]
10040a68:	4b42      	ldr	r3, [pc, #264]	@ (10040b74 <SystemInit+0x184>)
10040a6a:	4947      	ldr	r1, [pc, #284]	@ (10040b88 <SystemInit+0x198>)
10040a6c:	400a      	ands	r2, r1
10040a6e:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
10040a70:	4b40      	ldr	r3, [pc, #256]	@ (10040b74 <SystemInit+0x184>)
10040a72:	69da      	ldr	r2, [r3, #28]
10040a74:	4b3f      	ldr	r3, [pc, #252]	@ (10040b74 <SystemInit+0x184>)
10040a76:	2180      	movs	r1, #128	@ 0x80
10040a78:	0049      	lsls	r1, r1, #1
10040a7a:	430a      	orrs	r2, r1
10040a7c:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
10040a7e:	4b43      	ldr	r3, [pc, #268]	@ (10040b8c <SystemInit+0x19c>)
10040a80:	681b      	ldr	r3, [r3, #0]
10040a82:	4a43      	ldr	r2, [pc, #268]	@ (10040b90 <SystemInit+0x1a0>)
10040a84:	4293      	cmp	r3, r2
10040a86:	d055      	beq.n	10040b34 <SystemInit+0x144>

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
#else
    hsiCalib       = 0x1F;
10040a88:	231f      	movs	r3, #31
10040a8a:	613b      	str	r3, [r7, #16]
    lsiBw          = 8;
10040a8c:	2308      	movs	r3, #8
10040a8e:	60fb      	str	r3, [r7, #12]
    mainRegulator  = 0x0A;
10040a90:	230a      	movs	r3, #10
10040a92:	60bb      	str	r3, [r7, #8]
    smpsOutVoltage = 0x03;
10040a94:	2303      	movs	r3, #3
10040a96:	607b      	str	r3, [r7, #4]

    /* Low speed internal RC trimming value set by software */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
10040a98:	4b35      	ldr	r3, [pc, #212]	@ (10040b70 <SystemInit+0x180>)
10040a9a:	68db      	ldr	r3, [r3, #12]
10040a9c:	221e      	movs	r2, #30
10040a9e:	4393      	bics	r3, r2
10040aa0:	0019      	movs	r1, r3
10040aa2:	68fb      	ldr	r3, [r7, #12]
10040aa4:	005a      	lsls	r2, r3, #1
10040aa6:	4b32      	ldr	r3, [pc, #200]	@ (10040b70 <SystemInit+0x180>)
10040aa8:	430a      	orrs	r2, r1
10040aaa:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
10040aac:	4b30      	ldr	r3, [pc, #192]	@ (10040b70 <SystemInit+0x180>)
10040aae:	68da      	ldr	r2, [r3, #12]
10040ab0:	4b2f      	ldr	r3, [pc, #188]	@ (10040b70 <SystemInit+0x180>)
10040ab2:	2101      	movs	r1, #1
10040ab4:	430a      	orrs	r2, r1
10040ab6:	60da      	str	r2, [r3, #12]
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
10040ab8:	4b2d      	ldr	r3, [pc, #180]	@ (10040b70 <SystemInit+0x180>)
10040aba:	68db      	ldr	r3, [r3, #12]
10040abc:	4a35      	ldr	r2, [pc, #212]	@ (10040b94 <SystemInit+0x1a4>)
10040abe:	4013      	ands	r3, r2
10040ac0:	0019      	movs	r1, r3
10040ac2:	693b      	ldr	r3, [r7, #16]
10040ac4:	061a      	lsls	r2, r3, #24
10040ac6:	4b2a      	ldr	r3, [pc, #168]	@ (10040b70 <SystemInit+0x180>)
10040ac8:	430a      	orrs	r2, r1
10040aca:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
10040acc:	4b28      	ldr	r3, [pc, #160]	@ (10040b70 <SystemInit+0x180>)
10040ace:	68da      	ldr	r2, [r3, #12]
10040ad0:	4b27      	ldr	r3, [pc, #156]	@ (10040b70 <SystemInit+0x180>)
10040ad2:	2180      	movs	r1, #128	@ 0x80
10040ad4:	0409      	lsls	r1, r1, #16
10040ad6:	430a      	orrs	r2, r1
10040ad8:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
10040ada:	4a26      	ldr	r2, [pc, #152]	@ (10040b74 <SystemInit+0x184>)
10040adc:	2394      	movs	r3, #148	@ 0x94
10040ade:	58d3      	ldr	r3, [r2, r3]
10040ae0:	4a2d      	ldr	r2, [pc, #180]	@ (10040b98 <SystemInit+0x1a8>)
10040ae2:	401a      	ands	r2, r3
10040ae4:	68bb      	ldr	r3, [r7, #8]
10040ae6:	0199      	lsls	r1, r3, #6
10040ae8:	23f0      	movs	r3, #240	@ 0xf0
10040aea:	009b      	lsls	r3, r3, #2
10040aec:	400b      	ands	r3, r1
10040aee:	4921      	ldr	r1, [pc, #132]	@ (10040b74 <SystemInit+0x184>)
10040af0:	4313      	orrs	r3, r2
10040af2:	2294      	movs	r2, #148	@ 0x94
10040af4:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
10040af6:	4a1f      	ldr	r2, [pc, #124]	@ (10040b74 <SystemInit+0x184>)
10040af8:	2394      	movs	r3, #148	@ 0x94
10040afa:	58d3      	ldr	r3, [r2, r3]
10040afc:	491d      	ldr	r1, [pc, #116]	@ (10040b74 <SystemInit+0x184>)
10040afe:	2220      	movs	r2, #32
10040b00:	4313      	orrs	r3, r2
10040b02:	2294      	movs	r2, #148	@ 0x94
10040b04:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
10040b06:	4a1b      	ldr	r2, [pc, #108]	@ (10040b74 <SystemInit+0x184>)
10040b08:	2394      	movs	r3, #148	@ 0x94
10040b0a:	58d3      	ldr	r3, [r2, r3]
10040b0c:	4a23      	ldr	r2, [pc, #140]	@ (10040b9c <SystemInit+0x1ac>)
10040b0e:	401a      	ands	r2, r3
10040b10:	687b      	ldr	r3, [r7, #4]
10040b12:	02d9      	lsls	r1, r3, #11
10040b14:	23e0      	movs	r3, #224	@ 0xe0
10040b16:	019b      	lsls	r3, r3, #6
10040b18:	400b      	ands	r3, r1
10040b1a:	4916      	ldr	r1, [pc, #88]	@ (10040b74 <SystemInit+0x184>)
10040b1c:	4313      	orrs	r3, r2
10040b1e:	2294      	movs	r2, #148	@ 0x94
10040b20:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
10040b22:	4a14      	ldr	r2, [pc, #80]	@ (10040b74 <SystemInit+0x184>)
10040b24:	2394      	movs	r3, #148	@ 0x94
10040b26:	58d3      	ldr	r3, [r2, r3]
10040b28:	4912      	ldr	r1, [pc, #72]	@ (10040b74 <SystemInit+0x184>)
10040b2a:	2280      	movs	r2, #128	@ 0x80
10040b2c:	00d2      	lsls	r2, r2, #3
10040b2e:	4313      	orrs	r3, r2
10040b30:	2294      	movs	r2, #148	@ 0x94
10040b32:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
10040b34:	2317      	movs	r3, #23
10040b36:	18fb      	adds	r3, r7, r3
10040b38:	2200      	movs	r2, #0
10040b3a:	701a      	strb	r2, [r3, #0]
10040b3c:	e00d      	b.n	10040b5a <SystemInit+0x16a>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
10040b3e:	2417      	movs	r4, #23
10040b40:	193b      	adds	r3, r7, r4
10040b42:	781b      	ldrb	r3, [r3, #0]
10040b44:	b25b      	sxtb	r3, r3
10040b46:	2103      	movs	r1, #3
10040b48:	0018      	movs	r0, r3
10040b4a:	f7ff fed1 	bl	100408f0 <__NVIC_SetPriority>
  for (i=0; i<32; i++)
10040b4e:	0021      	movs	r1, r4
10040b50:	187b      	adds	r3, r7, r1
10040b52:	781a      	ldrb	r2, [r3, #0]
10040b54:	187b      	adds	r3, r7, r1
10040b56:	3201      	adds	r2, #1
10040b58:	701a      	strb	r2, [r3, #0]
10040b5a:	2317      	movs	r3, #23
10040b5c:	18fb      	adds	r3, r7, r3
10040b5e:	781b      	ldrb	r3, [r3, #0]
10040b60:	2b1f      	cmp	r3, #31
10040b62:	d9ec      	bls.n	10040b3e <SystemInit+0x14e>
  __ASM volatile ("cpsie i" : : : "memory");
10040b64:	b662      	cpsie	i
}
10040b66:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
10040b68:	46c0      	nop			@ (mov r8, r8)
10040b6a:	46bd      	mov	sp, r7
10040b6c:	b007      	add	sp, #28
10040b6e:	bd90      	pop	{r4, r7, pc}
10040b70:	48400000 	.word	0x48400000
10040b74:	48500000 	.word	0x48500000
10040b78:	20000004 	.word	0x20000004
10040b7c:	e000ed00 	.word	0xe000ed00
10040b80:	10040000 	.word	0x10040000
10040b84:	fffffeff 	.word	0xfffffeff
10040b88:	fffffbff 	.word	0xfffffbff
10040b8c:	10001ef8 	.word	0x10001ef8
10040b90:	fcbceccc 	.word	0xfcbceccc
10040b94:	c0ffffff 	.word	0xc0ffffff
10040b98:	fffffc3f 	.word	0xfffffc3f
10040b9c:	ffffc7ff 	.word	0xffffc7ff

10040ba0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10040ba0:	b580      	push	{r7, lr}
10040ba2:	b082      	sub	sp, #8
10040ba4:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
10040ba6:	4b13      	ldr	r3, [pc, #76]	@ (10040bf4 <SystemCoreClockUpdate+0x54>)
10040ba8:	689b      	ldr	r3, [r3, #8]
10040baa:	085b      	lsrs	r3, r3, #1
10040bac:	b2da      	uxtb	r2, r3
10040bae:	1dfb      	adds	r3, r7, #7
10040bb0:	2101      	movs	r1, #1
10040bb2:	400a      	ands	r2, r1
10040bb4:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
10040bb6:	4b0f      	ldr	r3, [pc, #60]	@ (10040bf4 <SystemCoreClockUpdate+0x54>)
10040bb8:	689b      	ldr	r3, [r3, #8]
10040bba:	0a1b      	lsrs	r3, r3, #8
10040bbc:	b2da      	uxtb	r2, r3
10040bbe:	1dbb      	adds	r3, r7, #6
10040bc0:	2107      	movs	r1, #7
10040bc2:	400a      	ands	r2, r1
10040bc4:	701a      	strb	r2, [r3, #0]
#endif

  if (directHSE_enabled)
10040bc6:	1dfb      	adds	r3, r7, #7
10040bc8:	781b      	ldrb	r3, [r3, #0]
10040bca:	2b00      	cmp	r3, #0
10040bcc:	d007      	beq.n	10040bde <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
10040bce:	1dbb      	adds	r3, r7, #6
10040bd0:	781b      	ldrb	r3, [r3, #0]
10040bd2:	3b01      	subs	r3, #1
10040bd4:	4a08      	ldr	r2, [pc, #32]	@ (10040bf8 <SystemCoreClockUpdate+0x58>)
10040bd6:	40da      	lsrs	r2, r3
10040bd8:	4b08      	ldr	r3, [pc, #32]	@ (10040bfc <SystemCoreClockUpdate+0x5c>)
10040bda:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
10040bdc:	e005      	b.n	10040bea <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
10040bde:	1dbb      	adds	r3, r7, #6
10040be0:	781b      	ldrb	r3, [r3, #0]
10040be2:	4a07      	ldr	r2, [pc, #28]	@ (10040c00 <SystemCoreClockUpdate+0x60>)
10040be4:	40da      	lsrs	r2, r3
10040be6:	4b05      	ldr	r3, [pc, #20]	@ (10040bfc <SystemCoreClockUpdate+0x5c>)
10040be8:	601a      	str	r2, [r3, #0]
}
10040bea:	46c0      	nop			@ (mov r8, r8)
10040bec:	46bd      	mov	sp, r7
10040bee:	b002      	add	sp, #8
10040bf0:	bd80      	pop	{r7, pc}
10040bf2:	46c0      	nop			@ (mov r8, r8)
10040bf4:	48400000 	.word	0x48400000
10040bf8:	01e84800 	.word	0x01e84800
10040bfc:	200002c0 	.word	0x200002c0
10040c00:	03d09000 	.word	0x03d09000

10040c04 <CPUcontextRestore>:
  *         by popping it from the stack 
  * @param  None
  * @retval None
  */
__WEAK void CPUcontextRestore(void)
{
10040c04:	b580      	push	{r7, lr}
10040c06:	af00      	add	r7, sp, #0
}
10040c08:	46c0      	nop			@ (mov r8, r8)
10040c0a:	46bd      	mov	sp, r7
10040c0c:	bd80      	pop	{r7, pc}
	...

10040c10 <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
10040c10:	4810      	ldr	r0, [pc, #64]	@ (10040c54 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
10040c12:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
10040c14:	f7ff feec 	bl	100409f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
10040c18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10040c1a:	e003      	b.n	10040c24 <LoopCopyDataInit>

10040c1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
10040c1c:	4b0e      	ldr	r3, [pc, #56]	@ (10040c58 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10040c1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10040c20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10040c22:	3104      	adds	r1, #4

10040c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
10040c24:	480d      	ldr	r0, [pc, #52]	@ (10040c5c <LoopForever+0xa>)
  ldr  r3, =_edata
10040c26:	4b0e      	ldr	r3, [pc, #56]	@ (10040c60 <LoopForever+0xe>)
  adds  r2, r0, r1
10040c28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10040c2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10040c2c:	d3f6      	bcc.n	10040c1c <CopyDataInit>
  ldr  r2, =_sbss
10040c2e:	4a0d      	ldr	r2, [pc, #52]	@ (10040c64 <LoopForever+0x12>)
  b  LoopFillZerobss
10040c30:	e002      	b.n	10040c38 <LoopFillZerobss>

10040c32 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
10040c32:	2300      	movs	r3, #0
  str  r3, [r2]
10040c34:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10040c36:	3204      	adds	r2, #4

10040c38 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
10040c38:	4b0b      	ldr	r3, [pc, #44]	@ (10040c68 <LoopForever+0x16>)
  cmp  r2, r3
10040c3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
10040c3c:	d3f9      	bcc.n	10040c32 <FillZerobss>
  ldr  r2, =_sbssblue
10040c3e:	4a0b      	ldr	r2, [pc, #44]	@ (10040c6c <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
10040c40:	e002      	b.n	10040c48 <LoopFillZeroBlueRam>

10040c42 <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
10040c42:	2300      	movs	r3, #0
  str  r3, [r2]
10040c44:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10040c46:	3204      	adds	r2, #4

10040c48 <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
10040c48:	4b09      	ldr	r3, [pc, #36]	@ (10040c70 <LoopForever+0x1e>)
  cmp  r2, r3
10040c4a:	429a      	cmp	r2, r3
  bcc  FillZerobssram
10040c4c:	d3f9      	bcc.n	10040c42 <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
10040c4e:	f7ff fc29 	bl	100404a4 <main>

10040c52 <LoopForever>:

LoopForever:
    b LoopForever
10040c52:	e7fe      	b.n	10040c52 <LoopForever>
   ldr   r0, =_estack
10040c54:	20006000 	.word	0x20006000
  ldr  r3, =_sidata
10040c58:	100437dc 	.word	0x100437dc
  ldr  r0, =_sdata
10040c5c:	200002bc 	.word	0x200002bc
  ldr  r3, =_edata
10040c60:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
10040c64:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
10040c68:	200002bc 	.word	0x200002bc
  ldr  r2, =_sbssblue
10040c6c:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
10040c70:	200000c0 	.word	0x200000c0

10040c74 <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
10040c74:	e7fe      	b.n	10040c74 <ADC_IRQHandler>
	...

10040c78 <LL_PWR_IsEnabledPUPDCfg>:
{
10040c78:	b580      	push	{r7, lr}
10040c7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_APC) == (PWR_CR1_APC)) ? 1UL : 0UL);
10040c7c:	4b05      	ldr	r3, [pc, #20]	@ (10040c94 <LL_PWR_IsEnabledPUPDCfg+0x1c>)
10040c7e:	681b      	ldr	r3, [r3, #0]
10040c80:	2210      	movs	r2, #16
10040c82:	4013      	ands	r3, r2
10040c84:	2b10      	cmp	r3, #16
10040c86:	d101      	bne.n	10040c8c <LL_PWR_IsEnabledPUPDCfg+0x14>
10040c88:	2301      	movs	r3, #1
10040c8a:	e000      	b.n	10040c8e <LL_PWR_IsEnabledPUPDCfg+0x16>
10040c8c:	2300      	movs	r3, #0
}
10040c8e:	0018      	movs	r0, r3
10040c90:	46bd      	mov	sp, r7
10040c92:	bd80      	pop	{r7, pc}
10040c94:	48500000 	.word	0x48500000

10040c98 <LL_PWR_EnableGPIOPullUp>:
{
10040c98:	b580      	push	{r7, lr}
10040c9a:	b082      	sub	sp, #8
10040c9c:	af00      	add	r7, sp, #0
10040c9e:	6078      	str	r0, [r7, #4]
10040ca0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
10040ca2:	687b      	ldr	r3, [r7, #4]
10040ca4:	3304      	adds	r3, #4
10040ca6:	681a      	ldr	r2, [r3, #0]
10040ca8:	683b      	ldr	r3, [r7, #0]
10040caa:	43d9      	mvns	r1, r3
10040cac:	687b      	ldr	r3, [r7, #4]
10040cae:	3304      	adds	r3, #4
10040cb0:	400a      	ands	r2, r1
10040cb2:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
10040cb4:	687b      	ldr	r3, [r7, #4]
10040cb6:	6819      	ldr	r1, [r3, #0]
10040cb8:	687b      	ldr	r3, [r7, #4]
10040cba:	683a      	ldr	r2, [r7, #0]
10040cbc:	430a      	orrs	r2, r1
10040cbe:	601a      	str	r2, [r3, #0]
}
10040cc0:	46c0      	nop			@ (mov r8, r8)
10040cc2:	46bd      	mov	sp, r7
10040cc4:	b002      	add	sp, #8
10040cc6:	bd80      	pop	{r7, pc}

10040cc8 <LL_AHB1_GRP1_EnableClock>:
{
10040cc8:	b580      	push	{r7, lr}
10040cca:	b084      	sub	sp, #16
10040ccc:	af00      	add	r7, sp, #0
10040cce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10040cd0:	4b07      	ldr	r3, [pc, #28]	@ (10040cf0 <LL_AHB1_GRP1_EnableClock+0x28>)
10040cd2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10040cd4:	4b06      	ldr	r3, [pc, #24]	@ (10040cf0 <LL_AHB1_GRP1_EnableClock+0x28>)
10040cd6:	687a      	ldr	r2, [r7, #4]
10040cd8:	430a      	orrs	r2, r1
10040cda:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10040cdc:	4b04      	ldr	r3, [pc, #16]	@ (10040cf0 <LL_AHB1_GRP1_EnableClock+0x28>)
10040cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10040ce0:	687a      	ldr	r2, [r7, #4]
10040ce2:	4013      	ands	r3, r2
10040ce4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040ce6:	68fb      	ldr	r3, [r7, #12]
}
10040ce8:	46c0      	nop			@ (mov r8, r8)
10040cea:	46bd      	mov	sp, r7
10040cec:	b004      	add	sp, #16
10040cee:	bd80      	pop	{r7, pc}
10040cf0:	48400000 	.word	0x48400000

10040cf4 <LL_APB0_GRP1_EnableClock>:
{
10040cf4:	b580      	push	{r7, lr}
10040cf6:	b084      	sub	sp, #16
10040cf8:	af00      	add	r7, sp, #0
10040cfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
10040cfc:	4b07      	ldr	r3, [pc, #28]	@ (10040d1c <LL_APB0_GRP1_EnableClock+0x28>)
10040cfe:	6d59      	ldr	r1, [r3, #84]	@ 0x54
10040d00:	4b06      	ldr	r3, [pc, #24]	@ (10040d1c <LL_APB0_GRP1_EnableClock+0x28>)
10040d02:	687a      	ldr	r2, [r7, #4]
10040d04:	430a      	orrs	r2, r1
10040d06:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10040d08:	4b04      	ldr	r3, [pc, #16]	@ (10040d1c <LL_APB0_GRP1_EnableClock+0x28>)
10040d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10040d0c:	687a      	ldr	r2, [r7, #4]
10040d0e:	4013      	ands	r3, r2
10040d10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040d12:	68fb      	ldr	r3, [r7, #12]
}
10040d14:	46c0      	nop			@ (mov r8, r8)
10040d16:	46bd      	mov	sp, r7
10040d18:	b004      	add	sp, #16
10040d1a:	bd80      	pop	{r7, pc}
10040d1c:	48400000 	.word	0x48400000

10040d20 <LL_APB1_GRP1_EnableClock>:
  * @arg LL_APB1_GRP1_PERIPH_I2C2
  * @retval None
  * @note   LL_APB1_GRP1_PERIPH_SPI1, LL_APB1_GRP1_PERIPH_SPI2 and LL_APB1_GRP1_PERIPH_I2C2 are valid for STM32WB06 and STM32WB07
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
10040d20:	b580      	push	{r7, lr}
10040d22:	b084      	sub	sp, #16
10040d24:	af00      	add	r7, sp, #0
10040d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
10040d28:	4b07      	ldr	r3, [pc, #28]	@ (10040d48 <LL_APB1_GRP1_EnableClock+0x28>)
10040d2a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10040d2c:	4b06      	ldr	r3, [pc, #24]	@ (10040d48 <LL_APB1_GRP1_EnableClock+0x28>)
10040d2e:	687a      	ldr	r2, [r7, #4]
10040d30:	430a      	orrs	r2, r1
10040d32:	659a      	str	r2, [r3, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10040d34:	4b04      	ldr	r3, [pc, #16]	@ (10040d48 <LL_APB1_GRP1_EnableClock+0x28>)
10040d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10040d38:	687a      	ldr	r2, [r7, #4]
10040d3a:	4013      	ands	r3, r2
10040d3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040d3e:	68fb      	ldr	r3, [r7, #12]
}
10040d40:	46c0      	nop			@ (mov r8, r8)
10040d42:	46bd      	mov	sp, r7
10040d44:	b004      	add	sp, #16
10040d46:	bd80      	pop	{r7, pc}
10040d48:	48400000 	.word	0x48400000

10040d4c <BSP_LED_Init>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
10040d4c:	b590      	push	{r4, r7, lr}
10040d4e:	b089      	sub	sp, #36	@ 0x24
10040d50:	af00      	add	r7, sp, #0
10040d52:	0002      	movs	r2, r0
10040d54:	1dfb      	adds	r3, r7, #7
10040d56:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LD1)
10040d58:	1dfb      	adds	r3, r7, #7
10040d5a:	781b      	ldrb	r3, [r3, #0]
10040d5c:	2b00      	cmp	r3, #0
10040d5e:	d103      	bne.n	10040d68 <BSP_LED_Init+0x1c>
  {
    LD1_GPIO_CLK_ENABLE();
10040d60:	2008      	movs	r0, #8
10040d62:	f7ff ffb1 	bl	10040cc8 <LL_AHB1_GRP1_EnableClock>
10040d66:	e00a      	b.n	10040d7e <BSP_LED_Init+0x32>
  }
  else if (Led == LD2)
10040d68:	1dfb      	adds	r3, r7, #7
10040d6a:	781b      	ldrb	r3, [r3, #0]
10040d6c:	2b01      	cmp	r3, #1
10040d6e:	d103      	bne.n	10040d78 <BSP_LED_Init+0x2c>
  {
    LD2_GPIO_CLK_ENABLE();
10040d70:	2008      	movs	r0, #8
10040d72:	f7ff ffa9 	bl	10040cc8 <LL_AHB1_GRP1_EnableClock>
10040d76:	e002      	b.n	10040d7e <BSP_LED_Init+0x32>
  }
  else /* Led = LD3 */
  {
    LD3_GPIO_CLK_ENABLE();
10040d78:	2008      	movs	r0, #8
10040d7a:	f7ff ffa5 	bl	10040cc8 <LL_AHB1_GRP1_EnableClock>
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
10040d7e:	1dfb      	adds	r3, r7, #7
10040d80:	781a      	ldrb	r2, [r3, #0]
10040d82:	4b28      	ldr	r3, [pc, #160]	@ (10040e24 <BSP_LED_Init+0xd8>)
10040d84:	0052      	lsls	r2, r2, #1
10040d86:	5ad3      	ldrh	r3, [r2, r3]
10040d88:	001a      	movs	r2, r3
10040d8a:	240c      	movs	r4, #12
10040d8c:	193b      	adds	r3, r7, r4
10040d8e:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
10040d90:	193b      	adds	r3, r7, r4
10040d92:	2201      	movs	r2, #1
10040d94:	605a      	str	r2, [r3, #4]
  GPIO_Init.Pull  = GPIO_PULLUP;
10040d96:	193b      	adds	r3, r7, r4
10040d98:	2201      	movs	r2, #1
10040d9a:	609a      	str	r2, [r3, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
10040d9c:	193b      	adds	r3, r7, r4
10040d9e:	2202      	movs	r2, #2
10040da0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
10040da2:	1dfb      	adds	r3, r7, #7
10040da4:	781a      	ldrb	r2, [r3, #0]
10040da6:	4b20      	ldr	r3, [pc, #128]	@ (10040e28 <BSP_LED_Init+0xdc>)
10040da8:	0092      	lsls	r2, r2, #2
10040daa:	58d3      	ldr	r3, [r2, r3]
10040dac:	193a      	adds	r2, r7, r4
10040dae:	0011      	movs	r1, r2
10040db0:	0018      	movs	r0, r3
10040db2:	f000 fb83 	bl	100414bc <HAL_GPIO_Init>

  if( LL_PWR_IsEnabledPUPDCfg() != 0)
10040db6:	f7ff ff5f 	bl	10040c78 <LL_PWR_IsEnabledPUPDCfg>
10040dba:	1e03      	subs	r3, r0, #0
10040dbc:	d01f      	beq.n	10040dfe <BSP_LED_Init+0xb2>
  {
    if (LED_PORT[Led] == GPIOA)
10040dbe:	1dfb      	adds	r3, r7, #7
10040dc0:	781a      	ldrb	r2, [r3, #0]
10040dc2:	4b19      	ldr	r3, [pc, #100]	@ (10040e28 <BSP_LED_Init+0xdc>)
10040dc4:	0092      	lsls	r2, r2, #2
10040dc6:	58d2      	ldr	r2, [r2, r3]
10040dc8:	2390      	movs	r3, #144	@ 0x90
10040dca:	05db      	lsls	r3, r3, #23
10040dcc:	429a      	cmp	r2, r3
10040dce:	d106      	bne.n	10040dde <BSP_LED_Init+0x92>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
10040dd0:	193b      	adds	r3, r7, r4
10040dd2:	681b      	ldr	r3, [r3, #0]
10040dd4:	4a15      	ldr	r2, [pc, #84]	@ (10040e2c <BSP_LED_Init+0xe0>)
10040dd6:	0019      	movs	r1, r3
10040dd8:	0010      	movs	r0, r2
10040dda:	f7ff ff5d 	bl	10040c98 <LL_PWR_EnableGPIOPullUp>
    }
     if (LED_PORT[Led] == GPIOB)
10040dde:	1dfb      	adds	r3, r7, #7
10040de0:	781a      	ldrb	r2, [r3, #0]
10040de2:	4b11      	ldr	r3, [pc, #68]	@ (10040e28 <BSP_LED_Init+0xdc>)
10040de4:	0092      	lsls	r2, r2, #2
10040de6:	58d3      	ldr	r3, [r2, r3]
10040de8:	4a11      	ldr	r2, [pc, #68]	@ (10040e30 <BSP_LED_Init+0xe4>)
10040dea:	4293      	cmp	r3, r2
10040dec:	d107      	bne.n	10040dfe <BSP_LED_Init+0xb2>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_B, GPIO_Init.Pin);
10040dee:	230c      	movs	r3, #12
10040df0:	18fb      	adds	r3, r7, r3
10040df2:	681b      	ldr	r3, [r3, #0]
10040df4:	4a0f      	ldr	r2, [pc, #60]	@ (10040e34 <BSP_LED_Init+0xe8>)
10040df6:	0019      	movs	r1, r3
10040df8:	0010      	movs	r0, r2
10040dfa:	f7ff ff4d 	bl	10040c98 <LL_PWR_EnableGPIOPullUp>
    }
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
10040dfe:	1dfb      	adds	r3, r7, #7
10040e00:	781a      	ldrb	r2, [r3, #0]
10040e02:	4b09      	ldr	r3, [pc, #36]	@ (10040e28 <BSP_LED_Init+0xdc>)
10040e04:	0092      	lsls	r2, r2, #2
10040e06:	58d0      	ldr	r0, [r2, r3]
10040e08:	1dfb      	adds	r3, r7, #7
10040e0a:	781a      	ldrb	r2, [r3, #0]
10040e0c:	4b05      	ldr	r3, [pc, #20]	@ (10040e24 <BSP_LED_Init+0xd8>)
10040e0e:	0052      	lsls	r2, r2, #1
10040e10:	5ad3      	ldrh	r3, [r2, r3]
10040e12:	2201      	movs	r2, #1
10040e14:	0019      	movs	r1, r3
10040e16:	f000 fcfa 	bl	1004180e <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
10040e1a:	2300      	movs	r3, #0
}
10040e1c:	0018      	movs	r0, r3
10040e1e:	46bd      	mov	sp, r7
10040e20:	b009      	add	sp, #36	@ 0x24
10040e22:	bd90      	pop	{r4, r7, pc}
10040e24:	200002c4 	.word	0x200002c4
10040e28:	200002cc 	.word	0x200002cc
10040e2c:	48500020 	.word	0x48500020
10040e30:	48100000 	.word	0x48100000
10040e34:	48500028 	.word	0x48500028

10040e38 <BSP_LED_On>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
10040e38:	b580      	push	{r7, lr}
10040e3a:	b082      	sub	sp, #8
10040e3c:	af00      	add	r7, sp, #0
10040e3e:	0002      	movs	r2, r0
10040e40:	1dfb      	adds	r3, r7, #7
10040e42:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
10040e44:	1dfb      	adds	r3, r7, #7
10040e46:	781a      	ldrb	r2, [r3, #0]
10040e48:	4b08      	ldr	r3, [pc, #32]	@ (10040e6c <BSP_LED_On+0x34>)
10040e4a:	0092      	lsls	r2, r2, #2
10040e4c:	58d0      	ldr	r0, [r2, r3]
10040e4e:	1dfb      	adds	r3, r7, #7
10040e50:	781a      	ldrb	r2, [r3, #0]
10040e52:	4b07      	ldr	r3, [pc, #28]	@ (10040e70 <BSP_LED_On+0x38>)
10040e54:	0052      	lsls	r2, r2, #1
10040e56:	5ad3      	ldrh	r3, [r2, r3]
10040e58:	2200      	movs	r2, #0
10040e5a:	0019      	movs	r1, r3
10040e5c:	f000 fcd7 	bl	1004180e <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
10040e60:	2300      	movs	r3, #0
}
10040e62:	0018      	movs	r0, r3
10040e64:	46bd      	mov	sp, r7
10040e66:	b002      	add	sp, #8
10040e68:	bd80      	pop	{r7, pc}
10040e6a:	46c0      	nop			@ (mov r8, r8)
10040e6c:	200002cc 	.word	0x200002cc
10040e70:	200002c4 	.word	0x200002c4

10040e74 <BSP_LED_Toggle>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
10040e74:	b580      	push	{r7, lr}
10040e76:	b082      	sub	sp, #8
10040e78:	af00      	add	r7, sp, #0
10040e7a:	0002      	movs	r2, r0
10040e7c:	1dfb      	adds	r3, r7, #7
10040e7e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
10040e80:	1dfb      	adds	r3, r7, #7
10040e82:	781a      	ldrb	r2, [r3, #0]
10040e84:	4b07      	ldr	r3, [pc, #28]	@ (10040ea4 <BSP_LED_Toggle+0x30>)
10040e86:	0092      	lsls	r2, r2, #2
10040e88:	58d0      	ldr	r0, [r2, r3]
10040e8a:	1dfb      	adds	r3, r7, #7
10040e8c:	781a      	ldrb	r2, [r3, #0]
10040e8e:	4b06      	ldr	r3, [pc, #24]	@ (10040ea8 <BSP_LED_Toggle+0x34>)
10040e90:	0052      	lsls	r2, r2, #1
10040e92:	5ad3      	ldrh	r3, [r2, r3]
10040e94:	0019      	movs	r1, r3
10040e96:	f000 fcd7 	bl	10041848 <HAL_GPIO_TogglePin>
  return BSP_ERROR_NONE;
10040e9a:	2300      	movs	r3, #0
}
10040e9c:	0018      	movs	r0, r3
10040e9e:	46bd      	mov	sp, r7
10040ea0:	b002      	add	sp, #8
10040ea2:	bd80      	pop	{r7, pc}
10040ea4:	200002cc 	.word	0x200002cc
10040ea8:	200002c4 	.word	0x200002c4

10040eac <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code.
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
10040eac:	b580      	push	{r7, lr}
10040eae:	b088      	sub	sp, #32
10040eb0:	af00      	add	r7, sp, #0
10040eb2:	0002      	movs	r2, r0
10040eb4:	1dfb      	adds	r3, r7, #7
10040eb6:	701a      	strb	r2, [r3, #0]
10040eb8:	1dbb      	adds	r3, r7, #6
10040eba:	1c0a      	adds	r2, r1, #0
10040ebc:	701a      	strb	r2, [r3, #0]
  int32_t               status = BSP_ERROR_NONE;
10040ebe:	2300      	movs	r3, #0
10040ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef      GPIO_Init;

  /* Enable the BUTTON clock */
  if (Button == B1)
10040ec2:	1dfb      	adds	r3, r7, #7
10040ec4:	781b      	ldrb	r3, [r3, #0]
10040ec6:	2b00      	cmp	r3, #0
10040ec8:	d103      	bne.n	10040ed2 <BSP_PB_Init+0x26>
  {
    B1_GPIO_CLK_ENABLE();
10040eca:	2004      	movs	r0, #4
10040ecc:	f7ff fefc 	bl	10040cc8 <LL_AHB1_GRP1_EnableClock>
10040ed0:	e00a      	b.n	10040ee8 <BSP_PB_Init+0x3c>
  }
  else if (Button == B2)
10040ed2:	1dfb      	adds	r3, r7, #7
10040ed4:	781b      	ldrb	r3, [r3, #0]
10040ed6:	2b01      	cmp	r3, #1
10040ed8:	d103      	bne.n	10040ee2 <BSP_PB_Init+0x36>
  {
    B2_GPIO_CLK_ENABLE();
10040eda:	2008      	movs	r0, #8
10040edc:	f7ff fef4 	bl	10040cc8 <LL_AHB1_GRP1_EnableClock>
10040ee0:	e002      	b.n	10040ee8 <BSP_PB_Init+0x3c>
  }
  else /* B3 */
  {
    B3_GPIO_CLK_ENABLE();
10040ee2:	2008      	movs	r0, #8
10040ee4:	f7ff fef0 	bl	10040cc8 <LL_AHB1_GRP1_EnableClock>
  }

  GPIO_Init.Pin   = BUTTON_PIN[Button];
10040ee8:	1dfb      	adds	r3, r7, #7
10040eea:	781a      	ldrb	r2, [r3, #0]
10040eec:	4b37      	ldr	r3, [pc, #220]	@ (10040fcc <BSP_PB_Init+0x120>)
10040eee:	0052      	lsls	r2, r2, #1
10040ef0:	5ad3      	ldrh	r3, [r2, r3]
10040ef2:	001a      	movs	r2, r3
10040ef4:	2108      	movs	r1, #8
10040ef6:	187b      	adds	r3, r7, r1
10040ef8:	601a      	str	r2, [r3, #0]
  GPIO_Init.Pull  = GPIO_PULLUP;
10040efa:	187b      	adds	r3, r7, r1
10040efc:	2201      	movs	r2, #1
10040efe:	609a      	str	r2, [r3, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
10040f00:	187b      	adds	r3, r7, r1
10040f02:	2202      	movs	r2, #2
10040f04:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
10040f06:	1dbb      	adds	r3, r7, #6
10040f08:	781b      	ldrb	r3, [r3, #0]
10040f0a:	2b00      	cmp	r3, #0
10040f0c:	d10c      	bne.n	10040f28 <BSP_PB_Init+0x7c>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
10040f0e:	187b      	adds	r3, r7, r1
10040f10:	2200      	movs	r2, #0
10040f12:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
10040f14:	1dfb      	adds	r3, r7, #7
10040f16:	781a      	ldrb	r2, [r3, #0]
10040f18:	4b2d      	ldr	r3, [pc, #180]	@ (10040fd0 <BSP_PB_Init+0x124>)
10040f1a:	0092      	lsls	r2, r2, #2
10040f1c:	58d3      	ldr	r3, [r2, r3]
10040f1e:	187a      	adds	r2, r7, r1
10040f20:	0011      	movs	r1, r2
10040f22:	0018      	movs	r0, r3
10040f24:	f000 faca 	bl	100414bc <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
10040f28:	1dbb      	adds	r3, r7, #6
10040f2a:	781b      	ldrb	r3, [r3, #0]
10040f2c:	2b01      	cmp	r3, #1
10040f2e:	d123      	bne.n	10040f78 <BSP_PB_Init+0xcc>
  {
    __HAL_RCC_SYSCFG_CLK_ENABLE();
10040f30:	2380      	movs	r3, #128	@ 0x80
10040f32:	005b      	lsls	r3, r3, #1
10040f34:	0018      	movs	r0, r3
10040f36:	f7ff fedd 	bl	10040cf4 <LL_APB0_GRP1_EnableClock>

    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
10040f3a:	2108      	movs	r1, #8
10040f3c:	187b      	adds	r3, r7, r1
10040f3e:	2280      	movs	r2, #128	@ 0x80
10040f40:	0252      	lsls	r2, r2, #9
10040f42:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
10040f44:	1dfb      	adds	r3, r7, #7
10040f46:	781a      	ldrb	r2, [r3, #0]
10040f48:	4b21      	ldr	r3, [pc, #132]	@ (10040fd0 <BSP_PB_Init+0x124>)
10040f4a:	0092      	lsls	r2, r2, #2
10040f4c:	58d3      	ldr	r3, [r2, r3]
10040f4e:	187a      	adds	r2, r7, r1
10040f50:	0011      	movs	r1, r2
10040f52:	0018      	movs	r0, r3
10040f54:	f000 fab2 	bl	100414bc <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(BUTTON_IRQn[Button], NVIC_LOW_PRIORITY, 0);
10040f58:	1dfb      	adds	r3, r7, #7
10040f5a:	781b      	ldrb	r3, [r3, #0]
10040f5c:	4a1d      	ldr	r2, [pc, #116]	@ (10040fd4 <BSP_PB_Init+0x128>)
10040f5e:	56d3      	ldrsb	r3, [r2, r3]
10040f60:	2200      	movs	r2, #0
10040f62:	2103      	movs	r1, #3
10040f64:	0018      	movs	r0, r3
10040f66:	f000 fa77 	bl	10041458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
10040f6a:	1dfb      	adds	r3, r7, #7
10040f6c:	781b      	ldrb	r3, [r3, #0]
10040f6e:	4a19      	ldr	r2, [pc, #100]	@ (10040fd4 <BSP_PB_Init+0x128>)
10040f70:	56d3      	ldrsb	r3, [r2, r3]
10040f72:	0018      	movs	r0, r3
10040f74:	f000 fa85 	bl	10041482 <HAL_NVIC_EnableIRQ>

  }
  if( LL_PWR_IsEnabledPUPDCfg() != 0)
10040f78:	f7ff fe7e 	bl	10040c78 <LL_PWR_IsEnabledPUPDCfg>
10040f7c:	1e03      	subs	r3, r0, #0
10040f7e:	d020      	beq.n	10040fc2 <BSP_PB_Init+0x116>
  {
    if (BUTTON_PORT[Button] == GPIOA)
10040f80:	1dfb      	adds	r3, r7, #7
10040f82:	781a      	ldrb	r2, [r3, #0]
10040f84:	4b12      	ldr	r3, [pc, #72]	@ (10040fd0 <BSP_PB_Init+0x124>)
10040f86:	0092      	lsls	r2, r2, #2
10040f88:	58d2      	ldr	r2, [r2, r3]
10040f8a:	2390      	movs	r3, #144	@ 0x90
10040f8c:	05db      	lsls	r3, r3, #23
10040f8e:	429a      	cmp	r2, r3
10040f90:	d107      	bne.n	10040fa2 <BSP_PB_Init+0xf6>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
10040f92:	2308      	movs	r3, #8
10040f94:	18fb      	adds	r3, r7, r3
10040f96:	681b      	ldr	r3, [r3, #0]
10040f98:	4a0f      	ldr	r2, [pc, #60]	@ (10040fd8 <BSP_PB_Init+0x12c>)
10040f9a:	0019      	movs	r1, r3
10040f9c:	0010      	movs	r0, r2
10040f9e:	f7ff fe7b 	bl	10040c98 <LL_PWR_EnableGPIOPullUp>
    }
     if (BUTTON_PORT[Button] == GPIOB)
10040fa2:	1dfb      	adds	r3, r7, #7
10040fa4:	781a      	ldrb	r2, [r3, #0]
10040fa6:	4b0a      	ldr	r3, [pc, #40]	@ (10040fd0 <BSP_PB_Init+0x124>)
10040fa8:	0092      	lsls	r2, r2, #2
10040faa:	58d3      	ldr	r3, [r2, r3]
10040fac:	4a0b      	ldr	r2, [pc, #44]	@ (10040fdc <BSP_PB_Init+0x130>)
10040fae:	4293      	cmp	r3, r2
10040fb0:	d107      	bne.n	10040fc2 <BSP_PB_Init+0x116>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_B, GPIO_Init.Pin);
10040fb2:	2308      	movs	r3, #8
10040fb4:	18fb      	adds	r3, r7, r3
10040fb6:	681b      	ldr	r3, [r3, #0]
10040fb8:	4a09      	ldr	r2, [pc, #36]	@ (10040fe0 <BSP_PB_Init+0x134>)
10040fba:	0019      	movs	r1, r3
10040fbc:	0010      	movs	r0, r2
10040fbe:	f7ff fe6b 	bl	10040c98 <LL_PWR_EnableGPIOPullUp>
    }
  }
  return status;
10040fc2:	69fb      	ldr	r3, [r7, #28]
}
10040fc4:	0018      	movs	r0, r3
10040fc6:	46bd      	mov	sp, r7
10040fc8:	b008      	add	sp, #32
10040fca:	bd80      	pop	{r7, pc}
10040fcc:	200002d8 	.word	0x200002d8
10040fd0:	200002e0 	.word	0x200002e0
10040fd4:	200002ec 	.word	0x200002ec
10040fd8:	48500020 	.word	0x48500020
10040fdc:	48100000 	.word	0x48100000
10040fe0:	48500028 	.word	0x48500028

10040fe4 <BSP_PB_IRQHandler>:
  * @param  GPIO_Pin Contains the pin state of GPIO when the interrupt occurred
  * @retval None.
  */

void BSP_PB_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10040fe4:	b580      	push	{r7, lr}
10040fe6:	b082      	sub	sp, #8
10040fe8:	af00      	add	r7, sp, #0
10040fea:	6078      	str	r0, [r7, #4]
10040fec:	000a      	movs	r2, r1
10040fee:	1cbb      	adds	r3, r7, #2
10040ff0:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_EXTI_IRQHandler( GPIOx, GPIO_Pin);
10040ff2:	1cbb      	adds	r3, r7, #2
10040ff4:	881a      	ldrh	r2, [r3, #0]
10040ff6:	687b      	ldr	r3, [r7, #4]
10040ff8:	0011      	movs	r1, r2
10040ffa:	0018      	movs	r0, r3
10040ffc:	f000 fc3f 	bl	1004187e <HAL_GPIO_EXTI_IRQHandler>
}
10041000:	46c0      	nop			@ (mov r8, r8)
10041002:	46bd      	mov	sp, r7
10041004:	b002      	add	sp, #8
10041006:	bd80      	pop	{r7, pc}

10041008 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code.
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
10041008:	b580      	push	{r7, lr}
1004100a:	b084      	sub	sp, #16
1004100c:	af00      	add	r7, sp, #0
1004100e:	0002      	movs	r2, r0
10041010:	6039      	str	r1, [r7, #0]
10041012:	1dfb      	adds	r3, r7, #7
10041014:	701a      	strb	r2, [r3, #0]
  int32_t status = BSP_ERROR_NONE;
10041016:	2300      	movs	r3, #0
10041018:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
1004101a:	683b      	ldr	r3, [r7, #0]
1004101c:	2b00      	cmp	r3, #0
1004101e:	d103      	bne.n	10041028 <BSP_COM_Init+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
10041020:	2302      	movs	r3, #2
10041022:	425b      	negs	r3, r3
10041024:	60fb      	str	r3, [r7, #12]
10041026:	e026      	b.n	10041076 <BSP_COM_Init+0x6e>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
10041028:	1dfb      	adds	r3, r7, #7
1004102a:	7819      	ldrb	r1, [r3, #0]
1004102c:	1dfb      	adds	r3, r7, #7
1004102e:	781a      	ldrb	r2, [r3, #0]
10041030:	4b13      	ldr	r3, [pc, #76]	@ (10041080 <BSP_COM_Init+0x78>)
10041032:	0089      	lsls	r1, r1, #2
10041034:	58c9      	ldr	r1, [r1, r3]
10041036:	4b13      	ldr	r3, [pc, #76]	@ (10041084 <BSP_COM_Init+0x7c>)
10041038:	2094      	movs	r0, #148	@ 0x94
1004103a:	4342      	muls	r2, r0
1004103c:	50d1      	str	r1, [r2, r3]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
1004103e:	1dfb      	adds	r3, r7, #7
10041040:	781b      	ldrb	r3, [r3, #0]
10041042:	2294      	movs	r2, #148	@ 0x94
10041044:	435a      	muls	r2, r3
10041046:	4b0f      	ldr	r3, [pc, #60]	@ (10041084 <BSP_COM_Init+0x7c>)
10041048:	18d3      	adds	r3, r2, r3
1004104a:	0018      	movs	r0, r3
1004104c:	f000 f868 	bl	10041120 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
10041050:	68fb      	ldr	r3, [r7, #12]
10041052:	2b00      	cmp	r3, #0
10041054:	d10f      	bne.n	10041076 <BSP_COM_Init+0x6e>
    {
      if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
10041056:	1dfb      	adds	r3, r7, #7
10041058:	781b      	ldrb	r3, [r3, #0]
1004105a:	2294      	movs	r2, #148	@ 0x94
1004105c:	435a      	muls	r2, r3
1004105e:	4b09      	ldr	r3, [pc, #36]	@ (10041084 <BSP_COM_Init+0x7c>)
10041060:	18d3      	adds	r3, r2, r3
10041062:	683a      	ldr	r2, [r7, #0]
10041064:	0011      	movs	r1, r2
10041066:	0018      	movs	r0, r3
10041068:	f000 f828 	bl	100410bc <MX_USART1_Init>
1004106c:	1e03      	subs	r3, r0, #0
1004106e:	d002      	beq.n	10041076 <BSP_COM_Init+0x6e>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
10041070:	2304      	movs	r3, #4
10041072:	425b      	negs	r3, r3
10041074:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return status;
10041076:	68fb      	ldr	r3, [r7, #12]
}
10041078:	0018      	movs	r0, r3
1004107a:	46bd      	mov	sp, r7
1004107c:	b004      	add	sp, #16
1004107e:	bd80      	pop	{r7, pc}
10041080:	200002f0 	.word	0x200002f0
10041084:	200000d4 	.word	0x200000d4

10041088 <__io_putchar>:
  return 1;
}

#elif defined(__GNUC__)
int __io_putchar(int ch)
{
10041088:	b580      	push	{r7, lr}
1004108a:	b082      	sub	sp, #8
1004108c:	af00      	add	r7, sp, #0
1004108e:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
10041090:	4b08      	ldr	r3, [pc, #32]	@ (100410b4 <__io_putchar+0x2c>)
10041092:	781b      	ldrb	r3, [r3, #0]
10041094:	001a      	movs	r2, r3
10041096:	2394      	movs	r3, #148	@ 0x94
10041098:	435a      	muls	r2, r3
1004109a:	4b07      	ldr	r3, [pc, #28]	@ (100410b8 <__io_putchar+0x30>)
1004109c:	18d0      	adds	r0, r2, r3
1004109e:	23fa      	movs	r3, #250	@ 0xfa
100410a0:	009b      	lsls	r3, r3, #2
100410a2:	1d39      	adds	r1, r7, #4
100410a4:	2201      	movs	r2, #1
100410a6:	f000 ff9d 	bl	10041fe4 <HAL_UART_Transmit>
  return ch;
100410aa:	687b      	ldr	r3, [r7, #4]
}
100410ac:	0018      	movs	r0, r3
100410ae:	46bd      	mov	sp, r7
100410b0:	b002      	add	sp, #8
100410b2:	bd80      	pop	{r7, pc}
100410b4:	20000168 	.word	0x20000168
100410b8:	200000d4 	.word	0x200000d4

100410bc <MX_USART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
100410bc:	b580      	push	{r7, lr}
100410be:	b082      	sub	sp, #8
100410c0:	af00      	add	r7, sp, #0
100410c2:	6078      	str	r0, [r7, #4]
100410c4:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
100410c6:	683b      	ldr	r3, [r7, #0]
100410c8:	681a      	ldr	r2, [r3, #0]
100410ca:	687b      	ldr	r3, [r7, #4]
100410cc:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
100410ce:	683b      	ldr	r3, [r7, #0]
100410d0:	685a      	ldr	r2, [r3, #4]
100410d2:	687b      	ldr	r3, [r7, #4]
100410d4:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
100410d6:	683b      	ldr	r3, [r7, #0]
100410d8:	891b      	ldrh	r3, [r3, #8]
100410da:	001a      	movs	r2, r3
100410dc:	687b      	ldr	r3, [r7, #4]
100410de:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
100410e0:	683b      	ldr	r3, [r7, #0]
100410e2:	895b      	ldrh	r3, [r3, #10]
100410e4:	001a      	movs	r2, r3
100410e6:	687b      	ldr	r3, [r7, #4]
100410e8:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
100410ea:	687b      	ldr	r3, [r7, #4]
100410ec:	220c      	movs	r2, #12
100410ee:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
100410f0:	683b      	ldr	r3, [r7, #0]
100410f2:	899b      	ldrh	r3, [r3, #12]
100410f4:	001a      	movs	r2, r3
100410f6:	687b      	ldr	r3, [r7, #4]
100410f8:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
100410fa:	687b      	ldr	r3, [r7, #4]
100410fc:	2280      	movs	r2, #128	@ 0x80
100410fe:	0212      	lsls	r2, r2, #8
10041100:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10041102:	687b      	ldr	r3, [r7, #4]
10041104:	2200      	movs	r2, #0
10041106:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
10041108:	687b      	ldr	r3, [r7, #4]
1004110a:	2200      	movs	r2, #0
1004110c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
1004110e:	687b      	ldr	r3, [r7, #4]
10041110:	0018      	movs	r0, r3
10041112:	f000 ff09 	bl	10041f28 <HAL_UART_Init>
10041116:	0003      	movs	r3, r0
}
10041118:	0018      	movs	r0, r3
1004111a:	46bd      	mov	sp, r7
1004111c:	b002      	add	sp, #8
1004111e:	bd80      	pop	{r7, pc}

10041120 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
10041120:	b590      	push	{r4, r7, lr}
10041122:	b089      	sub	sp, #36	@ 0x24
10041124:	af00      	add	r7, sp, #0
10041126:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable COM and GPIO clocks */
  COM1_TX_GPIO_CLK_ENABLE();
10041128:	2004      	movs	r0, #4
1004112a:	f7ff fdcd 	bl	10040cc8 <LL_AHB1_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
1004112e:	2008      	movs	r0, #8
10041130:	f7ff fdca 	bl	10040cc8 <LL_AHB1_GRP1_EnableClock>
  COM1_CLK_ENABLE();
10041134:	2380      	movs	r3, #128	@ 0x80
10041136:	00db      	lsls	r3, r3, #3
10041138:	0018      	movs	r0, r3
1004113a:	f7ff fdf1 	bl	10040d20 <LL_APB1_GRP1_EnableClock>

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM1_TX_PIN;
1004113e:	240c      	movs	r4, #12
10041140:	193b      	adds	r3, r7, r4
10041142:	2202      	movs	r2, #2
10041144:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
10041146:	193b      	adds	r3, r7, r4
10041148:	2202      	movs	r2, #2
1004114a:	605a      	str	r2, [r3, #4]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
1004114c:	193b      	adds	r3, r7, r4
1004114e:	2202      	movs	r2, #2
10041150:	60da      	str	r2, [r3, #12]
  GPIO_Init.Pull      = GPIO_PULLUP;
10041152:	193b      	adds	r3, r7, r4
10041154:	2201      	movs	r2, #1
10041156:	609a      	str	r2, [r3, #8]
  GPIO_Init.Alternate = COM1_TX_AF;
10041158:	193b      	adds	r3, r7, r4
1004115a:	2202      	movs	r2, #2
1004115c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &GPIO_Init);
1004115e:	193a      	adds	r2, r7, r4
10041160:	2390      	movs	r3, #144	@ 0x90
10041162:	05db      	lsls	r3, r3, #23
10041164:	0011      	movs	r1, r2
10041166:	0018      	movs	r0, r3
10041168:	f000 f9a8 	bl	100414bc <HAL_GPIO_Init>
  if( LL_PWR_IsEnabledPUPDCfg() != 0)
1004116c:	f7ff fd84 	bl	10040c78 <LL_PWR_IsEnabledPUPDCfg>
10041170:	1e03      	subs	r3, r0, #0
10041172:	d006      	beq.n	10041182 <UART_MspInit+0x62>
  {
    LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
10041174:	193b      	adds	r3, r7, r4
10041176:	681b      	ldr	r3, [r3, #0]
10041178:	4a0a      	ldr	r2, [pc, #40]	@ (100411a4 <UART_MspInit+0x84>)
1004117a:	0019      	movs	r1, r3
1004117c:	0010      	movs	r0, r2
1004117e:	f7ff fd8b 	bl	10040c98 <LL_PWR_EnableGPIOPullUp>
  }
  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM1_RX_PIN;
10041182:	210c      	movs	r1, #12
10041184:	187b      	adds	r3, r7, r1
10041186:	2201      	movs	r2, #1
10041188:	601a      	str	r2, [r3, #0]
  GPIO_Init.Alternate = COM1_RX_AF;
1004118a:	187b      	adds	r3, r7, r1
1004118c:	2200      	movs	r2, #0
1004118e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &GPIO_Init);
10041190:	187b      	adds	r3, r7, r1
10041192:	4a05      	ldr	r2, [pc, #20]	@ (100411a8 <UART_MspInit+0x88>)
10041194:	0019      	movs	r1, r3
10041196:	0010      	movs	r0, r2
10041198:	f000 f990 	bl	100414bc <HAL_GPIO_Init>
}
1004119c:	46c0      	nop			@ (mov r8, r8)
1004119e:	46bd      	mov	sp, r7
100411a0:	b009      	add	sp, #36	@ 0x24
100411a2:	bd90      	pop	{r4, r7, pc}
100411a4:	48500020 	.word	0x48500020
100411a8:	48100000 	.word	0x48100000

100411ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
100411ac:	b580      	push	{r7, lr}
100411ae:	b082      	sub	sp, #8
100411b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
100411b2:	1dfb      	adds	r3, r7, #7
100411b4:	2200      	movs	r2, #0
100411b6:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
100411b8:	2003      	movs	r0, #3
100411ba:	f000 f80f 	bl	100411dc <HAL_InitTick>
100411be:	1e03      	subs	r3, r0, #0
100411c0:	d003      	beq.n	100411ca <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
100411c2:	1dfb      	adds	r3, r7, #7
100411c4:	2201      	movs	r2, #1
100411c6:	701a      	strb	r2, [r3, #0]
100411c8:	e001      	b.n	100411ce <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
100411ca:	f7ff fab3 	bl	10040734 <HAL_MspInit>
  }

  /* Return function status */
  return status;
100411ce:	1dfb      	adds	r3, r7, #7
100411d0:	781b      	ldrb	r3, [r3, #0]
}
100411d2:	0018      	movs	r0, r3
100411d4:	46bd      	mov	sp, r7
100411d6:	b002      	add	sp, #8
100411d8:	bd80      	pop	{r7, pc}
	...

100411dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100411dc:	b590      	push	{r4, r7, lr}
100411de:	b085      	sub	sp, #20
100411e0:	af00      	add	r7, sp, #0
100411e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
100411e4:	230f      	movs	r3, #15
100411e6:	18fb      	adds	r3, r7, r3
100411e8:	2200      	movs	r2, #0
100411ea:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
100411ec:	4b1d      	ldr	r3, [pc, #116]	@ (10041264 <HAL_InitTick+0x88>)
100411ee:	781b      	ldrb	r3, [r3, #0]
100411f0:	2b00      	cmp	r3, #0
100411f2:	d02c      	beq.n	1004124e <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
100411f4:	f000 fcd6 	bl	10041ba4 <HAL_RCC_GetSysClockFreq>
100411f8:	0004      	movs	r4, r0
100411fa:	4b1a      	ldr	r3, [pc, #104]	@ (10041264 <HAL_InitTick+0x88>)
100411fc:	781b      	ldrb	r3, [r3, #0]
100411fe:	0019      	movs	r1, r3
10041200:	23fa      	movs	r3, #250	@ 0xfa
10041202:	0098      	lsls	r0, r3, #2
10041204:	f7fe ff66 	bl	100400d4 <__udivsi3>
10041208:	0003      	movs	r3, r0
1004120a:	0019      	movs	r1, r3
1004120c:	0020      	movs	r0, r4
1004120e:	f7fe ff61 	bl	100400d4 <__udivsi3>
10041212:	0003      	movs	r3, r0
10041214:	0018      	movs	r0, r3
10041216:	f000 f944 	bl	100414a2 <HAL_SYSTICK_Config>
1004121a:	1e03      	subs	r3, r0, #0
1004121c:	d112      	bne.n	10041244 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
1004121e:	687b      	ldr	r3, [r7, #4]
10041220:	2b03      	cmp	r3, #3
10041222:	d80a      	bhi.n	1004123a <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
10041224:	6879      	ldr	r1, [r7, #4]
10041226:	2301      	movs	r3, #1
10041228:	425b      	negs	r3, r3
1004122a:	2200      	movs	r2, #0
1004122c:	0018      	movs	r0, r3
1004122e:	f000 f913 	bl	10041458 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
10041232:	4b0d      	ldr	r3, [pc, #52]	@ (10041268 <HAL_InitTick+0x8c>)
10041234:	687a      	ldr	r2, [r7, #4]
10041236:	601a      	str	r2, [r3, #0]
10041238:	e00d      	b.n	10041256 <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
1004123a:	230f      	movs	r3, #15
1004123c:	18fb      	adds	r3, r7, r3
1004123e:	2201      	movs	r2, #1
10041240:	701a      	strb	r2, [r3, #0]
10041242:	e008      	b.n	10041256 <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
10041244:	230f      	movs	r3, #15
10041246:	18fb      	adds	r3, r7, r3
10041248:	2201      	movs	r2, #1
1004124a:	701a      	strb	r2, [r3, #0]
1004124c:	e003      	b.n	10041256 <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
1004124e:	230f      	movs	r3, #15
10041250:	18fb      	adds	r3, r7, r3
10041252:	2201      	movs	r2, #1
10041254:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
10041256:	230f      	movs	r3, #15
10041258:	18fb      	adds	r3, r7, r3
1004125a:	781b      	ldrb	r3, [r3, #0]
}
1004125c:	0018      	movs	r0, r3
1004125e:	46bd      	mov	sp, r7
10041260:	b005      	add	sp, #20
10041262:	bd90      	pop	{r4, r7, pc}
10041264:	200002f8 	.word	0x200002f8
10041268:	200002f4 	.word	0x200002f4

1004126c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
1004126c:	b580      	push	{r7, lr}
1004126e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10041270:	4b05      	ldr	r3, [pc, #20]	@ (10041288 <HAL_IncTick+0x1c>)
10041272:	781b      	ldrb	r3, [r3, #0]
10041274:	001a      	movs	r2, r3
10041276:	4b05      	ldr	r3, [pc, #20]	@ (1004128c <HAL_IncTick+0x20>)
10041278:	681b      	ldr	r3, [r3, #0]
1004127a:	18d2      	adds	r2, r2, r3
1004127c:	4b03      	ldr	r3, [pc, #12]	@ (1004128c <HAL_IncTick+0x20>)
1004127e:	601a      	str	r2, [r3, #0]
}
10041280:	46c0      	nop			@ (mov r8, r8)
10041282:	46bd      	mov	sp, r7
10041284:	bd80      	pop	{r7, pc}
10041286:	46c0      	nop			@ (mov r8, r8)
10041288:	200002f8 	.word	0x200002f8
1004128c:	2000016c 	.word	0x2000016c

10041290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10041290:	b580      	push	{r7, lr}
10041292:	af00      	add	r7, sp, #0
  return uwTick;
10041294:	4b02      	ldr	r3, [pc, #8]	@ (100412a0 <HAL_GetTick+0x10>)
10041296:	681b      	ldr	r3, [r3, #0]
}
10041298:	0018      	movs	r0, r3
1004129a:	46bd      	mov	sp, r7
1004129c:	bd80      	pop	{r7, pc}
1004129e:	46c0      	nop			@ (mov r8, r8)
100412a0:	2000016c 	.word	0x2000016c

100412a4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
100412a4:	b580      	push	{r7, lr}
100412a6:	af00      	add	r7, sp, #0
  return uwTickPrio;
100412a8:	4b02      	ldr	r3, [pc, #8]	@ (100412b4 <HAL_GetTickPrio+0x10>)
100412aa:	681b      	ldr	r3, [r3, #0]
}
100412ac:	0018      	movs	r0, r3
100412ae:	46bd      	mov	sp, r7
100412b0:	bd80      	pop	{r7, pc}
100412b2:	46c0      	nop			@ (mov r8, r8)
100412b4:	200002f4 	.word	0x200002f4

100412b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
100412b8:	b580      	push	{r7, lr}
100412ba:	b084      	sub	sp, #16
100412bc:	af00      	add	r7, sp, #0
100412be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
100412c0:	f7ff ffe6 	bl	10041290 <HAL_GetTick>
100412c4:	0003      	movs	r3, r0
100412c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
100412c8:	687b      	ldr	r3, [r7, #4]
100412ca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
100412cc:	68fb      	ldr	r3, [r7, #12]
100412ce:	3301      	adds	r3, #1
100412d0:	d005      	beq.n	100412de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
100412d2:	4b0a      	ldr	r3, [pc, #40]	@ (100412fc <HAL_Delay+0x44>)
100412d4:	781b      	ldrb	r3, [r3, #0]
100412d6:	001a      	movs	r2, r3
100412d8:	68fb      	ldr	r3, [r7, #12]
100412da:	189b      	adds	r3, r3, r2
100412dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
100412de:	46c0      	nop			@ (mov r8, r8)
100412e0:	f7ff ffd6 	bl	10041290 <HAL_GetTick>
100412e4:	0002      	movs	r2, r0
100412e6:	68bb      	ldr	r3, [r7, #8]
100412e8:	1ad3      	subs	r3, r2, r3
100412ea:	68fa      	ldr	r2, [r7, #12]
100412ec:	429a      	cmp	r2, r3
100412ee:	d8f7      	bhi.n	100412e0 <HAL_Delay+0x28>
  {
  }
}
100412f0:	46c0      	nop			@ (mov r8, r8)
100412f2:	46c0      	nop			@ (mov r8, r8)
100412f4:	46bd      	mov	sp, r7
100412f6:	b004      	add	sp, #16
100412f8:	bd80      	pop	{r7, pc}
100412fa:	46c0      	nop			@ (mov r8, r8)
100412fc:	200002f8 	.word	0x200002f8

10041300 <__NVIC_EnableIRQ>:
{
10041300:	b580      	push	{r7, lr}
10041302:	b082      	sub	sp, #8
10041304:	af00      	add	r7, sp, #0
10041306:	0002      	movs	r2, r0
10041308:	1dfb      	adds	r3, r7, #7
1004130a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004130c:	1dfb      	adds	r3, r7, #7
1004130e:	781b      	ldrb	r3, [r3, #0]
10041310:	2b7f      	cmp	r3, #127	@ 0x7f
10041312:	d809      	bhi.n	10041328 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10041314:	1dfb      	adds	r3, r7, #7
10041316:	781b      	ldrb	r3, [r3, #0]
10041318:	001a      	movs	r2, r3
1004131a:	231f      	movs	r3, #31
1004131c:	401a      	ands	r2, r3
1004131e:	4b04      	ldr	r3, [pc, #16]	@ (10041330 <__NVIC_EnableIRQ+0x30>)
10041320:	2101      	movs	r1, #1
10041322:	4091      	lsls	r1, r2
10041324:	000a      	movs	r2, r1
10041326:	601a      	str	r2, [r3, #0]
}
10041328:	46c0      	nop			@ (mov r8, r8)
1004132a:	46bd      	mov	sp, r7
1004132c:	b002      	add	sp, #8
1004132e:	bd80      	pop	{r7, pc}
10041330:	e000e100 	.word	0xe000e100

10041334 <__NVIC_SetPriority>:
{
10041334:	b590      	push	{r4, r7, lr}
10041336:	b083      	sub	sp, #12
10041338:	af00      	add	r7, sp, #0
1004133a:	0002      	movs	r2, r0
1004133c:	6039      	str	r1, [r7, #0]
1004133e:	1dfb      	adds	r3, r7, #7
10041340:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10041342:	1dfb      	adds	r3, r7, #7
10041344:	781b      	ldrb	r3, [r3, #0]
10041346:	2b7f      	cmp	r3, #127	@ 0x7f
10041348:	d828      	bhi.n	1004139c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004134a:	4a2f      	ldr	r2, [pc, #188]	@ (10041408 <__NVIC_SetPriority+0xd4>)
1004134c:	1dfb      	adds	r3, r7, #7
1004134e:	781b      	ldrb	r3, [r3, #0]
10041350:	b25b      	sxtb	r3, r3
10041352:	089b      	lsrs	r3, r3, #2
10041354:	33c0      	adds	r3, #192	@ 0xc0
10041356:	009b      	lsls	r3, r3, #2
10041358:	589b      	ldr	r3, [r3, r2]
1004135a:	1dfa      	adds	r2, r7, #7
1004135c:	7812      	ldrb	r2, [r2, #0]
1004135e:	0011      	movs	r1, r2
10041360:	2203      	movs	r2, #3
10041362:	400a      	ands	r2, r1
10041364:	00d2      	lsls	r2, r2, #3
10041366:	21ff      	movs	r1, #255	@ 0xff
10041368:	4091      	lsls	r1, r2
1004136a:	000a      	movs	r2, r1
1004136c:	43d2      	mvns	r2, r2
1004136e:	401a      	ands	r2, r3
10041370:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10041372:	683b      	ldr	r3, [r7, #0]
10041374:	019b      	lsls	r3, r3, #6
10041376:	22ff      	movs	r2, #255	@ 0xff
10041378:	401a      	ands	r2, r3
1004137a:	1dfb      	adds	r3, r7, #7
1004137c:	781b      	ldrb	r3, [r3, #0]
1004137e:	0018      	movs	r0, r3
10041380:	2303      	movs	r3, #3
10041382:	4003      	ands	r3, r0
10041384:	00db      	lsls	r3, r3, #3
10041386:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10041388:	481f      	ldr	r0, [pc, #124]	@ (10041408 <__NVIC_SetPriority+0xd4>)
1004138a:	1dfb      	adds	r3, r7, #7
1004138c:	781b      	ldrb	r3, [r3, #0]
1004138e:	b25b      	sxtb	r3, r3
10041390:	089b      	lsrs	r3, r3, #2
10041392:	430a      	orrs	r2, r1
10041394:	33c0      	adds	r3, #192	@ 0xc0
10041396:	009b      	lsls	r3, r3, #2
10041398:	501a      	str	r2, [r3, r0]
}
1004139a:	e031      	b.n	10041400 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004139c:	4a1b      	ldr	r2, [pc, #108]	@ (1004140c <__NVIC_SetPriority+0xd8>)
1004139e:	1dfb      	adds	r3, r7, #7
100413a0:	781b      	ldrb	r3, [r3, #0]
100413a2:	0019      	movs	r1, r3
100413a4:	230f      	movs	r3, #15
100413a6:	400b      	ands	r3, r1
100413a8:	3b08      	subs	r3, #8
100413aa:	089b      	lsrs	r3, r3, #2
100413ac:	3306      	adds	r3, #6
100413ae:	009b      	lsls	r3, r3, #2
100413b0:	18d3      	adds	r3, r2, r3
100413b2:	3304      	adds	r3, #4
100413b4:	681b      	ldr	r3, [r3, #0]
100413b6:	1dfa      	adds	r2, r7, #7
100413b8:	7812      	ldrb	r2, [r2, #0]
100413ba:	0011      	movs	r1, r2
100413bc:	2203      	movs	r2, #3
100413be:	400a      	ands	r2, r1
100413c0:	00d2      	lsls	r2, r2, #3
100413c2:	21ff      	movs	r1, #255	@ 0xff
100413c4:	4091      	lsls	r1, r2
100413c6:	000a      	movs	r2, r1
100413c8:	43d2      	mvns	r2, r2
100413ca:	401a      	ands	r2, r3
100413cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100413ce:	683b      	ldr	r3, [r7, #0]
100413d0:	019b      	lsls	r3, r3, #6
100413d2:	22ff      	movs	r2, #255	@ 0xff
100413d4:	401a      	ands	r2, r3
100413d6:	1dfb      	adds	r3, r7, #7
100413d8:	781b      	ldrb	r3, [r3, #0]
100413da:	0018      	movs	r0, r3
100413dc:	2303      	movs	r3, #3
100413de:	4003      	ands	r3, r0
100413e0:	00db      	lsls	r3, r3, #3
100413e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100413e4:	4809      	ldr	r0, [pc, #36]	@ (1004140c <__NVIC_SetPriority+0xd8>)
100413e6:	1dfb      	adds	r3, r7, #7
100413e8:	781b      	ldrb	r3, [r3, #0]
100413ea:	001c      	movs	r4, r3
100413ec:	230f      	movs	r3, #15
100413ee:	4023      	ands	r3, r4
100413f0:	3b08      	subs	r3, #8
100413f2:	089b      	lsrs	r3, r3, #2
100413f4:	430a      	orrs	r2, r1
100413f6:	3306      	adds	r3, #6
100413f8:	009b      	lsls	r3, r3, #2
100413fa:	18c3      	adds	r3, r0, r3
100413fc:	3304      	adds	r3, #4
100413fe:	601a      	str	r2, [r3, #0]
}
10041400:	46c0      	nop			@ (mov r8, r8)
10041402:	46bd      	mov	sp, r7
10041404:	b003      	add	sp, #12
10041406:	bd90      	pop	{r4, r7, pc}
10041408:	e000e100 	.word	0xe000e100
1004140c:	e000ed00 	.word	0xe000ed00

10041410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10041410:	b580      	push	{r7, lr}
10041412:	b082      	sub	sp, #8
10041414:	af00      	add	r7, sp, #0
10041416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10041418:	687b      	ldr	r3, [r7, #4]
1004141a:	1e5a      	subs	r2, r3, #1
1004141c:	2380      	movs	r3, #128	@ 0x80
1004141e:	045b      	lsls	r3, r3, #17
10041420:	429a      	cmp	r2, r3
10041422:	d301      	bcc.n	10041428 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
10041424:	2301      	movs	r3, #1
10041426:	e010      	b.n	1004144a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10041428:	4b0a      	ldr	r3, [pc, #40]	@ (10041454 <SysTick_Config+0x44>)
1004142a:	687a      	ldr	r2, [r7, #4]
1004142c:	3a01      	subs	r2, #1
1004142e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10041430:	2301      	movs	r3, #1
10041432:	425b      	negs	r3, r3
10041434:	2103      	movs	r1, #3
10041436:	0018      	movs	r0, r3
10041438:	f7ff ff7c 	bl	10041334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1004143c:	4b05      	ldr	r3, [pc, #20]	@ (10041454 <SysTick_Config+0x44>)
1004143e:	2200      	movs	r2, #0
10041440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10041442:	4b04      	ldr	r3, [pc, #16]	@ (10041454 <SysTick_Config+0x44>)
10041444:	2207      	movs	r2, #7
10041446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10041448:	2300      	movs	r3, #0
}
1004144a:	0018      	movs	r0, r3
1004144c:	46bd      	mov	sp, r7
1004144e:	b002      	add	sp, #8
10041450:	bd80      	pop	{r7, pc}
10041452:	46c0      	nop			@ (mov r8, r8)
10041454:	e000e010 	.word	0xe000e010

10041458 <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10041458:	b580      	push	{r7, lr}
1004145a:	b084      	sub	sp, #16
1004145c:	af00      	add	r7, sp, #0
1004145e:	60b9      	str	r1, [r7, #8]
10041460:	607a      	str	r2, [r7, #4]
10041462:	210f      	movs	r1, #15
10041464:	187b      	adds	r3, r7, r1
10041466:	1c02      	adds	r2, r0, #0
10041468:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
1004146a:	68ba      	ldr	r2, [r7, #8]
1004146c:	187b      	adds	r3, r7, r1
1004146e:	781b      	ldrb	r3, [r3, #0]
10041470:	b25b      	sxtb	r3, r3
10041472:	0011      	movs	r1, r2
10041474:	0018      	movs	r0, r3
10041476:	f7ff ff5d 	bl	10041334 <__NVIC_SetPriority>
}
1004147a:	46c0      	nop			@ (mov r8, r8)
1004147c:	46bd      	mov	sp, r7
1004147e:	b004      	add	sp, #16
10041480:	bd80      	pop	{r7, pc}

10041482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10041482:	b580      	push	{r7, lr}
10041484:	b082      	sub	sp, #8
10041486:	af00      	add	r7, sp, #0
10041488:	0002      	movs	r2, r0
1004148a:	1dfb      	adds	r3, r7, #7
1004148c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
1004148e:	1dfb      	adds	r3, r7, #7
10041490:	781b      	ldrb	r3, [r3, #0]
10041492:	b25b      	sxtb	r3, r3
10041494:	0018      	movs	r0, r3
10041496:	f7ff ff33 	bl	10041300 <__NVIC_EnableIRQ>
}
1004149a:	46c0      	nop			@ (mov r8, r8)
1004149c:	46bd      	mov	sp, r7
1004149e:	b002      	add	sp, #8
100414a0:	bd80      	pop	{r7, pc}

100414a2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
100414a2:	b580      	push	{r7, lr}
100414a4:	b082      	sub	sp, #8
100414a6:	af00      	add	r7, sp, #0
100414a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
100414aa:	687b      	ldr	r3, [r7, #4]
100414ac:	0018      	movs	r0, r3
100414ae:	f7ff ffaf 	bl	10041410 <SysTick_Config>
100414b2:	0003      	movs	r3, r0
}
100414b4:	0018      	movs	r0, r3
100414b6:	46bd      	mov	sp, r7
100414b8:	b002      	add	sp, #8
100414ba:	bd80      	pop	{r7, pc}

100414bc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
100414bc:	b580      	push	{r7, lr}
100414be:	b086      	sub	sp, #24
100414c0:	af00      	add	r7, sp, #0
100414c2:	6078      	str	r0, [r7, #4]
100414c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
100414c6:	2300      	movs	r3, #0
100414c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
100414ca:	e194      	b.n	100417f6 <HAL_GPIO_Init+0x33a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
100414cc:	683b      	ldr	r3, [r7, #0]
100414ce:	681b      	ldr	r3, [r3, #0]
100414d0:	2101      	movs	r1, #1
100414d2:	697a      	ldr	r2, [r7, #20]
100414d4:	4091      	lsls	r1, r2
100414d6:	000a      	movs	r2, r1
100414d8:	4013      	ands	r3, r2
100414da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
100414dc:	68fb      	ldr	r3, [r7, #12]
100414de:	2b00      	cmp	r3, #0
100414e0:	d100      	bne.n	100414e4 <HAL_GPIO_Init+0x28>
100414e2:	e185      	b.n	100417f0 <HAL_GPIO_Init+0x334>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
100414e4:	683b      	ldr	r3, [r7, #0]
100414e6:	685b      	ldr	r3, [r3, #4]
100414e8:	2203      	movs	r2, #3
100414ea:	4013      	ands	r3, r2
100414ec:	2b01      	cmp	r3, #1
100414ee:	d005      	beq.n	100414fc <HAL_GPIO_Init+0x40>
100414f0:	683b      	ldr	r3, [r7, #0]
100414f2:	685b      	ldr	r3, [r3, #4]
100414f4:	2203      	movs	r2, #3
100414f6:	4013      	ands	r3, r2
100414f8:	2b02      	cmp	r3, #2
100414fa:	d130      	bne.n	1004155e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
100414fc:	687b      	ldr	r3, [r7, #4]
100414fe:	689b      	ldr	r3, [r3, #8]
10041500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
10041502:	697b      	ldr	r3, [r7, #20]
10041504:	005b      	lsls	r3, r3, #1
10041506:	2203      	movs	r2, #3
10041508:	409a      	lsls	r2, r3
1004150a:	0013      	movs	r3, r2
1004150c:	43da      	mvns	r2, r3
1004150e:	693b      	ldr	r3, [r7, #16]
10041510:	4013      	ands	r3, r2
10041512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
10041514:	683b      	ldr	r3, [r7, #0]
10041516:	68da      	ldr	r2, [r3, #12]
10041518:	697b      	ldr	r3, [r7, #20]
1004151a:	005b      	lsls	r3, r3, #1
1004151c:	409a      	lsls	r2, r3
1004151e:	0013      	movs	r3, r2
10041520:	693a      	ldr	r2, [r7, #16]
10041522:	4313      	orrs	r3, r2
10041524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
10041526:	687b      	ldr	r3, [r7, #4]
10041528:	693a      	ldr	r2, [r7, #16]
1004152a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
1004152c:	687b      	ldr	r3, [r7, #4]
1004152e:	685b      	ldr	r3, [r3, #4]
10041530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10041532:	2201      	movs	r2, #1
10041534:	697b      	ldr	r3, [r7, #20]
10041536:	409a      	lsls	r2, r3
10041538:	0013      	movs	r3, r2
1004153a:	43da      	mvns	r2, r3
1004153c:	693b      	ldr	r3, [r7, #16]
1004153e:	4013      	ands	r3, r2
10041540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
10041542:	683b      	ldr	r3, [r7, #0]
10041544:	685b      	ldr	r3, [r3, #4]
10041546:	091b      	lsrs	r3, r3, #4
10041548:	2201      	movs	r2, #1
1004154a:	401a      	ands	r2, r3
1004154c:	697b      	ldr	r3, [r7, #20]
1004154e:	409a      	lsls	r2, r3
10041550:	0013      	movs	r3, r2
10041552:	693a      	ldr	r2, [r7, #16]
10041554:	4313      	orrs	r3, r2
10041556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
10041558:	687b      	ldr	r3, [r7, #4]
1004155a:	693a      	ldr	r2, [r7, #16]
1004155c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
1004155e:	683b      	ldr	r3, [r7, #0]
10041560:	685b      	ldr	r3, [r3, #4]
10041562:	2203      	movs	r2, #3
10041564:	4013      	ands	r3, r2
10041566:	2b03      	cmp	r3, #3
10041568:	d017      	beq.n	1004159a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
1004156a:	687b      	ldr	r3, [r7, #4]
1004156c:	68db      	ldr	r3, [r3, #12]
1004156e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
10041570:	697b      	ldr	r3, [r7, #20]
10041572:	005b      	lsls	r3, r3, #1
10041574:	2203      	movs	r2, #3
10041576:	409a      	lsls	r2, r3
10041578:	0013      	movs	r3, r2
1004157a:	43da      	mvns	r2, r3
1004157c:	693b      	ldr	r3, [r7, #16]
1004157e:	4013      	ands	r3, r2
10041580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
10041582:	683b      	ldr	r3, [r7, #0]
10041584:	689a      	ldr	r2, [r3, #8]
10041586:	697b      	ldr	r3, [r7, #20]
10041588:	005b      	lsls	r3, r3, #1
1004158a:	409a      	lsls	r2, r3
1004158c:	0013      	movs	r3, r2
1004158e:	693a      	ldr	r2, [r7, #16]
10041590:	4313      	orrs	r3, r2
10041592:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
10041594:	687b      	ldr	r3, [r7, #4]
10041596:	693a      	ldr	r2, [r7, #16]
10041598:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
1004159a:	683b      	ldr	r3, [r7, #0]
1004159c:	685b      	ldr	r3, [r3, #4]
1004159e:	2203      	movs	r2, #3
100415a0:	4013      	ands	r3, r2
100415a2:	2b02      	cmp	r3, #2
100415a4:	d123      	bne.n	100415ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
100415a6:	697b      	ldr	r3, [r7, #20]
100415a8:	08da      	lsrs	r2, r3, #3
100415aa:	687b      	ldr	r3, [r7, #4]
100415ac:	3208      	adds	r2, #8
100415ae:	0092      	lsls	r2, r2, #2
100415b0:	58d3      	ldr	r3, [r2, r3]
100415b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
100415b4:	697b      	ldr	r3, [r7, #20]
100415b6:	2207      	movs	r2, #7
100415b8:	4013      	ands	r3, r2
100415ba:	009b      	lsls	r3, r3, #2
100415bc:	220f      	movs	r2, #15
100415be:	409a      	lsls	r2, r3
100415c0:	0013      	movs	r3, r2
100415c2:	43da      	mvns	r2, r3
100415c4:	693b      	ldr	r3, [r7, #16]
100415c6:	4013      	ands	r3, r2
100415c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
100415ca:	683b      	ldr	r3, [r7, #0]
100415cc:	691a      	ldr	r2, [r3, #16]
100415ce:	697b      	ldr	r3, [r7, #20]
100415d0:	2107      	movs	r1, #7
100415d2:	400b      	ands	r3, r1
100415d4:	009b      	lsls	r3, r3, #2
100415d6:	409a      	lsls	r2, r3
100415d8:	0013      	movs	r3, r2
100415da:	693a      	ldr	r2, [r7, #16]
100415dc:	4313      	orrs	r3, r2
100415de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
100415e0:	697b      	ldr	r3, [r7, #20]
100415e2:	08da      	lsrs	r2, r3, #3
100415e4:	687b      	ldr	r3, [r7, #4]
100415e6:	3208      	adds	r2, #8
100415e8:	0092      	lsls	r2, r2, #2
100415ea:	6939      	ldr	r1, [r7, #16]
100415ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
100415ee:	687b      	ldr	r3, [r7, #4]
100415f0:	681b      	ldr	r3, [r3, #0]
100415f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
100415f4:	697b      	ldr	r3, [r7, #20]
100415f6:	005b      	lsls	r3, r3, #1
100415f8:	2203      	movs	r2, #3
100415fa:	409a      	lsls	r2, r3
100415fc:	0013      	movs	r3, r2
100415fe:	43da      	mvns	r2, r3
10041600:	693b      	ldr	r3, [r7, #16]
10041602:	4013      	ands	r3, r2
10041604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
10041606:	683b      	ldr	r3, [r7, #0]
10041608:	685b      	ldr	r3, [r3, #4]
1004160a:	2203      	movs	r2, #3
1004160c:	401a      	ands	r2, r3
1004160e:	697b      	ldr	r3, [r7, #20]
10041610:	005b      	lsls	r3, r3, #1
10041612:	409a      	lsls	r2, r3
10041614:	0013      	movs	r3, r2
10041616:	693a      	ldr	r2, [r7, #16]
10041618:	4313      	orrs	r3, r2
1004161a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
1004161c:	687b      	ldr	r3, [r7, #4]
1004161e:	693a      	ldr	r2, [r7, #16]
10041620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
10041622:	683b      	ldr	r3, [r7, #0]
10041624:	685a      	ldr	r2, [r3, #4]
10041626:	23c0      	movs	r3, #192	@ 0xc0
10041628:	029b      	lsls	r3, r3, #10
1004162a:	4013      	ands	r3, r2
1004162c:	d100      	bne.n	10041630 <HAL_GPIO_Init+0x174>
1004162e:	e0df      	b.n	100417f0 <HAL_GPIO_Init+0x334>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
10041630:	683b      	ldr	r3, [r7, #0]
10041632:	685a      	ldr	r2, [r3, #4]
10041634:	2380      	movs	r3, #128	@ 0x80
10041636:	02db      	lsls	r3, r3, #11
10041638:	4013      	ands	r3, r2
1004163a:	d031      	beq.n	100416a0 <HAL_GPIO_Init+0x1e4>
        {
          temp = SYSCFG->IO_DTR;
1004163c:	2380      	movs	r3, #128	@ 0x80
1004163e:	05db      	lsls	r3, r3, #23
10041640:	68db      	ldr	r3, [r3, #12]
10041642:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
10041644:	687a      	ldr	r2, [r7, #4]
10041646:	2390      	movs	r3, #144	@ 0x90
10041648:	05db      	lsls	r3, r3, #23
1004164a:	429a      	cmp	r2, r3
1004164c:	d111      	bne.n	10041672 <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
1004164e:	2201      	movs	r2, #1
10041650:	697b      	ldr	r3, [r7, #20]
10041652:	409a      	lsls	r2, r3
10041654:	0013      	movs	r3, r2
10041656:	43db      	mvns	r3, r3
10041658:	001a      	movs	r2, r3
1004165a:	693b      	ldr	r3, [r7, #16]
1004165c:	4013      	ands	r3, r2
1004165e:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10041660:	2201      	movs	r2, #1
10041662:	697b      	ldr	r3, [r7, #20]
10041664:	409a      	lsls	r2, r3
10041666:	0013      	movs	r3, r2
10041668:	001a      	movs	r2, r3
1004166a:	693b      	ldr	r3, [r7, #16]
1004166c:	4313      	orrs	r3, r2
1004166e:	613b      	str	r3, [r7, #16]
10041670:	e012      	b.n	10041698 <HAL_GPIO_Init+0x1dc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10041672:	2201      	movs	r2, #1
10041674:	697b      	ldr	r3, [r7, #20]
10041676:	409a      	lsls	r2, r3
10041678:	0013      	movs	r3, r2
1004167a:	041b      	lsls	r3, r3, #16
1004167c:	43db      	mvns	r3, r3
1004167e:	001a      	movs	r2, r3
10041680:	693b      	ldr	r3, [r7, #16]
10041682:	4013      	ands	r3, r2
10041684:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10041686:	2201      	movs	r2, #1
10041688:	697b      	ldr	r3, [r7, #20]
1004168a:	409a      	lsls	r2, r3
1004168c:	0013      	movs	r3, r2
1004168e:	041b      	lsls	r3, r3, #16
10041690:	001a      	movs	r2, r3
10041692:	693b      	ldr	r3, [r7, #16]
10041694:	4313      	orrs	r3, r2
10041696:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
10041698:	2380      	movs	r3, #128	@ 0x80
1004169a:	05db      	lsls	r3, r3, #23
1004169c:	693a      	ldr	r2, [r7, #16]
1004169e:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
100416a0:	683b      	ldr	r3, [r7, #0]
100416a2:	685a      	ldr	r2, [r3, #4]
100416a4:	2380      	movs	r3, #128	@ 0x80
100416a6:	035b      	lsls	r3, r3, #13
100416a8:	4013      	ands	r3, r2
100416aa:	d031      	beq.n	10041710 <HAL_GPIO_Init+0x254>
        {
          temp = SYSCFG->IO_IBER;
100416ac:	2380      	movs	r3, #128	@ 0x80
100416ae:	05db      	lsls	r3, r3, #23
100416b0:	691b      	ldr	r3, [r3, #16]
100416b2:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
100416b4:	687a      	ldr	r2, [r7, #4]
100416b6:	2390      	movs	r3, #144	@ 0x90
100416b8:	05db      	lsls	r3, r3, #23
100416ba:	429a      	cmp	r2, r3
100416bc:	d111      	bne.n	100416e2 <HAL_GPIO_Init+0x226>
          {
            temp &= ~(1 << position);
100416be:	2201      	movs	r2, #1
100416c0:	697b      	ldr	r3, [r7, #20]
100416c2:	409a      	lsls	r2, r3
100416c4:	0013      	movs	r3, r2
100416c6:	43db      	mvns	r3, r3
100416c8:	001a      	movs	r2, r3
100416ca:	693b      	ldr	r3, [r7, #16]
100416cc:	4013      	ands	r3, r2
100416ce:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100416d0:	2201      	movs	r2, #1
100416d2:	697b      	ldr	r3, [r7, #20]
100416d4:	409a      	lsls	r2, r3
100416d6:	0013      	movs	r3, r2
100416d8:	001a      	movs	r2, r3
100416da:	693b      	ldr	r3, [r7, #16]
100416dc:	4313      	orrs	r3, r2
100416de:	613b      	str	r3, [r7, #16]
100416e0:	e012      	b.n	10041708 <HAL_GPIO_Init+0x24c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100416e2:	2201      	movs	r2, #1
100416e4:	697b      	ldr	r3, [r7, #20]
100416e6:	409a      	lsls	r2, r3
100416e8:	0013      	movs	r3, r2
100416ea:	041b      	lsls	r3, r3, #16
100416ec:	43db      	mvns	r3, r3
100416ee:	001a      	movs	r2, r3
100416f0:	693b      	ldr	r3, [r7, #16]
100416f2:	4013      	ands	r3, r2
100416f4:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100416f6:	2201      	movs	r2, #1
100416f8:	697b      	ldr	r3, [r7, #20]
100416fa:	409a      	lsls	r2, r3
100416fc:	0013      	movs	r3, r2
100416fe:	041b      	lsls	r3, r3, #16
10041700:	001a      	movs	r2, r3
10041702:	693b      	ldr	r3, [r7, #16]
10041704:	4313      	orrs	r3, r2
10041706:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
10041708:	2380      	movs	r3, #128	@ 0x80
1004170a:	05db      	lsls	r3, r3, #23
1004170c:	693a      	ldr	r2, [r7, #16]
1004170e:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
10041710:	683b      	ldr	r3, [r7, #0]
10041712:	685a      	ldr	r2, [r3, #4]
10041714:	2380      	movs	r3, #128	@ 0x80
10041716:	03db      	lsls	r3, r3, #15
10041718:	4013      	ands	r3, r2
1004171a:	d031      	beq.n	10041780 <HAL_GPIO_Init+0x2c4>
        {
          temp = SYSCFG->IO_IEVR;
1004171c:	2380      	movs	r3, #128	@ 0x80
1004171e:	05db      	lsls	r3, r3, #23
10041720:	695b      	ldr	r3, [r3, #20]
10041722:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10041724:	687a      	ldr	r2, [r7, #4]
10041726:	2390      	movs	r3, #144	@ 0x90
10041728:	05db      	lsls	r3, r3, #23
1004172a:	429a      	cmp	r2, r3
1004172c:	d111      	bne.n	10041752 <HAL_GPIO_Init+0x296>
          {
            temp &= ~(1 << position);
1004172e:	2201      	movs	r2, #1
10041730:	697b      	ldr	r3, [r7, #20]
10041732:	409a      	lsls	r2, r3
10041734:	0013      	movs	r3, r2
10041736:	43db      	mvns	r3, r3
10041738:	001a      	movs	r2, r3
1004173a:	693b      	ldr	r3, [r7, #16]
1004173c:	4013      	ands	r3, r2
1004173e:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10041740:	2201      	movs	r2, #1
10041742:	697b      	ldr	r3, [r7, #20]
10041744:	409a      	lsls	r2, r3
10041746:	0013      	movs	r3, r2
10041748:	001a      	movs	r2, r3
1004174a:	693b      	ldr	r3, [r7, #16]
1004174c:	4313      	orrs	r3, r2
1004174e:	613b      	str	r3, [r7, #16]
10041750:	e012      	b.n	10041778 <HAL_GPIO_Init+0x2bc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10041752:	2201      	movs	r2, #1
10041754:	697b      	ldr	r3, [r7, #20]
10041756:	409a      	lsls	r2, r3
10041758:	0013      	movs	r3, r2
1004175a:	041b      	lsls	r3, r3, #16
1004175c:	43db      	mvns	r3, r3
1004175e:	001a      	movs	r2, r3
10041760:	693b      	ldr	r3, [r7, #16]
10041762:	4013      	ands	r3, r2
10041764:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10041766:	2201      	movs	r2, #1
10041768:	697b      	ldr	r3, [r7, #20]
1004176a:	409a      	lsls	r2, r3
1004176c:	0013      	movs	r3, r2
1004176e:	041b      	lsls	r3, r3, #16
10041770:	001a      	movs	r2, r3
10041772:	693b      	ldr	r3, [r7, #16]
10041774:	4313      	orrs	r3, r2
10041776:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
10041778:	2380      	movs	r3, #128	@ 0x80
1004177a:	05db      	lsls	r3, r3, #23
1004177c:	693a      	ldr	r2, [r7, #16]
1004177e:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
10041780:	683b      	ldr	r3, [r7, #0]
10041782:	685a      	ldr	r2, [r3, #4]
10041784:	2380      	movs	r3, #128	@ 0x80
10041786:	025b      	lsls	r3, r3, #9
10041788:	4013      	ands	r3, r2
1004178a:	d031      	beq.n	100417f0 <HAL_GPIO_Init+0x334>
        {
          temp = SYSCFG->IO_IER;
1004178c:	2380      	movs	r3, #128	@ 0x80
1004178e:	05db      	lsls	r3, r3, #23
10041790:	699b      	ldr	r3, [r3, #24]
10041792:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10041794:	687a      	ldr	r2, [r7, #4]
10041796:	2390      	movs	r3, #144	@ 0x90
10041798:	05db      	lsls	r3, r3, #23
1004179a:	429a      	cmp	r2, r3
1004179c:	d111      	bne.n	100417c2 <HAL_GPIO_Init+0x306>
          {
            temp &= ~(1 << position);
1004179e:	2201      	movs	r2, #1
100417a0:	697b      	ldr	r3, [r7, #20]
100417a2:	409a      	lsls	r2, r3
100417a4:	0013      	movs	r3, r2
100417a6:	43db      	mvns	r3, r3
100417a8:	001a      	movs	r2, r3
100417aa:	693b      	ldr	r3, [r7, #16]
100417ac:	4013      	ands	r3, r2
100417ae:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100417b0:	2201      	movs	r2, #1
100417b2:	697b      	ldr	r3, [r7, #20]
100417b4:	409a      	lsls	r2, r3
100417b6:	0013      	movs	r3, r2
100417b8:	001a      	movs	r2, r3
100417ba:	693b      	ldr	r3, [r7, #16]
100417bc:	4313      	orrs	r3, r2
100417be:	613b      	str	r3, [r7, #16]
100417c0:	e012      	b.n	100417e8 <HAL_GPIO_Init+0x32c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100417c2:	2201      	movs	r2, #1
100417c4:	697b      	ldr	r3, [r7, #20]
100417c6:	409a      	lsls	r2, r3
100417c8:	0013      	movs	r3, r2
100417ca:	041b      	lsls	r3, r3, #16
100417cc:	43db      	mvns	r3, r3
100417ce:	001a      	movs	r2, r3
100417d0:	693b      	ldr	r3, [r7, #16]
100417d2:	4013      	ands	r3, r2
100417d4:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100417d6:	2201      	movs	r2, #1
100417d8:	697b      	ldr	r3, [r7, #20]
100417da:	409a      	lsls	r2, r3
100417dc:	0013      	movs	r3, r2
100417de:	041b      	lsls	r3, r3, #16
100417e0:	001a      	movs	r2, r3
100417e2:	693b      	ldr	r3, [r7, #16]
100417e4:	4313      	orrs	r3, r2
100417e6:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
100417e8:	2380      	movs	r3, #128	@ 0x80
100417ea:	05db      	lsls	r3, r3, #23
100417ec:	693a      	ldr	r2, [r7, #16]
100417ee:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
100417f0:	697b      	ldr	r3, [r7, #20]
100417f2:	3301      	adds	r3, #1
100417f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
100417f6:	683b      	ldr	r3, [r7, #0]
100417f8:	681a      	ldr	r2, [r3, #0]
100417fa:	697b      	ldr	r3, [r7, #20]
100417fc:	40da      	lsrs	r2, r3
100417fe:	1e13      	subs	r3, r2, #0
10041800:	d000      	beq.n	10041804 <HAL_GPIO_Init+0x348>
10041802:	e663      	b.n	100414cc <HAL_GPIO_Init+0x10>
  }
}
10041804:	46c0      	nop			@ (mov r8, r8)
10041806:	46c0      	nop			@ (mov r8, r8)
10041808:	46bd      	mov	sp, r7
1004180a:	b006      	add	sp, #24
1004180c:	bd80      	pop	{r7, pc}

1004180e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
1004180e:	b580      	push	{r7, lr}
10041810:	b082      	sub	sp, #8
10041812:	af00      	add	r7, sp, #0
10041814:	6078      	str	r0, [r7, #4]
10041816:	0008      	movs	r0, r1
10041818:	0011      	movs	r1, r2
1004181a:	1cbb      	adds	r3, r7, #2
1004181c:	1c02      	adds	r2, r0, #0
1004181e:	801a      	strh	r2, [r3, #0]
10041820:	1c7b      	adds	r3, r7, #1
10041822:	1c0a      	adds	r2, r1, #0
10041824:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10041826:	1c7b      	adds	r3, r7, #1
10041828:	781b      	ldrb	r3, [r3, #0]
1004182a:	2b00      	cmp	r3, #0
1004182c:	d004      	beq.n	10041838 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
1004182e:	1cbb      	adds	r3, r7, #2
10041830:	881a      	ldrh	r2, [r3, #0]
10041832:	687b      	ldr	r3, [r7, #4]
10041834:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
10041836:	e003      	b.n	10041840 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
10041838:	1cbb      	adds	r3, r7, #2
1004183a:	881a      	ldrh	r2, [r3, #0]
1004183c:	687b      	ldr	r3, [r7, #4]
1004183e:	629a      	str	r2, [r3, #40]	@ 0x28
}
10041840:	46c0      	nop			@ (mov r8, r8)
10041842:	46bd      	mov	sp, r7
10041844:	b002      	add	sp, #8
10041846:	bd80      	pop	{r7, pc}

10041848 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral for STM32WB0x family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
10041848:	b580      	push	{r7, lr}
1004184a:	b084      	sub	sp, #16
1004184c:	af00      	add	r7, sp, #0
1004184e:	6078      	str	r0, [r7, #4]
10041850:	000a      	movs	r2, r1
10041852:	1cbb      	adds	r3, r7, #2
10041854:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
10041856:	687b      	ldr	r3, [r7, #4]
10041858:	695b      	ldr	r3, [r3, #20]
1004185a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
1004185c:	1cbb      	adds	r3, r7, #2
1004185e:	881b      	ldrh	r3, [r3, #0]
10041860:	68fa      	ldr	r2, [r7, #12]
10041862:	4013      	ands	r3, r2
10041864:	041a      	lsls	r2, r3, #16
10041866:	68fb      	ldr	r3, [r7, #12]
10041868:	43db      	mvns	r3, r3
1004186a:	1cb9      	adds	r1, r7, #2
1004186c:	8809      	ldrh	r1, [r1, #0]
1004186e:	400b      	ands	r3, r1
10041870:	431a      	orrs	r2, r3
10041872:	687b      	ldr	r3, [r7, #4]
10041874:	619a      	str	r2, [r3, #24]
}
10041876:	46c0      	nop			@ (mov r8, r8)
10041878:	46bd      	mov	sp, r7
1004187a:	b004      	add	sp, #16
1004187c:	bd80      	pop	{r7, pc}

1004187e <HAL_GPIO_EXTI_IRQHandler>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
1004187e:	b580      	push	{r7, lr}
10041880:	b082      	sub	sp, #8
10041882:	af00      	add	r7, sp, #0
10041884:	6078      	str	r0, [r7, #4]
10041886:	000a      	movs	r2, r1
10041888:	1cbb      	adds	r3, r7, #2
1004188a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIOx, GPIO_Pin) != 0x00u)
1004188c:	687a      	ldr	r2, [r7, #4]
1004188e:	2390      	movs	r3, #144	@ 0x90
10041890:	05db      	lsls	r3, r3, #23
10041892:	429a      	cmp	r2, r3
10041894:	d109      	bne.n	100418aa <HAL_GPIO_EXTI_IRQHandler+0x2c>
10041896:	2380      	movs	r3, #128	@ 0x80
10041898:	05db      	lsls	r3, r3, #23
1004189a:	69db      	ldr	r3, [r3, #28]
1004189c:	1cba      	adds	r2, r7, #2
1004189e:	8812      	ldrh	r2, [r2, #0]
100418a0:	4013      	ands	r3, r2
100418a2:	1e5a      	subs	r2, r3, #1
100418a4:	4193      	sbcs	r3, r2
100418a6:	b2db      	uxtb	r3, r3
100418a8:	e009      	b.n	100418be <HAL_GPIO_EXTI_IRQHandler+0x40>
100418aa:	2380      	movs	r3, #128	@ 0x80
100418ac:	05db      	lsls	r3, r3, #23
100418ae:	69db      	ldr	r3, [r3, #28]
100418b0:	1cba      	adds	r2, r7, #2
100418b2:	8812      	ldrh	r2, [r2, #0]
100418b4:	0412      	lsls	r2, r2, #16
100418b6:	4013      	ands	r3, r2
100418b8:	1e5a      	subs	r2, r3, #1
100418ba:	4193      	sbcs	r3, r2
100418bc:	b2db      	uxtb	r3, r3
100418be:	2b00      	cmp	r3, #0
100418c0:	d017      	beq.n	100418f2 <HAL_GPIO_EXTI_IRQHandler+0x74>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIOx, GPIO_Pin);
100418c2:	687a      	ldr	r2, [r7, #4]
100418c4:	2390      	movs	r3, #144	@ 0x90
100418c6:	05db      	lsls	r3, r3, #23
100418c8:	429a      	cmp	r2, r3
100418ca:	d105      	bne.n	100418d8 <HAL_GPIO_EXTI_IRQHandler+0x5a>
100418cc:	2380      	movs	r3, #128	@ 0x80
100418ce:	05db      	lsls	r3, r3, #23
100418d0:	1cba      	adds	r2, r7, #2
100418d2:	8812      	ldrh	r2, [r2, #0]
100418d4:	61da      	str	r2, [r3, #28]
100418d6:	e005      	b.n	100418e4 <HAL_GPIO_EXTI_IRQHandler+0x66>
100418d8:	1cbb      	adds	r3, r7, #2
100418da:	881a      	ldrh	r2, [r3, #0]
100418dc:	2380      	movs	r3, #128	@ 0x80
100418de:	05db      	lsls	r3, r3, #23
100418e0:	0412      	lsls	r2, r2, #16
100418e2:	61da      	str	r2, [r3, #28]
    HAL_GPIO_EXTI_Callback(GPIOx, GPIO_Pin);
100418e4:	1cbb      	adds	r3, r7, #2
100418e6:	881a      	ldrh	r2, [r3, #0]
100418e8:	687b      	ldr	r3, [r7, #4]
100418ea:	0011      	movs	r1, r2
100418ec:	0018      	movs	r0, r3
100418ee:	f7fe fed9 	bl	100406a4 <HAL_GPIO_EXTI_Callback>
  }
}
100418f2:	46c0      	nop			@ (mov r8, r8)
100418f4:	46bd      	mov	sp, r7
100418f6:	b002      	add	sp, #8
100418f8:	bd80      	pop	{r7, pc}
	...

100418fc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
100418fc:	b580      	push	{r7, lr}
100418fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10041900:	4b07      	ldr	r3, [pc, #28]	@ (10041920 <LL_RCC_HSE_IsReady+0x24>)
10041902:	681a      	ldr	r2, [r3, #0]
10041904:	2380      	movs	r3, #128	@ 0x80
10041906:	029b      	lsls	r3, r3, #10
10041908:	401a      	ands	r2, r3
1004190a:	2380      	movs	r3, #128	@ 0x80
1004190c:	029b      	lsls	r3, r3, #10
1004190e:	429a      	cmp	r2, r3
10041910:	d101      	bne.n	10041916 <LL_RCC_HSE_IsReady+0x1a>
10041912:	2301      	movs	r3, #1
10041914:	e000      	b.n	10041918 <LL_RCC_HSE_IsReady+0x1c>
10041916:	2300      	movs	r3, #0
}
10041918:	0018      	movs	r0, r3
1004191a:	46bd      	mov	sp, r7
1004191c:	bd80      	pop	{r7, pc}
1004191e:	46c0      	nop			@ (mov r8, r8)
10041920:	48400000 	.word	0x48400000

10041924 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
10041924:	b580      	push	{r7, lr}
10041926:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10041928:	4b07      	ldr	r3, [pc, #28]	@ (10041948 <LL_RCC_HSI_Enable+0x24>)
1004192a:	689a      	ldr	r2, [r3, #8]
1004192c:	4b06      	ldr	r3, [pc, #24]	@ (10041948 <LL_RCC_HSI_Enable+0x24>)
1004192e:	2104      	movs	r1, #4
10041930:	438a      	bics	r2, r1
10041932:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10041934:	4b04      	ldr	r3, [pc, #16]	@ (10041948 <LL_RCC_HSI_Enable+0x24>)
10041936:	689a      	ldr	r2, [r3, #8]
10041938:	4b03      	ldr	r3, [pc, #12]	@ (10041948 <LL_RCC_HSI_Enable+0x24>)
1004193a:	2102      	movs	r1, #2
1004193c:	438a      	bics	r2, r1
1004193e:	609a      	str	r2, [r3, #8]
}
10041940:	46c0      	nop			@ (mov r8, r8)
10041942:	46bd      	mov	sp, r7
10041944:	bd80      	pop	{r7, pc}
10041946:	46c0      	nop			@ (mov r8, r8)
10041948:	48400000 	.word	0x48400000

1004194c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
1004194c:	b580      	push	{r7, lr}
1004194e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
10041950:	4b07      	ldr	r3, [pc, #28]	@ (10041970 <LL_RCC_HSI_IsReady+0x24>)
10041952:	681a      	ldr	r2, [r3, #0]
10041954:	2380      	movs	r3, #128	@ 0x80
10041956:	00db      	lsls	r3, r3, #3
10041958:	401a      	ands	r2, r3
1004195a:	2380      	movs	r3, #128	@ 0x80
1004195c:	00db      	lsls	r3, r3, #3
1004195e:	429a      	cmp	r2, r3
10041960:	d101      	bne.n	10041966 <LL_RCC_HSI_IsReady+0x1a>
10041962:	2301      	movs	r3, #1
10041964:	e000      	b.n	10041968 <LL_RCC_HSI_IsReady+0x1c>
10041966:	2300      	movs	r3, #0
}
10041968:	0018      	movs	r0, r3
1004196a:	46bd      	mov	sp, r7
1004196c:	bd80      	pop	{r7, pc}
1004196e:	46c0      	nop			@ (mov r8, r8)
10041970:	48400000 	.word	0x48400000

10041974 <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
10041974:	b580      	push	{r7, lr}
10041976:	b082      	sub	sp, #8
10041978:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
1004197a:	46c0      	nop			@ (mov r8, r8)
1004197c:	4b0f      	ldr	r3, [pc, #60]	@ (100419bc <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004197e:	681a      	ldr	r2, [r3, #0]
10041980:	2380      	movs	r3, #128	@ 0x80
10041982:	029b      	lsls	r3, r3, #10
10041984:	4013      	ands	r3, r2
10041986:	d0f9      	beq.n	1004197c <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10041988:	4b0c      	ldr	r3, [pc, #48]	@ (100419bc <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004198a:	689a      	ldr	r2, [r3, #8]
1004198c:	4b0b      	ldr	r3, [pc, #44]	@ (100419bc <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004198e:	2102      	movs	r1, #2
10041990:	430a      	orrs	r2, r1
10041992:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
10041994:	2300      	movs	r3, #0
10041996:	607b      	str	r3, [r7, #4]
10041998:	e003      	b.n	100419a2 <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
1004199a:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
1004199c:	687b      	ldr	r3, [r7, #4]
1004199e:	3301      	adds	r3, #1
100419a0:	607b      	str	r3, [r7, #4]
100419a2:	687b      	ldr	r3, [r7, #4]
100419a4:	2b05      	cmp	r3, #5
100419a6:	ddf8      	ble.n	1004199a <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
100419a8:	4b04      	ldr	r3, [pc, #16]	@ (100419bc <LL_RCC_DIRECT_HSE_Enable+0x48>)
100419aa:	689a      	ldr	r2, [r3, #8]
100419ac:	4b03      	ldr	r3, [pc, #12]	@ (100419bc <LL_RCC_DIRECT_HSE_Enable+0x48>)
100419ae:	2104      	movs	r1, #4
100419b0:	430a      	orrs	r2, r1
100419b2:	609a      	str	r2, [r3, #8]
}
100419b4:	46c0      	nop			@ (mov r8, r8)
100419b6:	46bd      	mov	sp, r7
100419b8:	b002      	add	sp, #8
100419ba:	bd80      	pop	{r7, pc}
100419bc:	48400000 	.word	0x48400000

100419c0 <LL_RCC_RC64MPLL_Enable>:
  * @brief  Enable RC64MPLL
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Enable(void)
{
100419c0:	b580      	push	{r7, lr}
100419c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
100419c4:	4b04      	ldr	r3, [pc, #16]	@ (100419d8 <LL_RCC_RC64MPLL_Enable+0x18>)
100419c6:	681a      	ldr	r2, [r3, #0]
100419c8:	4b03      	ldr	r3, [pc, #12]	@ (100419d8 <LL_RCC_RC64MPLL_Enable+0x18>)
100419ca:	2180      	movs	r1, #128	@ 0x80
100419cc:	0189      	lsls	r1, r1, #6
100419ce:	430a      	orrs	r2, r1
100419d0:	601a      	str	r2, [r3, #0]
}
100419d2:	46c0      	nop			@ (mov r8, r8)
100419d4:	46bd      	mov	sp, r7
100419d6:	bd80      	pop	{r7, pc}
100419d8:	48400000 	.word	0x48400000

100419dc <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
100419dc:	b580      	push	{r7, lr}
100419de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
100419e0:	4b04      	ldr	r3, [pc, #16]	@ (100419f4 <LL_RCC_RC64MPLL_Disable+0x18>)
100419e2:	681a      	ldr	r2, [r3, #0]
100419e4:	4b03      	ldr	r3, [pc, #12]	@ (100419f4 <LL_RCC_RC64MPLL_Disable+0x18>)
100419e6:	4904      	ldr	r1, [pc, #16]	@ (100419f8 <LL_RCC_RC64MPLL_Disable+0x1c>)
100419e8:	400a      	ands	r2, r1
100419ea:	601a      	str	r2, [r3, #0]
}
100419ec:	46c0      	nop			@ (mov r8, r8)
100419ee:	46bd      	mov	sp, r7
100419f0:	bd80      	pop	{r7, pc}
100419f2:	46c0      	nop			@ (mov r8, r8)
100419f4:	48400000 	.word	0x48400000
100419f8:	ffffdfff 	.word	0xffffdfff

100419fc <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
100419fc:	b580      	push	{r7, lr}
100419fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
10041a00:	4b07      	ldr	r3, [pc, #28]	@ (10041a20 <LL_RCC_RC64MPLL_IsReady+0x24>)
10041a02:	681a      	ldr	r2, [r3, #0]
10041a04:	2380      	movs	r3, #128	@ 0x80
10041a06:	01db      	lsls	r3, r3, #7
10041a08:	401a      	ands	r2, r3
10041a0a:	2380      	movs	r3, #128	@ 0x80
10041a0c:	01db      	lsls	r3, r3, #7
10041a0e:	429a      	cmp	r2, r3
10041a10:	d101      	bne.n	10041a16 <LL_RCC_RC64MPLL_IsReady+0x1a>
10041a12:	2301      	movs	r3, #1
10041a14:	e000      	b.n	10041a18 <LL_RCC_RC64MPLL_IsReady+0x1c>
10041a16:	2300      	movs	r3, #0
}
10041a18:	0018      	movs	r0, r3
10041a1a:	46bd      	mov	sp, r7
10041a1c:	bd80      	pop	{r7, pc}
10041a1e:	46c0      	nop			@ (mov r8, r8)
10041a20:	48400000 	.word	0x48400000

10041a24 <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
10041a24:	b580      	push	{r7, lr}
10041a26:	b082      	sub	sp, #8
10041a28:	af00      	add	r7, sp, #0
10041a2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
10041a2c:	4b06      	ldr	r3, [pc, #24]	@ (10041a48 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10041a2e:	689b      	ldr	r3, [r3, #8]
10041a30:	22e0      	movs	r2, #224	@ 0xe0
10041a32:	4393      	bics	r3, r2
10041a34:	0019      	movs	r1, r3
10041a36:	4b04      	ldr	r3, [pc, #16]	@ (10041a48 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10041a38:	687a      	ldr	r2, [r7, #4]
10041a3a:	430a      	orrs	r2, r1
10041a3c:	609a      	str	r2, [r3, #8]
}
10041a3e:	46c0      	nop			@ (mov r8, r8)
10041a40:	46bd      	mov	sp, r7
10041a42:	b002      	add	sp, #8
10041a44:	bd80      	pop	{r7, pc}
10041a46:	46c0      	nop			@ (mov r8, r8)
10041a48:	48400000 	.word	0x48400000

10041a4c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
10041a4c:	b580      	push	{r7, lr}
10041a4e:	b084      	sub	sp, #16
10041a50:	af00      	add	r7, sp, #0
10041a52:	6078      	str	r0, [r7, #4]
10041a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10041a56:	687b      	ldr	r3, [r7, #4]
10041a58:	2b00      	cmp	r3, #0
10041a5a:	d101      	bne.n	10041a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
10041a5c:	2301      	movs	r3, #1
10041a5e:	e098      	b.n	10041b92 <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
10041a60:	4b4e      	ldr	r3, [pc, #312]	@ (10041b9c <HAL_RCC_ClockConfig+0x150>)
10041a62:	685b      	ldr	r3, [r3, #4]
10041a64:	2230      	movs	r2, #48	@ 0x30
10041a66:	4393      	bics	r3, r2
10041a68:	0019      	movs	r1, r3
10041a6a:	4b4c      	ldr	r3, [pc, #304]	@ (10041b9c <HAL_RCC_ClockConfig+0x150>)
10041a6c:	683a      	ldr	r2, [r7, #0]
10041a6e:	430a      	orrs	r2, r1
10041a70:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
10041a72:	687b      	ldr	r3, [r7, #4]
10041a74:	681b      	ldr	r3, [r3, #0]
10041a76:	2b02      	cmp	r3, #2
10041a78:	d10e      	bne.n	10041a98 <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
10041a7a:	f7ff ff53 	bl	10041924 <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10041a7e:	f7ff ff65 	bl	1004194c <LL_RCC_HSI_IsReady>
10041a82:	1e03      	subs	r3, r0, #0
10041a84:	d101      	bne.n	10041a8a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
10041a86:	2301      	movs	r3, #1
10041a88:	e083      	b.n	10041b92 <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
10041a8a:	f7ff ffa7 	bl	100419dc <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10041a8e:	687b      	ldr	r3, [r7, #4]
10041a90:	685b      	ldr	r3, [r3, #4]
10041a92:	0018      	movs	r0, r3
10041a94:	f7ff ffc6 	bl	10041a24 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
10041a98:	687b      	ldr	r3, [r7, #4]
10041a9a:	681b      	ldr	r3, [r3, #0]
10041a9c:	2b00      	cmp	r3, #0
10041a9e:	d124      	bne.n	10041aea <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10041aa0:	f7ff ff54 	bl	1004194c <LL_RCC_HSI_IsReady>
10041aa4:	1e03      	subs	r3, r0, #0
10041aa6:	d101      	bne.n	10041aac <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
10041aa8:	2301      	movs	r3, #1
10041aaa:	e072      	b.n	10041b92 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10041aac:	f7ff ff26 	bl	100418fc <LL_RCC_HSE_IsReady>
10041ab0:	1e03      	subs	r3, r0, #0
10041ab2:	d101      	bne.n	10041ab8 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
10041ab4:	2301      	movs	r3, #1
10041ab6:	e06c      	b.n	10041b92 <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
10041ab8:	f7ff ff82 	bl	100419c0 <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10041abc:	f7ff fbe8 	bl	10041290 <HAL_GetTick>
10041ac0:	0003      	movs	r3, r0
10041ac2:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10041ac4:	e008      	b.n	10041ad8 <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10041ac6:	f7ff fbe3 	bl	10041290 <HAL_GetTick>
10041aca:	0002      	movs	r2, r0
10041acc:	68fb      	ldr	r3, [r7, #12]
10041ace:	1ad3      	subs	r3, r2, r3
10041ad0:	2b02      	cmp	r3, #2
10041ad2:	d901      	bls.n	10041ad8 <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
10041ad4:	2303      	movs	r3, #3
10041ad6:	e05c      	b.n	10041b92 <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10041ad8:	f7ff ff90 	bl	100419fc <LL_RCC_RC64MPLL_IsReady>
10041adc:	1e03      	subs	r3, r0, #0
10041ade:	d0f2      	beq.n	10041ac6 <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10041ae0:	687b      	ldr	r3, [r7, #4]
10041ae2:	685b      	ldr	r3, [r3, #4]
10041ae4:	0018      	movs	r0, r3
10041ae6:	f7ff ff9d 	bl	10041a24 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
10041aea:	687b      	ldr	r3, [r7, #4]
10041aec:	681b      	ldr	r3, [r3, #0]
10041aee:	2b01      	cmp	r3, #1
10041af0:	d117      	bne.n	10041b22 <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
10041af2:	f7ff ff3f 	bl	10041974 <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
10041af6:	f7ff ff29 	bl	1004194c <LL_RCC_HSI_IsReady>
10041afa:	1e03      	subs	r3, r0, #0
10041afc:	d001      	beq.n	10041b02 <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
10041afe:	2301      	movs	r3, #1
10041b00:	e047      	b.n	10041b92 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10041b02:	f7ff fefb 	bl	100418fc <LL_RCC_HSE_IsReady>
10041b06:	1e03      	subs	r3, r0, #0
10041b08:	d101      	bne.n	10041b0e <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
10041b0a:	2301      	movs	r3, #1
10041b0c:	e041      	b.n	10041b92 <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10041b0e:	4b24      	ldr	r3, [pc, #144]	@ (10041ba0 <HAL_RCC_ClockConfig+0x154>)
10041b10:	689b      	ldr	r3, [r3, #8]
10041b12:	22e0      	movs	r2, #224	@ 0xe0
10041b14:	4393      	bics	r3, r2
10041b16:	0019      	movs	r1, r3
10041b18:	687b      	ldr	r3, [r7, #4]
10041b1a:	685a      	ldr	r2, [r3, #4]
10041b1c:	4b20      	ldr	r3, [pc, #128]	@ (10041ba0 <HAL_RCC_ClockConfig+0x154>)
10041b1e:	430a      	orrs	r2, r1
10041b20:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
10041b22:	4b1e      	ldr	r3, [pc, #120]	@ (10041b9c <HAL_RCC_ClockConfig+0x150>)
10041b24:	685b      	ldr	r3, [r3, #4]
10041b26:	2230      	movs	r2, #48	@ 0x30
10041b28:	4013      	ands	r3, r2
10041b2a:	683a      	ldr	r2, [r7, #0]
10041b2c:	429a      	cmp	r2, r3
10041b2e:	d01d      	beq.n	10041b6c <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
10041b30:	4b1a      	ldr	r3, [pc, #104]	@ (10041b9c <HAL_RCC_ClockConfig+0x150>)
10041b32:	685b      	ldr	r3, [r3, #4]
10041b34:	2230      	movs	r2, #48	@ 0x30
10041b36:	4393      	bics	r3, r2
10041b38:	0019      	movs	r1, r3
10041b3a:	4b18      	ldr	r3, [pc, #96]	@ (10041b9c <HAL_RCC_ClockConfig+0x150>)
10041b3c:	683a      	ldr	r2, [r7, #0]
10041b3e:	430a      	orrs	r2, r1
10041b40:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10041b42:	f7ff fba5 	bl	10041290 <HAL_GetTick>
10041b46:	0003      	movs	r3, r0
10041b48:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
10041b4a:	e008      	b.n	10041b5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
10041b4c:	f7ff fba0 	bl	10041290 <HAL_GetTick>
10041b50:	0002      	movs	r2, r0
10041b52:	68fb      	ldr	r3, [r7, #12]
10041b54:	1ad3      	subs	r3, r2, r3
10041b56:	2b02      	cmp	r3, #2
10041b58:	d901      	bls.n	10041b5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
10041b5a:	2303      	movs	r3, #3
10041b5c:	e019      	b.n	10041b92 <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
10041b5e:	4b0f      	ldr	r3, [pc, #60]	@ (10041b9c <HAL_RCC_ClockConfig+0x150>)
10041b60:	685b      	ldr	r3, [r3, #4]
10041b62:	2230      	movs	r2, #48	@ 0x30
10041b64:	4013      	ands	r3, r2
10041b66:	683a      	ldr	r2, [r7, #0]
10041b68:	429a      	cmp	r2, r3
10041b6a:	d1ef      	bne.n	10041b4c <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
10041b6c:	2300      	movs	r3, #0
10041b6e:	60bb      	str	r3, [r7, #8]
10041b70:	e003      	b.n	10041b7a <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
10041b72:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10041b74:	68bb      	ldr	r3, [r7, #8]
10041b76:	3301      	adds	r3, #1
10041b78:	60bb      	str	r3, [r7, #8]
10041b7a:	68bb      	ldr	r3, [r7, #8]
10041b7c:	2b05      	cmp	r3, #5
10041b7e:	ddf8      	ble.n	10041b72 <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
10041b80:	f7ff f80e 	bl	10040ba0 <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
10041b84:	f7ff fb8e 	bl	100412a4 <HAL_GetTickPrio>
10041b88:	0003      	movs	r3, r0
10041b8a:	0018      	movs	r0, r3
10041b8c:	f7ff fb26 	bl	100411dc <HAL_InitTick>
10041b90:	0003      	movs	r3, r0
}
10041b92:	0018      	movs	r0, r3
10041b94:	46bd      	mov	sp, r7
10041b96:	b004      	add	sp, #16
10041b98:	bd80      	pop	{r7, pc}
10041b9a:	46c0      	nop			@ (mov r8, r8)
10041b9c:	40001000 	.word	0x40001000
10041ba0:	48400000 	.word	0x48400000

10041ba4 <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
10041ba4:	b580      	push	{r7, lr}
10041ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
10041ba8:	4b02      	ldr	r3, [pc, #8]	@ (10041bb4 <HAL_RCC_GetSysClockFreq+0x10>)
10041baa:	681b      	ldr	r3, [r3, #0]
}
10041bac:	0018      	movs	r0, r3
10041bae:	46bd      	mov	sp, r7
10041bb0:	bd80      	pop	{r7, pc}
10041bb2:	46c0      	nop			@ (mov r8, r8)
10041bb4:	200002c0 	.word	0x200002c0

10041bb8 <LL_RCC_HSE_IsReady>:
{
10041bb8:	b580      	push	{r7, lr}
10041bba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10041bbc:	4b07      	ldr	r3, [pc, #28]	@ (10041bdc <LL_RCC_HSE_IsReady+0x24>)
10041bbe:	681a      	ldr	r2, [r3, #0]
10041bc0:	2380      	movs	r3, #128	@ 0x80
10041bc2:	029b      	lsls	r3, r3, #10
10041bc4:	401a      	ands	r2, r3
10041bc6:	2380      	movs	r3, #128	@ 0x80
10041bc8:	029b      	lsls	r3, r3, #10
10041bca:	429a      	cmp	r2, r3
10041bcc:	d101      	bne.n	10041bd2 <LL_RCC_HSE_IsReady+0x1a>
10041bce:	2301      	movs	r3, #1
10041bd0:	e000      	b.n	10041bd4 <LL_RCC_HSE_IsReady+0x1c>
10041bd2:	2300      	movs	r3, #0
}
10041bd4:	0018      	movs	r0, r3
10041bd6:	46bd      	mov	sp, r7
10041bd8:	bd80      	pop	{r7, pc}
10041bda:	46c0      	nop			@ (mov r8, r8)
10041bdc:	48400000 	.word	0x48400000

10041be0 <LL_RCC_DIRECT_HSE_IsEnabled>:
{
10041be0:	b580      	push	{r7, lr}
10041be2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
10041be4:	4b05      	ldr	r3, [pc, #20]	@ (10041bfc <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
10041be6:	689b      	ldr	r3, [r3, #8]
10041be8:	2208      	movs	r2, #8
10041bea:	4013      	ands	r3, r2
10041bec:	2b08      	cmp	r3, #8
10041bee:	d101      	bne.n	10041bf4 <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
10041bf0:	2301      	movs	r3, #1
10041bf2:	e000      	b.n	10041bf6 <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
10041bf4:	2300      	movs	r3, #0
}
10041bf6:	0018      	movs	r0, r3
10041bf8:	46bd      	mov	sp, r7
10041bfa:	bd80      	pop	{r7, pc}
10041bfc:	48400000 	.word	0x48400000

10041c00 <LL_RCC_LSCO_SetSource>:
{
10041c00:	b580      	push	{r7, lr}
10041c02:	b082      	sub	sp, #8
10041c04:	af00      	add	r7, sp, #0
10041c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
10041c08:	4b06      	ldr	r3, [pc, #24]	@ (10041c24 <LL_RCC_LSCO_SetSource+0x24>)
10041c0a:	689b      	ldr	r3, [r3, #8]
10041c0c:	4a06      	ldr	r2, [pc, #24]	@ (10041c28 <LL_RCC_LSCO_SetSource+0x28>)
10041c0e:	4013      	ands	r3, r2
10041c10:	0019      	movs	r1, r3
10041c12:	4b04      	ldr	r3, [pc, #16]	@ (10041c24 <LL_RCC_LSCO_SetSource+0x24>)
10041c14:	687a      	ldr	r2, [r7, #4]
10041c16:	430a      	orrs	r2, r1
10041c18:	609a      	str	r2, [r3, #8]
}
10041c1a:	46c0      	nop			@ (mov r8, r8)
10041c1c:	46bd      	mov	sp, r7
10041c1e:	b002      	add	sp, #8
10041c20:	bd80      	pop	{r7, pc}
10041c22:	46c0      	nop			@ (mov r8, r8)
10041c24:	48400000 	.word	0x48400000
10041c28:	fffe7fff 	.word	0xfffe7fff

10041c2c <LL_RCC_LSCO_GetSource>:
{
10041c2c:	b580      	push	{r7, lr}
10041c2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_CLKSLOWSEL));
10041c30:	4b03      	ldr	r3, [pc, #12]	@ (10041c40 <LL_RCC_LSCO_GetSource+0x14>)
10041c32:	689a      	ldr	r2, [r3, #8]
10041c34:	23c0      	movs	r3, #192	@ 0xc0
10041c36:	025b      	lsls	r3, r3, #9
10041c38:	4013      	ands	r3, r2
}
10041c3a:	0018      	movs	r0, r3
10041c3c:	46bd      	mov	sp, r7
10041c3e:	bd80      	pop	{r7, pc}
10041c40:	48400000 	.word	0x48400000

10041c44 <LL_RCC_SetRFClock>:
{
10041c44:	b580      	push	{r7, lr}
10041c46:	b082      	sub	sp, #8
10041c48:	af00      	add	r7, sp, #0
10041c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
10041c4c:	4b06      	ldr	r3, [pc, #24]	@ (10041c68 <LL_RCC_SetRFClock+0x24>)
10041c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10041c50:	2204      	movs	r2, #4
10041c52:	4393      	bics	r3, r2
10041c54:	0019      	movs	r1, r3
10041c56:	4b04      	ldr	r3, [pc, #16]	@ (10041c68 <LL_RCC_SetRFClock+0x24>)
10041c58:	687a      	ldr	r2, [r7, #4]
10041c5a:	430a      	orrs	r2, r1
10041c5c:	661a      	str	r2, [r3, #96]	@ 0x60
}
10041c5e:	46c0      	nop			@ (mov r8, r8)
10041c60:	46bd      	mov	sp, r7
10041c62:	b002      	add	sp, #8
10041c64:	bd80      	pop	{r7, pc}
10041c66:	46c0      	nop			@ (mov r8, r8)
10041c68:	48400000 	.word	0x48400000

10041c6c <LL_RCC_GetRFClock>:
{
10041c6c:	b580      	push	{r7, lr}
10041c6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV));
10041c70:	4b03      	ldr	r3, [pc, #12]	@ (10041c80 <LL_RCC_GetRFClock+0x14>)
10041c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10041c74:	2204      	movs	r2, #4
10041c76:	4013      	ands	r3, r2
}
10041c78:	0018      	movs	r0, r3
10041c7a:	46bd      	mov	sp, r7
10041c7c:	bd80      	pop	{r7, pc}
10041c7e:	46c0      	nop			@ (mov r8, r8)
10041c80:	48400000 	.word	0x48400000

10041c84 <LL_RCC_SetSMPSPrescaler>:
{
10041c84:	b580      	push	{r7, lr}
10041c86:	b082      	sub	sp, #8
10041c88:	af00      	add	r7, sp, #0
10041c8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
10041c8c:	4b06      	ldr	r3, [pc, #24]	@ (10041ca8 <LL_RCC_SetSMPSPrescaler+0x24>)
10041c8e:	689b      	ldr	r3, [r3, #8]
10041c90:	4a06      	ldr	r2, [pc, #24]	@ (10041cac <LL_RCC_SetSMPSPrescaler+0x28>)
10041c92:	4013      	ands	r3, r2
10041c94:	0019      	movs	r1, r3
10041c96:	4b04      	ldr	r3, [pc, #16]	@ (10041ca8 <LL_RCC_SetSMPSPrescaler+0x24>)
10041c98:	687a      	ldr	r2, [r7, #4]
10041c9a:	430a      	orrs	r2, r1
10041c9c:	609a      	str	r2, [r3, #8]
}
10041c9e:	46c0      	nop			@ (mov r8, r8)
10041ca0:	46bd      	mov	sp, r7
10041ca2:	b002      	add	sp, #8
10041ca4:	bd80      	pop	{r7, pc}
10041ca6:	46c0      	nop			@ (mov r8, r8)
10041ca8:	48400000 	.word	0x48400000
10041cac:	ffffefff 	.word	0xffffefff

10041cb0 <LL_RCC_GetSMPSPrescaler>:
{
10041cb0:	b580      	push	{r7, lr}
10041cb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SMPSDIV));
10041cb4:	4b03      	ldr	r3, [pc, #12]	@ (10041cc4 <LL_RCC_GetSMPSPrescaler+0x14>)
10041cb6:	689a      	ldr	r2, [r3, #8]
10041cb8:	2380      	movs	r3, #128	@ 0x80
10041cba:	015b      	lsls	r3, r3, #5
10041cbc:	4013      	ands	r3, r2
}
10041cbe:	0018      	movs	r0, r3
10041cc0:	46bd      	mov	sp, r7
10041cc2:	bd80      	pop	{r7, pc}
10041cc4:	48400000 	.word	0x48400000

10041cc8 <LL_RCC_SetLPUARTClockSource>:
{
10041cc8:	b580      	push	{r7, lr}
10041cca:	b082      	sub	sp, #8
10041ccc:	af00      	add	r7, sp, #0
10041cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_LPUCLKSEL, Source);
10041cd0:	4b06      	ldr	r3, [pc, #24]	@ (10041cec <LL_RCC_SetLPUARTClockSource+0x24>)
10041cd2:	689b      	ldr	r3, [r3, #8]
10041cd4:	4a06      	ldr	r2, [pc, #24]	@ (10041cf0 <LL_RCC_SetLPUARTClockSource+0x28>)
10041cd6:	4013      	ands	r3, r2
10041cd8:	0019      	movs	r1, r3
10041cda:	4b04      	ldr	r3, [pc, #16]	@ (10041cec <LL_RCC_SetLPUARTClockSource+0x24>)
10041cdc:	687a      	ldr	r2, [r7, #4]
10041cde:	430a      	orrs	r2, r1
10041ce0:	609a      	str	r2, [r3, #8]
}
10041ce2:	46c0      	nop			@ (mov r8, r8)
10041ce4:	46bd      	mov	sp, r7
10041ce6:	b002      	add	sp, #8
10041ce8:	bd80      	pop	{r7, pc}
10041cea:	46c0      	nop			@ (mov r8, r8)
10041cec:	48400000 	.word	0x48400000
10041cf0:	ffffdfff 	.word	0xffffdfff

10041cf4 <LL_RCC_GetLPUARTClockSource>:
{
10041cf4:	b580      	push	{r7, lr}
10041cf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
10041cf8:	4b03      	ldr	r3, [pc, #12]	@ (10041d08 <LL_RCC_GetLPUARTClockSource+0x14>)
10041cfa:	689a      	ldr	r2, [r3, #8]
10041cfc:	2380      	movs	r3, #128	@ 0x80
10041cfe:	019b      	lsls	r3, r3, #6
10041d00:	4013      	ands	r3, r2
}
10041d02:	0018      	movs	r0, r3
10041d04:	46bd      	mov	sp, r7
10041d06:	bd80      	pop	{r7, pc}
10041d08:	48400000 	.word	0x48400000

10041d0c <LL_RCC_SetSPI3I2SClockSource>:
{
10041d0c:	b580      	push	{r7, lr}
10041d0e:	b082      	sub	sp, #8
10041d10:	af00      	add	r7, sp, #0
10041d12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
10041d14:	4b06      	ldr	r3, [pc, #24]	@ (10041d30 <LL_RCC_SetSPI3I2SClockSource+0x24>)
10041d16:	689b      	ldr	r3, [r3, #8]
10041d18:	4a06      	ldr	r2, [pc, #24]	@ (10041d34 <LL_RCC_SetSPI3I2SClockSource+0x28>)
10041d1a:	4013      	ands	r3, r2
10041d1c:	0019      	movs	r1, r3
10041d1e:	4b04      	ldr	r3, [pc, #16]	@ (10041d30 <LL_RCC_SetSPI3I2SClockSource+0x24>)
10041d20:	687a      	ldr	r2, [r7, #4]
10041d22:	430a      	orrs	r2, r1
10041d24:	609a      	str	r2, [r3, #8]
}
10041d26:	46c0      	nop			@ (mov r8, r8)
10041d28:	46bd      	mov	sp, r7
10041d2a:	b002      	add	sp, #8
10041d2c:	bd80      	pop	{r7, pc}
10041d2e:	46c0      	nop			@ (mov r8, r8)
10041d30:	48400000 	.word	0x48400000
10041d34:	ff3fffff 	.word	0xff3fffff

10041d38 <LL_RCC_GetSPI3I2SClockSource>:
{
10041d38:	b580      	push	{r7, lr}
10041d3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL));
10041d3c:	4b03      	ldr	r3, [pc, #12]	@ (10041d4c <LL_RCC_GetSPI3I2SClockSource+0x14>)
10041d3e:	689a      	ldr	r2, [r3, #8]
10041d40:	23c0      	movs	r3, #192	@ 0xc0
10041d42:	041b      	lsls	r3, r3, #16
10041d44:	4013      	ands	r3, r2
}
10041d46:	0018      	movs	r0, r3
10041d48:	46bd      	mov	sp, r7
10041d4a:	bd80      	pop	{r7, pc}
10041d4c:	48400000 	.word	0x48400000

10041d50 <LL_RCC_RC64MPLL_IsReady>:
{
10041d50:	b580      	push	{r7, lr}
10041d52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
10041d54:	4b07      	ldr	r3, [pc, #28]	@ (10041d74 <LL_RCC_RC64MPLL_IsReady+0x24>)
10041d56:	681a      	ldr	r2, [r3, #0]
10041d58:	2380      	movs	r3, #128	@ 0x80
10041d5a:	01db      	lsls	r3, r3, #7
10041d5c:	401a      	ands	r2, r3
10041d5e:	2380      	movs	r3, #128	@ 0x80
10041d60:	01db      	lsls	r3, r3, #7
10041d62:	429a      	cmp	r2, r3
10041d64:	d101      	bne.n	10041d6a <LL_RCC_RC64MPLL_IsReady+0x1a>
10041d66:	2301      	movs	r3, #1
10041d68:	e000      	b.n	10041d6c <LL_RCC_RC64MPLL_IsReady+0x1c>
10041d6a:	2300      	movs	r3, #0
}
10041d6c:	0018      	movs	r0, r3
10041d6e:	46bd      	mov	sp, r7
10041d70:	bd80      	pop	{r7, pc}
10041d72:	46c0      	nop			@ (mov r8, r8)
10041d74:	48400000 	.word	0x48400000

10041d78 <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
10041d78:	b580      	push	{r7, lr}
10041d7a:	b082      	sub	sp, #8
10041d7c:	af00      	add	r7, sp, #0
10041d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
10041d80:	687b      	ldr	r3, [r7, #4]
10041d82:	681b      	ldr	r3, [r3, #0]
10041d84:	2201      	movs	r2, #1
10041d86:	4013      	ands	r3, r2
10041d88:	d004      	beq.n	10041d94 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
10041d8a:	687b      	ldr	r3, [r7, #4]
10041d8c:	691b      	ldr	r3, [r3, #16]
10041d8e:	0018      	movs	r0, r3
10041d90:	f7ff ff58 	bl	10041c44 <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
10041d94:	687b      	ldr	r3, [r7, #4]
10041d96:	681b      	ldr	r3, [r3, #0]
10041d98:	2202      	movs	r2, #2
10041d9a:	4013      	ands	r3, r2
10041d9c:	d004      	beq.n	10041da8 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
10041d9e:	687b      	ldr	r3, [r7, #4]
10041da0:	695b      	ldr	r3, [r3, #20]
10041da2:	0018      	movs	r0, r3
10041da4:	f7ff ff6e 	bl	10041c84 <LL_RCC_SetSMPSPrescaler>
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
10041da8:	687b      	ldr	r3, [r7, #4]
10041daa:	681b      	ldr	r3, [r3, #0]
10041dac:	2208      	movs	r2, #8
10041dae:	4013      	ands	r3, r2
10041db0:	d004      	beq.n	10041dbc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
10041db2:	687b      	ldr	r3, [r7, #4]
10041db4:	685b      	ldr	r3, [r3, #4]
10041db6:	0018      	movs	r0, r3
10041db8:	f7ff ffa8 	bl	10041d0c <LL_RCC_SetSPI3I2SClockSource>
  }
#endif

#if defined(RCC_CFGR_LPUCLKSEL)
  /*-------------------------- LPUART1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1))
10041dbc:	687b      	ldr	r3, [r7, #4]
10041dbe:	681b      	ldr	r3, [r3, #0]
10041dc0:	2210      	movs	r2, #16
10041dc2:	4013      	ands	r3, r2
10041dc4:	d004      	beq.n	10041dd0 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_LPUART1_CLOCK_SOURCE(PeriphClkInit->LPUART1ClockSelection));
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
10041dc6:	687b      	ldr	r3, [r7, #4]
10041dc8:	68db      	ldr	r3, [r3, #12]
10041dca:	0018      	movs	r0, r3
10041dcc:	f7ff ff7c 	bl	10041cc8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
10041dd0:	687b      	ldr	r3, [r7, #4]
10041dd2:	689b      	ldr	r3, [r3, #8]
10041dd4:	2220      	movs	r2, #32
10041dd6:	4013      	ands	r3, r2
10041dd8:	d004      	beq.n	10041de4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
10041dda:	687b      	ldr	r3, [r7, #4]
10041ddc:	689b      	ldr	r3, [r3, #8]
10041dde:	0018      	movs	r0, r3
10041de0:	f7ff ff0e 	bl	10041c00 <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
10041de4:	2300      	movs	r3, #0
}
10041de6:	0018      	movs	r0, r3
10041de8:	46bd      	mov	sp, r7
10041dea:	b002      	add	sp, #8
10041dec:	bd80      	pop	{r7, pc}
	...

10041df0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RTC_WDG_BLEWKUP   RTC, WDG and BLEWKUP peripheral clock
  * @retval Frequency in Hz
  * @note   (*) Peripherals are not available on all devices
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
10041df0:	b580      	push	{r7, lr}
10041df2:	b084      	sub	sp, #16
10041df4:	af00      	add	r7, sp, #0
10041df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  /* No if clausule is covered */
  frequency = 0;
10041df8:	2300      	movs	r3, #0
10041dfa:	60fb      	str	r3, [r7, #12]

  switch (PeriphClk)
10041dfc:	687b      	ldr	r3, [r7, #4]
10041dfe:	2b20      	cmp	r3, #32
10041e00:	d900      	bls.n	10041e04 <HAL_RCCEx_GetPeriphCLKFreq+0x14>
10041e02:	e07b      	b.n	10041efc <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
10041e04:	687b      	ldr	r3, [r7, #4]
10041e06:	009a      	lsls	r2, r3, #2
10041e08:	4b40      	ldr	r3, [pc, #256]	@ (10041f0c <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
10041e0a:	18d3      	adds	r3, r2, r3
10041e0c:	681b      	ldr	r3, [r3, #0]
10041e0e:	469f      	mov	pc, r3
  {
    case RCC_PERIPHCLK_RF :
      switch (__HAL_RCC_RF_CLK_GET_CONFIG())
10041e10:	f7ff ff2c 	bl	10041c6c <LL_RCC_GetRFClock>
10041e14:	1e03      	subs	r3, r0, #0
10041e16:	d002      	beq.n	10041e1e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
10041e18:	2b04      	cmp	r3, #4
10041e1a:	d003      	beq.n	10041e24 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        case RCC_RF_CLK_16M:
          frequency = HSE_VALUE / 2;
          break;
      }

      break;
10041e1c:	e071      	b.n	10041f02 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE;
10041e1e:	4b3c      	ldr	r3, [pc, #240]	@ (10041f10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
10041e20:	60fb      	str	r3, [r7, #12]
          break;
10041e22:	e002      	b.n	10041e2a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          frequency = HSE_VALUE / 2;
10041e24:	4b3b      	ldr	r3, [pc, #236]	@ (10041f14 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
10041e26:	60fb      	str	r3, [r7, #12]
          break;
10041e28:	46c0      	nop			@ (mov r8, r8)
      break;
10041e2a:	e06a      	b.n	10041f02 <HAL_RCCEx_GetPeriphCLKFreq+0x112>

    case RCC_PERIPHCLK_SMPS :
      switch (__HAL_RCC_GET_SMPS_DIV())
10041e2c:	f7ff ff40 	bl	10041cb0 <LL_RCC_GetSMPSPrescaler>
10041e30:	1e03      	subs	r3, r0, #0
10041e32:	d004      	beq.n	10041e3e <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
10041e34:	2280      	movs	r2, #128	@ 0x80
10041e36:	0152      	lsls	r2, r2, #5
10041e38:	4293      	cmp	r3, r2
10041e3a:	d003      	beq.n	10041e44 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          break;
        case RCC_SMPSCLK_DIV4:
          frequency = HSE_VALUE / 8;
          break;
      }
      break;
10041e3c:	e061      	b.n	10041f02 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE / 4;
10041e3e:	4b36      	ldr	r3, [pc, #216]	@ (10041f18 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
10041e40:	60fb      	str	r3, [r7, #12]
          break;
10041e42:	e002      	b.n	10041e4a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSE_VALUE / 8;
10041e44:	4b35      	ldr	r3, [pc, #212]	@ (10041f1c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
10041e46:	60fb      	str	r3, [r7, #12]
          break;
10041e48:	46c0      	nop			@ (mov r8, r8)
      break;
10041e4a:	e05a      	b.n	10041f02 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      }
      break;
#endif

    case RCC_PERIPHCLK_SPI3_I2S :
      if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_DIRECT_HSE)
10041e4c:	f7ff fec8 	bl	10041be0 <LL_RCC_DIRECT_HSE_IsEnabled>
10041e50:	1e03      	subs	r3, r0, #0
10041e52:	d005      	beq.n	10041e60 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      {
        if (__HAL_RCC_GET_HSE_READYFLAG() == 0)
10041e54:	f7ff feb0 	bl	10041bb8 <LL_RCC_HSE_IsReady>
10041e58:	1e03      	subs	r3, r0, #0
10041e5a:	d107      	bne.n	10041e6c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
10041e5c:	2300      	movs	r3, #0
10041e5e:	e051      	b.n	10041f04 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      else
      {
        if (__HAL_RCC_RC64MPLL_READYFLAG() == 0)
10041e60:	f7ff ff76 	bl	10041d50 <LL_RCC_RC64MPLL_IsReady>
10041e64:	1e03      	subs	r3, r0, #0
10041e66:	d101      	bne.n	10041e6c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
10041e68:	2300      	movs	r3, #0
10041e6a:	e04b      	b.n	10041f04 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      spiFreqValue = __HAL_RCC_GET_SPI3I2S_CLK_CONFIG();
10041e6c:	f7ff ff64 	bl	10041d38 <LL_RCC_GetSPI3I2SClockSource>
10041e70:	0003      	movs	r3, r0
10041e72:	60bb      	str	r3, [r7, #8]
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_16M)
10041e74:	68bb      	ldr	r3, [r7, #8]
10041e76:	2b00      	cmp	r3, #0
10041e78:	d101      	bne.n	10041e7e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
      {
        frequency = HSE_VALUE / 2;
10041e7a:	4b26      	ldr	r3, [pc, #152]	@ (10041f14 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
10041e7c:	60fb      	str	r3, [r7, #12]
      }

      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_32M)
10041e7e:	68ba      	ldr	r2, [r7, #8]
10041e80:	2380      	movs	r3, #128	@ 0x80
10041e82:	03db      	lsls	r3, r3, #15
10041e84:	429a      	cmp	r2, r3
10041e86:	d101      	bne.n	10041e8c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      {
        frequency = HSE_VALUE;
10041e88:	4b21      	ldr	r3, [pc, #132]	@ (10041f10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
10041e8a:	60fb      	str	r3, [r7, #12]
      }
#if defined(RCC_SPI3I2S_CLKSOURCE_64M)
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_64M)
10041e8c:	68ba      	ldr	r2, [r7, #8]
10041e8e:	2380      	movs	r3, #128	@ 0x80
10041e90:	041b      	lsls	r3, r3, #16
10041e92:	429a      	cmp	r2, r3
10041e94:	d134      	bne.n	10041f00 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
      {
        frequency = HSE_VALUE * 2;
10041e96:	4b22      	ldr	r3, [pc, #136]	@ (10041f20 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
10041e98:	60fb      	str	r3, [r7, #12]
      }
#endif
      break;
10041e9a:	e031      	b.n	10041f00 <HAL_RCCEx_GetPeriphCLKFreq+0x110>

#if defined(RCC_CFGR_LPUCLKSEL)
    case RCC_PERIPHCLK_LPUART1 :
      switch (__HAL_RCC_GET_LPUART1_CLK_CONFIG())
10041e9c:	f7ff ff2a 	bl	10041cf4 <LL_RCC_GetLPUARTClockSource>
10041ea0:	0002      	movs	r2, r0
10041ea2:	2380      	movs	r3, #128	@ 0x80
10041ea4:	019b      	lsls	r3, r3, #6
10041ea6:	429a      	cmp	r2, r3
10041ea8:	d103      	bne.n	10041eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      {
        case RCC_LPUART1_CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10041eaa:	2380      	movs	r3, #128	@ 0x80
10041eac:	021b      	lsls	r3, r3, #8
10041eae:	60fb      	str	r3, [r7, #12]
          break;
10041eb0:	e002      	b.n	10041eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
        case RCC_LPUART1_CLKSOURCE_16M:
        default:
          frequency = HSE_VALUE / 2;
10041eb2:	4b18      	ldr	r3, [pc, #96]	@ (10041f14 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
10041eb4:	60fb      	str	r3, [r7, #12]
          break;
10041eb6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
10041eb8:	e023      	b.n	10041f02 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
#endif /* RCC_CFGR_LPUCLKSEL */

    case RCC_PERIPHCLK_RTC_WDG_BLEWKUP :
      switch (LL_RCC_LSCO_GetSource())
10041eba:	f7ff feb7 	bl	10041c2c <LL_RCC_LSCO_GetSource>
10041ebe:	0003      	movs	r3, r0
10041ec0:	22c0      	movs	r2, #192	@ 0xc0
10041ec2:	0252      	lsls	r2, r2, #9
10041ec4:	4293      	cmp	r3, r2
10041ec6:	d014      	beq.n	10041ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
10041ec8:	22c0      	movs	r2, #192	@ 0xc0
10041eca:	0252      	lsls	r2, r2, #9
10041ecc:	4293      	cmp	r3, r2
10041ece:	d813      	bhi.n	10041ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
10041ed0:	2280      	movs	r2, #128	@ 0x80
10041ed2:	0212      	lsls	r2, r2, #8
10041ed4:	4293      	cmp	r3, r2
10041ed6:	d004      	beq.n	10041ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
10041ed8:	2280      	movs	r2, #128	@ 0x80
10041eda:	0252      	lsls	r2, r2, #9
10041edc:	4293      	cmp	r3, r2
10041ede:	d004      	beq.n	10041eea <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
          break;
        case LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048:
          frequency = HSE_VALUE >> 10;
          break;
        default :
          break;
10041ee0:	e00a      	b.n	10041ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          frequency = LSE_VALUE;
10041ee2:	2380      	movs	r3, #128	@ 0x80
10041ee4:	021b      	lsls	r3, r3, #8
10041ee6:	60fb      	str	r3, [r7, #12]
          break;
10041ee8:	e007      	b.n	10041efa <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = LSI_VALUE;
10041eea:	23fa      	movs	r3, #250	@ 0xfa
10041eec:	01db      	lsls	r3, r3, #7
10041eee:	60fb      	str	r3, [r7, #12]
          break;
10041ef0:	e003      	b.n	10041efa <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = HSE_VALUE >> 10;
10041ef2:	4b0c      	ldr	r3, [pc, #48]	@ (10041f24 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
10041ef4:	60fb      	str	r3, [r7, #12]
          break;
10041ef6:	e000      	b.n	10041efa <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          break;
10041ef8:	46c0      	nop			@ (mov r8, r8)
      }
      break;
10041efa:	e002      	b.n	10041f02 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    default :
      break;
10041efc:	46c0      	nop			@ (mov r8, r8)
10041efe:	e000      	b.n	10041f02 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      break;
10041f00:	46c0      	nop			@ (mov r8, r8)
  }

  return (frequency);
10041f02:	68fb      	ldr	r3, [r7, #12]
}
10041f04:	0018      	movs	r0, r3
10041f06:	46bd      	mov	sp, r7
10041f08:	b004      	add	sp, #16
10041f0a:	bd80      	pop	{r7, pc}
10041f0c:	10043704 	.word	0x10043704
10041f10:	01e84800 	.word	0x01e84800
10041f14:	00f42400 	.word	0x00f42400
10041f18:	007a1200 	.word	0x007a1200
10041f1c:	003d0900 	.word	0x003d0900
10041f20:	03d09000 	.word	0x03d09000
10041f24:	00007a12 	.word	0x00007a12

10041f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
10041f28:	b580      	push	{r7, lr}
10041f2a:	b082      	sub	sp, #8
10041f2c:	af00      	add	r7, sp, #0
10041f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
10041f30:	687b      	ldr	r3, [r7, #4]
10041f32:	2b00      	cmp	r3, #0
10041f34:	d101      	bne.n	10041f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
10041f36:	2301      	movs	r3, #1
10041f38:	e046      	b.n	10041fc8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
10041f3a:	687b      	ldr	r3, [r7, #4]
10041f3c:	2288      	movs	r2, #136	@ 0x88
10041f3e:	589b      	ldr	r3, [r3, r2]
10041f40:	2b00      	cmp	r3, #0
10041f42:	d107      	bne.n	10041f54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
10041f44:	687b      	ldr	r3, [r7, #4]
10041f46:	2284      	movs	r2, #132	@ 0x84
10041f48:	2100      	movs	r1, #0
10041f4a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
10041f4c:	687b      	ldr	r3, [r7, #4]
10041f4e:	0018      	movs	r0, r3
10041f50:	f000 f840 	bl	10041fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
10041f54:	687b      	ldr	r3, [r7, #4]
10041f56:	2288      	movs	r2, #136	@ 0x88
10041f58:	2124      	movs	r1, #36	@ 0x24
10041f5a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
10041f5c:	687b      	ldr	r3, [r7, #4]
10041f5e:	681b      	ldr	r3, [r3, #0]
10041f60:	681a      	ldr	r2, [r3, #0]
10041f62:	687b      	ldr	r3, [r7, #4]
10041f64:	681b      	ldr	r3, [r3, #0]
10041f66:	2101      	movs	r1, #1
10041f68:	438a      	bics	r2, r1
10041f6a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
10041f6c:	687b      	ldr	r3, [r7, #4]
10041f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10041f70:	2b00      	cmp	r3, #0
10041f72:	d003      	beq.n	10041f7c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
10041f74:	687b      	ldr	r3, [r7, #4]
10041f76:	0018      	movs	r0, r3
10041f78:	f000 fa40 	bl	100423fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
10041f7c:	687b      	ldr	r3, [r7, #4]
10041f7e:	0018      	movs	r0, r3
10041f80:	f000 f8d4 	bl	1004212c <UART_SetConfig>
10041f84:	0003      	movs	r3, r0
10041f86:	2b01      	cmp	r3, #1
10041f88:	d101      	bne.n	10041f8e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
10041f8a:	2301      	movs	r3, #1
10041f8c:	e01c      	b.n	10041fc8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
10041f8e:	687b      	ldr	r3, [r7, #4]
10041f90:	681b      	ldr	r3, [r3, #0]
10041f92:	685a      	ldr	r2, [r3, #4]
10041f94:	687b      	ldr	r3, [r7, #4]
10041f96:	681b      	ldr	r3, [r3, #0]
10041f98:	490d      	ldr	r1, [pc, #52]	@ (10041fd0 <HAL_UART_Init+0xa8>)
10041f9a:	400a      	ands	r2, r1
10041f9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
10041f9e:	687b      	ldr	r3, [r7, #4]
10041fa0:	681b      	ldr	r3, [r3, #0]
10041fa2:	689a      	ldr	r2, [r3, #8]
10041fa4:	687b      	ldr	r3, [r7, #4]
10041fa6:	681b      	ldr	r3, [r3, #0]
10041fa8:	212a      	movs	r1, #42	@ 0x2a
10041faa:	438a      	bics	r2, r1
10041fac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
10041fae:	687b      	ldr	r3, [r7, #4]
10041fb0:	681b      	ldr	r3, [r3, #0]
10041fb2:	681a      	ldr	r2, [r3, #0]
10041fb4:	687b      	ldr	r3, [r7, #4]
10041fb6:	681b      	ldr	r3, [r3, #0]
10041fb8:	2101      	movs	r1, #1
10041fba:	430a      	orrs	r2, r1
10041fbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10041fbe:	687b      	ldr	r3, [r7, #4]
10041fc0:	0018      	movs	r0, r3
10041fc2:	f000 facf 	bl	10042564 <UART_CheckIdleState>
10041fc6:	0003      	movs	r3, r0
}
10041fc8:	0018      	movs	r0, r3
10041fca:	46bd      	mov	sp, r7
10041fcc:	b002      	add	sp, #8
10041fce:	bd80      	pop	{r7, pc}
10041fd0:	ffffb7ff 	.word	0xffffb7ff

10041fd4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
10041fd4:	b580      	push	{r7, lr}
10041fd6:	b082      	sub	sp, #8
10041fd8:	af00      	add	r7, sp, #0
10041fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
10041fdc:	46c0      	nop			@ (mov r8, r8)
10041fde:	46bd      	mov	sp, r7
10041fe0:	b002      	add	sp, #8
10041fe2:	bd80      	pop	{r7, pc}

10041fe4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10041fe4:	b580      	push	{r7, lr}
10041fe6:	b08a      	sub	sp, #40	@ 0x28
10041fe8:	af02      	add	r7, sp, #8
10041fea:	60f8      	str	r0, [r7, #12]
10041fec:	60b9      	str	r1, [r7, #8]
10041fee:	603b      	str	r3, [r7, #0]
10041ff0:	1dbb      	adds	r3, r7, #6
10041ff2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
10041ff4:	68fb      	ldr	r3, [r7, #12]
10041ff6:	2288      	movs	r2, #136	@ 0x88
10041ff8:	589b      	ldr	r3, [r3, r2]
10041ffa:	2b20      	cmp	r3, #32
10041ffc:	d000      	beq.n	10042000 <HAL_UART_Transmit+0x1c>
10041ffe:	e090      	b.n	10042122 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
10042000:	68bb      	ldr	r3, [r7, #8]
10042002:	2b00      	cmp	r3, #0
10042004:	d003      	beq.n	1004200e <HAL_UART_Transmit+0x2a>
10042006:	1dbb      	adds	r3, r7, #6
10042008:	881b      	ldrh	r3, [r3, #0]
1004200a:	2b00      	cmp	r3, #0
1004200c:	d101      	bne.n	10042012 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
1004200e:	2301      	movs	r3, #1
10042010:	e088      	b.n	10042124 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
10042012:	68fb      	ldr	r3, [r7, #12]
10042014:	689a      	ldr	r2, [r3, #8]
10042016:	2380      	movs	r3, #128	@ 0x80
10042018:	015b      	lsls	r3, r3, #5
1004201a:	429a      	cmp	r2, r3
1004201c:	d109      	bne.n	10042032 <HAL_UART_Transmit+0x4e>
1004201e:	68fb      	ldr	r3, [r7, #12]
10042020:	691b      	ldr	r3, [r3, #16]
10042022:	2b00      	cmp	r3, #0
10042024:	d105      	bne.n	10042032 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
10042026:	68bb      	ldr	r3, [r7, #8]
10042028:	2201      	movs	r2, #1
1004202a:	4013      	ands	r3, r2
1004202c:	d001      	beq.n	10042032 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
1004202e:	2301      	movs	r3, #1
10042030:	e078      	b.n	10042124 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
10042032:	68fb      	ldr	r3, [r7, #12]
10042034:	2290      	movs	r2, #144	@ 0x90
10042036:	2100      	movs	r1, #0
10042038:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
1004203a:	68fb      	ldr	r3, [r7, #12]
1004203c:	2288      	movs	r2, #136	@ 0x88
1004203e:	2121      	movs	r1, #33	@ 0x21
10042040:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
10042042:	f7ff f925 	bl	10041290 <HAL_GetTick>
10042046:	0003      	movs	r3, r0
10042048:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
1004204a:	68fb      	ldr	r3, [r7, #12]
1004204c:	1dba      	adds	r2, r7, #6
1004204e:	2154      	movs	r1, #84	@ 0x54
10042050:	8812      	ldrh	r2, [r2, #0]
10042052:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
10042054:	68fb      	ldr	r3, [r7, #12]
10042056:	1dba      	adds	r2, r7, #6
10042058:	2156      	movs	r1, #86	@ 0x56
1004205a:	8812      	ldrh	r2, [r2, #0]
1004205c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
1004205e:	68fb      	ldr	r3, [r7, #12]
10042060:	689a      	ldr	r2, [r3, #8]
10042062:	2380      	movs	r3, #128	@ 0x80
10042064:	015b      	lsls	r3, r3, #5
10042066:	429a      	cmp	r2, r3
10042068:	d108      	bne.n	1004207c <HAL_UART_Transmit+0x98>
1004206a:	68fb      	ldr	r3, [r7, #12]
1004206c:	691b      	ldr	r3, [r3, #16]
1004206e:	2b00      	cmp	r3, #0
10042070:	d104      	bne.n	1004207c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
10042072:	2300      	movs	r3, #0
10042074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
10042076:	68bb      	ldr	r3, [r7, #8]
10042078:	61bb      	str	r3, [r7, #24]
1004207a:	e003      	b.n	10042084 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
1004207c:	68bb      	ldr	r3, [r7, #8]
1004207e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
10042080:	2300      	movs	r3, #0
10042082:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
10042084:	e030      	b.n	100420e8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
10042086:	697a      	ldr	r2, [r7, #20]
10042088:	68f8      	ldr	r0, [r7, #12]
1004208a:	683b      	ldr	r3, [r7, #0]
1004208c:	9300      	str	r3, [sp, #0]
1004208e:	0013      	movs	r3, r2
10042090:	2200      	movs	r2, #0
10042092:	2180      	movs	r1, #128	@ 0x80
10042094:	f000 fb10 	bl	100426b8 <UART_WaitOnFlagUntilTimeout>
10042098:	1e03      	subs	r3, r0, #0
1004209a:	d005      	beq.n	100420a8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
1004209c:	68fb      	ldr	r3, [r7, #12]
1004209e:	2288      	movs	r2, #136	@ 0x88
100420a0:	2120      	movs	r1, #32
100420a2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
100420a4:	2303      	movs	r3, #3
100420a6:	e03d      	b.n	10042124 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
100420a8:	69fb      	ldr	r3, [r7, #28]
100420aa:	2b00      	cmp	r3, #0
100420ac:	d10b      	bne.n	100420c6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
100420ae:	69bb      	ldr	r3, [r7, #24]
100420b0:	881b      	ldrh	r3, [r3, #0]
100420b2:	001a      	movs	r2, r3
100420b4:	68fb      	ldr	r3, [r7, #12]
100420b6:	681b      	ldr	r3, [r3, #0]
100420b8:	05d2      	lsls	r2, r2, #23
100420ba:	0dd2      	lsrs	r2, r2, #23
100420bc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
100420be:	69bb      	ldr	r3, [r7, #24]
100420c0:	3302      	adds	r3, #2
100420c2:	61bb      	str	r3, [r7, #24]
100420c4:	e007      	b.n	100420d6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
100420c6:	69fb      	ldr	r3, [r7, #28]
100420c8:	781a      	ldrb	r2, [r3, #0]
100420ca:	68fb      	ldr	r3, [r7, #12]
100420cc:	681b      	ldr	r3, [r3, #0]
100420ce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
100420d0:	69fb      	ldr	r3, [r7, #28]
100420d2:	3301      	adds	r3, #1
100420d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
100420d6:	68fb      	ldr	r3, [r7, #12]
100420d8:	2256      	movs	r2, #86	@ 0x56
100420da:	5a9b      	ldrh	r3, [r3, r2]
100420dc:	b29b      	uxth	r3, r3
100420de:	3b01      	subs	r3, #1
100420e0:	b299      	uxth	r1, r3
100420e2:	68fb      	ldr	r3, [r7, #12]
100420e4:	2256      	movs	r2, #86	@ 0x56
100420e6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
100420e8:	68fb      	ldr	r3, [r7, #12]
100420ea:	2256      	movs	r2, #86	@ 0x56
100420ec:	5a9b      	ldrh	r3, [r3, r2]
100420ee:	b29b      	uxth	r3, r3
100420f0:	2b00      	cmp	r3, #0
100420f2:	d1c8      	bne.n	10042086 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
100420f4:	697a      	ldr	r2, [r7, #20]
100420f6:	68f8      	ldr	r0, [r7, #12]
100420f8:	683b      	ldr	r3, [r7, #0]
100420fa:	9300      	str	r3, [sp, #0]
100420fc:	0013      	movs	r3, r2
100420fe:	2200      	movs	r2, #0
10042100:	2140      	movs	r1, #64	@ 0x40
10042102:	f000 fad9 	bl	100426b8 <UART_WaitOnFlagUntilTimeout>
10042106:	1e03      	subs	r3, r0, #0
10042108:	d005      	beq.n	10042116 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
1004210a:	68fb      	ldr	r3, [r7, #12]
1004210c:	2288      	movs	r2, #136	@ 0x88
1004210e:	2120      	movs	r1, #32
10042110:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
10042112:	2303      	movs	r3, #3
10042114:	e006      	b.n	10042124 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
10042116:	68fb      	ldr	r3, [r7, #12]
10042118:	2288      	movs	r2, #136	@ 0x88
1004211a:	2120      	movs	r1, #32
1004211c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
1004211e:	2300      	movs	r3, #0
10042120:	e000      	b.n	10042124 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
10042122:	2302      	movs	r3, #2
  }
}
10042124:	0018      	movs	r0, r3
10042126:	46bd      	mov	sp, r7
10042128:	b008      	add	sp, #32
1004212a:	bd80      	pop	{r7, pc}

1004212c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
1004212c:	b5b0      	push	{r4, r5, r7, lr}
1004212e:	b090      	sub	sp, #64	@ 0x40
10042130:	af00      	add	r7, sp, #0
10042132:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
10042134:	231b      	movs	r3, #27
10042136:	2220      	movs	r2, #32
10042138:	189b      	adds	r3, r3, r2
1004213a:	19db      	adds	r3, r3, r7
1004213c:	2200      	movs	r2, #0
1004213e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10042140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10042142:	689a      	ldr	r2, [r3, #8]
10042144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10042146:	691b      	ldr	r3, [r3, #16]
10042148:	431a      	orrs	r2, r3
1004214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004214c:	695b      	ldr	r3, [r3, #20]
1004214e:	431a      	orrs	r2, r3
10042150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10042152:	69db      	ldr	r3, [r3, #28]
10042154:	4313      	orrs	r3, r2
10042156:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10042158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004215a:	681b      	ldr	r3, [r3, #0]
1004215c:	681b      	ldr	r3, [r3, #0]
1004215e:	4aa1      	ldr	r2, [pc, #644]	@ (100423e4 <UART_SetConfig+0x2b8>)
10042160:	4013      	ands	r3, r2
10042162:	0019      	movs	r1, r3
10042164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10042166:	681a      	ldr	r2, [r3, #0]
10042168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004216a:	430b      	orrs	r3, r1
1004216c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
1004216e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10042170:	681b      	ldr	r3, [r3, #0]
10042172:	685b      	ldr	r3, [r3, #4]
10042174:	4a9c      	ldr	r2, [pc, #624]	@ (100423e8 <UART_SetConfig+0x2bc>)
10042176:	4013      	ands	r3, r2
10042178:	0018      	movs	r0, r3
1004217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004217c:	68d9      	ldr	r1, [r3, #12]
1004217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10042180:	681a      	ldr	r2, [r3, #0]
10042182:	0003      	movs	r3, r0
10042184:	430b      	orrs	r3, r1
10042186:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
10042188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004218a:	699b      	ldr	r3, [r3, #24]
1004218c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
1004218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10042190:	681b      	ldr	r3, [r3, #0]
10042192:	4a96      	ldr	r2, [pc, #600]	@ (100423ec <UART_SetConfig+0x2c0>)
10042194:	4293      	cmp	r3, r2
10042196:	d004      	beq.n	100421a2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
10042198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004219a:	6a1b      	ldr	r3, [r3, #32]
1004219c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004219e:	4313      	orrs	r3, r2
100421a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
100421a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100421a4:	681b      	ldr	r3, [r3, #0]
100421a6:	689b      	ldr	r3, [r3, #8]
100421a8:	4a91      	ldr	r2, [pc, #580]	@ (100423f0 <UART_SetConfig+0x2c4>)
100421aa:	4013      	ands	r3, r2
100421ac:	0019      	movs	r1, r3
100421ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100421b0:	681a      	ldr	r2, [r3, #0]
100421b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100421b4:	430b      	orrs	r3, r1
100421b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
100421b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100421ba:	681b      	ldr	r3, [r3, #0]
100421bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100421be:	220f      	movs	r2, #15
100421c0:	4393      	bics	r3, r2
100421c2:	0018      	movs	r0, r3
100421c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100421c6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
100421c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100421ca:	681a      	ldr	r2, [r3, #0]
100421cc:	0003      	movs	r3, r0
100421ce:	430b      	orrs	r3, r1
100421d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
100421d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100421d4:	681b      	ldr	r3, [r3, #0]
100421d6:	4a85      	ldr	r2, [pc, #532]	@ (100423ec <UART_SetConfig+0x2c0>)
100421d8:	4293      	cmp	r3, r2
100421da:	d16d      	bne.n	100422b8 <UART_SetConfig+0x18c>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
100421dc:	2010      	movs	r0, #16
100421de:	f7ff fe07 	bl	10041df0 <HAL_RCCEx_GetPeriphCLKFreq>
100421e2:	0003      	movs	r3, r0
100421e4:	637b      	str	r3, [r7, #52]	@ 0x34
#else
    pclk = UART_PERIPHCLK;
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
100421e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100421e8:	2b00      	cmp	r3, #0
100421ea:	d100      	bne.n	100421ee <UART_SetConfig+0xc2>
100421ec:	e0e3      	b.n	100423b6 <UART_SetConfig+0x28a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
100421ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100421f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100421f2:	4b80      	ldr	r3, [pc, #512]	@ (100423f4 <UART_SetConfig+0x2c8>)
100421f4:	0052      	lsls	r2, r2, #1
100421f6:	5ad3      	ldrh	r3, [r2, r3]
100421f8:	0019      	movs	r1, r3
100421fa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
100421fc:	f7fd ff6a 	bl	100400d4 <__udivsi3>
10042200:	0003      	movs	r3, r0
10042202:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10042204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10042206:	685a      	ldr	r2, [r3, #4]
10042208:	0013      	movs	r3, r2
1004220a:	005b      	lsls	r3, r3, #1
1004220c:	189b      	adds	r3, r3, r2
1004220e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10042210:	429a      	cmp	r2, r3
10042212:	d305      	bcc.n	10042220 <UART_SetConfig+0xf4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
10042214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10042216:	685b      	ldr	r3, [r3, #4]
10042218:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
1004221a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004221c:	429a      	cmp	r2, r3
1004221e:	d906      	bls.n	1004222e <UART_SetConfig+0x102>
      {
        ret = HAL_ERROR;
10042220:	231b      	movs	r3, #27
10042222:	2220      	movs	r2, #32
10042224:	189b      	adds	r3, r3, r2
10042226:	19db      	adds	r3, r3, r7
10042228:	2201      	movs	r2, #1
1004222a:	701a      	strb	r2, [r3, #0]
1004222c:	e0c3      	b.n	100423b6 <UART_SetConfig+0x28a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1004222e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10042230:	61bb      	str	r3, [r7, #24]
10042232:	2300      	movs	r3, #0
10042234:	61fb      	str	r3, [r7, #28]
10042236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10042238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004223a:	4b6e      	ldr	r3, [pc, #440]	@ (100423f4 <UART_SetConfig+0x2c8>)
1004223c:	0052      	lsls	r2, r2, #1
1004223e:	5ad3      	ldrh	r3, [r2, r3]
10042240:	613b      	str	r3, [r7, #16]
10042242:	2300      	movs	r3, #0
10042244:	617b      	str	r3, [r7, #20]
10042246:	693a      	ldr	r2, [r7, #16]
10042248:	697b      	ldr	r3, [r7, #20]
1004224a:	69b8      	ldr	r0, [r7, #24]
1004224c:	69f9      	ldr	r1, [r7, #28]
1004224e:	f7fd ffcd 	bl	100401ec <__aeabi_uldivmod>
10042252:	0002      	movs	r2, r0
10042254:	000b      	movs	r3, r1
10042256:	0e11      	lsrs	r1, r2, #24
10042258:	021d      	lsls	r5, r3, #8
1004225a:	430d      	orrs	r5, r1
1004225c:	0214      	lsls	r4, r2, #8
1004225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10042260:	685b      	ldr	r3, [r3, #4]
10042262:	085b      	lsrs	r3, r3, #1
10042264:	60bb      	str	r3, [r7, #8]
10042266:	2300      	movs	r3, #0
10042268:	60fb      	str	r3, [r7, #12]
1004226a:	68b8      	ldr	r0, [r7, #8]
1004226c:	68f9      	ldr	r1, [r7, #12]
1004226e:	1900      	adds	r0, r0, r4
10042270:	4169      	adcs	r1, r5
10042272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10042274:	685b      	ldr	r3, [r3, #4]
10042276:	603b      	str	r3, [r7, #0]
10042278:	2300      	movs	r3, #0
1004227a:	607b      	str	r3, [r7, #4]
1004227c:	683a      	ldr	r2, [r7, #0]
1004227e:	687b      	ldr	r3, [r7, #4]
10042280:	f7fd ffb4 	bl	100401ec <__aeabi_uldivmod>
10042284:	0002      	movs	r2, r0
10042286:	000b      	movs	r3, r1
10042288:	0013      	movs	r3, r2
1004228a:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
1004228c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004228e:	23c0      	movs	r3, #192	@ 0xc0
10042290:	009b      	lsls	r3, r3, #2
10042292:	429a      	cmp	r2, r3
10042294:	d309      	bcc.n	100422aa <UART_SetConfig+0x17e>
10042296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10042298:	2380      	movs	r3, #128	@ 0x80
1004229a:	035b      	lsls	r3, r3, #13
1004229c:	429a      	cmp	r2, r3
1004229e:	d204      	bcs.n	100422aa <UART_SetConfig+0x17e>
        {
          huart->Instance->BRR = usartdiv;
100422a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100422a2:	681b      	ldr	r3, [r3, #0]
100422a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100422a6:	60da      	str	r2, [r3, #12]
100422a8:	e085      	b.n	100423b6 <UART_SetConfig+0x28a>
        }
        else
        {
          ret = HAL_ERROR;
100422aa:	231b      	movs	r3, #27
100422ac:	2220      	movs	r2, #32
100422ae:	189b      	adds	r3, r3, r2
100422b0:	19db      	adds	r3, r3, r7
100422b2:	2201      	movs	r2, #1
100422b4:	701a      	strb	r2, [r3, #0]
100422b6:	e07e      	b.n	100423b6 <UART_SetConfig+0x28a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
100422b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100422ba:	69da      	ldr	r2, [r3, #28]
100422bc:	2380      	movs	r3, #128	@ 0x80
100422be:	021b      	lsls	r3, r3, #8
100422c0:	429a      	cmp	r2, r3
100422c2:	d148      	bne.n	10042356 <UART_SetConfig+0x22a>
  {
    pclk = UART_PERIPHCLK;
100422c4:	4b4c      	ldr	r3, [pc, #304]	@ (100423f8 <UART_SetConfig+0x2cc>)
100422c6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
100422c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100422ca:	2b00      	cmp	r3, #0
100422cc:	d100      	bne.n	100422d0 <UART_SetConfig+0x1a4>
100422ce:	e072      	b.n	100423b6 <UART_SetConfig+0x28a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100422d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100422d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100422d4:	4b47      	ldr	r3, [pc, #284]	@ (100423f4 <UART_SetConfig+0x2c8>)
100422d6:	0052      	lsls	r2, r2, #1
100422d8:	5ad3      	ldrh	r3, [r2, r3]
100422da:	0019      	movs	r1, r3
100422dc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
100422de:	f7fd fef9 	bl	100400d4 <__udivsi3>
100422e2:	0003      	movs	r3, r0
100422e4:	005a      	lsls	r2, r3, #1
100422e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100422e8:	685b      	ldr	r3, [r3, #4]
100422ea:	085b      	lsrs	r3, r3, #1
100422ec:	18d2      	adds	r2, r2, r3
100422ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100422f0:	685b      	ldr	r3, [r3, #4]
100422f2:	0019      	movs	r1, r3
100422f4:	0010      	movs	r0, r2
100422f6:	f7fd feed 	bl	100400d4 <__udivsi3>
100422fa:	0003      	movs	r3, r0
100422fc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
100422fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10042300:	2b0f      	cmp	r3, #15
10042302:	d921      	bls.n	10042348 <UART_SetConfig+0x21c>
10042304:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10042306:	2380      	movs	r3, #128	@ 0x80
10042308:	025b      	lsls	r3, r3, #9
1004230a:	429a      	cmp	r2, r3
1004230c:	d21c      	bcs.n	10042348 <UART_SetConfig+0x21c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
1004230e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10042310:	b29a      	uxth	r2, r3
10042312:	200e      	movs	r0, #14
10042314:	2420      	movs	r4, #32
10042316:	1903      	adds	r3, r0, r4
10042318:	19db      	adds	r3, r3, r7
1004231a:	210f      	movs	r1, #15
1004231c:	438a      	bics	r2, r1
1004231e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
10042320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10042322:	085b      	lsrs	r3, r3, #1
10042324:	b29b      	uxth	r3, r3
10042326:	2207      	movs	r2, #7
10042328:	4013      	ands	r3, r2
1004232a:	b299      	uxth	r1, r3
1004232c:	1903      	adds	r3, r0, r4
1004232e:	19db      	adds	r3, r3, r7
10042330:	1902      	adds	r2, r0, r4
10042332:	19d2      	adds	r2, r2, r7
10042334:	8812      	ldrh	r2, [r2, #0]
10042336:	430a      	orrs	r2, r1
10042338:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
1004233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004233c:	681b      	ldr	r3, [r3, #0]
1004233e:	1902      	adds	r2, r0, r4
10042340:	19d2      	adds	r2, r2, r7
10042342:	8812      	ldrh	r2, [r2, #0]
10042344:	60da      	str	r2, [r3, #12]
10042346:	e036      	b.n	100423b6 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
10042348:	231b      	movs	r3, #27
1004234a:	2220      	movs	r2, #32
1004234c:	189b      	adds	r3, r3, r2
1004234e:	19db      	adds	r3, r3, r7
10042350:	2201      	movs	r2, #1
10042352:	701a      	strb	r2, [r3, #0]
10042354:	e02f      	b.n	100423b6 <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
10042356:	4b28      	ldr	r3, [pc, #160]	@ (100423f8 <UART_SetConfig+0x2cc>)
10042358:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
1004235a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004235c:	2b00      	cmp	r3, #0
1004235e:	d02a      	beq.n	100423b6 <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10042360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10042362:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10042364:	4b23      	ldr	r3, [pc, #140]	@ (100423f4 <UART_SetConfig+0x2c8>)
10042366:	0052      	lsls	r2, r2, #1
10042368:	5ad3      	ldrh	r3, [r2, r3]
1004236a:	0019      	movs	r1, r3
1004236c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004236e:	f7fd feb1 	bl	100400d4 <__udivsi3>
10042372:	0003      	movs	r3, r0
10042374:	001a      	movs	r2, r3
10042376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10042378:	685b      	ldr	r3, [r3, #4]
1004237a:	085b      	lsrs	r3, r3, #1
1004237c:	18d2      	adds	r2, r2, r3
1004237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10042380:	685b      	ldr	r3, [r3, #4]
10042382:	0019      	movs	r1, r3
10042384:	0010      	movs	r0, r2
10042386:	f7fd fea5 	bl	100400d4 <__udivsi3>
1004238a:	0003      	movs	r3, r0
1004238c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1004238e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10042390:	2b0f      	cmp	r3, #15
10042392:	d90a      	bls.n	100423aa <UART_SetConfig+0x27e>
10042394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10042396:	2380      	movs	r3, #128	@ 0x80
10042398:	025b      	lsls	r3, r3, #9
1004239a:	429a      	cmp	r2, r3
1004239c:	d205      	bcs.n	100423aa <UART_SetConfig+0x27e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
1004239e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100423a0:	b29a      	uxth	r2, r3
100423a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100423a4:	681b      	ldr	r3, [r3, #0]
100423a6:	60da      	str	r2, [r3, #12]
100423a8:	e005      	b.n	100423b6 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
100423aa:	231b      	movs	r3, #27
100423ac:	2220      	movs	r2, #32
100423ae:	189b      	adds	r3, r3, r2
100423b0:	19db      	adds	r3, r3, r7
100423b2:	2201      	movs	r2, #1
100423b4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
100423b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100423b8:	226a      	movs	r2, #106	@ 0x6a
100423ba:	2101      	movs	r1, #1
100423bc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
100423be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100423c0:	2268      	movs	r2, #104	@ 0x68
100423c2:	2101      	movs	r1, #1
100423c4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
100423c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100423c8:	2200      	movs	r2, #0
100423ca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
100423cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100423ce:	2200      	movs	r2, #0
100423d0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
100423d2:	231b      	movs	r3, #27
100423d4:	2220      	movs	r2, #32
100423d6:	189b      	adds	r3, r3, r2
100423d8:	19db      	adds	r3, r3, r7
100423da:	781b      	ldrb	r3, [r3, #0]
}
100423dc:	0018      	movs	r0, r3
100423de:	46bd      	mov	sp, r7
100423e0:	b010      	add	sp, #64	@ 0x40
100423e2:	bdb0      	pop	{r4, r5, r7, pc}
100423e4:	cfff69f3 	.word	0xcfff69f3
100423e8:	ffffcfff 	.word	0xffffcfff
100423ec:	41005000 	.word	0x41005000
100423f0:	11fff4ff 	.word	0x11fff4ff
100423f4:	10043788 	.word	0x10043788
100423f8:	00f42400 	.word	0x00f42400

100423fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
100423fc:	b580      	push	{r7, lr}
100423fe:	b082      	sub	sp, #8
10042400:	af00      	add	r7, sp, #0
10042402:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10042404:	687b      	ldr	r3, [r7, #4]
10042406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10042408:	2208      	movs	r2, #8
1004240a:	4013      	ands	r3, r2
1004240c:	d00b      	beq.n	10042426 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
1004240e:	687b      	ldr	r3, [r7, #4]
10042410:	681b      	ldr	r3, [r3, #0]
10042412:	685b      	ldr	r3, [r3, #4]
10042414:	4a4a      	ldr	r2, [pc, #296]	@ (10042540 <UART_AdvFeatureConfig+0x144>)
10042416:	4013      	ands	r3, r2
10042418:	0019      	movs	r1, r3
1004241a:	687b      	ldr	r3, [r7, #4]
1004241c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1004241e:	687b      	ldr	r3, [r7, #4]
10042420:	681b      	ldr	r3, [r3, #0]
10042422:	430a      	orrs	r2, r1
10042424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
10042426:	687b      	ldr	r3, [r7, #4]
10042428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004242a:	2201      	movs	r2, #1
1004242c:	4013      	ands	r3, r2
1004242e:	d00b      	beq.n	10042448 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
10042430:	687b      	ldr	r3, [r7, #4]
10042432:	681b      	ldr	r3, [r3, #0]
10042434:	685b      	ldr	r3, [r3, #4]
10042436:	4a43      	ldr	r2, [pc, #268]	@ (10042544 <UART_AdvFeatureConfig+0x148>)
10042438:	4013      	ands	r3, r2
1004243a:	0019      	movs	r1, r3
1004243c:	687b      	ldr	r3, [r7, #4]
1004243e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10042440:	687b      	ldr	r3, [r7, #4]
10042442:	681b      	ldr	r3, [r3, #0]
10042444:	430a      	orrs	r2, r1
10042446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
10042448:	687b      	ldr	r3, [r7, #4]
1004244a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004244c:	2202      	movs	r2, #2
1004244e:	4013      	ands	r3, r2
10042450:	d00b      	beq.n	1004246a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
10042452:	687b      	ldr	r3, [r7, #4]
10042454:	681b      	ldr	r3, [r3, #0]
10042456:	685b      	ldr	r3, [r3, #4]
10042458:	4a3b      	ldr	r2, [pc, #236]	@ (10042548 <UART_AdvFeatureConfig+0x14c>)
1004245a:	4013      	ands	r3, r2
1004245c:	0019      	movs	r1, r3
1004245e:	687b      	ldr	r3, [r7, #4]
10042460:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10042462:	687b      	ldr	r3, [r7, #4]
10042464:	681b      	ldr	r3, [r3, #0]
10042466:	430a      	orrs	r2, r1
10042468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
1004246a:	687b      	ldr	r3, [r7, #4]
1004246c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004246e:	2204      	movs	r2, #4
10042470:	4013      	ands	r3, r2
10042472:	d00b      	beq.n	1004248c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
10042474:	687b      	ldr	r3, [r7, #4]
10042476:	681b      	ldr	r3, [r3, #0]
10042478:	685b      	ldr	r3, [r3, #4]
1004247a:	4a34      	ldr	r2, [pc, #208]	@ (1004254c <UART_AdvFeatureConfig+0x150>)
1004247c:	4013      	ands	r3, r2
1004247e:	0019      	movs	r1, r3
10042480:	687b      	ldr	r3, [r7, #4]
10042482:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10042484:	687b      	ldr	r3, [r7, #4]
10042486:	681b      	ldr	r3, [r3, #0]
10042488:	430a      	orrs	r2, r1
1004248a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
1004248c:	687b      	ldr	r3, [r7, #4]
1004248e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10042490:	2210      	movs	r2, #16
10042492:	4013      	ands	r3, r2
10042494:	d00b      	beq.n	100424ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
10042496:	687b      	ldr	r3, [r7, #4]
10042498:	681b      	ldr	r3, [r3, #0]
1004249a:	689b      	ldr	r3, [r3, #8]
1004249c:	4a2c      	ldr	r2, [pc, #176]	@ (10042550 <UART_AdvFeatureConfig+0x154>)
1004249e:	4013      	ands	r3, r2
100424a0:	0019      	movs	r1, r3
100424a2:	687b      	ldr	r3, [r7, #4]
100424a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
100424a6:	687b      	ldr	r3, [r7, #4]
100424a8:	681b      	ldr	r3, [r3, #0]
100424aa:	430a      	orrs	r2, r1
100424ac:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
100424ae:	687b      	ldr	r3, [r7, #4]
100424b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100424b2:	2220      	movs	r2, #32
100424b4:	4013      	ands	r3, r2
100424b6:	d00b      	beq.n	100424d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
100424b8:	687b      	ldr	r3, [r7, #4]
100424ba:	681b      	ldr	r3, [r3, #0]
100424bc:	689b      	ldr	r3, [r3, #8]
100424be:	4a25      	ldr	r2, [pc, #148]	@ (10042554 <UART_AdvFeatureConfig+0x158>)
100424c0:	4013      	ands	r3, r2
100424c2:	0019      	movs	r1, r3
100424c4:	687b      	ldr	r3, [r7, #4]
100424c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
100424c8:	687b      	ldr	r3, [r7, #4]
100424ca:	681b      	ldr	r3, [r3, #0]
100424cc:	430a      	orrs	r2, r1
100424ce:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
100424d0:	687b      	ldr	r3, [r7, #4]
100424d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100424d4:	2240      	movs	r2, #64	@ 0x40
100424d6:	4013      	ands	r3, r2
100424d8:	d01d      	beq.n	10042516 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
100424da:	687b      	ldr	r3, [r7, #4]
100424dc:	681b      	ldr	r3, [r3, #0]
100424de:	685b      	ldr	r3, [r3, #4]
100424e0:	4a1d      	ldr	r2, [pc, #116]	@ (10042558 <UART_AdvFeatureConfig+0x15c>)
100424e2:	4013      	ands	r3, r2
100424e4:	0019      	movs	r1, r3
100424e6:	687b      	ldr	r3, [r7, #4]
100424e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100424ea:	687b      	ldr	r3, [r7, #4]
100424ec:	681b      	ldr	r3, [r3, #0]
100424ee:	430a      	orrs	r2, r1
100424f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
100424f2:	687b      	ldr	r3, [r7, #4]
100424f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100424f6:	2380      	movs	r3, #128	@ 0x80
100424f8:	035b      	lsls	r3, r3, #13
100424fa:	429a      	cmp	r2, r3
100424fc:	d10b      	bne.n	10042516 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
100424fe:	687b      	ldr	r3, [r7, #4]
10042500:	681b      	ldr	r3, [r3, #0]
10042502:	685b      	ldr	r3, [r3, #4]
10042504:	4a15      	ldr	r2, [pc, #84]	@ (1004255c <UART_AdvFeatureConfig+0x160>)
10042506:	4013      	ands	r3, r2
10042508:	0019      	movs	r1, r3
1004250a:	687b      	ldr	r3, [r7, #4]
1004250c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
1004250e:	687b      	ldr	r3, [r7, #4]
10042510:	681b      	ldr	r3, [r3, #0]
10042512:	430a      	orrs	r2, r1
10042514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
10042516:	687b      	ldr	r3, [r7, #4]
10042518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004251a:	2280      	movs	r2, #128	@ 0x80
1004251c:	4013      	ands	r3, r2
1004251e:	d00b      	beq.n	10042538 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
10042520:	687b      	ldr	r3, [r7, #4]
10042522:	681b      	ldr	r3, [r3, #0]
10042524:	685b      	ldr	r3, [r3, #4]
10042526:	4a0e      	ldr	r2, [pc, #56]	@ (10042560 <UART_AdvFeatureConfig+0x164>)
10042528:	4013      	ands	r3, r2
1004252a:	0019      	movs	r1, r3
1004252c:	687b      	ldr	r3, [r7, #4]
1004252e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
10042530:	687b      	ldr	r3, [r7, #4]
10042532:	681b      	ldr	r3, [r3, #0]
10042534:	430a      	orrs	r2, r1
10042536:	605a      	str	r2, [r3, #4]
  }
}
10042538:	46c0      	nop			@ (mov r8, r8)
1004253a:	46bd      	mov	sp, r7
1004253c:	b002      	add	sp, #8
1004253e:	bd80      	pop	{r7, pc}
10042540:	ffff7fff 	.word	0xffff7fff
10042544:	fffdffff 	.word	0xfffdffff
10042548:	fffeffff 	.word	0xfffeffff
1004254c:	fffbffff 	.word	0xfffbffff
10042550:	ffffefff 	.word	0xffffefff
10042554:	ffffdfff 	.word	0xffffdfff
10042558:	ffefffff 	.word	0xffefffff
1004255c:	ff9fffff 	.word	0xff9fffff
10042560:	fff7ffff 	.word	0xfff7ffff

10042564 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
10042564:	b580      	push	{r7, lr}
10042566:	b092      	sub	sp, #72	@ 0x48
10042568:	af02      	add	r7, sp, #8
1004256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
1004256c:	687b      	ldr	r3, [r7, #4]
1004256e:	2290      	movs	r2, #144	@ 0x90
10042570:	2100      	movs	r1, #0
10042572:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
10042574:	f7fe fe8c 	bl	10041290 <HAL_GetTick>
10042578:	0003      	movs	r3, r0
1004257a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
1004257c:	687b      	ldr	r3, [r7, #4]
1004257e:	681b      	ldr	r3, [r3, #0]
10042580:	681b      	ldr	r3, [r3, #0]
10042582:	2208      	movs	r2, #8
10042584:	4013      	ands	r3, r2
10042586:	2b08      	cmp	r3, #8
10042588:	d12d      	bne.n	100425e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1004258a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004258c:	2280      	movs	r2, #128	@ 0x80
1004258e:	0391      	lsls	r1, r2, #14
10042590:	6878      	ldr	r0, [r7, #4]
10042592:	4a47      	ldr	r2, [pc, #284]	@ (100426b0 <UART_CheckIdleState+0x14c>)
10042594:	9200      	str	r2, [sp, #0]
10042596:	2200      	movs	r2, #0
10042598:	f000 f88e 	bl	100426b8 <UART_WaitOnFlagUntilTimeout>
1004259c:	1e03      	subs	r3, r0, #0
1004259e:	d022      	beq.n	100425e6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100425a0:	f3ef 8310 	mrs	r3, PRIMASK
100425a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
100425a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
100425a8:	63bb      	str	r3, [r7, #56]	@ 0x38
100425aa:	2301      	movs	r3, #1
100425ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100425ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100425b0:	f383 8810 	msr	PRIMASK, r3
}
100425b4:	46c0      	nop			@ (mov r8, r8)
100425b6:	687b      	ldr	r3, [r7, #4]
100425b8:	681b      	ldr	r3, [r3, #0]
100425ba:	681a      	ldr	r2, [r3, #0]
100425bc:	687b      	ldr	r3, [r7, #4]
100425be:	681b      	ldr	r3, [r3, #0]
100425c0:	2180      	movs	r1, #128	@ 0x80
100425c2:	438a      	bics	r2, r1
100425c4:	601a      	str	r2, [r3, #0]
100425c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100425c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100425ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100425cc:	f383 8810 	msr	PRIMASK, r3
}
100425d0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
100425d2:	687b      	ldr	r3, [r7, #4]
100425d4:	2288      	movs	r2, #136	@ 0x88
100425d6:	2120      	movs	r1, #32
100425d8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
100425da:	687b      	ldr	r3, [r7, #4]
100425dc:	2284      	movs	r2, #132	@ 0x84
100425de:	2100      	movs	r1, #0
100425e0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
100425e2:	2303      	movs	r3, #3
100425e4:	e060      	b.n	100426a8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
100425e6:	687b      	ldr	r3, [r7, #4]
100425e8:	681b      	ldr	r3, [r3, #0]
100425ea:	681b      	ldr	r3, [r3, #0]
100425ec:	2204      	movs	r2, #4
100425ee:	4013      	ands	r3, r2
100425f0:	2b04      	cmp	r3, #4
100425f2:	d146      	bne.n	10042682 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
100425f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100425f6:	2280      	movs	r2, #128	@ 0x80
100425f8:	03d1      	lsls	r1, r2, #15
100425fa:	6878      	ldr	r0, [r7, #4]
100425fc:	4a2c      	ldr	r2, [pc, #176]	@ (100426b0 <UART_CheckIdleState+0x14c>)
100425fe:	9200      	str	r2, [sp, #0]
10042600:	2200      	movs	r2, #0
10042602:	f000 f859 	bl	100426b8 <UART_WaitOnFlagUntilTimeout>
10042606:	1e03      	subs	r3, r0, #0
10042608:	d03b      	beq.n	10042682 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004260a:	f3ef 8310 	mrs	r3, PRIMASK
1004260e:	60fb      	str	r3, [r7, #12]
  return(result);
10042610:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10042612:	637b      	str	r3, [r7, #52]	@ 0x34
10042614:	2301      	movs	r3, #1
10042616:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10042618:	693b      	ldr	r3, [r7, #16]
1004261a:	f383 8810 	msr	PRIMASK, r3
}
1004261e:	46c0      	nop			@ (mov r8, r8)
10042620:	687b      	ldr	r3, [r7, #4]
10042622:	681b      	ldr	r3, [r3, #0]
10042624:	681a      	ldr	r2, [r3, #0]
10042626:	687b      	ldr	r3, [r7, #4]
10042628:	681b      	ldr	r3, [r3, #0]
1004262a:	4922      	ldr	r1, [pc, #136]	@ (100426b4 <UART_CheckIdleState+0x150>)
1004262c:	400a      	ands	r2, r1
1004262e:	601a      	str	r2, [r3, #0]
10042630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10042632:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10042634:	697b      	ldr	r3, [r7, #20]
10042636:	f383 8810 	msr	PRIMASK, r3
}
1004263a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004263c:	f3ef 8310 	mrs	r3, PRIMASK
10042640:	61bb      	str	r3, [r7, #24]
  return(result);
10042642:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10042644:	633b      	str	r3, [r7, #48]	@ 0x30
10042646:	2301      	movs	r3, #1
10042648:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004264a:	69fb      	ldr	r3, [r7, #28]
1004264c:	f383 8810 	msr	PRIMASK, r3
}
10042650:	46c0      	nop			@ (mov r8, r8)
10042652:	687b      	ldr	r3, [r7, #4]
10042654:	681b      	ldr	r3, [r3, #0]
10042656:	689a      	ldr	r2, [r3, #8]
10042658:	687b      	ldr	r3, [r7, #4]
1004265a:	681b      	ldr	r3, [r3, #0]
1004265c:	2101      	movs	r1, #1
1004265e:	438a      	bics	r2, r1
10042660:	609a      	str	r2, [r3, #8]
10042662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10042664:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10042666:	6a3b      	ldr	r3, [r7, #32]
10042668:	f383 8810 	msr	PRIMASK, r3
}
1004266c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
1004266e:	687b      	ldr	r3, [r7, #4]
10042670:	228c      	movs	r2, #140	@ 0x8c
10042672:	2120      	movs	r1, #32
10042674:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
10042676:	687b      	ldr	r3, [r7, #4]
10042678:	2284      	movs	r2, #132	@ 0x84
1004267a:	2100      	movs	r1, #0
1004267c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
1004267e:	2303      	movs	r3, #3
10042680:	e012      	b.n	100426a8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
10042682:	687b      	ldr	r3, [r7, #4]
10042684:	2288      	movs	r2, #136	@ 0x88
10042686:	2120      	movs	r1, #32
10042688:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
1004268a:	687b      	ldr	r3, [r7, #4]
1004268c:	228c      	movs	r2, #140	@ 0x8c
1004268e:	2120      	movs	r1, #32
10042690:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10042692:	687b      	ldr	r3, [r7, #4]
10042694:	2200      	movs	r2, #0
10042696:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
10042698:	687b      	ldr	r3, [r7, #4]
1004269a:	2200      	movs	r2, #0
1004269c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
1004269e:	687b      	ldr	r3, [r7, #4]
100426a0:	2284      	movs	r2, #132	@ 0x84
100426a2:	2100      	movs	r1, #0
100426a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100426a6:	2300      	movs	r3, #0
}
100426a8:	0018      	movs	r0, r3
100426aa:	46bd      	mov	sp, r7
100426ac:	b010      	add	sp, #64	@ 0x40
100426ae:	bd80      	pop	{r7, pc}
100426b0:	01ffffff 	.word	0x01ffffff
100426b4:	fffffedf 	.word	0xfffffedf

100426b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
100426b8:	b580      	push	{r7, lr}
100426ba:	b084      	sub	sp, #16
100426bc:	af00      	add	r7, sp, #0
100426be:	60f8      	str	r0, [r7, #12]
100426c0:	60b9      	str	r1, [r7, #8]
100426c2:	603b      	str	r3, [r7, #0]
100426c4:	1dfb      	adds	r3, r7, #7
100426c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
100426c8:	e051      	b.n	1004276e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
100426ca:	69bb      	ldr	r3, [r7, #24]
100426cc:	3301      	adds	r3, #1
100426ce:	d04e      	beq.n	1004276e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
100426d0:	f7fe fdde 	bl	10041290 <HAL_GetTick>
100426d4:	0002      	movs	r2, r0
100426d6:	683b      	ldr	r3, [r7, #0]
100426d8:	1ad3      	subs	r3, r2, r3
100426da:	69ba      	ldr	r2, [r7, #24]
100426dc:	429a      	cmp	r2, r3
100426de:	d302      	bcc.n	100426e6 <UART_WaitOnFlagUntilTimeout+0x2e>
100426e0:	69bb      	ldr	r3, [r7, #24]
100426e2:	2b00      	cmp	r3, #0
100426e4:	d101      	bne.n	100426ea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
100426e6:	2303      	movs	r3, #3
100426e8:	e051      	b.n	1004278e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
100426ea:	68fb      	ldr	r3, [r7, #12]
100426ec:	681b      	ldr	r3, [r3, #0]
100426ee:	681b      	ldr	r3, [r3, #0]
100426f0:	2204      	movs	r2, #4
100426f2:	4013      	ands	r3, r2
100426f4:	d03b      	beq.n	1004276e <UART_WaitOnFlagUntilTimeout+0xb6>
100426f6:	68bb      	ldr	r3, [r7, #8]
100426f8:	2b80      	cmp	r3, #128	@ 0x80
100426fa:	d038      	beq.n	1004276e <UART_WaitOnFlagUntilTimeout+0xb6>
100426fc:	68bb      	ldr	r3, [r7, #8]
100426fe:	2b40      	cmp	r3, #64	@ 0x40
10042700:	d035      	beq.n	1004276e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
10042702:	68fb      	ldr	r3, [r7, #12]
10042704:	681b      	ldr	r3, [r3, #0]
10042706:	69db      	ldr	r3, [r3, #28]
10042708:	2208      	movs	r2, #8
1004270a:	4013      	ands	r3, r2
1004270c:	2b08      	cmp	r3, #8
1004270e:	d111      	bne.n	10042734 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
10042710:	68fb      	ldr	r3, [r7, #12]
10042712:	681b      	ldr	r3, [r3, #0]
10042714:	2208      	movs	r2, #8
10042716:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10042718:	68fb      	ldr	r3, [r7, #12]
1004271a:	0018      	movs	r0, r3
1004271c:	f000 f83c 	bl	10042798 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
10042720:	68fb      	ldr	r3, [r7, #12]
10042722:	2290      	movs	r2, #144	@ 0x90
10042724:	2108      	movs	r1, #8
10042726:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10042728:	68fb      	ldr	r3, [r7, #12]
1004272a:	2284      	movs	r2, #132	@ 0x84
1004272c:	2100      	movs	r1, #0
1004272e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
10042730:	2301      	movs	r3, #1
10042732:	e02c      	b.n	1004278e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
10042734:	68fb      	ldr	r3, [r7, #12]
10042736:	681b      	ldr	r3, [r3, #0]
10042738:	69da      	ldr	r2, [r3, #28]
1004273a:	2380      	movs	r3, #128	@ 0x80
1004273c:	011b      	lsls	r3, r3, #4
1004273e:	401a      	ands	r2, r3
10042740:	2380      	movs	r3, #128	@ 0x80
10042742:	011b      	lsls	r3, r3, #4
10042744:	429a      	cmp	r2, r3
10042746:	d112      	bne.n	1004276e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
10042748:	68fb      	ldr	r3, [r7, #12]
1004274a:	681b      	ldr	r3, [r3, #0]
1004274c:	2280      	movs	r2, #128	@ 0x80
1004274e:	0112      	lsls	r2, r2, #4
10042750:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10042752:	68fb      	ldr	r3, [r7, #12]
10042754:	0018      	movs	r0, r3
10042756:	f000 f81f 	bl	10042798 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
1004275a:	68fb      	ldr	r3, [r7, #12]
1004275c:	2290      	movs	r2, #144	@ 0x90
1004275e:	2120      	movs	r1, #32
10042760:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10042762:	68fb      	ldr	r3, [r7, #12]
10042764:	2284      	movs	r2, #132	@ 0x84
10042766:	2100      	movs	r1, #0
10042768:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
1004276a:	2303      	movs	r3, #3
1004276c:	e00f      	b.n	1004278e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1004276e:	68fb      	ldr	r3, [r7, #12]
10042770:	681b      	ldr	r3, [r3, #0]
10042772:	69db      	ldr	r3, [r3, #28]
10042774:	68ba      	ldr	r2, [r7, #8]
10042776:	4013      	ands	r3, r2
10042778:	68ba      	ldr	r2, [r7, #8]
1004277a:	1ad3      	subs	r3, r2, r3
1004277c:	425a      	negs	r2, r3
1004277e:	4153      	adcs	r3, r2
10042780:	b2db      	uxtb	r3, r3
10042782:	001a      	movs	r2, r3
10042784:	1dfb      	adds	r3, r7, #7
10042786:	781b      	ldrb	r3, [r3, #0]
10042788:	429a      	cmp	r2, r3
1004278a:	d09e      	beq.n	100426ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
1004278c:	2300      	movs	r3, #0
}
1004278e:	0018      	movs	r0, r3
10042790:	46bd      	mov	sp, r7
10042792:	b004      	add	sp, #16
10042794:	bd80      	pop	{r7, pc}
	...

10042798 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
10042798:	b580      	push	{r7, lr}
1004279a:	b08e      	sub	sp, #56	@ 0x38
1004279c:	af00      	add	r7, sp, #0
1004279e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100427a0:	f3ef 8310 	mrs	r3, PRIMASK
100427a4:	617b      	str	r3, [r7, #20]
  return(result);
100427a6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
100427a8:	637b      	str	r3, [r7, #52]	@ 0x34
100427aa:	2301      	movs	r3, #1
100427ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100427ae:	69bb      	ldr	r3, [r7, #24]
100427b0:	f383 8810 	msr	PRIMASK, r3
}
100427b4:	46c0      	nop			@ (mov r8, r8)
100427b6:	687b      	ldr	r3, [r7, #4]
100427b8:	681b      	ldr	r3, [r3, #0]
100427ba:	681a      	ldr	r2, [r3, #0]
100427bc:	687b      	ldr	r3, [r7, #4]
100427be:	681b      	ldr	r3, [r3, #0]
100427c0:	4926      	ldr	r1, [pc, #152]	@ (1004285c <UART_EndRxTransfer+0xc4>)
100427c2:	400a      	ands	r2, r1
100427c4:	601a      	str	r2, [r3, #0]
100427c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100427c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100427ca:	69fb      	ldr	r3, [r7, #28]
100427cc:	f383 8810 	msr	PRIMASK, r3
}
100427d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100427d2:	f3ef 8310 	mrs	r3, PRIMASK
100427d6:	623b      	str	r3, [r7, #32]
  return(result);
100427d8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
100427da:	633b      	str	r3, [r7, #48]	@ 0x30
100427dc:	2301      	movs	r3, #1
100427de:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100427e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100427e2:	f383 8810 	msr	PRIMASK, r3
}
100427e6:	46c0      	nop			@ (mov r8, r8)
100427e8:	687b      	ldr	r3, [r7, #4]
100427ea:	681b      	ldr	r3, [r3, #0]
100427ec:	689a      	ldr	r2, [r3, #8]
100427ee:	687b      	ldr	r3, [r7, #4]
100427f0:	681b      	ldr	r3, [r3, #0]
100427f2:	491b      	ldr	r1, [pc, #108]	@ (10042860 <UART_EndRxTransfer+0xc8>)
100427f4:	400a      	ands	r2, r1
100427f6:	609a      	str	r2, [r3, #8]
100427f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100427fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100427fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100427fe:	f383 8810 	msr	PRIMASK, r3
}
10042802:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
10042804:	687b      	ldr	r3, [r7, #4]
10042806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
10042808:	2b01      	cmp	r3, #1
1004280a:	d118      	bne.n	1004283e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004280c:	f3ef 8310 	mrs	r3, PRIMASK
10042810:	60bb      	str	r3, [r7, #8]
  return(result);
10042812:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
10042814:	62fb      	str	r3, [r7, #44]	@ 0x2c
10042816:	2301      	movs	r3, #1
10042818:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004281a:	68fb      	ldr	r3, [r7, #12]
1004281c:	f383 8810 	msr	PRIMASK, r3
}
10042820:	46c0      	nop			@ (mov r8, r8)
10042822:	687b      	ldr	r3, [r7, #4]
10042824:	681b      	ldr	r3, [r3, #0]
10042826:	681a      	ldr	r2, [r3, #0]
10042828:	687b      	ldr	r3, [r7, #4]
1004282a:	681b      	ldr	r3, [r3, #0]
1004282c:	2110      	movs	r1, #16
1004282e:	438a      	bics	r2, r1
10042830:	601a      	str	r2, [r3, #0]
10042832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10042834:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10042836:	693b      	ldr	r3, [r7, #16]
10042838:	f383 8810 	msr	PRIMASK, r3
}
1004283c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
1004283e:	687b      	ldr	r3, [r7, #4]
10042840:	228c      	movs	r2, #140	@ 0x8c
10042842:	2120      	movs	r1, #32
10042844:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10042846:	687b      	ldr	r3, [r7, #4]
10042848:	2200      	movs	r2, #0
1004284a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
1004284c:	687b      	ldr	r3, [r7, #4]
1004284e:	2200      	movs	r2, #0
10042850:	675a      	str	r2, [r3, #116]	@ 0x74
}
10042852:	46c0      	nop			@ (mov r8, r8)
10042854:	46bd      	mov	sp, r7
10042856:	b00e      	add	sp, #56	@ 0x38
10042858:	bd80      	pop	{r7, pc}
1004285a:	46c0      	nop			@ (mov r8, r8)
1004285c:	fffffedf 	.word	0xfffffedf
10042860:	effffffe 	.word	0xeffffffe

10042864 <std>:
10042864:	2300      	movs	r3, #0
10042866:	b510      	push	{r4, lr}
10042868:	0004      	movs	r4, r0
1004286a:	6003      	str	r3, [r0, #0]
1004286c:	6043      	str	r3, [r0, #4]
1004286e:	6083      	str	r3, [r0, #8]
10042870:	8181      	strh	r1, [r0, #12]
10042872:	6643      	str	r3, [r0, #100]	@ 0x64
10042874:	81c2      	strh	r2, [r0, #14]
10042876:	6103      	str	r3, [r0, #16]
10042878:	6143      	str	r3, [r0, #20]
1004287a:	6183      	str	r3, [r0, #24]
1004287c:	0019      	movs	r1, r3
1004287e:	2208      	movs	r2, #8
10042880:	305c      	adds	r0, #92	@ 0x5c
10042882:	f000 f90f 	bl	10042aa4 <memset>
10042886:	4b0b      	ldr	r3, [pc, #44]	@ (100428b4 <std+0x50>)
10042888:	6224      	str	r4, [r4, #32]
1004288a:	6263      	str	r3, [r4, #36]	@ 0x24
1004288c:	4b0a      	ldr	r3, [pc, #40]	@ (100428b8 <std+0x54>)
1004288e:	62a3      	str	r3, [r4, #40]	@ 0x28
10042890:	4b0a      	ldr	r3, [pc, #40]	@ (100428bc <std+0x58>)
10042892:	62e3      	str	r3, [r4, #44]	@ 0x2c
10042894:	4b0a      	ldr	r3, [pc, #40]	@ (100428c0 <std+0x5c>)
10042896:	6323      	str	r3, [r4, #48]	@ 0x30
10042898:	4b0a      	ldr	r3, [pc, #40]	@ (100428c4 <std+0x60>)
1004289a:	429c      	cmp	r4, r3
1004289c:	d005      	beq.n	100428aa <std+0x46>
1004289e:	4b0a      	ldr	r3, [pc, #40]	@ (100428c8 <std+0x64>)
100428a0:	429c      	cmp	r4, r3
100428a2:	d002      	beq.n	100428aa <std+0x46>
100428a4:	4b09      	ldr	r3, [pc, #36]	@ (100428cc <std+0x68>)
100428a6:	429c      	cmp	r4, r3
100428a8:	d103      	bne.n	100428b2 <std+0x4e>
100428aa:	0020      	movs	r0, r4
100428ac:	3058      	adds	r0, #88	@ 0x58
100428ae:	f000 f955 	bl	10042b5c <__retarget_lock_init_recursive>
100428b2:	bd10      	pop	{r4, pc}
100428b4:	10042a0d 	.word	0x10042a0d
100428b8:	10042a35 	.word	0x10042a35
100428bc:	10042a6d 	.word	0x10042a6d
100428c0:	10042a99 	.word	0x10042a99
100428c4:	20000170 	.word	0x20000170
100428c8:	200001d8 	.word	0x200001d8
100428cc:	20000240 	.word	0x20000240

100428d0 <stdio_exit_handler>:
100428d0:	b510      	push	{r4, lr}
100428d2:	4a03      	ldr	r2, [pc, #12]	@ (100428e0 <stdio_exit_handler+0x10>)
100428d4:	4903      	ldr	r1, [pc, #12]	@ (100428e4 <stdio_exit_handler+0x14>)
100428d6:	4804      	ldr	r0, [pc, #16]	@ (100428e8 <stdio_exit_handler+0x18>)
100428d8:	f000 f86c 	bl	100429b4 <_fwalk_sglue>
100428dc:	bd10      	pop	{r4, pc}
100428de:	46c0      	nop			@ (mov r8, r8)
100428e0:	200002fc 	.word	0x200002fc
100428e4:	100433ed 	.word	0x100433ed
100428e8:	2000030c 	.word	0x2000030c

100428ec <cleanup_stdio>:
100428ec:	6841      	ldr	r1, [r0, #4]
100428ee:	4b0b      	ldr	r3, [pc, #44]	@ (1004291c <cleanup_stdio+0x30>)
100428f0:	b510      	push	{r4, lr}
100428f2:	0004      	movs	r4, r0
100428f4:	4299      	cmp	r1, r3
100428f6:	d001      	beq.n	100428fc <cleanup_stdio+0x10>
100428f8:	f000 fd78 	bl	100433ec <_fflush_r>
100428fc:	68a1      	ldr	r1, [r4, #8]
100428fe:	4b08      	ldr	r3, [pc, #32]	@ (10042920 <cleanup_stdio+0x34>)
10042900:	4299      	cmp	r1, r3
10042902:	d002      	beq.n	1004290a <cleanup_stdio+0x1e>
10042904:	0020      	movs	r0, r4
10042906:	f000 fd71 	bl	100433ec <_fflush_r>
1004290a:	68e1      	ldr	r1, [r4, #12]
1004290c:	4b05      	ldr	r3, [pc, #20]	@ (10042924 <cleanup_stdio+0x38>)
1004290e:	4299      	cmp	r1, r3
10042910:	d002      	beq.n	10042918 <cleanup_stdio+0x2c>
10042912:	0020      	movs	r0, r4
10042914:	f000 fd6a 	bl	100433ec <_fflush_r>
10042918:	bd10      	pop	{r4, pc}
1004291a:	46c0      	nop			@ (mov r8, r8)
1004291c:	20000170 	.word	0x20000170
10042920:	200001d8 	.word	0x200001d8
10042924:	20000240 	.word	0x20000240

10042928 <global_stdio_init.part.0>:
10042928:	b510      	push	{r4, lr}
1004292a:	4b09      	ldr	r3, [pc, #36]	@ (10042950 <global_stdio_init.part.0+0x28>)
1004292c:	4a09      	ldr	r2, [pc, #36]	@ (10042954 <global_stdio_init.part.0+0x2c>)
1004292e:	2104      	movs	r1, #4
10042930:	601a      	str	r2, [r3, #0]
10042932:	4809      	ldr	r0, [pc, #36]	@ (10042958 <global_stdio_init.part.0+0x30>)
10042934:	2200      	movs	r2, #0
10042936:	f7ff ff95 	bl	10042864 <std>
1004293a:	2201      	movs	r2, #1
1004293c:	2109      	movs	r1, #9
1004293e:	4807      	ldr	r0, [pc, #28]	@ (1004295c <global_stdio_init.part.0+0x34>)
10042940:	f7ff ff90 	bl	10042864 <std>
10042944:	2202      	movs	r2, #2
10042946:	2112      	movs	r1, #18
10042948:	4805      	ldr	r0, [pc, #20]	@ (10042960 <global_stdio_init.part.0+0x38>)
1004294a:	f7ff ff8b 	bl	10042864 <std>
1004294e:	bd10      	pop	{r4, pc}
10042950:	200002a8 	.word	0x200002a8
10042954:	100428d1 	.word	0x100428d1
10042958:	20000170 	.word	0x20000170
1004295c:	200001d8 	.word	0x200001d8
10042960:	20000240 	.word	0x20000240

10042964 <__sfp_lock_acquire>:
10042964:	b510      	push	{r4, lr}
10042966:	4802      	ldr	r0, [pc, #8]	@ (10042970 <__sfp_lock_acquire+0xc>)
10042968:	f000 f8f9 	bl	10042b5e <__retarget_lock_acquire_recursive>
1004296c:	bd10      	pop	{r4, pc}
1004296e:	46c0      	nop			@ (mov r8, r8)
10042970:	200002b1 	.word	0x200002b1

10042974 <__sfp_lock_release>:
10042974:	b510      	push	{r4, lr}
10042976:	4802      	ldr	r0, [pc, #8]	@ (10042980 <__sfp_lock_release+0xc>)
10042978:	f000 f8f2 	bl	10042b60 <__retarget_lock_release_recursive>
1004297c:	bd10      	pop	{r4, pc}
1004297e:	46c0      	nop			@ (mov r8, r8)
10042980:	200002b1 	.word	0x200002b1

10042984 <__sinit>:
10042984:	b510      	push	{r4, lr}
10042986:	0004      	movs	r4, r0
10042988:	f7ff ffec 	bl	10042964 <__sfp_lock_acquire>
1004298c:	6a23      	ldr	r3, [r4, #32]
1004298e:	2b00      	cmp	r3, #0
10042990:	d002      	beq.n	10042998 <__sinit+0x14>
10042992:	f7ff ffef 	bl	10042974 <__sfp_lock_release>
10042996:	bd10      	pop	{r4, pc}
10042998:	4b04      	ldr	r3, [pc, #16]	@ (100429ac <__sinit+0x28>)
1004299a:	6223      	str	r3, [r4, #32]
1004299c:	4b04      	ldr	r3, [pc, #16]	@ (100429b0 <__sinit+0x2c>)
1004299e:	681b      	ldr	r3, [r3, #0]
100429a0:	2b00      	cmp	r3, #0
100429a2:	d1f6      	bne.n	10042992 <__sinit+0xe>
100429a4:	f7ff ffc0 	bl	10042928 <global_stdio_init.part.0>
100429a8:	e7f3      	b.n	10042992 <__sinit+0xe>
100429aa:	46c0      	nop			@ (mov r8, r8)
100429ac:	100428ed 	.word	0x100428ed
100429b0:	200002a8 	.word	0x200002a8

100429b4 <_fwalk_sglue>:
100429b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100429b6:	0014      	movs	r4, r2
100429b8:	2600      	movs	r6, #0
100429ba:	9000      	str	r0, [sp, #0]
100429bc:	9101      	str	r1, [sp, #4]
100429be:	68a5      	ldr	r5, [r4, #8]
100429c0:	6867      	ldr	r7, [r4, #4]
100429c2:	3f01      	subs	r7, #1
100429c4:	d504      	bpl.n	100429d0 <_fwalk_sglue+0x1c>
100429c6:	6824      	ldr	r4, [r4, #0]
100429c8:	2c00      	cmp	r4, #0
100429ca:	d1f8      	bne.n	100429be <_fwalk_sglue+0xa>
100429cc:	0030      	movs	r0, r6
100429ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100429d0:	89ab      	ldrh	r3, [r5, #12]
100429d2:	2b01      	cmp	r3, #1
100429d4:	d908      	bls.n	100429e8 <_fwalk_sglue+0x34>
100429d6:	220e      	movs	r2, #14
100429d8:	5eab      	ldrsh	r3, [r5, r2]
100429da:	3301      	adds	r3, #1
100429dc:	d004      	beq.n	100429e8 <_fwalk_sglue+0x34>
100429de:	0029      	movs	r1, r5
100429e0:	9800      	ldr	r0, [sp, #0]
100429e2:	9b01      	ldr	r3, [sp, #4]
100429e4:	4798      	blx	r3
100429e6:	4306      	orrs	r6, r0
100429e8:	3568      	adds	r5, #104	@ 0x68
100429ea:	e7ea      	b.n	100429c2 <_fwalk_sglue+0xe>

100429ec <iprintf>:
100429ec:	b40f      	push	{r0, r1, r2, r3}
100429ee:	b507      	push	{r0, r1, r2, lr}
100429f0:	4905      	ldr	r1, [pc, #20]	@ (10042a08 <iprintf+0x1c>)
100429f2:	ab04      	add	r3, sp, #16
100429f4:	6808      	ldr	r0, [r1, #0]
100429f6:	cb04      	ldmia	r3!, {r2}
100429f8:	6881      	ldr	r1, [r0, #8]
100429fa:	9301      	str	r3, [sp, #4]
100429fc:	f000 f9d6 	bl	10042dac <_vfiprintf_r>
10042a00:	b003      	add	sp, #12
10042a02:	bc08      	pop	{r3}
10042a04:	b004      	add	sp, #16
10042a06:	4718      	bx	r3
10042a08:	20000308 	.word	0x20000308

10042a0c <__sread>:
10042a0c:	b570      	push	{r4, r5, r6, lr}
10042a0e:	000c      	movs	r4, r1
10042a10:	250e      	movs	r5, #14
10042a12:	5f49      	ldrsh	r1, [r1, r5]
10042a14:	f000 f874 	bl	10042b00 <_read_r>
10042a18:	2800      	cmp	r0, #0
10042a1a:	db03      	blt.n	10042a24 <__sread+0x18>
10042a1c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
10042a1e:	181b      	adds	r3, r3, r0
10042a20:	6563      	str	r3, [r4, #84]	@ 0x54
10042a22:	bd70      	pop	{r4, r5, r6, pc}
10042a24:	89a3      	ldrh	r3, [r4, #12]
10042a26:	4a02      	ldr	r2, [pc, #8]	@ (10042a30 <__sread+0x24>)
10042a28:	4013      	ands	r3, r2
10042a2a:	81a3      	strh	r3, [r4, #12]
10042a2c:	e7f9      	b.n	10042a22 <__sread+0x16>
10042a2e:	46c0      	nop			@ (mov r8, r8)
10042a30:	ffffefff 	.word	0xffffefff

10042a34 <__swrite>:
10042a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10042a36:	001f      	movs	r7, r3
10042a38:	898b      	ldrh	r3, [r1, #12]
10042a3a:	0005      	movs	r5, r0
10042a3c:	000c      	movs	r4, r1
10042a3e:	0016      	movs	r6, r2
10042a40:	05db      	lsls	r3, r3, #23
10042a42:	d505      	bpl.n	10042a50 <__swrite+0x1c>
10042a44:	230e      	movs	r3, #14
10042a46:	5ec9      	ldrsh	r1, [r1, r3]
10042a48:	2200      	movs	r2, #0
10042a4a:	2302      	movs	r3, #2
10042a4c:	f000 f844 	bl	10042ad8 <_lseek_r>
10042a50:	89a3      	ldrh	r3, [r4, #12]
10042a52:	4a05      	ldr	r2, [pc, #20]	@ (10042a68 <__swrite+0x34>)
10042a54:	0028      	movs	r0, r5
10042a56:	4013      	ands	r3, r2
10042a58:	81a3      	strh	r3, [r4, #12]
10042a5a:	0032      	movs	r2, r6
10042a5c:	230e      	movs	r3, #14
10042a5e:	5ee1      	ldrsh	r1, [r4, r3]
10042a60:	003b      	movs	r3, r7
10042a62:	f000 f861 	bl	10042b28 <_write_r>
10042a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10042a68:	ffffefff 	.word	0xffffefff

10042a6c <__sseek>:
10042a6c:	b570      	push	{r4, r5, r6, lr}
10042a6e:	000c      	movs	r4, r1
10042a70:	250e      	movs	r5, #14
10042a72:	5f49      	ldrsh	r1, [r1, r5]
10042a74:	f000 f830 	bl	10042ad8 <_lseek_r>
10042a78:	89a3      	ldrh	r3, [r4, #12]
10042a7a:	1c42      	adds	r2, r0, #1
10042a7c:	d103      	bne.n	10042a86 <__sseek+0x1a>
10042a7e:	4a05      	ldr	r2, [pc, #20]	@ (10042a94 <__sseek+0x28>)
10042a80:	4013      	ands	r3, r2
10042a82:	81a3      	strh	r3, [r4, #12]
10042a84:	bd70      	pop	{r4, r5, r6, pc}
10042a86:	2280      	movs	r2, #128	@ 0x80
10042a88:	0152      	lsls	r2, r2, #5
10042a8a:	4313      	orrs	r3, r2
10042a8c:	81a3      	strh	r3, [r4, #12]
10042a8e:	6560      	str	r0, [r4, #84]	@ 0x54
10042a90:	e7f8      	b.n	10042a84 <__sseek+0x18>
10042a92:	46c0      	nop			@ (mov r8, r8)
10042a94:	ffffefff 	.word	0xffffefff

10042a98 <__sclose>:
10042a98:	b510      	push	{r4, lr}
10042a9a:	230e      	movs	r3, #14
10042a9c:	5ec9      	ldrsh	r1, [r1, r3]
10042a9e:	f000 f809 	bl	10042ab4 <_close_r>
10042aa2:	bd10      	pop	{r4, pc}

10042aa4 <memset>:
10042aa4:	0003      	movs	r3, r0
10042aa6:	1882      	adds	r2, r0, r2
10042aa8:	4293      	cmp	r3, r2
10042aaa:	d100      	bne.n	10042aae <memset+0xa>
10042aac:	4770      	bx	lr
10042aae:	7019      	strb	r1, [r3, #0]
10042ab0:	3301      	adds	r3, #1
10042ab2:	e7f9      	b.n	10042aa8 <memset+0x4>

10042ab4 <_close_r>:
10042ab4:	2300      	movs	r3, #0
10042ab6:	b570      	push	{r4, r5, r6, lr}
10042ab8:	4d06      	ldr	r5, [pc, #24]	@ (10042ad4 <_close_r+0x20>)
10042aba:	0004      	movs	r4, r0
10042abc:	0008      	movs	r0, r1
10042abe:	602b      	str	r3, [r5, #0]
10042ac0:	f7fd feb3 	bl	1004082a <_close>
10042ac4:	1c43      	adds	r3, r0, #1
10042ac6:	d103      	bne.n	10042ad0 <_close_r+0x1c>
10042ac8:	682b      	ldr	r3, [r5, #0]
10042aca:	2b00      	cmp	r3, #0
10042acc:	d000      	beq.n	10042ad0 <_close_r+0x1c>
10042ace:	6023      	str	r3, [r4, #0]
10042ad0:	bd70      	pop	{r4, r5, r6, pc}
10042ad2:	46c0      	nop			@ (mov r8, r8)
10042ad4:	200002ac 	.word	0x200002ac

10042ad8 <_lseek_r>:
10042ad8:	b570      	push	{r4, r5, r6, lr}
10042ada:	0004      	movs	r4, r0
10042adc:	0008      	movs	r0, r1
10042ade:	0011      	movs	r1, r2
10042ae0:	001a      	movs	r2, r3
10042ae2:	2300      	movs	r3, #0
10042ae4:	4d05      	ldr	r5, [pc, #20]	@ (10042afc <_lseek_r+0x24>)
10042ae6:	602b      	str	r3, [r5, #0]
10042ae8:	f7fd fec0 	bl	1004086c <_lseek>
10042aec:	1c43      	adds	r3, r0, #1
10042aee:	d103      	bne.n	10042af8 <_lseek_r+0x20>
10042af0:	682b      	ldr	r3, [r5, #0]
10042af2:	2b00      	cmp	r3, #0
10042af4:	d000      	beq.n	10042af8 <_lseek_r+0x20>
10042af6:	6023      	str	r3, [r4, #0]
10042af8:	bd70      	pop	{r4, r5, r6, pc}
10042afa:	46c0      	nop			@ (mov r8, r8)
10042afc:	200002ac 	.word	0x200002ac

10042b00 <_read_r>:
10042b00:	b570      	push	{r4, r5, r6, lr}
10042b02:	0004      	movs	r4, r0
10042b04:	0008      	movs	r0, r1
10042b06:	0011      	movs	r1, r2
10042b08:	001a      	movs	r2, r3
10042b0a:	2300      	movs	r3, #0
10042b0c:	4d05      	ldr	r5, [pc, #20]	@ (10042b24 <_read_r+0x24>)
10042b0e:	602b      	str	r3, [r5, #0]
10042b10:	f7fd fe52 	bl	100407b8 <_read>
10042b14:	1c43      	adds	r3, r0, #1
10042b16:	d103      	bne.n	10042b20 <_read_r+0x20>
10042b18:	682b      	ldr	r3, [r5, #0]
10042b1a:	2b00      	cmp	r3, #0
10042b1c:	d000      	beq.n	10042b20 <_read_r+0x20>
10042b1e:	6023      	str	r3, [r4, #0]
10042b20:	bd70      	pop	{r4, r5, r6, pc}
10042b22:	46c0      	nop			@ (mov r8, r8)
10042b24:	200002ac 	.word	0x200002ac

10042b28 <_write_r>:
10042b28:	b570      	push	{r4, r5, r6, lr}
10042b2a:	0004      	movs	r4, r0
10042b2c:	0008      	movs	r0, r1
10042b2e:	0011      	movs	r1, r2
10042b30:	001a      	movs	r2, r3
10042b32:	2300      	movs	r3, #0
10042b34:	4d05      	ldr	r5, [pc, #20]	@ (10042b4c <_write_r+0x24>)
10042b36:	602b      	str	r3, [r5, #0]
10042b38:	f7fd fe5b 	bl	100407f2 <_write>
10042b3c:	1c43      	adds	r3, r0, #1
10042b3e:	d103      	bne.n	10042b48 <_write_r+0x20>
10042b40:	682b      	ldr	r3, [r5, #0]
10042b42:	2b00      	cmp	r3, #0
10042b44:	d000      	beq.n	10042b48 <_write_r+0x20>
10042b46:	6023      	str	r3, [r4, #0]
10042b48:	bd70      	pop	{r4, r5, r6, pc}
10042b4a:	46c0      	nop			@ (mov r8, r8)
10042b4c:	200002ac 	.word	0x200002ac

10042b50 <__errno>:
10042b50:	4b01      	ldr	r3, [pc, #4]	@ (10042b58 <__errno+0x8>)
10042b52:	6818      	ldr	r0, [r3, #0]
10042b54:	4770      	bx	lr
10042b56:	46c0      	nop			@ (mov r8, r8)
10042b58:	20000308 	.word	0x20000308

10042b5c <__retarget_lock_init_recursive>:
10042b5c:	4770      	bx	lr

10042b5e <__retarget_lock_acquire_recursive>:
10042b5e:	4770      	bx	lr

10042b60 <__retarget_lock_release_recursive>:
10042b60:	4770      	bx	lr
	...

10042b64 <_free_r>:
10042b64:	b570      	push	{r4, r5, r6, lr}
10042b66:	0005      	movs	r5, r0
10042b68:	1e0c      	subs	r4, r1, #0
10042b6a:	d010      	beq.n	10042b8e <_free_r+0x2a>
10042b6c:	3c04      	subs	r4, #4
10042b6e:	6823      	ldr	r3, [r4, #0]
10042b70:	2b00      	cmp	r3, #0
10042b72:	da00      	bge.n	10042b76 <_free_r+0x12>
10042b74:	18e4      	adds	r4, r4, r3
10042b76:	0028      	movs	r0, r5
10042b78:	f000 f8e0 	bl	10042d3c <__malloc_lock>
10042b7c:	4a1d      	ldr	r2, [pc, #116]	@ (10042bf4 <_free_r+0x90>)
10042b7e:	6813      	ldr	r3, [r2, #0]
10042b80:	2b00      	cmp	r3, #0
10042b82:	d105      	bne.n	10042b90 <_free_r+0x2c>
10042b84:	6063      	str	r3, [r4, #4]
10042b86:	6014      	str	r4, [r2, #0]
10042b88:	0028      	movs	r0, r5
10042b8a:	f000 f8df 	bl	10042d4c <__malloc_unlock>
10042b8e:	bd70      	pop	{r4, r5, r6, pc}
10042b90:	42a3      	cmp	r3, r4
10042b92:	d908      	bls.n	10042ba6 <_free_r+0x42>
10042b94:	6820      	ldr	r0, [r4, #0]
10042b96:	1821      	adds	r1, r4, r0
10042b98:	428b      	cmp	r3, r1
10042b9a:	d1f3      	bne.n	10042b84 <_free_r+0x20>
10042b9c:	6819      	ldr	r1, [r3, #0]
10042b9e:	685b      	ldr	r3, [r3, #4]
10042ba0:	1809      	adds	r1, r1, r0
10042ba2:	6021      	str	r1, [r4, #0]
10042ba4:	e7ee      	b.n	10042b84 <_free_r+0x20>
10042ba6:	001a      	movs	r2, r3
10042ba8:	685b      	ldr	r3, [r3, #4]
10042baa:	2b00      	cmp	r3, #0
10042bac:	d001      	beq.n	10042bb2 <_free_r+0x4e>
10042bae:	42a3      	cmp	r3, r4
10042bb0:	d9f9      	bls.n	10042ba6 <_free_r+0x42>
10042bb2:	6811      	ldr	r1, [r2, #0]
10042bb4:	1850      	adds	r0, r2, r1
10042bb6:	42a0      	cmp	r0, r4
10042bb8:	d10b      	bne.n	10042bd2 <_free_r+0x6e>
10042bba:	6820      	ldr	r0, [r4, #0]
10042bbc:	1809      	adds	r1, r1, r0
10042bbe:	1850      	adds	r0, r2, r1
10042bc0:	6011      	str	r1, [r2, #0]
10042bc2:	4283      	cmp	r3, r0
10042bc4:	d1e0      	bne.n	10042b88 <_free_r+0x24>
10042bc6:	6818      	ldr	r0, [r3, #0]
10042bc8:	685b      	ldr	r3, [r3, #4]
10042bca:	1841      	adds	r1, r0, r1
10042bcc:	6011      	str	r1, [r2, #0]
10042bce:	6053      	str	r3, [r2, #4]
10042bd0:	e7da      	b.n	10042b88 <_free_r+0x24>
10042bd2:	42a0      	cmp	r0, r4
10042bd4:	d902      	bls.n	10042bdc <_free_r+0x78>
10042bd6:	230c      	movs	r3, #12
10042bd8:	602b      	str	r3, [r5, #0]
10042bda:	e7d5      	b.n	10042b88 <_free_r+0x24>
10042bdc:	6820      	ldr	r0, [r4, #0]
10042bde:	1821      	adds	r1, r4, r0
10042be0:	428b      	cmp	r3, r1
10042be2:	d103      	bne.n	10042bec <_free_r+0x88>
10042be4:	6819      	ldr	r1, [r3, #0]
10042be6:	685b      	ldr	r3, [r3, #4]
10042be8:	1809      	adds	r1, r1, r0
10042bea:	6021      	str	r1, [r4, #0]
10042bec:	6063      	str	r3, [r4, #4]
10042bee:	6054      	str	r4, [r2, #4]
10042bf0:	e7ca      	b.n	10042b88 <_free_r+0x24>
10042bf2:	46c0      	nop			@ (mov r8, r8)
10042bf4:	200002b8 	.word	0x200002b8

10042bf8 <sbrk_aligned>:
10042bf8:	b570      	push	{r4, r5, r6, lr}
10042bfa:	4e0f      	ldr	r6, [pc, #60]	@ (10042c38 <sbrk_aligned+0x40>)
10042bfc:	000d      	movs	r5, r1
10042bfe:	6831      	ldr	r1, [r6, #0]
10042c00:	0004      	movs	r4, r0
10042c02:	2900      	cmp	r1, #0
10042c04:	d102      	bne.n	10042c0c <sbrk_aligned+0x14>
10042c06:	f000 fcbd 	bl	10043584 <_sbrk_r>
10042c0a:	6030      	str	r0, [r6, #0]
10042c0c:	0029      	movs	r1, r5
10042c0e:	0020      	movs	r0, r4
10042c10:	f000 fcb8 	bl	10043584 <_sbrk_r>
10042c14:	1c43      	adds	r3, r0, #1
10042c16:	d103      	bne.n	10042c20 <sbrk_aligned+0x28>
10042c18:	2501      	movs	r5, #1
10042c1a:	426d      	negs	r5, r5
10042c1c:	0028      	movs	r0, r5
10042c1e:	bd70      	pop	{r4, r5, r6, pc}
10042c20:	2303      	movs	r3, #3
10042c22:	1cc5      	adds	r5, r0, #3
10042c24:	439d      	bics	r5, r3
10042c26:	42a8      	cmp	r0, r5
10042c28:	d0f8      	beq.n	10042c1c <sbrk_aligned+0x24>
10042c2a:	1a29      	subs	r1, r5, r0
10042c2c:	0020      	movs	r0, r4
10042c2e:	f000 fca9 	bl	10043584 <_sbrk_r>
10042c32:	3001      	adds	r0, #1
10042c34:	d1f2      	bne.n	10042c1c <sbrk_aligned+0x24>
10042c36:	e7ef      	b.n	10042c18 <sbrk_aligned+0x20>
10042c38:	200002b4 	.word	0x200002b4

10042c3c <_malloc_r>:
10042c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10042c3e:	2203      	movs	r2, #3
10042c40:	1ccb      	adds	r3, r1, #3
10042c42:	4393      	bics	r3, r2
10042c44:	3308      	adds	r3, #8
10042c46:	0005      	movs	r5, r0
10042c48:	001f      	movs	r7, r3
10042c4a:	2b0c      	cmp	r3, #12
10042c4c:	d234      	bcs.n	10042cb8 <_malloc_r+0x7c>
10042c4e:	270c      	movs	r7, #12
10042c50:	42b9      	cmp	r1, r7
10042c52:	d833      	bhi.n	10042cbc <_malloc_r+0x80>
10042c54:	0028      	movs	r0, r5
10042c56:	f000 f871 	bl	10042d3c <__malloc_lock>
10042c5a:	4e37      	ldr	r6, [pc, #220]	@ (10042d38 <_malloc_r+0xfc>)
10042c5c:	6833      	ldr	r3, [r6, #0]
10042c5e:	001c      	movs	r4, r3
10042c60:	2c00      	cmp	r4, #0
10042c62:	d12f      	bne.n	10042cc4 <_malloc_r+0x88>
10042c64:	0039      	movs	r1, r7
10042c66:	0028      	movs	r0, r5
10042c68:	f7ff ffc6 	bl	10042bf8 <sbrk_aligned>
10042c6c:	0004      	movs	r4, r0
10042c6e:	1c43      	adds	r3, r0, #1
10042c70:	d15f      	bne.n	10042d32 <_malloc_r+0xf6>
10042c72:	6834      	ldr	r4, [r6, #0]
10042c74:	9400      	str	r4, [sp, #0]
10042c76:	9b00      	ldr	r3, [sp, #0]
10042c78:	2b00      	cmp	r3, #0
10042c7a:	d14a      	bne.n	10042d12 <_malloc_r+0xd6>
10042c7c:	2c00      	cmp	r4, #0
10042c7e:	d052      	beq.n	10042d26 <_malloc_r+0xea>
10042c80:	6823      	ldr	r3, [r4, #0]
10042c82:	0028      	movs	r0, r5
10042c84:	18e3      	adds	r3, r4, r3
10042c86:	9900      	ldr	r1, [sp, #0]
10042c88:	9301      	str	r3, [sp, #4]
10042c8a:	f000 fc7b 	bl	10043584 <_sbrk_r>
10042c8e:	9b01      	ldr	r3, [sp, #4]
10042c90:	4283      	cmp	r3, r0
10042c92:	d148      	bne.n	10042d26 <_malloc_r+0xea>
10042c94:	6823      	ldr	r3, [r4, #0]
10042c96:	0028      	movs	r0, r5
10042c98:	1aff      	subs	r7, r7, r3
10042c9a:	0039      	movs	r1, r7
10042c9c:	f7ff ffac 	bl	10042bf8 <sbrk_aligned>
10042ca0:	3001      	adds	r0, #1
10042ca2:	d040      	beq.n	10042d26 <_malloc_r+0xea>
10042ca4:	6823      	ldr	r3, [r4, #0]
10042ca6:	19db      	adds	r3, r3, r7
10042ca8:	6023      	str	r3, [r4, #0]
10042caa:	6833      	ldr	r3, [r6, #0]
10042cac:	685a      	ldr	r2, [r3, #4]
10042cae:	2a00      	cmp	r2, #0
10042cb0:	d133      	bne.n	10042d1a <_malloc_r+0xde>
10042cb2:	9b00      	ldr	r3, [sp, #0]
10042cb4:	6033      	str	r3, [r6, #0]
10042cb6:	e019      	b.n	10042cec <_malloc_r+0xb0>
10042cb8:	2b00      	cmp	r3, #0
10042cba:	dac9      	bge.n	10042c50 <_malloc_r+0x14>
10042cbc:	230c      	movs	r3, #12
10042cbe:	602b      	str	r3, [r5, #0]
10042cc0:	2000      	movs	r0, #0
10042cc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10042cc4:	6821      	ldr	r1, [r4, #0]
10042cc6:	1bc9      	subs	r1, r1, r7
10042cc8:	d420      	bmi.n	10042d0c <_malloc_r+0xd0>
10042cca:	290b      	cmp	r1, #11
10042ccc:	d90a      	bls.n	10042ce4 <_malloc_r+0xa8>
10042cce:	19e2      	adds	r2, r4, r7
10042cd0:	6027      	str	r7, [r4, #0]
10042cd2:	42a3      	cmp	r3, r4
10042cd4:	d104      	bne.n	10042ce0 <_malloc_r+0xa4>
10042cd6:	6032      	str	r2, [r6, #0]
10042cd8:	6863      	ldr	r3, [r4, #4]
10042cda:	6011      	str	r1, [r2, #0]
10042cdc:	6053      	str	r3, [r2, #4]
10042cde:	e005      	b.n	10042cec <_malloc_r+0xb0>
10042ce0:	605a      	str	r2, [r3, #4]
10042ce2:	e7f9      	b.n	10042cd8 <_malloc_r+0x9c>
10042ce4:	6862      	ldr	r2, [r4, #4]
10042ce6:	42a3      	cmp	r3, r4
10042ce8:	d10e      	bne.n	10042d08 <_malloc_r+0xcc>
10042cea:	6032      	str	r2, [r6, #0]
10042cec:	0028      	movs	r0, r5
10042cee:	f000 f82d 	bl	10042d4c <__malloc_unlock>
10042cf2:	0020      	movs	r0, r4
10042cf4:	2207      	movs	r2, #7
10042cf6:	300b      	adds	r0, #11
10042cf8:	1d23      	adds	r3, r4, #4
10042cfa:	4390      	bics	r0, r2
10042cfc:	1ac2      	subs	r2, r0, r3
10042cfe:	4298      	cmp	r0, r3
10042d00:	d0df      	beq.n	10042cc2 <_malloc_r+0x86>
10042d02:	1a1b      	subs	r3, r3, r0
10042d04:	50a3      	str	r3, [r4, r2]
10042d06:	e7dc      	b.n	10042cc2 <_malloc_r+0x86>
10042d08:	605a      	str	r2, [r3, #4]
10042d0a:	e7ef      	b.n	10042cec <_malloc_r+0xb0>
10042d0c:	0023      	movs	r3, r4
10042d0e:	6864      	ldr	r4, [r4, #4]
10042d10:	e7a6      	b.n	10042c60 <_malloc_r+0x24>
10042d12:	9c00      	ldr	r4, [sp, #0]
10042d14:	6863      	ldr	r3, [r4, #4]
10042d16:	9300      	str	r3, [sp, #0]
10042d18:	e7ad      	b.n	10042c76 <_malloc_r+0x3a>
10042d1a:	001a      	movs	r2, r3
10042d1c:	685b      	ldr	r3, [r3, #4]
10042d1e:	42a3      	cmp	r3, r4
10042d20:	d1fb      	bne.n	10042d1a <_malloc_r+0xde>
10042d22:	2300      	movs	r3, #0
10042d24:	e7da      	b.n	10042cdc <_malloc_r+0xa0>
10042d26:	230c      	movs	r3, #12
10042d28:	0028      	movs	r0, r5
10042d2a:	602b      	str	r3, [r5, #0]
10042d2c:	f000 f80e 	bl	10042d4c <__malloc_unlock>
10042d30:	e7c6      	b.n	10042cc0 <_malloc_r+0x84>
10042d32:	6007      	str	r7, [r0, #0]
10042d34:	e7da      	b.n	10042cec <_malloc_r+0xb0>
10042d36:	46c0      	nop			@ (mov r8, r8)
10042d38:	200002b8 	.word	0x200002b8

10042d3c <__malloc_lock>:
10042d3c:	b510      	push	{r4, lr}
10042d3e:	4802      	ldr	r0, [pc, #8]	@ (10042d48 <__malloc_lock+0xc>)
10042d40:	f7ff ff0d 	bl	10042b5e <__retarget_lock_acquire_recursive>
10042d44:	bd10      	pop	{r4, pc}
10042d46:	46c0      	nop			@ (mov r8, r8)
10042d48:	200002b0 	.word	0x200002b0

10042d4c <__malloc_unlock>:
10042d4c:	b510      	push	{r4, lr}
10042d4e:	4802      	ldr	r0, [pc, #8]	@ (10042d58 <__malloc_unlock+0xc>)
10042d50:	f7ff ff06 	bl	10042b60 <__retarget_lock_release_recursive>
10042d54:	bd10      	pop	{r4, pc}
10042d56:	46c0      	nop			@ (mov r8, r8)
10042d58:	200002b0 	.word	0x200002b0

10042d5c <__sfputc_r>:
10042d5c:	6893      	ldr	r3, [r2, #8]
10042d5e:	b510      	push	{r4, lr}
10042d60:	3b01      	subs	r3, #1
10042d62:	6093      	str	r3, [r2, #8]
10042d64:	2b00      	cmp	r3, #0
10042d66:	da04      	bge.n	10042d72 <__sfputc_r+0x16>
10042d68:	6994      	ldr	r4, [r2, #24]
10042d6a:	42a3      	cmp	r3, r4
10042d6c:	db07      	blt.n	10042d7e <__sfputc_r+0x22>
10042d6e:	290a      	cmp	r1, #10
10042d70:	d005      	beq.n	10042d7e <__sfputc_r+0x22>
10042d72:	6813      	ldr	r3, [r2, #0]
10042d74:	1c58      	adds	r0, r3, #1
10042d76:	6010      	str	r0, [r2, #0]
10042d78:	7019      	strb	r1, [r3, #0]
10042d7a:	0008      	movs	r0, r1
10042d7c:	bd10      	pop	{r4, pc}
10042d7e:	f000 fb60 	bl	10043442 <__swbuf_r>
10042d82:	0001      	movs	r1, r0
10042d84:	e7f9      	b.n	10042d7a <__sfputc_r+0x1e>

10042d86 <__sfputs_r>:
10042d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10042d88:	0006      	movs	r6, r0
10042d8a:	000f      	movs	r7, r1
10042d8c:	0014      	movs	r4, r2
10042d8e:	18d5      	adds	r5, r2, r3
10042d90:	42ac      	cmp	r4, r5
10042d92:	d101      	bne.n	10042d98 <__sfputs_r+0x12>
10042d94:	2000      	movs	r0, #0
10042d96:	e007      	b.n	10042da8 <__sfputs_r+0x22>
10042d98:	7821      	ldrb	r1, [r4, #0]
10042d9a:	003a      	movs	r2, r7
10042d9c:	0030      	movs	r0, r6
10042d9e:	f7ff ffdd 	bl	10042d5c <__sfputc_r>
10042da2:	3401      	adds	r4, #1
10042da4:	1c43      	adds	r3, r0, #1
10042da6:	d1f3      	bne.n	10042d90 <__sfputs_r+0xa>
10042da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10042dac <_vfiprintf_r>:
10042dac:	b5f0      	push	{r4, r5, r6, r7, lr}
10042dae:	b0a1      	sub	sp, #132	@ 0x84
10042db0:	000f      	movs	r7, r1
10042db2:	0015      	movs	r5, r2
10042db4:	001e      	movs	r6, r3
10042db6:	9003      	str	r0, [sp, #12]
10042db8:	2800      	cmp	r0, #0
10042dba:	d004      	beq.n	10042dc6 <_vfiprintf_r+0x1a>
10042dbc:	6a03      	ldr	r3, [r0, #32]
10042dbe:	2b00      	cmp	r3, #0
10042dc0:	d101      	bne.n	10042dc6 <_vfiprintf_r+0x1a>
10042dc2:	f7ff fddf 	bl	10042984 <__sinit>
10042dc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10042dc8:	07db      	lsls	r3, r3, #31
10042dca:	d405      	bmi.n	10042dd8 <_vfiprintf_r+0x2c>
10042dcc:	89bb      	ldrh	r3, [r7, #12]
10042dce:	059b      	lsls	r3, r3, #22
10042dd0:	d402      	bmi.n	10042dd8 <_vfiprintf_r+0x2c>
10042dd2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
10042dd4:	f7ff fec3 	bl	10042b5e <__retarget_lock_acquire_recursive>
10042dd8:	89bb      	ldrh	r3, [r7, #12]
10042dda:	071b      	lsls	r3, r3, #28
10042ddc:	d502      	bpl.n	10042de4 <_vfiprintf_r+0x38>
10042dde:	693b      	ldr	r3, [r7, #16]
10042de0:	2b00      	cmp	r3, #0
10042de2:	d113      	bne.n	10042e0c <_vfiprintf_r+0x60>
10042de4:	0039      	movs	r1, r7
10042de6:	9803      	ldr	r0, [sp, #12]
10042de8:	f000 fb6e 	bl	100434c8 <__swsetup_r>
10042dec:	2800      	cmp	r0, #0
10042dee:	d00d      	beq.n	10042e0c <_vfiprintf_r+0x60>
10042df0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10042df2:	07db      	lsls	r3, r3, #31
10042df4:	d503      	bpl.n	10042dfe <_vfiprintf_r+0x52>
10042df6:	2001      	movs	r0, #1
10042df8:	4240      	negs	r0, r0
10042dfa:	b021      	add	sp, #132	@ 0x84
10042dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10042dfe:	89bb      	ldrh	r3, [r7, #12]
10042e00:	059b      	lsls	r3, r3, #22
10042e02:	d4f8      	bmi.n	10042df6 <_vfiprintf_r+0x4a>
10042e04:	6db8      	ldr	r0, [r7, #88]	@ 0x58
10042e06:	f7ff feab 	bl	10042b60 <__retarget_lock_release_recursive>
10042e0a:	e7f4      	b.n	10042df6 <_vfiprintf_r+0x4a>
10042e0c:	2300      	movs	r3, #0
10042e0e:	ac08      	add	r4, sp, #32
10042e10:	6163      	str	r3, [r4, #20]
10042e12:	3320      	adds	r3, #32
10042e14:	7663      	strb	r3, [r4, #25]
10042e16:	3310      	adds	r3, #16
10042e18:	76a3      	strb	r3, [r4, #26]
10042e1a:	9607      	str	r6, [sp, #28]
10042e1c:	002e      	movs	r6, r5
10042e1e:	7833      	ldrb	r3, [r6, #0]
10042e20:	2b00      	cmp	r3, #0
10042e22:	d001      	beq.n	10042e28 <_vfiprintf_r+0x7c>
10042e24:	2b25      	cmp	r3, #37	@ 0x25
10042e26:	d148      	bne.n	10042eba <_vfiprintf_r+0x10e>
10042e28:	1b73      	subs	r3, r6, r5
10042e2a:	9305      	str	r3, [sp, #20]
10042e2c:	42ae      	cmp	r6, r5
10042e2e:	d00b      	beq.n	10042e48 <_vfiprintf_r+0x9c>
10042e30:	002a      	movs	r2, r5
10042e32:	0039      	movs	r1, r7
10042e34:	9803      	ldr	r0, [sp, #12]
10042e36:	f7ff ffa6 	bl	10042d86 <__sfputs_r>
10042e3a:	3001      	adds	r0, #1
10042e3c:	d100      	bne.n	10042e40 <_vfiprintf_r+0x94>
10042e3e:	e0ae      	b.n	10042f9e <_vfiprintf_r+0x1f2>
10042e40:	6963      	ldr	r3, [r4, #20]
10042e42:	9a05      	ldr	r2, [sp, #20]
10042e44:	189b      	adds	r3, r3, r2
10042e46:	6163      	str	r3, [r4, #20]
10042e48:	7833      	ldrb	r3, [r6, #0]
10042e4a:	2b00      	cmp	r3, #0
10042e4c:	d100      	bne.n	10042e50 <_vfiprintf_r+0xa4>
10042e4e:	e0a6      	b.n	10042f9e <_vfiprintf_r+0x1f2>
10042e50:	2201      	movs	r2, #1
10042e52:	2300      	movs	r3, #0
10042e54:	4252      	negs	r2, r2
10042e56:	6062      	str	r2, [r4, #4]
10042e58:	a904      	add	r1, sp, #16
10042e5a:	3254      	adds	r2, #84	@ 0x54
10042e5c:	1852      	adds	r2, r2, r1
10042e5e:	1c75      	adds	r5, r6, #1
10042e60:	6023      	str	r3, [r4, #0]
10042e62:	60e3      	str	r3, [r4, #12]
10042e64:	60a3      	str	r3, [r4, #8]
10042e66:	7013      	strb	r3, [r2, #0]
10042e68:	65a3      	str	r3, [r4, #88]	@ 0x58
10042e6a:	4b59      	ldr	r3, [pc, #356]	@ (10042fd0 <_vfiprintf_r+0x224>)
10042e6c:	2205      	movs	r2, #5
10042e6e:	0018      	movs	r0, r3
10042e70:	7829      	ldrb	r1, [r5, #0]
10042e72:	9305      	str	r3, [sp, #20]
10042e74:	f000 fb98 	bl	100435a8 <memchr>
10042e78:	1c6e      	adds	r6, r5, #1
10042e7a:	2800      	cmp	r0, #0
10042e7c:	d11f      	bne.n	10042ebe <_vfiprintf_r+0x112>
10042e7e:	6822      	ldr	r2, [r4, #0]
10042e80:	06d3      	lsls	r3, r2, #27
10042e82:	d504      	bpl.n	10042e8e <_vfiprintf_r+0xe2>
10042e84:	2353      	movs	r3, #83	@ 0x53
10042e86:	a904      	add	r1, sp, #16
10042e88:	185b      	adds	r3, r3, r1
10042e8a:	2120      	movs	r1, #32
10042e8c:	7019      	strb	r1, [r3, #0]
10042e8e:	0713      	lsls	r3, r2, #28
10042e90:	d504      	bpl.n	10042e9c <_vfiprintf_r+0xf0>
10042e92:	2353      	movs	r3, #83	@ 0x53
10042e94:	a904      	add	r1, sp, #16
10042e96:	185b      	adds	r3, r3, r1
10042e98:	212b      	movs	r1, #43	@ 0x2b
10042e9a:	7019      	strb	r1, [r3, #0]
10042e9c:	782b      	ldrb	r3, [r5, #0]
10042e9e:	2b2a      	cmp	r3, #42	@ 0x2a
10042ea0:	d016      	beq.n	10042ed0 <_vfiprintf_r+0x124>
10042ea2:	002e      	movs	r6, r5
10042ea4:	2100      	movs	r1, #0
10042ea6:	200a      	movs	r0, #10
10042ea8:	68e3      	ldr	r3, [r4, #12]
10042eaa:	7832      	ldrb	r2, [r6, #0]
10042eac:	1c75      	adds	r5, r6, #1
10042eae:	3a30      	subs	r2, #48	@ 0x30
10042eb0:	2a09      	cmp	r2, #9
10042eb2:	d950      	bls.n	10042f56 <_vfiprintf_r+0x1aa>
10042eb4:	2900      	cmp	r1, #0
10042eb6:	d111      	bne.n	10042edc <_vfiprintf_r+0x130>
10042eb8:	e017      	b.n	10042eea <_vfiprintf_r+0x13e>
10042eba:	3601      	adds	r6, #1
10042ebc:	e7af      	b.n	10042e1e <_vfiprintf_r+0x72>
10042ebe:	9b05      	ldr	r3, [sp, #20]
10042ec0:	6822      	ldr	r2, [r4, #0]
10042ec2:	1ac0      	subs	r0, r0, r3
10042ec4:	2301      	movs	r3, #1
10042ec6:	4083      	lsls	r3, r0
10042ec8:	4313      	orrs	r3, r2
10042eca:	0035      	movs	r5, r6
10042ecc:	6023      	str	r3, [r4, #0]
10042ece:	e7cc      	b.n	10042e6a <_vfiprintf_r+0xbe>
10042ed0:	9b07      	ldr	r3, [sp, #28]
10042ed2:	1d19      	adds	r1, r3, #4
10042ed4:	681b      	ldr	r3, [r3, #0]
10042ed6:	9107      	str	r1, [sp, #28]
10042ed8:	2b00      	cmp	r3, #0
10042eda:	db01      	blt.n	10042ee0 <_vfiprintf_r+0x134>
10042edc:	930b      	str	r3, [sp, #44]	@ 0x2c
10042ede:	e004      	b.n	10042eea <_vfiprintf_r+0x13e>
10042ee0:	425b      	negs	r3, r3
10042ee2:	60e3      	str	r3, [r4, #12]
10042ee4:	2302      	movs	r3, #2
10042ee6:	4313      	orrs	r3, r2
10042ee8:	6023      	str	r3, [r4, #0]
10042eea:	7833      	ldrb	r3, [r6, #0]
10042eec:	2b2e      	cmp	r3, #46	@ 0x2e
10042eee:	d10c      	bne.n	10042f0a <_vfiprintf_r+0x15e>
10042ef0:	7873      	ldrb	r3, [r6, #1]
10042ef2:	2b2a      	cmp	r3, #42	@ 0x2a
10042ef4:	d134      	bne.n	10042f60 <_vfiprintf_r+0x1b4>
10042ef6:	9b07      	ldr	r3, [sp, #28]
10042ef8:	3602      	adds	r6, #2
10042efa:	1d1a      	adds	r2, r3, #4
10042efc:	681b      	ldr	r3, [r3, #0]
10042efe:	9207      	str	r2, [sp, #28]
10042f00:	2b00      	cmp	r3, #0
10042f02:	da01      	bge.n	10042f08 <_vfiprintf_r+0x15c>
10042f04:	2301      	movs	r3, #1
10042f06:	425b      	negs	r3, r3
10042f08:	9309      	str	r3, [sp, #36]	@ 0x24
10042f0a:	4d32      	ldr	r5, [pc, #200]	@ (10042fd4 <_vfiprintf_r+0x228>)
10042f0c:	2203      	movs	r2, #3
10042f0e:	0028      	movs	r0, r5
10042f10:	7831      	ldrb	r1, [r6, #0]
10042f12:	f000 fb49 	bl	100435a8 <memchr>
10042f16:	2800      	cmp	r0, #0
10042f18:	d006      	beq.n	10042f28 <_vfiprintf_r+0x17c>
10042f1a:	2340      	movs	r3, #64	@ 0x40
10042f1c:	1b40      	subs	r0, r0, r5
10042f1e:	4083      	lsls	r3, r0
10042f20:	6822      	ldr	r2, [r4, #0]
10042f22:	3601      	adds	r6, #1
10042f24:	4313      	orrs	r3, r2
10042f26:	6023      	str	r3, [r4, #0]
10042f28:	7831      	ldrb	r1, [r6, #0]
10042f2a:	2206      	movs	r2, #6
10042f2c:	482a      	ldr	r0, [pc, #168]	@ (10042fd8 <_vfiprintf_r+0x22c>)
10042f2e:	1c75      	adds	r5, r6, #1
10042f30:	7621      	strb	r1, [r4, #24]
10042f32:	f000 fb39 	bl	100435a8 <memchr>
10042f36:	2800      	cmp	r0, #0
10042f38:	d040      	beq.n	10042fbc <_vfiprintf_r+0x210>
10042f3a:	4b28      	ldr	r3, [pc, #160]	@ (10042fdc <_vfiprintf_r+0x230>)
10042f3c:	2b00      	cmp	r3, #0
10042f3e:	d122      	bne.n	10042f86 <_vfiprintf_r+0x1da>
10042f40:	2207      	movs	r2, #7
10042f42:	9b07      	ldr	r3, [sp, #28]
10042f44:	3307      	adds	r3, #7
10042f46:	4393      	bics	r3, r2
10042f48:	3308      	adds	r3, #8
10042f4a:	9307      	str	r3, [sp, #28]
10042f4c:	6963      	ldr	r3, [r4, #20]
10042f4e:	9a04      	ldr	r2, [sp, #16]
10042f50:	189b      	adds	r3, r3, r2
10042f52:	6163      	str	r3, [r4, #20]
10042f54:	e762      	b.n	10042e1c <_vfiprintf_r+0x70>
10042f56:	4343      	muls	r3, r0
10042f58:	002e      	movs	r6, r5
10042f5a:	2101      	movs	r1, #1
10042f5c:	189b      	adds	r3, r3, r2
10042f5e:	e7a4      	b.n	10042eaa <_vfiprintf_r+0xfe>
10042f60:	2300      	movs	r3, #0
10042f62:	200a      	movs	r0, #10
10042f64:	0019      	movs	r1, r3
10042f66:	3601      	adds	r6, #1
10042f68:	6063      	str	r3, [r4, #4]
10042f6a:	7832      	ldrb	r2, [r6, #0]
10042f6c:	1c75      	adds	r5, r6, #1
10042f6e:	3a30      	subs	r2, #48	@ 0x30
10042f70:	2a09      	cmp	r2, #9
10042f72:	d903      	bls.n	10042f7c <_vfiprintf_r+0x1d0>
10042f74:	2b00      	cmp	r3, #0
10042f76:	d0c8      	beq.n	10042f0a <_vfiprintf_r+0x15e>
10042f78:	9109      	str	r1, [sp, #36]	@ 0x24
10042f7a:	e7c6      	b.n	10042f0a <_vfiprintf_r+0x15e>
10042f7c:	4341      	muls	r1, r0
10042f7e:	002e      	movs	r6, r5
10042f80:	2301      	movs	r3, #1
10042f82:	1889      	adds	r1, r1, r2
10042f84:	e7f1      	b.n	10042f6a <_vfiprintf_r+0x1be>
10042f86:	aa07      	add	r2, sp, #28
10042f88:	9200      	str	r2, [sp, #0]
10042f8a:	0021      	movs	r1, r4
10042f8c:	003a      	movs	r2, r7
10042f8e:	4b14      	ldr	r3, [pc, #80]	@ (10042fe0 <_vfiprintf_r+0x234>)
10042f90:	9803      	ldr	r0, [sp, #12]
10042f92:	e000      	b.n	10042f96 <_vfiprintf_r+0x1ea>
10042f94:	bf00      	nop
10042f96:	9004      	str	r0, [sp, #16]
10042f98:	9b04      	ldr	r3, [sp, #16]
10042f9a:	3301      	adds	r3, #1
10042f9c:	d1d6      	bne.n	10042f4c <_vfiprintf_r+0x1a0>
10042f9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10042fa0:	07db      	lsls	r3, r3, #31
10042fa2:	d405      	bmi.n	10042fb0 <_vfiprintf_r+0x204>
10042fa4:	89bb      	ldrh	r3, [r7, #12]
10042fa6:	059b      	lsls	r3, r3, #22
10042fa8:	d402      	bmi.n	10042fb0 <_vfiprintf_r+0x204>
10042faa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
10042fac:	f7ff fdd8 	bl	10042b60 <__retarget_lock_release_recursive>
10042fb0:	89bb      	ldrh	r3, [r7, #12]
10042fb2:	065b      	lsls	r3, r3, #25
10042fb4:	d500      	bpl.n	10042fb8 <_vfiprintf_r+0x20c>
10042fb6:	e71e      	b.n	10042df6 <_vfiprintf_r+0x4a>
10042fb8:	980d      	ldr	r0, [sp, #52]	@ 0x34
10042fba:	e71e      	b.n	10042dfa <_vfiprintf_r+0x4e>
10042fbc:	aa07      	add	r2, sp, #28
10042fbe:	9200      	str	r2, [sp, #0]
10042fc0:	0021      	movs	r1, r4
10042fc2:	003a      	movs	r2, r7
10042fc4:	4b06      	ldr	r3, [pc, #24]	@ (10042fe0 <_vfiprintf_r+0x234>)
10042fc6:	9803      	ldr	r0, [sp, #12]
10042fc8:	f000 f87c 	bl	100430c4 <_printf_i>
10042fcc:	e7e3      	b.n	10042f96 <_vfiprintf_r+0x1ea>
10042fce:	46c0      	nop			@ (mov r8, r8)
10042fd0:	100437a0 	.word	0x100437a0
10042fd4:	100437a6 	.word	0x100437a6
10042fd8:	100437aa 	.word	0x100437aa
10042fdc:	00000000 	.word	0x00000000
10042fe0:	10042d87 	.word	0x10042d87

10042fe4 <_printf_common>:
10042fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10042fe6:	0016      	movs	r6, r2
10042fe8:	9301      	str	r3, [sp, #4]
10042fea:	688a      	ldr	r2, [r1, #8]
10042fec:	690b      	ldr	r3, [r1, #16]
10042fee:	000c      	movs	r4, r1
10042ff0:	9000      	str	r0, [sp, #0]
10042ff2:	4293      	cmp	r3, r2
10042ff4:	da00      	bge.n	10042ff8 <_printf_common+0x14>
10042ff6:	0013      	movs	r3, r2
10042ff8:	0022      	movs	r2, r4
10042ffa:	6033      	str	r3, [r6, #0]
10042ffc:	3243      	adds	r2, #67	@ 0x43
10042ffe:	7812      	ldrb	r2, [r2, #0]
10043000:	2a00      	cmp	r2, #0
10043002:	d001      	beq.n	10043008 <_printf_common+0x24>
10043004:	3301      	adds	r3, #1
10043006:	6033      	str	r3, [r6, #0]
10043008:	6823      	ldr	r3, [r4, #0]
1004300a:	069b      	lsls	r3, r3, #26
1004300c:	d502      	bpl.n	10043014 <_printf_common+0x30>
1004300e:	6833      	ldr	r3, [r6, #0]
10043010:	3302      	adds	r3, #2
10043012:	6033      	str	r3, [r6, #0]
10043014:	6822      	ldr	r2, [r4, #0]
10043016:	2306      	movs	r3, #6
10043018:	0015      	movs	r5, r2
1004301a:	401d      	ands	r5, r3
1004301c:	421a      	tst	r2, r3
1004301e:	d027      	beq.n	10043070 <_printf_common+0x8c>
10043020:	0023      	movs	r3, r4
10043022:	3343      	adds	r3, #67	@ 0x43
10043024:	781b      	ldrb	r3, [r3, #0]
10043026:	1e5a      	subs	r2, r3, #1
10043028:	4193      	sbcs	r3, r2
1004302a:	6822      	ldr	r2, [r4, #0]
1004302c:	0692      	lsls	r2, r2, #26
1004302e:	d430      	bmi.n	10043092 <_printf_common+0xae>
10043030:	0022      	movs	r2, r4
10043032:	9901      	ldr	r1, [sp, #4]
10043034:	9800      	ldr	r0, [sp, #0]
10043036:	9d08      	ldr	r5, [sp, #32]
10043038:	3243      	adds	r2, #67	@ 0x43
1004303a:	47a8      	blx	r5
1004303c:	3001      	adds	r0, #1
1004303e:	d025      	beq.n	1004308c <_printf_common+0xa8>
10043040:	2206      	movs	r2, #6
10043042:	6823      	ldr	r3, [r4, #0]
10043044:	2500      	movs	r5, #0
10043046:	4013      	ands	r3, r2
10043048:	2b04      	cmp	r3, #4
1004304a:	d105      	bne.n	10043058 <_printf_common+0x74>
1004304c:	6833      	ldr	r3, [r6, #0]
1004304e:	68e5      	ldr	r5, [r4, #12]
10043050:	1aed      	subs	r5, r5, r3
10043052:	43eb      	mvns	r3, r5
10043054:	17db      	asrs	r3, r3, #31
10043056:	401d      	ands	r5, r3
10043058:	68a3      	ldr	r3, [r4, #8]
1004305a:	6922      	ldr	r2, [r4, #16]
1004305c:	4293      	cmp	r3, r2
1004305e:	dd01      	ble.n	10043064 <_printf_common+0x80>
10043060:	1a9b      	subs	r3, r3, r2
10043062:	18ed      	adds	r5, r5, r3
10043064:	2600      	movs	r6, #0
10043066:	42b5      	cmp	r5, r6
10043068:	d120      	bne.n	100430ac <_printf_common+0xc8>
1004306a:	2000      	movs	r0, #0
1004306c:	e010      	b.n	10043090 <_printf_common+0xac>
1004306e:	3501      	adds	r5, #1
10043070:	68e3      	ldr	r3, [r4, #12]
10043072:	6832      	ldr	r2, [r6, #0]
10043074:	1a9b      	subs	r3, r3, r2
10043076:	42ab      	cmp	r3, r5
10043078:	ddd2      	ble.n	10043020 <_printf_common+0x3c>
1004307a:	0022      	movs	r2, r4
1004307c:	2301      	movs	r3, #1
1004307e:	9901      	ldr	r1, [sp, #4]
10043080:	9800      	ldr	r0, [sp, #0]
10043082:	9f08      	ldr	r7, [sp, #32]
10043084:	3219      	adds	r2, #25
10043086:	47b8      	blx	r7
10043088:	3001      	adds	r0, #1
1004308a:	d1f0      	bne.n	1004306e <_printf_common+0x8a>
1004308c:	2001      	movs	r0, #1
1004308e:	4240      	negs	r0, r0
10043090:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10043092:	2030      	movs	r0, #48	@ 0x30
10043094:	18e1      	adds	r1, r4, r3
10043096:	3143      	adds	r1, #67	@ 0x43
10043098:	7008      	strb	r0, [r1, #0]
1004309a:	0021      	movs	r1, r4
1004309c:	1c5a      	adds	r2, r3, #1
1004309e:	3145      	adds	r1, #69	@ 0x45
100430a0:	7809      	ldrb	r1, [r1, #0]
100430a2:	18a2      	adds	r2, r4, r2
100430a4:	3243      	adds	r2, #67	@ 0x43
100430a6:	3302      	adds	r3, #2
100430a8:	7011      	strb	r1, [r2, #0]
100430aa:	e7c1      	b.n	10043030 <_printf_common+0x4c>
100430ac:	0022      	movs	r2, r4
100430ae:	2301      	movs	r3, #1
100430b0:	9901      	ldr	r1, [sp, #4]
100430b2:	9800      	ldr	r0, [sp, #0]
100430b4:	9f08      	ldr	r7, [sp, #32]
100430b6:	321a      	adds	r2, #26
100430b8:	47b8      	blx	r7
100430ba:	3001      	adds	r0, #1
100430bc:	d0e6      	beq.n	1004308c <_printf_common+0xa8>
100430be:	3601      	adds	r6, #1
100430c0:	e7d1      	b.n	10043066 <_printf_common+0x82>
	...

100430c4 <_printf_i>:
100430c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100430c6:	b08b      	sub	sp, #44	@ 0x2c
100430c8:	9206      	str	r2, [sp, #24]
100430ca:	000a      	movs	r2, r1
100430cc:	3243      	adds	r2, #67	@ 0x43
100430ce:	9307      	str	r3, [sp, #28]
100430d0:	9005      	str	r0, [sp, #20]
100430d2:	9203      	str	r2, [sp, #12]
100430d4:	7e0a      	ldrb	r2, [r1, #24]
100430d6:	000c      	movs	r4, r1
100430d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100430da:	2a78      	cmp	r2, #120	@ 0x78
100430dc:	d809      	bhi.n	100430f2 <_printf_i+0x2e>
100430de:	2a62      	cmp	r2, #98	@ 0x62
100430e0:	d80b      	bhi.n	100430fa <_printf_i+0x36>
100430e2:	2a00      	cmp	r2, #0
100430e4:	d100      	bne.n	100430e8 <_printf_i+0x24>
100430e6:	e0bc      	b.n	10043262 <_printf_i+0x19e>
100430e8:	497b      	ldr	r1, [pc, #492]	@ (100432d8 <_printf_i+0x214>)
100430ea:	9104      	str	r1, [sp, #16]
100430ec:	2a58      	cmp	r2, #88	@ 0x58
100430ee:	d100      	bne.n	100430f2 <_printf_i+0x2e>
100430f0:	e090      	b.n	10043214 <_printf_i+0x150>
100430f2:	0025      	movs	r5, r4
100430f4:	3542      	adds	r5, #66	@ 0x42
100430f6:	702a      	strb	r2, [r5, #0]
100430f8:	e022      	b.n	10043140 <_printf_i+0x7c>
100430fa:	0010      	movs	r0, r2
100430fc:	3863      	subs	r0, #99	@ 0x63
100430fe:	2815      	cmp	r0, #21
10043100:	d8f7      	bhi.n	100430f2 <_printf_i+0x2e>
10043102:	f7fc ffdd 	bl	100400c0 <__gnu_thumb1_case_shi>
10043106:	0016      	.short	0x0016
10043108:	fff6001f 	.word	0xfff6001f
1004310c:	fff6fff6 	.word	0xfff6fff6
10043110:	001ffff6 	.word	0x001ffff6
10043114:	fff6fff6 	.word	0xfff6fff6
10043118:	fff6fff6 	.word	0xfff6fff6
1004311c:	003600a1 	.word	0x003600a1
10043120:	fff60080 	.word	0xfff60080
10043124:	00b2fff6 	.word	0x00b2fff6
10043128:	0036fff6 	.word	0x0036fff6
1004312c:	fff6fff6 	.word	0xfff6fff6
10043130:	0084      	.short	0x0084
10043132:	0025      	movs	r5, r4
10043134:	681a      	ldr	r2, [r3, #0]
10043136:	3542      	adds	r5, #66	@ 0x42
10043138:	1d11      	adds	r1, r2, #4
1004313a:	6019      	str	r1, [r3, #0]
1004313c:	6813      	ldr	r3, [r2, #0]
1004313e:	702b      	strb	r3, [r5, #0]
10043140:	2301      	movs	r3, #1
10043142:	e0a0      	b.n	10043286 <_printf_i+0x1c2>
10043144:	6818      	ldr	r0, [r3, #0]
10043146:	6809      	ldr	r1, [r1, #0]
10043148:	1d02      	adds	r2, r0, #4
1004314a:	060d      	lsls	r5, r1, #24
1004314c:	d50b      	bpl.n	10043166 <_printf_i+0xa2>
1004314e:	6806      	ldr	r6, [r0, #0]
10043150:	601a      	str	r2, [r3, #0]
10043152:	2e00      	cmp	r6, #0
10043154:	da03      	bge.n	1004315e <_printf_i+0x9a>
10043156:	232d      	movs	r3, #45	@ 0x2d
10043158:	9a03      	ldr	r2, [sp, #12]
1004315a:	4276      	negs	r6, r6
1004315c:	7013      	strb	r3, [r2, #0]
1004315e:	4b5e      	ldr	r3, [pc, #376]	@ (100432d8 <_printf_i+0x214>)
10043160:	270a      	movs	r7, #10
10043162:	9304      	str	r3, [sp, #16]
10043164:	e018      	b.n	10043198 <_printf_i+0xd4>
10043166:	6806      	ldr	r6, [r0, #0]
10043168:	601a      	str	r2, [r3, #0]
1004316a:	0649      	lsls	r1, r1, #25
1004316c:	d5f1      	bpl.n	10043152 <_printf_i+0x8e>
1004316e:	b236      	sxth	r6, r6
10043170:	e7ef      	b.n	10043152 <_printf_i+0x8e>
10043172:	6808      	ldr	r0, [r1, #0]
10043174:	6819      	ldr	r1, [r3, #0]
10043176:	c940      	ldmia	r1!, {r6}
10043178:	0605      	lsls	r5, r0, #24
1004317a:	d402      	bmi.n	10043182 <_printf_i+0xbe>
1004317c:	0640      	lsls	r0, r0, #25
1004317e:	d500      	bpl.n	10043182 <_printf_i+0xbe>
10043180:	b2b6      	uxth	r6, r6
10043182:	6019      	str	r1, [r3, #0]
10043184:	4b54      	ldr	r3, [pc, #336]	@ (100432d8 <_printf_i+0x214>)
10043186:	270a      	movs	r7, #10
10043188:	9304      	str	r3, [sp, #16]
1004318a:	2a6f      	cmp	r2, #111	@ 0x6f
1004318c:	d100      	bne.n	10043190 <_printf_i+0xcc>
1004318e:	3f02      	subs	r7, #2
10043190:	0023      	movs	r3, r4
10043192:	2200      	movs	r2, #0
10043194:	3343      	adds	r3, #67	@ 0x43
10043196:	701a      	strb	r2, [r3, #0]
10043198:	6863      	ldr	r3, [r4, #4]
1004319a:	60a3      	str	r3, [r4, #8]
1004319c:	2b00      	cmp	r3, #0
1004319e:	db03      	blt.n	100431a8 <_printf_i+0xe4>
100431a0:	2104      	movs	r1, #4
100431a2:	6822      	ldr	r2, [r4, #0]
100431a4:	438a      	bics	r2, r1
100431a6:	6022      	str	r2, [r4, #0]
100431a8:	2e00      	cmp	r6, #0
100431aa:	d102      	bne.n	100431b2 <_printf_i+0xee>
100431ac:	9d03      	ldr	r5, [sp, #12]
100431ae:	2b00      	cmp	r3, #0
100431b0:	d00c      	beq.n	100431cc <_printf_i+0x108>
100431b2:	9d03      	ldr	r5, [sp, #12]
100431b4:	0030      	movs	r0, r6
100431b6:	0039      	movs	r1, r7
100431b8:	f7fd f812 	bl	100401e0 <__aeabi_uidivmod>
100431bc:	9b04      	ldr	r3, [sp, #16]
100431be:	3d01      	subs	r5, #1
100431c0:	5c5b      	ldrb	r3, [r3, r1]
100431c2:	702b      	strb	r3, [r5, #0]
100431c4:	0033      	movs	r3, r6
100431c6:	0006      	movs	r6, r0
100431c8:	429f      	cmp	r7, r3
100431ca:	d9f3      	bls.n	100431b4 <_printf_i+0xf0>
100431cc:	2f08      	cmp	r7, #8
100431ce:	d109      	bne.n	100431e4 <_printf_i+0x120>
100431d0:	6823      	ldr	r3, [r4, #0]
100431d2:	07db      	lsls	r3, r3, #31
100431d4:	d506      	bpl.n	100431e4 <_printf_i+0x120>
100431d6:	6862      	ldr	r2, [r4, #4]
100431d8:	6923      	ldr	r3, [r4, #16]
100431da:	429a      	cmp	r2, r3
100431dc:	dc02      	bgt.n	100431e4 <_printf_i+0x120>
100431de:	2330      	movs	r3, #48	@ 0x30
100431e0:	3d01      	subs	r5, #1
100431e2:	702b      	strb	r3, [r5, #0]
100431e4:	9b03      	ldr	r3, [sp, #12]
100431e6:	1b5b      	subs	r3, r3, r5
100431e8:	6123      	str	r3, [r4, #16]
100431ea:	9b07      	ldr	r3, [sp, #28]
100431ec:	0021      	movs	r1, r4
100431ee:	9300      	str	r3, [sp, #0]
100431f0:	9805      	ldr	r0, [sp, #20]
100431f2:	9b06      	ldr	r3, [sp, #24]
100431f4:	aa09      	add	r2, sp, #36	@ 0x24
100431f6:	f7ff fef5 	bl	10042fe4 <_printf_common>
100431fa:	3001      	adds	r0, #1
100431fc:	d148      	bne.n	10043290 <_printf_i+0x1cc>
100431fe:	2001      	movs	r0, #1
10043200:	4240      	negs	r0, r0
10043202:	b00b      	add	sp, #44	@ 0x2c
10043204:	bdf0      	pop	{r4, r5, r6, r7, pc}
10043206:	2220      	movs	r2, #32
10043208:	6809      	ldr	r1, [r1, #0]
1004320a:	430a      	orrs	r2, r1
1004320c:	6022      	str	r2, [r4, #0]
1004320e:	2278      	movs	r2, #120	@ 0x78
10043210:	4932      	ldr	r1, [pc, #200]	@ (100432dc <_printf_i+0x218>)
10043212:	9104      	str	r1, [sp, #16]
10043214:	0021      	movs	r1, r4
10043216:	3145      	adds	r1, #69	@ 0x45
10043218:	700a      	strb	r2, [r1, #0]
1004321a:	6819      	ldr	r1, [r3, #0]
1004321c:	6822      	ldr	r2, [r4, #0]
1004321e:	c940      	ldmia	r1!, {r6}
10043220:	0610      	lsls	r0, r2, #24
10043222:	d402      	bmi.n	1004322a <_printf_i+0x166>
10043224:	0650      	lsls	r0, r2, #25
10043226:	d500      	bpl.n	1004322a <_printf_i+0x166>
10043228:	b2b6      	uxth	r6, r6
1004322a:	6019      	str	r1, [r3, #0]
1004322c:	07d3      	lsls	r3, r2, #31
1004322e:	d502      	bpl.n	10043236 <_printf_i+0x172>
10043230:	2320      	movs	r3, #32
10043232:	4313      	orrs	r3, r2
10043234:	6023      	str	r3, [r4, #0]
10043236:	2e00      	cmp	r6, #0
10043238:	d001      	beq.n	1004323e <_printf_i+0x17a>
1004323a:	2710      	movs	r7, #16
1004323c:	e7a8      	b.n	10043190 <_printf_i+0xcc>
1004323e:	2220      	movs	r2, #32
10043240:	6823      	ldr	r3, [r4, #0]
10043242:	4393      	bics	r3, r2
10043244:	6023      	str	r3, [r4, #0]
10043246:	e7f8      	b.n	1004323a <_printf_i+0x176>
10043248:	681a      	ldr	r2, [r3, #0]
1004324a:	680d      	ldr	r5, [r1, #0]
1004324c:	1d10      	adds	r0, r2, #4
1004324e:	6949      	ldr	r1, [r1, #20]
10043250:	6018      	str	r0, [r3, #0]
10043252:	6813      	ldr	r3, [r2, #0]
10043254:	062e      	lsls	r6, r5, #24
10043256:	d501      	bpl.n	1004325c <_printf_i+0x198>
10043258:	6019      	str	r1, [r3, #0]
1004325a:	e002      	b.n	10043262 <_printf_i+0x19e>
1004325c:	066d      	lsls	r5, r5, #25
1004325e:	d5fb      	bpl.n	10043258 <_printf_i+0x194>
10043260:	8019      	strh	r1, [r3, #0]
10043262:	2300      	movs	r3, #0
10043264:	9d03      	ldr	r5, [sp, #12]
10043266:	6123      	str	r3, [r4, #16]
10043268:	e7bf      	b.n	100431ea <_printf_i+0x126>
1004326a:	681a      	ldr	r2, [r3, #0]
1004326c:	1d11      	adds	r1, r2, #4
1004326e:	6019      	str	r1, [r3, #0]
10043270:	6815      	ldr	r5, [r2, #0]
10043272:	2100      	movs	r1, #0
10043274:	0028      	movs	r0, r5
10043276:	6862      	ldr	r2, [r4, #4]
10043278:	f000 f996 	bl	100435a8 <memchr>
1004327c:	2800      	cmp	r0, #0
1004327e:	d001      	beq.n	10043284 <_printf_i+0x1c0>
10043280:	1b40      	subs	r0, r0, r5
10043282:	6060      	str	r0, [r4, #4]
10043284:	6863      	ldr	r3, [r4, #4]
10043286:	6123      	str	r3, [r4, #16]
10043288:	2300      	movs	r3, #0
1004328a:	9a03      	ldr	r2, [sp, #12]
1004328c:	7013      	strb	r3, [r2, #0]
1004328e:	e7ac      	b.n	100431ea <_printf_i+0x126>
10043290:	002a      	movs	r2, r5
10043292:	6923      	ldr	r3, [r4, #16]
10043294:	9906      	ldr	r1, [sp, #24]
10043296:	9805      	ldr	r0, [sp, #20]
10043298:	9d07      	ldr	r5, [sp, #28]
1004329a:	47a8      	blx	r5
1004329c:	3001      	adds	r0, #1
1004329e:	d0ae      	beq.n	100431fe <_printf_i+0x13a>
100432a0:	6823      	ldr	r3, [r4, #0]
100432a2:	079b      	lsls	r3, r3, #30
100432a4:	d415      	bmi.n	100432d2 <_printf_i+0x20e>
100432a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100432a8:	68e0      	ldr	r0, [r4, #12]
100432aa:	4298      	cmp	r0, r3
100432ac:	daa9      	bge.n	10043202 <_printf_i+0x13e>
100432ae:	0018      	movs	r0, r3
100432b0:	e7a7      	b.n	10043202 <_printf_i+0x13e>
100432b2:	0022      	movs	r2, r4
100432b4:	2301      	movs	r3, #1
100432b6:	9906      	ldr	r1, [sp, #24]
100432b8:	9805      	ldr	r0, [sp, #20]
100432ba:	9e07      	ldr	r6, [sp, #28]
100432bc:	3219      	adds	r2, #25
100432be:	47b0      	blx	r6
100432c0:	3001      	adds	r0, #1
100432c2:	d09c      	beq.n	100431fe <_printf_i+0x13a>
100432c4:	3501      	adds	r5, #1
100432c6:	68e3      	ldr	r3, [r4, #12]
100432c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
100432ca:	1a9b      	subs	r3, r3, r2
100432cc:	42ab      	cmp	r3, r5
100432ce:	dcf0      	bgt.n	100432b2 <_printf_i+0x1ee>
100432d0:	e7e9      	b.n	100432a6 <_printf_i+0x1e2>
100432d2:	2500      	movs	r5, #0
100432d4:	e7f7      	b.n	100432c6 <_printf_i+0x202>
100432d6:	46c0      	nop			@ (mov r8, r8)
100432d8:	100437b1 	.word	0x100437b1
100432dc:	100437c2 	.word	0x100437c2

100432e0 <__sflush_r>:
100432e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100432e2:	220c      	movs	r2, #12
100432e4:	5e8b      	ldrsh	r3, [r1, r2]
100432e6:	0005      	movs	r5, r0
100432e8:	000c      	movs	r4, r1
100432ea:	071a      	lsls	r2, r3, #28
100432ec:	d456      	bmi.n	1004339c <__sflush_r+0xbc>
100432ee:	684a      	ldr	r2, [r1, #4]
100432f0:	2a00      	cmp	r2, #0
100432f2:	dc02      	bgt.n	100432fa <__sflush_r+0x1a>
100432f4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
100432f6:	2a00      	cmp	r2, #0
100432f8:	dd4e      	ble.n	10043398 <__sflush_r+0xb8>
100432fa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
100432fc:	2f00      	cmp	r7, #0
100432fe:	d04b      	beq.n	10043398 <__sflush_r+0xb8>
10043300:	2200      	movs	r2, #0
10043302:	2080      	movs	r0, #128	@ 0x80
10043304:	682e      	ldr	r6, [r5, #0]
10043306:	602a      	str	r2, [r5, #0]
10043308:	001a      	movs	r2, r3
1004330a:	0140      	lsls	r0, r0, #5
1004330c:	6a21      	ldr	r1, [r4, #32]
1004330e:	4002      	ands	r2, r0
10043310:	4203      	tst	r3, r0
10043312:	d033      	beq.n	1004337c <__sflush_r+0x9c>
10043314:	6d62      	ldr	r2, [r4, #84]	@ 0x54
10043316:	89a3      	ldrh	r3, [r4, #12]
10043318:	075b      	lsls	r3, r3, #29
1004331a:	d506      	bpl.n	1004332a <__sflush_r+0x4a>
1004331c:	6863      	ldr	r3, [r4, #4]
1004331e:	1ad2      	subs	r2, r2, r3
10043320:	6b63      	ldr	r3, [r4, #52]	@ 0x34
10043322:	2b00      	cmp	r3, #0
10043324:	d001      	beq.n	1004332a <__sflush_r+0x4a>
10043326:	6c23      	ldr	r3, [r4, #64]	@ 0x40
10043328:	1ad2      	subs	r2, r2, r3
1004332a:	2300      	movs	r3, #0
1004332c:	0028      	movs	r0, r5
1004332e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
10043330:	6a21      	ldr	r1, [r4, #32]
10043332:	47b8      	blx	r7
10043334:	89a2      	ldrh	r2, [r4, #12]
10043336:	1c43      	adds	r3, r0, #1
10043338:	d106      	bne.n	10043348 <__sflush_r+0x68>
1004333a:	6829      	ldr	r1, [r5, #0]
1004333c:	291d      	cmp	r1, #29
1004333e:	d846      	bhi.n	100433ce <__sflush_r+0xee>
10043340:	4b29      	ldr	r3, [pc, #164]	@ (100433e8 <__sflush_r+0x108>)
10043342:	410b      	asrs	r3, r1
10043344:	07db      	lsls	r3, r3, #31
10043346:	d442      	bmi.n	100433ce <__sflush_r+0xee>
10043348:	2300      	movs	r3, #0
1004334a:	6063      	str	r3, [r4, #4]
1004334c:	6923      	ldr	r3, [r4, #16]
1004334e:	6023      	str	r3, [r4, #0]
10043350:	04d2      	lsls	r2, r2, #19
10043352:	d505      	bpl.n	10043360 <__sflush_r+0x80>
10043354:	1c43      	adds	r3, r0, #1
10043356:	d102      	bne.n	1004335e <__sflush_r+0x7e>
10043358:	682b      	ldr	r3, [r5, #0]
1004335a:	2b00      	cmp	r3, #0
1004335c:	d100      	bne.n	10043360 <__sflush_r+0x80>
1004335e:	6560      	str	r0, [r4, #84]	@ 0x54
10043360:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10043362:	602e      	str	r6, [r5, #0]
10043364:	2900      	cmp	r1, #0
10043366:	d017      	beq.n	10043398 <__sflush_r+0xb8>
10043368:	0023      	movs	r3, r4
1004336a:	3344      	adds	r3, #68	@ 0x44
1004336c:	4299      	cmp	r1, r3
1004336e:	d002      	beq.n	10043376 <__sflush_r+0x96>
10043370:	0028      	movs	r0, r5
10043372:	f7ff fbf7 	bl	10042b64 <_free_r>
10043376:	2300      	movs	r3, #0
10043378:	6363      	str	r3, [r4, #52]	@ 0x34
1004337a:	e00d      	b.n	10043398 <__sflush_r+0xb8>
1004337c:	2301      	movs	r3, #1
1004337e:	0028      	movs	r0, r5
10043380:	47b8      	blx	r7
10043382:	0002      	movs	r2, r0
10043384:	1c43      	adds	r3, r0, #1
10043386:	d1c6      	bne.n	10043316 <__sflush_r+0x36>
10043388:	682b      	ldr	r3, [r5, #0]
1004338a:	2b00      	cmp	r3, #0
1004338c:	d0c3      	beq.n	10043316 <__sflush_r+0x36>
1004338e:	2b1d      	cmp	r3, #29
10043390:	d001      	beq.n	10043396 <__sflush_r+0xb6>
10043392:	2b16      	cmp	r3, #22
10043394:	d11a      	bne.n	100433cc <__sflush_r+0xec>
10043396:	602e      	str	r6, [r5, #0]
10043398:	2000      	movs	r0, #0
1004339a:	e01e      	b.n	100433da <__sflush_r+0xfa>
1004339c:	690e      	ldr	r6, [r1, #16]
1004339e:	2e00      	cmp	r6, #0
100433a0:	d0fa      	beq.n	10043398 <__sflush_r+0xb8>
100433a2:	680f      	ldr	r7, [r1, #0]
100433a4:	600e      	str	r6, [r1, #0]
100433a6:	1bba      	subs	r2, r7, r6
100433a8:	9201      	str	r2, [sp, #4]
100433aa:	2200      	movs	r2, #0
100433ac:	079b      	lsls	r3, r3, #30
100433ae:	d100      	bne.n	100433b2 <__sflush_r+0xd2>
100433b0:	694a      	ldr	r2, [r1, #20]
100433b2:	60a2      	str	r2, [r4, #8]
100433b4:	9b01      	ldr	r3, [sp, #4]
100433b6:	2b00      	cmp	r3, #0
100433b8:	ddee      	ble.n	10043398 <__sflush_r+0xb8>
100433ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
100433bc:	0032      	movs	r2, r6
100433be:	001f      	movs	r7, r3
100433c0:	0028      	movs	r0, r5
100433c2:	9b01      	ldr	r3, [sp, #4]
100433c4:	6a21      	ldr	r1, [r4, #32]
100433c6:	47b8      	blx	r7
100433c8:	2800      	cmp	r0, #0
100433ca:	dc07      	bgt.n	100433dc <__sflush_r+0xfc>
100433cc:	89a2      	ldrh	r2, [r4, #12]
100433ce:	2340      	movs	r3, #64	@ 0x40
100433d0:	2001      	movs	r0, #1
100433d2:	4313      	orrs	r3, r2
100433d4:	b21b      	sxth	r3, r3
100433d6:	81a3      	strh	r3, [r4, #12]
100433d8:	4240      	negs	r0, r0
100433da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100433dc:	9b01      	ldr	r3, [sp, #4]
100433de:	1836      	adds	r6, r6, r0
100433e0:	1a1b      	subs	r3, r3, r0
100433e2:	9301      	str	r3, [sp, #4]
100433e4:	e7e6      	b.n	100433b4 <__sflush_r+0xd4>
100433e6:	46c0      	nop			@ (mov r8, r8)
100433e8:	dfbffffe 	.word	0xdfbffffe

100433ec <_fflush_r>:
100433ec:	690b      	ldr	r3, [r1, #16]
100433ee:	b570      	push	{r4, r5, r6, lr}
100433f0:	0005      	movs	r5, r0
100433f2:	000c      	movs	r4, r1
100433f4:	2b00      	cmp	r3, #0
100433f6:	d102      	bne.n	100433fe <_fflush_r+0x12>
100433f8:	2500      	movs	r5, #0
100433fa:	0028      	movs	r0, r5
100433fc:	bd70      	pop	{r4, r5, r6, pc}
100433fe:	2800      	cmp	r0, #0
10043400:	d004      	beq.n	1004340c <_fflush_r+0x20>
10043402:	6a03      	ldr	r3, [r0, #32]
10043404:	2b00      	cmp	r3, #0
10043406:	d101      	bne.n	1004340c <_fflush_r+0x20>
10043408:	f7ff fabc 	bl	10042984 <__sinit>
1004340c:	220c      	movs	r2, #12
1004340e:	5ea3      	ldrsh	r3, [r4, r2]
10043410:	2b00      	cmp	r3, #0
10043412:	d0f1      	beq.n	100433f8 <_fflush_r+0xc>
10043414:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10043416:	07d2      	lsls	r2, r2, #31
10043418:	d404      	bmi.n	10043424 <_fflush_r+0x38>
1004341a:	059b      	lsls	r3, r3, #22
1004341c:	d402      	bmi.n	10043424 <_fflush_r+0x38>
1004341e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10043420:	f7ff fb9d 	bl	10042b5e <__retarget_lock_acquire_recursive>
10043424:	0028      	movs	r0, r5
10043426:	0021      	movs	r1, r4
10043428:	f7ff ff5a 	bl	100432e0 <__sflush_r>
1004342c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1004342e:	0005      	movs	r5, r0
10043430:	07db      	lsls	r3, r3, #31
10043432:	d4e2      	bmi.n	100433fa <_fflush_r+0xe>
10043434:	89a3      	ldrh	r3, [r4, #12]
10043436:	059b      	lsls	r3, r3, #22
10043438:	d4df      	bmi.n	100433fa <_fflush_r+0xe>
1004343a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004343c:	f7ff fb90 	bl	10042b60 <__retarget_lock_release_recursive>
10043440:	e7db      	b.n	100433fa <_fflush_r+0xe>

10043442 <__swbuf_r>:
10043442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10043444:	0006      	movs	r6, r0
10043446:	000d      	movs	r5, r1
10043448:	0014      	movs	r4, r2
1004344a:	2800      	cmp	r0, #0
1004344c:	d004      	beq.n	10043458 <__swbuf_r+0x16>
1004344e:	6a03      	ldr	r3, [r0, #32]
10043450:	2b00      	cmp	r3, #0
10043452:	d101      	bne.n	10043458 <__swbuf_r+0x16>
10043454:	f7ff fa96 	bl	10042984 <__sinit>
10043458:	69a3      	ldr	r3, [r4, #24]
1004345a:	60a3      	str	r3, [r4, #8]
1004345c:	89a3      	ldrh	r3, [r4, #12]
1004345e:	071b      	lsls	r3, r3, #28
10043460:	d502      	bpl.n	10043468 <__swbuf_r+0x26>
10043462:	6923      	ldr	r3, [r4, #16]
10043464:	2b00      	cmp	r3, #0
10043466:	d109      	bne.n	1004347c <__swbuf_r+0x3a>
10043468:	0021      	movs	r1, r4
1004346a:	0030      	movs	r0, r6
1004346c:	f000 f82c 	bl	100434c8 <__swsetup_r>
10043470:	2800      	cmp	r0, #0
10043472:	d003      	beq.n	1004347c <__swbuf_r+0x3a>
10043474:	2501      	movs	r5, #1
10043476:	426d      	negs	r5, r5
10043478:	0028      	movs	r0, r5
1004347a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004347c:	6923      	ldr	r3, [r4, #16]
1004347e:	6820      	ldr	r0, [r4, #0]
10043480:	b2ef      	uxtb	r7, r5
10043482:	1ac0      	subs	r0, r0, r3
10043484:	6963      	ldr	r3, [r4, #20]
10043486:	b2ed      	uxtb	r5, r5
10043488:	4283      	cmp	r3, r0
1004348a:	dc05      	bgt.n	10043498 <__swbuf_r+0x56>
1004348c:	0021      	movs	r1, r4
1004348e:	0030      	movs	r0, r6
10043490:	f7ff ffac 	bl	100433ec <_fflush_r>
10043494:	2800      	cmp	r0, #0
10043496:	d1ed      	bne.n	10043474 <__swbuf_r+0x32>
10043498:	68a3      	ldr	r3, [r4, #8]
1004349a:	3001      	adds	r0, #1
1004349c:	3b01      	subs	r3, #1
1004349e:	60a3      	str	r3, [r4, #8]
100434a0:	6823      	ldr	r3, [r4, #0]
100434a2:	1c5a      	adds	r2, r3, #1
100434a4:	6022      	str	r2, [r4, #0]
100434a6:	701f      	strb	r7, [r3, #0]
100434a8:	6963      	ldr	r3, [r4, #20]
100434aa:	4283      	cmp	r3, r0
100434ac:	d004      	beq.n	100434b8 <__swbuf_r+0x76>
100434ae:	89a3      	ldrh	r3, [r4, #12]
100434b0:	07db      	lsls	r3, r3, #31
100434b2:	d5e1      	bpl.n	10043478 <__swbuf_r+0x36>
100434b4:	2d0a      	cmp	r5, #10
100434b6:	d1df      	bne.n	10043478 <__swbuf_r+0x36>
100434b8:	0021      	movs	r1, r4
100434ba:	0030      	movs	r0, r6
100434bc:	f7ff ff96 	bl	100433ec <_fflush_r>
100434c0:	2800      	cmp	r0, #0
100434c2:	d0d9      	beq.n	10043478 <__swbuf_r+0x36>
100434c4:	e7d6      	b.n	10043474 <__swbuf_r+0x32>
	...

100434c8 <__swsetup_r>:
100434c8:	4b2d      	ldr	r3, [pc, #180]	@ (10043580 <__swsetup_r+0xb8>)
100434ca:	b570      	push	{r4, r5, r6, lr}
100434cc:	0005      	movs	r5, r0
100434ce:	6818      	ldr	r0, [r3, #0]
100434d0:	000c      	movs	r4, r1
100434d2:	2800      	cmp	r0, #0
100434d4:	d004      	beq.n	100434e0 <__swsetup_r+0x18>
100434d6:	6a03      	ldr	r3, [r0, #32]
100434d8:	2b00      	cmp	r3, #0
100434da:	d101      	bne.n	100434e0 <__swsetup_r+0x18>
100434dc:	f7ff fa52 	bl	10042984 <__sinit>
100434e0:	230c      	movs	r3, #12
100434e2:	5ee2      	ldrsh	r2, [r4, r3]
100434e4:	0713      	lsls	r3, r2, #28
100434e6:	d423      	bmi.n	10043530 <__swsetup_r+0x68>
100434e8:	06d3      	lsls	r3, r2, #27
100434ea:	d407      	bmi.n	100434fc <__swsetup_r+0x34>
100434ec:	2309      	movs	r3, #9
100434ee:	602b      	str	r3, [r5, #0]
100434f0:	2340      	movs	r3, #64	@ 0x40
100434f2:	2001      	movs	r0, #1
100434f4:	4313      	orrs	r3, r2
100434f6:	81a3      	strh	r3, [r4, #12]
100434f8:	4240      	negs	r0, r0
100434fa:	e03a      	b.n	10043572 <__swsetup_r+0xaa>
100434fc:	0752      	lsls	r2, r2, #29
100434fe:	d513      	bpl.n	10043528 <__swsetup_r+0x60>
10043500:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10043502:	2900      	cmp	r1, #0
10043504:	d008      	beq.n	10043518 <__swsetup_r+0x50>
10043506:	0023      	movs	r3, r4
10043508:	3344      	adds	r3, #68	@ 0x44
1004350a:	4299      	cmp	r1, r3
1004350c:	d002      	beq.n	10043514 <__swsetup_r+0x4c>
1004350e:	0028      	movs	r0, r5
10043510:	f7ff fb28 	bl	10042b64 <_free_r>
10043514:	2300      	movs	r3, #0
10043516:	6363      	str	r3, [r4, #52]	@ 0x34
10043518:	2224      	movs	r2, #36	@ 0x24
1004351a:	89a3      	ldrh	r3, [r4, #12]
1004351c:	4393      	bics	r3, r2
1004351e:	81a3      	strh	r3, [r4, #12]
10043520:	2300      	movs	r3, #0
10043522:	6063      	str	r3, [r4, #4]
10043524:	6923      	ldr	r3, [r4, #16]
10043526:	6023      	str	r3, [r4, #0]
10043528:	2308      	movs	r3, #8
1004352a:	89a2      	ldrh	r2, [r4, #12]
1004352c:	4313      	orrs	r3, r2
1004352e:	81a3      	strh	r3, [r4, #12]
10043530:	6923      	ldr	r3, [r4, #16]
10043532:	2b00      	cmp	r3, #0
10043534:	d10b      	bne.n	1004354e <__swsetup_r+0x86>
10043536:	21a0      	movs	r1, #160	@ 0xa0
10043538:	2280      	movs	r2, #128	@ 0x80
1004353a:	89a3      	ldrh	r3, [r4, #12]
1004353c:	0089      	lsls	r1, r1, #2
1004353e:	0092      	lsls	r2, r2, #2
10043540:	400b      	ands	r3, r1
10043542:	4293      	cmp	r3, r2
10043544:	d003      	beq.n	1004354e <__swsetup_r+0x86>
10043546:	0021      	movs	r1, r4
10043548:	0028      	movs	r0, r5
1004354a:	f000 f863 	bl	10043614 <__smakebuf_r>
1004354e:	230c      	movs	r3, #12
10043550:	5ee2      	ldrsh	r2, [r4, r3]
10043552:	2101      	movs	r1, #1
10043554:	0013      	movs	r3, r2
10043556:	400b      	ands	r3, r1
10043558:	420a      	tst	r2, r1
1004355a:	d00b      	beq.n	10043574 <__swsetup_r+0xac>
1004355c:	2300      	movs	r3, #0
1004355e:	60a3      	str	r3, [r4, #8]
10043560:	6963      	ldr	r3, [r4, #20]
10043562:	425b      	negs	r3, r3
10043564:	61a3      	str	r3, [r4, #24]
10043566:	2000      	movs	r0, #0
10043568:	6923      	ldr	r3, [r4, #16]
1004356a:	4283      	cmp	r3, r0
1004356c:	d101      	bne.n	10043572 <__swsetup_r+0xaa>
1004356e:	0613      	lsls	r3, r2, #24
10043570:	d4be      	bmi.n	100434f0 <__swsetup_r+0x28>
10043572:	bd70      	pop	{r4, r5, r6, pc}
10043574:	0791      	lsls	r1, r2, #30
10043576:	d400      	bmi.n	1004357a <__swsetup_r+0xb2>
10043578:	6963      	ldr	r3, [r4, #20]
1004357a:	60a3      	str	r3, [r4, #8]
1004357c:	e7f3      	b.n	10043566 <__swsetup_r+0x9e>
1004357e:	46c0      	nop			@ (mov r8, r8)
10043580:	20000308 	.word	0x20000308

10043584 <_sbrk_r>:
10043584:	2300      	movs	r3, #0
10043586:	b570      	push	{r4, r5, r6, lr}
10043588:	4d06      	ldr	r5, [pc, #24]	@ (100435a4 <_sbrk_r+0x20>)
1004358a:	0004      	movs	r4, r0
1004358c:	0008      	movs	r0, r1
1004358e:	602b      	str	r3, [r5, #0]
10043590:	f7fd f978 	bl	10040884 <_sbrk>
10043594:	1c43      	adds	r3, r0, #1
10043596:	d103      	bne.n	100435a0 <_sbrk_r+0x1c>
10043598:	682b      	ldr	r3, [r5, #0]
1004359a:	2b00      	cmp	r3, #0
1004359c:	d000      	beq.n	100435a0 <_sbrk_r+0x1c>
1004359e:	6023      	str	r3, [r4, #0]
100435a0:	bd70      	pop	{r4, r5, r6, pc}
100435a2:	46c0      	nop			@ (mov r8, r8)
100435a4:	200002ac 	.word	0x200002ac

100435a8 <memchr>:
100435a8:	b2c9      	uxtb	r1, r1
100435aa:	1882      	adds	r2, r0, r2
100435ac:	4290      	cmp	r0, r2
100435ae:	d101      	bne.n	100435b4 <memchr+0xc>
100435b0:	2000      	movs	r0, #0
100435b2:	4770      	bx	lr
100435b4:	7803      	ldrb	r3, [r0, #0]
100435b6:	428b      	cmp	r3, r1
100435b8:	d0fb      	beq.n	100435b2 <memchr+0xa>
100435ba:	3001      	adds	r0, #1
100435bc:	e7f6      	b.n	100435ac <memchr+0x4>
	...

100435c0 <__swhatbuf_r>:
100435c0:	b570      	push	{r4, r5, r6, lr}
100435c2:	000e      	movs	r6, r1
100435c4:	001d      	movs	r5, r3
100435c6:	230e      	movs	r3, #14
100435c8:	5ec9      	ldrsh	r1, [r1, r3]
100435ca:	0014      	movs	r4, r2
100435cc:	b096      	sub	sp, #88	@ 0x58
100435ce:	2900      	cmp	r1, #0
100435d0:	da0c      	bge.n	100435ec <__swhatbuf_r+0x2c>
100435d2:	89b2      	ldrh	r2, [r6, #12]
100435d4:	2380      	movs	r3, #128	@ 0x80
100435d6:	0011      	movs	r1, r2
100435d8:	4019      	ands	r1, r3
100435da:	421a      	tst	r2, r3
100435dc:	d114      	bne.n	10043608 <__swhatbuf_r+0x48>
100435de:	2380      	movs	r3, #128	@ 0x80
100435e0:	00db      	lsls	r3, r3, #3
100435e2:	2000      	movs	r0, #0
100435e4:	6029      	str	r1, [r5, #0]
100435e6:	6023      	str	r3, [r4, #0]
100435e8:	b016      	add	sp, #88	@ 0x58
100435ea:	bd70      	pop	{r4, r5, r6, pc}
100435ec:	466a      	mov	r2, sp
100435ee:	f000 f853 	bl	10043698 <_fstat_r>
100435f2:	2800      	cmp	r0, #0
100435f4:	dbed      	blt.n	100435d2 <__swhatbuf_r+0x12>
100435f6:	23f0      	movs	r3, #240	@ 0xf0
100435f8:	9901      	ldr	r1, [sp, #4]
100435fa:	021b      	lsls	r3, r3, #8
100435fc:	4019      	ands	r1, r3
100435fe:	4b04      	ldr	r3, [pc, #16]	@ (10043610 <__swhatbuf_r+0x50>)
10043600:	18c9      	adds	r1, r1, r3
10043602:	424b      	negs	r3, r1
10043604:	4159      	adcs	r1, r3
10043606:	e7ea      	b.n	100435de <__swhatbuf_r+0x1e>
10043608:	2100      	movs	r1, #0
1004360a:	2340      	movs	r3, #64	@ 0x40
1004360c:	e7e9      	b.n	100435e2 <__swhatbuf_r+0x22>
1004360e:	46c0      	nop			@ (mov r8, r8)
10043610:	ffffe000 	.word	0xffffe000

10043614 <__smakebuf_r>:
10043614:	b5f0      	push	{r4, r5, r6, r7, lr}
10043616:	2602      	movs	r6, #2
10043618:	898b      	ldrh	r3, [r1, #12]
1004361a:	0005      	movs	r5, r0
1004361c:	000c      	movs	r4, r1
1004361e:	b085      	sub	sp, #20
10043620:	4233      	tst	r3, r6
10043622:	d007      	beq.n	10043634 <__smakebuf_r+0x20>
10043624:	0023      	movs	r3, r4
10043626:	3347      	adds	r3, #71	@ 0x47
10043628:	6023      	str	r3, [r4, #0]
1004362a:	6123      	str	r3, [r4, #16]
1004362c:	2301      	movs	r3, #1
1004362e:	6163      	str	r3, [r4, #20]
10043630:	b005      	add	sp, #20
10043632:	bdf0      	pop	{r4, r5, r6, r7, pc}
10043634:	ab03      	add	r3, sp, #12
10043636:	aa02      	add	r2, sp, #8
10043638:	f7ff ffc2 	bl	100435c0 <__swhatbuf_r>
1004363c:	9f02      	ldr	r7, [sp, #8]
1004363e:	9001      	str	r0, [sp, #4]
10043640:	0039      	movs	r1, r7
10043642:	0028      	movs	r0, r5
10043644:	f7ff fafa 	bl	10042c3c <_malloc_r>
10043648:	2800      	cmp	r0, #0
1004364a:	d108      	bne.n	1004365e <__smakebuf_r+0x4a>
1004364c:	220c      	movs	r2, #12
1004364e:	5ea3      	ldrsh	r3, [r4, r2]
10043650:	059a      	lsls	r2, r3, #22
10043652:	d4ed      	bmi.n	10043630 <__smakebuf_r+0x1c>
10043654:	2203      	movs	r2, #3
10043656:	4393      	bics	r3, r2
10043658:	431e      	orrs	r6, r3
1004365a:	81a6      	strh	r6, [r4, #12]
1004365c:	e7e2      	b.n	10043624 <__smakebuf_r+0x10>
1004365e:	2380      	movs	r3, #128	@ 0x80
10043660:	89a2      	ldrh	r2, [r4, #12]
10043662:	6020      	str	r0, [r4, #0]
10043664:	4313      	orrs	r3, r2
10043666:	81a3      	strh	r3, [r4, #12]
10043668:	9b03      	ldr	r3, [sp, #12]
1004366a:	6120      	str	r0, [r4, #16]
1004366c:	6167      	str	r7, [r4, #20]
1004366e:	2b00      	cmp	r3, #0
10043670:	d00c      	beq.n	1004368c <__smakebuf_r+0x78>
10043672:	0028      	movs	r0, r5
10043674:	230e      	movs	r3, #14
10043676:	5ee1      	ldrsh	r1, [r4, r3]
10043678:	f000 f820 	bl	100436bc <_isatty_r>
1004367c:	2800      	cmp	r0, #0
1004367e:	d005      	beq.n	1004368c <__smakebuf_r+0x78>
10043680:	2303      	movs	r3, #3
10043682:	89a2      	ldrh	r2, [r4, #12]
10043684:	439a      	bics	r2, r3
10043686:	3b02      	subs	r3, #2
10043688:	4313      	orrs	r3, r2
1004368a:	81a3      	strh	r3, [r4, #12]
1004368c:	89a3      	ldrh	r3, [r4, #12]
1004368e:	9a01      	ldr	r2, [sp, #4]
10043690:	4313      	orrs	r3, r2
10043692:	81a3      	strh	r3, [r4, #12]
10043694:	e7cc      	b.n	10043630 <__smakebuf_r+0x1c>
	...

10043698 <_fstat_r>:
10043698:	2300      	movs	r3, #0
1004369a:	b570      	push	{r4, r5, r6, lr}
1004369c:	4d06      	ldr	r5, [pc, #24]	@ (100436b8 <_fstat_r+0x20>)
1004369e:	0004      	movs	r4, r0
100436a0:	0008      	movs	r0, r1
100436a2:	0011      	movs	r1, r2
100436a4:	602b      	str	r3, [r5, #0]
100436a6:	f7fd f8ca 	bl	1004083e <_fstat>
100436aa:	1c43      	adds	r3, r0, #1
100436ac:	d103      	bne.n	100436b6 <_fstat_r+0x1e>
100436ae:	682b      	ldr	r3, [r5, #0]
100436b0:	2b00      	cmp	r3, #0
100436b2:	d000      	beq.n	100436b6 <_fstat_r+0x1e>
100436b4:	6023      	str	r3, [r4, #0]
100436b6:	bd70      	pop	{r4, r5, r6, pc}
100436b8:	200002ac 	.word	0x200002ac

100436bc <_isatty_r>:
100436bc:	2300      	movs	r3, #0
100436be:	b570      	push	{r4, r5, r6, lr}
100436c0:	4d06      	ldr	r5, [pc, #24]	@ (100436dc <_isatty_r+0x20>)
100436c2:	0004      	movs	r4, r0
100436c4:	0008      	movs	r0, r1
100436c6:	602b      	str	r3, [r5, #0]
100436c8:	f7fd f8c7 	bl	1004085a <_isatty>
100436cc:	1c43      	adds	r3, r0, #1
100436ce:	d103      	bne.n	100436d8 <_isatty_r+0x1c>
100436d0:	682b      	ldr	r3, [r5, #0]
100436d2:	2b00      	cmp	r3, #0
100436d4:	d000      	beq.n	100436d8 <_isatty_r+0x1c>
100436d6:	6023      	str	r3, [r4, #0]
100436d8:	bd70      	pop	{r4, r5, r6, pc}
100436da:	46c0      	nop			@ (mov r8, r8)
100436dc:	200002ac 	.word	0x200002ac

Disassembly of section .init:

100436e0 <_init>:
100436e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100436e2:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

100436e4 <_fini>:
100436e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100436e6:	46c0      	nop			@ (mov r8, r8)
