
WildlifeSource.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000294ac  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  1006956c  1006956c  0002a56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  10069570  10069570  0002a570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00001080  10069574  10069574  0002a574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  1006a5f4  1006a5f4  0002b5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000300  20002afc  1006a5fc  0002bafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  0002c004  2**2
                  ALLOC
  8 .ram_preamble_2 00000028  20000034  20000034  0002c004  2**2
                  ALLOC
  9 .bss.blueRAM  000000d4  200000c0  200000c0  0002c004  2**2
                  ALLOC
 10 .bss          00002968  20000194  20000194  0002c004  2**2
                  ALLOC
 11 .noinit       0000223c  20002dfc  1006a8fc  0002bdfc  2**2
                  ALLOC
 12 .ota_region_end 00000000  1006a8fc  1006a8fc  0002bdfc  2**0
                  CONTENTS
 13 .heap         00000000  20005038  20005038  0002bdfc  2**0
                  CONTENTS
 14 .stack        00000c00  20005400  20005400  0002c400  2**0
                  ALLOC
 15 .rom_info     00000000  10000000  10000000  0002bdfc  2**0
                  CONTENTS
 16 .ARM.attributes 0000002c  00000000  00000000  0002bdfc  2**0
                  CONTENTS, READONLY
 17 .debug_info   0003389f  00000000  00000000  0002be28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00008cfb  00000000  00000000  0005f6c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003968  00000000  00000000  000683c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002b2c4  00000000  00000000  0006bd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000454c1  00000000  00000000  00096ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000da064  00000000  00000000  000dc4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      0000023b  00000000  00000000  001b6519  2**0
                  CONTENTS, READONLY
 24 .arm_vfe_header 00000004  00000000  00000000  001b6754  2**2
                  CONTENTS, READONLY
 25 .debug_rnglists 00002b5d  00000000  00000000  001b6758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_frame  0000df78  00000000  00000000  001b92b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 000000f4  00000000  00000000  001c7230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <blue_unit_conversion>:
                __CODE__
                __THUMB__
                __EXPORT__ blue_unit_conversion

EXPORT_FUNC(blue_unit_conversion)
                  PUSH    {r4, lr}
100400c0:	b510      	push	{r4, lr}
                  CMP     r0, r2
100400c2:	4290      	cmp	r0, r2
                  BLS     mul32
100400c4:	d916      	bls.n	100400f4 <mul32>
                  UXTH    r2, r1
100400c6:	b28a      	uxth	r2, r1
                  LSRS    r3, r0, #16
100400c8:	0c03      	lsrs	r3, r0, #16
                  LSRS    r1, r1, #16
100400ca:	0c09      	lsrs	r1, r1, #16
                  MOV     r4, r1
100400cc:	460c      	mov	r4, r1
                  MULS    r1, r3, r1
100400ce:	4359      	muls	r1, r3
                  UXTH    r0, r0
100400d0:	b280      	uxth	r0, r0
                  MULS    r3, r2, r3
100400d2:	4353      	muls	r3, r2
                  MULS    r4, r0, r4
100400d4:	4344      	muls	r4, r0
                  MULS    r0, r2, r0
100400d6:	4350      	muls	r0, r2
                  ADDS    r3, r3, r4
100400d8:	191b      	adds	r3, r3, r4
                  LSLS    r2, r3, #16
100400da:	041a      	lsls	r2, r3, #16
                  LSRS    r3, r3, #16
100400dc:	0c1b      	lsrs	r3, r3, #16
                  ADDS    r0, r2, r0
100400de:	1810      	adds	r0, r2, r0
                  ADCS    r1, r3
100400e0:	4159      	adcs	r1, r3

                  MOVS    r2, #128
100400e2:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400e4:	0352      	lsls	r2, r2, #13
                  MOVS    r3, #0
100400e6:	2300      	movs	r3, #0
                  ADDS    r2, r2, r0
100400e8:	1812      	adds	r2, r2, r0
                  ADCS    r3, r1
100400ea:	414b      	adcs	r3, r1
                  LSRS    r2, r2, #21
100400ec:	0d52      	lsrs	r2, r2, #21
                  LSLS    r0, r3, #11
100400ee:	02d8      	lsls	r0, r3, #11
                  ORRS    r0, r2
100400f0:	4310      	orrs	r0, r2

                  POP {r4, pc}
100400f2:	bd10      	pop	{r4, pc}

100400f4 <mul32>:

                  ENDFUNC

EXPORT_FUNC(mul32)
                  MULS    r0, r1, r0
100400f4:	4348      	muls	r0, r1
                  MOVS    r2, #128
100400f6:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400f8:	0352      	lsls	r2, r2, #13
                  ADDS    r2, r2, r0
100400fa:	1812      	adds	r2, r2, r0
                  LSRS    r2, r2, #21
100400fc:	0d52      	lsrs	r2, r2, #21
                  MOV     r0, r2
100400fe:	4610      	mov	r0, r2

                  POP {r4, pc}
10040100:	bd10      	pop	{r4, pc}
10040102:	46c0      	nop			@ (mov r8, r8)

10040104 <Osal_MemCpy>:
                __CODE__
                __THUMB__
                __EXPORT__ Osal_MemCpy

EXPORT_FUNC(Osal_MemCpy)
                LSLS	R3, R1, #30
10040104:	078b      	lsls	r3, r1, #30
                BEQ	    memcpy_1
10040106:	d007      	beq.n	10040118 <memcpy_1>

10040108 <memcpy_byte>:
LABEL(memcpy_byte) /* Copy bytes until src is aligned */
                SUBS	R2, R2, #1
10040108:	3a01      	subs	r2, #1
                BCC	    memcpy_exit
1004010a:	d322      	bcc.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004010c:	780b      	ldrb	r3, [r1, #0]
      	        ADDS	R1, R1, #1
1004010e:	3101      	adds	r1, #1
      	        STRB	R3, [R0]
10040110:	7003      	strb	r3, [r0, #0]
                ADDS	R0, R0, #1
10040112:	3001      	adds	r0, #1
                LSLS	R3, R1, #30
10040114:	078b      	lsls	r3, r1, #30
                BNE	    memcpy_byte
10040116:	d1f7      	bne.n	10040108 <memcpy_byte>

10040118 <memcpy_1>:
LABEL(memcpy_1)
                LSLS	R3, R0, #30
10040118:	0783      	lsls	r3, r0, #30
                BEQ	    memcpy4
1004011a:	d030      	beq.n	1004017e <memcpy4>
                CMN	    R3, R3
1004011c:	42db      	cmn	r3, r3
                BEQ	    memcpy_7
1004011e:	d019      	beq.n	10040154 <memcpy_7>
                SUBS	R0, R0, #1
10040120:	3801      	subs	r0, #1
                SUBS	R2, R2, #4
10040122:	3a04      	subs	r2, #4
                BCC	    memcpy_3
10040124:	d308      	bcc.n	10040138 <memcpy_3>

10040126 <memcpy_2>:
LABEL(memcpy_2)  /* Load one word from src and write one byte, one half-word and another byte to dst */
                LDM	    R1!, {R3}
10040126:	c908      	ldmia	r1!, {r3}
                STRB	R3, [R0, #1]
10040128:	7043      	strb	r3, [r0, #1]
                LSRS	R3, R3, #8
1004012a:	0a1b      	lsrs	r3, r3, #8
                STRH	R3, [R0, #2]
1004012c:	8043      	strh	r3, [r0, #2]
                LSRS	R3, R3, #16
1004012e:	0c1b      	lsrs	r3, r3, #16
                STRB	R3, [R0, #4]
10040130:	7103      	strb	r3, [r0, #4]
                ADDS	R0, R0, #4
10040132:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040134:	3a04      	subs	r2, #4
                BCS	    memcpy_2
10040136:	d2f6      	bcs.n	10040126 <memcpy_2>

10040138 <memcpy_3>:
LABEL(memcpy_3)
                LSLS	R2, R2, #31
10040138:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_5
1004013a:	d307      	bcc.n	1004014c <memcpy_5>
                LDRH	R3, [R1]
1004013c:	880b      	ldrh	r3, [r1, #0]
                STRB	R3, [R0, #1]
1004013e:	7043      	strb	r3, [r0, #1]
                BEQ	    memcpy_4
10040140:	d001      	beq.n	10040146 <memcpy_4>
                LDRB	R2, [R1, #2]
10040142:	788a      	ldrb	r2, [r1, #2]
                STRB	R2, [R0, #3]
10040144:	70c2      	strb	r2, [r0, #3]

10040146 <memcpy_4>:
LABEL(memcpy_4)
                LSRS	R3, R3, #8
10040146:	0a1b      	lsrs	r3, r3, #8
                STRB	R3, [R0, #2]
10040148:	7083      	strb	r3, [r0, #2]
                BX	    LR
1004014a:	4770      	bx	lr

1004014c <memcpy_5>:
LABEL(memcpy_5)
                BEQ	    memcpy_exit
1004014c:	d001      	beq.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004014e:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0, #1]
10040150:	7043      	strb	r3, [r0, #1]

10040152 <memcpy_exit>:
LABEL(memcpy_exit)
                BX	    LR
10040152:	4770      	bx	lr

10040154 <memcpy_7>:
LABEL(memcpy_7)
                SUBS	R2, R2, #4
10040154:	3a04      	subs	r2, #4
                BCC	    memcpy_9
10040156:	d306      	bcc.n	10040166 <memcpy_9>

10040158 <memcpy_8>:
LABEL(memcpy_8)  /* Load one word from src and write half-words to dst */
                LDM	    R1!, {R3}
10040158:	c908      	ldmia	r1!, {r3}
                STRH	R3, [R0]
1004015a:	8003      	strh	r3, [r0, #0]
                LSRS	R3, R3, #16
1004015c:	0c1b      	lsrs	r3, r3, #16
                STRH	R3, [R0, #2]
1004015e:	8043      	strh	r3, [r0, #2]
                ADDS	R0, R0, #4
10040160:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040162:	3a04      	subs	r2, #4
                BCS	    memcpy_8
10040164:	d2f8      	bcs.n	10040158 <memcpy_8>

10040166 <memcpy_9>:
LABEL(memcpy_9)
                LSLS	R2, R2, #31
10040166:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_10
10040168:	d305      	bcc.n	10040176 <memcpy_10>
                LDRH	R3, [R1]
1004016a:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
1004016c:	8003      	strh	r3, [r0, #0]
                BEQ	    memcpy_11
1004016e:	d005      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1, #2]
10040170:	788b      	ldrb	r3, [r1, #2]
                STRB	R3, [R0, #2]
10040172:	7083      	strb	r3, [r0, #2]
                BX	    LR
10040174:	4770      	bx	lr

10040176 <memcpy_10>:
LABEL(memcpy_10)
                BEQ	    memcpy_11
10040176:	d001      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1]
10040178:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
1004017a:	7003      	strb	r3, [r0, #0]

1004017c <memcpy_11>:
LABEL(memcpy_11)
                BX	    LR
1004017c:	4770      	bx	lr

1004017e <memcpy4>:

LABEL(memcpy4)
                PUSH	{R4-R6}
1004017e:	b470      	push	{r4, r5, r6}
                SUBS	R2, #16
10040180:	3a10      	subs	r2, #16
                BCC	    memcpy4_2words
10040182:	d303      	bcc.n	1004018c <memcpy4_2words>

10040184 <memcpy4_4words>:
LABEL(memcpy4_4words)
                LDM 	R1!, {R3-R6}
10040184:	c978      	ldmia	r1!, {r3, r4, r5, r6}
                STM	    R0!, {R3-R6}
10040186:	c078      	stmia	r0!, {r3, r4, r5, r6}
                SUBS	R2, #16
10040188:	3a10      	subs	r2, #16
                BCS	    memcpy4_4words
1004018a:	d2fb      	bcs.n	10040184 <memcpy4_4words>

1004018c <memcpy4_2words>:
LABEL(memcpy4_2words)
                LSLS	R3, R2, #29
1004018c:	0753      	lsls	r3, r2, #29
                BCC	    memcpy4_word
1004018e:	d301      	bcc.n	10040194 <memcpy4_word>
                LDM	    R1!, {R3, R4}
10040190:	c918      	ldmia	r1!, {r3, r4}
                STM	    R0!, {R3, R4}
10040192:	c018      	stmia	r0!, {r3, r4}

10040194 <memcpy4_word>:
LABEL(memcpy4_word)
                BPL 	memcpy4_halfword
10040194:	d501      	bpl.n	1004019a <memcpy4_halfword>
                LDM	    R1!, {R3}
10040196:	c908      	ldmia	r1!, {r3}
                STM	    R0!, {R3}
10040198:	c008      	stmia	r0!, {r3}

1004019a <memcpy4_halfword>:
LABEL(memcpy4_halfword)
                LSLS	R2, R2, #31
1004019a:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy4_byte
1004019c:	d304      	bcc.n	100401a8 <memcpy4_byte>
                LDRH	R3, [R1]
1004019e:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
100401a0:	8003      	strh	r3, [r0, #0]
                ADDS	R0, R0, #2
100401a2:	3002      	adds	r0, #2
                ADDS	R1, R1, #2
100401a4:	3102      	adds	r1, #2
                CMP	    R2, #0
100401a6:	2a00      	cmp	r2, #0

100401a8 <memcpy4_byte>:
LABEL(memcpy4_byte)
                BPL	    memcpy4_exit
100401a8:	d501      	bpl.n	100401ae <memcpy4_exit>
                LDRB	R3, [R1]
100401aa:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
100401ac:	7003      	strb	r3, [r0, #0]

100401ae <memcpy4_exit>:
LABEL(memcpy4_exit)
                POP	    {R4-R6}
100401ae:	bc70      	pop	{r4, r5, r6}
                BX	    LR
100401b0:	4770      	bx	lr
100401b2:	46c0      	nop			@ (mov r8, r8)

100401b4 <CPUcontextSave>:
                __THUMB__
                __EXPORT__ CPUcontextSave
                __EXPORT__ CPUcontextRestore
                __IMPORT__ RAM_VR
EXPORT_FUNC(CPUcontextSave)
                MRS    R2, CONTROL             /* load the CONTROL register into R2 */
100401b4:	f3ef 8214 	mrs	r2, CONTROL
                MRS    R1, PSP                 /* load the process stack pointer into R1 */
100401b8:	f3ef 8109 	mrs	r1, PSP
                LDR    R0, =0
100401bc:	4815      	ldr	r0, [pc, #84]	@ (10040214 <CPUcontextRestore+0x2c>)
                MSR    CONTROL, R0             /* Switch to Main Stack Pointer */
100401be:	f380 8814 	msr	CONTROL, r0
                ISB
100401c2:	f3bf 8f6f 	isb	sy

                PUSH   { r4 - r7, lr }         /* store R4-R7 and LR (5 words) onto the stack */
100401c6:	b5f0      	push	{r4, r5, r6, r7, lr}
                MOV    R3, R8                  /* mov thread {r8 - r12} to {r3 - r7} */
100401c8:	4643      	mov	r3, r8
                MOV    R4, R9
100401ca:	464c      	mov	r4, r9
                MOV    R5, R10
100401cc:	4655      	mov	r5, sl
                MOV    R6, R11
100401ce:	465e      	mov	r6, fp
                MOV    R7, R12
100401d0:	4667      	mov	r7, ip
                PUSH   {R3-R7}                 /* store R8-R12 (5 words) onto the stack */
100401d2:	b4f8      	push	{r3, r4, r5, r6, r7}

                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
100401d4:	4c10      	ldr	r4, [pc, #64]	@ (10040218 <CPUcontextRestore+0x30>)
                MRS    R3, MSP                 /* load the stack pointer into R3 */
100401d6:	f3ef 8308 	mrs	r3, MSP
                STR    R3, [R4,#4]             /* store the MSP into RAM_VR.SavedMSP (second word of the structure) */
100401da:	6063      	str	r3, [r4, #4]

                PUSH  { r1, r2 }               /*  store PSP, CONTROL */
100401dc:	b406      	push	{r1, r2}

                DSB
100401de:	f3bf 8f4f 	dsb	sy
                WFI                            /* all saved, trigger deep sleep */
100401e2:	bf30      	wfi

                NOP                            /* NOP instructions added if an interrupt (NOT WAKEUP SOURCE) is raised */
100401e4:	46c0      	nop			@ (mov r8, r8)
                NOP                            /* the device gates/stop the CPU clock 2 system clock cycles after this WFI */
100401e6:	46c0      	nop			@ (mov r8, r8)

100401e8 <CPUcontextRestore>:
EXPORT_FUNC(CPUcontextRestore)
                /* Even if we fall through the WFI instruction, we will immediately
                 * execute a context restore and end up where we left off with no
                 * ill effects.  Normally at this point the core will either be
                 * powered off or reset (depending on the deep sleep level). */
                LDR    R4, =RAM_VR              /* load address of RAM_VR into R4 */
100401e8:	4c0b      	ldr	r4, [pc, #44]	@ (10040218 <CPUcontextRestore+0x30>)
                LDR    R4, [R4,#4]              /* load the MSP from RAM_VR.SavedMSP (second word of the structure) */
100401ea:	6864      	ldr	r4, [r4, #4]
                MSR    MSP, R4                  /* restore the MSP from R4 */
100401ec:	f384 8808 	msr	MSP, r4

                SUB    SP, #0x8
100401f0:	b082      	sub	sp, #8
                POP    { R0, R1 }               /* load PSP from the stack in R0, and  load CONTROL register from the stack in R1 */
100401f2:	bc03      	pop	{r0, r1}

                POP    { R3-R7 }                /* load R8-R12 (5 words) from the stack */
100401f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
                MOV    R8, R3                   /* mov {r3 - r7} to {r8 - r12} */
100401f6:	4698      	mov	r8, r3
                MOV    R9, R4
100401f8:	46a1      	mov	r9, r4
                MOV    R10, R5
100401fa:	46aa      	mov	sl, r5
                MOV    R11, R6
100401fc:	46b3      	mov	fp, r6
                MOV    R12, R7
100401fe:	46bc      	mov	ip, r7
                POP    { R4 - R7 }              /* load R4-R7 (4 words) from the stack */
10040200:	bcf0      	pop	{r4, r5, r6, r7}
                POP    { R2 }                   /* load LR from the stack */
10040202:	bc04      	pop	{r2}

                MSR   PSP, R0                   /* restore PSP from R0 */
10040204:	f380 8809 	msr	PSP, r0
                MSR   CONTROL , R1              /* restore CONTROL register from R1 */
10040208:	f381 8814 	msr	CONTROL, r1
                ISB
1004020c:	f3bf 8f6f 	isb	sy

                BX  R2                          /*load PC (1 words) from the stack */
10040210:	4710      	bx	r2
10040212:	46c0      	nop			@ (mov r8, r8)
                LDR    R0, =0
10040214:	00000000 	.word	0x00000000
                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
10040218:	20000004 	.word	0x20000004

1004021c <strlen>:
1004021c:	2300      	movs	r3, #0
1004021e:	5cc2      	ldrb	r2, [r0, r3]
10040220:	3301      	adds	r3, #1
10040222:	2a00      	cmp	r2, #0
10040224:	d1fb      	bne.n	1004021e <strlen+0x2>
10040226:	1e58      	subs	r0, r3, #1
10040228:	4770      	bx	lr
	...

1004022c <__gnu_thumb1_case_shi>:
1004022c:	b403      	push	{r0, r1}
1004022e:	4671      	mov	r1, lr
10040230:	0849      	lsrs	r1, r1, #1
10040232:	0040      	lsls	r0, r0, #1
10040234:	0049      	lsls	r1, r1, #1
10040236:	5e09      	ldrsh	r1, [r1, r0]
10040238:	0049      	lsls	r1, r1, #1
1004023a:	448e      	add	lr, r1
1004023c:	bc03      	pop	{r0, r1}
1004023e:	4770      	bx	lr

10040240 <__udivsi3>:
10040240:	2200      	movs	r2, #0
10040242:	0843      	lsrs	r3, r0, #1
10040244:	428b      	cmp	r3, r1
10040246:	d374      	bcc.n	10040332 <__udivsi3+0xf2>
10040248:	0903      	lsrs	r3, r0, #4
1004024a:	428b      	cmp	r3, r1
1004024c:	d35f      	bcc.n	1004030e <__udivsi3+0xce>
1004024e:	0a03      	lsrs	r3, r0, #8
10040250:	428b      	cmp	r3, r1
10040252:	d344      	bcc.n	100402de <__udivsi3+0x9e>
10040254:	0b03      	lsrs	r3, r0, #12
10040256:	428b      	cmp	r3, r1
10040258:	d328      	bcc.n	100402ac <__udivsi3+0x6c>
1004025a:	0c03      	lsrs	r3, r0, #16
1004025c:	428b      	cmp	r3, r1
1004025e:	d30d      	bcc.n	1004027c <__udivsi3+0x3c>
10040260:	22ff      	movs	r2, #255	@ 0xff
10040262:	0209      	lsls	r1, r1, #8
10040264:	ba12      	rev	r2, r2
10040266:	0c03      	lsrs	r3, r0, #16
10040268:	428b      	cmp	r3, r1
1004026a:	d302      	bcc.n	10040272 <__udivsi3+0x32>
1004026c:	1212      	asrs	r2, r2, #8
1004026e:	0209      	lsls	r1, r1, #8
10040270:	d065      	beq.n	1004033e <__udivsi3+0xfe>
10040272:	0b03      	lsrs	r3, r0, #12
10040274:	428b      	cmp	r3, r1
10040276:	d319      	bcc.n	100402ac <__udivsi3+0x6c>
10040278:	e000      	b.n	1004027c <__udivsi3+0x3c>
1004027a:	0a09      	lsrs	r1, r1, #8
1004027c:	0bc3      	lsrs	r3, r0, #15
1004027e:	428b      	cmp	r3, r1
10040280:	d301      	bcc.n	10040286 <__udivsi3+0x46>
10040282:	03cb      	lsls	r3, r1, #15
10040284:	1ac0      	subs	r0, r0, r3
10040286:	4152      	adcs	r2, r2
10040288:	0b83      	lsrs	r3, r0, #14
1004028a:	428b      	cmp	r3, r1
1004028c:	d301      	bcc.n	10040292 <__udivsi3+0x52>
1004028e:	038b      	lsls	r3, r1, #14
10040290:	1ac0      	subs	r0, r0, r3
10040292:	4152      	adcs	r2, r2
10040294:	0b43      	lsrs	r3, r0, #13
10040296:	428b      	cmp	r3, r1
10040298:	d301      	bcc.n	1004029e <__udivsi3+0x5e>
1004029a:	034b      	lsls	r3, r1, #13
1004029c:	1ac0      	subs	r0, r0, r3
1004029e:	4152      	adcs	r2, r2
100402a0:	0b03      	lsrs	r3, r0, #12
100402a2:	428b      	cmp	r3, r1
100402a4:	d301      	bcc.n	100402aa <__udivsi3+0x6a>
100402a6:	030b      	lsls	r3, r1, #12
100402a8:	1ac0      	subs	r0, r0, r3
100402aa:	4152      	adcs	r2, r2
100402ac:	0ac3      	lsrs	r3, r0, #11
100402ae:	428b      	cmp	r3, r1
100402b0:	d301      	bcc.n	100402b6 <__udivsi3+0x76>
100402b2:	02cb      	lsls	r3, r1, #11
100402b4:	1ac0      	subs	r0, r0, r3
100402b6:	4152      	adcs	r2, r2
100402b8:	0a83      	lsrs	r3, r0, #10
100402ba:	428b      	cmp	r3, r1
100402bc:	d301      	bcc.n	100402c2 <__udivsi3+0x82>
100402be:	028b      	lsls	r3, r1, #10
100402c0:	1ac0      	subs	r0, r0, r3
100402c2:	4152      	adcs	r2, r2
100402c4:	0a43      	lsrs	r3, r0, #9
100402c6:	428b      	cmp	r3, r1
100402c8:	d301      	bcc.n	100402ce <__udivsi3+0x8e>
100402ca:	024b      	lsls	r3, r1, #9
100402cc:	1ac0      	subs	r0, r0, r3
100402ce:	4152      	adcs	r2, r2
100402d0:	0a03      	lsrs	r3, r0, #8
100402d2:	428b      	cmp	r3, r1
100402d4:	d301      	bcc.n	100402da <__udivsi3+0x9a>
100402d6:	020b      	lsls	r3, r1, #8
100402d8:	1ac0      	subs	r0, r0, r3
100402da:	4152      	adcs	r2, r2
100402dc:	d2cd      	bcs.n	1004027a <__udivsi3+0x3a>
100402de:	09c3      	lsrs	r3, r0, #7
100402e0:	428b      	cmp	r3, r1
100402e2:	d301      	bcc.n	100402e8 <__udivsi3+0xa8>
100402e4:	01cb      	lsls	r3, r1, #7
100402e6:	1ac0      	subs	r0, r0, r3
100402e8:	4152      	adcs	r2, r2
100402ea:	0983      	lsrs	r3, r0, #6
100402ec:	428b      	cmp	r3, r1
100402ee:	d301      	bcc.n	100402f4 <__udivsi3+0xb4>
100402f0:	018b      	lsls	r3, r1, #6
100402f2:	1ac0      	subs	r0, r0, r3
100402f4:	4152      	adcs	r2, r2
100402f6:	0943      	lsrs	r3, r0, #5
100402f8:	428b      	cmp	r3, r1
100402fa:	d301      	bcc.n	10040300 <__udivsi3+0xc0>
100402fc:	014b      	lsls	r3, r1, #5
100402fe:	1ac0      	subs	r0, r0, r3
10040300:	4152      	adcs	r2, r2
10040302:	0903      	lsrs	r3, r0, #4
10040304:	428b      	cmp	r3, r1
10040306:	d301      	bcc.n	1004030c <__udivsi3+0xcc>
10040308:	010b      	lsls	r3, r1, #4
1004030a:	1ac0      	subs	r0, r0, r3
1004030c:	4152      	adcs	r2, r2
1004030e:	08c3      	lsrs	r3, r0, #3
10040310:	428b      	cmp	r3, r1
10040312:	d301      	bcc.n	10040318 <__udivsi3+0xd8>
10040314:	00cb      	lsls	r3, r1, #3
10040316:	1ac0      	subs	r0, r0, r3
10040318:	4152      	adcs	r2, r2
1004031a:	0883      	lsrs	r3, r0, #2
1004031c:	428b      	cmp	r3, r1
1004031e:	d301      	bcc.n	10040324 <__udivsi3+0xe4>
10040320:	008b      	lsls	r3, r1, #2
10040322:	1ac0      	subs	r0, r0, r3
10040324:	4152      	adcs	r2, r2
10040326:	0843      	lsrs	r3, r0, #1
10040328:	428b      	cmp	r3, r1
1004032a:	d301      	bcc.n	10040330 <__udivsi3+0xf0>
1004032c:	004b      	lsls	r3, r1, #1
1004032e:	1ac0      	subs	r0, r0, r3
10040330:	4152      	adcs	r2, r2
10040332:	1a41      	subs	r1, r0, r1
10040334:	d200      	bcs.n	10040338 <__udivsi3+0xf8>
10040336:	4601      	mov	r1, r0
10040338:	4152      	adcs	r2, r2
1004033a:	4610      	mov	r0, r2
1004033c:	4770      	bx	lr
1004033e:	e7ff      	b.n	10040340 <__udivsi3+0x100>
10040340:	b501      	push	{r0, lr}
10040342:	2000      	movs	r0, #0
10040344:	f000 f8f0 	bl	10040528 <__aeabi_idiv0>
10040348:	bd02      	pop	{r1, pc}
1004034a:	46c0      	nop			@ (mov r8, r8)

1004034c <__aeabi_uidivmod>:
1004034c:	2900      	cmp	r1, #0
1004034e:	d0f7      	beq.n	10040340 <__udivsi3+0x100>
10040350:	e776      	b.n	10040240 <__udivsi3>
10040352:	4770      	bx	lr

10040354 <__divsi3>:
10040354:	4603      	mov	r3, r0
10040356:	430b      	orrs	r3, r1
10040358:	d47f      	bmi.n	1004045a <__divsi3+0x106>
1004035a:	2200      	movs	r2, #0
1004035c:	0843      	lsrs	r3, r0, #1
1004035e:	428b      	cmp	r3, r1
10040360:	d374      	bcc.n	1004044c <__divsi3+0xf8>
10040362:	0903      	lsrs	r3, r0, #4
10040364:	428b      	cmp	r3, r1
10040366:	d35f      	bcc.n	10040428 <__divsi3+0xd4>
10040368:	0a03      	lsrs	r3, r0, #8
1004036a:	428b      	cmp	r3, r1
1004036c:	d344      	bcc.n	100403f8 <__divsi3+0xa4>
1004036e:	0b03      	lsrs	r3, r0, #12
10040370:	428b      	cmp	r3, r1
10040372:	d328      	bcc.n	100403c6 <__divsi3+0x72>
10040374:	0c03      	lsrs	r3, r0, #16
10040376:	428b      	cmp	r3, r1
10040378:	d30d      	bcc.n	10040396 <__divsi3+0x42>
1004037a:	22ff      	movs	r2, #255	@ 0xff
1004037c:	0209      	lsls	r1, r1, #8
1004037e:	ba12      	rev	r2, r2
10040380:	0c03      	lsrs	r3, r0, #16
10040382:	428b      	cmp	r3, r1
10040384:	d302      	bcc.n	1004038c <__divsi3+0x38>
10040386:	1212      	asrs	r2, r2, #8
10040388:	0209      	lsls	r1, r1, #8
1004038a:	d065      	beq.n	10040458 <__divsi3+0x104>
1004038c:	0b03      	lsrs	r3, r0, #12
1004038e:	428b      	cmp	r3, r1
10040390:	d319      	bcc.n	100403c6 <__divsi3+0x72>
10040392:	e000      	b.n	10040396 <__divsi3+0x42>
10040394:	0a09      	lsrs	r1, r1, #8
10040396:	0bc3      	lsrs	r3, r0, #15
10040398:	428b      	cmp	r3, r1
1004039a:	d301      	bcc.n	100403a0 <__divsi3+0x4c>
1004039c:	03cb      	lsls	r3, r1, #15
1004039e:	1ac0      	subs	r0, r0, r3
100403a0:	4152      	adcs	r2, r2
100403a2:	0b83      	lsrs	r3, r0, #14
100403a4:	428b      	cmp	r3, r1
100403a6:	d301      	bcc.n	100403ac <__divsi3+0x58>
100403a8:	038b      	lsls	r3, r1, #14
100403aa:	1ac0      	subs	r0, r0, r3
100403ac:	4152      	adcs	r2, r2
100403ae:	0b43      	lsrs	r3, r0, #13
100403b0:	428b      	cmp	r3, r1
100403b2:	d301      	bcc.n	100403b8 <__divsi3+0x64>
100403b4:	034b      	lsls	r3, r1, #13
100403b6:	1ac0      	subs	r0, r0, r3
100403b8:	4152      	adcs	r2, r2
100403ba:	0b03      	lsrs	r3, r0, #12
100403bc:	428b      	cmp	r3, r1
100403be:	d301      	bcc.n	100403c4 <__divsi3+0x70>
100403c0:	030b      	lsls	r3, r1, #12
100403c2:	1ac0      	subs	r0, r0, r3
100403c4:	4152      	adcs	r2, r2
100403c6:	0ac3      	lsrs	r3, r0, #11
100403c8:	428b      	cmp	r3, r1
100403ca:	d301      	bcc.n	100403d0 <__divsi3+0x7c>
100403cc:	02cb      	lsls	r3, r1, #11
100403ce:	1ac0      	subs	r0, r0, r3
100403d0:	4152      	adcs	r2, r2
100403d2:	0a83      	lsrs	r3, r0, #10
100403d4:	428b      	cmp	r3, r1
100403d6:	d301      	bcc.n	100403dc <__divsi3+0x88>
100403d8:	028b      	lsls	r3, r1, #10
100403da:	1ac0      	subs	r0, r0, r3
100403dc:	4152      	adcs	r2, r2
100403de:	0a43      	lsrs	r3, r0, #9
100403e0:	428b      	cmp	r3, r1
100403e2:	d301      	bcc.n	100403e8 <__divsi3+0x94>
100403e4:	024b      	lsls	r3, r1, #9
100403e6:	1ac0      	subs	r0, r0, r3
100403e8:	4152      	adcs	r2, r2
100403ea:	0a03      	lsrs	r3, r0, #8
100403ec:	428b      	cmp	r3, r1
100403ee:	d301      	bcc.n	100403f4 <__divsi3+0xa0>
100403f0:	020b      	lsls	r3, r1, #8
100403f2:	1ac0      	subs	r0, r0, r3
100403f4:	4152      	adcs	r2, r2
100403f6:	d2cd      	bcs.n	10040394 <__divsi3+0x40>
100403f8:	09c3      	lsrs	r3, r0, #7
100403fa:	428b      	cmp	r3, r1
100403fc:	d301      	bcc.n	10040402 <__divsi3+0xae>
100403fe:	01cb      	lsls	r3, r1, #7
10040400:	1ac0      	subs	r0, r0, r3
10040402:	4152      	adcs	r2, r2
10040404:	0983      	lsrs	r3, r0, #6
10040406:	428b      	cmp	r3, r1
10040408:	d301      	bcc.n	1004040e <__divsi3+0xba>
1004040a:	018b      	lsls	r3, r1, #6
1004040c:	1ac0      	subs	r0, r0, r3
1004040e:	4152      	adcs	r2, r2
10040410:	0943      	lsrs	r3, r0, #5
10040412:	428b      	cmp	r3, r1
10040414:	d301      	bcc.n	1004041a <__divsi3+0xc6>
10040416:	014b      	lsls	r3, r1, #5
10040418:	1ac0      	subs	r0, r0, r3
1004041a:	4152      	adcs	r2, r2
1004041c:	0903      	lsrs	r3, r0, #4
1004041e:	428b      	cmp	r3, r1
10040420:	d301      	bcc.n	10040426 <__divsi3+0xd2>
10040422:	010b      	lsls	r3, r1, #4
10040424:	1ac0      	subs	r0, r0, r3
10040426:	4152      	adcs	r2, r2
10040428:	08c3      	lsrs	r3, r0, #3
1004042a:	428b      	cmp	r3, r1
1004042c:	d301      	bcc.n	10040432 <__divsi3+0xde>
1004042e:	00cb      	lsls	r3, r1, #3
10040430:	1ac0      	subs	r0, r0, r3
10040432:	4152      	adcs	r2, r2
10040434:	0883      	lsrs	r3, r0, #2
10040436:	428b      	cmp	r3, r1
10040438:	d301      	bcc.n	1004043e <__divsi3+0xea>
1004043a:	008b      	lsls	r3, r1, #2
1004043c:	1ac0      	subs	r0, r0, r3
1004043e:	4152      	adcs	r2, r2
10040440:	0843      	lsrs	r3, r0, #1
10040442:	428b      	cmp	r3, r1
10040444:	d301      	bcc.n	1004044a <__divsi3+0xf6>
10040446:	004b      	lsls	r3, r1, #1
10040448:	1ac0      	subs	r0, r0, r3
1004044a:	4152      	adcs	r2, r2
1004044c:	1a41      	subs	r1, r0, r1
1004044e:	d200      	bcs.n	10040452 <__divsi3+0xfe>
10040450:	4601      	mov	r1, r0
10040452:	4152      	adcs	r2, r2
10040454:	4610      	mov	r0, r2
10040456:	4770      	bx	lr
10040458:	e05d      	b.n	10040516 <__divsi3+0x1c2>
1004045a:	0fca      	lsrs	r2, r1, #31
1004045c:	d000      	beq.n	10040460 <__divsi3+0x10c>
1004045e:	4249      	negs	r1, r1
10040460:	1003      	asrs	r3, r0, #32
10040462:	d300      	bcc.n	10040466 <__divsi3+0x112>
10040464:	4240      	negs	r0, r0
10040466:	4053      	eors	r3, r2
10040468:	2200      	movs	r2, #0
1004046a:	469c      	mov	ip, r3
1004046c:	0903      	lsrs	r3, r0, #4
1004046e:	428b      	cmp	r3, r1
10040470:	d32d      	bcc.n	100404ce <__divsi3+0x17a>
10040472:	0a03      	lsrs	r3, r0, #8
10040474:	428b      	cmp	r3, r1
10040476:	d312      	bcc.n	1004049e <__divsi3+0x14a>
10040478:	22fc      	movs	r2, #252	@ 0xfc
1004047a:	0189      	lsls	r1, r1, #6
1004047c:	ba12      	rev	r2, r2
1004047e:	0a03      	lsrs	r3, r0, #8
10040480:	428b      	cmp	r3, r1
10040482:	d30c      	bcc.n	1004049e <__divsi3+0x14a>
10040484:	0189      	lsls	r1, r1, #6
10040486:	1192      	asrs	r2, r2, #6
10040488:	428b      	cmp	r3, r1
1004048a:	d308      	bcc.n	1004049e <__divsi3+0x14a>
1004048c:	0189      	lsls	r1, r1, #6
1004048e:	1192      	asrs	r2, r2, #6
10040490:	428b      	cmp	r3, r1
10040492:	d304      	bcc.n	1004049e <__divsi3+0x14a>
10040494:	0189      	lsls	r1, r1, #6
10040496:	d03a      	beq.n	1004050e <__divsi3+0x1ba>
10040498:	1192      	asrs	r2, r2, #6
1004049a:	e000      	b.n	1004049e <__divsi3+0x14a>
1004049c:	0989      	lsrs	r1, r1, #6
1004049e:	09c3      	lsrs	r3, r0, #7
100404a0:	428b      	cmp	r3, r1
100404a2:	d301      	bcc.n	100404a8 <__divsi3+0x154>
100404a4:	01cb      	lsls	r3, r1, #7
100404a6:	1ac0      	subs	r0, r0, r3
100404a8:	4152      	adcs	r2, r2
100404aa:	0983      	lsrs	r3, r0, #6
100404ac:	428b      	cmp	r3, r1
100404ae:	d301      	bcc.n	100404b4 <__divsi3+0x160>
100404b0:	018b      	lsls	r3, r1, #6
100404b2:	1ac0      	subs	r0, r0, r3
100404b4:	4152      	adcs	r2, r2
100404b6:	0943      	lsrs	r3, r0, #5
100404b8:	428b      	cmp	r3, r1
100404ba:	d301      	bcc.n	100404c0 <__divsi3+0x16c>
100404bc:	014b      	lsls	r3, r1, #5
100404be:	1ac0      	subs	r0, r0, r3
100404c0:	4152      	adcs	r2, r2
100404c2:	0903      	lsrs	r3, r0, #4
100404c4:	428b      	cmp	r3, r1
100404c6:	d301      	bcc.n	100404cc <__divsi3+0x178>
100404c8:	010b      	lsls	r3, r1, #4
100404ca:	1ac0      	subs	r0, r0, r3
100404cc:	4152      	adcs	r2, r2
100404ce:	08c3      	lsrs	r3, r0, #3
100404d0:	428b      	cmp	r3, r1
100404d2:	d301      	bcc.n	100404d8 <__divsi3+0x184>
100404d4:	00cb      	lsls	r3, r1, #3
100404d6:	1ac0      	subs	r0, r0, r3
100404d8:	4152      	adcs	r2, r2
100404da:	0883      	lsrs	r3, r0, #2
100404dc:	428b      	cmp	r3, r1
100404de:	d301      	bcc.n	100404e4 <__divsi3+0x190>
100404e0:	008b      	lsls	r3, r1, #2
100404e2:	1ac0      	subs	r0, r0, r3
100404e4:	4152      	adcs	r2, r2
100404e6:	d2d9      	bcs.n	1004049c <__divsi3+0x148>
100404e8:	0843      	lsrs	r3, r0, #1
100404ea:	428b      	cmp	r3, r1
100404ec:	d301      	bcc.n	100404f2 <__divsi3+0x19e>
100404ee:	004b      	lsls	r3, r1, #1
100404f0:	1ac0      	subs	r0, r0, r3
100404f2:	4152      	adcs	r2, r2
100404f4:	1a41      	subs	r1, r0, r1
100404f6:	d200      	bcs.n	100404fa <__divsi3+0x1a6>
100404f8:	4601      	mov	r1, r0
100404fa:	4663      	mov	r3, ip
100404fc:	4152      	adcs	r2, r2
100404fe:	105b      	asrs	r3, r3, #1
10040500:	4610      	mov	r0, r2
10040502:	d301      	bcc.n	10040508 <__divsi3+0x1b4>
10040504:	4240      	negs	r0, r0
10040506:	2b00      	cmp	r3, #0
10040508:	d500      	bpl.n	1004050c <__divsi3+0x1b8>
1004050a:	4249      	negs	r1, r1
1004050c:	4770      	bx	lr
1004050e:	4663      	mov	r3, ip
10040510:	105b      	asrs	r3, r3, #1
10040512:	d300      	bcc.n	10040516 <__divsi3+0x1c2>
10040514:	4240      	negs	r0, r0
10040516:	b501      	push	{r0, lr}
10040518:	2000      	movs	r0, #0
1004051a:	f000 f805 	bl	10040528 <__aeabi_idiv0>
1004051e:	bd02      	pop	{r1, pc}

10040520 <__aeabi_idivmod>:
10040520:	2900      	cmp	r1, #0
10040522:	d0f8      	beq.n	10040516 <__divsi3+0x1c2>
10040524:	e716      	b.n	10040354 <__divsi3>
10040526:	4770      	bx	lr

10040528 <__aeabi_idiv0>:
10040528:	4770      	bx	lr
1004052a:	46c0      	nop			@ (mov r8, r8)

1004052c <__aeabi_llsl>:
1004052c:	4091      	lsls	r1, r2
1004052e:	0003      	movs	r3, r0
10040530:	4090      	lsls	r0, r2
10040532:	469c      	mov	ip, r3
10040534:	3a20      	subs	r2, #32
10040536:	4093      	lsls	r3, r2
10040538:	4319      	orrs	r1, r3
1004053a:	4252      	negs	r2, r2
1004053c:	4663      	mov	r3, ip
1004053e:	40d3      	lsrs	r3, r2
10040540:	4319      	orrs	r1, r3
10040542:	4770      	bx	lr

10040544 <__aeabi_cdrcmple>:
10040544:	4684      	mov	ip, r0
10040546:	0010      	movs	r0, r2
10040548:	4662      	mov	r2, ip
1004054a:	468c      	mov	ip, r1
1004054c:	0019      	movs	r1, r3
1004054e:	4663      	mov	r3, ip
10040550:	e000      	b.n	10040554 <__aeabi_cdcmpeq>
10040552:	46c0      	nop			@ (mov r8, r8)

10040554 <__aeabi_cdcmpeq>:
10040554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10040556:	f001 f8fd 	bl	10041754 <__ledf2>
1004055a:	2800      	cmp	r0, #0
1004055c:	d401      	bmi.n	10040562 <__aeabi_cdcmpeq+0xe>
1004055e:	2100      	movs	r1, #0
10040560:	42c8      	cmn	r0, r1
10040562:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10040564 <__aeabi_dcmpeq>:
10040564:	b510      	push	{r4, lr}
10040566:	f001 f841 	bl	100415ec <__eqdf2>
1004056a:	4240      	negs	r0, r0
1004056c:	3001      	adds	r0, #1
1004056e:	bd10      	pop	{r4, pc}

10040570 <__aeabi_dcmplt>:
10040570:	b510      	push	{r4, lr}
10040572:	f001 f8ef 	bl	10041754 <__ledf2>
10040576:	2800      	cmp	r0, #0
10040578:	db01      	blt.n	1004057e <__aeabi_dcmplt+0xe>
1004057a:	2000      	movs	r0, #0
1004057c:	bd10      	pop	{r4, pc}
1004057e:	2001      	movs	r0, #1
10040580:	bd10      	pop	{r4, pc}
10040582:	46c0      	nop			@ (mov r8, r8)

10040584 <__aeabi_dcmple>:
10040584:	b510      	push	{r4, lr}
10040586:	f001 f8e5 	bl	10041754 <__ledf2>
1004058a:	2800      	cmp	r0, #0
1004058c:	dd01      	ble.n	10040592 <__aeabi_dcmple+0xe>
1004058e:	2000      	movs	r0, #0
10040590:	bd10      	pop	{r4, pc}
10040592:	2001      	movs	r0, #1
10040594:	bd10      	pop	{r4, pc}
10040596:	46c0      	nop			@ (mov r8, r8)

10040598 <__aeabi_dcmpgt>:
10040598:	b510      	push	{r4, lr}
1004059a:	f001 f86b 	bl	10041674 <__gedf2>
1004059e:	2800      	cmp	r0, #0
100405a0:	dc01      	bgt.n	100405a6 <__aeabi_dcmpgt+0xe>
100405a2:	2000      	movs	r0, #0
100405a4:	bd10      	pop	{r4, pc}
100405a6:	2001      	movs	r0, #1
100405a8:	bd10      	pop	{r4, pc}
100405aa:	46c0      	nop			@ (mov r8, r8)

100405ac <__aeabi_dcmpge>:
100405ac:	b510      	push	{r4, lr}
100405ae:	f001 f861 	bl	10041674 <__gedf2>
100405b2:	2800      	cmp	r0, #0
100405b4:	da01      	bge.n	100405ba <__aeabi_dcmpge+0xe>
100405b6:	2000      	movs	r0, #0
100405b8:	bd10      	pop	{r4, pc}
100405ba:	2001      	movs	r0, #1
100405bc:	bd10      	pop	{r4, pc}
100405be:	46c0      	nop			@ (mov r8, r8)

100405c0 <__clzsi2>:
100405c0:	211c      	movs	r1, #28
100405c2:	2301      	movs	r3, #1
100405c4:	041b      	lsls	r3, r3, #16
100405c6:	4298      	cmp	r0, r3
100405c8:	d301      	bcc.n	100405ce <__clzsi2+0xe>
100405ca:	0c00      	lsrs	r0, r0, #16
100405cc:	3910      	subs	r1, #16
100405ce:	0a1b      	lsrs	r3, r3, #8
100405d0:	4298      	cmp	r0, r3
100405d2:	d301      	bcc.n	100405d8 <__clzsi2+0x18>
100405d4:	0a00      	lsrs	r0, r0, #8
100405d6:	3908      	subs	r1, #8
100405d8:	091b      	lsrs	r3, r3, #4
100405da:	4298      	cmp	r0, r3
100405dc:	d301      	bcc.n	100405e2 <__clzsi2+0x22>
100405de:	0900      	lsrs	r0, r0, #4
100405e0:	3904      	subs	r1, #4
100405e2:	a202      	add	r2, pc, #8	@ (adr r2, 100405ec <__clzsi2+0x2c>)
100405e4:	5c10      	ldrb	r0, [r2, r0]
100405e6:	1840      	adds	r0, r0, r1
100405e8:	4770      	bx	lr
100405ea:	46c0      	nop			@ (mov r8, r8)
100405ec:	02020304 	.word	0x02020304
100405f0:	01010101 	.word	0x01010101
	...

100405fc <__aeabi_uldivmod>:
100405fc:	2b00      	cmp	r3, #0
100405fe:	d111      	bne.n	10040624 <__aeabi_uldivmod+0x28>
10040600:	2a00      	cmp	r2, #0
10040602:	d10f      	bne.n	10040624 <__aeabi_uldivmod+0x28>
10040604:	2900      	cmp	r1, #0
10040606:	d100      	bne.n	1004060a <__aeabi_uldivmod+0xe>
10040608:	2800      	cmp	r0, #0
1004060a:	d002      	beq.n	10040612 <__aeabi_uldivmod+0x16>
1004060c:	2100      	movs	r1, #0
1004060e:	43c9      	mvns	r1, r1
10040610:	0008      	movs	r0, r1
10040612:	b407      	push	{r0, r1, r2}
10040614:	4802      	ldr	r0, [pc, #8]	@ (10040620 <__aeabi_uldivmod+0x24>)
10040616:	a102      	add	r1, pc, #8	@ (adr r1, 10040620 <__aeabi_uldivmod+0x24>)
10040618:	1840      	adds	r0, r0, r1
1004061a:	9002      	str	r0, [sp, #8]
1004061c:	bd03      	pop	{r0, r1, pc}
1004061e:	46c0      	nop			@ (mov r8, r8)
10040620:	ffffff09 	.word	0xffffff09
10040624:	b403      	push	{r0, r1}
10040626:	4668      	mov	r0, sp
10040628:	b501      	push	{r0, lr}
1004062a:	9802      	ldr	r0, [sp, #8]
1004062c:	f000 f834 	bl	10040698 <__udivmoddi4>
10040630:	9b01      	ldr	r3, [sp, #4]
10040632:	469e      	mov	lr, r3
10040634:	b002      	add	sp, #8
10040636:	bc0c      	pop	{r2, r3}
10040638:	4770      	bx	lr
1004063a:	46c0      	nop			@ (mov r8, r8)

1004063c <__aeabi_lmul>:
1004063c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004063e:	46ce      	mov	lr, r9
10040640:	4699      	mov	r9, r3
10040642:	0c03      	lsrs	r3, r0, #16
10040644:	469c      	mov	ip, r3
10040646:	0413      	lsls	r3, r2, #16
10040648:	4647      	mov	r7, r8
1004064a:	0c1b      	lsrs	r3, r3, #16
1004064c:	001d      	movs	r5, r3
1004064e:	000e      	movs	r6, r1
10040650:	4661      	mov	r1, ip
10040652:	0404      	lsls	r4, r0, #16
10040654:	0c24      	lsrs	r4, r4, #16
10040656:	b580      	push	{r7, lr}
10040658:	0007      	movs	r7, r0
1004065a:	0c10      	lsrs	r0, r2, #16
1004065c:	434b      	muls	r3, r1
1004065e:	4365      	muls	r5, r4
10040660:	4341      	muls	r1, r0
10040662:	4360      	muls	r0, r4
10040664:	0c2c      	lsrs	r4, r5, #16
10040666:	18c0      	adds	r0, r0, r3
10040668:	1824      	adds	r4, r4, r0
1004066a:	468c      	mov	ip, r1
1004066c:	42a3      	cmp	r3, r4
1004066e:	d903      	bls.n	10040678 <__aeabi_lmul+0x3c>
10040670:	2380      	movs	r3, #128	@ 0x80
10040672:	025b      	lsls	r3, r3, #9
10040674:	4698      	mov	r8, r3
10040676:	44c4      	add	ip, r8
10040678:	4649      	mov	r1, r9
1004067a:	4379      	muls	r1, r7
1004067c:	4356      	muls	r6, r2
1004067e:	0c23      	lsrs	r3, r4, #16
10040680:	042d      	lsls	r5, r5, #16
10040682:	0c2d      	lsrs	r5, r5, #16
10040684:	1989      	adds	r1, r1, r6
10040686:	4463      	add	r3, ip
10040688:	0424      	lsls	r4, r4, #16
1004068a:	1960      	adds	r0, r4, r5
1004068c:	18c9      	adds	r1, r1, r3
1004068e:	bcc0      	pop	{r6, r7}
10040690:	46b9      	mov	r9, r7
10040692:	46b0      	mov	r8, r6
10040694:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040696:	46c0      	nop			@ (mov r8, r8)

10040698 <__udivmoddi4>:
10040698:	b5f0      	push	{r4, r5, r6, r7, lr}
1004069a:	4657      	mov	r7, sl
1004069c:	464e      	mov	r6, r9
1004069e:	4645      	mov	r5, r8
100406a0:	46de      	mov	lr, fp
100406a2:	b5e0      	push	{r5, r6, r7, lr}
100406a4:	0004      	movs	r4, r0
100406a6:	000d      	movs	r5, r1
100406a8:	4692      	mov	sl, r2
100406aa:	4699      	mov	r9, r3
100406ac:	b083      	sub	sp, #12
100406ae:	428b      	cmp	r3, r1
100406b0:	d830      	bhi.n	10040714 <__udivmoddi4+0x7c>
100406b2:	d02d      	beq.n	10040710 <__udivmoddi4+0x78>
100406b4:	4649      	mov	r1, r9
100406b6:	4650      	mov	r0, sl
100406b8:	f001 fbf2 	bl	10041ea0 <__clzdi2>
100406bc:	0029      	movs	r1, r5
100406be:	0006      	movs	r6, r0
100406c0:	0020      	movs	r0, r4
100406c2:	f001 fbed 	bl	10041ea0 <__clzdi2>
100406c6:	1a33      	subs	r3, r6, r0
100406c8:	4698      	mov	r8, r3
100406ca:	3b20      	subs	r3, #32
100406cc:	d434      	bmi.n	10040738 <__udivmoddi4+0xa0>
100406ce:	469b      	mov	fp, r3
100406d0:	4653      	mov	r3, sl
100406d2:	465a      	mov	r2, fp
100406d4:	4093      	lsls	r3, r2
100406d6:	4642      	mov	r2, r8
100406d8:	001f      	movs	r7, r3
100406da:	4653      	mov	r3, sl
100406dc:	4093      	lsls	r3, r2
100406de:	001e      	movs	r6, r3
100406e0:	42af      	cmp	r7, r5
100406e2:	d83b      	bhi.n	1004075c <__udivmoddi4+0xc4>
100406e4:	42af      	cmp	r7, r5
100406e6:	d100      	bne.n	100406ea <__udivmoddi4+0x52>
100406e8:	e079      	b.n	100407de <__udivmoddi4+0x146>
100406ea:	465b      	mov	r3, fp
100406ec:	1ba4      	subs	r4, r4, r6
100406ee:	41bd      	sbcs	r5, r7
100406f0:	2b00      	cmp	r3, #0
100406f2:	da00      	bge.n	100406f6 <__udivmoddi4+0x5e>
100406f4:	e076      	b.n	100407e4 <__udivmoddi4+0x14c>
100406f6:	2200      	movs	r2, #0
100406f8:	2300      	movs	r3, #0
100406fa:	9200      	str	r2, [sp, #0]
100406fc:	9301      	str	r3, [sp, #4]
100406fe:	2301      	movs	r3, #1
10040700:	465a      	mov	r2, fp
10040702:	4093      	lsls	r3, r2
10040704:	9301      	str	r3, [sp, #4]
10040706:	2301      	movs	r3, #1
10040708:	4642      	mov	r2, r8
1004070a:	4093      	lsls	r3, r2
1004070c:	9300      	str	r3, [sp, #0]
1004070e:	e029      	b.n	10040764 <__udivmoddi4+0xcc>
10040710:	4282      	cmp	r2, r0
10040712:	d9cf      	bls.n	100406b4 <__udivmoddi4+0x1c>
10040714:	2200      	movs	r2, #0
10040716:	2300      	movs	r3, #0
10040718:	9200      	str	r2, [sp, #0]
1004071a:	9301      	str	r3, [sp, #4]
1004071c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1004071e:	2b00      	cmp	r3, #0
10040720:	d001      	beq.n	10040726 <__udivmoddi4+0x8e>
10040722:	601c      	str	r4, [r3, #0]
10040724:	605d      	str	r5, [r3, #4]
10040726:	9800      	ldr	r0, [sp, #0]
10040728:	9901      	ldr	r1, [sp, #4]
1004072a:	b003      	add	sp, #12
1004072c:	bcf0      	pop	{r4, r5, r6, r7}
1004072e:	46bb      	mov	fp, r7
10040730:	46b2      	mov	sl, r6
10040732:	46a9      	mov	r9, r5
10040734:	46a0      	mov	r8, r4
10040736:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040738:	4642      	mov	r2, r8
1004073a:	469b      	mov	fp, r3
1004073c:	2320      	movs	r3, #32
1004073e:	1a9b      	subs	r3, r3, r2
10040740:	4652      	mov	r2, sl
10040742:	40da      	lsrs	r2, r3
10040744:	4641      	mov	r1, r8
10040746:	0013      	movs	r3, r2
10040748:	464a      	mov	r2, r9
1004074a:	408a      	lsls	r2, r1
1004074c:	0017      	movs	r7, r2
1004074e:	4642      	mov	r2, r8
10040750:	431f      	orrs	r7, r3
10040752:	4653      	mov	r3, sl
10040754:	4093      	lsls	r3, r2
10040756:	001e      	movs	r6, r3
10040758:	42af      	cmp	r7, r5
1004075a:	d9c3      	bls.n	100406e4 <__udivmoddi4+0x4c>
1004075c:	2200      	movs	r2, #0
1004075e:	2300      	movs	r3, #0
10040760:	9200      	str	r2, [sp, #0]
10040762:	9301      	str	r3, [sp, #4]
10040764:	4643      	mov	r3, r8
10040766:	2b00      	cmp	r3, #0
10040768:	d0d8      	beq.n	1004071c <__udivmoddi4+0x84>
1004076a:	07fb      	lsls	r3, r7, #31
1004076c:	0872      	lsrs	r2, r6, #1
1004076e:	431a      	orrs	r2, r3
10040770:	4646      	mov	r6, r8
10040772:	087b      	lsrs	r3, r7, #1
10040774:	e00e      	b.n	10040794 <__udivmoddi4+0xfc>
10040776:	42ab      	cmp	r3, r5
10040778:	d101      	bne.n	1004077e <__udivmoddi4+0xe6>
1004077a:	42a2      	cmp	r2, r4
1004077c:	d80c      	bhi.n	10040798 <__udivmoddi4+0x100>
1004077e:	1aa4      	subs	r4, r4, r2
10040780:	419d      	sbcs	r5, r3
10040782:	2001      	movs	r0, #1
10040784:	1924      	adds	r4, r4, r4
10040786:	416d      	adcs	r5, r5
10040788:	2100      	movs	r1, #0
1004078a:	3e01      	subs	r6, #1
1004078c:	1824      	adds	r4, r4, r0
1004078e:	414d      	adcs	r5, r1
10040790:	2e00      	cmp	r6, #0
10040792:	d006      	beq.n	100407a2 <__udivmoddi4+0x10a>
10040794:	42ab      	cmp	r3, r5
10040796:	d9ee      	bls.n	10040776 <__udivmoddi4+0xde>
10040798:	3e01      	subs	r6, #1
1004079a:	1924      	adds	r4, r4, r4
1004079c:	416d      	adcs	r5, r5
1004079e:	2e00      	cmp	r6, #0
100407a0:	d1f8      	bne.n	10040794 <__udivmoddi4+0xfc>
100407a2:	9800      	ldr	r0, [sp, #0]
100407a4:	9901      	ldr	r1, [sp, #4]
100407a6:	465b      	mov	r3, fp
100407a8:	1900      	adds	r0, r0, r4
100407aa:	4169      	adcs	r1, r5
100407ac:	2b00      	cmp	r3, #0
100407ae:	db24      	blt.n	100407fa <__udivmoddi4+0x162>
100407b0:	002b      	movs	r3, r5
100407b2:	465a      	mov	r2, fp
100407b4:	4644      	mov	r4, r8
100407b6:	40d3      	lsrs	r3, r2
100407b8:	002a      	movs	r2, r5
100407ba:	40e2      	lsrs	r2, r4
100407bc:	001c      	movs	r4, r3
100407be:	465b      	mov	r3, fp
100407c0:	0015      	movs	r5, r2
100407c2:	2b00      	cmp	r3, #0
100407c4:	db2a      	blt.n	1004081c <__udivmoddi4+0x184>
100407c6:	0026      	movs	r6, r4
100407c8:	409e      	lsls	r6, r3
100407ca:	0033      	movs	r3, r6
100407cc:	0026      	movs	r6, r4
100407ce:	4647      	mov	r7, r8
100407d0:	40be      	lsls	r6, r7
100407d2:	0032      	movs	r2, r6
100407d4:	1a80      	subs	r0, r0, r2
100407d6:	4199      	sbcs	r1, r3
100407d8:	9000      	str	r0, [sp, #0]
100407da:	9101      	str	r1, [sp, #4]
100407dc:	e79e      	b.n	1004071c <__udivmoddi4+0x84>
100407de:	42a3      	cmp	r3, r4
100407e0:	d8bc      	bhi.n	1004075c <__udivmoddi4+0xc4>
100407e2:	e782      	b.n	100406ea <__udivmoddi4+0x52>
100407e4:	4642      	mov	r2, r8
100407e6:	2320      	movs	r3, #32
100407e8:	2100      	movs	r1, #0
100407ea:	1a9b      	subs	r3, r3, r2
100407ec:	2200      	movs	r2, #0
100407ee:	9100      	str	r1, [sp, #0]
100407f0:	9201      	str	r2, [sp, #4]
100407f2:	2201      	movs	r2, #1
100407f4:	40da      	lsrs	r2, r3
100407f6:	9201      	str	r2, [sp, #4]
100407f8:	e785      	b.n	10040706 <__udivmoddi4+0x6e>
100407fa:	4642      	mov	r2, r8
100407fc:	2320      	movs	r3, #32
100407fe:	1a9b      	subs	r3, r3, r2
10040800:	002a      	movs	r2, r5
10040802:	4646      	mov	r6, r8
10040804:	409a      	lsls	r2, r3
10040806:	0023      	movs	r3, r4
10040808:	40f3      	lsrs	r3, r6
1004080a:	4644      	mov	r4, r8
1004080c:	4313      	orrs	r3, r2
1004080e:	002a      	movs	r2, r5
10040810:	40e2      	lsrs	r2, r4
10040812:	001c      	movs	r4, r3
10040814:	465b      	mov	r3, fp
10040816:	0015      	movs	r5, r2
10040818:	2b00      	cmp	r3, #0
1004081a:	dad4      	bge.n	100407c6 <__udivmoddi4+0x12e>
1004081c:	4642      	mov	r2, r8
1004081e:	002f      	movs	r7, r5
10040820:	2320      	movs	r3, #32
10040822:	0026      	movs	r6, r4
10040824:	4097      	lsls	r7, r2
10040826:	1a9b      	subs	r3, r3, r2
10040828:	40de      	lsrs	r6, r3
1004082a:	003b      	movs	r3, r7
1004082c:	4333      	orrs	r3, r6
1004082e:	e7cd      	b.n	100407cc <__udivmoddi4+0x134>

10040830 <__aeabi_dadd>:
10040830:	b5f0      	push	{r4, r5, r6, r7, lr}
10040832:	464f      	mov	r7, r9
10040834:	4646      	mov	r6, r8
10040836:	46d6      	mov	lr, sl
10040838:	b5c0      	push	{r6, r7, lr}
1004083a:	b082      	sub	sp, #8
1004083c:	9000      	str	r0, [sp, #0]
1004083e:	9101      	str	r1, [sp, #4]
10040840:	030e      	lsls	r6, r1, #12
10040842:	004c      	lsls	r4, r1, #1
10040844:	0fcd      	lsrs	r5, r1, #31
10040846:	0a71      	lsrs	r1, r6, #9
10040848:	9e00      	ldr	r6, [sp, #0]
1004084a:	005f      	lsls	r7, r3, #1
1004084c:	0f76      	lsrs	r6, r6, #29
1004084e:	430e      	orrs	r6, r1
10040850:	9900      	ldr	r1, [sp, #0]
10040852:	9200      	str	r2, [sp, #0]
10040854:	9301      	str	r3, [sp, #4]
10040856:	00c9      	lsls	r1, r1, #3
10040858:	4689      	mov	r9, r1
1004085a:	0319      	lsls	r1, r3, #12
1004085c:	0d7b      	lsrs	r3, r7, #21
1004085e:	4698      	mov	r8, r3
10040860:	9b01      	ldr	r3, [sp, #4]
10040862:	0a49      	lsrs	r1, r1, #9
10040864:	0fdb      	lsrs	r3, r3, #31
10040866:	469c      	mov	ip, r3
10040868:	9b00      	ldr	r3, [sp, #0]
1004086a:	9a00      	ldr	r2, [sp, #0]
1004086c:	0f5b      	lsrs	r3, r3, #29
1004086e:	430b      	orrs	r3, r1
10040870:	4641      	mov	r1, r8
10040872:	0d64      	lsrs	r4, r4, #21
10040874:	00d2      	lsls	r2, r2, #3
10040876:	1a61      	subs	r1, r4, r1
10040878:	4565      	cmp	r5, ip
1004087a:	d100      	bne.n	1004087e <__aeabi_dadd+0x4e>
1004087c:	e0a6      	b.n	100409cc <__aeabi_dadd+0x19c>
1004087e:	2900      	cmp	r1, #0
10040880:	dd72      	ble.n	10040968 <__aeabi_dadd+0x138>
10040882:	4647      	mov	r7, r8
10040884:	2f00      	cmp	r7, #0
10040886:	d100      	bne.n	1004088a <__aeabi_dadd+0x5a>
10040888:	e0dd      	b.n	10040a46 <__aeabi_dadd+0x216>
1004088a:	4fcc      	ldr	r7, [pc, #816]	@ (10040bbc <__aeabi_dadd+0x38c>)
1004088c:	42bc      	cmp	r4, r7
1004088e:	d100      	bne.n	10040892 <__aeabi_dadd+0x62>
10040890:	e19a      	b.n	10040bc8 <__aeabi_dadd+0x398>
10040892:	2701      	movs	r7, #1
10040894:	2938      	cmp	r1, #56	@ 0x38
10040896:	dc17      	bgt.n	100408c8 <__aeabi_dadd+0x98>
10040898:	2780      	movs	r7, #128	@ 0x80
1004089a:	043f      	lsls	r7, r7, #16
1004089c:	433b      	orrs	r3, r7
1004089e:	291f      	cmp	r1, #31
100408a0:	dd00      	ble.n	100408a4 <__aeabi_dadd+0x74>
100408a2:	e1dd      	b.n	10040c60 <__aeabi_dadd+0x430>
100408a4:	2720      	movs	r7, #32
100408a6:	1a78      	subs	r0, r7, r1
100408a8:	001f      	movs	r7, r3
100408aa:	4087      	lsls	r7, r0
100408ac:	46ba      	mov	sl, r7
100408ae:	0017      	movs	r7, r2
100408b0:	40cf      	lsrs	r7, r1
100408b2:	4684      	mov	ip, r0
100408b4:	0038      	movs	r0, r7
100408b6:	4657      	mov	r7, sl
100408b8:	4307      	orrs	r7, r0
100408ba:	4660      	mov	r0, ip
100408bc:	4082      	lsls	r2, r0
100408be:	40cb      	lsrs	r3, r1
100408c0:	1e50      	subs	r0, r2, #1
100408c2:	4182      	sbcs	r2, r0
100408c4:	1af6      	subs	r6, r6, r3
100408c6:	4317      	orrs	r7, r2
100408c8:	464b      	mov	r3, r9
100408ca:	1bdf      	subs	r7, r3, r7
100408cc:	45b9      	cmp	r9, r7
100408ce:	4180      	sbcs	r0, r0
100408d0:	4240      	negs	r0, r0
100408d2:	1a36      	subs	r6, r6, r0
100408d4:	0233      	lsls	r3, r6, #8
100408d6:	d400      	bmi.n	100408da <__aeabi_dadd+0xaa>
100408d8:	e0ff      	b.n	10040ada <__aeabi_dadd+0x2aa>
100408da:	0276      	lsls	r6, r6, #9
100408dc:	0a76      	lsrs	r6, r6, #9
100408de:	2e00      	cmp	r6, #0
100408e0:	d100      	bne.n	100408e4 <__aeabi_dadd+0xb4>
100408e2:	e13c      	b.n	10040b5e <__aeabi_dadd+0x32e>
100408e4:	0030      	movs	r0, r6
100408e6:	f7ff fe6b 	bl	100405c0 <__clzsi2>
100408ea:	0003      	movs	r3, r0
100408ec:	3b08      	subs	r3, #8
100408ee:	2120      	movs	r1, #32
100408f0:	0038      	movs	r0, r7
100408f2:	1aca      	subs	r2, r1, r3
100408f4:	40d0      	lsrs	r0, r2
100408f6:	409e      	lsls	r6, r3
100408f8:	0002      	movs	r2, r0
100408fa:	409f      	lsls	r7, r3
100408fc:	4332      	orrs	r2, r6
100408fe:	429c      	cmp	r4, r3
10040900:	dd00      	ble.n	10040904 <__aeabi_dadd+0xd4>
10040902:	e1a6      	b.n	10040c52 <__aeabi_dadd+0x422>
10040904:	1b18      	subs	r0, r3, r4
10040906:	3001      	adds	r0, #1
10040908:	1a09      	subs	r1, r1, r0
1004090a:	003e      	movs	r6, r7
1004090c:	408f      	lsls	r7, r1
1004090e:	40c6      	lsrs	r6, r0
10040910:	1e7b      	subs	r3, r7, #1
10040912:	419f      	sbcs	r7, r3
10040914:	0013      	movs	r3, r2
10040916:	408b      	lsls	r3, r1
10040918:	4337      	orrs	r7, r6
1004091a:	431f      	orrs	r7, r3
1004091c:	40c2      	lsrs	r2, r0
1004091e:	003b      	movs	r3, r7
10040920:	0016      	movs	r6, r2
10040922:	2400      	movs	r4, #0
10040924:	4313      	orrs	r3, r2
10040926:	d100      	bne.n	1004092a <__aeabi_dadd+0xfa>
10040928:	e1df      	b.n	10040cea <__aeabi_dadd+0x4ba>
1004092a:	077b      	lsls	r3, r7, #29
1004092c:	d100      	bne.n	10040930 <__aeabi_dadd+0x100>
1004092e:	e332      	b.n	10040f96 <__aeabi_dadd+0x766>
10040930:	230f      	movs	r3, #15
10040932:	003a      	movs	r2, r7
10040934:	403b      	ands	r3, r7
10040936:	2b04      	cmp	r3, #4
10040938:	d004      	beq.n	10040944 <__aeabi_dadd+0x114>
1004093a:	1d3a      	adds	r2, r7, #4
1004093c:	42ba      	cmp	r2, r7
1004093e:	41bf      	sbcs	r7, r7
10040940:	427f      	negs	r7, r7
10040942:	19f6      	adds	r6, r6, r7
10040944:	0233      	lsls	r3, r6, #8
10040946:	d400      	bmi.n	1004094a <__aeabi_dadd+0x11a>
10040948:	e323      	b.n	10040f92 <__aeabi_dadd+0x762>
1004094a:	4b9c      	ldr	r3, [pc, #624]	@ (10040bbc <__aeabi_dadd+0x38c>)
1004094c:	3401      	adds	r4, #1
1004094e:	429c      	cmp	r4, r3
10040950:	d100      	bne.n	10040954 <__aeabi_dadd+0x124>
10040952:	e0b4      	b.n	10040abe <__aeabi_dadd+0x28e>
10040954:	4b9a      	ldr	r3, [pc, #616]	@ (10040bc0 <__aeabi_dadd+0x390>)
10040956:	0564      	lsls	r4, r4, #21
10040958:	401e      	ands	r6, r3
1004095a:	0d64      	lsrs	r4, r4, #21
1004095c:	0777      	lsls	r7, r6, #29
1004095e:	08d2      	lsrs	r2, r2, #3
10040960:	0276      	lsls	r6, r6, #9
10040962:	4317      	orrs	r7, r2
10040964:	0b36      	lsrs	r6, r6, #12
10040966:	e0ac      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040968:	2900      	cmp	r1, #0
1004096a:	d100      	bne.n	1004096e <__aeabi_dadd+0x13e>
1004096c:	e07e      	b.n	10040a6c <__aeabi_dadd+0x23c>
1004096e:	4641      	mov	r1, r8
10040970:	1b09      	subs	r1, r1, r4
10040972:	2c00      	cmp	r4, #0
10040974:	d000      	beq.n	10040978 <__aeabi_dadd+0x148>
10040976:	e160      	b.n	10040c3a <__aeabi_dadd+0x40a>
10040978:	0034      	movs	r4, r6
1004097a:	4648      	mov	r0, r9
1004097c:	4304      	orrs	r4, r0
1004097e:	d100      	bne.n	10040982 <__aeabi_dadd+0x152>
10040980:	e1c9      	b.n	10040d16 <__aeabi_dadd+0x4e6>
10040982:	1e4c      	subs	r4, r1, #1
10040984:	2901      	cmp	r1, #1
10040986:	d100      	bne.n	1004098a <__aeabi_dadd+0x15a>
10040988:	e22e      	b.n	10040de8 <__aeabi_dadd+0x5b8>
1004098a:	4d8c      	ldr	r5, [pc, #560]	@ (10040bbc <__aeabi_dadd+0x38c>)
1004098c:	42a9      	cmp	r1, r5
1004098e:	d100      	bne.n	10040992 <__aeabi_dadd+0x162>
10040990:	e224      	b.n	10040ddc <__aeabi_dadd+0x5ac>
10040992:	2701      	movs	r7, #1
10040994:	2c38      	cmp	r4, #56	@ 0x38
10040996:	dc11      	bgt.n	100409bc <__aeabi_dadd+0x18c>
10040998:	0021      	movs	r1, r4
1004099a:	291f      	cmp	r1, #31
1004099c:	dd00      	ble.n	100409a0 <__aeabi_dadd+0x170>
1004099e:	e20b      	b.n	10040db8 <__aeabi_dadd+0x588>
100409a0:	2420      	movs	r4, #32
100409a2:	0037      	movs	r7, r6
100409a4:	4648      	mov	r0, r9
100409a6:	1a64      	subs	r4, r4, r1
100409a8:	40a7      	lsls	r7, r4
100409aa:	40c8      	lsrs	r0, r1
100409ac:	4307      	orrs	r7, r0
100409ae:	4648      	mov	r0, r9
100409b0:	40a0      	lsls	r0, r4
100409b2:	40ce      	lsrs	r6, r1
100409b4:	1e44      	subs	r4, r0, #1
100409b6:	41a0      	sbcs	r0, r4
100409b8:	1b9b      	subs	r3, r3, r6
100409ba:	4307      	orrs	r7, r0
100409bc:	1bd7      	subs	r7, r2, r7
100409be:	42ba      	cmp	r2, r7
100409c0:	4192      	sbcs	r2, r2
100409c2:	4252      	negs	r2, r2
100409c4:	4665      	mov	r5, ip
100409c6:	4644      	mov	r4, r8
100409c8:	1a9e      	subs	r6, r3, r2
100409ca:	e783      	b.n	100408d4 <__aeabi_dadd+0xa4>
100409cc:	2900      	cmp	r1, #0
100409ce:	dc00      	bgt.n	100409d2 <__aeabi_dadd+0x1a2>
100409d0:	e09c      	b.n	10040b0c <__aeabi_dadd+0x2dc>
100409d2:	4647      	mov	r7, r8
100409d4:	2f00      	cmp	r7, #0
100409d6:	d167      	bne.n	10040aa8 <__aeabi_dadd+0x278>
100409d8:	001f      	movs	r7, r3
100409da:	4317      	orrs	r7, r2
100409dc:	d100      	bne.n	100409e0 <__aeabi_dadd+0x1b0>
100409de:	e0e4      	b.n	10040baa <__aeabi_dadd+0x37a>
100409e0:	1e48      	subs	r0, r1, #1
100409e2:	2901      	cmp	r1, #1
100409e4:	d100      	bne.n	100409e8 <__aeabi_dadd+0x1b8>
100409e6:	e19b      	b.n	10040d20 <__aeabi_dadd+0x4f0>
100409e8:	4f74      	ldr	r7, [pc, #464]	@ (10040bbc <__aeabi_dadd+0x38c>)
100409ea:	42b9      	cmp	r1, r7
100409ec:	d100      	bne.n	100409f0 <__aeabi_dadd+0x1c0>
100409ee:	e0eb      	b.n	10040bc8 <__aeabi_dadd+0x398>
100409f0:	2701      	movs	r7, #1
100409f2:	0001      	movs	r1, r0
100409f4:	2838      	cmp	r0, #56	@ 0x38
100409f6:	dc11      	bgt.n	10040a1c <__aeabi_dadd+0x1ec>
100409f8:	291f      	cmp	r1, #31
100409fa:	dd00      	ble.n	100409fe <__aeabi_dadd+0x1ce>
100409fc:	e1c7      	b.n	10040d8e <__aeabi_dadd+0x55e>
100409fe:	2720      	movs	r7, #32
10040a00:	1a78      	subs	r0, r7, r1
10040a02:	001f      	movs	r7, r3
10040a04:	4684      	mov	ip, r0
10040a06:	4087      	lsls	r7, r0
10040a08:	0010      	movs	r0, r2
10040a0a:	40c8      	lsrs	r0, r1
10040a0c:	4307      	orrs	r7, r0
10040a0e:	4660      	mov	r0, ip
10040a10:	4082      	lsls	r2, r0
10040a12:	40cb      	lsrs	r3, r1
10040a14:	1e50      	subs	r0, r2, #1
10040a16:	4182      	sbcs	r2, r0
10040a18:	18f6      	adds	r6, r6, r3
10040a1a:	4317      	orrs	r7, r2
10040a1c:	444f      	add	r7, r9
10040a1e:	454f      	cmp	r7, r9
10040a20:	4180      	sbcs	r0, r0
10040a22:	4240      	negs	r0, r0
10040a24:	1836      	adds	r6, r6, r0
10040a26:	0233      	lsls	r3, r6, #8
10040a28:	d557      	bpl.n	10040ada <__aeabi_dadd+0x2aa>
10040a2a:	4b64      	ldr	r3, [pc, #400]	@ (10040bbc <__aeabi_dadd+0x38c>)
10040a2c:	3401      	adds	r4, #1
10040a2e:	429c      	cmp	r4, r3
10040a30:	d045      	beq.n	10040abe <__aeabi_dadd+0x28e>
10040a32:	2101      	movs	r1, #1
10040a34:	4b62      	ldr	r3, [pc, #392]	@ (10040bc0 <__aeabi_dadd+0x390>)
10040a36:	087a      	lsrs	r2, r7, #1
10040a38:	401e      	ands	r6, r3
10040a3a:	4039      	ands	r1, r7
10040a3c:	430a      	orrs	r2, r1
10040a3e:	07f7      	lsls	r7, r6, #31
10040a40:	4317      	orrs	r7, r2
10040a42:	0876      	lsrs	r6, r6, #1
10040a44:	e771      	b.n	1004092a <__aeabi_dadd+0xfa>
10040a46:	001f      	movs	r7, r3
10040a48:	4317      	orrs	r7, r2
10040a4a:	d100      	bne.n	10040a4e <__aeabi_dadd+0x21e>
10040a4c:	e0ad      	b.n	10040baa <__aeabi_dadd+0x37a>
10040a4e:	1e4f      	subs	r7, r1, #1
10040a50:	46bc      	mov	ip, r7
10040a52:	2901      	cmp	r1, #1
10040a54:	d100      	bne.n	10040a58 <__aeabi_dadd+0x228>
10040a56:	e182      	b.n	10040d5e <__aeabi_dadd+0x52e>
10040a58:	4f58      	ldr	r7, [pc, #352]	@ (10040bbc <__aeabi_dadd+0x38c>)
10040a5a:	42b9      	cmp	r1, r7
10040a5c:	d100      	bne.n	10040a60 <__aeabi_dadd+0x230>
10040a5e:	e190      	b.n	10040d82 <__aeabi_dadd+0x552>
10040a60:	4661      	mov	r1, ip
10040a62:	2701      	movs	r7, #1
10040a64:	2938      	cmp	r1, #56	@ 0x38
10040a66:	dd00      	ble.n	10040a6a <__aeabi_dadd+0x23a>
10040a68:	e72e      	b.n	100408c8 <__aeabi_dadd+0x98>
10040a6a:	e718      	b.n	1004089e <__aeabi_dadd+0x6e>
10040a6c:	4f55      	ldr	r7, [pc, #340]	@ (10040bc4 <__aeabi_dadd+0x394>)
10040a6e:	1c61      	adds	r1, r4, #1
10040a70:	4239      	tst	r1, r7
10040a72:	d000      	beq.n	10040a76 <__aeabi_dadd+0x246>
10040a74:	e0d0      	b.n	10040c18 <__aeabi_dadd+0x3e8>
10040a76:	0031      	movs	r1, r6
10040a78:	4648      	mov	r0, r9
10040a7a:	001f      	movs	r7, r3
10040a7c:	4301      	orrs	r1, r0
10040a7e:	4317      	orrs	r7, r2
10040a80:	2c00      	cmp	r4, #0
10040a82:	d000      	beq.n	10040a86 <__aeabi_dadd+0x256>
10040a84:	e13d      	b.n	10040d02 <__aeabi_dadd+0x4d2>
10040a86:	2900      	cmp	r1, #0
10040a88:	d100      	bne.n	10040a8c <__aeabi_dadd+0x25c>
10040a8a:	e1bc      	b.n	10040e06 <__aeabi_dadd+0x5d6>
10040a8c:	2f00      	cmp	r7, #0
10040a8e:	d000      	beq.n	10040a92 <__aeabi_dadd+0x262>
10040a90:	e1bf      	b.n	10040e12 <__aeabi_dadd+0x5e2>
10040a92:	464b      	mov	r3, r9
10040a94:	2100      	movs	r1, #0
10040a96:	08d8      	lsrs	r0, r3, #3
10040a98:	0777      	lsls	r7, r6, #29
10040a9a:	4307      	orrs	r7, r0
10040a9c:	08f0      	lsrs	r0, r6, #3
10040a9e:	0306      	lsls	r6, r0, #12
10040aa0:	054c      	lsls	r4, r1, #21
10040aa2:	0b36      	lsrs	r6, r6, #12
10040aa4:	0d64      	lsrs	r4, r4, #21
10040aa6:	e00c      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040aa8:	4f44      	ldr	r7, [pc, #272]	@ (10040bbc <__aeabi_dadd+0x38c>)
10040aaa:	42bc      	cmp	r4, r7
10040aac:	d100      	bne.n	10040ab0 <__aeabi_dadd+0x280>
10040aae:	e08b      	b.n	10040bc8 <__aeabi_dadd+0x398>
10040ab0:	2701      	movs	r7, #1
10040ab2:	2938      	cmp	r1, #56	@ 0x38
10040ab4:	dcb2      	bgt.n	10040a1c <__aeabi_dadd+0x1ec>
10040ab6:	2780      	movs	r7, #128	@ 0x80
10040ab8:	043f      	lsls	r7, r7, #16
10040aba:	433b      	orrs	r3, r7
10040abc:	e79c      	b.n	100409f8 <__aeabi_dadd+0x1c8>
10040abe:	2600      	movs	r6, #0
10040ac0:	2700      	movs	r7, #0
10040ac2:	0524      	lsls	r4, r4, #20
10040ac4:	4334      	orrs	r4, r6
10040ac6:	07ed      	lsls	r5, r5, #31
10040ac8:	432c      	orrs	r4, r5
10040aca:	0038      	movs	r0, r7
10040acc:	0021      	movs	r1, r4
10040ace:	b002      	add	sp, #8
10040ad0:	bce0      	pop	{r5, r6, r7}
10040ad2:	46ba      	mov	sl, r7
10040ad4:	46b1      	mov	r9, r6
10040ad6:	46a8      	mov	r8, r5
10040ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040ada:	077b      	lsls	r3, r7, #29
10040adc:	d004      	beq.n	10040ae8 <__aeabi_dadd+0x2b8>
10040ade:	230f      	movs	r3, #15
10040ae0:	403b      	ands	r3, r7
10040ae2:	2b04      	cmp	r3, #4
10040ae4:	d000      	beq.n	10040ae8 <__aeabi_dadd+0x2b8>
10040ae6:	e728      	b.n	1004093a <__aeabi_dadd+0x10a>
10040ae8:	08f8      	lsrs	r0, r7, #3
10040aea:	4b34      	ldr	r3, [pc, #208]	@ (10040bbc <__aeabi_dadd+0x38c>)
10040aec:	0777      	lsls	r7, r6, #29
10040aee:	4307      	orrs	r7, r0
10040af0:	08f0      	lsrs	r0, r6, #3
10040af2:	429c      	cmp	r4, r3
10040af4:	d000      	beq.n	10040af8 <__aeabi_dadd+0x2c8>
10040af6:	e24a      	b.n	10040f8e <__aeabi_dadd+0x75e>
10040af8:	003b      	movs	r3, r7
10040afa:	4303      	orrs	r3, r0
10040afc:	d059      	beq.n	10040bb2 <__aeabi_dadd+0x382>
10040afe:	2680      	movs	r6, #128	@ 0x80
10040b00:	0336      	lsls	r6, r6, #12
10040b02:	4306      	orrs	r6, r0
10040b04:	0336      	lsls	r6, r6, #12
10040b06:	4c2d      	ldr	r4, [pc, #180]	@ (10040bbc <__aeabi_dadd+0x38c>)
10040b08:	0b36      	lsrs	r6, r6, #12
10040b0a:	e7da      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040b0c:	2900      	cmp	r1, #0
10040b0e:	d061      	beq.n	10040bd4 <__aeabi_dadd+0x3a4>
10040b10:	4641      	mov	r1, r8
10040b12:	1b09      	subs	r1, r1, r4
10040b14:	2c00      	cmp	r4, #0
10040b16:	d100      	bne.n	10040b1a <__aeabi_dadd+0x2ea>
10040b18:	e0b9      	b.n	10040c8e <__aeabi_dadd+0x45e>
10040b1a:	4c28      	ldr	r4, [pc, #160]	@ (10040bbc <__aeabi_dadd+0x38c>)
10040b1c:	45a0      	cmp	r8, r4
10040b1e:	d100      	bne.n	10040b22 <__aeabi_dadd+0x2f2>
10040b20:	e1a5      	b.n	10040e6e <__aeabi_dadd+0x63e>
10040b22:	2701      	movs	r7, #1
10040b24:	2938      	cmp	r1, #56	@ 0x38
10040b26:	dc13      	bgt.n	10040b50 <__aeabi_dadd+0x320>
10040b28:	2480      	movs	r4, #128	@ 0x80
10040b2a:	0424      	lsls	r4, r4, #16
10040b2c:	4326      	orrs	r6, r4
10040b2e:	291f      	cmp	r1, #31
10040b30:	dd00      	ble.n	10040b34 <__aeabi_dadd+0x304>
10040b32:	e1c8      	b.n	10040ec6 <__aeabi_dadd+0x696>
10040b34:	2420      	movs	r4, #32
10040b36:	0037      	movs	r7, r6
10040b38:	4648      	mov	r0, r9
10040b3a:	1a64      	subs	r4, r4, r1
10040b3c:	40a7      	lsls	r7, r4
10040b3e:	40c8      	lsrs	r0, r1
10040b40:	4307      	orrs	r7, r0
10040b42:	4648      	mov	r0, r9
10040b44:	40a0      	lsls	r0, r4
10040b46:	40ce      	lsrs	r6, r1
10040b48:	1e44      	subs	r4, r0, #1
10040b4a:	41a0      	sbcs	r0, r4
10040b4c:	199b      	adds	r3, r3, r6
10040b4e:	4307      	orrs	r7, r0
10040b50:	18bf      	adds	r7, r7, r2
10040b52:	4297      	cmp	r7, r2
10040b54:	4192      	sbcs	r2, r2
10040b56:	4252      	negs	r2, r2
10040b58:	4644      	mov	r4, r8
10040b5a:	18d6      	adds	r6, r2, r3
10040b5c:	e763      	b.n	10040a26 <__aeabi_dadd+0x1f6>
10040b5e:	0038      	movs	r0, r7
10040b60:	f7ff fd2e 	bl	100405c0 <__clzsi2>
10040b64:	0003      	movs	r3, r0
10040b66:	3318      	adds	r3, #24
10040b68:	2b1f      	cmp	r3, #31
10040b6a:	dc00      	bgt.n	10040b6e <__aeabi_dadd+0x33e>
10040b6c:	e6bf      	b.n	100408ee <__aeabi_dadd+0xbe>
10040b6e:	003a      	movs	r2, r7
10040b70:	3808      	subs	r0, #8
10040b72:	4082      	lsls	r2, r0
10040b74:	429c      	cmp	r4, r3
10040b76:	dd00      	ble.n	10040b7a <__aeabi_dadd+0x34a>
10040b78:	e083      	b.n	10040c82 <__aeabi_dadd+0x452>
10040b7a:	1b1b      	subs	r3, r3, r4
10040b7c:	1c58      	adds	r0, r3, #1
10040b7e:	281f      	cmp	r0, #31
10040b80:	dc00      	bgt.n	10040b84 <__aeabi_dadd+0x354>
10040b82:	e1b4      	b.n	10040eee <__aeabi_dadd+0x6be>
10040b84:	0017      	movs	r7, r2
10040b86:	3b1f      	subs	r3, #31
10040b88:	40df      	lsrs	r7, r3
10040b8a:	2820      	cmp	r0, #32
10040b8c:	d005      	beq.n	10040b9a <__aeabi_dadd+0x36a>
10040b8e:	2340      	movs	r3, #64	@ 0x40
10040b90:	1a1b      	subs	r3, r3, r0
10040b92:	409a      	lsls	r2, r3
10040b94:	1e53      	subs	r3, r2, #1
10040b96:	419a      	sbcs	r2, r3
10040b98:	4317      	orrs	r7, r2
10040b9a:	2400      	movs	r4, #0
10040b9c:	2f00      	cmp	r7, #0
10040b9e:	d00a      	beq.n	10040bb6 <__aeabi_dadd+0x386>
10040ba0:	077b      	lsls	r3, r7, #29
10040ba2:	d000      	beq.n	10040ba6 <__aeabi_dadd+0x376>
10040ba4:	e6c4      	b.n	10040930 <__aeabi_dadd+0x100>
10040ba6:	0026      	movs	r6, r4
10040ba8:	e79e      	b.n	10040ae8 <__aeabi_dadd+0x2b8>
10040baa:	464b      	mov	r3, r9
10040bac:	000c      	movs	r4, r1
10040bae:	08d8      	lsrs	r0, r3, #3
10040bb0:	e79b      	b.n	10040aea <__aeabi_dadd+0x2ba>
10040bb2:	2700      	movs	r7, #0
10040bb4:	4c01      	ldr	r4, [pc, #4]	@ (10040bbc <__aeabi_dadd+0x38c>)
10040bb6:	2600      	movs	r6, #0
10040bb8:	e783      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040bba:	46c0      	nop			@ (mov r8, r8)
10040bbc:	000007ff 	.word	0x000007ff
10040bc0:	ff7fffff 	.word	0xff7fffff
10040bc4:	000007fe 	.word	0x000007fe
10040bc8:	464b      	mov	r3, r9
10040bca:	0777      	lsls	r7, r6, #29
10040bcc:	08d8      	lsrs	r0, r3, #3
10040bce:	4307      	orrs	r7, r0
10040bd0:	08f0      	lsrs	r0, r6, #3
10040bd2:	e791      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040bd4:	4fcd      	ldr	r7, [pc, #820]	@ (10040f0c <__aeabi_dadd+0x6dc>)
10040bd6:	1c61      	adds	r1, r4, #1
10040bd8:	4239      	tst	r1, r7
10040bda:	d16b      	bne.n	10040cb4 <__aeabi_dadd+0x484>
10040bdc:	0031      	movs	r1, r6
10040bde:	4648      	mov	r0, r9
10040be0:	4301      	orrs	r1, r0
10040be2:	2c00      	cmp	r4, #0
10040be4:	d000      	beq.n	10040be8 <__aeabi_dadd+0x3b8>
10040be6:	e14b      	b.n	10040e80 <__aeabi_dadd+0x650>
10040be8:	001f      	movs	r7, r3
10040bea:	4317      	orrs	r7, r2
10040bec:	2900      	cmp	r1, #0
10040bee:	d100      	bne.n	10040bf2 <__aeabi_dadd+0x3c2>
10040bf0:	e181      	b.n	10040ef6 <__aeabi_dadd+0x6c6>
10040bf2:	2f00      	cmp	r7, #0
10040bf4:	d100      	bne.n	10040bf8 <__aeabi_dadd+0x3c8>
10040bf6:	e74c      	b.n	10040a92 <__aeabi_dadd+0x262>
10040bf8:	444a      	add	r2, r9
10040bfa:	454a      	cmp	r2, r9
10040bfc:	4180      	sbcs	r0, r0
10040bfe:	18f6      	adds	r6, r6, r3
10040c00:	4240      	negs	r0, r0
10040c02:	1836      	adds	r6, r6, r0
10040c04:	0233      	lsls	r3, r6, #8
10040c06:	d500      	bpl.n	10040c0a <__aeabi_dadd+0x3da>
10040c08:	e1b0      	b.n	10040f6c <__aeabi_dadd+0x73c>
10040c0a:	0017      	movs	r7, r2
10040c0c:	4691      	mov	r9, r2
10040c0e:	4337      	orrs	r7, r6
10040c10:	d000      	beq.n	10040c14 <__aeabi_dadd+0x3e4>
10040c12:	e73e      	b.n	10040a92 <__aeabi_dadd+0x262>
10040c14:	2600      	movs	r6, #0
10040c16:	e754      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040c18:	4649      	mov	r1, r9
10040c1a:	1a89      	subs	r1, r1, r2
10040c1c:	4688      	mov	r8, r1
10040c1e:	45c1      	cmp	r9, r8
10040c20:	41bf      	sbcs	r7, r7
10040c22:	1af1      	subs	r1, r6, r3
10040c24:	427f      	negs	r7, r7
10040c26:	1bc9      	subs	r1, r1, r7
10040c28:	020f      	lsls	r7, r1, #8
10040c2a:	d461      	bmi.n	10040cf0 <__aeabi_dadd+0x4c0>
10040c2c:	4647      	mov	r7, r8
10040c2e:	430f      	orrs	r7, r1
10040c30:	d100      	bne.n	10040c34 <__aeabi_dadd+0x404>
10040c32:	e0bd      	b.n	10040db0 <__aeabi_dadd+0x580>
10040c34:	000e      	movs	r6, r1
10040c36:	4647      	mov	r7, r8
10040c38:	e651      	b.n	100408de <__aeabi_dadd+0xae>
10040c3a:	4cb5      	ldr	r4, [pc, #724]	@ (10040f10 <__aeabi_dadd+0x6e0>)
10040c3c:	45a0      	cmp	r8, r4
10040c3e:	d100      	bne.n	10040c42 <__aeabi_dadd+0x412>
10040c40:	e100      	b.n	10040e44 <__aeabi_dadd+0x614>
10040c42:	2701      	movs	r7, #1
10040c44:	2938      	cmp	r1, #56	@ 0x38
10040c46:	dd00      	ble.n	10040c4a <__aeabi_dadd+0x41a>
10040c48:	e6b8      	b.n	100409bc <__aeabi_dadd+0x18c>
10040c4a:	2480      	movs	r4, #128	@ 0x80
10040c4c:	0424      	lsls	r4, r4, #16
10040c4e:	4326      	orrs	r6, r4
10040c50:	e6a3      	b.n	1004099a <__aeabi_dadd+0x16a>
10040c52:	4eb0      	ldr	r6, [pc, #704]	@ (10040f14 <__aeabi_dadd+0x6e4>)
10040c54:	1ae4      	subs	r4, r4, r3
10040c56:	4016      	ands	r6, r2
10040c58:	077b      	lsls	r3, r7, #29
10040c5a:	d000      	beq.n	10040c5e <__aeabi_dadd+0x42e>
10040c5c:	e73f      	b.n	10040ade <__aeabi_dadd+0x2ae>
10040c5e:	e743      	b.n	10040ae8 <__aeabi_dadd+0x2b8>
10040c60:	000f      	movs	r7, r1
10040c62:	0018      	movs	r0, r3
10040c64:	3f20      	subs	r7, #32
10040c66:	40f8      	lsrs	r0, r7
10040c68:	4684      	mov	ip, r0
10040c6a:	2920      	cmp	r1, #32
10040c6c:	d003      	beq.n	10040c76 <__aeabi_dadd+0x446>
10040c6e:	2740      	movs	r7, #64	@ 0x40
10040c70:	1a79      	subs	r1, r7, r1
10040c72:	408b      	lsls	r3, r1
10040c74:	431a      	orrs	r2, r3
10040c76:	1e53      	subs	r3, r2, #1
10040c78:	419a      	sbcs	r2, r3
10040c7a:	4663      	mov	r3, ip
10040c7c:	0017      	movs	r7, r2
10040c7e:	431f      	orrs	r7, r3
10040c80:	e622      	b.n	100408c8 <__aeabi_dadd+0x98>
10040c82:	48a4      	ldr	r0, [pc, #656]	@ (10040f14 <__aeabi_dadd+0x6e4>)
10040c84:	1ae1      	subs	r1, r4, r3
10040c86:	4010      	ands	r0, r2
10040c88:	0747      	lsls	r7, r0, #29
10040c8a:	08c0      	lsrs	r0, r0, #3
10040c8c:	e707      	b.n	10040a9e <__aeabi_dadd+0x26e>
10040c8e:	0034      	movs	r4, r6
10040c90:	4648      	mov	r0, r9
10040c92:	4304      	orrs	r4, r0
10040c94:	d100      	bne.n	10040c98 <__aeabi_dadd+0x468>
10040c96:	e0fa      	b.n	10040e8e <__aeabi_dadd+0x65e>
10040c98:	1e4c      	subs	r4, r1, #1
10040c9a:	2901      	cmp	r1, #1
10040c9c:	d100      	bne.n	10040ca0 <__aeabi_dadd+0x470>
10040c9e:	e0d7      	b.n	10040e50 <__aeabi_dadd+0x620>
10040ca0:	4f9b      	ldr	r7, [pc, #620]	@ (10040f10 <__aeabi_dadd+0x6e0>)
10040ca2:	42b9      	cmp	r1, r7
10040ca4:	d100      	bne.n	10040ca8 <__aeabi_dadd+0x478>
10040ca6:	e0e2      	b.n	10040e6e <__aeabi_dadd+0x63e>
10040ca8:	2701      	movs	r7, #1
10040caa:	2c38      	cmp	r4, #56	@ 0x38
10040cac:	dd00      	ble.n	10040cb0 <__aeabi_dadd+0x480>
10040cae:	e74f      	b.n	10040b50 <__aeabi_dadd+0x320>
10040cb0:	0021      	movs	r1, r4
10040cb2:	e73c      	b.n	10040b2e <__aeabi_dadd+0x2fe>
10040cb4:	4c96      	ldr	r4, [pc, #600]	@ (10040f10 <__aeabi_dadd+0x6e0>)
10040cb6:	42a1      	cmp	r1, r4
10040cb8:	d100      	bne.n	10040cbc <__aeabi_dadd+0x48c>
10040cba:	e0dd      	b.n	10040e78 <__aeabi_dadd+0x648>
10040cbc:	444a      	add	r2, r9
10040cbe:	454a      	cmp	r2, r9
10040cc0:	4180      	sbcs	r0, r0
10040cc2:	18f3      	adds	r3, r6, r3
10040cc4:	4240      	negs	r0, r0
10040cc6:	1818      	adds	r0, r3, r0
10040cc8:	07c7      	lsls	r7, r0, #31
10040cca:	0852      	lsrs	r2, r2, #1
10040ccc:	4317      	orrs	r7, r2
10040cce:	0846      	lsrs	r6, r0, #1
10040cd0:	0752      	lsls	r2, r2, #29
10040cd2:	d005      	beq.n	10040ce0 <__aeabi_dadd+0x4b0>
10040cd4:	220f      	movs	r2, #15
10040cd6:	000c      	movs	r4, r1
10040cd8:	403a      	ands	r2, r7
10040cda:	2a04      	cmp	r2, #4
10040cdc:	d000      	beq.n	10040ce0 <__aeabi_dadd+0x4b0>
10040cde:	e62c      	b.n	1004093a <__aeabi_dadd+0x10a>
10040ce0:	0776      	lsls	r6, r6, #29
10040ce2:	08ff      	lsrs	r7, r7, #3
10040ce4:	4337      	orrs	r7, r6
10040ce6:	0900      	lsrs	r0, r0, #4
10040ce8:	e6d9      	b.n	10040a9e <__aeabi_dadd+0x26e>
10040cea:	2700      	movs	r7, #0
10040cec:	2600      	movs	r6, #0
10040cee:	e6e8      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040cf0:	4649      	mov	r1, r9
10040cf2:	1a57      	subs	r7, r2, r1
10040cf4:	42ba      	cmp	r2, r7
10040cf6:	4192      	sbcs	r2, r2
10040cf8:	1b9e      	subs	r6, r3, r6
10040cfa:	4252      	negs	r2, r2
10040cfc:	4665      	mov	r5, ip
10040cfe:	1ab6      	subs	r6, r6, r2
10040d00:	e5ed      	b.n	100408de <__aeabi_dadd+0xae>
10040d02:	2900      	cmp	r1, #0
10040d04:	d000      	beq.n	10040d08 <__aeabi_dadd+0x4d8>
10040d06:	e0c6      	b.n	10040e96 <__aeabi_dadd+0x666>
10040d08:	2f00      	cmp	r7, #0
10040d0a:	d167      	bne.n	10040ddc <__aeabi_dadd+0x5ac>
10040d0c:	2680      	movs	r6, #128	@ 0x80
10040d0e:	2500      	movs	r5, #0
10040d10:	4c7f      	ldr	r4, [pc, #508]	@ (10040f10 <__aeabi_dadd+0x6e0>)
10040d12:	0336      	lsls	r6, r6, #12
10040d14:	e6d5      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040d16:	4665      	mov	r5, ip
10040d18:	000c      	movs	r4, r1
10040d1a:	001e      	movs	r6, r3
10040d1c:	08d0      	lsrs	r0, r2, #3
10040d1e:	e6e4      	b.n	10040aea <__aeabi_dadd+0x2ba>
10040d20:	444a      	add	r2, r9
10040d22:	454a      	cmp	r2, r9
10040d24:	4180      	sbcs	r0, r0
10040d26:	18f3      	adds	r3, r6, r3
10040d28:	4240      	negs	r0, r0
10040d2a:	1818      	adds	r0, r3, r0
10040d2c:	0011      	movs	r1, r2
10040d2e:	0203      	lsls	r3, r0, #8
10040d30:	d400      	bmi.n	10040d34 <__aeabi_dadd+0x504>
10040d32:	e096      	b.n	10040e62 <__aeabi_dadd+0x632>
10040d34:	4b77      	ldr	r3, [pc, #476]	@ (10040f14 <__aeabi_dadd+0x6e4>)
10040d36:	0849      	lsrs	r1, r1, #1
10040d38:	4018      	ands	r0, r3
10040d3a:	07c3      	lsls	r3, r0, #31
10040d3c:	430b      	orrs	r3, r1
10040d3e:	0844      	lsrs	r4, r0, #1
10040d40:	0749      	lsls	r1, r1, #29
10040d42:	d100      	bne.n	10040d46 <__aeabi_dadd+0x516>
10040d44:	e129      	b.n	10040f9a <__aeabi_dadd+0x76a>
10040d46:	220f      	movs	r2, #15
10040d48:	401a      	ands	r2, r3
10040d4a:	2a04      	cmp	r2, #4
10040d4c:	d100      	bne.n	10040d50 <__aeabi_dadd+0x520>
10040d4e:	e0ea      	b.n	10040f26 <__aeabi_dadd+0x6f6>
10040d50:	1d1f      	adds	r7, r3, #4
10040d52:	429f      	cmp	r7, r3
10040d54:	41b6      	sbcs	r6, r6
10040d56:	4276      	negs	r6, r6
10040d58:	1936      	adds	r6, r6, r4
10040d5a:	2402      	movs	r4, #2
10040d5c:	e6c4      	b.n	10040ae8 <__aeabi_dadd+0x2b8>
10040d5e:	4649      	mov	r1, r9
10040d60:	1a8f      	subs	r7, r1, r2
10040d62:	45b9      	cmp	r9, r7
10040d64:	4180      	sbcs	r0, r0
10040d66:	1af6      	subs	r6, r6, r3
10040d68:	4240      	negs	r0, r0
10040d6a:	1a36      	subs	r6, r6, r0
10040d6c:	0233      	lsls	r3, r6, #8
10040d6e:	d406      	bmi.n	10040d7e <__aeabi_dadd+0x54e>
10040d70:	0773      	lsls	r3, r6, #29
10040d72:	08ff      	lsrs	r7, r7, #3
10040d74:	2101      	movs	r1, #1
10040d76:	431f      	orrs	r7, r3
10040d78:	08f0      	lsrs	r0, r6, #3
10040d7a:	e690      	b.n	10040a9e <__aeabi_dadd+0x26e>
10040d7c:	4665      	mov	r5, ip
10040d7e:	2401      	movs	r4, #1
10040d80:	e5ab      	b.n	100408da <__aeabi_dadd+0xaa>
10040d82:	464b      	mov	r3, r9
10040d84:	0777      	lsls	r7, r6, #29
10040d86:	08d8      	lsrs	r0, r3, #3
10040d88:	4307      	orrs	r7, r0
10040d8a:	08f0      	lsrs	r0, r6, #3
10040d8c:	e6b4      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040d8e:	000f      	movs	r7, r1
10040d90:	0018      	movs	r0, r3
10040d92:	3f20      	subs	r7, #32
10040d94:	40f8      	lsrs	r0, r7
10040d96:	4684      	mov	ip, r0
10040d98:	2920      	cmp	r1, #32
10040d9a:	d003      	beq.n	10040da4 <__aeabi_dadd+0x574>
10040d9c:	2740      	movs	r7, #64	@ 0x40
10040d9e:	1a79      	subs	r1, r7, r1
10040da0:	408b      	lsls	r3, r1
10040da2:	431a      	orrs	r2, r3
10040da4:	1e53      	subs	r3, r2, #1
10040da6:	419a      	sbcs	r2, r3
10040da8:	4663      	mov	r3, ip
10040daa:	0017      	movs	r7, r2
10040dac:	431f      	orrs	r7, r3
10040dae:	e635      	b.n	10040a1c <__aeabi_dadd+0x1ec>
10040db0:	2500      	movs	r5, #0
10040db2:	2400      	movs	r4, #0
10040db4:	2600      	movs	r6, #0
10040db6:	e684      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040db8:	000c      	movs	r4, r1
10040dba:	0035      	movs	r5, r6
10040dbc:	3c20      	subs	r4, #32
10040dbe:	40e5      	lsrs	r5, r4
10040dc0:	2920      	cmp	r1, #32
10040dc2:	d005      	beq.n	10040dd0 <__aeabi_dadd+0x5a0>
10040dc4:	2440      	movs	r4, #64	@ 0x40
10040dc6:	1a61      	subs	r1, r4, r1
10040dc8:	408e      	lsls	r6, r1
10040dca:	4649      	mov	r1, r9
10040dcc:	4331      	orrs	r1, r6
10040dce:	4689      	mov	r9, r1
10040dd0:	4648      	mov	r0, r9
10040dd2:	1e41      	subs	r1, r0, #1
10040dd4:	4188      	sbcs	r0, r1
10040dd6:	0007      	movs	r7, r0
10040dd8:	432f      	orrs	r7, r5
10040dda:	e5ef      	b.n	100409bc <__aeabi_dadd+0x18c>
10040ddc:	08d2      	lsrs	r2, r2, #3
10040dde:	075f      	lsls	r7, r3, #29
10040de0:	4665      	mov	r5, ip
10040de2:	4317      	orrs	r7, r2
10040de4:	08d8      	lsrs	r0, r3, #3
10040de6:	e687      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040de8:	1a17      	subs	r7, r2, r0
10040dea:	42ba      	cmp	r2, r7
10040dec:	4192      	sbcs	r2, r2
10040dee:	1b9e      	subs	r6, r3, r6
10040df0:	4252      	negs	r2, r2
10040df2:	1ab6      	subs	r6, r6, r2
10040df4:	0233      	lsls	r3, r6, #8
10040df6:	d4c1      	bmi.n	10040d7c <__aeabi_dadd+0x54c>
10040df8:	0773      	lsls	r3, r6, #29
10040dfa:	08ff      	lsrs	r7, r7, #3
10040dfc:	4665      	mov	r5, ip
10040dfe:	2101      	movs	r1, #1
10040e00:	431f      	orrs	r7, r3
10040e02:	08f0      	lsrs	r0, r6, #3
10040e04:	e64b      	b.n	10040a9e <__aeabi_dadd+0x26e>
10040e06:	2f00      	cmp	r7, #0
10040e08:	d07b      	beq.n	10040f02 <__aeabi_dadd+0x6d2>
10040e0a:	4665      	mov	r5, ip
10040e0c:	001e      	movs	r6, r3
10040e0e:	4691      	mov	r9, r2
10040e10:	e63f      	b.n	10040a92 <__aeabi_dadd+0x262>
10040e12:	1a81      	subs	r1, r0, r2
10040e14:	4688      	mov	r8, r1
10040e16:	45c1      	cmp	r9, r8
10040e18:	41a4      	sbcs	r4, r4
10040e1a:	1af1      	subs	r1, r6, r3
10040e1c:	4264      	negs	r4, r4
10040e1e:	1b09      	subs	r1, r1, r4
10040e20:	2480      	movs	r4, #128	@ 0x80
10040e22:	0424      	lsls	r4, r4, #16
10040e24:	4221      	tst	r1, r4
10040e26:	d077      	beq.n	10040f18 <__aeabi_dadd+0x6e8>
10040e28:	1a10      	subs	r0, r2, r0
10040e2a:	4282      	cmp	r2, r0
10040e2c:	4192      	sbcs	r2, r2
10040e2e:	0007      	movs	r7, r0
10040e30:	1b9e      	subs	r6, r3, r6
10040e32:	4252      	negs	r2, r2
10040e34:	1ab6      	subs	r6, r6, r2
10040e36:	4337      	orrs	r7, r6
10040e38:	d000      	beq.n	10040e3c <__aeabi_dadd+0x60c>
10040e3a:	e0a0      	b.n	10040f7e <__aeabi_dadd+0x74e>
10040e3c:	4665      	mov	r5, ip
10040e3e:	2400      	movs	r4, #0
10040e40:	2600      	movs	r6, #0
10040e42:	e63e      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040e44:	075f      	lsls	r7, r3, #29
10040e46:	08d2      	lsrs	r2, r2, #3
10040e48:	4665      	mov	r5, ip
10040e4a:	4317      	orrs	r7, r2
10040e4c:	08d8      	lsrs	r0, r3, #3
10040e4e:	e653      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040e50:	1881      	adds	r1, r0, r2
10040e52:	4291      	cmp	r1, r2
10040e54:	4192      	sbcs	r2, r2
10040e56:	18f0      	adds	r0, r6, r3
10040e58:	4252      	negs	r2, r2
10040e5a:	1880      	adds	r0, r0, r2
10040e5c:	0203      	lsls	r3, r0, #8
10040e5e:	d500      	bpl.n	10040e62 <__aeabi_dadd+0x632>
10040e60:	e768      	b.n	10040d34 <__aeabi_dadd+0x504>
10040e62:	0747      	lsls	r7, r0, #29
10040e64:	08c9      	lsrs	r1, r1, #3
10040e66:	430f      	orrs	r7, r1
10040e68:	08c0      	lsrs	r0, r0, #3
10040e6a:	2101      	movs	r1, #1
10040e6c:	e617      	b.n	10040a9e <__aeabi_dadd+0x26e>
10040e6e:	08d2      	lsrs	r2, r2, #3
10040e70:	075f      	lsls	r7, r3, #29
10040e72:	4317      	orrs	r7, r2
10040e74:	08d8      	lsrs	r0, r3, #3
10040e76:	e63f      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040e78:	000c      	movs	r4, r1
10040e7a:	2600      	movs	r6, #0
10040e7c:	2700      	movs	r7, #0
10040e7e:	e620      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040e80:	2900      	cmp	r1, #0
10040e82:	d156      	bne.n	10040f32 <__aeabi_dadd+0x702>
10040e84:	075f      	lsls	r7, r3, #29
10040e86:	08d2      	lsrs	r2, r2, #3
10040e88:	4317      	orrs	r7, r2
10040e8a:	08d8      	lsrs	r0, r3, #3
10040e8c:	e634      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040e8e:	000c      	movs	r4, r1
10040e90:	001e      	movs	r6, r3
10040e92:	08d0      	lsrs	r0, r2, #3
10040e94:	e629      	b.n	10040aea <__aeabi_dadd+0x2ba>
10040e96:	08c1      	lsrs	r1, r0, #3
10040e98:	0770      	lsls	r0, r6, #29
10040e9a:	4301      	orrs	r1, r0
10040e9c:	08f0      	lsrs	r0, r6, #3
10040e9e:	2f00      	cmp	r7, #0
10040ea0:	d062      	beq.n	10040f68 <__aeabi_dadd+0x738>
10040ea2:	2480      	movs	r4, #128	@ 0x80
10040ea4:	0324      	lsls	r4, r4, #12
10040ea6:	4220      	tst	r0, r4
10040ea8:	d007      	beq.n	10040eba <__aeabi_dadd+0x68a>
10040eaa:	08de      	lsrs	r6, r3, #3
10040eac:	4226      	tst	r6, r4
10040eae:	d104      	bne.n	10040eba <__aeabi_dadd+0x68a>
10040eb0:	4665      	mov	r5, ip
10040eb2:	0030      	movs	r0, r6
10040eb4:	08d1      	lsrs	r1, r2, #3
10040eb6:	075b      	lsls	r3, r3, #29
10040eb8:	4319      	orrs	r1, r3
10040eba:	0f4f      	lsrs	r7, r1, #29
10040ebc:	00c9      	lsls	r1, r1, #3
10040ebe:	08c9      	lsrs	r1, r1, #3
10040ec0:	077f      	lsls	r7, r7, #29
10040ec2:	430f      	orrs	r7, r1
10040ec4:	e618      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040ec6:	000c      	movs	r4, r1
10040ec8:	0030      	movs	r0, r6
10040eca:	3c20      	subs	r4, #32
10040ecc:	40e0      	lsrs	r0, r4
10040ece:	4684      	mov	ip, r0
10040ed0:	2920      	cmp	r1, #32
10040ed2:	d005      	beq.n	10040ee0 <__aeabi_dadd+0x6b0>
10040ed4:	2440      	movs	r4, #64	@ 0x40
10040ed6:	1a61      	subs	r1, r4, r1
10040ed8:	408e      	lsls	r6, r1
10040eda:	4649      	mov	r1, r9
10040edc:	4331      	orrs	r1, r6
10040ede:	4689      	mov	r9, r1
10040ee0:	4648      	mov	r0, r9
10040ee2:	1e41      	subs	r1, r0, #1
10040ee4:	4188      	sbcs	r0, r1
10040ee6:	4661      	mov	r1, ip
10040ee8:	0007      	movs	r7, r0
10040eea:	430f      	orrs	r7, r1
10040eec:	e630      	b.n	10040b50 <__aeabi_dadd+0x320>
10040eee:	2120      	movs	r1, #32
10040ef0:	2700      	movs	r7, #0
10040ef2:	1a09      	subs	r1, r1, r0
10040ef4:	e50e      	b.n	10040914 <__aeabi_dadd+0xe4>
10040ef6:	001e      	movs	r6, r3
10040ef8:	2f00      	cmp	r7, #0
10040efa:	d000      	beq.n	10040efe <__aeabi_dadd+0x6ce>
10040efc:	e522      	b.n	10040944 <__aeabi_dadd+0x114>
10040efe:	2400      	movs	r4, #0
10040f00:	e758      	b.n	10040db4 <__aeabi_dadd+0x584>
10040f02:	2500      	movs	r5, #0
10040f04:	2400      	movs	r4, #0
10040f06:	2600      	movs	r6, #0
10040f08:	e5db      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040f0a:	46c0      	nop			@ (mov r8, r8)
10040f0c:	000007fe 	.word	0x000007fe
10040f10:	000007ff 	.word	0x000007ff
10040f14:	ff7fffff 	.word	0xff7fffff
10040f18:	4647      	mov	r7, r8
10040f1a:	430f      	orrs	r7, r1
10040f1c:	d100      	bne.n	10040f20 <__aeabi_dadd+0x6f0>
10040f1e:	e747      	b.n	10040db0 <__aeabi_dadd+0x580>
10040f20:	000e      	movs	r6, r1
10040f22:	46c1      	mov	r9, r8
10040f24:	e5b5      	b.n	10040a92 <__aeabi_dadd+0x262>
10040f26:	08df      	lsrs	r7, r3, #3
10040f28:	0764      	lsls	r4, r4, #29
10040f2a:	2102      	movs	r1, #2
10040f2c:	4327      	orrs	r7, r4
10040f2e:	0900      	lsrs	r0, r0, #4
10040f30:	e5b5      	b.n	10040a9e <__aeabi_dadd+0x26e>
10040f32:	0019      	movs	r1, r3
10040f34:	08c0      	lsrs	r0, r0, #3
10040f36:	0777      	lsls	r7, r6, #29
10040f38:	4307      	orrs	r7, r0
10040f3a:	4311      	orrs	r1, r2
10040f3c:	08f0      	lsrs	r0, r6, #3
10040f3e:	2900      	cmp	r1, #0
10040f40:	d100      	bne.n	10040f44 <__aeabi_dadd+0x714>
10040f42:	e5d9      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040f44:	2180      	movs	r1, #128	@ 0x80
10040f46:	0309      	lsls	r1, r1, #12
10040f48:	4208      	tst	r0, r1
10040f4a:	d007      	beq.n	10040f5c <__aeabi_dadd+0x72c>
10040f4c:	08dc      	lsrs	r4, r3, #3
10040f4e:	420c      	tst	r4, r1
10040f50:	d104      	bne.n	10040f5c <__aeabi_dadd+0x72c>
10040f52:	08d2      	lsrs	r2, r2, #3
10040f54:	075b      	lsls	r3, r3, #29
10040f56:	431a      	orrs	r2, r3
10040f58:	0017      	movs	r7, r2
10040f5a:	0020      	movs	r0, r4
10040f5c:	0f7b      	lsrs	r3, r7, #29
10040f5e:	00ff      	lsls	r7, r7, #3
10040f60:	08ff      	lsrs	r7, r7, #3
10040f62:	075b      	lsls	r3, r3, #29
10040f64:	431f      	orrs	r7, r3
10040f66:	e5c7      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040f68:	000f      	movs	r7, r1
10040f6a:	e5c5      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040f6c:	4b12      	ldr	r3, [pc, #72]	@ (10040fb8 <__aeabi_dadd+0x788>)
10040f6e:	08d2      	lsrs	r2, r2, #3
10040f70:	4033      	ands	r3, r6
10040f72:	075f      	lsls	r7, r3, #29
10040f74:	025b      	lsls	r3, r3, #9
10040f76:	2401      	movs	r4, #1
10040f78:	4317      	orrs	r7, r2
10040f7a:	0b1e      	lsrs	r6, r3, #12
10040f7c:	e5a1      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040f7e:	4226      	tst	r6, r4
10040f80:	d012      	beq.n	10040fa8 <__aeabi_dadd+0x778>
10040f82:	4b0d      	ldr	r3, [pc, #52]	@ (10040fb8 <__aeabi_dadd+0x788>)
10040f84:	4665      	mov	r5, ip
10040f86:	0002      	movs	r2, r0
10040f88:	2401      	movs	r4, #1
10040f8a:	401e      	ands	r6, r3
10040f8c:	e4e6      	b.n	1004095c <__aeabi_dadd+0x12c>
10040f8e:	0021      	movs	r1, r4
10040f90:	e585      	b.n	10040a9e <__aeabi_dadd+0x26e>
10040f92:	0017      	movs	r7, r2
10040f94:	e5a8      	b.n	10040ae8 <__aeabi_dadd+0x2b8>
10040f96:	003a      	movs	r2, r7
10040f98:	e4d4      	b.n	10040944 <__aeabi_dadd+0x114>
10040f9a:	08db      	lsrs	r3, r3, #3
10040f9c:	0764      	lsls	r4, r4, #29
10040f9e:	431c      	orrs	r4, r3
10040fa0:	0027      	movs	r7, r4
10040fa2:	2102      	movs	r1, #2
10040fa4:	0900      	lsrs	r0, r0, #4
10040fa6:	e57a      	b.n	10040a9e <__aeabi_dadd+0x26e>
10040fa8:	08c0      	lsrs	r0, r0, #3
10040faa:	0777      	lsls	r7, r6, #29
10040fac:	4307      	orrs	r7, r0
10040fae:	4665      	mov	r5, ip
10040fb0:	2100      	movs	r1, #0
10040fb2:	08f0      	lsrs	r0, r6, #3
10040fb4:	e573      	b.n	10040a9e <__aeabi_dadd+0x26e>
10040fb6:	46c0      	nop			@ (mov r8, r8)
10040fb8:	ff7fffff 	.word	0xff7fffff

10040fbc <__aeabi_ddiv>:
10040fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
10040fbe:	46de      	mov	lr, fp
10040fc0:	4645      	mov	r5, r8
10040fc2:	4657      	mov	r7, sl
10040fc4:	464e      	mov	r6, r9
10040fc6:	b5e0      	push	{r5, r6, r7, lr}
10040fc8:	b087      	sub	sp, #28
10040fca:	9200      	str	r2, [sp, #0]
10040fcc:	9301      	str	r3, [sp, #4]
10040fce:	030b      	lsls	r3, r1, #12
10040fd0:	0b1b      	lsrs	r3, r3, #12
10040fd2:	469b      	mov	fp, r3
10040fd4:	0fca      	lsrs	r2, r1, #31
10040fd6:	004b      	lsls	r3, r1, #1
10040fd8:	0004      	movs	r4, r0
10040fda:	4680      	mov	r8, r0
10040fdc:	0d5b      	lsrs	r3, r3, #21
10040fde:	9202      	str	r2, [sp, #8]
10040fe0:	d100      	bne.n	10040fe4 <__aeabi_ddiv+0x28>
10040fe2:	e098      	b.n	10041116 <__aeabi_ddiv+0x15a>
10040fe4:	4a7c      	ldr	r2, [pc, #496]	@ (100411d8 <__aeabi_ddiv+0x21c>)
10040fe6:	4293      	cmp	r3, r2
10040fe8:	d037      	beq.n	1004105a <__aeabi_ddiv+0x9e>
10040fea:	4659      	mov	r1, fp
10040fec:	0f42      	lsrs	r2, r0, #29
10040fee:	00c9      	lsls	r1, r1, #3
10040ff0:	430a      	orrs	r2, r1
10040ff2:	2180      	movs	r1, #128	@ 0x80
10040ff4:	0409      	lsls	r1, r1, #16
10040ff6:	4311      	orrs	r1, r2
10040ff8:	00c2      	lsls	r2, r0, #3
10040ffa:	4690      	mov	r8, r2
10040ffc:	4a77      	ldr	r2, [pc, #476]	@ (100411dc <__aeabi_ddiv+0x220>)
10040ffe:	4689      	mov	r9, r1
10041000:	4692      	mov	sl, r2
10041002:	449a      	add	sl, r3
10041004:	2300      	movs	r3, #0
10041006:	2400      	movs	r4, #0
10041008:	9303      	str	r3, [sp, #12]
1004100a:	9e00      	ldr	r6, [sp, #0]
1004100c:	9f01      	ldr	r7, [sp, #4]
1004100e:	033b      	lsls	r3, r7, #12
10041010:	0b1b      	lsrs	r3, r3, #12
10041012:	469b      	mov	fp, r3
10041014:	007b      	lsls	r3, r7, #1
10041016:	0030      	movs	r0, r6
10041018:	0d5b      	lsrs	r3, r3, #21
1004101a:	0ffd      	lsrs	r5, r7, #31
1004101c:	2b00      	cmp	r3, #0
1004101e:	d059      	beq.n	100410d4 <__aeabi_ddiv+0x118>
10041020:	4a6d      	ldr	r2, [pc, #436]	@ (100411d8 <__aeabi_ddiv+0x21c>)
10041022:	4293      	cmp	r3, r2
10041024:	d048      	beq.n	100410b8 <__aeabi_ddiv+0xfc>
10041026:	4659      	mov	r1, fp
10041028:	0f72      	lsrs	r2, r6, #29
1004102a:	00c9      	lsls	r1, r1, #3
1004102c:	430a      	orrs	r2, r1
1004102e:	2180      	movs	r1, #128	@ 0x80
10041030:	0409      	lsls	r1, r1, #16
10041032:	4311      	orrs	r1, r2
10041034:	468b      	mov	fp, r1
10041036:	4969      	ldr	r1, [pc, #420]	@ (100411dc <__aeabi_ddiv+0x220>)
10041038:	00f2      	lsls	r2, r6, #3
1004103a:	468c      	mov	ip, r1
1004103c:	4651      	mov	r1, sl
1004103e:	4463      	add	r3, ip
10041040:	1acb      	subs	r3, r1, r3
10041042:	469a      	mov	sl, r3
10041044:	2100      	movs	r1, #0
10041046:	9e02      	ldr	r6, [sp, #8]
10041048:	406e      	eors	r6, r5
1004104a:	b2f6      	uxtb	r6, r6
1004104c:	2c0f      	cmp	r4, #15
1004104e:	d900      	bls.n	10041052 <__aeabi_ddiv+0x96>
10041050:	e0ce      	b.n	100411f0 <__aeabi_ddiv+0x234>
10041052:	4b63      	ldr	r3, [pc, #396]	@ (100411e0 <__aeabi_ddiv+0x224>)
10041054:	00a4      	lsls	r4, r4, #2
10041056:	591b      	ldr	r3, [r3, r4]
10041058:	469f      	mov	pc, r3
1004105a:	465a      	mov	r2, fp
1004105c:	4302      	orrs	r2, r0
1004105e:	4691      	mov	r9, r2
10041060:	d000      	beq.n	10041064 <__aeabi_ddiv+0xa8>
10041062:	e090      	b.n	10041186 <__aeabi_ddiv+0x1ca>
10041064:	469a      	mov	sl, r3
10041066:	2302      	movs	r3, #2
10041068:	4690      	mov	r8, r2
1004106a:	2408      	movs	r4, #8
1004106c:	9303      	str	r3, [sp, #12]
1004106e:	e7cc      	b.n	1004100a <__aeabi_ddiv+0x4e>
10041070:	46cb      	mov	fp, r9
10041072:	4642      	mov	r2, r8
10041074:	9d02      	ldr	r5, [sp, #8]
10041076:	9903      	ldr	r1, [sp, #12]
10041078:	2902      	cmp	r1, #2
1004107a:	d100      	bne.n	1004107e <__aeabi_ddiv+0xc2>
1004107c:	e1de      	b.n	1004143c <__aeabi_ddiv+0x480>
1004107e:	2903      	cmp	r1, #3
10041080:	d100      	bne.n	10041084 <__aeabi_ddiv+0xc8>
10041082:	e08d      	b.n	100411a0 <__aeabi_ddiv+0x1e4>
10041084:	2901      	cmp	r1, #1
10041086:	d000      	beq.n	1004108a <__aeabi_ddiv+0xce>
10041088:	e179      	b.n	1004137e <__aeabi_ddiv+0x3c2>
1004108a:	002e      	movs	r6, r5
1004108c:	2200      	movs	r2, #0
1004108e:	2300      	movs	r3, #0
10041090:	2400      	movs	r4, #0
10041092:	4690      	mov	r8, r2
10041094:	051b      	lsls	r3, r3, #20
10041096:	4323      	orrs	r3, r4
10041098:	07f6      	lsls	r6, r6, #31
1004109a:	4333      	orrs	r3, r6
1004109c:	4640      	mov	r0, r8
1004109e:	0019      	movs	r1, r3
100410a0:	b007      	add	sp, #28
100410a2:	bcf0      	pop	{r4, r5, r6, r7}
100410a4:	46bb      	mov	fp, r7
100410a6:	46b2      	mov	sl, r6
100410a8:	46a9      	mov	r9, r5
100410aa:	46a0      	mov	r8, r4
100410ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
100410ae:	2200      	movs	r2, #0
100410b0:	2400      	movs	r4, #0
100410b2:	4690      	mov	r8, r2
100410b4:	4b48      	ldr	r3, [pc, #288]	@ (100411d8 <__aeabi_ddiv+0x21c>)
100410b6:	e7ed      	b.n	10041094 <__aeabi_ddiv+0xd8>
100410b8:	465a      	mov	r2, fp
100410ba:	9b00      	ldr	r3, [sp, #0]
100410bc:	431a      	orrs	r2, r3
100410be:	4b49      	ldr	r3, [pc, #292]	@ (100411e4 <__aeabi_ddiv+0x228>)
100410c0:	469c      	mov	ip, r3
100410c2:	44e2      	add	sl, ip
100410c4:	2a00      	cmp	r2, #0
100410c6:	d159      	bne.n	1004117c <__aeabi_ddiv+0x1c0>
100410c8:	2302      	movs	r3, #2
100410ca:	431c      	orrs	r4, r3
100410cc:	2300      	movs	r3, #0
100410ce:	2102      	movs	r1, #2
100410d0:	469b      	mov	fp, r3
100410d2:	e7b8      	b.n	10041046 <__aeabi_ddiv+0x8a>
100410d4:	465a      	mov	r2, fp
100410d6:	9b00      	ldr	r3, [sp, #0]
100410d8:	431a      	orrs	r2, r3
100410da:	d049      	beq.n	10041170 <__aeabi_ddiv+0x1b4>
100410dc:	465b      	mov	r3, fp
100410de:	2b00      	cmp	r3, #0
100410e0:	d100      	bne.n	100410e4 <__aeabi_ddiv+0x128>
100410e2:	e19c      	b.n	1004141e <__aeabi_ddiv+0x462>
100410e4:	4658      	mov	r0, fp
100410e6:	f7ff fa6b 	bl	100405c0 <__clzsi2>
100410ea:	0002      	movs	r2, r0
100410ec:	0003      	movs	r3, r0
100410ee:	3a0b      	subs	r2, #11
100410f0:	271d      	movs	r7, #29
100410f2:	9e00      	ldr	r6, [sp, #0]
100410f4:	1aba      	subs	r2, r7, r2
100410f6:	0019      	movs	r1, r3
100410f8:	4658      	mov	r0, fp
100410fa:	40d6      	lsrs	r6, r2
100410fc:	3908      	subs	r1, #8
100410fe:	4088      	lsls	r0, r1
10041100:	0032      	movs	r2, r6
10041102:	4302      	orrs	r2, r0
10041104:	4693      	mov	fp, r2
10041106:	9a00      	ldr	r2, [sp, #0]
10041108:	408a      	lsls	r2, r1
1004110a:	4937      	ldr	r1, [pc, #220]	@ (100411e8 <__aeabi_ddiv+0x22c>)
1004110c:	4453      	add	r3, sl
1004110e:	468a      	mov	sl, r1
10041110:	2100      	movs	r1, #0
10041112:	449a      	add	sl, r3
10041114:	e797      	b.n	10041046 <__aeabi_ddiv+0x8a>
10041116:	465b      	mov	r3, fp
10041118:	4303      	orrs	r3, r0
1004111a:	4699      	mov	r9, r3
1004111c:	d021      	beq.n	10041162 <__aeabi_ddiv+0x1a6>
1004111e:	465b      	mov	r3, fp
10041120:	2b00      	cmp	r3, #0
10041122:	d100      	bne.n	10041126 <__aeabi_ddiv+0x16a>
10041124:	e169      	b.n	100413fa <__aeabi_ddiv+0x43e>
10041126:	4658      	mov	r0, fp
10041128:	f7ff fa4a 	bl	100405c0 <__clzsi2>
1004112c:	230b      	movs	r3, #11
1004112e:	425b      	negs	r3, r3
10041130:	469c      	mov	ip, r3
10041132:	0002      	movs	r2, r0
10041134:	4484      	add	ip, r0
10041136:	4666      	mov	r6, ip
10041138:	231d      	movs	r3, #29
1004113a:	1b9b      	subs	r3, r3, r6
1004113c:	0026      	movs	r6, r4
1004113e:	0011      	movs	r1, r2
10041140:	4658      	mov	r0, fp
10041142:	40de      	lsrs	r6, r3
10041144:	3908      	subs	r1, #8
10041146:	4088      	lsls	r0, r1
10041148:	0033      	movs	r3, r6
1004114a:	4303      	orrs	r3, r0
1004114c:	4699      	mov	r9, r3
1004114e:	0023      	movs	r3, r4
10041150:	408b      	lsls	r3, r1
10041152:	4698      	mov	r8, r3
10041154:	4b25      	ldr	r3, [pc, #148]	@ (100411ec <__aeabi_ddiv+0x230>)
10041156:	2400      	movs	r4, #0
10041158:	1a9b      	subs	r3, r3, r2
1004115a:	469a      	mov	sl, r3
1004115c:	2300      	movs	r3, #0
1004115e:	9303      	str	r3, [sp, #12]
10041160:	e753      	b.n	1004100a <__aeabi_ddiv+0x4e>
10041162:	2300      	movs	r3, #0
10041164:	4698      	mov	r8, r3
10041166:	469a      	mov	sl, r3
10041168:	3301      	adds	r3, #1
1004116a:	2404      	movs	r4, #4
1004116c:	9303      	str	r3, [sp, #12]
1004116e:	e74c      	b.n	1004100a <__aeabi_ddiv+0x4e>
10041170:	2301      	movs	r3, #1
10041172:	431c      	orrs	r4, r3
10041174:	2300      	movs	r3, #0
10041176:	2101      	movs	r1, #1
10041178:	469b      	mov	fp, r3
1004117a:	e764      	b.n	10041046 <__aeabi_ddiv+0x8a>
1004117c:	2303      	movs	r3, #3
1004117e:	0032      	movs	r2, r6
10041180:	2103      	movs	r1, #3
10041182:	431c      	orrs	r4, r3
10041184:	e75f      	b.n	10041046 <__aeabi_ddiv+0x8a>
10041186:	469a      	mov	sl, r3
10041188:	2303      	movs	r3, #3
1004118a:	46d9      	mov	r9, fp
1004118c:	240c      	movs	r4, #12
1004118e:	9303      	str	r3, [sp, #12]
10041190:	e73b      	b.n	1004100a <__aeabi_ddiv+0x4e>
10041192:	2300      	movs	r3, #0
10041194:	2480      	movs	r4, #128	@ 0x80
10041196:	4698      	mov	r8, r3
10041198:	2600      	movs	r6, #0
1004119a:	4b0f      	ldr	r3, [pc, #60]	@ (100411d8 <__aeabi_ddiv+0x21c>)
1004119c:	0324      	lsls	r4, r4, #12
1004119e:	e779      	b.n	10041094 <__aeabi_ddiv+0xd8>
100411a0:	2480      	movs	r4, #128	@ 0x80
100411a2:	465b      	mov	r3, fp
100411a4:	0324      	lsls	r4, r4, #12
100411a6:	431c      	orrs	r4, r3
100411a8:	0324      	lsls	r4, r4, #12
100411aa:	002e      	movs	r6, r5
100411ac:	4690      	mov	r8, r2
100411ae:	4b0a      	ldr	r3, [pc, #40]	@ (100411d8 <__aeabi_ddiv+0x21c>)
100411b0:	0b24      	lsrs	r4, r4, #12
100411b2:	e76f      	b.n	10041094 <__aeabi_ddiv+0xd8>
100411b4:	2480      	movs	r4, #128	@ 0x80
100411b6:	464b      	mov	r3, r9
100411b8:	0324      	lsls	r4, r4, #12
100411ba:	4223      	tst	r3, r4
100411bc:	d002      	beq.n	100411c4 <__aeabi_ddiv+0x208>
100411be:	465b      	mov	r3, fp
100411c0:	4223      	tst	r3, r4
100411c2:	d0f0      	beq.n	100411a6 <__aeabi_ddiv+0x1ea>
100411c4:	2480      	movs	r4, #128	@ 0x80
100411c6:	464b      	mov	r3, r9
100411c8:	0324      	lsls	r4, r4, #12
100411ca:	431c      	orrs	r4, r3
100411cc:	0324      	lsls	r4, r4, #12
100411ce:	9e02      	ldr	r6, [sp, #8]
100411d0:	4b01      	ldr	r3, [pc, #4]	@ (100411d8 <__aeabi_ddiv+0x21c>)
100411d2:	0b24      	lsrs	r4, r4, #12
100411d4:	e75e      	b.n	10041094 <__aeabi_ddiv+0xd8>
100411d6:	46c0      	nop			@ (mov r8, r8)
100411d8:	000007ff 	.word	0x000007ff
100411dc:	fffffc01 	.word	0xfffffc01
100411e0:	10069918 	.word	0x10069918
100411e4:	fffff801 	.word	0xfffff801
100411e8:	000003f3 	.word	0x000003f3
100411ec:	fffffc0d 	.word	0xfffffc0d
100411f0:	45cb      	cmp	fp, r9
100411f2:	d200      	bcs.n	100411f6 <__aeabi_ddiv+0x23a>
100411f4:	e0f8      	b.n	100413e8 <__aeabi_ddiv+0x42c>
100411f6:	d100      	bne.n	100411fa <__aeabi_ddiv+0x23e>
100411f8:	e0f3      	b.n	100413e2 <__aeabi_ddiv+0x426>
100411fa:	2301      	movs	r3, #1
100411fc:	425b      	negs	r3, r3
100411fe:	469c      	mov	ip, r3
10041200:	4644      	mov	r4, r8
10041202:	4648      	mov	r0, r9
10041204:	2500      	movs	r5, #0
10041206:	44e2      	add	sl, ip
10041208:	465b      	mov	r3, fp
1004120a:	0e17      	lsrs	r7, r2, #24
1004120c:	021b      	lsls	r3, r3, #8
1004120e:	431f      	orrs	r7, r3
10041210:	0c19      	lsrs	r1, r3, #16
10041212:	043b      	lsls	r3, r7, #16
10041214:	0212      	lsls	r2, r2, #8
10041216:	9700      	str	r7, [sp, #0]
10041218:	0c1f      	lsrs	r7, r3, #16
1004121a:	4691      	mov	r9, r2
1004121c:	9102      	str	r1, [sp, #8]
1004121e:	9703      	str	r7, [sp, #12]
10041220:	f7ff f894 	bl	1004034c <__aeabi_uidivmod>
10041224:	0002      	movs	r2, r0
10041226:	437a      	muls	r2, r7
10041228:	040b      	lsls	r3, r1, #16
1004122a:	0c21      	lsrs	r1, r4, #16
1004122c:	4680      	mov	r8, r0
1004122e:	4319      	orrs	r1, r3
10041230:	428a      	cmp	r2, r1
10041232:	d909      	bls.n	10041248 <__aeabi_ddiv+0x28c>
10041234:	9f00      	ldr	r7, [sp, #0]
10041236:	2301      	movs	r3, #1
10041238:	46bc      	mov	ip, r7
1004123a:	425b      	negs	r3, r3
1004123c:	4461      	add	r1, ip
1004123e:	469c      	mov	ip, r3
10041240:	44e0      	add	r8, ip
10041242:	428f      	cmp	r7, r1
10041244:	d800      	bhi.n	10041248 <__aeabi_ddiv+0x28c>
10041246:	e15c      	b.n	10041502 <__aeabi_ddiv+0x546>
10041248:	1a88      	subs	r0, r1, r2
1004124a:	9902      	ldr	r1, [sp, #8]
1004124c:	f7ff f87e 	bl	1004034c <__aeabi_uidivmod>
10041250:	9a03      	ldr	r2, [sp, #12]
10041252:	0424      	lsls	r4, r4, #16
10041254:	4342      	muls	r2, r0
10041256:	0409      	lsls	r1, r1, #16
10041258:	0c24      	lsrs	r4, r4, #16
1004125a:	0003      	movs	r3, r0
1004125c:	430c      	orrs	r4, r1
1004125e:	42a2      	cmp	r2, r4
10041260:	d906      	bls.n	10041270 <__aeabi_ddiv+0x2b4>
10041262:	9900      	ldr	r1, [sp, #0]
10041264:	3b01      	subs	r3, #1
10041266:	468c      	mov	ip, r1
10041268:	4464      	add	r4, ip
1004126a:	42a1      	cmp	r1, r4
1004126c:	d800      	bhi.n	10041270 <__aeabi_ddiv+0x2b4>
1004126e:	e142      	b.n	100414f6 <__aeabi_ddiv+0x53a>
10041270:	1aa0      	subs	r0, r4, r2
10041272:	4642      	mov	r2, r8
10041274:	0412      	lsls	r2, r2, #16
10041276:	431a      	orrs	r2, r3
10041278:	4693      	mov	fp, r2
1004127a:	464b      	mov	r3, r9
1004127c:	4659      	mov	r1, fp
1004127e:	0c1b      	lsrs	r3, r3, #16
10041280:	001f      	movs	r7, r3
10041282:	9304      	str	r3, [sp, #16]
10041284:	040b      	lsls	r3, r1, #16
10041286:	4649      	mov	r1, r9
10041288:	0409      	lsls	r1, r1, #16
1004128a:	0c09      	lsrs	r1, r1, #16
1004128c:	000c      	movs	r4, r1
1004128e:	0c1b      	lsrs	r3, r3, #16
10041290:	435c      	muls	r4, r3
10041292:	0c12      	lsrs	r2, r2, #16
10041294:	437b      	muls	r3, r7
10041296:	4688      	mov	r8, r1
10041298:	4351      	muls	r1, r2
1004129a:	437a      	muls	r2, r7
1004129c:	0c27      	lsrs	r7, r4, #16
1004129e:	46bc      	mov	ip, r7
100412a0:	185b      	adds	r3, r3, r1
100412a2:	4463      	add	r3, ip
100412a4:	4299      	cmp	r1, r3
100412a6:	d903      	bls.n	100412b0 <__aeabi_ddiv+0x2f4>
100412a8:	2180      	movs	r1, #128	@ 0x80
100412aa:	0249      	lsls	r1, r1, #9
100412ac:	468c      	mov	ip, r1
100412ae:	4462      	add	r2, ip
100412b0:	0c19      	lsrs	r1, r3, #16
100412b2:	0424      	lsls	r4, r4, #16
100412b4:	041b      	lsls	r3, r3, #16
100412b6:	0c24      	lsrs	r4, r4, #16
100412b8:	188a      	adds	r2, r1, r2
100412ba:	191c      	adds	r4, r3, r4
100412bc:	4290      	cmp	r0, r2
100412be:	d302      	bcc.n	100412c6 <__aeabi_ddiv+0x30a>
100412c0:	d116      	bne.n	100412f0 <__aeabi_ddiv+0x334>
100412c2:	42a5      	cmp	r5, r4
100412c4:	d214      	bcs.n	100412f0 <__aeabi_ddiv+0x334>
100412c6:	465b      	mov	r3, fp
100412c8:	9f00      	ldr	r7, [sp, #0]
100412ca:	3b01      	subs	r3, #1
100412cc:	444d      	add	r5, r9
100412ce:	9305      	str	r3, [sp, #20]
100412d0:	454d      	cmp	r5, r9
100412d2:	419b      	sbcs	r3, r3
100412d4:	46bc      	mov	ip, r7
100412d6:	425b      	negs	r3, r3
100412d8:	4463      	add	r3, ip
100412da:	18c0      	adds	r0, r0, r3
100412dc:	4287      	cmp	r7, r0
100412de:	d300      	bcc.n	100412e2 <__aeabi_ddiv+0x326>
100412e0:	e102      	b.n	100414e8 <__aeabi_ddiv+0x52c>
100412e2:	4282      	cmp	r2, r0
100412e4:	d900      	bls.n	100412e8 <__aeabi_ddiv+0x32c>
100412e6:	e129      	b.n	1004153c <__aeabi_ddiv+0x580>
100412e8:	d100      	bne.n	100412ec <__aeabi_ddiv+0x330>
100412ea:	e124      	b.n	10041536 <__aeabi_ddiv+0x57a>
100412ec:	9b05      	ldr	r3, [sp, #20]
100412ee:	469b      	mov	fp, r3
100412f0:	1b2c      	subs	r4, r5, r4
100412f2:	42a5      	cmp	r5, r4
100412f4:	41ad      	sbcs	r5, r5
100412f6:	9b00      	ldr	r3, [sp, #0]
100412f8:	1a80      	subs	r0, r0, r2
100412fa:	426d      	negs	r5, r5
100412fc:	1b40      	subs	r0, r0, r5
100412fe:	4283      	cmp	r3, r0
10041300:	d100      	bne.n	10041304 <__aeabi_ddiv+0x348>
10041302:	e10f      	b.n	10041524 <__aeabi_ddiv+0x568>
10041304:	9902      	ldr	r1, [sp, #8]
10041306:	f7ff f821 	bl	1004034c <__aeabi_uidivmod>
1004130a:	9a03      	ldr	r2, [sp, #12]
1004130c:	040b      	lsls	r3, r1, #16
1004130e:	4342      	muls	r2, r0
10041310:	0c21      	lsrs	r1, r4, #16
10041312:	0005      	movs	r5, r0
10041314:	4319      	orrs	r1, r3
10041316:	428a      	cmp	r2, r1
10041318:	d900      	bls.n	1004131c <__aeabi_ddiv+0x360>
1004131a:	e0cb      	b.n	100414b4 <__aeabi_ddiv+0x4f8>
1004131c:	1a88      	subs	r0, r1, r2
1004131e:	9902      	ldr	r1, [sp, #8]
10041320:	f7ff f814 	bl	1004034c <__aeabi_uidivmod>
10041324:	9a03      	ldr	r2, [sp, #12]
10041326:	0424      	lsls	r4, r4, #16
10041328:	4342      	muls	r2, r0
1004132a:	0409      	lsls	r1, r1, #16
1004132c:	0c24      	lsrs	r4, r4, #16
1004132e:	0003      	movs	r3, r0
10041330:	430c      	orrs	r4, r1
10041332:	42a2      	cmp	r2, r4
10041334:	d900      	bls.n	10041338 <__aeabi_ddiv+0x37c>
10041336:	e0ca      	b.n	100414ce <__aeabi_ddiv+0x512>
10041338:	4641      	mov	r1, r8
1004133a:	1aa4      	subs	r4, r4, r2
1004133c:	042a      	lsls	r2, r5, #16
1004133e:	431a      	orrs	r2, r3
10041340:	9f04      	ldr	r7, [sp, #16]
10041342:	0413      	lsls	r3, r2, #16
10041344:	0c1b      	lsrs	r3, r3, #16
10041346:	4359      	muls	r1, r3
10041348:	4640      	mov	r0, r8
1004134a:	437b      	muls	r3, r7
1004134c:	469c      	mov	ip, r3
1004134e:	0c15      	lsrs	r5, r2, #16
10041350:	4368      	muls	r0, r5
10041352:	0c0b      	lsrs	r3, r1, #16
10041354:	4484      	add	ip, r0
10041356:	4463      	add	r3, ip
10041358:	437d      	muls	r5, r7
1004135a:	4298      	cmp	r0, r3
1004135c:	d903      	bls.n	10041366 <__aeabi_ddiv+0x3aa>
1004135e:	2080      	movs	r0, #128	@ 0x80
10041360:	0240      	lsls	r0, r0, #9
10041362:	4684      	mov	ip, r0
10041364:	4465      	add	r5, ip
10041366:	0c18      	lsrs	r0, r3, #16
10041368:	0409      	lsls	r1, r1, #16
1004136a:	041b      	lsls	r3, r3, #16
1004136c:	0c09      	lsrs	r1, r1, #16
1004136e:	1940      	adds	r0, r0, r5
10041370:	185b      	adds	r3, r3, r1
10041372:	4284      	cmp	r4, r0
10041374:	d327      	bcc.n	100413c6 <__aeabi_ddiv+0x40a>
10041376:	d023      	beq.n	100413c0 <__aeabi_ddiv+0x404>
10041378:	2301      	movs	r3, #1
1004137a:	0035      	movs	r5, r6
1004137c:	431a      	orrs	r2, r3
1004137e:	4b94      	ldr	r3, [pc, #592]	@ (100415d0 <__aeabi_ddiv+0x614>)
10041380:	4453      	add	r3, sl
10041382:	2b00      	cmp	r3, #0
10041384:	dd60      	ble.n	10041448 <__aeabi_ddiv+0x48c>
10041386:	0751      	lsls	r1, r2, #29
10041388:	d000      	beq.n	1004138c <__aeabi_ddiv+0x3d0>
1004138a:	e086      	b.n	1004149a <__aeabi_ddiv+0x4de>
1004138c:	002e      	movs	r6, r5
1004138e:	08d1      	lsrs	r1, r2, #3
10041390:	465a      	mov	r2, fp
10041392:	01d2      	lsls	r2, r2, #7
10041394:	d506      	bpl.n	100413a4 <__aeabi_ddiv+0x3e8>
10041396:	465a      	mov	r2, fp
10041398:	4b8e      	ldr	r3, [pc, #568]	@ (100415d4 <__aeabi_ddiv+0x618>)
1004139a:	401a      	ands	r2, r3
1004139c:	2380      	movs	r3, #128	@ 0x80
1004139e:	4693      	mov	fp, r2
100413a0:	00db      	lsls	r3, r3, #3
100413a2:	4453      	add	r3, sl
100413a4:	4a8c      	ldr	r2, [pc, #560]	@ (100415d8 <__aeabi_ddiv+0x61c>)
100413a6:	4293      	cmp	r3, r2
100413a8:	dd00      	ble.n	100413ac <__aeabi_ddiv+0x3f0>
100413aa:	e680      	b.n	100410ae <__aeabi_ddiv+0xf2>
100413ac:	465a      	mov	r2, fp
100413ae:	0752      	lsls	r2, r2, #29
100413b0:	430a      	orrs	r2, r1
100413b2:	4690      	mov	r8, r2
100413b4:	465a      	mov	r2, fp
100413b6:	055b      	lsls	r3, r3, #21
100413b8:	0254      	lsls	r4, r2, #9
100413ba:	0b24      	lsrs	r4, r4, #12
100413bc:	0d5b      	lsrs	r3, r3, #21
100413be:	e669      	b.n	10041094 <__aeabi_ddiv+0xd8>
100413c0:	0035      	movs	r5, r6
100413c2:	2b00      	cmp	r3, #0
100413c4:	d0db      	beq.n	1004137e <__aeabi_ddiv+0x3c2>
100413c6:	9d00      	ldr	r5, [sp, #0]
100413c8:	1e51      	subs	r1, r2, #1
100413ca:	46ac      	mov	ip, r5
100413cc:	4464      	add	r4, ip
100413ce:	42ac      	cmp	r4, r5
100413d0:	d200      	bcs.n	100413d4 <__aeabi_ddiv+0x418>
100413d2:	e09e      	b.n	10041512 <__aeabi_ddiv+0x556>
100413d4:	4284      	cmp	r4, r0
100413d6:	d200      	bcs.n	100413da <__aeabi_ddiv+0x41e>
100413d8:	e0e1      	b.n	1004159e <__aeabi_ddiv+0x5e2>
100413da:	d100      	bne.n	100413de <__aeabi_ddiv+0x422>
100413dc:	e0ee      	b.n	100415bc <__aeabi_ddiv+0x600>
100413de:	000a      	movs	r2, r1
100413e0:	e7ca      	b.n	10041378 <__aeabi_ddiv+0x3bc>
100413e2:	4542      	cmp	r2, r8
100413e4:	d900      	bls.n	100413e8 <__aeabi_ddiv+0x42c>
100413e6:	e708      	b.n	100411fa <__aeabi_ddiv+0x23e>
100413e8:	464b      	mov	r3, r9
100413ea:	07dc      	lsls	r4, r3, #31
100413ec:	0858      	lsrs	r0, r3, #1
100413ee:	4643      	mov	r3, r8
100413f0:	085b      	lsrs	r3, r3, #1
100413f2:	431c      	orrs	r4, r3
100413f4:	4643      	mov	r3, r8
100413f6:	07dd      	lsls	r5, r3, #31
100413f8:	e706      	b.n	10041208 <__aeabi_ddiv+0x24c>
100413fa:	f7ff f8e1 	bl	100405c0 <__clzsi2>
100413fe:	2315      	movs	r3, #21
10041400:	469c      	mov	ip, r3
10041402:	4484      	add	ip, r0
10041404:	0002      	movs	r2, r0
10041406:	4663      	mov	r3, ip
10041408:	3220      	adds	r2, #32
1004140a:	2b1c      	cmp	r3, #28
1004140c:	dc00      	bgt.n	10041410 <__aeabi_ddiv+0x454>
1004140e:	e692      	b.n	10041136 <__aeabi_ddiv+0x17a>
10041410:	0023      	movs	r3, r4
10041412:	3808      	subs	r0, #8
10041414:	4083      	lsls	r3, r0
10041416:	4699      	mov	r9, r3
10041418:	2300      	movs	r3, #0
1004141a:	4698      	mov	r8, r3
1004141c:	e69a      	b.n	10041154 <__aeabi_ddiv+0x198>
1004141e:	f7ff f8cf 	bl	100405c0 <__clzsi2>
10041422:	0002      	movs	r2, r0
10041424:	0003      	movs	r3, r0
10041426:	3215      	adds	r2, #21
10041428:	3320      	adds	r3, #32
1004142a:	2a1c      	cmp	r2, #28
1004142c:	dc00      	bgt.n	10041430 <__aeabi_ddiv+0x474>
1004142e:	e65f      	b.n	100410f0 <__aeabi_ddiv+0x134>
10041430:	9900      	ldr	r1, [sp, #0]
10041432:	3808      	subs	r0, #8
10041434:	4081      	lsls	r1, r0
10041436:	2200      	movs	r2, #0
10041438:	468b      	mov	fp, r1
1004143a:	e666      	b.n	1004110a <__aeabi_ddiv+0x14e>
1004143c:	2200      	movs	r2, #0
1004143e:	002e      	movs	r6, r5
10041440:	2400      	movs	r4, #0
10041442:	4690      	mov	r8, r2
10041444:	4b65      	ldr	r3, [pc, #404]	@ (100415dc <__aeabi_ddiv+0x620>)
10041446:	e625      	b.n	10041094 <__aeabi_ddiv+0xd8>
10041448:	002e      	movs	r6, r5
1004144a:	2101      	movs	r1, #1
1004144c:	1ac9      	subs	r1, r1, r3
1004144e:	2938      	cmp	r1, #56	@ 0x38
10041450:	dd00      	ble.n	10041454 <__aeabi_ddiv+0x498>
10041452:	e61b      	b.n	1004108c <__aeabi_ddiv+0xd0>
10041454:	291f      	cmp	r1, #31
10041456:	dc7e      	bgt.n	10041556 <__aeabi_ddiv+0x59a>
10041458:	4861      	ldr	r0, [pc, #388]	@ (100415e0 <__aeabi_ddiv+0x624>)
1004145a:	0014      	movs	r4, r2
1004145c:	4450      	add	r0, sl
1004145e:	465b      	mov	r3, fp
10041460:	4082      	lsls	r2, r0
10041462:	4083      	lsls	r3, r0
10041464:	40cc      	lsrs	r4, r1
10041466:	1e50      	subs	r0, r2, #1
10041468:	4182      	sbcs	r2, r0
1004146a:	4323      	orrs	r3, r4
1004146c:	431a      	orrs	r2, r3
1004146e:	465b      	mov	r3, fp
10041470:	40cb      	lsrs	r3, r1
10041472:	0751      	lsls	r1, r2, #29
10041474:	d009      	beq.n	1004148a <__aeabi_ddiv+0x4ce>
10041476:	210f      	movs	r1, #15
10041478:	4011      	ands	r1, r2
1004147a:	2904      	cmp	r1, #4
1004147c:	d005      	beq.n	1004148a <__aeabi_ddiv+0x4ce>
1004147e:	1d11      	adds	r1, r2, #4
10041480:	4291      	cmp	r1, r2
10041482:	4192      	sbcs	r2, r2
10041484:	4252      	negs	r2, r2
10041486:	189b      	adds	r3, r3, r2
10041488:	000a      	movs	r2, r1
1004148a:	0219      	lsls	r1, r3, #8
1004148c:	d400      	bmi.n	10041490 <__aeabi_ddiv+0x4d4>
1004148e:	e09b      	b.n	100415c8 <__aeabi_ddiv+0x60c>
10041490:	2200      	movs	r2, #0
10041492:	2301      	movs	r3, #1
10041494:	2400      	movs	r4, #0
10041496:	4690      	mov	r8, r2
10041498:	e5fc      	b.n	10041094 <__aeabi_ddiv+0xd8>
1004149a:	210f      	movs	r1, #15
1004149c:	4011      	ands	r1, r2
1004149e:	2904      	cmp	r1, #4
100414a0:	d100      	bne.n	100414a4 <__aeabi_ddiv+0x4e8>
100414a2:	e773      	b.n	1004138c <__aeabi_ddiv+0x3d0>
100414a4:	1d11      	adds	r1, r2, #4
100414a6:	4291      	cmp	r1, r2
100414a8:	4192      	sbcs	r2, r2
100414aa:	4252      	negs	r2, r2
100414ac:	002e      	movs	r6, r5
100414ae:	08c9      	lsrs	r1, r1, #3
100414b0:	4493      	add	fp, r2
100414b2:	e76d      	b.n	10041390 <__aeabi_ddiv+0x3d4>
100414b4:	9b00      	ldr	r3, [sp, #0]
100414b6:	3d01      	subs	r5, #1
100414b8:	469c      	mov	ip, r3
100414ba:	4461      	add	r1, ip
100414bc:	428b      	cmp	r3, r1
100414be:	d900      	bls.n	100414c2 <__aeabi_ddiv+0x506>
100414c0:	e72c      	b.n	1004131c <__aeabi_ddiv+0x360>
100414c2:	428a      	cmp	r2, r1
100414c4:	d800      	bhi.n	100414c8 <__aeabi_ddiv+0x50c>
100414c6:	e729      	b.n	1004131c <__aeabi_ddiv+0x360>
100414c8:	1e85      	subs	r5, r0, #2
100414ca:	4461      	add	r1, ip
100414cc:	e726      	b.n	1004131c <__aeabi_ddiv+0x360>
100414ce:	9900      	ldr	r1, [sp, #0]
100414d0:	3b01      	subs	r3, #1
100414d2:	468c      	mov	ip, r1
100414d4:	4464      	add	r4, ip
100414d6:	42a1      	cmp	r1, r4
100414d8:	d900      	bls.n	100414dc <__aeabi_ddiv+0x520>
100414da:	e72d      	b.n	10041338 <__aeabi_ddiv+0x37c>
100414dc:	42a2      	cmp	r2, r4
100414de:	d800      	bhi.n	100414e2 <__aeabi_ddiv+0x526>
100414e0:	e72a      	b.n	10041338 <__aeabi_ddiv+0x37c>
100414e2:	1e83      	subs	r3, r0, #2
100414e4:	4464      	add	r4, ip
100414e6:	e727      	b.n	10041338 <__aeabi_ddiv+0x37c>
100414e8:	4287      	cmp	r7, r0
100414ea:	d000      	beq.n	100414ee <__aeabi_ddiv+0x532>
100414ec:	e6fe      	b.n	100412ec <__aeabi_ddiv+0x330>
100414ee:	45a9      	cmp	r9, r5
100414f0:	d900      	bls.n	100414f4 <__aeabi_ddiv+0x538>
100414f2:	e6fb      	b.n	100412ec <__aeabi_ddiv+0x330>
100414f4:	e6f5      	b.n	100412e2 <__aeabi_ddiv+0x326>
100414f6:	42a2      	cmp	r2, r4
100414f8:	d800      	bhi.n	100414fc <__aeabi_ddiv+0x540>
100414fa:	e6b9      	b.n	10041270 <__aeabi_ddiv+0x2b4>
100414fc:	1e83      	subs	r3, r0, #2
100414fe:	4464      	add	r4, ip
10041500:	e6b6      	b.n	10041270 <__aeabi_ddiv+0x2b4>
10041502:	428a      	cmp	r2, r1
10041504:	d800      	bhi.n	10041508 <__aeabi_ddiv+0x54c>
10041506:	e69f      	b.n	10041248 <__aeabi_ddiv+0x28c>
10041508:	46bc      	mov	ip, r7
1004150a:	1e83      	subs	r3, r0, #2
1004150c:	4698      	mov	r8, r3
1004150e:	4461      	add	r1, ip
10041510:	e69a      	b.n	10041248 <__aeabi_ddiv+0x28c>
10041512:	000a      	movs	r2, r1
10041514:	4284      	cmp	r4, r0
10041516:	d000      	beq.n	1004151a <__aeabi_ddiv+0x55e>
10041518:	e72e      	b.n	10041378 <__aeabi_ddiv+0x3bc>
1004151a:	454b      	cmp	r3, r9
1004151c:	d000      	beq.n	10041520 <__aeabi_ddiv+0x564>
1004151e:	e72b      	b.n	10041378 <__aeabi_ddiv+0x3bc>
10041520:	0035      	movs	r5, r6
10041522:	e72c      	b.n	1004137e <__aeabi_ddiv+0x3c2>
10041524:	4b2a      	ldr	r3, [pc, #168]	@ (100415d0 <__aeabi_ddiv+0x614>)
10041526:	4a2f      	ldr	r2, [pc, #188]	@ (100415e4 <__aeabi_ddiv+0x628>)
10041528:	4453      	add	r3, sl
1004152a:	4592      	cmp	sl, r2
1004152c:	db43      	blt.n	100415b6 <__aeabi_ddiv+0x5fa>
1004152e:	2201      	movs	r2, #1
10041530:	2100      	movs	r1, #0
10041532:	4493      	add	fp, r2
10041534:	e72c      	b.n	10041390 <__aeabi_ddiv+0x3d4>
10041536:	42ac      	cmp	r4, r5
10041538:	d800      	bhi.n	1004153c <__aeabi_ddiv+0x580>
1004153a:	e6d7      	b.n	100412ec <__aeabi_ddiv+0x330>
1004153c:	2302      	movs	r3, #2
1004153e:	425b      	negs	r3, r3
10041540:	469c      	mov	ip, r3
10041542:	9900      	ldr	r1, [sp, #0]
10041544:	444d      	add	r5, r9
10041546:	454d      	cmp	r5, r9
10041548:	419b      	sbcs	r3, r3
1004154a:	44e3      	add	fp, ip
1004154c:	468c      	mov	ip, r1
1004154e:	425b      	negs	r3, r3
10041550:	4463      	add	r3, ip
10041552:	18c0      	adds	r0, r0, r3
10041554:	e6cc      	b.n	100412f0 <__aeabi_ddiv+0x334>
10041556:	201f      	movs	r0, #31
10041558:	4240      	negs	r0, r0
1004155a:	1ac3      	subs	r3, r0, r3
1004155c:	4658      	mov	r0, fp
1004155e:	40d8      	lsrs	r0, r3
10041560:	2920      	cmp	r1, #32
10041562:	d004      	beq.n	1004156e <__aeabi_ddiv+0x5b2>
10041564:	4659      	mov	r1, fp
10041566:	4b20      	ldr	r3, [pc, #128]	@ (100415e8 <__aeabi_ddiv+0x62c>)
10041568:	4453      	add	r3, sl
1004156a:	4099      	lsls	r1, r3
1004156c:	430a      	orrs	r2, r1
1004156e:	1e53      	subs	r3, r2, #1
10041570:	419a      	sbcs	r2, r3
10041572:	2307      	movs	r3, #7
10041574:	0019      	movs	r1, r3
10041576:	4302      	orrs	r2, r0
10041578:	2400      	movs	r4, #0
1004157a:	4011      	ands	r1, r2
1004157c:	4213      	tst	r3, r2
1004157e:	d009      	beq.n	10041594 <__aeabi_ddiv+0x5d8>
10041580:	3308      	adds	r3, #8
10041582:	4013      	ands	r3, r2
10041584:	2b04      	cmp	r3, #4
10041586:	d01d      	beq.n	100415c4 <__aeabi_ddiv+0x608>
10041588:	1d13      	adds	r3, r2, #4
1004158a:	4293      	cmp	r3, r2
1004158c:	4189      	sbcs	r1, r1
1004158e:	001a      	movs	r2, r3
10041590:	4249      	negs	r1, r1
10041592:	0749      	lsls	r1, r1, #29
10041594:	08d2      	lsrs	r2, r2, #3
10041596:	430a      	orrs	r2, r1
10041598:	4690      	mov	r8, r2
1004159a:	2300      	movs	r3, #0
1004159c:	e57a      	b.n	10041094 <__aeabi_ddiv+0xd8>
1004159e:	4649      	mov	r1, r9
100415a0:	9f00      	ldr	r7, [sp, #0]
100415a2:	004d      	lsls	r5, r1, #1
100415a4:	454d      	cmp	r5, r9
100415a6:	4189      	sbcs	r1, r1
100415a8:	46bc      	mov	ip, r7
100415aa:	4249      	negs	r1, r1
100415ac:	4461      	add	r1, ip
100415ae:	46a9      	mov	r9, r5
100415b0:	3a02      	subs	r2, #2
100415b2:	1864      	adds	r4, r4, r1
100415b4:	e7ae      	b.n	10041514 <__aeabi_ddiv+0x558>
100415b6:	2201      	movs	r2, #1
100415b8:	4252      	negs	r2, r2
100415ba:	e746      	b.n	1004144a <__aeabi_ddiv+0x48e>
100415bc:	4599      	cmp	r9, r3
100415be:	d3ee      	bcc.n	1004159e <__aeabi_ddiv+0x5e2>
100415c0:	000a      	movs	r2, r1
100415c2:	e7aa      	b.n	1004151a <__aeabi_ddiv+0x55e>
100415c4:	2100      	movs	r1, #0
100415c6:	e7e5      	b.n	10041594 <__aeabi_ddiv+0x5d8>
100415c8:	0759      	lsls	r1, r3, #29
100415ca:	025b      	lsls	r3, r3, #9
100415cc:	0b1c      	lsrs	r4, r3, #12
100415ce:	e7e1      	b.n	10041594 <__aeabi_ddiv+0x5d8>
100415d0:	000003ff 	.word	0x000003ff
100415d4:	feffffff 	.word	0xfeffffff
100415d8:	000007fe 	.word	0x000007fe
100415dc:	000007ff 	.word	0x000007ff
100415e0:	0000041e 	.word	0x0000041e
100415e4:	fffffc02 	.word	0xfffffc02
100415e8:	0000043e 	.word	0x0000043e

100415ec <__eqdf2>:
100415ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100415ee:	4657      	mov	r7, sl
100415f0:	46de      	mov	lr, fp
100415f2:	464e      	mov	r6, r9
100415f4:	4645      	mov	r5, r8
100415f6:	b5e0      	push	{r5, r6, r7, lr}
100415f8:	000d      	movs	r5, r1
100415fa:	0004      	movs	r4, r0
100415fc:	0fe8      	lsrs	r0, r5, #31
100415fe:	4683      	mov	fp, r0
10041600:	0309      	lsls	r1, r1, #12
10041602:	0fd8      	lsrs	r0, r3, #31
10041604:	0b09      	lsrs	r1, r1, #12
10041606:	4682      	mov	sl, r0
10041608:	4819      	ldr	r0, [pc, #100]	@ (10041670 <__eqdf2+0x84>)
1004160a:	468c      	mov	ip, r1
1004160c:	031f      	lsls	r7, r3, #12
1004160e:	0069      	lsls	r1, r5, #1
10041610:	005e      	lsls	r6, r3, #1
10041612:	0d49      	lsrs	r1, r1, #21
10041614:	0b3f      	lsrs	r7, r7, #12
10041616:	0d76      	lsrs	r6, r6, #21
10041618:	4281      	cmp	r1, r0
1004161a:	d018      	beq.n	1004164e <__eqdf2+0x62>
1004161c:	4286      	cmp	r6, r0
1004161e:	d00f      	beq.n	10041640 <__eqdf2+0x54>
10041620:	2001      	movs	r0, #1
10041622:	42b1      	cmp	r1, r6
10041624:	d10d      	bne.n	10041642 <__eqdf2+0x56>
10041626:	45bc      	cmp	ip, r7
10041628:	d10b      	bne.n	10041642 <__eqdf2+0x56>
1004162a:	4294      	cmp	r4, r2
1004162c:	d109      	bne.n	10041642 <__eqdf2+0x56>
1004162e:	45d3      	cmp	fp, sl
10041630:	d01c      	beq.n	1004166c <__eqdf2+0x80>
10041632:	2900      	cmp	r1, #0
10041634:	d105      	bne.n	10041642 <__eqdf2+0x56>
10041636:	4660      	mov	r0, ip
10041638:	4320      	orrs	r0, r4
1004163a:	1e43      	subs	r3, r0, #1
1004163c:	4198      	sbcs	r0, r3
1004163e:	e000      	b.n	10041642 <__eqdf2+0x56>
10041640:	2001      	movs	r0, #1
10041642:	bcf0      	pop	{r4, r5, r6, r7}
10041644:	46bb      	mov	fp, r7
10041646:	46b2      	mov	sl, r6
10041648:	46a9      	mov	r9, r5
1004164a:	46a0      	mov	r8, r4
1004164c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004164e:	2001      	movs	r0, #1
10041650:	428e      	cmp	r6, r1
10041652:	d1f6      	bne.n	10041642 <__eqdf2+0x56>
10041654:	4661      	mov	r1, ip
10041656:	4339      	orrs	r1, r7
10041658:	000f      	movs	r7, r1
1004165a:	4317      	orrs	r7, r2
1004165c:	4327      	orrs	r7, r4
1004165e:	d1f0      	bne.n	10041642 <__eqdf2+0x56>
10041660:	465b      	mov	r3, fp
10041662:	4652      	mov	r2, sl
10041664:	1a98      	subs	r0, r3, r2
10041666:	1e43      	subs	r3, r0, #1
10041668:	4198      	sbcs	r0, r3
1004166a:	e7ea      	b.n	10041642 <__eqdf2+0x56>
1004166c:	2000      	movs	r0, #0
1004166e:	e7e8      	b.n	10041642 <__eqdf2+0x56>
10041670:	000007ff 	.word	0x000007ff

10041674 <__gedf2>:
10041674:	b5f0      	push	{r4, r5, r6, r7, lr}
10041676:	4657      	mov	r7, sl
10041678:	464e      	mov	r6, r9
1004167a:	4645      	mov	r5, r8
1004167c:	46de      	mov	lr, fp
1004167e:	b5e0      	push	{r5, r6, r7, lr}
10041680:	000d      	movs	r5, r1
10041682:	030e      	lsls	r6, r1, #12
10041684:	0049      	lsls	r1, r1, #1
10041686:	0d49      	lsrs	r1, r1, #21
10041688:	468a      	mov	sl, r1
1004168a:	0fdf      	lsrs	r7, r3, #31
1004168c:	0fe9      	lsrs	r1, r5, #31
1004168e:	46bc      	mov	ip, r7
10041690:	b083      	sub	sp, #12
10041692:	4f2f      	ldr	r7, [pc, #188]	@ (10041750 <__gedf2+0xdc>)
10041694:	0004      	movs	r4, r0
10041696:	4680      	mov	r8, r0
10041698:	9101      	str	r1, [sp, #4]
1004169a:	0058      	lsls	r0, r3, #1
1004169c:	0319      	lsls	r1, r3, #12
1004169e:	4691      	mov	r9, r2
100416a0:	0b36      	lsrs	r6, r6, #12
100416a2:	0b09      	lsrs	r1, r1, #12
100416a4:	0d40      	lsrs	r0, r0, #21
100416a6:	45ba      	cmp	sl, r7
100416a8:	d01d      	beq.n	100416e6 <__gedf2+0x72>
100416aa:	42b8      	cmp	r0, r7
100416ac:	d00d      	beq.n	100416ca <__gedf2+0x56>
100416ae:	4657      	mov	r7, sl
100416b0:	2f00      	cmp	r7, #0
100416b2:	d12a      	bne.n	1004170a <__gedf2+0x96>
100416b4:	4334      	orrs	r4, r6
100416b6:	2800      	cmp	r0, #0
100416b8:	d124      	bne.n	10041704 <__gedf2+0x90>
100416ba:	430a      	orrs	r2, r1
100416bc:	d036      	beq.n	1004172c <__gedf2+0xb8>
100416be:	2c00      	cmp	r4, #0
100416c0:	d141      	bne.n	10041746 <__gedf2+0xd2>
100416c2:	4663      	mov	r3, ip
100416c4:	0058      	lsls	r0, r3, #1
100416c6:	3801      	subs	r0, #1
100416c8:	e015      	b.n	100416f6 <__gedf2+0x82>
100416ca:	4311      	orrs	r1, r2
100416cc:	d138      	bne.n	10041740 <__gedf2+0xcc>
100416ce:	4653      	mov	r3, sl
100416d0:	2b00      	cmp	r3, #0
100416d2:	d101      	bne.n	100416d8 <__gedf2+0x64>
100416d4:	4326      	orrs	r6, r4
100416d6:	d0f4      	beq.n	100416c2 <__gedf2+0x4e>
100416d8:	9b01      	ldr	r3, [sp, #4]
100416da:	4563      	cmp	r3, ip
100416dc:	d107      	bne.n	100416ee <__gedf2+0x7a>
100416de:	9b01      	ldr	r3, [sp, #4]
100416e0:	0058      	lsls	r0, r3, #1
100416e2:	3801      	subs	r0, #1
100416e4:	e007      	b.n	100416f6 <__gedf2+0x82>
100416e6:	4326      	orrs	r6, r4
100416e8:	d12a      	bne.n	10041740 <__gedf2+0xcc>
100416ea:	4550      	cmp	r0, sl
100416ec:	d021      	beq.n	10041732 <__gedf2+0xbe>
100416ee:	2001      	movs	r0, #1
100416f0:	9b01      	ldr	r3, [sp, #4]
100416f2:	425f      	negs	r7, r3
100416f4:	4338      	orrs	r0, r7
100416f6:	b003      	add	sp, #12
100416f8:	bcf0      	pop	{r4, r5, r6, r7}
100416fa:	46bb      	mov	fp, r7
100416fc:	46b2      	mov	sl, r6
100416fe:	46a9      	mov	r9, r5
10041700:	46a0      	mov	r8, r4
10041702:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041704:	2c00      	cmp	r4, #0
10041706:	d0dc      	beq.n	100416c2 <__gedf2+0x4e>
10041708:	e7e6      	b.n	100416d8 <__gedf2+0x64>
1004170a:	2800      	cmp	r0, #0
1004170c:	d0ef      	beq.n	100416ee <__gedf2+0x7a>
1004170e:	9b01      	ldr	r3, [sp, #4]
10041710:	4563      	cmp	r3, ip
10041712:	d1ec      	bne.n	100416ee <__gedf2+0x7a>
10041714:	4582      	cmp	sl, r0
10041716:	dcea      	bgt.n	100416ee <__gedf2+0x7a>
10041718:	dbe1      	blt.n	100416de <__gedf2+0x6a>
1004171a:	428e      	cmp	r6, r1
1004171c:	d8e7      	bhi.n	100416ee <__gedf2+0x7a>
1004171e:	d1de      	bne.n	100416de <__gedf2+0x6a>
10041720:	45c8      	cmp	r8, r9
10041722:	d8e4      	bhi.n	100416ee <__gedf2+0x7a>
10041724:	2000      	movs	r0, #0
10041726:	45c8      	cmp	r8, r9
10041728:	d2e5      	bcs.n	100416f6 <__gedf2+0x82>
1004172a:	e7d8      	b.n	100416de <__gedf2+0x6a>
1004172c:	2c00      	cmp	r4, #0
1004172e:	d0e2      	beq.n	100416f6 <__gedf2+0x82>
10041730:	e7dd      	b.n	100416ee <__gedf2+0x7a>
10041732:	4311      	orrs	r1, r2
10041734:	d104      	bne.n	10041740 <__gedf2+0xcc>
10041736:	9b01      	ldr	r3, [sp, #4]
10041738:	4563      	cmp	r3, ip
1004173a:	d1d8      	bne.n	100416ee <__gedf2+0x7a>
1004173c:	2000      	movs	r0, #0
1004173e:	e7da      	b.n	100416f6 <__gedf2+0x82>
10041740:	2002      	movs	r0, #2
10041742:	4240      	negs	r0, r0
10041744:	e7d7      	b.n	100416f6 <__gedf2+0x82>
10041746:	9b01      	ldr	r3, [sp, #4]
10041748:	4563      	cmp	r3, ip
1004174a:	d0e6      	beq.n	1004171a <__gedf2+0xa6>
1004174c:	e7cf      	b.n	100416ee <__gedf2+0x7a>
1004174e:	46c0      	nop			@ (mov r8, r8)
10041750:	000007ff 	.word	0x000007ff

10041754 <__ledf2>:
10041754:	b5f0      	push	{r4, r5, r6, r7, lr}
10041756:	4657      	mov	r7, sl
10041758:	464e      	mov	r6, r9
1004175a:	4645      	mov	r5, r8
1004175c:	46de      	mov	lr, fp
1004175e:	b5e0      	push	{r5, r6, r7, lr}
10041760:	000d      	movs	r5, r1
10041762:	030e      	lsls	r6, r1, #12
10041764:	0049      	lsls	r1, r1, #1
10041766:	0d49      	lsrs	r1, r1, #21
10041768:	468a      	mov	sl, r1
1004176a:	0fdf      	lsrs	r7, r3, #31
1004176c:	0fe9      	lsrs	r1, r5, #31
1004176e:	46bc      	mov	ip, r7
10041770:	b083      	sub	sp, #12
10041772:	4f2e      	ldr	r7, [pc, #184]	@ (1004182c <__ledf2+0xd8>)
10041774:	0004      	movs	r4, r0
10041776:	4680      	mov	r8, r0
10041778:	9101      	str	r1, [sp, #4]
1004177a:	0058      	lsls	r0, r3, #1
1004177c:	0319      	lsls	r1, r3, #12
1004177e:	4691      	mov	r9, r2
10041780:	0b36      	lsrs	r6, r6, #12
10041782:	0b09      	lsrs	r1, r1, #12
10041784:	0d40      	lsrs	r0, r0, #21
10041786:	45ba      	cmp	sl, r7
10041788:	d01e      	beq.n	100417c8 <__ledf2+0x74>
1004178a:	42b8      	cmp	r0, r7
1004178c:	d00d      	beq.n	100417aa <__ledf2+0x56>
1004178e:	4657      	mov	r7, sl
10041790:	2f00      	cmp	r7, #0
10041792:	d127      	bne.n	100417e4 <__ledf2+0x90>
10041794:	4334      	orrs	r4, r6
10041796:	2800      	cmp	r0, #0
10041798:	d133      	bne.n	10041802 <__ledf2+0xae>
1004179a:	430a      	orrs	r2, r1
1004179c:	d034      	beq.n	10041808 <__ledf2+0xb4>
1004179e:	2c00      	cmp	r4, #0
100417a0:	d140      	bne.n	10041824 <__ledf2+0xd0>
100417a2:	4663      	mov	r3, ip
100417a4:	0058      	lsls	r0, r3, #1
100417a6:	3801      	subs	r0, #1
100417a8:	e015      	b.n	100417d6 <__ledf2+0x82>
100417aa:	4311      	orrs	r1, r2
100417ac:	d112      	bne.n	100417d4 <__ledf2+0x80>
100417ae:	4653      	mov	r3, sl
100417b0:	2b00      	cmp	r3, #0
100417b2:	d101      	bne.n	100417b8 <__ledf2+0x64>
100417b4:	4326      	orrs	r6, r4
100417b6:	d0f4      	beq.n	100417a2 <__ledf2+0x4e>
100417b8:	9b01      	ldr	r3, [sp, #4]
100417ba:	4563      	cmp	r3, ip
100417bc:	d01d      	beq.n	100417fa <__ledf2+0xa6>
100417be:	2001      	movs	r0, #1
100417c0:	9b01      	ldr	r3, [sp, #4]
100417c2:	425f      	negs	r7, r3
100417c4:	4338      	orrs	r0, r7
100417c6:	e006      	b.n	100417d6 <__ledf2+0x82>
100417c8:	4326      	orrs	r6, r4
100417ca:	d103      	bne.n	100417d4 <__ledf2+0x80>
100417cc:	4550      	cmp	r0, sl
100417ce:	d1f6      	bne.n	100417be <__ledf2+0x6a>
100417d0:	4311      	orrs	r1, r2
100417d2:	d01c      	beq.n	1004180e <__ledf2+0xba>
100417d4:	2002      	movs	r0, #2
100417d6:	b003      	add	sp, #12
100417d8:	bcf0      	pop	{r4, r5, r6, r7}
100417da:	46bb      	mov	fp, r7
100417dc:	46b2      	mov	sl, r6
100417de:	46a9      	mov	r9, r5
100417e0:	46a0      	mov	r8, r4
100417e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100417e4:	2800      	cmp	r0, #0
100417e6:	d0ea      	beq.n	100417be <__ledf2+0x6a>
100417e8:	9b01      	ldr	r3, [sp, #4]
100417ea:	4563      	cmp	r3, ip
100417ec:	d1e7      	bne.n	100417be <__ledf2+0x6a>
100417ee:	4582      	cmp	sl, r0
100417f0:	dce5      	bgt.n	100417be <__ledf2+0x6a>
100417f2:	db02      	blt.n	100417fa <__ledf2+0xa6>
100417f4:	428e      	cmp	r6, r1
100417f6:	d8e2      	bhi.n	100417be <__ledf2+0x6a>
100417f8:	d00e      	beq.n	10041818 <__ledf2+0xc4>
100417fa:	9b01      	ldr	r3, [sp, #4]
100417fc:	0058      	lsls	r0, r3, #1
100417fe:	3801      	subs	r0, #1
10041800:	e7e9      	b.n	100417d6 <__ledf2+0x82>
10041802:	2c00      	cmp	r4, #0
10041804:	d0cd      	beq.n	100417a2 <__ledf2+0x4e>
10041806:	e7d7      	b.n	100417b8 <__ledf2+0x64>
10041808:	2c00      	cmp	r4, #0
1004180a:	d0e4      	beq.n	100417d6 <__ledf2+0x82>
1004180c:	e7d7      	b.n	100417be <__ledf2+0x6a>
1004180e:	9b01      	ldr	r3, [sp, #4]
10041810:	2000      	movs	r0, #0
10041812:	4563      	cmp	r3, ip
10041814:	d0df      	beq.n	100417d6 <__ledf2+0x82>
10041816:	e7d2      	b.n	100417be <__ledf2+0x6a>
10041818:	45c8      	cmp	r8, r9
1004181a:	d8d0      	bhi.n	100417be <__ledf2+0x6a>
1004181c:	2000      	movs	r0, #0
1004181e:	45c8      	cmp	r8, r9
10041820:	d2d9      	bcs.n	100417d6 <__ledf2+0x82>
10041822:	e7ea      	b.n	100417fa <__ledf2+0xa6>
10041824:	9b01      	ldr	r3, [sp, #4]
10041826:	4563      	cmp	r3, ip
10041828:	d0e4      	beq.n	100417f4 <__ledf2+0xa0>
1004182a:	e7c8      	b.n	100417be <__ledf2+0x6a>
1004182c:	000007ff 	.word	0x000007ff

10041830 <__aeabi_dmul>:
10041830:	b5f0      	push	{r4, r5, r6, r7, lr}
10041832:	4657      	mov	r7, sl
10041834:	464e      	mov	r6, r9
10041836:	46de      	mov	lr, fp
10041838:	4645      	mov	r5, r8
1004183a:	b5e0      	push	{r5, r6, r7, lr}
1004183c:	001f      	movs	r7, r3
1004183e:	030b      	lsls	r3, r1, #12
10041840:	0b1b      	lsrs	r3, r3, #12
10041842:	0016      	movs	r6, r2
10041844:	469a      	mov	sl, r3
10041846:	0fca      	lsrs	r2, r1, #31
10041848:	004b      	lsls	r3, r1, #1
1004184a:	0004      	movs	r4, r0
1004184c:	4691      	mov	r9, r2
1004184e:	b085      	sub	sp, #20
10041850:	0d5b      	lsrs	r3, r3, #21
10041852:	d100      	bne.n	10041856 <__aeabi_dmul+0x26>
10041854:	e1cf      	b.n	10041bf6 <__aeabi_dmul+0x3c6>
10041856:	4acd      	ldr	r2, [pc, #820]	@ (10041b8c <__aeabi_dmul+0x35c>)
10041858:	4293      	cmp	r3, r2
1004185a:	d055      	beq.n	10041908 <__aeabi_dmul+0xd8>
1004185c:	4651      	mov	r1, sl
1004185e:	0f42      	lsrs	r2, r0, #29
10041860:	00c9      	lsls	r1, r1, #3
10041862:	430a      	orrs	r2, r1
10041864:	2180      	movs	r1, #128	@ 0x80
10041866:	0409      	lsls	r1, r1, #16
10041868:	4311      	orrs	r1, r2
1004186a:	00c2      	lsls	r2, r0, #3
1004186c:	4690      	mov	r8, r2
1004186e:	4ac8      	ldr	r2, [pc, #800]	@ (10041b90 <__aeabi_dmul+0x360>)
10041870:	468a      	mov	sl, r1
10041872:	4693      	mov	fp, r2
10041874:	449b      	add	fp, r3
10041876:	2300      	movs	r3, #0
10041878:	2500      	movs	r5, #0
1004187a:	9302      	str	r3, [sp, #8]
1004187c:	033c      	lsls	r4, r7, #12
1004187e:	007b      	lsls	r3, r7, #1
10041880:	0ffa      	lsrs	r2, r7, #31
10041882:	9601      	str	r6, [sp, #4]
10041884:	0b24      	lsrs	r4, r4, #12
10041886:	0d5b      	lsrs	r3, r3, #21
10041888:	9200      	str	r2, [sp, #0]
1004188a:	d100      	bne.n	1004188e <__aeabi_dmul+0x5e>
1004188c:	e188      	b.n	10041ba0 <__aeabi_dmul+0x370>
1004188e:	4abf      	ldr	r2, [pc, #764]	@ (10041b8c <__aeabi_dmul+0x35c>)
10041890:	4293      	cmp	r3, r2
10041892:	d100      	bne.n	10041896 <__aeabi_dmul+0x66>
10041894:	e092      	b.n	100419bc <__aeabi_dmul+0x18c>
10041896:	4abe      	ldr	r2, [pc, #760]	@ (10041b90 <__aeabi_dmul+0x360>)
10041898:	4694      	mov	ip, r2
1004189a:	4463      	add	r3, ip
1004189c:	449b      	add	fp, r3
1004189e:	2d0a      	cmp	r5, #10
100418a0:	dc42      	bgt.n	10041928 <__aeabi_dmul+0xf8>
100418a2:	00e4      	lsls	r4, r4, #3
100418a4:	0f73      	lsrs	r3, r6, #29
100418a6:	4323      	orrs	r3, r4
100418a8:	2480      	movs	r4, #128	@ 0x80
100418aa:	4649      	mov	r1, r9
100418ac:	0424      	lsls	r4, r4, #16
100418ae:	431c      	orrs	r4, r3
100418b0:	00f3      	lsls	r3, r6, #3
100418b2:	9301      	str	r3, [sp, #4]
100418b4:	9b00      	ldr	r3, [sp, #0]
100418b6:	2000      	movs	r0, #0
100418b8:	4059      	eors	r1, r3
100418ba:	b2cb      	uxtb	r3, r1
100418bc:	9303      	str	r3, [sp, #12]
100418be:	2d02      	cmp	r5, #2
100418c0:	dc00      	bgt.n	100418c4 <__aeabi_dmul+0x94>
100418c2:	e094      	b.n	100419ee <__aeabi_dmul+0x1be>
100418c4:	2301      	movs	r3, #1
100418c6:	40ab      	lsls	r3, r5
100418c8:	001d      	movs	r5, r3
100418ca:	23a6      	movs	r3, #166	@ 0xa6
100418cc:	002a      	movs	r2, r5
100418ce:	00db      	lsls	r3, r3, #3
100418d0:	401a      	ands	r2, r3
100418d2:	421d      	tst	r5, r3
100418d4:	d000      	beq.n	100418d8 <__aeabi_dmul+0xa8>
100418d6:	e229      	b.n	10041d2c <__aeabi_dmul+0x4fc>
100418d8:	2390      	movs	r3, #144	@ 0x90
100418da:	009b      	lsls	r3, r3, #2
100418dc:	421d      	tst	r5, r3
100418de:	d100      	bne.n	100418e2 <__aeabi_dmul+0xb2>
100418e0:	e24d      	b.n	10041d7e <__aeabi_dmul+0x54e>
100418e2:	2300      	movs	r3, #0
100418e4:	2480      	movs	r4, #128	@ 0x80
100418e6:	4699      	mov	r9, r3
100418e8:	0324      	lsls	r4, r4, #12
100418ea:	4ba8      	ldr	r3, [pc, #672]	@ (10041b8c <__aeabi_dmul+0x35c>)
100418ec:	0010      	movs	r0, r2
100418ee:	464a      	mov	r2, r9
100418f0:	051b      	lsls	r3, r3, #20
100418f2:	4323      	orrs	r3, r4
100418f4:	07d2      	lsls	r2, r2, #31
100418f6:	4313      	orrs	r3, r2
100418f8:	0019      	movs	r1, r3
100418fa:	b005      	add	sp, #20
100418fc:	bcf0      	pop	{r4, r5, r6, r7}
100418fe:	46bb      	mov	fp, r7
10041900:	46b2      	mov	sl, r6
10041902:	46a9      	mov	r9, r5
10041904:	46a0      	mov	r8, r4
10041906:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041908:	4652      	mov	r2, sl
1004190a:	4302      	orrs	r2, r0
1004190c:	4690      	mov	r8, r2
1004190e:	d000      	beq.n	10041912 <__aeabi_dmul+0xe2>
10041910:	e1ac      	b.n	10041c6c <__aeabi_dmul+0x43c>
10041912:	469b      	mov	fp, r3
10041914:	2302      	movs	r3, #2
10041916:	4692      	mov	sl, r2
10041918:	2508      	movs	r5, #8
1004191a:	9302      	str	r3, [sp, #8]
1004191c:	e7ae      	b.n	1004187c <__aeabi_dmul+0x4c>
1004191e:	9b00      	ldr	r3, [sp, #0]
10041920:	46a2      	mov	sl, r4
10041922:	4699      	mov	r9, r3
10041924:	9b01      	ldr	r3, [sp, #4]
10041926:	4698      	mov	r8, r3
10041928:	9b02      	ldr	r3, [sp, #8]
1004192a:	2b02      	cmp	r3, #2
1004192c:	d100      	bne.n	10041930 <__aeabi_dmul+0x100>
1004192e:	e1ca      	b.n	10041cc6 <__aeabi_dmul+0x496>
10041930:	2b03      	cmp	r3, #3
10041932:	d100      	bne.n	10041936 <__aeabi_dmul+0x106>
10041934:	e192      	b.n	10041c5c <__aeabi_dmul+0x42c>
10041936:	2b01      	cmp	r3, #1
10041938:	d110      	bne.n	1004195c <__aeabi_dmul+0x12c>
1004193a:	2300      	movs	r3, #0
1004193c:	2400      	movs	r4, #0
1004193e:	2200      	movs	r2, #0
10041940:	e7d4      	b.n	100418ec <__aeabi_dmul+0xbc>
10041942:	2201      	movs	r2, #1
10041944:	087b      	lsrs	r3, r7, #1
10041946:	403a      	ands	r2, r7
10041948:	4313      	orrs	r3, r2
1004194a:	4652      	mov	r2, sl
1004194c:	07d2      	lsls	r2, r2, #31
1004194e:	4313      	orrs	r3, r2
10041950:	4698      	mov	r8, r3
10041952:	4653      	mov	r3, sl
10041954:	085b      	lsrs	r3, r3, #1
10041956:	469a      	mov	sl, r3
10041958:	9b03      	ldr	r3, [sp, #12]
1004195a:	4699      	mov	r9, r3
1004195c:	465b      	mov	r3, fp
1004195e:	1c58      	adds	r0, r3, #1
10041960:	2380      	movs	r3, #128	@ 0x80
10041962:	00db      	lsls	r3, r3, #3
10041964:	445b      	add	r3, fp
10041966:	2b00      	cmp	r3, #0
10041968:	dc00      	bgt.n	1004196c <__aeabi_dmul+0x13c>
1004196a:	e1b1      	b.n	10041cd0 <__aeabi_dmul+0x4a0>
1004196c:	4642      	mov	r2, r8
1004196e:	0752      	lsls	r2, r2, #29
10041970:	d00b      	beq.n	1004198a <__aeabi_dmul+0x15a>
10041972:	220f      	movs	r2, #15
10041974:	4641      	mov	r1, r8
10041976:	400a      	ands	r2, r1
10041978:	2a04      	cmp	r2, #4
1004197a:	d006      	beq.n	1004198a <__aeabi_dmul+0x15a>
1004197c:	4642      	mov	r2, r8
1004197e:	1d11      	adds	r1, r2, #4
10041980:	4541      	cmp	r1, r8
10041982:	4192      	sbcs	r2, r2
10041984:	4688      	mov	r8, r1
10041986:	4252      	negs	r2, r2
10041988:	4492      	add	sl, r2
1004198a:	4652      	mov	r2, sl
1004198c:	01d2      	lsls	r2, r2, #7
1004198e:	d506      	bpl.n	1004199e <__aeabi_dmul+0x16e>
10041990:	4652      	mov	r2, sl
10041992:	4b80      	ldr	r3, [pc, #512]	@ (10041b94 <__aeabi_dmul+0x364>)
10041994:	401a      	ands	r2, r3
10041996:	2380      	movs	r3, #128	@ 0x80
10041998:	4692      	mov	sl, r2
1004199a:	00db      	lsls	r3, r3, #3
1004199c:	18c3      	adds	r3, r0, r3
1004199e:	4a7e      	ldr	r2, [pc, #504]	@ (10041b98 <__aeabi_dmul+0x368>)
100419a0:	4293      	cmp	r3, r2
100419a2:	dd00      	ble.n	100419a6 <__aeabi_dmul+0x176>
100419a4:	e18f      	b.n	10041cc6 <__aeabi_dmul+0x496>
100419a6:	4642      	mov	r2, r8
100419a8:	08d1      	lsrs	r1, r2, #3
100419aa:	4652      	mov	r2, sl
100419ac:	0752      	lsls	r2, r2, #29
100419ae:	430a      	orrs	r2, r1
100419b0:	4651      	mov	r1, sl
100419b2:	055b      	lsls	r3, r3, #21
100419b4:	024c      	lsls	r4, r1, #9
100419b6:	0b24      	lsrs	r4, r4, #12
100419b8:	0d5b      	lsrs	r3, r3, #21
100419ba:	e797      	b.n	100418ec <__aeabi_dmul+0xbc>
100419bc:	4b73      	ldr	r3, [pc, #460]	@ (10041b8c <__aeabi_dmul+0x35c>)
100419be:	4326      	orrs	r6, r4
100419c0:	469c      	mov	ip, r3
100419c2:	44e3      	add	fp, ip
100419c4:	2e00      	cmp	r6, #0
100419c6:	d100      	bne.n	100419ca <__aeabi_dmul+0x19a>
100419c8:	e16f      	b.n	10041caa <__aeabi_dmul+0x47a>
100419ca:	2303      	movs	r3, #3
100419cc:	4649      	mov	r1, r9
100419ce:	431d      	orrs	r5, r3
100419d0:	9b00      	ldr	r3, [sp, #0]
100419d2:	4059      	eors	r1, r3
100419d4:	b2cb      	uxtb	r3, r1
100419d6:	9303      	str	r3, [sp, #12]
100419d8:	2d0a      	cmp	r5, #10
100419da:	dd00      	ble.n	100419de <__aeabi_dmul+0x1ae>
100419dc:	e133      	b.n	10041c46 <__aeabi_dmul+0x416>
100419de:	2301      	movs	r3, #1
100419e0:	40ab      	lsls	r3, r5
100419e2:	001d      	movs	r5, r3
100419e4:	2303      	movs	r3, #3
100419e6:	9302      	str	r3, [sp, #8]
100419e8:	2288      	movs	r2, #136	@ 0x88
100419ea:	422a      	tst	r2, r5
100419ec:	d197      	bne.n	1004191e <__aeabi_dmul+0xee>
100419ee:	4642      	mov	r2, r8
100419f0:	4643      	mov	r3, r8
100419f2:	0412      	lsls	r2, r2, #16
100419f4:	0c12      	lsrs	r2, r2, #16
100419f6:	0016      	movs	r6, r2
100419f8:	9801      	ldr	r0, [sp, #4]
100419fa:	0c1d      	lsrs	r5, r3, #16
100419fc:	0c03      	lsrs	r3, r0, #16
100419fe:	0400      	lsls	r0, r0, #16
10041a00:	0c00      	lsrs	r0, r0, #16
10041a02:	4346      	muls	r6, r0
10041a04:	46b4      	mov	ip, r6
10041a06:	001e      	movs	r6, r3
10041a08:	436e      	muls	r6, r5
10041a0a:	9600      	str	r6, [sp, #0]
10041a0c:	0016      	movs	r6, r2
10041a0e:	0007      	movs	r7, r0
10041a10:	435e      	muls	r6, r3
10041a12:	4661      	mov	r1, ip
10041a14:	46b0      	mov	r8, r6
10041a16:	436f      	muls	r7, r5
10041a18:	0c0e      	lsrs	r6, r1, #16
10041a1a:	44b8      	add	r8, r7
10041a1c:	4446      	add	r6, r8
10041a1e:	42b7      	cmp	r7, r6
10041a20:	d905      	bls.n	10041a2e <__aeabi_dmul+0x1fe>
10041a22:	2180      	movs	r1, #128	@ 0x80
10041a24:	0249      	lsls	r1, r1, #9
10041a26:	4688      	mov	r8, r1
10041a28:	9f00      	ldr	r7, [sp, #0]
10041a2a:	4447      	add	r7, r8
10041a2c:	9700      	str	r7, [sp, #0]
10041a2e:	4661      	mov	r1, ip
10041a30:	0409      	lsls	r1, r1, #16
10041a32:	0c09      	lsrs	r1, r1, #16
10041a34:	0c37      	lsrs	r7, r6, #16
10041a36:	0436      	lsls	r6, r6, #16
10041a38:	468c      	mov	ip, r1
10041a3a:	0031      	movs	r1, r6
10041a3c:	4461      	add	r1, ip
10041a3e:	9101      	str	r1, [sp, #4]
10041a40:	0011      	movs	r1, r2
10041a42:	0c26      	lsrs	r6, r4, #16
10041a44:	0424      	lsls	r4, r4, #16
10041a46:	0c24      	lsrs	r4, r4, #16
10041a48:	4361      	muls	r1, r4
10041a4a:	468c      	mov	ip, r1
10041a4c:	0021      	movs	r1, r4
10041a4e:	4369      	muls	r1, r5
10041a50:	4689      	mov	r9, r1
10041a52:	4661      	mov	r1, ip
10041a54:	0c09      	lsrs	r1, r1, #16
10041a56:	4688      	mov	r8, r1
10041a58:	4372      	muls	r2, r6
10041a5a:	444a      	add	r2, r9
10041a5c:	4442      	add	r2, r8
10041a5e:	4375      	muls	r5, r6
10041a60:	4591      	cmp	r9, r2
10041a62:	d903      	bls.n	10041a6c <__aeabi_dmul+0x23c>
10041a64:	2180      	movs	r1, #128	@ 0x80
10041a66:	0249      	lsls	r1, r1, #9
10041a68:	4688      	mov	r8, r1
10041a6a:	4445      	add	r5, r8
10041a6c:	0c11      	lsrs	r1, r2, #16
10041a6e:	4688      	mov	r8, r1
10041a70:	4661      	mov	r1, ip
10041a72:	0409      	lsls	r1, r1, #16
10041a74:	0c09      	lsrs	r1, r1, #16
10041a76:	468c      	mov	ip, r1
10041a78:	0412      	lsls	r2, r2, #16
10041a7a:	4462      	add	r2, ip
10041a7c:	18b9      	adds	r1, r7, r2
10041a7e:	9102      	str	r1, [sp, #8]
10041a80:	4651      	mov	r1, sl
10041a82:	0c09      	lsrs	r1, r1, #16
10041a84:	468c      	mov	ip, r1
10041a86:	4651      	mov	r1, sl
10041a88:	040f      	lsls	r7, r1, #16
10041a8a:	0c3f      	lsrs	r7, r7, #16
10041a8c:	0039      	movs	r1, r7
10041a8e:	4341      	muls	r1, r0
10041a90:	4445      	add	r5, r8
10041a92:	4688      	mov	r8, r1
10041a94:	4661      	mov	r1, ip
10041a96:	4341      	muls	r1, r0
10041a98:	468a      	mov	sl, r1
10041a9a:	4641      	mov	r1, r8
10041a9c:	4660      	mov	r0, ip
10041a9e:	0c09      	lsrs	r1, r1, #16
10041aa0:	4689      	mov	r9, r1
10041aa2:	4358      	muls	r0, r3
10041aa4:	437b      	muls	r3, r7
10041aa6:	4453      	add	r3, sl
10041aa8:	444b      	add	r3, r9
10041aaa:	459a      	cmp	sl, r3
10041aac:	d903      	bls.n	10041ab6 <__aeabi_dmul+0x286>
10041aae:	2180      	movs	r1, #128	@ 0x80
10041ab0:	0249      	lsls	r1, r1, #9
10041ab2:	4689      	mov	r9, r1
10041ab4:	4448      	add	r0, r9
10041ab6:	0c19      	lsrs	r1, r3, #16
10041ab8:	4689      	mov	r9, r1
10041aba:	4641      	mov	r1, r8
10041abc:	0409      	lsls	r1, r1, #16
10041abe:	0c09      	lsrs	r1, r1, #16
10041ac0:	4688      	mov	r8, r1
10041ac2:	0039      	movs	r1, r7
10041ac4:	4361      	muls	r1, r4
10041ac6:	041b      	lsls	r3, r3, #16
10041ac8:	4443      	add	r3, r8
10041aca:	4688      	mov	r8, r1
10041acc:	4661      	mov	r1, ip
10041ace:	434c      	muls	r4, r1
10041ad0:	4371      	muls	r1, r6
10041ad2:	468c      	mov	ip, r1
10041ad4:	4641      	mov	r1, r8
10041ad6:	4377      	muls	r7, r6
10041ad8:	0c0e      	lsrs	r6, r1, #16
10041ada:	193f      	adds	r7, r7, r4
10041adc:	19f6      	adds	r6, r6, r7
10041ade:	4448      	add	r0, r9
10041ae0:	42b4      	cmp	r4, r6
10041ae2:	d903      	bls.n	10041aec <__aeabi_dmul+0x2bc>
10041ae4:	2180      	movs	r1, #128	@ 0x80
10041ae6:	0249      	lsls	r1, r1, #9
10041ae8:	4689      	mov	r9, r1
10041aea:	44cc      	add	ip, r9
10041aec:	9902      	ldr	r1, [sp, #8]
10041aee:	9f00      	ldr	r7, [sp, #0]
10041af0:	4689      	mov	r9, r1
10041af2:	0431      	lsls	r1, r6, #16
10041af4:	444f      	add	r7, r9
10041af6:	4689      	mov	r9, r1
10041af8:	4641      	mov	r1, r8
10041afa:	4297      	cmp	r7, r2
10041afc:	4192      	sbcs	r2, r2
10041afe:	040c      	lsls	r4, r1, #16
10041b00:	0c24      	lsrs	r4, r4, #16
10041b02:	444c      	add	r4, r9
10041b04:	18ff      	adds	r7, r7, r3
10041b06:	4252      	negs	r2, r2
10041b08:	1964      	adds	r4, r4, r5
10041b0a:	18a1      	adds	r1, r4, r2
10041b0c:	429f      	cmp	r7, r3
10041b0e:	419b      	sbcs	r3, r3
10041b10:	4688      	mov	r8, r1
10041b12:	4682      	mov	sl, r0
10041b14:	425b      	negs	r3, r3
10041b16:	4699      	mov	r9, r3
10041b18:	4590      	cmp	r8, r2
10041b1a:	4192      	sbcs	r2, r2
10041b1c:	42ac      	cmp	r4, r5
10041b1e:	41a4      	sbcs	r4, r4
10041b20:	44c2      	add	sl, r8
10041b22:	44d1      	add	r9, sl
10041b24:	4252      	negs	r2, r2
10041b26:	4264      	negs	r4, r4
10041b28:	4314      	orrs	r4, r2
10041b2a:	4599      	cmp	r9, r3
10041b2c:	419b      	sbcs	r3, r3
10041b2e:	4582      	cmp	sl, r0
10041b30:	4192      	sbcs	r2, r2
10041b32:	425b      	negs	r3, r3
10041b34:	4252      	negs	r2, r2
10041b36:	4313      	orrs	r3, r2
10041b38:	464a      	mov	r2, r9
10041b3a:	0c36      	lsrs	r6, r6, #16
10041b3c:	19a4      	adds	r4, r4, r6
10041b3e:	18e3      	adds	r3, r4, r3
10041b40:	4463      	add	r3, ip
10041b42:	025b      	lsls	r3, r3, #9
10041b44:	0dd2      	lsrs	r2, r2, #23
10041b46:	431a      	orrs	r2, r3
10041b48:	9901      	ldr	r1, [sp, #4]
10041b4a:	4692      	mov	sl, r2
10041b4c:	027a      	lsls	r2, r7, #9
10041b4e:	430a      	orrs	r2, r1
10041b50:	1e50      	subs	r0, r2, #1
10041b52:	4182      	sbcs	r2, r0
10041b54:	0dff      	lsrs	r7, r7, #23
10041b56:	4317      	orrs	r7, r2
10041b58:	464a      	mov	r2, r9
10041b5a:	0252      	lsls	r2, r2, #9
10041b5c:	4317      	orrs	r7, r2
10041b5e:	46b8      	mov	r8, r7
10041b60:	01db      	lsls	r3, r3, #7
10041b62:	d500      	bpl.n	10041b66 <__aeabi_dmul+0x336>
10041b64:	e6ed      	b.n	10041942 <__aeabi_dmul+0x112>
10041b66:	4b0d      	ldr	r3, [pc, #52]	@ (10041b9c <__aeabi_dmul+0x36c>)
10041b68:	9a03      	ldr	r2, [sp, #12]
10041b6a:	445b      	add	r3, fp
10041b6c:	4691      	mov	r9, r2
10041b6e:	2b00      	cmp	r3, #0
10041b70:	dc00      	bgt.n	10041b74 <__aeabi_dmul+0x344>
10041b72:	e0ac      	b.n	10041cce <__aeabi_dmul+0x49e>
10041b74:	003a      	movs	r2, r7
10041b76:	0752      	lsls	r2, r2, #29
10041b78:	d100      	bne.n	10041b7c <__aeabi_dmul+0x34c>
10041b7a:	e710      	b.n	1004199e <__aeabi_dmul+0x16e>
10041b7c:	220f      	movs	r2, #15
10041b7e:	4658      	mov	r0, fp
10041b80:	403a      	ands	r2, r7
10041b82:	2a04      	cmp	r2, #4
10041b84:	d000      	beq.n	10041b88 <__aeabi_dmul+0x358>
10041b86:	e6f9      	b.n	1004197c <__aeabi_dmul+0x14c>
10041b88:	e709      	b.n	1004199e <__aeabi_dmul+0x16e>
10041b8a:	46c0      	nop			@ (mov r8, r8)
10041b8c:	000007ff 	.word	0x000007ff
10041b90:	fffffc01 	.word	0xfffffc01
10041b94:	feffffff 	.word	0xfeffffff
10041b98:	000007fe 	.word	0x000007fe
10041b9c:	000003ff 	.word	0x000003ff
10041ba0:	0022      	movs	r2, r4
10041ba2:	4332      	orrs	r2, r6
10041ba4:	d06f      	beq.n	10041c86 <__aeabi_dmul+0x456>
10041ba6:	2c00      	cmp	r4, #0
10041ba8:	d100      	bne.n	10041bac <__aeabi_dmul+0x37c>
10041baa:	e0c2      	b.n	10041d32 <__aeabi_dmul+0x502>
10041bac:	0020      	movs	r0, r4
10041bae:	f7fe fd07 	bl	100405c0 <__clzsi2>
10041bb2:	0002      	movs	r2, r0
10041bb4:	0003      	movs	r3, r0
10041bb6:	3a0b      	subs	r2, #11
10041bb8:	201d      	movs	r0, #29
10041bba:	1a82      	subs	r2, r0, r2
10041bbc:	0030      	movs	r0, r6
10041bbe:	0019      	movs	r1, r3
10041bc0:	40d0      	lsrs	r0, r2
10041bc2:	3908      	subs	r1, #8
10041bc4:	408c      	lsls	r4, r1
10041bc6:	0002      	movs	r2, r0
10041bc8:	4322      	orrs	r2, r4
10041bca:	0034      	movs	r4, r6
10041bcc:	408c      	lsls	r4, r1
10041bce:	4659      	mov	r1, fp
10041bd0:	1acb      	subs	r3, r1, r3
10041bd2:	4986      	ldr	r1, [pc, #536]	@ (10041dec <__aeabi_dmul+0x5bc>)
10041bd4:	468b      	mov	fp, r1
10041bd6:	449b      	add	fp, r3
10041bd8:	2d0a      	cmp	r5, #10
10041bda:	dd00      	ble.n	10041bde <__aeabi_dmul+0x3ae>
10041bdc:	e6a4      	b.n	10041928 <__aeabi_dmul+0xf8>
10041bde:	4649      	mov	r1, r9
10041be0:	9b00      	ldr	r3, [sp, #0]
10041be2:	9401      	str	r4, [sp, #4]
10041be4:	4059      	eors	r1, r3
10041be6:	b2cb      	uxtb	r3, r1
10041be8:	0014      	movs	r4, r2
10041bea:	2000      	movs	r0, #0
10041bec:	9303      	str	r3, [sp, #12]
10041bee:	2d02      	cmp	r5, #2
10041bf0:	dd00      	ble.n	10041bf4 <__aeabi_dmul+0x3c4>
10041bf2:	e667      	b.n	100418c4 <__aeabi_dmul+0x94>
10041bf4:	e6fb      	b.n	100419ee <__aeabi_dmul+0x1be>
10041bf6:	4653      	mov	r3, sl
10041bf8:	4303      	orrs	r3, r0
10041bfa:	4698      	mov	r8, r3
10041bfc:	d03c      	beq.n	10041c78 <__aeabi_dmul+0x448>
10041bfe:	4653      	mov	r3, sl
10041c00:	2b00      	cmp	r3, #0
10041c02:	d100      	bne.n	10041c06 <__aeabi_dmul+0x3d6>
10041c04:	e0a3      	b.n	10041d4e <__aeabi_dmul+0x51e>
10041c06:	4650      	mov	r0, sl
10041c08:	f7fe fcda 	bl	100405c0 <__clzsi2>
10041c0c:	230b      	movs	r3, #11
10041c0e:	425b      	negs	r3, r3
10041c10:	469c      	mov	ip, r3
10041c12:	0002      	movs	r2, r0
10041c14:	4484      	add	ip, r0
10041c16:	0011      	movs	r1, r2
10041c18:	4650      	mov	r0, sl
10041c1a:	3908      	subs	r1, #8
10041c1c:	4088      	lsls	r0, r1
10041c1e:	231d      	movs	r3, #29
10041c20:	4680      	mov	r8, r0
10041c22:	4660      	mov	r0, ip
10041c24:	1a1b      	subs	r3, r3, r0
10041c26:	0020      	movs	r0, r4
10041c28:	40d8      	lsrs	r0, r3
10041c2a:	0003      	movs	r3, r0
10041c2c:	4640      	mov	r0, r8
10041c2e:	4303      	orrs	r3, r0
10041c30:	469a      	mov	sl, r3
10041c32:	0023      	movs	r3, r4
10041c34:	408b      	lsls	r3, r1
10041c36:	4698      	mov	r8, r3
10041c38:	4b6c      	ldr	r3, [pc, #432]	@ (10041dec <__aeabi_dmul+0x5bc>)
10041c3a:	2500      	movs	r5, #0
10041c3c:	1a9b      	subs	r3, r3, r2
10041c3e:	469b      	mov	fp, r3
10041c40:	2300      	movs	r3, #0
10041c42:	9302      	str	r3, [sp, #8]
10041c44:	e61a      	b.n	1004187c <__aeabi_dmul+0x4c>
10041c46:	2d0f      	cmp	r5, #15
10041c48:	d000      	beq.n	10041c4c <__aeabi_dmul+0x41c>
10041c4a:	e0c9      	b.n	10041de0 <__aeabi_dmul+0x5b0>
10041c4c:	2380      	movs	r3, #128	@ 0x80
10041c4e:	4652      	mov	r2, sl
10041c50:	031b      	lsls	r3, r3, #12
10041c52:	421a      	tst	r2, r3
10041c54:	d002      	beq.n	10041c5c <__aeabi_dmul+0x42c>
10041c56:	421c      	tst	r4, r3
10041c58:	d100      	bne.n	10041c5c <__aeabi_dmul+0x42c>
10041c5a:	e092      	b.n	10041d82 <__aeabi_dmul+0x552>
10041c5c:	2480      	movs	r4, #128	@ 0x80
10041c5e:	4653      	mov	r3, sl
10041c60:	0324      	lsls	r4, r4, #12
10041c62:	431c      	orrs	r4, r3
10041c64:	0324      	lsls	r4, r4, #12
10041c66:	4642      	mov	r2, r8
10041c68:	0b24      	lsrs	r4, r4, #12
10041c6a:	e63e      	b.n	100418ea <__aeabi_dmul+0xba>
10041c6c:	469b      	mov	fp, r3
10041c6e:	2303      	movs	r3, #3
10041c70:	4680      	mov	r8, r0
10041c72:	250c      	movs	r5, #12
10041c74:	9302      	str	r3, [sp, #8]
10041c76:	e601      	b.n	1004187c <__aeabi_dmul+0x4c>
10041c78:	2300      	movs	r3, #0
10041c7a:	469a      	mov	sl, r3
10041c7c:	469b      	mov	fp, r3
10041c7e:	3301      	adds	r3, #1
10041c80:	2504      	movs	r5, #4
10041c82:	9302      	str	r3, [sp, #8]
10041c84:	e5fa      	b.n	1004187c <__aeabi_dmul+0x4c>
10041c86:	2101      	movs	r1, #1
10041c88:	430d      	orrs	r5, r1
10041c8a:	2d0a      	cmp	r5, #10
10041c8c:	dd00      	ble.n	10041c90 <__aeabi_dmul+0x460>
10041c8e:	e64b      	b.n	10041928 <__aeabi_dmul+0xf8>
10041c90:	4649      	mov	r1, r9
10041c92:	9800      	ldr	r0, [sp, #0]
10041c94:	4041      	eors	r1, r0
10041c96:	b2c9      	uxtb	r1, r1
10041c98:	9103      	str	r1, [sp, #12]
10041c9a:	2d02      	cmp	r5, #2
10041c9c:	dc00      	bgt.n	10041ca0 <__aeabi_dmul+0x470>
10041c9e:	e096      	b.n	10041dce <__aeabi_dmul+0x59e>
10041ca0:	2300      	movs	r3, #0
10041ca2:	2400      	movs	r4, #0
10041ca4:	2001      	movs	r0, #1
10041ca6:	9301      	str	r3, [sp, #4]
10041ca8:	e60c      	b.n	100418c4 <__aeabi_dmul+0x94>
10041caa:	4649      	mov	r1, r9
10041cac:	2302      	movs	r3, #2
10041cae:	9a00      	ldr	r2, [sp, #0]
10041cb0:	432b      	orrs	r3, r5
10041cb2:	4051      	eors	r1, r2
10041cb4:	b2ca      	uxtb	r2, r1
10041cb6:	9203      	str	r2, [sp, #12]
10041cb8:	2b0a      	cmp	r3, #10
10041cba:	dd00      	ble.n	10041cbe <__aeabi_dmul+0x48e>
10041cbc:	e634      	b.n	10041928 <__aeabi_dmul+0xf8>
10041cbe:	2d00      	cmp	r5, #0
10041cc0:	d157      	bne.n	10041d72 <__aeabi_dmul+0x542>
10041cc2:	9b03      	ldr	r3, [sp, #12]
10041cc4:	4699      	mov	r9, r3
10041cc6:	2400      	movs	r4, #0
10041cc8:	2200      	movs	r2, #0
10041cca:	4b49      	ldr	r3, [pc, #292]	@ (10041df0 <__aeabi_dmul+0x5c0>)
10041ccc:	e60e      	b.n	100418ec <__aeabi_dmul+0xbc>
10041cce:	4658      	mov	r0, fp
10041cd0:	2101      	movs	r1, #1
10041cd2:	1ac9      	subs	r1, r1, r3
10041cd4:	2938      	cmp	r1, #56	@ 0x38
10041cd6:	dd00      	ble.n	10041cda <__aeabi_dmul+0x4aa>
10041cd8:	e62f      	b.n	1004193a <__aeabi_dmul+0x10a>
10041cda:	291f      	cmp	r1, #31
10041cdc:	dd56      	ble.n	10041d8c <__aeabi_dmul+0x55c>
10041cde:	221f      	movs	r2, #31
10041ce0:	4654      	mov	r4, sl
10041ce2:	4252      	negs	r2, r2
10041ce4:	1ad3      	subs	r3, r2, r3
10041ce6:	40dc      	lsrs	r4, r3
10041ce8:	2920      	cmp	r1, #32
10041cea:	d007      	beq.n	10041cfc <__aeabi_dmul+0x4cc>
10041cec:	4b41      	ldr	r3, [pc, #260]	@ (10041df4 <__aeabi_dmul+0x5c4>)
10041cee:	4642      	mov	r2, r8
10041cf0:	469c      	mov	ip, r3
10041cf2:	4653      	mov	r3, sl
10041cf4:	4460      	add	r0, ip
10041cf6:	4083      	lsls	r3, r0
10041cf8:	431a      	orrs	r2, r3
10041cfa:	4690      	mov	r8, r2
10041cfc:	4642      	mov	r2, r8
10041cfe:	2107      	movs	r1, #7
10041d00:	1e53      	subs	r3, r2, #1
10041d02:	419a      	sbcs	r2, r3
10041d04:	000b      	movs	r3, r1
10041d06:	4322      	orrs	r2, r4
10041d08:	4013      	ands	r3, r2
10041d0a:	2400      	movs	r4, #0
10041d0c:	4211      	tst	r1, r2
10041d0e:	d009      	beq.n	10041d24 <__aeabi_dmul+0x4f4>
10041d10:	230f      	movs	r3, #15
10041d12:	4013      	ands	r3, r2
10041d14:	2b04      	cmp	r3, #4
10041d16:	d05d      	beq.n	10041dd4 <__aeabi_dmul+0x5a4>
10041d18:	1d11      	adds	r1, r2, #4
10041d1a:	4291      	cmp	r1, r2
10041d1c:	419b      	sbcs	r3, r3
10041d1e:	000a      	movs	r2, r1
10041d20:	425b      	negs	r3, r3
10041d22:	075b      	lsls	r3, r3, #29
10041d24:	08d2      	lsrs	r2, r2, #3
10041d26:	431a      	orrs	r2, r3
10041d28:	2300      	movs	r3, #0
10041d2a:	e5df      	b.n	100418ec <__aeabi_dmul+0xbc>
10041d2c:	9b03      	ldr	r3, [sp, #12]
10041d2e:	4699      	mov	r9, r3
10041d30:	e5fa      	b.n	10041928 <__aeabi_dmul+0xf8>
10041d32:	9801      	ldr	r0, [sp, #4]
10041d34:	f7fe fc44 	bl	100405c0 <__clzsi2>
10041d38:	0002      	movs	r2, r0
10041d3a:	0003      	movs	r3, r0
10041d3c:	3215      	adds	r2, #21
10041d3e:	3320      	adds	r3, #32
10041d40:	2a1c      	cmp	r2, #28
10041d42:	dc00      	bgt.n	10041d46 <__aeabi_dmul+0x516>
10041d44:	e738      	b.n	10041bb8 <__aeabi_dmul+0x388>
10041d46:	9a01      	ldr	r2, [sp, #4]
10041d48:	3808      	subs	r0, #8
10041d4a:	4082      	lsls	r2, r0
10041d4c:	e73f      	b.n	10041bce <__aeabi_dmul+0x39e>
10041d4e:	f7fe fc37 	bl	100405c0 <__clzsi2>
10041d52:	2315      	movs	r3, #21
10041d54:	469c      	mov	ip, r3
10041d56:	4484      	add	ip, r0
10041d58:	0002      	movs	r2, r0
10041d5a:	4663      	mov	r3, ip
10041d5c:	3220      	adds	r2, #32
10041d5e:	2b1c      	cmp	r3, #28
10041d60:	dc00      	bgt.n	10041d64 <__aeabi_dmul+0x534>
10041d62:	e758      	b.n	10041c16 <__aeabi_dmul+0x3e6>
10041d64:	2300      	movs	r3, #0
10041d66:	4698      	mov	r8, r3
10041d68:	0023      	movs	r3, r4
10041d6a:	3808      	subs	r0, #8
10041d6c:	4083      	lsls	r3, r0
10041d6e:	469a      	mov	sl, r3
10041d70:	e762      	b.n	10041c38 <__aeabi_dmul+0x408>
10041d72:	001d      	movs	r5, r3
10041d74:	2300      	movs	r3, #0
10041d76:	2400      	movs	r4, #0
10041d78:	2002      	movs	r0, #2
10041d7a:	9301      	str	r3, [sp, #4]
10041d7c:	e5a2      	b.n	100418c4 <__aeabi_dmul+0x94>
10041d7e:	9002      	str	r0, [sp, #8]
10041d80:	e632      	b.n	100419e8 <__aeabi_dmul+0x1b8>
10041d82:	431c      	orrs	r4, r3
10041d84:	9b00      	ldr	r3, [sp, #0]
10041d86:	9a01      	ldr	r2, [sp, #4]
10041d88:	4699      	mov	r9, r3
10041d8a:	e5ae      	b.n	100418ea <__aeabi_dmul+0xba>
10041d8c:	4b1a      	ldr	r3, [pc, #104]	@ (10041df8 <__aeabi_dmul+0x5c8>)
10041d8e:	4652      	mov	r2, sl
10041d90:	18c3      	adds	r3, r0, r3
10041d92:	4640      	mov	r0, r8
10041d94:	409a      	lsls	r2, r3
10041d96:	40c8      	lsrs	r0, r1
10041d98:	4302      	orrs	r2, r0
10041d9a:	4640      	mov	r0, r8
10041d9c:	4098      	lsls	r0, r3
10041d9e:	0003      	movs	r3, r0
10041da0:	1e58      	subs	r0, r3, #1
10041da2:	4183      	sbcs	r3, r0
10041da4:	4654      	mov	r4, sl
10041da6:	431a      	orrs	r2, r3
10041da8:	40cc      	lsrs	r4, r1
10041daa:	0753      	lsls	r3, r2, #29
10041dac:	d009      	beq.n	10041dc2 <__aeabi_dmul+0x592>
10041dae:	230f      	movs	r3, #15
10041db0:	4013      	ands	r3, r2
10041db2:	2b04      	cmp	r3, #4
10041db4:	d005      	beq.n	10041dc2 <__aeabi_dmul+0x592>
10041db6:	1d13      	adds	r3, r2, #4
10041db8:	4293      	cmp	r3, r2
10041dba:	4192      	sbcs	r2, r2
10041dbc:	4252      	negs	r2, r2
10041dbe:	18a4      	adds	r4, r4, r2
10041dc0:	001a      	movs	r2, r3
10041dc2:	0223      	lsls	r3, r4, #8
10041dc4:	d508      	bpl.n	10041dd8 <__aeabi_dmul+0x5a8>
10041dc6:	2301      	movs	r3, #1
10041dc8:	2400      	movs	r4, #0
10041dca:	2200      	movs	r2, #0
10041dcc:	e58e      	b.n	100418ec <__aeabi_dmul+0xbc>
10041dce:	4689      	mov	r9, r1
10041dd0:	2400      	movs	r4, #0
10041dd2:	e58b      	b.n	100418ec <__aeabi_dmul+0xbc>
10041dd4:	2300      	movs	r3, #0
10041dd6:	e7a5      	b.n	10041d24 <__aeabi_dmul+0x4f4>
10041dd8:	0763      	lsls	r3, r4, #29
10041dda:	0264      	lsls	r4, r4, #9
10041ddc:	0b24      	lsrs	r4, r4, #12
10041dde:	e7a1      	b.n	10041d24 <__aeabi_dmul+0x4f4>
10041de0:	9b00      	ldr	r3, [sp, #0]
10041de2:	46a2      	mov	sl, r4
10041de4:	4699      	mov	r9, r3
10041de6:	9b01      	ldr	r3, [sp, #4]
10041de8:	4698      	mov	r8, r3
10041dea:	e737      	b.n	10041c5c <__aeabi_dmul+0x42c>
10041dec:	fffffc0d 	.word	0xfffffc0d
10041df0:	000007ff 	.word	0x000007ff
10041df4:	0000043e 	.word	0x0000043e
10041df8:	0000041e 	.word	0x0000041e

10041dfc <__aeabi_i2d>:
10041dfc:	b570      	push	{r4, r5, r6, lr}
10041dfe:	2800      	cmp	r0, #0
10041e00:	d016      	beq.n	10041e30 <__aeabi_i2d+0x34>
10041e02:	17c3      	asrs	r3, r0, #31
10041e04:	18c5      	adds	r5, r0, r3
10041e06:	405d      	eors	r5, r3
10041e08:	0fc4      	lsrs	r4, r0, #31
10041e0a:	0028      	movs	r0, r5
10041e0c:	f7fe fbd8 	bl	100405c0 <__clzsi2>
10041e10:	4b10      	ldr	r3, [pc, #64]	@ (10041e54 <__aeabi_i2d+0x58>)
10041e12:	1a1b      	subs	r3, r3, r0
10041e14:	055b      	lsls	r3, r3, #21
10041e16:	0d5b      	lsrs	r3, r3, #21
10041e18:	280a      	cmp	r0, #10
10041e1a:	dc14      	bgt.n	10041e46 <__aeabi_i2d+0x4a>
10041e1c:	0002      	movs	r2, r0
10041e1e:	002e      	movs	r6, r5
10041e20:	3215      	adds	r2, #21
10041e22:	4096      	lsls	r6, r2
10041e24:	220b      	movs	r2, #11
10041e26:	1a12      	subs	r2, r2, r0
10041e28:	40d5      	lsrs	r5, r2
10041e2a:	032d      	lsls	r5, r5, #12
10041e2c:	0b2d      	lsrs	r5, r5, #12
10041e2e:	e003      	b.n	10041e38 <__aeabi_i2d+0x3c>
10041e30:	2400      	movs	r4, #0
10041e32:	2300      	movs	r3, #0
10041e34:	2500      	movs	r5, #0
10041e36:	2600      	movs	r6, #0
10041e38:	051b      	lsls	r3, r3, #20
10041e3a:	432b      	orrs	r3, r5
10041e3c:	07e4      	lsls	r4, r4, #31
10041e3e:	4323      	orrs	r3, r4
10041e40:	0030      	movs	r0, r6
10041e42:	0019      	movs	r1, r3
10041e44:	bd70      	pop	{r4, r5, r6, pc}
10041e46:	380b      	subs	r0, #11
10041e48:	4085      	lsls	r5, r0
10041e4a:	032d      	lsls	r5, r5, #12
10041e4c:	2600      	movs	r6, #0
10041e4e:	0b2d      	lsrs	r5, r5, #12
10041e50:	e7f2      	b.n	10041e38 <__aeabi_i2d+0x3c>
10041e52:	46c0      	nop			@ (mov r8, r8)
10041e54:	0000041e 	.word	0x0000041e

10041e58 <__aeabi_ui2d>:
10041e58:	b510      	push	{r4, lr}
10041e5a:	1e04      	subs	r4, r0, #0
10041e5c:	d010      	beq.n	10041e80 <__aeabi_ui2d+0x28>
10041e5e:	f7fe fbaf 	bl	100405c0 <__clzsi2>
10041e62:	4b0e      	ldr	r3, [pc, #56]	@ (10041e9c <__aeabi_ui2d+0x44>)
10041e64:	1a1b      	subs	r3, r3, r0
10041e66:	055b      	lsls	r3, r3, #21
10041e68:	0d5b      	lsrs	r3, r3, #21
10041e6a:	280a      	cmp	r0, #10
10041e6c:	dc0f      	bgt.n	10041e8e <__aeabi_ui2d+0x36>
10041e6e:	220b      	movs	r2, #11
10041e70:	0021      	movs	r1, r4
10041e72:	1a12      	subs	r2, r2, r0
10041e74:	40d1      	lsrs	r1, r2
10041e76:	3015      	adds	r0, #21
10041e78:	030a      	lsls	r2, r1, #12
10041e7a:	4084      	lsls	r4, r0
10041e7c:	0b12      	lsrs	r2, r2, #12
10041e7e:	e001      	b.n	10041e84 <__aeabi_ui2d+0x2c>
10041e80:	2300      	movs	r3, #0
10041e82:	2200      	movs	r2, #0
10041e84:	051b      	lsls	r3, r3, #20
10041e86:	4313      	orrs	r3, r2
10041e88:	0020      	movs	r0, r4
10041e8a:	0019      	movs	r1, r3
10041e8c:	bd10      	pop	{r4, pc}
10041e8e:	0022      	movs	r2, r4
10041e90:	380b      	subs	r0, #11
10041e92:	4082      	lsls	r2, r0
10041e94:	0312      	lsls	r2, r2, #12
10041e96:	2400      	movs	r4, #0
10041e98:	0b12      	lsrs	r2, r2, #12
10041e9a:	e7f3      	b.n	10041e84 <__aeabi_ui2d+0x2c>
10041e9c:	0000041e 	.word	0x0000041e

10041ea0 <__clzdi2>:
10041ea0:	b510      	push	{r4, lr}
10041ea2:	2900      	cmp	r1, #0
10041ea4:	d103      	bne.n	10041eae <__clzdi2+0xe>
10041ea6:	f7fe fb8b 	bl	100405c0 <__clzsi2>
10041eaa:	3020      	adds	r0, #32
10041eac:	e002      	b.n	10041eb4 <__clzdi2+0x14>
10041eae:	0008      	movs	r0, r1
10041eb0:	f7fe fb86 	bl	100405c0 <__clzsi2>
10041eb4:	bd10      	pop	{r4, pc}
10041eb6:	46c0      	nop			@ (mov r8, r8)

10041eb8 <BLUETOOTH_BufferInit>:
 * @function: BLUETOOTH_BufferInit()
 * @brief: initialize the the bluetooth tx buffer for virtual USART communication
 * @param: none
 * @return: none
 */
void BLUETOOTH_BufferInit(){
10041eb8:	b580      	push	{r7, lr}
10041eba:	af00      	add	r7, sp, #0
	buffer.head = 0;
10041ebc:	4a07      	ldr	r2, [pc, #28]	@ (10041edc <BLUETOOTH_BufferInit+0x24>)
10041ebe:	2380      	movs	r3, #128	@ 0x80
10041ec0:	009b      	lsls	r3, r3, #2
10041ec2:	2100      	movs	r1, #0
10041ec4:	54d1      	strb	r1, [r2, r3]
	buffer.tail = 0;
10041ec6:	4b05      	ldr	r3, [pc, #20]	@ (10041edc <BLUETOOTH_BufferInit+0x24>)
10041ec8:	4a05      	ldr	r2, [pc, #20]	@ (10041ee0 <BLUETOOTH_BufferInit+0x28>)
10041eca:	2100      	movs	r1, #0
10041ecc:	5499      	strb	r1, [r3, r2]
	buffer.full = 0;
10041ece:	4b03      	ldr	r3, [pc, #12]	@ (10041edc <BLUETOOTH_BufferInit+0x24>)
10041ed0:	4a04      	ldr	r2, [pc, #16]	@ (10041ee4 <BLUETOOTH_BufferInit+0x2c>)
10041ed2:	2100      	movs	r1, #0
10041ed4:	5499      	strb	r1, [r3, r2]
}
10041ed6:	46c0      	nop			@ (mov r8, r8)
10041ed8:	46bd      	mov	sp, r7
10041eda:	bd80      	pop	{r7, pc}
10041edc:	20000194 	.word	0x20000194
10041ee0:	00000201 	.word	0x00000201
10041ee4:	00000202 	.word	0x00000202

10041ee8 <BLUETOOTH_WriteBuffer>:
 * @function: BLUETOOTH_WriteBuffer(uint8_t input)
 * @brief: places one character into the buffer for the external PC to read
 * @param: input: character to be placed in buffer
 * @return: none
 */
uint8_t BLUETOOTH_WriteBuffer(uint8_t input){
10041ee8:	b580      	push	{r7, lr}
10041eea:	b082      	sub	sp, #8
10041eec:	af00      	add	r7, sp, #0
10041eee:	0002      	movs	r2, r0
10041ef0:	1dfb      	adds	r3, r7, #7
10041ef2:	701a      	strb	r2, [r3, #0]
	if(!buffer.full){
10041ef4:	4b1f      	ldr	r3, [pc, #124]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041ef6:	4a20      	ldr	r2, [pc, #128]	@ (10041f78 <BLUETOOTH_WriteBuffer+0x90>)
10041ef8:	5c9b      	ldrb	r3, [r3, r2]
10041efa:	2b00      	cmp	r3, #0
10041efc:	d134      	bne.n	10041f68 <BLUETOOTH_WriteBuffer+0x80>
		buffer.data[buffer.head] = input;
10041efe:	4a1d      	ldr	r2, [pc, #116]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041f00:	2380      	movs	r3, #128	@ 0x80
10041f02:	009b      	lsls	r3, r3, #2
10041f04:	5cd3      	ldrb	r3, [r2, r3]
10041f06:	0019      	movs	r1, r3
10041f08:	4b1a      	ldr	r3, [pc, #104]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041f0a:	1dfa      	adds	r2, r7, #7
10041f0c:	7812      	ldrb	r2, [r2, #0]
10041f0e:	545a      	strb	r2, [r3, r1]
		buffer.head++;
10041f10:	4a18      	ldr	r2, [pc, #96]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041f12:	2380      	movs	r3, #128	@ 0x80
10041f14:	009b      	lsls	r3, r3, #2
10041f16:	5cd3      	ldrb	r3, [r2, r3]
10041f18:	3301      	adds	r3, #1
10041f1a:	b2d9      	uxtb	r1, r3
10041f1c:	4a15      	ldr	r2, [pc, #84]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041f1e:	2380      	movs	r3, #128	@ 0x80
10041f20:	009b      	lsls	r3, r3, #2
10041f22:	54d1      	strb	r1, [r2, r3]
		buffer.head %= BTBUFFERSIZE;
10041f24:	4a13      	ldr	r2, [pc, #76]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041f26:	2380      	movs	r3, #128	@ 0x80
10041f28:	009b      	lsls	r3, r3, #2
10041f2a:	5cd1      	ldrb	r1, [r2, r3]
10041f2c:	4a11      	ldr	r2, [pc, #68]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041f2e:	2380      	movs	r3, #128	@ 0x80
10041f30:	009b      	lsls	r3, r3, #2
10041f32:	54d1      	strb	r1, [r2, r3]
		buffer.full = ((buffer.head+1)%BTBUFFERSIZE == buffer.tail);
10041f34:	4a0f      	ldr	r2, [pc, #60]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041f36:	2380      	movs	r3, #128	@ 0x80
10041f38:	009b      	lsls	r3, r3, #2
10041f3a:	5cd3      	ldrb	r3, [r2, r3]
10041f3c:	3301      	adds	r3, #1
10041f3e:	4a0f      	ldr	r2, [pc, #60]	@ (10041f7c <BLUETOOTH_WriteBuffer+0x94>)
10041f40:	4013      	ands	r3, r2
10041f42:	d503      	bpl.n	10041f4c <BLUETOOTH_WriteBuffer+0x64>
10041f44:	3b01      	subs	r3, #1
10041f46:	4a0e      	ldr	r2, [pc, #56]	@ (10041f80 <BLUETOOTH_WriteBuffer+0x98>)
10041f48:	4313      	orrs	r3, r2
10041f4a:	3301      	adds	r3, #1
10041f4c:	0019      	movs	r1, r3
10041f4e:	4b09      	ldr	r3, [pc, #36]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041f50:	4a0c      	ldr	r2, [pc, #48]	@ (10041f84 <BLUETOOTH_WriteBuffer+0x9c>)
10041f52:	5c9b      	ldrb	r3, [r3, r2]
10041f54:	1acb      	subs	r3, r1, r3
10041f56:	425a      	negs	r2, r3
10041f58:	4153      	adcs	r3, r2
10041f5a:	b2db      	uxtb	r3, r3
10041f5c:	0019      	movs	r1, r3
10041f5e:	4b05      	ldr	r3, [pc, #20]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041f60:	4a05      	ldr	r2, [pc, #20]	@ (10041f78 <BLUETOOTH_WriteBuffer+0x90>)
10041f62:	5499      	strb	r1, [r3, r2]

		return 1;
10041f64:	2301      	movs	r3, #1
10041f66:	e000      	b.n	10041f6a <BLUETOOTH_WriteBuffer+0x82>
	} else {
		return 0;
10041f68:	2300      	movs	r3, #0
	}
}
10041f6a:	0018      	movs	r0, r3
10041f6c:	46bd      	mov	sp, r7
10041f6e:	b002      	add	sp, #8
10041f70:	bd80      	pop	{r7, pc}
10041f72:	46c0      	nop			@ (mov r8, r8)
10041f74:	20000194 	.word	0x20000194
10041f78:	00000202 	.word	0x00000202
10041f7c:	800001ff 	.word	0x800001ff
10041f80:	fffffe00 	.word	0xfffffe00
10041f84:	00000201 	.word	0x00000201

10041f88 <BLUETOOTH_ReadBuffer>:
 * @function: BLUETOOTH_ReadBuffer(uint8_t input)
 * @brief: returns a character from the buffer and removes it from the buffer
 * @param: none
 * @return: -1 if buffer empty, uint8_t character data if the buffer has data to return
 */
int16_t BLUETOOTH_ReadBuffer(){
10041f88:	b580      	push	{r7, lr}
10041f8a:	b082      	sub	sp, #8
10041f8c:	af00      	add	r7, sp, #0
	int16_t ret = -1;
10041f8e:	1dbb      	adds	r3, r7, #6
10041f90:	2201      	movs	r2, #1
10041f92:	4252      	negs	r2, r2
10041f94:	801a      	strh	r2, [r3, #0]
	if(buffer.head != buffer.tail || buffer.full){
10041f96:	4a21      	ldr	r2, [pc, #132]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041f98:	2380      	movs	r3, #128	@ 0x80
10041f9a:	009b      	lsls	r3, r3, #2
10041f9c:	5cd2      	ldrb	r2, [r2, r3]
10041f9e:	4b1f      	ldr	r3, [pc, #124]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041fa0:	491f      	ldr	r1, [pc, #124]	@ (10042020 <BLUETOOTH_ReadBuffer+0x98>)
10041fa2:	5c5b      	ldrb	r3, [r3, r1]
10041fa4:	429a      	cmp	r2, r3
10041fa6:	d104      	bne.n	10041fb2 <BLUETOOTH_ReadBuffer+0x2a>
10041fa8:	4b1c      	ldr	r3, [pc, #112]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041faa:	4a1e      	ldr	r2, [pc, #120]	@ (10042024 <BLUETOOTH_ReadBuffer+0x9c>)
10041fac:	5c9b      	ldrb	r3, [r3, r2]
10041fae:	2b00      	cmp	r3, #0
10041fb0:	d02d      	beq.n	1004200e <BLUETOOTH_ReadBuffer+0x86>

		ret = buffer.data[buffer.tail];
10041fb2:	4b1a      	ldr	r3, [pc, #104]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041fb4:	4a1a      	ldr	r2, [pc, #104]	@ (10042020 <BLUETOOTH_ReadBuffer+0x98>)
10041fb6:	5c9b      	ldrb	r3, [r3, r2]
10041fb8:	001a      	movs	r2, r3
10041fba:	4b18      	ldr	r3, [pc, #96]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041fbc:	5c9a      	ldrb	r2, [r3, r2]
10041fbe:	1dbb      	adds	r3, r7, #6
10041fc0:	801a      	strh	r2, [r3, #0]
		buffer.tail++;
10041fc2:	4b16      	ldr	r3, [pc, #88]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041fc4:	4a16      	ldr	r2, [pc, #88]	@ (10042020 <BLUETOOTH_ReadBuffer+0x98>)
10041fc6:	5c9b      	ldrb	r3, [r3, r2]
10041fc8:	3301      	adds	r3, #1
10041fca:	b2d9      	uxtb	r1, r3
10041fcc:	4b13      	ldr	r3, [pc, #76]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041fce:	4a14      	ldr	r2, [pc, #80]	@ (10042020 <BLUETOOTH_ReadBuffer+0x98>)
10041fd0:	5499      	strb	r1, [r3, r2]
		buffer.tail %= BTBUFFERSIZE;
10041fd2:	4b12      	ldr	r3, [pc, #72]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041fd4:	4a12      	ldr	r2, [pc, #72]	@ (10042020 <BLUETOOTH_ReadBuffer+0x98>)
10041fd6:	5c99      	ldrb	r1, [r3, r2]
10041fd8:	4b10      	ldr	r3, [pc, #64]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041fda:	4a11      	ldr	r2, [pc, #68]	@ (10042020 <BLUETOOTH_ReadBuffer+0x98>)
10041fdc:	5499      	strb	r1, [r3, r2]
		buffer.full = ((buffer.head+1)%BTBUFFERSIZE == buffer.tail);
10041fde:	4a0f      	ldr	r2, [pc, #60]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041fe0:	2380      	movs	r3, #128	@ 0x80
10041fe2:	009b      	lsls	r3, r3, #2
10041fe4:	5cd3      	ldrb	r3, [r2, r3]
10041fe6:	3301      	adds	r3, #1
10041fe8:	4a0f      	ldr	r2, [pc, #60]	@ (10042028 <BLUETOOTH_ReadBuffer+0xa0>)
10041fea:	4013      	ands	r3, r2
10041fec:	d503      	bpl.n	10041ff6 <BLUETOOTH_ReadBuffer+0x6e>
10041fee:	3b01      	subs	r3, #1
10041ff0:	4a0e      	ldr	r2, [pc, #56]	@ (1004202c <BLUETOOTH_ReadBuffer+0xa4>)
10041ff2:	4313      	orrs	r3, r2
10041ff4:	3301      	adds	r3, #1
10041ff6:	0019      	movs	r1, r3
10041ff8:	4b08      	ldr	r3, [pc, #32]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041ffa:	4a09      	ldr	r2, [pc, #36]	@ (10042020 <BLUETOOTH_ReadBuffer+0x98>)
10041ffc:	5c9b      	ldrb	r3, [r3, r2]
10041ffe:	1acb      	subs	r3, r1, r3
10042000:	425a      	negs	r2, r3
10042002:	4153      	adcs	r3, r2
10042004:	b2db      	uxtb	r3, r3
10042006:	0019      	movs	r1, r3
10042008:	4b04      	ldr	r3, [pc, #16]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
1004200a:	4a06      	ldr	r2, [pc, #24]	@ (10042024 <BLUETOOTH_ReadBuffer+0x9c>)
1004200c:	5499      	strb	r1, [r3, r2]
	}
	return ret;
1004200e:	1dbb      	adds	r3, r7, #6
10042010:	2200      	movs	r2, #0
10042012:	5e9b      	ldrsh	r3, [r3, r2]
}
10042014:	0018      	movs	r0, r3
10042016:	46bd      	mov	sp, r7
10042018:	b002      	add	sp, #8
1004201a:	bd80      	pop	{r7, pc}
1004201c:	20000194 	.word	0x20000194
10042020:	00000201 	.word	0x00000201
10042024:	00000202 	.word	0x00000202
10042028:	800001ff 	.word	0x800001ff
1004202c:	fffffe00 	.word	0xfffffe00

10042030 <BLUETOOTH_BufferEmpty>:
 * @function: BLUETOOTH_BufferEmpty()
 * @brief: returns if the buffer is empty or if the Bluetooth is disconnected
 * @param: none
 * @return: 0 if disconnected, 1 if connected and empty, 2 if connected and not empty
 */
uint8_t BLUETOOTH_BufferEmpty(){
10042030:	b580      	push	{r7, lr}
10042032:	af00      	add	r7, sp, #0
	return (buffer.head == buffer.tail && !buffer.full);
10042034:	4a0a      	ldr	r2, [pc, #40]	@ (10042060 <BLUETOOTH_BufferEmpty+0x30>)
10042036:	2380      	movs	r3, #128	@ 0x80
10042038:	009b      	lsls	r3, r3, #2
1004203a:	5cd2      	ldrb	r2, [r2, r3]
1004203c:	4b08      	ldr	r3, [pc, #32]	@ (10042060 <BLUETOOTH_BufferEmpty+0x30>)
1004203e:	4909      	ldr	r1, [pc, #36]	@ (10042064 <BLUETOOTH_BufferEmpty+0x34>)
10042040:	5c5b      	ldrb	r3, [r3, r1]
10042042:	429a      	cmp	r2, r3
10042044:	d106      	bne.n	10042054 <BLUETOOTH_BufferEmpty+0x24>
10042046:	4b06      	ldr	r3, [pc, #24]	@ (10042060 <BLUETOOTH_BufferEmpty+0x30>)
10042048:	4a07      	ldr	r2, [pc, #28]	@ (10042068 <BLUETOOTH_BufferEmpty+0x38>)
1004204a:	5c9b      	ldrb	r3, [r3, r2]
1004204c:	2b00      	cmp	r3, #0
1004204e:	d101      	bne.n	10042054 <BLUETOOTH_BufferEmpty+0x24>
10042050:	2301      	movs	r3, #1
10042052:	e000      	b.n	10042056 <BLUETOOTH_BufferEmpty+0x26>
10042054:	2300      	movs	r3, #0
10042056:	b2db      	uxtb	r3, r3
}
10042058:	0018      	movs	r0, r3
1004205a:	46bd      	mov	sp, r7
1004205c:	bd80      	pop	{r7, pc}
1004205e:	46c0      	nop			@ (mov r8, r8)
10042060:	20000194 	.word	0x20000194
10042064:	00000201 	.word	0x00000201
10042068:	00000202 	.word	0x00000202

1004206c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
int SystemClock_Config(void)
{
1004206c:	b590      	push	{r4, r7, lr}
1004206e:	b089      	sub	sp, #36	@ 0x24
10042070:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10042072:	2408      	movs	r4, #8
10042074:	193b      	adds	r3, r7, r4
10042076:	0018      	movs	r0, r3
10042078:	2318      	movs	r3, #24
1004207a:	001a      	movs	r2, r3
1004207c:	2100      	movs	r1, #0
1004207e:	f026 fb5d 	bl	1006873c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10042082:	003b      	movs	r3, r7
10042084:	0018      	movs	r0, r3
10042086:	2308      	movs	r3, #8
10042088:	001a      	movs	r2, r3
1004208a:	2100      	movs	r1, #0
1004208c:	f026 fb56 	bl	1006873c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
10042090:	193b      	adds	r3, r7, r4
10042092:	2205      	movs	r2, #5
10042094:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
10042096:	193b      	adds	r3, r7, r4
10042098:	2280      	movs	r2, #128	@ 0x80
1004209a:	0252      	lsls	r2, r2, #9
1004209c:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
1004209e:	193b      	adds	r3, r7, r4
100420a0:	2204      	movs	r2, #4
100420a2:	611a      	str	r2, [r3, #16]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
100420a4:	193b      	adds	r3, r7, r4
100420a6:	0018      	movs	r0, r3
100420a8:	f00b faf6 	bl	1004d698 <HAL_RCC_OscConfig>
100420ac:	1e03      	subs	r3, r0, #0
100420ae:	d001      	beq.n	100420b4 <SystemClock_Config+0x48>
	{
		return INIT_ERROR;
100420b0:	2300      	movs	r3, #0
100420b2:	e00f      	b.n	100420d4 <SystemClock_Config+0x68>
	}

	/** Configure the SYSCLKSource and SYSCLKDivider
	*/
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_RC64MPLL;
100420b4:	003b      	movs	r3, r7
100420b6:	2200      	movs	r2, #0
100420b8:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV1;
100420ba:	003b      	movs	r3, r7
100420bc:	2200      	movs	r2, #0
100420be:	605a      	str	r2, [r3, #4]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_1) != HAL_OK)
100420c0:	003b      	movs	r3, r7
100420c2:	2110      	movs	r1, #16
100420c4:	0018      	movs	r0, r3
100420c6:	f00b fc31 	bl	1004d92c <HAL_RCC_ClockConfig>
100420ca:	1e03      	subs	r3, r0, #0
100420cc:	d001      	beq.n	100420d2 <SystemClock_Config+0x66>
	{
		return INIT_ERROR;
100420ce:	2300      	movs	r3, #0
100420d0:	e000      	b.n	100420d4 <SystemClock_Config+0x68>
	}
	return INIT_OK;
100420d2:	2301      	movs	r3, #1
}
100420d4:	0018      	movs	r0, r3
100420d6:	46bd      	mov	sp, r7
100420d8:	b009      	add	sp, #36	@ 0x24
100420da:	bd90      	pop	{r4, r7, pc}

100420dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
int PeriphCommonClock_Config(void)
{
100420dc:	b580      	push	{r7, lr}
100420de:	b086      	sub	sp, #24
100420e0:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
100420e2:	003b      	movs	r3, r7
100420e4:	0018      	movs	r0, r3
100420e6:	2318      	movs	r3, #24
100420e8:	001a      	movs	r2, r3
100420ea:	2100      	movs	r1, #0
100420ec:	f026 fb26 	bl	1006873c <memset>

	/** Initializes the peripherals clock
	*/
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
100420f0:	003b      	movs	r3, r7
100420f2:	2202      	movs	r2, #2
100420f4:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
100420f6:	003b      	movs	r3, r7
100420f8:	2280      	movs	r2, #128	@ 0x80
100420fa:	0152      	lsls	r2, r2, #5
100420fc:	615a      	str	r2, [r3, #20]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
100420fe:	003b      	movs	r3, r7
10042100:	0018      	movs	r0, r3
10042102:	f00b fda9 	bl	1004dc58 <HAL_RCCEx_PeriphCLKConfig>
10042106:	1e03      	subs	r3, r0, #0
10042108:	d001      	beq.n	1004210e <PeriphCommonClock_Config+0x32>
	{
		return INIT_ERROR;
1004210a:	2300      	movs	r3, #0
1004210c:	e000      	b.n	10042110 <PeriphCommonClock_Config+0x34>
	}
	return INIT_OK;
1004210e:	2301      	movs	r3, #1
}
10042110:	0018      	movs	r0, r3
10042112:	46bd      	mov	sp, r7
10042114:	b006      	add	sp, #24
10042116:	bd80      	pop	{r7, pc}

10042118 <BOARD_Init>:
 * @function: BOARD_Init()
 * @brief: initialize the board's timers
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int BOARD_Init(void){
10042118:	b580      	push	{r7, lr}
1004211a:	b082      	sub	sp, #8
1004211c:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
1004211e:	4b0f      	ldr	r3, [pc, #60]	@ (1004215c <BOARD_Init+0x44>)
10042120:	781b      	ldrb	r3, [r3, #0]
10042122:	2b00      	cmp	r3, #0
10042124:	d001      	beq.n	1004212a <BOARD_Init+0x12>
10042126:	2301      	movs	r3, #1
10042128:	e013      	b.n	10042152 <BOARD_Init+0x3a>
	HAL_Init();
1004212a:	f006 f91f 	bl	1004836c <HAL_Init>
	int errorFlag = INIT_OK;
1004212e:	2301      	movs	r3, #1
10042130:	607b      	str	r3, [r7, #4]
	if(PeriphCommonClock_Config() == INIT_ERROR){
10042132:	f7ff ffd3 	bl	100420dc <PeriphCommonClock_Config>
10042136:	1e03      	subs	r3, r0, #0
10042138:	d101      	bne.n	1004213e <BOARD_Init+0x26>
		errorFlag = INIT_ERROR;
1004213a:	2300      	movs	r3, #0
1004213c:	607b      	str	r3, [r7, #4]
	}
	if(SystemClock_Config() == INIT_ERROR){
1004213e:	f7ff ff95 	bl	1004206c <SystemClock_Config>
10042142:	1e03      	subs	r3, r0, #0
10042144:	d101      	bne.n	1004214a <BOARD_Init+0x32>
		errorFlag = INIT_ERROR;
10042146:	2300      	movs	r3, #0
10042148:	607b      	str	r3, [r7, #4]
	}
	initialized = 1;
1004214a:	4b04      	ldr	r3, [pc, #16]	@ (1004215c <BOARD_Init+0x44>)
1004214c:	2201      	movs	r2, #1
1004214e:	701a      	strb	r2, [r3, #0]
	return errorFlag;
10042150:	687b      	ldr	r3, [r7, #4]
}
10042152:	0018      	movs	r0, r3
10042154:	46bd      	mov	sp, r7
10042156:	b002      	add	sp, #8
10042158:	bd80      	pop	{r7, pc}
1004215a:	46c0      	nop			@ (mov r8, r8)
1004215c:	20000397 	.word	0x20000397

10042160 <BOARD_CrashHandler>:
 * @brief: disables all interrupts and enters an infinite loop
 * @param: none
 * @return: none
 */
void BOARD_CrashHandler(void)
{
10042160:	b580      	push	{r7, lr}
10042162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10042164:	b672      	cpsid	i
}
10042166:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1){
10042168:	46c0      	nop			@ (mov r8, r8)
1004216a:	e7fd      	b.n	10042168 <BOARD_CrashHandler+0x8>

1004216c <Error_Handler>:
 * @brief: disables all interrupts and enters an infinite loop
 * @param: none
 * @return: none
 */
void Error_Handler(void)
{
1004216c:	b580      	push	{r7, lr}
1004216e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
10042170:	b672      	cpsid	i
}
10042172:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1);
10042174:	46c0      	nop			@ (mov r8, r8)
10042176:	e7fd      	b.n	10042174 <Error_Handler+0x8>

10042178 <DrawMain>:
static uint8_t dayselect;
static uint8_t Stimeselect;
static uint8_t Etimeselect;
//----------------------------------------Private Functions--------------------------------------

void DrawMain(){
10042178:	b5b0      	push	{r4, r5, r7, lr}
1004217a:	b0b2      	sub	sp, #200	@ 0xc8
1004217c:	af06      	add	r7, sp, #24
					  "Back:play track\n"
			   	   	  "Sel:append schedule\n"
	   	   	  	  	  "%c:Set Date/time\n"
					  "%c:more options\n"
					  "Volume: %c%.3d%c\n"
					  "Current song %d-%d",DOWN_ARROW_OFF, UP_ARROW_OFF, LEFT_ARROW_ON, FLASH_GetVolume(), RIGHT_ARROW_ON, MP3_GetCurrentFile()>>8, MP3_GetCurrentFile()&0xFF);
1004217e:	f002 fbf7 	bl	10044970 <FLASH_GetVolume>
10042182:	0003      	movs	r3, r0
	sprintf(maintext, "Main menu\n"
10042184:	001c      	movs	r4, r3
					  "Current song %d-%d",DOWN_ARROW_OFF, UP_ARROW_OFF, LEFT_ARROW_ON, FLASH_GetVolume(), RIGHT_ARROW_ON, MP3_GetCurrentFile()>>8, MP3_GetCurrentFile()&0xFF);
10042186:	f003 ff67 	bl	10046058 <MP3_GetCurrentFile>
1004218a:	0003      	movs	r3, r0
	sprintf(maintext, "Main menu\n"
1004218c:	0a1b      	lsrs	r3, r3, #8
1004218e:	b29b      	uxth	r3, r3
10042190:	001d      	movs	r5, r3
					  "Current song %d-%d",DOWN_ARROW_OFF, UP_ARROW_OFF, LEFT_ARROW_ON, FLASH_GetVolume(), RIGHT_ARROW_ON, MP3_GetCurrentFile()>>8, MP3_GetCurrentFile()&0xFF);
10042192:	f003 ff61 	bl	10046058 <MP3_GetCurrentFile>
10042196:	0003      	movs	r3, r0
	sprintf(maintext, "Main menu\n"
10042198:	001a      	movs	r2, r3
1004219a:	23ff      	movs	r3, #255	@ 0xff
1004219c:	4013      	ands	r3, r2
1004219e:	490d      	ldr	r1, [pc, #52]	@ (100421d4 <DrawMain+0x5c>)
100421a0:	0038      	movs	r0, r7
100421a2:	9304      	str	r3, [sp, #16]
100421a4:	9503      	str	r5, [sp, #12]
100421a6:	2308      	movs	r3, #8
100421a8:	9302      	str	r3, [sp, #8]
100421aa:	9401      	str	r4, [sp, #4]
100421ac:	2306      	movs	r3, #6
100421ae:	9300      	str	r3, [sp, #0]
100421b0:	2301      	movs	r3, #1
100421b2:	2203      	movs	r2, #3
100421b4:	f026 f9a6 	bl	10068504 <siprintf>
	OledClear(OLED_COLOR_BLACK);
100421b8:	2000      	movs	r0, #0
100421ba:	f004 f895 	bl	100462e8 <OledClear>
	OledDrawString(maintext);
100421be:	003b      	movs	r3, r7
100421c0:	0018      	movs	r0, r3
100421c2:	f004 f847 	bl	10046254 <OledDrawString>
	OledUpdate();
100421c6:	f004 f8c5 	bl	10046354 <OledUpdate>
}
100421ca:	46c0      	nop			@ (mov r8, r8)
100421cc:	46bd      	mov	sp, r7
100421ce:	b02c      	add	sp, #176	@ 0xb0
100421d0:	bdb0      	pop	{r4, r5, r7, pc}
100421d2:	46c0      	nop			@ (mov r8, r8)
100421d4:	10069574 	.word	0x10069574

100421d8 <DrawFolder>:

void DrawFolder(uint8_t cursor, uint8_t folder, uint8_t track){
100421d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100421da:	b09d      	sub	sp, #116	@ 0x74
100421dc:	af04      	add	r7, sp, #16
100421de:	0004      	movs	r4, r0
100421e0:	0008      	movs	r0, r1
100421e2:	0011      	movs	r1, r2
100421e4:	1dfb      	adds	r3, r7, #7
100421e6:	1c22      	adds	r2, r4, #0
100421e8:	701a      	strb	r2, [r3, #0]
100421ea:	1dbb      	adds	r3, r7, #6
100421ec:	1c02      	adds	r2, r0, #0
100421ee:	701a      	strb	r2, [r3, #0]
100421f0:	1d7b      	adds	r3, r7, #5
100421f2:	1c0a      	adds	r2, r1, #0
100421f4:	701a      	strb	r2, [r3, #0]

	char folderselectstring[88];
	sprintf(folderselectstring, "Select Folder\n"
100421f6:	1dfb      	adds	r3, r7, #7
100421f8:	781b      	ldrb	r3, [r3, #0]
100421fa:	2b00      	cmp	r3, #0
100421fc:	d101      	bne.n	10042202 <DrawFolder+0x2a>
100421fe:	2102      	movs	r1, #2
10042200:	e000      	b.n	10042204 <DrawFolder+0x2c>
10042202:	2101      	movs	r1, #1
10042204:	1dfb      	adds	r3, r7, #7
10042206:	781b      	ldrb	r3, [r3, #0]
10042208:	2b00      	cmp	r3, #0
1004220a:	d001      	beq.n	10042210 <DrawFolder+0x38>
1004220c:	2002      	movs	r0, #2
1004220e:	e000      	b.n	10042212 <DrawFolder+0x3a>
10042210:	2001      	movs	r0, #1
10042212:	1dbb      	adds	r3, r7, #6
10042214:	781c      	ldrb	r4, [r3, #0]
10042216:	1d7b      	adds	r3, r7, #5
10042218:	781d      	ldrb	r5, [r3, #0]
1004221a:	1dfb      	adds	r3, r7, #7
1004221c:	781b      	ldrb	r3, [r3, #0]
1004221e:	2b00      	cmp	r3, #0
10042220:	d101      	bne.n	10042226 <DrawFolder+0x4e>
10042222:	2304      	movs	r3, #4
10042224:	e000      	b.n	10042228 <DrawFolder+0x50>
10042226:	2303      	movs	r3, #3
10042228:	1dfa      	adds	r2, r7, #7
1004222a:	7812      	ldrb	r2, [r2, #0]
1004222c:	2a00      	cmp	r2, #0
1004222e:	d001      	beq.n	10042234 <DrawFolder+0x5c>
10042230:	2204      	movs	r2, #4
10042232:	e000      	b.n	10042236 <DrawFolder+0x5e>
10042234:	2203      	movs	r2, #3
10042236:	4e0e      	ldr	r6, [pc, #56]	@ (10042270 <DrawFolder+0x98>)
10042238:	46b4      	mov	ip, r6
1004223a:	2608      	movs	r6, #8
1004223c:	19be      	adds	r6, r7, r6
1004223e:	9203      	str	r2, [sp, #12]
10042240:	9302      	str	r3, [sp, #8]
10042242:	9501      	str	r5, [sp, #4]
10042244:	9400      	str	r4, [sp, #0]
10042246:	0003      	movs	r3, r0
10042248:	000a      	movs	r2, r1
1004224a:	4661      	mov	r1, ip
1004224c:	0030      	movs	r0, r6
1004224e:	f026 f959 	bl	10068504 <siprintf>
			                    "Folder: %d Track: %d\n"
			                    "        %c        %c\n",
								!cursor?UP_ARROW_ON:UP_ARROW_OFF, cursor?UP_ARROW_ON:UP_ARROW_OFF,
								folder, track,
								!cursor?DOWN_ARROW_ON:DOWN_ARROW_OFF, cursor?DOWN_ARROW_ON:DOWN_ARROW_OFF);
	OledClear(OLED_COLOR_BLACK);
10042252:	2000      	movs	r0, #0
10042254:	f004 f848 	bl	100462e8 <OledClear>
	OledDrawString(folderselectstring);
10042258:	2608      	movs	r6, #8
1004225a:	19bb      	adds	r3, r7, r6
1004225c:	0018      	movs	r0, r3
1004225e:	f003 fff9 	bl	10046254 <OledDrawString>
	OledUpdate();
10042262:	f004 f877 	bl	10046354 <OledUpdate>
}
10042266:	46c0      	nop			@ (mov r8, r8)
10042268:	46bd      	mov	sp, r7
1004226a:	b019      	add	sp, #100	@ 0x64
1004226c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004226e:	46c0      	nop			@ (mov r8, r8)
10042270:	100695e8 	.word	0x100695e8

10042274 <DrawOptions>:

void DrawOptions(uint8_t cursor, uint8_t dutycycle){
10042274:	b5f0      	push	{r4, r5, r6, r7, lr}
10042276:	46c6      	mov	lr, r8
10042278:	b500      	push	{lr}
1004227a:	b09e      	sub	sp, #120	@ 0x78
1004227c:	af06      	add	r7, sp, #24
1004227e:	0002      	movs	r2, r0
10042280:	1dfb      	adds	r3, r7, #7
10042282:	701a      	strb	r2, [r3, #0]
10042284:	1dbb      	adds	r3, r7, #6
10042286:	1c0a      	adds	r2, r1, #0
10042288:	701a      	strb	r2, [r3, #0]
	char folderselectstring[88];
	sprintf(folderselectstring, "Options\n"
1004228a:	1dfb      	adds	r3, r7, #7
1004228c:	781b      	ldrb	r3, [r3, #0]
1004228e:	2b00      	cmp	r3, #0
10042290:	d101      	bne.n	10042296 <DrawOptions+0x22>
10042292:	2506      	movs	r5, #6
10042294:	e000      	b.n	10042298 <DrawOptions+0x24>
10042296:	2505      	movs	r5, #5
10042298:	1dbb      	adds	r3, r7, #6
1004229a:	781b      	ldrb	r3, [r3, #0]
1004229c:	4698      	mov	r8, r3
1004229e:	1dfb      	adds	r3, r7, #7
100422a0:	781b      	ldrb	r3, [r3, #0]
100422a2:	2b00      	cmp	r3, #0
100422a4:	d101      	bne.n	100422aa <DrawOptions+0x36>
100422a6:	2308      	movs	r3, #8
100422a8:	e000      	b.n	100422ac <DrawOptions+0x38>
100422aa:	2307      	movs	r3, #7
100422ac:	1dfa      	adds	r2, r7, #7
100422ae:	7812      	ldrb	r2, [r2, #0]
100422b0:	2a01      	cmp	r2, #1
100422b2:	d101      	bne.n	100422b8 <DrawOptions+0x44>
100422b4:	2206      	movs	r2, #6
100422b6:	e000      	b.n	100422ba <DrawOptions+0x46>
100422b8:	2205      	movs	r2, #5
100422ba:	1df9      	adds	r1, r7, #7
100422bc:	7809      	ldrb	r1, [r1, #0]
100422be:	2901      	cmp	r1, #1
100422c0:	d101      	bne.n	100422c6 <DrawOptions+0x52>
100422c2:	2108      	movs	r1, #8
100422c4:	e000      	b.n	100422c8 <DrawOptions+0x54>
100422c6:	2107      	movs	r1, #7
100422c8:	1df8      	adds	r0, r7, #7
100422ca:	7800      	ldrb	r0, [r0, #0]
100422cc:	2802      	cmp	r0, #2
100422ce:	d101      	bne.n	100422d4 <DrawOptions+0x60>
100422d0:	2008      	movs	r0, #8
100422d2:	e000      	b.n	100422d6 <DrawOptions+0x62>
100422d4:	2007      	movs	r0, #7
100422d6:	1dfc      	adds	r4, r7, #7
100422d8:	7824      	ldrb	r4, [r4, #0]
100422da:	2c02      	cmp	r4, #2
100422dc:	d101      	bne.n	100422e2 <DrawOptions+0x6e>
100422de:	2406      	movs	r4, #6
100422e0:	e000      	b.n	100422e4 <DrawOptions+0x70>
100422e2:	2405      	movs	r4, #5
100422e4:	4e0f      	ldr	r6, [pc, #60]	@ (10042324 <DrawOptions+0xb0>)
100422e6:	46b4      	mov	ip, r6
100422e8:	2608      	movs	r6, #8
100422ea:	19be      	adds	r6, r7, r6
100422ec:	9404      	str	r4, [sp, #16]
100422ee:	9003      	str	r0, [sp, #12]
100422f0:	9102      	str	r1, [sp, #8]
100422f2:	9201      	str	r2, [sp, #4]
100422f4:	9300      	str	r3, [sp, #0]
100422f6:	4643      	mov	r3, r8
100422f8:	002a      	movs	r2, r5
100422fa:	4661      	mov	r1, ip
100422fc:	0030      	movs	r0, r6
100422fe:	f026 f901 	bl	10068504 <siprintf>
								" Song:%c%c\n"
								"%cClear Schedule%c",
								0==cursor?LEFT_ARROW_ON:LEFT_ARROW_OFF, dutycycle,0==cursor?RIGHT_ARROW_ON:RIGHT_ARROW_OFF,
								1==cursor?LEFT_ARROW_ON:LEFT_ARROW_OFF,           1==cursor?RIGHT_ARROW_ON:RIGHT_ARROW_OFF,
								2==cursor?RIGHT_ARROW_ON:RIGHT_ARROW_OFF, 		  2==cursor?LEFT_ARROW_ON:LEFT_ARROW_OFF);
	OledClear(OLED_COLOR_BLACK);
10042302:	2000      	movs	r0, #0
10042304:	f003 fff0 	bl	100462e8 <OledClear>
	OledDrawString(folderselectstring);
10042308:	2608      	movs	r6, #8
1004230a:	19bb      	adds	r3, r7, r6
1004230c:	0018      	movs	r0, r3
1004230e:	f003 ffa1 	bl	10046254 <OledDrawString>
	OledUpdate();
10042312:	f004 f81f 	bl	10046354 <OledUpdate>

}
10042316:	46c0      	nop			@ (mov r8, r8)
10042318:	46bd      	mov	sp, r7
1004231a:	b018      	add	sp, #96	@ 0x60
1004231c:	bc80      	pop	{r7}
1004231e:	46b8      	mov	r8, r7
10042320:	bdf0      	pop	{r4, r5, r6, r7, pc}
10042322:	46c0      	nop			@ (mov r8, r8)
10042324:	10069638 	.word	0x10069638

10042328 <DrawSetTime>:

void DrawSetTime(uint8_t cursor, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute){
10042328:	b5f0      	push	{r4, r5, r6, r7, lr}
1004232a:	46de      	mov	lr, fp
1004232c:	4657      	mov	r7, sl
1004232e:	464e      	mov	r6, r9
10042330:	4645      	mov	r5, r8
10042332:	b5e0      	push	{r5, r6, r7, lr}
10042334:	b0a5      	sub	sp, #148	@ 0x94
10042336:	af0a      	add	r7, sp, #40	@ 0x28
10042338:	0005      	movs	r5, r0
1004233a:	000c      	movs	r4, r1
1004233c:	0010      	movs	r0, r2
1004233e:	0019      	movs	r1, r3
10042340:	260f      	movs	r6, #15
10042342:	19bb      	adds	r3, r7, r6
10042344:	1c2a      	adds	r2, r5, #0
10042346:	701a      	strb	r2, [r3, #0]
10042348:	230e      	movs	r3, #14
1004234a:	18fb      	adds	r3, r7, r3
1004234c:	1c22      	adds	r2, r4, #0
1004234e:	701a      	strb	r2, [r3, #0]
10042350:	230d      	movs	r3, #13
10042352:	18fb      	adds	r3, r7, r3
10042354:	1c02      	adds	r2, r0, #0
10042356:	701a      	strb	r2, [r3, #0]
10042358:	230c      	movs	r3, #12
1004235a:	18fb      	adds	r3, r7, r3
1004235c:	1c0a      	adds	r2, r1, #0
1004235e:	701a      	strb	r2, [r3, #0]
	char folderselectstring[88];
#define TOPCHAR cursor?UP_ARROW_ON:UP_ARROW_OFF
#define BOTCHAR cursor?DOWN_ARROW_ON:DOWN_ARROW_OFF
	sprintf(folderselectstring, "Set Date/Time\n"
10042360:	19bb      	adds	r3, r7, r6
10042362:	781b      	ldrb	r3, [r3, #0]
10042364:	2b00      	cmp	r3, #0
10042366:	d102      	bne.n	1004236e <DrawSetTime+0x46>
10042368:	2302      	movs	r3, #2
1004236a:	469c      	mov	ip, r3
1004236c:	e001      	b.n	10042372 <DrawSetTime+0x4a>
1004236e:	2301      	movs	r3, #1
10042370:	469c      	mov	ip, r3
10042372:	230f      	movs	r3, #15
10042374:	18fb      	adds	r3, r7, r3
10042376:	781b      	ldrb	r3, [r3, #0]
10042378:	2b01      	cmp	r3, #1
1004237a:	d102      	bne.n	10042382 <DrawSetTime+0x5a>
1004237c:	2302      	movs	r3, #2
1004237e:	4698      	mov	r8, r3
10042380:	e001      	b.n	10042386 <DrawSetTime+0x5e>
10042382:	2301      	movs	r3, #1
10042384:	4698      	mov	r8, r3
10042386:	230f      	movs	r3, #15
10042388:	18fb      	adds	r3, r7, r3
1004238a:	781b      	ldrb	r3, [r3, #0]
1004238c:	2b02      	cmp	r3, #2
1004238e:	d101      	bne.n	10042394 <DrawSetTime+0x6c>
10042390:	2202      	movs	r2, #2
10042392:	e000      	b.n	10042396 <DrawSetTime+0x6e>
10042394:	2201      	movs	r2, #1
10042396:	230f      	movs	r3, #15
10042398:	18fb      	adds	r3, r7, r3
1004239a:	781b      	ldrb	r3, [r3, #0]
1004239c:	2b03      	cmp	r3, #3
1004239e:	d101      	bne.n	100423a4 <DrawSetTime+0x7c>
100423a0:	2102      	movs	r1, #2
100423a2:	e000      	b.n	100423a6 <DrawSetTime+0x7e>
100423a4:	2101      	movs	r1, #1
100423a6:	230e      	movs	r3, #14
100423a8:	18fb      	adds	r3, r7, r3
100423aa:	781b      	ldrb	r3, [r3, #0]
100423ac:	4699      	mov	r9, r3
100423ae:	230d      	movs	r3, #13
100423b0:	18fb      	adds	r3, r7, r3
100423b2:	781b      	ldrb	r3, [r3, #0]
100423b4:	469a      	mov	sl, r3
100423b6:	230c      	movs	r3, #12
100423b8:	18fb      	adds	r3, r7, r3
100423ba:	781b      	ldrb	r3, [r3, #0]
100423bc:	469b      	mov	fp, r3
100423be:	2388      	movs	r3, #136	@ 0x88
100423c0:	2008      	movs	r0, #8
100423c2:	181b      	adds	r3, r3, r0
100423c4:	19db      	adds	r3, r3, r7
100423c6:	781b      	ldrb	r3, [r3, #0]
100423c8:	60bb      	str	r3, [r7, #8]
100423ca:	230f      	movs	r3, #15
100423cc:	18fb      	adds	r3, r7, r3
100423ce:	781b      	ldrb	r3, [r3, #0]
100423d0:	2b00      	cmp	r3, #0
100423d2:	d101      	bne.n	100423d8 <DrawSetTime+0xb0>
100423d4:	2404      	movs	r4, #4
100423d6:	e000      	b.n	100423da <DrawSetTime+0xb2>
100423d8:	2403      	movs	r4, #3
100423da:	230f      	movs	r3, #15
100423dc:	18fb      	adds	r3, r7, r3
100423de:	781b      	ldrb	r3, [r3, #0]
100423e0:	2b01      	cmp	r3, #1
100423e2:	d101      	bne.n	100423e8 <DrawSetTime+0xc0>
100423e4:	2504      	movs	r5, #4
100423e6:	e000      	b.n	100423ea <DrawSetTime+0xc2>
100423e8:	2503      	movs	r5, #3
100423ea:	230f      	movs	r3, #15
100423ec:	18fb      	adds	r3, r7, r3
100423ee:	781b      	ldrb	r3, [r3, #0]
100423f0:	2b02      	cmp	r3, #2
100423f2:	d101      	bne.n	100423f8 <DrawSetTime+0xd0>
100423f4:	2604      	movs	r6, #4
100423f6:	e000      	b.n	100423fa <DrawSetTime+0xd2>
100423f8:	2603      	movs	r6, #3
100423fa:	230f      	movs	r3, #15
100423fc:	18fb      	adds	r3, r7, r3
100423fe:	781b      	ldrb	r3, [r3, #0]
10042400:	2b03      	cmp	r3, #3
10042402:	d102      	bne.n	1004240a <DrawSetTime+0xe2>
10042404:	2304      	movs	r3, #4
10042406:	603b      	str	r3, [r7, #0]
10042408:	e001      	b.n	1004240e <DrawSetTime+0xe6>
1004240a:	2303      	movs	r3, #3
1004240c:	603b      	str	r3, [r7, #0]
1004240e:	4817      	ldr	r0, [pc, #92]	@ (1004246c <DrawSetTime+0x144>)
10042410:	6078      	str	r0, [r7, #4]
10042412:	2008      	movs	r0, #8
10042414:	2308      	movs	r3, #8
10042416:	18c0      	adds	r0, r0, r3
10042418:	19c0      	adds	r0, r0, r7
1004241a:	683b      	ldr	r3, [r7, #0]
1004241c:	9309      	str	r3, [sp, #36]	@ 0x24
1004241e:	9608      	str	r6, [sp, #32]
10042420:	9507      	str	r5, [sp, #28]
10042422:	9406      	str	r4, [sp, #24]
10042424:	68bb      	ldr	r3, [r7, #8]
10042426:	9305      	str	r3, [sp, #20]
10042428:	465b      	mov	r3, fp
1004242a:	9304      	str	r3, [sp, #16]
1004242c:	4653      	mov	r3, sl
1004242e:	9303      	str	r3, [sp, #12]
10042430:	464b      	mov	r3, r9
10042432:	9302      	str	r3, [sp, #8]
10042434:	9101      	str	r1, [sp, #4]
10042436:	9200      	str	r2, [sp, #0]
10042438:	4643      	mov	r3, r8
1004243a:	4662      	mov	r2, ip
1004243c:	6879      	ldr	r1, [r7, #4]
1004243e:	f026 f861 	bl	10068504 <siprintf>
								"%.2d/%.2d %.2d:%.2d\n"
								" %c  %c  %c  %c\n",
								0==TOPCHAR, 1 ==TOPCHAR, 2 ==TOPCHAR, 3==TOPCHAR,
								month, day, hour, minute,
								0==BOTCHAR, 1 ==BOTCHAR, 2 ==BOTCHAR, 3==BOTCHAR);
	OledClear(OLED_COLOR_BLACK);
10042442:	2000      	movs	r0, #0
10042444:	f003 ff50 	bl	100462e8 <OledClear>
	OledDrawString(folderselectstring);
10042448:	2008      	movs	r0, #8
1004244a:	2308      	movs	r3, #8
1004244c:	18c3      	adds	r3, r0, r3
1004244e:	19db      	adds	r3, r3, r7
10042450:	0018      	movs	r0, r3
10042452:	f003 feff 	bl	10046254 <OledDrawString>
	OledUpdate();
10042456:	f003 ff7d 	bl	10046354 <OledUpdate>

}
1004245a:	46c0      	nop			@ (mov r8, r8)
1004245c:	46bd      	mov	sp, r7
1004245e:	b01b      	add	sp, #108	@ 0x6c
10042460:	bcf0      	pop	{r4, r5, r6, r7}
10042462:	46bb      	mov	fp, r7
10042464:	46b2      	mov	sl, r6
10042466:	46a9      	mov	r9, r5
10042468:	46a0      	mov	r8, r4
1004246a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004246c:	10069674 	.word	0x10069674

10042470 <DrawSchedule>:

void DrawSchedule(uint8_t cursor, uint8_t month, uint8_t day, uint8_t start, uint8_t end){
10042470:	b5f0      	push	{r4, r5, r6, r7, lr}
10042472:	46de      	mov	lr, fp
10042474:	4657      	mov	r7, sl
10042476:	464e      	mov	r6, r9
10042478:	4645      	mov	r5, r8
1004247a:	b5e0      	push	{r5, r6, r7, lr}
1004247c:	b0b3      	sub	sp, #204	@ 0xcc
1004247e:	af10      	add	r7, sp, #64	@ 0x40
10042480:	0005      	movs	r5, r0
10042482:	000c      	movs	r4, r1
10042484:	0010      	movs	r0, r2
10042486:	0019      	movs	r1, r3
10042488:	2627      	movs	r6, #39	@ 0x27
1004248a:	19bb      	adds	r3, r7, r6
1004248c:	1c2a      	adds	r2, r5, #0
1004248e:	701a      	strb	r2, [r3, #0]
10042490:	2326      	movs	r3, #38	@ 0x26
10042492:	18fb      	adds	r3, r7, r3
10042494:	1c22      	adds	r2, r4, #0
10042496:	701a      	strb	r2, [r3, #0]
10042498:	2325      	movs	r3, #37	@ 0x25
1004249a:	18fb      	adds	r3, r7, r3
1004249c:	1c02      	adds	r2, r0, #0
1004249e:	701a      	strb	r2, [r3, #0]
100424a0:	2024      	movs	r0, #36	@ 0x24
100424a2:	183b      	adds	r3, r7, r0
100424a4:	1c0a      	adds	r2, r1, #0
100424a6:	701a      	strb	r2, [r3, #0]
	char folderselectstring[92];
	uint8_t hour1 = (start&0b11111000)>>3;
100424a8:	2367      	movs	r3, #103	@ 0x67
100424aa:	2120      	movs	r1, #32
100424ac:	185b      	adds	r3, r3, r1
100424ae:	19db      	adds	r3, r3, r7
100424b0:	183a      	adds	r2, r7, r0
100424b2:	7812      	ldrb	r2, [r2, #0]
100424b4:	08d2      	lsrs	r2, r2, #3
100424b6:	701a      	strb	r2, [r3, #0]
	uint8_t minute1 = ((start & 0b011)*15);
100424b8:	183b      	adds	r3, r7, r0
100424ba:	781b      	ldrb	r3, [r3, #0]
100424bc:	2203      	movs	r2, #3
100424be:	4013      	ands	r3, r2
100424c0:	b2da      	uxtb	r2, r3
100424c2:	2366      	movs	r3, #102	@ 0x66
100424c4:	0008      	movs	r0, r1
100424c6:	185b      	adds	r3, r3, r1
100424c8:	19db      	adds	r3, r3, r7
100424ca:	1c11      	adds	r1, r2, #0
100424cc:	0109      	lsls	r1, r1, #4
100424ce:	1a8a      	subs	r2, r1, r2
100424d0:	701a      	strb	r2, [r3, #0]
	uint8_t hour2 = (end&0b11111000)>>3;
100424d2:	2365      	movs	r3, #101	@ 0x65
100424d4:	181b      	adds	r3, r3, r0
100424d6:	19da      	adds	r2, r3, r7
100424d8:	2190      	movs	r1, #144	@ 0x90
100424da:	180b      	adds	r3, r1, r0
100424dc:	19db      	adds	r3, r3, r7
100424de:	781b      	ldrb	r3, [r3, #0]
100424e0:	08db      	lsrs	r3, r3, #3
100424e2:	7013      	strb	r3, [r2, #0]
	uint8_t minute2 = ((end & 0b011)*15);
100424e4:	180b      	adds	r3, r1, r0
100424e6:	19db      	adds	r3, r3, r7
100424e8:	781b      	ldrb	r3, [r3, #0]
100424ea:	2203      	movs	r2, #3
100424ec:	4013      	ands	r3, r2
100424ee:	b2da      	uxtb	r2, r3
100424f0:	2364      	movs	r3, #100	@ 0x64
100424f2:	181b      	adds	r3, r3, r0
100424f4:	19db      	adds	r3, r3, r7
100424f6:	1c11      	adds	r1, r2, #0
100424f8:	0109      	lsls	r1, r1, #4
100424fa:	1a8a      	subs	r2, r1, r2
100424fc:	701a      	strb	r2, [r3, #0]
	sprintf(folderselectstring, "Schedule time to play\n"
100424fe:	19bb      	adds	r3, r7, r6
10042500:	781b      	ldrb	r3, [r3, #0]
10042502:	2b00      	cmp	r3, #0
10042504:	d102      	bne.n	1004250c <DrawSchedule+0x9c>
10042506:	2302      	movs	r3, #2
10042508:	623b      	str	r3, [r7, #32]
1004250a:	e001      	b.n	10042510 <DrawSchedule+0xa0>
1004250c:	2301      	movs	r3, #1
1004250e:	623b      	str	r3, [r7, #32]
10042510:	2327      	movs	r3, #39	@ 0x27
10042512:	18fb      	adds	r3, r7, r3
10042514:	781b      	ldrb	r3, [r3, #0]
10042516:	2b01      	cmp	r3, #1
10042518:	d102      	bne.n	10042520 <DrawSchedule+0xb0>
1004251a:	2302      	movs	r3, #2
1004251c:	61fb      	str	r3, [r7, #28]
1004251e:	e001      	b.n	10042524 <DrawSchedule+0xb4>
10042520:	2301      	movs	r3, #1
10042522:	61fb      	str	r3, [r7, #28]
10042524:	2327      	movs	r3, #39	@ 0x27
10042526:	18fb      	adds	r3, r7, r3
10042528:	781b      	ldrb	r3, [r3, #0]
1004252a:	2b02      	cmp	r3, #2
1004252c:	d102      	bne.n	10042534 <DrawSchedule+0xc4>
1004252e:	2302      	movs	r3, #2
10042530:	4698      	mov	r8, r3
10042532:	e001      	b.n	10042538 <DrawSchedule+0xc8>
10042534:	2301      	movs	r3, #1
10042536:	4698      	mov	r8, r3
10042538:	2327      	movs	r3, #39	@ 0x27
1004253a:	18fb      	adds	r3, r7, r3
1004253c:	781b      	ldrb	r3, [r3, #0]
1004253e:	2b03      	cmp	r3, #3
10042540:	d102      	bne.n	10042548 <DrawSchedule+0xd8>
10042542:	2302      	movs	r3, #2
10042544:	4699      	mov	r9, r3
10042546:	e001      	b.n	1004254c <DrawSchedule+0xdc>
10042548:	2301      	movs	r3, #1
1004254a:	4699      	mov	r9, r3
1004254c:	2327      	movs	r3, #39	@ 0x27
1004254e:	18fb      	adds	r3, r7, r3
10042550:	781b      	ldrb	r3, [r3, #0]
10042552:	2b04      	cmp	r3, #4
10042554:	d102      	bne.n	1004255c <DrawSchedule+0xec>
10042556:	2302      	movs	r3, #2
10042558:	469a      	mov	sl, r3
1004255a:	e001      	b.n	10042560 <DrawSchedule+0xf0>
1004255c:	2301      	movs	r3, #1
1004255e:	469a      	mov	sl, r3
10042560:	2327      	movs	r3, #39	@ 0x27
10042562:	18fb      	adds	r3, r7, r3
10042564:	781b      	ldrb	r3, [r3, #0]
10042566:	2b05      	cmp	r3, #5
10042568:	d102      	bne.n	10042570 <DrawSchedule+0x100>
1004256a:	2302      	movs	r3, #2
1004256c:	469b      	mov	fp, r3
1004256e:	e001      	b.n	10042574 <DrawSchedule+0x104>
10042570:	2301      	movs	r3, #1
10042572:	469b      	mov	fp, r3
10042574:	2326      	movs	r3, #38	@ 0x26
10042576:	18fb      	adds	r3, r7, r3
10042578:	781b      	ldrb	r3, [r3, #0]
1004257a:	61bb      	str	r3, [r7, #24]
1004257c:	2325      	movs	r3, #37	@ 0x25
1004257e:	18fb      	adds	r3, r7, r3
10042580:	781b      	ldrb	r3, [r3, #0]
10042582:	617b      	str	r3, [r7, #20]
10042584:	2367      	movs	r3, #103	@ 0x67
10042586:	2220      	movs	r2, #32
10042588:	189b      	adds	r3, r3, r2
1004258a:	19db      	adds	r3, r3, r7
1004258c:	781b      	ldrb	r3, [r3, #0]
1004258e:	613b      	str	r3, [r7, #16]
10042590:	2366      	movs	r3, #102	@ 0x66
10042592:	189b      	adds	r3, r3, r2
10042594:	19db      	adds	r3, r3, r7
10042596:	781b      	ldrb	r3, [r3, #0]
10042598:	60fb      	str	r3, [r7, #12]
1004259a:	2365      	movs	r3, #101	@ 0x65
1004259c:	189b      	adds	r3, r3, r2
1004259e:	19db      	adds	r3, r3, r7
100425a0:	781b      	ldrb	r3, [r3, #0]
100425a2:	60bb      	str	r3, [r7, #8]
100425a4:	2364      	movs	r3, #100	@ 0x64
100425a6:	189b      	adds	r3, r3, r2
100425a8:	19db      	adds	r3, r3, r7
100425aa:	781b      	ldrb	r3, [r3, #0]
100425ac:	607b      	str	r3, [r7, #4]
100425ae:	2327      	movs	r3, #39	@ 0x27
100425b0:	18fb      	adds	r3, r7, r3
100425b2:	781b      	ldrb	r3, [r3, #0]
100425b4:	2b00      	cmp	r3, #0
100425b6:	d102      	bne.n	100425be <DrawSchedule+0x14e>
100425b8:	2304      	movs	r3, #4
100425ba:	469c      	mov	ip, r3
100425bc:	e001      	b.n	100425c2 <DrawSchedule+0x152>
100425be:	2303      	movs	r3, #3
100425c0:	469c      	mov	ip, r3
100425c2:	2327      	movs	r3, #39	@ 0x27
100425c4:	18fb      	adds	r3, r7, r3
100425c6:	781b      	ldrb	r3, [r3, #0]
100425c8:	2b01      	cmp	r3, #1
100425ca:	d101      	bne.n	100425d0 <DrawSchedule+0x160>
100425cc:	2604      	movs	r6, #4
100425ce:	e000      	b.n	100425d2 <DrawSchedule+0x162>
100425d0:	2603      	movs	r6, #3
100425d2:	2327      	movs	r3, #39	@ 0x27
100425d4:	18fb      	adds	r3, r7, r3
100425d6:	781b      	ldrb	r3, [r3, #0]
100425d8:	2b02      	cmp	r3, #2
100425da:	d101      	bne.n	100425e0 <DrawSchedule+0x170>
100425dc:	2504      	movs	r5, #4
100425de:	e000      	b.n	100425e2 <DrawSchedule+0x172>
100425e0:	2503      	movs	r5, #3
100425e2:	2327      	movs	r3, #39	@ 0x27
100425e4:	18fb      	adds	r3, r7, r3
100425e6:	781b      	ldrb	r3, [r3, #0]
100425e8:	2b03      	cmp	r3, #3
100425ea:	d101      	bne.n	100425f0 <DrawSchedule+0x180>
100425ec:	2404      	movs	r4, #4
100425ee:	e000      	b.n	100425f2 <DrawSchedule+0x182>
100425f0:	2403      	movs	r4, #3
100425f2:	2327      	movs	r3, #39	@ 0x27
100425f4:	18fb      	adds	r3, r7, r3
100425f6:	781b      	ldrb	r3, [r3, #0]
100425f8:	2b04      	cmp	r3, #4
100425fa:	d101      	bne.n	10042600 <DrawSchedule+0x190>
100425fc:	2204      	movs	r2, #4
100425fe:	e000      	b.n	10042602 <DrawSchedule+0x192>
10042600:	2203      	movs	r2, #3
10042602:	2327      	movs	r3, #39	@ 0x27
10042604:	18fb      	adds	r3, r7, r3
10042606:	781b      	ldrb	r3, [r3, #0]
10042608:	2b05      	cmp	r3, #5
1004260a:	d101      	bne.n	10042610 <DrawSchedule+0x1a0>
1004260c:	2304      	movs	r3, #4
1004260e:	e000      	b.n	10042612 <DrawSchedule+0x1a2>
10042610:	2303      	movs	r3, #3
10042612:	491d      	ldr	r1, [pc, #116]	@ (10042688 <DrawSchedule+0x218>)
10042614:	6039      	str	r1, [r7, #0]
10042616:	2008      	movs	r0, #8
10042618:	2120      	movs	r1, #32
1004261a:	1840      	adds	r0, r0, r1
1004261c:	19c0      	adds	r0, r0, r7
1004261e:	930f      	str	r3, [sp, #60]	@ 0x3c
10042620:	920e      	str	r2, [sp, #56]	@ 0x38
10042622:	940d      	str	r4, [sp, #52]	@ 0x34
10042624:	950c      	str	r5, [sp, #48]	@ 0x30
10042626:	960b      	str	r6, [sp, #44]	@ 0x2c
10042628:	4663      	mov	r3, ip
1004262a:	930a      	str	r3, [sp, #40]	@ 0x28
1004262c:	687b      	ldr	r3, [r7, #4]
1004262e:	9309      	str	r3, [sp, #36]	@ 0x24
10042630:	68bb      	ldr	r3, [r7, #8]
10042632:	9308      	str	r3, [sp, #32]
10042634:	68fb      	ldr	r3, [r7, #12]
10042636:	9307      	str	r3, [sp, #28]
10042638:	693b      	ldr	r3, [r7, #16]
1004263a:	9306      	str	r3, [sp, #24]
1004263c:	697b      	ldr	r3, [r7, #20]
1004263e:	9305      	str	r3, [sp, #20]
10042640:	69bb      	ldr	r3, [r7, #24]
10042642:	9304      	str	r3, [sp, #16]
10042644:	465b      	mov	r3, fp
10042646:	9303      	str	r3, [sp, #12]
10042648:	4653      	mov	r3, sl
1004264a:	9302      	str	r3, [sp, #8]
1004264c:	464b      	mov	r3, r9
1004264e:	9301      	str	r3, [sp, #4]
10042650:	4643      	mov	r3, r8
10042652:	9300      	str	r3, [sp, #0]
10042654:	69fb      	ldr	r3, [r7, #28]
10042656:	6a3a      	ldr	r2, [r7, #32]
10042658:	6839      	ldr	r1, [r7, #0]
1004265a:	f025 ff53 	bl	10068504 <siprintf>
								"%.2d/%.2d S:%.2d:%.2d E:%.2d:%.2d\n"
								" %c  %c    %c  %c    %c  %c\n",
								0==TOPCHAR, 1 ==TOPCHAR, 2 ==TOPCHAR, 3==TOPCHAR, 4==TOPCHAR, 5==TOPCHAR,
								month, day , hour1, minute1, hour2, minute2,
								0==BOTCHAR, 1 ==BOTCHAR, 2 ==BOTCHAR, 3==BOTCHAR, 4==BOTCHAR, 5==BOTCHAR);
	OledClear(OLED_COLOR_BLACK);
1004265e:	2000      	movs	r0, #0
10042660:	f003 fe42 	bl	100462e8 <OledClear>
	OledDrawString(folderselectstring);
10042664:	2008      	movs	r0, #8
10042666:	2320      	movs	r3, #32
10042668:	18c3      	adds	r3, r0, r3
1004266a:	19db      	adds	r3, r3, r7
1004266c:	0018      	movs	r0, r3
1004266e:	f003 fdf1 	bl	10046254 <OledDrawString>
	OledUpdate();
10042672:	f003 fe6f 	bl	10046354 <OledUpdate>

}
10042676:	46c0      	nop			@ (mov r8, r8)
10042678:	46bd      	mov	sp, r7
1004267a:	b023      	add	sp, #140	@ 0x8c
1004267c:	bcf0      	pop	{r4, r5, r6, r7}
1004267e:	46bb      	mov	fp, r7
10042680:	46b2      	mov	sl, r6
10042682:	46a9      	mov	r9, r5
10042684:	46a0      	mov	r8, r4
10042686:	bdf0      	pop	{r4, r5, r6, r7, pc}
10042688:	100696b8 	.word	0x100696b8

1004268c <ButtonsMenuSM_Event_Init>:
 * @Function: ButtonsMenuSM_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t ButtonsMenuSM_Event_Init(FIFO Queue){
1004268c:	b580      	push	{r7, lr}
1004268e:	b082      	sub	sp, #8
10042690:	af00      	add	r7, sp, #0
10042692:	6078      	str	r0, [r7, #4]
    ButtonsMenuSMqueue = Queue;
10042694:	4b0d      	ldr	r3, [pc, #52]	@ (100426cc <ButtonsMenuSM_Event_Init+0x40>)
10042696:	687a      	ldr	r2, [r7, #4]
10042698:	601a      	str	r2, [r3, #0]
    BMState = main;
1004269a:	4b0d      	ldr	r3, [pc, #52]	@ (100426d0 <ButtonsMenuSM_Event_Init+0x44>)
1004269c:	2200      	movs	r2, #0
1004269e:	701a      	strb	r2, [r3, #0]
    displayoff = 1;
100426a0:	4b0c      	ldr	r3, [pc, #48]	@ (100426d4 <ButtonsMenuSM_Event_Init+0x48>)
100426a2:	2201      	movs	r2, #1
100426a4:	701a      	strb	r2, [r3, #0]
    GPIO_Init();
100426a6:	f002 fb9b 	bl	10044de0 <GPIO_Init>
    I2C_Init();
100426aa:	f002 fe73 	bl	10045394 <I2C_Init>
	TIMERS_Init();
100426ae:	f004 f9c7 	bl	10046a40 <TIMERS_Init>
	OledInit();
100426b2:	f003 fce3 	bl	1004607c <OledInit>
	BSP_LED_Init(LED_BLUE);
100426b6:	2000      	movs	r0, #0
100426b8:	f005 fc4e 	bl	10047f58 <BSP_LED_Init>
	BSP_LED_Init(LED_RED);
100426bc:	2002      	movs	r0, #2
100426be:	f005 fc4b 	bl	10047f58 <BSP_LED_Init>
    return INIT_OK;
100426c2:	2301      	movs	r3, #1
}
100426c4:	0018      	movs	r0, r3
100426c6:	46bd      	mov	sp, r7
100426c8:	b002      	add	sp, #8
100426ca:	bd80      	pop	{r7, pc}
100426cc:	20000398 	.word	0x20000398
100426d0:	2000039c 	.word	0x2000039c
100426d4:	2000039d 	.word	0x2000039d

100426d8 <ButtonsMenuSM_Event_Post>:
 * @Function: ButtonsMenuSM_Event_Init
 * @Brief: Provides the ability for state machines to interact
 * @param: event to be posted
 * @return: none
 */
void ButtonsMenuSM_Event_Post(Event_t event){
100426d8:	b580      	push	{r7, lr}
100426da:	b082      	sub	sp, #8
100426dc:	af00      	add	r7, sp, #0
100426de:	1d3b      	adds	r3, r7, #4
100426e0:	6018      	str	r0, [r3, #0]
    FIFO_Enqueue(ButtonsMenuSMqueue, event);
100426e2:	4b05      	ldr	r3, [pc, #20]	@ (100426f8 <ButtonsMenuSM_Event_Post+0x20>)
100426e4:	681a      	ldr	r2, [r3, #0]
100426e6:	1d3b      	adds	r3, r7, #4
100426e8:	6819      	ldr	r1, [r3, #0]
100426ea:	0010      	movs	r0, r2
100426ec:	f001 ffed 	bl	100446ca <FIFO_Enqueue>
}
100426f0:	46c0      	nop			@ (mov r8, r8)
100426f2:	46bd      	mov	sp, r7
100426f4:	b002      	add	sp, #8
100426f6:	bd80      	pop	{r7, pc}
100426f8:	20000398 	.word	0x20000398

100426fc <ButtonsMenuSM_Event_Updater>:
 * @Function: ButtonsMenuSM_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the
 * @param: none
 * @return: An event
 */
Event_t ButtonsMenuSM_Event_Updater(void){
100426fc:	b5b0      	push	{r4, r5, r7, lr}
100426fe:	b084      	sub	sp, #16
10042700:	af00      	add	r7, sp, #0
    static uint32_t debounce = 0;
    static uint8_t lastbuttons = 0xFF;
    static uint32_t timer = 0;
    static uint8_t timeractive = 0;

    Event_t event = (Event_t){EVENT_NONE, 0};
10042702:	1d3b      	adds	r3, r7, #4
10042704:	2200      	movs	r2, #0
10042706:	701a      	strb	r2, [r3, #0]
10042708:	1d3b      	adds	r3, r7, #4
1004270a:	2200      	movs	r2, #0
1004270c:	805a      	strh	r2, [r3, #2]

    uint8_t currbuttons = GPIO_ReadButtons();
1004270e:	250f      	movs	r5, #15
10042710:	197c      	adds	r4, r7, r5
10042712:	f002 fba7 	bl	10044e64 <GPIO_ReadButtons>
10042716:	0003      	movs	r3, r0
10042718:	7023      	strb	r3, [r4, #0]

    if(currbuttons != lastbuttons && (debounce + DEBOUNCETIME < TIMERS_GetMilliSeconds())){
1004271a:	4b34      	ldr	r3, [pc, #208]	@ (100427ec <ButtonsMenuSM_Event_Updater+0xf0>)
1004271c:	781b      	ldrb	r3, [r3, #0]
1004271e:	197a      	adds	r2, r7, r5
10042720:	7812      	ldrb	r2, [r2, #0]
10042722:	429a      	cmp	r2, r3
10042724:	d02f      	beq.n	10042786 <ButtonsMenuSM_Event_Updater+0x8a>
10042726:	4b32      	ldr	r3, [pc, #200]	@ (100427f0 <ButtonsMenuSM_Event_Updater+0xf4>)
10042728:	681b      	ldr	r3, [r3, #0]
1004272a:	3332      	adds	r3, #50	@ 0x32
1004272c:	001c      	movs	r4, r3
1004272e:	f004 f9d3 	bl	10046ad8 <TIMERS_GetMilliSeconds>
10042732:	0003      	movs	r3, r0
10042734:	429c      	cmp	r4, r3
10042736:	d226      	bcs.n	10042786 <ButtonsMenuSM_Event_Updater+0x8a>
    	event.status = EVENT_BUTTONS;
10042738:	1d3b      	adds	r3, r7, #4
1004273a:	2204      	movs	r2, #4
1004273c:	701a      	strb	r2, [r3, #0]
    	event.data = (((uint16_t)currbuttons ^ (uint16_t)lastbuttons) << 8) + (uint16_t)currbuttons;
1004273e:	4b2b      	ldr	r3, [pc, #172]	@ (100427ec <ButtonsMenuSM_Event_Updater+0xf0>)
10042740:	781a      	ldrb	r2, [r3, #0]
10042742:	197b      	adds	r3, r7, r5
10042744:	781b      	ldrb	r3, [r3, #0]
10042746:	4053      	eors	r3, r2
10042748:	b2db      	uxtb	r3, r3
1004274a:	021b      	lsls	r3, r3, #8
1004274c:	b29a      	uxth	r2, r3
1004274e:	197b      	adds	r3, r7, r5
10042750:	781b      	ldrb	r3, [r3, #0]
10042752:	b29b      	uxth	r3, r3
10042754:	18d3      	adds	r3, r2, r3
10042756:	b29a      	uxth	r2, r3
10042758:	1d3b      	adds	r3, r7, #4
1004275a:	805a      	strh	r2, [r3, #2]
    	lastbuttons = currbuttons;
1004275c:	4b23      	ldr	r3, [pc, #140]	@ (100427ec <ButtonsMenuSM_Event_Updater+0xf0>)
1004275e:	197a      	adds	r2, r7, r5
10042760:	7812      	ldrb	r2, [r2, #0]
10042762:	701a      	strb	r2, [r3, #0]
    	debounce = TIMERS_GetMilliSeconds();
10042764:	f004 f9b8 	bl	10046ad8 <TIMERS_GetMilliSeconds>
10042768:	0002      	movs	r2, r0
1004276a:	4b21      	ldr	r3, [pc, #132]	@ (100427f0 <ButtonsMenuSM_Event_Updater+0xf4>)
1004276c:	601a      	str	r2, [r3, #0]
    	timer = TIMERS_GetMilliSeconds();//delay the sleep timer
1004276e:	f004 f9b3 	bl	10046ad8 <TIMERS_GetMilliSeconds>
10042772:	0002      	movs	r2, r0
10042774:	4b1f      	ldr	r3, [pc, #124]	@ (100427f4 <ButtonsMenuSM_Event_Updater+0xf8>)
10042776:	601a      	str	r2, [r3, #0]
    	timeractive = 1;
10042778:	4b1f      	ldr	r3, [pc, #124]	@ (100427f8 <ButtonsMenuSM_Event_Updater+0xfc>)
1004277a:	2201      	movs	r2, #1
1004277c:	701a      	strb	r2, [r3, #0]
    	ButtonsMenuSM_Event_Post(event);
1004277e:	1d3b      	adds	r3, r7, #4
10042780:	6818      	ldr	r0, [r3, #0]
10042782:	f7ff ffa9 	bl	100426d8 <ButtonsMenuSM_Event_Post>
    }
    if(timeractive & (timer+SLEEPTIMER < TIMERS_GetMilliSeconds())){
10042786:	4b1c      	ldr	r3, [pc, #112]	@ (100427f8 <ButtonsMenuSM_Event_Updater+0xfc>)
10042788:	781b      	ldrb	r3, [r3, #0]
1004278a:	001d      	movs	r5, r3
1004278c:	4b19      	ldr	r3, [pc, #100]	@ (100427f4 <ButtonsMenuSM_Event_Updater+0xf8>)
1004278e:	681b      	ldr	r3, [r3, #0]
10042790:	4a1a      	ldr	r2, [pc, #104]	@ (100427fc <ButtonsMenuSM_Event_Updater+0x100>)
10042792:	189c      	adds	r4, r3, r2
10042794:	f004 f9a0 	bl	10046ad8 <TIMERS_GetMilliSeconds>
10042798:	0003      	movs	r3, r0
1004279a:	429c      	cmp	r4, r3
1004279c:	419b      	sbcs	r3, r3
1004279e:	425b      	negs	r3, r3
100427a0:	b2db      	uxtb	r3, r3
100427a2:	402b      	ands	r3, r5
100427a4:	d00c      	beq.n	100427c0 <ButtonsMenuSM_Event_Updater+0xc4>
    	event.status = EVENT_TIMEOUT;
100427a6:	1d3b      	adds	r3, r7, #4
100427a8:	2209      	movs	r2, #9
100427aa:	701a      	strb	r2, [r3, #0]
    	event.data = 0;
100427ac:	1d3b      	adds	r3, r7, #4
100427ae:	2200      	movs	r2, #0
100427b0:	805a      	strh	r2, [r3, #2]
    	timeractive = 0;// disable sleep timer until next button press
100427b2:	4b11      	ldr	r3, [pc, #68]	@ (100427f8 <ButtonsMenuSM_Event_Updater+0xfc>)
100427b4:	2200      	movs	r2, #0
100427b6:	701a      	strb	r2, [r3, #0]
    	ButtonsMenuSM_Event_Post(event);
100427b8:	1d3b      	adds	r3, r7, #4
100427ba:	6818      	ldr	r0, [r3, #0]
100427bc:	f7ff ff8c 	bl	100426d8 <ButtonsMenuSM_Event_Post>

    }
    return event;
100427c0:	2108      	movs	r1, #8
100427c2:	187b      	adds	r3, r7, r1
100427c4:	1d3a      	adds	r2, r7, #4
100427c6:	6812      	ldr	r2, [r2, #0]
100427c8:	601a      	str	r2, [r3, #0]
100427ca:	187a      	adds	r2, r7, r1
100427cc:	2300      	movs	r3, #0
100427ce:	8811      	ldrh	r1, [r2, #0]
100427d0:	0409      	lsls	r1, r1, #16
100427d2:	0c09      	lsrs	r1, r1, #16
100427d4:	0c1b      	lsrs	r3, r3, #16
100427d6:	041b      	lsls	r3, r3, #16
100427d8:	430b      	orrs	r3, r1
100427da:	8852      	ldrh	r2, [r2, #2]
100427dc:	0412      	lsls	r2, r2, #16
100427de:	041b      	lsls	r3, r3, #16
100427e0:	0c1b      	lsrs	r3, r3, #16
100427e2:	4313      	orrs	r3, r2
}
100427e4:	0018      	movs	r0, r3
100427e6:	46bd      	mov	sp, r7
100427e8:	b004      	add	sp, #16
100427ea:	bdb0      	pop	{r4, r5, r7, pc}
100427ec:	20002afc 	.word	0x20002afc
100427f0:	200003a8 	.word	0x200003a8
100427f4:	200003ac 	.word	0x200003ac
100427f8:	200003b0 	.word	0x200003b0
100427fc:	00007530 	.word	0x00007530

10042800 <ButtonsMenuSM_Event_Handler>:
 * @Function: ButtonsMenuSM_Event_Handler
 * @Brief:
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t ButtonsMenuSM_Event_Handler(Event_t event){
10042800:	b590      	push	{r4, r7, lr}
10042802:	b08d      	sub	sp, #52	@ 0x34
10042804:	af02      	add	r7, sp, #8
10042806:	1d3b      	adds	r3, r7, #4
10042808:	6018      	str	r0, [r3, #0]
	uint8_t transition = 0;
1004280a:	2327      	movs	r3, #39	@ 0x27
1004280c:	18fb      	adds	r3, r7, r3
1004280e:	2200      	movs	r2, #0
10042810:	701a      	strb	r2, [r3, #0]
	ButtonsMenuStates_t nextstate = BMState;
10042812:	2326      	movs	r3, #38	@ 0x26
10042814:	18fb      	adds	r3, r7, r3
10042816:	4ac4      	ldr	r2, [pc, #784]	@ (10042b28 <ButtonsMenuSM_Event_Handler+0x328>)
10042818:	7812      	ldrb	r2, [r2, #0]
1004281a:	701a      	strb	r2, [r3, #0]
	if(event.status == EVENT_TIMEOUT){
1004281c:	1d3b      	adds	r3, r7, #4
1004281e:	781b      	ldrb	r3, [r3, #0]
10042820:	b25b      	sxtb	r3, r3
10042822:	2b09      	cmp	r3, #9
10042824:	d104      	bne.n	10042830 <ButtonsMenuSM_Event_Handler+0x30>
		displayoff = 1;
10042826:	4bc1      	ldr	r3, [pc, #772]	@ (10042b2c <ButtonsMenuSM_Event_Handler+0x32c>)
10042828:	2201      	movs	r2, #1
1004282a:	701a      	strb	r2, [r3, #0]
		OledOff();
1004282c:	f003 fd8b 	bl	10046346 <OledOff>
	}
	if(displayoff){
10042830:	4bbe      	ldr	r3, [pc, #760]	@ (10042b2c <ButtonsMenuSM_Event_Handler+0x32c>)
10042832:	781b      	ldrb	r3, [r3, #0]
10042834:	2b00      	cmp	r3, #0
10042836:	d015      	beq.n	10042864 <ButtonsMenuSM_Event_Handler+0x64>
		if(event.status == EVENT_BUTTONS){
10042838:	1d3b      	adds	r3, r7, #4
1004283a:	781b      	ldrb	r3, [r3, #0]
1004283c:	b25b      	sxtb	r3, r3
1004283e:	2b04      	cmp	r3, #4
10042840:	d001      	beq.n	10042846 <ButtonsMenuSM_Event_Handler+0x46>
10042842:	f001 f998 	bl	10043b76 <ButtonsMenuSM_Event_Handler+0x1376>
			displayoff = 0;
10042846:	4bb9      	ldr	r3, [pc, #740]	@ (10042b2c <ButtonsMenuSM_Event_Handler+0x32c>)
10042848:	2200      	movs	r2, #0
1004284a:	701a      	strb	r2, [r3, #0]
			nextstate = main;
1004284c:	2326      	movs	r3, #38	@ 0x26
1004284e:	18fb      	adds	r3, r7, r3
10042850:	2200      	movs	r2, #0
10042852:	701a      	strb	r2, [r3, #0]
			transition = 1;
10042854:	2327      	movs	r3, #39	@ 0x27
10042856:	18fb      	adds	r3, r7, r3
10042858:	2201      	movs	r2, #1
1004285a:	701a      	strb	r2, [r3, #0]
			OledOn();
1004285c:	f003 fd6c 	bl	10046338 <OledOn>
10042860:	f001 f989 	bl	10043b76 <ButtonsMenuSM_Event_Handler+0x1376>
		}
	} else {

		switch (BMState){
10042864:	4bb0      	ldr	r3, [pc, #704]	@ (10042b28 <ButtonsMenuSM_Event_Handler+0x328>)
10042866:	781b      	ldrb	r3, [r3, #0]
10042868:	2b05      	cmp	r3, #5
1004286a:	d901      	bls.n	10042870 <ButtonsMenuSM_Event_Handler+0x70>
1004286c:	f001 f976 	bl	10043b5c <ButtonsMenuSM_Event_Handler+0x135c>
10042870:	009a      	lsls	r2, r3, #2
10042872:	4baf      	ldr	r3, [pc, #700]	@ (10042b30 <ButtonsMenuSM_Event_Handler+0x330>)
10042874:	18d3      	adds	r3, r2, r3
10042876:	681b      	ldr	r3, [r3, #0]
10042878:	469f      	mov	pc, r3
		case main:
			if(event.status == EVENT_ENTRY){
1004287a:	1d3b      	adds	r3, r7, #4
1004287c:	781b      	ldrb	r3, [r3, #0]
1004287e:	b25b      	sxtb	r3, r3
10042880:	2b02      	cmp	r3, #2
10042882:	d101      	bne.n	10042888 <ButtonsMenuSM_Event_Handler+0x88>
				DrawMain();
10042884:	f7ff fc78 	bl	10042178 <DrawMain>
			}
			if(event.status == EVENT_BUTTONS){
10042888:	1d3b      	adds	r3, r7, #4
1004288a:	781b      	ldrb	r3, [r3, #0]
1004288c:	b25b      	sxtb	r3, r3
1004288e:	2b04      	cmp	r3, #4
10042890:	d001      	beq.n	10042896 <ButtonsMenuSM_Event_Handler+0x96>
10042892:	f001 f965 	bl	10043b60 <ButtonsMenuSM_Event_Handler+0x1360>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10042896:	1d3b      	adds	r3, r7, #4
10042898:	885b      	ldrh	r3, [r3, #2]
1004289a:	001a      	movs	r2, r3
1004289c:	2380      	movs	r3, #128	@ 0x80
1004289e:	005b      	lsls	r3, r3, #1
100428a0:	4013      	ands	r3, r2
100428a2:	d014      	beq.n	100428ce <ButtonsMenuSM_Event_Handler+0xce>
100428a4:	1d3b      	adds	r3, r7, #4
100428a6:	885b      	ldrh	r3, [r3, #2]
100428a8:	001a      	movs	r2, r3
100428aa:	2301      	movs	r3, #1
100428ac:	4013      	ands	r3, r2
100428ae:	d10e      	bne.n	100428ce <ButtonsMenuSM_Event_Handler+0xce>
					//discountprintf("moving to folder control");
					nextstate = folderControl;
100428b0:	2326      	movs	r3, #38	@ 0x26
100428b2:	18fb      	adds	r3, r7, r3
100428b4:	2201      	movs	r2, #1
100428b6:	701a      	strb	r2, [r3, #0]
					transition = 1;
100428b8:	2327      	movs	r3, #39	@ 0x27
100428ba:	18fb      	adds	r3, r7, r3
100428bc:	2201      	movs	r2, #1
100428be:	701a      	strb	r2, [r3, #0]
					folderselect = 0;
100428c0:	4b9c      	ldr	r3, [pc, #624]	@ (10042b34 <ButtonsMenuSM_Event_Handler+0x334>)
100428c2:	2200      	movs	r2, #0
100428c4:	701a      	strb	r2, [r3, #0]
					trackselect = 0;
100428c6:	4b9c      	ldr	r3, [pc, #624]	@ (10042b38 <ButtonsMenuSM_Event_Handler+0x338>)
100428c8:	2200      	movs	r2, #0
100428ca:	701a      	strb	r2, [r3, #0]
100428cc:	e0a0      	b.n	10042a10 <ButtonsMenuSM_Event_Handler+0x210>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
100428ce:	1d3b      	adds	r3, r7, #4
100428d0:	885b      	ldrh	r3, [r3, #2]
100428d2:	001a      	movs	r2, r3
100428d4:	2380      	movs	r3, #128	@ 0x80
100428d6:	009b      	lsls	r3, r3, #2
100428d8:	4013      	ands	r3, r2
100428da:	d020      	beq.n	1004291e <ButtonsMenuSM_Event_Handler+0x11e>
100428dc:	1d3b      	adds	r3, r7, #4
100428de:	885b      	ldrh	r3, [r3, #2]
100428e0:	001a      	movs	r2, r3
100428e2:	2302      	movs	r3, #2
100428e4:	4013      	ands	r3, r2
100428e6:	d11a      	bne.n	1004291e <ButtonsMenuSM_Event_Handler+0x11e>
					//discountprintf("moving to schedule day");
					nextstate = scheduleTime;
100428e8:	2326      	movs	r3, #38	@ 0x26
100428ea:	18fb      	adds	r3, r7, r3
100428ec:	2202      	movs	r2, #2
100428ee:	701a      	strb	r2, [r3, #0]
					transition = 1;
100428f0:	2327      	movs	r3, #39	@ 0x27
100428f2:	18fb      	adds	r3, r7, r3
100428f4:	2201      	movs	r2, #1
100428f6:	701a      	strb	r2, [r3, #0]
					monthselect = 0;
100428f8:	4b90      	ldr	r3, [pc, #576]	@ (10042b3c <ButtonsMenuSM_Event_Handler+0x33c>)
100428fa:	2200      	movs	r2, #0
100428fc:	701a      	strb	r2, [r3, #0]
					dayselect = 0;
100428fe:	4b90      	ldr	r3, [pc, #576]	@ (10042b40 <ButtonsMenuSM_Event_Handler+0x340>)
10042900:	2200      	movs	r2, #0
10042902:	701a      	strb	r2, [r3, #0]
					Stimeselect = 0;
10042904:	4b8f      	ldr	r3, [pc, #572]	@ (10042b44 <ButtonsMenuSM_Event_Handler+0x344>)
10042906:	2200      	movs	r2, #0
10042908:	701a      	strb	r2, [r3, #0]
					Etimeselect = 0;
1004290a:	4b8f      	ldr	r3, [pc, #572]	@ (10042b48 <ButtonsMenuSM_Event_Handler+0x348>)
1004290c:	2200      	movs	r2, #0
1004290e:	701a      	strb	r2, [r3, #0]
					folderselect = 0;
10042910:	4b88      	ldr	r3, [pc, #544]	@ (10042b34 <ButtonsMenuSM_Event_Handler+0x334>)
10042912:	2200      	movs	r2, #0
10042914:	701a      	strb	r2, [r3, #0]
					trackselect = 0;
10042916:	4b88      	ldr	r3, [pc, #544]	@ (10042b38 <ButtonsMenuSM_Event_Handler+0x338>)
10042918:	2200      	movs	r2, #0
1004291a:	701a      	strb	r2, [r3, #0]
1004291c:	e078      	b.n	10042a10 <ButtonsMenuSM_Event_Handler+0x210>

				}else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
1004291e:	1d3b      	adds	r3, r7, #4
10042920:	885b      	ldrh	r3, [r3, #2]
10042922:	001a      	movs	r2, r3
10042924:	2380      	movs	r3, #128	@ 0x80
10042926:	00db      	lsls	r3, r3, #3
10042928:	4013      	ands	r3, r2
1004292a:	d00e      	beq.n	1004294a <ButtonsMenuSM_Event_Handler+0x14a>
1004292c:	1d3b      	adds	r3, r7, #4
1004292e:	885b      	ldrh	r3, [r3, #2]
10042930:	001a      	movs	r2, r3
10042932:	2304      	movs	r3, #4
10042934:	4013      	ands	r3, r2
10042936:	d108      	bne.n	1004294a <ButtonsMenuSM_Event_Handler+0x14a>
					//discountprintf("incrementing volume");
					nextstate = setTime;
10042938:	2326      	movs	r3, #38	@ 0x26
1004293a:	18fb      	adds	r3, r7, r3
1004293c:	2204      	movs	r2, #4
1004293e:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042940:	2327      	movs	r3, #39	@ 0x27
10042942:	18fb      	adds	r3, r7, r3
10042944:	2201      	movs	r2, #1
10042946:	701a      	strb	r2, [r3, #0]
10042948:	e062      	b.n	10042a10 <ButtonsMenuSM_Event_Handler+0x210>

				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
1004294a:	1d3b      	adds	r3, r7, #4
1004294c:	885b      	ldrh	r3, [r3, #2]
1004294e:	001a      	movs	r2, r3
10042950:	2380      	movs	r3, #128	@ 0x80
10042952:	011b      	lsls	r3, r3, #4
10042954:	4013      	ands	r3, r2
10042956:	d00e      	beq.n	10042976 <ButtonsMenuSM_Event_Handler+0x176>
10042958:	1d3b      	adds	r3, r7, #4
1004295a:	885b      	ldrh	r3, [r3, #2]
1004295c:	001a      	movs	r2, r3
1004295e:	2308      	movs	r3, #8
10042960:	4013      	ands	r3, r2
10042962:	d108      	bne.n	10042976 <ButtonsMenuSM_Event_Handler+0x176>
					//discountprintf("moving to options");
					nextstate = options;
10042964:	2326      	movs	r3, #38	@ 0x26
10042966:	18fb      	adds	r3, r7, r3
10042968:	2205      	movs	r2, #5
1004296a:	701a      	strb	r2, [r3, #0]
					transition = 1;
1004296c:	2327      	movs	r3, #39	@ 0x27
1004296e:	18fb      	adds	r3, r7, r3
10042970:	2201      	movs	r2, #1
10042972:	701a      	strb	r2, [r3, #0]
10042974:	e04c      	b.n	10042a10 <ButtonsMenuSM_Event_Handler+0x210>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10042976:	1d3b      	adds	r3, r7, #4
10042978:	885b      	ldrh	r3, [r3, #2]
1004297a:	001a      	movs	r2, r3
1004297c:	2380      	movs	r3, #128	@ 0x80
1004297e:	015b      	lsls	r3, r3, #5
10042980:	4013      	ands	r3, r2
10042982:	d01a      	beq.n	100429ba <ButtonsMenuSM_Event_Handler+0x1ba>
10042984:	1d3b      	adds	r3, r7, #4
10042986:	885b      	ldrh	r3, [r3, #2]
10042988:	001a      	movs	r2, r3
1004298a:	2310      	movs	r3, #16
1004298c:	4013      	ands	r3, r2
1004298e:	d114      	bne.n	100429ba <ButtonsMenuSM_Event_Handler+0x1ba>
					//discountprintf("decrementing volume");
					uint8_t vol = FLASH_GetVolume()-5;
10042990:	f001 ffee 	bl	10044970 <FLASH_GetVolume>
10042994:	0003      	movs	r3, r0
10042996:	001a      	movs	r2, r3
10042998:	2421      	movs	r4, #33	@ 0x21
1004299a:	193b      	adds	r3, r7, r4
1004299c:	3a05      	subs	r2, #5
1004299e:	701a      	strb	r2, [r3, #0]
					if(vol >= 0){
						FLASH_SetDCVol(vol, FLASH_GetDutyCycle());
100429a0:	f001 fffc 	bl	1004499c <FLASH_GetDutyCycle>
100429a4:	0003      	movs	r3, r0
100429a6:	001a      	movs	r2, r3
100429a8:	193b      	adds	r3, r7, r4
100429aa:	781b      	ldrb	r3, [r3, #0]
100429ac:	0011      	movs	r1, r2
100429ae:	0018      	movs	r0, r3
100429b0:	f001 ff9c 	bl	100448ec <FLASH_SetDCVol>
					}
					DrawMain();
100429b4:	f7ff fbe0 	bl	10042178 <DrawMain>
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
100429b8:	e02a      	b.n	10042a10 <ButtonsMenuSM_Event_Handler+0x210>

				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
100429ba:	1d3b      	adds	r3, r7, #4
100429bc:	885b      	ldrh	r3, [r3, #2]
100429be:	001a      	movs	r2, r3
100429c0:	2380      	movs	r3, #128	@ 0x80
100429c2:	019b      	lsls	r3, r3, #6
100429c4:	4013      	ands	r3, r2
100429c6:	d101      	bne.n	100429cc <ButtonsMenuSM_Event_Handler+0x1cc>
100429c8:	f001 f8ca 	bl	10043b60 <ButtonsMenuSM_Event_Handler+0x1360>
100429cc:	1d3b      	adds	r3, r7, #4
100429ce:	885b      	ldrh	r3, [r3, #2]
100429d0:	001a      	movs	r2, r3
100429d2:	2320      	movs	r3, #32
100429d4:	4013      	ands	r3, r2
100429d6:	d001      	beq.n	100429dc <ButtonsMenuSM_Event_Handler+0x1dc>
100429d8:	f001 f8c2 	bl	10043b60 <ButtonsMenuSM_Event_Handler+0x1360>
					//discountprintf("moving to set Time");
					uint8_t vol = FLASH_GetVolume()+5;
100429dc:	f001 ffc8 	bl	10044970 <FLASH_GetVolume>
100429e0:	0003      	movs	r3, r0
100429e2:	001a      	movs	r2, r3
100429e4:	2420      	movs	r4, #32
100429e6:	193b      	adds	r3, r7, r4
100429e8:	3205      	adds	r2, #5
100429ea:	701a      	strb	r2, [r3, #0]
					if(vol <= 100){
100429ec:	193b      	adds	r3, r7, r4
100429ee:	781b      	ldrb	r3, [r3, #0]
100429f0:	2b64      	cmp	r3, #100	@ 0x64
100429f2:	d809      	bhi.n	10042a08 <ButtonsMenuSM_Event_Handler+0x208>
						FLASH_SetDCVol(vol, FLASH_GetDutyCycle());
100429f4:	f001 ffd2 	bl	1004499c <FLASH_GetDutyCycle>
100429f8:	0003      	movs	r3, r0
100429fa:	001a      	movs	r2, r3
100429fc:	193b      	adds	r3, r7, r4
100429fe:	781b      	ldrb	r3, [r3, #0]
10042a00:	0011      	movs	r1, r2
10042a02:	0018      	movs	r0, r3
10042a04:	f001 ff72 	bl	100448ec <FLASH_SetDCVol>
					}
					DrawMain();
10042a08:	f7ff fbb6 	bl	10042178 <DrawMain>

				}

			}
			break;
10042a0c:	f001 f8a8 	bl	10043b60 <ButtonsMenuSM_Event_Handler+0x1360>
10042a10:	f001 f8a6 	bl	10043b60 <ButtonsMenuSM_Event_Handler+0x1360>
		case folderControl:
			if(event.status == EVENT_ENTRY){
10042a14:	1d3b      	adds	r3, r7, #4
10042a16:	781b      	ldrb	r3, [r3, #0]
10042a18:	b25b      	sxtb	r3, r3
10042a1a:	2b02      	cmp	r3, #2
10042a1c:	d10b      	bne.n	10042a36 <ButtonsMenuSM_Event_Handler+0x236>
				cursorpos = 0;
10042a1e:	4b4b      	ldr	r3, [pc, #300]	@ (10042b4c <ButtonsMenuSM_Event_Handler+0x34c>)
10042a20:	2200      	movs	r2, #0
10042a22:	701a      	strb	r2, [r3, #0]
				DrawFolder(cursorpos, folderselect, trackselect);
10042a24:	4b49      	ldr	r3, [pc, #292]	@ (10042b4c <ButtonsMenuSM_Event_Handler+0x34c>)
10042a26:	7818      	ldrb	r0, [r3, #0]
10042a28:	4b42      	ldr	r3, [pc, #264]	@ (10042b34 <ButtonsMenuSM_Event_Handler+0x334>)
10042a2a:	7819      	ldrb	r1, [r3, #0]
10042a2c:	4b42      	ldr	r3, [pc, #264]	@ (10042b38 <ButtonsMenuSM_Event_Handler+0x338>)
10042a2e:	781b      	ldrb	r3, [r3, #0]
10042a30:	001a      	movs	r2, r3
10042a32:	f7ff fbd1 	bl	100421d8 <DrawFolder>
			}
			if(event.status == EVENT_BUTTONS){
10042a36:	1d3b      	adds	r3, r7, #4
10042a38:	781b      	ldrb	r3, [r3, #0]
10042a3a:	b25b      	sxtb	r3, r3
10042a3c:	2b04      	cmp	r3, #4
10042a3e:	d001      	beq.n	10042a44 <ButtonsMenuSM_Event_Handler+0x244>
10042a40:	f001 f890 	bl	10043b64 <ButtonsMenuSM_Event_Handler+0x1364>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10042a44:	1d3b      	adds	r3, r7, #4
10042a46:	885b      	ldrh	r3, [r3, #2]
10042a48:	001a      	movs	r2, r3
10042a4a:	2380      	movs	r3, #128	@ 0x80
10042a4c:	005b      	lsls	r3, r3, #1
10042a4e:	4013      	ands	r3, r2
10042a50:	d00e      	beq.n	10042a70 <ButtonsMenuSM_Event_Handler+0x270>
10042a52:	1d3b      	adds	r3, r7, #4
10042a54:	885b      	ldrh	r3, [r3, #2]
10042a56:	001a      	movs	r2, r3
10042a58:	2301      	movs	r3, #1
10042a5a:	4013      	ands	r3, r2
10042a5c:	d108      	bne.n	10042a70 <ButtonsMenuSM_Event_Handler+0x270>
					//discountprintf("moving to main, back");
					nextstate = main;
10042a5e:	2326      	movs	r3, #38	@ 0x26
10042a60:	18fb      	adds	r3, r7, r3
10042a62:	2200      	movs	r2, #0
10042a64:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042a66:	2327      	movs	r3, #39	@ 0x27
10042a68:	18fb      	adds	r3, r7, r3
10042a6a:	2201      	movs	r2, #1
10042a6c:	701a      	strb	r2, [r3, #0]
10042a6e:	e0e9      	b.n	10042c44 <ButtonsMenuSM_Event_Handler+0x444>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10042a70:	1d3b      	adds	r3, r7, #4
10042a72:	885b      	ldrh	r3, [r3, #2]
10042a74:	001a      	movs	r2, r3
10042a76:	2380      	movs	r3, #128	@ 0x80
10042a78:	009b      	lsls	r3, r3, #2
10042a7a:	4013      	ands	r3, r2
10042a7c:	d020      	beq.n	10042ac0 <ButtonsMenuSM_Event_Handler+0x2c0>
10042a7e:	1d3b      	adds	r3, r7, #4
10042a80:	885b      	ldrh	r3, [r3, #2]
10042a82:	001a      	movs	r2, r3
10042a84:	2302      	movs	r3, #2
10042a86:	4013      	ands	r3, r2
10042a88:	d11a      	bne.n	10042ac0 <ButtonsMenuSM_Event_Handler+0x2c0>
					MP3_Event_Post(((Event_t){EVENT_PLAY, ((folderselect)<<8) + (trackselect)}));
10042a8a:	211c      	movs	r1, #28
10042a8c:	187b      	adds	r3, r7, r1
10042a8e:	220b      	movs	r2, #11
10042a90:	701a      	strb	r2, [r3, #0]
10042a92:	4b28      	ldr	r3, [pc, #160]	@ (10042b34 <ButtonsMenuSM_Event_Handler+0x334>)
10042a94:	781b      	ldrb	r3, [r3, #0]
10042a96:	021b      	lsls	r3, r3, #8
10042a98:	b29b      	uxth	r3, r3
10042a9a:	4a27      	ldr	r2, [pc, #156]	@ (10042b38 <ButtonsMenuSM_Event_Handler+0x338>)
10042a9c:	7812      	ldrb	r2, [r2, #0]
10042a9e:	189b      	adds	r3, r3, r2
10042aa0:	b29a      	uxth	r2, r3
10042aa2:	187b      	adds	r3, r7, r1
10042aa4:	805a      	strh	r2, [r3, #2]
10042aa6:	187b      	adds	r3, r7, r1
10042aa8:	6818      	ldr	r0, [r3, #0]
10042aaa:	f002 ff41 	bl	10045930 <MP3_Event_Post>
					//discountprintf("moving to main, select");
					nextstate = main;
10042aae:	2326      	movs	r3, #38	@ 0x26
10042ab0:	18fb      	adds	r3, r7, r3
10042ab2:	2200      	movs	r2, #0
10042ab4:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042ab6:	2327      	movs	r3, #39	@ 0x27
10042ab8:	18fb      	adds	r3, r7, r3
10042aba:	2201      	movs	r2, #1
10042abc:	701a      	strb	r2, [r3, #0]
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10042abe:	e0c1      	b.n	10042c44 <ButtonsMenuSM_Event_Handler+0x444>

				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
10042ac0:	1d3b      	adds	r3, r7, #4
10042ac2:	885b      	ldrh	r3, [r3, #2]
10042ac4:	001a      	movs	r2, r3
10042ac6:	2380      	movs	r3, #128	@ 0x80
10042ac8:	00db      	lsls	r3, r3, #3
10042aca:	4013      	ands	r3, r2
10042acc:	d040      	beq.n	10042b50 <ButtonsMenuSM_Event_Handler+0x350>
10042ace:	1d3b      	adds	r3, r7, #4
10042ad0:	885b      	ldrh	r3, [r3, #2]
10042ad2:	001a      	movs	r2, r3
10042ad4:	2304      	movs	r3, #4
10042ad6:	4013      	ands	r3, r2
10042ad8:	d13a      	bne.n	10042b50 <ButtonsMenuSM_Event_Handler+0x350>
					if(!cursorpos){
10042ada:	4b1c      	ldr	r3, [pc, #112]	@ (10042b4c <ButtonsMenuSM_Event_Handler+0x34c>)
10042adc:	781b      	ldrb	r3, [r3, #0]
10042ade:	2b00      	cmp	r3, #0
10042ae0:	d10d      	bne.n	10042afe <ButtonsMenuSM_Event_Handler+0x2fe>
						folderselect--;
10042ae2:	4b14      	ldr	r3, [pc, #80]	@ (10042b34 <ButtonsMenuSM_Event_Handler+0x334>)
10042ae4:	781b      	ldrb	r3, [r3, #0]
10042ae6:	3b01      	subs	r3, #1
10042ae8:	b2da      	uxtb	r2, r3
10042aea:	4b12      	ldr	r3, [pc, #72]	@ (10042b34 <ButtonsMenuSM_Event_Handler+0x334>)
10042aec:	701a      	strb	r2, [r3, #0]
						if(folderselect==255){
10042aee:	4b11      	ldr	r3, [pc, #68]	@ (10042b34 <ButtonsMenuSM_Event_Handler+0x334>)
10042af0:	781b      	ldrb	r3, [r3, #0]
10042af2:	2bff      	cmp	r3, #255	@ 0xff
10042af4:	d10d      	bne.n	10042b12 <ButtonsMenuSM_Event_Handler+0x312>
							folderselect = 100;
10042af6:	4b0f      	ldr	r3, [pc, #60]	@ (10042b34 <ButtonsMenuSM_Event_Handler+0x334>)
10042af8:	2264      	movs	r2, #100	@ 0x64
10042afa:	701a      	strb	r2, [r3, #0]
10042afc:	e009      	b.n	10042b12 <ButtonsMenuSM_Event_Handler+0x312>
						}
					} else {
						trackselect--;
10042afe:	4b0e      	ldr	r3, [pc, #56]	@ (10042b38 <ButtonsMenuSM_Event_Handler+0x338>)
10042b00:	781b      	ldrb	r3, [r3, #0]
10042b02:	3b01      	subs	r3, #1
10042b04:	b2da      	uxtb	r2, r3
10042b06:	4b0c      	ldr	r3, [pc, #48]	@ (10042b38 <ButtonsMenuSM_Event_Handler+0x338>)
10042b08:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
10042b0a:	4b0b      	ldr	r3, [pc, #44]	@ (10042b38 <ButtonsMenuSM_Event_Handler+0x338>)
10042b0c:	781a      	ldrb	r2, [r3, #0]
10042b0e:	4b0a      	ldr	r3, [pc, #40]	@ (10042b38 <ButtonsMenuSM_Event_Handler+0x338>)
10042b10:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
10042b12:	4b0e      	ldr	r3, [pc, #56]	@ (10042b4c <ButtonsMenuSM_Event_Handler+0x34c>)
10042b14:	7818      	ldrb	r0, [r3, #0]
10042b16:	4b07      	ldr	r3, [pc, #28]	@ (10042b34 <ButtonsMenuSM_Event_Handler+0x334>)
10042b18:	7819      	ldrb	r1, [r3, #0]
10042b1a:	4b07      	ldr	r3, [pc, #28]	@ (10042b38 <ButtonsMenuSM_Event_Handler+0x338>)
10042b1c:	781b      	ldrb	r3, [r3, #0]
10042b1e:	001a      	movs	r2, r3
10042b20:	f7ff fb5a 	bl	100421d8 <DrawFolder>
10042b24:	e08e      	b.n	10042c44 <ButtonsMenuSM_Event_Handler+0x444>
10042b26:	46c0      	nop			@ (mov r8, r8)
10042b28:	2000039c 	.word	0x2000039c
10042b2c:	2000039d 	.word	0x2000039d
10042b30:	10069f58 	.word	0x10069f58
10042b34:	2000039f 	.word	0x2000039f
10042b38:	200003a0 	.word	0x200003a0
10042b3c:	200003a1 	.word	0x200003a1
10042b40:	200003a2 	.word	0x200003a2
10042b44:	200003a3 	.word	0x200003a3
10042b48:	200003a4 	.word	0x200003a4
10042b4c:	2000039e 	.word	0x2000039e

				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
10042b50:	1d3b      	adds	r3, r7, #4
10042b52:	885b      	ldrh	r3, [r3, #2]
10042b54:	001a      	movs	r2, r3
10042b56:	2380      	movs	r3, #128	@ 0x80
10042b58:	011b      	lsls	r3, r3, #4
10042b5a:	4013      	ands	r3, r2
10042b5c:	d02f      	beq.n	10042bbe <ButtonsMenuSM_Event_Handler+0x3be>
10042b5e:	1d3b      	adds	r3, r7, #4
10042b60:	885b      	ldrh	r3, [r3, #2]
10042b62:	001a      	movs	r2, r3
10042b64:	2308      	movs	r3, #8
10042b66:	4013      	ands	r3, r2
10042b68:	d129      	bne.n	10042bbe <ButtonsMenuSM_Event_Handler+0x3be>
					if(!cursorpos){
10042b6a:	4bd1      	ldr	r3, [pc, #836]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042b6c:	781b      	ldrb	r3, [r3, #0]
10042b6e:	2b00      	cmp	r3, #0
10042b70:	d110      	bne.n	10042b94 <ButtonsMenuSM_Event_Handler+0x394>
						folderselect++;
10042b72:	4bd0      	ldr	r3, [pc, #832]	@ (10042eb4 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042b74:	781b      	ldrb	r3, [r3, #0]
10042b76:	3301      	adds	r3, #1
10042b78:	b2da      	uxtb	r2, r3
10042b7a:	4bce      	ldr	r3, [pc, #824]	@ (10042eb4 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042b7c:	701a      	strb	r2, [r3, #0]
						folderselect %= 100;
10042b7e:	4bcd      	ldr	r3, [pc, #820]	@ (10042eb4 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042b80:	781b      	ldrb	r3, [r3, #0]
10042b82:	2164      	movs	r1, #100	@ 0x64
10042b84:	0018      	movs	r0, r3
10042b86:	f7fd fbe1 	bl	1004034c <__aeabi_uidivmod>
10042b8a:	000b      	movs	r3, r1
10042b8c:	b2da      	uxtb	r2, r3
10042b8e:	4bc9      	ldr	r3, [pc, #804]	@ (10042eb4 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042b90:	701a      	strb	r2, [r3, #0]
10042b92:	e009      	b.n	10042ba8 <ButtonsMenuSM_Event_Handler+0x3a8>
					} else {
						trackselect++;
10042b94:	4bc8      	ldr	r3, [pc, #800]	@ (10042eb8 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042b96:	781b      	ldrb	r3, [r3, #0]
10042b98:	3301      	adds	r3, #1
10042b9a:	b2da      	uxtb	r2, r3
10042b9c:	4bc6      	ldr	r3, [pc, #792]	@ (10042eb8 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042b9e:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
10042ba0:	4bc5      	ldr	r3, [pc, #788]	@ (10042eb8 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042ba2:	781a      	ldrb	r2, [r3, #0]
10042ba4:	4bc4      	ldr	r3, [pc, #784]	@ (10042eb8 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042ba6:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
10042ba8:	4bc1      	ldr	r3, [pc, #772]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042baa:	7818      	ldrb	r0, [r3, #0]
10042bac:	4bc1      	ldr	r3, [pc, #772]	@ (10042eb4 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042bae:	7819      	ldrb	r1, [r3, #0]
10042bb0:	4bc1      	ldr	r3, [pc, #772]	@ (10042eb8 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042bb2:	781b      	ldrb	r3, [r3, #0]
10042bb4:	001a      	movs	r2, r3
10042bb6:	f7ff fb0f 	bl	100421d8 <DrawFolder>
					break;
10042bba:	f000 ffdc 	bl	10043b76 <ButtonsMenuSM_Event_Handler+0x1376>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10042bbe:	1d3b      	adds	r3, r7, #4
10042bc0:	885b      	ldrh	r3, [r3, #2]
10042bc2:	001a      	movs	r2, r3
10042bc4:	2380      	movs	r3, #128	@ 0x80
10042bc6:	015b      	lsls	r3, r3, #5
10042bc8:	4013      	ands	r3, r2
10042bca:	d017      	beq.n	10042bfc <ButtonsMenuSM_Event_Handler+0x3fc>
10042bcc:	1d3b      	adds	r3, r7, #4
10042bce:	885b      	ldrh	r3, [r3, #2]
10042bd0:	001a      	movs	r2, r3
10042bd2:	2310      	movs	r3, #16
10042bd4:	4013      	ands	r3, r2
10042bd6:	d111      	bne.n	10042bfc <ButtonsMenuSM_Event_Handler+0x3fc>
					cursorpos = !cursorpos;
10042bd8:	4bb5      	ldr	r3, [pc, #724]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042bda:	781b      	ldrb	r3, [r3, #0]
10042bdc:	425a      	negs	r2, r3
10042bde:	4153      	adcs	r3, r2
10042be0:	b2db      	uxtb	r3, r3
10042be2:	001a      	movs	r2, r3
10042be4:	4bb2      	ldr	r3, [pc, #712]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042be6:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
10042be8:	4bb1      	ldr	r3, [pc, #708]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042bea:	7818      	ldrb	r0, [r3, #0]
10042bec:	4bb1      	ldr	r3, [pc, #708]	@ (10042eb4 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042bee:	7819      	ldrb	r1, [r3, #0]
10042bf0:	4bb1      	ldr	r3, [pc, #708]	@ (10042eb8 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042bf2:	781b      	ldrb	r3, [r3, #0]
10042bf4:	001a      	movs	r2, r3
10042bf6:	f7ff faef 	bl	100421d8 <DrawFolder>
10042bfa:	e023      	b.n	10042c44 <ButtonsMenuSM_Event_Handler+0x444>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
10042bfc:	1d3b      	adds	r3, r7, #4
10042bfe:	885b      	ldrh	r3, [r3, #2]
10042c00:	001a      	movs	r2, r3
10042c02:	2380      	movs	r3, #128	@ 0x80
10042c04:	019b      	lsls	r3, r3, #6
10042c06:	4013      	ands	r3, r2
10042c08:	d101      	bne.n	10042c0e <ButtonsMenuSM_Event_Handler+0x40e>
10042c0a:	f000 ffab 	bl	10043b64 <ButtonsMenuSM_Event_Handler+0x1364>
10042c0e:	1d3b      	adds	r3, r7, #4
10042c10:	885b      	ldrh	r3, [r3, #2]
10042c12:	001a      	movs	r2, r3
10042c14:	2320      	movs	r3, #32
10042c16:	4013      	ands	r3, r2
10042c18:	d001      	beq.n	10042c1e <ButtonsMenuSM_Event_Handler+0x41e>
10042c1a:	f000 ffa3 	bl	10043b64 <ButtonsMenuSM_Event_Handler+0x1364>
					cursorpos = !cursorpos;
10042c1e:	4ba4      	ldr	r3, [pc, #656]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042c20:	781b      	ldrb	r3, [r3, #0]
10042c22:	425a      	negs	r2, r3
10042c24:	4153      	adcs	r3, r2
10042c26:	b2db      	uxtb	r3, r3
10042c28:	001a      	movs	r2, r3
10042c2a:	4ba1      	ldr	r3, [pc, #644]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042c2c:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
10042c2e:	4ba0      	ldr	r3, [pc, #640]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042c30:	7818      	ldrb	r0, [r3, #0]
10042c32:	4ba0      	ldr	r3, [pc, #640]	@ (10042eb4 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042c34:	7819      	ldrb	r1, [r3, #0]
10042c36:	4ba0      	ldr	r3, [pc, #640]	@ (10042eb8 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042c38:	781b      	ldrb	r3, [r3, #0]
10042c3a:	001a      	movs	r2, r3
10042c3c:	f7ff facc 	bl	100421d8 <DrawFolder>
				}
			}
			break;
10042c40:	f000 ff90 	bl	10043b64 <ButtonsMenuSM_Event_Handler+0x1364>
10042c44:	f000 ff8e 	bl	10043b64 <ButtonsMenuSM_Event_Handler+0x1364>
		case scheduleTime:
			if(event.status == EVENT_ENTRY){
10042c48:	1d3b      	adds	r3, r7, #4
10042c4a:	781b      	ldrb	r3, [r3, #0]
10042c4c:	b25b      	sxtb	r3, r3
10042c4e:	2b02      	cmp	r3, #2
10042c50:	d112      	bne.n	10042c78 <ButtonsMenuSM_Event_Handler+0x478>
				cursorpos = 0;
10042c52:	4b97      	ldr	r3, [pc, #604]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042c54:	2200      	movs	r2, #0
10042c56:	701a      	strb	r2, [r3, #0]
				DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
10042c58:	4b95      	ldr	r3, [pc, #596]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042c5a:	7818      	ldrb	r0, [r3, #0]
10042c5c:	4b97      	ldr	r3, [pc, #604]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042c5e:	7819      	ldrb	r1, [r3, #0]
10042c60:	4b97      	ldr	r3, [pc, #604]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042c62:	781b      	ldrb	r3, [r3, #0]
10042c64:	3301      	adds	r3, #1
10042c66:	b2da      	uxtb	r2, r3
10042c68:	4b96      	ldr	r3, [pc, #600]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042c6a:	781c      	ldrb	r4, [r3, #0]
10042c6c:	4b96      	ldr	r3, [pc, #600]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042c6e:	781b      	ldrb	r3, [r3, #0]
10042c70:	9300      	str	r3, [sp, #0]
10042c72:	0023      	movs	r3, r4
10042c74:	f7ff fbfc 	bl	10042470 <DrawSchedule>
			}
			if(event.status == EVENT_BUTTONS){
10042c78:	1d3b      	adds	r3, r7, #4
10042c7a:	781b      	ldrb	r3, [r3, #0]
10042c7c:	b25b      	sxtb	r3, r3
10042c7e:	2b04      	cmp	r3, #4
10042c80:	d001      	beq.n	10042c86 <ButtonsMenuSM_Event_Handler+0x486>
10042c82:	f000 ff71 	bl	10043b68 <ButtonsMenuSM_Event_Handler+0x1368>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10042c86:	1d3b      	adds	r3, r7, #4
10042c88:	885b      	ldrh	r3, [r3, #2]
10042c8a:	001a      	movs	r2, r3
10042c8c:	2380      	movs	r3, #128	@ 0x80
10042c8e:	005b      	lsls	r3, r3, #1
10042c90:	4013      	ands	r3, r2
10042c92:	d00e      	beq.n	10042cb2 <ButtonsMenuSM_Event_Handler+0x4b2>
10042c94:	1d3b      	adds	r3, r7, #4
10042c96:	885b      	ldrh	r3, [r3, #2]
10042c98:	001a      	movs	r2, r3
10042c9a:	2301      	movs	r3, #1
10042c9c:	4013      	ands	r3, r2
10042c9e:	d108      	bne.n	10042cb2 <ButtonsMenuSM_Event_Handler+0x4b2>
					nextstate = main;
10042ca0:	2326      	movs	r3, #38	@ 0x26
10042ca2:	18fb      	adds	r3, r7, r3
10042ca4:	2200      	movs	r2, #0
10042ca6:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042ca8:	2327      	movs	r3, #39	@ 0x27
10042caa:	18fb      	adds	r3, r7, r3
10042cac:	2201      	movs	r2, #1
10042cae:	701a      	strb	r2, [r3, #0]
10042cb0:	e1e6      	b.n	10043080 <ButtonsMenuSM_Event_Handler+0x880>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10042cb2:	1d3b      	adds	r3, r7, #4
10042cb4:	885b      	ldrh	r3, [r3, #2]
10042cb6:	001a      	movs	r2, r3
10042cb8:	2380      	movs	r3, #128	@ 0x80
10042cba:	009b      	lsls	r3, r3, #2
10042cbc:	4013      	ands	r3, r2
10042cbe:	d00e      	beq.n	10042cde <ButtonsMenuSM_Event_Handler+0x4de>
10042cc0:	1d3b      	adds	r3, r7, #4
10042cc2:	885b      	ldrh	r3, [r3, #2]
10042cc4:	001a      	movs	r2, r3
10042cc6:	2302      	movs	r3, #2
10042cc8:	4013      	ands	r3, r2
10042cca:	d108      	bne.n	10042cde <ButtonsMenuSM_Event_Handler+0x4de>
					nextstate = scheduleFolder;
10042ccc:	2326      	movs	r3, #38	@ 0x26
10042cce:	18fb      	adds	r3, r7, r3
10042cd0:	2203      	movs	r2, #3
10042cd2:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042cd4:	2327      	movs	r3, #39	@ 0x27
10042cd6:	18fb      	adds	r3, r7, r3
10042cd8:	2201      	movs	r2, #1
10042cda:	701a      	strb	r2, [r3, #0]
10042cdc:	e1d0      	b.n	10043080 <ButtonsMenuSM_Event_Handler+0x880>
				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
10042cde:	1d3b      	adds	r3, r7, #4
10042ce0:	885b      	ldrh	r3, [r3, #2]
10042ce2:	001a      	movs	r2, r3
10042ce4:	2380      	movs	r3, #128	@ 0x80
10042ce6:	00db      	lsls	r3, r3, #3
10042ce8:	4013      	ands	r3, r2
10042cea:	d100      	bne.n	10042cee <ButtonsMenuSM_Event_Handler+0x4ee>
10042cec:	e0a5      	b.n	10042e3a <ButtonsMenuSM_Event_Handler+0x63a>
10042cee:	1d3b      	adds	r3, r7, #4
10042cf0:	885b      	ldrh	r3, [r3, #2]
10042cf2:	001a      	movs	r2, r3
10042cf4:	2304      	movs	r3, #4
10042cf6:	4013      	ands	r3, r2
10042cf8:	d000      	beq.n	10042cfc <ButtonsMenuSM_Event_Handler+0x4fc>
10042cfa:	e09e      	b.n	10042e3a <ButtonsMenuSM_Event_Handler+0x63a>
					switch(cursorpos){
10042cfc:	4b6c      	ldr	r3, [pc, #432]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042cfe:	781b      	ldrb	r3, [r3, #0]
10042d00:	2b05      	cmp	r3, #5
10042d02:	d900      	bls.n	10042d06 <ButtonsMenuSM_Event_Handler+0x506>
10042d04:	e083      	b.n	10042e0e <ButtonsMenuSM_Event_Handler+0x60e>
10042d06:	009a      	lsls	r2, r3, #2
10042d08:	4b70      	ldr	r3, [pc, #448]	@ (10042ecc <ButtonsMenuSM_Event_Handler+0x6cc>)
10042d0a:	18d3      	adds	r3, r2, r3
10042d0c:	681b      	ldr	r3, [r3, #0]
10042d0e:	469f      	mov	pc, r3
					case 0:
						monthselect--;
10042d10:	4b6a      	ldr	r3, [pc, #424]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042d12:	781b      	ldrb	r3, [r3, #0]
10042d14:	3b01      	subs	r3, #1
10042d16:	b2da      	uxtb	r2, r3
10042d18:	4b68      	ldr	r3, [pc, #416]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042d1a:	701a      	strb	r2, [r3, #0]
						if (monthselect == 255){
10042d1c:	4b67      	ldr	r3, [pc, #412]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042d1e:	781b      	ldrb	r3, [r3, #0]
10042d20:	2bff      	cmp	r3, #255	@ 0xff
10042d22:	d000      	beq.n	10042d26 <ButtonsMenuSM_Event_Handler+0x526>
10042d24:	e075      	b.n	10042e12 <ButtonsMenuSM_Event_Handler+0x612>
							monthselect = 12;
10042d26:	4b65      	ldr	r3, [pc, #404]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042d28:	220c      	movs	r2, #12
10042d2a:	701a      	strb	r2, [r3, #0]
						}
						break;
10042d2c:	e071      	b.n	10042e12 <ButtonsMenuSM_Event_Handler+0x612>
					case 1:
						dayselect--;
10042d2e:	4b64      	ldr	r3, [pc, #400]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042d30:	781b      	ldrb	r3, [r3, #0]
10042d32:	3b01      	subs	r3, #1
10042d34:	b2da      	uxtb	r2, r3
10042d36:	4b62      	ldr	r3, [pc, #392]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042d38:	701a      	strb	r2, [r3, #0]
						if (dayselect == 255){
10042d3a:	4b61      	ldr	r3, [pc, #388]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042d3c:	781b      	ldrb	r3, [r3, #0]
10042d3e:	2bff      	cmp	r3, #255	@ 0xff
10042d40:	d169      	bne.n	10042e16 <ButtonsMenuSM_Event_Handler+0x616>
							dayselect = 30;
10042d42:	4b5f      	ldr	r3, [pc, #380]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042d44:	221e      	movs	r2, #30
10042d46:	701a      	strb	r2, [r3, #0]
						}
						break;
10042d48:	e065      	b.n	10042e16 <ButtonsMenuSM_Event_Handler+0x616>
					case 2:
						if((Stimeselect&0b11111000) == 0){
10042d4a:	4b5e      	ldr	r3, [pc, #376]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d4c:	781b      	ldrb	r3, [r3, #0]
10042d4e:	001a      	movs	r2, r3
10042d50:	23f8      	movs	r3, #248	@ 0xf8
10042d52:	4013      	ands	r3, r2
10042d54:	d10d      	bne.n	10042d72 <ButtonsMenuSM_Event_Handler+0x572>
							Stimeselect = 0b10111000 | (Stimeselect&0b11);//23:XX
10042d56:	4b5b      	ldr	r3, [pc, #364]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d58:	781b      	ldrb	r3, [r3, #0]
10042d5a:	b25b      	sxtb	r3, r3
10042d5c:	2203      	movs	r2, #3
10042d5e:	4013      	ands	r3, r2
10042d60:	b25b      	sxtb	r3, r3
10042d62:	2248      	movs	r2, #72	@ 0x48
10042d64:	4252      	negs	r2, r2
10042d66:	4313      	orrs	r3, r2
10042d68:	b25b      	sxtb	r3, r3
10042d6a:	b2da      	uxtb	r2, r3
10042d6c:	4b55      	ldr	r3, [pc, #340]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d6e:	701a      	strb	r2, [r3, #0]
						} else {
							Stimeselect -= 0b00001000;
						}
						break;
10042d70:	e052      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
							Stimeselect -= 0b00001000;
10042d72:	4b54      	ldr	r3, [pc, #336]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d74:	781b      	ldrb	r3, [r3, #0]
10042d76:	3b08      	subs	r3, #8
10042d78:	b2da      	uxtb	r2, r3
10042d7a:	4b52      	ldr	r3, [pc, #328]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d7c:	701a      	strb	r2, [r3, #0]
						break;
10042d7e:	e04b      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
					case 3:
						if(Stimeselect == 0){
10042d80:	4b50      	ldr	r3, [pc, #320]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d82:	781b      	ldrb	r3, [r3, #0]
10042d84:	2b00      	cmp	r3, #0
10042d86:	d103      	bne.n	10042d90 <ButtonsMenuSM_Event_Handler+0x590>
							Stimeselect = 0b10111011;//23:45
10042d88:	4b4e      	ldr	r3, [pc, #312]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d8a:	22bb      	movs	r2, #187	@ 0xbb
10042d8c:	701a      	strb	r2, [r3, #0]
						} else {
							Stimeselect--;
							Stimeselect &= 0b11111011;
						}
						break;
10042d8e:	e043      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
							Stimeselect--;
10042d90:	4b4c      	ldr	r3, [pc, #304]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d92:	781b      	ldrb	r3, [r3, #0]
10042d94:	3b01      	subs	r3, #1
10042d96:	b2da      	uxtb	r2, r3
10042d98:	4b4a      	ldr	r3, [pc, #296]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d9a:	701a      	strb	r2, [r3, #0]
							Stimeselect &= 0b11111011;
10042d9c:	4b49      	ldr	r3, [pc, #292]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d9e:	781b      	ldrb	r3, [r3, #0]
10042da0:	2204      	movs	r2, #4
10042da2:	4393      	bics	r3, r2
10042da4:	b2da      	uxtb	r2, r3
10042da6:	4b47      	ldr	r3, [pc, #284]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042da8:	701a      	strb	r2, [r3, #0]
						break;
10042daa:	e035      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
					case 4:
						if((Etimeselect&0b11111000) == 0){
10042dac:	4b46      	ldr	r3, [pc, #280]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042dae:	781b      	ldrb	r3, [r3, #0]
10042db0:	001a      	movs	r2, r3
10042db2:	23f8      	movs	r3, #248	@ 0xf8
10042db4:	4013      	ands	r3, r2
10042db6:	d10d      	bne.n	10042dd4 <ButtonsMenuSM_Event_Handler+0x5d4>
							Etimeselect = 0b10111000 | (Etimeselect&0b11);//23:XX
10042db8:	4b43      	ldr	r3, [pc, #268]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042dba:	781b      	ldrb	r3, [r3, #0]
10042dbc:	b25b      	sxtb	r3, r3
10042dbe:	2203      	movs	r2, #3
10042dc0:	4013      	ands	r3, r2
10042dc2:	b25b      	sxtb	r3, r3
10042dc4:	2248      	movs	r2, #72	@ 0x48
10042dc6:	4252      	negs	r2, r2
10042dc8:	4313      	orrs	r3, r2
10042dca:	b25b      	sxtb	r3, r3
10042dcc:	b2da      	uxtb	r2, r3
10042dce:	4b3e      	ldr	r3, [pc, #248]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042dd0:	701a      	strb	r2, [r3, #0]
						} else {
							Etimeselect -= 0b00001000;
						}break;
10042dd2:	e021      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
							Etimeselect -= 0b00001000;
10042dd4:	4b3c      	ldr	r3, [pc, #240]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042dd6:	781b      	ldrb	r3, [r3, #0]
10042dd8:	3b08      	subs	r3, #8
10042dda:	b2da      	uxtb	r2, r3
10042ddc:	4b3a      	ldr	r3, [pc, #232]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042dde:	701a      	strb	r2, [r3, #0]
						}break;
10042de0:	e01a      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
					case 5:
						if(Etimeselect == 0){
10042de2:	4b39      	ldr	r3, [pc, #228]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042de4:	781b      	ldrb	r3, [r3, #0]
10042de6:	2b00      	cmp	r3, #0
10042de8:	d103      	bne.n	10042df2 <ButtonsMenuSM_Event_Handler+0x5f2>
							Etimeselect = 0b10111011;//23:45
10042dea:	4b37      	ldr	r3, [pc, #220]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042dec:	22bb      	movs	r2, #187	@ 0xbb
10042dee:	701a      	strb	r2, [r3, #0]
						} else {
							Etimeselect--;
							Etimeselect &= 0b11111011;
						}
						break;
10042df0:	e012      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
							Etimeselect--;
10042df2:	4b35      	ldr	r3, [pc, #212]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042df4:	781b      	ldrb	r3, [r3, #0]
10042df6:	3b01      	subs	r3, #1
10042df8:	b2da      	uxtb	r2, r3
10042dfa:	4b33      	ldr	r3, [pc, #204]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042dfc:	701a      	strb	r2, [r3, #0]
							Etimeselect &= 0b11111011;
10042dfe:	4b32      	ldr	r3, [pc, #200]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042e00:	781b      	ldrb	r3, [r3, #0]
10042e02:	2204      	movs	r2, #4
10042e04:	4393      	bics	r3, r2
10042e06:	b2da      	uxtb	r2, r3
10042e08:	4b2f      	ldr	r3, [pc, #188]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042e0a:	701a      	strb	r2, [r3, #0]
						break;
10042e0c:	e004      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
					default:
						break;
10042e0e:	46c0      	nop			@ (mov r8, r8)
10042e10:	e002      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
						break;
10042e12:	46c0      	nop			@ (mov r8, r8)
10042e14:	e000      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
						break;
10042e16:	46c0      	nop			@ (mov r8, r8)
					}
					DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
10042e18:	4b25      	ldr	r3, [pc, #148]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042e1a:	7818      	ldrb	r0, [r3, #0]
10042e1c:	4b27      	ldr	r3, [pc, #156]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042e1e:	7819      	ldrb	r1, [r3, #0]
10042e20:	4b27      	ldr	r3, [pc, #156]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042e22:	781b      	ldrb	r3, [r3, #0]
10042e24:	3301      	adds	r3, #1
10042e26:	b2da      	uxtb	r2, r3
10042e28:	4b26      	ldr	r3, [pc, #152]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042e2a:	781c      	ldrb	r4, [r3, #0]
10042e2c:	4b26      	ldr	r3, [pc, #152]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042e2e:	781b      	ldrb	r3, [r3, #0]
10042e30:	9300      	str	r3, [sp, #0]
10042e32:	0023      	movs	r3, r4
10042e34:	f7ff fb1c 	bl	10042470 <DrawSchedule>
10042e38:	e122      	b.n	10043080 <ButtonsMenuSM_Event_Handler+0x880>
				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
10042e3a:	1d3b      	adds	r3, r7, #4
10042e3c:	885b      	ldrh	r3, [r3, #2]
10042e3e:	001a      	movs	r2, r3
10042e40:	2380      	movs	r3, #128	@ 0x80
10042e42:	011b      	lsls	r3, r3, #4
10042e44:	4013      	ands	r3, r2
10042e46:	d100      	bne.n	10042e4a <ButtonsMenuSM_Event_Handler+0x64a>
10042e48:	e0bc      	b.n	10042fc4 <ButtonsMenuSM_Event_Handler+0x7c4>
10042e4a:	1d3b      	adds	r3, r7, #4
10042e4c:	885b      	ldrh	r3, [r3, #2]
10042e4e:	001a      	movs	r2, r3
10042e50:	2308      	movs	r3, #8
10042e52:	4013      	ands	r3, r2
10042e54:	d000      	beq.n	10042e58 <ButtonsMenuSM_Event_Handler+0x658>
10042e56:	e0b5      	b.n	10042fc4 <ButtonsMenuSM_Event_Handler+0x7c4>
					switch(cursorpos){
10042e58:	4b15      	ldr	r3, [pc, #84]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042e5a:	781b      	ldrb	r3, [r3, #0]
10042e5c:	2b05      	cmp	r3, #5
10042e5e:	d900      	bls.n	10042e62 <ButtonsMenuSM_Event_Handler+0x662>
10042e60:	e09a      	b.n	10042f98 <ButtonsMenuSM_Event_Handler+0x798>
10042e62:	009a      	lsls	r2, r3, #2
10042e64:	4b1a      	ldr	r3, [pc, #104]	@ (10042ed0 <ButtonsMenuSM_Event_Handler+0x6d0>)
10042e66:	18d3      	adds	r3, r2, r3
10042e68:	681b      	ldr	r3, [r3, #0]
10042e6a:	469f      	mov	pc, r3
					case 0:
						monthselect++;
10042e6c:	4b13      	ldr	r3, [pc, #76]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042e6e:	781b      	ldrb	r3, [r3, #0]
10042e70:	3301      	adds	r3, #1
10042e72:	b2da      	uxtb	r2, r3
10042e74:	4b11      	ldr	r3, [pc, #68]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042e76:	701a      	strb	r2, [r3, #0]
						monthselect %= 13;
10042e78:	4b10      	ldr	r3, [pc, #64]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042e7a:	781b      	ldrb	r3, [r3, #0]
10042e7c:	210d      	movs	r1, #13
10042e7e:	0018      	movs	r0, r3
10042e80:	f7fd fa64 	bl	1004034c <__aeabi_uidivmod>
10042e84:	000b      	movs	r3, r1
10042e86:	b2da      	uxtb	r2, r3
10042e88:	4b0c      	ldr	r3, [pc, #48]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042e8a:	701a      	strb	r2, [r3, #0]
						break;
10042e8c:	e089      	b.n	10042fa2 <ButtonsMenuSM_Event_Handler+0x7a2>
					case 1:
						dayselect++;
10042e8e:	4b0c      	ldr	r3, [pc, #48]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042e90:	781b      	ldrb	r3, [r3, #0]
10042e92:	3301      	adds	r3, #1
10042e94:	b2da      	uxtb	r2, r3
10042e96:	4b0a      	ldr	r3, [pc, #40]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042e98:	701a      	strb	r2, [r3, #0]
						dayselect%=31;
10042e9a:	4b09      	ldr	r3, [pc, #36]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042e9c:	781b      	ldrb	r3, [r3, #0]
10042e9e:	211f      	movs	r1, #31
10042ea0:	0018      	movs	r0, r3
10042ea2:	f7fd fa53 	bl	1004034c <__aeabi_uidivmod>
10042ea6:	000b      	movs	r3, r1
10042ea8:	b2da      	uxtb	r2, r3
10042eaa:	4b05      	ldr	r3, [pc, #20]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042eac:	701a      	strb	r2, [r3, #0]
						break;
10042eae:	e078      	b.n	10042fa2 <ButtonsMenuSM_Event_Handler+0x7a2>
10042eb0:	2000039e 	.word	0x2000039e
10042eb4:	2000039f 	.word	0x2000039f
10042eb8:	200003a0 	.word	0x200003a0
10042ebc:	200003a1 	.word	0x200003a1
10042ec0:	200003a2 	.word	0x200003a2
10042ec4:	200003a3 	.word	0x200003a3
10042ec8:	200003a4 	.word	0x200003a4
10042ecc:	10069f70 	.word	0x10069f70
10042ed0:	10069f88 	.word	0x10069f88
					case 2:
						if((Stimeselect&0b11111000) == 0b10111000){
10042ed4:	4bca      	ldr	r3, [pc, #808]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042ed6:	781b      	ldrb	r3, [r3, #0]
10042ed8:	001a      	movs	r2, r3
10042eda:	23f8      	movs	r3, #248	@ 0xf8
10042edc:	4013      	ands	r3, r2
10042ede:	2bb8      	cmp	r3, #184	@ 0xb8
10042ee0:	d107      	bne.n	10042ef2 <ButtonsMenuSM_Event_Handler+0x6f2>
							Stimeselect &= 0b00000011;
10042ee2:	4bc7      	ldr	r3, [pc, #796]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042ee4:	781b      	ldrb	r3, [r3, #0]
10042ee6:	2203      	movs	r2, #3
10042ee8:	4013      	ands	r3, r2
10042eea:	b2da      	uxtb	r2, r3
10042eec:	4bc4      	ldr	r3, [pc, #784]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042eee:	701a      	strb	r2, [r3, #0]
						} else {
							Stimeselect += 0b00001000;
						}
						break;
10042ef0:	e057      	b.n	10042fa2 <ButtonsMenuSM_Event_Handler+0x7a2>
							Stimeselect += 0b00001000;
10042ef2:	4bc3      	ldr	r3, [pc, #780]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042ef4:	781b      	ldrb	r3, [r3, #0]
10042ef6:	3308      	adds	r3, #8
10042ef8:	b2da      	uxtb	r2, r3
10042efa:	4bc1      	ldr	r3, [pc, #772]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042efc:	701a      	strb	r2, [r3, #0]
						break;
10042efe:	e050      	b.n	10042fa2 <ButtonsMenuSM_Event_Handler+0x7a2>
					case 3:
						if(Stimeselect == 0b10111011){//23:45
10042f00:	4bbf      	ldr	r3, [pc, #764]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042f02:	781b      	ldrb	r3, [r3, #0]
10042f04:	2bbb      	cmp	r3, #187	@ 0xbb
10042f06:	d103      	bne.n	10042f10 <ButtonsMenuSM_Event_Handler+0x710>
							Stimeselect = 0;//0:00
10042f08:	4bbd      	ldr	r3, [pc, #756]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042f0a:	2200      	movs	r2, #0
10042f0c:	701a      	strb	r2, [r3, #0]
							Stimeselect++;
							if(Stimeselect & 0b00000100){
								Stimeselect += 0b00000100;
							}
						}
						break;
10042f0e:	e045      	b.n	10042f9c <ButtonsMenuSM_Event_Handler+0x79c>
							Stimeselect++;
10042f10:	4bbb      	ldr	r3, [pc, #748]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042f12:	781b      	ldrb	r3, [r3, #0]
10042f14:	3301      	adds	r3, #1
10042f16:	b2da      	uxtb	r2, r3
10042f18:	4bb9      	ldr	r3, [pc, #740]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042f1a:	701a      	strb	r2, [r3, #0]
							if(Stimeselect & 0b00000100){
10042f1c:	4bb8      	ldr	r3, [pc, #736]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042f1e:	781b      	ldrb	r3, [r3, #0]
10042f20:	001a      	movs	r2, r3
10042f22:	2304      	movs	r3, #4
10042f24:	4013      	ands	r3, r2
10042f26:	d039      	beq.n	10042f9c <ButtonsMenuSM_Event_Handler+0x79c>
								Stimeselect += 0b00000100;
10042f28:	4bb5      	ldr	r3, [pc, #724]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042f2a:	781b      	ldrb	r3, [r3, #0]
10042f2c:	3304      	adds	r3, #4
10042f2e:	b2da      	uxtb	r2, r3
10042f30:	4bb3      	ldr	r3, [pc, #716]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042f32:	701a      	strb	r2, [r3, #0]
						break;
10042f34:	e032      	b.n	10042f9c <ButtonsMenuSM_Event_Handler+0x79c>
					case 4:
						if((Etimeselect&0b11111000) == 0b10111000){
10042f36:	4bb3      	ldr	r3, [pc, #716]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f38:	781b      	ldrb	r3, [r3, #0]
10042f3a:	001a      	movs	r2, r3
10042f3c:	23f8      	movs	r3, #248	@ 0xf8
10042f3e:	4013      	ands	r3, r2
10042f40:	2bb8      	cmp	r3, #184	@ 0xb8
10042f42:	d107      	bne.n	10042f54 <ButtonsMenuSM_Event_Handler+0x754>
							Etimeselect &= 0b00000011;
10042f44:	4baf      	ldr	r3, [pc, #700]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f46:	781b      	ldrb	r3, [r3, #0]
10042f48:	2203      	movs	r2, #3
10042f4a:	4013      	ands	r3, r2
10042f4c:	b2da      	uxtb	r2, r3
10042f4e:	4bad      	ldr	r3, [pc, #692]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f50:	701a      	strb	r2, [r3, #0]
						} else {
							Etimeselect += 0b00001000;
						}
						break;
10042f52:	e026      	b.n	10042fa2 <ButtonsMenuSM_Event_Handler+0x7a2>
							Etimeselect += 0b00001000;
10042f54:	4bab      	ldr	r3, [pc, #684]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f56:	781b      	ldrb	r3, [r3, #0]
10042f58:	3308      	adds	r3, #8
10042f5a:	b2da      	uxtb	r2, r3
10042f5c:	4ba9      	ldr	r3, [pc, #676]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f5e:	701a      	strb	r2, [r3, #0]
						break;
10042f60:	e01f      	b.n	10042fa2 <ButtonsMenuSM_Event_Handler+0x7a2>
					case 5:
						if(Etimeselect == 0b10111011){//23:45
10042f62:	4ba8      	ldr	r3, [pc, #672]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f64:	781b      	ldrb	r3, [r3, #0]
10042f66:	2bbb      	cmp	r3, #187	@ 0xbb
10042f68:	d103      	bne.n	10042f72 <ButtonsMenuSM_Event_Handler+0x772>
							Etimeselect = 0;//0:00
10042f6a:	4ba6      	ldr	r3, [pc, #664]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f6c:	2200      	movs	r2, #0
10042f6e:	701a      	strb	r2, [r3, #0]
							Etimeselect++;
							if(Etimeselect & 0b00000100){
								Etimeselect += 0b00000100;
							}
						}
						break;
10042f70:	e016      	b.n	10042fa0 <ButtonsMenuSM_Event_Handler+0x7a0>
							Etimeselect++;
10042f72:	4ba4      	ldr	r3, [pc, #656]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f74:	781b      	ldrb	r3, [r3, #0]
10042f76:	3301      	adds	r3, #1
10042f78:	b2da      	uxtb	r2, r3
10042f7a:	4ba2      	ldr	r3, [pc, #648]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f7c:	701a      	strb	r2, [r3, #0]
							if(Etimeselect & 0b00000100){
10042f7e:	4ba1      	ldr	r3, [pc, #644]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f80:	781b      	ldrb	r3, [r3, #0]
10042f82:	001a      	movs	r2, r3
10042f84:	2304      	movs	r3, #4
10042f86:	4013      	ands	r3, r2
10042f88:	d00a      	beq.n	10042fa0 <ButtonsMenuSM_Event_Handler+0x7a0>
								Etimeselect += 0b00000100;
10042f8a:	4b9e      	ldr	r3, [pc, #632]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f8c:	781b      	ldrb	r3, [r3, #0]
10042f8e:	3304      	adds	r3, #4
10042f90:	b2da      	uxtb	r2, r3
10042f92:	4b9c      	ldr	r3, [pc, #624]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f94:	701a      	strb	r2, [r3, #0]
						break;
10042f96:	e003      	b.n	10042fa0 <ButtonsMenuSM_Event_Handler+0x7a0>
					default:
						break;
10042f98:	46c0      	nop			@ (mov r8, r8)
10042f9a:	e002      	b.n	10042fa2 <ButtonsMenuSM_Event_Handler+0x7a2>
						break;
10042f9c:	46c0      	nop			@ (mov r8, r8)
10042f9e:	e000      	b.n	10042fa2 <ButtonsMenuSM_Event_Handler+0x7a2>
						break;
10042fa0:	46c0      	nop			@ (mov r8, r8)
					}
					DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
10042fa2:	4b99      	ldr	r3, [pc, #612]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10042fa4:	7818      	ldrb	r0, [r3, #0]
10042fa6:	4b99      	ldr	r3, [pc, #612]	@ (1004320c <ButtonsMenuSM_Event_Handler+0xa0c>)
10042fa8:	7819      	ldrb	r1, [r3, #0]
10042faa:	4b99      	ldr	r3, [pc, #612]	@ (10043210 <ButtonsMenuSM_Event_Handler+0xa10>)
10042fac:	781b      	ldrb	r3, [r3, #0]
10042fae:	3301      	adds	r3, #1
10042fb0:	b2da      	uxtb	r2, r3
10042fb2:	4b93      	ldr	r3, [pc, #588]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042fb4:	781c      	ldrb	r4, [r3, #0]
10042fb6:	4b93      	ldr	r3, [pc, #588]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042fb8:	781b      	ldrb	r3, [r3, #0]
10042fba:	9300      	str	r3, [sp, #0]
10042fbc:	0023      	movs	r3, r4
10042fbe:	f7ff fa57 	bl	10042470 <DrawSchedule>
10042fc2:	e05d      	b.n	10043080 <ButtonsMenuSM_Event_Handler+0x880>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10042fc4:	1d3b      	adds	r3, r7, #4
10042fc6:	885b      	ldrh	r3, [r3, #2]
10042fc8:	001a      	movs	r2, r3
10042fca:	2380      	movs	r3, #128	@ 0x80
10042fcc:	015b      	lsls	r3, r3, #5
10042fce:	4013      	ands	r3, r2
10042fd0:	d023      	beq.n	1004301a <ButtonsMenuSM_Event_Handler+0x81a>
10042fd2:	1d3b      	adds	r3, r7, #4
10042fd4:	885b      	ldrh	r3, [r3, #2]
10042fd6:	001a      	movs	r2, r3
10042fd8:	2310      	movs	r3, #16
10042fda:	4013      	ands	r3, r2
10042fdc:	d11d      	bne.n	1004301a <ButtonsMenuSM_Event_Handler+0x81a>
					cursorpos--;
10042fde:	4b8a      	ldr	r3, [pc, #552]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10042fe0:	781b      	ldrb	r3, [r3, #0]
10042fe2:	3b01      	subs	r3, #1
10042fe4:	b2da      	uxtb	r2, r3
10042fe6:	4b88      	ldr	r3, [pc, #544]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10042fe8:	701a      	strb	r2, [r3, #0]
					if(cursorpos == 255){
10042fea:	4b87      	ldr	r3, [pc, #540]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10042fec:	781b      	ldrb	r3, [r3, #0]
10042fee:	2bff      	cmp	r3, #255	@ 0xff
10042ff0:	d102      	bne.n	10042ff8 <ButtonsMenuSM_Event_Handler+0x7f8>
						cursorpos = 5;
10042ff2:	4b85      	ldr	r3, [pc, #532]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10042ff4:	2205      	movs	r2, #5
10042ff6:	701a      	strb	r2, [r3, #0]
					}
					DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
10042ff8:	4b83      	ldr	r3, [pc, #524]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10042ffa:	7818      	ldrb	r0, [r3, #0]
10042ffc:	4b83      	ldr	r3, [pc, #524]	@ (1004320c <ButtonsMenuSM_Event_Handler+0xa0c>)
10042ffe:	7819      	ldrb	r1, [r3, #0]
10043000:	4b83      	ldr	r3, [pc, #524]	@ (10043210 <ButtonsMenuSM_Event_Handler+0xa10>)
10043002:	781b      	ldrb	r3, [r3, #0]
10043004:	3301      	adds	r3, #1
10043006:	b2da      	uxtb	r2, r3
10043008:	4b7d      	ldr	r3, [pc, #500]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
1004300a:	781c      	ldrb	r4, [r3, #0]
1004300c:	4b7d      	ldr	r3, [pc, #500]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
1004300e:	781b      	ldrb	r3, [r3, #0]
10043010:	9300      	str	r3, [sp, #0]
10043012:	0023      	movs	r3, r4
10043014:	f7ff fa2c 	bl	10042470 <DrawSchedule>
10043018:	e032      	b.n	10043080 <ButtonsMenuSM_Event_Handler+0x880>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
1004301a:	1d3b      	adds	r3, r7, #4
1004301c:	885b      	ldrh	r3, [r3, #2]
1004301e:	001a      	movs	r2, r3
10043020:	2380      	movs	r3, #128	@ 0x80
10043022:	019b      	lsls	r3, r3, #6
10043024:	4013      	ands	r3, r2
10043026:	d101      	bne.n	1004302c <ButtonsMenuSM_Event_Handler+0x82c>
10043028:	f000 fd9e 	bl	10043b68 <ButtonsMenuSM_Event_Handler+0x1368>
1004302c:	1d3b      	adds	r3, r7, #4
1004302e:	885b      	ldrh	r3, [r3, #2]
10043030:	001a      	movs	r2, r3
10043032:	2320      	movs	r3, #32
10043034:	4013      	ands	r3, r2
10043036:	d001      	beq.n	1004303c <ButtonsMenuSM_Event_Handler+0x83c>
10043038:	f000 fd96 	bl	10043b68 <ButtonsMenuSM_Event_Handler+0x1368>
					cursorpos++;
1004303c:	4b72      	ldr	r3, [pc, #456]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
1004303e:	781b      	ldrb	r3, [r3, #0]
10043040:	3301      	adds	r3, #1
10043042:	b2da      	uxtb	r2, r3
10043044:	4b70      	ldr	r3, [pc, #448]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10043046:	701a      	strb	r2, [r3, #0]
					cursorpos %= 6;
10043048:	4b6f      	ldr	r3, [pc, #444]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
1004304a:	781b      	ldrb	r3, [r3, #0]
1004304c:	2106      	movs	r1, #6
1004304e:	0018      	movs	r0, r3
10043050:	f7fd f97c 	bl	1004034c <__aeabi_uidivmod>
10043054:	000b      	movs	r3, r1
10043056:	b2da      	uxtb	r2, r3
10043058:	4b6b      	ldr	r3, [pc, #428]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
1004305a:	701a      	strb	r2, [r3, #0]
					DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
1004305c:	4b6a      	ldr	r3, [pc, #424]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
1004305e:	7818      	ldrb	r0, [r3, #0]
10043060:	4b6a      	ldr	r3, [pc, #424]	@ (1004320c <ButtonsMenuSM_Event_Handler+0xa0c>)
10043062:	7819      	ldrb	r1, [r3, #0]
10043064:	4b6a      	ldr	r3, [pc, #424]	@ (10043210 <ButtonsMenuSM_Event_Handler+0xa10>)
10043066:	781b      	ldrb	r3, [r3, #0]
10043068:	3301      	adds	r3, #1
1004306a:	b2da      	uxtb	r2, r3
1004306c:	4b64      	ldr	r3, [pc, #400]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
1004306e:	781c      	ldrb	r4, [r3, #0]
10043070:	4b64      	ldr	r3, [pc, #400]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10043072:	781b      	ldrb	r3, [r3, #0]
10043074:	9300      	str	r3, [sp, #0]
10043076:	0023      	movs	r3, r4
10043078:	f7ff f9fa 	bl	10042470 <DrawSchedule>
				}
			}
			break;
1004307c:	f000 fd74 	bl	10043b68 <ButtonsMenuSM_Event_Handler+0x1368>
10043080:	f000 fd72 	bl	10043b68 <ButtonsMenuSM_Event_Handler+0x1368>
		case scheduleFolder:
			if(event.status == EVENT_ENTRY){
10043084:	1d3b      	adds	r3, r7, #4
10043086:	781b      	ldrb	r3, [r3, #0]
10043088:	b25b      	sxtb	r3, r3
1004308a:	2b02      	cmp	r3, #2
1004308c:	d10b      	bne.n	100430a6 <ButtonsMenuSM_Event_Handler+0x8a6>
				cursorpos = 0;
1004308e:	4b5e      	ldr	r3, [pc, #376]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10043090:	2200      	movs	r2, #0
10043092:	701a      	strb	r2, [r3, #0]
				DrawFolder(cursorpos, folderselect, trackselect);
10043094:	4b5c      	ldr	r3, [pc, #368]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10043096:	7818      	ldrb	r0, [r3, #0]
10043098:	4b5e      	ldr	r3, [pc, #376]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
1004309a:	7819      	ldrb	r1, [r3, #0]
1004309c:	4b5e      	ldr	r3, [pc, #376]	@ (10043218 <ButtonsMenuSM_Event_Handler+0xa18>)
1004309e:	781b      	ldrb	r3, [r3, #0]
100430a0:	001a      	movs	r2, r3
100430a2:	f7ff f899 	bl	100421d8 <DrawFolder>
			}
			if(event.status == EVENT_BUTTONS){
100430a6:	1d3b      	adds	r3, r7, #4
100430a8:	781b      	ldrb	r3, [r3, #0]
100430aa:	b25b      	sxtb	r3, r3
100430ac:	2b04      	cmp	r3, #4
100430ae:	d001      	beq.n	100430b4 <ButtonsMenuSM_Event_Handler+0x8b4>
100430b0:	f000 fd5c 	bl	10043b6c <ButtonsMenuSM_Event_Handler+0x136c>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
100430b4:	1d3b      	adds	r3, r7, #4
100430b6:	885b      	ldrh	r3, [r3, #2]
100430b8:	001a      	movs	r2, r3
100430ba:	2380      	movs	r3, #128	@ 0x80
100430bc:	005b      	lsls	r3, r3, #1
100430be:	4013      	ands	r3, r2
100430c0:	d00e      	beq.n	100430e0 <ButtonsMenuSM_Event_Handler+0x8e0>
100430c2:	1d3b      	adds	r3, r7, #4
100430c4:	885b      	ldrh	r3, [r3, #2]
100430c6:	001a      	movs	r2, r3
100430c8:	2301      	movs	r3, #1
100430ca:	4013      	ands	r3, r2
100430cc:	d108      	bne.n	100430e0 <ButtonsMenuSM_Event_Handler+0x8e0>
					//discountprintf("moving to schedule stop");
					nextstate = scheduleTime;
100430ce:	2326      	movs	r3, #38	@ 0x26
100430d0:	18fb      	adds	r3, r7, r3
100430d2:	2202      	movs	r2, #2
100430d4:	701a      	strb	r2, [r3, #0]
					transition = 1;
100430d6:	2327      	movs	r3, #39	@ 0x27
100430d8:	18fb      	adds	r3, r7, r3
100430da:	2201      	movs	r2, #1
100430dc:	701a      	strb	r2, [r3, #0]
100430de:	e0f4      	b.n	100432ca <ButtonsMenuSM_Event_Handler+0xaca>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
100430e0:	1d3b      	adds	r3, r7, #4
100430e2:	885b      	ldrh	r3, [r3, #2]
100430e4:	001a      	movs	r2, r3
100430e6:	2380      	movs	r3, #128	@ 0x80
100430e8:	009b      	lsls	r3, r3, #2
100430ea:	4013      	ands	r3, r2
100430ec:	d032      	beq.n	10043154 <ButtonsMenuSM_Event_Handler+0x954>
100430ee:	1d3b      	adds	r3, r7, #4
100430f0:	885b      	ldrh	r3, [r3, #2]
100430f2:	001a      	movs	r2, r3
100430f4:	2302      	movs	r3, #2
100430f6:	4013      	ands	r3, r2
100430f8:	d12c      	bne.n	10043154 <ButtonsMenuSM_Event_Handler+0x954>
					//discountprintf("moving to main");
					scheduleEvent sevent;
					sevent.month = monthselect;
100430fa:	4b44      	ldr	r3, [pc, #272]	@ (1004320c <ButtonsMenuSM_Event_Handler+0xa0c>)
100430fc:	781a      	ldrb	r2, [r3, #0]
100430fe:	2114      	movs	r1, #20
10043100:	187b      	adds	r3, r7, r1
10043102:	701a      	strb	r2, [r3, #0]
					sevent.day = dayselect+1;
10043104:	4b42      	ldr	r3, [pc, #264]	@ (10043210 <ButtonsMenuSM_Event_Handler+0xa10>)
10043106:	781b      	ldrb	r3, [r3, #0]
10043108:	3301      	adds	r3, #1
1004310a:	b2da      	uxtb	r2, r3
1004310c:	187b      	adds	r3, r7, r1
1004310e:	705a      	strb	r2, [r3, #1]
					sevent.start = Stimeselect;
10043110:	4b3b      	ldr	r3, [pc, #236]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10043112:	781a      	ldrb	r2, [r3, #0]
10043114:	187b      	adds	r3, r7, r1
10043116:	709a      	strb	r2, [r3, #2]
					sevent.stop = Etimeselect;
10043118:	4b3a      	ldr	r3, [pc, #232]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
1004311a:	781a      	ldrb	r2, [r3, #0]
1004311c:	187b      	adds	r3, r7, r1
1004311e:	70da      	strb	r2, [r3, #3]
					sevent.track = trackselect+1;
10043120:	4b3d      	ldr	r3, [pc, #244]	@ (10043218 <ButtonsMenuSM_Event_Handler+0xa18>)
10043122:	781b      	ldrb	r3, [r3, #0]
10043124:	3301      	adds	r3, #1
10043126:	b2da      	uxtb	r2, r3
10043128:	187b      	adds	r3, r7, r1
1004312a:	715a      	strb	r2, [r3, #5]
					sevent.folder = folderselect+1;
1004312c:	4b39      	ldr	r3, [pc, #228]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
1004312e:	781b      	ldrb	r3, [r3, #0]
10043130:	3301      	adds	r3, #1
10043132:	b2da      	uxtb	r2, r3
10043134:	187b      	adds	r3, r7, r1
10043136:	711a      	strb	r2, [r3, #4]
					FLASH_AppendSchedule(sevent);
10043138:	187b      	adds	r3, r7, r1
1004313a:	6818      	ldr	r0, [r3, #0]
1004313c:	6859      	ldr	r1, [r3, #4]
1004313e:	f001 fd25 	bl	10044b8c <FLASH_AppendSchedule>
					nextstate = main;
10043142:	2326      	movs	r3, #38	@ 0x26
10043144:	18fb      	adds	r3, r7, r3
10043146:	2200      	movs	r2, #0
10043148:	701a      	strb	r2, [r3, #0]
					transition = 1;
1004314a:	2327      	movs	r3, #39	@ 0x27
1004314c:	18fb      	adds	r3, r7, r3
1004314e:	2201      	movs	r2, #1
10043150:	701a      	strb	r2, [r3, #0]
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10043152:	e0ba      	b.n	100432ca <ButtonsMenuSM_Event_Handler+0xaca>

				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
10043154:	1d3b      	adds	r3, r7, #4
10043156:	885b      	ldrh	r3, [r3, #2]
10043158:	001a      	movs	r2, r3
1004315a:	2380      	movs	r3, #128	@ 0x80
1004315c:	00db      	lsls	r3, r3, #3
1004315e:	4013      	ands	r3, r2
10043160:	d02b      	beq.n	100431ba <ButtonsMenuSM_Event_Handler+0x9ba>
10043162:	1d3b      	adds	r3, r7, #4
10043164:	885b      	ldrh	r3, [r3, #2]
10043166:	001a      	movs	r2, r3
10043168:	2304      	movs	r3, #4
1004316a:	4013      	ands	r3, r2
1004316c:	d125      	bne.n	100431ba <ButtonsMenuSM_Event_Handler+0x9ba>
					if(!cursorpos){
1004316e:	4b26      	ldr	r3, [pc, #152]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10043170:	781b      	ldrb	r3, [r3, #0]
10043172:	2b00      	cmp	r3, #0
10043174:	d10d      	bne.n	10043192 <ButtonsMenuSM_Event_Handler+0x992>
						folderselect--;
10043176:	4b27      	ldr	r3, [pc, #156]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
10043178:	781b      	ldrb	r3, [r3, #0]
1004317a:	3b01      	subs	r3, #1
1004317c:	b2da      	uxtb	r2, r3
1004317e:	4b25      	ldr	r3, [pc, #148]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
10043180:	701a      	strb	r2, [r3, #0]
						if(folderselect==255){
10043182:	4b24      	ldr	r3, [pc, #144]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
10043184:	781b      	ldrb	r3, [r3, #0]
10043186:	2bff      	cmp	r3, #255	@ 0xff
10043188:	d10d      	bne.n	100431a6 <ButtonsMenuSM_Event_Handler+0x9a6>
							folderselect = 100;
1004318a:	4b22      	ldr	r3, [pc, #136]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
1004318c:	2264      	movs	r2, #100	@ 0x64
1004318e:	701a      	strb	r2, [r3, #0]
10043190:	e009      	b.n	100431a6 <ButtonsMenuSM_Event_Handler+0x9a6>
						}
					} else {
						trackselect--;
10043192:	4b21      	ldr	r3, [pc, #132]	@ (10043218 <ButtonsMenuSM_Event_Handler+0xa18>)
10043194:	781b      	ldrb	r3, [r3, #0]
10043196:	3b01      	subs	r3, #1
10043198:	b2da      	uxtb	r2, r3
1004319a:	4b1f      	ldr	r3, [pc, #124]	@ (10043218 <ButtonsMenuSM_Event_Handler+0xa18>)
1004319c:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
1004319e:	4b1e      	ldr	r3, [pc, #120]	@ (10043218 <ButtonsMenuSM_Event_Handler+0xa18>)
100431a0:	781a      	ldrb	r2, [r3, #0]
100431a2:	4b1d      	ldr	r3, [pc, #116]	@ (10043218 <ButtonsMenuSM_Event_Handler+0xa18>)
100431a4:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
100431a6:	4b18      	ldr	r3, [pc, #96]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
100431a8:	7818      	ldrb	r0, [r3, #0]
100431aa:	4b1a      	ldr	r3, [pc, #104]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
100431ac:	7819      	ldrb	r1, [r3, #0]
100431ae:	4b1a      	ldr	r3, [pc, #104]	@ (10043218 <ButtonsMenuSM_Event_Handler+0xa18>)
100431b0:	781b      	ldrb	r3, [r3, #0]
100431b2:	001a      	movs	r2, r3
100431b4:	f7ff f810 	bl	100421d8 <DrawFolder>
100431b8:	e087      	b.n	100432ca <ButtonsMenuSM_Event_Handler+0xaca>

				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
100431ba:	1d3b      	adds	r3, r7, #4
100431bc:	885b      	ldrh	r3, [r3, #2]
100431be:	001a      	movs	r2, r3
100431c0:	2380      	movs	r3, #128	@ 0x80
100431c2:	011b      	lsls	r3, r3, #4
100431c4:	4013      	ands	r3, r2
100431c6:	d03d      	beq.n	10043244 <ButtonsMenuSM_Event_Handler+0xa44>
100431c8:	1d3b      	adds	r3, r7, #4
100431ca:	885b      	ldrh	r3, [r3, #2]
100431cc:	001a      	movs	r2, r3
100431ce:	2308      	movs	r3, #8
100431d0:	4013      	ands	r3, r2
100431d2:	d137      	bne.n	10043244 <ButtonsMenuSM_Event_Handler+0xa44>
					if(!cursorpos){
100431d4:	4b0c      	ldr	r3, [pc, #48]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
100431d6:	781b      	ldrb	r3, [r3, #0]
100431d8:	2b00      	cmp	r3, #0
100431da:	d11f      	bne.n	1004321c <ButtonsMenuSM_Event_Handler+0xa1c>
						folderselect++;
100431dc:	4b0d      	ldr	r3, [pc, #52]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
100431de:	781b      	ldrb	r3, [r3, #0]
100431e0:	3301      	adds	r3, #1
100431e2:	b2da      	uxtb	r2, r3
100431e4:	4b0b      	ldr	r3, [pc, #44]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
100431e6:	701a      	strb	r2, [r3, #0]
						folderselect %= 100;
100431e8:	4b0a      	ldr	r3, [pc, #40]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
100431ea:	781b      	ldrb	r3, [r3, #0]
100431ec:	2164      	movs	r1, #100	@ 0x64
100431ee:	0018      	movs	r0, r3
100431f0:	f7fd f8ac 	bl	1004034c <__aeabi_uidivmod>
100431f4:	000b      	movs	r3, r1
100431f6:	b2da      	uxtb	r2, r3
100431f8:	4b06      	ldr	r3, [pc, #24]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
100431fa:	701a      	strb	r2, [r3, #0]
100431fc:	e018      	b.n	10043230 <ButtonsMenuSM_Event_Handler+0xa30>
100431fe:	46c0      	nop			@ (mov r8, r8)
10043200:	200003a3 	.word	0x200003a3
10043204:	200003a4 	.word	0x200003a4
10043208:	2000039e 	.word	0x2000039e
1004320c:	200003a1 	.word	0x200003a1
10043210:	200003a2 	.word	0x200003a2
10043214:	2000039f 	.word	0x2000039f
10043218:	200003a0 	.word	0x200003a0
					} else {
						trackselect++;
1004321c:	4bd0      	ldr	r3, [pc, #832]	@ (10043560 <ButtonsMenuSM_Event_Handler+0xd60>)
1004321e:	781b      	ldrb	r3, [r3, #0]
10043220:	3301      	adds	r3, #1
10043222:	b2da      	uxtb	r2, r3
10043224:	4bce      	ldr	r3, [pc, #824]	@ (10043560 <ButtonsMenuSM_Event_Handler+0xd60>)
10043226:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
10043228:	4bcd      	ldr	r3, [pc, #820]	@ (10043560 <ButtonsMenuSM_Event_Handler+0xd60>)
1004322a:	781a      	ldrb	r2, [r3, #0]
1004322c:	4bcc      	ldr	r3, [pc, #816]	@ (10043560 <ButtonsMenuSM_Event_Handler+0xd60>)
1004322e:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
10043230:	4bcc      	ldr	r3, [pc, #816]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
10043232:	7818      	ldrb	r0, [r3, #0]
10043234:	4bcc      	ldr	r3, [pc, #816]	@ (10043568 <ButtonsMenuSM_Event_Handler+0xd68>)
10043236:	7819      	ldrb	r1, [r3, #0]
10043238:	4bc9      	ldr	r3, [pc, #804]	@ (10043560 <ButtonsMenuSM_Event_Handler+0xd60>)
1004323a:	781b      	ldrb	r3, [r3, #0]
1004323c:	001a      	movs	r2, r3
1004323e:	f7fe ffcb 	bl	100421d8 <DrawFolder>
10043242:	e042      	b.n	100432ca <ButtonsMenuSM_Event_Handler+0xaca>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10043244:	1d3b      	adds	r3, r7, #4
10043246:	885b      	ldrh	r3, [r3, #2]
10043248:	001a      	movs	r2, r3
1004324a:	2380      	movs	r3, #128	@ 0x80
1004324c:	015b      	lsls	r3, r3, #5
1004324e:	4013      	ands	r3, r2
10043250:	d017      	beq.n	10043282 <ButtonsMenuSM_Event_Handler+0xa82>
10043252:	1d3b      	adds	r3, r7, #4
10043254:	885b      	ldrh	r3, [r3, #2]
10043256:	001a      	movs	r2, r3
10043258:	2310      	movs	r3, #16
1004325a:	4013      	ands	r3, r2
1004325c:	d111      	bne.n	10043282 <ButtonsMenuSM_Event_Handler+0xa82>
					cursorpos = !cursorpos;
1004325e:	4bc1      	ldr	r3, [pc, #772]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
10043260:	781b      	ldrb	r3, [r3, #0]
10043262:	425a      	negs	r2, r3
10043264:	4153      	adcs	r3, r2
10043266:	b2db      	uxtb	r3, r3
10043268:	001a      	movs	r2, r3
1004326a:	4bbe      	ldr	r3, [pc, #760]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
1004326c:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
1004326e:	4bbd      	ldr	r3, [pc, #756]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
10043270:	7818      	ldrb	r0, [r3, #0]
10043272:	4bbd      	ldr	r3, [pc, #756]	@ (10043568 <ButtonsMenuSM_Event_Handler+0xd68>)
10043274:	7819      	ldrb	r1, [r3, #0]
10043276:	4bba      	ldr	r3, [pc, #744]	@ (10043560 <ButtonsMenuSM_Event_Handler+0xd60>)
10043278:	781b      	ldrb	r3, [r3, #0]
1004327a:	001a      	movs	r2, r3
1004327c:	f7fe ffac 	bl	100421d8 <DrawFolder>
10043280:	e023      	b.n	100432ca <ButtonsMenuSM_Event_Handler+0xaca>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
10043282:	1d3b      	adds	r3, r7, #4
10043284:	885b      	ldrh	r3, [r3, #2]
10043286:	001a      	movs	r2, r3
10043288:	2380      	movs	r3, #128	@ 0x80
1004328a:	019b      	lsls	r3, r3, #6
1004328c:	4013      	ands	r3, r2
1004328e:	d101      	bne.n	10043294 <ButtonsMenuSM_Event_Handler+0xa94>
10043290:	f000 fc6c 	bl	10043b6c <ButtonsMenuSM_Event_Handler+0x136c>
10043294:	1d3b      	adds	r3, r7, #4
10043296:	885b      	ldrh	r3, [r3, #2]
10043298:	001a      	movs	r2, r3
1004329a:	2320      	movs	r3, #32
1004329c:	4013      	ands	r3, r2
1004329e:	d001      	beq.n	100432a4 <ButtonsMenuSM_Event_Handler+0xaa4>
100432a0:	f000 fc64 	bl	10043b6c <ButtonsMenuSM_Event_Handler+0x136c>
					cursorpos = !cursorpos;
100432a4:	4baf      	ldr	r3, [pc, #700]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
100432a6:	781b      	ldrb	r3, [r3, #0]
100432a8:	425a      	negs	r2, r3
100432aa:	4153      	adcs	r3, r2
100432ac:	b2db      	uxtb	r3, r3
100432ae:	001a      	movs	r2, r3
100432b0:	4bac      	ldr	r3, [pc, #688]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
100432b2:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
100432b4:	4bab      	ldr	r3, [pc, #684]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
100432b6:	7818      	ldrb	r0, [r3, #0]
100432b8:	4bab      	ldr	r3, [pc, #684]	@ (10043568 <ButtonsMenuSM_Event_Handler+0xd68>)
100432ba:	7819      	ldrb	r1, [r3, #0]
100432bc:	4ba8      	ldr	r3, [pc, #672]	@ (10043560 <ButtonsMenuSM_Event_Handler+0xd60>)
100432be:	781b      	ldrb	r3, [r3, #0]
100432c0:	001a      	movs	r2, r3
100432c2:	f7fe ff89 	bl	100421d8 <DrawFolder>
				}
			}
			break;
100432c6:	f000 fc51 	bl	10043b6c <ButtonsMenuSM_Event_Handler+0x136c>
100432ca:	f000 fc4f 	bl	10043b6c <ButtonsMenuSM_Event_Handler+0x136c>
		case setTime:
			static int8_t minute;
			static int8_t hour;
			static int8_t day;
			static int8_t month;
			if(event.status == EVENT_ENTRY){
100432ce:	1d3b      	adds	r3, r7, #4
100432d0:	781b      	ldrb	r3, [r3, #0]
100432d2:	b25b      	sxtb	r3, r3
100432d4:	2b02      	cmp	r3, #2
100432d6:	d134      	bne.n	10043342 <ButtonsMenuSM_Event_Handler+0xb42>
				cursorpos = 0;
100432d8:	4ba2      	ldr	r3, [pc, #648]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
100432da:	2200      	movs	r2, #0
100432dc:	701a      	strb	r2, [r3, #0]
				minute = Scheduler_GetMinute();
100432de:	f003 fa3b 	bl	10046758 <Scheduler_GetMinute>
100432e2:	0003      	movs	r3, r0
100432e4:	b25a      	sxtb	r2, r3
100432e6:	4ba1      	ldr	r3, [pc, #644]	@ (1004356c <ButtonsMenuSM_Event_Handler+0xd6c>)
100432e8:	701a      	strb	r2, [r3, #0]
				hour = Scheduler_GetHour();
100432ea:	f003 fa2b 	bl	10046744 <Scheduler_GetHour>
100432ee:	0003      	movs	r3, r0
100432f0:	b25a      	sxtb	r2, r3
100432f2:	4b9f      	ldr	r3, [pc, #636]	@ (10043570 <ButtonsMenuSM_Event_Handler+0xd70>)
100432f4:	701a      	strb	r2, [r3, #0]
				day = Scheduler_GetDay();
100432f6:	f003 fa1b 	bl	10046730 <Scheduler_GetDay>
100432fa:	0003      	movs	r3, r0
100432fc:	b25a      	sxtb	r2, r3
100432fe:	4b9d      	ldr	r3, [pc, #628]	@ (10043574 <ButtonsMenuSM_Event_Handler+0xd74>)
10043300:	701a      	strb	r2, [r3, #0]
				month = Scheduler_GetMonth();
10043302:	f003 fa0b 	bl	1004671c <Scheduler_GetMonth>
10043306:	0003      	movs	r3, r0
10043308:	b25a      	sxtb	r2, r3
1004330a:	4b9b      	ldr	r3, [pc, #620]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
1004330c:	701a      	strb	r2, [r3, #0]
				DrawSetTime(cursorpos, month+1, day+1, hour, minute);
1004330e:	4b95      	ldr	r3, [pc, #596]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
10043310:	7818      	ldrb	r0, [r3, #0]
10043312:	4b99      	ldr	r3, [pc, #612]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
10043314:	781b      	ldrb	r3, [r3, #0]
10043316:	b25b      	sxtb	r3, r3
10043318:	b2db      	uxtb	r3, r3
1004331a:	3301      	adds	r3, #1
1004331c:	b2d9      	uxtb	r1, r3
1004331e:	4b95      	ldr	r3, [pc, #596]	@ (10043574 <ButtonsMenuSM_Event_Handler+0xd74>)
10043320:	781b      	ldrb	r3, [r3, #0]
10043322:	b25b      	sxtb	r3, r3
10043324:	b2db      	uxtb	r3, r3
10043326:	3301      	adds	r3, #1
10043328:	b2da      	uxtb	r2, r3
1004332a:	4b91      	ldr	r3, [pc, #580]	@ (10043570 <ButtonsMenuSM_Event_Handler+0xd70>)
1004332c:	781b      	ldrb	r3, [r3, #0]
1004332e:	b25b      	sxtb	r3, r3
10043330:	b2dc      	uxtb	r4, r3
10043332:	4b8e      	ldr	r3, [pc, #568]	@ (1004356c <ButtonsMenuSM_Event_Handler+0xd6c>)
10043334:	781b      	ldrb	r3, [r3, #0]
10043336:	b25b      	sxtb	r3, r3
10043338:	b2db      	uxtb	r3, r3
1004333a:	9300      	str	r3, [sp, #0]
1004333c:	0023      	movs	r3, r4
1004333e:	f7fe fff3 	bl	10042328 <DrawSetTime>
			}
			if(event.status == EVENT_BUTTONS){
10043342:	1d3b      	adds	r3, r7, #4
10043344:	781b      	ldrb	r3, [r3, #0]
10043346:	b25b      	sxtb	r3, r3
10043348:	2b04      	cmp	r3, #4
1004334a:	d001      	beq.n	10043350 <ButtonsMenuSM_Event_Handler+0xb50>
1004334c:	f000 fc10 	bl	10043b70 <ButtonsMenuSM_Event_Handler+0x1370>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10043350:	1d3b      	adds	r3, r7, #4
10043352:	885b      	ldrh	r3, [r3, #2]
10043354:	001a      	movs	r2, r3
10043356:	2380      	movs	r3, #128	@ 0x80
10043358:	005b      	lsls	r3, r3, #1
1004335a:	4013      	ands	r3, r2
1004335c:	d00e      	beq.n	1004337c <ButtonsMenuSM_Event_Handler+0xb7c>
1004335e:	1d3b      	adds	r3, r7, #4
10043360:	885b      	ldrh	r3, [r3, #2]
10043362:	001a      	movs	r2, r3
10043364:	2301      	movs	r3, #1
10043366:	4013      	ands	r3, r2
10043368:	d108      	bne.n	1004337c <ButtonsMenuSM_Event_Handler+0xb7c>
					//discountprintf("moving to main, back");
					nextstate = main;
1004336a:	2326      	movs	r3, #38	@ 0x26
1004336c:	18fb      	adds	r3, r7, r3
1004336e:	2200      	movs	r2, #0
10043370:	701a      	strb	r2, [r3, #0]
					transition = 1;
10043372:	2327      	movs	r3, #39	@ 0x27
10043374:	18fb      	adds	r3, r7, r3
10043376:	2201      	movs	r2, #1
10043378:	701a      	strb	r2, [r3, #0]
1004337a:	e254      	b.n	10043826 <ButtonsMenuSM_Event_Handler+0x1026>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
1004337c:	1d3b      	adds	r3, r7, #4
1004337e:	885b      	ldrh	r3, [r3, #2]
10043380:	001a      	movs	r2, r3
10043382:	2380      	movs	r3, #128	@ 0x80
10043384:	009b      	lsls	r3, r3, #2
10043386:	4013      	ands	r3, r2
10043388:	d100      	bne.n	1004338c <ButtonsMenuSM_Event_Handler+0xb8c>
1004338a:	e094      	b.n	100434b6 <ButtonsMenuSM_Event_Handler+0xcb6>
1004338c:	1d3b      	adds	r3, r7, #4
1004338e:	885b      	ldrh	r3, [r3, #2]
10043390:	001a      	movs	r2, r3
10043392:	2302      	movs	r3, #2
10043394:	4013      	ands	r3, r2
10043396:	d000      	beq.n	1004339a <ButtonsMenuSM_Event_Handler+0xb9a>
10043398:	e08d      	b.n	100434b6 <ButtonsMenuSM_Event_Handler+0xcb6>
					//discountprintf("moving to main, select");
					month++;
1004339a:	4b77      	ldr	r3, [pc, #476]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
1004339c:	781b      	ldrb	r3, [r3, #0]
1004339e:	b25b      	sxtb	r3, r3
100433a0:	b2db      	uxtb	r3, r3
100433a2:	3301      	adds	r3, #1
100433a4:	b2db      	uxtb	r3, r3
100433a6:	b25a      	sxtb	r2, r3
100433a8:	4b73      	ldr	r3, [pc, #460]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
100433aa:	701a      	strb	r2, [r3, #0]
					I2C_Transmit(RTCADDRESS, RTCSECADDR, 0);
100433ac:	2200      	movs	r2, #0
100433ae:	2100      	movs	r1, #0
100433b0:	206f      	movs	r0, #111	@ 0x6f
100433b2:	f002 f869 	bl	10045488 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCMINADDR, ((minute/10)<<4)|minute%10);
100433b6:	4b6d      	ldr	r3, [pc, #436]	@ (1004356c <ButtonsMenuSM_Event_Handler+0xd6c>)
100433b8:	781b      	ldrb	r3, [r3, #0]
100433ba:	b25b      	sxtb	r3, r3
100433bc:	210a      	movs	r1, #10
100433be:	0018      	movs	r0, r3
100433c0:	f7fc ffc8 	bl	10040354 <__divsi3>
100433c4:	0003      	movs	r3, r0
100433c6:	b25b      	sxtb	r3, r3
100433c8:	011b      	lsls	r3, r3, #4
100433ca:	b25c      	sxtb	r4, r3
100433cc:	4b67      	ldr	r3, [pc, #412]	@ (1004356c <ButtonsMenuSM_Event_Handler+0xd6c>)
100433ce:	781b      	ldrb	r3, [r3, #0]
100433d0:	b25b      	sxtb	r3, r3
100433d2:	210a      	movs	r1, #10
100433d4:	0018      	movs	r0, r3
100433d6:	f7fd f8a3 	bl	10040520 <__aeabi_idivmod>
100433da:	000b      	movs	r3, r1
100433dc:	b25b      	sxtb	r3, r3
100433de:	4323      	orrs	r3, r4
100433e0:	b25b      	sxtb	r3, r3
100433e2:	b2db      	uxtb	r3, r3
100433e4:	001a      	movs	r2, r3
100433e6:	2101      	movs	r1, #1
100433e8:	206f      	movs	r0, #111	@ 0x6f
100433ea:	f002 f84d 	bl	10045488 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCHOURADDR, 0b01000000|((hour/10)<<4)|hour%10);
100433ee:	4b60      	ldr	r3, [pc, #384]	@ (10043570 <ButtonsMenuSM_Event_Handler+0xd70>)
100433f0:	781b      	ldrb	r3, [r3, #0]
100433f2:	b25b      	sxtb	r3, r3
100433f4:	210a      	movs	r1, #10
100433f6:	0018      	movs	r0, r3
100433f8:	f7fc ffac 	bl	10040354 <__divsi3>
100433fc:	0003      	movs	r3, r0
100433fe:	b25b      	sxtb	r3, r3
10043400:	011b      	lsls	r3, r3, #4
10043402:	b25b      	sxtb	r3, r3
10043404:	2240      	movs	r2, #64	@ 0x40
10043406:	4313      	orrs	r3, r2
10043408:	b25c      	sxtb	r4, r3
1004340a:	4b59      	ldr	r3, [pc, #356]	@ (10043570 <ButtonsMenuSM_Event_Handler+0xd70>)
1004340c:	781b      	ldrb	r3, [r3, #0]
1004340e:	b25b      	sxtb	r3, r3
10043410:	210a      	movs	r1, #10
10043412:	0018      	movs	r0, r3
10043414:	f7fd f884 	bl	10040520 <__aeabi_idivmod>
10043418:	000b      	movs	r3, r1
1004341a:	b25b      	sxtb	r3, r3
1004341c:	4323      	orrs	r3, r4
1004341e:	b25b      	sxtb	r3, r3
10043420:	b2db      	uxtb	r3, r3
10043422:	001a      	movs	r2, r3
10043424:	2102      	movs	r1, #2
10043426:	206f      	movs	r0, #111	@ 0x6f
10043428:	f002 f82e 	bl	10045488 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCDAYADDR, (((day+1)/10)<<4)|(day+1)%10);
1004342c:	4b51      	ldr	r3, [pc, #324]	@ (10043574 <ButtonsMenuSM_Event_Handler+0xd74>)
1004342e:	781b      	ldrb	r3, [r3, #0]
10043430:	b25b      	sxtb	r3, r3
10043432:	3301      	adds	r3, #1
10043434:	210a      	movs	r1, #10
10043436:	0018      	movs	r0, r3
10043438:	f7fc ff8c 	bl	10040354 <__divsi3>
1004343c:	0003      	movs	r3, r0
1004343e:	b25b      	sxtb	r3, r3
10043440:	011b      	lsls	r3, r3, #4
10043442:	b25c      	sxtb	r4, r3
10043444:	4b4b      	ldr	r3, [pc, #300]	@ (10043574 <ButtonsMenuSM_Event_Handler+0xd74>)
10043446:	781b      	ldrb	r3, [r3, #0]
10043448:	b25b      	sxtb	r3, r3
1004344a:	3301      	adds	r3, #1
1004344c:	210a      	movs	r1, #10
1004344e:	0018      	movs	r0, r3
10043450:	f7fd f866 	bl	10040520 <__aeabi_idivmod>
10043454:	000b      	movs	r3, r1
10043456:	b25b      	sxtb	r3, r3
10043458:	4323      	orrs	r3, r4
1004345a:	b25b      	sxtb	r3, r3
1004345c:	b2db      	uxtb	r3, r3
1004345e:	001a      	movs	r2, r3
10043460:	2104      	movs	r1, #4
10043462:	206f      	movs	r0, #111	@ 0x6f
10043464:	f002 f810 	bl	10045488 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCMNTHADDR, (((month+1)/10)<<4)|(month+1)%10);
10043468:	4b43      	ldr	r3, [pc, #268]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
1004346a:	781b      	ldrb	r3, [r3, #0]
1004346c:	b25b      	sxtb	r3, r3
1004346e:	3301      	adds	r3, #1
10043470:	210a      	movs	r1, #10
10043472:	0018      	movs	r0, r3
10043474:	f7fc ff6e 	bl	10040354 <__divsi3>
10043478:	0003      	movs	r3, r0
1004347a:	b25b      	sxtb	r3, r3
1004347c:	011b      	lsls	r3, r3, #4
1004347e:	b25c      	sxtb	r4, r3
10043480:	4b3d      	ldr	r3, [pc, #244]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
10043482:	781b      	ldrb	r3, [r3, #0]
10043484:	b25b      	sxtb	r3, r3
10043486:	3301      	adds	r3, #1
10043488:	210a      	movs	r1, #10
1004348a:	0018      	movs	r0, r3
1004348c:	f7fd f848 	bl	10040520 <__aeabi_idivmod>
10043490:	000b      	movs	r3, r1
10043492:	b25b      	sxtb	r3, r3
10043494:	4323      	orrs	r3, r4
10043496:	b25b      	sxtb	r3, r3
10043498:	b2db      	uxtb	r3, r3
1004349a:	001a      	movs	r2, r3
1004349c:	2105      	movs	r1, #5
1004349e:	206f      	movs	r0, #111	@ 0x6f
100434a0:	f001 fff2 	bl	10045488 <I2C_Transmit>
					nextstate = main;
100434a4:	2326      	movs	r3, #38	@ 0x26
100434a6:	18fb      	adds	r3, r7, r3
100434a8:	2200      	movs	r2, #0
100434aa:	701a      	strb	r2, [r3, #0]
					transition = 1;
100434ac:	2327      	movs	r3, #39	@ 0x27
100434ae:	18fb      	adds	r3, r7, r3
100434b0:	2201      	movs	r2, #1
100434b2:	701a      	strb	r2, [r3, #0]
100434b4:	e1b7      	b.n	10043826 <ButtonsMenuSM_Event_Handler+0x1026>

				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
100434b6:	1d3b      	adds	r3, r7, #4
100434b8:	885b      	ldrh	r3, [r3, #2]
100434ba:	001a      	movs	r2, r3
100434bc:	2380      	movs	r3, #128	@ 0x80
100434be:	00db      	lsls	r3, r3, #3
100434c0:	4013      	ands	r3, r2
100434c2:	d100      	bne.n	100434c6 <ButtonsMenuSM_Event_Handler+0xcc6>
100434c4:	e09f      	b.n	10043606 <ButtonsMenuSM_Event_Handler+0xe06>
100434c6:	1d3b      	adds	r3, r7, #4
100434c8:	885b      	ldrh	r3, [r3, #2]
100434ca:	001a      	movs	r2, r3
100434cc:	2304      	movs	r3, #4
100434ce:	4013      	ands	r3, r2
100434d0:	d000      	beq.n	100434d4 <ButtonsMenuSM_Event_Handler+0xcd4>
100434d2:	e098      	b.n	10043606 <ButtonsMenuSM_Event_Handler+0xe06>
					switch(cursorpos){
100434d4:	4b23      	ldr	r3, [pc, #140]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
100434d6:	781b      	ldrb	r3, [r3, #0]
100434d8:	2b03      	cmp	r3, #3
100434da:	d04f      	beq.n	1004357c <ButtonsMenuSM_Event_Handler+0xd7c>
100434dc:	dd00      	ble.n	100434e0 <ButtonsMenuSM_Event_Handler+0xce0>
100434de:	e077      	b.n	100435d0 <ButtonsMenuSM_Event_Handler+0xdd0>
100434e0:	2b02      	cmp	r3, #2
100434e2:	d02a      	beq.n	1004353a <ButtonsMenuSM_Event_Handler+0xd3a>
100434e4:	dd00      	ble.n	100434e8 <ButtonsMenuSM_Event_Handler+0xce8>
100434e6:	e073      	b.n	100435d0 <ButtonsMenuSM_Event_Handler+0xdd0>
100434e8:	2b00      	cmp	r3, #0
100434ea:	d002      	beq.n	100434f2 <ButtonsMenuSM_Event_Handler+0xcf2>
100434ec:	2b01      	cmp	r3, #1
100434ee:	d012      	beq.n	10043516 <ButtonsMenuSM_Event_Handler+0xd16>
100434f0:	e06e      	b.n	100435d0 <ButtonsMenuSM_Event_Handler+0xdd0>
					case 0:
						month--;
100434f2:	4b21      	ldr	r3, [pc, #132]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
100434f4:	781b      	ldrb	r3, [r3, #0]
100434f6:	b25b      	sxtb	r3, r3
100434f8:	b2db      	uxtb	r3, r3
100434fa:	3b01      	subs	r3, #1
100434fc:	b2db      	uxtb	r3, r3
100434fe:	b25a      	sxtb	r2, r3
10043500:	4b1d      	ldr	r3, [pc, #116]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
10043502:	701a      	strb	r2, [r3, #0]
						if(month < 0){
10043504:	4b1c      	ldr	r3, [pc, #112]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
10043506:	781b      	ldrb	r3, [r3, #0]
10043508:	b25b      	sxtb	r3, r3
1004350a:	2b00      	cmp	r3, #0
1004350c:	da59      	bge.n	100435c2 <ButtonsMenuSM_Event_Handler+0xdc2>
							month = 11;
1004350e:	4b1a      	ldr	r3, [pc, #104]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
10043510:	220b      	movs	r2, #11
10043512:	701a      	strb	r2, [r3, #0]
						}
						break;
10043514:	e055      	b.n	100435c2 <ButtonsMenuSM_Event_Handler+0xdc2>
					case 1:
						day--;
10043516:	4b17      	ldr	r3, [pc, #92]	@ (10043574 <ButtonsMenuSM_Event_Handler+0xd74>)
10043518:	781b      	ldrb	r3, [r3, #0]
1004351a:	b25b      	sxtb	r3, r3
1004351c:	b2db      	uxtb	r3, r3
1004351e:	3b01      	subs	r3, #1
10043520:	b2db      	uxtb	r3, r3
10043522:	b25a      	sxtb	r2, r3
10043524:	4b13      	ldr	r3, [pc, #76]	@ (10043574 <ButtonsMenuSM_Event_Handler+0xd74>)
10043526:	701a      	strb	r2, [r3, #0]
						if(day < 0){
10043528:	4b12      	ldr	r3, [pc, #72]	@ (10043574 <ButtonsMenuSM_Event_Handler+0xd74>)
1004352a:	781b      	ldrb	r3, [r3, #0]
1004352c:	b25b      	sxtb	r3, r3
1004352e:	2b00      	cmp	r3, #0
10043530:	da49      	bge.n	100435c6 <ButtonsMenuSM_Event_Handler+0xdc6>
							day = 30;
10043532:	4b10      	ldr	r3, [pc, #64]	@ (10043574 <ButtonsMenuSM_Event_Handler+0xd74>)
10043534:	221e      	movs	r2, #30
10043536:	701a      	strb	r2, [r3, #0]
						}
						break;
10043538:	e045      	b.n	100435c6 <ButtonsMenuSM_Event_Handler+0xdc6>
					case 2:
						hour--;
1004353a:	4b0d      	ldr	r3, [pc, #52]	@ (10043570 <ButtonsMenuSM_Event_Handler+0xd70>)
1004353c:	781b      	ldrb	r3, [r3, #0]
1004353e:	b25b      	sxtb	r3, r3
10043540:	b2db      	uxtb	r3, r3
10043542:	3b01      	subs	r3, #1
10043544:	b2db      	uxtb	r3, r3
10043546:	b25a      	sxtb	r2, r3
10043548:	4b09      	ldr	r3, [pc, #36]	@ (10043570 <ButtonsMenuSM_Event_Handler+0xd70>)
1004354a:	701a      	strb	r2, [r3, #0]
						if(hour < 0){
1004354c:	4b08      	ldr	r3, [pc, #32]	@ (10043570 <ButtonsMenuSM_Event_Handler+0xd70>)
1004354e:	781b      	ldrb	r3, [r3, #0]
10043550:	b25b      	sxtb	r3, r3
10043552:	2b00      	cmp	r3, #0
10043554:	da39      	bge.n	100435ca <ButtonsMenuSM_Event_Handler+0xdca>
							hour = 23;
10043556:	4b06      	ldr	r3, [pc, #24]	@ (10043570 <ButtonsMenuSM_Event_Handler+0xd70>)
10043558:	2217      	movs	r2, #23
1004355a:	701a      	strb	r2, [r3, #0]
						}
						break;
1004355c:	e035      	b.n	100435ca <ButtonsMenuSM_Event_Handler+0xdca>
1004355e:	46c0      	nop			@ (mov r8, r8)
10043560:	200003a0 	.word	0x200003a0
10043564:	2000039e 	.word	0x2000039e
10043568:	2000039f 	.word	0x2000039f
1004356c:	200003b1 	.word	0x200003b1
10043570:	200003b2 	.word	0x200003b2
10043574:	200003b3 	.word	0x200003b3
10043578:	200003b4 	.word	0x200003b4
					case 3:
						minute--;
1004357c:	4bcf      	ldr	r3, [pc, #828]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
1004357e:	781b      	ldrb	r3, [r3, #0]
10043580:	b25b      	sxtb	r3, r3
10043582:	b2db      	uxtb	r3, r3
10043584:	3b01      	subs	r3, #1
10043586:	b2db      	uxtb	r3, r3
10043588:	b25a      	sxtb	r2, r3
1004358a:	4bcc      	ldr	r3, [pc, #816]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
1004358c:	701a      	strb	r2, [r3, #0]
						if(minute < 0){
1004358e:	4bcb      	ldr	r3, [pc, #812]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
10043590:	781b      	ldrb	r3, [r3, #0]
10043592:	b25b      	sxtb	r3, r3
10043594:	2b00      	cmp	r3, #0
10043596:	da1a      	bge.n	100435ce <ButtonsMenuSM_Event_Handler+0xdce>
							minute = 59;
10043598:	4bc8      	ldr	r3, [pc, #800]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
1004359a:	223b      	movs	r2, #59	@ 0x3b
1004359c:	701a      	strb	r2, [r3, #0]
							hour--;
1004359e:	4bc8      	ldr	r3, [pc, #800]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100435a0:	781b      	ldrb	r3, [r3, #0]
100435a2:	b25b      	sxtb	r3, r3
100435a4:	b2db      	uxtb	r3, r3
100435a6:	3b01      	subs	r3, #1
100435a8:	b2db      	uxtb	r3, r3
100435aa:	b25a      	sxtb	r2, r3
100435ac:	4bc4      	ldr	r3, [pc, #784]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100435ae:	701a      	strb	r2, [r3, #0]
							if(hour < 0){
100435b0:	4bc3      	ldr	r3, [pc, #780]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100435b2:	781b      	ldrb	r3, [r3, #0]
100435b4:	b25b      	sxtb	r3, r3
100435b6:	2b00      	cmp	r3, #0
100435b8:	da09      	bge.n	100435ce <ButtonsMenuSM_Event_Handler+0xdce>
								hour = 23;
100435ba:	4bc1      	ldr	r3, [pc, #772]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100435bc:	2217      	movs	r2, #23
100435be:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
100435c0:	e005      	b.n	100435ce <ButtonsMenuSM_Event_Handler+0xdce>
						break;
100435c2:	46c0      	nop			@ (mov r8, r8)
100435c4:	e004      	b.n	100435d0 <ButtonsMenuSM_Event_Handler+0xdd0>
						break;
100435c6:	46c0      	nop			@ (mov r8, r8)
100435c8:	e002      	b.n	100435d0 <ButtonsMenuSM_Event_Handler+0xdd0>
						break;
100435ca:	46c0      	nop			@ (mov r8, r8)
100435cc:	e000      	b.n	100435d0 <ButtonsMenuSM_Event_Handler+0xdd0>
						break;
100435ce:	46c0      	nop			@ (mov r8, r8)
					}
					DrawSetTime(cursorpos, month+1, day+1, hour, minute);
100435d0:	4bbc      	ldr	r3, [pc, #752]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
100435d2:	7818      	ldrb	r0, [r3, #0]
100435d4:	4bbc      	ldr	r3, [pc, #752]	@ (100438c8 <ButtonsMenuSM_Event_Handler+0x10c8>)
100435d6:	781b      	ldrb	r3, [r3, #0]
100435d8:	b25b      	sxtb	r3, r3
100435da:	b2db      	uxtb	r3, r3
100435dc:	3301      	adds	r3, #1
100435de:	b2d9      	uxtb	r1, r3
100435e0:	4bba      	ldr	r3, [pc, #744]	@ (100438cc <ButtonsMenuSM_Event_Handler+0x10cc>)
100435e2:	781b      	ldrb	r3, [r3, #0]
100435e4:	b25b      	sxtb	r3, r3
100435e6:	b2db      	uxtb	r3, r3
100435e8:	3301      	adds	r3, #1
100435ea:	b2da      	uxtb	r2, r3
100435ec:	4bb4      	ldr	r3, [pc, #720]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100435ee:	781b      	ldrb	r3, [r3, #0]
100435f0:	b25b      	sxtb	r3, r3
100435f2:	b2dc      	uxtb	r4, r3
100435f4:	4bb1      	ldr	r3, [pc, #708]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
100435f6:	781b      	ldrb	r3, [r3, #0]
100435f8:	b25b      	sxtb	r3, r3
100435fa:	b2db      	uxtb	r3, r3
100435fc:	9300      	str	r3, [sp, #0]
100435fe:	0023      	movs	r3, r4
10043600:	f7fe fe92 	bl	10042328 <DrawSetTime>
					break;
10043604:	e2b7      	b.n	10043b76 <ButtonsMenuSM_Event_Handler+0x1376>
				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
10043606:	1d3b      	adds	r3, r7, #4
10043608:	885b      	ldrh	r3, [r3, #2]
1004360a:	001a      	movs	r2, r3
1004360c:	2380      	movs	r3, #128	@ 0x80
1004360e:	011b      	lsls	r3, r3, #4
10043610:	4013      	ands	r3, r2
10043612:	d100      	bne.n	10043616 <ButtonsMenuSM_Event_Handler+0xe16>
10043614:	e09b      	b.n	1004374e <ButtonsMenuSM_Event_Handler+0xf4e>
10043616:	1d3b      	adds	r3, r7, #4
10043618:	885b      	ldrh	r3, [r3, #2]
1004361a:	001a      	movs	r2, r3
1004361c:	2308      	movs	r3, #8
1004361e:	4013      	ands	r3, r2
10043620:	d000      	beq.n	10043624 <ButtonsMenuSM_Event_Handler+0xe24>
10043622:	e094      	b.n	1004374e <ButtonsMenuSM_Event_Handler+0xf4e>
					switch(cursorpos){
10043624:	4ba7      	ldr	r3, [pc, #668]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
10043626:	781b      	ldrb	r3, [r3, #0]
10043628:	2b03      	cmp	r3, #3
1004362a:	d048      	beq.n	100436be <ButtonsMenuSM_Event_Handler+0xebe>
1004362c:	dd00      	ble.n	10043630 <ButtonsMenuSM_Event_Handler+0xe30>
1004362e:	e073      	b.n	10043718 <ButtonsMenuSM_Event_Handler+0xf18>
10043630:	2b02      	cmp	r3, #2
10043632:	d02f      	beq.n	10043694 <ButtonsMenuSM_Event_Handler+0xe94>
10043634:	dc70      	bgt.n	10043718 <ButtonsMenuSM_Event_Handler+0xf18>
10043636:	2b00      	cmp	r3, #0
10043638:	d002      	beq.n	10043640 <ButtonsMenuSM_Event_Handler+0xe40>
1004363a:	2b01      	cmp	r3, #1
1004363c:	d015      	beq.n	1004366a <ButtonsMenuSM_Event_Handler+0xe6a>
1004363e:	e06b      	b.n	10043718 <ButtonsMenuSM_Event_Handler+0xf18>
					case 0:
						month++;
10043640:	4ba1      	ldr	r3, [pc, #644]	@ (100438c8 <ButtonsMenuSM_Event_Handler+0x10c8>)
10043642:	781b      	ldrb	r3, [r3, #0]
10043644:	b25b      	sxtb	r3, r3
10043646:	b2db      	uxtb	r3, r3
10043648:	3301      	adds	r3, #1
1004364a:	b2db      	uxtb	r3, r3
1004364c:	b25a      	sxtb	r2, r3
1004364e:	4b9e      	ldr	r3, [pc, #632]	@ (100438c8 <ButtonsMenuSM_Event_Handler+0x10c8>)
10043650:	701a      	strb	r2, [r3, #0]
						month %= 12;
10043652:	4b9d      	ldr	r3, [pc, #628]	@ (100438c8 <ButtonsMenuSM_Event_Handler+0x10c8>)
10043654:	781b      	ldrb	r3, [r3, #0]
10043656:	b25b      	sxtb	r3, r3
10043658:	210c      	movs	r1, #12
1004365a:	0018      	movs	r0, r3
1004365c:	f7fc ff60 	bl	10040520 <__aeabi_idivmod>
10043660:	000b      	movs	r3, r1
10043662:	b25a      	sxtb	r2, r3
10043664:	4b98      	ldr	r3, [pc, #608]	@ (100438c8 <ButtonsMenuSM_Event_Handler+0x10c8>)
10043666:	701a      	strb	r2, [r3, #0]
						break;
10043668:	e056      	b.n	10043718 <ButtonsMenuSM_Event_Handler+0xf18>
					case 1:
						day++;
1004366a:	4b98      	ldr	r3, [pc, #608]	@ (100438cc <ButtonsMenuSM_Event_Handler+0x10cc>)
1004366c:	781b      	ldrb	r3, [r3, #0]
1004366e:	b25b      	sxtb	r3, r3
10043670:	b2db      	uxtb	r3, r3
10043672:	3301      	adds	r3, #1
10043674:	b2db      	uxtb	r3, r3
10043676:	b25a      	sxtb	r2, r3
10043678:	4b94      	ldr	r3, [pc, #592]	@ (100438cc <ButtonsMenuSM_Event_Handler+0x10cc>)
1004367a:	701a      	strb	r2, [r3, #0]
						day%= 31;
1004367c:	4b93      	ldr	r3, [pc, #588]	@ (100438cc <ButtonsMenuSM_Event_Handler+0x10cc>)
1004367e:	781b      	ldrb	r3, [r3, #0]
10043680:	b25b      	sxtb	r3, r3
10043682:	211f      	movs	r1, #31
10043684:	0018      	movs	r0, r3
10043686:	f7fc ff4b 	bl	10040520 <__aeabi_idivmod>
1004368a:	000b      	movs	r3, r1
1004368c:	b25a      	sxtb	r2, r3
1004368e:	4b8f      	ldr	r3, [pc, #572]	@ (100438cc <ButtonsMenuSM_Event_Handler+0x10cc>)
10043690:	701a      	strb	r2, [r3, #0]
						break;
10043692:	e041      	b.n	10043718 <ButtonsMenuSM_Event_Handler+0xf18>
					case 2:
						hour++;
10043694:	4b8a      	ldr	r3, [pc, #552]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
10043696:	781b      	ldrb	r3, [r3, #0]
10043698:	b25b      	sxtb	r3, r3
1004369a:	b2db      	uxtb	r3, r3
1004369c:	3301      	adds	r3, #1
1004369e:	b2db      	uxtb	r3, r3
100436a0:	b25a      	sxtb	r2, r3
100436a2:	4b87      	ldr	r3, [pc, #540]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100436a4:	701a      	strb	r2, [r3, #0]
						hour %= 24;
100436a6:	4b86      	ldr	r3, [pc, #536]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100436a8:	781b      	ldrb	r3, [r3, #0]
100436aa:	b25b      	sxtb	r3, r3
100436ac:	2118      	movs	r1, #24
100436ae:	0018      	movs	r0, r3
100436b0:	f7fc ff36 	bl	10040520 <__aeabi_idivmod>
100436b4:	000b      	movs	r3, r1
100436b6:	b25a      	sxtb	r2, r3
100436b8:	4b81      	ldr	r3, [pc, #516]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100436ba:	701a      	strb	r2, [r3, #0]
						break;
100436bc:	e02c      	b.n	10043718 <ButtonsMenuSM_Event_Handler+0xf18>
					case 3:
						minute++;
100436be:	4b7f      	ldr	r3, [pc, #508]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
100436c0:	781b      	ldrb	r3, [r3, #0]
100436c2:	b25b      	sxtb	r3, r3
100436c4:	b2db      	uxtb	r3, r3
100436c6:	3301      	adds	r3, #1
100436c8:	b2db      	uxtb	r3, r3
100436ca:	b25a      	sxtb	r2, r3
100436cc:	4b7b      	ldr	r3, [pc, #492]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
100436ce:	701a      	strb	r2, [r3, #0]
						minute%=60;
100436d0:	4b7a      	ldr	r3, [pc, #488]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
100436d2:	781b      	ldrb	r3, [r3, #0]
100436d4:	b25b      	sxtb	r3, r3
100436d6:	213c      	movs	r1, #60	@ 0x3c
100436d8:	0018      	movs	r0, r3
100436da:	f7fc ff21 	bl	10040520 <__aeabi_idivmod>
100436de:	000b      	movs	r3, r1
100436e0:	b25a      	sxtb	r2, r3
100436e2:	4b76      	ldr	r3, [pc, #472]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
100436e4:	701a      	strb	r2, [r3, #0]
						if(minute == 0){
100436e6:	4b75      	ldr	r3, [pc, #468]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
100436e8:	781b      	ldrb	r3, [r3, #0]
100436ea:	b25b      	sxtb	r3, r3
100436ec:	2b00      	cmp	r3, #0
100436ee:	d113      	bne.n	10043718 <ButtonsMenuSM_Event_Handler+0xf18>
							hour++;
100436f0:	4b73      	ldr	r3, [pc, #460]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100436f2:	781b      	ldrb	r3, [r3, #0]
100436f4:	b25b      	sxtb	r3, r3
100436f6:	b2db      	uxtb	r3, r3
100436f8:	3301      	adds	r3, #1
100436fa:	b2db      	uxtb	r3, r3
100436fc:	b25a      	sxtb	r2, r3
100436fe:	4b70      	ldr	r3, [pc, #448]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
10043700:	701a      	strb	r2, [r3, #0]
							hour %= 24;
10043702:	4b6f      	ldr	r3, [pc, #444]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
10043704:	781b      	ldrb	r3, [r3, #0]
10043706:	b25b      	sxtb	r3, r3
10043708:	2118      	movs	r1, #24
1004370a:	0018      	movs	r0, r3
1004370c:	f7fc ff08 	bl	10040520 <__aeabi_idivmod>
10043710:	000b      	movs	r3, r1
10043712:	b25a      	sxtb	r2, r3
10043714:	4b6a      	ldr	r3, [pc, #424]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
10043716:	701a      	strb	r2, [r3, #0]
						}
					}
					DrawSetTime(cursorpos, month+1, day+1, hour, minute);
10043718:	4b6a      	ldr	r3, [pc, #424]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
1004371a:	7818      	ldrb	r0, [r3, #0]
1004371c:	4b6a      	ldr	r3, [pc, #424]	@ (100438c8 <ButtonsMenuSM_Event_Handler+0x10c8>)
1004371e:	781b      	ldrb	r3, [r3, #0]
10043720:	b25b      	sxtb	r3, r3
10043722:	b2db      	uxtb	r3, r3
10043724:	3301      	adds	r3, #1
10043726:	b2d9      	uxtb	r1, r3
10043728:	4b68      	ldr	r3, [pc, #416]	@ (100438cc <ButtonsMenuSM_Event_Handler+0x10cc>)
1004372a:	781b      	ldrb	r3, [r3, #0]
1004372c:	b25b      	sxtb	r3, r3
1004372e:	b2db      	uxtb	r3, r3
10043730:	3301      	adds	r3, #1
10043732:	b2da      	uxtb	r2, r3
10043734:	4b62      	ldr	r3, [pc, #392]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
10043736:	781b      	ldrb	r3, [r3, #0]
10043738:	b25b      	sxtb	r3, r3
1004373a:	b2dc      	uxtb	r4, r3
1004373c:	4b5f      	ldr	r3, [pc, #380]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
1004373e:	781b      	ldrb	r3, [r3, #0]
10043740:	b25b      	sxtb	r3, r3
10043742:	b2db      	uxtb	r3, r3
10043744:	9300      	str	r3, [sp, #0]
10043746:	0023      	movs	r3, r4
10043748:	f7fe fdee 	bl	10042328 <DrawSetTime>
1004374c:	e06b      	b.n	10043826 <ButtonsMenuSM_Event_Handler+0x1026>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
1004374e:	1d3b      	adds	r3, r7, #4
10043750:	885b      	ldrh	r3, [r3, #2]
10043752:	001a      	movs	r2, r3
10043754:	2380      	movs	r3, #128	@ 0x80
10043756:	015b      	lsls	r3, r3, #5
10043758:	4013      	ands	r3, r2
1004375a:	d02d      	beq.n	100437b8 <ButtonsMenuSM_Event_Handler+0xfb8>
1004375c:	1d3b      	adds	r3, r7, #4
1004375e:	885b      	ldrh	r3, [r3, #2]
10043760:	001a      	movs	r2, r3
10043762:	2310      	movs	r3, #16
10043764:	4013      	ands	r3, r2
10043766:	d127      	bne.n	100437b8 <ButtonsMenuSM_Event_Handler+0xfb8>
					cursorpos--;
10043768:	4b56      	ldr	r3, [pc, #344]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
1004376a:	781b      	ldrb	r3, [r3, #0]
1004376c:	3b01      	subs	r3, #1
1004376e:	b2da      	uxtb	r2, r3
10043770:	4b54      	ldr	r3, [pc, #336]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
10043772:	701a      	strb	r2, [r3, #0]
					if(cursorpos == 255){
10043774:	4b53      	ldr	r3, [pc, #332]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
10043776:	781b      	ldrb	r3, [r3, #0]
10043778:	2bff      	cmp	r3, #255	@ 0xff
1004377a:	d102      	bne.n	10043782 <ButtonsMenuSM_Event_Handler+0xf82>
						cursorpos = 3;
1004377c:	4b51      	ldr	r3, [pc, #324]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
1004377e:	2203      	movs	r2, #3
10043780:	701a      	strb	r2, [r3, #0]
					}
					DrawSetTime(cursorpos, month+1, day+1, hour, minute);
10043782:	4b50      	ldr	r3, [pc, #320]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
10043784:	7818      	ldrb	r0, [r3, #0]
10043786:	4b50      	ldr	r3, [pc, #320]	@ (100438c8 <ButtonsMenuSM_Event_Handler+0x10c8>)
10043788:	781b      	ldrb	r3, [r3, #0]
1004378a:	b25b      	sxtb	r3, r3
1004378c:	b2db      	uxtb	r3, r3
1004378e:	3301      	adds	r3, #1
10043790:	b2d9      	uxtb	r1, r3
10043792:	4b4e      	ldr	r3, [pc, #312]	@ (100438cc <ButtonsMenuSM_Event_Handler+0x10cc>)
10043794:	781b      	ldrb	r3, [r3, #0]
10043796:	b25b      	sxtb	r3, r3
10043798:	b2db      	uxtb	r3, r3
1004379a:	3301      	adds	r3, #1
1004379c:	b2da      	uxtb	r2, r3
1004379e:	4b48      	ldr	r3, [pc, #288]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100437a0:	781b      	ldrb	r3, [r3, #0]
100437a2:	b25b      	sxtb	r3, r3
100437a4:	b2dc      	uxtb	r4, r3
100437a6:	4b45      	ldr	r3, [pc, #276]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
100437a8:	781b      	ldrb	r3, [r3, #0]
100437aa:	b25b      	sxtb	r3, r3
100437ac:	b2db      	uxtb	r3, r3
100437ae:	9300      	str	r3, [sp, #0]
100437b0:	0023      	movs	r3, r4
100437b2:	f7fe fdb9 	bl	10042328 <DrawSetTime>
100437b6:	e036      	b.n	10043826 <ButtonsMenuSM_Event_Handler+0x1026>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
100437b8:	1d3b      	adds	r3, r7, #4
100437ba:	885b      	ldrh	r3, [r3, #2]
100437bc:	001a      	movs	r2, r3
100437be:	2380      	movs	r3, #128	@ 0x80
100437c0:	019b      	lsls	r3, r3, #6
100437c2:	4013      	ands	r3, r2
100437c4:	d100      	bne.n	100437c8 <ButtonsMenuSM_Event_Handler+0xfc8>
100437c6:	e1d3      	b.n	10043b70 <ButtonsMenuSM_Event_Handler+0x1370>
100437c8:	1d3b      	adds	r3, r7, #4
100437ca:	885b      	ldrh	r3, [r3, #2]
100437cc:	001a      	movs	r2, r3
100437ce:	2320      	movs	r3, #32
100437d0:	4013      	ands	r3, r2
100437d2:	d000      	beq.n	100437d6 <ButtonsMenuSM_Event_Handler+0xfd6>
100437d4:	e1cc      	b.n	10043b70 <ButtonsMenuSM_Event_Handler+0x1370>
					cursorpos++;
100437d6:	4b3b      	ldr	r3, [pc, #236]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
100437d8:	781b      	ldrb	r3, [r3, #0]
100437da:	3301      	adds	r3, #1
100437dc:	b2da      	uxtb	r2, r3
100437de:	4b39      	ldr	r3, [pc, #228]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
100437e0:	701a      	strb	r2, [r3, #0]
					cursorpos %= 4;
100437e2:	4b38      	ldr	r3, [pc, #224]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
100437e4:	781b      	ldrb	r3, [r3, #0]
100437e6:	2203      	movs	r2, #3
100437e8:	4013      	ands	r3, r2
100437ea:	b2da      	uxtb	r2, r3
100437ec:	4b35      	ldr	r3, [pc, #212]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
100437ee:	701a      	strb	r2, [r3, #0]
					DrawSetTime(cursorpos, month+1, day+1, hour, minute);
100437f0:	4b34      	ldr	r3, [pc, #208]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
100437f2:	7818      	ldrb	r0, [r3, #0]
100437f4:	4b34      	ldr	r3, [pc, #208]	@ (100438c8 <ButtonsMenuSM_Event_Handler+0x10c8>)
100437f6:	781b      	ldrb	r3, [r3, #0]
100437f8:	b25b      	sxtb	r3, r3
100437fa:	b2db      	uxtb	r3, r3
100437fc:	3301      	adds	r3, #1
100437fe:	b2d9      	uxtb	r1, r3
10043800:	4b32      	ldr	r3, [pc, #200]	@ (100438cc <ButtonsMenuSM_Event_Handler+0x10cc>)
10043802:	781b      	ldrb	r3, [r3, #0]
10043804:	b25b      	sxtb	r3, r3
10043806:	b2db      	uxtb	r3, r3
10043808:	3301      	adds	r3, #1
1004380a:	b2da      	uxtb	r2, r3
1004380c:	4b2c      	ldr	r3, [pc, #176]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
1004380e:	781b      	ldrb	r3, [r3, #0]
10043810:	b25b      	sxtb	r3, r3
10043812:	b2dc      	uxtb	r4, r3
10043814:	4b29      	ldr	r3, [pc, #164]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
10043816:	781b      	ldrb	r3, [r3, #0]
10043818:	b25b      	sxtb	r3, r3
1004381a:	b2db      	uxtb	r3, r3
1004381c:	9300      	str	r3, [sp, #0]
1004381e:	0023      	movs	r3, r4
10043820:	f7fe fd82 	bl	10042328 <DrawSetTime>
				}
			}
			break;
10043824:	e1a4      	b.n	10043b70 <ButtonsMenuSM_Event_Handler+0x1370>
10043826:	e1a3      	b.n	10043b70 <ButtonsMenuSM_Event_Handler+0x1370>
		case options:
			if(event.status == EVENT_ENTRY){
10043828:	1d3b      	adds	r3, r7, #4
1004382a:	781b      	ldrb	r3, [r3, #0]
1004382c:	b25b      	sxtb	r3, r3
1004382e:	2b02      	cmp	r3, #2
10043830:	d10b      	bne.n	1004384a <ButtonsMenuSM_Event_Handler+0x104a>
				cursorpos = 0;
10043832:	4b24      	ldr	r3, [pc, #144]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
10043834:	2200      	movs	r2, #0
10043836:	701a      	strb	r2, [r3, #0]

				DrawOptions(cursorpos, FLASH_GetDutyCycle());
10043838:	4b22      	ldr	r3, [pc, #136]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
1004383a:	781c      	ldrb	r4, [r3, #0]
1004383c:	f001 f8ae 	bl	1004499c <FLASH_GetDutyCycle>
10043840:	0003      	movs	r3, r0
10043842:	0019      	movs	r1, r3
10043844:	0020      	movs	r0, r4
10043846:	f7fe fd15 	bl	10042274 <DrawOptions>
			}
			if(event.status == EVENT_BUTTONS){
1004384a:	1d3b      	adds	r3, r7, #4
1004384c:	781b      	ldrb	r3, [r3, #0]
1004384e:	b25b      	sxtb	r3, r3
10043850:	2b04      	cmp	r3, #4
10043852:	d000      	beq.n	10043856 <ButtonsMenuSM_Event_Handler+0x1056>
10043854:	e18e      	b.n	10043b74 <ButtonsMenuSM_Event_Handler+0x1374>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10043856:	1d3b      	adds	r3, r7, #4
10043858:	885b      	ldrh	r3, [r3, #2]
1004385a:	001a      	movs	r2, r3
1004385c:	2380      	movs	r3, #128	@ 0x80
1004385e:	005b      	lsls	r3, r3, #1
10043860:	4013      	ands	r3, r2
10043862:	d00e      	beq.n	10043882 <ButtonsMenuSM_Event_Handler+0x1082>
10043864:	1d3b      	adds	r3, r7, #4
10043866:	885b      	ldrh	r3, [r3, #2]
10043868:	001a      	movs	r2, r3
1004386a:	2301      	movs	r3, #1
1004386c:	4013      	ands	r3, r2
1004386e:	d108      	bne.n	10043882 <ButtonsMenuSM_Event_Handler+0x1082>
					//discountprintf("moving to main");
					nextstate = main;
10043870:	2326      	movs	r3, #38	@ 0x26
10043872:	18fb      	adds	r3, r7, r3
10043874:	2200      	movs	r2, #0
10043876:	701a      	strb	r2, [r3, #0]
					transition = 1;
10043878:	2327      	movs	r3, #39	@ 0x27
1004387a:	18fb      	adds	r3, r7, r3
1004387c:	2201      	movs	r2, #1
1004387e:	701a      	strb	r2, [r3, #0]
10043880:	e16b      	b.n	10043b5a <ButtonsMenuSM_Event_Handler+0x135a>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10043882:	1d3b      	adds	r3, r7, #4
10043884:	885b      	ldrh	r3, [r3, #2]
10043886:	001a      	movs	r2, r3
10043888:	2380      	movs	r3, #128	@ 0x80
1004388a:	009b      	lsls	r3, r3, #2
1004388c:	4013      	ands	r3, r2
1004388e:	d01f      	beq.n	100438d0 <ButtonsMenuSM_Event_Handler+0x10d0>
10043890:	1d3b      	adds	r3, r7, #4
10043892:	885b      	ldrh	r3, [r3, #2]
10043894:	001a      	movs	r2, r3
10043896:	2302      	movs	r3, #2
10043898:	4013      	ands	r3, r2
1004389a:	d119      	bne.n	100438d0 <ButtonsMenuSM_Event_Handler+0x10d0>
					//discountprintf("moving to main");
					if(cursorpos == 2){
1004389c:	4b09      	ldr	r3, [pc, #36]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
1004389e:	781b      	ldrb	r3, [r3, #0]
100438a0:	2b02      	cmp	r3, #2
100438a2:	d101      	bne.n	100438a8 <ButtonsMenuSM_Event_Handler+0x10a8>
						FLASH_ClearSchedule();
100438a4:	f001 fa60 	bl	10044d68 <FLASH_ClearSchedule>
					}
					nextstate = main;
100438a8:	2326      	movs	r3, #38	@ 0x26
100438aa:	18fb      	adds	r3, r7, r3
100438ac:	2200      	movs	r2, #0
100438ae:	701a      	strb	r2, [r3, #0]
					transition = 1;
100438b0:	2327      	movs	r3, #39	@ 0x27
100438b2:	18fb      	adds	r3, r7, r3
100438b4:	2201      	movs	r2, #1
100438b6:	701a      	strb	r2, [r3, #0]
100438b8:	e14f      	b.n	10043b5a <ButtonsMenuSM_Event_Handler+0x135a>
100438ba:	46c0      	nop			@ (mov r8, r8)
100438bc:	200003b1 	.word	0x200003b1
100438c0:	200003b2 	.word	0x200003b2
100438c4:	2000039e 	.word	0x2000039e
100438c8:	200003b4 	.word	0x200003b4
100438cc:	200003b3 	.word	0x200003b3
				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
100438d0:	1d3b      	adds	r3, r7, #4
100438d2:	885b      	ldrh	r3, [r3, #2]
100438d4:	001a      	movs	r2, r3
100438d6:	2380      	movs	r3, #128	@ 0x80
100438d8:	00db      	lsls	r3, r3, #3
100438da:	4013      	ands	r3, r2
100438dc:	d01f      	beq.n	1004391e <ButtonsMenuSM_Event_Handler+0x111e>
100438de:	1d3b      	adds	r3, r7, #4
100438e0:	885b      	ldrh	r3, [r3, #2]
100438e2:	001a      	movs	r2, r3
100438e4:	2304      	movs	r3, #4
100438e6:	4013      	ands	r3, r2
100438e8:	d119      	bne.n	1004391e <ButtonsMenuSM_Event_Handler+0x111e>
					cursorpos++;
100438ea:	4bb5      	ldr	r3, [pc, #724]	@ (10043bc0 <ButtonsMenuSM_Event_Handler+0x13c0>)
100438ec:	781b      	ldrb	r3, [r3, #0]
100438ee:	3301      	adds	r3, #1
100438f0:	b2da      	uxtb	r2, r3
100438f2:	4bb3      	ldr	r3, [pc, #716]	@ (10043bc0 <ButtonsMenuSM_Event_Handler+0x13c0>)
100438f4:	701a      	strb	r2, [r3, #0]
					cursorpos %= 3;
100438f6:	4bb2      	ldr	r3, [pc, #712]	@ (10043bc0 <ButtonsMenuSM_Event_Handler+0x13c0>)
100438f8:	781b      	ldrb	r3, [r3, #0]
100438fa:	2103      	movs	r1, #3
100438fc:	0018      	movs	r0, r3
100438fe:	f7fc fd25 	bl	1004034c <__aeabi_uidivmod>
10043902:	000b      	movs	r3, r1
10043904:	b2da      	uxtb	r2, r3
10043906:	4bae      	ldr	r3, [pc, #696]	@ (10043bc0 <ButtonsMenuSM_Event_Handler+0x13c0>)
10043908:	701a      	strb	r2, [r3, #0]
					DrawOptions(cursorpos, FLASH_GetDutyCycle());
1004390a:	4bad      	ldr	r3, [pc, #692]	@ (10043bc0 <ButtonsMenuSM_Event_Handler+0x13c0>)
1004390c:	781c      	ldrb	r4, [r3, #0]
1004390e:	f001 f845 	bl	1004499c <FLASH_GetDutyCycle>
10043912:	0003      	movs	r3, r0
10043914:	0019      	movs	r1, r3
10043916:	0020      	movs	r0, r4
10043918:	f7fe fcac 	bl	10042274 <DrawOptions>
1004391c:	e11d      	b.n	10043b5a <ButtonsMenuSM_Event_Handler+0x135a>
				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
1004391e:	1d3b      	adds	r3, r7, #4
10043920:	885b      	ldrh	r3, [r3, #2]
10043922:	001a      	movs	r2, r3
10043924:	2380      	movs	r3, #128	@ 0x80
10043926:	011b      	lsls	r3, r3, #4
10043928:	4013      	ands	r3, r2
1004392a:	d01c      	beq.n	10043966 <ButtonsMenuSM_Event_Handler+0x1166>
1004392c:	1d3b      	adds	r3, r7, #4
1004392e:	885b      	ldrh	r3, [r3, #2]
10043930:	001a      	movs	r2, r3
10043932:	2308      	movs	r3, #8
10043934:	4013      	ands	r3, r2
10043936:	d116      	bne.n	10043966 <ButtonsMenuSM_Event_Handler+0x1166>
					cursorpos--;
10043938:	4ba1      	ldr	r3, [pc, #644]	@ (10043bc0 <ButtonsMenuSM_Event_Handler+0x13c0>)
1004393a:	781b      	ldrb	r3, [r3, #0]
1004393c:	3b01      	subs	r3, #1
1004393e:	b2da      	uxtb	r2, r3
10043940:	4b9f      	ldr	r3, [pc, #636]	@ (10043bc0 <ButtonsMenuSM_Event_Handler+0x13c0>)
10043942:	701a      	strb	r2, [r3, #0]
					if(cursorpos == 255){
10043944:	4b9e      	ldr	r3, [pc, #632]	@ (10043bc0 <ButtonsMenuSM_Event_Handler+0x13c0>)
10043946:	781b      	ldrb	r3, [r3, #0]
10043948:	2bff      	cmp	r3, #255	@ 0xff
1004394a:	d102      	bne.n	10043952 <ButtonsMenuSM_Event_Handler+0x1152>
						cursorpos = 2;
1004394c:	4b9c      	ldr	r3, [pc, #624]	@ (10043bc0 <ButtonsMenuSM_Event_Handler+0x13c0>)
1004394e:	2202      	movs	r2, #2
10043950:	701a      	strb	r2, [r3, #0]
					}
					DrawOptions(cursorpos, FLASH_GetDutyCycle());
10043952:	4b9b      	ldr	r3, [pc, #620]	@ (10043bc0 <ButtonsMenuSM_Event_Handler+0x13c0>)
10043954:	781c      	ldrb	r4, [r3, #0]
10043956:	f001 f821 	bl	1004499c <FLASH_GetDutyCycle>
1004395a:	0003      	movs	r3, r0
1004395c:	0019      	movs	r1, r3
1004395e:	0020      	movs	r0, r4
10043960:	f7fe fc88 	bl	10042274 <DrawOptions>
					break;
10043964:	e107      	b.n	10043b76 <ButtonsMenuSM_Event_Handler+0x1376>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10043966:	1d3b      	adds	r3, r7, #4
10043968:	885b      	ldrh	r3, [r3, #2]
1004396a:	001a      	movs	r2, r3
1004396c:	2380      	movs	r3, #128	@ 0x80
1004396e:	015b      	lsls	r3, r3, #5
10043970:	4013      	ands	r3, r2
10043972:	d100      	bne.n	10043976 <ButtonsMenuSM_Event_Handler+0x1176>
10043974:	e074      	b.n	10043a60 <ButtonsMenuSM_Event_Handler+0x1260>
10043976:	1d3b      	adds	r3, r7, #4
10043978:	885b      	ldrh	r3, [r3, #2]
1004397a:	001a      	movs	r2, r3
1004397c:	2310      	movs	r3, #16
1004397e:	4013      	ands	r3, r2
10043980:	d16e      	bne.n	10043a60 <ButtonsMenuSM_Event_Handler+0x1260>
					switch(cursorpos){
10043982:	4b8f      	ldr	r3, [pc, #572]	@ (10043bc0 <ButtonsMenuSM_Event_Handler+0x13c0>)
10043984:	781b      	ldrb	r3, [r3, #0]
10043986:	2b00      	cmp	r3, #0
10043988:	d002      	beq.n	10043990 <ButtonsMenuSM_Event_Handler+0x1190>
1004398a:	2b01      	cmp	r3, #1
1004398c:	d036      	beq.n	100439fc <ButtonsMenuSM_Event_Handler+0x11fc>
						LPUART_WriteTx(0x00);
						LPUART_WriteTx(accumulation);//checksum
						LPUART_WriteTx(0xEF);//start flag
						break;
					default:
						break;
1004398e:	e066      	b.n	10043a5e <ButtonsMenuSM_Event_Handler+0x125e>
						int8_t dc = FLASH_GetDutyCycle()-5;
10043990:	f001 f804 	bl	1004499c <FLASH_GetDutyCycle>
10043994:	0003      	movs	r3, r0
10043996:	3b05      	subs	r3, #5
10043998:	b2da      	uxtb	r2, r3
1004399a:	2424      	movs	r4, #36	@ 0x24
1004399c:	193b      	adds	r3, r7, r4
1004399e:	701a      	strb	r2, [r3, #0]
						if(dc < 0){
100439a0:	193b      	adds	r3, r7, r4
100439a2:	781b      	ldrb	r3, [r3, #0]
100439a4:	2b7f      	cmp	r3, #127	@ 0x7f
100439a6:	d915      	bls.n	100439d4 <ButtonsMenuSM_Event_Handler+0x11d4>
							dc = 0;
100439a8:	193b      	adds	r3, r7, r4
100439aa:	2200      	movs	r2, #0
100439ac:	701a      	strb	r2, [r3, #0]
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
100439ae:	f000 ffdf 	bl	10044970 <FLASH_GetVolume>
100439b2:	0003      	movs	r3, r0
100439b4:	001a      	movs	r2, r3
100439b6:	193b      	adds	r3, r7, r4
100439b8:	781b      	ldrb	r3, [r3, #0]
100439ba:	0019      	movs	r1, r3
100439bc:	0010      	movs	r0, r2
100439be:	f000 ff95 	bl	100448ec <FLASH_SetDCVol>
							DrawOptions(cursorpos, dc);
100439c2:	4b7f      	ldr	r3, [pc, #508]	@ (10043bc0 <ButtonsMenuSM_Event_Handler+0x13c0>)
100439c4:	781a      	ldrb	r2, [r3, #0]
100439c6:	193b      	adds	r3, r7, r4
100439c8:	781b      	ldrb	r3, [r3, #0]
100439ca:	0019      	movs	r1, r3
100439cc:	0010      	movs	r0, r2
100439ce:	f7fe fc51 	bl	10042274 <DrawOptions>
						break;
100439d2:	e044      	b.n	10043a5e <ButtonsMenuSM_Event_Handler+0x125e>
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
100439d4:	f000 ffcc 	bl	10044970 <FLASH_GetVolume>
100439d8:	0003      	movs	r3, r0
100439da:	001a      	movs	r2, r3
100439dc:	2424      	movs	r4, #36	@ 0x24
100439de:	193b      	adds	r3, r7, r4
100439e0:	781b      	ldrb	r3, [r3, #0]
100439e2:	0019      	movs	r1, r3
100439e4:	0010      	movs	r0, r2
100439e6:	f000 ff81 	bl	100448ec <FLASH_SetDCVol>
							DrawOptions(cursorpos, dc);
100439ea:	4b75      	ldr	r3, [pc, #468]	@ (10043bc0 <ButtonsMenuSM_Event_Handler+0x13c0>)
100439ec:	781a      	ldrb	r2, [r3, #0]
100439ee:	193b      	adds	r3, r7, r4
100439f0:	781b      	ldrb	r3, [r3, #0]
100439f2:	0019      	movs	r1, r3
100439f4:	0010      	movs	r0, r2
100439f6:	f7fe fc3d 	bl	10042274 <DrawOptions>
						break;
100439fa:	e030      	b.n	10043a5e <ButtonsMenuSM_Event_Handler+0x125e>
						uint8_t accumulation = 0;
100439fc:	2425      	movs	r4, #37	@ 0x25
100439fe:	193b      	adds	r3, r7, r4
10043a00:	2200      	movs	r2, #0
10043a02:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0x7E);//start flag
10043a04:	207e      	movs	r0, #126	@ 0x7e
10043a06:	f003 fab7 	bl	10046f78 <LPUART_WriteTx>
						accumulation += 0xFF;
10043a0a:	193b      	adds	r3, r7, r4
10043a0c:	193a      	adds	r2, r7, r4
10043a0e:	7812      	ldrb	r2, [r2, #0]
10043a10:	3a01      	subs	r2, #1
10043a12:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0xFF);//Version?
10043a14:	20ff      	movs	r0, #255	@ 0xff
10043a16:	f003 faaf 	bl	10046f78 <LPUART_WriteTx>
						accumulation += 0x06;
10043a1a:	193b      	adds	r3, r7, r4
10043a1c:	193a      	adds	r2, r7, r4
10043a1e:	7812      	ldrb	r2, [r2, #0]
10043a20:	3206      	adds	r2, #6
10043a22:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0x06);//length
10043a24:	2006      	movs	r0, #6
10043a26:	f003 faa7 	bl	10046f78 <LPUART_WriteTx>
						LPUART_WriteTx(0x02);//Previous track command
10043a2a:	2002      	movs	r0, #2
10043a2c:	f003 faa4 	bl	10046f78 <LPUART_WriteTx>
						accumulation += 0x02;
10043a30:	193b      	adds	r3, r7, r4
10043a32:	193a      	adds	r2, r7, r4
10043a34:	7812      	ldrb	r2, [r2, #0]
10043a36:	3202      	adds	r2, #2
10043a38:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0x00);
10043a3a:	2000      	movs	r0, #0
10043a3c:	f003 fa9c 	bl	10046f78 <LPUART_WriteTx>
						LPUART_WriteTx(0x00);
10043a40:	2000      	movs	r0, #0
10043a42:	f003 fa99 	bl	10046f78 <LPUART_WriteTx>
						LPUART_WriteTx(0x00);
10043a46:	2000      	movs	r0, #0
10043a48:	f003 fa96 	bl	10046f78 <LPUART_WriteTx>
						LPUART_WriteTx(accumulation);//checksum
10043a4c:	193b      	adds	r3, r7, r4
10043a4e:	781b      	ldrb	r3, [r3, #0]
10043a50:	0018      	movs	r0, r3
10043a52:	f003 fa91 	bl	10046f78 <LPUART_WriteTx>
						LPUART_WriteTx(0xEF);//start flag
10043a56:	20ef      	movs	r0, #239	@ 0xef
10043a58:	f003 fa8e 	bl	10046f78 <LPUART_WriteTx>
						break;
10043a5c:	46c0      	nop			@ (mov r8, r8)
					switch(cursorpos){
10043a5e:	e07c      	b.n	10043b5a <ButtonsMenuSM_Event_Handler+0x135a>
					}
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
10043a60:	1d3b      	adds	r3, r7, #4
10043a62:	885b      	ldrh	r3, [r3, #2]
10043a64:	001a      	movs	r2, r3
10043a66:	2380      	movs	r3, #128	@ 0x80
10043a68:	019b      	lsls	r3, r3, #6
10043a6a:	4013      	ands	r3, r2
10043a6c:	d100      	bne.n	10043a70 <ButtonsMenuSM_Event_Handler+0x1270>
10043a6e:	e081      	b.n	10043b74 <ButtonsMenuSM_Event_Handler+0x1374>
10043a70:	1d3b      	adds	r3, r7, #4
10043a72:	885b      	ldrh	r3, [r3, #2]
10043a74:	001a      	movs	r2, r3
10043a76:	2320      	movs	r3, #32
10043a78:	4013      	ands	r3, r2
10043a7a:	d000      	beq.n	10043a7e <ButtonsMenuSM_Event_Handler+0x127e>
10043a7c:	e07a      	b.n	10043b74 <ButtonsMenuSM_Event_Handler+0x1374>
					switch(cursorpos){
10043a7e:	4b50      	ldr	r3, [pc, #320]	@ (10043bc0 <ButtonsMenuSM_Event_Handler+0x13c0>)
10043a80:	781b      	ldrb	r3, [r3, #0]
10043a82:	2b00      	cmp	r3, #0
10043a84:	d002      	beq.n	10043a8c <ButtonsMenuSM_Event_Handler+0x128c>
10043a86:	2b01      	cmp	r3, #1
10043a88:	d036      	beq.n	10043af8 <ButtonsMenuSM_Event_Handler+0x12f8>
						LPUART_WriteTx(0x00);
						LPUART_WriteTx(accumulation);//checksum
						LPUART_WriteTx(0xEF);//start flag
						break;
					default:
						break;
10043a8a:	e066      	b.n	10043b5a <ButtonsMenuSM_Event_Handler+0x135a>
						uint8_t dc = FLASH_GetDutyCycle()+5;
10043a8c:	f000 ff86 	bl	1004499c <FLASH_GetDutyCycle>
10043a90:	0003      	movs	r3, r0
10043a92:	001a      	movs	r2, r3
10043a94:	2422      	movs	r4, #34	@ 0x22
10043a96:	193b      	adds	r3, r7, r4
10043a98:	3205      	adds	r2, #5
10043a9a:	701a      	strb	r2, [r3, #0]
						if(dc > 100){
10043a9c:	193b      	adds	r3, r7, r4
10043a9e:	781b      	ldrb	r3, [r3, #0]
10043aa0:	2b64      	cmp	r3, #100	@ 0x64
10043aa2:	d915      	bls.n	10043ad0 <ButtonsMenuSM_Event_Handler+0x12d0>
							dc = 100;
10043aa4:	193b      	adds	r3, r7, r4
10043aa6:	2264      	movs	r2, #100	@ 0x64
10043aa8:	701a      	strb	r2, [r3, #0]
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
10043aaa:	f000 ff61 	bl	10044970 <FLASH_GetVolume>
10043aae:	0003      	movs	r3, r0
10043ab0:	001a      	movs	r2, r3
10043ab2:	193b      	adds	r3, r7, r4
10043ab4:	781b      	ldrb	r3, [r3, #0]
10043ab6:	0019      	movs	r1, r3
10043ab8:	0010      	movs	r0, r2
10043aba:	f000 ff17 	bl	100448ec <FLASH_SetDCVol>
							DrawOptions(cursorpos, dc);
10043abe:	4b40      	ldr	r3, [pc, #256]	@ (10043bc0 <ButtonsMenuSM_Event_Handler+0x13c0>)
10043ac0:	781a      	ldrb	r2, [r3, #0]
10043ac2:	193b      	adds	r3, r7, r4
10043ac4:	781b      	ldrb	r3, [r3, #0]
10043ac6:	0019      	movs	r1, r3
10043ac8:	0010      	movs	r0, r2
10043aca:	f7fe fbd3 	bl	10042274 <DrawOptions>
						break;
10043ace:	e044      	b.n	10043b5a <ButtonsMenuSM_Event_Handler+0x135a>
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
10043ad0:	f000 ff4e 	bl	10044970 <FLASH_GetVolume>
10043ad4:	0003      	movs	r3, r0
10043ad6:	001a      	movs	r2, r3
10043ad8:	2422      	movs	r4, #34	@ 0x22
10043ada:	193b      	adds	r3, r7, r4
10043adc:	781b      	ldrb	r3, [r3, #0]
10043ade:	0019      	movs	r1, r3
10043ae0:	0010      	movs	r0, r2
10043ae2:	f000 ff03 	bl	100448ec <FLASH_SetDCVol>
							DrawOptions(cursorpos, dc);
10043ae6:	4b36      	ldr	r3, [pc, #216]	@ (10043bc0 <ButtonsMenuSM_Event_Handler+0x13c0>)
10043ae8:	781a      	ldrb	r2, [r3, #0]
10043aea:	193b      	adds	r3, r7, r4
10043aec:	781b      	ldrb	r3, [r3, #0]
10043aee:	0019      	movs	r1, r3
10043af0:	0010      	movs	r0, r2
10043af2:	f7fe fbbf 	bl	10042274 <DrawOptions>
						break;
10043af6:	e030      	b.n	10043b5a <ButtonsMenuSM_Event_Handler+0x135a>
						uint8_t accumulation = 0;
10043af8:	2423      	movs	r4, #35	@ 0x23
10043afa:	193b      	adds	r3, r7, r4
10043afc:	2200      	movs	r2, #0
10043afe:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0x7E);//start flag
10043b00:	207e      	movs	r0, #126	@ 0x7e
10043b02:	f003 fa39 	bl	10046f78 <LPUART_WriteTx>
						accumulation += 0xFF;
10043b06:	193b      	adds	r3, r7, r4
10043b08:	193a      	adds	r2, r7, r4
10043b0a:	7812      	ldrb	r2, [r2, #0]
10043b0c:	3a01      	subs	r2, #1
10043b0e:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0xFF);//Version?
10043b10:	20ff      	movs	r0, #255	@ 0xff
10043b12:	f003 fa31 	bl	10046f78 <LPUART_WriteTx>
						accumulation += 0x06;
10043b16:	193b      	adds	r3, r7, r4
10043b18:	193a      	adds	r2, r7, r4
10043b1a:	7812      	ldrb	r2, [r2, #0]
10043b1c:	3206      	adds	r2, #6
10043b1e:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0x06);//length
10043b20:	2006      	movs	r0, #6
10043b22:	f003 fa29 	bl	10046f78 <LPUART_WriteTx>
						LPUART_WriteTx(0x01);//next track command
10043b26:	2001      	movs	r0, #1
10043b28:	f003 fa26 	bl	10046f78 <LPUART_WriteTx>
						accumulation += 0x01;
10043b2c:	193b      	adds	r3, r7, r4
10043b2e:	193a      	adds	r2, r7, r4
10043b30:	7812      	ldrb	r2, [r2, #0]
10043b32:	3201      	adds	r2, #1
10043b34:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0x00);
10043b36:	2000      	movs	r0, #0
10043b38:	f003 fa1e 	bl	10046f78 <LPUART_WriteTx>
						LPUART_WriteTx(0x00);
10043b3c:	2000      	movs	r0, #0
10043b3e:	f003 fa1b 	bl	10046f78 <LPUART_WriteTx>
						LPUART_WriteTx(0x00);
10043b42:	2000      	movs	r0, #0
10043b44:	f003 fa18 	bl	10046f78 <LPUART_WriteTx>
						LPUART_WriteTx(accumulation);//checksum
10043b48:	193b      	adds	r3, r7, r4
10043b4a:	781b      	ldrb	r3, [r3, #0]
10043b4c:	0018      	movs	r0, r3
10043b4e:	f003 fa13 	bl	10046f78 <LPUART_WriteTx>
						LPUART_WriteTx(0xEF);//start flag
10043b52:	20ef      	movs	r0, #239	@ 0xef
10043b54:	f003 fa10 	bl	10046f78 <LPUART_WriteTx>
						break;
10043b58:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			break;
10043b5a:	e00b      	b.n	10043b74 <ButtonsMenuSM_Event_Handler+0x1374>
		default:
			break;
10043b5c:	46c0      	nop			@ (mov r8, r8)
10043b5e:	e00a      	b.n	10043b76 <ButtonsMenuSM_Event_Handler+0x1376>
			break;
10043b60:	46c0      	nop			@ (mov r8, r8)
10043b62:	e008      	b.n	10043b76 <ButtonsMenuSM_Event_Handler+0x1376>
			break;
10043b64:	46c0      	nop			@ (mov r8, r8)
10043b66:	e006      	b.n	10043b76 <ButtonsMenuSM_Event_Handler+0x1376>
			break;
10043b68:	46c0      	nop			@ (mov r8, r8)
10043b6a:	e004      	b.n	10043b76 <ButtonsMenuSM_Event_Handler+0x1376>
			break;
10043b6c:	46c0      	nop			@ (mov r8, r8)
10043b6e:	e002      	b.n	10043b76 <ButtonsMenuSM_Event_Handler+0x1376>
			break;
10043b70:	46c0      	nop			@ (mov r8, r8)
10043b72:	e000      	b.n	10043b76 <ButtonsMenuSM_Event_Handler+0x1376>
			break;
10043b74:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if(transition){
10043b76:	2327      	movs	r3, #39	@ 0x27
10043b78:	18fb      	adds	r3, r7, r3
10043b7a:	781b      	ldrb	r3, [r3, #0]
10043b7c:	2b00      	cmp	r3, #0
10043b7e:	d01a      	beq.n	10043bb6 <ButtonsMenuSM_Event_Handler+0x13b6>
		ButtonsMenuSM_Event_Handler((Event_t){EVENT_EXIT});
10043b80:	2110      	movs	r1, #16
10043b82:	187b      	adds	r3, r7, r1
10043b84:	2200      	movs	r2, #0
10043b86:	601a      	str	r2, [r3, #0]
10043b88:	187b      	adds	r3, r7, r1
10043b8a:	2203      	movs	r2, #3
10043b8c:	701a      	strb	r2, [r3, #0]
10043b8e:	187b      	adds	r3, r7, r1
10043b90:	6818      	ldr	r0, [r3, #0]
10043b92:	f7fe fe35 	bl	10042800 <ButtonsMenuSM_Event_Handler>
		BMState = nextstate;
10043b96:	4b0b      	ldr	r3, [pc, #44]	@ (10043bc4 <ButtonsMenuSM_Event_Handler+0x13c4>)
10043b98:	2226      	movs	r2, #38	@ 0x26
10043b9a:	18ba      	adds	r2, r7, r2
10043b9c:	7812      	ldrb	r2, [r2, #0]
10043b9e:	701a      	strb	r2, [r3, #0]
		ButtonsMenuSM_Event_Handler((Event_t){EVENT_ENTRY});
10043ba0:	210c      	movs	r1, #12
10043ba2:	187b      	adds	r3, r7, r1
10043ba4:	2200      	movs	r2, #0
10043ba6:	601a      	str	r2, [r3, #0]
10043ba8:	187b      	adds	r3, r7, r1
10043baa:	2202      	movs	r2, #2
10043bac:	701a      	strb	r2, [r3, #0]
10043bae:	187b      	adds	r3, r7, r1
10043bb0:	6818      	ldr	r0, [r3, #0]
10043bb2:	f7fe fe25 	bl	10042800 <ButtonsMenuSM_Event_Handler>
	}
    return 1;
10043bb6:	2301      	movs	r3, #1
}
10043bb8:	0018      	movs	r0, r3
10043bba:	46bd      	mov	sp, r7
10043bbc:	b00b      	add	sp, #44	@ 0x2c
10043bbe:	bd90      	pop	{r4, r7, pc}
10043bc0:	2000039e 	.word	0x2000039e
10043bc4:	2000039c 	.word	0x2000039c

10043bc8 <COMM_Event_Init>:
 * @Function: EVENT_COMM_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t COMM_Event_Init(FIFO Queue){
10043bc8:	b580      	push	{r7, lr}
10043bca:	b084      	sub	sp, #16
10043bcc:	af00      	add	r7, sp, #0
10043bce:	6078      	str	r0, [r7, #4]
	commSM = init;
10043bd0:	4b0c      	ldr	r3, [pc, #48]	@ (10043c04 <COMM_Event_Init+0x3c>)
10043bd2:	2200      	movs	r2, #0
10043bd4:	701a      	strb	r2, [r3, #0]
	COMMqueue = Queue;
10043bd6:	4b0c      	ldr	r3, [pc, #48]	@ (10043c08 <COMM_Event_Init+0x40>)
10043bd8:	687a      	ldr	r2, [r7, #4]
10043bda:	601a      	str	r2, [r3, #0]
	UARTs_Init();
10043bdc:	f003 f8c8 	bl	10046d70 <UARTs_Init>
	FLASH_Init();
10043be0:	f000 fe08 	bl	100447f4 <FLASH_Init>
	COMM_Event_Post((Event_t){EVENT_INIT, 0});
10043be4:	210c      	movs	r1, #12
10043be6:	187b      	adds	r3, r7, r1
10043be8:	2201      	movs	r2, #1
10043bea:	701a      	strb	r2, [r3, #0]
10043bec:	187b      	adds	r3, r7, r1
10043bee:	2200      	movs	r2, #0
10043bf0:	805a      	strh	r2, [r3, #2]
10043bf2:	187b      	adds	r3, r7, r1
10043bf4:	6818      	ldr	r0, [r3, #0]
10043bf6:	f000 f809 	bl	10043c0c <COMM_Event_Post>
	return INIT_OK;
10043bfa:	2301      	movs	r3, #1
}
10043bfc:	0018      	movs	r0, r3
10043bfe:	46bd      	mov	sp, r7
10043c00:	b004      	add	sp, #16
10043c02:	bd80      	pop	{r7, pc}
10043c04:	200003b5 	.word	0x200003b5
10043c08:	200003b8 	.word	0x200003b8

10043c0c <COMM_Event_Post>:

void COMM_Event_Post(Event_t event){
10043c0c:	b580      	push	{r7, lr}
10043c0e:	b082      	sub	sp, #8
10043c10:	af00      	add	r7, sp, #0
10043c12:	1d3b      	adds	r3, r7, #4
10043c14:	6018      	str	r0, [r3, #0]
	FIFO_Enqueue(COMMqueue, event);
10043c16:	4b05      	ldr	r3, [pc, #20]	@ (10043c2c <COMM_Event_Post+0x20>)
10043c18:	681a      	ldr	r2, [r3, #0]
10043c1a:	1d3b      	adds	r3, r7, #4
10043c1c:	6819      	ldr	r1, [r3, #0]
10043c1e:	0010      	movs	r0, r2
10043c20:	f000 fd53 	bl	100446ca <FIFO_Enqueue>
}
10043c24:	46c0      	nop			@ (mov r8, r8)
10043c26:	46bd      	mov	sp, r7
10043c28:	b002      	add	sp, #8
10043c2a:	bd80      	pop	{r7, pc}
10043c2c:	200003b8 	.word	0x200003b8

10043c30 <COMM_Event_Updater>:
 * @Function: EVENT_COMM_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the 
 * @param: none
 * @return: An event 
 */
Event_t COMM_Event_Updater(void){
10043c30:	b5f0      	push	{r4, r5, r6, r7, lr}
10043c32:	b087      	sub	sp, #28
10043c34:	af00      	add	r7, sp, #0
	uint8_t event = 0;
10043c36:	2317      	movs	r3, #23
10043c38:	18fb      	adds	r3, r7, r3
10043c3a:	2200      	movs	r2, #0
10043c3c:	701a      	strb	r2, [r3, #0]
    Event_t out = (Event_t){EVENT_NONE, 0};
10043c3e:	250c      	movs	r5, #12
10043c40:	197b      	adds	r3, r7, r5
10043c42:	2200      	movs	r2, #0
10043c44:	701a      	strb	r2, [r3, #0]
10043c46:	197b      	adds	r3, r7, r5
10043c48:	2200      	movs	r2, #0
10043c4a:	805a      	strh	r2, [r3, #2]
    char input = USART_ReadRx();
10043c4c:	2616      	movs	r6, #22
10043c4e:	19bc      	adds	r4, r7, r6
10043c50:	f003 f9dc 	bl	1004700c <USART_ReadRx>
10043c54:	0003      	movs	r3, r0
10043c56:	7023      	strb	r3, [r4, #0]
    if(input != UARTFAILED){
10043c58:	0031      	movs	r1, r6
10043c5a:	187b      	adds	r3, r7, r1
10043c5c:	781b      	ldrb	r3, [r3, #0]
10043c5e:	2b25      	cmp	r3, #37	@ 0x25
10043c60:	d00b      	beq.n	10043c7a <COMM_Event_Updater+0x4a>
    	event = 1;
10043c62:	2317      	movs	r3, #23
10043c64:	18fb      	adds	r3, r7, r3
10043c66:	2201      	movs	r2, #1
10043c68:	701a      	strb	r2, [r3, #0]
    	out.status = EVENT_USART;
10043c6a:	197b      	adds	r3, r7, r5
10043c6c:	2206      	movs	r2, #6
10043c6e:	701a      	strb	r2, [r3, #0]
    	out.data = (uint16_t)input;
10043c70:	187b      	adds	r3, r7, r1
10043c72:	781b      	ldrb	r3, [r3, #0]
10043c74:	b29a      	uxth	r2, r3
10043c76:	197b      	adds	r3, r7, r5
10043c78:	805a      	strh	r2, [r3, #2]
    }
    if(sendinglogs == 1){
10043c7a:	4b1f      	ldr	r3, [pc, #124]	@ (10043cf8 <COMM_Event_Updater+0xc8>)
10043c7c:	781b      	ldrb	r3, [r3, #0]
10043c7e:	2b01      	cmp	r3, #1
10043c80:	d115      	bne.n	10043cae <COMM_Event_Updater+0x7e>
    	if(USART_TxEmpty() || BLUETOOTH_BufferEmpty() == 1){
10043c82:	f003 fa77 	bl	10047174 <USART_TxEmpty>
10043c86:	1e03      	subs	r3, r0, #0
10043c88:	d104      	bne.n	10043c94 <COMM_Event_Updater+0x64>
10043c8a:	f7fe f9d1 	bl	10042030 <BLUETOOTH_BufferEmpty>
10043c8e:	0003      	movs	r3, r0
10043c90:	2b01      	cmp	r3, #1
10043c92:	d10c      	bne.n	10043cae <COMM_Event_Updater+0x7e>
    		FIFO_Enqueue(COMMqueue, (Event_t){EVENT_USART_READY, 0});
10043c94:	4b19      	ldr	r3, [pc, #100]	@ (10043cfc <COMM_Event_Updater+0xcc>)
10043c96:	681a      	ldr	r2, [r3, #0]
10043c98:	1d3b      	adds	r3, r7, #4
10043c9a:	2107      	movs	r1, #7
10043c9c:	7019      	strb	r1, [r3, #0]
10043c9e:	1d3b      	adds	r3, r7, #4
10043ca0:	2100      	movs	r1, #0
10043ca2:	8059      	strh	r1, [r3, #2]
10043ca4:	1d3b      	adds	r3, r7, #4
10043ca6:	6819      	ldr	r1, [r3, #0]
10043ca8:	0010      	movs	r0, r2
10043caa:	f000 fd0e 	bl	100446ca <FIFO_Enqueue>
    	}
    }
	if(event){FIFO_Enqueue(COMMqueue, out);}
10043cae:	2317      	movs	r3, #23
10043cb0:	18fb      	adds	r3, r7, r3
10043cb2:	781b      	ldrb	r3, [r3, #0]
10043cb4:	2b00      	cmp	r3, #0
10043cb6:	d007      	beq.n	10043cc8 <COMM_Event_Updater+0x98>
10043cb8:	4b10      	ldr	r3, [pc, #64]	@ (10043cfc <COMM_Event_Updater+0xcc>)
10043cba:	681a      	ldr	r2, [r3, #0]
10043cbc:	230c      	movs	r3, #12
10043cbe:	18fb      	adds	r3, r7, r3
10043cc0:	6819      	ldr	r1, [r3, #0]
10043cc2:	0010      	movs	r0, r2
10043cc4:	f000 fd01 	bl	100446ca <FIFO_Enqueue>
    return out;
10043cc8:	2110      	movs	r1, #16
10043cca:	187b      	adds	r3, r7, r1
10043ccc:	220c      	movs	r2, #12
10043cce:	18ba      	adds	r2, r7, r2
10043cd0:	6812      	ldr	r2, [r2, #0]
10043cd2:	601a      	str	r2, [r3, #0]
10043cd4:	187a      	adds	r2, r7, r1
10043cd6:	2300      	movs	r3, #0
10043cd8:	8811      	ldrh	r1, [r2, #0]
10043cda:	0409      	lsls	r1, r1, #16
10043cdc:	0c09      	lsrs	r1, r1, #16
10043cde:	0c1b      	lsrs	r3, r3, #16
10043ce0:	041b      	lsls	r3, r3, #16
10043ce2:	430b      	orrs	r3, r1
10043ce4:	8852      	ldrh	r2, [r2, #2]
10043ce6:	0412      	lsls	r2, r2, #16
10043ce8:	041b      	lsls	r3, r3, #16
10043cea:	0c1b      	lsrs	r3, r3, #16
10043cec:	4313      	orrs	r3, r2
}
10043cee:	0018      	movs	r0, r3
10043cf0:	46bd      	mov	sp, r7
10043cf2:	b007      	add	sp, #28
10043cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10043cf6:	46c0      	nop			@ (mov r8, r8)
10043cf8:	200003bc 	.word	0x200003bc
10043cfc:	200003b8 	.word	0x200003b8

10043d00 <COMM_Event_Handler>:
 * @Function: EVENT_COMM_Event_Handler
 * @Brief: 
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t COMM_Event_Handler(Event_t event){
10043d00:	b5b0      	push	{r4, r5, r7, lr}
10043d02:	b09e      	sub	sp, #120	@ 0x78
10043d04:	af00      	add	r7, sp, #0
10043d06:	1d3b      	adds	r3, r7, #4
10043d08:	6018      	str	r0, [r3, #0]
	bool transition = 0;
10043d0a:	2377      	movs	r3, #119	@ 0x77
10043d0c:	18fb      	adds	r3, r7, r3
10043d0e:	2200      	movs	r2, #0
10043d10:	701a      	strb	r2, [r3, #0]

	static uint8_t folder;
	COMMSTATES_t next = commSM;
10043d12:	2376      	movs	r3, #118	@ 0x76
10043d14:	18fb      	adds	r3, r7, r3
10043d16:	4ad6      	ldr	r2, [pc, #856]	@ (10044070 <COMM_Event_Handler+0x370>)
10043d18:	7812      	ldrb	r2, [r2, #0]
10043d1a:	701a      	strb	r2, [r3, #0]
	char text[50];
	switch(commSM){
10043d1c:	4bd4      	ldr	r3, [pc, #848]	@ (10044070 <COMM_Event_Handler+0x370>)
10043d1e:	781b      	ldrb	r3, [r3, #0]
10043d20:	2b13      	cmp	r3, #19
10043d22:	d901      	bls.n	10043d28 <COMM_Event_Handler+0x28>
10043d24:	f000 fc20 	bl	10044568 <COMM_Event_Handler+0x868>
10043d28:	009a      	lsls	r2, r3, #2
10043d2a:	4bd2      	ldr	r3, [pc, #840]	@ (10044074 <COMM_Event_Handler+0x374>)
10043d2c:	18d3      	adds	r3, r2, r3
10043d2e:	681b      	ldr	r3, [r3, #0]
10043d30:	469f      	mov	pc, r3
	case init:
		if(event.status == EVENT_INIT){
10043d32:	1d3b      	adds	r3, r7, #4
10043d34:	781b      	ldrb	r3, [r3, #0]
10043d36:	b25b      	sxtb	r3, r3
10043d38:	2b01      	cmp	r3, #1
10043d3a:	d001      	beq.n	10043d40 <COMM_Event_Handler+0x40>
10043d3c:	f000 fc16 	bl	1004456c <COMM_Event_Handler+0x86c>
			next = idle;
10043d40:	2376      	movs	r3, #118	@ 0x76
10043d42:	18fb      	adds	r3, r7, r3
10043d44:	2201      	movs	r2, #1
10043d46:	701a      	strb	r2, [r3, #0]
			transition = true;
10043d48:	2377      	movs	r3, #119	@ 0x77
10043d4a:	18fb      	adds	r3, r7, r3
10043d4c:	2201      	movs	r2, #1
10043d4e:	701a      	strb	r2, [r3, #0]
		}
		break;
10043d50:	f000 fc0c 	bl	1004456c <COMM_Event_Handler+0x86c>
	case idle:
		if(event.status == EVENT_ENTRY){
10043d54:	1d3b      	adds	r3, r7, #4
10043d56:	781b      	ldrb	r3, [r3, #0]
10043d58:	b25b      	sxtb	r3, r3
10043d5a:	2b02      	cmp	r3, #2
10043d5c:	d102      	bne.n	10043d64 <COMM_Event_Handler+0x64>
			sendinglogs = 0;
10043d5e:	4bc6      	ldr	r3, [pc, #792]	@ (10044078 <COMM_Event_Handler+0x378>)
10043d60:	2200      	movs	r2, #0
10043d62:	701a      	strb	r2, [r3, #0]
		}
		if(event.status == EVENT_USART){
10043d64:	1d3b      	adds	r3, r7, #4
10043d66:	781b      	ldrb	r3, [r3, #0]
10043d68:	b25b      	sxtb	r3, r3
10043d6a:	2b06      	cmp	r3, #6
10043d6c:	d001      	beq.n	10043d72 <COMM_Event_Handler+0x72>
10043d6e:	f000 fbff 	bl	10044570 <COMM_Event_Handler+0x870>
			switch (event.data){
10043d72:	1d3b      	adds	r3, r7, #4
10043d74:	885b      	ldrh	r3, [r3, #2]
10043d76:	2b0f      	cmp	r3, #15
10043d78:	d852      	bhi.n	10043e20 <COMM_Event_Handler+0x120>
10043d7a:	009a      	lsls	r2, r3, #2
10043d7c:	4bbf      	ldr	r3, [pc, #764]	@ (1004407c <COMM_Event_Handler+0x37c>)
10043d7e:	18d3      	adds	r3, r2, r3
10043d80:	681b      	ldr	r3, [r3, #0]
10043d82:	469f      	mov	pc, r3
			case VOLUMECONTROL:
				discountprintf("received volume control");
10043d84:	4bbe      	ldr	r3, [pc, #760]	@ (10044080 <COMM_Event_Handler+0x380>)
10043d86:	0018      	movs	r0, r3
10043d88:	f000 fc3c 	bl	10044604 <discountprintf>
				next = volumecontrol;
10043d8c:	2376      	movs	r3, #118	@ 0x76
10043d8e:	18fb      	adds	r3, r7, r3
10043d90:	2202      	movs	r2, #2
10043d92:	701a      	strb	r2, [r3, #0]
				transition = true;
10043d94:	2377      	movs	r3, #119	@ 0x77
10043d96:	18fb      	adds	r3, r7, r3
10043d98:	2201      	movs	r2, #1
10043d9a:	701a      	strb	r2, [r3, #0]
				break;
10043d9c:	e041      	b.n	10043e22 <COMM_Event_Handler+0x122>
			case FOLDERCONTROL:
				discountprintf("received folder control");
10043d9e:	4bb9      	ldr	r3, [pc, #740]	@ (10044084 <COMM_Event_Handler+0x384>)
10043da0:	0018      	movs	r0, r3
10043da2:	f000 fc2f 	bl	10044604 <discountprintf>
				next = foldercontrol;
10043da6:	2376      	movs	r3, #118	@ 0x76
10043da8:	18fb      	adds	r3, r7, r3
10043daa:	2203      	movs	r2, #3
10043dac:	701a      	strb	r2, [r3, #0]
				transition = true;
10043dae:	2377      	movs	r3, #119	@ 0x77
10043db0:	18fb      	adds	r3, r7, r3
10043db2:	2201      	movs	r2, #1
10043db4:	701a      	strb	r2, [r3, #0]
				break;
10043db6:	e034      	b.n	10043e22 <COMM_Event_Handler+0x122>
			case LOGSREQUEST:
				discountprintf("received logs request");
10043db8:	4bb3      	ldr	r3, [pc, #716]	@ (10044088 <COMM_Event_Handler+0x388>)
10043dba:	0018      	movs	r0, r3
10043dbc:	f000 fc22 	bl	10044604 <discountprintf>
				next = logsrequest;
10043dc0:	2376      	movs	r3, #118	@ 0x76
10043dc2:	18fb      	adds	r3, r7, r3
10043dc4:	2205      	movs	r2, #5
10043dc6:	701a      	strb	r2, [r3, #0]
				transition = true;
10043dc8:	2377      	movs	r3, #119	@ 0x77
10043dca:	18fb      	adds	r3, r7, r3
10043dcc:	2201      	movs	r2, #1
10043dce:	701a      	strb	r2, [r3, #0]
				break;
10043dd0:	e027      	b.n	10043e22 <COMM_Event_Handler+0x122>
			case DCCONTROL:
				discountprintf("received DC control");
10043dd2:	4bae      	ldr	r3, [pc, #696]	@ (1004408c <COMM_Event_Handler+0x38c>)
10043dd4:	0018      	movs	r0, r3
10043dd6:	f000 fc15 	bl	10044604 <discountprintf>
				next = dccontrol;
10043dda:	2376      	movs	r3, #118	@ 0x76
10043ddc:	18fb      	adds	r3, r7, r3
10043dde:	2207      	movs	r2, #7
10043de0:	701a      	strb	r2, [r3, #0]
				transition = true;
10043de2:	2377      	movs	r3, #119	@ 0x77
10043de4:	18fb      	adds	r3, r7, r3
10043de6:	2201      	movs	r2, #1
10043de8:	701a      	strb	r2, [r3, #0]
				break;
10043dea:	e01a      	b.n	10043e22 <COMM_Event_Handler+0x122>
			case SCHEDULECONTROL:
				discountprintf("received schedule control");
10043dec:	4ba8      	ldr	r3, [pc, #672]	@ (10044090 <COMM_Event_Handler+0x390>)
10043dee:	0018      	movs	r0, r3
10043df0:	f000 fc08 	bl	10044604 <discountprintf>
				next = schedulecontrol;
10043df4:	2376      	movs	r3, #118	@ 0x76
10043df6:	18fb      	adds	r3, r7, r3
10043df8:	2208      	movs	r2, #8
10043dfa:	701a      	strb	r2, [r3, #0]
				transition = true;
10043dfc:	2377      	movs	r3, #119	@ 0x77
10043dfe:	18fb      	adds	r3, r7, r3
10043e00:	2201      	movs	r2, #1
10043e02:	701a      	strb	r2, [r3, #0]
				break;
10043e04:	e00d      	b.n	10043e22 <COMM_Event_Handler+0x122>
			case SETTIME:
				discountprintf("received set time control");
10043e06:	4ba3      	ldr	r3, [pc, #652]	@ (10044094 <COMM_Event_Handler+0x394>)
10043e08:	0018      	movs	r0, r3
10043e0a:	f000 fbfb 	bl	10044604 <discountprintf>
				next = timeminute;
10043e0e:	2376      	movs	r3, #118	@ 0x76
10043e10:	18fb      	adds	r3, r7, r3
10043e12:	2210      	movs	r2, #16
10043e14:	701a      	strb	r2, [r3, #0]
				transition = true;
10043e16:	2377      	movs	r3, #119	@ 0x77
10043e18:	18fb      	adds	r3, r7, r3
10043e1a:	2201      	movs	r2, #1
10043e1c:	701a      	strb	r2, [r3, #0]
				break;
10043e1e:	e000      	b.n	10043e22 <COMM_Event_Handler+0x122>
			default:
				break;
10043e20:	46c0      	nop			@ (mov r8, r8)
			}
		}
		break;
10043e22:	f000 fba5 	bl	10044570 <COMM_Event_Handler+0x870>
	case volumecontrol:
		if(event.status == EVENT_USART){
10043e26:	1d3b      	adds	r3, r7, #4
10043e28:	781b      	ldrb	r3, [r3, #0]
10043e2a:	b25b      	sxtb	r3, r3
10043e2c:	2b06      	cmp	r3, #6
10043e2e:	d001      	beq.n	10043e34 <COMM_Event_Handler+0x134>
10043e30:	f000 fba0 	bl	10044574 <COMM_Event_Handler+0x874>
			FLASH_SetDCVol((uint8_t)event.data, FLASH_GetDutyCycle());
10043e34:	1d3b      	adds	r3, r7, #4
10043e36:	885b      	ldrh	r3, [r3, #2]
10043e38:	b2dc      	uxtb	r4, r3
10043e3a:	f000 fdaf 	bl	1004499c <FLASH_GetDutyCycle>
10043e3e:	0003      	movs	r3, r0
10043e40:	0019      	movs	r1, r3
10043e42:	0020      	movs	r0, r4
10043e44:	f000 fd52 	bl	100448ec <FLASH_SetDCVol>
			sprintf(text, "Storing volume %d", FLASH_GetVolume());
10043e48:	f000 fd92 	bl	10044970 <FLASH_GetVolume>
10043e4c:	0003      	movs	r3, r0
10043e4e:	001a      	movs	r2, r3
10043e50:	4991      	ldr	r1, [pc, #580]	@ (10044098 <COMM_Event_Handler+0x398>)
10043e52:	2434      	movs	r4, #52	@ 0x34
10043e54:	193b      	adds	r3, r7, r4
10043e56:	0018      	movs	r0, r3
10043e58:	f024 fb54 	bl	10068504 <siprintf>
			discountprintf(text);
10043e5c:	193b      	adds	r3, r7, r4
10043e5e:	0018      	movs	r0, r3
10043e60:	f000 fbd0 	bl	10044604 <discountprintf>
			next = idle;
10043e64:	2376      	movs	r3, #118	@ 0x76
10043e66:	18fb      	adds	r3, r7, r3
10043e68:	2201      	movs	r2, #1
10043e6a:	701a      	strb	r2, [r3, #0]
			transition = true;
10043e6c:	2377      	movs	r3, #119	@ 0x77
10043e6e:	18fb      	adds	r3, r7, r3
10043e70:	2201      	movs	r2, #1
10043e72:	701a      	strb	r2, [r3, #0]
		}
		break;
10043e74:	e37e      	b.n	10044574 <COMM_Event_Handler+0x874>
	case foldercontrol:
		if(event.status == EVENT_USART){
10043e76:	1d3b      	adds	r3, r7, #4
10043e78:	781b      	ldrb	r3, [r3, #0]
10043e7a:	b25b      	sxtb	r3, r3
10043e7c:	2b06      	cmp	r3, #6
10043e7e:	d000      	beq.n	10043e82 <COMM_Event_Handler+0x182>
10043e80:	e37a      	b.n	10044578 <COMM_Event_Handler+0x878>
			folder = event.data;
10043e82:	1d3b      	adds	r3, r7, #4
10043e84:	885b      	ldrh	r3, [r3, #2]
10043e86:	b2da      	uxtb	r2, r3
10043e88:	4b84      	ldr	r3, [pc, #528]	@ (1004409c <COMM_Event_Handler+0x39c>)
10043e8a:	701a      	strb	r2, [r3, #0]
			discountprintf("Storing folder selector");
10043e8c:	4b84      	ldr	r3, [pc, #528]	@ (100440a0 <COMM_Event_Handler+0x3a0>)
10043e8e:	0018      	movs	r0, r3
10043e90:	f000 fbb8 	bl	10044604 <discountprintf>
			next = folderselected;
10043e94:	2376      	movs	r3, #118	@ 0x76
10043e96:	18fb      	adds	r3, r7, r3
10043e98:	2204      	movs	r2, #4
10043e9a:	701a      	strb	r2, [r3, #0]
			transition = true;
10043e9c:	2377      	movs	r3, #119	@ 0x77
10043e9e:	18fb      	adds	r3, r7, r3
10043ea0:	2201      	movs	r2, #1
10043ea2:	701a      	strb	r2, [r3, #0]
		}
		break;
10043ea4:	e368      	b.n	10044578 <COMM_Event_Handler+0x878>
	case folderselected:
		if(event.status == EVENT_USART){
10043ea6:	1d3b      	adds	r3, r7, #4
10043ea8:	781b      	ldrb	r3, [r3, #0]
10043eaa:	b25b      	sxtb	r3, r3
10043eac:	2b06      	cmp	r3, #6
10043eae:	d000      	beq.n	10043eb2 <COMM_Event_Handler+0x1b2>
10043eb0:	e364      	b.n	1004457c <COMM_Event_Handler+0x87c>
			//post to mp3 controller with the new data
			Event_t play = (Event_t){EVENT_PLAY, (folder<<8) + (event.data)};
10043eb2:	2130      	movs	r1, #48	@ 0x30
10043eb4:	187b      	adds	r3, r7, r1
10043eb6:	220b      	movs	r2, #11
10043eb8:	701a      	strb	r2, [r3, #0]
10043eba:	4b78      	ldr	r3, [pc, #480]	@ (1004409c <COMM_Event_Handler+0x39c>)
10043ebc:	781b      	ldrb	r3, [r3, #0]
10043ebe:	021b      	lsls	r3, r3, #8
10043ec0:	b29a      	uxth	r2, r3
10043ec2:	1d3b      	adds	r3, r7, #4
10043ec4:	885b      	ldrh	r3, [r3, #2]
10043ec6:	18d3      	adds	r3, r2, r3
10043ec8:	b29a      	uxth	r2, r3
10043eca:	187b      	adds	r3, r7, r1
10043ecc:	805a      	strh	r2, [r3, #2]
			MP3_Event_Post(play);
10043ece:	187b      	adds	r3, r7, r1
10043ed0:	6818      	ldr	r0, [r3, #0]
10043ed2:	f001 fd2d 	bl	10045930 <MP3_Event_Post>
			discountprintf("Sending track selector");
10043ed6:	4b73      	ldr	r3, [pc, #460]	@ (100440a4 <COMM_Event_Handler+0x3a4>)
10043ed8:	0018      	movs	r0, r3
10043eda:	f000 fb93 	bl	10044604 <discountprintf>
			next = idle;
10043ede:	2376      	movs	r3, #118	@ 0x76
10043ee0:	18fb      	adds	r3, r7, r3
10043ee2:	2201      	movs	r2, #1
10043ee4:	701a      	strb	r2, [r3, #0]
			transition = true;
10043ee6:	2377      	movs	r3, #119	@ 0x77
10043ee8:	18fb      	adds	r3, r7, r3
10043eea:	2201      	movs	r2, #1
10043eec:	701a      	strb	r2, [r3, #0]
		}
		break;
10043eee:	e345      	b.n	1004457c <COMM_Event_Handler+0x87c>
	case logsrequest:
		static uint32_t sent;
		if(event.status == EVENT_ENTRY){
10043ef0:	1d3b      	adds	r3, r7, #4
10043ef2:	781b      	ldrb	r3, [r3, #0]
10043ef4:	b25b      	sxtb	r3, r3
10043ef6:	2b02      	cmp	r3, #2
10043ef8:	d000      	beq.n	10043efc <COMM_Event_Handler+0x1fc>
10043efa:	e341      	b.n	10044580 <COMM_Event_Handler+0x880>
			sendinglogs = 1;
10043efc:	4b5e      	ldr	r3, [pc, #376]	@ (10044078 <COMM_Event_Handler+0x378>)
10043efe:	2201      	movs	r2, #1
10043f00:	701a      	strb	r2, [r3, #0]
			sent = 0;
10043f02:	4b69      	ldr	r3, [pc, #420]	@ (100440a8 <COMM_Event_Handler+0x3a8>)
10043f04:	2200      	movs	r2, #0
10043f06:	601a      	str	r2, [r3, #0]
			uint16_t size = FLASH_GetLogsSize();
10043f08:	2568      	movs	r5, #104	@ 0x68
10043f0a:	197c      	adds	r4, r7, r5
10043f0c:	f000 fdb8 	bl	10044a80 <FLASH_GetLogsSize>
10043f10:	0003      	movs	r3, r0
10043f12:	8023      	strh	r3, [r4, #0]
			//uint16_t size = 32;
			USART_WriteTx((uint8_t)(size>>8));
10043f14:	002c      	movs	r4, r5
10043f16:	193b      	adds	r3, r7, r4
10043f18:	881b      	ldrh	r3, [r3, #0]
10043f1a:	0a1b      	lsrs	r3, r3, #8
10043f1c:	b29b      	uxth	r3, r3
10043f1e:	b2db      	uxtb	r3, r3
10043f20:	0018      	movs	r0, r3
10043f22:	f003 f8b5 	bl	10047090 <USART_WriteTx>
			USART_WriteTx((uint8_t)(size));
10043f26:	193b      	adds	r3, r7, r4
10043f28:	881b      	ldrh	r3, [r3, #0]
10043f2a:	b2db      	uxtb	r3, r3
10043f2c:	0018      	movs	r0, r3
10043f2e:	f003 f8af 	bl	10047090 <USART_WriteTx>
			next = logsdata;
10043f32:	2376      	movs	r3, #118	@ 0x76
10043f34:	18fb      	adds	r3, r7, r3
10043f36:	2206      	movs	r2, #6
10043f38:	701a      	strb	r2, [r3, #0]
			transition = true;
10043f3a:	2377      	movs	r3, #119	@ 0x77
10043f3c:	18fb      	adds	r3, r7, r3
10043f3e:	2201      	movs	r2, #1
10043f40:	701a      	strb	r2, [r3, #0]
		}
		break;
10043f42:	e31d      	b.n	10044580 <COMM_Event_Handler+0x880>
	case logsdata:
		if(event.status == EVENT_USART_READY){
10043f44:	1d3b      	adds	r3, r7, #4
10043f46:	781b      	ldrb	r3, [r3, #0]
10043f48:	b25b      	sxtb	r3, r3
10043f4a:	2b07      	cmp	r3, #7
10043f4c:	d000      	beq.n	10043f50 <COMM_Event_Handler+0x250>
10043f4e:	e319      	b.n	10044584 <COMM_Event_Handler+0x884>
			//get logs size
			uint16_t size  = 32;
10043f50:	216a      	movs	r1, #106	@ 0x6a
10043f52:	187b      	adds	r3, r7, r1
10043f54:	2220      	movs	r2, #32
10043f56:	801a      	strh	r2, [r3, #0]
			//uint16_t size = FLASH_GetLogsSize();
			if(size - sent > (uint16_t)(USARTBUFFERSIZE/6)){
10043f58:	187b      	adds	r3, r7, r1
10043f5a:	881a      	ldrh	r2, [r3, #0]
10043f5c:	4b52      	ldr	r3, [pc, #328]	@ (100440a8 <COMM_Event_Handler+0x3a8>)
10043f5e:	681b      	ldr	r3, [r3, #0]
10043f60:	1ad3      	subs	r3, r2, r3
10043f62:	2b55      	cmp	r3, #85	@ 0x55
10043f64:	d934      	bls.n	10043fd0 <COMM_Event_Handler+0x2d0>
				//send next part of logs here, use sent to index the
				for(int i = 0; i < (uint16_t)(USARTBUFFERSIZE/6); i++){
10043f66:	2300      	movs	r3, #0
10043f68:	673b      	str	r3, [r7, #112]	@ 0x70
10043f6a:	e02d      	b.n	10043fc8 <COMM_Event_Handler+0x2c8>
					//scheduleEvent levent = FLASH_ReadLogs(sent);
					scheduleEvent levent = {1, 1, 0b1001001, 0b1001010, 1, 1};
10043f6c:	2024      	movs	r0, #36	@ 0x24
10043f6e:	183b      	adds	r3, r7, r0
10043f70:	4a4e      	ldr	r2, [pc, #312]	@ (100440ac <COMM_Event_Handler+0x3ac>)
10043f72:	6811      	ldr	r1, [r2, #0]
10043f74:	6019      	str	r1, [r3, #0]
10043f76:	8892      	ldrh	r2, [r2, #4]
10043f78:	809a      	strh	r2, [r3, #4]
					USART_WriteTx(levent.month);
10043f7a:	0004      	movs	r4, r0
10043f7c:	193b      	adds	r3, r7, r4
10043f7e:	781b      	ldrb	r3, [r3, #0]
10043f80:	0018      	movs	r0, r3
10043f82:	f003 f885 	bl	10047090 <USART_WriteTx>
					USART_WriteTx(levent.day);
10043f86:	193b      	adds	r3, r7, r4
10043f88:	785b      	ldrb	r3, [r3, #1]
10043f8a:	0018      	movs	r0, r3
10043f8c:	f003 f880 	bl	10047090 <USART_WriteTx>
					USART_WriteTx(levent.start);
10043f90:	193b      	adds	r3, r7, r4
10043f92:	789b      	ldrb	r3, [r3, #2]
10043f94:	0018      	movs	r0, r3
10043f96:	f003 f87b 	bl	10047090 <USART_WriteTx>
					USART_WriteTx(levent.stop);
10043f9a:	193b      	adds	r3, r7, r4
10043f9c:	78db      	ldrb	r3, [r3, #3]
10043f9e:	0018      	movs	r0, r3
10043fa0:	f003 f876 	bl	10047090 <USART_WriteTx>
					USART_WriteTx(levent.folder);
10043fa4:	193b      	adds	r3, r7, r4
10043fa6:	791b      	ldrb	r3, [r3, #4]
10043fa8:	0018      	movs	r0, r3
10043faa:	f003 f871 	bl	10047090 <USART_WriteTx>
					USART_WriteTx(levent.track);
10043fae:	193b      	adds	r3, r7, r4
10043fb0:	795b      	ldrb	r3, [r3, #5]
10043fb2:	0018      	movs	r0, r3
10043fb4:	f003 f86c 	bl	10047090 <USART_WriteTx>
					sent++;
10043fb8:	4b3b      	ldr	r3, [pc, #236]	@ (100440a8 <COMM_Event_Handler+0x3a8>)
10043fba:	681b      	ldr	r3, [r3, #0]
10043fbc:	1c5a      	adds	r2, r3, #1
10043fbe:	4b3a      	ldr	r3, [pc, #232]	@ (100440a8 <COMM_Event_Handler+0x3a8>)
10043fc0:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < (uint16_t)(USARTBUFFERSIZE/6); i++){
10043fc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10043fc4:	3301      	adds	r3, #1
10043fc6:	673b      	str	r3, [r7, #112]	@ 0x70
10043fc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10043fca:	2b54      	cmp	r3, #84	@ 0x54
10043fcc:	ddce      	ble.n	10043f6c <COMM_Event_Handler+0x26c>
				next = idle;
				transition = true;
				discountprintf("data sent");
			}
		}
		break;
10043fce:	e2d9      	b.n	10044584 <COMM_Event_Handler+0x884>
				for(int i = 0; i < size - sent; i++){
10043fd0:	2300      	movs	r3, #0
10043fd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
10043fd4:	e02d      	b.n	10044032 <COMM_Event_Handler+0x332>
					scheduleEvent levent = {1, 1, 0b1001001, 0b1001010, 1, 1};
10043fd6:	201c      	movs	r0, #28
10043fd8:	183b      	adds	r3, r7, r0
10043fda:	4a34      	ldr	r2, [pc, #208]	@ (100440ac <COMM_Event_Handler+0x3ac>)
10043fdc:	6811      	ldr	r1, [r2, #0]
10043fde:	6019      	str	r1, [r3, #0]
10043fe0:	8892      	ldrh	r2, [r2, #4]
10043fe2:	809a      	strh	r2, [r3, #4]
					USART_WriteTx(levent.month);
10043fe4:	0004      	movs	r4, r0
10043fe6:	193b      	adds	r3, r7, r4
10043fe8:	781b      	ldrb	r3, [r3, #0]
10043fea:	0018      	movs	r0, r3
10043fec:	f003 f850 	bl	10047090 <USART_WriteTx>
					USART_WriteTx(levent.day);
10043ff0:	193b      	adds	r3, r7, r4
10043ff2:	785b      	ldrb	r3, [r3, #1]
10043ff4:	0018      	movs	r0, r3
10043ff6:	f003 f84b 	bl	10047090 <USART_WriteTx>
					USART_WriteTx(levent.start);
10043ffa:	193b      	adds	r3, r7, r4
10043ffc:	789b      	ldrb	r3, [r3, #2]
10043ffe:	0018      	movs	r0, r3
10044000:	f003 f846 	bl	10047090 <USART_WriteTx>
					USART_WriteTx(levent.stop);
10044004:	193b      	adds	r3, r7, r4
10044006:	78db      	ldrb	r3, [r3, #3]
10044008:	0018      	movs	r0, r3
1004400a:	f003 f841 	bl	10047090 <USART_WriteTx>
					USART_WriteTx(levent.folder);
1004400e:	193b      	adds	r3, r7, r4
10044010:	791b      	ldrb	r3, [r3, #4]
10044012:	0018      	movs	r0, r3
10044014:	f003 f83c 	bl	10047090 <USART_WriteTx>
					USART_WriteTx(levent.track);
10044018:	193b      	adds	r3, r7, r4
1004401a:	795b      	ldrb	r3, [r3, #5]
1004401c:	0018      	movs	r0, r3
1004401e:	f003 f837 	bl	10047090 <USART_WriteTx>
					sent++;
10044022:	4b21      	ldr	r3, [pc, #132]	@ (100440a8 <COMM_Event_Handler+0x3a8>)
10044024:	681b      	ldr	r3, [r3, #0]
10044026:	1c5a      	adds	r2, r3, #1
10044028:	4b1f      	ldr	r3, [pc, #124]	@ (100440a8 <COMM_Event_Handler+0x3a8>)
1004402a:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < size - sent; i++){
1004402c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
1004402e:	3301      	adds	r3, #1
10044030:	66fb      	str	r3, [r7, #108]	@ 0x6c
10044032:	236a      	movs	r3, #106	@ 0x6a
10044034:	18fb      	adds	r3, r7, r3
10044036:	881a      	ldrh	r2, [r3, #0]
10044038:	4b1b      	ldr	r3, [pc, #108]	@ (100440a8 <COMM_Event_Handler+0x3a8>)
1004403a:	681b      	ldr	r3, [r3, #0]
1004403c:	1ad2      	subs	r2, r2, r3
1004403e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
10044040:	429a      	cmp	r2, r3
10044042:	d8c8      	bhi.n	10043fd6 <COMM_Event_Handler+0x2d6>
				USART_WriteTx(LOGSDONE);
10044044:	2003      	movs	r0, #3
10044046:	f003 f823 	bl	10047090 <USART_WriteTx>
				sent = 0;
1004404a:	4b17      	ldr	r3, [pc, #92]	@ (100440a8 <COMM_Event_Handler+0x3a8>)
1004404c:	2200      	movs	r2, #0
1004404e:	601a      	str	r2, [r3, #0]
				sendinglogs = 0;
10044050:	4b09      	ldr	r3, [pc, #36]	@ (10044078 <COMM_Event_Handler+0x378>)
10044052:	2200      	movs	r2, #0
10044054:	701a      	strb	r2, [r3, #0]
				next = idle;
10044056:	2376      	movs	r3, #118	@ 0x76
10044058:	18fb      	adds	r3, r7, r3
1004405a:	2201      	movs	r2, #1
1004405c:	701a      	strb	r2, [r3, #0]
				transition = true;
1004405e:	2377      	movs	r3, #119	@ 0x77
10044060:	18fb      	adds	r3, r7, r3
10044062:	2201      	movs	r2, #1
10044064:	701a      	strb	r2, [r3, #0]
				discountprintf("data sent");
10044066:	4b12      	ldr	r3, [pc, #72]	@ (100440b0 <COMM_Event_Handler+0x3b0>)
10044068:	0018      	movs	r0, r3
1004406a:	f000 facb 	bl	10044604 <discountprintf>
		break;
1004406e:	e289      	b.n	10044584 <COMM_Event_Handler+0x884>
10044070:	200003b5 	.word	0x200003b5
10044074:	10069fa0 	.word	0x10069fa0
10044078:	200003bc 	.word	0x200003bc
1004407c:	10069ff0 	.word	0x10069ff0
10044080:	1006972c 	.word	0x1006972c
10044084:	10069744 	.word	0x10069744
10044088:	1006975c 	.word	0x1006975c
1004408c:	10069774 	.word	0x10069774
10044090:	10069788 	.word	0x10069788
10044094:	100697a4 	.word	0x100697a4
10044098:	100697c0 	.word	0x100697c0
1004409c:	200003bd 	.word	0x200003bd
100440a0:	100697d4 	.word	0x100697d4
100440a4:	100697ec 	.word	0x100697ec
100440a8:	200003c0 	.word	0x200003c0
100440ac:	100698a4 	.word	0x100698a4
100440b0:	10069804 	.word	0x10069804
	case dccontrol:
		if(event.status == EVENT_USART){
100440b4:	1d3b      	adds	r3, r7, #4
100440b6:	781b      	ldrb	r3, [r3, #0]
100440b8:	b25b      	sxtb	r3, r3
100440ba:	2b06      	cmp	r3, #6
100440bc:	d000      	beq.n	100440c0 <COMM_Event_Handler+0x3c0>
100440be:	e263      	b.n	10044588 <COMM_Event_Handler+0x888>
			FLASH_SetDCVol(FLASH_GetVolume(), (uint8_t)event.data);
100440c0:	f000 fc56 	bl	10044970 <FLASH_GetVolume>
100440c4:	0003      	movs	r3, r0
100440c6:	001a      	movs	r2, r3
100440c8:	1d3b      	adds	r3, r7, #4
100440ca:	885b      	ldrh	r3, [r3, #2]
100440cc:	b2db      	uxtb	r3, r3
100440ce:	0019      	movs	r1, r3
100440d0:	0010      	movs	r0, r2
100440d2:	f000 fc0b 	bl	100448ec <FLASH_SetDCVol>
			sprintf(text, "Storing volume %d", FLASH_GetDutyCycle());
100440d6:	f000 fc61 	bl	1004499c <FLASH_GetDutyCycle>
100440da:	0003      	movs	r3, r0
100440dc:	001a      	movs	r2, r3
100440de:	49d2      	ldr	r1, [pc, #840]	@ (10044428 <COMM_Event_Handler+0x728>)
100440e0:	2434      	movs	r4, #52	@ 0x34
100440e2:	193b      	adds	r3, r7, r4
100440e4:	0018      	movs	r0, r3
100440e6:	f024 fa0d 	bl	10068504 <siprintf>
			discountprintf(text);
100440ea:	193b      	adds	r3, r7, r4
100440ec:	0018      	movs	r0, r3
100440ee:	f000 fa89 	bl	10044604 <discountprintf>

			next = idle;
100440f2:	2376      	movs	r3, #118	@ 0x76
100440f4:	18fb      	adds	r3, r7, r3
100440f6:	2201      	movs	r2, #1
100440f8:	701a      	strb	r2, [r3, #0]
			transition = true;
100440fa:	2377      	movs	r3, #119	@ 0x77
100440fc:	18fb      	adds	r3, r7, r3
100440fe:	2201      	movs	r2, #1
10044100:	701a      	strb	r2, [r3, #0]
		}
		break;
10044102:	e241      	b.n	10044588 <COMM_Event_Handler+0x888>
	case schedulecontrol:
		static uint8_t numevents;
		static scheduleEvent sevent;
		if(event.status == EVENT_ENTRY){
10044104:	1d3b      	adds	r3, r7, #4
10044106:	781b      	ldrb	r3, [r3, #0]
10044108:	b25b      	sxtb	r3, r3
1004410a:	2b02      	cmp	r3, #2
1004410c:	d000      	beq.n	10044110 <COMM_Event_Handler+0x410>
1004410e:	e23d      	b.n	1004458c <COMM_Event_Handler+0x88c>
			discountprintf("receiving schedule");
10044110:	4bc6      	ldr	r3, [pc, #792]	@ (1004442c <COMM_Event_Handler+0x72c>)
10044112:	0018      	movs	r0, r3
10044114:	f000 fa76 	bl	10044604 <discountprintf>
			sevent = (scheduleEvent){0,0,0,0,0,0};
10044118:	4bc5      	ldr	r3, [pc, #788]	@ (10044430 <COMM_Event_Handler+0x730>)
1004411a:	0018      	movs	r0, r3
1004411c:	2306      	movs	r3, #6
1004411e:	001a      	movs	r2, r3
10044120:	2100      	movs	r1, #0
10044122:	f024 fb0b 	bl	1006873c <memset>
			FLASH_ClearSchedule();
10044126:	f000 fe1f 	bl	10044d68 <FLASH_ClearSchedule>
			next = schedulemonth;
1004412a:	2376      	movs	r3, #118	@ 0x76
1004412c:	18fb      	adds	r3, r7, r3
1004412e:	2209      	movs	r2, #9
10044130:	701a      	strb	r2, [r3, #0]
			transition = true;
10044132:	2377      	movs	r3, #119	@ 0x77
10044134:	18fb      	adds	r3, r7, r3
10044136:	2201      	movs	r2, #1
10044138:	701a      	strb	r2, [r3, #0]
			numevents = 0;
1004413a:	4bbe      	ldr	r3, [pc, #760]	@ (10044434 <COMM_Event_Handler+0x734>)
1004413c:	2200      	movs	r2, #0
1004413e:	701a      	strb	r2, [r3, #0]
		}
		break;
10044140:	e224      	b.n	1004458c <COMM_Event_Handler+0x88c>
	case schedulemonth:
		if(event.status == EVENT_USART){
10044142:	1d3b      	adds	r3, r7, #4
10044144:	781b      	ldrb	r3, [r3, #0]
10044146:	b25b      	sxtb	r3, r3
10044148:	2b06      	cmp	r3, #6
1004414a:	d000      	beq.n	1004414e <COMM_Event_Handler+0x44e>
1004414c:	e220      	b.n	10044590 <COMM_Event_Handler+0x890>
			if(event.data == SCHEDULEEND){
1004414e:	1d3b      	adds	r3, r7, #4
10044150:	885b      	ldrh	r3, [r3, #2]
10044152:	2b0d      	cmp	r3, #13
10044154:	d11a      	bne.n	1004418c <COMM_Event_Handler+0x48c>
				discountprintf("schedule complete");
10044156:	4bb8      	ldr	r3, [pc, #736]	@ (10044438 <COMM_Event_Handler+0x738>)
10044158:	0018      	movs	r0, r3
1004415a:	f000 fa53 	bl	10044604 <discountprintf>
				next = idle;
1004415e:	2376      	movs	r3, #118	@ 0x76
10044160:	18fb      	adds	r3, r7, r3
10044162:	2201      	movs	r2, #1
10044164:	701a      	strb	r2, [r3, #0]
				transition = true;
10044166:	2377      	movs	r3, #119	@ 0x77
10044168:	18fb      	adds	r3, r7, r3
1004416a:	2201      	movs	r2, #1
1004416c:	701a      	strb	r2, [r3, #0]
				if(!(sevent.month == 0 && sevent.day == 0)){
1004416e:	4bb0      	ldr	r3, [pc, #704]	@ (10044430 <COMM_Event_Handler+0x730>)
10044170:	781b      	ldrb	r3, [r3, #0]
10044172:	2b00      	cmp	r3, #0
10044174:	d104      	bne.n	10044180 <COMM_Event_Handler+0x480>
10044176:	4bae      	ldr	r3, [pc, #696]	@ (10044430 <COMM_Event_Handler+0x730>)
10044178:	785b      	ldrb	r3, [r3, #1]
1004417a:	2b00      	cmp	r3, #0
1004417c:	d100      	bne.n	10044180 <COMM_Event_Handler+0x480>
1004417e:	e207      	b.n	10044590 <COMM_Event_Handler+0x890>
					FLASH_AppendSchedule(sevent);
10044180:	4bab      	ldr	r3, [pc, #684]	@ (10044430 <COMM_Event_Handler+0x730>)
10044182:	6818      	ldr	r0, [r3, #0]
10044184:	6859      	ldr	r1, [r3, #4]
10044186:	f000 fd01 	bl	10044b8c <FLASH_AppendSchedule>
				//store month here
				next = scheduleday;
				transition = true;
			}
		}
		break;
1004418a:	e201      	b.n	10044590 <COMM_Event_Handler+0x890>
			} else if(numevents > MAXSCHEDULEEVENTS){
1004418c:	4ba9      	ldr	r3, [pc, #676]	@ (10044434 <COMM_Event_Handler+0x734>)
1004418e:	781b      	ldrb	r3, [r3, #0]
10044190:	2bb4      	cmp	r3, #180	@ 0xb4
10044192:	d91c      	bls.n	100441ce <COMM_Event_Handler+0x4ce>
				discountprintf("schedule forced to complete");
10044194:	4ba9      	ldr	r3, [pc, #676]	@ (1004443c <COMM_Event_Handler+0x73c>)
10044196:	0018      	movs	r0, r3
10044198:	f000 fa34 	bl	10044604 <discountprintf>
				if(!(sevent.month == 0 && sevent.day == 0)){
1004419c:	4ba4      	ldr	r3, [pc, #656]	@ (10044430 <COMM_Event_Handler+0x730>)
1004419e:	781b      	ldrb	r3, [r3, #0]
100441a0:	2b00      	cmp	r3, #0
100441a2:	d103      	bne.n	100441ac <COMM_Event_Handler+0x4ac>
100441a4:	4ba2      	ldr	r3, [pc, #648]	@ (10044430 <COMM_Event_Handler+0x730>)
100441a6:	785b      	ldrb	r3, [r3, #1]
100441a8:	2b00      	cmp	r3, #0
100441aa:	d004      	beq.n	100441b6 <COMM_Event_Handler+0x4b6>
					FLASH_AppendSchedule(sevent);
100441ac:	4ba0      	ldr	r3, [pc, #640]	@ (10044430 <COMM_Event_Handler+0x730>)
100441ae:	6818      	ldr	r0, [r3, #0]
100441b0:	6859      	ldr	r1, [r3, #4]
100441b2:	f000 fceb 	bl	10044b8c <FLASH_AppendSchedule>
				next = scheduleend;
100441b6:	2376      	movs	r3, #118	@ 0x76
100441b8:	18fb      	adds	r3, r7, r3
100441ba:	220f      	movs	r2, #15
100441bc:	701a      	strb	r2, [r3, #0]
				transition = true;
100441be:	2377      	movs	r3, #119	@ 0x77
100441c0:	18fb      	adds	r3, r7, r3
100441c2:	2201      	movs	r2, #1
100441c4:	701a      	strb	r2, [r3, #0]
				USART_WriteTx(SCHEDULEEND);//please stop sending me the schedule
100441c6:	200d      	movs	r0, #13
100441c8:	f002 ff62 	bl	10047090 <USART_WriteTx>
		break;
100441cc:	e1e0      	b.n	10044590 <COMM_Event_Handler+0x890>
				if(!(sevent.month == 0 && sevent.day == 0)){
100441ce:	4b98      	ldr	r3, [pc, #608]	@ (10044430 <COMM_Event_Handler+0x730>)
100441d0:	781b      	ldrb	r3, [r3, #0]
100441d2:	2b00      	cmp	r3, #0
100441d4:	d103      	bne.n	100441de <COMM_Event_Handler+0x4de>
100441d6:	4b96      	ldr	r3, [pc, #600]	@ (10044430 <COMM_Event_Handler+0x730>)
100441d8:	785b      	ldrb	r3, [r3, #1]
100441da:	2b00      	cmp	r3, #0
100441dc:	d004      	beq.n	100441e8 <COMM_Event_Handler+0x4e8>
					FLASH_AppendSchedule(sevent);
100441de:	4b94      	ldr	r3, [pc, #592]	@ (10044430 <COMM_Event_Handler+0x730>)
100441e0:	6818      	ldr	r0, [r3, #0]
100441e2:	6859      	ldr	r1, [r3, #4]
100441e4:	f000 fcd2 	bl	10044b8c <FLASH_AppendSchedule>
				sevent.month = event.data;
100441e8:	1d3b      	adds	r3, r7, #4
100441ea:	885b      	ldrh	r3, [r3, #2]
100441ec:	b2da      	uxtb	r2, r3
100441ee:	4b90      	ldr	r3, [pc, #576]	@ (10044430 <COMM_Event_Handler+0x730>)
100441f0:	701a      	strb	r2, [r3, #0]
				sprintf(text, "Month: %d", event.data);
100441f2:	1d3b      	adds	r3, r7, #4
100441f4:	885b      	ldrh	r3, [r3, #2]
100441f6:	001a      	movs	r2, r3
100441f8:	4991      	ldr	r1, [pc, #580]	@ (10044440 <COMM_Event_Handler+0x740>)
100441fa:	2434      	movs	r4, #52	@ 0x34
100441fc:	193b      	adds	r3, r7, r4
100441fe:	0018      	movs	r0, r3
10044200:	f024 f980 	bl	10068504 <siprintf>
				discountprintf(text);
10044204:	193b      	adds	r3, r7, r4
10044206:	0018      	movs	r0, r3
10044208:	f000 f9fc 	bl	10044604 <discountprintf>
				next = scheduleday;
1004420c:	2376      	movs	r3, #118	@ 0x76
1004420e:	18fb      	adds	r3, r7, r3
10044210:	220a      	movs	r2, #10
10044212:	701a      	strb	r2, [r3, #0]
				transition = true;
10044214:	2377      	movs	r3, #119	@ 0x77
10044216:	18fb      	adds	r3, r7, r3
10044218:	2201      	movs	r2, #1
1004421a:	701a      	strb	r2, [r3, #0]
		break;
1004421c:	e1b8      	b.n	10044590 <COMM_Event_Handler+0x890>
	case scheduleday:
		if(event.status == EVENT_USART){
1004421e:	1d3b      	adds	r3, r7, #4
10044220:	781b      	ldrb	r3, [r3, #0]
10044222:	b25b      	sxtb	r3, r3
10044224:	2b06      	cmp	r3, #6
10044226:	d000      	beq.n	1004422a <COMM_Event_Handler+0x52a>
10044228:	e1b4      	b.n	10044594 <COMM_Event_Handler+0x894>
			sevent.day = event.data;
1004422a:	1d3b      	adds	r3, r7, #4
1004422c:	885b      	ldrh	r3, [r3, #2]
1004422e:	b2da      	uxtb	r2, r3
10044230:	4b7f      	ldr	r3, [pc, #508]	@ (10044430 <COMM_Event_Handler+0x730>)
10044232:	705a      	strb	r2, [r3, #1]
			sprintf(text, "Day: %d", event.data);
10044234:	1d3b      	adds	r3, r7, #4
10044236:	885b      	ldrh	r3, [r3, #2]
10044238:	001a      	movs	r2, r3
1004423a:	4982      	ldr	r1, [pc, #520]	@ (10044444 <COMM_Event_Handler+0x744>)
1004423c:	2434      	movs	r4, #52	@ 0x34
1004423e:	193b      	adds	r3, r7, r4
10044240:	0018      	movs	r0, r3
10044242:	f024 f95f 	bl	10068504 <siprintf>
			discountprintf(text);
10044246:	193b      	adds	r3, r7, r4
10044248:	0018      	movs	r0, r3
1004424a:	f000 f9db 	bl	10044604 <discountprintf>
			next = schedulestart;
1004424e:	2376      	movs	r3, #118	@ 0x76
10044250:	18fb      	adds	r3, r7, r3
10044252:	220b      	movs	r2, #11
10044254:	701a      	strb	r2, [r3, #0]
			transition = true;
10044256:	2377      	movs	r3, #119	@ 0x77
10044258:	18fb      	adds	r3, r7, r3
1004425a:	2201      	movs	r2, #1
1004425c:	701a      	strb	r2, [r3, #0]
		}
		break;
1004425e:	e199      	b.n	10044594 <COMM_Event_Handler+0x894>
	case schedulestart:
		if(event.status == EVENT_USART){
10044260:	1d3b      	adds	r3, r7, #4
10044262:	781b      	ldrb	r3, [r3, #0]
10044264:	b25b      	sxtb	r3, r3
10044266:	2b06      	cmp	r3, #6
10044268:	d000      	beq.n	1004426c <COMM_Event_Handler+0x56c>
1004426a:	e195      	b.n	10044598 <COMM_Event_Handler+0x898>
			sevent.start =  event.data;
1004426c:	1d3b      	adds	r3, r7, #4
1004426e:	885b      	ldrh	r3, [r3, #2]
10044270:	b2da      	uxtb	r2, r3
10044272:	4b6f      	ldr	r3, [pc, #444]	@ (10044430 <COMM_Event_Handler+0x730>)
10044274:	709a      	strb	r2, [r3, #2]
			sprintf(text, "start time: %d:%d", (event.data&0b11111000)>>3, (event.data & 0b011)*15);
10044276:	1d3b      	adds	r3, r7, #4
10044278:	885b      	ldrh	r3, [r3, #2]
1004427a:	10db      	asrs	r3, r3, #3
1004427c:	221f      	movs	r2, #31
1004427e:	4013      	ands	r3, r2
10044280:	001c      	movs	r4, r3
10044282:	1d3b      	adds	r3, r7, #4
10044284:	885b      	ldrh	r3, [r3, #2]
10044286:	001a      	movs	r2, r3
10044288:	2303      	movs	r3, #3
1004428a:	401a      	ands	r2, r3
1004428c:	0013      	movs	r3, r2
1004428e:	011b      	lsls	r3, r3, #4
10044290:	1a9b      	subs	r3, r3, r2
10044292:	496d      	ldr	r1, [pc, #436]	@ (10044448 <COMM_Event_Handler+0x748>)
10044294:	2534      	movs	r5, #52	@ 0x34
10044296:	1978      	adds	r0, r7, r5
10044298:	0022      	movs	r2, r4
1004429a:	f024 f933 	bl	10068504 <siprintf>
			discountprintf(text);
1004429e:	197b      	adds	r3, r7, r5
100442a0:	0018      	movs	r0, r3
100442a2:	f000 f9af 	bl	10044604 <discountprintf>
			next = schedulestop;
100442a6:	2376      	movs	r3, #118	@ 0x76
100442a8:	18fb      	adds	r3, r7, r3
100442aa:	220c      	movs	r2, #12
100442ac:	701a      	strb	r2, [r3, #0]
			transition = true;
100442ae:	2377      	movs	r3, #119	@ 0x77
100442b0:	18fb      	adds	r3, r7, r3
100442b2:	2201      	movs	r2, #1
100442b4:	701a      	strb	r2, [r3, #0]
		}
		break;
100442b6:	e16f      	b.n	10044598 <COMM_Event_Handler+0x898>
	case schedulestop:
		if(event.status == EVENT_USART){
100442b8:	1d3b      	adds	r3, r7, #4
100442ba:	781b      	ldrb	r3, [r3, #0]
100442bc:	b25b      	sxtb	r3, r3
100442be:	2b06      	cmp	r3, #6
100442c0:	d000      	beq.n	100442c4 <COMM_Event_Handler+0x5c4>
100442c2:	e16b      	b.n	1004459c <COMM_Event_Handler+0x89c>
			sevent.stop = event.data;
100442c4:	1d3b      	adds	r3, r7, #4
100442c6:	885b      	ldrh	r3, [r3, #2]
100442c8:	b2da      	uxtb	r2, r3
100442ca:	4b59      	ldr	r3, [pc, #356]	@ (10044430 <COMM_Event_Handler+0x730>)
100442cc:	70da      	strb	r2, [r3, #3]
			sprintf(text, "end time: %d:%d", (event.data&0b11111000)>>3, (event.data & 0b011)*15);
100442ce:	1d3b      	adds	r3, r7, #4
100442d0:	885b      	ldrh	r3, [r3, #2]
100442d2:	10db      	asrs	r3, r3, #3
100442d4:	221f      	movs	r2, #31
100442d6:	4013      	ands	r3, r2
100442d8:	001c      	movs	r4, r3
100442da:	1d3b      	adds	r3, r7, #4
100442dc:	885b      	ldrh	r3, [r3, #2]
100442de:	001a      	movs	r2, r3
100442e0:	2303      	movs	r3, #3
100442e2:	401a      	ands	r2, r3
100442e4:	0013      	movs	r3, r2
100442e6:	011b      	lsls	r3, r3, #4
100442e8:	1a9b      	subs	r3, r3, r2
100442ea:	4958      	ldr	r1, [pc, #352]	@ (1004444c <COMM_Event_Handler+0x74c>)
100442ec:	2534      	movs	r5, #52	@ 0x34
100442ee:	1978      	adds	r0, r7, r5
100442f0:	0022      	movs	r2, r4
100442f2:	f024 f907 	bl	10068504 <siprintf>
			discountprintf(text);
100442f6:	197b      	adds	r3, r7, r5
100442f8:	0018      	movs	r0, r3
100442fa:	f000 f983 	bl	10044604 <discountprintf>
			next = schedulefolder;
100442fe:	2376      	movs	r3, #118	@ 0x76
10044300:	18fb      	adds	r3, r7, r3
10044302:	220d      	movs	r2, #13
10044304:	701a      	strb	r2, [r3, #0]
			transition = true;
10044306:	2377      	movs	r3, #119	@ 0x77
10044308:	18fb      	adds	r3, r7, r3
1004430a:	2201      	movs	r2, #1
1004430c:	701a      	strb	r2, [r3, #0]
		}
		break;
1004430e:	e145      	b.n	1004459c <COMM_Event_Handler+0x89c>
	case schedulefolder:
		if(event.status == EVENT_USART){
10044310:	1d3b      	adds	r3, r7, #4
10044312:	781b      	ldrb	r3, [r3, #0]
10044314:	b25b      	sxtb	r3, r3
10044316:	2b06      	cmp	r3, #6
10044318:	d000      	beq.n	1004431c <COMM_Event_Handler+0x61c>
1004431a:	e141      	b.n	100445a0 <COMM_Event_Handler+0x8a0>
			sevent.folder = event.data;
1004431c:	1d3b      	adds	r3, r7, #4
1004431e:	885b      	ldrh	r3, [r3, #2]
10044320:	b2da      	uxtb	r2, r3
10044322:	4b43      	ldr	r3, [pc, #268]	@ (10044430 <COMM_Event_Handler+0x730>)
10044324:	711a      	strb	r2, [r3, #4]
			sprintf(text, "folder#: %d", event.data);
10044326:	1d3b      	adds	r3, r7, #4
10044328:	885b      	ldrh	r3, [r3, #2]
1004432a:	001a      	movs	r2, r3
1004432c:	4948      	ldr	r1, [pc, #288]	@ (10044450 <COMM_Event_Handler+0x750>)
1004432e:	2434      	movs	r4, #52	@ 0x34
10044330:	193b      	adds	r3, r7, r4
10044332:	0018      	movs	r0, r3
10044334:	f024 f8e6 	bl	10068504 <siprintf>
			discountprintf(text);
10044338:	193b      	adds	r3, r7, r4
1004433a:	0018      	movs	r0, r3
1004433c:	f000 f962 	bl	10044604 <discountprintf>
			next = scheduletrack;
10044340:	2376      	movs	r3, #118	@ 0x76
10044342:	18fb      	adds	r3, r7, r3
10044344:	220e      	movs	r2, #14
10044346:	701a      	strb	r2, [r3, #0]
			transition = true;
10044348:	2377      	movs	r3, #119	@ 0x77
1004434a:	18fb      	adds	r3, r7, r3
1004434c:	2201      	movs	r2, #1
1004434e:	701a      	strb	r2, [r3, #0]
		}
		break;
10044350:	e126      	b.n	100445a0 <COMM_Event_Handler+0x8a0>
	case scheduletrack:
		if(event.status == EVENT_USART){
10044352:	1d3b      	adds	r3, r7, #4
10044354:	781b      	ldrb	r3, [r3, #0]
10044356:	b25b      	sxtb	r3, r3
10044358:	2b06      	cmp	r3, #6
1004435a:	d000      	beq.n	1004435e <COMM_Event_Handler+0x65e>
1004435c:	e122      	b.n	100445a4 <COMM_Event_Handler+0x8a4>
			sevent.track = event.data;
1004435e:	1d3b      	adds	r3, r7, #4
10044360:	885b      	ldrh	r3, [r3, #2]
10044362:	b2da      	uxtb	r2, r3
10044364:	4b32      	ldr	r3, [pc, #200]	@ (10044430 <COMM_Event_Handler+0x730>)
10044366:	715a      	strb	r2, [r3, #5]
			sprintf(text, "track#: %d", event.data);
10044368:	1d3b      	adds	r3, r7, #4
1004436a:	885b      	ldrh	r3, [r3, #2]
1004436c:	001a      	movs	r2, r3
1004436e:	4939      	ldr	r1, [pc, #228]	@ (10044454 <COMM_Event_Handler+0x754>)
10044370:	2434      	movs	r4, #52	@ 0x34
10044372:	193b      	adds	r3, r7, r4
10044374:	0018      	movs	r0, r3
10044376:	f024 f8c5 	bl	10068504 <siprintf>
			discountprintf(text);
1004437a:	193b      	adds	r3, r7, r4
1004437c:	0018      	movs	r0, r3
1004437e:	f000 f941 	bl	10044604 <discountprintf>
			//record end time here
			next = schedulemonth;
10044382:	2376      	movs	r3, #118	@ 0x76
10044384:	18fb      	adds	r3, r7, r3
10044386:	2209      	movs	r2, #9
10044388:	701a      	strb	r2, [r3, #0]
			transition = true;
1004438a:	2377      	movs	r3, #119	@ 0x77
1004438c:	18fb      	adds	r3, r7, r3
1004438e:	2201      	movs	r2, #1
10044390:	701a      	strb	r2, [r3, #0]
			numevents++;
10044392:	4b28      	ldr	r3, [pc, #160]	@ (10044434 <COMM_Event_Handler+0x734>)
10044394:	781b      	ldrb	r3, [r3, #0]
10044396:	3301      	adds	r3, #1
10044398:	b2da      	uxtb	r2, r3
1004439a:	4b26      	ldr	r3, [pc, #152]	@ (10044434 <COMM_Event_Handler+0x734>)
1004439c:	701a      	strb	r2, [r3, #0]
		}
		break;
1004439e:	e101      	b.n	100445a4 <COMM_Event_Handler+0x8a4>
	case scheduleend:
		if(event.status == EVENT_USART){
100443a0:	1d3b      	adds	r3, r7, #4
100443a2:	781b      	ldrb	r3, [r3, #0]
100443a4:	b25b      	sxtb	r3, r3
100443a6:	2b06      	cmp	r3, #6
100443a8:	d000      	beq.n	100443ac <COMM_Event_Handler+0x6ac>
100443aa:	e0fd      	b.n	100445a8 <COMM_Event_Handler+0x8a8>
			if(event.data == SCHEDULEEND){
100443ac:	1d3b      	adds	r3, r7, #4
100443ae:	885b      	ldrh	r3, [r3, #2]
100443b0:	2b0d      	cmp	r3, #13
100443b2:	d000      	beq.n	100443b6 <COMM_Event_Handler+0x6b6>
100443b4:	e0f8      	b.n	100445a8 <COMM_Event_Handler+0x8a8>
				next = idle;
100443b6:	2376      	movs	r3, #118	@ 0x76
100443b8:	18fb      	adds	r3, r7, r3
100443ba:	2201      	movs	r2, #1
100443bc:	701a      	strb	r2, [r3, #0]
				transition = true;
100443be:	2377      	movs	r3, #119	@ 0x77
100443c0:	18fb      	adds	r3, r7, r3
100443c2:	2201      	movs	r2, #1
100443c4:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
100443c6:	e0ef      	b.n	100445a8 <COMM_Event_Handler+0x8a8>
	case timeminute:
		if(event.status == EVENT_USART){
100443c8:	1d3b      	adds	r3, r7, #4
100443ca:	781b      	ldrb	r3, [r3, #0]
100443cc:	b25b      	sxtb	r3, r3
100443ce:	2b06      	cmp	r3, #6
100443d0:	d000      	beq.n	100443d4 <COMM_Event_Handler+0x6d4>
100443d2:	e0eb      	b.n	100445ac <COMM_Event_Handler+0x8ac>
			if(event.data < 60){
100443d4:	1d3b      	adds	r3, r7, #4
100443d6:	885b      	ldrh	r3, [r3, #2]
100443d8:	2b3b      	cmp	r3, #59	@ 0x3b
100443da:	d900      	bls.n	100443de <COMM_Event_Handler+0x6de>
100443dc:	e0e6      	b.n	100445ac <COMM_Event_Handler+0x8ac>
				I2C_Transmit(RTCADDRESS, RTCMINADDR, ((event.data/10)<<4) + event.data%10);
100443de:	1d3b      	adds	r3, r7, #4
100443e0:	885b      	ldrh	r3, [r3, #2]
100443e2:	210a      	movs	r1, #10
100443e4:	0018      	movs	r0, r3
100443e6:	f7fb ff2b 	bl	10040240 <__udivsi3>
100443ea:	0003      	movs	r3, r0
100443ec:	b29b      	uxth	r3, r3
100443ee:	b2db      	uxtb	r3, r3
100443f0:	011b      	lsls	r3, r3, #4
100443f2:	b2dc      	uxtb	r4, r3
100443f4:	1d3b      	adds	r3, r7, #4
100443f6:	885b      	ldrh	r3, [r3, #2]
100443f8:	210a      	movs	r1, #10
100443fa:	0018      	movs	r0, r3
100443fc:	f7fb ffa6 	bl	1004034c <__aeabi_uidivmod>
10044400:	000b      	movs	r3, r1
10044402:	b29b      	uxth	r3, r3
10044404:	b2db      	uxtb	r3, r3
10044406:	18e3      	adds	r3, r4, r3
10044408:	b2db      	uxtb	r3, r3
1004440a:	001a      	movs	r2, r3
1004440c:	2101      	movs	r1, #1
1004440e:	206f      	movs	r0, #111	@ 0x6f
10044410:	f001 f83a 	bl	10045488 <I2C_Transmit>
				next = timehour;
10044414:	2376      	movs	r3, #118	@ 0x76
10044416:	18fb      	adds	r3, r7, r3
10044418:	2211      	movs	r2, #17
1004441a:	701a      	strb	r2, [r3, #0]
				transition = true;
1004441c:	2377      	movs	r3, #119	@ 0x77
1004441e:	18fb      	adds	r3, r7, r3
10044420:	2201      	movs	r2, #1
10044422:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
10044424:	e0c2      	b.n	100445ac <COMM_Event_Handler+0x8ac>
10044426:	46c0      	nop			@ (mov r8, r8)
10044428:	100697c0 	.word	0x100697c0
1004442c:	10069810 	.word	0x10069810
10044430:	200003c4 	.word	0x200003c4
10044434:	200003ca 	.word	0x200003ca
10044438:	10069824 	.word	0x10069824
1004443c:	10069838 	.word	0x10069838
10044440:	10069854 	.word	0x10069854
10044444:	10069860 	.word	0x10069860
10044448:	10069868 	.word	0x10069868
1004444c:	1006987c 	.word	0x1006987c
10044450:	1006988c 	.word	0x1006988c
10044454:	10069898 	.word	0x10069898
	case timehour:
		if(event.status == EVENT_USART){
10044458:	1d3b      	adds	r3, r7, #4
1004445a:	781b      	ldrb	r3, [r3, #0]
1004445c:	b25b      	sxtb	r3, r3
1004445e:	2b06      	cmp	r3, #6
10044460:	d000      	beq.n	10044464 <COMM_Event_Handler+0x764>
10044462:	e0a5      	b.n	100445b0 <COMM_Event_Handler+0x8b0>
			if(event.data < 24){
10044464:	1d3b      	adds	r3, r7, #4
10044466:	885b      	ldrh	r3, [r3, #2]
10044468:	2b17      	cmp	r3, #23
1004446a:	d900      	bls.n	1004446e <COMM_Event_Handler+0x76e>
1004446c:	e0a0      	b.n	100445b0 <COMM_Event_Handler+0x8b0>
				I2C_Transmit(RTCADDRESS, RTCMINADDR, ((event.data/10)<<4) + event.data%10);
1004446e:	1d3b      	adds	r3, r7, #4
10044470:	885b      	ldrh	r3, [r3, #2]
10044472:	210a      	movs	r1, #10
10044474:	0018      	movs	r0, r3
10044476:	f7fb fee3 	bl	10040240 <__udivsi3>
1004447a:	0003      	movs	r3, r0
1004447c:	b29b      	uxth	r3, r3
1004447e:	b2db      	uxtb	r3, r3
10044480:	011b      	lsls	r3, r3, #4
10044482:	b2dc      	uxtb	r4, r3
10044484:	1d3b      	adds	r3, r7, #4
10044486:	885b      	ldrh	r3, [r3, #2]
10044488:	210a      	movs	r1, #10
1004448a:	0018      	movs	r0, r3
1004448c:	f7fb ff5e 	bl	1004034c <__aeabi_uidivmod>
10044490:	000b      	movs	r3, r1
10044492:	b29b      	uxth	r3, r3
10044494:	b2db      	uxtb	r3, r3
10044496:	18e3      	adds	r3, r4, r3
10044498:	b2db      	uxtb	r3, r3
1004449a:	001a      	movs	r2, r3
1004449c:	2101      	movs	r1, #1
1004449e:	206f      	movs	r0, #111	@ 0x6f
100444a0:	f000 fff2 	bl	10045488 <I2C_Transmit>
				next = timeday;
100444a4:	2376      	movs	r3, #118	@ 0x76
100444a6:	18fb      	adds	r3, r7, r3
100444a8:	2212      	movs	r2, #18
100444aa:	701a      	strb	r2, [r3, #0]
				transition = true;
100444ac:	2377      	movs	r3, #119	@ 0x77
100444ae:	18fb      	adds	r3, r7, r3
100444b0:	2201      	movs	r2, #1
100444b2:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
100444b4:	e07c      	b.n	100445b0 <COMM_Event_Handler+0x8b0>
	case timeday:
		if(event.status == EVENT_USART){
100444b6:	1d3b      	adds	r3, r7, #4
100444b8:	781b      	ldrb	r3, [r3, #0]
100444ba:	b25b      	sxtb	r3, r3
100444bc:	2b06      	cmp	r3, #6
100444be:	d126      	bne.n	1004450e <COMM_Event_Handler+0x80e>
			if(event.data <= 31){
100444c0:	1d3b      	adds	r3, r7, #4
100444c2:	885b      	ldrh	r3, [r3, #2]
100444c4:	2b1f      	cmp	r3, #31
100444c6:	d822      	bhi.n	1004450e <COMM_Event_Handler+0x80e>
				I2C_Transmit(RTCADDRESS, RTCMINADDR, ((event.data/10)<<4) + event.data%10);
100444c8:	1d3b      	adds	r3, r7, #4
100444ca:	885b      	ldrh	r3, [r3, #2]
100444cc:	210a      	movs	r1, #10
100444ce:	0018      	movs	r0, r3
100444d0:	f7fb feb6 	bl	10040240 <__udivsi3>
100444d4:	0003      	movs	r3, r0
100444d6:	b29b      	uxth	r3, r3
100444d8:	b2db      	uxtb	r3, r3
100444da:	011b      	lsls	r3, r3, #4
100444dc:	b2dc      	uxtb	r4, r3
100444de:	1d3b      	adds	r3, r7, #4
100444e0:	885b      	ldrh	r3, [r3, #2]
100444e2:	210a      	movs	r1, #10
100444e4:	0018      	movs	r0, r3
100444e6:	f7fb ff31 	bl	1004034c <__aeabi_uidivmod>
100444ea:	000b      	movs	r3, r1
100444ec:	b29b      	uxth	r3, r3
100444ee:	b2db      	uxtb	r3, r3
100444f0:	18e3      	adds	r3, r4, r3
100444f2:	b2db      	uxtb	r3, r3
100444f4:	001a      	movs	r2, r3
100444f6:	2101      	movs	r1, #1
100444f8:	206f      	movs	r0, #111	@ 0x6f
100444fa:	f000 ffc5 	bl	10045488 <I2C_Transmit>
				next = timemonth;
100444fe:	2376      	movs	r3, #118	@ 0x76
10044500:	18fb      	adds	r3, r7, r3
10044502:	2213      	movs	r2, #19
10044504:	701a      	strb	r2, [r3, #0]
				transition = true;
10044506:	2377      	movs	r3, #119	@ 0x77
10044508:	18fb      	adds	r3, r7, r3
1004450a:	2201      	movs	r2, #1
1004450c:	701a      	strb	r2, [r3, #0]
			}
		}
	case timemonth:
		if(event.status == EVENT_USART){
1004450e:	1d3b      	adds	r3, r7, #4
10044510:	781b      	ldrb	r3, [r3, #0]
10044512:	b25b      	sxtb	r3, r3
10044514:	2b06      	cmp	r3, #6
10044516:	d14d      	bne.n	100445b4 <COMM_Event_Handler+0x8b4>
			if(event.data <= 12){
10044518:	1d3b      	adds	r3, r7, #4
1004451a:	885b      	ldrh	r3, [r3, #2]
1004451c:	2b0c      	cmp	r3, #12
1004451e:	d849      	bhi.n	100445b4 <COMM_Event_Handler+0x8b4>
				I2C_Transmit(RTCADDRESS, RTCMINADDR, ((event.data/10)<<4) + event.data%10);
10044520:	1d3b      	adds	r3, r7, #4
10044522:	885b      	ldrh	r3, [r3, #2]
10044524:	210a      	movs	r1, #10
10044526:	0018      	movs	r0, r3
10044528:	f7fb fe8a 	bl	10040240 <__udivsi3>
1004452c:	0003      	movs	r3, r0
1004452e:	b29b      	uxth	r3, r3
10044530:	b2db      	uxtb	r3, r3
10044532:	011b      	lsls	r3, r3, #4
10044534:	b2dc      	uxtb	r4, r3
10044536:	1d3b      	adds	r3, r7, #4
10044538:	885b      	ldrh	r3, [r3, #2]
1004453a:	210a      	movs	r1, #10
1004453c:	0018      	movs	r0, r3
1004453e:	f7fb ff05 	bl	1004034c <__aeabi_uidivmod>
10044542:	000b      	movs	r3, r1
10044544:	b29b      	uxth	r3, r3
10044546:	b2db      	uxtb	r3, r3
10044548:	18e3      	adds	r3, r4, r3
1004454a:	b2db      	uxtb	r3, r3
1004454c:	001a      	movs	r2, r3
1004454e:	2101      	movs	r1, #1
10044550:	206f      	movs	r0, #111	@ 0x6f
10044552:	f000 ff99 	bl	10045488 <I2C_Transmit>
				next = idle;
10044556:	2376      	movs	r3, #118	@ 0x76
10044558:	18fb      	adds	r3, r7, r3
1004455a:	2201      	movs	r2, #1
1004455c:	701a      	strb	r2, [r3, #0]
				transition = true;
1004455e:	2377      	movs	r3, #119	@ 0x77
10044560:	18fb      	adds	r3, r7, r3
10044562:	2201      	movs	r2, #1
10044564:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
10044566:	e025      	b.n	100445b4 <COMM_Event_Handler+0x8b4>
	default:
		break;
10044568:	46c0      	nop			@ (mov r8, r8)
1004456a:	e024      	b.n	100445b6 <COMM_Event_Handler+0x8b6>
		break;
1004456c:	46c0      	nop			@ (mov r8, r8)
1004456e:	e022      	b.n	100445b6 <COMM_Event_Handler+0x8b6>
		break;
10044570:	46c0      	nop			@ (mov r8, r8)
10044572:	e020      	b.n	100445b6 <COMM_Event_Handler+0x8b6>
		break;
10044574:	46c0      	nop			@ (mov r8, r8)
10044576:	e01e      	b.n	100445b6 <COMM_Event_Handler+0x8b6>
		break;
10044578:	46c0      	nop			@ (mov r8, r8)
1004457a:	e01c      	b.n	100445b6 <COMM_Event_Handler+0x8b6>
		break;
1004457c:	46c0      	nop			@ (mov r8, r8)
1004457e:	e01a      	b.n	100445b6 <COMM_Event_Handler+0x8b6>
		break;
10044580:	46c0      	nop			@ (mov r8, r8)
10044582:	e018      	b.n	100445b6 <COMM_Event_Handler+0x8b6>
		break;
10044584:	46c0      	nop			@ (mov r8, r8)
10044586:	e016      	b.n	100445b6 <COMM_Event_Handler+0x8b6>
		break;
10044588:	46c0      	nop			@ (mov r8, r8)
1004458a:	e014      	b.n	100445b6 <COMM_Event_Handler+0x8b6>
		break;
1004458c:	46c0      	nop			@ (mov r8, r8)
1004458e:	e012      	b.n	100445b6 <COMM_Event_Handler+0x8b6>
		break;
10044590:	46c0      	nop			@ (mov r8, r8)
10044592:	e010      	b.n	100445b6 <COMM_Event_Handler+0x8b6>
		break;
10044594:	46c0      	nop			@ (mov r8, r8)
10044596:	e00e      	b.n	100445b6 <COMM_Event_Handler+0x8b6>
		break;
10044598:	46c0      	nop			@ (mov r8, r8)
1004459a:	e00c      	b.n	100445b6 <COMM_Event_Handler+0x8b6>
		break;
1004459c:	46c0      	nop			@ (mov r8, r8)
1004459e:	e00a      	b.n	100445b6 <COMM_Event_Handler+0x8b6>
		break;
100445a0:	46c0      	nop			@ (mov r8, r8)
100445a2:	e008      	b.n	100445b6 <COMM_Event_Handler+0x8b6>
		break;
100445a4:	46c0      	nop			@ (mov r8, r8)
100445a6:	e006      	b.n	100445b6 <COMM_Event_Handler+0x8b6>
		break;
100445a8:	46c0      	nop			@ (mov r8, r8)
100445aa:	e004      	b.n	100445b6 <COMM_Event_Handler+0x8b6>
		break;
100445ac:	46c0      	nop			@ (mov r8, r8)
100445ae:	e002      	b.n	100445b6 <COMM_Event_Handler+0x8b6>
		break;
100445b0:	46c0      	nop			@ (mov r8, r8)
100445b2:	e000      	b.n	100445b6 <COMM_Event_Handler+0x8b6>
		break;
100445b4:	46c0      	nop			@ (mov r8, r8)
	}
	if(transition){
100445b6:	2377      	movs	r3, #119	@ 0x77
100445b8:	18fb      	adds	r3, r7, r3
100445ba:	781b      	ldrb	r3, [r3, #0]
100445bc:	2b00      	cmp	r3, #0
100445be:	d01a      	beq.n	100445f6 <COMM_Event_Handler+0x8f6>
		COMM_Event_Handler((Event_t){EVENT_EXIT});
100445c0:	2110      	movs	r1, #16
100445c2:	187b      	adds	r3, r7, r1
100445c4:	2200      	movs	r2, #0
100445c6:	601a      	str	r2, [r3, #0]
100445c8:	187b      	adds	r3, r7, r1
100445ca:	2203      	movs	r2, #3
100445cc:	701a      	strb	r2, [r3, #0]
100445ce:	187b      	adds	r3, r7, r1
100445d0:	6818      	ldr	r0, [r3, #0]
100445d2:	f7ff fb95 	bl	10043d00 <COMM_Event_Handler>
		commSM = next;
100445d6:	4b0a      	ldr	r3, [pc, #40]	@ (10044600 <COMM_Event_Handler+0x900>)
100445d8:	2276      	movs	r2, #118	@ 0x76
100445da:	18ba      	adds	r2, r7, r2
100445dc:	7812      	ldrb	r2, [r2, #0]
100445de:	701a      	strb	r2, [r3, #0]
		COMM_Event_Handler((Event_t){EVENT_ENTRY});
100445e0:	210c      	movs	r1, #12
100445e2:	187b      	adds	r3, r7, r1
100445e4:	2200      	movs	r2, #0
100445e6:	601a      	str	r2, [r3, #0]
100445e8:	187b      	adds	r3, r7, r1
100445ea:	2202      	movs	r2, #2
100445ec:	701a      	strb	r2, [r3, #0]
100445ee:	187b      	adds	r3, r7, r1
100445f0:	6818      	ldr	r0, [r3, #0]
100445f2:	f7ff fb85 	bl	10043d00 <COMM_Event_Handler>
	}
	return 1;
100445f6:	2301      	movs	r3, #1
}
100445f8:	0018      	movs	r0, r3
100445fa:	46bd      	mov	sp, r7
100445fc:	b01e      	add	sp, #120	@ 0x78
100445fe:	bdb0      	pop	{r4, r5, r7, pc}
10044600:	200003b5 	.word	0x200003b5

10044604 <discountprintf>:
#include "DiscountIO.h"

#define DEBUGPRINT   	0x0E
#define DEBUGPRINTEND  	'\n'

int	discountprintf (const char * text){
10044604:	b580      	push	{r7, lr}
10044606:	b084      	sub	sp, #16
10044608:	af00      	add	r7, sp, #0
1004460a:	6078      	str	r0, [r7, #4]
	int length = strlen(text);
1004460c:	687b      	ldr	r3, [r7, #4]
1004460e:	0018      	movs	r0, r3
10044610:	f7fb fe04 	bl	1004021c <strlen>
10044614:	0003      	movs	r3, r0
10044616:	60bb      	str	r3, [r7, #8]
	USART_WriteTx(DEBUGPRINT);
10044618:	200e      	movs	r0, #14
1004461a:	f002 fd39 	bl	10047090 <USART_WriteTx>
	for(int i = 0; i < length; i++){
1004461e:	2300      	movs	r3, #0
10044620:	60fb      	str	r3, [r7, #12]
10044622:	e009      	b.n	10044638 <discountprintf+0x34>
		USART_WriteTx(text[i]);
10044624:	68fb      	ldr	r3, [r7, #12]
10044626:	687a      	ldr	r2, [r7, #4]
10044628:	18d3      	adds	r3, r2, r3
1004462a:	781b      	ldrb	r3, [r3, #0]
1004462c:	0018      	movs	r0, r3
1004462e:	f002 fd2f 	bl	10047090 <USART_WriteTx>
	for(int i = 0; i < length; i++){
10044632:	68fb      	ldr	r3, [r7, #12]
10044634:	3301      	adds	r3, #1
10044636:	60fb      	str	r3, [r7, #12]
10044638:	68fa      	ldr	r2, [r7, #12]
1004463a:	68bb      	ldr	r3, [r7, #8]
1004463c:	429a      	cmp	r2, r3
1004463e:	dbf1      	blt.n	10044624 <discountprintf+0x20>
	}
	USART_WriteTx(DEBUGPRINTEND);
10044640:	200a      	movs	r0, #10
10044642:	f002 fd25 	bl	10047090 <USART_WriteTx>
	return 1;
10044646:	2301      	movs	r3, #1
}
10044648:	0018      	movs	r0, r3
1004464a:	46bd      	mov	sp, r7
1004464c:	b004      	add	sp, #16
1004464e:	bd80      	pop	{r7, pc}

10044650 <FIFO_Create>:

//----------------------------------------Private Functions--------------------------------------


//----------------------------------------Public Functions---------------------------------------
FIFO FIFO_Create(void){
10044650:	b580      	push	{r7, lr}
10044652:	b082      	sub	sp, #8
10044654:	af00      	add	r7, sp, #0
	FIFO new = malloc(sizeof(struct _FIFO));
10044656:	200c      	movs	r0, #12
10044658:	f023 fd6a 	bl	10068130 <malloc>
1004465c:	0003      	movs	r3, r0
1004465e:	607b      	str	r3, [r7, #4]
	if(new == NULL){
10044660:	687b      	ldr	r3, [r7, #4]
10044662:	2b00      	cmp	r3, #0
10044664:	d101      	bne.n	1004466a <FIFO_Create+0x1a>
		return NULL;
10044666:	2300      	movs	r3, #0
10044668:	e009      	b.n	1004467e <FIFO_Create+0x2e>
	}
	new->first = NULL;
1004466a:	687b      	ldr	r3, [r7, #4]
1004466c:	2200      	movs	r2, #0
1004466e:	601a      	str	r2, [r3, #0]
	new->last = NULL;
10044670:	687b      	ldr	r3, [r7, #4]
10044672:	2200      	movs	r2, #0
10044674:	605a      	str	r2, [r3, #4]
	new->size = 0;
10044676:	687b      	ldr	r3, [r7, #4]
10044678:	2200      	movs	r2, #0
1004467a:	811a      	strh	r2, [r3, #8]
	return new;
1004467c:	687b      	ldr	r3, [r7, #4]
}
1004467e:	0018      	movs	r0, r3
10044680:	46bd      	mov	sp, r7
10044682:	b002      	add	sp, #8
10044684:	bd80      	pop	{r7, pc}

10044686 <FIFO_Destroy>:

uint8_t FIFO_Destroy(FIFO doomed){
10044686:	b580      	push	{r7, lr}
10044688:	b084      	sub	sp, #16
1004468a:	af00      	add	r7, sp, #0
1004468c:	6078      	str	r0, [r7, #4]
	if(doomed == NULL){
1004468e:	687b      	ldr	r3, [r7, #4]
10044690:	2b00      	cmp	r3, #0
10044692:	d101      	bne.n	10044698 <FIFO_Destroy+0x12>
		return 0;// operation failled
10044694:	2300      	movs	r3, #0
10044696:	e014      	b.n	100446c2 <FIFO_Destroy+0x3c>
	}
	node* cur = doomed->first;
10044698:	687b      	ldr	r3, [r7, #4]
1004469a:	681b      	ldr	r3, [r3, #0]
1004469c:	60fb      	str	r3, [r7, #12]
	while(cur != NULL){
1004469e:	e008      	b.n	100446b2 <FIFO_Destroy+0x2c>
		node* last = cur;
100446a0:	68fb      	ldr	r3, [r7, #12]
100446a2:	60bb      	str	r3, [r7, #8]
		cur = cur->next;
100446a4:	68fb      	ldr	r3, [r7, #12]
100446a6:	685b      	ldr	r3, [r3, #4]
100446a8:	60fb      	str	r3, [r7, #12]
		free(last);
100446aa:	68bb      	ldr	r3, [r7, #8]
100446ac:	0018      	movs	r0, r3
100446ae:	f023 fd49 	bl	10068144 <free>
	while(cur != NULL){
100446b2:	68fb      	ldr	r3, [r7, #12]
100446b4:	2b00      	cmp	r3, #0
100446b6:	d1f3      	bne.n	100446a0 <FIFO_Destroy+0x1a>
	}
	free(doomed);
100446b8:	687b      	ldr	r3, [r7, #4]
100446ba:	0018      	movs	r0, r3
100446bc:	f023 fd42 	bl	10068144 <free>
	return 1;
100446c0:	2301      	movs	r3, #1
}
100446c2:	0018      	movs	r0, r3
100446c4:	46bd      	mov	sp, r7
100446c6:	b004      	add	sp, #16
100446c8:	bd80      	pop	{r7, pc}

100446ca <FIFO_Enqueue>:

uint8_t FIFO_Enqueue(FIFO list, Event_t event){
100446ca:	b580      	push	{r7, lr}
100446cc:	b084      	sub	sp, #16
100446ce:	af00      	add	r7, sp, #0
100446d0:	6078      	str	r0, [r7, #4]
100446d2:	003b      	movs	r3, r7
100446d4:	6019      	str	r1, [r3, #0]
	if(list == NULL){
100446d6:	687b      	ldr	r3, [r7, #4]
100446d8:	2b00      	cmp	r3, #0
100446da:	d101      	bne.n	100446e0 <FIFO_Enqueue+0x16>
		return 0;
100446dc:	2300      	movs	r3, #0
100446de:	e026      	b.n	1004472e <FIFO_Enqueue+0x64>
	}
	node* new = malloc(sizeof(node));
100446e0:	2008      	movs	r0, #8
100446e2:	f023 fd25 	bl	10068130 <malloc>
100446e6:	0003      	movs	r3, r0
100446e8:	60fb      	str	r3, [r7, #12]
	if(new == NULL){
100446ea:	68fb      	ldr	r3, [r7, #12]
100446ec:	2b00      	cmp	r3, #0
100446ee:	d101      	bne.n	100446f4 <FIFO_Enqueue+0x2a>
		return 0;
100446f0:	2300      	movs	r3, #0
100446f2:	e01c      	b.n	1004472e <FIFO_Enqueue+0x64>
	}
	new->event = event;
100446f4:	68fb      	ldr	r3, [r7, #12]
100446f6:	003a      	movs	r2, r7
100446f8:	6812      	ldr	r2, [r2, #0]
100446fa:	601a      	str	r2, [r3, #0]
	new->next = NULL;
100446fc:	68fb      	ldr	r3, [r7, #12]
100446fe:	2200      	movs	r2, #0
10044700:	605a      	str	r2, [r3, #4]
	if(list->last != NULL){//predefined list
10044702:	687b      	ldr	r3, [r7, #4]
10044704:	685b      	ldr	r3, [r3, #4]
10044706:	2b00      	cmp	r3, #0
10044708:	d004      	beq.n	10044714 <FIFO_Enqueue+0x4a>
		list->last->next = new;
1004470a:	687b      	ldr	r3, [r7, #4]
1004470c:	685b      	ldr	r3, [r3, #4]
1004470e:	68fa      	ldr	r2, [r7, #12]
10044710:	605a      	str	r2, [r3, #4]
10044712:	e002      	b.n	1004471a <FIFO_Enqueue+0x50>
	}else{//new list
		list->first = new;
10044714:	687b      	ldr	r3, [r7, #4]
10044716:	68fa      	ldr	r2, [r7, #12]
10044718:	601a      	str	r2, [r3, #0]
	}
	list->last = new;
1004471a:	687b      	ldr	r3, [r7, #4]
1004471c:	68fa      	ldr	r2, [r7, #12]
1004471e:	605a      	str	r2, [r3, #4]
	list->size++;
10044720:	687b      	ldr	r3, [r7, #4]
10044722:	891b      	ldrh	r3, [r3, #8]
10044724:	3301      	adds	r3, #1
10044726:	b29a      	uxth	r2, r3
10044728:	687b      	ldr	r3, [r7, #4]
1004472a:	811a      	strh	r2, [r3, #8]
	return 1;
1004472c:	2301      	movs	r3, #1
}
1004472e:	0018      	movs	r0, r3
10044730:	46bd      	mov	sp, r7
10044732:	b004      	add	sp, #16
10044734:	bd80      	pop	{r7, pc}

10044736 <FIFO_Dequeue>:

Event_t FIFO_Dequeue(FIFO list){
10044736:	b590      	push	{r4, r7, lr}
10044738:	b089      	sub	sp, #36	@ 0x24
1004473a:	af00      	add	r7, sp, #0
1004473c:	6078      	str	r0, [r7, #4]
	if(list == NULL){
1004473e:	687b      	ldr	r3, [r7, #4]
10044740:	2b00      	cmp	r3, #0
10044742:	d107      	bne.n	10044754 <FIFO_Dequeue+0x1e>
		return (Event_t){EVENT_ERROR, 0};
10044744:	2118      	movs	r1, #24
10044746:	187b      	adds	r3, r7, r1
10044748:	22ff      	movs	r2, #255	@ 0xff
1004474a:	701a      	strb	r2, [r3, #0]
1004474c:	187b      	adds	r3, r7, r1
1004474e:	2200      	movs	r2, #0
10044750:	805a      	strh	r2, [r3, #2]
10044752:	e030      	b.n	100447b6 <FIFO_Dequeue+0x80>
	}
	if(list->first == NULL){
10044754:	687b      	ldr	r3, [r7, #4]
10044756:	681b      	ldr	r3, [r3, #0]
10044758:	2b00      	cmp	r3, #0
1004475a:	d10a      	bne.n	10044772 <FIFO_Dequeue+0x3c>
		list->last = NULL;// It is preferable to have a memory leak, rather than crash the system
1004475c:	687b      	ldr	r3, [r7, #4]
1004475e:	2200      	movs	r2, #0
10044760:	605a      	str	r2, [r3, #4]
		return (Event_t){EVENT_NONE, 0};
10044762:	2118      	movs	r1, #24
10044764:	187b      	adds	r3, r7, r1
10044766:	2200      	movs	r2, #0
10044768:	701a      	strb	r2, [r3, #0]
1004476a:	187b      	adds	r3, r7, r1
1004476c:	2200      	movs	r2, #0
1004476e:	805a      	strh	r2, [r3, #2]
10044770:	e021      	b.n	100447b6 <FIFO_Dequeue+0x80>
	}
	node* doomed = list->first;
10044772:	687b      	ldr	r3, [r7, #4]
10044774:	681b      	ldr	r3, [r3, #0]
10044776:	61fb      	str	r3, [r7, #28]
	list->first = doomed->next;
10044778:	69fb      	ldr	r3, [r7, #28]
1004477a:	685a      	ldr	r2, [r3, #4]
1004477c:	687b      	ldr	r3, [r7, #4]
1004477e:	601a      	str	r2, [r3, #0]
	if(list->first == NULL){
10044780:	687b      	ldr	r3, [r7, #4]
10044782:	681b      	ldr	r3, [r3, #0]
10044784:	2b00      	cmp	r3, #0
10044786:	d102      	bne.n	1004478e <FIFO_Dequeue+0x58>
		list->last = NULL;
10044788:	687b      	ldr	r3, [r7, #4]
1004478a:	2200      	movs	r2, #0
1004478c:	605a      	str	r2, [r3, #4]
	}
	Event_t out = doomed->event;
1004478e:	2414      	movs	r4, #20
10044790:	193b      	adds	r3, r7, r4
10044792:	69fa      	ldr	r2, [r7, #28]
10044794:	6812      	ldr	r2, [r2, #0]
10044796:	601a      	str	r2, [r3, #0]
	free(doomed);
10044798:	69fb      	ldr	r3, [r7, #28]
1004479a:	0018      	movs	r0, r3
1004479c:	f023 fcd2 	bl	10068144 <free>
	list->size--;
100447a0:	687b      	ldr	r3, [r7, #4]
100447a2:	891b      	ldrh	r3, [r3, #8]
100447a4:	3b01      	subs	r3, #1
100447a6:	b29a      	uxth	r2, r3
100447a8:	687b      	ldr	r3, [r7, #4]
100447aa:	811a      	strh	r2, [r3, #8]
	return out;
100447ac:	2318      	movs	r3, #24
100447ae:	18fb      	adds	r3, r7, r3
100447b0:	193a      	adds	r2, r7, r4
100447b2:	6812      	ldr	r2, [r2, #0]
100447b4:	601a      	str	r2, [r3, #0]

}
100447b6:	2318      	movs	r3, #24
100447b8:	18fa      	adds	r2, r7, r3
100447ba:	2300      	movs	r3, #0
100447bc:	8811      	ldrh	r1, [r2, #0]
100447be:	0409      	lsls	r1, r1, #16
100447c0:	0c09      	lsrs	r1, r1, #16
100447c2:	0c1b      	lsrs	r3, r3, #16
100447c4:	041b      	lsls	r3, r3, #16
100447c6:	430b      	orrs	r3, r1
100447c8:	8852      	ldrh	r2, [r2, #2]
100447ca:	0412      	lsls	r2, r2, #16
100447cc:	041b      	lsls	r3, r3, #16
100447ce:	0c1b      	lsrs	r3, r3, #16
100447d0:	4313      	orrs	r3, r2
100447d2:	0018      	movs	r0, r3
100447d4:	46bd      	mov	sp, r7
100447d6:	b009      	add	sp, #36	@ 0x24
100447d8:	bd90      	pop	{r4, r7, pc}

100447da <FIFO_GetSize>:

bool FIFO_GetSize(FIFO list){
100447da:	b580      	push	{r7, lr}
100447dc:	b082      	sub	sp, #8
100447de:	af00      	add	r7, sp, #0
100447e0:	6078      	str	r0, [r7, #4]
	return list->size;
100447e2:	687b      	ldr	r3, [r7, #4]
100447e4:	891b      	ldrh	r3, [r3, #8]
100447e6:	1e5a      	subs	r2, r3, #1
100447e8:	4193      	sbcs	r3, r2
100447ea:	b2db      	uxtb	r3, r3
}
100447ec:	0018      	movs	r0, r3
100447ee:	46bd      	mov	sp, r7
100447f0:	b002      	add	sp, #8
100447f2:	bd80      	pop	{r7, pc}

100447f4 <FLASH_Init>:
 * @function: FLASH_Init()
 * @brief: initialize the flash access library
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
uint8_t FLASH_Init(){
100447f4:	b580      	push	{r7, lr}
100447f6:	b082      	sub	sp, #8
100447f8:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
100447fa:	4b36      	ldr	r3, [pc, #216]	@ (100448d4 <FLASH_Init+0xe0>)
100447fc:	781b      	ldrb	r3, [r3, #0]
100447fe:	2b00      	cmp	r3, #0
10044800:	d001      	beq.n	10044806 <FLASH_Init+0x12>
10044802:	2301      	movs	r3, #1
10044804:	e062      	b.n	100448cc <FLASH_Init+0xd8>
	
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
10044806:	4b34      	ldr	r3, [pc, #208]	@ (100448d8 <FLASH_Init+0xe4>)
10044808:	691a      	ldr	r2, [r3, #16]
1004480a:	4b33      	ldr	r3, [pc, #204]	@ (100448d8 <FLASH_Init+0xe4>)
1004480c:	210c      	movs	r1, #12
1004480e:	430a      	orrs	r2, r1
10044810:	611a      	str	r2, [r3, #16]
	//find size of schedule
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
10044812:	2300      	movs	r3, #0
10044814:	607b      	str	r3, [r7, #4]
10044816:	e00f      	b.n	10044838 <FLASH_Init+0x44>
		if ((uint8_t)(*(uint8_t*)(SCHEDULEADDRESS+(i*SCHEDULEEVENTSIZE))) == FLASHEMPTY ){
10044818:	687b      	ldr	r3, [r7, #4]
1004481a:	4a30      	ldr	r2, [pc, #192]	@ (100448dc <FLASH_Init+0xe8>)
1004481c:	4694      	mov	ip, r2
1004481e:	4463      	add	r3, ip
10044820:	00db      	lsls	r3, r3, #3
10044822:	781b      	ldrb	r3, [r3, #0]
10044824:	2bff      	cmp	r3, #255	@ 0xff
10044826:	d104      	bne.n	10044832 <FLASH_Init+0x3e>
			ScheduleSize = i;
10044828:	687b      	ldr	r3, [r7, #4]
1004482a:	b21a      	sxth	r2, r3
1004482c:	4b2c      	ldr	r3, [pc, #176]	@ (100448e0 <FLASH_Init+0xec>)
1004482e:	801a      	strh	r2, [r3, #0]
			break;
10044830:	e005      	b.n	1004483e <FLASH_Init+0x4a>
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
10044832:	687b      	ldr	r3, [r7, #4]
10044834:	3301      	adds	r3, #1
10044836:	607b      	str	r3, [r7, #4]
10044838:	687b      	ldr	r3, [r7, #4]
1004483a:	2bff      	cmp	r3, #255	@ 0xff
1004483c:	ddec      	ble.n	10044818 <FLASH_Init+0x24>
		}
	}
	//find size of logs
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
1004483e:	2300      	movs	r3, #0
10044840:	603b      	str	r3, [r7, #0]
10044842:	e00f      	b.n	10044864 <FLASH_Init+0x70>
		if ((uint8_t)(*(uint8_t*)(LOGSADDRESS+(i*SCHEDULEEVENTSIZE))) == FLASHEMPTY ){
10044844:	683b      	ldr	r3, [r7, #0]
10044846:	4a27      	ldr	r2, [pc, #156]	@ (100448e4 <FLASH_Init+0xf0>)
10044848:	4694      	mov	ip, r2
1004484a:	4463      	add	r3, ip
1004484c:	00db      	lsls	r3, r3, #3
1004484e:	781b      	ldrb	r3, [r3, #0]
10044850:	2bff      	cmp	r3, #255	@ 0xff
10044852:	d104      	bne.n	1004485e <FLASH_Init+0x6a>
			LogsSize = i;
10044854:	683b      	ldr	r3, [r7, #0]
10044856:	b21a      	sxth	r2, r3
10044858:	4b23      	ldr	r3, [pc, #140]	@ (100448e8 <FLASH_Init+0xf4>)
1004485a:	801a      	strh	r2, [r3, #0]
			break;
1004485c:	e005      	b.n	1004486a <FLASH_Init+0x76>
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
1004485e:	683b      	ldr	r3, [r7, #0]
10044860:	3301      	adds	r3, #1
10044862:	603b      	str	r3, [r7, #0]
10044864:	683b      	ldr	r3, [r7, #0]
10044866:	2bff      	cmp	r3, #255	@ 0xff
10044868:	ddec      	ble.n	10044844 <FLASH_Init+0x50>
		}
	}
	initialized = 1;
1004486a:	4b1a      	ldr	r3, [pc, #104]	@ (100448d4 <FLASH_Init+0xe0>)
1004486c:	2201      	movs	r2, #1
1004486e:	701a      	strb	r2, [r3, #0]
	//load default values into the duty cycle and volume if they are not initialized
	if(FLASH_GetVolume() == FLASHEMPTY ||FLASH_GetDutyCycle() == FLASHEMPTY){
10044870:	f000 f87e 	bl	10044970 <FLASH_GetVolume>
10044874:	0003      	movs	r3, r0
10044876:	2bff      	cmp	r3, #255	@ 0xff
10044878:	d004      	beq.n	10044884 <FLASH_Init+0x90>
1004487a:	f000 f88f 	bl	1004499c <FLASH_GetDutyCycle>
1004487e:	0003      	movs	r3, r0
10044880:	2bff      	cmp	r3, #255	@ 0xff
10044882:	d122      	bne.n	100448ca <FLASH_Init+0xd6>
		if(FLASH_GetVolume() == FLASHEMPTY && FLASH_GetDutyCycle() == FLASHEMPTY){
10044884:	f000 f874 	bl	10044970 <FLASH_GetVolume>
10044888:	0003      	movs	r3, r0
1004488a:	2bff      	cmp	r3, #255	@ 0xff
1004488c:	d109      	bne.n	100448a2 <FLASH_Init+0xae>
1004488e:	f000 f885 	bl	1004499c <FLASH_GetDutyCycle>
10044892:	0003      	movs	r3, r0
10044894:	2bff      	cmp	r3, #255	@ 0xff
10044896:	d104      	bne.n	100448a2 <FLASH_Init+0xae>
			FLASH_SetDCVol(50, 40);
10044898:	2128      	movs	r1, #40	@ 0x28
1004489a:	2032      	movs	r0, #50	@ 0x32
1004489c:	f000 f826 	bl	100448ec <FLASH_SetDCVol>
100448a0:	e013      	b.n	100448ca <FLASH_Init+0xd6>
		}else {
			if(FLASH_GetVolume() == FLASHEMPTY){
100448a2:	f000 f865 	bl	10044970 <FLASH_GetVolume>
100448a6:	0003      	movs	r3, r0
100448a8:	2bff      	cmp	r3, #255	@ 0xff
100448aa:	d107      	bne.n	100448bc <FLASH_Init+0xc8>
				FLASH_SetDCVol(50, FLASH_GetDutyCycle());
100448ac:	f000 f876 	bl	1004499c <FLASH_GetDutyCycle>
100448b0:	0003      	movs	r3, r0
100448b2:	0019      	movs	r1, r3
100448b4:	2032      	movs	r0, #50	@ 0x32
100448b6:	f000 f819 	bl	100448ec <FLASH_SetDCVol>
100448ba:	e006      	b.n	100448ca <FLASH_Init+0xd6>
			}else {
				FLASH_SetDCVol(FLASH_GetVolume(), 40);
100448bc:	f000 f858 	bl	10044970 <FLASH_GetVolume>
100448c0:	0003      	movs	r3, r0
100448c2:	2128      	movs	r1, #40	@ 0x28
100448c4:	0018      	movs	r0, r3
100448c6:	f000 f811 	bl	100448ec <FLASH_SetDCVol>
			}
		}
	}
	return INIT_OK;
100448ca:	2301      	movs	r3, #1
}
100448cc:	0018      	movs	r0, r3
100448ce:	46bd      	mov	sp, r7
100448d0:	b002      	add	sp, #8
100448d2:	bd80      	pop	{r7, pc}
100448d4:	200003d0 	.word	0x200003d0
100448d8:	40001000 	.word	0x40001000
100448dc:	0200de00 	.word	0x0200de00
100448e0:	200003cc 	.word	0x200003cc
100448e4:	0200dd00 	.word	0x0200dd00
100448e8:	200003ce 	.word	0x200003ce

100448ec <FLASH_SetDCVol>:
 * @function: FLASH_SetVolume();
 * @brief: edits the volume and duty cycle stored in memory
 * @param: none
 * @return: success status
 */
uint8_t FLASH_SetDCVol(uint8_t volume, uint8_t DC){
100448ec:	b5b0      	push	{r4, r5, r7, lr}
100448ee:	b088      	sub	sp, #32
100448f0:	af00      	add	r7, sp, #0
100448f2:	0002      	movs	r2, r0
100448f4:	1dfb      	adds	r3, r7, #7
100448f6:	701a      	strb	r2, [r3, #0]
100448f8:	1dbb      	adds	r3, r7, #6
100448fa:	1c0a      	adds	r2, r1, #0
100448fc:	701a      	strb	r2, [r3, #0]
	if(!initialized){return 0;}
100448fe:	4b1a      	ldr	r3, [pc, #104]	@ (10044968 <FLASH_SetDCVol+0x7c>)
10044900:	781b      	ldrb	r3, [r3, #0]
10044902:	2b00      	cmp	r3, #0
10044904:	d101      	bne.n	1004490a <FLASH_SetDCVol+0x1e>
10044906:	2300      	movs	r3, #0
10044908:	e02a      	b.n	10044960 <FLASH_SetDCVol+0x74>
	FLASH_EraseInitTypeDef erase;
	erase.Page = DCVOLPAGE;
1004490a:	210c      	movs	r1, #12
1004490c:	187b      	adds	r3, r7, r1
1004490e:	225c      	movs	r2, #92	@ 0x5c
10044910:	605a      	str	r2, [r3, #4]
	erase.NbPages = 1;
10044912:	187b      	adds	r3, r7, r1
10044914:	2201      	movs	r2, #1
10044916:	609a      	str	r2, [r3, #8]
	erase.TypeErase = FLASH_TYPEERASE_PAGES;
10044918:	187b      	adds	r3, r7, r1
1004491a:	2200      	movs	r2, #0
1004491c:	601a      	str	r2, [r3, #0]
	uint32_t faultypage;
	HAL_FLASHEx_Erase(&erase, &faultypage);
1004491e:	2308      	movs	r3, #8
10044920:	18fa      	adds	r2, r7, r3
10044922:	187b      	adds	r3, r7, r1
10044924:	0011      	movs	r1, r2
10044926:	0018      	movs	r0, r3
10044928:	f003 ffd6 	bl	100488d8 <HAL_FLASHEx_Erase>
	FLASH_GetVolume();
1004492c:	f000 f820 	bl	10044970 <FLASH_GetVolume>
	FLASH_GetDutyCycle();
10044930:	f000 f834 	bl	1004499c <FLASH_GetDutyCycle>
	uint32_t data = ((uint32_t)(DC)<<8)+(uint32_t)(volume);
10044934:	1dbb      	adds	r3, r7, #6
10044936:	781b      	ldrb	r3, [r3, #0]
10044938:	021a      	lsls	r2, r3, #8
1004493a:	1dfb      	adds	r3, r7, #7
1004493c:	781b      	ldrb	r3, [r3, #0]
1004493e:	18d3      	adds	r3, r2, r3
10044940:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, VOLUMEADDRESS, data);
10044942:	251b      	movs	r5, #27
10044944:	197c      	adds	r4, r7, r5
10044946:	69fb      	ldr	r3, [r7, #28]
10044948:	4908      	ldr	r1, [pc, #32]	@ (1004496c <FLASH_SetDCVol+0x80>)
1004494a:	001a      	movs	r2, r3
1004494c:	2000      	movs	r0, #0
1004494e:	f003 fee9 	bl	10048724 <HAL_FLASH_Program>
10044952:	0003      	movs	r3, r0
10044954:	7023      	strb	r3, [r4, #0]
	return status == HAL_OK;
10044956:	197b      	adds	r3, r7, r5
10044958:	781b      	ldrb	r3, [r3, #0]
1004495a:	425a      	negs	r2, r3
1004495c:	4153      	adcs	r3, r2
1004495e:	b2db      	uxtb	r3, r3
}
10044960:	0018      	movs	r0, r3
10044962:	46bd      	mov	sp, r7
10044964:	b008      	add	sp, #32
10044966:	bdb0      	pop	{r4, r5, r7, pc}
10044968:	200003d0 	.word	0x200003d0
1004496c:	1006e000 	.word	0x1006e000

10044970 <FLASH_GetVolume>:
 * @function: FLASH_GetVolume();
 * @brief: read the volume stored in memory
 * @param: none
 * @return: volume
 */
uint8_t FLASH_GetVolume(){
10044970:	b580      	push	{r7, lr}
10044972:	b082      	sub	sp, #8
10044974:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10044976:	4b07      	ldr	r3, [pc, #28]	@ (10044994 <FLASH_GetVolume+0x24>)
10044978:	781b      	ldrb	r3, [r3, #0]
1004497a:	2b00      	cmp	r3, #0
1004497c:	d101      	bne.n	10044982 <FLASH_GetVolume+0x12>
1004497e:	2300      	movs	r3, #0
10044980:	e003      	b.n	1004498a <FLASH_GetVolume+0x1a>
	uint8_t* adr = (uint8_t*)VOLUMEADDRESS;
10044982:	4b05      	ldr	r3, [pc, #20]	@ (10044998 <FLASH_GetVolume+0x28>)
10044984:	607b      	str	r3, [r7, #4]
	return *adr;
10044986:	687b      	ldr	r3, [r7, #4]
10044988:	781b      	ldrb	r3, [r3, #0]
}
1004498a:	0018      	movs	r0, r3
1004498c:	46bd      	mov	sp, r7
1004498e:	b002      	add	sp, #8
10044990:	bd80      	pop	{r7, pc}
10044992:	46c0      	nop			@ (mov r8, r8)
10044994:	200003d0 	.word	0x200003d0
10044998:	1006e000 	.word	0x1006e000

1004499c <FLASH_GetDutyCycle>:
 * @function: FLASH_GetDutyCycle();
 * @brief: read the volume stored in memory
 * @param: none
 * @return: Duty Cycle
 */
uint8_t FLASH_GetDutyCycle(){
1004499c:	b580      	push	{r7, lr}
1004499e:	b082      	sub	sp, #8
100449a0:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
100449a2:	4b07      	ldr	r3, [pc, #28]	@ (100449c0 <FLASH_GetDutyCycle+0x24>)
100449a4:	781b      	ldrb	r3, [r3, #0]
100449a6:	2b00      	cmp	r3, #0
100449a8:	d101      	bne.n	100449ae <FLASH_GetDutyCycle+0x12>
100449aa:	2300      	movs	r3, #0
100449ac:	e003      	b.n	100449b6 <FLASH_GetDutyCycle+0x1a>
	uint8_t* adr = (uint8_t*)DCADDRESS;
100449ae:	4b05      	ldr	r3, [pc, #20]	@ (100449c4 <FLASH_GetDutyCycle+0x28>)
100449b0:	607b      	str	r3, [r7, #4]
	return *adr;
100449b2:	687b      	ldr	r3, [r7, #4]
100449b4:	781b      	ldrb	r3, [r3, #0]
}
100449b6:	0018      	movs	r0, r3
100449b8:	46bd      	mov	sp, r7
100449ba:	b002      	add	sp, #8
100449bc:	bd80      	pop	{r7, pc}
100449be:	46c0      	nop			@ (mov r8, r8)
100449c0:	200003d0 	.word	0x200003d0
100449c4:	1006e001 	.word	0x1006e001

100449c8 <FLASH_AppendLogs>:
 * @function: FLASH_AppendLogs();
 * @brief: Adds a new event entry to the logs
 * @param: none
 * @return: success status
 */
uint8_t FLASH_AppendLogs(scheduleEvent event){
100449c8:	b580      	push	{r7, lr}
100449ca:	b084      	sub	sp, #16
100449cc:	af00      	add	r7, sp, #0
100449ce:	003b      	movs	r3, r7
100449d0:	6018      	str	r0, [r3, #0]
100449d2:	6059      	str	r1, [r3, #4]
	if(!initialized){return 0;}
100449d4:	4b27      	ldr	r3, [pc, #156]	@ (10044a74 <FLASH_AppendLogs+0xac>)
100449d6:	781b      	ldrb	r3, [r3, #0]
100449d8:	2b00      	cmp	r3, #0
100449da:	d101      	bne.n	100449e0 <FLASH_AppendLogs+0x18>
100449dc:	2300      	movs	r3, #0
100449de:	e044      	b.n	10044a6a <FLASH_AppendLogs+0xa2>
	LogsSize++;
100449e0:	4b25      	ldr	r3, [pc, #148]	@ (10044a78 <FLASH_AppendLogs+0xb0>)
100449e2:	2200      	movs	r2, #0
100449e4:	5e9b      	ldrsh	r3, [r3, r2]
100449e6:	b29b      	uxth	r3, r3
100449e8:	3301      	adds	r3, #1
100449ea:	b29b      	uxth	r3, r3
100449ec:	b21a      	sxth	r2, r3
100449ee:	4b22      	ldr	r3, [pc, #136]	@ (10044a78 <FLASH_AppendLogs+0xb0>)
100449f0:	801a      	strh	r2, [r3, #0]
	uint32_t Data1 = (event.month)|(event.day<<8)|(event.start<<16)|(event.stop<<24);
100449f2:	003b      	movs	r3, r7
100449f4:	781b      	ldrb	r3, [r3, #0]
100449f6:	001a      	movs	r2, r3
100449f8:	003b      	movs	r3, r7
100449fa:	785b      	ldrb	r3, [r3, #1]
100449fc:	021b      	lsls	r3, r3, #8
100449fe:	431a      	orrs	r2, r3
10044a00:	003b      	movs	r3, r7
10044a02:	789b      	ldrb	r3, [r3, #2]
10044a04:	041b      	lsls	r3, r3, #16
10044a06:	431a      	orrs	r2, r3
10044a08:	003b      	movs	r3, r7
10044a0a:	78db      	ldrb	r3, [r3, #3]
10044a0c:	061b      	lsls	r3, r3, #24
10044a0e:	4313      	orrs	r3, r2
10044a10:	60fb      	str	r3, [r7, #12]
	uint32_t Data2 = (event.folder)|(event.track<<8);
10044a12:	003b      	movs	r3, r7
10044a14:	791b      	ldrb	r3, [r3, #4]
10044a16:	001a      	movs	r2, r3
10044a18:	003b      	movs	r3, r7
10044a1a:	795b      	ldrb	r3, [r3, #5]
10044a1c:	021b      	lsls	r3, r3, #8
10044a1e:	4313      	orrs	r3, r2
10044a20:	60bb      	str	r3, [r7, #8]
	//this isn't blocking code officer I swear! (this is blocking code, to be improved later)
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, LOGSADDRESS+LogsSize*SCHEDULEEVENTSIZE, Data1) != HAL_OK ){
10044a22:	4b15      	ldr	r3, [pc, #84]	@ (10044a78 <FLASH_AppendLogs+0xb0>)
10044a24:	2200      	movs	r2, #0
10044a26:	5e9b      	ldrsh	r3, [r3, r2]
10044a28:	4a14      	ldr	r2, [pc, #80]	@ (10044a7c <FLASH_AppendLogs+0xb4>)
10044a2a:	4694      	mov	ip, r2
10044a2c:	4463      	add	r3, ip
10044a2e:	00db      	lsls	r3, r3, #3
10044a30:	0019      	movs	r1, r3
10044a32:	68fb      	ldr	r3, [r7, #12]
10044a34:	001a      	movs	r2, r3
10044a36:	2000      	movs	r0, #0
10044a38:	f003 fe74 	bl	10048724 <HAL_FLASH_Program>
10044a3c:	1e03      	subs	r3, r0, #0
10044a3e:	d001      	beq.n	10044a44 <FLASH_AppendLogs+0x7c>
		return 0;
10044a40:	2300      	movs	r3, #0
10044a42:	e012      	b.n	10044a6a <FLASH_AppendLogs+0xa2>
	}
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, LOGSADDRESS+LogsSize*SCHEDULEEVENTSIZE+4, Data2) != HAL_OK ){
10044a44:	4b0c      	ldr	r3, [pc, #48]	@ (10044a78 <FLASH_AppendLogs+0xb0>)
10044a46:	2200      	movs	r2, #0
10044a48:	5e9b      	ldrsh	r3, [r3, r2]
10044a4a:	4a0c      	ldr	r2, [pc, #48]	@ (10044a7c <FLASH_AppendLogs+0xb4>)
10044a4c:	4694      	mov	ip, r2
10044a4e:	4463      	add	r3, ip
10044a50:	00db      	lsls	r3, r3, #3
10044a52:	3304      	adds	r3, #4
10044a54:	0019      	movs	r1, r3
10044a56:	68bb      	ldr	r3, [r7, #8]
10044a58:	001a      	movs	r2, r3
10044a5a:	2000      	movs	r0, #0
10044a5c:	f003 fe62 	bl	10048724 <HAL_FLASH_Program>
10044a60:	1e03      	subs	r3, r0, #0
10044a62:	d001      	beq.n	10044a68 <FLASH_AppendLogs+0xa0>
		return 0;
10044a64:	2300      	movs	r3, #0
10044a66:	e000      	b.n	10044a6a <FLASH_AppendLogs+0xa2>
	}
	return 1;
10044a68:	2301      	movs	r3, #1
}
10044a6a:	0018      	movs	r0, r3
10044a6c:	46bd      	mov	sp, r7
10044a6e:	b004      	add	sp, #16
10044a70:	bd80      	pop	{r7, pc}
10044a72:	46c0      	nop			@ (mov r8, r8)
10044a74:	200003d0 	.word	0x200003d0
10044a78:	200003ce 	.word	0x200003ce
10044a7c:	0200dd00 	.word	0x0200dd00

10044a80 <FLASH_GetLogsSize>:
 * @function: FLASH_GetLogsSize();
 * @brief: returns the size of the logs
 * @param: none
 * @return: Logs size
 */
uint16_t FLASH_GetLogsSize(){
10044a80:	b580      	push	{r7, lr}
10044a82:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10044a84:	4b06      	ldr	r3, [pc, #24]	@ (10044aa0 <FLASH_GetLogsSize+0x20>)
10044a86:	781b      	ldrb	r3, [r3, #0]
10044a88:	2b00      	cmp	r3, #0
10044a8a:	d101      	bne.n	10044a90 <FLASH_GetLogsSize+0x10>
10044a8c:	2300      	movs	r3, #0
10044a8e:	e003      	b.n	10044a98 <FLASH_GetLogsSize+0x18>
	return LogsSize;
10044a90:	4b04      	ldr	r3, [pc, #16]	@ (10044aa4 <FLASH_GetLogsSize+0x24>)
10044a92:	2200      	movs	r2, #0
10044a94:	5e9b      	ldrsh	r3, [r3, r2]
10044a96:	b29b      	uxth	r3, r3
}
10044a98:	0018      	movs	r0, r3
10044a9a:	46bd      	mov	sp, r7
10044a9c:	bd80      	pop	{r7, pc}
10044a9e:	46c0      	nop			@ (mov r8, r8)
10044aa0:	200003d0 	.word	0x200003d0
10044aa4:	200003ce 	.word	0x200003ce

10044aa8 <FLASH_ReadLogs>:
 * @function: FLASH_ReadLogs();
 * @brief: allows reading the logs that have been stored in flash memory
 * @param: index to read at
 * @return: an schedule event struct at index, null if invalid index
 */
scheduleEvent FLASH_ReadLogs(uint16_t index){
10044aa8:	b590      	push	{r4, r7, lr}
10044aaa:	b087      	sub	sp, #28
10044aac:	af00      	add	r7, sp, #0
10044aae:	6078      	str	r0, [r7, #4]
10044ab0:	000a      	movs	r2, r1
10044ab2:	1cbb      	adds	r3, r7, #2
10044ab4:	801a      	strh	r2, [r3, #0]
	scheduleEvent event = (scheduleEvent){0, 0, 0, 0, 0, 0};
10044ab6:	2410      	movs	r4, #16
10044ab8:	193b      	adds	r3, r7, r4
10044aba:	0018      	movs	r0, r3
10044abc:	2306      	movs	r3, #6
10044abe:	001a      	movs	r2, r3
10044ac0:	2100      	movs	r1, #0
10044ac2:	f023 fe3b 	bl	1006873c <memset>
	if(!initialized){return event;}
10044ac6:	4b2e      	ldr	r3, [pc, #184]	@ (10044b80 <FLASH_ReadLogs+0xd8>)
10044ac8:	781b      	ldrb	r3, [r3, #0]
10044aca:	2b00      	cmp	r3, #0
10044acc:	d108      	bne.n	10044ae0 <FLASH_ReadLogs+0x38>
10044ace:	687a      	ldr	r2, [r7, #4]
10044ad0:	193b      	adds	r3, r7, r4
10044ad2:	0010      	movs	r0, r2
10044ad4:	0019      	movs	r1, r3
10044ad6:	2306      	movs	r3, #6
10044ad8:	001a      	movs	r2, r3
10044ada:	f023 fea4 	bl	10068826 <memcpy>
10044ade:	e04b      	b.n	10044b78 <FLASH_ReadLogs+0xd0>
	if(index >= 0 && index <= LogsSize){
10044ae0:	1cbb      	adds	r3, r7, #2
10044ae2:	881b      	ldrh	r3, [r3, #0]
10044ae4:	4a27      	ldr	r2, [pc, #156]	@ (10044b84 <FLASH_ReadLogs+0xdc>)
10044ae6:	2100      	movs	r1, #0
10044ae8:	5e52      	ldrsh	r2, [r2, r1]
10044aea:	4293      	cmp	r3, r2
10044aec:	dc3b      	bgt.n	10044b66 <FLASH_ReadLogs+0xbe>
		event.month = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE));
10044aee:	1cbb      	adds	r3, r7, #2
10044af0:	881b      	ldrh	r3, [r3, #0]
10044af2:	4a25      	ldr	r2, [pc, #148]	@ (10044b88 <FLASH_ReadLogs+0xe0>)
10044af4:	4694      	mov	ip, r2
10044af6:	4463      	add	r3, ip
10044af8:	00db      	lsls	r3, r3, #3
10044afa:	781a      	ldrb	r2, [r3, #0]
10044afc:	2110      	movs	r1, #16
10044afe:	187b      	adds	r3, r7, r1
10044b00:	701a      	strb	r2, [r3, #0]
		event.day = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+1));
10044b02:	1cbb      	adds	r3, r7, #2
10044b04:	881b      	ldrh	r3, [r3, #0]
10044b06:	4a20      	ldr	r2, [pc, #128]	@ (10044b88 <FLASH_ReadLogs+0xe0>)
10044b08:	4694      	mov	ip, r2
10044b0a:	4463      	add	r3, ip
10044b0c:	00db      	lsls	r3, r3, #3
10044b0e:	3301      	adds	r3, #1
10044b10:	781a      	ldrb	r2, [r3, #0]
10044b12:	187b      	adds	r3, r7, r1
10044b14:	705a      	strb	r2, [r3, #1]
		event.start = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+2));
10044b16:	1cbb      	adds	r3, r7, #2
10044b18:	881b      	ldrh	r3, [r3, #0]
10044b1a:	4a1b      	ldr	r2, [pc, #108]	@ (10044b88 <FLASH_ReadLogs+0xe0>)
10044b1c:	4694      	mov	ip, r2
10044b1e:	4463      	add	r3, ip
10044b20:	00db      	lsls	r3, r3, #3
10044b22:	3302      	adds	r3, #2
10044b24:	781a      	ldrb	r2, [r3, #0]
10044b26:	187b      	adds	r3, r7, r1
10044b28:	709a      	strb	r2, [r3, #2]
		event.stop = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+3));
10044b2a:	1cbb      	adds	r3, r7, #2
10044b2c:	881b      	ldrh	r3, [r3, #0]
10044b2e:	4a16      	ldr	r2, [pc, #88]	@ (10044b88 <FLASH_ReadLogs+0xe0>)
10044b30:	4694      	mov	ip, r2
10044b32:	4463      	add	r3, ip
10044b34:	00db      	lsls	r3, r3, #3
10044b36:	3303      	adds	r3, #3
10044b38:	781a      	ldrb	r2, [r3, #0]
10044b3a:	187b      	adds	r3, r7, r1
10044b3c:	70da      	strb	r2, [r3, #3]
		event.folder = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+4));
10044b3e:	1cbb      	adds	r3, r7, #2
10044b40:	881b      	ldrh	r3, [r3, #0]
10044b42:	4a11      	ldr	r2, [pc, #68]	@ (10044b88 <FLASH_ReadLogs+0xe0>)
10044b44:	4694      	mov	ip, r2
10044b46:	4463      	add	r3, ip
10044b48:	00db      	lsls	r3, r3, #3
10044b4a:	3304      	adds	r3, #4
10044b4c:	781a      	ldrb	r2, [r3, #0]
10044b4e:	187b      	adds	r3, r7, r1
10044b50:	711a      	strb	r2, [r3, #4]
		event.track = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+5));
10044b52:	1cbb      	adds	r3, r7, #2
10044b54:	881b      	ldrh	r3, [r3, #0]
10044b56:	4a0c      	ldr	r2, [pc, #48]	@ (10044b88 <FLASH_ReadLogs+0xe0>)
10044b58:	4694      	mov	ip, r2
10044b5a:	4463      	add	r3, ip
10044b5c:	00db      	lsls	r3, r3, #3
10044b5e:	3305      	adds	r3, #5
10044b60:	781a      	ldrb	r2, [r3, #0]
10044b62:	187b      	adds	r3, r7, r1
10044b64:	715a      	strb	r2, [r3, #5]

	}
	return event;
10044b66:	687a      	ldr	r2, [r7, #4]
10044b68:	2310      	movs	r3, #16
10044b6a:	18fb      	adds	r3, r7, r3
10044b6c:	0010      	movs	r0, r2
10044b6e:	0019      	movs	r1, r3
10044b70:	2306      	movs	r3, #6
10044b72:	001a      	movs	r2, r3
10044b74:	f023 fe57 	bl	10068826 <memcpy>
}
10044b78:	6878      	ldr	r0, [r7, #4]
10044b7a:	46bd      	mov	sp, r7
10044b7c:	b007      	add	sp, #28
10044b7e:	bd90      	pop	{r4, r7, pc}
10044b80:	200003d0 	.word	0x200003d0
10044b84:	200003ce 	.word	0x200003ce
10044b88:	0200dd00 	.word	0x0200dd00

10044b8c <FLASH_AppendSchedule>:
 * @function: FLASH_AppendSchedule();
 * @brief: Adds a new event entry to the schedule
 * @param: none
 * @return: success status
 */
uint8_t FLASH_AppendSchedule(scheduleEvent event){
10044b8c:	b580      	push	{r7, lr}
10044b8e:	b086      	sub	sp, #24
10044b90:	af00      	add	r7, sp, #0
10044b92:	2308      	movs	r3, #8
10044b94:	18fb      	adds	r3, r7, r3
10044b96:	6018      	str	r0, [r3, #0]
10044b98:	6059      	str	r1, [r3, #4]
	if(!initialized){return 0;}
10044b9a:	4b2d      	ldr	r3, [pc, #180]	@ (10044c50 <FLASH_AppendSchedule+0xc4>)
10044b9c:	781b      	ldrb	r3, [r3, #0]
10044b9e:	2b00      	cmp	r3, #0
10044ba0:	d101      	bne.n	10044ba6 <FLASH_AppendSchedule+0x1a>
10044ba2:	2300      	movs	r3, #0
10044ba4:	e050      	b.n	10044c48 <FLASH_AppendSchedule+0xbc>
	uint32_t Data1 = (event.month)|(event.day<<8)|(event.start<<16)|(event.stop<<24);
10044ba6:	2108      	movs	r1, #8
10044ba8:	187b      	adds	r3, r7, r1
10044baa:	781b      	ldrb	r3, [r3, #0]
10044bac:	001a      	movs	r2, r3
10044bae:	187b      	adds	r3, r7, r1
10044bb0:	785b      	ldrb	r3, [r3, #1]
10044bb2:	021b      	lsls	r3, r3, #8
10044bb4:	431a      	orrs	r2, r3
10044bb6:	187b      	adds	r3, r7, r1
10044bb8:	789b      	ldrb	r3, [r3, #2]
10044bba:	041b      	lsls	r3, r3, #16
10044bbc:	431a      	orrs	r2, r3
10044bbe:	187b      	adds	r3, r7, r1
10044bc0:	78db      	ldrb	r3, [r3, #3]
10044bc2:	061b      	lsls	r3, r3, #24
10044bc4:	4313      	orrs	r3, r2
10044bc6:	617b      	str	r3, [r7, #20]
	uint32_t Data2 = (event.folder)|(event.track<<8);
10044bc8:	187b      	adds	r3, r7, r1
10044bca:	791b      	ldrb	r3, [r3, #4]
10044bcc:	001a      	movs	r2, r3
10044bce:	187b      	adds	r3, r7, r1
10044bd0:	795b      	ldrb	r3, [r3, #5]
10044bd2:	021b      	lsls	r3, r3, #8
10044bd4:	4313      	orrs	r3, r2
10044bd6:	613b      	str	r3, [r7, #16]
	//this isn't blocking code officer I swear! (this is blocking code)
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, SCHEDULEADDRESS+ScheduleSize*SCHEDULEEVENTSIZE, Data1) != HAL_OK ){
10044bd8:	4b1e      	ldr	r3, [pc, #120]	@ (10044c54 <FLASH_AppendSchedule+0xc8>)
10044bda:	2200      	movs	r2, #0
10044bdc:	5e9b      	ldrsh	r3, [r3, r2]
10044bde:	4a1e      	ldr	r2, [pc, #120]	@ (10044c58 <FLASH_AppendSchedule+0xcc>)
10044be0:	4694      	mov	ip, r2
10044be2:	4463      	add	r3, ip
10044be4:	00db      	lsls	r3, r3, #3
10044be6:	0019      	movs	r1, r3
10044be8:	697b      	ldr	r3, [r7, #20]
10044bea:	001a      	movs	r2, r3
10044bec:	2000      	movs	r0, #0
10044bee:	f003 fd99 	bl	10048724 <HAL_FLASH_Program>
10044bf2:	1e03      	subs	r3, r0, #0
10044bf4:	d001      	beq.n	10044bfa <FLASH_AppendSchedule+0x6e>
		return 0;
10044bf6:	2300      	movs	r3, #0
10044bf8:	e026      	b.n	10044c48 <FLASH_AppendSchedule+0xbc>
	}
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, SCHEDULEADDRESS+ScheduleSize*SCHEDULEEVENTSIZE+4, Data2) != HAL_OK ){
10044bfa:	4b16      	ldr	r3, [pc, #88]	@ (10044c54 <FLASH_AppendSchedule+0xc8>)
10044bfc:	2200      	movs	r2, #0
10044bfe:	5e9b      	ldrsh	r3, [r3, r2]
10044c00:	4a15      	ldr	r2, [pc, #84]	@ (10044c58 <FLASH_AppendSchedule+0xcc>)
10044c02:	4694      	mov	ip, r2
10044c04:	4463      	add	r3, ip
10044c06:	00db      	lsls	r3, r3, #3
10044c08:	3304      	adds	r3, #4
10044c0a:	0019      	movs	r1, r3
10044c0c:	693b      	ldr	r3, [r7, #16]
10044c0e:	001a      	movs	r2, r3
10044c10:	2000      	movs	r0, #0
10044c12:	f003 fd87 	bl	10048724 <HAL_FLASH_Program>
10044c16:	1e03      	subs	r3, r0, #0
10044c18:	d001      	beq.n	10044c1e <FLASH_AppendSchedule+0x92>
		return 0;
10044c1a:	2300      	movs	r3, #0
10044c1c:	e014      	b.n	10044c48 <FLASH_AppendSchedule+0xbc>
	}
	ScheduleSize++;
10044c1e:	4b0d      	ldr	r3, [pc, #52]	@ (10044c54 <FLASH_AppendSchedule+0xc8>)
10044c20:	2200      	movs	r2, #0
10044c22:	5e9b      	ldrsh	r3, [r3, r2]
10044c24:	b29b      	uxth	r3, r3
10044c26:	3301      	adds	r3, #1
10044c28:	b29b      	uxth	r3, r3
10044c2a:	b21a      	sxth	r2, r3
10044c2c:	4b09      	ldr	r3, [pc, #36]	@ (10044c54 <FLASH_AppendSchedule+0xc8>)
10044c2e:	801a      	strh	r2, [r3, #0]
	FLASH_ReadSchedule(ScheduleSize-1);
10044c30:	4b08      	ldr	r3, [pc, #32]	@ (10044c54 <FLASH_AppendSchedule+0xc8>)
10044c32:	2200      	movs	r2, #0
10044c34:	5e9b      	ldrsh	r3, [r3, r2]
10044c36:	b29b      	uxth	r3, r3
10044c38:	3b01      	subs	r3, #1
10044c3a:	b29a      	uxth	r2, r3
10044c3c:	003b      	movs	r3, r7
10044c3e:	0011      	movs	r1, r2
10044c40:	0018      	movs	r0, r3
10044c42:	f000 f81f 	bl	10044c84 <FLASH_ReadSchedule>
	return 1;
10044c46:	2301      	movs	r3, #1
}
10044c48:	0018      	movs	r0, r3
10044c4a:	46bd      	mov	sp, r7
10044c4c:	b006      	add	sp, #24
10044c4e:	bd80      	pop	{r7, pc}
10044c50:	200003d0 	.word	0x200003d0
10044c54:	200003cc 	.word	0x200003cc
10044c58:	0200de00 	.word	0x0200de00

10044c5c <FLASH_GetScheduleSize>:
 * @function: FLASH_GetScheduleSize();
 * @brief: returns the size of the schedule
 * @param: none
 * @return: Schedule size
 */
uint16_t FLASH_GetScheduleSize(){
10044c5c:	b580      	push	{r7, lr}
10044c5e:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10044c60:	4b06      	ldr	r3, [pc, #24]	@ (10044c7c <FLASH_GetScheduleSize+0x20>)
10044c62:	781b      	ldrb	r3, [r3, #0]
10044c64:	2b00      	cmp	r3, #0
10044c66:	d101      	bne.n	10044c6c <FLASH_GetScheduleSize+0x10>
10044c68:	2300      	movs	r3, #0
10044c6a:	e003      	b.n	10044c74 <FLASH_GetScheduleSize+0x18>
	return ScheduleSize;
10044c6c:	4b04      	ldr	r3, [pc, #16]	@ (10044c80 <FLASH_GetScheduleSize+0x24>)
10044c6e:	2200      	movs	r2, #0
10044c70:	5e9b      	ldrsh	r3, [r3, r2]
10044c72:	b29b      	uxth	r3, r3
}
10044c74:	0018      	movs	r0, r3
10044c76:	46bd      	mov	sp, r7
10044c78:	bd80      	pop	{r7, pc}
10044c7a:	46c0      	nop			@ (mov r8, r8)
10044c7c:	200003d0 	.word	0x200003d0
10044c80:	200003cc 	.word	0x200003cc

10044c84 <FLASH_ReadSchedule>:
 * @function: FLASH_ReadSchedule();
 * @brief: allows reading the schedule that have been stored in flash memory
 * @param: index to read at
 * @return: an schedule event struct at index
 */
scheduleEvent FLASH_ReadSchedule(uint16_t index){
10044c84:	b590      	push	{r4, r7, lr}
10044c86:	b087      	sub	sp, #28
10044c88:	af00      	add	r7, sp, #0
10044c8a:	6078      	str	r0, [r7, #4]
10044c8c:	000a      	movs	r2, r1
10044c8e:	1cbb      	adds	r3, r7, #2
10044c90:	801a      	strh	r2, [r3, #0]
	scheduleEvent event = (scheduleEvent){0, 0, 0, 0, 0, 0};
10044c92:	2410      	movs	r4, #16
10044c94:	193b      	adds	r3, r7, r4
10044c96:	0018      	movs	r0, r3
10044c98:	2306      	movs	r3, #6
10044c9a:	001a      	movs	r2, r3
10044c9c:	2100      	movs	r1, #0
10044c9e:	f023 fd4d 	bl	1006873c <memset>
	if(!initialized){return event;}
10044ca2:	4b2e      	ldr	r3, [pc, #184]	@ (10044d5c <FLASH_ReadSchedule+0xd8>)
10044ca4:	781b      	ldrb	r3, [r3, #0]
10044ca6:	2b00      	cmp	r3, #0
10044ca8:	d108      	bne.n	10044cbc <FLASH_ReadSchedule+0x38>
10044caa:	687a      	ldr	r2, [r7, #4]
10044cac:	193b      	adds	r3, r7, r4
10044cae:	0010      	movs	r0, r2
10044cb0:	0019      	movs	r1, r3
10044cb2:	2306      	movs	r3, #6
10044cb4:	001a      	movs	r2, r3
10044cb6:	f023 fdb6 	bl	10068826 <memcpy>
10044cba:	e04b      	b.n	10044d54 <FLASH_ReadSchedule+0xd0>
	if(index >= 0 && index < ScheduleSize){
10044cbc:	1cbb      	adds	r3, r7, #2
10044cbe:	881b      	ldrh	r3, [r3, #0]
10044cc0:	4a27      	ldr	r2, [pc, #156]	@ (10044d60 <FLASH_ReadSchedule+0xdc>)
10044cc2:	2100      	movs	r1, #0
10044cc4:	5e52      	ldrsh	r2, [r2, r1]
10044cc6:	4293      	cmp	r3, r2
10044cc8:	da3b      	bge.n	10044d42 <FLASH_ReadSchedule+0xbe>
		event.month = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE));
10044cca:	1cbb      	adds	r3, r7, #2
10044ccc:	881b      	ldrh	r3, [r3, #0]
10044cce:	4a25      	ldr	r2, [pc, #148]	@ (10044d64 <FLASH_ReadSchedule+0xe0>)
10044cd0:	4694      	mov	ip, r2
10044cd2:	4463      	add	r3, ip
10044cd4:	00db      	lsls	r3, r3, #3
10044cd6:	781a      	ldrb	r2, [r3, #0]
10044cd8:	2110      	movs	r1, #16
10044cda:	187b      	adds	r3, r7, r1
10044cdc:	701a      	strb	r2, [r3, #0]
		event.day = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+1));
10044cde:	1cbb      	adds	r3, r7, #2
10044ce0:	881b      	ldrh	r3, [r3, #0]
10044ce2:	4a20      	ldr	r2, [pc, #128]	@ (10044d64 <FLASH_ReadSchedule+0xe0>)
10044ce4:	4694      	mov	ip, r2
10044ce6:	4463      	add	r3, ip
10044ce8:	00db      	lsls	r3, r3, #3
10044cea:	3301      	adds	r3, #1
10044cec:	781a      	ldrb	r2, [r3, #0]
10044cee:	187b      	adds	r3, r7, r1
10044cf0:	705a      	strb	r2, [r3, #1]
		event.start = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+2));
10044cf2:	1cbb      	adds	r3, r7, #2
10044cf4:	881b      	ldrh	r3, [r3, #0]
10044cf6:	4a1b      	ldr	r2, [pc, #108]	@ (10044d64 <FLASH_ReadSchedule+0xe0>)
10044cf8:	4694      	mov	ip, r2
10044cfa:	4463      	add	r3, ip
10044cfc:	00db      	lsls	r3, r3, #3
10044cfe:	3302      	adds	r3, #2
10044d00:	781a      	ldrb	r2, [r3, #0]
10044d02:	187b      	adds	r3, r7, r1
10044d04:	709a      	strb	r2, [r3, #2]
		event.stop = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+3));
10044d06:	1cbb      	adds	r3, r7, #2
10044d08:	881b      	ldrh	r3, [r3, #0]
10044d0a:	4a16      	ldr	r2, [pc, #88]	@ (10044d64 <FLASH_ReadSchedule+0xe0>)
10044d0c:	4694      	mov	ip, r2
10044d0e:	4463      	add	r3, ip
10044d10:	00db      	lsls	r3, r3, #3
10044d12:	3303      	adds	r3, #3
10044d14:	781a      	ldrb	r2, [r3, #0]
10044d16:	187b      	adds	r3, r7, r1
10044d18:	70da      	strb	r2, [r3, #3]
		event.folder = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+4));
10044d1a:	1cbb      	adds	r3, r7, #2
10044d1c:	881b      	ldrh	r3, [r3, #0]
10044d1e:	4a11      	ldr	r2, [pc, #68]	@ (10044d64 <FLASH_ReadSchedule+0xe0>)
10044d20:	4694      	mov	ip, r2
10044d22:	4463      	add	r3, ip
10044d24:	00db      	lsls	r3, r3, #3
10044d26:	3304      	adds	r3, #4
10044d28:	781a      	ldrb	r2, [r3, #0]
10044d2a:	187b      	adds	r3, r7, r1
10044d2c:	711a      	strb	r2, [r3, #4]
		event.track = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+5));
10044d2e:	1cbb      	adds	r3, r7, #2
10044d30:	881b      	ldrh	r3, [r3, #0]
10044d32:	4a0c      	ldr	r2, [pc, #48]	@ (10044d64 <FLASH_ReadSchedule+0xe0>)
10044d34:	4694      	mov	ip, r2
10044d36:	4463      	add	r3, ip
10044d38:	00db      	lsls	r3, r3, #3
10044d3a:	3305      	adds	r3, #5
10044d3c:	781a      	ldrb	r2, [r3, #0]
10044d3e:	187b      	adds	r3, r7, r1
10044d40:	715a      	strb	r2, [r3, #5]

	}
	return event;
10044d42:	687a      	ldr	r2, [r7, #4]
10044d44:	2310      	movs	r3, #16
10044d46:	18fb      	adds	r3, r7, r3
10044d48:	0010      	movs	r0, r2
10044d4a:	0019      	movs	r1, r3
10044d4c:	2306      	movs	r3, #6
10044d4e:	001a      	movs	r2, r3
10044d50:	f023 fd69 	bl	10068826 <memcpy>
}
10044d54:	6878      	ldr	r0, [r7, #4]
10044d56:	46bd      	mov	sp, r7
10044d58:	b007      	add	sp, #28
10044d5a:	bd90      	pop	{r4, r7, pc}
10044d5c:	200003d0 	.word	0x200003d0
10044d60:	200003cc 	.word	0x200003cc
10044d64:	0200de00 	.word	0x0200de00

10044d68 <FLASH_ClearSchedule>:
 * @function: FLASH_ClearSchedule();
 * @brief: Clears all Schedule entries
 * @param: none
 * @return: success status
 */
uint8_t FLASH_ClearSchedule(){
10044d68:	b5b0      	push	{r4, r5, r7, lr}
10044d6a:	b086      	sub	sp, #24
10044d6c:	af00      	add	r7, sp, #0
	ScheduleSize = 0;
10044d6e:	4b10      	ldr	r3, [pc, #64]	@ (10044db0 <FLASH_ClearSchedule+0x48>)
10044d70:	2200      	movs	r2, #0
10044d72:	801a      	strh	r2, [r3, #0]
	FLASH_EraseInitTypeDef erase;
	erase.Page = SCHEDULEPAGE;
10044d74:	2108      	movs	r1, #8
10044d76:	187b      	adds	r3, r7, r1
10044d78:	225e      	movs	r2, #94	@ 0x5e
10044d7a:	605a      	str	r2, [r3, #4]
	erase.NbPages = 1;
10044d7c:	187b      	adds	r3, r7, r1
10044d7e:	2201      	movs	r2, #1
10044d80:	609a      	str	r2, [r3, #8]
	erase.TypeErase = FLASH_TYPEERASE_PAGES;
10044d82:	187b      	adds	r3, r7, r1
10044d84:	2200      	movs	r2, #0
10044d86:	601a      	str	r2, [r3, #0]
	uint32_t faultypage;
	HAL_StatusTypeDef status = HAL_FLASHEx_Erase(&erase, &faultypage);
10044d88:	2517      	movs	r5, #23
10044d8a:	197c      	adds	r4, r7, r5
10044d8c:	1d3a      	adds	r2, r7, #4
10044d8e:	187b      	adds	r3, r7, r1
10044d90:	0011      	movs	r1, r2
10044d92:	0018      	movs	r0, r3
10044d94:	f003 fda0 	bl	100488d8 <HAL_FLASHEx_Erase>
10044d98:	0003      	movs	r3, r0
10044d9a:	7023      	strb	r3, [r4, #0]
	return status == HAL_OK;
10044d9c:	197b      	adds	r3, r7, r5
10044d9e:	781b      	ldrb	r3, [r3, #0]
10044da0:	425a      	negs	r2, r3
10044da2:	4153      	adcs	r3, r2
10044da4:	b2db      	uxtb	r3, r3
}
10044da6:	0018      	movs	r0, r3
10044da8:	46bd      	mov	sp, r7
10044daa:	b006      	add	sp, #24
10044dac:	bdb0      	pop	{r4, r5, r7, pc}
10044dae:	46c0      	nop			@ (mov r8, r8)
10044db0:	200003cc 	.word	0x200003cc

10044db4 <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
10044db4:	b580      	push	{r7, lr}
10044db6:	b084      	sub	sp, #16
10044db8:	af00      	add	r7, sp, #0
10044dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
10044dbc:	4b07      	ldr	r3, [pc, #28]	@ (10044ddc <LL_AHB1_GRP1_EnableClock+0x28>)
10044dbe:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10044dc0:	4b06      	ldr	r3, [pc, #24]	@ (10044ddc <LL_AHB1_GRP1_EnableClock+0x28>)
10044dc2:	687a      	ldr	r2, [r7, #4]
10044dc4:	430a      	orrs	r2, r1
10044dc6:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10044dc8:	4b04      	ldr	r3, [pc, #16]	@ (10044ddc <LL_AHB1_GRP1_EnableClock+0x28>)
10044dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10044dcc:	687a      	ldr	r2, [r7, #4]
10044dce:	4013      	ands	r3, r2
10044dd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10044dd2:	68fb      	ldr	r3, [r7, #12]
}
10044dd4:	46c0      	nop			@ (mov r8, r8)
10044dd6:	46bd      	mov	sp, r7
10044dd8:	b004      	add	sp, #16
10044dda:	bd80      	pop	{r7, pc}
10044ddc:	48400000 	.word	0x48400000

10044de0 <GPIO_Init>:
 * @function: GPIO_Init()
 * @brief: initialized GPIO pins to receive 6 external buttons
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int GPIO_Init(){
10044de0:	b580      	push	{r7, lr}
10044de2:	b086      	sub	sp, #24
10044de4:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
10044de6:	4b1d      	ldr	r3, [pc, #116]	@ (10044e5c <GPIO_Init+0x7c>)
10044de8:	781b      	ldrb	r3, [r3, #0]
10044dea:	2b00      	cmp	r3, #0
10044dec:	d001      	beq.n	10044df2 <GPIO_Init+0x12>
10044dee:	2301      	movs	r3, #1
10044df0:	e030      	b.n	10044e54 <GPIO_Init+0x74>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
10044df2:	1d3b      	adds	r3, r7, #4
10044df4:	0018      	movs	r0, r3
10044df6:	2314      	movs	r3, #20
10044df8:	001a      	movs	r2, r3
10044dfa:	2100      	movs	r1, #0
10044dfc:	f023 fc9e 	bl	1006873c <memset>

	//GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
10044e00:	2008      	movs	r0, #8
10044e02:	f7ff ffd7 	bl	10044db4 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
10044e06:	2004      	movs	r0, #4
10044e08:	f7ff ffd4 	bl	10044db4 <LL_AHB1_GRP1_EnableClock>


	//Configure GPIO pins on port A
	GPIO_InitStruct.Pin = BUTTON_1_PIN | BUTTON_5_PIN | BUTTON_6_PIN ;
10044e0c:	1d3b      	adds	r3, r7, #4
10044e0e:	22b0      	movs	r2, #176	@ 0xb0
10044e10:	0112      	lsls	r2, r2, #4
10044e12:	601a      	str	r2, [r3, #0]
#ifndef USEDEBUG
//	GPIO_InitStruct.Pin |= BUTTON_2_PIN | BUTTON_3_PIN;//on a separate line to easily disable to allow the debugger to run
#endif
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
10044e14:	1d3b      	adds	r3, r7, #4
10044e16:	2200      	movs	r2, #0
10044e18:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
10044e1a:	1d3b      	adds	r3, r7, #4
10044e1c:	2200      	movs	r2, #0
10044e1e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10044e20:	1d3a      	adds	r2, r7, #4
10044e22:	2390      	movs	r3, #144	@ 0x90
10044e24:	05db      	lsls	r3, r3, #23
10044e26:	0011      	movs	r1, r2
10044e28:	0018      	movs	r0, r3
10044e2a:	f003 fdd5 	bl	100489d8 <HAL_GPIO_Init>

	//Configure GPIO pins : PB15 PB13
	GPIO_InitStruct.Pin = BUTTON_4_PIN;
10044e2e:	1d3b      	adds	r3, r7, #4
10044e30:	2210      	movs	r2, #16
10044e32:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
10044e34:	1d3b      	adds	r3, r7, #4
10044e36:	2200      	movs	r2, #0
10044e38:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
10044e3a:	1d3b      	adds	r3, r7, #4
10044e3c:	2200      	movs	r2, #0
10044e3e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10044e40:	1d3b      	adds	r3, r7, #4
10044e42:	4a07      	ldr	r2, [pc, #28]	@ (10044e60 <GPIO_Init+0x80>)
10044e44:	0019      	movs	r1, r3
10044e46:	0010      	movs	r0, r2
10044e48:	f003 fdc6 	bl	100489d8 <HAL_GPIO_Init>

	initialized = 1;
10044e4c:	4b03      	ldr	r3, [pc, #12]	@ (10044e5c <GPIO_Init+0x7c>)
10044e4e:	2201      	movs	r2, #1
10044e50:	701a      	strb	r2, [r3, #0]
	return INIT_OK;
10044e52:	2301      	movs	r3, #1
}
10044e54:	0018      	movs	r0, r3
10044e56:	46bd      	mov	sp, r7
10044e58:	b006      	add	sp, #24
10044e5a:	bd80      	pop	{r7, pc}
10044e5c:	200003d1 	.word	0x200003d1
10044e60:	48100000 	.word	0x48100000

10044e64 <GPIO_ReadButtons>:
 * @Function: GPIO_ReadButtons
 * @Brief: Allows an easy way to read the external button states
 * @param: none
 * @return: An 8 bit integer where the LSB is button 0, and the 6th bit is button 5
 */
uint8_t GPIO_ReadButtons(void){
10044e64:	b5b0      	push	{r4, r5, r7, lr}
10044e66:	af00      	add	r7, sp, #0
	return ((HAL_GPIO_ReadPin(BUTTON_6) << 5) |
10044e68:	2380      	movs	r3, #128	@ 0x80
10044e6a:	011a      	lsls	r2, r3, #4
10044e6c:	2390      	movs	r3, #144	@ 0x90
10044e6e:	05db      	lsls	r3, r3, #23
10044e70:	0011      	movs	r1, r2
10044e72:	0018      	movs	r0, r3
10044e74:	f004 f838 	bl	10048ee8 <HAL_GPIO_ReadPin>
10044e78:	0003      	movs	r3, r0
10044e7a:	b25b      	sxtb	r3, r3
10044e7c:	015b      	lsls	r3, r3, #5
10044e7e:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(BUTTON_5) << 4) |
10044e80:	2380      	movs	r3, #128	@ 0x80
10044e82:	009a      	lsls	r2, r3, #2
10044e84:	2390      	movs	r3, #144	@ 0x90
10044e86:	05db      	lsls	r3, r3, #23
10044e88:	0011      	movs	r1, r2
10044e8a:	0018      	movs	r0, r3
10044e8c:	f004 f82c 	bl	10048ee8 <HAL_GPIO_ReadPin>
10044e90:	0003      	movs	r3, r0
	return ((HAL_GPIO_ReadPin(BUTTON_6) << 5) |
10044e92:	b25b      	sxtb	r3, r3
10044e94:	011b      	lsls	r3, r3, #4
10044e96:	b25b      	sxtb	r3, r3
10044e98:	4323      	orrs	r3, r4
10044e9a:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(BUTTON_4) << 3) |
10044e9c:	4b0e      	ldr	r3, [pc, #56]	@ (10044ed8 <GPIO_ReadButtons+0x74>)
10044e9e:	2110      	movs	r1, #16
10044ea0:	0018      	movs	r0, r3
10044ea2:	f004 f821 	bl	10048ee8 <HAL_GPIO_ReadPin>
10044ea6:	0003      	movs	r3, r0
			(HAL_GPIO_ReadPin(BUTTON_5) << 4) |
10044ea8:	b25b      	sxtb	r3, r3
10044eaa:	00db      	lsls	r3, r3, #3
10044eac:	b25b      	sxtb	r3, r3
10044eae:	4323      	orrs	r3, r4
10044eb0:	b25b      	sxtb	r3, r3
#ifndef USEDEBUG
			(HAL_GPIO_ReadPin(BUTTON_3) << 2) |
			(HAL_GPIO_ReadPin(BUTTON_2) << 1) |
#else
			(1<<2)|
			(1<<1)|
10044eb2:	b2dc      	uxtb	r4, r3
#endif
			(HAL_GPIO_ReadPin(BUTTON_1) << 0));
10044eb4:	2380      	movs	r3, #128	@ 0x80
10044eb6:	005a      	lsls	r2, r3, #1
10044eb8:	2390      	movs	r3, #144	@ 0x90
10044eba:	05db      	lsls	r3, r3, #23
10044ebc:	0011      	movs	r1, r2
10044ebe:	0018      	movs	r0, r3
10044ec0:	f004 f812 	bl	10048ee8 <HAL_GPIO_ReadPin>
10044ec4:	0003      	movs	r3, r0
			(1<<1)|
10044ec6:	4323      	orrs	r3, r4
10044ec8:	b2db      	uxtb	r3, r3
10044eca:	2206      	movs	r2, #6
10044ecc:	4313      	orrs	r3, r2
10044ece:	b2db      	uxtb	r3, r3
}
10044ed0:	0018      	movs	r0, r3
10044ed2:	46bd      	mov	sp, r7
10044ed4:	bdb0      	pop	{r4, r5, r7, pc}
10044ed6:	46c0      	nop			@ (mov r8, r8)
10044ed8:	48100000 	.word	0x48100000

10044edc <I2CUARTtoI2C>:
 * @brief: if control is with USART, swaps control from the USART to I2C
 * @brief: If the module does swap the pin, a delay is added to insure the pin is initialized before leaving
 * @param: delay - a boolean value that indicates if the function should delay because the pin is used immediately after
 * @return: Init Status, whether the operation failed or succeeded
 */
void I2CUARTtoI2C(uint8_t delay){
10044edc:	b590      	push	{r4, r7, lr}
10044ede:	b085      	sub	sp, #20
10044ee0:	af00      	add	r7, sp, #0
10044ee2:	0002      	movs	r2, r0
10044ee4:	1dfb      	adds	r3, r7, #7
10044ee6:	701a      	strb	r2, [r3, #0]
	if(PORTAPIN1.Alternate != GPIO_AF0_I2C1){
10044ee8:	4b22      	ldr	r3, [pc, #136]	@ (10044f74 <I2CUARTtoI2C+0x98>)
10044eea:	691b      	ldr	r3, [r3, #16]
10044eec:	2b00      	cmp	r3, #0
10044eee:	d03d      	beq.n	10044f6c <I2CUARTtoI2C+0x90>
		 hi2c1.Lock = HAL_UNLOCKED;
10044ef0:	4b21      	ldr	r3, [pc, #132]	@ (10044f78 <I2CUARTtoI2C+0x9c>)
10044ef2:	2240      	movs	r2, #64	@ 0x40
10044ef4:	2100      	movs	r1, #0
10044ef6:	5499      	strb	r1, [r3, r2]
		 hi2c1.State = HAL_I2C_STATE_READY;
10044ef8:	4b1f      	ldr	r3, [pc, #124]	@ (10044f78 <I2CUARTtoI2C+0x9c>)
10044efa:	2241      	movs	r2, #65	@ 0x41
10044efc:	2120      	movs	r1, #32
10044efe:	5499      	strb	r1, [r3, r2]
		husart1.Instance->CR1 &= ~0x00000008;//disable the USART Transmit
10044f00:	4b1e      	ldr	r3, [pc, #120]	@ (10044f7c <I2CUARTtoI2C+0xa0>)
10044f02:	681b      	ldr	r3, [r3, #0]
10044f04:	681a      	ldr	r2, [r3, #0]
10044f06:	4b1d      	ldr	r3, [pc, #116]	@ (10044f7c <I2CUARTtoI2C+0xa0>)
10044f08:	681b      	ldr	r3, [r3, #0]
10044f0a:	2108      	movs	r1, #8
10044f0c:	438a      	bics	r2, r1
10044f0e:	601a      	str	r2, [r3, #0]
//		BSP_LED_Off(LED_BLUE);
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
10044f10:	2390      	movs	r3, #144	@ 0x90
10044f12:	05db      	lsls	r3, r3, #23
10044f14:	2102      	movs	r1, #2
10044f16:	0018      	movs	r0, r3
10044f18:	f003 ff03 	bl	10048d22 <HAL_GPIO_DeInit>

		PORTAPIN1.Mode = GPIO_MODE_AF_OD;
10044f1c:	4b15      	ldr	r3, [pc, #84]	@ (10044f74 <I2CUARTtoI2C+0x98>)
10044f1e:	2212      	movs	r2, #18
10044f20:	605a      	str	r2, [r3, #4]
		PORTAPIN1.Alternate = GPIO_AF0_I2C1;
10044f22:	4b14      	ldr	r3, [pc, #80]	@ (10044f74 <I2CUARTtoI2C+0x98>)
10044f24:	2200      	movs	r2, #0
10044f26:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOA, &PORTAPIN1);
10044f28:	4a12      	ldr	r2, [pc, #72]	@ (10044f74 <I2CUARTtoI2C+0x98>)
10044f2a:	2390      	movs	r3, #144	@ 0x90
10044f2c:	05db      	lsls	r3, r3, #23
10044f2e:	0011      	movs	r1, r2
10044f30:	0018      	movs	r0, r3
10044f32:	f003 fd51 	bl	100489d8 <HAL_GPIO_Init>

		HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_A, PWR_GPIO_BIT_0);
10044f36:	2101      	movs	r1, #1
10044f38:	2000      	movs	r0, #0
10044f3a:	f006 f81d 	bl	1004af78 <HAL_PWREx_DisableGPIOPullUp>

		HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_0);
10044f3e:	2101      	movs	r1, #1
10044f40:	2000      	movs	r0, #0
10044f42:	f006 f847 	bl	1004afd4 <HAL_PWREx_DisableGPIOPullDown>
		if(delay){
10044f46:	1dfb      	adds	r3, r7, #7
10044f48:	781b      	ldrb	r3, [r3, #0]
10044f4a:	2b00      	cmp	r3, #0
10044f4c:	d00c      	beq.n	10044f68 <I2CUARTtoI2C+0x8c>
			uint32_t start = TIMERS_GetMilliSeconds();
10044f4e:	f001 fdc3 	bl	10046ad8 <TIMERS_GetMilliSeconds>
10044f52:	0003      	movs	r3, r0
10044f54:	60fb      	str	r3, [r7, #12]
			while(start+20 > TIMERS_GetMilliSeconds());
10044f56:	46c0      	nop			@ (mov r8, r8)
10044f58:	68fb      	ldr	r3, [r7, #12]
10044f5a:	3314      	adds	r3, #20
10044f5c:	001c      	movs	r4, r3
10044f5e:	f001 fdbb 	bl	10046ad8 <TIMERS_GetMilliSeconds>
10044f62:	0003      	movs	r3, r0
10044f64:	429c      	cmp	r4, r3
10044f66:	d8f7      	bhi.n	10044f58 <I2CUARTtoI2C+0x7c>
		}

		I2C_Flushbuffer();
10044f68:	f000 fac8 	bl	100454fc <I2C_Flushbuffer>
	}
}
10044f6c:	46c0      	nop			@ (mov r8, r8)
10044f6e:	46bd      	mov	sp, r7
10044f70:	b005      	add	sp, #20
10044f72:	bd90      	pop	{r4, r7, pc}
10044f74:	20002b00 	.word	0x20002b00
10044f78:	20002b14 	.word	0x20002b14
10044f7c:	20002b6c 	.word	0x20002b6c

10044f80 <I2CUARTtoUSART>:
 * @brief: if control is with I2C, swaps control from the I2C to the USART
 * @brief: If the module does swap the pin, a delay is added to insure the pin is initialized before leaving
 * @param: delay - a boolean value that indicates if the function should delay because the pin is used immediately after
 * @return: Init Status, whether the operation failed or succeeded
 */
void I2CUARTtoUSART(uint8_t delay){
10044f80:	b590      	push	{r4, r7, lr}
10044f82:	b085      	sub	sp, #20
10044f84:	af00      	add	r7, sp, #0
10044f86:	0002      	movs	r2, r0
10044f88:	1dfb      	adds	r3, r7, #7
10044f8a:	701a      	strb	r2, [r3, #0]

	if(PORTAPIN1.Alternate != GPIO_AF2_USART1){
10044f8c:	4b21      	ldr	r3, [pc, #132]	@ (10045014 <I2CUARTtoUSART+0x94>)
10044f8e:	691b      	ldr	r3, [r3, #16]
10044f90:	2b02      	cmp	r3, #2
10044f92:	d03b      	beq.n	1004500c <I2CUARTtoUSART+0x8c>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
10044f94:	2390      	movs	r3, #144	@ 0x90
10044f96:	05db      	lsls	r3, r3, #23
10044f98:	2102      	movs	r1, #2
10044f9a:	0018      	movs	r0, r3
10044f9c:	f003 fec1 	bl	10048d22 <HAL_GPIO_DeInit>
		 hi2c1.Lock = HAL_LOCKED;
10044fa0:	4b1d      	ldr	r3, [pc, #116]	@ (10045018 <I2CUARTtoUSART+0x98>)
10044fa2:	2240      	movs	r2, #64	@ 0x40
10044fa4:	2101      	movs	r1, #1
10044fa6:	5499      	strb	r1, [r3, r2]
		 hi2c1.State = HAL_I2C_STATE_RESET;
10044fa8:	4b1b      	ldr	r3, [pc, #108]	@ (10045018 <I2CUARTtoUSART+0x98>)
10044faa:	2241      	movs	r2, #65	@ 0x41
10044fac:	2100      	movs	r1, #0
10044fae:	5499      	strb	r1, [r3, r2]
		 husart1.Instance->CR1 |= 0x00000008;//enable the USART Transmit
10044fb0:	4b1a      	ldr	r3, [pc, #104]	@ (1004501c <I2CUARTtoUSART+0x9c>)
10044fb2:	681b      	ldr	r3, [r3, #0]
10044fb4:	681a      	ldr	r2, [r3, #0]
10044fb6:	4b19      	ldr	r3, [pc, #100]	@ (1004501c <I2CUARTtoUSART+0x9c>)
10044fb8:	681b      	ldr	r3, [r3, #0]
10044fba:	2108      	movs	r1, #8
10044fbc:	430a      	orrs	r2, r1
10044fbe:	601a      	str	r2, [r3, #0]
		 husart1.Instance->CR1 |= 0x00000040;//enable the USART Transmit complete interrupt
10044fc0:	4b16      	ldr	r3, [pc, #88]	@ (1004501c <I2CUARTtoUSART+0x9c>)
10044fc2:	681b      	ldr	r3, [r3, #0]
10044fc4:	681a      	ldr	r2, [r3, #0]
10044fc6:	4b15      	ldr	r3, [pc, #84]	@ (1004501c <I2CUARTtoUSART+0x9c>)
10044fc8:	681b      	ldr	r3, [r3, #0]
10044fca:	2140      	movs	r1, #64	@ 0x40
10044fcc:	430a      	orrs	r2, r1
10044fce:	601a      	str	r2, [r3, #0]

//		BSP_LED_On(LED_BLUE);
		PORTAPIN1.Mode = GPIO_MODE_AF_PP;
10044fd0:	4b10      	ldr	r3, [pc, #64]	@ (10045014 <I2CUARTtoUSART+0x94>)
10044fd2:	2202      	movs	r2, #2
10044fd4:	605a      	str	r2, [r3, #4]
		PORTAPIN1.Alternate = GPIO_AF2_USART1;
10044fd6:	4b0f      	ldr	r3, [pc, #60]	@ (10045014 <I2CUARTtoUSART+0x94>)
10044fd8:	2202      	movs	r2, #2
10044fda:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOA, &PORTAPIN1);
10044fdc:	4a0d      	ldr	r2, [pc, #52]	@ (10045014 <I2CUARTtoUSART+0x94>)
10044fde:	2390      	movs	r3, #144	@ 0x90
10044fe0:	05db      	lsls	r3, r3, #23
10044fe2:	0011      	movs	r1, r2
10044fe4:	0018      	movs	r0, r3
10044fe6:	f003 fcf7 	bl	100489d8 <HAL_GPIO_Init>
		if(delay){
10044fea:	1dfb      	adds	r3, r7, #7
10044fec:	781b      	ldrb	r3, [r3, #0]
10044fee:	2b00      	cmp	r3, #0
10044ff0:	d00c      	beq.n	1004500c <I2CUARTtoUSART+0x8c>
			uint32_t start = TIMERS_GetMilliSeconds();
10044ff2:	f001 fd71 	bl	10046ad8 <TIMERS_GetMilliSeconds>
10044ff6:	0003      	movs	r3, r0
10044ff8:	60fb      	str	r3, [r7, #12]
			while(start+12 > TIMERS_GetMilliSeconds());
10044ffa:	46c0      	nop			@ (mov r8, r8)
10044ffc:	68fb      	ldr	r3, [r7, #12]
10044ffe:	330c      	adds	r3, #12
10045000:	001c      	movs	r4, r3
10045002:	f001 fd69 	bl	10046ad8 <TIMERS_GetMilliSeconds>
10045006:	0003      	movs	r3, r0
10045008:	429c      	cmp	r4, r3
1004500a:	d8f7      	bhi.n	10044ffc <I2CUARTtoUSART+0x7c>
		}
	}

}
1004500c:	46c0      	nop			@ (mov r8, r8)
1004500e:	46bd      	mov	sp, r7
10045010:	b005      	add	sp, #20
10045012:	bd90      	pop	{r4, r7, pc}
10045014:	20002b00 	.word	0x20002b00
10045018:	20002b14 	.word	0x20002b14
1004501c:	20002b6c 	.word	0x20002b6c

10045020 <I2C_Post>:

//----------------------------------------Private functions--------------------------------------
#ifdef I2CTESTHARNESS
void fakeposter(Event_t event);
#endif
HAL_StatusTypeDef I2C_Post(MemAdd_t* post){
10045020:	b590      	push	{r4, r7, lr}
10045022:	b085      	sub	sp, #20
10045024:	af02      	add	r7, sp, #8
10045026:	6078      	str	r0, [r7, #4]
	if(post->posterindex == 0){
10045028:	687b      	ldr	r3, [r7, #4]
1004502a:	78db      	ldrb	r3, [r3, #3]
1004502c:	2b00      	cmp	r3, #0
1004502e:	d112      	bne.n	10045056 <I2C_Post+0x36>
		return HAL_I2C_Mem_Write_IT(&hi2c1,
									post->targetadr<<1,
10045030:	687b      	ldr	r3, [r7, #4]
10045032:	781b      	ldrb	r3, [r3, #0]
		return HAL_I2C_Mem_Write_IT(&hi2c1,
10045034:	18db      	adds	r3, r3, r3
10045036:	b299      	uxth	r1, r3
									post->registeradr,
10045038:	687b      	ldr	r3, [r7, #4]
1004503a:	785b      	ldrb	r3, [r3, #1]
		return HAL_I2C_Mem_Write_IT(&hi2c1,
1004503c:	001c      	movs	r4, r3
1004503e:	687b      	ldr	r3, [r7, #4]
10045040:	3302      	adds	r3, #2
10045042:	4810      	ldr	r0, [pc, #64]	@ (10045084 <I2C_Post+0x64>)
10045044:	2201      	movs	r2, #1
10045046:	9201      	str	r2, [sp, #4]
10045048:	9300      	str	r3, [sp, #0]
1004504a:	2301      	movs	r3, #1
1004504c:	0022      	movs	r2, r4
1004504e:	f004 f875 	bl	1004913c <HAL_I2C_Mem_Write_IT>
10045052:	0003      	movs	r3, r0
10045054:	e011      	b.n	1004507a <I2C_Post+0x5a>
									I2C_MEMADD_SIZE_8BIT,
									&(post->data),
									1);
	} else {
		return HAL_I2C_Mem_Read_IT(&hi2c1,
								   post->targetadr<<1,
10045056:	687b      	ldr	r3, [r7, #4]
10045058:	781b      	ldrb	r3, [r3, #0]
		return HAL_I2C_Mem_Read_IT(&hi2c1,
1004505a:	18db      	adds	r3, r3, r3
1004505c:	b299      	uxth	r1, r3
								   post->registeradr,
1004505e:	687b      	ldr	r3, [r7, #4]
10045060:	785b      	ldrb	r3, [r3, #1]
		return HAL_I2C_Mem_Read_IT(&hi2c1,
10045062:	001c      	movs	r4, r3
10045064:	687b      	ldr	r3, [r7, #4]
10045066:	3302      	adds	r3, #2
10045068:	4806      	ldr	r0, [pc, #24]	@ (10045084 <I2C_Post+0x64>)
1004506a:	2201      	movs	r2, #1
1004506c:	9201      	str	r2, [sp, #4]
1004506e:	9300      	str	r3, [sp, #0]
10045070:	2301      	movs	r3, #1
10045072:	0022      	movs	r2, r4
10045074:	f004 f904 	bl	10049280 <HAL_I2C_Mem_Read_IT>
10045078:	0003      	movs	r3, r0
								   I2C_MEMADD_SIZE_8BIT,
								   &(post->data),
								   1);

	}
}
1004507a:	0018      	movs	r0, r3
1004507c:	46bd      	mov	sp, r7
1004507e:	b003      	add	sp, #12
10045080:	bd90      	pop	{r4, r7, pc}
10045082:	46c0      	nop			@ (mov r8, r8)
10045084:	20002b14 	.word	0x20002b14

10045088 <I2C_Enqueue>:

HAL_StatusTypeDef I2C_Enqueue(MemAdd_t Post){
10045088:	b590      	push	{r4, r7, lr}
1004508a:	b085      	sub	sp, #20
1004508c:	af00      	add	r7, sp, #0
1004508e:	1d3b      	adds	r3, r7, #4
10045090:	6018      	str	r0, [r3, #0]
	if(!initialized){return HAL_ERROR;}
10045092:	4b49      	ldr	r3, [pc, #292]	@ (100451b8 <I2C_Enqueue+0x130>)
10045094:	781b      	ldrb	r3, [r3, #0]
10045096:	2b00      	cmp	r3, #0
10045098:	d101      	bne.n	1004509e <I2C_Enqueue+0x16>
1004509a:	2301      	movs	r3, #1
1004509c:	e087      	b.n	100451ae <I2C_Enqueue+0x126>
		HAL_StatusTypeDef status = HAL_OK;
1004509e:	230f      	movs	r3, #15
100450a0:	18fb      	adds	r3, r7, r3
100450a2:	2200      	movs	r2, #0
100450a4:	701a      	strb	r2, [r3, #0]

		uint32_t start = TIMERS_GetMilliSeconds();
100450a6:	f001 fd17 	bl	10046ad8 <TIMERS_GetMilliSeconds>
100450aa:	0003      	movs	r3, r0
100450ac:	60bb      	str	r3, [r7, #8]
		while((MemBuff.tail == ((MemBuff.head+1)%CIRCBUFFERSIZE)) && (((start + I2CBUFFERTIMEOUT) > TIMERS_GetMilliSeconds())));
100450ae:	46c0      	nop			@ (mov r8, r8)
100450b0:	4b42      	ldr	r3, [pc, #264]	@ (100451bc <I2C_Enqueue+0x134>)
100450b2:	4a43      	ldr	r2, [pc, #268]	@ (100451c0 <I2C_Enqueue+0x138>)
100450b4:	5a9b      	ldrh	r3, [r3, r2]
100450b6:	001c      	movs	r4, r3
100450b8:	4a40      	ldr	r2, [pc, #256]	@ (100451bc <I2C_Enqueue+0x134>)
100450ba:	23c0      	movs	r3, #192	@ 0xc0
100450bc:	015b      	lsls	r3, r3, #5
100450be:	5ad3      	ldrh	r3, [r2, r3]
100450c0:	3301      	adds	r3, #1
100450c2:	22c0      	movs	r2, #192	@ 0xc0
100450c4:	00d1      	lsls	r1, r2, #3
100450c6:	0018      	movs	r0, r3
100450c8:	f7fb fa2a 	bl	10040520 <__aeabi_idivmod>
100450cc:	000b      	movs	r3, r1
100450ce:	429c      	cmp	r4, r3
100450d0:	d108      	bne.n	100450e4 <I2C_Enqueue+0x5c>
100450d2:	68bb      	ldr	r3, [r7, #8]
100450d4:	22fa      	movs	r2, #250	@ 0xfa
100450d6:	0092      	lsls	r2, r2, #2
100450d8:	189c      	adds	r4, r3, r2
100450da:	f001 fcfd 	bl	10046ad8 <TIMERS_GetMilliSeconds>
100450de:	0003      	movs	r3, r0
100450e0:	429c      	cmp	r4, r3
100450e2:	d8e5      	bhi.n	100450b0 <I2C_Enqueue+0x28>
		if(MemBuff.tail == (MemBuff.head+1)%CIRCBUFFERSIZE){
100450e4:	4b35      	ldr	r3, [pc, #212]	@ (100451bc <I2C_Enqueue+0x134>)
100450e6:	4a36      	ldr	r2, [pc, #216]	@ (100451c0 <I2C_Enqueue+0x138>)
100450e8:	5a9b      	ldrh	r3, [r3, r2]
100450ea:	001c      	movs	r4, r3
100450ec:	4a33      	ldr	r2, [pc, #204]	@ (100451bc <I2C_Enqueue+0x134>)
100450ee:	23c0      	movs	r3, #192	@ 0xc0
100450f0:	015b      	lsls	r3, r3, #5
100450f2:	5ad3      	ldrh	r3, [r2, r3]
100450f4:	3301      	adds	r3, #1
100450f6:	22c0      	movs	r2, #192	@ 0xc0
100450f8:	00d1      	lsls	r1, r2, #3
100450fa:	0018      	movs	r0, r3
100450fc:	f7fb fa10 	bl	10040520 <__aeabi_idivmod>
10045100:	000b      	movs	r3, r1
10045102:	429c      	cmp	r4, r3
10045104:	d104      	bne.n	10045110 <I2C_Enqueue+0x88>
			BSP_LED_On(LED_RED);//indicate a fatal buffer overflow
10045106:	2002      	movs	r0, #2
10045108:	f002 ff9c 	bl	10048044 <BSP_LED_On>
			return HAL_ERROR;
1004510c:	2301      	movs	r3, #1
1004510e:	e04e      	b.n	100451ae <I2C_Enqueue+0x126>
		}
		BSP_LED_Off(LED_RED);
10045110:	2002      	movs	r0, #2
10045112:	f002 ffb5 	bl	10048080 <BSP_LED_Off>
		//place the transmit request into the buffer
		//The I2C-UARTmanager will disable the module but leave the state as ready, the data will still be loaded into the register
		//The module will not transmit until arbitration is complete


		MemBuff.data[MemBuff.head] = Post;
10045116:	4a29      	ldr	r2, [pc, #164]	@ (100451bc <I2C_Enqueue+0x134>)
10045118:	23c0      	movs	r3, #192	@ 0xc0
1004511a:	015b      	lsls	r3, r3, #5
1004511c:	5ad3      	ldrh	r3, [r2, r3]
1004511e:	4a27      	ldr	r2, [pc, #156]	@ (100451bc <I2C_Enqueue+0x134>)
10045120:	0099      	lsls	r1, r3, #2
10045122:	1d3b      	adds	r3, r7, #4
10045124:	681b      	ldr	r3, [r3, #0]
10045126:	508b      	str	r3, [r1, r2]
		MemBuff.head++;
10045128:	4a24      	ldr	r2, [pc, #144]	@ (100451bc <I2C_Enqueue+0x134>)
1004512a:	23c0      	movs	r3, #192	@ 0xc0
1004512c:	015b      	lsls	r3, r3, #5
1004512e:	5ad3      	ldrh	r3, [r2, r3]
10045130:	3301      	adds	r3, #1
10045132:	b299      	uxth	r1, r3
10045134:	4a21      	ldr	r2, [pc, #132]	@ (100451bc <I2C_Enqueue+0x134>)
10045136:	23c0      	movs	r3, #192	@ 0xc0
10045138:	015b      	lsls	r3, r3, #5
1004513a:	52d1      	strh	r1, [r2, r3]
		MemBuff.head %= CIRCBUFFERSIZE;
1004513c:	4a1f      	ldr	r2, [pc, #124]	@ (100451bc <I2C_Enqueue+0x134>)
1004513e:	23c0      	movs	r3, #192	@ 0xc0
10045140:	015b      	lsls	r3, r3, #5
10045142:	5ad3      	ldrh	r3, [r2, r3]
10045144:	22c0      	movs	r2, #192	@ 0xc0
10045146:	00d1      	lsls	r1, r2, #3
10045148:	0018      	movs	r0, r3
1004514a:	f7fb f8ff 	bl	1004034c <__aeabi_uidivmod>
1004514e:	000b      	movs	r3, r1
10045150:	b299      	uxth	r1, r3
10045152:	4a1a      	ldr	r2, [pc, #104]	@ (100451bc <I2C_Enqueue+0x134>)
10045154:	23c0      	movs	r3, #192	@ 0xc0
10045156:	015b      	lsls	r3, r3, #5
10045158:	52d1      	strh	r1, [r2, r3]
		if((MemBuff.tail+1)%CIRCBUFFERSIZE == MemBuff.head && hi2c1.State == HAL_I2C_STATE_READY){
1004515a:	4b18      	ldr	r3, [pc, #96]	@ (100451bc <I2C_Enqueue+0x134>)
1004515c:	4a18      	ldr	r2, [pc, #96]	@ (100451c0 <I2C_Enqueue+0x138>)
1004515e:	5a9b      	ldrh	r3, [r3, r2]
10045160:	3301      	adds	r3, #1
10045162:	22c0      	movs	r2, #192	@ 0xc0
10045164:	00d1      	lsls	r1, r2, #3
10045166:	0018      	movs	r0, r3
10045168:	f7fb f9da 	bl	10040520 <__aeabi_idivmod>
1004516c:	000b      	movs	r3, r1
1004516e:	0019      	movs	r1, r3
10045170:	4a12      	ldr	r2, [pc, #72]	@ (100451bc <I2C_Enqueue+0x134>)
10045172:	23c0      	movs	r3, #192	@ 0xc0
10045174:	015b      	lsls	r3, r3, #5
10045176:	5ad3      	ldrh	r3, [r2, r3]
10045178:	4299      	cmp	r1, r3
1004517a:	d115      	bne.n	100451a8 <I2C_Enqueue+0x120>
1004517c:	4b11      	ldr	r3, [pc, #68]	@ (100451c4 <I2C_Enqueue+0x13c>)
1004517e:	2241      	movs	r2, #65	@ 0x41
10045180:	5c9b      	ldrb	r3, [r3, r2]
10045182:	b2db      	uxtb	r3, r3
10045184:	2b20      	cmp	r3, #32
10045186:	d10f      	bne.n	100451a8 <I2C_Enqueue+0x120>
			I2CUARTtoI2C(1);
10045188:	2001      	movs	r0, #1
1004518a:	f7ff fea7 	bl	10044edc <I2CUARTtoI2C>
			status = I2C_Post(MemBuff.data+MemBuff.tail);
1004518e:	4b0b      	ldr	r3, [pc, #44]	@ (100451bc <I2C_Enqueue+0x134>)
10045190:	4a0b      	ldr	r2, [pc, #44]	@ (100451c0 <I2C_Enqueue+0x138>)
10045192:	5a9b      	ldrh	r3, [r3, r2]
10045194:	009a      	lsls	r2, r3, #2
10045196:	4b09      	ldr	r3, [pc, #36]	@ (100451bc <I2C_Enqueue+0x134>)
10045198:	18d3      	adds	r3, r2, r3
1004519a:	220f      	movs	r2, #15
1004519c:	18bc      	adds	r4, r7, r2
1004519e:	0018      	movs	r0, r3
100451a0:	f7ff ff3e 	bl	10045020 <I2C_Post>
100451a4:	0003      	movs	r3, r0
100451a6:	7023      	strb	r3, [r4, #0]

		}
		return status;
100451a8:	230f      	movs	r3, #15
100451aa:	18fb      	adds	r3, r7, r3
100451ac:	781b      	ldrb	r3, [r3, #0]
}
100451ae:	0018      	movs	r0, r3
100451b0:	46bd      	mov	sp, r7
100451b2:	b005      	add	sp, #20
100451b4:	bd90      	pop	{r4, r7, pc}
100451b6:	46c0      	nop			@ (mov r8, r8)
100451b8:	20001bd8 	.word	0x20001bd8
100451bc:	200003d4 	.word	0x200003d4
100451c0:	00001802 	.word	0x00001802
100451c4:	20002b14 	.word	0x20002b14

100451c8 <HAL_I2C_MemTxCpltCallback>:
 * @Function: HAL_I2C_MemTxCpltCallback
 * @Brief: Overwrites a weak HAL function. Called at the end of an i2c memory transmit operation
 * @param: hi2c: I2C module that is in use
 * @return: none
 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
100451c8:	b580      	push	{r7, lr}
100451ca:	b082      	sub	sp, #8
100451cc:	af00      	add	r7, sp, #0
100451ce:	6078      	str	r0, [r7, #4]
	//operation complete, the data at tail is now out-dated;
	MemBuff.tail++;
100451d0:	4b16      	ldr	r3, [pc, #88]	@ (1004522c <HAL_I2C_MemTxCpltCallback+0x64>)
100451d2:	4a17      	ldr	r2, [pc, #92]	@ (10045230 <HAL_I2C_MemTxCpltCallback+0x68>)
100451d4:	5a9b      	ldrh	r3, [r3, r2]
100451d6:	3301      	adds	r3, #1
100451d8:	b299      	uxth	r1, r3
100451da:	4b14      	ldr	r3, [pc, #80]	@ (1004522c <HAL_I2C_MemTxCpltCallback+0x64>)
100451dc:	4a14      	ldr	r2, [pc, #80]	@ (10045230 <HAL_I2C_MemTxCpltCallback+0x68>)
100451de:	5299      	strh	r1, [r3, r2]
	MemBuff.tail %= CIRCBUFFERSIZE;
100451e0:	4b12      	ldr	r3, [pc, #72]	@ (1004522c <HAL_I2C_MemTxCpltCallback+0x64>)
100451e2:	4a13      	ldr	r2, [pc, #76]	@ (10045230 <HAL_I2C_MemTxCpltCallback+0x68>)
100451e4:	5a9b      	ldrh	r3, [r3, r2]
100451e6:	22c0      	movs	r2, #192	@ 0xc0
100451e8:	00d1      	lsls	r1, r2, #3
100451ea:	0018      	movs	r0, r3
100451ec:	f7fb f8ae 	bl	1004034c <__aeabi_uidivmod>
100451f0:	000b      	movs	r3, r1
100451f2:	b299      	uxth	r1, r3
100451f4:	4b0d      	ldr	r3, [pc, #52]	@ (1004522c <HAL_I2C_MemTxCpltCallback+0x64>)
100451f6:	4a0e      	ldr	r2, [pc, #56]	@ (10045230 <HAL_I2C_MemTxCpltCallback+0x68>)
100451f8:	5299      	strh	r1, [r3, r2]
	//if there is more in the buffer
	if(MemBuff.tail != MemBuff.head){
100451fa:	4b0c      	ldr	r3, [pc, #48]	@ (1004522c <HAL_I2C_MemTxCpltCallback+0x64>)
100451fc:	4a0c      	ldr	r2, [pc, #48]	@ (10045230 <HAL_I2C_MemTxCpltCallback+0x68>)
100451fe:	5a9a      	ldrh	r2, [r3, r2]
10045200:	490a      	ldr	r1, [pc, #40]	@ (1004522c <HAL_I2C_MemTxCpltCallback+0x64>)
10045202:	23c0      	movs	r3, #192	@ 0xc0
10045204:	015b      	lsls	r3, r3, #5
10045206:	5acb      	ldrh	r3, [r1, r3]
10045208:	429a      	cmp	r2, r3
1004520a:	d00b      	beq.n	10045224 <HAL_I2C_MemTxCpltCallback+0x5c>
		I2CUARTtoI2C(1);
1004520c:	2001      	movs	r0, #1
1004520e:	f7ff fe65 	bl	10044edc <I2CUARTtoI2C>
		I2C_Post(MemBuff.data+MemBuff.tail);
10045212:	4b06      	ldr	r3, [pc, #24]	@ (1004522c <HAL_I2C_MemTxCpltCallback+0x64>)
10045214:	4a06      	ldr	r2, [pc, #24]	@ (10045230 <HAL_I2C_MemTxCpltCallback+0x68>)
10045216:	5a9b      	ldrh	r3, [r3, r2]
10045218:	009a      	lsls	r2, r3, #2
1004521a:	4b04      	ldr	r3, [pc, #16]	@ (1004522c <HAL_I2C_MemTxCpltCallback+0x64>)
1004521c:	18d3      	adds	r3, r2, r3
1004521e:	0018      	movs	r0, r3
10045220:	f7ff fefe 	bl	10045020 <I2C_Post>

	}
}
10045224:	46c0      	nop			@ (mov r8, r8)
10045226:	46bd      	mov	sp, r7
10045228:	b002      	add	sp, #8
1004522a:	bd80      	pop	{r7, pc}
1004522c:	200003d4 	.word	0x200003d4
10045230:	00001802 	.word	0x00001802

10045234 <HAL_I2C_MemRxCpltCallback>:
 * @Function: HAL_I2C_MemRxCpltCallback
 * @Brief: Overwrites a weak HAL function. Called at the end of an i2c memory receive operation
 * @param: hi2c: I2C module that is in use
 * @return: none
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
10045234:	b580      	push	{r7, lr}
10045236:	b084      	sub	sp, #16
10045238:	af00      	add	r7, sp, #0
1004523a:	6078      	str	r0, [r7, #4]

	//use the received data construct and event to post
	Event_t ret = {EVENT_I2C, MemBuff.data[MemBuff.tail].registeradr << 8 | MemBuff.data[MemBuff.tail].data};
1004523c:	200c      	movs	r0, #12
1004523e:	183b      	adds	r3, r7, r0
10045240:	2205      	movs	r2, #5
10045242:	701a      	strb	r2, [r3, #0]
10045244:	4b2a      	ldr	r3, [pc, #168]	@ (100452f0 <HAL_I2C_MemRxCpltCallback+0xbc>)
10045246:	4a2b      	ldr	r2, [pc, #172]	@ (100452f4 <HAL_I2C_MemRxCpltCallback+0xc0>)
10045248:	5a9b      	ldrh	r3, [r3, r2]
1004524a:	4a29      	ldr	r2, [pc, #164]	@ (100452f0 <HAL_I2C_MemRxCpltCallback+0xbc>)
1004524c:	009b      	lsls	r3, r3, #2
1004524e:	18d3      	adds	r3, r2, r3
10045250:	3301      	adds	r3, #1
10045252:	781b      	ldrb	r3, [r3, #0]
10045254:	b21b      	sxth	r3, r3
10045256:	021b      	lsls	r3, r3, #8
10045258:	b21a      	sxth	r2, r3
1004525a:	4b25      	ldr	r3, [pc, #148]	@ (100452f0 <HAL_I2C_MemRxCpltCallback+0xbc>)
1004525c:	4925      	ldr	r1, [pc, #148]	@ (100452f4 <HAL_I2C_MemRxCpltCallback+0xc0>)
1004525e:	5a5b      	ldrh	r3, [r3, r1]
10045260:	4923      	ldr	r1, [pc, #140]	@ (100452f0 <HAL_I2C_MemRxCpltCallback+0xbc>)
10045262:	009b      	lsls	r3, r3, #2
10045264:	18cb      	adds	r3, r1, r3
10045266:	3302      	adds	r3, #2
10045268:	781b      	ldrb	r3, [r3, #0]
1004526a:	b21b      	sxth	r3, r3
1004526c:	4313      	orrs	r3, r2
1004526e:	b21b      	sxth	r3, r3
10045270:	b29a      	uxth	r2, r3
10045272:	183b      	adds	r3, r7, r0
10045274:	805a      	strh	r2, [r3, #2]
	//post the event to the function given by the poster index

#ifdef I2CTESTHARNESS
	fakeposter(ret);
#else
	PosterList[MemBuff.data[MemBuff.tail].posterindex-1](ret);
10045276:	4b1e      	ldr	r3, [pc, #120]	@ (100452f0 <HAL_I2C_MemRxCpltCallback+0xbc>)
10045278:	4a1e      	ldr	r2, [pc, #120]	@ (100452f4 <HAL_I2C_MemRxCpltCallback+0xc0>)
1004527a:	5a9b      	ldrh	r3, [r3, r2]
1004527c:	4a1c      	ldr	r2, [pc, #112]	@ (100452f0 <HAL_I2C_MemRxCpltCallback+0xbc>)
1004527e:	009b      	lsls	r3, r3, #2
10045280:	18d3      	adds	r3, r2, r3
10045282:	3303      	adds	r3, #3
10045284:	781b      	ldrb	r3, [r3, #0]
10045286:	1e5a      	subs	r2, r3, #1
10045288:	4b1b      	ldr	r3, [pc, #108]	@ (100452f8 <HAL_I2C_MemRxCpltCallback+0xc4>)
1004528a:	0092      	lsls	r2, r2, #2
1004528c:	58d2      	ldr	r2, [r2, r3]
1004528e:	183b      	adds	r3, r7, r0
10045290:	6818      	ldr	r0, [r3, #0]
10045292:	4790      	blx	r2
#endif
	//operation complete, the data at tail is now out-dated;
	MemBuff.tail++;
10045294:	4b16      	ldr	r3, [pc, #88]	@ (100452f0 <HAL_I2C_MemRxCpltCallback+0xbc>)
10045296:	4a17      	ldr	r2, [pc, #92]	@ (100452f4 <HAL_I2C_MemRxCpltCallback+0xc0>)
10045298:	5a9b      	ldrh	r3, [r3, r2]
1004529a:	3301      	adds	r3, #1
1004529c:	b299      	uxth	r1, r3
1004529e:	4b14      	ldr	r3, [pc, #80]	@ (100452f0 <HAL_I2C_MemRxCpltCallback+0xbc>)
100452a0:	4a14      	ldr	r2, [pc, #80]	@ (100452f4 <HAL_I2C_MemRxCpltCallback+0xc0>)
100452a2:	5299      	strh	r1, [r3, r2]
	MemBuff.tail %= CIRCBUFFERSIZE;
100452a4:	4b12      	ldr	r3, [pc, #72]	@ (100452f0 <HAL_I2C_MemRxCpltCallback+0xbc>)
100452a6:	4a13      	ldr	r2, [pc, #76]	@ (100452f4 <HAL_I2C_MemRxCpltCallback+0xc0>)
100452a8:	5a9b      	ldrh	r3, [r3, r2]
100452aa:	22c0      	movs	r2, #192	@ 0xc0
100452ac:	00d1      	lsls	r1, r2, #3
100452ae:	0018      	movs	r0, r3
100452b0:	f7fb f84c 	bl	1004034c <__aeabi_uidivmod>
100452b4:	000b      	movs	r3, r1
100452b6:	b299      	uxth	r1, r3
100452b8:	4b0d      	ldr	r3, [pc, #52]	@ (100452f0 <HAL_I2C_MemRxCpltCallback+0xbc>)
100452ba:	4a0e      	ldr	r2, [pc, #56]	@ (100452f4 <HAL_I2C_MemRxCpltCallback+0xc0>)
100452bc:	5299      	strh	r1, [r3, r2]
	//if there is more in the buffer
	if(MemBuff.tail != MemBuff.head){
100452be:	4b0c      	ldr	r3, [pc, #48]	@ (100452f0 <HAL_I2C_MemRxCpltCallback+0xbc>)
100452c0:	4a0c      	ldr	r2, [pc, #48]	@ (100452f4 <HAL_I2C_MemRxCpltCallback+0xc0>)
100452c2:	5a9a      	ldrh	r2, [r3, r2]
100452c4:	490a      	ldr	r1, [pc, #40]	@ (100452f0 <HAL_I2C_MemRxCpltCallback+0xbc>)
100452c6:	23c0      	movs	r3, #192	@ 0xc0
100452c8:	015b      	lsls	r3, r3, #5
100452ca:	5acb      	ldrh	r3, [r1, r3]
100452cc:	429a      	cmp	r2, r3
100452ce:	d00b      	beq.n	100452e8 <HAL_I2C_MemRxCpltCallback+0xb4>
		I2CUARTtoI2C(1);
100452d0:	2001      	movs	r0, #1
100452d2:	f7ff fe03 	bl	10044edc <I2CUARTtoI2C>
		I2C_Post(MemBuff.data+MemBuff.tail);
100452d6:	4b06      	ldr	r3, [pc, #24]	@ (100452f0 <HAL_I2C_MemRxCpltCallback+0xbc>)
100452d8:	4a06      	ldr	r2, [pc, #24]	@ (100452f4 <HAL_I2C_MemRxCpltCallback+0xc0>)
100452da:	5a9b      	ldrh	r3, [r3, r2]
100452dc:	009a      	lsls	r2, r3, #2
100452de:	4b04      	ldr	r3, [pc, #16]	@ (100452f0 <HAL_I2C_MemRxCpltCallback+0xbc>)
100452e0:	18d3      	adds	r3, r2, r3
100452e2:	0018      	movs	r0, r3
100452e4:	f7ff fe9c 	bl	10045020 <I2C_Post>

	}
}
100452e8:	46c0      	nop			@ (mov r8, r8)
100452ea:	46bd      	mov	sp, r7
100452ec:	b004      	add	sp, #16
100452ee:	bd80      	pop	{r7, pc}
100452f0:	200003d4 	.word	0x200003d4
100452f4:	00001802 	.word	0x00001802
100452f8:	20002b68 	.word	0x20002b68

100452fc <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
100452fc:	b590      	push	{r4, r7, lr}
100452fe:	b085      	sub	sp, #20
10045300:	af00      	add	r7, sp, #0
10045302:	6078      	str	r0, [r7, #4]
	if(hi2c->ErrorCode&HAL_I2C_ERROR_AF){//NACK Error
10045304:	687b      	ldr	r3, [r7, #4]
10045306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10045308:	2204      	movs	r2, #4
1004530a:	4013      	ands	r3, r2
1004530c:	d021      	beq.n	10045352 <HAL_I2C_ErrorCallback+0x56>
		if(MemBuff.tail != MemBuff.head){
1004530e:	4b13      	ldr	r3, [pc, #76]	@ (1004535c <HAL_I2C_ErrorCallback+0x60>)
10045310:	4a13      	ldr	r2, [pc, #76]	@ (10045360 <HAL_I2C_ErrorCallback+0x64>)
10045312:	5a9a      	ldrh	r2, [r3, r2]
10045314:	4911      	ldr	r1, [pc, #68]	@ (1004535c <HAL_I2C_ErrorCallback+0x60>)
10045316:	23c0      	movs	r3, #192	@ 0xc0
10045318:	015b      	lsls	r3, r3, #5
1004531a:	5acb      	ldrh	r3, [r1, r3]
1004531c:	429a      	cmp	r2, r3
1004531e:	d018      	beq.n	10045352 <HAL_I2C_ErrorCallback+0x56>
			uint32_t start = TIMERS_GetMilliSeconds();
10045320:	f001 fbda 	bl	10046ad8 <TIMERS_GetMilliSeconds>
10045324:	0003      	movs	r3, r0
10045326:	60fb      	str	r3, [r7, #12]
			while(start+10 > TIMERS_GetMilliSeconds());
10045328:	46c0      	nop			@ (mov r8, r8)
1004532a:	68fb      	ldr	r3, [r7, #12]
1004532c:	330a      	adds	r3, #10
1004532e:	001c      	movs	r4, r3
10045330:	f001 fbd2 	bl	10046ad8 <TIMERS_GetMilliSeconds>
10045334:	0003      	movs	r3, r0
10045336:	429c      	cmp	r4, r3
10045338:	d8f7      	bhi.n	1004532a <HAL_I2C_ErrorCallback+0x2e>
			I2CUARTtoI2C(1);
1004533a:	2001      	movs	r0, #1
1004533c:	f7ff fdce 	bl	10044edc <I2CUARTtoI2C>
			I2C_Post(MemBuff.data+MemBuff.tail);//Repost the same data packet that got NACKed, without moving the tail forward
10045340:	4b06      	ldr	r3, [pc, #24]	@ (1004535c <HAL_I2C_ErrorCallback+0x60>)
10045342:	4a07      	ldr	r2, [pc, #28]	@ (10045360 <HAL_I2C_ErrorCallback+0x64>)
10045344:	5a9b      	ldrh	r3, [r3, r2]
10045346:	009a      	lsls	r2, r3, #2
10045348:	4b04      	ldr	r3, [pc, #16]	@ (1004535c <HAL_I2C_ErrorCallback+0x60>)
1004534a:	18d3      	adds	r3, r2, r3
1004534c:	0018      	movs	r0, r3
1004534e:	f7ff fe67 	bl	10045020 <I2C_Post>

		}
	}
}
10045352:	46c0      	nop			@ (mov r8, r8)
10045354:	46bd      	mov	sp, r7
10045356:	b005      	add	sp, #20
10045358:	bd90      	pop	{r4, r7, pc}
1004535a:	46c0      	nop			@ (mov r8, r8)
1004535c:	200003d4 	.word	0x200003d4
10045360:	00001802 	.word	0x00001802

10045364 <I2C1_IRQHandler>:
 * @Brief: Overwrites a weak HAL function. handles I2C1 interrupts
 * @param: none
 * @return: none
 */
void I2C1_IRQHandler(void)
{
10045364:	b580      	push	{r7, lr}
10045366:	af00      	add	r7, sp, #0
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
10045368:	4b09      	ldr	r3, [pc, #36]	@ (10045390 <I2C1_IRQHandler+0x2c>)
1004536a:	681b      	ldr	r3, [r3, #0]
1004536c:	699a      	ldr	r2, [r3, #24]
1004536e:	23e0      	movs	r3, #224	@ 0xe0
10045370:	00db      	lsls	r3, r3, #3
10045372:	4013      	ands	r3, r2
10045374:	d004      	beq.n	10045380 <I2C1_IRQHandler+0x1c>
	{
		HAL_I2C_ER_IRQHandler(&hi2c1);//error handler
10045376:	4b06      	ldr	r3, [pc, #24]	@ (10045390 <I2C1_IRQHandler+0x2c>)
10045378:	0018      	movs	r0, r3
1004537a:	f004 f839 	bl	100493f0 <HAL_I2C_ER_IRQHandler>
	}
	else
	{
		HAL_I2C_EV_IRQHandler(&hi2c1);//event handler
	}
}
1004537e:	e003      	b.n	10045388 <I2C1_IRQHandler+0x24>
		HAL_I2C_EV_IRQHandler(&hi2c1);//event handler
10045380:	4b03      	ldr	r3, [pc, #12]	@ (10045390 <I2C1_IRQHandler+0x2c>)
10045382:	0018      	movs	r0, r3
10045384:	f004 f81a 	bl	100493bc <HAL_I2C_EV_IRQHandler>
}
10045388:	46c0      	nop			@ (mov r8, r8)
1004538a:	46bd      	mov	sp, r7
1004538c:	bd80      	pop	{r7, pc}
1004538e:	46c0      	nop			@ (mov r8, r8)
10045390:	20002b14 	.word	0x20002b14

10045394 <I2C_Init>:
 * @function: I2C_Init()
 * @brief: initialize the I2C peripheral to receive and transmit
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int I2C_Init(void){
10045394:	b590      	push	{r4, r7, lr}
10045396:	b083      	sub	sp, #12
10045398:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
1004539a:	4b36      	ldr	r3, [pc, #216]	@ (10045474 <I2C_Init+0xe0>)
1004539c:	781b      	ldrb	r3, [r3, #0]
1004539e:	2b00      	cmp	r3, #0
100453a0:	d001      	beq.n	100453a6 <I2C_Init+0x12>
100453a2:	2301      	movs	r3, #1
100453a4:	e062      	b.n	1004546c <I2C_Init+0xd8>
	TIMERS_Init();
100453a6:	f001 fb4b 	bl	10046a40 <TIMERS_Init>
	hi2c1.Instance = I2C1;
100453aa:	4b33      	ldr	r3, [pc, #204]	@ (10045478 <I2C_Init+0xe4>)
100453ac:	2282      	movs	r2, #130	@ 0x82
100453ae:	05d2      	lsls	r2, r2, #23
100453b0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00305B5B;
100453b2:	4b31      	ldr	r3, [pc, #196]	@ (10045478 <I2C_Init+0xe4>)
100453b4:	4a31      	ldr	r2, [pc, #196]	@ (1004547c <I2C_Init+0xe8>)
100453b6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
100453b8:	4b2f      	ldr	r3, [pc, #188]	@ (10045478 <I2C_Init+0xe4>)
100453ba:	2200      	movs	r2, #0
100453bc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
100453be:	4b2e      	ldr	r3, [pc, #184]	@ (10045478 <I2C_Init+0xe4>)
100453c0:	2201      	movs	r2, #1
100453c2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
100453c4:	4b2c      	ldr	r3, [pc, #176]	@ (10045478 <I2C_Init+0xe4>)
100453c6:	2200      	movs	r2, #0
100453c8:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
100453ca:	4b2b      	ldr	r3, [pc, #172]	@ (10045478 <I2C_Init+0xe4>)
100453cc:	2200      	movs	r2, #0
100453ce:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
100453d0:	4b29      	ldr	r3, [pc, #164]	@ (10045478 <I2C_Init+0xe4>)
100453d2:	2200      	movs	r2, #0
100453d4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
100453d6:	4b28      	ldr	r3, [pc, #160]	@ (10045478 <I2C_Init+0xe4>)
100453d8:	2200      	movs	r2, #0
100453da:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
100453dc:	4b26      	ldr	r3, [pc, #152]	@ (10045478 <I2C_Init+0xe4>)
100453de:	2200      	movs	r2, #0
100453e0:	621a      	str	r2, [r3, #32]
	hi2c1.State = HAL_I2C_STATE_RESET;
100453e2:	4b25      	ldr	r3, [pc, #148]	@ (10045478 <I2C_Init+0xe4>)
100453e4:	2241      	movs	r2, #65	@ 0x41
100453e6:	2100      	movs	r1, #0
100453e8:	5499      	strb	r1, [r3, r2]
	HAL_StatusTypeDef ret = HAL_I2C_Init(&hi2c1);
100453ea:	1dfc      	adds	r4, r7, #7
100453ec:	4b22      	ldr	r3, [pc, #136]	@ (10045478 <I2C_Init+0xe4>)
100453ee:	0018      	movs	r0, r3
100453f0:	f003 fdfe 	bl	10048ff0 <HAL_I2C_Init>
100453f4:	0003      	movs	r3, r0
100453f6:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK)
100453f8:	1dfb      	adds	r3, r7, #7
100453fa:	781b      	ldrb	r3, [r3, #0]
100453fc:	2b00      	cmp	r3, #0
100453fe:	d001      	beq.n	10045404 <I2C_Init+0x70>
	{
		return INIT_ERROR;
10045400:	2300      	movs	r3, #0
10045402:	e033      	b.n	1004546c <I2C_Init+0xd8>
	}
	// Configure Analog filter
	ret = HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
10045404:	1dfc      	adds	r4, r7, #7
10045406:	4b1c      	ldr	r3, [pc, #112]	@ (10045478 <I2C_Init+0xe4>)
10045408:	2100      	movs	r1, #0
1004540a:	0018      	movs	r0, r3
1004540c:	f005 fcc0 	bl	1004ad90 <HAL_I2CEx_ConfigAnalogFilter>
10045410:	0003      	movs	r3, r0
10045412:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK)
10045414:	1dfb      	adds	r3, r7, #7
10045416:	781b      	ldrb	r3, [r3, #0]
10045418:	2b00      	cmp	r3, #0
1004541a:	d001      	beq.n	10045420 <I2C_Init+0x8c>
	{
		return INIT_ERROR;
1004541c:	2300      	movs	r3, #0
1004541e:	e025      	b.n	1004546c <I2C_Init+0xd8>
	}

	// Configure Digital filter
	ret = HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
10045420:	1dfc      	adds	r4, r7, #7
10045422:	4b15      	ldr	r3, [pc, #84]	@ (10045478 <I2C_Init+0xe4>)
10045424:	2100      	movs	r1, #0
10045426:	0018      	movs	r0, r3
10045428:	f005 fcfe 	bl	1004ae28 <HAL_I2CEx_ConfigDigitalFilter>
1004542c:	0003      	movs	r3, r0
1004542e:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK)
10045430:	1dfb      	adds	r3, r7, #7
10045432:	781b      	ldrb	r3, [r3, #0]
10045434:	2b00      	cmp	r3, #0
10045436:	d001      	beq.n	1004543c <I2C_Init+0xa8>
	{
		return INIT_ERROR;
10045438:	2300      	movs	r3, #0
1004543a:	e017      	b.n	1004546c <I2C_Init+0xd8>
	}
	//set up circular buffers
	MemBuff.tail = 0;
1004543c:	4b10      	ldr	r3, [pc, #64]	@ (10045480 <I2C_Init+0xec>)
1004543e:	4a11      	ldr	r2, [pc, #68]	@ (10045484 <I2C_Init+0xf0>)
10045440:	2100      	movs	r1, #0
10045442:	5299      	strh	r1, [r3, r2]
	MemBuff.head = 0;
10045444:	4a0e      	ldr	r2, [pc, #56]	@ (10045480 <I2C_Init+0xec>)
10045446:	23c0      	movs	r3, #192	@ 0xc0
10045448:	015b      	lsls	r3, r3, #5
1004544a:	2100      	movs	r1, #0
1004544c:	52d1      	strh	r1, [r2, r3]
	initialized = 1;
1004544e:	4b09      	ldr	r3, [pc, #36]	@ (10045474 <I2C_Init+0xe0>)
10045450:	2201      	movs	r2, #1
10045452:	701a      	strb	r2, [r3, #0]
	I2CUARTtoI2C(1);
10045454:	2001      	movs	r0, #1
10045456:	f7ff fd41 	bl	10044edc <I2CUARTtoI2C>
	//enables interrupts
	HAL_NVIC_SetPriority(I2C1_IRQn, 2, 0);
1004545a:	2200      	movs	r2, #0
1004545c:	2102      	movs	r1, #2
1004545e:	2003      	movs	r0, #3
10045460:	f003 f8da 	bl	10048618 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_IRQn);
10045464:	2003      	movs	r0, #3
10045466:	f003 f8ec 	bl	10048642 <HAL_NVIC_EnableIRQ>
	return INIT_OK;
1004546a:	2301      	movs	r3, #1
}
1004546c:	0018      	movs	r0, r3
1004546e:	46bd      	mov	sp, r7
10045470:	b003      	add	sp, #12
10045472:	bd90      	pop	{r4, r7, pc}
10045474:	20001bd8 	.word	0x20001bd8
10045478:	20002b14 	.word	0x20002b14
1004547c:	00305b5b 	.word	0x00305b5b
10045480:	200003d4 	.word	0x200003d4
10045484:	00001802 	.word	0x00001802

10045488 <I2C_Transmit>:
 * @param: uint8_t targetadr: Address of the device to communicate
 * 		   uint8_t registeradr: Address of the register to write to
 * 		   uint8_t data: to to be transmitted
 * @return: a flag if the data has been transmitted
 */
HAL_StatusTypeDef I2C_Transmit(uint8_t targetadr, uint8_t registeradr, uint8_t data){
10045488:	b5b0      	push	{r4, r5, r7, lr}
1004548a:	b084      	sub	sp, #16
1004548c:	af00      	add	r7, sp, #0
1004548e:	0004      	movs	r4, r0
10045490:	0008      	movs	r0, r1
10045492:	0011      	movs	r1, r2
10045494:	1dfb      	adds	r3, r7, #7
10045496:	1c22      	adds	r2, r4, #0
10045498:	701a      	strb	r2, [r3, #0]
1004549a:	1dbb      	adds	r3, r7, #6
1004549c:	1c02      	adds	r2, r0, #0
1004549e:	701a      	strb	r2, [r3, #0]
100454a0:	1d7b      	adds	r3, r7, #5
100454a2:	1c0a      	adds	r2, r1, #0
100454a4:	701a      	strb	r2, [r3, #0]
	if(!initialized){return HAL_ERROR;}
100454a6:	4b13      	ldr	r3, [pc, #76]	@ (100454f4 <I2C_Transmit+0x6c>)
100454a8:	781b      	ldrb	r3, [r3, #0]
100454aa:	2b00      	cmp	r3, #0
100454ac:	d101      	bne.n	100454b2 <I2C_Transmit+0x2a>
100454ae:	2301      	movs	r3, #1
100454b0:	e01c      	b.n	100454ec <I2C_Transmit+0x64>
	HAL_StatusTypeDef status = HAL_OK;
100454b2:	210f      	movs	r1, #15
100454b4:	187b      	adds	r3, r7, r1
100454b6:	2200      	movs	r2, #0
100454b8:	701a      	strb	r2, [r3, #0]
	static MemAdd_t Post;
	Post.targetadr = targetadr;
100454ba:	4b0f      	ldr	r3, [pc, #60]	@ (100454f8 <I2C_Transmit+0x70>)
100454bc:	1dfa      	adds	r2, r7, #7
100454be:	7812      	ldrb	r2, [r2, #0]
100454c0:	701a      	strb	r2, [r3, #0]
	Post.registeradr = registeradr;
100454c2:	4b0d      	ldr	r3, [pc, #52]	@ (100454f8 <I2C_Transmit+0x70>)
100454c4:	1dba      	adds	r2, r7, #6
100454c6:	7812      	ldrb	r2, [r2, #0]
100454c8:	705a      	strb	r2, [r3, #1]
	Post.posterindex = 0;//null pointer, no function is posted to after the transmit is complete
100454ca:	4b0b      	ldr	r3, [pc, #44]	@ (100454f8 <I2C_Transmit+0x70>)
100454cc:	2200      	movs	r2, #0
100454ce:	70da      	strb	r2, [r3, #3]
	Post.data = data;
100454d0:	4b09      	ldr	r3, [pc, #36]	@ (100454f8 <I2C_Transmit+0x70>)
100454d2:	1d7a      	adds	r2, r7, #5
100454d4:	7812      	ldrb	r2, [r2, #0]
100454d6:	709a      	strb	r2, [r3, #2]
	status = I2C_Enqueue(Post);
100454d8:	000d      	movs	r5, r1
100454da:	187c      	adds	r4, r7, r1
100454dc:	4b06      	ldr	r3, [pc, #24]	@ (100454f8 <I2C_Transmit+0x70>)
100454de:	6818      	ldr	r0, [r3, #0]
100454e0:	f7ff fdd2 	bl	10045088 <I2C_Enqueue>
100454e4:	0003      	movs	r3, r0
100454e6:	7023      	strb	r3, [r4, #0]
	return status;
100454e8:	197b      	adds	r3, r7, r5
100454ea:	781b      	ldrb	r3, [r3, #0]
}
100454ec:	0018      	movs	r0, r3
100454ee:	46bd      	mov	sp, r7
100454f0:	b004      	add	sp, #16
100454f2:	bdb0      	pop	{r4, r5, r7, pc}
100454f4:	20001bd8 	.word	0x20001bd8
100454f8:	20001bdc 	.word	0x20001bdc

100454fc <I2C_Flushbuffer>:

void I2C_Flushbuffer(){
100454fc:	b580      	push	{r7, lr}
100454fe:	af00      	add	r7, sp, #0
	if(hi2c1.State == HAL_I2C_STATE_READY && MemBuff.tail != MemBuff.head){
10045500:	4b0d      	ldr	r3, [pc, #52]	@ (10045538 <I2C_Flushbuffer+0x3c>)
10045502:	2241      	movs	r2, #65	@ 0x41
10045504:	5c9b      	ldrb	r3, [r3, r2]
10045506:	b2db      	uxtb	r3, r3
10045508:	2b20      	cmp	r3, #32
1004550a:	d111      	bne.n	10045530 <I2C_Flushbuffer+0x34>
1004550c:	4b0b      	ldr	r3, [pc, #44]	@ (1004553c <I2C_Flushbuffer+0x40>)
1004550e:	4a0c      	ldr	r2, [pc, #48]	@ (10045540 <I2C_Flushbuffer+0x44>)
10045510:	5a9a      	ldrh	r2, [r3, r2]
10045512:	490a      	ldr	r1, [pc, #40]	@ (1004553c <I2C_Flushbuffer+0x40>)
10045514:	23c0      	movs	r3, #192	@ 0xc0
10045516:	015b      	lsls	r3, r3, #5
10045518:	5acb      	ldrh	r3, [r1, r3]
1004551a:	429a      	cmp	r2, r3
1004551c:	d008      	beq.n	10045530 <I2C_Flushbuffer+0x34>
		//error recovery
		I2C_Post(MemBuff.data+MemBuff.tail);
1004551e:	4b07      	ldr	r3, [pc, #28]	@ (1004553c <I2C_Flushbuffer+0x40>)
10045520:	4a07      	ldr	r2, [pc, #28]	@ (10045540 <I2C_Flushbuffer+0x44>)
10045522:	5a9b      	ldrh	r3, [r3, r2]
10045524:	009a      	lsls	r2, r3, #2
10045526:	4b05      	ldr	r3, [pc, #20]	@ (1004553c <I2C_Flushbuffer+0x40>)
10045528:	18d3      	adds	r3, r2, r3
1004552a:	0018      	movs	r0, r3
1004552c:	f7ff fd78 	bl	10045020 <I2C_Post>
	}
}
10045530:	46c0      	nop			@ (mov r8, r8)
10045532:	46bd      	mov	sp, r7
10045534:	bd80      	pop	{r7, pc}
10045536:	46c0      	nop			@ (mov r8, r8)
10045538:	20002b14 	.word	0x20002b14
1004553c:	200003d4 	.word	0x200003d4
10045540:	00001802 	.word	0x00001802

10045544 <I2C_Recieve>:
 * @param: uint8_t targetadr: Address of the device to communicate
 * 		   uint8_t registeradr: Address of the register to read from
 * 		   void (*PostTo)(Event_t): which service to post to when the data is received
 * @return: -1 if error, 1 if success
 */
HAL_StatusTypeDef I2C_Recieve(uint8_t targetadr, uint8_t registeradr, uint8_t posterindex){
10045544:	b5b0      	push	{r4, r5, r7, lr}
10045546:	b084      	sub	sp, #16
10045548:	af00      	add	r7, sp, #0
1004554a:	0004      	movs	r4, r0
1004554c:	0008      	movs	r0, r1
1004554e:	0011      	movs	r1, r2
10045550:	1dfb      	adds	r3, r7, #7
10045552:	1c22      	adds	r2, r4, #0
10045554:	701a      	strb	r2, [r3, #0]
10045556:	1dbb      	adds	r3, r7, #6
10045558:	1c02      	adds	r2, r0, #0
1004555a:	701a      	strb	r2, [r3, #0]
1004555c:	1d7b      	adds	r3, r7, #5
1004555e:	1c0a      	adds	r2, r1, #0
10045560:	701a      	strb	r2, [r3, #0]
	if(!initialized){return HAL_ERROR;}
10045562:	4b18      	ldr	r3, [pc, #96]	@ (100455c4 <I2C_Recieve+0x80>)
10045564:	781b      	ldrb	r3, [r3, #0]
10045566:	2b00      	cmp	r3, #0
10045568:	d101      	bne.n	1004556e <I2C_Recieve+0x2a>
1004556a:	2301      	movs	r3, #1
1004556c:	e026      	b.n	100455bc <I2C_Recieve+0x78>
	HAL_StatusTypeDef status = HAL_OK;
1004556e:	230f      	movs	r3, #15
10045570:	18fb      	adds	r3, r7, r3
10045572:	2200      	movs	r2, #0
10045574:	701a      	strb	r2, [r3, #0]
	static MemAdd_t Post;
	Post.targetadr = targetadr;
10045576:	4b14      	ldr	r3, [pc, #80]	@ (100455c8 <I2C_Recieve+0x84>)
10045578:	1dfa      	adds	r2, r7, #7
1004557a:	7812      	ldrb	r2, [r2, #0]
1004557c:	701a      	strb	r2, [r3, #0]
	Post.registeradr = registeradr;
1004557e:	4b12      	ldr	r3, [pc, #72]	@ (100455c8 <I2C_Recieve+0x84>)
10045580:	1dba      	adds	r2, r7, #6
10045582:	7812      	ldrb	r2, [r2, #0]
10045584:	705a      	strb	r2, [r3, #1]
	if(posterindex == 0 || posterindex > NUMPOSTERS){
10045586:	1d7b      	adds	r3, r7, #5
10045588:	781b      	ldrb	r3, [r3, #0]
1004558a:	2b00      	cmp	r3, #0
1004558c:	d003      	beq.n	10045596 <I2C_Recieve+0x52>
1004558e:	1d7b      	adds	r3, r7, #5
10045590:	781b      	ldrb	r3, [r3, #0]
10045592:	2b01      	cmp	r3, #1
10045594:	d901      	bls.n	1004559a <I2C_Recieve+0x56>
		return HAL_ERROR;
10045596:	2301      	movs	r3, #1
10045598:	e010      	b.n	100455bc <I2C_Recieve+0x78>
	}
	Post.posterindex = posterindex;
1004559a:	4b0b      	ldr	r3, [pc, #44]	@ (100455c8 <I2C_Recieve+0x84>)
1004559c:	1d7a      	adds	r2, r7, #5
1004559e:	7812      	ldrb	r2, [r2, #0]
100455a0:	70da      	strb	r2, [r3, #3]
	Post.data = 0;//will store future recieved data
100455a2:	4b09      	ldr	r3, [pc, #36]	@ (100455c8 <I2C_Recieve+0x84>)
100455a4:	2200      	movs	r2, #0
100455a6:	709a      	strb	r2, [r3, #2]
	status = I2C_Enqueue(Post);
100455a8:	250f      	movs	r5, #15
100455aa:	197c      	adds	r4, r7, r5
100455ac:	4b06      	ldr	r3, [pc, #24]	@ (100455c8 <I2C_Recieve+0x84>)
100455ae:	6818      	ldr	r0, [r3, #0]
100455b0:	f7ff fd6a 	bl	10045088 <I2C_Enqueue>
100455b4:	0003      	movs	r3, r0
100455b6:	7023      	strb	r3, [r4, #0]
	return status;
100455b8:	197b      	adds	r3, r7, r5
100455ba:	781b      	ldrb	r3, [r3, #0]

}
100455bc:	0018      	movs	r0, r3
100455be:	46bd      	mov	sp, r7
100455c0:	b004      	add	sp, #16
100455c2:	bdb0      	pop	{r4, r5, r7, pc}
100455c4:	20001bd8 	.word	0x20001bd8
100455c8:	20001be0 	.word	0x20001be0

100455cc <I2C_WriteReg>:
unsigned char I2C_WriteReg(
    unsigned char I2CAddress,
    unsigned char deviceRegisterAddress,
    uint8_t data
)
{
100455cc:	b5b0      	push	{r4, r5, r7, lr}
100455ce:	b084      	sub	sp, #16
100455d0:	af00      	add	r7, sp, #0
100455d2:	0004      	movs	r4, r0
100455d4:	0008      	movs	r0, r1
100455d6:	0011      	movs	r1, r2
100455d8:	1dfb      	adds	r3, r7, #7
100455da:	1c22      	adds	r2, r4, #0
100455dc:	701a      	strb	r2, [r3, #0]
100455de:	1dbb      	adds	r3, r7, #6
100455e0:	1c02      	adds	r2, r0, #0
100455e2:	701a      	strb	r2, [r3, #0]
100455e4:	1d7b      	adds	r3, r7, #5
100455e6:	1c0a      	adds	r2, r1, #0
100455e8:	701a      	strb	r2, [r3, #0]
//        I2C_MEMADD_SIZE_8BIT,
//        &data,
//        1,
//        HAL_MAX_DELAY
//    );
    ret = I2C_Transmit(I2CAddress, deviceRegisterAddress, data);
100455ea:	250f      	movs	r5, #15
100455ec:	197c      	adds	r4, r7, r5
100455ee:	1d7b      	adds	r3, r7, #5
100455f0:	781a      	ldrb	r2, [r3, #0]
100455f2:	1dbb      	adds	r3, r7, #6
100455f4:	7819      	ldrb	r1, [r3, #0]
100455f6:	1dfb      	adds	r3, r7, #7
100455f8:	781b      	ldrb	r3, [r3, #0]
100455fa:	0018      	movs	r0, r3
100455fc:	f7ff ff44 	bl	10045488 <I2C_Transmit>
10045600:	0003      	movs	r3, r0
10045602:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK)
10045604:	197b      	adds	r3, r7, r5
10045606:	781b      	ldrb	r3, [r3, #0]
10045608:	2b00      	cmp	r3, #0
1004560a:	d001      	beq.n	10045610 <I2C_WriteReg+0x44>
    {
        return ERROR;
1004560c:	2301      	movs	r3, #1
1004560e:	e000      	b.n	10045612 <I2C_WriteReg+0x46>
    }

    return SUCCESS;
10045610:	2300      	movs	r3, #0
}
10045612:	0018      	movs	r0, r3
10045614:	46bd      	mov	sp, r7
10045616:	b004      	add	sp, #16
10045618:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004561c <MP3_SendData>:
static uint8_t* folders;
static uint8_t numfolders;

static char lastsent[4];
//----------------------------------------Private Functions--------------------------------------
void MP3_SendData(char string[4]){
1004561c:	b590      	push	{r4, r7, lr}
1004561e:	b085      	sub	sp, #20
10045620:	af00      	add	r7, sp, #0
10045622:	6078      	str	r0, [r7, #4]
	uint16_t accumulation = 0;
10045624:	240e      	movs	r4, #14
10045626:	193b      	adds	r3, r7, r4
10045628:	2200      	movs	r2, #0
1004562a:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(0x7E);//start flag
1004562c:	207e      	movs	r0, #126	@ 0x7e
1004562e:	f001 fca3 	bl	10046f78 <LPUART_WriteTx>
	accumulation += 0xFF;
10045632:	193b      	adds	r3, r7, r4
10045634:	193a      	adds	r2, r7, r4
10045636:	8812      	ldrh	r2, [r2, #0]
10045638:	32ff      	adds	r2, #255	@ 0xff
1004563a:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(0xFF);//Version?
1004563c:	20ff      	movs	r0, #255	@ 0xff
1004563e:	f001 fc9b 	bl	10046f78 <LPUART_WriteTx>
	accumulation += 0x06;
10045642:	193b      	adds	r3, r7, r4
10045644:	193a      	adds	r2, r7, r4
10045646:	8812      	ldrh	r2, [r2, #0]
10045648:	3206      	adds	r2, #6
1004564a:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(0x06);//length
1004564c:	2006      	movs	r0, #6
1004564e:	f001 fc93 	bl	10046f78 <LPUART_WriteTx>

	for(int i = 0; i < 4; i++){
10045652:	2300      	movs	r3, #0
10045654:	60bb      	str	r3, [r7, #8]
10045656:	e01d      	b.n	10045694 <MP3_SendData+0x78>
		accumulation += string[i];
10045658:	68bb      	ldr	r3, [r7, #8]
1004565a:	687a      	ldr	r2, [r7, #4]
1004565c:	18d3      	adds	r3, r2, r3
1004565e:	781b      	ldrb	r3, [r3, #0]
10045660:	0019      	movs	r1, r3
10045662:	220e      	movs	r2, #14
10045664:	18bb      	adds	r3, r7, r2
10045666:	18ba      	adds	r2, r7, r2
10045668:	8812      	ldrh	r2, [r2, #0]
1004566a:	188a      	adds	r2, r1, r2
1004566c:	801a      	strh	r2, [r3, #0]
		lastsent[i] = string[i];
1004566e:	68bb      	ldr	r3, [r7, #8]
10045670:	687a      	ldr	r2, [r7, #4]
10045672:	18d3      	adds	r3, r2, r3
10045674:	7819      	ldrb	r1, [r3, #0]
10045676:	4a16      	ldr	r2, [pc, #88]	@ (100456d0 <MP3_SendData+0xb4>)
10045678:	68bb      	ldr	r3, [r7, #8]
1004567a:	18d3      	adds	r3, r2, r3
1004567c:	1c0a      	adds	r2, r1, #0
1004567e:	701a      	strb	r2, [r3, #0]
		LPUART_WriteTx(string[i]);//command and data
10045680:	68bb      	ldr	r3, [r7, #8]
10045682:	687a      	ldr	r2, [r7, #4]
10045684:	18d3      	adds	r3, r2, r3
10045686:	781b      	ldrb	r3, [r3, #0]
10045688:	0018      	movs	r0, r3
1004568a:	f001 fc75 	bl	10046f78 <LPUART_WriteTx>
	for(int i = 0; i < 4; i++){
1004568e:	68bb      	ldr	r3, [r7, #8]
10045690:	3301      	adds	r3, #1
10045692:	60bb      	str	r3, [r7, #8]
10045694:	68bb      	ldr	r3, [r7, #8]
10045696:	2b03      	cmp	r3, #3
10045698:	ddde      	ble.n	10045658 <MP3_SendData+0x3c>
	}
	accumulation = -accumulation;//??required for it to work
1004569a:	240e      	movs	r4, #14
1004569c:	193b      	adds	r3, r7, r4
1004569e:	193a      	adds	r2, r7, r4
100456a0:	8812      	ldrh	r2, [r2, #0]
100456a2:	4252      	negs	r2, r2
100456a4:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(accumulation>>8);//checksum
100456a6:	193b      	adds	r3, r7, r4
100456a8:	881b      	ldrh	r3, [r3, #0]
100456aa:	0a1b      	lsrs	r3, r3, #8
100456ac:	b29b      	uxth	r3, r3
100456ae:	b2db      	uxtb	r3, r3
100456b0:	0018      	movs	r0, r3
100456b2:	f001 fc61 	bl	10046f78 <LPUART_WriteTx>
	LPUART_WriteTx(accumulation&0xFF);//checksum
100456b6:	193b      	adds	r3, r7, r4
100456b8:	881b      	ldrh	r3, [r3, #0]
100456ba:	b2db      	uxtb	r3, r3
100456bc:	0018      	movs	r0, r3
100456be:	f001 fc5b 	bl	10046f78 <LPUART_WriteTx>
	LPUART_WriteTx(0xEF);//start flag
100456c2:	20ef      	movs	r0, #239	@ 0xef
100456c4:	f001 fc58 	bl	10046f78 <LPUART_WriteTx>

}
100456c8:	46c0      	nop			@ (mov r8, r8)
100456ca:	46bd      	mov	sp, r7
100456cc:	b005      	add	sp, #20
100456ce:	bd90      	pop	{r4, r7, pc}
100456d0:	20001c08 	.word	0x20001c08

100456d4 <parsePacket>:

uint8_t parsePacket(char rx){
100456d4:	b580      	push	{r7, lr}
100456d6:	b086      	sub	sp, #24
100456d8:	af00      	add	r7, sp, #0
100456da:	0002      	movs	r2, r0
100456dc:	1dfb      	adds	r3, r7, #7
100456de:	701a      	strb	r2, [r3, #0]
	if(rx == UARTFAILED){
100456e0:	1dfb      	adds	r3, r7, #7
100456e2:	781b      	ldrb	r3, [r3, #0]
100456e4:	2b25      	cmp	r3, #37	@ 0x25
100456e6:	d101      	bne.n	100456ec <parsePacket+0x18>
		return 0;
100456e8:	2300      	movs	r3, #0
100456ea:	e0c6      	b.n	1004587a <parsePacket+0x1a6>
	}
	if(rx == 0x7E){
100456ec:	1dfb      	adds	r3, r7, #7
100456ee:	781b      	ldrb	r3, [r3, #0]
100456f0:	2b7e      	cmp	r3, #126	@ 0x7e
100456f2:	d102      	bne.n	100456fa <parsePacket+0x26>
		PacketSM = Start;
100456f4:	4b63      	ldr	r3, [pc, #396]	@ (10045884 <parsePacket+0x1b0>)
100456f6:	2200      	movs	r2, #0
100456f8:	701a      	strb	r2, [r3, #0]
	}
	switch (PacketSM){
100456fa:	4b62      	ldr	r3, [pc, #392]	@ (10045884 <parsePacket+0x1b0>)
100456fc:	781b      	ldrb	r3, [r3, #0]
100456fe:	2b08      	cmp	r3, #8
10045700:	d900      	bls.n	10045704 <parsePacket+0x30>
10045702:	e0b9      	b.n	10045878 <parsePacket+0x1a4>
10045704:	009a      	lsls	r2, r3, #2
10045706:	4b60      	ldr	r3, [pc, #384]	@ (10045888 <parsePacket+0x1b4>)
10045708:	18d3      	adds	r3, r2, r3
1004570a:	681b      	ldr	r3, [r3, #0]
1004570c:	469f      	mov	pc, r3
	case Start:
		if(rx == 0xFF){
1004570e:	1dfb      	adds	r3, r7, #7
10045710:	781b      	ldrb	r3, [r3, #0]
10045712:	2bff      	cmp	r3, #255	@ 0xff
10045714:	d000      	beq.n	10045718 <parsePacket+0x44>
10045716:	e0ae      	b.n	10045876 <parsePacket+0x1a2>
			PacketSM = Version;
10045718:	4b5a      	ldr	r3, [pc, #360]	@ (10045884 <parsePacket+0x1b0>)
1004571a:	2201      	movs	r2, #1
1004571c:	701a      	strb	r2, [r3, #0]
		}
		break;
1004571e:	e0aa      	b.n	10045876 <parsePacket+0x1a2>
	case Version:
		if(rx == 0x06){
10045720:	1dfb      	adds	r3, r7, #7
10045722:	781b      	ldrb	r3, [r3, #0]
10045724:	2b06      	cmp	r3, #6
10045726:	d103      	bne.n	10045730 <parsePacket+0x5c>
			PacketSM = Length;
10045728:	4b56      	ldr	r3, [pc, #344]	@ (10045884 <parsePacket+0x1b0>)
1004572a:	2202      	movs	r2, #2
1004572c:	701a      	strb	r2, [r3, #0]
		} else {
			PacketSM = Start;
		}
		break;
1004572e:	e0a3      	b.n	10045878 <parsePacket+0x1a4>
			PacketSM = Start;
10045730:	4b54      	ldr	r3, [pc, #336]	@ (10045884 <parsePacket+0x1b0>)
10045732:	2200      	movs	r2, #0
10045734:	701a      	strb	r2, [r3, #0]
		break;
10045736:	e09f      	b.n	10045878 <parsePacket+0x1a4>
	case Length:
		PacketSM = Command;
10045738:	4b52      	ldr	r3, [pc, #328]	@ (10045884 <parsePacket+0x1b0>)
1004573a:	2203      	movs	r2, #3
1004573c:	701a      	strb	r2, [r3, #0]
		Packet.command = rx;
1004573e:	4b53      	ldr	r3, [pc, #332]	@ (1004588c <parsePacket+0x1b8>)
10045740:	1dfa      	adds	r2, r7, #7
10045742:	7812      	ldrb	r2, [r2, #0]
10045744:	701a      	strb	r2, [r3, #0]
		break;
10045746:	e097      	b.n	10045878 <parsePacket+0x1a4>
	case Command:
		if(rx == 0x01 || rx == 0x00){
10045748:	1dfb      	adds	r3, r7, #7
1004574a:	781b      	ldrb	r3, [r3, #0]
1004574c:	2b01      	cmp	r3, #1
1004574e:	d003      	beq.n	10045758 <parsePacket+0x84>
10045750:	1dfb      	adds	r3, r7, #7
10045752:	781b      	ldrb	r3, [r3, #0]
10045754:	2b00      	cmp	r3, #0
10045756:	d103      	bne.n	10045760 <parsePacket+0x8c>
			PacketSM = Ack;
10045758:	4b4a      	ldr	r3, [pc, #296]	@ (10045884 <parsePacket+0x1b0>)
1004575a:	2204      	movs	r2, #4
1004575c:	701a      	strb	r2, [r3, #0]
		} else {
			PacketSM = Start;
		}
		break;
1004575e:	e08b      	b.n	10045878 <parsePacket+0x1a4>
			PacketSM = Start;
10045760:	4b48      	ldr	r3, [pc, #288]	@ (10045884 <parsePacket+0x1b0>)
10045762:	2200      	movs	r2, #0
10045764:	701a      	strb	r2, [r3, #0]
		break;
10045766:	e087      	b.n	10045878 <parsePacket+0x1a4>
	case Ack:
		PacketSM = Param1;
10045768:	4b46      	ldr	r3, [pc, #280]	@ (10045884 <parsePacket+0x1b0>)
1004576a:	2205      	movs	r2, #5
1004576c:	701a      	strb	r2, [r3, #0]
		Packet.Param1 = rx;
1004576e:	4b47      	ldr	r3, [pc, #284]	@ (1004588c <parsePacket+0x1b8>)
10045770:	1dfa      	adds	r2, r7, #7
10045772:	7812      	ldrb	r2, [r2, #0]
10045774:	709a      	strb	r2, [r3, #2]

		break;
10045776:	e07f      	b.n	10045878 <parsePacket+0x1a4>
	case Param1:
		PacketSM = Param2;
10045778:	4b42      	ldr	r3, [pc, #264]	@ (10045884 <parsePacket+0x1b0>)
1004577a:	2206      	movs	r2, #6
1004577c:	701a      	strb	r2, [r3, #0]
		Packet.Param2 = rx;
1004577e:	4b43      	ldr	r3, [pc, #268]	@ (1004588c <parsePacket+0x1b8>)
10045780:	1dfa      	adds	r2, r7, #7
10045782:	7812      	ldrb	r2, [r2, #0]
10045784:	70da      	strb	r2, [r3, #3]
		break;
10045786:	e077      	b.n	10045878 <parsePacket+0x1a4>
	case Param2:
		uint16_t checkval = -(0x105+Packet.command+Packet.ack+Packet.Param1 +Packet.Param2);
10045788:	4b40      	ldr	r3, [pc, #256]	@ (1004588c <parsePacket+0x1b8>)
1004578a:	781b      	ldrb	r3, [r3, #0]
1004578c:	001a      	movs	r2, r3
1004578e:	4b3f      	ldr	r3, [pc, #252]	@ (1004588c <parsePacket+0x1b8>)
10045790:	785b      	ldrb	r3, [r3, #1]
10045792:	18d3      	adds	r3, r2, r3
10045794:	b29b      	uxth	r3, r3
10045796:	4a3d      	ldr	r2, [pc, #244]	@ (1004588c <parsePacket+0x1b8>)
10045798:	7892      	ldrb	r2, [r2, #2]
1004579a:	189b      	adds	r3, r3, r2
1004579c:	b29b      	uxth	r3, r3
1004579e:	4a3b      	ldr	r2, [pc, #236]	@ (1004588c <parsePacket+0x1b8>)
100457a0:	78d2      	ldrb	r2, [r2, #3]
100457a2:	189b      	adds	r3, r3, r2
100457a4:	b29a      	uxth	r2, r3
100457a6:	2016      	movs	r0, #22
100457a8:	183b      	adds	r3, r7, r0
100457aa:	4939      	ldr	r1, [pc, #228]	@ (10045890 <parsePacket+0x1bc>)
100457ac:	1a8a      	subs	r2, r1, r2
100457ae:	801a      	strh	r2, [r3, #0]
		if(rx == checkval>>8){
100457b0:	1dfb      	adds	r3, r7, #7
100457b2:	781b      	ldrb	r3, [r3, #0]
100457b4:	b29a      	uxth	r2, r3
100457b6:	183b      	adds	r3, r7, r0
100457b8:	881b      	ldrh	r3, [r3, #0]
100457ba:	0a1b      	lsrs	r3, r3, #8
100457bc:	b29b      	uxth	r3, r3
100457be:	429a      	cmp	r2, r3
100457c0:	d103      	bne.n	100457ca <parsePacket+0xf6>
			PacketSM = Checksum1;
100457c2:	4b30      	ldr	r3, [pc, #192]	@ (10045884 <parsePacket+0x1b0>)
100457c4:	2207      	movs	r2, #7
100457c6:	701a      	strb	r2, [r3, #0]
		}else {
			PacketSM = Start;
			char send[4] = {0x40, 0x00, 0x00, 0x06};
			MP3_SendData(send);
		}
		break;
100457c8:	e056      	b.n	10045878 <parsePacket+0x1a4>
			PacketSM = Start;
100457ca:	4b2e      	ldr	r3, [pc, #184]	@ (10045884 <parsePacket+0x1b0>)
100457cc:	2200      	movs	r2, #0
100457ce:	701a      	strb	r2, [r3, #0]
			char send[4] = {0x40, 0x00, 0x00, 0x06};
100457d0:	2110      	movs	r1, #16
100457d2:	187b      	adds	r3, r7, r1
100457d4:	4a2f      	ldr	r2, [pc, #188]	@ (10045894 <parsePacket+0x1c0>)
100457d6:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
100457d8:	187b      	adds	r3, r7, r1
100457da:	0018      	movs	r0, r3
100457dc:	f7ff ff1e 	bl	1004561c <MP3_SendData>
		break;
100457e0:	e04a      	b.n	10045878 <parsePacket+0x1a4>
	case Checksum1:
		checkval = -(0x105+Packet.command+Packet.ack+Packet.Param1 +Packet.Param2);
100457e2:	4b2a      	ldr	r3, [pc, #168]	@ (1004588c <parsePacket+0x1b8>)
100457e4:	781b      	ldrb	r3, [r3, #0]
100457e6:	001a      	movs	r2, r3
100457e8:	4b28      	ldr	r3, [pc, #160]	@ (1004588c <parsePacket+0x1b8>)
100457ea:	785b      	ldrb	r3, [r3, #1]
100457ec:	18d3      	adds	r3, r2, r3
100457ee:	b29b      	uxth	r3, r3
100457f0:	4a26      	ldr	r2, [pc, #152]	@ (1004588c <parsePacket+0x1b8>)
100457f2:	7892      	ldrb	r2, [r2, #2]
100457f4:	189b      	adds	r3, r3, r2
100457f6:	b29b      	uxth	r3, r3
100457f8:	4a24      	ldr	r2, [pc, #144]	@ (1004588c <parsePacket+0x1b8>)
100457fa:	78d2      	ldrb	r2, [r2, #3]
100457fc:	189b      	adds	r3, r3, r2
100457fe:	b29a      	uxth	r2, r3
10045800:	2016      	movs	r0, #22
10045802:	183b      	adds	r3, r7, r0
10045804:	4922      	ldr	r1, [pc, #136]	@ (10045890 <parsePacket+0x1bc>)
10045806:	1a8a      	subs	r2, r1, r2
10045808:	801a      	strh	r2, [r3, #0]
		if(rx == (checkval&0xFF)){
1004580a:	1dfb      	adds	r3, r7, #7
1004580c:	781a      	ldrb	r2, [r3, #0]
1004580e:	183b      	adds	r3, r7, r0
10045810:	881b      	ldrh	r3, [r3, #0]
10045812:	21ff      	movs	r1, #255	@ 0xff
10045814:	400b      	ands	r3, r1
10045816:	429a      	cmp	r2, r3
10045818:	d103      	bne.n	10045822 <parsePacket+0x14e>
			PacketSM = Checksum2;
1004581a:	4b1a      	ldr	r3, [pc, #104]	@ (10045884 <parsePacket+0x1b0>)
1004581c:	2208      	movs	r2, #8
1004581e:	701a      	strb	r2, [r3, #0]
		}else {
			PacketSM = Start;
			char send[4] = {0x40, 0x00, 0x00, 0x06};
			MP3_SendData(send);
		}
		break;
10045820:	e02a      	b.n	10045878 <parsePacket+0x1a4>
			PacketSM = Start;
10045822:	4b18      	ldr	r3, [pc, #96]	@ (10045884 <parsePacket+0x1b0>)
10045824:	2200      	movs	r2, #0
10045826:	701a      	strb	r2, [r3, #0]
			char send[4] = {0x40, 0x00, 0x00, 0x06};
10045828:	210c      	movs	r1, #12
1004582a:	187b      	adds	r3, r7, r1
1004582c:	4a19      	ldr	r2, [pc, #100]	@ (10045894 <parsePacket+0x1c0>)
1004582e:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
10045830:	187b      	adds	r3, r7, r1
10045832:	0018      	movs	r0, r3
10045834:	f7ff fef2 	bl	1004561c <MP3_SendData>
		break;
10045838:	e01e      	b.n	10045878 <parsePacket+0x1a4>
	case Checksum2:
		if(rx == 0xEF){
1004583a:	1dfb      	adds	r3, r7, #7
1004583c:	781b      	ldrb	r3, [r3, #0]
1004583e:	2bef      	cmp	r3, #239	@ 0xef
10045840:	d115      	bne.n	1004586e <parsePacket+0x19a>
			if(Packet.command == 0x40){
10045842:	4b12      	ldr	r3, [pc, #72]	@ (1004588c <parsePacket+0x1b8>)
10045844:	781b      	ldrb	r3, [r3, #0]
10045846:	2b40      	cmp	r3, #64	@ 0x40
10045848:	d10c      	bne.n	10045864 <parsePacket+0x190>
				if(Packet.Param2 == 0x04){
1004584a:	4b10      	ldr	r3, [pc, #64]	@ (1004588c <parsePacket+0x1b8>)
1004584c:	78db      	ldrb	r3, [r3, #3]
1004584e:	2b04      	cmp	r3, #4
10045850:	d108      	bne.n	10045864 <parsePacket+0x190>
					MP3_SendData(lastsent);
10045852:	4b11      	ldr	r3, [pc, #68]	@ (10045898 <parsePacket+0x1c4>)
10045854:	0018      	movs	r0, r3
10045856:	f7ff fee1 	bl	1004561c <MP3_SendData>

					PacketSM = Start;
1004585a:	4b0a      	ldr	r3, [pc, #40]	@ (10045884 <parsePacket+0x1b0>)
1004585c:	2200      	movs	r2, #0
1004585e:	701a      	strb	r2, [r3, #0]
					return 0;
10045860:	2300      	movs	r3, #0
10045862:	e00a      	b.n	1004587a <parsePacket+0x1a6>
				}
			}
			PacketSM = Start;
10045864:	4b07      	ldr	r3, [pc, #28]	@ (10045884 <parsePacket+0x1b0>)
10045866:	2200      	movs	r2, #0
10045868:	701a      	strb	r2, [r3, #0]
			return 1;
1004586a:	2301      	movs	r3, #1
1004586c:	e005      	b.n	1004587a <parsePacket+0x1a6>
		}
		PacketSM = Start;
1004586e:	4b05      	ldr	r3, [pc, #20]	@ (10045884 <parsePacket+0x1b0>)
10045870:	2200      	movs	r2, #0
10045872:	701a      	strb	r2, [r3, #0]
		break;
10045874:	e000      	b.n	10045878 <parsePacket+0x1a4>
		break;
10045876:	46c0      	nop			@ (mov r8, r8)
	}
	return 0;
10045878:	2300      	movs	r3, #0
}
1004587a:	0018      	movs	r0, r3
1004587c:	46bd      	mov	sp, r7
1004587e:	b006      	add	sp, #24
10045880:	bd80      	pop	{r7, pc}
10045882:	46c0      	nop			@ (mov r8, r8)
10045884:	20001bf5 	.word	0x20001bf5
10045888:	1006a030 	.word	0x1006a030
1004588c:	20001bf8 	.word	0x20001bf8
10045890:	fffffefb 	.word	0xfffffefb
10045894:	06000040 	.word	0x06000040
10045898:	20001c08 	.word	0x20001c08

1004589c <MP3_Event_Init>:
 * @Function: MP3_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t MP3_Event_Init(FIFO Queue){
1004589c:	b580      	push	{r7, lr}
1004589e:	b084      	sub	sp, #16
100458a0:	af00      	add	r7, sp, #0
100458a2:	6078      	str	r0, [r7, #4]
	//somehow need to be sent 3 seconds after the mp3 turns on
    MP3queue = Queue;
100458a4:	4b1b      	ldr	r3, [pc, #108]	@ (10045914 <MP3_Event_Init+0x78>)
100458a6:	687a      	ldr	r2, [r7, #4]
100458a8:	601a      	str	r2, [r3, #0]
    TIMERS_Init();
100458aa:	f001 f8c9 	bl	10046a40 <TIMERS_Init>
    pause = 0x02;
100458ae:	4b1a      	ldr	r3, [pc, #104]	@ (10045918 <MP3_Event_Init+0x7c>)
100458b0:	2202      	movs	r2, #2
100458b2:	701a      	strb	r2, [r3, #0]
    DC = FLASH_GetDutyCycle()/100;
100458b4:	f7ff f872 	bl	1004499c <FLASH_GetDutyCycle>
100458b8:	0003      	movs	r3, r0
100458ba:	2164      	movs	r1, #100	@ 0x64
100458bc:	0018      	movs	r0, r3
100458be:	f7fa fcbf 	bl	10040240 <__udivsi3>
100458c2:	0003      	movs	r3, r0
100458c4:	b2da      	uxtb	r2, r3
100458c6:	4b15      	ldr	r3, [pc, #84]	@ (1004591c <MP3_Event_Init+0x80>)
100458c8:	701a      	strb	r2, [r3, #0]
    volume = FLASH_GetVolume()/100;
100458ca:	f7ff f851 	bl	10044970 <FLASH_GetVolume>
100458ce:	0003      	movs	r3, r0
100458d0:	2164      	movs	r1, #100	@ 0x64
100458d2:	0018      	movs	r0, r3
100458d4:	f7fa fcb4 	bl	10040240 <__udivsi3>
100458d8:	0003      	movs	r3, r0
100458da:	b2da      	uxtb	r2, r3
100458dc:	4b10      	ldr	r3, [pc, #64]	@ (10045920 <MP3_Event_Init+0x84>)
100458de:	701a      	strb	r2, [r3, #0]
    starttime = TIMERS_GetMilliSeconds();
100458e0:	f001 f8fa 	bl	10046ad8 <TIMERS_GetMilliSeconds>
100458e4:	0002      	movs	r2, r0
100458e6:	4b0f      	ldr	r3, [pc, #60]	@ (10045924 <MP3_Event_Init+0x88>)
100458e8:	601a      	str	r2, [r3, #0]
    inittime = TIMERS_GetMilliSeconds();
100458ea:	f001 f8f5 	bl	10046ad8 <TIMERS_GetMilliSeconds>
100458ee:	0002      	movs	r2, r0
100458f0:	4b0d      	ldr	r3, [pc, #52]	@ (10045928 <MP3_Event_Init+0x8c>)
100458f2:	601a      	str	r2, [r3, #0]
    initialized = 0;
100458f4:	4b0d      	ldr	r3, [pc, #52]	@ (1004592c <MP3_Event_Init+0x90>)
100458f6:	2200      	movs	r2, #0
100458f8:	701a      	strb	r2, [r3, #0]
	{
	char send[4] = {0x0C, 0x00, 0x00, 0x00};//reset module
100458fa:	210c      	movs	r1, #12
100458fc:	187b      	adds	r3, r7, r1
100458fe:	220c      	movs	r2, #12
10045900:	601a      	str	r2, [r3, #0]
	MP3_SendData(send);
10045902:	187b      	adds	r3, r7, r1
10045904:	0018      	movs	r0, r3
10045906:	f7ff fe89 	bl	1004561c <MP3_SendData>
	}

    return INIT_OK;
1004590a:	2301      	movs	r3, #1
}
1004590c:	0018      	movs	r0, r3
1004590e:	46bd      	mov	sp, r7
10045910:	b004      	add	sp, #16
10045912:	bd80      	pop	{r7, pc}
10045914:	20001be4 	.word	0x20001be4
10045918:	20001be8 	.word	0x20001be8
1004591c:	20001be9 	.word	0x20001be9
10045920:	20001bea 	.word	0x20001bea
10045924:	20001bec 	.word	0x20001bec
10045928:	20001bf0 	.word	0x20001bf0
1004592c:	20001bf4 	.word	0x20001bf4

10045930 <MP3_Event_Post>:
 * @Function: MP3_Event_Init
 * @Brief: Provides the ability for state machines to interact
 * @param: event to be posted
 * @return: none
 */
void MP3_Event_Post(Event_t event){
10045930:	b580      	push	{r7, lr}
10045932:	b082      	sub	sp, #8
10045934:	af00      	add	r7, sp, #0
10045936:	1d3b      	adds	r3, r7, #4
10045938:	6018      	str	r0, [r3, #0]
    FIFO_Enqueue(MP3queue, event);
1004593a:	4b05      	ldr	r3, [pc, #20]	@ (10045950 <MP3_Event_Post+0x20>)
1004593c:	681a      	ldr	r2, [r3, #0]
1004593e:	1d3b      	adds	r3, r7, #4
10045940:	6819      	ldr	r1, [r3, #0]
10045942:	0010      	movs	r0, r2
10045944:	f7fe fec1 	bl	100446ca <FIFO_Enqueue>
}
10045948:	46c0      	nop			@ (mov r8, r8)
1004594a:	46bd      	mov	sp, r7
1004594c:	b002      	add	sp, #8
1004594e:	bd80      	pop	{r7, pc}
10045950:	20001be4 	.word	0x20001be4

10045954 <MP3_Event_Updater>:
 * @Function: MP3_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the
 * @param: none
 * @return: An event
 */
Event_t MP3_Event_Updater(void){
10045954:	b5f0      	push	{r4, r5, r6, r7, lr}
10045956:	b087      	sub	sp, #28
10045958:	af00      	add	r7, sp, #0
    Event_t event = (Event_t){EVENT_NONE, 0};
1004595a:	2508      	movs	r5, #8
1004595c:	197b      	adds	r3, r7, r5
1004595e:	2200      	movs	r2, #0
10045960:	701a      	strb	r2, [r3, #0]
10045962:	197b      	adds	r3, r7, r5
10045964:	2200      	movs	r2, #0
10045966:	805a      	strh	r2, [r3, #2]
    uint32_t timer = TIMERS_GetMilliSeconds();
10045968:	f001 f8b6 	bl	10046ad8 <TIMERS_GetMilliSeconds>
1004596c:	0003      	movs	r3, r0
1004596e:	617b      	str	r3, [r7, #20]
    char rx = LPUART_ReadRx();
10045970:	2613      	movs	r6, #19
10045972:	19bc      	adds	r4, r7, r6
10045974:	f001 fad4 	bl	10046f20 <LPUART_ReadRx>
10045978:	0003      	movs	r3, r0
1004597a:	7023      	strb	r3, [r4, #0]
    //Check for LPUART events
	if(rx != UARTFAILED){
1004597c:	0031      	movs	r1, r6
1004597e:	187b      	adds	r3, r7, r1
10045980:	781b      	ldrb	r3, [r3, #0]
10045982:	2b25      	cmp	r3, #37	@ 0x25
10045984:	d00b      	beq.n	1004599e <MP3_Event_Updater+0x4a>
		event.status = EVENT_LPUART;
10045986:	197b      	adds	r3, r7, r5
10045988:	2208      	movs	r2, #8
1004598a:	701a      	strb	r2, [r3, #0]
		event.data = rx;
1004598c:	187b      	adds	r3, r7, r1
1004598e:	781b      	ldrb	r3, [r3, #0]
10045990:	b29a      	uxth	r2, r3
10045992:	197b      	adds	r3, r7, r5
10045994:	805a      	strh	r2, [r3, #2]
		MP3_Event_Post(event);
10045996:	197b      	adds	r3, r7, r5
10045998:	6818      	ldr	r0, [r3, #0]
1004599a:	f7ff ffc9 	bl	10045930 <MP3_Event_Post>
	}

	//Check for duty cycle events
	if(!(pause&0x02)){//if the module is in a scheduled playing time
1004599e:	4b6d      	ldr	r3, [pc, #436]	@ (10045b54 <MP3_Event_Updater+0x200>)
100459a0:	781b      	ldrb	r3, [r3, #0]
100459a2:	001a      	movs	r2, r3
100459a4:	2302      	movs	r3, #2
100459a6:	4013      	ands	r3, r2
100459a8:	d000      	beq.n	100459ac <MP3_Event_Updater+0x58>
100459aa:	e081      	b.n	10045ab0 <MP3_Event_Updater+0x15c>
		if (!pause){
100459ac:	4b69      	ldr	r3, [pc, #420]	@ (10045b54 <MP3_Event_Updater+0x200>)
100459ae:	781b      	ldrb	r3, [r3, #0]
100459b0:	2b00      	cmp	r3, #0
100459b2:	d13d      	bne.n	10045a30 <MP3_Event_Updater+0xdc>
			if((CYCLELENGTH*((double)DC/100.0)+starttime) <= timer ){//if the speaker is playing, and time is up
100459b4:	4b68      	ldr	r3, [pc, #416]	@ (10045b58 <MP3_Event_Updater+0x204>)
100459b6:	781b      	ldrb	r3, [r3, #0]
100459b8:	0018      	movs	r0, r3
100459ba:	f7fc fa4d 	bl	10041e58 <__aeabi_ui2d>
100459be:	2200      	movs	r2, #0
100459c0:	4b66      	ldr	r3, [pc, #408]	@ (10045b5c <MP3_Event_Updater+0x208>)
100459c2:	f7fb fafb 	bl	10040fbc <__aeabi_ddiv>
100459c6:	0002      	movs	r2, r0
100459c8:	000b      	movs	r3, r1
100459ca:	0010      	movs	r0, r2
100459cc:	0019      	movs	r1, r3
100459ce:	2200      	movs	r2, #0
100459d0:	4b63      	ldr	r3, [pc, #396]	@ (10045b60 <MP3_Event_Updater+0x20c>)
100459d2:	f7fb ff2d 	bl	10041830 <__aeabi_dmul>
100459d6:	0002      	movs	r2, r0
100459d8:	000b      	movs	r3, r1
100459da:	0014      	movs	r4, r2
100459dc:	001d      	movs	r5, r3
100459de:	4b61      	ldr	r3, [pc, #388]	@ (10045b64 <MP3_Event_Updater+0x210>)
100459e0:	681b      	ldr	r3, [r3, #0]
100459e2:	0018      	movs	r0, r3
100459e4:	f7fc fa38 	bl	10041e58 <__aeabi_ui2d>
100459e8:	0002      	movs	r2, r0
100459ea:	000b      	movs	r3, r1
100459ec:	0020      	movs	r0, r4
100459ee:	0029      	movs	r1, r5
100459f0:	f7fa ff1e 	bl	10040830 <__aeabi_dadd>
100459f4:	0002      	movs	r2, r0
100459f6:	000b      	movs	r3, r1
100459f8:	0014      	movs	r4, r2
100459fa:	001d      	movs	r5, r3
100459fc:	6978      	ldr	r0, [r7, #20]
100459fe:	f7fc fa2b 	bl	10041e58 <__aeabi_ui2d>
10045a02:	0002      	movs	r2, r0
10045a04:	000b      	movs	r3, r1
10045a06:	0020      	movs	r0, r4
10045a08:	0029      	movs	r1, r5
10045a0a:	f7fa fdbb 	bl	10040584 <__aeabi_dcmple>
10045a0e:	1e03      	subs	r3, r0, #0
10045a10:	d04e      	beq.n	10045ab0 <MP3_Event_Updater+0x15c>
				event.status = EVENT_TIMEOUT;
10045a12:	2108      	movs	r1, #8
10045a14:	187b      	adds	r3, r7, r1
10045a16:	2209      	movs	r2, #9
10045a18:	701a      	strb	r2, [r3, #0]
				event.data = 1;//next state of pause
10045a1a:	187b      	adds	r3, r7, r1
10045a1c:	2201      	movs	r2, #1
10045a1e:	805a      	strh	r2, [r3, #2]
				starttime = timer;
10045a20:	4b50      	ldr	r3, [pc, #320]	@ (10045b64 <MP3_Event_Updater+0x210>)
10045a22:	697a      	ldr	r2, [r7, #20]
10045a24:	601a      	str	r2, [r3, #0]
				MP3_Event_Post(event);
10045a26:	187b      	adds	r3, r7, r1
10045a28:	6818      	ldr	r0, [r3, #0]
10045a2a:	f7ff ff81 	bl	10045930 <MP3_Event_Post>
10045a2e:	e03f      	b.n	10045ab0 <MP3_Event_Updater+0x15c>
			}
		} else {
			if((CYCLELENGTH*((double)(100-DC)/100.0)+starttime) <= timer ){// if the speaker is playing and time is up, DC = 0 don't play, used to stop the speaker
10045a30:	4b49      	ldr	r3, [pc, #292]	@ (10045b58 <MP3_Event_Updater+0x204>)
10045a32:	781b      	ldrb	r3, [r3, #0]
10045a34:	001a      	movs	r2, r3
10045a36:	2364      	movs	r3, #100	@ 0x64
10045a38:	1a9b      	subs	r3, r3, r2
10045a3a:	0018      	movs	r0, r3
10045a3c:	f7fc f9de 	bl	10041dfc <__aeabi_i2d>
10045a40:	2200      	movs	r2, #0
10045a42:	4b46      	ldr	r3, [pc, #280]	@ (10045b5c <MP3_Event_Updater+0x208>)
10045a44:	f7fb faba 	bl	10040fbc <__aeabi_ddiv>
10045a48:	0002      	movs	r2, r0
10045a4a:	000b      	movs	r3, r1
10045a4c:	0010      	movs	r0, r2
10045a4e:	0019      	movs	r1, r3
10045a50:	2200      	movs	r2, #0
10045a52:	4b43      	ldr	r3, [pc, #268]	@ (10045b60 <MP3_Event_Updater+0x20c>)
10045a54:	f7fb feec 	bl	10041830 <__aeabi_dmul>
10045a58:	0002      	movs	r2, r0
10045a5a:	000b      	movs	r3, r1
10045a5c:	0014      	movs	r4, r2
10045a5e:	001d      	movs	r5, r3
10045a60:	4b40      	ldr	r3, [pc, #256]	@ (10045b64 <MP3_Event_Updater+0x210>)
10045a62:	681b      	ldr	r3, [r3, #0]
10045a64:	0018      	movs	r0, r3
10045a66:	f7fc f9f7 	bl	10041e58 <__aeabi_ui2d>
10045a6a:	0002      	movs	r2, r0
10045a6c:	000b      	movs	r3, r1
10045a6e:	0020      	movs	r0, r4
10045a70:	0029      	movs	r1, r5
10045a72:	f7fa fedd 	bl	10040830 <__aeabi_dadd>
10045a76:	0002      	movs	r2, r0
10045a78:	000b      	movs	r3, r1
10045a7a:	0014      	movs	r4, r2
10045a7c:	001d      	movs	r5, r3
10045a7e:	6978      	ldr	r0, [r7, #20]
10045a80:	f7fc f9ea 	bl	10041e58 <__aeabi_ui2d>
10045a84:	0002      	movs	r2, r0
10045a86:	000b      	movs	r3, r1
10045a88:	0020      	movs	r0, r4
10045a8a:	0029      	movs	r1, r5
10045a8c:	f7fa fd7a 	bl	10040584 <__aeabi_dcmple>
10045a90:	1e03      	subs	r3, r0, #0
10045a92:	d00d      	beq.n	10045ab0 <MP3_Event_Updater+0x15c>
				event.status = EVENT_TIMEOUT;
10045a94:	2108      	movs	r1, #8
10045a96:	187b      	adds	r3, r7, r1
10045a98:	2209      	movs	r2, #9
10045a9a:	701a      	strb	r2, [r3, #0]
				event.data = 0;//next state of pause
10045a9c:	187b      	adds	r3, r7, r1
10045a9e:	2200      	movs	r2, #0
10045aa0:	805a      	strh	r2, [r3, #2]
				starttime = timer;
10045aa2:	4b30      	ldr	r3, [pc, #192]	@ (10045b64 <MP3_Event_Updater+0x210>)
10045aa4:	697a      	ldr	r2, [r7, #20]
10045aa6:	601a      	str	r2, [r3, #0]
				MP3_Event_Post(event);
10045aa8:	187b      	adds	r3, r7, r1
10045aaa:	6818      	ldr	r0, [r3, #0]
10045aac:	f7ff ff40 	bl	10045930 <MP3_Event_Post>
			}
		}
	}

	//check for init timer events
    if(((timer-inittime) >= 3000) && !initialized){//wait for the speaker to be ready for use n initialization
10045ab0:	4b2d      	ldr	r3, [pc, #180]	@ (10045b68 <MP3_Event_Updater+0x214>)
10045ab2:	681b      	ldr	r3, [r3, #0]
10045ab4:	697a      	ldr	r2, [r7, #20]
10045ab6:	1ad3      	subs	r3, r2, r3
10045ab8:	4a2c      	ldr	r2, [pc, #176]	@ (10045b6c <MP3_Event_Updater+0x218>)
10045aba:	4293      	cmp	r3, r2
10045abc:	d90e      	bls.n	10045adc <MP3_Event_Updater+0x188>
10045abe:	4b2c      	ldr	r3, [pc, #176]	@ (10045b70 <MP3_Event_Updater+0x21c>)
10045ac0:	781b      	ldrb	r3, [r3, #0]
10045ac2:	2b00      	cmp	r3, #0
10045ac4:	d10a      	bne.n	10045adc <MP3_Event_Updater+0x188>
		event.status = EVENT_INIT;
10045ac6:	2108      	movs	r1, #8
10045ac8:	187b      	adds	r3, r7, r1
10045aca:	2201      	movs	r2, #1
10045acc:	701a      	strb	r2, [r3, #0]
		event.data = 0;
10045ace:	187b      	adds	r3, r7, r1
10045ad0:	2200      	movs	r2, #0
10045ad2:	805a      	strh	r2, [r3, #2]
		MP3_Event_Post(event);
10045ad4:	187b      	adds	r3, r7, r1
10045ad6:	6818      	ldr	r0, [r3, #0]
10045ad8:	f7ff ff2a 	bl	10045930 <MP3_Event_Post>
	}

    //check for settings update events
    if(volume != FLASH_GetVolume() || DC != FLASH_GetDutyCycle()){
10045adc:	f7fe ff48 	bl	10044970 <FLASH_GetVolume>
10045ae0:	0003      	movs	r3, r0
10045ae2:	001a      	movs	r2, r3
10045ae4:	4b23      	ldr	r3, [pc, #140]	@ (10045b74 <MP3_Event_Updater+0x220>)
10045ae6:	781b      	ldrb	r3, [r3, #0]
10045ae8:	429a      	cmp	r2, r3
10045aea:	d107      	bne.n	10045afc <MP3_Event_Updater+0x1a8>
10045aec:	f7fe ff56 	bl	1004499c <FLASH_GetDutyCycle>
10045af0:	0003      	movs	r3, r0
10045af2:	001a      	movs	r2, r3
10045af4:	4b18      	ldr	r3, [pc, #96]	@ (10045b58 <MP3_Event_Updater+0x204>)
10045af6:	781b      	ldrb	r3, [r3, #0]
10045af8:	429a      	cmp	r2, r3
10045afa:	d014      	beq.n	10045b26 <MP3_Event_Updater+0x1d2>
    	event.status = EVENT_SETTINGS;
10045afc:	2408      	movs	r4, #8
10045afe:	193b      	adds	r3, r7, r4
10045b00:	220a      	movs	r2, #10
10045b02:	701a      	strb	r2, [r3, #0]
    	event.data = (volume == FLASH_GetVolume());
10045b04:	f7fe ff34 	bl	10044970 <FLASH_GetVolume>
10045b08:	0003      	movs	r3, r0
10045b0a:	001a      	movs	r2, r3
10045b0c:	4b19      	ldr	r3, [pc, #100]	@ (10045b74 <MP3_Event_Updater+0x220>)
10045b0e:	781b      	ldrb	r3, [r3, #0]
10045b10:	1ad3      	subs	r3, r2, r3
10045b12:	425a      	negs	r2, r3
10045b14:	4153      	adcs	r3, r2
10045b16:	b2db      	uxtb	r3, r3
10045b18:	001a      	movs	r2, r3
10045b1a:	193b      	adds	r3, r7, r4
10045b1c:	805a      	strh	r2, [r3, #2]
		MP3_Event_Post(event);
10045b1e:	193b      	adds	r3, r7, r4
10045b20:	6818      	ldr	r0, [r3, #0]
10045b22:	f7ff ff05 	bl	10045930 <MP3_Event_Post>
    }
    return event;
10045b26:	210c      	movs	r1, #12
10045b28:	187b      	adds	r3, r7, r1
10045b2a:	2208      	movs	r2, #8
10045b2c:	18ba      	adds	r2, r7, r2
10045b2e:	6812      	ldr	r2, [r2, #0]
10045b30:	601a      	str	r2, [r3, #0]
10045b32:	187a      	adds	r2, r7, r1
10045b34:	2300      	movs	r3, #0
10045b36:	8811      	ldrh	r1, [r2, #0]
10045b38:	0409      	lsls	r1, r1, #16
10045b3a:	0c09      	lsrs	r1, r1, #16
10045b3c:	0c1b      	lsrs	r3, r3, #16
10045b3e:	041b      	lsls	r3, r3, #16
10045b40:	430b      	orrs	r3, r1
10045b42:	8852      	ldrh	r2, [r2, #2]
10045b44:	0412      	lsls	r2, r2, #16
10045b46:	041b      	lsls	r3, r3, #16
10045b48:	0c1b      	lsrs	r3, r3, #16
10045b4a:	4313      	orrs	r3, r2
}
10045b4c:	0018      	movs	r0, r3
10045b4e:	46bd      	mov	sp, r7
10045b50:	b007      	add	sp, #28
10045b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
10045b54:	20001be8 	.word	0x20001be8
10045b58:	20001be9 	.word	0x20001be9
10045b5c:	40590000 	.word	0x40590000
10045b60:	41224f80 	.word	0x41224f80
10045b64:	20001bec 	.word	0x20001bec
10045b68:	20001bf0 	.word	0x20001bf0
10045b6c:	00000bb7 	.word	0x00000bb7
10045b70:	20001bf4 	.word	0x20001bf4
10045b74:	20001bea 	.word	0x20001bea

10045b78 <MP3_Event_Handler>:
 * @Function: MP3_Event_Handler
 * @Brief:
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t MP3_Event_Handler(Event_t event){
10045b78:	b5b0      	push	{r4, r5, r7, lr}
10045b7a:	b09e      	sub	sp, #120	@ 0x78
10045b7c:	af00      	add	r7, sp, #0
10045b7e:	1d3b      	adds	r3, r7, #4
10045b80:	6018      	str	r0, [r3, #0]
	if(event.status == EVENT_INIT){
10045b82:	1d3b      	adds	r3, r7, #4
10045b84:	781b      	ldrb	r3, [r3, #0]
10045b86:	b25b      	sxtb	r3, r3
10045b88:	2b01      	cmp	r3, #1
10045b8a:	d000      	beq.n	10045b8e <MP3_Event_Handler+0x16>
10045b8c:	e0bd      	b.n	10045d0a <MP3_Event_Handler+0x192>
		//7E FF 06 08 00 00 01 xx EF //repeat folder
//		char send[4] = {0x08, 0x00, 0x00, 0x01};
//		MP3_SendData(send);

		{
		char send[4] = {0x0E, 0x00, 0x00, 0x00};//pause
10045b8e:	2154      	movs	r1, #84	@ 0x54
10045b90:	187b      	adds	r3, r7, r1
10045b92:	220e      	movs	r2, #14
10045b94:	601a      	str	r2, [r3, #0]
		MP3_SendData(send);
10045b96:	187b      	adds	r3, r7, r1
10045b98:	0018      	movs	r0, r3
10045b9a:	f7ff fd3f 	bl	1004561c <MP3_SendData>
		}
		uint8_t scanning = 1;
10045b9e:	2377      	movs	r3, #119	@ 0x77
10045ba0:	18fb      	adds	r3, r7, r3
10045ba2:	2201      	movs	r2, #1
10045ba4:	701a      	strb	r2, [r3, #0]
		numfolders = 1;
10045ba6:	4bc0      	ldr	r3, [pc, #768]	@ (10045ea8 <MP3_Event_Handler+0x330>)
10045ba8:	2201      	movs	r2, #1
10045baa:	701a      	strb	r2, [r3, #0]
		FIFO tempFolders = FIFO_Create();
10045bac:	f7fe fd50 	bl	10044650 <FIFO_Create>
10045bb0:	0003      	movs	r3, r0
10045bb2:	66bb      	str	r3, [r7, #104]	@ 0x68
		while(scanning){
10045bb4:	e054      	b.n	10045c60 <MP3_Event_Handler+0xe8>
			{
			char send[4] = {0x4E, 0x00, 0x00, numfolders};//query the number of files on the micrSD
10045bb6:	2150      	movs	r1, #80	@ 0x50
10045bb8:	187b      	adds	r3, r7, r1
10045bba:	224e      	movs	r2, #78	@ 0x4e
10045bbc:	701a      	strb	r2, [r3, #0]
10045bbe:	187b      	adds	r3, r7, r1
10045bc0:	2200      	movs	r2, #0
10045bc2:	705a      	strb	r2, [r3, #1]
10045bc4:	187b      	adds	r3, r7, r1
10045bc6:	2200      	movs	r2, #0
10045bc8:	709a      	strb	r2, [r3, #2]
10045bca:	4bb7      	ldr	r3, [pc, #732]	@ (10045ea8 <MP3_Event_Handler+0x330>)
10045bcc:	781a      	ldrb	r2, [r3, #0]
10045bce:	187b      	adds	r3, r7, r1
10045bd0:	70da      	strb	r2, [r3, #3]
			MP3_SendData(send);
10045bd2:	187b      	adds	r3, r7, r1
10045bd4:	0018      	movs	r0, r3
10045bd6:	f7ff fd21 	bl	1004561c <MP3_SendData>
			}
			uint32_t time = TIMERS_GetMilliSeconds();
10045bda:	f000 ff7d 	bl	10046ad8 <TIMERS_GetMilliSeconds>
10045bde:	0003      	movs	r3, r0
10045be0:	667b      	str	r3, [r7, #100]	@ 0x64
			while(!parsePacket(LPUART_ReadRx()) && (time+1000) > TIMERS_GetMilliSeconds());
10045be2:	46c0      	nop			@ (mov r8, r8)
10045be4:	f001 f99c 	bl	10046f20 <LPUART_ReadRx>
10045be8:	0003      	movs	r3, r0
10045bea:	0018      	movs	r0, r3
10045bec:	f7ff fd72 	bl	100456d4 <parsePacket>
10045bf0:	1e03      	subs	r3, r0, #0
10045bf2:	d108      	bne.n	10045c06 <MP3_Event_Handler+0x8e>
10045bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10045bf6:	22fa      	movs	r2, #250	@ 0xfa
10045bf8:	0092      	lsls	r2, r2, #2
10045bfa:	189c      	adds	r4, r3, r2
10045bfc:	f000 ff6c 	bl	10046ad8 <TIMERS_GetMilliSeconds>
10045c00:	0003      	movs	r3, r0
10045c02:	429c      	cmp	r4, r3
10045c04:	d8ee      	bhi.n	10045be4 <MP3_Event_Handler+0x6c>
			if((time+1000) < TIMERS_GetMilliSeconds()){
10045c06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10045c08:	22fa      	movs	r2, #250	@ 0xfa
10045c0a:	0092      	lsls	r2, r2, #2
10045c0c:	189c      	adds	r4, r3, r2
10045c0e:	f000 ff63 	bl	10046ad8 <TIMERS_GetMilliSeconds>
10045c12:	0003      	movs	r3, r0
10045c14:	429c      	cmp	r4, r3
10045c16:	d322      	bcc.n	10045c5e <MP3_Event_Handler+0xe6>
				continue;// reattempt communication
			}
			if(Packet.command==0x4E){
10045c18:	4ba4      	ldr	r3, [pc, #656]	@ (10045eac <MP3_Event_Handler+0x334>)
10045c1a:	781b      	ldrb	r3, [r3, #0]
10045c1c:	2b4e      	cmp	r3, #78	@ 0x4e
10045c1e:	d115      	bne.n	10045c4c <MP3_Event_Handler+0xd4>
				numfolders++;
10045c20:	4ba1      	ldr	r3, [pc, #644]	@ (10045ea8 <MP3_Event_Handler+0x330>)
10045c22:	781b      	ldrb	r3, [r3, #0]
10045c24:	3301      	adds	r3, #1
10045c26:	b2da      	uxtb	r2, r3
10045c28:	4b9f      	ldr	r3, [pc, #636]	@ (10045ea8 <MP3_Event_Handler+0x330>)
10045c2a:	701a      	strb	r2, [r3, #0]
				FIFO_Enqueue(tempFolders, (Event_t){EVENT_NONE, Packet.Param2});
10045c2c:	214c      	movs	r1, #76	@ 0x4c
10045c2e:	187b      	adds	r3, r7, r1
10045c30:	2200      	movs	r2, #0
10045c32:	701a      	strb	r2, [r3, #0]
10045c34:	4b9d      	ldr	r3, [pc, #628]	@ (10045eac <MP3_Event_Handler+0x334>)
10045c36:	78db      	ldrb	r3, [r3, #3]
10045c38:	001a      	movs	r2, r3
10045c3a:	187b      	adds	r3, r7, r1
10045c3c:	805a      	strh	r2, [r3, #2]
10045c3e:	187b      	adds	r3, r7, r1
10045c40:	6eba      	ldr	r2, [r7, #104]	@ 0x68
10045c42:	6819      	ldr	r1, [r3, #0]
10045c44:	0010      	movs	r0, r2
10045c46:	f7fe fd40 	bl	100446ca <FIFO_Enqueue>
10045c4a:	e009      	b.n	10045c60 <MP3_Event_Handler+0xe8>
			}else if(Packet.command == 0x40){
10045c4c:	4b97      	ldr	r3, [pc, #604]	@ (10045eac <MP3_Event_Handler+0x334>)
10045c4e:	781b      	ldrb	r3, [r3, #0]
10045c50:	2b40      	cmp	r3, #64	@ 0x40
10045c52:	d105      	bne.n	10045c60 <MP3_Event_Handler+0xe8>
				scanning = 0;
10045c54:	2377      	movs	r3, #119	@ 0x77
10045c56:	18fb      	adds	r3, r7, r3
10045c58:	2200      	movs	r2, #0
10045c5a:	701a      	strb	r2, [r3, #0]
10045c5c:	e000      	b.n	10045c60 <MP3_Event_Handler+0xe8>
				continue;// reattempt communication
10045c5e:	46c0      	nop			@ (mov r8, r8)
		while(scanning){
10045c60:	2377      	movs	r3, #119	@ 0x77
10045c62:	18fb      	adds	r3, r7, r3
10045c64:	781b      	ldrb	r3, [r3, #0]
10045c66:	2b00      	cmp	r3, #0
10045c68:	d1a5      	bne.n	10045bb6 <MP3_Event_Handler+0x3e>
			}
		}
		numfolders--;
10045c6a:	4b8f      	ldr	r3, [pc, #572]	@ (10045ea8 <MP3_Event_Handler+0x330>)
10045c6c:	781b      	ldrb	r3, [r3, #0]
10045c6e:	3b01      	subs	r3, #1
10045c70:	b2da      	uxtb	r2, r3
10045c72:	4b8d      	ldr	r3, [pc, #564]	@ (10045ea8 <MP3_Event_Handler+0x330>)
10045c74:	701a      	strb	r2, [r3, #0]
		folders = malloc(sizeof(uint8_t)*numfolders);
10045c76:	4b8c      	ldr	r3, [pc, #560]	@ (10045ea8 <MP3_Event_Handler+0x330>)
10045c78:	781b      	ldrb	r3, [r3, #0]
10045c7a:	0018      	movs	r0, r3
10045c7c:	f022 fa58 	bl	10068130 <malloc>
10045c80:	0003      	movs	r3, r0
10045c82:	001a      	movs	r2, r3
10045c84:	4b8a      	ldr	r3, [pc, #552]	@ (10045eb0 <MP3_Event_Handler+0x338>)
10045c86:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < numfolders; i++){
10045c88:	2300      	movs	r3, #0
10045c8a:	673b      	str	r3, [r7, #112]	@ 0x70
10045c8c:	e013      	b.n	10045cb6 <MP3_Event_Handler+0x13e>
			folders[i] = FIFO_Dequeue(tempFolders).data;
10045c8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
10045c90:	0018      	movs	r0, r3
10045c92:	f7fe fd50 	bl	10044736 <FIFO_Dequeue>
10045c96:	0003      	movs	r3, r0
10045c98:	001a      	movs	r2, r3
10045c9a:	215c      	movs	r1, #92	@ 0x5c
10045c9c:	187b      	adds	r3, r7, r1
10045c9e:	601a      	str	r2, [r3, #0]
10045ca0:	187b      	adds	r3, r7, r1
10045ca2:	8859      	ldrh	r1, [r3, #2]
10045ca4:	4b82      	ldr	r3, [pc, #520]	@ (10045eb0 <MP3_Event_Handler+0x338>)
10045ca6:	681a      	ldr	r2, [r3, #0]
10045ca8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10045caa:	18d3      	adds	r3, r2, r3
10045cac:	b2ca      	uxtb	r2, r1
10045cae:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < numfolders; i++){
10045cb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10045cb2:	3301      	adds	r3, #1
10045cb4:	673b      	str	r3, [r7, #112]	@ 0x70
10045cb6:	4b7c      	ldr	r3, [pc, #496]	@ (10045ea8 <MP3_Event_Handler+0x330>)
10045cb8:	781b      	ldrb	r3, [r3, #0]
10045cba:	001a      	movs	r2, r3
10045cbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10045cbe:	4293      	cmp	r3, r2
10045cc0:	dbe5      	blt.n	10045c8e <MP3_Event_Handler+0x116>
		}
		FIFO_Destroy(tempFolders);
10045cc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
10045cc4:	0018      	movs	r0, r3
10045cc6:	f7fe fcde 	bl	10044686 <FIFO_Destroy>
		initialized = 1;
10045cca:	4b7a      	ldr	r3, [pc, #488]	@ (10045eb4 <MP3_Event_Handler+0x33c>)
10045ccc:	2201      	movs	r2, #1
10045cce:	701a      	strb	r2, [r3, #0]
		char send[4] = {0x06, 0x00, 0x00, (uint8_t)(((uint16_t)volume)*30/100)};
10045cd0:	2458      	movs	r4, #88	@ 0x58
10045cd2:	193b      	adds	r3, r7, r4
10045cd4:	2206      	movs	r2, #6
10045cd6:	701a      	strb	r2, [r3, #0]
10045cd8:	193b      	adds	r3, r7, r4
10045cda:	2200      	movs	r2, #0
10045cdc:	705a      	strb	r2, [r3, #1]
10045cde:	193b      	adds	r3, r7, r4
10045ce0:	2200      	movs	r2, #0
10045ce2:	709a      	strb	r2, [r3, #2]
10045ce4:	4b74      	ldr	r3, [pc, #464]	@ (10045eb8 <MP3_Event_Handler+0x340>)
10045ce6:	781b      	ldrb	r3, [r3, #0]
10045ce8:	001a      	movs	r2, r3
10045cea:	0013      	movs	r3, r2
10045cec:	011b      	lsls	r3, r3, #4
10045cee:	1a9b      	subs	r3, r3, r2
10045cf0:	005b      	lsls	r3, r3, #1
10045cf2:	2164      	movs	r1, #100	@ 0x64
10045cf4:	0018      	movs	r0, r3
10045cf6:	f7fa fb2d 	bl	10040354 <__divsi3>
10045cfa:	0003      	movs	r3, r0
10045cfc:	b2da      	uxtb	r2, r3
10045cfe:	193b      	adds	r3, r7, r4
10045d00:	70da      	strb	r2, [r3, #3]
		MP3_SendData(send);
10045d02:	193b      	adds	r3, r7, r4
10045d04:	0018      	movs	r0, r3
10045d06:	f7ff fc89 	bl	1004561c <MP3_SendData>
	}
	if(event.status == EVENT_TIMEOUT){
10045d0a:	1d3b      	adds	r3, r7, #4
10045d0c:	781b      	ldrb	r3, [r3, #0]
10045d0e:	b25b      	sxtb	r3, r3
10045d10:	2b09      	cmp	r3, #9
10045d12:	d132      	bne.n	10045d7a <MP3_Event_Handler+0x202>
		//send either play or stop to the mp3 player
		if(event.data == 1){//pause
10045d14:	1d3b      	adds	r3, r7, #4
10045d16:	885b      	ldrh	r3, [r3, #2]
10045d18:	2b01      	cmp	r3, #1
10045d1a:	d10d      	bne.n	10045d38 <MP3_Event_Handler+0x1c0>
			pause = event.data;
10045d1c:	1d3b      	adds	r3, r7, #4
10045d1e:	885b      	ldrh	r3, [r3, #2]
10045d20:	b2da      	uxtb	r2, r3
10045d22:	4b66      	ldr	r3, [pc, #408]	@ (10045ebc <MP3_Event_Handler+0x344>)
10045d24:	701a      	strb	r2, [r3, #0]
			char send[4] = {0x0E, 0x00, 0x00, 0x00};
10045d26:	2148      	movs	r1, #72	@ 0x48
10045d28:	187b      	adds	r3, r7, r1
10045d2a:	220e      	movs	r2, #14
10045d2c:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
10045d2e:	187b      	adds	r3, r7, r1
10045d30:	0018      	movs	r0, r3
10045d32:	f7ff fc73 	bl	1004561c <MP3_SendData>
10045d36:	e020      	b.n	10045d7a <MP3_Event_Handler+0x202>

		}else if(event.data == 0){//play
10045d38:	1d3b      	adds	r3, r7, #4
10045d3a:	885b      	ldrh	r3, [r3, #2]
10045d3c:	2b00      	cmp	r3, #0
10045d3e:	d11c      	bne.n	10045d7a <MP3_Event_Handler+0x202>
			pause = event.data;
10045d40:	1d3b      	adds	r3, r7, #4
10045d42:	885b      	ldrh	r3, [r3, #2]
10045d44:	b2da      	uxtb	r2, r3
10045d46:	4b5d      	ldr	r3, [pc, #372]	@ (10045ebc <MP3_Event_Handler+0x344>)
10045d48:	701a      	strb	r2, [r3, #0]
			char send[4] = {0x03, 0x00, 0x00, firsttrack+track-1};
10045d4a:	2144      	movs	r1, #68	@ 0x44
10045d4c:	187b      	adds	r3, r7, r1
10045d4e:	2203      	movs	r2, #3
10045d50:	701a      	strb	r2, [r3, #0]
10045d52:	187b      	adds	r3, r7, r1
10045d54:	2200      	movs	r2, #0
10045d56:	705a      	strb	r2, [r3, #1]
10045d58:	187b      	adds	r3, r7, r1
10045d5a:	2200      	movs	r2, #0
10045d5c:	709a      	strb	r2, [r3, #2]
10045d5e:	4b58      	ldr	r3, [pc, #352]	@ (10045ec0 <MP3_Event_Handler+0x348>)
10045d60:	781a      	ldrb	r2, [r3, #0]
10045d62:	4b58      	ldr	r3, [pc, #352]	@ (10045ec4 <MP3_Event_Handler+0x34c>)
10045d64:	781b      	ldrb	r3, [r3, #0]
10045d66:	18d3      	adds	r3, r2, r3
10045d68:	b2db      	uxtb	r3, r3
10045d6a:	3b01      	subs	r3, #1
10045d6c:	b2da      	uxtb	r2, r3
10045d6e:	187b      	adds	r3, r7, r1
10045d70:	70da      	strb	r2, [r3, #3]
			MP3_SendData(send);
10045d72:	187b      	adds	r3, r7, r1
10045d74:	0018      	movs	r0, r3
10045d76:	f7ff fc51 	bl	1004561c <MP3_SendData>
		}

	}if(event.status == EVENT_PLAY){
10045d7a:	1d3b      	adds	r3, r7, #4
10045d7c:	781b      	ldrb	r3, [r3, #0]
10045d7e:	b25b      	sxtb	r3, r3
10045d80:	2b0b      	cmp	r3, #11
10045d82:	d000      	beq.n	10045d86 <MP3_Event_Handler+0x20e>
10045d84:	e0c3      	b.n	10045f0e <MP3_Event_Handler+0x396>
		char text[30];
		sprintf(text, "Play event: %d, %d", event.data>>8, (event.data&0xFF));
10045d86:	1d3b      	adds	r3, r7, #4
10045d88:	885b      	ldrh	r3, [r3, #2]
10045d8a:	0a1b      	lsrs	r3, r3, #8
10045d8c:	b29b      	uxth	r3, r3
10045d8e:	001c      	movs	r4, r3
10045d90:	1d3b      	adds	r3, r7, #4
10045d92:	885b      	ldrh	r3, [r3, #2]
10045d94:	001a      	movs	r2, r3
10045d96:	23ff      	movs	r3, #255	@ 0xff
10045d98:	4013      	ands	r3, r2
10045d9a:	494b      	ldr	r1, [pc, #300]	@ (10045ec8 <MP3_Event_Handler+0x350>)
10045d9c:	2524      	movs	r5, #36	@ 0x24
10045d9e:	1978      	adds	r0, r7, r5
10045da0:	0022      	movs	r2, r4
10045da2:	f022 fbaf 	bl	10068504 <siprintf>
		discountprintf(text);
10045da6:	197b      	adds	r3, r7, r5
10045da8:	0018      	movs	r0, r3
10045daa:	f7fe fc2b 	bl	10044604 <discountprintf>
		Scheduler_Event_Post(event);
10045dae:	1d3b      	adds	r3, r7, #4
10045db0:	6818      	ldr	r0, [r3, #0]
10045db2:	f000 fcfd 	bl	100467b0 <Scheduler_Event_Post>
		starttime = TIMERS_GetMilliSeconds();
10045db6:	f000 fe8f 	bl	10046ad8 <TIMERS_GetMilliSeconds>
10045dba:	0002      	movs	r2, r0
10045dbc:	4b43      	ldr	r3, [pc, #268]	@ (10045ecc <MP3_Event_Handler+0x354>)
10045dbe:	601a      	str	r2, [r3, #0]
		if(event.data>>8 != 0 && (event.data>>8) <= numfolders &&  (event.data&0xFF)!= 0 && (event.data&0xFF) <= folders[(event.data>>8)-1]){
10045dc0:	1d3b      	adds	r3, r7, #4
10045dc2:	885b      	ldrh	r3, [r3, #2]
10045dc4:	0a1b      	lsrs	r3, r3, #8
10045dc6:	b29b      	uxth	r3, r3
10045dc8:	2b00      	cmp	r3, #0
10045dca:	d100      	bne.n	10045dce <MP3_Event_Handler+0x256>
10045dcc:	e082      	b.n	10045ed4 <MP3_Event_Handler+0x35c>
10045dce:	1d3b      	adds	r3, r7, #4
10045dd0:	885b      	ldrh	r3, [r3, #2]
10045dd2:	0a1b      	lsrs	r3, r3, #8
10045dd4:	b29b      	uxth	r3, r3
10045dd6:	4a34      	ldr	r2, [pc, #208]	@ (10045ea8 <MP3_Event_Handler+0x330>)
10045dd8:	7812      	ldrb	r2, [r2, #0]
10045dda:	4293      	cmp	r3, r2
10045ddc:	d900      	bls.n	10045de0 <MP3_Event_Handler+0x268>
10045dde:	e079      	b.n	10045ed4 <MP3_Event_Handler+0x35c>
10045de0:	1d3b      	adds	r3, r7, #4
10045de2:	885b      	ldrh	r3, [r3, #2]
10045de4:	001a      	movs	r2, r3
10045de6:	23ff      	movs	r3, #255	@ 0xff
10045de8:	4013      	ands	r3, r2
10045dea:	d100      	bne.n	10045dee <MP3_Event_Handler+0x276>
10045dec:	e072      	b.n	10045ed4 <MP3_Event_Handler+0x35c>
10045dee:	1d3b      	adds	r3, r7, #4
10045df0:	885b      	ldrh	r3, [r3, #2]
10045df2:	001a      	movs	r2, r3
10045df4:	23ff      	movs	r3, #255	@ 0xff
10045df6:	401a      	ands	r2, r3
10045df8:	4b2d      	ldr	r3, [pc, #180]	@ (10045eb0 <MP3_Event_Handler+0x338>)
10045dfa:	6819      	ldr	r1, [r3, #0]
10045dfc:	1d3b      	adds	r3, r7, #4
10045dfe:	885b      	ldrh	r3, [r3, #2]
10045e00:	0a1b      	lsrs	r3, r3, #8
10045e02:	b29b      	uxth	r3, r3
10045e04:	3b01      	subs	r3, #1
10045e06:	18cb      	adds	r3, r1, r3
10045e08:	781b      	ldrb	r3, [r3, #0]
10045e0a:	429a      	cmp	r2, r3
10045e0c:	dc62      	bgt.n	10045ed4 <MP3_Event_Handler+0x35c>
			folder = event.data>>8;
10045e0e:	1d3b      	adds	r3, r7, #4
10045e10:	885b      	ldrh	r3, [r3, #2]
10045e12:	0a1b      	lsrs	r3, r3, #8
10045e14:	b29b      	uxth	r3, r3
10045e16:	b2da      	uxtb	r2, r3
10045e18:	4b2d      	ldr	r3, [pc, #180]	@ (10045ed0 <MP3_Event_Handler+0x358>)
10045e1a:	701a      	strb	r2, [r3, #0]
			track = event.data&0xFF;
10045e1c:	1d3b      	adds	r3, r7, #4
10045e1e:	885b      	ldrh	r3, [r3, #2]
10045e20:	b2da      	uxtb	r2, r3
10045e22:	4b28      	ldr	r3, [pc, #160]	@ (10045ec4 <MP3_Event_Handler+0x34c>)
10045e24:	701a      	strb	r2, [r3, #0]
			firsttrack = 1;
10045e26:	4b26      	ldr	r3, [pc, #152]	@ (10045ec0 <MP3_Event_Handler+0x348>)
10045e28:	2201      	movs	r2, #1
10045e2a:	701a      	strb	r2, [r3, #0]
			pause = 0;
10045e2c:	4b23      	ldr	r3, [pc, #140]	@ (10045ebc <MP3_Event_Handler+0x344>)
10045e2e:	2200      	movs	r2, #0
10045e30:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < folder-1; i ++){
10045e32:	2300      	movs	r3, #0
10045e34:	66fb      	str	r3, [r7, #108]	@ 0x6c
10045e36:	e00d      	b.n	10045e54 <MP3_Event_Handler+0x2dc>
				firsttrack+= folders[i];
10045e38:	4b1d      	ldr	r3, [pc, #116]	@ (10045eb0 <MP3_Event_Handler+0x338>)
10045e3a:	681a      	ldr	r2, [r3, #0]
10045e3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
10045e3e:	18d3      	adds	r3, r2, r3
10045e40:	781a      	ldrb	r2, [r3, #0]
10045e42:	4b1f      	ldr	r3, [pc, #124]	@ (10045ec0 <MP3_Event_Handler+0x348>)
10045e44:	781b      	ldrb	r3, [r3, #0]
10045e46:	18d3      	adds	r3, r2, r3
10045e48:	b2da      	uxtb	r2, r3
10045e4a:	4b1d      	ldr	r3, [pc, #116]	@ (10045ec0 <MP3_Event_Handler+0x348>)
10045e4c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < folder-1; i ++){
10045e4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
10045e50:	3301      	adds	r3, #1
10045e52:	66fb      	str	r3, [r7, #108]	@ 0x6c
10045e54:	4b1e      	ldr	r3, [pc, #120]	@ (10045ed0 <MP3_Event_Handler+0x358>)
10045e56:	781b      	ldrb	r3, [r3, #0]
10045e58:	3b01      	subs	r3, #1
10045e5a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
10045e5c:	429a      	cmp	r2, r3
10045e5e:	dbeb      	blt.n	10045e38 <MP3_Event_Handler+0x2c0>
			}
			{
			char send2[4] = {0x03, 0x00, 0x00, firsttrack+track-1};
10045e60:	2120      	movs	r1, #32
10045e62:	187b      	adds	r3, r7, r1
10045e64:	2203      	movs	r2, #3
10045e66:	701a      	strb	r2, [r3, #0]
10045e68:	187b      	adds	r3, r7, r1
10045e6a:	2200      	movs	r2, #0
10045e6c:	705a      	strb	r2, [r3, #1]
10045e6e:	187b      	adds	r3, r7, r1
10045e70:	2200      	movs	r2, #0
10045e72:	709a      	strb	r2, [r3, #2]
10045e74:	4b12      	ldr	r3, [pc, #72]	@ (10045ec0 <MP3_Event_Handler+0x348>)
10045e76:	781a      	ldrb	r2, [r3, #0]
10045e78:	4b12      	ldr	r3, [pc, #72]	@ (10045ec4 <MP3_Event_Handler+0x34c>)
10045e7a:	781b      	ldrb	r3, [r3, #0]
10045e7c:	18d3      	adds	r3, r2, r3
10045e7e:	b2db      	uxtb	r3, r3
10045e80:	3b01      	subs	r3, #1
10045e82:	b2da      	uxtb	r2, r3
10045e84:	187b      	adds	r3, r7, r1
10045e86:	70da      	strb	r2, [r3, #3]
			MP3_SendData(send2);
10045e88:	187b      	adds	r3, r7, r1
10045e8a:	0018      	movs	r0, r3
10045e8c:	f7ff fbc6 	bl	1004561c <MP3_SendData>
			HAL_Delay(100);
10045e90:	2064      	movs	r0, #100	@ 0x64
10045e92:	f002 faf1 	bl	10048478 <HAL_Delay>
			}
			{
			char send[4] = {0x0D, 0x00, 0x00, 0x00};
10045e96:	211c      	movs	r1, #28
10045e98:	187b      	adds	r3, r7, r1
10045e9a:	220d      	movs	r2, #13
10045e9c:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
10045e9e:	187b      	adds	r3, r7, r1
10045ea0:	0018      	movs	r0, r3
10045ea2:	f7ff fbbb 	bl	1004561c <MP3_SendData>
			{
10045ea6:	e032      	b.n	10045f0e <MP3_Event_Handler+0x396>
10045ea8:	20001c04 	.word	0x20001c04
10045eac:	20001bf8 	.word	0x20001bf8
10045eb0:	20001c00 	.word	0x20001c00
10045eb4:	20001bf4 	.word	0x20001bf4
10045eb8:	20001bea 	.word	0x20001bea
10045ebc:	20001be8 	.word	0x20001be8
10045ec0:	20001bfe 	.word	0x20001bfe
10045ec4:	20001bfc 	.word	0x20001bfc
10045ec8:	100698ac 	.word	0x100698ac
10045ecc:	20001bec 	.word	0x20001bec
10045ed0:	20001bfd 	.word	0x20001bfd
			}
		}else {

			pause = 0x02;
10045ed4:	4b57      	ldr	r3, [pc, #348]	@ (10046034 <MP3_Event_Handler+0x4bc>)
10045ed6:	2202      	movs	r2, #2
10045ed8:	701a      	strb	r2, [r3, #0]
			{
			char send[4] = {0x0E, 0x00, 0x00, 0x00};//pause
10045eda:	2118      	movs	r1, #24
10045edc:	187b      	adds	r3, r7, r1
10045ede:	220e      	movs	r2, #14
10045ee0:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
10045ee2:	187b      	adds	r3, r7, r1
10045ee4:	0018      	movs	r0, r3
10045ee6:	f7ff fb99 	bl	1004561c <MP3_SendData>
			}
			if(!(event.data>>8) && !(event.data&0xFF)){
10045eea:	1d3b      	adds	r3, r7, #4
10045eec:	885b      	ldrh	r3, [r3, #2]
10045eee:	0a1b      	lsrs	r3, r3, #8
10045ef0:	b29b      	uxth	r3, r3
10045ef2:	2b00      	cmp	r3, #0
10045ef4:	d10b      	bne.n	10045f0e <MP3_Event_Handler+0x396>
10045ef6:	1d3b      	adds	r3, r7, #4
10045ef8:	885b      	ldrh	r3, [r3, #2]
10045efa:	001a      	movs	r2, r3
10045efc:	23ff      	movs	r3, #255	@ 0xff
10045efe:	4013      	ands	r3, r2
10045f00:	d105      	bne.n	10045f0e <MP3_Event_Handler+0x396>
				folder = 0;
10045f02:	4b4d      	ldr	r3, [pc, #308]	@ (10046038 <MP3_Event_Handler+0x4c0>)
10045f04:	2200      	movs	r2, #0
10045f06:	701a      	strb	r2, [r3, #0]
				track = 0;
10045f08:	4b4c      	ldr	r3, [pc, #304]	@ (1004603c <MP3_Event_Handler+0x4c4>)
10045f0a:	2200      	movs	r2, #0
10045f0c:	701a      	strb	r2, [r3, #0]
//			char send[4] = {0x0A, 0x00, 0x00, 0x00};//enter low power mode
//			MP3_SendData(send);
		}


	}if(event.status == EVENT_SETTINGS){
10045f0e:	1d3b      	adds	r3, r7, #4
10045f10:	781b      	ldrb	r3, [r3, #0]
10045f12:	b25b      	sxtb	r3, r3
10045f14:	2b0a      	cmp	r3, #10
10045f16:	d12c      	bne.n	10045f72 <MP3_Event_Handler+0x3fa>
		DC = FLASH_GetDutyCycle();
10045f18:	f7fe fd40 	bl	1004499c <FLASH_GetDutyCycle>
10045f1c:	0003      	movs	r3, r0
10045f1e:	001a      	movs	r2, r3
10045f20:	4b47      	ldr	r3, [pc, #284]	@ (10046040 <MP3_Event_Handler+0x4c8>)
10045f22:	701a      	strb	r2, [r3, #0]
		volume = FLASH_GetVolume();
10045f24:	f7fe fd24 	bl	10044970 <FLASH_GetVolume>
10045f28:	0003      	movs	r3, r0
10045f2a:	001a      	movs	r2, r3
10045f2c:	4b45      	ldr	r3, [pc, #276]	@ (10046044 <MP3_Event_Handler+0x4cc>)
10045f2e:	701a      	strb	r2, [r3, #0]
//		char text[30];
//		sprintf(text, "Settings event: %d, %d", event.data>>8, (event.data&0xFF));
//		discountprintf(text);
		if(!event.data){//volume == FLASH_GetVolume()
10045f30:	1d3b      	adds	r3, r7, #4
10045f32:	885b      	ldrh	r3, [r3, #2]
10045f34:	2b00      	cmp	r3, #0
10045f36:	d11c      	bne.n	10045f72 <MP3_Event_Handler+0x3fa>
			//send new volume to the mp3 player
			char send[4] = {0x06, 0x00, 0x00, (uint8_t)(((uint16_t)volume)*30/100)};
10045f38:	2414      	movs	r4, #20
10045f3a:	193b      	adds	r3, r7, r4
10045f3c:	2206      	movs	r2, #6
10045f3e:	701a      	strb	r2, [r3, #0]
10045f40:	193b      	adds	r3, r7, r4
10045f42:	2200      	movs	r2, #0
10045f44:	705a      	strb	r2, [r3, #1]
10045f46:	193b      	adds	r3, r7, r4
10045f48:	2200      	movs	r2, #0
10045f4a:	709a      	strb	r2, [r3, #2]
10045f4c:	4b3d      	ldr	r3, [pc, #244]	@ (10046044 <MP3_Event_Handler+0x4cc>)
10045f4e:	781b      	ldrb	r3, [r3, #0]
10045f50:	001a      	movs	r2, r3
10045f52:	0013      	movs	r3, r2
10045f54:	011b      	lsls	r3, r3, #4
10045f56:	1a9b      	subs	r3, r3, r2
10045f58:	005b      	lsls	r3, r3, #1
10045f5a:	2164      	movs	r1, #100	@ 0x64
10045f5c:	0018      	movs	r0, r3
10045f5e:	f7fa f9f9 	bl	10040354 <__divsi3>
10045f62:	0003      	movs	r3, r0
10045f64:	b2da      	uxtb	r2, r3
10045f66:	193b      	adds	r3, r7, r4
10045f68:	70da      	strb	r2, [r3, #3]
			MP3_SendData(send);
10045f6a:	193b      	adds	r3, r7, r4
10045f6c:	0018      	movs	r0, r3
10045f6e:	f7ff fb55 	bl	1004561c <MP3_SendData>
		}
	}if (event.status == EVENT_LPUART){
10045f72:	1d3b      	adds	r3, r7, #4
10045f74:	781b      	ldrb	r3, [r3, #0]
10045f76:	b25b      	sxtb	r3, r3
10045f78:	2b08      	cmp	r3, #8
10045f7a:	d155      	bne.n	10046028 <MP3_Event_Handler+0x4b0>
		//USART_WriteTx(event.data);
		char rx = event.data;
10045f7c:	1d3b      	adds	r3, r7, #4
10045f7e:	885a      	ldrh	r2, [r3, #2]
10045f80:	2163      	movs	r1, #99	@ 0x63
10045f82:	187b      	adds	r3, r7, r1
10045f84:	701a      	strb	r2, [r3, #0]
		if(rx != UARTFAILED){
10045f86:	000a      	movs	r2, r1
10045f88:	18bb      	adds	r3, r7, r2
10045f8a:	781b      	ldrb	r3, [r3, #0]
10045f8c:	2b25      	cmp	r3, #37	@ 0x25
10045f8e:	d04b      	beq.n	10046028 <MP3_Event_Handler+0x4b0>
			if(parsePacket(rx)){
10045f90:	18bb      	adds	r3, r7, r2
10045f92:	781b      	ldrb	r3, [r3, #0]
10045f94:	0018      	movs	r0, r3
10045f96:	f7ff fb9d 	bl	100456d4 <parsePacket>
10045f9a:	1e03      	subs	r3, r0, #0
10045f9c:	d044      	beq.n	10046028 <MP3_Event_Handler+0x4b0>
				if(Packet.command == 0x3D){
10045f9e:	4b2a      	ldr	r3, [pc, #168]	@ (10046048 <MP3_Event_Handler+0x4d0>)
10045fa0:	781b      	ldrb	r3, [r3, #0]
10045fa2:	2b3d      	cmp	r3, #61	@ 0x3d
10045fa4:	d140      	bne.n	10046028 <MP3_Event_Handler+0x4b0>
					if(Packet.Param2 != lastplayed){//prevent the mp3 play from sending double
10045fa6:	4b28      	ldr	r3, [pc, #160]	@ (10046048 <MP3_Event_Handler+0x4d0>)
10045fa8:	78da      	ldrb	r2, [r3, #3]
10045faa:	4b28      	ldr	r3, [pc, #160]	@ (1004604c <MP3_Event_Handler+0x4d4>)
10045fac:	781b      	ldrb	r3, [r3, #0]
10045fae:	429a      	cmp	r2, r3
10045fb0:	d03a      	beq.n	10046028 <MP3_Event_Handler+0x4b0>
						lastplayed = Packet.Param2;
10045fb2:	4b25      	ldr	r3, [pc, #148]	@ (10046048 <MP3_Event_Handler+0x4d0>)
10045fb4:	78da      	ldrb	r2, [r3, #3]
10045fb6:	4b25      	ldr	r3, [pc, #148]	@ (1004604c <MP3_Event_Handler+0x4d4>)
10045fb8:	701a      	strb	r2, [r3, #0]
						if(folder && track){
10045fba:	4b1f      	ldr	r3, [pc, #124]	@ (10046038 <MP3_Event_Handler+0x4c0>)
10045fbc:	781b      	ldrb	r3, [r3, #0]
10045fbe:	2b00      	cmp	r3, #0
10045fc0:	d032      	beq.n	10046028 <MP3_Event_Handler+0x4b0>
10045fc2:	4b1e      	ldr	r3, [pc, #120]	@ (1004603c <MP3_Event_Handler+0x4c4>)
10045fc4:	781b      	ldrb	r3, [r3, #0]
10045fc6:	2b00      	cmp	r3, #0
10045fc8:	d02e      	beq.n	10046028 <MP3_Event_Handler+0x4b0>
							track++;
10045fca:	4b1c      	ldr	r3, [pc, #112]	@ (1004603c <MP3_Event_Handler+0x4c4>)
10045fcc:	781b      	ldrb	r3, [r3, #0]
10045fce:	3301      	adds	r3, #1
10045fd0:	b2da      	uxtb	r2, r3
10045fd2:	4b1a      	ldr	r3, [pc, #104]	@ (1004603c <MP3_Event_Handler+0x4c4>)
10045fd4:	701a      	strb	r2, [r3, #0]
							if(track > folders[folder-1]){
10045fd6:	4b1e      	ldr	r3, [pc, #120]	@ (10046050 <MP3_Event_Handler+0x4d8>)
10045fd8:	681a      	ldr	r2, [r3, #0]
10045fda:	4b17      	ldr	r3, [pc, #92]	@ (10046038 <MP3_Event_Handler+0x4c0>)
10045fdc:	781b      	ldrb	r3, [r3, #0]
10045fde:	3b01      	subs	r3, #1
10045fe0:	18d3      	adds	r3, r2, r3
10045fe2:	781a      	ldrb	r2, [r3, #0]
10045fe4:	4b15      	ldr	r3, [pc, #84]	@ (1004603c <MP3_Event_Handler+0x4c4>)
10045fe6:	781b      	ldrb	r3, [r3, #0]
10045fe8:	429a      	cmp	r2, r3
10045fea:	d215      	bcs.n	10046018 <MP3_Event_Handler+0x4a0>
								char send2[4] = {0x03, 0x00, 0x00, firsttrack};
10045fec:	2110      	movs	r1, #16
10045fee:	187b      	adds	r3, r7, r1
10045ff0:	2203      	movs	r2, #3
10045ff2:	701a      	strb	r2, [r3, #0]
10045ff4:	187b      	adds	r3, r7, r1
10045ff6:	2200      	movs	r2, #0
10045ff8:	705a      	strb	r2, [r3, #1]
10045ffa:	187b      	adds	r3, r7, r1
10045ffc:	2200      	movs	r2, #0
10045ffe:	709a      	strb	r2, [r3, #2]
10046000:	4b14      	ldr	r3, [pc, #80]	@ (10046054 <MP3_Event_Handler+0x4dc>)
10046002:	781a      	ldrb	r2, [r3, #0]
10046004:	187b      	adds	r3, r7, r1
10046006:	70da      	strb	r2, [r3, #3]
								MP3_SendData(send2);
10046008:	187b      	adds	r3, r7, r1
1004600a:	0018      	movs	r0, r3
1004600c:	f7ff fb06 	bl	1004561c <MP3_SendData>
								track = 1;
10046010:	4b0a      	ldr	r3, [pc, #40]	@ (1004603c <MP3_Event_Handler+0x4c4>)
10046012:	2201      	movs	r2, #1
10046014:	701a      	strb	r2, [r3, #0]
10046016:	e007      	b.n	10046028 <MP3_Event_Handler+0x4b0>
							} else {

								char send[4] = {0x01, 0x00, 0x00, 0x00};
10046018:	210c      	movs	r1, #12
1004601a:	187b      	adds	r3, r7, r1
1004601c:	2201      	movs	r2, #1
1004601e:	601a      	str	r2, [r3, #0]
								MP3_SendData(send);
10046020:	187b      	adds	r3, r7, r1
10046022:	0018      	movs	r0, r3
10046024:	f7ff fafa 	bl	1004561c <MP3_SendData>
				}
			}
		}

	}
    return 1;
10046028:	2301      	movs	r3, #1
}
1004602a:	0018      	movs	r0, r3
1004602c:	46bd      	mov	sp, r7
1004602e:	b01e      	add	sp, #120	@ 0x78
10046030:	bdb0      	pop	{r4, r5, r7, pc}
10046032:	46c0      	nop			@ (mov r8, r8)
10046034:	20001be8 	.word	0x20001be8
10046038:	20001bfd 	.word	0x20001bfd
1004603c:	20001bfc 	.word	0x20001bfc
10046040:	20001be9 	.word	0x20001be9
10046044:	20001bea 	.word	0x20001bea
10046048:	20001bf8 	.word	0x20001bf8
1004604c:	20001bff 	.word	0x20001bff
10046050:	20001c00 	.word	0x20001c00
10046054:	20001bfe 	.word	0x20001bfe

10046058 <MP3_GetCurrentFile>:
 * @Function: MP3_GetCurrentFile
 * @Brief: gets the current track being played on the mp3 player
 * @param:
 * @return: two bytes, the upper 8bits contain the folder, the lower 8 bits hold the tracck number in the folder
 */
uint16_t MP3_GetCurrentFile(){
10046058:	b580      	push	{r7, lr}
1004605a:	af00      	add	r7, sp, #0
	return ((uint16_t)folder<<8)+track;
1004605c:	4b05      	ldr	r3, [pc, #20]	@ (10046074 <MP3_GetCurrentFile+0x1c>)
1004605e:	781b      	ldrb	r3, [r3, #0]
10046060:	021b      	lsls	r3, r3, #8
10046062:	b29b      	uxth	r3, r3
10046064:	4a04      	ldr	r2, [pc, #16]	@ (10046078 <MP3_GetCurrentFile+0x20>)
10046066:	7812      	ldrb	r2, [r2, #0]
10046068:	189b      	adds	r3, r3, r2
1004606a:	b29b      	uxth	r3, r3
}
1004606c:	0018      	movs	r0, r3
1004606e:	46bd      	mov	sp, r7
10046070:	bd80      	pop	{r7, pc}
10046072:	46c0      	nop			@ (mov r8, r8)
10046074:	20001bfd 	.word	0x20001bfd
10046078:	20001bfc 	.word	0x20001bfc

1004607c <OledInit>:
#include <OledDriver.h>
#include <Oled.h>
#include <Ascii.h>

void OledInit(void)
{
1004607c:	b580      	push	{r7, lr}
1004607e:	af00      	add	r7, sp, #0
    // First initialize the STM32 to be able to talk over I2C to the OLED.
    OledHostInit();
10046080:	f000 f96f 	bl	10046362 <OledHostInit>
    HAL_Delay(10);
10046084:	200a      	movs	r0, #10
10046086:	f002 f9f7 	bl	10048478 <HAL_Delay>

    // Now send initialization commands to the OLED.
    OledDriverInitDisplay();
1004608a:	f000 f975 	bl	10046378 <OledDriverInitDisplay>
    HAL_Delay(200);//allow time for OLED screen to initialize
1004608e:	20c8      	movs	r0, #200	@ 0xc8
10046090:	f002 f9f2 	bl	10048478 <HAL_Delay>

    // Clear the frame buffer by filling it with black pixels.
    OledClear(OLED_COLOR_BLACK);
10046094:	2000      	movs	r0, #0
10046096:	f000 f927 	bl	100462e8 <OledClear>

    // Finally update the screen, triggering a write of all black pixels to the screen.
    OledUpdate();
1004609a:	f000 f95b 	bl	10046354 <OledUpdate>
}
1004609e:	46c0      	nop			@ (mov r8, r8)
100460a0:	46bd      	mov	sp, r7
100460a2:	bd80      	pop	{r7, pc}

100460a4 <OledDrawChar>:
    // Now return the desired bit.
    return (rgbOledBmp[index] >> shift) & 0x01;
}

uint8_t OledDrawChar(int x, int y, char c)
{
100460a4:	b580      	push	{r7, lr}
100460a6:	b092      	sub	sp, #72	@ 0x48
100460a8:	af00      	add	r7, sp, #0
100460aa:	60f8      	str	r0, [r7, #12]
100460ac:	60b9      	str	r1, [r7, #8]
100460ae:	1dfb      	adds	r3, r7, #7
100460b0:	701a      	strb	r2, [r3, #0]
    if (x <= OLED_DRIVER_PIXEL_COLUMNS - ASCII_FONT_WIDTH && y <= OLED_DRIVER_PIXEL_ROWS - ASCII_FONT_HEIGHT) {
100460b2:	68fb      	ldr	r3, [r7, #12]
100460b4:	2b7a      	cmp	r3, #122	@ 0x7a
100460b6:	dd00      	ble.n	100460ba <OledDrawChar+0x16>
100460b8:	e0c0      	b.n	1004623c <OledDrawChar+0x198>
100460ba:	68bb      	ldr	r3, [r7, #8]
100460bc:	2b38      	cmp	r3, #56	@ 0x38
100460be:	dd00      	ble.n	100460c2 <OledDrawChar+0x1e>
100460c0:	e0bc      	b.n	1004623c <OledDrawChar+0x198>
        // We need to convert our signed char into an unsigned value to index into the ascii[] array.
        int charIndex = (int) (unsigned char) c;
100460c2:	1dfb      	adds	r3, r7, #7
100460c4:	781b      	ldrb	r3, [r3, #0]
100460c6:	63fb      	str	r3, [r7, #60]	@ 0x3c

        // Now first determine the columns and rows of the OLED bits that need to be modified
        int rowMin, rowMax, colMin, colMax;
        rowMin = y / ASCII_FONT_HEIGHT;
100460c8:	68bb      	ldr	r3, [r7, #8]
100460ca:	2b00      	cmp	r3, #0
100460cc:	da00      	bge.n	100460d0 <OledDrawChar+0x2c>
100460ce:	3307      	adds	r3, #7
100460d0:	10db      	asrs	r3, r3, #3
100460d2:	63bb      	str	r3, [r7, #56]	@ 0x38
        int rowY = y % ASCII_FONT_HEIGHT;
100460d4:	68bb      	ldr	r3, [r7, #8]
100460d6:	4a5c      	ldr	r2, [pc, #368]	@ (10046248 <OledDrawChar+0x1a4>)
100460d8:	4013      	ands	r3, r2
100460da:	d504      	bpl.n	100460e6 <OledDrawChar+0x42>
100460dc:	3b01      	subs	r3, #1
100460de:	2208      	movs	r2, #8
100460e0:	4252      	negs	r2, r2
100460e2:	4313      	orrs	r3, r2
100460e4:	3301      	adds	r3, #1
100460e6:	637b      	str	r3, [r7, #52]	@ 0x34
        rowMax = (y + ASCII_FONT_HEIGHT) / OLED_DRIVER_BUFFER_LINE_HEIGHT;
100460e8:	68bb      	ldr	r3, [r7, #8]
100460ea:	3308      	adds	r3, #8
100460ec:	2b00      	cmp	r3, #0
100460ee:	da00      	bge.n	100460f2 <OledDrawChar+0x4e>
100460f0:	3307      	adds	r3, #7
100460f2:	10db      	asrs	r3, r3, #3
100460f4:	633b      	str	r3, [r7, #48]	@ 0x30
        colMin = x;
100460f6:	68fb      	ldr	r3, [r7, #12]
100460f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        colMax = x + ASCII_FONT_WIDTH;
100460fa:	68fb      	ldr	r3, [r7, #12]
100460fc:	3306      	adds	r3, #6
100460fe:	62bb      	str	r3, [r7, #40]	@ 0x28
        {
            // Generate a positive mask for where in the column the new symbol will be drawn.
            int colMask = ((1 << ASCII_FONT_HEIGHT) - 1) << rowY;
10046100:	22ff      	movs	r2, #255	@ 0xff
10046102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10046104:	409a      	lsls	r2, r3
10046106:	0013      	movs	r3, r2
10046108:	627b      	str	r3, [r7, #36]	@ 0x24
            int j;
            for (j = 0; j < colMax - colMin; ++j) {
1004610a:	2300      	movs	r3, #0
1004610c:	647b      	str	r3, [r7, #68]	@ 0x44
1004610e:	e03a      	b.n	10046186 <OledDrawChar+0xe2>
                int oledCol = colMin + j;
10046110:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10046112:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10046114:	18d3      	adds	r3, r2, r3
10046116:	617b      	str	r3, [r7, #20]
                uint8_t newCharCol = rgbOledBmp[rowMin * OLED_DRIVER_PIXEL_COLUMNS + oledCol] & ~colMask;
10046118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004611a:	01da      	lsls	r2, r3, #7
1004611c:	697b      	ldr	r3, [r7, #20]
1004611e:	18d3      	adds	r3, r2, r3
10046120:	4a4a      	ldr	r2, [pc, #296]	@ (1004624c <OledDrawChar+0x1a8>)
10046122:	5cd3      	ldrb	r3, [r2, r3]
10046124:	b25b      	sxtb	r3, r3
10046126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10046128:	b252      	sxtb	r2, r2
1004612a:	43d2      	mvns	r2, r2
1004612c:	b252      	sxtb	r2, r2
1004612e:	4013      	ands	r3, r2
10046130:	b25a      	sxtb	r2, r3
10046132:	2013      	movs	r0, #19
10046134:	183b      	adds	r3, r7, r0
10046136:	701a      	strb	r2, [r3, #0]
                // Make sure we always grab from the top part of the character.
                newCharCol |= (ascii[charIndex][j] & (colMask >> rowY)) << rowY;
10046138:	4945      	ldr	r1, [pc, #276]	@ (10046250 <OledDrawChar+0x1ac>)
1004613a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004613c:	0013      	movs	r3, r2
1004613e:	005b      	lsls	r3, r3, #1
10046140:	189b      	adds	r3, r3, r2
10046142:	005b      	lsls	r3, r3, #1
10046144:	18ca      	adds	r2, r1, r3
10046146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10046148:	18d3      	adds	r3, r2, r3
1004614a:	781b      	ldrb	r3, [r3, #0]
1004614c:	0019      	movs	r1, r3
1004614e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10046150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10046152:	411a      	asrs	r2, r3
10046154:	0013      	movs	r3, r2
10046156:	400b      	ands	r3, r1
10046158:	001a      	movs	r2, r3
1004615a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004615c:	409a      	lsls	r2, r3
1004615e:	0013      	movs	r3, r2
10046160:	b25a      	sxtb	r2, r3
10046162:	183b      	adds	r3, r7, r0
10046164:	781b      	ldrb	r3, [r3, #0]
10046166:	b25b      	sxtb	r3, r3
10046168:	4313      	orrs	r3, r2
1004616a:	b25a      	sxtb	r2, r3
1004616c:	183b      	adds	r3, r7, r0
1004616e:	701a      	strb	r2, [r3, #0]
                rgbOledBmp[rowMin * OLED_DRIVER_PIXEL_COLUMNS + oledCol] = newCharCol;
10046170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10046172:	01da      	lsls	r2, r3, #7
10046174:	697b      	ldr	r3, [r7, #20]
10046176:	18d3      	adds	r3, r2, r3
10046178:	4a34      	ldr	r2, [pc, #208]	@ (1004624c <OledDrawChar+0x1a8>)
1004617a:	1839      	adds	r1, r7, r0
1004617c:	7809      	ldrb	r1, [r1, #0]
1004617e:	54d1      	strb	r1, [r2, r3]
            for (j = 0; j < colMax - colMin; ++j) {
10046180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10046182:	3301      	adds	r3, #1
10046184:	647b      	str	r3, [r7, #68]	@ 0x44
10046186:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10046188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004618a:	1ad3      	subs	r3, r2, r3
1004618c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004618e:	429a      	cmp	r2, r3
10046190:	dbbe      	blt.n	10046110 <OledDrawChar+0x6c>
            }
        }
        if (rowMax > rowMin) {
10046192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10046194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10046196:	429a      	cmp	r2, r3
10046198:	dd50      	ble.n	1004623c <OledDrawChar+0x198>
            // Generate a positive mask for where in the column the new symbol will be drawn.
            // Since we need the lower portion of the symbol, we recalculate its height.
            int colMask = ((1 << ASCII_FONT_HEIGHT) - 1) >> (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY);
1004619a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004619c:	2208      	movs	r2, #8
1004619e:	1ad3      	subs	r3, r2, r3
100461a0:	22ff      	movs	r2, #255	@ 0xff
100461a2:	411a      	asrs	r2, r3
100461a4:	0013      	movs	r3, r2
100461a6:	623b      	str	r3, [r7, #32]
            int j;
            for (j = 0; j < colMax - colMin; ++j) {
100461a8:	2300      	movs	r3, #0
100461aa:	643b      	str	r3, [r7, #64]	@ 0x40
100461ac:	e040      	b.n	10046230 <OledDrawChar+0x18c>
                int oledCol = colMin + j;
100461ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
100461b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100461b2:	18d3      	adds	r3, r2, r3
100461b4:	61fb      	str	r3, [r7, #28]
                uint8_t newCharCol = rgbOledBmp[rowMax * OLED_DRIVER_PIXEL_COLUMNS + ASCII_FONT_WIDTH - 1 - oledCol] & ~colMask;
100461b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100461b8:	01db      	lsls	r3, r3, #7
100461ba:	1d5a      	adds	r2, r3, #5
100461bc:	69fb      	ldr	r3, [r7, #28]
100461be:	1ad3      	subs	r3, r2, r3
100461c0:	4a22      	ldr	r2, [pc, #136]	@ (1004624c <OledDrawChar+0x1a8>)
100461c2:	5cd3      	ldrb	r3, [r2, r3]
100461c4:	b25b      	sxtb	r3, r3
100461c6:	6a3a      	ldr	r2, [r7, #32]
100461c8:	b252      	sxtb	r2, r2
100461ca:	43d2      	mvns	r2, r2
100461cc:	b252      	sxtb	r2, r2
100461ce:	4013      	ands	r3, r2
100461d0:	b25a      	sxtb	r2, r3
100461d2:	201b      	movs	r0, #27
100461d4:	183b      	adds	r3, r7, r0
100461d6:	701a      	strb	r2, [r3, #0]
                // Make sure we grab the proper part of the character from the font.
                newCharCol |= (ascii[charIndex][j] & (colMask << (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY))) >>
100461d8:	491d      	ldr	r1, [pc, #116]	@ (10046250 <OledDrawChar+0x1ac>)
100461da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100461dc:	0013      	movs	r3, r2
100461de:	005b      	lsls	r3, r3, #1
100461e0:	189b      	adds	r3, r3, r2
100461e2:	005b      	lsls	r3, r3, #1
100461e4:	18ca      	adds	r2, r1, r3
100461e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100461e8:	18d3      	adds	r3, r2, r3
100461ea:	781b      	ldrb	r3, [r3, #0]
100461ec:	0019      	movs	r1, r3
100461ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100461f0:	2208      	movs	r2, #8
100461f2:	1ad3      	subs	r3, r2, r3
100461f4:	6a3a      	ldr	r2, [r7, #32]
100461f6:	409a      	lsls	r2, r3
100461f8:	0013      	movs	r3, r2
100461fa:	400b      	ands	r3, r1
100461fc:	001a      	movs	r2, r3
                        (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY);
100461fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10046200:	2108      	movs	r1, #8
10046202:	1acb      	subs	r3, r1, r3
                newCharCol |= (ascii[charIndex][j] & (colMask << (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY))) >>
10046204:	411a      	asrs	r2, r3
10046206:	0013      	movs	r3, r2
10046208:	b25a      	sxtb	r2, r3
1004620a:	183b      	adds	r3, r7, r0
1004620c:	781b      	ldrb	r3, [r3, #0]
1004620e:	b25b      	sxtb	r3, r3
10046210:	4313      	orrs	r3, r2
10046212:	b25a      	sxtb	r2, r3
10046214:	183b      	adds	r3, r7, r0
10046216:	701a      	strb	r2, [r3, #0]
                rgbOledBmp[rowMax * OLED_DRIVER_PIXEL_COLUMNS + ASCII_FONT_WIDTH - 1 - oledCol] = newCharCol;
10046218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004621a:	01db      	lsls	r3, r3, #7
1004621c:	1d5a      	adds	r2, r3, #5
1004621e:	69fb      	ldr	r3, [r7, #28]
10046220:	1ad3      	subs	r3, r2, r3
10046222:	4a0a      	ldr	r2, [pc, #40]	@ (1004624c <OledDrawChar+0x1a8>)
10046224:	1839      	adds	r1, r7, r0
10046226:	7809      	ldrb	r1, [r1, #0]
10046228:	54d1      	strb	r1, [r2, r3]
            for (j = 0; j < colMax - colMin; ++j) {
1004622a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1004622c:	3301      	adds	r3, #1
1004622e:	643b      	str	r3, [r7, #64]	@ 0x40
10046230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10046232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10046234:	1ad3      	subs	r3, r2, r3
10046236:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
10046238:	429a      	cmp	r2, r3
1004623a:	dbb8      	blt.n	100461ae <OledDrawChar+0x10a>
            }
        }
    }

    return FALSE;
1004623c:	2300      	movs	r3, #0
}
1004623e:	0018      	movs	r0, r3
10046240:	46bd      	mov	sp, r7
10046242:	b012      	add	sp, #72	@ 0x48
10046244:	bd80      	pop	{r7, pc}
10046246:	46c0      	nop			@ (mov r8, r8)
10046248:	80000007 	.word	0x80000007
1004624c:	20001c0c 	.word	0x20001c0c
10046250:	10069958 	.word	0x10069958

10046254 <OledDrawString>:

void OledDrawString(const char *string)
{
10046254:	b580      	push	{r7, lr}
10046256:	b086      	sub	sp, #24
10046258:	af00      	add	r7, sp, #0
1004625a:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
1004625c:	687b      	ldr	r3, [r7, #4]
1004625e:	2b00      	cmp	r3, #0
10046260:	d03c      	beq.n	100462dc <OledDrawString+0x88>
        return;
    }

    // Track the current line number we're in on the OLED. Valid values are [0, OLED_NUM_LINES).
    int line = 0;
10046262:	2300      	movs	r3, #0
10046264:	617b      	str	r3, [r7, #20]

    // Track the current character we're writing to the OLED. Valid values are
    // [0, OLED_CHARS_PER_LINE).
    int column = 0;
10046266:	2300      	movs	r3, #0
10046268:	613b      	str	r3, [r7, #16]

    // Run through all characters. The maximum length can be the number of lines times the number
    // of characters per line + three newlines.
    int i;
    for (i = 0; string[i] != '\0' && i < (OLED_NUM_LINES * OLED_CHARS_PER_LINE + 3); ++i) {
1004626a:	2300      	movs	r3, #0
1004626c:	60fb      	str	r3, [r7, #12]
1004626e:	e02b      	b.n	100462c8 <OledDrawString+0x74>
        // Move the cursor to the next line if a newline character is encountered. This allows for
        // early line ending.
        if (string[i] == '\n') {
10046270:	68fb      	ldr	r3, [r7, #12]
10046272:	687a      	ldr	r2, [r7, #4]
10046274:	18d3      	adds	r3, r2, r3
10046276:	781b      	ldrb	r3, [r3, #0]
10046278:	2b0a      	cmp	r3, #10
1004627a:	d105      	bne.n	10046288 <OledDrawString+0x34>
            ++line;
1004627c:	697b      	ldr	r3, [r7, #20]
1004627e:	3301      	adds	r3, #1
10046280:	617b      	str	r3, [r7, #20]
            column = 0;
10046282:	2300      	movs	r3, #0
10046284:	613b      	str	r3, [r7, #16]
            continue;
10046286:	e01c      	b.n	100462c2 <OledDrawString+0x6e>
        } else {
            // Reset to the start of the next line if we've hit the character limit of this line
            // without seeing a newline.
            if (column == OLED_CHARS_PER_LINE) {
10046288:	693b      	ldr	r3, [r7, #16]
1004628a:	2b15      	cmp	r3, #21
1004628c:	d104      	bne.n	10046298 <OledDrawString+0x44>
                ++line;
1004628e:	697b      	ldr	r3, [r7, #20]
10046290:	3301      	adds	r3, #1
10046292:	617b      	str	r3, [r7, #20]
                column = 0;
10046294:	2300      	movs	r3, #0
10046296:	613b      	str	r3, [r7, #16]
            }

            // Now if we're < OLED_NUM_LINES and < OLED_CHARS_PER_LINE we can proceed. The second
            // check is implicitly handled by the above if-statement that forces a newline after
            // encountering a full line of characters.
            if (line == OLED_NUM_LINES) {
10046298:	697b      	ldr	r3, [r7, #20]
1004629a:	2b08      	cmp	r3, #8
1004629c:	d020      	beq.n	100462e0 <OledDrawString+0x8c>
                break;
            }

            // Finally at this point, we can write characters to the OLED.
            OledDrawChar(column * ASCII_FONT_WIDTH, line * ASCII_FONT_HEIGHT, string[i]);
1004629e:	693a      	ldr	r2, [r7, #16]
100462a0:	0013      	movs	r3, r2
100462a2:	005b      	lsls	r3, r3, #1
100462a4:	189b      	adds	r3, r3, r2
100462a6:	005b      	lsls	r3, r3, #1
100462a8:	0018      	movs	r0, r3
100462aa:	697b      	ldr	r3, [r7, #20]
100462ac:	00d9      	lsls	r1, r3, #3
100462ae:	68fb      	ldr	r3, [r7, #12]
100462b0:	687a      	ldr	r2, [r7, #4]
100462b2:	18d3      	adds	r3, r2, r3
100462b4:	781b      	ldrb	r3, [r3, #0]
100462b6:	001a      	movs	r2, r3
100462b8:	f7ff fef4 	bl	100460a4 <OledDrawChar>
            ++column;
100462bc:	693b      	ldr	r3, [r7, #16]
100462be:	3301      	adds	r3, #1
100462c0:	613b      	str	r3, [r7, #16]
    for (i = 0; string[i] != '\0' && i < (OLED_NUM_LINES * OLED_CHARS_PER_LINE + 3); ++i) {
100462c2:	68fb      	ldr	r3, [r7, #12]
100462c4:	3301      	adds	r3, #1
100462c6:	60fb      	str	r3, [r7, #12]
100462c8:	68fb      	ldr	r3, [r7, #12]
100462ca:	687a      	ldr	r2, [r7, #4]
100462cc:	18d3      	adds	r3, r2, r3
100462ce:	781b      	ldrb	r3, [r3, #0]
100462d0:	2b00      	cmp	r3, #0
100462d2:	d006      	beq.n	100462e2 <OledDrawString+0x8e>
100462d4:	68fb      	ldr	r3, [r7, #12]
100462d6:	2baa      	cmp	r3, #170	@ 0xaa
100462d8:	ddca      	ble.n	10046270 <OledDrawString+0x1c>
100462da:	e002      	b.n	100462e2 <OledDrawString+0x8e>
        return;
100462dc:	46c0      	nop			@ (mov r8, r8)
100462de:	e000      	b.n	100462e2 <OledDrawString+0x8e>
                break;
100462e0:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
100462e2:	46bd      	mov	sp, r7
100462e4:	b006      	add	sp, #24
100462e6:	bd80      	pop	{r7, pc}

100462e8 <OledClear>:

void OledClear(OledColor p)
{
100462e8:	b580      	push	{r7, lr}
100462ea:	b084      	sub	sp, #16
100462ec:	af00      	add	r7, sp, #0
100462ee:	0002      	movs	r2, r0
100462f0:	1dfb      	adds	r3, r7, #7
100462f2:	701a      	strb	r2, [r3, #0]
    int i;
    for (i = 0; i < OLED_DRIVER_BUFFER_SIZE; i++) {
100462f4:	2300      	movs	r3, #0
100462f6:	60fb      	str	r3, [r7, #12]
100462f8:	e011      	b.n	1004631e <OledClear+0x36>
        if (p == OLED_COLOR_WHITE) {
100462fa:	1dfb      	adds	r3, r7, #7
100462fc:	781b      	ldrb	r3, [r3, #0]
100462fe:	2b01      	cmp	r3, #1
10046300:	d105      	bne.n	1004630e <OledClear+0x26>
            rgbOledBmp[i] = 0xFF;
10046302:	4a0c      	ldr	r2, [pc, #48]	@ (10046334 <OledClear+0x4c>)
10046304:	68fb      	ldr	r3, [r7, #12]
10046306:	18d3      	adds	r3, r2, r3
10046308:	22ff      	movs	r2, #255	@ 0xff
1004630a:	701a      	strb	r2, [r3, #0]
1004630c:	e004      	b.n	10046318 <OledClear+0x30>
        } else {
            rgbOledBmp[i] = 0;
1004630e:	4a09      	ldr	r2, [pc, #36]	@ (10046334 <OledClear+0x4c>)
10046310:	68fb      	ldr	r3, [r7, #12]
10046312:	18d3      	adds	r3, r2, r3
10046314:	2200      	movs	r2, #0
10046316:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < OLED_DRIVER_BUFFER_SIZE; i++) {
10046318:	68fb      	ldr	r3, [r7, #12]
1004631a:	3301      	adds	r3, #1
1004631c:	60fb      	str	r3, [r7, #12]
1004631e:	68fa      	ldr	r2, [r7, #12]
10046320:	2380      	movs	r3, #128	@ 0x80
10046322:	00db      	lsls	r3, r3, #3
10046324:	429a      	cmp	r2, r3
10046326:	dbe8      	blt.n	100462fa <OledClear+0x12>
        }
    }
}
10046328:	46c0      	nop			@ (mov r8, r8)
1004632a:	46c0      	nop			@ (mov r8, r8)
1004632c:	46bd      	mov	sp, r7
1004632e:	b004      	add	sp, #16
10046330:	bd80      	pop	{r7, pc}
10046332:	46c0      	nop			@ (mov r8, r8)
10046334:	20001c0c 	.word	0x20001c0c

10046338 <OledOn>:
{
    OledDriverSetDisplayNormal();
}

void OledOn(void)
{
10046338:	b580      	push	{r7, lr}
1004633a:	af00      	add	r7, sp, #0
    OledDriverInitDisplay();
1004633c:	f000 f81c 	bl	10046378 <OledDriverInitDisplay>
}
10046340:	46c0      	nop			@ (mov r8, r8)
10046342:	46bd      	mov	sp, r7
10046344:	bd80      	pop	{r7, pc}

10046346 <OledOff>:

void OledOff(void)
{
10046346:	b580      	push	{r7, lr}
10046348:	af00      	add	r7, sp, #0
    OledDriverDisableDisplay();
1004634a:	f000 f872 	bl	10046432 <OledDriverDisableDisplay>
}
1004634e:	46c0      	nop			@ (mov r8, r8)
10046350:	46bd      	mov	sp, r7
10046352:	bd80      	pop	{r7, pc}

10046354 <OledUpdate>:

void OledUpdate(void)
{
10046354:	b580      	push	{r7, lr}
10046356:	af00      	add	r7, sp, #0
    OledDriverUpdateDisplay();
10046358:	f000 f876 	bl	10046448 <OledDriverUpdateDisplay>
}
1004635c:	46c0      	nop			@ (mov r8, r8)
1004635e:	46bd      	mov	sp, r7
10046360:	bd80      	pop	{r7, pc}

10046362 <OledHostInit>:
/**
 * Initialize the STM32 to communicate with the OLED display through the SSD1306
 * display controller using an instance of I2C.
 */
void OledHostInit(void)
{
10046362:	b580      	push	{r7, lr}
10046364:	af00      	add	r7, sp, #0
    BOARD_Init(); // init board and printf functionality
10046366:	f7fb fed7 	bl	10042118 <BOARD_Init>
    TIMERS_Init(); // init timer module for delay functions
1004636a:	f000 fb69 	bl	10046a40 <TIMERS_Init>
    I2C_Init();   // init I2C module
1004636e:	f7ff f811 	bl	10045394 <I2C_Init>
}
10046372:	46c0      	nop			@ (mov r8, r8)
10046374:	46bd      	mov	sp, r7
10046376:	bd80      	pop	{r7, pc}

10046378 <OledDriverInitDisplay>:

/**
 * Initialize the OLED display and send init/config sequence
 */
void OledDriverInitDisplay(void)
{
10046378:	b580      	push	{r7, lr}
1004637a:	af00      	add	r7, sp, #0
    // Turn off the display.
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_DISPLAY_OFF);
1004637c:	22ae      	movs	r2, #174	@ 0xae
1004637e:	2180      	movs	r1, #128	@ 0x80
10046380:	203c      	movs	r0, #60	@ 0x3c
10046382:	f7ff f923 	bl	100455cc <I2C_WriteReg>
    DelayMs(10);
10046386:	200a      	movs	r0, #10
10046388:	f000 f8a0 	bl	100464cc <DelayMs>
//
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_OSC_FREQ);
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_OSC_FREQ);
//
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_MULTIPLEX_RATIO);
1004638c:	22a8      	movs	r2, #168	@ 0xa8
1004638e:	2180      	movs	r1, #128	@ 0x80
10046390:	203c      	movs	r0, #60	@ 0x3c
10046392:	f7ff f91b 	bl	100455cc <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x3F);
10046396:	223f      	movs	r2, #63	@ 0x3f
10046398:	2180      	movs	r1, #128	@ 0x80
1004639a:	203c      	movs	r0, #60	@ 0x3c
1004639c:	f7ff f916 	bl	100455cc <I2C_WriteReg>
//
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xD3);//Display OFFSET
100463a0:	22d3      	movs	r2, #211	@ 0xd3
100463a2:	2180      	movs	r1, #128	@ 0x80
100463a4:	203c      	movs	r0, #60	@ 0x3c
100463a6:	f7ff f911 	bl	100455cc <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x08);
100463aa:	2208      	movs	r2, #8
100463ac:	2180      	movs	r1, #128	@ 0x80
100463ae:	203c      	movs	r0, #60	@ 0x3c
100463b0:	f7ff f90c 	bl	100455cc <I2C_WriteReg>

    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x40);//Set display start line
100463b4:	2240      	movs	r2, #64	@ 0x40
100463b6:	2180      	movs	r1, #128	@ 0x80
100463b8:	203c      	movs	r0, #60	@ 0x3c
100463ba:	f7ff f907 	bl	100455cc <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xA1);//Set segment re-map
100463be:	22a1      	movs	r2, #161	@ 0xa1
100463c0:	2180      	movs	r1, #128	@ 0x80
100463c2:	203c      	movs	r0, #60	@ 0x3c
100463c4:	f7ff f902 	bl	100455cc <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xC0);//Set COM output Scan direction
100463c8:	22c0      	movs	r2, #192	@ 0xc0
100463ca:	2180      	movs	r1, #128	@ 0x80
100463cc:	203c      	movs	r0, #60	@ 0x3c
100463ce:	f7ff f8fd 	bl	100455cc <I2C_WriteReg>

    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xDA);//Set COM hardware config
100463d2:	22da      	movs	r2, #218	@ 0xda
100463d4:	2180      	movs	r1, #128	@ 0x80
100463d6:	203c      	movs	r0, #60	@ 0x3c
100463d8:	f7ff f8f8 	bl	100455cc <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x12);
100463dc:	2212      	movs	r2, #18
100463de:	2180      	movs	r1, #128	@ 0x80
100463e0:	203c      	movs	r0, #60	@ 0x3c
100463e2:	f7ff f8f3 	bl	100455cc <I2C_WriteReg>
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xDB);//Set VCOMH deselect level
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x40);
//
//
//
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xA4);//Set entire display on/off
100463e6:	22a4      	movs	r2, #164	@ 0xa4
100463e8:	2180      	movs	r1, #128	@ 0x80
100463ea:	203c      	movs	r0, #60	@ 0x3c
100463ec:	f7ff f8ee 	bl	100455cc <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xA6);//Set normal/inverted display
100463f0:	22a6      	movs	r2, #166	@ 0xa6
100463f2:	2180      	movs	r1, #128	@ 0x80
100463f4:	203c      	movs	r0, #60	@ 0x3c
100463f6:	f7ff f8e9 	bl	100455cc <I2C_WriteReg>


    // Enable the charge pump and
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_CHARGE_PUMP);
100463fa:	228d      	movs	r2, #141	@ 0x8d
100463fc:	2180      	movs	r1, #128	@ 0x80
100463fe:	203c      	movs	r0, #60	@ 0x3c
10046400:	f7ff f8e4 	bl	100455cc <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_ENABLE_CHARGE_PUMP);
10046404:	2214      	movs	r2, #20
10046406:	2180      	movs	r1, #128	@ 0x80
10046408:	203c      	movs	r0, #60	@ 0x3c
1004640a:	f7ff f8df 	bl	100455cc <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_PRECHARGE_PERIOD);
1004640e:	22d9      	movs	r2, #217	@ 0xd9
10046410:	2180      	movs	r1, #128	@ 0x80
10046412:	203c      	movs	r0, #60	@ 0x3c
10046414:	f7ff f8da 	bl	100455cc <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_MAXIMUM_PRECHARGE);
10046418:	22f1      	movs	r2, #241	@ 0xf1
1004641a:	2180      	movs	r1, #128	@ 0x80
1004641c:	203c      	movs	r0, #60	@ 0x3c
1004641e:	f7ff f8d5 	bl	100455cc <I2C_WriteReg>
//    // Set sequential COM configuration with non-interleaved memory.
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_COM_PINS_CONFIG);
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_SEQUENTIAL_COM_NON_INTERLEAVED);

    // And turn on the display.
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_DISPLAY_ON);
10046422:	22af      	movs	r2, #175	@ 0xaf
10046424:	2180      	movs	r1, #128	@ 0x80
10046426:	203c      	movs	r0, #60	@ 0x3c
10046428:	f7ff f8d0 	bl	100455cc <I2C_WriteReg>
}
1004642c:	46c0      	nop			@ (mov r8, r8)
1004642e:	46bd      	mov	sp, r7
10046430:	bd80      	pop	{r7, pc}

10046432 <OledDriverDisableDisplay>:

/**
 * Disable the Oled display before power-off.
 */
void OledDriverDisableDisplay(void)
{
10046432:	b580      	push	{r7, lr}
10046434:	af00      	add	r7, sp, #0
    // Send the display off command.
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_DISPLAY_OFF);
10046436:	22ae      	movs	r2, #174	@ 0xae
10046438:	2180      	movs	r1, #128	@ 0x80
1004643a:	203c      	movs	r0, #60	@ 0x3c
1004643c:	f7ff f8c6 	bl	100455cc <I2C_WriteReg>
}
10046440:	46c0      	nop			@ (mov r8, r8)
10046442:	46bd      	mov	sp, r7
10046444:	bd80      	pop	{r7, pc}
	...

10046448 <OledDriverUpdateDisplay>:

/**
 * Update the display with the contents of rgb0ledBmp.
 */
void OledDriverUpdateDisplay(void)
{
10046448:	b580      	push	{r7, lr}
1004644a:	b084      	sub	sp, #16
1004644c:	af00      	add	r7, sp, #0
    uint8_t *pb = &(rgbOledBmp[OLED_DRIVER_BUFFER_SIZE-1]);
1004644e:	4b1e      	ldr	r3, [pc, #120]	@ (100464c8 <OledDriverUpdateDisplay+0x80>)
10046450:	60fb      	str	r3, [r7, #12]
    int page;
    for (page = 0; page < OLED_DRIVER_PAGES; page++) {
10046452:	2300      	movs	r3, #0
10046454:	60bb      	str	r3, [r7, #8]
10046456:	e02f      	b.n	100464b8 <OledDriverUpdateDisplay+0x70>

        // Set the desired page.
        I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xB0 | (OLED_DRIVER_PAGES- page));//select page start address
10046458:	68bb      	ldr	r3, [r7, #8]
1004645a:	b2db      	uxtb	r3, r3
1004645c:	2208      	movs	r2, #8
1004645e:	1ad3      	subs	r3, r2, r3
10046460:	b2db      	uxtb	r3, r3
10046462:	b25b      	sxtb	r3, r3
10046464:	2250      	movs	r2, #80	@ 0x50
10046466:	4252      	negs	r2, r2
10046468:	4313      	orrs	r3, r2
1004646a:	b25b      	sxtb	r3, r3
1004646c:	b2db      	uxtb	r3, r3
1004646e:	001a      	movs	r2, r3
10046470:	2180      	movs	r1, #128	@ 0x80
10046472:	203c      	movs	r0, #60	@ 0x3c
10046474:	f7ff f8aa 	bl	100455cc <I2C_WriteReg>
//        I2C_WriteReg(OLED_ADDRESS, COMMAND, page);

        // Set the starting column back to the origin.
        I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_DISPLAY_LOWER_COLUMN_0);
10046478:	2200      	movs	r2, #0
1004647a:	2180      	movs	r1, #128	@ 0x80
1004647c:	203c      	movs	r0, #60	@ 0x3c
1004647e:	f7ff f8a5 	bl	100455cc <I2C_WriteReg>
        I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_DISPLAY_UPPER_COLUMN_0);
10046482:	2210      	movs	r2, #16
10046484:	2180      	movs	r1, #128	@ 0x80
10046486:	203c      	movs	r0, #60	@ 0x3c
10046488:	f7ff f8a0 	bl	100455cc <I2C_WriteReg>

        // Write this entire column to the OLED.
        for (int i = 0; i < OLED_DRIVER_PIXEL_COLUMNS; i++) {
1004648c:	2300      	movs	r3, #0
1004648e:	607b      	str	r3, [r7, #4]
10046490:	e00c      	b.n	100464ac <OledDriverUpdateDisplay+0x64>
            I2C_WriteReg(OLED_ADDRESS, DATA, *pb);
10046492:	68fb      	ldr	r3, [r7, #12]
10046494:	781b      	ldrb	r3, [r3, #0]
10046496:	001a      	movs	r2, r3
10046498:	21c0      	movs	r1, #192	@ 0xc0
1004649a:	203c      	movs	r0, #60	@ 0x3c
1004649c:	f7ff f896 	bl	100455cc <I2C_WriteReg>
            pb--;
100464a0:	68fb      	ldr	r3, [r7, #12]
100464a2:	3b01      	subs	r3, #1
100464a4:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < OLED_DRIVER_PIXEL_COLUMNS; i++) {
100464a6:	687b      	ldr	r3, [r7, #4]
100464a8:	3301      	adds	r3, #1
100464aa:	607b      	str	r3, [r7, #4]
100464ac:	687b      	ldr	r3, [r7, #4]
100464ae:	2b7f      	cmp	r3, #127	@ 0x7f
100464b0:	ddef      	ble.n	10046492 <OledDriverUpdateDisplay+0x4a>
    for (page = 0; page < OLED_DRIVER_PAGES; page++) {
100464b2:	68bb      	ldr	r3, [r7, #8]
100464b4:	3301      	adds	r3, #1
100464b6:	60bb      	str	r3, [r7, #8]
100464b8:	68bb      	ldr	r3, [r7, #8]
100464ba:	2b07      	cmp	r3, #7
100464bc:	ddcc      	ble.n	10046458 <OledDriverUpdateDisplay+0x10>
        }
    }
}
100464be:	46c0      	nop			@ (mov r8, r8)
100464c0:	46c0      	nop			@ (mov r8, r8)
100464c2:	46bd      	mov	sp, r7
100464c4:	b004      	add	sp, #16
100464c6:	bd80      	pop	{r7, pc}
100464c8:	2000200b 	.word	0x2000200b

100464cc <DelayMs>:

/**
 * Block the processor for the desired number of milliseconds.
 * @param ms The number of milliseconds to block for.
 */
void DelayMs(uint32_t ms) {
100464cc:	b580      	push	{r7, lr}
100464ce:	b084      	sub	sp, #16
100464d0:	af00      	add	r7, sp, #0
100464d2:	6078      	str	r0, [r7, #4]
    uint32_t curr_ms = TIMERS_GetMilliSeconds();
100464d4:	f000 fb00 	bl	10046ad8 <TIMERS_GetMilliSeconds>
100464d8:	0003      	movs	r3, r0
100464da:	60fb      	str	r3, [r7, #12]
    while ((TIMERS_GetMilliSeconds() - curr_ms) < ms);
100464dc:	46c0      	nop			@ (mov r8, r8)
100464de:	f000 fafb 	bl	10046ad8 <TIMERS_GetMilliSeconds>
100464e2:	0002      	movs	r2, r0
100464e4:	68fb      	ldr	r3, [r7, #12]
100464e6:	1ad3      	subs	r3, r2, r3
100464e8:	687a      	ldr	r2, [r7, #4]
100464ea:	429a      	cmp	r2, r3
100464ec:	d8f7      	bhi.n	100464de <DelayMs+0x12>
}
100464ee:	46c0      	nop			@ (mov r8, r8)
100464f0:	46c0      	nop			@ (mov r8, r8)
100464f2:	46bd      	mov	sp, r7
100464f4:	b004      	add	sp, #16
100464f6:	bd80      	pop	{r7, pc}

100464f8 <CompareTime>:
static uint8_t minute;

static uint8_t logging;//logging
static uint8_t playdata;
//----------------------------------------Private Functions--------------------------------------
void CompareTime(){
100464f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100464fa:	b089      	sub	sp, #36	@ 0x24
100464fc:	af00      	add	r7, sp, #0
	if(!newdata){
100464fe:	4b80      	ldr	r3, [pc, #512]	@ (10046700 <CompareTime+0x208>)
10046500:	781b      	ldrb	r3, [r3, #0]
10046502:	2b00      	cmp	r3, #0
10046504:	d100      	bne.n	10046508 <CompareTime+0x10>
10046506:	e0f7      	b.n	100466f8 <CompareTime+0x200>
		return;
	}
	//discountprintf("Date received");
	if(logging){
10046508:	4b7e      	ldr	r3, [pc, #504]	@ (10046704 <CompareTime+0x20c>)
1004650a:	781b      	ldrb	r3, [r3, #0]
1004650c:	2b00      	cmp	r3, #0
1004650e:	d05e      	beq.n	100465ce <CompareTime+0xd6>
		scheduleEvent event;

		event.month = month;
10046510:	4b7d      	ldr	r3, [pc, #500]	@ (10046708 <CompareTime+0x210>)
10046512:	781a      	ldrb	r2, [r3, #0]
10046514:	2518      	movs	r5, #24
10046516:	197b      	adds	r3, r7, r5
10046518:	701a      	strb	r2, [r3, #0]
		event.day = day;
1004651a:	4b7c      	ldr	r3, [pc, #496]	@ (1004670c <CompareTime+0x214>)
1004651c:	781a      	ldrb	r2, [r3, #0]
1004651e:	197b      	adds	r3, r7, r5
10046520:	705a      	strb	r2, [r3, #1]
		if(playdata){
10046522:	4b7b      	ldr	r3, [pc, #492]	@ (10046710 <CompareTime+0x218>)
10046524:	781b      	ldrb	r3, [r3, #0]
10046526:	2b00      	cmp	r3, #0
10046528:	d01d      	beq.n	10046566 <CompareTime+0x6e>
			event.start = ((hour & 0b11111) << 3) & ((uint8_t)(minute/15));
1004652a:	4b7a      	ldr	r3, [pc, #488]	@ (10046714 <CompareTime+0x21c>)
1004652c:	781b      	ldrb	r3, [r3, #0]
1004652e:	b25b      	sxtb	r3, r3
10046530:	00db      	lsls	r3, r3, #3
10046532:	b25c      	sxtb	r4, r3
10046534:	4b78      	ldr	r3, [pc, #480]	@ (10046718 <CompareTime+0x220>)
10046536:	781b      	ldrb	r3, [r3, #0]
10046538:	210f      	movs	r1, #15
1004653a:	0018      	movs	r0, r3
1004653c:	f7f9 fe80 	bl	10040240 <__udivsi3>
10046540:	0003      	movs	r3, r0
10046542:	b2db      	uxtb	r3, r3
10046544:	b25b      	sxtb	r3, r3
10046546:	4023      	ands	r3, r4
10046548:	b25b      	sxtb	r3, r3
1004654a:	b2da      	uxtb	r2, r3
1004654c:	197b      	adds	r3, r7, r5
1004654e:	709a      	strb	r2, [r3, #2]
			event.stop = 0;
10046550:	197b      	adds	r3, r7, r5
10046552:	2200      	movs	r2, #0
10046554:	70da      	strb	r2, [r3, #3]
			event.folder = (playdata>>8)&0xFF;
10046556:	197b      	adds	r3, r7, r5
10046558:	2200      	movs	r2, #0
1004655a:	711a      	strb	r2, [r3, #4]
			event.track = playdata&0xFF;
1004655c:	4b6c      	ldr	r3, [pc, #432]	@ (10046710 <CompareTime+0x218>)
1004655e:	781a      	ldrb	r2, [r3, #0]
10046560:	197b      	adds	r3, r7, r5
10046562:	715a      	strb	r2, [r3, #5]
10046564:	e029      	b.n	100465ba <CompareTime+0xc2>
		} else {
			scheduleEvent prevevent = FLASH_ReadLogs(FLASH_GetLogsSize()-1);
10046566:	f7fe fa8b 	bl	10044a80 <FLASH_GetLogsSize>
1004656a:	0003      	movs	r3, r0
1004656c:	3b01      	subs	r3, #1
1004656e:	b29a      	uxth	r2, r3
10046570:	2610      	movs	r6, #16
10046572:	19bb      	adds	r3, r7, r6
10046574:	0011      	movs	r1, r2
10046576:	0018      	movs	r0, r3
10046578:	f7fe fa96 	bl	10044aa8 <FLASH_ReadLogs>
			event.start = 0;
1004657c:	2518      	movs	r5, #24
1004657e:	197b      	adds	r3, r7, r5
10046580:	2200      	movs	r2, #0
10046582:	709a      	strb	r2, [r3, #2]
			event.stop = ((hour & 0b11111) << 3) & ((uint8_t)(minute/15));
10046584:	4b63      	ldr	r3, [pc, #396]	@ (10046714 <CompareTime+0x21c>)
10046586:	781b      	ldrb	r3, [r3, #0]
10046588:	b25b      	sxtb	r3, r3
1004658a:	00db      	lsls	r3, r3, #3
1004658c:	b25c      	sxtb	r4, r3
1004658e:	4b62      	ldr	r3, [pc, #392]	@ (10046718 <CompareTime+0x220>)
10046590:	781b      	ldrb	r3, [r3, #0]
10046592:	210f      	movs	r1, #15
10046594:	0018      	movs	r0, r3
10046596:	f7f9 fe53 	bl	10040240 <__udivsi3>
1004659a:	0003      	movs	r3, r0
1004659c:	b2db      	uxtb	r3, r3
1004659e:	b25b      	sxtb	r3, r3
100465a0:	4023      	ands	r3, r4
100465a2:	b25b      	sxtb	r3, r3
100465a4:	b2da      	uxtb	r2, r3
100465a6:	197b      	adds	r3, r7, r5
100465a8:	70da      	strb	r2, [r3, #3]
			event.folder = prevevent.folder;
100465aa:	19bb      	adds	r3, r7, r6
100465ac:	791a      	ldrb	r2, [r3, #4]
100465ae:	197b      	adds	r3, r7, r5
100465b0:	711a      	strb	r2, [r3, #4]
			event.track = prevevent.track;
100465b2:	19bb      	adds	r3, r7, r6
100465b4:	795a      	ldrb	r2, [r3, #5]
100465b6:	197b      	adds	r3, r7, r5
100465b8:	715a      	strb	r2, [r3, #5]
		}
		FLASH_AppendLogs(event);
100465ba:	2318      	movs	r3, #24
100465bc:	18fb      	adds	r3, r7, r3
100465be:	6818      	ldr	r0, [r3, #0]
100465c0:	6859      	ldr	r1, [r3, #4]
100465c2:	f7fe fa01 	bl	100449c8 <FLASH_AppendLogs>
		logging  = 0;
100465c6:	4b4f      	ldr	r3, [pc, #316]	@ (10046704 <CompareTime+0x20c>)
100465c8:	2200      	movs	r2, #0
100465ca:	701a      	strb	r2, [r3, #0]
100465cc:	e090      	b.n	100466f0 <CompareTime+0x1f8>
	} else {
		scheduleEvent event;
		Event_t play = (Event_t){EVENT_PLAY, 0};
100465ce:	1d3b      	adds	r3, r7, #4
100465d0:	220b      	movs	r2, #11
100465d2:	701a      	strb	r2, [r3, #0]
100465d4:	1d3b      	adds	r3, r7, #4
100465d6:	2200      	movs	r2, #0
100465d8:	805a      	strh	r2, [r3, #2]
		for(uint16_t i = 0; i < FLASH_GetScheduleSize(); i++){
100465da:	231e      	movs	r3, #30
100465dc:	18fb      	adds	r3, r7, r3
100465de:	2200      	movs	r2, #0
100465e0:	801a      	strh	r2, [r3, #0]
100465e2:	e079      	b.n	100466d8 <CompareTime+0x1e0>
			event = FLASH_ReadSchedule(i);
100465e4:	2408      	movs	r4, #8
100465e6:	193a      	adds	r2, r7, r4
100465e8:	231e      	movs	r3, #30
100465ea:	18fb      	adds	r3, r7, r3
100465ec:	881b      	ldrh	r3, [r3, #0]
100465ee:	0019      	movs	r1, r3
100465f0:	0010      	movs	r0, r2
100465f2:	f7fe fb47 	bl	10044c84 <FLASH_ReadSchedule>
			if(event.month == month && event.day == day){//if the scheduled event has the right day
100465f6:	0021      	movs	r1, r4
100465f8:	187b      	adds	r3, r7, r1
100465fa:	781a      	ldrb	r2, [r3, #0]
100465fc:	4b42      	ldr	r3, [pc, #264]	@ (10046708 <CompareTime+0x210>)
100465fe:	781b      	ldrb	r3, [r3, #0]
10046600:	429a      	cmp	r2, r3
10046602:	d163      	bne.n	100466cc <CompareTime+0x1d4>
10046604:	187b      	adds	r3, r7, r1
10046606:	785a      	ldrb	r2, [r3, #1]
10046608:	4b40      	ldr	r3, [pc, #256]	@ (1004670c <CompareTime+0x214>)
1004660a:	781b      	ldrb	r3, [r3, #0]
1004660c:	429a      	cmp	r2, r3
1004660e:	d15d      	bne.n	100466cc <CompareTime+0x1d4>
				if((event.start&0b11111000)>>3 <= hour && (event.stop&0b11111000)>>3 > hour){//if the current min is within when the schedule should be playing
10046610:	187b      	adds	r3, r7, r1
10046612:	789b      	ldrb	r3, [r3, #2]
10046614:	08db      	lsrs	r3, r3, #3
10046616:	b2da      	uxtb	r2, r3
10046618:	4b3e      	ldr	r3, [pc, #248]	@ (10046714 <CompareTime+0x21c>)
1004661a:	781b      	ldrb	r3, [r3, #0]
1004661c:	429a      	cmp	r2, r3
1004661e:	d839      	bhi.n	10046694 <CompareTime+0x19c>
10046620:	187b      	adds	r3, r7, r1
10046622:	78db      	ldrb	r3, [r3, #3]
10046624:	08db      	lsrs	r3, r3, #3
10046626:	b2da      	uxtb	r2, r3
10046628:	4b3a      	ldr	r3, [pc, #232]	@ (10046714 <CompareTime+0x21c>)
1004662a:	781b      	ldrb	r3, [r3, #0]
1004662c:	429a      	cmp	r2, r3
1004662e:	d931      	bls.n	10046694 <CompareTime+0x19c>
					if((event.start & 0b011)*15 <= minute && (event.stop & 0b011)*15 > minute){//repeat for minute
10046630:	187b      	adds	r3, r7, r1
10046632:	789b      	ldrb	r3, [r3, #2]
10046634:	001a      	movs	r2, r3
10046636:	2303      	movs	r3, #3
10046638:	401a      	ands	r2, r3
1004663a:	0013      	movs	r3, r2
1004663c:	011b      	lsls	r3, r3, #4
1004663e:	1a9b      	subs	r3, r3, r2
10046640:	4a35      	ldr	r2, [pc, #212]	@ (10046718 <CompareTime+0x220>)
10046642:	7812      	ldrb	r2, [r2, #0]
10046644:	4293      	cmp	r3, r2
10046646:	dc25      	bgt.n	10046694 <CompareTime+0x19c>
10046648:	187b      	adds	r3, r7, r1
1004664a:	78db      	ldrb	r3, [r3, #3]
1004664c:	001a      	movs	r2, r3
1004664e:	2303      	movs	r3, #3
10046650:	401a      	ands	r2, r3
10046652:	0013      	movs	r3, r2
10046654:	011b      	lsls	r3, r3, #4
10046656:	1a9b      	subs	r3, r3, r2
10046658:	4a2f      	ldr	r2, [pc, #188]	@ (10046718 <CompareTime+0x220>)
1004665a:	7812      	ldrb	r2, [r2, #0]
1004665c:	4293      	cmp	r3, r2
1004665e:	dd19      	ble.n	10046694 <CompareTime+0x19c>
						if(event.folder != (MP3_GetCurrentFile()>>8)){//if we have not already sent this event
10046660:	000d      	movs	r5, r1
10046662:	187b      	adds	r3, r7, r1
10046664:	791b      	ldrb	r3, [r3, #4]
10046666:	001c      	movs	r4, r3
10046668:	f7ff fcf6 	bl	10046058 <MP3_GetCurrentFile>
1004666c:	0003      	movs	r3, r0
1004666e:	0a1b      	lsrs	r3, r3, #8
10046670:	b29b      	uxth	r3, r3
10046672:	429c      	cmp	r4, r3
10046674:	d03b      	beq.n	100466ee <CompareTime+0x1f6>
							play.data = (event.folder<<8) + event.track;//Update the MP3
10046676:	197b      	adds	r3, r7, r5
10046678:	791b      	ldrb	r3, [r3, #4]
1004667a:	021b      	lsls	r3, r3, #8
1004667c:	b29b      	uxth	r3, r3
1004667e:	197a      	adds	r2, r7, r5
10046680:	7952      	ldrb	r2, [r2, #5]
10046682:	189b      	adds	r3, r3, r2
10046684:	b29a      	uxth	r2, r3
10046686:	1d3b      	adds	r3, r7, #4
10046688:	805a      	strh	r2, [r3, #2]
							MP3_Event_Post(play);
1004668a:	1d3b      	adds	r3, r7, #4
1004668c:	6818      	ldr	r0, [r3, #0]
1004668e:	f7ff f94f 	bl	10045930 <MP3_Event_Post>
						}
						break;
10046692:	e02c      	b.n	100466ee <CompareTime+0x1f6>
					}
				}
				if ((event.stop&0b11111000)>>3 == hour && (event.stop & 0b011)*15 == minute){
10046694:	2108      	movs	r1, #8
10046696:	187b      	adds	r3, r7, r1
10046698:	78db      	ldrb	r3, [r3, #3]
1004669a:	08db      	lsrs	r3, r3, #3
1004669c:	b2da      	uxtb	r2, r3
1004669e:	4b1d      	ldr	r3, [pc, #116]	@ (10046714 <CompareTime+0x21c>)
100466a0:	781b      	ldrb	r3, [r3, #0]
100466a2:	429a      	cmp	r2, r3
100466a4:	d112      	bne.n	100466cc <CompareTime+0x1d4>
100466a6:	187b      	adds	r3, r7, r1
100466a8:	78db      	ldrb	r3, [r3, #3]
100466aa:	001a      	movs	r2, r3
100466ac:	2303      	movs	r3, #3
100466ae:	401a      	ands	r2, r3
100466b0:	0013      	movs	r3, r2
100466b2:	011b      	lsls	r3, r3, #4
100466b4:	1a9b      	subs	r3, r3, r2
100466b6:	4a18      	ldr	r2, [pc, #96]	@ (10046718 <CompareTime+0x220>)
100466b8:	7812      	ldrb	r2, [r2, #0]
100466ba:	4293      	cmp	r3, r2
100466bc:	d106      	bne.n	100466cc <CompareTime+0x1d4>
					play.data = 0;
100466be:	1d3b      	adds	r3, r7, #4
100466c0:	2200      	movs	r2, #0
100466c2:	805a      	strh	r2, [r3, #2]
					MP3_Event_Post(play);
100466c4:	1d3b      	adds	r3, r7, #4
100466c6:	6818      	ldr	r0, [r3, #0]
100466c8:	f7ff f932 	bl	10045930 <MP3_Event_Post>
		for(uint16_t i = 0; i < FLASH_GetScheduleSize(); i++){
100466cc:	211e      	movs	r1, #30
100466ce:	187b      	adds	r3, r7, r1
100466d0:	881a      	ldrh	r2, [r3, #0]
100466d2:	187b      	adds	r3, r7, r1
100466d4:	3201      	adds	r2, #1
100466d6:	801a      	strh	r2, [r3, #0]
100466d8:	f7fe fac0 	bl	10044c5c <FLASH_GetScheduleSize>
100466dc:	0003      	movs	r3, r0
100466de:	001a      	movs	r2, r3
100466e0:	231e      	movs	r3, #30
100466e2:	18fb      	adds	r3, r7, r3
100466e4:	881b      	ldrh	r3, [r3, #0]
100466e6:	4293      	cmp	r3, r2
100466e8:	d200      	bcs.n	100466ec <CompareTime+0x1f4>
100466ea:	e77b      	b.n	100465e4 <CompareTime+0xec>
100466ec:	e000      	b.n	100466f0 <CompareTime+0x1f8>
						break;
100466ee:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}
	newdata = 0;
100466f0:	4b03      	ldr	r3, [pc, #12]	@ (10046700 <CompareTime+0x208>)
100466f2:	2200      	movs	r2, #0
100466f4:	701a      	strb	r2, [r3, #0]
100466f6:	e000      	b.n	100466fa <CompareTime+0x202>
		return;
100466f8:	46c0      	nop			@ (mov r8, r8)
}
100466fa:	46bd      	mov	sp, r7
100466fc:	b009      	add	sp, #36	@ 0x24
100466fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10046700:	20002014 	.word	0x20002014
10046704:	20002019 	.word	0x20002019
10046708:	20002015 	.word	0x20002015
1004670c:	20002016 	.word	0x20002016
10046710:	2000201a 	.word	0x2000201a
10046714:	20002017 	.word	0x20002017
10046718:	20002018 	.word	0x20002018

1004671c <Scheduler_GetMonth>:
uint8_t Scheduler_GetMonth(){
1004671c:	b580      	push	{r7, lr}
1004671e:	af00      	add	r7, sp, #0
	return month;
10046720:	4b02      	ldr	r3, [pc, #8]	@ (1004672c <Scheduler_GetMonth+0x10>)
10046722:	781b      	ldrb	r3, [r3, #0]
}
10046724:	0018      	movs	r0, r3
10046726:	46bd      	mov	sp, r7
10046728:	bd80      	pop	{r7, pc}
1004672a:	46c0      	nop			@ (mov r8, r8)
1004672c:	20002015 	.word	0x20002015

10046730 <Scheduler_GetDay>:
uint8_t Scheduler_GetDay(){
10046730:	b580      	push	{r7, lr}
10046732:	af00      	add	r7, sp, #0
	return day;
10046734:	4b02      	ldr	r3, [pc, #8]	@ (10046740 <Scheduler_GetDay+0x10>)
10046736:	781b      	ldrb	r3, [r3, #0]
}
10046738:	0018      	movs	r0, r3
1004673a:	46bd      	mov	sp, r7
1004673c:	bd80      	pop	{r7, pc}
1004673e:	46c0      	nop			@ (mov r8, r8)
10046740:	20002016 	.word	0x20002016

10046744 <Scheduler_GetHour>:
uint8_t Scheduler_GetHour(){
10046744:	b580      	push	{r7, lr}
10046746:	af00      	add	r7, sp, #0
	return hour;
10046748:	4b02      	ldr	r3, [pc, #8]	@ (10046754 <Scheduler_GetHour+0x10>)
1004674a:	781b      	ldrb	r3, [r3, #0]
}
1004674c:	0018      	movs	r0, r3
1004674e:	46bd      	mov	sp, r7
10046750:	bd80      	pop	{r7, pc}
10046752:	46c0      	nop			@ (mov r8, r8)
10046754:	20002017 	.word	0x20002017

10046758 <Scheduler_GetMinute>:
uint8_t Scheduler_GetMinute(){
10046758:	b580      	push	{r7, lr}
1004675a:	af00      	add	r7, sp, #0
	return minute;
1004675c:	4b02      	ldr	r3, [pc, #8]	@ (10046768 <Scheduler_GetMinute+0x10>)
1004675e:	781b      	ldrb	r3, [r3, #0]
}
10046760:	0018      	movs	r0, r3
10046762:	46bd      	mov	sp, r7
10046764:	bd80      	pop	{r7, pc}
10046766:	46c0      	nop			@ (mov r8, r8)
10046768:	20002018 	.word	0x20002018

1004676c <Scheduler_Event_Init>:
 * @Function: Scheduler_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t Scheduler_Event_Init(FIFO Queue){
1004676c:	b580      	push	{r7, lr}
1004676e:	b082      	sub	sp, #8
10046770:	af00      	add	r7, sp, #0
10046772:	6078      	str	r0, [r7, #4]
    Schedulerqueue = Queue;
10046774:	4b0c      	ldr	r3, [pc, #48]	@ (100467a8 <Scheduler_Event_Init+0x3c>)
10046776:	687a      	ldr	r2, [r7, #4]
10046778:	601a      	str	r2, [r3, #0]
    I2C_Init();
1004677a:	f7fe fe0b 	bl	10045394 <I2C_Init>
    TIMERS_Init();
1004677e:	f000 f95f 	bl	10046a40 <TIMERS_Init>
    I2C_Transmit(RTCADDRESS, RTCSECADDR, 0x80);//enable the clock
10046782:	2280      	movs	r2, #128	@ 0x80
10046784:	2100      	movs	r1, #0
10046786:	206f      	movs	r0, #111	@ 0x6f
10046788:	f7fe fe7e 	bl	10045488 <I2C_Transmit>
	I2C_Transmit(RTCADDRESS, RTCSTATADDR, 0x28);//enables the use of backup battery
1004678c:	2228      	movs	r2, #40	@ 0x28
1004678e:	2103      	movs	r1, #3
10046790:	206f      	movs	r0, #111	@ 0x6f
10046792:	f7fe fe79 	bl	10045488 <I2C_Transmit>
    starttime = -1;//force check time on wake-up
10046796:	4b05      	ldr	r3, [pc, #20]	@ (100467ac <Scheduler_Event_Init+0x40>)
10046798:	2201      	movs	r2, #1
1004679a:	4252      	negs	r2, r2
1004679c:	601a      	str	r2, [r3, #0]
    return INIT_OK;
1004679e:	2301      	movs	r3, #1
}
100467a0:	0018      	movs	r0, r3
100467a2:	46bd      	mov	sp, r7
100467a4:	b002      	add	sp, #8
100467a6:	bd80      	pop	{r7, pc}
100467a8:	2000200c 	.word	0x2000200c
100467ac:	20002010 	.word	0x20002010

100467b0 <Scheduler_Event_Post>:
 * @Function: Scheduler_Event_Init
 * @Brief: Provides the ability for state machines to interact
 * @param: event to be posted
 * @return: none
 */
void Scheduler_Event_Post(Event_t event){
100467b0:	b580      	push	{r7, lr}
100467b2:	b082      	sub	sp, #8
100467b4:	af00      	add	r7, sp, #0
100467b6:	1d3b      	adds	r3, r7, #4
100467b8:	6018      	str	r0, [r3, #0]
    FIFO_Enqueue(Schedulerqueue, event);
100467ba:	4b05      	ldr	r3, [pc, #20]	@ (100467d0 <Scheduler_Event_Post+0x20>)
100467bc:	681a      	ldr	r2, [r3, #0]
100467be:	1d3b      	adds	r3, r7, #4
100467c0:	6819      	ldr	r1, [r3, #0]
100467c2:	0010      	movs	r0, r2
100467c4:	f7fd ff81 	bl	100446ca <FIFO_Enqueue>
}
100467c8:	46c0      	nop			@ (mov r8, r8)
100467ca:	46bd      	mov	sp, r7
100467cc:	b002      	add	sp, #8
100467ce:	bd80      	pop	{r7, pc}
100467d0:	2000200c 	.word	0x2000200c

100467d4 <Scheduler_Event_Updater>:
 * @Function: Scheduler_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the
 * @param: none
 * @return: An event
 */
Event_t Scheduler_Event_Updater(void){
100467d4:	b580      	push	{r7, lr}
100467d6:	b084      	sub	sp, #16
100467d8:	af00      	add	r7, sp, #0
    Event_t event = (Event_t){EVENT_NONE, 0};
100467da:	1d3b      	adds	r3, r7, #4
100467dc:	2200      	movs	r2, #0
100467de:	701a      	strb	r2, [r3, #0]
100467e0:	1d3b      	adds	r3, r7, #4
100467e2:	2200      	movs	r2, #0
100467e4:	805a      	strh	r2, [r3, #2]
    uint32_t timer = TIMERS_GetMilliSeconds();
100467e6:	f000 f977 	bl	10046ad8 <TIMERS_GetMilliSeconds>
100467ea:	0003      	movs	r3, r0
100467ec:	60fb      	str	r3, [r7, #12]
	if((timer-starttime) >= REFRESHRATE){
100467ee:	4b15      	ldr	r3, [pc, #84]	@ (10046844 <Scheduler_Event_Updater+0x70>)
100467f0:	681b      	ldr	r3, [r3, #0]
100467f2:	68fa      	ldr	r2, [r7, #12]
100467f4:	1ad3      	subs	r3, r2, r3
100467f6:	4a14      	ldr	r2, [pc, #80]	@ (10046848 <Scheduler_Event_Updater+0x74>)
100467f8:	4293      	cmp	r3, r2
100467fa:	d90c      	bls.n	10046816 <Scheduler_Event_Updater+0x42>
		event.status = EVENT_TIMEOUT;
100467fc:	1d3b      	adds	r3, r7, #4
100467fe:	2209      	movs	r2, #9
10046800:	701a      	strb	r2, [r3, #0]
		event.data = 0;
10046802:	1d3b      	adds	r3, r7, #4
10046804:	2200      	movs	r2, #0
10046806:	805a      	strh	r2, [r3, #2]
		starttime = timer;
10046808:	4b0e      	ldr	r3, [pc, #56]	@ (10046844 <Scheduler_Event_Updater+0x70>)
1004680a:	68fa      	ldr	r2, [r7, #12]
1004680c:	601a      	str	r2, [r3, #0]
		Scheduler_Event_Post(event);
1004680e:	1d3b      	adds	r3, r7, #4
10046810:	6818      	ldr	r0, [r3, #0]
10046812:	f7ff ffcd 	bl	100467b0 <Scheduler_Event_Post>
	}
    return event;
10046816:	2108      	movs	r1, #8
10046818:	187b      	adds	r3, r7, r1
1004681a:	1d3a      	adds	r2, r7, #4
1004681c:	6812      	ldr	r2, [r2, #0]
1004681e:	601a      	str	r2, [r3, #0]
10046820:	187a      	adds	r2, r7, r1
10046822:	2300      	movs	r3, #0
10046824:	8811      	ldrh	r1, [r2, #0]
10046826:	0409      	lsls	r1, r1, #16
10046828:	0c09      	lsrs	r1, r1, #16
1004682a:	0c1b      	lsrs	r3, r3, #16
1004682c:	041b      	lsls	r3, r3, #16
1004682e:	430b      	orrs	r3, r1
10046830:	8852      	ldrh	r2, [r2, #2]
10046832:	0412      	lsls	r2, r2, #16
10046834:	041b      	lsls	r3, r3, #16
10046836:	0c1b      	lsrs	r3, r3, #16
10046838:	4313      	orrs	r3, r2
}
1004683a:	0018      	movs	r0, r3
1004683c:	46bd      	mov	sp, r7
1004683e:	b004      	add	sp, #16
10046840:	bd80      	pop	{r7, pc}
10046842:	46c0      	nop			@ (mov r8, r8)
10046844:	20002010 	.word	0x20002010
10046848:	0000ea5f 	.word	0x0000ea5f

1004684c <Scheduler_Event_Handler>:
 * @Function: Scheduler_Event_Handler
 * @Brief:
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t Scheduler_Event_Handler(Event_t event){
1004684c:	b580      	push	{r7, lr}
1004684e:	b082      	sub	sp, #8
10046850:	af00      	add	r7, sp, #0
10046852:	1d3b      	adds	r3, r7, #4
10046854:	6018      	str	r0, [r3, #0]
	if(event.status == EVENT_PLAY){
10046856:	1d3b      	adds	r3, r7, #4
10046858:	781b      	ldrb	r3, [r3, #0]
1004685a:	b25b      	sxtb	r3, r3
1004685c:	2b0b      	cmp	r3, #11
1004685e:	d11b      	bne.n	10046898 <Scheduler_Event_Handler+0x4c>
		I2C_Recieve(RTCADDRESS, RTCMNTHADDR, 1);
10046860:	2201      	movs	r2, #1
10046862:	2105      	movs	r1, #5
10046864:	206f      	movs	r0, #111	@ 0x6f
10046866:	f7fe fe6d 	bl	10045544 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCDAYADDR, 1);
1004686a:	2201      	movs	r2, #1
1004686c:	2104      	movs	r1, #4
1004686e:	206f      	movs	r0, #111	@ 0x6f
10046870:	f7fe fe68 	bl	10045544 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCHOURADDR, 1);
10046874:	2201      	movs	r2, #1
10046876:	2102      	movs	r1, #2
10046878:	206f      	movs	r0, #111	@ 0x6f
1004687a:	f7fe fe63 	bl	10045544 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCMINADDR, 1);
1004687e:	2201      	movs	r2, #1
10046880:	2101      	movs	r1, #1
10046882:	206f      	movs	r0, #111	@ 0x6f
10046884:	f7fe fe5e 	bl	10045544 <I2C_Recieve>
		logging = 1;
10046888:	4b66      	ldr	r3, [pc, #408]	@ (10046a24 <Scheduler_Event_Handler+0x1d8>)
1004688a:	2201      	movs	r2, #1
1004688c:	701a      	strb	r2, [r3, #0]
		playdata = event.data;
1004688e:	1d3b      	adds	r3, r7, #4
10046890:	885b      	ldrh	r3, [r3, #2]
10046892:	b2da      	uxtb	r2, r3
10046894:	4b64      	ldr	r3, [pc, #400]	@ (10046a28 <Scheduler_Event_Handler+0x1dc>)
10046896:	701a      	strb	r2, [r3, #0]
	}
	if(event.status == EVENT_TIMEOUT){
10046898:	1d3b      	adds	r3, r7, #4
1004689a:	781b      	ldrb	r3, [r3, #0]
1004689c:	b25b      	sxtb	r3, r3
1004689e:	2b09      	cmp	r3, #9
100468a0:	d113      	bne.n	100468ca <Scheduler_Event_Handler+0x7e>
		I2C_Recieve(RTCADDRESS, RTCMNTHADDR, 1);
100468a2:	2201      	movs	r2, #1
100468a4:	2105      	movs	r1, #5
100468a6:	206f      	movs	r0, #111	@ 0x6f
100468a8:	f7fe fe4c 	bl	10045544 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCDAYADDR, 1);
100468ac:	2201      	movs	r2, #1
100468ae:	2104      	movs	r1, #4
100468b0:	206f      	movs	r0, #111	@ 0x6f
100468b2:	f7fe fe47 	bl	10045544 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCHOURADDR, 1);
100468b6:	2201      	movs	r2, #1
100468b8:	2102      	movs	r1, #2
100468ba:	206f      	movs	r0, #111	@ 0x6f
100468bc:	f7fe fe42 	bl	10045544 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCMINADDR, 1);
100468c0:	2201      	movs	r2, #1
100468c2:	2101      	movs	r1, #1
100468c4:	206f      	movs	r0, #111	@ 0x6f
100468c6:	f7fe fe3d 	bl	10045544 <I2C_Recieve>
	}
	if(event.status == EVENT_I2C){
100468ca:	1d3b      	adds	r3, r7, #4
100468cc:	781b      	ldrb	r3, [r3, #0]
100468ce:	b25b      	sxtb	r3, r3
100468d0:	2b05      	cmp	r3, #5
100468d2:	d000      	beq.n	100468d6 <Scheduler_Event_Handler+0x8a>
100468d4:	e0a1      	b.n	10046a1a <Scheduler_Event_Handler+0x1ce>
		switch (event.data>>8){
100468d6:	1d3b      	adds	r3, r7, #4
100468d8:	885b      	ldrh	r3, [r3, #2]
100468da:	0a1b      	lsrs	r3, r3, #8
100468dc:	b29b      	uxth	r3, r3
100468de:	2b05      	cmp	r3, #5
100468e0:	d00b      	beq.n	100468fa <Scheduler_Event_Handler+0xae>
100468e2:	dd00      	ble.n	100468e6 <Scheduler_Event_Handler+0x9a>
100468e4:	e099      	b.n	10046a1a <Scheduler_Event_Handler+0x1ce>
100468e6:	2b04      	cmp	r3, #4
100468e8:	d020      	beq.n	1004692c <Scheduler_Event_Handler+0xe0>
100468ea:	dd00      	ble.n	100468ee <Scheduler_Event_Handler+0xa2>
100468ec:	e095      	b.n	10046a1a <Scheduler_Event_Handler+0x1ce>
100468ee:	2b01      	cmp	r3, #1
100468f0:	d100      	bne.n	100468f4 <Scheduler_Event_Handler+0xa8>
100468f2:	e076      	b.n	100469e2 <Scheduler_Event_Handler+0x196>
100468f4:	2b02      	cmp	r3, #2
100468f6:	d032      	beq.n	1004695e <Scheduler_Event_Handler+0x112>
100468f8:	e08f      	b.n	10046a1a <Scheduler_Event_Handler+0x1ce>
		case RTCMNTHADDR:
			month = ((event.data & 0x10)>>4)*10 + (event.data & 0x0F);
100468fa:	1d3b      	adds	r3, r7, #4
100468fc:	885b      	ldrh	r3, [r3, #2]
100468fe:	111b      	asrs	r3, r3, #4
10046900:	b2db      	uxtb	r3, r3
10046902:	2201      	movs	r2, #1
10046904:	4013      	ands	r3, r2
10046906:	b2db      	uxtb	r3, r3
10046908:	1c1a      	adds	r2, r3, #0
1004690a:	0092      	lsls	r2, r2, #2
1004690c:	18d3      	adds	r3, r2, r3
1004690e:	18db      	adds	r3, r3, r3
10046910:	b2da      	uxtb	r2, r3
10046912:	1d3b      	adds	r3, r7, #4
10046914:	885b      	ldrh	r3, [r3, #2]
10046916:	b2db      	uxtb	r3, r3
10046918:	210f      	movs	r1, #15
1004691a:	400b      	ands	r3, r1
1004691c:	b2db      	uxtb	r3, r3
1004691e:	18d3      	adds	r3, r2, r3
10046920:	b2da      	uxtb	r2, r3
10046922:	4b42      	ldr	r3, [pc, #264]	@ (10046a2c <Scheduler_Event_Handler+0x1e0>)
10046924:	701a      	strb	r2, [r3, #0]
			CompareTime();
10046926:	f7ff fde7 	bl	100464f8 <CompareTime>
			break;
1004692a:	e076      	b.n	10046a1a <Scheduler_Event_Handler+0x1ce>
		case RTCDAYADDR:
			day = ((event.data & 0x30)>>4)*10 + (event.data & 0x0F);
1004692c:	1d3b      	adds	r3, r7, #4
1004692e:	885b      	ldrh	r3, [r3, #2]
10046930:	111b      	asrs	r3, r3, #4
10046932:	b2db      	uxtb	r3, r3
10046934:	2203      	movs	r2, #3
10046936:	4013      	ands	r3, r2
10046938:	b2db      	uxtb	r3, r3
1004693a:	1c1a      	adds	r2, r3, #0
1004693c:	0092      	lsls	r2, r2, #2
1004693e:	18d3      	adds	r3, r2, r3
10046940:	18db      	adds	r3, r3, r3
10046942:	b2da      	uxtb	r2, r3
10046944:	1d3b      	adds	r3, r7, #4
10046946:	885b      	ldrh	r3, [r3, #2]
10046948:	b2db      	uxtb	r3, r3
1004694a:	210f      	movs	r1, #15
1004694c:	400b      	ands	r3, r1
1004694e:	b2db      	uxtb	r3, r3
10046950:	18d3      	adds	r3, r2, r3
10046952:	b2da      	uxtb	r2, r3
10046954:	4b36      	ldr	r3, [pc, #216]	@ (10046a30 <Scheduler_Event_Handler+0x1e4>)
10046956:	701a      	strb	r2, [r3, #0]
			CompareTime();
10046958:	f7ff fdce 	bl	100464f8 <CompareTime>
			break;
1004695c:	e05d      	b.n	10046a1a <Scheduler_Event_Handler+0x1ce>
		case RTCHOURADDR:
			if(event.data & 0x40){//AM/PM
1004695e:	1d3b      	adds	r3, r7, #4
10046960:	885b      	ldrh	r3, [r3, #2]
10046962:	001a      	movs	r2, r3
10046964:	2340      	movs	r3, #64	@ 0x40
10046966:	4013      	ands	r3, r2
10046968:	d022      	beq.n	100469b0 <Scheduler_Event_Handler+0x164>
				hour = 12*((event.data &0x20)>>5)+ 10*((event.data &0x10)>>4) + ((event.data &0x0F));
1004696a:	1d3b      	adds	r3, r7, #4
1004696c:	885b      	ldrh	r3, [r3, #2]
1004696e:	115b      	asrs	r3, r3, #5
10046970:	b2db      	uxtb	r3, r3
10046972:	2201      	movs	r2, #1
10046974:	4013      	ands	r3, r2
10046976:	b2db      	uxtb	r3, r3
10046978:	220c      	movs	r2, #12
1004697a:	4353      	muls	r3, r2
1004697c:	b2da      	uxtb	r2, r3
1004697e:	1d3b      	adds	r3, r7, #4
10046980:	885b      	ldrh	r3, [r3, #2]
10046982:	111b      	asrs	r3, r3, #4
10046984:	b2db      	uxtb	r3, r3
10046986:	2101      	movs	r1, #1
10046988:	400b      	ands	r3, r1
1004698a:	b2db      	uxtb	r3, r3
1004698c:	1c19      	adds	r1, r3, #0
1004698e:	0089      	lsls	r1, r1, #2
10046990:	18cb      	adds	r3, r1, r3
10046992:	18db      	adds	r3, r3, r3
10046994:	b2db      	uxtb	r3, r3
10046996:	18d3      	adds	r3, r2, r3
10046998:	b2da      	uxtb	r2, r3
1004699a:	1d3b      	adds	r3, r7, #4
1004699c:	885b      	ldrh	r3, [r3, #2]
1004699e:	b2db      	uxtb	r3, r3
100469a0:	210f      	movs	r1, #15
100469a2:	400b      	ands	r3, r1
100469a4:	b2db      	uxtb	r3, r3
100469a6:	18d3      	adds	r3, r2, r3
100469a8:	b2da      	uxtb	r2, r3
100469aa:	4b22      	ldr	r3, [pc, #136]	@ (10046a34 <Scheduler_Event_Handler+0x1e8>)
100469ac:	701a      	strb	r2, [r3, #0]
100469ae:	e015      	b.n	100469dc <Scheduler_Event_Handler+0x190>
			}else {//24Hr
				hour = 10*((event.data &0x30)>>4) + ((event.data &0x0F));
100469b0:	1d3b      	adds	r3, r7, #4
100469b2:	885b      	ldrh	r3, [r3, #2]
100469b4:	111b      	asrs	r3, r3, #4
100469b6:	b2db      	uxtb	r3, r3
100469b8:	2203      	movs	r2, #3
100469ba:	4013      	ands	r3, r2
100469bc:	b2db      	uxtb	r3, r3
100469be:	1c1a      	adds	r2, r3, #0
100469c0:	0092      	lsls	r2, r2, #2
100469c2:	18d3      	adds	r3, r2, r3
100469c4:	18db      	adds	r3, r3, r3
100469c6:	b2da      	uxtb	r2, r3
100469c8:	1d3b      	adds	r3, r7, #4
100469ca:	885b      	ldrh	r3, [r3, #2]
100469cc:	b2db      	uxtb	r3, r3
100469ce:	210f      	movs	r1, #15
100469d0:	400b      	ands	r3, r1
100469d2:	b2db      	uxtb	r3, r3
100469d4:	18d3      	adds	r3, r2, r3
100469d6:	b2da      	uxtb	r2, r3
100469d8:	4b16      	ldr	r3, [pc, #88]	@ (10046a34 <Scheduler_Event_Handler+0x1e8>)
100469da:	701a      	strb	r2, [r3, #0]
			}
			CompareTime();
100469dc:	f7ff fd8c 	bl	100464f8 <CompareTime>
			break;
100469e0:	e01b      	b.n	10046a1a <Scheduler_Event_Handler+0x1ce>
		case RTCMINADDR:
			newdata = 1;
100469e2:	4b15      	ldr	r3, [pc, #84]	@ (10046a38 <Scheduler_Event_Handler+0x1ec>)
100469e4:	2201      	movs	r2, #1
100469e6:	701a      	strb	r2, [r3, #0]
			//MINTEN2 MINTEN1 MINTEN0 MINONE3 MINONE2 MINONE1 MINONE0
			minute = 10*((event.data & 0x30)>>4) +((event.data &0x0F));
100469e8:	1d3b      	adds	r3, r7, #4
100469ea:	885b      	ldrh	r3, [r3, #2]
100469ec:	111b      	asrs	r3, r3, #4
100469ee:	b2db      	uxtb	r3, r3
100469f0:	2203      	movs	r2, #3
100469f2:	4013      	ands	r3, r2
100469f4:	b2db      	uxtb	r3, r3
100469f6:	1c1a      	adds	r2, r3, #0
100469f8:	0092      	lsls	r2, r2, #2
100469fa:	18d3      	adds	r3, r2, r3
100469fc:	18db      	adds	r3, r3, r3
100469fe:	b2da      	uxtb	r2, r3
10046a00:	1d3b      	adds	r3, r7, #4
10046a02:	885b      	ldrh	r3, [r3, #2]
10046a04:	b2db      	uxtb	r3, r3
10046a06:	210f      	movs	r1, #15
10046a08:	400b      	ands	r3, r1
10046a0a:	b2db      	uxtb	r3, r3
10046a0c:	18d3      	adds	r3, r2, r3
10046a0e:	b2da      	uxtb	r2, r3
10046a10:	4b0a      	ldr	r3, [pc, #40]	@ (10046a3c <Scheduler_Event_Handler+0x1f0>)
10046a12:	701a      	strb	r2, [r3, #0]
			CompareTime();
10046a14:	f7ff fd70 	bl	100464f8 <CompareTime>

			break;
10046a18:	46c0      	nop			@ (mov r8, r8)
		}
	}
    return 1;
10046a1a:	2301      	movs	r3, #1
}
10046a1c:	0018      	movs	r0, r3
10046a1e:	46bd      	mov	sp, r7
10046a20:	b002      	add	sp, #8
10046a22:	bd80      	pop	{r7, pc}
10046a24:	20002019 	.word	0x20002019
10046a28:	2000201a 	.word	0x2000201a
10046a2c:	20002015 	.word	0x20002015
10046a30:	20002016 	.word	0x20002016
10046a34:	20002017 	.word	0x20002017
10046a38:	20002014 	.word	0x20002014
10046a3c:	20002018 	.word	0x20002018

10046a40 <TIMERS_Init>:
 * @function: TIMERS_Init()
 * @brief: initialize
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
uint32_t TIMERS_Init(){
10046a40:	b580      	push	{r7, lr}
10046a42:	b084      	sub	sp, #16
10046a44:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
10046a46:	4b20      	ldr	r3, [pc, #128]	@ (10046ac8 <TIMERS_Init+0x88>)
10046a48:	781b      	ldrb	r3, [r3, #0]
10046a4a:	2b00      	cmp	r3, #0
10046a4c:	d001      	beq.n	10046a52 <TIMERS_Init+0x12>
10046a4e:	2301      	movs	r3, #1
10046a50:	e036      	b.n	10046ac0 <TIMERS_Init+0x80>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
10046a52:	003b      	movs	r3, r7
10046a54:	0018      	movs	r0, r3
10046a56:	2310      	movs	r3, #16
10046a58:	001a      	movs	r2, r3
10046a5a:	2100      	movs	r1, #0
10046a5c:	f021 fe6e 	bl	1006873c <memset>
	htim2.Instance = TIM2;
10046a60:	4b1a      	ldr	r3, [pc, #104]	@ (10046acc <TIMERS_Init+0x8c>)
10046a62:	4a1b      	ldr	r2, [pc, #108]	@ (10046ad0 <TIMERS_Init+0x90>)
10046a64:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 32;
10046a66:	4b19      	ldr	r3, [pc, #100]	@ (10046acc <TIMERS_Init+0x8c>)
10046a68:	2220      	movs	r2, #32
10046a6a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
10046a6c:	4b17      	ldr	r3, [pc, #92]	@ (10046acc <TIMERS_Init+0x8c>)
10046a6e:	2200      	movs	r2, #0
10046a70:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
10046a72:	4b16      	ldr	r3, [pc, #88]	@ (10046acc <TIMERS_Init+0x8c>)
10046a74:	4a17      	ldr	r2, [pc, #92]	@ (10046ad4 <TIMERS_Init+0x94>)
10046a76:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
10046a78:	4b14      	ldr	r3, [pc, #80]	@ (10046acc <TIMERS_Init+0x8c>)
10046a7a:	2200      	movs	r2, #0
10046a7c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
10046a7e:	4b13      	ldr	r3, [pc, #76]	@ (10046acc <TIMERS_Init+0x8c>)
10046a80:	2200      	movs	r2, #0
10046a82:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
10046a84:	4b11      	ldr	r3, [pc, #68]	@ (10046acc <TIMERS_Init+0x8c>)
10046a86:	0018      	movs	r0, r3
10046a88:	f007 f9f9 	bl	1004de7e <HAL_TIM_Base_Init>
10046a8c:	1e03      	subs	r3, r0, #0
10046a8e:	d001      	beq.n	10046a94 <TIMERS_Init+0x54>
	{
		Error_Handler();
10046a90:	f7fb fb6c 	bl	1004216c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
10046a94:	003b      	movs	r3, r7
10046a96:	2280      	movs	r2, #128	@ 0x80
10046a98:	0152      	lsls	r2, r2, #5
10046a9a:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
10046a9c:	003a      	movs	r2, r7
10046a9e:	4b0b      	ldr	r3, [pc, #44]	@ (10046acc <TIMERS_Init+0x8c>)
10046aa0:	0011      	movs	r1, r2
10046aa2:	0018      	movs	r0, r3
10046aa4:	f007 fb64 	bl	1004e170 <HAL_TIM_ConfigClockSource>
10046aa8:	1e03      	subs	r3, r0, #0
10046aaa:	d001      	beq.n	10046ab0 <TIMERS_Init+0x70>
	{
		Error_Handler();
10046aac:	f7fb fb5e 	bl	1004216c <Error_Handler>
	}
    HAL_TIM_Base_Start_IT(&htim2); // start interrupt
10046ab0:	4b06      	ldr	r3, [pc, #24]	@ (10046acc <TIMERS_Init+0x8c>)
10046ab2:	0018      	movs	r0, r3
10046ab4:	f007 fa28 	bl	1004df08 <HAL_TIM_Base_Start_IT>
    initialized = 1;
10046ab8:	4b03      	ldr	r3, [pc, #12]	@ (10046ac8 <TIMERS_Init+0x88>)
10046aba:	2201      	movs	r2, #1
10046abc:	701a      	strb	r2, [r3, #0]
	return INIT_OK;
10046abe:	2301      	movs	r3, #1
}
10046ac0:	0018      	movs	r0, r3
10046ac2:	46bd      	mov	sp, r7
10046ac4:	b004      	add	sp, #16
10046ac6:	bd80      	pop	{r7, pc}
10046ac8:	2000205c 	.word	0x2000205c
10046acc:	2000201c 	.word	0x2000201c
10046ad0:	40002000 	.word	0x40002000
10046ad4:	000003e7 	.word	0x000003e7

10046ad8 <TIMERS_GetMilliSeconds>:
 * @function: TIMERS_GetMilliSeconds()
 * @brief: accesses the free running timer's milliseconds
 * @param: none
 * @return: uint32_t FRT's milliseconds
 */
uint32_t TIMERS_GetMilliSeconds(){
10046ad8:	b580      	push	{r7, lr}
10046ada:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10046adc:	4b05      	ldr	r3, [pc, #20]	@ (10046af4 <TIMERS_GetMilliSeconds+0x1c>)
10046ade:	781b      	ldrb	r3, [r3, #0]
10046ae0:	2b00      	cmp	r3, #0
10046ae2:	d101      	bne.n	10046ae8 <TIMERS_GetMilliSeconds+0x10>
10046ae4:	2300      	movs	r3, #0
10046ae6:	e001      	b.n	10046aec <TIMERS_GetMilliSeconds+0x14>
	return milliSeconds;
10046ae8:	4b03      	ldr	r3, [pc, #12]	@ (10046af8 <TIMERS_GetMilliSeconds+0x20>)
10046aea:	681b      	ldr	r3, [r3, #0]
}
10046aec:	0018      	movs	r0, r3
10046aee:	46bd      	mov	sp, r7
10046af0:	bd80      	pop	{r7, pc}
10046af2:	46c0      	nop			@ (mov r8, r8)
10046af4:	2000205c 	.word	0x2000205c
10046af8:	20002058 	.word	0x20002058

10046afc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
10046afc:	b580      	push	{r7, lr}
10046afe:	af00      	add	r7, sp, #0

	milliSeconds++;
10046b00:	4b05      	ldr	r3, [pc, #20]	@ (10046b18 <TIM2_IRQHandler+0x1c>)
10046b02:	681b      	ldr	r3, [r3, #0]
10046b04:	1c5a      	adds	r2, r3, #1
10046b06:	4b04      	ldr	r3, [pc, #16]	@ (10046b18 <TIM2_IRQHandler+0x1c>)
10046b08:	601a      	str	r2, [r3, #0]
	HAL_TIM_IRQHandler(&htim2);
10046b0a:	4b04      	ldr	r3, [pc, #16]	@ (10046b1c <TIM2_IRQHandler+0x20>)
10046b0c:	0018      	movs	r0, r3
10046b0e:	f007 fa41 	bl	1004df94 <HAL_TIM_IRQHandler>
}
10046b12:	46c0      	nop			@ (mov r8, r8)
10046b14:	46bd      	mov	sp, r7
10046b16:	bd80      	pop	{r7, pc}
10046b18:	20002058 	.word	0x20002058
10046b1c:	2000201c 	.word	0x2000201c

10046b20 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
10046b20:	b580      	push	{r7, lr}
10046b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */
	if(hlpuart1.Instance->ISR & USART_ISR_ORE_Msk){
10046b24:	4b3c      	ldr	r3, [pc, #240]	@ (10046c18 <LPUART1_IRQHandler+0xf8>)
10046b26:	681b      	ldr	r3, [r3, #0]
10046b28:	69db      	ldr	r3, [r3, #28]
10046b2a:	2208      	movs	r2, #8
10046b2c:	4013      	ands	r3, r2
10046b2e:	d003      	beq.n	10046b38 <LPUART1_IRQHandler+0x18>
			__HAL_UART_CLEAR_FLAG(&hlpuart1, UART_CLEAR_OREF);
10046b30:	4b39      	ldr	r3, [pc, #228]	@ (10046c18 <LPUART1_IRQHandler+0xf8>)
10046b32:	681b      	ldr	r3, [r3, #0]
10046b34:	2208      	movs	r2, #8
10046b36:	621a      	str	r2, [r3, #32]
	}
	if(hlpuart1.Instance->ISR & USART_ISR_RXNE_RXFNE_Msk){
10046b38:	4b37      	ldr	r3, [pc, #220]	@ (10046c18 <LPUART1_IRQHandler+0xf8>)
10046b3a:	681b      	ldr	r3, [r3, #0]
10046b3c:	69db      	ldr	r3, [r3, #28]
10046b3e:	2220      	movs	r2, #32
10046b40:	4013      	ands	r3, r2
10046b42:	d030      	beq.n	10046ba6 <LPUART1_IRQHandler+0x86>
		if(!LPUARTrx.full){
10046b44:	4b35      	ldr	r3, [pc, #212]	@ (10046c1c <LPUART1_IRQHandler+0xfc>)
10046b46:	2224      	movs	r2, #36	@ 0x24
10046b48:	5c9b      	ldrb	r3, [r3, r2]
10046b4a:	2201      	movs	r2, #1
10046b4c:	4053      	eors	r3, r2
10046b4e:	b2db      	uxtb	r3, r3
10046b50:	2b00      	cmp	r3, #0
10046b52:	d020      	beq.n	10046b96 <LPUART1_IRQHandler+0x76>
			LPUARTrx.data[LPUARTrx.head] = hlpuart1.Instance->RDR;
10046b54:	4b30      	ldr	r3, [pc, #192]	@ (10046c18 <LPUART1_IRQHandler+0xf8>)
10046b56:	681b      	ldr	r3, [r3, #0]
10046b58:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10046b5a:	4b30      	ldr	r3, [pc, #192]	@ (10046c1c <LPUART1_IRQHandler+0xfc>)
10046b5c:	8c1b      	ldrh	r3, [r3, #32]
10046b5e:	001a      	movs	r2, r3
10046b60:	b2c9      	uxtb	r1, r1
10046b62:	4b2e      	ldr	r3, [pc, #184]	@ (10046c1c <LPUART1_IRQHandler+0xfc>)
10046b64:	5499      	strb	r1, [r3, r2]
			LPUARTrx.head++;
10046b66:	4b2d      	ldr	r3, [pc, #180]	@ (10046c1c <LPUART1_IRQHandler+0xfc>)
10046b68:	8c1b      	ldrh	r3, [r3, #32]
10046b6a:	3301      	adds	r3, #1
10046b6c:	b29a      	uxth	r2, r3
10046b6e:	4b2b      	ldr	r3, [pc, #172]	@ (10046c1c <LPUART1_IRQHandler+0xfc>)
10046b70:	841a      	strh	r2, [r3, #32]
			LPUARTrx.head %= LPUARTCIRCBUFFSIZE;
10046b72:	4b2a      	ldr	r3, [pc, #168]	@ (10046c1c <LPUART1_IRQHandler+0xfc>)
10046b74:	8c1b      	ldrh	r3, [r3, #32]
10046b76:	221f      	movs	r2, #31
10046b78:	4013      	ands	r3, r2
10046b7a:	b29a      	uxth	r2, r3
10046b7c:	4b27      	ldr	r3, [pc, #156]	@ (10046c1c <LPUART1_IRQHandler+0xfc>)
10046b7e:	841a      	strh	r2, [r3, #32]
			if(LPUARTrx.tail == LPUARTrx.head){
10046b80:	4b26      	ldr	r3, [pc, #152]	@ (10046c1c <LPUART1_IRQHandler+0xfc>)
10046b82:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
10046b84:	4b25      	ldr	r3, [pc, #148]	@ (10046c1c <LPUART1_IRQHandler+0xfc>)
10046b86:	8c1b      	ldrh	r3, [r3, #32]
10046b88:	429a      	cmp	r2, r3
10046b8a:	d10c      	bne.n	10046ba6 <LPUART1_IRQHandler+0x86>
				LPUARTrx.full = true;
10046b8c:	4b23      	ldr	r3, [pc, #140]	@ (10046c1c <LPUART1_IRQHandler+0xfc>)
10046b8e:	2224      	movs	r2, #36	@ 0x24
10046b90:	2101      	movs	r1, #1
10046b92:	5499      	strb	r1, [r3, r2]
10046b94:	e007      	b.n	10046ba6 <LPUART1_IRQHandler+0x86>
			}
		} else {
			hlpuart1.Instance->RQR |= 0x08;
10046b96:	4b20      	ldr	r3, [pc, #128]	@ (10046c18 <LPUART1_IRQHandler+0xf8>)
10046b98:	681b      	ldr	r3, [r3, #0]
10046b9a:	699a      	ldr	r2, [r3, #24]
10046b9c:	4b1e      	ldr	r3, [pc, #120]	@ (10046c18 <LPUART1_IRQHandler+0xf8>)
10046b9e:	681b      	ldr	r3, [r3, #0]
10046ba0:	2108      	movs	r1, #8
10046ba2:	430a      	orrs	r2, r1
10046ba4:	619a      	str	r2, [r3, #24]
		}
	}
	if((hlpuart1.Instance->ISR & USART_ISR_TC_Msk)){
10046ba6:	4b1c      	ldr	r3, [pc, #112]	@ (10046c18 <LPUART1_IRQHandler+0xf8>)
10046ba8:	681b      	ldr	r3, [r3, #0]
10046baa:	69db      	ldr	r3, [r3, #28]
10046bac:	2240      	movs	r2, #64	@ 0x40
10046bae:	4013      	ands	r3, r2
10046bb0:	d02e      	beq.n	10046c10 <LPUART1_IRQHandler+0xf0>
		if(LPUARTtx.head != LPUARTtx.tail || LPUARTtx.full){
10046bb2:	4b1b      	ldr	r3, [pc, #108]	@ (10046c20 <LPUART1_IRQHandler+0x100>)
10046bb4:	8c1a      	ldrh	r2, [r3, #32]
10046bb6:	4b1a      	ldr	r3, [pc, #104]	@ (10046c20 <LPUART1_IRQHandler+0x100>)
10046bb8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046bba:	429a      	cmp	r2, r3
10046bbc:	d104      	bne.n	10046bc8 <LPUART1_IRQHandler+0xa8>
10046bbe:	4b18      	ldr	r3, [pc, #96]	@ (10046c20 <LPUART1_IRQHandler+0x100>)
10046bc0:	2224      	movs	r2, #36	@ 0x24
10046bc2:	5c9b      	ldrb	r3, [r3, r2]
10046bc4:	2b00      	cmp	r3, #0
10046bc6:	d01e      	beq.n	10046c06 <LPUART1_IRQHandler+0xe6>
			hlpuart1.Instance->TDR = LPUARTtx.data[LPUARTtx.tail];
10046bc8:	4b15      	ldr	r3, [pc, #84]	@ (10046c20 <LPUART1_IRQHandler+0x100>)
10046bca:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046bcc:	001a      	movs	r2, r3
10046bce:	4b14      	ldr	r3, [pc, #80]	@ (10046c20 <LPUART1_IRQHandler+0x100>)
10046bd0:	5c9a      	ldrb	r2, [r3, r2]
10046bd2:	4b11      	ldr	r3, [pc, #68]	@ (10046c18 <LPUART1_IRQHandler+0xf8>)
10046bd4:	681b      	ldr	r3, [r3, #0]
10046bd6:	629a      	str	r2, [r3, #40]	@ 0x28
			LPUARTtx.tail++;
10046bd8:	4b11      	ldr	r3, [pc, #68]	@ (10046c20 <LPUART1_IRQHandler+0x100>)
10046bda:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046bdc:	3301      	adds	r3, #1
10046bde:	b29a      	uxth	r2, r3
10046be0:	4b0f      	ldr	r3, [pc, #60]	@ (10046c20 <LPUART1_IRQHandler+0x100>)
10046be2:	845a      	strh	r2, [r3, #34]	@ 0x22
			LPUARTtx.tail %= LPUARTCIRCBUFFSIZE;
10046be4:	4b0e      	ldr	r3, [pc, #56]	@ (10046c20 <LPUART1_IRQHandler+0x100>)
10046be6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046be8:	221f      	movs	r2, #31
10046bea:	4013      	ands	r3, r2
10046bec:	b29a      	uxth	r2, r3
10046bee:	4b0c      	ldr	r3, [pc, #48]	@ (10046c20 <LPUART1_IRQHandler+0x100>)
10046bf0:	845a      	strh	r2, [r3, #34]	@ 0x22
			if(LPUARTtx.full){
10046bf2:	4b0b      	ldr	r3, [pc, #44]	@ (10046c20 <LPUART1_IRQHandler+0x100>)
10046bf4:	2224      	movs	r2, #36	@ 0x24
10046bf6:	5c9b      	ldrb	r3, [r3, r2]
10046bf8:	2b00      	cmp	r3, #0
10046bfa:	d009      	beq.n	10046c10 <LPUART1_IRQHandler+0xf0>
				LPUARTtx.full = false;
10046bfc:	4b08      	ldr	r3, [pc, #32]	@ (10046c20 <LPUART1_IRQHandler+0x100>)
10046bfe:	2224      	movs	r2, #36	@ 0x24
10046c00:	2100      	movs	r1, #0
10046c02:	5499      	strb	r1, [r3, r2]
			if(LPUARTtx.full){
10046c04:	e004      	b.n	10046c10 <LPUART1_IRQHandler+0xf0>
			}

		} else {
			__HAL_UART_CLEAR_FLAG(&hlpuart1, UART_CLEAR_TCF);
10046c06:	4b04      	ldr	r3, [pc, #16]	@ (10046c18 <LPUART1_IRQHandler+0xf8>)
10046c08:	681b      	ldr	r3, [r3, #0]
10046c0a:	2240      	movs	r2, #64	@ 0x40
10046c0c:	621a      	str	r2, [r3, #32]

	//HAL_UART_IRQHandler(&hlpuart1);
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
10046c0e:	e7ff      	b.n	10046c10 <LPUART1_IRQHandler+0xf0>
10046c10:	46c0      	nop			@ (mov r8, r8)
10046c12:	46bd      	mov	sp, r7
10046c14:	bd80      	pop	{r7, pc}
10046c16:	46c0      	nop			@ (mov r8, r8)
10046c18:	20002060 	.word	0x20002060
10046c1c:	20002574 	.word	0x20002574
10046c20:	2000254c 	.word	0x2000254c

10046c24 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
10046c24:	b580      	push	{r7, lr}
10046c26:	b082      	sub	sp, #8
10046c28:	af00      	add	r7, sp, #0
#if USEUSART == 1
	if(husart1.Instance->ISR & USART_ISR_RXNE_RXFNE_Msk){
10046c2a:	4b4b      	ldr	r3, [pc, #300]	@ (10046d58 <USART1_IRQHandler+0x134>)
10046c2c:	681b      	ldr	r3, [r3, #0]
10046c2e:	69db      	ldr	r3, [r3, #28]
10046c30:	2220      	movs	r2, #32
10046c32:	4013      	ands	r3, r2
10046c34:	d03d      	beq.n	10046cb2 <USART1_IRQHandler+0x8e>
		if(!USARTrx.full){
10046c36:	4b49      	ldr	r3, [pc, #292]	@ (10046d5c <USART1_IRQHandler+0x138>)
10046c38:	4a49      	ldr	r2, [pc, #292]	@ (10046d60 <USART1_IRQHandler+0x13c>)
10046c3a:	5c9b      	ldrb	r3, [r3, r2]
10046c3c:	2201      	movs	r2, #1
10046c3e:	4053      	eors	r3, r2
10046c40:	b2db      	uxtb	r3, r3
10046c42:	2b00      	cmp	r3, #0
10046c44:	d02b      	beq.n	10046c9e <USART1_IRQHandler+0x7a>
			USARTrx.data[USARTrx.head] = husart1.Instance->RDR;
10046c46:	4b44      	ldr	r3, [pc, #272]	@ (10046d58 <USART1_IRQHandler+0x134>)
10046c48:	681b      	ldr	r3, [r3, #0]
10046c4a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10046c4c:	4b43      	ldr	r3, [pc, #268]	@ (10046d5c <USART1_IRQHandler+0x138>)
10046c4e:	4a45      	ldr	r2, [pc, #276]	@ (10046d64 <USART1_IRQHandler+0x140>)
10046c50:	5a9b      	ldrh	r3, [r3, r2]
10046c52:	001a      	movs	r2, r3
10046c54:	b2c9      	uxtb	r1, r1
10046c56:	4b41      	ldr	r3, [pc, #260]	@ (10046d5c <USART1_IRQHandler+0x138>)
10046c58:	5499      	strb	r1, [r3, r2]
			USARTrx.head++;
10046c5a:	4b40      	ldr	r3, [pc, #256]	@ (10046d5c <USART1_IRQHandler+0x138>)
10046c5c:	4a41      	ldr	r2, [pc, #260]	@ (10046d64 <USART1_IRQHandler+0x140>)
10046c5e:	5a9b      	ldrh	r3, [r3, r2]
10046c60:	3301      	adds	r3, #1
10046c62:	b299      	uxth	r1, r3
10046c64:	4b3d      	ldr	r3, [pc, #244]	@ (10046d5c <USART1_IRQHandler+0x138>)
10046c66:	4a3f      	ldr	r2, [pc, #252]	@ (10046d64 <USART1_IRQHandler+0x140>)
10046c68:	5299      	strh	r1, [r3, r2]
			USARTrx.head %= UARTCIRCBUFFSIZE;
10046c6a:	4b3c      	ldr	r3, [pc, #240]	@ (10046d5c <USART1_IRQHandler+0x138>)
10046c6c:	4a3d      	ldr	r2, [pc, #244]	@ (10046d64 <USART1_IRQHandler+0x140>)
10046c6e:	5a9b      	ldrh	r3, [r3, r2]
10046c70:	493d      	ldr	r1, [pc, #244]	@ (10046d68 <USART1_IRQHandler+0x144>)
10046c72:	0018      	movs	r0, r3
10046c74:	f7f9 fb6a 	bl	1004034c <__aeabi_uidivmod>
10046c78:	000b      	movs	r3, r1
10046c7a:	b299      	uxth	r1, r3
10046c7c:	4b37      	ldr	r3, [pc, #220]	@ (10046d5c <USART1_IRQHandler+0x138>)
10046c7e:	4a39      	ldr	r2, [pc, #228]	@ (10046d64 <USART1_IRQHandler+0x140>)
10046c80:	5299      	strh	r1, [r3, r2]
			if(USARTrx.tail == USARTrx.head){
10046c82:	4a36      	ldr	r2, [pc, #216]	@ (10046d5c <USART1_IRQHandler+0x138>)
10046c84:	2381      	movs	r3, #129	@ 0x81
10046c86:	009b      	lsls	r3, r3, #2
10046c88:	5ad2      	ldrh	r2, [r2, r3]
10046c8a:	4b34      	ldr	r3, [pc, #208]	@ (10046d5c <USART1_IRQHandler+0x138>)
10046c8c:	4935      	ldr	r1, [pc, #212]	@ (10046d64 <USART1_IRQHandler+0x140>)
10046c8e:	5a5b      	ldrh	r3, [r3, r1]
10046c90:	429a      	cmp	r2, r3
10046c92:	d10e      	bne.n	10046cb2 <USART1_IRQHandler+0x8e>
				USARTrx.full = true;
10046c94:	4b31      	ldr	r3, [pc, #196]	@ (10046d5c <USART1_IRQHandler+0x138>)
10046c96:	4a32      	ldr	r2, [pc, #200]	@ (10046d60 <USART1_IRQHandler+0x13c>)
10046c98:	2101      	movs	r1, #1
10046c9a:	5499      	strb	r1, [r3, r2]
10046c9c:	e009      	b.n	10046cb2 <USART1_IRQHandler+0x8e>
			}
		} else {
			uint8_t discard = husart1.Instance->RDR;
10046c9e:	4b2e      	ldr	r3, [pc, #184]	@ (10046d58 <USART1_IRQHandler+0x134>)
10046ca0:	681b      	ldr	r3, [r3, #0]
10046ca2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10046ca4:	1dfb      	adds	r3, r7, #7
10046ca6:	701a      	strb	r2, [r3, #0]
			discard++;
10046ca8:	1dfb      	adds	r3, r7, #7
10046caa:	781a      	ldrb	r2, [r3, #0]
10046cac:	1dfb      	adds	r3, r7, #7
10046cae:	3201      	adds	r2, #1
10046cb0:	701a      	strb	r2, [r3, #0]
		}
	}
	if((husart1.Instance->ISR & USART_ISR_TC_Msk)){
10046cb2:	4b29      	ldr	r3, [pc, #164]	@ (10046d58 <USART1_IRQHandler+0x134>)
10046cb4:	681b      	ldr	r3, [r3, #0]
10046cb6:	69db      	ldr	r3, [r3, #28]
10046cb8:	2240      	movs	r2, #64	@ 0x40
10046cba:	4013      	ands	r3, r2
10046cbc:	d043      	beq.n	10046d46 <USART1_IRQHandler+0x122>
		if(USARTtx.head != USARTtx.tail || USARTtx.full){
10046cbe:	4b2b      	ldr	r3, [pc, #172]	@ (10046d6c <USART1_IRQHandler+0x148>)
10046cc0:	4a28      	ldr	r2, [pc, #160]	@ (10046d64 <USART1_IRQHandler+0x140>)
10046cc2:	5a9a      	ldrh	r2, [r3, r2]
10046cc4:	4929      	ldr	r1, [pc, #164]	@ (10046d6c <USART1_IRQHandler+0x148>)
10046cc6:	2381      	movs	r3, #129	@ 0x81
10046cc8:	009b      	lsls	r3, r3, #2
10046cca:	5acb      	ldrh	r3, [r1, r3]
10046ccc:	429a      	cmp	r2, r3
10046cce:	d104      	bne.n	10046cda <USART1_IRQHandler+0xb6>
10046cd0:	4b26      	ldr	r3, [pc, #152]	@ (10046d6c <USART1_IRQHandler+0x148>)
10046cd2:	4a23      	ldr	r2, [pc, #140]	@ (10046d60 <USART1_IRQHandler+0x13c>)
10046cd4:	5c9b      	ldrb	r3, [r3, r2]
10046cd6:	2b00      	cmp	r3, #0
10046cd8:	d02e      	beq.n	10046d38 <USART1_IRQHandler+0x114>
			I2CUARTtoUSART(1);//delays because a transmission follows immediately, should be rare as it was already initialized before the interrupt
10046cda:	2001      	movs	r0, #1
10046cdc:	f7fe f950 	bl	10044f80 <I2CUARTtoUSART>
			husart1.Instance->TDR = USARTtx.data[USARTtx.tail];
10046ce0:	4a22      	ldr	r2, [pc, #136]	@ (10046d6c <USART1_IRQHandler+0x148>)
10046ce2:	2381      	movs	r3, #129	@ 0x81
10046ce4:	009b      	lsls	r3, r3, #2
10046ce6:	5ad3      	ldrh	r3, [r2, r3]
10046ce8:	001a      	movs	r2, r3
10046cea:	4b20      	ldr	r3, [pc, #128]	@ (10046d6c <USART1_IRQHandler+0x148>)
10046cec:	5c9a      	ldrb	r2, [r3, r2]
10046cee:	4b1a      	ldr	r3, [pc, #104]	@ (10046d58 <USART1_IRQHandler+0x134>)
10046cf0:	681b      	ldr	r3, [r3, #0]
10046cf2:	629a      	str	r2, [r3, #40]	@ 0x28
			USARTtx.tail++;
10046cf4:	4a1d      	ldr	r2, [pc, #116]	@ (10046d6c <USART1_IRQHandler+0x148>)
10046cf6:	2381      	movs	r3, #129	@ 0x81
10046cf8:	009b      	lsls	r3, r3, #2
10046cfa:	5ad3      	ldrh	r3, [r2, r3]
10046cfc:	3301      	adds	r3, #1
10046cfe:	b299      	uxth	r1, r3
10046d00:	4a1a      	ldr	r2, [pc, #104]	@ (10046d6c <USART1_IRQHandler+0x148>)
10046d02:	2381      	movs	r3, #129	@ 0x81
10046d04:	009b      	lsls	r3, r3, #2
10046d06:	52d1      	strh	r1, [r2, r3]
			USARTtx.tail %= UARTCIRCBUFFSIZE;
10046d08:	4a18      	ldr	r2, [pc, #96]	@ (10046d6c <USART1_IRQHandler+0x148>)
10046d0a:	2381      	movs	r3, #129	@ 0x81
10046d0c:	009b      	lsls	r3, r3, #2
10046d0e:	5ad3      	ldrh	r3, [r2, r3]
10046d10:	4915      	ldr	r1, [pc, #84]	@ (10046d68 <USART1_IRQHandler+0x144>)
10046d12:	0018      	movs	r0, r3
10046d14:	f7f9 fb1a 	bl	1004034c <__aeabi_uidivmod>
10046d18:	000b      	movs	r3, r1
10046d1a:	b299      	uxth	r1, r3
10046d1c:	4a13      	ldr	r2, [pc, #76]	@ (10046d6c <USART1_IRQHandler+0x148>)
10046d1e:	2381      	movs	r3, #129	@ 0x81
10046d20:	009b      	lsls	r3, r3, #2
10046d22:	52d1      	strh	r1, [r2, r3]
			if(USARTtx.full){
10046d24:	4b11      	ldr	r3, [pc, #68]	@ (10046d6c <USART1_IRQHandler+0x148>)
10046d26:	4a0e      	ldr	r2, [pc, #56]	@ (10046d60 <USART1_IRQHandler+0x13c>)
10046d28:	5c9b      	ldrb	r3, [r3, r2]
10046d2a:	2b00      	cmp	r3, #0
10046d2c:	d00b      	beq.n	10046d46 <USART1_IRQHandler+0x122>
				USARTtx.full = false;
10046d2e:	4b0f      	ldr	r3, [pc, #60]	@ (10046d6c <USART1_IRQHandler+0x148>)
10046d30:	4a0b      	ldr	r2, [pc, #44]	@ (10046d60 <USART1_IRQHandler+0x13c>)
10046d32:	2100      	movs	r1, #0
10046d34:	5499      	strb	r1, [r3, r2]
			if(USARTtx.full){
10046d36:	e006      	b.n	10046d46 <USART1_IRQHandler+0x122>
			}

		} else {
			__HAL_USART_CLEAR_FLAG(&husart1, UART_CLEAR_TCF);
10046d38:	4b07      	ldr	r3, [pc, #28]	@ (10046d58 <USART1_IRQHandler+0x134>)
10046d3a:	681b      	ldr	r3, [r3, #0]
10046d3c:	2240      	movs	r2, #64	@ 0x40
10046d3e:	621a      	str	r2, [r3, #32]
			I2CUARTtoI2C(1);//after transmission is complete default to I2C, no delay
10046d40:	2001      	movs	r0, #1
10046d42:	f7fe f8cb 	bl	10044edc <I2CUARTtoI2C>
		}
	}
#endif
	HAL_USART_IRQHandler(&husart1);
10046d46:	4b04      	ldr	r3, [pc, #16]	@ (10046d58 <USART1_IRQHandler+0x134>)
10046d48:	0018      	movs	r0, r3
10046d4a:	f008 fa7f 	bl	1004f24c <HAL_USART_IRQHandler>

}
10046d4e:	46c0      	nop			@ (mov r8, r8)
10046d50:	46bd      	mov	sp, r7
10046d52:	b002      	add	sp, #8
10046d54:	bd80      	pop	{r7, pc}
10046d56:	46c0      	nop			@ (mov r8, r8)
10046d58:	20002b6c 	.word	0x20002b6c
10046d5c:	20002344 	.word	0x20002344
10046d60:	00000206 	.word	0x00000206
10046d64:	00000202 	.word	0x00000202
10046d68:	00000201 	.word	0x00000201
10046d6c:	2000213c 	.word	0x2000213c

10046d70 <UARTs_Init>:
 * @function: UARTs_Init()
 * @brief: initialize the lpuart module
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int UARTs_Init(void){
10046d70:	b580      	push	{r7, lr}
10046d72:	af00      	add	r7, sp, #0

	if(initialized == 1){ return 0;}
10046d74:	4b5e      	ldr	r3, [pc, #376]	@ (10046ef0 <UARTs_Init+0x180>)
10046d76:	781b      	ldrb	r3, [r3, #0]
10046d78:	2b01      	cmp	r3, #1
10046d7a:	d101      	bne.n	10046d80 <UARTs_Init+0x10>
10046d7c:	2300      	movs	r3, #0
10046d7e:	e0b4      	b.n	10046eea <UARTs_Init+0x17a>
	TIMERS_Init();
10046d80:	f7ff fe5e 	bl	10046a40 <TIMERS_Init>
	initialized = 1;
10046d84:	4b5a      	ldr	r3, [pc, #360]	@ (10046ef0 <UARTs_Init+0x180>)
10046d86:	2201      	movs	r2, #1
10046d88:	701a      	strb	r2, [r3, #0]
	hlpuart1.Instance = LPUART1;
10046d8a:	4b5a      	ldr	r3, [pc, #360]	@ (10046ef4 <UARTs_Init+0x184>)
10046d8c:	4a5a      	ldr	r2, [pc, #360]	@ (10046ef8 <UARTs_Init+0x188>)
10046d8e:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 9600;
10046d90:	4b58      	ldr	r3, [pc, #352]	@ (10046ef4 <UARTs_Init+0x184>)
10046d92:	2296      	movs	r2, #150	@ 0x96
10046d94:	0192      	lsls	r2, r2, #6
10046d96:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
10046d98:	4b56      	ldr	r3, [pc, #344]	@ (10046ef4 <UARTs_Init+0x184>)
10046d9a:	2200      	movs	r2, #0
10046d9c:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
10046d9e:	4b55      	ldr	r3, [pc, #340]	@ (10046ef4 <UARTs_Init+0x184>)
10046da0:	2200      	movs	r2, #0
10046da2:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
10046da4:	4b53      	ldr	r3, [pc, #332]	@ (10046ef4 <UARTs_Init+0x184>)
10046da6:	2200      	movs	r2, #0
10046da8:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
10046daa:	4b52      	ldr	r3, [pc, #328]	@ (10046ef4 <UARTs_Init+0x184>)
10046dac:	220c      	movs	r2, #12
10046dae:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
10046db0:	4b50      	ldr	r3, [pc, #320]	@ (10046ef4 <UARTs_Init+0x184>)
10046db2:	2200      	movs	r2, #0
10046db4:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10046db6:	4b4f      	ldr	r3, [pc, #316]	@ (10046ef4 <UARTs_Init+0x184>)
10046db8:	2200      	movs	r2, #0
10046dba:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
10046dbc:	4b4d      	ldr	r3, [pc, #308]	@ (10046ef4 <UARTs_Init+0x184>)
10046dbe:	2200      	movs	r2, #0
10046dc0:	625a      	str	r2, [r3, #36]	@ 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
10046dc2:	4b4c      	ldr	r3, [pc, #304]	@ (10046ef4 <UARTs_Init+0x184>)
10046dc4:	2200      	movs	r2, #0
10046dc6:	629a      	str	r2, [r3, #40]	@ 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
10046dc8:	4b4a      	ldr	r3, [pc, #296]	@ (10046ef4 <UARTs_Init+0x184>)
10046dca:	2200      	movs	r2, #0
10046dcc:	665a      	str	r2, [r3, #100]	@ 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
10046dce:	4b49      	ldr	r3, [pc, #292]	@ (10046ef4 <UARTs_Init+0x184>)
10046dd0:	0018      	movs	r0, r3
10046dd2:	f007 fbb7 	bl	1004e544 <HAL_UART_Init>
10046dd6:	1e03      	subs	r3, r0, #0
10046dd8:	d001      	beq.n	10046dde <UARTs_Init+0x6e>
	{
		Error_Handler();
10046dda:	f7fb f9c7 	bl	1004216c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
10046dde:	4b45      	ldr	r3, [pc, #276]	@ (10046ef4 <UARTs_Init+0x184>)
10046de0:	2100      	movs	r1, #0
10046de2:	0018      	movs	r0, r3
10046de4:	f008 f953 	bl	1004f08e <HAL_UARTEx_SetTxFifoThreshold>
10046de8:	1e03      	subs	r3, r0, #0
10046dea:	d001      	beq.n	10046df0 <UARTs_Init+0x80>
	{
		Error_Handler();
10046dec:	f7fb f9be 	bl	1004216c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
10046df0:	4b40      	ldr	r3, [pc, #256]	@ (10046ef4 <UARTs_Init+0x184>)
10046df2:	2100      	movs	r1, #0
10046df4:	0018      	movs	r0, r3
10046df6:	f008 f989 	bl	1004f10c <HAL_UARTEx_SetRxFifoThreshold>
10046dfa:	1e03      	subs	r3, r0, #0
10046dfc:	d001      	beq.n	10046e02 <UARTs_Init+0x92>
	{
		Error_Handler();
10046dfe:	f7fb f9b5 	bl	1004216c <Error_Handler>
	}
	hlpuart1.Instance->CR2 |= 0x8000;//swap the RX and TX pins
10046e02:	4b3c      	ldr	r3, [pc, #240]	@ (10046ef4 <UARTs_Init+0x184>)
10046e04:	681b      	ldr	r3, [r3, #0]
10046e06:	685a      	ldr	r2, [r3, #4]
10046e08:	4b3a      	ldr	r3, [pc, #232]	@ (10046ef4 <UARTs_Init+0x184>)
10046e0a:	681b      	ldr	r3, [r3, #0]
10046e0c:	2180      	movs	r1, #128	@ 0x80
10046e0e:	0209      	lsls	r1, r1, #8
10046e10:	430a      	orrs	r2, r1
10046e12:	605a      	str	r2, [r3, #4]

	HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
10046e14:	2200      	movs	r2, #0
10046e16:	2100      	movs	r1, #0
10046e18:	2009      	movs	r0, #9
10046e1a:	f001 fbfd 	bl	10048618 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(LPUART1_IRQn);
10046e1e:	2009      	movs	r0, #9
10046e20:	f001 fc0f 	bl	10048642 <HAL_NVIC_EnableIRQ>

	LPUARTtx.tail = 0;
10046e24:	4b35      	ldr	r3, [pc, #212]	@ (10046efc <UARTs_Init+0x18c>)
10046e26:	2200      	movs	r2, #0
10046e28:	845a      	strh	r2, [r3, #34]	@ 0x22
	LPUARTtx.head = 0;
10046e2a:	4b34      	ldr	r3, [pc, #208]	@ (10046efc <UARTs_Init+0x18c>)
10046e2c:	2200      	movs	r2, #0
10046e2e:	841a      	strh	r2, [r3, #32]
	LPUARTtx.full = false;
10046e30:	4b32      	ldr	r3, [pc, #200]	@ (10046efc <UARTs_Init+0x18c>)
10046e32:	2224      	movs	r2, #36	@ 0x24
10046e34:	2100      	movs	r1, #0
10046e36:	5499      	strb	r1, [r3, r2]

	LPUARTrx.tail = 0;
10046e38:	4b31      	ldr	r3, [pc, #196]	@ (10046f00 <UARTs_Init+0x190>)
10046e3a:	2200      	movs	r2, #0
10046e3c:	845a      	strh	r2, [r3, #34]	@ 0x22
	LPUARTrx.head = 0;
10046e3e:	4b30      	ldr	r3, [pc, #192]	@ (10046f00 <UARTs_Init+0x190>)
10046e40:	2200      	movs	r2, #0
10046e42:	841a      	strh	r2, [r3, #32]
	LPUARTrx.full = false;
10046e44:	4b2e      	ldr	r3, [pc, #184]	@ (10046f00 <UARTs_Init+0x190>)
10046e46:	2224      	movs	r2, #36	@ 0x24
10046e48:	2100      	movs	r1, #0
10046e4a:	5499      	strb	r1, [r3, r2]
	hlpuart1.Instance->CR1 |= (USART_CR1_RXNEIE_RXFNEIE_Msk | USART_CR1_TCIE_Msk);
10046e4c:	4b29      	ldr	r3, [pc, #164]	@ (10046ef4 <UARTs_Init+0x184>)
10046e4e:	681b      	ldr	r3, [r3, #0]
10046e50:	681a      	ldr	r2, [r3, #0]
10046e52:	4b28      	ldr	r3, [pc, #160]	@ (10046ef4 <UARTs_Init+0x184>)
10046e54:	681b      	ldr	r3, [r3, #0]
10046e56:	2160      	movs	r1, #96	@ 0x60
10046e58:	430a      	orrs	r2, r1
10046e5a:	601a      	str	r2, [r3, #0]

#if USEUSART == 1
	husart1.Instance = USART1;
10046e5c:	4b29      	ldr	r3, [pc, #164]	@ (10046f04 <UARTs_Init+0x194>)
10046e5e:	4a2a      	ldr	r2, [pc, #168]	@ (10046f08 <UARTs_Init+0x198>)
10046e60:	601a      	str	r2, [r3, #0]
//	if (HAL_USART_Init(&husart1) != HAL_OK)
//	{
//	return INIT_ERROR;
//	}

	BspCOMInit.BaudRate   = 9600;
10046e62:	4b2a      	ldr	r3, [pc, #168]	@ (10046f0c <UARTs_Init+0x19c>)
10046e64:	2296      	movs	r2, #150	@ 0x96
10046e66:	0192      	lsls	r2, r2, #6
10046e68:	601a      	str	r2, [r3, #0]
	BspCOMInit.WordLength = COM_WORDLENGTH_8B;
10046e6a:	4b28      	ldr	r3, [pc, #160]	@ (10046f0c <UARTs_Init+0x19c>)
10046e6c:	2200      	movs	r2, #0
10046e6e:	605a      	str	r2, [r3, #4]
	BspCOMInit.StopBits   = COM_STOPBITS_1;
10046e70:	4b26      	ldr	r3, [pc, #152]	@ (10046f0c <UARTs_Init+0x19c>)
10046e72:	2200      	movs	r2, #0
10046e74:	811a      	strh	r2, [r3, #8]
	BspCOMInit.Parity     = COM_PARITY_NONE;
10046e76:	4b25      	ldr	r3, [pc, #148]	@ (10046f0c <UARTs_Init+0x19c>)
10046e78:	2200      	movs	r2, #0
10046e7a:	815a      	strh	r2, [r3, #10]
	BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
10046e7c:	4b23      	ldr	r3, [pc, #140]	@ (10046f0c <UARTs_Init+0x19c>)
10046e7e:	2200      	movs	r2, #0
10046e80:	819a      	strh	r2, [r3, #12]
	if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
10046e82:	4b22      	ldr	r3, [pc, #136]	@ (10046f0c <UARTs_Init+0x19c>)
10046e84:	0019      	movs	r1, r3
10046e86:	2000      	movs	r0, #0
10046e88:	f001 f92a 	bl	100480e0 <BSP_COM_Init>
10046e8c:	1e03      	subs	r3, r0, #0
10046e8e:	d001      	beq.n	10046e94 <UARTs_Init+0x124>
	{
		Error_Handler();
10046e90:	f7fb f96c 	bl	1004216c <Error_Handler>
//	}
//	if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
//	{
//		Error_Handler();
//	}
	HAL_NVIC_SetPriority(USART1_IRQn, 2, 1);
10046e94:	2201      	movs	r2, #1
10046e96:	2102      	movs	r1, #2
10046e98:	2008      	movs	r0, #8
10046e9a:	f001 fbbd 	bl	10048618 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
10046e9e:	2008      	movs	r0, #8
10046ea0:	f001 fbcf 	bl	10048642 <HAL_NVIC_EnableIRQ>
	husart1.Instance->CR1 |= (USART_CR1_RXNEIE_RXFNEIE_Msk | USART_CR1_TCIE_Msk);
10046ea4:	4b17      	ldr	r3, [pc, #92]	@ (10046f04 <UARTs_Init+0x194>)
10046ea6:	681b      	ldr	r3, [r3, #0]
10046ea8:	681a      	ldr	r2, [r3, #0]
10046eaa:	4b16      	ldr	r3, [pc, #88]	@ (10046f04 <UARTs_Init+0x194>)
10046eac:	681b      	ldr	r3, [r3, #0]
10046eae:	2160      	movs	r1, #96	@ 0x60
10046eb0:	430a      	orrs	r2, r1
10046eb2:	601a      	str	r2, [r3, #0]

	USARTtx.tail = 0;
10046eb4:	4a16      	ldr	r2, [pc, #88]	@ (10046f10 <UARTs_Init+0x1a0>)
10046eb6:	2381      	movs	r3, #129	@ 0x81
10046eb8:	009b      	lsls	r3, r3, #2
10046eba:	2100      	movs	r1, #0
10046ebc:	52d1      	strh	r1, [r2, r3]
	USARTtx.head = 0;
10046ebe:	4b14      	ldr	r3, [pc, #80]	@ (10046f10 <UARTs_Init+0x1a0>)
10046ec0:	4a14      	ldr	r2, [pc, #80]	@ (10046f14 <UARTs_Init+0x1a4>)
10046ec2:	2100      	movs	r1, #0
10046ec4:	5299      	strh	r1, [r3, r2]
	USARTtx.full = false;
10046ec6:	4b12      	ldr	r3, [pc, #72]	@ (10046f10 <UARTs_Init+0x1a0>)
10046ec8:	4a13      	ldr	r2, [pc, #76]	@ (10046f18 <UARTs_Init+0x1a8>)
10046eca:	2100      	movs	r1, #0
10046ecc:	5499      	strb	r1, [r3, r2]

	USARTrx.tail = 0;
10046ece:	4a13      	ldr	r2, [pc, #76]	@ (10046f1c <UARTs_Init+0x1ac>)
10046ed0:	2381      	movs	r3, #129	@ 0x81
10046ed2:	009b      	lsls	r3, r3, #2
10046ed4:	2100      	movs	r1, #0
10046ed6:	52d1      	strh	r1, [r2, r3]
	USARTrx.head = 0;
10046ed8:	4b10      	ldr	r3, [pc, #64]	@ (10046f1c <UARTs_Init+0x1ac>)
10046eda:	4a0e      	ldr	r2, [pc, #56]	@ (10046f14 <UARTs_Init+0x1a4>)
10046edc:	2100      	movs	r1, #0
10046ede:	5299      	strh	r1, [r3, r2]
	USARTrx.full = false;
10046ee0:	4b0e      	ldr	r3, [pc, #56]	@ (10046f1c <UARTs_Init+0x1ac>)
10046ee2:	4a0d      	ldr	r2, [pc, #52]	@ (10046f18 <UARTs_Init+0x1a8>)
10046ee4:	2100      	movs	r1, #0
10046ee6:	5499      	strb	r1, [r3, r2]
#endif
//	__HAL_USART_ENABLE_IT(&husart1, UART_IT_TXE);
//	__HAL_USART_ENABLE_IT(&husart1, UART_IT_RXNE);
	return 0;//not INIT_OK to have compatibility with the BLE trace function calls
10046ee8:	2300      	movs	r3, #0
}
10046eea:	0018      	movs	r0, r3
10046eec:	46bd      	mov	sp, r7
10046eee:	bd80      	pop	{r7, pc}
10046ef0:	2000259a 	.word	0x2000259a
10046ef4:	20002060 	.word	0x20002060
10046ef8:	41005000 	.word	0x41005000
10046efc:	2000254c 	.word	0x2000254c
10046f00:	20002574 	.word	0x20002574
10046f04:	20002b6c 	.word	0x20002b6c
10046f08:	41004000 	.word	0x41004000
10046f0c:	2000212c 	.word	0x2000212c
10046f10:	2000213c 	.word	0x2000213c
10046f14:	00000202 	.word	0x00000202
10046f18:	00000206 	.word	0x00000206
10046f1c:	20002344 	.word	0x20002344

10046f20 <LPUART_ReadRx>:
 * @function: UART_ReadRx()
 * @brief: reads one received byte from the lpuart
 * @param: none
 * @return: the character received, is 0x00 if no character to read
 */
char LPUART_ReadRx(void){
10046f20:	b580      	push	{r7, lr}
10046f22:	b082      	sub	sp, #8
10046f24:	af00      	add	r7, sp, #0
	if(LPUARTrx.head != LPUARTrx.tail || LPUARTrx.full){
10046f26:	4b13      	ldr	r3, [pc, #76]	@ (10046f74 <LPUART_ReadRx+0x54>)
10046f28:	8c1a      	ldrh	r2, [r3, #32]
10046f2a:	4b12      	ldr	r3, [pc, #72]	@ (10046f74 <LPUART_ReadRx+0x54>)
10046f2c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046f2e:	429a      	cmp	r2, r3
10046f30:	d104      	bne.n	10046f3c <LPUART_ReadRx+0x1c>
10046f32:	4b10      	ldr	r3, [pc, #64]	@ (10046f74 <LPUART_ReadRx+0x54>)
10046f34:	2224      	movs	r2, #36	@ 0x24
10046f36:	5c9b      	ldrb	r3, [r3, r2]
10046f38:	2b00      	cmp	r3, #0
10046f3a:	d016      	beq.n	10046f6a <LPUART_ReadRx+0x4a>
		char data = LPUARTrx.data[LPUARTrx.tail];
10046f3c:	4b0d      	ldr	r3, [pc, #52]	@ (10046f74 <LPUART_ReadRx+0x54>)
10046f3e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046f40:	0019      	movs	r1, r3
10046f42:	1dfb      	adds	r3, r7, #7
10046f44:	4a0b      	ldr	r2, [pc, #44]	@ (10046f74 <LPUART_ReadRx+0x54>)
10046f46:	5c52      	ldrb	r2, [r2, r1]
10046f48:	701a      	strb	r2, [r3, #0]
		LPUARTrx.tail++;
10046f4a:	4b0a      	ldr	r3, [pc, #40]	@ (10046f74 <LPUART_ReadRx+0x54>)
10046f4c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046f4e:	3301      	adds	r3, #1
10046f50:	b29a      	uxth	r2, r3
10046f52:	4b08      	ldr	r3, [pc, #32]	@ (10046f74 <LPUART_ReadRx+0x54>)
10046f54:	845a      	strh	r2, [r3, #34]	@ 0x22
		LPUARTrx.tail %= LPUARTCIRCBUFFSIZE;
10046f56:	4b07      	ldr	r3, [pc, #28]	@ (10046f74 <LPUART_ReadRx+0x54>)
10046f58:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046f5a:	221f      	movs	r2, #31
10046f5c:	4013      	ands	r3, r2
10046f5e:	b29a      	uxth	r2, r3
10046f60:	4b04      	ldr	r3, [pc, #16]	@ (10046f74 <LPUART_ReadRx+0x54>)
10046f62:	845a      	strh	r2, [r3, #34]	@ 0x22
		return data;
10046f64:	1dfb      	adds	r3, r7, #7
10046f66:	781b      	ldrb	r3, [r3, #0]
10046f68:	e000      	b.n	10046f6c <LPUART_ReadRx+0x4c>
	} else {
		return UARTFAILED;
10046f6a:	2325      	movs	r3, #37	@ 0x25
	}

}
10046f6c:	0018      	movs	r0, r3
10046f6e:	46bd      	mov	sp, r7
10046f70:	b002      	add	sp, #8
10046f72:	bd80      	pop	{r7, pc}
10046f74:	20002574 	.word	0x20002574

10046f78 <LPUART_WriteTx>:
 * @function: UART_WriteTx()
 * @brief: sends one byte through the lpuart
 * @param: none
 * @return: none
 */
char LPUART_WriteTx(char input){
10046f78:	b580      	push	{r7, lr}
10046f7a:	b082      	sub	sp, #8
10046f7c:	af00      	add	r7, sp, #0
10046f7e:	0002      	movs	r2, r0
10046f80:	1dfb      	adds	r3, r7, #7
10046f82:	701a      	strb	r2, [r3, #0]
	if(!LPUARTtx.full){
10046f84:	4b1f      	ldr	r3, [pc, #124]	@ (10047004 <LPUART_WriteTx+0x8c>)
10046f86:	2224      	movs	r2, #36	@ 0x24
10046f88:	5c9b      	ldrb	r3, [r3, r2]
10046f8a:	2201      	movs	r2, #1
10046f8c:	4053      	eors	r3, r2
10046f8e:	b2db      	uxtb	r3, r3
10046f90:	2b00      	cmp	r3, #0
10046f92:	d031      	beq.n	10046ff8 <LPUART_WriteTx+0x80>
		if(LPUARTtx.head == LPUARTtx.tail && (hlpuart1.Instance->ISR & USART_ISR_TXE_TXFNF_Msk)){
10046f94:	4b1b      	ldr	r3, [pc, #108]	@ (10047004 <LPUART_WriteTx+0x8c>)
10046f96:	8c1a      	ldrh	r2, [r3, #32]
10046f98:	4b1a      	ldr	r3, [pc, #104]	@ (10047004 <LPUART_WriteTx+0x8c>)
10046f9a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046f9c:	429a      	cmp	r2, r3
10046f9e:	d10b      	bne.n	10046fb8 <LPUART_WriteTx+0x40>
10046fa0:	4b19      	ldr	r3, [pc, #100]	@ (10047008 <LPUART_WriteTx+0x90>)
10046fa2:	681b      	ldr	r3, [r3, #0]
10046fa4:	69db      	ldr	r3, [r3, #28]
10046fa6:	2280      	movs	r2, #128	@ 0x80
10046fa8:	4013      	ands	r3, r2
10046faa:	d005      	beq.n	10046fb8 <LPUART_WriteTx+0x40>
			hlpuart1.Instance->TDR = input;
10046fac:	4b16      	ldr	r3, [pc, #88]	@ (10047008 <LPUART_WriteTx+0x90>)
10046fae:	681b      	ldr	r3, [r3, #0]
10046fb0:	1dfa      	adds	r2, r7, #7
10046fb2:	7812      	ldrb	r2, [r2, #0]
10046fb4:	629a      	str	r2, [r3, #40]	@ 0x28
10046fb6:	e01d      	b.n	10046ff4 <LPUART_WriteTx+0x7c>
		} else {
			LPUARTtx.data[LPUARTtx.head] = input;
10046fb8:	4b12      	ldr	r3, [pc, #72]	@ (10047004 <LPUART_WriteTx+0x8c>)
10046fba:	8c1b      	ldrh	r3, [r3, #32]
10046fbc:	0019      	movs	r1, r3
10046fbe:	4b11      	ldr	r3, [pc, #68]	@ (10047004 <LPUART_WriteTx+0x8c>)
10046fc0:	1dfa      	adds	r2, r7, #7
10046fc2:	7812      	ldrb	r2, [r2, #0]
10046fc4:	545a      	strb	r2, [r3, r1]
			LPUARTtx.head++;
10046fc6:	4b0f      	ldr	r3, [pc, #60]	@ (10047004 <LPUART_WriteTx+0x8c>)
10046fc8:	8c1b      	ldrh	r3, [r3, #32]
10046fca:	3301      	adds	r3, #1
10046fcc:	b29a      	uxth	r2, r3
10046fce:	4b0d      	ldr	r3, [pc, #52]	@ (10047004 <LPUART_WriteTx+0x8c>)
10046fd0:	841a      	strh	r2, [r3, #32]
			LPUARTtx.head %= LPUARTCIRCBUFFSIZE;
10046fd2:	4b0c      	ldr	r3, [pc, #48]	@ (10047004 <LPUART_WriteTx+0x8c>)
10046fd4:	8c1b      	ldrh	r3, [r3, #32]
10046fd6:	221f      	movs	r2, #31
10046fd8:	4013      	ands	r3, r2
10046fda:	b29a      	uxth	r2, r3
10046fdc:	4b09      	ldr	r3, [pc, #36]	@ (10047004 <LPUART_WriteTx+0x8c>)
10046fde:	841a      	strh	r2, [r3, #32]
			if(LPUARTtx.head == LPUARTtx.tail){
10046fe0:	4b08      	ldr	r3, [pc, #32]	@ (10047004 <LPUART_WriteTx+0x8c>)
10046fe2:	8c1a      	ldrh	r2, [r3, #32]
10046fe4:	4b07      	ldr	r3, [pc, #28]	@ (10047004 <LPUART_WriteTx+0x8c>)
10046fe6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046fe8:	429a      	cmp	r2, r3
10046fea:	d103      	bne.n	10046ff4 <LPUART_WriteTx+0x7c>
				LPUARTtx.full = true;
10046fec:	4b05      	ldr	r3, [pc, #20]	@ (10047004 <LPUART_WriteTx+0x8c>)
10046fee:	2224      	movs	r2, #36	@ 0x24
10046ff0:	2101      	movs	r1, #1
10046ff2:	5499      	strb	r1, [r3, r2]
			}
		}
		return UARTSUCCESS;
10046ff4:	2300      	movs	r3, #0
10046ff6:	e000      	b.n	10046ffa <LPUART_WriteTx+0x82>
	} else {
		return UARTFAILED;
10046ff8:	2325      	movs	r3, #37	@ 0x25
	}
}
10046ffa:	0018      	movs	r0, r3
10046ffc:	46bd      	mov	sp, r7
10046ffe:	b002      	add	sp, #8
10047000:	bd80      	pop	{r7, pc}
10047002:	46c0      	nop			@ (mov r8, r8)
10047004:	2000254c 	.word	0x2000254c
10047008:	20002060 	.word	0x20002060

1004700c <USART_ReadRx>:
 * @function: USART_ReadRx()
 * @brief: reads one received byte from the usart
 * @param: none
 * @return: the character received, 0x25 (NAK) if no character to read
 */
char USART_ReadRx(void){
1004700c:	b580      	push	{r7, lr}
1004700e:	b082      	sub	sp, #8
10047010:	af00      	add	r7, sp, #0
#if USEUSART == 1
	if(USARTrx.head != USARTrx.tail || USARTrx.full){
10047012:	4b1b      	ldr	r3, [pc, #108]	@ (10047080 <USART_ReadRx+0x74>)
10047014:	4a1b      	ldr	r2, [pc, #108]	@ (10047084 <USART_ReadRx+0x78>)
10047016:	5a9a      	ldrh	r2, [r3, r2]
10047018:	4919      	ldr	r1, [pc, #100]	@ (10047080 <USART_ReadRx+0x74>)
1004701a:	2381      	movs	r3, #129	@ 0x81
1004701c:	009b      	lsls	r3, r3, #2
1004701e:	5acb      	ldrh	r3, [r1, r3]
10047020:	429a      	cmp	r2, r3
10047022:	d104      	bne.n	1004702e <USART_ReadRx+0x22>
10047024:	4b16      	ldr	r3, [pc, #88]	@ (10047080 <USART_ReadRx+0x74>)
10047026:	4a18      	ldr	r2, [pc, #96]	@ (10047088 <USART_ReadRx+0x7c>)
10047028:	5c9b      	ldrb	r3, [r3, r2]
1004702a:	2b00      	cmp	r3, #0
1004702c:	d023      	beq.n	10047076 <USART_ReadRx+0x6a>
		char data = USARTrx.data[USARTrx.tail];
1004702e:	4a14      	ldr	r2, [pc, #80]	@ (10047080 <USART_ReadRx+0x74>)
10047030:	2381      	movs	r3, #129	@ 0x81
10047032:	009b      	lsls	r3, r3, #2
10047034:	5ad3      	ldrh	r3, [r2, r3]
10047036:	0019      	movs	r1, r3
10047038:	1dfb      	adds	r3, r7, #7
1004703a:	4a11      	ldr	r2, [pc, #68]	@ (10047080 <USART_ReadRx+0x74>)
1004703c:	5c52      	ldrb	r2, [r2, r1]
1004703e:	701a      	strb	r2, [r3, #0]
		USARTrx.tail++;
10047040:	4a0f      	ldr	r2, [pc, #60]	@ (10047080 <USART_ReadRx+0x74>)
10047042:	2381      	movs	r3, #129	@ 0x81
10047044:	009b      	lsls	r3, r3, #2
10047046:	5ad3      	ldrh	r3, [r2, r3]
10047048:	3301      	adds	r3, #1
1004704a:	b299      	uxth	r1, r3
1004704c:	4a0c      	ldr	r2, [pc, #48]	@ (10047080 <USART_ReadRx+0x74>)
1004704e:	2381      	movs	r3, #129	@ 0x81
10047050:	009b      	lsls	r3, r3, #2
10047052:	52d1      	strh	r1, [r2, r3]
		USARTrx.tail %= UARTCIRCBUFFSIZE;
10047054:	4a0a      	ldr	r2, [pc, #40]	@ (10047080 <USART_ReadRx+0x74>)
10047056:	2381      	movs	r3, #129	@ 0x81
10047058:	009b      	lsls	r3, r3, #2
1004705a:	5ad3      	ldrh	r3, [r2, r3]
1004705c:	490b      	ldr	r1, [pc, #44]	@ (1004708c <USART_ReadRx+0x80>)
1004705e:	0018      	movs	r0, r3
10047060:	f7f9 f974 	bl	1004034c <__aeabi_uidivmod>
10047064:	000b      	movs	r3, r1
10047066:	b299      	uxth	r1, r3
10047068:	4a05      	ldr	r2, [pc, #20]	@ (10047080 <USART_ReadRx+0x74>)
1004706a:	2381      	movs	r3, #129	@ 0x81
1004706c:	009b      	lsls	r3, r3, #2
1004706e:	52d1      	strh	r1, [r2, r3]
		return data;
10047070:	1dfb      	adds	r3, r7, #7
10047072:	781b      	ldrb	r3, [r3, #0]
10047074:	e000      	b.n	10047078 <USART_ReadRx+0x6c>
	} else {
		return UARTFAILED;
10047076:	2325      	movs	r3, #37	@ 0x25
	}
#else
	return UARTFAILED;
#endif
}
10047078:	0018      	movs	r0, r3
1004707a:	46bd      	mov	sp, r7
1004707c:	b002      	add	sp, #8
1004707e:	bd80      	pop	{r7, pc}
10047080:	20002344 	.word	0x20002344
10047084:	00000202 	.word	0x00000202
10047088:	00000206 	.word	0x00000206
1004708c:	00000201 	.word	0x00000201

10047090 <USART_WriteTx>:
 * @function: USART_WriteTx()
 * @brief: sends one byte through the usart
 * @param: input, character to be sent
 * @return: status, 0x00 if success,  0x25 (NAK) if failed,
 */
char USART_WriteTx(char input){
10047090:	b580      	push	{r7, lr}
10047092:	b082      	sub	sp, #8
10047094:	af00      	add	r7, sp, #0
10047096:	0002      	movs	r2, r0
10047098:	1dfb      	adds	r3, r7, #7
1004709a:	701a      	strb	r2, [r3, #0]
	if (APP_BLE_Get_Server_Connection_Status() == APP_BLE_CONNECTED_SERVER){
1004709c:	f00b fd30 	bl	10052b00 <APP_BLE_Get_Server_Connection_Status>
100470a0:	0003      	movs	r3, r0
100470a2:	2b02      	cmp	r3, #2
100470a4:	d104      	bne.n	100470b0 <USART_WriteTx+0x20>
		BLUETOOTH_WriteBuffer(input);
100470a6:	1dfb      	adds	r3, r7, #7
100470a8:	781b      	ldrb	r3, [r3, #0]
100470aa:	0018      	movs	r0, r3
100470ac:	f7fa ff1c 	bl	10041ee8 <BLUETOOTH_WriteBuffer>
	}
#if USEUSART == 1
	if(!USARTtx.full){
100470b0:	4b2b      	ldr	r3, [pc, #172]	@ (10047160 <USART_WriteTx+0xd0>)
100470b2:	4a2c      	ldr	r2, [pc, #176]	@ (10047164 <USART_WriteTx+0xd4>)
100470b4:	5c9b      	ldrb	r3, [r3, r2]
100470b6:	2201      	movs	r2, #1
100470b8:	4053      	eors	r3, r2
100470ba:	b2db      	uxtb	r3, r3
100470bc:	2b00      	cmp	r3, #0
100470be:	d04a      	beq.n	10047156 <USART_WriteTx+0xc6>
		if(USARTtx.head == USARTtx.tail && (husart1.Instance->ISR & USART_ISR_TXE_TXFNF_Msk)){
100470c0:	4b27      	ldr	r3, [pc, #156]	@ (10047160 <USART_WriteTx+0xd0>)
100470c2:	4a29      	ldr	r2, [pc, #164]	@ (10047168 <USART_WriteTx+0xd8>)
100470c4:	5a9a      	ldrh	r2, [r3, r2]
100470c6:	4926      	ldr	r1, [pc, #152]	@ (10047160 <USART_WriteTx+0xd0>)
100470c8:	2381      	movs	r3, #129	@ 0x81
100470ca:	009b      	lsls	r3, r3, #2
100470cc:	5acb      	ldrh	r3, [r1, r3]
100470ce:	429a      	cmp	r2, r3
100470d0:	d116      	bne.n	10047100 <USART_WriteTx+0x70>
100470d2:	4b26      	ldr	r3, [pc, #152]	@ (1004716c <USART_WriteTx+0xdc>)
100470d4:	681b      	ldr	r3, [r3, #0]
100470d6:	69db      	ldr	r3, [r3, #28]
100470d8:	2280      	movs	r2, #128	@ 0x80
100470da:	4013      	ands	r3, r2
100470dc:	d010      	beq.n	10047100 <USART_WriteTx+0x70>
			husart1.Instance->CR1 |= (USART_CR1_RXNEIE_RXFNEIE_Msk | USART_CR1_TCIE_Msk);
100470de:	4b23      	ldr	r3, [pc, #140]	@ (1004716c <USART_WriteTx+0xdc>)
100470e0:	681b      	ldr	r3, [r3, #0]
100470e2:	681a      	ldr	r2, [r3, #0]
100470e4:	4b21      	ldr	r3, [pc, #132]	@ (1004716c <USART_WriteTx+0xdc>)
100470e6:	681b      	ldr	r3, [r3, #0]
100470e8:	2160      	movs	r1, #96	@ 0x60
100470ea:	430a      	orrs	r2, r1
100470ec:	601a      	str	r2, [r3, #0]
			I2CUARTtoUSART(1);//delay to have pin ready for transmission by next line
100470ee:	2001      	movs	r0, #1
100470f0:	f7fd ff46 	bl	10044f80 <I2CUARTtoUSART>
			husart1.Instance->TDR = input;
100470f4:	4b1d      	ldr	r3, [pc, #116]	@ (1004716c <USART_WriteTx+0xdc>)
100470f6:	681b      	ldr	r3, [r3, #0]
100470f8:	1dfa      	adds	r2, r7, #7
100470fa:	7812      	ldrb	r2, [r2, #0]
100470fc:	629a      	str	r2, [r3, #40]	@ 0x28
100470fe:	e028      	b.n	10047152 <USART_WriteTx+0xc2>
		} else {
			USARTtx.data[USARTtx.head] = input;
10047100:	4b17      	ldr	r3, [pc, #92]	@ (10047160 <USART_WriteTx+0xd0>)
10047102:	4a19      	ldr	r2, [pc, #100]	@ (10047168 <USART_WriteTx+0xd8>)
10047104:	5a9b      	ldrh	r3, [r3, r2]
10047106:	0019      	movs	r1, r3
10047108:	4b15      	ldr	r3, [pc, #84]	@ (10047160 <USART_WriteTx+0xd0>)
1004710a:	1dfa      	adds	r2, r7, #7
1004710c:	7812      	ldrb	r2, [r2, #0]
1004710e:	545a      	strb	r2, [r3, r1]
			USARTtx.head++;
10047110:	4b13      	ldr	r3, [pc, #76]	@ (10047160 <USART_WriteTx+0xd0>)
10047112:	4a15      	ldr	r2, [pc, #84]	@ (10047168 <USART_WriteTx+0xd8>)
10047114:	5a9b      	ldrh	r3, [r3, r2]
10047116:	3301      	adds	r3, #1
10047118:	b299      	uxth	r1, r3
1004711a:	4b11      	ldr	r3, [pc, #68]	@ (10047160 <USART_WriteTx+0xd0>)
1004711c:	4a12      	ldr	r2, [pc, #72]	@ (10047168 <USART_WriteTx+0xd8>)
1004711e:	5299      	strh	r1, [r3, r2]
			USARTtx.head %= UARTCIRCBUFFSIZE;
10047120:	4b0f      	ldr	r3, [pc, #60]	@ (10047160 <USART_WriteTx+0xd0>)
10047122:	4a11      	ldr	r2, [pc, #68]	@ (10047168 <USART_WriteTx+0xd8>)
10047124:	5a9b      	ldrh	r3, [r3, r2]
10047126:	4912      	ldr	r1, [pc, #72]	@ (10047170 <USART_WriteTx+0xe0>)
10047128:	0018      	movs	r0, r3
1004712a:	f7f9 f90f 	bl	1004034c <__aeabi_uidivmod>
1004712e:	000b      	movs	r3, r1
10047130:	b299      	uxth	r1, r3
10047132:	4b0b      	ldr	r3, [pc, #44]	@ (10047160 <USART_WriteTx+0xd0>)
10047134:	4a0c      	ldr	r2, [pc, #48]	@ (10047168 <USART_WriteTx+0xd8>)
10047136:	5299      	strh	r1, [r3, r2]
			if(USARTtx.head == USARTtx.tail){
10047138:	4b09      	ldr	r3, [pc, #36]	@ (10047160 <USART_WriteTx+0xd0>)
1004713a:	4a0b      	ldr	r2, [pc, #44]	@ (10047168 <USART_WriteTx+0xd8>)
1004713c:	5a9a      	ldrh	r2, [r3, r2]
1004713e:	4908      	ldr	r1, [pc, #32]	@ (10047160 <USART_WriteTx+0xd0>)
10047140:	2381      	movs	r3, #129	@ 0x81
10047142:	009b      	lsls	r3, r3, #2
10047144:	5acb      	ldrh	r3, [r1, r3]
10047146:	429a      	cmp	r2, r3
10047148:	d103      	bne.n	10047152 <USART_WriteTx+0xc2>
				USARTtx.full = true;
1004714a:	4b05      	ldr	r3, [pc, #20]	@ (10047160 <USART_WriteTx+0xd0>)
1004714c:	4a05      	ldr	r2, [pc, #20]	@ (10047164 <USART_WriteTx+0xd4>)
1004714e:	2101      	movs	r1, #1
10047150:	5499      	strb	r1, [r3, r2]
			}
		}
		return UARTSUCCESS;
10047152:	2300      	movs	r3, #0
10047154:	e000      	b.n	10047158 <USART_WriteTx+0xc8>
	} else {
		return UARTFAILED;
10047156:	2325      	movs	r3, #37	@ 0x25
	}
#else
	return UARTFAILED;
#endif
}
10047158:	0018      	movs	r0, r3
1004715a:	46bd      	mov	sp, r7
1004715c:	b002      	add	sp, #8
1004715e:	bd80      	pop	{r7, pc}
10047160:	2000213c 	.word	0x2000213c
10047164:	00000206 	.word	0x00000206
10047168:	00000202 	.word	0x00000202
1004716c:	20002b6c 	.word	0x20002b6c
10047170:	00000201 	.word	0x00000201

10047174 <USART_TxEmpty>:
 * @function: USART_TxEmpty()
 * @brief: returns if the Tx  buffer is empty
 * @param: none
 * @return: status, 0x00 if not empty,  0x01 if empty,
 */
uint8_t USART_TxEmpty(void){
10047174:	b580      	push	{r7, lr}
10047176:	af00      	add	r7, sp, #0
#if USEUSART == 1
	return (USARTtx.head == USARTtx.tail) && !USARTtx.full;
10047178:	4b0b      	ldr	r3, [pc, #44]	@ (100471a8 <USART_TxEmpty+0x34>)
1004717a:	4a0c      	ldr	r2, [pc, #48]	@ (100471ac <USART_TxEmpty+0x38>)
1004717c:	5a9a      	ldrh	r2, [r3, r2]
1004717e:	490a      	ldr	r1, [pc, #40]	@ (100471a8 <USART_TxEmpty+0x34>)
10047180:	2381      	movs	r3, #129	@ 0x81
10047182:	009b      	lsls	r3, r3, #2
10047184:	5acb      	ldrh	r3, [r1, r3]
10047186:	429a      	cmp	r2, r3
10047188:	d109      	bne.n	1004719e <USART_TxEmpty+0x2a>
1004718a:	4b07      	ldr	r3, [pc, #28]	@ (100471a8 <USART_TxEmpty+0x34>)
1004718c:	4a08      	ldr	r2, [pc, #32]	@ (100471b0 <USART_TxEmpty+0x3c>)
1004718e:	5c9b      	ldrb	r3, [r3, r2]
10047190:	2201      	movs	r2, #1
10047192:	4053      	eors	r3, r2
10047194:	b2db      	uxtb	r3, r3
10047196:	2b00      	cmp	r3, #0
10047198:	d001      	beq.n	1004719e <USART_TxEmpty+0x2a>
1004719a:	2301      	movs	r3, #1
1004719c:	e000      	b.n	100471a0 <USART_TxEmpty+0x2c>
1004719e:	2300      	movs	r3, #0
100471a0:	b2db      	uxtb	r3, r3
#else
	return 00;
#endif
}
100471a2:	0018      	movs	r0, r3
100471a4:	46bd      	mov	sp, r7
100471a6:	bd80      	pop	{r7, pc}
100471a8:	2000213c 	.word	0x2000213c
100471ac:	00000202 	.word	0x00000202
100471b0:	00000206 	.word	0x00000206

100471b4 <MX_APPE_Init>:
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/

uint32_t MX_APPE_Init(void *p_param)
{
100471b4:	b580      	push	{r7, lr}
100471b6:	b082      	sub	sp, #8
100471b8:	af00      	add	r7, sp, #0
100471ba:	6078      	str	r0, [r7, #4]

  UNUSED(p_param);

  APP_DEBUG_SIGNAL_SET(APP_APPE_INIT);
100471bc:	2000      	movs	r0, #0
100471be:	f00d fead 	bl	10054f1c <APP_DEBUG_SIGNAL_SET>

  /* USER CODE BEGIN APPE_Init_1 */

  /* USER CODE END APPE_Init_1 */

  if (HW_RNG_Init() != HW_RNG_SUCCESS)
100471c2:	f009 f8c3 	bl	1005034c <HW_RNG_Init>
100471c6:	1e03      	subs	r3, r0, #0
100471c8:	d001      	beq.n	100471ce <MX_APPE_Init+0x1a>
  {
    Error_Handler();
100471ca:	f7fa ffcf 	bl	1004216c <Error_Handler>
  }

  /* Init the AES block */
  HW_AES_Init();
100471ce:	f008 ff61 	bl	10050094 <HW_AES_Init>
  HW_PKA_Init();
100471d2:	f009 f853 	bl	1005027c <HW_PKA_Init>
  APP_BLE_Init();
100471d6:	f00b facd 	bl	10052774 <APP_BLE_Init>
  UTIL_LPM_Init();
#endif /* CFG_LPM_SUPPORTED */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
  APP_DEBUG_SIGNAL_RESET(APP_APPE_INIT);
100471da:	2000      	movs	r0, #0
100471dc:	f00d fea8 	bl	10054f30 <APP_DEBUG_SIGNAL_RESET>
  return BLE_STATUS_SUCCESS;
100471e0:	2300      	movs	r3, #0
}
100471e2:	0018      	movs	r0, r3
100471e4:	46bd      	mov	sp, r7
100471e6:	b002      	add	sp, #8
100471e8:	bd80      	pop	{r7, pc}

100471ea <MX_APPE_Process>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void MX_APPE_Process(void)
{
100471ea:	b580      	push	{r7, lr}
100471ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
100471ee:	2301      	movs	r3, #1
100471f0:	425b      	negs	r3, r3
100471f2:	0018      	movs	r0, r3
100471f4:	f00d feac 	bl	10054f50 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
100471f8:	46c0      	nop			@ (mov r8, r8)
100471fa:	46bd      	mov	sp, r7
100471fc:	bd80      	pop	{r7, pc}

100471fe <UTIL_SEQ_PreIdle>:
void UTIL_SEQ_PreIdle( void )
{
100471fe:	b580      	push	{r7, lr}
10047200:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  /* USER CODE BEGIN UTIL_SEQ_PREIDLE */

  /* USER CODE END UTIL_SEQ_PREIDLE */
#endif /* CFG_LPM_SUPPORTED */
  return;
10047202:	46c0      	nop			@ (mov r8, r8)
}
10047204:	46bd      	mov	sp, r7
10047206:	bd80      	pop	{r7, pc}

10047208 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
10047208:	b580      	push	{r7, lr}
1004720a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_IDLE_END */

  /* USER CODE END UTIL_SEQ_IDLE_END */
  }
#endif /* CFG_LPM_SUPPORTED */
}
1004720c:	46c0      	nop			@ (mov r8, r8)
1004720e:	46bd      	mov	sp, r7
10047210:	bd80      	pop	{r7, pc}

10047212 <LL_RADIO_TIMER_GetAbsoluteTime>:
  * @brief  Get the Absolute Time of the wakeup timer (Granularity unit is 16 x slow clock period).
  * @param  WAKEUPx Radio Timer instance
  * @retval Absolute Time of Wakeup Timer
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP_TypeDef *WAKEUPx)
{
10047212:	b580      	push	{r7, lr}
10047214:	b082      	sub	sp, #8
10047216:	af00      	add	r7, sp, #0
10047218:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
1004721a:	687b      	ldr	r3, [r7, #4]
1004721c:	691b      	ldr	r3, [r3, #16]
}
1004721e:	0018      	movs	r0, r3
10047220:	46bd      	mov	sp, r7
10047222:	b002      	add	sp, #8
10047224:	bd80      	pop	{r7, pc}
	...

10047228 <LL_APB2_GRP1_EnableClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
10047228:	b580      	push	{r7, lr}
1004722a:	b084      	sub	sp, #16
1004722c:	af00      	add	r7, sp, #0
1004722e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
10047230:	4b07      	ldr	r3, [pc, #28]	@ (10047250 <LL_APB2_GRP1_EnableClock+0x28>)
10047232:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10047234:	4b06      	ldr	r3, [pc, #24]	@ (10047250 <LL_APB2_GRP1_EnableClock+0x28>)
10047236:	687a      	ldr	r2, [r7, #4]
10047238:	430a      	orrs	r2, r1
1004723a:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
1004723c:	4b04      	ldr	r3, [pc, #16]	@ (10047250 <LL_APB2_GRP1_EnableClock+0x28>)
1004723e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10047240:	687a      	ldr	r2, [r7, #4]
10047242:	4013      	ands	r3, r2
10047244:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10047246:	68fb      	ldr	r3, [r7, #12]
}
10047248:	46c0      	nop			@ (mov r8, r8)
1004724a:	46bd      	mov	sp, r7
1004724c:	b004      	add	sp, #16
1004724e:	bd80      	pop	{r7, pc}
10047250:	48400000 	.word	0x48400000

10047254 <LL_APB2_GRP1_IsEnabledClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval uint32_t
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
10047254:	b580      	push	{r7, lr}
10047256:	b082      	sub	sp, #8
10047258:	af00      	add	r7, sp, #0
1004725a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
1004725c:	4b06      	ldr	r3, [pc, #24]	@ (10047278 <LL_APB2_GRP1_IsEnabledClock+0x24>)
1004725e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10047260:	687a      	ldr	r2, [r7, #4]
10047262:	4013      	ands	r3, r2
10047264:	687a      	ldr	r2, [r7, #4]
10047266:	429a      	cmp	r2, r3
10047268:	d101      	bne.n	1004726e <LL_APB2_GRP1_IsEnabledClock+0x1a>
1004726a:	2301      	movs	r3, #1
1004726c:	e000      	b.n	10047270 <LL_APB2_GRP1_IsEnabledClock+0x1c>
1004726e:	2300      	movs	r3, #0
}
10047270:	0018      	movs	r0, r3
10047272:	46bd      	mov	sp, r7
10047274:	b002      	add	sp, #8
10047276:	bd80      	pop	{r7, pc}
10047278:	48400000 	.word	0x48400000

1004727c <LL_APB2_GRP1_ForceReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
1004727c:	b580      	push	{r7, lr}
1004727e:	b082      	sub	sp, #8
10047280:	af00      	add	r7, sp, #0
10047282:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10047284:	4b04      	ldr	r3, [pc, #16]	@ (10047298 <LL_APB2_GRP1_ForceReset+0x1c>)
10047286:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10047288:	4b03      	ldr	r3, [pc, #12]	@ (10047298 <LL_APB2_GRP1_ForceReset+0x1c>)
1004728a:	687a      	ldr	r2, [r7, #4]
1004728c:	430a      	orrs	r2, r1
1004728e:	641a      	str	r2, [r3, #64]	@ 0x40
}
10047290:	46c0      	nop			@ (mov r8, r8)
10047292:	46bd      	mov	sp, r7
10047294:	b002      	add	sp, #8
10047296:	bd80      	pop	{r7, pc}
10047298:	48400000 	.word	0x48400000

1004729c <LL_APB2_GRP1_ReleaseReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
1004729c:	b580      	push	{r7, lr}
1004729e:	b082      	sub	sp, #8
100472a0:	af00      	add	r7, sp, #0
100472a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
100472a4:	4b05      	ldr	r3, [pc, #20]	@ (100472bc <LL_APB2_GRP1_ReleaseReset+0x20>)
100472a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
100472a8:	687b      	ldr	r3, [r7, #4]
100472aa:	43d9      	mvns	r1, r3
100472ac:	4b03      	ldr	r3, [pc, #12]	@ (100472bc <LL_APB2_GRP1_ReleaseReset+0x20>)
100472ae:	400a      	ands	r2, r1
100472b0:	641a      	str	r2, [r3, #64]	@ 0x40
}
100472b2:	46c0      	nop			@ (mov r8, r8)
100472b4:	46bd      	mov	sp, r7
100472b6:	b002      	add	sp, #8
100472b8:	bd80      	pop	{r7, pc}
100472ba:	46c0      	nop			@ (mov r8, r8)
100472bc:	48400000 	.word	0x48400000

100472c0 <main>:
 * @author Caitlin Bonesio
 *
 */
#include "FLASH.h"
int main(void)
{
100472c0:	b580      	push	{r7, lr}
100472c2:	b086      	sub	sp, #24
100472c4:	af00      	add	r7, sp, #0

	//MCU Configuration--------------------------------------------------------
	if( BOARD_Init() != INIT_OK){
100472c6:	f7fa ff27 	bl	10042118 <BOARD_Init>
100472ca:	0003      	movs	r3, r0
100472cc:	2b01      	cmp	r3, #1
100472ce:	d001      	beq.n	100472d4 <main+0x14>
		BOARD_CrashHandler();
100472d0:	f7fa ff46 	bl	10042160 <BOARD_CrashHandler>
	}
    BSP_LED_Init(LED_BLUE);
100472d4:	2000      	movs	r0, #0
100472d6:	f000 fe3f 	bl	10047f58 <BSP_LED_Init>
    BSP_LED_Init(LED_RED);
100472da:	2002      	movs	r0, #2
100472dc:	f000 fe3c 	bl	10047f58 <BSP_LED_Init>

	MX_RADIO_Init();
100472e0:	f000 f89a 	bl	10047418 <MX_RADIO_Init>
	MX_RADIO_TIMER_Init();
100472e4:	f000 f8b6 	bl	10047454 <MX_RADIO_TIMER_Init>
	MX_RNG_Init();
100472e8:	f000 f8ea 	bl	100474c0 <MX_RNG_Init>
	MX_PKA_Init();
100472ec:	f000 f880 	bl	100473f0 <MX_PKA_Init>
	//Initialize BLE middleware
	MX_APPE_Init(NULL);
100472f0:	2000      	movs	r0, #0
100472f2:	f7ff ff5f 	bl	100471b4 <MX_APPE_Init>


	BLUETOOTH_BufferInit();
100472f6:	f7fa fddf 	bl	10041eb8 <BLUETOOTH_BufferInit>
	// Initialize all configured peripherals
	UARTs_Init();
100472fa:	f7ff fd39 	bl	10046d70 <UARTs_Init>
	//Initialize all modules
	for(int i = 0; i < EVENTLISTSIZE; i++){
100472fe:	2300      	movs	r3, #0
10047300:	617b      	str	r3, [r7, #20]
10047302:	e013      	b.n	1004732c <main+0x6c>
		EventQueues[i] = FIFO_Create();
10047304:	f7fd f9a4 	bl	10044650 <FIFO_Create>
10047308:	0001      	movs	r1, r0
1004730a:	4b35      	ldr	r3, [pc, #212]	@ (100473e0 <main+0x120>)
1004730c:	697a      	ldr	r2, [r7, #20]
1004730e:	0092      	lsls	r2, r2, #2
10047310:	50d1      	str	r1, [r2, r3]
		if ((*InitList[i])(EventQueues[i]) == EVENT_ERROR){
10047312:	4b34      	ldr	r3, [pc, #208]	@ (100473e4 <main+0x124>)
10047314:	697a      	ldr	r2, [r7, #20]
10047316:	0092      	lsls	r2, r2, #2
10047318:	58d3      	ldr	r3, [r2, r3]
1004731a:	4a31      	ldr	r2, [pc, #196]	@ (100473e0 <main+0x120>)
1004731c:	6979      	ldr	r1, [r7, #20]
1004731e:	0089      	lsls	r1, r1, #2
10047320:	588a      	ldr	r2, [r1, r2]
10047322:	0010      	movs	r0, r2
10047324:	4798      	blx	r3
	for(int i = 0; i < EVENTLISTSIZE; i++){
10047326:	697b      	ldr	r3, [r7, #20]
10047328:	3301      	adds	r3, #1
1004732a:	617b      	str	r3, [r7, #20]
1004732c:	697b      	ldr	r3, [r7, #20]
1004732e:	2b03      	cmp	r3, #3
10047330:	dde8      	ble.n	10047304 <main+0x44>
			return 0;//We've crashed
		}
	}
	while(1){
		//run all module event checkers
		for(int i = 0; i < EVENTLISTSIZE; i++){
10047332:	2300      	movs	r3, #0
10047334:	613b      	str	r3, [r7, #16]
10047336:	e012      	b.n	1004735e <main+0x9e>
			//collect updates from the updaters
			if (((*UpdateList[i])()).status == EVENT_ERROR){
10047338:	4b2b      	ldr	r3, [pc, #172]	@ (100473e8 <main+0x128>)
1004733a:	693a      	ldr	r2, [r7, #16]
1004733c:	0092      	lsls	r2, r2, #2
1004733e:	58d3      	ldr	r3, [r2, r3]
10047340:	4798      	blx	r3
10047342:	0003      	movs	r3, r0
10047344:	001a      	movs	r2, r3
10047346:	1d3b      	adds	r3, r7, #4
10047348:	601a      	str	r2, [r3, #0]
1004734a:	1d3b      	adds	r3, r7, #4
1004734c:	781b      	ldrb	r3, [r3, #0]
1004734e:	b25b      	sxtb	r3, r3
10047350:	3301      	adds	r3, #1
10047352:	d101      	bne.n	10047358 <main+0x98>
				BOARD_CrashHandler();//We've crashed
10047354:	f7fa ff04 	bl	10042160 <BOARD_CrashHandler>
		for(int i = 0; i < EVENTLISTSIZE; i++){
10047358:	693b      	ldr	r3, [r7, #16]
1004735a:	3301      	adds	r3, #1
1004735c:	613b      	str	r3, [r7, #16]
1004735e:	693b      	ldr	r3, [r7, #16]
10047360:	2b03      	cmp	r3, #3
10047362:	dde9      	ble.n	10047338 <main+0x78>
			}
		}
		uint8_t done = 0;
10047364:	230f      	movs	r3, #15
10047366:	18fb      	adds	r3, r7, r3
10047368:	2200      	movs	r2, #0
1004736a:	701a      	strb	r2, [r3, #0]
		while(!done){
1004736c:	e030      	b.n	100473d0 <main+0x110>
			//run all module event handlers
			done = 1;//assume we're done
1004736e:	230f      	movs	r3, #15
10047370:	18fb      	adds	r3, r7, r3
10047372:	2201      	movs	r2, #1
10047374:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < EVENTLISTSIZE; i++){
10047376:	2300      	movs	r3, #0
10047378:	60bb      	str	r3, [r7, #8]
1004737a:	e026      	b.n	100473ca <main+0x10a>
				Event_t event = FIFO_Dequeue(EventQueues[i]);
1004737c:	4b18      	ldr	r3, [pc, #96]	@ (100473e0 <main+0x120>)
1004737e:	68ba      	ldr	r2, [r7, #8]
10047380:	0092      	lsls	r2, r2, #2
10047382:	58d3      	ldr	r3, [r2, r3]
10047384:	0018      	movs	r0, r3
10047386:	f7fd f9d6 	bl	10044736 <FIFO_Dequeue>
1004738a:	0003      	movs	r3, r0
1004738c:	001a      	movs	r2, r3
1004738e:	003b      	movs	r3, r7
10047390:	601a      	str	r2, [r3, #0]
				if(FIFO_GetSize(EventQueues[i]) != 0){
10047392:	4b13      	ldr	r3, [pc, #76]	@ (100473e0 <main+0x120>)
10047394:	68ba      	ldr	r2, [r7, #8]
10047396:	0092      	lsls	r2, r2, #2
10047398:	58d3      	ldr	r3, [r2, r3]
1004739a:	0018      	movs	r0, r3
1004739c:	f7fd fa1d 	bl	100447da <FIFO_GetSize>
100473a0:	1e03      	subs	r3, r0, #0
100473a2:	d003      	beq.n	100473ac <main+0xec>
					done = 0;//if any queue is not empty, we are not done
100473a4:	230f      	movs	r3, #15
100473a6:	18fb      	adds	r3, r7, r3
100473a8:	2200      	movs	r2, #0
100473aa:	701a      	strb	r2, [r3, #0]
				}
				if(event.status != EVENT_NONE){//If there is an update
100473ac:	003b      	movs	r3, r7
100473ae:	781b      	ldrb	r3, [r3, #0]
100473b0:	b25b      	sxtb	r3, r3
100473b2:	2b00      	cmp	r3, #0
100473b4:	d006      	beq.n	100473c4 <main+0x104>
					if ((*HandlerList[i])(event) == EVENT_ERROR){//pass the updates to the handlers
100473b6:	4b0d      	ldr	r3, [pc, #52]	@ (100473ec <main+0x12c>)
100473b8:	68ba      	ldr	r2, [r7, #8]
100473ba:	0092      	lsls	r2, r2, #2
100473bc:	58d2      	ldr	r2, [r2, r3]
100473be:	003b      	movs	r3, r7
100473c0:	6818      	ldr	r0, [r3, #0]
100473c2:	4790      	blx	r2
			for(int i = 0; i < EVENTLISTSIZE; i++){
100473c4:	68bb      	ldr	r3, [r7, #8]
100473c6:	3301      	adds	r3, #1
100473c8:	60bb      	str	r3, [r7, #8]
100473ca:	68bb      	ldr	r3, [r7, #8]
100473cc:	2b03      	cmp	r3, #3
100473ce:	ddd5      	ble.n	1004737c <main+0xbc>
		while(!done){
100473d0:	230f      	movs	r3, #15
100473d2:	18fb      	adds	r3, r7, r3
100473d4:	781b      	ldrb	r3, [r3, #0]
100473d6:	2b00      	cmp	r3, #0
100473d8:	d0c9      	beq.n	1004736e <main+0xae>
					}
				}
			}
		}
		//Run Bluetooth Middleware
	    MX_APPE_Process();
100473da:	f7ff ff06 	bl	100471ea <MX_APPE_Process>
	while(1){
100473de:	e7a8      	b.n	10047332 <main+0x72>
100473e0:	2000259c 	.word	0x2000259c
100473e4:	20002bcc 	.word	0x20002bcc
100473e8:	20002bdc 	.word	0x20002bdc
100473ec:	20002bec 	.word	0x20002bec

100473f0 <MX_PKA_Init>:




static void MX_PKA_Init(void)
{
100473f0:	b580      	push	{r7, lr}
100473f2:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
100473f4:	4b06      	ldr	r3, [pc, #24]	@ (10047410 <MX_PKA_Init+0x20>)
100473f6:	4a07      	ldr	r2, [pc, #28]	@ (10047414 <MX_PKA_Init+0x24>)
100473f8:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
100473fa:	4b05      	ldr	r3, [pc, #20]	@ (10047410 <MX_PKA_Init+0x20>)
100473fc:	0018      	movs	r0, r3
100473fe:	f003 fd5f 	bl	1004aec0 <HAL_PKA_Init>
10047402:	1e03      	subs	r3, r0, #0
10047404:	d001      	beq.n	1004740a <MX_PKA_Init+0x1a>
  {
    Error_Handler();
10047406:	f7fa feb1 	bl	1004216c <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
1004740a:	46c0      	nop			@ (mov r8, r8)
1004740c:	46bd      	mov	sp, r7
1004740e:	bd80      	pop	{r7, pc}
10047410:	200025ac 	.word	0x200025ac
10047414:	48300000 	.word	0x48300000

10047418 <MX_RADIO_Init>:
  * @brief RADIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_Init(void)
{
10047418:	b580      	push	{r7, lr}
1004741a:	b082      	sub	sp, #8
1004741c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_Init 0 */
//
  /* USER CODE END RADIO_Init 0 */

  RADIO_HandleTypeDef hradio = {0};
1004741e:	2300      	movs	r3, #0
10047420:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN RADIO_Init 1 */
//
  /* USER CODE END RADIO_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10047422:	2001      	movs	r0, #1
10047424:	f7ff ff16 	bl	10047254 <LL_APB2_GRP1_IsEnabledClock>
10047428:	1e03      	subs	r3, r0, #0
1004742a:	d108      	bne.n	1004743e <MX_RADIO_Init+0x26>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
1004742c:	2001      	movs	r0, #1
1004742e:	f7ff ff25 	bl	1004727c <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10047432:	2001      	movs	r0, #1
10047434:	f7ff ff32 	bl	1004729c <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
10047438:	2001      	movs	r0, #1
1004743a:	f7ff fef5 	bl	10047228 <LL_APB2_GRP1_EnableClock>
  }
  hradio.Instance = RADIO;
1004743e:	23c0      	movs	r3, #192	@ 0xc0
10047440:	05db      	lsls	r3, r3, #23
10047442:	607b      	str	r3, [r7, #4]
  HAL_RADIO_Init(&hradio);
10047444:	1d3b      	adds	r3, r7, #4
10047446:	0018      	movs	r0, r3
10047448:	f003 ff98 	bl	1004b37c <HAL_RADIO_Init>
  /* USER CODE BEGIN RADIO_Init 2 */
//
  /* USER CODE END RADIO_Init 2 */

}
1004744c:	46c0      	nop			@ (mov r8, r8)
1004744e:	46bd      	mov	sp, r7
10047450:	b002      	add	sp, #8
10047452:	bd80      	pop	{r7, pc}

10047454 <MX_RADIO_TIMER_Init>:
  * @brief RADIO_TIMER Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_TIMER_Init(void)
{
10047454:	b580      	push	{r7, lr}
10047456:	b082      	sub	sp, #8
10047458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_TIMER_Init 0 */
//
  /* USER CODE END RADIO_TIMER_Init 0 */

  RADIO_TIMER_InitTypeDef RADIO_TIMER_InitStruct = {0};
1004745a:	003b      	movs	r3, r7
1004745c:	0018      	movs	r0, r3
1004745e:	2308      	movs	r3, #8
10047460:	001a      	movs	r2, r3
10047462:	2100      	movs	r1, #0
10047464:	f021 f96a 	bl	1006873c <memset>

  /* USER CODE BEGIN RADIO_TIMER_Init 1 */
//
  /* USER CODE END RADIO_TIMER_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10047468:	2001      	movs	r0, #1
1004746a:	f7ff fef3 	bl	10047254 <LL_APB2_GRP1_IsEnabledClock>
1004746e:	1e03      	subs	r3, r0, #0
10047470:	d108      	bne.n	10047484 <MX_RADIO_TIMER_Init+0x30>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
10047472:	2001      	movs	r0, #1
10047474:	f7ff ff02 	bl	1004727c <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10047478:	2001      	movs	r0, #1
1004747a:	f7ff ff0f 	bl	1004729c <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
1004747e:	2001      	movs	r0, #1
10047480:	f7ff fed2 	bl	10047228 <LL_APB2_GRP1_EnableClock>
  }
  /* Wait to be sure that the Radio Timer is active */
  while(LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP) < 0x10);
10047484:	46c0      	nop			@ (mov r8, r8)
10047486:	4b0c      	ldr	r3, [pc, #48]	@ (100474b8 <MX_RADIO_TIMER_Init+0x64>)
10047488:	0018      	movs	r0, r3
1004748a:	f7ff fec2 	bl	10047212 <LL_RADIO_TIMER_GetAbsoluteTime>
1004748e:	0003      	movs	r3, r0
10047490:	2b0f      	cmp	r3, #15
10047492:	d9f8      	bls.n	10047486 <MX_RADIO_TIMER_Init+0x32>
  RADIO_TIMER_InitStruct.XTAL_StartupTime = 320;
10047494:	003b      	movs	r3, r7
10047496:	22a0      	movs	r2, #160	@ 0xa0
10047498:	0052      	lsls	r2, r2, #1
1004749a:	801a      	strh	r2, [r3, #0]
  RADIO_TIMER_InitStruct.enableInitialCalibration = TRUE;
1004749c:	003b      	movs	r3, r7
1004749e:	2201      	movs	r2, #1
100474a0:	709a      	strb	r2, [r3, #2]
  RADIO_TIMER_InitStruct.periodicCalibrationInterval = 10000;
100474a2:	003b      	movs	r3, r7
100474a4:	4a05      	ldr	r2, [pc, #20]	@ (100474bc <MX_RADIO_TIMER_Init+0x68>)
100474a6:	605a      	str	r2, [r3, #4]
  HAL_RADIO_TIMER_Init(&RADIO_TIMER_InitStruct);
100474a8:	003b      	movs	r3, r7
100474aa:	0018      	movs	r0, r3
100474ac:	f004 fc8c 	bl	1004bdc8 <HAL_RADIO_TIMER_Init>
  /* USER CODE BEGIN RADIO_TIMER_Init 2 */
//
  /* USER CODE END RADIO_TIMER_Init 2 */

}
100474b0:	46c0      	nop			@ (mov r8, r8)
100474b2:	46bd      	mov	sp, r7
100474b4:	b002      	add	sp, #8
100474b6:	bd80      	pop	{r7, pc}
100474b8:	60001800 	.word	0x60001800
100474bc:	00002710 	.word	0x00002710

100474c0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
100474c0:	b580      	push	{r7, lr}
100474c2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
100474c4:	4b06      	ldr	r3, [pc, #24]	@ (100474e0 <MX_RNG_Init+0x20>)
100474c6:	4a07      	ldr	r2, [pc, #28]	@ (100474e4 <MX_RNG_Init+0x24>)
100474c8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
100474ca:	4b05      	ldr	r3, [pc, #20]	@ (100474e0 <MX_RNG_Init+0x20>)
100474cc:	0018      	movs	r0, r3
100474ce:	f006 fc9b 	bl	1004de08 <HAL_RNG_Init>
100474d2:	1e03      	subs	r3, r0, #0
100474d4:	d001      	beq.n	100474da <MX_RNG_Init+0x1a>
  {
    Error_Handler();
100474d6:	f7fa fe49 	bl	1004216c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
100474da:	46c0      	nop			@ (mov r8, r8)
100474dc:	46bd      	mov	sp, r7
100474de:	bd80      	pop	{r7, pc}
100474e0:	200025b8 	.word	0x200025b8
100474e4:	48600000 	.word	0x48600000

100474e8 <LL_AHB1_GRP1_EnableClock>:
{
100474e8:	b580      	push	{r7, lr}
100474ea:	b084      	sub	sp, #16
100474ec:	af00      	add	r7, sp, #0
100474ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
100474f0:	4b07      	ldr	r3, [pc, #28]	@ (10047510 <LL_AHB1_GRP1_EnableClock+0x28>)
100474f2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
100474f4:	4b06      	ldr	r3, [pc, #24]	@ (10047510 <LL_AHB1_GRP1_EnableClock+0x28>)
100474f6:	687a      	ldr	r2, [r7, #4]
100474f8:	430a      	orrs	r2, r1
100474fa:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
100474fc:	4b04      	ldr	r3, [pc, #16]	@ (10047510 <LL_AHB1_GRP1_EnableClock+0x28>)
100474fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10047500:	687a      	ldr	r2, [r7, #4]
10047502:	4013      	ands	r3, r2
10047504:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10047506:	68fb      	ldr	r3, [r7, #12]
}
10047508:	46c0      	nop			@ (mov r8, r8)
1004750a:	46bd      	mov	sp, r7
1004750c:	b004      	add	sp, #16
1004750e:	bd80      	pop	{r7, pc}
10047510:	48400000 	.word	0x48400000

10047514 <LL_APB0_GRP1_EnableClock>:
{
10047514:	b580      	push	{r7, lr}
10047516:	b084      	sub	sp, #16
10047518:	af00      	add	r7, sp, #0
1004751a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
1004751c:	4b07      	ldr	r3, [pc, #28]	@ (1004753c <LL_APB0_GRP1_EnableClock+0x28>)
1004751e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
10047520:	4b06      	ldr	r3, [pc, #24]	@ (1004753c <LL_APB0_GRP1_EnableClock+0x28>)
10047522:	687a      	ldr	r2, [r7, #4]
10047524:	430a      	orrs	r2, r1
10047526:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10047528:	4b04      	ldr	r3, [pc, #16]	@ (1004753c <LL_APB0_GRP1_EnableClock+0x28>)
1004752a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004752c:	687a      	ldr	r2, [r7, #4]
1004752e:	4013      	ands	r3, r2
10047530:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10047532:	68fb      	ldr	r3, [r7, #12]
}
10047534:	46c0      	nop			@ (mov r8, r8)
10047536:	46bd      	mov	sp, r7
10047538:	b004      	add	sp, #16
1004753a:	bd80      	pop	{r7, pc}
1004753c:	48400000 	.word	0x48400000

10047540 <LL_APB1_GRP1_EnableClock>:
{
10047540:	b580      	push	{r7, lr}
10047542:	b084      	sub	sp, #16
10047544:	af00      	add	r7, sp, #0
10047546:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
10047548:	4b07      	ldr	r3, [pc, #28]	@ (10047568 <LL_APB1_GRP1_EnableClock+0x28>)
1004754a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
1004754c:	4b06      	ldr	r3, [pc, #24]	@ (10047568 <LL_APB1_GRP1_EnableClock+0x28>)
1004754e:	687a      	ldr	r2, [r7, #4]
10047550:	430a      	orrs	r2, r1
10047552:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10047554:	4b04      	ldr	r3, [pc, #16]	@ (10047568 <LL_APB1_GRP1_EnableClock+0x28>)
10047556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10047558:	687a      	ldr	r2, [r7, #4]
1004755a:	4013      	ands	r3, r2
1004755c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004755e:	68fb      	ldr	r3, [r7, #12]
}
10047560:	46c0      	nop			@ (mov r8, r8)
10047562:	46bd      	mov	sp, r7
10047564:	b004      	add	sp, #16
10047566:	bd80      	pop	{r7, pc}
10047568:	48400000 	.word	0x48400000

1004756c <LL_APB2_GRP1_EnableClock>:
{
1004756c:	b580      	push	{r7, lr}
1004756e:	b084      	sub	sp, #16
10047570:	af00      	add	r7, sp, #0
10047572:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10047574:	4b07      	ldr	r3, [pc, #28]	@ (10047594 <LL_APB2_GRP1_EnableClock+0x28>)
10047576:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10047578:	4b06      	ldr	r3, [pc, #24]	@ (10047594 <LL_APB2_GRP1_EnableClock+0x28>)
1004757a:	687a      	ldr	r2, [r7, #4]
1004757c:	430a      	orrs	r2, r1
1004757e:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10047580:	4b04      	ldr	r3, [pc, #16]	@ (10047594 <LL_APB2_GRP1_EnableClock+0x28>)
10047582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10047584:	687a      	ldr	r2, [r7, #4]
10047586:	4013      	ands	r3, r2
10047588:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004758a:	68fb      	ldr	r3, [r7, #12]
}
1004758c:	46c0      	nop			@ (mov r8, r8)
1004758e:	46bd      	mov	sp, r7
10047590:	b004      	add	sp, #16
10047592:	bd80      	pop	{r7, pc}
10047594:	48400000 	.word	0x48400000

10047598 <LL_APB2_GRP1_IsEnabledClock>:
{
10047598:	b580      	push	{r7, lr}
1004759a:	b082      	sub	sp, #8
1004759c:	af00      	add	r7, sp, #0
1004759e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
100475a0:	4b06      	ldr	r3, [pc, #24]	@ (100475bc <LL_APB2_GRP1_IsEnabledClock+0x24>)
100475a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100475a4:	687a      	ldr	r2, [r7, #4]
100475a6:	4013      	ands	r3, r2
100475a8:	687a      	ldr	r2, [r7, #4]
100475aa:	429a      	cmp	r2, r3
100475ac:	d101      	bne.n	100475b2 <LL_APB2_GRP1_IsEnabledClock+0x1a>
100475ae:	2301      	movs	r3, #1
100475b0:	e000      	b.n	100475b4 <LL_APB2_GRP1_IsEnabledClock+0x1c>
100475b2:	2300      	movs	r3, #0
}
100475b4:	0018      	movs	r0, r3
100475b6:	46bd      	mov	sp, r7
100475b8:	b002      	add	sp, #8
100475ba:	bd80      	pop	{r7, pc}
100475bc:	48400000 	.word	0x48400000

100475c0 <LL_APB2_GRP1_ForceReset>:
{
100475c0:	b580      	push	{r7, lr}
100475c2:	b082      	sub	sp, #8
100475c4:	af00      	add	r7, sp, #0
100475c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
100475c8:	4b04      	ldr	r3, [pc, #16]	@ (100475dc <LL_APB2_GRP1_ForceReset+0x1c>)
100475ca:	6c19      	ldr	r1, [r3, #64]	@ 0x40
100475cc:	4b03      	ldr	r3, [pc, #12]	@ (100475dc <LL_APB2_GRP1_ForceReset+0x1c>)
100475ce:	687a      	ldr	r2, [r7, #4]
100475d0:	430a      	orrs	r2, r1
100475d2:	641a      	str	r2, [r3, #64]	@ 0x40
}
100475d4:	46c0      	nop			@ (mov r8, r8)
100475d6:	46bd      	mov	sp, r7
100475d8:	b002      	add	sp, #8
100475da:	bd80      	pop	{r7, pc}
100475dc:	48400000 	.word	0x48400000

100475e0 <LL_APB2_GRP1_ReleaseReset>:
{
100475e0:	b580      	push	{r7, lr}
100475e2:	b082      	sub	sp, #8
100475e4:	af00      	add	r7, sp, #0
100475e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
100475e8:	4b05      	ldr	r3, [pc, #20]	@ (10047600 <LL_APB2_GRP1_ReleaseReset+0x20>)
100475ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
100475ec:	687b      	ldr	r3, [r7, #4]
100475ee:	43d9      	mvns	r1, r3
100475f0:	4b03      	ldr	r3, [pc, #12]	@ (10047600 <LL_APB2_GRP1_ReleaseReset+0x20>)
100475f2:	400a      	ands	r2, r1
100475f4:	641a      	str	r2, [r3, #64]	@ 0x40
}
100475f6:	46c0      	nop			@ (mov r8, r8)
100475f8:	46bd      	mov	sp, r7
100475fa:	b002      	add	sp, #8
100475fc:	bd80      	pop	{r7, pc}
100475fe:	46c0      	nop			@ (mov r8, r8)
10047600:	48400000 	.word	0x48400000

10047604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10047604:	b580      	push	{r7, lr}
10047606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */
//
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
10047608:	2380      	movs	r3, #128	@ 0x80
1004760a:	005b      	lsls	r3, r3, #1
1004760c:	0018      	movs	r0, r3
1004760e:	f7ff ff81 	bl	10047514 <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
//
  /* USER CODE END MspInit 1 */
}
10047612:	46c0      	nop			@ (mov r8, r8)
10047614:	46bd      	mov	sp, r7
10047616:	bd80      	pop	{r7, pc}

10047618 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
10047618:	b590      	push	{r4, r7, lr}
1004761a:	b089      	sub	sp, #36	@ 0x24
1004761c:	af00      	add	r7, sp, #0
1004761e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10047620:	240c      	movs	r4, #12
10047622:	193b      	adds	r3, r7, r4
10047624:	0018      	movs	r0, r3
10047626:	2314      	movs	r3, #20
10047628:	001a      	movs	r2, r3
1004762a:	2100      	movs	r1, #0
1004762c:	f021 f886 	bl	1006873c <memset>
  if(hi2c->Instance==I2C1)
10047630:	687b      	ldr	r3, [r7, #4]
10047632:	681a      	ldr	r2, [r3, #0]
10047634:	2382      	movs	r3, #130	@ 0x82
10047636:	05db      	lsls	r3, r3, #23
10047638:	429a      	cmp	r2, r3
1004763a:	d147      	bne.n	100476cc <HAL_I2C_MspInit+0xb4>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
1004763c:	2004      	movs	r0, #4
1004763e:	f7ff ff53 	bl	100474e8 <LL_AHB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
10047642:	2008      	movs	r0, #8
10047644:	f7ff ff50 	bl	100474e8 <LL_AHB1_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PA1     ------> I2C1_SDA
    PA0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
10047648:	193b      	adds	r3, r7, r4
1004764a:	2202      	movs	r2, #2
1004764c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
1004764e:	193b      	adds	r3, r7, r4
10047650:	2212      	movs	r2, #18
10047652:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10047654:	193b      	adds	r3, r7, r4
10047656:	2200      	movs	r2, #0
10047658:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
1004765a:	193b      	adds	r3, r7, r4
1004765c:	2200      	movs	r2, #0
1004765e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
10047660:	193b      	adds	r3, r7, r4
10047662:	2200      	movs	r2, #0
10047664:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10047666:	193a      	adds	r2, r7, r4
10047668:	2390      	movs	r3, #144	@ 0x90
1004766a:	05db      	lsls	r3, r3, #23
1004766c:	0011      	movs	r1, r2
1004766e:	0018      	movs	r0, r3
10047670:	f001 f9b2 	bl	100489d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
10047674:	0021      	movs	r1, r4
10047676:	187b      	adds	r3, r7, r1
10047678:	2201      	movs	r2, #1
1004767a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
1004767c:	187b      	adds	r3, r7, r1
1004767e:	2212      	movs	r2, #18
10047680:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10047682:	187b      	adds	r3, r7, r1
10047684:	2200      	movs	r2, #0
10047686:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10047688:	187b      	adds	r3, r7, r1
1004768a:	2200      	movs	r2, #0
1004768c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
1004768e:	187b      	adds	r3, r7, r1
10047690:	2200      	movs	r2, #0
10047692:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10047694:	187a      	adds	r2, r7, r1
10047696:	2390      	movs	r3, #144	@ 0x90
10047698:	05db      	lsls	r3, r3, #23
1004769a:	0011      	movs	r1, r2
1004769c:	0018      	movs	r0, r3
1004769e:	f001 f99b 	bl	100489d8 <HAL_GPIO_Init>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_A, PWR_GPIO_BIT_1);
100476a2:	2102      	movs	r1, #2
100476a4:	2000      	movs	r0, #0
100476a6:	f003 fc67 	bl	1004af78 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_A, PWR_GPIO_BIT_0);
100476aa:	2101      	movs	r1, #1
100476ac:	2000      	movs	r0, #0
100476ae:	f003 fc63 	bl	1004af78 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_1);
100476b2:	2102      	movs	r1, #2
100476b4:	2000      	movs	r0, #0
100476b6:	f003 fc8d 	bl	1004afd4 <HAL_PWREx_DisableGPIOPullDown>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_0);
100476ba:	2101      	movs	r1, #1
100476bc:	2000      	movs	r0, #0
100476be:	f003 fc89 	bl	1004afd4 <HAL_PWREx_DisableGPIOPullDown>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
100476c2:	2380      	movs	r3, #128	@ 0x80
100476c4:	039b      	lsls	r3, r3, #14
100476c6:	0018      	movs	r0, r3
100476c8:	f7ff ff3a 	bl	10047540 <LL_APB1_GRP1_EnableClock>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
100476cc:	46c0      	nop			@ (mov r8, r8)
100476ce:	46bd      	mov	sp, r7
100476d0:	b009      	add	sp, #36	@ 0x24
100476d2:	bd90      	pop	{r4, r7, pc}

100476d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
100476d4:	b590      	push	{r4, r7, lr}
100476d6:	b08f      	sub	sp, #60	@ 0x3c
100476d8:	af00      	add	r7, sp, #0
100476da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
100476dc:	2324      	movs	r3, #36	@ 0x24
100476de:	18fb      	adds	r3, r7, r3
100476e0:	0018      	movs	r0, r3
100476e2:	2314      	movs	r3, #20
100476e4:	001a      	movs	r2, r3
100476e6:	2100      	movs	r1, #0
100476e8:	f021 f828 	bl	1006873c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
100476ec:	240c      	movs	r4, #12
100476ee:	193b      	adds	r3, r7, r4
100476f0:	0018      	movs	r0, r3
100476f2:	2318      	movs	r3, #24
100476f4:	001a      	movs	r2, r3
100476f6:	2100      	movs	r1, #0
100476f8:	f021 f820 	bl	1006873c <memset>
  if(huart->Instance==LPUART1)
100476fc:	687b      	ldr	r3, [r7, #4]
100476fe:	681b      	ldr	r3, [r3, #0]
10047700:	4a46      	ldr	r2, [pc, #280]	@ (1004781c <HAL_UART_MspInit+0x148>)
10047702:	4293      	cmp	r3, r2
10047704:	d000      	beq.n	10047708 <HAL_UART_MspInit+0x34>
10047706:	e084      	b.n	10047812 <HAL_UART_MspInit+0x13e>
//
    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
10047708:	193b      	adds	r3, r7, r4
1004770a:	2210      	movs	r2, #16
1004770c:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.LPUART1ClockSelection = RCC_LPUART1_CLKSOURCE_16M;
1004770e:	193b      	adds	r3, r7, r4
10047710:	2200      	movs	r2, #0
10047712:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10047714:	193b      	adds	r3, r7, r4
10047716:	0018      	movs	r0, r3
10047718:	f006 fa9e 	bl	1004dc58 <HAL_RCCEx_PeriphCLKConfig>
1004771c:	1e03      	subs	r3, r0, #0
1004771e:	d001      	beq.n	10047724 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
10047720:	f7fa fd24 	bl	1004216c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
10047724:	2380      	movs	r3, #128	@ 0x80
10047726:	005b      	lsls	r3, r3, #1
10047728:	0018      	movs	r0, r3
1004772a:	f7ff ff09 	bl	10047540 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
1004772e:	2008      	movs	r0, #8
10047730:	f7ff feda 	bl	100474e8 <LL_AHB1_GRP1_EnableClock>
    PB7     ------> LPUART1_RX


    */

    GPIO_InitStruct.Pin = GPIO_PIN_3;
10047734:	2424      	movs	r4, #36	@ 0x24
10047736:	193b      	adds	r3, r7, r4
10047738:	2208      	movs	r2, #8
1004773a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
1004773c:	193b      	adds	r3, r7, r4
1004773e:	2202      	movs	r2, #2
10047740:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10047742:	193b      	adds	r3, r7, r4
10047744:	2200      	movs	r2, #0
10047746:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10047748:	193b      	adds	r3, r7, r4
1004774a:	2200      	movs	r2, #0
1004774c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPUART1;
1004774e:	193b      	adds	r3, r7, r4
10047750:	2201      	movs	r2, #1
10047752:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10047754:	193b      	adds	r3, r7, r4
10047756:	4a32      	ldr	r2, [pc, #200]	@ (10047820 <HAL_UART_MspInit+0x14c>)
10047758:	0019      	movs	r1, r3
1004775a:	0010      	movs	r0, r2
1004775c:	f001 f93c 	bl	100489d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
10047760:	193b      	adds	r3, r7, r4
10047762:	2280      	movs	r2, #128	@ 0x80
10047764:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10047766:	193b      	adds	r3, r7, r4
10047768:	2202      	movs	r2, #2
1004776a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1004776c:	193b      	adds	r3, r7, r4
1004776e:	2200      	movs	r2, #0
10047770:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10047772:	193b      	adds	r3, r7, r4
10047774:	2200      	movs	r2, #0
10047776:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART1;
10047778:	193b      	adds	r3, r7, r4
1004777a:	2203      	movs	r2, #3
1004777c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
1004777e:	193b      	adds	r3, r7, r4
10047780:	4a27      	ldr	r2, [pc, #156]	@ (10047820 <HAL_UART_MspInit+0x14c>)
10047782:	0019      	movs	r1, r3
10047784:	0010      	movs	r0, r2
10047786:	f001 f927 	bl	100489d8 <HAL_GPIO_Init>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_B, PWR_GPIO_BIT_3|PWR_GPIO_BIT_7);
1004778a:	2188      	movs	r1, #136	@ 0x88
1004778c:	2001      	movs	r0, #1
1004778e:	f003 fbf3 	bl	1004af78 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_3|PWR_GPIO_BIT_7);
10047792:	2188      	movs	r1, #136	@ 0x88
10047794:	2001      	movs	r0, #1
10047796:	f003 fc1d 	bl	1004afd4 <HAL_PWREx_DisableGPIOPullDown>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 0);
1004779a:	2200      	movs	r2, #0
1004779c:	2101      	movs	r1, #1
1004779e:	2009      	movs	r0, #9
100477a0:	f000 ff3a 	bl	10048618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
100477a4:	2009      	movs	r0, #9
100477a6:	f000 ff4c 	bl	10048642 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN LPUART1_MspInit 1 */
    //    PB0     ------> USART_RX
    //    PA1     ------> USART_TX
    GPIO_InitStruct.Pin = GPIO_PIN_0;
100477aa:	193b      	adds	r3, r7, r4
100477ac:	2201      	movs	r2, #1
100477ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100477b0:	193b      	adds	r3, r7, r4
100477b2:	2202      	movs	r2, #2
100477b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100477b6:	193b      	adds	r3, r7, r4
100477b8:	2200      	movs	r2, #0
100477ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100477bc:	193b      	adds	r3, r7, r4
100477be:	2200      	movs	r2, #0
100477c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
100477c2:	193b      	adds	r3, r7, r4
100477c4:	2200      	movs	r2, #0
100477c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
100477c8:	193b      	adds	r3, r7, r4
100477ca:	4a15      	ldr	r2, [pc, #84]	@ (10047820 <HAL_UART_MspInit+0x14c>)
100477cc:	0019      	movs	r1, r3
100477ce:	0010      	movs	r0, r2
100477d0:	f001 f902 	bl	100489d8 <HAL_GPIO_Init>

    //default to PA1 being in I2C control
    GPIO_InitStruct.Pin = GPIO_PIN_1;
100477d4:	0021      	movs	r1, r4
100477d6:	187b      	adds	r3, r7, r1
100477d8:	2202      	movs	r2, #2
100477da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
100477dc:	187b      	adds	r3, r7, r1
100477de:	2212      	movs	r2, #18
100477e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100477e2:	187b      	adds	r3, r7, r1
100477e4:	2200      	movs	r2, #0
100477e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100477e8:	187b      	adds	r3, r7, r1
100477ea:	2200      	movs	r2, #0
100477ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
100477ee:	187b      	adds	r3, r7, r1
100477f0:	2200      	movs	r2, #0
100477f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
100477f4:	187a      	adds	r2, r7, r1
100477f6:	2390      	movs	r3, #144	@ 0x90
100477f8:	05db      	lsls	r3, r3, #23
100477fa:	0011      	movs	r1, r2
100477fc:	0018      	movs	r0, r3
100477fe:	f001 f8eb 	bl	100489d8 <HAL_GPIO_Init>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_B, PWR_GPIO_BIT_0);
10047802:	2101      	movs	r1, #1
10047804:	2001      	movs	r0, #1
10047806:	f003 fbb7 	bl	1004af78 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_1);
1004780a:	2102      	movs	r1, #2
1004780c:	2000      	movs	r0, #0
1004780e:	f003 fbe1 	bl	1004afd4 <HAL_PWREx_DisableGPIOPullDown>
//
    /* USER CODE END LPUART1_MspInit 1 */

  }

}
10047812:	46c0      	nop			@ (mov r8, r8)
10047814:	46bd      	mov	sp, r7
10047816:	b00f      	add	sp, #60	@ 0x3c
10047818:	bd90      	pop	{r4, r7, pc}
1004781a:	46c0      	nop			@ (mov r8, r8)
1004781c:	41005000 	.word	0x41005000
10047820:	48100000 	.word	0x48100000

10047824 <HAL_PKA_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpka: PKA handle pointer
  * @retval None
  */
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
10047824:	b580      	push	{r7, lr}
10047826:	b082      	sub	sp, #8
10047828:	af00      	add	r7, sp, #0
1004782a:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
1004782c:	687b      	ldr	r3, [r7, #4]
1004782e:	681b      	ldr	r3, [r3, #0]
10047830:	4a05      	ldr	r2, [pc, #20]	@ (10047848 <HAL_PKA_MspInit+0x24>)
10047832:	4293      	cmp	r3, r2
10047834:	d104      	bne.n	10047840 <HAL_PKA_MspInit+0x1c>
  {
    /* USER CODE BEGIN PKA_MspInit 0 */

    /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
10047836:	2380      	movs	r3, #128	@ 0x80
10047838:	025b      	lsls	r3, r3, #9
1004783a:	0018      	movs	r0, r3
1004783c:	f7ff fe54 	bl	100474e8 <LL_AHB1_GRP1_EnableClock>

    /* USER CODE END PKA_MspInit 1 */

  }

}
10047840:	46c0      	nop			@ (mov r8, r8)
10047842:	46bd      	mov	sp, r7
10047844:	b002      	add	sp, #8
10047846:	bd80      	pop	{r7, pc}
10047848:	48300000 	.word	0x48300000

1004784c <HAL_RADIO_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hradio: RADIO handle pointer
  * @retval None
  */
void HAL_RADIO_MspInit(RADIO_HandleTypeDef* hradio)
{
1004784c:	b590      	push	{r4, r7, lr}
1004784e:	b089      	sub	sp, #36	@ 0x24
10047850:	af00      	add	r7, sp, #0
10047852:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10047854:	2408      	movs	r4, #8
10047856:	193b      	adds	r3, r7, r4
10047858:	0018      	movs	r0, r3
1004785a:	2318      	movs	r3, #24
1004785c:	001a      	movs	r2, r3
1004785e:	2100      	movs	r1, #0
10047860:	f020 ff6c 	bl	1006873c <memset>
  if(hradio->Instance==RADIO)
10047864:	687b      	ldr	r3, [r7, #4]
10047866:	681a      	ldr	r2, [r3, #0]
10047868:	23c0      	movs	r3, #192	@ 0xc0
1004786a:	05db      	lsls	r3, r3, #23
1004786c:	429a      	cmp	r2, r3
1004786e:	d12d      	bne.n	100478cc <HAL_RADIO_MspInit+0x80>

    /* USER CODE END RADIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RF;
10047870:	193b      	adds	r3, r7, r4
10047872:	2201      	movs	r2, #1
10047874:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RFClockSelection = RCC_RF_CLK_16M;
10047876:	193b      	adds	r3, r7, r4
10047878:	2204      	movs	r2, #4
1004787a:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
1004787c:	193b      	adds	r3, r7, r4
1004787e:	0018      	movs	r0, r3
10047880:	f006 f9ea 	bl	1004dc58 <HAL_RCCEx_PeriphCLKConfig>
10047884:	1e03      	subs	r3, r0, #0
10047886:	d001      	beq.n	1004788c <HAL_RADIO_MspInit+0x40>
    {
      Error_Handler();
10047888:	f7fa fc70 	bl	1004216c <Error_Handler>
    }

    /* Peripheral clock enable */
    if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
1004788c:	2001      	movs	r0, #1
1004788e:	f7ff fe83 	bl	10047598 <LL_APB2_GRP1_IsEnabledClock>
10047892:	1e03      	subs	r3, r0, #0
10047894:	d108      	bne.n	100478a8 <HAL_RADIO_MspInit+0x5c>
    {
      /* Radio reset */
      __HAL_RCC_RADIO_FORCE_RESET();
10047896:	2001      	movs	r0, #1
10047898:	f7ff fe92 	bl	100475c0 <LL_APB2_GRP1_ForceReset>
      __HAL_RCC_RADIO_RELEASE_RESET();
1004789c:	2001      	movs	r0, #1
1004789e:	f7ff fe9f 	bl	100475e0 <LL_APB2_GRP1_ReleaseReset>

      /* Enable Radio peripheral clock */
      __HAL_RCC_RADIO_CLK_ENABLE();
100478a2:	2001      	movs	r0, #1
100478a4:	f7ff fe62 	bl	1004756c <LL_APB2_GRP1_EnableClock>
    }

    /**RADIO GPIO Configuration
    RF1     ------> RADIO_RF1
    */
    RT_DEBUG_GPIO_Init();
100478a8:	f00d fb4c 	bl	10054f44 <RT_DEBUG_GPIO_Init>

    /* RADIO interrupt Init */
    HAL_NVIC_SetPriority(RADIO_TXRX_IRQn, 0, 0);
100478ac:	2200      	movs	r2, #0
100478ae:	2100      	movs	r1, #0
100478b0:	2012      	movs	r0, #18
100478b2:	f000 feb1 	bl	10048618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_IRQn);
100478b6:	2012      	movs	r0, #18
100478b8:	f000 fec3 	bl	10048642 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RADIO_TXRX_SEQ_IRQn, 0, 0);
100478bc:	2200      	movs	r2, #0
100478be:	2100      	movs	r1, #0
100478c0:	2019      	movs	r0, #25
100478c2:	f000 fea9 	bl	10048618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
100478c6:	2019      	movs	r0, #25
100478c8:	f000 febb 	bl	10048642 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RADIO_MspInit 1 */

  }

}
100478cc:	46c0      	nop			@ (mov r8, r8)
100478ce:	46bd      	mov	sp, r7
100478d0:	b009      	add	sp, #36	@ 0x24
100478d2:	bd90      	pop	{r4, r7, pc}

100478d4 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
100478d4:	b580      	push	{r7, lr}
100478d6:	b082      	sub	sp, #8
100478d8:	af00      	add	r7, sp, #0
100478da:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
100478dc:	687b      	ldr	r3, [r7, #4]
100478de:	681b      	ldr	r3, [r3, #0]
100478e0:	4a05      	ldr	r2, [pc, #20]	@ (100478f8 <HAL_RNG_MspInit+0x24>)
100478e2:	4293      	cmp	r3, r2
100478e4:	d104      	bne.n	100478f0 <HAL_RNG_MspInit+0x1c>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
100478e6:	2380      	movs	r3, #128	@ 0x80
100478e8:	02db      	lsls	r3, r3, #11
100478ea:	0018      	movs	r0, r3
100478ec:	f7ff fdfc 	bl	100474e8 <LL_AHB1_GRP1_EnableClock>

    /* USER CODE END RNG_MspInit 1 */

  }

}
100478f0:	46c0      	nop			@ (mov r8, r8)
100478f2:	46bd      	mov	sp, r7
100478f4:	b002      	add	sp, #8
100478f6:	bd80      	pop	{r7, pc}
100478f8:	48600000 	.word	0x48600000

100478fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
100478fc:	b580      	push	{r7, lr}
100478fe:	b082      	sub	sp, #8
10047900:	af00      	add	r7, sp, #0
10047902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
10047904:	687b      	ldr	r3, [r7, #4]
10047906:	681b      	ldr	r3, [r3, #0]
10047908:	4a08      	ldr	r2, [pc, #32]	@ (1004792c <HAL_TIM_Base_MspInit+0x30>)
1004790a:	4293      	cmp	r3, r2
1004790c:	d10a      	bne.n	10047924 <HAL_TIM_Base_MspInit+0x28>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
1004790e:	2001      	movs	r0, #1
10047910:	f7ff fe00 	bl	10047514 <LL_APB0_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
10047914:	2200      	movs	r2, #0
10047916:	2101      	movs	r1, #1
10047918:	200a      	movs	r0, #10
1004791a:	f000 fe7d 	bl	10048618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
1004791e:	200a      	movs	r0, #10
10047920:	f000 fe8f 	bl	10048642 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
10047924:	46c0      	nop			@ (mov r8, r8)
10047926:	46bd      	mov	sp, r7
10047928:	b002      	add	sp, #8
1004792a:	bd80      	pop	{r7, pc}
1004792c:	40002000 	.word	0x40002000

10047930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10047930:	b580      	push	{r7, lr}
10047932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
10047934:	46c0      	nop			@ (mov r8, r8)
10047936:	e7fd      	b.n	10047934 <NMI_Handler+0x4>

10047938 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10047938:	b580      	push	{r7, lr}
1004793a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
1004793c:	46c0      	nop			@ (mov r8, r8)
1004793e:	e7fd      	b.n	1004793c <HardFault_Handler+0x4>

10047940 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10047940:	b580      	push	{r7, lr}
10047942:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10047944:	46c0      	nop			@ (mov r8, r8)
10047946:	46bd      	mov	sp, r7
10047948:	bd80      	pop	{r7, pc}

1004794a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
1004794a:	b580      	push	{r7, lr}
1004794c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
1004794e:	46c0      	nop			@ (mov r8, r8)
10047950:	46bd      	mov	sp, r7
10047952:	bd80      	pop	{r7, pc}

10047954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10047954:	b580      	push	{r7, lr}
10047956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10047958:	f000 fd68 	bl	1004842c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
1004795c:	46c0      	nop			@ (mov r8, r8)
1004795e:	46bd      	mov	sp, r7
10047960:	bd80      	pop	{r7, pc}

10047962 <GPIOA_IRQHandler>:

/**
  * @brief This function handles GPIOA interrupt.
  */
void GPIOA_IRQHandler(void)
{
10047962:	b580      	push	{r7, lr}
10047964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPIOA_IRQn 0 */

  /* USER CODE END GPIOA_IRQn 0 */
  BSP_PB_IRQHandler(GPIOA,B1_PIN);
10047966:	2390      	movs	r3, #144	@ 0x90
10047968:	05db      	lsls	r3, r3, #23
1004796a:	2101      	movs	r1, #1
1004796c:	0018      	movs	r0, r3
1004796e:	f000 fba5 	bl	100480bc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN GPIOA_IRQn 1 */

  /* USER CODE END GPIOA_IRQn 1 */
}
10047972:	46c0      	nop			@ (mov r8, r8)
10047974:	46bd      	mov	sp, r7
10047976:	bd80      	pop	{r7, pc}

10047978 <GPIOB_IRQHandler>:

/**
  * @brief This function handles GPIOB interrupt.
  */
void GPIOB_IRQHandler(void)
{
10047978:	b580      	push	{r7, lr}
1004797a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPIOB_IRQn 0 */

  /* USER CODE END GPIOB_IRQn 0 */
  BSP_PB_IRQHandler(GPIOB,B3_PIN);
1004797c:	2380      	movs	r3, #128	@ 0x80
1004797e:	01db      	lsls	r3, r3, #7
10047980:	4a06      	ldr	r2, [pc, #24]	@ (1004799c <GPIOB_IRQHandler+0x24>)
10047982:	0019      	movs	r1, r3
10047984:	0010      	movs	r0, r2
10047986:	f000 fb99 	bl	100480bc <BSP_PB_IRQHandler>
  BSP_PB_IRQHandler(GPIOB,B2_PIN);
1004798a:	4b04      	ldr	r3, [pc, #16]	@ (1004799c <GPIOB_IRQHandler+0x24>)
1004798c:	2120      	movs	r1, #32
1004798e:	0018      	movs	r0, r3
10047990:	f000 fb94 	bl	100480bc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN GPIOB_IRQn 1 */

  /* USER CODE END GPIOB_IRQn 1 */
}
10047994:	46c0      	nop			@ (mov r8, r8)
10047996:	46bd      	mov	sp, r7
10047998:	bd80      	pop	{r7, pc}
1004799a:	46c0      	nop			@ (mov r8, r8)
1004799c:	48100000 	.word	0x48100000

100479a0 <RADIO_TIMER_CPU_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_CPU_WKUP global interrupt.
  */
void RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
100479a0:	b580      	push	{r7, lr}
100479a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_CPU_WKUP_IRQHandler();
100479a4:	f005 fc82 	bl	1004d2ac <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 1 */
}
100479a8:	46c0      	nop			@ (mov r8, r8)
100479aa:	46bd      	mov	sp, r7
100479ac:	bd80      	pop	{r7, pc}

100479ae <RADIO_TIMER_ERROR_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_ERROR global interrupt.
  */
void RADIO_TIMER_ERROR_IRQHandler(void)
{
100479ae:	b580      	push	{r7, lr}
100479b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 0 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 0 */
  HAL_RADIO_TIMER_ERROR_IRQHandler();
100479b2:	f005 fc84 	bl	1004d2be <HAL_RADIO_TIMER_ERROR_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 1 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 1 */
}
100479b6:	46c0      	nop			@ (mov r8, r8)
100479b8:	46bd      	mov	sp, r7
100479ba:	bd80      	pop	{r7, pc}

100479bc <RADIO_TXRX_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX global interrupt.
  */
void RADIO_TXRX_IRQHandler(void)
{
100479bc:	b580      	push	{r7, lr}
100479be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_IRQn 0 */

  /* USER CODE END RADIO_TXRX_IRQn 0 */
  HAL_RADIO_TXRX_IRQHandler();
100479c0:	f004 f874 	bl	1004baac <HAL_RADIO_TXRX_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_IRQn 1 */

  /* USER CODE END RADIO_TXRX_IRQn 1 */
}
100479c4:	46c0      	nop			@ (mov r8, r8)
100479c6:	46bd      	mov	sp, r7
100479c8:	bd80      	pop	{r7, pc}

100479ca <RADIO_TXRX_SEQ_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX_SEQ global interrupt.
  */
void RADIO_TXRX_SEQ_IRQHandler(void)
{
100479ca:	b580      	push	{r7, lr}
100479cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 0 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 0 */
  HAL_RADIO_TXRX_SEQ_IRQHandler();
100479ce:	f004 f88e 	bl	1004baee <HAL_RADIO_TXRX_SEQ_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 1 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 1 */
}
100479d2:	46c0      	nop			@ (mov r8, r8)
100479d4:	46bd      	mov	sp, r7
100479d6:	bd80      	pop	{r7, pc}

100479d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
100479d8:	b580      	push	{r7, lr}
100479da:	b086      	sub	sp, #24
100479dc:	af00      	add	r7, sp, #0
100479de:	60f8      	str	r0, [r7, #12]
100479e0:	60b9      	str	r1, [r7, #8]
100479e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
100479e4:	2300      	movs	r3, #0
100479e6:	617b      	str	r3, [r7, #20]
100479e8:	e00a      	b.n	10047a00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
100479ea:	e000      	b.n	100479ee <_read+0x16>
100479ec:	bf00      	nop
100479ee:	0001      	movs	r1, r0
100479f0:	68bb      	ldr	r3, [r7, #8]
100479f2:	1c5a      	adds	r2, r3, #1
100479f4:	60ba      	str	r2, [r7, #8]
100479f6:	b2ca      	uxtb	r2, r1
100479f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
100479fa:	697b      	ldr	r3, [r7, #20]
100479fc:	3301      	adds	r3, #1
100479fe:	617b      	str	r3, [r7, #20]
10047a00:	697a      	ldr	r2, [r7, #20]
10047a02:	687b      	ldr	r3, [r7, #4]
10047a04:	429a      	cmp	r2, r3
10047a06:	dbf0      	blt.n	100479ea <_read+0x12>
  }

  return len;
10047a08:	687b      	ldr	r3, [r7, #4]
}
10047a0a:	0018      	movs	r0, r3
10047a0c:	46bd      	mov	sp, r7
10047a0e:	b006      	add	sp, #24
10047a10:	bd80      	pop	{r7, pc}

10047a12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
10047a12:	b580      	push	{r7, lr}
10047a14:	b086      	sub	sp, #24
10047a16:	af00      	add	r7, sp, #0
10047a18:	60f8      	str	r0, [r7, #12]
10047a1a:	60b9      	str	r1, [r7, #8]
10047a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10047a1e:	2300      	movs	r3, #0
10047a20:	617b      	str	r3, [r7, #20]
10047a22:	e009      	b.n	10047a38 <_write+0x26>
  {
    __io_putchar(*ptr++);
10047a24:	68bb      	ldr	r3, [r7, #8]
10047a26:	1c5a      	adds	r2, r3, #1
10047a28:	60ba      	str	r2, [r7, #8]
10047a2a:	781b      	ldrb	r3, [r3, #0]
10047a2c:	0018      	movs	r0, r3
10047a2e:	e000      	b.n	10047a32 <_write+0x20>
10047a30:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10047a32:	697b      	ldr	r3, [r7, #20]
10047a34:	3301      	adds	r3, #1
10047a36:	617b      	str	r3, [r7, #20]
10047a38:	697a      	ldr	r2, [r7, #20]
10047a3a:	687b      	ldr	r3, [r7, #4]
10047a3c:	429a      	cmp	r2, r3
10047a3e:	dbf1      	blt.n	10047a24 <_write+0x12>
  }
  return len;
10047a40:	687b      	ldr	r3, [r7, #4]
}
10047a42:	0018      	movs	r0, r3
10047a44:	46bd      	mov	sp, r7
10047a46:	b006      	add	sp, #24
10047a48:	bd80      	pop	{r7, pc}

10047a4a <_close>:

int _close(int file)
{
10047a4a:	b580      	push	{r7, lr}
10047a4c:	b082      	sub	sp, #8
10047a4e:	af00      	add	r7, sp, #0
10047a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
10047a52:	2301      	movs	r3, #1
10047a54:	425b      	negs	r3, r3
}
10047a56:	0018      	movs	r0, r3
10047a58:	46bd      	mov	sp, r7
10047a5a:	b002      	add	sp, #8
10047a5c:	bd80      	pop	{r7, pc}

10047a5e <_fstat>:


int _fstat(int file, struct stat *st)
{
10047a5e:	b580      	push	{r7, lr}
10047a60:	b082      	sub	sp, #8
10047a62:	af00      	add	r7, sp, #0
10047a64:	6078      	str	r0, [r7, #4]
10047a66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
10047a68:	683b      	ldr	r3, [r7, #0]
10047a6a:	2280      	movs	r2, #128	@ 0x80
10047a6c:	0192      	lsls	r2, r2, #6
10047a6e:	605a      	str	r2, [r3, #4]
  return 0;
10047a70:	2300      	movs	r3, #0
}
10047a72:	0018      	movs	r0, r3
10047a74:	46bd      	mov	sp, r7
10047a76:	b002      	add	sp, #8
10047a78:	bd80      	pop	{r7, pc}

10047a7a <_isatty>:

int _isatty(int file)
{
10047a7a:	b580      	push	{r7, lr}
10047a7c:	b082      	sub	sp, #8
10047a7e:	af00      	add	r7, sp, #0
10047a80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
10047a82:	2301      	movs	r3, #1
}
10047a84:	0018      	movs	r0, r3
10047a86:	46bd      	mov	sp, r7
10047a88:	b002      	add	sp, #8
10047a8a:	bd80      	pop	{r7, pc}

10047a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
10047a8c:	b580      	push	{r7, lr}
10047a8e:	b084      	sub	sp, #16
10047a90:	af00      	add	r7, sp, #0
10047a92:	60f8      	str	r0, [r7, #12]
10047a94:	60b9      	str	r1, [r7, #8]
10047a96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
10047a98:	2300      	movs	r3, #0
}
10047a9a:	0018      	movs	r0, r3
10047a9c:	46bd      	mov	sp, r7
10047a9e:	b004      	add	sp, #16
10047aa0:	bd80      	pop	{r7, pc}
	...

10047aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10047aa4:	b580      	push	{r7, lr}
10047aa6:	b086      	sub	sp, #24
10047aa8:	af00      	add	r7, sp, #0
10047aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10047aac:	4a14      	ldr	r2, [pc, #80]	@ (10047b00 <_sbrk+0x5c>)
10047aae:	4b15      	ldr	r3, [pc, #84]	@ (10047b04 <_sbrk+0x60>)
10047ab0:	1ad3      	subs	r3, r2, r3
10047ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10047ab4:	697b      	ldr	r3, [r7, #20]
10047ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10047ab8:	4b13      	ldr	r3, [pc, #76]	@ (10047b08 <_sbrk+0x64>)
10047aba:	681b      	ldr	r3, [r3, #0]
10047abc:	2b00      	cmp	r3, #0
10047abe:	d102      	bne.n	10047ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
10047ac0:	4b11      	ldr	r3, [pc, #68]	@ (10047b08 <_sbrk+0x64>)
10047ac2:	4a12      	ldr	r2, [pc, #72]	@ (10047b0c <_sbrk+0x68>)
10047ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
10047ac6:	4b10      	ldr	r3, [pc, #64]	@ (10047b08 <_sbrk+0x64>)
10047ac8:	681a      	ldr	r2, [r3, #0]
10047aca:	687b      	ldr	r3, [r7, #4]
10047acc:	18d3      	adds	r3, r2, r3
10047ace:	693a      	ldr	r2, [r7, #16]
10047ad0:	429a      	cmp	r2, r3
10047ad2:	d207      	bcs.n	10047ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
10047ad4:	f020 fe9a 	bl	1006880c <__errno>
10047ad8:	0003      	movs	r3, r0
10047ada:	220c      	movs	r2, #12
10047adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
10047ade:	2301      	movs	r3, #1
10047ae0:	425b      	negs	r3, r3
10047ae2:	e009      	b.n	10047af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
10047ae4:	4b08      	ldr	r3, [pc, #32]	@ (10047b08 <_sbrk+0x64>)
10047ae6:	681b      	ldr	r3, [r3, #0]
10047ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
10047aea:	4b07      	ldr	r3, [pc, #28]	@ (10047b08 <_sbrk+0x64>)
10047aec:	681a      	ldr	r2, [r3, #0]
10047aee:	687b      	ldr	r3, [r7, #4]
10047af0:	18d2      	adds	r2, r2, r3
10047af2:	4b05      	ldr	r3, [pc, #20]	@ (10047b08 <_sbrk+0x64>)
10047af4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
10047af6:	68fb      	ldr	r3, [r7, #12]
}
10047af8:	0018      	movs	r0, r3
10047afa:	46bd      	mov	sp, r7
10047afc:	b006      	add	sp, #24
10047afe:	bd80      	pop	{r7, pc}
10047b00:	20006000 	.word	0x20006000
10047b04:	00000c00 	.word	0x00000c00
10047b08:	200025cc 	.word	0x200025cc
10047b0c:	20005038 	.word	0x20005038

10047b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10047b10:	b590      	push	{r4, r7, lr}
10047b12:	b083      	sub	sp, #12
10047b14:	af00      	add	r7, sp, #0
10047b16:	0002      	movs	r2, r0
10047b18:	6039      	str	r1, [r7, #0]
10047b1a:	1dfb      	adds	r3, r7, #7
10047b1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10047b1e:	1dfb      	adds	r3, r7, #7
10047b20:	781b      	ldrb	r3, [r3, #0]
10047b22:	2b7f      	cmp	r3, #127	@ 0x7f
10047b24:	d828      	bhi.n	10047b78 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10047b26:	4a2f      	ldr	r2, [pc, #188]	@ (10047be4 <__NVIC_SetPriority+0xd4>)
10047b28:	1dfb      	adds	r3, r7, #7
10047b2a:	781b      	ldrb	r3, [r3, #0]
10047b2c:	b25b      	sxtb	r3, r3
10047b2e:	089b      	lsrs	r3, r3, #2
10047b30:	33c0      	adds	r3, #192	@ 0xc0
10047b32:	009b      	lsls	r3, r3, #2
10047b34:	589b      	ldr	r3, [r3, r2]
10047b36:	1dfa      	adds	r2, r7, #7
10047b38:	7812      	ldrb	r2, [r2, #0]
10047b3a:	0011      	movs	r1, r2
10047b3c:	2203      	movs	r2, #3
10047b3e:	400a      	ands	r2, r1
10047b40:	00d2      	lsls	r2, r2, #3
10047b42:	21ff      	movs	r1, #255	@ 0xff
10047b44:	4091      	lsls	r1, r2
10047b46:	000a      	movs	r2, r1
10047b48:	43d2      	mvns	r2, r2
10047b4a:	401a      	ands	r2, r3
10047b4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10047b4e:	683b      	ldr	r3, [r7, #0]
10047b50:	019b      	lsls	r3, r3, #6
10047b52:	22ff      	movs	r2, #255	@ 0xff
10047b54:	401a      	ands	r2, r3
10047b56:	1dfb      	adds	r3, r7, #7
10047b58:	781b      	ldrb	r3, [r3, #0]
10047b5a:	0018      	movs	r0, r3
10047b5c:	2303      	movs	r3, #3
10047b5e:	4003      	ands	r3, r0
10047b60:	00db      	lsls	r3, r3, #3
10047b62:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10047b64:	481f      	ldr	r0, [pc, #124]	@ (10047be4 <__NVIC_SetPriority+0xd4>)
10047b66:	1dfb      	adds	r3, r7, #7
10047b68:	781b      	ldrb	r3, [r3, #0]
10047b6a:	b25b      	sxtb	r3, r3
10047b6c:	089b      	lsrs	r3, r3, #2
10047b6e:	430a      	orrs	r2, r1
10047b70:	33c0      	adds	r3, #192	@ 0xc0
10047b72:	009b      	lsls	r3, r3, #2
10047b74:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10047b76:	e031      	b.n	10047bdc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10047b78:	4a1b      	ldr	r2, [pc, #108]	@ (10047be8 <__NVIC_SetPriority+0xd8>)
10047b7a:	1dfb      	adds	r3, r7, #7
10047b7c:	781b      	ldrb	r3, [r3, #0]
10047b7e:	0019      	movs	r1, r3
10047b80:	230f      	movs	r3, #15
10047b82:	400b      	ands	r3, r1
10047b84:	3b08      	subs	r3, #8
10047b86:	089b      	lsrs	r3, r3, #2
10047b88:	3306      	adds	r3, #6
10047b8a:	009b      	lsls	r3, r3, #2
10047b8c:	18d3      	adds	r3, r2, r3
10047b8e:	3304      	adds	r3, #4
10047b90:	681b      	ldr	r3, [r3, #0]
10047b92:	1dfa      	adds	r2, r7, #7
10047b94:	7812      	ldrb	r2, [r2, #0]
10047b96:	0011      	movs	r1, r2
10047b98:	2203      	movs	r2, #3
10047b9a:	400a      	ands	r2, r1
10047b9c:	00d2      	lsls	r2, r2, #3
10047b9e:	21ff      	movs	r1, #255	@ 0xff
10047ba0:	4091      	lsls	r1, r2
10047ba2:	000a      	movs	r2, r1
10047ba4:	43d2      	mvns	r2, r2
10047ba6:	401a      	ands	r2, r3
10047ba8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10047baa:	683b      	ldr	r3, [r7, #0]
10047bac:	019b      	lsls	r3, r3, #6
10047bae:	22ff      	movs	r2, #255	@ 0xff
10047bb0:	401a      	ands	r2, r3
10047bb2:	1dfb      	adds	r3, r7, #7
10047bb4:	781b      	ldrb	r3, [r3, #0]
10047bb6:	0018      	movs	r0, r3
10047bb8:	2303      	movs	r3, #3
10047bba:	4003      	ands	r3, r0
10047bbc:	00db      	lsls	r3, r3, #3
10047bbe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10047bc0:	4809      	ldr	r0, [pc, #36]	@ (10047be8 <__NVIC_SetPriority+0xd8>)
10047bc2:	1dfb      	adds	r3, r7, #7
10047bc4:	781b      	ldrb	r3, [r3, #0]
10047bc6:	001c      	movs	r4, r3
10047bc8:	230f      	movs	r3, #15
10047bca:	4023      	ands	r3, r4
10047bcc:	3b08      	subs	r3, #8
10047bce:	089b      	lsrs	r3, r3, #2
10047bd0:	430a      	orrs	r2, r1
10047bd2:	3306      	adds	r3, #6
10047bd4:	009b      	lsls	r3, r3, #2
10047bd6:	18c3      	adds	r3, r0, r3
10047bd8:	3304      	adds	r3, #4
10047bda:	601a      	str	r2, [r3, #0]
}
10047bdc:	46c0      	nop			@ (mov r8, r8)
10047bde:	46bd      	mov	sp, r7
10047be0:	b003      	add	sp, #12
10047be2:	bd90      	pop	{r4, r7, pc}
10047be4:	e000e100 	.word	0xe000e100
10047be8:	e000ed00 	.word	0xe000ed00

10047bec <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
10047bec:	b580      	push	{r7, lr}
10047bee:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
10047bf0:	f3bf 8f4f 	dsb	sy
}
10047bf4:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10047bf6:	4b04      	ldr	r3, [pc, #16]	@ (10047c08 <__NVIC_SystemReset+0x1c>)
10047bf8:	4a04      	ldr	r2, [pc, #16]	@ (10047c0c <__NVIC_SystemReset+0x20>)
10047bfa:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
10047bfc:	f3bf 8f4f 	dsb	sy
}
10047c00:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
10047c02:	46c0      	nop			@ (mov r8, r8)
10047c04:	e7fd      	b.n	10047c02 <__NVIC_SystemReset+0x16>
10047c06:	46c0      	nop			@ (mov r8, r8)
10047c08:	e000ed00 	.word	0xe000ed00
10047c0c:	05fa0004 	.word	0x05fa0004

10047c10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
10047c10:	b590      	push	{r4, r7, lr}
10047c12:	b087      	sub	sp, #28
10047c14:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
10047c16:	4a5e      	ldr	r2, [pc, #376]	@ (10047d90 <SystemInit+0x180>)
10047c18:	2394      	movs	r3, #148	@ 0x94
10047c1a:	58d3      	ldr	r3, [r2, r3]
10047c1c:	2b00      	cmp	r3, #0
10047c1e:	d10e      	bne.n	10047c3e <SystemInit+0x2e>
10047c20:	4b5c      	ldr	r3, [pc, #368]	@ (10047d94 <SystemInit+0x184>)
10047c22:	691b      	ldr	r3, [r3, #16]
10047c24:	2b00      	cmp	r3, #0
10047c26:	d103      	bne.n	10047c30 <SystemInit+0x20>
10047c28:	4b5a      	ldr	r3, [pc, #360]	@ (10047d94 <SystemInit+0x184>)
10047c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10047c2c:	2b00      	cmp	r3, #0
10047c2e:	d006      	beq.n	10047c3e <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
10047c30:	4b59      	ldr	r3, [pc, #356]	@ (10047d98 <SystemInit+0x188>)
10047c32:	2201      	movs	r2, #1
10047c34:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
10047c36:	f7f8 fad7 	bl	100401e8 <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
10047c3a:	f7ff ffd7 	bl	10047bec <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
10047c3e:	4b57      	ldr	r3, [pc, #348]	@ (10047d9c <SystemInit+0x18c>)
10047c40:	4a57      	ldr	r2, [pc, #348]	@ (10047da0 <SystemInit+0x190>)
10047c42:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
10047c44:	4b55      	ldr	r3, [pc, #340]	@ (10047d9c <SystemInit+0x18c>)
10047c46:	689a      	ldr	r2, [r3, #8]
10047c48:	4b53      	ldr	r3, [pc, #332]	@ (10047d98 <SystemInit+0x188>)
10047c4a:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
10047c4c:	4b51      	ldr	r3, [pc, #324]	@ (10047d94 <SystemInit+0x184>)
10047c4e:	685a      	ldr	r2, [r3, #4]
10047c50:	4b50      	ldr	r3, [pc, #320]	@ (10047d94 <SystemInit+0x184>)
10047c52:	2120      	movs	r1, #32
10047c54:	430a      	orrs	r2, r1
10047c56:	605a      	str	r2, [r3, #4]
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
#endif /* PWR_CR2_RAMRET3 */

  /* Disable the GPIO retention in power save configuration */
#if defined(PWR_CR2_GPIORET)
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
10047c58:	4b4e      	ldr	r3, [pc, #312]	@ (10047d94 <SystemInit+0x184>)
10047c5a:	685a      	ldr	r2, [r3, #4]
10047c5c:	4b4d      	ldr	r3, [pc, #308]	@ (10047d94 <SystemInit+0x184>)
10047c5e:	4951      	ldr	r1, [pc, #324]	@ (10047da4 <SystemInit+0x194>)
10047c60:	400a      	ands	r2, r1
10047c62:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
10047c64:	46c0      	nop			@ (mov r8, r8)
10047c66:	4b4b      	ldr	r3, [pc, #300]	@ (10047d94 <SystemInit+0x184>)
10047c68:	695b      	ldr	r3, [r3, #20]
10047c6a:	2204      	movs	r2, #4
10047c6c:	4013      	ands	r3, r2
10047c6e:	2b04      	cmp	r3, #4
10047c70:	d1f9      	bne.n	10047c66 <SystemInit+0x56>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
10047c72:	4b48      	ldr	r3, [pc, #288]	@ (10047d94 <SystemInit+0x184>)
10047c74:	69db      	ldr	r3, [r3, #28]
10047c76:	2230      	movs	r2, #48	@ 0x30
10047c78:	4393      	bics	r3, r2
10047c7a:	001a      	movs	r2, r3
10047c7c:	4b45      	ldr	r3, [pc, #276]	@ (10047d94 <SystemInit+0x184>)
10047c7e:	2120      	movs	r1, #32
10047c80:	430a      	orrs	r2, r1
10047c82:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
10047c84:	4b43      	ldr	r3, [pc, #268]	@ (10047d94 <SystemInit+0x184>)
10047c86:	69da      	ldr	r2, [r3, #28]
10047c88:	4b42      	ldr	r3, [pc, #264]	@ (10047d94 <SystemInit+0x184>)
10047c8a:	4947      	ldr	r1, [pc, #284]	@ (10047da8 <SystemInit+0x198>)
10047c8c:	400a      	ands	r2, r1
10047c8e:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
10047c90:	4b40      	ldr	r3, [pc, #256]	@ (10047d94 <SystemInit+0x184>)
10047c92:	69da      	ldr	r2, [r3, #28]
10047c94:	4b3f      	ldr	r3, [pc, #252]	@ (10047d94 <SystemInit+0x184>)
10047c96:	2180      	movs	r1, #128	@ 0x80
10047c98:	0049      	lsls	r1, r1, #1
10047c9a:	430a      	orrs	r2, r1
10047c9c:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
10047c9e:	4b43      	ldr	r3, [pc, #268]	@ (10047dac <SystemInit+0x19c>)
10047ca0:	681b      	ldr	r3, [r3, #0]
10047ca2:	4a43      	ldr	r2, [pc, #268]	@ (10047db0 <SystemInit+0x1a0>)
10047ca4:	4293      	cmp	r3, r2
10047ca6:	d055      	beq.n	10047d54 <SystemInit+0x144>

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
#else
    hsiCalib       = 0x1F;
10047ca8:	231f      	movs	r3, #31
10047caa:	613b      	str	r3, [r7, #16]
    lsiBw          = 8;
10047cac:	2308      	movs	r3, #8
10047cae:	60fb      	str	r3, [r7, #12]
    mainRegulator  = 0x0A;
10047cb0:	230a      	movs	r3, #10
10047cb2:	60bb      	str	r3, [r7, #8]
    smpsOutVoltage = 0x03;
10047cb4:	2303      	movs	r3, #3
10047cb6:	607b      	str	r3, [r7, #4]

    /* Low speed internal RC trimming value set by software */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
10047cb8:	4b35      	ldr	r3, [pc, #212]	@ (10047d90 <SystemInit+0x180>)
10047cba:	68db      	ldr	r3, [r3, #12]
10047cbc:	221e      	movs	r2, #30
10047cbe:	4393      	bics	r3, r2
10047cc0:	0019      	movs	r1, r3
10047cc2:	68fb      	ldr	r3, [r7, #12]
10047cc4:	005a      	lsls	r2, r3, #1
10047cc6:	4b32      	ldr	r3, [pc, #200]	@ (10047d90 <SystemInit+0x180>)
10047cc8:	430a      	orrs	r2, r1
10047cca:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
10047ccc:	4b30      	ldr	r3, [pc, #192]	@ (10047d90 <SystemInit+0x180>)
10047cce:	68da      	ldr	r2, [r3, #12]
10047cd0:	4b2f      	ldr	r3, [pc, #188]	@ (10047d90 <SystemInit+0x180>)
10047cd2:	2101      	movs	r1, #1
10047cd4:	430a      	orrs	r2, r1
10047cd6:	60da      	str	r2, [r3, #12]
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
10047cd8:	4b2d      	ldr	r3, [pc, #180]	@ (10047d90 <SystemInit+0x180>)
10047cda:	68db      	ldr	r3, [r3, #12]
10047cdc:	4a35      	ldr	r2, [pc, #212]	@ (10047db4 <SystemInit+0x1a4>)
10047cde:	4013      	ands	r3, r2
10047ce0:	0019      	movs	r1, r3
10047ce2:	693b      	ldr	r3, [r7, #16]
10047ce4:	061a      	lsls	r2, r3, #24
10047ce6:	4b2a      	ldr	r3, [pc, #168]	@ (10047d90 <SystemInit+0x180>)
10047ce8:	430a      	orrs	r2, r1
10047cea:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
10047cec:	4b28      	ldr	r3, [pc, #160]	@ (10047d90 <SystemInit+0x180>)
10047cee:	68da      	ldr	r2, [r3, #12]
10047cf0:	4b27      	ldr	r3, [pc, #156]	@ (10047d90 <SystemInit+0x180>)
10047cf2:	2180      	movs	r1, #128	@ 0x80
10047cf4:	0409      	lsls	r1, r1, #16
10047cf6:	430a      	orrs	r2, r1
10047cf8:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
10047cfa:	4a26      	ldr	r2, [pc, #152]	@ (10047d94 <SystemInit+0x184>)
10047cfc:	2394      	movs	r3, #148	@ 0x94
10047cfe:	58d3      	ldr	r3, [r2, r3]
10047d00:	4a2d      	ldr	r2, [pc, #180]	@ (10047db8 <SystemInit+0x1a8>)
10047d02:	401a      	ands	r2, r3
10047d04:	68bb      	ldr	r3, [r7, #8]
10047d06:	0199      	lsls	r1, r3, #6
10047d08:	23f0      	movs	r3, #240	@ 0xf0
10047d0a:	009b      	lsls	r3, r3, #2
10047d0c:	400b      	ands	r3, r1
10047d0e:	4921      	ldr	r1, [pc, #132]	@ (10047d94 <SystemInit+0x184>)
10047d10:	4313      	orrs	r3, r2
10047d12:	2294      	movs	r2, #148	@ 0x94
10047d14:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
10047d16:	4a1f      	ldr	r2, [pc, #124]	@ (10047d94 <SystemInit+0x184>)
10047d18:	2394      	movs	r3, #148	@ 0x94
10047d1a:	58d3      	ldr	r3, [r2, r3]
10047d1c:	491d      	ldr	r1, [pc, #116]	@ (10047d94 <SystemInit+0x184>)
10047d1e:	2220      	movs	r2, #32
10047d20:	4313      	orrs	r3, r2
10047d22:	2294      	movs	r2, #148	@ 0x94
10047d24:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
10047d26:	4a1b      	ldr	r2, [pc, #108]	@ (10047d94 <SystemInit+0x184>)
10047d28:	2394      	movs	r3, #148	@ 0x94
10047d2a:	58d3      	ldr	r3, [r2, r3]
10047d2c:	4a23      	ldr	r2, [pc, #140]	@ (10047dbc <SystemInit+0x1ac>)
10047d2e:	401a      	ands	r2, r3
10047d30:	687b      	ldr	r3, [r7, #4]
10047d32:	02d9      	lsls	r1, r3, #11
10047d34:	23e0      	movs	r3, #224	@ 0xe0
10047d36:	019b      	lsls	r3, r3, #6
10047d38:	400b      	ands	r3, r1
10047d3a:	4916      	ldr	r1, [pc, #88]	@ (10047d94 <SystemInit+0x184>)
10047d3c:	4313      	orrs	r3, r2
10047d3e:	2294      	movs	r2, #148	@ 0x94
10047d40:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
10047d42:	4a14      	ldr	r2, [pc, #80]	@ (10047d94 <SystemInit+0x184>)
10047d44:	2394      	movs	r3, #148	@ 0x94
10047d46:	58d3      	ldr	r3, [r2, r3]
10047d48:	4912      	ldr	r1, [pc, #72]	@ (10047d94 <SystemInit+0x184>)
10047d4a:	2280      	movs	r2, #128	@ 0x80
10047d4c:	00d2      	lsls	r2, r2, #3
10047d4e:	4313      	orrs	r3, r2
10047d50:	2294      	movs	r2, #148	@ 0x94
10047d52:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
10047d54:	2317      	movs	r3, #23
10047d56:	18fb      	adds	r3, r7, r3
10047d58:	2200      	movs	r2, #0
10047d5a:	701a      	strb	r2, [r3, #0]
10047d5c:	e00d      	b.n	10047d7a <SystemInit+0x16a>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
10047d5e:	2417      	movs	r4, #23
10047d60:	193b      	adds	r3, r7, r4
10047d62:	781b      	ldrb	r3, [r3, #0]
10047d64:	b25b      	sxtb	r3, r3
10047d66:	2103      	movs	r1, #3
10047d68:	0018      	movs	r0, r3
10047d6a:	f7ff fed1 	bl	10047b10 <__NVIC_SetPriority>
  for (i=0; i<32; i++)
10047d6e:	0021      	movs	r1, r4
10047d70:	187b      	adds	r3, r7, r1
10047d72:	781a      	ldrb	r2, [r3, #0]
10047d74:	187b      	adds	r3, r7, r1
10047d76:	3201      	adds	r2, #1
10047d78:	701a      	strb	r2, [r3, #0]
10047d7a:	2317      	movs	r3, #23
10047d7c:	18fb      	adds	r3, r7, r3
10047d7e:	781b      	ldrb	r3, [r3, #0]
10047d80:	2b1f      	cmp	r3, #31
10047d82:	d9ec      	bls.n	10047d5e <SystemInit+0x14e>
  __ASM volatile ("cpsie i" : : : "memory");
10047d84:	b662      	cpsie	i
}
10047d86:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
10047d88:	46c0      	nop			@ (mov r8, r8)
10047d8a:	46bd      	mov	sp, r7
10047d8c:	b007      	add	sp, #28
10047d8e:	bd90      	pop	{r4, r7, pc}
10047d90:	48400000 	.word	0x48400000
10047d94:	48500000 	.word	0x48500000
10047d98:	20000004 	.word	0x20000004
10047d9c:	e000ed00 	.word	0xe000ed00
10047da0:	10040000 	.word	0x10040000
10047da4:	fffffeff 	.word	0xfffffeff
10047da8:	fffffbff 	.word	0xfffffbff
10047dac:	10001ef8 	.word	0x10001ef8
10047db0:	fcbceccc 	.word	0xfcbceccc
10047db4:	c0ffffff 	.word	0xc0ffffff
10047db8:	fffffc3f 	.word	0xfffffc3f
10047dbc:	ffffc7ff 	.word	0xffffc7ff

10047dc0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10047dc0:	b580      	push	{r7, lr}
10047dc2:	b082      	sub	sp, #8
10047dc4:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
10047dc6:	4b13      	ldr	r3, [pc, #76]	@ (10047e14 <SystemCoreClockUpdate+0x54>)
10047dc8:	689b      	ldr	r3, [r3, #8]
10047dca:	085b      	lsrs	r3, r3, #1
10047dcc:	b2da      	uxtb	r2, r3
10047dce:	1dfb      	adds	r3, r7, #7
10047dd0:	2101      	movs	r1, #1
10047dd2:	400a      	ands	r2, r1
10047dd4:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
10047dd6:	4b0f      	ldr	r3, [pc, #60]	@ (10047e14 <SystemCoreClockUpdate+0x54>)
10047dd8:	689b      	ldr	r3, [r3, #8]
10047dda:	0a1b      	lsrs	r3, r3, #8
10047ddc:	b2da      	uxtb	r2, r3
10047dde:	1dbb      	adds	r3, r7, #6
10047de0:	2107      	movs	r1, #7
10047de2:	400a      	ands	r2, r1
10047de4:	701a      	strb	r2, [r3, #0]
#endif

  if (directHSE_enabled)
10047de6:	1dfb      	adds	r3, r7, #7
10047de8:	781b      	ldrb	r3, [r3, #0]
10047dea:	2b00      	cmp	r3, #0
10047dec:	d007      	beq.n	10047dfe <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
10047dee:	1dbb      	adds	r3, r7, #6
10047df0:	781b      	ldrb	r3, [r3, #0]
10047df2:	3b01      	subs	r3, #1
10047df4:	4a08      	ldr	r2, [pc, #32]	@ (10047e18 <SystemCoreClockUpdate+0x58>)
10047df6:	40da      	lsrs	r2, r3
10047df8:	4b08      	ldr	r3, [pc, #32]	@ (10047e1c <SystemCoreClockUpdate+0x5c>)
10047dfa:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
10047dfc:	e005      	b.n	10047e0a <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
10047dfe:	1dbb      	adds	r3, r7, #6
10047e00:	781b      	ldrb	r3, [r3, #0]
10047e02:	4a07      	ldr	r2, [pc, #28]	@ (10047e20 <SystemCoreClockUpdate+0x60>)
10047e04:	40da      	lsrs	r2, r3
10047e06:	4b05      	ldr	r3, [pc, #20]	@ (10047e1c <SystemCoreClockUpdate+0x5c>)
10047e08:	601a      	str	r2, [r3, #0]
}
10047e0a:	46c0      	nop			@ (mov r8, r8)
10047e0c:	46bd      	mov	sp, r7
10047e0e:	b002      	add	sp, #8
10047e10:	bd80      	pop	{r7, pc}
10047e12:	46c0      	nop			@ (mov r8, r8)
10047e14:	48400000 	.word	0x48400000
10047e18:	01e84800 	.word	0x01e84800
10047e1c:	20002bfc 	.word	0x20002bfc
10047e20:	03d09000 	.word	0x03d09000

10047e24 <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
10047e24:	4810      	ldr	r0, [pc, #64]	@ (10047e68 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
10047e26:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
10047e28:	f7ff fef2 	bl	10047c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
10047e2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10047e2e:	e003      	b.n	10047e38 <LoopCopyDataInit>

10047e30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
10047e30:	4b0e      	ldr	r3, [pc, #56]	@ (10047e6c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10047e32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10047e34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10047e36:	3104      	adds	r1, #4

10047e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
10047e38:	480d      	ldr	r0, [pc, #52]	@ (10047e70 <LoopForever+0xa>)
  ldr  r3, =_edata
10047e3a:	4b0e      	ldr	r3, [pc, #56]	@ (10047e74 <LoopForever+0xe>)
  adds  r2, r0, r1
10047e3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10047e3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10047e40:	d3f6      	bcc.n	10047e30 <CopyDataInit>
  ldr  r2, =_sbss
10047e42:	4a0d      	ldr	r2, [pc, #52]	@ (10047e78 <LoopForever+0x12>)
  b  LoopFillZerobss
10047e44:	e002      	b.n	10047e4c <LoopFillZerobss>

10047e46 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
10047e46:	2300      	movs	r3, #0
  str  r3, [r2]
10047e48:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10047e4a:	3204      	adds	r2, #4

10047e4c <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
10047e4c:	4b0b      	ldr	r3, [pc, #44]	@ (10047e7c <LoopForever+0x16>)
  cmp  r2, r3
10047e4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
10047e50:	d3f9      	bcc.n	10047e46 <FillZerobss>
  ldr  r2, =_sbssblue
10047e52:	4a0b      	ldr	r2, [pc, #44]	@ (10047e80 <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
10047e54:	e002      	b.n	10047e5c <LoopFillZeroBlueRam>

10047e56 <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
10047e56:	2300      	movs	r3, #0
  str  r3, [r2]
10047e58:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10047e5a:	3204      	adds	r2, #4

10047e5c <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
10047e5c:	4b09      	ldr	r3, [pc, #36]	@ (10047e84 <LoopForever+0x1e>)
  cmp  r2, r3
10047e5e:	429a      	cmp	r2, r3
  bcc  FillZerobssram
10047e60:	d3f9      	bcc.n	10047e56 <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
10047e62:	f7ff fa2d 	bl	100472c0 <main>

10047e66 <LoopForever>:

LoopForever:
    b LoopForever
10047e66:	e7fe      	b.n	10047e66 <LoopForever>
   ldr   r0, =_estack
10047e68:	20006000 	.word	0x20006000
  ldr  r3, =_sidata
10047e6c:	1006a5fc 	.word	0x1006a5fc
  ldr  r0, =_sdata
10047e70:	20002afc 	.word	0x20002afc
  ldr  r3, =_edata
10047e74:	20002dfc 	.word	0x20002dfc
  ldr  r2, =_sbss
10047e78:	20000194 	.word	0x20000194
  ldr  r3, = _ebss
10047e7c:	20002afc 	.word	0x20002afc
  ldr  r2, =_sbssblue
10047e80:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
10047e84:	20000194 	.word	0x20000194

10047e88 <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
10047e88:	e7fe      	b.n	10047e88 <ADC_IRQHandler>
	...

10047e8c <LL_PWR_IsEnabledPUPDCfg>:
  * @brief  Check if pull-up and pull-down configuration is enabled
  * @rmtoll CR1          APC           LL_PWR_IsEnabledPUPDCfg
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledPUPDCfg(void)
{
10047e8c:	b580      	push	{r7, lr}
10047e8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_APC) == (PWR_CR1_APC)) ? 1UL : 0UL);
10047e90:	4b05      	ldr	r3, [pc, #20]	@ (10047ea8 <LL_PWR_IsEnabledPUPDCfg+0x1c>)
10047e92:	681b      	ldr	r3, [r3, #0]
10047e94:	2210      	movs	r2, #16
10047e96:	4013      	ands	r3, r2
10047e98:	2b10      	cmp	r3, #16
10047e9a:	d101      	bne.n	10047ea0 <LL_PWR_IsEnabledPUPDCfg+0x14>
10047e9c:	2301      	movs	r3, #1
10047e9e:	e000      	b.n	10047ea2 <LL_PWR_IsEnabledPUPDCfg+0x16>
10047ea0:	2300      	movs	r3, #0
}
10047ea2:	0018      	movs	r0, r3
10047ea4:	46bd      	mov	sp, r7
10047ea6:	bd80      	pop	{r7, pc}
10047ea8:	48500000 	.word	0x48500000

10047eac <LL_PWR_EnableGPIOPullUp>:
  *         @arg @ref LL_PWR_GPIO_BIT_14
  *         @arg @ref LL_PWR_GPIO_BIT_15
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
10047eac:	b580      	push	{r7, lr}
10047eae:	b082      	sub	sp, #8
10047eb0:	af00      	add	r7, sp, #0
10047eb2:	6078      	str	r0, [r7, #4]
10047eb4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
10047eb6:	687b      	ldr	r3, [r7, #4]
10047eb8:	3304      	adds	r3, #4
10047eba:	681a      	ldr	r2, [r3, #0]
10047ebc:	683b      	ldr	r3, [r7, #0]
10047ebe:	43d9      	mvns	r1, r3
10047ec0:	687b      	ldr	r3, [r7, #4]
10047ec2:	3304      	adds	r3, #4
10047ec4:	400a      	ands	r2, r1
10047ec6:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
10047ec8:	687b      	ldr	r3, [r7, #4]
10047eca:	6819      	ldr	r1, [r3, #0]
10047ecc:	687b      	ldr	r3, [r7, #4]
10047ece:	683a      	ldr	r2, [r7, #0]
10047ed0:	430a      	orrs	r2, r1
10047ed2:	601a      	str	r2, [r3, #0]
}
10047ed4:	46c0      	nop			@ (mov r8, r8)
10047ed6:	46bd      	mov	sp, r7
10047ed8:	b002      	add	sp, #8
10047eda:	bd80      	pop	{r7, pc}

10047edc <LL_AHB1_GRP1_EnableClock>:
{
10047edc:	b580      	push	{r7, lr}
10047ede:	b084      	sub	sp, #16
10047ee0:	af00      	add	r7, sp, #0
10047ee2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10047ee4:	4b07      	ldr	r3, [pc, #28]	@ (10047f04 <LL_AHB1_GRP1_EnableClock+0x28>)
10047ee6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10047ee8:	4b06      	ldr	r3, [pc, #24]	@ (10047f04 <LL_AHB1_GRP1_EnableClock+0x28>)
10047eea:	687a      	ldr	r2, [r7, #4]
10047eec:	430a      	orrs	r2, r1
10047eee:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10047ef0:	4b04      	ldr	r3, [pc, #16]	@ (10047f04 <LL_AHB1_GRP1_EnableClock+0x28>)
10047ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10047ef4:	687a      	ldr	r2, [r7, #4]
10047ef6:	4013      	ands	r3, r2
10047ef8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10047efa:	68fb      	ldr	r3, [r7, #12]
}
10047efc:	46c0      	nop			@ (mov r8, r8)
10047efe:	46bd      	mov	sp, r7
10047f00:	b004      	add	sp, #16
10047f02:	bd80      	pop	{r7, pc}
10047f04:	48400000 	.word	0x48400000

10047f08 <LL_APB1_GRP1_EnableClock>:
{
10047f08:	b580      	push	{r7, lr}
10047f0a:	b084      	sub	sp, #16
10047f0c:	af00      	add	r7, sp, #0
10047f0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
10047f10:	4b07      	ldr	r3, [pc, #28]	@ (10047f30 <LL_APB1_GRP1_EnableClock+0x28>)
10047f12:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10047f14:	4b06      	ldr	r3, [pc, #24]	@ (10047f30 <LL_APB1_GRP1_EnableClock+0x28>)
10047f16:	687a      	ldr	r2, [r7, #4]
10047f18:	430a      	orrs	r2, r1
10047f1a:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10047f1c:	4b04      	ldr	r3, [pc, #16]	@ (10047f30 <LL_APB1_GRP1_EnableClock+0x28>)
10047f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10047f20:	687a      	ldr	r2, [r7, #4]
10047f22:	4013      	ands	r3, r2
10047f24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10047f26:	68fb      	ldr	r3, [r7, #12]
}
10047f28:	46c0      	nop			@ (mov r8, r8)
10047f2a:	46bd      	mov	sp, r7
10047f2c:	b004      	add	sp, #16
10047f2e:	bd80      	pop	{r7, pc}
10047f30:	48400000 	.word	0x48400000

10047f34 <LL_APB1_GRP1_DisableClock>:
{
10047f34:	b580      	push	{r7, lr}
10047f36:	b082      	sub	sp, #8
10047f38:	af00      	add	r7, sp, #0
10047f3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
10047f3c:	4b05      	ldr	r3, [pc, #20]	@ (10047f54 <LL_APB1_GRP1_DisableClock+0x20>)
10047f3e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
10047f40:	687b      	ldr	r3, [r7, #4]
10047f42:	43d9      	mvns	r1, r3
10047f44:	4b03      	ldr	r3, [pc, #12]	@ (10047f54 <LL_APB1_GRP1_DisableClock+0x20>)
10047f46:	400a      	ands	r2, r1
10047f48:	659a      	str	r2, [r3, #88]	@ 0x58
}
10047f4a:	46c0      	nop			@ (mov r8, r8)
10047f4c:	46bd      	mov	sp, r7
10047f4e:	b002      	add	sp, #8
10047f50:	bd80      	pop	{r7, pc}
10047f52:	46c0      	nop			@ (mov r8, r8)
10047f54:	48400000 	.word	0x48400000

10047f58 <BSP_LED_Init>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
10047f58:	b590      	push	{r4, r7, lr}
10047f5a:	b089      	sub	sp, #36	@ 0x24
10047f5c:	af00      	add	r7, sp, #0
10047f5e:	0002      	movs	r2, r0
10047f60:	1dfb      	adds	r3, r7, #7
10047f62:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LD1)
10047f64:	1dfb      	adds	r3, r7, #7
10047f66:	781b      	ldrb	r3, [r3, #0]
10047f68:	2b00      	cmp	r3, #0
10047f6a:	d103      	bne.n	10047f74 <BSP_LED_Init+0x1c>
  {
    LD1_GPIO_CLK_ENABLE();
10047f6c:	2008      	movs	r0, #8
10047f6e:	f7ff ffb5 	bl	10047edc <LL_AHB1_GRP1_EnableClock>
10047f72:	e00a      	b.n	10047f8a <BSP_LED_Init+0x32>
  }
  else if (Led == LD2)
10047f74:	1dfb      	adds	r3, r7, #7
10047f76:	781b      	ldrb	r3, [r3, #0]
10047f78:	2b01      	cmp	r3, #1
10047f7a:	d103      	bne.n	10047f84 <BSP_LED_Init+0x2c>
  {
    LD2_GPIO_CLK_ENABLE();
10047f7c:	2008      	movs	r0, #8
10047f7e:	f7ff ffad 	bl	10047edc <LL_AHB1_GRP1_EnableClock>
10047f82:	e002      	b.n	10047f8a <BSP_LED_Init+0x32>
  }
  else /* Led = LD3 */
  {
    LD3_GPIO_CLK_ENABLE();
10047f84:	2008      	movs	r0, #8
10047f86:	f7ff ffa9 	bl	10047edc <LL_AHB1_GRP1_EnableClock>
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
10047f8a:	1dfb      	adds	r3, r7, #7
10047f8c:	781a      	ldrb	r2, [r3, #0]
10047f8e:	4b28      	ldr	r3, [pc, #160]	@ (10048030 <BSP_LED_Init+0xd8>)
10047f90:	0052      	lsls	r2, r2, #1
10047f92:	5ad3      	ldrh	r3, [r2, r3]
10047f94:	001a      	movs	r2, r3
10047f96:	240c      	movs	r4, #12
10047f98:	193b      	adds	r3, r7, r4
10047f9a:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
10047f9c:	193b      	adds	r3, r7, r4
10047f9e:	2201      	movs	r2, #1
10047fa0:	605a      	str	r2, [r3, #4]
  GPIO_Init.Pull  = GPIO_PULLUP;
10047fa2:	193b      	adds	r3, r7, r4
10047fa4:	2201      	movs	r2, #1
10047fa6:	609a      	str	r2, [r3, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
10047fa8:	193b      	adds	r3, r7, r4
10047faa:	2202      	movs	r2, #2
10047fac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
10047fae:	1dfb      	adds	r3, r7, #7
10047fb0:	781a      	ldrb	r2, [r3, #0]
10047fb2:	4b20      	ldr	r3, [pc, #128]	@ (10048034 <BSP_LED_Init+0xdc>)
10047fb4:	0092      	lsls	r2, r2, #2
10047fb6:	58d3      	ldr	r3, [r2, r3]
10047fb8:	193a      	adds	r2, r7, r4
10047fba:	0011      	movs	r1, r2
10047fbc:	0018      	movs	r0, r3
10047fbe:	f000 fd0b 	bl	100489d8 <HAL_GPIO_Init>

  if( LL_PWR_IsEnabledPUPDCfg() != 0)
10047fc2:	f7ff ff63 	bl	10047e8c <LL_PWR_IsEnabledPUPDCfg>
10047fc6:	1e03      	subs	r3, r0, #0
10047fc8:	d01f      	beq.n	1004800a <BSP_LED_Init+0xb2>
  {
    if (LED_PORT[Led] == GPIOA)
10047fca:	1dfb      	adds	r3, r7, #7
10047fcc:	781a      	ldrb	r2, [r3, #0]
10047fce:	4b19      	ldr	r3, [pc, #100]	@ (10048034 <BSP_LED_Init+0xdc>)
10047fd0:	0092      	lsls	r2, r2, #2
10047fd2:	58d2      	ldr	r2, [r2, r3]
10047fd4:	2390      	movs	r3, #144	@ 0x90
10047fd6:	05db      	lsls	r3, r3, #23
10047fd8:	429a      	cmp	r2, r3
10047fda:	d106      	bne.n	10047fea <BSP_LED_Init+0x92>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
10047fdc:	193b      	adds	r3, r7, r4
10047fde:	681b      	ldr	r3, [r3, #0]
10047fe0:	4a15      	ldr	r2, [pc, #84]	@ (10048038 <BSP_LED_Init+0xe0>)
10047fe2:	0019      	movs	r1, r3
10047fe4:	0010      	movs	r0, r2
10047fe6:	f7ff ff61 	bl	10047eac <LL_PWR_EnableGPIOPullUp>
    }
     if (LED_PORT[Led] == GPIOB)
10047fea:	1dfb      	adds	r3, r7, #7
10047fec:	781a      	ldrb	r2, [r3, #0]
10047fee:	4b11      	ldr	r3, [pc, #68]	@ (10048034 <BSP_LED_Init+0xdc>)
10047ff0:	0092      	lsls	r2, r2, #2
10047ff2:	58d3      	ldr	r3, [r2, r3]
10047ff4:	4a11      	ldr	r2, [pc, #68]	@ (1004803c <BSP_LED_Init+0xe4>)
10047ff6:	4293      	cmp	r3, r2
10047ff8:	d107      	bne.n	1004800a <BSP_LED_Init+0xb2>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_B, GPIO_Init.Pin);
10047ffa:	230c      	movs	r3, #12
10047ffc:	18fb      	adds	r3, r7, r3
10047ffe:	681b      	ldr	r3, [r3, #0]
10048000:	4a0f      	ldr	r2, [pc, #60]	@ (10048040 <BSP_LED_Init+0xe8>)
10048002:	0019      	movs	r1, r3
10048004:	0010      	movs	r0, r2
10048006:	f7ff ff51 	bl	10047eac <LL_PWR_EnableGPIOPullUp>
    }
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
1004800a:	1dfb      	adds	r3, r7, #7
1004800c:	781a      	ldrb	r2, [r3, #0]
1004800e:	4b09      	ldr	r3, [pc, #36]	@ (10048034 <BSP_LED_Init+0xdc>)
10048010:	0092      	lsls	r2, r2, #2
10048012:	58d0      	ldr	r0, [r2, r3]
10048014:	1dfb      	adds	r3, r7, #7
10048016:	781a      	ldrb	r2, [r3, #0]
10048018:	4b05      	ldr	r3, [pc, #20]	@ (10048030 <BSP_LED_Init+0xd8>)
1004801a:	0052      	lsls	r2, r2, #1
1004801c:	5ad3      	ldrh	r3, [r2, r3]
1004801e:	2201      	movs	r2, #1
10048020:	0019      	movs	r1, r3
10048022:	f000 ff7e 	bl	10048f22 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
10048026:	2300      	movs	r3, #0
}
10048028:	0018      	movs	r0, r3
1004802a:	46bd      	mov	sp, r7
1004802c:	b009      	add	sp, #36	@ 0x24
1004802e:	bd90      	pop	{r4, r7, pc}
10048030:	20002c00 	.word	0x20002c00
10048034:	20002c08 	.word	0x20002c08
10048038:	48500020 	.word	0x48500020
1004803c:	48100000 	.word	0x48100000
10048040:	48500028 	.word	0x48500028

10048044 <BSP_LED_On>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
10048044:	b580      	push	{r7, lr}
10048046:	b082      	sub	sp, #8
10048048:	af00      	add	r7, sp, #0
1004804a:	0002      	movs	r2, r0
1004804c:	1dfb      	adds	r3, r7, #7
1004804e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
10048050:	1dfb      	adds	r3, r7, #7
10048052:	781a      	ldrb	r2, [r3, #0]
10048054:	4b08      	ldr	r3, [pc, #32]	@ (10048078 <BSP_LED_On+0x34>)
10048056:	0092      	lsls	r2, r2, #2
10048058:	58d0      	ldr	r0, [r2, r3]
1004805a:	1dfb      	adds	r3, r7, #7
1004805c:	781a      	ldrb	r2, [r3, #0]
1004805e:	4b07      	ldr	r3, [pc, #28]	@ (1004807c <BSP_LED_On+0x38>)
10048060:	0052      	lsls	r2, r2, #1
10048062:	5ad3      	ldrh	r3, [r2, r3]
10048064:	2200      	movs	r2, #0
10048066:	0019      	movs	r1, r3
10048068:	f000 ff5b 	bl	10048f22 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
1004806c:	2300      	movs	r3, #0
}
1004806e:	0018      	movs	r0, r3
10048070:	46bd      	mov	sp, r7
10048072:	b002      	add	sp, #8
10048074:	bd80      	pop	{r7, pc}
10048076:	46c0      	nop			@ (mov r8, r8)
10048078:	20002c08 	.word	0x20002c08
1004807c:	20002c00 	.word	0x20002c00

10048080 <BSP_LED_Off>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
10048080:	b580      	push	{r7, lr}
10048082:	b082      	sub	sp, #8
10048084:	af00      	add	r7, sp, #0
10048086:	0002      	movs	r2, r0
10048088:	1dfb      	adds	r3, r7, #7
1004808a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
1004808c:	1dfb      	adds	r3, r7, #7
1004808e:	781a      	ldrb	r2, [r3, #0]
10048090:	4b08      	ldr	r3, [pc, #32]	@ (100480b4 <BSP_LED_Off+0x34>)
10048092:	0092      	lsls	r2, r2, #2
10048094:	58d0      	ldr	r0, [r2, r3]
10048096:	1dfb      	adds	r3, r7, #7
10048098:	781a      	ldrb	r2, [r3, #0]
1004809a:	4b07      	ldr	r3, [pc, #28]	@ (100480b8 <BSP_LED_Off+0x38>)
1004809c:	0052      	lsls	r2, r2, #1
1004809e:	5ad3      	ldrh	r3, [r2, r3]
100480a0:	2201      	movs	r2, #1
100480a2:	0019      	movs	r1, r3
100480a4:	f000 ff3d 	bl	10048f22 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
100480a8:	2300      	movs	r3, #0
}
100480aa:	0018      	movs	r0, r3
100480ac:	46bd      	mov	sp, r7
100480ae:	b002      	add	sp, #8
100480b0:	bd80      	pop	{r7, pc}
100480b2:	46c0      	nop			@ (mov r8, r8)
100480b4:	20002c08 	.word	0x20002c08
100480b8:	20002c00 	.word	0x20002c00

100480bc <BSP_PB_IRQHandler>:
  * @param  GPIO_Pin Contains the pin state of GPIO when the interrupt occurred
  * @retval None.
  */

void BSP_PB_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
100480bc:	b580      	push	{r7, lr}
100480be:	b082      	sub	sp, #8
100480c0:	af00      	add	r7, sp, #0
100480c2:	6078      	str	r0, [r7, #4]
100480c4:	000a      	movs	r2, r1
100480c6:	1cbb      	adds	r3, r7, #2
100480c8:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_EXTI_IRQHandler( GPIOx, GPIO_Pin);
100480ca:	1cbb      	adds	r3, r7, #2
100480cc:	881a      	ldrh	r2, [r3, #0]
100480ce:	687b      	ldr	r3, [r7, #4]
100480d0:	0011      	movs	r1, r2
100480d2:	0018      	movs	r0, r3
100480d4:	f000 ff42 	bl	10048f5c <HAL_GPIO_EXTI_IRQHandler>
}
100480d8:	46c0      	nop			@ (mov r8, r8)
100480da:	46bd      	mov	sp, r7
100480dc:	b002      	add	sp, #8
100480de:	bd80      	pop	{r7, pc}

100480e0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code.
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
100480e0:	b580      	push	{r7, lr}
100480e2:	b084      	sub	sp, #16
100480e4:	af00      	add	r7, sp, #0
100480e6:	0002      	movs	r2, r0
100480e8:	6039      	str	r1, [r7, #0]
100480ea:	1dfb      	adds	r3, r7, #7
100480ec:	701a      	strb	r2, [r3, #0]
  int32_t status = BSP_ERROR_NONE;
100480ee:	2300      	movs	r3, #0
100480f0:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
100480f2:	683b      	ldr	r3, [r7, #0]
100480f4:	2b00      	cmp	r3, #0
100480f6:	d103      	bne.n	10048100 <BSP_COM_Init+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
100480f8:	2302      	movs	r3, #2
100480fa:	425b      	negs	r3, r3
100480fc:	60fb      	str	r3, [r7, #12]
100480fe:	e05a      	b.n	100481b6 <BSP_COM_Init+0xd6>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
10048100:	1dfb      	adds	r3, r7, #7
10048102:	7819      	ldrb	r1, [r3, #0]
10048104:	1dfb      	adds	r3, r7, #7
10048106:	781a      	ldrb	r2, [r3, #0]
10048108:	4b2d      	ldr	r3, [pc, #180]	@ (100481c0 <BSP_COM_Init+0xe0>)
1004810a:	0089      	lsls	r1, r1, #2
1004810c:	58c9      	ldr	r1, [r1, r3]
1004810e:	4b2d      	ldr	r3, [pc, #180]	@ (100481c4 <BSP_COM_Init+0xe4>)
10048110:	20cc      	movs	r0, #204	@ 0xcc
10048112:	4342      	muls	r2, r0
10048114:	50d1      	str	r1, [r2, r3]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
#else
    if (IsComMspCbValid[COM] == 0U)
10048116:	1dfb      	adds	r3, r7, #7
10048118:	781a      	ldrb	r2, [r3, #0]
1004811a:	4b2b      	ldr	r3, [pc, #172]	@ (100481c8 <BSP_COM_Init+0xe8>)
1004811c:	0092      	lsls	r2, r2, #2
1004811e:	58d3      	ldr	r3, [r2, r3]
10048120:	2b00      	cmp	r3, #0
10048122:	d109      	bne.n	10048138 <BSP_COM_Init+0x58>
    {
      /* Register the MSP callbacks */
      if (BSP_COM_RegisterDefaultMspCallbacks(COM) != BSP_ERROR_NONE)
10048124:	1dfb      	adds	r3, r7, #7
10048126:	781b      	ldrb	r3, [r3, #0]
10048128:	0018      	movs	r0, r3
1004812a:	f000 f84f 	bl	100481cc <BSP_COM_RegisterDefaultMspCallbacks>
1004812e:	1e03      	subs	r3, r0, #0
10048130:	d002      	beq.n	10048138 <BSP_COM_Init+0x58>
      {
        status = BSP_ERROR_MSP_FAILURE;
10048132:	230a      	movs	r3, #10
10048134:	425b      	negs	r3, r3
10048136:	60fb      	str	r3, [r7, #12]
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
10048138:	68fb      	ldr	r3, [r7, #12]
1004813a:	2b00      	cmp	r3, #0
1004813c:	d10f      	bne.n	1004815e <BSP_COM_Init+0x7e>
    {
      if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
1004813e:	1dfb      	adds	r3, r7, #7
10048140:	781b      	ldrb	r3, [r3, #0]
10048142:	22cc      	movs	r2, #204	@ 0xcc
10048144:	435a      	muls	r2, r3
10048146:	4b1f      	ldr	r3, [pc, #124]	@ (100481c4 <BSP_COM_Init+0xe4>)
10048148:	18d3      	adds	r3, r2, r3
1004814a:	683a      	ldr	r2, [r7, #0]
1004814c:	0011      	movs	r1, r2
1004814e:	0018      	movs	r0, r3
10048150:	f000 f87a 	bl	10048248 <MX_USART1_Init>
10048154:	1e03      	subs	r3, r0, #0
10048156:	d002      	beq.n	1004815e <BSP_COM_Init+0x7e>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
10048158:	2304      	movs	r3, #4
1004815a:	425b      	negs	r3, r3
1004815c:	60fb      	str	r3, [r7, #12]
      }
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&hcom_uart[COM], UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
1004815e:	1dfb      	adds	r3, r7, #7
10048160:	781b      	ldrb	r3, [r3, #0]
10048162:	22cc      	movs	r2, #204	@ 0xcc
10048164:	435a      	muls	r2, r3
10048166:	4b17      	ldr	r3, [pc, #92]	@ (100481c4 <BSP_COM_Init+0xe4>)
10048168:	18d3      	adds	r3, r2, r3
1004816a:	2100      	movs	r1, #0
1004816c:	0018      	movs	r0, r3
1004816e:	f006 ff8e 	bl	1004f08e <HAL_UARTEx_SetTxFifoThreshold>
10048172:	1e03      	subs	r3, r0, #0
10048174:	d002      	beq.n	1004817c <BSP_COM_Init+0x9c>
    {
      status = BSP_ERROR_PERIPH_FAILURE;
10048176:	2304      	movs	r3, #4
10048178:	425b      	negs	r3, r3
1004817a:	60fb      	str	r3, [r7, #12]
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&hcom_uart[COM], UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
1004817c:	1dfb      	adds	r3, r7, #7
1004817e:	781b      	ldrb	r3, [r3, #0]
10048180:	22cc      	movs	r2, #204	@ 0xcc
10048182:	435a      	muls	r2, r3
10048184:	4b0f      	ldr	r3, [pc, #60]	@ (100481c4 <BSP_COM_Init+0xe4>)
10048186:	18d3      	adds	r3, r2, r3
10048188:	2100      	movs	r1, #0
1004818a:	0018      	movs	r0, r3
1004818c:	f006 ffbe 	bl	1004f10c <HAL_UARTEx_SetRxFifoThreshold>
10048190:	1e03      	subs	r3, r0, #0
10048192:	d002      	beq.n	1004819a <BSP_COM_Init+0xba>
    {
      status = BSP_ERROR_PERIPH_FAILURE;
10048194:	2304      	movs	r3, #4
10048196:	425b      	negs	r3, r3
10048198:	60fb      	str	r3, [r7, #12]
    }
    if (HAL_UARTEx_EnableFifoMode(&hcom_uart[COM]) != HAL_OK)
1004819a:	1dfb      	adds	r3, r7, #7
1004819c:	781b      	ldrb	r3, [r3, #0]
1004819e:	22cc      	movs	r2, #204	@ 0xcc
100481a0:	435a      	muls	r2, r3
100481a2:	4b08      	ldr	r3, [pc, #32]	@ (100481c4 <BSP_COM_Init+0xe4>)
100481a4:	18d3      	adds	r3, r2, r3
100481a6:	0018      	movs	r0, r3
100481a8:	f006 ff34 	bl	1004f014 <HAL_UARTEx_EnableFifoMode>
100481ac:	1e03      	subs	r3, r0, #0
100481ae:	d002      	beq.n	100481b6 <BSP_COM_Init+0xd6>
    {
      status = BSP_ERROR_PERIPH_FAILURE;
100481b0:	2304      	movs	r3, #4
100481b2:	425b      	negs	r3, r3
100481b4:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
100481b6:	68fb      	ldr	r3, [r7, #12]
}
100481b8:	0018      	movs	r0, r3
100481ba:	46bd      	mov	sp, r7
100481bc:	b004      	add	sp, #16
100481be:	bd80      	pop	{r7, pc}
100481c0:	20002c14 	.word	0x20002c14
100481c4:	200025d0 	.word	0x200025d0
100481c8:	2000269c 	.word	0x2000269c

100481cc <BSP_COM_RegisterDefaultMspCallbacks>:
  * @param  COM COM port.
  *          This parameter can be COM1.
  * @retval BSP status.
  */
int32_t BSP_COM_RegisterDefaultMspCallbacks(COM_TypeDef COM)
{
100481cc:	b580      	push	{r7, lr}
100481ce:	b084      	sub	sp, #16
100481d0:	af00      	add	r7, sp, #0
100481d2:	0002      	movs	r2, r0
100481d4:	1dfb      	adds	r3, r7, #7
100481d6:	701a      	strb	r2, [r3, #0]
  int32_t status = BSP_ERROR_NONE;
100481d8:	2300      	movs	r3, #0
100481da:	60fb      	str	r3, [r7, #12]

  /* Register MspInit/MspDeInit callbacks */
  if (HAL_UART_RegisterCallback(&hcom_uart[COM], HAL_UART_MSPINIT_CB_ID, UART_MspInit) != HAL_OK)
100481dc:	1dfb      	adds	r3, r7, #7
100481de:	781b      	ldrb	r3, [r3, #0]
100481e0:	22cc      	movs	r2, #204	@ 0xcc
100481e2:	435a      	muls	r2, r3
100481e4:	4b14      	ldr	r3, [pc, #80]	@ (10048238 <BSP_COM_RegisterDefaultMspCallbacks+0x6c>)
100481e6:	18d3      	adds	r3, r2, r3
100481e8:	4a14      	ldr	r2, [pc, #80]	@ (1004823c <BSP_COM_RegisterDefaultMspCallbacks+0x70>)
100481ea:	210b      	movs	r1, #11
100481ec:	0018      	movs	r0, r3
100481ee:	f006 fa11 	bl	1004e614 <HAL_UART_RegisterCallback>
100481f2:	1e03      	subs	r3, r0, #0
100481f4:	d003      	beq.n	100481fe <BSP_COM_RegisterDefaultMspCallbacks+0x32>
  {
    status = BSP_ERROR_PERIPH_FAILURE;
100481f6:	2304      	movs	r3, #4
100481f8:	425b      	negs	r3, r3
100481fa:	60fb      	str	r3, [r7, #12]
100481fc:	e016      	b.n	1004822c <BSP_COM_RegisterDefaultMspCallbacks+0x60>
  }
  else if (HAL_UART_RegisterCallback(&hcom_uart[COM], HAL_UART_MSPDEINIT_CB_ID, UART_MspDeInit) != HAL_OK)
100481fe:	1dfb      	adds	r3, r7, #7
10048200:	781b      	ldrb	r3, [r3, #0]
10048202:	22cc      	movs	r2, #204	@ 0xcc
10048204:	435a      	muls	r2, r3
10048206:	4b0c      	ldr	r3, [pc, #48]	@ (10048238 <BSP_COM_RegisterDefaultMspCallbacks+0x6c>)
10048208:	18d3      	adds	r3, r2, r3
1004820a:	4a0d      	ldr	r2, [pc, #52]	@ (10048240 <BSP_COM_RegisterDefaultMspCallbacks+0x74>)
1004820c:	210c      	movs	r1, #12
1004820e:	0018      	movs	r0, r3
10048210:	f006 fa00 	bl	1004e614 <HAL_UART_RegisterCallback>
10048214:	1e03      	subs	r3, r0, #0
10048216:	d003      	beq.n	10048220 <BSP_COM_RegisterDefaultMspCallbacks+0x54>
  {
    status = BSP_ERROR_PERIPH_FAILURE;
10048218:	2304      	movs	r3, #4
1004821a:	425b      	negs	r3, r3
1004821c:	60fb      	str	r3, [r7, #12]
1004821e:	e005      	b.n	1004822c <BSP_COM_RegisterDefaultMspCallbacks+0x60>
  }
  else
  {
    IsComMspCbValid[COM] = 1U;
10048220:	1dfb      	adds	r3, r7, #7
10048222:	781a      	ldrb	r2, [r3, #0]
10048224:	4b07      	ldr	r3, [pc, #28]	@ (10048244 <BSP_COM_RegisterDefaultMspCallbacks+0x78>)
10048226:	0092      	lsls	r2, r2, #2
10048228:	2101      	movs	r1, #1
1004822a:	50d1      	str	r1, [r2, r3]
  }
  /* Return BSP status */
  return status;
1004822c:	68fb      	ldr	r3, [r7, #12]
}
1004822e:	0018      	movs	r0, r3
10048230:	46bd      	mov	sp, r7
10048232:	b004      	add	sp, #16
10048234:	bd80      	pop	{r7, pc}
10048236:	46c0      	nop			@ (mov r8, r8)
10048238:	200025d0 	.word	0x200025d0
1004823c:	100482ad 	.word	0x100482ad
10048240:	10048339 	.word	0x10048339
10048244:	2000269c 	.word	0x2000269c

10048248 <MX_USART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
10048248:	b580      	push	{r7, lr}
1004824a:	b082      	sub	sp, #8
1004824c:	af00      	add	r7, sp, #0
1004824e:	6078      	str	r0, [r7, #4]
10048250:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
10048252:	683b      	ldr	r3, [r7, #0]
10048254:	681a      	ldr	r2, [r3, #0]
10048256:	687b      	ldr	r3, [r7, #4]
10048258:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
1004825a:	683b      	ldr	r3, [r7, #0]
1004825c:	685a      	ldr	r2, [r3, #4]
1004825e:	687b      	ldr	r3, [r7, #4]
10048260:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
10048262:	683b      	ldr	r3, [r7, #0]
10048264:	891b      	ldrh	r3, [r3, #8]
10048266:	001a      	movs	r2, r3
10048268:	687b      	ldr	r3, [r7, #4]
1004826a:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
1004826c:	683b      	ldr	r3, [r7, #0]
1004826e:	895b      	ldrh	r3, [r3, #10]
10048270:	001a      	movs	r2, r3
10048272:	687b      	ldr	r3, [r7, #4]
10048274:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
10048276:	687b      	ldr	r3, [r7, #4]
10048278:	220c      	movs	r2, #12
1004827a:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
1004827c:	683b      	ldr	r3, [r7, #0]
1004827e:	899b      	ldrh	r3, [r3, #12]
10048280:	001a      	movs	r2, r3
10048282:	687b      	ldr	r3, [r7, #4]
10048284:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
10048286:	687b      	ldr	r3, [r7, #4]
10048288:	2280      	movs	r2, #128	@ 0x80
1004828a:	0212      	lsls	r2, r2, #8
1004828c:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
1004828e:	687b      	ldr	r3, [r7, #4]
10048290:	2200      	movs	r2, #0
10048292:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
10048294:	687b      	ldr	r3, [r7, #4]
10048296:	2200      	movs	r2, #0
10048298:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
1004829a:	687b      	ldr	r3, [r7, #4]
1004829c:	0018      	movs	r0, r3
1004829e:	f006 f951 	bl	1004e544 <HAL_UART_Init>
100482a2:	0003      	movs	r3, r0
}
100482a4:	0018      	movs	r0, r3
100482a6:	46bd      	mov	sp, r7
100482a8:	b002      	add	sp, #8
100482aa:	bd80      	pop	{r7, pc}

100482ac <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
100482ac:	b590      	push	{r4, r7, lr}
100482ae:	b089      	sub	sp, #36	@ 0x24
100482b0:	af00      	add	r7, sp, #0
100482b2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable COM and GPIO clocks */
  COM1_TX_GPIO_CLK_ENABLE();
100482b4:	2004      	movs	r0, #4
100482b6:	f7ff fe11 	bl	10047edc <LL_AHB1_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
100482ba:	2008      	movs	r0, #8
100482bc:	f7ff fe0e 	bl	10047edc <LL_AHB1_GRP1_EnableClock>
  COM1_CLK_ENABLE();
100482c0:	2380      	movs	r3, #128	@ 0x80
100482c2:	00db      	lsls	r3, r3, #3
100482c4:	0018      	movs	r0, r3
100482c6:	f7ff fe1f 	bl	10047f08 <LL_APB1_GRP1_EnableClock>

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM1_TX_PIN;
100482ca:	240c      	movs	r4, #12
100482cc:	193b      	adds	r3, r7, r4
100482ce:	2202      	movs	r2, #2
100482d0:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
100482d2:	193b      	adds	r3, r7, r4
100482d4:	2202      	movs	r2, #2
100482d6:	605a      	str	r2, [r3, #4]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
100482d8:	193b      	adds	r3, r7, r4
100482da:	2202      	movs	r2, #2
100482dc:	60da      	str	r2, [r3, #12]
  GPIO_Init.Pull      = GPIO_PULLUP;
100482de:	193b      	adds	r3, r7, r4
100482e0:	2201      	movs	r2, #1
100482e2:	609a      	str	r2, [r3, #8]
  GPIO_Init.Alternate = COM1_TX_AF;
100482e4:	193b      	adds	r3, r7, r4
100482e6:	2202      	movs	r2, #2
100482e8:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &GPIO_Init);
100482ea:	193a      	adds	r2, r7, r4
100482ec:	2390      	movs	r3, #144	@ 0x90
100482ee:	05db      	lsls	r3, r3, #23
100482f0:	0011      	movs	r1, r2
100482f2:	0018      	movs	r0, r3
100482f4:	f000 fb70 	bl	100489d8 <HAL_GPIO_Init>
  if( LL_PWR_IsEnabledPUPDCfg() != 0)
100482f8:	f7ff fdc8 	bl	10047e8c <LL_PWR_IsEnabledPUPDCfg>
100482fc:	1e03      	subs	r3, r0, #0
100482fe:	d006      	beq.n	1004830e <UART_MspInit+0x62>
  {
    LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
10048300:	193b      	adds	r3, r7, r4
10048302:	681b      	ldr	r3, [r3, #0]
10048304:	4a0a      	ldr	r2, [pc, #40]	@ (10048330 <UART_MspInit+0x84>)
10048306:	0019      	movs	r1, r3
10048308:	0010      	movs	r0, r2
1004830a:	f7ff fdcf 	bl	10047eac <LL_PWR_EnableGPIOPullUp>
  }
  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM1_RX_PIN;
1004830e:	210c      	movs	r1, #12
10048310:	187b      	adds	r3, r7, r1
10048312:	2201      	movs	r2, #1
10048314:	601a      	str	r2, [r3, #0]
  GPIO_Init.Alternate = COM1_RX_AF;
10048316:	187b      	adds	r3, r7, r1
10048318:	2200      	movs	r2, #0
1004831a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &GPIO_Init);
1004831c:	187b      	adds	r3, r7, r1
1004831e:	4a05      	ldr	r2, [pc, #20]	@ (10048334 <UART_MspInit+0x88>)
10048320:	0019      	movs	r1, r3
10048322:	0010      	movs	r0, r2
10048324:	f000 fb58 	bl	100489d8 <HAL_GPIO_Init>
}
10048328:	46c0      	nop			@ (mov r8, r8)
1004832a:	46bd      	mov	sp, r7
1004832c:	b009      	add	sp, #36	@ 0x24
1004832e:	bd90      	pop	{r4, r7, pc}
10048330:	48500020 	.word	0x48500020
10048334:	48100000 	.word	0x48100000

10048338 <UART_MspDeInit>:
  * @brief  Deinitialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspDeInit(UART_HandleTypeDef *huart)
{
10048338:	b580      	push	{r7, lr}
1004833a:	b082      	sub	sp, #8
1004833c:	af00      	add	r7, sp, #0
1004833e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Disable GPIOs and COM clock */
  HAL_GPIO_DeInit(COM1_TX_GPIO_PORT, COM1_TX_PIN);
10048340:	2390      	movs	r3, #144	@ 0x90
10048342:	05db      	lsls	r3, r3, #23
10048344:	2102      	movs	r1, #2
10048346:	0018      	movs	r0, r3
10048348:	f000 fceb 	bl	10048d22 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(COM1_RX_GPIO_PORT, COM1_RX_PIN);
1004834c:	4b06      	ldr	r3, [pc, #24]	@ (10048368 <UART_MspDeInit+0x30>)
1004834e:	2101      	movs	r1, #1
10048350:	0018      	movs	r0, r3
10048352:	f000 fce6 	bl	10048d22 <HAL_GPIO_DeInit>
  COM1_CLK_DISABLE();
10048356:	2380      	movs	r3, #128	@ 0x80
10048358:	00db      	lsls	r3, r3, #3
1004835a:	0018      	movs	r0, r3
1004835c:	f7ff fdea 	bl	10047f34 <LL_APB1_GRP1_DisableClock>
}
10048360:	46c0      	nop			@ (mov r8, r8)
10048362:	46bd      	mov	sp, r7
10048364:	b002      	add	sp, #8
10048366:	bd80      	pop	{r7, pc}
10048368:	48100000 	.word	0x48100000

1004836c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
1004836c:	b580      	push	{r7, lr}
1004836e:	b082      	sub	sp, #8
10048370:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
10048372:	1dfb      	adds	r3, r7, #7
10048374:	2200      	movs	r2, #0
10048376:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10048378:	2003      	movs	r0, #3
1004837a:	f000 f80f 	bl	1004839c <HAL_InitTick>
1004837e:	1e03      	subs	r3, r0, #0
10048380:	d003      	beq.n	1004838a <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
10048382:	1dfb      	adds	r3, r7, #7
10048384:	2201      	movs	r2, #1
10048386:	701a      	strb	r2, [r3, #0]
10048388:	e001      	b.n	1004838e <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
1004838a:	f7ff f93b 	bl	10047604 <HAL_MspInit>
  }

  /* Return function status */
  return status;
1004838e:	1dfb      	adds	r3, r7, #7
10048390:	781b      	ldrb	r3, [r3, #0]
}
10048392:	0018      	movs	r0, r3
10048394:	46bd      	mov	sp, r7
10048396:	b002      	add	sp, #8
10048398:	bd80      	pop	{r7, pc}
	...

1004839c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
1004839c:	b590      	push	{r4, r7, lr}
1004839e:	b085      	sub	sp, #20
100483a0:	af00      	add	r7, sp, #0
100483a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
100483a4:	230f      	movs	r3, #15
100483a6:	18fb      	adds	r3, r7, r3
100483a8:	2200      	movs	r2, #0
100483aa:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
100483ac:	4b1d      	ldr	r3, [pc, #116]	@ (10048424 <HAL_InitTick+0x88>)
100483ae:	781b      	ldrb	r3, [r3, #0]
100483b0:	2b00      	cmp	r3, #0
100483b2:	d02c      	beq.n	1004840e <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
100483b4:	f005 fb66 	bl	1004da84 <HAL_RCC_GetSysClockFreq>
100483b8:	0004      	movs	r4, r0
100483ba:	4b1a      	ldr	r3, [pc, #104]	@ (10048424 <HAL_InitTick+0x88>)
100483bc:	781b      	ldrb	r3, [r3, #0]
100483be:	0019      	movs	r1, r3
100483c0:	23fa      	movs	r3, #250	@ 0xfa
100483c2:	0098      	lsls	r0, r3, #2
100483c4:	f7f7 ff3c 	bl	10040240 <__udivsi3>
100483c8:	0003      	movs	r3, r0
100483ca:	0019      	movs	r1, r3
100483cc:	0020      	movs	r0, r4
100483ce:	f7f7 ff37 	bl	10040240 <__udivsi3>
100483d2:	0003      	movs	r3, r0
100483d4:	0018      	movs	r0, r3
100483d6:	f000 f944 	bl	10048662 <HAL_SYSTICK_Config>
100483da:	1e03      	subs	r3, r0, #0
100483dc:	d112      	bne.n	10048404 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
100483de:	687b      	ldr	r3, [r7, #4]
100483e0:	2b03      	cmp	r3, #3
100483e2:	d80a      	bhi.n	100483fa <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
100483e4:	6879      	ldr	r1, [r7, #4]
100483e6:	2301      	movs	r3, #1
100483e8:	425b      	negs	r3, r3
100483ea:	2200      	movs	r2, #0
100483ec:	0018      	movs	r0, r3
100483ee:	f000 f913 	bl	10048618 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
100483f2:	4b0d      	ldr	r3, [pc, #52]	@ (10048428 <HAL_InitTick+0x8c>)
100483f4:	687a      	ldr	r2, [r7, #4]
100483f6:	601a      	str	r2, [r3, #0]
100483f8:	e00d      	b.n	10048416 <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
100483fa:	230f      	movs	r3, #15
100483fc:	18fb      	adds	r3, r7, r3
100483fe:	2201      	movs	r2, #1
10048400:	701a      	strb	r2, [r3, #0]
10048402:	e008      	b.n	10048416 <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
10048404:	230f      	movs	r3, #15
10048406:	18fb      	adds	r3, r7, r3
10048408:	2201      	movs	r2, #1
1004840a:	701a      	strb	r2, [r3, #0]
1004840c:	e003      	b.n	10048416 <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
1004840e:	230f      	movs	r3, #15
10048410:	18fb      	adds	r3, r7, r3
10048412:	2201      	movs	r2, #1
10048414:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
10048416:	230f      	movs	r3, #15
10048418:	18fb      	adds	r3, r7, r3
1004841a:	781b      	ldrb	r3, [r3, #0]
}
1004841c:	0018      	movs	r0, r3
1004841e:	46bd      	mov	sp, r7
10048420:	b005      	add	sp, #20
10048422:	bd90      	pop	{r4, r7, pc}
10048424:	20002c1c 	.word	0x20002c1c
10048428:	20002c18 	.word	0x20002c18

1004842c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
1004842c:	b580      	push	{r7, lr}
1004842e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10048430:	4b05      	ldr	r3, [pc, #20]	@ (10048448 <HAL_IncTick+0x1c>)
10048432:	781b      	ldrb	r3, [r3, #0]
10048434:	001a      	movs	r2, r3
10048436:	4b05      	ldr	r3, [pc, #20]	@ (1004844c <HAL_IncTick+0x20>)
10048438:	681b      	ldr	r3, [r3, #0]
1004843a:	18d2      	adds	r2, r2, r3
1004843c:	4b03      	ldr	r3, [pc, #12]	@ (1004844c <HAL_IncTick+0x20>)
1004843e:	601a      	str	r2, [r3, #0]
}
10048440:	46c0      	nop			@ (mov r8, r8)
10048442:	46bd      	mov	sp, r7
10048444:	bd80      	pop	{r7, pc}
10048446:	46c0      	nop			@ (mov r8, r8)
10048448:	20002c1c 	.word	0x20002c1c
1004844c:	200026a0 	.word	0x200026a0

10048450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10048450:	b580      	push	{r7, lr}
10048452:	af00      	add	r7, sp, #0
  return uwTick;
10048454:	4b02      	ldr	r3, [pc, #8]	@ (10048460 <HAL_GetTick+0x10>)
10048456:	681b      	ldr	r3, [r3, #0]
}
10048458:	0018      	movs	r0, r3
1004845a:	46bd      	mov	sp, r7
1004845c:	bd80      	pop	{r7, pc}
1004845e:	46c0      	nop			@ (mov r8, r8)
10048460:	200026a0 	.word	0x200026a0

10048464 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
10048464:	b580      	push	{r7, lr}
10048466:	af00      	add	r7, sp, #0
  return uwTickPrio;
10048468:	4b02      	ldr	r3, [pc, #8]	@ (10048474 <HAL_GetTickPrio+0x10>)
1004846a:	681b      	ldr	r3, [r3, #0]
}
1004846c:	0018      	movs	r0, r3
1004846e:	46bd      	mov	sp, r7
10048470:	bd80      	pop	{r7, pc}
10048472:	46c0      	nop			@ (mov r8, r8)
10048474:	20002c18 	.word	0x20002c18

10048478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10048478:	b580      	push	{r7, lr}
1004847a:	b084      	sub	sp, #16
1004847c:	af00      	add	r7, sp, #0
1004847e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10048480:	f7ff ffe6 	bl	10048450 <HAL_GetTick>
10048484:	0003      	movs	r3, r0
10048486:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
10048488:	687b      	ldr	r3, [r7, #4]
1004848a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
1004848c:	68fb      	ldr	r3, [r7, #12]
1004848e:	3301      	adds	r3, #1
10048490:	d005      	beq.n	1004849e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10048492:	4b0a      	ldr	r3, [pc, #40]	@ (100484bc <HAL_Delay+0x44>)
10048494:	781b      	ldrb	r3, [r3, #0]
10048496:	001a      	movs	r2, r3
10048498:	68fb      	ldr	r3, [r7, #12]
1004849a:	189b      	adds	r3, r3, r2
1004849c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
1004849e:	46c0      	nop			@ (mov r8, r8)
100484a0:	f7ff ffd6 	bl	10048450 <HAL_GetTick>
100484a4:	0002      	movs	r2, r0
100484a6:	68bb      	ldr	r3, [r7, #8]
100484a8:	1ad3      	subs	r3, r2, r3
100484aa:	68fa      	ldr	r2, [r7, #12]
100484ac:	429a      	cmp	r2, r3
100484ae:	d8f7      	bhi.n	100484a0 <HAL_Delay+0x28>
  {
  }
}
100484b0:	46c0      	nop			@ (mov r8, r8)
100484b2:	46c0      	nop			@ (mov r8, r8)
100484b4:	46bd      	mov	sp, r7
100484b6:	b004      	add	sp, #16
100484b8:	bd80      	pop	{r7, pc}
100484ba:	46c0      	nop			@ (mov r8, r8)
100484bc:	20002c1c 	.word	0x20002c1c

100484c0 <__NVIC_EnableIRQ>:
{
100484c0:	b580      	push	{r7, lr}
100484c2:	b082      	sub	sp, #8
100484c4:	af00      	add	r7, sp, #0
100484c6:	0002      	movs	r2, r0
100484c8:	1dfb      	adds	r3, r7, #7
100484ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100484cc:	1dfb      	adds	r3, r7, #7
100484ce:	781b      	ldrb	r3, [r3, #0]
100484d0:	2b7f      	cmp	r3, #127	@ 0x7f
100484d2:	d809      	bhi.n	100484e8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100484d4:	1dfb      	adds	r3, r7, #7
100484d6:	781b      	ldrb	r3, [r3, #0]
100484d8:	001a      	movs	r2, r3
100484da:	231f      	movs	r3, #31
100484dc:	401a      	ands	r2, r3
100484de:	4b04      	ldr	r3, [pc, #16]	@ (100484f0 <__NVIC_EnableIRQ+0x30>)
100484e0:	2101      	movs	r1, #1
100484e2:	4091      	lsls	r1, r2
100484e4:	000a      	movs	r2, r1
100484e6:	601a      	str	r2, [r3, #0]
}
100484e8:	46c0      	nop			@ (mov r8, r8)
100484ea:	46bd      	mov	sp, r7
100484ec:	b002      	add	sp, #8
100484ee:	bd80      	pop	{r7, pc}
100484f0:	e000e100 	.word	0xe000e100

100484f4 <__NVIC_SetPriority>:
{
100484f4:	b590      	push	{r4, r7, lr}
100484f6:	b083      	sub	sp, #12
100484f8:	af00      	add	r7, sp, #0
100484fa:	0002      	movs	r2, r0
100484fc:	6039      	str	r1, [r7, #0]
100484fe:	1dfb      	adds	r3, r7, #7
10048500:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10048502:	1dfb      	adds	r3, r7, #7
10048504:	781b      	ldrb	r3, [r3, #0]
10048506:	2b7f      	cmp	r3, #127	@ 0x7f
10048508:	d828      	bhi.n	1004855c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004850a:	4a2f      	ldr	r2, [pc, #188]	@ (100485c8 <__NVIC_SetPriority+0xd4>)
1004850c:	1dfb      	adds	r3, r7, #7
1004850e:	781b      	ldrb	r3, [r3, #0]
10048510:	b25b      	sxtb	r3, r3
10048512:	089b      	lsrs	r3, r3, #2
10048514:	33c0      	adds	r3, #192	@ 0xc0
10048516:	009b      	lsls	r3, r3, #2
10048518:	589b      	ldr	r3, [r3, r2]
1004851a:	1dfa      	adds	r2, r7, #7
1004851c:	7812      	ldrb	r2, [r2, #0]
1004851e:	0011      	movs	r1, r2
10048520:	2203      	movs	r2, #3
10048522:	400a      	ands	r2, r1
10048524:	00d2      	lsls	r2, r2, #3
10048526:	21ff      	movs	r1, #255	@ 0xff
10048528:	4091      	lsls	r1, r2
1004852a:	000a      	movs	r2, r1
1004852c:	43d2      	mvns	r2, r2
1004852e:	401a      	ands	r2, r3
10048530:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10048532:	683b      	ldr	r3, [r7, #0]
10048534:	019b      	lsls	r3, r3, #6
10048536:	22ff      	movs	r2, #255	@ 0xff
10048538:	401a      	ands	r2, r3
1004853a:	1dfb      	adds	r3, r7, #7
1004853c:	781b      	ldrb	r3, [r3, #0]
1004853e:	0018      	movs	r0, r3
10048540:	2303      	movs	r3, #3
10048542:	4003      	ands	r3, r0
10048544:	00db      	lsls	r3, r3, #3
10048546:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10048548:	481f      	ldr	r0, [pc, #124]	@ (100485c8 <__NVIC_SetPriority+0xd4>)
1004854a:	1dfb      	adds	r3, r7, #7
1004854c:	781b      	ldrb	r3, [r3, #0]
1004854e:	b25b      	sxtb	r3, r3
10048550:	089b      	lsrs	r3, r3, #2
10048552:	430a      	orrs	r2, r1
10048554:	33c0      	adds	r3, #192	@ 0xc0
10048556:	009b      	lsls	r3, r3, #2
10048558:	501a      	str	r2, [r3, r0]
}
1004855a:	e031      	b.n	100485c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004855c:	4a1b      	ldr	r2, [pc, #108]	@ (100485cc <__NVIC_SetPriority+0xd8>)
1004855e:	1dfb      	adds	r3, r7, #7
10048560:	781b      	ldrb	r3, [r3, #0]
10048562:	0019      	movs	r1, r3
10048564:	230f      	movs	r3, #15
10048566:	400b      	ands	r3, r1
10048568:	3b08      	subs	r3, #8
1004856a:	089b      	lsrs	r3, r3, #2
1004856c:	3306      	adds	r3, #6
1004856e:	009b      	lsls	r3, r3, #2
10048570:	18d3      	adds	r3, r2, r3
10048572:	3304      	adds	r3, #4
10048574:	681b      	ldr	r3, [r3, #0]
10048576:	1dfa      	adds	r2, r7, #7
10048578:	7812      	ldrb	r2, [r2, #0]
1004857a:	0011      	movs	r1, r2
1004857c:	2203      	movs	r2, #3
1004857e:	400a      	ands	r2, r1
10048580:	00d2      	lsls	r2, r2, #3
10048582:	21ff      	movs	r1, #255	@ 0xff
10048584:	4091      	lsls	r1, r2
10048586:	000a      	movs	r2, r1
10048588:	43d2      	mvns	r2, r2
1004858a:	401a      	ands	r2, r3
1004858c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004858e:	683b      	ldr	r3, [r7, #0]
10048590:	019b      	lsls	r3, r3, #6
10048592:	22ff      	movs	r2, #255	@ 0xff
10048594:	401a      	ands	r2, r3
10048596:	1dfb      	adds	r3, r7, #7
10048598:	781b      	ldrb	r3, [r3, #0]
1004859a:	0018      	movs	r0, r3
1004859c:	2303      	movs	r3, #3
1004859e:	4003      	ands	r3, r0
100485a0:	00db      	lsls	r3, r3, #3
100485a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100485a4:	4809      	ldr	r0, [pc, #36]	@ (100485cc <__NVIC_SetPriority+0xd8>)
100485a6:	1dfb      	adds	r3, r7, #7
100485a8:	781b      	ldrb	r3, [r3, #0]
100485aa:	001c      	movs	r4, r3
100485ac:	230f      	movs	r3, #15
100485ae:	4023      	ands	r3, r4
100485b0:	3b08      	subs	r3, #8
100485b2:	089b      	lsrs	r3, r3, #2
100485b4:	430a      	orrs	r2, r1
100485b6:	3306      	adds	r3, #6
100485b8:	009b      	lsls	r3, r3, #2
100485ba:	18c3      	adds	r3, r0, r3
100485bc:	3304      	adds	r3, #4
100485be:	601a      	str	r2, [r3, #0]
}
100485c0:	46c0      	nop			@ (mov r8, r8)
100485c2:	46bd      	mov	sp, r7
100485c4:	b003      	add	sp, #12
100485c6:	bd90      	pop	{r4, r7, pc}
100485c8:	e000e100 	.word	0xe000e100
100485cc:	e000ed00 	.word	0xe000ed00

100485d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
100485d0:	b580      	push	{r7, lr}
100485d2:	b082      	sub	sp, #8
100485d4:	af00      	add	r7, sp, #0
100485d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
100485d8:	687b      	ldr	r3, [r7, #4]
100485da:	1e5a      	subs	r2, r3, #1
100485dc:	2380      	movs	r3, #128	@ 0x80
100485de:	045b      	lsls	r3, r3, #17
100485e0:	429a      	cmp	r2, r3
100485e2:	d301      	bcc.n	100485e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
100485e4:	2301      	movs	r3, #1
100485e6:	e010      	b.n	1004860a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
100485e8:	4b0a      	ldr	r3, [pc, #40]	@ (10048614 <SysTick_Config+0x44>)
100485ea:	687a      	ldr	r2, [r7, #4]
100485ec:	3a01      	subs	r2, #1
100485ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
100485f0:	2301      	movs	r3, #1
100485f2:	425b      	negs	r3, r3
100485f4:	2103      	movs	r1, #3
100485f6:	0018      	movs	r0, r3
100485f8:	f7ff ff7c 	bl	100484f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
100485fc:	4b05      	ldr	r3, [pc, #20]	@ (10048614 <SysTick_Config+0x44>)
100485fe:	2200      	movs	r2, #0
10048600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10048602:	4b04      	ldr	r3, [pc, #16]	@ (10048614 <SysTick_Config+0x44>)
10048604:	2207      	movs	r2, #7
10048606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10048608:	2300      	movs	r3, #0
}
1004860a:	0018      	movs	r0, r3
1004860c:	46bd      	mov	sp, r7
1004860e:	b002      	add	sp, #8
10048610:	bd80      	pop	{r7, pc}
10048612:	46c0      	nop			@ (mov r8, r8)
10048614:	e000e010 	.word	0xe000e010

10048618 <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10048618:	b580      	push	{r7, lr}
1004861a:	b084      	sub	sp, #16
1004861c:	af00      	add	r7, sp, #0
1004861e:	60b9      	str	r1, [r7, #8]
10048620:	607a      	str	r2, [r7, #4]
10048622:	210f      	movs	r1, #15
10048624:	187b      	adds	r3, r7, r1
10048626:	1c02      	adds	r2, r0, #0
10048628:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
1004862a:	68ba      	ldr	r2, [r7, #8]
1004862c:	187b      	adds	r3, r7, r1
1004862e:	781b      	ldrb	r3, [r3, #0]
10048630:	b25b      	sxtb	r3, r3
10048632:	0011      	movs	r1, r2
10048634:	0018      	movs	r0, r3
10048636:	f7ff ff5d 	bl	100484f4 <__NVIC_SetPriority>
}
1004863a:	46c0      	nop			@ (mov r8, r8)
1004863c:	46bd      	mov	sp, r7
1004863e:	b004      	add	sp, #16
10048640:	bd80      	pop	{r7, pc}

10048642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10048642:	b580      	push	{r7, lr}
10048644:	b082      	sub	sp, #8
10048646:	af00      	add	r7, sp, #0
10048648:	0002      	movs	r2, r0
1004864a:	1dfb      	adds	r3, r7, #7
1004864c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
1004864e:	1dfb      	adds	r3, r7, #7
10048650:	781b      	ldrb	r3, [r3, #0]
10048652:	b25b      	sxtb	r3, r3
10048654:	0018      	movs	r0, r3
10048656:	f7ff ff33 	bl	100484c0 <__NVIC_EnableIRQ>
}
1004865a:	46c0      	nop			@ (mov r8, r8)
1004865c:	46bd      	mov	sp, r7
1004865e:	b002      	add	sp, #8
10048660:	bd80      	pop	{r7, pc}

10048662 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10048662:	b580      	push	{r7, lr}
10048664:	b082      	sub	sp, #8
10048666:	af00      	add	r7, sp, #0
10048668:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
1004866a:	687b      	ldr	r3, [r7, #4]
1004866c:	0018      	movs	r0, r3
1004866e:	f7ff ffaf 	bl	100485d0 <SysTick_Config>
10048672:	0003      	movs	r3, r0
}
10048674:	0018      	movs	r0, r3
10048676:	46bd      	mov	sp, r7
10048678:	b002      	add	sp, #8
1004867a:	bd80      	pop	{r7, pc}

1004867c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
1004867c:	b580      	push	{r7, lr}
1004867e:	b084      	sub	sp, #16
10048680:	af00      	add	r7, sp, #0
10048682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
10048684:	210f      	movs	r1, #15
10048686:	187b      	adds	r3, r7, r1
10048688:	2200      	movs	r2, #0
1004868a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
1004868c:	687b      	ldr	r3, [r7, #4]
1004868e:	2225      	movs	r2, #37	@ 0x25
10048690:	5c9b      	ldrb	r3, [r3, r2]
10048692:	b2db      	uxtb	r3, r3
10048694:	2b02      	cmp	r3, #2
10048696:	d006      	beq.n	100486a6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
10048698:	687b      	ldr	r3, [r7, #4]
1004869a:	2204      	movs	r2, #4
1004869c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
1004869e:	187b      	adds	r3, r7, r1
100486a0:	2201      	movs	r2, #1
100486a2:	701a      	strb	r2, [r3, #0]
100486a4:	e02a      	b.n	100486fc <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
100486a6:	687b      	ldr	r3, [r7, #4]
100486a8:	681b      	ldr	r3, [r3, #0]
100486aa:	681a      	ldr	r2, [r3, #0]
100486ac:	687b      	ldr	r3, [r7, #4]
100486ae:	681b      	ldr	r3, [r3, #0]
100486b0:	210e      	movs	r1, #14
100486b2:	438a      	bics	r2, r1
100486b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
100486b6:	687b      	ldr	r3, [r7, #4]
100486b8:	681b      	ldr	r3, [r3, #0]
100486ba:	681a      	ldr	r2, [r3, #0]
100486bc:	687b      	ldr	r3, [r7, #4]
100486be:	681b      	ldr	r3, [r3, #0]
100486c0:	2101      	movs	r1, #1
100486c2:	438a      	bics	r2, r1
100486c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x3cU));
100486c6:	687b      	ldr	r3, [r7, #4]
100486c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100486ca:	223c      	movs	r2, #60	@ 0x3c
100486cc:	401a      	ands	r2, r3
100486ce:	687b      	ldr	r3, [r7, #4]
100486d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
100486d2:	2101      	movs	r1, #1
100486d4:	4091      	lsls	r1, r2
100486d6:	000a      	movs	r2, r1
100486d8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
100486da:	687b      	ldr	r3, [r7, #4]
100486dc:	2225      	movs	r2, #37	@ 0x25
100486de:	2101      	movs	r1, #1
100486e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
100486e2:	687b      	ldr	r3, [r7, #4]
100486e4:	2224      	movs	r2, #36	@ 0x24
100486e6:	2100      	movs	r1, #0
100486e8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
100486ea:	687b      	ldr	r3, [r7, #4]
100486ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100486ee:	2b00      	cmp	r3, #0
100486f0:	d004      	beq.n	100486fc <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
100486f2:	687b      	ldr	r3, [r7, #4]
100486f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100486f6:	687a      	ldr	r2, [r7, #4]
100486f8:	0010      	movs	r0, r2
100486fa:	4798      	blx	r3
    }
  }
  return status;
100486fc:	230f      	movs	r3, #15
100486fe:	18fb      	adds	r3, r7, r3
10048700:	781b      	ldrb	r3, [r3, #0]
}
10048702:	0018      	movs	r0, r3
10048704:	46bd      	mov	sp, r7
10048706:	b004      	add	sp, #16
10048708:	bd80      	pop	{r7, pc}

1004870a <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
1004870a:	b580      	push	{r7, lr}
1004870c:	b082      	sub	sp, #8
1004870e:	af00      	add	r7, sp, #0
10048710:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
10048712:	687b      	ldr	r3, [r7, #4]
10048714:	2225      	movs	r2, #37	@ 0x25
10048716:	5c9b      	ldrb	r3, [r3, r2]
10048718:	b2db      	uxtb	r3, r3
}
1004871a:	0018      	movs	r0, r3
1004871c:	46bd      	mov	sp, r7
1004871e:	b002      	add	sp, #8
10048720:	bd80      	pop	{r7, pc}
	...

10048724 <HAL_FLASH_Program>:
  *                are stored the data for the burst program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
10048724:	b5b0      	push	{r4, r5, r7, lr}
10048726:	b086      	sub	sp, #24
10048728:	af00      	add	r7, sp, #0
1004872a:	60f8      	str	r0, [r7, #12]
1004872c:	60b9      	str	r1, [r7, #8]
1004872e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_32BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
10048730:	4b1d      	ldr	r3, [pc, #116]	@ (100487a8 <HAL_FLASH_Program+0x84>)
10048732:	781b      	ldrb	r3, [r3, #0]
10048734:	2b01      	cmp	r3, #1
10048736:	d101      	bne.n	1004873c <HAL_FLASH_Program+0x18>
10048738:	2302      	movs	r3, #2
1004873a:	e031      	b.n	100487a0 <HAL_FLASH_Program+0x7c>
1004873c:	4b1a      	ldr	r3, [pc, #104]	@ (100487a8 <HAL_FLASH_Program+0x84>)
1004873e:	2201      	movs	r2, #1
10048740:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
10048742:	4b19      	ldr	r3, [pc, #100]	@ (100487a8 <HAL_FLASH_Program+0x84>)
10048744:	2200      	movs	r2, #0
10048746:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10048748:	2517      	movs	r5, #23
1004874a:	197c      	adds	r4, r7, r5
1004874c:	23fa      	movs	r3, #250	@ 0xfa
1004874e:	009b      	lsls	r3, r3, #2
10048750:	0018      	movs	r0, r3
10048752:	f000 f82b 	bl	100487ac <FLASH_WaitForLastOperation>
10048756:	0003      	movs	r3, r0
10048758:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
1004875a:	197b      	adds	r3, r7, r5
1004875c:	781b      	ldrb	r3, [r3, #0]
1004875e:	2b00      	cmp	r3, #0
10048760:	d118      	bne.n	10048794 <HAL_FLASH_Program+0x70>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
10048762:	68fb      	ldr	r3, [r7, #12]
10048764:	2b00      	cmp	r3, #0
10048766:	d106      	bne.n	10048776 <HAL_FLASH_Program+0x52>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program a word (32-bit) at a specified address */
      FLASH_Program_Word(Address, Data);
10048768:	687a      	ldr	r2, [r7, #4]
1004876a:	68bb      	ldr	r3, [r7, #8]
1004876c:	0011      	movs	r1, r2
1004876e:	0018      	movs	r0, r3
10048770:	f000 f856 	bl	10048820 <FLASH_Program_Word>
10048774:	e005      	b.n	10048782 <HAL_FLASH_Program+0x5e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program 4 word starting from a specified address */
      FLASH_Program_Burst(Address, Data);
10048776:	687a      	ldr	r2, [r7, #4]
10048778:	68bb      	ldr	r3, [r7, #8]
1004877a:	0011      	movs	r1, r2
1004877c:	0018      	movs	r0, r3
1004877e:	f000 f871 	bl	10048864 <FLASH_Program_Burst>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10048782:	2317      	movs	r3, #23
10048784:	18fc      	adds	r4, r7, r3
10048786:	23fa      	movs	r3, #250	@ 0xfa
10048788:	009b      	lsls	r3, r3, #2
1004878a:	0018      	movs	r0, r3
1004878c:	f000 f80e 	bl	100487ac <FLASH_WaitForLastOperation>
10048790:	0003      	movs	r3, r0
10048792:	7023      	strb	r3, [r4, #0]

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
10048794:	4b04      	ldr	r3, [pc, #16]	@ (100487a8 <HAL_FLASH_Program+0x84>)
10048796:	2200      	movs	r2, #0
10048798:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
1004879a:	2317      	movs	r3, #23
1004879c:	18fb      	adds	r3, r7, r3
1004879e:	781b      	ldrb	r3, [r3, #0]
}
100487a0:	0018      	movs	r0, r3
100487a2:	46bd      	mov	sp, r7
100487a4:	b006      	add	sp, #24
100487a6:	bdb0      	pop	{r4, r5, r7, pc}
100487a8:	200026a4 	.word	0x200026a4

100487ac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
100487ac:	b580      	push	{r7, lr}
100487ae:	b084      	sub	sp, #16
100487b0:	af00      	add	r7, sp, #0
100487b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
100487b4:	f7ff fe4c 	bl	10048450 <HAL_GetTick>
100487b8:	0003      	movs	r3, r0
100487ba:	60fb      	str	r3, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on CMDDONE flag to be set.
     If the FLASH operation fails, an error flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
100487bc:	e00c      	b.n	100487d8 <FLASH_WaitForLastOperation+0x2c>
  {
    if (Timeout != HAL_MAX_DELAY)
100487be:	687b      	ldr	r3, [r7, #4]
100487c0:	3301      	adds	r3, #1
100487c2:	d009      	beq.n	100487d8 <FLASH_WaitForLastOperation+0x2c>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
100487c4:	f7ff fe44 	bl	10048450 <HAL_GetTick>
100487c8:	0002      	movs	r2, r0
100487ca:	68fb      	ldr	r3, [r7, #12]
100487cc:	1ad3      	subs	r3, r2, r3
100487ce:	687a      	ldr	r2, [r7, #4]
100487d0:	429a      	cmp	r2, r3
100487d2:	d801      	bhi.n	100487d8 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
100487d4:	2303      	movs	r3, #3
100487d6:	e01b      	b.n	10048810 <FLASH_WaitForLastOperation+0x64>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
100487d8:	4b0f      	ldr	r3, [pc, #60]	@ (10048818 <FLASH_WaitForLastOperation+0x6c>)
100487da:	691b      	ldr	r3, [r3, #16]
100487dc:	2201      	movs	r2, #1
100487de:	4013      	ands	r3, r2
100487e0:	2b01      	cmp	r3, #1
100487e2:	d1ec      	bne.n	100487be <FLASH_WaitForLastOperation+0x12>
      }
    }
  }

  /* Check flash errors */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS))
100487e4:	4b0c      	ldr	r3, [pc, #48]	@ (10048818 <FLASH_WaitForLastOperation+0x6c>)
100487e6:	691b      	ldr	r3, [r3, #16]
100487e8:	220c      	movs	r2, #12
100487ea:	4013      	ands	r3, r2
100487ec:	2b0c      	cmp	r3, #12
100487ee:	d10e      	bne.n	1004880e <FLASH_WaitForLastOperation+0x62>
  {
    /* Save the error code */
    pFlash.ErrorCode |= FLASH->IRQSTAT;
100487f0:	4b09      	ldr	r3, [pc, #36]	@ (10048818 <FLASH_WaitForLastOperation+0x6c>)
100487f2:	689a      	ldr	r2, [r3, #8]
100487f4:	4b09      	ldr	r3, [pc, #36]	@ (1004881c <FLASH_WaitForLastOperation+0x70>)
100487f6:	685b      	ldr	r3, [r3, #4]
100487f8:	431a      	orrs	r2, r3
100487fa:	4b08      	ldr	r3, [pc, #32]	@ (1004881c <FLASH_WaitForLastOperation+0x70>)
100487fc:	605a      	str	r2, [r3, #4]

    /* Clear error flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
100487fe:	4b06      	ldr	r3, [pc, #24]	@ (10048818 <FLASH_WaitForLastOperation+0x6c>)
10048800:	691a      	ldr	r2, [r3, #16]
10048802:	4b05      	ldr	r3, [pc, #20]	@ (10048818 <FLASH_WaitForLastOperation+0x6c>)
10048804:	210c      	movs	r1, #12
10048806:	430a      	orrs	r2, r1
10048808:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
1004880a:	2301      	movs	r3, #1
1004880c:	e000      	b.n	10048810 <FLASH_WaitForLastOperation+0x64>
  }

  return HAL_OK;
1004880e:	2300      	movs	r3, #0
}
10048810:	0018      	movs	r0, r3
10048812:	46bd      	mov	sp, r7
10048814:	b004      	add	sp, #16
10048816:	bd80      	pop	{r7, pc}
10048818:	40001000 	.word	0x40001000
1004881c:	200026a4 	.word	0x200026a4

10048820 <FLASH_Program_Word>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
10048820:	b580      	push	{r7, lr}
10048822:	b082      	sub	sp, #8
10048824:	af00      	add	r7, sp, #0
10048826:	6078      	str	r0, [r7, #4]
10048828:	6039      	str	r1, [r7, #0]
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
1004882a:	4b0c      	ldr	r3, [pc, #48]	@ (1004885c <FLASH_Program_Word+0x3c>)
1004882c:	691a      	ldr	r2, [r3, #16]
1004882e:	4b0b      	ldr	r3, [pc, #44]	@ (1004885c <FLASH_Program_Word+0x3c>)
10048830:	210f      	movs	r1, #15
10048832:	430a      	orrs	r2, r1
10048834:	611a      	str	r2, [r3, #16]

  /* Load the word address */

  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
10048836:	687b      	ldr	r3, [r7, #4]
10048838:	4a09      	ldr	r2, [pc, #36]	@ (10048860 <FLASH_Program_Word+0x40>)
1004883a:	4694      	mov	ip, r2
1004883c:	4463      	add	r3, ip
1004883e:	089a      	lsrs	r2, r3, #2
10048840:	4b06      	ldr	r3, [pc, #24]	@ (1004885c <FLASH_Program_Word+0x3c>)
10048842:	0412      	lsls	r2, r2, #16
10048844:	0c12      	lsrs	r2, r2, #16
10048846:	619a      	str	r2, [r3, #24]

  /* Load the data to program */
  FLASH->DATA0 = Data;
10048848:	4b04      	ldr	r3, [pc, #16]	@ (1004885c <FLASH_Program_Word+0x3c>)
1004884a:	683a      	ldr	r2, [r7, #0]
1004884c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Load the WRITE command */
  FLASH->COMMAND = FLASH_CMD_WRITE;
1004884e:	4b03      	ldr	r3, [pc, #12]	@ (1004885c <FLASH_Program_Word+0x3c>)
10048850:	2233      	movs	r2, #51	@ 0x33
10048852:	601a      	str	r2, [r3, #0]
}
10048854:	46c0      	nop			@ (mov r8, r8)
10048856:	46bd      	mov	sp, r7
10048858:	b002      	add	sp, #8
1004885a:	bd80      	pop	{r7, pc}
1004885c:	40001000 	.word	0x40001000
10048860:	effc0000 	.word	0xeffc0000

10048864 <FLASH_Program_Burst>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Burst(uint32_t Address, uint32_t DataAddress)
{
10048864:	b580      	push	{r7, lr}
10048866:	b084      	sub	sp, #16
10048868:	af00      	add	r7, sp, #0
1004886a:	6078      	str	r0, [r7, #4]
1004886c:	6039      	str	r1, [r7, #0]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
1004886e:	683b      	ldr	r3, [r7, #0]
10048870:	60fb      	str	r3, [r7, #12]

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10048872:	4b17      	ldr	r3, [pc, #92]	@ (100488d0 <FLASH_Program_Burst+0x6c>)
10048874:	691a      	ldr	r2, [r3, #16]
10048876:	4b16      	ldr	r3, [pc, #88]	@ (100488d0 <FLASH_Program_Burst+0x6c>)
10048878:	210f      	movs	r1, #15
1004887a:	430a      	orrs	r2, r1
1004887c:	611a      	str	r2, [r3, #16]

  /* Load the word address */
  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
1004887e:	687b      	ldr	r3, [r7, #4]
10048880:	4a14      	ldr	r2, [pc, #80]	@ (100488d4 <FLASH_Program_Burst+0x70>)
10048882:	4694      	mov	ip, r2
10048884:	4463      	add	r3, ip
10048886:	089a      	lsrs	r2, r3, #2
10048888:	4b11      	ldr	r3, [pc, #68]	@ (100488d0 <FLASH_Program_Burst+0x6c>)
1004888a:	0412      	lsls	r2, r2, #16
1004888c:	0c12      	lsrs	r2, r2, #16
1004888e:	619a      	str	r2, [r3, #24]
  FLASH->DATA0 = *src_addr;
10048890:	4a0f      	ldr	r2, [pc, #60]	@ (100488d0 <FLASH_Program_Burst+0x6c>)
10048892:	68fb      	ldr	r3, [r7, #12]
10048894:	681b      	ldr	r3, [r3, #0]
10048896:	6413      	str	r3, [r2, #64]	@ 0x40
  src_addr = src_addr + 1;
10048898:	68fb      	ldr	r3, [r7, #12]
1004889a:	3304      	adds	r3, #4
1004889c:	60fb      	str	r3, [r7, #12]
  FLASH->DATA1 = *src_addr;
1004889e:	4a0c      	ldr	r2, [pc, #48]	@ (100488d0 <FLASH_Program_Burst+0x6c>)
100488a0:	68fb      	ldr	r3, [r7, #12]
100488a2:	681b      	ldr	r3, [r3, #0]
100488a4:	6453      	str	r3, [r2, #68]	@ 0x44
  src_addr = src_addr + 1;
100488a6:	68fb      	ldr	r3, [r7, #12]
100488a8:	3304      	adds	r3, #4
100488aa:	60fb      	str	r3, [r7, #12]
  FLASH->DATA2 = *src_addr;
100488ac:	4a08      	ldr	r2, [pc, #32]	@ (100488d0 <FLASH_Program_Burst+0x6c>)
100488ae:	68fb      	ldr	r3, [r7, #12]
100488b0:	681b      	ldr	r3, [r3, #0]
100488b2:	6493      	str	r3, [r2, #72]	@ 0x48
  src_addr = src_addr + 1;
100488b4:	68fb      	ldr	r3, [r7, #12]
100488b6:	3304      	adds	r3, #4
100488b8:	60fb      	str	r3, [r7, #12]
  FLASH->DATA3 = *src_addr;
100488ba:	4a05      	ldr	r2, [pc, #20]	@ (100488d0 <FLASH_Program_Burst+0x6c>)
100488bc:	68fb      	ldr	r3, [r7, #12]
100488be:	681b      	ldr	r3, [r3, #0]
100488c0:	64d3      	str	r3, [r2, #76]	@ 0x4c

  /* Load the BURST WRITE command */
  FLASH->COMMAND = FLASH_CMD_BURSTWRITE;
100488c2:	4b03      	ldr	r3, [pc, #12]	@ (100488d0 <FLASH_Program_Burst+0x6c>)
100488c4:	22cc      	movs	r2, #204	@ 0xcc
100488c6:	601a      	str	r2, [r3, #0]
}
100488c8:	46c0      	nop			@ (mov r8, r8)
100488ca:	46bd      	mov	sp, r7
100488cc:	b004      	add	sp, #16
100488ce:	bd80      	pop	{r7, pc}
100488d0:	40001000 	.word	0x40001000
100488d4:	effc0000 	.word	0xeffc0000

100488d8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
100488d8:	b5b0      	push	{r4, r5, r7, lr}
100488da:	b084      	sub	sp, #16
100488dc:	af00      	add	r7, sp, #0
100488de:	6078      	str	r0, [r7, #4]
100488e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPE_ERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
100488e2:	4b27      	ldr	r3, [pc, #156]	@ (10048980 <HAL_FLASHEx_Erase+0xa8>)
100488e4:	781b      	ldrb	r3, [r3, #0]
100488e6:	2b01      	cmp	r3, #1
100488e8:	d101      	bne.n	100488ee <HAL_FLASHEx_Erase+0x16>
100488ea:	2302      	movs	r3, #2
100488ec:	e043      	b.n	10048976 <HAL_FLASHEx_Erase+0x9e>
100488ee:	4b24      	ldr	r3, [pc, #144]	@ (10048980 <HAL_FLASHEx_Erase+0xa8>)
100488f0:	2201      	movs	r2, #1
100488f2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
100488f4:	4b22      	ldr	r3, [pc, #136]	@ (10048980 <HAL_FLASHEx_Erase+0xa8>)
100488f6:	2200      	movs	r2, #0
100488f8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
100488fa:	687b      	ldr	r3, [r7, #4]
100488fc:	681b      	ldr	r3, [r3, #0]
100488fe:	2bff      	cmp	r3, #255	@ 0xff
10048900:	d10b      	bne.n	1004891a <HAL_FLASHEx_Erase+0x42>
  {
    /* Mass erase to be done */
    FLASH_MassErase();
10048902:	f000 f83f 	bl	10048984 <FLASH_MassErase>

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10048906:	230f      	movs	r3, #15
10048908:	18fc      	adds	r4, r7, r3
1004890a:	23fa      	movs	r3, #250	@ 0xfa
1004890c:	009b      	lsls	r3, r3, #2
1004890e:	0018      	movs	r0, r3
10048910:	f7ff ff4c 	bl	100487ac <FLASH_WaitForLastOperation>
10048914:	0003      	movs	r3, r0
10048916:	7023      	strb	r3, [r4, #0]
10048918:	e027      	b.n	1004896a <HAL_FLASHEx_Erase+0x92>
  }
  else
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
1004891a:	683b      	ldr	r3, [r7, #0]
1004891c:	2201      	movs	r2, #1
1004891e:	4252      	negs	r2, r2
10048920:	601a      	str	r2, [r3, #0]

    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
10048922:	687b      	ldr	r3, [r7, #4]
10048924:	685b      	ldr	r3, [r3, #4]
10048926:	60bb      	str	r3, [r7, #8]
10048928:	e017      	b.n	1004895a <HAL_FLASHEx_Erase+0x82>
    {
      /* Start erase page */
      FLASH_PageErase(index);
1004892a:	68bb      	ldr	r3, [r7, #8]
1004892c:	0018      	movs	r0, r3
1004892e:	f000 f839 	bl	100489a4 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10048932:	250f      	movs	r5, #15
10048934:	197c      	adds	r4, r7, r5
10048936:	23fa      	movs	r3, #250	@ 0xfa
10048938:	009b      	lsls	r3, r3, #2
1004893a:	0018      	movs	r0, r3
1004893c:	f7ff ff36 	bl	100487ac <FLASH_WaitForLastOperation>
10048940:	0003      	movs	r3, r0
10048942:	7023      	strb	r3, [r4, #0]

      if (status != HAL_OK)
10048944:	197b      	adds	r3, r7, r5
10048946:	781b      	ldrb	r3, [r3, #0]
10048948:	2b00      	cmp	r3, #0
1004894a:	d003      	beq.n	10048954 <HAL_FLASHEx_Erase+0x7c>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = index;
1004894c:	683b      	ldr	r3, [r7, #0]
1004894e:	68ba      	ldr	r2, [r7, #8]
10048950:	601a      	str	r2, [r3, #0]
        break;
10048952:	e00a      	b.n	1004896a <HAL_FLASHEx_Erase+0x92>
    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
10048954:	68bb      	ldr	r3, [r7, #8]
10048956:	3301      	adds	r3, #1
10048958:	60bb      	str	r3, [r7, #8]
1004895a:	687b      	ldr	r3, [r7, #4]
1004895c:	685a      	ldr	r2, [r3, #4]
1004895e:	687b      	ldr	r3, [r7, #4]
10048960:	689b      	ldr	r3, [r3, #8]
10048962:	18d3      	adds	r3, r2, r3
10048964:	68ba      	ldr	r2, [r7, #8]
10048966:	429a      	cmp	r2, r3
10048968:	d3df      	bcc.n	1004892a <HAL_FLASHEx_Erase+0x52>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
1004896a:	4b05      	ldr	r3, [pc, #20]	@ (10048980 <HAL_FLASHEx_Erase+0xa8>)
1004896c:	2200      	movs	r2, #0
1004896e:	701a      	strb	r2, [r3, #0]

  return status;
10048970:	230f      	movs	r3, #15
10048972:	18fb      	adds	r3, r7, r3
10048974:	781b      	ldrb	r3, [r3, #0]
}
10048976:	0018      	movs	r0, r3
10048978:	46bd      	mov	sp, r7
1004897a:	b004      	add	sp, #16
1004897c:	bdb0      	pop	{r4, r5, r7, pc}
1004897e:	46c0      	nop			@ (mov r8, r8)
10048980:	200026a4 	.word	0x200026a4

10048984 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
10048984:	b580      	push	{r7, lr}
10048986:	af00      	add	r7, sp, #0
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10048988:	4b05      	ldr	r3, [pc, #20]	@ (100489a0 <FLASH_MassErase+0x1c>)
1004898a:	691a      	ldr	r2, [r3, #16]
1004898c:	4b04      	ldr	r3, [pc, #16]	@ (100489a0 <FLASH_MassErase+0x1c>)
1004898e:	210f      	movs	r1, #15
10048990:	430a      	orrs	r2, r1
10048992:	611a      	str	r2, [r3, #16]

  /* MASSERASE command */
  FLASH->COMMAND = FLASH_CMD_MASSERASE;
10048994:	4b02      	ldr	r3, [pc, #8]	@ (100489a0 <FLASH_MassErase+0x1c>)
10048996:	2222      	movs	r2, #34	@ 0x22
10048998:	601a      	str	r2, [r3, #0]
}
1004899a:	46c0      	nop			@ (mov r8, r8)
1004899c:	46bd      	mov	sp, r7
1004899e:	bd80      	pop	{r7, pc}
100489a0:	40001000 	.word	0x40001000

100489a4 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
100489a4:	b580      	push	{r7, lr}
100489a6:	b082      	sub	sp, #8
100489a8:	af00      	add	r7, sp, #0
100489aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
100489ac:	4b09      	ldr	r3, [pc, #36]	@ (100489d4 <FLASH_PageErase+0x30>)
100489ae:	691a      	ldr	r2, [r3, #16]
100489b0:	4b08      	ldr	r3, [pc, #32]	@ (100489d4 <FLASH_PageErase+0x30>)
100489b2:	210f      	movs	r1, #15
100489b4:	430a      	orrs	r2, r1
100489b6:	611a      	str	r2, [r3, #16]

  FLASH->ADDRESS = (((Page * FLASH_PAGE_SIZE) >> 2) & FLASH_SIZE_MASK);
100489b8:	687b      	ldr	r3, [r7, #4]
100489ba:	02db      	lsls	r3, r3, #11
100489bc:	089a      	lsrs	r2, r3, #2
100489be:	4b05      	ldr	r3, [pc, #20]	@ (100489d4 <FLASH_PageErase+0x30>)
100489c0:	0412      	lsls	r2, r2, #16
100489c2:	0c12      	lsrs	r2, r2, #16
100489c4:	619a      	str	r2, [r3, #24]

  /* Write the ERASE command */
  FLASH->COMMAND = FLASH_CMD_ERASE_PAGES;
100489c6:	4b03      	ldr	r3, [pc, #12]	@ (100489d4 <FLASH_PageErase+0x30>)
100489c8:	2211      	movs	r2, #17
100489ca:	601a      	str	r2, [r3, #0]
}
100489cc:	46c0      	nop			@ (mov r8, r8)
100489ce:	46bd      	mov	sp, r7
100489d0:	b002      	add	sp, #8
100489d2:	bd80      	pop	{r7, pc}
100489d4:	40001000 	.word	0x40001000

100489d8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
100489d8:	b580      	push	{r7, lr}
100489da:	b086      	sub	sp, #24
100489dc:	af00      	add	r7, sp, #0
100489de:	6078      	str	r0, [r7, #4]
100489e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
100489e2:	2300      	movs	r3, #0
100489e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
100489e6:	e190      	b.n	10048d0a <HAL_GPIO_Init+0x332>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
100489e8:	683b      	ldr	r3, [r7, #0]
100489ea:	681b      	ldr	r3, [r3, #0]
100489ec:	2101      	movs	r1, #1
100489ee:	697a      	ldr	r2, [r7, #20]
100489f0:	4091      	lsls	r1, r2
100489f2:	000a      	movs	r2, r1
100489f4:	4013      	ands	r3, r2
100489f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
100489f8:	68fb      	ldr	r3, [r7, #12]
100489fa:	2b00      	cmp	r3, #0
100489fc:	d100      	bne.n	10048a00 <HAL_GPIO_Init+0x28>
100489fe:	e181      	b.n	10048d04 <HAL_GPIO_Init+0x32c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
10048a00:	683b      	ldr	r3, [r7, #0]
10048a02:	685b      	ldr	r3, [r3, #4]
10048a04:	2203      	movs	r2, #3
10048a06:	4013      	ands	r3, r2
10048a08:	2b01      	cmp	r3, #1
10048a0a:	d005      	beq.n	10048a18 <HAL_GPIO_Init+0x40>
10048a0c:	683b      	ldr	r3, [r7, #0]
10048a0e:	685b      	ldr	r3, [r3, #4]
10048a10:	2203      	movs	r2, #3
10048a12:	4013      	ands	r3, r2
10048a14:	2b02      	cmp	r3, #2
10048a16:	d130      	bne.n	10048a7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10048a18:	687b      	ldr	r3, [r7, #4]
10048a1a:	689b      	ldr	r3, [r3, #8]
10048a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
10048a1e:	697b      	ldr	r3, [r7, #20]
10048a20:	005b      	lsls	r3, r3, #1
10048a22:	2203      	movs	r2, #3
10048a24:	409a      	lsls	r2, r3
10048a26:	0013      	movs	r3, r2
10048a28:	43da      	mvns	r2, r3
10048a2a:	693b      	ldr	r3, [r7, #16]
10048a2c:	4013      	ands	r3, r2
10048a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
10048a30:	683b      	ldr	r3, [r7, #0]
10048a32:	68da      	ldr	r2, [r3, #12]
10048a34:	697b      	ldr	r3, [r7, #20]
10048a36:	005b      	lsls	r3, r3, #1
10048a38:	409a      	lsls	r2, r3
10048a3a:	0013      	movs	r3, r2
10048a3c:	693a      	ldr	r2, [r7, #16]
10048a3e:	4313      	orrs	r3, r2
10048a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
10048a42:	687b      	ldr	r3, [r7, #4]
10048a44:	693a      	ldr	r2, [r7, #16]
10048a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10048a48:	687b      	ldr	r3, [r7, #4]
10048a4a:	685b      	ldr	r3, [r3, #4]
10048a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10048a4e:	2201      	movs	r2, #1
10048a50:	697b      	ldr	r3, [r7, #20]
10048a52:	409a      	lsls	r2, r3
10048a54:	0013      	movs	r3, r2
10048a56:	43da      	mvns	r2, r3
10048a58:	693b      	ldr	r3, [r7, #16]
10048a5a:	4013      	ands	r3, r2
10048a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
10048a5e:	683b      	ldr	r3, [r7, #0]
10048a60:	685b      	ldr	r3, [r3, #4]
10048a62:	091b      	lsrs	r3, r3, #4
10048a64:	2201      	movs	r2, #1
10048a66:	401a      	ands	r2, r3
10048a68:	697b      	ldr	r3, [r7, #20]
10048a6a:	409a      	lsls	r2, r3
10048a6c:	0013      	movs	r3, r2
10048a6e:	693a      	ldr	r2, [r7, #16]
10048a70:	4313      	orrs	r3, r2
10048a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
10048a74:	687b      	ldr	r3, [r7, #4]
10048a76:	693a      	ldr	r2, [r7, #16]
10048a78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
10048a7a:	683b      	ldr	r3, [r7, #0]
10048a7c:	685b      	ldr	r3, [r3, #4]
10048a7e:	2203      	movs	r2, #3
10048a80:	4013      	ands	r3, r2
10048a82:	2b03      	cmp	r3, #3
10048a84:	d017      	beq.n	10048ab6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
10048a86:	687b      	ldr	r3, [r7, #4]
10048a88:	68db      	ldr	r3, [r3, #12]
10048a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
10048a8c:	697b      	ldr	r3, [r7, #20]
10048a8e:	005b      	lsls	r3, r3, #1
10048a90:	2203      	movs	r2, #3
10048a92:	409a      	lsls	r2, r3
10048a94:	0013      	movs	r3, r2
10048a96:	43da      	mvns	r2, r3
10048a98:	693b      	ldr	r3, [r7, #16]
10048a9a:	4013      	ands	r3, r2
10048a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
10048a9e:	683b      	ldr	r3, [r7, #0]
10048aa0:	689a      	ldr	r2, [r3, #8]
10048aa2:	697b      	ldr	r3, [r7, #20]
10048aa4:	005b      	lsls	r3, r3, #1
10048aa6:	409a      	lsls	r2, r3
10048aa8:	0013      	movs	r3, r2
10048aaa:	693a      	ldr	r2, [r7, #16]
10048aac:	4313      	orrs	r3, r2
10048aae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
10048ab0:	687b      	ldr	r3, [r7, #4]
10048ab2:	693a      	ldr	r2, [r7, #16]
10048ab4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
10048ab6:	683b      	ldr	r3, [r7, #0]
10048ab8:	685b      	ldr	r3, [r3, #4]
10048aba:	2203      	movs	r2, #3
10048abc:	4013      	ands	r3, r2
10048abe:	2b02      	cmp	r3, #2
10048ac0:	d123      	bne.n	10048b0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
10048ac2:	697b      	ldr	r3, [r7, #20]
10048ac4:	08da      	lsrs	r2, r3, #3
10048ac6:	687b      	ldr	r3, [r7, #4]
10048ac8:	3208      	adds	r2, #8
10048aca:	0092      	lsls	r2, r2, #2
10048acc:	58d3      	ldr	r3, [r2, r3]
10048ace:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
10048ad0:	697b      	ldr	r3, [r7, #20]
10048ad2:	2207      	movs	r2, #7
10048ad4:	4013      	ands	r3, r2
10048ad6:	009b      	lsls	r3, r3, #2
10048ad8:	220f      	movs	r2, #15
10048ada:	409a      	lsls	r2, r3
10048adc:	0013      	movs	r3, r2
10048ade:	43da      	mvns	r2, r3
10048ae0:	693b      	ldr	r3, [r7, #16]
10048ae2:	4013      	ands	r3, r2
10048ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
10048ae6:	683b      	ldr	r3, [r7, #0]
10048ae8:	691a      	ldr	r2, [r3, #16]
10048aea:	697b      	ldr	r3, [r7, #20]
10048aec:	2107      	movs	r1, #7
10048aee:	400b      	ands	r3, r1
10048af0:	009b      	lsls	r3, r3, #2
10048af2:	409a      	lsls	r2, r3
10048af4:	0013      	movs	r3, r2
10048af6:	693a      	ldr	r2, [r7, #16]
10048af8:	4313      	orrs	r3, r2
10048afa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
10048afc:	697b      	ldr	r3, [r7, #20]
10048afe:	08da      	lsrs	r2, r3, #3
10048b00:	687b      	ldr	r3, [r7, #4]
10048b02:	3208      	adds	r2, #8
10048b04:	0092      	lsls	r2, r2, #2
10048b06:	6939      	ldr	r1, [r7, #16]
10048b08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10048b0a:	687b      	ldr	r3, [r7, #4]
10048b0c:	681b      	ldr	r3, [r3, #0]
10048b0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
10048b10:	697b      	ldr	r3, [r7, #20]
10048b12:	005b      	lsls	r3, r3, #1
10048b14:	2203      	movs	r2, #3
10048b16:	409a      	lsls	r2, r3
10048b18:	0013      	movs	r3, r2
10048b1a:	43da      	mvns	r2, r3
10048b1c:	693b      	ldr	r3, [r7, #16]
10048b1e:	4013      	ands	r3, r2
10048b20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
10048b22:	683b      	ldr	r3, [r7, #0]
10048b24:	685b      	ldr	r3, [r3, #4]
10048b26:	2203      	movs	r2, #3
10048b28:	401a      	ands	r2, r3
10048b2a:	697b      	ldr	r3, [r7, #20]
10048b2c:	005b      	lsls	r3, r3, #1
10048b2e:	409a      	lsls	r2, r3
10048b30:	0013      	movs	r3, r2
10048b32:	693a      	ldr	r2, [r7, #16]
10048b34:	4313      	orrs	r3, r2
10048b36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
10048b38:	687b      	ldr	r3, [r7, #4]
10048b3a:	693a      	ldr	r2, [r7, #16]
10048b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
10048b3e:	683b      	ldr	r3, [r7, #0]
10048b40:	685a      	ldr	r2, [r3, #4]
10048b42:	23c0      	movs	r3, #192	@ 0xc0
10048b44:	029b      	lsls	r3, r3, #10
10048b46:	4013      	ands	r3, r2
10048b48:	d100      	bne.n	10048b4c <HAL_GPIO_Init+0x174>
10048b4a:	e0db      	b.n	10048d04 <HAL_GPIO_Init+0x32c>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
10048b4c:	683b      	ldr	r3, [r7, #0]
10048b4e:	685a      	ldr	r2, [r3, #4]
10048b50:	2380      	movs	r3, #128	@ 0x80
10048b52:	02db      	lsls	r3, r3, #11
10048b54:	4013      	ands	r3, r2
10048b56:	d030      	beq.n	10048bba <HAL_GPIO_Init+0x1e2>
        {
          temp = SYSCFG->IO_DTR;
10048b58:	2380      	movs	r3, #128	@ 0x80
10048b5a:	05db      	lsls	r3, r3, #23
10048b5c:	68db      	ldr	r3, [r3, #12]
10048b5e:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
10048b60:	687a      	ldr	r2, [r7, #4]
10048b62:	2390      	movs	r3, #144	@ 0x90
10048b64:	05db      	lsls	r3, r3, #23
10048b66:	429a      	cmp	r2, r3
10048b68:	d111      	bne.n	10048b8e <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
10048b6a:	2201      	movs	r2, #1
10048b6c:	697b      	ldr	r3, [r7, #20]
10048b6e:	409a      	lsls	r2, r3
10048b70:	0013      	movs	r3, r2
10048b72:	43db      	mvns	r3, r3
10048b74:	001a      	movs	r2, r3
10048b76:	693b      	ldr	r3, [r7, #16]
10048b78:	4013      	ands	r3, r2
10048b7a:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10048b7c:	2201      	movs	r2, #1
10048b7e:	697b      	ldr	r3, [r7, #20]
10048b80:	409a      	lsls	r2, r3
10048b82:	0013      	movs	r3, r2
10048b84:	001a      	movs	r2, r3
10048b86:	693b      	ldr	r3, [r7, #16]
10048b88:	4313      	orrs	r3, r2
10048b8a:	613b      	str	r3, [r7, #16]
10048b8c:	e011      	b.n	10048bb2 <HAL_GPIO_Init+0x1da>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10048b8e:	2201      	movs	r2, #1
10048b90:	697b      	ldr	r3, [r7, #20]
10048b92:	409a      	lsls	r2, r3
10048b94:	0013      	movs	r3, r2
10048b96:	041b      	lsls	r3, r3, #16
10048b98:	43db      	mvns	r3, r3
10048b9a:	001a      	movs	r2, r3
10048b9c:	693b      	ldr	r3, [r7, #16]
10048b9e:	4013      	ands	r3, r2
10048ba0:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10048ba2:	2201      	movs	r2, #1
10048ba4:	697b      	ldr	r3, [r7, #20]
10048ba6:	409a      	lsls	r2, r3
10048ba8:	0013      	movs	r3, r2
10048baa:	041b      	lsls	r3, r3, #16
10048bac:	693a      	ldr	r2, [r7, #16]
10048bae:	4313      	orrs	r3, r2
10048bb0:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
10048bb2:	2380      	movs	r3, #128	@ 0x80
10048bb4:	05db      	lsls	r3, r3, #23
10048bb6:	693a      	ldr	r2, [r7, #16]
10048bb8:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
10048bba:	683b      	ldr	r3, [r7, #0]
10048bbc:	685a      	ldr	r2, [r3, #4]
10048bbe:	2380      	movs	r3, #128	@ 0x80
10048bc0:	035b      	lsls	r3, r3, #13
10048bc2:	4013      	ands	r3, r2
10048bc4:	d030      	beq.n	10048c28 <HAL_GPIO_Init+0x250>
        {
          temp = SYSCFG->IO_IBER;
10048bc6:	2380      	movs	r3, #128	@ 0x80
10048bc8:	05db      	lsls	r3, r3, #23
10048bca:	691b      	ldr	r3, [r3, #16]
10048bcc:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10048bce:	687a      	ldr	r2, [r7, #4]
10048bd0:	2390      	movs	r3, #144	@ 0x90
10048bd2:	05db      	lsls	r3, r3, #23
10048bd4:	429a      	cmp	r2, r3
10048bd6:	d111      	bne.n	10048bfc <HAL_GPIO_Init+0x224>
          {
            temp &= ~(1 << position);
10048bd8:	2201      	movs	r2, #1
10048bda:	697b      	ldr	r3, [r7, #20]
10048bdc:	409a      	lsls	r2, r3
10048bde:	0013      	movs	r3, r2
10048be0:	43db      	mvns	r3, r3
10048be2:	001a      	movs	r2, r3
10048be4:	693b      	ldr	r3, [r7, #16]
10048be6:	4013      	ands	r3, r2
10048be8:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10048bea:	2201      	movs	r2, #1
10048bec:	697b      	ldr	r3, [r7, #20]
10048bee:	409a      	lsls	r2, r3
10048bf0:	0013      	movs	r3, r2
10048bf2:	001a      	movs	r2, r3
10048bf4:	693b      	ldr	r3, [r7, #16]
10048bf6:	4313      	orrs	r3, r2
10048bf8:	613b      	str	r3, [r7, #16]
10048bfa:	e011      	b.n	10048c20 <HAL_GPIO_Init+0x248>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10048bfc:	2201      	movs	r2, #1
10048bfe:	697b      	ldr	r3, [r7, #20]
10048c00:	409a      	lsls	r2, r3
10048c02:	0013      	movs	r3, r2
10048c04:	041b      	lsls	r3, r3, #16
10048c06:	43db      	mvns	r3, r3
10048c08:	001a      	movs	r2, r3
10048c0a:	693b      	ldr	r3, [r7, #16]
10048c0c:	4013      	ands	r3, r2
10048c0e:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10048c10:	2201      	movs	r2, #1
10048c12:	697b      	ldr	r3, [r7, #20]
10048c14:	409a      	lsls	r2, r3
10048c16:	0013      	movs	r3, r2
10048c18:	041b      	lsls	r3, r3, #16
10048c1a:	693a      	ldr	r2, [r7, #16]
10048c1c:	4313      	orrs	r3, r2
10048c1e:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
10048c20:	2380      	movs	r3, #128	@ 0x80
10048c22:	05db      	lsls	r3, r3, #23
10048c24:	693a      	ldr	r2, [r7, #16]
10048c26:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
10048c28:	683b      	ldr	r3, [r7, #0]
10048c2a:	685a      	ldr	r2, [r3, #4]
10048c2c:	2380      	movs	r3, #128	@ 0x80
10048c2e:	03db      	lsls	r3, r3, #15
10048c30:	4013      	ands	r3, r2
10048c32:	d030      	beq.n	10048c96 <HAL_GPIO_Init+0x2be>
        {
          temp = SYSCFG->IO_IEVR;
10048c34:	2380      	movs	r3, #128	@ 0x80
10048c36:	05db      	lsls	r3, r3, #23
10048c38:	695b      	ldr	r3, [r3, #20]
10048c3a:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10048c3c:	687a      	ldr	r2, [r7, #4]
10048c3e:	2390      	movs	r3, #144	@ 0x90
10048c40:	05db      	lsls	r3, r3, #23
10048c42:	429a      	cmp	r2, r3
10048c44:	d111      	bne.n	10048c6a <HAL_GPIO_Init+0x292>
          {
            temp &= ~(1 << position);
10048c46:	2201      	movs	r2, #1
10048c48:	697b      	ldr	r3, [r7, #20]
10048c4a:	409a      	lsls	r2, r3
10048c4c:	0013      	movs	r3, r2
10048c4e:	43db      	mvns	r3, r3
10048c50:	001a      	movs	r2, r3
10048c52:	693b      	ldr	r3, [r7, #16]
10048c54:	4013      	ands	r3, r2
10048c56:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10048c58:	2201      	movs	r2, #1
10048c5a:	697b      	ldr	r3, [r7, #20]
10048c5c:	409a      	lsls	r2, r3
10048c5e:	0013      	movs	r3, r2
10048c60:	001a      	movs	r2, r3
10048c62:	693b      	ldr	r3, [r7, #16]
10048c64:	4313      	orrs	r3, r2
10048c66:	613b      	str	r3, [r7, #16]
10048c68:	e011      	b.n	10048c8e <HAL_GPIO_Init+0x2b6>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10048c6a:	2201      	movs	r2, #1
10048c6c:	697b      	ldr	r3, [r7, #20]
10048c6e:	409a      	lsls	r2, r3
10048c70:	0013      	movs	r3, r2
10048c72:	041b      	lsls	r3, r3, #16
10048c74:	43db      	mvns	r3, r3
10048c76:	001a      	movs	r2, r3
10048c78:	693b      	ldr	r3, [r7, #16]
10048c7a:	4013      	ands	r3, r2
10048c7c:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10048c7e:	2201      	movs	r2, #1
10048c80:	697b      	ldr	r3, [r7, #20]
10048c82:	409a      	lsls	r2, r3
10048c84:	0013      	movs	r3, r2
10048c86:	041b      	lsls	r3, r3, #16
10048c88:	693a      	ldr	r2, [r7, #16]
10048c8a:	4313      	orrs	r3, r2
10048c8c:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
10048c8e:	2380      	movs	r3, #128	@ 0x80
10048c90:	05db      	lsls	r3, r3, #23
10048c92:	693a      	ldr	r2, [r7, #16]
10048c94:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
10048c96:	683b      	ldr	r3, [r7, #0]
10048c98:	685a      	ldr	r2, [r3, #4]
10048c9a:	2380      	movs	r3, #128	@ 0x80
10048c9c:	025b      	lsls	r3, r3, #9
10048c9e:	4013      	ands	r3, r2
10048ca0:	d030      	beq.n	10048d04 <HAL_GPIO_Init+0x32c>
        {
          temp = SYSCFG->IO_IER;
10048ca2:	2380      	movs	r3, #128	@ 0x80
10048ca4:	05db      	lsls	r3, r3, #23
10048ca6:	699b      	ldr	r3, [r3, #24]
10048ca8:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10048caa:	687a      	ldr	r2, [r7, #4]
10048cac:	2390      	movs	r3, #144	@ 0x90
10048cae:	05db      	lsls	r3, r3, #23
10048cb0:	429a      	cmp	r2, r3
10048cb2:	d111      	bne.n	10048cd8 <HAL_GPIO_Init+0x300>
          {
            temp &= ~(1 << position);
10048cb4:	2201      	movs	r2, #1
10048cb6:	697b      	ldr	r3, [r7, #20]
10048cb8:	409a      	lsls	r2, r3
10048cba:	0013      	movs	r3, r2
10048cbc:	43db      	mvns	r3, r3
10048cbe:	001a      	movs	r2, r3
10048cc0:	693b      	ldr	r3, [r7, #16]
10048cc2:	4013      	ands	r3, r2
10048cc4:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10048cc6:	2201      	movs	r2, #1
10048cc8:	697b      	ldr	r3, [r7, #20]
10048cca:	409a      	lsls	r2, r3
10048ccc:	0013      	movs	r3, r2
10048cce:	001a      	movs	r2, r3
10048cd0:	693b      	ldr	r3, [r7, #16]
10048cd2:	4313      	orrs	r3, r2
10048cd4:	613b      	str	r3, [r7, #16]
10048cd6:	e011      	b.n	10048cfc <HAL_GPIO_Init+0x324>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10048cd8:	2201      	movs	r2, #1
10048cda:	697b      	ldr	r3, [r7, #20]
10048cdc:	409a      	lsls	r2, r3
10048cde:	0013      	movs	r3, r2
10048ce0:	041b      	lsls	r3, r3, #16
10048ce2:	43db      	mvns	r3, r3
10048ce4:	001a      	movs	r2, r3
10048ce6:	693b      	ldr	r3, [r7, #16]
10048ce8:	4013      	ands	r3, r2
10048cea:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10048cec:	2201      	movs	r2, #1
10048cee:	697b      	ldr	r3, [r7, #20]
10048cf0:	409a      	lsls	r2, r3
10048cf2:	0013      	movs	r3, r2
10048cf4:	041b      	lsls	r3, r3, #16
10048cf6:	693a      	ldr	r2, [r7, #16]
10048cf8:	4313      	orrs	r3, r2
10048cfa:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
10048cfc:	2380      	movs	r3, #128	@ 0x80
10048cfe:	05db      	lsls	r3, r3, #23
10048d00:	693a      	ldr	r2, [r7, #16]
10048d02:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
10048d04:	697b      	ldr	r3, [r7, #20]
10048d06:	3301      	adds	r3, #1
10048d08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
10048d0a:	683b      	ldr	r3, [r7, #0]
10048d0c:	681a      	ldr	r2, [r3, #0]
10048d0e:	697b      	ldr	r3, [r7, #20]
10048d10:	40da      	lsrs	r2, r3
10048d12:	1e13      	subs	r3, r2, #0
10048d14:	d000      	beq.n	10048d18 <HAL_GPIO_Init+0x340>
10048d16:	e667      	b.n	100489e8 <HAL_GPIO_Init+0x10>
  }
}
10048d18:	46c0      	nop			@ (mov r8, r8)
10048d1a:	46c0      	nop			@ (mov r8, r8)
10048d1c:	46bd      	mov	sp, r7
10048d1e:	b006      	add	sp, #24
10048d20:	bd80      	pop	{r7, pc}

10048d22 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
10048d22:	b580      	push	{r7, lr}
10048d24:	b086      	sub	sp, #24
10048d26:	af00      	add	r7, sp, #0
10048d28:	6078      	str	r0, [r7, #4]
10048d2a:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
10048d2c:	2300      	movs	r3, #0
10048d2e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
10048d30:	e0cf      	b.n	10048ed2 <HAL_GPIO_DeInit+0x1b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
10048d32:	2201      	movs	r2, #1
10048d34:	697b      	ldr	r3, [r7, #20]
10048d36:	409a      	lsls	r2, r3
10048d38:	683b      	ldr	r3, [r7, #0]
10048d3a:	4013      	ands	r3, r2
10048d3c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
10048d3e:	68fb      	ldr	r3, [r7, #12]
10048d40:	2b00      	cmp	r3, #0
10048d42:	d100      	bne.n	10048d46 <HAL_GPIO_DeInit+0x24>
10048d44:	e0c2      	b.n	10048ecc <HAL_GPIO_DeInit+0x1aa>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      /* Disable the specified EXTI interrupt line */
      tmp = SYSCFG->IO_IER;
10048d46:	2380      	movs	r3, #128	@ 0x80
10048d48:	05db      	lsls	r3, r3, #23
10048d4a:	699b      	ldr	r3, [r3, #24]
10048d4c:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
10048d4e:	687a      	ldr	r2, [r7, #4]
10048d50:	2390      	movs	r3, #144	@ 0x90
10048d52:	05db      	lsls	r3, r3, #23
10048d54:	429a      	cmp	r2, r3
10048d56:	d109      	bne.n	10048d6c <HAL_GPIO_DeInit+0x4a>
      {
        tmp &= ~(1<<position);
10048d58:	2201      	movs	r2, #1
10048d5a:	697b      	ldr	r3, [r7, #20]
10048d5c:	409a      	lsls	r2, r3
10048d5e:	0013      	movs	r3, r2
10048d60:	43db      	mvns	r3, r3
10048d62:	001a      	movs	r2, r3
10048d64:	693b      	ldr	r3, [r7, #16]
10048d66:	4013      	ands	r3, r2
10048d68:	613b      	str	r3, [r7, #16]
10048d6a:	e009      	b.n	10048d80 <HAL_GPIO_DeInit+0x5e>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
10048d6c:	2201      	movs	r2, #1
10048d6e:	697b      	ldr	r3, [r7, #20]
10048d70:	409a      	lsls	r2, r3
10048d72:	0013      	movs	r3, r2
10048d74:	041b      	lsls	r3, r3, #16
10048d76:	43db      	mvns	r3, r3
10048d78:	001a      	movs	r2, r3
10048d7a:	693b      	ldr	r3, [r7, #16]
10048d7c:	4013      	ands	r3, r2
10048d7e:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_IER = tmp;
10048d80:	2380      	movs	r3, #128	@ 0x80
10048d82:	05db      	lsls	r3, r3, #23
10048d84:	693a      	ldr	r2, [r7, #16]
10048d86:	619a      	str	r2, [r3, #24]

      /* Clear EXTI line configuration */
      tmp = SYSCFG->IO_DTR;
10048d88:	2380      	movs	r3, #128	@ 0x80
10048d8a:	05db      	lsls	r3, r3, #23
10048d8c:	68db      	ldr	r3, [r3, #12]
10048d8e:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
10048d90:	687a      	ldr	r2, [r7, #4]
10048d92:	2390      	movs	r3, #144	@ 0x90
10048d94:	05db      	lsls	r3, r3, #23
10048d96:	429a      	cmp	r2, r3
10048d98:	d109      	bne.n	10048dae <HAL_GPIO_DeInit+0x8c>
      {
        tmp &= ~(1<<position);
10048d9a:	2201      	movs	r2, #1
10048d9c:	697b      	ldr	r3, [r7, #20]
10048d9e:	409a      	lsls	r2, r3
10048da0:	0013      	movs	r3, r2
10048da2:	43db      	mvns	r3, r3
10048da4:	001a      	movs	r2, r3
10048da6:	693b      	ldr	r3, [r7, #16]
10048da8:	4013      	ands	r3, r2
10048daa:	613b      	str	r3, [r7, #16]
10048dac:	e009      	b.n	10048dc2 <HAL_GPIO_DeInit+0xa0>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
10048dae:	2201      	movs	r2, #1
10048db0:	697b      	ldr	r3, [r7, #20]
10048db2:	409a      	lsls	r2, r3
10048db4:	0013      	movs	r3, r2
10048db6:	041b      	lsls	r3, r3, #16
10048db8:	43db      	mvns	r3, r3
10048dba:	001a      	movs	r2, r3
10048dbc:	693b      	ldr	r3, [r7, #16]
10048dbe:	4013      	ands	r3, r2
10048dc0:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_DTR = tmp;
10048dc2:	2380      	movs	r3, #128	@ 0x80
10048dc4:	05db      	lsls	r3, r3, #23
10048dc6:	693a      	ldr	r2, [r7, #16]
10048dc8:	60da      	str	r2, [r3, #12]

      tmp = SYSCFG->IO_IBER;
10048dca:	2380      	movs	r3, #128	@ 0x80
10048dcc:	05db      	lsls	r3, r3, #23
10048dce:	691b      	ldr	r3, [r3, #16]
10048dd0:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
10048dd2:	687a      	ldr	r2, [r7, #4]
10048dd4:	2390      	movs	r3, #144	@ 0x90
10048dd6:	05db      	lsls	r3, r3, #23
10048dd8:	429a      	cmp	r2, r3
10048dda:	d109      	bne.n	10048df0 <HAL_GPIO_DeInit+0xce>
      {
        tmp &= ~(1<<position);
10048ddc:	2201      	movs	r2, #1
10048dde:	697b      	ldr	r3, [r7, #20]
10048de0:	409a      	lsls	r2, r3
10048de2:	0013      	movs	r3, r2
10048de4:	43db      	mvns	r3, r3
10048de6:	001a      	movs	r2, r3
10048de8:	693b      	ldr	r3, [r7, #16]
10048dea:	4013      	ands	r3, r2
10048dec:	613b      	str	r3, [r7, #16]
10048dee:	e009      	b.n	10048e04 <HAL_GPIO_DeInit+0xe2>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
10048df0:	2201      	movs	r2, #1
10048df2:	697b      	ldr	r3, [r7, #20]
10048df4:	409a      	lsls	r2, r3
10048df6:	0013      	movs	r3, r2
10048df8:	041b      	lsls	r3, r3, #16
10048dfa:	43db      	mvns	r3, r3
10048dfc:	001a      	movs	r2, r3
10048dfe:	693b      	ldr	r3, [r7, #16]
10048e00:	4013      	ands	r3, r2
10048e02:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_IBER = tmp;
10048e04:	2380      	movs	r3, #128	@ 0x80
10048e06:	05db      	lsls	r3, r3, #23
10048e08:	693a      	ldr	r2, [r7, #16]
10048e0a:	611a      	str	r2, [r3, #16]

      /* Clear trigger mode configuration */
      tmp = SYSCFG->IO_IEVR;
10048e0c:	2380      	movs	r3, #128	@ 0x80
10048e0e:	05db      	lsls	r3, r3, #23
10048e10:	695b      	ldr	r3, [r3, #20]
10048e12:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
10048e14:	687a      	ldr	r2, [r7, #4]
10048e16:	2390      	movs	r3, #144	@ 0x90
10048e18:	05db      	lsls	r3, r3, #23
10048e1a:	429a      	cmp	r2, r3
10048e1c:	d109      	bne.n	10048e32 <HAL_GPIO_DeInit+0x110>
      {
        tmp &= ~(1<<position);
10048e1e:	2201      	movs	r2, #1
10048e20:	697b      	ldr	r3, [r7, #20]
10048e22:	409a      	lsls	r2, r3
10048e24:	0013      	movs	r3, r2
10048e26:	43db      	mvns	r3, r3
10048e28:	001a      	movs	r2, r3
10048e2a:	693b      	ldr	r3, [r7, #16]
10048e2c:	4013      	ands	r3, r2
10048e2e:	613b      	str	r3, [r7, #16]
10048e30:	e009      	b.n	10048e46 <HAL_GPIO_DeInit+0x124>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
10048e32:	2201      	movs	r2, #1
10048e34:	697b      	ldr	r3, [r7, #20]
10048e36:	409a      	lsls	r2, r3
10048e38:	0013      	movs	r3, r2
10048e3a:	041b      	lsls	r3, r3, #16
10048e3c:	43db      	mvns	r3, r3
10048e3e:	001a      	movs	r2, r3
10048e40:	693b      	ldr	r3, [r7, #16]
10048e42:	4013      	ands	r3, r2
10048e44:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_IEVR = tmp;
10048e46:	2380      	movs	r3, #128	@ 0x80
10048e48:	05db      	lsls	r3, r3, #23
10048e4a:	693a      	ldr	r2, [r7, #16]
10048e4c:	615a      	str	r2, [r3, #20]

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
10048e4e:	687b      	ldr	r3, [r7, #4]
10048e50:	681a      	ldr	r2, [r3, #0]
10048e52:	697b      	ldr	r3, [r7, #20]
10048e54:	005b      	lsls	r3, r3, #1
10048e56:	2103      	movs	r1, #3
10048e58:	4099      	lsls	r1, r3
10048e5a:	000b      	movs	r3, r1
10048e5c:	431a      	orrs	r2, r3
10048e5e:	687b      	ldr	r3, [r7, #4]
10048e60:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
10048e62:	697b      	ldr	r3, [r7, #20]
10048e64:	08da      	lsrs	r2, r3, #3
10048e66:	687b      	ldr	r3, [r7, #4]
10048e68:	3208      	adds	r2, #8
10048e6a:	0092      	lsls	r2, r2, #2
10048e6c:	58d3      	ldr	r3, [r2, r3]
10048e6e:	697a      	ldr	r2, [r7, #20]
10048e70:	2107      	movs	r1, #7
10048e72:	400a      	ands	r2, r1
10048e74:	0092      	lsls	r2, r2, #2
10048e76:	210f      	movs	r1, #15
10048e78:	4091      	lsls	r1, r2
10048e7a:	000a      	movs	r2, r1
10048e7c:	43d1      	mvns	r1, r2
10048e7e:	697a      	ldr	r2, [r7, #20]
10048e80:	08d2      	lsrs	r2, r2, #3
10048e82:	4019      	ands	r1, r3
10048e84:	687b      	ldr	r3, [r7, #4]
10048e86:	3208      	adds	r2, #8
10048e88:	0092      	lsls	r2, r2, #2
10048e8a:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
10048e8c:	687b      	ldr	r3, [r7, #4]
10048e8e:	68db      	ldr	r3, [r3, #12]
10048e90:	697a      	ldr	r2, [r7, #20]
10048e92:	0052      	lsls	r2, r2, #1
10048e94:	2103      	movs	r1, #3
10048e96:	4091      	lsls	r1, r2
10048e98:	000a      	movs	r2, r1
10048e9a:	43d2      	mvns	r2, r2
10048e9c:	401a      	ands	r2, r3
10048e9e:	687b      	ldr	r3, [r7, #4]
10048ea0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
10048ea2:	687b      	ldr	r3, [r7, #4]
10048ea4:	685b      	ldr	r3, [r3, #4]
10048ea6:	2101      	movs	r1, #1
10048ea8:	697a      	ldr	r2, [r7, #20]
10048eaa:	4091      	lsls	r1, r2
10048eac:	000a      	movs	r2, r1
10048eae:	43d2      	mvns	r2, r2
10048eb0:	401a      	ands	r2, r3
10048eb2:	687b      	ldr	r3, [r7, #4]
10048eb4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
10048eb6:	687b      	ldr	r3, [r7, #4]
10048eb8:	689b      	ldr	r3, [r3, #8]
10048eba:	697a      	ldr	r2, [r7, #20]
10048ebc:	0052      	lsls	r2, r2, #1
10048ebe:	2103      	movs	r1, #3
10048ec0:	4091      	lsls	r1, r2
10048ec2:	000a      	movs	r2, r1
10048ec4:	43d2      	mvns	r2, r2
10048ec6:	401a      	ands	r2, r3
10048ec8:	687b      	ldr	r3, [r7, #4]
10048eca:	609a      	str	r2, [r3, #8]
    }

    position++;
10048ecc:	697b      	ldr	r3, [r7, #20]
10048ece:	3301      	adds	r3, #1
10048ed0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
10048ed2:	683a      	ldr	r2, [r7, #0]
10048ed4:	697b      	ldr	r3, [r7, #20]
10048ed6:	40da      	lsrs	r2, r3
10048ed8:	1e13      	subs	r3, r2, #0
10048eda:	d000      	beq.n	10048ede <HAL_GPIO_DeInit+0x1bc>
10048edc:	e729      	b.n	10048d32 <HAL_GPIO_DeInit+0x10>
  }
}
10048ede:	46c0      	nop			@ (mov r8, r8)
10048ee0:	46c0      	nop			@ (mov r8, r8)
10048ee2:	46bd      	mov	sp, r7
10048ee4:	b006      	add	sp, #24
10048ee6:	bd80      	pop	{r7, pc}

10048ee8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
10048ee8:	b580      	push	{r7, lr}
10048eea:	b084      	sub	sp, #16
10048eec:	af00      	add	r7, sp, #0
10048eee:	6078      	str	r0, [r7, #4]
10048ef0:	000a      	movs	r2, r1
10048ef2:	1cbb      	adds	r3, r7, #2
10048ef4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
10048ef6:	687b      	ldr	r3, [r7, #4]
10048ef8:	691b      	ldr	r3, [r3, #16]
10048efa:	1cba      	adds	r2, r7, #2
10048efc:	8812      	ldrh	r2, [r2, #0]
10048efe:	4013      	ands	r3, r2
10048f00:	d004      	beq.n	10048f0c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
10048f02:	230f      	movs	r3, #15
10048f04:	18fb      	adds	r3, r7, r3
10048f06:	2201      	movs	r2, #1
10048f08:	701a      	strb	r2, [r3, #0]
10048f0a:	e003      	b.n	10048f14 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
10048f0c:	230f      	movs	r3, #15
10048f0e:	18fb      	adds	r3, r7, r3
10048f10:	2200      	movs	r2, #0
10048f12:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
10048f14:	230f      	movs	r3, #15
10048f16:	18fb      	adds	r3, r7, r3
10048f18:	781b      	ldrb	r3, [r3, #0]
}
10048f1a:	0018      	movs	r0, r3
10048f1c:	46bd      	mov	sp, r7
10048f1e:	b004      	add	sp, #16
10048f20:	bd80      	pop	{r7, pc}

10048f22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10048f22:	b580      	push	{r7, lr}
10048f24:	b082      	sub	sp, #8
10048f26:	af00      	add	r7, sp, #0
10048f28:	6078      	str	r0, [r7, #4]
10048f2a:	0008      	movs	r0, r1
10048f2c:	0011      	movs	r1, r2
10048f2e:	1cbb      	adds	r3, r7, #2
10048f30:	1c02      	adds	r2, r0, #0
10048f32:	801a      	strh	r2, [r3, #0]
10048f34:	1c7b      	adds	r3, r7, #1
10048f36:	1c0a      	adds	r2, r1, #0
10048f38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10048f3a:	1c7b      	adds	r3, r7, #1
10048f3c:	781b      	ldrb	r3, [r3, #0]
10048f3e:	2b00      	cmp	r3, #0
10048f40:	d004      	beq.n	10048f4c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
10048f42:	1cbb      	adds	r3, r7, #2
10048f44:	881a      	ldrh	r2, [r3, #0]
10048f46:	687b      	ldr	r3, [r7, #4]
10048f48:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
10048f4a:	e003      	b.n	10048f54 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
10048f4c:	1cbb      	adds	r3, r7, #2
10048f4e:	881a      	ldrh	r2, [r3, #0]
10048f50:	687b      	ldr	r3, [r7, #4]
10048f52:	629a      	str	r2, [r3, #40]	@ 0x28
}
10048f54:	46c0      	nop			@ (mov r8, r8)
10048f56:	46bd      	mov	sp, r7
10048f58:	b002      	add	sp, #8
10048f5a:	bd80      	pop	{r7, pc}

10048f5c <HAL_GPIO_EXTI_IRQHandler>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10048f5c:	b580      	push	{r7, lr}
10048f5e:	b082      	sub	sp, #8
10048f60:	af00      	add	r7, sp, #0
10048f62:	6078      	str	r0, [r7, #4]
10048f64:	000a      	movs	r2, r1
10048f66:	1cbb      	adds	r3, r7, #2
10048f68:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIOx, GPIO_Pin) != 0x00u)
10048f6a:	687a      	ldr	r2, [r7, #4]
10048f6c:	2390      	movs	r3, #144	@ 0x90
10048f6e:	05db      	lsls	r3, r3, #23
10048f70:	429a      	cmp	r2, r3
10048f72:	d109      	bne.n	10048f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>
10048f74:	2380      	movs	r3, #128	@ 0x80
10048f76:	05db      	lsls	r3, r3, #23
10048f78:	69db      	ldr	r3, [r3, #28]
10048f7a:	1cba      	adds	r2, r7, #2
10048f7c:	8812      	ldrh	r2, [r2, #0]
10048f7e:	4013      	ands	r3, r2
10048f80:	1e5a      	subs	r2, r3, #1
10048f82:	4193      	sbcs	r3, r2
10048f84:	b2db      	uxtb	r3, r3
10048f86:	e009      	b.n	10048f9c <HAL_GPIO_EXTI_IRQHandler+0x40>
10048f88:	2380      	movs	r3, #128	@ 0x80
10048f8a:	05db      	lsls	r3, r3, #23
10048f8c:	69db      	ldr	r3, [r3, #28]
10048f8e:	1cba      	adds	r2, r7, #2
10048f90:	8812      	ldrh	r2, [r2, #0]
10048f92:	0412      	lsls	r2, r2, #16
10048f94:	4013      	ands	r3, r2
10048f96:	1e5a      	subs	r2, r3, #1
10048f98:	4193      	sbcs	r3, r2
10048f9a:	b2db      	uxtb	r3, r3
10048f9c:	2b00      	cmp	r3, #0
10048f9e:	d017      	beq.n	10048fd0 <HAL_GPIO_EXTI_IRQHandler+0x74>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIOx, GPIO_Pin);
10048fa0:	687a      	ldr	r2, [r7, #4]
10048fa2:	2390      	movs	r3, #144	@ 0x90
10048fa4:	05db      	lsls	r3, r3, #23
10048fa6:	429a      	cmp	r2, r3
10048fa8:	d105      	bne.n	10048fb6 <HAL_GPIO_EXTI_IRQHandler+0x5a>
10048faa:	2380      	movs	r3, #128	@ 0x80
10048fac:	05db      	lsls	r3, r3, #23
10048fae:	1cba      	adds	r2, r7, #2
10048fb0:	8812      	ldrh	r2, [r2, #0]
10048fb2:	61da      	str	r2, [r3, #28]
10048fb4:	e005      	b.n	10048fc2 <HAL_GPIO_EXTI_IRQHandler+0x66>
10048fb6:	1cbb      	adds	r3, r7, #2
10048fb8:	881a      	ldrh	r2, [r3, #0]
10048fba:	2380      	movs	r3, #128	@ 0x80
10048fbc:	05db      	lsls	r3, r3, #23
10048fbe:	0412      	lsls	r2, r2, #16
10048fc0:	61da      	str	r2, [r3, #28]
    HAL_GPIO_EXTI_Callback(GPIOx, GPIO_Pin);
10048fc2:	1cbb      	adds	r3, r7, #2
10048fc4:	881a      	ldrh	r2, [r3, #0]
10048fc6:	687b      	ldr	r3, [r7, #4]
10048fc8:	0011      	movs	r1, r2
10048fca:	0018      	movs	r0, r3
10048fcc:	f000 f804 	bl	10048fd8 <HAL_GPIO_EXTI_Callback>
  }
}
10048fd0:	46c0      	nop			@ (mov r8, r8)
10048fd2:	46bd      	mov	sp, r7
10048fd4:	b002      	add	sp, #8
10048fd6:	bd80      	pop	{r7, pc}

10048fd8 <HAL_GPIO_EXTI_Callback>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10048fd8:	b580      	push	{r7, lr}
10048fda:	b082      	sub	sp, #8
10048fdc:	af00      	add	r7, sp, #0
10048fde:	6078      	str	r0, [r7, #4]
10048fe0:	000a      	movs	r2, r1
10048fe2:	1cbb      	adds	r3, r7, #2
10048fe4:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
10048fe6:	46c0      	nop			@ (mov r8, r8)
10048fe8:	46bd      	mov	sp, r7
10048fea:	b002      	add	sp, #8
10048fec:	bd80      	pop	{r7, pc}
	...

10048ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
10048ff0:	b580      	push	{r7, lr}
10048ff2:	b082      	sub	sp, #8
10048ff4:	af00      	add	r7, sp, #0
10048ff6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
10048ff8:	687b      	ldr	r3, [r7, #4]
10048ffa:	2b00      	cmp	r3, #0
10048ffc:	d101      	bne.n	10049002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
10048ffe:	2301      	movs	r3, #1
10049000:	e08f      	b.n	10049122 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
10049002:	687b      	ldr	r3, [r7, #4]
10049004:	2241      	movs	r2, #65	@ 0x41
10049006:	5c9b      	ldrb	r3, [r3, r2]
10049008:	b2db      	uxtb	r3, r3
1004900a:	2b00      	cmp	r3, #0
1004900c:	d107      	bne.n	1004901e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
1004900e:	687b      	ldr	r3, [r7, #4]
10049010:	2240      	movs	r2, #64	@ 0x40
10049012:	2100      	movs	r1, #0
10049014:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
10049016:	687b      	ldr	r3, [r7, #4]
10049018:	0018      	movs	r0, r3
1004901a:	f7fe fafd 	bl	10047618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
1004901e:	687b      	ldr	r3, [r7, #4]
10049020:	2241      	movs	r2, #65	@ 0x41
10049022:	2124      	movs	r1, #36	@ 0x24
10049024:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
10049026:	687b      	ldr	r3, [r7, #4]
10049028:	681b      	ldr	r3, [r3, #0]
1004902a:	681a      	ldr	r2, [r3, #0]
1004902c:	687b      	ldr	r3, [r7, #4]
1004902e:	681b      	ldr	r3, [r3, #0]
10049030:	2101      	movs	r1, #1
10049032:	438a      	bics	r2, r1
10049034:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
10049036:	687b      	ldr	r3, [r7, #4]
10049038:	685a      	ldr	r2, [r3, #4]
1004903a:	687b      	ldr	r3, [r7, #4]
1004903c:	681b      	ldr	r3, [r3, #0]
1004903e:	493b      	ldr	r1, [pc, #236]	@ (1004912c <HAL_I2C_Init+0x13c>)
10049040:	400a      	ands	r2, r1
10049042:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
10049044:	687b      	ldr	r3, [r7, #4]
10049046:	681b      	ldr	r3, [r3, #0]
10049048:	689a      	ldr	r2, [r3, #8]
1004904a:	687b      	ldr	r3, [r7, #4]
1004904c:	681b      	ldr	r3, [r3, #0]
1004904e:	4938      	ldr	r1, [pc, #224]	@ (10049130 <HAL_I2C_Init+0x140>)
10049050:	400a      	ands	r2, r1
10049052:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
10049054:	687b      	ldr	r3, [r7, #4]
10049056:	68db      	ldr	r3, [r3, #12]
10049058:	2b01      	cmp	r3, #1
1004905a:	d108      	bne.n	1004906e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
1004905c:	687b      	ldr	r3, [r7, #4]
1004905e:	689a      	ldr	r2, [r3, #8]
10049060:	687b      	ldr	r3, [r7, #4]
10049062:	681b      	ldr	r3, [r3, #0]
10049064:	2180      	movs	r1, #128	@ 0x80
10049066:	0209      	lsls	r1, r1, #8
10049068:	430a      	orrs	r2, r1
1004906a:	609a      	str	r2, [r3, #8]
1004906c:	e007      	b.n	1004907e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
1004906e:	687b      	ldr	r3, [r7, #4]
10049070:	689a      	ldr	r2, [r3, #8]
10049072:	687b      	ldr	r3, [r7, #4]
10049074:	681b      	ldr	r3, [r3, #0]
10049076:	2184      	movs	r1, #132	@ 0x84
10049078:	0209      	lsls	r1, r1, #8
1004907a:	430a      	orrs	r2, r1
1004907c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
1004907e:	687b      	ldr	r3, [r7, #4]
10049080:	68db      	ldr	r3, [r3, #12]
10049082:	2b02      	cmp	r3, #2
10049084:	d109      	bne.n	1004909a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
10049086:	687b      	ldr	r3, [r7, #4]
10049088:	681b      	ldr	r3, [r3, #0]
1004908a:	685a      	ldr	r2, [r3, #4]
1004908c:	687b      	ldr	r3, [r7, #4]
1004908e:	681b      	ldr	r3, [r3, #0]
10049090:	2180      	movs	r1, #128	@ 0x80
10049092:	0109      	lsls	r1, r1, #4
10049094:	430a      	orrs	r2, r1
10049096:	605a      	str	r2, [r3, #4]
10049098:	e007      	b.n	100490aa <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
1004909a:	687b      	ldr	r3, [r7, #4]
1004909c:	681b      	ldr	r3, [r3, #0]
1004909e:	685a      	ldr	r2, [r3, #4]
100490a0:	687b      	ldr	r3, [r7, #4]
100490a2:	681b      	ldr	r3, [r3, #0]
100490a4:	4923      	ldr	r1, [pc, #140]	@ (10049134 <HAL_I2C_Init+0x144>)
100490a6:	400a      	ands	r2, r1
100490a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
100490aa:	687b      	ldr	r3, [r7, #4]
100490ac:	681b      	ldr	r3, [r3, #0]
100490ae:	685a      	ldr	r2, [r3, #4]
100490b0:	687b      	ldr	r3, [r7, #4]
100490b2:	681b      	ldr	r3, [r3, #0]
100490b4:	4920      	ldr	r1, [pc, #128]	@ (10049138 <HAL_I2C_Init+0x148>)
100490b6:	430a      	orrs	r2, r1
100490b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
100490ba:	687b      	ldr	r3, [r7, #4]
100490bc:	681b      	ldr	r3, [r3, #0]
100490be:	68da      	ldr	r2, [r3, #12]
100490c0:	687b      	ldr	r3, [r7, #4]
100490c2:	681b      	ldr	r3, [r3, #0]
100490c4:	491a      	ldr	r1, [pc, #104]	@ (10049130 <HAL_I2C_Init+0x140>)
100490c6:	400a      	ands	r2, r1
100490c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
100490ca:	687b      	ldr	r3, [r7, #4]
100490cc:	691a      	ldr	r2, [r3, #16]
100490ce:	687b      	ldr	r3, [r7, #4]
100490d0:	695b      	ldr	r3, [r3, #20]
100490d2:	431a      	orrs	r2, r3
100490d4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
100490d6:	687b      	ldr	r3, [r7, #4]
100490d8:	699b      	ldr	r3, [r3, #24]
100490da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
100490dc:	687b      	ldr	r3, [r7, #4]
100490de:	681b      	ldr	r3, [r3, #0]
100490e0:	430a      	orrs	r2, r1
100490e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
100490e4:	687b      	ldr	r3, [r7, #4]
100490e6:	69d9      	ldr	r1, [r3, #28]
100490e8:	687b      	ldr	r3, [r7, #4]
100490ea:	6a1a      	ldr	r2, [r3, #32]
100490ec:	687b      	ldr	r3, [r7, #4]
100490ee:	681b      	ldr	r3, [r3, #0]
100490f0:	430a      	orrs	r2, r1
100490f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
100490f4:	687b      	ldr	r3, [r7, #4]
100490f6:	681b      	ldr	r3, [r3, #0]
100490f8:	681a      	ldr	r2, [r3, #0]
100490fa:	687b      	ldr	r3, [r7, #4]
100490fc:	681b      	ldr	r3, [r3, #0]
100490fe:	2101      	movs	r1, #1
10049100:	430a      	orrs	r2, r1
10049102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
10049104:	687b      	ldr	r3, [r7, #4]
10049106:	2200      	movs	r2, #0
10049108:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
1004910a:	687b      	ldr	r3, [r7, #4]
1004910c:	2241      	movs	r2, #65	@ 0x41
1004910e:	2120      	movs	r1, #32
10049110:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
10049112:	687b      	ldr	r3, [r7, #4]
10049114:	2200      	movs	r2, #0
10049116:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
10049118:	687b      	ldr	r3, [r7, #4]
1004911a:	2242      	movs	r2, #66	@ 0x42
1004911c:	2100      	movs	r1, #0
1004911e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10049120:	2300      	movs	r3, #0
}
10049122:	0018      	movs	r0, r3
10049124:	46bd      	mov	sp, r7
10049126:	b002      	add	sp, #8
10049128:	bd80      	pop	{r7, pc}
1004912a:	46c0      	nop			@ (mov r8, r8)
1004912c:	f0ffffff 	.word	0xf0ffffff
10049130:	ffff7fff 	.word	0xffff7fff
10049134:	fffff7ff 	.word	0xfffff7ff
10049138:	02008000 	.word	0x02008000

1004913c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
1004913c:	b590      	push	{r4, r7, lr}
1004913e:	b087      	sub	sp, #28
10049140:	af02      	add	r7, sp, #8
10049142:	60f8      	str	r0, [r7, #12]
10049144:	000c      	movs	r4, r1
10049146:	0010      	movs	r0, r2
10049148:	0019      	movs	r1, r3
1004914a:	230a      	movs	r3, #10
1004914c:	18fb      	adds	r3, r7, r3
1004914e:	1c22      	adds	r2, r4, #0
10049150:	801a      	strh	r2, [r3, #0]
10049152:	2308      	movs	r3, #8
10049154:	18fb      	adds	r3, r7, r3
10049156:	1c02      	adds	r2, r0, #0
10049158:	801a      	strh	r2, [r3, #0]
1004915a:	1dbb      	adds	r3, r7, #6
1004915c:	1c0a      	adds	r2, r1, #0
1004915e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
10049160:	68fb      	ldr	r3, [r7, #12]
10049162:	2241      	movs	r2, #65	@ 0x41
10049164:	5c9b      	ldrb	r3, [r3, r2]
10049166:	b2db      	uxtb	r3, r3
10049168:	2b20      	cmp	r3, #32
1004916a:	d000      	beq.n	1004916e <HAL_I2C_Mem_Write_IT+0x32>
1004916c:	e07d      	b.n	1004926a <HAL_I2C_Mem_Write_IT+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
1004916e:	6a3b      	ldr	r3, [r7, #32]
10049170:	2b00      	cmp	r3, #0
10049172:	d004      	beq.n	1004917e <HAL_I2C_Mem_Write_IT+0x42>
10049174:	2324      	movs	r3, #36	@ 0x24
10049176:	18fb      	adds	r3, r7, r3
10049178:	881b      	ldrh	r3, [r3, #0]
1004917a:	2b00      	cmp	r3, #0
1004917c:	d105      	bne.n	1004918a <HAL_I2C_Mem_Write_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
1004917e:	68fb      	ldr	r3, [r7, #12]
10049180:	2280      	movs	r2, #128	@ 0x80
10049182:	0092      	lsls	r2, r2, #2
10049184:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
10049186:	2301      	movs	r3, #1
10049188:	e070      	b.n	1004926c <HAL_I2C_Mem_Write_IT+0x130>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
1004918a:	68fb      	ldr	r3, [r7, #12]
1004918c:	681b      	ldr	r3, [r3, #0]
1004918e:	699a      	ldr	r2, [r3, #24]
10049190:	2380      	movs	r3, #128	@ 0x80
10049192:	021b      	lsls	r3, r3, #8
10049194:	401a      	ands	r2, r3
10049196:	2380      	movs	r3, #128	@ 0x80
10049198:	021b      	lsls	r3, r3, #8
1004919a:	429a      	cmp	r2, r3
1004919c:	d101      	bne.n	100491a2 <HAL_I2C_Mem_Write_IT+0x66>
    {
      return HAL_BUSY;
1004919e:	2302      	movs	r3, #2
100491a0:	e064      	b.n	1004926c <HAL_I2C_Mem_Write_IT+0x130>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
100491a2:	68fb      	ldr	r3, [r7, #12]
100491a4:	2240      	movs	r2, #64	@ 0x40
100491a6:	5c9b      	ldrb	r3, [r3, r2]
100491a8:	2b01      	cmp	r3, #1
100491aa:	d101      	bne.n	100491b0 <HAL_I2C_Mem_Write_IT+0x74>
100491ac:	2302      	movs	r3, #2
100491ae:	e05d      	b.n	1004926c <HAL_I2C_Mem_Write_IT+0x130>
100491b0:	68fb      	ldr	r3, [r7, #12]
100491b2:	2240      	movs	r2, #64	@ 0x40
100491b4:	2101      	movs	r1, #1
100491b6:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
100491b8:	68fb      	ldr	r3, [r7, #12]
100491ba:	2241      	movs	r2, #65	@ 0x41
100491bc:	2121      	movs	r1, #33	@ 0x21
100491be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
100491c0:	68fb      	ldr	r3, [r7, #12]
100491c2:	2242      	movs	r2, #66	@ 0x42
100491c4:	2140      	movs	r1, #64	@ 0x40
100491c6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
100491c8:	68fb      	ldr	r3, [r7, #12]
100491ca:	2200      	movs	r2, #0
100491cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
100491ce:	68fb      	ldr	r3, [r7, #12]
100491d0:	2200      	movs	r2, #0
100491d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
100491d4:	68fb      	ldr	r3, [r7, #12]
100491d6:	6a3a      	ldr	r2, [r7, #32]
100491d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
100491da:	68fb      	ldr	r3, [r7, #12]
100491dc:	2224      	movs	r2, #36	@ 0x24
100491de:	18ba      	adds	r2, r7, r2
100491e0:	8812      	ldrh	r2, [r2, #0]
100491e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
100491e4:	68fb      	ldr	r3, [r7, #12]
100491e6:	4a23      	ldr	r2, [pc, #140]	@ (10049274 <HAL_I2C_Mem_Write_IT+0x138>)
100491e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
100491ea:	68fb      	ldr	r3, [r7, #12]
100491ec:	4a22      	ldr	r2, [pc, #136]	@ (10049278 <HAL_I2C_Mem_Write_IT+0x13c>)
100491ee:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
100491f0:	230a      	movs	r3, #10
100491f2:	18fb      	adds	r3, r7, r3
100491f4:	881a      	ldrh	r2, [r3, #0]
100491f6:	68fb      	ldr	r3, [r7, #12]
100491f8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
100491fa:	1dbb      	adds	r3, r7, #6
100491fc:	881b      	ldrh	r3, [r3, #0]
100491fe:	2b01      	cmp	r3, #1
10049200:	d10b      	bne.n	1004921a <HAL_I2C_Mem_Write_IT+0xde>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10049202:	2308      	movs	r3, #8
10049204:	18fb      	adds	r3, r7, r3
10049206:	881b      	ldrh	r3, [r3, #0]
10049208:	b2da      	uxtb	r2, r3
1004920a:	68fb      	ldr	r3, [r7, #12]
1004920c:	681b      	ldr	r3, [r3, #0]
1004920e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
10049210:	68fb      	ldr	r3, [r7, #12]
10049212:	2201      	movs	r2, #1
10049214:	4252      	negs	r2, r2
10049216:	651a      	str	r2, [r3, #80]	@ 0x50
10049218:	e00e      	b.n	10049238 <HAL_I2C_Mem_Write_IT+0xfc>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
1004921a:	2108      	movs	r1, #8
1004921c:	187b      	adds	r3, r7, r1
1004921e:	881b      	ldrh	r3, [r3, #0]
10049220:	0a1b      	lsrs	r3, r3, #8
10049222:	b29b      	uxth	r3, r3
10049224:	b2da      	uxtb	r2, r3
10049226:	68fb      	ldr	r3, [r7, #12]
10049228:	681b      	ldr	r3, [r3, #0]
1004922a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
1004922c:	187b      	adds	r3, r7, r1
1004922e:	881b      	ldrh	r3, [r3, #0]
10049230:	b2db      	uxtb	r3, r3
10049232:	001a      	movs	r2, r3
10049234:	68fb      	ldr	r3, [r7, #12]
10049236:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
10049238:	1dbb      	adds	r3, r7, #6
1004923a:	881b      	ldrh	r3, [r3, #0]
1004923c:	b2da      	uxtb	r2, r3
1004923e:	2380      	movs	r3, #128	@ 0x80
10049240:	045c      	lsls	r4, r3, #17
10049242:	230a      	movs	r3, #10
10049244:	18fb      	adds	r3, r7, r3
10049246:	8819      	ldrh	r1, [r3, #0]
10049248:	68f8      	ldr	r0, [r7, #12]
1004924a:	4b0c      	ldr	r3, [pc, #48]	@ (1004927c <HAL_I2C_Mem_Write_IT+0x140>)
1004924c:	9300      	str	r3, [sp, #0]
1004924e:	0023      	movs	r3, r4
10049250:	f001 fc76 	bl	1004ab40 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10049254:	68fb      	ldr	r3, [r7, #12]
10049256:	2240      	movs	r2, #64	@ 0x40
10049258:	2100      	movs	r1, #0
1004925a:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
1004925c:	68fb      	ldr	r3, [r7, #12]
1004925e:	2101      	movs	r1, #1
10049260:	0018      	movs	r0, r3
10049262:	f001 fca7 	bl	1004abb4 <I2C_Enable_IRQ>

    return HAL_OK;
10049266:	2300      	movs	r3, #0
10049268:	e000      	b.n	1004926c <HAL_I2C_Mem_Write_IT+0x130>
  }
  else
  {
    return HAL_BUSY;
1004926a:	2302      	movs	r3, #2
  }
}
1004926c:	0018      	movs	r0, r3
1004926e:	46bd      	mov	sp, r7
10049270:	b005      	add	sp, #20
10049272:	bd90      	pop	{r4, r7, pc}
10049274:	ffff0000 	.word	0xffff0000
10049278:	10049535 	.word	0x10049535
1004927c:	80002000 	.word	0x80002000

10049280 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
10049280:	b590      	push	{r4, r7, lr}
10049282:	b087      	sub	sp, #28
10049284:	af02      	add	r7, sp, #8
10049286:	60f8      	str	r0, [r7, #12]
10049288:	000c      	movs	r4, r1
1004928a:	0010      	movs	r0, r2
1004928c:	0019      	movs	r1, r3
1004928e:	230a      	movs	r3, #10
10049290:	18fb      	adds	r3, r7, r3
10049292:	1c22      	adds	r2, r4, #0
10049294:	801a      	strh	r2, [r3, #0]
10049296:	2308      	movs	r3, #8
10049298:	18fb      	adds	r3, r7, r3
1004929a:	1c02      	adds	r2, r0, #0
1004929c:	801a      	strh	r2, [r3, #0]
1004929e:	1dbb      	adds	r3, r7, #6
100492a0:	1c0a      	adds	r2, r1, #0
100492a2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
100492a4:	68fb      	ldr	r3, [r7, #12]
100492a6:	2241      	movs	r2, #65	@ 0x41
100492a8:	5c9b      	ldrb	r3, [r3, r2]
100492aa:	b2db      	uxtb	r3, r3
100492ac:	2b20      	cmp	r3, #32
100492ae:	d000      	beq.n	100492b2 <HAL_I2C_Mem_Read_IT+0x32>
100492b0:	e078      	b.n	100493a4 <HAL_I2C_Mem_Read_IT+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
100492b2:	6a3b      	ldr	r3, [r7, #32]
100492b4:	2b00      	cmp	r3, #0
100492b6:	d004      	beq.n	100492c2 <HAL_I2C_Mem_Read_IT+0x42>
100492b8:	2324      	movs	r3, #36	@ 0x24
100492ba:	18fb      	adds	r3, r7, r3
100492bc:	881b      	ldrh	r3, [r3, #0]
100492be:	2b00      	cmp	r3, #0
100492c0:	d105      	bne.n	100492ce <HAL_I2C_Mem_Read_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
100492c2:	68fb      	ldr	r3, [r7, #12]
100492c4:	2280      	movs	r2, #128	@ 0x80
100492c6:	0092      	lsls	r2, r2, #2
100492c8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
100492ca:	2301      	movs	r3, #1
100492cc:	e06b      	b.n	100493a6 <HAL_I2C_Mem_Read_IT+0x126>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
100492ce:	68fb      	ldr	r3, [r7, #12]
100492d0:	681b      	ldr	r3, [r3, #0]
100492d2:	699a      	ldr	r2, [r3, #24]
100492d4:	2380      	movs	r3, #128	@ 0x80
100492d6:	021b      	lsls	r3, r3, #8
100492d8:	401a      	ands	r2, r3
100492da:	2380      	movs	r3, #128	@ 0x80
100492dc:	021b      	lsls	r3, r3, #8
100492de:	429a      	cmp	r2, r3
100492e0:	d101      	bne.n	100492e6 <HAL_I2C_Mem_Read_IT+0x66>
    {
      return HAL_BUSY;
100492e2:	2302      	movs	r3, #2
100492e4:	e05f      	b.n	100493a6 <HAL_I2C_Mem_Read_IT+0x126>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
100492e6:	68fb      	ldr	r3, [r7, #12]
100492e8:	2240      	movs	r2, #64	@ 0x40
100492ea:	5c9b      	ldrb	r3, [r3, r2]
100492ec:	2b01      	cmp	r3, #1
100492ee:	d101      	bne.n	100492f4 <HAL_I2C_Mem_Read_IT+0x74>
100492f0:	2302      	movs	r3, #2
100492f2:	e058      	b.n	100493a6 <HAL_I2C_Mem_Read_IT+0x126>
100492f4:	68fb      	ldr	r3, [r7, #12]
100492f6:	2240      	movs	r2, #64	@ 0x40
100492f8:	2101      	movs	r1, #1
100492fa:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
100492fc:	68fb      	ldr	r3, [r7, #12]
100492fe:	2241      	movs	r2, #65	@ 0x41
10049300:	2122      	movs	r1, #34	@ 0x22
10049302:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
10049304:	68fb      	ldr	r3, [r7, #12]
10049306:	2242      	movs	r2, #66	@ 0x42
10049308:	2140      	movs	r1, #64	@ 0x40
1004930a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
1004930c:	68fb      	ldr	r3, [r7, #12]
1004930e:	2200      	movs	r2, #0
10049310:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
10049312:	68fb      	ldr	r3, [r7, #12]
10049314:	6a3a      	ldr	r2, [r7, #32]
10049316:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
10049318:	68fb      	ldr	r3, [r7, #12]
1004931a:	2224      	movs	r2, #36	@ 0x24
1004931c:	18ba      	adds	r2, r7, r2
1004931e:	8812      	ldrh	r2, [r2, #0]
10049320:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
10049322:	68fb      	ldr	r3, [r7, #12]
10049324:	4a22      	ldr	r2, [pc, #136]	@ (100493b0 <HAL_I2C_Mem_Read_IT+0x130>)
10049326:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
10049328:	68fb      	ldr	r3, [r7, #12]
1004932a:	4a22      	ldr	r2, [pc, #136]	@ (100493b4 <HAL_I2C_Mem_Read_IT+0x134>)
1004932c:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
1004932e:	230a      	movs	r3, #10
10049330:	18fb      	adds	r3, r7, r3
10049332:	881a      	ldrh	r2, [r3, #0]
10049334:	68fb      	ldr	r3, [r7, #12]
10049336:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
10049338:	1dbb      	adds	r3, r7, #6
1004933a:	881b      	ldrh	r3, [r3, #0]
1004933c:	2b01      	cmp	r3, #1
1004933e:	d10b      	bne.n	10049358 <HAL_I2C_Mem_Read_IT+0xd8>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10049340:	2308      	movs	r3, #8
10049342:	18fb      	adds	r3, r7, r3
10049344:	881b      	ldrh	r3, [r3, #0]
10049346:	b2da      	uxtb	r2, r3
10049348:	68fb      	ldr	r3, [r7, #12]
1004934a:	681b      	ldr	r3, [r3, #0]
1004934c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
1004934e:	68fb      	ldr	r3, [r7, #12]
10049350:	2201      	movs	r2, #1
10049352:	4252      	negs	r2, r2
10049354:	651a      	str	r2, [r3, #80]	@ 0x50
10049356:	e00e      	b.n	10049376 <HAL_I2C_Mem_Read_IT+0xf6>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
10049358:	2108      	movs	r1, #8
1004935a:	187b      	adds	r3, r7, r1
1004935c:	881b      	ldrh	r3, [r3, #0]
1004935e:	0a1b      	lsrs	r3, r3, #8
10049360:	b29b      	uxth	r3, r3
10049362:	b2da      	uxtb	r2, r3
10049364:	68fb      	ldr	r3, [r7, #12]
10049366:	681b      	ldr	r3, [r3, #0]
10049368:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
1004936a:	187b      	adds	r3, r7, r1
1004936c:	881b      	ldrh	r3, [r3, #0]
1004936e:	b2db      	uxtb	r3, r3
10049370:	001a      	movs	r2, r3
10049372:	68fb      	ldr	r3, [r7, #12]
10049374:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
10049376:	1dbb      	adds	r3, r7, #6
10049378:	881b      	ldrh	r3, [r3, #0]
1004937a:	b2da      	uxtb	r2, r3
1004937c:	230a      	movs	r3, #10
1004937e:	18fb      	adds	r3, r7, r3
10049380:	8819      	ldrh	r1, [r3, #0]
10049382:	68f8      	ldr	r0, [r7, #12]
10049384:	4b0c      	ldr	r3, [pc, #48]	@ (100493b8 <HAL_I2C_Mem_Read_IT+0x138>)
10049386:	9300      	str	r3, [sp, #0]
10049388:	2300      	movs	r3, #0
1004938a:	f001 fbd9 	bl	1004ab40 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1004938e:	68fb      	ldr	r3, [r7, #12]
10049390:	2240      	movs	r2, #64	@ 0x40
10049392:	2100      	movs	r1, #0
10049394:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
10049396:	68fb      	ldr	r3, [r7, #12]
10049398:	2101      	movs	r1, #1
1004939a:	0018      	movs	r0, r3
1004939c:	f001 fc0a 	bl	1004abb4 <I2C_Enable_IRQ>

    return HAL_OK;
100493a0:	2300      	movs	r3, #0
100493a2:	e000      	b.n	100493a6 <HAL_I2C_Mem_Read_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
100493a4:	2302      	movs	r3, #2
  }
}
100493a6:	0018      	movs	r0, r3
100493a8:	46bd      	mov	sp, r7
100493aa:	b005      	add	sp, #20
100493ac:	bd90      	pop	{r4, r7, pc}
100493ae:	46c0      	nop			@ (mov r8, r8)
100493b0:	ffff0000 	.word	0xffff0000
100493b4:	10049535 	.word	0x10049535
100493b8:	80002000 	.word	0x80002000

100493bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
100493bc:	b580      	push	{r7, lr}
100493be:	b084      	sub	sp, #16
100493c0:	af00      	add	r7, sp, #0
100493c2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
100493c4:	687b      	ldr	r3, [r7, #4]
100493c6:	681b      	ldr	r3, [r3, #0]
100493c8:	699b      	ldr	r3, [r3, #24]
100493ca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
100493cc:	687b      	ldr	r3, [r7, #4]
100493ce:	681b      	ldr	r3, [r3, #0]
100493d0:	681b      	ldr	r3, [r3, #0]
100493d2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
100493d4:	687b      	ldr	r3, [r7, #4]
100493d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100493d8:	2b00      	cmp	r3, #0
100493da:	d005      	beq.n	100493e8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
100493dc:	687b      	ldr	r3, [r7, #4]
100493de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100493e0:	68ba      	ldr	r2, [r7, #8]
100493e2:	68f9      	ldr	r1, [r7, #12]
100493e4:	6878      	ldr	r0, [r7, #4]
100493e6:	4798      	blx	r3
  }
}
100493e8:	46c0      	nop			@ (mov r8, r8)
100493ea:	46bd      	mov	sp, r7
100493ec:	b004      	add	sp, #16
100493ee:	bd80      	pop	{r7, pc}

100493f0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
100493f0:	b580      	push	{r7, lr}
100493f2:	b086      	sub	sp, #24
100493f4:	af00      	add	r7, sp, #0
100493f6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
100493f8:	687b      	ldr	r3, [r7, #4]
100493fa:	681b      	ldr	r3, [r3, #0]
100493fc:	699b      	ldr	r3, [r3, #24]
100493fe:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
10049400:	687b      	ldr	r3, [r7, #4]
10049402:	681b      	ldr	r3, [r3, #0]
10049404:	681b      	ldr	r3, [r3, #0]
10049406:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
10049408:	697b      	ldr	r3, [r7, #20]
1004940a:	0a1b      	lsrs	r3, r3, #8
1004940c:	001a      	movs	r2, r3
1004940e:	2301      	movs	r3, #1
10049410:	4013      	ands	r3, r2
10049412:	d010      	beq.n	10049436 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10049414:	693b      	ldr	r3, [r7, #16]
10049416:	09db      	lsrs	r3, r3, #7
10049418:	001a      	movs	r2, r3
1004941a:	2301      	movs	r3, #1
1004941c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
1004941e:	d00a      	beq.n	10049436 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
10049420:	687b      	ldr	r3, [r7, #4]
10049422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049424:	2201      	movs	r2, #1
10049426:	431a      	orrs	r2, r3
10049428:	687b      	ldr	r3, [r7, #4]
1004942a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
1004942c:	687b      	ldr	r3, [r7, #4]
1004942e:	681b      	ldr	r3, [r3, #0]
10049430:	2280      	movs	r2, #128	@ 0x80
10049432:	0052      	lsls	r2, r2, #1
10049434:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
10049436:	697b      	ldr	r3, [r7, #20]
10049438:	0a9b      	lsrs	r3, r3, #10
1004943a:	001a      	movs	r2, r3
1004943c:	2301      	movs	r3, #1
1004943e:	4013      	ands	r3, r2
10049440:	d010      	beq.n	10049464 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10049442:	693b      	ldr	r3, [r7, #16]
10049444:	09db      	lsrs	r3, r3, #7
10049446:	001a      	movs	r2, r3
10049448:	2301      	movs	r3, #1
1004944a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
1004944c:	d00a      	beq.n	10049464 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
1004944e:	687b      	ldr	r3, [r7, #4]
10049450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049452:	2208      	movs	r2, #8
10049454:	431a      	orrs	r2, r3
10049456:	687b      	ldr	r3, [r7, #4]
10049458:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
1004945a:	687b      	ldr	r3, [r7, #4]
1004945c:	681b      	ldr	r3, [r3, #0]
1004945e:	2280      	movs	r2, #128	@ 0x80
10049460:	00d2      	lsls	r2, r2, #3
10049462:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
10049464:	697b      	ldr	r3, [r7, #20]
10049466:	0a5b      	lsrs	r3, r3, #9
10049468:	001a      	movs	r2, r3
1004946a:	2301      	movs	r3, #1
1004946c:	4013      	ands	r3, r2
1004946e:	d010      	beq.n	10049492 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10049470:	693b      	ldr	r3, [r7, #16]
10049472:	09db      	lsrs	r3, r3, #7
10049474:	001a      	movs	r2, r3
10049476:	2301      	movs	r3, #1
10049478:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
1004947a:	d00a      	beq.n	10049492 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
1004947c:	687b      	ldr	r3, [r7, #4]
1004947e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049480:	2202      	movs	r2, #2
10049482:	431a      	orrs	r2, r3
10049484:	687b      	ldr	r3, [r7, #4]
10049486:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
10049488:	687b      	ldr	r3, [r7, #4]
1004948a:	681b      	ldr	r3, [r3, #0]
1004948c:	2280      	movs	r2, #128	@ 0x80
1004948e:	0092      	lsls	r2, r2, #2
10049490:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
10049492:	687b      	ldr	r3, [r7, #4]
10049494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049496:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
10049498:	68fb      	ldr	r3, [r7, #12]
1004949a:	220b      	movs	r2, #11
1004949c:	4013      	ands	r3, r2
1004949e:	d005      	beq.n	100494ac <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
100494a0:	68fa      	ldr	r2, [r7, #12]
100494a2:	687b      	ldr	r3, [r7, #4]
100494a4:	0011      	movs	r1, r2
100494a6:	0018      	movs	r0, r3
100494a8:	f001 f9de 	bl	1004a868 <I2C_ITError>
  }
}
100494ac:	46c0      	nop			@ (mov r8, r8)
100494ae:	46bd      	mov	sp, r7
100494b0:	b006      	add	sp, #24
100494b2:	bd80      	pop	{r7, pc}

100494b4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
100494b4:	b580      	push	{r7, lr}
100494b6:	b082      	sub	sp, #8
100494b8:	af00      	add	r7, sp, #0
100494ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
100494bc:	46c0      	nop			@ (mov r8, r8)
100494be:	46bd      	mov	sp, r7
100494c0:	b002      	add	sp, #8
100494c2:	bd80      	pop	{r7, pc}

100494c4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
100494c4:	b580      	push	{r7, lr}
100494c6:	b082      	sub	sp, #8
100494c8:	af00      	add	r7, sp, #0
100494ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
100494cc:	46c0      	nop			@ (mov r8, r8)
100494ce:	46bd      	mov	sp, r7
100494d0:	b002      	add	sp, #8
100494d2:	bd80      	pop	{r7, pc}

100494d4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
100494d4:	b580      	push	{r7, lr}
100494d6:	b082      	sub	sp, #8
100494d8:	af00      	add	r7, sp, #0
100494da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
100494dc:	46c0      	nop			@ (mov r8, r8)
100494de:	46bd      	mov	sp, r7
100494e0:	b002      	add	sp, #8
100494e2:	bd80      	pop	{r7, pc}

100494e4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
100494e4:	b580      	push	{r7, lr}
100494e6:	b082      	sub	sp, #8
100494e8:	af00      	add	r7, sp, #0
100494ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
100494ec:	46c0      	nop			@ (mov r8, r8)
100494ee:	46bd      	mov	sp, r7
100494f0:	b002      	add	sp, #8
100494f2:	bd80      	pop	{r7, pc}

100494f4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
100494f4:	b580      	push	{r7, lr}
100494f6:	b082      	sub	sp, #8
100494f8:	af00      	add	r7, sp, #0
100494fa:	6078      	str	r0, [r7, #4]
100494fc:	0008      	movs	r0, r1
100494fe:	0011      	movs	r1, r2
10049500:	1cfb      	adds	r3, r7, #3
10049502:	1c02      	adds	r2, r0, #0
10049504:	701a      	strb	r2, [r3, #0]
10049506:	003b      	movs	r3, r7
10049508:	1c0a      	adds	r2, r1, #0
1004950a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
1004950c:	46c0      	nop			@ (mov r8, r8)
1004950e:	46bd      	mov	sp, r7
10049510:	b002      	add	sp, #8
10049512:	bd80      	pop	{r7, pc}

10049514 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
10049514:	b580      	push	{r7, lr}
10049516:	b082      	sub	sp, #8
10049518:	af00      	add	r7, sp, #0
1004951a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
1004951c:	46c0      	nop			@ (mov r8, r8)
1004951e:	46bd      	mov	sp, r7
10049520:	b002      	add	sp, #8
10049522:	bd80      	pop	{r7, pc}

10049524 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
10049524:	b580      	push	{r7, lr}
10049526:	b082      	sub	sp, #8
10049528:	af00      	add	r7, sp, #0
1004952a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
1004952c:	46c0      	nop			@ (mov r8, r8)
1004952e:	46bd      	mov	sp, r7
10049530:	b002      	add	sp, #8
10049532:	bd80      	pop	{r7, pc}

10049534 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
10049534:	b590      	push	{r4, r7, lr}
10049536:	b089      	sub	sp, #36	@ 0x24
10049538:	af02      	add	r7, sp, #8
1004953a:	60f8      	str	r0, [r7, #12]
1004953c:	60b9      	str	r1, [r7, #8]
1004953e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
10049540:	4b97      	ldr	r3, [pc, #604]	@ (100497a0 <I2C_Mem_ISR_IT+0x26c>)
10049542:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
10049544:	68bb      	ldr	r3, [r7, #8]
10049546:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
10049548:	68fb      	ldr	r3, [r7, #12]
1004954a:	2240      	movs	r2, #64	@ 0x40
1004954c:	5c9b      	ldrb	r3, [r3, r2]
1004954e:	2b01      	cmp	r3, #1
10049550:	d101      	bne.n	10049556 <I2C_Mem_ISR_IT+0x22>
10049552:	2302      	movs	r3, #2
10049554:	e11f      	b.n	10049796 <I2C_Mem_ISR_IT+0x262>
10049556:	68fb      	ldr	r3, [r7, #12]
10049558:	2240      	movs	r2, #64	@ 0x40
1004955a:	2101      	movs	r1, #1
1004955c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
1004955e:	693b      	ldr	r3, [r7, #16]
10049560:	091b      	lsrs	r3, r3, #4
10049562:	001a      	movs	r2, r3
10049564:	2301      	movs	r3, #1
10049566:	4013      	ands	r3, r2
10049568:	d014      	beq.n	10049594 <I2C_Mem_ISR_IT+0x60>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
1004956a:	687b      	ldr	r3, [r7, #4]
1004956c:	091b      	lsrs	r3, r3, #4
1004956e:	001a      	movs	r2, r3
10049570:	2301      	movs	r3, #1
10049572:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10049574:	d00e      	beq.n	10049594 <I2C_Mem_ISR_IT+0x60>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049576:	68fb      	ldr	r3, [r7, #12]
10049578:	681b      	ldr	r3, [r3, #0]
1004957a:	2210      	movs	r2, #16
1004957c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004957e:	68fb      	ldr	r3, [r7, #12]
10049580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049582:	2204      	movs	r2, #4
10049584:	431a      	orrs	r2, r3
10049586:	68fb      	ldr	r3, [r7, #12]
10049588:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
1004958a:	68fb      	ldr	r3, [r7, #12]
1004958c:	0018      	movs	r0, r3
1004958e:	f001 fa96 	bl	1004aabe <I2C_Flush_TXDR>
10049592:	e0e9      	b.n	10049768 <I2C_Mem_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
10049594:	693b      	ldr	r3, [r7, #16]
10049596:	089b      	lsrs	r3, r3, #2
10049598:	001a      	movs	r2, r3
1004959a:	2301      	movs	r3, #1
1004959c:	4013      	ands	r3, r2
1004959e:	d023      	beq.n	100495e8 <I2C_Mem_ISR_IT+0xb4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
100495a0:	687b      	ldr	r3, [r7, #4]
100495a2:	089b      	lsrs	r3, r3, #2
100495a4:	001a      	movs	r2, r3
100495a6:	2301      	movs	r3, #1
100495a8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
100495aa:	d01d      	beq.n	100495e8 <I2C_Mem_ISR_IT+0xb4>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
100495ac:	693b      	ldr	r3, [r7, #16]
100495ae:	2204      	movs	r2, #4
100495b0:	4393      	bics	r3, r2
100495b2:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
100495b4:	68fb      	ldr	r3, [r7, #12]
100495b6:	681b      	ldr	r3, [r3, #0]
100495b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100495ba:	68fb      	ldr	r3, [r7, #12]
100495bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100495be:	b2d2      	uxtb	r2, r2
100495c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
100495c2:	68fb      	ldr	r3, [r7, #12]
100495c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100495c6:	1c5a      	adds	r2, r3, #1
100495c8:	68fb      	ldr	r3, [r7, #12]
100495ca:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
100495cc:	68fb      	ldr	r3, [r7, #12]
100495ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100495d0:	3b01      	subs	r3, #1
100495d2:	b29a      	uxth	r2, r3
100495d4:	68fb      	ldr	r3, [r7, #12]
100495d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
100495d8:	68fb      	ldr	r3, [r7, #12]
100495da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100495dc:	b29b      	uxth	r3, r3
100495de:	3b01      	subs	r3, #1
100495e0:	b29a      	uxth	r2, r3
100495e2:	68fb      	ldr	r3, [r7, #12]
100495e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
100495e6:	e0bf      	b.n	10049768 <I2C_Mem_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
100495e8:	693b      	ldr	r3, [r7, #16]
100495ea:	085b      	lsrs	r3, r3, #1
100495ec:	001a      	movs	r2, r3
100495ee:	2301      	movs	r3, #1
100495f0:	4013      	ands	r3, r2
100495f2:	d02c      	beq.n	1004964e <I2C_Mem_ISR_IT+0x11a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
100495f4:	687b      	ldr	r3, [r7, #4]
100495f6:	085b      	lsrs	r3, r3, #1
100495f8:	001a      	movs	r2, r3
100495fa:	2301      	movs	r3, #1
100495fc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
100495fe:	d026      	beq.n	1004964e <I2C_Mem_ISR_IT+0x11a>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
10049600:	68fb      	ldr	r3, [r7, #12]
10049602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10049604:	3301      	adds	r3, #1
10049606:	d118      	bne.n	1004963a <I2C_Mem_ISR_IT+0x106>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
10049608:	68fb      	ldr	r3, [r7, #12]
1004960a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004960c:	781a      	ldrb	r2, [r3, #0]
1004960e:	68fb      	ldr	r3, [r7, #12]
10049610:	681b      	ldr	r3, [r3, #0]
10049612:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10049614:	68fb      	ldr	r3, [r7, #12]
10049616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10049618:	1c5a      	adds	r2, r3, #1
1004961a:	68fb      	ldr	r3, [r7, #12]
1004961c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
1004961e:	68fb      	ldr	r3, [r7, #12]
10049620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049622:	3b01      	subs	r3, #1
10049624:	b29a      	uxth	r2, r3
10049626:	68fb      	ldr	r3, [r7, #12]
10049628:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
1004962a:	68fb      	ldr	r3, [r7, #12]
1004962c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004962e:	b29b      	uxth	r3, r3
10049630:	3b01      	subs	r3, #1
10049632:	b29a      	uxth	r2, r3
10049634:	68fb      	ldr	r3, [r7, #12]
10049636:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
10049638:	e096      	b.n	10049768 <I2C_Mem_ISR_IT+0x234>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
1004963a:	68fb      	ldr	r3, [r7, #12]
1004963c:	681b      	ldr	r3, [r3, #0]
1004963e:	68fa      	ldr	r2, [r7, #12]
10049640:	6d12      	ldr	r2, [r2, #80]	@ 0x50
10049642:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
10049644:	68fb      	ldr	r3, [r7, #12]
10049646:	2201      	movs	r2, #1
10049648:	4252      	negs	r2, r2
1004964a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
1004964c:	e08c      	b.n	10049768 <I2C_Mem_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
1004964e:	693b      	ldr	r3, [r7, #16]
10049650:	09db      	lsrs	r3, r3, #7
10049652:	001a      	movs	r2, r3
10049654:	2301      	movs	r3, #1
10049656:	4013      	ands	r3, r2
10049658:	d03e      	beq.n	100496d8 <I2C_Mem_ISR_IT+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
1004965a:	687b      	ldr	r3, [r7, #4]
1004965c:	099b      	lsrs	r3, r3, #6
1004965e:	001a      	movs	r2, r3
10049660:	2301      	movs	r3, #1
10049662:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
10049664:	d038      	beq.n	100496d8 <I2C_Mem_ISR_IT+0x1a4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
10049666:	68fb      	ldr	r3, [r7, #12]
10049668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004966a:	b29b      	uxth	r3, r3
1004966c:	2b00      	cmp	r3, #0
1004966e:	d02c      	beq.n	100496ca <I2C_Mem_ISR_IT+0x196>
10049670:	68fb      	ldr	r3, [r7, #12]
10049672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049674:	2b00      	cmp	r3, #0
10049676:	d128      	bne.n	100496ca <I2C_Mem_ISR_IT+0x196>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10049678:	68fb      	ldr	r3, [r7, #12]
1004967a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004967c:	b29b      	uxth	r3, r3
1004967e:	2bff      	cmp	r3, #255	@ 0xff
10049680:	d910      	bls.n	100496a4 <I2C_Mem_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
10049682:	68fb      	ldr	r3, [r7, #12]
10049684:	22ff      	movs	r2, #255	@ 0xff
10049686:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10049688:	68fb      	ldr	r3, [r7, #12]
1004968a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004968c:	b299      	uxth	r1, r3
1004968e:	68fb      	ldr	r3, [r7, #12]
10049690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049692:	b2da      	uxtb	r2, r3
10049694:	2380      	movs	r3, #128	@ 0x80
10049696:	045b      	lsls	r3, r3, #17
10049698:	68f8      	ldr	r0, [r7, #12]
1004969a:	2400      	movs	r4, #0
1004969c:	9400      	str	r4, [sp, #0]
1004969e:	f001 fa4f 	bl	1004ab40 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
100496a2:	e018      	b.n	100496d6 <I2C_Mem_ISR_IT+0x1a2>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
100496a4:	68fb      	ldr	r3, [r7, #12]
100496a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100496a8:	b29a      	uxth	r2, r3
100496aa:	68fb      	ldr	r3, [r7, #12]
100496ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
100496ae:	68fb      	ldr	r3, [r7, #12]
100496b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100496b2:	b299      	uxth	r1, r3
100496b4:	68fb      	ldr	r3, [r7, #12]
100496b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100496b8:	b2da      	uxtb	r2, r3
100496ba:	2380      	movs	r3, #128	@ 0x80
100496bc:	049b      	lsls	r3, r3, #18
100496be:	68f8      	ldr	r0, [r7, #12]
100496c0:	2400      	movs	r4, #0
100496c2:	9400      	str	r4, [sp, #0]
100496c4:	f001 fa3c 	bl	1004ab40 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
100496c8:	e005      	b.n	100496d6 <I2C_Mem_ISR_IT+0x1a2>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
100496ca:	68fb      	ldr	r3, [r7, #12]
100496cc:	2140      	movs	r1, #64	@ 0x40
100496ce:	0018      	movs	r0, r3
100496d0:	f001 f8ca 	bl	1004a868 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
100496d4:	e048      	b.n	10049768 <I2C_Mem_ISR_IT+0x234>
100496d6:	e047      	b.n	10049768 <I2C_Mem_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
100496d8:	693b      	ldr	r3, [r7, #16]
100496da:	099b      	lsrs	r3, r3, #6
100496dc:	001a      	movs	r2, r3
100496de:	2301      	movs	r3, #1
100496e0:	4013      	ands	r3, r2
100496e2:	d041      	beq.n	10049768 <I2C_Mem_ISR_IT+0x234>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
100496e4:	687b      	ldr	r3, [r7, #4]
100496e6:	099b      	lsrs	r3, r3, #6
100496e8:	001a      	movs	r2, r3
100496ea:	2301      	movs	r3, #1
100496ec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
100496ee:	d03b      	beq.n	10049768 <I2C_Mem_ISR_IT+0x234>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
100496f0:	68fb      	ldr	r3, [r7, #12]
100496f2:	2101      	movs	r1, #1
100496f4:	0018      	movs	r0, r3
100496f6:	f001 fae7 	bl	1004acc8 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
100496fa:	68fb      	ldr	r3, [r7, #12]
100496fc:	2102      	movs	r1, #2
100496fe:	0018      	movs	r0, r3
10049700:	f001 fa58 	bl	1004abb4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10049704:	68fb      	ldr	r3, [r7, #12]
10049706:	2241      	movs	r2, #65	@ 0x41
10049708:	5c9b      	ldrb	r3, [r3, r2]
1004970a:	b2db      	uxtb	r3, r3
1004970c:	2b22      	cmp	r3, #34	@ 0x22
1004970e:	d101      	bne.n	10049714 <I2C_Mem_ISR_IT+0x1e0>
    {
      direction = I2C_GENERATE_START_READ;
10049710:	4b24      	ldr	r3, [pc, #144]	@ (100497a4 <I2C_Mem_ISR_IT+0x270>)
10049712:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
10049714:	68fb      	ldr	r3, [r7, #12]
10049716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049718:	b29b      	uxth	r3, r3
1004971a:	2bff      	cmp	r3, #255	@ 0xff
1004971c:	d911      	bls.n	10049742 <I2C_Mem_ISR_IT+0x20e>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
1004971e:	68fb      	ldr	r3, [r7, #12]
10049720:	22ff      	movs	r2, #255	@ 0xff
10049722:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10049724:	68fb      	ldr	r3, [r7, #12]
10049726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10049728:	b299      	uxth	r1, r3
1004972a:	68fb      	ldr	r3, [r7, #12]
1004972c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004972e:	b2da      	uxtb	r2, r3
10049730:	2380      	movs	r3, #128	@ 0x80
10049732:	045c      	lsls	r4, r3, #17
10049734:	68f8      	ldr	r0, [r7, #12]
10049736:	697b      	ldr	r3, [r7, #20]
10049738:	9300      	str	r3, [sp, #0]
1004973a:	0023      	movs	r3, r4
1004973c:	f001 fa00 	bl	1004ab40 <I2C_TransferConfig>
10049740:	e012      	b.n	10049768 <I2C_Mem_ISR_IT+0x234>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
10049742:	68fb      	ldr	r3, [r7, #12]
10049744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049746:	b29a      	uxth	r2, r3
10049748:	68fb      	ldr	r3, [r7, #12]
1004974a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
1004974c:	68fb      	ldr	r3, [r7, #12]
1004974e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10049750:	b299      	uxth	r1, r3
10049752:	68fb      	ldr	r3, [r7, #12]
10049754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049756:	b2da      	uxtb	r2, r3
10049758:	2380      	movs	r3, #128	@ 0x80
1004975a:	049c      	lsls	r4, r3, #18
1004975c:	68f8      	ldr	r0, [r7, #12]
1004975e:	697b      	ldr	r3, [r7, #20]
10049760:	9300      	str	r3, [sp, #0]
10049762:	0023      	movs	r3, r4
10049764:	f001 f9ec 	bl	1004ab40 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10049768:	693b      	ldr	r3, [r7, #16]
1004976a:	095b      	lsrs	r3, r3, #5
1004976c:	001a      	movs	r2, r3
1004976e:	2301      	movs	r3, #1
10049770:	4013      	ands	r3, r2
10049772:	d00b      	beq.n	1004978c <I2C_Mem_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10049774:	687b      	ldr	r3, [r7, #4]
10049776:	095b      	lsrs	r3, r3, #5
10049778:	001a      	movs	r2, r3
1004977a:	2301      	movs	r3, #1
1004977c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
1004977e:	d005      	beq.n	1004978c <I2C_Mem_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
10049780:	693a      	ldr	r2, [r7, #16]
10049782:	68fb      	ldr	r3, [r7, #12]
10049784:	0011      	movs	r1, r2
10049786:	0018      	movs	r0, r3
10049788:	f000 fdb2 	bl	1004a2f0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
1004978c:	68fb      	ldr	r3, [r7, #12]
1004978e:	2240      	movs	r2, #64	@ 0x40
10049790:	2100      	movs	r1, #0
10049792:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10049794:	2300      	movs	r3, #0
}
10049796:	0018      	movs	r0, r3
10049798:	46bd      	mov	sp, r7
1004979a:	b007      	add	sp, #28
1004979c:	bd90      	pop	{r4, r7, pc}
1004979e:	46c0      	nop			@ (mov r8, r8)
100497a0:	80002000 	.word	0x80002000
100497a4:	80002400 	.word	0x80002400

100497a8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
100497a8:	b580      	push	{r7, lr}
100497aa:	b086      	sub	sp, #24
100497ac:	af00      	add	r7, sp, #0
100497ae:	60f8      	str	r0, [r7, #12]
100497b0:	60b9      	str	r1, [r7, #8]
100497b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
100497b4:	68fb      	ldr	r3, [r7, #12]
100497b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100497b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
100497ba:	68bb      	ldr	r3, [r7, #8]
100497bc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
100497be:	68fb      	ldr	r3, [r7, #12]
100497c0:	2240      	movs	r2, #64	@ 0x40
100497c2:	5c9b      	ldrb	r3, [r3, r2]
100497c4:	2b01      	cmp	r3, #1
100497c6:	d101      	bne.n	100497cc <I2C_Slave_ISR_IT+0x24>
100497c8:	2302      	movs	r3, #2
100497ca:	e0fb      	b.n	100499c4 <I2C_Slave_ISR_IT+0x21c>
100497cc:	68fb      	ldr	r3, [r7, #12]
100497ce:	2240      	movs	r2, #64	@ 0x40
100497d0:	2101      	movs	r1, #1
100497d2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
100497d4:	693b      	ldr	r3, [r7, #16]
100497d6:	095b      	lsrs	r3, r3, #5
100497d8:	001a      	movs	r2, r3
100497da:	2301      	movs	r3, #1
100497dc:	4013      	ands	r3, r2
100497de:	d00c      	beq.n	100497fa <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
100497e0:	687b      	ldr	r3, [r7, #4]
100497e2:	095b      	lsrs	r3, r3, #5
100497e4:	001a      	movs	r2, r3
100497e6:	2301      	movs	r3, #1
100497e8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
100497ea:	d006      	beq.n	100497fa <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
100497ec:	693a      	ldr	r2, [r7, #16]
100497ee:	68fb      	ldr	r3, [r7, #12]
100497f0:	0011      	movs	r1, r2
100497f2:	0018      	movs	r0, r3
100497f4:	f000 fe4e 	bl	1004a494 <I2C_ITSlaveCplt>
100497f8:	e0df      	b.n	100499ba <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
100497fa:	693b      	ldr	r3, [r7, #16]
100497fc:	091b      	lsrs	r3, r3, #4
100497fe:	001a      	movs	r2, r3
10049800:	2301      	movs	r3, #1
10049802:	4013      	ands	r3, r2
10049804:	d054      	beq.n	100498b0 <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10049806:	687b      	ldr	r3, [r7, #4]
10049808:	091b      	lsrs	r3, r3, #4
1004980a:	001a      	movs	r2, r3
1004980c:	2301      	movs	r3, #1
1004980e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10049810:	d04e      	beq.n	100498b0 <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
10049812:	68fb      	ldr	r3, [r7, #12]
10049814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049816:	b29b      	uxth	r3, r3
10049818:	2b00      	cmp	r3, #0
1004981a:	d12d      	bne.n	10049878 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
1004981c:	68fb      	ldr	r3, [r7, #12]
1004981e:	2241      	movs	r2, #65	@ 0x41
10049820:	5c9b      	ldrb	r3, [r3, r2]
10049822:	b2db      	uxtb	r3, r3
10049824:	2b28      	cmp	r3, #40	@ 0x28
10049826:	d10b      	bne.n	10049840 <I2C_Slave_ISR_IT+0x98>
10049828:	697a      	ldr	r2, [r7, #20]
1004982a:	2380      	movs	r3, #128	@ 0x80
1004982c:	049b      	lsls	r3, r3, #18
1004982e:	429a      	cmp	r2, r3
10049830:	d106      	bne.n	10049840 <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
10049832:	693a      	ldr	r2, [r7, #16]
10049834:	68fb      	ldr	r3, [r7, #12]
10049836:	0011      	movs	r1, r2
10049838:	0018      	movs	r0, r3
1004983a:	f000 ffbb 	bl	1004a7b4 <I2C_ITListenCplt>
1004983e:	e036      	b.n	100498ae <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
10049840:	68fb      	ldr	r3, [r7, #12]
10049842:	2241      	movs	r2, #65	@ 0x41
10049844:	5c9b      	ldrb	r3, [r3, r2]
10049846:	b2db      	uxtb	r3, r3
10049848:	2b29      	cmp	r3, #41	@ 0x29
1004984a:	d110      	bne.n	1004986e <I2C_Slave_ISR_IT+0xc6>
1004984c:	697b      	ldr	r3, [r7, #20]
1004984e:	4a5f      	ldr	r2, [pc, #380]	@ (100499cc <I2C_Slave_ISR_IT+0x224>)
10049850:	4293      	cmp	r3, r2
10049852:	d00c      	beq.n	1004986e <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049854:	68fb      	ldr	r3, [r7, #12]
10049856:	681b      	ldr	r3, [r3, #0]
10049858:	2210      	movs	r2, #16
1004985a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
1004985c:	68fb      	ldr	r3, [r7, #12]
1004985e:	0018      	movs	r0, r3
10049860:	f001 f92d 	bl	1004aabe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10049864:	68fb      	ldr	r3, [r7, #12]
10049866:	0018      	movs	r0, r3
10049868:	f000 fcdc 	bl	1004a224 <I2C_ITSlaveSeqCplt>
1004986c:	e01f      	b.n	100498ae <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004986e:	68fb      	ldr	r3, [r7, #12]
10049870:	681b      	ldr	r3, [r3, #0]
10049872:	2210      	movs	r2, #16
10049874:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
10049876:	e09d      	b.n	100499b4 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049878:	68fb      	ldr	r3, [r7, #12]
1004987a:	681b      	ldr	r3, [r3, #0]
1004987c:	2210      	movs	r2, #16
1004987e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10049880:	68fb      	ldr	r3, [r7, #12]
10049882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049884:	2204      	movs	r2, #4
10049886:	431a      	orrs	r2, r3
10049888:	68fb      	ldr	r3, [r7, #12]
1004988a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
1004988c:	697b      	ldr	r3, [r7, #20]
1004988e:	2b00      	cmp	r3, #0
10049890:	d005      	beq.n	1004989e <I2C_Slave_ISR_IT+0xf6>
10049892:	697a      	ldr	r2, [r7, #20]
10049894:	2380      	movs	r3, #128	@ 0x80
10049896:	045b      	lsls	r3, r3, #17
10049898:	429a      	cmp	r2, r3
1004989a:	d000      	beq.n	1004989e <I2C_Slave_ISR_IT+0xf6>
1004989c:	e08a      	b.n	100499b4 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
1004989e:	68fb      	ldr	r3, [r7, #12]
100498a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100498a2:	68fb      	ldr	r3, [r7, #12]
100498a4:	0011      	movs	r1, r2
100498a6:	0018      	movs	r0, r3
100498a8:	f000 ffde 	bl	1004a868 <I2C_ITError>
    if (hi2c->XferCount == 0U)
100498ac:	e082      	b.n	100499b4 <I2C_Slave_ISR_IT+0x20c>
100498ae:	e081      	b.n	100499b4 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
100498b0:	693b      	ldr	r3, [r7, #16]
100498b2:	089b      	lsrs	r3, r3, #2
100498b4:	001a      	movs	r2, r3
100498b6:	2301      	movs	r3, #1
100498b8:	4013      	ands	r3, r2
100498ba:	d031      	beq.n	10049920 <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
100498bc:	687b      	ldr	r3, [r7, #4]
100498be:	089b      	lsrs	r3, r3, #2
100498c0:	001a      	movs	r2, r3
100498c2:	2301      	movs	r3, #1
100498c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
100498c6:	d02b      	beq.n	10049920 <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
100498c8:	68fb      	ldr	r3, [r7, #12]
100498ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100498cc:	b29b      	uxth	r3, r3
100498ce:	2b00      	cmp	r3, #0
100498d0:	d018      	beq.n	10049904 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
100498d2:	68fb      	ldr	r3, [r7, #12]
100498d4:	681b      	ldr	r3, [r3, #0]
100498d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100498d8:	68fb      	ldr	r3, [r7, #12]
100498da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100498dc:	b2d2      	uxtb	r2, r2
100498de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
100498e0:	68fb      	ldr	r3, [r7, #12]
100498e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100498e4:	1c5a      	adds	r2, r3, #1
100498e6:	68fb      	ldr	r3, [r7, #12]
100498e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
100498ea:	68fb      	ldr	r3, [r7, #12]
100498ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100498ee:	3b01      	subs	r3, #1
100498f0:	b29a      	uxth	r2, r3
100498f2:	68fb      	ldr	r3, [r7, #12]
100498f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
100498f6:	68fb      	ldr	r3, [r7, #12]
100498f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100498fa:	b29b      	uxth	r3, r3
100498fc:	3b01      	subs	r3, #1
100498fe:	b29a      	uxth	r2, r3
10049900:	68fb      	ldr	r3, [r7, #12]
10049902:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
10049904:	68fb      	ldr	r3, [r7, #12]
10049906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049908:	b29b      	uxth	r3, r3
1004990a:	2b00      	cmp	r3, #0
1004990c:	d154      	bne.n	100499b8 <I2C_Slave_ISR_IT+0x210>
1004990e:	697b      	ldr	r3, [r7, #20]
10049910:	4a2e      	ldr	r2, [pc, #184]	@ (100499cc <I2C_Slave_ISR_IT+0x224>)
10049912:	4293      	cmp	r3, r2
10049914:	d050      	beq.n	100499b8 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
10049916:	68fb      	ldr	r3, [r7, #12]
10049918:	0018      	movs	r0, r3
1004991a:	f000 fc83 	bl	1004a224 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
1004991e:	e04b      	b.n	100499b8 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
10049920:	693b      	ldr	r3, [r7, #16]
10049922:	08db      	lsrs	r3, r3, #3
10049924:	001a      	movs	r2, r3
10049926:	2301      	movs	r3, #1
10049928:	4013      	ands	r3, r2
1004992a:	d00c      	beq.n	10049946 <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
1004992c:	687b      	ldr	r3, [r7, #4]
1004992e:	08db      	lsrs	r3, r3, #3
10049930:	001a      	movs	r2, r3
10049932:	2301      	movs	r3, #1
10049934:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
10049936:	d006      	beq.n	10049946 <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
10049938:	693a      	ldr	r2, [r7, #16]
1004993a:	68fb      	ldr	r3, [r7, #12]
1004993c:	0011      	movs	r1, r2
1004993e:	0018      	movs	r0, r3
10049940:	f000 fb8a 	bl	1004a058 <I2C_ITAddrCplt>
10049944:	e039      	b.n	100499ba <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10049946:	693b      	ldr	r3, [r7, #16]
10049948:	085b      	lsrs	r3, r3, #1
1004994a:	001a      	movs	r2, r3
1004994c:	2301      	movs	r3, #1
1004994e:	4013      	ands	r3, r2
10049950:	d033      	beq.n	100499ba <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
10049952:	687b      	ldr	r3, [r7, #4]
10049954:	085b      	lsrs	r3, r3, #1
10049956:	001a      	movs	r2, r3
10049958:	2301      	movs	r3, #1
1004995a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
1004995c:	d02d      	beq.n	100499ba <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
1004995e:	68fb      	ldr	r3, [r7, #12]
10049960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049962:	b29b      	uxth	r3, r3
10049964:	2b00      	cmp	r3, #0
10049966:	d018      	beq.n	1004999a <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
10049968:	68fb      	ldr	r3, [r7, #12]
1004996a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004996c:	781a      	ldrb	r2, [r3, #0]
1004996e:	68fb      	ldr	r3, [r7, #12]
10049970:	681b      	ldr	r3, [r3, #0]
10049972:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10049974:	68fb      	ldr	r3, [r7, #12]
10049976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10049978:	1c5a      	adds	r2, r3, #1
1004997a:	68fb      	ldr	r3, [r7, #12]
1004997c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
1004997e:	68fb      	ldr	r3, [r7, #12]
10049980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049982:	b29b      	uxth	r3, r3
10049984:	3b01      	subs	r3, #1
10049986:	b29a      	uxth	r2, r3
10049988:	68fb      	ldr	r3, [r7, #12]
1004998a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
1004998c:	68fb      	ldr	r3, [r7, #12]
1004998e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049990:	3b01      	subs	r3, #1
10049992:	b29a      	uxth	r2, r3
10049994:	68fb      	ldr	r3, [r7, #12]
10049996:	851a      	strh	r2, [r3, #40]	@ 0x28
10049998:	e00f      	b.n	100499ba <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
1004999a:	697a      	ldr	r2, [r7, #20]
1004999c:	2380      	movs	r3, #128	@ 0x80
1004999e:	045b      	lsls	r3, r3, #17
100499a0:	429a      	cmp	r2, r3
100499a2:	d002      	beq.n	100499aa <I2C_Slave_ISR_IT+0x202>
100499a4:	697b      	ldr	r3, [r7, #20]
100499a6:	2b00      	cmp	r3, #0
100499a8:	d107      	bne.n	100499ba <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
100499aa:	68fb      	ldr	r3, [r7, #12]
100499ac:	0018      	movs	r0, r3
100499ae:	f000 fc39 	bl	1004a224 <I2C_ITSlaveSeqCplt>
100499b2:	e002      	b.n	100499ba <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
100499b4:	46c0      	nop			@ (mov r8, r8)
100499b6:	e000      	b.n	100499ba <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
100499b8:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
100499ba:	68fb      	ldr	r3, [r7, #12]
100499bc:	2240      	movs	r2, #64	@ 0x40
100499be:	2100      	movs	r1, #0
100499c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100499c2:	2300      	movs	r3, #0
}
100499c4:	0018      	movs	r0, r3
100499c6:	46bd      	mov	sp, r7
100499c8:	b006      	add	sp, #24
100499ca:	bd80      	pop	{r7, pc}
100499cc:	ffff0000 	.word	0xffff0000

100499d0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
100499d0:	b590      	push	{r4, r7, lr}
100499d2:	b089      	sub	sp, #36	@ 0x24
100499d4:	af02      	add	r7, sp, #8
100499d6:	60f8      	str	r0, [r7, #12]
100499d8:	60b9      	str	r1, [r7, #8]
100499da:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
100499dc:	68fb      	ldr	r3, [r7, #12]
100499de:	2240      	movs	r2, #64	@ 0x40
100499e0:	5c9b      	ldrb	r3, [r3, r2]
100499e2:	2b01      	cmp	r3, #1
100499e4:	d101      	bne.n	100499ea <I2C_Master_ISR_DMA+0x1a>
100499e6:	2302      	movs	r3, #2
100499e8:	e0f7      	b.n	10049bda <I2C_Master_ISR_DMA+0x20a>
100499ea:	68fb      	ldr	r3, [r7, #12]
100499ec:	2240      	movs	r2, #64	@ 0x40
100499ee:	2101      	movs	r1, #1
100499f0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
100499f2:	68bb      	ldr	r3, [r7, #8]
100499f4:	091b      	lsrs	r3, r3, #4
100499f6:	001a      	movs	r2, r3
100499f8:	2301      	movs	r3, #1
100499fa:	4013      	ands	r3, r2
100499fc:	d019      	beq.n	10049a32 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
100499fe:	687b      	ldr	r3, [r7, #4]
10049a00:	091b      	lsrs	r3, r3, #4
10049a02:	001a      	movs	r2, r3
10049a04:	2301      	movs	r3, #1
10049a06:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10049a08:	d013      	beq.n	10049a32 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049a0a:	68fb      	ldr	r3, [r7, #12]
10049a0c:	681b      	ldr	r3, [r3, #0]
10049a0e:	2210      	movs	r2, #16
10049a10:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10049a12:	68fb      	ldr	r3, [r7, #12]
10049a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049a16:	2204      	movs	r2, #4
10049a18:	431a      	orrs	r2, r3
10049a1a:	68fb      	ldr	r3, [r7, #12]
10049a1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
10049a1e:	68fb      	ldr	r3, [r7, #12]
10049a20:	2120      	movs	r1, #32
10049a22:	0018      	movs	r0, r3
10049a24:	f001 f8c6 	bl	1004abb4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10049a28:	68fb      	ldr	r3, [r7, #12]
10049a2a:	0018      	movs	r0, r3
10049a2c:	f001 f847 	bl	1004aabe <I2C_Flush_TXDR>
10049a30:	e0ce      	b.n	10049bd0 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
10049a32:	68bb      	ldr	r3, [r7, #8]
10049a34:	09db      	lsrs	r3, r3, #7
10049a36:	001a      	movs	r2, r3
10049a38:	2301      	movs	r3, #1
10049a3a:	4013      	ands	r3, r2
10049a3c:	d100      	bne.n	10049a40 <I2C_Master_ISR_DMA+0x70>
10049a3e:	e07e      	b.n	10049b3e <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10049a40:	687b      	ldr	r3, [r7, #4]
10049a42:	099b      	lsrs	r3, r3, #6
10049a44:	001a      	movs	r2, r3
10049a46:	2301      	movs	r3, #1
10049a48:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
10049a4a:	d100      	bne.n	10049a4e <I2C_Master_ISR_DMA+0x7e>
10049a4c:	e077      	b.n	10049b3e <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
10049a4e:	68fb      	ldr	r3, [r7, #12]
10049a50:	681b      	ldr	r3, [r3, #0]
10049a52:	681a      	ldr	r2, [r3, #0]
10049a54:	68fb      	ldr	r3, [r7, #12]
10049a56:	681b      	ldr	r3, [r3, #0]
10049a58:	2140      	movs	r1, #64	@ 0x40
10049a5a:	438a      	bics	r2, r1
10049a5c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
10049a5e:	68fb      	ldr	r3, [r7, #12]
10049a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049a62:	b29b      	uxth	r3, r3
10049a64:	2b00      	cmp	r3, #0
10049a66:	d055      	beq.n	10049b14 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
10049a68:	68fb      	ldr	r3, [r7, #12]
10049a6a:	681b      	ldr	r3, [r3, #0]
10049a6c:	685b      	ldr	r3, [r3, #4]
10049a6e:	b29a      	uxth	r2, r3
10049a70:	2312      	movs	r3, #18
10049a72:	18fb      	adds	r3, r7, r3
10049a74:	0592      	lsls	r2, r2, #22
10049a76:	0d92      	lsrs	r2, r2, #22
10049a78:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10049a7a:	68fb      	ldr	r3, [r7, #12]
10049a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049a7e:	b29b      	uxth	r3, r3
10049a80:	2bff      	cmp	r3, #255	@ 0xff
10049a82:	d906      	bls.n	10049a92 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
10049a84:	68fb      	ldr	r3, [r7, #12]
10049a86:	22ff      	movs	r2, #255	@ 0xff
10049a88:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
10049a8a:	2380      	movs	r3, #128	@ 0x80
10049a8c:	045b      	lsls	r3, r3, #17
10049a8e:	617b      	str	r3, [r7, #20]
10049a90:	e010      	b.n	10049ab4 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
10049a92:	68fb      	ldr	r3, [r7, #12]
10049a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049a96:	b29a      	uxth	r2, r3
10049a98:	68fb      	ldr	r3, [r7, #12]
10049a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
10049a9c:	68fb      	ldr	r3, [r7, #12]
10049a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10049aa0:	4a50      	ldr	r2, [pc, #320]	@ (10049be4 <I2C_Master_ISR_DMA+0x214>)
10049aa2:	4293      	cmp	r3, r2
10049aa4:	d003      	beq.n	10049aae <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
10049aa6:	68fb      	ldr	r3, [r7, #12]
10049aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10049aaa:	617b      	str	r3, [r7, #20]
10049aac:	e002      	b.n	10049ab4 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
10049aae:	2380      	movs	r3, #128	@ 0x80
10049ab0:	049b      	lsls	r3, r3, #18
10049ab2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
10049ab4:	68fb      	ldr	r3, [r7, #12]
10049ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049ab8:	b2da      	uxtb	r2, r3
10049aba:	697c      	ldr	r4, [r7, #20]
10049abc:	2312      	movs	r3, #18
10049abe:	18fb      	adds	r3, r7, r3
10049ac0:	8819      	ldrh	r1, [r3, #0]
10049ac2:	68f8      	ldr	r0, [r7, #12]
10049ac4:	2300      	movs	r3, #0
10049ac6:	9300      	str	r3, [sp, #0]
10049ac8:	0023      	movs	r3, r4
10049aca:	f001 f839 	bl	1004ab40 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
10049ace:	68fb      	ldr	r3, [r7, #12]
10049ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049ad2:	b29a      	uxth	r2, r3
10049ad4:	68fb      	ldr	r3, [r7, #12]
10049ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049ad8:	1ad3      	subs	r3, r2, r3
10049ada:	b29a      	uxth	r2, r3
10049adc:	68fb      	ldr	r3, [r7, #12]
10049ade:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10049ae0:	68fb      	ldr	r3, [r7, #12]
10049ae2:	2241      	movs	r2, #65	@ 0x41
10049ae4:	5c9b      	ldrb	r3, [r3, r2]
10049ae6:	b2db      	uxtb	r3, r3
10049ae8:	2b22      	cmp	r3, #34	@ 0x22
10049aea:	d109      	bne.n	10049b00 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
10049aec:	68fb      	ldr	r3, [r7, #12]
10049aee:	681b      	ldr	r3, [r3, #0]
10049af0:	681a      	ldr	r2, [r3, #0]
10049af2:	68fb      	ldr	r3, [r7, #12]
10049af4:	681b      	ldr	r3, [r3, #0]
10049af6:	2180      	movs	r1, #128	@ 0x80
10049af8:	0209      	lsls	r1, r1, #8
10049afa:	430a      	orrs	r2, r1
10049afc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10049afe:	e067      	b.n	10049bd0 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
10049b00:	68fb      	ldr	r3, [r7, #12]
10049b02:	681b      	ldr	r3, [r3, #0]
10049b04:	681a      	ldr	r2, [r3, #0]
10049b06:	68fb      	ldr	r3, [r7, #12]
10049b08:	681b      	ldr	r3, [r3, #0]
10049b0a:	2180      	movs	r1, #128	@ 0x80
10049b0c:	01c9      	lsls	r1, r1, #7
10049b0e:	430a      	orrs	r2, r1
10049b10:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10049b12:	e05d      	b.n	10049bd0 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
10049b14:	68fb      	ldr	r3, [r7, #12]
10049b16:	681b      	ldr	r3, [r3, #0]
10049b18:	685a      	ldr	r2, [r3, #4]
10049b1a:	2380      	movs	r3, #128	@ 0x80
10049b1c:	049b      	lsls	r3, r3, #18
10049b1e:	401a      	ands	r2, r3
10049b20:	2380      	movs	r3, #128	@ 0x80
10049b22:	049b      	lsls	r3, r3, #18
10049b24:	429a      	cmp	r2, r3
10049b26:	d004      	beq.n	10049b32 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
10049b28:	68fb      	ldr	r3, [r7, #12]
10049b2a:	0018      	movs	r0, r3
10049b2c:	f000 fb38 	bl	1004a1a0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
10049b30:	e04e      	b.n	10049bd0 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10049b32:	68fb      	ldr	r3, [r7, #12]
10049b34:	2140      	movs	r1, #64	@ 0x40
10049b36:	0018      	movs	r0, r3
10049b38:	f000 fe96 	bl	1004a868 <I2C_ITError>
    if (hi2c->XferCount != 0U)
10049b3c:	e048      	b.n	10049bd0 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10049b3e:	68bb      	ldr	r3, [r7, #8]
10049b40:	099b      	lsrs	r3, r3, #6
10049b42:	001a      	movs	r2, r3
10049b44:	2301      	movs	r3, #1
10049b46:	4013      	ands	r3, r2
10049b48:	d02e      	beq.n	10049ba8 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10049b4a:	687b      	ldr	r3, [r7, #4]
10049b4c:	099b      	lsrs	r3, r3, #6
10049b4e:	001a      	movs	r2, r3
10049b50:	2301      	movs	r3, #1
10049b52:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10049b54:	d028      	beq.n	10049ba8 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
10049b56:	68fb      	ldr	r3, [r7, #12]
10049b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049b5a:	b29b      	uxth	r3, r3
10049b5c:	2b00      	cmp	r3, #0
10049b5e:	d11d      	bne.n	10049b9c <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
10049b60:	68fb      	ldr	r3, [r7, #12]
10049b62:	681b      	ldr	r3, [r3, #0]
10049b64:	685a      	ldr	r2, [r3, #4]
10049b66:	2380      	movs	r3, #128	@ 0x80
10049b68:	049b      	lsls	r3, r3, #18
10049b6a:	401a      	ands	r2, r3
10049b6c:	2380      	movs	r3, #128	@ 0x80
10049b6e:	049b      	lsls	r3, r3, #18
10049b70:	429a      	cmp	r2, r3
10049b72:	d02c      	beq.n	10049bce <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
10049b74:	68fb      	ldr	r3, [r7, #12]
10049b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10049b78:	4a1a      	ldr	r2, [pc, #104]	@ (10049be4 <I2C_Master_ISR_DMA+0x214>)
10049b7a:	4293      	cmp	r3, r2
10049b7c:	d109      	bne.n	10049b92 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
10049b7e:	68fb      	ldr	r3, [r7, #12]
10049b80:	681b      	ldr	r3, [r3, #0]
10049b82:	685a      	ldr	r2, [r3, #4]
10049b84:	68fb      	ldr	r3, [r7, #12]
10049b86:	681b      	ldr	r3, [r3, #0]
10049b88:	2180      	movs	r1, #128	@ 0x80
10049b8a:	01c9      	lsls	r1, r1, #7
10049b8c:	430a      	orrs	r2, r1
10049b8e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
10049b90:	e01d      	b.n	10049bce <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
10049b92:	68fb      	ldr	r3, [r7, #12]
10049b94:	0018      	movs	r0, r3
10049b96:	f000 fb03 	bl	1004a1a0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
10049b9a:	e018      	b.n	10049bce <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10049b9c:	68fb      	ldr	r3, [r7, #12]
10049b9e:	2140      	movs	r1, #64	@ 0x40
10049ba0:	0018      	movs	r0, r3
10049ba2:	f000 fe61 	bl	1004a868 <I2C_ITError>
    if (hi2c->XferCount == 0U)
10049ba6:	e012      	b.n	10049bce <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10049ba8:	68bb      	ldr	r3, [r7, #8]
10049baa:	095b      	lsrs	r3, r3, #5
10049bac:	001a      	movs	r2, r3
10049bae:	2301      	movs	r3, #1
10049bb0:	4013      	ands	r3, r2
10049bb2:	d00d      	beq.n	10049bd0 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10049bb4:	687b      	ldr	r3, [r7, #4]
10049bb6:	095b      	lsrs	r3, r3, #5
10049bb8:	001a      	movs	r2, r3
10049bba:	2301      	movs	r3, #1
10049bbc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10049bbe:	d007      	beq.n	10049bd0 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
10049bc0:	68ba      	ldr	r2, [r7, #8]
10049bc2:	68fb      	ldr	r3, [r7, #12]
10049bc4:	0011      	movs	r1, r2
10049bc6:	0018      	movs	r0, r3
10049bc8:	f000 fb92 	bl	1004a2f0 <I2C_ITMasterCplt>
10049bcc:	e000      	b.n	10049bd0 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
10049bce:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10049bd0:	68fb      	ldr	r3, [r7, #12]
10049bd2:	2240      	movs	r2, #64	@ 0x40
10049bd4:	2100      	movs	r1, #0
10049bd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10049bd8:	2300      	movs	r3, #0
}
10049bda:	0018      	movs	r0, r3
10049bdc:	46bd      	mov	sp, r7
10049bde:	b007      	add	sp, #28
10049be0:	bd90      	pop	{r4, r7, pc}
10049be2:	46c0      	nop			@ (mov r8, r8)
10049be4:	ffff0000 	.word	0xffff0000

10049be8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
10049be8:	b590      	push	{r4, r7, lr}
10049bea:	b089      	sub	sp, #36	@ 0x24
10049bec:	af02      	add	r7, sp, #8
10049bee:	60f8      	str	r0, [r7, #12]
10049bf0:	60b9      	str	r1, [r7, #8]
10049bf2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
10049bf4:	4b9a      	ldr	r3, [pc, #616]	@ (10049e60 <I2C_Mem_ISR_DMA+0x278>)
10049bf6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
10049bf8:	68fb      	ldr	r3, [r7, #12]
10049bfa:	2240      	movs	r2, #64	@ 0x40
10049bfc:	5c9b      	ldrb	r3, [r3, r2]
10049bfe:	2b01      	cmp	r3, #1
10049c00:	d101      	bne.n	10049c06 <I2C_Mem_ISR_DMA+0x1e>
10049c02:	2302      	movs	r3, #2
10049c04:	e127      	b.n	10049e56 <I2C_Mem_ISR_DMA+0x26e>
10049c06:	68fb      	ldr	r3, [r7, #12]
10049c08:	2240      	movs	r2, #64	@ 0x40
10049c0a:	2101      	movs	r1, #1
10049c0c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10049c0e:	68bb      	ldr	r3, [r7, #8]
10049c10:	091b      	lsrs	r3, r3, #4
10049c12:	001a      	movs	r2, r3
10049c14:	2301      	movs	r3, #1
10049c16:	4013      	ands	r3, r2
10049c18:	d019      	beq.n	10049c4e <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10049c1a:	687b      	ldr	r3, [r7, #4]
10049c1c:	091b      	lsrs	r3, r3, #4
10049c1e:	001a      	movs	r2, r3
10049c20:	2301      	movs	r3, #1
10049c22:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10049c24:	d013      	beq.n	10049c4e <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049c26:	68fb      	ldr	r3, [r7, #12]
10049c28:	681b      	ldr	r3, [r3, #0]
10049c2a:	2210      	movs	r2, #16
10049c2c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10049c2e:	68fb      	ldr	r3, [r7, #12]
10049c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049c32:	2204      	movs	r2, #4
10049c34:	431a      	orrs	r2, r3
10049c36:	68fb      	ldr	r3, [r7, #12]
10049c38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
10049c3a:	68fb      	ldr	r3, [r7, #12]
10049c3c:	2120      	movs	r1, #32
10049c3e:	0018      	movs	r0, r3
10049c40:	f000 ffb8 	bl	1004abb4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10049c44:	68fb      	ldr	r3, [r7, #12]
10049c46:	0018      	movs	r0, r3
10049c48:	f000 ff39 	bl	1004aabe <I2C_Flush_TXDR>
10049c4c:	e0fe      	b.n	10049e4c <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
10049c4e:	68bb      	ldr	r3, [r7, #8]
10049c50:	085b      	lsrs	r3, r3, #1
10049c52:	001a      	movs	r2, r3
10049c54:	2301      	movs	r3, #1
10049c56:	4013      	ands	r3, r2
10049c58:	d00f      	beq.n	10049c7a <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
10049c5a:	687b      	ldr	r3, [r7, #4]
10049c5c:	085b      	lsrs	r3, r3, #1
10049c5e:	001a      	movs	r2, r3
10049c60:	2301      	movs	r3, #1
10049c62:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
10049c64:	d009      	beq.n	10049c7a <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
10049c66:	68fb      	ldr	r3, [r7, #12]
10049c68:	681b      	ldr	r3, [r3, #0]
10049c6a:	68fa      	ldr	r2, [r7, #12]
10049c6c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
10049c6e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
10049c70:	68fb      	ldr	r3, [r7, #12]
10049c72:	2201      	movs	r2, #1
10049c74:	4252      	negs	r2, r2
10049c76:	651a      	str	r2, [r3, #80]	@ 0x50
10049c78:	e0e8      	b.n	10049e4c <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
10049c7a:	68bb      	ldr	r3, [r7, #8]
10049c7c:	09db      	lsrs	r3, r3, #7
10049c7e:	001a      	movs	r2, r3
10049c80:	2301      	movs	r3, #1
10049c82:	4013      	ands	r3, r2
10049c84:	d065      	beq.n	10049d52 <I2C_Mem_ISR_DMA+0x16a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10049c86:	687b      	ldr	r3, [r7, #4]
10049c88:	099b      	lsrs	r3, r3, #6
10049c8a:	001a      	movs	r2, r3
10049c8c:	2301      	movs	r3, #1
10049c8e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
10049c90:	d05f      	beq.n	10049d52 <I2C_Mem_ISR_DMA+0x16a>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10049c92:	68fb      	ldr	r3, [r7, #12]
10049c94:	2101      	movs	r1, #1
10049c96:	0018      	movs	r0, r3
10049c98:	f001 f816 	bl	1004acc8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
10049c9c:	68fb      	ldr	r3, [r7, #12]
10049c9e:	2110      	movs	r1, #16
10049ca0:	0018      	movs	r0, r3
10049ca2:	f000 ff87 	bl	1004abb4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
10049ca6:	68fb      	ldr	r3, [r7, #12]
10049ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049caa:	b29b      	uxth	r3, r3
10049cac:	2b00      	cmp	r3, #0
10049cae:	d04a      	beq.n	10049d46 <I2C_Mem_ISR_DMA+0x15e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10049cb0:	68fb      	ldr	r3, [r7, #12]
10049cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049cb4:	b29b      	uxth	r3, r3
10049cb6:	2bff      	cmp	r3, #255	@ 0xff
10049cb8:	d910      	bls.n	10049cdc <I2C_Mem_ISR_DMA+0xf4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
10049cba:	68fb      	ldr	r3, [r7, #12]
10049cbc:	22ff      	movs	r2, #255	@ 0xff
10049cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10049cc0:	68fb      	ldr	r3, [r7, #12]
10049cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10049cc4:	b299      	uxth	r1, r3
10049cc6:	68fb      	ldr	r3, [r7, #12]
10049cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049cca:	b2da      	uxtb	r2, r3
10049ccc:	2380      	movs	r3, #128	@ 0x80
10049cce:	045b      	lsls	r3, r3, #17
10049cd0:	68f8      	ldr	r0, [r7, #12]
10049cd2:	2400      	movs	r4, #0
10049cd4:	9400      	str	r4, [sp, #0]
10049cd6:	f000 ff33 	bl	1004ab40 <I2C_TransferConfig>
10049cda:	e011      	b.n	10049d00 <I2C_Mem_ISR_DMA+0x118>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
10049cdc:	68fb      	ldr	r3, [r7, #12]
10049cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049ce0:	b29a      	uxth	r2, r3
10049ce2:	68fb      	ldr	r3, [r7, #12]
10049ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10049ce6:	68fb      	ldr	r3, [r7, #12]
10049ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10049cea:	b299      	uxth	r1, r3
10049cec:	68fb      	ldr	r3, [r7, #12]
10049cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049cf0:	b2da      	uxtb	r2, r3
10049cf2:	2380      	movs	r3, #128	@ 0x80
10049cf4:	049b      	lsls	r3, r3, #18
10049cf6:	68f8      	ldr	r0, [r7, #12]
10049cf8:	2400      	movs	r4, #0
10049cfa:	9400      	str	r4, [sp, #0]
10049cfc:	f000 ff20 	bl	1004ab40 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
10049d00:	68fb      	ldr	r3, [r7, #12]
10049d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049d04:	b29a      	uxth	r2, r3
10049d06:	68fb      	ldr	r3, [r7, #12]
10049d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049d0a:	1ad3      	subs	r3, r2, r3
10049d0c:	b29a      	uxth	r2, r3
10049d0e:	68fb      	ldr	r3, [r7, #12]
10049d10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10049d12:	68fb      	ldr	r3, [r7, #12]
10049d14:	2241      	movs	r2, #65	@ 0x41
10049d16:	5c9b      	ldrb	r3, [r3, r2]
10049d18:	b2db      	uxtb	r3, r3
10049d1a:	2b22      	cmp	r3, #34	@ 0x22
10049d1c:	d109      	bne.n	10049d32 <I2C_Mem_ISR_DMA+0x14a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
10049d1e:	68fb      	ldr	r3, [r7, #12]
10049d20:	681b      	ldr	r3, [r3, #0]
10049d22:	681a      	ldr	r2, [r3, #0]
10049d24:	68fb      	ldr	r3, [r7, #12]
10049d26:	681b      	ldr	r3, [r3, #0]
10049d28:	2180      	movs	r1, #128	@ 0x80
10049d2a:	0209      	lsls	r1, r1, #8
10049d2c:	430a      	orrs	r2, r1
10049d2e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10049d30:	e08c      	b.n	10049e4c <I2C_Mem_ISR_DMA+0x264>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
10049d32:	68fb      	ldr	r3, [r7, #12]
10049d34:	681b      	ldr	r3, [r3, #0]
10049d36:	681a      	ldr	r2, [r3, #0]
10049d38:	68fb      	ldr	r3, [r7, #12]
10049d3a:	681b      	ldr	r3, [r3, #0]
10049d3c:	2180      	movs	r1, #128	@ 0x80
10049d3e:	01c9      	lsls	r1, r1, #7
10049d40:	430a      	orrs	r2, r1
10049d42:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10049d44:	e082      	b.n	10049e4c <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10049d46:	68fb      	ldr	r3, [r7, #12]
10049d48:	2140      	movs	r1, #64	@ 0x40
10049d4a:	0018      	movs	r0, r3
10049d4c:	f000 fd8c 	bl	1004a868 <I2C_ITError>
    if (hi2c->XferCount != 0U)
10049d50:	e07c      	b.n	10049e4c <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10049d52:	68bb      	ldr	r3, [r7, #8]
10049d54:	099b      	lsrs	r3, r3, #6
10049d56:	001a      	movs	r2, r3
10049d58:	2301      	movs	r3, #1
10049d5a:	4013      	ands	r3, r2
10049d5c:	d064      	beq.n	10049e28 <I2C_Mem_ISR_DMA+0x240>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10049d5e:	687b      	ldr	r3, [r7, #4]
10049d60:	099b      	lsrs	r3, r3, #6
10049d62:	001a      	movs	r2, r3
10049d64:	2301      	movs	r3, #1
10049d66:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10049d68:	d05e      	beq.n	10049e28 <I2C_Mem_ISR_DMA+0x240>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10049d6a:	68fb      	ldr	r3, [r7, #12]
10049d6c:	2101      	movs	r1, #1
10049d6e:	0018      	movs	r0, r3
10049d70:	f000 ffaa 	bl	1004acc8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
10049d74:	68fb      	ldr	r3, [r7, #12]
10049d76:	2110      	movs	r1, #16
10049d78:	0018      	movs	r0, r3
10049d7a:	f000 ff1b 	bl	1004abb4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10049d7e:	68fb      	ldr	r3, [r7, #12]
10049d80:	2241      	movs	r2, #65	@ 0x41
10049d82:	5c9b      	ldrb	r3, [r3, r2]
10049d84:	b2db      	uxtb	r3, r3
10049d86:	2b22      	cmp	r3, #34	@ 0x22
10049d88:	d101      	bne.n	10049d8e <I2C_Mem_ISR_DMA+0x1a6>
    {
      direction = I2C_GENERATE_START_READ;
10049d8a:	4b36      	ldr	r3, [pc, #216]	@ (10049e64 <I2C_Mem_ISR_DMA+0x27c>)
10049d8c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
10049d8e:	68fb      	ldr	r3, [r7, #12]
10049d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049d92:	b29b      	uxth	r3, r3
10049d94:	2bff      	cmp	r3, #255	@ 0xff
10049d96:	d911      	bls.n	10049dbc <I2C_Mem_ISR_DMA+0x1d4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
10049d98:	68fb      	ldr	r3, [r7, #12]
10049d9a:	22ff      	movs	r2, #255	@ 0xff
10049d9c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10049d9e:	68fb      	ldr	r3, [r7, #12]
10049da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10049da2:	b299      	uxth	r1, r3
10049da4:	68fb      	ldr	r3, [r7, #12]
10049da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049da8:	b2da      	uxtb	r2, r3
10049daa:	2380      	movs	r3, #128	@ 0x80
10049dac:	045c      	lsls	r4, r3, #17
10049dae:	68f8      	ldr	r0, [r7, #12]
10049db0:	697b      	ldr	r3, [r7, #20]
10049db2:	9300      	str	r3, [sp, #0]
10049db4:	0023      	movs	r3, r4
10049db6:	f000 fec3 	bl	1004ab40 <I2C_TransferConfig>
10049dba:	e012      	b.n	10049de2 <I2C_Mem_ISR_DMA+0x1fa>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
10049dbc:	68fb      	ldr	r3, [r7, #12]
10049dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049dc0:	b29a      	uxth	r2, r3
10049dc2:	68fb      	ldr	r3, [r7, #12]
10049dc4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10049dc6:	68fb      	ldr	r3, [r7, #12]
10049dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10049dca:	b299      	uxth	r1, r3
10049dcc:	68fb      	ldr	r3, [r7, #12]
10049dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049dd0:	b2da      	uxtb	r2, r3
10049dd2:	2380      	movs	r3, #128	@ 0x80
10049dd4:	049c      	lsls	r4, r3, #18
10049dd6:	68f8      	ldr	r0, [r7, #12]
10049dd8:	697b      	ldr	r3, [r7, #20]
10049dda:	9300      	str	r3, [sp, #0]
10049ddc:	0023      	movs	r3, r4
10049dde:	f000 feaf 	bl	1004ab40 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
10049de2:	68fb      	ldr	r3, [r7, #12]
10049de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049de6:	b29a      	uxth	r2, r3
10049de8:	68fb      	ldr	r3, [r7, #12]
10049dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049dec:	1ad3      	subs	r3, r2, r3
10049dee:	b29a      	uxth	r2, r3
10049df0:	68fb      	ldr	r3, [r7, #12]
10049df2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10049df4:	68fb      	ldr	r3, [r7, #12]
10049df6:	2241      	movs	r2, #65	@ 0x41
10049df8:	5c9b      	ldrb	r3, [r3, r2]
10049dfa:	b2db      	uxtb	r3, r3
10049dfc:	2b22      	cmp	r3, #34	@ 0x22
10049dfe:	d109      	bne.n	10049e14 <I2C_Mem_ISR_DMA+0x22c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
10049e00:	68fb      	ldr	r3, [r7, #12]
10049e02:	681b      	ldr	r3, [r3, #0]
10049e04:	681a      	ldr	r2, [r3, #0]
10049e06:	68fb      	ldr	r3, [r7, #12]
10049e08:	681b      	ldr	r3, [r3, #0]
10049e0a:	2180      	movs	r1, #128	@ 0x80
10049e0c:	0209      	lsls	r1, r1, #8
10049e0e:	430a      	orrs	r2, r1
10049e10:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10049e12:	e01b      	b.n	10049e4c <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
10049e14:	68fb      	ldr	r3, [r7, #12]
10049e16:	681b      	ldr	r3, [r3, #0]
10049e18:	681a      	ldr	r2, [r3, #0]
10049e1a:	68fb      	ldr	r3, [r7, #12]
10049e1c:	681b      	ldr	r3, [r3, #0]
10049e1e:	2180      	movs	r1, #128	@ 0x80
10049e20:	01c9      	lsls	r1, r1, #7
10049e22:	430a      	orrs	r2, r1
10049e24:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10049e26:	e011      	b.n	10049e4c <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10049e28:	68bb      	ldr	r3, [r7, #8]
10049e2a:	095b      	lsrs	r3, r3, #5
10049e2c:	001a      	movs	r2, r3
10049e2e:	2301      	movs	r3, #1
10049e30:	4013      	ands	r3, r2
10049e32:	d00b      	beq.n	10049e4c <I2C_Mem_ISR_DMA+0x264>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10049e34:	687b      	ldr	r3, [r7, #4]
10049e36:	095b      	lsrs	r3, r3, #5
10049e38:	001a      	movs	r2, r3
10049e3a:	2301      	movs	r3, #1
10049e3c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10049e3e:	d005      	beq.n	10049e4c <I2C_Mem_ISR_DMA+0x264>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
10049e40:	68ba      	ldr	r2, [r7, #8]
10049e42:	68fb      	ldr	r3, [r7, #12]
10049e44:	0011      	movs	r1, r2
10049e46:	0018      	movs	r0, r3
10049e48:	f000 fa52 	bl	1004a2f0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10049e4c:	68fb      	ldr	r3, [r7, #12]
10049e4e:	2240      	movs	r2, #64	@ 0x40
10049e50:	2100      	movs	r1, #0
10049e52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10049e54:	2300      	movs	r3, #0
}
10049e56:	0018      	movs	r0, r3
10049e58:	46bd      	mov	sp, r7
10049e5a:	b007      	add	sp, #28
10049e5c:	bd90      	pop	{r4, r7, pc}
10049e5e:	46c0      	nop			@ (mov r8, r8)
10049e60:	80002000 	.word	0x80002000
10049e64:	80002400 	.word	0x80002400

10049e68 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
10049e68:	b580      	push	{r7, lr}
10049e6a:	b088      	sub	sp, #32
10049e6c:	af00      	add	r7, sp, #0
10049e6e:	60f8      	str	r0, [r7, #12]
10049e70:	60b9      	str	r1, [r7, #8]
10049e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
10049e74:	68fb      	ldr	r3, [r7, #12]
10049e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10049e78:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
10049e7a:	2300      	movs	r3, #0
10049e7c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
10049e7e:	68fb      	ldr	r3, [r7, #12]
10049e80:	2240      	movs	r2, #64	@ 0x40
10049e82:	5c9b      	ldrb	r3, [r3, r2]
10049e84:	2b01      	cmp	r3, #1
10049e86:	d101      	bne.n	10049e8c <I2C_Slave_ISR_DMA+0x24>
10049e88:	2302      	movs	r3, #2
10049e8a:	e0de      	b.n	1004a04a <I2C_Slave_ISR_DMA+0x1e2>
10049e8c:	68fb      	ldr	r3, [r7, #12]
10049e8e:	2240      	movs	r2, #64	@ 0x40
10049e90:	2101      	movs	r1, #1
10049e92:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10049e94:	68bb      	ldr	r3, [r7, #8]
10049e96:	095b      	lsrs	r3, r3, #5
10049e98:	001a      	movs	r2, r3
10049e9a:	2301      	movs	r3, #1
10049e9c:	4013      	ands	r3, r2
10049e9e:	d00c      	beq.n	10049eba <I2C_Slave_ISR_DMA+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10049ea0:	687b      	ldr	r3, [r7, #4]
10049ea2:	095b      	lsrs	r3, r3, #5
10049ea4:	001a      	movs	r2, r3
10049ea6:	2301      	movs	r3, #1
10049ea8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10049eaa:	d006      	beq.n	10049eba <I2C_Slave_ISR_DMA+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
10049eac:	68ba      	ldr	r2, [r7, #8]
10049eae:	68fb      	ldr	r3, [r7, #12]
10049eb0:	0011      	movs	r1, r2
10049eb2:	0018      	movs	r0, r3
10049eb4:	f000 faee 	bl	1004a494 <I2C_ITSlaveCplt>
10049eb8:	e0c2      	b.n	1004a040 <I2C_Slave_ISR_DMA+0x1d8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10049eba:	68bb      	ldr	r3, [r7, #8]
10049ebc:	091b      	lsrs	r3, r3, #4
10049ebe:	001a      	movs	r2, r3
10049ec0:	2301      	movs	r3, #1
10049ec2:	4013      	ands	r3, r2
10049ec4:	d100      	bne.n	10049ec8 <I2C_Slave_ISR_DMA+0x60>
10049ec6:	e0a9      	b.n	1004a01c <I2C_Slave_ISR_DMA+0x1b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10049ec8:	687b      	ldr	r3, [r7, #4]
10049eca:	091b      	lsrs	r3, r3, #4
10049ecc:	001a      	movs	r2, r3
10049ece:	2301      	movs	r3, #1
10049ed0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10049ed2:	d100      	bne.n	10049ed6 <I2C_Slave_ISR_DMA+0x6e>
10049ed4:	e0a2      	b.n	1004a01c <I2C_Slave_ISR_DMA+0x1b4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
10049ed6:	687b      	ldr	r3, [r7, #4]
10049ed8:	0b9b      	lsrs	r3, r3, #14
10049eda:	001a      	movs	r2, r3
10049edc:	2301      	movs	r3, #1
10049ede:	4013      	ands	r3, r2
10049ee0:	d106      	bne.n	10049ef0 <I2C_Slave_ISR_DMA+0x88>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
10049ee2:	687b      	ldr	r3, [r7, #4]
10049ee4:	0bdb      	lsrs	r3, r3, #15
10049ee6:	001a      	movs	r2, r3
10049ee8:	2301      	movs	r3, #1
10049eea:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
10049eec:	d100      	bne.n	10049ef0 <I2C_Slave_ISR_DMA+0x88>
10049eee:	e08e      	b.n	1004a00e <I2C_Slave_ISR_DMA+0x1a6>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
10049ef0:	68fb      	ldr	r3, [r7, #12]
10049ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10049ef4:	2b00      	cmp	r3, #0
10049ef6:	d00d      	beq.n	10049f14 <I2C_Slave_ISR_DMA+0xac>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
10049ef8:	687b      	ldr	r3, [r7, #4]
10049efa:	0bdb      	lsrs	r3, r3, #15
10049efc:	001a      	movs	r2, r3
10049efe:	2301      	movs	r3, #1
10049f00:	4013      	ands	r3, r2
10049f02:	d007      	beq.n	10049f14 <I2C_Slave_ISR_DMA+0xac>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
10049f04:	68fb      	ldr	r3, [r7, #12]
10049f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10049f08:	681b      	ldr	r3, [r3, #0]
10049f0a:	685b      	ldr	r3, [r3, #4]
10049f0c:	2b00      	cmp	r3, #0
10049f0e:	d101      	bne.n	10049f14 <I2C_Slave_ISR_DMA+0xac>
          {
            treatdmanack = 1U;
10049f10:	2301      	movs	r3, #1
10049f12:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
10049f14:	68fb      	ldr	r3, [r7, #12]
10049f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049f18:	2b00      	cmp	r3, #0
10049f1a:	d00d      	beq.n	10049f38 <I2C_Slave_ISR_DMA+0xd0>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
10049f1c:	687b      	ldr	r3, [r7, #4]
10049f1e:	0b9b      	lsrs	r3, r3, #14
10049f20:	001a      	movs	r2, r3
10049f22:	2301      	movs	r3, #1
10049f24:	4013      	ands	r3, r2
10049f26:	d007      	beq.n	10049f38 <I2C_Slave_ISR_DMA+0xd0>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
10049f28:	68fb      	ldr	r3, [r7, #12]
10049f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049f2c:	681b      	ldr	r3, [r3, #0]
10049f2e:	685b      	ldr	r3, [r3, #4]
10049f30:	2b00      	cmp	r3, #0
10049f32:	d101      	bne.n	10049f38 <I2C_Slave_ISR_DMA+0xd0>
          {
            treatdmanack = 1U;
10049f34:	2301      	movs	r3, #1
10049f36:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
10049f38:	69fb      	ldr	r3, [r7, #28]
10049f3a:	2b01      	cmp	r3, #1
10049f3c:	d12d      	bne.n	10049f9a <I2C_Slave_ISR_DMA+0x132>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10049f3e:	68fb      	ldr	r3, [r7, #12]
10049f40:	2241      	movs	r2, #65	@ 0x41
10049f42:	5c9b      	ldrb	r3, [r3, r2]
10049f44:	b2db      	uxtb	r3, r3
10049f46:	2b28      	cmp	r3, #40	@ 0x28
10049f48:	d10b      	bne.n	10049f62 <I2C_Slave_ISR_DMA+0xfa>
10049f4a:	69ba      	ldr	r2, [r7, #24]
10049f4c:	2380      	movs	r3, #128	@ 0x80
10049f4e:	049b      	lsls	r3, r3, #18
10049f50:	429a      	cmp	r2, r3
10049f52:	d106      	bne.n	10049f62 <I2C_Slave_ISR_DMA+0xfa>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
10049f54:	68ba      	ldr	r2, [r7, #8]
10049f56:	68fb      	ldr	r3, [r7, #12]
10049f58:	0011      	movs	r1, r2
10049f5a:	0018      	movs	r0, r3
10049f5c:	f000 fc2a 	bl	1004a7b4 <I2C_ITListenCplt>
10049f60:	e054      	b.n	1004a00c <I2C_Slave_ISR_DMA+0x1a4>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
10049f62:	68fb      	ldr	r3, [r7, #12]
10049f64:	2241      	movs	r2, #65	@ 0x41
10049f66:	5c9b      	ldrb	r3, [r3, r2]
10049f68:	b2db      	uxtb	r3, r3
10049f6a:	2b29      	cmp	r3, #41	@ 0x29
10049f6c:	d110      	bne.n	10049f90 <I2C_Slave_ISR_DMA+0x128>
10049f6e:	69bb      	ldr	r3, [r7, #24]
10049f70:	4a38      	ldr	r2, [pc, #224]	@ (1004a054 <I2C_Slave_ISR_DMA+0x1ec>)
10049f72:	4293      	cmp	r3, r2
10049f74:	d00c      	beq.n	10049f90 <I2C_Slave_ISR_DMA+0x128>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049f76:	68fb      	ldr	r3, [r7, #12]
10049f78:	681b      	ldr	r3, [r3, #0]
10049f7a:	2210      	movs	r2, #16
10049f7c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
10049f7e:	68fb      	ldr	r3, [r7, #12]
10049f80:	0018      	movs	r0, r3
10049f82:	f000 fd9c 	bl	1004aabe <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
10049f86:	68fb      	ldr	r3, [r7, #12]
10049f88:	0018      	movs	r0, r3
10049f8a:	f000 f94b 	bl	1004a224 <I2C_ITSlaveSeqCplt>
10049f8e:	e03d      	b.n	1004a00c <I2C_Slave_ISR_DMA+0x1a4>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049f90:	68fb      	ldr	r3, [r7, #12]
10049f92:	681b      	ldr	r3, [r3, #0]
10049f94:	2210      	movs	r2, #16
10049f96:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
10049f98:	e03e      	b.n	1004a018 <I2C_Slave_ISR_DMA+0x1b0>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049f9a:	68fb      	ldr	r3, [r7, #12]
10049f9c:	681b      	ldr	r3, [r3, #0]
10049f9e:	2210      	movs	r2, #16
10049fa0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10049fa2:	68fb      	ldr	r3, [r7, #12]
10049fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049fa6:	2204      	movs	r2, #4
10049fa8:	431a      	orrs	r2, r3
10049faa:	68fb      	ldr	r3, [r7, #12]
10049fac:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
10049fae:	2317      	movs	r3, #23
10049fb0:	18fb      	adds	r3, r7, r3
10049fb2:	68fa      	ldr	r2, [r7, #12]
10049fb4:	2141      	movs	r1, #65	@ 0x41
10049fb6:	5c52      	ldrb	r2, [r2, r1]
10049fb8:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
10049fba:	69bb      	ldr	r3, [r7, #24]
10049fbc:	2b00      	cmp	r3, #0
10049fbe:	d004      	beq.n	10049fca <I2C_Slave_ISR_DMA+0x162>
10049fc0:	69ba      	ldr	r2, [r7, #24]
10049fc2:	2380      	movs	r3, #128	@ 0x80
10049fc4:	045b      	lsls	r3, r3, #17
10049fc6:	429a      	cmp	r2, r3
10049fc8:	d126      	bne.n	1004a018 <I2C_Slave_ISR_DMA+0x1b0>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
10049fca:	2217      	movs	r2, #23
10049fcc:	18bb      	adds	r3, r7, r2
10049fce:	781b      	ldrb	r3, [r3, #0]
10049fd0:	2b21      	cmp	r3, #33	@ 0x21
10049fd2:	d003      	beq.n	10049fdc <I2C_Slave_ISR_DMA+0x174>
10049fd4:	18bb      	adds	r3, r7, r2
10049fd6:	781b      	ldrb	r3, [r3, #0]
10049fd8:	2b29      	cmp	r3, #41	@ 0x29
10049fda:	d103      	bne.n	10049fe4 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
10049fdc:	68fb      	ldr	r3, [r7, #12]
10049fde:	2221      	movs	r2, #33	@ 0x21
10049fe0:	631a      	str	r2, [r3, #48]	@ 0x30
10049fe2:	e00b      	b.n	10049ffc <I2C_Slave_ISR_DMA+0x194>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
10049fe4:	2217      	movs	r2, #23
10049fe6:	18bb      	adds	r3, r7, r2
10049fe8:	781b      	ldrb	r3, [r3, #0]
10049fea:	2b22      	cmp	r3, #34	@ 0x22
10049fec:	d003      	beq.n	10049ff6 <I2C_Slave_ISR_DMA+0x18e>
10049fee:	18bb      	adds	r3, r7, r2
10049ff0:	781b      	ldrb	r3, [r3, #0]
10049ff2:	2b2a      	cmp	r3, #42	@ 0x2a
10049ff4:	d102      	bne.n	10049ffc <I2C_Slave_ISR_DMA+0x194>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
10049ff6:	68fb      	ldr	r3, [r7, #12]
10049ff8:	2222      	movs	r2, #34	@ 0x22
10049ffa:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
10049ffc:	68fb      	ldr	r3, [r7, #12]
10049ffe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004a000:	68fb      	ldr	r3, [r7, #12]
1004a002:	0011      	movs	r1, r2
1004a004:	0018      	movs	r0, r3
1004a006:	f000 fc2f 	bl	1004a868 <I2C_ITError>
      if (treatdmanack == 1U)
1004a00a:	e005      	b.n	1004a018 <I2C_Slave_ISR_DMA+0x1b0>
1004a00c:	e004      	b.n	1004a018 <I2C_Slave_ISR_DMA+0x1b0>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004a00e:	68fb      	ldr	r3, [r7, #12]
1004a010:	681b      	ldr	r3, [r3, #0]
1004a012:	2210      	movs	r2, #16
1004a014:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
1004a016:	e013      	b.n	1004a040 <I2C_Slave_ISR_DMA+0x1d8>
      if (treatdmanack == 1U)
1004a018:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
1004a01a:	e011      	b.n	1004a040 <I2C_Slave_ISR_DMA+0x1d8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
1004a01c:	68bb      	ldr	r3, [r7, #8]
1004a01e:	08db      	lsrs	r3, r3, #3
1004a020:	001a      	movs	r2, r3
1004a022:	2301      	movs	r3, #1
1004a024:	4013      	ands	r3, r2
1004a026:	d00b      	beq.n	1004a040 <I2C_Slave_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
1004a028:	687b      	ldr	r3, [r7, #4]
1004a02a:	08db      	lsrs	r3, r3, #3
1004a02c:	001a      	movs	r2, r3
1004a02e:	2301      	movs	r3, #1
1004a030:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
1004a032:	d005      	beq.n	1004a040 <I2C_Slave_ISR_DMA+0x1d8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
1004a034:	68ba      	ldr	r2, [r7, #8]
1004a036:	68fb      	ldr	r3, [r7, #12]
1004a038:	0011      	movs	r1, r2
1004a03a:	0018      	movs	r0, r3
1004a03c:	f000 f80c 	bl	1004a058 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
1004a040:	68fb      	ldr	r3, [r7, #12]
1004a042:	2240      	movs	r2, #64	@ 0x40
1004a044:	2100      	movs	r1, #0
1004a046:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004a048:	2300      	movs	r3, #0
}
1004a04a:	0018      	movs	r0, r3
1004a04c:	46bd      	mov	sp, r7
1004a04e:	b008      	add	sp, #32
1004a050:	bd80      	pop	{r7, pc}
1004a052:	46c0      	nop			@ (mov r8, r8)
1004a054:	ffff0000 	.word	0xffff0000

1004a058 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
1004a058:	b5b0      	push	{r4, r5, r7, lr}
1004a05a:	b084      	sub	sp, #16
1004a05c:	af00      	add	r7, sp, #0
1004a05e:	6078      	str	r0, [r7, #4]
1004a060:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
1004a062:	687b      	ldr	r3, [r7, #4]
1004a064:	2241      	movs	r2, #65	@ 0x41
1004a066:	5c9b      	ldrb	r3, [r3, r2]
1004a068:	b2db      	uxtb	r3, r3
1004a06a:	001a      	movs	r2, r3
1004a06c:	2328      	movs	r3, #40	@ 0x28
1004a06e:	4013      	ands	r3, r2
1004a070:	2b28      	cmp	r3, #40	@ 0x28
1004a072:	d000      	beq.n	1004a076 <I2C_ITAddrCplt+0x1e>
1004a074:	e088      	b.n	1004a188 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
1004a076:	687b      	ldr	r3, [r7, #4]
1004a078:	681b      	ldr	r3, [r3, #0]
1004a07a:	699b      	ldr	r3, [r3, #24]
1004a07c:	0c1b      	lsrs	r3, r3, #16
1004a07e:	b2da      	uxtb	r2, r3
1004a080:	250f      	movs	r5, #15
1004a082:	197b      	adds	r3, r7, r5
1004a084:	2101      	movs	r1, #1
1004a086:	400a      	ands	r2, r1
1004a088:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
1004a08a:	687b      	ldr	r3, [r7, #4]
1004a08c:	681b      	ldr	r3, [r3, #0]
1004a08e:	699b      	ldr	r3, [r3, #24]
1004a090:	0c1b      	lsrs	r3, r3, #16
1004a092:	b29a      	uxth	r2, r3
1004a094:	200c      	movs	r0, #12
1004a096:	183b      	adds	r3, r7, r0
1004a098:	21fe      	movs	r1, #254	@ 0xfe
1004a09a:	400a      	ands	r2, r1
1004a09c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
1004a09e:	687b      	ldr	r3, [r7, #4]
1004a0a0:	681b      	ldr	r3, [r3, #0]
1004a0a2:	689b      	ldr	r3, [r3, #8]
1004a0a4:	b29a      	uxth	r2, r3
1004a0a6:	240a      	movs	r4, #10
1004a0a8:	193b      	adds	r3, r7, r4
1004a0aa:	0592      	lsls	r2, r2, #22
1004a0ac:	0d92      	lsrs	r2, r2, #22
1004a0ae:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
1004a0b0:	687b      	ldr	r3, [r7, #4]
1004a0b2:	681b      	ldr	r3, [r3, #0]
1004a0b4:	68db      	ldr	r3, [r3, #12]
1004a0b6:	b29a      	uxth	r2, r3
1004a0b8:	2308      	movs	r3, #8
1004a0ba:	18fb      	adds	r3, r7, r3
1004a0bc:	21fe      	movs	r1, #254	@ 0xfe
1004a0be:	400a      	ands	r2, r1
1004a0c0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
1004a0c2:	687b      	ldr	r3, [r7, #4]
1004a0c4:	68db      	ldr	r3, [r3, #12]
1004a0c6:	2b02      	cmp	r3, #2
1004a0c8:	d148      	bne.n	1004a15c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
1004a0ca:	0021      	movs	r1, r4
1004a0cc:	187b      	adds	r3, r7, r1
1004a0ce:	881b      	ldrh	r3, [r3, #0]
1004a0d0:	09db      	lsrs	r3, r3, #7
1004a0d2:	b29a      	uxth	r2, r3
1004a0d4:	183b      	adds	r3, r7, r0
1004a0d6:	881b      	ldrh	r3, [r3, #0]
1004a0d8:	4053      	eors	r3, r2
1004a0da:	b29b      	uxth	r3, r3
1004a0dc:	001a      	movs	r2, r3
1004a0de:	2306      	movs	r3, #6
1004a0e0:	4013      	ands	r3, r2
1004a0e2:	d120      	bne.n	1004a126 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
1004a0e4:	183b      	adds	r3, r7, r0
1004a0e6:	187a      	adds	r2, r7, r1
1004a0e8:	8812      	ldrh	r2, [r2, #0]
1004a0ea:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
1004a0ec:	687b      	ldr	r3, [r7, #4]
1004a0ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004a0f0:	1c5a      	adds	r2, r3, #1
1004a0f2:	687b      	ldr	r3, [r7, #4]
1004a0f4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
1004a0f6:	687b      	ldr	r3, [r7, #4]
1004a0f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004a0fa:	2b02      	cmp	r3, #2
1004a0fc:	d14c      	bne.n	1004a198 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
1004a0fe:	687b      	ldr	r3, [r7, #4]
1004a100:	2200      	movs	r2, #0
1004a102:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
1004a104:	687b      	ldr	r3, [r7, #4]
1004a106:	681b      	ldr	r3, [r3, #0]
1004a108:	2208      	movs	r2, #8
1004a10a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
1004a10c:	687b      	ldr	r3, [r7, #4]
1004a10e:	2240      	movs	r2, #64	@ 0x40
1004a110:	2100      	movs	r1, #0
1004a112:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
1004a114:	183b      	adds	r3, r7, r0
1004a116:	881a      	ldrh	r2, [r3, #0]
1004a118:	197b      	adds	r3, r7, r5
1004a11a:	7819      	ldrb	r1, [r3, #0]
1004a11c:	687b      	ldr	r3, [r7, #4]
1004a11e:	0018      	movs	r0, r3
1004a120:	f7ff f9e8 	bl	100494f4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
1004a124:	e038      	b.n	1004a198 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
1004a126:	240c      	movs	r4, #12
1004a128:	193b      	adds	r3, r7, r4
1004a12a:	2208      	movs	r2, #8
1004a12c:	18ba      	adds	r2, r7, r2
1004a12e:	8812      	ldrh	r2, [r2, #0]
1004a130:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
1004a132:	2380      	movs	r3, #128	@ 0x80
1004a134:	021a      	lsls	r2, r3, #8
1004a136:	687b      	ldr	r3, [r7, #4]
1004a138:	0011      	movs	r1, r2
1004a13a:	0018      	movs	r0, r3
1004a13c:	f000 fdc4 	bl	1004acc8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
1004a140:	687b      	ldr	r3, [r7, #4]
1004a142:	2240      	movs	r2, #64	@ 0x40
1004a144:	2100      	movs	r1, #0
1004a146:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
1004a148:	193b      	adds	r3, r7, r4
1004a14a:	881a      	ldrh	r2, [r3, #0]
1004a14c:	230f      	movs	r3, #15
1004a14e:	18fb      	adds	r3, r7, r3
1004a150:	7819      	ldrb	r1, [r3, #0]
1004a152:	687b      	ldr	r3, [r7, #4]
1004a154:	0018      	movs	r0, r3
1004a156:	f7ff f9cd 	bl	100494f4 <HAL_I2C_AddrCallback>
}
1004a15a:	e01d      	b.n	1004a198 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
1004a15c:	2380      	movs	r3, #128	@ 0x80
1004a15e:	021a      	lsls	r2, r3, #8
1004a160:	687b      	ldr	r3, [r7, #4]
1004a162:	0011      	movs	r1, r2
1004a164:	0018      	movs	r0, r3
1004a166:	f000 fdaf 	bl	1004acc8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
1004a16a:	687b      	ldr	r3, [r7, #4]
1004a16c:	2240      	movs	r2, #64	@ 0x40
1004a16e:	2100      	movs	r1, #0
1004a170:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
1004a172:	230c      	movs	r3, #12
1004a174:	18fb      	adds	r3, r7, r3
1004a176:	881a      	ldrh	r2, [r3, #0]
1004a178:	230f      	movs	r3, #15
1004a17a:	18fb      	adds	r3, r7, r3
1004a17c:	7819      	ldrb	r1, [r3, #0]
1004a17e:	687b      	ldr	r3, [r7, #4]
1004a180:	0018      	movs	r0, r3
1004a182:	f7ff f9b7 	bl	100494f4 <HAL_I2C_AddrCallback>
}
1004a186:	e007      	b.n	1004a198 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
1004a188:	687b      	ldr	r3, [r7, #4]
1004a18a:	681b      	ldr	r3, [r3, #0]
1004a18c:	2208      	movs	r2, #8
1004a18e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
1004a190:	687b      	ldr	r3, [r7, #4]
1004a192:	2240      	movs	r2, #64	@ 0x40
1004a194:	2100      	movs	r1, #0
1004a196:	5499      	strb	r1, [r3, r2]
}
1004a198:	46c0      	nop			@ (mov r8, r8)
1004a19a:	46bd      	mov	sp, r7
1004a19c:	b004      	add	sp, #16
1004a19e:	bdb0      	pop	{r4, r5, r7, pc}

1004a1a0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
1004a1a0:	b580      	push	{r7, lr}
1004a1a2:	b082      	sub	sp, #8
1004a1a4:	af00      	add	r7, sp, #0
1004a1a6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
1004a1a8:	687b      	ldr	r3, [r7, #4]
1004a1aa:	2242      	movs	r2, #66	@ 0x42
1004a1ac:	2100      	movs	r1, #0
1004a1ae:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
1004a1b0:	687b      	ldr	r3, [r7, #4]
1004a1b2:	2241      	movs	r2, #65	@ 0x41
1004a1b4:	5c9b      	ldrb	r3, [r3, r2]
1004a1b6:	b2db      	uxtb	r3, r3
1004a1b8:	2b21      	cmp	r3, #33	@ 0x21
1004a1ba:	d117      	bne.n	1004a1ec <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
1004a1bc:	687b      	ldr	r3, [r7, #4]
1004a1be:	2241      	movs	r2, #65	@ 0x41
1004a1c0:	2120      	movs	r1, #32
1004a1c2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
1004a1c4:	687b      	ldr	r3, [r7, #4]
1004a1c6:	2211      	movs	r2, #17
1004a1c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
1004a1ca:	687b      	ldr	r3, [r7, #4]
1004a1cc:	2200      	movs	r2, #0
1004a1ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
1004a1d0:	687b      	ldr	r3, [r7, #4]
1004a1d2:	2101      	movs	r1, #1
1004a1d4:	0018      	movs	r0, r3
1004a1d6:	f000 fd77 	bl	1004acc8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1004a1da:	687b      	ldr	r3, [r7, #4]
1004a1dc:	2240      	movs	r2, #64	@ 0x40
1004a1de:	2100      	movs	r1, #0
1004a1e0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
1004a1e2:	687b      	ldr	r3, [r7, #4]
1004a1e4:	0018      	movs	r0, r3
1004a1e6:	f7ff f965 	bl	100494b4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
1004a1ea:	e016      	b.n	1004a21a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
1004a1ec:	687b      	ldr	r3, [r7, #4]
1004a1ee:	2241      	movs	r2, #65	@ 0x41
1004a1f0:	2120      	movs	r1, #32
1004a1f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
1004a1f4:	687b      	ldr	r3, [r7, #4]
1004a1f6:	2212      	movs	r2, #18
1004a1f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
1004a1fa:	687b      	ldr	r3, [r7, #4]
1004a1fc:	2200      	movs	r2, #0
1004a1fe:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
1004a200:	687b      	ldr	r3, [r7, #4]
1004a202:	2102      	movs	r1, #2
1004a204:	0018      	movs	r0, r3
1004a206:	f000 fd5f 	bl	1004acc8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
1004a20a:	687b      	ldr	r3, [r7, #4]
1004a20c:	2240      	movs	r2, #64	@ 0x40
1004a20e:	2100      	movs	r1, #0
1004a210:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
1004a212:	687b      	ldr	r3, [r7, #4]
1004a214:	0018      	movs	r0, r3
1004a216:	f7ff f955 	bl	100494c4 <HAL_I2C_MasterRxCpltCallback>
}
1004a21a:	46c0      	nop			@ (mov r8, r8)
1004a21c:	46bd      	mov	sp, r7
1004a21e:	b002      	add	sp, #8
1004a220:	bd80      	pop	{r7, pc}
	...

1004a224 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
1004a224:	b580      	push	{r7, lr}
1004a226:	b084      	sub	sp, #16
1004a228:	af00      	add	r7, sp, #0
1004a22a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
1004a22c:	687b      	ldr	r3, [r7, #4]
1004a22e:	681b      	ldr	r3, [r3, #0]
1004a230:	681b      	ldr	r3, [r3, #0]
1004a232:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
1004a234:	687b      	ldr	r3, [r7, #4]
1004a236:	2242      	movs	r2, #66	@ 0x42
1004a238:	2100      	movs	r1, #0
1004a23a:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
1004a23c:	68fb      	ldr	r3, [r7, #12]
1004a23e:	0b9b      	lsrs	r3, r3, #14
1004a240:	001a      	movs	r2, r3
1004a242:	2301      	movs	r3, #1
1004a244:	4013      	ands	r3, r2
1004a246:	d008      	beq.n	1004a25a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
1004a248:	687b      	ldr	r3, [r7, #4]
1004a24a:	681b      	ldr	r3, [r3, #0]
1004a24c:	681a      	ldr	r2, [r3, #0]
1004a24e:	687b      	ldr	r3, [r7, #4]
1004a250:	681b      	ldr	r3, [r3, #0]
1004a252:	4925      	ldr	r1, [pc, #148]	@ (1004a2e8 <I2C_ITSlaveSeqCplt+0xc4>)
1004a254:	400a      	ands	r2, r1
1004a256:	601a      	str	r2, [r3, #0]
1004a258:	e00d      	b.n	1004a276 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
1004a25a:	68fb      	ldr	r3, [r7, #12]
1004a25c:	0bdb      	lsrs	r3, r3, #15
1004a25e:	001a      	movs	r2, r3
1004a260:	2301      	movs	r3, #1
1004a262:	4013      	ands	r3, r2
1004a264:	d007      	beq.n	1004a276 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
1004a266:	687b      	ldr	r3, [r7, #4]
1004a268:	681b      	ldr	r3, [r3, #0]
1004a26a:	681a      	ldr	r2, [r3, #0]
1004a26c:	687b      	ldr	r3, [r7, #4]
1004a26e:	681b      	ldr	r3, [r3, #0]
1004a270:	491e      	ldr	r1, [pc, #120]	@ (1004a2ec <I2C_ITSlaveSeqCplt+0xc8>)
1004a272:	400a      	ands	r2, r1
1004a274:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
1004a276:	687b      	ldr	r3, [r7, #4]
1004a278:	2241      	movs	r2, #65	@ 0x41
1004a27a:	5c9b      	ldrb	r3, [r3, r2]
1004a27c:	b2db      	uxtb	r3, r3
1004a27e:	2b29      	cmp	r3, #41	@ 0x29
1004a280:	d114      	bne.n	1004a2ac <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
1004a282:	687b      	ldr	r3, [r7, #4]
1004a284:	2241      	movs	r2, #65	@ 0x41
1004a286:	2128      	movs	r1, #40	@ 0x28
1004a288:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
1004a28a:	687b      	ldr	r3, [r7, #4]
1004a28c:	2221      	movs	r2, #33	@ 0x21
1004a28e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
1004a290:	687b      	ldr	r3, [r7, #4]
1004a292:	2101      	movs	r1, #1
1004a294:	0018      	movs	r0, r3
1004a296:	f000 fd17 	bl	1004acc8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1004a29a:	687b      	ldr	r3, [r7, #4]
1004a29c:	2240      	movs	r2, #64	@ 0x40
1004a29e:	2100      	movs	r1, #0
1004a2a0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
1004a2a2:	687b      	ldr	r3, [r7, #4]
1004a2a4:	0018      	movs	r0, r3
1004a2a6:	f7ff f915 	bl	100494d4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
1004a2aa:	e019      	b.n	1004a2e0 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
1004a2ac:	687b      	ldr	r3, [r7, #4]
1004a2ae:	2241      	movs	r2, #65	@ 0x41
1004a2b0:	5c9b      	ldrb	r3, [r3, r2]
1004a2b2:	b2db      	uxtb	r3, r3
1004a2b4:	2b2a      	cmp	r3, #42	@ 0x2a
1004a2b6:	d113      	bne.n	1004a2e0 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
1004a2b8:	687b      	ldr	r3, [r7, #4]
1004a2ba:	2241      	movs	r2, #65	@ 0x41
1004a2bc:	2128      	movs	r1, #40	@ 0x28
1004a2be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
1004a2c0:	687b      	ldr	r3, [r7, #4]
1004a2c2:	2222      	movs	r2, #34	@ 0x22
1004a2c4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
1004a2c6:	687b      	ldr	r3, [r7, #4]
1004a2c8:	2102      	movs	r1, #2
1004a2ca:	0018      	movs	r0, r3
1004a2cc:	f000 fcfc 	bl	1004acc8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
1004a2d0:	687b      	ldr	r3, [r7, #4]
1004a2d2:	2240      	movs	r2, #64	@ 0x40
1004a2d4:	2100      	movs	r1, #0
1004a2d6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
1004a2d8:	687b      	ldr	r3, [r7, #4]
1004a2da:	0018      	movs	r0, r3
1004a2dc:	f7ff f902 	bl	100494e4 <HAL_I2C_SlaveRxCpltCallback>
}
1004a2e0:	46c0      	nop			@ (mov r8, r8)
1004a2e2:	46bd      	mov	sp, r7
1004a2e4:	b004      	add	sp, #16
1004a2e6:	bd80      	pop	{r7, pc}
1004a2e8:	ffffbfff 	.word	0xffffbfff
1004a2ec:	ffff7fff 	.word	0xffff7fff

1004a2f0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
1004a2f0:	b580      	push	{r7, lr}
1004a2f2:	b086      	sub	sp, #24
1004a2f4:	af00      	add	r7, sp, #0
1004a2f6:	6078      	str	r0, [r7, #4]
1004a2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
1004a2fa:	683b      	ldr	r3, [r7, #0]
1004a2fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
1004a2fe:	687b      	ldr	r3, [r7, #4]
1004a300:	681b      	ldr	r3, [r3, #0]
1004a302:	2220      	movs	r2, #32
1004a304:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
1004a306:	687b      	ldr	r3, [r7, #4]
1004a308:	2241      	movs	r2, #65	@ 0x41
1004a30a:	5c9b      	ldrb	r3, [r3, r2]
1004a30c:	b2db      	uxtb	r3, r3
1004a30e:	2b21      	cmp	r3, #33	@ 0x21
1004a310:	d108      	bne.n	1004a324 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
1004a312:	687b      	ldr	r3, [r7, #4]
1004a314:	2101      	movs	r1, #1
1004a316:	0018      	movs	r0, r3
1004a318:	f000 fcd6 	bl	1004acc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
1004a31c:	687b      	ldr	r3, [r7, #4]
1004a31e:	2211      	movs	r2, #17
1004a320:	631a      	str	r2, [r3, #48]	@ 0x30
1004a322:	e00d      	b.n	1004a340 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
1004a324:	687b      	ldr	r3, [r7, #4]
1004a326:	2241      	movs	r2, #65	@ 0x41
1004a328:	5c9b      	ldrb	r3, [r3, r2]
1004a32a:	b2db      	uxtb	r3, r3
1004a32c:	2b22      	cmp	r3, #34	@ 0x22
1004a32e:	d107      	bne.n	1004a340 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
1004a330:	687b      	ldr	r3, [r7, #4]
1004a332:	2102      	movs	r1, #2
1004a334:	0018      	movs	r0, r3
1004a336:	f000 fcc7 	bl	1004acc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
1004a33a:	687b      	ldr	r3, [r7, #4]
1004a33c:	2212      	movs	r2, #18
1004a33e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
1004a340:	687b      	ldr	r3, [r7, #4]
1004a342:	681b      	ldr	r3, [r3, #0]
1004a344:	685a      	ldr	r2, [r3, #4]
1004a346:	687b      	ldr	r3, [r7, #4]
1004a348:	681b      	ldr	r3, [r3, #0]
1004a34a:	4950      	ldr	r1, [pc, #320]	@ (1004a48c <I2C_ITMasterCplt+0x19c>)
1004a34c:	400a      	ands	r2, r1
1004a34e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
1004a350:	687b      	ldr	r3, [r7, #4]
1004a352:	2200      	movs	r2, #0
1004a354:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
1004a356:	687b      	ldr	r3, [r7, #4]
1004a358:	4a4d      	ldr	r2, [pc, #308]	@ (1004a490 <I2C_ITMasterCplt+0x1a0>)
1004a35a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
1004a35c:	697b      	ldr	r3, [r7, #20]
1004a35e:	091b      	lsrs	r3, r3, #4
1004a360:	001a      	movs	r2, r3
1004a362:	2301      	movs	r3, #1
1004a364:	4013      	ands	r3, r2
1004a366:	d009      	beq.n	1004a37c <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004a368:	687b      	ldr	r3, [r7, #4]
1004a36a:	681b      	ldr	r3, [r3, #0]
1004a36c:	2210      	movs	r2, #16
1004a36e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004a370:	687b      	ldr	r3, [r7, #4]
1004a372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004a374:	2204      	movs	r2, #4
1004a376:	431a      	orrs	r2, r3
1004a378:	687b      	ldr	r3, [r7, #4]
1004a37a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
1004a37c:	687b      	ldr	r3, [r7, #4]
1004a37e:	2241      	movs	r2, #65	@ 0x41
1004a380:	5c9b      	ldrb	r3, [r3, r2]
1004a382:	b2db      	uxtb	r3, r3
1004a384:	2b60      	cmp	r3, #96	@ 0x60
1004a386:	d10b      	bne.n	1004a3a0 <I2C_ITMasterCplt+0xb0>
1004a388:	697b      	ldr	r3, [r7, #20]
1004a38a:	089b      	lsrs	r3, r3, #2
1004a38c:	001a      	movs	r2, r3
1004a38e:	2301      	movs	r3, #1
1004a390:	4013      	ands	r3, r2
1004a392:	d005      	beq.n	1004a3a0 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
1004a394:	687b      	ldr	r3, [r7, #4]
1004a396:	681b      	ldr	r3, [r3, #0]
1004a398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004a39a:	b2db      	uxtb	r3, r3
1004a39c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
1004a39e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
1004a3a0:	687b      	ldr	r3, [r7, #4]
1004a3a2:	0018      	movs	r0, r3
1004a3a4:	f000 fb8b 	bl	1004aabe <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
1004a3a8:	687b      	ldr	r3, [r7, #4]
1004a3aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004a3ac:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
1004a3ae:	687b      	ldr	r3, [r7, #4]
1004a3b0:	2241      	movs	r2, #65	@ 0x41
1004a3b2:	5c9b      	ldrb	r3, [r3, r2]
1004a3b4:	b2db      	uxtb	r3, r3
1004a3b6:	2b60      	cmp	r3, #96	@ 0x60
1004a3b8:	d002      	beq.n	1004a3c0 <I2C_ITMasterCplt+0xd0>
1004a3ba:	693b      	ldr	r3, [r7, #16]
1004a3bc:	2b00      	cmp	r3, #0
1004a3be:	d007      	beq.n	1004a3d0 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
1004a3c0:	687b      	ldr	r3, [r7, #4]
1004a3c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004a3c4:	687b      	ldr	r3, [r7, #4]
1004a3c6:	0011      	movs	r1, r2
1004a3c8:	0018      	movs	r0, r3
1004a3ca:	f000 fa4d 	bl	1004a868 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
1004a3ce:	e058      	b.n	1004a482 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
1004a3d0:	687b      	ldr	r3, [r7, #4]
1004a3d2:	2241      	movs	r2, #65	@ 0x41
1004a3d4:	5c9b      	ldrb	r3, [r3, r2]
1004a3d6:	b2db      	uxtb	r3, r3
1004a3d8:	2b21      	cmp	r3, #33	@ 0x21
1004a3da:	d126      	bne.n	1004a42a <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
1004a3dc:	687b      	ldr	r3, [r7, #4]
1004a3de:	2241      	movs	r2, #65	@ 0x41
1004a3e0:	2120      	movs	r1, #32
1004a3e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
1004a3e4:	687b      	ldr	r3, [r7, #4]
1004a3e6:	2200      	movs	r2, #0
1004a3e8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
1004a3ea:	687b      	ldr	r3, [r7, #4]
1004a3ec:	2242      	movs	r2, #66	@ 0x42
1004a3ee:	5c9b      	ldrb	r3, [r3, r2]
1004a3f0:	b2db      	uxtb	r3, r3
1004a3f2:	2b40      	cmp	r3, #64	@ 0x40
1004a3f4:	d10c      	bne.n	1004a410 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
1004a3f6:	687b      	ldr	r3, [r7, #4]
1004a3f8:	2242      	movs	r2, #66	@ 0x42
1004a3fa:	2100      	movs	r1, #0
1004a3fc:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
1004a3fe:	687b      	ldr	r3, [r7, #4]
1004a400:	2240      	movs	r2, #64	@ 0x40
1004a402:	2100      	movs	r1, #0
1004a404:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
1004a406:	687b      	ldr	r3, [r7, #4]
1004a408:	0018      	movs	r0, r3
1004a40a:	f7fa fedd 	bl	100451c8 <HAL_I2C_MemTxCpltCallback>
}
1004a40e:	e038      	b.n	1004a482 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
1004a410:	687b      	ldr	r3, [r7, #4]
1004a412:	2242      	movs	r2, #66	@ 0x42
1004a414:	2100      	movs	r1, #0
1004a416:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
1004a418:	687b      	ldr	r3, [r7, #4]
1004a41a:	2240      	movs	r2, #64	@ 0x40
1004a41c:	2100      	movs	r1, #0
1004a41e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
1004a420:	687b      	ldr	r3, [r7, #4]
1004a422:	0018      	movs	r0, r3
1004a424:	f7ff f846 	bl	100494b4 <HAL_I2C_MasterTxCpltCallback>
}
1004a428:	e02b      	b.n	1004a482 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
1004a42a:	687b      	ldr	r3, [r7, #4]
1004a42c:	2241      	movs	r2, #65	@ 0x41
1004a42e:	5c9b      	ldrb	r3, [r3, r2]
1004a430:	b2db      	uxtb	r3, r3
1004a432:	2b22      	cmp	r3, #34	@ 0x22
1004a434:	d125      	bne.n	1004a482 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
1004a436:	687b      	ldr	r3, [r7, #4]
1004a438:	2241      	movs	r2, #65	@ 0x41
1004a43a:	2120      	movs	r1, #32
1004a43c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
1004a43e:	687b      	ldr	r3, [r7, #4]
1004a440:	2200      	movs	r2, #0
1004a442:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
1004a444:	687b      	ldr	r3, [r7, #4]
1004a446:	2242      	movs	r2, #66	@ 0x42
1004a448:	5c9b      	ldrb	r3, [r3, r2]
1004a44a:	b2db      	uxtb	r3, r3
1004a44c:	2b40      	cmp	r3, #64	@ 0x40
1004a44e:	d10c      	bne.n	1004a46a <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
1004a450:	687b      	ldr	r3, [r7, #4]
1004a452:	2242      	movs	r2, #66	@ 0x42
1004a454:	2100      	movs	r1, #0
1004a456:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
1004a458:	687b      	ldr	r3, [r7, #4]
1004a45a:	2240      	movs	r2, #64	@ 0x40
1004a45c:	2100      	movs	r1, #0
1004a45e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
1004a460:	687b      	ldr	r3, [r7, #4]
1004a462:	0018      	movs	r0, r3
1004a464:	f7fa fee6 	bl	10045234 <HAL_I2C_MemRxCpltCallback>
}
1004a468:	e00b      	b.n	1004a482 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
1004a46a:	687b      	ldr	r3, [r7, #4]
1004a46c:	2242      	movs	r2, #66	@ 0x42
1004a46e:	2100      	movs	r1, #0
1004a470:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
1004a472:	687b      	ldr	r3, [r7, #4]
1004a474:	2240      	movs	r2, #64	@ 0x40
1004a476:	2100      	movs	r1, #0
1004a478:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
1004a47a:	687b      	ldr	r3, [r7, #4]
1004a47c:	0018      	movs	r0, r3
1004a47e:	f7ff f821 	bl	100494c4 <HAL_I2C_MasterRxCpltCallback>
}
1004a482:	46c0      	nop			@ (mov r8, r8)
1004a484:	46bd      	mov	sp, r7
1004a486:	b006      	add	sp, #24
1004a488:	bd80      	pop	{r7, pc}
1004a48a:	46c0      	nop			@ (mov r8, r8)
1004a48c:	fe00e800 	.word	0xfe00e800
1004a490:	ffff0000 	.word	0xffff0000

1004a494 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
1004a494:	b580      	push	{r7, lr}
1004a496:	b086      	sub	sp, #24
1004a498:	af00      	add	r7, sp, #0
1004a49a:	6078      	str	r0, [r7, #4]
1004a49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
1004a49e:	687b      	ldr	r3, [r7, #4]
1004a4a0:	681b      	ldr	r3, [r3, #0]
1004a4a2:	681b      	ldr	r3, [r3, #0]
1004a4a4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
1004a4a6:	683b      	ldr	r3, [r7, #0]
1004a4a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
1004a4aa:	687b      	ldr	r3, [r7, #4]
1004a4ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004a4ae:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
1004a4b0:	200b      	movs	r0, #11
1004a4b2:	183b      	adds	r3, r7, r0
1004a4b4:	687a      	ldr	r2, [r7, #4]
1004a4b6:	2141      	movs	r1, #65	@ 0x41
1004a4b8:	5c52      	ldrb	r2, [r2, r1]
1004a4ba:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
1004a4bc:	687b      	ldr	r3, [r7, #4]
1004a4be:	681b      	ldr	r3, [r3, #0]
1004a4c0:	2220      	movs	r2, #32
1004a4c2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
1004a4c4:	183b      	adds	r3, r7, r0
1004a4c6:	781b      	ldrb	r3, [r3, #0]
1004a4c8:	2b21      	cmp	r3, #33	@ 0x21
1004a4ca:	d003      	beq.n	1004a4d4 <I2C_ITSlaveCplt+0x40>
1004a4cc:	183b      	adds	r3, r7, r0
1004a4ce:	781b      	ldrb	r3, [r3, #0]
1004a4d0:	2b29      	cmp	r3, #41	@ 0x29
1004a4d2:	d109      	bne.n	1004a4e8 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
1004a4d4:	4ab0      	ldr	r2, [pc, #704]	@ (1004a798 <I2C_ITSlaveCplt+0x304>)
1004a4d6:	687b      	ldr	r3, [r7, #4]
1004a4d8:	0011      	movs	r1, r2
1004a4da:	0018      	movs	r0, r3
1004a4dc:	f000 fbf4 	bl	1004acc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
1004a4e0:	687b      	ldr	r3, [r7, #4]
1004a4e2:	2221      	movs	r2, #33	@ 0x21
1004a4e4:	631a      	str	r2, [r3, #48]	@ 0x30
1004a4e6:	e020      	b.n	1004a52a <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
1004a4e8:	220b      	movs	r2, #11
1004a4ea:	18bb      	adds	r3, r7, r2
1004a4ec:	781b      	ldrb	r3, [r3, #0]
1004a4ee:	2b22      	cmp	r3, #34	@ 0x22
1004a4f0:	d003      	beq.n	1004a4fa <I2C_ITSlaveCplt+0x66>
1004a4f2:	18bb      	adds	r3, r7, r2
1004a4f4:	781b      	ldrb	r3, [r3, #0]
1004a4f6:	2b2a      	cmp	r3, #42	@ 0x2a
1004a4f8:	d109      	bne.n	1004a50e <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
1004a4fa:	4aa8      	ldr	r2, [pc, #672]	@ (1004a79c <I2C_ITSlaveCplt+0x308>)
1004a4fc:	687b      	ldr	r3, [r7, #4]
1004a4fe:	0011      	movs	r1, r2
1004a500:	0018      	movs	r0, r3
1004a502:	f000 fbe1 	bl	1004acc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
1004a506:	687b      	ldr	r3, [r7, #4]
1004a508:	2222      	movs	r2, #34	@ 0x22
1004a50a:	631a      	str	r2, [r3, #48]	@ 0x30
1004a50c:	e00d      	b.n	1004a52a <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
1004a50e:	230b      	movs	r3, #11
1004a510:	18fb      	adds	r3, r7, r3
1004a512:	781b      	ldrb	r3, [r3, #0]
1004a514:	2b28      	cmp	r3, #40	@ 0x28
1004a516:	d108      	bne.n	1004a52a <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
1004a518:	4aa1      	ldr	r2, [pc, #644]	@ (1004a7a0 <I2C_ITSlaveCplt+0x30c>)
1004a51a:	687b      	ldr	r3, [r7, #4]
1004a51c:	0011      	movs	r1, r2
1004a51e:	0018      	movs	r0, r3
1004a520:	f000 fbd2 	bl	1004acc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
1004a524:	687b      	ldr	r3, [r7, #4]
1004a526:	2200      	movs	r2, #0
1004a528:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
1004a52a:	687b      	ldr	r3, [r7, #4]
1004a52c:	681b      	ldr	r3, [r3, #0]
1004a52e:	685a      	ldr	r2, [r3, #4]
1004a530:	687b      	ldr	r3, [r7, #4]
1004a532:	681b      	ldr	r3, [r3, #0]
1004a534:	2180      	movs	r1, #128	@ 0x80
1004a536:	0209      	lsls	r1, r1, #8
1004a538:	430a      	orrs	r2, r1
1004a53a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
1004a53c:	687b      	ldr	r3, [r7, #4]
1004a53e:	681b      	ldr	r3, [r3, #0]
1004a540:	685a      	ldr	r2, [r3, #4]
1004a542:	687b      	ldr	r3, [r7, #4]
1004a544:	681b      	ldr	r3, [r3, #0]
1004a546:	4997      	ldr	r1, [pc, #604]	@ (1004a7a4 <I2C_ITSlaveCplt+0x310>)
1004a548:	400a      	ands	r2, r1
1004a54a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
1004a54c:	687b      	ldr	r3, [r7, #4]
1004a54e:	0018      	movs	r0, r3
1004a550:	f000 fab5 	bl	1004aabe <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
1004a554:	693b      	ldr	r3, [r7, #16]
1004a556:	0b9b      	lsrs	r3, r3, #14
1004a558:	001a      	movs	r2, r3
1004a55a:	2301      	movs	r3, #1
1004a55c:	4013      	ands	r3, r2
1004a55e:	d013      	beq.n	1004a588 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
1004a560:	687b      	ldr	r3, [r7, #4]
1004a562:	681b      	ldr	r3, [r3, #0]
1004a564:	681a      	ldr	r2, [r3, #0]
1004a566:	687b      	ldr	r3, [r7, #4]
1004a568:	681b      	ldr	r3, [r3, #0]
1004a56a:	498f      	ldr	r1, [pc, #572]	@ (1004a7a8 <I2C_ITSlaveCplt+0x314>)
1004a56c:	400a      	ands	r2, r1
1004a56e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
1004a570:	687b      	ldr	r3, [r7, #4]
1004a572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004a574:	2b00      	cmp	r3, #0
1004a576:	d020      	beq.n	1004a5ba <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
1004a578:	687b      	ldr	r3, [r7, #4]
1004a57a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004a57c:	681b      	ldr	r3, [r3, #0]
1004a57e:	685b      	ldr	r3, [r3, #4]
1004a580:	b29a      	uxth	r2, r3
1004a582:	687b      	ldr	r3, [r7, #4]
1004a584:	855a      	strh	r2, [r3, #42]	@ 0x2a
1004a586:	e018      	b.n	1004a5ba <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
1004a588:	693b      	ldr	r3, [r7, #16]
1004a58a:	0bdb      	lsrs	r3, r3, #15
1004a58c:	001a      	movs	r2, r3
1004a58e:	2301      	movs	r3, #1
1004a590:	4013      	ands	r3, r2
1004a592:	d012      	beq.n	1004a5ba <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
1004a594:	687b      	ldr	r3, [r7, #4]
1004a596:	681b      	ldr	r3, [r3, #0]
1004a598:	681a      	ldr	r2, [r3, #0]
1004a59a:	687b      	ldr	r3, [r7, #4]
1004a59c:	681b      	ldr	r3, [r3, #0]
1004a59e:	4983      	ldr	r1, [pc, #524]	@ (1004a7ac <I2C_ITSlaveCplt+0x318>)
1004a5a0:	400a      	ands	r2, r1
1004a5a2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
1004a5a4:	687b      	ldr	r3, [r7, #4]
1004a5a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004a5a8:	2b00      	cmp	r3, #0
1004a5aa:	d006      	beq.n	1004a5ba <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
1004a5ac:	687b      	ldr	r3, [r7, #4]
1004a5ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004a5b0:	681b      	ldr	r3, [r3, #0]
1004a5b2:	685b      	ldr	r3, [r3, #4]
1004a5b4:	b29a      	uxth	r2, r3
1004a5b6:	687b      	ldr	r3, [r7, #4]
1004a5b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
1004a5ba:	697b      	ldr	r3, [r7, #20]
1004a5bc:	089b      	lsrs	r3, r3, #2
1004a5be:	001a      	movs	r2, r3
1004a5c0:	2301      	movs	r3, #1
1004a5c2:	4013      	ands	r3, r2
1004a5c4:	d020      	beq.n	1004a608 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
1004a5c6:	697b      	ldr	r3, [r7, #20]
1004a5c8:	2204      	movs	r2, #4
1004a5ca:	4393      	bics	r3, r2
1004a5cc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
1004a5ce:	687b      	ldr	r3, [r7, #4]
1004a5d0:	681b      	ldr	r3, [r3, #0]
1004a5d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004a5d4:	687b      	ldr	r3, [r7, #4]
1004a5d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004a5d8:	b2d2      	uxtb	r2, r2
1004a5da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
1004a5dc:	687b      	ldr	r3, [r7, #4]
1004a5de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004a5e0:	1c5a      	adds	r2, r3, #1
1004a5e2:	687b      	ldr	r3, [r7, #4]
1004a5e4:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
1004a5e6:	687b      	ldr	r3, [r7, #4]
1004a5e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004a5ea:	2b00      	cmp	r3, #0
1004a5ec:	d00c      	beq.n	1004a608 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
1004a5ee:	687b      	ldr	r3, [r7, #4]
1004a5f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004a5f2:	3b01      	subs	r3, #1
1004a5f4:	b29a      	uxth	r2, r3
1004a5f6:	687b      	ldr	r3, [r7, #4]
1004a5f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
1004a5fa:	687b      	ldr	r3, [r7, #4]
1004a5fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004a5fe:	b29b      	uxth	r3, r3
1004a600:	3b01      	subs	r3, #1
1004a602:	b29a      	uxth	r2, r3
1004a604:	687b      	ldr	r3, [r7, #4]
1004a606:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
1004a608:	687b      	ldr	r3, [r7, #4]
1004a60a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004a60c:	b29b      	uxth	r3, r3
1004a60e:	2b00      	cmp	r3, #0
1004a610:	d005      	beq.n	1004a61e <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004a612:	687b      	ldr	r3, [r7, #4]
1004a614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004a616:	2204      	movs	r2, #4
1004a618:	431a      	orrs	r2, r3
1004a61a:	687b      	ldr	r3, [r7, #4]
1004a61c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
1004a61e:	697b      	ldr	r3, [r7, #20]
1004a620:	091b      	lsrs	r3, r3, #4
1004a622:	001a      	movs	r2, r3
1004a624:	2301      	movs	r3, #1
1004a626:	4013      	ands	r3, r2
1004a628:	d051      	beq.n	1004a6ce <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
1004a62a:	693b      	ldr	r3, [r7, #16]
1004a62c:	091b      	lsrs	r3, r3, #4
1004a62e:	001a      	movs	r2, r3
1004a630:	2301      	movs	r3, #1
1004a632:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
1004a634:	d04b      	beq.n	1004a6ce <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
1004a636:	687b      	ldr	r3, [r7, #4]
1004a638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004a63a:	b29b      	uxth	r3, r3
1004a63c:	2b00      	cmp	r3, #0
1004a63e:	d12d      	bne.n	1004a69c <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
1004a640:	687b      	ldr	r3, [r7, #4]
1004a642:	2241      	movs	r2, #65	@ 0x41
1004a644:	5c9b      	ldrb	r3, [r3, r2]
1004a646:	b2db      	uxtb	r3, r3
1004a648:	2b28      	cmp	r3, #40	@ 0x28
1004a64a:	d10b      	bne.n	1004a664 <I2C_ITSlaveCplt+0x1d0>
1004a64c:	68fa      	ldr	r2, [r7, #12]
1004a64e:	2380      	movs	r3, #128	@ 0x80
1004a650:	049b      	lsls	r3, r3, #18
1004a652:	429a      	cmp	r2, r3
1004a654:	d106      	bne.n	1004a664 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
1004a656:	697a      	ldr	r2, [r7, #20]
1004a658:	687b      	ldr	r3, [r7, #4]
1004a65a:	0011      	movs	r1, r2
1004a65c:	0018      	movs	r0, r3
1004a65e:	f000 f8a9 	bl	1004a7b4 <I2C_ITListenCplt>
1004a662:	e034      	b.n	1004a6ce <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
1004a664:	687b      	ldr	r3, [r7, #4]
1004a666:	2241      	movs	r2, #65	@ 0x41
1004a668:	5c9b      	ldrb	r3, [r3, r2]
1004a66a:	b2db      	uxtb	r3, r3
1004a66c:	2b29      	cmp	r3, #41	@ 0x29
1004a66e:	d110      	bne.n	1004a692 <I2C_ITSlaveCplt+0x1fe>
1004a670:	68fb      	ldr	r3, [r7, #12]
1004a672:	4a4f      	ldr	r2, [pc, #316]	@ (1004a7b0 <I2C_ITSlaveCplt+0x31c>)
1004a674:	4293      	cmp	r3, r2
1004a676:	d00c      	beq.n	1004a692 <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004a678:	687b      	ldr	r3, [r7, #4]
1004a67a:	681b      	ldr	r3, [r3, #0]
1004a67c:	2210      	movs	r2, #16
1004a67e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
1004a680:	687b      	ldr	r3, [r7, #4]
1004a682:	0018      	movs	r0, r3
1004a684:	f000 fa1b 	bl	1004aabe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
1004a688:	687b      	ldr	r3, [r7, #4]
1004a68a:	0018      	movs	r0, r3
1004a68c:	f7ff fdca 	bl	1004a224 <I2C_ITSlaveSeqCplt>
1004a690:	e01d      	b.n	1004a6ce <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004a692:	687b      	ldr	r3, [r7, #4]
1004a694:	681b      	ldr	r3, [r3, #0]
1004a696:	2210      	movs	r2, #16
1004a698:	61da      	str	r2, [r3, #28]
1004a69a:	e018      	b.n	1004a6ce <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004a69c:	687b      	ldr	r3, [r7, #4]
1004a69e:	681b      	ldr	r3, [r3, #0]
1004a6a0:	2210      	movs	r2, #16
1004a6a2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004a6a4:	687b      	ldr	r3, [r7, #4]
1004a6a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004a6a8:	2204      	movs	r2, #4
1004a6aa:	431a      	orrs	r2, r3
1004a6ac:	687b      	ldr	r3, [r7, #4]
1004a6ae:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
1004a6b0:	68fb      	ldr	r3, [r7, #12]
1004a6b2:	2b00      	cmp	r3, #0
1004a6b4:	d004      	beq.n	1004a6c0 <I2C_ITSlaveCplt+0x22c>
1004a6b6:	68fa      	ldr	r2, [r7, #12]
1004a6b8:	2380      	movs	r3, #128	@ 0x80
1004a6ba:	045b      	lsls	r3, r3, #17
1004a6bc:	429a      	cmp	r2, r3
1004a6be:	d106      	bne.n	1004a6ce <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
1004a6c0:	687b      	ldr	r3, [r7, #4]
1004a6c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004a6c4:	687b      	ldr	r3, [r7, #4]
1004a6c6:	0011      	movs	r1, r2
1004a6c8:	0018      	movs	r0, r3
1004a6ca:	f000 f8cd 	bl	1004a868 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
1004a6ce:	687b      	ldr	r3, [r7, #4]
1004a6d0:	2242      	movs	r2, #66	@ 0x42
1004a6d2:	2100      	movs	r1, #0
1004a6d4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
1004a6d6:	687b      	ldr	r3, [r7, #4]
1004a6d8:	2200      	movs	r2, #0
1004a6da:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
1004a6dc:	687b      	ldr	r3, [r7, #4]
1004a6de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004a6e0:	2b00      	cmp	r3, #0
1004a6e2:	d013      	beq.n	1004a70c <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
1004a6e4:	687b      	ldr	r3, [r7, #4]
1004a6e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004a6e8:	687b      	ldr	r3, [r7, #4]
1004a6ea:	0011      	movs	r1, r2
1004a6ec:	0018      	movs	r0, r3
1004a6ee:	f000 f8bb 	bl	1004a868 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
1004a6f2:	687b      	ldr	r3, [r7, #4]
1004a6f4:	2241      	movs	r2, #65	@ 0x41
1004a6f6:	5c9b      	ldrb	r3, [r3, r2]
1004a6f8:	b2db      	uxtb	r3, r3
1004a6fa:	2b28      	cmp	r3, #40	@ 0x28
1004a6fc:	d147      	bne.n	1004a78e <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
1004a6fe:	697a      	ldr	r2, [r7, #20]
1004a700:	687b      	ldr	r3, [r7, #4]
1004a702:	0011      	movs	r1, r2
1004a704:	0018      	movs	r0, r3
1004a706:	f000 f855 	bl	1004a7b4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
1004a70a:	e040      	b.n	1004a78e <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
1004a70c:	687b      	ldr	r3, [r7, #4]
1004a70e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004a710:	4a27      	ldr	r2, [pc, #156]	@ (1004a7b0 <I2C_ITSlaveCplt+0x31c>)
1004a712:	4293      	cmp	r3, r2
1004a714:	d016      	beq.n	1004a744 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
1004a716:	687b      	ldr	r3, [r7, #4]
1004a718:	0018      	movs	r0, r3
1004a71a:	f7ff fd83 	bl	1004a224 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
1004a71e:	687b      	ldr	r3, [r7, #4]
1004a720:	4a23      	ldr	r2, [pc, #140]	@ (1004a7b0 <I2C_ITSlaveCplt+0x31c>)
1004a722:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
1004a724:	687b      	ldr	r3, [r7, #4]
1004a726:	2241      	movs	r2, #65	@ 0x41
1004a728:	2120      	movs	r1, #32
1004a72a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
1004a72c:	687b      	ldr	r3, [r7, #4]
1004a72e:	2200      	movs	r2, #0
1004a730:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
1004a732:	687b      	ldr	r3, [r7, #4]
1004a734:	2240      	movs	r2, #64	@ 0x40
1004a736:	2100      	movs	r1, #0
1004a738:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
1004a73a:	687b      	ldr	r3, [r7, #4]
1004a73c:	0018      	movs	r0, r3
1004a73e:	f7fe fee9 	bl	10049514 <HAL_I2C_ListenCpltCallback>
}
1004a742:	e024      	b.n	1004a78e <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
1004a744:	687b      	ldr	r3, [r7, #4]
1004a746:	2241      	movs	r2, #65	@ 0x41
1004a748:	5c9b      	ldrb	r3, [r3, r2]
1004a74a:	b2db      	uxtb	r3, r3
1004a74c:	2b22      	cmp	r3, #34	@ 0x22
1004a74e:	d10f      	bne.n	1004a770 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
1004a750:	687b      	ldr	r3, [r7, #4]
1004a752:	2241      	movs	r2, #65	@ 0x41
1004a754:	2120      	movs	r1, #32
1004a756:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
1004a758:	687b      	ldr	r3, [r7, #4]
1004a75a:	2200      	movs	r2, #0
1004a75c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
1004a75e:	687b      	ldr	r3, [r7, #4]
1004a760:	2240      	movs	r2, #64	@ 0x40
1004a762:	2100      	movs	r1, #0
1004a764:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
1004a766:	687b      	ldr	r3, [r7, #4]
1004a768:	0018      	movs	r0, r3
1004a76a:	f7fe febb 	bl	100494e4 <HAL_I2C_SlaveRxCpltCallback>
}
1004a76e:	e00e      	b.n	1004a78e <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
1004a770:	687b      	ldr	r3, [r7, #4]
1004a772:	2241      	movs	r2, #65	@ 0x41
1004a774:	2120      	movs	r1, #32
1004a776:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
1004a778:	687b      	ldr	r3, [r7, #4]
1004a77a:	2200      	movs	r2, #0
1004a77c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
1004a77e:	687b      	ldr	r3, [r7, #4]
1004a780:	2240      	movs	r2, #64	@ 0x40
1004a782:	2100      	movs	r1, #0
1004a784:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
1004a786:	687b      	ldr	r3, [r7, #4]
1004a788:	0018      	movs	r0, r3
1004a78a:	f7fe fea3 	bl	100494d4 <HAL_I2C_SlaveTxCpltCallback>
}
1004a78e:	46c0      	nop			@ (mov r8, r8)
1004a790:	46bd      	mov	sp, r7
1004a792:	b006      	add	sp, #24
1004a794:	bd80      	pop	{r7, pc}
1004a796:	46c0      	nop			@ (mov r8, r8)
1004a798:	00008001 	.word	0x00008001
1004a79c:	00008002 	.word	0x00008002
1004a7a0:	00008003 	.word	0x00008003
1004a7a4:	fe00e800 	.word	0xfe00e800
1004a7a8:	ffffbfff 	.word	0xffffbfff
1004a7ac:	ffff7fff 	.word	0xffff7fff
1004a7b0:	ffff0000 	.word	0xffff0000

1004a7b4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
1004a7b4:	b580      	push	{r7, lr}
1004a7b6:	b082      	sub	sp, #8
1004a7b8:	af00      	add	r7, sp, #0
1004a7ba:	6078      	str	r0, [r7, #4]
1004a7bc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
1004a7be:	687b      	ldr	r3, [r7, #4]
1004a7c0:	4a27      	ldr	r2, [pc, #156]	@ (1004a860 <I2C_ITListenCplt+0xac>)
1004a7c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
1004a7c4:	687b      	ldr	r3, [r7, #4]
1004a7c6:	2200      	movs	r2, #0
1004a7c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
1004a7ca:	687b      	ldr	r3, [r7, #4]
1004a7cc:	2241      	movs	r2, #65	@ 0x41
1004a7ce:	2120      	movs	r1, #32
1004a7d0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
1004a7d2:	687b      	ldr	r3, [r7, #4]
1004a7d4:	2242      	movs	r2, #66	@ 0x42
1004a7d6:	2100      	movs	r1, #0
1004a7d8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
1004a7da:	687b      	ldr	r3, [r7, #4]
1004a7dc:	2200      	movs	r2, #0
1004a7de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
1004a7e0:	683b      	ldr	r3, [r7, #0]
1004a7e2:	089b      	lsrs	r3, r3, #2
1004a7e4:	001a      	movs	r2, r3
1004a7e6:	2301      	movs	r3, #1
1004a7e8:	4013      	ands	r3, r2
1004a7ea:	d022      	beq.n	1004a832 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
1004a7ec:	687b      	ldr	r3, [r7, #4]
1004a7ee:	681b      	ldr	r3, [r3, #0]
1004a7f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004a7f2:	687b      	ldr	r3, [r7, #4]
1004a7f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004a7f6:	b2d2      	uxtb	r2, r2
1004a7f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
1004a7fa:	687b      	ldr	r3, [r7, #4]
1004a7fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004a7fe:	1c5a      	adds	r2, r3, #1
1004a800:	687b      	ldr	r3, [r7, #4]
1004a802:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
1004a804:	687b      	ldr	r3, [r7, #4]
1004a806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004a808:	2b00      	cmp	r3, #0
1004a80a:	d012      	beq.n	1004a832 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
1004a80c:	687b      	ldr	r3, [r7, #4]
1004a80e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004a810:	3b01      	subs	r3, #1
1004a812:	b29a      	uxth	r2, r3
1004a814:	687b      	ldr	r3, [r7, #4]
1004a816:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
1004a818:	687b      	ldr	r3, [r7, #4]
1004a81a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004a81c:	b29b      	uxth	r3, r3
1004a81e:	3b01      	subs	r3, #1
1004a820:	b29a      	uxth	r2, r3
1004a822:	687b      	ldr	r3, [r7, #4]
1004a824:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004a826:	687b      	ldr	r3, [r7, #4]
1004a828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004a82a:	2204      	movs	r2, #4
1004a82c:	431a      	orrs	r2, r3
1004a82e:	687b      	ldr	r3, [r7, #4]
1004a830:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
1004a832:	4a0c      	ldr	r2, [pc, #48]	@ (1004a864 <I2C_ITListenCplt+0xb0>)
1004a834:	687b      	ldr	r3, [r7, #4]
1004a836:	0011      	movs	r1, r2
1004a838:	0018      	movs	r0, r3
1004a83a:	f000 fa45 	bl	1004acc8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004a83e:	687b      	ldr	r3, [r7, #4]
1004a840:	681b      	ldr	r3, [r3, #0]
1004a842:	2210      	movs	r2, #16
1004a844:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
1004a846:	687b      	ldr	r3, [r7, #4]
1004a848:	2240      	movs	r2, #64	@ 0x40
1004a84a:	2100      	movs	r1, #0
1004a84c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
1004a84e:	687b      	ldr	r3, [r7, #4]
1004a850:	0018      	movs	r0, r3
1004a852:	f7fe fe5f 	bl	10049514 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
1004a856:	46c0      	nop			@ (mov r8, r8)
1004a858:	46bd      	mov	sp, r7
1004a85a:	b002      	add	sp, #8
1004a85c:	bd80      	pop	{r7, pc}
1004a85e:	46c0      	nop			@ (mov r8, r8)
1004a860:	ffff0000 	.word	0xffff0000
1004a864:	00008003 	.word	0x00008003

1004a868 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
1004a868:	b580      	push	{r7, lr}
1004a86a:	b084      	sub	sp, #16
1004a86c:	af00      	add	r7, sp, #0
1004a86e:	6078      	str	r0, [r7, #4]
1004a870:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
1004a872:	200f      	movs	r0, #15
1004a874:	183b      	adds	r3, r7, r0
1004a876:	687a      	ldr	r2, [r7, #4]
1004a878:	2141      	movs	r1, #65	@ 0x41
1004a87a:	5c52      	ldrb	r2, [r2, r1]
1004a87c:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
1004a87e:	687b      	ldr	r3, [r7, #4]
1004a880:	2242      	movs	r2, #66	@ 0x42
1004a882:	2100      	movs	r1, #0
1004a884:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
1004a886:	687b      	ldr	r3, [r7, #4]
1004a888:	4a72      	ldr	r2, [pc, #456]	@ (1004aa54 <I2C_ITError+0x1ec>)
1004a88a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
1004a88c:	687b      	ldr	r3, [r7, #4]
1004a88e:	2200      	movs	r2, #0
1004a890:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
1004a892:	687b      	ldr	r3, [r7, #4]
1004a894:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004a896:	683b      	ldr	r3, [r7, #0]
1004a898:	431a      	orrs	r2, r3
1004a89a:	687b      	ldr	r3, [r7, #4]
1004a89c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
1004a89e:	183b      	adds	r3, r7, r0
1004a8a0:	781b      	ldrb	r3, [r3, #0]
1004a8a2:	2b28      	cmp	r3, #40	@ 0x28
1004a8a4:	d007      	beq.n	1004a8b6 <I2C_ITError+0x4e>
1004a8a6:	183b      	adds	r3, r7, r0
1004a8a8:	781b      	ldrb	r3, [r3, #0]
1004a8aa:	2b29      	cmp	r3, #41	@ 0x29
1004a8ac:	d003      	beq.n	1004a8b6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
1004a8ae:	183b      	adds	r3, r7, r0
1004a8b0:	781b      	ldrb	r3, [r3, #0]
1004a8b2:	2b2a      	cmp	r3, #42	@ 0x2a
1004a8b4:	d10c      	bne.n	1004a8d0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
1004a8b6:	687b      	ldr	r3, [r7, #4]
1004a8b8:	2103      	movs	r1, #3
1004a8ba:	0018      	movs	r0, r3
1004a8bc:	f000 fa04 	bl	1004acc8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
1004a8c0:	687b      	ldr	r3, [r7, #4]
1004a8c2:	2241      	movs	r2, #65	@ 0x41
1004a8c4:	2128      	movs	r1, #40	@ 0x28
1004a8c6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
1004a8c8:	687b      	ldr	r3, [r7, #4]
1004a8ca:	4a63      	ldr	r2, [pc, #396]	@ (1004aa58 <I2C_ITError+0x1f0>)
1004a8cc:	635a      	str	r2, [r3, #52]	@ 0x34
1004a8ce:	e032      	b.n	1004a936 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
1004a8d0:	4a62      	ldr	r2, [pc, #392]	@ (1004aa5c <I2C_ITError+0x1f4>)
1004a8d2:	687b      	ldr	r3, [r7, #4]
1004a8d4:	0011      	movs	r1, r2
1004a8d6:	0018      	movs	r0, r3
1004a8d8:	f000 f9f6 	bl	1004acc8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
1004a8dc:	687b      	ldr	r3, [r7, #4]
1004a8de:	0018      	movs	r0, r3
1004a8e0:	f000 f8ed 	bl	1004aabe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
1004a8e4:	687b      	ldr	r3, [r7, #4]
1004a8e6:	2241      	movs	r2, #65	@ 0x41
1004a8e8:	5c9b      	ldrb	r3, [r3, r2]
1004a8ea:	b2db      	uxtb	r3, r3
1004a8ec:	2b60      	cmp	r3, #96	@ 0x60
1004a8ee:	d01f      	beq.n	1004a930 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
1004a8f0:	687b      	ldr	r3, [r7, #4]
1004a8f2:	2241      	movs	r2, #65	@ 0x41
1004a8f4:	2120      	movs	r1, #32
1004a8f6:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
1004a8f8:	687b      	ldr	r3, [r7, #4]
1004a8fa:	681b      	ldr	r3, [r3, #0]
1004a8fc:	699b      	ldr	r3, [r3, #24]
1004a8fe:	2220      	movs	r2, #32
1004a900:	4013      	ands	r3, r2
1004a902:	2b20      	cmp	r3, #32
1004a904:	d114      	bne.n	1004a930 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
1004a906:	687b      	ldr	r3, [r7, #4]
1004a908:	681b      	ldr	r3, [r3, #0]
1004a90a:	699b      	ldr	r3, [r3, #24]
1004a90c:	2210      	movs	r2, #16
1004a90e:	4013      	ands	r3, r2
1004a910:	2b10      	cmp	r3, #16
1004a912:	d109      	bne.n	1004a928 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004a914:	687b      	ldr	r3, [r7, #4]
1004a916:	681b      	ldr	r3, [r3, #0]
1004a918:	2210      	movs	r2, #16
1004a91a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004a91c:	687b      	ldr	r3, [r7, #4]
1004a91e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004a920:	2204      	movs	r2, #4
1004a922:	431a      	orrs	r2, r3
1004a924:	687b      	ldr	r3, [r7, #4]
1004a926:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
1004a928:	687b      	ldr	r3, [r7, #4]
1004a92a:	681b      	ldr	r3, [r3, #0]
1004a92c:	2220      	movs	r2, #32
1004a92e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
1004a930:	687b      	ldr	r3, [r7, #4]
1004a932:	2200      	movs	r2, #0
1004a934:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
1004a936:	687b      	ldr	r3, [r7, #4]
1004a938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1004a93a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
1004a93c:	687b      	ldr	r3, [r7, #4]
1004a93e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004a940:	2b00      	cmp	r3, #0
1004a942:	d03b      	beq.n	1004a9bc <I2C_ITError+0x154>
1004a944:	68bb      	ldr	r3, [r7, #8]
1004a946:	2b11      	cmp	r3, #17
1004a948:	d002      	beq.n	1004a950 <I2C_ITError+0xe8>
1004a94a:	68bb      	ldr	r3, [r7, #8]
1004a94c:	2b21      	cmp	r3, #33	@ 0x21
1004a94e:	d135      	bne.n	1004a9bc <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
1004a950:	687b      	ldr	r3, [r7, #4]
1004a952:	681b      	ldr	r3, [r3, #0]
1004a954:	681a      	ldr	r2, [r3, #0]
1004a956:	2380      	movs	r3, #128	@ 0x80
1004a958:	01db      	lsls	r3, r3, #7
1004a95a:	401a      	ands	r2, r3
1004a95c:	2380      	movs	r3, #128	@ 0x80
1004a95e:	01db      	lsls	r3, r3, #7
1004a960:	429a      	cmp	r2, r3
1004a962:	d107      	bne.n	1004a974 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
1004a964:	687b      	ldr	r3, [r7, #4]
1004a966:	681b      	ldr	r3, [r3, #0]
1004a968:	681a      	ldr	r2, [r3, #0]
1004a96a:	687b      	ldr	r3, [r7, #4]
1004a96c:	681b      	ldr	r3, [r3, #0]
1004a96e:	493c      	ldr	r1, [pc, #240]	@ (1004aa60 <I2C_ITError+0x1f8>)
1004a970:	400a      	ands	r2, r1
1004a972:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
1004a974:	687b      	ldr	r3, [r7, #4]
1004a976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004a978:	0018      	movs	r0, r3
1004a97a:	f7fd fec6 	bl	1004870a <HAL_DMA_GetState>
1004a97e:	0003      	movs	r3, r0
1004a980:	2b01      	cmp	r3, #1
1004a982:	d016      	beq.n	1004a9b2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
1004a984:	687b      	ldr	r3, [r7, #4]
1004a986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004a988:	4a36      	ldr	r2, [pc, #216]	@ (1004aa64 <I2C_ITError+0x1fc>)
1004a98a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
1004a98c:	687b      	ldr	r3, [r7, #4]
1004a98e:	2240      	movs	r2, #64	@ 0x40
1004a990:	2100      	movs	r1, #0
1004a992:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
1004a994:	687b      	ldr	r3, [r7, #4]
1004a996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004a998:	0018      	movs	r0, r3
1004a99a:	f7fd fe6f 	bl	1004867c <HAL_DMA_Abort_IT>
1004a99e:	1e03      	subs	r3, r0, #0
1004a9a0:	d051      	beq.n	1004aa46 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
1004a9a2:	687b      	ldr	r3, [r7, #4]
1004a9a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004a9a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1004a9a8:	687b      	ldr	r3, [r7, #4]
1004a9aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004a9ac:	0018      	movs	r0, r3
1004a9ae:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
1004a9b0:	e049      	b.n	1004aa46 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
1004a9b2:	687b      	ldr	r3, [r7, #4]
1004a9b4:	0018      	movs	r0, r3
1004a9b6:	f000 f859 	bl	1004aa6c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
1004a9ba:	e044      	b.n	1004aa46 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
1004a9bc:	687b      	ldr	r3, [r7, #4]
1004a9be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004a9c0:	2b00      	cmp	r3, #0
1004a9c2:	d03b      	beq.n	1004aa3c <I2C_ITError+0x1d4>
1004a9c4:	68bb      	ldr	r3, [r7, #8]
1004a9c6:	2b12      	cmp	r3, #18
1004a9c8:	d002      	beq.n	1004a9d0 <I2C_ITError+0x168>
1004a9ca:	68bb      	ldr	r3, [r7, #8]
1004a9cc:	2b22      	cmp	r3, #34	@ 0x22
1004a9ce:	d135      	bne.n	1004aa3c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
1004a9d0:	687b      	ldr	r3, [r7, #4]
1004a9d2:	681b      	ldr	r3, [r3, #0]
1004a9d4:	681a      	ldr	r2, [r3, #0]
1004a9d6:	2380      	movs	r3, #128	@ 0x80
1004a9d8:	021b      	lsls	r3, r3, #8
1004a9da:	401a      	ands	r2, r3
1004a9dc:	2380      	movs	r3, #128	@ 0x80
1004a9de:	021b      	lsls	r3, r3, #8
1004a9e0:	429a      	cmp	r2, r3
1004a9e2:	d107      	bne.n	1004a9f4 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
1004a9e4:	687b      	ldr	r3, [r7, #4]
1004a9e6:	681b      	ldr	r3, [r3, #0]
1004a9e8:	681a      	ldr	r2, [r3, #0]
1004a9ea:	687b      	ldr	r3, [r7, #4]
1004a9ec:	681b      	ldr	r3, [r3, #0]
1004a9ee:	491e      	ldr	r1, [pc, #120]	@ (1004aa68 <I2C_ITError+0x200>)
1004a9f0:	400a      	ands	r2, r1
1004a9f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
1004a9f4:	687b      	ldr	r3, [r7, #4]
1004a9f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004a9f8:	0018      	movs	r0, r3
1004a9fa:	f7fd fe86 	bl	1004870a <HAL_DMA_GetState>
1004a9fe:	0003      	movs	r3, r0
1004aa00:	2b01      	cmp	r3, #1
1004aa02:	d016      	beq.n	1004aa32 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
1004aa04:	687b      	ldr	r3, [r7, #4]
1004aa06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004aa08:	4a16      	ldr	r2, [pc, #88]	@ (1004aa64 <I2C_ITError+0x1fc>)
1004aa0a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
1004aa0c:	687b      	ldr	r3, [r7, #4]
1004aa0e:	2240      	movs	r2, #64	@ 0x40
1004aa10:	2100      	movs	r1, #0
1004aa12:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
1004aa14:	687b      	ldr	r3, [r7, #4]
1004aa16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004aa18:	0018      	movs	r0, r3
1004aa1a:	f7fd fe2f 	bl	1004867c <HAL_DMA_Abort_IT>
1004aa1e:	1e03      	subs	r3, r0, #0
1004aa20:	d013      	beq.n	1004aa4a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
1004aa22:	687b      	ldr	r3, [r7, #4]
1004aa24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004aa26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1004aa28:	687b      	ldr	r3, [r7, #4]
1004aa2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004aa2c:	0018      	movs	r0, r3
1004aa2e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
1004aa30:	e00b      	b.n	1004aa4a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
1004aa32:	687b      	ldr	r3, [r7, #4]
1004aa34:	0018      	movs	r0, r3
1004aa36:	f000 f819 	bl	1004aa6c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
1004aa3a:	e006      	b.n	1004aa4a <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
1004aa3c:	687b      	ldr	r3, [r7, #4]
1004aa3e:	0018      	movs	r0, r3
1004aa40:	f000 f814 	bl	1004aa6c <I2C_TreatErrorCallback>
  }
}
1004aa44:	e002      	b.n	1004aa4c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
1004aa46:	46c0      	nop			@ (mov r8, r8)
1004aa48:	e000      	b.n	1004aa4c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
1004aa4a:	46c0      	nop			@ (mov r8, r8)
}
1004aa4c:	46c0      	nop			@ (mov r8, r8)
1004aa4e:	46bd      	mov	sp, r7
1004aa50:	b004      	add	sp, #16
1004aa52:	bd80      	pop	{r7, pc}
1004aa54:	ffff0000 	.word	0xffff0000
1004aa58:	100497a9 	.word	0x100497a9
1004aa5c:	00008003 	.word	0x00008003
1004aa60:	ffffbfff 	.word	0xffffbfff
1004aa64:	1004ab03 	.word	0x1004ab03
1004aa68:	ffff7fff 	.word	0xffff7fff

1004aa6c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
1004aa6c:	b580      	push	{r7, lr}
1004aa6e:	b082      	sub	sp, #8
1004aa70:	af00      	add	r7, sp, #0
1004aa72:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
1004aa74:	687b      	ldr	r3, [r7, #4]
1004aa76:	2241      	movs	r2, #65	@ 0x41
1004aa78:	5c9b      	ldrb	r3, [r3, r2]
1004aa7a:	b2db      	uxtb	r3, r3
1004aa7c:	2b60      	cmp	r3, #96	@ 0x60
1004aa7e:	d10f      	bne.n	1004aaa0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
1004aa80:	687b      	ldr	r3, [r7, #4]
1004aa82:	2241      	movs	r2, #65	@ 0x41
1004aa84:	2120      	movs	r1, #32
1004aa86:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
1004aa88:	687b      	ldr	r3, [r7, #4]
1004aa8a:	2200      	movs	r2, #0
1004aa8c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1004aa8e:	687b      	ldr	r3, [r7, #4]
1004aa90:	2240      	movs	r2, #64	@ 0x40
1004aa92:	2100      	movs	r1, #0
1004aa94:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
1004aa96:	687b      	ldr	r3, [r7, #4]
1004aa98:	0018      	movs	r0, r3
1004aa9a:	f7fe fd43 	bl	10049524 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
1004aa9e:	e00a      	b.n	1004aab6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
1004aaa0:	687b      	ldr	r3, [r7, #4]
1004aaa2:	2200      	movs	r2, #0
1004aaa4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
1004aaa6:	687b      	ldr	r3, [r7, #4]
1004aaa8:	2240      	movs	r2, #64	@ 0x40
1004aaaa:	2100      	movs	r1, #0
1004aaac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
1004aaae:	687b      	ldr	r3, [r7, #4]
1004aab0:	0018      	movs	r0, r3
1004aab2:	f7fa fc23 	bl	100452fc <HAL_I2C_ErrorCallback>
}
1004aab6:	46c0      	nop			@ (mov r8, r8)
1004aab8:	46bd      	mov	sp, r7
1004aaba:	b002      	add	sp, #8
1004aabc:	bd80      	pop	{r7, pc}

1004aabe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
1004aabe:	b580      	push	{r7, lr}
1004aac0:	b082      	sub	sp, #8
1004aac2:	af00      	add	r7, sp, #0
1004aac4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
1004aac6:	687b      	ldr	r3, [r7, #4]
1004aac8:	681b      	ldr	r3, [r3, #0]
1004aaca:	699b      	ldr	r3, [r3, #24]
1004aacc:	2202      	movs	r2, #2
1004aace:	4013      	ands	r3, r2
1004aad0:	2b02      	cmp	r3, #2
1004aad2:	d103      	bne.n	1004aadc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
1004aad4:	687b      	ldr	r3, [r7, #4]
1004aad6:	681b      	ldr	r3, [r3, #0]
1004aad8:	2200      	movs	r2, #0
1004aada:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
1004aadc:	687b      	ldr	r3, [r7, #4]
1004aade:	681b      	ldr	r3, [r3, #0]
1004aae0:	699b      	ldr	r3, [r3, #24]
1004aae2:	2201      	movs	r2, #1
1004aae4:	4013      	ands	r3, r2
1004aae6:	2b01      	cmp	r3, #1
1004aae8:	d007      	beq.n	1004aafa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
1004aaea:	687b      	ldr	r3, [r7, #4]
1004aaec:	681b      	ldr	r3, [r3, #0]
1004aaee:	699a      	ldr	r2, [r3, #24]
1004aaf0:	687b      	ldr	r3, [r7, #4]
1004aaf2:	681b      	ldr	r3, [r3, #0]
1004aaf4:	2101      	movs	r1, #1
1004aaf6:	430a      	orrs	r2, r1
1004aaf8:	619a      	str	r2, [r3, #24]
  }
}
1004aafa:	46c0      	nop			@ (mov r8, r8)
1004aafc:	46bd      	mov	sp, r7
1004aafe:	b002      	add	sp, #8
1004ab00:	bd80      	pop	{r7, pc}

1004ab02 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
1004ab02:	b580      	push	{r7, lr}
1004ab04:	b084      	sub	sp, #16
1004ab06:	af00      	add	r7, sp, #0
1004ab08:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
1004ab0a:	687b      	ldr	r3, [r7, #4]
1004ab0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004ab0e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
1004ab10:	68fb      	ldr	r3, [r7, #12]
1004ab12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004ab14:	2b00      	cmp	r3, #0
1004ab16:	d003      	beq.n	1004ab20 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
1004ab18:	68fb      	ldr	r3, [r7, #12]
1004ab1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004ab1c:	2200      	movs	r2, #0
1004ab1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
1004ab20:	68fb      	ldr	r3, [r7, #12]
1004ab22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004ab24:	2b00      	cmp	r3, #0
1004ab26:	d003      	beq.n	1004ab30 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
1004ab28:	68fb      	ldr	r3, [r7, #12]
1004ab2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004ab2c:	2200      	movs	r2, #0
1004ab2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
1004ab30:	68fb      	ldr	r3, [r7, #12]
1004ab32:	0018      	movs	r0, r3
1004ab34:	f7ff ff9a 	bl	1004aa6c <I2C_TreatErrorCallback>
}
1004ab38:	46c0      	nop			@ (mov r8, r8)
1004ab3a:	46bd      	mov	sp, r7
1004ab3c:	b004      	add	sp, #16
1004ab3e:	bd80      	pop	{r7, pc}

1004ab40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
1004ab40:	b590      	push	{r4, r7, lr}
1004ab42:	b087      	sub	sp, #28
1004ab44:	af00      	add	r7, sp, #0
1004ab46:	60f8      	str	r0, [r7, #12]
1004ab48:	0008      	movs	r0, r1
1004ab4a:	0011      	movs	r1, r2
1004ab4c:	607b      	str	r3, [r7, #4]
1004ab4e:	240a      	movs	r4, #10
1004ab50:	193b      	adds	r3, r7, r4
1004ab52:	1c02      	adds	r2, r0, #0
1004ab54:	801a      	strh	r2, [r3, #0]
1004ab56:	2009      	movs	r0, #9
1004ab58:	183b      	adds	r3, r7, r0
1004ab5a:	1c0a      	adds	r2, r1, #0
1004ab5c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
1004ab5e:	193b      	adds	r3, r7, r4
1004ab60:	881b      	ldrh	r3, [r3, #0]
1004ab62:	059b      	lsls	r3, r3, #22
1004ab64:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
1004ab66:	183b      	adds	r3, r7, r0
1004ab68:	781b      	ldrb	r3, [r3, #0]
1004ab6a:	0419      	lsls	r1, r3, #16
1004ab6c:	23ff      	movs	r3, #255	@ 0xff
1004ab6e:	041b      	lsls	r3, r3, #16
1004ab70:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
1004ab72:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
1004ab74:	687b      	ldr	r3, [r7, #4]
1004ab76:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
1004ab78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004ab7a:	4313      	orrs	r3, r2
1004ab7c:	005b      	lsls	r3, r3, #1
1004ab7e:	085b      	lsrs	r3, r3, #1
1004ab80:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
1004ab82:	68fb      	ldr	r3, [r7, #12]
1004ab84:	681b      	ldr	r3, [r3, #0]
1004ab86:	685b      	ldr	r3, [r3, #4]
1004ab88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004ab8a:	0d51      	lsrs	r1, r2, #21
1004ab8c:	2280      	movs	r2, #128	@ 0x80
1004ab8e:	00d2      	lsls	r2, r2, #3
1004ab90:	400a      	ands	r2, r1
1004ab92:	4907      	ldr	r1, [pc, #28]	@ (1004abb0 <I2C_TransferConfig+0x70>)
1004ab94:	430a      	orrs	r2, r1
1004ab96:	43d2      	mvns	r2, r2
1004ab98:	401a      	ands	r2, r3
1004ab9a:	0011      	movs	r1, r2
1004ab9c:	68fb      	ldr	r3, [r7, #12]
1004ab9e:	681b      	ldr	r3, [r3, #0]
1004aba0:	697a      	ldr	r2, [r7, #20]
1004aba2:	430a      	orrs	r2, r1
1004aba4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
1004aba6:	46c0      	nop			@ (mov r8, r8)
1004aba8:	46bd      	mov	sp, r7
1004abaa:	b007      	add	sp, #28
1004abac:	bd90      	pop	{r4, r7, pc}
1004abae:	46c0      	nop			@ (mov r8, r8)
1004abb0:	03ff63ff 	.word	0x03ff63ff

1004abb4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
1004abb4:	b580      	push	{r7, lr}
1004abb6:	b084      	sub	sp, #16
1004abb8:	af00      	add	r7, sp, #0
1004abba:	6078      	str	r0, [r7, #4]
1004abbc:	000a      	movs	r2, r1
1004abbe:	1cbb      	adds	r3, r7, #2
1004abc0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
1004abc2:	2300      	movs	r3, #0
1004abc4:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
1004abc6:	687b      	ldr	r3, [r7, #4]
1004abc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1004abca:	4b3c      	ldr	r3, [pc, #240]	@ (1004acbc <I2C_Enable_IRQ+0x108>)
1004abcc:	429a      	cmp	r2, r3
1004abce:	d035      	beq.n	1004ac3c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
1004abd0:	687b      	ldr	r3, [r7, #4]
1004abd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
1004abd4:	4b3a      	ldr	r3, [pc, #232]	@ (1004acc0 <I2C_Enable_IRQ+0x10c>)
1004abd6:	429a      	cmp	r2, r3
1004abd8:	d030      	beq.n	1004ac3c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
1004abda:	687b      	ldr	r3, [r7, #4]
1004abdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
1004abde:	4b39      	ldr	r3, [pc, #228]	@ (1004acc4 <I2C_Enable_IRQ+0x110>)
1004abe0:	429a      	cmp	r2, r3
1004abe2:	d02b      	beq.n	1004ac3c <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
1004abe4:	1cbb      	adds	r3, r7, #2
1004abe6:	2200      	movs	r2, #0
1004abe8:	5e9b      	ldrsh	r3, [r3, r2]
1004abea:	2b00      	cmp	r3, #0
1004abec:	da03      	bge.n	1004abf6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
1004abee:	68fb      	ldr	r3, [r7, #12]
1004abf0:	22b8      	movs	r2, #184	@ 0xb8
1004abf2:	4313      	orrs	r3, r2
1004abf4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
1004abf6:	1cbb      	adds	r3, r7, #2
1004abf8:	881b      	ldrh	r3, [r3, #0]
1004abfa:	2201      	movs	r2, #1
1004abfc:	4013      	ands	r3, r2
1004abfe:	d003      	beq.n	1004ac08 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
1004ac00:	68fb      	ldr	r3, [r7, #12]
1004ac02:	22f2      	movs	r2, #242	@ 0xf2
1004ac04:	4313      	orrs	r3, r2
1004ac06:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
1004ac08:	1cbb      	adds	r3, r7, #2
1004ac0a:	881b      	ldrh	r3, [r3, #0]
1004ac0c:	2202      	movs	r2, #2
1004ac0e:	4013      	ands	r3, r2
1004ac10:	d003      	beq.n	1004ac1a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
1004ac12:	68fb      	ldr	r3, [r7, #12]
1004ac14:	22f4      	movs	r2, #244	@ 0xf4
1004ac16:	4313      	orrs	r3, r2
1004ac18:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
1004ac1a:	1cbb      	adds	r3, r7, #2
1004ac1c:	881b      	ldrh	r3, [r3, #0]
1004ac1e:	2b10      	cmp	r3, #16
1004ac20:	d103      	bne.n	1004ac2a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
1004ac22:	68fb      	ldr	r3, [r7, #12]
1004ac24:	2290      	movs	r2, #144	@ 0x90
1004ac26:	4313      	orrs	r3, r2
1004ac28:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
1004ac2a:	1cbb      	adds	r3, r7, #2
1004ac2c:	881b      	ldrh	r3, [r3, #0]
1004ac2e:	2b20      	cmp	r3, #32
1004ac30:	d137      	bne.n	1004aca2 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
1004ac32:	68fb      	ldr	r3, [r7, #12]
1004ac34:	2220      	movs	r2, #32
1004ac36:	4313      	orrs	r3, r2
1004ac38:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
1004ac3a:	e032      	b.n	1004aca2 <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
1004ac3c:	1cbb      	adds	r3, r7, #2
1004ac3e:	2200      	movs	r2, #0
1004ac40:	5e9b      	ldrsh	r3, [r3, r2]
1004ac42:	2b00      	cmp	r3, #0
1004ac44:	da03      	bge.n	1004ac4e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
1004ac46:	68fb      	ldr	r3, [r7, #12]
1004ac48:	22b8      	movs	r2, #184	@ 0xb8
1004ac4a:	4313      	orrs	r3, r2
1004ac4c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
1004ac4e:	1cbb      	adds	r3, r7, #2
1004ac50:	881b      	ldrh	r3, [r3, #0]
1004ac52:	2201      	movs	r2, #1
1004ac54:	4013      	ands	r3, r2
1004ac56:	d003      	beq.n	1004ac60 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
1004ac58:	68fb      	ldr	r3, [r7, #12]
1004ac5a:	22f2      	movs	r2, #242	@ 0xf2
1004ac5c:	4313      	orrs	r3, r2
1004ac5e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
1004ac60:	1cbb      	adds	r3, r7, #2
1004ac62:	881b      	ldrh	r3, [r3, #0]
1004ac64:	2202      	movs	r2, #2
1004ac66:	4013      	ands	r3, r2
1004ac68:	d003      	beq.n	1004ac72 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
1004ac6a:	68fb      	ldr	r3, [r7, #12]
1004ac6c:	22f4      	movs	r2, #244	@ 0xf4
1004ac6e:	4313      	orrs	r3, r2
1004ac70:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
1004ac72:	1cbb      	adds	r3, r7, #2
1004ac74:	881b      	ldrh	r3, [r3, #0]
1004ac76:	2b10      	cmp	r3, #16
1004ac78:	d103      	bne.n	1004ac82 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
1004ac7a:	68fb      	ldr	r3, [r7, #12]
1004ac7c:	2290      	movs	r2, #144	@ 0x90
1004ac7e:	4313      	orrs	r3, r2
1004ac80:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
1004ac82:	1cbb      	adds	r3, r7, #2
1004ac84:	881b      	ldrh	r3, [r3, #0]
1004ac86:	2b20      	cmp	r3, #32
1004ac88:	d103      	bne.n	1004ac92 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
1004ac8a:	68fb      	ldr	r3, [r7, #12]
1004ac8c:	2260      	movs	r2, #96	@ 0x60
1004ac8e:	4313      	orrs	r3, r2
1004ac90:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
1004ac92:	1cbb      	adds	r3, r7, #2
1004ac94:	881b      	ldrh	r3, [r3, #0]
1004ac96:	2b40      	cmp	r3, #64	@ 0x40
1004ac98:	d103      	bne.n	1004aca2 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
1004ac9a:	68fb      	ldr	r3, [r7, #12]
1004ac9c:	2240      	movs	r2, #64	@ 0x40
1004ac9e:	4313      	orrs	r3, r2
1004aca0:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
1004aca2:	687b      	ldr	r3, [r7, #4]
1004aca4:	681b      	ldr	r3, [r3, #0]
1004aca6:	6819      	ldr	r1, [r3, #0]
1004aca8:	687b      	ldr	r3, [r7, #4]
1004acaa:	681b      	ldr	r3, [r3, #0]
1004acac:	68fa      	ldr	r2, [r7, #12]
1004acae:	430a      	orrs	r2, r1
1004acb0:	601a      	str	r2, [r3, #0]
}
1004acb2:	46c0      	nop			@ (mov r8, r8)
1004acb4:	46bd      	mov	sp, r7
1004acb6:	b004      	add	sp, #16
1004acb8:	bd80      	pop	{r7, pc}
1004acba:	46c0      	nop			@ (mov r8, r8)
1004acbc:	100499d1 	.word	0x100499d1
1004acc0:	10049e69 	.word	0x10049e69
1004acc4:	10049be9 	.word	0x10049be9

1004acc8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
1004acc8:	b580      	push	{r7, lr}
1004acca:	b084      	sub	sp, #16
1004accc:	af00      	add	r7, sp, #0
1004acce:	6078      	str	r0, [r7, #4]
1004acd0:	000a      	movs	r2, r1
1004acd2:	1cbb      	adds	r3, r7, #2
1004acd4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
1004acd6:	2300      	movs	r3, #0
1004acd8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
1004acda:	1cbb      	adds	r3, r7, #2
1004acdc:	881b      	ldrh	r3, [r3, #0]
1004acde:	2201      	movs	r2, #1
1004ace0:	4013      	ands	r3, r2
1004ace2:	d010      	beq.n	1004ad06 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
1004ace4:	68fb      	ldr	r3, [r7, #12]
1004ace6:	2242      	movs	r2, #66	@ 0x42
1004ace8:	4313      	orrs	r3, r2
1004acea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
1004acec:	687b      	ldr	r3, [r7, #4]
1004acee:	2241      	movs	r2, #65	@ 0x41
1004acf0:	5c9b      	ldrb	r3, [r3, r2]
1004acf2:	b2db      	uxtb	r3, r3
1004acf4:	001a      	movs	r2, r3
1004acf6:	2328      	movs	r3, #40	@ 0x28
1004acf8:	4013      	ands	r3, r2
1004acfa:	2b28      	cmp	r3, #40	@ 0x28
1004acfc:	d003      	beq.n	1004ad06 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
1004acfe:	68fb      	ldr	r3, [r7, #12]
1004ad00:	22b0      	movs	r2, #176	@ 0xb0
1004ad02:	4313      	orrs	r3, r2
1004ad04:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
1004ad06:	1cbb      	adds	r3, r7, #2
1004ad08:	881b      	ldrh	r3, [r3, #0]
1004ad0a:	2202      	movs	r2, #2
1004ad0c:	4013      	ands	r3, r2
1004ad0e:	d010      	beq.n	1004ad32 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
1004ad10:	68fb      	ldr	r3, [r7, #12]
1004ad12:	2244      	movs	r2, #68	@ 0x44
1004ad14:	4313      	orrs	r3, r2
1004ad16:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
1004ad18:	687b      	ldr	r3, [r7, #4]
1004ad1a:	2241      	movs	r2, #65	@ 0x41
1004ad1c:	5c9b      	ldrb	r3, [r3, r2]
1004ad1e:	b2db      	uxtb	r3, r3
1004ad20:	001a      	movs	r2, r3
1004ad22:	2328      	movs	r3, #40	@ 0x28
1004ad24:	4013      	ands	r3, r2
1004ad26:	2b28      	cmp	r3, #40	@ 0x28
1004ad28:	d003      	beq.n	1004ad32 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
1004ad2a:	68fb      	ldr	r3, [r7, #12]
1004ad2c:	22b0      	movs	r2, #176	@ 0xb0
1004ad2e:	4313      	orrs	r3, r2
1004ad30:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
1004ad32:	1cbb      	adds	r3, r7, #2
1004ad34:	2200      	movs	r2, #0
1004ad36:	5e9b      	ldrsh	r3, [r3, r2]
1004ad38:	2b00      	cmp	r3, #0
1004ad3a:	da03      	bge.n	1004ad44 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
1004ad3c:	68fb      	ldr	r3, [r7, #12]
1004ad3e:	22b8      	movs	r2, #184	@ 0xb8
1004ad40:	4313      	orrs	r3, r2
1004ad42:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
1004ad44:	1cbb      	adds	r3, r7, #2
1004ad46:	881b      	ldrh	r3, [r3, #0]
1004ad48:	2b10      	cmp	r3, #16
1004ad4a:	d103      	bne.n	1004ad54 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
1004ad4c:	68fb      	ldr	r3, [r7, #12]
1004ad4e:	2290      	movs	r2, #144	@ 0x90
1004ad50:	4313      	orrs	r3, r2
1004ad52:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
1004ad54:	1cbb      	adds	r3, r7, #2
1004ad56:	881b      	ldrh	r3, [r3, #0]
1004ad58:	2b20      	cmp	r3, #32
1004ad5a:	d103      	bne.n	1004ad64 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
1004ad5c:	68fb      	ldr	r3, [r7, #12]
1004ad5e:	2220      	movs	r2, #32
1004ad60:	4313      	orrs	r3, r2
1004ad62:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
1004ad64:	1cbb      	adds	r3, r7, #2
1004ad66:	881b      	ldrh	r3, [r3, #0]
1004ad68:	2b40      	cmp	r3, #64	@ 0x40
1004ad6a:	d103      	bne.n	1004ad74 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
1004ad6c:	68fb      	ldr	r3, [r7, #12]
1004ad6e:	2240      	movs	r2, #64	@ 0x40
1004ad70:	4313      	orrs	r3, r2
1004ad72:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
1004ad74:	687b      	ldr	r3, [r7, #4]
1004ad76:	681b      	ldr	r3, [r3, #0]
1004ad78:	681a      	ldr	r2, [r3, #0]
1004ad7a:	68fb      	ldr	r3, [r7, #12]
1004ad7c:	43d9      	mvns	r1, r3
1004ad7e:	687b      	ldr	r3, [r7, #4]
1004ad80:	681b      	ldr	r3, [r3, #0]
1004ad82:	400a      	ands	r2, r1
1004ad84:	601a      	str	r2, [r3, #0]
}
1004ad86:	46c0      	nop			@ (mov r8, r8)
1004ad88:	46bd      	mov	sp, r7
1004ad8a:	b004      	add	sp, #16
1004ad8c:	bd80      	pop	{r7, pc}
	...

1004ad90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
1004ad90:	b580      	push	{r7, lr}
1004ad92:	b082      	sub	sp, #8
1004ad94:	af00      	add	r7, sp, #0
1004ad96:	6078      	str	r0, [r7, #4]
1004ad98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
1004ad9a:	687b      	ldr	r3, [r7, #4]
1004ad9c:	2241      	movs	r2, #65	@ 0x41
1004ad9e:	5c9b      	ldrb	r3, [r3, r2]
1004ada0:	b2db      	uxtb	r3, r3
1004ada2:	2b20      	cmp	r3, #32
1004ada4:	d138      	bne.n	1004ae18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
1004ada6:	687b      	ldr	r3, [r7, #4]
1004ada8:	2240      	movs	r2, #64	@ 0x40
1004adaa:	5c9b      	ldrb	r3, [r3, r2]
1004adac:	2b01      	cmp	r3, #1
1004adae:	d101      	bne.n	1004adb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
1004adb0:	2302      	movs	r3, #2
1004adb2:	e032      	b.n	1004ae1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
1004adb4:	687b      	ldr	r3, [r7, #4]
1004adb6:	2240      	movs	r2, #64	@ 0x40
1004adb8:	2101      	movs	r1, #1
1004adba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
1004adbc:	687b      	ldr	r3, [r7, #4]
1004adbe:	2241      	movs	r2, #65	@ 0x41
1004adc0:	2124      	movs	r1, #36	@ 0x24
1004adc2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
1004adc4:	687b      	ldr	r3, [r7, #4]
1004adc6:	681b      	ldr	r3, [r3, #0]
1004adc8:	681a      	ldr	r2, [r3, #0]
1004adca:	687b      	ldr	r3, [r7, #4]
1004adcc:	681b      	ldr	r3, [r3, #0]
1004adce:	2101      	movs	r1, #1
1004add0:	438a      	bics	r2, r1
1004add2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
1004add4:	687b      	ldr	r3, [r7, #4]
1004add6:	681b      	ldr	r3, [r3, #0]
1004add8:	681a      	ldr	r2, [r3, #0]
1004adda:	687b      	ldr	r3, [r7, #4]
1004addc:	681b      	ldr	r3, [r3, #0]
1004adde:	4911      	ldr	r1, [pc, #68]	@ (1004ae24 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
1004ade0:	400a      	ands	r2, r1
1004ade2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
1004ade4:	687b      	ldr	r3, [r7, #4]
1004ade6:	681b      	ldr	r3, [r3, #0]
1004ade8:	6819      	ldr	r1, [r3, #0]
1004adea:	687b      	ldr	r3, [r7, #4]
1004adec:	681b      	ldr	r3, [r3, #0]
1004adee:	683a      	ldr	r2, [r7, #0]
1004adf0:	430a      	orrs	r2, r1
1004adf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
1004adf4:	687b      	ldr	r3, [r7, #4]
1004adf6:	681b      	ldr	r3, [r3, #0]
1004adf8:	681a      	ldr	r2, [r3, #0]
1004adfa:	687b      	ldr	r3, [r7, #4]
1004adfc:	681b      	ldr	r3, [r3, #0]
1004adfe:	2101      	movs	r1, #1
1004ae00:	430a      	orrs	r2, r1
1004ae02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
1004ae04:	687b      	ldr	r3, [r7, #4]
1004ae06:	2241      	movs	r2, #65	@ 0x41
1004ae08:	2120      	movs	r1, #32
1004ae0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1004ae0c:	687b      	ldr	r3, [r7, #4]
1004ae0e:	2240      	movs	r2, #64	@ 0x40
1004ae10:	2100      	movs	r1, #0
1004ae12:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
1004ae14:	2300      	movs	r3, #0
1004ae16:	e000      	b.n	1004ae1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
1004ae18:	2302      	movs	r3, #2
  }
}
1004ae1a:	0018      	movs	r0, r3
1004ae1c:	46bd      	mov	sp, r7
1004ae1e:	b002      	add	sp, #8
1004ae20:	bd80      	pop	{r7, pc}
1004ae22:	46c0      	nop			@ (mov r8, r8)
1004ae24:	ffffefff 	.word	0xffffefff

1004ae28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
1004ae28:	b580      	push	{r7, lr}
1004ae2a:	b084      	sub	sp, #16
1004ae2c:	af00      	add	r7, sp, #0
1004ae2e:	6078      	str	r0, [r7, #4]
1004ae30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
1004ae32:	687b      	ldr	r3, [r7, #4]
1004ae34:	2241      	movs	r2, #65	@ 0x41
1004ae36:	5c9b      	ldrb	r3, [r3, r2]
1004ae38:	b2db      	uxtb	r3, r3
1004ae3a:	2b20      	cmp	r3, #32
1004ae3c:	d139      	bne.n	1004aeb2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
1004ae3e:	687b      	ldr	r3, [r7, #4]
1004ae40:	2240      	movs	r2, #64	@ 0x40
1004ae42:	5c9b      	ldrb	r3, [r3, r2]
1004ae44:	2b01      	cmp	r3, #1
1004ae46:	d101      	bne.n	1004ae4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
1004ae48:	2302      	movs	r3, #2
1004ae4a:	e033      	b.n	1004aeb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
1004ae4c:	687b      	ldr	r3, [r7, #4]
1004ae4e:	2240      	movs	r2, #64	@ 0x40
1004ae50:	2101      	movs	r1, #1
1004ae52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
1004ae54:	687b      	ldr	r3, [r7, #4]
1004ae56:	2241      	movs	r2, #65	@ 0x41
1004ae58:	2124      	movs	r1, #36	@ 0x24
1004ae5a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
1004ae5c:	687b      	ldr	r3, [r7, #4]
1004ae5e:	681b      	ldr	r3, [r3, #0]
1004ae60:	681a      	ldr	r2, [r3, #0]
1004ae62:	687b      	ldr	r3, [r7, #4]
1004ae64:	681b      	ldr	r3, [r3, #0]
1004ae66:	2101      	movs	r1, #1
1004ae68:	438a      	bics	r2, r1
1004ae6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
1004ae6c:	687b      	ldr	r3, [r7, #4]
1004ae6e:	681b      	ldr	r3, [r3, #0]
1004ae70:	681b      	ldr	r3, [r3, #0]
1004ae72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
1004ae74:	68fb      	ldr	r3, [r7, #12]
1004ae76:	4a11      	ldr	r2, [pc, #68]	@ (1004aebc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
1004ae78:	4013      	ands	r3, r2
1004ae7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
1004ae7c:	683b      	ldr	r3, [r7, #0]
1004ae7e:	021b      	lsls	r3, r3, #8
1004ae80:	68fa      	ldr	r2, [r7, #12]
1004ae82:	4313      	orrs	r3, r2
1004ae84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
1004ae86:	687b      	ldr	r3, [r7, #4]
1004ae88:	681b      	ldr	r3, [r3, #0]
1004ae8a:	68fa      	ldr	r2, [r7, #12]
1004ae8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
1004ae8e:	687b      	ldr	r3, [r7, #4]
1004ae90:	681b      	ldr	r3, [r3, #0]
1004ae92:	681a      	ldr	r2, [r3, #0]
1004ae94:	687b      	ldr	r3, [r7, #4]
1004ae96:	681b      	ldr	r3, [r3, #0]
1004ae98:	2101      	movs	r1, #1
1004ae9a:	430a      	orrs	r2, r1
1004ae9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
1004ae9e:	687b      	ldr	r3, [r7, #4]
1004aea0:	2241      	movs	r2, #65	@ 0x41
1004aea2:	2120      	movs	r1, #32
1004aea4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1004aea6:	687b      	ldr	r3, [r7, #4]
1004aea8:	2240      	movs	r2, #64	@ 0x40
1004aeaa:	2100      	movs	r1, #0
1004aeac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
1004aeae:	2300      	movs	r3, #0
1004aeb0:	e000      	b.n	1004aeb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
1004aeb2:	2302      	movs	r3, #2
  }
}
1004aeb4:	0018      	movs	r0, r3
1004aeb6:	46bd      	mov	sp, r7
1004aeb8:	b004      	add	sp, #16
1004aeba:	bd80      	pop	{r7, pc}
1004aebc:	fffff0ff 	.word	0xfffff0ff

1004aec0 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
1004aec0:	b580      	push	{r7, lr}
1004aec2:	b084      	sub	sp, #16
1004aec4:	af00      	add	r7, sp, #0
1004aec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
1004aec8:	230f      	movs	r3, #15
1004aeca:	18fb      	adds	r3, r7, r3
1004aecc:	2200      	movs	r2, #0
1004aece:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB05)|| defined(STM32WB09)
  uint32_t tickstart;
#endif /* STM32WB05 || STM32WB09 */
  /* Check the PKA handle allocation */
  if (hpka != NULL)
1004aed0:	687b      	ldr	r3, [r7, #4]
1004aed2:	2b00      	cmp	r3, #0
1004aed4:	d045      	beq.n	1004af62 <HAL_PKA_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
1004aed6:	687b      	ldr	r3, [r7, #4]
1004aed8:	791b      	ldrb	r3, [r3, #4]
1004aeda:	b2db      	uxtb	r3, r3
1004aedc:	2b00      	cmp	r3, #0
1004aede:	d103      	bne.n	1004aee8 <HAL_PKA_Init+0x28>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
1004aee0:	687b      	ldr	r3, [r7, #4]
1004aee2:	0018      	movs	r0, r3
1004aee4:	f7fc fc9e 	bl	10047824 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }
#if defined (STM32WB05)|| defined(STM32WB09)
    /* Get current tick */
    tickstart = HAL_GetTick();
1004aee8:	f7fd fab2 	bl	10048450 <HAL_GetTick>
1004aeec:	0003      	movs	r3, r0
1004aeee:	60bb      	str	r3, [r7, #8]
#endif /* STM32WB05 || STM32WB09 */
    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
1004aef0:	687b      	ldr	r3, [r7, #4]
1004aef2:	2202      	movs	r2, #2
1004aef4:	711a      	strb	r2, [r3, #4]
    SET_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
    CLEAR_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
#endif /* STM32WB06 || STM32WB07 */
#if defined (STM32WB05)|| defined(STM32WB09)

    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
1004aef6:	e011      	b.n	1004af1c <HAL_PKA_Init+0x5c>
    {
      hpka->Instance->CR = PKA_CR_EN;
1004aef8:	687b      	ldr	r3, [r7, #4]
1004aefa:	681b      	ldr	r3, [r3, #0]
1004aefc:	2201      	movs	r2, #1
1004aefe:	601a      	str	r2, [r3, #0]

      /* Check the Timeout */
      if ((HAL_GetTick() - tickstart) > PKA_RAM_ERASE_TIMEOUT)
1004af00:	f7fd faa6 	bl	10048450 <HAL_GetTick>
1004af04:	0002      	movs	r2, r0
1004af06:	68bb      	ldr	r3, [r7, #8]
1004af08:	1ad2      	subs	r2, r2, r3
1004af0a:	23fa      	movs	r3, #250	@ 0xfa
1004af0c:	009b      	lsls	r3, r3, #2
1004af0e:	429a      	cmp	r2, r3
1004af10:	d904      	bls.n	1004af1c <HAL_PKA_Init+0x5c>
      {
        /* Set timeout status */
        err = HAL_TIMEOUT;
1004af12:	230f      	movs	r3, #15
1004af14:	18fb      	adds	r3, r7, r3
1004af16:	2203      	movs	r2, #3
1004af18:	701a      	strb	r2, [r3, #0]
        break;
1004af1a:	e006      	b.n	1004af2a <HAL_PKA_Init+0x6a>
    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
1004af1c:	687b      	ldr	r3, [r7, #4]
1004af1e:	681b      	ldr	r3, [r3, #0]
1004af20:	681b      	ldr	r3, [r3, #0]
1004af22:	2201      	movs	r2, #1
1004af24:	4013      	ands	r3, r2
1004af26:	2b01      	cmp	r3, #1
1004af28:	d1e6      	bne.n	1004aef8 <HAL_PKA_Init+0x38>
      }
    }
    if (err == HAL_OK)
1004af2a:	230f      	movs	r3, #15
1004af2c:	18fb      	adds	r3, r7, r3
1004af2e:	781b      	ldrb	r3, [r3, #0]
1004af30:	2b00      	cmp	r3, #0
1004af32:	d10f      	bne.n	1004af54 <HAL_PKA_Init+0x94>
    {
      /* Reset any pending flag */
      SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
1004af34:	687b      	ldr	r3, [r7, #4]
1004af36:	681b      	ldr	r3, [r3, #0]
1004af38:	689a      	ldr	r2, [r3, #8]
1004af3a:	687b      	ldr	r3, [r7, #4]
1004af3c:	681b      	ldr	r3, [r3, #0]
1004af3e:	21d0      	movs	r1, #208	@ 0xd0
1004af40:	0349      	lsls	r1, r1, #13
1004af42:	430a      	orrs	r2, r1
1004af44:	609a      	str	r2, [r3, #8]

      /* Initialize the error code */
      hpka->ErrorCode = HAL_PKA_ERROR_NONE;
1004af46:	687b      	ldr	r3, [r7, #4]
1004af48:	2200      	movs	r2, #0
1004af4a:	609a      	str	r2, [r3, #8]

      /* Set the state to ready */
      hpka->State = HAL_PKA_STATE_READY;
1004af4c:	687b      	ldr	r3, [r7, #4]
1004af4e:	2201      	movs	r2, #1
1004af50:	711a      	strb	r2, [r3, #4]
1004af52:	e00a      	b.n	1004af6a <HAL_PKA_Init+0xaa>
    }
    else
    {
      /* Set the error code to timeout error */
      hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
1004af54:	687b      	ldr	r3, [r7, #4]
1004af56:	2204      	movs	r2, #4
1004af58:	609a      	str	r2, [r3, #8]

      /* Set the state to error */
      hpka->State = HAL_PKA_STATE_ERROR;
1004af5a:	687b      	ldr	r3, [r7, #4]
1004af5c:	2203      	movs	r2, #3
1004af5e:	711a      	strb	r2, [r3, #4]
1004af60:	e003      	b.n	1004af6a <HAL_PKA_Init+0xaa>
#endif /* STM32WB06 || STM32WB07 */

  }
  else
  {
    err = HAL_ERROR;
1004af62:	230f      	movs	r3, #15
1004af64:	18fb      	adds	r3, r7, r3
1004af66:	2201      	movs	r2, #1
1004af68:	701a      	strb	r2, [r3, #0]
  }

  return err;
1004af6a:	230f      	movs	r3, #15
1004af6c:	18fb      	adds	r3, r7, r3
1004af6e:	781b      	ldrb	r3, [r3, #0]
}
1004af70:	0018      	movs	r0, r3
1004af72:	46bd      	mov	sp, r7
1004af74:	b004      	add	sp, #16
1004af76:	bd80      	pop	{r7, pc}

1004af78 <HAL_PWREx_DisableGPIOPullUp>:
  *         or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
1004af78:	b580      	push	{r7, lr}
1004af7a:	b084      	sub	sp, #16
1004af7c:	af00      	add	r7, sp, #0
1004af7e:	6078      	str	r0, [r7, #4]
1004af80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004af82:	230f      	movs	r3, #15
1004af84:	18fb      	adds	r3, r7, r3
1004af86:	2200      	movs	r2, #0
1004af88:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
1004af8a:	687b      	ldr	r3, [r7, #4]
1004af8c:	2b00      	cmp	r3, #0
1004af8e:	d003      	beq.n	1004af98 <HAL_PWREx_DisableGPIOPullUp+0x20>
1004af90:	687b      	ldr	r3, [r7, #4]
1004af92:	2b01      	cmp	r3, #1
1004af94:	d008      	beq.n	1004afa8 <HAL_PWREx_DisableGPIOPullUp+0x30>
1004af96:	e00f      	b.n	1004afb8 <HAL_PWREx_DisableGPIOPullUp+0x40>
  {
    case PWR_GPIO_A:
      CLEAR_BIT(PWR->PUCRA, GPIONumber);
1004af98:	4b0d      	ldr	r3, [pc, #52]	@ (1004afd0 <HAL_PWREx_DisableGPIOPullUp+0x58>)
1004af9a:	6a1a      	ldr	r2, [r3, #32]
1004af9c:	683b      	ldr	r3, [r7, #0]
1004af9e:	43d9      	mvns	r1, r3
1004afa0:	4b0b      	ldr	r3, [pc, #44]	@ (1004afd0 <HAL_PWREx_DisableGPIOPullUp+0x58>)
1004afa2:	400a      	ands	r2, r1
1004afa4:	621a      	str	r2, [r3, #32]
      break;
1004afa6:	e00c      	b.n	1004afc2 <HAL_PWREx_DisableGPIOPullUp+0x4a>
    case PWR_GPIO_B:
      CLEAR_BIT(PWR->PUCRB, GPIONumber);
1004afa8:	4b09      	ldr	r3, [pc, #36]	@ (1004afd0 <HAL_PWREx_DisableGPIOPullUp+0x58>)
1004afaa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004afac:	683b      	ldr	r3, [r7, #0]
1004afae:	43d9      	mvns	r1, r3
1004afb0:	4b07      	ldr	r3, [pc, #28]	@ (1004afd0 <HAL_PWREx_DisableGPIOPullUp+0x58>)
1004afb2:	400a      	ands	r2, r1
1004afb4:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
1004afb6:	e004      	b.n	1004afc2 <HAL_PWREx_DisableGPIOPullUp+0x4a>
    default:
      status = HAL_ERROR;
1004afb8:	230f      	movs	r3, #15
1004afba:	18fb      	adds	r3, r7, r3
1004afbc:	2201      	movs	r2, #1
1004afbe:	701a      	strb	r2, [r3, #0]
      break;
1004afc0:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
1004afc2:	230f      	movs	r3, #15
1004afc4:	18fb      	adds	r3, r7, r3
1004afc6:	781b      	ldrb	r3, [r3, #0]
}
1004afc8:	0018      	movs	r0, r3
1004afca:	46bd      	mov	sp, r7
1004afcc:	b004      	add	sp, #16
1004afce:	bd80      	pop	{r7, pc}
1004afd0:	48500000 	.word	0x48500000

1004afd4 <HAL_PWREx_DisableGPIOPullDown>:
  *         or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
1004afd4:	b580      	push	{r7, lr}
1004afd6:	b084      	sub	sp, #16
1004afd8:	af00      	add	r7, sp, #0
1004afda:	6078      	str	r0, [r7, #4]
1004afdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004afde:	230f      	movs	r3, #15
1004afe0:	18fb      	adds	r3, r7, r3
1004afe2:	2200      	movs	r2, #0
1004afe4:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
1004afe6:	687b      	ldr	r3, [r7, #4]
1004afe8:	2b00      	cmp	r3, #0
1004afea:	d003      	beq.n	1004aff4 <HAL_PWREx_DisableGPIOPullDown+0x20>
1004afec:	687b      	ldr	r3, [r7, #4]
1004afee:	2b01      	cmp	r3, #1
1004aff0:	d008      	beq.n	1004b004 <HAL_PWREx_DisableGPIOPullDown+0x30>
1004aff2:	e00f      	b.n	1004b014 <HAL_PWREx_DisableGPIOPullDown+0x40>
  {
    case PWR_GPIO_A:
      CLEAR_BIT(PWR->PDCRA, GPIONumber);
1004aff4:	4b0d      	ldr	r3, [pc, #52]	@ (1004b02c <HAL_PWREx_DisableGPIOPullDown+0x58>)
1004aff6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004aff8:	683b      	ldr	r3, [r7, #0]
1004affa:	43d9      	mvns	r1, r3
1004affc:	4b0b      	ldr	r3, [pc, #44]	@ (1004b02c <HAL_PWREx_DisableGPIOPullDown+0x58>)
1004affe:	400a      	ands	r2, r1
1004b000:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
1004b002:	e00c      	b.n	1004b01e <HAL_PWREx_DisableGPIOPullDown+0x4a>
    case PWR_GPIO_B:
      CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004b004:	4b09      	ldr	r3, [pc, #36]	@ (1004b02c <HAL_PWREx_DisableGPIOPullDown+0x58>)
1004b006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004b008:	683b      	ldr	r3, [r7, #0]
1004b00a:	43d9      	mvns	r1, r3
1004b00c:	4b07      	ldr	r3, [pc, #28]	@ (1004b02c <HAL_PWREx_DisableGPIOPullDown+0x58>)
1004b00e:	400a      	ands	r2, r1
1004b010:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
1004b012:	e004      	b.n	1004b01e <HAL_PWREx_DisableGPIOPullDown+0x4a>
    default:
      status = HAL_ERROR;
1004b014:	230f      	movs	r3, #15
1004b016:	18fb      	adds	r3, r7, r3
1004b018:	2201      	movs	r2, #1
1004b01a:	701a      	strb	r2, [r3, #0]
      break;
1004b01c:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
1004b01e:	230f      	movs	r3, #15
1004b020:	18fb      	adds	r3, r7, r3
1004b022:	781b      	ldrb	r3, [r3, #0]
}
1004b024:	0018      	movs	r0, r3
1004b026:	46bd      	mov	sp, r7
1004b028:	b004      	add	sp, #16
1004b02a:	bd80      	pop	{r7, pc}
1004b02c:	48500000 	.word	0x48500000

1004b030 <LL_RADIO_SetRadioConfigurationAddressPointer>:
  * @rmtoll WORD0          RADIOCONFIGPTR       LL_RADIO_SetRadioConfigurationAddressPointer
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRadioConfigurationAddressPointer(uint32_t value)
{
1004b030:	b580      	push	{r7, lr}
1004b032:	b082      	sub	sp, #8
1004b034:	af00      	add	r7, sp, #0
1004b036:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD0, GLOBAL_WORD0_RADIOCONFIGPTR, value);
1004b038:	4b04      	ldr	r3, [pc, #16]	@ (1004b04c <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
1004b03a:	681b      	ldr	r3, [r3, #0]
1004b03c:	4b03      	ldr	r3, [pc, #12]	@ (1004b04c <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
1004b03e:	687a      	ldr	r2, [r7, #4]
1004b040:	601a      	str	r2, [r3, #0]
}
1004b042:	46c0      	nop			@ (mov r8, r8)
1004b044:	46bd      	mov	sp, r7
1004b046:	b002      	add	sp, #8
1004b048:	bd80      	pop	{r7, pc}
1004b04a:	46c0      	nop			@ (mov r8, r8)
1004b04c:	200000c0 	.word	0x200000c0

1004b050 <LL_RADIO_SetWakeupInitDelay>:
  * @rmtoll WORD1          WAKEUPINITDELAY       LL_RADIO_SetWakeupInitDelay
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetWakeupInitDelay(uint32_t value)
{
1004b050:	b580      	push	{r7, lr}
1004b052:	b082      	sub	sp, #8
1004b054:	af00      	add	r7, sp, #0
1004b056:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_WAKEUPINITDELAY, value);
1004b058:	4b07      	ldr	r3, [pc, #28]	@ (1004b078 <LL_RADIO_SetWakeupInitDelay+0x28>)
1004b05a:	685b      	ldr	r3, [r3, #4]
1004b05c:	4a07      	ldr	r2, [pc, #28]	@ (1004b07c <LL_RADIO_SetWakeupInitDelay+0x2c>)
1004b05e:	4013      	ands	r3, r2
1004b060:	0019      	movs	r1, r3
1004b062:	687b      	ldr	r3, [r7, #4]
1004b064:	021b      	lsls	r3, r3, #8
1004b066:	041b      	lsls	r3, r3, #16
1004b068:	0c1a      	lsrs	r2, r3, #16
1004b06a:	4b03      	ldr	r3, [pc, #12]	@ (1004b078 <LL_RADIO_SetWakeupInitDelay+0x28>)
1004b06c:	430a      	orrs	r2, r1
1004b06e:	605a      	str	r2, [r3, #4]
}
1004b070:	46c0      	nop			@ (mov r8, r8)
1004b072:	46bd      	mov	sp, r7
1004b074:	b002      	add	sp, #8
1004b076:	bd80      	pop	{r7, pc}
1004b078:	200000c0 	.word	0x200000c0
1004b07c:	ffff00ff 	.word	0xffff00ff

1004b080 <LL_RADIO_SetTimer12InitDelayCal>:
  * @rmtoll WORD1          TIMER12INITDELAYCAL       LL_RADIO_SetTimer12InitDelayCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayCal(uint32_t value)
{
1004b080:	b580      	push	{r7, lr}
1004b082:	b082      	sub	sp, #8
1004b084:	af00      	add	r7, sp, #0
1004b086:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER12INITDELAYCAL, value);
1004b088:	4b08      	ldr	r3, [pc, #32]	@ (1004b0ac <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
1004b08a:	685b      	ldr	r3, [r3, #4]
1004b08c:	4a08      	ldr	r2, [pc, #32]	@ (1004b0b0 <LL_RADIO_SetTimer12InitDelayCal+0x30>)
1004b08e:	4013      	ands	r3, r2
1004b090:	0019      	movs	r1, r3
1004b092:	687b      	ldr	r3, [r7, #4]
1004b094:	041a      	lsls	r2, r3, #16
1004b096:	23ff      	movs	r3, #255	@ 0xff
1004b098:	041b      	lsls	r3, r3, #16
1004b09a:	401a      	ands	r2, r3
1004b09c:	4b03      	ldr	r3, [pc, #12]	@ (1004b0ac <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
1004b09e:	430a      	orrs	r2, r1
1004b0a0:	605a      	str	r2, [r3, #4]
}
1004b0a2:	46c0      	nop			@ (mov r8, r8)
1004b0a4:	46bd      	mov	sp, r7
1004b0a6:	b002      	add	sp, #8
1004b0a8:	bd80      	pop	{r7, pc}
1004b0aa:	46c0      	nop			@ (mov r8, r8)
1004b0ac:	200000c0 	.word	0x200000c0
1004b0b0:	ff00ffff 	.word	0xff00ffff

1004b0b4 <LL_RADIO_SetTimer12InitDelayNoCal>:
  * @rmtoll WORD1          TIMER2INITDELAYNOCAL       LL_RADIO_SetTimer12InitDelayNoCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayNoCal(uint32_t value)
{
1004b0b4:	b580      	push	{r7, lr}
1004b0b6:	b082      	sub	sp, #8
1004b0b8:	af00      	add	r7, sp, #0
1004b0ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER2INITDELAYNOCAL, value);
1004b0bc:	4b06      	ldr	r3, [pc, #24]	@ (1004b0d8 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
1004b0be:	685b      	ldr	r3, [r3, #4]
1004b0c0:	021b      	lsls	r3, r3, #8
1004b0c2:	0a19      	lsrs	r1, r3, #8
1004b0c4:	687b      	ldr	r3, [r7, #4]
1004b0c6:	061a      	lsls	r2, r3, #24
1004b0c8:	4b03      	ldr	r3, [pc, #12]	@ (1004b0d8 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
1004b0ca:	430a      	orrs	r2, r1
1004b0cc:	605a      	str	r2, [r3, #4]
}
1004b0ce:	46c0      	nop			@ (mov r8, r8)
1004b0d0:	46bd      	mov	sp, r7
1004b0d2:	b002      	add	sp, #8
1004b0d4:	bd80      	pop	{r7, pc}
1004b0d6:	46c0      	nop			@ (mov r8, r8)
1004b0d8:	200000c0 	.word	0x200000c0

1004b0dc <LL_RADIO_SetTransmitCalDelayChk>:
  * @rmtoll WORD2          TRANSMITCALDELAYCHK       LL_RADIO_SetTransmitCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitCalDelayChk(uint32_t value)
{
1004b0dc:	b580      	push	{r7, lr}
1004b0de:	b082      	sub	sp, #8
1004b0e0:	af00      	add	r7, sp, #0
1004b0e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITCALDELAYCHK, value);
1004b0e4:	4b07      	ldr	r3, [pc, #28]	@ (1004b104 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
1004b0e6:	689b      	ldr	r3, [r3, #8]
1004b0e8:	22ff      	movs	r2, #255	@ 0xff
1004b0ea:	4393      	bics	r3, r2
1004b0ec:	0019      	movs	r1, r3
1004b0ee:	687b      	ldr	r3, [r7, #4]
1004b0f0:	22ff      	movs	r2, #255	@ 0xff
1004b0f2:	401a      	ands	r2, r3
1004b0f4:	4b03      	ldr	r3, [pc, #12]	@ (1004b104 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
1004b0f6:	430a      	orrs	r2, r1
1004b0f8:	609a      	str	r2, [r3, #8]
}
1004b0fa:	46c0      	nop			@ (mov r8, r8)
1004b0fc:	46bd      	mov	sp, r7
1004b0fe:	b002      	add	sp, #8
1004b100:	bd80      	pop	{r7, pc}
1004b102:	46c0      	nop			@ (mov r8, r8)
1004b104:	200000c0 	.word	0x200000c0

1004b108 <LL_RADIO_SetTransmitNoCalDelayChk>:
  * @rmtoll WORD2          TRANSMITNOCALDELAYCHK       LL_RADIO_SetTransmitNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitNoCalDelayChk(uint32_t value)
{
1004b108:	b580      	push	{r7, lr}
1004b10a:	b082      	sub	sp, #8
1004b10c:	af00      	add	r7, sp, #0
1004b10e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITNOCALDELAYCHK, value);
1004b110:	4b07      	ldr	r3, [pc, #28]	@ (1004b130 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
1004b112:	689b      	ldr	r3, [r3, #8]
1004b114:	4a07      	ldr	r2, [pc, #28]	@ (1004b134 <LL_RADIO_SetTransmitNoCalDelayChk+0x2c>)
1004b116:	4013      	ands	r3, r2
1004b118:	0019      	movs	r1, r3
1004b11a:	687b      	ldr	r3, [r7, #4]
1004b11c:	021b      	lsls	r3, r3, #8
1004b11e:	041b      	lsls	r3, r3, #16
1004b120:	0c1a      	lsrs	r2, r3, #16
1004b122:	4b03      	ldr	r3, [pc, #12]	@ (1004b130 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
1004b124:	430a      	orrs	r2, r1
1004b126:	609a      	str	r2, [r3, #8]
}
1004b128:	46c0      	nop			@ (mov r8, r8)
1004b12a:	46bd      	mov	sp, r7
1004b12c:	b002      	add	sp, #8
1004b12e:	bd80      	pop	{r7, pc}
1004b130:	200000c0 	.word	0x200000c0
1004b134:	ffff00ff 	.word	0xffff00ff

1004b138 <LL_RADIO_SetReceivedCalDelayChk>:
  * @rmtoll WORD2          RECEIVECALDELAYCHK       LL_RADIO_SetReceivedCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedCalDelayChk(uint32_t value)
{
1004b138:	b580      	push	{r7, lr}
1004b13a:	b082      	sub	sp, #8
1004b13c:	af00      	add	r7, sp, #0
1004b13e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVECALDELAYCHK, value);
1004b140:	4b08      	ldr	r3, [pc, #32]	@ (1004b164 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
1004b142:	689b      	ldr	r3, [r3, #8]
1004b144:	4a08      	ldr	r2, [pc, #32]	@ (1004b168 <LL_RADIO_SetReceivedCalDelayChk+0x30>)
1004b146:	4013      	ands	r3, r2
1004b148:	0019      	movs	r1, r3
1004b14a:	687b      	ldr	r3, [r7, #4]
1004b14c:	041a      	lsls	r2, r3, #16
1004b14e:	23ff      	movs	r3, #255	@ 0xff
1004b150:	041b      	lsls	r3, r3, #16
1004b152:	401a      	ands	r2, r3
1004b154:	4b03      	ldr	r3, [pc, #12]	@ (1004b164 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
1004b156:	430a      	orrs	r2, r1
1004b158:	609a      	str	r2, [r3, #8]
}
1004b15a:	46c0      	nop			@ (mov r8, r8)
1004b15c:	46bd      	mov	sp, r7
1004b15e:	b002      	add	sp, #8
1004b160:	bd80      	pop	{r7, pc}
1004b162:	46c0      	nop			@ (mov r8, r8)
1004b164:	200000c0 	.word	0x200000c0
1004b168:	ff00ffff 	.word	0xff00ffff

1004b16c <LL_RADIO_SetReceivedNoCalDelayChk>:
  * @rmtoll WORD2          RECEIVENOCALDELAYCHK       LL_RADIO_SetReceivedNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedNoCalDelayChk(uint32_t value)
{
1004b16c:	b580      	push	{r7, lr}
1004b16e:	b082      	sub	sp, #8
1004b170:	af00      	add	r7, sp, #0
1004b172:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVENOCALDELAYCHK, value);
1004b174:	4b06      	ldr	r3, [pc, #24]	@ (1004b190 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
1004b176:	689b      	ldr	r3, [r3, #8]
1004b178:	021b      	lsls	r3, r3, #8
1004b17a:	0a19      	lsrs	r1, r3, #8
1004b17c:	687b      	ldr	r3, [r7, #4]
1004b17e:	061a      	lsls	r2, r3, #24
1004b180:	4b03      	ldr	r3, [pc, #12]	@ (1004b190 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
1004b182:	430a      	orrs	r2, r1
1004b184:	609a      	str	r2, [r3, #8]
}
1004b186:	46c0      	nop			@ (mov r8, r8)
1004b188:	46bd      	mov	sp, r7
1004b18a:	b002      	add	sp, #8
1004b18c:	bd80      	pop	{r7, pc}
1004b18e:	46c0      	nop			@ (mov r8, r8)
1004b190:	200000c0 	.word	0x200000c0

1004b194 <LL_RADIO_SetConfigurationEndDuration>:
  * @rmtoll WORD3          CONFIGENDDURATION       LL_RADIO_SetConfigurationEndDuration
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetConfigurationEndDuration(uint32_t value)
{
1004b194:	b580      	push	{r7, lr}
1004b196:	b082      	sub	sp, #8
1004b198:	af00      	add	r7, sp, #0
1004b19a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_CONFIGENDDURATION, value);
1004b19c:	4b07      	ldr	r3, [pc, #28]	@ (1004b1bc <LL_RADIO_SetConfigurationEndDuration+0x28>)
1004b19e:	68db      	ldr	r3, [r3, #12]
1004b1a0:	22ff      	movs	r2, #255	@ 0xff
1004b1a2:	4393      	bics	r3, r2
1004b1a4:	0019      	movs	r1, r3
1004b1a6:	687b      	ldr	r3, [r7, #4]
1004b1a8:	22ff      	movs	r2, #255	@ 0xff
1004b1aa:	401a      	ands	r2, r3
1004b1ac:	4b03      	ldr	r3, [pc, #12]	@ (1004b1bc <LL_RADIO_SetConfigurationEndDuration+0x28>)
1004b1ae:	430a      	orrs	r2, r1
1004b1b0:	60da      	str	r2, [r3, #12]
}
1004b1b2:	46c0      	nop			@ (mov r8, r8)
1004b1b4:	46bd      	mov	sp, r7
1004b1b6:	b002      	add	sp, #8
1004b1b8:	bd80      	pop	{r7, pc}
1004b1ba:	46c0      	nop			@ (mov r8, r8)
1004b1bc:	200000c0 	.word	0x200000c0

1004b1c0 <LL_RADIO_SetTxDataReadyCheck>:
  * @rmtoll WORD3          TXDATAREADYCHECK       LL_RADIO_SetTxDataReadyCheck
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDataReadyCheck(uint32_t value)
{
1004b1c0:	b580      	push	{r7, lr}
1004b1c2:	b082      	sub	sp, #8
1004b1c4:	af00      	add	r7, sp, #0
1004b1c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDATAREADYCHECK, value);
1004b1c8:	4b07      	ldr	r3, [pc, #28]	@ (1004b1e8 <LL_RADIO_SetTxDataReadyCheck+0x28>)
1004b1ca:	68db      	ldr	r3, [r3, #12]
1004b1cc:	4a07      	ldr	r2, [pc, #28]	@ (1004b1ec <LL_RADIO_SetTxDataReadyCheck+0x2c>)
1004b1ce:	4013      	ands	r3, r2
1004b1d0:	0019      	movs	r1, r3
1004b1d2:	687b      	ldr	r3, [r7, #4]
1004b1d4:	021b      	lsls	r3, r3, #8
1004b1d6:	041b      	lsls	r3, r3, #16
1004b1d8:	0c1a      	lsrs	r2, r3, #16
1004b1da:	4b03      	ldr	r3, [pc, #12]	@ (1004b1e8 <LL_RADIO_SetTxDataReadyCheck+0x28>)
1004b1dc:	430a      	orrs	r2, r1
1004b1de:	60da      	str	r2, [r3, #12]
}
1004b1e0:	46c0      	nop			@ (mov r8, r8)
1004b1e2:	46bd      	mov	sp, r7
1004b1e4:	b002      	add	sp, #8
1004b1e6:	bd80      	pop	{r7, pc}
1004b1e8:	200000c0 	.word	0x200000c0
1004b1ec:	ffff00ff 	.word	0xffff00ff

1004b1f0 <LL_RADIO_SetTxDelayStart>:
  * @rmtoll WORD3          TXDELAYSTART       LL_RADIO_SetTxDelayStart
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayStart(uint32_t value)
{
1004b1f0:	b580      	push	{r7, lr}
1004b1f2:	b082      	sub	sp, #8
1004b1f4:	af00      	add	r7, sp, #0
1004b1f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYSTART, value);
1004b1f8:	4b08      	ldr	r3, [pc, #32]	@ (1004b21c <LL_RADIO_SetTxDelayStart+0x2c>)
1004b1fa:	68db      	ldr	r3, [r3, #12]
1004b1fc:	4a08      	ldr	r2, [pc, #32]	@ (1004b220 <LL_RADIO_SetTxDelayStart+0x30>)
1004b1fe:	4013      	ands	r3, r2
1004b200:	0019      	movs	r1, r3
1004b202:	687b      	ldr	r3, [r7, #4]
1004b204:	041a      	lsls	r2, r3, #16
1004b206:	23ff      	movs	r3, #255	@ 0xff
1004b208:	041b      	lsls	r3, r3, #16
1004b20a:	401a      	ands	r2, r3
1004b20c:	4b03      	ldr	r3, [pc, #12]	@ (1004b21c <LL_RADIO_SetTxDelayStart+0x2c>)
1004b20e:	430a      	orrs	r2, r1
1004b210:	60da      	str	r2, [r3, #12]
}
1004b212:	46c0      	nop			@ (mov r8, r8)
1004b214:	46bd      	mov	sp, r7
1004b216:	b002      	add	sp, #8
1004b218:	bd80      	pop	{r7, pc}
1004b21a:	46c0      	nop			@ (mov r8, r8)
1004b21c:	200000c0 	.word	0x200000c0
1004b220:	ff00ffff 	.word	0xff00ffff

1004b224 <LL_RADIO_SetTxDelayEnd>:
  * @rmtoll WORD3          TXDELAYEND       LL_RADIO_SetTxDelayEnd
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayEnd(uint32_t value)
{
1004b224:	b580      	push	{r7, lr}
1004b226:	b082      	sub	sp, #8
1004b228:	af00      	add	r7, sp, #0
1004b22a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYEND, value);
1004b22c:	4b08      	ldr	r3, [pc, #32]	@ (1004b250 <LL_RADIO_SetTxDelayEnd+0x2c>)
1004b22e:	68db      	ldr	r3, [r3, #12]
1004b230:	4a08      	ldr	r2, [pc, #32]	@ (1004b254 <LL_RADIO_SetTxDelayEnd+0x30>)
1004b232:	4013      	ands	r3, r2
1004b234:	0019      	movs	r1, r3
1004b236:	687b      	ldr	r3, [r7, #4]
1004b238:	061a      	lsls	r2, r3, #24
1004b23a:	23fc      	movs	r3, #252	@ 0xfc
1004b23c:	059b      	lsls	r3, r3, #22
1004b23e:	401a      	ands	r2, r3
1004b240:	4b03      	ldr	r3, [pc, #12]	@ (1004b250 <LL_RADIO_SetTxDelayEnd+0x2c>)
1004b242:	430a      	orrs	r2, r1
1004b244:	60da      	str	r2, [r3, #12]
}
1004b246:	46c0      	nop			@ (mov r8, r8)
1004b248:	46bd      	mov	sp, r7
1004b24a:	b002      	add	sp, #8
1004b24c:	bd80      	pop	{r7, pc}
1004b24e:	46c0      	nop			@ (mov r8, r8)
1004b250:	200000c0 	.word	0x200000c0
1004b254:	c0ffffff 	.word	0xc0ffffff

1004b258 <LL_RADIO_SetTransmissionReadyTimeout>:
  * @rmtoll WORD4          TXREADYTIMEOUT       LL_RADIO_SetTransmissionReadyTimeout
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionReadyTimeout(uint32_t value)
{
1004b258:	b580      	push	{r7, lr}
1004b25a:	b082      	sub	sp, #8
1004b25c:	af00      	add	r7, sp, #0
1004b25e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_TXREADYTIMEOUT, value);
1004b260:	4b07      	ldr	r3, [pc, #28]	@ (1004b280 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
1004b262:	691b      	ldr	r3, [r3, #16]
1004b264:	22ff      	movs	r2, #255	@ 0xff
1004b266:	4393      	bics	r3, r2
1004b268:	0019      	movs	r1, r3
1004b26a:	687b      	ldr	r3, [r7, #4]
1004b26c:	22ff      	movs	r2, #255	@ 0xff
1004b26e:	401a      	ands	r2, r3
1004b270:	4b03      	ldr	r3, [pc, #12]	@ (1004b280 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
1004b272:	430a      	orrs	r2, r1
1004b274:	611a      	str	r2, [r3, #16]
}
1004b276:	46c0      	nop			@ (mov r8, r8)
1004b278:	46bd      	mov	sp, r7
1004b27a:	b002      	add	sp, #8
1004b27c:	bd80      	pop	{r7, pc}
1004b27e:	46c0      	nop			@ (mov r8, r8)
1004b280:	200000c0 	.word	0x200000c0

1004b284 <LL_RADIO_ChkFlagAutoclearEnable_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          CHKFLAGAUTOCLEARENA            LL_RADIO_ChkFlagAutoclearEnable_Enable
  * @retval uint32_t
  */
__STATIC_INLINE void LL_RADIO_ChkFlagAutoclearEnable_Enable(void)
{
1004b284:	b580      	push	{r7, lr}
1004b286:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_CHKFLAGAUTOCLEARENA);
1004b288:	4b04      	ldr	r3, [pc, #16]	@ (1004b29c <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
1004b28a:	695a      	ldr	r2, [r3, #20]
1004b28c:	4b03      	ldr	r3, [pc, #12]	@ (1004b29c <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
1004b28e:	2104      	movs	r1, #4
1004b290:	430a      	orrs	r2, r1
1004b292:	615a      	str	r2, [r3, #20]
}
1004b294:	46c0      	nop			@ (mov r8, r8)
1004b296:	46bd      	mov	sp, r7
1004b298:	bd80      	pop	{r7, pc}
1004b29a:	46c0      	nop			@ (mov r8, r8)
1004b29c:	200000c0 	.word	0x200000c0

1004b2a0 <LL_RADIO_NoActiveLErrorInterrupt_Enable>:
  * @brief  Indicate if INTNOACTIVELERROR is enabled
  * @rmtoll WORD5          INTNOACTIVELERROR            LL_RADIO_NoActiveLErrorInterrupt_Enable
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_RADIO_NoActiveLErrorInterrupt_Enable(void)
{
1004b2a0:	b580      	push	{r7, lr}
1004b2a2:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTNOACTIVELERROR);
1004b2a4:	4b04      	ldr	r3, [pc, #16]	@ (1004b2b8 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
1004b2a6:	695a      	ldr	r2, [r3, #20]
1004b2a8:	4b03      	ldr	r3, [pc, #12]	@ (1004b2b8 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
1004b2aa:	2180      	movs	r1, #128	@ 0x80
1004b2ac:	0409      	lsls	r1, r1, #16
1004b2ae:	430a      	orrs	r2, r1
1004b2b0:	615a      	str	r2, [r3, #20]
}
1004b2b2:	46c0      	nop			@ (mov r8, r8)
1004b2b4:	46bd      	mov	sp, r7
1004b2b6:	bd80      	pop	{r7, pc}
1004b2b8:	200000c0 	.word	0x200000c0

1004b2bc <LL_RADIO_TxRxSkipInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTTXRXSKIP            LL_RADIO_TxRxSkipInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxRxSkipInterrupt_Enable(void)
{
1004b2bc:	b580      	push	{r7, lr}
1004b2be:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTTXRXSKIP);
1004b2c0:	4b04      	ldr	r3, [pc, #16]	@ (1004b2d4 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
1004b2c2:	695a      	ldr	r2, [r3, #20]
1004b2c4:	4b03      	ldr	r3, [pc, #12]	@ (1004b2d4 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
1004b2c6:	2180      	movs	r1, #128	@ 0x80
1004b2c8:	0589      	lsls	r1, r1, #22
1004b2ca:	430a      	orrs	r2, r1
1004b2cc:	615a      	str	r2, [r3, #20]
}
1004b2ce:	46c0      	nop			@ (mov r8, r8)
1004b2d0:	46bd      	mov	sp, r7
1004b2d2:	bd80      	pop	{r7, pc}
1004b2d4:	200000c0 	.word	0x200000c0

1004b2d8 <LL_RADIO_Active2ErrorInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTACTIVE2ERR            LL_RADIO_Active2ErrorInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Active2ErrorInterrupt_Enable(void)
{
1004b2d8:	b580      	push	{r7, lr}
1004b2da:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTACTIVE2ERR);
1004b2dc:	4b04      	ldr	r3, [pc, #16]	@ (1004b2f0 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
1004b2de:	695a      	ldr	r2, [r3, #20]
1004b2e0:	4b03      	ldr	r3, [pc, #12]	@ (1004b2f0 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
1004b2e2:	2180      	movs	r1, #128	@ 0x80
1004b2e4:	05c9      	lsls	r1, r1, #23
1004b2e6:	430a      	orrs	r2, r1
1004b2e8:	615a      	str	r2, [r3, #20]
}
1004b2ea:	46c0      	nop			@ (mov r8, r8)
1004b2ec:	46bd      	mov	sp, r7
1004b2ee:	bd80      	pop	{r7, pc}
1004b2f0:	200000c0 	.word	0x200000c0

1004b2f4 <LL_RADIO_SetDefaultAntennaID>:
  * @rmtoll WORD6          DEFAULTANTENNAID       LL_RADIO_SetDefaultAntennaID
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetDefaultAntennaID(uint32_t value)
{
1004b2f4:	b580      	push	{r7, lr}
1004b2f6:	b082      	sub	sp, #8
1004b2f8:	af00      	add	r7, sp, #0
1004b2fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD6, GLOBAL_WORD6_DEFAULTANTENNAID, value);
1004b2fc:	4b07      	ldr	r3, [pc, #28]	@ (1004b31c <LL_RADIO_SetDefaultAntennaID+0x28>)
1004b2fe:	699b      	ldr	r3, [r3, #24]
1004b300:	227f      	movs	r2, #127	@ 0x7f
1004b302:	4393      	bics	r3, r2
1004b304:	0019      	movs	r1, r3
1004b306:	687b      	ldr	r3, [r7, #4]
1004b308:	227f      	movs	r2, #127	@ 0x7f
1004b30a:	401a      	ands	r2, r3
1004b30c:	4b03      	ldr	r3, [pc, #12]	@ (1004b31c <LL_RADIO_SetDefaultAntennaID+0x28>)
1004b30e:	430a      	orrs	r2, r1
1004b310:	619a      	str	r2, [r3, #24]
}
1004b312:	46c0      	nop			@ (mov r8, r8)
1004b314:	46bd      	mov	sp, r7
1004b316:	b002      	add	sp, #8
1004b318:	bd80      	pop	{r7, pc}
1004b31a:	46c0      	nop			@ (mov r8, r8)
1004b31c:	200000c0 	.word	0x200000c0

1004b320 <LL_RADIO_TIMER_DisableTimer1>:
{
1004b320:	b580      	push	{r7, lr}
1004b322:	b082      	sub	sp, #8
1004b324:	af00      	add	r7, sp, #0
1004b326:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004b328:	687b      	ldr	r3, [r7, #4]
1004b32a:	68db      	ldr	r3, [r3, #12]
1004b32c:	2203      	movs	r2, #3
1004b32e:	4393      	bics	r3, r2
1004b330:	001a      	movs	r2, r3
1004b332:	687b      	ldr	r3, [r7, #4]
1004b334:	60da      	str	r2, [r3, #12]
}
1004b336:	46c0      	nop			@ (mov r8, r8)
1004b338:	46bd      	mov	sp, r7
1004b33a:	b002      	add	sp, #8
1004b33c:	bd80      	pop	{r7, pc}

1004b33e <LL_RADIO_TIMER_DisableTimer2>:
{
1004b33e:	b580      	push	{r7, lr}
1004b340:	b082      	sub	sp, #8
1004b342:	af00      	add	r7, sp, #0
1004b344:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004b346:	687b      	ldr	r3, [r7, #4]
1004b348:	68db      	ldr	r3, [r3, #12]
1004b34a:	2203      	movs	r2, #3
1004b34c:	4393      	bics	r3, r2
1004b34e:	001a      	movs	r2, r3
1004b350:	687b      	ldr	r3, [r7, #4]
1004b352:	60da      	str	r2, [r3, #12]
}
1004b354:	46c0      	nop			@ (mov r8, r8)
1004b356:	46bd      	mov	sp, r7
1004b358:	b002      	add	sp, #8
1004b35a:	bd80      	pop	{r7, pc}

1004b35c <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
1004b35c:	b580      	push	{r7, lr}
1004b35e:	b082      	sub	sp, #8
1004b360:	af00      	add	r7, sp, #0
1004b362:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004b364:	687b      	ldr	r3, [r7, #4]
1004b366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004b368:	4a03      	ldr	r2, [pc, #12]	@ (1004b378 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
1004b36a:	401a      	ands	r2, r3
1004b36c:	687b      	ldr	r3, [r7, #4]
1004b36e:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004b370:	46c0      	nop			@ (mov r8, r8)
1004b372:	46bd      	mov	sp, r7
1004b374:	b002      	add	sp, #8
1004b376:	bd80      	pop	{r7, pc}
1004b378:	bfffffff 	.word	0xbfffffff

1004b37c <HAL_RADIO_Init>:
/**
  * @brief  Initializes the radio.
  * @retval None
  */
void HAL_RADIO_Init(RADIO_HandleTypeDef *hradio)
{
1004b37c:	b590      	push	{r4, r7, lr}
1004b37e:	b08d      	sub	sp, #52	@ 0x34
1004b380:	af00      	add	r7, sp, #0
1004b382:	6078      	str	r0, [r7, #4]
  uint32_t mr_ble_iptat;
  uint32_t mr_ble_vbg;
  uint32_t mr_ble_rxadc_delay_i;
  uint32_t mr_ble_rxadc_delay_q;
  uint8_t mr_ble_rxadc_delay_flag;
  uint8_t *hot_table_radio_config = (uint8_t *)&hot_table_radio_config_u32[4];
1004b384:	4b14      	ldr	r3, [pc, #80]	@ (1004b3d8 <HAL_RADIO_Init+0x5c>)
1004b386:	617b      	str	r3, [r7, #20]
  uint8_t index;

  /* Retrieve Trimming values from engineering flash locations */
  if (*(volatile uint32_t *)VALIDITY_LOCATION == VALIDITY_TAG)
1004b388:	4b14      	ldr	r3, [pc, #80]	@ (1004b3dc <HAL_RADIO_Init+0x60>)
1004b38a:	681b      	ldr	r3, [r3, #0]
1004b38c:	4a14      	ldr	r2, [pc, #80]	@ (1004b3e0 <HAL_RADIO_Init+0x64>)
1004b38e:	4293      	cmp	r3, r2
1004b390:	d12a      	bne.n	1004b3e8 <HAL_RADIO_Init+0x6c>
  {
    mr_ble_ibias            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IBIAS_TRIM_Msk) >> MR_BLE_IBIAS_TRIM_Pos;
1004b392:	4b14      	ldr	r3, [pc, #80]	@ (1004b3e4 <HAL_RADIO_Init+0x68>)
1004b394:	681b      	ldr	r3, [r3, #0]
1004b396:	0a1b      	lsrs	r3, r3, #8
1004b398:	220f      	movs	r2, #15
1004b39a:	4013      	ands	r3, r2
1004b39c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IPTAT_TRIM_Msk) >> MR_BLE_IPTAT_TRIM_Pos;
1004b39e:	4b11      	ldr	r3, [pc, #68]	@ (1004b3e4 <HAL_RADIO_Init+0x68>)
1004b3a0:	681b      	ldr	r3, [r3, #0]
1004b3a2:	0b1b      	lsrs	r3, r3, #12
1004b3a4:	220f      	movs	r2, #15
1004b3a6:	4013      	ands	r3, r2
1004b3a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg              = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_VBG_TRIM_Msk) >> MR_BLE_VBG_TRIM_Pos;
1004b3aa:	4b0e      	ldr	r3, [pc, #56]	@ (1004b3e4 <HAL_RADIO_Init+0x68>)
1004b3ac:	681b      	ldr	r3, [r3, #0]
1004b3ae:	0c1b      	lsrs	r3, r3, #16
1004b3b0:	220f      	movs	r2, #15
1004b3b2:	4013      	ands	r3, r2
1004b3b4:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_i    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_I_TRIM_Msk) >> MR_BLE_RXADC_DELAY_I_TRIM_Pos;
1004b3b6:	4b0b      	ldr	r3, [pc, #44]	@ (1004b3e4 <HAL_RADIO_Init+0x68>)
1004b3b8:	681b      	ldr	r3, [r3, #0]
1004b3ba:	0d1b      	lsrs	r3, r3, #20
1004b3bc:	2207      	movs	r2, #7
1004b3be:	4013      	ands	r3, r2
1004b3c0:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_Q_TRIM_Msk) >> MR_BLE_RXADC_DELAY_Q_TRIM_Pos;
1004b3c2:	4b08      	ldr	r3, [pc, #32]	@ (1004b3e4 <HAL_RADIO_Init+0x68>)
1004b3c4:	681b      	ldr	r3, [r3, #0]
1004b3c6:	0e1b      	lsrs	r3, r3, #24
1004b3c8:	2207      	movs	r2, #7
1004b3ca:	4013      	ands	r3, r2
1004b3cc:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
1004b3ce:	231b      	movs	r3, #27
1004b3d0:	18fb      	adds	r3, r7, r3
1004b3d2:	2201      	movs	r2, #1
1004b3d4:	701a      	strb	r2, [r3, #0]
1004b3d6:	e018      	b.n	1004b40a <HAL_RADIO_Init+0x8e>
1004b3d8:	200026cc 	.word	0x200026cc
1004b3dc:	10001ef8 	.word	0x10001ef8
1004b3e0:	fcbceccc 	.word	0xfcbceccc
1004b3e4:	10001ee8 	.word	0x10001ee8
  }
  else
  {
    mr_ble_ibias = 0x08;
1004b3e8:	2308      	movs	r3, #8
1004b3ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat = 0x07;
1004b3ec:	2307      	movs	r3, #7
1004b3ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg   = 0x08;
1004b3f0:	2308      	movs	r3, #8
1004b3f2:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_flag = FALSE;
1004b3f4:	211b      	movs	r1, #27
1004b3f6:	187b      	adds	r3, r7, r1
1004b3f8:	2200      	movs	r2, #0
1004b3fa:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
    mr_ble_rxadc_delay_i    = 3;
1004b3fc:	2303      	movs	r3, #3
1004b3fe:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = 3;
1004b400:	2303      	movs	r3, #3
1004b402:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
1004b404:	187b      	adds	r3, r7, r1
1004b406:	2201      	movs	r2, #1
1004b408:	701a      	strb	r2, [r3, #0]
#endif /* STM32WB05 or STM32WB09 */
  }

  BLUEGLOB->BYTE4 = BLUE_IDLE_0;
1004b40a:	4bfc      	ldr	r3, [pc, #1008]	@ (1004b7fc <HAL_RADIO_Init+0x480>)
1004b40c:	2200      	movs	r2, #0
1004b40e:	711a      	strb	r2, [r3, #4]
  if (hradio != NULL)
1004b410:	687b      	ldr	r3, [r7, #4]
1004b412:	2b00      	cmp	r3, #0
1004b414:	d003      	beq.n	1004b41e <HAL_RADIO_Init+0xa2>
  {
    HAL_RADIO_MspInit(hradio);
1004b416:	687b      	ldr	r3, [r7, #4]
1004b418:	0018      	movs	r0, r3
1004b41a:	f7fc fa17 	bl	1004784c <HAL_RADIO_MspInit>
  }
  LL_RADIO_TIMER_DisableTimer1(BLUE);
1004b41e:	23c0      	movs	r3, #192	@ 0xc0
1004b420:	05db      	lsls	r3, r3, #23
1004b422:	0018      	movs	r0, r3
1004b424:	f7ff ff7c 	bl	1004b320 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
1004b428:	23c0      	movs	r3, #192	@ 0xc0
1004b42a:	05db      	lsls	r3, r3, #23
1004b42c:	0018      	movs	r0, r3
1004b42e:	f7ff ff86 	bl	1004b33e <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004b432:	4bf3      	ldr	r3, [pc, #972]	@ (1004b800 <HAL_RADIO_Init+0x484>)
1004b434:	0018      	movs	r0, r3
1004b436:	f7ff ff91 	bl	1004b35c <LL_RADIO_TIMER_DisableBLEWakeupTimer>

  /* Write Radio Trimming values in the registers: Cbias' VBG, Cbias' IPTAT, Cbias' IBIAS, RxAnaUsr Delay Trim I & Q */
  MODIFY_REG_FIELD(RRM->CBIAS1_ANA_ENG, RRM_CBIAS1_ANA_ENG_RFD_CBIAS_VBG_TRIM, mr_ble_vbg);
1004b43a:	4af2      	ldr	r2, [pc, #968]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b43c:	239e      	movs	r3, #158	@ 0x9e
1004b43e:	009b      	lsls	r3, r3, #2
1004b440:	58d3      	ldr	r3, [r2, r3]
1004b442:	220f      	movs	r2, #15
1004b444:	4393      	bics	r3, r2
1004b446:	001a      	movs	r2, r3
1004b448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b44a:	210f      	movs	r1, #15
1004b44c:	400b      	ands	r3, r1
1004b44e:	49ed      	ldr	r1, [pc, #948]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b450:	431a      	orrs	r2, r3
1004b452:	239e      	movs	r3, #158	@ 0x9e
1004b454:	009b      	lsls	r3, r3, #2
1004b456:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IPTAT_TRIM, mr_ble_iptat);
1004b458:	4aea      	ldr	r2, [pc, #936]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b45a:	239d      	movs	r3, #157	@ 0x9d
1004b45c:	009b      	lsls	r3, r3, #2
1004b45e:	58d3      	ldr	r3, [r2, r3]
1004b460:	22f0      	movs	r2, #240	@ 0xf0
1004b462:	4393      	bics	r3, r2
1004b464:	001a      	movs	r2, r3
1004b466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004b468:	011b      	lsls	r3, r3, #4
1004b46a:	21ff      	movs	r1, #255	@ 0xff
1004b46c:	400b      	ands	r3, r1
1004b46e:	49e5      	ldr	r1, [pc, #916]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b470:	431a      	orrs	r2, r3
1004b472:	239d      	movs	r3, #157	@ 0x9d
1004b474:	009b      	lsls	r3, r3, #2
1004b476:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IBIAS_TRIM, mr_ble_ibias);
1004b478:	4ae2      	ldr	r2, [pc, #904]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b47a:	239d      	movs	r3, #157	@ 0x9d
1004b47c:	009b      	lsls	r3, r3, #2
1004b47e:	58d3      	ldr	r3, [r2, r3]
1004b480:	220f      	movs	r2, #15
1004b482:	4393      	bics	r3, r2
1004b484:	001a      	movs	r2, r3
1004b486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004b488:	210f      	movs	r1, #15
1004b48a:	400b      	ands	r3, r1
1004b48c:	49dd      	ldr	r1, [pc, #884]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b48e:	431a      	orrs	r2, r3
1004b490:	239d      	movs	r3, #157	@ 0x9d
1004b492:	009b      	lsls	r3, r3, #2
1004b494:	50ca      	str	r2, [r1, r3]
  if (mr_ble_rxadc_delay_flag)
1004b496:	231b      	movs	r3, #27
1004b498:	18fb      	adds	r3, r7, r3
1004b49a:	781b      	ldrb	r3, [r3, #0]
1004b49c:	2b00      	cmp	r3, #0
1004b49e:	d01e      	beq.n	1004b4de <HAL_RADIO_Init+0x162>
  {
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_I, mr_ble_rxadc_delay_i);
1004b4a0:	4ad8      	ldr	r2, [pc, #864]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b4a2:	2392      	movs	r3, #146	@ 0x92
1004b4a4:	009b      	lsls	r3, r3, #2
1004b4a6:	58d3      	ldr	r3, [r2, r3]
1004b4a8:	2207      	movs	r2, #7
1004b4aa:	4393      	bics	r3, r2
1004b4ac:	001a      	movs	r2, r3
1004b4ae:	6a3b      	ldr	r3, [r7, #32]
1004b4b0:	2107      	movs	r1, #7
1004b4b2:	400b      	ands	r3, r1
1004b4b4:	49d3      	ldr	r1, [pc, #844]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b4b6:	431a      	orrs	r2, r3
1004b4b8:	2392      	movs	r3, #146	@ 0x92
1004b4ba:	009b      	lsls	r3, r3, #2
1004b4bc:	50ca      	str	r2, [r1, r3]
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_Q, mr_ble_rxadc_delay_q);
1004b4be:	4ad1      	ldr	r2, [pc, #836]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b4c0:	2392      	movs	r3, #146	@ 0x92
1004b4c2:	009b      	lsls	r3, r3, #2
1004b4c4:	58d3      	ldr	r3, [r2, r3]
1004b4c6:	2238      	movs	r2, #56	@ 0x38
1004b4c8:	4393      	bics	r3, r2
1004b4ca:	001a      	movs	r2, r3
1004b4cc:	69fb      	ldr	r3, [r7, #28]
1004b4ce:	00db      	lsls	r3, r3, #3
1004b4d0:	2138      	movs	r1, #56	@ 0x38
1004b4d2:	400b      	ands	r3, r1
1004b4d4:	49cb      	ldr	r1, [pc, #812]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b4d6:	431a      	orrs	r2, r3
1004b4d8:	2392      	movs	r3, #146	@ 0x92
1004b4da:	009b      	lsls	r3, r3, #2
1004b4dc:	50ca      	str	r2, [r1, r3]
  }

  /* Radio AFC configuration */
  MODIFY_REG(RRM->AFC1_DIG_ENG, RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER | RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE,
1004b4de:	4ac9      	ldr	r2, [pc, #804]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b4e0:	23a4      	movs	r3, #164	@ 0xa4
1004b4e2:	005b      	lsls	r3, r3, #1
1004b4e4:	58d3      	ldr	r3, [r2, r3]
1004b4e6:	22ff      	movs	r2, #255	@ 0xff
1004b4e8:	4393      	bics	r3, r2
1004b4ea:	49c6      	ldr	r1, [pc, #792]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b4ec:	2255      	movs	r2, #85	@ 0x55
1004b4ee:	431a      	orrs	r2, r3
1004b4f0:	23a4      	movs	r3, #164	@ 0xa4
1004b4f2:	005b      	lsls	r3, r3, #1
1004b4f4:	50ca      	str	r2, [r1, r3]
             ((AFC_DELAY_BEFORE << RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Msk) |
             ((AFC_DELAY_AFTER << RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Msk));
  MODIFY_REG(RRM->CR0_DIG_ENG, RRM_CR0_DIG_ENG_CR_GAIN_BEFORE | RRM_CR0_DIG_ENG_CR_GAIN_AFTER,
1004b4f6:	4ac3      	ldr	r2, [pc, #780]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b4f8:	23aa      	movs	r3, #170	@ 0xaa
1004b4fa:	005b      	lsls	r3, r3, #1
1004b4fc:	58d3      	ldr	r3, [r2, r3]
1004b4fe:	22ff      	movs	r2, #255	@ 0xff
1004b500:	4393      	bics	r3, r2
1004b502:	49c0      	ldr	r1, [pc, #768]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b504:	2266      	movs	r2, #102	@ 0x66
1004b506:	431a      	orrs	r2, r3
1004b508:	23aa      	movs	r3, #170	@ 0xaa
1004b50a:	005b      	lsls	r3, r3, #1
1004b50c:	50ca      	str	r2, [r1, r3]
             ((CR_GAIN_BEFORE << RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Msk) |
             ((CR_GAIN_AFTER << RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Msk));
  MODIFY_REG(RRM->CR0_LR, RRM_CR0_LR_CR_LR_GAIN_BEFORE | RRM_CR0_LR_CR_LR_GAIN_AFTER,
1004b50e:	4abd      	ldr	r2, [pc, #756]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b510:	23b4      	movs	r3, #180	@ 0xb4
1004b512:	005b      	lsls	r3, r3, #1
1004b514:	58d3      	ldr	r3, [r2, r3]
1004b516:	22ff      	movs	r2, #255	@ 0xff
1004b518:	4393      	bics	r3, r2
1004b51a:	49ba      	ldr	r1, [pc, #744]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b51c:	2255      	movs	r2, #85	@ 0x55
1004b51e:	431a      	orrs	r2, r3
1004b520:	23b4      	movs	r3, #180	@ 0xb4
1004b522:	005b      	lsls	r3, r3, #1
1004b524:	50ca      	str	r2, [r1, r3]
             ((CR_LR_GAIN_BEFORE << RRM_CR0_LR_CR_LR_GAIN_BEFORE_Pos) & RRM_CR0_LR_CR_LR_GAIN_BEFORE_Msk) |
             ((CR_LR_GAIN_AFTER << RRM_CR0_LR_CR_LR_GAIN_AFTER_Pos) & RRM_CR0_LR_CR_LR_GAIN_AFTER_Msk));

  /* Radio RSSI Threshold configuration */
  MODIFY_REG_FIELD(RRM->LR_RSSI_THR_DIG_ENG, RRM_LR_RSSI_THR_DIG_ENG_LR_RSSI_THR, LR_RSSI_THR);
1004b526:	4ab7      	ldr	r2, [pc, #732]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b528:	23c4      	movs	r3, #196	@ 0xc4
1004b52a:	005b      	lsls	r3, r3, #1
1004b52c:	58d3      	ldr	r3, [r2, r3]
1004b52e:	22ff      	movs	r2, #255	@ 0xff
1004b530:	4393      	bics	r3, r2
1004b532:	49b4      	ldr	r1, [pc, #720]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b534:	221d      	movs	r2, #29
1004b536:	431a      	orrs	r2, r3
1004b538:	23c4      	movs	r3, #196	@ 0xc4
1004b53a:	005b      	lsls	r3, r3, #1
1004b53c:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_PD_THR_DIG_ENG, RRM_LR_PD_THR_DIG_ENG_LR_PD_THR, LR_PD_THR);
1004b53e:	4ab1      	ldr	r2, [pc, #708]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b540:	23c2      	movs	r3, #194	@ 0xc2
1004b542:	005b      	lsls	r3, r3, #1
1004b544:	58d3      	ldr	r3, [r2, r3]
1004b546:	22ff      	movs	r2, #255	@ 0xff
1004b548:	4393      	bics	r3, r2
1004b54a:	49ae      	ldr	r1, [pc, #696]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b54c:	2259      	movs	r2, #89	@ 0x59
1004b54e:	431a      	orrs	r2, r3
1004b550:	23c2      	movs	r3, #194	@ 0xc2
1004b552:	005b      	lsls	r3, r3, #1
1004b554:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_AAC_THR_DIG_ENG, RRM_LR_AAC_THR_DIG_ENG_LR_AAC_THR, LR_AAC_THR);
1004b556:	4aab      	ldr	r2, [pc, #684]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b558:	23c6      	movs	r3, #198	@ 0xc6
1004b55a:	005b      	lsls	r3, r3, #1
1004b55c:	58d3      	ldr	r3, [r2, r3]
1004b55e:	22ff      	movs	r2, #255	@ 0xff
1004b560:	4393      	bics	r3, r2
1004b562:	49a8      	ldr	r1, [pc, #672]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b564:	2232      	movs	r2, #50	@ 0x32
1004b566:	431a      	orrs	r2, r3
1004b568:	23c6      	movs	r3, #198	@ 0xc6
1004b56a:	005b      	lsls	r3, r3, #1
1004b56c:	50ca      	str	r2, [r1, r3]

  /* Enable Viterbi */
  SET_BIT(RRM->VIT_CONF_DIG_ENG, RRM_VIT_CONF_DIG_ENG_VIT_CONF_0);
1004b56e:	4aa5      	ldr	r2, [pc, #660]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b570:	23b6      	movs	r3, #182	@ 0xb6
1004b572:	005b      	lsls	r3, r3, #1
1004b574:	58d3      	ldr	r3, [r2, r3]
1004b576:	49a3      	ldr	r1, [pc, #652]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b578:	2201      	movs	r2, #1
1004b57a:	431a      	orrs	r2, r3
1004b57c:	23b6      	movs	r3, #182	@ 0xb6
1004b57e:	005b      	lsls	r3, r3, #1
1004b580:	50ca      	str	r2, [r1, r3]

#if defined(STM32WB05) || defined(STM32WB09)
  MODIFY_REG_FIELD(RRM->ANTSW_DIG0_USR, RRM_ANTSW0_DIG_USR_RX_TIME_TO_SAMPLE, RX_TIME_TO_SAMPLE);
1004b582:	4aa0      	ldr	r2, [pc, #640]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b584:	23d0      	movs	r3, #208	@ 0xd0
1004b586:	009b      	lsls	r3, r3, #2
1004b588:	58d3      	ldr	r3, [r2, r3]
1004b58a:	22ff      	movs	r2, #255	@ 0xff
1004b58c:	4393      	bics	r3, r2
1004b58e:	499d      	ldr	r1, [pc, #628]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b590:	221f      	movs	r2, #31
1004b592:	431a      	orrs	r2, r3
1004b594:	23d0      	movs	r3, #208	@ 0xd0
1004b596:	009b      	lsls	r3, r3, #2
1004b598:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->ANTSW_DIG1_USR, RRM_ANTSW1_DIG_USR_RX_TIME_TO_SWITCH, RX_TIME_TO_SWITCH);
1004b59a:	4a9a      	ldr	r2, [pc, #616]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b59c:	23d1      	movs	r3, #209	@ 0xd1
1004b59e:	009b      	lsls	r3, r3, #2
1004b5a0:	58d3      	ldr	r3, [r2, r3]
1004b5a2:	22ff      	movs	r2, #255	@ 0xff
1004b5a4:	4393      	bics	r3, r2
1004b5a6:	4997      	ldr	r1, [pc, #604]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b5a8:	2209      	movs	r2, #9
1004b5aa:	431a      	orrs	r2, r3
1004b5ac:	23d1      	movs	r3, #209	@ 0xd1
1004b5ae:	009b      	lsls	r3, r3, #2
1004b5b0:	50ca      	str	r2, [r1, r3]
#endif /* STM32WB05 or STM32WB09 */

  /*Set InitDelay*/
  LL_RADIO_SetWakeupInitDelay(INITDELAY_WAKEUP);
1004b5b2:	2040      	movs	r0, #64	@ 0x40
1004b5b4:	f7ff fd4c 	bl	1004b050 <LL_RADIO_SetWakeupInitDelay>
  LL_RADIO_SetTimer12InitDelayCal(INITDELAY_TIMER12_CAL);
1004b5b8:	203f      	movs	r0, #63	@ 0x3f
1004b5ba:	f7ff fd61 	bl	1004b080 <LL_RADIO_SetTimer12InitDelayCal>
  LL_RADIO_SetTimer12InitDelayNoCal(INITDELAY_TIMER2_NOCAL);
1004b5be:	2009      	movs	r0, #9
1004b5c0:	f7ff fd78 	bl	1004b0b4 <LL_RADIO_SetTimer12InitDelayNoCal>

  /*Set Init_radio_delay*/
  LL_RADIO_SetReceivedCalDelayChk(DELAYCHK_RECEIVE_CAL);
1004b5c4:	205a      	movs	r0, #90	@ 0x5a
1004b5c6:	f7ff fdb7 	bl	1004b138 <LL_RADIO_SetReceivedCalDelayChk>
  LL_RADIO_SetReceivedNoCalDelayChk(DELAYCHK_RECEIVE_NOCAL);
1004b5ca:	2032      	movs	r0, #50	@ 0x32
1004b5cc:	f7ff fdce 	bl	1004b16c <LL_RADIO_SetReceivedNoCalDelayChk>
  LL_RADIO_SetTransmitCalDelayChk(DELAYCHK_TRANSMIT_CAL);
1004b5d0:	205a      	movs	r0, #90	@ 0x5a
1004b5d2:	f7ff fd83 	bl	1004b0dc <LL_RADIO_SetTransmitCalDelayChk>
  LL_RADIO_SetTransmitNoCalDelayChk(DELAYCHK_TRANSMIT_NOCAL);
1004b5d6:	2032      	movs	r0, #50	@ 0x32
1004b5d8:	f7ff fd96 	bl	1004b108 <LL_RADIO_SetTransmitNoCalDelayChk>

  /* Initial and final TX delays: control the on-air start time of the TX packet
  *  and the length of the packet "tail" after last bit is transmitted
  */
  LL_RADIO_SetTxDelayStart(TXDELAY_START);
1004b5dc:	2010      	movs	r0, #16
1004b5de:	f7ff fe07 	bl	1004b1f0 <LL_RADIO_SetTxDelayStart>
  LL_RADIO_SetTxDelayEnd(TXDELAY_END);
1004b5e2:	2010      	movs	r0, #16
1004b5e4:	f7ff fe1e 	bl	1004b224 <LL_RADIO_SetTxDelayEnd>

  /* Timeout for TX ready signal from the radio FSM after the 2nd init phase
  *  has expired
  */
  LL_RADIO_SetTransmissionReadyTimeout(TXREADY_TIMEOUT);
1004b5e8:	2004      	movs	r0, #4
1004b5ea:	f7ff fe35 	bl	1004b258 <LL_RADIO_SetTransmissionReadyTimeout>

  /* Timing for the various programming phases of the radio, modem and memory
  *  pointers.
  */
  LL_RADIO_SetConfigurationEndDuration(CONFIG_END_DURATION);
1004b5ee:	2014      	movs	r0, #20
1004b5f0:	f7ff fdd0 	bl	1004b194 <LL_RADIO_SetConfigurationEndDuration>
  LL_RADIO_SetTxDataReadyCheck(CHECK_TXDATAREADY);
1004b5f4:	2005      	movs	r0, #5
1004b5f6:	f7ff fde3 	bl	1004b1c0 <LL_RADIO_SetTxDataReadyCheck>

  LL_RADIO_ChkFlagAutoclearEnable_Enable();
1004b5fa:	f7ff fe43 	bl	1004b284 <LL_RADIO_ChkFlagAutoclearEnable_Enable>
  LL_RADIO_NoActiveLErrorInterrupt_Enable();
1004b5fe:	f7ff fe4f 	bl	1004b2a0 <LL_RADIO_NoActiveLErrorInterrupt_Enable>
  LL_RADIO_TxRxSkipInterrupt_Enable();
1004b602:	f7ff fe5b 	bl	1004b2bc <LL_RADIO_TxRxSkipInterrupt_Enable>

#if defined(GLOBAL_WORD6_DEFAULTANTENNAID_Msk)
  LL_RADIO_SetDefaultAntennaID(0);
1004b606:	2000      	movs	r0, #0
1004b608:	f7ff fe74 	bl	1004b2f4 <LL_RADIO_SetDefaultAntennaID>
  /* The commands in the hot table start at word 4
  * The words 0 to 2 are used to point to the command list
  * for the various trigger events, word 3 is a null command
  * (see function BLEPLAT_CNTR_SetRadioConfigData)
  */
  index = 0;
1004b60c:	2013      	movs	r0, #19
1004b60e:	183b      	adds	r3, r7, r0
1004b610:	2200      	movs	r2, #0
1004b612:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004b614:	183b      	adds	r3, r7, r0
1004b616:	781b      	ldrb	r3, [r3, #0]
1004b618:	183a      	adds	r2, r7, r0
1004b61a:	1c59      	adds	r1, r3, #1
1004b61c:	7011      	strb	r1, [r2, #0]
1004b61e:	001a      	movs	r2, r3
1004b620:	697b      	ldr	r3, [r7, #20]
1004b622:	189b      	adds	r3, r3, r2
1004b624:	2201      	movs	r2, #1
1004b626:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS1_ANA_ENG;
1004b628:	183b      	adds	r3, r7, r0
1004b62a:	781b      	ldrb	r3, [r3, #0]
1004b62c:	183a      	adds	r2, r7, r0
1004b62e:	1c59      	adds	r1, r3, #1
1004b630:	7011      	strb	r1, [r2, #0]
1004b632:	001a      	movs	r2, r3
1004b634:	697b      	ldr	r3, [r7, #20]
1004b636:	189b      	adds	r3, r3, r2
1004b638:	225e      	movs	r2, #94	@ 0x5e
1004b63a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS1_ANA_ENG;
1004b63c:	4a71      	ldr	r2, [pc, #452]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b63e:	239e      	movs	r3, #158	@ 0x9e
1004b640:	009b      	lsls	r3, r3, #2
1004b642:	58d1      	ldr	r1, [r2, r3]
1004b644:	183b      	adds	r3, r7, r0
1004b646:	781b      	ldrb	r3, [r3, #0]
1004b648:	0004      	movs	r4, r0
1004b64a:	183a      	adds	r2, r7, r0
1004b64c:	1c58      	adds	r0, r3, #1
1004b64e:	7010      	strb	r0, [r2, #0]
1004b650:	001a      	movs	r2, r3
1004b652:	697b      	ldr	r3, [r7, #20]
1004b654:	189b      	adds	r3, r3, r2
1004b656:	b2ca      	uxtb	r2, r1
1004b658:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004b65a:	0020      	movs	r0, r4
1004b65c:	183b      	adds	r3, r7, r0
1004b65e:	781b      	ldrb	r3, [r3, #0]
1004b660:	183a      	adds	r2, r7, r0
1004b662:	1c59      	adds	r1, r3, #1
1004b664:	7011      	strb	r1, [r2, #0]
1004b666:	001a      	movs	r2, r3
1004b668:	697b      	ldr	r3, [r7, #20]
1004b66a:	189b      	adds	r3, r3, r2
1004b66c:	2201      	movs	r2, #1
1004b66e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS0_ANA_ENG;
1004b670:	183b      	adds	r3, r7, r0
1004b672:	781b      	ldrb	r3, [r3, #0]
1004b674:	183a      	adds	r2, r7, r0
1004b676:	1c59      	adds	r1, r3, #1
1004b678:	7011      	strb	r1, [r2, #0]
1004b67a:	001a      	movs	r2, r3
1004b67c:	697b      	ldr	r3, [r7, #20]
1004b67e:	189b      	adds	r3, r3, r2
1004b680:	225d      	movs	r2, #93	@ 0x5d
1004b682:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS0_ANA_ENG;
1004b684:	4a5f      	ldr	r2, [pc, #380]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b686:	239d      	movs	r3, #157	@ 0x9d
1004b688:	009b      	lsls	r3, r3, #2
1004b68a:	58d1      	ldr	r1, [r2, r3]
1004b68c:	183b      	adds	r3, r7, r0
1004b68e:	781b      	ldrb	r3, [r3, #0]
1004b690:	0004      	movs	r4, r0
1004b692:	183a      	adds	r2, r7, r0
1004b694:	1c58      	adds	r0, r3, #1
1004b696:	7010      	strb	r0, [r2, #0]
1004b698:	001a      	movs	r2, r3
1004b69a:	697b      	ldr	r3, [r7, #20]
1004b69c:	189b      	adds	r3, r3, r2
1004b69e:	b2ca      	uxtb	r2, r1
1004b6a0:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
1004b6a2:	0020      	movs	r0, r4
1004b6a4:	183b      	adds	r3, r7, r0
1004b6a6:	781b      	ldrb	r3, [r3, #0]
1004b6a8:	183a      	adds	r2, r7, r0
1004b6aa:	1c59      	adds	r1, r3, #1
1004b6ac:	7011      	strb	r1, [r2, #0]
1004b6ae:	001a      	movs	r2, r3
1004b6b0:	697b      	ldr	r3, [r7, #20]
1004b6b2:	189b      	adds	r3, r3, r2
1004b6b4:	2201      	movs	r2, #1
1004b6b6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_RXADC_ANA_USR;
1004b6b8:	183b      	adds	r3, r7, r0
1004b6ba:	781b      	ldrb	r3, [r3, #0]
1004b6bc:	183a      	adds	r2, r7, r0
1004b6be:	1c59      	adds	r1, r3, #1
1004b6c0:	7011      	strb	r1, [r2, #0]
1004b6c2:	001a      	movs	r2, r3
1004b6c4:	697b      	ldr	r3, [r7, #20]
1004b6c6:	189b      	adds	r3, r3, r2
1004b6c8:	2252      	movs	r2, #82	@ 0x52
1004b6ca:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->RXADC_ANA_USR;
1004b6cc:	4a4d      	ldr	r2, [pc, #308]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b6ce:	2392      	movs	r3, #146	@ 0x92
1004b6d0:	009b      	lsls	r3, r3, #2
1004b6d2:	58d1      	ldr	r1, [r2, r3]
1004b6d4:	183b      	adds	r3, r7, r0
1004b6d6:	781b      	ldrb	r3, [r3, #0]
1004b6d8:	0004      	movs	r4, r0
1004b6da:	183a      	adds	r2, r7, r0
1004b6dc:	1c58      	adds	r0, r3, #1
1004b6de:	7010      	strb	r0, [r2, #0]
1004b6e0:	001a      	movs	r2, r3
1004b6e2:	697b      	ldr	r3, [r7, #20]
1004b6e4:	189b      	adds	r3, r3, r2
1004b6e6:	b2ca      	uxtb	r2, r1
1004b6e8:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
1004b6ea:	0020      	movs	r0, r4
1004b6ec:	183b      	adds	r3, r7, r0
1004b6ee:	781b      	ldrb	r3, [r3, #0]
1004b6f0:	183a      	adds	r2, r7, r0
1004b6f2:	1c59      	adds	r1, r3, #1
1004b6f4:	7011      	strb	r1, [r2, #0]
1004b6f6:	001a      	movs	r2, r3
1004b6f8:	697b      	ldr	r3, [r7, #20]
1004b6fa:	189b      	adds	r3, r3, r2
1004b6fc:	2201      	movs	r2, #1
1004b6fe:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_AFC1_DIG_ENG;
1004b700:	183b      	adds	r3, r7, r0
1004b702:	781b      	ldrb	r3, [r3, #0]
1004b704:	183a      	adds	r2, r7, r0
1004b706:	1c59      	adds	r1, r3, #1
1004b708:	7011      	strb	r1, [r2, #0]
1004b70a:	001a      	movs	r2, r3
1004b70c:	697b      	ldr	r3, [r7, #20]
1004b70e:	189b      	adds	r3, r3, r2
1004b710:	2212      	movs	r2, #18
1004b712:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->AFC1_DIG_ENG;
1004b714:	4a3b      	ldr	r2, [pc, #236]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b716:	23a4      	movs	r3, #164	@ 0xa4
1004b718:	005b      	lsls	r3, r3, #1
1004b71a:	58d1      	ldr	r1, [r2, r3]
1004b71c:	183b      	adds	r3, r7, r0
1004b71e:	781b      	ldrb	r3, [r3, #0]
1004b720:	0004      	movs	r4, r0
1004b722:	183a      	adds	r2, r7, r0
1004b724:	1c58      	adds	r0, r3, #1
1004b726:	7010      	strb	r0, [r2, #0]
1004b728:	001a      	movs	r2, r3
1004b72a:	697b      	ldr	r3, [r7, #20]
1004b72c:	189b      	adds	r3, r3, r2
1004b72e:	b2ca      	uxtb	r2, r1
1004b730:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004b732:	0020      	movs	r0, r4
1004b734:	183b      	adds	r3, r7, r0
1004b736:	781b      	ldrb	r3, [r3, #0]
1004b738:	183a      	adds	r2, r7, r0
1004b73a:	1c59      	adds	r1, r3, #1
1004b73c:	7011      	strb	r1, [r2, #0]
1004b73e:	001a      	movs	r2, r3
1004b740:	697b      	ldr	r3, [r7, #20]
1004b742:	189b      	adds	r3, r3, r2
1004b744:	2201      	movs	r2, #1
1004b746:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_DIG_ENG;
1004b748:	183b      	adds	r3, r7, r0
1004b74a:	781b      	ldrb	r3, [r3, #0]
1004b74c:	183a      	adds	r2, r7, r0
1004b74e:	1c59      	adds	r1, r3, #1
1004b750:	7011      	strb	r1, [r2, #0]
1004b752:	001a      	movs	r2, r3
1004b754:	697b      	ldr	r3, [r7, #20]
1004b756:	189b      	adds	r3, r3, r2
1004b758:	2215      	movs	r2, #21
1004b75a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_DIG_ENG;
1004b75c:	4a29      	ldr	r2, [pc, #164]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b75e:	23aa      	movs	r3, #170	@ 0xaa
1004b760:	005b      	lsls	r3, r3, #1
1004b762:	58d1      	ldr	r1, [r2, r3]
1004b764:	183b      	adds	r3, r7, r0
1004b766:	781b      	ldrb	r3, [r3, #0]
1004b768:	0004      	movs	r4, r0
1004b76a:	183a      	adds	r2, r7, r0
1004b76c:	1c58      	adds	r0, r3, #1
1004b76e:	7010      	strb	r0, [r2, #0]
1004b770:	001a      	movs	r2, r3
1004b772:	697b      	ldr	r3, [r7, #20]
1004b774:	189b      	adds	r3, r3, r2
1004b776:	b2ca      	uxtb	r2, r1
1004b778:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004b77a:	0020      	movs	r0, r4
1004b77c:	183b      	adds	r3, r7, r0
1004b77e:	781b      	ldrb	r3, [r3, #0]
1004b780:	183a      	adds	r2, r7, r0
1004b782:	1c59      	adds	r1, r3, #1
1004b784:	7011      	strb	r1, [r2, #0]
1004b786:	001a      	movs	r2, r3
1004b788:	697b      	ldr	r3, [r7, #20]
1004b78a:	189b      	adds	r3, r3, r2
1004b78c:	2201      	movs	r2, #1
1004b78e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_LR;
1004b790:	183b      	adds	r3, r7, r0
1004b792:	781b      	ldrb	r3, [r3, #0]
1004b794:	183a      	adds	r2, r7, r0
1004b796:	1c59      	adds	r1, r3, #1
1004b798:	7011      	strb	r1, [r2, #0]
1004b79a:	001a      	movs	r2, r3
1004b79c:	697b      	ldr	r3, [r7, #20]
1004b79e:	189b      	adds	r3, r3, r2
1004b7a0:	221a      	movs	r2, #26
1004b7a2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_LR;
1004b7a4:	4a17      	ldr	r2, [pc, #92]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b7a6:	23b4      	movs	r3, #180	@ 0xb4
1004b7a8:	005b      	lsls	r3, r3, #1
1004b7aa:	58d1      	ldr	r1, [r2, r3]
1004b7ac:	183b      	adds	r3, r7, r0
1004b7ae:	781b      	ldrb	r3, [r3, #0]
1004b7b0:	0004      	movs	r4, r0
1004b7b2:	183a      	adds	r2, r7, r0
1004b7b4:	1c58      	adds	r0, r3, #1
1004b7b6:	7010      	strb	r0, [r2, #0]
1004b7b8:	001a      	movs	r2, r3
1004b7ba:	697b      	ldr	r3, [r7, #20]
1004b7bc:	189b      	adds	r3, r3, r2
1004b7be:	b2ca      	uxtb	r2, r1
1004b7c0:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004b7c2:	0020      	movs	r0, r4
1004b7c4:	183b      	adds	r3, r7, r0
1004b7c6:	781b      	ldrb	r3, [r3, #0]
1004b7c8:	183a      	adds	r2, r7, r0
1004b7ca:	1c59      	adds	r1, r3, #1
1004b7cc:	7011      	strb	r1, [r2, #0]
1004b7ce:	001a      	movs	r2, r3
1004b7d0:	697b      	ldr	r3, [r7, #20]
1004b7d2:	189b      	adds	r3, r3, r2
1004b7d4:	2201      	movs	r2, #1
1004b7d6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_RSSI_THR_DIG_ENG;
1004b7d8:	183b      	adds	r3, r7, r0
1004b7da:	781b      	ldrb	r3, [r3, #0]
1004b7dc:	183a      	adds	r2, r7, r0
1004b7de:	1c59      	adds	r1, r3, #1
1004b7e0:	7011      	strb	r1, [r2, #0]
1004b7e2:	001a      	movs	r2, r3
1004b7e4:	697b      	ldr	r3, [r7, #20]
1004b7e6:	189b      	adds	r3, r3, r2
1004b7e8:	2222      	movs	r2, #34	@ 0x22
1004b7ea:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_RSSI_THR_DIG_ENG;
1004b7ec:	4a05      	ldr	r2, [pc, #20]	@ (1004b804 <HAL_RADIO_Init+0x488>)
1004b7ee:	23c4      	movs	r3, #196	@ 0xc4
1004b7f0:	005b      	lsls	r3, r3, #1
1004b7f2:	58d1      	ldr	r1, [r2, r3]
1004b7f4:	183b      	adds	r3, r7, r0
1004b7f6:	781b      	ldrb	r3, [r3, #0]
1004b7f8:	0004      	movs	r4, r0
1004b7fa:	e005      	b.n	1004b808 <HAL_RADIO_Init+0x48c>
1004b7fc:	200000c0 	.word	0x200000c0
1004b800:	60001800 	.word	0x60001800
1004b804:	60001400 	.word	0x60001400
1004b808:	183a      	adds	r2, r7, r0
1004b80a:	1c58      	adds	r0, r3, #1
1004b80c:	7010      	strb	r0, [r2, #0]
1004b80e:	001a      	movs	r2, r3
1004b810:	697b      	ldr	r3, [r7, #20]
1004b812:	189b      	adds	r3, r3, r2
1004b814:	b2ca      	uxtb	r2, r1
1004b816:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004b818:	0020      	movs	r0, r4
1004b81a:	183b      	adds	r3, r7, r0
1004b81c:	781b      	ldrb	r3, [r3, #0]
1004b81e:	183a      	adds	r2, r7, r0
1004b820:	1c59      	adds	r1, r3, #1
1004b822:	7011      	strb	r1, [r2, #0]
1004b824:	001a      	movs	r2, r3
1004b826:	697b      	ldr	r3, [r7, #20]
1004b828:	189b      	adds	r3, r3, r2
1004b82a:	2201      	movs	r2, #1
1004b82c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_PD_THR_DIG_ENG;
1004b82e:	183b      	adds	r3, r7, r0
1004b830:	781b      	ldrb	r3, [r3, #0]
1004b832:	183a      	adds	r2, r7, r0
1004b834:	1c59      	adds	r1, r3, #1
1004b836:	7011      	strb	r1, [r2, #0]
1004b838:	001a      	movs	r2, r3
1004b83a:	697b      	ldr	r3, [r7, #20]
1004b83c:	189b      	adds	r3, r3, r2
1004b83e:	2221      	movs	r2, #33	@ 0x21
1004b840:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_PD_THR_DIG_ENG;
1004b842:	4a6d      	ldr	r2, [pc, #436]	@ (1004b9f8 <HAL_RADIO_Init+0x67c>)
1004b844:	23c2      	movs	r3, #194	@ 0xc2
1004b846:	005b      	lsls	r3, r3, #1
1004b848:	58d1      	ldr	r1, [r2, r3]
1004b84a:	183b      	adds	r3, r7, r0
1004b84c:	781b      	ldrb	r3, [r3, #0]
1004b84e:	0004      	movs	r4, r0
1004b850:	183a      	adds	r2, r7, r0
1004b852:	1c58      	adds	r0, r3, #1
1004b854:	7010      	strb	r0, [r2, #0]
1004b856:	001a      	movs	r2, r3
1004b858:	697b      	ldr	r3, [r7, #20]
1004b85a:	189b      	adds	r3, r3, r2
1004b85c:	b2ca      	uxtb	r2, r1
1004b85e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004b860:	0020      	movs	r0, r4
1004b862:	183b      	adds	r3, r7, r0
1004b864:	781b      	ldrb	r3, [r3, #0]
1004b866:	183a      	adds	r2, r7, r0
1004b868:	1c59      	adds	r1, r3, #1
1004b86a:	7011      	strb	r1, [r2, #0]
1004b86c:	001a      	movs	r2, r3
1004b86e:	697b      	ldr	r3, [r7, #20]
1004b870:	189b      	adds	r3, r3, r2
1004b872:	2201      	movs	r2, #1
1004b874:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_AAC_THR_DIG_ENG;
1004b876:	183b      	adds	r3, r7, r0
1004b878:	781b      	ldrb	r3, [r3, #0]
1004b87a:	183a      	adds	r2, r7, r0
1004b87c:	1c59      	adds	r1, r3, #1
1004b87e:	7011      	strb	r1, [r2, #0]
1004b880:	001a      	movs	r2, r3
1004b882:	697b      	ldr	r3, [r7, #20]
1004b884:	189b      	adds	r3, r3, r2
1004b886:	2223      	movs	r2, #35	@ 0x23
1004b888:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_AAC_THR_DIG_ENG;
1004b88a:	4a5b      	ldr	r2, [pc, #364]	@ (1004b9f8 <HAL_RADIO_Init+0x67c>)
1004b88c:	23c6      	movs	r3, #198	@ 0xc6
1004b88e:	005b      	lsls	r3, r3, #1
1004b890:	58d1      	ldr	r1, [r2, r3]
1004b892:	183b      	adds	r3, r7, r0
1004b894:	781b      	ldrb	r3, [r3, #0]
1004b896:	0004      	movs	r4, r0
1004b898:	183a      	adds	r2, r7, r0
1004b89a:	1c58      	adds	r0, r3, #1
1004b89c:	7010      	strb	r0, [r2, #0]
1004b89e:	001a      	movs	r2, r3
1004b8a0:	697b      	ldr	r3, [r7, #20]
1004b8a2:	189b      	adds	r3, r3, r2
1004b8a4:	b2ca      	uxtb	r2, r1
1004b8a6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004b8a8:	0020      	movs	r0, r4
1004b8aa:	183b      	adds	r3, r7, r0
1004b8ac:	781b      	ldrb	r3, [r3, #0]
1004b8ae:	183a      	adds	r2, r7, r0
1004b8b0:	1c59      	adds	r1, r3, #1
1004b8b2:	7011      	strb	r1, [r2, #0]
1004b8b4:	001a      	movs	r2, r3
1004b8b6:	697b      	ldr	r3, [r7, #20]
1004b8b8:	189b      	adds	r3, r3, r2
1004b8ba:	2201      	movs	r2, #1
1004b8bc:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_VIT_CONF_DIG_ENG;
1004b8be:	183b      	adds	r3, r7, r0
1004b8c0:	781b      	ldrb	r3, [r3, #0]
1004b8c2:	183a      	adds	r2, r7, r0
1004b8c4:	1c59      	adds	r1, r3, #1
1004b8c6:	7011      	strb	r1, [r2, #0]
1004b8c8:	001a      	movs	r2, r3
1004b8ca:	697b      	ldr	r3, [r7, #20]
1004b8cc:	189b      	adds	r3, r3, r2
1004b8ce:	221b      	movs	r2, #27
1004b8d0:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->VIT_CONF_DIG_ENG;
1004b8d2:	4a49      	ldr	r2, [pc, #292]	@ (1004b9f8 <HAL_RADIO_Init+0x67c>)
1004b8d4:	23b6      	movs	r3, #182	@ 0xb6
1004b8d6:	005b      	lsls	r3, r3, #1
1004b8d8:	58d1      	ldr	r1, [r2, r3]
1004b8da:	183b      	adds	r3, r7, r0
1004b8dc:	781b      	ldrb	r3, [r3, #0]
1004b8de:	0004      	movs	r4, r0
1004b8e0:	183a      	adds	r2, r7, r0
1004b8e2:	1c58      	adds	r0, r3, #1
1004b8e4:	7010      	strb	r0, [r2, #0]
1004b8e6:	001a      	movs	r2, r3
1004b8e8:	697b      	ldr	r3, [r7, #20]
1004b8ea:	189b      	adds	r3, r3, r2
1004b8ec:	b2ca      	uxtb	r2, r1
1004b8ee:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  hot_table_radio_config[index++] = 0x01;
1004b8f0:	0020      	movs	r0, r4
1004b8f2:	183b      	adds	r3, r7, r0
1004b8f4:	781b      	ldrb	r3, [r3, #0]
1004b8f6:	183a      	adds	r2, r7, r0
1004b8f8:	1c59      	adds	r1, r3, #1
1004b8fa:	7011      	strb	r1, [r2, #0]
1004b8fc:	001a      	movs	r2, r3
1004b8fe:	697b      	ldr	r3, [r7, #20]
1004b900:	189b      	adds	r3, r3, r2
1004b902:	2201      	movs	r2, #1
1004b904:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG0_USR;
1004b906:	183b      	adds	r3, r7, r0
1004b908:	781b      	ldrb	r3, [r3, #0]
1004b90a:	183a      	adds	r2, r7, r0
1004b90c:	1c59      	adds	r1, r3, #1
1004b90e:	7011      	strb	r1, [r2, #0]
1004b910:	001a      	movs	r2, r3
1004b912:	697b      	ldr	r3, [r7, #20]
1004b914:	189b      	adds	r3, r3, r2
1004b916:	2290      	movs	r2, #144	@ 0x90
1004b918:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG0_USR;
1004b91a:	4a37      	ldr	r2, [pc, #220]	@ (1004b9f8 <HAL_RADIO_Init+0x67c>)
1004b91c:	23d0      	movs	r3, #208	@ 0xd0
1004b91e:	009b      	lsls	r3, r3, #2
1004b920:	58d1      	ldr	r1, [r2, r3]
1004b922:	183b      	adds	r3, r7, r0
1004b924:	781b      	ldrb	r3, [r3, #0]
1004b926:	0004      	movs	r4, r0
1004b928:	183a      	adds	r2, r7, r0
1004b92a:	1c58      	adds	r0, r3, #1
1004b92c:	7010      	strb	r0, [r2, #0]
1004b92e:	001a      	movs	r2, r3
1004b930:	697b      	ldr	r3, [r7, #20]
1004b932:	189b      	adds	r3, r3, r2
1004b934:	b2ca      	uxtb	r2, r1
1004b936:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004b938:	0020      	movs	r0, r4
1004b93a:	183b      	adds	r3, r7, r0
1004b93c:	781b      	ldrb	r3, [r3, #0]
1004b93e:	183a      	adds	r2, r7, r0
1004b940:	1c59      	adds	r1, r3, #1
1004b942:	7011      	strb	r1, [r2, #0]
1004b944:	001a      	movs	r2, r3
1004b946:	697b      	ldr	r3, [r7, #20]
1004b948:	189b      	adds	r3, r3, r2
1004b94a:	2201      	movs	r2, #1
1004b94c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG1_USR;
1004b94e:	183b      	adds	r3, r7, r0
1004b950:	781b      	ldrb	r3, [r3, #0]
1004b952:	183a      	adds	r2, r7, r0
1004b954:	1c59      	adds	r1, r3, #1
1004b956:	7011      	strb	r1, [r2, #0]
1004b958:	001a      	movs	r2, r3
1004b95a:	697b      	ldr	r3, [r7, #20]
1004b95c:	189b      	adds	r3, r3, r2
1004b95e:	2291      	movs	r2, #145	@ 0x91
1004b960:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG1_USR;
1004b962:	4a25      	ldr	r2, [pc, #148]	@ (1004b9f8 <HAL_RADIO_Init+0x67c>)
1004b964:	23d1      	movs	r3, #209	@ 0xd1
1004b966:	009b      	lsls	r3, r3, #2
1004b968:	58d1      	ldr	r1, [r2, r3]
1004b96a:	183b      	adds	r3, r7, r0
1004b96c:	781b      	ldrb	r3, [r3, #0]
1004b96e:	0004      	movs	r4, r0
1004b970:	183a      	adds	r2, r7, r0
1004b972:	1c58      	adds	r0, r3, #1
1004b974:	7010      	strb	r0, [r2, #0]
1004b976:	001a      	movs	r2, r3
1004b978:	697b      	ldr	r3, [r7, #20]
1004b97a:	189b      	adds	r3, r3, r2
1004b97c:	b2ca      	uxtb	r2, r1
1004b97e:	701a      	strb	r2, [r3, #0]
#endif
  hot_table_radio_config[index++] = 0x00;
1004b980:	193b      	adds	r3, r7, r4
1004b982:	781b      	ldrb	r3, [r3, #0]
1004b984:	193a      	adds	r2, r7, r4
1004b986:	1c59      	adds	r1, r3, #1
1004b988:	7011      	strb	r1, [r2, #0]
1004b98a:	001a      	movs	r2, r3
1004b98c:	697b      	ldr	r3, [r7, #20]
1004b98e:	189b      	adds	r3, r3, r2
1004b990:	2200      	movs	r2, #0
1004b992:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config_u32[0] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 1 executed when Wakeup timer triggers */
1004b994:	4a19      	ldr	r2, [pc, #100]	@ (1004b9fc <HAL_RADIO_Init+0x680>)
1004b996:	4b1a      	ldr	r3, [pc, #104]	@ (1004ba00 <HAL_RADIO_Init+0x684>)
1004b998:	601a      	str	r2, [r3, #0]
  hot_table_radio_config_u32[1] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 2 executed when Timer1 triggers       */
1004b99a:	4a18      	ldr	r2, [pc, #96]	@ (1004b9fc <HAL_RADIO_Init+0x680>)
1004b99c:	4b18      	ldr	r3, [pc, #96]	@ (1004ba00 <HAL_RADIO_Init+0x684>)
1004b99e:	605a      	str	r2, [r3, #4]
  hot_table_radio_config_u32[2] = (uint32_t)(&hot_table_radio_config_u32[3]); /* Point to Port 0 command list 3 executed when Timer2 triggers       */
1004b9a0:	4a18      	ldr	r2, [pc, #96]	@ (1004ba04 <HAL_RADIO_Init+0x688>)
1004b9a2:	4b17      	ldr	r3, [pc, #92]	@ (1004ba00 <HAL_RADIO_Init+0x684>)
1004b9a4:	609a      	str	r2, [r3, #8]
  hot_table_radio_config_u32[3] = 0x00000000;                /* Null command */
1004b9a6:	4b16      	ldr	r3, [pc, #88]	@ (1004ba00 <HAL_RADIO_Init+0x684>)
1004b9a8:	2200      	movs	r2, #0
1004b9aa:	60da      	str	r2, [r3, #12]

  LL_RADIO_SetRadioConfigurationAddressPointer(hot_table_radio_config_u32[0]);
1004b9ac:	4b14      	ldr	r3, [pc, #80]	@ (1004ba00 <HAL_RADIO_Init+0x684>)
1004b9ae:	681b      	ldr	r3, [r3, #0]
1004b9b0:	0018      	movs	r0, r3
1004b9b2:	f7ff fb3d 	bl	1004b030 <LL_RADIO_SetRadioConfigurationAddressPointer>
  /* Reload radio config pointer */
  RRM->UDRA_CTRL0 = RRM_UDRA_CTRL0_RELOAD_RDCFGPTR;
1004b9b6:	4b10      	ldr	r3, [pc, #64]	@ (1004b9f8 <HAL_RADIO_Init+0x67c>)
1004b9b8:	2201      	movs	r2, #1
1004b9ba:	611a      	str	r2, [r3, #16]
  LL_RADIO_Active2ErrorInterrupt_Enable();
1004b9bc:	f7ff fc8c 	bl	1004b2d8 <LL_RADIO_Active2ErrorInterrupt_Enable>
  globalParameters.back2backTime = BACK_TO_BACK_TIME;
  globalParameters.tone_start_stop_flag = 0;
#endif

  /*Clear all interrupts of the BLUE Controller*/
  uint32_t int_val_tmp = BLUE->INTERRUPT1REG;
1004b9c0:	23c0      	movs	r3, #192	@ 0xc0
1004b9c2:	05db      	lsls	r3, r3, #23
1004b9c4:	685b      	ldr	r3, [r3, #4]
1004b9c6:	60fb      	str	r3, [r7, #12]
  BLUE->INTERRUPT1REG = int_val_tmp;
1004b9c8:	23c0      	movs	r3, #192	@ 0xc0
1004b9ca:	05db      	lsls	r3, r3, #23
1004b9cc:	68fa      	ldr	r2, [r7, #12]
1004b9ce:	605a      	str	r2, [r3, #4]

  /*BLE wake up IRQ Status clearing and enable*/
  WAKEUP->WAKEUP_BLE_IRQ_STATUS |= 1;
1004b9d0:	4b0d      	ldr	r3, [pc, #52]	@ (1004ba08 <HAL_RADIO_Init+0x68c>)
1004b9d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004b9d4:	4b0c      	ldr	r3, [pc, #48]	@ (1004ba08 <HAL_RADIO_Init+0x68c>)
1004b9d6:	2101      	movs	r1, #1
1004b9d8:	430a      	orrs	r2, r1
1004b9da:	645a      	str	r2, [r3, #68]	@ 0x44
  WAKEUP->WAKEUP_BLE_IRQ_ENABLE |= 1;
1004b9dc:	4b0a      	ldr	r3, [pc, #40]	@ (1004ba08 <HAL_RADIO_Init+0x68c>)
1004b9de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004b9e0:	4b09      	ldr	r3, [pc, #36]	@ (1004ba08 <HAL_RADIO_Init+0x68c>)
1004b9e2:	2101      	movs	r1, #1
1004b9e4:	430a      	orrs	r2, r1
1004b9e6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  int_val_tmp = BLUE->INTERRUPT1REG;
1004b9e8:	23c0      	movs	r3, #192	@ 0xc0
1004b9ea:	05db      	lsls	r3, r3, #23
1004b9ec:	685b      	ldr	r3, [r3, #4]
1004b9ee:	60fb      	str	r3, [r7, #12]

  return;
1004b9f0:	46c0      	nop			@ (mov r8, r8)
}
1004b9f2:	46bd      	mov	sp, r7
1004b9f4:	b00d      	add	sp, #52	@ 0x34
1004b9f6:	bd90      	pop	{r4, r7, pc}
1004b9f8:	60001400 	.word	0x60001400
1004b9fc:	200026cc 	.word	0x200026cc
1004ba00:	200026bc 	.word	0x200026bc
1004ba04:	200026c8 	.word	0x200026c8
1004ba08:	60001800 	.word	0x60001800

1004ba0c <HAL_RADIO_ReadRSSI>:
/**
  * @brief  Read RSSI
  * @retval int8_t: RSSI in dBm
  */
int8_t HAL_RADIO_ReadRSSI(void)
{
1004ba0c:	b580      	push	{r7, lr}
1004ba0e:	b086      	sub	sp, #24
1004ba10:	af00      	add	r7, sp, #0
  int32_t rssi_dbm;
  uint32_t rssi0 = RRM->RSSI0_DIG_OUT;
1004ba12:	4a24      	ldr	r2, [pc, #144]	@ (1004baa4 <HAL_RADIO_ReadRSSI+0x98>)
1004ba14:	23a9      	movs	r3, #169	@ 0xa9
1004ba16:	009b      	lsls	r3, r3, #2
1004ba18:	58d3      	ldr	r3, [r2, r3]
1004ba1a:	60fb      	str	r3, [r7, #12]
  uint32_t rssi1 = RRM->RSSI1_DIG_OUT;
1004ba1c:	4a21      	ldr	r2, [pc, #132]	@ (1004baa4 <HAL_RADIO_ReadRSSI+0x98>)
1004ba1e:	23aa      	movs	r3, #170	@ 0xaa
1004ba20:	009b      	lsls	r3, r3, #2
1004ba22:	58d3      	ldr	r3, [r2, r3]
1004ba24:	60bb      	str	r3, [r7, #8]

  uint32_t rssi_int16 = ((rssi1 & 0xFF) << 8) | (rssi0 & 0xFF);
1004ba26:	68bb      	ldr	r3, [r7, #8]
1004ba28:	021b      	lsls	r3, r3, #8
1004ba2a:	041b      	lsls	r3, r3, #16
1004ba2c:	0c1a      	lsrs	r2, r3, #16
1004ba2e:	68fb      	ldr	r3, [r7, #12]
1004ba30:	21ff      	movs	r1, #255	@ 0xff
1004ba32:	400b      	ands	r3, r1
1004ba34:	4313      	orrs	r3, r2
1004ba36:	613b      	str	r3, [r7, #16]
  uint32_t reg_agc = RRM->AGC_DIG_OUT;
1004ba38:	4a1a      	ldr	r2, [pc, #104]	@ (1004baa4 <HAL_RADIO_ReadRSSI+0x98>)
1004ba3a:	23ab      	movs	r3, #171	@ 0xab
1004ba3c:	009b      	lsls	r3, r3, #2
1004ba3e:	58d3      	ldr	r3, [r2, r3]
1004ba40:	607b      	str	r3, [r7, #4]

  if ((rssi_int16 == 0U) || (reg_agc > 0xbU))
1004ba42:	693b      	ldr	r3, [r7, #16]
1004ba44:	2b00      	cmp	r3, #0
1004ba46:	d002      	beq.n	1004ba4e <HAL_RADIO_ReadRSSI+0x42>
1004ba48:	687b      	ldr	r3, [r7, #4]
1004ba4a:	2b0b      	cmp	r3, #11
1004ba4c:	d902      	bls.n	1004ba54 <HAL_RADIO_ReadRSSI+0x48>
  {
    rssi_dbm = 127 ;
1004ba4e:	237f      	movs	r3, #127	@ 0x7f
1004ba50:	617b      	str	r3, [r7, #20]
1004ba52:	e020      	b.n	1004ba96 <HAL_RADIO_ReadRSSI+0x8a>
  }
  else
  {
    rssi_dbm = (int32_t)reg_agc * 6 - RSSI_OFFSET;//127 ;
1004ba54:	687a      	ldr	r2, [r7, #4]
1004ba56:	0013      	movs	r3, r2
1004ba58:	005b      	lsls	r3, r3, #1
1004ba5a:	189b      	adds	r3, r3, r2
1004ba5c:	005b      	lsls	r3, r3, #1
1004ba5e:	3b77      	subs	r3, #119	@ 0x77
1004ba60:	617b      	str	r3, [r7, #20]
    while (rssi_int16 > 30U)
1004ba62:	e005      	b.n	1004ba70 <HAL_RADIO_ReadRSSI+0x64>
    {
      rssi_dbm = rssi_dbm + 6 ;
1004ba64:	697b      	ldr	r3, [r7, #20]
1004ba66:	3306      	adds	r3, #6
1004ba68:	617b      	str	r3, [r7, #20]
      rssi_int16 = (rssi_int16 >> 1) ;
1004ba6a:	693b      	ldr	r3, [r7, #16]
1004ba6c:	085b      	lsrs	r3, r3, #1
1004ba6e:	613b      	str	r3, [r7, #16]
    while (rssi_int16 > 30U)
1004ba70:	693b      	ldr	r3, [r7, #16]
1004ba72:	2b1e      	cmp	r3, #30
1004ba74:	d8f6      	bhi.n	1004ba64 <HAL_RADIO_ReadRSSI+0x58>
    }
    rssi_dbm = rssi_dbm + (int32_t)(uint32_t)((417U * rssi_int16 + 18080U) >> 10);
1004ba76:	693a      	ldr	r2, [r7, #16]
1004ba78:	0013      	movs	r3, r2
1004ba7a:	005b      	lsls	r3, r3, #1
1004ba7c:	189b      	adds	r3, r3, r2
1004ba7e:	009b      	lsls	r3, r3, #2
1004ba80:	189b      	adds	r3, r3, r2
1004ba82:	015b      	lsls	r3, r3, #5
1004ba84:	189b      	adds	r3, r3, r2
1004ba86:	4a08      	ldr	r2, [pc, #32]	@ (1004baa8 <HAL_RADIO_ReadRSSI+0x9c>)
1004ba88:	4694      	mov	ip, r2
1004ba8a:	4463      	add	r3, ip
1004ba8c:	0a9b      	lsrs	r3, r3, #10
1004ba8e:	001a      	movs	r2, r3
1004ba90:	697b      	ldr	r3, [r7, #20]
1004ba92:	189b      	adds	r3, r3, r2
1004ba94:	617b      	str	r3, [r7, #20]
  }
  return (int8_t)rssi_dbm;
1004ba96:	697b      	ldr	r3, [r7, #20]
1004ba98:	b25b      	sxtb	r3, r3
}
1004ba9a:	0018      	movs	r0, r3
1004ba9c:	46bd      	mov	sp, r7
1004ba9e:	b006      	add	sp, #24
1004baa0:	bd80      	pop	{r7, pc}
1004baa2:	46c0      	nop			@ (mov r8, r8)
1004baa4:	60001400 	.word	0x60001400
1004baa8:	000046a0 	.word	0x000046a0

1004baac <HAL_RADIO_TXRX_IRQHandler>:
__weak void HAL_RADIO_TxRxSeqCallback(void)
{
}

void HAL_RADIO_TXRX_IRQHandler(void)
{
1004baac:	b580      	push	{r7, lr}
1004baae:	b082      	sub	sp, #8
1004bab0:	af00      	add	r7, sp, #0
  uint32_t blue_status = BLUE->STATUSREG;
1004bab2:	23c0      	movs	r3, #192	@ 0xc0
1004bab4:	05db      	lsls	r3, r3, #23
1004bab6:	69db      	ldr	r3, [r3, #28]
1004bab8:	607b      	str	r3, [r7, #4]
  uint32_t blue_interrupt = BLUE->INTERRUPT1REG;
1004baba:	23c0      	movs	r3, #192	@ 0xc0
1004babc:	05db      	lsls	r3, r3, #23
1004babe:	685b      	ldr	r3, [r3, #4]
1004bac0:	603b      	str	r3, [r7, #0]

  /** clear all pending interrupts */
  BLUE->INTERRUPT1REG = blue_interrupt;
1004bac2:	23c0      	movs	r3, #192	@ 0xc0
1004bac4:	05db      	lsls	r3, r3, #23
1004bac6:	683a      	ldr	r2, [r7, #0]
1004bac8:	605a      	str	r2, [r3, #4]

  HAL_RADIO_TIMER_EndOfRadioActivityIsr();
1004baca:	f000 fcd3 	bl	1004c474 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>

#if (USE_RADIO_PROPRIETARY_DRIVER == 1)
  HAL_RADIO_ActionPacketIsr(blue_status | blue_interrupt);
#endif

  HAL_RADIO_TxRxCallback(blue_status | blue_interrupt);
1004bace:	687a      	ldr	r2, [r7, #4]
1004bad0:	683b      	ldr	r3, [r7, #0]
1004bad2:	4313      	orrs	r3, r2
1004bad4:	0018      	movs	r0, r3
1004bad6:	f006 fe36 	bl	10052746 <HAL_RADIO_TxRxCallback>

  HAL_RADIO_TIMER_RadioTimerIsr();
1004bada:	f000 fcc5 	bl	1004c468 <HAL_RADIO_TIMER_RadioTimerIsr>
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  blue_interrupt = BLUE->INTERRUPT1REG;
1004bade:	23c0      	movs	r3, #192	@ 0xc0
1004bae0:	05db      	lsls	r3, r3, #23
1004bae2:	685b      	ldr	r3, [r3, #4]
1004bae4:	603b      	str	r3, [r7, #0]
}
1004bae6:	46c0      	nop			@ (mov r8, r8)
1004bae8:	46bd      	mov	sp, r7
1004baea:	b002      	add	sp, #8
1004baec:	bd80      	pop	{r7, pc}

1004baee <HAL_RADIO_TXRX_SEQ_IRQHandler>:


void HAL_RADIO_TXRX_SEQ_IRQHandler(void)
{
1004baee:	b580      	push	{r7, lr}
1004baf0:	af00      	add	r7, sp, #0
  HAL_RADIO_TxRxSeqCallback();
1004baf2:	f006 fc4d 	bl	10052390 <HAL_RADIO_TxRxSeqCallback>
}
1004baf6:	46c0      	nop			@ (mov r8, r8)
1004baf8:	46bd      	mov	sp, r7
1004bafa:	bd80      	pop	{r7, pc}

1004bafc <__NVIC_EnableIRQ>:
{
1004bafc:	b580      	push	{r7, lr}
1004bafe:	b082      	sub	sp, #8
1004bb00:	af00      	add	r7, sp, #0
1004bb02:	0002      	movs	r2, r0
1004bb04:	1dfb      	adds	r3, r7, #7
1004bb06:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004bb08:	1dfb      	adds	r3, r7, #7
1004bb0a:	781b      	ldrb	r3, [r3, #0]
1004bb0c:	2b7f      	cmp	r3, #127	@ 0x7f
1004bb0e:	d809      	bhi.n	1004bb24 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1004bb10:	1dfb      	adds	r3, r7, #7
1004bb12:	781b      	ldrb	r3, [r3, #0]
1004bb14:	001a      	movs	r2, r3
1004bb16:	231f      	movs	r3, #31
1004bb18:	401a      	ands	r2, r3
1004bb1a:	4b04      	ldr	r3, [pc, #16]	@ (1004bb2c <__NVIC_EnableIRQ+0x30>)
1004bb1c:	2101      	movs	r1, #1
1004bb1e:	4091      	lsls	r1, r2
1004bb20:	000a      	movs	r2, r1
1004bb22:	601a      	str	r2, [r3, #0]
}
1004bb24:	46c0      	nop			@ (mov r8, r8)
1004bb26:	46bd      	mov	sp, r7
1004bb28:	b002      	add	sp, #8
1004bb2a:	bd80      	pop	{r7, pc}
1004bb2c:	e000e100 	.word	0xe000e100

1004bb30 <LL_RADIO_TIMER_EnableTimer1>:
{
1004bb30:	b580      	push	{r7, lr}
1004bb32:	b082      	sub	sp, #8
1004bb34:	af00      	add	r7, sp, #0
1004bb36:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, LL_RADIO_TIMER_1);
1004bb38:	687b      	ldr	r3, [r7, #4]
1004bb3a:	68db      	ldr	r3, [r3, #12]
1004bb3c:	2203      	movs	r2, #3
1004bb3e:	4393      	bics	r3, r2
1004bb40:	2202      	movs	r2, #2
1004bb42:	431a      	orrs	r2, r3
1004bb44:	687b      	ldr	r3, [r7, #4]
1004bb46:	60da      	str	r2, [r3, #12]
}
1004bb48:	46c0      	nop			@ (mov r8, r8)
1004bb4a:	46bd      	mov	sp, r7
1004bb4c:	b002      	add	sp, #8
1004bb4e:	bd80      	pop	{r7, pc}

1004bb50 <LL_RADIO_TIMER_DisableTimer1>:
{
1004bb50:	b580      	push	{r7, lr}
1004bb52:	b082      	sub	sp, #8
1004bb54:	af00      	add	r7, sp, #0
1004bb56:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004bb58:	687b      	ldr	r3, [r7, #4]
1004bb5a:	68db      	ldr	r3, [r3, #12]
1004bb5c:	2203      	movs	r2, #3
1004bb5e:	4393      	bics	r3, r2
1004bb60:	001a      	movs	r2, r3
1004bb62:	687b      	ldr	r3, [r7, #4]
1004bb64:	60da      	str	r2, [r3, #12]
}
1004bb66:	46c0      	nop			@ (mov r8, r8)
1004bb68:	46bd      	mov	sp, r7
1004bb6a:	b002      	add	sp, #8
1004bb6c:	bd80      	pop	{r7, pc}

1004bb6e <LL_RADIO_TIMER_DisableTimer2>:
{
1004bb6e:	b580      	push	{r7, lr}
1004bb70:	b082      	sub	sp, #8
1004bb72:	af00      	add	r7, sp, #0
1004bb74:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004bb76:	687b      	ldr	r3, [r7, #4]
1004bb78:	68db      	ldr	r3, [r3, #12]
1004bb7a:	2203      	movs	r2, #3
1004bb7c:	4393      	bics	r3, r2
1004bb7e:	001a      	movs	r2, r3
1004bb80:	687b      	ldr	r3, [r7, #4]
1004bb82:	60da      	str	r2, [r3, #12]
}
1004bb84:	46c0      	nop			@ (mov r8, r8)
1004bb86:	46bd      	mov	sp, r7
1004bb88:	b002      	add	sp, #8
1004bb8a:	bd80      	pop	{r7, pc}

1004bb8c <LL_RADIO_TIMER_SetTimeout>:
{
1004bb8c:	b580      	push	{r7, lr}
1004bb8e:	b082      	sub	sp, #8
1004bb90:	af00      	add	r7, sp, #0
1004bb92:	6078      	str	r0, [r7, #4]
1004bb94:	6039      	str	r1, [r7, #0]
  WRITE_REG(BLUEx->TIMEOUTREG, timeout);
1004bb96:	687b      	ldr	r3, [r7, #4]
1004bb98:	683a      	ldr	r2, [r7, #0]
1004bb9a:	611a      	str	r2, [r3, #16]
}
1004bb9c:	46c0      	nop			@ (mov r8, r8)
1004bb9e:	46bd      	mov	sp, r7
1004bba0:	b002      	add	sp, #8
1004bba2:	bd80      	pop	{r7, pc}

1004bba4 <LL_RADIO_TIMER_EnableBLEWakeupTimer>:
{
1004bba4:	b580      	push	{r7, lr}
1004bba6:	b082      	sub	sp, #8
1004bba8:	af00      	add	r7, sp, #0
1004bbaa:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004bbac:	687b      	ldr	r3, [r7, #4]
1004bbae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004bbb0:	2280      	movs	r2, #128	@ 0x80
1004bbb2:	05d2      	lsls	r2, r2, #23
1004bbb4:	431a      	orrs	r2, r3
1004bbb6:	687b      	ldr	r3, [r7, #4]
1004bbb8:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004bbba:	46c0      	nop			@ (mov r8, r8)
1004bbbc:	46bd      	mov	sp, r7
1004bbbe:	b002      	add	sp, #8
1004bbc0:	bd80      	pop	{r7, pc}
	...

1004bbc4 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
1004bbc4:	b580      	push	{r7, lr}
1004bbc6:	b082      	sub	sp, #8
1004bbc8:	af00      	add	r7, sp, #0
1004bbca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004bbcc:	687b      	ldr	r3, [r7, #4]
1004bbce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004bbd0:	4a03      	ldr	r2, [pc, #12]	@ (1004bbe0 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
1004bbd2:	401a      	ands	r2, r3
1004bbd4:	687b      	ldr	r3, [r7, #4]
1004bbd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004bbd8:	46c0      	nop			@ (mov r8, r8)
1004bbda:	46bd      	mov	sp, r7
1004bbdc:	b002      	add	sp, #8
1004bbde:	bd80      	pop	{r7, pc}
1004bbe0:	bfffffff 	.word	0xbfffffff

1004bbe4 <LL_RADIO_TIMER_EnableCPUWakeupTimer>:
{
1004bbe4:	b580      	push	{r7, lr}
1004bbe6:	b082      	sub	sp, #8
1004bbe8:	af00      	add	r7, sp, #0
1004bbea:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
1004bbec:	687b      	ldr	r3, [r7, #4]
1004bbee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1004bbf0:	2280      	movs	r2, #128	@ 0x80
1004bbf2:	05d2      	lsls	r2, r2, #23
1004bbf4:	431a      	orrs	r2, r3
1004bbf6:	687b      	ldr	r3, [r7, #4]
1004bbf8:	631a      	str	r2, [r3, #48]	@ 0x30
}
1004bbfa:	46c0      	nop			@ (mov r8, r8)
1004bbfc:	46bd      	mov	sp, r7
1004bbfe:	b002      	add	sp, #8
1004bc00:	bd80      	pop	{r7, pc}
	...

1004bc04 <LL_RADIO_TIMER_DisableCPUWakeupTimer>:
{
1004bc04:	b580      	push	{r7, lr}
1004bc06:	b082      	sub	sp, #8
1004bc08:	af00      	add	r7, sp, #0
1004bc0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
1004bc0c:	687b      	ldr	r3, [r7, #4]
1004bc0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1004bc10:	4a03      	ldr	r2, [pc, #12]	@ (1004bc20 <LL_RADIO_TIMER_DisableCPUWakeupTimer+0x1c>)
1004bc12:	401a      	ands	r2, r3
1004bc14:	687b      	ldr	r3, [r7, #4]
1004bc16:	631a      	str	r2, [r3, #48]	@ 0x30
}
1004bc18:	46c0      	nop			@ (mov r8, r8)
1004bc1a:	46bd      	mov	sp, r7
1004bc1c:	b002      	add	sp, #8
1004bc1e:	bd80      	pop	{r7, pc}
1004bc20:	bfffffff 	.word	0xbfffffff

1004bc24 <LL_RADIO_TIMER_SetWakeupOffset>:
{
1004bc24:	b580      	push	{r7, lr}
1004bc26:	b082      	sub	sp, #8
1004bc28:	af00      	add	r7, sp, #0
1004bc2a:	6078      	str	r0, [r7, #4]
1004bc2c:	000a      	movs	r2, r1
1004bc2e:	1cfb      	adds	r3, r7, #3
1004bc30:	701a      	strb	r2, [r3, #0]
  WRITE_REG(WAKEUPx->WAKEUP_OFFSET[0], (Time & 0xFF));
1004bc32:	1cfb      	adds	r3, r7, #3
1004bc34:	781a      	ldrb	r2, [r3, #0]
1004bc36:	687b      	ldr	r3, [r7, #4]
1004bc38:	609a      	str	r2, [r3, #8]
}
1004bc3a:	46c0      	nop			@ (mov r8, r8)
1004bc3c:	46bd      	mov	sp, r7
1004bc3e:	b002      	add	sp, #8
1004bc40:	bd80      	pop	{r7, pc}

1004bc42 <LL_RADIO_TIMER_SetBLEWakeupTime>:
{
1004bc42:	b580      	push	{r7, lr}
1004bc44:	b082      	sub	sp, #8
1004bc46:	af00      	add	r7, sp, #0
1004bc48:	6078      	str	r0, [r7, #4]
1004bc4a:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->BLUE_WAKEUP_TIME, Time);
1004bc4c:	687b      	ldr	r3, [r7, #4]
1004bc4e:	683a      	ldr	r2, [r7, #0]
1004bc50:	625a      	str	r2, [r3, #36]	@ 0x24
}
1004bc52:	46c0      	nop			@ (mov r8, r8)
1004bc54:	46bd      	mov	sp, r7
1004bc56:	b002      	add	sp, #8
1004bc58:	bd80      	pop	{r7, pc}

1004bc5a <LL_RADIO_TIMER_SetCPUWakeupTime>:
{
1004bc5a:	b580      	push	{r7, lr}
1004bc5c:	b082      	sub	sp, #8
1004bc5e:	af00      	add	r7, sp, #0
1004bc60:	6078      	str	r0, [r7, #4]
1004bc62:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->CM0_WAKEUP_TIME, Time);
1004bc64:	687b      	ldr	r3, [r7, #4]
1004bc66:	683a      	ldr	r2, [r7, #0]
1004bc68:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004bc6a:	46c0      	nop			@ (mov r8, r8)
1004bc6c:	46bd      	mov	sp, r7
1004bc6e:	b002      	add	sp, #8
1004bc70:	bd80      	pop	{r7, pc}

1004bc72 <LL_RADIO_TIMER_GetAbsoluteTime>:
{
1004bc72:	b580      	push	{r7, lr}
1004bc74:	b082      	sub	sp, #8
1004bc76:	af00      	add	r7, sp, #0
1004bc78:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
1004bc7a:	687b      	ldr	r3, [r7, #4]
1004bc7c:	691b      	ldr	r3, [r3, #16]
}
1004bc7e:	0018      	movs	r0, r3
1004bc80:	46bd      	mov	sp, r7
1004bc82:	b002      	add	sp, #8
1004bc84:	bd80      	pop	{r7, pc}

1004bc86 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    SLEEP_EN   LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP_TypeDef *WAKEUPx)
{
1004bc86:	b580      	push	{r7, lr}
1004bc88:	b082      	sub	sp, #8
1004bc8a:	af00      	add	r7, sp, #0
1004bc8c:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN);
1004bc8e:	687b      	ldr	r3, [r7, #4]
1004bc90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004bc92:	2280      	movs	r2, #128	@ 0x80
1004bc94:	0592      	lsls	r2, r2, #22
1004bc96:	431a      	orrs	r2, r3
1004bc98:	687b      	ldr	r3, [r7, #4]
1004bc9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004bc9c:	46c0      	nop			@ (mov r8, r8)
1004bc9e:	46bd      	mov	sp, r7
1004bca0:	b002      	add	sp, #8
1004bca2:	bd80      	pop	{r7, pc}

1004bca4 <LL_RADIO_TIMER_SetSleepRequestMode>:
  * @param  WAKEUPx Radio Timer instance
  * @param  mode Sleep mode value in range 0-7
  * @retval None.
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP_TypeDef *WAKEUPx, uint8_t mode)
{
1004bca4:	b580      	push	{r7, lr}
1004bca6:	b082      	sub	sp, #8
1004bca8:	af00      	add	r7, sp, #0
1004bcaa:	6078      	str	r0, [r7, #4]
1004bcac:	000a      	movs	r2, r1
1004bcae:	1cfb      	adds	r3, r7, #3
1004bcb0:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  return;
#else
  MODIFY_REG_FIELD(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_REQ_MODE, (mode & 0x7));
1004bcb2:	4b08      	ldr	r3, [pc, #32]	@ (1004bcd4 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
1004bcb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004bcb6:	2207      	movs	r2, #7
1004bcb8:	4393      	bics	r3, r2
1004bcba:	0019      	movs	r1, r3
1004bcbc:	1cfb      	adds	r3, r7, #3
1004bcbe:	781b      	ldrb	r3, [r3, #0]
1004bcc0:	2207      	movs	r2, #7
1004bcc2:	401a      	ands	r2, r3
1004bcc4:	4b03      	ldr	r3, [pc, #12]	@ (1004bcd4 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
1004bcc6:	430a      	orrs	r2, r1
1004bcc8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
}
1004bcca:	46c0      	nop			@ (mov r8, r8)
1004bccc:	46bd      	mov	sp, r7
1004bcce:	b002      	add	sp, #8
1004bcd0:	bd80      	pop	{r7, pc}
1004bcd2:	46c0      	nop			@ (mov r8, r8)
1004bcd4:	60001800 	.word	0x60001800

1004bcd8 <LL_RADIO_TIMER_EnableCPUWakeupIT>:
  * @rmtoll WAKEUP_CM0_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableCPUWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
1004bcd8:	b580      	push	{r7, lr}
1004bcda:	b082      	sub	sp, #8
1004bcdc:	af00      	add	r7, sp, #0
1004bcde:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_ENABLE, WAKEUP_WAKEUP_CM0_IRQ_ENABLE_WAKEUP_IT);
1004bce0:	687b      	ldr	r3, [r7, #4]
1004bce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004bce4:	2201      	movs	r2, #1
1004bce6:	431a      	orrs	r2, r3
1004bce8:	687b      	ldr	r3, [r7, #4]
1004bcea:	649a      	str	r2, [r3, #72]	@ 0x48
}
1004bcec:	46c0      	nop			@ (mov r8, r8)
1004bcee:	46bd      	mov	sp, r7
1004bcf0:	b002      	add	sp, #8
1004bcf2:	bd80      	pop	{r7, pc}

1004bcf4 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004bcf4:	b580      	push	{r7, lr}
1004bcf6:	b082      	sub	sp, #8
1004bcf8:	af00      	add	r7, sp, #0
1004bcfa:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT);
1004bcfc:	687b      	ldr	r3, [r7, #4]
1004bcfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004bd00:	2201      	movs	r2, #1
1004bd02:	431a      	orrs	r2, r3
1004bd04:	687b      	ldr	r3, [r7, #4]
1004bd06:	64da      	str	r2, [r3, #76]	@ 0x4c
}
1004bd08:	46c0      	nop			@ (mov r8, r8)
1004bd0a:	46bd      	mov	sp, r7
1004bd0c:	b002      	add	sp, #8
1004bd0e:	bd80      	pop	{r7, pc}

1004bd10 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004bd10:	b580      	push	{r7, lr}
1004bd12:	b082      	sub	sp, #8
1004bd14:	af00      	add	r7, sp, #0
1004bd16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
1004bd18:	687b      	ldr	r3, [r7, #4]
1004bd1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004bd1c:	2201      	movs	r2, #1
1004bd1e:	4013      	ands	r3, r2
1004bd20:	2b01      	cmp	r3, #1
1004bd22:	d101      	bne.n	1004bd28 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x18>
1004bd24:	2301      	movs	r3, #1
1004bd26:	e000      	b.n	1004bd2a <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x1a>
1004bd28:	2300      	movs	r3, #0
}
1004bd2a:	0018      	movs	r0, r3
1004bd2c:	46bd      	mov	sp, r7
1004bd2e:	b002      	add	sp, #8
1004bd30:	bd80      	pop	{r7, pc}

1004bd32 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>:
  * @param RADIO_CTRLx: Radio Control instance
  * @param  Count Slow clock is measured in a window of SLOW_COUNT+1 slow clock cycles
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL_TypeDef *RADIO_CTRLx, uint32_t Count)
{
1004bd32:	b580      	push	{r7, lr}
1004bd34:	b082      	sub	sp, #8
1004bd36:	af00      	add	r7, sp, #0
1004bd38:	6078      	str	r0, [r7, #4]
1004bd3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(RADIO_CTRLx->CLK32COUNT_REG, Count);
1004bd3c:	687b      	ldr	r3, [r7, #4]
1004bd3e:	683a      	ldr	r2, [r7, #0]
1004bd40:	605a      	str	r2, [r3, #4]
}
1004bd42:	46c0      	nop			@ (mov r8, r8)
1004bd44:	46bd      	mov	sp, r7
1004bd46:	b002      	add	sp, #8
1004bd48:	bd80      	pop	{r7, pc}

1004bd4a <LL_RADIO_TIMER_StartLSICalibration>:
  * @brief  Start the LSI calibration procedure.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004bd4a:	b580      	push	{r7, lr}
1004bd4c:	b082      	sub	sp, #8
1004bd4e:	af00      	add	r7, sp, #0
1004bd50:	6078      	str	r0, [r7, #4]
  WRITE_REG(RADIO_CTRLx->CLK32PERIOD_REG, 0);
1004bd52:	687b      	ldr	r3, [r7, #4]
1004bd54:	2200      	movs	r2, #0
1004bd56:	609a      	str	r2, [r3, #8]
}
1004bd58:	46c0      	nop			@ (mov r8, r8)
1004bd5a:	46bd      	mov	sp, r7
1004bd5c:	b002      	add	sp, #8
1004bd5e:	bd80      	pop	{r7, pc}

1004bd60 <LL_RADIO_TIMER_GetLSIPeriod>:
  * @brief  Get the LSI clock Period calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock period calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004bd60:	b580      	push	{r7, lr}
1004bd62:	b082      	sub	sp, #8
1004bd64:	af00      	add	r7, sp, #0
1004bd66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32PERIOD_REG));
1004bd68:	687b      	ldr	r3, [r7, #4]
1004bd6a:	689b      	ldr	r3, [r3, #8]
}
1004bd6c:	0018      	movs	r0, r3
1004bd6e:	46bd      	mov	sp, r7
1004bd70:	b002      	add	sp, #8
1004bd72:	bd80      	pop	{r7, pc}

1004bd74 <LL_RADIO_TIMER_GetLSIFrequency>:
  * @brief  Get the LSI clock Frequency calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock frequency calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004bd74:	b580      	push	{r7, lr}
1004bd76:	b082      	sub	sp, #8
1004bd78:	af00      	add	r7, sp, #0
1004bd7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32FREQUENCY_REG));
1004bd7c:	687b      	ldr	r3, [r7, #4]
1004bd7e:	68db      	ldr	r3, [r3, #12]
}
1004bd80:	0018      	movs	r0, r3
1004bd82:	46bd      	mov	sp, r7
1004bd84:	b002      	add	sp, #8
1004bd86:	bd80      	pop	{r7, pc}

1004bd88 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>:
  * @brief  Clear the LSI calibration ended flag.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004bd88:	b580      	push	{r7, lr}
1004bd8a:	b082      	sub	sp, #8
1004bd8c:	af00      	add	r7, sp, #0
1004bd8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ);
1004bd90:	687b      	ldr	r3, [r7, #4]
1004bd92:	691b      	ldr	r3, [r3, #16]
1004bd94:	2201      	movs	r2, #1
1004bd96:	431a      	orrs	r2, r3
1004bd98:	687b      	ldr	r3, [r7, #4]
1004bd9a:	611a      	str	r2, [r3, #16]
}
1004bd9c:	46c0      	nop			@ (mov r8, r8)
1004bd9e:	46bd      	mov	sp, r7
1004bda0:	b002      	add	sp, #8
1004bda2:	bd80      	pop	{r7, pc}

1004bda4 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>:
  * @brief  Check if the LSI calibration ended flag is set or not.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004bda4:	b580      	push	{r7, lr}
1004bda6:	b082      	sub	sp, #8
1004bda8:	af00      	add	r7, sp, #0
1004bdaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ) == (RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ)) ? 1UL : 0UL);
1004bdac:	687b      	ldr	r3, [r7, #4]
1004bdae:	691b      	ldr	r3, [r3, #16]
1004bdb0:	2201      	movs	r2, #1
1004bdb2:	4013      	ands	r3, r2
1004bdb4:	2b01      	cmp	r3, #1
1004bdb6:	d101      	bne.n	1004bdbc <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x18>
1004bdb8:	2301      	movs	r3, #1
1004bdba:	e000      	b.n	1004bdbe <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x1a>
1004bdbc:	2300      	movs	r3, #0
}
1004bdbe:	0018      	movs	r0, r3
1004bdc0:	46bd      	mov	sp, r7
1004bdc2:	b002      	add	sp, #8
1004bdc4:	bd80      	pop	{r7, pc}
	...

1004bdc8 <HAL_RADIO_TIMER_Init>:
  *         section of the application.
  * @param RADIO_TIMER_InitStruct Radio Timer Initialization parameters
  * @retval None
  */
void HAL_RADIO_TIMER_Init(RADIO_TIMER_InitTypeDef *RADIO_TIMER_InitStruct)
{
1004bdc8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004bdca:	b083      	sub	sp, #12
1004bdcc:	af00      	add	r7, sp, #0
1004bdce:	6078      	str	r0, [r7, #4]
  /* Interrupt Configuration */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
1004bdd0:	4b71      	ldr	r3, [pc, #452]	@ (1004bf98 <HAL_RADIO_TIMER_Init+0x1d0>)
1004bdd2:	0018      	movs	r0, r3
1004bdd4:	f7ff ff8e 	bl	1004bcf4 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP);
1004bdd8:	4b6f      	ldr	r3, [pc, #444]	@ (1004bf98 <HAL_RADIO_TIMER_Init+0x1d0>)
1004bdda:	0018      	movs	r0, r3
1004bddc:	f7ff ff7c 	bl	1004bcd8 <LL_RADIO_TIMER_EnableCPUWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_CPU_WKUP_IRQn);
1004bde0:	2017      	movs	r0, #23
1004bde2:	f7ff fe8b 	bl	1004bafc <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_ERROR_IRQn);
1004bde6:	2014      	movs	r0, #20
1004bde8:	f7ff fe88 	bl	1004bafc <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_TXRX_WKUP_IRQn);
  RADIO_TIMER_Context.hostMargin = MAX(HOST_MARGIN, RADIO_TIMER_InitStruct->XTAL_StartupTime);
#endif

  /* Calibration Setting */
  RADIO_TIMER_Context.calibrationSettings.periodicCalibration = (RADIO_TIMER_InitStruct->periodicCalibrationInterval != 0);
1004bdec:	687b      	ldr	r3, [r7, #4]
1004bdee:	685b      	ldr	r3, [r3, #4]
1004bdf0:	1e5a      	subs	r2, r3, #1
1004bdf2:	4193      	sbcs	r3, r2
1004bdf4:	b2db      	uxtb	r3, r3
1004bdf6:	001a      	movs	r2, r3
1004bdf8:	4b68      	ldr	r3, [pc, #416]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bdfa:	701a      	strb	r2, [r3, #0]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration || RADIO_TIMER_InitStruct->enableInitialCalibration)
1004bdfc:	4b67      	ldr	r3, [pc, #412]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bdfe:	781b      	ldrb	r3, [r3, #0]
1004be00:	2b00      	cmp	r3, #0
1004be02:	d103      	bne.n	1004be0c <HAL_RADIO_TIMER_Init+0x44>
1004be04:	687b      	ldr	r3, [r7, #4]
1004be06:	789b      	ldrb	r3, [r3, #2]
1004be08:	2b00      	cmp	r3, #0
1004be0a:	d002      	beq.n	1004be12 <HAL_RADIO_TIMER_Init+0x4a>
  {
    _calibrationProcedure();
1004be0c:	f000 fc0a 	bl	1004c624 <_calibrationProcedure>
1004be10:	e010      	b.n	1004be34 <HAL_RADIO_TIMER_Init+0x6c>
  }
  else
  {
    /* Assume fix frequency at 32.768 kHz */
    RADIO_TIMER_Context.calibrationData.last_period1 = 0x00190000;
1004be12:	4b62      	ldr	r3, [pc, #392]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004be14:	22c8      	movs	r2, #200	@ 0xc8
1004be16:	0352      	lsls	r2, r2, #13
1004be18:	621a      	str	r2, [r3, #32]
    RADIO_TIMER_Context.calibrationData.period1 = 0x00190000 ;
1004be1a:	4b60      	ldr	r3, [pc, #384]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004be1c:	22c8      	movs	r2, #200	@ 0xc8
1004be1e:	0352      	lsls	r2, r2, #13
1004be20:	61da      	str	r2, [r3, #28]
    RADIO_TIMER_Context.calibrationData.freq1 = 0x0028F5C2 ;
1004be22:	4b5e      	ldr	r3, [pc, #376]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004be24:	4a5e      	ldr	r2, [pc, #376]	@ (1004bfa0 <HAL_RADIO_TIMER_Init+0x1d8>)
1004be26:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = 23437;
1004be28:	4b5c      	ldr	r3, [pc, #368]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004be2a:	4a5e      	ldr	r2, [pc, #376]	@ (1004bfa4 <HAL_RADIO_TIMER_Init+0x1dc>)
1004be2c:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.freq = 23456748;
1004be2e:	4b5b      	ldr	r3, [pc, #364]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004be30:	4a5d      	ldr	r2, [pc, #372]	@ (1004bfa8 <HAL_RADIO_TIMER_Init+0x1e0>)
1004be32:	615a      	str	r2, [r3, #20]
  }
  if (RADIO_TIMER_InitStruct->periodicCalibrationInterval == 0)
1004be34:	687b      	ldr	r3, [r7, #4]
1004be36:	685b      	ldr	r3, [r3, #4]
1004be38:	2b00      	cmp	r3, #0
1004be3a:	d108      	bne.n	1004be4e <HAL_RADIO_TIMER_Init+0x86>
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = HAL_RADIO_TIMER_MachineTimeToSysTime(0x50000000);
1004be3c:	23a0      	movs	r3, #160	@ 0xa0
1004be3e:	05db      	lsls	r3, r3, #23
1004be40:	0018      	movs	r0, r3
1004be42:	f000 fb23 	bl	1004c48c <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004be46:	0002      	movs	r2, r0
1004be48:	4b54      	ldr	r3, [pc, #336]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004be4a:	605a      	str	r2, [r3, #4]
1004be4c:	e01d      	b.n	1004be8a <HAL_RADIO_TIMER_Init+0xc2>

    
  }
  else
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = (TIMER_SYSTICK_PER_10MS * RADIO_TIMER_InitStruct->periodicCalibrationInterval) / 10;
1004be4e:	687b      	ldr	r3, [r7, #4]
1004be50:	685b      	ldr	r3, [r3, #4]
1004be52:	031b      	lsls	r3, r3, #12
1004be54:	210a      	movs	r1, #10
1004be56:	0018      	movs	r0, r3
1004be58:	f7f4 f9f2 	bl	10040240 <__udivsi3>
1004be5c:	0003      	movs	r3, r0
1004be5e:	001a      	movs	r2, r3
1004be60:	4b4e      	ldr	r3, [pc, #312]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004be62:	605a      	str	r2, [r3, #4]
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = MIN(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004be64:	4b4d      	ldr	r3, [pc, #308]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004be66:	685e      	ldr	r6, [r3, #4]
1004be68:	4b50      	ldr	r3, [pc, #320]	@ (1004bfac <HAL_RADIO_TIMER_Init+0x1e4>)
1004be6a:	0018      	movs	r0, r3
1004be6c:	f000 fb0e 	bl	1004c48c <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004be70:	0003      	movs	r3, r0
1004be72:	429e      	cmp	r6, r3
1004be74:	d202      	bcs.n	1004be7c <HAL_RADIO_TIMER_Init+0xb4>
1004be76:	4b49      	ldr	r3, [pc, #292]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004be78:	685a      	ldr	r2, [r3, #4]
1004be7a:	e004      	b.n	1004be86 <HAL_RADIO_TIMER_Init+0xbe>
1004be7c:	4b4b      	ldr	r3, [pc, #300]	@ (1004bfac <HAL_RADIO_TIMER_Init+0x1e4>)
1004be7e:	0018      	movs	r0, r3
1004be80:	f000 fb04 	bl	1004c48c <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004be84:	0002      	movs	r2, r0
1004be86:	4b45      	ldr	r3, [pc, #276]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004be88:	605a      	str	r2, [r3, #4]
                                                                              HAL_RADIO_TIMER_MachineTimeToSysTime(TIMER_MAX_VALUE - TIMER_WRAPPING_MARGIN));
  }
  RADIO_TIMER_Context.calibrationSettings.periodicCalibrationCheckDuration = CALIBRATION_CHECK_DURATION;
1004be8a:	4b44      	ldr	r3, [pc, #272]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004be8c:	2264      	movs	r2, #100	@ 0x64
1004be8e:	609a      	str	r2, [r3, #8]
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
1004be90:	4b42      	ldr	r3, [pc, #264]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004be92:	2200      	movs	r2, #0
1004be94:	731a      	strb	r2, [r3, #12]

  /* XTAL startup time configuration */
  RADIO_TIMER_Context.hs_startup_time = RADIO_TIMER_InitStruct->XTAL_StartupTime;
1004be96:	687b      	ldr	r3, [r7, #4]
1004be98:	881b      	ldrh	r3, [r3, #0]
1004be9a:	001a      	movs	r2, r3
1004be9c:	4b3f      	ldr	r3, [pc, #252]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004be9e:	669a      	str	r2, [r3, #104]	@ 0x68
  _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
1004bea0:	4b3e      	ldr	r3, [pc, #248]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bea2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
1004bea4:	b29a      	uxth	r2, r3
1004bea6:	4b3d      	ldr	r3, [pc, #244]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bea8:	699b      	ldr	r3, [r3, #24]
1004beaa:	0019      	movs	r1, r3
1004beac:	0010      	movs	r0, r2
1004beae:	f000 fd2d 	bl	1004c90c <_update_xtal_startup_time>

  /* Init Radio Timer Context */
  RADIO_TIMER_Context.last_setup_time = 0;
1004beb2:	4b3a      	ldr	r3, [pc, #232]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004beb4:	2284      	movs	r2, #132	@ 0x84
1004beb6:	2100      	movs	r1, #0
1004beb8:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.cumulative_time = 0;
1004beba:	4938      	ldr	r1, [pc, #224]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bebc:	2200      	movs	r2, #0
1004bebe:	2300      	movs	r3, #0
1004bec0:	670a      	str	r2, [r1, #112]	@ 0x70
1004bec2:	674b      	str	r3, [r1, #116]	@ 0x74
  RADIO_TIMER_Context.last_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004bec4:	4b34      	ldr	r3, [pc, #208]	@ (1004bf98 <HAL_RADIO_TIMER_Init+0x1d0>)
1004bec6:	0018      	movs	r0, r3
1004bec8:	f7ff fed3 	bl	1004bc72 <LL_RADIO_TIMER_GetAbsoluteTime>
1004becc:	0002      	movs	r2, r0
1004bece:	4b33      	ldr	r3, [pc, #204]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bed0:	2180      	movs	r1, #128	@ 0x80
1004bed2:	505a      	str	r2, [r3, r1]
  RADIO_TIMER_Context.last_system_time = 0;
1004bed4:	4931      	ldr	r1, [pc, #196]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bed6:	2200      	movs	r2, #0
1004bed8:	2300      	movs	r3, #0
1004beda:	678a      	str	r2, [r1, #120]	@ 0x78
1004bedc:	67cb      	str	r3, [r1, #124]	@ 0x7c
  RADIO_TIMER_Context.calibrationData.last_calibration_time = 0;
1004bede:	492f      	ldr	r1, [pc, #188]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bee0:	2200      	movs	r2, #0
1004bee2:	2300      	movs	r3, #0
1004bee4:	628a      	str	r2, [r1, #40]	@ 0x28
1004bee6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  RADIO_TIMER_Context.calibrationData.calibration_data_available = 0;
1004bee8:	4b2c      	ldr	r3, [pc, #176]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004beea:	2234      	movs	r2, #52	@ 0x34
1004beec:	2100      	movs	r1, #0
1004beee:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004bef0:	4b2a      	ldr	r3, [pc, #168]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bef2:	6858      	ldr	r0, [r3, #4]
                                                                     RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
1004bef4:	4b29      	ldr	r3, [pc, #164]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bef6:	699b      	ldr	r3, [r3, #24]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004bef8:	0019      	movs	r1, r3
1004befa:	4b2d      	ldr	r3, [pc, #180]	@ (1004bfb0 <HAL_RADIO_TIMER_Init+0x1e8>)
1004befc:	001a      	movs	r2, r3
1004befe:	f7f4 f8df 	bl	100400c0 <blue_unit_conversion>
1004bf02:	0002      	movs	r2, r0
1004bf04:	4b25      	ldr	r3, [pc, #148]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bf06:	631a      	str	r2, [r3, #48]	@ 0x30
  RADIO_TIMER_Context.wakeup_calibration = RADIO_TIMER_Context.calibrationSettings.periodicCalibration;
1004bf08:	4b24      	ldr	r3, [pc, #144]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bf0a:	7819      	ldrb	r1, [r3, #0]
1004bf0c:	4b23      	ldr	r3, [pc, #140]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bf0e:	2294      	movs	r2, #148	@ 0x94
1004bf10:	5499      	strb	r1, [r3, r2]

  /* Init the Virtual Timer queue */
  RADIO_TIMER_Context.rootNode = NULL;
1004bf12:	4b22      	ldr	r3, [pc, #136]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bf14:	228c      	movs	r2, #140	@ 0x8c
1004bf16:	2100      	movs	r1, #0
1004bf18:	5099      	str	r1, [r3, r2]
  RADIO_TIMER_Context.enableTimeBase = TRUE;
1004bf1a:	4b20      	ldr	r3, [pc, #128]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bf1c:	2290      	movs	r2, #144	@ 0x90
1004bf1e:	2101      	movs	r1, #1
1004bf20:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.stop_notimer_action = FALSE;
1004bf22:	4b1e      	ldr	r3, [pc, #120]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bf24:	2293      	movs	r2, #147	@ 0x93
1004bf26:	2100      	movs	r1, #0
1004bf28:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.expired_count = 0;
1004bf2a:	4b1c      	ldr	r3, [pc, #112]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bf2c:	2291      	movs	r2, #145	@ 0x91
1004bf2e:	2100      	movs	r1, #0
1004bf30:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.served_count = 0;
1004bf32:	4b1a      	ldr	r3, [pc, #104]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bf34:	2292      	movs	r2, #146	@ 0x92
1004bf36:	2100      	movs	r1, #0
1004bf38:	5499      	strb	r1, [r3, r2]

  /* Init Radio Timer queue */
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004bf3a:	4b18      	ldr	r3, [pc, #96]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bf3c:	2261      	movs	r2, #97	@ 0x61
1004bf3e:	2100      	movs	r1, #0
1004bf40:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004bf42:	4b16      	ldr	r3, [pc, #88]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bf44:	2262      	movs	r2, #98	@ 0x62
1004bf46:	2100      	movs	r1, #0
1004bf48:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004bf4a:	4b14      	ldr	r3, [pc, #80]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bf4c:	2263      	movs	r2, #99	@ 0x63
1004bf4e:	2100      	movs	r1, #0
1004bf50:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = 0;
1004bf52:	4912      	ldr	r1, [pc, #72]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bf54:	2200      	movs	r2, #0
1004bf56:	2300      	movs	r3, #0
1004bf58:	658a      	str	r2, [r1, #88]	@ 0x58
1004bf5a:	65cb      	str	r3, [r1, #92]	@ 0x5c

  /* Configure the Calibration callback and schedule the next calibration */
  RADIO_TIMER_Context.calibrationTimer.callback = _calibration_callback;
1004bf5c:	4b0f      	ldr	r3, [pc, #60]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bf5e:	4a15      	ldr	r2, [pc, #84]	@ (1004bfb4 <HAL_RADIO_TIMER_Init+0x1ec>)
1004bf60:	649a      	str	r2, [r3, #72]	@ 0x48
  RADIO_TIMER_Context.calibrationTimer.userData = NULL;
1004bf62:	4b0e      	ldr	r3, [pc, #56]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bf64:	2200      	movs	r2, #0
1004bf66:	655a      	str	r2, [r3, #84]	@ 0x54
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
               HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
1004bf68:	f000 faa6 	bl	1004c4b8 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004bf6c:	0002      	movs	r2, r0
1004bf6e:	000b      	movs	r3, r1
1004bf70:	490a      	ldr	r1, [pc, #40]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bf72:	6849      	ldr	r1, [r1, #4]
1004bf74:	000c      	movs	r4, r1
1004bf76:	2100      	movs	r1, #0
1004bf78:	000d      	movs	r5, r1
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
1004bf7a:	1912      	adds	r2, r2, r4
1004bf7c:	416b      	adcs	r3, r5
1004bf7e:	490e      	ldr	r1, [pc, #56]	@ (1004bfb8 <HAL_RADIO_TIMER_Init+0x1f0>)
1004bf80:	0008      	movs	r0, r1
1004bf82:	f000 fd1d 	bl	1004c9c0 <_start_timer>

  /* Tx & Rx delay configuration */
  _configureTxRxDelay(&RADIO_TIMER_Context, TRUE);
1004bf86:	4b05      	ldr	r3, [pc, #20]	@ (1004bf9c <HAL_RADIO_TIMER_Init+0x1d4>)
1004bf88:	2101      	movs	r1, #1
1004bf8a:	0018      	movs	r0, r3
1004bf8c:	f000 fbfa 	bl	1004c784 <_configureTxRxDelay>
}
1004bf90:	46c0      	nop			@ (mov r8, r8)
1004bf92:	46bd      	mov	sp, r7
1004bf94:	b003      	add	sp, #12
1004bf96:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004bf98:	60001800 	.word	0x60001800
1004bf9c:	200026f8 	.word	0x200026f8
1004bfa0:	0028f5c2 	.word	0x0028f5c2
1004bfa4:	00005b8d 	.word	0x00005b8d
1004bfa8:	0165ebec 	.word	0x0165ebec
1004bfac:	ffffefff 	.word	0xffffefff
1004bfb0:	00000326 	.word	0x00000326
1004bfb4:	1004c969 	.word	0x1004c969
1004bfb8:	20002738 	.word	0x20002738

1004bfbc <HAL_RADIO_TIMER_Tick>:
  * Check expired timers and execute user callback.
  * It must be placed inside the infinite loop.
  * @retval None
  */
void HAL_RADIO_TIMER_Tick(void)
{
1004bfbc:	b5b0      	push	{r4, r5, r7, lr}
1004bfbe:	b090      	sub	sp, #64	@ 0x40
1004bfc0:	af00      	add	r7, sp, #0
  uint8_t expired = 0;
1004bfc2:	230f      	movs	r3, #15
1004bfc4:	18fb      	adds	r3, r7, r3
1004bfc6:	2200      	movs	r2, #0
1004bfc8:	701a      	strb	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004bfca:	f3ef 8310 	mrs	r3, PRIMASK
1004bfce:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
1004bfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  ATOMIC_SECTION_BEGIN();
1004bfd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
1004bfd4:	b672      	cpsid	i
}
1004bfd6:	46c0      	nop			@ (mov r8, r8)
  if (RADIO_TIMER_Context.radioTimer.active)
1004bfd8:	4b9e      	ldr	r3, [pc, #632]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004bfda:	2261      	movs	r2, #97	@ 0x61
1004bfdc:	5c9b      	ldrb	r3, [r3, r2]
1004bfde:	2b00      	cmp	r3, #0
1004bfe0:	d00f      	beq.n	1004c002 <HAL_RADIO_TIMER_Tick+0x46>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < HAL_RADIO_TIMER_GetCurrentSysTime())
1004bfe2:	4b9c      	ldr	r3, [pc, #624]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004bfe4:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
1004bfe6:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
1004bfe8:	f000 fa66 	bl	1004c4b8 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004bfec:	0002      	movs	r2, r0
1004bfee:	000b      	movs	r3, r1
1004bff0:	42ab      	cmp	r3, r5
1004bff2:	d802      	bhi.n	1004bffa <HAL_RADIO_TIMER_Tick+0x3e>
1004bff4:	d105      	bne.n	1004c002 <HAL_RADIO_TIMER_Tick+0x46>
1004bff6:	42a2      	cmp	r2, r4
1004bff8:	d903      	bls.n	1004c002 <HAL_RADIO_TIMER_Tick+0x46>
    {
      RADIO_TIMER_Context.radioTimer.active = FALSE;
1004bffa:	4b96      	ldr	r3, [pc, #600]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004bffc:	2261      	movs	r2, #97	@ 0x61
1004bffe:	2100      	movs	r1, #0
1004c000:	5499      	strb	r1, [r3, r2]
1004c002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004c004:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004c006:	6a3b      	ldr	r3, [r7, #32]
1004c008:	f383 8810 	msr	PRIMASK, r3
}
1004c00c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  ATOMIC_SECTION_END();

  /* Check for expired timers */
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
1004c00e:	e06e      	b.n	1004c0ee <HAL_RADIO_TIMER_Tick+0x132>
  {
    VTIMER_HandleType *expiredList, *curr;
    uint8_t to_be_served = DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count);
1004c010:	4b90      	ldr	r3, [pc, #576]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c012:	2291      	movs	r2, #145	@ 0x91
1004c014:	5c99      	ldrb	r1, [r3, r2]
1004c016:	4b8f      	ldr	r3, [pc, #572]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c018:	2292      	movs	r2, #146	@ 0x92
1004c01a:	5c9a      	ldrb	r2, [r3, r2]
1004c01c:	232b      	movs	r3, #43	@ 0x2b
1004c01e:	2008      	movs	r0, #8
1004c020:	181b      	adds	r3, r3, r0
1004c022:	19db      	adds	r3, r3, r7
1004c024:	1a8a      	subs	r2, r1, r2
1004c026:	701a      	strb	r2, [r3, #0]

    RADIO_TIMER_Context.rootNode = _check_callbacks(RADIO_TIMER_Context.rootNode, &expiredList);
1004c028:	4b8a      	ldr	r3, [pc, #552]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c02a:	228c      	movs	r2, #140	@ 0x8c
1004c02c:	589b      	ldr	r3, [r3, r2]
1004c02e:	183a      	adds	r2, r7, r0
1004c030:	0011      	movs	r1, r2
1004c032:	0018      	movs	r0, r3
1004c034:	f000 fe9a 	bl	1004cd6c <_check_callbacks>
1004c038:	0002      	movs	r2, r0
1004c03a:	4b86      	ldr	r3, [pc, #536]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c03c:	218c      	movs	r1, #140	@ 0x8c
1004c03e:	505a      	str	r2, [r3, r1]

    /* Call all the user callbacks */
    curr = expiredList;
1004c040:	68bb      	ldr	r3, [r7, #8]
1004c042:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
1004c044:	e010      	b.n	1004c068 <HAL_RADIO_TIMER_Tick+0xac>
    {
      /* Save next pointer, in case callback start the timer again */
      VTIMER_HandleType *next = curr->next;
1004c046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004c048:	691b      	ldr	r3, [r3, #16]
1004c04a:	62bb      	str	r3, [r7, #40]	@ 0x28
      curr->active = FALSE;
1004c04c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004c04e:	2200      	movs	r2, #0
1004c050:	731a      	strb	r2, [r3, #12]
      if (curr->callback)
1004c052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004c054:	689b      	ldr	r3, [r3, #8]
1004c056:	2b00      	cmp	r3, #0
1004c058:	d004      	beq.n	1004c064 <HAL_RADIO_TIMER_Tick+0xa8>
      {
        curr->callback(curr); /* we are sure a callback is set?*/
1004c05a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004c05c:	689b      	ldr	r3, [r3, #8]
1004c05e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004c060:	0010      	movs	r0, r2
1004c062:	4798      	blx	r3
      }
      curr = next;
1004c064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004c066:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
1004c068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004c06a:	2b00      	cmp	r3, #0
1004c06c:	d1eb      	bne.n	1004c046 <HAL_RADIO_TIMER_Tick+0x8a>
    }

    RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
1004c06e:	4b79      	ldr	r3, [pc, #484]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c070:	228c      	movs	r2, #140	@ 0x8c
1004c072:	589b      	ldr	r3, [r3, r2]
1004c074:	240f      	movs	r4, #15
1004c076:	193a      	adds	r2, r7, r4
1004c078:	0011      	movs	r1, r2
1004c07a:	0018      	movs	r0, r3
1004c07c:	f000 fd66 	bl	1004cb4c <_update_user_timeout>
1004c080:	0002      	movs	r2, r0
1004c082:	4b74      	ldr	r3, [pc, #464]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c084:	218c      	movs	r1, #140	@ 0x8c
1004c086:	505a      	str	r2, [r3, r1]
    if (expired == 1)
1004c088:	193b      	adds	r3, r7, r4
1004c08a:	781b      	ldrb	r3, [r3, #0]
1004c08c:	2b01      	cmp	r3, #1
1004c08e:	d121      	bne.n	1004c0d4 <HAL_RADIO_TIMER_Tick+0x118>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004c090:	f3ef 8310 	mrs	r3, PRIMASK
1004c094:	61fb      	str	r3, [r7, #28]
  return(result);
1004c096:	69fb      	ldr	r3, [r7, #28]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
1004c098:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
1004c09a:	b672      	cpsid	i
}
1004c09c:	46c0      	nop			@ (mov r8, r8)
1004c09e:	4b6d      	ldr	r3, [pc, #436]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c0a0:	2291      	movs	r2, #145	@ 0x91
1004c0a2:	5c9b      	ldrb	r3, [r3, r2]
1004c0a4:	3301      	adds	r3, #1
1004c0a6:	4a6b      	ldr	r2, [pc, #428]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c0a8:	2192      	movs	r1, #146	@ 0x92
1004c0aa:	5c52      	ldrb	r2, [r2, r1]
1004c0ac:	4293      	cmp	r3, r2
1004c0ae:	d103      	bne.n	1004c0b8 <HAL_RADIO_TIMER_Tick+0xfc>
1004c0b0:	4b68      	ldr	r3, [pc, #416]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c0b2:	2291      	movs	r2, #145	@ 0x91
1004c0b4:	5c9b      	ldrb	r3, [r3, r2]
1004c0b6:	e004      	b.n	1004c0c2 <HAL_RADIO_TIMER_Tick+0x106>
1004c0b8:	4b66      	ldr	r3, [pc, #408]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c0ba:	2291      	movs	r2, #145	@ 0x91
1004c0bc:	5c9b      	ldrb	r3, [r3, r2]
1004c0be:	3301      	adds	r3, #1
1004c0c0:	b2db      	uxtb	r3, r3
1004c0c2:	4a64      	ldr	r2, [pc, #400]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c0c4:	2191      	movs	r1, #145	@ 0x91
1004c0c6:	5453      	strb	r3, [r2, r1]
1004c0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004c0ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004c0cc:	69bb      	ldr	r3, [r7, #24]
1004c0ce:	f383 8810 	msr	PRIMASK, r3
}
1004c0d2:	46c0      	nop			@ (mov r8, r8)
    }
    RADIO_TIMER_Context.served_count += to_be_served;
1004c0d4:	4b5f      	ldr	r3, [pc, #380]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c0d6:	2292      	movs	r2, #146	@ 0x92
1004c0d8:	5c9a      	ldrb	r2, [r3, r2]
1004c0da:	232b      	movs	r3, #43	@ 0x2b
1004c0dc:	2108      	movs	r1, #8
1004c0de:	185b      	adds	r3, r3, r1
1004c0e0:	19db      	adds	r3, r3, r7
1004c0e2:	781b      	ldrb	r3, [r3, #0]
1004c0e4:	18d3      	adds	r3, r2, r3
1004c0e6:	b2d9      	uxtb	r1, r3
1004c0e8:	4b5a      	ldr	r3, [pc, #360]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c0ea:	2292      	movs	r2, #146	@ 0x92
1004c0ec:	5499      	strb	r1, [r3, r2]
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
1004c0ee:	4b59      	ldr	r3, [pc, #356]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c0f0:	2291      	movs	r2, #145	@ 0x91
1004c0f2:	5c9a      	ldrb	r2, [r3, r2]
1004c0f4:	4b57      	ldr	r3, [pc, #348]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c0f6:	2192      	movs	r1, #146	@ 0x92
1004c0f8:	5c5b      	ldrb	r3, [r3, r1]
1004c0fa:	429a      	cmp	r2, r3
1004c0fc:	d30a      	bcc.n	1004c114 <HAL_RADIO_TIMER_Tick+0x158>
1004c0fe:	4b55      	ldr	r3, [pc, #340]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c100:	2291      	movs	r2, #145	@ 0x91
1004c102:	5c9a      	ldrb	r2, [r3, r2]
1004c104:	4b53      	ldr	r3, [pc, #332]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c106:	2192      	movs	r1, #146	@ 0x92
1004c108:	5c5b      	ldrb	r3, [r3, r1]
1004c10a:	1ad3      	subs	r3, r2, r3
1004c10c:	1e5a      	subs	r2, r3, #1
1004c10e:	4193      	sbcs	r3, r2
1004c110:	b2db      	uxtb	r3, r3
1004c112:	e00c      	b.n	1004c12e <HAL_RADIO_TIMER_Tick+0x172>
1004c114:	4b4f      	ldr	r3, [pc, #316]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c116:	2291      	movs	r2, #145	@ 0x91
1004c118:	5c9b      	ldrb	r3, [r3, r2]
1004c11a:	0019      	movs	r1, r3
1004c11c:	4b4d      	ldr	r3, [pc, #308]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c11e:	2292      	movs	r2, #146	@ 0x92
1004c120:	5c9b      	ldrb	r3, [r3, r2]
1004c122:	1acb      	subs	r3, r1, r3
1004c124:	3301      	adds	r3, #1
1004c126:	33ff      	adds	r3, #255	@ 0xff
1004c128:	1e5a      	subs	r2, r3, #1
1004c12a:	4193      	sbcs	r3, r2
1004c12c:	b2db      	uxtb	r3, r3
1004c12e:	2b00      	cmp	r3, #0
1004c130:	d000      	beq.n	1004c134 <HAL_RADIO_TIMER_Tick+0x178>
1004c132:	e76d      	b.n	1004c010 <HAL_RADIO_TIMER_Tick+0x54>
  }

  /* Check for periodic calibration */
  if (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress)
1004c134:	4b47      	ldr	r3, [pc, #284]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c136:	7b1b      	ldrb	r3, [r3, #12]
1004c138:	2b00      	cmp	r3, #0
1004c13a:	d06a      	beq.n	1004c212 <HAL_RADIO_TIMER_Tick+0x256>
  {
    if (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL))
1004c13c:	4b46      	ldr	r3, [pc, #280]	@ (1004c258 <HAL_RADIO_TIMER_Tick+0x29c>)
1004c13e:	0018      	movs	r0, r3
1004c140:	f7ff fe30 	bl	1004bda4 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004c144:	1e03      	subs	r3, r0, #0
1004c146:	d100      	bne.n	1004c14a <HAL_RADIO_TIMER_Tick+0x18e>
1004c148:	e07f      	b.n	1004c24a <HAL_RADIO_TIMER_Tick+0x28e>
    {
      /* Calibration is completed */
      RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
1004c14a:	4b42      	ldr	r3, [pc, #264]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c14c:	2200      	movs	r2, #0
1004c14e:	731a      	strb	r2, [r3, #12]
      if ((RADIO_TIMER_Context.wakeup_calibration == FALSE) && RADIO_TIMER_Context.stop_notimer_action)
1004c150:	4b40      	ldr	r3, [pc, #256]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c152:	2294      	movs	r2, #148	@ 0x94
1004c154:	5c9b      	ldrb	r3, [r3, r2]
1004c156:	2b00      	cmp	r3, #0
1004c158:	d109      	bne.n	1004c16e <HAL_RADIO_TIMER_Tick+0x1b2>
1004c15a:	4b3e      	ldr	r3, [pc, #248]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c15c:	2293      	movs	r2, #147	@ 0x93
1004c15e:	5c9b      	ldrb	r3, [r3, r2]
1004c160:	2b00      	cmp	r3, #0
1004c162:	d004      	beq.n	1004c16e <HAL_RADIO_TIMER_Tick+0x1b2>
      {
        RADIO_TIMER_Context.stop_notimer_action = FALSE;
1004c164:	4b3b      	ldr	r3, [pc, #236]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c166:	2293      	movs	r2, #147	@ 0x93
1004c168:	2100      	movs	r1, #0
1004c16a:	5499      	strb	r1, [r3, r2]
1004c16c:	e034      	b.n	1004c1d8 <HAL_RADIO_TIMER_Tick+0x21c>
      }
      else
      {
        /* Collect calibration data */
        _updateCalibrationData();
1004c16e:	f000 fe47 	bl	1004ce00 <_updateCalibrationData>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
1004c172:	4b38      	ldr	r3, [pc, #224]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c174:	228c      	movs	r2, #140	@ 0x8c
1004c176:	589b      	ldr	r3, [r3, r2]
1004c178:	240f      	movs	r4, #15
1004c17a:	193a      	adds	r2, r7, r4
1004c17c:	0011      	movs	r1, r2
1004c17e:	0018      	movs	r0, r3
1004c180:	f000 fce4 	bl	1004cb4c <_update_user_timeout>
1004c184:	0002      	movs	r2, r0
1004c186:	4b33      	ldr	r3, [pc, #204]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c188:	218c      	movs	r1, #140	@ 0x8c
1004c18a:	505a      	str	r2, [r3, r1]
        if (expired == 1)
1004c18c:	193b      	adds	r3, r7, r4
1004c18e:	781b      	ldrb	r3, [r3, #0]
1004c190:	2b01      	cmp	r3, #1
1004c192:	d121      	bne.n	1004c1d8 <HAL_RADIO_TIMER_Tick+0x21c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004c194:	f3ef 8310 	mrs	r3, PRIMASK
1004c198:	617b      	str	r3, [r7, #20]
  return(result);
1004c19a:	697b      	ldr	r3, [r7, #20]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
1004c19c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
1004c19e:	b672      	cpsid	i
}
1004c1a0:	46c0      	nop			@ (mov r8, r8)
1004c1a2:	4b2c      	ldr	r3, [pc, #176]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c1a4:	2291      	movs	r2, #145	@ 0x91
1004c1a6:	5c9b      	ldrb	r3, [r3, r2]
1004c1a8:	3301      	adds	r3, #1
1004c1aa:	4a2a      	ldr	r2, [pc, #168]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c1ac:	2192      	movs	r1, #146	@ 0x92
1004c1ae:	5c52      	ldrb	r2, [r2, r1]
1004c1b0:	4293      	cmp	r3, r2
1004c1b2:	d103      	bne.n	1004c1bc <HAL_RADIO_TIMER_Tick+0x200>
1004c1b4:	4b27      	ldr	r3, [pc, #156]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c1b6:	2291      	movs	r2, #145	@ 0x91
1004c1b8:	5c9b      	ldrb	r3, [r3, r2]
1004c1ba:	e004      	b.n	1004c1c6 <HAL_RADIO_TIMER_Tick+0x20a>
1004c1bc:	4b25      	ldr	r3, [pc, #148]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c1be:	2291      	movs	r2, #145	@ 0x91
1004c1c0:	5c9b      	ldrb	r3, [r3, r2]
1004c1c2:	3301      	adds	r3, #1
1004c1c4:	b2db      	uxtb	r3, r3
1004c1c6:	4a23      	ldr	r2, [pc, #140]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c1c8:	2191      	movs	r1, #145	@ 0x91
1004c1ca:	5453      	strb	r3, [r2, r1]
1004c1cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004c1ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004c1d0:	693b      	ldr	r3, [r7, #16]
1004c1d2:	f383 8810 	msr	PRIMASK, r3
}
1004c1d6:	46c0      	nop			@ (mov r8, r8)
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
        }
      }
#else
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired); //Start Radio Timer after calibration
1004c1d8:	230f      	movs	r3, #15
1004c1da:	18fa      	adds	r2, r7, r3
1004c1dc:	4b1f      	ldr	r3, [pc, #124]	@ (1004c25c <HAL_RADIO_TIMER_Tick+0x2a0>)
1004c1de:	0011      	movs	r1, r2
1004c1e0:	0018      	movs	r0, r3
1004c1e2:	f000 fec1 	bl	1004cf68 <_check_radio_activity>
#endif

      /* Schedule next calibration event */
      HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004c1e6:	4b1e      	ldr	r3, [pc, #120]	@ (1004c260 <HAL_RADIO_TIMER_Tick+0x2a4>)
1004c1e8:	0018      	movs	r0, r3
1004c1ea:	f000 f991 	bl	1004c510 <HAL_RADIO_TIMER_StopVirtualTimer>
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
                   HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
1004c1ee:	f000 f963 	bl	1004c4b8 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004c1f2:	0002      	movs	r2, r0
1004c1f4:	000b      	movs	r3, r1
1004c1f6:	4917      	ldr	r1, [pc, #92]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c1f8:	6849      	ldr	r1, [r1, #4]
1004c1fa:	6039      	str	r1, [r7, #0]
1004c1fc:	2100      	movs	r1, #0
1004c1fe:	6079      	str	r1, [r7, #4]
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
1004c200:	6838      	ldr	r0, [r7, #0]
1004c202:	6879      	ldr	r1, [r7, #4]
1004c204:	1812      	adds	r2, r2, r0
1004c206:	414b      	adcs	r3, r1
1004c208:	4915      	ldr	r1, [pc, #84]	@ (1004c260 <HAL_RADIO_TIMER_Tick+0x2a4>)
1004c20a:	0008      	movs	r0, r1
1004c20c:	f000 fbd8 	bl	1004c9c0 <_start_timer>
        HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
      }
    }
  }
}
1004c210:	e01b      	b.n	1004c24a <HAL_RADIO_TIMER_Tick+0x28e>
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004c212:	4b10      	ldr	r3, [pc, #64]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c214:	781b      	ldrb	r3, [r3, #0]
1004c216:	2b00      	cmp	r3, #0
1004c218:	d017      	beq.n	1004c24a <HAL_RADIO_TIMER_Tick+0x28e>
      if (HAL_RADIO_TIMER_GetCurrentSysTime() > (RADIO_TIMER_Context.calibrationData.last_calibration_time +
1004c21a:	f000 f94d 	bl	1004c4b8 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004c21e:	4b0d      	ldr	r3, [pc, #52]	@ (1004c254 <HAL_RADIO_TIMER_Tick+0x298>)
1004c220:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004c222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004c224:	24fa      	movs	r4, #250	@ 0xfa
1004c226:	0364      	lsls	r4, r4, #13
1004c228:	2500      	movs	r5, #0
1004c22a:	1912      	adds	r2, r2, r4
1004c22c:	416b      	adcs	r3, r5
1004c22e:	4299      	cmp	r1, r3
1004c230:	d803      	bhi.n	1004c23a <HAL_RADIO_TIMER_Tick+0x27e>
1004c232:	d10a      	bne.n	1004c24a <HAL_RADIO_TIMER_Tick+0x28e>
1004c234:	4290      	cmp	r0, r2
1004c236:	d800      	bhi.n	1004c23a <HAL_RADIO_TIMER_Tick+0x27e>
}
1004c238:	e007      	b.n	1004c24a <HAL_RADIO_TIMER_Tick+0x28e>
        HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004c23a:	4b09      	ldr	r3, [pc, #36]	@ (1004c260 <HAL_RADIO_TIMER_Tick+0x2a4>)
1004c23c:	0018      	movs	r0, r3
1004c23e:	f000 f967 	bl	1004c510 <HAL_RADIO_TIMER_StopVirtualTimer>
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
1004c242:	4b07      	ldr	r3, [pc, #28]	@ (1004c260 <HAL_RADIO_TIMER_Tick+0x2a4>)
1004c244:	0018      	movs	r0, r3
1004c246:	f000 fb8f 	bl	1004c968 <_calibration_callback>
}
1004c24a:	46c0      	nop			@ (mov r8, r8)
1004c24c:	46bd      	mov	sp, r7
1004c24e:	b010      	add	sp, #64	@ 0x40
1004c250:	bdb0      	pop	{r4, r5, r7, pc}
1004c252:	46c0      	nop			@ (mov r8, r8)
1004c254:	200026f8 	.word	0x200026f8
1004c258:	60001000 	.word	0x60001000
1004c25c:	20002750 	.word	0x20002750
1004c260:	20002738 	.word	0x20002738

1004c264 <HAL_RADIO_TIMER_GetAnchorPoint>:
  * @brief Get the last anchorPoint in system time unit.
  * @param current_system_time: Current System Time
  * @return TimerCapture register in system time unit.
  */
uint64_t HAL_RADIO_TIMER_GetAnchorPoint(uint64_t *current_system_time)
{
1004c264:	b580      	push	{r7, lr}
1004c266:	b082      	sub	sp, #8
1004c268:	af00      	add	r7, sp, #0
1004c26a:	6078      	str	r0, [r7, #4]
  return TIMER_GetPastSysTime(BLUE->TIMERCAPTUREREG, current_system_time);
1004c26c:	23c0      	movs	r3, #192	@ 0xc0
1004c26e:	05db      	lsls	r3, r3, #23
1004c270:	695b      	ldr	r3, [r3, #20]
1004c272:	687a      	ldr	r2, [r7, #4]
1004c274:	0011      	movs	r1, r2
1004c276:	0018      	movs	r0, r3
1004c278:	f000 ffe8 	bl	1004d24c <TIMER_GetPastSysTime>
1004c27c:	0002      	movs	r2, r0
1004c27e:	000b      	movs	r3, r1
}
1004c280:	0010      	movs	r0, r2
1004c282:	0019      	movs	r1, r3
1004c284:	46bd      	mov	sp, r7
1004c286:	b002      	add	sp, #8
1004c288:	bd80      	pop	{r7, pc}
	...

1004c28c <HAL_RADIO_TIMER_SetRadioTimerValue>:
  * @param  cal_req: Specify if PLL calibration is requested (1) or not (0).
  * @retval 0 if radio activity has been scheduled successfully.
  * @retval 1 if radio activity has been rejected (it is too close or in the past).
  */
uint32_t HAL_RADIO_TIMER_SetRadioTimerValue(uint32_t time, uint8_t event_type, uint8_t cal_req)
{
1004c28c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004c28e:	b085      	sub	sp, #20
1004c290:	af00      	add	r7, sp, #0
1004c292:	6078      	str	r0, [r7, #4]
1004c294:	0008      	movs	r0, r1
1004c296:	0011      	movs	r1, r2
1004c298:	1cfb      	adds	r3, r7, #3
1004c29a:	1c02      	adds	r2, r0, #0
1004c29c:	701a      	strb	r2, [r3, #0]
1004c29e:	1cbb      	adds	r3, r7, #2
1004c2a0:	1c0a      	adds	r2, r1, #0
1004c2a2:	701a      	strb	r2, [r3, #0]
  uint8_t retVal = 0;
1004c2a4:	260f      	movs	r6, #15
1004c2a6:	19bb      	adds	r3, r7, r6
1004c2a8:	2200      	movs	r2, #0
1004c2aa:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB06) || defined (STM32WB07)
  uint64_t current_time;
#endif

  RADIO_TIMER_Context.radioTimer.event_type = event_type;
1004c2ac:	1cfb      	adds	r3, r7, #3
1004c2ae:	781b      	ldrb	r3, [r3, #0]
1004c2b0:	1e5a      	subs	r2, r3, #1
1004c2b2:	4193      	sbcs	r3, r2
1004c2b4:	b2d9      	uxtb	r1, r3
1004c2b6:	4b1b      	ldr	r3, [pc, #108]	@ (1004c324 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004c2b8:	2264      	movs	r2, #100	@ 0x64
1004c2ba:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.cal_req = cal_req;
1004c2bc:	1cbb      	adds	r3, r7, #2
1004c2be:	781b      	ldrb	r3, [r3, #0]
1004c2c0:	1e5a      	subs	r2, r3, #1
1004c2c2:	4193      	sbcs	r3, r2
1004c2c4:	b2d9      	uxtb	r1, r3
1004c2c6:	4b17      	ldr	r3, [pc, #92]	@ (1004c324 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004c2c8:	2260      	movs	r2, #96	@ 0x60
1004c2ca:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = RADIO_TIMER_Context.calibrationData.last_calibration_time + (uint32_t)(time - (uint32_t)RADIO_TIMER_Context.calibrationData.last_calibration_time);
1004c2cc:	4b15      	ldr	r3, [pc, #84]	@ (1004c324 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004c2ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004c2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004c2d2:	4914      	ldr	r1, [pc, #80]	@ (1004c324 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004c2d4:	6a88      	ldr	r0, [r1, #40]	@ 0x28
1004c2d6:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
1004c2d8:	6879      	ldr	r1, [r7, #4]
1004c2da:	1a09      	subs	r1, r1, r0
1004c2dc:	000c      	movs	r4, r1
1004c2de:	2100      	movs	r1, #0
1004c2e0:	000d      	movs	r5, r1
1004c2e2:	1912      	adds	r2, r2, r4
1004c2e4:	416b      	adcs	r3, r5
1004c2e6:	490f      	ldr	r1, [pc, #60]	@ (1004c324 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004c2e8:	658a      	str	r2, [r1, #88]	@ 0x58
1004c2ea:	65cb      	str	r3, [r1, #92]	@ 0x5c
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004c2ec:	4b0d      	ldr	r3, [pc, #52]	@ (1004c324 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004c2ee:	2261      	movs	r2, #97	@ 0x61
1004c2f0:	2100      	movs	r1, #0
1004c2f2:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004c2f4:	4b0b      	ldr	r3, [pc, #44]	@ (1004c324 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004c2f6:	2263      	movs	r2, #99	@ 0x63
1004c2f8:	2100      	movs	r1, #0
1004c2fa:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = TRUE;
1004c2fc:	4b09      	ldr	r3, [pc, #36]	@ (1004c324 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004c2fe:	2262      	movs	r2, #98	@ 0x62
1004c300:	2101      	movs	r1, #1
1004c302:	5499      	strb	r1, [r3, r2]
      _set_controller_as_host();
      _check_host_activity();
    }
  }
#else
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
1004c304:	19ba      	adds	r2, r7, r6
1004c306:	4b08      	ldr	r3, [pc, #32]	@ (1004c328 <HAL_RADIO_TIMER_SetRadioTimerValue+0x9c>)
1004c308:	0011      	movs	r1, r2
1004c30a:	0018      	movs	r0, r3
1004c30c:	f000 fe2c 	bl	1004cf68 <_check_radio_activity>
#endif

  _virtualTimeBaseEnable(ENABLE);
1004c310:	2001      	movs	r0, #1
1004c312:	f000 fcd3 	bl	1004ccbc <_virtualTimeBaseEnable>

  return retVal;
1004c316:	19bb      	adds	r3, r7, r6
1004c318:	781b      	ldrb	r3, [r3, #0]
}
1004c31a:	0018      	movs	r0, r3
1004c31c:	46bd      	mov	sp, r7
1004c31e:	b005      	add	sp, #20
1004c320:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004c322:	46c0      	nop			@ (mov r8, r8)
1004c324:	200026f8 	.word	0x200026f8
1004c328:	20002750 	.word	0x20002750

1004c32c <HAL_RADIO_TIMER_ClearRadioTimerValue>:
  * @retval 0 if the radio activity has been cleared successfully.
  * @retval 1 if it is too late to clear the last radio activity.
  * @retval 2 if it might not be possible to clear the last radio activity.
  */
uint32_t HAL_RADIO_TIMER_ClearRadioTimerValue(void)
{
1004c32c:	b5b0      	push	{r4, r5, r7, lr}
1004c32e:	b088      	sub	sp, #32
1004c330:	af00      	add	r7, sp, #0
  int64_t time_diff;
  uint8_t retVal;

  /* Disable Radio Timer1/2 and BLE Wakeup Timer */
  LL_RADIO_TIMER_DisableTimer1(BLUE);
1004c332:	23c0      	movs	r3, #192	@ 0xc0
1004c334:	05db      	lsls	r3, r3, #23
1004c336:	0018      	movs	r0, r3
1004c338:	f7ff fc0a 	bl	1004bb50 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
1004c33c:	23c0      	movs	r3, #192	@ 0xc0
1004c33e:	05db      	lsls	r3, r3, #23
1004c340:	0018      	movs	r0, r3
1004c342:	f7ff fc14 	bl	1004bb6e <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004c346:	4b31      	ldr	r3, [pc, #196]	@ (1004c40c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe0>)
1004c348:	0018      	movs	r0, r3
1004c34a:	f7ff fc3b 	bl	1004bbc4 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004c34e:	4b30      	ldr	r3, [pc, #192]	@ (1004c410 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004c350:	2261      	movs	r2, #97	@ 0x61
1004c352:	2100      	movs	r1, #0
1004c354:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004c356:	4b2e      	ldr	r3, [pc, #184]	@ (1004c410 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004c358:	2262      	movs	r2, #98	@ 0x62
1004c35a:	2100      	movs	r1, #0
1004c35c:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004c35e:	4b2c      	ldr	r3, [pc, #176]	@ (1004c410 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004c360:	2263      	movs	r2, #99	@ 0x63
1004c362:	2100      	movs	r1, #0
1004c364:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004c366:	f3ef 8310 	mrs	r3, PRIMASK
1004c36a:	60bb      	str	r3, [r7, #8]
  return(result);
1004c36c:	68bb      	ldr	r3, [r7, #8]

  /*The rfSetup is different if Timer1 or Wakeup timer is programmed*/
  ATOMIC_SECTION_BEGIN();
1004c36e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
1004c370:	b672      	cpsid	i
}
1004c372:	46c0      	nop			@ (mov r8, r8)
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
1004c374:	4b26      	ldr	r3, [pc, #152]	@ (1004c410 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004c376:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
1004c378:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
              - HAL_RADIO_TIMER_GetCurrentSysTime() \
1004c37a:	f000 f89d 	bl	1004c4b8 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004c37e:	0002      	movs	r2, r0
1004c380:	000b      	movs	r3, r1
1004c382:	1aa4      	subs	r4, r4, r2
1004c384:	419d      	sbcs	r5, r3
1004c386:	0022      	movs	r2, r4
1004c388:	002b      	movs	r3, r5
              - RADIO_TIMER_Context.last_setup_time;
1004c38a:	4921      	ldr	r1, [pc, #132]	@ (1004c410 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004c38c:	2084      	movs	r0, #132	@ 0x84
1004c38e:	5c09      	ldrb	r1, [r1, r0]
1004c390:	6039      	str	r1, [r7, #0]
1004c392:	2100      	movs	r1, #0
1004c394:	6079      	str	r1, [r7, #4]
1004c396:	6838      	ldr	r0, [r7, #0]
1004c398:	6879      	ldr	r1, [r7, #4]
1004c39a:	1a12      	subs	r2, r2, r0
1004c39c:	418b      	sbcs	r3, r1
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
1004c39e:	613a      	str	r2, [r7, #16]
1004c3a0:	617b      	str	r3, [r7, #20]
1004c3a2:	69bb      	ldr	r3, [r7, #24]
1004c3a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004c3a6:	68fb      	ldr	r3, [r7, #12]
1004c3a8:	f383 8810 	msr	PRIMASK, r3
}
1004c3ac:	46c0      	nop			@ (mov r8, r8)
  {
    _check_host_activity();
  }
#endif

  if (time_diff <= 0)
1004c3ae:	697b      	ldr	r3, [r7, #20]
1004c3b0:	2b00      	cmp	r3, #0
1004c3b2:	dc0c      	bgt.n	1004c3ce <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
1004c3b4:	697b      	ldr	r3, [r7, #20]
1004c3b6:	2b00      	cmp	r3, #0
1004c3b8:	d102      	bne.n	1004c3c0 <HAL_RADIO_TIMER_ClearRadioTimerValue+0x94>
1004c3ba:	693b      	ldr	r3, [r7, #16]
1004c3bc:	2b00      	cmp	r3, #0
1004c3be:	d106      	bne.n	1004c3ce <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
  {
    retVal = HAL_RADIO_TIMER_LATE;
1004c3c0:	2317      	movs	r3, #23
1004c3c2:	2208      	movs	r2, #8
1004c3c4:	189b      	adds	r3, r3, r2
1004c3c6:	19db      	adds	r3, r3, r7
1004c3c8:	2201      	movs	r2, #1
1004c3ca:	701a      	strb	r2, [r3, #0]
1004c3cc:	e015      	b.n	1004c3fa <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else if (time_diff < CLEAR_MIN_THR)
1004c3ce:	697b      	ldr	r3, [r7, #20]
1004c3d0:	2b00      	cmp	r3, #0
1004c3d2:	dc0c      	bgt.n	1004c3ee <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
1004c3d4:	697b      	ldr	r3, [r7, #20]
1004c3d6:	2b00      	cmp	r3, #0
1004c3d8:	d102      	bne.n	1004c3e0 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xb4>
1004c3da:	693b      	ldr	r3, [r7, #16]
1004c3dc:	2b0e      	cmp	r3, #14
1004c3de:	d806      	bhi.n	1004c3ee <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
  {
    retVal = HAL_RADIO_TIMER_CRITICAL;
1004c3e0:	2317      	movs	r3, #23
1004c3e2:	2208      	movs	r2, #8
1004c3e4:	189b      	adds	r3, r3, r2
1004c3e6:	19db      	adds	r3, r3, r7
1004c3e8:	2202      	movs	r2, #2
1004c3ea:	701a      	strb	r2, [r3, #0]
1004c3ec:	e005      	b.n	1004c3fa <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else
  {
    retVal = HAL_RADIO_TIMER_SUCCESS;
1004c3ee:	2317      	movs	r3, #23
1004c3f0:	2208      	movs	r2, #8
1004c3f2:	189b      	adds	r3, r3, r2
1004c3f4:	19db      	adds	r3, r3, r7
1004c3f6:	2200      	movs	r2, #0
1004c3f8:	701a      	strb	r2, [r3, #0]
  }

  return retVal;
1004c3fa:	2317      	movs	r3, #23
1004c3fc:	2208      	movs	r2, #8
1004c3fe:	189b      	adds	r3, r3, r2
1004c400:	19db      	adds	r3, r3, r7
1004c402:	781b      	ldrb	r3, [r3, #0]
}
1004c404:	0018      	movs	r0, r3
1004c406:	46bd      	mov	sp, r7
1004c408:	b008      	add	sp, #32
1004c40a:	bdb0      	pop	{r4, r5, r7, pc}
1004c40c:	60001800 	.word	0x60001800
1004c410:	200026f8 	.word	0x200026f8

1004c414 <HAL_RADIO_TIMER_SetRadioCloseTimeout>:
  *        The current time is sampled and increased by two.
  *        It means that the timer is going to trigger in a timer interval that goes
  *        from one to two machine time units.
  */
void HAL_RADIO_TIMER_SetRadioCloseTimeout(void)
{
1004c414:	b580      	push	{r7, lr}
1004c416:	b084      	sub	sp, #16
1004c418:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004c41a:	f3ef 8310 	mrs	r3, PRIMASK
1004c41e:	603b      	str	r3, [r7, #0]
  return(result);
1004c420:	683b      	ldr	r3, [r7, #0]
  uint32_t current_time;

  ATOMIC_SECTION_BEGIN();
1004c422:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
1004c424:	b672      	cpsid	i
}
1004c426:	46c0      	nop			@ (mov r8, r8)
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004c428:	4b0e      	ldr	r3, [pc, #56]	@ (1004c464 <HAL_RADIO_TIMER_SetRadioCloseTimeout+0x50>)
1004c42a:	0018      	movs	r0, r3
1004c42c:	f7ff fc21 	bl	1004bc72 <LL_RADIO_TIMER_GetAbsoluteTime>
1004c430:	0003      	movs	r3, r0
1004c432:	60bb      	str	r3, [r7, #8]
  LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + 2) & TIMER_MAX_VALUE));
1004c434:	68bb      	ldr	r3, [r7, #8]
1004c436:	1c9a      	adds	r2, r3, #2
1004c438:	23c0      	movs	r3, #192	@ 0xc0
1004c43a:	05db      	lsls	r3, r3, #23
1004c43c:	0011      	movs	r1, r2
1004c43e:	0018      	movs	r0, r3
1004c440:	f7ff fba4 	bl	1004bb8c <LL_RADIO_TIMER_SetTimeout>
  LL_RADIO_TIMER_EnableTimer1(BLUE);
1004c444:	23c0      	movs	r3, #192	@ 0xc0
1004c446:	05db      	lsls	r3, r3, #23
1004c448:	0018      	movs	r0, r3
1004c44a:	f7ff fb71 	bl	1004bb30 <LL_RADIO_TIMER_EnableTimer1>
1004c44e:	68fb      	ldr	r3, [r7, #12]
1004c450:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004c452:	687b      	ldr	r3, [r7, #4]
1004c454:	f383 8810 	msr	PRIMASK, r3
}
1004c458:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
1004c45a:	46c0      	nop			@ (mov r8, r8)
1004c45c:	46bd      	mov	sp, r7
1004c45e:	b004      	add	sp, #16
1004c460:	bd80      	pop	{r7, pc}
1004c462:	46c0      	nop			@ (mov r8, r8)
1004c464:	60001800 	.word	0x60001800

1004c468 <HAL_RADIO_TIMER_RadioTimerIsr>:
/**
  * @brief  Radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_RadioTimerIsr(void)
{
1004c468:	b580      	push	{r7, lr}
1004c46a:	af00      	add	r7, sp, #0
  if (!(LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE)))
  {
    _check_host_activity();
  }
#endif
}
1004c46c:	46c0      	nop			@ (mov r8, r8)
1004c46e:	46bd      	mov	sp, r7
1004c470:	bd80      	pop	{r7, pc}
	...

1004c474 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>:
/**
  * @brief  Timer State machine semaphore to signal the radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_EndOfRadioActivityIsr(void)
{
1004c474:	b580      	push	{r7, lr}
1004c476:	af00      	add	r7, sp, #0
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004c478:	4b03      	ldr	r3, [pc, #12]	@ (1004c488 <HAL_RADIO_TIMER_EndOfRadioActivityIsr+0x14>)
1004c47a:	2263      	movs	r2, #99	@ 0x63
1004c47c:	2100      	movs	r1, #0
1004c47e:	5499      	strb	r1, [r3, r2]
}
1004c480:	46c0      	nop			@ (mov r8, r8)
1004c482:	46bd      	mov	sp, r7
1004c484:	bd80      	pop	{r7, pc}
1004c486:	46c0      	nop			@ (mov r8, r8)
1004c488:	200026f8 	.word	0x200026f8

1004c48c <HAL_RADIO_TIMER_MachineTimeToSysTime>:
  *          storing the system time. It should be called only in
  *          user context and not in interrupt context.
  * @return  STU value
  */
uint32_t HAL_RADIO_TIMER_MachineTimeToSysTime(uint32_t time)
{
1004c48c:	b580      	push	{r7, lr}
1004c48e:	b082      	sub	sp, #8
1004c490:	af00      	add	r7, sp, #0
1004c492:	6078      	str	r0, [r7, #4]
  return blue_unit_conversion(time, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004c494:	4b06      	ldr	r3, [pc, #24]	@ (1004c4b0 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x24>)
1004c496:	69db      	ldr	r3, [r3, #28]
1004c498:	0019      	movs	r1, r3
1004c49a:	4a06      	ldr	r2, [pc, #24]	@ (1004c4b4 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x28>)
1004c49c:	687b      	ldr	r3, [r7, #4]
1004c49e:	0018      	movs	r0, r3
1004c4a0:	f7f3 fe0e 	bl	100400c0 <blue_unit_conversion>
1004c4a4:	0003      	movs	r3, r0
}
1004c4a6:	0018      	movs	r0, r3
1004c4a8:	46bd      	mov	sp, r7
1004c4aa:	b002      	add	sp, #8
1004c4ac:	bd80      	pop	{r7, pc}
1004c4ae:	46c0      	nop			@ (mov r8, r8)
1004c4b0:	200026f8 	.word	0x200026f8
1004c4b4:	00000635 	.word	0x00000635

1004c4b8 <HAL_RADIO_TIMER_GetCurrentSysTime>:
  *         The returned value can be used as absolute time parameter where needed in the other
  *         HAL_RADIO_TIMER* APIs
  * @return absolute current time expressed in system time units.
  */
uint64_t HAL_RADIO_TIMER_GetCurrentSysTime(void)
{
1004c4b8:	b580      	push	{r7, lr}
1004c4ba:	b082      	sub	sp, #8
1004c4bc:	af00      	add	r7, sp, #0
  uint32_t current_machine_time;
  return _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
1004c4be:	1d3a      	adds	r2, r7, #4
1004c4c0:	4b05      	ldr	r3, [pc, #20]	@ (1004c4d8 <HAL_RADIO_TIMER_GetCurrentSysTime+0x20>)
1004c4c2:	0011      	movs	r1, r2
1004c4c4:	0018      	movs	r0, r3
1004c4c6:	f000 fad9 	bl	1004ca7c <_get_system_time_and_machine>
1004c4ca:	0002      	movs	r2, r0
1004c4cc:	000b      	movs	r3, r1
}
1004c4ce:	0010      	movs	r0, r2
1004c4d0:	0019      	movs	r1, r3
1004c4d2:	46bd      	mov	sp, r7
1004c4d4:	b002      	add	sp, #8
1004c4d6:	bd80      	pop	{r7, pc}
1004c4d8:	200026f8 	.word	0x200026f8

1004c4dc <HAL_RADIO_TIMER_StartVirtualTimerSysTime>:
  * @param time: Absolute time expressed in STU.
  * @retval 0 if the timerHandle is valid.
  * @retval 1 if the timerHandle is not valid. It is already started.
  */
uint32_t HAL_RADIO_TIMER_StartVirtualTimerSysTime(VTIMER_HandleType *timerHandle, uint64_t time)
{
1004c4dc:	b590      	push	{r4, r7, lr}
1004c4de:	b087      	sub	sp, #28
1004c4e0:	af00      	add	r7, sp, #0
1004c4e2:	60f8      	str	r0, [r7, #12]
1004c4e4:	603a      	str	r2, [r7, #0]
1004c4e6:	607b      	str	r3, [r7, #4]
  uint8_t retVal;
  retVal = _start_timer(timerHandle, time);
1004c4e8:	683a      	ldr	r2, [r7, #0]
1004c4ea:	687b      	ldr	r3, [r7, #4]
1004c4ec:	68f9      	ldr	r1, [r7, #12]
1004c4ee:	0008      	movs	r0, r1
1004c4f0:	f000 fa66 	bl	1004c9c0 <_start_timer>
1004c4f4:	0002      	movs	r2, r0
1004c4f6:	2417      	movs	r4, #23
1004c4f8:	193b      	adds	r3, r7, r4
1004c4fa:	701a      	strb	r2, [r3, #0]
  _virtualTimeBaseEnable(ENABLE);
1004c4fc:	2001      	movs	r0, #1
1004c4fe:	f000 fbdd 	bl	1004ccbc <_virtualTimeBaseEnable>

  return retVal;
1004c502:	193b      	adds	r3, r7, r4
1004c504:	781b      	ldrb	r3, [r3, #0]
}
1004c506:	0018      	movs	r0, r3
1004c508:	46bd      	mov	sp, r7
1004c50a:	b007      	add	sp, #28
1004c50c:	bd90      	pop	{r4, r7, pc}
	...

1004c510 <HAL_RADIO_TIMER_StopVirtualTimer>:
  * @brief  Stops the one-shot virtual timer specified if found
  * @param  timerHandle: The virtual timer
  * @retval None
  */
void HAL_RADIO_TIMER_StopVirtualTimer(VTIMER_HandleType *timerHandle)
{
1004c510:	b590      	push	{r4, r7, lr}
1004c512:	b089      	sub	sp, #36	@ 0x24
1004c514:	af00      	add	r7, sp, #0
1004c516:	6078      	str	r0, [r7, #4]
  VTIMER_HandleType *rootNode = _remove_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle);
1004c518:	4b28      	ldr	r3, [pc, #160]	@ (1004c5bc <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004c51a:	228c      	movs	r2, #140	@ 0x8c
1004c51c:	589b      	ldr	r3, [r3, r2]
1004c51e:	687a      	ldr	r2, [r7, #4]
1004c520:	0011      	movs	r1, r2
1004c522:	0018      	movs	r0, r3
1004c524:	f000 fbf6 	bl	1004cd14 <_remove_timer_in_queue>
1004c528:	0003      	movs	r3, r0
1004c52a:	61fb      	str	r3, [r7, #28]
  uint8_t expired = 0;
1004c52c:	210f      	movs	r1, #15
1004c52e:	187b      	adds	r3, r7, r1
1004c530:	2200      	movs	r2, #0
1004c532:	701a      	strb	r2, [r3, #0]
  timerHandle->active = FALSE;
1004c534:	687b      	ldr	r3, [r7, #4]
1004c536:	2200      	movs	r2, #0
1004c538:	731a      	strb	r2, [r3, #12]
  if (RADIO_TIMER_Context.rootNode != rootNode)
1004c53a:	4b20      	ldr	r3, [pc, #128]	@ (1004c5bc <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004c53c:	228c      	movs	r2, #140	@ 0x8c
1004c53e:	589b      	ldr	r3, [r3, r2]
1004c540:	69fa      	ldr	r2, [r7, #28]
1004c542:	429a      	cmp	r2, r3
1004c544:	d031      	beq.n	1004c5aa <HAL_RADIO_TIMER_StopVirtualTimer+0x9a>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(rootNode, &expired);
1004c546:	000c      	movs	r4, r1
1004c548:	187a      	adds	r2, r7, r1
1004c54a:	69fb      	ldr	r3, [r7, #28]
1004c54c:	0011      	movs	r1, r2
1004c54e:	0018      	movs	r0, r3
1004c550:	f000 fafc 	bl	1004cb4c <_update_user_timeout>
1004c554:	0002      	movs	r2, r0
1004c556:	4b19      	ldr	r3, [pc, #100]	@ (1004c5bc <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004c558:	218c      	movs	r1, #140	@ 0x8c
1004c55a:	505a      	str	r2, [r3, r1]
    if (expired)
1004c55c:	193b      	adds	r3, r7, r4
1004c55e:	781b      	ldrb	r3, [r3, #0]
1004c560:	2b00      	cmp	r3, #0
1004c562:	d026      	beq.n	1004c5b2 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004c564:	f3ef 8310 	mrs	r3, PRIMASK
1004c568:	617b      	str	r3, [r7, #20]
  return(result);
1004c56a:	697b      	ldr	r3, [r7, #20]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
1004c56c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
1004c56e:	b672      	cpsid	i
}
1004c570:	46c0      	nop			@ (mov r8, r8)
1004c572:	4b12      	ldr	r3, [pc, #72]	@ (1004c5bc <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004c574:	2291      	movs	r2, #145	@ 0x91
1004c576:	5c9b      	ldrb	r3, [r3, r2]
1004c578:	3301      	adds	r3, #1
1004c57a:	4a10      	ldr	r2, [pc, #64]	@ (1004c5bc <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004c57c:	2192      	movs	r1, #146	@ 0x92
1004c57e:	5c52      	ldrb	r2, [r2, r1]
1004c580:	4293      	cmp	r3, r2
1004c582:	d103      	bne.n	1004c58c <HAL_RADIO_TIMER_StopVirtualTimer+0x7c>
1004c584:	4b0d      	ldr	r3, [pc, #52]	@ (1004c5bc <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004c586:	2291      	movs	r2, #145	@ 0x91
1004c588:	5c9b      	ldrb	r3, [r3, r2]
1004c58a:	e004      	b.n	1004c596 <HAL_RADIO_TIMER_StopVirtualTimer+0x86>
1004c58c:	4b0b      	ldr	r3, [pc, #44]	@ (1004c5bc <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004c58e:	2291      	movs	r2, #145	@ 0x91
1004c590:	5c9b      	ldrb	r3, [r3, r2]
1004c592:	3301      	adds	r3, #1
1004c594:	b2db      	uxtb	r3, r3
1004c596:	4a09      	ldr	r2, [pc, #36]	@ (1004c5bc <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004c598:	2191      	movs	r1, #145	@ 0x91
1004c59a:	5453      	strb	r3, [r2, r1]
1004c59c:	69bb      	ldr	r3, [r7, #24]
1004c59e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004c5a0:	693b      	ldr	r3, [r7, #16]
1004c5a2:	f383 8810 	msr	PRIMASK, r3
}
1004c5a6:	46c0      	nop			@ (mov r8, r8)
  }
  else
  {
    RADIO_TIMER_Context.rootNode = rootNode;
  }
}
1004c5a8:	e003      	b.n	1004c5b2 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
    RADIO_TIMER_Context.rootNode = rootNode;
1004c5aa:	4b04      	ldr	r3, [pc, #16]	@ (1004c5bc <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004c5ac:	218c      	movs	r1, #140	@ 0x8c
1004c5ae:	69fa      	ldr	r2, [r7, #28]
1004c5b0:	505a      	str	r2, [r3, r1]
}
1004c5b2:	46c0      	nop			@ (mov r8, r8)
1004c5b4:	46bd      	mov	sp, r7
1004c5b6:	b009      	add	sp, #36	@ 0x24
1004c5b8:	bd90      	pop	{r4, r7, pc}
1004c5ba:	46c0      	nop			@ (mov r8, r8)
1004c5bc:	200026f8 	.word	0x200026f8

1004c5c0 <HAL_RADIO_TIMER_TimeoutCallback>:
/**
  * @brief  Virtual timer Timeout Callback. It signals that a host timeout occurred.
  * @retval None
  */
void HAL_RADIO_TIMER_TimeoutCallback(void)
{
1004c5c0:	b580      	push	{r7, lr}
1004c5c2:	b082      	sub	sp, #8
1004c5c4:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
1004c5c6:	2300      	movs	r3, #0
1004c5c8:	607b      	str	r3, [r7, #4]
  UNUSED(status);
1004c5ca:	687b      	ldr	r3, [r7, #4]
#if defined (STM32WB06) || defined (STM32WB07)
  RADIO_TIMER_Context.hostIsRadioPending = 0;
#endif

  /* Disable host timer */
  LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
1004c5cc:	4b13      	ldr	r3, [pc, #76]	@ (1004c61c <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004c5ce:	0018      	movs	r0, r3
1004c5d0:	f7ff fb18 	bl	1004bc04 <LL_RADIO_TIMER_DisableCPUWakeupTimer>
  INCREMENT_EXPIRE_COUNT_ISR;
1004c5d4:	4b12      	ldr	r3, [pc, #72]	@ (1004c620 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004c5d6:	2291      	movs	r2, #145	@ 0x91
1004c5d8:	5c9b      	ldrb	r3, [r3, r2]
1004c5da:	3301      	adds	r3, #1
1004c5dc:	4a10      	ldr	r2, [pc, #64]	@ (1004c620 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004c5de:	2192      	movs	r1, #146	@ 0x92
1004c5e0:	5c52      	ldrb	r2, [r2, r1]
1004c5e2:	4293      	cmp	r3, r2
1004c5e4:	d103      	bne.n	1004c5ee <HAL_RADIO_TIMER_TimeoutCallback+0x2e>
1004c5e6:	4b0e      	ldr	r3, [pc, #56]	@ (1004c620 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004c5e8:	2291      	movs	r2, #145	@ 0x91
1004c5ea:	5c9b      	ldrb	r3, [r3, r2]
1004c5ec:	e004      	b.n	1004c5f8 <HAL_RADIO_TIMER_TimeoutCallback+0x38>
1004c5ee:	4b0c      	ldr	r3, [pc, #48]	@ (1004c620 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004c5f0:	2291      	movs	r2, #145	@ 0x91
1004c5f2:	5c9b      	ldrb	r3, [r3, r2]
1004c5f4:	3301      	adds	r3, #1
1004c5f6:	b2db      	uxtb	r3, r3
1004c5f8:	4a09      	ldr	r2, [pc, #36]	@ (1004c620 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004c5fa:	2191      	movs	r1, #145	@ 0x91
1004c5fc:	5453      	strb	r3, [r2, r1]
  /* Clear the interrupt */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
1004c5fe:	4b07      	ldr	r3, [pc, #28]	@ (1004c61c <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004c600:	0018      	movs	r0, r3
1004c602:	f7ff fb77 	bl	1004bcf4 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP);
1004c606:	4b05      	ldr	r3, [pc, #20]	@ (1004c61c <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004c608:	0018      	movs	r0, r3
1004c60a:	f7ff fb81 	bl	1004bd10 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>
1004c60e:	0003      	movs	r3, r0
1004c610:	607b      	str	r3, [r7, #4]
}
1004c612:	46c0      	nop			@ (mov r8, r8)
1004c614:	46bd      	mov	sp, r7
1004c616:	b002      	add	sp, #8
1004c618:	bd80      	pop	{r7, pc}
1004c61a:	46c0      	nop			@ (mov r8, r8)
1004c61c:	60001800 	.word	0x60001800
1004c620:	200026f8 	.word	0x200026f8

1004c624 <_calibrationProcedure>:
/** @defgroup RADIO_TIMER_Private_Functions  RADIO TIMER Private Functions
  * @{
  */

static void _calibrationProcedure(void)
{
1004c624:	b580      	push	{r7, lr}
1004c626:	af00      	add	r7, sp, #0
  /* Make sure any pending calibration is over */
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
1004c628:	46c0      	nop			@ (mov r8, r8)
1004c62a:	4b0b      	ldr	r3, [pc, #44]	@ (1004c658 <_calibrationProcedure+0x34>)
1004c62c:	0018      	movs	r0, r3
1004c62e:	f7ff fbb9 	bl	1004bda4 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004c632:	1e03      	subs	r3, r0, #0
1004c634:	d0f9      	beq.n	1004c62a <_calibrationProcedure+0x6>

  /* Set SLOW_COUNT to 23, that is calibrate over 24 clock periods, this number
  cannot be changed without changing all the integer maths function in the
  file  */
  LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL, 23);
1004c636:	4b08      	ldr	r3, [pc, #32]	@ (1004c658 <_calibrationProcedure+0x34>)
1004c638:	2117      	movs	r1, #23
1004c63a:	0018      	movs	r0, r3
1004c63c:	f7ff fb79 	bl	1004bd32 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>

  /* Start a calibration and take the correct freq */
  _timer_calibrate(&RADIO_TIMER_Context.calibrationData);
1004c640:	4b06      	ldr	r3, [pc, #24]	@ (1004c65c <_calibrationProcedure+0x38>)
1004c642:	0018      	movs	r0, r3
1004c644:	f000 f81e 	bl	1004c684 <_timer_calibrate>
  /* For first time set last to current */
  RADIO_TIMER_Context.calibrationData.last_period1 = RADIO_TIMER_Context.calibrationData.period1;
1004c648:	4b05      	ldr	r3, [pc, #20]	@ (1004c660 <_calibrationProcedure+0x3c>)
1004c64a:	69da      	ldr	r2, [r3, #28]
1004c64c:	4b04      	ldr	r3, [pc, #16]	@ (1004c660 <_calibrationProcedure+0x3c>)
1004c64e:	621a      	str	r2, [r3, #32]

}
1004c650:	46c0      	nop			@ (mov r8, r8)
1004c652:	46bd      	mov	sp, r7
1004c654:	bd80      	pop	{r7, pc}
1004c656:	46c0      	nop			@ (mov r8, r8)
1004c658:	60001000 	.word	0x60001000
1004c65c:	20002708 	.word	0x20002708
1004c660:	200026f8 	.word	0x200026f8

1004c664 <_timer_start_calibration>:

static void _timer_start_calibration(void)
{
1004c664:	b580      	push	{r7, lr}
1004c666:	af00      	add	r7, sp, #0
  /* Clear any pending interrupt */
  LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL);
1004c668:	4b05      	ldr	r3, [pc, #20]	@ (1004c680 <_timer_start_calibration+0x1c>)
1004c66a:	0018      	movs	r0, r3
1004c66c:	f7ff fb8c 	bl	1004bd88 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>
  /* Start calibration */
  LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL);
1004c670:	4b03      	ldr	r3, [pc, #12]	@ (1004c680 <_timer_start_calibration+0x1c>)
1004c672:	0018      	movs	r0, r3
1004c674:	f7ff fb69 	bl	1004bd4a <LL_RADIO_TIMER_StartLSICalibration>
}
1004c678:	46c0      	nop			@ (mov r8, r8)
1004c67a:	46bd      	mov	sp, r7
1004c67c:	bd80      	pop	{r7, pc}
1004c67e:	46c0      	nop			@ (mov r8, r8)
1004c680:	60001000 	.word	0x60001000

1004c684 <_timer_calibrate>:

static void _timer_calibrate(CalibrationDataTypeDef *calibrationData)
{
1004c684:	b580      	push	{r7, lr}
1004c686:	b082      	sub	sp, #8
1004c688:	af00      	add	r7, sp, #0
1004c68a:	6078      	str	r0, [r7, #4]
  _timer_start_calibration();
1004c68c:	f7ff ffea 	bl	1004c664 <_timer_start_calibration>
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
1004c690:	46c0      	nop			@ (mov r8, r8)
1004c692:	4b07      	ldr	r3, [pc, #28]	@ (1004c6b0 <_timer_calibrate+0x2c>)
1004c694:	0018      	movs	r0, r3
1004c696:	f7ff fb85 	bl	1004bda4 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004c69a:	1e03      	subs	r3, r0, #0
1004c69c:	d0f9      	beq.n	1004c692 <_timer_calibrate+0xe>
  _get_calibration_data(calibrationData);
1004c69e:	687b      	ldr	r3, [r7, #4]
1004c6a0:	0018      	movs	r0, r3
1004c6a2:	f000 f807 	bl	1004c6b4 <_get_calibration_data>
}
1004c6a6:	46c0      	nop			@ (mov r8, r8)
1004c6a8:	46bd      	mov	sp, r7
1004c6aa:	b002      	add	sp, #8
1004c6ac:	bd80      	pop	{r7, pc}
1004c6ae:	46c0      	nop			@ (mov r8, r8)
1004c6b0:	60001000 	.word	0x60001000

1004c6b4 <_get_calibration_data>:

static void _get_calibration_data(CalibrationDataTypeDef *calibrationData)
{
1004c6b4:	b580      	push	{r7, lr}
1004c6b6:	b08a      	sub	sp, #40	@ 0x28
1004c6b8:	af00      	add	r7, sp, #0
1004c6ba:	6078      	str	r0, [r7, #4]
  int32_t b2;
  int32_t mult;
  int32_t a1;
  int32_t a2;

  period =  LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
1004c6bc:	4b2e      	ldr	r3, [pc, #184]	@ (1004c778 <_get_calibration_data+0xc4>)
1004c6be:	0018      	movs	r0, r3
1004c6c0:	f7ff fb4e 	bl	1004bd60 <LL_RADIO_TIMER_GetLSIPeriod>
1004c6c4:	0003      	movs	r3, r0
1004c6c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
1004c6c8:	e005      	b.n	1004c6d6 <_get_calibration_data+0x22>
  {
    period = LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
1004c6ca:	4b2b      	ldr	r3, [pc, #172]	@ (1004c778 <_get_calibration_data+0xc4>)
1004c6cc:	0018      	movs	r0, r3
1004c6ce:	f7ff fb47 	bl	1004bd60 <LL_RADIO_TIMER_GetLSIPeriod>
1004c6d2:	0003      	movs	r3, r0
1004c6d4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
1004c6d6:	4b28      	ldr	r3, [pc, #160]	@ (1004c778 <_get_calibration_data+0xc4>)
1004c6d8:	0018      	movs	r0, r3
1004c6da:	f7ff fb41 	bl	1004bd60 <LL_RADIO_TIMER_GetLSIPeriod>
1004c6de:	0002      	movs	r2, r0
1004c6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c6e2:	429a      	cmp	r2, r3
1004c6e4:	d1f1      	bne.n	1004c6ca <_get_calibration_data+0x16>
1004c6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c6e8:	2b00      	cmp	r3, #0
1004c6ea:	d0ee      	beq.n	1004c6ca <_get_calibration_data+0x16>
  }

  mul1 = 0x8BCF6 ;
1004c6ec:	4b23      	ldr	r3, [pc, #140]	@ (1004c77c <_get_calibration_data+0xc8>)
1004c6ee:	61fb      	str	r3, [r7, #28]
  b1 = period >> 8 ;
1004c6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c6f2:	121b      	asrs	r3, r3, #8
1004c6f4:	61bb      	str	r3, [r7, #24]
  b2 = period & 0xff ;
1004c6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c6f8:	22ff      	movs	r2, #255	@ 0xff
1004c6fa:	4013      	ands	r3, r2
1004c6fc:	617b      	str	r3, [r7, #20]
  calibrationData->period1 = ((mul1 * b1) + ((b2 * mul1) >> 8) + 16) >> 5;
1004c6fe:	69fb      	ldr	r3, [r7, #28]
1004c700:	69ba      	ldr	r2, [r7, #24]
1004c702:	435a      	muls	r2, r3
1004c704:	697b      	ldr	r3, [r7, #20]
1004c706:	69f9      	ldr	r1, [r7, #28]
1004c708:	434b      	muls	r3, r1
1004c70a:	121b      	asrs	r3, r3, #8
1004c70c:	18d3      	adds	r3, r2, r3
1004c70e:	3310      	adds	r3, #16
1004c710:	115a      	asrs	r2, r3, #5
1004c712:	687b      	ldr	r3, [r7, #4]
1004c714:	60da      	str	r2, [r3, #12]
  calibrationData->period = period;
1004c716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004c718:	687b      	ldr	r3, [r7, #4]
1004c71a:	601a      	str	r2, [r3, #0]

  mult = 0x753 ;
1004c71c:	4b18      	ldr	r3, [pc, #96]	@ (1004c780 <_get_calibration_data+0xcc>)
1004c71e:	613b      	str	r3, [r7, #16]
  freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
1004c720:	4b15      	ldr	r3, [pc, #84]	@ (1004c778 <_get_calibration_data+0xc4>)
1004c722:	0018      	movs	r0, r3
1004c724:	f7ff fb26 	bl	1004bd74 <LL_RADIO_TIMER_GetLSIFrequency>
1004c728:	0003      	movs	r3, r0
1004c72a:	623b      	str	r3, [r7, #32]

  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
1004c72c:	e005      	b.n	1004c73a <_get_calibration_data+0x86>
  {
    freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
1004c72e:	4b12      	ldr	r3, [pc, #72]	@ (1004c778 <_get_calibration_data+0xc4>)
1004c730:	0018      	movs	r0, r3
1004c732:	f7ff fb1f 	bl	1004bd74 <LL_RADIO_TIMER_GetLSIFrequency>
1004c736:	0003      	movs	r3, r0
1004c738:	623b      	str	r3, [r7, #32]
  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
1004c73a:	4b0f      	ldr	r3, [pc, #60]	@ (1004c778 <_get_calibration_data+0xc4>)
1004c73c:	0018      	movs	r0, r3
1004c73e:	f7ff fb19 	bl	1004bd74 <LL_RADIO_TIMER_GetLSIFrequency>
1004c742:	0002      	movs	r2, r0
1004c744:	6a3b      	ldr	r3, [r7, #32]
1004c746:	429a      	cmp	r2, r3
1004c748:	d1f1      	bne.n	1004c72e <_get_calibration_data+0x7a>
1004c74a:	6a3b      	ldr	r3, [r7, #32]
1004c74c:	2b00      	cmp	r3, #0
1004c74e:	d0ee      	beq.n	1004c72e <_get_calibration_data+0x7a>
  }
  a1 = freq >> 6 ;
1004c750:	6a3b      	ldr	r3, [r7, #32]
1004c752:	119b      	asrs	r3, r3, #6
1004c754:	60fb      	str	r3, [r7, #12]
  a2 = a1 * mult ;
1004c756:	68fb      	ldr	r3, [r7, #12]
1004c758:	693a      	ldr	r2, [r7, #16]
1004c75a:	4353      	muls	r3, r2
1004c75c:	60bb      	str	r3, [r7, #8]
  calibrationData->freq1 = (a2 + 128) >> 8 ;
1004c75e:	68bb      	ldr	r3, [r7, #8]
1004c760:	3380      	adds	r3, #128	@ 0x80
1004c762:	121a      	asrs	r2, r3, #8
1004c764:	687b      	ldr	r3, [r7, #4]
1004c766:	609a      	str	r2, [r3, #8]
  calibrationData->freq = freq;
1004c768:	6a3a      	ldr	r2, [r7, #32]
1004c76a:	687b      	ldr	r3, [r7, #4]
1004c76c:	605a      	str	r2, [r3, #4]
}
1004c76e:	46c0      	nop			@ (mov r8, r8)
1004c770:	46bd      	mov	sp, r7
1004c772:	b00a      	add	sp, #40	@ 0x28
1004c774:	bd80      	pop	{r7, pc}
1004c776:	46c0      	nop			@ (mov r8, r8)
1004c778:	60001000 	.word	0x60001000
1004c77c:	0008bcf6 	.word	0x0008bcf6
1004c780:	00000753 	.word	0x00000753

1004c784 <_configureTxRxDelay>:

static void _configureTxRxDelay(RADIO_TIMER_ContextTypeDef *context, uint8_t calculate_st)
{
1004c784:	b590      	push	{r4, r7, lr}
1004c786:	b085      	sub	sp, #20
1004c788:	af00      	add	r7, sp, #0
1004c78a:	6078      	str	r0, [r7, #4]
1004c78c:	000a      	movs	r2, r1
1004c78e:	1cfb      	adds	r3, r7, #3
1004c790:	701a      	strb	r2, [r3, #0]
  uint8_t tx_delay_start;

  tx_delay_start = (BLUEGLOB->TXDELAYSTART * 125 / 1000) + 1;
1004c792:	4b38      	ldr	r3, [pc, #224]	@ (1004c874 <_configureTxRxDelay+0xf0>)
1004c794:	7b9b      	ldrb	r3, [r3, #14]
1004c796:	b2db      	uxtb	r3, r3
1004c798:	2b00      	cmp	r3, #0
1004c79a:	da00      	bge.n	1004c79e <_configureTxRxDelay+0x1a>
1004c79c:	3307      	adds	r3, #7
1004c79e:	10db      	asrs	r3, r3, #3
1004c7a0:	b2da      	uxtb	r2, r3
1004c7a2:	240f      	movs	r4, #15
1004c7a4:	193b      	adds	r3, r7, r4
1004c7a6:	3201      	adds	r2, #1
1004c7a8:	701a      	strb	r2, [r3, #0]

  BLUEGLOB->WAKEUPINITDELAY =  blue_unit_conversion(WAKEUP_INIT_DELAY, context->calibrationData.freq1, MULT64_THR_FREQ);
1004c7aa:	687b      	ldr	r3, [r7, #4]
1004c7ac:	699b      	ldr	r3, [r3, #24]
1004c7ae:	0019      	movs	r1, r3
1004c7b0:	4b31      	ldr	r3, [pc, #196]	@ (1004c878 <_configureTxRxDelay+0xf4>)
1004c7b2:	001a      	movs	r2, r3
1004c7b4:	201b      	movs	r0, #27
1004c7b6:	f7f3 fc83 	bl	100400c0 <blue_unit_conversion>
1004c7ba:	0002      	movs	r2, r0
1004c7bc:	4b2d      	ldr	r3, [pc, #180]	@ (1004c874 <_configureTxRxDelay+0xf0>)
1004c7be:	b2d2      	uxtb	r2, r2
1004c7c0:	715a      	strb	r2, [r3, #5]
  context->TxRxDelay.tim12_delay_mt = _us_to_machinetime(BLUEGLOB->TIMER12INITDELAYCAL);
1004c7c2:	4b2c      	ldr	r3, [pc, #176]	@ (1004c874 <_configureTxRxDelay+0xf0>)
1004c7c4:	799b      	ldrb	r3, [r3, #6]
1004c7c6:	b2db      	uxtb	r3, r3
1004c7c8:	0018      	movs	r0, r3
1004c7ca:	f000 f86d 	bl	1004c8a8 <_us_to_machinetime>
1004c7ce:	0003      	movs	r3, r0
1004c7d0:	b2d9      	uxtb	r1, r3
1004c7d2:	687b      	ldr	r3, [r7, #4]
1004c7d4:	223d      	movs	r2, #61	@ 0x3d
1004c7d6:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start);
1004c7d8:	4b26      	ldr	r3, [pc, #152]	@ (1004c874 <_configureTxRxDelay+0xf0>)
1004c7da:	7a1b      	ldrb	r3, [r3, #8]
1004c7dc:	b2db      	uxtb	r3, r3
1004c7de:	001a      	movs	r2, r3
1004c7e0:	193b      	adds	r3, r7, r4
1004c7e2:	781b      	ldrb	r3, [r3, #0]
1004c7e4:	18d3      	adds	r3, r2, r3
1004c7e6:	0018      	movs	r0, r3
1004c7e8:	f000 f85e 	bl	1004c8a8 <_us_to_machinetime>
1004c7ec:	0003      	movs	r3, r0
1004c7ee:	b2d9      	uxtb	r1, r3
1004c7f0:	687b      	ldr	r3, [r7, #4]
1004c7f2:	2238      	movs	r2, #56	@ 0x38
1004c7f4:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_no_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITNOCALDELAYCHK + tx_delay_start);
1004c7f6:	4b1f      	ldr	r3, [pc, #124]	@ (1004c874 <_configureTxRxDelay+0xf0>)
1004c7f8:	7a5b      	ldrb	r3, [r3, #9]
1004c7fa:	b2db      	uxtb	r3, r3
1004c7fc:	001a      	movs	r2, r3
1004c7fe:	193b      	adds	r3, r7, r4
1004c800:	781b      	ldrb	r3, [r3, #0]
1004c802:	18d3      	adds	r3, r2, r3
1004c804:	0018      	movs	r0, r3
1004c806:	f000 f84f 	bl	1004c8a8 <_us_to_machinetime>
1004c80a:	0003      	movs	r3, r0
1004c80c:	b2d9      	uxtb	r1, r3
1004c80e:	687b      	ldr	r3, [r7, #4]
1004c810:	2239      	movs	r2, #57	@ 0x39
1004c812:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVECALDELAYCHK);
1004c814:	4b17      	ldr	r3, [pc, #92]	@ (1004c874 <_configureTxRxDelay+0xf0>)
1004c816:	7a9b      	ldrb	r3, [r3, #10]
1004c818:	b2db      	uxtb	r3, r3
1004c81a:	0018      	movs	r0, r3
1004c81c:	f000 f844 	bl	1004c8a8 <_us_to_machinetime>
1004c820:	0003      	movs	r3, r0
1004c822:	b2d9      	uxtb	r1, r3
1004c824:	687b      	ldr	r3, [r7, #4]
1004c826:	223a      	movs	r2, #58	@ 0x3a
1004c828:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_no_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVENOCALDELAYCHK);
1004c82a:	4b12      	ldr	r3, [pc, #72]	@ (1004c874 <_configureTxRxDelay+0xf0>)
1004c82c:	7adb      	ldrb	r3, [r3, #11]
1004c82e:	b2db      	uxtb	r3, r3
1004c830:	0018      	movs	r0, r3
1004c832:	f000 f839 	bl	1004c8a8 <_us_to_machinetime>
1004c836:	0003      	movs	r3, r0
1004c838:	b2d9      	uxtb	r1, r3
1004c83a:	687b      	ldr	r3, [r7, #4]
1004c83c:	223b      	movs	r2, #59	@ 0x3b
1004c83e:	5499      	strb	r1, [r3, r2]

  if (calculate_st)
1004c840:	1cfb      	adds	r3, r7, #3
1004c842:	781b      	ldrb	r3, [r3, #0]
1004c844:	2b00      	cmp	r3, #0
1004c846:	d010      	beq.n	1004c86a <_configureTxRxDelay+0xe6>
  {
    context->TxRxDelay.tx_cal_delay_st    = _us_to_systime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start) + WAKEUP_INIT_DELAY;
1004c848:	4b0a      	ldr	r3, [pc, #40]	@ (1004c874 <_configureTxRxDelay+0xf0>)
1004c84a:	7a1b      	ldrb	r3, [r3, #8]
1004c84c:	b2db      	uxtb	r3, r3
1004c84e:	001a      	movs	r2, r3
1004c850:	193b      	adds	r3, r7, r4
1004c852:	781b      	ldrb	r3, [r3, #0]
1004c854:	18d3      	adds	r3, r2, r3
1004c856:	0018      	movs	r0, r3
1004c858:	f000 f810 	bl	1004c87c <_us_to_systime>
1004c85c:	0003      	movs	r3, r0
1004c85e:	b2db      	uxtb	r3, r3
1004c860:	331b      	adds	r3, #27
1004c862:	b2d9      	uxtb	r1, r3
1004c864:	687b      	ldr	r3, [r7, #4]
1004c866:	223c      	movs	r2, #60	@ 0x3c
1004c868:	5499      	strb	r1, [r3, r2]
  }

}
1004c86a:	46c0      	nop			@ (mov r8, r8)
1004c86c:	46bd      	mov	sp, r7
1004c86e:	b005      	add	sp, #20
1004c870:	bd90      	pop	{r4, r7, pc}
1004c872:	46c0      	nop			@ (mov r8, r8)
1004c874:	200000c0 	.word	0x200000c0
1004c878:	00000326 	.word	0x00000326

1004c87c <_us_to_systime>:

static uint32_t _us_to_systime(uint32_t time)
{
1004c87c:	b580      	push	{r7, lr}
1004c87e:	b084      	sub	sp, #16
1004c880:	af00      	add	r7, sp, #0
1004c882:	6078      	str	r0, [r7, #4]
  uint32_t t1, t2;
  t1 = time * 0x68;
1004c884:	687b      	ldr	r3, [r7, #4]
1004c886:	2268      	movs	r2, #104	@ 0x68
1004c888:	4353      	muls	r3, r2
1004c88a:	60fb      	str	r3, [r7, #12]
  t2 = time * 0xDB;
1004c88c:	687b      	ldr	r3, [r7, #4]
1004c88e:	22db      	movs	r2, #219	@ 0xdb
1004c890:	4353      	muls	r3, r2
1004c892:	60bb      	str	r3, [r7, #8]
  return (t1 >> 8) + (t2 >> 16);
1004c894:	68fb      	ldr	r3, [r7, #12]
1004c896:	0a1a      	lsrs	r2, r3, #8
1004c898:	68bb      	ldr	r3, [r7, #8]
1004c89a:	0c1b      	lsrs	r3, r3, #16
1004c89c:	18d3      	adds	r3, r2, r3
}
1004c89e:	0018      	movs	r0, r3
1004c8a0:	46bd      	mov	sp, r7
1004c8a2:	b004      	add	sp, #16
1004c8a4:	bd80      	pop	{r7, pc}
	...

1004c8a8 <_us_to_machinetime>:

static uint32_t _us_to_machinetime(uint32_t time)
{
1004c8a8:	b5b0      	push	{r4, r5, r7, lr}
1004c8aa:	b088      	sub	sp, #32
1004c8ac:	af00      	add	r7, sp, #0
1004c8ae:	60f8      	str	r0, [r7, #12]
  uint64_t tmp = (uint64_t)RADIO_TIMER_Context.calibrationData.freq * (uint64_t)time * (uint64_t)3U;
1004c8b0:	4915      	ldr	r1, [pc, #84]	@ (1004c908 <_us_to_machinetime+0x60>)
1004c8b2:	6949      	ldr	r1, [r1, #20]
1004c8b4:	6039      	str	r1, [r7, #0]
1004c8b6:	2100      	movs	r1, #0
1004c8b8:	6079      	str	r1, [r7, #4]
1004c8ba:	68f9      	ldr	r1, [r7, #12]
1004c8bc:	000a      	movs	r2, r1
1004c8be:	2100      	movs	r1, #0
1004c8c0:	000b      	movs	r3, r1
1004c8c2:	6838      	ldr	r0, [r7, #0]
1004c8c4:	6879      	ldr	r1, [r7, #4]
1004c8c6:	f7f3 feb9 	bl	1004063c <__aeabi_lmul>
1004c8ca:	0002      	movs	r2, r0
1004c8cc:	000b      	movs	r3, r1
1004c8ce:	0010      	movs	r0, r2
1004c8d0:	0019      	movs	r1, r3
1004c8d2:	0002      	movs	r2, r0
1004c8d4:	000b      	movs	r3, r1
1004c8d6:	1892      	adds	r2, r2, r2
1004c8d8:	415b      	adcs	r3, r3
1004c8da:	1812      	adds	r2, r2, r0
1004c8dc:	414b      	adcs	r3, r1
1004c8de:	61ba      	str	r2, [r7, #24]
1004c8e0:	61fb      	str	r3, [r7, #28]
  uint32_t time_mt = ((tmp + (1 << 26)) >> 27) & TIMER_MAX_VALUE;
1004c8e2:	69ba      	ldr	r2, [r7, #24]
1004c8e4:	69fb      	ldr	r3, [r7, #28]
1004c8e6:	2080      	movs	r0, #128	@ 0x80
1004c8e8:	04c0      	lsls	r0, r0, #19
1004c8ea:	2100      	movs	r1, #0
1004c8ec:	1812      	adds	r2, r2, r0
1004c8ee:	414b      	adcs	r3, r1
1004c8f0:	0159      	lsls	r1, r3, #5
1004c8f2:	0ed4      	lsrs	r4, r2, #27
1004c8f4:	430c      	orrs	r4, r1
1004c8f6:	0edd      	lsrs	r5, r3, #27
1004c8f8:	0023      	movs	r3, r4
1004c8fa:	617b      	str	r3, [r7, #20]

  return time_mt;
1004c8fc:	697b      	ldr	r3, [r7, #20]
}
1004c8fe:	0018      	movs	r0, r3
1004c900:	46bd      	mov	sp, r7
1004c902:	b008      	add	sp, #32
1004c904:	bdb0      	pop	{r4, r5, r7, pc}
1004c906:	46c0      	nop			@ (mov r8, r8)
1004c908:	200026f8 	.word	0x200026f8

1004c90c <_update_xtal_startup_time>:

static void _update_xtal_startup_time(uint16_t hs_startup_time, int32_t freq1)
{
1004c90c:	b580      	push	{r7, lr}
1004c90e:	b084      	sub	sp, #16
1004c910:	af00      	add	r7, sp, #0
1004c912:	0002      	movs	r2, r0
1004c914:	6039      	str	r1, [r7, #0]
1004c916:	1dbb      	adds	r3, r7, #6
1004c918:	801a      	strh	r2, [r3, #0]
  int32_t time1;

  time1 = blue_unit_conversion(hs_startup_time, freq1, MULT64_THR_FREQ);
1004c91a:	1dbb      	adds	r3, r7, #6
1004c91c:	881b      	ldrh	r3, [r3, #0]
1004c91e:	6839      	ldr	r1, [r7, #0]
1004c920:	4a0e      	ldr	r2, [pc, #56]	@ (1004c95c <_update_xtal_startup_time+0x50>)
1004c922:	0018      	movs	r0, r3
1004c924:	f7f3 fbcc 	bl	100400c0 <blue_unit_conversion>
1004c928:	0003      	movs	r3, r0
1004c92a:	60fb      	str	r3, [r7, #12]
  if (time1 >= 4096)
1004c92c:	68fa      	ldr	r2, [r7, #12]
1004c92e:	2380      	movs	r3, #128	@ 0x80
1004c930:	015b      	lsls	r3, r3, #5
1004c932:	429a      	cmp	r2, r3
1004c934:	db01      	blt.n	1004c93a <_update_xtal_startup_time+0x2e>
  {
    time1 = 4095;
1004c936:	4b0a      	ldr	r3, [pc, #40]	@ (1004c960 <_update_xtal_startup_time+0x54>)
1004c938:	60fb      	str	r3, [r7, #12]
  }
  if (time1 < 16)
1004c93a:	68fb      	ldr	r3, [r7, #12]
1004c93c:	2b0f      	cmp	r3, #15
1004c93e:	dc01      	bgt.n	1004c944 <_update_xtal_startup_time+0x38>
  {
    time1 = 16;
1004c940:	2310      	movs	r3, #16
1004c942:	60fb      	str	r3, [r7, #12]
  }
  LL_RADIO_TIMER_SetWakeupOffset(WAKEUP, (time1 >> 4));
1004c944:	68fb      	ldr	r3, [r7, #12]
1004c946:	111b      	asrs	r3, r3, #4
1004c948:	b2db      	uxtb	r3, r3
1004c94a:	4a06      	ldr	r2, [pc, #24]	@ (1004c964 <_update_xtal_startup_time+0x58>)
1004c94c:	0019      	movs	r1, r3
1004c94e:	0010      	movs	r0, r2
1004c950:	f7ff f968 	bl	1004bc24 <LL_RADIO_TIMER_SetWakeupOffset>
}
1004c954:	46c0      	nop			@ (mov r8, r8)
1004c956:	46bd      	mov	sp, r7
1004c958:	b004      	add	sp, #16
1004c95a:	bd80      	pop	{r7, pc}
1004c95c:	00000326 	.word	0x00000326
1004c960:	00000fff 	.word	0x00000fff
1004c964:	60001800 	.word	0x60001800

1004c968 <_calibration_callback>:

static void _calibration_callback(void *handle)
{
1004c968:	b5b0      	push	{r4, r5, r7, lr}
1004c96a:	b082      	sub	sp, #8
1004c96c:	af00      	add	r7, sp, #0
1004c96e:	6078      	str	r0, [r7, #4]
  if(RADIO_TIMER_Context.calibrationSettings.calibration_in_progress == FALSE)
1004c970:	4b11      	ldr	r3, [pc, #68]	@ (1004c9b8 <_calibration_callback+0x50>)
1004c972:	7b1b      	ldrb	r3, [r3, #12]
1004c974:	2201      	movs	r2, #1
1004c976:	4053      	eors	r3, r2
1004c978:	b2db      	uxtb	r3, r3
1004c97a:	2b00      	cmp	r3, #0
1004c97c:	d008      	beq.n	1004c990 <_calibration_callback+0x28>
  {
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004c97e:	4b0e      	ldr	r3, [pc, #56]	@ (1004c9b8 <_calibration_callback+0x50>)
1004c980:	781b      	ldrb	r3, [r3, #0]
1004c982:	2b00      	cmp	r3, #0
1004c984:	d001      	beq.n	1004c98a <_calibration_callback+0x22>
    {
      _timer_start_calibration();
1004c986:	f7ff fe6d 	bl	1004c664 <_timer_start_calibration>
    }
    RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = TRUE;
1004c98a:	4b0b      	ldr	r3, [pc, #44]	@ (1004c9b8 <_calibration_callback+0x50>)
1004c98c:	2201      	movs	r2, #1
1004c98e:	731a      	strb	r2, [r3, #12]
  }
  _start_timer(&RADIO_TIMER_Context.calibrationTimer, HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationCheckDuration);
1004c990:	f7ff fd92 	bl	1004c4b8 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004c994:	0002      	movs	r2, r0
1004c996:	000b      	movs	r3, r1
1004c998:	4907      	ldr	r1, [pc, #28]	@ (1004c9b8 <_calibration_callback+0x50>)
1004c99a:	6889      	ldr	r1, [r1, #8]
1004c99c:	000c      	movs	r4, r1
1004c99e:	2100      	movs	r1, #0
1004c9a0:	000d      	movs	r5, r1
1004c9a2:	1912      	adds	r2, r2, r4
1004c9a4:	416b      	adcs	r3, r5
1004c9a6:	4905      	ldr	r1, [pc, #20]	@ (1004c9bc <_calibration_callback+0x54>)
1004c9a8:	0008      	movs	r0, r1
1004c9aa:	f000 f809 	bl	1004c9c0 <_start_timer>
}
1004c9ae:	46c0      	nop			@ (mov r8, r8)
1004c9b0:	46bd      	mov	sp, r7
1004c9b2:	b002      	add	sp, #8
1004c9b4:	bdb0      	pop	{r4, r5, r7, pc}
1004c9b6:	46c0      	nop			@ (mov r8, r8)
1004c9b8:	200026f8 	.word	0x200026f8
1004c9bc:	20002738 	.word	0x20002738

1004c9c0 <_start_timer>:

static int32_t _start_timer(VTIMER_HandleType *timerHandle, uint64_t time)
{
1004c9c0:	b590      	push	{r4, r7, lr}
1004c9c2:	b089      	sub	sp, #36	@ 0x24
1004c9c4:	af00      	add	r7, sp, #0
1004c9c6:	60f8      	str	r0, [r7, #12]
1004c9c8:	603a      	str	r2, [r7, #0]
1004c9ca:	607b      	str	r3, [r7, #4]
  uint8_t expired = 0;
1004c9cc:	2313      	movs	r3, #19
1004c9ce:	18fb      	adds	r3, r7, r3
1004c9d0:	2200      	movs	r2, #0
1004c9d2:	701a      	strb	r2, [r3, #0]

  /* The timer is already started*/
  if (timerHandle->active)
1004c9d4:	68fb      	ldr	r3, [r7, #12]
1004c9d6:	7b1b      	ldrb	r3, [r3, #12]
1004c9d8:	2b00      	cmp	r3, #0
1004c9da:	d001      	beq.n	1004c9e0 <_start_timer+0x20>
  {
    return 1;
1004c9dc:	2301      	movs	r3, #1
1004c9de:	e047      	b.n	1004ca70 <_start_timer+0xb0>
  }
  timerHandle->expiryTime = time;
1004c9e0:	68f9      	ldr	r1, [r7, #12]
1004c9e2:	683a      	ldr	r2, [r7, #0]
1004c9e4:	687b      	ldr	r3, [r7, #4]
1004c9e6:	600a      	str	r2, [r1, #0]
1004c9e8:	604b      	str	r3, [r1, #4]
  timerHandle->active = TRUE;
1004c9ea:	68fb      	ldr	r3, [r7, #12]
1004c9ec:	2201      	movs	r2, #1
1004c9ee:	731a      	strb	r2, [r3, #12]
  if (_insert_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle) == timerHandle)
1004c9f0:	4b21      	ldr	r3, [pc, #132]	@ (1004ca78 <_start_timer+0xb8>)
1004c9f2:	228c      	movs	r2, #140	@ 0x8c
1004c9f4:	589b      	ldr	r3, [r3, r2]
1004c9f6:	68fa      	ldr	r2, [r7, #12]
1004c9f8:	0011      	movs	r1, r2
1004c9fa:	0018      	movs	r0, r3
1004c9fc:	f000 f92e 	bl	1004cc5c <_insert_timer_in_queue>
1004ca00:	0002      	movs	r2, r0
1004ca02:	68fb      	ldr	r3, [r7, #12]
1004ca04:	4293      	cmp	r3, r2
1004ca06:	d130      	bne.n	1004ca6a <_start_timer+0xaa>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(timerHandle, &expired);
1004ca08:	2413      	movs	r4, #19
1004ca0a:	193a      	adds	r2, r7, r4
1004ca0c:	68fb      	ldr	r3, [r7, #12]
1004ca0e:	0011      	movs	r1, r2
1004ca10:	0018      	movs	r0, r3
1004ca12:	f000 f89b 	bl	1004cb4c <_update_user_timeout>
1004ca16:	0002      	movs	r2, r0
1004ca18:	4b17      	ldr	r3, [pc, #92]	@ (1004ca78 <_start_timer+0xb8>)
1004ca1a:	218c      	movs	r1, #140	@ 0x8c
1004ca1c:	505a      	str	r2, [r3, r1]
    if (expired)
1004ca1e:	193b      	adds	r3, r7, r4
1004ca20:	781b      	ldrb	r3, [r3, #0]
1004ca22:	2b00      	cmp	r3, #0
1004ca24:	d021      	beq.n	1004ca6a <_start_timer+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ca26:	f3ef 8310 	mrs	r3, PRIMASK
1004ca2a:	61bb      	str	r3, [r7, #24]
  return(result);
1004ca2c:	69bb      	ldr	r3, [r7, #24]
    {
      /* A new root timer is already expired, mimic timer expire that is normally signaled
       through the interrupt handler that increase the number of expired timers*/
      INCREMENT_EXPIRE_COUNT;
1004ca2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004ca30:	b672      	cpsid	i
}
1004ca32:	46c0      	nop			@ (mov r8, r8)
1004ca34:	4b10      	ldr	r3, [pc, #64]	@ (1004ca78 <_start_timer+0xb8>)
1004ca36:	2291      	movs	r2, #145	@ 0x91
1004ca38:	5c9b      	ldrb	r3, [r3, r2]
1004ca3a:	3301      	adds	r3, #1
1004ca3c:	4a0e      	ldr	r2, [pc, #56]	@ (1004ca78 <_start_timer+0xb8>)
1004ca3e:	2192      	movs	r1, #146	@ 0x92
1004ca40:	5c52      	ldrb	r2, [r2, r1]
1004ca42:	4293      	cmp	r3, r2
1004ca44:	d103      	bne.n	1004ca4e <_start_timer+0x8e>
1004ca46:	4b0c      	ldr	r3, [pc, #48]	@ (1004ca78 <_start_timer+0xb8>)
1004ca48:	2291      	movs	r2, #145	@ 0x91
1004ca4a:	5c9b      	ldrb	r3, [r3, r2]
1004ca4c:	e004      	b.n	1004ca58 <_start_timer+0x98>
1004ca4e:	4b0a      	ldr	r3, [pc, #40]	@ (1004ca78 <_start_timer+0xb8>)
1004ca50:	2291      	movs	r2, #145	@ 0x91
1004ca52:	5c9b      	ldrb	r3, [r3, r2]
1004ca54:	3301      	adds	r3, #1
1004ca56:	b2db      	uxtb	r3, r3
1004ca58:	4a07      	ldr	r2, [pc, #28]	@ (1004ca78 <_start_timer+0xb8>)
1004ca5a:	2191      	movs	r1, #145	@ 0x91
1004ca5c:	5453      	strb	r3, [r2, r1]
1004ca5e:	69fb      	ldr	r3, [r7, #28]
1004ca60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ca62:	697b      	ldr	r3, [r7, #20]
1004ca64:	f383 8810 	msr	PRIMASK, r3
}
1004ca68:	46c0      	nop			@ (mov r8, r8)
  {
    _check_host_activity();
  }
  #endif
  
  return expired;
1004ca6a:	2313      	movs	r3, #19
1004ca6c:	18fb      	adds	r3, r7, r3
1004ca6e:	781b      	ldrb	r3, [r3, #0]
}
1004ca70:	0018      	movs	r0, r3
1004ca72:	46bd      	mov	sp, r7
1004ca74:	b009      	add	sp, #36	@ 0x24
1004ca76:	bd90      	pop	{r4, r7, pc}
1004ca78:	200026f8 	.word	0x200026f8

1004ca7c <_get_system_time_and_machine>:

static uint64_t _get_system_time_and_machine(RADIO_TIMER_ContextTypeDef *context, uint32_t *current_machine_time)
{
1004ca7c:	b5b0      	push	{r4, r5, r7, lr}
1004ca7e:	b08a      	sub	sp, #40	@ 0x28
1004ca80:	af00      	add	r7, sp, #0
1004ca82:	60f8      	str	r0, [r7, #12]
1004ca84:	60b9      	str	r1, [r7, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ca86:	f3ef 8310 	mrs	r3, PRIMASK
1004ca8a:	617b      	str	r3, [r7, #20]
  return(result);
1004ca8c:	697b      	ldr	r3, [r7, #20]
  uint32_t difftime;
  uint64_t new_time;

  ATOMIC_SECTION_BEGIN();
1004ca8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004ca90:	b672      	cpsid	i
}
1004ca92:	46c0      	nop			@ (mov r8, r8)
  new_time = context->cumulative_time;
1004ca94:	68fb      	ldr	r3, [r7, #12]
1004ca96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004ca98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004ca9a:	623a      	str	r2, [r7, #32]
1004ca9c:	627b      	str	r3, [r7, #36]	@ 0x24
  *current_machine_time =  LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004ca9e:	4b29      	ldr	r3, [pc, #164]	@ (1004cb44 <_get_system_time_and_machine+0xc8>)
1004caa0:	0018      	movs	r0, r3
1004caa2:	f7ff f8e6 	bl	1004bc72 <LL_RADIO_TIMER_GetAbsoluteTime>
1004caa6:	0002      	movs	r2, r0
1004caa8:	68bb      	ldr	r3, [r7, #8]
1004caaa:	601a      	str	r2, [r3, #0]
  difftime = TIME_ABSDIFF(*current_machine_time, context->last_machine_time);
1004caac:	68bb      	ldr	r3, [r7, #8]
1004caae:	681a      	ldr	r2, [r3, #0]
1004cab0:	68fb      	ldr	r3, [r7, #12]
1004cab2:	2180      	movs	r1, #128	@ 0x80
1004cab4:	585b      	ldr	r3, [r3, r1]
1004cab6:	1ad3      	subs	r3, r2, r3
1004cab8:	61bb      	str	r3, [r7, #24]
  new_time += blue_unit_conversion(difftime, context->calibrationData.period1, MULT64_THR_PERIOD);
1004caba:	68fb      	ldr	r3, [r7, #12]
1004cabc:	69db      	ldr	r3, [r3, #28]
1004cabe:	0019      	movs	r1, r3
1004cac0:	4a21      	ldr	r2, [pc, #132]	@ (1004cb48 <_get_system_time_and_machine+0xcc>)
1004cac2:	69bb      	ldr	r3, [r7, #24]
1004cac4:	0018      	movs	r0, r3
1004cac6:	f7f3 fafb 	bl	100400c0 <blue_unit_conversion>
1004caca:	0003      	movs	r3, r0
1004cacc:	603b      	str	r3, [r7, #0]
1004cace:	2300      	movs	r3, #0
1004cad0:	607b      	str	r3, [r7, #4]
1004cad2:	6a3a      	ldr	r2, [r7, #32]
1004cad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004cad6:	6838      	ldr	r0, [r7, #0]
1004cad8:	6879      	ldr	r1, [r7, #4]
1004cada:	1812      	adds	r2, r2, r0
1004cadc:	414b      	adcs	r3, r1
1004cade:	623a      	str	r2, [r7, #32]
1004cae0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (new_time < context->last_system_time)
1004cae2:	68fb      	ldr	r3, [r7, #12]
1004cae4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
1004cae6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
1004cae8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004caea:	4299      	cmp	r1, r3
1004caec:	d305      	bcc.n	1004cafa <_get_system_time_and_machine+0x7e>
1004caee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004caf0:	4299      	cmp	r1, r3
1004caf2:	d115      	bne.n	1004cb20 <_get_system_time_and_machine+0xa4>
1004caf4:	6a39      	ldr	r1, [r7, #32]
1004caf6:	4291      	cmp	r1, r2
1004caf8:	d212      	bcs.n	1004cb20 <_get_system_time_and_machine+0xa4>
  {
    new_time += blue_unit_conversion(TIMER_MAX_VALUE, context->calibrationData.period1, MULT64_THR_PERIOD);
1004cafa:	68fb      	ldr	r3, [r7, #12]
1004cafc:	69db      	ldr	r3, [r3, #28]
1004cafe:	0019      	movs	r1, r3
1004cb00:	4a11      	ldr	r2, [pc, #68]	@ (1004cb48 <_get_system_time_and_machine+0xcc>)
1004cb02:	2301      	movs	r3, #1
1004cb04:	425b      	negs	r3, r3
1004cb06:	0018      	movs	r0, r3
1004cb08:	f7f3 fada 	bl	100400c0 <blue_unit_conversion>
1004cb0c:	0003      	movs	r3, r0
1004cb0e:	001c      	movs	r4, r3
1004cb10:	2300      	movs	r3, #0
1004cb12:	001d      	movs	r5, r3
1004cb14:	6a3a      	ldr	r2, [r7, #32]
1004cb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004cb18:	1912      	adds	r2, r2, r4
1004cb1a:	416b      	adcs	r3, r5
1004cb1c:	623a      	str	r2, [r7, #32]
1004cb1e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  context->last_system_time = new_time;
1004cb20:	68f9      	ldr	r1, [r7, #12]
1004cb22:	6a3a      	ldr	r2, [r7, #32]
1004cb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004cb26:	678a      	str	r2, [r1, #120]	@ 0x78
1004cb28:	67cb      	str	r3, [r1, #124]	@ 0x7c
1004cb2a:	69fb      	ldr	r3, [r7, #28]
1004cb2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004cb2e:	693b      	ldr	r3, [r7, #16]
1004cb30:	f383 8810 	msr	PRIMASK, r3
}
1004cb34:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();

  return new_time;
1004cb36:	6a3a      	ldr	r2, [r7, #32]
1004cb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
1004cb3a:	0010      	movs	r0, r2
1004cb3c:	0019      	movs	r1, r3
1004cb3e:	46bd      	mov	sp, r7
1004cb40:	b00a      	add	sp, #40	@ 0x28
1004cb42:	bdb0      	pop	{r4, r5, r7, pc}
1004cb44:	60001800 	.word	0x60001800
1004cb48:	00000635 	.word	0x00000635

1004cb4c <_update_user_timeout>:

/* Set timeout and skip non active timers */
static VTIMER_HandleType *_update_user_timeout(VTIMER_HandleType *rootNode, uint8_t *expired)
{
1004cb4c:	b5b0      	push	{r4, r5, r7, lr}
1004cb4e:	b08a      	sub	sp, #40	@ 0x28
1004cb50:	af00      	add	r7, sp, #0
1004cb52:	6078      	str	r0, [r7, #4]
1004cb54:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *curr = rootNode;
1004cb56:	687b      	ldr	r3, [r7, #4]
1004cb58:	627b      	str	r3, [r7, #36]	@ 0x24
  VTIMER_HandleType *rootOrig = rootNode;
1004cb5a:	687b      	ldr	r3, [r7, #4]
1004cb5c:	623b      	str	r3, [r7, #32]
  int64_t delay;
  *expired = 0;
1004cb5e:	683b      	ldr	r3, [r7, #0]
1004cb60:	2200      	movs	r2, #0
1004cb62:	701a      	strb	r2, [r3, #0]
  while (curr != NULL)
1004cb64:	e033      	b.n	1004cbce <_update_user_timeout+0x82>
  {
    if (curr->active)
1004cb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004cb68:	7b1b      	ldrb	r3, [r3, #12]
1004cb6a:	2b00      	cmp	r3, #0
1004cb6c:	d02c      	beq.n	1004cbc8 <_update_user_timeout+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004cb6e:	f3ef 8310 	mrs	r3, PRIMASK
1004cb72:	60fb      	str	r3, [r7, #12]
  return(result);
1004cb74:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_SECTION_BEGIN();
1004cb76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004cb78:	b672      	cpsid	i
}
1004cb7a:	46c0      	nop			@ (mov r8, r8)
#if defined (STM32WB06) || defined (STM32WB07)
      uint8_t dummy;
      bool share = FALSE;
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &dummy);
#endif
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
1004cb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004cb7e:	681c      	ldr	r4, [r3, #0]
1004cb80:	685d      	ldr	r5, [r3, #4]
1004cb82:	f7ff fc99 	bl	1004c4b8 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004cb86:	0002      	movs	r2, r0
1004cb88:	000b      	movs	r3, r1
1004cb8a:	1aa4      	subs	r4, r4, r2
1004cb8c:	419d      	sbcs	r5, r3
1004cb8e:	0022      	movs	r2, r4
1004cb90:	002b      	movs	r3, r5
1004cb92:	613a      	str	r2, [r7, #16]
1004cb94:	617b      	str	r3, [r7, #20]
      if (delay > 0)
1004cb96:	697b      	ldr	r3, [r7, #20]
1004cb98:	2b00      	cmp	r3, #0
1004cb9a:	dc05      	bgt.n	1004cba8 <_update_user_timeout+0x5c>
1004cb9c:	697b      	ldr	r3, [r7, #20]
1004cb9e:	2b00      	cmp	r3, #0
1004cba0:	d108      	bne.n	1004cbb4 <_update_user_timeout+0x68>
1004cba2:	693b      	ldr	r3, [r7, #16]
1004cba4:	2b00      	cmp	r3, #0
1004cba6:	d005      	beq.n	1004cbb4 <_update_user_timeout+0x68>
        {
          RADIO_TIMER_Context.radioTimer.pending |= RADIO_TIMER_Context.radioTimer.active;
          RADIO_TIMER_Context.radioTimer.active = FALSE;
        }
#else
        VTIMER_SetWakeupTime(delay, TRUE);
1004cba8:	693b      	ldr	r3, [r7, #16]
1004cbaa:	2101      	movs	r1, #1
1004cbac:	0018      	movs	r0, r3
1004cbae:	f000 f81d 	bl	1004cbec <VTIMER_SetWakeupTime>
1004cbb2:	e002      	b.n	1004cbba <_update_user_timeout+0x6e>
#endif
      }
      else
      {
        *expired = 1;
1004cbb4:	683b      	ldr	r3, [r7, #0]
1004cbb6:	2201      	movs	r2, #1
1004cbb8:	701a      	strb	r2, [r3, #0]
1004cbba:	69fb      	ldr	r3, [r7, #28]
1004cbbc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004cbbe:	68bb      	ldr	r3, [r7, #8]
1004cbc0:	f383 8810 	msr	PRIMASK, r3
}
1004cbc4:	46c0      	nop			@ (mov r8, r8)
      }
      ATOMIC_SECTION_END();
      break;
1004cbc6:	e005      	b.n	1004cbd4 <_update_user_timeout+0x88>
    }
    curr = curr->next;
1004cbc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004cbca:	691b      	ldr	r3, [r3, #16]
1004cbcc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (curr != NULL)
1004cbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004cbd0:	2b00      	cmp	r3, #0
1004cbd2:	d1c8      	bne.n	1004cb66 <_update_user_timeout+0x1a>
  }
  if (*expired)
1004cbd4:	683b      	ldr	r3, [r7, #0]
1004cbd6:	781b      	ldrb	r3, [r3, #0]
1004cbd8:	2b00      	cmp	r3, #0
1004cbda:	d001      	beq.n	1004cbe0 <_update_user_timeout+0x94>
  {
    return rootOrig;
1004cbdc:	6a3b      	ldr	r3, [r7, #32]
1004cbde:	e000      	b.n	1004cbe2 <_update_user_timeout+0x96>
  }

  return curr;
1004cbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
1004cbe2:	0018      	movs	r0, r3
1004cbe4:	46bd      	mov	sp, r7
1004cbe6:	b00a      	add	sp, #40	@ 0x28
1004cbe8:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004cbec <VTIMER_SetWakeupTime>:

#if defined (STM32WB05) || defined (STM32WB09)
static uint32_t VTIMER_SetWakeupTime(uint32_t delay, bool allow_sleep)
{
1004cbec:	b580      	push	{r7, lr}
1004cbee:	b084      	sub	sp, #16
1004cbf0:	af00      	add	r7, sp, #0
1004cbf2:	6078      	str	r0, [r7, #4]
1004cbf4:	000a      	movs	r2, r1
1004cbf6:	1cfb      	adds	r3, r7, #3
1004cbf8:	701a      	strb	r2, [r3, #0]
  uint32_t current_time;
  delay = blue_unit_conversion(delay, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ) ;
1004cbfa:	4b15      	ldr	r3, [pc, #84]	@ (1004cc50 <VTIMER_SetWakeupTime+0x64>)
1004cbfc:	699b      	ldr	r3, [r3, #24]
1004cbfe:	0019      	movs	r1, r3
1004cc00:	4a14      	ldr	r2, [pc, #80]	@ (1004cc54 <VTIMER_SetWakeupTime+0x68>)
1004cc02:	687b      	ldr	r3, [r7, #4]
1004cc04:	0018      	movs	r0, r3
1004cc06:	f7f3 fa5b 	bl	100400c0 <blue_unit_conversion>
1004cc0a:	0003      	movs	r3, r0
1004cc0c:	607b      	str	r3, [r7, #4]
  /* If the delay is too small round to minimum 2 tick */
  delay = MAX(32, delay);
1004cc0e:	687b      	ldr	r3, [r7, #4]
1004cc10:	2b20      	cmp	r3, #32
1004cc12:	d200      	bcs.n	1004cc16 <VTIMER_SetWakeupTime+0x2a>
1004cc14:	2320      	movs	r3, #32
1004cc16:	607b      	str	r3, [r7, #4]
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004cc18:	4b0f      	ldr	r3, [pc, #60]	@ (1004cc58 <VTIMER_SetWakeupTime+0x6c>)
1004cc1a:	0018      	movs	r0, r3
1004cc1c:	f7ff f829 	bl	1004bc72 <LL_RADIO_TIMER_GetAbsoluteTime>
1004cc20:	0003      	movs	r3, r0
1004cc22:	60fb      	str	r3, [r7, #12]
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP, ((current_time + (delay + 8)) & TIMER_MAX_VALUE));
1004cc24:	687a      	ldr	r2, [r7, #4]
1004cc26:	68fb      	ldr	r3, [r7, #12]
1004cc28:	18d3      	adds	r3, r2, r3
1004cc2a:	3308      	adds	r3, #8
1004cc2c:	4a0a      	ldr	r2, [pc, #40]	@ (1004cc58 <VTIMER_SetWakeupTime+0x6c>)
1004cc2e:	0019      	movs	r1, r3
1004cc30:	0010      	movs	r0, r2
1004cc32:	f7ff f812 	bl	1004bc5a <LL_RADIO_TIMER_SetCPUWakeupTime>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004cc36:	4b08      	ldr	r3, [pc, #32]	@ (1004cc58 <VTIMER_SetWakeupTime+0x6c>)
1004cc38:	0018      	movs	r0, r3
1004cc3a:	f7ff f824 	bl	1004bc86 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP);
1004cc3e:	4b06      	ldr	r3, [pc, #24]	@ (1004cc58 <VTIMER_SetWakeupTime+0x6c>)
1004cc40:	0018      	movs	r0, r3
1004cc42:	f7fe ffcf 	bl	1004bbe4 <LL_RADIO_TIMER_EnableCPUWakeupTimer>

  return current_time;
1004cc46:	68fb      	ldr	r3, [r7, #12]
}
1004cc48:	0018      	movs	r0, r3
1004cc4a:	46bd      	mov	sp, r7
1004cc4c:	b004      	add	sp, #16
1004cc4e:	bd80      	pop	{r7, pc}
1004cc50:	200026f8 	.word	0x200026f8
1004cc54:	00000326 	.word	0x00000326
1004cc58:	60001800 	.word	0x60001800

1004cc5c <_insert_timer_in_queue>:
#endif

static VTIMER_HandleType *_insert_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
1004cc5c:	b580      	push	{r7, lr}
1004cc5e:	b086      	sub	sp, #24
1004cc60:	af00      	add	r7, sp, #0
1004cc62:	6078      	str	r0, [r7, #4]
1004cc64:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004cc66:	687b      	ldr	r3, [r7, #4]
1004cc68:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004cc6a:	2300      	movs	r3, #0
1004cc6c:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004cc6e:	687b      	ldr	r3, [r7, #4]
1004cc70:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004cc72:	e004      	b.n	1004cc7e <_insert_timer_in_queue+0x22>
  {
    prev = current;
1004cc74:	697b      	ldr	r3, [r7, #20]
1004cc76:	613b      	str	r3, [r7, #16]
    current = current->next;
1004cc78:	697b      	ldr	r3, [r7, #20]
1004cc7a:	691b      	ldr	r3, [r3, #16]
1004cc7c:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004cc7e:	697b      	ldr	r3, [r7, #20]
1004cc80:	2b00      	cmp	r3, #0
1004cc82:	d00a      	beq.n	1004cc9a <_insert_timer_in_queue+0x3e>
1004cc84:	697b      	ldr	r3, [r7, #20]
1004cc86:	681a      	ldr	r2, [r3, #0]
1004cc88:	685b      	ldr	r3, [r3, #4]
1004cc8a:	6839      	ldr	r1, [r7, #0]
1004cc8c:	6808      	ldr	r0, [r1, #0]
1004cc8e:	6849      	ldr	r1, [r1, #4]
1004cc90:	4299      	cmp	r1, r3
1004cc92:	d8ef      	bhi.n	1004cc74 <_insert_timer_in_queue+0x18>
1004cc94:	d101      	bne.n	1004cc9a <_insert_timer_in_queue+0x3e>
1004cc96:	4290      	cmp	r0, r2
1004cc98:	d8ec      	bhi.n	1004cc74 <_insert_timer_in_queue+0x18>
  }

  handle->next = current;
1004cc9a:	683b      	ldr	r3, [r7, #0]
1004cc9c:	697a      	ldr	r2, [r7, #20]
1004cc9e:	611a      	str	r2, [r3, #16]

  if (prev == NULL)
1004cca0:	693b      	ldr	r3, [r7, #16]
1004cca2:	2b00      	cmp	r3, #0
1004cca4:	d102      	bne.n	1004ccac <_insert_timer_in_queue+0x50>
  {
    /* We are the new root */
    returnValue = handle;
1004cca6:	683b      	ldr	r3, [r7, #0]
1004cca8:	60fb      	str	r3, [r7, #12]
1004ccaa:	e002      	b.n	1004ccb2 <_insert_timer_in_queue+0x56>
  }
  else
  {
    prev->next = handle;
1004ccac:	693b      	ldr	r3, [r7, #16]
1004ccae:	683a      	ldr	r2, [r7, #0]
1004ccb0:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004ccb2:	68fb      	ldr	r3, [r7, #12]
}
1004ccb4:	0018      	movs	r0, r3
1004ccb6:	46bd      	mov	sp, r7
1004ccb8:	b006      	add	sp, #24
1004ccba:	bd80      	pop	{r7, pc}

1004ccbc <_virtualTimeBaseEnable>:

static void _virtualTimeBaseEnable(FunctionalState state)
{
1004ccbc:	b580      	push	{r7, lr}
1004ccbe:	b082      	sub	sp, #8
1004ccc0:	af00      	add	r7, sp, #0
1004ccc2:	0002      	movs	r2, r0
1004ccc4:	1dfb      	adds	r3, r7, #7
1004ccc6:	701a      	strb	r2, [r3, #0]
  if (state != DISABLE)
1004ccc8:	1dfb      	adds	r3, r7, #7
1004ccca:	781b      	ldrb	r3, [r3, #0]
1004cccc:	2b00      	cmp	r3, #0
1004ccce:	d010      	beq.n	1004ccf2 <_virtualTimeBaseEnable+0x36>
  {
    if (RADIO_TIMER_Context.enableTimeBase == FALSE)
1004ccd0:	4b0e      	ldr	r3, [pc, #56]	@ (1004cd0c <_virtualTimeBaseEnable+0x50>)
1004ccd2:	2290      	movs	r2, #144	@ 0x90
1004ccd4:	5c9b      	ldrb	r3, [r3, r2]
1004ccd6:	2201      	movs	r2, #1
1004ccd8:	4053      	eors	r3, r2
1004ccda:	b2db      	uxtb	r3, r3
1004ccdc:	2b00      	cmp	r3, #0
1004ccde:	d010      	beq.n	1004cd02 <_virtualTimeBaseEnable+0x46>
    {
      _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
1004cce0:	4b0b      	ldr	r3, [pc, #44]	@ (1004cd10 <_virtualTimeBaseEnable+0x54>)
1004cce2:	0018      	movs	r0, r3
1004cce4:	f7ff fe40 	bl	1004c968 <_calibration_callback>
      RADIO_TIMER_Context.enableTimeBase = TRUE;
1004cce8:	4b08      	ldr	r3, [pc, #32]	@ (1004cd0c <_virtualTimeBaseEnable+0x50>)
1004ccea:	2290      	movs	r2, #144	@ 0x90
1004ccec:	2101      	movs	r1, #1
1004ccee:	5499      	strb	r1, [r3, r2]
  else
  {
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
    RADIO_TIMER_Context.enableTimeBase = FALSE;
  }
}
1004ccf0:	e007      	b.n	1004cd02 <_virtualTimeBaseEnable+0x46>
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004ccf2:	4b07      	ldr	r3, [pc, #28]	@ (1004cd10 <_virtualTimeBaseEnable+0x54>)
1004ccf4:	0018      	movs	r0, r3
1004ccf6:	f7ff fc0b 	bl	1004c510 <HAL_RADIO_TIMER_StopVirtualTimer>
    RADIO_TIMER_Context.enableTimeBase = FALSE;
1004ccfa:	4b04      	ldr	r3, [pc, #16]	@ (1004cd0c <_virtualTimeBaseEnable+0x50>)
1004ccfc:	2290      	movs	r2, #144	@ 0x90
1004ccfe:	2100      	movs	r1, #0
1004cd00:	5499      	strb	r1, [r3, r2]
}
1004cd02:	46c0      	nop			@ (mov r8, r8)
1004cd04:	46bd      	mov	sp, r7
1004cd06:	b002      	add	sp, #8
1004cd08:	bd80      	pop	{r7, pc}
1004cd0a:	46c0      	nop			@ (mov r8, r8)
1004cd0c:	200026f8 	.word	0x200026f8
1004cd10:	20002738 	.word	0x20002738

1004cd14 <_remove_timer_in_queue>:

static VTIMER_HandleType *_remove_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
1004cd14:	b580      	push	{r7, lr}
1004cd16:	b086      	sub	sp, #24
1004cd18:	af00      	add	r7, sp, #0
1004cd1a:	6078      	str	r0, [r7, #4]
1004cd1c:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004cd1e:	687b      	ldr	r3, [r7, #4]
1004cd20:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004cd22:	2300      	movs	r3, #0
1004cd24:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004cd26:	687b      	ldr	r3, [r7, #4]
1004cd28:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current != handle))
1004cd2a:	e004      	b.n	1004cd36 <_remove_timer_in_queue+0x22>
  {
    prev = current;
1004cd2c:	697b      	ldr	r3, [r7, #20]
1004cd2e:	613b      	str	r3, [r7, #16]
    current = current->next;
1004cd30:	697b      	ldr	r3, [r7, #20]
1004cd32:	691b      	ldr	r3, [r3, #16]
1004cd34:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current != handle))
1004cd36:	697b      	ldr	r3, [r7, #20]
1004cd38:	2b00      	cmp	r3, #0
1004cd3a:	d003      	beq.n	1004cd44 <_remove_timer_in_queue+0x30>
1004cd3c:	697a      	ldr	r2, [r7, #20]
1004cd3e:	683b      	ldr	r3, [r7, #0]
1004cd40:	429a      	cmp	r2, r3
1004cd42:	d1f3      	bne.n	1004cd2c <_remove_timer_in_queue+0x18>
  }

  if (current == NULL)
1004cd44:	697b      	ldr	r3, [r7, #20]
1004cd46:	2b00      	cmp	r3, #0
1004cd48:	d00b      	beq.n	1004cd62 <_remove_timer_in_queue+0x4e>
  {
    /* Not found */
  }
  else if (current == rootNode)
1004cd4a:	697a      	ldr	r2, [r7, #20]
1004cd4c:	687b      	ldr	r3, [r7, #4]
1004cd4e:	429a      	cmp	r2, r3
1004cd50:	d103      	bne.n	1004cd5a <_remove_timer_in_queue+0x46>
  {
    /* New root node */
    returnValue = current->next;
1004cd52:	697b      	ldr	r3, [r7, #20]
1004cd54:	691b      	ldr	r3, [r3, #16]
1004cd56:	60fb      	str	r3, [r7, #12]
1004cd58:	e003      	b.n	1004cd62 <_remove_timer_in_queue+0x4e>
  }
  else
  {
    prev->next = current->next;
1004cd5a:	697b      	ldr	r3, [r7, #20]
1004cd5c:	691a      	ldr	r2, [r3, #16]
1004cd5e:	693b      	ldr	r3, [r7, #16]
1004cd60:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004cd62:	68fb      	ldr	r3, [r7, #12]
}
1004cd64:	0018      	movs	r0, r3
1004cd66:	46bd      	mov	sp, r7
1004cd68:	b006      	add	sp, #24
1004cd6a:	bd80      	pop	{r7, pc}

1004cd6c <_check_callbacks>:

/* Check the number of expired timer from rootNode (ordered list of timers) and return the list of expired timers */
static VTIMER_HandleType *_check_callbacks(VTIMER_HandleType *rootNode, VTIMER_HandleType **expiredList)
{
1004cd6c:	b5b0      	push	{r4, r5, r7, lr}
1004cd6e:	b088      	sub	sp, #32
1004cd70:	af00      	add	r7, sp, #0
1004cd72:	6078      	str	r0, [r7, #4]
1004cd74:	6039      	str	r1, [r7, #0]

  VTIMER_HandleType *curr = rootNode;
1004cd76:	687b      	ldr	r3, [r7, #4]
1004cd78:	61fb      	str	r3, [r7, #28]
  VTIMER_HandleType *prev = NULL;
1004cd7a:	2300      	movs	r3, #0
1004cd7c:	61bb      	str	r3, [r7, #24]
  VTIMER_HandleType *returnValue = rootNode;
1004cd7e:	687b      	ldr	r3, [r7, #4]
1004cd80:	617b      	str	r3, [r7, #20]
  *expiredList = rootNode;
1004cd82:	683b      	ldr	r3, [r7, #0]
1004cd84:	687a      	ldr	r2, [r7, #4]
1004cd86:	601a      	str	r2, [r3, #0]

  int64_t delay;
  uint32_t expiredCount = 0;
1004cd88:	2300      	movs	r3, #0
1004cd8a:	613b      	str	r3, [r7, #16]

  while (curr != NULL)
1004cd8c:	e021      	b.n	1004cdd2 <_check_callbacks+0x66>
  {

    if (curr->active)
1004cd8e:	69fb      	ldr	r3, [r7, #28]
1004cd90:	7b1b      	ldrb	r3, [r3, #12]
1004cd92:	2b00      	cmp	r3, #0
1004cd94:	d015      	beq.n	1004cdc2 <_check_callbacks+0x56>
    {
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
1004cd96:	69fb      	ldr	r3, [r7, #28]
1004cd98:	681c      	ldr	r4, [r3, #0]
1004cd9a:	685d      	ldr	r5, [r3, #4]
1004cd9c:	f7ff fb8c 	bl	1004c4b8 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004cda0:	0002      	movs	r2, r0
1004cda2:	000b      	movs	r3, r1
1004cda4:	1aa4      	subs	r4, r4, r2
1004cda6:	419d      	sbcs	r5, r3
1004cda8:	0022      	movs	r2, r4
1004cdaa:	002b      	movs	r3, r5
1004cdac:	60ba      	str	r2, [r7, #8]
1004cdae:	60fb      	str	r3, [r7, #12]

      if (delay > 5)   /*TBR*/
1004cdb0:	68fb      	ldr	r3, [r7, #12]
1004cdb2:	2b00      	cmp	r3, #0
1004cdb4:	dc11      	bgt.n	1004cdda <_check_callbacks+0x6e>
1004cdb6:	68fb      	ldr	r3, [r7, #12]
1004cdb8:	2b00      	cmp	r3, #0
1004cdba:	d102      	bne.n	1004cdc2 <_check_callbacks+0x56>
1004cdbc:	68bb      	ldr	r3, [r7, #8]
1004cdbe:	2b05      	cmp	r3, #5
1004cdc0:	d80b      	bhi.n	1004cdda <_check_callbacks+0x6e>
        /* End of expired timers list*/
        break;
      }
    }

    prev = curr;
1004cdc2:	69fb      	ldr	r3, [r7, #28]
1004cdc4:	61bb      	str	r3, [r7, #24]
    curr = curr->next;
1004cdc6:	69fb      	ldr	r3, [r7, #28]
1004cdc8:	691b      	ldr	r3, [r3, #16]
1004cdca:	61fb      	str	r3, [r7, #28]
    expiredCount++;
1004cdcc:	693b      	ldr	r3, [r7, #16]
1004cdce:	3301      	adds	r3, #1
1004cdd0:	613b      	str	r3, [r7, #16]
  while (curr != NULL)
1004cdd2:	69fb      	ldr	r3, [r7, #28]
1004cdd4:	2b00      	cmp	r3, #0
1004cdd6:	d1da      	bne.n	1004cd8e <_check_callbacks+0x22>
1004cdd8:	e000      	b.n	1004cddc <_check_callbacks+0x70>
        break;
1004cdda:	46c0      	nop			@ (mov r8, r8)
  }

  if (expiredCount)
1004cddc:	693b      	ldr	r3, [r7, #16]
1004cdde:	2b00      	cmp	r3, #0
1004cde0:	d005      	beq.n	1004cdee <_check_callbacks+0x82>
  {
    /* Some timers expired */
    prev->next = NULL;
1004cde2:	69bb      	ldr	r3, [r7, #24]
1004cde4:	2200      	movs	r2, #0
1004cde6:	611a      	str	r2, [r3, #16]
    returnValue = curr;
1004cde8:	69fb      	ldr	r3, [r7, #28]
1004cdea:	617b      	str	r3, [r7, #20]
1004cdec:	e002      	b.n	1004cdf4 <_check_callbacks+0x88>
  }
  else
  {
    /* No timer expired */
    *expiredList = NULL;
1004cdee:	683b      	ldr	r3, [r7, #0]
1004cdf0:	2200      	movs	r2, #0
1004cdf2:	601a      	str	r2, [r3, #0]
  }

  return returnValue;
1004cdf4:	697b      	ldr	r3, [r7, #20]
}
1004cdf6:	0018      	movs	r0, r3
1004cdf8:	46bd      	mov	sp, r7
1004cdfa:	b008      	add	sp, #32
1004cdfc:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004ce00 <_updateCalibrationData>:

static void _updateCalibrationData(void)
{
1004ce00:	b580      	push	{r7, lr}
1004ce02:	b090      	sub	sp, #64	@ 0x40
1004ce04:	af00      	add	r7, sp, #0
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004ce06:	4b28      	ldr	r3, [pc, #160]	@ (1004cea8 <_updateCalibrationData+0xa8>)
1004ce08:	781b      	ldrb	r3, [r3, #0]
1004ce0a:	2b00      	cmp	r3, #0
1004ce0c:	d037      	beq.n	1004ce7e <_updateCalibrationData+0x7e>
  {

    CalibrationDataTypeDef updatedCalibrationData;
    _get_calibration_data(&updatedCalibrationData);
1004ce0e:	003b      	movs	r3, r7
1004ce10:	0018      	movs	r0, r3
1004ce12:	f7ff fc4f 	bl	1004c6b4 <_get_calibration_data>
    _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, updatedCalibrationData.freq1);
1004ce16:	4b24      	ldr	r3, [pc, #144]	@ (1004cea8 <_updateCalibrationData+0xa8>)
1004ce18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
1004ce1a:	b29a      	uxth	r2, r3
1004ce1c:	003b      	movs	r3, r7
1004ce1e:	689b      	ldr	r3, [r3, #8]
1004ce20:	0019      	movs	r1, r3
1004ce22:	0010      	movs	r0, r2
1004ce24:	f7ff fd72 	bl	1004c90c <_update_xtal_startup_time>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ce28:	f3ef 8310 	mrs	r3, PRIMASK
1004ce2c:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
1004ce2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    
    ATOMIC_SECTION_BEGIN();
1004ce30:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
1004ce32:	b672      	cpsid	i
}
1004ce34:	46c0      	nop			@ (mov r8, r8)
    RADIO_TIMER_Context.calibrationData.calibration_data_available = 1;
1004ce36:	4b1c      	ldr	r3, [pc, #112]	@ (1004cea8 <_updateCalibrationData+0xa8>)
1004ce38:	2234      	movs	r2, #52	@ 0x34
1004ce3a:	2101      	movs	r1, #1
1004ce3c:	5499      	strb	r1, [r3, r2]
    RADIO_TIMER_Context.calibrationData.freq = updatedCalibrationData.freq;
1004ce3e:	003b      	movs	r3, r7
1004ce40:	685a      	ldr	r2, [r3, #4]
1004ce42:	4b19      	ldr	r3, [pc, #100]	@ (1004cea8 <_updateCalibrationData+0xa8>)
1004ce44:	615a      	str	r2, [r3, #20]
    RADIO_TIMER_Context.calibrationData.freq1 = updatedCalibrationData.freq1;
1004ce46:	003b      	movs	r3, r7
1004ce48:	689a      	ldr	r2, [r3, #8]
1004ce4a:	4b17      	ldr	r3, [pc, #92]	@ (1004cea8 <_updateCalibrationData+0xa8>)
1004ce4c:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = updatedCalibrationData.period;
1004ce4e:	003b      	movs	r3, r7
1004ce50:	681a      	ldr	r2, [r3, #0]
1004ce52:	4b15      	ldr	r3, [pc, #84]	@ (1004cea8 <_updateCalibrationData+0xa8>)
1004ce54:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.period1 = updatedCalibrationData.period1;
1004ce56:	003b      	movs	r3, r7
1004ce58:	68da      	ldr	r2, [r3, #12]
1004ce5a:	4b13      	ldr	r3, [pc, #76]	@ (1004cea8 <_updateCalibrationData+0xa8>)
1004ce5c:	61da      	str	r2, [r3, #28]
    _update_system_time(&RADIO_TIMER_Context);
1004ce5e:	4b12      	ldr	r3, [pc, #72]	@ (1004cea8 <_updateCalibrationData+0xa8>)
1004ce60:	0018      	movs	r0, r3
1004ce62:	f000 f823 	bl	1004ceac <_update_system_time>
1004ce66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ce68:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ce6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004ce6c:	f383 8810 	msr	PRIMASK, r3
}
1004ce70:	46c0      	nop			@ (mov r8, r8)
    ATOMIC_SECTION_END();

    _configureTxRxDelay(&RADIO_TIMER_Context, FALSE);
1004ce72:	4b0d      	ldr	r3, [pc, #52]	@ (1004cea8 <_updateCalibrationData+0xa8>)
1004ce74:	2100      	movs	r1, #0
1004ce76:	0018      	movs	r0, r3
1004ce78:	f7ff fc84 	bl	1004c784 <_configureTxRxDelay>
  {
  ATOMIC_SECTION_BEGIN();
  _update_system_time(&RADIO_TIMER_Context);
  ATOMIC_SECTION_END();
  }
}
1004ce7c:	e010      	b.n	1004cea0 <_updateCalibrationData+0xa0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ce7e:	f3ef 8310 	mrs	r3, PRIMASK
1004ce82:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
1004ce84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  ATOMIC_SECTION_BEGIN();
1004ce86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
1004ce88:	b672      	cpsid	i
}
1004ce8a:	46c0      	nop			@ (mov r8, r8)
  _update_system_time(&RADIO_TIMER_Context);
1004ce8c:	4b06      	ldr	r3, [pc, #24]	@ (1004cea8 <_updateCalibrationData+0xa8>)
1004ce8e:	0018      	movs	r0, r3
1004ce90:	f000 f80c 	bl	1004ceac <_update_system_time>
1004ce94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004ce96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ce98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004ce9a:	f383 8810 	msr	PRIMASK, r3
}
1004ce9e:	46c0      	nop			@ (mov r8, r8)
}
1004cea0:	46c0      	nop			@ (mov r8, r8)
1004cea2:	46bd      	mov	sp, r7
1004cea4:	b010      	add	sp, #64	@ 0x40
1004cea6:	bd80      	pop	{r7, pc}
1004cea8:	200026f8 	.word	0x200026f8

1004ceac <_update_system_time>:

/* This function update the system time after a calibration.
 * If the user calls too often this function, you could have rounding issues in the integer maths.
 */
static void _update_system_time(RADIO_TIMER_ContextTypeDef *context)
{
1004ceac:	b5b0      	push	{r4, r5, r7, lr}
1004ceae:	b088      	sub	sp, #32
1004ceb0:	af00      	add	r7, sp, #0
1004ceb2:	6178      	str	r0, [r7, #20]
  uint32_t current_machine_time;
  uint32_t period;

  current_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004ceb4:	4b2a      	ldr	r3, [pc, #168]	@ (1004cf60 <_update_system_time+0xb4>)
1004ceb6:	0018      	movs	r0, r3
1004ceb8:	f7fe fedb 	bl	1004bc72 <LL_RADIO_TIMER_GetAbsoluteTime>
1004cebc:	0003      	movs	r3, r0
1004cebe:	61fb      	str	r3, [r7, #28]
  period = context->calibrationData.last_period1;
1004cec0:	697b      	ldr	r3, [r7, #20]
1004cec2:	6a1b      	ldr	r3, [r3, #32]
1004cec4:	61bb      	str	r3, [r7, #24]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
1004cec6:	697b      	ldr	r3, [r7, #20]
1004cec8:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
1004ceca:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                             blue_unit_conversion(TIME_ABSDIFF(current_machine_time,
1004cecc:	697b      	ldr	r3, [r7, #20]
1004cece:	2280      	movs	r2, #128	@ 0x80
1004ced0:	589b      	ldr	r3, [r3, r2]
1004ced2:	69fa      	ldr	r2, [r7, #28]
1004ced4:	1ad3      	subs	r3, r2, r3
1004ced6:	4a23      	ldr	r2, [pc, #140]	@ (1004cf64 <_update_system_time+0xb8>)
1004ced8:	69b9      	ldr	r1, [r7, #24]
1004ceda:	0018      	movs	r0, r3
1004cedc:	f7f3 f8f0 	bl	100400c0 <blue_unit_conversion>
1004cee0:	0003      	movs	r3, r0
1004cee2:	60bb      	str	r3, [r7, #8]
1004cee4:	2300      	movs	r3, #0
1004cee6:	60fb      	str	r3, [r7, #12]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
1004cee8:	68ba      	ldr	r2, [r7, #8]
1004ceea:	68fb      	ldr	r3, [r7, #12]
1004ceec:	1912      	adds	r2, r2, r4
1004ceee:	416b      	adcs	r3, r5
1004cef0:	6979      	ldr	r1, [r7, #20]
1004cef2:	670a      	str	r2, [r1, #112]	@ 0x70
1004cef4:	674b      	str	r3, [r1, #116]	@ 0x74
                                                               context->last_machine_time),
                                                  period, MULT64_THR_PERIOD);

  if ((context->calibrationSettings.periodicCalibration == 0)
1004cef6:	697b      	ldr	r3, [r7, #20]
1004cef8:	781b      	ldrb	r3, [r3, #0]
1004cefa:	2b00      	cmp	r3, #0
1004cefc:	d11d      	bne.n	1004cf3a <_update_system_time+0x8e>
      && (TIME_ABSDIFF(current_machine_time,
1004cefe:	697b      	ldr	r3, [r7, #20]
1004cf00:	2280      	movs	r2, #128	@ 0x80
1004cf02:	589b      	ldr	r3, [r3, r2]
1004cf04:	69fa      	ldr	r2, [r7, #28]
1004cf06:	1ad2      	subs	r2, r2, r3
                       context->last_machine_time) < context->calibrationData.calibration_machine_interval))
1004cf08:	697b      	ldr	r3, [r7, #20]
1004cf0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      && (TIME_ABSDIFF(current_machine_time,
1004cf0c:	429a      	cmp	r2, r3
1004cf0e:	d214      	bcs.n	1004cf3a <_update_system_time+0x8e>
  {
    context->cumulative_time += blue_unit_conversion(TIMER_MAX_VALUE, period, MULT64_THR_PERIOD);
1004cf10:	4a14      	ldr	r2, [pc, #80]	@ (1004cf64 <_update_system_time+0xb8>)
1004cf12:	69b9      	ldr	r1, [r7, #24]
1004cf14:	2301      	movs	r3, #1
1004cf16:	425b      	negs	r3, r3
1004cf18:	0018      	movs	r0, r3
1004cf1a:	f7f3 f8d1 	bl	100400c0 <blue_unit_conversion>
1004cf1e:	0001      	movs	r1, r0
1004cf20:	697b      	ldr	r3, [r7, #20]
1004cf22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004cf24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004cf26:	6039      	str	r1, [r7, #0]
1004cf28:	2100      	movs	r1, #0
1004cf2a:	6079      	str	r1, [r7, #4]
1004cf2c:	6838      	ldr	r0, [r7, #0]
1004cf2e:	6879      	ldr	r1, [r7, #4]
1004cf30:	1812      	adds	r2, r2, r0
1004cf32:	414b      	adcs	r3, r1
1004cf34:	6979      	ldr	r1, [r7, #20]
1004cf36:	670a      	str	r2, [r1, #112]	@ 0x70
1004cf38:	674b      	str	r3, [r1, #116]	@ 0x74
  }
  context->last_machine_time = current_machine_time;
1004cf3a:	697b      	ldr	r3, [r7, #20]
1004cf3c:	2180      	movs	r1, #128	@ 0x80
1004cf3e:	69fa      	ldr	r2, [r7, #28]
1004cf40:	505a      	str	r2, [r3, r1]
  context->calibrationData.last_calibration_time = context->cumulative_time;
1004cf42:	697b      	ldr	r3, [r7, #20]
1004cf44:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004cf46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004cf48:	6979      	ldr	r1, [r7, #20]
1004cf4a:	628a      	str	r2, [r1, #40]	@ 0x28
1004cf4c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  context->calibrationData.last_period1 = context->calibrationData.period1;
1004cf4e:	697b      	ldr	r3, [r7, #20]
1004cf50:	69da      	ldr	r2, [r3, #28]
1004cf52:	697b      	ldr	r3, [r7, #20]
1004cf54:	621a      	str	r2, [r3, #32]
}
1004cf56:	46c0      	nop			@ (mov r8, r8)
1004cf58:	46bd      	mov	sp, r7
1004cf5a:	b008      	add	sp, #32
1004cf5c:	bdb0      	pop	{r4, r5, r7, pc}
1004cf5e:	46c0      	nop			@ (mov r8, r8)
1004cf60:	60001800 	.word	0x60001800
1004cf64:	00000635 	.word	0x00000635

1004cf68 <_check_radio_activity>:
   3) The radio event is after the next calibration event. Then the timer will be programmed with the latest values.
   The check on the next calibration event is made even though the calibration is disabled (max cal. interval)
   in order to avoid counter wrapping with timeouts far in the future.
*/
static void _check_radio_activity(RADIO_TIMER_RadioHandleTypeDef *timerHandle, uint8_t *expired)
{
1004cf68:	b5b0      	push	{r4, r5, r7, lr}
1004cf6a:	b08a      	sub	sp, #40	@ 0x28
1004cf6c:	af00      	add	r7, sp, #0
1004cf6e:	6078      	str	r0, [r7, #4]
1004cf70:	6039      	str	r1, [r7, #0]
  uint64_t nextCalibrationEvent, currentTime;
  *expired = 0;
1004cf72:	683b      	ldr	r3, [r7, #0]
1004cf74:	2200      	movs	r2, #0
1004cf76:	701a      	strb	r2, [r3, #0]
  if (timerHandle->pending)
1004cf78:	687b      	ldr	r3, [r7, #4]
1004cf7a:	7a9b      	ldrb	r3, [r3, #10]
1004cf7c:	2b00      	cmp	r3, #0
1004cf7e:	d100      	bne.n	1004cf82 <_check_radio_activity+0x1a>
1004cf80:	e070      	b.n	1004d064 <_check_radio_activity+0xfc>
  {
    
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
1004cf82:	4b3a      	ldr	r3, [pc, #232]	@ (1004d06c <_check_radio_activity+0x104>)
1004cf84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004cf86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval;
1004cf88:	4938      	ldr	r1, [pc, #224]	@ (1004d06c <_check_radio_activity+0x104>)
1004cf8a:	6849      	ldr	r1, [r1, #4]
1004cf8c:	000c      	movs	r4, r1
1004cf8e:	2100      	movs	r1, #0
1004cf90:	000d      	movs	r5, r1
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
1004cf92:	1912      	adds	r2, r2, r4
1004cf94:	416b      	adcs	r3, r5
1004cf96:	623a      	str	r2, [r7, #32]
1004cf98:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004cf9a:	f3ef 8310 	mrs	r3, PRIMASK
1004cf9e:	60fb      	str	r3, [r7, #12]
  return(result);
1004cfa0:	68fb      	ldr	r3, [r7, #12]

    ATOMIC_SECTION_BEGIN();
1004cfa2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004cfa4:	b672      	cpsid	i
}
1004cfa6:	46c0      	nop			@ (mov r8, r8)
    currentTime = HAL_RADIO_TIMER_GetCurrentSysTime();
1004cfa8:	f7ff fa86 	bl	1004c4b8 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004cfac:	0002      	movs	r2, r0
1004cfae:	000b      	movs	r3, r1
1004cfb0:	613a      	str	r2, [r7, #16]
1004cfb2:	617b      	str	r3, [r7, #20]
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
1004cfb4:	687b      	ldr	r3, [r7, #4]
1004cfb6:	681a      	ldr	r2, [r3, #0]
1004cfb8:	685b      	ldr	r3, [r3, #4]
1004cfba:	6a38      	ldr	r0, [r7, #32]
1004cfbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004cfbe:	24c8      	movs	r4, #200	@ 0xc8
1004cfc0:	02a4      	lsls	r4, r4, #10
1004cfc2:	2500      	movs	r5, #0
1004cfc4:	1900      	adds	r0, r0, r4
1004cfc6:	4169      	adcs	r1, r5
1004cfc8:	4299      	cmp	r1, r3
1004cfca:	d812      	bhi.n	1004cff2 <_check_radio_activity+0x8a>
1004cfcc:	d101      	bne.n	1004cfd2 <_check_radio_activity+0x6a>
1004cfce:	4290      	cmp	r0, r2
1004cfd0:	d80f      	bhi.n	1004cff2 <_check_radio_activity+0x8a>
        (currentTime > (nextCalibrationEvent + CALIB_SAFE_THR)))
1004cfd2:	6a3a      	ldr	r2, [r7, #32]
1004cfd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004cfd6:	20b9      	movs	r0, #185	@ 0xb9
1004cfd8:	0040      	lsls	r0, r0, #1
1004cfda:	2100      	movs	r1, #0
1004cfdc:	1812      	adds	r2, r2, r0
1004cfde:	414b      	adcs	r3, r1
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
1004cfe0:	6979      	ldr	r1, [r7, #20]
1004cfe2:	4299      	cmp	r1, r3
1004cfe4:	d805      	bhi.n	1004cff2 <_check_radio_activity+0x8a>
1004cfe6:	6979      	ldr	r1, [r7, #20]
1004cfe8:	4299      	cmp	r1, r3
1004cfea:	d135      	bne.n	1004d058 <_check_radio_activity+0xf0>
1004cfec:	6939      	ldr	r1, [r7, #16]
1004cfee:	4291      	cmp	r1, r2
1004cff0:	d932      	bls.n	1004d058 <_check_radio_activity+0xf0>
    {
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
1004cff2:	687b      	ldr	r3, [r7, #4]
1004cff4:	681a      	ldr	r2, [r3, #0]
1004cff6:	685b      	ldr	r3, [r3, #4]
1004cff8:	204c      	movs	r0, #76	@ 0x4c
1004cffa:	4240      	negs	r0, r0
1004cffc:	17c1      	asrs	r1, r0, #31
1004cffe:	1880      	adds	r0, r0, r2
1004d000:	4159      	adcs	r1, r3
1004d002:	693a      	ldr	r2, [r7, #16]
1004d004:	697b      	ldr	r3, [r7, #20]
1004d006:	240a      	movs	r4, #10
1004d008:	2500      	movs	r5, #0
1004d00a:	1912      	adds	r2, r2, r4
1004d00c:	416b      	adcs	r3, r5
1004d00e:	4299      	cmp	r1, r3
1004d010:	d802      	bhi.n	1004d018 <_check_radio_activity+0xb0>
1004d012:	d11a      	bne.n	1004d04a <_check_radio_activity+0xe2>
1004d014:	4290      	cmp	r0, r2
1004d016:	d918      	bls.n	1004d04a <_check_radio_activity+0xe2>
      {
        *expired = TIMER_SetRadioTimerValue(timerHandle->expiryTime, timerHandle->event_type, timerHandle->cal_req);
1004d018:	687b      	ldr	r3, [r7, #4]
1004d01a:	681a      	ldr	r2, [r3, #0]
1004d01c:	685b      	ldr	r3, [r3, #4]
1004d01e:	0010      	movs	r0, r2
1004d020:	687b      	ldr	r3, [r7, #4]
1004d022:	7b19      	ldrb	r1, [r3, #12]
1004d024:	687b      	ldr	r3, [r7, #4]
1004d026:	7a1b      	ldrb	r3, [r3, #8]
1004d028:	001a      	movs	r2, r3
1004d02a:	f000 f821 	bl	1004d070 <TIMER_SetRadioTimerValue>
1004d02e:	0003      	movs	r3, r0
1004d030:	001a      	movs	r2, r3
1004d032:	683b      	ldr	r3, [r7, #0]
1004d034:	701a      	strb	r2, [r3, #0]
        timerHandle->pending = FALSE; /* timer has been served. No more pending */
1004d036:	687b      	ldr	r3, [r7, #4]
1004d038:	2200      	movs	r2, #0
1004d03a:	729a      	strb	r2, [r3, #10]
        timerHandle->active = TRUE; /* timer has been programmed and it becomes ACTIVE */
1004d03c:	687b      	ldr	r3, [r7, #4]
1004d03e:	2201      	movs	r2, #1
1004d040:	725a      	strb	r2, [r3, #9]
        timerHandle->intTxRx_to_be_served = TRUE;
1004d042:	687b      	ldr	r3, [r7, #4]
1004d044:	2201      	movs	r2, #1
1004d046:	72da      	strb	r2, [r3, #11]
1004d048:	e006      	b.n	1004d058 <_check_radio_activity+0xf0>
      }
      else
      {
        
        RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004d04a:	4b08      	ldr	r3, [pc, #32]	@ (1004d06c <_check_radio_activity+0x104>)
1004d04c:	2262      	movs	r2, #98	@ 0x62
1004d04e:	2100      	movs	r1, #0
1004d050:	5499      	strb	r1, [r3, r2]
        *expired = 1;
1004d052:	683b      	ldr	r3, [r7, #0]
1004d054:	2201      	movs	r2, #1
1004d056:	701a      	strb	r2, [r3, #0]
1004d058:	69fb      	ldr	r3, [r7, #28]
1004d05a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004d05c:	68bb      	ldr	r3, [r7, #8]
1004d05e:	f383 8810 	msr	PRIMASK, r3
}
1004d062:	46c0      	nop			@ (mov r8, r8)
      
    }
    ATOMIC_SECTION_END();
    
  }
}
1004d064:	46c0      	nop			@ (mov r8, r8)
1004d066:	46bd      	mov	sp, r7
1004d068:	b00a      	add	sp, #40	@ 0x28
1004d06a:	bdb0      	pop	{r4, r5, r7, pc}
1004d06c:	200026f8 	.word	0x200026f8

1004d070 <TIMER_SetRadioTimerValue>:
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past
  * @retval  0 if a correct timeout has been programmed in the timeout register
  * @retval  1 if a correct timeout cannot be programmed
  */
static uint8_t TIMER_SetRadioTimerValue(uint32_t timeout, bool event_type, bool cal_req)
{
1004d070:	b580      	push	{r7, lr}
1004d072:	b08a      	sub	sp, #40	@ 0x28
1004d074:	af00      	add	r7, sp, #0
1004d076:	6078      	str	r0, [r7, #4]
1004d078:	0008      	movs	r0, r1
1004d07a:	0011      	movs	r1, r2
1004d07c:	1cfb      	adds	r3, r7, #3
1004d07e:	1c02      	adds	r2, r0, #0
1004d080:	701a      	strb	r2, [r3, #0]
1004d082:	1cbb      	adds	r3, r7, #2
1004d084:	1c0a      	adds	r2, r1, #0
1004d086:	701a      	strb	r2, [r3, #0]
  uint32_t current_time, delay, radio_init_delay, device_delay, rel_timeout, rel_timeout_mt;
  uint8_t ret_val;

  /*choose the 2nd init duration. Check the event_type and cal. request*/
  if (event_type == TX)
1004d088:	1cfb      	adds	r3, r7, #3
1004d08a:	781b      	ldrb	r3, [r3, #0]
1004d08c:	2b00      	cmp	r3, #0
1004d08e:	d015      	beq.n	1004d0bc <TIMER_SetRadioTimerValue+0x4c>
  {
    if (cal_req)
1004d090:	1cbb      	adds	r3, r7, #2
1004d092:	781b      	ldrb	r3, [r3, #0]
1004d094:	2b00      	cmp	r3, #0
1004d096:	d008      	beq.n	1004d0aa <TIMER_SetRadioTimerValue+0x3a>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay;
1004d098:	4b67      	ldr	r3, [pc, #412]	@ (1004d238 <TIMER_SetRadioTimerValue+0x1c8>)
1004d09a:	2238      	movs	r2, #56	@ 0x38
1004d09c:	5c9b      	ldrb	r3, [r3, r2]
1004d09e:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004d0a0:	4b65      	ldr	r3, [pc, #404]	@ (1004d238 <TIMER_SetRadioTimerValue+0x1c8>)
1004d0a2:	223c      	movs	r2, #60	@ 0x3c
1004d0a4:	5c9b      	ldrb	r3, [r3, r2]
1004d0a6:	61fb      	str	r3, [r7, #28]
1004d0a8:	e01d      	b.n	1004d0e6 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_no_cal_delay;
1004d0aa:	4b63      	ldr	r3, [pc, #396]	@ (1004d238 <TIMER_SetRadioTimerValue+0x1c8>)
1004d0ac:	2239      	movs	r2, #57	@ 0x39
1004d0ae:	5c9b      	ldrb	r3, [r3, r2]
1004d0b0:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004d0b2:	4b61      	ldr	r3, [pc, #388]	@ (1004d238 <TIMER_SetRadioTimerValue+0x1c8>)
1004d0b4:	223c      	movs	r2, #60	@ 0x3c
1004d0b6:	5c9b      	ldrb	r3, [r3, r2]
1004d0b8:	61fb      	str	r3, [r7, #28]
1004d0ba:	e014      	b.n	1004d0e6 <TIMER_SetRadioTimerValue+0x76>
    }
  }
  else
  {
    if (cal_req)
1004d0bc:	1cbb      	adds	r3, r7, #2
1004d0be:	781b      	ldrb	r3, [r3, #0]
1004d0c0:	2b00      	cmp	r3, #0
1004d0c2:	d008      	beq.n	1004d0d6 <TIMER_SetRadioTimerValue+0x66>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_cal_delay;
1004d0c4:	4b5c      	ldr	r3, [pc, #368]	@ (1004d238 <TIMER_SetRadioTimerValue+0x1c8>)
1004d0c6:	223a      	movs	r2, #58	@ 0x3a
1004d0c8:	5c9b      	ldrb	r3, [r3, r2]
1004d0ca:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004d0cc:	4b5a      	ldr	r3, [pc, #360]	@ (1004d238 <TIMER_SetRadioTimerValue+0x1c8>)
1004d0ce:	223c      	movs	r2, #60	@ 0x3c
1004d0d0:	5c9b      	ldrb	r3, [r3, r2]
1004d0d2:	61fb      	str	r3, [r7, #28]
1004d0d4:	e007      	b.n	1004d0e6 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_no_cal_delay;
1004d0d6:	4b58      	ldr	r3, [pc, #352]	@ (1004d238 <TIMER_SetRadioTimerValue+0x1c8>)
1004d0d8:	223b      	movs	r2, #59	@ 0x3b
1004d0da:	5c9b      	ldrb	r3, [r3, r2]
1004d0dc:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004d0de:	4b56      	ldr	r3, [pc, #344]	@ (1004d238 <TIMER_SetRadioTimerValue+0x1c8>)
1004d0e0:	223c      	movs	r2, #60	@ 0x3c
1004d0e2:	5c9b      	ldrb	r3, [r3, r2]
1004d0e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /* At this point, it is care of the upper layers to guarantee that the timeout represents an absolute time in the future */
  rel_timeout = timeout - (uint32_t)_get_system_time_and_machine(&RADIO_TIMER_Context, &current_time);
1004d0e6:	230c      	movs	r3, #12
1004d0e8:	18fa      	adds	r2, r7, r3
1004d0ea:	4b53      	ldr	r3, [pc, #332]	@ (1004d238 <TIMER_SetRadioTimerValue+0x1c8>)
1004d0ec:	0011      	movs	r1, r2
1004d0ee:	0018      	movs	r0, r3
1004d0f0:	f7ff fcc4 	bl	1004ca7c <_get_system_time_and_machine>
1004d0f4:	0002      	movs	r2, r0
1004d0f6:	000b      	movs	r3, r1
1004d0f8:	687b      	ldr	r3, [r7, #4]
1004d0fa:	1a9b      	subs	r3, r3, r2
1004d0fc:	617b      	str	r3, [r7, #20]

  rel_timeout_mt =  blue_unit_conversion(rel_timeout, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
1004d0fe:	4b4e      	ldr	r3, [pc, #312]	@ (1004d238 <TIMER_SetRadioTimerValue+0x1c8>)
1004d100:	699b      	ldr	r3, [r3, #24]
1004d102:	0019      	movs	r1, r3
1004d104:	4a4d      	ldr	r2, [pc, #308]	@ (1004d23c <TIMER_SetRadioTimerValue+0x1cc>)
1004d106:	697b      	ldr	r3, [r7, #20]
1004d108:	0018      	movs	r0, r3
1004d10a:	f7f2 ffd9 	bl	100400c0 <blue_unit_conversion>
1004d10e:	0003      	movs	r3, r0
1004d110:	613b      	str	r3, [r7, #16]

  /*Check if the timeout is beyond the wakeup time offset. Then program either the WakeUp timer or the Timer1*/
  if (rel_timeout > (device_delay + RADIO_TIMER_Context.hs_startup_time + MARGIN_EXT))
1004d112:	4b49      	ldr	r3, [pc, #292]	@ (1004d238 <TIMER_SetRadioTimerValue+0x1c8>)
1004d114:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
1004d116:	69fb      	ldr	r3, [r7, #28]
1004d118:	18d3      	adds	r3, r2, r3
1004d11a:	33c8      	adds	r3, #200	@ 0xc8
1004d11c:	697a      	ldr	r2, [r7, #20]
1004d11e:	429a      	cmp	r2, r3
1004d120:	d92f      	bls.n	1004d182 <TIMER_SetRadioTimerValue+0x112>
  {
    /*The timeout is after the wakeup_time_offset, So it is ok to program the wakeup timer*/
    delay = rel_timeout_mt - BLUEGLOB->WAKEUPINITDELAY - radio_init_delay;
1004d122:	4b47      	ldr	r3, [pc, #284]	@ (1004d240 <TIMER_SetRadioTimerValue+0x1d0>)
1004d124:	795b      	ldrb	r3, [r3, #5]
1004d126:	b2db      	uxtb	r3, r3
1004d128:	001a      	movs	r2, r3
1004d12a:	693b      	ldr	r3, [r7, #16]
1004d12c:	1a9a      	subs	r2, r3, r2
1004d12e:	6a3b      	ldr	r3, [r7, #32]
1004d130:	1ad3      	subs	r3, r2, r3
1004d132:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay) & TIMER_MAX_VALUE));
1004d134:	68fa      	ldr	r2, [r7, #12]
1004d136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004d138:	18d3      	adds	r3, r2, r3
1004d13a:	4a42      	ldr	r2, [pc, #264]	@ (1004d244 <TIMER_SetRadioTimerValue+0x1d4>)
1004d13c:	0019      	movs	r1, r3
1004d13e:	0010      	movs	r0, r2
1004d140:	f7fe fd7f 	bl	1004bc42 <LL_RADIO_TIMER_SetBLEWakeupTime>
    LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
1004d144:	4b3f      	ldr	r3, [pc, #252]	@ (1004d244 <TIMER_SetRadioTimerValue+0x1d4>)
1004d146:	2100      	movs	r1, #0
1004d148:	0018      	movs	r0, r3
1004d14a:	f7fe fdab 	bl	1004bca4 <LL_RADIO_TIMER_SetSleepRequestMode>
    LL_RADIO_TIMER_DisableTimer1(BLUE);
1004d14e:	23c0      	movs	r3, #192	@ 0xc0
1004d150:	05db      	lsls	r3, r3, #23
1004d152:	0018      	movs	r0, r3
1004d154:	f7fe fcfc 	bl	1004bb50 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004d158:	23c0      	movs	r3, #192	@ 0xc0
1004d15a:	05db      	lsls	r3, r3, #23
1004d15c:	0018      	movs	r0, r3
1004d15e:	f7fe fd06 	bl	1004bb6e <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
1004d162:	4b38      	ldr	r3, [pc, #224]	@ (1004d244 <TIMER_SetRadioTimerValue+0x1d4>)
1004d164:	0018      	movs	r0, r3
1004d166:	f7fe fd1d 	bl	1004bba4 <LL_RADIO_TIMER_EnableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004d16a:	4b36      	ldr	r3, [pc, #216]	@ (1004d244 <TIMER_SetRadioTimerValue+0x1d4>)
1004d16c:	0018      	movs	r0, r3
1004d16e:	f7fe fd8a 	bl	1004bc86 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
    radio_init_delay += BLUEGLOB->WAKEUPINITDELAY;
1004d172:	4b33      	ldr	r3, [pc, #204]	@ (1004d240 <TIMER_SetRadioTimerValue+0x1d0>)
1004d174:	795b      	ldrb	r3, [r3, #5]
1004d176:	b2db      	uxtb	r3, r3
1004d178:	001a      	movs	r2, r3
1004d17a:	6a3b      	ldr	r3, [r7, #32]
1004d17c:	189b      	adds	r3, r3, r2
1004d17e:	623b      	str	r3, [r7, #32]
1004d180:	e021      	b.n	1004d1c6 <TIMER_SetRadioTimerValue+0x156>
  }
  else
  {
    delay = rel_timeout_mt - RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt - radio_init_delay;
1004d182:	4b2d      	ldr	r3, [pc, #180]	@ (1004d238 <TIMER_SetRadioTimerValue+0x1c8>)
1004d184:	223d      	movs	r2, #61	@ 0x3d
1004d186:	5c9b      	ldrb	r3, [r3, r2]
1004d188:	001a      	movs	r2, r3
1004d18a:	693b      	ldr	r3, [r7, #16]
1004d18c:	1a9a      	subs	r2, r3, r2
1004d18e:	6a3b      	ldr	r3, [r7, #32]
1004d190:	1ad3      	subs	r3, r2, r3
1004d192:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + delay) & TIMER_MAX_VALUE));
1004d194:	68fa      	ldr	r2, [r7, #12]
1004d196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004d198:	18d2      	adds	r2, r2, r3
1004d19a:	23c0      	movs	r3, #192	@ 0xc0
1004d19c:	05db      	lsls	r3, r3, #23
1004d19e:	0011      	movs	r1, r2
1004d1a0:	0018      	movs	r0, r3
1004d1a2:	f7fe fcf3 	bl	1004bb8c <LL_RADIO_TIMER_SetTimeout>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004d1a6:	4b27      	ldr	r3, [pc, #156]	@ (1004d244 <TIMER_SetRadioTimerValue+0x1d4>)
1004d1a8:	0018      	movs	r0, r3
1004d1aa:	f7fe fd0b 	bl	1004bbc4 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableTimer1(BLUE);
1004d1ae:	23c0      	movs	r3, #192	@ 0xc0
1004d1b0:	05db      	lsls	r3, r3, #23
1004d1b2:	0018      	movs	r0, r3
1004d1b4:	f7fe fcbc 	bl	1004bb30 <LL_RADIO_TIMER_EnableTimer1>
    radio_init_delay += RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt;
1004d1b8:	4b1f      	ldr	r3, [pc, #124]	@ (1004d238 <TIMER_SetRadioTimerValue+0x1c8>)
1004d1ba:	223d      	movs	r2, #61	@ 0x3d
1004d1bc:	5c9b      	ldrb	r3, [r3, r2]
1004d1be:	001a      	movs	r2, r3
1004d1c0:	6a3b      	ldr	r3, [r7, #32]
1004d1c2:	189b      	adds	r3, r3, r2
1004d1c4:	623b      	str	r3, [r7, #32]
  }

  RADIO_TIMER_Context.last_anchor_mt = (current_time + rel_timeout_mt) & TIMER_MAX_VALUE;
1004d1c6:	68fa      	ldr	r2, [r7, #12]
1004d1c8:	693b      	ldr	r3, [r7, #16]
1004d1ca:	18d2      	adds	r2, r2, r3
1004d1cc:	4b1a      	ldr	r3, [pc, #104]	@ (1004d238 <TIMER_SetRadioTimerValue+0x1c8>)
1004d1ce:	2188      	movs	r1, #136	@ 0x88
1004d1d0:	505a      	str	r2, [r3, r1]
  BLUEGLOB->BYTE22 = 0xF0;
  BLUEGLOB->BYTE23 = 0xFF;
#endif

  /* Basic low level check with an extra margin of machine units */
  if ((delay + radio_init_delay) < (radio_init_delay + 5))
1004d1d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004d1d4:	6a3b      	ldr	r3, [r7, #32]
1004d1d6:	18d2      	adds	r2, r2, r3
1004d1d8:	6a3b      	ldr	r3, [r7, #32]
1004d1da:	3305      	adds	r3, #5
1004d1dc:	429a      	cmp	r2, r3
1004d1de:	d212      	bcs.n	1004d206 <TIMER_SetRadioTimerValue+0x196>
  {
    LL_RADIO_TIMER_DisableTimer1(BLUE);
1004d1e0:	23c0      	movs	r3, #192	@ 0xc0
1004d1e2:	05db      	lsls	r3, r3, #23
1004d1e4:	0018      	movs	r0, r3
1004d1e6:	f7fe fcb3 	bl	1004bb50 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004d1ea:	23c0      	movs	r3, #192	@ 0xc0
1004d1ec:	05db      	lsls	r3, r3, #23
1004d1ee:	0018      	movs	r0, r3
1004d1f0:	f7fe fcbd 	bl	1004bb6e <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004d1f4:	4b13      	ldr	r3, [pc, #76]	@ (1004d244 <TIMER_SetRadioTimerValue+0x1d4>)
1004d1f6:	0018      	movs	r0, r3
1004d1f8:	f7fe fce4 	bl	1004bbc4 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    ret_val =  1;
1004d1fc:	231b      	movs	r3, #27
1004d1fe:	18fb      	adds	r3, r7, r3
1004d200:	2201      	movs	r2, #1
1004d202:	701a      	strb	r2, [r3, #0]
1004d204:	e010      	b.n	1004d228 <TIMER_SetRadioTimerValue+0x1b8>
  }
  else
  {
    RADIO_TIMER_Context.last_setup_time = blue_unit_conversion(radio_init_delay, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004d206:	4b0c      	ldr	r3, [pc, #48]	@ (1004d238 <TIMER_SetRadioTimerValue+0x1c8>)
1004d208:	69db      	ldr	r3, [r3, #28]
1004d20a:	0019      	movs	r1, r3
1004d20c:	4a0e      	ldr	r2, [pc, #56]	@ (1004d248 <TIMER_SetRadioTimerValue+0x1d8>)
1004d20e:	6a3b      	ldr	r3, [r7, #32]
1004d210:	0018      	movs	r0, r3
1004d212:	f7f2 ff55 	bl	100400c0 <blue_unit_conversion>
1004d216:	0003      	movs	r3, r0
1004d218:	b2d9      	uxtb	r1, r3
1004d21a:	4b07      	ldr	r3, [pc, #28]	@ (1004d238 <TIMER_SetRadioTimerValue+0x1c8>)
1004d21c:	2284      	movs	r2, #132	@ 0x84
1004d21e:	5499      	strb	r1, [r3, r2]
    ret_val = 0;
1004d220:	231b      	movs	r3, #27
1004d222:	18fb      	adds	r3, r7, r3
1004d224:	2200      	movs	r2, #0
1004d226:	701a      	strb	r2, [r3, #0]
  }

  return ret_val;
1004d228:	231b      	movs	r3, #27
1004d22a:	18fb      	adds	r3, r7, r3
1004d22c:	781b      	ldrb	r3, [r3, #0]
}
1004d22e:	0018      	movs	r0, r3
1004d230:	46bd      	mov	sp, r7
1004d232:	b00a      	add	sp, #40	@ 0x28
1004d234:	bd80      	pop	{r7, pc}
1004d236:	46c0      	nop			@ (mov r8, r8)
1004d238:	200026f8 	.word	0x200026f8
1004d23c:	00000326 	.word	0x00000326
1004d240:	200000c0 	.word	0x200000c0
1004d244:	60001800 	.word	0x60001800
1004d248:	00000635 	.word	0x00000635

1004d24c <TIMER_GetPastSysTime>:
  * @param   current_system_time: Current System time
  * @warning User should guarantee that call to this function are performed in a non-interruptible context.
  * @return  STU value
  */
static uint64_t TIMER_GetPastSysTime(uint32_t time, uint64_t *current_system_time)
{
1004d24c:	b5b0      	push	{r4, r5, r7, lr}
1004d24e:	b084      	sub	sp, #16
1004d250:	af00      	add	r7, sp, #0
1004d252:	6078      	str	r0, [r7, #4]
1004d254:	6039      	str	r1, [r7, #0]
  uint32_t delta_systime, current_machine_time;

  *current_system_time = _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
1004d256:	2308      	movs	r3, #8
1004d258:	18fa      	adds	r2, r7, r3
1004d25a:	4b12      	ldr	r3, [pc, #72]	@ (1004d2a4 <TIMER_GetPastSysTime+0x58>)
1004d25c:	0011      	movs	r1, r2
1004d25e:	0018      	movs	r0, r3
1004d260:	f7ff fc0c 	bl	1004ca7c <_get_system_time_and_machine>
1004d264:	0002      	movs	r2, r0
1004d266:	000b      	movs	r3, r1
1004d268:	6839      	ldr	r1, [r7, #0]
1004d26a:	600a      	str	r2, [r1, #0]
1004d26c:	604b      	str	r3, [r1, #4]
  delta_systime = blue_unit_conversion(TIME_DIFF(current_machine_time, time), RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004d26e:	68ba      	ldr	r2, [r7, #8]
1004d270:	687b      	ldr	r3, [r7, #4]
1004d272:	1ad0      	subs	r0, r2, r3
1004d274:	4b0b      	ldr	r3, [pc, #44]	@ (1004d2a4 <TIMER_GetPastSysTime+0x58>)
1004d276:	69db      	ldr	r3, [r3, #28]
1004d278:	0019      	movs	r1, r3
1004d27a:	4b0b      	ldr	r3, [pc, #44]	@ (1004d2a8 <TIMER_GetPastSysTime+0x5c>)
1004d27c:	001a      	movs	r2, r3
1004d27e:	f7f2 ff1f 	bl	100400c0 <blue_unit_conversion>
1004d282:	0003      	movs	r3, r0
1004d284:	60fb      	str	r3, [r7, #12]

  return (*current_system_time - delta_systime);
1004d286:	683b      	ldr	r3, [r7, #0]
1004d288:	681a      	ldr	r2, [r3, #0]
1004d28a:	685b      	ldr	r3, [r3, #4]
1004d28c:	68f9      	ldr	r1, [r7, #12]
1004d28e:	000c      	movs	r4, r1
1004d290:	2100      	movs	r1, #0
1004d292:	000d      	movs	r5, r1
1004d294:	1b12      	subs	r2, r2, r4
1004d296:	41ab      	sbcs	r3, r5
}
1004d298:	0010      	movs	r0, r2
1004d29a:	0019      	movs	r1, r3
1004d29c:	46bd      	mov	sp, r7
1004d29e:	b004      	add	sp, #16
1004d2a0:	bdb0      	pop	{r4, r5, r7, pc}
1004d2a2:	46c0      	nop			@ (mov r8, r8)
1004d2a4:	200026f8 	.word	0x200026f8
1004d2a8:	00000635 	.word	0x00000635

1004d2ac <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>:
__weak void HAL_RADIO_TIMER_TxRxWakeUpCallback(void)
{
}

void HAL_RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
1004d2ac:	b580      	push	{r7, lr}
1004d2ae:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TimeoutCallback();
1004d2b0:	f7ff f986 	bl	1004c5c0 <HAL_RADIO_TIMER_TimeoutCallback>

  HAL_RADIO_TIMER_CpuWakeUpCallback();
1004d2b4:	f005 fa40 	bl	10052738 <HAL_RADIO_TIMER_CpuWakeUpCallback>
}
1004d2b8:	46c0      	nop			@ (mov r8, r8)
1004d2ba:	46bd      	mov	sp, r7
1004d2bc:	bd80      	pop	{r7, pc}

1004d2be <HAL_RADIO_TIMER_ERROR_IRQHandler>:
  HAL_RADIO_TIMER_WakeUpCallback();
#endif
}

void HAL_RADIO_TIMER_ERROR_IRQHandler(void)
{
1004d2be:	b580      	push	{r7, lr}
1004d2c0:	b082      	sub	sp, #8
1004d2c2:	af00      	add	r7, sp, #0
  volatile uint32_t debug_cmd = 0;
1004d2c4:	2300      	movs	r3, #0
1004d2c6:	607b      	str	r3, [r7, #4]
  UNUSED(debug_cmd);
1004d2c8:	687b      	ldr	r3, [r7, #4]
  BLUE->DEBUGCMDREG |= 1;
1004d2ca:	23c0      	movs	r3, #192	@ 0xc0
1004d2cc:	05db      	lsls	r3, r3, #23
1004d2ce:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
1004d2d0:	23c0      	movs	r3, #192	@ 0xc0
1004d2d2:	05db      	lsls	r3, r3, #23
1004d2d4:	2101      	movs	r1, #1
1004d2d6:	430a      	orrs	r2, r1
1004d2d8:	675a      	str	r2, [r3, #116]	@ 0x74
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  debug_cmd = BLUE->DEBUGCMDREG;
1004d2da:	23c0      	movs	r3, #192	@ 0xc0
1004d2dc:	05db      	lsls	r3, r3, #23
1004d2de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004d2e0:	607b      	str	r3, [r7, #4]
}
1004d2e2:	46c0      	nop			@ (mov r8, r8)
1004d2e4:	46bd      	mov	sp, r7
1004d2e6:	b002      	add	sp, #8
1004d2e8:	bd80      	pop	{r7, pc}
	...

1004d2ec <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
1004d2ec:	b580      	push	{r7, lr}
1004d2ee:	b082      	sub	sp, #8
1004d2f0:	af00      	add	r7, sp, #0
1004d2f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
1004d2f4:	4b08      	ldr	r3, [pc, #32]	@ (1004d318 <LL_PWR_SetNoPullB+0x2c>)
1004d2f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004d2f8:	687b      	ldr	r3, [r7, #4]
1004d2fa:	43d9      	mvns	r1, r3
1004d2fc:	4b06      	ldr	r3, [pc, #24]	@ (1004d318 <LL_PWR_SetNoPullB+0x2c>)
1004d2fe:	400a      	ands	r2, r1
1004d300:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004d302:	4b05      	ldr	r3, [pc, #20]	@ (1004d318 <LL_PWR_SetNoPullB+0x2c>)
1004d304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004d306:	687b      	ldr	r3, [r7, #4]
1004d308:	43d9      	mvns	r1, r3
1004d30a:	4b03      	ldr	r3, [pc, #12]	@ (1004d318 <LL_PWR_SetNoPullB+0x2c>)
1004d30c:	400a      	ands	r2, r1
1004d30e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004d310:	46c0      	nop			@ (mov r8, r8)
1004d312:	46bd      	mov	sp, r7
1004d314:	b002      	add	sp, #8
1004d316:	bd80      	pop	{r7, pc}
1004d318:	48500000 	.word	0x48500000

1004d31c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
1004d31c:	b580      	push	{r7, lr}
1004d31e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
1004d320:	4b04      	ldr	r3, [pc, #16]	@ (1004d334 <LL_RCC_HSE_Enable+0x18>)
1004d322:	681a      	ldr	r2, [r3, #0]
1004d324:	4b03      	ldr	r3, [pc, #12]	@ (1004d334 <LL_RCC_HSE_Enable+0x18>)
1004d326:	2180      	movs	r1, #128	@ 0x80
1004d328:	0249      	lsls	r1, r1, #9
1004d32a:	430a      	orrs	r2, r1
1004d32c:	601a      	str	r2, [r3, #0]
}
1004d32e:	46c0      	nop			@ (mov r8, r8)
1004d330:	46bd      	mov	sp, r7
1004d332:	bd80      	pop	{r7, pc}
1004d334:	48400000 	.word	0x48400000

1004d338 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
1004d338:	b580      	push	{r7, lr}
1004d33a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
1004d33c:	4b04      	ldr	r3, [pc, #16]	@ (1004d350 <LL_RCC_HSE_Disable+0x18>)
1004d33e:	681a      	ldr	r2, [r3, #0]
1004d340:	4b03      	ldr	r3, [pc, #12]	@ (1004d350 <LL_RCC_HSE_Disable+0x18>)
1004d342:	4904      	ldr	r1, [pc, #16]	@ (1004d354 <LL_RCC_HSE_Disable+0x1c>)
1004d344:	400a      	ands	r2, r1
1004d346:	601a      	str	r2, [r3, #0]
}
1004d348:	46c0      	nop			@ (mov r8, r8)
1004d34a:	46bd      	mov	sp, r7
1004d34c:	bd80      	pop	{r7, pc}
1004d34e:	46c0      	nop			@ (mov r8, r8)
1004d350:	48400000 	.word	0x48400000
1004d354:	fffeffff 	.word	0xfffeffff

1004d358 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
1004d358:	b580      	push	{r7, lr}
1004d35a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
1004d35c:	4b07      	ldr	r3, [pc, #28]	@ (1004d37c <LL_RCC_HSE_IsReady+0x24>)
1004d35e:	681a      	ldr	r2, [r3, #0]
1004d360:	2380      	movs	r3, #128	@ 0x80
1004d362:	029b      	lsls	r3, r3, #10
1004d364:	401a      	ands	r2, r3
1004d366:	2380      	movs	r3, #128	@ 0x80
1004d368:	029b      	lsls	r3, r3, #10
1004d36a:	429a      	cmp	r2, r3
1004d36c:	d101      	bne.n	1004d372 <LL_RCC_HSE_IsReady+0x1a>
1004d36e:	2301      	movs	r3, #1
1004d370:	e000      	b.n	1004d374 <LL_RCC_HSE_IsReady+0x1c>
1004d372:	2300      	movs	r3, #0
}
1004d374:	0018      	movs	r0, r3
1004d376:	46bd      	mov	sp, r7
1004d378:	bd80      	pop	{r7, pc}
1004d37a:	46c0      	nop			@ (mov r8, r8)
1004d37c:	48400000 	.word	0x48400000

1004d380 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll RFSWHSECR        SWXOTUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
1004d380:	b580      	push	{r7, lr}
1004d382:	b082      	sub	sp, #8
1004d384:	af00      	add	r7, sp, #0
1004d386:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNE, Value << RCC_RFSWHSECR_SWXOTUNE_Pos);
1004d388:	4a0b      	ldr	r2, [pc, #44]	@ (1004d3b8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004d38a:	2398      	movs	r3, #152	@ 0x98
1004d38c:	58d3      	ldr	r3, [r2, r3]
1004d38e:	4a0b      	ldr	r2, [pc, #44]	@ (1004d3bc <LL_RCC_HSE_SetCapacitorTuning+0x3c>)
1004d390:	401a      	ands	r2, r3
1004d392:	687b      	ldr	r3, [r7, #4]
1004d394:	021b      	lsls	r3, r3, #8
1004d396:	4908      	ldr	r1, [pc, #32]	@ (1004d3b8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004d398:	4313      	orrs	r3, r2
1004d39a:	2298      	movs	r2, #152	@ 0x98
1004d39c:	508b      	str	r3, [r1, r2]
  SET_BIT(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNEEN);
1004d39e:	4a06      	ldr	r2, [pc, #24]	@ (1004d3b8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004d3a0:	2398      	movs	r3, #152	@ 0x98
1004d3a2:	58d3      	ldr	r3, [r2, r3]
1004d3a4:	4904      	ldr	r1, [pc, #16]	@ (1004d3b8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004d3a6:	2280      	movs	r2, #128	@ 0x80
1004d3a8:	4313      	orrs	r3, r2
1004d3aa:	2298      	movs	r2, #152	@ 0x98
1004d3ac:	508b      	str	r3, [r1, r2]
}
1004d3ae:	46c0      	nop			@ (mov r8, r8)
1004d3b0:	46bd      	mov	sp, r7
1004d3b2:	b002      	add	sp, #8
1004d3b4:	bd80      	pop	{r7, pc}
1004d3b6:	46c0      	nop			@ (mov r8, r8)
1004d3b8:	48400000 	.word	0x48400000
1004d3bc:	ffffc0ff 	.word	0xffffc0ff

1004d3c0 <LL_RCC_HSE_SetCurrentControl>:
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_5
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_6
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_7
  */
__STATIC_INLINE void LL_RCC_HSE_SetCurrentControl(uint32_t CurrentMax)
{
1004d3c0:	b580      	push	{r7, lr}
1004d3c2:	b082      	sub	sp, #8
1004d3c4:	af00      	add	r7, sp, #0
1004d3c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_GMC, CurrentMax);
1004d3c8:	4a07      	ldr	r2, [pc, #28]	@ (1004d3e8 <LL_RCC_HSE_SetCurrentControl+0x28>)
1004d3ca:	2398      	movs	r3, #152	@ 0x98
1004d3cc:	58d3      	ldr	r3, [r2, r3]
1004d3ce:	2270      	movs	r2, #112	@ 0x70
1004d3d0:	4393      	bics	r3, r2
1004d3d2:	001a      	movs	r2, r3
1004d3d4:	4904      	ldr	r1, [pc, #16]	@ (1004d3e8 <LL_RCC_HSE_SetCurrentControl+0x28>)
1004d3d6:	687b      	ldr	r3, [r7, #4]
1004d3d8:	4313      	orrs	r3, r2
1004d3da:	2298      	movs	r2, #152	@ 0x98
1004d3dc:	508b      	str	r3, [r1, r2]
}
1004d3de:	46c0      	nop			@ (mov r8, r8)
1004d3e0:	46bd      	mov	sp, r7
1004d3e2:	b002      	add	sp, #8
1004d3e4:	bd80      	pop	{r7, pc}
1004d3e6:	46c0      	nop			@ (mov r8, r8)
1004d3e8:	48400000 	.word	0x48400000

1004d3ec <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
1004d3ec:	b580      	push	{r7, lr}
1004d3ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004d3f0:	4b07      	ldr	r3, [pc, #28]	@ (1004d410 <LL_RCC_HSI_Enable+0x24>)
1004d3f2:	689a      	ldr	r2, [r3, #8]
1004d3f4:	4b06      	ldr	r3, [pc, #24]	@ (1004d410 <LL_RCC_HSI_Enable+0x24>)
1004d3f6:	2104      	movs	r1, #4
1004d3f8:	438a      	bics	r2, r1
1004d3fa:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004d3fc:	4b04      	ldr	r3, [pc, #16]	@ (1004d410 <LL_RCC_HSI_Enable+0x24>)
1004d3fe:	689a      	ldr	r2, [r3, #8]
1004d400:	4b03      	ldr	r3, [pc, #12]	@ (1004d410 <LL_RCC_HSI_Enable+0x24>)
1004d402:	2102      	movs	r1, #2
1004d404:	438a      	bics	r2, r1
1004d406:	609a      	str	r2, [r3, #8]
}
1004d408:	46c0      	nop			@ (mov r8, r8)
1004d40a:	46bd      	mov	sp, r7
1004d40c:	bd80      	pop	{r7, pc}
1004d40e:	46c0      	nop			@ (mov r8, r8)
1004d410:	48400000 	.word	0x48400000

1004d414 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
1004d414:	b580      	push	{r7, lr}
1004d416:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004d418:	4b07      	ldr	r3, [pc, #28]	@ (1004d438 <LL_RCC_HSI_Disable+0x24>)
1004d41a:	689a      	ldr	r2, [r3, #8]
1004d41c:	4b06      	ldr	r3, [pc, #24]	@ (1004d438 <LL_RCC_HSI_Disable+0x24>)
1004d41e:	2102      	movs	r1, #2
1004d420:	430a      	orrs	r2, r1
1004d422:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004d424:	4b04      	ldr	r3, [pc, #16]	@ (1004d438 <LL_RCC_HSI_Disable+0x24>)
1004d426:	689a      	ldr	r2, [r3, #8]
1004d428:	4b03      	ldr	r3, [pc, #12]	@ (1004d438 <LL_RCC_HSI_Disable+0x24>)
1004d42a:	2104      	movs	r1, #4
1004d42c:	430a      	orrs	r2, r1
1004d42e:	609a      	str	r2, [r3, #8]
}
1004d430:	46c0      	nop			@ (mov r8, r8)
1004d432:	46bd      	mov	sp, r7
1004d434:	bd80      	pop	{r7, pc}
1004d436:	46c0      	nop			@ (mov r8, r8)
1004d438:	48400000 	.word	0x48400000

1004d43c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
1004d43c:	b580      	push	{r7, lr}
1004d43e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
1004d440:	4b07      	ldr	r3, [pc, #28]	@ (1004d460 <LL_RCC_HSI_IsReady+0x24>)
1004d442:	681a      	ldr	r2, [r3, #0]
1004d444:	2380      	movs	r3, #128	@ 0x80
1004d446:	00db      	lsls	r3, r3, #3
1004d448:	401a      	ands	r2, r3
1004d44a:	2380      	movs	r3, #128	@ 0x80
1004d44c:	00db      	lsls	r3, r3, #3
1004d44e:	429a      	cmp	r2, r3
1004d450:	d101      	bne.n	1004d456 <LL_RCC_HSI_IsReady+0x1a>
1004d452:	2301      	movs	r3, #1
1004d454:	e000      	b.n	1004d458 <LL_RCC_HSI_IsReady+0x1c>
1004d456:	2300      	movs	r3, #0
}
1004d458:	0018      	movs	r0, r3
1004d45a:	46bd      	mov	sp, r7
1004d45c:	bd80      	pop	{r7, pc}
1004d45e:	46c0      	nop			@ (mov r8, r8)
1004d460:	48400000 	.word	0x48400000

1004d464 <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
1004d464:	b580      	push	{r7, lr}
1004d466:	b082      	sub	sp, #8
1004d468:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
1004d46a:	46c0      	nop			@ (mov r8, r8)
1004d46c:	4b0f      	ldr	r3, [pc, #60]	@ (1004d4ac <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004d46e:	681a      	ldr	r2, [r3, #0]
1004d470:	2380      	movs	r3, #128	@ 0x80
1004d472:	029b      	lsls	r3, r3, #10
1004d474:	4013      	ands	r3, r2
1004d476:	d0f9      	beq.n	1004d46c <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004d478:	4b0c      	ldr	r3, [pc, #48]	@ (1004d4ac <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004d47a:	689a      	ldr	r2, [r3, #8]
1004d47c:	4b0b      	ldr	r3, [pc, #44]	@ (1004d4ac <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004d47e:	2102      	movs	r1, #2
1004d480:	430a      	orrs	r2, r1
1004d482:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
1004d484:	2300      	movs	r3, #0
1004d486:	607b      	str	r3, [r7, #4]
1004d488:	e003      	b.n	1004d492 <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
1004d48a:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
1004d48c:	687b      	ldr	r3, [r7, #4]
1004d48e:	3301      	adds	r3, #1
1004d490:	607b      	str	r3, [r7, #4]
1004d492:	687b      	ldr	r3, [r7, #4]
1004d494:	2b05      	cmp	r3, #5
1004d496:	ddf8      	ble.n	1004d48a <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004d498:	4b04      	ldr	r3, [pc, #16]	@ (1004d4ac <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004d49a:	689a      	ldr	r2, [r3, #8]
1004d49c:	4b03      	ldr	r3, [pc, #12]	@ (1004d4ac <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004d49e:	2104      	movs	r1, #4
1004d4a0:	430a      	orrs	r2, r1
1004d4a2:	609a      	str	r2, [r3, #8]
}
1004d4a4:	46c0      	nop			@ (mov r8, r8)
1004d4a6:	46bd      	mov	sp, r7
1004d4a8:	b002      	add	sp, #8
1004d4aa:	bd80      	pop	{r7, pc}
1004d4ac:	48400000 	.word	0x48400000

1004d4b0 <LL_RCC_LSCO_SetSource>:
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSCO_SetSource(uint32_t Source)
{
1004d4b0:	b580      	push	{r7, lr}
1004d4b2:	b082      	sub	sp, #8
1004d4b4:	af00      	add	r7, sp, #0
1004d4b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
1004d4b8:	4b06      	ldr	r3, [pc, #24]	@ (1004d4d4 <LL_RCC_LSCO_SetSource+0x24>)
1004d4ba:	689b      	ldr	r3, [r3, #8]
1004d4bc:	4a06      	ldr	r2, [pc, #24]	@ (1004d4d8 <LL_RCC_LSCO_SetSource+0x28>)
1004d4be:	4013      	ands	r3, r2
1004d4c0:	0019      	movs	r1, r3
1004d4c2:	4b04      	ldr	r3, [pc, #16]	@ (1004d4d4 <LL_RCC_LSCO_SetSource+0x24>)
1004d4c4:	687a      	ldr	r2, [r7, #4]
1004d4c6:	430a      	orrs	r2, r1
1004d4c8:	609a      	str	r2, [r3, #8]
}
1004d4ca:	46c0      	nop			@ (mov r8, r8)
1004d4cc:	46bd      	mov	sp, r7
1004d4ce:	b002      	add	sp, #8
1004d4d0:	bd80      	pop	{r7, pc}
1004d4d2:	46c0      	nop			@ (mov r8, r8)
1004d4d4:	48400000 	.word	0x48400000
1004d4d8:	fffe7fff 	.word	0xfffe7fff

1004d4dc <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
1004d4dc:	b580      	push	{r7, lr}
1004d4de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
1004d4e0:	4b04      	ldr	r3, [pc, #16]	@ (1004d4f4 <LL_RCC_LSE_Enable+0x18>)
1004d4e2:	681a      	ldr	r2, [r3, #0]
1004d4e4:	4b03      	ldr	r3, [pc, #12]	@ (1004d4f4 <LL_RCC_LSE_Enable+0x18>)
1004d4e6:	2110      	movs	r1, #16
1004d4e8:	430a      	orrs	r2, r1
1004d4ea:	601a      	str	r2, [r3, #0]
}
1004d4ec:	46c0      	nop			@ (mov r8, r8)
1004d4ee:	46bd      	mov	sp, r7
1004d4f0:	bd80      	pop	{r7, pc}
1004d4f2:	46c0      	nop			@ (mov r8, r8)
1004d4f4:	48400000 	.word	0x48400000

1004d4f8 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
1004d4f8:	b580      	push	{r7, lr}
1004d4fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
1004d4fc:	4b04      	ldr	r3, [pc, #16]	@ (1004d510 <LL_RCC_LSE_Disable+0x18>)
1004d4fe:	681a      	ldr	r2, [r3, #0]
1004d500:	4b03      	ldr	r3, [pc, #12]	@ (1004d510 <LL_RCC_LSE_Disable+0x18>)
1004d502:	2110      	movs	r1, #16
1004d504:	438a      	bics	r2, r1
1004d506:	601a      	str	r2, [r3, #0]
}
1004d508:	46c0      	nop			@ (mov r8, r8)
1004d50a:	46bd      	mov	sp, r7
1004d50c:	bd80      	pop	{r7, pc}
1004d50e:	46c0      	nop			@ (mov r8, r8)
1004d510:	48400000 	.word	0x48400000

1004d514 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
1004d514:	b580      	push	{r7, lr}
1004d516:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
1004d518:	4b05      	ldr	r3, [pc, #20]	@ (1004d530 <LL_RCC_LSE_IsReady+0x1c>)
1004d51a:	681b      	ldr	r3, [r3, #0]
1004d51c:	2220      	movs	r2, #32
1004d51e:	4013      	ands	r3, r2
1004d520:	2b20      	cmp	r3, #32
1004d522:	d101      	bne.n	1004d528 <LL_RCC_LSE_IsReady+0x14>
1004d524:	2301      	movs	r3, #1
1004d526:	e000      	b.n	1004d52a <LL_RCC_LSE_IsReady+0x16>
1004d528:	2300      	movs	r3, #0
}
1004d52a:	0018      	movs	r0, r3
1004d52c:	46bd      	mov	sp, r7
1004d52e:	bd80      	pop	{r7, pc}
1004d530:	48400000 	.word	0x48400000

1004d534 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
1004d534:	b580      	push	{r7, lr}
1004d536:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEBYP);
1004d538:	4b04      	ldr	r3, [pc, #16]	@ (1004d54c <LL_RCC_LSE_EnableBypass+0x18>)
1004d53a:	681a      	ldr	r2, [r3, #0]
1004d53c:	4b03      	ldr	r3, [pc, #12]	@ (1004d54c <LL_RCC_LSE_EnableBypass+0x18>)
1004d53e:	2140      	movs	r1, #64	@ 0x40
1004d540:	430a      	orrs	r2, r1
1004d542:	601a      	str	r2, [r3, #0]
}
1004d544:	46c0      	nop			@ (mov r8, r8)
1004d546:	46bd      	mov	sp, r7
1004d548:	bd80      	pop	{r7, pc}
1004d54a:	46c0      	nop			@ (mov r8, r8)
1004d54c:	48400000 	.word	0x48400000

1004d550 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
1004d550:	b580      	push	{r7, lr}
1004d552:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEBYP);
1004d554:	4b04      	ldr	r3, [pc, #16]	@ (1004d568 <LL_RCC_LSE_DisableBypass+0x18>)
1004d556:	681a      	ldr	r2, [r3, #0]
1004d558:	4b03      	ldr	r3, [pc, #12]	@ (1004d568 <LL_RCC_LSE_DisableBypass+0x18>)
1004d55a:	2140      	movs	r1, #64	@ 0x40
1004d55c:	438a      	bics	r2, r1
1004d55e:	601a      	str	r2, [r3, #0]
}
1004d560:	46c0      	nop			@ (mov r8, r8)
1004d562:	46bd      	mov	sp, r7
1004d564:	bd80      	pop	{r7, pc}
1004d566:	46c0      	nop			@ (mov r8, r8)
1004d568:	48400000 	.word	0x48400000

1004d56c <LL_RCC_LSE_IsBypassEnabled>:
  * @brief  Check if LSE bypass configuration is enabled.
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_IsBypassEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsBypassEnabled(void)
{
1004d56c:	b580      	push	{r7, lr}
1004d56e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEBYP) == (RCC_CR_LSEBYP)) ? 1UL : 0UL);
1004d570:	4b05      	ldr	r3, [pc, #20]	@ (1004d588 <LL_RCC_LSE_IsBypassEnabled+0x1c>)
1004d572:	681b      	ldr	r3, [r3, #0]
1004d574:	2240      	movs	r2, #64	@ 0x40
1004d576:	4013      	ands	r3, r2
1004d578:	2b40      	cmp	r3, #64	@ 0x40
1004d57a:	d101      	bne.n	1004d580 <LL_RCC_LSE_IsBypassEnabled+0x14>
1004d57c:	2301      	movs	r3, #1
1004d57e:	e000      	b.n	1004d582 <LL_RCC_LSE_IsBypassEnabled+0x16>
1004d580:	2300      	movs	r3, #0
}
1004d582:	0018      	movs	r0, r3
1004d584:	46bd      	mov	sp, r7
1004d586:	bd80      	pop	{r7, pc}
1004d588:	48400000 	.word	0x48400000

1004d58c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
1004d58c:	b580      	push	{r7, lr}
1004d58e:	b082      	sub	sp, #8
1004d590:	af00      	add	r7, sp, #0
1004d592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSEDRV, LSEDrive);
1004d594:	4b06      	ldr	r3, [pc, #24]	@ (1004d5b0 <LL_RCC_LSE_SetDriveCapability+0x24>)
1004d596:	68db      	ldr	r3, [r3, #12]
1004d598:	2260      	movs	r2, #96	@ 0x60
1004d59a:	4393      	bics	r3, r2
1004d59c:	0019      	movs	r1, r3
1004d59e:	4b04      	ldr	r3, [pc, #16]	@ (1004d5b0 <LL_RCC_LSE_SetDriveCapability+0x24>)
1004d5a0:	687a      	ldr	r2, [r7, #4]
1004d5a2:	430a      	orrs	r2, r1
1004d5a4:	60da      	str	r2, [r3, #12]
}
1004d5a6:	46c0      	nop			@ (mov r8, r8)
1004d5a8:	46bd      	mov	sp, r7
1004d5aa:	b002      	add	sp, #8
1004d5ac:	bd80      	pop	{r7, pc}
1004d5ae:	46c0      	nop			@ (mov r8, r8)
1004d5b0:	48400000 	.word	0x48400000

1004d5b4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
1004d5b4:	b580      	push	{r7, lr}
1004d5b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
1004d5b8:	4b04      	ldr	r3, [pc, #16]	@ (1004d5cc <LL_RCC_LSI_Enable+0x18>)
1004d5ba:	681a      	ldr	r2, [r3, #0]
1004d5bc:	4b03      	ldr	r3, [pc, #12]	@ (1004d5cc <LL_RCC_LSI_Enable+0x18>)
1004d5be:	2104      	movs	r1, #4
1004d5c0:	430a      	orrs	r2, r1
1004d5c2:	601a      	str	r2, [r3, #0]
}
1004d5c4:	46c0      	nop			@ (mov r8, r8)
1004d5c6:	46bd      	mov	sp, r7
1004d5c8:	bd80      	pop	{r7, pc}
1004d5ca:	46c0      	nop			@ (mov r8, r8)
1004d5cc:	48400000 	.word	0x48400000

1004d5d0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
1004d5d0:	b580      	push	{r7, lr}
1004d5d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
1004d5d4:	4b04      	ldr	r3, [pc, #16]	@ (1004d5e8 <LL_RCC_LSI_Disable+0x18>)
1004d5d6:	681a      	ldr	r2, [r3, #0]
1004d5d8:	4b03      	ldr	r3, [pc, #12]	@ (1004d5e8 <LL_RCC_LSI_Disable+0x18>)
1004d5da:	2104      	movs	r1, #4
1004d5dc:	438a      	bics	r2, r1
1004d5de:	601a      	str	r2, [r3, #0]
}
1004d5e0:	46c0      	nop			@ (mov r8, r8)
1004d5e2:	46bd      	mov	sp, r7
1004d5e4:	bd80      	pop	{r7, pc}
1004d5e6:	46c0      	nop			@ (mov r8, r8)
1004d5e8:	48400000 	.word	0x48400000

1004d5ec <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
1004d5ec:	b580      	push	{r7, lr}
1004d5ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
1004d5f0:	4b05      	ldr	r3, [pc, #20]	@ (1004d608 <LL_RCC_LSI_IsReady+0x1c>)
1004d5f2:	681b      	ldr	r3, [r3, #0]
1004d5f4:	2208      	movs	r2, #8
1004d5f6:	4013      	ands	r3, r2
1004d5f8:	2b08      	cmp	r3, #8
1004d5fa:	d101      	bne.n	1004d600 <LL_RCC_LSI_IsReady+0x14>
1004d5fc:	2301      	movs	r3, #1
1004d5fe:	e000      	b.n	1004d602 <LL_RCC_LSI_IsReady+0x16>
1004d600:	2300      	movs	r3, #0
}
1004d602:	0018      	movs	r0, r3
1004d604:	46bd      	mov	sp, r7
1004d606:	bd80      	pop	{r7, pc}
1004d608:	48400000 	.word	0x48400000

1004d60c <LL_RCC_RC64MPLL_Enable>:
  * @brief  Enable RC64MPLL
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Enable(void)
{
1004d60c:	b580      	push	{r7, lr}
1004d60e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
1004d610:	4b04      	ldr	r3, [pc, #16]	@ (1004d624 <LL_RCC_RC64MPLL_Enable+0x18>)
1004d612:	681a      	ldr	r2, [r3, #0]
1004d614:	4b03      	ldr	r3, [pc, #12]	@ (1004d624 <LL_RCC_RC64MPLL_Enable+0x18>)
1004d616:	2180      	movs	r1, #128	@ 0x80
1004d618:	0189      	lsls	r1, r1, #6
1004d61a:	430a      	orrs	r2, r1
1004d61c:	601a      	str	r2, [r3, #0]
}
1004d61e:	46c0      	nop			@ (mov r8, r8)
1004d620:	46bd      	mov	sp, r7
1004d622:	bd80      	pop	{r7, pc}
1004d624:	48400000 	.word	0x48400000

1004d628 <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
1004d628:	b580      	push	{r7, lr}
1004d62a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
1004d62c:	4b04      	ldr	r3, [pc, #16]	@ (1004d640 <LL_RCC_RC64MPLL_Disable+0x18>)
1004d62e:	681a      	ldr	r2, [r3, #0]
1004d630:	4b03      	ldr	r3, [pc, #12]	@ (1004d640 <LL_RCC_RC64MPLL_Disable+0x18>)
1004d632:	4904      	ldr	r1, [pc, #16]	@ (1004d644 <LL_RCC_RC64MPLL_Disable+0x1c>)
1004d634:	400a      	ands	r2, r1
1004d636:	601a      	str	r2, [r3, #0]
}
1004d638:	46c0      	nop			@ (mov r8, r8)
1004d63a:	46bd      	mov	sp, r7
1004d63c:	bd80      	pop	{r7, pc}
1004d63e:	46c0      	nop			@ (mov r8, r8)
1004d640:	48400000 	.word	0x48400000
1004d644:	ffffdfff 	.word	0xffffdfff

1004d648 <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
1004d648:	b580      	push	{r7, lr}
1004d64a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
1004d64c:	4b07      	ldr	r3, [pc, #28]	@ (1004d66c <LL_RCC_RC64MPLL_IsReady+0x24>)
1004d64e:	681a      	ldr	r2, [r3, #0]
1004d650:	2380      	movs	r3, #128	@ 0x80
1004d652:	01db      	lsls	r3, r3, #7
1004d654:	401a      	ands	r2, r3
1004d656:	2380      	movs	r3, #128	@ 0x80
1004d658:	01db      	lsls	r3, r3, #7
1004d65a:	429a      	cmp	r2, r3
1004d65c:	d101      	bne.n	1004d662 <LL_RCC_RC64MPLL_IsReady+0x1a>
1004d65e:	2301      	movs	r3, #1
1004d660:	e000      	b.n	1004d664 <LL_RCC_RC64MPLL_IsReady+0x1c>
1004d662:	2300      	movs	r3, #0
}
1004d664:	0018      	movs	r0, r3
1004d666:	46bd      	mov	sp, r7
1004d668:	bd80      	pop	{r7, pc}
1004d66a:	46c0      	nop			@ (mov r8, r8)
1004d66c:	48400000 	.word	0x48400000

1004d670 <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
1004d670:	b580      	push	{r7, lr}
1004d672:	b082      	sub	sp, #8
1004d674:	af00      	add	r7, sp, #0
1004d676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
1004d678:	4b06      	ldr	r3, [pc, #24]	@ (1004d694 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
1004d67a:	689b      	ldr	r3, [r3, #8]
1004d67c:	22e0      	movs	r2, #224	@ 0xe0
1004d67e:	4393      	bics	r3, r2
1004d680:	0019      	movs	r1, r3
1004d682:	4b04      	ldr	r3, [pc, #16]	@ (1004d694 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
1004d684:	687a      	ldr	r2, [r7, #4]
1004d686:	430a      	orrs	r2, r1
1004d688:	609a      	str	r2, [r3, #8]
}
1004d68a:	46c0      	nop			@ (mov r8, r8)
1004d68c:	46bd      	mov	sp, r7
1004d68e:	b002      	add	sp, #8
1004d690:	bd80      	pop	{r7, pc}
1004d692:	46c0      	nop			@ (mov r8, r8)
1004d694:	48400000 	.word	0x48400000

1004d698 <HAL_RCC_OscConfig>:
  * @param  RCC_OscInitStruct  pointer to a @ref RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
1004d698:	b580      	push	{r7, lr}
1004d69a:	b084      	sub	sp, #16
1004d69c:	af00      	add	r7, sp, #0
1004d69e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
1004d6a0:	687b      	ldr	r3, [r7, #4]
1004d6a2:	2b00      	cmp	r3, #0
1004d6a4:	d101      	bne.n	1004d6aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
1004d6a6:	2301      	movs	r3, #1
1004d6a8:	e13c      	b.n	1004d924 <HAL_RCC_OscConfig+0x28c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSI Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
1004d6aa:	687b      	ldr	r3, [r7, #4]
1004d6ac:	681b      	ldr	r3, [r3, #0]
1004d6ae:	2210      	movs	r2, #16
1004d6b0:	4013      	ands	r3, r2
1004d6b2:	d033      	beq.n	1004d71c <HAL_RCC_OscConfig+0x84>
  {
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
1004d6b4:	687b      	ldr	r3, [r7, #4]
1004d6b6:	689b      	ldr	r3, [r3, #8]
1004d6b8:	2b00      	cmp	r3, #0
1004d6ba:	d102      	bne.n	1004d6c2 <HAL_RCC_OscConfig+0x2a>
1004d6bc:	f7ff fe96 	bl	1004d3ec <LL_RCC_HSI_Enable>
1004d6c0:	e001      	b.n	1004d6c6 <HAL_RCC_OscConfig+0x2e>
1004d6c2:	f7ff fea7 	bl	1004d414 <LL_RCC_HSI_Disable>

    if(RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
1004d6c6:	687b      	ldr	r3, [r7, #4]
1004d6c8:	689b      	ldr	r3, [r3, #8]
1004d6ca:	2b04      	cmp	r3, #4
1004d6cc:	d113      	bne.n	1004d6f6 <HAL_RCC_OscConfig+0x5e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004d6ce:	f7fa febf 	bl	10048450 <HAL_GetTick>
1004d6d2:	0003      	movs	r3, r0
1004d6d4:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is disabled */
      while (LL_RCC_HSI_IsReady() == 1U)
1004d6d6:	e008      	b.n	1004d6ea <HAL_RCC_OscConfig+0x52>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004d6d8:	f7fa feba 	bl	10048450 <HAL_GetTick>
1004d6dc:	0002      	movs	r2, r0
1004d6de:	68fb      	ldr	r3, [r7, #12]
1004d6e0:	1ad3      	subs	r3, r2, r3
1004d6e2:	2b64      	cmp	r3, #100	@ 0x64
1004d6e4:	d901      	bls.n	1004d6ea <HAL_RCC_OscConfig+0x52>
        {
          return HAL_TIMEOUT;
1004d6e6:	2303      	movs	r3, #3
1004d6e8:	e11c      	b.n	1004d924 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() == 1U)
1004d6ea:	f7ff fea7 	bl	1004d43c <LL_RCC_HSI_IsReady>
1004d6ee:	0003      	movs	r3, r0
1004d6f0:	2b01      	cmp	r3, #1
1004d6f2:	d0f1      	beq.n	1004d6d8 <HAL_RCC_OscConfig+0x40>
1004d6f4:	e012      	b.n	1004d71c <HAL_RCC_OscConfig+0x84>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004d6f6:	f7fa feab 	bl	10048450 <HAL_GetTick>
1004d6fa:	0003      	movs	r3, r0
1004d6fc:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is enabled */
      while (LL_RCC_HSI_IsReady() != 1U)
1004d6fe:	e008      	b.n	1004d712 <HAL_RCC_OscConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004d700:	f7fa fea6 	bl	10048450 <HAL_GetTick>
1004d704:	0002      	movs	r2, r0
1004d706:	68fb      	ldr	r3, [r7, #12]
1004d708:	1ad3      	subs	r3, r2, r3
1004d70a:	2b64      	cmp	r3, #100	@ 0x64
1004d70c:	d901      	bls.n	1004d712 <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
1004d70e:	2303      	movs	r3, #3
1004d710:	e108      	b.n	1004d924 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() != 1U)
1004d712:	f7ff fe93 	bl	1004d43c <LL_RCC_HSI_IsReady>
1004d716:	0003      	movs	r3, r0
1004d718:	2b01      	cmp	r3, #1
1004d71a:	d1f1      	bne.n	1004d700 <HAL_RCC_OscConfig+0x68>
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
1004d71c:	687b      	ldr	r3, [r7, #4]
1004d71e:	681b      	ldr	r3, [r3, #0]
1004d720:	2201      	movs	r2, #1
1004d722:	4013      	ands	r3, r2
1004d724:	d039      	beq.n	1004d79a <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* Set HSE Capacitor Tuning */
    LL_RCC_HSE_SetCapacitorTuning(CFG_HW_RCC_HSE_CAPACITOR_TUNE);
1004d726:	2020      	movs	r0, #32
1004d728:	f7ff fe2a 	bl	1004d380 <LL_RCC_HSE_SetCapacitorTuning>

    /* Set HSE Current Control */
    LL_RCC_HSE_SetCurrentControl(LL_RCC_HSE_CURRENTMAX_3);
1004d72c:	2030      	movs	r0, #48	@ 0x30
1004d72e:	f7ff fe47 	bl	1004d3c0 <LL_RCC_HSE_SetCurrentControl>

    /* Set the new HSE configuration ---------------------------------------*/
    __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
1004d732:	687b      	ldr	r3, [r7, #4]
1004d734:	685a      	ldr	r2, [r3, #4]
1004d736:	2380      	movs	r3, #128	@ 0x80
1004d738:	025b      	lsls	r3, r3, #9
1004d73a:	429a      	cmp	r2, r3
1004d73c:	d102      	bne.n	1004d744 <HAL_RCC_OscConfig+0xac>
1004d73e:	f7ff fded 	bl	1004d31c <LL_RCC_HSE_Enable>
1004d742:	e001      	b.n	1004d748 <HAL_RCC_OscConfig+0xb0>
1004d744:	f7ff fdf8 	bl	1004d338 <LL_RCC_HSE_Disable>

    /* Check the HSE State */
    if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
1004d748:	687b      	ldr	r3, [r7, #4]
1004d74a:	685b      	ldr	r3, [r3, #4]
1004d74c:	2b00      	cmp	r3, #0
1004d74e:	d012      	beq.n	1004d776 <HAL_RCC_OscConfig+0xde>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004d750:	f7fa fe7e 	bl	10048450 <HAL_GetTick>
1004d754:	0003      	movs	r3, r0
1004d756:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is ready */
      while (LL_RCC_HSE_IsReady() == 0U)
1004d758:	e008      	b.n	1004d76c <HAL_RCC_OscConfig+0xd4>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004d75a:	f7fa fe79 	bl	10048450 <HAL_GetTick>
1004d75e:	0002      	movs	r2, r0
1004d760:	68fb      	ldr	r3, [r7, #12]
1004d762:	1ad3      	subs	r3, r2, r3
1004d764:	2b64      	cmp	r3, #100	@ 0x64
1004d766:	d901      	bls.n	1004d76c <HAL_RCC_OscConfig+0xd4>
        {
          return HAL_TIMEOUT;
1004d768:	2303      	movs	r3, #3
1004d76a:	e0db      	b.n	1004d924 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() == 0U)
1004d76c:	f7ff fdf4 	bl	1004d358 <LL_RCC_HSE_IsReady>
1004d770:	1e03      	subs	r3, r0, #0
1004d772:	d0f2      	beq.n	1004d75a <HAL_RCC_OscConfig+0xc2>
1004d774:	e011      	b.n	1004d79a <HAL_RCC_OscConfig+0x102>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004d776:	f7fa fe6b 	bl	10048450 <HAL_GetTick>
1004d77a:	0003      	movs	r3, r0
1004d77c:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is disabled */
      while (LL_RCC_HSE_IsReady() != 0U)
1004d77e:	e008      	b.n	1004d792 <HAL_RCC_OscConfig+0xfa>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004d780:	f7fa fe66 	bl	10048450 <HAL_GetTick>
1004d784:	0002      	movs	r2, r0
1004d786:	68fb      	ldr	r3, [r7, #12]
1004d788:	1ad3      	subs	r3, r2, r3
1004d78a:	2b64      	cmp	r3, #100	@ 0x64
1004d78c:	d901      	bls.n	1004d792 <HAL_RCC_OscConfig+0xfa>
        {
          return HAL_TIMEOUT;
1004d78e:	2303      	movs	r3, #3
1004d790:	e0c8      	b.n	1004d924 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() != 0U)
1004d792:	f7ff fde1 	bl	1004d358 <LL_RCC_HSE_IsReady>
1004d796:	1e03      	subs	r3, r0, #0
1004d798:	d1f2      	bne.n	1004d780 <HAL_RCC_OscConfig+0xe8>
      }
    }
  }

  /*--------------------------------- LSI Configuration -----------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
1004d79a:	687b      	ldr	r3, [r7, #4]
1004d79c:	681b      	ldr	r3, [r3, #0]
1004d79e:	2204      	movs	r2, #4
1004d7a0:	4013      	ands	r3, r2
1004d7a2:	d03a      	beq.n	1004d81a <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
1004d7a4:	687b      	ldr	r3, [r7, #4]
1004d7a6:	691b      	ldr	r3, [r3, #16]
1004d7a8:	2b00      	cmp	r3, #0
1004d7aa:	d022      	beq.n	1004d7f2 <HAL_RCC_OscConfig+0x15a>
    {
      /* Disable the LSI */
      __HAL_RCC_LSI_DISABLE();
1004d7ac:	f7ff ff10 	bl	1004d5d0 <LL_RCC_LSI_Disable>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U);
1004d7b0:	46c0      	nop			@ (mov r8, r8)
1004d7b2:	f7ff ff1b 	bl	1004d5ec <LL_RCC_LSI_IsReady>
1004d7b6:	1e03      	subs	r3, r0, #0
1004d7b8:	d1fb      	bne.n	1004d7b2 <HAL_RCC_OscConfig+0x11a>

      /* Disable the LSE */
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
1004d7ba:	f7ff fe9d 	bl	1004d4f8 <LL_RCC_LSE_Disable>

      /* Configure the Low Speed Clock to LSI */
      LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSI);
1004d7be:	2380      	movs	r3, #128	@ 0x80
1004d7c0:	025b      	lsls	r3, r3, #9
1004d7c2:	0018      	movs	r0, r3
1004d7c4:	f7ff fe74 	bl	1004d4b0 <LL_RCC_LSCO_SetSource>

      /*  Enable the Internal Low Speed oscillator (LSI)  */
      __HAL_RCC_LSI_ENABLE();
1004d7c8:	f7ff fef4 	bl	1004d5b4 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004d7cc:	f7fa fe40 	bl	10048450 <HAL_GetTick>
1004d7d0:	0003      	movs	r3, r0
1004d7d2:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
1004d7d4:	e008      	b.n	1004d7e8 <HAL_RCC_OscConfig+0x150>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1004d7d6:	f7fa fe3b 	bl	10048450 <HAL_GetTick>
1004d7da:	0002      	movs	r2, r0
1004d7dc:	68fb      	ldr	r3, [r7, #12]
1004d7de:	1ad3      	subs	r3, r2, r3
1004d7e0:	2b02      	cmp	r3, #2
1004d7e2:	d901      	bls.n	1004d7e8 <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
1004d7e4:	2303      	movs	r3, #3
1004d7e6:	e09d      	b.n	1004d924 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
1004d7e8:	f7ff ff00 	bl	1004d5ec <LL_RCC_LSI_IsReady>
1004d7ec:	1e03      	subs	r3, r0, #0
1004d7ee:	d0f2      	beq.n	1004d7d6 <HAL_RCC_OscConfig+0x13e>
1004d7f0:	e013      	b.n	1004d81a <HAL_RCC_OscConfig+0x182>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
1004d7f2:	f7ff feed 	bl	1004d5d0 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004d7f6:	f7fa fe2b 	bl	10048450 <HAL_GetTick>
1004d7fa:	0003      	movs	r3, r0
1004d7fc:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
1004d7fe:	e008      	b.n	1004d812 <HAL_RCC_OscConfig+0x17a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1004d800:	f7fa fe26 	bl	10048450 <HAL_GetTick>
1004d804:	0002      	movs	r2, r0
1004d806:	68fb      	ldr	r3, [r7, #12]
1004d808:	1ad3      	subs	r3, r2, r3
1004d80a:	2b02      	cmp	r3, #2
1004d80c:	d901      	bls.n	1004d812 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
1004d80e:	2303      	movs	r3, #3
1004d810:	e088      	b.n	1004d924 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
1004d812:	f7ff feeb 	bl	1004d5ec <LL_RCC_LSI_IsReady>
1004d816:	1e03      	subs	r3, r0, #0
1004d818:	d1f2      	bne.n	1004d800 <HAL_RCC_OscConfig+0x168>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
1004d81a:	687b      	ldr	r3, [r7, #4]
1004d81c:	681b      	ldr	r3, [r3, #0]
1004d81e:	2202      	movs	r2, #2
1004d820:	4013      	ands	r3, r2
1004d822:	d047      	beq.n	1004d8b4 <HAL_RCC_OscConfig+0x21c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Disable LSI */
    __HAL_RCC_LSI_DISABLE();
1004d824:	f7ff fed4 	bl	1004d5d0 <LL_RCC_LSI_Disable>

    /* Disable LSE */
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
1004d828:	f7ff fe66 	bl	1004d4f8 <LL_RCC_LSE_Disable>
    while (__HAL_RCC_GET_LSE_READYFLAG() != 0);
1004d82c:	46c0      	nop			@ (mov r8, r8)
1004d82e:	f7ff fe71 	bl	1004d514 <LL_RCC_LSE_IsReady>
1004d832:	1e03      	subs	r3, r0, #0
1004d834:	d1fb      	bne.n	1004d82e <HAL_RCC_OscConfig+0x196>

    /* Configure the PB12 and PB13 in NO PULL mode */
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 |
1004d836:	23c0      	movs	r3, #192	@ 0xc0
1004d838:	019b      	lsls	r3, r3, #6
1004d83a:	0018      	movs	r0, r3
1004d83c:	f7ff fd56 	bl	1004d2ec <LL_PWR_SetNoPullB>
                      LL_PWR_GPIO_BIT_13);

    /* Configure the Low Speed Clock to LSE */
    LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSE);
1004d840:	2380      	movs	r3, #128	@ 0x80
1004d842:	021b      	lsls	r3, r3, #8
1004d844:	0018      	movs	r0, r3
1004d846:	f7ff fe33 	bl	1004d4b0 <LL_RCC_LSCO_SetSource>

    /* Set LSE oscillator drive capability */
    __HAL_RCC_LSEDRIVE_CONFIG(LSE_DRIVE_LEVEL);
1004d84a:	2020      	movs	r0, #32
1004d84c:	f7ff fe9e 	bl	1004d58c <LL_RCC_LSE_SetDriveCapability>


    /* Set the new LSE state */
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
1004d850:	687b      	ldr	r3, [r7, #4]
1004d852:	68db      	ldr	r3, [r3, #12]
1004d854:	2b10      	cmp	r3, #16
1004d856:	d102      	bne.n	1004d85e <HAL_RCC_OscConfig+0x1c6>
1004d858:	f7ff fe40 	bl	1004d4dc <LL_RCC_LSE_Enable>
1004d85c:	e001      	b.n	1004d862 <HAL_RCC_OscConfig+0x1ca>
1004d85e:	f7ff fe4b 	bl	1004d4f8 <LL_RCC_LSE_Disable>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
1004d862:	687b      	ldr	r3, [r7, #4]
1004d864:	68db      	ldr	r3, [r3, #12]
1004d866:	2b00      	cmp	r3, #0
1004d868:	d012      	beq.n	1004d890 <HAL_RCC_OscConfig+0x1f8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004d86a:	f7fa fdf1 	bl	10048450 <HAL_GetTick>
1004d86e:	0003      	movs	r3, r0
1004d870:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
1004d872:	e008      	b.n	1004d886 <HAL_RCC_OscConfig+0x1ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004d874:	f7fa fdec 	bl	10048450 <HAL_GetTick>
1004d878:	0002      	movs	r2, r0
1004d87a:	68fb      	ldr	r3, [r7, #12]
1004d87c:	1ad3      	subs	r3, r2, r3
1004d87e:	2b64      	cmp	r3, #100	@ 0x64
1004d880:	d901      	bls.n	1004d886 <HAL_RCC_OscConfig+0x1ee>
        {
          return HAL_TIMEOUT;
1004d882:	2303      	movs	r3, #3
1004d884:	e04e      	b.n	1004d924 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
1004d886:	f7ff fe45 	bl	1004d514 <LL_RCC_LSE_IsReady>
1004d88a:	1e03      	subs	r3, r0, #0
1004d88c:	d0f2      	beq.n	1004d874 <HAL_RCC_OscConfig+0x1dc>
1004d88e:	e011      	b.n	1004d8b4 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004d890:	f7fa fdde 	bl	10048450 <HAL_GetTick>
1004d894:	0003      	movs	r3, r0
1004d896:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
1004d898:	e008      	b.n	1004d8ac <HAL_RCC_OscConfig+0x214>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004d89a:	f7fa fdd9 	bl	10048450 <HAL_GetTick>
1004d89e:	0002      	movs	r2, r0
1004d8a0:	68fb      	ldr	r3, [r7, #12]
1004d8a2:	1ad3      	subs	r3, r2, r3
1004d8a4:	2b64      	cmp	r3, #100	@ 0x64
1004d8a6:	d901      	bls.n	1004d8ac <HAL_RCC_OscConfig+0x214>
        {
          return HAL_TIMEOUT;
1004d8a8:	2303      	movs	r3, #3
1004d8aa:	e03b      	b.n	1004d924 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
1004d8ac:	f7ff fe32 	bl	1004d514 <LL_RCC_LSE_IsReady>
1004d8b0:	1e03      	subs	r3, r0, #0
1004d8b2:	d1f2      	bne.n	1004d89a <HAL_RCC_OscConfig+0x202>
      }
    }
  }

  /*------------------------------ LSE Bypass Configuration ------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE_BYPASS) == RCC_OSCILLATORTYPE_LSE_BYPASS)
1004d8b4:	687b      	ldr	r3, [r7, #4]
1004d8b6:	681b      	ldr	r3, [r3, #0]
1004d8b8:	2208      	movs	r2, #8
1004d8ba:	4013      	ands	r3, r2
1004d8bc:	d031      	beq.n	1004d922 <HAL_RCC_OscConfig+0x28a>

    /* Check the parameters */
    assert_param(IS_RCC_LSE_BYPASS(RCC_OscInitStruct->LSEBYPASSState));

    /* Set the new LSE Bypass configuration -----------------------------------------*/
    __HAL_RCC_LSE_BYPASS_CONFIG(RCC_OscInitStruct->LSEBYPASSState);
1004d8be:	687b      	ldr	r3, [r7, #4]
1004d8c0:	695b      	ldr	r3, [r3, #20]
1004d8c2:	2b40      	cmp	r3, #64	@ 0x40
1004d8c4:	d102      	bne.n	1004d8cc <HAL_RCC_OscConfig+0x234>
1004d8c6:	f7ff fe35 	bl	1004d534 <LL_RCC_LSE_EnableBypass>
1004d8ca:	e001      	b.n	1004d8d0 <HAL_RCC_OscConfig+0x238>
1004d8cc:	f7ff fe40 	bl	1004d550 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE Bypass State */
    if (RCC_OscInitStruct->LSEBYPASSState != RCC_LSE_OFF)
1004d8d0:	687b      	ldr	r3, [r7, #4]
1004d8d2:	695b      	ldr	r3, [r3, #20]
1004d8d4:	2b00      	cmp	r3, #0
1004d8d6:	d012      	beq.n	1004d8fe <HAL_RCC_OscConfig+0x266>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004d8d8:	f7fa fdba 	bl	10048450 <HAL_GetTick>
1004d8dc:	0003      	movs	r3, r0
1004d8de:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
1004d8e0:	e008      	b.n	1004d8f4 <HAL_RCC_OscConfig+0x25c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004d8e2:	f7fa fdb5 	bl	10048450 <HAL_GetTick>
1004d8e6:	0002      	movs	r2, r0
1004d8e8:	68fb      	ldr	r3, [r7, #12]
1004d8ea:	1ad3      	subs	r3, r2, r3
1004d8ec:	2b64      	cmp	r3, #100	@ 0x64
1004d8ee:	d901      	bls.n	1004d8f4 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
1004d8f0:	2303      	movs	r3, #3
1004d8f2:	e017      	b.n	1004d924 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
1004d8f4:	f7ff fe3a 	bl	1004d56c <LL_RCC_LSE_IsBypassEnabled>
1004d8f8:	1e03      	subs	r3, r0, #0
1004d8fa:	d0f2      	beq.n	1004d8e2 <HAL_RCC_OscConfig+0x24a>
1004d8fc:	e011      	b.n	1004d922 <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004d8fe:	f7fa fda7 	bl	10048450 <HAL_GetTick>
1004d902:	0003      	movs	r3, r0
1004d904:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
1004d906:	e008      	b.n	1004d91a <HAL_RCC_OscConfig+0x282>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004d908:	f7fa fda2 	bl	10048450 <HAL_GetTick>
1004d90c:	0002      	movs	r2, r0
1004d90e:	68fb      	ldr	r3, [r7, #12]
1004d910:	1ad3      	subs	r3, r2, r3
1004d912:	2b64      	cmp	r3, #100	@ 0x64
1004d914:	d901      	bls.n	1004d91a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
1004d916:	2303      	movs	r3, #3
1004d918:	e004      	b.n	1004d924 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
1004d91a:	f7ff fe27 	bl	1004d56c <LL_RCC_LSE_IsBypassEnabled>
1004d91e:	1e03      	subs	r3, r0, #0
1004d920:	d1f2      	bne.n	1004d908 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }

  return HAL_OK;
1004d922:	2300      	movs	r3, #0
}
1004d924:	0018      	movs	r0, r3
1004d926:	46bd      	mov	sp, r7
1004d928:	b004      	add	sp, #16
1004d92a:	bd80      	pop	{r7, pc}

1004d92c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
1004d92c:	b580      	push	{r7, lr}
1004d92e:	b084      	sub	sp, #16
1004d930:	af00      	add	r7, sp, #0
1004d932:	6078      	str	r0, [r7, #4]
1004d934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
1004d936:	687b      	ldr	r3, [r7, #4]
1004d938:	2b00      	cmp	r3, #0
1004d93a:	d101      	bne.n	1004d940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
1004d93c:	2301      	movs	r3, #1
1004d93e:	e098      	b.n	1004da72 <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
1004d940:	4b4e      	ldr	r3, [pc, #312]	@ (1004da7c <HAL_RCC_ClockConfig+0x150>)
1004d942:	685b      	ldr	r3, [r3, #4]
1004d944:	2230      	movs	r2, #48	@ 0x30
1004d946:	4393      	bics	r3, r2
1004d948:	0019      	movs	r1, r3
1004d94a:	4b4c      	ldr	r3, [pc, #304]	@ (1004da7c <HAL_RCC_ClockConfig+0x150>)
1004d94c:	683a      	ldr	r2, [r7, #0]
1004d94e:	430a      	orrs	r2, r1
1004d950:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
1004d952:	687b      	ldr	r3, [r7, #4]
1004d954:	681b      	ldr	r3, [r3, #0]
1004d956:	2b02      	cmp	r3, #2
1004d958:	d10e      	bne.n	1004d978 <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
1004d95a:	f7ff fd47 	bl	1004d3ec <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
1004d95e:	f7ff fd6d 	bl	1004d43c <LL_RCC_HSI_IsReady>
1004d962:	1e03      	subs	r3, r0, #0
1004d964:	d101      	bne.n	1004d96a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
1004d966:	2301      	movs	r3, #1
1004d968:	e083      	b.n	1004da72 <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
1004d96a:	f7ff fe5d 	bl	1004d628 <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004d96e:	687b      	ldr	r3, [r7, #4]
1004d970:	685b      	ldr	r3, [r3, #4]
1004d972:	0018      	movs	r0, r3
1004d974:	f7ff fe7c 	bl	1004d670 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
1004d978:	687b      	ldr	r3, [r7, #4]
1004d97a:	681b      	ldr	r3, [r3, #0]
1004d97c:	2b00      	cmp	r3, #0
1004d97e:	d124      	bne.n	1004d9ca <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
1004d980:	f7ff fd5c 	bl	1004d43c <LL_RCC_HSI_IsReady>
1004d984:	1e03      	subs	r3, r0, #0
1004d986:	d101      	bne.n	1004d98c <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
1004d988:	2301      	movs	r3, #1
1004d98a:	e072      	b.n	1004da72 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
1004d98c:	f7ff fce4 	bl	1004d358 <LL_RCC_HSE_IsReady>
1004d990:	1e03      	subs	r3, r0, #0
1004d992:	d101      	bne.n	1004d998 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
1004d994:	2301      	movs	r3, #1
1004d996:	e06c      	b.n	1004da72 <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
1004d998:	f7ff fe38 	bl	1004d60c <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1004d99c:	f7fa fd58 	bl	10048450 <HAL_GetTick>
1004d9a0:	0003      	movs	r3, r0
1004d9a2:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
1004d9a4:	e008      	b.n	1004d9b8 <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1004d9a6:	f7fa fd53 	bl	10048450 <HAL_GetTick>
1004d9aa:	0002      	movs	r2, r0
1004d9ac:	68fb      	ldr	r3, [r7, #12]
1004d9ae:	1ad3      	subs	r3, r2, r3
1004d9b0:	2b02      	cmp	r3, #2
1004d9b2:	d901      	bls.n	1004d9b8 <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
1004d9b4:	2303      	movs	r3, #3
1004d9b6:	e05c      	b.n	1004da72 <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
1004d9b8:	f7ff fe46 	bl	1004d648 <LL_RCC_RC64MPLL_IsReady>
1004d9bc:	1e03      	subs	r3, r0, #0
1004d9be:	d0f2      	beq.n	1004d9a6 <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004d9c0:	687b      	ldr	r3, [r7, #4]
1004d9c2:	685b      	ldr	r3, [r3, #4]
1004d9c4:	0018      	movs	r0, r3
1004d9c6:	f7ff fe53 	bl	1004d670 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
1004d9ca:	687b      	ldr	r3, [r7, #4]
1004d9cc:	681b      	ldr	r3, [r3, #0]
1004d9ce:	2b01      	cmp	r3, #1
1004d9d0:	d117      	bne.n	1004da02 <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
1004d9d2:	f7ff fd47 	bl	1004d464 <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
1004d9d6:	f7ff fd31 	bl	1004d43c <LL_RCC_HSI_IsReady>
1004d9da:	1e03      	subs	r3, r0, #0
1004d9dc:	d001      	beq.n	1004d9e2 <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
1004d9de:	2301      	movs	r3, #1
1004d9e0:	e047      	b.n	1004da72 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
1004d9e2:	f7ff fcb9 	bl	1004d358 <LL_RCC_HSE_IsReady>
1004d9e6:	1e03      	subs	r3, r0, #0
1004d9e8:	d101      	bne.n	1004d9ee <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
1004d9ea:	2301      	movs	r3, #1
1004d9ec:	e041      	b.n	1004da72 <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004d9ee:	4b24      	ldr	r3, [pc, #144]	@ (1004da80 <HAL_RCC_ClockConfig+0x154>)
1004d9f0:	689b      	ldr	r3, [r3, #8]
1004d9f2:	22e0      	movs	r2, #224	@ 0xe0
1004d9f4:	4393      	bics	r3, r2
1004d9f6:	0019      	movs	r1, r3
1004d9f8:	687b      	ldr	r3, [r7, #4]
1004d9fa:	685a      	ldr	r2, [r3, #4]
1004d9fc:	4b20      	ldr	r3, [pc, #128]	@ (1004da80 <HAL_RCC_ClockConfig+0x154>)
1004d9fe:	430a      	orrs	r2, r1
1004da00:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
1004da02:	4b1e      	ldr	r3, [pc, #120]	@ (1004da7c <HAL_RCC_ClockConfig+0x150>)
1004da04:	685b      	ldr	r3, [r3, #4]
1004da06:	2230      	movs	r2, #48	@ 0x30
1004da08:	4013      	ands	r3, r2
1004da0a:	683a      	ldr	r2, [r7, #0]
1004da0c:	429a      	cmp	r2, r3
1004da0e:	d01d      	beq.n	1004da4c <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
1004da10:	4b1a      	ldr	r3, [pc, #104]	@ (1004da7c <HAL_RCC_ClockConfig+0x150>)
1004da12:	685b      	ldr	r3, [r3, #4]
1004da14:	2230      	movs	r2, #48	@ 0x30
1004da16:	4393      	bics	r3, r2
1004da18:	0019      	movs	r1, r3
1004da1a:	4b18      	ldr	r3, [pc, #96]	@ (1004da7c <HAL_RCC_ClockConfig+0x150>)
1004da1c:	683a      	ldr	r2, [r7, #0]
1004da1e:	430a      	orrs	r2, r1
1004da20:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1004da22:	f7fa fd15 	bl	10048450 <HAL_GetTick>
1004da26:	0003      	movs	r3, r0
1004da28:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
1004da2a:	e008      	b.n	1004da3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
1004da2c:	f7fa fd10 	bl	10048450 <HAL_GetTick>
1004da30:	0002      	movs	r2, r0
1004da32:	68fb      	ldr	r3, [r7, #12]
1004da34:	1ad3      	subs	r3, r2, r3
1004da36:	2b02      	cmp	r3, #2
1004da38:	d901      	bls.n	1004da3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
1004da3a:	2303      	movs	r3, #3
1004da3c:	e019      	b.n	1004da72 <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
1004da3e:	4b0f      	ldr	r3, [pc, #60]	@ (1004da7c <HAL_RCC_ClockConfig+0x150>)
1004da40:	685b      	ldr	r3, [r3, #4]
1004da42:	2230      	movs	r2, #48	@ 0x30
1004da44:	4013      	ands	r3, r2
1004da46:	683a      	ldr	r2, [r7, #0]
1004da48:	429a      	cmp	r2, r3
1004da4a:	d1ef      	bne.n	1004da2c <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
1004da4c:	2300      	movs	r3, #0
1004da4e:	60bb      	str	r3, [r7, #8]
1004da50:	e003      	b.n	1004da5a <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
1004da52:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
1004da54:	68bb      	ldr	r3, [r7, #8]
1004da56:	3301      	adds	r3, #1
1004da58:	60bb      	str	r3, [r7, #8]
1004da5a:	68bb      	ldr	r3, [r7, #8]
1004da5c:	2b05      	cmp	r3, #5
1004da5e:	ddf8      	ble.n	1004da52 <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
1004da60:	f7fa f9ae 	bl	10047dc0 <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
1004da64:	f7fa fcfe 	bl	10048464 <HAL_GetTickPrio>
1004da68:	0003      	movs	r3, r0
1004da6a:	0018      	movs	r0, r3
1004da6c:	f7fa fc96 	bl	1004839c <HAL_InitTick>
1004da70:	0003      	movs	r3, r0
}
1004da72:	0018      	movs	r0, r3
1004da74:	46bd      	mov	sp, r7
1004da76:	b004      	add	sp, #16
1004da78:	bd80      	pop	{r7, pc}
1004da7a:	46c0      	nop			@ (mov r8, r8)
1004da7c:	40001000 	.word	0x40001000
1004da80:	48400000 	.word	0x48400000

1004da84 <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
1004da84:	b580      	push	{r7, lr}
1004da86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
1004da88:	4b02      	ldr	r3, [pc, #8]	@ (1004da94 <HAL_RCC_GetSysClockFreq+0x10>)
1004da8a:	681b      	ldr	r3, [r3, #0]
}
1004da8c:	0018      	movs	r0, r3
1004da8e:	46bd      	mov	sp, r7
1004da90:	bd80      	pop	{r7, pc}
1004da92:	46c0      	nop			@ (mov r8, r8)
1004da94:	20002bfc 	.word	0x20002bfc

1004da98 <LL_RCC_HSE_IsReady>:
{
1004da98:	b580      	push	{r7, lr}
1004da9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
1004da9c:	4b07      	ldr	r3, [pc, #28]	@ (1004dabc <LL_RCC_HSE_IsReady+0x24>)
1004da9e:	681a      	ldr	r2, [r3, #0]
1004daa0:	2380      	movs	r3, #128	@ 0x80
1004daa2:	029b      	lsls	r3, r3, #10
1004daa4:	401a      	ands	r2, r3
1004daa6:	2380      	movs	r3, #128	@ 0x80
1004daa8:	029b      	lsls	r3, r3, #10
1004daaa:	429a      	cmp	r2, r3
1004daac:	d101      	bne.n	1004dab2 <LL_RCC_HSE_IsReady+0x1a>
1004daae:	2301      	movs	r3, #1
1004dab0:	e000      	b.n	1004dab4 <LL_RCC_HSE_IsReady+0x1c>
1004dab2:	2300      	movs	r3, #0
}
1004dab4:	0018      	movs	r0, r3
1004dab6:	46bd      	mov	sp, r7
1004dab8:	bd80      	pop	{r7, pc}
1004daba:	46c0      	nop			@ (mov r8, r8)
1004dabc:	48400000 	.word	0x48400000

1004dac0 <LL_RCC_DIRECT_HSE_IsEnabled>:
{
1004dac0:	b580      	push	{r7, lr}
1004dac2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
1004dac4:	4b05      	ldr	r3, [pc, #20]	@ (1004dadc <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
1004dac6:	689b      	ldr	r3, [r3, #8]
1004dac8:	2208      	movs	r2, #8
1004daca:	4013      	ands	r3, r2
1004dacc:	2b08      	cmp	r3, #8
1004dace:	d101      	bne.n	1004dad4 <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
1004dad0:	2301      	movs	r3, #1
1004dad2:	e000      	b.n	1004dad6 <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
1004dad4:	2300      	movs	r3, #0
}
1004dad6:	0018      	movs	r0, r3
1004dad8:	46bd      	mov	sp, r7
1004dada:	bd80      	pop	{r7, pc}
1004dadc:	48400000 	.word	0x48400000

1004dae0 <LL_RCC_LSCO_SetSource>:
{
1004dae0:	b580      	push	{r7, lr}
1004dae2:	b082      	sub	sp, #8
1004dae4:	af00      	add	r7, sp, #0
1004dae6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
1004dae8:	4b06      	ldr	r3, [pc, #24]	@ (1004db04 <LL_RCC_LSCO_SetSource+0x24>)
1004daea:	689b      	ldr	r3, [r3, #8]
1004daec:	4a06      	ldr	r2, [pc, #24]	@ (1004db08 <LL_RCC_LSCO_SetSource+0x28>)
1004daee:	4013      	ands	r3, r2
1004daf0:	0019      	movs	r1, r3
1004daf2:	4b04      	ldr	r3, [pc, #16]	@ (1004db04 <LL_RCC_LSCO_SetSource+0x24>)
1004daf4:	687a      	ldr	r2, [r7, #4]
1004daf6:	430a      	orrs	r2, r1
1004daf8:	609a      	str	r2, [r3, #8]
}
1004dafa:	46c0      	nop			@ (mov r8, r8)
1004dafc:	46bd      	mov	sp, r7
1004dafe:	b002      	add	sp, #8
1004db00:	bd80      	pop	{r7, pc}
1004db02:	46c0      	nop			@ (mov r8, r8)
1004db04:	48400000 	.word	0x48400000
1004db08:	fffe7fff 	.word	0xfffe7fff

1004db0c <LL_RCC_LSCO_GetSource>:
{
1004db0c:	b580      	push	{r7, lr}
1004db0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_CLKSLOWSEL));
1004db10:	4b03      	ldr	r3, [pc, #12]	@ (1004db20 <LL_RCC_LSCO_GetSource+0x14>)
1004db12:	689a      	ldr	r2, [r3, #8]
1004db14:	23c0      	movs	r3, #192	@ 0xc0
1004db16:	025b      	lsls	r3, r3, #9
1004db18:	4013      	ands	r3, r2
}
1004db1a:	0018      	movs	r0, r3
1004db1c:	46bd      	mov	sp, r7
1004db1e:	bd80      	pop	{r7, pc}
1004db20:	48400000 	.word	0x48400000

1004db24 <LL_RCC_SetRFClock>:
{
1004db24:	b580      	push	{r7, lr}
1004db26:	b082      	sub	sp, #8
1004db28:	af00      	add	r7, sp, #0
1004db2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
1004db2c:	4b06      	ldr	r3, [pc, #24]	@ (1004db48 <LL_RCC_SetRFClock+0x24>)
1004db2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004db30:	2204      	movs	r2, #4
1004db32:	4393      	bics	r3, r2
1004db34:	0019      	movs	r1, r3
1004db36:	4b04      	ldr	r3, [pc, #16]	@ (1004db48 <LL_RCC_SetRFClock+0x24>)
1004db38:	687a      	ldr	r2, [r7, #4]
1004db3a:	430a      	orrs	r2, r1
1004db3c:	661a      	str	r2, [r3, #96]	@ 0x60
}
1004db3e:	46c0      	nop			@ (mov r8, r8)
1004db40:	46bd      	mov	sp, r7
1004db42:	b002      	add	sp, #8
1004db44:	bd80      	pop	{r7, pc}
1004db46:	46c0      	nop			@ (mov r8, r8)
1004db48:	48400000 	.word	0x48400000

1004db4c <LL_RCC_GetRFClock>:
{
1004db4c:	b580      	push	{r7, lr}
1004db4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV));
1004db50:	4b03      	ldr	r3, [pc, #12]	@ (1004db60 <LL_RCC_GetRFClock+0x14>)
1004db52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004db54:	2204      	movs	r2, #4
1004db56:	4013      	ands	r3, r2
}
1004db58:	0018      	movs	r0, r3
1004db5a:	46bd      	mov	sp, r7
1004db5c:	bd80      	pop	{r7, pc}
1004db5e:	46c0      	nop			@ (mov r8, r8)
1004db60:	48400000 	.word	0x48400000

1004db64 <LL_RCC_SetSMPSPrescaler>:
{
1004db64:	b580      	push	{r7, lr}
1004db66:	b082      	sub	sp, #8
1004db68:	af00      	add	r7, sp, #0
1004db6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
1004db6c:	4b06      	ldr	r3, [pc, #24]	@ (1004db88 <LL_RCC_SetSMPSPrescaler+0x24>)
1004db6e:	689b      	ldr	r3, [r3, #8]
1004db70:	4a06      	ldr	r2, [pc, #24]	@ (1004db8c <LL_RCC_SetSMPSPrescaler+0x28>)
1004db72:	4013      	ands	r3, r2
1004db74:	0019      	movs	r1, r3
1004db76:	4b04      	ldr	r3, [pc, #16]	@ (1004db88 <LL_RCC_SetSMPSPrescaler+0x24>)
1004db78:	687a      	ldr	r2, [r7, #4]
1004db7a:	430a      	orrs	r2, r1
1004db7c:	609a      	str	r2, [r3, #8]
}
1004db7e:	46c0      	nop			@ (mov r8, r8)
1004db80:	46bd      	mov	sp, r7
1004db82:	b002      	add	sp, #8
1004db84:	bd80      	pop	{r7, pc}
1004db86:	46c0      	nop			@ (mov r8, r8)
1004db88:	48400000 	.word	0x48400000
1004db8c:	ffffefff 	.word	0xffffefff

1004db90 <LL_RCC_GetSMPSPrescaler>:
{
1004db90:	b580      	push	{r7, lr}
1004db92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SMPSDIV));
1004db94:	4b03      	ldr	r3, [pc, #12]	@ (1004dba4 <LL_RCC_GetSMPSPrescaler+0x14>)
1004db96:	689a      	ldr	r2, [r3, #8]
1004db98:	2380      	movs	r3, #128	@ 0x80
1004db9a:	015b      	lsls	r3, r3, #5
1004db9c:	4013      	ands	r3, r2
}
1004db9e:	0018      	movs	r0, r3
1004dba0:	46bd      	mov	sp, r7
1004dba2:	bd80      	pop	{r7, pc}
1004dba4:	48400000 	.word	0x48400000

1004dba8 <LL_RCC_SetLPUARTClockSource>:
{
1004dba8:	b580      	push	{r7, lr}
1004dbaa:	b082      	sub	sp, #8
1004dbac:	af00      	add	r7, sp, #0
1004dbae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_LPUCLKSEL, Source);
1004dbb0:	4b06      	ldr	r3, [pc, #24]	@ (1004dbcc <LL_RCC_SetLPUARTClockSource+0x24>)
1004dbb2:	689b      	ldr	r3, [r3, #8]
1004dbb4:	4a06      	ldr	r2, [pc, #24]	@ (1004dbd0 <LL_RCC_SetLPUARTClockSource+0x28>)
1004dbb6:	4013      	ands	r3, r2
1004dbb8:	0019      	movs	r1, r3
1004dbba:	4b04      	ldr	r3, [pc, #16]	@ (1004dbcc <LL_RCC_SetLPUARTClockSource+0x24>)
1004dbbc:	687a      	ldr	r2, [r7, #4]
1004dbbe:	430a      	orrs	r2, r1
1004dbc0:	609a      	str	r2, [r3, #8]
}
1004dbc2:	46c0      	nop			@ (mov r8, r8)
1004dbc4:	46bd      	mov	sp, r7
1004dbc6:	b002      	add	sp, #8
1004dbc8:	bd80      	pop	{r7, pc}
1004dbca:	46c0      	nop			@ (mov r8, r8)
1004dbcc:	48400000 	.word	0x48400000
1004dbd0:	ffffdfff 	.word	0xffffdfff

1004dbd4 <LL_RCC_GetLPUARTClockSource>:
{
1004dbd4:	b580      	push	{r7, lr}
1004dbd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
1004dbd8:	4b03      	ldr	r3, [pc, #12]	@ (1004dbe8 <LL_RCC_GetLPUARTClockSource+0x14>)
1004dbda:	689a      	ldr	r2, [r3, #8]
1004dbdc:	2380      	movs	r3, #128	@ 0x80
1004dbde:	019b      	lsls	r3, r3, #6
1004dbe0:	4013      	ands	r3, r2
}
1004dbe2:	0018      	movs	r0, r3
1004dbe4:	46bd      	mov	sp, r7
1004dbe6:	bd80      	pop	{r7, pc}
1004dbe8:	48400000 	.word	0x48400000

1004dbec <LL_RCC_SetSPI3I2SClockSource>:
{
1004dbec:	b580      	push	{r7, lr}
1004dbee:	b082      	sub	sp, #8
1004dbf0:	af00      	add	r7, sp, #0
1004dbf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
1004dbf4:	4b06      	ldr	r3, [pc, #24]	@ (1004dc10 <LL_RCC_SetSPI3I2SClockSource+0x24>)
1004dbf6:	689b      	ldr	r3, [r3, #8]
1004dbf8:	4a06      	ldr	r2, [pc, #24]	@ (1004dc14 <LL_RCC_SetSPI3I2SClockSource+0x28>)
1004dbfa:	4013      	ands	r3, r2
1004dbfc:	0019      	movs	r1, r3
1004dbfe:	4b04      	ldr	r3, [pc, #16]	@ (1004dc10 <LL_RCC_SetSPI3I2SClockSource+0x24>)
1004dc00:	687a      	ldr	r2, [r7, #4]
1004dc02:	430a      	orrs	r2, r1
1004dc04:	609a      	str	r2, [r3, #8]
}
1004dc06:	46c0      	nop			@ (mov r8, r8)
1004dc08:	46bd      	mov	sp, r7
1004dc0a:	b002      	add	sp, #8
1004dc0c:	bd80      	pop	{r7, pc}
1004dc0e:	46c0      	nop			@ (mov r8, r8)
1004dc10:	48400000 	.word	0x48400000
1004dc14:	ff3fffff 	.word	0xff3fffff

1004dc18 <LL_RCC_GetSPI3I2SClockSource>:
{
1004dc18:	b580      	push	{r7, lr}
1004dc1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL));
1004dc1c:	4b03      	ldr	r3, [pc, #12]	@ (1004dc2c <LL_RCC_GetSPI3I2SClockSource+0x14>)
1004dc1e:	689a      	ldr	r2, [r3, #8]
1004dc20:	23c0      	movs	r3, #192	@ 0xc0
1004dc22:	041b      	lsls	r3, r3, #16
1004dc24:	4013      	ands	r3, r2
}
1004dc26:	0018      	movs	r0, r3
1004dc28:	46bd      	mov	sp, r7
1004dc2a:	bd80      	pop	{r7, pc}
1004dc2c:	48400000 	.word	0x48400000

1004dc30 <LL_RCC_RC64MPLL_IsReady>:
{
1004dc30:	b580      	push	{r7, lr}
1004dc32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
1004dc34:	4b07      	ldr	r3, [pc, #28]	@ (1004dc54 <LL_RCC_RC64MPLL_IsReady+0x24>)
1004dc36:	681a      	ldr	r2, [r3, #0]
1004dc38:	2380      	movs	r3, #128	@ 0x80
1004dc3a:	01db      	lsls	r3, r3, #7
1004dc3c:	401a      	ands	r2, r3
1004dc3e:	2380      	movs	r3, #128	@ 0x80
1004dc40:	01db      	lsls	r3, r3, #7
1004dc42:	429a      	cmp	r2, r3
1004dc44:	d101      	bne.n	1004dc4a <LL_RCC_RC64MPLL_IsReady+0x1a>
1004dc46:	2301      	movs	r3, #1
1004dc48:	e000      	b.n	1004dc4c <LL_RCC_RC64MPLL_IsReady+0x1c>
1004dc4a:	2300      	movs	r3, #0
}
1004dc4c:	0018      	movs	r0, r3
1004dc4e:	46bd      	mov	sp, r7
1004dc50:	bd80      	pop	{r7, pc}
1004dc52:	46c0      	nop			@ (mov r8, r8)
1004dc54:	48400000 	.word	0x48400000

1004dc58 <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
1004dc58:	b580      	push	{r7, lr}
1004dc5a:	b082      	sub	sp, #8
1004dc5c:	af00      	add	r7, sp, #0
1004dc5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
1004dc60:	687b      	ldr	r3, [r7, #4]
1004dc62:	681b      	ldr	r3, [r3, #0]
1004dc64:	2201      	movs	r2, #1
1004dc66:	4013      	ands	r3, r2
1004dc68:	d004      	beq.n	1004dc74 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
1004dc6a:	687b      	ldr	r3, [r7, #4]
1004dc6c:	691b      	ldr	r3, [r3, #16]
1004dc6e:	0018      	movs	r0, r3
1004dc70:	f7ff ff58 	bl	1004db24 <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
1004dc74:	687b      	ldr	r3, [r7, #4]
1004dc76:	681b      	ldr	r3, [r3, #0]
1004dc78:	2202      	movs	r2, #2
1004dc7a:	4013      	ands	r3, r2
1004dc7c:	d004      	beq.n	1004dc88 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
1004dc7e:	687b      	ldr	r3, [r7, #4]
1004dc80:	695b      	ldr	r3, [r3, #20]
1004dc82:	0018      	movs	r0, r3
1004dc84:	f7ff ff6e 	bl	1004db64 <LL_RCC_SetSMPSPrescaler>
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
1004dc88:	687b      	ldr	r3, [r7, #4]
1004dc8a:	681b      	ldr	r3, [r3, #0]
1004dc8c:	2208      	movs	r2, #8
1004dc8e:	4013      	ands	r3, r2
1004dc90:	d004      	beq.n	1004dc9c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
1004dc92:	687b      	ldr	r3, [r7, #4]
1004dc94:	685b      	ldr	r3, [r3, #4]
1004dc96:	0018      	movs	r0, r3
1004dc98:	f7ff ffa8 	bl	1004dbec <LL_RCC_SetSPI3I2SClockSource>
  }
#endif

#if defined(RCC_CFGR_LPUCLKSEL)
  /*-------------------------- LPUART1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1))
1004dc9c:	687b      	ldr	r3, [r7, #4]
1004dc9e:	681b      	ldr	r3, [r3, #0]
1004dca0:	2210      	movs	r2, #16
1004dca2:	4013      	ands	r3, r2
1004dca4:	d004      	beq.n	1004dcb0 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_LPUART1_CLOCK_SOURCE(PeriphClkInit->LPUART1ClockSelection));
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
1004dca6:	687b      	ldr	r3, [r7, #4]
1004dca8:	68db      	ldr	r3, [r3, #12]
1004dcaa:	0018      	movs	r0, r3
1004dcac:	f7ff ff7c 	bl	1004dba8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
1004dcb0:	687b      	ldr	r3, [r7, #4]
1004dcb2:	689b      	ldr	r3, [r3, #8]
1004dcb4:	2220      	movs	r2, #32
1004dcb6:	4013      	ands	r3, r2
1004dcb8:	d004      	beq.n	1004dcc4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
1004dcba:	687b      	ldr	r3, [r7, #4]
1004dcbc:	689b      	ldr	r3, [r3, #8]
1004dcbe:	0018      	movs	r0, r3
1004dcc0:	f7ff ff0e 	bl	1004dae0 <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
1004dcc4:	2300      	movs	r3, #0
}
1004dcc6:	0018      	movs	r0, r3
1004dcc8:	46bd      	mov	sp, r7
1004dcca:	b002      	add	sp, #8
1004dccc:	bd80      	pop	{r7, pc}
	...

1004dcd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RTC_WDG_BLEWKUP   RTC, WDG and BLEWKUP peripheral clock
  * @retval Frequency in Hz
  * @note   (*) Peripherals are not available on all devices
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
1004dcd0:	b580      	push	{r7, lr}
1004dcd2:	b084      	sub	sp, #16
1004dcd4:	af00      	add	r7, sp, #0
1004dcd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  /* No if clausule is covered */
  frequency = 0;
1004dcd8:	2300      	movs	r3, #0
1004dcda:	60fb      	str	r3, [r7, #12]

  switch (PeriphClk)
1004dcdc:	687b      	ldr	r3, [r7, #4]
1004dcde:	2b20      	cmp	r3, #32
1004dce0:	d900      	bls.n	1004dce4 <HAL_RCCEx_GetPeriphCLKFreq+0x14>
1004dce2:	e07b      	b.n	1004dddc <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
1004dce4:	687b      	ldr	r3, [r7, #4]
1004dce6:	009a      	lsls	r2, r3, #2
1004dce8:	4b40      	ldr	r3, [pc, #256]	@ (1004ddec <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
1004dcea:	18d3      	adds	r3, r2, r3
1004dcec:	681b      	ldr	r3, [r3, #0]
1004dcee:	469f      	mov	pc, r3
  {
    case RCC_PERIPHCLK_RF :
      switch (__HAL_RCC_RF_CLK_GET_CONFIG())
1004dcf0:	f7ff ff2c 	bl	1004db4c <LL_RCC_GetRFClock>
1004dcf4:	1e03      	subs	r3, r0, #0
1004dcf6:	d002      	beq.n	1004dcfe <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
1004dcf8:	2b04      	cmp	r3, #4
1004dcfa:	d003      	beq.n	1004dd04 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        case RCC_RF_CLK_16M:
          frequency = HSE_VALUE / 2;
          break;
      }

      break;
1004dcfc:	e071      	b.n	1004dde2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE;
1004dcfe:	4b3c      	ldr	r3, [pc, #240]	@ (1004ddf0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
1004dd00:	60fb      	str	r3, [r7, #12]
          break;
1004dd02:	e002      	b.n	1004dd0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          frequency = HSE_VALUE / 2;
1004dd04:	4b3b      	ldr	r3, [pc, #236]	@ (1004ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004dd06:	60fb      	str	r3, [r7, #12]
          break;
1004dd08:	46c0      	nop			@ (mov r8, r8)
      break;
1004dd0a:	e06a      	b.n	1004dde2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>

    case RCC_PERIPHCLK_SMPS :
      switch (__HAL_RCC_GET_SMPS_DIV())
1004dd0c:	f7ff ff40 	bl	1004db90 <LL_RCC_GetSMPSPrescaler>
1004dd10:	1e03      	subs	r3, r0, #0
1004dd12:	d004      	beq.n	1004dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
1004dd14:	2280      	movs	r2, #128	@ 0x80
1004dd16:	0152      	lsls	r2, r2, #5
1004dd18:	4293      	cmp	r3, r2
1004dd1a:	d003      	beq.n	1004dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          break;
        case RCC_SMPSCLK_DIV4:
          frequency = HSE_VALUE / 8;
          break;
      }
      break;
1004dd1c:	e061      	b.n	1004dde2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE / 4;
1004dd1e:	4b36      	ldr	r3, [pc, #216]	@ (1004ddf8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
1004dd20:	60fb      	str	r3, [r7, #12]
          break;
1004dd22:	e002      	b.n	1004dd2a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSE_VALUE / 8;
1004dd24:	4b35      	ldr	r3, [pc, #212]	@ (1004ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
1004dd26:	60fb      	str	r3, [r7, #12]
          break;
1004dd28:	46c0      	nop			@ (mov r8, r8)
      break;
1004dd2a:	e05a      	b.n	1004dde2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      }
      break;
#endif

    case RCC_PERIPHCLK_SPI3_I2S :
      if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_DIRECT_HSE)
1004dd2c:	f7ff fec8 	bl	1004dac0 <LL_RCC_DIRECT_HSE_IsEnabled>
1004dd30:	1e03      	subs	r3, r0, #0
1004dd32:	d005      	beq.n	1004dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      {
        if (__HAL_RCC_GET_HSE_READYFLAG() == 0)
1004dd34:	f7ff feb0 	bl	1004da98 <LL_RCC_HSE_IsReady>
1004dd38:	1e03      	subs	r3, r0, #0
1004dd3a:	d107      	bne.n	1004dd4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
1004dd3c:	2300      	movs	r3, #0
1004dd3e:	e051      	b.n	1004dde4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      else
      {
        if (__HAL_RCC_RC64MPLL_READYFLAG() == 0)
1004dd40:	f7ff ff76 	bl	1004dc30 <LL_RCC_RC64MPLL_IsReady>
1004dd44:	1e03      	subs	r3, r0, #0
1004dd46:	d101      	bne.n	1004dd4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
1004dd48:	2300      	movs	r3, #0
1004dd4a:	e04b      	b.n	1004dde4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      spiFreqValue = __HAL_RCC_GET_SPI3I2S_CLK_CONFIG();
1004dd4c:	f7ff ff64 	bl	1004dc18 <LL_RCC_GetSPI3I2SClockSource>
1004dd50:	0003      	movs	r3, r0
1004dd52:	60bb      	str	r3, [r7, #8]
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_16M)
1004dd54:	68bb      	ldr	r3, [r7, #8]
1004dd56:	2b00      	cmp	r3, #0
1004dd58:	d101      	bne.n	1004dd5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
      {
        frequency = HSE_VALUE / 2;
1004dd5a:	4b26      	ldr	r3, [pc, #152]	@ (1004ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004dd5c:	60fb      	str	r3, [r7, #12]
      }

      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_32M)
1004dd5e:	68ba      	ldr	r2, [r7, #8]
1004dd60:	2380      	movs	r3, #128	@ 0x80
1004dd62:	03db      	lsls	r3, r3, #15
1004dd64:	429a      	cmp	r2, r3
1004dd66:	d101      	bne.n	1004dd6c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      {
        frequency = HSE_VALUE;
1004dd68:	4b21      	ldr	r3, [pc, #132]	@ (1004ddf0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
1004dd6a:	60fb      	str	r3, [r7, #12]
      }
#if defined(RCC_SPI3I2S_CLKSOURCE_64M)
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_64M)
1004dd6c:	68ba      	ldr	r2, [r7, #8]
1004dd6e:	2380      	movs	r3, #128	@ 0x80
1004dd70:	041b      	lsls	r3, r3, #16
1004dd72:	429a      	cmp	r2, r3
1004dd74:	d134      	bne.n	1004dde0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
      {
        frequency = HSE_VALUE * 2;
1004dd76:	4b22      	ldr	r3, [pc, #136]	@ (1004de00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
1004dd78:	60fb      	str	r3, [r7, #12]
      }
#endif
      break;
1004dd7a:	e031      	b.n	1004dde0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>

#if defined(RCC_CFGR_LPUCLKSEL)
    case RCC_PERIPHCLK_LPUART1 :
      switch (__HAL_RCC_GET_LPUART1_CLK_CONFIG())
1004dd7c:	f7ff ff2a 	bl	1004dbd4 <LL_RCC_GetLPUARTClockSource>
1004dd80:	0002      	movs	r2, r0
1004dd82:	2380      	movs	r3, #128	@ 0x80
1004dd84:	019b      	lsls	r3, r3, #6
1004dd86:	429a      	cmp	r2, r3
1004dd88:	d103      	bne.n	1004dd92 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      {
        case RCC_LPUART1_CLKSOURCE_LSE:
          frequency = LSE_VALUE;
1004dd8a:	2380      	movs	r3, #128	@ 0x80
1004dd8c:	021b      	lsls	r3, r3, #8
1004dd8e:	60fb      	str	r3, [r7, #12]
          break;
1004dd90:	e002      	b.n	1004dd98 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
        case RCC_LPUART1_CLKSOURCE_16M:
        default:
          frequency = HSE_VALUE / 2;
1004dd92:	4b18      	ldr	r3, [pc, #96]	@ (1004ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004dd94:	60fb      	str	r3, [r7, #12]
          break;
1004dd96:	46c0      	nop			@ (mov r8, r8)
      }
      break;
1004dd98:	e023      	b.n	1004dde2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
#endif /* RCC_CFGR_LPUCLKSEL */

    case RCC_PERIPHCLK_RTC_WDG_BLEWKUP :
      switch (LL_RCC_LSCO_GetSource())
1004dd9a:	f7ff feb7 	bl	1004db0c <LL_RCC_LSCO_GetSource>
1004dd9e:	0003      	movs	r3, r0
1004dda0:	22c0      	movs	r2, #192	@ 0xc0
1004dda2:	0252      	lsls	r2, r2, #9
1004dda4:	4293      	cmp	r3, r2
1004dda6:	d014      	beq.n	1004ddd2 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
1004dda8:	22c0      	movs	r2, #192	@ 0xc0
1004ddaa:	0252      	lsls	r2, r2, #9
1004ddac:	4293      	cmp	r3, r2
1004ddae:	d813      	bhi.n	1004ddd8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
1004ddb0:	2280      	movs	r2, #128	@ 0x80
1004ddb2:	0212      	lsls	r2, r2, #8
1004ddb4:	4293      	cmp	r3, r2
1004ddb6:	d004      	beq.n	1004ddc2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
1004ddb8:	2280      	movs	r2, #128	@ 0x80
1004ddba:	0252      	lsls	r2, r2, #9
1004ddbc:	4293      	cmp	r3, r2
1004ddbe:	d004      	beq.n	1004ddca <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
          break;
        case LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048:
          frequency = HSE_VALUE >> 10;
          break;
        default :
          break;
1004ddc0:	e00a      	b.n	1004ddd8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          frequency = LSE_VALUE;
1004ddc2:	2380      	movs	r3, #128	@ 0x80
1004ddc4:	021b      	lsls	r3, r3, #8
1004ddc6:	60fb      	str	r3, [r7, #12]
          break;
1004ddc8:	e007      	b.n	1004ddda <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = LSI_VALUE;
1004ddca:	23fa      	movs	r3, #250	@ 0xfa
1004ddcc:	01db      	lsls	r3, r3, #7
1004ddce:	60fb      	str	r3, [r7, #12]
          break;
1004ddd0:	e003      	b.n	1004ddda <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = HSE_VALUE >> 10;
1004ddd2:	4b0c      	ldr	r3, [pc, #48]	@ (1004de04 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
1004ddd4:	60fb      	str	r3, [r7, #12]
          break;
1004ddd6:	e000      	b.n	1004ddda <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          break;
1004ddd8:	46c0      	nop			@ (mov r8, r8)
      }
      break;
1004ddda:	e002      	b.n	1004dde2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    default :
      break;
1004dddc:	46c0      	nop			@ (mov r8, r8)
1004ddde:	e000      	b.n	1004dde2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      break;
1004dde0:	46c0      	nop			@ (mov r8, r8)
  }

  return (frequency);
1004dde2:	68fb      	ldr	r3, [r7, #12]
}
1004dde4:	0018      	movs	r0, r3
1004dde6:	46bd      	mov	sp, r7
1004dde8:	b004      	add	sp, #16
1004ddea:	bd80      	pop	{r7, pc}
1004ddec:	1006a054 	.word	0x1006a054
1004ddf0:	01e84800 	.word	0x01e84800
1004ddf4:	00f42400 	.word	0x00f42400
1004ddf8:	007a1200 	.word	0x007a1200
1004ddfc:	003d0900 	.word	0x003d0900
1004de00:	03d09000 	.word	0x03d09000
1004de04:	00007a12 	.word	0x00007a12

1004de08 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
1004de08:	b580      	push	{r7, lr}
1004de0a:	b082      	sub	sp, #8
1004de0c:	af00      	add	r7, sp, #0
1004de0e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
1004de10:	687b      	ldr	r3, [r7, #4]
1004de12:	2b00      	cmp	r3, #0
1004de14:	d101      	bne.n	1004de1a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
1004de16:	2301      	movs	r3, #1
1004de18:	e02d      	b.n	1004de76 <HAL_RNG_Init+0x6e>
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
#if defined (RNG_CR_TST_CLK)
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
#endif /* RNG_CR_TST_CLK */

  if (hrng->State == HAL_RNG_STATE_RESET)
1004de1a:	687b      	ldr	r3, [r7, #4]
1004de1c:	7a5b      	ldrb	r3, [r3, #9]
1004de1e:	b2db      	uxtb	r3, r3
1004de20:	2b00      	cmp	r3, #0
1004de22:	d106      	bne.n	1004de32 <HAL_RNG_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
1004de24:	687b      	ldr	r3, [r7, #4]
1004de26:	2200      	movs	r2, #0
1004de28:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
1004de2a:	687b      	ldr	r3, [r7, #4]
1004de2c:	0018      	movs	r0, r3
1004de2e:	f7f9 fd51 	bl	100478d4 <HAL_RNG_MspInit>
  }

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
1004de32:	687b      	ldr	r3, [r7, #4]
1004de34:	2202      	movs	r2, #2
1004de36:	725a      	strb	r2, [r3, #9]

  /* Reset the CR */
  hrng->Instance->CR = 0U;
1004de38:	687b      	ldr	r3, [r7, #4]
1004de3a:	681b      	ldr	r3, [r3, #0]
1004de3c:	2200      	movs	r2, #0
1004de3e:	601a      	str	r2, [r3, #0]

#if defined (RNG_CR_TST_CLK)
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_TST_CLK, hrng->Init.ClockErrorDetection);
1004de40:	687b      	ldr	r3, [r7, #4]
1004de42:	681b      	ldr	r3, [r3, #0]
1004de44:	681b      	ldr	r3, [r3, #0]
1004de46:	2208      	movs	r2, #8
1004de48:	4393      	bics	r3, r2
1004de4a:	0019      	movs	r1, r3
1004de4c:	687b      	ldr	r3, [r7, #4]
1004de4e:	685a      	ldr	r2, [r3, #4]
1004de50:	687b      	ldr	r3, [r7, #4]
1004de52:	681b      	ldr	r3, [r3, #0]
1004de54:	430a      	orrs	r2, r1
1004de56:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_TST_CLK */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
1004de58:	687b      	ldr	r3, [r7, #4]
1004de5a:	681b      	ldr	r3, [r3, #0]
1004de5c:	681a      	ldr	r2, [r3, #0]
1004de5e:	687b      	ldr	r3, [r7, #4]
1004de60:	681b      	ldr	r3, [r3, #0]
1004de62:	2104      	movs	r1, #4
1004de64:	438a      	bics	r2, r1
1004de66:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
1004de68:	687b      	ldr	r3, [r7, #4]
1004de6a:	2201      	movs	r2, #1
1004de6c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
1004de6e:	687b      	ldr	r3, [r7, #4]
1004de70:	2200      	movs	r2, #0
1004de72:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
1004de74:	2300      	movs	r3, #0
}
1004de76:	0018      	movs	r0, r3
1004de78:	46bd      	mov	sp, r7
1004de7a:	b002      	add	sp, #8
1004de7c:	bd80      	pop	{r7, pc}

1004de7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
1004de7e:	b580      	push	{r7, lr}
1004de80:	b082      	sub	sp, #8
1004de82:	af00      	add	r7, sp, #0
1004de84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
1004de86:	687b      	ldr	r3, [r7, #4]
1004de88:	2b00      	cmp	r3, #0
1004de8a:	d101      	bne.n	1004de90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
1004de8c:	2301      	movs	r3, #1
1004de8e:	e036      	b.n	1004defe <HAL_TIM_Base_Init+0x80>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
1004de90:	687b      	ldr	r3, [r7, #4]
1004de92:	2235      	movs	r2, #53	@ 0x35
1004de94:	5c9b      	ldrb	r3, [r3, r2]
1004de96:	b2db      	uxtb	r3, r3
1004de98:	2b00      	cmp	r3, #0
1004de9a:	d107      	bne.n	1004deac <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
1004de9c:	687b      	ldr	r3, [r7, #4]
1004de9e:	2234      	movs	r2, #52	@ 0x34
1004dea0:	2100      	movs	r1, #0
1004dea2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
1004dea4:	687b      	ldr	r3, [r7, #4]
1004dea6:	0018      	movs	r0, r3
1004dea8:	f7f9 fd28 	bl	100478fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
1004deac:	687b      	ldr	r3, [r7, #4]
1004deae:	2235      	movs	r2, #53	@ 0x35
1004deb0:	2102      	movs	r1, #2
1004deb2:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
1004deb4:	687b      	ldr	r3, [r7, #4]
1004deb6:	681a      	ldr	r2, [r3, #0]
1004deb8:	687b      	ldr	r3, [r7, #4]
1004deba:	3304      	adds	r3, #4
1004debc:	0019      	movs	r1, r3
1004debe:	0010      	movs	r0, r2
1004dec0:	f000 fa3a 	bl	1004e338 <TIM_Base_SetConfig>

#if defined(TIM_DMA_SUPPORT)
  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
1004dec4:	687b      	ldr	r3, [r7, #4]
1004dec6:	223b      	movs	r2, #59	@ 0x3b
1004dec8:	2101      	movs	r1, #1
1004deca:	5499      	strb	r1, [r3, r2]
#endif /* TIM_DMA_SUPPORT */

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
1004decc:	687b      	ldr	r3, [r7, #4]
1004dece:	2236      	movs	r2, #54	@ 0x36
1004ded0:	2101      	movs	r1, #1
1004ded2:	5499      	strb	r1, [r3, r2]
1004ded4:	687b      	ldr	r3, [r7, #4]
1004ded6:	2237      	movs	r2, #55	@ 0x37
1004ded8:	2101      	movs	r1, #1
1004deda:	5499      	strb	r1, [r3, r2]
1004dedc:	687b      	ldr	r3, [r7, #4]
1004dede:	2238      	movs	r2, #56	@ 0x38
1004dee0:	2101      	movs	r1, #1
1004dee2:	5499      	strb	r1, [r3, r2]
1004dee4:	687b      	ldr	r3, [r7, #4]
1004dee6:	2239      	movs	r2, #57	@ 0x39
1004dee8:	2101      	movs	r1, #1
1004deea:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
1004deec:	687b      	ldr	r3, [r7, #4]
1004deee:	223a      	movs	r2, #58	@ 0x3a
1004def0:	2101      	movs	r1, #1
1004def2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
1004def4:	687b      	ldr	r3, [r7, #4]
1004def6:	2235      	movs	r2, #53	@ 0x35
1004def8:	2101      	movs	r1, #1
1004defa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004defc:	2300      	movs	r3, #0
}
1004defe:	0018      	movs	r0, r3
1004df00:	46bd      	mov	sp, r7
1004df02:	b002      	add	sp, #8
1004df04:	bd80      	pop	{r7, pc}
	...

1004df08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
1004df08:	b580      	push	{r7, lr}
1004df0a:	b084      	sub	sp, #16
1004df0c:	af00      	add	r7, sp, #0
1004df0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
1004df10:	687b      	ldr	r3, [r7, #4]
1004df12:	2235      	movs	r2, #53	@ 0x35
1004df14:	5c9b      	ldrb	r3, [r3, r2]
1004df16:	b2db      	uxtb	r3, r3
1004df18:	2b01      	cmp	r3, #1
1004df1a:	d001      	beq.n	1004df20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
1004df1c:	2301      	movs	r3, #1
1004df1e:	e030      	b.n	1004df82 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
1004df20:	687b      	ldr	r3, [r7, #4]
1004df22:	2235      	movs	r2, #53	@ 0x35
1004df24:	2102      	movs	r1, #2
1004df26:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
1004df28:	687b      	ldr	r3, [r7, #4]
1004df2a:	681b      	ldr	r3, [r3, #0]
1004df2c:	68da      	ldr	r2, [r3, #12]
1004df2e:	687b      	ldr	r3, [r7, #4]
1004df30:	681b      	ldr	r3, [r3, #0]
1004df32:	2101      	movs	r1, #1
1004df34:	430a      	orrs	r2, r1
1004df36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
1004df38:	687b      	ldr	r3, [r7, #4]
1004df3a:	681b      	ldr	r3, [r3, #0]
1004df3c:	4a13      	ldr	r2, [pc, #76]	@ (1004df8c <HAL_TIM_Base_Start_IT+0x84>)
1004df3e:	4293      	cmp	r3, r2
1004df40:	d116      	bne.n	1004df70 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
1004df42:	687b      	ldr	r3, [r7, #4]
1004df44:	681b      	ldr	r3, [r3, #0]
1004df46:	689b      	ldr	r3, [r3, #8]
1004df48:	4a11      	ldr	r2, [pc, #68]	@ (1004df90 <HAL_TIM_Base_Start_IT+0x88>)
1004df4a:	4013      	ands	r3, r2
1004df4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
1004df4e:	68fb      	ldr	r3, [r7, #12]
1004df50:	2b06      	cmp	r3, #6
1004df52:	d015      	beq.n	1004df80 <HAL_TIM_Base_Start_IT+0x78>
1004df54:	68fa      	ldr	r2, [r7, #12]
1004df56:	2380      	movs	r3, #128	@ 0x80
1004df58:	025b      	lsls	r3, r3, #9
1004df5a:	429a      	cmp	r2, r3
1004df5c:	d010      	beq.n	1004df80 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
1004df5e:	687b      	ldr	r3, [r7, #4]
1004df60:	681b      	ldr	r3, [r3, #0]
1004df62:	681a      	ldr	r2, [r3, #0]
1004df64:	687b      	ldr	r3, [r7, #4]
1004df66:	681b      	ldr	r3, [r3, #0]
1004df68:	2101      	movs	r1, #1
1004df6a:	430a      	orrs	r2, r1
1004df6c:	601a      	str	r2, [r3, #0]
1004df6e:	e007      	b.n	1004df80 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
1004df70:	687b      	ldr	r3, [r7, #4]
1004df72:	681b      	ldr	r3, [r3, #0]
1004df74:	681a      	ldr	r2, [r3, #0]
1004df76:	687b      	ldr	r3, [r7, #4]
1004df78:	681b      	ldr	r3, [r3, #0]
1004df7a:	2101      	movs	r1, #1
1004df7c:	430a      	orrs	r2, r1
1004df7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
1004df80:	2300      	movs	r3, #0
}
1004df82:	0018      	movs	r0, r3
1004df84:	46bd      	mov	sp, r7
1004df86:	b004      	add	sp, #16
1004df88:	bd80      	pop	{r7, pc}
1004df8a:	46c0      	nop			@ (mov r8, r8)
1004df8c:	40002000 	.word	0x40002000
1004df90:	00010007 	.word	0x00010007

1004df94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
1004df94:	b580      	push	{r7, lr}
1004df96:	b084      	sub	sp, #16
1004df98:	af00      	add	r7, sp, #0
1004df9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
1004df9c:	687b      	ldr	r3, [r7, #4]
1004df9e:	681b      	ldr	r3, [r3, #0]
1004dfa0:	68db      	ldr	r3, [r3, #12]
1004dfa2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
1004dfa4:	687b      	ldr	r3, [r7, #4]
1004dfa6:	681b      	ldr	r3, [r3, #0]
1004dfa8:	691b      	ldr	r3, [r3, #16]
1004dfaa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
1004dfac:	68bb      	ldr	r3, [r7, #8]
1004dfae:	2202      	movs	r2, #2
1004dfb0:	4013      	ands	r3, r2
1004dfb2:	d021      	beq.n	1004dff8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
1004dfb4:	68fb      	ldr	r3, [r7, #12]
1004dfb6:	2202      	movs	r2, #2
1004dfb8:	4013      	ands	r3, r2
1004dfba:	d01d      	beq.n	1004dff8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
1004dfbc:	687b      	ldr	r3, [r7, #4]
1004dfbe:	681b      	ldr	r3, [r3, #0]
1004dfc0:	2203      	movs	r2, #3
1004dfc2:	4252      	negs	r2, r2
1004dfc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
1004dfc6:	687b      	ldr	r3, [r7, #4]
1004dfc8:	2201      	movs	r2, #1
1004dfca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
1004dfcc:	687b      	ldr	r3, [r7, #4]
1004dfce:	681b      	ldr	r3, [r3, #0]
1004dfd0:	699b      	ldr	r3, [r3, #24]
1004dfd2:	2203      	movs	r2, #3
1004dfd4:	4013      	ands	r3, r2
1004dfd6:	d004      	beq.n	1004dfe2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
1004dfd8:	687b      	ldr	r3, [r7, #4]
1004dfda:	0018      	movs	r0, r3
1004dfdc:	f000 f994 	bl	1004e308 <HAL_TIM_IC_CaptureCallback>
1004dfe0:	e007      	b.n	1004dff2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
1004dfe2:	687b      	ldr	r3, [r7, #4]
1004dfe4:	0018      	movs	r0, r3
1004dfe6:	f000 f987 	bl	1004e2f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
1004dfea:	687b      	ldr	r3, [r7, #4]
1004dfec:	0018      	movs	r0, r3
1004dfee:	f000 f993 	bl	1004e318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004dff2:	687b      	ldr	r3, [r7, #4]
1004dff4:	2200      	movs	r2, #0
1004dff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
1004dff8:	68bb      	ldr	r3, [r7, #8]
1004dffa:	2204      	movs	r2, #4
1004dffc:	4013      	ands	r3, r2
1004dffe:	d022      	beq.n	1004e046 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
1004e000:	68fb      	ldr	r3, [r7, #12]
1004e002:	2204      	movs	r2, #4
1004e004:	4013      	ands	r3, r2
1004e006:	d01e      	beq.n	1004e046 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
1004e008:	687b      	ldr	r3, [r7, #4]
1004e00a:	681b      	ldr	r3, [r3, #0]
1004e00c:	2205      	movs	r2, #5
1004e00e:	4252      	negs	r2, r2
1004e010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
1004e012:	687b      	ldr	r3, [r7, #4]
1004e014:	2202      	movs	r2, #2
1004e016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
1004e018:	687b      	ldr	r3, [r7, #4]
1004e01a:	681b      	ldr	r3, [r3, #0]
1004e01c:	699a      	ldr	r2, [r3, #24]
1004e01e:	23c0      	movs	r3, #192	@ 0xc0
1004e020:	009b      	lsls	r3, r3, #2
1004e022:	4013      	ands	r3, r2
1004e024:	d004      	beq.n	1004e030 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004e026:	687b      	ldr	r3, [r7, #4]
1004e028:	0018      	movs	r0, r3
1004e02a:	f000 f96d 	bl	1004e308 <HAL_TIM_IC_CaptureCallback>
1004e02e:	e007      	b.n	1004e040 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004e030:	687b      	ldr	r3, [r7, #4]
1004e032:	0018      	movs	r0, r3
1004e034:	f000 f960 	bl	1004e2f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1004e038:	687b      	ldr	r3, [r7, #4]
1004e03a:	0018      	movs	r0, r3
1004e03c:	f000 f96c 	bl	1004e318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004e040:	687b      	ldr	r3, [r7, #4]
1004e042:	2200      	movs	r2, #0
1004e044:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
1004e046:	68bb      	ldr	r3, [r7, #8]
1004e048:	2208      	movs	r2, #8
1004e04a:	4013      	ands	r3, r2
1004e04c:	d021      	beq.n	1004e092 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
1004e04e:	68fb      	ldr	r3, [r7, #12]
1004e050:	2208      	movs	r2, #8
1004e052:	4013      	ands	r3, r2
1004e054:	d01d      	beq.n	1004e092 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
1004e056:	687b      	ldr	r3, [r7, #4]
1004e058:	681b      	ldr	r3, [r3, #0]
1004e05a:	2209      	movs	r2, #9
1004e05c:	4252      	negs	r2, r2
1004e05e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
1004e060:	687b      	ldr	r3, [r7, #4]
1004e062:	2204      	movs	r2, #4
1004e064:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
1004e066:	687b      	ldr	r3, [r7, #4]
1004e068:	681b      	ldr	r3, [r3, #0]
1004e06a:	69db      	ldr	r3, [r3, #28]
1004e06c:	2203      	movs	r2, #3
1004e06e:	4013      	ands	r3, r2
1004e070:	d004      	beq.n	1004e07c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004e072:	687b      	ldr	r3, [r7, #4]
1004e074:	0018      	movs	r0, r3
1004e076:	f000 f947 	bl	1004e308 <HAL_TIM_IC_CaptureCallback>
1004e07a:	e007      	b.n	1004e08c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004e07c:	687b      	ldr	r3, [r7, #4]
1004e07e:	0018      	movs	r0, r3
1004e080:	f000 f93a 	bl	1004e2f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1004e084:	687b      	ldr	r3, [r7, #4]
1004e086:	0018      	movs	r0, r3
1004e088:	f000 f946 	bl	1004e318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004e08c:	687b      	ldr	r3, [r7, #4]
1004e08e:	2200      	movs	r2, #0
1004e090:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
1004e092:	68bb      	ldr	r3, [r7, #8]
1004e094:	2210      	movs	r2, #16
1004e096:	4013      	ands	r3, r2
1004e098:	d022      	beq.n	1004e0e0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
1004e09a:	68fb      	ldr	r3, [r7, #12]
1004e09c:	2210      	movs	r2, #16
1004e09e:	4013      	ands	r3, r2
1004e0a0:	d01e      	beq.n	1004e0e0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
1004e0a2:	687b      	ldr	r3, [r7, #4]
1004e0a4:	681b      	ldr	r3, [r3, #0]
1004e0a6:	2211      	movs	r2, #17
1004e0a8:	4252      	negs	r2, r2
1004e0aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
1004e0ac:	687b      	ldr	r3, [r7, #4]
1004e0ae:	2208      	movs	r2, #8
1004e0b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
1004e0b2:	687b      	ldr	r3, [r7, #4]
1004e0b4:	681b      	ldr	r3, [r3, #0]
1004e0b6:	69da      	ldr	r2, [r3, #28]
1004e0b8:	23c0      	movs	r3, #192	@ 0xc0
1004e0ba:	009b      	lsls	r3, r3, #2
1004e0bc:	4013      	ands	r3, r2
1004e0be:	d004      	beq.n	1004e0ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004e0c0:	687b      	ldr	r3, [r7, #4]
1004e0c2:	0018      	movs	r0, r3
1004e0c4:	f000 f920 	bl	1004e308 <HAL_TIM_IC_CaptureCallback>
1004e0c8:	e007      	b.n	1004e0da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004e0ca:	687b      	ldr	r3, [r7, #4]
1004e0cc:	0018      	movs	r0, r3
1004e0ce:	f000 f913 	bl	1004e2f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1004e0d2:	687b      	ldr	r3, [r7, #4]
1004e0d4:	0018      	movs	r0, r3
1004e0d6:	f000 f91f 	bl	1004e318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004e0da:	687b      	ldr	r3, [r7, #4]
1004e0dc:	2200      	movs	r2, #0
1004e0de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
1004e0e0:	68bb      	ldr	r3, [r7, #8]
1004e0e2:	2201      	movs	r2, #1
1004e0e4:	4013      	ands	r3, r2
1004e0e6:	d00c      	beq.n	1004e102 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
1004e0e8:	68fb      	ldr	r3, [r7, #12]
1004e0ea:	2201      	movs	r2, #1
1004e0ec:	4013      	ands	r3, r2
1004e0ee:	d008      	beq.n	1004e102 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
1004e0f0:	687b      	ldr	r3, [r7, #4]
1004e0f2:	681b      	ldr	r3, [r3, #0]
1004e0f4:	2202      	movs	r2, #2
1004e0f6:	4252      	negs	r2, r2
1004e0f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
1004e0fa:	687b      	ldr	r3, [r7, #4]
1004e0fc:	0018      	movs	r0, r3
1004e0fe:	f000 f8f3 	bl	1004e2e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
1004e102:	68bb      	ldr	r3, [r7, #8]
1004e104:	2280      	movs	r2, #128	@ 0x80
1004e106:	4013      	ands	r3, r2
1004e108:	d00c      	beq.n	1004e124 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
1004e10a:	68fb      	ldr	r3, [r7, #12]
1004e10c:	2280      	movs	r2, #128	@ 0x80
1004e10e:	4013      	ands	r3, r2
1004e110:	d008      	beq.n	1004e124 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
1004e112:	687b      	ldr	r3, [r7, #4]
1004e114:	681b      	ldr	r3, [r3, #0]
1004e116:	2281      	movs	r2, #129	@ 0x81
1004e118:	4252      	negs	r2, r2
1004e11a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
1004e11c:	687b      	ldr	r3, [r7, #4]
1004e11e:	0018      	movs	r0, r3
1004e120:	f000 fa08 	bl	1004e534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
1004e124:	68bb      	ldr	r3, [r7, #8]
1004e126:	2240      	movs	r2, #64	@ 0x40
1004e128:	4013      	ands	r3, r2
1004e12a:	d00c      	beq.n	1004e146 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
1004e12c:	68fb      	ldr	r3, [r7, #12]
1004e12e:	2240      	movs	r2, #64	@ 0x40
1004e130:	4013      	ands	r3, r2
1004e132:	d008      	beq.n	1004e146 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
1004e134:	687b      	ldr	r3, [r7, #4]
1004e136:	681b      	ldr	r3, [r3, #0]
1004e138:	2241      	movs	r2, #65	@ 0x41
1004e13a:	4252      	negs	r2, r2
1004e13c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
1004e13e:	687b      	ldr	r3, [r7, #4]
1004e140:	0018      	movs	r0, r3
1004e142:	f000 f8f1 	bl	1004e328 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
1004e146:	68bb      	ldr	r3, [r7, #8]
1004e148:	2220      	movs	r2, #32
1004e14a:	4013      	ands	r3, r2
1004e14c:	d00c      	beq.n	1004e168 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
1004e14e:	68fb      	ldr	r3, [r7, #12]
1004e150:	2220      	movs	r2, #32
1004e152:	4013      	ands	r3, r2
1004e154:	d008      	beq.n	1004e168 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
1004e156:	687b      	ldr	r3, [r7, #4]
1004e158:	681b      	ldr	r3, [r3, #0]
1004e15a:	2221      	movs	r2, #33	@ 0x21
1004e15c:	4252      	negs	r2, r2
1004e15e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
1004e160:	687b      	ldr	r3, [r7, #4]
1004e162:	0018      	movs	r0, r3
1004e164:	f000 f9de 	bl	1004e524 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
1004e168:	46c0      	nop			@ (mov r8, r8)
1004e16a:	46bd      	mov	sp, r7
1004e16c:	b004      	add	sp, #16
1004e16e:	bd80      	pop	{r7, pc}

1004e170 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
1004e170:	b580      	push	{r7, lr}
1004e172:	b084      	sub	sp, #16
1004e174:	af00      	add	r7, sp, #0
1004e176:	6078      	str	r0, [r7, #4]
1004e178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004e17a:	230f      	movs	r3, #15
1004e17c:	18fb      	adds	r3, r7, r3
1004e17e:	2200      	movs	r2, #0
1004e180:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
1004e182:	687b      	ldr	r3, [r7, #4]
1004e184:	2234      	movs	r2, #52	@ 0x34
1004e186:	5c9b      	ldrb	r3, [r3, r2]
1004e188:	2b01      	cmp	r3, #1
1004e18a:	d101      	bne.n	1004e190 <HAL_TIM_ConfigClockSource+0x20>
1004e18c:	2302      	movs	r3, #2
1004e18e:	e0a2      	b.n	1004e2d6 <HAL_TIM_ConfigClockSource+0x166>
1004e190:	687b      	ldr	r3, [r7, #4]
1004e192:	2234      	movs	r2, #52	@ 0x34
1004e194:	2101      	movs	r1, #1
1004e196:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
1004e198:	687b      	ldr	r3, [r7, #4]
1004e19a:	2235      	movs	r2, #53	@ 0x35
1004e19c:	2102      	movs	r1, #2
1004e19e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
1004e1a0:	687b      	ldr	r3, [r7, #4]
1004e1a2:	681b      	ldr	r3, [r3, #0]
1004e1a4:	689b      	ldr	r3, [r3, #8]
1004e1a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
1004e1a8:	68bb      	ldr	r3, [r7, #8]
1004e1aa:	4a4d      	ldr	r2, [pc, #308]	@ (1004e2e0 <HAL_TIM_ConfigClockSource+0x170>)
1004e1ac:	4013      	ands	r3, r2
1004e1ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
1004e1b0:	68bb      	ldr	r3, [r7, #8]
1004e1b2:	4a4c      	ldr	r2, [pc, #304]	@ (1004e2e4 <HAL_TIM_ConfigClockSource+0x174>)
1004e1b4:	4013      	ands	r3, r2
1004e1b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
1004e1b8:	687b      	ldr	r3, [r7, #4]
1004e1ba:	681b      	ldr	r3, [r3, #0]
1004e1bc:	68ba      	ldr	r2, [r7, #8]
1004e1be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
1004e1c0:	683b      	ldr	r3, [r7, #0]
1004e1c2:	681b      	ldr	r3, [r3, #0]
1004e1c4:	2280      	movs	r2, #128	@ 0x80
1004e1c6:	0192      	lsls	r2, r2, #6
1004e1c8:	4293      	cmp	r3, r2
1004e1ca:	d02f      	beq.n	1004e22c <HAL_TIM_ConfigClockSource+0xbc>
1004e1cc:	2280      	movs	r2, #128	@ 0x80
1004e1ce:	0192      	lsls	r2, r2, #6
1004e1d0:	4293      	cmp	r3, r2
1004e1d2:	d900      	bls.n	1004e1d6 <HAL_TIM_ConfigClockSource+0x66>
1004e1d4:	e06e      	b.n	1004e2b4 <HAL_TIM_ConfigClockSource+0x144>
1004e1d6:	2280      	movs	r2, #128	@ 0x80
1004e1d8:	0152      	lsls	r2, r2, #5
1004e1da:	4293      	cmp	r3, r2
1004e1dc:	d100      	bne.n	1004e1e0 <HAL_TIM_ConfigClockSource+0x70>
1004e1de:	e06e      	b.n	1004e2be <HAL_TIM_ConfigClockSource+0x14e>
1004e1e0:	2280      	movs	r2, #128	@ 0x80
1004e1e2:	0152      	lsls	r2, r2, #5
1004e1e4:	4293      	cmp	r3, r2
1004e1e6:	d865      	bhi.n	1004e2b4 <HAL_TIM_ConfigClockSource+0x144>
1004e1e8:	2b70      	cmp	r3, #112	@ 0x70
1004e1ea:	d008      	beq.n	1004e1fe <HAL_TIM_ConfigClockSource+0x8e>
1004e1ec:	d862      	bhi.n	1004e2b4 <HAL_TIM_ConfigClockSource+0x144>
1004e1ee:	2b60      	cmp	r3, #96	@ 0x60
1004e1f0:	d040      	beq.n	1004e274 <HAL_TIM_ConfigClockSource+0x104>
1004e1f2:	d85f      	bhi.n	1004e2b4 <HAL_TIM_ConfigClockSource+0x144>
1004e1f4:	2b40      	cmp	r3, #64	@ 0x40
1004e1f6:	d04d      	beq.n	1004e294 <HAL_TIM_ConfigClockSource+0x124>
1004e1f8:	2b50      	cmp	r3, #80	@ 0x50
1004e1fa:	d02b      	beq.n	1004e254 <HAL_TIM_ConfigClockSource+0xe4>
1004e1fc:	e05a      	b.n	1004e2b4 <HAL_TIM_ConfigClockSource+0x144>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
1004e1fe:	687b      	ldr	r3, [r7, #4]
1004e200:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
1004e202:	683b      	ldr	r3, [r7, #0]
1004e204:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
1004e206:	683b      	ldr	r3, [r7, #0]
1004e208:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
1004e20a:	683b      	ldr	r3, [r7, #0]
1004e20c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
1004e20e:	f000 f969 	bl	1004e4e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
1004e212:	687b      	ldr	r3, [r7, #4]
1004e214:	681b      	ldr	r3, [r3, #0]
1004e216:	689b      	ldr	r3, [r3, #8]
1004e218:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
1004e21a:	68bb      	ldr	r3, [r7, #8]
1004e21c:	2277      	movs	r2, #119	@ 0x77
1004e21e:	4313      	orrs	r3, r2
1004e220:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
1004e222:	687b      	ldr	r3, [r7, #4]
1004e224:	681b      	ldr	r3, [r3, #0]
1004e226:	68ba      	ldr	r2, [r7, #8]
1004e228:	609a      	str	r2, [r3, #8]
      break;
1004e22a:	e049      	b.n	1004e2c0 <HAL_TIM_ConfigClockSource+0x150>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
1004e22c:	687b      	ldr	r3, [r7, #4]
1004e22e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
1004e230:	683b      	ldr	r3, [r7, #0]
1004e232:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
1004e234:	683b      	ldr	r3, [r7, #0]
1004e236:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
1004e238:	683b      	ldr	r3, [r7, #0]
1004e23a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
1004e23c:	f000 f952 	bl	1004e4e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
1004e240:	687b      	ldr	r3, [r7, #4]
1004e242:	681b      	ldr	r3, [r3, #0]
1004e244:	689a      	ldr	r2, [r3, #8]
1004e246:	687b      	ldr	r3, [r7, #4]
1004e248:	681b      	ldr	r3, [r3, #0]
1004e24a:	2180      	movs	r1, #128	@ 0x80
1004e24c:	01c9      	lsls	r1, r1, #7
1004e24e:	430a      	orrs	r2, r1
1004e250:	609a      	str	r2, [r3, #8]
      break;
1004e252:	e035      	b.n	1004e2c0 <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
1004e254:	687b      	ldr	r3, [r7, #4]
1004e256:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
1004e258:	683b      	ldr	r3, [r7, #0]
1004e25a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
1004e25c:	683b      	ldr	r3, [r7, #0]
1004e25e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
1004e260:	001a      	movs	r2, r3
1004e262:	f000 f8c5 	bl	1004e3f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
1004e266:	687b      	ldr	r3, [r7, #4]
1004e268:	681b      	ldr	r3, [r3, #0]
1004e26a:	2150      	movs	r1, #80	@ 0x50
1004e26c:	0018      	movs	r0, r3
1004e26e:	f000 f91f 	bl	1004e4b0 <TIM_ITRx_SetConfig>
      break;
1004e272:	e025      	b.n	1004e2c0 <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
1004e274:	687b      	ldr	r3, [r7, #4]
1004e276:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
1004e278:	683b      	ldr	r3, [r7, #0]
1004e27a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
1004e27c:	683b      	ldr	r3, [r7, #0]
1004e27e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
1004e280:	001a      	movs	r2, r3
1004e282:	f000 f8e3 	bl	1004e44c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
1004e286:	687b      	ldr	r3, [r7, #4]
1004e288:	681b      	ldr	r3, [r3, #0]
1004e28a:	2160      	movs	r1, #96	@ 0x60
1004e28c:	0018      	movs	r0, r3
1004e28e:	f000 f90f 	bl	1004e4b0 <TIM_ITRx_SetConfig>
      break;
1004e292:	e015      	b.n	1004e2c0 <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
1004e294:	687b      	ldr	r3, [r7, #4]
1004e296:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
1004e298:	683b      	ldr	r3, [r7, #0]
1004e29a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
1004e29c:	683b      	ldr	r3, [r7, #0]
1004e29e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
1004e2a0:	001a      	movs	r2, r3
1004e2a2:	f000 f8a5 	bl	1004e3f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
1004e2a6:	687b      	ldr	r3, [r7, #4]
1004e2a8:	681b      	ldr	r3, [r3, #0]
1004e2aa:	2140      	movs	r1, #64	@ 0x40
1004e2ac:	0018      	movs	r0, r3
1004e2ae:	f000 f8ff 	bl	1004e4b0 <TIM_ITRx_SetConfig>
      break;
1004e2b2:	e005      	b.n	1004e2c0 <HAL_TIM_ConfigClockSource+0x150>
    }


    default:
      status = HAL_ERROR;
1004e2b4:	230f      	movs	r3, #15
1004e2b6:	18fb      	adds	r3, r7, r3
1004e2b8:	2201      	movs	r2, #1
1004e2ba:	701a      	strb	r2, [r3, #0]
      break;
1004e2bc:	e000      	b.n	1004e2c0 <HAL_TIM_ConfigClockSource+0x150>
      break;
1004e2be:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
1004e2c0:	687b      	ldr	r3, [r7, #4]
1004e2c2:	2235      	movs	r2, #53	@ 0x35
1004e2c4:	2101      	movs	r1, #1
1004e2c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
1004e2c8:	687b      	ldr	r3, [r7, #4]
1004e2ca:	2234      	movs	r2, #52	@ 0x34
1004e2cc:	2100      	movs	r1, #0
1004e2ce:	5499      	strb	r1, [r3, r2]

  return status;
1004e2d0:	230f      	movs	r3, #15
1004e2d2:	18fb      	adds	r3, r7, r3
1004e2d4:	781b      	ldrb	r3, [r3, #0]
}
1004e2d6:	0018      	movs	r0, r3
1004e2d8:	46bd      	mov	sp, r7
1004e2da:	b004      	add	sp, #16
1004e2dc:	bd80      	pop	{r7, pc}
1004e2de:	46c0      	nop			@ (mov r8, r8)
1004e2e0:	fffeff88 	.word	0xfffeff88
1004e2e4:	ffff00ff 	.word	0xffff00ff

1004e2e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
1004e2e8:	b580      	push	{r7, lr}
1004e2ea:	b082      	sub	sp, #8
1004e2ec:	af00      	add	r7, sp, #0
1004e2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
1004e2f0:	46c0      	nop			@ (mov r8, r8)
1004e2f2:	46bd      	mov	sp, r7
1004e2f4:	b002      	add	sp, #8
1004e2f6:	bd80      	pop	{r7, pc}

1004e2f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
1004e2f8:	b580      	push	{r7, lr}
1004e2fa:	b082      	sub	sp, #8
1004e2fc:	af00      	add	r7, sp, #0
1004e2fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
1004e300:	46c0      	nop			@ (mov r8, r8)
1004e302:	46bd      	mov	sp, r7
1004e304:	b002      	add	sp, #8
1004e306:	bd80      	pop	{r7, pc}

1004e308 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
1004e308:	b580      	push	{r7, lr}
1004e30a:	b082      	sub	sp, #8
1004e30c:	af00      	add	r7, sp, #0
1004e30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
1004e310:	46c0      	nop			@ (mov r8, r8)
1004e312:	46bd      	mov	sp, r7
1004e314:	b002      	add	sp, #8
1004e316:	bd80      	pop	{r7, pc}

1004e318 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
1004e318:	b580      	push	{r7, lr}
1004e31a:	b082      	sub	sp, #8
1004e31c:	af00      	add	r7, sp, #0
1004e31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
1004e320:	46c0      	nop			@ (mov r8, r8)
1004e322:	46bd      	mov	sp, r7
1004e324:	b002      	add	sp, #8
1004e326:	bd80      	pop	{r7, pc}

1004e328 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
1004e328:	b580      	push	{r7, lr}
1004e32a:	b082      	sub	sp, #8
1004e32c:	af00      	add	r7, sp, #0
1004e32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
1004e330:	46c0      	nop			@ (mov r8, r8)
1004e332:	46bd      	mov	sp, r7
1004e334:	b002      	add	sp, #8
1004e336:	bd80      	pop	{r7, pc}

1004e338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
1004e338:	b580      	push	{r7, lr}
1004e33a:	b084      	sub	sp, #16
1004e33c:	af00      	add	r7, sp, #0
1004e33e:	6078      	str	r0, [r7, #4]
1004e340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
1004e342:	687b      	ldr	r3, [r7, #4]
1004e344:	681b      	ldr	r3, [r3, #0]
1004e346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
1004e348:	687b      	ldr	r3, [r7, #4]
1004e34a:	4a25      	ldr	r2, [pc, #148]	@ (1004e3e0 <TIM_Base_SetConfig+0xa8>)
1004e34c:	4293      	cmp	r3, r2
1004e34e:	d108      	bne.n	1004e362 <TIM_Base_SetConfig+0x2a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
1004e350:	68fb      	ldr	r3, [r7, #12]
1004e352:	2270      	movs	r2, #112	@ 0x70
1004e354:	4393      	bics	r3, r2
1004e356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
1004e358:	683b      	ldr	r3, [r7, #0]
1004e35a:	685b      	ldr	r3, [r3, #4]
1004e35c:	68fa      	ldr	r2, [r7, #12]
1004e35e:	4313      	orrs	r3, r2
1004e360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
1004e362:	687b      	ldr	r3, [r7, #4]
1004e364:	4a1e      	ldr	r2, [pc, #120]	@ (1004e3e0 <TIM_Base_SetConfig+0xa8>)
1004e366:	4293      	cmp	r3, r2
1004e368:	d007      	beq.n	1004e37a <TIM_Base_SetConfig+0x42>
1004e36a:	687b      	ldr	r3, [r7, #4]
1004e36c:	4a1d      	ldr	r2, [pc, #116]	@ (1004e3e4 <TIM_Base_SetConfig+0xac>)
1004e36e:	4293      	cmp	r3, r2
1004e370:	d003      	beq.n	1004e37a <TIM_Base_SetConfig+0x42>
1004e372:	687b      	ldr	r3, [r7, #4]
1004e374:	4a1c      	ldr	r2, [pc, #112]	@ (1004e3e8 <TIM_Base_SetConfig+0xb0>)
1004e376:	4293      	cmp	r3, r2
1004e378:	d108      	bne.n	1004e38c <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
1004e37a:	68fb      	ldr	r3, [r7, #12]
1004e37c:	4a1b      	ldr	r2, [pc, #108]	@ (1004e3ec <TIM_Base_SetConfig+0xb4>)
1004e37e:	4013      	ands	r3, r2
1004e380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
1004e382:	683b      	ldr	r3, [r7, #0]
1004e384:	68db      	ldr	r3, [r3, #12]
1004e386:	68fa      	ldr	r2, [r7, #12]
1004e388:	4313      	orrs	r3, r2
1004e38a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
1004e38c:	68fb      	ldr	r3, [r7, #12]
1004e38e:	2280      	movs	r2, #128	@ 0x80
1004e390:	4393      	bics	r3, r2
1004e392:	001a      	movs	r2, r3
1004e394:	683b      	ldr	r3, [r7, #0]
1004e396:	695b      	ldr	r3, [r3, #20]
1004e398:	4313      	orrs	r3, r2
1004e39a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
1004e39c:	687b      	ldr	r3, [r7, #4]
1004e39e:	68fa      	ldr	r2, [r7, #12]
1004e3a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
1004e3a2:	683b      	ldr	r3, [r7, #0]
1004e3a4:	689a      	ldr	r2, [r3, #8]
1004e3a6:	687b      	ldr	r3, [r7, #4]
1004e3a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
1004e3aa:	683b      	ldr	r3, [r7, #0]
1004e3ac:	681a      	ldr	r2, [r3, #0]
1004e3ae:	687b      	ldr	r3, [r7, #4]
1004e3b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
1004e3b2:	687b      	ldr	r3, [r7, #4]
1004e3b4:	4a0a      	ldr	r2, [pc, #40]	@ (1004e3e0 <TIM_Base_SetConfig+0xa8>)
1004e3b6:	4293      	cmp	r3, r2
1004e3b8:	d007      	beq.n	1004e3ca <TIM_Base_SetConfig+0x92>
1004e3ba:	687b      	ldr	r3, [r7, #4]
1004e3bc:	4a09      	ldr	r2, [pc, #36]	@ (1004e3e4 <TIM_Base_SetConfig+0xac>)
1004e3be:	4293      	cmp	r3, r2
1004e3c0:	d003      	beq.n	1004e3ca <TIM_Base_SetConfig+0x92>
1004e3c2:	687b      	ldr	r3, [r7, #4]
1004e3c4:	4a08      	ldr	r2, [pc, #32]	@ (1004e3e8 <TIM_Base_SetConfig+0xb0>)
1004e3c6:	4293      	cmp	r3, r2
1004e3c8:	d103      	bne.n	1004e3d2 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
1004e3ca:	683b      	ldr	r3, [r7, #0]
1004e3cc:	691a      	ldr	r2, [r3, #16]
1004e3ce:	687b      	ldr	r3, [r7, #4]
1004e3d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
1004e3d2:	687b      	ldr	r3, [r7, #4]
1004e3d4:	2201      	movs	r2, #1
1004e3d6:	615a      	str	r2, [r3, #20]
}
1004e3d8:	46c0      	nop			@ (mov r8, r8)
1004e3da:	46bd      	mov	sp, r7
1004e3dc:	b004      	add	sp, #16
1004e3de:	bd80      	pop	{r7, pc}
1004e3e0:	40002000 	.word	0x40002000
1004e3e4:	40005000 	.word	0x40005000
1004e3e8:	40006000 	.word	0x40006000
1004e3ec:	fffffcff 	.word	0xfffffcff

1004e3f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
1004e3f0:	b580      	push	{r7, lr}
1004e3f2:	b086      	sub	sp, #24
1004e3f4:	af00      	add	r7, sp, #0
1004e3f6:	60f8      	str	r0, [r7, #12]
1004e3f8:	60b9      	str	r1, [r7, #8]
1004e3fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
1004e3fc:	68fb      	ldr	r3, [r7, #12]
1004e3fe:	6a1b      	ldr	r3, [r3, #32]
1004e400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
1004e402:	68fb      	ldr	r3, [r7, #12]
1004e404:	6a1b      	ldr	r3, [r3, #32]
1004e406:	2201      	movs	r2, #1
1004e408:	4393      	bics	r3, r2
1004e40a:	001a      	movs	r2, r3
1004e40c:	68fb      	ldr	r3, [r7, #12]
1004e40e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
1004e410:	68fb      	ldr	r3, [r7, #12]
1004e412:	699b      	ldr	r3, [r3, #24]
1004e414:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
1004e416:	693b      	ldr	r3, [r7, #16]
1004e418:	22f0      	movs	r2, #240	@ 0xf0
1004e41a:	4393      	bics	r3, r2
1004e41c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
1004e41e:	687b      	ldr	r3, [r7, #4]
1004e420:	011b      	lsls	r3, r3, #4
1004e422:	693a      	ldr	r2, [r7, #16]
1004e424:	4313      	orrs	r3, r2
1004e426:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
1004e428:	697b      	ldr	r3, [r7, #20]
1004e42a:	220a      	movs	r2, #10
1004e42c:	4393      	bics	r3, r2
1004e42e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
1004e430:	697a      	ldr	r2, [r7, #20]
1004e432:	68bb      	ldr	r3, [r7, #8]
1004e434:	4313      	orrs	r3, r2
1004e436:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
1004e438:	68fb      	ldr	r3, [r7, #12]
1004e43a:	693a      	ldr	r2, [r7, #16]
1004e43c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
1004e43e:	68fb      	ldr	r3, [r7, #12]
1004e440:	697a      	ldr	r2, [r7, #20]
1004e442:	621a      	str	r2, [r3, #32]
}
1004e444:	46c0      	nop			@ (mov r8, r8)
1004e446:	46bd      	mov	sp, r7
1004e448:	b006      	add	sp, #24
1004e44a:	bd80      	pop	{r7, pc}

1004e44c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
1004e44c:	b580      	push	{r7, lr}
1004e44e:	b086      	sub	sp, #24
1004e450:	af00      	add	r7, sp, #0
1004e452:	60f8      	str	r0, [r7, #12]
1004e454:	60b9      	str	r1, [r7, #8]
1004e456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
1004e458:	68fb      	ldr	r3, [r7, #12]
1004e45a:	6a1b      	ldr	r3, [r3, #32]
1004e45c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
1004e45e:	68fb      	ldr	r3, [r7, #12]
1004e460:	6a1b      	ldr	r3, [r3, #32]
1004e462:	2210      	movs	r2, #16
1004e464:	4393      	bics	r3, r2
1004e466:	001a      	movs	r2, r3
1004e468:	68fb      	ldr	r3, [r7, #12]
1004e46a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
1004e46c:	68fb      	ldr	r3, [r7, #12]
1004e46e:	699b      	ldr	r3, [r3, #24]
1004e470:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
1004e472:	693b      	ldr	r3, [r7, #16]
1004e474:	4a0d      	ldr	r2, [pc, #52]	@ (1004e4ac <TIM_TI2_ConfigInputStage+0x60>)
1004e476:	4013      	ands	r3, r2
1004e478:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
1004e47a:	687b      	ldr	r3, [r7, #4]
1004e47c:	031b      	lsls	r3, r3, #12
1004e47e:	693a      	ldr	r2, [r7, #16]
1004e480:	4313      	orrs	r3, r2
1004e482:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
1004e484:	697b      	ldr	r3, [r7, #20]
1004e486:	22a0      	movs	r2, #160	@ 0xa0
1004e488:	4393      	bics	r3, r2
1004e48a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
1004e48c:	68bb      	ldr	r3, [r7, #8]
1004e48e:	011b      	lsls	r3, r3, #4
1004e490:	697a      	ldr	r2, [r7, #20]
1004e492:	4313      	orrs	r3, r2
1004e494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
1004e496:	68fb      	ldr	r3, [r7, #12]
1004e498:	693a      	ldr	r2, [r7, #16]
1004e49a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
1004e49c:	68fb      	ldr	r3, [r7, #12]
1004e49e:	697a      	ldr	r2, [r7, #20]
1004e4a0:	621a      	str	r2, [r3, #32]
}
1004e4a2:	46c0      	nop			@ (mov r8, r8)
1004e4a4:	46bd      	mov	sp, r7
1004e4a6:	b006      	add	sp, #24
1004e4a8:	bd80      	pop	{r7, pc}
1004e4aa:	46c0      	nop			@ (mov r8, r8)
1004e4ac:	ffff0fff 	.word	0xffff0fff

1004e4b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
1004e4b0:	b580      	push	{r7, lr}
1004e4b2:	b084      	sub	sp, #16
1004e4b4:	af00      	add	r7, sp, #0
1004e4b6:	6078      	str	r0, [r7, #4]
1004e4b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
1004e4ba:	687b      	ldr	r3, [r7, #4]
1004e4bc:	689b      	ldr	r3, [r3, #8]
1004e4be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
1004e4c0:	68fb      	ldr	r3, [r7, #12]
1004e4c2:	2270      	movs	r2, #112	@ 0x70
1004e4c4:	4393      	bics	r3, r2
1004e4c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
1004e4c8:	683a      	ldr	r2, [r7, #0]
1004e4ca:	68fb      	ldr	r3, [r7, #12]
1004e4cc:	4313      	orrs	r3, r2
1004e4ce:	2207      	movs	r2, #7
1004e4d0:	4313      	orrs	r3, r2
1004e4d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
1004e4d4:	687b      	ldr	r3, [r7, #4]
1004e4d6:	68fa      	ldr	r2, [r7, #12]
1004e4d8:	609a      	str	r2, [r3, #8]
}
1004e4da:	46c0      	nop			@ (mov r8, r8)
1004e4dc:	46bd      	mov	sp, r7
1004e4de:	b004      	add	sp, #16
1004e4e0:	bd80      	pop	{r7, pc}
	...

1004e4e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
1004e4e4:	b580      	push	{r7, lr}
1004e4e6:	b086      	sub	sp, #24
1004e4e8:	af00      	add	r7, sp, #0
1004e4ea:	60f8      	str	r0, [r7, #12]
1004e4ec:	60b9      	str	r1, [r7, #8]
1004e4ee:	607a      	str	r2, [r7, #4]
1004e4f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
1004e4f2:	68fb      	ldr	r3, [r7, #12]
1004e4f4:	689b      	ldr	r3, [r3, #8]
1004e4f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
1004e4f8:	697b      	ldr	r3, [r7, #20]
1004e4fa:	4a09      	ldr	r2, [pc, #36]	@ (1004e520 <TIM_ETR_SetConfig+0x3c>)
1004e4fc:	4013      	ands	r3, r2
1004e4fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
1004e500:	683b      	ldr	r3, [r7, #0]
1004e502:	021a      	lsls	r2, r3, #8
1004e504:	687b      	ldr	r3, [r7, #4]
1004e506:	431a      	orrs	r2, r3
1004e508:	68bb      	ldr	r3, [r7, #8]
1004e50a:	4313      	orrs	r3, r2
1004e50c:	697a      	ldr	r2, [r7, #20]
1004e50e:	4313      	orrs	r3, r2
1004e510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
1004e512:	68fb      	ldr	r3, [r7, #12]
1004e514:	697a      	ldr	r2, [r7, #20]
1004e516:	609a      	str	r2, [r3, #8]
}
1004e518:	46c0      	nop			@ (mov r8, r8)
1004e51a:	46bd      	mov	sp, r7
1004e51c:	b006      	add	sp, #24
1004e51e:	bd80      	pop	{r7, pc}
1004e520:	ffff00ff 	.word	0xffff00ff

1004e524 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
1004e524:	b580      	push	{r7, lr}
1004e526:	b082      	sub	sp, #8
1004e528:	af00      	add	r7, sp, #0
1004e52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
1004e52c:	46c0      	nop			@ (mov r8, r8)
1004e52e:	46bd      	mov	sp, r7
1004e530:	b002      	add	sp, #8
1004e532:	bd80      	pop	{r7, pc}

1004e534 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
1004e534:	b580      	push	{r7, lr}
1004e536:	b082      	sub	sp, #8
1004e538:	af00      	add	r7, sp, #0
1004e53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
1004e53c:	46c0      	nop			@ (mov r8, r8)
1004e53e:	46bd      	mov	sp, r7
1004e540:	b002      	add	sp, #8
1004e542:	bd80      	pop	{r7, pc}

1004e544 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
1004e544:	b580      	push	{r7, lr}
1004e546:	b082      	sub	sp, #8
1004e548:	af00      	add	r7, sp, #0
1004e54a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
1004e54c:	687b      	ldr	r3, [r7, #4]
1004e54e:	2b00      	cmp	r3, #0
1004e550:	d101      	bne.n	1004e556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
1004e552:	2301      	movs	r3, #1
1004e554:	e055      	b.n	1004e602 <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
1004e556:	687b      	ldr	r3, [r7, #4]
1004e558:	2288      	movs	r2, #136	@ 0x88
1004e55a:	589b      	ldr	r3, [r3, r2]
1004e55c:	2b00      	cmp	r3, #0
1004e55e:	d116      	bne.n	1004e58e <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
1004e560:	687b      	ldr	r3, [r7, #4]
1004e562:	2284      	movs	r2, #132	@ 0x84
1004e564:	2100      	movs	r1, #0
1004e566:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
1004e568:	687b      	ldr	r3, [r7, #4]
1004e56a:	0018      	movs	r0, r3
1004e56c:	f000 f94e 	bl	1004e80c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
1004e570:	687b      	ldr	r3, [r7, #4]
1004e572:	22c4      	movs	r2, #196	@ 0xc4
1004e574:	589b      	ldr	r3, [r3, r2]
1004e576:	2b00      	cmp	r3, #0
1004e578:	d103      	bne.n	1004e582 <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
1004e57a:	687b      	ldr	r3, [r7, #4]
1004e57c:	21c4      	movs	r1, #196	@ 0xc4
1004e57e:	4a23      	ldr	r2, [pc, #140]	@ (1004e60c <HAL_UART_Init+0xc8>)
1004e580:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
1004e582:	687b      	ldr	r3, [r7, #4]
1004e584:	22c4      	movs	r2, #196	@ 0xc4
1004e586:	589b      	ldr	r3, [r3, r2]
1004e588:	687a      	ldr	r2, [r7, #4]
1004e58a:	0010      	movs	r0, r2
1004e58c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
1004e58e:	687b      	ldr	r3, [r7, #4]
1004e590:	2288      	movs	r2, #136	@ 0x88
1004e592:	2124      	movs	r1, #36	@ 0x24
1004e594:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
1004e596:	687b      	ldr	r3, [r7, #4]
1004e598:	681b      	ldr	r3, [r3, #0]
1004e59a:	681a      	ldr	r2, [r3, #0]
1004e59c:	687b      	ldr	r3, [r7, #4]
1004e59e:	681b      	ldr	r3, [r3, #0]
1004e5a0:	2101      	movs	r1, #1
1004e5a2:	438a      	bics	r2, r1
1004e5a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
1004e5a6:	687b      	ldr	r3, [r7, #4]
1004e5a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004e5aa:	2b00      	cmp	r3, #0
1004e5ac:	d003      	beq.n	1004e5b6 <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
1004e5ae:	687b      	ldr	r3, [r7, #4]
1004e5b0:	0018      	movs	r0, r3
1004e5b2:	f000 fae3 	bl	1004eb7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
1004e5b6:	687b      	ldr	r3, [r7, #4]
1004e5b8:	0018      	movs	r0, r3
1004e5ba:	f000 f977 	bl	1004e8ac <UART_SetConfig>
1004e5be:	0003      	movs	r3, r0
1004e5c0:	2b01      	cmp	r3, #1
1004e5c2:	d101      	bne.n	1004e5c8 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
1004e5c4:	2301      	movs	r3, #1
1004e5c6:	e01c      	b.n	1004e602 <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1004e5c8:	687b      	ldr	r3, [r7, #4]
1004e5ca:	681b      	ldr	r3, [r3, #0]
1004e5cc:	685a      	ldr	r2, [r3, #4]
1004e5ce:	687b      	ldr	r3, [r7, #4]
1004e5d0:	681b      	ldr	r3, [r3, #0]
1004e5d2:	490f      	ldr	r1, [pc, #60]	@ (1004e610 <HAL_UART_Init+0xcc>)
1004e5d4:	400a      	ands	r2, r1
1004e5d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
1004e5d8:	687b      	ldr	r3, [r7, #4]
1004e5da:	681b      	ldr	r3, [r3, #0]
1004e5dc:	689a      	ldr	r2, [r3, #8]
1004e5de:	687b      	ldr	r3, [r7, #4]
1004e5e0:	681b      	ldr	r3, [r3, #0]
1004e5e2:	212a      	movs	r1, #42	@ 0x2a
1004e5e4:	438a      	bics	r2, r1
1004e5e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
1004e5e8:	687b      	ldr	r3, [r7, #4]
1004e5ea:	681b      	ldr	r3, [r3, #0]
1004e5ec:	681a      	ldr	r2, [r3, #0]
1004e5ee:	687b      	ldr	r3, [r7, #4]
1004e5f0:	681b      	ldr	r3, [r3, #0]
1004e5f2:	2101      	movs	r1, #1
1004e5f4:	430a      	orrs	r2, r1
1004e5f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
1004e5f8:	687b      	ldr	r3, [r7, #4]
1004e5fa:	0018      	movs	r0, r3
1004e5fc:	f000 fb72 	bl	1004ece4 <UART_CheckIdleState>
1004e600:	0003      	movs	r3, r0
}
1004e602:	0018      	movs	r0, r3
1004e604:	46bd      	mov	sp, r7
1004e606:	b002      	add	sp, #8
1004e608:	bd80      	pop	{r7, pc}
1004e60a:	46c0      	nop			@ (mov r8, r8)
1004e60c:	100476d5 	.word	0x100476d5
1004e610:	ffffb7ff 	.word	0xffffb7ff

1004e614 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
1004e614:	b580      	push	{r7, lr}
1004e616:	b086      	sub	sp, #24
1004e618:	af00      	add	r7, sp, #0
1004e61a:	60f8      	str	r0, [r7, #12]
1004e61c:	607a      	str	r2, [r7, #4]
1004e61e:	230b      	movs	r3, #11
1004e620:	18fb      	adds	r3, r7, r3
1004e622:	1c0a      	adds	r2, r1, #0
1004e624:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004e626:	2317      	movs	r3, #23
1004e628:	18fb      	adds	r3, r7, r3
1004e62a:	2200      	movs	r2, #0
1004e62c:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
1004e62e:	687b      	ldr	r3, [r7, #4]
1004e630:	2b00      	cmp	r3, #0
1004e632:	d109      	bne.n	1004e648 <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1004e634:	68fb      	ldr	r3, [r7, #12]
1004e636:	2290      	movs	r2, #144	@ 0x90
1004e638:	589b      	ldr	r3, [r3, r2]
1004e63a:	2240      	movs	r2, #64	@ 0x40
1004e63c:	431a      	orrs	r2, r3
1004e63e:	68fb      	ldr	r3, [r7, #12]
1004e640:	2190      	movs	r1, #144	@ 0x90
1004e642:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
1004e644:	2301      	movs	r3, #1
1004e646:	e08f      	b.n	1004e768 <HAL_UART_RegisterCallback+0x154>
  }

  if (huart->gState == HAL_UART_STATE_READY)
1004e648:	68fb      	ldr	r3, [r7, #12]
1004e64a:	2288      	movs	r2, #136	@ 0x88
1004e64c:	589b      	ldr	r3, [r3, r2]
1004e64e:	2b20      	cmp	r3, #32
1004e650:	d157      	bne.n	1004e702 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
1004e652:	230b      	movs	r3, #11
1004e654:	18fb      	adds	r3, r7, r3
1004e656:	781b      	ldrb	r3, [r3, #0]
1004e658:	2b0c      	cmp	r3, #12
1004e65a:	d845      	bhi.n	1004e6e8 <HAL_UART_RegisterCallback+0xd4>
1004e65c:	009a      	lsls	r2, r3, #2
1004e65e:	4b44      	ldr	r3, [pc, #272]	@ (1004e770 <HAL_UART_RegisterCallback+0x15c>)
1004e660:	18d3      	adds	r3, r2, r3
1004e662:	681b      	ldr	r3, [r3, #0]
1004e664:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
1004e666:	68fb      	ldr	r3, [r7, #12]
1004e668:	2194      	movs	r1, #148	@ 0x94
1004e66a:	687a      	ldr	r2, [r7, #4]
1004e66c:	505a      	str	r2, [r3, r1]
        break;
1004e66e:	e078      	b.n	1004e762 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
1004e670:	68fb      	ldr	r3, [r7, #12]
1004e672:	2198      	movs	r1, #152	@ 0x98
1004e674:	687a      	ldr	r2, [r7, #4]
1004e676:	505a      	str	r2, [r3, r1]
        break;
1004e678:	e073      	b.n	1004e762 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
1004e67a:	68fb      	ldr	r3, [r7, #12]
1004e67c:	219c      	movs	r1, #156	@ 0x9c
1004e67e:	687a      	ldr	r2, [r7, #4]
1004e680:	505a      	str	r2, [r3, r1]
        break;
1004e682:	e06e      	b.n	1004e762 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
1004e684:	68fb      	ldr	r3, [r7, #12]
1004e686:	21a0      	movs	r1, #160	@ 0xa0
1004e688:	687a      	ldr	r2, [r7, #4]
1004e68a:	505a      	str	r2, [r3, r1]
        break;
1004e68c:	e069      	b.n	1004e762 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
1004e68e:	68fb      	ldr	r3, [r7, #12]
1004e690:	21a4      	movs	r1, #164	@ 0xa4
1004e692:	687a      	ldr	r2, [r7, #4]
1004e694:	505a      	str	r2, [r3, r1]
        break;
1004e696:	e064      	b.n	1004e762 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
1004e698:	68fb      	ldr	r3, [r7, #12]
1004e69a:	21a8      	movs	r1, #168	@ 0xa8
1004e69c:	687a      	ldr	r2, [r7, #4]
1004e69e:	505a      	str	r2, [r3, r1]
        break;
1004e6a0:	e05f      	b.n	1004e762 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
1004e6a2:	68fb      	ldr	r3, [r7, #12]
1004e6a4:	21ac      	movs	r1, #172	@ 0xac
1004e6a6:	687a      	ldr	r2, [r7, #4]
1004e6a8:	505a      	str	r2, [r3, r1]
        break;
1004e6aa:	e05a      	b.n	1004e762 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
1004e6ac:	68fb      	ldr	r3, [r7, #12]
1004e6ae:	21b0      	movs	r1, #176	@ 0xb0
1004e6b0:	687a      	ldr	r2, [r7, #4]
1004e6b2:	505a      	str	r2, [r3, r1]
        break;
1004e6b4:	e055      	b.n	1004e762 <HAL_UART_RegisterCallback+0x14e>

#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
1004e6b6:	68fb      	ldr	r3, [r7, #12]
1004e6b8:	21b4      	movs	r1, #180	@ 0xb4
1004e6ba:	687a      	ldr	r2, [r7, #4]
1004e6bc:	505a      	str	r2, [r3, r1]
        break;
1004e6be:	e050      	b.n	1004e762 <HAL_UART_RegisterCallback+0x14e>

#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
1004e6c0:	68fb      	ldr	r3, [r7, #12]
1004e6c2:	21b8      	movs	r1, #184	@ 0xb8
1004e6c4:	687a      	ldr	r2, [r7, #4]
1004e6c6:	505a      	str	r2, [r3, r1]
        break;
1004e6c8:	e04b      	b.n	1004e762 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
1004e6ca:	68fb      	ldr	r3, [r7, #12]
1004e6cc:	21bc      	movs	r1, #188	@ 0xbc
1004e6ce:	687a      	ldr	r2, [r7, #4]
1004e6d0:	505a      	str	r2, [r3, r1]
        break;
1004e6d2:	e046      	b.n	1004e762 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
1004e6d4:	68fb      	ldr	r3, [r7, #12]
1004e6d6:	21c4      	movs	r1, #196	@ 0xc4
1004e6d8:	687a      	ldr	r2, [r7, #4]
1004e6da:	505a      	str	r2, [r3, r1]
        break;
1004e6dc:	e041      	b.n	1004e762 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
1004e6de:	68fb      	ldr	r3, [r7, #12]
1004e6e0:	21c8      	movs	r1, #200	@ 0xc8
1004e6e2:	687a      	ldr	r2, [r7, #4]
1004e6e4:	505a      	str	r2, [r3, r1]
        break;
1004e6e6:	e03c      	b.n	1004e762 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1004e6e8:	68fb      	ldr	r3, [r7, #12]
1004e6ea:	2290      	movs	r2, #144	@ 0x90
1004e6ec:	589b      	ldr	r3, [r3, r2]
1004e6ee:	2240      	movs	r2, #64	@ 0x40
1004e6f0:	431a      	orrs	r2, r3
1004e6f2:	68fb      	ldr	r3, [r7, #12]
1004e6f4:	2190      	movs	r1, #144	@ 0x90
1004e6f6:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
1004e6f8:	2317      	movs	r3, #23
1004e6fa:	18fb      	adds	r3, r7, r3
1004e6fc:	2201      	movs	r2, #1
1004e6fe:	701a      	strb	r2, [r3, #0]
        break;
1004e700:	e02f      	b.n	1004e762 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
1004e702:	68fb      	ldr	r3, [r7, #12]
1004e704:	2288      	movs	r2, #136	@ 0x88
1004e706:	589b      	ldr	r3, [r3, r2]
1004e708:	2b00      	cmp	r3, #0
1004e70a:	d11e      	bne.n	1004e74a <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
1004e70c:	230b      	movs	r3, #11
1004e70e:	18fb      	adds	r3, r7, r3
1004e710:	781b      	ldrb	r3, [r3, #0]
1004e712:	2b0b      	cmp	r3, #11
1004e714:	d002      	beq.n	1004e71c <HAL_UART_RegisterCallback+0x108>
1004e716:	2b0c      	cmp	r3, #12
1004e718:	d005      	beq.n	1004e726 <HAL_UART_RegisterCallback+0x112>
1004e71a:	e009      	b.n	1004e730 <HAL_UART_RegisterCallback+0x11c>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
1004e71c:	68fb      	ldr	r3, [r7, #12]
1004e71e:	21c4      	movs	r1, #196	@ 0xc4
1004e720:	687a      	ldr	r2, [r7, #4]
1004e722:	505a      	str	r2, [r3, r1]
        break;
1004e724:	e01d      	b.n	1004e762 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
1004e726:	68fb      	ldr	r3, [r7, #12]
1004e728:	21c8      	movs	r1, #200	@ 0xc8
1004e72a:	687a      	ldr	r2, [r7, #4]
1004e72c:	505a      	str	r2, [r3, r1]
        break;
1004e72e:	e018      	b.n	1004e762 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1004e730:	68fb      	ldr	r3, [r7, #12]
1004e732:	2290      	movs	r2, #144	@ 0x90
1004e734:	589b      	ldr	r3, [r3, r2]
1004e736:	2240      	movs	r2, #64	@ 0x40
1004e738:	431a      	orrs	r2, r3
1004e73a:	68fb      	ldr	r3, [r7, #12]
1004e73c:	2190      	movs	r1, #144	@ 0x90
1004e73e:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
1004e740:	2317      	movs	r3, #23
1004e742:	18fb      	adds	r3, r7, r3
1004e744:	2201      	movs	r2, #1
1004e746:	701a      	strb	r2, [r3, #0]
        break;
1004e748:	e00b      	b.n	1004e762 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1004e74a:	68fb      	ldr	r3, [r7, #12]
1004e74c:	2290      	movs	r2, #144	@ 0x90
1004e74e:	589b      	ldr	r3, [r3, r2]
1004e750:	2240      	movs	r2, #64	@ 0x40
1004e752:	431a      	orrs	r2, r3
1004e754:	68fb      	ldr	r3, [r7, #12]
1004e756:	2190      	movs	r1, #144	@ 0x90
1004e758:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
1004e75a:	2317      	movs	r3, #23
1004e75c:	18fb      	adds	r3, r7, r3
1004e75e:	2201      	movs	r2, #1
1004e760:	701a      	strb	r2, [r3, #0]
  }

  return status;
1004e762:	2317      	movs	r3, #23
1004e764:	18fb      	adds	r3, r7, r3
1004e766:	781b      	ldrb	r3, [r3, #0]
}
1004e768:	0018      	movs	r0, r3
1004e76a:	46bd      	mov	sp, r7
1004e76c:	b006      	add	sp, #24
1004e76e:	bd80      	pop	{r7, pc}
1004e770:	1006a0f0 	.word	0x1006a0f0

1004e774 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
1004e774:	b580      	push	{r7, lr}
1004e776:	b082      	sub	sp, #8
1004e778:	af00      	add	r7, sp, #0
1004e77a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
1004e77c:	46c0      	nop			@ (mov r8, r8)
1004e77e:	46bd      	mov	sp, r7
1004e780:	b002      	add	sp, #8
1004e782:	bd80      	pop	{r7, pc}

1004e784 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
1004e784:	b580      	push	{r7, lr}
1004e786:	b082      	sub	sp, #8
1004e788:	af00      	add	r7, sp, #0
1004e78a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
1004e78c:	46c0      	nop			@ (mov r8, r8)
1004e78e:	46bd      	mov	sp, r7
1004e790:	b002      	add	sp, #8
1004e792:	bd80      	pop	{r7, pc}

1004e794 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
1004e794:	b580      	push	{r7, lr}
1004e796:	b082      	sub	sp, #8
1004e798:	af00      	add	r7, sp, #0
1004e79a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
1004e79c:	46c0      	nop			@ (mov r8, r8)
1004e79e:	46bd      	mov	sp, r7
1004e7a0:	b002      	add	sp, #8
1004e7a2:	bd80      	pop	{r7, pc}

1004e7a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
1004e7a4:	b580      	push	{r7, lr}
1004e7a6:	b082      	sub	sp, #8
1004e7a8:	af00      	add	r7, sp, #0
1004e7aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
1004e7ac:	46c0      	nop			@ (mov r8, r8)
1004e7ae:	46bd      	mov	sp, r7
1004e7b0:	b002      	add	sp, #8
1004e7b2:	bd80      	pop	{r7, pc}

1004e7b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
1004e7b4:	b580      	push	{r7, lr}
1004e7b6:	b082      	sub	sp, #8
1004e7b8:	af00      	add	r7, sp, #0
1004e7ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
1004e7bc:	46c0      	nop			@ (mov r8, r8)
1004e7be:	46bd      	mov	sp, r7
1004e7c0:	b002      	add	sp, #8
1004e7c2:	bd80      	pop	{r7, pc}

1004e7c4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
1004e7c4:	b580      	push	{r7, lr}
1004e7c6:	b082      	sub	sp, #8
1004e7c8:	af00      	add	r7, sp, #0
1004e7ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
1004e7cc:	46c0      	nop			@ (mov r8, r8)
1004e7ce:	46bd      	mov	sp, r7
1004e7d0:	b002      	add	sp, #8
1004e7d2:	bd80      	pop	{r7, pc}

1004e7d4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
1004e7d4:	b580      	push	{r7, lr}
1004e7d6:	b082      	sub	sp, #8
1004e7d8:	af00      	add	r7, sp, #0
1004e7da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
1004e7dc:	46c0      	nop			@ (mov r8, r8)
1004e7de:	46bd      	mov	sp, r7
1004e7e0:	b002      	add	sp, #8
1004e7e2:	bd80      	pop	{r7, pc}

1004e7e4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
1004e7e4:	b580      	push	{r7, lr}
1004e7e6:	b082      	sub	sp, #8
1004e7e8:	af00      	add	r7, sp, #0
1004e7ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
1004e7ec:	46c0      	nop			@ (mov r8, r8)
1004e7ee:	46bd      	mov	sp, r7
1004e7f0:	b002      	add	sp, #8
1004e7f2:	bd80      	pop	{r7, pc}

1004e7f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
1004e7f4:	b580      	push	{r7, lr}
1004e7f6:	b082      	sub	sp, #8
1004e7f8:	af00      	add	r7, sp, #0
1004e7fa:	6078      	str	r0, [r7, #4]
1004e7fc:	000a      	movs	r2, r1
1004e7fe:	1cbb      	adds	r3, r7, #2
1004e800:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
1004e802:	46c0      	nop			@ (mov r8, r8)
1004e804:	46bd      	mov	sp, r7
1004e806:	b002      	add	sp, #8
1004e808:	bd80      	pop	{r7, pc}
	...

1004e80c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
1004e80c:	b580      	push	{r7, lr}
1004e80e:	b082      	sub	sp, #8
1004e810:	af00      	add	r7, sp, #0
1004e812:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
1004e814:	687b      	ldr	r3, [r7, #4]
1004e816:	2194      	movs	r1, #148	@ 0x94
1004e818:	4a18      	ldr	r2, [pc, #96]	@ (1004e87c <UART_InitCallbacksToDefault+0x70>)
1004e81a:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
1004e81c:	687b      	ldr	r3, [r7, #4]
1004e81e:	2198      	movs	r1, #152	@ 0x98
1004e820:	4a17      	ldr	r2, [pc, #92]	@ (1004e880 <UART_InitCallbacksToDefault+0x74>)
1004e822:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
1004e824:	687b      	ldr	r3, [r7, #4]
1004e826:	219c      	movs	r1, #156	@ 0x9c
1004e828:	4a16      	ldr	r2, [pc, #88]	@ (1004e884 <UART_InitCallbacksToDefault+0x78>)
1004e82a:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
1004e82c:	687b      	ldr	r3, [r7, #4]
1004e82e:	21a0      	movs	r1, #160	@ 0xa0
1004e830:	4a15      	ldr	r2, [pc, #84]	@ (1004e888 <UART_InitCallbacksToDefault+0x7c>)
1004e832:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
1004e834:	687b      	ldr	r3, [r7, #4]
1004e836:	21a4      	movs	r1, #164	@ 0xa4
1004e838:	4a14      	ldr	r2, [pc, #80]	@ (1004e88c <UART_InitCallbacksToDefault+0x80>)
1004e83a:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
1004e83c:	687b      	ldr	r3, [r7, #4]
1004e83e:	21a8      	movs	r1, #168	@ 0xa8
1004e840:	4a13      	ldr	r2, [pc, #76]	@ (1004e890 <UART_InitCallbacksToDefault+0x84>)
1004e842:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
1004e844:	687b      	ldr	r3, [r7, #4]
1004e846:	21ac      	movs	r1, #172	@ 0xac
1004e848:	4a12      	ldr	r2, [pc, #72]	@ (1004e894 <UART_InitCallbacksToDefault+0x88>)
1004e84a:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
1004e84c:	687b      	ldr	r3, [r7, #4]
1004e84e:	21b0      	movs	r1, #176	@ 0xb0
1004e850:	4a11      	ldr	r2, [pc, #68]	@ (1004e898 <UART_InitCallbacksToDefault+0x8c>)
1004e852:	505a      	str	r2, [r3, r1]
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
1004e854:	687b      	ldr	r3, [r7, #4]
1004e856:	21b4      	movs	r1, #180	@ 0xb4
1004e858:	4a10      	ldr	r2, [pc, #64]	@ (1004e89c <UART_InitCallbacksToDefault+0x90>)
1004e85a:	505a      	str	r2, [r3, r1]
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
1004e85c:	687b      	ldr	r3, [r7, #4]
1004e85e:	21b8      	movs	r1, #184	@ 0xb8
1004e860:	4a0f      	ldr	r2, [pc, #60]	@ (1004e8a0 <UART_InitCallbacksToDefault+0x94>)
1004e862:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
1004e864:	687b      	ldr	r3, [r7, #4]
1004e866:	21bc      	movs	r1, #188	@ 0xbc
1004e868:	4a0e      	ldr	r2, [pc, #56]	@ (1004e8a4 <UART_InitCallbacksToDefault+0x98>)
1004e86a:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
1004e86c:	687b      	ldr	r3, [r7, #4]
1004e86e:	21c0      	movs	r1, #192	@ 0xc0
1004e870:	4a0d      	ldr	r2, [pc, #52]	@ (1004e8a8 <UART_InitCallbacksToDefault+0x9c>)
1004e872:	505a      	str	r2, [r3, r1]

}
1004e874:	46c0      	nop			@ (mov r8, r8)
1004e876:	46bd      	mov	sp, r7
1004e878:	b002      	add	sp, #8
1004e87a:	bd80      	pop	{r7, pc}
1004e87c:	1004e785 	.word	0x1004e785
1004e880:	1004e775 	.word	0x1004e775
1004e884:	1004e7a5 	.word	0x1004e7a5
1004e888:	1004e795 	.word	0x1004e795
1004e88c:	1004e7b5 	.word	0x1004e7b5
1004e890:	1004e7c5 	.word	0x1004e7c5
1004e894:	1004e7d5 	.word	0x1004e7d5
1004e898:	1004e7e5 	.word	0x1004e7e5
1004e89c:	1004efe5 	.word	0x1004efe5
1004e8a0:	1004eff5 	.word	0x1004eff5
1004e8a4:	1004f005 	.word	0x1004f005
1004e8a8:	1004e7f5 	.word	0x1004e7f5

1004e8ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
1004e8ac:	b5b0      	push	{r4, r5, r7, lr}
1004e8ae:	b090      	sub	sp, #64	@ 0x40
1004e8b0:	af00      	add	r7, sp, #0
1004e8b2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
1004e8b4:	231b      	movs	r3, #27
1004e8b6:	2220      	movs	r2, #32
1004e8b8:	189b      	adds	r3, r3, r2
1004e8ba:	19db      	adds	r3, r3, r7
1004e8bc:	2200      	movs	r2, #0
1004e8be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
1004e8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e8c2:	689a      	ldr	r2, [r3, #8]
1004e8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e8c6:	691b      	ldr	r3, [r3, #16]
1004e8c8:	431a      	orrs	r2, r3
1004e8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e8cc:	695b      	ldr	r3, [r3, #20]
1004e8ce:	431a      	orrs	r2, r3
1004e8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e8d2:	69db      	ldr	r3, [r3, #28]
1004e8d4:	4313      	orrs	r3, r2
1004e8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
1004e8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e8da:	681b      	ldr	r3, [r3, #0]
1004e8dc:	681b      	ldr	r3, [r3, #0]
1004e8de:	4aa1      	ldr	r2, [pc, #644]	@ (1004eb64 <UART_SetConfig+0x2b8>)
1004e8e0:	4013      	ands	r3, r2
1004e8e2:	0019      	movs	r1, r3
1004e8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e8e6:	681a      	ldr	r2, [r3, #0]
1004e8e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004e8ea:	430b      	orrs	r3, r1
1004e8ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
1004e8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e8f0:	681b      	ldr	r3, [r3, #0]
1004e8f2:	685b      	ldr	r3, [r3, #4]
1004e8f4:	4a9c      	ldr	r2, [pc, #624]	@ (1004eb68 <UART_SetConfig+0x2bc>)
1004e8f6:	4013      	ands	r3, r2
1004e8f8:	0018      	movs	r0, r3
1004e8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e8fc:	68d9      	ldr	r1, [r3, #12]
1004e8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e900:	681a      	ldr	r2, [r3, #0]
1004e902:	0003      	movs	r3, r0
1004e904:	430b      	orrs	r3, r1
1004e906:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
1004e908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e90a:	699b      	ldr	r3, [r3, #24]
1004e90c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
1004e90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e910:	681b      	ldr	r3, [r3, #0]
1004e912:	4a96      	ldr	r2, [pc, #600]	@ (1004eb6c <UART_SetConfig+0x2c0>)
1004e914:	4293      	cmp	r3, r2
1004e916:	d004      	beq.n	1004e922 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
1004e918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e91a:	6a1b      	ldr	r3, [r3, #32]
1004e91c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004e91e:	4313      	orrs	r3, r2
1004e920:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
1004e922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e924:	681b      	ldr	r3, [r3, #0]
1004e926:	689b      	ldr	r3, [r3, #8]
1004e928:	4a91      	ldr	r2, [pc, #580]	@ (1004eb70 <UART_SetConfig+0x2c4>)
1004e92a:	4013      	ands	r3, r2
1004e92c:	0019      	movs	r1, r3
1004e92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e930:	681a      	ldr	r2, [r3, #0]
1004e932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004e934:	430b      	orrs	r3, r1
1004e936:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
1004e938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e93a:	681b      	ldr	r3, [r3, #0]
1004e93c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004e93e:	220f      	movs	r2, #15
1004e940:	4393      	bics	r3, r2
1004e942:	0018      	movs	r0, r3
1004e944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e946:	6a59      	ldr	r1, [r3, #36]	@ 0x24
1004e948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e94a:	681a      	ldr	r2, [r3, #0]
1004e94c:	0003      	movs	r3, r0
1004e94e:	430b      	orrs	r3, r1
1004e950:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
1004e952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e954:	681b      	ldr	r3, [r3, #0]
1004e956:	4a85      	ldr	r2, [pc, #532]	@ (1004eb6c <UART_SetConfig+0x2c0>)
1004e958:	4293      	cmp	r3, r2
1004e95a:	d16d      	bne.n	1004ea38 <UART_SetConfig+0x18c>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
1004e95c:	2010      	movs	r0, #16
1004e95e:	f7ff f9b7 	bl	1004dcd0 <HAL_RCCEx_GetPeriphCLKFreq>
1004e962:	0003      	movs	r3, r0
1004e964:	637b      	str	r3, [r7, #52]	@ 0x34
#else
    pclk = UART_PERIPHCLK;
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
1004e966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004e968:	2b00      	cmp	r3, #0
1004e96a:	d100      	bne.n	1004e96e <UART_SetConfig+0xc2>
1004e96c:	e0e3      	b.n	1004eb36 <UART_SetConfig+0x28a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
1004e96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e970:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004e972:	4b80      	ldr	r3, [pc, #512]	@ (1004eb74 <UART_SetConfig+0x2c8>)
1004e974:	0052      	lsls	r2, r2, #1
1004e976:	5ad3      	ldrh	r3, [r2, r3]
1004e978:	0019      	movs	r1, r3
1004e97a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004e97c:	f7f1 fc60 	bl	10040240 <__udivsi3>
1004e980:	0003      	movs	r3, r0
1004e982:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
1004e984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e986:	685a      	ldr	r2, [r3, #4]
1004e988:	0013      	movs	r3, r2
1004e98a:	005b      	lsls	r3, r3, #1
1004e98c:	189b      	adds	r3, r3, r2
1004e98e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004e990:	429a      	cmp	r2, r3
1004e992:	d305      	bcc.n	1004e9a0 <UART_SetConfig+0xf4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
1004e994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e996:	685b      	ldr	r3, [r3, #4]
1004e998:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
1004e99a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004e99c:	429a      	cmp	r2, r3
1004e99e:	d906      	bls.n	1004e9ae <UART_SetConfig+0x102>
      {
        ret = HAL_ERROR;
1004e9a0:	231b      	movs	r3, #27
1004e9a2:	2220      	movs	r2, #32
1004e9a4:	189b      	adds	r3, r3, r2
1004e9a6:	19db      	adds	r3, r3, r7
1004e9a8:	2201      	movs	r2, #1
1004e9aa:	701a      	strb	r2, [r3, #0]
1004e9ac:	e0c3      	b.n	1004eb36 <UART_SetConfig+0x28a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1004e9ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004e9b0:	61bb      	str	r3, [r7, #24]
1004e9b2:	2300      	movs	r3, #0
1004e9b4:	61fb      	str	r3, [r7, #28]
1004e9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e9b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004e9ba:	4b6e      	ldr	r3, [pc, #440]	@ (1004eb74 <UART_SetConfig+0x2c8>)
1004e9bc:	0052      	lsls	r2, r2, #1
1004e9be:	5ad3      	ldrh	r3, [r2, r3]
1004e9c0:	613b      	str	r3, [r7, #16]
1004e9c2:	2300      	movs	r3, #0
1004e9c4:	617b      	str	r3, [r7, #20]
1004e9c6:	693a      	ldr	r2, [r7, #16]
1004e9c8:	697b      	ldr	r3, [r7, #20]
1004e9ca:	69b8      	ldr	r0, [r7, #24]
1004e9cc:	69f9      	ldr	r1, [r7, #28]
1004e9ce:	f7f1 fe15 	bl	100405fc <__aeabi_uldivmod>
1004e9d2:	0002      	movs	r2, r0
1004e9d4:	000b      	movs	r3, r1
1004e9d6:	0e11      	lsrs	r1, r2, #24
1004e9d8:	021d      	lsls	r5, r3, #8
1004e9da:	430d      	orrs	r5, r1
1004e9dc:	0214      	lsls	r4, r2, #8
1004e9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e9e0:	685b      	ldr	r3, [r3, #4]
1004e9e2:	085b      	lsrs	r3, r3, #1
1004e9e4:	60bb      	str	r3, [r7, #8]
1004e9e6:	2300      	movs	r3, #0
1004e9e8:	60fb      	str	r3, [r7, #12]
1004e9ea:	68b8      	ldr	r0, [r7, #8]
1004e9ec:	68f9      	ldr	r1, [r7, #12]
1004e9ee:	1900      	adds	r0, r0, r4
1004e9f0:	4169      	adcs	r1, r5
1004e9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e9f4:	685b      	ldr	r3, [r3, #4]
1004e9f6:	603b      	str	r3, [r7, #0]
1004e9f8:	2300      	movs	r3, #0
1004e9fa:	607b      	str	r3, [r7, #4]
1004e9fc:	683a      	ldr	r2, [r7, #0]
1004e9fe:	687b      	ldr	r3, [r7, #4]
1004ea00:	f7f1 fdfc 	bl	100405fc <__aeabi_uldivmod>
1004ea04:	0002      	movs	r2, r0
1004ea06:	000b      	movs	r3, r1
1004ea08:	0013      	movs	r3, r2
1004ea0a:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
1004ea0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004ea0e:	23c0      	movs	r3, #192	@ 0xc0
1004ea10:	009b      	lsls	r3, r3, #2
1004ea12:	429a      	cmp	r2, r3
1004ea14:	d309      	bcc.n	1004ea2a <UART_SetConfig+0x17e>
1004ea16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004ea18:	2380      	movs	r3, #128	@ 0x80
1004ea1a:	035b      	lsls	r3, r3, #13
1004ea1c:	429a      	cmp	r2, r3
1004ea1e:	d204      	bcs.n	1004ea2a <UART_SetConfig+0x17e>
        {
          huart->Instance->BRR = usartdiv;
1004ea20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ea22:	681b      	ldr	r3, [r3, #0]
1004ea24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004ea26:	60da      	str	r2, [r3, #12]
1004ea28:	e085      	b.n	1004eb36 <UART_SetConfig+0x28a>
        }
        else
        {
          ret = HAL_ERROR;
1004ea2a:	231b      	movs	r3, #27
1004ea2c:	2220      	movs	r2, #32
1004ea2e:	189b      	adds	r3, r3, r2
1004ea30:	19db      	adds	r3, r3, r7
1004ea32:	2201      	movs	r2, #1
1004ea34:	701a      	strb	r2, [r3, #0]
1004ea36:	e07e      	b.n	1004eb36 <UART_SetConfig+0x28a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
1004ea38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ea3a:	69da      	ldr	r2, [r3, #28]
1004ea3c:	2380      	movs	r3, #128	@ 0x80
1004ea3e:	021b      	lsls	r3, r3, #8
1004ea40:	429a      	cmp	r2, r3
1004ea42:	d148      	bne.n	1004ead6 <UART_SetConfig+0x22a>
  {
    pclk = UART_PERIPHCLK;
1004ea44:	4b4c      	ldr	r3, [pc, #304]	@ (1004eb78 <UART_SetConfig+0x2cc>)
1004ea46:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
1004ea48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004ea4a:	2b00      	cmp	r3, #0
1004ea4c:	d100      	bne.n	1004ea50 <UART_SetConfig+0x1a4>
1004ea4e:	e072      	b.n	1004eb36 <UART_SetConfig+0x28a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1004ea50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ea52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004ea54:	4b47      	ldr	r3, [pc, #284]	@ (1004eb74 <UART_SetConfig+0x2c8>)
1004ea56:	0052      	lsls	r2, r2, #1
1004ea58:	5ad3      	ldrh	r3, [r2, r3]
1004ea5a:	0019      	movs	r1, r3
1004ea5c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004ea5e:	f7f1 fbef 	bl	10040240 <__udivsi3>
1004ea62:	0003      	movs	r3, r0
1004ea64:	005a      	lsls	r2, r3, #1
1004ea66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ea68:	685b      	ldr	r3, [r3, #4]
1004ea6a:	085b      	lsrs	r3, r3, #1
1004ea6c:	18d2      	adds	r2, r2, r3
1004ea6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ea70:	685b      	ldr	r3, [r3, #4]
1004ea72:	0019      	movs	r1, r3
1004ea74:	0010      	movs	r0, r2
1004ea76:	f7f1 fbe3 	bl	10040240 <__udivsi3>
1004ea7a:	0003      	movs	r3, r0
1004ea7c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1004ea7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004ea80:	2b0f      	cmp	r3, #15
1004ea82:	d921      	bls.n	1004eac8 <UART_SetConfig+0x21c>
1004ea84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004ea86:	2380      	movs	r3, #128	@ 0x80
1004ea88:	025b      	lsls	r3, r3, #9
1004ea8a:	429a      	cmp	r2, r3
1004ea8c:	d21c      	bcs.n	1004eac8 <UART_SetConfig+0x21c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
1004ea8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004ea90:	b29a      	uxth	r2, r3
1004ea92:	200e      	movs	r0, #14
1004ea94:	2420      	movs	r4, #32
1004ea96:	1903      	adds	r3, r0, r4
1004ea98:	19db      	adds	r3, r3, r7
1004ea9a:	210f      	movs	r1, #15
1004ea9c:	438a      	bics	r2, r1
1004ea9e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
1004eaa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004eaa2:	085b      	lsrs	r3, r3, #1
1004eaa4:	b29b      	uxth	r3, r3
1004eaa6:	2207      	movs	r2, #7
1004eaa8:	4013      	ands	r3, r2
1004eaaa:	b299      	uxth	r1, r3
1004eaac:	1903      	adds	r3, r0, r4
1004eaae:	19db      	adds	r3, r3, r7
1004eab0:	1902      	adds	r2, r0, r4
1004eab2:	19d2      	adds	r2, r2, r7
1004eab4:	8812      	ldrh	r2, [r2, #0]
1004eab6:	430a      	orrs	r2, r1
1004eab8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
1004eaba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004eabc:	681b      	ldr	r3, [r3, #0]
1004eabe:	1902      	adds	r2, r0, r4
1004eac0:	19d2      	adds	r2, r2, r7
1004eac2:	8812      	ldrh	r2, [r2, #0]
1004eac4:	60da      	str	r2, [r3, #12]
1004eac6:	e036      	b.n	1004eb36 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
1004eac8:	231b      	movs	r3, #27
1004eaca:	2220      	movs	r2, #32
1004eacc:	189b      	adds	r3, r3, r2
1004eace:	19db      	adds	r3, r3, r7
1004ead0:	2201      	movs	r2, #1
1004ead2:	701a      	strb	r2, [r3, #0]
1004ead4:	e02f      	b.n	1004eb36 <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
1004ead6:	4b28      	ldr	r3, [pc, #160]	@ (1004eb78 <UART_SetConfig+0x2cc>)
1004ead8:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
1004eada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004eadc:	2b00      	cmp	r3, #0
1004eade:	d02a      	beq.n	1004eb36 <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1004eae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004eae2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004eae4:	4b23      	ldr	r3, [pc, #140]	@ (1004eb74 <UART_SetConfig+0x2c8>)
1004eae6:	0052      	lsls	r2, r2, #1
1004eae8:	5ad3      	ldrh	r3, [r2, r3]
1004eaea:	0019      	movs	r1, r3
1004eaec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004eaee:	f7f1 fba7 	bl	10040240 <__udivsi3>
1004eaf2:	0003      	movs	r3, r0
1004eaf4:	001a      	movs	r2, r3
1004eaf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004eaf8:	685b      	ldr	r3, [r3, #4]
1004eafa:	085b      	lsrs	r3, r3, #1
1004eafc:	18d2      	adds	r2, r2, r3
1004eafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004eb00:	685b      	ldr	r3, [r3, #4]
1004eb02:	0019      	movs	r1, r3
1004eb04:	0010      	movs	r0, r2
1004eb06:	f7f1 fb9b 	bl	10040240 <__udivsi3>
1004eb0a:	0003      	movs	r3, r0
1004eb0c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1004eb0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004eb10:	2b0f      	cmp	r3, #15
1004eb12:	d90a      	bls.n	1004eb2a <UART_SetConfig+0x27e>
1004eb14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004eb16:	2380      	movs	r3, #128	@ 0x80
1004eb18:	025b      	lsls	r3, r3, #9
1004eb1a:	429a      	cmp	r2, r3
1004eb1c:	d205      	bcs.n	1004eb2a <UART_SetConfig+0x27e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
1004eb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004eb20:	b29a      	uxth	r2, r3
1004eb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004eb24:	681b      	ldr	r3, [r3, #0]
1004eb26:	60da      	str	r2, [r3, #12]
1004eb28:	e005      	b.n	1004eb36 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
1004eb2a:	231b      	movs	r3, #27
1004eb2c:	2220      	movs	r2, #32
1004eb2e:	189b      	adds	r3, r3, r2
1004eb30:	19db      	adds	r3, r3, r7
1004eb32:	2201      	movs	r2, #1
1004eb34:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
1004eb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004eb38:	226a      	movs	r2, #106	@ 0x6a
1004eb3a:	2101      	movs	r1, #1
1004eb3c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
1004eb3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004eb40:	2268      	movs	r2, #104	@ 0x68
1004eb42:	2101      	movs	r1, #1
1004eb44:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
1004eb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004eb48:	2200      	movs	r2, #0
1004eb4a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
1004eb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004eb4e:	2200      	movs	r2, #0
1004eb50:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
1004eb52:	231b      	movs	r3, #27
1004eb54:	2220      	movs	r2, #32
1004eb56:	189b      	adds	r3, r3, r2
1004eb58:	19db      	adds	r3, r3, r7
1004eb5a:	781b      	ldrb	r3, [r3, #0]
}
1004eb5c:	0018      	movs	r0, r3
1004eb5e:	46bd      	mov	sp, r7
1004eb60:	b010      	add	sp, #64	@ 0x40
1004eb62:	bdb0      	pop	{r4, r5, r7, pc}
1004eb64:	cfff69f3 	.word	0xcfff69f3
1004eb68:	ffffcfff 	.word	0xffffcfff
1004eb6c:	41005000 	.word	0x41005000
1004eb70:	11fff4ff 	.word	0x11fff4ff
1004eb74:	1006a0d8 	.word	0x1006a0d8
1004eb78:	00f42400 	.word	0x00f42400

1004eb7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
1004eb7c:	b580      	push	{r7, lr}
1004eb7e:	b082      	sub	sp, #8
1004eb80:	af00      	add	r7, sp, #0
1004eb82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
1004eb84:	687b      	ldr	r3, [r7, #4]
1004eb86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004eb88:	2208      	movs	r2, #8
1004eb8a:	4013      	ands	r3, r2
1004eb8c:	d00b      	beq.n	1004eba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
1004eb8e:	687b      	ldr	r3, [r7, #4]
1004eb90:	681b      	ldr	r3, [r3, #0]
1004eb92:	685b      	ldr	r3, [r3, #4]
1004eb94:	4a4a      	ldr	r2, [pc, #296]	@ (1004ecc0 <UART_AdvFeatureConfig+0x144>)
1004eb96:	4013      	ands	r3, r2
1004eb98:	0019      	movs	r1, r3
1004eb9a:	687b      	ldr	r3, [r7, #4]
1004eb9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1004eb9e:	687b      	ldr	r3, [r7, #4]
1004eba0:	681b      	ldr	r3, [r3, #0]
1004eba2:	430a      	orrs	r2, r1
1004eba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
1004eba6:	687b      	ldr	r3, [r7, #4]
1004eba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004ebaa:	2201      	movs	r2, #1
1004ebac:	4013      	ands	r3, r2
1004ebae:	d00b      	beq.n	1004ebc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
1004ebb0:	687b      	ldr	r3, [r7, #4]
1004ebb2:	681b      	ldr	r3, [r3, #0]
1004ebb4:	685b      	ldr	r3, [r3, #4]
1004ebb6:	4a43      	ldr	r2, [pc, #268]	@ (1004ecc4 <UART_AdvFeatureConfig+0x148>)
1004ebb8:	4013      	ands	r3, r2
1004ebba:	0019      	movs	r1, r3
1004ebbc:	687b      	ldr	r3, [r7, #4]
1004ebbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004ebc0:	687b      	ldr	r3, [r7, #4]
1004ebc2:	681b      	ldr	r3, [r3, #0]
1004ebc4:	430a      	orrs	r2, r1
1004ebc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
1004ebc8:	687b      	ldr	r3, [r7, #4]
1004ebca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004ebcc:	2202      	movs	r2, #2
1004ebce:	4013      	ands	r3, r2
1004ebd0:	d00b      	beq.n	1004ebea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
1004ebd2:	687b      	ldr	r3, [r7, #4]
1004ebd4:	681b      	ldr	r3, [r3, #0]
1004ebd6:	685b      	ldr	r3, [r3, #4]
1004ebd8:	4a3b      	ldr	r2, [pc, #236]	@ (1004ecc8 <UART_AdvFeatureConfig+0x14c>)
1004ebda:	4013      	ands	r3, r2
1004ebdc:	0019      	movs	r1, r3
1004ebde:	687b      	ldr	r3, [r7, #4]
1004ebe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1004ebe2:	687b      	ldr	r3, [r7, #4]
1004ebe4:	681b      	ldr	r3, [r3, #0]
1004ebe6:	430a      	orrs	r2, r1
1004ebe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
1004ebea:	687b      	ldr	r3, [r7, #4]
1004ebec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004ebee:	2204      	movs	r2, #4
1004ebf0:	4013      	ands	r3, r2
1004ebf2:	d00b      	beq.n	1004ec0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
1004ebf4:	687b      	ldr	r3, [r7, #4]
1004ebf6:	681b      	ldr	r3, [r3, #0]
1004ebf8:	685b      	ldr	r3, [r3, #4]
1004ebfa:	4a34      	ldr	r2, [pc, #208]	@ (1004eccc <UART_AdvFeatureConfig+0x150>)
1004ebfc:	4013      	ands	r3, r2
1004ebfe:	0019      	movs	r1, r3
1004ec00:	687b      	ldr	r3, [r7, #4]
1004ec02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1004ec04:	687b      	ldr	r3, [r7, #4]
1004ec06:	681b      	ldr	r3, [r3, #0]
1004ec08:	430a      	orrs	r2, r1
1004ec0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
1004ec0c:	687b      	ldr	r3, [r7, #4]
1004ec0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004ec10:	2210      	movs	r2, #16
1004ec12:	4013      	ands	r3, r2
1004ec14:	d00b      	beq.n	1004ec2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
1004ec16:	687b      	ldr	r3, [r7, #4]
1004ec18:	681b      	ldr	r3, [r3, #0]
1004ec1a:	689b      	ldr	r3, [r3, #8]
1004ec1c:	4a2c      	ldr	r2, [pc, #176]	@ (1004ecd0 <UART_AdvFeatureConfig+0x154>)
1004ec1e:	4013      	ands	r3, r2
1004ec20:	0019      	movs	r1, r3
1004ec22:	687b      	ldr	r3, [r7, #4]
1004ec24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
1004ec26:	687b      	ldr	r3, [r7, #4]
1004ec28:	681b      	ldr	r3, [r3, #0]
1004ec2a:	430a      	orrs	r2, r1
1004ec2c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
1004ec2e:	687b      	ldr	r3, [r7, #4]
1004ec30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004ec32:	2220      	movs	r2, #32
1004ec34:	4013      	ands	r3, r2
1004ec36:	d00b      	beq.n	1004ec50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
1004ec38:	687b      	ldr	r3, [r7, #4]
1004ec3a:	681b      	ldr	r3, [r3, #0]
1004ec3c:	689b      	ldr	r3, [r3, #8]
1004ec3e:	4a25      	ldr	r2, [pc, #148]	@ (1004ecd4 <UART_AdvFeatureConfig+0x158>)
1004ec40:	4013      	ands	r3, r2
1004ec42:	0019      	movs	r1, r3
1004ec44:	687b      	ldr	r3, [r7, #4]
1004ec46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004ec48:	687b      	ldr	r3, [r7, #4]
1004ec4a:	681b      	ldr	r3, [r3, #0]
1004ec4c:	430a      	orrs	r2, r1
1004ec4e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
1004ec50:	687b      	ldr	r3, [r7, #4]
1004ec52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004ec54:	2240      	movs	r2, #64	@ 0x40
1004ec56:	4013      	ands	r3, r2
1004ec58:	d01d      	beq.n	1004ec96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
1004ec5a:	687b      	ldr	r3, [r7, #4]
1004ec5c:	681b      	ldr	r3, [r3, #0]
1004ec5e:	685b      	ldr	r3, [r3, #4]
1004ec60:	4a1d      	ldr	r2, [pc, #116]	@ (1004ecd8 <UART_AdvFeatureConfig+0x15c>)
1004ec62:	4013      	ands	r3, r2
1004ec64:	0019      	movs	r1, r3
1004ec66:	687b      	ldr	r3, [r7, #4]
1004ec68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004ec6a:	687b      	ldr	r3, [r7, #4]
1004ec6c:	681b      	ldr	r3, [r3, #0]
1004ec6e:	430a      	orrs	r2, r1
1004ec70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
1004ec72:	687b      	ldr	r3, [r7, #4]
1004ec74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004ec76:	2380      	movs	r3, #128	@ 0x80
1004ec78:	035b      	lsls	r3, r3, #13
1004ec7a:	429a      	cmp	r2, r3
1004ec7c:	d10b      	bne.n	1004ec96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
1004ec7e:	687b      	ldr	r3, [r7, #4]
1004ec80:	681b      	ldr	r3, [r3, #0]
1004ec82:	685b      	ldr	r3, [r3, #4]
1004ec84:	4a15      	ldr	r2, [pc, #84]	@ (1004ecdc <UART_AdvFeatureConfig+0x160>)
1004ec86:	4013      	ands	r3, r2
1004ec88:	0019      	movs	r1, r3
1004ec8a:	687b      	ldr	r3, [r7, #4]
1004ec8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
1004ec8e:	687b      	ldr	r3, [r7, #4]
1004ec90:	681b      	ldr	r3, [r3, #0]
1004ec92:	430a      	orrs	r2, r1
1004ec94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
1004ec96:	687b      	ldr	r3, [r7, #4]
1004ec98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004ec9a:	2280      	movs	r2, #128	@ 0x80
1004ec9c:	4013      	ands	r3, r2
1004ec9e:	d00b      	beq.n	1004ecb8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
1004eca0:	687b      	ldr	r3, [r7, #4]
1004eca2:	681b      	ldr	r3, [r3, #0]
1004eca4:	685b      	ldr	r3, [r3, #4]
1004eca6:	4a0e      	ldr	r2, [pc, #56]	@ (1004ece0 <UART_AdvFeatureConfig+0x164>)
1004eca8:	4013      	ands	r3, r2
1004ecaa:	0019      	movs	r1, r3
1004ecac:	687b      	ldr	r3, [r7, #4]
1004ecae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
1004ecb0:	687b      	ldr	r3, [r7, #4]
1004ecb2:	681b      	ldr	r3, [r3, #0]
1004ecb4:	430a      	orrs	r2, r1
1004ecb6:	605a      	str	r2, [r3, #4]
  }
}
1004ecb8:	46c0      	nop			@ (mov r8, r8)
1004ecba:	46bd      	mov	sp, r7
1004ecbc:	b002      	add	sp, #8
1004ecbe:	bd80      	pop	{r7, pc}
1004ecc0:	ffff7fff 	.word	0xffff7fff
1004ecc4:	fffdffff 	.word	0xfffdffff
1004ecc8:	fffeffff 	.word	0xfffeffff
1004eccc:	fffbffff 	.word	0xfffbffff
1004ecd0:	ffffefff 	.word	0xffffefff
1004ecd4:	ffffdfff 	.word	0xffffdfff
1004ecd8:	ffefffff 	.word	0xffefffff
1004ecdc:	ff9fffff 	.word	0xff9fffff
1004ece0:	fff7ffff 	.word	0xfff7ffff

1004ece4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
1004ece4:	b580      	push	{r7, lr}
1004ece6:	b092      	sub	sp, #72	@ 0x48
1004ece8:	af02      	add	r7, sp, #8
1004ecea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
1004ecec:	687b      	ldr	r3, [r7, #4]
1004ecee:	2290      	movs	r2, #144	@ 0x90
1004ecf0:	2100      	movs	r1, #0
1004ecf2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
1004ecf4:	f7f9 fbac 	bl	10048450 <HAL_GetTick>
1004ecf8:	0003      	movs	r3, r0
1004ecfa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
1004ecfc:	687b      	ldr	r3, [r7, #4]
1004ecfe:	681b      	ldr	r3, [r3, #0]
1004ed00:	681b      	ldr	r3, [r3, #0]
1004ed02:	2208      	movs	r2, #8
1004ed04:	4013      	ands	r3, r2
1004ed06:	2b08      	cmp	r3, #8
1004ed08:	d12d      	bne.n	1004ed66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1004ed0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004ed0c:	2280      	movs	r2, #128	@ 0x80
1004ed0e:	0391      	lsls	r1, r2, #14
1004ed10:	6878      	ldr	r0, [r7, #4]
1004ed12:	4a47      	ldr	r2, [pc, #284]	@ (1004ee30 <UART_CheckIdleState+0x14c>)
1004ed14:	9200      	str	r2, [sp, #0]
1004ed16:	2200      	movs	r2, #0
1004ed18:	f000 f88e 	bl	1004ee38 <UART_WaitOnFlagUntilTimeout>
1004ed1c:	1e03      	subs	r3, r0, #0
1004ed1e:	d022      	beq.n	1004ed66 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ed20:	f3ef 8310 	mrs	r3, PRIMASK
1004ed24:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
1004ed26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
1004ed28:	63bb      	str	r3, [r7, #56]	@ 0x38
1004ed2a:	2301      	movs	r3, #1
1004ed2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ed2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004ed30:	f383 8810 	msr	PRIMASK, r3
}
1004ed34:	46c0      	nop			@ (mov r8, r8)
1004ed36:	687b      	ldr	r3, [r7, #4]
1004ed38:	681b      	ldr	r3, [r3, #0]
1004ed3a:	681a      	ldr	r2, [r3, #0]
1004ed3c:	687b      	ldr	r3, [r7, #4]
1004ed3e:	681b      	ldr	r3, [r3, #0]
1004ed40:	2180      	movs	r1, #128	@ 0x80
1004ed42:	438a      	bics	r2, r1
1004ed44:	601a      	str	r2, [r3, #0]
1004ed46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ed48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ed4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004ed4c:	f383 8810 	msr	PRIMASK, r3
}
1004ed50:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
1004ed52:	687b      	ldr	r3, [r7, #4]
1004ed54:	2288      	movs	r2, #136	@ 0x88
1004ed56:	2120      	movs	r1, #32
1004ed58:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
1004ed5a:	687b      	ldr	r3, [r7, #4]
1004ed5c:	2284      	movs	r2, #132	@ 0x84
1004ed5e:	2100      	movs	r1, #0
1004ed60:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
1004ed62:	2303      	movs	r3, #3
1004ed64:	e060      	b.n	1004ee28 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
1004ed66:	687b      	ldr	r3, [r7, #4]
1004ed68:	681b      	ldr	r3, [r3, #0]
1004ed6a:	681b      	ldr	r3, [r3, #0]
1004ed6c:	2204      	movs	r2, #4
1004ed6e:	4013      	ands	r3, r2
1004ed70:	2b04      	cmp	r3, #4
1004ed72:	d146      	bne.n	1004ee02 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1004ed74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004ed76:	2280      	movs	r2, #128	@ 0x80
1004ed78:	03d1      	lsls	r1, r2, #15
1004ed7a:	6878      	ldr	r0, [r7, #4]
1004ed7c:	4a2c      	ldr	r2, [pc, #176]	@ (1004ee30 <UART_CheckIdleState+0x14c>)
1004ed7e:	9200      	str	r2, [sp, #0]
1004ed80:	2200      	movs	r2, #0
1004ed82:	f000 f859 	bl	1004ee38 <UART_WaitOnFlagUntilTimeout>
1004ed86:	1e03      	subs	r3, r0, #0
1004ed88:	d03b      	beq.n	1004ee02 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ed8a:	f3ef 8310 	mrs	r3, PRIMASK
1004ed8e:	60fb      	str	r3, [r7, #12]
  return(result);
1004ed90:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004ed92:	637b      	str	r3, [r7, #52]	@ 0x34
1004ed94:	2301      	movs	r3, #1
1004ed96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ed98:	693b      	ldr	r3, [r7, #16]
1004ed9a:	f383 8810 	msr	PRIMASK, r3
}
1004ed9e:	46c0      	nop			@ (mov r8, r8)
1004eda0:	687b      	ldr	r3, [r7, #4]
1004eda2:	681b      	ldr	r3, [r3, #0]
1004eda4:	681a      	ldr	r2, [r3, #0]
1004eda6:	687b      	ldr	r3, [r7, #4]
1004eda8:	681b      	ldr	r3, [r3, #0]
1004edaa:	4922      	ldr	r1, [pc, #136]	@ (1004ee34 <UART_CheckIdleState+0x150>)
1004edac:	400a      	ands	r2, r1
1004edae:	601a      	str	r2, [r3, #0]
1004edb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004edb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004edb4:	697b      	ldr	r3, [r7, #20]
1004edb6:	f383 8810 	msr	PRIMASK, r3
}
1004edba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004edbc:	f3ef 8310 	mrs	r3, PRIMASK
1004edc0:	61bb      	str	r3, [r7, #24]
  return(result);
1004edc2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1004edc4:	633b      	str	r3, [r7, #48]	@ 0x30
1004edc6:	2301      	movs	r3, #1
1004edc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004edca:	69fb      	ldr	r3, [r7, #28]
1004edcc:	f383 8810 	msr	PRIMASK, r3
}
1004edd0:	46c0      	nop			@ (mov r8, r8)
1004edd2:	687b      	ldr	r3, [r7, #4]
1004edd4:	681b      	ldr	r3, [r3, #0]
1004edd6:	689a      	ldr	r2, [r3, #8]
1004edd8:	687b      	ldr	r3, [r7, #4]
1004edda:	681b      	ldr	r3, [r3, #0]
1004eddc:	2101      	movs	r1, #1
1004edde:	438a      	bics	r2, r1
1004ede0:	609a      	str	r2, [r3, #8]
1004ede2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004ede4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ede6:	6a3b      	ldr	r3, [r7, #32]
1004ede8:	f383 8810 	msr	PRIMASK, r3
}
1004edec:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
1004edee:	687b      	ldr	r3, [r7, #4]
1004edf0:	228c      	movs	r2, #140	@ 0x8c
1004edf2:	2120      	movs	r1, #32
1004edf4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
1004edf6:	687b      	ldr	r3, [r7, #4]
1004edf8:	2284      	movs	r2, #132	@ 0x84
1004edfa:	2100      	movs	r1, #0
1004edfc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
1004edfe:	2303      	movs	r3, #3
1004ee00:	e012      	b.n	1004ee28 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
1004ee02:	687b      	ldr	r3, [r7, #4]
1004ee04:	2288      	movs	r2, #136	@ 0x88
1004ee06:	2120      	movs	r1, #32
1004ee08:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
1004ee0a:	687b      	ldr	r3, [r7, #4]
1004ee0c:	228c      	movs	r2, #140	@ 0x8c
1004ee0e:	2120      	movs	r1, #32
1004ee10:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004ee12:	687b      	ldr	r3, [r7, #4]
1004ee14:	2200      	movs	r2, #0
1004ee16:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
1004ee18:	687b      	ldr	r3, [r7, #4]
1004ee1a:	2200      	movs	r2, #0
1004ee1c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
1004ee1e:	687b      	ldr	r3, [r7, #4]
1004ee20:	2284      	movs	r2, #132	@ 0x84
1004ee22:	2100      	movs	r1, #0
1004ee24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004ee26:	2300      	movs	r3, #0
}
1004ee28:	0018      	movs	r0, r3
1004ee2a:	46bd      	mov	sp, r7
1004ee2c:	b010      	add	sp, #64	@ 0x40
1004ee2e:	bd80      	pop	{r7, pc}
1004ee30:	01ffffff 	.word	0x01ffffff
1004ee34:	fffffedf 	.word	0xfffffedf

1004ee38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
1004ee38:	b580      	push	{r7, lr}
1004ee3a:	b084      	sub	sp, #16
1004ee3c:	af00      	add	r7, sp, #0
1004ee3e:	60f8      	str	r0, [r7, #12]
1004ee40:	60b9      	str	r1, [r7, #8]
1004ee42:	603b      	str	r3, [r7, #0]
1004ee44:	1dfb      	adds	r3, r7, #7
1004ee46:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1004ee48:	e051      	b.n	1004eeee <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
1004ee4a:	69bb      	ldr	r3, [r7, #24]
1004ee4c:	3301      	adds	r3, #1
1004ee4e:	d04e      	beq.n	1004eeee <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
1004ee50:	f7f9 fafe 	bl	10048450 <HAL_GetTick>
1004ee54:	0002      	movs	r2, r0
1004ee56:	683b      	ldr	r3, [r7, #0]
1004ee58:	1ad3      	subs	r3, r2, r3
1004ee5a:	69ba      	ldr	r2, [r7, #24]
1004ee5c:	429a      	cmp	r2, r3
1004ee5e:	d302      	bcc.n	1004ee66 <UART_WaitOnFlagUntilTimeout+0x2e>
1004ee60:	69bb      	ldr	r3, [r7, #24]
1004ee62:	2b00      	cmp	r3, #0
1004ee64:	d101      	bne.n	1004ee6a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
1004ee66:	2303      	movs	r3, #3
1004ee68:	e051      	b.n	1004ef0e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
1004ee6a:	68fb      	ldr	r3, [r7, #12]
1004ee6c:	681b      	ldr	r3, [r3, #0]
1004ee6e:	681b      	ldr	r3, [r3, #0]
1004ee70:	2204      	movs	r2, #4
1004ee72:	4013      	ands	r3, r2
1004ee74:	d03b      	beq.n	1004eeee <UART_WaitOnFlagUntilTimeout+0xb6>
1004ee76:	68bb      	ldr	r3, [r7, #8]
1004ee78:	2b80      	cmp	r3, #128	@ 0x80
1004ee7a:	d038      	beq.n	1004eeee <UART_WaitOnFlagUntilTimeout+0xb6>
1004ee7c:	68bb      	ldr	r3, [r7, #8]
1004ee7e:	2b40      	cmp	r3, #64	@ 0x40
1004ee80:	d035      	beq.n	1004eeee <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
1004ee82:	68fb      	ldr	r3, [r7, #12]
1004ee84:	681b      	ldr	r3, [r3, #0]
1004ee86:	69db      	ldr	r3, [r3, #28]
1004ee88:	2208      	movs	r2, #8
1004ee8a:	4013      	ands	r3, r2
1004ee8c:	2b08      	cmp	r3, #8
1004ee8e:	d111      	bne.n	1004eeb4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
1004ee90:	68fb      	ldr	r3, [r7, #12]
1004ee92:	681b      	ldr	r3, [r3, #0]
1004ee94:	2208      	movs	r2, #8
1004ee96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1004ee98:	68fb      	ldr	r3, [r7, #12]
1004ee9a:	0018      	movs	r0, r3
1004ee9c:	f000 f83c 	bl	1004ef18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
1004eea0:	68fb      	ldr	r3, [r7, #12]
1004eea2:	2290      	movs	r2, #144	@ 0x90
1004eea4:	2108      	movs	r1, #8
1004eea6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004eea8:	68fb      	ldr	r3, [r7, #12]
1004eeaa:	2284      	movs	r2, #132	@ 0x84
1004eeac:	2100      	movs	r1, #0
1004eeae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
1004eeb0:	2301      	movs	r3, #1
1004eeb2:	e02c      	b.n	1004ef0e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
1004eeb4:	68fb      	ldr	r3, [r7, #12]
1004eeb6:	681b      	ldr	r3, [r3, #0]
1004eeb8:	69da      	ldr	r2, [r3, #28]
1004eeba:	2380      	movs	r3, #128	@ 0x80
1004eebc:	011b      	lsls	r3, r3, #4
1004eebe:	401a      	ands	r2, r3
1004eec0:	2380      	movs	r3, #128	@ 0x80
1004eec2:	011b      	lsls	r3, r3, #4
1004eec4:	429a      	cmp	r2, r3
1004eec6:	d112      	bne.n	1004eeee <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
1004eec8:	68fb      	ldr	r3, [r7, #12]
1004eeca:	681b      	ldr	r3, [r3, #0]
1004eecc:	2280      	movs	r2, #128	@ 0x80
1004eece:	0112      	lsls	r2, r2, #4
1004eed0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1004eed2:	68fb      	ldr	r3, [r7, #12]
1004eed4:	0018      	movs	r0, r3
1004eed6:	f000 f81f 	bl	1004ef18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
1004eeda:	68fb      	ldr	r3, [r7, #12]
1004eedc:	2290      	movs	r2, #144	@ 0x90
1004eede:	2120      	movs	r1, #32
1004eee0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004eee2:	68fb      	ldr	r3, [r7, #12]
1004eee4:	2284      	movs	r2, #132	@ 0x84
1004eee6:	2100      	movs	r1, #0
1004eee8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
1004eeea:	2303      	movs	r3, #3
1004eeec:	e00f      	b.n	1004ef0e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1004eeee:	68fb      	ldr	r3, [r7, #12]
1004eef0:	681b      	ldr	r3, [r3, #0]
1004eef2:	69db      	ldr	r3, [r3, #28]
1004eef4:	68ba      	ldr	r2, [r7, #8]
1004eef6:	4013      	ands	r3, r2
1004eef8:	68ba      	ldr	r2, [r7, #8]
1004eefa:	1ad3      	subs	r3, r2, r3
1004eefc:	425a      	negs	r2, r3
1004eefe:	4153      	adcs	r3, r2
1004ef00:	b2db      	uxtb	r3, r3
1004ef02:	001a      	movs	r2, r3
1004ef04:	1dfb      	adds	r3, r7, #7
1004ef06:	781b      	ldrb	r3, [r3, #0]
1004ef08:	429a      	cmp	r2, r3
1004ef0a:	d09e      	beq.n	1004ee4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
1004ef0c:	2300      	movs	r3, #0
}
1004ef0e:	0018      	movs	r0, r3
1004ef10:	46bd      	mov	sp, r7
1004ef12:	b004      	add	sp, #16
1004ef14:	bd80      	pop	{r7, pc}
	...

1004ef18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
1004ef18:	b580      	push	{r7, lr}
1004ef1a:	b08e      	sub	sp, #56	@ 0x38
1004ef1c:	af00      	add	r7, sp, #0
1004ef1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ef20:	f3ef 8310 	mrs	r3, PRIMASK
1004ef24:	617b      	str	r3, [r7, #20]
  return(result);
1004ef26:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004ef28:	637b      	str	r3, [r7, #52]	@ 0x34
1004ef2a:	2301      	movs	r3, #1
1004ef2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ef2e:	69bb      	ldr	r3, [r7, #24]
1004ef30:	f383 8810 	msr	PRIMASK, r3
}
1004ef34:	46c0      	nop			@ (mov r8, r8)
1004ef36:	687b      	ldr	r3, [r7, #4]
1004ef38:	681b      	ldr	r3, [r3, #0]
1004ef3a:	681a      	ldr	r2, [r3, #0]
1004ef3c:	687b      	ldr	r3, [r7, #4]
1004ef3e:	681b      	ldr	r3, [r3, #0]
1004ef40:	4926      	ldr	r1, [pc, #152]	@ (1004efdc <UART_EndRxTransfer+0xc4>)
1004ef42:	400a      	ands	r2, r1
1004ef44:	601a      	str	r2, [r3, #0]
1004ef46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004ef48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ef4a:	69fb      	ldr	r3, [r7, #28]
1004ef4c:	f383 8810 	msr	PRIMASK, r3
}
1004ef50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ef52:	f3ef 8310 	mrs	r3, PRIMASK
1004ef56:	623b      	str	r3, [r7, #32]
  return(result);
1004ef58:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
1004ef5a:	633b      	str	r3, [r7, #48]	@ 0x30
1004ef5c:	2301      	movs	r3, #1
1004ef5e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ef60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ef62:	f383 8810 	msr	PRIMASK, r3
}
1004ef66:	46c0      	nop			@ (mov r8, r8)
1004ef68:	687b      	ldr	r3, [r7, #4]
1004ef6a:	681b      	ldr	r3, [r3, #0]
1004ef6c:	689a      	ldr	r2, [r3, #8]
1004ef6e:	687b      	ldr	r3, [r7, #4]
1004ef70:	681b      	ldr	r3, [r3, #0]
1004ef72:	491b      	ldr	r1, [pc, #108]	@ (1004efe0 <UART_EndRxTransfer+0xc8>)
1004ef74:	400a      	ands	r2, r1
1004ef76:	609a      	str	r2, [r3, #8]
1004ef78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004ef7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ef7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004ef7e:	f383 8810 	msr	PRIMASK, r3
}
1004ef82:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
1004ef84:	687b      	ldr	r3, [r7, #4]
1004ef86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
1004ef88:	2b01      	cmp	r3, #1
1004ef8a:	d118      	bne.n	1004efbe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ef8c:	f3ef 8310 	mrs	r3, PRIMASK
1004ef90:	60bb      	str	r3, [r7, #8]
  return(result);
1004ef92:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
1004ef94:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004ef96:	2301      	movs	r3, #1
1004ef98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ef9a:	68fb      	ldr	r3, [r7, #12]
1004ef9c:	f383 8810 	msr	PRIMASK, r3
}
1004efa0:	46c0      	nop			@ (mov r8, r8)
1004efa2:	687b      	ldr	r3, [r7, #4]
1004efa4:	681b      	ldr	r3, [r3, #0]
1004efa6:	681a      	ldr	r2, [r3, #0]
1004efa8:	687b      	ldr	r3, [r7, #4]
1004efaa:	681b      	ldr	r3, [r3, #0]
1004efac:	2110      	movs	r1, #16
1004efae:	438a      	bics	r2, r1
1004efb0:	601a      	str	r2, [r3, #0]
1004efb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004efb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004efb6:	693b      	ldr	r3, [r7, #16]
1004efb8:	f383 8810 	msr	PRIMASK, r3
}
1004efbc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
1004efbe:	687b      	ldr	r3, [r7, #4]
1004efc0:	228c      	movs	r2, #140	@ 0x8c
1004efc2:	2120      	movs	r1, #32
1004efc4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004efc6:	687b      	ldr	r3, [r7, #4]
1004efc8:	2200      	movs	r2, #0
1004efca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
1004efcc:	687b      	ldr	r3, [r7, #4]
1004efce:	2200      	movs	r2, #0
1004efd0:	675a      	str	r2, [r3, #116]	@ 0x74
}
1004efd2:	46c0      	nop			@ (mov r8, r8)
1004efd4:	46bd      	mov	sp, r7
1004efd6:	b00e      	add	sp, #56	@ 0x38
1004efd8:	bd80      	pop	{r7, pc}
1004efda:	46c0      	nop			@ (mov r8, r8)
1004efdc:	fffffedf 	.word	0xfffffedf
1004efe0:	effffffe 	.word	0xeffffffe

1004efe4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
1004efe4:	b580      	push	{r7, lr}
1004efe6:	b082      	sub	sp, #8
1004efe8:	af00      	add	r7, sp, #0
1004efea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
1004efec:	46c0      	nop			@ (mov r8, r8)
1004efee:	46bd      	mov	sp, r7
1004eff0:	b002      	add	sp, #8
1004eff2:	bd80      	pop	{r7, pc}

1004eff4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
1004eff4:	b580      	push	{r7, lr}
1004eff6:	b082      	sub	sp, #8
1004eff8:	af00      	add	r7, sp, #0
1004effa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
1004effc:	46c0      	nop			@ (mov r8, r8)
1004effe:	46bd      	mov	sp, r7
1004f000:	b002      	add	sp, #8
1004f002:	bd80      	pop	{r7, pc}

1004f004 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
1004f004:	b580      	push	{r7, lr}
1004f006:	b082      	sub	sp, #8
1004f008:	af00      	add	r7, sp, #0
1004f00a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
1004f00c:	46c0      	nop			@ (mov r8, r8)
1004f00e:	46bd      	mov	sp, r7
1004f010:	b002      	add	sp, #8
1004f012:	bd80      	pop	{r7, pc}

1004f014 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
1004f014:	b580      	push	{r7, lr}
1004f016:	b084      	sub	sp, #16
1004f018:	af00      	add	r7, sp, #0
1004f01a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
1004f01c:	687b      	ldr	r3, [r7, #4]
1004f01e:	2284      	movs	r2, #132	@ 0x84
1004f020:	5c9b      	ldrb	r3, [r3, r2]
1004f022:	2b01      	cmp	r3, #1
1004f024:	d101      	bne.n	1004f02a <HAL_UARTEx_EnableFifoMode+0x16>
1004f026:	2302      	movs	r3, #2
1004f028:	e02d      	b.n	1004f086 <HAL_UARTEx_EnableFifoMode+0x72>
1004f02a:	687b      	ldr	r3, [r7, #4]
1004f02c:	2284      	movs	r2, #132	@ 0x84
1004f02e:	2101      	movs	r1, #1
1004f030:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004f032:	687b      	ldr	r3, [r7, #4]
1004f034:	2288      	movs	r2, #136	@ 0x88
1004f036:	2124      	movs	r1, #36	@ 0x24
1004f038:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004f03a:	687b      	ldr	r3, [r7, #4]
1004f03c:	681b      	ldr	r3, [r3, #0]
1004f03e:	681b      	ldr	r3, [r3, #0]
1004f040:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004f042:	687b      	ldr	r3, [r7, #4]
1004f044:	681b      	ldr	r3, [r3, #0]
1004f046:	681a      	ldr	r2, [r3, #0]
1004f048:	687b      	ldr	r3, [r7, #4]
1004f04a:	681b      	ldr	r3, [r3, #0]
1004f04c:	2101      	movs	r1, #1
1004f04e:	438a      	bics	r2, r1
1004f050:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
1004f052:	68fb      	ldr	r3, [r7, #12]
1004f054:	2280      	movs	r2, #128	@ 0x80
1004f056:	0592      	lsls	r2, r2, #22
1004f058:	4313      	orrs	r3, r2
1004f05a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
1004f05c:	687b      	ldr	r3, [r7, #4]
1004f05e:	2280      	movs	r2, #128	@ 0x80
1004f060:	0592      	lsls	r2, r2, #22
1004f062:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004f064:	687b      	ldr	r3, [r7, #4]
1004f066:	681b      	ldr	r3, [r3, #0]
1004f068:	68fa      	ldr	r2, [r7, #12]
1004f06a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004f06c:	687b      	ldr	r3, [r7, #4]
1004f06e:	0018      	movs	r0, r3
1004f070:	f000 f88e 	bl	1004f190 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
1004f074:	687b      	ldr	r3, [r7, #4]
1004f076:	2288      	movs	r2, #136	@ 0x88
1004f078:	2120      	movs	r1, #32
1004f07a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004f07c:	687b      	ldr	r3, [r7, #4]
1004f07e:	2284      	movs	r2, #132	@ 0x84
1004f080:	2100      	movs	r1, #0
1004f082:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004f084:	2300      	movs	r3, #0
}
1004f086:	0018      	movs	r0, r3
1004f088:	46bd      	mov	sp, r7
1004f08a:	b004      	add	sp, #16
1004f08c:	bd80      	pop	{r7, pc}

1004f08e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1004f08e:	b580      	push	{r7, lr}
1004f090:	b084      	sub	sp, #16
1004f092:	af00      	add	r7, sp, #0
1004f094:	6078      	str	r0, [r7, #4]
1004f096:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004f098:	687b      	ldr	r3, [r7, #4]
1004f09a:	2284      	movs	r2, #132	@ 0x84
1004f09c:	5c9b      	ldrb	r3, [r3, r2]
1004f09e:	2b01      	cmp	r3, #1
1004f0a0:	d101      	bne.n	1004f0a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
1004f0a2:	2302      	movs	r3, #2
1004f0a4:	e02e      	b.n	1004f104 <HAL_UARTEx_SetTxFifoThreshold+0x76>
1004f0a6:	687b      	ldr	r3, [r7, #4]
1004f0a8:	2284      	movs	r2, #132	@ 0x84
1004f0aa:	2101      	movs	r1, #1
1004f0ac:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004f0ae:	687b      	ldr	r3, [r7, #4]
1004f0b0:	2288      	movs	r2, #136	@ 0x88
1004f0b2:	2124      	movs	r1, #36	@ 0x24
1004f0b4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004f0b6:	687b      	ldr	r3, [r7, #4]
1004f0b8:	681b      	ldr	r3, [r3, #0]
1004f0ba:	681b      	ldr	r3, [r3, #0]
1004f0bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004f0be:	687b      	ldr	r3, [r7, #4]
1004f0c0:	681b      	ldr	r3, [r3, #0]
1004f0c2:	681a      	ldr	r2, [r3, #0]
1004f0c4:	687b      	ldr	r3, [r7, #4]
1004f0c6:	681b      	ldr	r3, [r3, #0]
1004f0c8:	2101      	movs	r1, #1
1004f0ca:	438a      	bics	r2, r1
1004f0cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
1004f0ce:	687b      	ldr	r3, [r7, #4]
1004f0d0:	681b      	ldr	r3, [r3, #0]
1004f0d2:	689b      	ldr	r3, [r3, #8]
1004f0d4:	00db      	lsls	r3, r3, #3
1004f0d6:	08d9      	lsrs	r1, r3, #3
1004f0d8:	687b      	ldr	r3, [r7, #4]
1004f0da:	681b      	ldr	r3, [r3, #0]
1004f0dc:	683a      	ldr	r2, [r7, #0]
1004f0de:	430a      	orrs	r2, r1
1004f0e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004f0e2:	687b      	ldr	r3, [r7, #4]
1004f0e4:	0018      	movs	r0, r3
1004f0e6:	f000 f853 	bl	1004f190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004f0ea:	687b      	ldr	r3, [r7, #4]
1004f0ec:	681b      	ldr	r3, [r3, #0]
1004f0ee:	68fa      	ldr	r2, [r7, #12]
1004f0f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004f0f2:	687b      	ldr	r3, [r7, #4]
1004f0f4:	2288      	movs	r2, #136	@ 0x88
1004f0f6:	2120      	movs	r1, #32
1004f0f8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004f0fa:	687b      	ldr	r3, [r7, #4]
1004f0fc:	2284      	movs	r2, #132	@ 0x84
1004f0fe:	2100      	movs	r1, #0
1004f100:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004f102:	2300      	movs	r3, #0
}
1004f104:	0018      	movs	r0, r3
1004f106:	46bd      	mov	sp, r7
1004f108:	b004      	add	sp, #16
1004f10a:	bd80      	pop	{r7, pc}

1004f10c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1004f10c:	b580      	push	{r7, lr}
1004f10e:	b084      	sub	sp, #16
1004f110:	af00      	add	r7, sp, #0
1004f112:	6078      	str	r0, [r7, #4]
1004f114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004f116:	687b      	ldr	r3, [r7, #4]
1004f118:	2284      	movs	r2, #132	@ 0x84
1004f11a:	5c9b      	ldrb	r3, [r3, r2]
1004f11c:	2b01      	cmp	r3, #1
1004f11e:	d101      	bne.n	1004f124 <HAL_UARTEx_SetRxFifoThreshold+0x18>
1004f120:	2302      	movs	r3, #2
1004f122:	e02f      	b.n	1004f184 <HAL_UARTEx_SetRxFifoThreshold+0x78>
1004f124:	687b      	ldr	r3, [r7, #4]
1004f126:	2284      	movs	r2, #132	@ 0x84
1004f128:	2101      	movs	r1, #1
1004f12a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004f12c:	687b      	ldr	r3, [r7, #4]
1004f12e:	2288      	movs	r2, #136	@ 0x88
1004f130:	2124      	movs	r1, #36	@ 0x24
1004f132:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004f134:	687b      	ldr	r3, [r7, #4]
1004f136:	681b      	ldr	r3, [r3, #0]
1004f138:	681b      	ldr	r3, [r3, #0]
1004f13a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004f13c:	687b      	ldr	r3, [r7, #4]
1004f13e:	681b      	ldr	r3, [r3, #0]
1004f140:	681a      	ldr	r2, [r3, #0]
1004f142:	687b      	ldr	r3, [r7, #4]
1004f144:	681b      	ldr	r3, [r3, #0]
1004f146:	2101      	movs	r1, #1
1004f148:	438a      	bics	r2, r1
1004f14a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
1004f14c:	687b      	ldr	r3, [r7, #4]
1004f14e:	681b      	ldr	r3, [r3, #0]
1004f150:	689b      	ldr	r3, [r3, #8]
1004f152:	4a0e      	ldr	r2, [pc, #56]	@ (1004f18c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
1004f154:	4013      	ands	r3, r2
1004f156:	0019      	movs	r1, r3
1004f158:	687b      	ldr	r3, [r7, #4]
1004f15a:	681b      	ldr	r3, [r3, #0]
1004f15c:	683a      	ldr	r2, [r7, #0]
1004f15e:	430a      	orrs	r2, r1
1004f160:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004f162:	687b      	ldr	r3, [r7, #4]
1004f164:	0018      	movs	r0, r3
1004f166:	f000 f813 	bl	1004f190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004f16a:	687b      	ldr	r3, [r7, #4]
1004f16c:	681b      	ldr	r3, [r3, #0]
1004f16e:	68fa      	ldr	r2, [r7, #12]
1004f170:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004f172:	687b      	ldr	r3, [r7, #4]
1004f174:	2288      	movs	r2, #136	@ 0x88
1004f176:	2120      	movs	r1, #32
1004f178:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004f17a:	687b      	ldr	r3, [r7, #4]
1004f17c:	2284      	movs	r2, #132	@ 0x84
1004f17e:	2100      	movs	r1, #0
1004f180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004f182:	2300      	movs	r3, #0
}
1004f184:	0018      	movs	r0, r3
1004f186:	46bd      	mov	sp, r7
1004f188:	b004      	add	sp, #16
1004f18a:	bd80      	pop	{r7, pc}
1004f18c:	f1ffffff 	.word	0xf1ffffff

1004f190 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
1004f190:	b5f0      	push	{r4, r5, r6, r7, lr}
1004f192:	b085      	sub	sp, #20
1004f194:	af00      	add	r7, sp, #0
1004f196:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
1004f198:	687b      	ldr	r3, [r7, #4]
1004f19a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
1004f19c:	2b00      	cmp	r3, #0
1004f19e:	d108      	bne.n	1004f1b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
1004f1a0:	687b      	ldr	r3, [r7, #4]
1004f1a2:	226a      	movs	r2, #106	@ 0x6a
1004f1a4:	2101      	movs	r1, #1
1004f1a6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
1004f1a8:	687b      	ldr	r3, [r7, #4]
1004f1aa:	2268      	movs	r2, #104	@ 0x68
1004f1ac:	2101      	movs	r1, #1
1004f1ae:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
1004f1b0:	e043      	b.n	1004f23a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
1004f1b2:	260f      	movs	r6, #15
1004f1b4:	19bb      	adds	r3, r7, r6
1004f1b6:	2208      	movs	r2, #8
1004f1b8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
1004f1ba:	200e      	movs	r0, #14
1004f1bc:	183b      	adds	r3, r7, r0
1004f1be:	2208      	movs	r2, #8
1004f1c0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1004f1c2:	687b      	ldr	r3, [r7, #4]
1004f1c4:	681b      	ldr	r3, [r3, #0]
1004f1c6:	689b      	ldr	r3, [r3, #8]
1004f1c8:	0e5b      	lsrs	r3, r3, #25
1004f1ca:	b2da      	uxtb	r2, r3
1004f1cc:	240d      	movs	r4, #13
1004f1ce:	193b      	adds	r3, r7, r4
1004f1d0:	2107      	movs	r1, #7
1004f1d2:	400a      	ands	r2, r1
1004f1d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
1004f1d6:	687b      	ldr	r3, [r7, #4]
1004f1d8:	681b      	ldr	r3, [r3, #0]
1004f1da:	689b      	ldr	r3, [r3, #8]
1004f1dc:	0f5b      	lsrs	r3, r3, #29
1004f1de:	b2da      	uxtb	r2, r3
1004f1e0:	250c      	movs	r5, #12
1004f1e2:	197b      	adds	r3, r7, r5
1004f1e4:	2107      	movs	r1, #7
1004f1e6:	400a      	ands	r2, r1
1004f1e8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004f1ea:	183b      	adds	r3, r7, r0
1004f1ec:	781b      	ldrb	r3, [r3, #0]
1004f1ee:	197a      	adds	r2, r7, r5
1004f1f0:	7812      	ldrb	r2, [r2, #0]
1004f1f2:	4914      	ldr	r1, [pc, #80]	@ (1004f244 <UARTEx_SetNbDataToProcess+0xb4>)
1004f1f4:	5c8a      	ldrb	r2, [r1, r2]
1004f1f6:	435a      	muls	r2, r3
1004f1f8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
1004f1fa:	197b      	adds	r3, r7, r5
1004f1fc:	781b      	ldrb	r3, [r3, #0]
1004f1fe:	4a12      	ldr	r2, [pc, #72]	@ (1004f248 <UARTEx_SetNbDataToProcess+0xb8>)
1004f200:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004f202:	0019      	movs	r1, r3
1004f204:	f7f1 f8a6 	bl	10040354 <__divsi3>
1004f208:	0003      	movs	r3, r0
1004f20a:	b299      	uxth	r1, r3
1004f20c:	687b      	ldr	r3, [r7, #4]
1004f20e:	226a      	movs	r2, #106	@ 0x6a
1004f210:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004f212:	19bb      	adds	r3, r7, r6
1004f214:	781b      	ldrb	r3, [r3, #0]
1004f216:	193a      	adds	r2, r7, r4
1004f218:	7812      	ldrb	r2, [r2, #0]
1004f21a:	490a      	ldr	r1, [pc, #40]	@ (1004f244 <UARTEx_SetNbDataToProcess+0xb4>)
1004f21c:	5c8a      	ldrb	r2, [r1, r2]
1004f21e:	435a      	muls	r2, r3
1004f220:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
1004f222:	193b      	adds	r3, r7, r4
1004f224:	781b      	ldrb	r3, [r3, #0]
1004f226:	4a08      	ldr	r2, [pc, #32]	@ (1004f248 <UARTEx_SetNbDataToProcess+0xb8>)
1004f228:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004f22a:	0019      	movs	r1, r3
1004f22c:	f7f1 f892 	bl	10040354 <__divsi3>
1004f230:	0003      	movs	r3, r0
1004f232:	b299      	uxth	r1, r3
1004f234:	687b      	ldr	r3, [r7, #4]
1004f236:	2268      	movs	r2, #104	@ 0x68
1004f238:	5299      	strh	r1, [r3, r2]
}
1004f23a:	46c0      	nop			@ (mov r8, r8)
1004f23c:	46bd      	mov	sp, r7
1004f23e:	b005      	add	sp, #20
1004f240:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004f242:	46c0      	nop			@ (mov r8, r8)
1004f244:	1006a124 	.word	0x1006a124
1004f248:	1006a12c 	.word	0x1006a12c

1004f24c <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
1004f24c:	b580      	push	{r7, lr}
1004f24e:	b088      	sub	sp, #32
1004f250:	af00      	add	r7, sp, #0
1004f252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
1004f254:	687b      	ldr	r3, [r7, #4]
1004f256:	681b      	ldr	r3, [r3, #0]
1004f258:	69db      	ldr	r3, [r3, #28]
1004f25a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
1004f25c:	687b      	ldr	r3, [r7, #4]
1004f25e:	681b      	ldr	r3, [r3, #0]
1004f260:	681b      	ldr	r3, [r3, #0]
1004f262:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
1004f264:	687b      	ldr	r3, [r7, #4]
1004f266:	681b      	ldr	r3, [r3, #0]
1004f268:	689b      	ldr	r3, [r3, #8]
1004f26a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
1004f26c:	69fb      	ldr	r3, [r7, #28]
1004f26e:	4ab3      	ldr	r2, [pc, #716]	@ (1004f53c <HAL_USART_IRQHandler+0x2f0>)
1004f270:	4013      	ands	r3, r2
1004f272:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
1004f274:	693b      	ldr	r3, [r7, #16]
1004f276:	2b00      	cmp	r3, #0
1004f278:	d117      	bne.n	1004f2aa <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
1004f27a:	69fb      	ldr	r3, [r7, #28]
1004f27c:	2220      	movs	r2, #32
1004f27e:	4013      	ands	r3, r2
1004f280:	d013      	beq.n	1004f2aa <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
1004f282:	69bb      	ldr	r3, [r7, #24]
1004f284:	2220      	movs	r2, #32
1004f286:	4013      	ands	r3, r2
1004f288:	d104      	bne.n	1004f294 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
1004f28a:	697a      	ldr	r2, [r7, #20]
1004f28c:	2380      	movs	r3, #128	@ 0x80
1004f28e:	055b      	lsls	r3, r3, #21
1004f290:	4013      	ands	r3, r2
1004f292:	d00a      	beq.n	1004f2aa <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
1004f294:	687b      	ldr	r3, [r7, #4]
1004f296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004f298:	2b00      	cmp	r3, #0
1004f29a:	d100      	bne.n	1004f29e <HAL_USART_IRQHandler+0x52>
1004f29c:	e14a      	b.n	1004f534 <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
1004f29e:	687b      	ldr	r3, [r7, #4]
1004f2a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004f2a2:	687a      	ldr	r2, [r7, #4]
1004f2a4:	0010      	movs	r0, r2
1004f2a6:	4798      	blx	r3
      }
      return;
1004f2a8:	e144      	b.n	1004f534 <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
1004f2aa:	693b      	ldr	r3, [r7, #16]
1004f2ac:	2b00      	cmp	r3, #0
1004f2ae:	d100      	bne.n	1004f2b2 <HAL_USART_IRQHandler+0x66>
1004f2b0:	e100      	b.n	1004f4b4 <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
1004f2b2:	697b      	ldr	r3, [r7, #20]
1004f2b4:	4aa2      	ldr	r2, [pc, #648]	@ (1004f540 <HAL_USART_IRQHandler+0x2f4>)
1004f2b6:	4013      	ands	r3, r2
1004f2b8:	d105      	bne.n	1004f2c6 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
1004f2ba:	69ba      	ldr	r2, [r7, #24]
1004f2bc:	2390      	movs	r3, #144	@ 0x90
1004f2be:	005b      	lsls	r3, r3, #1
1004f2c0:	4013      	ands	r3, r2
1004f2c2:	d100      	bne.n	1004f2c6 <HAL_USART_IRQHandler+0x7a>
1004f2c4:	e0f6      	b.n	1004f4b4 <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
1004f2c6:	69fb      	ldr	r3, [r7, #28]
1004f2c8:	2201      	movs	r2, #1
1004f2ca:	4013      	ands	r3, r2
1004f2cc:	d00e      	beq.n	1004f2ec <HAL_USART_IRQHandler+0xa0>
1004f2ce:	69ba      	ldr	r2, [r7, #24]
1004f2d0:	2380      	movs	r3, #128	@ 0x80
1004f2d2:	005b      	lsls	r3, r3, #1
1004f2d4:	4013      	ands	r3, r2
1004f2d6:	d009      	beq.n	1004f2ec <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
1004f2d8:	687b      	ldr	r3, [r7, #4]
1004f2da:	681b      	ldr	r3, [r3, #0]
1004f2dc:	2201      	movs	r2, #1
1004f2de:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
1004f2e0:	687b      	ldr	r3, [r7, #4]
1004f2e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004f2e4:	2201      	movs	r2, #1
1004f2e6:	431a      	orrs	r2, r3
1004f2e8:	687b      	ldr	r3, [r7, #4]
1004f2ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004f2ec:	69fb      	ldr	r3, [r7, #28]
1004f2ee:	2202      	movs	r2, #2
1004f2f0:	4013      	ands	r3, r2
1004f2f2:	d00d      	beq.n	1004f310 <HAL_USART_IRQHandler+0xc4>
1004f2f4:	697b      	ldr	r3, [r7, #20]
1004f2f6:	2201      	movs	r2, #1
1004f2f8:	4013      	ands	r3, r2
1004f2fa:	d009      	beq.n	1004f310 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
1004f2fc:	687b      	ldr	r3, [r7, #4]
1004f2fe:	681b      	ldr	r3, [r3, #0]
1004f300:	2202      	movs	r2, #2
1004f302:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
1004f304:	687b      	ldr	r3, [r7, #4]
1004f306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004f308:	2204      	movs	r2, #4
1004f30a:	431a      	orrs	r2, r3
1004f30c:	687b      	ldr	r3, [r7, #4]
1004f30e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004f310:	69fb      	ldr	r3, [r7, #28]
1004f312:	2204      	movs	r2, #4
1004f314:	4013      	ands	r3, r2
1004f316:	d00d      	beq.n	1004f334 <HAL_USART_IRQHandler+0xe8>
1004f318:	697b      	ldr	r3, [r7, #20]
1004f31a:	2201      	movs	r2, #1
1004f31c:	4013      	ands	r3, r2
1004f31e:	d009      	beq.n	1004f334 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
1004f320:	687b      	ldr	r3, [r7, #4]
1004f322:	681b      	ldr	r3, [r3, #0]
1004f324:	2204      	movs	r2, #4
1004f326:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
1004f328:	687b      	ldr	r3, [r7, #4]
1004f32a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004f32c:	2202      	movs	r2, #2
1004f32e:	431a      	orrs	r2, r3
1004f330:	687b      	ldr	r3, [r7, #4]
1004f332:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
1004f334:	69fb      	ldr	r3, [r7, #28]
1004f336:	2208      	movs	r2, #8
1004f338:	4013      	ands	r3, r2
1004f33a:	d011      	beq.n	1004f360 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
1004f33c:	69bb      	ldr	r3, [r7, #24]
1004f33e:	2220      	movs	r2, #32
1004f340:	4013      	ands	r3, r2
1004f342:	d103      	bne.n	1004f34c <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
1004f344:	697b      	ldr	r3, [r7, #20]
1004f346:	4a7e      	ldr	r2, [pc, #504]	@ (1004f540 <HAL_USART_IRQHandler+0x2f4>)
1004f348:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
1004f34a:	d009      	beq.n	1004f360 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
1004f34c:	687b      	ldr	r3, [r7, #4]
1004f34e:	681b      	ldr	r3, [r3, #0]
1004f350:	2208      	movs	r2, #8
1004f352:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
1004f354:	687b      	ldr	r3, [r7, #4]
1004f356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004f358:	2208      	movs	r2, #8
1004f35a:	431a      	orrs	r2, r3
1004f35c:	687b      	ldr	r3, [r7, #4]
1004f35e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
1004f360:	69fa      	ldr	r2, [r7, #28]
1004f362:	2380      	movs	r3, #128	@ 0x80
1004f364:	011b      	lsls	r3, r3, #4
1004f366:	4013      	ands	r3, r2
1004f368:	d00f      	beq.n	1004f38a <HAL_USART_IRQHandler+0x13e>
1004f36a:	69ba      	ldr	r2, [r7, #24]
1004f36c:	2380      	movs	r3, #128	@ 0x80
1004f36e:	04db      	lsls	r3, r3, #19
1004f370:	4013      	ands	r3, r2
1004f372:	d00a      	beq.n	1004f38a <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
1004f374:	687b      	ldr	r3, [r7, #4]
1004f376:	681b      	ldr	r3, [r3, #0]
1004f378:	2280      	movs	r2, #128	@ 0x80
1004f37a:	0112      	lsls	r2, r2, #4
1004f37c:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
1004f37e:	687b      	ldr	r3, [r7, #4]
1004f380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004f382:	2280      	movs	r2, #128	@ 0x80
1004f384:	431a      	orrs	r2, r3
1004f386:	687b      	ldr	r3, [r7, #4]
1004f388:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004f38a:	69fa      	ldr	r2, [r7, #28]
1004f38c:	2380      	movs	r3, #128	@ 0x80
1004f38e:	019b      	lsls	r3, r3, #6
1004f390:	4013      	ands	r3, r2
1004f392:	d01a      	beq.n	1004f3ca <HAL_USART_IRQHandler+0x17e>
1004f394:	697b      	ldr	r3, [r7, #20]
1004f396:	2201      	movs	r2, #1
1004f398:	4013      	ands	r3, r2
1004f39a:	d016      	beq.n	1004f3ca <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
1004f39c:	687b      	ldr	r3, [r7, #4]
1004f39e:	2259      	movs	r2, #89	@ 0x59
1004f3a0:	5c9b      	ldrb	r3, [r3, r2]
1004f3a2:	b2db      	uxtb	r3, r3
1004f3a4:	2b22      	cmp	r3, #34	@ 0x22
1004f3a6:	d105      	bne.n	1004f3b4 <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
1004f3a8:	687b      	ldr	r3, [r7, #4]
1004f3aa:	681b      	ldr	r3, [r3, #0]
1004f3ac:	2280      	movs	r2, #128	@ 0x80
1004f3ae:	0192      	lsls	r2, r2, #6
1004f3b0:	621a      	str	r2, [r3, #32]
        return;
1004f3b2:	e0ca      	b.n	1004f54a <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
1004f3b4:	687b      	ldr	r3, [r7, #4]
1004f3b6:	681b      	ldr	r3, [r3, #0]
1004f3b8:	2280      	movs	r2, #128	@ 0x80
1004f3ba:	0192      	lsls	r2, r2, #6
1004f3bc:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
1004f3be:	687b      	ldr	r3, [r7, #4]
1004f3c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004f3c2:	2220      	movs	r2, #32
1004f3c4:	431a      	orrs	r2, r3
1004f3c6:	687b      	ldr	r3, [r7, #4]
1004f3c8:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
1004f3ca:	687b      	ldr	r3, [r7, #4]
1004f3cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004f3ce:	2b00      	cmp	r3, #0
1004f3d0:	d100      	bne.n	1004f3d4 <HAL_USART_IRQHandler+0x188>
1004f3d2:	e0b1      	b.n	1004f538 <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
1004f3d4:	69fb      	ldr	r3, [r7, #28]
1004f3d6:	2220      	movs	r2, #32
1004f3d8:	4013      	ands	r3, r2
1004f3da:	d011      	beq.n	1004f400 <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
1004f3dc:	69bb      	ldr	r3, [r7, #24]
1004f3de:	2220      	movs	r2, #32
1004f3e0:	4013      	ands	r3, r2
1004f3e2:	d104      	bne.n	1004f3ee <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
1004f3e4:	697a      	ldr	r2, [r7, #20]
1004f3e6:	2380      	movs	r3, #128	@ 0x80
1004f3e8:	055b      	lsls	r3, r3, #21
1004f3ea:	4013      	ands	r3, r2
1004f3ec:	d008      	beq.n	1004f400 <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
1004f3ee:	687b      	ldr	r3, [r7, #4]
1004f3f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004f3f2:	2b00      	cmp	r3, #0
1004f3f4:	d004      	beq.n	1004f400 <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
1004f3f6:	687b      	ldr	r3, [r7, #4]
1004f3f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004f3fa:	687a      	ldr	r2, [r7, #4]
1004f3fc:	0010      	movs	r0, r2
1004f3fe:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
1004f400:	687b      	ldr	r3, [r7, #4]
1004f402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004f404:	2208      	movs	r2, #8
1004f406:	4013      	ands	r3, r2
1004f408:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
1004f40a:	687b      	ldr	r3, [r7, #4]
1004f40c:	681b      	ldr	r3, [r3, #0]
1004f40e:	689b      	ldr	r3, [r3, #8]
1004f410:	2240      	movs	r2, #64	@ 0x40
1004f412:	4013      	ands	r3, r2
1004f414:	2b40      	cmp	r3, #64	@ 0x40
1004f416:	d002      	beq.n	1004f41e <HAL_USART_IRQHandler+0x1d2>
1004f418:	68fb      	ldr	r3, [r7, #12]
1004f41a:	2b00      	cmp	r3, #0
1004f41c:	d040      	beq.n	1004f4a0 <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
1004f41e:	687b      	ldr	r3, [r7, #4]
1004f420:	0018      	movs	r0, r3
1004f422:	f000 f8ad 	bl	1004f580 <USART_EndTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004f426:	687b      	ldr	r3, [r7, #4]
1004f428:	681b      	ldr	r3, [r3, #0]
1004f42a:	689b      	ldr	r3, [r3, #8]
1004f42c:	2240      	movs	r2, #64	@ 0x40
1004f42e:	4013      	ands	r3, r2
1004f430:	2b40      	cmp	r3, #64	@ 0x40
1004f432:	d130      	bne.n	1004f496 <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
1004f434:	687b      	ldr	r3, [r7, #4]
1004f436:	681b      	ldr	r3, [r3, #0]
1004f438:	689a      	ldr	r2, [r3, #8]
1004f43a:	687b      	ldr	r3, [r7, #4]
1004f43c:	681b      	ldr	r3, [r3, #0]
1004f43e:	2140      	movs	r1, #64	@ 0x40
1004f440:	438a      	bics	r2, r1
1004f442:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
1004f444:	687b      	ldr	r3, [r7, #4]
1004f446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004f448:	2b00      	cmp	r3, #0
1004f44a:	d008      	beq.n	1004f45e <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
1004f44c:	687b      	ldr	r3, [r7, #4]
1004f44e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004f450:	2200      	movs	r2, #0
1004f452:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
1004f454:	687b      	ldr	r3, [r7, #4]
1004f456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004f458:	0018      	movs	r0, r3
1004f45a:	f7f9 f90f 	bl	1004867c <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
1004f45e:	687b      	ldr	r3, [r7, #4]
1004f460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004f462:	2b00      	cmp	r3, #0
1004f464:	d012      	beq.n	1004f48c <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
1004f466:	687b      	ldr	r3, [r7, #4]
1004f468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004f46a:	4a36      	ldr	r2, [pc, #216]	@ (1004f544 <HAL_USART_IRQHandler+0x2f8>)
1004f46c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
1004f46e:	687b      	ldr	r3, [r7, #4]
1004f470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004f472:	0018      	movs	r0, r3
1004f474:	f7f9 f902 	bl	1004867c <HAL_DMA_Abort_IT>
1004f478:	1e03      	subs	r3, r0, #0
1004f47a:	d019      	beq.n	1004f4b0 <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
1004f47c:	687b      	ldr	r3, [r7, #4]
1004f47e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004f480:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1004f482:	687b      	ldr	r3, [r7, #4]
1004f484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004f486:	0018      	movs	r0, r3
1004f488:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004f48a:	e011      	b.n	1004f4b0 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
1004f48c:	687b      	ldr	r3, [r7, #4]
1004f48e:	0018      	movs	r0, r3
1004f490:	f000 f86e 	bl	1004f570 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004f494:	e00c      	b.n	1004f4b0 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
1004f496:	687b      	ldr	r3, [r7, #4]
1004f498:	0018      	movs	r0, r3
1004f49a:	f000 f869 	bl	1004f570 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004f49e:	e007      	b.n	1004f4b0 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
1004f4a0:	687b      	ldr	r3, [r7, #4]
1004f4a2:	0018      	movs	r0, r3
1004f4a4:	f000 f864 	bl	1004f570 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
1004f4a8:	687b      	ldr	r3, [r7, #4]
1004f4aa:	2200      	movs	r2, #0
1004f4ac:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }
    return;
1004f4ae:	e043      	b.n	1004f538 <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004f4b0:	46c0      	nop			@ (mov r8, r8)
    return;
1004f4b2:	e041      	b.n	1004f538 <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
1004f4b4:	69fb      	ldr	r3, [r7, #28]
1004f4b6:	2280      	movs	r2, #128	@ 0x80
1004f4b8:	4013      	ands	r3, r2
1004f4ba:	d012      	beq.n	1004f4e2 <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
1004f4bc:	69bb      	ldr	r3, [r7, #24]
1004f4be:	2280      	movs	r2, #128	@ 0x80
1004f4c0:	4013      	ands	r3, r2
1004f4c2:	d104      	bne.n	1004f4ce <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
1004f4c4:	697a      	ldr	r2, [r7, #20]
1004f4c6:	2380      	movs	r3, #128	@ 0x80
1004f4c8:	041b      	lsls	r3, r3, #16
1004f4ca:	4013      	ands	r3, r2
1004f4cc:	d009      	beq.n	1004f4e2 <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
1004f4ce:	687b      	ldr	r3, [r7, #4]
1004f4d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004f4d2:	2b00      	cmp	r3, #0
1004f4d4:	d038      	beq.n	1004f548 <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
1004f4d6:	687b      	ldr	r3, [r7, #4]
1004f4d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004f4da:	687a      	ldr	r2, [r7, #4]
1004f4dc:	0010      	movs	r0, r2
1004f4de:	4798      	blx	r3
    }
    return;
1004f4e0:	e032      	b.n	1004f548 <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
1004f4e2:	69fb      	ldr	r3, [r7, #28]
1004f4e4:	2240      	movs	r2, #64	@ 0x40
1004f4e6:	4013      	ands	r3, r2
1004f4e8:	d008      	beq.n	1004f4fc <HAL_USART_IRQHandler+0x2b0>
1004f4ea:	69bb      	ldr	r3, [r7, #24]
1004f4ec:	2240      	movs	r2, #64	@ 0x40
1004f4ee:	4013      	ands	r3, r2
1004f4f0:	d004      	beq.n	1004f4fc <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
1004f4f2:	687b      	ldr	r3, [r7, #4]
1004f4f4:	0018      	movs	r0, r3
1004f4f6:	f000 f878 	bl	1004f5ea <USART_EndTransmit_IT>
    return;
1004f4fa:	e026      	b.n	1004f54a <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
1004f4fc:	69fa      	ldr	r2, [r7, #28]
1004f4fe:	2380      	movs	r3, #128	@ 0x80
1004f500:	041b      	lsls	r3, r3, #16
1004f502:	4013      	ands	r3, r2
1004f504:	d009      	beq.n	1004f51a <HAL_USART_IRQHandler+0x2ce>
1004f506:	69ba      	ldr	r2, [r7, #24]
1004f508:	2380      	movs	r3, #128	@ 0x80
1004f50a:	05db      	lsls	r3, r3, #23
1004f50c:	4013      	ands	r3, r2
1004f50e:	d004      	beq.n	1004f51a <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
1004f510:	687b      	ldr	r3, [r7, #4]
1004f512:	0018      	movs	r0, r3
1004f514:	f000 f8b4 	bl	1004f680 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
1004f518:	e017      	b.n	1004f54a <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
1004f51a:	69fa      	ldr	r2, [r7, #28]
1004f51c:	2380      	movs	r3, #128	@ 0x80
1004f51e:	045b      	lsls	r3, r3, #17
1004f520:	4013      	ands	r3, r2
1004f522:	d012      	beq.n	1004f54a <HAL_USART_IRQHandler+0x2fe>
1004f524:	69bb      	ldr	r3, [r7, #24]
1004f526:	2b00      	cmp	r3, #0
1004f528:	da0f      	bge.n	1004f54a <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
1004f52a:	687b      	ldr	r3, [r7, #4]
1004f52c:	0018      	movs	r0, r3
1004f52e:	f000 f89f 	bl	1004f670 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
1004f532:	e00a      	b.n	1004f54a <HAL_USART_IRQHandler+0x2fe>
      return;
1004f534:	46c0      	nop			@ (mov r8, r8)
1004f536:	e008      	b.n	1004f54a <HAL_USART_IRQHandler+0x2fe>
    return;
1004f538:	46c0      	nop			@ (mov r8, r8)
1004f53a:	e006      	b.n	1004f54a <HAL_USART_IRQHandler+0x2fe>
1004f53c:	0000280f 	.word	0x0000280f
1004f540:	10000001 	.word	0x10000001
1004f544:	1004f5c1 	.word	0x1004f5c1
    return;
1004f548:	46c0      	nop			@ (mov r8, r8)
  }
}
1004f54a:	46bd      	mov	sp, r7
1004f54c:	b008      	add	sp, #32
1004f54e:	bd80      	pop	{r7, pc}

1004f550 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
1004f550:	b580      	push	{r7, lr}
1004f552:	b082      	sub	sp, #8
1004f554:	af00      	add	r7, sp, #0
1004f556:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
1004f558:	46c0      	nop			@ (mov r8, r8)
1004f55a:	46bd      	mov	sp, r7
1004f55c:	b002      	add	sp, #8
1004f55e:	bd80      	pop	{r7, pc}

1004f560 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
1004f560:	b580      	push	{r7, lr}
1004f562:	b082      	sub	sp, #8
1004f564:	af00      	add	r7, sp, #0
1004f566:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
1004f568:	46c0      	nop			@ (mov r8, r8)
1004f56a:	46bd      	mov	sp, r7
1004f56c:	b002      	add	sp, #8
1004f56e:	bd80      	pop	{r7, pc}

1004f570 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
1004f570:	b580      	push	{r7, lr}
1004f572:	b082      	sub	sp, #8
1004f574:	af00      	add	r7, sp, #0
1004f576:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
1004f578:	46c0      	nop			@ (mov r8, r8)
1004f57a:	46bd      	mov	sp, r7
1004f57c:	b002      	add	sp, #8
1004f57e:	bd80      	pop	{r7, pc}

1004f580 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
1004f580:	b580      	push	{r7, lr}
1004f582:	b082      	sub	sp, #8
1004f584:	af00      	add	r7, sp, #0
1004f586:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
1004f588:	687b      	ldr	r3, [r7, #4]
1004f58a:	681b      	ldr	r3, [r3, #0]
1004f58c:	681a      	ldr	r2, [r3, #0]
1004f58e:	687b      	ldr	r3, [r7, #4]
1004f590:	681b      	ldr	r3, [r3, #0]
1004f592:	4909      	ldr	r1, [pc, #36]	@ (1004f5b8 <USART_EndTransfer+0x38>)
1004f594:	400a      	ands	r2, r1
1004f596:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
1004f598:	687b      	ldr	r3, [r7, #4]
1004f59a:	681b      	ldr	r3, [r3, #0]
1004f59c:	689a      	ldr	r2, [r3, #8]
1004f59e:	687b      	ldr	r3, [r7, #4]
1004f5a0:	681b      	ldr	r3, [r3, #0]
1004f5a2:	4906      	ldr	r1, [pc, #24]	@ (1004f5bc <USART_EndTransfer+0x3c>)
1004f5a4:	400a      	ands	r2, r1
1004f5a6:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
1004f5a8:	687b      	ldr	r3, [r7, #4]
1004f5aa:	2259      	movs	r2, #89	@ 0x59
1004f5ac:	2101      	movs	r1, #1
1004f5ae:	5499      	strb	r1, [r3, r2]
}
1004f5b0:	46c0      	nop			@ (mov r8, r8)
1004f5b2:	46bd      	mov	sp, r7
1004f5b4:	b002      	add	sp, #8
1004f5b6:	bd80      	pop	{r7, pc}
1004f5b8:	fffffe1f 	.word	0xfffffe1f
1004f5bc:	ef7ffffe 	.word	0xef7ffffe

1004f5c0 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
1004f5c0:	b580      	push	{r7, lr}
1004f5c2:	b084      	sub	sp, #16
1004f5c4:	af00      	add	r7, sp, #0
1004f5c6:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
1004f5c8:	687b      	ldr	r3, [r7, #4]
1004f5ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004f5cc:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
1004f5ce:	68fb      	ldr	r3, [r7, #12]
1004f5d0:	2200      	movs	r2, #0
1004f5d2:	86da      	strh	r2, [r3, #54]	@ 0x36
  husart->TxXferCount = 0U;
1004f5d4:	68fb      	ldr	r3, [r7, #12]
1004f5d6:	2200      	movs	r2, #0
1004f5d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
1004f5da:	68fb      	ldr	r3, [r7, #12]
1004f5dc:	0018      	movs	r0, r3
1004f5de:	f7ff ffc7 	bl	1004f570 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
1004f5e2:	46c0      	nop			@ (mov r8, r8)
1004f5e4:	46bd      	mov	sp, r7
1004f5e6:	b004      	add	sp, #16
1004f5e8:	bd80      	pop	{r7, pc}

1004f5ea <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
1004f5ea:	b580      	push	{r7, lr}
1004f5ec:	b082      	sub	sp, #8
1004f5ee:	af00      	add	r7, sp, #0
1004f5f0:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
1004f5f2:	687b      	ldr	r3, [r7, #4]
1004f5f4:	681b      	ldr	r3, [r3, #0]
1004f5f6:	681a      	ldr	r2, [r3, #0]
1004f5f8:	687b      	ldr	r3, [r7, #4]
1004f5fa:	681b      	ldr	r3, [r3, #0]
1004f5fc:	2140      	movs	r1, #64	@ 0x40
1004f5fe:	438a      	bics	r2, r1
1004f600:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
1004f602:	687b      	ldr	r3, [r7, #4]
1004f604:	681b      	ldr	r3, [r3, #0]
1004f606:	689a      	ldr	r2, [r3, #8]
1004f608:	687b      	ldr	r3, [r7, #4]
1004f60a:	681b      	ldr	r3, [r3, #0]
1004f60c:	2101      	movs	r1, #1
1004f60e:	438a      	bics	r2, r1
1004f610:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
1004f612:	687b      	ldr	r3, [r7, #4]
1004f614:	2200      	movs	r2, #0
1004f616:	64da      	str	r2, [r3, #76]	@ 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
1004f618:	687b      	ldr	r3, [r7, #4]
1004f61a:	2259      	movs	r2, #89	@ 0x59
1004f61c:	5c9b      	ldrb	r3, [r3, r2]
1004f61e:	b2db      	uxtb	r3, r3
1004f620:	2b12      	cmp	r3, #18
1004f622:	d114      	bne.n	1004f64e <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
1004f624:	687b      	ldr	r3, [r7, #4]
1004f626:	681b      	ldr	r3, [r3, #0]
1004f628:	2208      	movs	r2, #8
1004f62a:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
1004f62c:	687b      	ldr	r3, [r7, #4]
1004f62e:	681b      	ldr	r3, [r3, #0]
1004f630:	699a      	ldr	r2, [r3, #24]
1004f632:	687b      	ldr	r3, [r7, #4]
1004f634:	681b      	ldr	r3, [r3, #0]
1004f636:	2108      	movs	r1, #8
1004f638:	430a      	orrs	r2, r1
1004f63a:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
1004f63c:	687b      	ldr	r3, [r7, #4]
1004f63e:	2259      	movs	r2, #89	@ 0x59
1004f640:	2101      	movs	r1, #1
1004f642:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
1004f644:	687b      	ldr	r3, [r7, #4]
1004f646:	0018      	movs	r0, r3
1004f648:	f7ff ff82 	bl	1004f550 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
1004f64c:	e00c      	b.n	1004f668 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
1004f64e:	687b      	ldr	r3, [r7, #4]
1004f650:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
1004f652:	b29b      	uxth	r3, r3
1004f654:	2b00      	cmp	r3, #0
1004f656:	d107      	bne.n	1004f668 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
1004f658:	687b      	ldr	r3, [r7, #4]
1004f65a:	2259      	movs	r2, #89	@ 0x59
1004f65c:	2101      	movs	r1, #1
1004f65e:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
1004f660:	687b      	ldr	r3, [r7, #4]
1004f662:	0018      	movs	r0, r3
1004f664:	f7ff ff7c 	bl	1004f560 <HAL_USART_TxRxCpltCallback>
}
1004f668:	46c0      	nop			@ (mov r8, r8)
1004f66a:	46bd      	mov	sp, r7
1004f66c:	b002      	add	sp, #8
1004f66e:	bd80      	pop	{r7, pc}

1004f670 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
1004f670:	b580      	push	{r7, lr}
1004f672:	b082      	sub	sp, #8
1004f674:	af00      	add	r7, sp, #0
1004f676:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
1004f678:	46c0      	nop			@ (mov r8, r8)
1004f67a:	46bd      	mov	sp, r7
1004f67c:	b002      	add	sp, #8
1004f67e:	bd80      	pop	{r7, pc}

1004f680 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
1004f680:	b580      	push	{r7, lr}
1004f682:	b082      	sub	sp, #8
1004f684:	af00      	add	r7, sp, #0
1004f686:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
1004f688:	46c0      	nop			@ (mov r8, r8)
1004f68a:	46bd      	mov	sp, r7
1004f68c:	b002      	add	sp, #8
1004f68e:	bd80      	pop	{r7, pc}

1004f690 <BLEEVT_RegisterGattEvtHandler>:

  return;
}

int BLEEVT_RegisterGattEvtHandler(BLEEVT_GattEvtHandlerFunc_t EvtHandlerFunc)
{
1004f690:	b580      	push	{r7, lr}
1004f692:	b082      	sub	sp, #8
1004f694:	af00      	add	r7, sp, #0
1004f696:	6078      	str	r0, [r7, #4]
  if(BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers == BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS)
1004f698:	4b0c      	ldr	r3, [pc, #48]	@ (1004f6cc <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004f69a:	791b      	ldrb	r3, [r3, #4]
1004f69c:	2b01      	cmp	r3, #1
1004f69e:	d102      	bne.n	1004f6a6 <BLEEVT_RegisterGattEvtHandler+0x16>
  {
    return -1;
1004f6a0:	2301      	movs	r3, #1
1004f6a2:	425b      	negs	r3, r3
1004f6a4:	e00d      	b.n	1004f6c2 <BLEEVT_RegisterGattEvtHandler+0x32>
  }
#if (BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS > 0)
  BLEEVT_GattEvtHandler.BLEEVT_SvcHandlerTab[BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers] = EvtHandlerFunc;
1004f6a6:	4b09      	ldr	r3, [pc, #36]	@ (1004f6cc <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004f6a8:	791b      	ldrb	r3, [r3, #4]
1004f6aa:	001a      	movs	r2, r3
1004f6ac:	4b07      	ldr	r3, [pc, #28]	@ (1004f6cc <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004f6ae:	0092      	lsls	r2, r2, #2
1004f6b0:	6879      	ldr	r1, [r7, #4]
1004f6b2:	50d1      	str	r1, [r2, r3]
  BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers++;
1004f6b4:	4b05      	ldr	r3, [pc, #20]	@ (1004f6cc <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004f6b6:	791b      	ldrb	r3, [r3, #4]
1004f6b8:	3301      	adds	r3, #1
1004f6ba:	b2da      	uxtb	r2, r3
1004f6bc:	4b03      	ldr	r3, [pc, #12]	@ (1004f6cc <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004f6be:	711a      	strb	r2, [r3, #4]
#else
  (void)(EvtHandlerFunc);
#endif

  return 0;
1004f6c0:	2300      	movs	r3, #0
}
1004f6c2:	0018      	movs	r0, r3
1004f6c4:	46bd      	mov	sp, r7
1004f6c6:	b002      	add	sp, #8
1004f6c8:	bd80      	pop	{r7, pc}
1004f6ca:	46c0      	nop			@ (mov r8, r8)
1004f6cc:	20002790 	.word	0x20002790

1004f6d0 <BLE_STACK_Event>:

  return 0;
}

void BLE_STACK_Event(hci_pckt *hci_pckt, uint16_t length)
{
1004f6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004f6d2:	b089      	sub	sp, #36	@ 0x24
1004f6d4:	af00      	add	r7, sp, #0
1004f6d6:	6078      	str	r0, [r7, #4]
1004f6d8:	000a      	movs	r2, r1
1004f6da:	1cbb      	adds	r3, r7, #2
1004f6dc:	801a      	strh	r2, [r3, #0]
  BLEEVT_EvtAckStatus_t event_notification_status = BLEEVT_NoAck;
1004f6de:	231f      	movs	r3, #31
1004f6e0:	18fb      	adds	r3, r7, r3
1004f6e2:	2200      	movs	r2, #0
1004f6e4:	701a      	strb	r2, [r3, #0]
  
  if(hci_pckt->type == HCI_EVENT_PKT_TYPE || hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE)
1004f6e6:	687b      	ldr	r3, [r7, #4]
1004f6e8:	781b      	ldrb	r3, [r3, #0]
1004f6ea:	2b04      	cmp	r3, #4
1004f6ec:	d003      	beq.n	1004f6f6 <BLE_STACK_Event+0x26>
1004f6ee:	687b      	ldr	r3, [r7, #4]
1004f6f0:	781b      	ldrb	r3, [r3, #0]
1004f6f2:	2b82      	cmp	r3, #130	@ 0x82
1004f6f4:	d148      	bne.n	1004f788 <BLE_STACK_Event+0xb8>
  {
    void *data;
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
1004f6f6:	687b      	ldr	r3, [r7, #4]
1004f6f8:	3301      	adds	r3, #1
1004f6fa:	613b      	str	r3, [r7, #16]
    
    if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
1004f6fc:	687b      	ldr	r3, [r7, #4]
1004f6fe:	781b      	ldrb	r3, [r3, #0]
1004f700:	2b04      	cmp	r3, #4
1004f702:	d103      	bne.n	1004f70c <BLE_STACK_Event+0x3c>
      data = event_pckt->data;
1004f704:	693b      	ldr	r3, [r7, #16]
1004f706:	3302      	adds	r3, #2
1004f708:	61bb      	str	r3, [r7, #24]
1004f70a:	e005      	b.n	1004f718 <BLE_STACK_Event+0x48>
    }
    else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
      hci_event_ext_pckt *event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
1004f70c:	687b      	ldr	r3, [r7, #4]
1004f70e:	3301      	adds	r3, #1
1004f710:	60fb      	str	r3, [r7, #12]
      data = event_pckt->data;
1004f712:	68fb      	ldr	r3, [r7, #12]
1004f714:	3303      	adds	r3, #3
1004f716:	61bb      	str	r3, [r7, #24]
    }
    
    if(event_pckt->evt == HCI_VENDOR_EVT_CODE) /* evt fields is at same offset in hci_event_pckt and hci_event_ext_pckt */
1004f718:	693b      	ldr	r3, [r7, #16]
1004f71a:	781b      	ldrb	r3, [r3, #0]
1004f71c:	2bff      	cmp	r3, #255	@ 0xff
1004f71e:	d133      	bne.n	1004f788 <BLE_STACK_Event+0xb8>
    {
      aci_blecore_event * blecore_evt = (aci_blecore_event*) data;
1004f720:	69bb      	ldr	r3, [r7, #24]
1004f722:	60bb      	str	r3, [r7, #8]
      
      if((blecore_evt->ecode & BLEEVT_EGID_EVT_MASK) == BLEEVT_GATT_EVT_TYPE)
1004f724:	68bb      	ldr	r3, [r7, #8]
1004f726:	781a      	ldrb	r2, [r3, #0]
1004f728:	785b      	ldrb	r3, [r3, #1]
1004f72a:	021b      	lsls	r3, r3, #8
1004f72c:	4313      	orrs	r3, r2
1004f72e:	b29b      	uxth	r3, r3
1004f730:	001a      	movs	r2, r3
1004f732:	23fc      	movs	r3, #252	@ 0xfc
1004f734:	021b      	lsls	r3, r3, #8
1004f736:	401a      	ands	r2, r3
1004f738:	23c0      	movs	r3, #192	@ 0xc0
1004f73a:	011b      	lsls	r3, r3, #4
1004f73c:	429a      	cmp	r2, r3
1004f73e:	d123      	bne.n	1004f788 <BLE_STACK_Event+0xb8>
      {
        /* GATT events */
        
#if (BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS > 0)
        /* For GATT event handler */
        for (uint8_t index = 0; index < BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers; index++)
1004f740:	2317      	movs	r3, #23
1004f742:	18fb      	adds	r3, r7, r3
1004f744:	2200      	movs	r2, #0
1004f746:	701a      	strb	r2, [r3, #0]
1004f748:	e015      	b.n	1004f776 <BLE_STACK_Event+0xa6>
        {
          event_notification_status = BLEEVT_GattEvtHandler.BLEEVT_SvcHandlerTab[index](blecore_evt);
1004f74a:	2517      	movs	r5, #23
1004f74c:	197b      	adds	r3, r7, r5
1004f74e:	781a      	ldrb	r2, [r3, #0]
1004f750:	4b14      	ldr	r3, [pc, #80]	@ (1004f7a4 <BLE_STACK_Event+0xd4>)
1004f752:	0092      	lsls	r2, r2, #2
1004f754:	58d3      	ldr	r3, [r2, r3]
1004f756:	261f      	movs	r6, #31
1004f758:	19bc      	adds	r4, r7, r6
1004f75a:	68ba      	ldr	r2, [r7, #8]
1004f75c:	0010      	movs	r0, r2
1004f75e:	4798      	blx	r3
1004f760:	0003      	movs	r3, r0
1004f762:	7023      	strb	r3, [r4, #0]
          /**
          * When a GATT event has been acknowledged by application, do not call other registered handler.
          * a GATT event may be relevant for only one Service
          */
          if (event_notification_status == BLEEVT_Ack)
1004f764:	19bb      	adds	r3, r7, r6
1004f766:	781b      	ldrb	r3, [r3, #0]
1004f768:	2b01      	cmp	r3, #1
1004f76a:	d00c      	beq.n	1004f786 <BLE_STACK_Event+0xb6>
        for (uint8_t index = 0; index < BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers; index++)
1004f76c:	197b      	adds	r3, r7, r5
1004f76e:	781a      	ldrb	r2, [r3, #0]
1004f770:	197b      	adds	r3, r7, r5
1004f772:	3201      	adds	r2, #1
1004f774:	701a      	strb	r2, [r3, #0]
1004f776:	4b0b      	ldr	r3, [pc, #44]	@ (1004f7a4 <BLE_STACK_Event+0xd4>)
1004f778:	791b      	ldrb	r3, [r3, #4]
1004f77a:	2217      	movs	r2, #23
1004f77c:	18ba      	adds	r2, r7, r2
1004f77e:	7812      	ldrb	r2, [r2, #0]
1004f780:	429a      	cmp	r2, r3
1004f782:	d3e2      	bcc.n	1004f74a <BLE_STACK_Event+0x7a>
1004f784:	e000      	b.n	1004f788 <BLE_STACK_Event+0xb8>
          {
            /**
            *  The event has been managed. The Event processing should be stopped
            */
            break;
1004f786:	46c0      	nop			@ (mov r8, r8)
  
  /**
   * When no registered handlers has acknowledged the event, it is reported to the application.
   */
  
  if(event_notification_status == BLEEVT_NoAck)
1004f788:	231f      	movs	r3, #31
1004f78a:	18fb      	adds	r3, r7, r3
1004f78c:	781b      	ldrb	r3, [r3, #0]
1004f78e:	2b00      	cmp	r3, #0
1004f790:	d103      	bne.n	1004f79a <BLE_STACK_Event+0xca>
  {
    BLEEVT_App_Notification(hci_pckt);
1004f792:	687b      	ldr	r3, [r7, #4]
1004f794:	0018      	movs	r0, r3
1004f796:	f003 f81d 	bl	100527d4 <BLEEVT_App_Notification>
  }
}
1004f79a:	46c0      	nop			@ (mov r8, r8)
1004f79c:	46bd      	mov	sp, r7
1004f79e:	b009      	add	sp, #36	@ 0x24
1004f7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004f7a2:	46c0      	nop			@ (mov r8, r8)
1004f7a4:	20002790 	.word	0x20002790

1004f7a8 <GAP_name_disc_proc_connected_check_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAP_name_disc_proc_connected_check_ucfg(uint16_t task_idx)
{
1004f7a8:	b580      	push	{r7, lr}
1004f7aa:	b082      	sub	sp, #8
1004f7ac:	af00      	add	r7, sp, #0
1004f7ae:	0002      	movs	r2, r0
1004f7b0:	1dbb      	adds	r3, r7, #6
1004f7b2:	801a      	strh	r2, [r3, #0]
    GAP_name_disc_proc_connected_check(task_idx);
1004f7b4:	1dbb      	adds	r3, r7, #6
1004f7b6:	881b      	ldrh	r3, [r3, #0]
1004f7b8:	0018      	movs	r0, r3
1004f7ba:	f007 f89f 	bl	100568fc <GAP_name_disc_proc_connected_check>
}
1004f7be:	46c0      	nop			@ (mov r8, r8)
1004f7c0:	46bd      	mov	sp, r7
1004f7c2:	b002      	add	sp, #8
1004f7c4:	bd80      	pop	{r7, pc}

1004f7c6 <GAP_LimDiscTimeoutcb_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAP_LimDiscTimeoutcb_ucfg(uint8_t timer_id)
{
1004f7c6:	b580      	push	{r7, lr}
1004f7c8:	b082      	sub	sp, #8
1004f7ca:	af00      	add	r7, sp, #0
1004f7cc:	0002      	movs	r2, r0
1004f7ce:	1dfb      	adds	r3, r7, #7
1004f7d0:	701a      	strb	r2, [r3, #0]
    GAP_LimDiscTimeoutcb(timer_id);
1004f7d2:	1dfb      	adds	r3, r7, #7
1004f7d4:	781b      	ldrb	r3, [r3, #0]
1004f7d6:	0018      	movs	r0, r3
1004f7d8:	f007 fad4 	bl	10056d84 <GAP_LimDiscTimeoutcb>
}
1004f7dc:	46c0      	nop			@ (mov r8, r8)
1004f7de:	46bd      	mov	sp, r7
1004f7e0:	b002      	add	sp, #8
1004f7e2:	bd80      	pop	{r7, pc}

1004f7e4 <hci_acl_data_tx_cmpl_event_int_cb_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_acl_data_tx_cmpl_event_int_cb_ucfg(void* header_p,
                                                  uint8_t* buff_p)
{
1004f7e4:	b580      	push	{r7, lr}
1004f7e6:	b082      	sub	sp, #8
1004f7e8:	af00      	add	r7, sp, #0
1004f7ea:	6078      	str	r0, [r7, #4]
1004f7ec:	6039      	str	r1, [r7, #0]
    return hci_acl_data_tx_cmpl_event_int_cb(header_p,
1004f7ee:	683a      	ldr	r2, [r7, #0]
1004f7f0:	687b      	ldr	r3, [r7, #4]
1004f7f2:	0011      	movs	r1, r2
1004f7f4:	0018      	movs	r0, r3
1004f7f6:	f006 f8ab 	bl	10055950 <hci_acl_data_tx_cmpl_event_int_cb>
1004f7fa:	0003      	movs	r3, r0
                                             buff_p);
}
1004f7fc:	0018      	movs	r0, r3
1004f7fe:	46bd      	mov	sp, r7
1004f800:	b002      	add	sp, #8
1004f802:	bd80      	pop	{r7, pc}

1004f804 <hci_acl_data_ind_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_acl_data_ind_event_int_cb_ucfg(void* header_p,
                                              uint8_t* buff_p)
{
1004f804:	b580      	push	{r7, lr}
1004f806:	b082      	sub	sp, #8
1004f808:	af00      	add	r7, sp, #0
1004f80a:	6078      	str	r0, [r7, #4]
1004f80c:	6039      	str	r1, [r7, #0]
    return hci_acl_data_ind_event_int_cb(header_p,
1004f80e:	683a      	ldr	r2, [r7, #0]
1004f810:	687b      	ldr	r3, [r7, #4]
1004f812:	0011      	movs	r1, r2
1004f814:	0018      	movs	r0, r3
1004f816:	f006 f8c5 	bl	100559a4 <hci_acl_data_ind_event_int_cb>
1004f81a:	0003      	movs	r3, r0
                                         buff_p);
}
1004f81c:	0018      	movs	r0, r3
1004f81e:	46bd      	mov	sp, r7
1004f820:	b002      	add	sp, #8
1004f822:	bd80      	pop	{r7, pc}

1004f824 <Controller_Process_Q_ucfg>:
#endif /* ((CONTROLLER_CHAN_CLASS_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void Controller_Process_Q_ucfg(uint16_t task_idx)
{
1004f824:	b580      	push	{r7, lr}
1004f826:	b082      	sub	sp, #8
1004f828:	af00      	add	r7, sp, #0
1004f82a:	0002      	movs	r2, r0
1004f82c:	1dbb      	adds	r3, r7, #6
1004f82e:	801a      	strh	r2, [r3, #0]
    Controller_Process_Q(task_idx);
1004f830:	1dbb      	adds	r3, r7, #6
1004f832:	881b      	ldrh	r3, [r3, #0]
1004f834:	0018      	movs	r0, r3
1004f836:	f00a fc03 	bl	1005a040 <Controller_Process_Q>
}
1004f83a:	46c0      	nop			@ (mov r8, r8)
1004f83c:	46bd      	mov	sp, r7
1004f83e:	b002      	add	sp, #8
1004f840:	bd80      	pop	{r7, pc}

1004f842 <LLC_offline_control_procedures_processing_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LLC_offline_control_procedures_processing_ucfg(uint16_t task_idx)
{
1004f842:	b580      	push	{r7, lr}
1004f844:	b082      	sub	sp, #8
1004f846:	af00      	add	r7, sp, #0
1004f848:	0002      	movs	r2, r0
1004f84a:	1dbb      	adds	r3, r7, #6
1004f84c:	801a      	strh	r2, [r3, #0]
    LLC_offline_control_procedures_processing(task_idx);
1004f84e:	1dbb      	adds	r3, r7, #6
1004f850:	881b      	ldrh	r3, [r3, #0]
1004f852:	0018      	movs	r0, r3
1004f854:	f00a fc44 	bl	1005a0e0 <LLC_offline_control_procedures_processing>
}
1004f858:	46c0      	nop			@ (mov r8, r8)
1004f85a:	46bd      	mov	sp, r7
1004f85c:	b002      	add	sp, #8
1004f85e:	bd80      	pop	{r7, pc}

1004f860 <phy_upd_csr_ucfg>:
#endif /* ((CONTROLLER_POWER_CONTROL_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1)
uint32_t phy_upd_csr_ucfg(void)
{
1004f860:	b580      	push	{r7, lr}
1004f862:	af00      	add	r7, sp, #0
    return phy_upd_csr();
1004f864:	f00a fd06 	bl	1005a274 <phy_upd_csr>
1004f868:	0003      	movs	r3, r0
}
1004f86a:	0018      	movs	r0, r3
1004f86c:	46bd      	mov	sp, r7
1004f86e:	bd80      	pop	{r7, pc}

1004f870 <conn_supp_csr_ucfg>:
}
#endif /* (CONTROLLER_SCAN_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
uint32_t conn_supp_csr_ucfg(void)
{
1004f870:	b580      	push	{r7, lr}
1004f872:	af00      	add	r7, sp, #0
    return conn_supp_csr();
1004f874:	f00a fd02 	bl	1005a27c <conn_supp_csr>
1004f878:	0003      	movs	r3, r0
}
1004f87a:	0018      	movs	r0, r3
1004f87c:	46bd      	mov	sp, r7
1004f87e:	bd80      	pop	{r7, pc}

1004f880 <ACL_pkt_init_ucfg>:
}
#endif /* (CONTROLLER_CTE_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus ACL_pkt_init_ucfg(void)
{
1004f880:	b580      	push	{r7, lr}
1004f882:	af00      	add	r7, sp, #0
    return ACL_pkt_init();
1004f884:	f006 f8b0 	bl	100559e8 <ACL_pkt_init>
1004f888:	0003      	movs	r3, r0
}
1004f88a:	0018      	movs	r0, r3
1004f88c:	46bd      	mov	sp, r7
1004f88e:	bd80      	pop	{r7, pc}

1004f890 <hci_disconnection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_disconnection_complete_event_int_cb_ucfg(void* header_p,
                                                        uint8_t* buff_p)
{
1004f890:	b580      	push	{r7, lr}
1004f892:	b082      	sub	sp, #8
1004f894:	af00      	add	r7, sp, #0
1004f896:	6078      	str	r0, [r7, #4]
1004f898:	6039      	str	r1, [r7, #0]
    return hci_disconnection_complete_event_int_cb(header_p,
1004f89a:	683a      	ldr	r2, [r7, #0]
1004f89c:	687b      	ldr	r3, [r7, #4]
1004f89e:	0011      	movs	r1, r2
1004f8a0:	0018      	movs	r0, r3
1004f8a2:	f006 fc53 	bl	1005614c <hci_disconnection_complete_event_int_cb>
1004f8a6:	0003      	movs	r3, r0
                                                   buff_p);
}
1004f8a8:	0018      	movs	r0, r3
1004f8aa:	46bd      	mov	sp, r7
1004f8ac:	b002      	add	sp, #8
1004f8ae:	bd80      	pop	{r7, pc}

1004f8b0 <hci_encryption_change_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_encryption_change_event_int_cb_ucfg(void* header_p,
                                                   uint8_t* buff_p)
{
1004f8b0:	b580      	push	{r7, lr}
1004f8b2:	b082      	sub	sp, #8
1004f8b4:	af00      	add	r7, sp, #0
1004f8b6:	6078      	str	r0, [r7, #4]
1004f8b8:	6039      	str	r1, [r7, #0]
    return hci_encryption_change_event_int_cb(header_p,
1004f8ba:	683a      	ldr	r2, [r7, #0]
1004f8bc:	687b      	ldr	r3, [r7, #4]
1004f8be:	0011      	movs	r1, r2
1004f8c0:	0018      	movs	r0, r3
1004f8c2:	f006 fc73 	bl	100561ac <hci_encryption_change_event_int_cb>
1004f8c6:	0003      	movs	r3, r0
                                              buff_p);
}
1004f8c8:	0018      	movs	r0, r3
1004f8ca:	46bd      	mov	sp, r7
1004f8cc:	b002      	add	sp, #8
1004f8ce:	bd80      	pop	{r7, pc}

1004f8d0 <hci_encryption_key_refresh_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_encryption_key_refresh_complete_event_int_cb_ucfg(void* header_p,
                                                                 uint8_t* buff_p)
{
1004f8d0:	b580      	push	{r7, lr}
1004f8d2:	b082      	sub	sp, #8
1004f8d4:	af00      	add	r7, sp, #0
1004f8d6:	6078      	str	r0, [r7, #4]
1004f8d8:	6039      	str	r1, [r7, #0]
    return hci_encryption_key_refresh_complete_event_int_cb(header_p,
1004f8da:	683a      	ldr	r2, [r7, #0]
1004f8dc:	687b      	ldr	r3, [r7, #4]
1004f8de:	0011      	movs	r1, r2
1004f8e0:	0018      	movs	r0, r3
1004f8e2:	f006 fc7f 	bl	100561e4 <hci_encryption_key_refresh_complete_event_int_cb>
1004f8e6:	0003      	movs	r3, r0
                                                            buff_p);
}
1004f8e8:	0018      	movs	r0, r3
1004f8ea:	46bd      	mov	sp, r7
1004f8ec:	b002      	add	sp, #8
1004f8ee:	bd80      	pop	{r7, pc}

1004f8f0 <hci_le_connection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_connection_complete_event_int_cb_ucfg(void* header_p,
                                                        uint8_t* buff_p)
{
1004f8f0:	b580      	push	{r7, lr}
1004f8f2:	b082      	sub	sp, #8
1004f8f4:	af00      	add	r7, sp, #0
1004f8f6:	6078      	str	r0, [r7, #4]
1004f8f8:	6039      	str	r1, [r7, #0]
    return hci_le_connection_complete_event_int_cb(header_p,
1004f8fa:	683a      	ldr	r2, [r7, #0]
1004f8fc:	687b      	ldr	r3, [r7, #4]
1004f8fe:	0011      	movs	r1, r2
1004f900:	0018      	movs	r0, r3
1004f902:	f006 fc8b 	bl	1005621c <hci_le_connection_complete_event_int_cb>
1004f906:	0003      	movs	r3, r0
                                                   buff_p);
}
1004f908:	0018      	movs	r0, r3
1004f90a:	46bd      	mov	sp, r7
1004f90c:	b002      	add	sp, #8
1004f90e:	bd80      	pop	{r7, pc}

1004f910 <hci_le_enhanced_connection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_enhanced_connection_complete_event_int_cb_ucfg(void* header_p,
                                                                 uint8_t* buff_p)
{
1004f910:	b580      	push	{r7, lr}
1004f912:	b082      	sub	sp, #8
1004f914:	af00      	add	r7, sp, #0
1004f916:	6078      	str	r0, [r7, #4]
1004f918:	6039      	str	r1, [r7, #0]
    return hci_le_enhanced_connection_complete_event_int_cb(header_p,
1004f91a:	683a      	ldr	r2, [r7, #0]
1004f91c:	687b      	ldr	r3, [r7, #4]
1004f91e:	0011      	movs	r1, r2
1004f920:	0018      	movs	r0, r3
1004f922:	f006 fcbb 	bl	1005629c <hci_le_enhanced_connection_complete_event_int_cb>
1004f926:	0003      	movs	r3, r0
                                                            buff_p);
}
1004f928:	0018      	movs	r0, r3
1004f92a:	46bd      	mov	sp, r7
1004f92c:	b002      	add	sp, #8
1004f92e:	bd80      	pop	{r7, pc}

1004f930 <hci_le_long_term_key_request_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_long_term_key_request_event_int_cb_ucfg(void* header_p,
                                                          uint8_t* buff_p)
{
1004f930:	b580      	push	{r7, lr}
1004f932:	b082      	sub	sp, #8
1004f934:	af00      	add	r7, sp, #0
1004f936:	6078      	str	r0, [r7, #4]
1004f938:	6039      	str	r1, [r7, #0]
    return hci_le_long_term_key_request_event_int_cb(header_p,
1004f93a:	683a      	ldr	r2, [r7, #0]
1004f93c:	687b      	ldr	r3, [r7, #4]
1004f93e:	0011      	movs	r1, r2
1004f940:	0018      	movs	r0, r3
1004f942:	f006 fcf1 	bl	10056328 <hci_le_long_term_key_request_event_int_cb>
1004f946:	0003      	movs	r3, r0
                                                     buff_p);
}
1004f948:	0018      	movs	r0, r3
1004f94a:	46bd      	mov	sp, r7
1004f94c:	b002      	add	sp, #8
1004f94e:	bd80      	pop	{r7, pc}

1004f950 <hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg(void* header_p,
                                                                        uint8_t* buff_p)
{
1004f950:	b580      	push	{r7, lr}
1004f952:	b082      	sub	sp, #8
1004f954:	af00      	add	r7, sp, #0
1004f956:	6078      	str	r0, [r7, #4]
1004f958:	6039      	str	r1, [r7, #0]
    return hci_le_read_local_p256_public_key_complete_event_int_cb(header_p,
1004f95a:	683a      	ldr	r2, [r7, #0]
1004f95c:	687b      	ldr	r3, [r7, #4]
1004f95e:	0011      	movs	r1, r2
1004f960:	0018      	movs	r0, r3
1004f962:	f006 fd11 	bl	10056388 <hci_le_read_local_p256_public_key_complete_event_int_cb>
1004f966:	0003      	movs	r3, r0
                                                                   buff_p);
}
1004f968:	0018      	movs	r0, r3
1004f96a:	46bd      	mov	sp, r7
1004f96c:	b002      	add	sp, #8
1004f96e:	bd80      	pop	{r7, pc}

1004f970 <hci_le_generate_dhkey_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_generate_dhkey_complete_event_int_cb_ucfg(void* header_p,
                                                            uint8_t* buff_p)
{
1004f970:	b580      	push	{r7, lr}
1004f972:	b082      	sub	sp, #8
1004f974:	af00      	add	r7, sp, #0
1004f976:	6078      	str	r0, [r7, #4]
1004f978:	6039      	str	r1, [r7, #0]
    return hci_le_generate_dhkey_complete_event_int_cb(header_p,
1004f97a:	683a      	ldr	r2, [r7, #0]
1004f97c:	687b      	ldr	r3, [r7, #4]
1004f97e:	0011      	movs	r1, r2
1004f980:	0018      	movs	r0, r3
1004f982:	f006 fd1f 	bl	100563c4 <hci_le_generate_dhkey_complete_event_int_cb>
1004f986:	0003      	movs	r3, r0
                                                       buff_p);
}
1004f988:	0018      	movs	r0, r3
1004f98a:	46bd      	mov	sp, r7
1004f98c:	b002      	add	sp, #8
1004f98e:	bd80      	pop	{r7, pc}

1004f990 <MBM_init_ucfg>:
      (CONTROLLER_PERIODIC_ADV_ENABLED == 1) &&\
      (CONTROLLER_BIS_ENABLED == 1)\
     )\
    )
tBleStatus MBM_init_ucfg(void)
{
1004f990:	b580      	push	{r7, lr}
1004f992:	af00      	add	r7, sp, #0
    return MBM_init();
1004f994:	f011 fe20 	bl	100615d8 <MBM_init>
1004f998:	0003      	movs	r3, r0
}
1004f99a:	0018      	movs	r0, r3
1004f99c:	46bd      	mov	sp, r7
1004f99e:	bd80      	pop	{r7, pc}

1004f9a0 <smp_debug_trudy__set_config_ucfg>:
#endif

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus smp_debug_trudy__set_config_ucfg(uint32_t config)
{
1004f9a0:	b580      	push	{r7, lr}
1004f9a2:	b082      	sub	sp, #8
1004f9a4:	af00      	add	r7, sp, #0
1004f9a6:	6078      	str	r0, [r7, #4]
    return smp_debug_trudy__set_config(config);
1004f9a8:	687b      	ldr	r3, [r7, #4]
1004f9aa:	0018      	movs	r0, r3
1004f9ac:	f012 fe0b 	bl	100625c6 <smp_debug_trudy__set_config>
1004f9b0:	0003      	movs	r3, r0
}
1004f9b2:	0018      	movs	r0, r3
1004f9b4:	46bd      	mov	sp, r7
1004f9b6:	b002      	add	sp, #8
1004f9b8:	bd80      	pop	{r7, pc}

1004f9ba <smp_sap_scp_force_debug_key_usage_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus smp_sap_scp_force_debug_key_usage_ucfg(uint8_t config_val)
{
1004f9ba:	b580      	push	{r7, lr}
1004f9bc:	b082      	sub	sp, #8
1004f9be:	af00      	add	r7, sp, #0
1004f9c0:	0002      	movs	r2, r0
1004f9c2:	1dfb      	adds	r3, r7, #7
1004f9c4:	701a      	strb	r2, [r3, #0]
    return smp_sap_scp_force_debug_key_usage(config_val);
1004f9c6:	1dfb      	adds	r3, r7, #7
1004f9c8:	781b      	ldrb	r3, [r3, #0]
1004f9ca:	0018      	movs	r0, r3
1004f9cc:	f013 fafa 	bl	10062fc4 <smp_sap_scp_force_debug_key_usage>
1004f9d0:	0003      	movs	r3, r0
}
1004f9d2:	0018      	movs	r0, r3
1004f9d4:	46bd      	mov	sp, r7
1004f9d6:	b002      	add	sp, #8
1004f9d8:	bd80      	pop	{r7, pc}

1004f9da <L2C_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus L2C_init_ucfg(uint8_t cos_enabled)
{
1004f9da:	b580      	push	{r7, lr}
1004f9dc:	b082      	sub	sp, #8
1004f9de:	af00      	add	r7, sp, #0
1004f9e0:	0002      	movs	r2, r0
1004f9e2:	1dfb      	adds	r3, r7, #7
1004f9e4:	701a      	strb	r2, [r3, #0]
    return L2C_init(cos_enabled);
1004f9e6:	1dfb      	adds	r3, r7, #7
1004f9e8:	781b      	ldrb	r3, [r3, #0]
1004f9ea:	0018      	movs	r0, r3
1004f9ec:	f00a fe26 	bl	1005a63c <L2C_init>
1004f9f0:	0003      	movs	r3, r0
}
1004f9f2:	0018      	movs	r0, r3
1004f9f4:	46bd      	mov	sp, r7
1004f9f6:	b002      	add	sp, #8
1004f9f8:	bd80      	pop	{r7, pc}

1004f9fa <llc_conn_multi_link_connection_ucfg>:
#endif /* ((CONNECTION_SUBRATING_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
tBleStatus llc_conn_multi_link_connection_ucfg(uint8_t enable)
{
1004f9fa:	b580      	push	{r7, lr}
1004f9fc:	b082      	sub	sp, #8
1004f9fe:	af00      	add	r7, sp, #0
1004fa00:	0002      	movs	r2, r0
1004fa02:	1dfb      	adds	r3, r7, #7
1004fa04:	701a      	strb	r2, [r3, #0]
    return llc_conn_multi_link_connection(enable);
1004fa06:	1dfb      	adds	r3, r7, #7
1004fa08:	781b      	ldrb	r3, [r3, #0]
1004fa0a:	0018      	movs	r0, r3
1004fa0c:	f00b fe75 	bl	1005b6fa <llc_conn_multi_link_connection>
1004fa10:	0003      	movs	r3, r0
}
1004fa12:	0018      	movs	r0, r3
1004fa14:	46bd      	mov	sp, r7
1004fa16:	b002      	add	sp, #8
1004fa18:	bd80      	pop	{r7, pc}

1004fa1a <llc_conn_peripheral_roll_back_params_tsk_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void llc_conn_peripheral_roll_back_params_tsk_ucfg(uint16_t task_idx)
{
1004fa1a:	b580      	push	{r7, lr}
1004fa1c:	b082      	sub	sp, #8
1004fa1e:	af00      	add	r7, sp, #0
1004fa20:	0002      	movs	r2, r0
1004fa22:	1dbb      	adds	r3, r7, #6
1004fa24:	801a      	strh	r2, [r3, #0]
    llc_conn_peripheral_roll_back_params_tsk(task_idx);
1004fa26:	1dbb      	adds	r3, r7, #6
1004fa28:	881b      	ldrh	r3, [r3, #0]
1004fa2a:	0018      	movs	r0, r3
1004fa2c:	f00c fcb0 	bl	1005c390 <llc_conn_peripheral_roll_back_params_tsk>
}
1004fa30:	46c0      	nop			@ (mov r8, r8)
1004fa32:	46bd      	mov	sp, r7
1004fa34:	b002      	add	sp, #8
1004fa36:	bd80      	pop	{r7, pc}

1004fa38 <LL_cpe_init_phy_update_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_cpe_init_phy_update_ucfg(void)
{
1004fa38:	b580      	push	{r7, lr}
1004fa3a:	af00      	add	r7, sp, #0
    LL_cpe_init_phy_update();
1004fa3c:	f00d fc82 	bl	1005d344 <LL_cpe_init_phy_update>
}
1004fa40:	46c0      	nop			@ (mov r8, r8)
1004fa42:	46bd      	mov	sp, r7
1004fa44:	bd80      	pop	{r7, pc}

1004fa46 <LL_cpe_init_conn_update_ucfg>:
#endif /* ((CONTROLLER_POWER_CONTROL_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_conn_update_ucfg(void)
{
1004fa46:	b580      	push	{r7, lr}
1004fa48:	af00      	add	r7, sp, #0
    LL_cpe_init_conn_update();
1004fa4a:	f00d fc83 	bl	1005d354 <LL_cpe_init_conn_update>
}
1004fa4e:	46c0      	nop			@ (mov r8, r8)
1004fa50:	46bd      	mov	sp, r7
1004fa52:	bd80      	pop	{r7, pc}

1004fa54 <LL_cpe_init_chmap_update_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_chmap_update_ucfg(void)
{
1004fa54:	b580      	push	{r7, lr}
1004fa56:	af00      	add	r7, sp, #0
    LL_cpe_init_chmap_update();
1004fa58:	f00d fc84 	bl	1005d364 <LL_cpe_init_chmap_update>
}
1004fa5c:	46c0      	nop			@ (mov r8, r8)
1004fa5e:	46bd      	mov	sp, r7
1004fa60:	bd80      	pop	{r7, pc}

1004fa62 <LL_cpe_init_ucfg>:
#endif /* ((CONTROLLER_CIS_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_ucfg(void)
{
1004fa62:	b580      	push	{r7, lr}
1004fa64:	af00      	add	r7, sp, #0
    LL_cpe_init();
1004fa66:	f00d fcc1 	bl	1005d3ec <LL_cpe_init>
}
1004fa6a:	46c0      	nop			@ (mov r8, r8)
1004fa6c:	46bd      	mov	sp, r7
1004fa6e:	bd80      	pop	{r7, pc}

1004fa70 <LL_conn_upd_max_tx_time_coded_ucfg>:
          (CONNECTION_ENABLED == 1)) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_conn_upd_max_tx_time_coded_ucfg(void* params)
{
1004fa70:	b580      	push	{r7, lr}
1004fa72:	b082      	sub	sp, #8
1004fa74:	af00      	add	r7, sp, #0
1004fa76:	6078      	str	r0, [r7, #4]
    LL_conn_upd_max_tx_time_coded(params);
1004fa78:	687b      	ldr	r3, [r7, #4]
1004fa7a:	0018      	movs	r0, r3
1004fa7c:	f00e f8de 	bl	1005dc3c <LL_conn_upd_max_tx_time_coded>
}
1004fa80:	46c0      	nop			@ (mov r8, r8)
1004fa82:	46bd      	mov	sp, r7
1004fa84:	b002      	add	sp, #8
1004fa86:	bd80      	pop	{r7, pc}

1004fa88 <LL_conn_upd_data_length_change_event_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_conn_upd_data_length_change_event_ucfg(void* params)
{
1004fa88:	b580      	push	{r7, lr}
1004fa8a:	b082      	sub	sp, #8
1004fa8c:	af00      	add	r7, sp, #0
1004fa8e:	6078      	str	r0, [r7, #4]
    LL_conn_upd_data_length_change_event(params);
1004fa90:	687b      	ldr	r3, [r7, #4]
1004fa92:	0018      	movs	r0, r3
1004fa94:	f00e f956 	bl	1005dd44 <LL_conn_upd_data_length_change_event>
}
1004fa98:	46c0      	nop			@ (mov r8, r8)
1004fa9a:	46bd      	mov	sp, r7
1004fa9c:	b002      	add	sp, #8
1004fa9e:	bd80      	pop	{r7, pc}

1004faa0 <LLC_authenticated_payload_timeout_processing_ucfg>:
}
#endif /* (CONTROLLER_CTE_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LLC_authenticated_payload_timeout_processing_ucfg(uint16_t task_idx)
{
1004faa0:	b580      	push	{r7, lr}
1004faa2:	b082      	sub	sp, #8
1004faa4:	af00      	add	r7, sp, #0
1004faa6:	0002      	movs	r2, r0
1004faa8:	1dbb      	adds	r3, r7, #6
1004faaa:	801a      	strh	r2, [r3, #0]
    LLC_authenticated_payload_timeout_processing(task_idx);
1004faac:	1dbb      	adds	r3, r7, #6
1004faae:	881b      	ldrh	r3, [r3, #0]
1004fab0:	0018      	movs	r0, r3
1004fab2:	f00e ff47 	bl	1005e944 <LLC_authenticated_payload_timeout_processing>
}
1004fab6:	46c0      	nop			@ (mov r8, r8)
1004fab8:	46bd      	mov	sp, r7
1004faba:	b002      	add	sp, #8
1004fabc:	bd80      	pop	{r7, pc}

1004fabe <LL_phy_upd_pending_ucfg>:
          (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1)
uint8_t LL_phy_upd_pending_ucfg(uint8_t conn_idx)
{
1004fabe:	b580      	push	{r7, lr}
1004fac0:	b082      	sub	sp, #8
1004fac2:	af00      	add	r7, sp, #0
1004fac4:	0002      	movs	r2, r0
1004fac6:	1dfb      	adds	r3, r7, #7
1004fac8:	701a      	strb	r2, [r3, #0]
    return LL_phy_upd_pending(conn_idx);
1004faca:	1dfb      	adds	r3, r7, #7
1004facc:	781b      	ldrb	r3, [r3, #0]
1004face:	0018      	movs	r0, r3
1004fad0:	f00f f905 	bl	1005ecde <LL_phy_upd_pending>
1004fad4:	0003      	movs	r3, r0
}
1004fad6:	0018      	movs	r0, r3
1004fad8:	46bd      	mov	sp, r7
1004fada:	b002      	add	sp, #8
1004fadc:	bd80      	pop	{r7, pc}

1004fade <LL_phy_update_init_ucfg>:
#endif /* (CONTROLLER_2M_CODED_PHY_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
tBleStatus LL_phy_update_init_ucfg(void)
{
1004fade:	b580      	push	{r7, lr}
1004fae0:	af00      	add	r7, sp, #0
    return LL_phy_update_init();
1004fae2:	f00f f8b7 	bl	1005ec54 <LL_phy_update_init>
1004fae6:	0003      	movs	r3, r0
}
1004fae8:	0018      	movs	r0, r3
1004faea:	46bd      	mov	sp, r7
1004faec:	bd80      	pop	{r7, pc}

1004faee <LL_phy_update_init_per_st_data_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
tBleStatus LL_phy_update_init_per_st_data_ucfg(uint8_t conn_idx)
{
1004faee:	b580      	push	{r7, lr}
1004faf0:	b082      	sub	sp, #8
1004faf2:	af00      	add	r7, sp, #0
1004faf4:	0002      	movs	r2, r0
1004faf6:	1dfb      	adds	r3, r7, #7
1004faf8:	701a      	strb	r2, [r3, #0]
    return LL_phy_update_init_per_st_data(conn_idx);
1004fafa:	1dfb      	adds	r3, r7, #7
1004fafc:	781b      	ldrb	r3, [r3, #0]
1004fafe:	0018      	movs	r0, r3
1004fb00:	f00f f8b2 	bl	1005ec68 <LL_phy_update_init_per_st_data>
1004fb04:	0003      	movs	r3, r0
}
1004fb06:	0018      	movs	r0, r3
1004fb08:	46bd      	mov	sp, r7
1004fb0a:	b002      	add	sp, #8
1004fb0c:	bd80      	pop	{r7, pc}

1004fb0e <LL_phy_upd_evt_pending_check_isr_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_phy_upd_evt_pending_check_isr_ucfg(uint8_t conn_idx)
{
1004fb0e:	b580      	push	{r7, lr}
1004fb10:	b082      	sub	sp, #8
1004fb12:	af00      	add	r7, sp, #0
1004fb14:	0002      	movs	r2, r0
1004fb16:	1dfb      	adds	r3, r7, #7
1004fb18:	701a      	strb	r2, [r3, #0]
    LL_phy_upd_evt_pending_check_isr(conn_idx);
1004fb1a:	1dfb      	adds	r3, r7, #7
1004fb1c:	781b      	ldrb	r3, [r3, #0]
1004fb1e:	0018      	movs	r0, r3
1004fb20:	f00f fc8c 	bl	1005f43c <LL_phy_upd_evt_pending_check_isr>
}
1004fb24:	46c0      	nop			@ (mov r8, r8)
1004fb26:	46bd      	mov	sp, r7
1004fb28:	b002      	add	sp, #8
1004fb2a:	bd80      	pop	{r7, pc}

1004fb2c <ADV_ISR_connect_request_received_ucfg>:

#if (CONNECTION_ENABLED == 1)
void ADV_ISR_connect_request_received_ucfg(void* pointer,
                                           uint8_t* packet,
                                           void* PeerIDAddress_p)
{
1004fb2c:	b580      	push	{r7, lr}
1004fb2e:	b084      	sub	sp, #16
1004fb30:	af00      	add	r7, sp, #0
1004fb32:	60f8      	str	r0, [r7, #12]
1004fb34:	60b9      	str	r1, [r7, #8]
1004fb36:	607a      	str	r2, [r7, #4]
    ADV_ISR_connect_request_received(pointer,
1004fb38:	687a      	ldr	r2, [r7, #4]
1004fb3a:	68b9      	ldr	r1, [r7, #8]
1004fb3c:	68fb      	ldr	r3, [r7, #12]
1004fb3e:	0018      	movs	r0, r3
1004fb40:	f010 fd4a 	bl	100605d8 <ADV_ISR_connect_request_received>
                                     packet,
                                     PeerIDAddress_p);
}
1004fb44:	46c0      	nop			@ (mov r8, r8)
1004fb46:	46bd      	mov	sp, r7
1004fb48:	b004      	add	sp, #16
1004fb4a:	bd80      	pop	{r7, pc}

1004fb4c <EADV_start_request_radio_tasks_ucfg>:
}
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
uint8_t EADV_start_request_radio_tasks_ucfg(void* pointer)
{
1004fb4c:	b580      	push	{r7, lr}
1004fb4e:	b082      	sub	sp, #8
1004fb50:	af00      	add	r7, sp, #0
1004fb52:	6078      	str	r0, [r7, #4]
    return EADV_start_request_radio_tasks(pointer);
1004fb54:	687b      	ldr	r3, [r7, #4]
1004fb56:	0018      	movs	r0, r3
1004fb58:	f010 feca 	bl	100608f0 <EADV_start_request_radio_tasks>
1004fb5c:	0003      	movs	r3, r0
}
1004fb5e:	0018      	movs	r0, r3
1004fb60:	46bd      	mov	sp, r7
1004fb62:	b002      	add	sp, #8
1004fb64:	bd80      	pop	{r7, pc}

1004fb66 <LL_init_ucfg>:
                  uint8_t PerAdvScanWr,
                  uint8_t Cte,
                  uint8_t Pcl,
                  uint8_t Cns,
                  uint8_t Chc)
{
1004fb66:	b5b0      	push	{r4, r5, r7, lr}
1004fb68:	b08a      	sub	sp, #40	@ 0x28
1004fb6a:	af08      	add	r7, sp, #32
1004fb6c:	0005      	movs	r5, r0
1004fb6e:	000c      	movs	r4, r1
1004fb70:	0010      	movs	r0, r2
1004fb72:	0019      	movs	r1, r3
1004fb74:	1dfb      	adds	r3, r7, #7
1004fb76:	1c2a      	adds	r2, r5, #0
1004fb78:	701a      	strb	r2, [r3, #0]
1004fb7a:	1dbb      	adds	r3, r7, #6
1004fb7c:	1c22      	adds	r2, r4, #0
1004fb7e:	701a      	strb	r2, [r3, #0]
1004fb80:	1d7b      	adds	r3, r7, #5
1004fb82:	1c02      	adds	r2, r0, #0
1004fb84:	701a      	strb	r2, [r3, #0]
1004fb86:	1d3b      	adds	r3, r7, #4
1004fb88:	1c0a      	adds	r2, r1, #0
1004fb8a:	701a      	strb	r2, [r3, #0]
    LL_init(dataLenExt,
1004fb8c:	1d3b      	adds	r3, r7, #4
1004fb8e:	781c      	ldrb	r4, [r3, #0]
1004fb90:	1d7b      	adds	r3, r7, #5
1004fb92:	781a      	ldrb	r2, [r3, #0]
1004fb94:	1dbb      	adds	r3, r7, #6
1004fb96:	7819      	ldrb	r1, [r3, #0]
1004fb98:	1dfb      	adds	r3, r7, #7
1004fb9a:	7818      	ldrb	r0, [r3, #0]
1004fb9c:	2330      	movs	r3, #48	@ 0x30
1004fb9e:	18fb      	adds	r3, r7, r3
1004fba0:	781b      	ldrb	r3, [r3, #0]
1004fba2:	9306      	str	r3, [sp, #24]
1004fba4:	232c      	movs	r3, #44	@ 0x2c
1004fba6:	18fb      	adds	r3, r7, r3
1004fba8:	781b      	ldrb	r3, [r3, #0]
1004fbaa:	9305      	str	r3, [sp, #20]
1004fbac:	2328      	movs	r3, #40	@ 0x28
1004fbae:	18fb      	adds	r3, r7, r3
1004fbb0:	781b      	ldrb	r3, [r3, #0]
1004fbb2:	9304      	str	r3, [sp, #16]
1004fbb4:	2324      	movs	r3, #36	@ 0x24
1004fbb6:	18fb      	adds	r3, r7, r3
1004fbb8:	781b      	ldrb	r3, [r3, #0]
1004fbba:	9303      	str	r3, [sp, #12]
1004fbbc:	2320      	movs	r3, #32
1004fbbe:	18fb      	adds	r3, r7, r3
1004fbc0:	781b      	ldrb	r3, [r3, #0]
1004fbc2:	9302      	str	r3, [sp, #8]
1004fbc4:	231c      	movs	r3, #28
1004fbc6:	18fb      	adds	r3, r7, r3
1004fbc8:	781b      	ldrb	r3, [r3, #0]
1004fbca:	9301      	str	r3, [sp, #4]
1004fbcc:	2318      	movs	r3, #24
1004fbce:	18fb      	adds	r3, r7, r3
1004fbd0:	781b      	ldrb	r3, [r3, #0]
1004fbd2:	9300      	str	r3, [sp, #0]
1004fbd4:	0023      	movs	r3, r4
1004fbd6:	f011 f94f 	bl	10060e78 <LL_init>
            PerAdvScanWr,
            Cte,
            Pcl,
            Cns,
            Chc);
}
1004fbda:	46c0      	nop			@ (mov r8, r8)
1004fbdc:	46bd      	mov	sp, r7
1004fbde:	b002      	add	sp, #8
1004fbe0:	bdb0      	pop	{r4, r5, r7, pc}

1004fbe2 <smp_fsm_process_actions_wrt_state_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_fsm_process_actions_wrt_state_tsk_ucfg(uint16_t task_idx)
{
1004fbe2:	b580      	push	{r7, lr}
1004fbe4:	b082      	sub	sp, #8
1004fbe6:	af00      	add	r7, sp, #0
1004fbe8:	0002      	movs	r2, r0
1004fbea:	1dbb      	adds	r3, r7, #6
1004fbec:	801a      	strh	r2, [r3, #0]
    smp_fsm_process_actions_wrt_state_tsk(task_idx);
1004fbee:	1dbb      	adds	r3, r7, #6
1004fbf0:	881b      	ldrh	r3, [r3, #0]
1004fbf2:	0018      	movs	r0, r3
1004fbf4:	f012 fcea 	bl	100625cc <smp_fsm_process_actions_wrt_state_tsk>
}
1004fbf8:	46c0      	nop			@ (mov r8, r8)
1004fbfa:	46bd      	mov	sp, r7
1004fbfc:	b002      	add	sp, #8
1004fbfe:	bd80      	pop	{r7, pc}

1004fc00 <smp_rxp_process_rxed_packets_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_rxp_process_rxed_packets_tsk_ucfg(uint16_t task_idx)
{
1004fc00:	b580      	push	{r7, lr}
1004fc02:	b082      	sub	sp, #8
1004fc04:	af00      	add	r7, sp, #0
1004fc06:	0002      	movs	r2, r0
1004fc08:	1dbb      	adds	r3, r7, #6
1004fc0a:	801a      	strh	r2, [r3, #0]
    smp_rxp_process_rxed_packets_tsk(task_idx);
1004fc0c:	1dbb      	adds	r3, r7, #6
1004fc0e:	881b      	ldrh	r3, [r3, #0]
1004fc10:	0018      	movs	r0, r3
1004fc12:	f012 fdbf 	bl	10062794 <smp_rxp_process_rxed_packets_tsk>
}
1004fc16:	46c0      	nop			@ (mov r8, r8)
1004fc18:	46bd      	mov	sp, r7
1004fc1a:	b002      	add	sp, #8
1004fc1c:	bd80      	pop	{r7, pc}

1004fc1e <smp_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_init_ucfg(void)
{
1004fc1e:	b580      	push	{r7, lr}
1004fc20:	af00      	add	r7, sp, #0
    smp_init();
1004fc22:	f012 ff17 	bl	10062a54 <smp_init>
}
1004fc26:	46c0      	nop			@ (mov r8, r8)
1004fc28:	46bd      	mov	sp, r7
1004fc2a:	bd80      	pop	{r7, pc}

1004fc2c <GAT_att_cmn_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_init_ucfg(void)
{
1004fc2c:	b580      	push	{r7, lr}
1004fc2e:	af00      	add	r7, sp, #0
    GAT_att_cmn_init();
1004fc30:	f007 fc66 	bl	10057500 <GAT_att_cmn_init>
}
1004fc34:	46c0      	nop			@ (mov r8, r8)
1004fc36:	46bd      	mov	sp, r7
1004fc38:	bd80      	pop	{r7, pc}

1004fc3a <GAT_att_cmn_timer_expire_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_timer_expire_tsk_ucfg(uint16_t task_idx)
{
1004fc3a:	b580      	push	{r7, lr}
1004fc3c:	b082      	sub	sp, #8
1004fc3e:	af00      	add	r7, sp, #0
1004fc40:	0002      	movs	r2, r0
1004fc42:	1dbb      	adds	r3, r7, #6
1004fc44:	801a      	strh	r2, [r3, #0]
    GAT_att_cmn_timer_expire_tsk(task_idx);
1004fc46:	1dbb      	adds	r3, r7, #6
1004fc48:	881b      	ldrh	r3, [r3, #0]
1004fc4a:	0018      	movs	r0, r3
1004fc4c:	f007 fcc4 	bl	100575d8 <GAT_att_cmn_timer_expire_tsk>
}
1004fc50:	46c0      	nop			@ (mov r8, r8)
1004fc52:	46bd      	mov	sp, r7
1004fc54:	b002      	add	sp, #8
1004fc56:	bd80      	pop	{r7, pc}

1004fc58 <GAT_att_cmn_tx_pool_evt_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_tx_pool_evt_tsk_ucfg(uint16_t task_idx)
{
1004fc58:	b580      	push	{r7, lr}
1004fc5a:	b082      	sub	sp, #8
1004fc5c:	af00      	add	r7, sp, #0
1004fc5e:	0002      	movs	r2, r0
1004fc60:	1dbb      	adds	r3, r7, #6
1004fc62:	801a      	strh	r2, [r3, #0]
    GAT_att_cmn_tx_pool_evt_tsk(task_idx);
1004fc64:	1dbb      	adds	r3, r7, #6
1004fc66:	881b      	ldrh	r3, [r3, #0]
1004fc68:	0018      	movs	r0, r3
1004fc6a:	f007 fd29 	bl	100576c0 <GAT_att_cmn_tx_pool_evt_tsk>
}
1004fc6e:	46c0      	nop			@ (mov r8, r8)
1004fc70:	46bd      	mov	sp, r7
1004fc72:	b002      	add	sp, #8
1004fc74:	bd80      	pop	{r7, pc}

1004fc76 <GAT_att_srv_process_rx_pckt_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_srv_process_rx_pckt_tsk_ucfg(uint16_t task_idx)
{
1004fc76:	b580      	push	{r7, lr}
1004fc78:	b082      	sub	sp, #8
1004fc7a:	af00      	add	r7, sp, #0
1004fc7c:	0002      	movs	r2, r0
1004fc7e:	1dbb      	adds	r3, r7, #6
1004fc80:	801a      	strh	r2, [r3, #0]
    GAT_att_srv_process_rx_pckt_tsk(task_idx);
1004fc82:	1dbb      	adds	r3, r7, #6
1004fc84:	881b      	ldrh	r3, [r3, #0]
1004fc86:	0018      	movs	r0, r3
1004fc88:	f008 f846 	bl	10057d18 <GAT_att_srv_process_rx_pckt_tsk>
}
1004fc8c:	46c0      	nop			@ (mov r8, r8)
1004fc8e:	46bd      	mov	sp, r7
1004fc90:	b002      	add	sp, #8
1004fc92:	bd80      	pop	{r7, pc}

1004fc94 <GAT_srv_db_hash_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_srv_db_hash_tsk_ucfg(uint16_t task_idx)
{
1004fc94:	b580      	push	{r7, lr}
1004fc96:	b082      	sub	sp, #8
1004fc98:	af00      	add	r7, sp, #0
1004fc9a:	0002      	movs	r2, r0
1004fc9c:	1dbb      	adds	r3, r7, #6
1004fc9e:	801a      	strh	r2, [r3, #0]
    GAT_srv_db_hash_tsk(task_idx);
1004fca0:	1dbb      	adds	r3, r7, #6
1004fca2:	881b      	ldrh	r3, [r3, #0]
1004fca4:	0018      	movs	r0, r3
1004fca6:	f009 f921 	bl	10058eec <GAT_srv_db_hash_tsk>
}
1004fcaa:	46c0      	nop			@ (mov r8, r8)
1004fcac:	46bd      	mov	sp, r7
1004fcae:	b002      	add	sp, #8
1004fcb0:	bd80      	pop	{r7, pc}

1004fcb2 <GAT_srv_send_srv_change_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_srv_send_srv_change_tsk_ucfg(uint16_t task_idx)
{
1004fcb2:	b580      	push	{r7, lr}
1004fcb4:	b082      	sub	sp, #8
1004fcb6:	af00      	add	r7, sp, #0
1004fcb8:	0002      	movs	r2, r0
1004fcba:	1dbb      	adds	r3, r7, #6
1004fcbc:	801a      	strh	r2, [r3, #0]
    GAT_srv_send_srv_change_tsk(task_idx);
1004fcbe:	1dbb      	adds	r3, r7, #6
1004fcc0:	881b      	ldrh	r3, [r3, #0]
1004fcc2:	0018      	movs	r0, r3
1004fcc4:	f009 f9cc 	bl	10059060 <GAT_srv_send_srv_change_tsk>
}
1004fcc8:	46c0      	nop			@ (mov r8, r8)
1004fcca:	46bd      	mov	sp, r7
1004fccc:	b002      	add	sp, #8
1004fcce:	bd80      	pop	{r7, pc}

1004fcd0 <aci_gap_terminate>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_terminate(uint16_t Connection_Handle,
                             uint8_t Reason)
{
1004fcd0:	b580      	push	{r7, lr}
1004fcd2:	b082      	sub	sp, #8
1004fcd4:	af00      	add	r7, sp, #0
1004fcd6:	0002      	movs	r2, r0
1004fcd8:	1dbb      	adds	r3, r7, #6
1004fcda:	801a      	strh	r2, [r3, #0]
1004fcdc:	1d7b      	adds	r3, r7, #5
1004fcde:	1c0a      	adds	r2, r1, #0
1004fce0:	701a      	strb	r2, [r3, #0]
    return aci_gap_terminate_api(Connection_Handle,
1004fce2:	1d7b      	adds	r3, r7, #5
1004fce4:	781a      	ldrb	r2, [r3, #0]
1004fce6:	1dbb      	adds	r3, r7, #6
1004fce8:	881b      	ldrh	r3, [r3, #0]
1004fcea:	0011      	movs	r1, r2
1004fcec:	0018      	movs	r0, r3
1004fcee:	f005 fb49 	bl	10055384 <aci_gap_terminate_api>
1004fcf2:	0003      	movs	r3, r0
                                 Reason);
}
1004fcf4:	0018      	movs	r0, r3
1004fcf6:	46bd      	mov	sp, r7
1004fcf8:	b002      	add	sp, #8
1004fcfa:	bd80      	pop	{r7, pc}

1004fcfc <aci_gap_set_io_capability>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
1004fcfc:	b580      	push	{r7, lr}
1004fcfe:	b082      	sub	sp, #8
1004fd00:	af00      	add	r7, sp, #0
1004fd02:	0002      	movs	r2, r0
1004fd04:	1dfb      	adds	r3, r7, #7
1004fd06:	701a      	strb	r2, [r3, #0]
    return aci_gap_set_io_capability_api(IO_Capability);
1004fd08:	1dfb      	adds	r3, r7, #7
1004fd0a:	781b      	ldrb	r3, [r3, #0]
1004fd0c:	0018      	movs	r0, r3
1004fd0e:	f005 fbc4 	bl	1005549a <aci_gap_set_io_capability_api>
1004fd12:	0003      	movs	r3, r0
}
1004fd14:	0018      	movs	r0, r3
1004fd16:	46bd      	mov	sp, r7
1004fd18:	b002      	add	sp, #8
1004fd1a:	bd80      	pop	{r7, pc}

1004fd1c <aci_gap_set_security_requirements>:
                                             uint8_t SC_Support,
                                             uint8_t KeyPress_Notification_Support,
                                             uint8_t Min_Encryption_Key_Size,
                                             uint8_t Max_Encryption_Key_Size,
                                             uint8_t Pairing_Response)
{
1004fd1c:	b5b0      	push	{r4, r5, r7, lr}
1004fd1e:	b086      	sub	sp, #24
1004fd20:	af04      	add	r7, sp, #16
1004fd22:	0005      	movs	r5, r0
1004fd24:	000c      	movs	r4, r1
1004fd26:	0010      	movs	r0, r2
1004fd28:	0019      	movs	r1, r3
1004fd2a:	1dfb      	adds	r3, r7, #7
1004fd2c:	1c2a      	adds	r2, r5, #0
1004fd2e:	701a      	strb	r2, [r3, #0]
1004fd30:	1dbb      	adds	r3, r7, #6
1004fd32:	1c22      	adds	r2, r4, #0
1004fd34:	701a      	strb	r2, [r3, #0]
1004fd36:	1d7b      	adds	r3, r7, #5
1004fd38:	1c02      	adds	r2, r0, #0
1004fd3a:	701a      	strb	r2, [r3, #0]
1004fd3c:	1d3b      	adds	r3, r7, #4
1004fd3e:	1c0a      	adds	r2, r1, #0
1004fd40:	701a      	strb	r2, [r3, #0]
    return aci_gap_set_security_requirements_api(Bonding_Mode,
1004fd42:	1d3b      	adds	r3, r7, #4
1004fd44:	781c      	ldrb	r4, [r3, #0]
1004fd46:	1d7b      	adds	r3, r7, #5
1004fd48:	781a      	ldrb	r2, [r3, #0]
1004fd4a:	1dbb      	adds	r3, r7, #6
1004fd4c:	7819      	ldrb	r1, [r3, #0]
1004fd4e:	1dfb      	adds	r3, r7, #7
1004fd50:	7818      	ldrb	r0, [r3, #0]
1004fd52:	2320      	movs	r3, #32
1004fd54:	18fb      	adds	r3, r7, r3
1004fd56:	781b      	ldrb	r3, [r3, #0]
1004fd58:	9302      	str	r3, [sp, #8]
1004fd5a:	231c      	movs	r3, #28
1004fd5c:	18fb      	adds	r3, r7, r3
1004fd5e:	781b      	ldrb	r3, [r3, #0]
1004fd60:	9301      	str	r3, [sp, #4]
1004fd62:	2318      	movs	r3, #24
1004fd64:	18fb      	adds	r3, r7, r3
1004fd66:	781b      	ldrb	r3, [r3, #0]
1004fd68:	9300      	str	r3, [sp, #0]
1004fd6a:	0023      	movs	r3, r4
1004fd6c:	f005 fb9e 	bl	100554ac <aci_gap_set_security_requirements_api>
1004fd70:	0003      	movs	r3, r0
                                                 SC_Support,
                                                 KeyPress_Notification_Support,
                                                 Min_Encryption_Key_Size,
                                                 Max_Encryption_Key_Size,
                                                 Pairing_Response);
}
1004fd72:	0018      	movs	r0, r3
1004fd74:	46bd      	mov	sp, r7
1004fd76:	b002      	add	sp, #8
1004fd78:	bdb0      	pop	{r4, r5, r7, pc}

1004fd7a <aci_gap_passkey_resp>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_passkey_resp(uint16_t Connection_Handle,
                                uint32_t Passkey)
{
1004fd7a:	b580      	push	{r7, lr}
1004fd7c:	b082      	sub	sp, #8
1004fd7e:	af00      	add	r7, sp, #0
1004fd80:	0002      	movs	r2, r0
1004fd82:	6039      	str	r1, [r7, #0]
1004fd84:	1dbb      	adds	r3, r7, #6
1004fd86:	801a      	strh	r2, [r3, #0]
    return aci_gap_passkey_resp_api(Connection_Handle,
1004fd88:	683a      	ldr	r2, [r7, #0]
1004fd8a:	1dbb      	adds	r3, r7, #6
1004fd8c:	881b      	ldrh	r3, [r3, #0]
1004fd8e:	0011      	movs	r1, r2
1004fd90:	0018      	movs	r0, r3
1004fd92:	f005 fbcf 	bl	10055534 <aci_gap_passkey_resp_api>
1004fd96:	0003      	movs	r3, r0
                                    Passkey);
}
1004fd98:	0018      	movs	r0, r3
1004fd9a:	46bd      	mov	sp, r7
1004fd9c:	b002      	add	sp, #8
1004fd9e:	bd80      	pop	{r7, pc}

1004fda0 <aci_gatt_srv_add_service>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gatt_srv_add_service(ble_gatt_srv_def_t* Serv_p)
{
1004fda0:	b580      	push	{r7, lr}
1004fda2:	b082      	sub	sp, #8
1004fda4:	af00      	add	r7, sp, #0
1004fda6:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_add_service_api(Serv_p);
1004fda8:	687b      	ldr	r3, [r7, #4]
1004fdaa:	0018      	movs	r0, r3
1004fdac:	f005 fbce 	bl	1005554c <aci_gatt_srv_add_service_api>
1004fdb0:	0003      	movs	r3, r0
}
1004fdb2:	0018      	movs	r0, r3
1004fdb4:	46bd      	mov	sp, r7
1004fdb6:	b002      	add	sp, #8
1004fdb8:	bd80      	pop	{r7, pc}

1004fdba <aci_gatt_srv_get_service_handle>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
uint16_t aci_gatt_srv_get_service_handle(ble_gatt_srv_def_t* Serv_p)
{
1004fdba:	b580      	push	{r7, lr}
1004fdbc:	b082      	sub	sp, #8
1004fdbe:	af00      	add	r7, sp, #0
1004fdc0:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_get_service_handle_api(Serv_p);
1004fdc2:	687b      	ldr	r3, [r7, #4]
1004fdc4:	0018      	movs	r0, r3
1004fdc6:	f005 fbc5 	bl	10055554 <aci_gatt_srv_get_service_handle_api>
1004fdca:	0003      	movs	r3, r0
}
1004fdcc:	0018      	movs	r0, r3
1004fdce:	46bd      	mov	sp, r7
1004fdd0:	b002      	add	sp, #8
1004fdd2:	bd80      	pop	{r7, pc}

1004fdd4 <aci_gatt_srv_add_char>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gatt_srv_add_char(ble_gatt_chr_def_t* Char_p,
                                 uint16_t Serv_Attr_H)
{
1004fdd4:	b580      	push	{r7, lr}
1004fdd6:	b082      	sub	sp, #8
1004fdd8:	af00      	add	r7, sp, #0
1004fdda:	6078      	str	r0, [r7, #4]
1004fddc:	000a      	movs	r2, r1
1004fdde:	1cbb      	adds	r3, r7, #2
1004fde0:	801a      	strh	r2, [r3, #0]
    return aci_gatt_srv_add_char_api(Char_p,
1004fde2:	1cbb      	adds	r3, r7, #2
1004fde4:	881a      	ldrh	r2, [r3, #0]
1004fde6:	687b      	ldr	r3, [r7, #4]
1004fde8:	0011      	movs	r1, r2
1004fdea:	0018      	movs	r0, r3
1004fdec:	f005 fbb6 	bl	1005555c <aci_gatt_srv_add_char_api>
1004fdf0:	0003      	movs	r3, r0
                                     Serv_Attr_H);
}
1004fdf2:	0018      	movs	r0, r3
1004fdf4:	46bd      	mov	sp, r7
1004fdf6:	b002      	add	sp, #8
1004fdf8:	bd80      	pop	{r7, pc}

1004fdfa <aci_gatt_srv_get_char_decl_handle>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
uint16_t aci_gatt_srv_get_char_decl_handle(ble_gatt_chr_def_t* Char_p)
{
1004fdfa:	b580      	push	{r7, lr}
1004fdfc:	b082      	sub	sp, #8
1004fdfe:	af00      	add	r7, sp, #0
1004fe00:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_get_char_decl_handle_api(Char_p);
1004fe02:	687b      	ldr	r3, [r7, #4]
1004fe04:	0018      	movs	r0, r3
1004fe06:	f005 fbad 	bl	10055564 <aci_gatt_srv_get_char_decl_handle_api>
1004fe0a:	0003      	movs	r3, r0
}
1004fe0c:	0018      	movs	r0, r3
1004fe0e:	46bd      	mov	sp, r7
1004fe10:	b002      	add	sp, #8
1004fe12:	bd80      	pop	{r7, pc}

1004fe14 <aci_gatt_srv_resp>:
                             uint16_t CID,
                             uint16_t Attr_Handle,
                             uint8_t Error_Code,
                             uint16_t Data_Len,
                             uint8_t* Data_p)
{
1004fe14:	b5b0      	push	{r4, r5, r7, lr}
1004fe16:	b084      	sub	sp, #16
1004fe18:	af02      	add	r7, sp, #8
1004fe1a:	0005      	movs	r5, r0
1004fe1c:	000c      	movs	r4, r1
1004fe1e:	0010      	movs	r0, r2
1004fe20:	0019      	movs	r1, r3
1004fe22:	1dbb      	adds	r3, r7, #6
1004fe24:	1c2a      	adds	r2, r5, #0
1004fe26:	801a      	strh	r2, [r3, #0]
1004fe28:	1d3b      	adds	r3, r7, #4
1004fe2a:	1c22      	adds	r2, r4, #0
1004fe2c:	801a      	strh	r2, [r3, #0]
1004fe2e:	1cbb      	adds	r3, r7, #2
1004fe30:	1c02      	adds	r2, r0, #0
1004fe32:	801a      	strh	r2, [r3, #0]
1004fe34:	1c7b      	adds	r3, r7, #1
1004fe36:	1c0a      	adds	r2, r1, #0
1004fe38:	701a      	strb	r2, [r3, #0]
    return aci_gatt_srv_resp_api(Connection_Handle,
1004fe3a:	1c7b      	adds	r3, r7, #1
1004fe3c:	781c      	ldrb	r4, [r3, #0]
1004fe3e:	1cbb      	adds	r3, r7, #2
1004fe40:	881a      	ldrh	r2, [r3, #0]
1004fe42:	1d3b      	adds	r3, r7, #4
1004fe44:	8819      	ldrh	r1, [r3, #0]
1004fe46:	1dbb      	adds	r3, r7, #6
1004fe48:	8818      	ldrh	r0, [r3, #0]
1004fe4a:	69fb      	ldr	r3, [r7, #28]
1004fe4c:	9301      	str	r3, [sp, #4]
1004fe4e:	2318      	movs	r3, #24
1004fe50:	18fb      	adds	r3, r7, r3
1004fe52:	881b      	ldrh	r3, [r3, #0]
1004fe54:	9300      	str	r3, [sp, #0]
1004fe56:	0023      	movs	r3, r4
1004fe58:	f005 fb88 	bl	1005556c <aci_gatt_srv_resp_api>
1004fe5c:	0003      	movs	r3, r0
                                 CID,
                                 Attr_Handle,
                                 Error_Code,
                                 Data_Len,
                                 Data_p);
}
1004fe5e:	0018      	movs	r0, r3
1004fe60:	46bd      	mov	sp, r7
1004fe62:	b002      	add	sp, #8
1004fe64:	bdb0      	pop	{r4, r5, r7, pc}

1004fe66 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req(uint16_t Connection_Handle,
                                                     uint16_t Connection_Interval_Min,
                                                     uint16_t Connection_Interval_Max,
                                                     uint16_t Peripheral_Latency,
                                                     uint16_t Timeout_Multiplier)
{
1004fe66:	b5b0      	push	{r4, r5, r7, lr}
1004fe68:	b084      	sub	sp, #16
1004fe6a:	af02      	add	r7, sp, #8
1004fe6c:	0005      	movs	r5, r0
1004fe6e:	000c      	movs	r4, r1
1004fe70:	0010      	movs	r0, r2
1004fe72:	0019      	movs	r1, r3
1004fe74:	1dbb      	adds	r3, r7, #6
1004fe76:	1c2a      	adds	r2, r5, #0
1004fe78:	801a      	strh	r2, [r3, #0]
1004fe7a:	1d3b      	adds	r3, r7, #4
1004fe7c:	1c22      	adds	r2, r4, #0
1004fe7e:	801a      	strh	r2, [r3, #0]
1004fe80:	1cbb      	adds	r3, r7, #2
1004fe82:	1c02      	adds	r2, r0, #0
1004fe84:	801a      	strh	r2, [r3, #0]
1004fe86:	003b      	movs	r3, r7
1004fe88:	1c0a      	adds	r2, r1, #0
1004fe8a:	801a      	strh	r2, [r3, #0]
    return aci_l2cap_connection_parameter_update_req_api(Connection_Handle,
1004fe8c:	003b      	movs	r3, r7
1004fe8e:	881c      	ldrh	r4, [r3, #0]
1004fe90:	1cbb      	adds	r3, r7, #2
1004fe92:	881a      	ldrh	r2, [r3, #0]
1004fe94:	1d3b      	adds	r3, r7, #4
1004fe96:	8819      	ldrh	r1, [r3, #0]
1004fe98:	1dbb      	adds	r3, r7, #6
1004fe9a:	8818      	ldrh	r0, [r3, #0]
1004fe9c:	2318      	movs	r3, #24
1004fe9e:	18fb      	adds	r3, r7, r3
1004fea0:	881b      	ldrh	r3, [r3, #0]
1004fea2:	9300      	str	r3, [sp, #0]
1004fea4:	0023      	movs	r3, r4
1004fea6:	f005 fcd7 	bl	10055858 <aci_l2cap_connection_parameter_update_req_api>
1004feaa:	0003      	movs	r3, r0
                                                         Connection_Interval_Min,
                                                         Connection_Interval_Max,
                                                         Peripheral_Latency,
                                                         Timeout_Multiplier);
}
1004feac:	0018      	movs	r0, r3
1004feae:	46bd      	mov	sp, r7
1004feb0:	b002      	add	sp, #8
1004feb2:	bdb0      	pop	{r4, r5, r7, pc}

1004feb4 <AES_128_HW_enc>:

/* Implementation of the AES 128 required by the crypto library. */
void AES_128_HW_enc(const uint32_t *P_pInputBuffer,
                    uint32_t *P_pOutputBuffer,
                    const uint8_t *P_pKey)
{
1004feb4:	b580      	push	{r7, lr}
1004feb6:	b094      	sub	sp, #80	@ 0x50
1004feb8:	af00      	add	r7, sp, #0
1004feba:	60f8      	str	r0, [r7, #12]
1004febc:	60b9      	str	r1, [r7, #8]
1004febe:	607a      	str	r2, [r7, #4]
  uint32_t tmp_key_32[4], input_32[4], output_32[4];
  uint8_t *tmp_key = (uint8_t *)tmp_key_32;
1004fec0:	2330      	movs	r3, #48	@ 0x30
1004fec2:	18fb      	adds	r3, r7, r3
1004fec4:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *input = (uint8_t *)input_32;
1004fec6:	2320      	movs	r3, #32
1004fec8:	18fb      	adds	r3, r7, r3
1004feca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *output = (uint8_t *)output_32;
1004fecc:	2310      	movs	r3, #16
1004fece:	18fb      	adds	r3, r7, r3
1004fed0:	643b      	str	r3, [r7, #64]	@ 0x40
  int32_t i;

  for (i = 0; i < 16; i++)
1004fed2:	2300      	movs	r3, #0
1004fed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004fed6:	e00d      	b.n	1004fef4 <AES_128_HW_enc+0x40>
  {
    tmp_key[15 - i] =  P_pKey[i];
1004fed8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004feda:	687a      	ldr	r2, [r7, #4]
1004fedc:	18d2      	adds	r2, r2, r3
1004fede:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004fee0:	210f      	movs	r1, #15
1004fee2:	1acb      	subs	r3, r1, r3
1004fee4:	0019      	movs	r1, r3
1004fee6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1004fee8:	185b      	adds	r3, r3, r1
1004feea:	7812      	ldrb	r2, [r2, #0]
1004feec:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 16; i++)
1004feee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004fef0:	3301      	adds	r3, #1
1004fef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004fef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004fef6:	2b0f      	cmp	r3, #15
1004fef8:	ddee      	ble.n	1004fed8 <AES_128_HW_enc+0x24>
  }

  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004fefa:	2300      	movs	r3, #0
1004fefc:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004fefe:	e03d      	b.n	1004ff7c <AES_128_HW_enc+0xc8>
  {
    LEW32_2_BUFFER(input, i * 4, P_pInputBuffer[3 - i]);
1004ff00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004ff02:	2203      	movs	r2, #3
1004ff04:	1ad3      	subs	r3, r2, r3
1004ff06:	009b      	lsls	r3, r3, #2
1004ff08:	68fa      	ldr	r2, [r7, #12]
1004ff0a:	18d3      	adds	r3, r2, r3
1004ff0c:	681a      	ldr	r2, [r3, #0]
1004ff0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004ff10:	009b      	lsls	r3, r3, #2
1004ff12:	0019      	movs	r1, r3
1004ff14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004ff16:	185b      	adds	r3, r3, r1
1004ff18:	b2d2      	uxtb	r2, r2
1004ff1a:	701a      	strb	r2, [r3, #0]
1004ff1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004ff1e:	2203      	movs	r2, #3
1004ff20:	1ad3      	subs	r3, r2, r3
1004ff22:	009b      	lsls	r3, r3, #2
1004ff24:	68fa      	ldr	r2, [r7, #12]
1004ff26:	18d3      	adds	r3, r2, r3
1004ff28:	681b      	ldr	r3, [r3, #0]
1004ff2a:	0a19      	lsrs	r1, r3, #8
1004ff2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004ff2e:	009b      	lsls	r3, r3, #2
1004ff30:	3301      	adds	r3, #1
1004ff32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004ff34:	18d3      	adds	r3, r2, r3
1004ff36:	b2ca      	uxtb	r2, r1
1004ff38:	701a      	strb	r2, [r3, #0]
1004ff3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004ff3c:	2203      	movs	r2, #3
1004ff3e:	1ad3      	subs	r3, r2, r3
1004ff40:	009b      	lsls	r3, r3, #2
1004ff42:	68fa      	ldr	r2, [r7, #12]
1004ff44:	18d3      	adds	r3, r2, r3
1004ff46:	681b      	ldr	r3, [r3, #0]
1004ff48:	0c19      	lsrs	r1, r3, #16
1004ff4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004ff4c:	009b      	lsls	r3, r3, #2
1004ff4e:	3302      	adds	r3, #2
1004ff50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004ff52:	18d3      	adds	r3, r2, r3
1004ff54:	b2ca      	uxtb	r2, r1
1004ff56:	701a      	strb	r2, [r3, #0]
1004ff58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004ff5a:	2203      	movs	r2, #3
1004ff5c:	1ad3      	subs	r3, r2, r3
1004ff5e:	009b      	lsls	r3, r3, #2
1004ff60:	68fa      	ldr	r2, [r7, #12]
1004ff62:	18d3      	adds	r3, r2, r3
1004ff64:	681b      	ldr	r3, [r3, #0]
1004ff66:	0e19      	lsrs	r1, r3, #24
1004ff68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004ff6a:	009b      	lsls	r3, r3, #2
1004ff6c:	3303      	adds	r3, #3
1004ff6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004ff70:	18d3      	adds	r3, r2, r3
1004ff72:	b2ca      	uxtb	r2, r1
1004ff74:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004ff76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004ff78:	3301      	adds	r3, #1
1004ff7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004ff7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004ff7e:	2b03      	cmp	r3, #3
1004ff80:	ddbe      	ble.n	1004ff00 <AES_128_HW_enc+0x4c>
  }

  HW_AES_Encrypt(input_32, tmp_key_32, output_32);
1004ff82:	2310      	movs	r3, #16
1004ff84:	18fa      	adds	r2, r7, r3
1004ff86:	2330      	movs	r3, #48	@ 0x30
1004ff88:	18f9      	adds	r1, r7, r3
1004ff8a:	2320      	movs	r3, #32
1004ff8c:	18fb      	adds	r3, r7, r3
1004ff8e:	0018      	movs	r0, r3
1004ff90:	f000 f894 	bl	100500bc <HW_AES_Encrypt>

  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004ff94:	2300      	movs	r3, #0
1004ff96:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004ff98:	e028      	b.n	1004ffec <AES_128_HW_enc+0x138>
  {
    P_pOutputBuffer[3 - i] = BUFFER_2_LEW32(output, i * 4);
1004ff9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004ff9c:	009b      	lsls	r3, r3, #2
1004ff9e:	3303      	adds	r3, #3
1004ffa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
1004ffa2:	18d3      	adds	r3, r2, r3
1004ffa4:	781b      	ldrb	r3, [r3, #0]
1004ffa6:	061a      	lsls	r2, r3, #24
1004ffa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004ffaa:	009b      	lsls	r3, r3, #2
1004ffac:	3302      	adds	r3, #2
1004ffae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
1004ffb0:	18cb      	adds	r3, r1, r3
1004ffb2:	781b      	ldrb	r3, [r3, #0]
1004ffb4:	041b      	lsls	r3, r3, #16
1004ffb6:	431a      	orrs	r2, r3
1004ffb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004ffba:	009b      	lsls	r3, r3, #2
1004ffbc:	3301      	adds	r3, #1
1004ffbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
1004ffc0:	18cb      	adds	r3, r1, r3
1004ffc2:	781b      	ldrb	r3, [r3, #0]
1004ffc4:	021b      	lsls	r3, r3, #8
1004ffc6:	431a      	orrs	r2, r3
1004ffc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004ffca:	009b      	lsls	r3, r3, #2
1004ffcc:	0019      	movs	r1, r3
1004ffce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1004ffd0:	185b      	adds	r3, r3, r1
1004ffd2:	781b      	ldrb	r3, [r3, #0]
1004ffd4:	0018      	movs	r0, r3
1004ffd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004ffd8:	2103      	movs	r1, #3
1004ffda:	1acb      	subs	r3, r1, r3
1004ffdc:	009b      	lsls	r3, r3, #2
1004ffde:	68b9      	ldr	r1, [r7, #8]
1004ffe0:	18cb      	adds	r3, r1, r3
1004ffe2:	4302      	orrs	r2, r0
1004ffe4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004ffe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004ffe8:	3301      	adds	r3, #1
1004ffea:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004ffec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004ffee:	2b03      	cmp	r3, #3
1004fff0:	ddd3      	ble.n	1004ff9a <AES_128_HW_enc+0xe6>
  }
}
1004fff2:	46c0      	nop			@ (mov r8, r8)
1004fff4:	46c0      	nop			@ (mov r8, r8)
1004fff6:	46bd      	mov	sp, r7
1004fff8:	b014      	add	sp, #80	@ 0x50
1004fffa:	bd80      	pop	{r7, pc}

1004fffc <LL_APB2_GRP1_EnableClock>:
{
1004fffc:	b580      	push	{r7, lr}
1004fffe:	b084      	sub	sp, #16
10050000:	af00      	add	r7, sp, #0
10050002:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10050004:	4b07      	ldr	r3, [pc, #28]	@ (10050024 <LL_APB2_GRP1_EnableClock+0x28>)
10050006:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10050008:	4b06      	ldr	r3, [pc, #24]	@ (10050024 <LL_APB2_GRP1_EnableClock+0x28>)
1005000a:	687a      	ldr	r2, [r7, #4]
1005000c:	430a      	orrs	r2, r1
1005000e:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10050010:	4b04      	ldr	r3, [pc, #16]	@ (10050024 <LL_APB2_GRP1_EnableClock+0x28>)
10050012:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10050014:	687a      	ldr	r2, [r7, #4]
10050016:	4013      	ands	r3, r2
10050018:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1005001a:	68fb      	ldr	r3, [r7, #12]
}
1005001c:	46c0      	nop			@ (mov r8, r8)
1005001e:	46bd      	mov	sp, r7
10050020:	b004      	add	sp, #16
10050022:	bd80      	pop	{r7, pc}
10050024:	48400000 	.word	0x48400000

10050028 <LL_APB2_GRP1_IsEnabledClock>:
{
10050028:	b580      	push	{r7, lr}
1005002a:	b082      	sub	sp, #8
1005002c:	af00      	add	r7, sp, #0
1005002e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10050030:	4b06      	ldr	r3, [pc, #24]	@ (1005004c <LL_APB2_GRP1_IsEnabledClock+0x24>)
10050032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10050034:	687a      	ldr	r2, [r7, #4]
10050036:	4013      	ands	r3, r2
10050038:	687a      	ldr	r2, [r7, #4]
1005003a:	429a      	cmp	r2, r3
1005003c:	d101      	bne.n	10050042 <LL_APB2_GRP1_IsEnabledClock+0x1a>
1005003e:	2301      	movs	r3, #1
10050040:	e000      	b.n	10050044 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10050042:	2300      	movs	r3, #0
}
10050044:	0018      	movs	r0, r3
10050046:	46bd      	mov	sp, r7
10050048:	b002      	add	sp, #8
1005004a:	bd80      	pop	{r7, pc}
1005004c:	48400000 	.word	0x48400000

10050050 <LL_APB2_GRP1_ForceReset>:
{
10050050:	b580      	push	{r7, lr}
10050052:	b082      	sub	sp, #8
10050054:	af00      	add	r7, sp, #0
10050056:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10050058:	4b04      	ldr	r3, [pc, #16]	@ (1005006c <LL_APB2_GRP1_ForceReset+0x1c>)
1005005a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
1005005c:	4b03      	ldr	r3, [pc, #12]	@ (1005006c <LL_APB2_GRP1_ForceReset+0x1c>)
1005005e:	687a      	ldr	r2, [r7, #4]
10050060:	430a      	orrs	r2, r1
10050062:	641a      	str	r2, [r3, #64]	@ 0x40
}
10050064:	46c0      	nop			@ (mov r8, r8)
10050066:	46bd      	mov	sp, r7
10050068:	b002      	add	sp, #8
1005006a:	bd80      	pop	{r7, pc}
1005006c:	48400000 	.word	0x48400000

10050070 <LL_APB2_GRP1_ReleaseReset>:
{
10050070:	b580      	push	{r7, lr}
10050072:	b082      	sub	sp, #8
10050074:	af00      	add	r7, sp, #0
10050076:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10050078:	4b05      	ldr	r3, [pc, #20]	@ (10050090 <LL_APB2_GRP1_ReleaseReset+0x20>)
1005007a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1005007c:	687b      	ldr	r3, [r7, #4]
1005007e:	43d9      	mvns	r1, r3
10050080:	4b03      	ldr	r3, [pc, #12]	@ (10050090 <LL_APB2_GRP1_ReleaseReset+0x20>)
10050082:	400a      	ands	r2, r1
10050084:	641a      	str	r2, [r3, #64]	@ 0x40
}
10050086:	46c0      	nop			@ (mov r8, r8)
10050088:	46bd      	mov	sp, r7
1005008a:	b002      	add	sp, #8
1005008c:	bd80      	pop	{r7, pc}
1005008e:	46c0      	nop			@ (mov r8, r8)
10050090:	48400000 	.word	0x48400000

10050094 <HW_AES_Init>:
/** @defgroup AES_Manager_Public_Functions Public Functions
* @{
*/

HW_AES_ResultStatus HW_AES_Init(void)
{
10050094:	b580      	push	{r7, lr}
10050096:	af00      	add	r7, sp, #0
  if(!LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
10050098:	2001      	movs	r0, #1
1005009a:	f7ff ffc5 	bl	10050028 <LL_APB2_GRP1_IsEnabledClock>
1005009e:	1e03      	subs	r3, r0, #0
100500a0:	d108      	bne.n	100500b4 <HW_AES_Init+0x20>
  {
    /* Peripheral reset */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_MRBLE);
100500a2:	2001      	movs	r0, #1
100500a4:	f7ff ffd4 	bl	10050050 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_MRBLE);
100500a8:	2001      	movs	r0, #1
100500aa:	f7ff ffe1 	bl	10050070 <LL_APB2_GRP1_ReleaseReset>

    /* Enable MR_BLE's clock */
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_MRBLE);
100500ae:	2001      	movs	r0, #1
100500b0:	f7ff ffa4 	bl	1004fffc <LL_APB2_GRP1_EnableClock>
  }
  return HW_AES_SUCCESS;
100500b4:	2300      	movs	r3, #0
}
100500b6:	0018      	movs	r0, r3
100500b8:	46bd      	mov	sp, r7
100500ba:	bd80      	pop	{r7, pc}

100500bc <HW_AES_Encrypt>:
{
  return HW_AES_SUCCESS;
}

HW_AES_ResultStatus HW_AES_Encrypt(const uint32_t *plainTextData, const uint32_t *key, uint32_t *encryptedData)
{
100500bc:	b590      	push	{r4, r7, lr}
100500be:	b087      	sub	sp, #28
100500c0:	af00      	add	r7, sp, #0
100500c2:	60f8      	str	r0, [r7, #12]
100500c4:	60b9      	str	r1, [r7, #8]
100500c6:	607a      	str	r2, [r7, #4]
  /* Counter to signal interruption by a higher priority routine. */
  static volatile uint8_t start_cnt;
  uint8_t priv_start_cnt;

  start_cnt++;
100500c8:	4b31      	ldr	r3, [pc, #196]	@ (10050190 <HW_AES_Encrypt+0xd4>)
100500ca:	781b      	ldrb	r3, [r3, #0]
100500cc:	b2db      	uxtb	r3, r3
100500ce:	3301      	adds	r3, #1
100500d0:	b2da      	uxtb	r2, r3
100500d2:	4b2f      	ldr	r3, [pc, #188]	@ (10050190 <HW_AES_Encrypt+0xd4>)
100500d4:	701a      	strb	r2, [r3, #0]

  do
  {
    priv_start_cnt = start_cnt;
100500d6:	2417      	movs	r4, #23
100500d8:	193b      	adds	r3, r7, r4
100500da:	4a2d      	ldr	r2, [pc, #180]	@ (10050190 <HW_AES_Encrypt+0xd4>)
100500dc:	7812      	ldrb	r2, [r2, #0]
100500de:	701a      	strb	r2, [r3, #0]
    /* Starting from this point, any call to HW_AES_Encrypt will change start_cnt. */

    /* Write the Key in the BLE register */
    BLUE->MANAESKEY0REG = key[0];
100500e0:	23c0      	movs	r3, #192	@ 0xc0
100500e2:	05db      	lsls	r3, r3, #23
100500e4:	68ba      	ldr	r2, [r7, #8]
100500e6:	6812      	ldr	r2, [r2, #0]
100500e8:	629a      	str	r2, [r3, #40]	@ 0x28
    BLUE->MANAESKEY1REG = key[1];
100500ea:	68bb      	ldr	r3, [r7, #8]
100500ec:	1d1a      	adds	r2, r3, #4
100500ee:	23c0      	movs	r3, #192	@ 0xc0
100500f0:	05db      	lsls	r3, r3, #23
100500f2:	6812      	ldr	r2, [r2, #0]
100500f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    BLUE->MANAESKEY2REG = key[2];
100500f6:	68bb      	ldr	r3, [r7, #8]
100500f8:	3308      	adds	r3, #8
100500fa:	001a      	movs	r2, r3
100500fc:	23c0      	movs	r3, #192	@ 0xc0
100500fe:	05db      	lsls	r3, r3, #23
10050100:	6812      	ldr	r2, [r2, #0]
10050102:	631a      	str	r2, [r3, #48]	@ 0x30
    BLUE->MANAESKEY3REG = key[3];
10050104:	68bb      	ldr	r3, [r7, #8]
10050106:	330c      	adds	r3, #12
10050108:	001a      	movs	r2, r3
1005010a:	23c0      	movs	r3, #192	@ 0xc0
1005010c:	05db      	lsls	r3, r3, #23
1005010e:	6812      	ldr	r2, [r2, #0]
10050110:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Write the plain text data in the BLE register */
    BLUE->MANAESCLEARTEXT0REG = plainTextData[0];
10050112:	23c0      	movs	r3, #192	@ 0xc0
10050114:	05db      	lsls	r3, r3, #23
10050116:	68fa      	ldr	r2, [r7, #12]
10050118:	6812      	ldr	r2, [r2, #0]
1005011a:	639a      	str	r2, [r3, #56]	@ 0x38
    BLUE->MANAESCLEARTEXT1REG = plainTextData[1];
1005011c:	68fb      	ldr	r3, [r7, #12]
1005011e:	1d1a      	adds	r2, r3, #4
10050120:	23c0      	movs	r3, #192	@ 0xc0
10050122:	05db      	lsls	r3, r3, #23
10050124:	6812      	ldr	r2, [r2, #0]
10050126:	63da      	str	r2, [r3, #60]	@ 0x3c
    BLUE->MANAESCLEARTEXT2REG = plainTextData[2];
10050128:	68fb      	ldr	r3, [r7, #12]
1005012a:	3308      	adds	r3, #8
1005012c:	001a      	movs	r2, r3
1005012e:	23c0      	movs	r3, #192	@ 0xc0
10050130:	05db      	lsls	r3, r3, #23
10050132:	6812      	ldr	r2, [r2, #0]
10050134:	641a      	str	r2, [r3, #64]	@ 0x40
    BLUE->MANAESCLEARTEXT3REG = plainTextData[3];
10050136:	68fb      	ldr	r3, [r7, #12]
10050138:	330c      	adds	r3, #12
1005013a:	001a      	movs	r2, r3
1005013c:	23c0      	movs	r3, #192	@ 0xc0
1005013e:	05db      	lsls	r3, r3, #23
10050140:	6812      	ldr	r2, [r2, #0]
10050142:	645a      	str	r2, [r3, #68]	@ 0x44

    HW_AES_Start();
10050144:	f000 f826 	bl	10050194 <HW_AES_Start>

    /* Read the plain text data in the BLE register */
    encryptedData[0] = BLUE->MANAESCIPHERTEXT0REG;
10050148:	23c0      	movs	r3, #192	@ 0xc0
1005014a:	05db      	lsls	r3, r3, #23
1005014c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
1005014e:	687b      	ldr	r3, [r7, #4]
10050150:	601a      	str	r2, [r3, #0]
    encryptedData[1] = BLUE->MANAESCIPHERTEXT1REG;
10050152:	23c0      	movs	r3, #192	@ 0xc0
10050154:	05da      	lsls	r2, r3, #23
10050156:	687b      	ldr	r3, [r7, #4]
10050158:	3304      	adds	r3, #4
1005015a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
1005015c:	601a      	str	r2, [r3, #0]
    encryptedData[2] = BLUE->MANAESCIPHERTEXT2REG;
1005015e:	23c0      	movs	r3, #192	@ 0xc0
10050160:	05da      	lsls	r2, r3, #23
10050162:	687b      	ldr	r3, [r7, #4]
10050164:	3308      	adds	r3, #8
10050166:	6d12      	ldr	r2, [r2, #80]	@ 0x50
10050168:	601a      	str	r2, [r3, #0]
    encryptedData[3] = BLUE->MANAESCIPHERTEXT3REG;
1005016a:	23c0      	movs	r3, #192	@ 0xc0
1005016c:	05da      	lsls	r2, r3, #23
1005016e:	687b      	ldr	r3, [r7, #4]
10050170:	330c      	adds	r3, #12
10050172:	6d52      	ldr	r2, [r2, #84]	@ 0x54
10050174:	601a      	str	r2, [r3, #0]

  } while (priv_start_cnt != start_cnt);
10050176:	4b06      	ldr	r3, [pc, #24]	@ (10050190 <HW_AES_Encrypt+0xd4>)
10050178:	781b      	ldrb	r3, [r3, #0]
1005017a:	b2db      	uxtb	r3, r3
1005017c:	193a      	adds	r2, r7, r4
1005017e:	7812      	ldrb	r2, [r2, #0]
10050180:	429a      	cmp	r2, r3
10050182:	d1a8      	bne.n	100500d6 <HW_AES_Encrypt+0x1a>

  return HW_AES_SUCCESS;
10050184:	2300      	movs	r3, #0
}
10050186:	0018      	movs	r0, r3
10050188:	46bd      	mov	sp, r7
1005018a:	b007      	add	sp, #28
1005018c:	bd90      	pop	{r4, r7, pc}
1005018e:	46c0      	nop			@ (mov r8, r8)
10050190:	20002798 	.word	0x20002798

10050194 <HW_AES_Start>:
 * @param  None
 *
 * @retval i
 */
__STATIC_INLINE uint8_t HW_AES_Start(void)
{
10050194:	b580      	push	{r7, lr}
10050196:	b082      	sub	sp, #8
10050198:	af00      	add	r7, sp, #0
    volatile uint8_t i = 100U;
1005019a:	1dfb      	adds	r3, r7, #7
1005019c:	2264      	movs	r2, #100	@ 0x64
1005019e:	701a      	strb	r2, [r3, #0]

    /* Start AES encryption */
    LL_AES_StartManualEncription(BLUE);
100501a0:	23c0      	movs	r3, #192	@ 0xc0
100501a2:	05db      	lsls	r3, r3, #23
100501a4:	0018      	movs	r0, r3
100501a6:	f000 f81c 	bl	100501e2 <LL_AES_StartManualEncription>
    do
    {
        i--;
100501aa:	1dfb      	adds	r3, r7, #7
100501ac:	781b      	ldrb	r3, [r3, #0]
100501ae:	b2db      	uxtb	r3, r3
100501b0:	3b01      	subs	r3, #1
100501b2:	b2da      	uxtb	r2, r3
100501b4:	1dfb      	adds	r3, r7, #7
100501b6:	701a      	strb	r2, [r3, #0]
        if( !LL_AES_IsBusy(BLUE) )
100501b8:	23c0      	movs	r3, #192	@ 0xc0
100501ba:	05db      	lsls	r3, r3, #23
100501bc:	0018      	movs	r0, r3
100501be:	f000 f81e 	bl	100501fe <LL_AES_IsBusy>
100501c2:	1e03      	subs	r3, r0, #0
100501c4:	d005      	beq.n	100501d2 <HW_AES_Start+0x3e>
        {
            break;
        }
    } while (i != 0U);
100501c6:	1dfb      	adds	r3, r7, #7
100501c8:	781b      	ldrb	r3, [r3, #0]
100501ca:	b2db      	uxtb	r3, r3
100501cc:	2b00      	cmp	r3, #0
100501ce:	d1ec      	bne.n	100501aa <HW_AES_Start+0x16>
100501d0:	e000      	b.n	100501d4 <HW_AES_Start+0x40>
            break;
100501d2:	46c0      	nop			@ (mov r8, r8)

    return i;
100501d4:	1dfb      	adds	r3, r7, #7
100501d6:	781b      	ldrb	r3, [r3, #0]
100501d8:	b2db      	uxtb	r3, r3
}
100501da:	0018      	movs	r0, r3
100501dc:	46bd      	mov	sp, r7
100501de:	b002      	add	sp, #8
100501e0:	bd80      	pop	{r7, pc}

100501e2 <LL_AES_StartManualEncription>:
  * @rmtoll MANAESCMDREG          START         LL_AES_StartManualEncription
  * @param  BLUEx BLUE Instance
  * @retval None
  */
__STATIC_INLINE void LL_AES_StartManualEncription(BLUE_TypeDef *BLUEx)
{
100501e2:	b580      	push	{r7, lr}
100501e4:	b082      	sub	sp, #8
100501e6:	af00      	add	r7, sp, #0
100501e8:	6078      	str	r0, [r7, #4]
  SET_BIT(BLUEx->MANAESCMDREG, BLUE_MANAESCMDREG_START);
100501ea:	687b      	ldr	r3, [r7, #4]
100501ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
100501ee:	2201      	movs	r2, #1
100501f0:	431a      	orrs	r2, r3
100501f2:	687b      	ldr	r3, [r7, #4]
100501f4:	659a      	str	r2, [r3, #88]	@ 0x58
}
100501f6:	46c0      	nop			@ (mov r8, r8)
100501f8:	46bd      	mov	sp, r7
100501fa:	b002      	add	sp, #8
100501fc:	bd80      	pop	{r7, pc}

100501fe <LL_AES_IsBusy>:
  * @rmtoll MANAESSTATREG          BUSY         LL_AES_IsBusy
  * @param  BLUEx BLUE Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_AES_IsBusy(BLUE_TypeDef *BLUEx)
{
100501fe:	b580      	push	{r7, lr}
10050200:	b082      	sub	sp, #8
10050202:	af00      	add	r7, sp, #0
10050204:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->MANAESSTATREG, BLUE_MANAESSTATREG_BUSY) == (BLUE_MANAESSTATREG_BUSY)) ? 1U : 0U);
10050206:	687b      	ldr	r3, [r7, #4]
10050208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1005020a:	2201      	movs	r2, #1
1005020c:	4013      	ands	r3, r2
1005020e:	2b01      	cmp	r3, #1
10050210:	d101      	bne.n	10050216 <LL_AES_IsBusy+0x18>
10050212:	2301      	movs	r3, #1
10050214:	e000      	b.n	10050218 <LL_AES_IsBusy+0x1a>
10050216:	2300      	movs	r3, #0
}
10050218:	0018      	movs	r0, r3
1005021a:	46bd      	mov	sp, r7
1005021c:	b002      	add	sp, #8
1005021e:	bd80      	pop	{r7, pc}

10050220 <LL_PKA_EnableIT_ADDRERR>:
  * @rmtoll CR           ADDRERRIE     LL_PKA_EnableIT_ADDRERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_ADDRERR(PKA_TypeDef *PKAx)
{
10050220:	b580      	push	{r7, lr}
10050222:	b082      	sub	sp, #8
10050224:	af00      	add	r7, sp, #0
10050226:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_ADDRERRIE);
10050228:	687b      	ldr	r3, [r7, #4]
1005022a:	681b      	ldr	r3, [r3, #0]
1005022c:	2280      	movs	r2, #128	@ 0x80
1005022e:	0352      	lsls	r2, r2, #13
10050230:	431a      	orrs	r2, r3
10050232:	687b      	ldr	r3, [r7, #4]
10050234:	601a      	str	r2, [r3, #0]
}
10050236:	46c0      	nop			@ (mov r8, r8)
10050238:	46bd      	mov	sp, r7
1005023a:	b002      	add	sp, #8
1005023c:	bd80      	pop	{r7, pc}

1005023e <LL_PKA_EnableIT_RAMERR>:
  * @rmtoll CR           RAMERRIE      LL_PKA_EnableIT_RAMERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_RAMERR(PKA_TypeDef *PKAx)
{
1005023e:	b580      	push	{r7, lr}
10050240:	b082      	sub	sp, #8
10050242:	af00      	add	r7, sp, #0
10050244:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_RAMERRIE);
10050246:	687b      	ldr	r3, [r7, #4]
10050248:	681b      	ldr	r3, [r3, #0]
1005024a:	2280      	movs	r2, #128	@ 0x80
1005024c:	0312      	lsls	r2, r2, #12
1005024e:	431a      	orrs	r2, r3
10050250:	687b      	ldr	r3, [r7, #4]
10050252:	601a      	str	r2, [r3, #0]
}
10050254:	46c0      	nop			@ (mov r8, r8)
10050256:	46bd      	mov	sp, r7
10050258:	b002      	add	sp, #8
1005025a:	bd80      	pop	{r7, pc}

1005025c <LL_PKA_EnableIT_PROCEND>:
  * @rmtoll CR           PROCENDIE     LL_PKA_EnableIT_PROCEND
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_PROCEND(PKA_TypeDef *PKAx)
{
1005025c:	b580      	push	{r7, lr}
1005025e:	b082      	sub	sp, #8
10050260:	af00      	add	r7, sp, #0
10050262:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_PROCENDIE);
10050264:	687b      	ldr	r3, [r7, #4]
10050266:	681b      	ldr	r3, [r3, #0]
10050268:	2280      	movs	r2, #128	@ 0x80
1005026a:	0292      	lsls	r2, r2, #10
1005026c:	431a      	orrs	r2, r3
1005026e:	687b      	ldr	r3, [r7, #4]
10050270:	601a      	str	r2, [r3, #0]
}
10050272:	46c0      	nop			@ (mov r8, r8)
10050274:	46bd      	mov	sp, r7
10050276:	b002      	add	sp, #8
10050278:	bd80      	pop	{r7, pc}
	...

1005027c <HW_PKA_Init>:
}

#endif /* STM32WB06 STM32WB07 */

void HW_PKA_Init(void)
{
1005027c:	b580      	push	{r7, lr}
1005027e:	af00      	add	r7, sp, #0
  PKAMGR_Init();
10050280:	f001 fc98 	bl	10051bb4 <PKAMGR_Init>
  /* Activate interrupts */
  LL_PKA_EnableIT_ADDRERR(PKA);
10050284:	4b07      	ldr	r3, [pc, #28]	@ (100502a4 <HW_PKA_Init+0x28>)
10050286:	0018      	movs	r0, r3
10050288:	f7ff ffca 	bl	10050220 <LL_PKA_EnableIT_ADDRERR>
  LL_PKA_EnableIT_RAMERR(PKA);
1005028c:	4b05      	ldr	r3, [pc, #20]	@ (100502a4 <HW_PKA_Init+0x28>)
1005028e:	0018      	movs	r0, r3
10050290:	f7ff ffd5 	bl	1005023e <LL_PKA_EnableIT_RAMERR>
  LL_PKA_EnableIT_PROCEND(PKA);
10050294:	4b03      	ldr	r3, [pc, #12]	@ (100502a4 <HW_PKA_Init+0x28>)
10050296:	0018      	movs	r0, r3
10050298:	f7ff ffe0 	bl	1005025c <LL_PKA_EnableIT_PROCEND>
}
1005029c:	46c0      	nop			@ (mov r8, r8)
1005029e:	46bd      	mov	sp, r7
100502a0:	bd80      	pop	{r7, pc}
100502a2:	46c0      	nop			@ (mov r8, r8)
100502a4:	48300000 	.word	0x48300000

100502a8 <LL_AHB1_GRP1_EnableClock>:
{
100502a8:	b580      	push	{r7, lr}
100502aa:	b084      	sub	sp, #16
100502ac:	af00      	add	r7, sp, #0
100502ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
100502b0:	4b07      	ldr	r3, [pc, #28]	@ (100502d0 <LL_AHB1_GRP1_EnableClock+0x28>)
100502b2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
100502b4:	4b06      	ldr	r3, [pc, #24]	@ (100502d0 <LL_AHB1_GRP1_EnableClock+0x28>)
100502b6:	687a      	ldr	r2, [r7, #4]
100502b8:	430a      	orrs	r2, r1
100502ba:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
100502bc:	4b04      	ldr	r3, [pc, #16]	@ (100502d0 <LL_AHB1_GRP1_EnableClock+0x28>)
100502be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100502c0:	687a      	ldr	r2, [r7, #4]
100502c2:	4013      	ands	r3, r2
100502c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100502c6:	68fb      	ldr	r3, [r7, #12]
}
100502c8:	46c0      	nop			@ (mov r8, r8)
100502ca:	46bd      	mov	sp, r7
100502cc:	b004      	add	sp, #16
100502ce:	bd80      	pop	{r7, pc}
100502d0:	48400000 	.word	0x48400000

100502d4 <LL_RNG_Enable>:
  * @rmtoll CR           RNG_DIS         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
100502d4:	b580      	push	{r7, lr}
100502d6:	b082      	sub	sp, #8
100502d8:	af00      	add	r7, sp, #0
100502da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RNGx->CR, RNG_CR_RNG_DIS);
100502dc:	687b      	ldr	r3, [r7, #4]
100502de:	681b      	ldr	r3, [r3, #0]
100502e0:	2204      	movs	r2, #4
100502e2:	4393      	bics	r3, r2
100502e4:	001a      	movs	r2, r3
100502e6:	687b      	ldr	r3, [r7, #4]
100502e8:	601a      	str	r2, [r3, #0]
}
100502ea:	46c0      	nop			@ (mov r8, r8)
100502ec:	46bd      	mov	sp, r7
100502ee:	b002      	add	sp, #8
100502f0:	bd80      	pop	{r7, pc}

100502f2 <LL_RNG_IsActiveFlag_RNGRDY>:
  * @rmtoll SR           RNGRDY          LL_RNG_IsActiveFlag_RNGRDY
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_RNGRDY(RNG_TypeDef *RNGx)
{
100502f2:	b580      	push	{r7, lr}
100502f4:	b082      	sub	sp, #8
100502f6:	af00      	add	r7, sp, #0
100502f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_RNGRDY) == (RNG_SR_RNGRDY)) ? 1UL : 0UL);
100502fa:	687b      	ldr	r3, [r7, #4]
100502fc:	685b      	ldr	r3, [r3, #4]
100502fe:	2201      	movs	r2, #1
10050300:	4013      	ands	r3, r2
10050302:	2b01      	cmp	r3, #1
10050304:	d101      	bne.n	1005030a <LL_RNG_IsActiveFlag_RNGRDY+0x18>
10050306:	2301      	movs	r3, #1
10050308:	e000      	b.n	1005030c <LL_RNG_IsActiveFlag_RNGRDY+0x1a>
1005030a:	2300      	movs	r3, #0
}
1005030c:	0018      	movs	r0, r3
1005030e:	46bd      	mov	sp, r7
10050310:	b002      	add	sp, #8
10050312:	bd80      	pop	{r7, pc}

10050314 <LL_RNG_IsActiveFlag_FAULT>:
  * @rmtoll SR           FAULT          LL_RNG_IsActiveFlag_FAULT
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_FAULT(RNG_TypeDef *RNGx)
{
10050314:	b580      	push	{r7, lr}
10050316:	b082      	sub	sp, #8
10050318:	af00      	add	r7, sp, #0
1005031a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_FAULT) == (RNG_SR_FAULT)) ? 1UL : 0UL);
1005031c:	687b      	ldr	r3, [r7, #4]
1005031e:	685b      	ldr	r3, [r3, #4]
10050320:	2204      	movs	r2, #4
10050322:	4013      	ands	r3, r2
10050324:	2b04      	cmp	r3, #4
10050326:	d101      	bne.n	1005032c <LL_RNG_IsActiveFlag_FAULT+0x18>
10050328:	2301      	movs	r3, #1
1005032a:	e000      	b.n	1005032e <LL_RNG_IsActiveFlag_FAULT+0x1a>
1005032c:	2300      	movs	r3, #0
}
1005032e:	0018      	movs	r0, r3
10050330:	46bd      	mov	sp, r7
10050332:	b002      	add	sp, #8
10050334:	bd80      	pop	{r7, pc}

10050336 <LL_RNG_ReadRandData16>:
  * @rmtoll DR           RNDATA        LL_RNG_ReadRandData16
  * @param  RNGx RNG Instance
  * @retval Generated 16-bit random value
  */
__STATIC_INLINE uint16_t LL_RNG_ReadRandData16(RNG_TypeDef *RNGx)
{
10050336:	b580      	push	{r7, lr}
10050338:	b082      	sub	sp, #8
1005033a:	af00      	add	r7, sp, #0
1005033c:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_REG(RNGx->VAL));
1005033e:	687b      	ldr	r3, [r7, #4]
10050340:	689b      	ldr	r3, [r3, #8]
10050342:	b29b      	uxth	r3, r3
}
10050344:	0018      	movs	r0, r3
10050346:	46bd      	mov	sp, r7
10050348:	b002      	add	sp, #8
1005034a:	bd80      	pop	{r7, pc}

1005034c <HW_RNG_Init>:
/** @defgroup RNG_Manager_Public_Functions Public Functions
* @{
*/

HW_RNG_ResultStatus HW_RNG_Init(void)
{
1005034c:	b580      	push	{r7, lr}
1005034e:	af00      	add	r7, sp, #0
  }
#endif /* STM32WB09 */

#if defined (STM32WB07) || defined (STM32WB06) || defined(STM32WB05)
  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_RNG);
10050350:	2380      	movs	r3, #128	@ 0x80
10050352:	02db      	lsls	r3, r3, #11
10050354:	0018      	movs	r0, r3
10050356:	f7ff ffa7 	bl	100502a8 <LL_AHB1_GRP1_EnableClock>

  /* Initialize random numbers generation */
  LL_RNG_Enable(RNG);
1005035a:	4b0b      	ldr	r3, [pc, #44]	@ (10050388 <HW_RNG_Init+0x3c>)
1005035c:	0018      	movs	r0, r3
1005035e:	f7ff ffb9 	bl	100502d4 <LL_RNG_Enable>

  /* Wait for DRDY flag to be raised */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
10050362:	46c0      	nop			@ (mov r8, r8)
10050364:	4b08      	ldr	r3, [pc, #32]	@ (10050388 <HW_RNG_Init+0x3c>)
10050366:	0018      	movs	r0, r3
10050368:	f7ff ffc3 	bl	100502f2 <LL_RNG_IsActiveFlag_RNGRDY>
1005036c:	1e03      	subs	r3, r0, #0
1005036e:	d0f9      	beq.n	10050364 <HW_RNG_Init+0x18>

  /* Check if error occurs */
  if (  LL_RNG_IsActiveFlag_FAULT(RNG)  )
10050370:	4b05      	ldr	r3, [pc, #20]	@ (10050388 <HW_RNG_Init+0x3c>)
10050372:	0018      	movs	r0, r3
10050374:	f7ff ffce 	bl	10050314 <LL_RNG_IsActiveFlag_FAULT>
10050378:	1e03      	subs	r3, r0, #0
1005037a:	d001      	beq.n	10050380 <HW_RNG_Init+0x34>
  {
    /* Clock or Seed Error detected. Set LED to blinking mode (Error type)*/
    return HW_RNG_ERROR;
1005037c:	2301      	movs	r3, #1
1005037e:	e000      	b.n	10050382 <HW_RNG_Init+0x36>
  }

  /* Values of Generated Random numbers are now available in num array. */

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/
  return HW_RNG_SUCCESS;
10050380:	2300      	movs	r3, #0
}
10050382:	0018      	movs	r0, r3
10050384:	46bd      	mov	sp, r7
10050386:	bd80      	pop	{r7, pc}
10050388:	48600000 	.word	0x48600000

1005038c <HW_RNG_GetRandom16>:
 * @brief Provide a 16-bit true random number
 * @param num: pointer to the random value returned
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom16(uint16_t* num)
{
1005038c:	b580      	push	{r7, lr}
1005038e:	b082      	sub	sp, #8
10050390:	af00      	add	r7, sp, #0
10050392:	6078      	str	r0, [r7, #4]

#endif /* STM32WB09 */

#if defined (STM32WB07) || defined (STM32WB06) || defined(STM32WB05)
  /* Wait for RNGRDY signal */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
10050394:	46c0      	nop			@ (mov r8, r8)
10050396:	4b09      	ldr	r3, [pc, #36]	@ (100503bc <HW_RNG_GetRandom16+0x30>)
10050398:	0018      	movs	r0, r3
1005039a:	f7ff ffaa 	bl	100502f2 <LL_RNG_IsActiveFlag_RNGRDY>
1005039e:	1e03      	subs	r3, r0, #0
100503a0:	d0f9      	beq.n	10050396 <HW_RNG_GetRandom16+0xa>

  *num = (uint16_t)LL_RNG_ReadRandData16(RNG);
100503a2:	4b06      	ldr	r3, [pc, #24]	@ (100503bc <HW_RNG_GetRandom16+0x30>)
100503a4:	0018      	movs	r0, r3
100503a6:	f7ff ffc6 	bl	10050336 <LL_RNG_ReadRandData16>
100503aa:	0003      	movs	r3, r0
100503ac:	001a      	movs	r2, r3
100503ae:	687b      	ldr	r3, [r7, #4]
100503b0:	801a      	strh	r2, [r3, #0]

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
100503b2:	2300      	movs	r3, #0
}
100503b4:	0018      	movs	r0, r3
100503b6:	46bd      	mov	sp, r7
100503b8:	b002      	add	sp, #8
100503ba:	bd80      	pop	{r7, pc}
100503bc:	48600000 	.word	0x48600000

100503c0 <HW_RNG_GetRandom32>:
 * @param num: pointer to the random value returned
 *
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom32(uint32_t* num)
{
100503c0:	b590      	push	{r4, r7, lr}
100503c2:	b085      	sub	sp, #20
100503c4:	af00      	add	r7, sp, #0
100503c6:	6078      	str	r0, [r7, #4]

  *num = LL_RNG_READRANDDATA32(RNG);
#endif /* STM32WB09 */

#if defined (STM32WB07) || defined (STM32WB06) || defined(STM32WB05)
  uint16_t *num_16 = (uint16_t *) num;
100503c8:	687b      	ldr	r3, [r7, #4]
100503ca:	60fb      	str	r3, [r7, #12]

  /* Wait for RNGRDY signal */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
100503cc:	46c0      	nop			@ (mov r8, r8)
100503ce:	4b11      	ldr	r3, [pc, #68]	@ (10050414 <HW_RNG_GetRandom32+0x54>)
100503d0:	0018      	movs	r0, r3
100503d2:	f7ff ff8e 	bl	100502f2 <LL_RNG_IsActiveFlag_RNGRDY>
100503d6:	1e03      	subs	r3, r0, #0
100503d8:	d0f9      	beq.n	100503ce <HW_RNG_GetRandom32+0xe>

  num_16[0] = (uint16_t)LL_RNG_ReadRandData16(RNG);
100503da:	4b0e      	ldr	r3, [pc, #56]	@ (10050414 <HW_RNG_GetRandom32+0x54>)
100503dc:	0018      	movs	r0, r3
100503de:	f7ff ffaa 	bl	10050336 <LL_RNG_ReadRandData16>
100503e2:	0003      	movs	r3, r0
100503e4:	001a      	movs	r2, r3
100503e6:	68fb      	ldr	r3, [r7, #12]
100503e8:	801a      	strh	r2, [r3, #0]

  /* Wait for RNGRDY signal */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
100503ea:	46c0      	nop			@ (mov r8, r8)
100503ec:	4b09      	ldr	r3, [pc, #36]	@ (10050414 <HW_RNG_GetRandom32+0x54>)
100503ee:	0018      	movs	r0, r3
100503f0:	f7ff ff7f 	bl	100502f2 <LL_RNG_IsActiveFlag_RNGRDY>
100503f4:	1e03      	subs	r3, r0, #0
100503f6:	d0f9      	beq.n	100503ec <HW_RNG_GetRandom32+0x2c>

  num_16[1] = (uint16_t)LL_RNG_ReadRandData16(RNG);
100503f8:	68fb      	ldr	r3, [r7, #12]
100503fa:	1c9c      	adds	r4, r3, #2
100503fc:	4b05      	ldr	r3, [pc, #20]	@ (10050414 <HW_RNG_GetRandom32+0x54>)
100503fe:	0018      	movs	r0, r3
10050400:	f7ff ff99 	bl	10050336 <LL_RNG_ReadRandData16>
10050404:	0003      	movs	r3, r0
10050406:	8023      	strh	r3, [r4, #0]
#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
10050408:	2300      	movs	r3, #0
}
1005040a:	0018      	movs	r0, r3
1005040c:	46bd      	mov	sp, r7
1005040e:	b005      	add	sp, #20
10050410:	bd90      	pop	{r4, r7, pc}
10050412:	46c0      	nop			@ (mov r8, r8)
10050414:	48600000 	.word	0x48600000

10050418 <NVMDB_get_info>:
}

#endif

static NVMDB_status_t NVMDB_get_info(NVMDB_info *info)
{
10050418:	b580      	push	{r7, lr}
1005041a:	b084      	sub	sp, #16
1005041c:	af00      	add	r7, sp, #0
1005041e:	6078      	str	r0, [r7, #4]
  uint32_t address = info->start_address;
10050420:	687b      	ldr	r3, [r7, #4]
10050422:	681b      	ldr	r3, [r3, #0]
10050424:	60fb      	str	r3, [r7, #12]
  NVMDB_RecordType_ptr record_p;

  info->valid_records = 0;
10050426:	687b      	ldr	r3, [r7, #4]
10050428:	2200      	movs	r2, #0
1005042a:	811a      	strh	r2, [r3, #8]
  info->invalid_records = 0;
1005042c:	687b      	ldr	r3, [r7, #4]
1005042e:	2200      	movs	r2, #0
10050430:	815a      	strh	r2, [r3, #10]
  info->free_space = 0;
10050432:	687b      	ldr	r3, [r7, #4]
10050434:	2200      	movs	r2, #0
10050436:	819a      	strh	r2, [r3, #12]
  info->locked = FALSE;
10050438:	687b      	ldr	r3, [r7, #4]
1005043a:	2200      	movs	r2, #0
1005043c:	739a      	strb	r2, [r3, #14]

  while(1)
  {

    record_p = (NVMDB_RecordType_ptr)address;
1005043e:	68fb      	ldr	r3, [r7, #12]
10050440:	60bb      	str	r3, [r7, #8]

    if(record_p->header.valid_flag == NO_RECORD)
10050442:	68bb      	ldr	r3, [r7, #8]
10050444:	781b      	ldrb	r3, [r3, #0]
10050446:	2bff      	cmp	r3, #255	@ 0xff
10050448:	d10c      	bne.n	10050464 <NVMDB_get_info+0x4c>
    {
      info->free_space = info->end_address - address - RECORD_HEADER_SIZE;
1005044a:	687b      	ldr	r3, [r7, #4]
1005044c:	685b      	ldr	r3, [r3, #4]
1005044e:	b29a      	uxth	r2, r3
10050450:	68fb      	ldr	r3, [r7, #12]
10050452:	b29b      	uxth	r3, r3
10050454:	1ad3      	subs	r3, r2, r3
10050456:	b29b      	uxth	r3, r3
10050458:	3b04      	subs	r3, #4
1005045a:	b29a      	uxth	r2, r3
1005045c:	687b      	ldr	r3, [r7, #4]
1005045e:	819a      	strh	r2, [r3, #12]
      return NVMDB_STATUS_OK;
10050460:	2300      	movs	r3, #0
10050462:	e028      	b.n	100504b6 <NVMDB_get_info+0x9e>
    }
    else if(record_p->header.valid_flag == VALID_RECORD)
10050464:	68bb      	ldr	r3, [r7, #8]
10050466:	781b      	ldrb	r3, [r3, #0]
10050468:	2bfe      	cmp	r3, #254	@ 0xfe
1005046a:	d106      	bne.n	1005047a <NVMDB_get_info+0x62>
    {
      info->valid_records++;
1005046c:	687b      	ldr	r3, [r7, #4]
1005046e:	891b      	ldrh	r3, [r3, #8]
10050470:	3301      	adds	r3, #1
10050472:	b29a      	uxth	r2, r3
10050474:	687b      	ldr	r3, [r7, #4]
10050476:	811a      	strh	r2, [r3, #8]
10050478:	e00c      	b.n	10050494 <NVMDB_get_info+0x7c>
    }
    else if(record_p->header.valid_flag == INVALID_RECORD)
1005047a:	68bb      	ldr	r3, [r7, #8]
1005047c:	781b      	ldrb	r3, [r3, #0]
1005047e:	2b00      	cmp	r3, #0
10050480:	d106      	bne.n	10050490 <NVMDB_get_info+0x78>
    {
      info->invalid_records++;
10050482:	687b      	ldr	r3, [r7, #4]
10050484:	895b      	ldrh	r3, [r3, #10]
10050486:	3301      	adds	r3, #1
10050488:	b29a      	uxth	r2, r3
1005048a:	687b      	ldr	r3, [r7, #4]
1005048c:	815a      	strh	r2, [r3, #10]
1005048e:	e001      	b.n	10050494 <NVMDB_get_info+0x7c>
    }
    else
    {
      // Wrong flag
      return NVMDB_STATUS_CORRUPTED_DB;
10050490:	2303      	movs	r3, #3
10050492:	e010      	b.n	100504b6 <NVMDB_get_info+0x9e>
    }

    address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
10050494:	68bb      	ldr	r3, [r7, #8]
10050496:	885b      	ldrh	r3, [r3, #2]
10050498:	3303      	adds	r3, #3
1005049a:	2203      	movs	r2, #3
1005049c:	4313      	orrs	r3, r2
1005049e:	001a      	movs	r2, r3
100504a0:	68fb      	ldr	r3, [r7, #12]
100504a2:	18d3      	adds	r3, r2, r3
100504a4:	3301      	adds	r3, #1
100504a6:	60fb      	str	r3, [r7, #12]

    if(address + MIN_RECORD_SIZE >= info->end_address)  // End of DB reached
100504a8:	68fb      	ldr	r3, [r7, #12]
100504aa:	1d5a      	adds	r2, r3, #5
100504ac:	687b      	ldr	r3, [r7, #4]
100504ae:	685b      	ldr	r3, [r3, #4]
100504b0:	429a      	cmp	r2, r3
100504b2:	d3c4      	bcc.n	1005043e <NVMDB_get_info+0x26>
    {
      return NVMDB_STATUS_OK;
100504b4:	2300      	movs	r3, #0
    }
  }
}
100504b6:	0018      	movs	r0, r3
100504b8:	46bd      	mov	sp, r7
100504ba:	b004      	add	sp, #16
100504bc:	bd80      	pop	{r7, pc}

100504be <NextRecordNoLock>:

/* Current_record_length is used to read the next record when the current record
   is no more present (because, for example, a clean operation has canceled it). */
static NVMDB_status_t NextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t type, uint8_t **data_p, NVMDB_RecordSizeType *data_len, NVMDB_RecordSizeType current_record_length, uint8_t *record_type)
{
100504be:	b580      	push	{r7, lr}
100504c0:	b086      	sub	sp, #24
100504c2:	af00      	add	r7, sp, #0
100504c4:	60f8      	str	r0, [r7, #12]
100504c6:	607a      	str	r2, [r7, #4]
100504c8:	603b      	str	r3, [r7, #0]
100504ca:	230b      	movs	r3, #11
100504cc:	18fb      	adds	r3, r7, r3
100504ce:	1c0a      	adds	r2, r1, #0
100504d0:	701a      	strb	r2, [r3, #0]
      return NVMDB_STATUS_END_OF_DB;
    }
  }
#endif

  if(current_record_length)
100504d2:	2020      	movs	r0, #32
100504d4:	183b      	adds	r3, r7, r0
100504d6:	881b      	ldrh	r3, [r3, #0]
100504d8:	2b00      	cmp	r3, #0
100504da:	d00a      	beq.n	100504f2 <NextRecordNoLock+0x34>
  {
    header.length = current_record_length;
100504dc:	2110      	movs	r1, #16
100504de:	187a      	adds	r2, r7, r1
100504e0:	183b      	adds	r3, r7, r0
100504e2:	881b      	ldrh	r3, [r3, #0]
100504e4:	8053      	strh	r3, [r2, #2]
    header.valid_flag = VALID_RECORD;
100504e6:	187b      	adds	r3, r7, r1
100504e8:	22fe      	movs	r2, #254	@ 0xfe
100504ea:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
100504ec:	187b      	adds	r3, r7, r1
100504ee:	617b      	str	r3, [r7, #20]
100504f0:	e002      	b.n	100504f8 <NextRecordNoLock+0x3a>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
100504f2:	68fb      	ldr	r3, [r7, #12]
100504f4:	685b      	ldr	r3, [r3, #4]
100504f6:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
100504f8:	68fb      	ldr	r3, [r7, #12]
100504fa:	685a      	ldr	r2, [r3, #4]
100504fc:	68fb      	ldr	r3, [r7, #12]
100504fe:	689b      	ldr	r3, [r3, #8]
10050500:	429a      	cmp	r2, r3
10050502:	d203      	bcs.n	1005050c <NextRecordNoLock+0x4e>
10050504:	697b      	ldr	r3, [r7, #20]
10050506:	781b      	ldrb	r3, [r3, #0]
10050508:	2bff      	cmp	r3, #255	@ 0xff
1005050a:	d101      	bne.n	10050510 <NextRecordNoLock+0x52>
  {
    return NVMDB_STATUS_END_OF_DB;
1005050c:	2304      	movs	r3, #4
1005050e:	e04b      	b.n	100505a8 <NextRecordNoLock+0xea>
  while(1)
  {

    // If it is the first read, the pointer already points to first record.
    // If it is not the first read, advance the pointer to the next record (word aligned).
    if(handle_p->first_read)
10050510:	68fb      	ldr	r3, [r7, #12]
10050512:	7b1b      	ldrb	r3, [r3, #12]
10050514:	2b00      	cmp	r3, #0
10050516:	d003      	beq.n	10050520 <NextRecordNoLock+0x62>
    {
      handle_p->first_read = FALSE;
10050518:	68fb      	ldr	r3, [r7, #12]
1005051a:	2200      	movs	r2, #0
1005051c:	731a      	strb	r2, [r3, #12]
1005051e:	e019      	b.n	10050554 <NextRecordNoLock+0x96>
    }
    else
    {
      handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
10050520:	68fb      	ldr	r3, [r7, #12]
10050522:	685b      	ldr	r3, [r3, #4]
10050524:	697a      	ldr	r2, [r7, #20]
10050526:	8852      	ldrh	r2, [r2, #2]
10050528:	3203      	adds	r2, #3
1005052a:	2103      	movs	r1, #3
1005052c:	430a      	orrs	r2, r1
1005052e:	189b      	adds	r3, r3, r2
10050530:	1c5a      	adds	r2, r3, #1
10050532:	68fb      	ldr	r3, [r7, #12]
10050534:	605a      	str	r2, [r3, #4]
      record_p = (NVMDB_RecordType_ptr)handle_p->address;
10050536:	68fb      	ldr	r3, [r7, #12]
10050538:	685b      	ldr	r3, [r3, #4]
1005053a:	617b      	str	r3, [r7, #20]

      if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1005053c:	68fb      	ldr	r3, [r7, #12]
1005053e:	685a      	ldr	r2, [r3, #4]
10050540:	68fb      	ldr	r3, [r7, #12]
10050542:	689b      	ldr	r3, [r3, #8]
10050544:	429a      	cmp	r2, r3
10050546:	d203      	bcs.n	10050550 <NextRecordNoLock+0x92>
10050548:	697b      	ldr	r3, [r7, #20]
1005054a:	781b      	ldrb	r3, [r3, #0]
1005054c:	2bff      	cmp	r3, #255	@ 0xff
1005054e:	d101      	bne.n	10050554 <NextRecordNoLock+0x96>
        {
          // A record to be written has been found in cache
          return NVMDB_STATUS_OK;
        }
#endif
        return NVMDB_STATUS_END_OF_DB;
10050550:	2304      	movs	r3, #4
10050552:	e029      	b.n	100505a8 <NextRecordNoLock+0xea>
      }
    }

    if(record_p->header.valid_flag == INVALID_RECORD)
10050554:	697b      	ldr	r3, [r7, #20]
10050556:	781b      	ldrb	r3, [r3, #0]
10050558:	2b00      	cmp	r3, #0
1005055a:	d023      	beq.n	100505a4 <NextRecordNoLock+0xe6>
    {
      // If record is invalidated, address is updated in next cycle.
      continue;
    }

    if(record_p->header.valid_flag != VALID_RECORD)
1005055c:	697b      	ldr	r3, [r7, #20]
1005055e:	781b      	ldrb	r3, [r3, #0]
10050560:	2bfe      	cmp	r3, #254	@ 0xfe
10050562:	d001      	beq.n	10050568 <NextRecordNoLock+0xaa>
    {
      return NVMDB_STATUS_CORRUPTED_DB;
10050564:	2303      	movs	r3, #3
10050566:	e01f      	b.n	100505a8 <NextRecordNoLock+0xea>
    }

    if(type == ALL_TYPES || record_p->header.record_id == type)
10050568:	220b      	movs	r2, #11
1005056a:	18bb      	adds	r3, r7, r2
1005056c:	781b      	ldrb	r3, [r3, #0]
1005056e:	2bff      	cmp	r3, #255	@ 0xff
10050570:	d005      	beq.n	1005057e <NextRecordNoLock+0xc0>
10050572:	697b      	ldr	r3, [r7, #20]
10050574:	785b      	ldrb	r3, [r3, #1]
10050576:	18ba      	adds	r2, r7, r2
10050578:	7812      	ldrb	r2, [r2, #0]
1005057a:	429a      	cmp	r2, r3
1005057c:	d1c8      	bne.n	10050510 <NextRecordNoLock+0x52>
      {
        continue;
      }
#endif

      *data_p = (uint8_t *)handle_p->address + RECORD_HEADER_SIZE;
1005057e:	68fb      	ldr	r3, [r7, #12]
10050580:	685b      	ldr	r3, [r3, #4]
10050582:	3304      	adds	r3, #4
10050584:	001a      	movs	r2, r3
10050586:	687b      	ldr	r3, [r7, #4]
10050588:	601a      	str	r2, [r3, #0]
      *data_len = record_p->header.length;
1005058a:	697b      	ldr	r3, [r7, #20]
1005058c:	885a      	ldrh	r2, [r3, #2]
1005058e:	683b      	ldr	r3, [r7, #0]
10050590:	801a      	strh	r2, [r3, #0]

      if(record_type != NULL)
10050592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050594:	2b00      	cmp	r3, #0
10050596:	d003      	beq.n	100505a0 <NextRecordNoLock+0xe2>
      {
        *record_type = record_p->header.record_id;
10050598:	697b      	ldr	r3, [r7, #20]
1005059a:	785a      	ldrb	r2, [r3, #1]
1005059c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1005059e:	701a      	strb	r2, [r3, #0]
      }

      //memcpy(data_p, (uint8_t*)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
      //*size_p = record_p->header.length;

      return NVMDB_STATUS_OK;
100505a0:	2300      	movs	r3, #0
100505a2:	e001      	b.n	100505a8 <NextRecordNoLock+0xea>
      continue;
100505a4:	46c0      	nop			@ (mov r8, r8)
    if(handle_p->first_read)
100505a6:	e7b3      	b.n	10050510 <NextRecordNoLock+0x52>
    }
  }
}
100505a8:	0018      	movs	r0, r3
100505aa:	46bd      	mov	sp, r7
100505ac:	b006      	add	sp, #24
100505ae:	bd80      	pop	{r7, pc}

100505b0 <ReadNextRecordNoLock>:

static NVMDB_status_t ReadNextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length, uint8_t *record_type_out)
{
100505b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100505b2:	b08b      	sub	sp, #44	@ 0x2c
100505b4:	af02      	add	r7, sp, #8
100505b6:	60f8      	str	r0, [r7, #12]
100505b8:	0008      	movs	r0, r1
100505ba:	0011      	movs	r1, r2
100505bc:	607b      	str	r3, [r7, #4]
100505be:	230b      	movs	r3, #11
100505c0:	18fb      	adds	r3, r7, r3
100505c2:	1c02      	adds	r2, r0, #0
100505c4:	701a      	strb	r2, [r3, #0]
100505c6:	2208      	movs	r2, #8
100505c8:	0010      	movs	r0, r2
100505ca:	18bb      	adds	r3, r7, r2
100505cc:	1c0a      	adds	r2, r1, #0
100505ce:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;

  uint8_t *data;
  NVMDB_RecordSizeType data_len;

  *size_p = 0;
100505d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100505d2:	2200      	movs	r2, #0
100505d4:	801a      	strh	r2, [r3, #0]

  status = NextRecordNoLock(handle_p, record_type, &data, &data_len, current_record_length, record_type_out);
100505d6:	261f      	movs	r6, #31
100505d8:	19bc      	adds	r4, r7, r6
100505da:	2216      	movs	r2, #22
100505dc:	18bd      	adds	r5, r7, r2
100505de:	2218      	movs	r2, #24
100505e0:	18ba      	adds	r2, r7, r2
100505e2:	230b      	movs	r3, #11
100505e4:	18fb      	adds	r3, r7, r3
100505e6:	7819      	ldrb	r1, [r3, #0]
100505e8:	68fb      	ldr	r3, [r7, #12]
100505ea:	469c      	mov	ip, r3
100505ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100505ee:	9301      	str	r3, [sp, #4]
100505f0:	2338      	movs	r3, #56	@ 0x38
100505f2:	181b      	adds	r3, r3, r0
100505f4:	19db      	adds	r3, r3, r7
100505f6:	881b      	ldrh	r3, [r3, #0]
100505f8:	9300      	str	r3, [sp, #0]
100505fa:	002b      	movs	r3, r5
100505fc:	4660      	mov	r0, ip
100505fe:	f7ff ff5e 	bl	100504be <NextRecordNoLock>
10050602:	0003      	movs	r3, r0
10050604:	7023      	strb	r3, [r4, #0]

  if(status != NVMDB_STATUS_OK)
10050606:	19bb      	adds	r3, r7, r6
10050608:	781b      	ldrb	r3, [r3, #0]
1005060a:	2b00      	cmp	r3, #0
1005060c:	d002      	beq.n	10050614 <ReadNextRecordNoLock+0x64>
  {
    return status;
1005060e:	19bb      	adds	r3, r7, r6
10050610:	781b      	ldrb	r3, [r3, #0]
10050612:	e027      	b.n	10050664 <ReadNextRecordNoLock+0xb4>
  }

  if(offset >= data_len)
10050614:	2316      	movs	r3, #22
10050616:	18fb      	adds	r3, r7, r3
10050618:	881b      	ldrh	r3, [r3, #0]
1005061a:	2208      	movs	r2, #8
1005061c:	18ba      	adds	r2, r7, r2
1005061e:	8812      	ldrh	r2, [r2, #0]
10050620:	429a      	cmp	r2, r3
10050622:	d301      	bcc.n	10050628 <ReadNextRecordNoLock+0x78>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
10050624:	2306      	movs	r3, #6
10050626:	e01d      	b.n	10050664 <ReadNextRecordNoLock+0xb4>
  }

  memcpy(data_p, data + offset, MIN(data_len - offset, max_size));
10050628:	69ba      	ldr	r2, [r7, #24]
1005062a:	2408      	movs	r4, #8
1005062c:	193b      	adds	r3, r7, r4
1005062e:	881b      	ldrh	r3, [r3, #0]
10050630:	18d1      	adds	r1, r2, r3
10050632:	2330      	movs	r3, #48	@ 0x30
10050634:	2208      	movs	r2, #8
10050636:	189b      	adds	r3, r3, r2
10050638:	19db      	adds	r3, r3, r7
1005063a:	881a      	ldrh	r2, [r3, #0]
1005063c:	2316      	movs	r3, #22
1005063e:	18fb      	adds	r3, r7, r3
10050640:	881b      	ldrh	r3, [r3, #0]
10050642:	0018      	movs	r0, r3
10050644:	193b      	adds	r3, r7, r4
10050646:	881b      	ldrh	r3, [r3, #0]
10050648:	1ac3      	subs	r3, r0, r3
1005064a:	429a      	cmp	r2, r3
1005064c:	dd00      	ble.n	10050650 <ReadNextRecordNoLock+0xa0>
1005064e:	001a      	movs	r2, r3
10050650:	687b      	ldr	r3, [r7, #4]
10050652:	0018      	movs	r0, r3
10050654:	f018 f8e7 	bl	10068826 <memcpy>
  *size_p = data_len;
10050658:	2316      	movs	r3, #22
1005065a:	18fb      	adds	r3, r7, r3
1005065c:	881a      	ldrh	r2, [r3, #0]
1005065e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10050660:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10050662:	2300      	movs	r3, #0
}
10050664:	0018      	movs	r0, r3
10050666:	46bd      	mov	sp, r7
10050668:	b009      	add	sp, #36	@ 0x24
1005066a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005066c <write_data>:
  return TRUE;
}

/* flash_address must be word aligned. */
static void write_data(uint32_t flash_address, uint16_t data_length, const void *data)
{
1005066c:	b590      	push	{r4, r7, lr}
1005066e:	b089      	sub	sp, #36	@ 0x24
10050670:	af00      	add	r7, sp, #0
10050672:	60f8      	str	r0, [r7, #12]
10050674:	607a      	str	r2, [r7, #4]
10050676:	200a      	movs	r0, #10
10050678:	183b      	adds	r3, r7, r0
1005067a:	1c0a      	adds	r2, r1, #0
1005067c:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  uint16_t length_word;
  uint8_t rest;
  const uint8_t *data_8 = data;
1005067e:	687b      	ldr	r3, [r7, #4]
10050680:	61bb      	str	r3, [r7, #24]

  length_word = (data_length >> 2) << 2;
10050682:	0001      	movs	r1, r0
10050684:	187b      	adds	r3, r7, r1
10050686:	881b      	ldrh	r3, [r3, #0]
10050688:	089b      	lsrs	r3, r3, #2
1005068a:	b29a      	uxth	r2, r3
1005068c:	2016      	movs	r0, #22
1005068e:	183b      	adds	r3, r7, r0
10050690:	0092      	lsls	r2, r2, #2
10050692:	801a      	strh	r2, [r3, #0]
  rest = data_length - length_word;
10050694:	187b      	adds	r3, r7, r1
10050696:	881b      	ldrh	r3, [r3, #0]
10050698:	b2d9      	uxtb	r1, r3
1005069a:	183b      	adds	r3, r7, r0
1005069c:	881b      	ldrh	r3, [r3, #0]
1005069e:	b2da      	uxtb	r2, r3
100506a0:	2315      	movs	r3, #21
100506a2:	18fb      	adds	r3, r7, r3
100506a4:	1a8a      	subs	r2, r1, r2
100506a6:	701a      	strb	r2, [r3, #0]

  for(int i = 0; i < length_word; i += 4)
100506a8:	2300      	movs	r3, #0
100506aa:	61fb      	str	r3, [r7, #28]
100506ac:	e013      	b.n	100506d6 <write_data+0x6a>
  {
    memcpy(&word, data_8 + i, sizeof(word));
100506ae:	69fb      	ldr	r3, [r7, #28]
100506b0:	69ba      	ldr	r2, [r7, #24]
100506b2:	18d1      	adds	r1, r2, r3
100506b4:	2310      	movs	r3, #16
100506b6:	18fb      	adds	r3, r7, r3
100506b8:	2204      	movs	r2, #4
100506ba:	0018      	movs	r0, r3
100506bc:	f018 f8b3 	bl	10068826 <memcpy>
    NVMDB_FLASH_WRITE(flash_address + i, word);
100506c0:	69fa      	ldr	r2, [r7, #28]
100506c2:	68fb      	ldr	r3, [r7, #12]
100506c4:	18d3      	adds	r3, r2, r3
100506c6:	693a      	ldr	r2, [r7, #16]
100506c8:	0019      	movs	r1, r3
100506ca:	2000      	movs	r0, #0
100506cc:	f7f8 f82a 	bl	10048724 <HAL_FLASH_Program>
  for(int i = 0; i < length_word; i += 4)
100506d0:	69fb      	ldr	r3, [r7, #28]
100506d2:	3304      	adds	r3, #4
100506d4:	61fb      	str	r3, [r7, #28]
100506d6:	2416      	movs	r4, #22
100506d8:	193b      	adds	r3, r7, r4
100506da:	881b      	ldrh	r3, [r3, #0]
100506dc:	69fa      	ldr	r2, [r7, #28]
100506de:	429a      	cmp	r2, r3
100506e0:	dbe5      	blt.n	100506ae <write_data+0x42>
  }
  word = 0xFFFFFFFF;
100506e2:	2301      	movs	r3, #1
100506e4:	425b      	negs	r3, r3
100506e6:	613b      	str	r3, [r7, #16]
  memcpy(&word, data_8 + length_word, rest);
100506e8:	193b      	adds	r3, r7, r4
100506ea:	881b      	ldrh	r3, [r3, #0]
100506ec:	69ba      	ldr	r2, [r7, #24]
100506ee:	18d1      	adds	r1, r2, r3
100506f0:	2315      	movs	r3, #21
100506f2:	18fb      	adds	r3, r7, r3
100506f4:	781a      	ldrb	r2, [r3, #0]
100506f6:	2310      	movs	r3, #16
100506f8:	18fb      	adds	r3, r7, r3
100506fa:	0018      	movs	r0, r3
100506fc:	f018 f893 	bl	10068826 <memcpy>
  NVMDB_FLASH_WRITE(flash_address + length_word, word);
10050700:	193b      	adds	r3, r7, r4
10050702:	881a      	ldrh	r2, [r3, #0]
10050704:	68fb      	ldr	r3, [r7, #12]
10050706:	18d3      	adds	r3, r2, r3
10050708:	693a      	ldr	r2, [r7, #16]
1005070a:	0019      	movs	r1, r3
1005070c:	2000      	movs	r0, #0
1005070e:	f7f8 f809 	bl	10048724 <HAL_FLASH_Program>
}
10050712:	46c0      	nop			@ (mov r8, r8)
10050714:	46bd      	mov	sp, r7
10050716:	b009      	add	sp, #36	@ 0x24
10050718:	bd90      	pop	{r4, r7, pc}

1005071a <WriteRecord>:

static NVMDB_status_t WriteRecord(uint32_t flash_address, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
1005071a:	b5f0      	push	{r4, r5, r6, r7, lr}
1005071c:	b087      	sub	sp, #28
1005071e:	af00      	add	r7, sp, #0
10050720:	60f8      	str	r0, [r7, #12]
10050722:	0008      	movs	r0, r1
10050724:	0011      	movs	r1, r2
10050726:	607b      	str	r3, [r7, #4]
10050728:	250b      	movs	r5, #11
1005072a:	197b      	adds	r3, r7, r5
1005072c:	1c02      	adds	r2, r0, #0
1005072e:	701a      	strb	r2, [r3, #0]
10050730:	2408      	movs	r4, #8
10050732:	193b      	adds	r3, r7, r4
10050734:	1c0a      	adds	r2, r1, #0
10050736:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  NVMDB_RecordHeaderType *header_p = (NVMDB_RecordHeaderType *)&word;
10050738:	2310      	movs	r3, #16
1005073a:	18fb      	adds	r3, r7, r3
1005073c:	617b      	str	r3, [r7, #20]
#if NVM_CACHE
  int32_t needed_time;
#endif

  data1_length = ROUND4_R(data1_length); // Make sure data1_length is multiple of 4.
1005073e:	193b      	adds	r3, r7, r4
10050740:	881b      	ldrh	r3, [r3, #0]
10050742:	3b01      	subs	r3, #1
10050744:	b29b      	uxth	r3, r3
10050746:	b21b      	sxth	r3, r3
10050748:	2203      	movs	r2, #3
1005074a:	4313      	orrs	r3, r2
1005074c:	b21b      	sxth	r3, r3
1005074e:	b29a      	uxth	r2, r3
10050750:	193b      	adds	r3, r7, r4
10050752:	3201      	adds	r2, #1
10050754:	801a      	strh	r2, [r3, #0]

  header_p->valid_flag = VALID_RECORD;
10050756:	697b      	ldr	r3, [r7, #20]
10050758:	22fe      	movs	r2, #254	@ 0xfe
1005075a:	701a      	strb	r2, [r3, #0]
  header_p->record_id = record_id;
1005075c:	697b      	ldr	r3, [r7, #20]
1005075e:	197a      	adds	r2, r7, r5
10050760:	7812      	ldrb	r2, [r2, #0]
10050762:	705a      	strb	r2, [r3, #1]
  header_p->length = data1_length + data2_length;
10050764:	193a      	adds	r2, r7, r4
10050766:	2520      	movs	r5, #32
10050768:	2608      	movs	r6, #8
1005076a:	19ab      	adds	r3, r5, r6
1005076c:	2108      	movs	r1, #8
1005076e:	468c      	mov	ip, r1
10050770:	44bc      	add	ip, r7
10050772:	4463      	add	r3, ip
10050774:	8812      	ldrh	r2, [r2, #0]
10050776:	881b      	ldrh	r3, [r3, #0]
10050778:	18d3      	adds	r3, r2, r3
1005077a:	b29a      	uxth	r2, r3
1005077c:	697b      	ldr	r3, [r7, #20]
1005077e:	805a      	strh	r2, [r3, #2]
  }
#endif

  DEBUG_GPIO_HIGH();

  NVMDB_FLASH_WRITE(flash_address, word);
10050780:	693a      	ldr	r2, [r7, #16]
10050782:	68fb      	ldr	r3, [r7, #12]
10050784:	0019      	movs	r1, r3
10050786:	2000      	movs	r0, #0
10050788:	f7f7 ffcc 	bl	10048724 <HAL_FLASH_Program>

  write_data(flash_address + 4, data1_length, data1);
1005078c:	68fb      	ldr	r3, [r7, #12]
1005078e:	1d18      	adds	r0, r3, #4
10050790:	687a      	ldr	r2, [r7, #4]
10050792:	193b      	adds	r3, r7, r4
10050794:	881b      	ldrh	r3, [r3, #0]
10050796:	0019      	movs	r1, r3
10050798:	f7ff ff68 	bl	1005066c <write_data>
  write_data(flash_address + 4 + data1_length, data2_length, data2);
1005079c:	193b      	adds	r3, r7, r4
1005079e:	881a      	ldrh	r2, [r3, #0]
100507a0:	68fb      	ldr	r3, [r7, #12]
100507a2:	18d3      	adds	r3, r2, r3
100507a4:	1d18      	adds	r0, r3, #4
100507a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100507a8:	19ab      	adds	r3, r5, r6
100507aa:	2108      	movs	r1, #8
100507ac:	468c      	mov	ip, r1
100507ae:	44bc      	add	ip, r7
100507b0:	4463      	add	r3, ip
100507b2:	881b      	ldrh	r3, [r3, #0]
100507b4:	0019      	movs	r1, r3
100507b6:	f7ff ff59 	bl	1005066c <write_data>
  DEBUG_GPIO_LOW();
#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
100507ba:	2300      	movs	r3, #0
}
100507bc:	0018      	movs	r0, r3
100507be:	46bd      	mov	sp, r7
100507c0:	b007      	add	sp, #28
100507c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100507c4 <NVMDB_CompareCurrentRecord>:

int NVMDB_CompareCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, const uint8_t *data_p, NVMDB_RecordSizeType size)
{
100507c4:	b580      	push	{r7, lr}
100507c6:	b086      	sub	sp, #24
100507c8:	af00      	add	r7, sp, #0
100507ca:	60f8      	str	r0, [r7, #12]
100507cc:	0008      	movs	r0, r1
100507ce:	607a      	str	r2, [r7, #4]
100507d0:	0019      	movs	r1, r3
100507d2:	230a      	movs	r3, #10
100507d4:	18fb      	adds	r3, r7, r3
100507d6:	1c02      	adds	r2, r0, #0
100507d8:	801a      	strh	r2, [r3, #0]
100507da:	2308      	movs	r3, #8
100507dc:	18fb      	adds	r3, r7, r3
100507de:	1c0a      	adds	r2, r1, #0
100507e0:	801a      	strh	r2, [r3, #0]
    }
  }

#endif

  record_p = (NVMDB_RecordType_ptr)handle_p->address;
100507e2:	68fb      	ldr	r3, [r7, #12]
100507e4:	685b      	ldr	r3, [r3, #4]
100507e6:	617b      	str	r3, [r7, #20]

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
100507e8:	68fb      	ldr	r3, [r7, #12]
100507ea:	685a      	ldr	r2, [r3, #4]
100507ec:	68fb      	ldr	r3, [r7, #12]
100507ee:	689b      	ldr	r3, [r3, #8]
100507f0:	429a      	cmp	r2, r3
100507f2:	d203      	bcs.n	100507fc <NVMDB_CompareCurrentRecord+0x38>
100507f4:	697b      	ldr	r3, [r7, #20]
100507f6:	781b      	ldrb	r3, [r3, #0]
100507f8:	2bff      	cmp	r3, #255	@ 0xff
100507fa:	d101      	bne.n	10050800 <NVMDB_CompareCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_END_OF_DB;
100507fc:	2304      	movs	r3, #4
100507fe:	e02a      	b.n	10050856 <NVMDB_CompareCurrentRecord+0x92>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
10050800:	68fb      	ldr	r3, [r7, #12]
10050802:	7b1b      	ldrb	r3, [r3, #12]
10050804:	2b00      	cmp	r3, #0
10050806:	d103      	bne.n	10050810 <NVMDB_CompareCurrentRecord+0x4c>
10050808:	697b      	ldr	r3, [r7, #20]
1005080a:	781b      	ldrb	r3, [r3, #0]
1005080c:	2bfe      	cmp	r3, #254	@ 0xfe
1005080e:	d001      	beq.n	10050814 <NVMDB_CompareCurrentRecord+0x50>
  {
    return NVMDB_STATUS_INVALID_RECORD;
10050810:	2305      	movs	r3, #5
10050812:	e020      	b.n	10050856 <NVMDB_CompareCurrentRecord+0x92>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
10050814:	697b      	ldr	r3, [r7, #20]
10050816:	885b      	ldrh	r3, [r3, #2]
10050818:	220a      	movs	r2, #10
1005081a:	18ba      	adds	r2, r7, r2
1005081c:	8812      	ldrh	r2, [r2, #0]
1005081e:	429a      	cmp	r2, r3
10050820:	d301      	bcc.n	10050826 <NVMDB_CompareCurrentRecord+0x62>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
10050822:	2306      	movs	r3, #6
10050824:	e017      	b.n	10050856 <NVMDB_CompareCurrentRecord+0x92>
  }

  handle_p->first_read = FALSE;
10050826:	68fb      	ldr	r3, [r7, #12]
10050828:	2200      	movs	r2, #0
1005082a:	731a      	strb	r2, [r3, #12]

  if(memcmp(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, size) == 0)
1005082c:	230a      	movs	r3, #10
1005082e:	18fb      	adds	r3, r7, r3
10050830:	881a      	ldrh	r2, [r3, #0]
10050832:	68fb      	ldr	r3, [r7, #12]
10050834:	685b      	ldr	r3, [r3, #4]
10050836:	18d3      	adds	r3, r2, r3
10050838:	3304      	adds	r3, #4
1005083a:	0019      	movs	r1, r3
1005083c:	2308      	movs	r3, #8
1005083e:	18fb      	adds	r3, r7, r3
10050840:	881a      	ldrh	r2, [r3, #0]
10050842:	687b      	ldr	r3, [r7, #4]
10050844:	0018      	movs	r0, r3
10050846:	f017 ff6b 	bl	10068720 <memcmp>
1005084a:	1e03      	subs	r3, r0, #0
1005084c:	d101      	bne.n	10050852 <NVMDB_CompareCurrentRecord+0x8e>
  {
    return NVMDB_STATUS_OK;
1005084e:	2300      	movs	r3, #0
10050850:	e001      	b.n	10050856 <NVMDB_CompareCurrentRecord+0x92>
  }
  else
  {
    return -1;
10050852:	2301      	movs	r3, #1
10050854:	425b      	negs	r3, r3
  }
}
10050856:	0018      	movs	r0, r3
10050858:	46bd      	mov	sp, r7
1005085a:	b006      	add	sp, #24
1005085c:	bd80      	pop	{r7, pc}

1005085e <ReadCurrentRecordNoLock>:

static NVMDB_status_t ReadCurrentRecordNoLock(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length)
{
1005085e:	b590      	push	{r4, r7, lr}
10050860:	b087      	sub	sp, #28
10050862:	af00      	add	r7, sp, #0
10050864:	60f8      	str	r0, [r7, #12]
10050866:	0008      	movs	r0, r1
10050868:	607a      	str	r2, [r7, #4]
1005086a:	0019      	movs	r1, r3
1005086c:	230a      	movs	r3, #10
1005086e:	18fb      	adds	r3, r7, r3
10050870:	1c02      	adds	r2, r0, #0
10050872:	801a      	strh	r2, [r3, #0]
10050874:	2308      	movs	r3, #8
10050876:	0018      	movs	r0, r3
10050878:	18fb      	adds	r3, r7, r3
1005087a:	1c0a      	adds	r2, r1, #0
1005087c:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordHeaderType header;
  NVMDB_RecordType_ptr record_p;

  *size_p = 0;
1005087e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10050880:	2200      	movs	r2, #0
10050882:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(current_record_length)
10050884:	2224      	movs	r2, #36	@ 0x24
10050886:	1813      	adds	r3, r2, r0
10050888:	19db      	adds	r3, r3, r7
1005088a:	881b      	ldrh	r3, [r3, #0]
1005088c:	2b00      	cmp	r3, #0
1005088e:	d00b      	beq.n	100508a8 <ReadCurrentRecordNoLock+0x4a>
  {
    header.length = current_record_length;
10050890:	2110      	movs	r1, #16
10050892:	187b      	adds	r3, r7, r1
10050894:	1812      	adds	r2, r2, r0
10050896:	19d2      	adds	r2, r2, r7
10050898:	8812      	ldrh	r2, [r2, #0]
1005089a:	805a      	strh	r2, [r3, #2]
    header.valid_flag = VALID_RECORD;
1005089c:	187b      	adds	r3, r7, r1
1005089e:	22fe      	movs	r2, #254	@ 0xfe
100508a0:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
100508a2:	187b      	adds	r3, r7, r1
100508a4:	617b      	str	r3, [r7, #20]
100508a6:	e002      	b.n	100508ae <ReadCurrentRecordNoLock+0x50>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
100508a8:	68fb      	ldr	r3, [r7, #12]
100508aa:	685b      	ldr	r3, [r3, #4]
100508ac:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
100508ae:	68fb      	ldr	r3, [r7, #12]
100508b0:	685a      	ldr	r2, [r3, #4]
100508b2:	68fb      	ldr	r3, [r7, #12]
100508b4:	689b      	ldr	r3, [r3, #8]
100508b6:	429a      	cmp	r2, r3
100508b8:	d203      	bcs.n	100508c2 <ReadCurrentRecordNoLock+0x64>
100508ba:	697b      	ldr	r3, [r7, #20]
100508bc:	781b      	ldrb	r3, [r3, #0]
100508be:	2bff      	cmp	r3, #255	@ 0xff
100508c0:	d101      	bne.n	100508c6 <ReadCurrentRecordNoLock+0x68>
  {
    return NVMDB_STATUS_END_OF_DB;
100508c2:	2304      	movs	r3, #4
100508c4:	e033      	b.n	1005092e <ReadCurrentRecordNoLock+0xd0>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
100508c6:	68fb      	ldr	r3, [r7, #12]
100508c8:	7b1b      	ldrb	r3, [r3, #12]
100508ca:	2b00      	cmp	r3, #0
100508cc:	d103      	bne.n	100508d6 <ReadCurrentRecordNoLock+0x78>
100508ce:	697b      	ldr	r3, [r7, #20]
100508d0:	781b      	ldrb	r3, [r3, #0]
100508d2:	2bfe      	cmp	r3, #254	@ 0xfe
100508d4:	d001      	beq.n	100508da <ReadCurrentRecordNoLock+0x7c>
  {
    return NVMDB_STATUS_INVALID_RECORD;
100508d6:	2305      	movs	r3, #5
100508d8:	e029      	b.n	1005092e <ReadCurrentRecordNoLock+0xd0>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
100508da:	697b      	ldr	r3, [r7, #20]
100508dc:	885b      	ldrh	r3, [r3, #2]
100508de:	220a      	movs	r2, #10
100508e0:	18ba      	adds	r2, r7, r2
100508e2:	8812      	ldrh	r2, [r2, #0]
100508e4:	429a      	cmp	r2, r3
100508e6:	d301      	bcc.n	100508ec <ReadCurrentRecordNoLock+0x8e>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
100508e8:	2306      	movs	r3, #6
100508ea:	e020      	b.n	1005092e <ReadCurrentRecordNoLock+0xd0>
  }

  handle_p->first_read = FALSE;
100508ec:	68fb      	ldr	r3, [r7, #12]
100508ee:	2200      	movs	r2, #0
100508f0:	731a      	strb	r2, [r3, #12]

  memcpy(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
100508f2:	240a      	movs	r4, #10
100508f4:	193b      	adds	r3, r7, r4
100508f6:	881a      	ldrh	r2, [r3, #0]
100508f8:	68fb      	ldr	r3, [r7, #12]
100508fa:	685b      	ldr	r3, [r3, #4]
100508fc:	18d3      	adds	r3, r2, r3
100508fe:	3304      	adds	r3, #4
10050900:	0018      	movs	r0, r3
10050902:	2308      	movs	r3, #8
10050904:	18fb      	adds	r3, r7, r3
10050906:	881a      	ldrh	r2, [r3, #0]
10050908:	697b      	ldr	r3, [r7, #20]
1005090a:	885b      	ldrh	r3, [r3, #2]
1005090c:	0019      	movs	r1, r3
1005090e:	193b      	adds	r3, r7, r4
10050910:	881b      	ldrh	r3, [r3, #0]
10050912:	1acb      	subs	r3, r1, r3
10050914:	429a      	cmp	r2, r3
10050916:	dd00      	ble.n	1005091a <ReadCurrentRecordNoLock+0xbc>
10050918:	001a      	movs	r2, r3
1005091a:	687b      	ldr	r3, [r7, #4]
1005091c:	0001      	movs	r1, r0
1005091e:	0018      	movs	r0, r3
10050920:	f017 ff81 	bl	10068826 <memcpy>
  *size_p = record_p->header.length;
10050924:	697b      	ldr	r3, [r7, #20]
10050926:	885a      	ldrh	r2, [r3, #2]
10050928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1005092a:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1005092c:	2300      	movs	r3, #0
}
1005092e:	0018      	movs	r0, r3
10050930:	46bd      	mov	sp, r7
10050932:	b007      	add	sp, #28
10050934:	bd90      	pop	{r4, r7, pc}
	...

10050938 <InvalidateRecord>:

static NVMDB_status_t InvalidateRecord(uint32_t address)
{
10050938:	b580      	push	{r7, lr}
1005093a:	b084      	sub	sp, #16
1005093c:	af00      	add	r7, sp, #0
1005093e:	6078      	str	r0, [r7, #4]
  uint32_t word = 0xFFFFFF00;
10050940:	4b06      	ldr	r3, [pc, #24]	@ (1005095c <InvalidateRecord+0x24>)
10050942:	60fb      	str	r3, [r7, #12]
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif
  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_WRITE(address, word);
10050944:	68fa      	ldr	r2, [r7, #12]
10050946:	687b      	ldr	r3, [r7, #4]
10050948:	0019      	movs	r1, r3
1005094a:	2000      	movs	r0, #0
1005094c:	f7f7 feea 	bl	10048724 <HAL_FLASH_Program>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
10050950:	2300      	movs	r3, #0
}
10050952:	0018      	movs	r0, r3
10050954:	46bd      	mov	sp, r7
10050956:	b004      	add	sp, #16
10050958:	bd80      	pop	{r7, pc}
1005095a:	46c0      	nop			@ (mov r8, r8)
1005095c:	ffffff00 	.word	0xffffff00

10050960 <NVMDB_DeleteRecordNoCache>:

static NVMDB_status_t NVMDB_DeleteRecordNoCache(const NVMDB_HandleType *handle_p)
{
10050960:	b5b0      	push	{r4, r5, r7, lr}
10050962:	b084      	sub	sp, #16
10050964:	af00      	add	r7, sp, #0
10050966:	6078      	str	r0, [r7, #4]
  NVMDB_RecordType *record_p;
  NVMDB_status_t status;

  record_p = (NVMDB_RecordType_ptr)handle_p->address;
10050968:	687b      	ldr	r3, [r7, #4]
1005096a:	685b      	ldr	r3, [r3, #4]
1005096c:	60fb      	str	r3, [r7, #12]

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1005096e:	687b      	ldr	r3, [r7, #4]
10050970:	685a      	ldr	r2, [r3, #4]
10050972:	687b      	ldr	r3, [r7, #4]
10050974:	689b      	ldr	r3, [r3, #8]
10050976:	429a      	cmp	r2, r3
10050978:	d203      	bcs.n	10050982 <NVMDB_DeleteRecordNoCache+0x22>
1005097a:	68fb      	ldr	r3, [r7, #12]
1005097c:	781b      	ldrb	r3, [r3, #0]
1005097e:	2bff      	cmp	r3, #255	@ 0xff
10050980:	d101      	bne.n	10050986 <NVMDB_DeleteRecordNoCache+0x26>
  {
    return NVMDB_STATUS_END_OF_DB;
10050982:	2304      	movs	r3, #4
10050984:	e041      	b.n	10050a0a <NVMDB_DeleteRecordNoCache+0xaa>
  }
  if(record_p->header.valid_flag == VALID_RECORD)
10050986:	68fb      	ldr	r3, [r7, #12]
10050988:	781b      	ldrb	r3, [r3, #0]
1005098a:	2bfe      	cmp	r3, #254	@ 0xfe
1005098c:	d13c      	bne.n	10050a08 <NVMDB_DeleteRecordNoCache+0xa8>
  {

    status = InvalidateRecord((uint32_t)record_p);
1005098e:	68fb      	ldr	r3, [r7, #12]
10050990:	250b      	movs	r5, #11
10050992:	197c      	adds	r4, r7, r5
10050994:	0018      	movs	r0, r3
10050996:	f7ff ffcf 	bl	10050938 <InvalidateRecord>
1005099a:	0003      	movs	r3, r0
1005099c:	7023      	strb	r3, [r4, #0]
    if(status)
1005099e:	197b      	adds	r3, r7, r5
100509a0:	781b      	ldrb	r3, [r3, #0]
100509a2:	2b00      	cmp	r3, #0
100509a4:	d002      	beq.n	100509ac <NVMDB_DeleteRecordNoCache+0x4c>
    {
      return status;
100509a6:	197b      	adds	r3, r7, r5
100509a8:	781b      	ldrb	r3, [r3, #0]
100509aa:	e02e      	b.n	10050a0a <NVMDB_DeleteRecordNoCache+0xaa>
    }

    DBInfo[handle_p->id].valid_records--;
100509ac:	687b      	ldr	r3, [r7, #4]
100509ae:	781b      	ldrb	r3, [r3, #0]
100509b0:	001a      	movs	r2, r3
100509b2:	4918      	ldr	r1, [pc, #96]	@ (10050a14 <NVMDB_DeleteRecordNoCache+0xb4>)
100509b4:	0013      	movs	r3, r2
100509b6:	009b      	lsls	r3, r3, #2
100509b8:	189b      	adds	r3, r3, r2
100509ba:	009b      	lsls	r3, r3, #2
100509bc:	18cb      	adds	r3, r1, r3
100509be:	3308      	adds	r3, #8
100509c0:	881b      	ldrh	r3, [r3, #0]
100509c2:	3b01      	subs	r3, #1
100509c4:	b298      	uxth	r0, r3
100509c6:	4913      	ldr	r1, [pc, #76]	@ (10050a14 <NVMDB_DeleteRecordNoCache+0xb4>)
100509c8:	0013      	movs	r3, r2
100509ca:	009b      	lsls	r3, r3, #2
100509cc:	189b      	adds	r3, r3, r2
100509ce:	009b      	lsls	r3, r3, #2
100509d0:	18cb      	adds	r3, r1, r3
100509d2:	3308      	adds	r3, #8
100509d4:	1c02      	adds	r2, r0, #0
100509d6:	801a      	strh	r2, [r3, #0]
    DBInfo[handle_p->id].invalid_records++;
100509d8:	687b      	ldr	r3, [r7, #4]
100509da:	781b      	ldrb	r3, [r3, #0]
100509dc:	001a      	movs	r2, r3
100509de:	490d      	ldr	r1, [pc, #52]	@ (10050a14 <NVMDB_DeleteRecordNoCache+0xb4>)
100509e0:	0013      	movs	r3, r2
100509e2:	009b      	lsls	r3, r3, #2
100509e4:	189b      	adds	r3, r3, r2
100509e6:	009b      	lsls	r3, r3, #2
100509e8:	18cb      	adds	r3, r1, r3
100509ea:	330a      	adds	r3, #10
100509ec:	881b      	ldrh	r3, [r3, #0]
100509ee:	3301      	adds	r3, #1
100509f0:	b298      	uxth	r0, r3
100509f2:	4908      	ldr	r1, [pc, #32]	@ (10050a14 <NVMDB_DeleteRecordNoCache+0xb4>)
100509f4:	0013      	movs	r3, r2
100509f6:	009b      	lsls	r3, r3, #2
100509f8:	189b      	adds	r3, r3, r2
100509fa:	009b      	lsls	r3, r3, #2
100509fc:	18cb      	adds	r3, r1, r3
100509fe:	330a      	adds	r3, #10
10050a00:	1c02      	adds	r2, r0, #0
10050a02:	801a      	strh	r2, [r3, #0]

    return NVMDB_STATUS_OK;
10050a04:	2300      	movs	r3, #0
10050a06:	e000      	b.n	10050a0a <NVMDB_DeleteRecordNoCache+0xaa>
  }
  else
  {
    return NVMDB_STATUS_INVALID_RECORD;
10050a08:	2305      	movs	r3, #5
  }
}
10050a0a:	0018      	movs	r0, r3
10050a0c:	46bd      	mov	sp, r7
10050a0e:	b004      	add	sp, #16
10050a10:	bdb0      	pop	{r4, r5, r7, pc}
10050a12:	46c0      	nop			@ (mov r8, r8)
10050a14:	2000279c 	.word	0x2000279c

10050a18 <ErasePage>:

static void ErasePage(uint32_t address, uint8_t num_pages)
{
10050a18:	b580      	push	{r7, lr}
10050a1a:	b088      	sub	sp, #32
10050a1c:	af00      	add	r7, sp, #0
10050a1e:	6078      	str	r0, [r7, #4]
10050a20:	000a      	movs	r2, r1
10050a22:	1cfb      	adds	r3, r7, #3
10050a24:	701a      	strb	r2, [r3, #0]
  int page_num = (address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
10050a26:	687b      	ldr	r3, [r7, #4]
10050a28:	4a0d      	ldr	r2, [pc, #52]	@ (10050a60 <ErasePage+0x48>)
10050a2a:	4694      	mov	ip, r2
10050a2c:	4463      	add	r3, ip
10050a2e:	0adb      	lsrs	r3, r3, #11
10050a30:	61fb      	str	r3, [r7, #28]

  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_ERASE_PAGE(page_num, num_pages);
10050a32:	2110      	movs	r1, #16
10050a34:	187b      	adds	r3, r7, r1
10050a36:	2200      	movs	r2, #0
10050a38:	601a      	str	r2, [r3, #0]
10050a3a:	69fa      	ldr	r2, [r7, #28]
10050a3c:	187b      	adds	r3, r7, r1
10050a3e:	605a      	str	r2, [r3, #4]
10050a40:	1cfb      	adds	r3, r7, #3
10050a42:	781a      	ldrb	r2, [r3, #0]
10050a44:	187b      	adds	r3, r7, r1
10050a46:	609a      	str	r2, [r3, #8]
10050a48:	230c      	movs	r3, #12
10050a4a:	18fa      	adds	r2, r7, r3
10050a4c:	187b      	adds	r3, r7, r1
10050a4e:	0011      	movs	r1, r2
10050a50:	0018      	movs	r0, r3
10050a52:	f7f7 ff41 	bl	100488d8 <HAL_FLASHEx_Erase>
  DEBUG_GPIO_LOW();
}
10050a56:	46c0      	nop			@ (mov r8, r8)
10050a58:	46bd      	mov	sp, r7
10050a5a:	b008      	add	sp, #32
10050a5c:	bd80      	pop	{r7, pc}
10050a5e:	46c0      	nop			@ (mov r8, r8)
10050a60:	effc0000 	.word	0xeffc0000

10050a64 <WriteBufferToFlash>:

/* Size of data must be multiple of 4. This function also erases the page if needed. */
static void WriteBufferToFlash(uint32_t address, uint32_t *data, uint32_t size)
{
10050a64:	b580      	push	{r7, lr}
10050a66:	b086      	sub	sp, #24
10050a68:	af00      	add	r7, sp, #0
10050a6a:	60f8      	str	r0, [r7, #12]
10050a6c:	60b9      	str	r1, [r7, #8]
10050a6e:	607a      	str	r2, [r7, #4]
  /* Check if we are writing the same data in entire pages.
     If size is less than a page size, we need to erase the page to clean it. */
  if((size % PAGE_SIZE) == 0 && memcmp((uint8_t *)address, data, size) == 0)
10050a70:	687b      	ldr	r3, [r7, #4]
10050a72:	055b      	lsls	r3, r3, #21
10050a74:	0d5b      	lsrs	r3, r3, #21
10050a76:	d107      	bne.n	10050a88 <WriteBufferToFlash+0x24>
10050a78:	68fb      	ldr	r3, [r7, #12]
10050a7a:	687a      	ldr	r2, [r7, #4]
10050a7c:	68b9      	ldr	r1, [r7, #8]
10050a7e:	0018      	movs	r0, r3
10050a80:	f017 fe4e 	bl	10068720 <memcmp>
10050a84:	1e03      	subs	r3, r0, #0
10050a86:	d026      	beq.n	10050ad6 <WriteBufferToFlash+0x72>
  {
    return;
  }

  ErasePage(address, ROUNDPAGE_R(size) / PAGE_SIZE);
10050a88:	687b      	ldr	r3, [r7, #4]
10050a8a:	3b01      	subs	r3, #1
10050a8c:	4a14      	ldr	r2, [pc, #80]	@ (10050ae0 <WriteBufferToFlash+0x7c>)
10050a8e:	4313      	orrs	r3, r2
10050a90:	3301      	adds	r3, #1
10050a92:	0adb      	lsrs	r3, r3, #11
10050a94:	b2da      	uxtb	r2, r3
10050a96:	68fb      	ldr	r3, [r7, #12]
10050a98:	0011      	movs	r1, r2
10050a9a:	0018      	movs	r0, r3
10050a9c:	f7ff ffbc 	bl	10050a18 <ErasePage>

  DEBUG_GPIO_HIGH();
  for(int i = 0; i < size; i += 4)
10050aa0:	2300      	movs	r3, #0
10050aa2:	617b      	str	r3, [r7, #20]
10050aa4:	e012      	b.n	10050acc <WriteBufferToFlash+0x68>
  {
    NVMDB_FLASH_WRITE(address + i, data[i / 4]);
10050aa6:	697a      	ldr	r2, [r7, #20]
10050aa8:	68fb      	ldr	r3, [r7, #12]
10050aaa:	18d1      	adds	r1, r2, r3
10050aac:	697b      	ldr	r3, [r7, #20]
10050aae:	2b00      	cmp	r3, #0
10050ab0:	da00      	bge.n	10050ab4 <WriteBufferToFlash+0x50>
10050ab2:	3303      	adds	r3, #3
10050ab4:	109b      	asrs	r3, r3, #2
10050ab6:	009b      	lsls	r3, r3, #2
10050ab8:	68ba      	ldr	r2, [r7, #8]
10050aba:	18d3      	adds	r3, r2, r3
10050abc:	681b      	ldr	r3, [r3, #0]
10050abe:	001a      	movs	r2, r3
10050ac0:	2000      	movs	r0, #0
10050ac2:	f7f7 fe2f 	bl	10048724 <HAL_FLASH_Program>
  for(int i = 0; i < size; i += 4)
10050ac6:	697b      	ldr	r3, [r7, #20]
10050ac8:	3304      	adds	r3, #4
10050aca:	617b      	str	r3, [r7, #20]
10050acc:	697b      	ldr	r3, [r7, #20]
10050ace:	687a      	ldr	r2, [r7, #4]
10050ad0:	429a      	cmp	r2, r3
10050ad2:	d8e8      	bhi.n	10050aa6 <WriteBufferToFlash+0x42>
10050ad4:	e000      	b.n	10050ad8 <WriteBufferToFlash+0x74>
    return;
10050ad6:	46c0      	nop			@ (mov r8, r8)
  }
  DEBUG_GPIO_LOW();
}
10050ad8:	46bd      	mov	sp, r7
10050ada:	b006      	add	sp, #24
10050adc:	bd80      	pop	{r7, pc}
10050ade:	46c0      	nop			@ (mov r8, r8)
10050ae0:	000007ff 	.word	0x000007ff

10050ae4 <InitReadState>:

static void InitReadState(ReadStateType *state_p)
{
10050ae4:	b580      	push	{r7, lr}
10050ae6:	b082      	sub	sp, #8
10050ae8:	af00      	add	r7, sp, #0
10050aea:	6078      	str	r0, [r7, #4]
  state_p->move_to_next_record = TRUE;
10050aec:	687b      	ldr	r3, [r7, #4]
10050aee:	2201      	movs	r2, #1
10050af0:	701a      	strb	r2, [r3, #0]
  state_p->record_offset = 0;
10050af2:	687b      	ldr	r3, [r7, #4]
10050af4:	2200      	movs	r2, #0
10050af6:	805a      	strh	r2, [r3, #2]
  state_p->record_length = 0;
10050af8:	687b      	ldr	r3, [r7, #4]
10050afa:	2200      	movs	r2, #0
10050afc:	809a      	strh	r2, [r3, #4]
}
10050afe:	46c0      	nop			@ (mov r8, r8)
10050b00:	46bd      	mov	sp, r7
10050b02:	b002      	add	sp, #8
10050b04:	bd80      	pop	{r7, pc}

10050b06 <LoadDBToRAM>:
/* Call InitReadState() to initialize read_state before passing it to the function to start loading data from the database.
   This function returns NVMDB_STATUS_OK if other calls must be done to the same function to continue reading the database.
   Pass the same read_state variable to the function if calling it again to continue reading from the same database. */

static NVMDB_status_t LoadDBToRAM(NVMDB_HandleType *handle_p, uint8_t *buff, uint16_t buff_size, uint16_t *num_read_bytes_p, ReadStateType *read_state)
{
10050b06:	b5f0      	push	{r4, r5, r6, r7, lr}
10050b08:	b08d      	sub	sp, #52	@ 0x34
10050b0a:	af04      	add	r7, sp, #16
10050b0c:	60f8      	str	r0, [r7, #12]
10050b0e:	60b9      	str	r1, [r7, #8]
10050b10:	603b      	str	r3, [r7, #0]
10050b12:	1dbb      	adds	r3, r7, #6
10050b14:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;
  uint16_t free_buffer_size;
  NVMDB_RecordSizeType record_size, remaining_record_bytes;
  NVMDB_RecordHeaderType header;
  uint16_t index = 0;
10050b16:	231e      	movs	r3, #30
10050b18:	18fb      	adds	r3, r7, r3
10050b1a:	2200      	movs	r2, #0
10050b1c:	801a      	strh	r2, [r3, #0]

  memset(buff, 0xFF, buff_size);
10050b1e:	1dbb      	adds	r3, r7, #6
10050b20:	881a      	ldrh	r2, [r3, #0]
10050b22:	68bb      	ldr	r3, [r7, #8]
10050b24:	21ff      	movs	r1, #255	@ 0xff
10050b26:	0018      	movs	r0, r3
10050b28:	f017 fe08 	bl	1006873c <memset>

  header.valid_flag = VALID_RECORD;
10050b2c:	2310      	movs	r3, #16
10050b2e:	18fb      	adds	r3, r7, r3
10050b30:	22fe      	movs	r2, #254	@ 0xfe
10050b32:	701a      	strb	r2, [r3, #0]

  while(1)
  {

    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
10050b34:	1dba      	adds	r2, r7, #6
10050b36:	251e      	movs	r5, #30
10050b38:	197b      	adds	r3, r7, r5
10050b3a:	8812      	ldrh	r2, [r2, #0]
10050b3c:	881b      	ldrh	r3, [r3, #0]
10050b3e:	1ad3      	subs	r3, r2, r3
10050b40:	b29a      	uxth	r2, r3
10050b42:	231c      	movs	r3, #28
10050b44:	18fb      	adds	r3, r7, r3
10050b46:	3a04      	subs	r2, #4
10050b48:	801a      	strh	r2, [r3, #0]

    // Read the record
    if(read_state->move_to_next_record)
10050b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050b4c:	781b      	ldrb	r3, [r3, #0]
10050b4e:	2b00      	cmp	r3, #0
10050b50:	d04e      	beq.n	10050bf0 <LoadDBToRAM+0xea>
    {
      /* Passing read_state->record_length to the function because we do not want
         the function to retrieve the info from the header of the current record,
         since it may not be anymore in the same position in flash. */
      status = ReadNextRecordNoLock(handle_p, ALL_TYPES, 0, buff + index + RECORD_HEADER_SIZE, free_buffer_size, &record_size, read_state->record_length, &header.record_id);
10050b52:	197b      	adds	r3, r7, r5
10050b54:	881b      	ldrh	r3, [r3, #0]
10050b56:	3304      	adds	r3, #4
10050b58:	68ba      	ldr	r2, [r7, #8]
10050b5a:	18d1      	adds	r1, r2, r3
10050b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050b5e:	889b      	ldrh	r3, [r3, #4]
10050b60:	261b      	movs	r6, #27
10050b62:	19bc      	adds	r4, r7, r6
10050b64:	68f8      	ldr	r0, [r7, #12]
10050b66:	2210      	movs	r2, #16
10050b68:	18ba      	adds	r2, r7, r2
10050b6a:	3201      	adds	r2, #1
10050b6c:	9203      	str	r2, [sp, #12]
10050b6e:	9302      	str	r3, [sp, #8]
10050b70:	2216      	movs	r2, #22
10050b72:	18bb      	adds	r3, r7, r2
10050b74:	9301      	str	r3, [sp, #4]
10050b76:	231c      	movs	r3, #28
10050b78:	18fb      	adds	r3, r7, r3
10050b7a:	881b      	ldrh	r3, [r3, #0]
10050b7c:	9300      	str	r3, [sp, #0]
10050b7e:	000b      	movs	r3, r1
10050b80:	2200      	movs	r2, #0
10050b82:	21ff      	movs	r1, #255	@ 0xff
10050b84:	f7ff fd14 	bl	100505b0 <ReadNextRecordNoLock>
10050b88:	0003      	movs	r3, r0
10050b8a:	7023      	strb	r3, [r4, #0]
      read_state->record_length = record_size;
10050b8c:	2216      	movs	r2, #22
10050b8e:	18bb      	adds	r3, r7, r2
10050b90:	881a      	ldrh	r2, [r3, #0]
10050b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050b94:	809a      	strh	r2, [r3, #4]

      if(status != NVMDB_STATUS_OK)
10050b96:	19bb      	adds	r3, r7, r6
10050b98:	781b      	ldrb	r3, [r3, #0]
10050b9a:	2b00      	cmp	r3, #0
10050b9c:	d006      	beq.n	10050bac <LoadDBToRAM+0xa6>
      {
        *num_read_bytes_p = index;
10050b9e:	683b      	ldr	r3, [r7, #0]
10050ba0:	197a      	adds	r2, r7, r5
10050ba2:	8812      	ldrh	r2, [r2, #0]
10050ba4:	801a      	strh	r2, [r3, #0]
        return status;
10050ba6:	19bb      	adds	r3, r7, r6
10050ba8:	781b      	ldrb	r3, [r3, #0]
10050baa:	e0a1      	b.n	10050cf0 <LoadDBToRAM+0x1ea>
      }

      // Prepare the header and copy it to buffer
      header.length = record_size;
10050bac:	2316      	movs	r3, #22
10050bae:	18fb      	adds	r3, r7, r3
10050bb0:	881a      	ldrh	r2, [r3, #0]
10050bb2:	2110      	movs	r1, #16
10050bb4:	187b      	adds	r3, r7, r1
10050bb6:	805a      	strh	r2, [r3, #2]
      memcpy(buff + index, &header, RECORD_HEADER_SIZE);
10050bb8:	251e      	movs	r5, #30
10050bba:	197b      	adds	r3, r7, r5
10050bbc:	881b      	ldrh	r3, [r3, #0]
10050bbe:	68ba      	ldr	r2, [r7, #8]
10050bc0:	18d3      	adds	r3, r2, r3
10050bc2:	000c      	movs	r4, r1
10050bc4:	1879      	adds	r1, r7, r1
10050bc6:	2204      	movs	r2, #4
10050bc8:	0018      	movs	r0, r3
10050bca:	f017 fe2c 	bl	10068826 <memcpy>
      index += ROUND4_R(header.length + RECORD_HEADER_SIZE);
10050bce:	193b      	adds	r3, r7, r4
10050bd0:	885b      	ldrh	r3, [r3, #2]
10050bd2:	3303      	adds	r3, #3
10050bd4:	b29b      	uxth	r3, r3
10050bd6:	b21b      	sxth	r3, r3
10050bd8:	2203      	movs	r2, #3
10050bda:	4313      	orrs	r3, r2
10050bdc:	b21b      	sxth	r3, r3
10050bde:	b29a      	uxth	r2, r3
10050be0:	197b      	adds	r3, r7, r5
10050be2:	881b      	ldrh	r3, [r3, #0]
10050be4:	18d3      	adds	r3, r2, r3
10050be6:	b29a      	uxth	r2, r3
10050be8:	197b      	adds	r3, r7, r5
10050bea:	3201      	adds	r2, #1
10050bec:	801a      	strh	r2, [r3, #0]
10050bee:	e031      	b.n	10050c54 <LoadDBToRAM+0x14e>
    }
    else
    {

      status = ReadCurrentRecordNoLock(handle_p, read_state->record_offset, buff + index, free_buffer_size, &record_size, read_state->record_length); // It will not read record in cache because this operation is not allowed if there are any.
10050bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050bf2:	8859      	ldrh	r1, [r3, #2]
10050bf4:	231e      	movs	r3, #30
10050bf6:	18fb      	adds	r3, r7, r3
10050bf8:	881b      	ldrh	r3, [r3, #0]
10050bfa:	68ba      	ldr	r2, [r7, #8]
10050bfc:	18d5      	adds	r5, r2, r3
10050bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050c00:	889b      	ldrh	r3, [r3, #4]
10050c02:	261b      	movs	r6, #27
10050c04:	19bc      	adds	r4, r7, r6
10050c06:	221c      	movs	r2, #28
10050c08:	18ba      	adds	r2, r7, r2
10050c0a:	8812      	ldrh	r2, [r2, #0]
10050c0c:	68f8      	ldr	r0, [r7, #12]
10050c0e:	9301      	str	r3, [sp, #4]
10050c10:	2316      	movs	r3, #22
10050c12:	18fb      	adds	r3, r7, r3
10050c14:	9300      	str	r3, [sp, #0]
10050c16:	0013      	movs	r3, r2
10050c18:	002a      	movs	r2, r5
10050c1a:	f7ff fe20 	bl	1005085e <ReadCurrentRecordNoLock>
10050c1e:	0003      	movs	r3, r0
10050c20:	7023      	strb	r3, [r4, #0]

      if(status != NVMDB_STATUS_OK)
10050c22:	19bb      	adds	r3, r7, r6
10050c24:	781b      	ldrb	r3, [r3, #0]
10050c26:	2b00      	cmp	r3, #0
10050c28:	d002      	beq.n	10050c30 <LoadDBToRAM+0x12a>
      {
        // This should not happen
        return status;
10050c2a:	19bb      	adds	r3, r7, r6
10050c2c:	781b      	ldrb	r3, [r3, #0]
10050c2e:	e05f      	b.n	10050cf0 <LoadDBToRAM+0x1ea>
      }
      index = ROUND4_R(record_size - read_state->record_offset);
10050c30:	2316      	movs	r3, #22
10050c32:	18fb      	adds	r3, r7, r3
10050c34:	881a      	ldrh	r2, [r3, #0]
10050c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050c38:	885b      	ldrh	r3, [r3, #2]
10050c3a:	1ad3      	subs	r3, r2, r3
10050c3c:	b29b      	uxth	r3, r3
10050c3e:	3b01      	subs	r3, #1
10050c40:	b29b      	uxth	r3, r3
10050c42:	b21b      	sxth	r3, r3
10050c44:	2203      	movs	r2, #3
10050c46:	4313      	orrs	r3, r2
10050c48:	b21b      	sxth	r3, r3
10050c4a:	b29a      	uxth	r2, r3
10050c4c:	231e      	movs	r3, #30
10050c4e:	18fb      	adds	r3, r7, r3
10050c50:	3201      	adds	r2, #1
10050c52:	801a      	strh	r2, [r3, #0]
    }

    // The number of remaining bytes for the current record that were to be read before calling last NVMDB_ReadNextRecord().
    // Rounded to the next multiple of 4 to find out if buffer can now be written inside the page or not.
    remaining_record_bytes = ROUND4_R(record_size - read_state->record_offset);
10050c54:	2316      	movs	r3, #22
10050c56:	18fb      	adds	r3, r7, r3
10050c58:	881a      	ldrh	r2, [r3, #0]
10050c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050c5c:	885b      	ldrh	r3, [r3, #2]
10050c5e:	1ad3      	subs	r3, r2, r3
10050c60:	b29b      	uxth	r3, r3
10050c62:	3b01      	subs	r3, #1
10050c64:	b29b      	uxth	r3, r3
10050c66:	b21b      	sxth	r3, r3
10050c68:	2203      	movs	r2, #3
10050c6a:	4313      	orrs	r3, r2
10050c6c:	b21b      	sxth	r3, r3
10050c6e:	b29a      	uxth	r2, r3
10050c70:	2118      	movs	r1, #24
10050c72:	187b      	adds	r3, r7, r1
10050c74:	3201      	adds	r2, #1
10050c76:	801a      	strh	r2, [r3, #0]

    if(remaining_record_bytes > free_buffer_size)
10050c78:	187a      	adds	r2, r7, r1
10050c7a:	211c      	movs	r1, #28
10050c7c:	187b      	adds	r3, r7, r1
10050c7e:	8812      	ldrh	r2, [r2, #0]
10050c80:	881b      	ldrh	r3, [r3, #0]
10050c82:	429a      	cmp	r2, r3
10050c84:	d910      	bls.n	10050ca8 <LoadDBToRAM+0x1a2>
    {
      // Not able to read the entire record.
      read_state->move_to_next_record = FALSE;
10050c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050c88:	2200      	movs	r2, #0
10050c8a:	701a      	strb	r2, [r3, #0]
      read_state->record_offset += free_buffer_size;
10050c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050c8e:	885a      	ldrh	r2, [r3, #2]
10050c90:	187b      	adds	r3, r7, r1
10050c92:	881b      	ldrh	r3, [r3, #0]
10050c94:	18d3      	adds	r3, r2, r3
10050c96:	b29a      	uxth	r2, r3
10050c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050c9a:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
10050c9c:	683b      	ldr	r3, [r7, #0]
10050c9e:	1dba      	adds	r2, r7, #6
10050ca0:	8812      	ldrh	r2, [r2, #0]
10050ca2:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
10050ca4:	2300      	movs	r3, #0
10050ca6:	e023      	b.n	10050cf0 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes == free_buffer_size)
10050ca8:	2318      	movs	r3, #24
10050caa:	18fa      	adds	r2, r7, r3
10050cac:	231c      	movs	r3, #28
10050cae:	18fb      	adds	r3, r7, r3
10050cb0:	8812      	ldrh	r2, [r2, #0]
10050cb2:	881b      	ldrh	r3, [r3, #0]
10050cb4:	429a      	cmp	r2, r3
10050cb6:	d10b      	bne.n	10050cd0 <LoadDBToRAM+0x1ca>
    {
      read_state->move_to_next_record = TRUE;
10050cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050cba:	2201      	movs	r2, #1
10050cbc:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
10050cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050cc0:	2200      	movs	r2, #0
10050cc2:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
10050cc4:	683b      	ldr	r3, [r7, #0]
10050cc6:	1dba      	adds	r2, r7, #6
10050cc8:	8812      	ldrh	r2, [r2, #0]
10050cca:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
10050ccc:	2300      	movs	r3, #0
10050cce:	e00f      	b.n	10050cf0 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes < free_buffer_size)
10050cd0:	2318      	movs	r3, #24
10050cd2:	18fa      	adds	r2, r7, r3
10050cd4:	231c      	movs	r3, #28
10050cd6:	18fb      	adds	r3, r7, r3
10050cd8:	8812      	ldrh	r2, [r2, #0]
10050cda:	881b      	ldrh	r3, [r3, #0]
10050cdc:	429a      	cmp	r2, r3
10050cde:	d300      	bcc.n	10050ce2 <LoadDBToRAM+0x1dc>
10050ce0:	e728      	b.n	10050b34 <LoadDBToRAM+0x2e>
    {
      read_state->move_to_next_record = TRUE;
10050ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050ce4:	2201      	movs	r2, #1
10050ce6:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
10050ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050cea:	2200      	movs	r2, #0
10050cec:	805a      	strh	r2, [r3, #2]
    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
10050cee:	e721      	b.n	10050b34 <LoadDBToRAM+0x2e>
    }
  }
}
10050cf0:	0018      	movs	r0, r3
10050cf2:	46bd      	mov	sp, r7
10050cf4:	b009      	add	sp, #36	@ 0x24
10050cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

10050cf8 <CleanLargeDB>:
// No inline to avoid allocating NVM_buffer multiple times at the same time.
__NOINLINE static NVMDB_status_t CleanLargeDB(NVMDB_IdType NVMDB_id)
{
10050cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
10050cfa:	4c60      	ldr	r4, [pc, #384]	@ (10050e7c <CleanLargeDB+0x184>)
10050cfc:	44a5      	add	sp, r4
10050cfe:	af02      	add	r7, sp, #8
10050d00:	0002      	movs	r2, r0
10050d02:	4b5f      	ldr	r3, [pc, #380]	@ (10050e80 <CleanLargeDB+0x188>)
10050d04:	2184      	movs	r1, #132	@ 0x84
10050d06:	0109      	lsls	r1, r1, #4
10050d08:	185b      	adds	r3, r3, r1
10050d0a:	19db      	adds	r3, r3, r7
10050d0c:	701a      	strb	r2, [r3, #0]
  ReadStateType previous_state;
  int32_t needed_time;
  uint8_t clean_started = FALSE;
#endif

  if(!DBInfo[NVMDB_id].invalid_records)
10050d0e:	4b5c      	ldr	r3, [pc, #368]	@ (10050e80 <CleanLargeDB+0x188>)
10050d10:	185b      	adds	r3, r3, r1
10050d12:	19db      	adds	r3, r3, r7
10050d14:	781a      	ldrb	r2, [r3, #0]
10050d16:	495b      	ldr	r1, [pc, #364]	@ (10050e84 <CleanLargeDB+0x18c>)
10050d18:	0013      	movs	r3, r2
10050d1a:	009b      	lsls	r3, r3, #2
10050d1c:	189b      	adds	r3, r3, r2
10050d1e:	009b      	lsls	r3, r3, #2
10050d20:	18cb      	adds	r3, r1, r3
10050d22:	330a      	adds	r3, #10
10050d24:	881b      	ldrh	r3, [r3, #0]
10050d26:	2b00      	cmp	r3, #0
10050d28:	d101      	bne.n	10050d2e <CleanLargeDB+0x36>
  {
    return NVMDB_STATUS_OK;
10050d2a:	2300      	movs	r3, #0
10050d2c:	e0a0      	b.n	10050e70 <CleanLargeDB+0x178>
  {
    return NVMDB_STATUS_CACHE_FULL;
  }
#endif

  status = NVMDB_HandleInit(NVMDB_id, &handle);
10050d2e:	4b56      	ldr	r3, [pc, #344]	@ (10050e88 <CleanLargeDB+0x190>)
10050d30:	18fc      	adds	r4, r7, r3
10050d32:	4d56      	ldr	r5, [pc, #344]	@ (10050e8c <CleanLargeDB+0x194>)
10050d34:	197a      	adds	r2, r7, r5
10050d36:	4b52      	ldr	r3, [pc, #328]	@ (10050e80 <CleanLargeDB+0x188>)
10050d38:	2184      	movs	r1, #132	@ 0x84
10050d3a:	0109      	lsls	r1, r1, #4
10050d3c:	185b      	adds	r3, r3, r1
10050d3e:	19db      	adds	r3, r3, r7
10050d40:	781b      	ldrb	r3, [r3, #0]
10050d42:	0011      	movs	r1, r2
10050d44:	0018      	movs	r0, r3
10050d46:	f000 fcd3 	bl	100516f0 <NVMDB_HandleInit>
10050d4a:	0003      	movs	r3, r0
10050d4c:	7023      	strb	r3, [r4, #0]
  flash_write_address = (uint32_t)handle.address;
10050d4e:	197b      	adds	r3, r7, r5
10050d50:	685b      	ldr	r3, [r3, #4]
10050d52:	4a4f      	ldr	r2, [pc, #316]	@ (10050e90 <CleanLargeDB+0x198>)
10050d54:	18ba      	adds	r2, r7, r2
10050d56:	6013      	str	r3, [r2, #0]

  InitReadState(&state);
10050d58:	4b4e      	ldr	r3, [pc, #312]	@ (10050e94 <CleanLargeDB+0x19c>)
10050d5a:	18fb      	adds	r3, r7, r3
10050d5c:	0018      	movs	r0, r3
10050d5e:	f7ff fec1 	bl	10050ae4 <InitReadState>
#if NVM_CACHE
    previous_state = state;
    previous_handle = handle;
#endif

    status = LoadDBToRAM(&handle, NVM_buffer, sizeof(NVM_buffer), &num_read_bytes, &state);
10050d62:	4e49      	ldr	r6, [pc, #292]	@ (10050e88 <CleanLargeDB+0x190>)
10050d64:	19bc      	adds	r4, r7, r6
10050d66:	4b4c      	ldr	r3, [pc, #304]	@ (10050e98 <CleanLargeDB+0x1a0>)
10050d68:	18fd      	adds	r5, r7, r3
10050d6a:	2380      	movs	r3, #128	@ 0x80
10050d6c:	011a      	lsls	r2, r3, #4
10050d6e:	230c      	movs	r3, #12
10050d70:	18f9      	adds	r1, r7, r3
10050d72:	4b46      	ldr	r3, [pc, #280]	@ (10050e8c <CleanLargeDB+0x194>)
10050d74:	18f8      	adds	r0, r7, r3
10050d76:	4b47      	ldr	r3, [pc, #284]	@ (10050e94 <CleanLargeDB+0x19c>)
10050d78:	18fb      	adds	r3, r7, r3
10050d7a:	9300      	str	r3, [sp, #0]
10050d7c:	002b      	movs	r3, r5
10050d7e:	f7ff fec2 	bl	10050b06 <LoadDBToRAM>
10050d82:	0003      	movs	r3, r0
10050d84:	7023      	strb	r3, [r4, #0]
    if(status != NVMDB_STATUS_END_OF_DB && status != NVMDB_STATUS_OK) // No other error codes are expected. This should not happen.
10050d86:	19bb      	adds	r3, r7, r6
10050d88:	781b      	ldrb	r3, [r3, #0]
10050d8a:	2b04      	cmp	r3, #4
10050d8c:	d006      	beq.n	10050d9c <CleanLargeDB+0xa4>
10050d8e:	19bb      	adds	r3, r7, r6
10050d90:	781b      	ldrb	r3, [r3, #0]
10050d92:	2b00      	cmp	r3, #0
10050d94:	d002      	beq.n	10050d9c <CleanLargeDB+0xa4>
    {
      return status;
10050d96:	19bb      	adds	r3, r7, r6
10050d98:	781b      	ldrb	r3, [r3, #0]
10050d9a:	e069      	b.n	10050e70 <CleanLargeDB+0x178>
    }

    if(num_read_bytes == sizeof(NVM_buffer) || status != NVMDB_STATUS_OK)
10050d9c:	4b3e      	ldr	r3, [pc, #248]	@ (10050e98 <CleanLargeDB+0x1a0>)
10050d9e:	18fb      	adds	r3, r7, r3
10050da0:	881a      	ldrh	r2, [r3, #0]
10050da2:	2380      	movs	r3, #128	@ 0x80
10050da4:	011b      	lsls	r3, r3, #4
10050da6:	429a      	cmp	r2, r3
10050da8:	d004      	beq.n	10050db4 <CleanLargeDB+0xbc>
10050daa:	4b37      	ldr	r3, [pc, #220]	@ (10050e88 <CleanLargeDB+0x190>)
10050dac:	18fb      	adds	r3, r7, r3
10050dae:	781b      	ldrb	r3, [r3, #0]
10050db0:	2b00      	cmp	r3, #0
10050db2:	d0d6      	beq.n	10050d62 <CleanLargeDB+0x6a>
    {
      if(num_read_bytes == 0)
10050db4:	4a38      	ldr	r2, [pc, #224]	@ (10050e98 <CleanLargeDB+0x1a0>)
10050db6:	18bb      	adds	r3, r7, r2
10050db8:	881b      	ldrh	r3, [r3, #0]
10050dba:	2b00      	cmp	r3, #0
10050dbc:	d019      	beq.n	10050df2 <CleanLargeDB+0xfa>
        }
      }
#endif

      // Write buffer to flash
      WriteBufferToFlash(flash_write_address, (uint32_t *)NVM_buffer, num_read_bytes);
10050dbe:	18bb      	adds	r3, r7, r2
10050dc0:	881b      	ldrh	r3, [r3, #0]
10050dc2:	001a      	movs	r2, r3
10050dc4:	230c      	movs	r3, #12
10050dc6:	18f9      	adds	r1, r7, r3
10050dc8:	4c31      	ldr	r4, [pc, #196]	@ (10050e90 <CleanLargeDB+0x198>)
10050dca:	193b      	adds	r3, r7, r4
10050dcc:	681b      	ldr	r3, [r3, #0]
10050dce:	0018      	movs	r0, r3
10050dd0:	f7ff fe48 	bl	10050a64 <WriteBufferToFlash>
#if NVM_CACHE
      ATOMIC_SECTION_END();

      clean_started = TRUE;
#endif
      flash_write_address += sizeof(NVM_buffer);
10050dd4:	0022      	movs	r2, r4
10050dd6:	18bb      	adds	r3, r7, r2
10050dd8:	681b      	ldr	r3, [r3, #0]
10050dda:	2180      	movs	r1, #128	@ 0x80
10050ddc:	0109      	lsls	r1, r1, #4
10050dde:	468c      	mov	ip, r1
10050de0:	4463      	add	r3, ip
10050de2:	18ba      	adds	r2, r7, r2
10050de4:	6013      	str	r3, [r2, #0]
      if(status != NVMDB_STATUS_OK)
10050de6:	4b28      	ldr	r3, [pc, #160]	@ (10050e88 <CleanLargeDB+0x190>)
10050de8:	18fb      	adds	r3, r7, r3
10050dea:	781b      	ldrb	r3, [r3, #0]
10050dec:	2b00      	cmp	r3, #0
10050dee:	d102      	bne.n	10050df6 <CleanLargeDB+0xfe>
  {
10050df0:	e7b7      	b.n	10050d62 <CleanLargeDB+0x6a>
        break;
10050df2:	46c0      	nop			@ (mov r8, r8)
10050df4:	e000      	b.n	10050df8 <CleanLargeDB+0x100>
      {
        break;
10050df6:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
  // Erase remaining pages. A possible optimization could be to erase the page only if it is not already erased.
  uint8_t num_pages = (ROUNDPAGE_R(handle.end_address) - flash_write_address) / PAGE_SIZE;
10050df8:	4b24      	ldr	r3, [pc, #144]	@ (10050e8c <CleanLargeDB+0x194>)
10050dfa:	18fb      	adds	r3, r7, r3
10050dfc:	689b      	ldr	r3, [r3, #8]
10050dfe:	3b01      	subs	r3, #1
10050e00:	4a26      	ldr	r2, [pc, #152]	@ (10050e9c <CleanLargeDB+0x1a4>)
10050e02:	431a      	orrs	r2, r3
10050e04:	4922      	ldr	r1, [pc, #136]	@ (10050e90 <CleanLargeDB+0x198>)
10050e06:	187b      	adds	r3, r7, r1
10050e08:	681b      	ldr	r3, [r3, #0]
10050e0a:	1ad3      	subs	r3, r2, r3
10050e0c:	3301      	adds	r3, #1
10050e0e:	0ada      	lsrs	r2, r3, #11
10050e10:	4823      	ldr	r0, [pc, #140]	@ (10050ea0 <CleanLargeDB+0x1a8>)
10050e12:	183b      	adds	r3, r7, r0
10050e14:	701a      	strb	r2, [r3, #0]
  uint8_t page_num_start = (flash_write_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
10050e16:	187b      	adds	r3, r7, r1
10050e18:	681b      	ldr	r3, [r3, #0]
10050e1a:	4a22      	ldr	r2, [pc, #136]	@ (10050ea4 <CleanLargeDB+0x1ac>)
10050e1c:	4694      	mov	ip, r2
10050e1e:	4463      	add	r3, ip
10050e20:	0ada      	lsrs	r2, r3, #11
10050e22:	4c21      	ldr	r4, [pc, #132]	@ (10050ea8 <CleanLargeDB+0x1b0>)
10050e24:	193b      	adds	r3, r7, r4
10050e26:	701a      	strb	r2, [r3, #0]
  if(EraseWithTimeCheck(&page_num_start, &num_pages) == NVMDB_STATUS_NOT_ENOUGH_TIME)
  {
    return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
  }
#else
  NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
10050e28:	2181      	movs	r1, #129	@ 0x81
10050e2a:	0109      	lsls	r1, r1, #4
10050e2c:	187b      	adds	r3, r7, r1
10050e2e:	2200      	movs	r2, #0
10050e30:	601a      	str	r2, [r3, #0]
10050e32:	193b      	adds	r3, r7, r4
10050e34:	781a      	ldrb	r2, [r3, #0]
10050e36:	187b      	adds	r3, r7, r1
10050e38:	605a      	str	r2, [r3, #4]
10050e3a:	183b      	adds	r3, r7, r0
10050e3c:	781a      	ldrb	r2, [r3, #0]
10050e3e:	187b      	adds	r3, r7, r1
10050e40:	609a      	str	r2, [r3, #8]
10050e42:	4b1a      	ldr	r3, [pc, #104]	@ (10050eac <CleanLargeDB+0x1b4>)
10050e44:	18fa      	adds	r2, r7, r3
10050e46:	187b      	adds	r3, r7, r1
10050e48:	0011      	movs	r1, r2
10050e4a:	0018      	movs	r0, r3
10050e4c:	f7f7 fd44 	bl	100488d8 <HAL_FLASHEx_Erase>
#endif

  // Update free space.
  return NVMDB_get_info(&DBInfo[NVMDB_id]);
10050e50:	4b0b      	ldr	r3, [pc, #44]	@ (10050e80 <CleanLargeDB+0x188>)
10050e52:	2284      	movs	r2, #132	@ 0x84
10050e54:	0112      	lsls	r2, r2, #4
10050e56:	189b      	adds	r3, r3, r2
10050e58:	19db      	adds	r3, r3, r7
10050e5a:	781a      	ldrb	r2, [r3, #0]
10050e5c:	0013      	movs	r3, r2
10050e5e:	009b      	lsls	r3, r3, #2
10050e60:	189b      	adds	r3, r3, r2
10050e62:	009b      	lsls	r3, r3, #2
10050e64:	4a07      	ldr	r2, [pc, #28]	@ (10050e84 <CleanLargeDB+0x18c>)
10050e66:	189b      	adds	r3, r3, r2
10050e68:	0018      	movs	r0, r3
10050e6a:	f7ff fad5 	bl	10050418 <NVMDB_get_info>
10050e6e:	0003      	movs	r3, r0
}
10050e70:	0018      	movs	r0, r3
10050e72:	46bd      	mov	sp, r7
10050e74:	4b0e      	ldr	r3, [pc, #56]	@ (10050eb0 <CleanLargeDB+0x1b8>)
10050e76:	449d      	add	sp, r3
10050e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
10050e7a:	46c0      	nop			@ (mov r8, r8)
10050e7c:	fffff7b4 	.word	0xfffff7b4
10050e80:	fffff7c7 	.word	0xfffff7c7
10050e84:	2000279c 	.word	0x2000279c
10050e88:	0000083b 	.word	0x0000083b
10050e8c:	00000824 	.word	0x00000824
10050e90:	0000083c 	.word	0x0000083c
10050e94:	0000081c 	.word	0x0000081c
10050e98:	00000836 	.word	0x00000836
10050e9c:	000007ff 	.word	0x000007ff
10050ea0:	0000083a 	.word	0x0000083a
10050ea4:	effc0000 	.word	0xeffc0000
10050ea8:	00000839 	.word	0x00000839
10050eac:	0000080c 	.word	0x0000080c
10050eb0:	00000844 	.word	0x00000844

10050eb4 <CleanPage>:
  return NVMDB_get_info(&DBInfo[op->handle.id]);
}
#endif

__NOINLINE static NVMDB_status_t CleanPage(const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
10050eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
10050eb6:	4c7a      	ldr	r4, [pc, #488]	@ (100510a0 <CleanPage+0x1ec>)
10050eb8:	44a5      	add	sp, r4
10050eba:	af02      	add	r7, sp, #8
10050ebc:	6078      	str	r0, [r7, #4]
  NVMDB_status_t status;
  NVMDB_status_t ret = NVMDB_STATUS_OK;
10050ebe:	4b79      	ldr	r3, [pc, #484]	@ (100510a4 <CleanPage+0x1f0>)
10050ec0:	18fb      	adds	r3, r7, r3
10050ec2:	2200      	movs	r2, #0
10050ec4:	701a      	strb	r2, [r3, #0]
  NVMDB_HandleType handle;
  uint32_t page_offset;
  uint16_t num_bytes;
  ReadStateType state;
  int i;
  uint8_t found = FALSE;
10050ec6:	4b78      	ldr	r3, [pc, #480]	@ (100510a8 <CleanPage+0x1f4>)
10050ec8:	18fb      	adds	r3, r7, r3
10050eca:	2200      	movs	r2, #0
10050ecc:	701a      	strb	r2, [r3, #0]
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  /* Check if there are invalids record in the page and if there are pending operations on the databases. */
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10050ece:	2300      	movs	r3, #0
10050ed0:	4a76      	ldr	r2, [pc, #472]	@ (100510ac <CleanPage+0x1f8>)
10050ed2:	18ba      	adds	r2, r7, r2
10050ed4:	6013      	str	r3, [r2, #0]
10050ed6:	e023      	b.n	10050f20 <CleanPage+0x6c>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
10050ed8:	687b      	ldr	r3, [r7, #4]
10050eda:	6899      	ldr	r1, [r3, #8]
10050edc:	4b73      	ldr	r3, [pc, #460]	@ (100510ac <CleanPage+0x1f8>)
10050ede:	18fb      	adds	r3, r7, r3
10050ee0:	681a      	ldr	r2, [r3, #0]
10050ee2:	0013      	movs	r3, r2
10050ee4:	005b      	lsls	r3, r3, #1
10050ee6:	189b      	adds	r3, r3, r2
10050ee8:	009b      	lsls	r3, r3, #2
10050eea:	18ca      	adds	r2, r1, r3
10050eec:	4970      	ldr	r1, [pc, #448]	@ (100510b0 <CleanPage+0x1fc>)
10050eee:	187b      	adds	r3, r7, r1
10050ef0:	7812      	ldrb	r2, [r2, #0]
10050ef2:	701a      	strb	r2, [r3, #0]
    if(DBInfo[NVMDB_id].invalid_records)
10050ef4:	187b      	adds	r3, r7, r1
10050ef6:	781a      	ldrb	r2, [r3, #0]
10050ef8:	496e      	ldr	r1, [pc, #440]	@ (100510b4 <CleanPage+0x200>)
10050efa:	0013      	movs	r3, r2
10050efc:	009b      	lsls	r3, r3, #2
10050efe:	189b      	adds	r3, r3, r2
10050f00:	009b      	lsls	r3, r3, #2
10050f02:	18cb      	adds	r3, r1, r3
10050f04:	330a      	adds	r3, #10
10050f06:	881b      	ldrh	r3, [r3, #0]
10050f08:	2b00      	cmp	r3, #0
10050f0a:	d003      	beq.n	10050f14 <CleanPage+0x60>
    {
      found = TRUE;
10050f0c:	4b66      	ldr	r3, [pc, #408]	@ (100510a8 <CleanPage+0x1f4>)
10050f0e:	18fb      	adds	r3, r7, r3
10050f10:	2201      	movs	r2, #1
10050f12:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10050f14:	4a65      	ldr	r2, [pc, #404]	@ (100510ac <CleanPage+0x1f8>)
10050f16:	18bb      	adds	r3, r7, r2
10050f18:	681b      	ldr	r3, [r3, #0]
10050f1a:	3301      	adds	r3, #1
10050f1c:	18ba      	adds	r2, r7, r2
10050f1e:	6013      	str	r3, [r2, #0]
10050f20:	687b      	ldr	r3, [r7, #4]
10050f22:	791b      	ldrb	r3, [r3, #4]
10050f24:	001a      	movs	r2, r3
10050f26:	4b61      	ldr	r3, [pc, #388]	@ (100510ac <CleanPage+0x1f8>)
10050f28:	18fb      	adds	r3, r7, r3
10050f2a:	681b      	ldr	r3, [r3, #0]
10050f2c:	4293      	cmp	r3, r2
10050f2e:	dbd3      	blt.n	10050ed8 <CleanPage+0x24>
    {
      return NVMDB_STATUS_CACHE_OP_PENDING;
    }
#endif
  }
  if(!found)
10050f30:	4b5d      	ldr	r3, [pc, #372]	@ (100510a8 <CleanPage+0x1f4>)
10050f32:	18fb      	adds	r3, r7, r3
10050f34:	781b      	ldrb	r3, [r3, #0]
10050f36:	2b00      	cmp	r3, #0
10050f38:	d101      	bne.n	10050f3e <CleanPage+0x8a>
  {
    /* No invalid records found. */
    return NVMDB_STATUS_OK;
10050f3a:	2300      	movs	r3, #0
10050f3c:	e0ab      	b.n	10051096 <CleanPage+0x1e2>
  }

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
10050f3e:	2380      	movs	r3, #128	@ 0x80
10050f40:	011a      	lsls	r2, r3, #4
10050f42:	2308      	movs	r3, #8
10050f44:	18fb      	adds	r3, r7, r3
10050f46:	21ff      	movs	r1, #255	@ 0xff
10050f48:	0018      	movs	r0, r3
10050f4a:	f017 fbf7 	bl	1006873c <memset>

  for(i = 0; i < smallDBContainer_p->num_db; i++)
10050f4e:	2300      	movs	r3, #0
10050f50:	4a56      	ldr	r2, [pc, #344]	@ (100510ac <CleanPage+0x1f8>)
10050f52:	18ba      	adds	r2, r7, r2
10050f54:	6013      	str	r3, [r2, #0]
10050f56:	e051      	b.n	10050ffc <CleanPage+0x148>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
10050f58:	687b      	ldr	r3, [r7, #4]
10050f5a:	6899      	ldr	r1, [r3, #8]
10050f5c:	4853      	ldr	r0, [pc, #332]	@ (100510ac <CleanPage+0x1f8>)
10050f5e:	183b      	adds	r3, r7, r0
10050f60:	681a      	ldr	r2, [r3, #0]
10050f62:	0013      	movs	r3, r2
10050f64:	005b      	lsls	r3, r3, #1
10050f66:	189b      	adds	r3, r3, r2
10050f68:	009b      	lsls	r3, r3, #2
10050f6a:	18ca      	adds	r2, r1, r3
10050f6c:	4d50      	ldr	r5, [pc, #320]	@ (100510b0 <CleanPage+0x1fc>)
10050f6e:	197b      	adds	r3, r7, r5
10050f70:	7812      	ldrb	r2, [r2, #0]
10050f72:	701a      	strb	r2, [r3, #0]
    page_offset = smallDBContainer_p->dbs[i].offset;
10050f74:	687b      	ldr	r3, [r7, #4]
10050f76:	6899      	ldr	r1, [r3, #8]
10050f78:	183b      	adds	r3, r7, r0
10050f7a:	681a      	ldr	r2, [r3, #0]
10050f7c:	0013      	movs	r3, r2
10050f7e:	005b      	lsls	r3, r3, #1
10050f80:	189b      	adds	r3, r3, r2
10050f82:	009b      	lsls	r3, r3, #2
10050f84:	18cb      	adds	r3, r1, r3
10050f86:	685b      	ldr	r3, [r3, #4]
10050f88:	2282      	movs	r2, #130	@ 0x82
10050f8a:	0112      	lsls	r2, r2, #4
10050f8c:	18ba      	adds	r2, r7, r2
10050f8e:	6013      	str	r3, [r2, #0]

    status = NVMDB_HandleInit(NVMDB_id, &handle);
10050f90:	4e49      	ldr	r6, [pc, #292]	@ (100510b8 <CleanPage+0x204>)
10050f92:	19bc      	adds	r4, r7, r6
10050f94:	2381      	movs	r3, #129	@ 0x81
10050f96:	011b      	lsls	r3, r3, #4
10050f98:	18fa      	adds	r2, r7, r3
10050f9a:	197b      	adds	r3, r7, r5
10050f9c:	781b      	ldrb	r3, [r3, #0]
10050f9e:	0011      	movs	r1, r2
10050fa0:	0018      	movs	r0, r3
10050fa2:	f000 fba5 	bl	100516f0 <NVMDB_HandleInit>
10050fa6:	0003      	movs	r3, r0
10050fa8:	7023      	strb	r3, [r4, #0]
    if(status) // This should not happen
10050faa:	19bb      	adds	r3, r7, r6
10050fac:	781b      	ldrb	r3, [r3, #0]
10050fae:	2b00      	cmp	r3, #0
10050fb0:	d001      	beq.n	10050fb6 <CleanPage+0x102>
    {
      return NVMDB_STATUS_OK;
10050fb2:	2300      	movs	r3, #0
10050fb4:	e06f      	b.n	10051096 <CleanPage+0x1e2>
    }

    InitReadState(&state);
10050fb6:	4d41      	ldr	r5, [pc, #260]	@ (100510bc <CleanPage+0x208>)
10050fb8:	197b      	adds	r3, r7, r5
10050fba:	0018      	movs	r0, r3
10050fbc:	f7ff fd92 	bl	10050ae4 <InitReadState>
    // It cannot happen that the database does not fill inside the buffer. So we call LoadDBToRAM() just once for each db.
    LoadDBToRAM(&handle, NVM_buffer + page_offset, sizeof(NVM_buffer) - page_offset, &num_bytes, &state);
10050fc0:	2308      	movs	r3, #8
10050fc2:	18fa      	adds	r2, r7, r3
10050fc4:	2082      	movs	r0, #130	@ 0x82
10050fc6:	0100      	lsls	r0, r0, #4
10050fc8:	183b      	adds	r3, r7, r0
10050fca:	681b      	ldr	r3, [r3, #0]
10050fcc:	18d1      	adds	r1, r2, r3
10050fce:	183b      	adds	r3, r7, r0
10050fd0:	681b      	ldr	r3, [r3, #0]
10050fd2:	b29b      	uxth	r3, r3
10050fd4:	2280      	movs	r2, #128	@ 0x80
10050fd6:	0112      	lsls	r2, r2, #4
10050fd8:	1ad3      	subs	r3, r2, r3
10050fda:	b29a      	uxth	r2, r3
10050fdc:	4b38      	ldr	r3, [pc, #224]	@ (100510c0 <CleanPage+0x20c>)
10050fde:	18fc      	adds	r4, r7, r3
10050fe0:	2381      	movs	r3, #129	@ 0x81
10050fe2:	011b      	lsls	r3, r3, #4
10050fe4:	18f8      	adds	r0, r7, r3
10050fe6:	197b      	adds	r3, r7, r5
10050fe8:	9300      	str	r3, [sp, #0]
10050fea:	0023      	movs	r3, r4
10050fec:	f7ff fd8b 	bl	10050b06 <LoadDBToRAM>
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10050ff0:	4a2e      	ldr	r2, [pc, #184]	@ (100510ac <CleanPage+0x1f8>)
10050ff2:	18bb      	adds	r3, r7, r2
10050ff4:	681b      	ldr	r3, [r3, #0]
10050ff6:	3301      	adds	r3, #1
10050ff8:	18ba      	adds	r2, r7, r2
10050ffa:	6013      	str	r3, [r2, #0]
10050ffc:	687b      	ldr	r3, [r7, #4]
10050ffe:	791b      	ldrb	r3, [r3, #4]
10051000:	001a      	movs	r2, r3
10051002:	4c2a      	ldr	r4, [pc, #168]	@ (100510ac <CleanPage+0x1f8>)
10051004:	193b      	adds	r3, r7, r4
10051006:	681b      	ldr	r3, [r3, #0]
10051008:	4293      	cmp	r3, r2
1005100a:	dba5      	blt.n	10050f58 <CleanPage+0xa4>
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
1005100c:	687b      	ldr	r3, [r7, #4]
1005100e:	681b      	ldr	r3, [r3, #0]
10051010:	2280      	movs	r2, #128	@ 0x80
10051012:	0112      	lsls	r2, r2, #4
10051014:	2108      	movs	r1, #8
10051016:	1879      	adds	r1, r7, r1
10051018:	0018      	movs	r0, r3
1005101a:	f7ff fd23 	bl	10050a64 <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  for(i = 0; i < smallDBContainer_p->num_db; i++)
1005101e:	2300      	movs	r3, #0
10051020:	193a      	adds	r2, r7, r4
10051022:	6013      	str	r3, [r2, #0]
10051024:	e02c      	b.n	10051080 <CleanPage+0x1cc>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
10051026:	687b      	ldr	r3, [r7, #4]
10051028:	6899      	ldr	r1, [r3, #8]
1005102a:	4b20      	ldr	r3, [pc, #128]	@ (100510ac <CleanPage+0x1f8>)
1005102c:	18fb      	adds	r3, r7, r3
1005102e:	681a      	ldr	r2, [r3, #0]
10051030:	0013      	movs	r3, r2
10051032:	005b      	lsls	r3, r3, #1
10051034:	189b      	adds	r3, r3, r2
10051036:	009b      	lsls	r3, r3, #2
10051038:	18ca      	adds	r2, r1, r3
1005103a:	491d      	ldr	r1, [pc, #116]	@ (100510b0 <CleanPage+0x1fc>)
1005103c:	187b      	adds	r3, r7, r1
1005103e:	7812      	ldrb	r2, [r2, #0]
10051040:	701a      	strb	r2, [r3, #0]
    // Update free space.
    status = NVMDB_get_info(&DBInfo[NVMDB_id]);
10051042:	187b      	adds	r3, r7, r1
10051044:	781a      	ldrb	r2, [r3, #0]
10051046:	0013      	movs	r3, r2
10051048:	009b      	lsls	r3, r3, #2
1005104a:	189b      	adds	r3, r3, r2
1005104c:	009b      	lsls	r3, r3, #2
1005104e:	4a19      	ldr	r2, [pc, #100]	@ (100510b4 <CleanPage+0x200>)
10051050:	189b      	adds	r3, r3, r2
10051052:	4d19      	ldr	r5, [pc, #100]	@ (100510b8 <CleanPage+0x204>)
10051054:	197c      	adds	r4, r7, r5
10051056:	0018      	movs	r0, r3
10051058:	f7ff f9de 	bl	10050418 <NVMDB_get_info>
1005105c:	0003      	movs	r3, r0
1005105e:	7023      	strb	r3, [r4, #0]
    if(status)
10051060:	002a      	movs	r2, r5
10051062:	18bb      	adds	r3, r7, r2
10051064:	781b      	ldrb	r3, [r3, #0]
10051066:	2b00      	cmp	r3, #0
10051068:	d004      	beq.n	10051074 <CleanPage+0x1c0>
    {
      ret = status; // Return last error if any.
1005106a:	4b0e      	ldr	r3, [pc, #56]	@ (100510a4 <CleanPage+0x1f0>)
1005106c:	18fb      	adds	r3, r7, r3
1005106e:	18ba      	adds	r2, r7, r2
10051070:	7812      	ldrb	r2, [r2, #0]
10051072:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10051074:	4a0d      	ldr	r2, [pc, #52]	@ (100510ac <CleanPage+0x1f8>)
10051076:	18bb      	adds	r3, r7, r2
10051078:	681b      	ldr	r3, [r3, #0]
1005107a:	3301      	adds	r3, #1
1005107c:	18ba      	adds	r2, r7, r2
1005107e:	6013      	str	r3, [r2, #0]
10051080:	687b      	ldr	r3, [r7, #4]
10051082:	791b      	ldrb	r3, [r3, #4]
10051084:	001a      	movs	r2, r3
10051086:	4b09      	ldr	r3, [pc, #36]	@ (100510ac <CleanPage+0x1f8>)
10051088:	18fb      	adds	r3, r7, r3
1005108a:	681b      	ldr	r3, [r3, #0]
1005108c:	4293      	cmp	r3, r2
1005108e:	dbca      	blt.n	10051026 <CleanPage+0x172>
    }
  }

  return ret;
10051090:	4b04      	ldr	r3, [pc, #16]	@ (100510a4 <CleanPage+0x1f0>)
10051092:	18fb      	adds	r3, r7, r3
10051094:	781b      	ldrb	r3, [r3, #0]
}
10051096:	0018      	movs	r0, r3
10051098:	46bd      	mov	sp, r7
1005109a:	4b0a      	ldr	r3, [pc, #40]	@ (100510c4 <CleanPage+0x210>)
1005109c:	449d      	add	sp, r3
1005109e:	bdf0      	pop	{r4, r5, r6, r7, pc}
100510a0:	fffff7c4 	.word	0xfffff7c4
100510a4:	0000082f 	.word	0x0000082f
100510a8:	00000827 	.word	0x00000827
100510ac:	00000828 	.word	0x00000828
100510b0:	00000826 	.word	0x00000826
100510b4:	2000279c 	.word	0x2000279c
100510b8:	00000825 	.word	0x00000825
100510bc:	00000808 	.word	0x00000808
100510c0:	0000080e 	.word	0x0000080e
100510c4:	00000834 	.word	0x00000834

100510c8 <GetDBType>:

static uint8_t GetDBType(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType **smallDBContainer)
{
100510c8:	b590      	push	{r4, r7, lr}
100510ca:	b087      	sub	sp, #28
100510cc:	af00      	add	r7, sp, #0
100510ce:	0002      	movs	r2, r0
100510d0:	6039      	str	r1, [r7, #0]
100510d2:	1dfb      	adds	r3, r7, #7
100510d4:	701a      	strb	r2, [r3, #0]
  uint8_t id;

  /* Check if it is a large DB. */

  for(int i = 0; i < NUM_LARGE_DBS; i++)
100510d6:	2300      	movs	r3, #0
100510d8:	617b      	str	r3, [r7, #20]
100510da:	e016      	b.n	1005110a <GetDBType+0x42>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
100510dc:	240b      	movs	r4, #11
100510de:	1939      	adds	r1, r7, r4
100510e0:	482e      	ldr	r0, [pc, #184]	@ (1005119c <GetDBType+0xd4>)
100510e2:	697a      	ldr	r2, [r7, #20]
100510e4:	0013      	movs	r3, r2
100510e6:	005b      	lsls	r3, r3, #1
100510e8:	189b      	adds	r3, r3, r2
100510ea:	009b      	lsls	r3, r3, #2
100510ec:	18c3      	adds	r3, r0, r3
100510ee:	3306      	adds	r3, #6
100510f0:	781b      	ldrb	r3, [r3, #0]
100510f2:	700b      	strb	r3, [r1, #0]

    if(id == NVMDB_id)
100510f4:	193a      	adds	r2, r7, r4
100510f6:	1dfb      	adds	r3, r7, #7
100510f8:	7812      	ldrb	r2, [r2, #0]
100510fa:	781b      	ldrb	r3, [r3, #0]
100510fc:	429a      	cmp	r2, r3
100510fe:	d101      	bne.n	10051104 <GetDBType+0x3c>
    {
      return LARGE_DB;
10051100:	2302      	movs	r3, #2
10051102:	e046      	b.n	10051192 <GetDBType+0xca>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
10051104:	697b      	ldr	r3, [r7, #20]
10051106:	3301      	adds	r3, #1
10051108:	617b      	str	r3, [r7, #20]
1005110a:	697b      	ldr	r3, [r7, #20]
1005110c:	2b01      	cmp	r3, #1
1005110e:	dde5      	ble.n	100510dc <GetDBType+0x14>
    }
  }

  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10051110:	2300      	movs	r3, #0
10051112:	613b      	str	r3, [r7, #16]
10051114:	e039      	b.n	1005118a <GetDBType+0xc2>
  {

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10051116:	2300      	movs	r3, #0
10051118:	60fb      	str	r3, [r7, #12]
1005111a:	e026      	b.n	1005116a <GetDBType+0xa2>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
1005111c:	4920      	ldr	r1, [pc, #128]	@ (100511a0 <GetDBType+0xd8>)
1005111e:	693a      	ldr	r2, [r7, #16]
10051120:	0013      	movs	r3, r2
10051122:	005b      	lsls	r3, r3, #1
10051124:	189b      	adds	r3, r3, r2
10051126:	009b      	lsls	r3, r3, #2
10051128:	18cb      	adds	r3, r1, r3
1005112a:	3308      	adds	r3, #8
1005112c:	6819      	ldr	r1, [r3, #0]
1005112e:	68fa      	ldr	r2, [r7, #12]
10051130:	0013      	movs	r3, r2
10051132:	005b      	lsls	r3, r3, #1
10051134:	189b      	adds	r3, r3, r2
10051136:	009b      	lsls	r3, r3, #2
10051138:	18ca      	adds	r2, r1, r3
1005113a:	210b      	movs	r1, #11
1005113c:	187b      	adds	r3, r7, r1
1005113e:	7812      	ldrb	r2, [r2, #0]
10051140:	701a      	strb	r2, [r3, #0]

      if(id == NVMDB_id)
10051142:	187a      	adds	r2, r7, r1
10051144:	1dfb      	adds	r3, r7, #7
10051146:	7812      	ldrb	r2, [r2, #0]
10051148:	781b      	ldrb	r3, [r3, #0]
1005114a:	429a      	cmp	r2, r3
1005114c:	d10a      	bne.n	10051164 <GetDBType+0x9c>
      {
        // DB found inside this small db container.
        *smallDBContainer = &NVM_SMALL_DB_STATIC_INFO[i];
1005114e:	693a      	ldr	r2, [r7, #16]
10051150:	0013      	movs	r3, r2
10051152:	005b      	lsls	r3, r3, #1
10051154:	189b      	adds	r3, r3, r2
10051156:	009b      	lsls	r3, r3, #2
10051158:	4a11      	ldr	r2, [pc, #68]	@ (100511a0 <GetDBType+0xd8>)
1005115a:	189a      	adds	r2, r3, r2
1005115c:	683b      	ldr	r3, [r7, #0]
1005115e:	601a      	str	r2, [r3, #0]
        return SMALL_DB;
10051160:	2301      	movs	r3, #1
10051162:	e016      	b.n	10051192 <GetDBType+0xca>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10051164:	68fb      	ldr	r3, [r7, #12]
10051166:	3301      	adds	r3, #1
10051168:	60fb      	str	r3, [r7, #12]
1005116a:	490d      	ldr	r1, [pc, #52]	@ (100511a0 <GetDBType+0xd8>)
1005116c:	693a      	ldr	r2, [r7, #16]
1005116e:	0013      	movs	r3, r2
10051170:	005b      	lsls	r3, r3, #1
10051172:	189b      	adds	r3, r3, r2
10051174:	009b      	lsls	r3, r3, #2
10051176:	18cb      	adds	r3, r1, r3
10051178:	3304      	adds	r3, #4
1005117a:	781b      	ldrb	r3, [r3, #0]
1005117c:	001a      	movs	r2, r3
1005117e:	68fb      	ldr	r3, [r7, #12]
10051180:	4293      	cmp	r3, r2
10051182:	dbcb      	blt.n	1005111c <GetDBType+0x54>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10051184:	693b      	ldr	r3, [r7, #16]
10051186:	3301      	adds	r3, #1
10051188:	613b      	str	r3, [r7, #16]
1005118a:	693b      	ldr	r3, [r7, #16]
1005118c:	2b00      	cmp	r3, #0
1005118e:	dbc2      	blt.n	10051116 <GetDBType+0x4e>
      }
    }
  }

  return 0;
10051190:	2300      	movs	r3, #0
}
10051192:	0018      	movs	r0, r3
10051194:	46bd      	mov	sp, r7
10051196:	b007      	add	sp, #28
10051198:	bd90      	pop	{r4, r7, pc}
1005119a:	46c0      	nop			@ (mov r8, r8)
1005119c:	1006a134 	.word	0x1006a134
100511a0:	200027c8 	.word	0x200027c8

100511a4 <EraseSmallDB>:
}

#endif

__NOINLINE static NVMDB_status_t EraseSmallDB(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
100511a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100511a6:	4c3d      	ldr	r4, [pc, #244]	@ (1005129c <EraseSmallDB+0xf8>)
100511a8:	44a5      	add	sp, r4
100511aa:	af02      	add	r7, sp, #8
100511ac:	0002      	movs	r2, r0
100511ae:	6039      	str	r1, [r7, #0]
100511b0:	4b3b      	ldr	r3, [pc, #236]	@ (100512a0 <EraseSmallDB+0xfc>)
100511b2:	2183      	movs	r1, #131	@ 0x83
100511b4:	0109      	lsls	r1, r1, #4
100511b6:	185b      	adds	r3, r3, r1
100511b8:	19db      	adds	r3, r3, r7
100511ba:	701a      	strb	r2, [r3, #0]
#endif
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
100511bc:	2380      	movs	r3, #128	@ 0x80
100511be:	011a      	lsls	r2, r3, #4
100511c0:	2324      	movs	r3, #36	@ 0x24
100511c2:	18fb      	adds	r3, r7, r3
100511c4:	21ff      	movs	r1, #255	@ 0xff
100511c6:	0018      	movs	r0, r3
100511c8:	f017 fab8 	bl	1006873c <memset>

  // Search other databases in the same page
  for(int i = 0; i < smallDBContainer_p->num_db; i++)
100511cc:	2300      	movs	r3, #0
100511ce:	4a35      	ldr	r2, [pc, #212]	@ (100512a4 <EraseSmallDB+0x100>)
100511d0:	18ba      	adds	r2, r7, r2
100511d2:	6013      	str	r3, [r2, #0]
100511d4:	e04b      	b.n	1005126e <EraseSmallDB+0xca>
  {
    NVMDB_HandleType handle;
    uint16_t num_read_bytes;
    ReadStateType state;
    NVMDB_IdType id = smallDBContainer_p->dbs[i].id;
100511d6:	683b      	ldr	r3, [r7, #0]
100511d8:	6899      	ldr	r1, [r3, #8]
100511da:	4c32      	ldr	r4, [pc, #200]	@ (100512a4 <EraseSmallDB+0x100>)
100511dc:	193b      	adds	r3, r7, r4
100511de:	681a      	ldr	r2, [r3, #0]
100511e0:	0013      	movs	r3, r2
100511e2:	005b      	lsls	r3, r3, #1
100511e4:	189b      	adds	r3, r3, r2
100511e6:	009b      	lsls	r3, r3, #2
100511e8:	18ca      	adds	r2, r1, r3
100511ea:	492f      	ldr	r1, [pc, #188]	@ (100512a8 <EraseSmallDB+0x104>)
100511ec:	187b      	adds	r3, r7, r1
100511ee:	7812      	ldrb	r2, [r2, #0]
100511f0:	701a      	strb	r2, [r3, #0]
    if(id != NVMDB_id)
100511f2:	187a      	adds	r2, r7, r1
100511f4:	4b2a      	ldr	r3, [pc, #168]	@ (100512a0 <EraseSmallDB+0xfc>)
100511f6:	2083      	movs	r0, #131	@ 0x83
100511f8:	0100      	lsls	r0, r0, #4
100511fa:	181b      	adds	r3, r3, r0
100511fc:	19db      	adds	r3, r3, r7
100511fe:	7812      	ldrb	r2, [r2, #0]
10051200:	781b      	ldrb	r3, [r3, #0]
10051202:	429a      	cmp	r2, r3
10051204:	d02d      	beq.n	10051262 <EraseSmallDB+0xbe>
    {
      // This is not the db to be erased. Save it.
      NVMDB_HandleInit(id, &handle);
10051206:	2514      	movs	r5, #20
10051208:	197a      	adds	r2, r7, r5
1005120a:	187b      	adds	r3, r7, r1
1005120c:	781b      	ldrb	r3, [r3, #0]
1005120e:	0011      	movs	r1, r2
10051210:	0018      	movs	r0, r3
10051212:	f000 fa6d 	bl	100516f0 <NVMDB_HandleInit>
      uint32_t offset = smallDBContainer_p->dbs[i].offset;
10051216:	683b      	ldr	r3, [r7, #0]
10051218:	6899      	ldr	r1, [r3, #8]
1005121a:	193b      	adds	r3, r7, r4
1005121c:	681a      	ldr	r2, [r3, #0]
1005121e:	0013      	movs	r3, r2
10051220:	005b      	lsls	r3, r3, #1
10051222:	189b      	adds	r3, r3, r2
10051224:	009b      	lsls	r3, r3, #2
10051226:	18cb      	adds	r3, r1, r3
10051228:	685b      	ldr	r3, [r3, #4]
1005122a:	4c20      	ldr	r4, [pc, #128]	@ (100512ac <EraseSmallDB+0x108>)
1005122c:	193a      	adds	r2, r7, r4
1005122e:	6013      	str	r3, [r2, #0]
      InitReadState(&state);
10051230:	260c      	movs	r6, #12
10051232:	19bb      	adds	r3, r7, r6
10051234:	0018      	movs	r0, r3
10051236:	f7ff fc55 	bl	10050ae4 <InitReadState>
      LoadDBToRAM(&handle, NVM_buffer + offset, sizeof(NVM_buffer) - offset, &num_read_bytes, &state);
1005123a:	2324      	movs	r3, #36	@ 0x24
1005123c:	18fa      	adds	r2, r7, r3
1005123e:	193b      	adds	r3, r7, r4
10051240:	681b      	ldr	r3, [r3, #0]
10051242:	18d1      	adds	r1, r2, r3
10051244:	193b      	adds	r3, r7, r4
10051246:	681b      	ldr	r3, [r3, #0]
10051248:	b29b      	uxth	r3, r3
1005124a:	2280      	movs	r2, #128	@ 0x80
1005124c:	0112      	lsls	r2, r2, #4
1005124e:	1ad3      	subs	r3, r2, r3
10051250:	b29a      	uxth	r2, r3
10051252:	2312      	movs	r3, #18
10051254:	18fc      	adds	r4, r7, r3
10051256:	1978      	adds	r0, r7, r5
10051258:	19bb      	adds	r3, r7, r6
1005125a:	9300      	str	r3, [sp, #0]
1005125c:	0023      	movs	r3, r4
1005125e:	f7ff fc52 	bl	10050b06 <LoadDBToRAM>
  for(int i = 0; i < smallDBContainer_p->num_db; i++)
10051262:	4a10      	ldr	r2, [pc, #64]	@ (100512a4 <EraseSmallDB+0x100>)
10051264:	18bb      	adds	r3, r7, r2
10051266:	681b      	ldr	r3, [r3, #0]
10051268:	3301      	adds	r3, #1
1005126a:	18ba      	adds	r2, r7, r2
1005126c:	6013      	str	r3, [r2, #0]
1005126e:	683b      	ldr	r3, [r7, #0]
10051270:	791b      	ldrb	r3, [r3, #4]
10051272:	001a      	movs	r2, r3
10051274:	4b0b      	ldr	r3, [pc, #44]	@ (100512a4 <EraseSmallDB+0x100>)
10051276:	18fb      	adds	r3, r7, r3
10051278:	681b      	ldr	r3, [r3, #0]
1005127a:	4293      	cmp	r3, r2
1005127c:	dbab      	blt.n	100511d6 <EraseSmallDB+0x32>
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  // Write buffer to flash
  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
1005127e:	683b      	ldr	r3, [r7, #0]
10051280:	681b      	ldr	r3, [r3, #0]
10051282:	2280      	movs	r2, #128	@ 0x80
10051284:	0112      	lsls	r2, r2, #4
10051286:	2124      	movs	r1, #36	@ 0x24
10051288:	1879      	adds	r1, r7, r1
1005128a:	0018      	movs	r0, r3
1005128c:	f7ff fbea 	bl	10050a64 <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
10051290:	2300      	movs	r3, #0
}
10051292:	0018      	movs	r0, r3
10051294:	46bd      	mov	sp, r7
10051296:	4b06      	ldr	r3, [pc, #24]	@ (100512b0 <EraseSmallDB+0x10c>)
10051298:	449d      	add	sp, r3
1005129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005129c:	fffff7c4 	.word	0xfffff7c4
100512a0:	fffff7d7 	.word	0xfffff7d7
100512a4:	0000082c 	.word	0x0000082c
100512a8:	0000082b 	.word	0x0000082b
100512ac:	00000824 	.word	0x00000824
100512b0:	00000834 	.word	0x00000834

100512b4 <NVMDB_AppendRecordNoCache>:

static NVMDB_status_t NVMDB_AppendRecordNoCache(NVMDB_HandleType *handle_p, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
100512b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100512b6:	b089      	sub	sp, #36	@ 0x24
100512b8:	af02      	add	r7, sp, #8
100512ba:	60f8      	str	r0, [r7, #12]
100512bc:	0008      	movs	r0, r1
100512be:	0011      	movs	r1, r2
100512c0:	607b      	str	r3, [r7, #4]
100512c2:	230b      	movs	r3, #11
100512c4:	18fb      	adds	r3, r7, r3
100512c6:	1c02      	adds	r2, r0, #0
100512c8:	701a      	strb	r2, [r3, #0]
100512ca:	2008      	movs	r0, #8
100512cc:	183b      	adds	r3, r7, r0
100512ce:	1c0a      	adds	r2, r1, #0
100512d0:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordType *record_p;
  NVMDB_RecordSizeType available_size;
  NVMDB_status_t status;

  data1_length = ROUND4_R(data1_length);
100512d2:	0001      	movs	r1, r0
100512d4:	187b      	adds	r3, r7, r1
100512d6:	881b      	ldrh	r3, [r3, #0]
100512d8:	3b01      	subs	r3, #1
100512da:	b29b      	uxth	r3, r3
100512dc:	b21b      	sxth	r3, r3
100512de:	2203      	movs	r2, #3
100512e0:	4313      	orrs	r3, r2
100512e2:	b21b      	sxth	r3, r3
100512e4:	b29a      	uxth	r2, r3
100512e6:	187b      	adds	r3, r7, r1
100512e8:	3201      	adds	r2, #1
100512ea:	801a      	strh	r2, [r3, #0]
  /* Search for first available entry. */

  while(1)
  {

    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
100512ec:	68fb      	ldr	r3, [r7, #12]
100512ee:	685b      	ldr	r3, [r3, #4]
100512f0:	1d5a      	adds	r2, r3, #5
100512f2:	68fb      	ldr	r3, [r7, #12]
100512f4:	689b      	ldr	r3, [r3, #8]
100512f6:	429a      	cmp	r2, r3
100512f8:	d310      	bcc.n	1005131c <NVMDB_AppendRecordNoCache+0x68>
    {
      /* End of DB reached. This should not happen since the free space has been checked before.
         Should we remove this code or keep it to be safer?  */
      if(DBInfo[handle_p->id].invalid_records)
100512fa:	68fb      	ldr	r3, [r7, #12]
100512fc:	781b      	ldrb	r3, [r3, #0]
100512fe:	0019      	movs	r1, r3
10051300:	4a4a      	ldr	r2, [pc, #296]	@ (1005142c <NVMDB_AppendRecordNoCache+0x178>)
10051302:	000b      	movs	r3, r1
10051304:	009b      	lsls	r3, r3, #2
10051306:	185b      	adds	r3, r3, r1
10051308:	009b      	lsls	r3, r3, #2
1005130a:	18d3      	adds	r3, r2, r3
1005130c:	330a      	adds	r3, #10
1005130e:	881b      	ldrh	r3, [r3, #0]
10051310:	2b00      	cmp	r3, #0
10051312:	d001      	beq.n	10051318 <NVMDB_AppendRecordNoCache+0x64>
      {
        return NVMDB_STATUS_CLEAN_NEEDED;
10051314:	230b      	movs	r3, #11
10051316:	e084      	b.n	10051422 <NVMDB_AppendRecordNoCache+0x16e>
      }
      return NVMDB_STATUS_FULL_DB;
10051318:	2302      	movs	r3, #2
1005131a:	e082      	b.n	10051422 <NVMDB_AppendRecordNoCache+0x16e>
    }

    record_p = (NVMDB_RecordType_ptr)handle_p->address;
1005131c:	68fb      	ldr	r3, [r7, #12]
1005131e:	685b      	ldr	r3, [r3, #4]
10051320:	617b      	str	r3, [r7, #20]

    if(record_p->header.valid_flag == NO_RECORD)
10051322:	697b      	ldr	r3, [r7, #20]
10051324:	781b      	ldrb	r3, [r3, #0]
10051326:	2bff      	cmp	r3, #255	@ 0xff
10051328:	d11c      	bne.n	10051364 <NVMDB_AppendRecordNoCache+0xb0>
    {
      available_size = MIN(handle_p->end_address - handle_p->address, MAX_RECORD_SIZE);
1005132a:	68fb      	ldr	r3, [r7, #12]
1005132c:	689a      	ldr	r2, [r3, #8]
1005132e:	68fb      	ldr	r3, [r7, #12]
10051330:	685b      	ldr	r3, [r3, #4]
10051332:	1ad3      	subs	r3, r2, r3
10051334:	2280      	movs	r2, #128	@ 0x80
10051336:	0252      	lsls	r2, r2, #9
10051338:	4293      	cmp	r3, r2
1005133a:	d300      	bcc.n	1005133e <NVMDB_AppendRecordNoCache+0x8a>
1005133c:	4b3c      	ldr	r3, [pc, #240]	@ (10051430 <NVMDB_AppendRecordNoCache+0x17c>)
1005133e:	2112      	movs	r1, #18
10051340:	187a      	adds	r2, r7, r1
10051342:	8013      	strh	r3, [r2, #0]
      break;
10051344:	46c0      	nop			@ (mov r8, r8)
    }

    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
  }

  if(available_size < data1_length + data2_length + RECORD_HEADER_SIZE)
10051346:	2308      	movs	r3, #8
10051348:	0018      	movs	r0, r3
1005134a:	18fb      	adds	r3, r7, r3
1005134c:	881a      	ldrh	r2, [r3, #0]
1005134e:	2328      	movs	r3, #40	@ 0x28
10051350:	181b      	adds	r3, r3, r0
10051352:	19db      	adds	r3, r3, r7
10051354:	881b      	ldrh	r3, [r3, #0]
10051356:	18d3      	adds	r3, r2, r3
10051358:	1cda      	adds	r2, r3, #3
1005135a:	187b      	adds	r3, r7, r1
1005135c:	881b      	ldrh	r3, [r3, #0]
1005135e:	429a      	cmp	r2, r3
10051360:	db27      	blt.n	100513b2 <NVMDB_AppendRecordNoCache+0xfe>
10051362:	e015      	b.n	10051390 <NVMDB_AppendRecordNoCache+0xdc>
    else if(record_p->header.valid_flag != VALID_RECORD && record_p->header.valid_flag != INVALID_RECORD)
10051364:	697b      	ldr	r3, [r7, #20]
10051366:	781b      	ldrb	r3, [r3, #0]
10051368:	2bfe      	cmp	r3, #254	@ 0xfe
1005136a:	d005      	beq.n	10051378 <NVMDB_AppendRecordNoCache+0xc4>
1005136c:	697b      	ldr	r3, [r7, #20]
1005136e:	781b      	ldrb	r3, [r3, #0]
10051370:	2b00      	cmp	r3, #0
10051372:	d001      	beq.n	10051378 <NVMDB_AppendRecordNoCache+0xc4>
      return NVMDB_STATUS_CORRUPTED_DB;
10051374:	2303      	movs	r3, #3
10051376:	e054      	b.n	10051422 <NVMDB_AppendRecordNoCache+0x16e>
    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
10051378:	68fb      	ldr	r3, [r7, #12]
1005137a:	685b      	ldr	r3, [r3, #4]
1005137c:	697a      	ldr	r2, [r7, #20]
1005137e:	8852      	ldrh	r2, [r2, #2]
10051380:	3203      	adds	r2, #3
10051382:	2103      	movs	r1, #3
10051384:	430a      	orrs	r2, r1
10051386:	189b      	adds	r3, r3, r2
10051388:	1c5a      	adds	r2, r3, #1
1005138a:	68fb      	ldr	r3, [r7, #12]
1005138c:	605a      	str	r2, [r3, #4]
    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
1005138e:	e7ad      	b.n	100512ec <NVMDB_AppendRecordNoCache+0x38>
  {
    /* End of DB reached. This should not happen since the free space has been checked before.
       Should we remove this code or keep it to be safer?  */
    if(DBInfo[handle_p->id].invalid_records)
10051390:	68fb      	ldr	r3, [r7, #12]
10051392:	781b      	ldrb	r3, [r3, #0]
10051394:	0019      	movs	r1, r3
10051396:	4a25      	ldr	r2, [pc, #148]	@ (1005142c <NVMDB_AppendRecordNoCache+0x178>)
10051398:	000b      	movs	r3, r1
1005139a:	009b      	lsls	r3, r3, #2
1005139c:	185b      	adds	r3, r3, r1
1005139e:	009b      	lsls	r3, r3, #2
100513a0:	18d3      	adds	r3, r2, r3
100513a2:	330a      	adds	r3, #10
100513a4:	881b      	ldrh	r3, [r3, #0]
100513a6:	2b00      	cmp	r3, #0
100513a8:	d001      	beq.n	100513ae <NVMDB_AppendRecordNoCache+0xfa>
    {
      return NVMDB_STATUS_CLEAN_NEEDED;
100513aa:	230b      	movs	r3, #11
100513ac:	e039      	b.n	10051422 <NVMDB_AppendRecordNoCache+0x16e>
    }
    return NVMDB_STATUS_FULL_DB;
100513ae:	2302      	movs	r3, #2
100513b0:	e037      	b.n	10051422 <NVMDB_AppendRecordNoCache+0x16e>
  }

  status = WriteRecord(handle_p->address, record_id, data1_length, data1, data2_length, data2);
100513b2:	68fb      	ldr	r3, [r7, #12]
100513b4:	6858      	ldr	r0, [r3, #4]
100513b6:	2611      	movs	r6, #17
100513b8:	19bc      	adds	r4, r7, r6
100513ba:	687d      	ldr	r5, [r7, #4]
100513bc:	2308      	movs	r3, #8
100513be:	001a      	movs	r2, r3
100513c0:	18fb      	adds	r3, r7, r3
100513c2:	881b      	ldrh	r3, [r3, #0]
100513c4:	469c      	mov	ip, r3
100513c6:	230b      	movs	r3, #11
100513c8:	18fb      	adds	r3, r7, r3
100513ca:	7819      	ldrb	r1, [r3, #0]
100513cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100513ce:	9301      	str	r3, [sp, #4]
100513d0:	2328      	movs	r3, #40	@ 0x28
100513d2:	189b      	adds	r3, r3, r2
100513d4:	19db      	adds	r3, r3, r7
100513d6:	881b      	ldrh	r3, [r3, #0]
100513d8:	9300      	str	r3, [sp, #0]
100513da:	002b      	movs	r3, r5
100513dc:	4662      	mov	r2, ip
100513de:	f7ff f99c 	bl	1005071a <WriteRecord>
100513e2:	0003      	movs	r3, r0
100513e4:	7023      	strb	r3, [r4, #0]
  if(status)
100513e6:	19bb      	adds	r3, r7, r6
100513e8:	781b      	ldrb	r3, [r3, #0]
100513ea:	2b00      	cmp	r3, #0
100513ec:	d002      	beq.n	100513f4 <NVMDB_AppendRecordNoCache+0x140>
  {
    return status;
100513ee:	19bb      	adds	r3, r7, r6
100513f0:	781b      	ldrb	r3, [r3, #0]
100513f2:	e016      	b.n	10051422 <NVMDB_AppendRecordNoCache+0x16e>
  }

  DBInfo[handle_p->id].valid_records++;
100513f4:	68fb      	ldr	r3, [r7, #12]
100513f6:	781b      	ldrb	r3, [r3, #0]
100513f8:	001a      	movs	r2, r3
100513fa:	490c      	ldr	r1, [pc, #48]	@ (1005142c <NVMDB_AppendRecordNoCache+0x178>)
100513fc:	0013      	movs	r3, r2
100513fe:	009b      	lsls	r3, r3, #2
10051400:	189b      	adds	r3, r3, r2
10051402:	009b      	lsls	r3, r3, #2
10051404:	18cb      	adds	r3, r1, r3
10051406:	3308      	adds	r3, #8
10051408:	881b      	ldrh	r3, [r3, #0]
1005140a:	3301      	adds	r3, #1
1005140c:	b298      	uxth	r0, r3
1005140e:	4907      	ldr	r1, [pc, #28]	@ (1005142c <NVMDB_AppendRecordNoCache+0x178>)
10051410:	0013      	movs	r3, r2
10051412:	009b      	lsls	r3, r3, #2
10051414:	189b      	adds	r3, r3, r2
10051416:	009b      	lsls	r3, r3, #2
10051418:	18cb      	adds	r3, r1, r3
1005141a:	3308      	adds	r3, #8
1005141c:	1c02      	adds	r2, r0, #0
1005141e:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10051420:	2300      	movs	r3, #0
}
10051422:	0018      	movs	r0, r3
10051424:	46bd      	mov	sp, r7
10051426:	b007      	add	sp, #28
10051428:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005142a:	46c0      	nop			@ (mov r8, r8)
1005142c:	2000279c 	.word	0x2000279c
10051430:	0000ffff 	.word	0x0000ffff

10051434 <NVMDB_Init>:
 *
 * @param  None
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Init(void)
{
10051434:	b5b0      	push	{r4, r5, r7, lr}
10051436:	b088      	sub	sp, #32
10051438:	af00      	add	r7, sp, #0
  uint32_t page_address, offset;
  uint16_t clean_threshold;
  uint8_t id;

  /* Parse small DBs. */
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
1005143a:	2300      	movs	r3, #0
1005143c:	61fb      	str	r3, [r7, #28]
1005143e:	e0cd      	b.n	100515dc <NVMDB_Init+0x1a8>
  {

    page_address = NVM_SMALL_DB_STATIC_INFO[i].page_address;
10051440:	49a8      	ldr	r1, [pc, #672]	@ (100516e4 <NVMDB_Init+0x2b0>)
10051442:	69fa      	ldr	r2, [r7, #28]
10051444:	0013      	movs	r3, r2
10051446:	005b      	lsls	r3, r3, #1
10051448:	189b      	adds	r3, r3, r2
1005144a:	009b      	lsls	r3, r3, #2
1005144c:	585b      	ldr	r3, [r3, r1]
1005144e:	60fb      	str	r3, [r7, #12]

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10051450:	2300      	movs	r3, #0
10051452:	61bb      	str	r3, [r7, #24]
10051454:	e0b1      	b.n	100515ba <NVMDB_Init+0x186>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
10051456:	49a3      	ldr	r1, [pc, #652]	@ (100516e4 <NVMDB_Init+0x2b0>)
10051458:	69fa      	ldr	r2, [r7, #28]
1005145a:	0013      	movs	r3, r2
1005145c:	005b      	lsls	r3, r3, #1
1005145e:	189b      	adds	r3, r3, r2
10051460:	009b      	lsls	r3, r3, #2
10051462:	18cb      	adds	r3, r1, r3
10051464:	3308      	adds	r3, #8
10051466:	6819      	ldr	r1, [r3, #0]
10051468:	69ba      	ldr	r2, [r7, #24]
1005146a:	0013      	movs	r3, r2
1005146c:	005b      	lsls	r3, r3, #1
1005146e:	189b      	adds	r3, r3, r2
10051470:	009b      	lsls	r3, r3, #2
10051472:	18ca      	adds	r2, r1, r3
10051474:	2013      	movs	r0, #19
10051476:	183b      	adds	r3, r7, r0
10051478:	7812      	ldrb	r2, [r2, #0]
1005147a:	701a      	strb	r2, [r3, #0]
      offset = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].offset;
1005147c:	4999      	ldr	r1, [pc, #612]	@ (100516e4 <NVMDB_Init+0x2b0>)
1005147e:	69fa      	ldr	r2, [r7, #28]
10051480:	0013      	movs	r3, r2
10051482:	005b      	lsls	r3, r3, #1
10051484:	189b      	adds	r3, r3, r2
10051486:	009b      	lsls	r3, r3, #2
10051488:	18cb      	adds	r3, r1, r3
1005148a:	3308      	adds	r3, #8
1005148c:	6819      	ldr	r1, [r3, #0]
1005148e:	69ba      	ldr	r2, [r7, #24]
10051490:	0013      	movs	r3, r2
10051492:	005b      	lsls	r3, r3, #1
10051494:	189b      	adds	r3, r3, r2
10051496:	009b      	lsls	r3, r3, #2
10051498:	18cb      	adds	r3, r1, r3
1005149a:	685b      	ldr	r3, [r3, #4]
1005149c:	60bb      	str	r3, [r7, #8]
#if AUTO_CLEAN
      clean_threshold = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].clean_threshold;
1005149e:	4991      	ldr	r1, [pc, #580]	@ (100516e4 <NVMDB_Init+0x2b0>)
100514a0:	69fa      	ldr	r2, [r7, #28]
100514a2:	0013      	movs	r3, r2
100514a4:	005b      	lsls	r3, r3, #1
100514a6:	189b      	adds	r3, r3, r2
100514a8:	009b      	lsls	r3, r3, #2
100514aa:	18cb      	adds	r3, r1, r3
100514ac:	3308      	adds	r3, #8
100514ae:	6819      	ldr	r1, [r3, #0]
100514b0:	69ba      	ldr	r2, [r7, #24]
100514b2:	0013      	movs	r3, r2
100514b4:	005b      	lsls	r3, r3, #1
100514b6:	189b      	adds	r3, r3, r2
100514b8:	009b      	lsls	r3, r3, #2
100514ba:	18ca      	adds	r2, r1, r3
100514bc:	1dbb      	adds	r3, r7, #6
100514be:	8912      	ldrh	r2, [r2, #8]
100514c0:	801a      	strh	r2, [r3, #0]
#endif
      if(DBInfo[id].start_address || id >= NUM_DB)
100514c2:	183b      	adds	r3, r7, r0
100514c4:	781a      	ldrb	r2, [r3, #0]
100514c6:	4988      	ldr	r1, [pc, #544]	@ (100516e8 <NVMDB_Init+0x2b4>)
100514c8:	0013      	movs	r3, r2
100514ca:	009b      	lsls	r3, r3, #2
100514cc:	189b      	adds	r3, r3, r2
100514ce:	009b      	lsls	r3, r3, #2
100514d0:	585b      	ldr	r3, [r3, r1]
100514d2:	2b00      	cmp	r3, #0
100514d4:	d103      	bne.n	100514de <NVMDB_Init+0xaa>
100514d6:	183b      	adds	r3, r7, r0
100514d8:	781b      	ldrb	r3, [r3, #0]
100514da:	2b01      	cmp	r3, #1
100514dc:	d901      	bls.n	100514e2 <NVMDB_Init+0xae>
      {
        // ID already used.
        return NVMDB_STATUS_INVALID_ID;
100514de:	2301      	movs	r3, #1
100514e0:	e0fc      	b.n	100516dc <NVMDB_Init+0x2a8>
      }
      DBInfo[id].start_address = page_address + offset;
100514e2:	2413      	movs	r4, #19
100514e4:	193b      	adds	r3, r7, r4
100514e6:	781a      	ldrb	r2, [r3, #0]
100514e8:	68f9      	ldr	r1, [r7, #12]
100514ea:	68bb      	ldr	r3, [r7, #8]
100514ec:	18c8      	adds	r0, r1, r3
100514ee:	497e      	ldr	r1, [pc, #504]	@ (100516e8 <NVMDB_Init+0x2b4>)
100514f0:	0013      	movs	r3, r2
100514f2:	009b      	lsls	r3, r3, #2
100514f4:	189b      	adds	r3, r3, r2
100514f6:	009b      	lsls	r3, r3, #2
100514f8:	5058      	str	r0, [r3, r1]

      if(j == NVM_SMALL_DB_STATIC_INFO[i].num_db - 1)
100514fa:	497a      	ldr	r1, [pc, #488]	@ (100516e4 <NVMDB_Init+0x2b0>)
100514fc:	69fa      	ldr	r2, [r7, #28]
100514fe:	0013      	movs	r3, r2
10051500:	005b      	lsls	r3, r3, #1
10051502:	189b      	adds	r3, r3, r2
10051504:	009b      	lsls	r3, r3, #2
10051506:	18cb      	adds	r3, r1, r3
10051508:	3304      	adds	r3, #4
1005150a:	781b      	ldrb	r3, [r3, #0]
1005150c:	3b01      	subs	r3, #1
1005150e:	69ba      	ldr	r2, [r7, #24]
10051510:	429a      	cmp	r2, r3
10051512:	d10e      	bne.n	10051532 <NVMDB_Init+0xfe>
      {
        // If it is the last db of the page, end address is the last address of the page
        DBInfo[id].end_address = page_address + PAGE_SIZE;
10051514:	193b      	adds	r3, r7, r4
10051516:	781a      	ldrb	r2, [r3, #0]
10051518:	68fb      	ldr	r3, [r7, #12]
1005151a:	2180      	movs	r1, #128	@ 0x80
1005151c:	0109      	lsls	r1, r1, #4
1005151e:	1859      	adds	r1, r3, r1
10051520:	4871      	ldr	r0, [pc, #452]	@ (100516e8 <NVMDB_Init+0x2b4>)
10051522:	0013      	movs	r3, r2
10051524:	009b      	lsls	r3, r3, #2
10051526:	189b      	adds	r3, r3, r2
10051528:	009b      	lsls	r3, r3, #2
1005152a:	18c3      	adds	r3, r0, r3
1005152c:	3304      	adds	r3, #4
1005152e:	6019      	str	r1, [r3, #0]
10051530:	e01d      	b.n	1005156e <NVMDB_Init+0x13a>
      }
      else
      {
        // If it is not the last db of the page, end address is the start address of the next db
        DBInfo[id].end_address = page_address + NVM_SMALL_DB_STATIC_INFO[i].dbs[j + 1].offset;
10051532:	496c      	ldr	r1, [pc, #432]	@ (100516e4 <NVMDB_Init+0x2b0>)
10051534:	69fa      	ldr	r2, [r7, #28]
10051536:	0013      	movs	r3, r2
10051538:	005b      	lsls	r3, r3, #1
1005153a:	189b      	adds	r3, r3, r2
1005153c:	009b      	lsls	r3, r3, #2
1005153e:	18cb      	adds	r3, r1, r3
10051540:	3308      	adds	r3, #8
10051542:	6819      	ldr	r1, [r3, #0]
10051544:	69bb      	ldr	r3, [r7, #24]
10051546:	1c5a      	adds	r2, r3, #1
10051548:	0013      	movs	r3, r2
1005154a:	005b      	lsls	r3, r3, #1
1005154c:	189b      	adds	r3, r3, r2
1005154e:	009b      	lsls	r3, r3, #2
10051550:	18cb      	adds	r3, r1, r3
10051552:	6859      	ldr	r1, [r3, #4]
10051554:	2313      	movs	r3, #19
10051556:	18fb      	adds	r3, r7, r3
10051558:	781a      	ldrb	r2, [r3, #0]
1005155a:	68fb      	ldr	r3, [r7, #12]
1005155c:	18c9      	adds	r1, r1, r3
1005155e:	4862      	ldr	r0, [pc, #392]	@ (100516e8 <NVMDB_Init+0x2b4>)
10051560:	0013      	movs	r3, r2
10051562:	009b      	lsls	r3, r3, #2
10051564:	189b      	adds	r3, r3, r2
10051566:	009b      	lsls	r3, r3, #2
10051568:	18c3      	adds	r3, r0, r3
1005156a:	3304      	adds	r3, #4
1005156c:	6019      	str	r1, [r3, #0]
      }
      DBInfo[id].clean_threshold = clean_threshold;
1005156e:	2013      	movs	r0, #19
10051570:	183b      	adds	r3, r7, r0
10051572:	781a      	ldrb	r2, [r3, #0]
10051574:	495c      	ldr	r1, [pc, #368]	@ (100516e8 <NVMDB_Init+0x2b4>)
10051576:	0013      	movs	r3, r2
10051578:	009b      	lsls	r3, r3, #2
1005157a:	189b      	adds	r3, r3, r2
1005157c:	009b      	lsls	r3, r3, #2
1005157e:	18cb      	adds	r3, r1, r3
10051580:	3310      	adds	r3, #16
10051582:	1dba      	adds	r2, r7, #6
10051584:	8812      	ldrh	r2, [r2, #0]
10051586:	801a      	strh	r2, [r3, #0]

      status = NVMDB_get_info(&DBInfo[id]);
10051588:	183b      	adds	r3, r7, r0
1005158a:	781a      	ldrb	r2, [r3, #0]
1005158c:	0013      	movs	r3, r2
1005158e:	009b      	lsls	r3, r3, #2
10051590:	189b      	adds	r3, r3, r2
10051592:	009b      	lsls	r3, r3, #2
10051594:	4a54      	ldr	r2, [pc, #336]	@ (100516e8 <NVMDB_Init+0x2b4>)
10051596:	189b      	adds	r3, r3, r2
10051598:	2512      	movs	r5, #18
1005159a:	197c      	adds	r4, r7, r5
1005159c:	0018      	movs	r0, r3
1005159e:	f7fe ff3b 	bl	10050418 <NVMDB_get_info>
100515a2:	0003      	movs	r3, r0
100515a4:	7023      	strb	r3, [r4, #0]
      if(status)
100515a6:	197b      	adds	r3, r7, r5
100515a8:	781b      	ldrb	r3, [r3, #0]
100515aa:	2b00      	cmp	r3, #0
100515ac:	d002      	beq.n	100515b4 <NVMDB_Init+0x180>
      {
        return status;
100515ae:	197b      	adds	r3, r7, r5
100515b0:	781b      	ldrb	r3, [r3, #0]
100515b2:	e093      	b.n	100516dc <NVMDB_Init+0x2a8>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
100515b4:	69bb      	ldr	r3, [r7, #24]
100515b6:	3301      	adds	r3, #1
100515b8:	61bb      	str	r3, [r7, #24]
100515ba:	494a      	ldr	r1, [pc, #296]	@ (100516e4 <NVMDB_Init+0x2b0>)
100515bc:	69fa      	ldr	r2, [r7, #28]
100515be:	0013      	movs	r3, r2
100515c0:	005b      	lsls	r3, r3, #1
100515c2:	189b      	adds	r3, r3, r2
100515c4:	009b      	lsls	r3, r3, #2
100515c6:	18cb      	adds	r3, r1, r3
100515c8:	3304      	adds	r3, #4
100515ca:	781b      	ldrb	r3, [r3, #0]
100515cc:	001a      	movs	r2, r3
100515ce:	69bb      	ldr	r3, [r7, #24]
100515d0:	4293      	cmp	r3, r2
100515d2:	da00      	bge.n	100515d6 <NVMDB_Init+0x1a2>
100515d4:	e73f      	b.n	10051456 <NVMDB_Init+0x22>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
100515d6:	69fb      	ldr	r3, [r7, #28]
100515d8:	3301      	adds	r3, #1
100515da:	61fb      	str	r3, [r7, #28]
100515dc:	69fb      	ldr	r3, [r7, #28]
100515de:	2b00      	cmp	r3, #0
100515e0:	da00      	bge.n	100515e4 <NVMDB_Init+0x1b0>
100515e2:	e72d      	b.n	10051440 <NVMDB_Init+0xc>
      }
    }
  }

  /* Parse large DBs. */
  for(int i = 0; i < NUM_LARGE_DBS; i++)
100515e4:	2300      	movs	r3, #0
100515e6:	617b      	str	r3, [r7, #20]
100515e8:	e074      	b.n	100516d4 <NVMDB_Init+0x2a0>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
100515ea:	2413      	movs	r4, #19
100515ec:	1939      	adds	r1, r7, r4
100515ee:	483f      	ldr	r0, [pc, #252]	@ (100516ec <NVMDB_Init+0x2b8>)
100515f0:	697a      	ldr	r2, [r7, #20]
100515f2:	0013      	movs	r3, r2
100515f4:	005b      	lsls	r3, r3, #1
100515f6:	189b      	adds	r3, r3, r2
100515f8:	009b      	lsls	r3, r3, #2
100515fa:	18c3      	adds	r3, r0, r3
100515fc:	3306      	adds	r3, #6
100515fe:	781b      	ldrb	r3, [r3, #0]
10051600:	700b      	strb	r3, [r1, #0]

    if(DBInfo[id].start_address || id >= NUM_DB)
10051602:	193b      	adds	r3, r7, r4
10051604:	781a      	ldrb	r2, [r3, #0]
10051606:	4938      	ldr	r1, [pc, #224]	@ (100516e8 <NVMDB_Init+0x2b4>)
10051608:	0013      	movs	r3, r2
1005160a:	009b      	lsls	r3, r3, #2
1005160c:	189b      	adds	r3, r3, r2
1005160e:	009b      	lsls	r3, r3, #2
10051610:	585b      	ldr	r3, [r3, r1]
10051612:	2b00      	cmp	r3, #0
10051614:	d103      	bne.n	1005161e <NVMDB_Init+0x1ea>
10051616:	193b      	adds	r3, r7, r4
10051618:	781b      	ldrb	r3, [r3, #0]
1005161a:	2b01      	cmp	r3, #1
1005161c:	d901      	bls.n	10051622 <NVMDB_Init+0x1ee>
    {
      // ID already used.
      return NVMDB_STATUS_INVALID_ID;
1005161e:	2301      	movs	r3, #1
10051620:	e05c      	b.n	100516dc <NVMDB_Init+0x2a8>
    }

    DBInfo[id].start_address = NVM_LARGE_DB_STATIC_INFO[i].address;
10051622:	2413      	movs	r4, #19
10051624:	193b      	adds	r3, r7, r4
10051626:	781a      	ldrb	r2, [r3, #0]
10051628:	4830      	ldr	r0, [pc, #192]	@ (100516ec <NVMDB_Init+0x2b8>)
1005162a:	6979      	ldr	r1, [r7, #20]
1005162c:	000b      	movs	r3, r1
1005162e:	005b      	lsls	r3, r3, #1
10051630:	185b      	adds	r3, r3, r1
10051632:	009b      	lsls	r3, r3, #2
10051634:	5818      	ldr	r0, [r3, r0]
10051636:	492c      	ldr	r1, [pc, #176]	@ (100516e8 <NVMDB_Init+0x2b4>)
10051638:	0013      	movs	r3, r2
1005163a:	009b      	lsls	r3, r3, #2
1005163c:	189b      	adds	r3, r3, r2
1005163e:	009b      	lsls	r3, r3, #2
10051640:	5058      	str	r0, [r3, r1]
    DBInfo[id].end_address = NVM_LARGE_DB_STATIC_INFO[i].address + NVM_LARGE_DB_STATIC_INFO[i].size;
10051642:	492a      	ldr	r1, [pc, #168]	@ (100516ec <NVMDB_Init+0x2b8>)
10051644:	697a      	ldr	r2, [r7, #20]
10051646:	0013      	movs	r3, r2
10051648:	005b      	lsls	r3, r3, #1
1005164a:	189b      	adds	r3, r3, r2
1005164c:	009b      	lsls	r3, r3, #2
1005164e:	5859      	ldr	r1, [r3, r1]
10051650:	4826      	ldr	r0, [pc, #152]	@ (100516ec <NVMDB_Init+0x2b8>)
10051652:	697a      	ldr	r2, [r7, #20]
10051654:	0013      	movs	r3, r2
10051656:	005b      	lsls	r3, r3, #1
10051658:	189b      	adds	r3, r3, r2
1005165a:	009b      	lsls	r3, r3, #2
1005165c:	18c3      	adds	r3, r0, r3
1005165e:	3304      	adds	r3, #4
10051660:	881b      	ldrh	r3, [r3, #0]
10051662:	0018      	movs	r0, r3
10051664:	193b      	adds	r3, r7, r4
10051666:	781a      	ldrb	r2, [r3, #0]
10051668:	1809      	adds	r1, r1, r0
1005166a:	481f      	ldr	r0, [pc, #124]	@ (100516e8 <NVMDB_Init+0x2b4>)
1005166c:	0013      	movs	r3, r2
1005166e:	009b      	lsls	r3, r3, #2
10051670:	189b      	adds	r3, r3, r2
10051672:	009b      	lsls	r3, r3, #2
10051674:	18c3      	adds	r3, r0, r3
10051676:	3304      	adds	r3, #4
10051678:	6019      	str	r1, [r3, #0]
#if AUTO_CLEAN
    DBInfo[id].clean_threshold = NVM_LARGE_DB_STATIC_INFO[i].clean_threshold;
1005167a:	193b      	adds	r3, r7, r4
1005167c:	781a      	ldrb	r2, [r3, #0]
1005167e:	481b      	ldr	r0, [pc, #108]	@ (100516ec <NVMDB_Init+0x2b8>)
10051680:	6979      	ldr	r1, [r7, #20]
10051682:	000b      	movs	r3, r1
10051684:	005b      	lsls	r3, r3, #1
10051686:	185b      	adds	r3, r3, r1
10051688:	009b      	lsls	r3, r3, #2
1005168a:	18c3      	adds	r3, r0, r3
1005168c:	3308      	adds	r3, #8
1005168e:	8818      	ldrh	r0, [r3, #0]
10051690:	4915      	ldr	r1, [pc, #84]	@ (100516e8 <NVMDB_Init+0x2b4>)
10051692:	0013      	movs	r3, r2
10051694:	009b      	lsls	r3, r3, #2
10051696:	189b      	adds	r3, r3, r2
10051698:	009b      	lsls	r3, r3, #2
1005169a:	18cb      	adds	r3, r1, r3
1005169c:	3310      	adds	r3, #16
1005169e:	1c02      	adds	r2, r0, #0
100516a0:	801a      	strh	r2, [r3, #0]
#endif

    status = NVMDB_get_info(&DBInfo[id]);
100516a2:	193b      	adds	r3, r7, r4
100516a4:	781a      	ldrb	r2, [r3, #0]
100516a6:	0013      	movs	r3, r2
100516a8:	009b      	lsls	r3, r3, #2
100516aa:	189b      	adds	r3, r3, r2
100516ac:	009b      	lsls	r3, r3, #2
100516ae:	4a0e      	ldr	r2, [pc, #56]	@ (100516e8 <NVMDB_Init+0x2b4>)
100516b0:	189b      	adds	r3, r3, r2
100516b2:	2512      	movs	r5, #18
100516b4:	197c      	adds	r4, r7, r5
100516b6:	0018      	movs	r0, r3
100516b8:	f7fe feae 	bl	10050418 <NVMDB_get_info>
100516bc:	0003      	movs	r3, r0
100516be:	7023      	strb	r3, [r4, #0]
    if(status)
100516c0:	197b      	adds	r3, r7, r5
100516c2:	781b      	ldrb	r3, [r3, #0]
100516c4:	2b00      	cmp	r3, #0
100516c6:	d002      	beq.n	100516ce <NVMDB_Init+0x29a>
    {
      return status;
100516c8:	197b      	adds	r3, r7, r5
100516ca:	781b      	ldrb	r3, [r3, #0]
100516cc:	e006      	b.n	100516dc <NVMDB_Init+0x2a8>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
100516ce:	697b      	ldr	r3, [r7, #20]
100516d0:	3301      	adds	r3, #1
100516d2:	617b      	str	r3, [r7, #20]
100516d4:	697b      	ldr	r3, [r7, #20]
100516d6:	2b01      	cmp	r3, #1
100516d8:	dd87      	ble.n	100515ea <NVMDB_Init+0x1b6>
    }
  }

  return NVMDB_STATUS_OK;
100516da:	2300      	movs	r3, #0
}
100516dc:	0018      	movs	r0, r3
100516de:	46bd      	mov	sp, r7
100516e0:	b008      	add	sp, #32
100516e2:	bdb0      	pop	{r4, r5, r7, pc}
100516e4:	200027c8 	.word	0x200027c8
100516e8:	2000279c 	.word	0x2000279c
100516ec:	1006a134 	.word	0x1006a134

100516f0 <NVMDB_HandleInit>:
 *             through NVM_SMALL_DB_STATIC_INFO and NVM_LARGE_DB_STATIC_INFO variables.
 * @param[out] handle_p Pointer to the handle to be initialized.
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_HandleInit(NVMDB_IdType NVMDB_id, NVMDB_HandleType *handle_p)
{
100516f0:	b580      	push	{r7, lr}
100516f2:	b082      	sub	sp, #8
100516f4:	af00      	add	r7, sp, #0
100516f6:	0002      	movs	r2, r0
100516f8:	6039      	str	r1, [r7, #0]
100516fa:	1dfb      	adds	r3, r7, #7
100516fc:	701a      	strb	r2, [r3, #0]
  if(NVMDB_id >= NUM_DB)
100516fe:	1dfb      	adds	r3, r7, #7
10051700:	781b      	ldrb	r3, [r3, #0]
10051702:	2b01      	cmp	r3, #1
10051704:	d901      	bls.n	1005170a <NVMDB_HandleInit+0x1a>
  {
    return NVMDB_STATUS_INVALID_ID;
10051706:	2301      	movs	r3, #1
10051708:	e020      	b.n	1005174c <NVMDB_HandleInit+0x5c>
  }

  handle_p->address = DBInfo[NVMDB_id].start_address;
1005170a:	1dfb      	adds	r3, r7, #7
1005170c:	781a      	ldrb	r2, [r3, #0]
1005170e:	4911      	ldr	r1, [pc, #68]	@ (10051754 <NVMDB_HandleInit+0x64>)
10051710:	0013      	movs	r3, r2
10051712:	009b      	lsls	r3, r3, #2
10051714:	189b      	adds	r3, r3, r2
10051716:	009b      	lsls	r3, r3, #2
10051718:	585a      	ldr	r2, [r3, r1]
1005171a:	683b      	ldr	r3, [r7, #0]
1005171c:	605a      	str	r2, [r3, #4]
  handle_p->end_address = DBInfo[NVMDB_id].end_address;
1005171e:	1dfb      	adds	r3, r7, #7
10051720:	781a      	ldrb	r2, [r3, #0]
10051722:	490c      	ldr	r1, [pc, #48]	@ (10051754 <NVMDB_HandleInit+0x64>)
10051724:	0013      	movs	r3, r2
10051726:	009b      	lsls	r3, r3, #2
10051728:	189b      	adds	r3, r3, r2
1005172a:	009b      	lsls	r3, r3, #2
1005172c:	18cb      	adds	r3, r1, r3
1005172e:	3304      	adds	r3, #4
10051730:	681a      	ldr	r2, [r3, #0]
10051732:	683b      	ldr	r3, [r7, #0]
10051734:	609a      	str	r2, [r3, #8]
  handle_p->first_read = TRUE;
10051736:	683b      	ldr	r3, [r7, #0]
10051738:	2201      	movs	r2, #1
1005173a:	731a      	strb	r2, [r3, #12]
  handle_p->id = NVMDB_id;
1005173c:	683b      	ldr	r3, [r7, #0]
1005173e:	1dfa      	adds	r2, r7, #7
10051740:	7812      	ldrb	r2, [r2, #0]
10051742:	701a      	strb	r2, [r3, #0]
  handle_p->cache = FALSE;
10051744:	683b      	ldr	r3, [r7, #0]
10051746:	2200      	movs	r2, #0
10051748:	735a      	strb	r2, [r3, #13]

  return NVMDB_STATUS_OK;
1005174a:	2300      	movs	r3, #0
}
1005174c:	0018      	movs	r0, r3
1005174e:	46bd      	mov	sp, r7
10051750:	b002      	add	sp, #8
10051752:	bd80      	pop	{r7, pc}
10051754:	2000279c 	.word	0x2000279c

10051758 <NVMDB_ReadNextRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadNextRecord(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
10051758:	b590      	push	{r4, r7, lr}
1005175a:	b089      	sub	sp, #36	@ 0x24
1005175c:	af04      	add	r7, sp, #16
1005175e:	60f8      	str	r0, [r7, #12]
10051760:	0008      	movs	r0, r1
10051762:	0011      	movs	r1, r2
10051764:	607b      	str	r3, [r7, #4]
10051766:	230b      	movs	r3, #11
10051768:	18fb      	adds	r3, r7, r3
1005176a:	1c02      	adds	r2, r0, #0
1005176c:	701a      	strb	r2, [r3, #0]
1005176e:	2308      	movs	r3, #8
10051770:	18fb      	adds	r3, r7, r3
10051772:	1c0a      	adds	r2, r1, #0
10051774:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
10051776:	68fb      	ldr	r3, [r7, #12]
10051778:	781b      	ldrb	r3, [r3, #0]
1005177a:	0019      	movs	r1, r3
1005177c:	4a12      	ldr	r2, [pc, #72]	@ (100517c8 <NVMDB_ReadNextRecord+0x70>)
1005177e:	000b      	movs	r3, r1
10051780:	009b      	lsls	r3, r3, #2
10051782:	185b      	adds	r3, r3, r1
10051784:	009b      	lsls	r3, r3, #2
10051786:	18d3      	adds	r3, r2, r3
10051788:	330e      	adds	r3, #14
1005178a:	781b      	ldrb	r3, [r3, #0]
1005178c:	2b00      	cmp	r3, #0
1005178e:	d001      	beq.n	10051794 <NVMDB_ReadNextRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
10051790:	230a      	movs	r3, #10
10051792:	e015      	b.n	100517c0 <NVMDB_ReadNextRecord+0x68>
  }

  return ReadNextRecordNoLock(handle_p, record_type, data_offset, data_p, max_size, size_p, 0, NULL);
10051794:	687c      	ldr	r4, [r7, #4]
10051796:	2308      	movs	r3, #8
10051798:	18fb      	adds	r3, r7, r3
1005179a:	881a      	ldrh	r2, [r3, #0]
1005179c:	230b      	movs	r3, #11
1005179e:	18fb      	adds	r3, r7, r3
100517a0:	7819      	ldrb	r1, [r3, #0]
100517a2:	68f8      	ldr	r0, [r7, #12]
100517a4:	2300      	movs	r3, #0
100517a6:	9303      	str	r3, [sp, #12]
100517a8:	2300      	movs	r3, #0
100517aa:	9302      	str	r3, [sp, #8]
100517ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100517ae:	9301      	str	r3, [sp, #4]
100517b0:	2320      	movs	r3, #32
100517b2:	18fb      	adds	r3, r7, r3
100517b4:	881b      	ldrh	r3, [r3, #0]
100517b6:	9300      	str	r3, [sp, #0]
100517b8:	0023      	movs	r3, r4
100517ba:	f7fe fef9 	bl	100505b0 <ReadNextRecordNoLock>
100517be:	0003      	movs	r3, r0
}
100517c0:	0018      	movs	r0, r3
100517c2:	46bd      	mov	sp, r7
100517c4:	b005      	add	sp, #20
100517c6:	bd90      	pop	{r4, r7, pc}
100517c8:	2000279c 	.word	0x2000279c

100517cc <NVMDB_ReadCurrentRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
100517cc:	b590      	push	{r4, r7, lr}
100517ce:	b087      	sub	sp, #28
100517d0:	af02      	add	r7, sp, #8
100517d2:	60f8      	str	r0, [r7, #12]
100517d4:	0008      	movs	r0, r1
100517d6:	607a      	str	r2, [r7, #4]
100517d8:	0019      	movs	r1, r3
100517da:	230a      	movs	r3, #10
100517dc:	18fb      	adds	r3, r7, r3
100517de:	1c02      	adds	r2, r0, #0
100517e0:	801a      	strh	r2, [r3, #0]
100517e2:	2308      	movs	r3, #8
100517e4:	18fb      	adds	r3, r7, r3
100517e6:	1c0a      	adds	r2, r1, #0
100517e8:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
100517ea:	68fb      	ldr	r3, [r7, #12]
100517ec:	781b      	ldrb	r3, [r3, #0]
100517ee:	0019      	movs	r1, r3
100517f0:	4a0f      	ldr	r2, [pc, #60]	@ (10051830 <NVMDB_ReadCurrentRecord+0x64>)
100517f2:	000b      	movs	r3, r1
100517f4:	009b      	lsls	r3, r3, #2
100517f6:	185b      	adds	r3, r3, r1
100517f8:	009b      	lsls	r3, r3, #2
100517fa:	18d3      	adds	r3, r2, r3
100517fc:	330e      	adds	r3, #14
100517fe:	781b      	ldrb	r3, [r3, #0]
10051800:	2b00      	cmp	r3, #0
10051802:	d001      	beq.n	10051808 <NVMDB_ReadCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
10051804:	230a      	movs	r3, #10
10051806:	e00f      	b.n	10051828 <NVMDB_ReadCurrentRecord+0x5c>
  }

  return ReadCurrentRecordNoLock(handle_p, data_offset, data_p, max_size, size_p, 0);
10051808:	2308      	movs	r3, #8
1005180a:	18fb      	adds	r3, r7, r3
1005180c:	881c      	ldrh	r4, [r3, #0]
1005180e:	687a      	ldr	r2, [r7, #4]
10051810:	230a      	movs	r3, #10
10051812:	18fb      	adds	r3, r7, r3
10051814:	8819      	ldrh	r1, [r3, #0]
10051816:	68f8      	ldr	r0, [r7, #12]
10051818:	2300      	movs	r3, #0
1005181a:	9301      	str	r3, [sp, #4]
1005181c:	6a3b      	ldr	r3, [r7, #32]
1005181e:	9300      	str	r3, [sp, #0]
10051820:	0023      	movs	r3, r4
10051822:	f7ff f81c 	bl	1005085e <ReadCurrentRecordNoLock>
10051826:	0003      	movs	r3, r0
}
10051828:	0018      	movs	r0, r3
1005182a:	46bd      	mov	sp, r7
1005182c:	b005      	add	sp, #20
1005182e:	bd90      	pop	{r4, r7, pc}
10051830:	2000279c 	.word	0x2000279c

10051834 <NVMDB_AppendRecord>:
 * @param      header_length Length of bytes in data.
 * @param[in]  data Data to be stored inside the record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_AppendRecord(NVMDB_HandleType *handle_p, uint8_t record_type, uint16_t header_length, const void *header, uint16_t data_length, const void *data)
{
10051834:	b5f0      	push	{r4, r5, r6, r7, lr}
10051836:	46c6      	mov	lr, r8
10051838:	b500      	push	{lr}
1005183a:	b088      	sub	sp, #32
1005183c:	af02      	add	r7, sp, #8
1005183e:	60f8      	str	r0, [r7, #12]
10051840:	0008      	movs	r0, r1
10051842:	0011      	movs	r1, r2
10051844:	607b      	str	r3, [r7, #4]
10051846:	230b      	movs	r3, #11
10051848:	001c      	movs	r4, r3
1005184a:	18fb      	adds	r3, r7, r3
1005184c:	1c02      	adds	r2, r0, #0
1005184e:	701a      	strb	r2, [r3, #0]
10051850:	2008      	movs	r0, #8
10051852:	183b      	adds	r3, r7, r0
10051854:	1c0a      	adds	r2, r1, #0
10051856:	801a      	strh	r2, [r3, #0]
  }

success:

#else /* NVM_CACHE */
  status = NVMDB_AppendRecordNoCache(handle_p, record_type, header_length, header, data_length, data);
10051858:	2617      	movs	r6, #23
1005185a:	46b0      	mov	r8, r6
1005185c:	44b8      	add	r8, r7
1005185e:	687d      	ldr	r5, [r7, #4]
10051860:	183b      	adds	r3, r7, r0
10051862:	881a      	ldrh	r2, [r3, #0]
10051864:	0023      	movs	r3, r4
10051866:	18fb      	adds	r3, r7, r3
10051868:	7819      	ldrb	r1, [r3, #0]
1005186a:	68f8      	ldr	r0, [r7, #12]
1005186c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1005186e:	9301      	str	r3, [sp, #4]
10051870:	2328      	movs	r3, #40	@ 0x28
10051872:	2408      	movs	r4, #8
10051874:	191b      	adds	r3, r3, r4
10051876:	19db      	adds	r3, r3, r7
10051878:	881b      	ldrh	r3, [r3, #0]
1005187a:	9300      	str	r3, [sp, #0]
1005187c:	002b      	movs	r3, r5
1005187e:	f7ff fd19 	bl	100512b4 <NVMDB_AppendRecordNoCache>
10051882:	0003      	movs	r3, r0
10051884:	4642      	mov	r2, r8
10051886:	7013      	strb	r3, [r2, #0]

  if(status != NVMDB_STATUS_OK)
10051888:	19bb      	adds	r3, r7, r6
1005188a:	781b      	ldrb	r3, [r3, #0]
1005188c:	2b00      	cmp	r3, #0
1005188e:	d002      	beq.n	10051896 <NVMDB_AppendRecord+0x62>
  {
    return status;
10051890:	19bb      	adds	r3, r7, r6
10051892:	781b      	ldrb	r3, [r3, #0]
10051894:	e02c      	b.n	100518f0 <NVMDB_AppendRecord+0xbc>
  }

#endif

  /* Take into account that the free space is reduced, even if the record is actually in cache.  */
  DBInfo[handle_p->id].free_space -= ROUND4_R(header_length + data_length) + RECORD_HEADER_SIZE;
10051896:	68fb      	ldr	r3, [r7, #12]
10051898:	781b      	ldrb	r3, [r3, #0]
1005189a:	0019      	movs	r1, r3
1005189c:	4a17      	ldr	r2, [pc, #92]	@ (100518fc <NVMDB_AppendRecord+0xc8>)
1005189e:	000b      	movs	r3, r1
100518a0:	009b      	lsls	r3, r3, #2
100518a2:	185b      	adds	r3, r3, r1
100518a4:	009b      	lsls	r3, r3, #2
100518a6:	18d3      	adds	r3, r2, r3
100518a8:	330c      	adds	r3, #12
100518aa:	881a      	ldrh	r2, [r3, #0]
100518ac:	2308      	movs	r3, #8
100518ae:	0018      	movs	r0, r3
100518b0:	18f9      	adds	r1, r7, r3
100518b2:	2328      	movs	r3, #40	@ 0x28
100518b4:	181b      	adds	r3, r3, r0
100518b6:	19db      	adds	r3, r3, r7
100518b8:	8809      	ldrh	r1, [r1, #0]
100518ba:	881b      	ldrh	r3, [r3, #0]
100518bc:	18cb      	adds	r3, r1, r3
100518be:	b29b      	uxth	r3, r3
100518c0:	3b01      	subs	r3, #1
100518c2:	b29b      	uxth	r3, r3
100518c4:	b21b      	sxth	r3, r3
100518c6:	2103      	movs	r1, #3
100518c8:	430b      	orrs	r3, r1
100518ca:	b21b      	sxth	r3, r3
100518cc:	b29b      	uxth	r3, r3
100518ce:	1ad3      	subs	r3, r2, r3
100518d0:	b29b      	uxth	r3, r3
100518d2:	68fa      	ldr	r2, [r7, #12]
100518d4:	7812      	ldrb	r2, [r2, #0]
100518d6:	0011      	movs	r1, r2
100518d8:	3b05      	subs	r3, #5
100518da:	b298      	uxth	r0, r3
100518dc:	4a07      	ldr	r2, [pc, #28]	@ (100518fc <NVMDB_AppendRecord+0xc8>)
100518de:	000b      	movs	r3, r1
100518e0:	009b      	lsls	r3, r3, #2
100518e2:	185b      	adds	r3, r3, r1
100518e4:	009b      	lsls	r3, r3, #2
100518e6:	18d3      	adds	r3, r2, r3
100518e8:	330c      	adds	r3, #12
100518ea:	1c02      	adds	r2, r0, #0
100518ec:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
100518ee:	2300      	movs	r3, #0
}
100518f0:	0018      	movs	r0, r3
100518f2:	46bd      	mov	sp, r7
100518f4:	b006      	add	sp, #24
100518f6:	bc80      	pop	{r7}
100518f8:	46b8      	mov	r8, r7
100518fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100518fc:	2000279c 	.word	0x2000279c

10051900 <NVMDB_DeleteRecord>:
 *
 * @param[in,out] handle_p Handle pointing to the record to be deleted.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_DeleteRecord(const NVMDB_HandleType *handle_p)
{
10051900:	b580      	push	{r7, lr}
10051902:	b082      	sub	sp, #8
10051904:	af00      	add	r7, sp, #0
10051906:	6078      	str	r0, [r7, #4]
  /* No time to complete the operation immediately.  */
  return ScheduleDeleteOperation(handle_p->id, handle_p->address);

#else /* NVM_CACHE */

  return NVMDB_DeleteRecordNoCache(handle_p);
10051908:	687b      	ldr	r3, [r7, #4]
1005190a:	0018      	movs	r0, r3
1005190c:	f7ff f828 	bl	10050960 <NVMDB_DeleteRecordNoCache>
10051910:	0003      	movs	r3, r0

#endif
}
10051912:	0018      	movs	r0, r3
10051914:	46bd      	mov	sp, r7
10051916:	b002      	add	sp, #8
10051918:	bd80      	pop	{r7, pc}
	...

1005191c <NVMDB_Erase>:
 *
 * @param      NVMDB_id The ID of the record to be erased.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Erase(NVMDB_IdType NVMDB_id)
{
1005191c:	b5b0      	push	{r4, r5, r7, lr}
1005191e:	b08c      	sub	sp, #48	@ 0x30
10051920:	af00      	add	r7, sp, #0
10051922:	0002      	movs	r2, r0
10051924:	1dfb      	adds	r3, r7, #7
10051926:	701a      	strb	r2, [r3, #0]
  {
    return NVMDB_STATUS_CACHE_OP_PENDING;
  }
#endif

  type = GetDBType(NVMDB_id, &smallDBContainer_p);
10051928:	252b      	movs	r5, #43	@ 0x2b
1005192a:	197c      	adds	r4, r7, r5
1005192c:	2318      	movs	r3, #24
1005192e:	18fa      	adds	r2, r7, r3
10051930:	1dfb      	adds	r3, r7, #7
10051932:	781b      	ldrb	r3, [r3, #0]
10051934:	0011      	movs	r1, r2
10051936:	0018      	movs	r0, r3
10051938:	f7ff fbc6 	bl	100510c8 <GetDBType>
1005193c:	0003      	movs	r3, r0
1005193e:	7023      	strb	r3, [r4, #0]

  if(type == LARGE_DB)
10051940:	197b      	adds	r3, r7, r5
10051942:	781b      	ldrb	r3, [r3, #0]
10051944:	2b02      	cmp	r3, #2
10051946:	d146      	bne.n	100519d6 <NVMDB_Erase+0xba>
  {
    uint8_t page_num_start, num_pages;
    uint32_t start_address = DBInfo[NVMDB_id].start_address;
10051948:	1dfb      	adds	r3, r7, #7
1005194a:	781a      	ldrb	r2, [r3, #0]
1005194c:	4942      	ldr	r1, [pc, #264]	@ (10051a58 <NVMDB_Erase+0x13c>)
1005194e:	0013      	movs	r3, r2
10051950:	009b      	lsls	r3, r3, #2
10051952:	189b      	adds	r3, r3, r2
10051954:	009b      	lsls	r3, r3, #2
10051956:	585b      	ldr	r3, [r3, r1]
10051958:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t end_address = DBInfo[NVMDB_id].end_address;
1005195a:	1dfb      	adds	r3, r7, #7
1005195c:	781a      	ldrb	r2, [r3, #0]
1005195e:	493e      	ldr	r1, [pc, #248]	@ (10051a58 <NVMDB_Erase+0x13c>)
10051960:	0013      	movs	r3, r2
10051962:	009b      	lsls	r3, r3, #2
10051964:	189b      	adds	r3, r3, r2
10051966:	009b      	lsls	r3, r3, #2
10051968:	18cb      	adds	r3, r1, r3
1005196a:	3304      	adds	r3, #4
1005196c:	681b      	ldr	r3, [r3, #0]
1005196e:	623b      	str	r3, [r7, #32]

    page_num_start = (start_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
10051970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051972:	4a3a      	ldr	r2, [pc, #232]	@ (10051a5c <NVMDB_Erase+0x140>)
10051974:	4694      	mov	ip, r2
10051976:	4463      	add	r3, ip
10051978:	0ada      	lsrs	r2, r3, #11
1005197a:	201f      	movs	r0, #31
1005197c:	183b      	adds	r3, r7, r0
1005197e:	701a      	strb	r2, [r3, #0]
    num_pages = (ROUNDPAGE_R(end_address) - start_address) / PAGE_SIZE;
10051980:	6a3b      	ldr	r3, [r7, #32]
10051982:	3b01      	subs	r3, #1
10051984:	4a36      	ldr	r2, [pc, #216]	@ (10051a60 <NVMDB_Erase+0x144>)
10051986:	431a      	orrs	r2, r3
10051988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1005198a:	1ad3      	subs	r3, r2, r3
1005198c:	3301      	adds	r3, #1
1005198e:	0ada      	lsrs	r2, r3, #11
10051990:	241e      	movs	r4, #30
10051992:	193b      	adds	r3, r7, r4
10051994:	701a      	strb	r2, [r3, #0]
      return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
    }

#else

    NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
10051996:	210c      	movs	r1, #12
10051998:	187b      	adds	r3, r7, r1
1005199a:	2200      	movs	r2, #0
1005199c:	601a      	str	r2, [r3, #0]
1005199e:	183b      	adds	r3, r7, r0
100519a0:	781a      	ldrb	r2, [r3, #0]
100519a2:	187b      	adds	r3, r7, r1
100519a4:	605a      	str	r2, [r3, #4]
100519a6:	193b      	adds	r3, r7, r4
100519a8:	781a      	ldrb	r2, [r3, #0]
100519aa:	187b      	adds	r3, r7, r1
100519ac:	609a      	str	r2, [r3, #8]
100519ae:	2308      	movs	r3, #8
100519b0:	18fa      	adds	r2, r7, r3
100519b2:	187b      	adds	r3, r7, r1
100519b4:	0011      	movs	r1, r2
100519b6:	0018      	movs	r0, r3
100519b8:	f7f6 ff8e 	bl	100488d8 <HAL_FLASHEx_Erase>

#endif

    NVMDB_get_info(&DBInfo[NVMDB_id]);
100519bc:	1dfb      	adds	r3, r7, #7
100519be:	781a      	ldrb	r2, [r3, #0]
100519c0:	0013      	movs	r3, r2
100519c2:	009b      	lsls	r3, r3, #2
100519c4:	189b      	adds	r3, r3, r2
100519c6:	009b      	lsls	r3, r3, #2
100519c8:	4a23      	ldr	r2, [pc, #140]	@ (10051a58 <NVMDB_Erase+0x13c>)
100519ca:	189b      	adds	r3, r3, r2
100519cc:	0018      	movs	r0, r3
100519ce:	f7fe fd23 	bl	10050418 <NVMDB_get_info>

    return NVMDB_STATUS_OK;
100519d2:	2300      	movs	r3, #0
100519d4:	e03b      	b.n	10051a4e <NVMDB_Erase+0x132>
  }

  if(type == SMALL_DB)
100519d6:	232b      	movs	r3, #43	@ 0x2b
100519d8:	18fb      	adds	r3, r7, r3
100519da:	781b      	ldrb	r3, [r3, #0]
100519dc:	2b01      	cmp	r3, #1
100519de:	d135      	bne.n	10051a4c <NVMDB_Erase+0x130>
  {

    status = EraseSmallDB(NVMDB_id, smallDBContainer_p);
100519e0:	69ba      	ldr	r2, [r7, #24]
100519e2:	252a      	movs	r5, #42	@ 0x2a
100519e4:	197c      	adds	r4, r7, r5
100519e6:	1dfb      	adds	r3, r7, #7
100519e8:	781b      	ldrb	r3, [r3, #0]
100519ea:	0011      	movs	r1, r2
100519ec:	0018      	movs	r0, r3
100519ee:	f7ff fbd9 	bl	100511a4 <EraseSmallDB>
100519f2:	0003      	movs	r3, r0
100519f4:	7023      	strb	r3, [r4, #0]

    if(status == NVMDB_STATUS_OK)
100519f6:	197b      	adds	r3, r7, r5
100519f8:	781b      	ldrb	r3, [r3, #0]
100519fa:	2b00      	cmp	r3, #0
100519fc:	d122      	bne.n	10051a44 <NVMDB_Erase+0x128>
    {
      // Remove any operations in cache for all the DBs in the page. This means write and delete operations.
      // Cache operations for all the DBs in the same page have been executed by LoadDBToRAM().
      for(int i = 0; i < smallDBContainer_p->num_db; i++)
100519fe:	2300      	movs	r3, #0
10051a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
10051a02:	e019      	b.n	10051a38 <NVMDB_Erase+0x11c>
      {
        NVMDB_IdType id = smallDBContainer_p->dbs[i].id;
10051a04:	69bb      	ldr	r3, [r7, #24]
10051a06:	6899      	ldr	r1, [r3, #8]
10051a08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10051a0a:	0013      	movs	r3, r2
10051a0c:	005b      	lsls	r3, r3, #1
10051a0e:	189b      	adds	r3, r3, r2
10051a10:	009b      	lsls	r3, r3, #2
10051a12:	18ca      	adds	r2, r1, r3
10051a14:	2129      	movs	r1, #41	@ 0x29
10051a16:	187b      	adds	r3, r7, r1
10051a18:	7812      	ldrb	r2, [r2, #0]
10051a1a:	701a      	strb	r2, [r3, #0]
#if NVM_CACHE
        RemoveCacheOp(id);
#endif
        NVMDB_get_info(&DBInfo[id]);
10051a1c:	187b      	adds	r3, r7, r1
10051a1e:	781a      	ldrb	r2, [r3, #0]
10051a20:	0013      	movs	r3, r2
10051a22:	009b      	lsls	r3, r3, #2
10051a24:	189b      	adds	r3, r3, r2
10051a26:	009b      	lsls	r3, r3, #2
10051a28:	4a0b      	ldr	r2, [pc, #44]	@ (10051a58 <NVMDB_Erase+0x13c>)
10051a2a:	189b      	adds	r3, r3, r2
10051a2c:	0018      	movs	r0, r3
10051a2e:	f7fe fcf3 	bl	10050418 <NVMDB_get_info>
      for(int i = 0; i < smallDBContainer_p->num_db; i++)
10051a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10051a34:	3301      	adds	r3, #1
10051a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
10051a38:	69bb      	ldr	r3, [r7, #24]
10051a3a:	791b      	ldrb	r3, [r3, #4]
10051a3c:	001a      	movs	r2, r3
10051a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10051a40:	4293      	cmp	r3, r2
10051a42:	dbdf      	blt.n	10051a04 <NVMDB_Erase+0xe8>
#if NVM_CACHE
      return ScheduleSmallDBEraseOperation(NVMDB_id, smallDBContainer_p);
#endif
    }

    return status;
10051a44:	232a      	movs	r3, #42	@ 0x2a
10051a46:	18fb      	adds	r3, r7, r3
10051a48:	781b      	ldrb	r3, [r3, #0]
10051a4a:	e000      	b.n	10051a4e <NVMDB_Erase+0x132>
  }

  return NVMDB_STATUS_INVALID_ID;
10051a4c:	2301      	movs	r3, #1
}
10051a4e:	0018      	movs	r0, r3
10051a50:	46bd      	mov	sp, r7
10051a52:	b00c      	add	sp, #48	@ 0x30
10051a54:	bdb0      	pop	{r4, r5, r7, pc}
10051a56:	46c0      	nop			@ (mov r8, r8)
10051a58:	2000279c 	.word	0x2000279c
10051a5c:	effc0000 	.word	0xeffc0000
10051a60:	000007ff 	.word	0x000007ff

10051a64 <NVMDB_CleanDB>:
 *
 * @param      NVMDB_id The ID of the record to be cleaned.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_CleanDB(NVMDB_IdType NVMDB_id)
{
10051a64:	b5b0      	push	{r4, r5, r7, lr}
10051a66:	b084      	sub	sp, #16
10051a68:	af00      	add	r7, sp, #0
10051a6a:	0002      	movs	r2, r0
10051a6c:	1dfb      	adds	r3, r7, #7
10051a6e:	701a      	strb	r2, [r3, #0]
  const NVMDB_SmallDBContainerType *smallDBContainer;
  uint8_t type;

  type = GetDBType(NVMDB_id, &smallDBContainer);
10051a70:	250f      	movs	r5, #15
10051a72:	197c      	adds	r4, r7, r5
10051a74:	2308      	movs	r3, #8
10051a76:	18fa      	adds	r2, r7, r3
10051a78:	1dfb      	adds	r3, r7, #7
10051a7a:	781b      	ldrb	r3, [r3, #0]
10051a7c:	0011      	movs	r1, r2
10051a7e:	0018      	movs	r0, r3
10051a80:	f7ff fb22 	bl	100510c8 <GetDBType>
10051a84:	0003      	movs	r3, r0
10051a86:	7023      	strb	r3, [r4, #0]
  if(type == LARGE_DB)
10051a88:	197b      	adds	r3, r7, r5
10051a8a:	781b      	ldrb	r3, [r3, #0]
10051a8c:	2b02      	cmp	r3, #2
10051a8e:	d106      	bne.n	10051a9e <NVMDB_CleanDB+0x3a>
  {
    return CleanLargeDB(NVMDB_id);
10051a90:	1dfb      	adds	r3, r7, #7
10051a92:	781b      	ldrb	r3, [r3, #0]
10051a94:	0018      	movs	r0, r3
10051a96:	f7ff f92f 	bl	10050cf8 <CleanLargeDB>
10051a9a:	0003      	movs	r3, r0
10051a9c:	e00b      	b.n	10051ab6 <NVMDB_CleanDB+0x52>
  }
  if(type == SMALL_DB)
10051a9e:	230f      	movs	r3, #15
10051aa0:	18fb      	adds	r3, r7, r3
10051aa2:	781b      	ldrb	r3, [r3, #0]
10051aa4:	2b01      	cmp	r3, #1
10051aa6:	d105      	bne.n	10051ab4 <NVMDB_CleanDB+0x50>
  {
    return CleanPage(smallDBContainer);
10051aa8:	68bb      	ldr	r3, [r7, #8]
10051aaa:	0018      	movs	r0, r3
10051aac:	f7ff fa02 	bl	10050eb4 <CleanPage>
10051ab0:	0003      	movs	r3, r0
10051ab2:	e000      	b.n	10051ab6 <NVMDB_CleanDB+0x52>
  }

  return NVMDB_STATUS_INVALID_ID;
10051ab4:	2301      	movs	r3, #1
}
10051ab6:	0018      	movs	r0, r3
10051ab8:	46bd      	mov	sp, r7
10051aba:	b004      	add	sp, #16
10051abc:	bdb0      	pop	{r4, r5, r7, pc}
	...

10051ac0 <NVMDB_Tick>:
 *             The value NVMDB_STATUS_NOT_ENOUGH_TIME indicates that some operations
 *             cannot be performed because there is not enough time. Other values
 *             indicates unexpected conditions of the database.
 */
NVMDB_status_t NVMDB_Tick(void)
{
10051ac0:	b590      	push	{r4, r7, lr}
10051ac2:	b083      	sub	sp, #12
10051ac4:	af00      	add	r7, sp, #0
#endif

#endif /* NVM_CACHE */

#if AUTO_CLEAN
  dirty_db_id = NVMDB_CleanCheck();
10051ac6:	1dfc      	adds	r4, r7, #7
10051ac8:	f000 f816 	bl	10051af8 <NVMDB_CleanCheck>
10051acc:	0003      	movs	r3, r0
10051ace:	7023      	strb	r3, [r4, #0]
  if(dirty_db_id >= 0)
10051ad0:	1dfb      	adds	r3, r7, #7
10051ad2:	781b      	ldrb	r3, [r3, #0]
10051ad4:	2b7f      	cmp	r3, #127	@ 0x7f
10051ad6:	d808      	bhi.n	10051aea <NVMDB_Tick+0x2a>
  {
    NVMDB_CleanDB((NVMDB_IdType)dirty_db_id);
10051ad8:	1dfb      	adds	r3, r7, #7
10051ada:	781b      	ldrb	r3, [r3, #0]
10051adc:	0018      	movs	r0, r3
10051ade:	f7ff ffc1 	bl	10051a64 <NVMDB_CleanDB>
    PRINTF("Handle possibly not valid anymore!\r\n");
10051ae2:	4b04      	ldr	r3, [pc, #16]	@ (10051af4 <NVMDB_Tick+0x34>)
10051ae4:	0018      	movs	r0, r3
10051ae6:	f016 fd03 	bl	100684f0 <puts>
  }
#endif

  return NVMDB_STATUS_OK;
10051aea:	2300      	movs	r3, #0
}
10051aec:	0018      	movs	r0, r3
10051aee:	46bd      	mov	sp, r7
10051af0:	b003      	add	sp, #12
10051af2:	bd90      	pop	{r4, r7, pc}
10051af4:	100698c0 	.word	0x100698c0

10051af8 <NVMDB_CleanCheck>:

#if AUTO_CLEAN
// Checks if it is a good time to perform a clean operation
static int8_t NVMDB_CleanCheck(void)
{
10051af8:	b580      	push	{r7, lr}
10051afa:	b082      	sub	sp, #8
10051afc:	af00      	add	r7, sp, #0
  static int8_t db_start_index = 0;
  uint8_t i = db_start_index;
10051afe:	4b2b      	ldr	r3, [pc, #172]	@ (10051bac <NVMDB_CleanCheck+0xb4>)
10051b00:	2200      	movs	r2, #0
10051b02:	569a      	ldrsb	r2, [r3, r2]
10051b04:	1dfb      	adds	r3, r7, #7
10051b06:	701a      	strb	r2, [r3, #0]

  do
  {
    if(DBInfo[i].invalid_records)
10051b08:	1dfb      	adds	r3, r7, #7
10051b0a:	781a      	ldrb	r2, [r3, #0]
10051b0c:	4928      	ldr	r1, [pc, #160]	@ (10051bb0 <NVMDB_CleanCheck+0xb8>)
10051b0e:	0013      	movs	r3, r2
10051b10:	009b      	lsls	r3, r3, #2
10051b12:	189b      	adds	r3, r3, r2
10051b14:	009b      	lsls	r3, r3, #2
10051b16:	18cb      	adds	r3, r1, r3
10051b18:	330a      	adds	r3, #10
10051b1a:	881b      	ldrh	r3, [r3, #0]
10051b1c:	2b00      	cmp	r3, #0
10051b1e:	d028      	beq.n	10051b72 <NVMDB_CleanCheck+0x7a>
    {
      if(DBInfo[i].free_space < DBInfo[i].clean_threshold)
10051b20:	1dfb      	adds	r3, r7, #7
10051b22:	781a      	ldrb	r2, [r3, #0]
10051b24:	4922      	ldr	r1, [pc, #136]	@ (10051bb0 <NVMDB_CleanCheck+0xb8>)
10051b26:	0013      	movs	r3, r2
10051b28:	009b      	lsls	r3, r3, #2
10051b2a:	189b      	adds	r3, r3, r2
10051b2c:	009b      	lsls	r3, r3, #2
10051b2e:	18cb      	adds	r3, r1, r3
10051b30:	330c      	adds	r3, #12
10051b32:	8819      	ldrh	r1, [r3, #0]
10051b34:	1dfb      	adds	r3, r7, #7
10051b36:	781a      	ldrb	r2, [r3, #0]
10051b38:	481d      	ldr	r0, [pc, #116]	@ (10051bb0 <NVMDB_CleanCheck+0xb8>)
10051b3a:	0013      	movs	r3, r2
10051b3c:	009b      	lsls	r3, r3, #2
10051b3e:	189b      	adds	r3, r3, r2
10051b40:	009b      	lsls	r3, r3, #2
10051b42:	18c3      	adds	r3, r0, r3
10051b44:	3310      	adds	r3, #16
10051b46:	881b      	ldrh	r3, [r3, #0]
10051b48:	4299      	cmp	r1, r3
10051b4a:	d212      	bcs.n	10051b72 <NVMDB_CleanCheck+0x7a>
      {
        // Next time do not start from this db.
        // There may be time to clean another one if this one has not been successfully cleaned.
        db_start_index = i + 1;
10051b4c:	1dfb      	adds	r3, r7, #7
10051b4e:	781b      	ldrb	r3, [r3, #0]
10051b50:	3301      	adds	r3, #1
10051b52:	b2db      	uxtb	r3, r3
10051b54:	b25a      	sxtb	r2, r3
10051b56:	4b15      	ldr	r3, [pc, #84]	@ (10051bac <NVMDB_CleanCheck+0xb4>)
10051b58:	701a      	strb	r2, [r3, #0]
        if(db_start_index == NUM_DB)
10051b5a:	4b14      	ldr	r3, [pc, #80]	@ (10051bac <NVMDB_CleanCheck+0xb4>)
10051b5c:	781b      	ldrb	r3, [r3, #0]
10051b5e:	b25b      	sxtb	r3, r3
10051b60:	2b02      	cmp	r3, #2
10051b62:	d102      	bne.n	10051b6a <NVMDB_CleanCheck+0x72>
        {
          db_start_index = 0;
10051b64:	4b11      	ldr	r3, [pc, #68]	@ (10051bac <NVMDB_CleanCheck+0xb4>)
10051b66:	2200      	movs	r2, #0
10051b68:	701a      	strb	r2, [r3, #0]
        }
        return i;
10051b6a:	1dfb      	adds	r3, r7, #7
10051b6c:	781b      	ldrb	r3, [r3, #0]
10051b6e:	b25b      	sxtb	r3, r3
10051b70:	e017      	b.n	10051ba2 <NVMDB_CleanCheck+0xaa>
      }
    }

    i++;
10051b72:	1dfb      	adds	r3, r7, #7
10051b74:	781a      	ldrb	r2, [r3, #0]
10051b76:	1dfb      	adds	r3, r7, #7
10051b78:	3201      	adds	r2, #1
10051b7a:	701a      	strb	r2, [r3, #0]
    if(i == NUM_DB)
10051b7c:	1dfb      	adds	r3, r7, #7
10051b7e:	781b      	ldrb	r3, [r3, #0]
10051b80:	2b02      	cmp	r3, #2
10051b82:	d102      	bne.n	10051b8a <NVMDB_CleanCheck+0x92>
    {
      i = 0;
10051b84:	1dfb      	adds	r3, r7, #7
10051b86:	2200      	movs	r2, #0
10051b88:	701a      	strb	r2, [r3, #0]
    }
  }
  while(i != db_start_index);
10051b8a:	1dfb      	adds	r3, r7, #7
10051b8c:	781b      	ldrb	r3, [r3, #0]
10051b8e:	4a07      	ldr	r2, [pc, #28]	@ (10051bac <NVMDB_CleanCheck+0xb4>)
10051b90:	7812      	ldrb	r2, [r2, #0]
10051b92:	b252      	sxtb	r2, r2
10051b94:	4293      	cmp	r3, r2
10051b96:	d1b7      	bne.n	10051b08 <NVMDB_CleanCheck+0x10>

  // All databases have been checked. We can start from first position next time (but not strictly needed).
  db_start_index = 0;
10051b98:	4b04      	ldr	r3, [pc, #16]	@ (10051bac <NVMDB_CleanCheck+0xb4>)
10051b9a:	2200      	movs	r2, #0
10051b9c:	701a      	strb	r2, [r3, #0]

  return -1; // No db to clean
10051b9e:	2301      	movs	r3, #1
10051ba0:	425b      	negs	r3, r3
}
10051ba2:	0018      	movs	r0, r3
10051ba4:	46bd      	mov	sp, r7
10051ba6:	b002      	add	sp, #8
10051ba8:	bd80      	pop	{r7, pc}
10051baa:	46c0      	nop			@ (mov r8, r8)
10051bac:	200027c4 	.word	0x200027c4
10051bb0:	2000279c 	.word	0x2000279c

10051bb4 <PKAMGR_Init>:

/** @defgroup PKA_Manager_Public_Functions Public Functions
* @{
*/
PKAMGR_ResultStatus PKAMGR_Init(void)
{
10051bb4:	b580      	push	{r7, lr}
10051bb6:	af00      	add	r7, sp, #0
    internalState = PKAMGR_STATE_IDLE;
10051bb8:	4b03      	ldr	r3, [pc, #12]	@ (10051bc8 <PKAMGR_Init+0x14>)
10051bba:	2201      	movs	r2, #1
10051bbc:	601a      	str	r2, [r3, #0]

  return PKAMGR_SUCCESS;
10051bbe:	2300      	movs	r3, #0
}
10051bc0:	0018      	movs	r0, r3
10051bc2:	46bd      	mov	sp, r7
10051bc4:	bd80      	pop	{r7, pc}
10051bc6:	46c0      	nop			@ (mov r8, r8)
10051bc8:	20002c20 	.word	0x20002c20

10051bcc <aci_gap_profile_init>:
tBleStatus aci_gap_profile_init(uint8_t Role,
                                uint8_t Privacy_Type,
                                uint16_t *Dev_Name_Char_Handle,
                                uint16_t *Appearance_Char_Handle,
                                uint16_t *Periph_Pref_Conn_Param_Char_Handle)
{
10051bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
10051bce:	b087      	sub	sp, #28
10051bd0:	af00      	add	r7, sp, #0
10051bd2:	60ba      	str	r2, [r7, #8]
10051bd4:	607b      	str	r3, [r7, #4]
10051bd6:	240f      	movs	r4, #15
10051bd8:	193b      	adds	r3, r7, r4
10051bda:	1c02      	adds	r2, r0, #0
10051bdc:	701a      	strb	r2, [r3, #0]
10051bde:	230e      	movs	r3, #14
10051be0:	18fb      	adds	r3, r7, r3
10051be2:	1c0a      	adds	r2, r1, #0
10051be4:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gap_srvc_handle;
  
  *Dev_Name_Char_Handle = 0x0000;
10051be6:	68bb      	ldr	r3, [r7, #8]
10051be8:	2200      	movs	r2, #0
10051bea:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle= 0x0000;
10051bec:	687b      	ldr	r3, [r7, #4]
10051bee:	2200      	movs	r2, #0
10051bf0:	801a      	strh	r2, [r3, #0]
  *Periph_Pref_Conn_Param_Char_Handle = 0x0000;
10051bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10051bf4:	2200      	movs	r2, #0
10051bf6:	801a      	strh	r2, [r3, #0]
  
  if ((Role & (GAP_PERIPHERAL_ROLE | GAP_CENTRAL_ROLE)) != 0x0U)
10051bf8:	193b      	adds	r3, r7, r4
10051bfa:	781b      	ldrb	r3, [r3, #0]
10051bfc:	2205      	movs	r2, #5
10051bfe:	4013      	ands	r3, r2
10051c00:	d046      	beq.n	10051c90 <aci_gap_profile_init+0xc4>
  {
    /**
    * Register GAP service.
    * Device Name and Appearance Characteristics will be also registered.
    */
    ret = aci_gatt_srv_add_service(&gap_srvc);
10051c02:	2517      	movs	r5, #23
10051c04:	197c      	adds	r4, r7, r5
10051c06:	4b25      	ldr	r3, [pc, #148]	@ (10051c9c <aci_gap_profile_init+0xd0>)
10051c08:	0018      	movs	r0, r3
10051c0a:	f7fe f8c9 	bl	1004fda0 <aci_gatt_srv_add_service>
10051c0e:	0003      	movs	r3, r0
10051c10:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
10051c12:	197b      	adds	r3, r7, r5
10051c14:	781b      	ldrb	r3, [r3, #0]
10051c16:	2b00      	cmp	r3, #0
10051c18:	d002      	beq.n	10051c20 <aci_gap_profile_init+0x54>
    {
      return ret;
10051c1a:	197b      	adds	r3, r7, r5
10051c1c:	781b      	ldrb	r3, [r3, #0]
10051c1e:	e038      	b.n	10051c92 <aci_gap_profile_init+0xc6>
    }
    
    *Dev_Name_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[0U]);
10051c20:	4b1f      	ldr	r3, [pc, #124]	@ (10051ca0 <aci_gap_profile_init+0xd4>)
10051c22:	0018      	movs	r0, r3
10051c24:	f7fe f8e9 	bl	1004fdfa <aci_gatt_srv_get_char_decl_handle>
10051c28:	0003      	movs	r3, r0
10051c2a:	001a      	movs	r2, r3
10051c2c:	68bb      	ldr	r3, [r7, #8]
10051c2e:	801a      	strh	r2, [r3, #0]
    *Appearance_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[1U]);
10051c30:	4b1c      	ldr	r3, [pc, #112]	@ (10051ca4 <aci_gap_profile_init+0xd8>)
10051c32:	0018      	movs	r0, r3
10051c34:	f7fe f8e1 	bl	1004fdfa <aci_gatt_srv_get_char_decl_handle>
10051c38:	0003      	movs	r3, r0
10051c3a:	001a      	movs	r2, r3
10051c3c:	687b      	ldr	r3, [r7, #4]
10051c3e:	801a      	strh	r2, [r3, #0]
    
    gap_srvc_handle = aci_gatt_srv_get_service_handle(&gap_srvc);
10051c40:	2614      	movs	r6, #20
10051c42:	19bc      	adds	r4, r7, r6
10051c44:	4b15      	ldr	r3, [pc, #84]	@ (10051c9c <aci_gap_profile_init+0xd0>)
10051c46:	0018      	movs	r0, r3
10051c48:	f7fe f8b7 	bl	1004fdba <aci_gatt_srv_get_service_handle>
10051c4c:	0003      	movs	r3, r0
10051c4e:	8023      	strh	r3, [r4, #0]
      }
    }
    
    *Periph_Pref_Conn_Param_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[2U]);
#else
    *Periph_Pref_Conn_Param_Char_Handle = 0;
10051c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10051c52:	2200      	movs	r2, #0
10051c54:	801a      	strh	r2, [r3, #0]
#endif    
    
    if (Privacy_Type == 2U)
10051c56:	230e      	movs	r3, #14
10051c58:	18fb      	adds	r3, r7, r3
10051c5a:	781b      	ldrb	r3, [r3, #0]
10051c5c:	2b02      	cmp	r3, #2
10051c5e:	d111      	bne.n	10051c84 <aci_gap_profile_init+0xb8>
    {
      /**
      * Register Central Address Resolution Characteristic.
      */
      ret = aci_gatt_srv_add_char(&gap_chrs[3U], gap_srvc_handle);
10051c60:	2517      	movs	r5, #23
10051c62:	197c      	adds	r4, r7, r5
10051c64:	19bb      	adds	r3, r7, r6
10051c66:	881a      	ldrh	r2, [r3, #0]
10051c68:	4b0f      	ldr	r3, [pc, #60]	@ (10051ca8 <aci_gap_profile_init+0xdc>)
10051c6a:	0011      	movs	r1, r2
10051c6c:	0018      	movs	r0, r3
10051c6e:	f7fe f8b1 	bl	1004fdd4 <aci_gatt_srv_add_char>
10051c72:	0003      	movs	r3, r0
10051c74:	7023      	strb	r3, [r4, #0]
      if (ret != BLE_STATUS_SUCCESS)
10051c76:	197b      	adds	r3, r7, r5
10051c78:	781b      	ldrb	r3, [r3, #0]
10051c7a:	2b00      	cmp	r3, #0
10051c7c:	d002      	beq.n	10051c84 <aci_gap_profile_init+0xb8>
      {
        return ret;
10051c7e:	197b      	adds	r3, r7, r5
10051c80:	781b      	ldrb	r3, [r3, #0]
10051c82:	e006      	b.n	10051c92 <aci_gap_profile_init+0xc6>
#endif /* CFG_BLE_GAP_ENCRYPTED_KEY_MATERIAL_CHARACTERISTIC */
    
    /**
    * Set default device name.
    */
    Gap_profile_set_dev_name(0U, sizeof(default_dev_name),
10051c84:	4b09      	ldr	r3, [pc, #36]	@ (10051cac <aci_gap_profile_init+0xe0>)
10051c86:	001a      	movs	r2, r3
10051c88:	2108      	movs	r1, #8
10051c8a:	2000      	movs	r0, #0
10051c8c:	f000 f810 	bl	10051cb0 <Gap_profile_set_dev_name>
                             (uint8_t *)default_dev_name);
    
  }
  
  return BLE_STATUS_SUCCESS;
10051c90:	2300      	movs	r3, #0
}
10051c92:	0018      	movs	r0, r3
10051c94:	46bd      	mov	sp, r7
10051c96:	b007      	add	sp, #28
10051c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
10051c9a:	46c0      	nop			@ (mov r8, r8)
10051c9c:	20002cf0 	.word	0x20002cf0
10051ca0:	20002c3c 	.word	0x20002c3c
10051ca4:	20002c60 	.word	0x20002c60
10051ca8:	20002ca8 	.word	0x20002ca8
10051cac:	1006a14c 	.word	0x1006a14c

10051cb0 <Gap_profile_set_dev_name>:

tBleStatus Gap_profile_set_dev_name(uint16_t offset,
                                    uint16_t length,
                                    uint8_t *dev_name_p)
{
10051cb0:	b590      	push	{r4, r7, lr}
10051cb2:	b085      	sub	sp, #20
10051cb4:	af00      	add	r7, sp, #0
10051cb6:	603a      	str	r2, [r7, #0]
10051cb8:	1dbb      	adds	r3, r7, #6
10051cba:	1c02      	adds	r2, r0, #0
10051cbc:	801a      	strh	r2, [r3, #0]
10051cbe:	1d3b      	adds	r3, r7, #4
10051cc0:	1c0a      	adds	r2, r1, #0
10051cc2:	801a      	strh	r2, [r3, #0]
    uint16_t handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[0U]) + 1U;
10051cc4:	4b0c      	ldr	r3, [pc, #48]	@ (10051cf8 <Gap_profile_set_dev_name+0x48>)
10051cc6:	0018      	movs	r0, r3
10051cc8:	f7fe f897 	bl	1004fdfa <aci_gatt_srv_get_char_decl_handle>
10051ccc:	0003      	movs	r3, r0
10051cce:	001a      	movs	r2, r3
10051cd0:	200e      	movs	r0, #14
10051cd2:	183b      	adds	r3, r7, r0
10051cd4:	3201      	adds	r2, #1
10051cd6:	801a      	strh	r2, [r3, #0]

    return Gap_profile_set_char_value(handle, offset, length, dev_name_p);
10051cd8:	683c      	ldr	r4, [r7, #0]
10051cda:	1d3b      	adds	r3, r7, #4
10051cdc:	881a      	ldrh	r2, [r3, #0]
10051cde:	1dbb      	adds	r3, r7, #6
10051ce0:	8819      	ldrh	r1, [r3, #0]
10051ce2:	183b      	adds	r3, r7, r0
10051ce4:	8818      	ldrh	r0, [r3, #0]
10051ce6:	0023      	movs	r3, r4
10051ce8:	f000 f82e 	bl	10051d48 <Gap_profile_set_char_value>
10051cec:	0003      	movs	r3, r0
}
10051cee:	0018      	movs	r0, r3
10051cf0:	46bd      	mov	sp, r7
10051cf2:	b005      	add	sp, #20
10051cf4:	bd90      	pop	{r4, r7, pc}
10051cf6:	46c0      	nop			@ (mov r8, r8)
10051cf8:	20002c3c 	.word	0x20002c3c

10051cfc <Gap_profile_set_appearance>:

tBleStatus Gap_profile_set_appearance(uint16_t offset,
                                      uint16_t length,
                                      uint8_t *appearance_p)
{
10051cfc:	b590      	push	{r4, r7, lr}
10051cfe:	b085      	sub	sp, #20
10051d00:	af00      	add	r7, sp, #0
10051d02:	603a      	str	r2, [r7, #0]
10051d04:	1dbb      	adds	r3, r7, #6
10051d06:	1c02      	adds	r2, r0, #0
10051d08:	801a      	strh	r2, [r3, #0]
10051d0a:	1d3b      	adds	r3, r7, #4
10051d0c:	1c0a      	adds	r2, r1, #0
10051d0e:	801a      	strh	r2, [r3, #0]
    uint16_t handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[1U]) + 1U;
10051d10:	4b0c      	ldr	r3, [pc, #48]	@ (10051d44 <Gap_profile_set_appearance+0x48>)
10051d12:	0018      	movs	r0, r3
10051d14:	f7fe f871 	bl	1004fdfa <aci_gatt_srv_get_char_decl_handle>
10051d18:	0003      	movs	r3, r0
10051d1a:	001a      	movs	r2, r3
10051d1c:	200e      	movs	r0, #14
10051d1e:	183b      	adds	r3, r7, r0
10051d20:	3201      	adds	r2, #1
10051d22:	801a      	strh	r2, [r3, #0]

    return Gap_profile_set_char_value(handle, offset, length, appearance_p);
10051d24:	683c      	ldr	r4, [r7, #0]
10051d26:	1d3b      	adds	r3, r7, #4
10051d28:	881a      	ldrh	r2, [r3, #0]
10051d2a:	1dbb      	adds	r3, r7, #6
10051d2c:	8819      	ldrh	r1, [r3, #0]
10051d2e:	183b      	adds	r3, r7, r0
10051d30:	8818      	ldrh	r0, [r3, #0]
10051d32:	0023      	movs	r3, r4
10051d34:	f000 f808 	bl	10051d48 <Gap_profile_set_char_value>
10051d38:	0003      	movs	r3, r0
}
10051d3a:	0018      	movs	r0, r3
10051d3c:	46bd      	mov	sp, r7
10051d3e:	b005      	add	sp, #20
10051d40:	bd90      	pop	{r4, r7, pc}
10051d42:	46c0      	nop			@ (mov r8, r8)
10051d44:	20002c60 	.word	0x20002c60

10051d48 <Gap_profile_set_char_value>:

tBleStatus Gap_profile_set_char_value(uint16_t attr_h,
                                      uint16_t val_offset,
                                      uint16_t val_length,
                                      uint8_t *val_p)
{
10051d48:	b5b0      	push	{r4, r5, r7, lr}
10051d4a:	b086      	sub	sp, #24
10051d4c:	af00      	add	r7, sp, #0
10051d4e:	0004      	movs	r4, r0
10051d50:	0008      	movs	r0, r1
10051d52:	0011      	movs	r1, r2
10051d54:	607b      	str	r3, [r7, #4]
10051d56:	230e      	movs	r3, #14
10051d58:	18fb      	adds	r3, r7, r3
10051d5a:	1c22      	adds	r2, r4, #0
10051d5c:	801a      	strh	r2, [r3, #0]
10051d5e:	230c      	movs	r3, #12
10051d60:	18fb      	adds	r3, r7, r3
10051d62:	1c02      	adds	r2, r0, #0
10051d64:	801a      	strh	r2, [r3, #0]
10051d66:	230a      	movs	r3, #10
10051d68:	18fb      	adds	r3, r7, r3
10051d6a:	1c0a      	adds	r2, r1, #0
10051d6c:	801a      	strh	r2, [r3, #0]
    uint16_t handle;

    /**
     * Search for GAP characteristic.
     */
    for (i = 0U; i < (sizeof(gap_chrs) / sizeof(gap_chrs[0U])); i++)
10051d6e:	2317      	movs	r3, #23
10051d70:	18fb      	adds	r3, r7, r3
10051d72:	2200      	movs	r2, #0
10051d74:	701a      	strb	r2, [r3, #0]
10051d76:	e021      	b.n	10051dbc <Gap_profile_set_char_value+0x74>
    {
        handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[i]);
10051d78:	2317      	movs	r3, #23
10051d7a:	18fb      	adds	r3, r7, r3
10051d7c:	781a      	ldrb	r2, [r3, #0]
10051d7e:	0013      	movs	r3, r2
10051d80:	00db      	lsls	r3, r3, #3
10051d82:	189b      	adds	r3, r3, r2
10051d84:	009b      	lsls	r3, r3, #2
10051d86:	4a43      	ldr	r2, [pc, #268]	@ (10051e94 <Gap_profile_set_char_value+0x14c>)
10051d88:	189b      	adds	r3, r3, r2
10051d8a:	2514      	movs	r5, #20
10051d8c:	197c      	adds	r4, r7, r5
10051d8e:	0018      	movs	r0, r3
10051d90:	f7fe f833 	bl	1004fdfa <aci_gatt_srv_get_char_decl_handle>
10051d94:	0003      	movs	r3, r0
10051d96:	8023      	strh	r3, [r4, #0]
        if ((handle != BLE_ATT_INVALID_ATTR_HANDLE) &&
10051d98:	197b      	adds	r3, r7, r5
10051d9a:	881b      	ldrh	r3, [r3, #0]
10051d9c:	2b00      	cmp	r3, #0
10051d9e:	d007      	beq.n	10051db0 <Gap_profile_set_char_value+0x68>
            ((handle + 1U) == attr_h))
10051da0:	197b      	adds	r3, r7, r5
10051da2:	881b      	ldrh	r3, [r3, #0]
10051da4:	1c5a      	adds	r2, r3, #1
10051da6:	230e      	movs	r3, #14
10051da8:	18fb      	adds	r3, r7, r3
10051daa:	881b      	ldrh	r3, [r3, #0]
        if ((handle != BLE_ATT_INVALID_ATTR_HANDLE) &&
10051dac:	429a      	cmp	r2, r3
10051dae:	d00b      	beq.n	10051dc8 <Gap_profile_set_char_value+0x80>
    for (i = 0U; i < (sizeof(gap_chrs) / sizeof(gap_chrs[0U])); i++)
10051db0:	2117      	movs	r1, #23
10051db2:	187b      	adds	r3, r7, r1
10051db4:	781a      	ldrb	r2, [r3, #0]
10051db6:	187b      	adds	r3, r7, r1
10051db8:	3201      	adds	r2, #1
10051dba:	701a      	strb	r2, [r3, #0]
10051dbc:	2317      	movs	r3, #23
10051dbe:	18fb      	adds	r3, r7, r3
10051dc0:	781b      	ldrb	r3, [r3, #0]
10051dc2:	2b04      	cmp	r3, #4
10051dc4:	d9d8      	bls.n	10051d78 <Gap_profile_set_char_value+0x30>
10051dc6:	e000      	b.n	10051dca <Gap_profile_set_char_value+0x82>
        {
            break;
10051dc8:	46c0      	nop			@ (mov r8, r8)
        }
    }

    if (i == (sizeof(gap_chrs) / sizeof(gap_chrs[0U])))
10051dca:	2317      	movs	r3, #23
10051dcc:	18fb      	adds	r3, r7, r3
10051dce:	781b      	ldrb	r3, [r3, #0]
10051dd0:	2b05      	cmp	r3, #5
10051dd2:	d101      	bne.n	10051dd8 <Gap_profile_set_char_value+0x90>
    {
        /**
         * The given attribute handle is not registered for GAP service.
         */
        return BLE_STATUS_INVALID_PARAMS;
10051dd4:	2312      	movs	r3, #18
10051dd6:	e059      	b.n	10051e8c <Gap_profile_set_char_value+0x144>
    }

    if ((val_offset + val_length) > gap_chrs[i].val_buffer_p->buffer_len)
10051dd8:	230c      	movs	r3, #12
10051dda:	18fb      	adds	r3, r7, r3
10051ddc:	881a      	ldrh	r2, [r3, #0]
10051dde:	230a      	movs	r3, #10
10051de0:	18fb      	adds	r3, r7, r3
10051de2:	881b      	ldrh	r3, [r3, #0]
10051de4:	18d1      	adds	r1, r2, r3
10051de6:	2317      	movs	r3, #23
10051de8:	18fb      	adds	r3, r7, r3
10051dea:	781a      	ldrb	r2, [r3, #0]
10051dec:	4829      	ldr	r0, [pc, #164]	@ (10051e94 <Gap_profile_set_char_value+0x14c>)
10051dee:	0013      	movs	r3, r2
10051df0:	00db      	lsls	r3, r3, #3
10051df2:	189b      	adds	r3, r3, r2
10051df4:	009b      	lsls	r3, r3, #2
10051df6:	18c3      	adds	r3, r0, r3
10051df8:	3320      	adds	r3, #32
10051dfa:	681b      	ldr	r3, [r3, #0]
10051dfc:	889b      	ldrh	r3, [r3, #4]
10051dfe:	4299      	cmp	r1, r3
10051e00:	dd01      	ble.n	10051e06 <Gap_profile_set_char_value+0xbe>
    {
        /**
         * Invalid value length.
         */
        return BLE_STATUS_INVALID_PARAMS;
10051e02:	2312      	movs	r3, #18
10051e04:	e042      	b.n	10051e8c <Gap_profile_set_char_value+0x144>
    }
    
    if(gap_chrs[i].val_buffer_p == NULL)
10051e06:	2317      	movs	r3, #23
10051e08:	18fb      	adds	r3, r7, r3
10051e0a:	781a      	ldrb	r2, [r3, #0]
10051e0c:	4921      	ldr	r1, [pc, #132]	@ (10051e94 <Gap_profile_set_char_value+0x14c>)
10051e0e:	0013      	movs	r3, r2
10051e10:	00db      	lsls	r3, r3, #3
10051e12:	189b      	adds	r3, r3, r2
10051e14:	009b      	lsls	r3, r3, #2
10051e16:	18cb      	adds	r3, r1, r3
10051e18:	3320      	adds	r3, #32
10051e1a:	681b      	ldr	r3, [r3, #0]
10051e1c:	2b00      	cmp	r3, #0
10051e1e:	d101      	bne.n	10051e24 <Gap_profile_set_char_value+0xdc>
    {
      /**
       * The given attribute handle is not related to a buffered characteristic.
       */
      return BLE_STATUS_INVALID_PARAMS;
10051e20:	2312      	movs	r3, #18
10051e22:	e033      	b.n	10051e8c <Gap_profile_set_char_value+0x144>
    }

    /**
     * Write characteristic value.
     */
    memcpy(&gap_chrs[i].val_buffer_p->buffer_p[val_offset], val_p, val_length);
10051e24:	2417      	movs	r4, #23
10051e26:	193b      	adds	r3, r7, r4
10051e28:	781a      	ldrb	r2, [r3, #0]
10051e2a:	491a      	ldr	r1, [pc, #104]	@ (10051e94 <Gap_profile_set_char_value+0x14c>)
10051e2c:	0013      	movs	r3, r2
10051e2e:	00db      	lsls	r3, r3, #3
10051e30:	189b      	adds	r3, r3, r2
10051e32:	009b      	lsls	r3, r3, #2
10051e34:	18cb      	adds	r3, r1, r3
10051e36:	3320      	adds	r3, #32
10051e38:	681b      	ldr	r3, [r3, #0]
10051e3a:	689a      	ldr	r2, [r3, #8]
10051e3c:	230c      	movs	r3, #12
10051e3e:	18fb      	adds	r3, r7, r3
10051e40:	881b      	ldrh	r3, [r3, #0]
10051e42:	18d0      	adds	r0, r2, r3
10051e44:	250a      	movs	r5, #10
10051e46:	197b      	adds	r3, r7, r5
10051e48:	881a      	ldrh	r2, [r3, #0]
10051e4a:	687b      	ldr	r3, [r7, #4]
10051e4c:	0019      	movs	r1, r3
10051e4e:	f016 fcea 	bl	10068826 <memcpy>
    if ((gap_chrs[i].val_buffer_p->op_flags & BLE_GATT_SRV_OP_VALUE_VAR_LENGTH_FLAG) != 0U)
10051e52:	193b      	adds	r3, r7, r4
10051e54:	781a      	ldrb	r2, [r3, #0]
10051e56:	490f      	ldr	r1, [pc, #60]	@ (10051e94 <Gap_profile_set_char_value+0x14c>)
10051e58:	0013      	movs	r3, r2
10051e5a:	00db      	lsls	r3, r3, #3
10051e5c:	189b      	adds	r3, r3, r2
10051e5e:	009b      	lsls	r3, r3, #2
10051e60:	18cb      	adds	r3, r1, r3
10051e62:	3320      	adds	r3, #32
10051e64:	681b      	ldr	r3, [r3, #0]
10051e66:	781b      	ldrb	r3, [r3, #0]
10051e68:	001a      	movs	r2, r3
10051e6a:	2302      	movs	r3, #2
10051e6c:	4013      	ands	r3, r2
10051e6e:	d00c      	beq.n	10051e8a <Gap_profile_set_char_value+0x142>
    {
        gap_chrs[i].val_buffer_p->val_len = val_length;
10051e70:	193b      	adds	r3, r7, r4
10051e72:	781a      	ldrb	r2, [r3, #0]
10051e74:	4907      	ldr	r1, [pc, #28]	@ (10051e94 <Gap_profile_set_char_value+0x14c>)
10051e76:	0013      	movs	r3, r2
10051e78:	00db      	lsls	r3, r3, #3
10051e7a:	189b      	adds	r3, r3, r2
10051e7c:	009b      	lsls	r3, r3, #2
10051e7e:	18cb      	adds	r3, r1, r3
10051e80:	3320      	adds	r3, #32
10051e82:	681b      	ldr	r3, [r3, #0]
10051e84:	197a      	adds	r2, r7, r5
10051e86:	8812      	ldrh	r2, [r2, #0]
10051e88:	805a      	strh	r2, [r3, #2]
    }

    return BLE_STATUS_SUCCESS;
10051e8a:	2300      	movs	r3, #0
}
10051e8c:	0018      	movs	r0, r3
10051e8e:	46bd      	mov	sp, r7
10051e90:	b006      	add	sp, #24
10051e92:	bdb0      	pop	{r4, r5, r7, pc}
10051e94:	20002c3c 	.word	0x20002c3c

10051e98 <aci_gatt_srv_profile_init>:
    .chrs = {0, NULL},
};

tBleStatus aci_gatt_srv_profile_init(uint8_t Characteristics,
                                     uint16_t *Service_Changed_Handle)
{
10051e98:	b5f0      	push	{r4, r5, r6, r7, lr}
10051e9a:	b085      	sub	sp, #20
10051e9c:	af00      	add	r7, sp, #0
10051e9e:	0002      	movs	r2, r0
10051ea0:	6039      	str	r1, [r7, #0]
10051ea2:	1dfb      	adds	r3, r7, #7
10051ea4:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_srvc_handle;

  *Service_Changed_Handle = 0x0000;
10051ea6:	683b      	ldr	r3, [r7, #0]
10051ea8:	2200      	movs	r2, #0
10051eaa:	801a      	strh	r2, [r3, #0]

  ret = aci_gatt_srv_add_service(&gatt_srvc);
10051eac:	250f      	movs	r5, #15
10051eae:	197c      	adds	r4, r7, r5
10051eb0:	4b38      	ldr	r3, [pc, #224]	@ (10051f94 <aci_gatt_srv_profile_init+0xfc>)
10051eb2:	0018      	movs	r0, r3
10051eb4:	f7fd ff74 	bl	1004fda0 <aci_gatt_srv_add_service>
10051eb8:	0003      	movs	r3, r0
10051eba:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10051ebc:	197b      	adds	r3, r7, r5
10051ebe:	781b      	ldrb	r3, [r3, #0]
10051ec0:	2b00      	cmp	r3, #0
10051ec2:	d002      	beq.n	10051eca <aci_gatt_srv_profile_init+0x32>
  {
    return ret;
10051ec4:	197b      	adds	r3, r7, r5
10051ec6:	781b      	ldrb	r3, [r3, #0]
10051ec8:	e060      	b.n	10051f8c <aci_gatt_srv_profile_init+0xf4>
  }

  gatt_srvc_handle = aci_gatt_srv_get_service_handle(&gatt_srvc);
10051eca:	260c      	movs	r6, #12
10051ecc:	19bc      	adds	r4, r7, r6
10051ece:	4b31      	ldr	r3, [pc, #196]	@ (10051f94 <aci_gatt_srv_profile_init+0xfc>)
10051ed0:	0018      	movs	r0, r3
10051ed2:	f7fd ff72 	bl	1004fdba <aci_gatt_srv_get_service_handle>
10051ed6:	0003      	movs	r3, r0
10051ed8:	8023      	strh	r3, [r4, #0]

  if(Characteristics & GATT_INIT_SERVICE_CHANGED_BIT)
10051eda:	1dfb      	adds	r3, r7, #7
10051edc:	781b      	ldrb	r3, [r3, #0]
10051ede:	2201      	movs	r2, #1
10051ee0:	4013      	ands	r3, r2
10051ee2:	d011      	beq.n	10051f08 <aci_gatt_srv_profile_init+0x70>
  {
    ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_srvc_changed_chr, gatt_srvc_handle);
10051ee4:	250f      	movs	r5, #15
10051ee6:	197c      	adds	r4, r7, r5
10051ee8:	19bb      	adds	r3, r7, r6
10051eea:	881a      	ldrh	r2, [r3, #0]
10051eec:	4b2a      	ldr	r3, [pc, #168]	@ (10051f98 <aci_gatt_srv_profile_init+0x100>)
10051eee:	0011      	movs	r1, r2
10051ef0:	0018      	movs	r0, r3
10051ef2:	f7fd ff6f 	bl	1004fdd4 <aci_gatt_srv_add_char>
10051ef6:	0003      	movs	r3, r0
10051ef8:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
10051efa:	197b      	adds	r3, r7, r5
10051efc:	781b      	ldrb	r3, [r3, #0]
10051efe:	2b00      	cmp	r3, #0
10051f00:	d002      	beq.n	10051f08 <aci_gatt_srv_profile_init+0x70>
    {
      return ret;
10051f02:	197b      	adds	r3, r7, r5
10051f04:	781b      	ldrb	r3, [r3, #0]
10051f06:	e041      	b.n	10051f8c <aci_gatt_srv_profile_init+0xf4>
    }
  }
  *Service_Changed_Handle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t*)&gatt_srvc_changed_chr);
10051f08:	4b23      	ldr	r3, [pc, #140]	@ (10051f98 <aci_gatt_srv_profile_init+0x100>)
10051f0a:	0018      	movs	r0, r3
10051f0c:	f7fd ff75 	bl	1004fdfa <aci_gatt_srv_get_char_decl_handle>
10051f10:	0003      	movs	r3, r0
10051f12:	001a      	movs	r2, r3
10051f14:	683b      	ldr	r3, [r7, #0]
10051f16:	801a      	strh	r2, [r3, #0]

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_clt_supp_feat_chr, gatt_srvc_handle);
10051f18:	250f      	movs	r5, #15
10051f1a:	197c      	adds	r4, r7, r5
10051f1c:	230c      	movs	r3, #12
10051f1e:	18fb      	adds	r3, r7, r3
10051f20:	881a      	ldrh	r2, [r3, #0]
10051f22:	4b1e      	ldr	r3, [pc, #120]	@ (10051f9c <aci_gatt_srv_profile_init+0x104>)
10051f24:	0011      	movs	r1, r2
10051f26:	0018      	movs	r0, r3
10051f28:	f7fd ff54 	bl	1004fdd4 <aci_gatt_srv_add_char>
10051f2c:	0003      	movs	r3, r0
10051f2e:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10051f30:	197b      	adds	r3, r7, r5
10051f32:	781b      	ldrb	r3, [r3, #0]
10051f34:	2b00      	cmp	r3, #0
10051f36:	d002      	beq.n	10051f3e <aci_gatt_srv_profile_init+0xa6>
  {
    return ret;
10051f38:	197b      	adds	r3, r7, r5
10051f3a:	781b      	ldrb	r3, [r3, #0]
10051f3c:	e026      	b.n	10051f8c <aci_gatt_srv_profile_init+0xf4>
  }

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_db_hash_chr, gatt_srvc_handle);
10051f3e:	250f      	movs	r5, #15
10051f40:	197c      	adds	r4, r7, r5
10051f42:	230c      	movs	r3, #12
10051f44:	18fb      	adds	r3, r7, r3
10051f46:	881a      	ldrh	r2, [r3, #0]
10051f48:	4b15      	ldr	r3, [pc, #84]	@ (10051fa0 <aci_gatt_srv_profile_init+0x108>)
10051f4a:	0011      	movs	r1, r2
10051f4c:	0018      	movs	r0, r3
10051f4e:	f7fd ff41 	bl	1004fdd4 <aci_gatt_srv_add_char>
10051f52:	0003      	movs	r3, r0
10051f54:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10051f56:	197b      	adds	r3, r7, r5
10051f58:	781b      	ldrb	r3, [r3, #0]
10051f5a:	2b00      	cmp	r3, #0
10051f5c:	d002      	beq.n	10051f64 <aci_gatt_srv_profile_init+0xcc>
  {
    return ret;
10051f5e:	197b      	adds	r3, r7, r5
10051f60:	781b      	ldrb	r3, [r3, #0]
10051f62:	e013      	b.n	10051f8c <aci_gatt_srv_profile_init+0xf4>
  }

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_srv_supp_feat_chr, gatt_srvc_handle);
10051f64:	250f      	movs	r5, #15
10051f66:	197c      	adds	r4, r7, r5
10051f68:	230c      	movs	r3, #12
10051f6a:	18fb      	adds	r3, r7, r3
10051f6c:	881a      	ldrh	r2, [r3, #0]
10051f6e:	4b0d      	ldr	r3, [pc, #52]	@ (10051fa4 <aci_gatt_srv_profile_init+0x10c>)
10051f70:	0011      	movs	r1, r2
10051f72:	0018      	movs	r0, r3
10051f74:	f7fd ff2e 	bl	1004fdd4 <aci_gatt_srv_add_char>
10051f78:	0003      	movs	r3, r0
10051f7a:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10051f7c:	197b      	adds	r3, r7, r5
10051f7e:	781b      	ldrb	r3, [r3, #0]
10051f80:	2b00      	cmp	r3, #0
10051f82:	d002      	beq.n	10051f8a <aci_gatt_srv_profile_init+0xf2>
  {
    return ret;
10051f84:	197b      	adds	r3, r7, r5
10051f86:	781b      	ldrb	r3, [r3, #0]
10051f88:	e000      	b.n	10051f8c <aci_gatt_srv_profile_init+0xf4>
  }

  return   BLE_STATUS_SUCCESS;
10051f8a:	2300      	movs	r3, #0
}
10051f8c:	0018      	movs	r0, r3
10051f8e:	46bd      	mov	sp, r7
10051f90:	b005      	add	sp, #20
10051f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
10051f94:	20002d34 	.word	0x20002d34
10051f98:	1006a1b0 	.word	0x1006a1b0
10051f9c:	1006a1d4 	.word	0x1006a1d4
10051fa0:	1006a1f8 	.word	0x1006a1f8
10051fa4:	1006a21c 	.word	0x1006a21c

10051fa8 <__NVIC_EnableIRQ>:
{
10051fa8:	b580      	push	{r7, lr}
10051faa:	b082      	sub	sp, #8
10051fac:	af00      	add	r7, sp, #0
10051fae:	0002      	movs	r2, r0
10051fb0:	1dfb      	adds	r3, r7, #7
10051fb2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10051fb4:	1dfb      	adds	r3, r7, #7
10051fb6:	781b      	ldrb	r3, [r3, #0]
10051fb8:	2b7f      	cmp	r3, #127	@ 0x7f
10051fba:	d809      	bhi.n	10051fd0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10051fbc:	1dfb      	adds	r3, r7, #7
10051fbe:	781b      	ldrb	r3, [r3, #0]
10051fc0:	001a      	movs	r2, r3
10051fc2:	231f      	movs	r3, #31
10051fc4:	401a      	ands	r2, r3
10051fc6:	4b04      	ldr	r3, [pc, #16]	@ (10051fd8 <__NVIC_EnableIRQ+0x30>)
10051fc8:	2101      	movs	r1, #1
10051fca:	4091      	lsls	r1, r2
10051fcc:	000a      	movs	r2, r1
10051fce:	601a      	str	r2, [r3, #0]
}
10051fd0:	46c0      	nop			@ (mov r8, r8)
10051fd2:	46bd      	mov	sp, r7
10051fd4:	b002      	add	sp, #8
10051fd6:	bd80      	pop	{r7, pc}
10051fd8:	e000e100 	.word	0xe000e100

10051fdc <__NVIC_DisableIRQ>:
{
10051fdc:	b580      	push	{r7, lr}
10051fde:	b082      	sub	sp, #8
10051fe0:	af00      	add	r7, sp, #0
10051fe2:	0002      	movs	r2, r0
10051fe4:	1dfb      	adds	r3, r7, #7
10051fe6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10051fe8:	1dfb      	adds	r3, r7, #7
10051fea:	781b      	ldrb	r3, [r3, #0]
10051fec:	2b7f      	cmp	r3, #127	@ 0x7f
10051fee:	d810      	bhi.n	10052012 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10051ff0:	1dfb      	adds	r3, r7, #7
10051ff2:	781b      	ldrb	r3, [r3, #0]
10051ff4:	001a      	movs	r2, r3
10051ff6:	231f      	movs	r3, #31
10051ff8:	4013      	ands	r3, r2
10051ffa:	4908      	ldr	r1, [pc, #32]	@ (1005201c <__NVIC_DisableIRQ+0x40>)
10051ffc:	2201      	movs	r2, #1
10051ffe:	409a      	lsls	r2, r3
10052000:	0013      	movs	r3, r2
10052002:	2280      	movs	r2, #128	@ 0x80
10052004:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
10052006:	f3bf 8f4f 	dsb	sy
}
1005200a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
1005200c:	f3bf 8f6f 	isb	sy
}
10052010:	46c0      	nop			@ (mov r8, r8)
}
10052012:	46c0      	nop			@ (mov r8, r8)
10052014:	46bd      	mov	sp, r7
10052016:	b002      	add	sp, #8
10052018:	bd80      	pop	{r7, pc}
1005201a:	46c0      	nop			@ (mov r8, r8)
1005201c:	e000e100 	.word	0xe000e100

10052020 <LL_PWR_IsSMPSReady>:
{
10052020:	b580      	push	{r7, lr}
10052022:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) == (PWR_SR2_SMPSRDY)) ? 1UL : 0UL);
10052024:	4b05      	ldr	r3, [pc, #20]	@ (1005203c <LL_PWR_IsSMPSReady+0x1c>)
10052026:	695b      	ldr	r3, [r3, #20]
10052028:	2204      	movs	r2, #4
1005202a:	4013      	ands	r3, r2
1005202c:	2b04      	cmp	r3, #4
1005202e:	d101      	bne.n	10052034 <LL_PWR_IsSMPSReady+0x14>
10052030:	2301      	movs	r3, #1
10052032:	e000      	b.n	10052036 <LL_PWR_IsSMPSReady+0x16>
10052034:	2300      	movs	r3, #0
}
10052036:	0018      	movs	r0, r3
10052038:	46bd      	mov	sp, r7
1005203a:	bd80      	pop	{r7, pc}
1005203c:	48500000 	.word	0x48500000

10052040 <LL_PWR_GetSMPSMode>:
{
10052040:	b580      	push	{r7, lr}
10052042:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(PWR->CR5, PWR_CR5_NOSMPS));
10052044:	4b03      	ldr	r3, [pc, #12]	@ (10052054 <LL_PWR_GetSMPSMode+0x14>)
10052046:	69da      	ldr	r2, [r3, #28]
10052048:	2380      	movs	r3, #128	@ 0x80
1005204a:	00db      	lsls	r3, r3, #3
1005204c:	4013      	ands	r3, r2
}
1005204e:	0018      	movs	r0, r3
10052050:	46bd      	mov	sp, r7
10052052:	bd80      	pop	{r7, pc}
10052054:	48500000 	.word	0x48500000

10052058 <LL_PWR_SetSMPSPrechargeMode>:
{
10052058:	b580      	push	{r7, lr}
1005205a:	b082      	sub	sp, #8
1005205c:	af00      	add	r7, sp, #0
1005205e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, mode);
10052060:	4b06      	ldr	r3, [pc, #24]	@ (1005207c <LL_PWR_SetSMPSPrechargeMode+0x24>)
10052062:	69db      	ldr	r3, [r3, #28]
10052064:	4a06      	ldr	r2, [pc, #24]	@ (10052080 <LL_PWR_SetSMPSPrechargeMode+0x28>)
10052066:	4013      	ands	r3, r2
10052068:	0019      	movs	r1, r3
1005206a:	4b04      	ldr	r3, [pc, #16]	@ (1005207c <LL_PWR_SetSMPSPrechargeMode+0x24>)
1005206c:	687a      	ldr	r2, [r7, #4]
1005206e:	430a      	orrs	r2, r1
10052070:	61da      	str	r2, [r3, #28]
}
10052072:	46c0      	nop			@ (mov r8, r8)
10052074:	46bd      	mov	sp, r7
10052076:	b002      	add	sp, #8
10052078:	bd80      	pop	{r7, pc}
1005207a:	46c0      	nop			@ (mov r8, r8)
1005207c:	48500000 	.word	0x48500000
10052080:	fffffdff 	.word	0xfffffdff

10052084 <LL_PWR_IsEnabledSMPSPrechargeMode>:
{
10052084:	b580      	push	{r7, lr}
10052086:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR5, PWR_CR5_SMPSFBYP) == (PWR_CR5_SMPSFBYP)) ? 1UL : 0UL);
10052088:	4b07      	ldr	r3, [pc, #28]	@ (100520a8 <LL_PWR_IsEnabledSMPSPrechargeMode+0x24>)
1005208a:	69da      	ldr	r2, [r3, #28]
1005208c:	2380      	movs	r3, #128	@ 0x80
1005208e:	009b      	lsls	r3, r3, #2
10052090:	401a      	ands	r2, r3
10052092:	2380      	movs	r3, #128	@ 0x80
10052094:	009b      	lsls	r3, r3, #2
10052096:	429a      	cmp	r2, r3
10052098:	d101      	bne.n	1005209e <LL_PWR_IsEnabledSMPSPrechargeMode+0x1a>
1005209a:	2301      	movs	r3, #1
1005209c:	e000      	b.n	100520a0 <LL_PWR_IsEnabledSMPSPrechargeMode+0x1c>
1005209e:	2300      	movs	r3, #0
}
100520a0:	0018      	movs	r0, r3
100520a2:	46bd      	mov	sp, r7
100520a4:	bd80      	pop	{r7, pc}
100520a6:	46c0      	nop			@ (mov r8, r8)
100520a8:	48500000 	.word	0x48500000

100520ac <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
100520ac:	b580      	push	{r7, lr}
100520ae:	b082      	sub	sp, #8
100520b0:	af00      	add	r7, sp, #0
100520b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLVL, OutputVoltageLevel);
100520b4:	4b06      	ldr	r3, [pc, #24]	@ (100520d0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
100520b6:	69db      	ldr	r3, [r3, #28]
100520b8:	220f      	movs	r2, #15
100520ba:	4393      	bics	r3, r2
100520bc:	0019      	movs	r1, r3
100520be:	4b04      	ldr	r3, [pc, #16]	@ (100520d0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
100520c0:	687a      	ldr	r2, [r7, #4]
100520c2:	430a      	orrs	r2, r1
100520c4:	61da      	str	r2, [r3, #28]
}
100520c6:	46c0      	nop			@ (mov r8, r8)
100520c8:	46bd      	mov	sp, r7
100520ca:	b002      	add	sp, #8
100520cc:	bd80      	pop	{r7, pc}
100520ce:	46c0      	nop			@ (mov r8, r8)
100520d0:	48500000 	.word	0x48500000

100520d4 <LL_SYSCFG_BLERXTX_EnableIT>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_EnableIT(uint32_t Signal)
{
100520d4:	b580      	push	{r7, lr}
100520d6:	b082      	sub	sp, #8
100520d8:	af00      	add	r7, sp, #0
100520da:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->BLERXTX_IER, Signal);
100520dc:	2380      	movs	r3, #128	@ 0x80
100520de:	05db      	lsls	r3, r3, #23
100520e0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
100520e2:	2380      	movs	r3, #128	@ 0x80
100520e4:	05db      	lsls	r3, r3, #23
100520e6:	687a      	ldr	r2, [r7, #4]
100520e8:	430a      	orrs	r2, r1
100520ea:	639a      	str	r2, [r3, #56]	@ 0x38
}
100520ec:	46c0      	nop			@ (mov r8, r8)
100520ee:	46bd      	mov	sp, r7
100520f0:	b002      	add	sp, #8
100520f2:	bd80      	pop	{r7, pc}

100520f4 <LL_SYSCFG_BLERXTX_DisableIT>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_DisableIT(uint32_t Signal)
{
100520f4:	b580      	push	{r7, lr}
100520f6:	b082      	sub	sp, #8
100520f8:	af00      	add	r7, sp, #0
100520fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SYSCFG->BLERXTX_IER, Signal);
100520fc:	2380      	movs	r3, #128	@ 0x80
100520fe:	05db      	lsls	r3, r3, #23
10052100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10052102:	687b      	ldr	r3, [r7, #4]
10052104:	43d9      	mvns	r1, r3
10052106:	2380      	movs	r3, #128	@ 0x80
10052108:	05db      	lsls	r3, r3, #23
1005210a:	400a      	ands	r2, r1
1005210c:	639a      	str	r2, [r3, #56]	@ 0x38
}
1005210e:	46c0      	nop			@ (mov r8, r8)
10052110:	46bd      	mov	sp, r7
10052112:	b002      	add	sp, #8
10052114:	bd80      	pop	{r7, pc}

10052116 <LL_SYSCFG_BLERXTX_SetType>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_SetType(uint8_t Type, uint32_t Signal)
{
10052116:	b580      	push	{r7, lr}
10052118:	b082      	sub	sp, #8
1005211a:	af00      	add	r7, sp, #0
1005211c:	0002      	movs	r2, r0
1005211e:	6039      	str	r1, [r7, #0]
10052120:	1dfb      	adds	r3, r7, #7
10052122:	701a      	strb	r2, [r3, #0]
  if (Type == LL_SYSCFG_BLERXTX_DET_TYPE_EDGE)
10052124:	1dfb      	adds	r3, r7, #7
10052126:	781b      	ldrb	r3, [r3, #0]
10052128:	2b00      	cmp	r3, #0
1005212a:	d109      	bne.n	10052140 <LL_SYSCFG_BLERXTX_SetType+0x2a>
  {
    CLEAR_BIT(SYSCFG->BLERXTX_DTR, Signal);
1005212c:	2380      	movs	r3, #128	@ 0x80
1005212e:	05db      	lsls	r3, r3, #23
10052130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10052132:	683b      	ldr	r3, [r7, #0]
10052134:	43d9      	mvns	r1, r3
10052136:	2380      	movs	r3, #128	@ 0x80
10052138:	05db      	lsls	r3, r3, #23
1005213a:	400a      	ands	r2, r1
1005213c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    SET_BIT(SYSCFG->BLERXTX_DTR, Signal);
  }
}
1005213e:	e007      	b.n	10052150 <LL_SYSCFG_BLERXTX_SetType+0x3a>
    SET_BIT(SYSCFG->BLERXTX_DTR, Signal);
10052140:	2380      	movs	r3, #128	@ 0x80
10052142:	05db      	lsls	r3, r3, #23
10052144:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10052146:	2380      	movs	r3, #128	@ 0x80
10052148:	05db      	lsls	r3, r3, #23
1005214a:	683a      	ldr	r2, [r7, #0]
1005214c:	430a      	orrs	r2, r1
1005214e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10052150:	46c0      	nop			@ (mov r8, r8)
10052152:	46bd      	mov	sp, r7
10052154:	b002      	add	sp, #8
10052156:	bd80      	pop	{r7, pc}

10052158 <LL_SYSCFG_BLERXTX_SetTrigger>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_SetTrigger(uint8_t Trigger, uint32_t Signal)
{
10052158:	b580      	push	{r7, lr}
1005215a:	b082      	sub	sp, #8
1005215c:	af00      	add	r7, sp, #0
1005215e:	0002      	movs	r2, r0
10052160:	6039      	str	r1, [r7, #0]
10052162:	1dfb      	adds	r3, r7, #7
10052164:	701a      	strb	r2, [r3, #0]
  switch (Trigger)
10052166:	1dfb      	adds	r3, r7, #7
10052168:	781b      	ldrb	r3, [r3, #0]
1005216a:	2b04      	cmp	r3, #4
1005216c:	d860      	bhi.n	10052230 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
1005216e:	009a      	lsls	r2, r3, #2
10052170:	4b31      	ldr	r3, [pc, #196]	@ (10052238 <LL_SYSCFG_BLERXTX_SetTrigger+0xe0>)
10052172:	18d3      	adds	r3, r2, r3
10052174:	681b      	ldr	r3, [r3, #0]
10052176:	469f      	mov	pc, r3
  {
    case LL_SYSCFG_BLERXTX_TRIGGER_BOTH_EDGE:
    {
      SET_BIT(SYSCFG->BLERXTX_IBER, Signal);
10052178:	2380      	movs	r3, #128	@ 0x80
1005217a:	05db      	lsls	r3, r3, #23
1005217c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
1005217e:	2380      	movs	r3, #128	@ 0x80
10052180:	05db      	lsls	r3, r3, #23
10052182:	683a      	ldr	r2, [r7, #0]
10052184:	430a      	orrs	r2, r1
10052186:	631a      	str	r2, [r3, #48]	@ 0x30
      CLEAR_BIT(SYSCFG->BLERXTX_IEVR, Signal);
10052188:	2380      	movs	r3, #128	@ 0x80
1005218a:	05db      	lsls	r3, r3, #23
1005218c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1005218e:	683b      	ldr	r3, [r7, #0]
10052190:	43d9      	mvns	r1, r3
10052192:	2380      	movs	r3, #128	@ 0x80
10052194:	05db      	lsls	r3, r3, #23
10052196:	400a      	ands	r2, r1
10052198:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
1005219a:	e049      	b.n	10052230 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_RISING_EDGE:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
1005219c:	2380      	movs	r3, #128	@ 0x80
1005219e:	05db      	lsls	r3, r3, #23
100521a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
100521a2:	683b      	ldr	r3, [r7, #0]
100521a4:	43d9      	mvns	r1, r3
100521a6:	2380      	movs	r3, #128	@ 0x80
100521a8:	05db      	lsls	r3, r3, #23
100521aa:	400a      	ands	r2, r1
100521ac:	631a      	str	r2, [r3, #48]	@ 0x30
      SET_BIT(SYSCFG->BLERXTX_IEVR, Signal);
100521ae:	2380      	movs	r3, #128	@ 0x80
100521b0:	05db      	lsls	r3, r3, #23
100521b2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
100521b4:	2380      	movs	r3, #128	@ 0x80
100521b6:	05db      	lsls	r3, r3, #23
100521b8:	683a      	ldr	r2, [r7, #0]
100521ba:	430a      	orrs	r2, r1
100521bc:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
100521be:	e037      	b.n	10052230 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_FALLING_EDGE:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
100521c0:	2380      	movs	r3, #128	@ 0x80
100521c2:	05db      	lsls	r3, r3, #23
100521c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
100521c6:	683b      	ldr	r3, [r7, #0]
100521c8:	43d9      	mvns	r1, r3
100521ca:	2380      	movs	r3, #128	@ 0x80
100521cc:	05db      	lsls	r3, r3, #23
100521ce:	400a      	ands	r2, r1
100521d0:	631a      	str	r2, [r3, #48]	@ 0x30
      CLEAR_BIT(SYSCFG->BLERXTX_IEVR, Signal);
100521d2:	2380      	movs	r3, #128	@ 0x80
100521d4:	05db      	lsls	r3, r3, #23
100521d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100521d8:	683b      	ldr	r3, [r7, #0]
100521da:	43d9      	mvns	r1, r3
100521dc:	2380      	movs	r3, #128	@ 0x80
100521de:	05db      	lsls	r3, r3, #23
100521e0:	400a      	ands	r2, r1
100521e2:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
100521e4:	e024      	b.n	10052230 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_LOW_LEVEL:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
100521e6:	2380      	movs	r3, #128	@ 0x80
100521e8:	05db      	lsls	r3, r3, #23
100521ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
100521ec:	683b      	ldr	r3, [r7, #0]
100521ee:	43d9      	mvns	r1, r3
100521f0:	2380      	movs	r3, #128	@ 0x80
100521f2:	05db      	lsls	r3, r3, #23
100521f4:	400a      	ands	r2, r1
100521f6:	631a      	str	r2, [r3, #48]	@ 0x30
      CLEAR_BIT(SYSCFG->BLERXTX_IEVR, Signal);
100521f8:	2380      	movs	r3, #128	@ 0x80
100521fa:	05db      	lsls	r3, r3, #23
100521fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100521fe:	683b      	ldr	r3, [r7, #0]
10052200:	43d9      	mvns	r1, r3
10052202:	2380      	movs	r3, #128	@ 0x80
10052204:	05db      	lsls	r3, r3, #23
10052206:	400a      	ands	r2, r1
10052208:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
1005220a:	e011      	b.n	10052230 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_HIGH_LEVEL:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
1005220c:	2380      	movs	r3, #128	@ 0x80
1005220e:	05db      	lsls	r3, r3, #23
10052210:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10052212:	683b      	ldr	r3, [r7, #0]
10052214:	43d9      	mvns	r1, r3
10052216:	2380      	movs	r3, #128	@ 0x80
10052218:	05db      	lsls	r3, r3, #23
1005221a:	400a      	ands	r2, r1
1005221c:	631a      	str	r2, [r3, #48]	@ 0x30
      SET_BIT(SYSCFG->BLERXTX_IEVR, Signal);
1005221e:	2380      	movs	r3, #128	@ 0x80
10052220:	05db      	lsls	r3, r3, #23
10052222:	6b59      	ldr	r1, [r3, #52]	@ 0x34
10052224:	2380      	movs	r3, #128	@ 0x80
10052226:	05db      	lsls	r3, r3, #23
10052228:	683a      	ldr	r2, [r7, #0]
1005222a:	430a      	orrs	r2, r1
1005222c:	635a      	str	r2, [r3, #52]	@ 0x34
    }
  }
}
1005222e:	e7ff      	b.n	10052230 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
10052230:	46c0      	nop			@ (mov r8, r8)
10052232:	46bd      	mov	sp, r7
10052234:	b002      	add	sp, #8
10052236:	bd80      	pop	{r7, pc}
10052238:	1006a240 	.word	0x1006a240

1005223c <LL_SYSCFG_BLERXTX_IsInterruptPending>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSCFG_BLERXTX_IsInterruptPending(uint32_t Signal)
{
1005223c:	b580      	push	{r7, lr}
1005223e:	b082      	sub	sp, #8
10052240:	af00      	add	r7, sp, #0
10052242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SYSCFG->BLERXTX_ISCR, Signal) == (Signal)) ? 1UL : 0UL);
10052244:	2380      	movs	r3, #128	@ 0x80
10052246:	05db      	lsls	r3, r3, #23
10052248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1005224a:	687a      	ldr	r2, [r7, #4]
1005224c:	4013      	ands	r3, r2
1005224e:	687a      	ldr	r2, [r7, #4]
10052250:	429a      	cmp	r2, r3
10052252:	d101      	bne.n	10052258 <LL_SYSCFG_BLERXTX_IsInterruptPending+0x1c>
10052254:	2301      	movs	r3, #1
10052256:	e000      	b.n	1005225a <LL_SYSCFG_BLERXTX_IsInterruptPending+0x1e>
10052258:	2300      	movs	r3, #0
}
1005225a:	0018      	movs	r0, r3
1005225c:	46bd      	mov	sp, r7
1005225e:	b002      	add	sp, #8
10052260:	bd80      	pop	{r7, pc}

10052262 <LL_SYSCFG_BLERXTX_ClearInterrupt>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_ClearInterrupt(uint32_t Signal)
{
10052262:	b580      	push	{r7, lr}
10052264:	b082      	sub	sp, #8
10052266:	af00      	add	r7, sp, #0
10052268:	6078      	str	r0, [r7, #4]
  WRITE_REG(SYSCFG->BLERXTX_ISCR, Signal);
1005226a:	2380      	movs	r3, #128	@ 0x80
1005226c:	05db      	lsls	r3, r3, #23
1005226e:	687a      	ldr	r2, [r7, #4]
10052270:	63da      	str	r2, [r3, #60]	@ 0x3c
}
10052272:	46c0      	nop			@ (mov r8, r8)
10052274:	46bd      	mov	sp, r7
10052276:	b002      	add	sp, #8
10052278:	bd80      	pop	{r7, pc}
	...

1005227c <LL_APB0_GRP1_EnableClock>:
{
1005227c:	b580      	push	{r7, lr}
1005227e:	b084      	sub	sp, #16
10052280:	af00      	add	r7, sp, #0
10052282:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
10052284:	4b07      	ldr	r3, [pc, #28]	@ (100522a4 <LL_APB0_GRP1_EnableClock+0x28>)
10052286:	6d59      	ldr	r1, [r3, #84]	@ 0x54
10052288:	4b06      	ldr	r3, [pc, #24]	@ (100522a4 <LL_APB0_GRP1_EnableClock+0x28>)
1005228a:	687a      	ldr	r2, [r7, #4]
1005228c:	430a      	orrs	r2, r1
1005228e:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10052290:	4b04      	ldr	r3, [pc, #16]	@ (100522a4 <LL_APB0_GRP1_EnableClock+0x28>)
10052292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10052294:	687a      	ldr	r2, [r7, #4]
10052296:	4013      	ands	r3, r2
10052298:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1005229a:	68fb      	ldr	r3, [r7, #12]
}
1005229c:	46c0      	nop			@ (mov r8, r8)
1005229e:	46bd      	mov	sp, r7
100522a0:	b004      	add	sp, #16
100522a2:	bd80      	pop	{r7, pc}
100522a4:	48400000 	.word	0x48400000

100522a8 <RADIO_GetMaxPALevel>:

  return pa_level_table[PA_Level];
}

uint8_t RADIO_GetMaxPALevel(void)
{
100522a8:	b580      	push	{r7, lr}
100522aa:	af00      	add	r7, sp, #0
  return HP_TX_POWER_LEVELS - 1;
100522ac:	231f      	movs	r3, #31
}
100522ae:	0018      	movs	r0, r3
100522b0:	46bd      	mov	sp, r7
100522b2:	bd80      	pop	{r7, pc}

100522b4 <RADIO_GetDefaultPALevel>:

uint8_t RADIO_GetDefaultPALevel(void)
{
100522b4:	b580      	push	{r7, lr}
100522b6:	af00      	add	r7, sp, #0
  return DEFAULT_TX_PA_LEVEL;
100522b8:	231f      	movs	r3, #31
}
100522ba:	0018      	movs	r0, r3
100522bc:	46bd      	mov	sp, r7
100522be:	bd80      	pop	{r7, pc}

100522c0 <RADIO_SetHighPower>:
        *Max_Tx_Power = MAX_TX_POWER_LOW;
    }
}

void RADIO_SetHighPower(FunctionalState state)
{
100522c0:	b580      	push	{r7, lr}
100522c2:	b082      	sub	sp, #8
100522c4:	af00      	add	r7, sp, #0
100522c6:	0002      	movs	r2, r0
100522c8:	1dfb      	adds	r3, r7, #7
100522ca:	701a      	strb	r2, [r3, #0]
  if(state != DISABLE)
100522cc:	1dfb      	adds	r3, r7, #7
100522ce:	781b      	ldrb	r3, [r3, #0]
100522d0:	2b00      	cmp	r3, #0
100522d2:	d01d      	beq.n	10052310 <RADIO_SetHighPower+0x50>
  {
    if(high_power == FALSE)
100522d4:	4b2d      	ldr	r3, [pc, #180]	@ (1005238c <RADIO_SetHighPower+0xcc>)
100522d6:	781b      	ldrb	r3, [r3, #0]
100522d8:	2b00      	cmp	r3, #0
100522da:	d129      	bne.n	10052330 <RADIO_SetHighPower+0x70>
    {
      high_power = TRUE;
100522dc:	4b2b      	ldr	r3, [pc, #172]	@ (1005238c <RADIO_SetHighPower+0xcc>)
100522de:	2201      	movs	r2, #1
100522e0:	701a      	strb	r2, [r3, #0]
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
      LL_APB0_GRP1_EnableClock(LL_APB0_GRP1_PERIPH_SYSCFG);
100522e2:	2380      	movs	r3, #128	@ 0x80
100522e4:	005b      	lsls	r3, r3, #1
100522e6:	0018      	movs	r0, r3
100522e8:	f7ff ffc8 	bl	1005227c <LL_APB0_GRP1_EnableClock>
      LL_SYSCFG_BLERXTX_SetTrigger(LL_SYSCFG_BLERXTX_TRIGGER_BOTH_EDGE, LL_SYSCFG_BLE_TX_EVENT);
100522ec:	2101      	movs	r1, #1
100522ee:	2002      	movs	r0, #2
100522f0:	f7ff ff32 	bl	10052158 <LL_SYSCFG_BLERXTX_SetTrigger>
      LL_SYSCFG_BLERXTX_SetType(LL_SYSCFG_BLERXTX_DET_TYPE_EDGE, LL_SYSCFG_BLE_TX_EVENT);
100522f4:	2101      	movs	r1, #1
100522f6:	2000      	movs	r0, #0
100522f8:	f7ff ff0d 	bl	10052116 <LL_SYSCFG_BLERXTX_SetType>
      LL_SYSCFG_BLERXTX_EnableIT(LL_SYSCFG_BLE_TX_EVENT);
100522fc:	2001      	movs	r0, #1
100522fe:	f7ff fee9 	bl	100520d4 <LL_SYSCFG_BLERXTX_EnableIT>
      LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
10052302:	2001      	movs	r0, #1
10052304:	f7ff ffad 	bl	10052262 <LL_SYSCFG_BLERXTX_ClearInterrupt>
      NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
10052308:	2019      	movs	r0, #25
1005230a:	f7ff fe4d 	bl	10051fa8 <__NVIC_EnableIRQ>
1005230e:	e00f      	b.n	10052330 <RADIO_SetHighPower+0x70>
#endif
    }
  }
  else
  {
    if(high_power == TRUE)
10052310:	4b1e      	ldr	r3, [pc, #120]	@ (1005238c <RADIO_SetHighPower+0xcc>)
10052312:	781b      	ldrb	r3, [r3, #0]
10052314:	2b01      	cmp	r3, #1
10052316:	d10b      	bne.n	10052330 <RADIO_SetHighPower+0x70>
    {
      high_power = FALSE;
10052318:	4b1c      	ldr	r3, [pc, #112]	@ (1005238c <RADIO_SetHighPower+0xcc>)
1005231a:	2200      	movs	r2, #0
1005231c:	701a      	strb	r2, [r3, #0]
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
      LL_SYSCFG_BLERXTX_DisableIT(LL_SYSCFG_BLE_TX_EVENT);
1005231e:	2001      	movs	r0, #1
10052320:	f7ff fee8 	bl	100520f4 <LL_SYSCFG_BLERXTX_DisableIT>
      NVIC_DisableIRQ(RADIO_TXRX_SEQ_IRQn);
10052324:	2019      	movs	r0, #25
10052326:	f7ff fe59 	bl	10051fdc <__NVIC_DisableIRQ>
      LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
1005232a:	2001      	movs	r0, #1
1005232c:	f7ff ff99 	bl	10052262 <LL_SYSCFG_BLERXTX_ClearInterrupt>
#endif
    }
  }

  if (LL_PWR_IsEnabledSMPSPrechargeMode() || (LL_PWR_GetSMPSMode() == LL_PWR_NO_SMPS))
10052330:	f7ff fea8 	bl	10052084 <LL_PWR_IsEnabledSMPSPrechargeMode>
10052334:	1e03      	subs	r3, r0, #0
10052336:	d124      	bne.n	10052382 <RADIO_SetHighPower+0xc2>
10052338:	f7ff fe82 	bl	10052040 <LL_PWR_GetSMPSMode>
1005233c:	0002      	movs	r2, r0
1005233e:	2380      	movs	r3, #128	@ 0x80
10052340:	00db      	lsls	r3, r3, #3
10052342:	429a      	cmp	r2, r3
10052344:	d01d      	beq.n	10052382 <RADIO_SetHighPower+0xc2>
    return;

  /* Bypass SMPS */
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_SMPS_PRECHARGE);
10052346:	2380      	movs	r3, #128	@ 0x80
10052348:	009b      	lsls	r3, r3, #2
1005234a:	0018      	movs	r0, r3
1005234c:	f7ff fe84 	bl	10052058 <LL_PWR_SetSMPSPrechargeMode>
  while(LL_PWR_IsSMPSReady());
10052350:	46c0      	nop			@ (mov r8, r8)
10052352:	f7ff fe65 	bl	10052020 <LL_PWR_IsSMPSReady>
10052356:	1e03      	subs	r3, r0, #0
10052358:	d1fb      	bne.n	10052352 <RADIO_SetHighPower+0x92>
  /* Change level */
  if(state != DISABLE)
1005235a:	1dfb      	adds	r3, r7, #7
1005235c:	781b      	ldrb	r3, [r3, #0]
1005235e:	2b00      	cmp	r3, #0
10052360:	d003      	beq.n	1005236a <RADIO_SetHighPower+0xaa>
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V90);
10052362:	200e      	movs	r0, #14
10052364:	f7ff fea2 	bl	100520ac <LL_PWR_SMPS_SetOutputVoltageLevel>
10052368:	e002      	b.n	10052370 <RADIO_SetHighPower+0xb0>
  }
  else
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V40);
1005236a:	2004      	movs	r0, #4
1005236c:	f7ff fe9e 	bl	100520ac <LL_PWR_SMPS_SetOutputVoltageLevel>
  }
  /* Disable bypass*/
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_NO_SMPS_PRECHARGE);
10052370:	2000      	movs	r0, #0
10052372:	f7ff fe71 	bl	10052058 <LL_PWR_SetSMPSPrechargeMode>
  while(!LL_PWR_IsSMPSReady());
10052376:	46c0      	nop			@ (mov r8, r8)
10052378:	f7ff fe52 	bl	10052020 <LL_PWR_IsSMPSReady>
1005237c:	1e03      	subs	r3, r0, #0
1005237e:	d0fb      	beq.n	10052378 <RADIO_SetHighPower+0xb8>
10052380:	e000      	b.n	10052384 <RADIO_SetHighPower+0xc4>
    return;
10052382:	46c0      	nop			@ (mov r8, r8)
}
10052384:	46bd      	mov	sp, r7
10052386:	b002      	add	sp, #8
10052388:	bd80      	pop	{r7, pc}
1005238a:	46c0      	nop			@ (mov r8, r8)
1005238c:	2000280f 	.word	0x2000280f

10052390 <HAL_RADIO_TxRxSeqCallback>:

void HAL_RADIO_TxRxSeqCallback(void)
{
10052390:	b580      	push	{r7, lr}
10052392:	af00      	add	r7, sp, #0
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
  if(high_power == FALSE)
10052394:	4b16      	ldr	r3, [pc, #88]	@ (100523f0 <HAL_RADIO_TxRxSeqCallback+0x60>)
10052396:	781b      	ldrb	r3, [r3, #0]
10052398:	2b00      	cmp	r3, #0
1005239a:	d025      	beq.n	100523e8 <HAL_RADIO_TxRxSeqCallback+0x58>
    return;

  if(LL_SYSCFG_BLERXTX_IsInterruptPending(LL_SYSCFG_BLE_TX_EVENT)){
1005239c:	2001      	movs	r0, #1
1005239e:	f7ff ff4d 	bl	1005223c <LL_SYSCFG_BLERXTX_IsInterruptPending>
100523a2:	1e03      	subs	r3, r0, #0
100523a4:	d021      	beq.n	100523ea <HAL_RADIO_TxRxSeqCallback+0x5a>
    if(RRM->FSM_STATUS_DIG_OUT & RRM_FSM_STATUS_DIG_OUT_STATUS_4)
100523a6:	4a13      	ldr	r2, [pc, #76]	@ (100523f4 <HAL_RADIO_TxRxSeqCallback+0x64>)
100523a8:	23a6      	movs	r3, #166	@ 0xa6
100523aa:	009b      	lsls	r3, r3, #2
100523ac:	58d3      	ldr	r3, [r2, r3]
100523ae:	2210      	movs	r2, #16
100523b0:	4013      	ands	r3, r2
100523b2:	d00a      	beq.n	100523ca <HAL_RADIO_TxRxSeqCallback+0x3a>
    {
      // Rising edge
      MODIFY_REG_FIELD(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS, 1);
100523b4:	4a0f      	ldr	r2, [pc, #60]	@ (100523f4 <HAL_RADIO_TxRxSeqCallback+0x64>)
100523b6:	2395      	movs	r3, #149	@ 0x95
100523b8:	009b      	lsls	r3, r3, #2
100523ba:	58d3      	ldr	r3, [r2, r3]
100523bc:	490d      	ldr	r1, [pc, #52]	@ (100523f4 <HAL_RADIO_TxRxSeqCallback+0x64>)
100523be:	2202      	movs	r2, #2
100523c0:	431a      	orrs	r2, r3
100523c2:	2395      	movs	r3, #149	@ 0x95
100523c4:	009b      	lsls	r3, r3, #2
100523c6:	50ca      	str	r2, [r1, r3]
100523c8:	e00a      	b.n	100523e0 <HAL_RADIO_TxRxSeqCallback+0x50>
    }
    else
    {
      // Falling edge
      MODIFY_REG_FIELD(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS, 0);
100523ca:	4a0a      	ldr	r2, [pc, #40]	@ (100523f4 <HAL_RADIO_TxRxSeqCallback+0x64>)
100523cc:	2395      	movs	r3, #149	@ 0x95
100523ce:	009b      	lsls	r3, r3, #2
100523d0:	58d3      	ldr	r3, [r2, r3]
100523d2:	4908      	ldr	r1, [pc, #32]	@ (100523f4 <HAL_RADIO_TxRxSeqCallback+0x64>)
100523d4:	2202      	movs	r2, #2
100523d6:	4393      	bics	r3, r2
100523d8:	001a      	movs	r2, r3
100523da:	2395      	movs	r3, #149	@ 0x95
100523dc:	009b      	lsls	r3, r3, #2
100523de:	50ca      	str	r2, [r1, r3]
    }
    LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
100523e0:	2001      	movs	r0, #1
100523e2:	f7ff ff3e 	bl	10052262 <LL_SYSCFG_BLERXTX_ClearInterrupt>
100523e6:	e000      	b.n	100523ea <HAL_RADIO_TxRxSeqCallback+0x5a>
    return;
100523e8:	46c0      	nop			@ (mov r8, r8)
  }
#endif
}
100523ea:	46bd      	mov	sp, r7
100523ec:	bd80      	pop	{r7, pc}
100523ee:	46c0      	nop			@ (mov r8, r8)
100523f0:	2000280f 	.word	0x2000280f
100523f4:	60001400 	.word	0x60001400

100523f8 <LL_SYSCFG_GetDeviceRevision>:
{
100523f8:	b580      	push	{r7, lr}
100523fa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_REVISION) >> SYSCFG_DIE_ID_REVISION_Pos);
100523fc:	2380      	movs	r3, #128	@ 0x80
100523fe:	05db      	lsls	r3, r3, #23
10052400:	681b      	ldr	r3, [r3, #0]
10052402:	220f      	movs	r2, #15
10052404:	4013      	ands	r3, r2
}
10052406:	0018      	movs	r0, r3
10052408:	46bd      	mov	sp, r7
1005240a:	bd80      	pop	{r7, pc}

1005240c <LL_SYSCFG_GetDeviceVersion>:
{
1005240c:	b580      	push	{r7, lr}
1005240e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_VERSION) >> SYSCFG_DIE_ID_VERSION_Pos);
10052410:	2380      	movs	r3, #128	@ 0x80
10052412:	05db      	lsls	r3, r3, #23
10052414:	681b      	ldr	r3, [r3, #0]
10052416:	091b      	lsrs	r3, r3, #4
10052418:	220f      	movs	r2, #15
1005241a:	4013      	ands	r3, r2
}
1005241c:	0018      	movs	r0, r3
1005241e:	46bd      	mov	sp, r7
10052420:	bd80      	pop	{r7, pc}

10052422 <LL_SYSCFG_GetDeviceJTAG_ID>:
{
10052422:	b580      	push	{r7, lr}
10052424:	af00      	add	r7, sp, #0
  return (uint32_t)READ_REG(SYSCFG->JTAG_ID);
10052426:	2380      	movs	r3, #128	@ 0x80
10052428:	05db      	lsls	r3, r3, #23
1005242a:	685b      	ldr	r3, [r3, #4]
}
1005242c:	0018      	movs	r0, r3
1005242e:	46bd      	mov	sp, r7
10052430:	bd80      	pop	{r7, pc}
	...

10052434 <LL_GetFlashSize>:
    * @note   This bitfield indicates the words number of the device Flash memory expressed.
    *         As an example, 0x7FFF corresponds to 128 Kbytes.
    * @retval FLASH_SIZE[15:0]: Flash memory size
    */
__STATIC_INLINE uint32_t LL_GetFlashSize(void)
{
10052434:	b580      	push	{r7, lr}
10052436:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)FLASHSIZE_BASE_ADDRESS)) & 0x0000FFFFUL);
10052438:	4b03      	ldr	r3, [pc, #12]	@ (10052448 <LL_GetFlashSize+0x14>)
1005243a:	681b      	ldr	r3, [r3, #0]
1005243c:	041b      	lsls	r3, r3, #16
1005243e:	0c1b      	lsrs	r3, r3, #16
}
10052440:	0018      	movs	r0, r3
10052442:	46bd      	mov	sp, r7
10052444:	bd80      	pop	{r7, pc}
10052446:	46c0      	nop			@ (mov r8, r8)
10052448:	40001014 	.word	0x40001014

1005244c <LL_GetRAMSize>:
    * @arg LL_UTILS_RAMSIZE_32K
    * @arg LL_UTILS_RAMSIZE_48K
    * @arg LL_UTILS_RAMSIZE_64K
    */
  __STATIC_INLINE uint32_t LL_GetRAMSize(void)
  {
1005244c:	b580      	push	{r7, lr}
1005244e:	b082      	sub	sp, #8
10052450:	af00      	add	r7, sp, #0

    if (tmpreg == 0) {
      tmpreg = LL_UTILS_RAMSIZE_32K;
    }
#else
    tmpreg = LL_UTILS_RAMSIZE_24K;
10052452:	2300      	movs	r3, #0
10052454:	607b      	str	r3, [r7, #4]
#endif
    
    return tmpreg;
10052456:	687b      	ldr	r3, [r7, #4]
  }
10052458:	0018      	movs	r0, r3
1005245a:	46bd      	mov	sp, r7
1005245c:	b002      	add	sp, #8
1005245e:	bd80      	pop	{r7, pc}

10052460 <GetPartInfo>:
/* Private variables ---------------------------------------------------------*/

/*---------------------------------------------------------------------------*/

void GetPartInfo(PartInfoType *partInfo)
{
10052460:	b580      	push	{r7, lr}
10052462:	b084      	sub	sp, #16
10052464:	af00      	add	r7, sp, #0
10052466:	6078      	str	r0, [r7, #4]
  uint32_t jtag_id;

  partInfo->die_id = DIE_SW_ID_UNKOWN;
10052468:	687b      	ldr	r3, [r7, #4]
1005246a:	22ff      	movs	r2, #255	@ 0xff
1005246c:	701a      	strb	r2, [r3, #0]

  jtag_id = LL_SYSCFG_GetDeviceJTAG_ID();
1005246e:	f7ff ffd8 	bl	10052422 <LL_SYSCFG_GetDeviceJTAG_ID>
10052472:	0003      	movs	r3, r0
10052474:	60fb      	str	r3, [r7, #12]
  if(jtag_id == JTAG_ID_CODE_STM32WB07XX)
  {
    partInfo->die_id = DIE_SW_ID_STM32WB07XX;
  }
#elif defined(STM32WB05)
  if(jtag_id == JTAG_ID_CODE_STM32WB05XX)
10052476:	68fb      	ldr	r3, [r7, #12]
10052478:	4a18      	ldr	r2, [pc, #96]	@ (100524dc <GetPartInfo+0x7c>)
1005247a:	4293      	cmp	r3, r2
1005247c:	d102      	bne.n	10052484 <GetPartInfo+0x24>
  {
    partInfo->die_id = DIE_SW_ID_STM32WB05XX;
1005247e:	687b      	ldr	r3, [r7, #4]
10052480:	2205      	movs	r2, #5
10052482:	701a      	strb	r2, [r3, #0]
  }
#endif

  partInfo->die_major     =  LL_SYSCFG_GetDeviceVersion();
10052484:	f7ff ffc2 	bl	1005240c <LL_SYSCFG_GetDeviceVersion>
10052488:	0003      	movs	r3, r0
1005248a:	b2da      	uxtb	r2, r3
1005248c:	687b      	ldr	r3, [r7, #4]
1005248e:	705a      	strb	r2, [r3, #1]
  partInfo->die_cut       =  LL_SYSCFG_GetDeviceRevision();
10052490:	f7ff ffb2 	bl	100523f8 <LL_SYSCFG_GetDeviceRevision>
10052494:	0003      	movs	r3, r0
10052496:	b2da      	uxtb	r2, r3
10052498:	687b      	ldr	r3, [r7, #4]
1005249a:	709a      	strb	r2, [r3, #2]
  partInfo->jtag_id_code  =  LL_SYSCFG_GetDeviceJTAG_ID(); // Duplicated
1005249c:	f7ff ffc1 	bl	10052422 <LL_SYSCFG_GetDeviceJTAG_ID>
100524a0:	0002      	movs	r2, r0
100524a2:	687b      	ldr	r3, [r7, #4]
100524a4:	605a      	str	r2, [r3, #4]
  partInfo->flash_size    =  (LL_GetFlashSize() + 1) * 4;
100524a6:	f7ff ffc5 	bl	10052434 <LL_GetFlashSize>
100524aa:	0003      	movs	r3, r0
100524ac:	3301      	adds	r3, #1
100524ae:	009a      	lsls	r2, r3, #2
100524b0:	687b      	ldr	r3, [r7, #4]
100524b2:	609a      	str	r2, [r3, #8]

  if (LL_GetRAMSize() != LL_UTILS_RAMSIZE_24K)
100524b4:	f7ff ffca 	bl	1005244c <LL_GetRAMSize>
100524b8:	1e03      	subs	r3, r0, #0
100524ba:	d007      	beq.n	100524cc <GetPartInfo+0x6c>
  {
    partInfo->ram_size    =  (LL_GetRAMSize() + 1) * 16 * 1024;
100524bc:	f7ff ffc6 	bl	1005244c <LL_GetRAMSize>
100524c0:	0003      	movs	r3, r0
100524c2:	3301      	adds	r3, #1
100524c4:	039a      	lsls	r2, r3, #14
100524c6:	687b      	ldr	r3, [r7, #4]
100524c8:	60da      	str	r2, [r3, #12]
  else
  {
    partInfo->ram_size    =  24*1024;
  }

}
100524ca:	e003      	b.n	100524d4 <GetPartInfo+0x74>
    partInfo->ram_size    =  24*1024;
100524cc:	687b      	ldr	r3, [r7, #4]
100524ce:	22c0      	movs	r2, #192	@ 0xc0
100524d0:	01d2      	lsls	r2, r2, #7
100524d2:	60da      	str	r2, [r3, #12]
}
100524d4:	46c0      	nop			@ (mov r8, r8)
100524d6:	46bd      	mov	sp, r7
100524d8:	b004      	add	sp, #16
100524da:	bd80      	pop	{r7, pc}
100524dc:	02028041 	.word	0x02028041

100524e0 <__NVIC_SystemReset>:
{
100524e0:	b580      	push	{r7, lr}
100524e2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
100524e4:	f3bf 8f4f 	dsb	sy
}
100524e8:	46c0      	nop			@ (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
100524ea:	4b04      	ldr	r3, [pc, #16]	@ (100524fc <__NVIC_SystemReset+0x1c>)
100524ec:	4a04      	ldr	r2, [pc, #16]	@ (10052500 <__NVIC_SystemReset+0x20>)
100524ee:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
100524f0:	f3bf 8f4f 	dsb	sy
}
100524f4:	46c0      	nop			@ (mov r8, r8)
    __NOP();
100524f6:	46c0      	nop			@ (mov r8, r8)
100524f8:	e7fd      	b.n	100524f6 <__NVIC_SystemReset+0x16>
100524fa:	46c0      	nop			@ (mov r8, r8)
100524fc:	e000ed00 	.word	0xe000ed00
10052500:	05fa0004 	.word	0x05fa0004

10052504 <ModulesInit>:

/* USER CODE END PF */

/* Functions Definition ------------------------------------------------------*/
void ModulesInit(void)
{
10052504:	b580      	push	{r7, lr}
10052506:	af00      	add	r7, sp, #0
  BLENVM_Init();
10052508:	f000 fde4 	bl	100530d4 <BLENVM_Init>
  if (PKAMGR_Init() == PKAMGR_ERROR)
1005250c:	f7ff fb52 	bl	10051bb4 <PKAMGR_Init>
10052510:	0003      	movs	r3, r0
10052512:	3301      	adds	r3, #1
10052514:	d101      	bne.n	1005251a <ModulesInit+0x16>
  {
    Error_Handler();
10052516:	f7ef fe29 	bl	1004216c <Error_Handler>
  }
}
1005251a:	46c0      	nop			@ (mov r8, r8)
1005251c:	46bd      	mov	sp, r7
1005251e:	bd80      	pop	{r7, pc}

10052520 <BLE_Init>:

void BLE_Init(void)
{
10052520:	b5f0      	push	{r4, r5, r6, r7, lr}
10052522:	b099      	sub	sp, #100	@ 0x64
10052524:	af04      	add	r7, sp, #16
  uint8_t role;
  uint8_t privacy_type = 0;
10052526:	234f      	movs	r3, #79	@ 0x4f
10052528:	18fb      	adds	r3, r7, r3
1005252a:	2200      	movs	r2, #0
1005252c:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_service_changed_handle;
  uint16_t gap_dev_name_char_handle;
  uint16_t gap_appearance_char_handle;
  uint16_t gap_periph_pref_conn_param_char_handle;
  uint8_t bd_address[6] = {0};
1005252e:	233c      	movs	r3, #60	@ 0x3c
10052530:	18fb      	adds	r3, r7, r3
10052532:	0018      	movs	r0, r3
10052534:	2306      	movs	r3, #6
10052536:	001a      	movs	r2, r3
10052538:	2100      	movs	r1, #0
1005253a:	f016 f8ff 	bl	1006873c <memset>
  uint8_t bd_address_len= 6;
1005253e:	234e      	movs	r3, #78	@ 0x4e
10052540:	18fb      	adds	r3, r7, r3
10052542:	2206      	movs	r2, #6
10052544:	701a      	strb	r2, [r3, #0]
  uint16_t appearance = CFG_GAP_APPEARANCE;
10052546:	233a      	movs	r3, #58	@ 0x3a
10052548:	18fb      	adds	r3, r7, r3
1005254a:	22a0      	movs	r2, #160	@ 0xa0
1005254c:	0092      	lsls	r2, r2, #2
1005254e:	801a      	strh	r2, [r3, #0]

  BLE_STACK_InitTypeDef BLE_STACK_InitParams = {
10052550:	1d3a      	adds	r2, r7, #4
10052552:	4b5b      	ldr	r3, [pc, #364]	@ (100526c0 <BLE_Init+0x1a0>)
10052554:	0010      	movs	r0, r2
10052556:	0019      	movs	r1, r3
10052558:	2334      	movs	r3, #52	@ 0x34
1005255a:	001a      	movs	r2, r3
1005255c:	f016 f963 	bl	10068826 <memcpy>
    .isr1_fifo_size = CFG_BLE_ISR1_FIFO_SIZE,
    .user_fifo_size = CFG_BLE_USER_FIFO_SIZE
  };

  /* Bluetooth LE stack init */
  ret = BLE_STACK_Init(&BLE_STACK_InitParams);
10052560:	254d      	movs	r5, #77	@ 0x4d
10052562:	197c      	adds	r4, r7, r5
10052564:	1d3b      	adds	r3, r7, #4
10052566:	0018      	movs	r0, r3
10052568:	f003 fbf2 	bl	10055d50 <BLE_STACK_Init>
1005256c:	0003      	movs	r3, r0
1005256e:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS) {
10052570:	197b      	adds	r3, r7, r5
10052572:	781b      	ldrb	r3, [r3, #0]
10052574:	2b00      	cmp	r3, #0
10052576:	d001      	beq.n	1005257c <BLE_Init+0x5c>
    APP_DBG_MSG("Error in BLE_STACK_Init() 0x%02x\r\n", ret);
    Error_Handler();
10052578:	f7ef fdf8 	bl	1004216c <Error_Handler>
  }

#if (CFG_BD_ADDRESS_TYPE == HCI_ADDR_PUBLIC)

  bd_address[0] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x0000000000FF));
1005257c:	213c      	movs	r1, #60	@ 0x3c
1005257e:	187b      	adds	r3, r7, r1
10052580:	2234      	movs	r2, #52	@ 0x34
10052582:	701a      	strb	r2, [r3, #0]
  bd_address[1] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x00000000FF00) >> 8);
10052584:	187b      	adds	r3, r7, r1
10052586:	2212      	movs	r2, #18
10052588:	705a      	strb	r2, [r3, #1]
  bd_address[2] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x000000FF0000) >> 16);
1005258a:	187b      	adds	r3, r7, r1
1005258c:	222a      	movs	r2, #42	@ 0x2a
1005258e:	709a      	strb	r2, [r3, #2]
  bd_address[3] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x0000FF000000) >> 24);
10052590:	187b      	adds	r3, r7, r1
10052592:	22e1      	movs	r2, #225	@ 0xe1
10052594:	70da      	strb	r2, [r3, #3]
  bd_address[4] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x00FF00000000) >> 32);
10052596:	187b      	adds	r3, r7, r1
10052598:	2208      	movs	r2, #8
1005259a:	711a      	strb	r2, [r3, #4]
  bd_address[5] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0xFF0000000000) >> 40);
1005259c:	187b      	adds	r3, r7, r1
1005259e:	2200      	movs	r2, #0
100525a0:	715a      	strb	r2, [r3, #5]
  (void)bd_address_len;

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bd_address);
100525a2:	254d      	movs	r5, #77	@ 0x4d
100525a4:	197c      	adds	r4, r7, r5
100525a6:	187b      	adds	r3, r7, r1
100525a8:	001a      	movs	r2, r3
100525aa:	2106      	movs	r1, #6
100525ac:	2000      	movs	r0, #0
100525ae:	f003 f8c7 	bl	10055740 <aci_hal_write_config_data>
100525b2:	0003      	movs	r3, r0
100525b4:	7023      	strb	r3, [r4, #0]
#endif

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(0, CFG_TX_POWER);
100525b6:	197c      	adds	r4, r7, r5
100525b8:	211f      	movs	r1, #31
100525ba:	2000      	movs	r0, #0
100525bc:	f003 f8c4 	bl	10055748 <aci_hal_set_tx_power_level>
100525c0:	0003      	movs	r3, r0
100525c2:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_srv_profile_init(GATT_INIT_SERVICE_CHANGED_BIT, &gatt_service_changed_handle);
100525c4:	197c      	adds	r4, r7, r5
100525c6:	234a      	movs	r3, #74	@ 0x4a
100525c8:	18fb      	adds	r3, r7, r3
100525ca:	0019      	movs	r1, r3
100525cc:	2001      	movs	r0, #1
100525ce:	f7ff fc63 	bl	10051e98 <aci_gatt_srv_profile_init>
100525d2:	0003      	movs	r3, r0
100525d4:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize GAP interface
   */
  role = 0U;
100525d6:	214c      	movs	r1, #76	@ 0x4c
100525d8:	187b      	adds	r3, r7, r1
100525da:	2200      	movs	r2, #0
100525dc:	701a      	strb	r2, [r3, #0]
  role |= GAP_PERIPHERAL_ROLE;
100525de:	187b      	adds	r3, r7, r1
100525e0:	187a      	adds	r2, r7, r1
100525e2:	7812      	ldrb	r2, [r2, #0]
100525e4:	2101      	movs	r1, #1
100525e6:	430a      	orrs	r2, r1
100525e8:	701a      	strb	r2, [r3, #0]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  ret = aci_gap_init(privacy_type, CFG_BD_ADDRESS_TYPE);
100525ea:	197c      	adds	r4, r7, r5
100525ec:	224f      	movs	r2, #79	@ 0x4f
100525ee:	18bb      	adds	r3, r7, r2
100525f0:	781b      	ldrb	r3, [r3, #0]
100525f2:	2100      	movs	r1, #0
100525f4:	0018      	movs	r0, r3
100525f6:	f002 febd 	bl	10055374 <aci_gap_init>
100525fa:	0003      	movs	r3, r0
100525fc:	7023      	strb	r3, [r4, #0]
  else
  {
    APP_DBG_MSG("  Success: aci_gap_init command\n");
  }

  ret = aci_gap_profile_init(role, privacy_type,
100525fe:	002e      	movs	r6, r5
10052600:	197c      	adds	r4, r7, r5
10052602:	2546      	movs	r5, #70	@ 0x46
10052604:	197d      	adds	r5, r7, r5
10052606:	2348      	movs	r3, #72	@ 0x48
10052608:	18fa      	adds	r2, r7, r3
1005260a:	204f      	movs	r0, #79	@ 0x4f
1005260c:	183b      	adds	r3, r7, r0
1005260e:	7819      	ldrb	r1, [r3, #0]
10052610:	234c      	movs	r3, #76	@ 0x4c
10052612:	18fb      	adds	r3, r7, r3
10052614:	7818      	ldrb	r0, [r3, #0]
10052616:	2344      	movs	r3, #68	@ 0x44
10052618:	18fb      	adds	r3, r7, r3
1005261a:	9300      	str	r3, [sp, #0]
1005261c:	002b      	movs	r3, r5
1005261e:	f7ff fad5 	bl	10051bcc <aci_gap_profile_init>
10052622:	0003      	movs	r3, r0
10052624:	7023      	strb	r3, [r4, #0]
  APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",bd_address[5],bd_address[4],bd_address[3],bd_address[2],bd_address[1],bd_address[0]);
#else
#error "Invalid CFG_BD_ADDRESS_TYPE"
#endif

  ret = Gap_profile_set_dev_name(0, sizeof(a_GapDeviceName), (uint8_t*)a_GapDeviceName);
10052626:	0035      	movs	r5, r6
10052628:	197c      	adds	r4, r7, r5
1005262a:	4b26      	ldr	r3, [pc, #152]	@ (100526c4 <BLE_Init+0x1a4>)
1005262c:	001a      	movs	r2, r3
1005262e:	2119      	movs	r1, #25
10052630:	2000      	movs	r0, #0
10052632:	f7ff fb3d 	bl	10051cb0 <Gap_profile_set_dev_name>
10052636:	0003      	movs	r3, r0
10052638:	7023      	strb	r3, [r4, #0]
  else
  {
    APP_DBG_MSG("  Success: Gap_profile_set_dev_name - Device Name\n");
  }

  ret = Gap_profile_set_appearance(0, sizeof(appearance), (uint8_t*)&appearance);
1005263a:	197c      	adds	r4, r7, r5
1005263c:	233a      	movs	r3, #58	@ 0x3a
1005263e:	18fb      	adds	r3, r7, r3
10052640:	001a      	movs	r2, r3
10052642:	2102      	movs	r1, #2
10052644:	2000      	movs	r0, #0
10052646:	f7ff fb59 	bl	10051cfc <Gap_profile_set_appearance>
1005264a:	0003      	movs	r3, r0
1005264c:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize IO capability
   */
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
1005264e:	4b1e      	ldr	r3, [pc, #120]	@ (100526c8 <BLE_Init+0x1a8>)
10052650:	2201      	movs	r2, #1
10052652:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
10052654:	4b1c      	ldr	r3, [pc, #112]	@ (100526c8 <BLE_Init+0x1a8>)
10052656:	781b      	ldrb	r3, [r3, #0]
10052658:	197c      	adds	r4, r7, r5
1005265a:	0018      	movs	r0, r3
1005265c:	f7fd fb4e 	bl	1004fcfc <aci_gap_set_io_capability>
10052660:	0003      	movs	r3, r0
10052662:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize authentication
   */
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode             = CFG_MITM_PROTECTION;
10052664:	4b18      	ldr	r3, [pc, #96]	@ (100526c8 <BLE_Init+0x1a8>)
10052666:	2201      	movs	r2, #1
10052668:	705a      	strb	r2, [r3, #1]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin  = CFG_ENCRYPTION_KEY_SIZE_MIN;
1005266a:	4b17      	ldr	r3, [pc, #92]	@ (100526c8 <BLE_Init+0x1a8>)
1005266c:	2208      	movs	r2, #8
1005266e:	70da      	strb	r2, [r3, #3]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax  = CFG_ENCRYPTION_KEY_SIZE_MAX;
10052670:	4b15      	ldr	r3, [pc, #84]	@ (100526c8 <BLE_Init+0x1a8>)
10052672:	2210      	movs	r2, #16
10052674:	711a      	strb	r2, [r3, #4]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode          = CFG_BONDING_MODE;
10052676:	4b14      	ldr	r3, [pc, #80]	@ (100526c8 <BLE_Init+0x1a8>)
10052678:	2201      	movs	r2, #1
1005267a:	709a      	strb	r2, [r3, #2]

  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/
  ret = aci_gap_set_security_requirements(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
1005267c:	4b12      	ldr	r3, [pc, #72]	@ (100526c8 <BLE_Init+0x1a8>)
1005267e:	7898      	ldrb	r0, [r3, #2]
10052680:	4b11      	ldr	r3, [pc, #68]	@ (100526c8 <BLE_Init+0x1a8>)
10052682:	7859      	ldrb	r1, [r3, #1]
10052684:	4b10      	ldr	r3, [pc, #64]	@ (100526c8 <BLE_Init+0x1a8>)
10052686:	78db      	ldrb	r3, [r3, #3]
10052688:	4a0f      	ldr	r2, [pc, #60]	@ (100526c8 <BLE_Init+0x1a8>)
1005268a:	7912      	ldrb	r2, [r2, #4]
1005268c:	002e      	movs	r6, r5
1005268e:	197c      	adds	r4, r7, r5
10052690:	2500      	movs	r5, #0
10052692:	9502      	str	r5, [sp, #8]
10052694:	9201      	str	r2, [sp, #4]
10052696:	9300      	str	r3, [sp, #0]
10052698:	2300      	movs	r3, #0
1005269a:	2201      	movs	r2, #1
1005269c:	f7fd fb3e 	bl	1004fd1c <aci_gap_set_security_requirements>
100526a0:	0003      	movs	r3, r0
100526a2:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize Filter Accept List
   */
  if (bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
100526a4:	4b08      	ldr	r3, [pc, #32]	@ (100526c8 <BLE_Init+0x1a8>)
100526a6:	789b      	ldrb	r3, [r3, #2]
100526a8:	2b00      	cmp	r3, #0
100526aa:	d005      	beq.n	100526b8 <BLE_Init+0x198>
  {
    ret = aci_gap_configure_filter_accept_and_resolving_list(0x01);
100526ac:	19bc      	adds	r4, r7, r6
100526ae:	2001      	movs	r0, #1
100526b0:	f002 fe8a 	bl	100553c8 <aci_gap_configure_filter_accept_and_resolving_list>
100526b4:	0003      	movs	r3, r0
100526b6:	7023      	strb	r3, [r4, #0]
      APP_DBG_MSG("  Success: aci_gap_configure_filter_accept_and_resolving_list command\n");
    }
  }
  APP_DBG_MSG("==>> End BLE_Init function\n");

}
100526b8:	46c0      	nop			@ (mov r8, r8)
100526ba:	46bd      	mov	sp, r7
100526bc:	b015      	add	sp, #84	@ 0x54
100526be:	bdf0      	pop	{r4, r5, r6, r7, pc}
100526c0:	100698e4 	.word	0x100698e4
100526c4:	1006a254 	.word	0x1006a254
100526c8:	20002810 	.word	0x20002810

100526cc <BLEStack_Process_Schedule>:

void BLEStack_Process_Schedule(void)
{
100526cc:	b580      	push	{r7, lr}
100526ce:	af00      	add	r7, sp, #0
  /* Keep BLE Stack Process priority low, since there are limited cases
     where stack wants to be rescheduled for busy waiting.  */
  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_STACK, CFG_SEQ_PRIO_1);
100526d0:	2101      	movs	r1, #1
100526d2:	2001      	movs	r0, #1
100526d4:	f002 fd60 	bl	10055198 <UTIL_SEQ_SetTask>
}
100526d8:	46c0      	nop			@ (mov r8, r8)
100526da:	46bd      	mov	sp, r7
100526dc:	bd80      	pop	{r7, pc}

100526de <BLEStack_Process>:
static void BLEStack_Process(void)
{
100526de:	b580      	push	{r7, lr}
100526e0:	af00      	add	r7, sp, #0
  APP_DEBUG_SIGNAL_SET(APP_STACK_PROCESS);
100526e2:	2001      	movs	r0, #1
100526e4:	f002 fc1a 	bl	10054f1c <APP_DEBUG_SIGNAL_SET>
  BLE_STACK_Tick();
100526e8:	f003 fa4e 	bl	10055b88 <BLE_STACK_Tick>

  APP_DEBUG_SIGNAL_RESET(APP_STACK_PROCESS);
100526ec:	2001      	movs	r0, #1
100526ee:	f002 fc1f 	bl	10054f30 <APP_DEBUG_SIGNAL_RESET>
}
100526f2:	46c0      	nop			@ (mov r8, r8)
100526f4:	46bd      	mov	sp, r7
100526f6:	bd80      	pop	{r7, pc}

100526f8 <VTimer_Process>:

void VTimer_Process(void)
{
100526f8:	b580      	push	{r7, lr}
100526fa:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_Tick();
100526fc:	f7f9 fc5e 	bl	1004bfbc <HAL_RADIO_TIMER_Tick>
}
10052700:	46c0      	nop			@ (mov r8, r8)
10052702:	46bd      	mov	sp, r7
10052704:	bd80      	pop	{r7, pc}

10052706 <VTimer_Process_Schedule>:

void VTimer_Process_Schedule(void)
{
10052706:	b580      	push	{r7, lr}
10052708:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_VTIMER, CFG_SEQ_PRIO_0);
1005270a:	2100      	movs	r1, #0
1005270c:	2002      	movs	r0, #2
1005270e:	f002 fd43 	bl	10055198 <UTIL_SEQ_SetTask>
}
10052712:	46c0      	nop			@ (mov r8, r8)
10052714:	46bd      	mov	sp, r7
10052716:	bd80      	pop	{r7, pc}

10052718 <NVM_Process>:
void NVM_Process(void)
{
10052718:	b580      	push	{r7, lr}
1005271a:	af00      	add	r7, sp, #0
  NVMDB_Tick();
1005271c:	f7ff f9d0 	bl	10051ac0 <NVMDB_Tick>
}
10052720:	46c0      	nop			@ (mov r8, r8)
10052722:	46bd      	mov	sp, r7
10052724:	bd80      	pop	{r7, pc}

10052726 <NVM_Process_Schedule>:

void NVM_Process_Schedule(void)
{
10052726:	b580      	push	{r7, lr}
10052728:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_NVM, CFG_SEQ_PRIO_1);
1005272a:	2101      	movs	r1, #1
1005272c:	2004      	movs	r0, #4
1005272e:	f002 fd33 	bl	10055198 <UTIL_SEQ_SetTask>
}
10052732:	46c0      	nop			@ (mov r8, r8)
10052734:	46bd      	mov	sp, r7
10052736:	bd80      	pop	{r7, pc}

10052738 <HAL_RADIO_TIMER_CpuWakeUpCallback>:
  VTimer_Process_Schedule();
}

/* Function called from RADIO_TIMER_CPU_WKUP_IRQHandler() context. */
void HAL_RADIO_TIMER_CpuWakeUpCallback(void)
{
10052738:	b580      	push	{r7, lr}
1005273a:	af00      	add	r7, sp, #0
  VTimer_Process_Schedule();
1005273c:	f7ff ffe3 	bl	10052706 <VTimer_Process_Schedule>
}
10052740:	46c0      	nop			@ (mov r8, r8)
10052742:	46bd      	mov	sp, r7
10052744:	bd80      	pop	{r7, pc}

10052746 <HAL_RADIO_TxRxCallback>:

/* Function called from RADIO_TXRX_IRQHandler() context. */
void HAL_RADIO_TxRxCallback(uint32_t flags)
{
10052746:	b580      	push	{r7, lr}
10052748:	b082      	sub	sp, #8
1005274a:	af00      	add	r7, sp, #0
1005274c:	6078      	str	r0, [r7, #4]
  BLE_STACK_RadioHandler(flags);
1005274e:	687b      	ldr	r3, [r7, #4]
10052750:	0018      	movs	r0, r3
10052752:	f00e f91b 	bl	1006098c <BLE_STACK_RadioHandler>

  VTimer_Process_Schedule();
10052756:	f7ff ffd6 	bl	10052706 <VTimer_Process_Schedule>
  NVM_Process_Schedule();
1005275a:	f7ff ffe4 	bl	10052726 <NVM_Process_Schedule>
}
1005275e:	46c0      	nop			@ (mov r8, r8)
10052760:	46bd      	mov	sp, r7
10052762:	b002      	add	sp, #8
10052764:	bd80      	pop	{r7, pc}

10052766 <BLE_STACK_ProcessRequest>:

void BLE_STACK_ProcessRequest(void)
{
10052766:	b580      	push	{r7, lr}
10052768:	af00      	add	r7, sp, #0
  BLEStack_Process_Schedule();
1005276a:	f7ff ffaf 	bl	100526cc <BLEStack_Process_Schedule>
}
1005276e:	46c0      	nop			@ (mov r8, r8)
10052770:	46bd      	mov	sp, r7
10052772:	bd80      	pop	{r7, pc}

10052774 <APP_BLE_Init>:

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
10052774:	b580      	push	{r7, lr}
10052776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1U << CFG_TASK_BLE_STACK, UTIL_SEQ_RFU, BLEStack_Process);
10052778:	4b12      	ldr	r3, [pc, #72]	@ (100527c4 <APP_BLE_Init+0x50>)
1005277a:	001a      	movs	r2, r3
1005277c:	2100      	movs	r1, #0
1005277e:	2001      	movs	r0, #1
10052780:	f002 fce6 	bl	10055150 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_VTIMER, UTIL_SEQ_RFU, VTimer_Process);
10052784:	4b10      	ldr	r3, [pc, #64]	@ (100527c8 <APP_BLE_Init+0x54>)
10052786:	001a      	movs	r2, r3
10052788:	2100      	movs	r1, #0
1005278a:	2002      	movs	r0, #2
1005278c:	f002 fce0 	bl	10055150 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_NVM, UTIL_SEQ_RFU, NVM_Process);
10052790:	4b0e      	ldr	r3, [pc, #56]	@ (100527cc <APP_BLE_Init+0x58>)
10052792:	001a      	movs	r2, r3
10052794:	2100      	movs	r1, #0
10052796:	2004      	movs	r0, #4
10052798:	f002 fcda 	bl	10055150 <UTIL_SEQ_RegTask>
  ModulesInit();
1005279c:	f7ff feb2 	bl	10052504 <ModulesInit>

  /* Initialization of HCI & GATT & GAP layer */
  BLE_Init();
100527a0:	f7ff febe 	bl	10052520 <BLE_Init>

  /**
  * Initialization of the BLE App Context
  */
  bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
100527a4:	4b0a      	ldr	r3, [pc, #40]	@ (100527d0 <APP_BLE_Init+0x5c>)
100527a6:	2200      	movs	r2, #0
100527a8:	739a      	strb	r2, [r3, #14]
  bleAppContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
100527aa:	4b09      	ldr	r3, [pc, #36]	@ (100527d0 <APP_BLE_Init+0x5c>)
100527ac:	2201      	movs	r2, #1
100527ae:	4252      	negs	r2, r2
100527b0:	819a      	strh	r2, [r3, #12]
  /**
  * Initialize Services and Characteristics.
  */
  APP_DBG_MSG("\n");
  APP_DBG_MSG("Services and Characteristics creation\n");
  USART_APP_Init();
100527b2:	f000 fc81 	bl	100530b8 <USART_APP_Init>
  APP_DBG_MSG("\n");

  /* USER CODE BEGIN APP_BLE_Init_3 */

    /* Start to Advertise to accept a connection */
    APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
100527b6:	2001      	movs	r0, #1
100527b8:	f000 f9ac 	bl	10052b14 <APP_BLE_Procedure_Gap_Peripheral>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
100527bc:	46c0      	nop			@ (mov r8, r8)
}
100527be:	46bd      	mov	sp, r7
100527c0:	bd80      	pop	{r7, pc}
100527c2:	46c0      	nop			@ (mov r8, r8)
100527c4:	100526df 	.word	0x100526df
100527c8:	100526f9 	.word	0x100526f9
100527cc:	10052719 	.word	0x10052719
100527d0:	20002810 	.word	0x20002810

100527d4 <BLEEVT_App_Notification>:

void BLEEVT_App_Notification(const hci_pckt *hci_pckt)
{
100527d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100527d6:	b099      	sub	sp, #100	@ 0x64
100527d8:	af04      	add	r7, sp, #16
100527da:	6078      	str	r0, [r7, #4]
  tBleStatus ret = BLE_STATUS_ERROR;
100527dc:	234b      	movs	r3, #75	@ 0x4b
100527de:	18fb      	adds	r3, r7, r3
100527e0:	2286      	movs	r2, #134	@ 0x86
100527e2:	701a      	strb	r2, [r3, #0]
  UNUSED(ret);
  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  if(hci_pckt->type != HCI_EVENT_PKT_TYPE && hci_pckt->type != HCI_EVENT_EXT_PKT_TYPE)
100527e4:	687b      	ldr	r3, [r7, #4]
100527e6:	781b      	ldrb	r3, [r3, #0]
100527e8:	2b04      	cmp	r3, #4
100527ea:	d004      	beq.n	100527f6 <BLEEVT_App_Notification+0x22>
100527ec:	687b      	ldr	r3, [r7, #4]
100527ee:	781b      	ldrb	r3, [r3, #0]
100527f0:	2b82      	cmp	r3, #130	@ 0x82
100527f2:	d000      	beq.n	100527f6 <BLEEVT_App_Notification+0x22>
100527f4:	e132      	b.n	10052a5c <BLEEVT_App_Notification+0x288>
  {
    /* Not an event */
    return;
  }

  p_event_pckt = (hci_event_pckt*)hci_pckt->data;
100527f6:	687b      	ldr	r3, [r7, #4]
100527f8:	3301      	adds	r3, #1
100527fa:	647b      	str	r3, [r7, #68]	@ 0x44

  if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
100527fc:	687b      	ldr	r3, [r7, #4]
100527fe:	781b      	ldrb	r3, [r3, #0]
10052800:	2b04      	cmp	r3, #4
10052802:	d103      	bne.n	1005280c <BLEEVT_App_Notification+0x38>
    event_data = p_event_pckt->data;
10052804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10052806:	3302      	adds	r3, #2
10052808:	64fb      	str	r3, [r7, #76]	@ 0x4c
1005280a:	e005      	b.n	10052818 <BLEEVT_App_Notification+0x44>
  }
  else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
    hci_event_ext_pckt *p_event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
1005280c:	687b      	ldr	r3, [r7, #4]
1005280e:	3301      	adds	r3, #1
10052810:	643b      	str	r3, [r7, #64]	@ 0x40
    event_data = p_event_pckt->data;
10052812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10052814:	3303      	adds	r3, #3
10052816:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  switch (p_event_pckt->evt) /* evt field is at same offset in hci_event_pckt and hci_event_ext_pckt */
10052818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1005281a:	781b      	ldrb	r3, [r3, #0]
1005281c:	2bff      	cmp	r3, #255	@ 0xff
1005281e:	d100      	bne.n	10052822 <BLEEVT_App_Notification+0x4e>
10052820:	e0a4      	b.n	1005296c <BLEEVT_App_Notification+0x198>
10052822:	dd00      	ble.n	10052826 <BLEEVT_App_Notification+0x52>
10052824:	e11c      	b.n	10052a60 <BLEEVT_App_Notification+0x28c>
10052826:	2b3e      	cmp	r3, #62	@ 0x3e
10052828:	d02d      	beq.n	10052886 <BLEEVT_App_Notification+0xb2>
1005282a:	dd00      	ble.n	1005282e <BLEEVT_App_Notification+0x5a>
1005282c:	e118      	b.n	10052a60 <BLEEVT_App_Notification+0x28c>
1005282e:	2b05      	cmp	r3, #5
10052830:	d003      	beq.n	1005283a <BLEEVT_App_Notification+0x66>
10052832:	2b10      	cmp	r3, #16
10052834:	d100      	bne.n	10052838 <BLEEVT_App_Notification+0x64>
10052836:	e108      	b.n	10052a4a <BLEEVT_App_Notification+0x276>

  default:
    /* USER CODE BEGIN ECODE_DEFAULT*/

    /* USER CODE END ECODE_DEFAULT*/
    break;
10052838:	e112      	b.n	10052a60 <BLEEVT_App_Notification+0x28c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
1005283a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1005283c:	3302      	adds	r3, #2
1005283e:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == bleAppContext.BleApplicationContext_legacy.connectionHandle)
10052840:	68fb      	ldr	r3, [r7, #12]
10052842:	785a      	ldrb	r2, [r3, #1]
10052844:	789b      	ldrb	r3, [r3, #2]
10052846:	021b      	lsls	r3, r3, #8
10052848:	4313      	orrs	r3, r2
1005284a:	b29a      	uxth	r2, r3
1005284c:	4b87      	ldr	r3, [pc, #540]	@ (10052a6c <BLEEVT_App_Notification+0x298>)
1005284e:	899b      	ldrh	r3, [r3, #12]
10052850:	429a      	cmp	r2, r3
10052852:	d106      	bne.n	10052862 <BLEEVT_App_Notification+0x8e>
        bleAppContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
10052854:	4b85      	ldr	r3, [pc, #532]	@ (10052a6c <BLEEVT_App_Notification+0x298>)
10052856:	2201      	movs	r2, #1
10052858:	4252      	negs	r2, r2
1005285a:	819a      	strh	r2, [r3, #12]
        bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
1005285c:	4b83      	ldr	r3, [pc, #524]	@ (10052a6c <BLEEVT_App_Notification+0x298>)
1005285e:	2200      	movs	r2, #0
10052860:	739a      	strb	r2, [r3, #14]
      gap_cmd_resp_release();
10052862:	f000 fa2b 	bl	10052cbc <gap_cmd_resp_release>
      USARTHandleNotification.EvtOpcode = USART_DISCON_HANDLE_EVT;
10052866:	4b82      	ldr	r3, [pc, #520]	@ (10052a70 <BLEEVT_App_Notification+0x29c>)
10052868:	2201      	movs	r2, #1
1005286a:	701a      	strb	r2, [r3, #0]
      USARTHandleNotification.ConnectionHandle = p_disconnection_complete_event->Connection_Handle;
1005286c:	68fb      	ldr	r3, [r7, #12]
1005286e:	785a      	ldrb	r2, [r3, #1]
10052870:	789b      	ldrb	r3, [r3, #2]
10052872:	021b      	lsls	r3, r3, #8
10052874:	4313      	orrs	r3, r2
10052876:	b29a      	uxth	r2, r3
10052878:	4b7d      	ldr	r3, [pc, #500]	@ (10052a70 <BLEEVT_App_Notification+0x29c>)
1005287a:	805a      	strh	r2, [r3, #2]
      USART_APP_EvtRx(&USARTHandleNotification);
1005287c:	4b7c      	ldr	r3, [pc, #496]	@ (10052a70 <BLEEVT_App_Notification+0x29c>)
1005287e:	0018      	movs	r0, r3
10052880:	f000 fbfc 	bl	1005307c <USART_APP_EvtRx>
    break;
10052884:	e0ef      	b.n	10052a66 <BLEEVT_App_Notification+0x292>
      p_meta_evt = (hci_le_meta_event*) p_event_pckt->data;
10052886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10052888:	3302      	adds	r3, #2
1005288a:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_meta_evt->subevent)
1005288c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1005288e:	781b      	ldrb	r3, [r3, #0]
10052890:	2b0c      	cmp	r3, #12
10052892:	d00b      	beq.n	100528ac <BLEEVT_App_Notification+0xd8>
10052894:	dc68      	bgt.n	10052968 <BLEEVT_App_Notification+0x194>
10052896:	2b0a      	cmp	r3, #10
10052898:	d00e      	beq.n	100528b8 <BLEEVT_App_Notification+0xe4>
1005289a:	dc65      	bgt.n	10052968 <BLEEVT_App_Notification+0x194>
1005289c:	2b01      	cmp	r3, #1
1005289e:	d037      	beq.n	10052910 <BLEEVT_App_Notification+0x13c>
100528a0:	2b03      	cmp	r3, #3
100528a2:	d161      	bne.n	10052968 <BLEEVT_App_Notification+0x194>
          p_conn_update_complete = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
100528a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100528a6:	3301      	adds	r3, #1
100528a8:	61bb      	str	r3, [r7, #24]
        break;
100528aa:	e05e      	b.n	1005296a <BLEEVT_App_Notification+0x196>
          p_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
100528ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100528ae:	3301      	adds	r3, #1
100528b0:	623b      	str	r3, [r7, #32]
          gap_cmd_resp_release();
100528b2:	f000 fa03 	bl	10052cbc <gap_cmd_resp_release>
        break;
100528b6:	e058      	b.n	1005296a <BLEEVT_App_Notification+0x196>
          p_enhanced_conn_complete = (hci_le_enhanced_connection_complete_event_rp0 *) p_meta_evt->data;
100528b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100528ba:	3301      	adds	r3, #1
100528bc:	61fb      	str	r3, [r7, #28]
          connection_complete_event(p_enhanced_conn_complete->Status,
100528be:	69fb      	ldr	r3, [r7, #28]
100528c0:	781c      	ldrb	r4, [r3, #0]
100528c2:	69fb      	ldr	r3, [r7, #28]
100528c4:	785a      	ldrb	r2, [r3, #1]
100528c6:	789b      	ldrb	r3, [r3, #2]
100528c8:	021b      	lsls	r3, r3, #8
100528ca:	4313      	orrs	r3, r2
100528cc:	b29d      	uxth	r5, r3
100528ce:	69fb      	ldr	r3, [r7, #28]
100528d0:	791e      	ldrb	r6, [r3, #4]
                                    p_enhanced_conn_complete->Peer_Address,
100528d2:	69fb      	ldr	r3, [r7, #28]
100528d4:	3305      	adds	r3, #5
100528d6:	469c      	mov	ip, r3
          connection_complete_event(p_enhanced_conn_complete->Status,
100528d8:	69fb      	ldr	r3, [r7, #28]
100528da:	7dda      	ldrb	r2, [r3, #23]
100528dc:	7e1b      	ldrb	r3, [r3, #24]
100528de:	021b      	lsls	r3, r3, #8
100528e0:	4313      	orrs	r3, r2
100528e2:	b29a      	uxth	r2, r3
100528e4:	69fb      	ldr	r3, [r7, #28]
100528e6:	7e59      	ldrb	r1, [r3, #25]
100528e8:	7e9b      	ldrb	r3, [r3, #26]
100528ea:	021b      	lsls	r3, r3, #8
100528ec:	430b      	orrs	r3, r1
100528ee:	b299      	uxth	r1, r3
100528f0:	69fb      	ldr	r3, [r7, #28]
100528f2:	7ed8      	ldrb	r0, [r3, #27]
100528f4:	7f1b      	ldrb	r3, [r3, #28]
100528f6:	021b      	lsls	r3, r3, #8
100528f8:	4303      	orrs	r3, r0
100528fa:	b29b      	uxth	r3, r3
100528fc:	9302      	str	r3, [sp, #8]
100528fe:	9101      	str	r1, [sp, #4]
10052900:	9200      	str	r2, [sp, #0]
10052902:	4663      	mov	r3, ip
10052904:	0032      	movs	r2, r6
10052906:	0029      	movs	r1, r5
10052908:	0020      	movs	r0, r4
1005290a:	f000 f8bf 	bl	10052a8c <connection_complete_event>
        break;
1005290e:	e02c      	b.n	1005296a <BLEEVT_App_Notification+0x196>
          p_conn_complete = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
10052910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10052912:	3301      	adds	r3, #1
10052914:	617b      	str	r3, [r7, #20]
          connection_complete_event(p_conn_complete->Status,
10052916:	697b      	ldr	r3, [r7, #20]
10052918:	781c      	ldrb	r4, [r3, #0]
1005291a:	697b      	ldr	r3, [r7, #20]
1005291c:	785a      	ldrb	r2, [r3, #1]
1005291e:	789b      	ldrb	r3, [r3, #2]
10052920:	021b      	lsls	r3, r3, #8
10052922:	4313      	orrs	r3, r2
10052924:	b29d      	uxth	r5, r3
10052926:	697b      	ldr	r3, [r7, #20]
10052928:	791e      	ldrb	r6, [r3, #4]
                                    p_conn_complete->Peer_Address,
1005292a:	697b      	ldr	r3, [r7, #20]
1005292c:	3305      	adds	r3, #5
1005292e:	469c      	mov	ip, r3
          connection_complete_event(p_conn_complete->Status,
10052930:	697b      	ldr	r3, [r7, #20]
10052932:	7ada      	ldrb	r2, [r3, #11]
10052934:	7b1b      	ldrb	r3, [r3, #12]
10052936:	021b      	lsls	r3, r3, #8
10052938:	4313      	orrs	r3, r2
1005293a:	b29a      	uxth	r2, r3
1005293c:	697b      	ldr	r3, [r7, #20]
1005293e:	7b59      	ldrb	r1, [r3, #13]
10052940:	7b9b      	ldrb	r3, [r3, #14]
10052942:	021b      	lsls	r3, r3, #8
10052944:	430b      	orrs	r3, r1
10052946:	b299      	uxth	r1, r3
10052948:	697b      	ldr	r3, [r7, #20]
1005294a:	7bd8      	ldrb	r0, [r3, #15]
1005294c:	7c1b      	ldrb	r3, [r3, #16]
1005294e:	021b      	lsls	r3, r3, #8
10052950:	4303      	orrs	r3, r0
10052952:	b29b      	uxth	r3, r3
10052954:	9302      	str	r3, [sp, #8]
10052956:	9101      	str	r1, [sp, #4]
10052958:	9200      	str	r2, [sp, #0]
1005295a:	4663      	mov	r3, ip
1005295c:	0032      	movs	r2, r6
1005295e:	0029      	movs	r1, r5
10052960:	0020      	movs	r0, r4
10052962:	f000 f893 	bl	10052a8c <connection_complete_event>
        break;
10052966:	e000      	b.n	1005296a <BLEEVT_App_Notification+0x196>
        break;
10052968:	46c0      	nop			@ (mov r8, r8)
    break;
1005296a:	e07c      	b.n	10052a66 <BLEEVT_App_Notification+0x292>
      aci_blecore_event *p_blecore_evt = (aci_blecore_event*) event_data;
1005296c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1005296e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      switch (p_blecore_evt->ecode)
10052970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052972:	781a      	ldrb	r2, [r3, #0]
10052974:	785b      	ldrb	r3, [r3, #1]
10052976:	021b      	lsls	r3, r3, #8
10052978:	4313      	orrs	r3, r2
1005297a:	b29b      	uxth	r3, r3
1005297c:	4a3d      	ldr	r2, [pc, #244]	@ (10052a74 <BLEEVT_App_Notification+0x2a0>)
1005297e:	4293      	cmp	r3, r2
10052980:	d03b      	beq.n	100529fa <BLEEVT_App_Notification+0x226>
10052982:	4a3c      	ldr	r2, [pc, #240]	@ (10052a74 <BLEEVT_App_Notification+0x2a0>)
10052984:	4293      	cmp	r3, r2
10052986:	dc5a      	bgt.n	10052a3e <BLEEVT_App_Notification+0x26a>
10052988:	2280      	movs	r2, #128	@ 0x80
1005298a:	0112      	lsls	r2, r2, #4
1005298c:	4293      	cmp	r3, r2
1005298e:	d01c      	beq.n	100529ca <BLEEVT_App_Notification+0x1f6>
10052990:	2280      	movs	r2, #128	@ 0x80
10052992:	0112      	lsls	r2, r2, #4
10052994:	4293      	cmp	r3, r2
10052996:	dc52      	bgt.n	10052a3e <BLEEVT_App_Notification+0x26a>
10052998:	4a37      	ldr	r2, [pc, #220]	@ (10052a78 <BLEEVT_App_Notification+0x2a4>)
1005299a:	4293      	cmp	r3, r2
1005299c:	d051      	beq.n	10052a42 <BLEEVT_App_Notification+0x26e>
1005299e:	4a36      	ldr	r2, [pc, #216]	@ (10052a78 <BLEEVT_App_Notification+0x2a4>)
100529a0:	4293      	cmp	r3, r2
100529a2:	dc4c      	bgt.n	10052a3e <BLEEVT_App_Notification+0x26a>
100529a4:	4a35      	ldr	r2, [pc, #212]	@ (10052a7c <BLEEVT_App_Notification+0x2a8>)
100529a6:	4293      	cmp	r3, r2
100529a8:	d013      	beq.n	100529d2 <BLEEVT_App_Notification+0x1fe>
100529aa:	2281      	movs	r2, #129	@ 0x81
100529ac:	00d2      	lsls	r2, r2, #3
100529ae:	4293      	cmp	r3, r2
100529b0:	da45      	bge.n	10052a3e <BLEEVT_App_Notification+0x26a>
100529b2:	4a33      	ldr	r2, [pc, #204]	@ (10052a80 <BLEEVT_App_Notification+0x2ac>)
100529b4:	4293      	cmp	r3, r2
100529b6:	d010      	beq.n	100529da <BLEEVT_App_Notification+0x206>
100529b8:	4a31      	ldr	r2, [pc, #196]	@ (10052a80 <BLEEVT_App_Notification+0x2ac>)
100529ba:	4293      	cmp	r3, r2
100529bc:	dc3f      	bgt.n	10052a3e <BLEEVT_App_Notification+0x26a>
100529be:	2b04      	cmp	r3, #4
100529c0:	d041      	beq.n	10052a46 <BLEEVT_App_Notification+0x272>
100529c2:	4a30      	ldr	r2, [pc, #192]	@ (10052a84 <BLEEVT_App_Notification+0x2b0>)
100529c4:	4293      	cmp	r3, r2
100529c6:	d014      	beq.n	100529f2 <BLEEVT_App_Notification+0x21e>
        break;
100529c8:	e039      	b.n	10052a3e <BLEEVT_App_Notification+0x26a>
          p_l2cap_conn_update_resp = (aci_l2cap_connection_update_resp_event_rp0 *) p_blecore_evt->data;
100529ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100529cc:	3302      	adds	r3, #2
100529ce:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
100529d0:	e03a      	b.n	10052a48 <BLEEVT_App_Notification+0x274>
          p_gap_proc_complete = (aci_gap_proc_complete_event_rp0*) p_blecore_evt->data;
100529d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100529d4:	3302      	adds	r3, #2
100529d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
100529d8:	e036      	b.n	10052a48 <BLEEVT_App_Notification+0x274>
          ret = aci_gap_passkey_resp(bleAppContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
100529da:	4b24      	ldr	r3, [pc, #144]	@ (10052a6c <BLEEVT_App_Notification+0x298>)
100529dc:	899b      	ldrh	r3, [r3, #12]
100529de:	224b      	movs	r2, #75	@ 0x4b
100529e0:	18bc      	adds	r4, r7, r2
100529e2:	4a29      	ldr	r2, [pc, #164]	@ (10052a88 <BLEEVT_App_Notification+0x2b4>)
100529e4:	0011      	movs	r1, r2
100529e6:	0018      	movs	r0, r3
100529e8:	f7fd f9c7 	bl	1004fd7a <aci_gap_passkey_resp>
100529ec:	0003      	movs	r3, r0
100529ee:	7023      	strb	r3, [r4, #0]
        break;
100529f0:	e02a      	b.n	10052a48 <BLEEVT_App_Notification+0x274>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
100529f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100529f4:	3302      	adds	r3, #2
100529f6:	62bb      	str	r3, [r7, #40]	@ 0x28
        break;
100529f8:	e026      	b.n	10052a48 <BLEEVT_App_Notification+0x274>
          p_read = (aci_gatt_srv_read_event_rp0*)p_blecore_evt->data;
100529fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100529fc:	3302      	adds	r3, #2
100529fe:	63bb      	str	r3, [r7, #56]	@ 0x38
          uint8_t error_code = BLE_ATT_ERR_INSUFF_AUTHORIZATION;
10052a00:	2437      	movs	r4, #55	@ 0x37
10052a02:	193b      	adds	r3, r7, r4
10052a04:	2208      	movs	r2, #8
10052a06:	701a      	strb	r2, [r3, #0]
          aci_gatt_srv_resp(p_read->Connection_Handle,
10052a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10052a0a:	781a      	ldrb	r2, [r3, #0]
10052a0c:	785b      	ldrb	r3, [r3, #1]
10052a0e:	021b      	lsls	r3, r3, #8
10052a10:	4313      	orrs	r3, r2
10052a12:	b298      	uxth	r0, r3
10052a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10052a16:	789a      	ldrb	r2, [r3, #2]
10052a18:	78db      	ldrb	r3, [r3, #3]
10052a1a:	021b      	lsls	r3, r3, #8
10052a1c:	4313      	orrs	r3, r2
10052a1e:	b299      	uxth	r1, r3
10052a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10052a22:	791a      	ldrb	r2, [r3, #4]
10052a24:	795b      	ldrb	r3, [r3, #5]
10052a26:	021b      	lsls	r3, r3, #8
10052a28:	4313      	orrs	r3, r2
10052a2a:	b29a      	uxth	r2, r3
10052a2c:	193b      	adds	r3, r7, r4
10052a2e:	781b      	ldrb	r3, [r3, #0]
10052a30:	2400      	movs	r4, #0
10052a32:	9401      	str	r4, [sp, #4]
10052a34:	2400      	movs	r4, #0
10052a36:	9400      	str	r4, [sp, #0]
10052a38:	f7fd f9ec 	bl	1004fe14 <aci_gatt_srv_resp>
          break;
10052a3c:	e004      	b.n	10052a48 <BLEEVT_App_Notification+0x274>
        break;
10052a3e:	46c0      	nop			@ (mov r8, r8)
10052a40:	e011      	b.n	10052a66 <BLEEVT_App_Notification+0x292>
        break;
10052a42:	46c0      	nop			@ (mov r8, r8)
10052a44:	e00f      	b.n	10052a66 <BLEEVT_App_Notification+0x292>
        break;
10052a46:	46c0      	nop			@ (mov r8, r8)
    break;
10052a48:	e00d      	b.n	10052a66 <BLEEVT_App_Notification+0x292>
      p_hci_hardware_error_event = (hci_hardware_error_event_rp0*)p_event_pckt->data;
10052a4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10052a4c:	3302      	adds	r3, #2
10052a4e:	613b      	str	r3, [r7, #16]
      if (p_hci_hardware_error_event->Hardware_Code <= 0x03)
10052a50:	693b      	ldr	r3, [r7, #16]
10052a52:	781b      	ldrb	r3, [r3, #0]
10052a54:	2b03      	cmp	r3, #3
10052a56:	d805      	bhi.n	10052a64 <BLEEVT_App_Notification+0x290>
        NVIC_SystemReset();
10052a58:	f7ff fd42 	bl	100524e0 <__NVIC_SystemReset>
    return;
10052a5c:	46c0      	nop			@ (mov r8, r8)
10052a5e:	e002      	b.n	10052a66 <BLEEVT_App_Notification+0x292>
    break;
10052a60:	46c0      	nop			@ (mov r8, r8)
10052a62:	e000      	b.n	10052a66 <BLEEVT_App_Notification+0x292>
    break;
10052a64:	46c0      	nop			@ (mov r8, r8)
  }
}
10052a66:	46bd      	mov	sp, r7
10052a68:	b015      	add	sp, #84	@ 0x54
10052a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10052a6c:	20002810 	.word	0x20002810
10052a70:	20002820 	.word	0x20002820
10052a74:	00000c19 	.word	0x00000c19
10052a78:	0000040a 	.word	0x0000040a
10052a7c:	00000407 	.word	0x00000407
10052a80:	00000402 	.word	0x00000402
10052a84:	00000401 	.word	0x00000401
10052a88:	0001b207 	.word	0x0001b207

10052a8c <connection_complete_event>:
                                      uint8_t Peer_Address_Type,
                                      uint8_t Peer_Address[6],
                                      uint16_t Connection_Interval,
                                      uint16_t Peripheral_Latency,
                                      uint16_t Supervision_Timeout)
{
10052a8c:	b590      	push	{r4, r7, lr}
10052a8e:	b083      	sub	sp, #12
10052a90:	af00      	add	r7, sp, #0
10052a92:	0004      	movs	r4, r0
10052a94:	0008      	movs	r0, r1
10052a96:	0011      	movs	r1, r2
10052a98:	603b      	str	r3, [r7, #0]
10052a9a:	1dfb      	adds	r3, r7, #7
10052a9c:	1c22      	adds	r2, r4, #0
10052a9e:	701a      	strb	r2, [r3, #0]
10052aa0:	1d3b      	adds	r3, r7, #4
10052aa2:	1c02      	adds	r2, r0, #0
10052aa4:	801a      	strh	r2, [r3, #0]
10052aa6:	1dbb      	adds	r3, r7, #6
10052aa8:	1c0a      	adds	r2, r1, #0
10052aaa:	701a      	strb	r2, [r3, #0]
  if(Status != 0)
10052aac:	1dfb      	adds	r3, r7, #7
10052aae:	781b      	ldrb	r3, [r3, #0]
10052ab0:	2b00      	cmp	r3, #0
10052ab2:	d003      	beq.n	10052abc <connection_complete_event+0x30>
  {
    APP_DBG_MSG("==>> connection_complete_event Fail, Status: 0x%02X\n", Status);
    bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
10052ab4:	4b10      	ldr	r3, [pc, #64]	@ (10052af8 <connection_complete_event+0x6c>)
10052ab6:	2200      	movs	r2, #0
10052ab8:	739a      	strb	r2, [r3, #14]
    return;
10052aba:	e019      	b.n	10052af0 <connection_complete_event+0x64>
              FRACTIONAL_2DIGITS(Connection_Interval*1.25),
              Peripheral_Latency,
              Supervision_Timeout * 10
              );

  if (bleAppContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
10052abc:	4b0e      	ldr	r3, [pc, #56]	@ (10052af8 <connection_complete_event+0x6c>)
10052abe:	7b9b      	ldrb	r3, [r3, #14]
10052ac0:	2b01      	cmp	r3, #1
10052ac2:	d103      	bne.n	10052acc <connection_complete_event+0x40>
  {
    /* Connection as client */
    bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
10052ac4:	4b0c      	ldr	r3, [pc, #48]	@ (10052af8 <connection_complete_event+0x6c>)
10052ac6:	2203      	movs	r2, #3
10052ac8:	739a      	strb	r2, [r3, #14]
10052aca:	e002      	b.n	10052ad2 <connection_complete_event+0x46>
  }
  else
  {
    /* Connection as server */
    bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
10052acc:	4b0a      	ldr	r3, [pc, #40]	@ (10052af8 <connection_complete_event+0x6c>)
10052ace:	2202      	movs	r2, #2
10052ad0:	739a      	strb	r2, [r3, #14]
  }
  bleAppContext.BleApplicationContext_legacy.connectionHandle = Connection_Handle;
10052ad2:	4b09      	ldr	r3, [pc, #36]	@ (10052af8 <connection_complete_event+0x6c>)
10052ad4:	1d3a      	adds	r2, r7, #4
10052ad6:	8812      	ldrh	r2, [r2, #0]
10052ad8:	819a      	strh	r2, [r3, #12]

  USARTHandleNotification.EvtOpcode = USART_CONN_HANDLE_EVT;
10052ada:	4b08      	ldr	r3, [pc, #32]	@ (10052afc <connection_complete_event+0x70>)
10052adc:	2200      	movs	r2, #0
10052ade:	701a      	strb	r2, [r3, #0]
  USARTHandleNotification.ConnectionHandle = Connection_Handle;
10052ae0:	4b06      	ldr	r3, [pc, #24]	@ (10052afc <connection_complete_event+0x70>)
10052ae2:	1d3a      	adds	r2, r7, #4
10052ae4:	8812      	ldrh	r2, [r2, #0]
10052ae6:	805a      	strh	r2, [r3, #2]
  USART_APP_EvtRx(&USARTHandleNotification);
10052ae8:	4b04      	ldr	r3, [pc, #16]	@ (10052afc <connection_complete_event+0x70>)
10052aea:	0018      	movs	r0, r3
10052aec:	f000 fac6 	bl	1005307c <USART_APP_EvtRx>

  /* USER CODE BEGIN HCI_EVT_LE_CONN_COMPLETE */

  /* USER CODE END HCI_EVT_LE_CONN_COMPLETE */
}/* end hci_le_connection_complete_event() */
10052af0:	46bd      	mov	sp, r7
10052af2:	b003      	add	sp, #12
10052af4:	bd90      	pop	{r4, r7, pc}
10052af6:	46c0      	nop			@ (mov r8, r8)
10052af8:	20002810 	.word	0x20002810
10052afc:	20002820 	.word	0x20002820

10052b00 <APP_BLE_Get_Server_Connection_Status>:
/* USER CODE BEGIN EVT_VENDOR_3 */

/* USER CODE END EVT_VENDOR_3 */

APP_BLE_ConnStatus_t APP_BLE_Get_Server_Connection_Status(void)
{
10052b00:	b580      	push	{r7, lr}
10052b02:	af00      	add	r7, sp, #0
  return bleAppContext.Device_Connection_Status;
10052b04:	4b02      	ldr	r3, [pc, #8]	@ (10052b10 <APP_BLE_Get_Server_Connection_Status+0x10>)
10052b06:	7b9b      	ldrb	r3, [r3, #14]
}
10052b08:	0018      	movs	r0, r3
10052b0a:	46bd      	mov	sp, r7
10052b0c:	bd80      	pop	{r7, pc}
10052b0e:	46c0      	nop			@ (mov r8, r8)
10052b10:	20002810 	.word	0x20002810

10052b14 <APP_BLE_Procedure_Gap_Peripheral>:
  }
  return;
}

void APP_BLE_Procedure_Gap_Peripheral(ProcGapPeripheralId_t ProcGapPeripheralId)
{
10052b14:	b5b0      	push	{r4, r5, r7, lr}
10052b16:	b094      	sub	sp, #80	@ 0x50
10052b18:	af0c      	add	r7, sp, #48	@ 0x30
10052b1a:	0002      	movs	r2, r0
10052b1c:	1dfb      	adds	r3, r7, #7
10052b1e:	701a      	strb	r2, [r3, #0]
  tBleStatus status;
  uint32_t paramA = ADV_INTERVAL_MIN;
10052b20:	2380      	movs	r3, #128	@ 0x80
10052b22:	61fb      	str	r3, [r7, #28]
  uint32_t paramB = ADV_INTERVAL_MAX;
10052b24:	23a0      	movs	r3, #160	@ 0xa0
10052b26:	61bb      	str	r3, [r7, #24]
  uint32_t paramC, paramD;

  /* First set parameters before calling ACI APIs, only if needed */
  switch(ProcGapPeripheralId)
10052b28:	1dfb      	adds	r3, r7, #7
10052b2a:	781b      	ldrb	r3, [r3, #0]
10052b2c:	2b05      	cmp	r3, #5
10052b2e:	d834      	bhi.n	10052b9a <APP_BLE_Procedure_Gap_Peripheral+0x86>
10052b30:	009a      	lsls	r2, r3, #2
10052b32:	4b5f      	ldr	r3, [pc, #380]	@ (10052cb0 <APP_BLE_Procedure_Gap_Peripheral+0x19c>)
10052b34:	18d3      	adds	r3, r2, r3
10052b36:	681b      	ldr	r3, [r3, #0]
10052b38:	469f      	mov	pc, r3
  {
    case PROC_GAP_PERIPH_ADVERTISE_START_FAST:
    {
      paramA = ADV_INTERVAL_MIN;
10052b3a:	2380      	movs	r3, #128	@ 0x80
10052b3c:	61fb      	str	r3, [r7, #28]
      paramB = ADV_INTERVAL_MAX;
10052b3e:	23a0      	movs	r3, #160	@ 0xa0
10052b40:	61bb      	str	r3, [r7, #24]
      paramC = APP_BLE_ADV_FAST;
10052b42:	2304      	movs	r3, #4
10052b44:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_START_FAST */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_START_FAST */
      break;
10052b46:	e02b      	b.n	10052ba0 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_ADVERTISE_START_FAST */
    case PROC_GAP_PERIPH_ADVERTISE_START_LP:
    {
      paramA = ADV_LP_INTERVAL_MIN;
10052b48:	23c8      	movs	r3, #200	@ 0xc8
10052b4a:	00db      	lsls	r3, r3, #3
10052b4c:	61fb      	str	r3, [r7, #28]
      paramB = ADV_LP_INTERVAL_MAX;
10052b4e:	23fa      	movs	r3, #250	@ 0xfa
10052b50:	011b      	lsls	r3, r3, #4
10052b52:	61bb      	str	r3, [r7, #24]
      paramC = APP_BLE_ADV_LP;
10052b54:	2305      	movs	r3, #5
10052b56:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_START_LP */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_START_LP */
      break;
10052b58:	e022      	b.n	10052ba0 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_ADVERTISE_START_LP */
    case PROC_GAP_PERIPH_ADVERTISE_STOP:
    {
      paramC = APP_BLE_IDLE;
10052b5a:	2300      	movs	r3, #0
10052b5c:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_STOP */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_STOP */
      break;
10052b5e:	e01f      	b.n	10052ba0 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_ADVERTISE_STOP */
    case PROC_GAP_PERIPH_CONN_PARAM_UPDATE:
    {
      paramA = CONN_INT_MS(1000);
10052b60:	23c8      	movs	r3, #200	@ 0xc8
10052b62:	009b      	lsls	r3, r3, #2
10052b64:	61fb      	str	r3, [r7, #28]
      paramB = CONN_INT_MS(1000);
10052b66:	23c8      	movs	r3, #200	@ 0xc8
10052b68:	009b      	lsls	r3, r3, #2
10052b6a:	61bb      	str	r3, [r7, #24]
      paramC = 0x0000;
10052b6c:	2300      	movs	r3, #0
10052b6e:	617b      	str	r3, [r7, #20]
      paramD = 0x01F4;
10052b70:	23fa      	movs	r3, #250	@ 0xfa
10052b72:	005b      	lsls	r3, r3, #1
10052b74:	613b      	str	r3, [r7, #16]

      /* USER CODE BEGIN CONN_PARAM_UPDATE */

      /* USER CODE END CONN_PARAM_UPDATE */
      break;
10052b76:	e013      	b.n	10052ba0 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_CONN_PARAM_UPDATE */
    case PROC_GAP_PERIPH_CONN_TERMINATE:
    {
      status = aci_gap_terminate(bleAppContext.BleApplicationContext_legacy.connectionHandle, 0x13);
10052b78:	4b4e      	ldr	r3, [pc, #312]	@ (10052cb4 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
10052b7a:	899b      	ldrh	r3, [r3, #12]
10052b7c:	250f      	movs	r5, #15
10052b7e:	197c      	adds	r4, r7, r5
10052b80:	2113      	movs	r1, #19
10052b82:	0018      	movs	r0, r3
10052b84:	f7fd f8a4 	bl	1004fcd0 <aci_gap_terminate>
10052b88:	0003      	movs	r3, r0
10052b8a:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10052b8c:	197b      	adds	r3, r7, r5
10052b8e:	781b      	ldrb	r3, [r3, #0]
10052b90:	2b00      	cmp	r3, #0
10052b92:	d104      	bne.n	10052b9e <APP_BLE_Procedure_Gap_Peripheral+0x8a>
         APP_DBG_MSG("aci_gap_terminate failure: reason=0x%02X\n", status);
      }
      else
      {
        APP_DBG_MSG("==>> aci_gap_terminate : Success\n");
        gap_cmd_resp_wait();/* waiting for HCI_DISCONNECTION_COMPLETE_EVT_CODE */
10052b94:	f000 f89a 	bl	10052ccc <gap_cmd_resp_wait>
      }
      break;
10052b98:	e001      	b.n	10052b9e <APP_BLE_Procedure_Gap_Peripheral+0x8a>
    /* PROC_GAP_PERIPH_CONN_TERMINATE */
    /* USER CODE BEGIN GAP_PERIPHERAL_1 */

    /* USER CODE END GAP_PERIPHERAL_1 */
    default:
      break;
10052b9a:	46c0      	nop			@ (mov r8, r8)
10052b9c:	e000      	b.n	10052ba0 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
      break;
10052b9e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Call ACI APIs */
  switch(ProcGapPeripheralId)
10052ba0:	1dfb      	adds	r3, r7, #7
10052ba2:	781b      	ldrb	r3, [r3, #0]
10052ba4:	2b06      	cmp	r3, #6
10052ba6:	d100      	bne.n	10052baa <APP_BLE_Procedure_Gap_Peripheral+0x96>
10052ba8:	e078      	b.n	10052c9c <APP_BLE_Procedure_Gap_Peripheral+0x188>
10052baa:	dd00      	ble.n	10052bae <APP_BLE_Procedure_Gap_Peripheral+0x9a>
10052bac:	e078      	b.n	10052ca0 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
10052bae:	2b04      	cmp	r3, #4
10052bb0:	d061      	beq.n	10052c76 <APP_BLE_Procedure_Gap_Peripheral+0x162>
10052bb2:	dd00      	ble.n	10052bb6 <APP_BLE_Procedure_Gap_Peripheral+0xa2>
10052bb4:	e074      	b.n	10052ca0 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
10052bb6:	2b01      	cmp	r3, #1
10052bb8:	dc02      	bgt.n	10052bc0 <APP_BLE_Procedure_Gap_Peripheral+0xac>
10052bba:	2b00      	cmp	r3, #0
10052bbc:	da03      	bge.n	10052bc6 <APP_BLE_Procedure_Gap_Peripheral+0xb2>
    }/* PROC_GAP_PERIPH_SET_BROADCAST_MODE */
    /* USER CODE BEGIN GAP_PERIPHERAL_2 */

    /* USER CODE END GAP_PERIPHERAL_2 */
    default:
      break;
10052bbe:	e06f      	b.n	10052ca0 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
  switch(ProcGapPeripheralId)
10052bc0:	2b02      	cmp	r3, #2
10052bc2:	d046      	beq.n	10052c52 <APP_BLE_Procedure_Gap_Peripheral+0x13e>
      break;
10052bc4:	e06c      	b.n	10052ca0 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
      Advertising_Set_Parameters_t Advertising_Set_Parameters = {0};
10052bc6:	2308      	movs	r3, #8
10052bc8:	18fb      	adds	r3, r7, r3
10052bca:	0018      	movs	r0, r3
10052bcc:	2306      	movs	r3, #6
10052bce:	001a      	movs	r2, r3
10052bd0:	2100      	movs	r1, #0
10052bd2:	f015 fdb3 	bl	1006873c <memset>
      status = aci_gap_set_advertising_configuration(0,
10052bd6:	250f      	movs	r5, #15
10052bd8:	197c      	adds	r4, r7, r5
10052bda:	69fa      	ldr	r2, [r7, #28]
10052bdc:	2300      	movs	r3, #0
10052bde:	930a      	str	r3, [sp, #40]	@ 0x28
10052be0:	2300      	movs	r3, #0
10052be2:	9309      	str	r3, [sp, #36]	@ 0x24
10052be4:	2301      	movs	r3, #1
10052be6:	9308      	str	r3, [sp, #32]
10052be8:	2300      	movs	r3, #0
10052bea:	9307      	str	r3, [sp, #28]
10052bec:	2301      	movs	r3, #1
10052bee:	9306      	str	r3, [sp, #24]
10052bf0:	2300      	movs	r3, #0
10052bf2:	9305      	str	r3, [sp, #20]
10052bf4:	2300      	movs	r3, #0
10052bf6:	9304      	str	r3, [sp, #16]
10052bf8:	2300      	movs	r3, #0
10052bfa:	9303      	str	r3, [sp, #12]
10052bfc:	2300      	movs	r3, #0
10052bfe:	9302      	str	r3, [sp, #8]
10052c00:	2307      	movs	r3, #7
10052c02:	9301      	str	r3, [sp, #4]
10052c04:	69bb      	ldr	r3, [r7, #24]
10052c06:	9300      	str	r3, [sp, #0]
10052c08:	0013      	movs	r3, r2
10052c0a:	2213      	movs	r2, #19
10052c0c:	2102      	movs	r1, #2
10052c0e:	2000      	movs	r0, #0
10052c10:	f002 fc06 	bl	10055420 <aci_gap_set_advertising_configuration>
10052c14:	0003      	movs	r3, r0
10052c16:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10052c18:	197b      	adds	r3, r7, r5
10052c1a:	781b      	ldrb	r3, [r3, #0]
10052c1c:	2b00      	cmp	r3, #0
10052c1e:	d103      	bne.n	10052c28 <APP_BLE_Procedure_Gap_Peripheral+0x114>
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
10052c20:	697b      	ldr	r3, [r7, #20]
10052c22:	b2da      	uxtb	r2, r3
10052c24:	4b23      	ldr	r3, [pc, #140]	@ (10052cb4 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
10052c26:	739a      	strb	r2, [r3, #14]
      status = aci_gap_set_advertising_data(0, ADV_COMPLETE_DATA, sizeof(a_AdvData), (uint8_t*) a_AdvData);
10052c28:	250f      	movs	r5, #15
10052c2a:	197c      	adds	r4, r7, r5
10052c2c:	4b22      	ldr	r3, [pc, #136]	@ (10052cb8 <APP_BLE_Procedure_Gap_Peripheral+0x1a4>)
10052c2e:	2210      	movs	r2, #16
10052c30:	2103      	movs	r1, #3
10052c32:	2000      	movs	r0, #0
10052c34:	f002 fc29 	bl	1005548a <aci_gap_set_advertising_data>
10052c38:	0003      	movs	r3, r0
10052c3a:	7023      	strb	r3, [r4, #0]
      status = aci_gap_set_advertising_enable(ENABLE, 1, &Advertising_Set_Parameters);
10052c3c:	197c      	adds	r4, r7, r5
10052c3e:	2308      	movs	r3, #8
10052c40:	18fb      	adds	r3, r7, r3
10052c42:	001a      	movs	r2, r3
10052c44:	2101      	movs	r1, #1
10052c46:	2001      	movs	r0, #1
10052c48:	f002 fc23 	bl	10055492 <aci_gap_set_advertising_enable>
10052c4c:	0003      	movs	r3, r0
10052c4e:	7023      	strb	r3, [r4, #0]
      break;
10052c50:	e029      	b.n	10052ca6 <APP_BLE_Procedure_Gap_Peripheral+0x192>
      status = aci_gap_set_advertising_enable(DISABLE, 0, NULL);
10052c52:	250f      	movs	r5, #15
10052c54:	197c      	adds	r4, r7, r5
10052c56:	2200      	movs	r2, #0
10052c58:	2100      	movs	r1, #0
10052c5a:	2000      	movs	r0, #0
10052c5c:	f002 fc19 	bl	10055492 <aci_gap_set_advertising_enable>
10052c60:	0003      	movs	r3, r0
10052c62:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10052c64:	197b      	adds	r3, r7, r5
10052c66:	781b      	ldrb	r3, [r3, #0]
10052c68:	2b00      	cmp	r3, #0
10052c6a:	d11b      	bne.n	10052ca4 <APP_BLE_Procedure_Gap_Peripheral+0x190>
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
10052c6c:	697b      	ldr	r3, [r7, #20]
10052c6e:	b2da      	uxtb	r2, r3
10052c70:	4b10      	ldr	r3, [pc, #64]	@ (10052cb4 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
10052c72:	739a      	strb	r2, [r3, #14]
      break;
10052c74:	e016      	b.n	10052ca4 <APP_BLE_Procedure_Gap_Peripheral+0x190>
       status = aci_l2cap_connection_parameter_update_req(
10052c76:	4b0f      	ldr	r3, [pc, #60]	@ (10052cb4 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
10052c78:	8998      	ldrh	r0, [r3, #12]
10052c7a:	69fb      	ldr	r3, [r7, #28]
10052c7c:	b299      	uxth	r1, r3
10052c7e:	69bb      	ldr	r3, [r7, #24]
10052c80:	b29a      	uxth	r2, r3
10052c82:	697b      	ldr	r3, [r7, #20]
10052c84:	b29d      	uxth	r5, r3
10052c86:	693b      	ldr	r3, [r7, #16]
10052c88:	b29b      	uxth	r3, r3
10052c8a:	240f      	movs	r4, #15
10052c8c:	193c      	adds	r4, r7, r4
10052c8e:	9300      	str	r3, [sp, #0]
10052c90:	002b      	movs	r3, r5
10052c92:	f7fd f8e8 	bl	1004fe66 <aci_l2cap_connection_parameter_update_req>
10052c96:	0003      	movs	r3, r0
10052c98:	7023      	strb	r3, [r4, #0]
      break;
10052c9a:	e004      	b.n	10052ca6 <APP_BLE_Procedure_Gap_Peripheral+0x192>
      break;
10052c9c:	46c0      	nop			@ (mov r8, r8)
10052c9e:	e002      	b.n	10052ca6 <APP_BLE_Procedure_Gap_Peripheral+0x192>
      break;
10052ca0:	46c0      	nop			@ (mov r8, r8)
10052ca2:	e000      	b.n	10052ca6 <APP_BLE_Procedure_Gap_Peripheral+0x192>
      break;
10052ca4:	46c0      	nop			@ (mov r8, r8)
  }
  return;
10052ca6:	46c0      	nop			@ (mov r8, r8)
}
10052ca8:	46bd      	mov	sp, r7
10052caa:	b008      	add	sp, #32
10052cac:	bdb0      	pop	{r4, r5, r7, pc}
10052cae:	46c0      	nop			@ (mov r8, r8)
10052cb0:	1006a270 	.word	0x1006a270
10052cb4:	20002810 	.word	0x20002810
10052cb8:	20002d5c 	.word	0x20002d5c

10052cbc <gap_cmd_resp_release>:
/* USER CODE BEGIN FD*/

/* USER CODE END FD*/

static void gap_cmd_resp_release(void)
{
10052cbc:	b580      	push	{r7, lr}
10052cbe:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_PROC_GAP_COMPLETE);
10052cc0:	2001      	movs	r0, #1
10052cc2:	f002 fa95 	bl	100551f0 <UTIL_SEQ_SetEvt>
  return;
10052cc6:	46c0      	nop			@ (mov r8, r8)
}
10052cc8:	46bd      	mov	sp, r7
10052cca:	bd80      	pop	{r7, pc}

10052ccc <gap_cmd_resp_wait>:

static void gap_cmd_resp_wait(void)
{
10052ccc:	b580      	push	{r7, lr}
10052cce:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_PROC_GAP_COMPLETE);
10052cd0:	2001      	movs	r0, #1
10052cd2:	f002 faab 	bl	1005522c <UTIL_SEQ_WaitEvt>
  return;
10052cd6:	46c0      	nop			@ (mov r8, r8)
}
10052cd8:	46bd      	mov	sp, r7
10052cda:	bd80      	pop	{r7, pc}

10052cdc <USART_EventHandler>:
 * @brief  Event handler
 * @param  p_Event: Address of the buffer holding the p_Event
 * @retval Ack: Return whether the p_Event has been managed or not
 */
static BLEEVT_EvtAckStatus_t USART_EventHandler(aci_blecore_event *p_evt)
{
10052cdc:	b580      	push	{r7, lr}
10052cde:	b08e      	sub	sp, #56	@ 0x38
10052ce0:	af00      	add	r7, sp, #0
10052ce2:	6078      	str	r0, [r7, #4]
  BLEEVT_EvtAckStatus_t return_value = BLEEVT_NoAck;
10052ce4:	2337      	movs	r3, #55	@ 0x37
10052ce6:	18fb      	adds	r3, r7, r3
10052ce8:	2200      	movs	r2, #0
10052cea:	701a      	strb	r2, [r3, #0]
  USART_NotificationEvt_t notification;
  /* USER CODE BEGIN Service1_EventHandler_1 */

  /* USER CODE END Service1_EventHandler_1 */

  switch(p_evt->ecode)
10052cec:	687b      	ldr	r3, [r7, #4]
10052cee:	781a      	ldrb	r2, [r3, #0]
10052cf0:	785b      	ldrb	r3, [r3, #1]
10052cf2:	021b      	lsls	r3, r3, #8
10052cf4:	4313      	orrs	r3, r2
10052cf6:	b29b      	uxth	r3, r3
10052cf8:	4a62      	ldr	r2, [pc, #392]	@ (10052e84 <USART_EventHandler+0x1a8>)
10052cfa:	4694      	mov	ip, r2
10052cfc:	4463      	add	r3, ip
10052cfe:	2b19      	cmp	r3, #25
10052d00:	d900      	bls.n	10052d04 <USART_EventHandler+0x28>
10052d02:	e0b1      	b.n	10052e68 <USART_EventHandler+0x18c>
10052d04:	009a      	lsls	r2, r3, #2
10052d06:	4b60      	ldr	r3, [pc, #384]	@ (10052e88 <USART_EventHandler+0x1ac>)
10052d08:	18d3      	adds	r3, r2, r3
10052d0a:	681b      	ldr	r3, [r3, #0]
10052d0c:	469f      	mov	pc, r3
    case ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
      p_attribute_modified = (aci_gatt_srv_attribute_modified_event_rp0*)p_evt->data;
10052d0e:	687b      	ldr	r3, [r7, #4]
10052d10:	3302      	adds	r3, #2
10052d12:	623b      	str	r3, [r7, #32]
      notification.ConnectionHandle         = p_attribute_modified->Connection_Handle;
10052d14:	6a3b      	ldr	r3, [r7, #32]
10052d16:	781a      	ldrb	r2, [r3, #0]
10052d18:	785b      	ldrb	r3, [r3, #1]
10052d1a:	021b      	lsls	r3, r3, #8
10052d1c:	4313      	orrs	r3, r2
10052d1e:	b29a      	uxth	r2, r3
10052d20:	210c      	movs	r1, #12
10052d22:	187b      	adds	r3, r7, r1
10052d24:	819a      	strh	r2, [r3, #12]
      notification.AttributeHandle          = p_attribute_modified->Attr_Handle;
10052d26:	6a3b      	ldr	r3, [r7, #32]
10052d28:	791a      	ldrb	r2, [r3, #4]
10052d2a:	795b      	ldrb	r3, [r3, #5]
10052d2c:	021b      	lsls	r3, r3, #8
10052d2e:	4313      	orrs	r3, r2
10052d30:	b29a      	uxth	r2, r3
10052d32:	187b      	adds	r3, r7, r1
10052d34:	81da      	strh	r2, [r3, #14]
      notification.DataTransfered.Length    = p_attribute_modified->Attr_Data_Length;
10052d36:	6a3b      	ldr	r3, [r7, #32]
10052d38:	799a      	ldrb	r2, [r3, #6]
10052d3a:	79db      	ldrb	r3, [r3, #7]
10052d3c:	021b      	lsls	r3, r3, #8
10052d3e:	4313      	orrs	r3, r2
10052d40:	b29b      	uxth	r3, r3
10052d42:	b2da      	uxtb	r2, r3
10052d44:	187b      	adds	r3, r7, r1
10052d46:	721a      	strb	r2, [r3, #8]
      notification.DataTransfered.p_Payload = p_attribute_modified->Attr_Data;
10052d48:	6a3b      	ldr	r3, [r7, #32]
10052d4a:	3308      	adds	r3, #8
10052d4c:	001a      	movs	r2, r3
10052d4e:	187b      	adds	r3, r7, r1
10052d50:	605a      	str	r2, [r3, #4]
      if(p_attribute_modified->Attr_Handle == (USART_Context.RxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10052d52:	6a3b      	ldr	r3, [r7, #32]
10052d54:	791a      	ldrb	r2, [r3, #4]
10052d56:	795b      	ldrb	r3, [r3, #5]
10052d58:	021b      	lsls	r3, r3, #8
10052d5a:	4313      	orrs	r3, r2
10052d5c:	b29b      	uxth	r3, r3
10052d5e:	001a      	movs	r2, r3
10052d60:	4b4a      	ldr	r3, [pc, #296]	@ (10052e8c <USART_EventHandler+0x1b0>)
10052d62:	889b      	ldrh	r3, [r3, #4]
10052d64:	3301      	adds	r3, #1
10052d66:	429a      	cmp	r2, r3
10052d68:	d10b      	bne.n	10052d82 <USART_EventHandler+0xa6>
      {
        return_value = BLEEVT_Ack;
10052d6a:	2337      	movs	r3, #55	@ 0x37
10052d6c:	18fb      	adds	r3, r7, r3
10052d6e:	2201      	movs	r2, #1
10052d70:	701a      	strb	r2, [r3, #0]

        notification.EvtOpcode = USART_RX_WRITE_NO_RESP_EVT;
10052d72:	187b      	adds	r3, r7, r1
10052d74:	2201      	movs	r2, #1
10052d76:	701a      	strb	r2, [r3, #0]
        /* USER CODE BEGIN Service1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */

        /* USER CODE END Service1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
        USART_Notification(&notification);
10052d78:	187b      	adds	r3, r7, r1
10052d7a:	0018      	movs	r0, r3
10052d7c:	f000 f914 	bl	10052fa8 <USART_Notification>
      } /* if(p_attribute_modified->Attr_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
10052d80:	e074      	b.n	10052e6c <USART_EventHandler+0x190>
      else if(p_attribute_modified->Attr_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10052d82:	6a3b      	ldr	r3, [r7, #32]
10052d84:	791a      	ldrb	r2, [r3, #4]
10052d86:	795b      	ldrb	r3, [r3, #5]
10052d88:	021b      	lsls	r3, r3, #8
10052d8a:	4313      	orrs	r3, r2
10052d8c:	b29b      	uxth	r3, r3
10052d8e:	001a      	movs	r2, r3
10052d90:	4b3e      	ldr	r3, [pc, #248]	@ (10052e8c <USART_EventHandler+0x1b0>)
10052d92:	88db      	ldrh	r3, [r3, #6]
10052d94:	3301      	adds	r3, #1
10052d96:	429a      	cmp	r2, r3
10052d98:	d168      	bne.n	10052e6c <USART_EventHandler+0x190>
        return_value = BLEEVT_Ack;
10052d9a:	2337      	movs	r3, #55	@ 0x37
10052d9c:	18fb      	adds	r3, r7, r3
10052d9e:	2201      	movs	r2, #1
10052da0:	701a      	strb	r2, [r3, #0]
        notification.EvtOpcode = USART_REQ_TX_WRITE_EVT;
10052da2:	210c      	movs	r1, #12
10052da4:	187b      	adds	r3, r7, r1
10052da6:	2203      	movs	r2, #3
10052da8:	701a      	strb	r2, [r3, #0]
        USART_Notification(&notification);
10052daa:	187b      	adds	r3, r7, r1
10052dac:	0018      	movs	r0, r3
10052dae:	f000 f8fb 	bl	10052fa8 <USART_Notification>
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
10052db2:	e05b      	b.n	10052e6c <USART_EventHandler+0x190>
    case ACI_GATT_SRV_READ_VSEVT_CODE :
    {
      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_READ_BEGIN */

      /* USER CODE END EVT_BLUE_GATT_SRV_READ_BEGIN */
      p_read = (aci_gatt_srv_read_event_rp0*)p_evt->data;
10052db4:	687b      	ldr	r3, [r7, #4]
10052db6:	3302      	adds	r3, #2
10052db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if(p_read->Attribute_Handle == (USART_Context.TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10052dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10052dbc:	791a      	ldrb	r2, [r3, #4]
10052dbe:	795b      	ldrb	r3, [r3, #5]
10052dc0:	021b      	lsls	r3, r3, #8
10052dc2:	4313      	orrs	r3, r2
10052dc4:	b29b      	uxth	r3, r3
10052dc6:	001a      	movs	r2, r3
10052dc8:	4b30      	ldr	r3, [pc, #192]	@ (10052e8c <USART_EventHandler+0x1b0>)
10052dca:	885b      	ldrh	r3, [r3, #2]
10052dcc:	3301      	adds	r3, #1
10052dce:	429a      	cmp	r2, r3
10052dd0:	d10c      	bne.n	10052dec <USART_EventHandler+0x110>
	  {
		return_value = BLEEVT_Ack;
10052dd2:	2337      	movs	r3, #55	@ 0x37
10052dd4:	18fb      	adds	r3, r7, r3
10052dd6:	2201      	movs	r2, #1
10052dd8:	701a      	strb	r2, [r3, #0]
		/*USER CODE BEGIN Service1_Char_1_ACI_GATT_SRV_READ_VSEVT_CODE_1 */
		notification.EvtOpcode = USART_TX_READ_EVT;
10052dda:	210c      	movs	r1, #12
10052ddc:	187b      	adds	r3, r7, r1
10052dde:	2200      	movs	r2, #0
10052de0:	701a      	strb	r2, [r3, #0]
		USART_Notification(&notification);
10052de2:	187b      	adds	r3, r7, r1
10052de4:	0018      	movs	r0, r3
10052de6:	f000 f8df 	bl	10052fa8 <USART_Notification>
	  } /* if(p_read->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_READ_END */

      /* USER CODE END EVT_EVT_BLUE_GATT_SRV_READ_END */
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
10052dea:	e041      	b.n	10052e70 <USART_EventHandler+0x194>
	  else if(p_read->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10052dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10052dee:	791a      	ldrb	r2, [r3, #4]
10052df0:	795b      	ldrb	r3, [r3, #5]
10052df2:	021b      	lsls	r3, r3, #8
10052df4:	4313      	orrs	r3, r2
10052df6:	b29b      	uxth	r3, r3
10052df8:	001a      	movs	r2, r3
10052dfa:	4b24      	ldr	r3, [pc, #144]	@ (10052e8c <USART_EventHandler+0x1b0>)
10052dfc:	88db      	ldrh	r3, [r3, #6]
10052dfe:	3301      	adds	r3, #1
10052e00:	429a      	cmp	r2, r3
10052e02:	d135      	bne.n	10052e70 <USART_EventHandler+0x194>
		return_value = BLEEVT_Ack;
10052e04:	2337      	movs	r3, #55	@ 0x37
10052e06:	18fb      	adds	r3, r7, r3
10052e08:	2201      	movs	r2, #1
10052e0a:	701a      	strb	r2, [r3, #0]
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
10052e0c:	e030      	b.n	10052e70 <USART_EventHandler+0x194>
    case ACI_GATT_SRV_WRITE_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_SRV_GATT_BEGIN */

      /* USER CODE END EVT_BLUE_SRV_GATT_BEGIN */
      p_write = (aci_gatt_srv_write_event_rp0*)p_evt->data;
10052e0e:	687b      	ldr	r3, [r7, #4]
10052e10:	3302      	adds	r3, #2
10052e12:	633b      	str	r3, [r7, #48]	@ 0x30
      if(p_write->Attribute_Handle == (USART_Context.RxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10052e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10052e16:	795a      	ldrb	r2, [r3, #5]
10052e18:	799b      	ldrb	r3, [r3, #6]
10052e1a:	021b      	lsls	r3, r3, #8
10052e1c:	4313      	orrs	r3, r2
10052e1e:	b29b      	uxth	r3, r3
10052e20:	001a      	movs	r2, r3
10052e22:	4b1a      	ldr	r3, [pc, #104]	@ (10052e8c <USART_EventHandler+0x1b0>)
10052e24:	889b      	ldrh	r3, [r3, #4]
10052e26:	3301      	adds	r3, #1
10052e28:	429a      	cmp	r2, r3
10052e2a:	d104      	bne.n	10052e36 <USART_EventHandler+0x15a>
      {
        return_value = BLEEVT_Ack;
10052e2c:	2337      	movs	r3, #55	@ 0x37
10052e2e:	18fb      	adds	r3, r7, r3
10052e30:	2201      	movs	r2, #1
10052e32:	701a      	strb	r2, [r3, #0]
      } /*if(p_write->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_WRITE_END */

      /* USER CODE END EVT_BLUE_GATT_SRV_WRITE_END */
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
10052e34:	e01e      	b.n	10052e74 <USART_EventHandler+0x198>
      else if(p_write->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10052e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10052e38:	795a      	ldrb	r2, [r3, #5]
10052e3a:	799b      	ldrb	r3, [r3, #6]
10052e3c:	021b      	lsls	r3, r3, #8
10052e3e:	4313      	orrs	r3, r2
10052e40:	b29b      	uxth	r3, r3
10052e42:	001a      	movs	r2, r3
10052e44:	4b11      	ldr	r3, [pc, #68]	@ (10052e8c <USART_EventHandler+0x1b0>)
10052e46:	88db      	ldrh	r3, [r3, #6]
10052e48:	3301      	adds	r3, #1
10052e4a:	429a      	cmp	r2, r3
10052e4c:	d112      	bne.n	10052e74 <USART_EventHandler+0x198>
        return_value = BLEEVT_Ack;
10052e4e:	2337      	movs	r3, #55	@ 0x37
10052e50:	18fb      	adds	r3, r7, r3
10052e52:	2201      	movs	r2, #1
10052e54:	701a      	strb	r2, [r3, #0]
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
10052e56:	e00d      	b.n	10052e74 <USART_EventHandler+0x198>
    }
    case ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE:
    {
      aci_gatt_tx_pool_available_event_rp0 *p_tx_pool_available_event;
      p_tx_pool_available_event = (aci_gatt_tx_pool_available_event_rp0 *) p_evt->data;
10052e58:	687b      	ldr	r3, [r7, #4]
10052e5a:	3302      	adds	r3, #2
10052e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      UNUSED(p_tx_pool_available_event);

      /* USER CODE BEGIN ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */

      /* USER CODE END ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */
      break;/* ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE*/
10052e5e:	e00a      	b.n	10052e76 <USART_EventHandler+0x19a>
    }
    case ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE:
    {
      aci_att_exchange_mtu_resp_event_rp0 *p_exchange_mtu;
      p_exchange_mtu = (aci_att_exchange_mtu_resp_event_rp0 *)  p_evt->data;
10052e60:	687b      	ldr	r3, [r7, #4]
10052e62:	3302      	adds	r3, #2
10052e64:	627b      	str	r3, [r7, #36]	@ 0x24
      UNUSED(p_exchange_mtu);

      /* USER CODE BEGIN ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */

      /* USER CODE END ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
      break;/* ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
10052e66:	e006      	b.n	10052e76 <USART_EventHandler+0x19a>
    /* USER CODE END BLECORE_EVT */
  default:
    /* USER CODE BEGIN EVT_DEFAULT */

    /* USER CODE END EVT_DEFAULT */
    break;
10052e68:	46c0      	nop			@ (mov r8, r8)
10052e6a:	e004      	b.n	10052e76 <USART_EventHandler+0x19a>
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
10052e6c:	46c0      	nop			@ (mov r8, r8)
10052e6e:	e002      	b.n	10052e76 <USART_EventHandler+0x19a>
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
10052e70:	46c0      	nop			@ (mov r8, r8)
10052e72:	e000      	b.n	10052e76 <USART_EventHandler+0x19a>
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
10052e74:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_EventHandler_2 */

  /* USER CODE END Service1_EventHandler_2 */

  return(return_value);
10052e76:	2337      	movs	r3, #55	@ 0x37
10052e78:	18fb      	adds	r3, r7, r3
10052e7a:	781b      	ldrb	r3, [r3, #0]
}/* end USART_EventHandler */
10052e7c:	0018      	movs	r0, r3
10052e7e:	46bd      	mov	sp, r7
10052e80:	b00e      	add	sp, #56	@ 0x38
10052e82:	bd80      	pop	{r7, pc}
10052e84:	fffff3ff 	.word	0xfffff3ff
10052e88:	1006a31c 	.word	0x1006a31c
10052e8c:	20002824 	.word	0x20002824

10052e90 <USART_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void USART_Init(void)
{
10052e90:	b590      	push	{r4, r7, lr}
10052e92:	b083      	sub	sp, #12
10052e94:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
10052e96:	1dfb      	adds	r3, r7, #7
10052e98:	2212      	movs	r2, #18
10052e9a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END InitService1Svc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  BLEEVT_RegisterGattEvtHandler(USART_EventHandler);
10052e9c:	4b17      	ldr	r3, [pc, #92]	@ (10052efc <USART_Init+0x6c>)
10052e9e:	0018      	movs	r0, r3
10052ea0:	f7fc fbf6 	bl	1004f690 <BLEEVT_RegisterGattEvtHandler>

  ret = aci_gatt_srv_add_service((ble_gatt_srv_def_t *)&usart_service);
10052ea4:	1dfc      	adds	r4, r7, #7
10052ea6:	4b16      	ldr	r3, [pc, #88]	@ (10052f00 <USART_Init+0x70>)
10052ea8:	0018      	movs	r0, r3
10052eaa:	f7fc ff79 	bl	1004fda0 <aci_gatt_srv_add_service>
10052eae:	0003      	movs	r3, r0
10052eb0:	7023      	strb	r3, [r4, #0]
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_srv_add_service command: USART \n");
  }

  USART_Context.UsartSvcHdle = aci_gatt_srv_get_service_handle((ble_gatt_srv_def_t *) &usart_service);
10052eb2:	4b13      	ldr	r3, [pc, #76]	@ (10052f00 <USART_Init+0x70>)
10052eb4:	0018      	movs	r0, r3
10052eb6:	f7fc ff80 	bl	1004fdba <aci_gatt_srv_get_service_handle>
10052eba:	0003      	movs	r3, r0
10052ebc:	001a      	movs	r2, r3
10052ebe:	4b11      	ldr	r3, [pc, #68]	@ (10052f04 <USART_Init+0x74>)
10052ec0:	801a      	strh	r2, [r3, #0]
  USART_Context.TxCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&usart_chars[0]);
10052ec2:	4b11      	ldr	r3, [pc, #68]	@ (10052f08 <USART_Init+0x78>)
10052ec4:	0018      	movs	r0, r3
10052ec6:	f7fc ff98 	bl	1004fdfa <aci_gatt_srv_get_char_decl_handle>
10052eca:	0003      	movs	r3, r0
10052ecc:	001a      	movs	r2, r3
10052ece:	4b0d      	ldr	r3, [pc, #52]	@ (10052f04 <USART_Init+0x74>)
10052ed0:	805a      	strh	r2, [r3, #2]
  USART_Context.RxCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&usart_chars[1]);
10052ed2:	4b0e      	ldr	r3, [pc, #56]	@ (10052f0c <USART_Init+0x7c>)
10052ed4:	0018      	movs	r0, r3
10052ed6:	f7fc ff90 	bl	1004fdfa <aci_gatt_srv_get_char_decl_handle>
10052eda:	0003      	movs	r3, r0
10052edc:	001a      	movs	r2, r3
10052ede:	4b09      	ldr	r3, [pc, #36]	@ (10052f04 <USART_Init+0x74>)
10052ee0:	809a      	strh	r2, [r3, #4]
  USART_Context.Req_TxCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&usart_chars[2]);
10052ee2:	4b0b      	ldr	r3, [pc, #44]	@ (10052f10 <USART_Init+0x80>)
10052ee4:	0018      	movs	r0, r3
10052ee6:	f7fc ff88 	bl	1004fdfa <aci_gatt_srv_get_char_decl_handle>
10052eea:	0003      	movs	r3, r0
10052eec:	001a      	movs	r2, r3
10052eee:	4b05      	ldr	r3, [pc, #20]	@ (10052f04 <USART_Init+0x74>)
10052ef0:	80da      	strh	r2, [r3, #6]
  if (ret != BLE_STATUS_SUCCESS)
  {
    APP_DBG_MSG("  Fail registering USART handlers\n");
  }

  return;
10052ef2:	46c0      	nop			@ (mov r8, r8)
}
10052ef4:	46bd      	mov	sp, r7
10052ef6:	b003      	add	sp, #12
10052ef8:	bd90      	pop	{r4, r7, pc}
10052efa:	46c0      	nop			@ (mov r8, r8)
10052efc:	10052cdd 	.word	0x10052cdd
10052f00:	1006a2f4 	.word	0x1006a2f4
10052f04:	20002824 	.word	0x20002824
10052f08:	1006a288 	.word	0x1006a288
10052f0c:	1006a2ac 	.word	0x1006a2ac
10052f10:	1006a2d0 	.word	0x1006a2d0

10052f14 <USART_UpdateValue>:
 * @param  CharOpcode: Characteristic identifier
 * @param  pData: pointer to the new data to be written in the characteristic
 *
 */
tBleStatus USART_UpdateValue(USART_CharOpcode_t CharOpcode, USART_Data_t *pData)
{
10052f14:	b580      	push	{r7, lr}
10052f16:	b084      	sub	sp, #16
10052f18:	af00      	add	r7, sp, #0
10052f1a:	0002      	movs	r2, r0
10052f1c:	6039      	str	r1, [r7, #0]
10052f1e:	1dfb      	adds	r3, r7, #7
10052f20:	701a      	strb	r2, [r3, #0]
  tBleStatus ret = BLE_STATUS_SUCCESS;
10052f22:	230f      	movs	r3, #15
10052f24:	18fb      	adds	r3, r7, r3
10052f26:	2200      	movs	r2, #0
10052f28:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Service1_App_Update_Char_1 */

  /* USER CODE END Service1_App_Update_Char_1 */

  switch(CharOpcode)
10052f2a:	1dfb      	adds	r3, r7, #7
10052f2c:	781b      	ldrb	r3, [r3, #0]
10052f2e:	2b02      	cmp	r3, #2
10052f30:	d01f      	beq.n	10052f72 <USART_UpdateValue+0x5e>
10052f32:	dc2b      	bgt.n	10052f8c <USART_UpdateValue+0x78>
10052f34:	2b00      	cmp	r3, #0
10052f36:	d002      	beq.n	10052f3e <USART_UpdateValue+0x2a>
10052f38:	2b01      	cmp	r3, #1
10052f3a:	d00d      	beq.n	10052f58 <USART_UpdateValue+0x44>

      /* USER CODE END Service1_Char_Value_3*/
      break;

    default:
      break;
10052f3c:	e026      	b.n	10052f8c <USART_UpdateValue+0x78>
      memcpy(tx_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(tx_val_buffer)));
10052f3e:	683b      	ldr	r3, [r7, #0]
10052f40:	6819      	ldr	r1, [r3, #0]
10052f42:	683b      	ldr	r3, [r7, #0]
10052f44:	791b      	ldrb	r3, [r3, #4]
10052f46:	1e5a      	subs	r2, r3, #1
10052f48:	4193      	sbcs	r3, r2
10052f4a:	b2db      	uxtb	r3, r3
10052f4c:	001a      	movs	r2, r3
10052f4e:	4b13      	ldr	r3, [pc, #76]	@ (10052f9c <USART_UpdateValue+0x88>)
10052f50:	0018      	movs	r0, r3
10052f52:	f015 fc68 	bl	10068826 <memcpy>
      break;
10052f56:	e01a      	b.n	10052f8e <USART_UpdateValue+0x7a>
      memcpy(rx_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(rx_val_buffer)));
10052f58:	683b      	ldr	r3, [r7, #0]
10052f5a:	6819      	ldr	r1, [r3, #0]
10052f5c:	683b      	ldr	r3, [r7, #0]
10052f5e:	791b      	ldrb	r3, [r3, #4]
10052f60:	1e5a      	subs	r2, r3, #1
10052f62:	4193      	sbcs	r3, r2
10052f64:	b2db      	uxtb	r3, r3
10052f66:	001a      	movs	r2, r3
10052f68:	4b0d      	ldr	r3, [pc, #52]	@ (10052fa0 <USART_UpdateValue+0x8c>)
10052f6a:	0018      	movs	r0, r3
10052f6c:	f015 fc5b 	bl	10068826 <memcpy>
      break;
10052f70:	e00d      	b.n	10052f8e <USART_UpdateValue+0x7a>
      memcpy(req_tx_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(req_tx_val_buffer)));
10052f72:	683b      	ldr	r3, [r7, #0]
10052f74:	6819      	ldr	r1, [r3, #0]
10052f76:	683b      	ldr	r3, [r7, #0]
10052f78:	791b      	ldrb	r3, [r3, #4]
10052f7a:	1e5a      	subs	r2, r3, #1
10052f7c:	4193      	sbcs	r3, r2
10052f7e:	b2db      	uxtb	r3, r3
10052f80:	001a      	movs	r2, r3
10052f82:	4b08      	ldr	r3, [pc, #32]	@ (10052fa4 <USART_UpdateValue+0x90>)
10052f84:	0018      	movs	r0, r3
10052f86:	f015 fc4e 	bl	10068826 <memcpy>
      break;
10052f8a:	e000      	b.n	10052f8e <USART_UpdateValue+0x7a>
      break;
10052f8c:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_App_Update_Char_2 */

  /* USER CODE END Service1_App_Update_Char_2 */

  return ret;
10052f8e:	230f      	movs	r3, #15
10052f90:	18fb      	adds	r3, r7, r3
10052f92:	781b      	ldrb	r3, [r3, #0]
}
10052f94:	0018      	movs	r0, r3
10052f96:	46bd      	mov	sp, r7
10052f98:	b004      	add	sp, #16
10052f9a:	bd80      	pop	{r7, pc}
10052f9c:	2000282c 	.word	0x2000282c
10052fa0:	20002830 	.word	0x20002830
10052fa4:	20002834 	.word	0x20002834

10052fa8 <USART_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void USART_Notification(USART_NotificationEvt_t *p_Notification)
{
10052fa8:	b5b0      	push	{r4, r5, r7, lr}
10052faa:	b08e      	sub	sp, #56	@ 0x38
10052fac:	af00      	add	r7, sp, #0
10052fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service1_Notification_1 */

  /* USER CODE END Service1_Notification_1 */
  switch(p_Notification->EvtOpcode)
10052fb0:	687b      	ldr	r3, [r7, #4]
10052fb2:	781b      	ldrb	r3, [r3, #0]
10052fb4:	2b03      	cmp	r3, #3
10052fb6:	d017      	beq.n	10052fe8 <USART_Notification+0x40>
10052fb8:	dc56      	bgt.n	10053068 <USART_Notification+0xc0>
10052fba:	2b02      	cmp	r3, #2
10052fbc:	d056      	beq.n	1005306c <USART_Notification+0xc4>
10052fbe:	dc53      	bgt.n	10053068 <USART_Notification+0xc0>
10052fc0:	2b00      	cmp	r3, #0
10052fc2:	d055      	beq.n	10053070 <USART_Notification+0xc8>
10052fc4:	2b01      	cmp	r3, #1
10052fc6:	d000      	beq.n	10052fca <USART_Notification+0x22>

    default:
      /* USER CODE BEGIN Service1_Notification_default */

      /* USER CODE END Service1_Notification_default */
      break;
10052fc8:	e04e      	b.n	10053068 <USART_Notification+0xc0>
      Event_t recieved = {EVENT_USART, p_Notification->DataTransfered.p_Payload[0]};
10052fca:	2130      	movs	r1, #48	@ 0x30
10052fcc:	187b      	adds	r3, r7, r1
10052fce:	2206      	movs	r2, #6
10052fd0:	701a      	strb	r2, [r3, #0]
10052fd2:	687b      	ldr	r3, [r7, #4]
10052fd4:	685b      	ldr	r3, [r3, #4]
10052fd6:	781b      	ldrb	r3, [r3, #0]
10052fd8:	001a      	movs	r2, r3
10052fda:	187b      	adds	r3, r7, r1
10052fdc:	805a      	strh	r2, [r3, #2]
      COMM_Event_Post(recieved);
10052fde:	187b      	adds	r3, r7, r1
10052fe0:	6818      	ldr	r0, [r3, #0]
10052fe2:	f7f0 fe13 	bl	10043c0c <COMM_Event_Post>
      break;
10052fe6:	e044      	b.n	10053072 <USART_Notification+0xca>
        int16_t data = BLUETOOTH_ReadBuffer();
10052fe8:	2536      	movs	r5, #54	@ 0x36
10052fea:	197c      	adds	r4, r7, r5
10052fec:	f7ee ffcc 	bl	10041f88 <BLUETOOTH_ReadBuffer>
10052ff0:	0003      	movs	r3, r0
10052ff2:	8023      	strh	r3, [r4, #0]
        if(data != -1){
10052ff4:	002a      	movs	r2, r5
10052ff6:	18bb      	adds	r3, r7, r2
10052ff8:	2100      	movs	r1, #0
10052ffa:	5e5b      	ldrsh	r3, [r3, r1]
10052ffc:	3301      	adds	r3, #1
10052ffe:	d022      	beq.n	10053046 <USART_Notification+0x9e>
        	uint8_t data1 = (uint8_t)data;
10053000:	18bb      	adds	r3, r7, r2
10053002:	881b      	ldrh	r3, [r3, #0]
10053004:	b2da      	uxtb	r2, r3
10053006:	202f      	movs	r0, #47	@ 0x2f
10053008:	183b      	adds	r3, r7, r0
1005300a:	701a      	strb	r2, [r3, #0]
			USART_Data_t value1 = {&data1, 1};
1005300c:	2124      	movs	r1, #36	@ 0x24
1005300e:	187b      	adds	r3, r7, r1
10053010:	183a      	adds	r2, r7, r0
10053012:	601a      	str	r2, [r3, #0]
10053014:	187b      	adds	r3, r7, r1
10053016:	2201      	movs	r2, #1
10053018:	711a      	strb	r2, [r3, #4]
			USART_UpdateValue(USART_TX, &value1);
1005301a:	187b      	adds	r3, r7, r1
1005301c:	0019      	movs	r1, r3
1005301e:	2000      	movs	r0, #0
10053020:	f7ff ff78 	bl	10052f14 <USART_UpdateValue>
			uint8_t data2 = 0;
10053024:	2023      	movs	r0, #35	@ 0x23
10053026:	183b      	adds	r3, r7, r0
10053028:	2200      	movs	r2, #0
1005302a:	701a      	strb	r2, [r3, #0]
			USART_Data_t value2 = {&data2, 1};
1005302c:	2118      	movs	r1, #24
1005302e:	187b      	adds	r3, r7, r1
10053030:	183a      	adds	r2, r7, r0
10053032:	601a      	str	r2, [r3, #0]
10053034:	187b      	adds	r3, r7, r1
10053036:	2201      	movs	r2, #1
10053038:	711a      	strb	r2, [r3, #4]
			USART_UpdateValue(USART_REQ_TX, &value2);
1005303a:	187b      	adds	r3, r7, r1
1005303c:	0019      	movs	r1, r3
1005303e:	2002      	movs	r0, #2
10053040:	f7ff ff68 	bl	10052f14 <USART_UpdateValue>
      break;
10053044:	e015      	b.n	10053072 <USART_Notification+0xca>
			uint8_t data2 = 2;
10053046:	2017      	movs	r0, #23
10053048:	183b      	adds	r3, r7, r0
1005304a:	2202      	movs	r2, #2
1005304c:	701a      	strb	r2, [r3, #0]
			USART_Data_t value2 = {&data2, 1};
1005304e:	210c      	movs	r1, #12
10053050:	187b      	adds	r3, r7, r1
10053052:	183a      	adds	r2, r7, r0
10053054:	601a      	str	r2, [r3, #0]
10053056:	187b      	adds	r3, r7, r1
10053058:	2201      	movs	r2, #1
1005305a:	711a      	strb	r2, [r3, #4]
			USART_UpdateValue(USART_REQ_TX, &value2);
1005305c:	187b      	adds	r3, r7, r1
1005305e:	0019      	movs	r1, r3
10053060:	2002      	movs	r0, #2
10053062:	f7ff ff57 	bl	10052f14 <USART_UpdateValue>
      break;
10053066:	e004      	b.n	10053072 <USART_Notification+0xca>
      break;
10053068:	46c0      	nop			@ (mov r8, r8)
1005306a:	e002      	b.n	10053072 <USART_Notification+0xca>
      break;
1005306c:	46c0      	nop			@ (mov r8, r8)
1005306e:	e000      	b.n	10053072 <USART_Notification+0xca>
      break;
10053070:	46c0      	nop			@ (mov r8, r8)
  }
  /* USER CODE BEGIN Service1_Notification_2 */

  /* USER CODE END Service1_Notification_2 */
  return;
10053072:	46c0      	nop			@ (mov r8, r8)
}
10053074:	46bd      	mov	sp, r7
10053076:	b00e      	add	sp, #56	@ 0x38
10053078:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005307c <USART_APP_EvtRx>:

void USART_APP_EvtRx(USART_APP_ConnHandleNotEvt_t *p_Notification)
{
1005307c:	b580      	push	{r7, lr}
1005307e:	b082      	sub	sp, #8
10053080:	af00      	add	r7, sp, #0
10053082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service1_APP_EvtRx_1 */

  /* USER CODE END Service1_APP_EvtRx_1 */

  switch(p_Notification->EvtOpcode)
10053084:	687b      	ldr	r3, [r7, #4]
10053086:	781b      	ldrb	r3, [r3, #0]
10053088:	2b00      	cmp	r3, #0
1005308a:	d002      	beq.n	10053092 <USART_APP_EvtRx+0x16>
1005308c:	2b01      	cmp	r3, #1
1005308e:	d005      	beq.n	1005309c <USART_APP_EvtRx+0x20>
      break;
    default:
      /* USER CODE BEGIN Service1_APP_EvtRx_default */

      /* USER CODE END Service1_APP_EvtRx_default */
      break;
10053090:	e00c      	b.n	100530ac <USART_APP_EvtRx+0x30>
      USART_APP_Context.ConnectionHandle = p_Notification->ConnectionHandle;
10053092:	687b      	ldr	r3, [r7, #4]
10053094:	885a      	ldrh	r2, [r3, #2]
10053096:	4b07      	ldr	r3, [pc, #28]	@ (100530b4 <USART_APP_EvtRx+0x38>)
10053098:	801a      	strh	r2, [r3, #0]
      break;
1005309a:	e007      	b.n	100530ac <USART_APP_EvtRx+0x30>
      USART_APP_Context.ConnectionHandle = 0xFFFF;
1005309c:	4b05      	ldr	r3, [pc, #20]	@ (100530b4 <USART_APP_EvtRx+0x38>)
1005309e:	2201      	movs	r2, #1
100530a0:	4252      	negs	r2, r2
100530a2:	801a      	strh	r2, [r3, #0]
            APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
100530a4:	2001      	movs	r0, #1
100530a6:	f7ff fd35 	bl	10052b14 <APP_BLE_Procedure_Gap_Peripheral>
      break;
100530aa:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_APP_EvtRx_2 */

  /* USER CODE END Service1_APP_EvtRx_2 */

  return;
100530ac:	46c0      	nop			@ (mov r8, r8)
}
100530ae:	46bd      	mov	sp, r7
100530b0:	b002      	add	sp, #8
100530b2:	bd80      	pop	{r7, pc}
100530b4:	20002838 	.word	0x20002838

100530b8 <USART_APP_Init>:

void USART_APP_Init(void)
{
100530b8:	b580      	push	{r7, lr}
100530ba:	af00      	add	r7, sp, #0
  USART_APP_Context.ConnectionHandle = 0xFFFF;
100530bc:	4b04      	ldr	r3, [pc, #16]	@ (100530d0 <USART_APP_Init+0x18>)
100530be:	2201      	movs	r2, #1
100530c0:	4252      	negs	r2, r2
100530c2:	801a      	strh	r2, [r3, #0]
  USART_Init();
100530c4:	f7ff fee4 	bl	10052e90 <USART_Init>

  /* USER CODE BEGIN Service1_APP_Init */

  /* USER CODE END Service1_APP_Init */
  return;
100530c8:	46c0      	nop			@ (mov r8, r8)
}
100530ca:	46bd      	mov	sp, r7
100530cc:	bd80      	pop	{r7, pc}
100530ce:	46c0      	nop			@ (mov r8, r8)
100530d0:	20002838 	.word	0x20002838

100530d4 <BLENVM_Init>:
/** @defgroup NVM_UpperLayer_Public_Functions Public Functions
 * @{
 */

void BLENVM_Init(void)
{
100530d4:	b580      	push	{r7, lr}
100530d6:	af00      	add	r7, sp, #0
  NVMDB_Init();
100530d8:	f7fe f9ac 	bl	10051434 <NVMDB_Init>

  NVMDB_HandleInit(SEC_GATT_BD, &sec_gatt_db_h);
100530dc:	4b07      	ldr	r3, [pc, #28]	@ (100530fc <BLENVM_Init+0x28>)
100530de:	0019      	movs	r1, r3
100530e0:	2000      	movs	r0, #0
100530e2:	f7fe fb05 	bl	100516f0 <NVMDB_HandleInit>
  NVMDB_HandleInit(DEVICE_ID_DB, &device_id_db_h);
100530e6:	4b06      	ldr	r3, [pc, #24]	@ (10053100 <BLENVM_Init+0x2c>)
100530e8:	0019      	movs	r1, r3
100530ea:	2001      	movs	r0, #1
100530ec:	f7fe fb00 	bl	100516f0 <NVMDB_HandleInit>
  curr_handle_p = &sec_gatt_db_h;
100530f0:	4b04      	ldr	r3, [pc, #16]	@ (10053104 <BLENVM_Init+0x30>)
100530f2:	4a02      	ldr	r2, [pc, #8]	@ (100530fc <BLENVM_Init+0x28>)
100530f4:	601a      	str	r2, [r3, #0]
}
100530f6:	46c0      	nop			@ (mov r8, r8)
100530f8:	46bd      	mov	sp, r7
100530fa:	bd80      	pop	{r7, pc}
100530fc:	2000283c 	.word	0x2000283c
10053100:	2000284c 	.word	0x2000284c
10053104:	2000285c 	.word	0x2000285c

10053108 <BLEPLAT_NvmAdd>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmAdd(BLEPLAT_NvmRecordTypeDef Type,
                                        const uint8_t* pData,
                                        uint16_t Size,
                                        const uint8_t* pExtraData,
                                        uint16_t ExtraSize)
{
10053108:	b5f0      	push	{r4, r5, r6, r7, lr}
1005310a:	b089      	sub	sp, #36	@ 0x24
1005310c:	af02      	add	r7, sp, #8
1005310e:	60b9      	str	r1, [r7, #8]
10053110:	0011      	movs	r1, r2
10053112:	607b      	str	r3, [r7, #4]
10053114:	240f      	movs	r4, #15
10053116:	193b      	adds	r3, r7, r4
10053118:	1c02      	adds	r2, r0, #0
1005311a:	701a      	strb	r2, [r3, #0]
1005311c:	230c      	movs	r3, #12
1005311e:	18fb      	adds	r3, r7, r3
10053120:	1c0a      	adds	r2, r1, #0
10053122:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t ret;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
10053124:	193b      	adds	r3, r7, r4
10053126:	781b      	ldrb	r3, [r3, #0]
10053128:	2b02      	cmp	r3, #2
1005312a:	d103      	bne.n	10053134 <BLEPLAT_NvmAdd+0x2c>
  {
    curr_handle_p = &device_id_db_h;
1005312c:	4b1a      	ldr	r3, [pc, #104]	@ (10053198 <BLEPLAT_NvmAdd+0x90>)
1005312e:	4a1b      	ldr	r2, [pc, #108]	@ (1005319c <BLEPLAT_NvmAdd+0x94>)
10053130:	601a      	str	r2, [r3, #0]
10053132:	e002      	b.n	1005313a <BLEPLAT_NvmAdd+0x32>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
10053134:	4b18      	ldr	r3, [pc, #96]	@ (10053198 <BLEPLAT_NvmAdd+0x90>)
10053136:	4a1a      	ldr	r2, [pc, #104]	@ (100531a0 <BLEPLAT_NvmAdd+0x98>)
10053138:	601a      	str	r2, [r3, #0]
  }

  DEBUG_GPIO2_HIGH();

  ret = NVMDB_AppendRecord(curr_handle_p, Type, Size, pData, ExtraSize, pExtraData);
1005313a:	4b17      	ldr	r3, [pc, #92]	@ (10053198 <BLEPLAT_NvmAdd+0x90>)
1005313c:	6818      	ldr	r0, [r3, #0]
1005313e:	2617      	movs	r6, #23
10053140:	19bc      	adds	r4, r7, r6
10053142:	68bd      	ldr	r5, [r7, #8]
10053144:	230c      	movs	r3, #12
10053146:	18fb      	adds	r3, r7, r3
10053148:	881b      	ldrh	r3, [r3, #0]
1005314a:	469c      	mov	ip, r3
1005314c:	230f      	movs	r3, #15
1005314e:	18fb      	adds	r3, r7, r3
10053150:	7819      	ldrb	r1, [r3, #0]
10053152:	687b      	ldr	r3, [r7, #4]
10053154:	9301      	str	r3, [sp, #4]
10053156:	2328      	movs	r3, #40	@ 0x28
10053158:	2208      	movs	r2, #8
1005315a:	189b      	adds	r3, r3, r2
1005315c:	19db      	adds	r3, r3, r7
1005315e:	881b      	ldrh	r3, [r3, #0]
10053160:	9300      	str	r3, [sp, #0]
10053162:	002b      	movs	r3, r5
10053164:	4662      	mov	r2, ip
10053166:	f7fe fb65 	bl	10051834 <NVMDB_AppendRecord>
1005316a:	0003      	movs	r3, r0
1005316c:	7023      	strb	r3, [r4, #0]

  DEBUG_GPIO2_LOW();

  if(ret == NVMDB_STATUS_OK)
1005316e:	19bb      	adds	r3, r7, r6
10053170:	781b      	ldrb	r3, [r3, #0]
10053172:	2b00      	cmp	r3, #0
10053174:	d101      	bne.n	1005317a <BLEPLAT_NvmAdd+0x72>
  {
    return BLEPLAT_OK;
10053176:	2300      	movs	r3, #0
10053178:	e009      	b.n	1005318e <BLEPLAT_NvmAdd+0x86>
  }

  if(ret == NVMDB_STATUS_FULL_DB)
1005317a:	2317      	movs	r3, #23
1005317c:	18fb      	adds	r3, r7, r3
1005317e:	781b      	ldrb	r3, [r3, #0]
10053180:	2b02      	cmp	r3, #2
10053182:	d102      	bne.n	1005318a <BLEPLAT_NvmAdd+0x82>
  {
    return BLEPLAT_FULL;
10053184:	2301      	movs	r3, #1
10053186:	425b      	negs	r3, r3
10053188:	e001      	b.n	1005318e <BLEPLAT_NvmAdd+0x86>
  }

  return BLEPLAT_BUSY;
1005318a:	2302      	movs	r3, #2
1005318c:	425b      	negs	r3, r3
}
1005318e:	0018      	movs	r0, r3
10053190:	46bd      	mov	sp, r7
10053192:	b007      	add	sp, #28
10053194:	bdf0      	pop	{r4, r5, r6, r7, pc}
10053196:	46c0      	nop			@ (mov r8, r8)
10053198:	2000285c 	.word	0x2000285c
1005319c:	2000284c 	.word	0x2000284c
100531a0:	2000283c 	.word	0x2000283c

100531a4 <BLEPLAT_NvmGet>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmGet(BLEPLAT_NvmSeekModeTypeDef Mode,
                                        BLEPLAT_NvmRecordTypeDef Type,
                                        uint16_t Offset,
                                        uint8_t* pData,
                                        uint16_t Size)
{
100531a4:	b5b0      	push	{r4, r5, r7, lr}
100531a6:	b086      	sub	sp, #24
100531a8:	af02      	add	r7, sp, #8
100531aa:	0004      	movs	r4, r0
100531ac:	0008      	movs	r0, r1
100531ae:	0011      	movs	r1, r2
100531b0:	603b      	str	r3, [r7, #0]
100531b2:	1dfb      	adds	r3, r7, #7
100531b4:	1c22      	adds	r2, r4, #0
100531b6:	701a      	strb	r2, [r3, #0]
100531b8:	1dbb      	adds	r3, r7, #6
100531ba:	1c02      	adds	r2, r0, #0
100531bc:	701a      	strb	r2, [r3, #0]
100531be:	1d3b      	adds	r3, r7, #4
100531c0:	1c0a      	adds	r2, r1, #0
100531c2:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordSizeType size_out;
  NVMDB_status_t ret;
  NVMDB_IdType db_id;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
100531c4:	1dbb      	adds	r3, r7, #6
100531c6:	781b      	ldrb	r3, [r3, #0]
100531c8:	2b02      	cmp	r3, #2
100531ca:	d107      	bne.n	100531dc <BLEPLAT_NvmGet+0x38>
  {
    curr_handle_p = &device_id_db_h;
100531cc:	4b2e      	ldr	r3, [pc, #184]	@ (10053288 <BLEPLAT_NvmGet+0xe4>)
100531ce:	4a2f      	ldr	r2, [pc, #188]	@ (1005328c <BLEPLAT_NvmGet+0xe8>)
100531d0:	601a      	str	r2, [r3, #0]
    db_id = 1;
100531d2:	230e      	movs	r3, #14
100531d4:	18fb      	adds	r3, r7, r3
100531d6:	2201      	movs	r2, #1
100531d8:	701a      	strb	r2, [r3, #0]
100531da:	e006      	b.n	100531ea <BLEPLAT_NvmGet+0x46>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
100531dc:	4b2a      	ldr	r3, [pc, #168]	@ (10053288 <BLEPLAT_NvmGet+0xe4>)
100531de:	4a2c      	ldr	r2, [pc, #176]	@ (10053290 <BLEPLAT_NvmGet+0xec>)
100531e0:	601a      	str	r2, [r3, #0]
    db_id = 0;
100531e2:	230e      	movs	r3, #14
100531e4:	18fb      	adds	r3, r7, r3
100531e6:	2200      	movs	r2, #0
100531e8:	701a      	strb	r2, [r3, #0]
  }

  if(Mode == BLEPLAT_NVM_CURRENT)
100531ea:	1dfb      	adds	r3, r7, #7
100531ec:	781b      	ldrb	r3, [r3, #0]
100531ee:	2b02      	cmp	r3, #2
100531f0:	d112      	bne.n	10053218 <BLEPLAT_NvmGet+0x74>
  {
    ret = NVMDB_ReadCurrentRecord(curr_handle_p, Offset, pData, Size, &size_out);
100531f2:	4b25      	ldr	r3, [pc, #148]	@ (10053288 <BLEPLAT_NvmGet+0xe4>)
100531f4:	6818      	ldr	r0, [r3, #0]
100531f6:	230f      	movs	r3, #15
100531f8:	18fc      	adds	r4, r7, r3
100531fa:	2320      	movs	r3, #32
100531fc:	18fb      	adds	r3, r7, r3
100531fe:	881d      	ldrh	r5, [r3, #0]
10053200:	683a      	ldr	r2, [r7, #0]
10053202:	1d3b      	adds	r3, r7, #4
10053204:	8819      	ldrh	r1, [r3, #0]
10053206:	230c      	movs	r3, #12
10053208:	18fb      	adds	r3, r7, r3
1005320a:	9300      	str	r3, [sp, #0]
1005320c:	002b      	movs	r3, r5
1005320e:	f7fe fadd 	bl	100517cc <NVMDB_ReadCurrentRecord>
10053212:	0003      	movs	r3, r0
10053214:	7023      	strb	r3, [r4, #0]
10053216:	e021      	b.n	1005325c <BLEPLAT_NvmGet+0xb8>
  }
  else
  {
    if(Mode == BLEPLAT_NVM_FIRST)
10053218:	1dfb      	adds	r3, r7, #7
1005321a:	781b      	ldrb	r3, [r3, #0]
1005321c:	2b00      	cmp	r3, #0
1005321e:	d108      	bne.n	10053232 <BLEPLAT_NvmGet+0x8e>
    {
      NVMDB_HandleInit(db_id, curr_handle_p);
10053220:	4b19      	ldr	r3, [pc, #100]	@ (10053288 <BLEPLAT_NvmGet+0xe4>)
10053222:	681a      	ldr	r2, [r3, #0]
10053224:	230e      	movs	r3, #14
10053226:	18fb      	adds	r3, r7, r3
10053228:	781b      	ldrb	r3, [r3, #0]
1005322a:	0011      	movs	r1, r2
1005322c:	0018      	movs	r0, r3
1005322e:	f7fe fa5f 	bl	100516f0 <NVMDB_HandleInit>
    }
    ret = NVMDB_ReadNextRecord(curr_handle_p, Type, Offset, pData, Size, &size_out);
10053232:	4b15      	ldr	r3, [pc, #84]	@ (10053288 <BLEPLAT_NvmGet+0xe4>)
10053234:	6818      	ldr	r0, [r3, #0]
10053236:	230f      	movs	r3, #15
10053238:	18fc      	adds	r4, r7, r3
1005323a:	683d      	ldr	r5, [r7, #0]
1005323c:	1d3b      	adds	r3, r7, #4
1005323e:	881a      	ldrh	r2, [r3, #0]
10053240:	1dbb      	adds	r3, r7, #6
10053242:	7819      	ldrb	r1, [r3, #0]
10053244:	230c      	movs	r3, #12
10053246:	18fb      	adds	r3, r7, r3
10053248:	9301      	str	r3, [sp, #4]
1005324a:	2320      	movs	r3, #32
1005324c:	18fb      	adds	r3, r7, r3
1005324e:	881b      	ldrh	r3, [r3, #0]
10053250:	9300      	str	r3, [sp, #0]
10053252:	002b      	movs	r3, r5
10053254:	f7fe fa80 	bl	10051758 <NVMDB_ReadNextRecord>
10053258:	0003      	movs	r3, r0
1005325a:	7023      	strb	r3, [r4, #0]
  }

  if(ret == NVMDB_STATUS_OK)
1005325c:	230f      	movs	r3, #15
1005325e:	18fb      	adds	r3, r7, r3
10053260:	781b      	ldrb	r3, [r3, #0]
10053262:	2b00      	cmp	r3, #0
10053264:	d101      	bne.n	1005326a <BLEPLAT_NvmGet+0xc6>
  {
    return BLEPLAT_OK;
10053266:	2300      	movs	r3, #0
10053268:	e009      	b.n	1005327e <BLEPLAT_NvmGet+0xda>
  }

  if(ret == NVMDB_STATUS_END_OF_DB)
1005326a:	230f      	movs	r3, #15
1005326c:	18fb      	adds	r3, r7, r3
1005326e:	781b      	ldrb	r3, [r3, #0]
10053270:	2b04      	cmp	r3, #4
10053272:	d102      	bne.n	1005327a <BLEPLAT_NvmGet+0xd6>
  {
    return BLEPLAT_EOF;
10053274:	2303      	movs	r3, #3
10053276:	425b      	negs	r3, r3
10053278:	e001      	b.n	1005327e <BLEPLAT_NvmGet+0xda>
  }

  return BLEPLAT_BUSY;
1005327a:	2302      	movs	r3, #2
1005327c:	425b      	negs	r3, r3
}
1005327e:	0018      	movs	r0, r3
10053280:	46bd      	mov	sp, r7
10053282:	b004      	add	sp, #16
10053284:	bdb0      	pop	{r4, r5, r7, pc}
10053286:	46c0      	nop			@ (mov r8, r8)
10053288:	2000285c 	.word	0x2000285c
1005328c:	2000284c 	.word	0x2000284c
10053290:	2000283c 	.word	0x2000283c

10053294 <BLEPLAT_NvmCompare>:

int BLEPLAT_NvmCompare(uint16_t Offset, const uint8_t* pData, uint16_t Size)
{
10053294:	b590      	push	{r4, r7, lr}
10053296:	b085      	sub	sp, #20
10053298:	af00      	add	r7, sp, #0
1005329a:	6039      	str	r1, [r7, #0]
1005329c:	0011      	movs	r1, r2
1005329e:	1dbb      	adds	r3, r7, #6
100532a0:	1c02      	adds	r2, r0, #0
100532a2:	801a      	strh	r2, [r3, #0]
100532a4:	1d3b      	adds	r3, r7, #4
100532a6:	1c0a      	adds	r2, r1, #0
100532a8:	801a      	strh	r2, [r3, #0]
  int ret;

  ret = NVMDB_CompareCurrentRecord(curr_handle_p, Offset, pData, Size);
100532aa:	4b0e      	ldr	r3, [pc, #56]	@ (100532e4 <BLEPLAT_NvmCompare+0x50>)
100532ac:	6818      	ldr	r0, [r3, #0]
100532ae:	1d3b      	adds	r3, r7, #4
100532b0:	881c      	ldrh	r4, [r3, #0]
100532b2:	683a      	ldr	r2, [r7, #0]
100532b4:	1dbb      	adds	r3, r7, #6
100532b6:	8819      	ldrh	r1, [r3, #0]
100532b8:	0023      	movs	r3, r4
100532ba:	f7fd fa83 	bl	100507c4 <NVMDB_CompareCurrentRecord>
100532be:	0003      	movs	r3, r0
100532c0:	60fb      	str	r3, [r7, #12]

  if(ret == 0)
100532c2:	68fb      	ldr	r3, [r7, #12]
100532c4:	2b00      	cmp	r3, #0
100532c6:	d101      	bne.n	100532cc <BLEPLAT_NvmCompare+0x38>
  {
    return BLEPLAT_OK;
100532c8:	2300      	movs	r3, #0
100532ca:	e007      	b.n	100532dc <BLEPLAT_NvmCompare+0x48>
  }
  else if(ret < 0)
100532cc:	68fb      	ldr	r3, [r7, #12]
100532ce:	2b00      	cmp	r3, #0
100532d0:	da02      	bge.n	100532d8 <BLEPLAT_NvmCompare+0x44>
  {
    return Size;
100532d2:	1d3b      	adds	r3, r7, #4
100532d4:	881b      	ldrh	r3, [r3, #0]
100532d6:	e001      	b.n	100532dc <BLEPLAT_NvmCompare+0x48>
  }
  else
  {
    return BLEPLAT_EOF;
100532d8:	2303      	movs	r3, #3
100532da:	425b      	negs	r3, r3
  }
}
100532dc:	0018      	movs	r0, r3
100532de:	46bd      	mov	sp, r7
100532e0:	b005      	add	sp, #20
100532e2:	bd90      	pop	{r4, r7, pc}
100532e4:	2000285c 	.word	0x2000285c

100532e8 <BLEPLAT_NvmDiscard>:

void BLEPLAT_NvmDiscard(BLEPLAT_NvmSeekModeTypeDef Mode)
{
100532e8:	b580      	push	{r7, lr}
100532ea:	b082      	sub	sp, #8
100532ec:	af00      	add	r7, sp, #0
100532ee:	0002      	movs	r2, r0
100532f0:	1dfb      	adds	r3, r7, #7
100532f2:	701a      	strb	r2, [r3, #0]
  DEBUG_GPIO2_HIGH();
  if(Mode == BLEPLAT_NVM_CURRENT)
100532f4:	1dfb      	adds	r3, r7, #7
100532f6:	781b      	ldrb	r3, [r3, #0]
100532f8:	2b02      	cmp	r3, #2
100532fa:	d10a      	bne.n	10053312 <BLEPLAT_NvmDiscard+0x2a>
  {
    if(curr_handle_p == &device_id_db_h) // Do not allow to erase device ID data.
100532fc:	4b0b      	ldr	r3, [pc, #44]	@ (1005332c <BLEPLAT_NvmDiscard+0x44>)
100532fe:	681a      	ldr	r2, [r3, #0]
10053300:	4b0b      	ldr	r3, [pc, #44]	@ (10053330 <BLEPLAT_NvmDiscard+0x48>)
10053302:	429a      	cmp	r2, r3
10053304:	d00d      	beq.n	10053322 <BLEPLAT_NvmDiscard+0x3a>
    {
      return;
    }
    NVMDB_DeleteRecord(curr_handle_p);
10053306:	4b09      	ldr	r3, [pc, #36]	@ (1005332c <BLEPLAT_NvmDiscard+0x44>)
10053308:	681b      	ldr	r3, [r3, #0]
1005330a:	0018      	movs	r0, r3
1005330c:	f7fe faf8 	bl	10051900 <NVMDB_DeleteRecord>
10053310:	e008      	b.n	10053324 <BLEPLAT_NvmDiscard+0x3c>
  }
  else if(Mode == BLEPLAT_NVM_ALL)
10053312:	1dfb      	adds	r3, r7, #7
10053314:	781b      	ldrb	r3, [r3, #0]
10053316:	2b03      	cmp	r3, #3
10053318:	d104      	bne.n	10053324 <BLEPLAT_NvmDiscard+0x3c>
  {

    NVMDB_Erase(SEC_GATT_BD);
1005331a:	2000      	movs	r0, #0
1005331c:	f7fe fafe 	bl	1005191c <NVMDB_Erase>
10053320:	e000      	b.n	10053324 <BLEPLAT_NvmDiscard+0x3c>
      return;
10053322:	46c0      	nop			@ (mov r8, r8)
       else
        return;
       }*/
  }
  DEBUG_GPIO2_LOW();
}
10053324:	46bd      	mov	sp, r7
10053326:	b002      	add	sp, #8
10053328:	bd80      	pop	{r7, pc}
1005332a:	46c0      	nop			@ (mov r8, r8)
1005332c:	2000285c 	.word	0x2000285c
10053330:	2000284c 	.word	0x2000284c

10053334 <BLEPLAT_MemCpy>:
#if defined(STM32WB06) || defined(STM32WB07) || defined(STM32WB09)
uint32_t SYNTH0_ANA_ENG_bak, PWR_ENGTRIM_bak;
#endif

void BLEPLAT_MemCpy(void *Dest, const void *Src, unsigned int Size)
{
10053334:	b580      	push	{r7, lr}
10053336:	b084      	sub	sp, #16
10053338:	af00      	add	r7, sp, #0
1005333a:	60f8      	str	r0, [r7, #12]
1005333c:	60b9      	str	r1, [r7, #8]
1005333e:	607a      	str	r2, [r7, #4]
  Osal_MemCpy(Dest, Src, Size);
10053340:	687a      	ldr	r2, [r7, #4]
10053342:	68b9      	ldr	r1, [r7, #8]
10053344:	68fb      	ldr	r3, [r7, #12]
10053346:	0018      	movs	r0, r3
10053348:	f7ec fedc 	bl	10040104 <Osal_MemCpy>
}
1005334c:	46c0      	nop			@ (mov r8, r8)
1005334e:	46bd      	mov	sp, r7
10053350:	b004      	add	sp, #16
10053352:	bd80      	pop	{r7, pc}

10053354 <BLEPLAT_MemSet>:

void BLEPLAT_MemSet(void *Ptr, int Value, unsigned int Size)
{
10053354:	b580      	push	{r7, lr}
10053356:	b084      	sub	sp, #16
10053358:	af00      	add	r7, sp, #0
1005335a:	60f8      	str	r0, [r7, #12]
1005335c:	60b9      	str	r1, [r7, #8]
1005335e:	607a      	str	r2, [r7, #4]
  memset(Ptr, Value, Size);
10053360:	687a      	ldr	r2, [r7, #4]
10053362:	68b9      	ldr	r1, [r7, #8]
10053364:	68fb      	ldr	r3, [r7, #12]
10053366:	0018      	movs	r0, r3
10053368:	f015 f9e8 	bl	1006873c <memset>
}
1005336c:	46c0      	nop			@ (mov r8, r8)
1005336e:	46bd      	mov	sp, r7
10053370:	b004      	add	sp, #16
10053372:	bd80      	pop	{r7, pc}

10053374 <BLEPLAT_MemCmp>:

int BLEPLAT_MemCmp(void *S1, void *S2, unsigned int Size)
{
10053374:	b580      	push	{r7, lr}
10053376:	b084      	sub	sp, #16
10053378:	af00      	add	r7, sp, #0
1005337a:	60f8      	str	r0, [r7, #12]
1005337c:	60b9      	str	r1, [r7, #8]
1005337e:	607a      	str	r2, [r7, #4]
  return memcmp(S1, S2, Size);
10053380:	687a      	ldr	r2, [r7, #4]
10053382:	68b9      	ldr	r1, [r7, #8]
10053384:	68fb      	ldr	r3, [r7, #12]
10053386:	0018      	movs	r0, r3
10053388:	f015 f9ca 	bl	10068720 <memcmp>
1005338c:	0003      	movs	r3, r0
}
1005338e:	0018      	movs	r0, r3
10053390:	46bd      	mov	sp, r7
10053392:	b004      	add	sp, #16
10053394:	bd80      	pop	{r7, pc}

10053396 <BLEPLAT_GetPartInfo>:

/**
 * @brief Get Device ID, Version and Revision numbers
 */
void BLEPLAT_GetPartInfo(uint8_t *pDeviceId, uint8_t *pMajorCut, uint8_t *pMinorCut)
{
10053396:	b590      	push	{r4, r7, lr}
10053398:	b089      	sub	sp, #36	@ 0x24
1005339a:	af00      	add	r7, sp, #0
1005339c:	60f8      	str	r0, [r7, #12]
1005339e:	60b9      	str	r1, [r7, #8]
100533a0:	607a      	str	r2, [r7, #4]
   PartInfoType partInfo;

   /* get partInfo */
   GetPartInfo(&partInfo);
100533a2:	2410      	movs	r4, #16
100533a4:	193b      	adds	r3, r7, r4
100533a6:	0018      	movs	r0, r3
100533a8:	f7ff f85a 	bl	10052460 <GetPartInfo>

  /* Set device ID */
  *pDeviceId  = partInfo.die_id;
100533ac:	0021      	movs	r1, r4
100533ae:	187b      	adds	r3, r7, r1
100533b0:	781a      	ldrb	r2, [r3, #0]
100533b2:	68fb      	ldr	r3, [r7, #12]
100533b4:	701a      	strb	r2, [r3, #0]

  /* Set major cut  */
  *pMajorCut = partInfo.die_major;
100533b6:	187b      	adds	r3, r7, r1
100533b8:	785a      	ldrb	r2, [r3, #1]
100533ba:	68bb      	ldr	r3, [r7, #8]
100533bc:	701a      	strb	r2, [r3, #0]

  /* Set minor cut */
  *pMinorCut = partInfo.die_cut;
100533be:	187b      	adds	r3, r7, r1
100533c0:	789a      	ldrb	r2, [r3, #2]
100533c2:	687b      	ldr	r3, [r7, #4]
100533c4:	701a      	strb	r2, [r3, #0]
}
100533c6:	46c0      	nop			@ (mov r8, r8)
100533c8:	46bd      	mov	sp, r7
100533ca:	b009      	add	sp, #36	@ 0x24
100533cc:	bd90      	pop	{r4, r7, pc}

100533ce <BLEPLAT_AesEcbEncrypt>:
}

void BLEPLAT_AesEcbEncrypt(const uint32_t *plainTextData,
                           const uint32_t *key,
                           uint32_t *encryptedData)
{
100533ce:	b580      	push	{r7, lr}
100533d0:	b084      	sub	sp, #16
100533d2:	af00      	add	r7, sp, #0
100533d4:	60f8      	str	r0, [r7, #12]
100533d6:	60b9      	str	r1, [r7, #8]
100533d8:	607a      	str	r2, [r7, #4]
  HW_AES_Encrypt(plainTextData, key, encryptedData);
100533da:	687a      	ldr	r2, [r7, #4]
100533dc:	68b9      	ldr	r1, [r7, #8]
100533de:	68fb      	ldr	r3, [r7, #12]
100533e0:	0018      	movs	r0, r3
100533e2:	f7fc fe6b 	bl	100500bc <HW_AES_Encrypt>
}
100533e6:	46c0      	nop			@ (mov r8, r8)
100533e8:	46bd      	mov	sp, r7
100533ea:	b004      	add	sp, #16
100533ec:	bd80      	pop	{r7, pc}

100533ee <BLEPLAT_AesCMACEncryptInit>:

int32_t BLEPLAT_AesCMACEncryptInit(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx)
{
100533ee:	b580      	push	{r7, lr}
100533f0:	b082      	sub	sp, #8
100533f2:	af00      	add	r7, sp, #0
100533f4:	6078      	str	r0, [r7, #4]
  return AES_CMAC_Encrypt_Init((AESCMACctx_stt*)pAESCMACctx);
100533f6:	687b      	ldr	r3, [r7, #4]
100533f8:	0018      	movs	r0, r3
100533fa:	f016 f843 	bl	10069484 <AES_CMAC_Encrypt_Init>
100533fe:	0003      	movs	r3, r0
}
10053400:	0018      	movs	r0, r3
10053402:	46bd      	mov	sp, r7
10053404:	b002      	add	sp, #8
10053406:	bd80      	pop	{r7, pc}

10053408 <BLEPLAT_AesCMACEncryptAppend>:

int32_t BLEPLAT_AesCMACEncryptAppend(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx,
                                     const uint8_t  *pInputBuffer,
                                     int32_t InputSize)
{
10053408:	b580      	push	{r7, lr}
1005340a:	b084      	sub	sp, #16
1005340c:	af00      	add	r7, sp, #0
1005340e:	60f8      	str	r0, [r7, #12]
10053410:	60b9      	str	r1, [r7, #8]
10053412:	607a      	str	r2, [r7, #4]
  return AES_CMAC_Encrypt_Append((AESCMACctx_stt*)pAESCMACctx, pInputBuffer, InputSize);
10053414:	687a      	ldr	r2, [r7, #4]
10053416:	68b9      	ldr	r1, [r7, #8]
10053418:	68fb      	ldr	r3, [r7, #12]
1005341a:	0018      	movs	r0, r3
1005341c:	f015 fec8 	bl	100691b0 <AES_CMAC_Encrypt_Append>
10053420:	0003      	movs	r3, r0
}
10053422:	0018      	movs	r0, r3
10053424:	46bd      	mov	sp, r7
10053426:	b004      	add	sp, #16
10053428:	bd80      	pop	{r7, pc}

1005342a <BLEPLAT_AesCMACEncryptFinish>:

int32_t BLEPLAT_AesCMACEncryptFinish(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx,
                                     uint8_t *pOutputBuffer,
                                     int32_t *pOutputSize)
{
1005342a:	b580      	push	{r7, lr}
1005342c:	b084      	sub	sp, #16
1005342e:	af00      	add	r7, sp, #0
10053430:	60f8      	str	r0, [r7, #12]
10053432:	60b9      	str	r1, [r7, #8]
10053434:	607a      	str	r2, [r7, #4]
  return AES_CMAC_Encrypt_Finish((AESCMACctx_stt*)pAESCMACctx, pOutputBuffer, pOutputSize);
10053436:	687a      	ldr	r2, [r7, #4]
10053438:	68b9      	ldr	r1, [r7, #8]
1005343a:	68fb      	ldr	r3, [r7, #12]
1005343c:	0018      	movs	r0, r3
1005343e:	f015 ffeb 	bl	10069418 <AES_CMAC_Encrypt_Finish>
10053442:	0003      	movs	r3, r0
}
10053444:	0018      	movs	r0, r3
10053446:	46bd      	mov	sp, r7
10053448:	b004      	add	sp, #16
1005344a:	bd80      	pop	{r7, pc}

1005344c <BLEPLAT_RngGetRandom16>:

void BLEPLAT_RngGetRandom16(uint16_t* num)
{
1005344c:	b580      	push	{r7, lr}
1005344e:	b082      	sub	sp, #8
10053450:	af00      	add	r7, sp, #0
10053452:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom16(num);
10053454:	687b      	ldr	r3, [r7, #4]
10053456:	0018      	movs	r0, r3
10053458:	f7fc ff98 	bl	1005038c <HW_RNG_GetRandom16>
}
1005345c:	46c0      	nop			@ (mov r8, r8)
1005345e:	46bd      	mov	sp, r7
10053460:	b002      	add	sp, #8
10053462:	bd80      	pop	{r7, pc}

10053464 <BLEPLAT_RngGetRandom32>:

void BLEPLAT_RngGetRandom32(uint32_t* num)
{
10053464:	b580      	push	{r7, lr}
10053466:	b082      	sub	sp, #8
10053468:	af00      	add	r7, sp, #0
1005346a:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom32(num);
1005346c:	687b      	ldr	r3, [r7, #4]
1005346e:	0018      	movs	r0, r3
10053470:	f7fc ffa6 	bl	100503c0 <HW_RNG_GetRandom32>
}
10053474:	46c0      	nop			@ (mov r8, r8)
10053476:	46bd      	mov	sp, r7
10053478:	b002      	add	sp, #8
1005347a:	bd80      	pop	{r7, pc}

1005347c <BLEPLAT_GetMaxPALevel>:
{
  RADIO_ReadTransmitPower(Min_Tx_Power, Max_Tx_Power);
}

uint8_t BLEPLAT_GetMaxPALevel(void)
{
1005347c:	b580      	push	{r7, lr}
1005347e:	af00      	add	r7, sp, #0
  return RADIO_GetMaxPALevel();
10053480:	f7fe ff12 	bl	100522a8 <RADIO_GetMaxPALevel>
10053484:	0003      	movs	r3, r0
}
10053486:	0018      	movs	r0, r3
10053488:	46bd      	mov	sp, r7
1005348a:	bd80      	pop	{r7, pc}

1005348c <BLEPLAT_GetDefaultPALevel>:

uint8_t BLEPLAT_GetDefaultPALevel(void)
{
1005348c:	b580      	push	{r7, lr}
1005348e:	af00      	add	r7, sp, #0
  return RADIO_GetDefaultPALevel();
10053490:	f7fe ff10 	bl	100522b4 <RADIO_GetDefaultPALevel>
10053494:	0003      	movs	r3, r0
}
10053496:	0018      	movs	r0, r3
10053498:	46bd      	mov	sp, r7
1005349a:	bd80      	pop	{r7, pc}

1005349c <BLEPLAT_SetHighPower>:

void BLEPLAT_SetHighPower(uint8_t enable)
{
1005349c:	b580      	push	{r7, lr}
1005349e:	b082      	sub	sp, #8
100534a0:	af00      	add	r7, sp, #0
100534a2:	0002      	movs	r2, r0
100534a4:	1dfb      	adds	r3, r7, #7
100534a6:	701a      	strb	r2, [r3, #0]
  RADIO_SetHighPower((FunctionalState)enable);
100534a8:	1dfb      	adds	r3, r7, #7
100534aa:	781b      	ldrb	r3, [r3, #0]
100534ac:	0018      	movs	r0, r3
100534ae:	f7fe ff07 	bl	100522c0 <RADIO_SetHighPower>
}
100534b2:	46c0      	nop			@ (mov r8, r8)
100534b4:	46bd      	mov	sp, r7
100534b6:	b002      	add	sp, #8
100534b8:	bd80      	pop	{r7, pc}

100534ba <BLEPLAT_CalculateRSSI>:

int8_t BLEPLAT_CalculateRSSI(void)
{
100534ba:	b580      	push	{r7, lr}
100534bc:	af00      	add	r7, sp, #0
  return HAL_RADIO_ReadRSSI();
100534be:	f7f8 faa5 	bl	1004ba0c <HAL_RADIO_ReadRSSI>
100534c2:	0003      	movs	r3, r0
}
100534c4:	0018      	movs	r0, r3
100534c6:	46bd      	mov	sp, r7
100534c8:	bd80      	pop	{r7, pc}

100534ca <BLEPLAT_GetCurrentSysTime>:
{
  RADIO_AntIdxRemap(AntPattLen, pAntRamTable, pAntPatt);
}

uint64_t BLEPLAT_GetCurrentSysTime(void)
{
100534ca:	b580      	push	{r7, lr}
100534cc:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_GetCurrentSysTime();
100534ce:	f7f8 fff3 	bl	1004c4b8 <HAL_RADIO_TIMER_GetCurrentSysTime>
100534d2:	0002      	movs	r2, r0
100534d4:	000b      	movs	r3, r1

}
100534d6:	0010      	movs	r0, r2
100534d8:	0019      	movs	r1, r3
100534da:	46bd      	mov	sp, r7
100534dc:	bd80      	pop	{r7, pc}

100534de <BLEPLAT_StartTimer>:
{
  return HAL_RADIO_TIMER_GetFutureSysTime64(SysTime);
}

int BLEPLAT_StartTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle, uint64_t Time)
{
100534de:	b580      	push	{r7, lr}
100534e0:	b084      	sub	sp, #16
100534e2:	af00      	add	r7, sp, #0
100534e4:	60f8      	str	r0, [r7, #12]
100534e6:	603a      	str	r2, [r7, #0]
100534e8:	607b      	str	r3, [r7, #4]
  return HAL_RADIO_TIMER_StartVirtualTimerSysTime((VTIMER_HandleType*)TimerHandle, Time);
100534ea:	683a      	ldr	r2, [r7, #0]
100534ec:	687b      	ldr	r3, [r7, #4]
100534ee:	68f9      	ldr	r1, [r7, #12]
100534f0:	0008      	movs	r0, r1
100534f2:	f7f8 fff3 	bl	1004c4dc <HAL_RADIO_TIMER_StartVirtualTimerSysTime>
100534f6:	0003      	movs	r3, r0
}
100534f8:	0018      	movs	r0, r3
100534fa:	46bd      	mov	sp, r7
100534fc:	b004      	add	sp, #16
100534fe:	bd80      	pop	{r7, pc}

10053500 <BLEPLAT_StopTimer>:

void BLEPLAT_StopTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle)
{
10053500:	b580      	push	{r7, lr}
10053502:	b082      	sub	sp, #8
10053504:	af00      	add	r7, sp, #0
10053506:	6078      	str	r0, [r7, #4]
  HAL_RADIO_TIMER_StopVirtualTimer((VTIMER_HandleType*)TimerHandle);
10053508:	687b      	ldr	r3, [r7, #4]
1005350a:	0018      	movs	r0, r3
1005350c:	f7f9 f800 	bl	1004c510 <HAL_RADIO_TIMER_StopVirtualTimer>
}
10053510:	46c0      	nop			@ (mov r8, r8)
10053512:	46bd      	mov	sp, r7
10053514:	b002      	add	sp, #8
10053516:	bd80      	pop	{r7, pc}

10053518 <BLEPLAT_SetRadioTimerValue>:

uint8_t BLEPLAT_SetRadioTimerValue(uint32_t Time, uint8_t EventType, uint8_t CalReq)
{
10053518:	b580      	push	{r7, lr}
1005351a:	b082      	sub	sp, #8
1005351c:	af00      	add	r7, sp, #0
1005351e:	6078      	str	r0, [r7, #4]
10053520:	0008      	movs	r0, r1
10053522:	0011      	movs	r1, r2
10053524:	1cfb      	adds	r3, r7, #3
10053526:	1c02      	adds	r2, r0, #0
10053528:	701a      	strb	r2, [r3, #0]
1005352a:	1cbb      	adds	r3, r7, #2
1005352c:	1c0a      	adds	r2, r1, #0
1005352e:	701a      	strb	r2, [r3, #0]
  return HAL_RADIO_TIMER_SetRadioTimerValue(Time, EventType, CalReq);
10053530:	1cbb      	adds	r3, r7, #2
10053532:	781a      	ldrb	r2, [r3, #0]
10053534:	1cfb      	adds	r3, r7, #3
10053536:	7819      	ldrb	r1, [r3, #0]
10053538:	687b      	ldr	r3, [r7, #4]
1005353a:	0018      	movs	r0, r3
1005353c:	f7f8 fea6 	bl	1004c28c <HAL_RADIO_TIMER_SetRadioTimerValue>
10053540:	0003      	movs	r3, r0
10053542:	b2db      	uxtb	r3, r3
}
10053544:	0018      	movs	r0, r3
10053546:	46bd      	mov	sp, r7
10053548:	b002      	add	sp, #8
1005354a:	bd80      	pop	{r7, pc}

1005354c <BLEPLAT_ClearRadioTimerValue>:

uint8_t BLEPLAT_ClearRadioTimerValue(void)
{
1005354c:	b580      	push	{r7, lr}
1005354e:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_ClearRadioTimerValue();
10053550:	f7f8 feec 	bl	1004c32c <HAL_RADIO_TIMER_ClearRadioTimerValue>
10053554:	0003      	movs	r3, r0
10053556:	b2db      	uxtb	r3, r3
}
10053558:	0018      	movs	r0, r3
1005355a:	46bd      	mov	sp, r7
1005355c:	bd80      	pop	{r7, pc}

1005355e <BLEPLAT_GetAnchorPoint>:

uint64_t BLEPLAT_GetAnchorPoint(uint64_t *pCurrentSysTime)
{
1005355e:	b580      	push	{r7, lr}
10053560:	b082      	sub	sp, #8
10053562:	af00      	add	r7, sp, #0
10053564:	6078      	str	r0, [r7, #4]
  return HAL_RADIO_TIMER_GetAnchorPoint(pCurrentSysTime);
10053566:	687b      	ldr	r3, [r7, #4]
10053568:	0018      	movs	r0, r3
1005356a:	f7f8 fe7b 	bl	1004c264 <HAL_RADIO_TIMER_GetAnchorPoint>
1005356e:	0002      	movs	r2, r0
10053570:	000b      	movs	r3, r1
}
10053572:	0010      	movs	r0, r2
10053574:	0019      	movs	r1, r3
10053576:	46bd      	mov	sp, r7
10053578:	b002      	add	sp, #8
1005357a:	bd80      	pop	{r7, pc}

1005357c <BLEPLAT_SetRadioCloseTimeout>:

void BLEPLAT_SetRadioCloseTimeout(void)
{
1005357c:	b580      	push	{r7, lr}
1005357e:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_SetRadioCloseTimeout();
10053580:	f7f8 ff48 	bl	1004c414 <HAL_RADIO_TIMER_SetRadioCloseTimeout>
}
10053584:	46c0      	nop			@ (mov r8, r8)
10053586:	46bd      	mov	sp, r7
10053588:	bd80      	pop	{r7, pc}
	...

1005358c <LL_RADIO_SetCurrentConnectionMachineNumber>:
{
1005358c:	b580      	push	{r7, lr}
1005358e:	b082      	sub	sp, #8
10053590:	af00      	add	r7, sp, #0
10053592:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_CURSTMACHNUM, value);
10053594:	4b07      	ldr	r3, [pc, #28]	@ (100535b4 <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
10053596:	685b      	ldr	r3, [r3, #4]
10053598:	227f      	movs	r2, #127	@ 0x7f
1005359a:	4393      	bics	r3, r2
1005359c:	0019      	movs	r1, r3
1005359e:	687b      	ldr	r3, [r7, #4]
100535a0:	227f      	movs	r2, #127	@ 0x7f
100535a2:	401a      	ands	r2, r3
100535a4:	4b03      	ldr	r3, [pc, #12]	@ (100535b4 <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
100535a6:	430a      	orrs	r2, r1
100535a8:	605a      	str	r2, [r3, #4]
}
100535aa:	46c0      	nop			@ (mov r8, r8)
100535ac:	46bd      	mov	sp, r7
100535ae:	b002      	add	sp, #8
100535b0:	bd80      	pop	{r7, pc}
100535b2:	46c0      	nop			@ (mov r8, r8)
100535b4:	200000c0 	.word	0x200000c0

100535b8 <LL_RADIO_GlobalEnableBlue>:
{
100535b8:	b580      	push	{r7, lr}
100535ba:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
100535bc:	4b04      	ldr	r3, [pc, #16]	@ (100535d0 <LL_RADIO_GlobalEnableBlue+0x18>)
100535be:	685a      	ldr	r2, [r3, #4]
100535c0:	4b03      	ldr	r3, [pc, #12]	@ (100535d0 <LL_RADIO_GlobalEnableBlue+0x18>)
100535c2:	2180      	movs	r1, #128	@ 0x80
100535c4:	430a      	orrs	r2, r1
100535c6:	605a      	str	r2, [r3, #4]
}
100535c8:	46c0      	nop			@ (mov r8, r8)
100535ca:	46bd      	mov	sp, r7
100535cc:	bd80      	pop	{r7, pc}
100535ce:	46c0      	nop			@ (mov r8, r8)
100535d0:	200000c0 	.word	0x200000c0

100535d4 <LL_RADIO_GlobalDisableBlue>:
{
100535d4:	b580      	push	{r7, lr}
100535d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
100535d8:	4b04      	ldr	r3, [pc, #16]	@ (100535ec <LL_RADIO_GlobalDisableBlue+0x18>)
100535da:	685a      	ldr	r2, [r3, #4]
100535dc:	4b03      	ldr	r3, [pc, #12]	@ (100535ec <LL_RADIO_GlobalDisableBlue+0x18>)
100535de:	2180      	movs	r1, #128	@ 0x80
100535e0:	438a      	bics	r2, r1
100535e2:	605a      	str	r2, [r3, #4]
}
100535e4:	46c0      	nop			@ (mov r8, r8)
100535e6:	46bd      	mov	sp, r7
100535e8:	bd80      	pop	{r7, pc}
100535ea:	46c0      	nop			@ (mov r8, r8)
100535ec:	200000c0 	.word	0x200000c0

100535f0 <LL_RADIO_SetReceiveWindowTimeout>:
{
100535f0:	b580      	push	{r7, lr}
100535f2:	b082      	sub	sp, #8
100535f4:	af00      	add	r7, sp, #0
100535f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_RCVTIMEOUT, value);
100535f8:	4b07      	ldr	r3, [pc, #28]	@ (10053618 <LL_RADIO_SetReceiveWindowTimeout+0x28>)
100535fa:	691b      	ldr	r3, [r3, #16]
100535fc:	4a07      	ldr	r2, [pc, #28]	@ (1005361c <LL_RADIO_SetReceiveWindowTimeout+0x2c>)
100535fe:	4013      	ands	r3, r2
10053600:	0019      	movs	r1, r3
10053602:	687b      	ldr	r3, [r7, #4]
10053604:	021b      	lsls	r3, r3, #8
10053606:	4a06      	ldr	r2, [pc, #24]	@ (10053620 <LL_RADIO_SetReceiveWindowTimeout+0x30>)
10053608:	401a      	ands	r2, r3
1005360a:	4b03      	ldr	r3, [pc, #12]	@ (10053618 <LL_RADIO_SetReceiveWindowTimeout+0x28>)
1005360c:	430a      	orrs	r2, r1
1005360e:	611a      	str	r2, [r3, #16]
}
10053610:	46c0      	nop			@ (mov r8, r8)
10053612:	46bd      	mov	sp, r7
10053614:	b002      	add	sp, #8
10053616:	bd80      	pop	{r7, pc}
10053618:	200000c0 	.word	0x200000c0
1005361c:	f00000ff 	.word	0xf00000ff
10053620:	0fffff00 	.word	0x0fffff00

10053624 <LL_RADIO_SetUnmappedChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUnmappedChannel(uint8_t stateMachineNo, uint32_t value)
{
10053624:	b580      	push	{r7, lr}
10053626:	b082      	sub	sp, #8
10053628:	af00      	add	r7, sp, #0
1005362a:	0002      	movs	r2, r0
1005362c:	6039      	str	r1, [r7, #0]
1005362e:	1dfb      	adds	r3, r7, #7
10053630:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_UCHAN, value);
10053632:	1dfb      	adds	r3, r7, #7
10053634:	781b      	ldrb	r3, [r3, #0]
10053636:	225c      	movs	r2, #92	@ 0x5c
10053638:	4353      	muls	r3, r2
1005363a:	4a0b      	ldr	r2, [pc, #44]	@ (10053668 <LL_RADIO_SetUnmappedChannel+0x44>)
1005363c:	4694      	mov	ip, r2
1005363e:	4463      	add	r3, ip
10053640:	681b      	ldr	r3, [r3, #0]
10053642:	223f      	movs	r2, #63	@ 0x3f
10053644:	4393      	bics	r3, r2
10053646:	0019      	movs	r1, r3
10053648:	683b      	ldr	r3, [r7, #0]
1005364a:	223f      	movs	r2, #63	@ 0x3f
1005364c:	401a      	ands	r2, r3
1005364e:	1dfb      	adds	r3, r7, #7
10053650:	781b      	ldrb	r3, [r3, #0]
10053652:	205c      	movs	r0, #92	@ 0x5c
10053654:	4343      	muls	r3, r0
10053656:	4804      	ldr	r0, [pc, #16]	@ (10053668 <LL_RADIO_SetUnmappedChannel+0x44>)
10053658:	4684      	mov	ip, r0
1005365a:	4463      	add	r3, ip
1005365c:	430a      	orrs	r2, r1
1005365e:	601a      	str	r2, [r3, #0]
}
10053660:	46c0      	nop			@ (mov r8, r8)
10053662:	46bd      	mov	sp, r7
10053664:	b002      	add	sp, #8
10053666:	bd80      	pop	{r7, pc}
10053668:	200000dc 	.word	0x200000dc

1005366c <LL_RADIO_RadioCommandList_Enable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Enable(uint8_t stateMachineNo)
{
1005366c:	b580      	push	{r7, lr}
1005366e:	b082      	sub	sp, #8
10053670:	af00      	add	r7, sp, #0
10053672:	0002      	movs	r2, r0
10053674:	1dfb      	adds	r3, r7, #7
10053676:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
10053678:	1dfb      	adds	r3, r7, #7
1005367a:	781b      	ldrb	r3, [r3, #0]
1005367c:	225c      	movs	r2, #92	@ 0x5c
1005367e:	4353      	muls	r3, r2
10053680:	4a08      	ldr	r2, [pc, #32]	@ (100536a4 <LL_RADIO_RadioCommandList_Enable+0x38>)
10053682:	4694      	mov	ip, r2
10053684:	4463      	add	r3, ip
10053686:	681a      	ldr	r2, [r3, #0]
10053688:	1dfb      	adds	r3, r7, #7
1005368a:	781b      	ldrb	r3, [r3, #0]
1005368c:	215c      	movs	r1, #92	@ 0x5c
1005368e:	434b      	muls	r3, r1
10053690:	4904      	ldr	r1, [pc, #16]	@ (100536a4 <LL_RADIO_RadioCommandList_Enable+0x38>)
10053692:	468c      	mov	ip, r1
10053694:	4463      	add	r3, ip
10053696:	2140      	movs	r1, #64	@ 0x40
10053698:	430a      	orrs	r2, r1
1005369a:	601a      	str	r2, [r3, #0]
}
1005369c:	46c0      	nop			@ (mov r8, r8)
1005369e:	46bd      	mov	sp, r7
100536a0:	b002      	add	sp, #8
100536a2:	bd80      	pop	{r7, pc}
100536a4:	200000dc 	.word	0x200000dc

100536a8 <LL_RADIO_RadioCommandList_Disable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Disable(uint8_t stateMachineNo)
{
100536a8:	b580      	push	{r7, lr}
100536aa:	b082      	sub	sp, #8
100536ac:	af00      	add	r7, sp, #0
100536ae:	0002      	movs	r2, r0
100536b0:	1dfb      	adds	r3, r7, #7
100536b2:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
100536b4:	1dfb      	adds	r3, r7, #7
100536b6:	781b      	ldrb	r3, [r3, #0]
100536b8:	225c      	movs	r2, #92	@ 0x5c
100536ba:	4353      	muls	r3, r2
100536bc:	4a08      	ldr	r2, [pc, #32]	@ (100536e0 <LL_RADIO_RadioCommandList_Disable+0x38>)
100536be:	4694      	mov	ip, r2
100536c0:	4463      	add	r3, ip
100536c2:	681a      	ldr	r2, [r3, #0]
100536c4:	1dfb      	adds	r3, r7, #7
100536c6:	781b      	ldrb	r3, [r3, #0]
100536c8:	215c      	movs	r1, #92	@ 0x5c
100536ca:	434b      	muls	r3, r1
100536cc:	4904      	ldr	r1, [pc, #16]	@ (100536e0 <LL_RADIO_RadioCommandList_Disable+0x38>)
100536ce:	468c      	mov	ip, r1
100536d0:	4463      	add	r3, ip
100536d2:	2140      	movs	r1, #64	@ 0x40
100536d4:	438a      	bics	r2, r1
100536d6:	601a      	str	r2, [r3, #0]
}
100536d8:	46c0      	nop			@ (mov r8, r8)
100536da:	46bd      	mov	sp, r7
100536dc:	b002      	add	sp, #8
100536de:	bd80      	pop	{r7, pc}
100536e0:	200000dc 	.word	0x200000dc

100536e4 <LL_RADIO_TxMode_Enable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Enable(uint8_t stateMachineNo)
{
100536e4:	b580      	push	{r7, lr}
100536e6:	b082      	sub	sp, #8
100536e8:	af00      	add	r7, sp, #0
100536ea:	0002      	movs	r2, r0
100536ec:	1dfb      	adds	r3, r7, #7
100536ee:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
100536f0:	1dfb      	adds	r3, r7, #7
100536f2:	781b      	ldrb	r3, [r3, #0]
100536f4:	225c      	movs	r2, #92	@ 0x5c
100536f6:	4353      	muls	r3, r2
100536f8:	4a08      	ldr	r2, [pc, #32]	@ (1005371c <LL_RADIO_TxMode_Enable+0x38>)
100536fa:	4694      	mov	ip, r2
100536fc:	4463      	add	r3, ip
100536fe:	681a      	ldr	r2, [r3, #0]
10053700:	1dfb      	adds	r3, r7, #7
10053702:	781b      	ldrb	r3, [r3, #0]
10053704:	215c      	movs	r1, #92	@ 0x5c
10053706:	434b      	muls	r3, r1
10053708:	4904      	ldr	r1, [pc, #16]	@ (1005371c <LL_RADIO_TxMode_Enable+0x38>)
1005370a:	468c      	mov	ip, r1
1005370c:	4463      	add	r3, ip
1005370e:	2180      	movs	r1, #128	@ 0x80
10053710:	430a      	orrs	r2, r1
10053712:	601a      	str	r2, [r3, #0]
}
10053714:	46c0      	nop			@ (mov r8, r8)
10053716:	46bd      	mov	sp, r7
10053718:	b002      	add	sp, #8
1005371a:	bd80      	pop	{r7, pc}
1005371c:	200000dc 	.word	0x200000dc

10053720 <LL_RADIO_TxMode_Disable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Disable(uint8_t stateMachineNo)
{
10053720:	b580      	push	{r7, lr}
10053722:	b082      	sub	sp, #8
10053724:	af00      	add	r7, sp, #0
10053726:	0002      	movs	r2, r0
10053728:	1dfb      	adds	r3, r7, #7
1005372a:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
1005372c:	1dfb      	adds	r3, r7, #7
1005372e:	781b      	ldrb	r3, [r3, #0]
10053730:	225c      	movs	r2, #92	@ 0x5c
10053732:	4353      	muls	r3, r2
10053734:	4a08      	ldr	r2, [pc, #32]	@ (10053758 <LL_RADIO_TxMode_Disable+0x38>)
10053736:	4694      	mov	ip, r2
10053738:	4463      	add	r3, ip
1005373a:	681a      	ldr	r2, [r3, #0]
1005373c:	1dfb      	adds	r3, r7, #7
1005373e:	781b      	ldrb	r3, [r3, #0]
10053740:	215c      	movs	r1, #92	@ 0x5c
10053742:	434b      	muls	r3, r1
10053744:	4904      	ldr	r1, [pc, #16]	@ (10053758 <LL_RADIO_TxMode_Disable+0x38>)
10053746:	468c      	mov	ip, r1
10053748:	4463      	add	r3, ip
1005374a:	2180      	movs	r1, #128	@ 0x80
1005374c:	438a      	bics	r2, r1
1005374e:	601a      	str	r2, [r3, #0]
}
10053750:	46c0      	nop			@ (mov r8, r8)
10053752:	46bd      	mov	sp, r7
10053754:	b002      	add	sp, #8
10053756:	bd80      	pop	{r7, pc}
10053758:	200000dc 	.word	0x200000dc

1005375c <LL_RADIO_TxMode_IsEnabled>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_IsEnabled
  * @param  stateMachineNo
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TxMode_IsEnabled(uint8_t stateMachineNo)
{
1005375c:	b580      	push	{r7, lr}
1005375e:	b082      	sub	sp, #8
10053760:	af00      	add	r7, sp, #0
10053762:	0002      	movs	r2, r0
10053764:	1dfb      	adds	r3, r7, #7
10053766:	701a      	strb	r2, [r3, #0]
  return ((READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE) == (STATEMACH_WORD0_TXMODE)) ? 1U : 0U);
10053768:	1dfb      	adds	r3, r7, #7
1005376a:	781b      	ldrb	r3, [r3, #0]
1005376c:	225c      	movs	r2, #92	@ 0x5c
1005376e:	4353      	muls	r3, r2
10053770:	4a07      	ldr	r2, [pc, #28]	@ (10053790 <LL_RADIO_TxMode_IsEnabled+0x34>)
10053772:	4694      	mov	ip, r2
10053774:	4463      	add	r3, ip
10053776:	681b      	ldr	r3, [r3, #0]
10053778:	2280      	movs	r2, #128	@ 0x80
1005377a:	4013      	ands	r3, r2
1005377c:	2b80      	cmp	r3, #128	@ 0x80
1005377e:	d101      	bne.n	10053784 <LL_RADIO_TxMode_IsEnabled+0x28>
10053780:	2301      	movs	r3, #1
10053782:	e000      	b.n	10053786 <LL_RADIO_TxMode_IsEnabled+0x2a>
10053784:	2300      	movs	r3, #0
}
10053786:	0018      	movs	r0, r3
10053788:	46bd      	mov	sp, r7
1005378a:	b002      	add	sp, #8
1005378c:	bd80      	pop	{r7, pc}
1005378e:	46c0      	nop			@ (mov r8, r8)
10053790:	200000dc 	.word	0x200000dc

10053794 <LL_RADIO_SetRemapChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRemapChannel(uint8_t stateMachineNo, uint32_t value)
{
10053794:	b580      	push	{r7, lr}
10053796:	b082      	sub	sp, #8
10053798:	af00      	add	r7, sp, #0
1005379a:	0002      	movs	r2, r0
1005379c:	6039      	str	r1, [r7, #0]
1005379e:	1dfb      	adds	r3, r7, #7
100537a0:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_REMAP_CHAN, value);
100537a2:	1dfb      	adds	r3, r7, #7
100537a4:	781b      	ldrb	r3, [r3, #0]
100537a6:	225c      	movs	r2, #92	@ 0x5c
100537a8:	4353      	muls	r3, r2
100537aa:	4a0c      	ldr	r2, [pc, #48]	@ (100537dc <LL_RADIO_SetRemapChannel+0x48>)
100537ac:	4694      	mov	ip, r2
100537ae:	4463      	add	r3, ip
100537b0:	681b      	ldr	r3, [r3, #0]
100537b2:	4a0b      	ldr	r2, [pc, #44]	@ (100537e0 <LL_RADIO_SetRemapChannel+0x4c>)
100537b4:	4013      	ands	r3, r2
100537b6:	0019      	movs	r1, r3
100537b8:	683b      	ldr	r3, [r7, #0]
100537ba:	021a      	lsls	r2, r3, #8
100537bc:	23fc      	movs	r3, #252	@ 0xfc
100537be:	019b      	lsls	r3, r3, #6
100537c0:	401a      	ands	r2, r3
100537c2:	1dfb      	adds	r3, r7, #7
100537c4:	781b      	ldrb	r3, [r3, #0]
100537c6:	205c      	movs	r0, #92	@ 0x5c
100537c8:	4343      	muls	r3, r0
100537ca:	4804      	ldr	r0, [pc, #16]	@ (100537dc <LL_RADIO_SetRemapChannel+0x48>)
100537cc:	4684      	mov	ip, r0
100537ce:	4463      	add	r3, ip
100537d0:	430a      	orrs	r2, r1
100537d2:	601a      	str	r2, [r3, #0]
}
100537d4:	46c0      	nop			@ (mov r8, r8)
100537d6:	46bd      	mov	sp, r7
100537d8:	b002      	add	sp, #8
100537da:	bd80      	pop	{r7, pc}
100537dc:	200000dc 	.word	0x200000dc
100537e0:	ffffc0ff 	.word	0xffffc0ff

100537e4 <LL_RADIO_GetRemapChannel>:
  * @rmtoll WORD0          REMAP_CHAN       LL_RADIO_GetRemapChannel
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetRemapChannel(uint8_t stateMachineNo)
{
100537e4:	b580      	push	{r7, lr}
100537e6:	b082      	sub	sp, #8
100537e8:	af00      	add	r7, sp, #0
100537ea:	0002      	movs	r2, r0
100537ec:	1dfb      	adds	r3, r7, #7
100537ee:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0,
100537f0:	1dfb      	adds	r3, r7, #7
100537f2:	781b      	ldrb	r3, [r3, #0]
100537f4:	225c      	movs	r2, #92	@ 0x5c
100537f6:	4353      	muls	r3, r2
100537f8:	4a05      	ldr	r2, [pc, #20]	@ (10053810 <LL_RADIO_GetRemapChannel+0x2c>)
100537fa:	4694      	mov	ip, r2
100537fc:	4463      	add	r3, ip
100537fe:	681b      	ldr	r3, [r3, #0]
10053800:	0a1b      	lsrs	r3, r3, #8
10053802:	223f      	movs	r2, #63	@ 0x3f
10053804:	4013      	ands	r3, r2
                             STATEMACH_WORD0_REMAP_CHAN) >> STATEMACH_WORD0_REMAP_CHAN_Pos);
}
10053806:	0018      	movs	r0, r3
10053808:	46bd      	mov	sp, r7
1005380a:	b002      	add	sp, #8
1005380c:	bd80      	pop	{r7, pc}
1005380e:	46c0      	nop			@ (mov r8, r8)
10053810:	200000dc 	.word	0x200000dc

10053814 <LL_RADIO_ToggleNextExpectedSequenceNumber>:
  * @rmtoll WORD0          NESN       LL_RADIO_ToggleNextExpectedSequenceNumber
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ToggleNextExpectedSequenceNumber(uint8_t stateMachineNo)
{
10053814:	b580      	push	{r7, lr}
10053816:	b082      	sub	sp, #8
10053818:	af00      	add	r7, sp, #0
1005381a:	0002      	movs	r2, r0
1005381c:	1dfb      	adds	r3, r7, #7
1005381e:	701a      	strb	r2, [r3, #0]
  TOGGLE_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_NESN);
10053820:	1dfb      	adds	r3, r7, #7
10053822:	781b      	ldrb	r3, [r3, #0]
10053824:	225c      	movs	r2, #92	@ 0x5c
10053826:	4353      	muls	r3, r2
10053828:	4a09      	ldr	r2, [pc, #36]	@ (10053850 <LL_RADIO_ToggleNextExpectedSequenceNumber+0x3c>)
1005382a:	4694      	mov	ip, r2
1005382c:	4463      	add	r3, ip
1005382e:	681a      	ldr	r2, [r3, #0]
10053830:	1dfb      	adds	r3, r7, #7
10053832:	781b      	ldrb	r3, [r3, #0]
10053834:	215c      	movs	r1, #92	@ 0x5c
10053836:	434b      	muls	r3, r1
10053838:	4905      	ldr	r1, [pc, #20]	@ (10053850 <LL_RADIO_ToggleNextExpectedSequenceNumber+0x3c>)
1005383a:	468c      	mov	ip, r1
1005383c:	4463      	add	r3, ip
1005383e:	2180      	movs	r1, #128	@ 0x80
10053840:	0209      	lsls	r1, r1, #8
10053842:	404a      	eors	r2, r1
10053844:	601a      	str	r2, [r3, #0]
}
10053846:	46c0      	nop			@ (mov r8, r8)
10053848:	46bd      	mov	sp, r7
1005384a:	b002      	add	sp, #8
1005384c:	bd80      	pop	{r7, pc}
1005384e:	46c0      	nop			@ (mov r8, r8)
10053850:	200000dc 	.word	0x200000dc

10053854 <LL_RADIO_Encryption_Enable>:
  * @rmtoll WORD0          ENCRYPTON            LL_RADIO_Encryption_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Encryption_Enable(uint8_t stateMachineNo)
{
10053854:	b580      	push	{r7, lr}
10053856:	b082      	sub	sp, #8
10053858:	af00      	add	r7, sp, #0
1005385a:	0002      	movs	r2, r0
1005385c:	1dfb      	adds	r3, r7, #7
1005385e:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_ENCRYPTON);
10053860:	1dfb      	adds	r3, r7, #7
10053862:	781b      	ldrb	r3, [r3, #0]
10053864:	225c      	movs	r2, #92	@ 0x5c
10053866:	4353      	muls	r3, r2
10053868:	4a09      	ldr	r2, [pc, #36]	@ (10053890 <LL_RADIO_Encryption_Enable+0x3c>)
1005386a:	4694      	mov	ip, r2
1005386c:	4463      	add	r3, ip
1005386e:	681a      	ldr	r2, [r3, #0]
10053870:	1dfb      	adds	r3, r7, #7
10053872:	781b      	ldrb	r3, [r3, #0]
10053874:	215c      	movs	r1, #92	@ 0x5c
10053876:	434b      	muls	r3, r1
10053878:	4905      	ldr	r1, [pc, #20]	@ (10053890 <LL_RADIO_Encryption_Enable+0x3c>)
1005387a:	468c      	mov	ip, r1
1005387c:	4463      	add	r3, ip
1005387e:	2180      	movs	r1, #128	@ 0x80
10053880:	0389      	lsls	r1, r1, #14
10053882:	430a      	orrs	r2, r1
10053884:	601a      	str	r2, [r3, #0]
}
10053886:	46c0      	nop			@ (mov r8, r8)
10053888:	46bd      	mov	sp, r7
1005388a:	b002      	add	sp, #8
1005388c:	bd80      	pop	{r7, pc}
1005388e:	46c0      	nop			@ (mov r8, r8)
10053890:	200000dc 	.word	0x200000dc

10053894 <LL_RADIO_Encryption_Disable>:
  * @rmtoll WORD0          ENCRYPTON            LL_RADIO_Encryption_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Encryption_Disable(uint8_t stateMachineNo)
{
10053894:	b580      	push	{r7, lr}
10053896:	b082      	sub	sp, #8
10053898:	af00      	add	r7, sp, #0
1005389a:	0002      	movs	r2, r0
1005389c:	1dfb      	adds	r3, r7, #7
1005389e:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_ENCRYPTON);
100538a0:	1dfb      	adds	r3, r7, #7
100538a2:	781b      	ldrb	r3, [r3, #0]
100538a4:	225c      	movs	r2, #92	@ 0x5c
100538a6:	4353      	muls	r3, r2
100538a8:	4a08      	ldr	r2, [pc, #32]	@ (100538cc <LL_RADIO_Encryption_Disable+0x38>)
100538aa:	4694      	mov	ip, r2
100538ac:	4463      	add	r3, ip
100538ae:	681a      	ldr	r2, [r3, #0]
100538b0:	1dfb      	adds	r3, r7, #7
100538b2:	781b      	ldrb	r3, [r3, #0]
100538b4:	215c      	movs	r1, #92	@ 0x5c
100538b6:	434b      	muls	r3, r1
100538b8:	4904      	ldr	r1, [pc, #16]	@ (100538cc <LL_RADIO_Encryption_Disable+0x38>)
100538ba:	468c      	mov	ip, r1
100538bc:	4463      	add	r3, ip
100538be:	4904      	ldr	r1, [pc, #16]	@ (100538d0 <LL_RADIO_Encryption_Disable+0x3c>)
100538c0:	400a      	ands	r2, r1
100538c2:	601a      	str	r2, [r3, #0]
}
100538c4:	46c0      	nop			@ (mov r8, r8)
100538c6:	46bd      	mov	sp, r7
100538c8:	b002      	add	sp, #8
100538ca:	bd80      	pop	{r7, pc}
100538cc:	200000dc 	.word	0x200000dc
100538d0:	ffdfffff 	.word	0xffdfffff

100538d4 <LL_RADIO_SetTransmissionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionPhy(uint8_t stateMachineNo, uint32_t value)
{
100538d4:	b580      	push	{r7, lr}
100538d6:	b082      	sub	sp, #8
100538d8:	af00      	add	r7, sp, #0
100538da:	0002      	movs	r2, r0
100538dc:	6039      	str	r1, [r7, #0]
100538de:	1dfb      	adds	r3, r7, #7
100538e0:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY, value);
100538e2:	1dfb      	adds	r3, r7, #7
100538e4:	781b      	ldrb	r3, [r3, #0]
100538e6:	225c      	movs	r2, #92	@ 0x5c
100538e8:	4353      	muls	r3, r2
100538ea:	4a0c      	ldr	r2, [pc, #48]	@ (1005391c <LL_RADIO_SetTransmissionPhy+0x48>)
100538ec:	4694      	mov	ip, r2
100538ee:	4463      	add	r3, ip
100538f0:	681b      	ldr	r3, [r3, #0]
100538f2:	4a0b      	ldr	r2, [pc, #44]	@ (10053920 <LL_RADIO_SetTransmissionPhy+0x4c>)
100538f4:	4013      	ands	r3, r2
100538f6:	0019      	movs	r1, r3
100538f8:	683b      	ldr	r3, [r7, #0]
100538fa:	061a      	lsls	r2, r3, #24
100538fc:	23e0      	movs	r3, #224	@ 0xe0
100538fe:	04db      	lsls	r3, r3, #19
10053900:	401a      	ands	r2, r3
10053902:	1dfb      	adds	r3, r7, #7
10053904:	781b      	ldrb	r3, [r3, #0]
10053906:	205c      	movs	r0, #92	@ 0x5c
10053908:	4343      	muls	r3, r0
1005390a:	4804      	ldr	r0, [pc, #16]	@ (1005391c <LL_RADIO_SetTransmissionPhy+0x48>)
1005390c:	4684      	mov	ip, r0
1005390e:	4463      	add	r3, ip
10053910:	430a      	orrs	r2, r1
10053912:	601a      	str	r2, [r3, #0]
}
10053914:	46c0      	nop			@ (mov r8, r8)
10053916:	46bd      	mov	sp, r7
10053918:	b002      	add	sp, #8
1005391a:	bd80      	pop	{r7, pc}
1005391c:	200000dc 	.word	0x200000dc
10053920:	f8ffffff 	.word	0xf8ffffff

10053924 <LL_RADIO_GetTransmissionPhy>:
  * @rmtoll WORD0          TXPHY       LL_RADIO_GetTransmissionPhy
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetTransmissionPhy(uint8_t stateMachineNo)
{
10053924:	b580      	push	{r7, lr}
10053926:	b082      	sub	sp, #8
10053928:	af00      	add	r7, sp, #0
1005392a:	0002      	movs	r2, r0
1005392c:	1dfb      	adds	r3, r7, #7
1005392e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY) >> STATEMACH_WORD0_TXPHY_Pos);
10053930:	1dfb      	adds	r3, r7, #7
10053932:	781b      	ldrb	r3, [r3, #0]
10053934:	225c      	movs	r2, #92	@ 0x5c
10053936:	4353      	muls	r3, r2
10053938:	4a05      	ldr	r2, [pc, #20]	@ (10053950 <LL_RADIO_GetTransmissionPhy+0x2c>)
1005393a:	4694      	mov	ip, r2
1005393c:	4463      	add	r3, ip
1005393e:	681b      	ldr	r3, [r3, #0]
10053940:	0e1b      	lsrs	r3, r3, #24
10053942:	2207      	movs	r2, #7
10053944:	4013      	ands	r3, r2
}
10053946:	0018      	movs	r0, r3
10053948:	46bd      	mov	sp, r7
1005394a:	b002      	add	sp, #8
1005394c:	bd80      	pop	{r7, pc}
1005394e:	46c0      	nop			@ (mov r8, r8)
10053950:	200000dc 	.word	0x200000dc

10053954 <LL_RADIO_SetCTEDisable>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCTEDisable(uint8_t stateMachineNo, uint32_t value)
{
10053954:	b580      	push	{r7, lr}
10053956:	b082      	sub	sp, #8
10053958:	af00      	add	r7, sp, #0
1005395a:	0002      	movs	r2, r0
1005395c:	6039      	str	r1, [r7, #0]
1005395e:	1dfb      	adds	r3, r7, #7
10053960:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_CTEDISABLE, value);
10053962:	1dfb      	adds	r3, r7, #7
10053964:	781b      	ldrb	r3, [r3, #0]
10053966:	225c      	movs	r2, #92	@ 0x5c
10053968:	4353      	muls	r3, r2
1005396a:	4a0c      	ldr	r2, [pc, #48]	@ (1005399c <LL_RADIO_SetCTEDisable+0x48>)
1005396c:	4694      	mov	ip, r2
1005396e:	4463      	add	r3, ip
10053970:	681b      	ldr	r3, [r3, #0]
10053972:	4a0b      	ldr	r2, [pc, #44]	@ (100539a0 <LL_RADIO_SetCTEDisable+0x4c>)
10053974:	4013      	ands	r3, r2
10053976:	0019      	movs	r1, r3
10053978:	683b      	ldr	r3, [r7, #0]
1005397a:	06da      	lsls	r2, r3, #27
1005397c:	2380      	movs	r3, #128	@ 0x80
1005397e:	051b      	lsls	r3, r3, #20
10053980:	401a      	ands	r2, r3
10053982:	1dfb      	adds	r3, r7, #7
10053984:	781b      	ldrb	r3, [r3, #0]
10053986:	205c      	movs	r0, #92	@ 0x5c
10053988:	4343      	muls	r3, r0
1005398a:	4804      	ldr	r0, [pc, #16]	@ (1005399c <LL_RADIO_SetCTEDisable+0x48>)
1005398c:	4684      	mov	ip, r0
1005398e:	4463      	add	r3, ip
10053990:	430a      	orrs	r2, r1
10053992:	601a      	str	r2, [r3, #0]
}
10053994:	46c0      	nop			@ (mov r8, r8)
10053996:	46bd      	mov	sp, r7
10053998:	b002      	add	sp, #8
1005399a:	bd80      	pop	{r7, pc}
1005399c:	200000dc 	.word	0x200000dc
100539a0:	f7ffffff 	.word	0xf7ffffff

100539a4 <LL_RADIO_SetReceptionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceptionPhy(uint8_t stateMachineNo, uint32_t value)
{
100539a4:	b580      	push	{r7, lr}
100539a6:	b082      	sub	sp, #8
100539a8:	af00      	add	r7, sp, #0
100539aa:	0002      	movs	r2, r0
100539ac:	6039      	str	r1, [r7, #0]
100539ae:	1dfb      	adds	r3, r7, #7
100539b0:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY, value);
100539b2:	1dfb      	adds	r3, r7, #7
100539b4:	781b      	ldrb	r3, [r3, #0]
100539b6:	225c      	movs	r2, #92	@ 0x5c
100539b8:	4353      	muls	r3, r2
100539ba:	4a0c      	ldr	r2, [pc, #48]	@ (100539ec <LL_RADIO_SetReceptionPhy+0x48>)
100539bc:	4694      	mov	ip, r2
100539be:	4463      	add	r3, ip
100539c0:	681b      	ldr	r3, [r3, #0]
100539c2:	4a0b      	ldr	r2, [pc, #44]	@ (100539f0 <LL_RADIO_SetReceptionPhy+0x4c>)
100539c4:	4013      	ands	r3, r2
100539c6:	0019      	movs	r1, r3
100539c8:	683b      	ldr	r3, [r7, #0]
100539ca:	071a      	lsls	r2, r3, #28
100539cc:	23e0      	movs	r3, #224	@ 0xe0
100539ce:	05db      	lsls	r3, r3, #23
100539d0:	401a      	ands	r2, r3
100539d2:	1dfb      	adds	r3, r7, #7
100539d4:	781b      	ldrb	r3, [r3, #0]
100539d6:	205c      	movs	r0, #92	@ 0x5c
100539d8:	4343      	muls	r3, r0
100539da:	4804      	ldr	r0, [pc, #16]	@ (100539ec <LL_RADIO_SetReceptionPhy+0x48>)
100539dc:	4684      	mov	ip, r0
100539de:	4463      	add	r3, ip
100539e0:	430a      	orrs	r2, r1
100539e2:	601a      	str	r2, [r3, #0]
}
100539e4:	46c0      	nop			@ (mov r8, r8)
100539e6:	46bd      	mov	sp, r7
100539e8:	b002      	add	sp, #8
100539ea:	bd80      	pop	{r7, pc}
100539ec:	200000dc 	.word	0x200000dc
100539f0:	8fffffff 	.word	0x8fffffff

100539f4 <LL_RADIO_GetReceptionPhy>:
  * @rmtoll WORD0          RXPHY       LL_RADIO_GetReceptionPhy
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetReceptionPhy(uint8_t stateMachineNo)
{
100539f4:	b580      	push	{r7, lr}
100539f6:	b082      	sub	sp, #8
100539f8:	af00      	add	r7, sp, #0
100539fa:	0002      	movs	r2, r0
100539fc:	1dfb      	adds	r3, r7, #7
100539fe:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY) >> STATEMACH_WORD0_RXPHY_Pos);
10053a00:	1dfb      	adds	r3, r7, #7
10053a02:	781b      	ldrb	r3, [r3, #0]
10053a04:	225c      	movs	r2, #92	@ 0x5c
10053a06:	4353      	muls	r3, r2
10053a08:	4a05      	ldr	r2, [pc, #20]	@ (10053a20 <LL_RADIO_GetReceptionPhy+0x2c>)
10053a0a:	4694      	mov	ip, r2
10053a0c:	4463      	add	r3, ip
10053a0e:	681b      	ldr	r3, [r3, #0]
10053a10:	0f1b      	lsrs	r3, r3, #28
10053a12:	2207      	movs	r2, #7
10053a14:	4013      	ands	r3, r2
}
10053a16:	0018      	movs	r0, r3
10053a18:	46bd      	mov	sp, r7
10053a1a:	b002      	add	sp, #8
10053a1c:	bd80      	pop	{r7, pc}
10053a1e:	46c0      	nop			@ (mov r8, r8)
10053a20:	200000dc 	.word	0x200000dc

10053a24 <LL_RADIO_SetTxPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxPoint(uint8_t stateMachineNo, uint32_t value)
{
10053a24:	b580      	push	{r7, lr}
10053a26:	b082      	sub	sp, #8
10053a28:	af00      	add	r7, sp, #0
10053a2a:	0002      	movs	r2, r0
10053a2c:	6039      	str	r1, [r7, #0]
10053a2e:	1dfb      	adds	r3, r7, #7
10053a30:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD1, STATEMACH_WORD1_TXPOINT, value);
10053a32:	1dfb      	adds	r3, r7, #7
10053a34:	781b      	ldrb	r3, [r3, #0]
10053a36:	225c      	movs	r2, #92	@ 0x5c
10053a38:	4353      	muls	r3, r2
10053a3a:	4a08      	ldr	r2, [pc, #32]	@ (10053a5c <LL_RADIO_SetTxPoint+0x38>)
10053a3c:	4694      	mov	ip, r2
10053a3e:	4463      	add	r3, ip
10053a40:	685b      	ldr	r3, [r3, #4]
10053a42:	1dfb      	adds	r3, r7, #7
10053a44:	781b      	ldrb	r3, [r3, #0]
10053a46:	225c      	movs	r2, #92	@ 0x5c
10053a48:	4353      	muls	r3, r2
10053a4a:	4a04      	ldr	r2, [pc, #16]	@ (10053a5c <LL_RADIO_SetTxPoint+0x38>)
10053a4c:	4694      	mov	ip, r2
10053a4e:	4463      	add	r3, ip
10053a50:	683a      	ldr	r2, [r7, #0]
10053a52:	605a      	str	r2, [r3, #4]
}
10053a54:	46c0      	nop			@ (mov r8, r8)
10053a56:	46bd      	mov	sp, r7
10053a58:	b002      	add	sp, #8
10053a5a:	bd80      	pop	{r7, pc}
10053a5c:	200000dc 	.word	0x200000dc

10053a60 <LL_RADIO_SetRcvPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRcvPoint(uint8_t stateMachineNo, uint32_t value)
{
10053a60:	b580      	push	{r7, lr}
10053a62:	b082      	sub	sp, #8
10053a64:	af00      	add	r7, sp, #0
10053a66:	0002      	movs	r2, r0
10053a68:	6039      	str	r1, [r7, #0]
10053a6a:	1dfb      	adds	r3, r7, #7
10053a6c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD2, STATEMACH_WORD2_RCVPOINT, value);
10053a6e:	1dfb      	adds	r3, r7, #7
10053a70:	781b      	ldrb	r3, [r3, #0]
10053a72:	225c      	movs	r2, #92	@ 0x5c
10053a74:	4353      	muls	r3, r2
10053a76:	4a08      	ldr	r2, [pc, #32]	@ (10053a98 <LL_RADIO_SetRcvPoint+0x38>)
10053a78:	4694      	mov	ip, r2
10053a7a:	4463      	add	r3, ip
10053a7c:	689b      	ldr	r3, [r3, #8]
10053a7e:	1dfb      	adds	r3, r7, #7
10053a80:	781b      	ldrb	r3, [r3, #0]
10053a82:	225c      	movs	r2, #92	@ 0x5c
10053a84:	4353      	muls	r3, r2
10053a86:	4a04      	ldr	r2, [pc, #16]	@ (10053a98 <LL_RADIO_SetRcvPoint+0x38>)
10053a88:	4694      	mov	ip, r2
10053a8a:	4463      	add	r3, ip
10053a8c:	683a      	ldr	r2, [r7, #0]
10053a8e:	609a      	str	r2, [r3, #8]
}
10053a90:	46c0      	nop			@ (mov r8, r8)
10053a92:	46bd      	mov	sp, r7
10053a94:	b002      	add	sp, #8
10053a96:	bd80      	pop	{r7, pc}
10053a98:	200000dc 	.word	0x200000dc

10053a9c <LL_RADIO_SetPacketCounterTx_31_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterTx_31_0(uint8_t stateMachineNo, uint32_t value)
{
10053a9c:	b580      	push	{r7, lr}
10053a9e:	b082      	sub	sp, #8
10053aa0:	af00      	add	r7, sp, #0
10053aa2:	0002      	movs	r2, r0
10053aa4:	6039      	str	r1, [r7, #0]
10053aa6:	1dfb      	adds	r3, r7, #7
10053aa8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD6, STATEMACH_WORD6_PCNTTX_31_0, value);
10053aaa:	1dfb      	adds	r3, r7, #7
10053aac:	781b      	ldrb	r3, [r3, #0]
10053aae:	225c      	movs	r2, #92	@ 0x5c
10053ab0:	4353      	muls	r3, r2
10053ab2:	4a08      	ldr	r2, [pc, #32]	@ (10053ad4 <LL_RADIO_SetPacketCounterTx_31_0+0x38>)
10053ab4:	4694      	mov	ip, r2
10053ab6:	4463      	add	r3, ip
10053ab8:	699b      	ldr	r3, [r3, #24]
10053aba:	1dfb      	adds	r3, r7, #7
10053abc:	781b      	ldrb	r3, [r3, #0]
10053abe:	225c      	movs	r2, #92	@ 0x5c
10053ac0:	4353      	muls	r3, r2
10053ac2:	4a04      	ldr	r2, [pc, #16]	@ (10053ad4 <LL_RADIO_SetPacketCounterTx_31_0+0x38>)
10053ac4:	4694      	mov	ip, r2
10053ac6:	4463      	add	r3, ip
10053ac8:	683a      	ldr	r2, [r7, #0]
10053aca:	619a      	str	r2, [r3, #24]
}
10053acc:	46c0      	nop			@ (mov r8, r8)
10053ace:	46bd      	mov	sp, r7
10053ad0:	b002      	add	sp, #8
10053ad2:	bd80      	pop	{r7, pc}
10053ad4:	200000dc 	.word	0x200000dc

10053ad8 <LL_RADIO_SetPacketCounterTx_39_32>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterTx_39_32(uint8_t stateMachineNo, uint32_t value)
{
10053ad8:	b580      	push	{r7, lr}
10053ada:	b082      	sub	sp, #8
10053adc:	af00      	add	r7, sp, #0
10053ade:	0002      	movs	r2, r0
10053ae0:	6039      	str	r1, [r7, #0]
10053ae2:	1dfb      	adds	r3, r7, #7
10053ae4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD7, STATEMACH_WORD7_PCNTTX_39_32, value);
10053ae6:	1dfb      	adds	r3, r7, #7
10053ae8:	781b      	ldrb	r3, [r3, #0]
10053aea:	225c      	movs	r2, #92	@ 0x5c
10053aec:	4353      	muls	r3, r2
10053aee:	4a0b      	ldr	r2, [pc, #44]	@ (10053b1c <LL_RADIO_SetPacketCounterTx_39_32+0x44>)
10053af0:	4694      	mov	ip, r2
10053af2:	4463      	add	r3, ip
10053af4:	69db      	ldr	r3, [r3, #28]
10053af6:	22ff      	movs	r2, #255	@ 0xff
10053af8:	4393      	bics	r3, r2
10053afa:	0019      	movs	r1, r3
10053afc:	683b      	ldr	r3, [r7, #0]
10053afe:	22ff      	movs	r2, #255	@ 0xff
10053b00:	401a      	ands	r2, r3
10053b02:	1dfb      	adds	r3, r7, #7
10053b04:	781b      	ldrb	r3, [r3, #0]
10053b06:	205c      	movs	r0, #92	@ 0x5c
10053b08:	4343      	muls	r3, r0
10053b0a:	4804      	ldr	r0, [pc, #16]	@ (10053b1c <LL_RADIO_SetPacketCounterTx_39_32+0x44>)
10053b0c:	4684      	mov	ip, r0
10053b0e:	4463      	add	r3, ip
10053b10:	430a      	orrs	r2, r1
10053b12:	61da      	str	r2, [r3, #28]
}
10053b14:	46c0      	nop			@ (mov r8, r8)
10053b16:	46bd      	mov	sp, r7
10053b18:	b002      	add	sp, #8
10053b1a:	bd80      	pop	{r7, pc}
10053b1c:	200000dc 	.word	0x200000dc

10053b20 <LL_RADIO_GetPacketCounterTx_39_32>:
  * @rmtoll WORD7          PCNTTX_39_32       LL_RADIO_GetPacketCounterTx_39_32
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterTx_39_32(uint8_t stateMachineNo)
{
10053b20:	b580      	push	{r7, lr}
10053b22:	b082      	sub	sp, #8
10053b24:	af00      	add	r7, sp, #0
10053b26:	0002      	movs	r2, r0
10053b28:	1dfb      	adds	r3, r7, #7
10053b2a:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD7,
10053b2c:	1dfb      	adds	r3, r7, #7
10053b2e:	781b      	ldrb	r3, [r3, #0]
10053b30:	225c      	movs	r2, #92	@ 0x5c
10053b32:	4353      	muls	r3, r2
10053b34:	4a04      	ldr	r2, [pc, #16]	@ (10053b48 <LL_RADIO_GetPacketCounterTx_39_32+0x28>)
10053b36:	4694      	mov	ip, r2
10053b38:	4463      	add	r3, ip
10053b3a:	69db      	ldr	r3, [r3, #28]
10053b3c:	22ff      	movs	r2, #255	@ 0xff
10053b3e:	4013      	ands	r3, r2
                             STATEMACH_WORD7_PCNTTX_39_32) >> STATEMACH_WORD7_PCNTTX_39_32_Pos);
}
10053b40:	0018      	movs	r0, r3
10053b42:	46bd      	mov	sp, r7
10053b44:	b002      	add	sp, #8
10053b46:	bd80      	pop	{r7, pc}
10053b48:	200000dc 	.word	0x200000dc

10053b4c <LL_RADIO_SetPacketCounterRx_23_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterRx_23_0(uint8_t stateMachineNo, uint32_t value)
{
10053b4c:	b580      	push	{r7, lr}
10053b4e:	b082      	sub	sp, #8
10053b50:	af00      	add	r7, sp, #0
10053b52:	0002      	movs	r2, r0
10053b54:	6039      	str	r1, [r7, #0]
10053b56:	1dfb      	adds	r3, r7, #7
10053b58:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD7, STATEMACH_WORD7_PCNTRCV_23_0, value);
10053b5a:	1dfb      	adds	r3, r7, #7
10053b5c:	781b      	ldrb	r3, [r3, #0]
10053b5e:	225c      	movs	r2, #92	@ 0x5c
10053b60:	4353      	muls	r3, r2
10053b62:	4a0b      	ldr	r2, [pc, #44]	@ (10053b90 <LL_RADIO_SetPacketCounterRx_23_0+0x44>)
10053b64:	4694      	mov	ip, r2
10053b66:	4463      	add	r3, ip
10053b68:	69db      	ldr	r3, [r3, #28]
10053b6a:	22ff      	movs	r2, #255	@ 0xff
10053b6c:	4013      	ands	r3, r2
10053b6e:	0019      	movs	r1, r3
10053b70:	683b      	ldr	r3, [r7, #0]
10053b72:	021a      	lsls	r2, r3, #8
10053b74:	1dfb      	adds	r3, r7, #7
10053b76:	781b      	ldrb	r3, [r3, #0]
10053b78:	205c      	movs	r0, #92	@ 0x5c
10053b7a:	4343      	muls	r3, r0
10053b7c:	4804      	ldr	r0, [pc, #16]	@ (10053b90 <LL_RADIO_SetPacketCounterRx_23_0+0x44>)
10053b7e:	4684      	mov	ip, r0
10053b80:	4463      	add	r3, ip
10053b82:	430a      	orrs	r2, r1
10053b84:	61da      	str	r2, [r3, #28]
}
10053b86:	46c0      	nop			@ (mov r8, r8)
10053b88:	46bd      	mov	sp, r7
10053b8a:	b002      	add	sp, #8
10053b8c:	bd80      	pop	{r7, pc}
10053b8e:	46c0      	nop			@ (mov r8, r8)
10053b90:	200000dc 	.word	0x200000dc

10053b94 <LL_RADIO_GetPacketCounterRx_23_0>:
  * @rmtoll WORD7          PCNTRCV_23_0       LL_RADIO_GetPacketCounterRx_23_0
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterRx_23_0(uint8_t stateMachineNo)
{
10053b94:	b580      	push	{r7, lr}
10053b96:	b082      	sub	sp, #8
10053b98:	af00      	add	r7, sp, #0
10053b9a:	0002      	movs	r2, r0
10053b9c:	1dfb      	adds	r3, r7, #7
10053b9e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD7,
10053ba0:	1dfb      	adds	r3, r7, #7
10053ba2:	781b      	ldrb	r3, [r3, #0]
10053ba4:	225c      	movs	r2, #92	@ 0x5c
10053ba6:	4353      	muls	r3, r2
10053ba8:	4a05      	ldr	r2, [pc, #20]	@ (10053bc0 <LL_RADIO_GetPacketCounterRx_23_0+0x2c>)
10053baa:	4694      	mov	ip, r2
10053bac:	4463      	add	r3, ip
10053bae:	69db      	ldr	r3, [r3, #28]
10053bb0:	0a1b      	lsrs	r3, r3, #8
10053bb2:	021b      	lsls	r3, r3, #8
10053bb4:	0a1b      	lsrs	r3, r3, #8
                             STATEMACH_WORD7_PCNTRCV_23_0) >> STATEMACH_WORD7_PCNTRCV_23_0_Pos);
}
10053bb6:	0018      	movs	r0, r3
10053bb8:	46bd      	mov	sp, r7
10053bba:	b002      	add	sp, #8
10053bbc:	bd80      	pop	{r7, pc}
10053bbe:	46c0      	nop			@ (mov r8, r8)
10053bc0:	200000dc 	.word	0x200000dc

10053bc4 <LL_RADIO_SetPacketCounterRx_39_24>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterRx_39_24(uint8_t stateMachineNo, uint32_t value)
{
10053bc4:	b580      	push	{r7, lr}
10053bc6:	b082      	sub	sp, #8
10053bc8:	af00      	add	r7, sp, #0
10053bca:	0002      	movs	r2, r0
10053bcc:	6039      	str	r1, [r7, #0]
10053bce:	1dfb      	adds	r3, r7, #7
10053bd0:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_PCNTRCV_39_24, value);
10053bd2:	1dfb      	adds	r3, r7, #7
10053bd4:	781b      	ldrb	r3, [r3, #0]
10053bd6:	225c      	movs	r2, #92	@ 0x5c
10053bd8:	4353      	muls	r3, r2
10053bda:	4a0b      	ldr	r2, [pc, #44]	@ (10053c08 <LL_RADIO_SetPacketCounterRx_39_24+0x44>)
10053bdc:	4694      	mov	ip, r2
10053bde:	4463      	add	r3, ip
10053be0:	6a1b      	ldr	r3, [r3, #32]
10053be2:	0c1b      	lsrs	r3, r3, #16
10053be4:	0419      	lsls	r1, r3, #16
10053be6:	683b      	ldr	r3, [r7, #0]
10053be8:	041b      	lsls	r3, r3, #16
10053bea:	0c1a      	lsrs	r2, r3, #16
10053bec:	1dfb      	adds	r3, r7, #7
10053bee:	781b      	ldrb	r3, [r3, #0]
10053bf0:	205c      	movs	r0, #92	@ 0x5c
10053bf2:	4343      	muls	r3, r0
10053bf4:	4804      	ldr	r0, [pc, #16]	@ (10053c08 <LL_RADIO_SetPacketCounterRx_39_24+0x44>)
10053bf6:	4684      	mov	ip, r0
10053bf8:	4463      	add	r3, ip
10053bfa:	430a      	orrs	r2, r1
10053bfc:	621a      	str	r2, [r3, #32]
}
10053bfe:	46c0      	nop			@ (mov r8, r8)
10053c00:	46bd      	mov	sp, r7
10053c02:	b002      	add	sp, #8
10053c04:	bd80      	pop	{r7, pc}
10053c06:	46c0      	nop			@ (mov r8, r8)
10053c08:	200000dc 	.word	0x200000dc

10053c0c <LL_RADIO_GetPacketCounterRx_39_24>:
  * @rmtoll WORD8          PCNTRCV_39_24       LL_RADIO_GetPacketCounterRx_39_24
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterRx_39_24(uint8_t stateMachineNo)
{
10053c0c:	b580      	push	{r7, lr}
10053c0e:	b082      	sub	sp, #8
10053c10:	af00      	add	r7, sp, #0
10053c12:	0002      	movs	r2, r0
10053c14:	1dfb      	adds	r3, r7, #7
10053c16:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD8,
10053c18:	1dfb      	adds	r3, r7, #7
10053c1a:	781b      	ldrb	r3, [r3, #0]
10053c1c:	225c      	movs	r2, #92	@ 0x5c
10053c1e:	4353      	muls	r3, r2
10053c20:	4a04      	ldr	r2, [pc, #16]	@ (10053c34 <LL_RADIO_GetPacketCounterRx_39_24+0x28>)
10053c22:	4694      	mov	ip, r2
10053c24:	4463      	add	r3, ip
10053c26:	6a1b      	ldr	r3, [r3, #32]
10053c28:	041b      	lsls	r3, r3, #16
10053c2a:	0c1b      	lsrs	r3, r3, #16
                             STATEMACH_WORD8_PCNTRCV_39_24) >> STATEMACH_WORD8_PCNTRCV_39_24_Pos);
}
10053c2c:	0018      	movs	r0, r3
10053c2e:	46bd      	mov	sp, r7
10053c30:	b002      	add	sp, #8
10053c32:	bd80      	pop	{r7, pc}
10053c34:	200000dc 	.word	0x200000dc

10053c38 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable>:
  * @rmtoll WORD8          INTENCERROR            LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable(uint8_t stateMachineNo)
{
10053c38:	b580      	push	{r7, lr}
10053c3a:	b082      	sub	sp, #8
10053c3c:	af00      	add	r7, sp, #0
10053c3e:	0002      	movs	r2, r0
10053c40:	1dfb      	adds	r3, r7, #7
10053c42:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_INTENCERROR);
10053c44:	1dfb      	adds	r3, r7, #7
10053c46:	781b      	ldrb	r3, [r3, #0]
10053c48:	225c      	movs	r2, #92	@ 0x5c
10053c4a:	4353      	muls	r3, r2
10053c4c:	4a09      	ldr	r2, [pc, #36]	@ (10053c74 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable+0x3c>)
10053c4e:	4694      	mov	ip, r2
10053c50:	4463      	add	r3, ip
10053c52:	6a1a      	ldr	r2, [r3, #32]
10053c54:	1dfb      	adds	r3, r7, #7
10053c56:	781b      	ldrb	r3, [r3, #0]
10053c58:	215c      	movs	r1, #92	@ 0x5c
10053c5a:	434b      	muls	r3, r1
10053c5c:	4905      	ldr	r1, [pc, #20]	@ (10053c74 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable+0x3c>)
10053c5e:	468c      	mov	ip, r1
10053c60:	4463      	add	r3, ip
10053c62:	2180      	movs	r1, #128	@ 0x80
10053c64:	0589      	lsls	r1, r1, #22
10053c66:	430a      	orrs	r2, r1
10053c68:	621a      	str	r2, [r3, #32]
}
10053c6a:	46c0      	nop			@ (mov r8, r8)
10053c6c:	46bd      	mov	sp, r7
10053c6e:	b002      	add	sp, #8
10053c70:	bd80      	pop	{r7, pc}
10053c72:	46c0      	nop			@ (mov r8, r8)
10053c74:	200000dc 	.word	0x200000dc

10053c78 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable>:
  * @rmtoll WORD8          INTENCERROR            LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable(uint8_t stateMachineNo)
{
10053c78:	b580      	push	{r7, lr}
10053c7a:	b082      	sub	sp, #8
10053c7c:	af00      	add	r7, sp, #0
10053c7e:	0002      	movs	r2, r0
10053c80:	1dfb      	adds	r3, r7, #7
10053c82:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_INTENCERROR);
10053c84:	1dfb      	adds	r3, r7, #7
10053c86:	781b      	ldrb	r3, [r3, #0]
10053c88:	225c      	movs	r2, #92	@ 0x5c
10053c8a:	4353      	muls	r3, r2
10053c8c:	4a08      	ldr	r2, [pc, #32]	@ (10053cb0 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x38>)
10053c8e:	4694      	mov	ip, r2
10053c90:	4463      	add	r3, ip
10053c92:	6a1a      	ldr	r2, [r3, #32]
10053c94:	1dfb      	adds	r3, r7, #7
10053c96:	781b      	ldrb	r3, [r3, #0]
10053c98:	215c      	movs	r1, #92	@ 0x5c
10053c9a:	434b      	muls	r3, r1
10053c9c:	4904      	ldr	r1, [pc, #16]	@ (10053cb0 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x38>)
10053c9e:	468c      	mov	ip, r1
10053ca0:	4463      	add	r3, ip
10053ca2:	4904      	ldr	r1, [pc, #16]	@ (10053cb4 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x3c>)
10053ca4:	400a      	ands	r2, r1
10053ca6:	621a      	str	r2, [r3, #32]
}
10053ca8:	46c0      	nop			@ (mov r8, r8)
10053caa:	46bd      	mov	sp, r7
10053cac:	b002      	add	sp, #8
10053cae:	bd80      	pop	{r7, pc}
10053cb0:	200000dc 	.word	0x200000dc
10053cb4:	dfffffff 	.word	0xdfffffff

10053cb8 <LL_RADIO_SetAccessAddress>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAccessAddress(uint8_t stateMachineNo, uint32_t value)
{
10053cb8:	b580      	push	{r7, lr}
10053cba:	b082      	sub	sp, #8
10053cbc:	af00      	add	r7, sp, #0
10053cbe:	0002      	movs	r2, r0
10053cc0:	6039      	str	r1, [r7, #0]
10053cc2:	1dfb      	adds	r3, r7, #7
10053cc4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD9, STATEMACH_WORD9_ACCADDR, value);
10053cc6:	1dfb      	adds	r3, r7, #7
10053cc8:	781b      	ldrb	r3, [r3, #0]
10053cca:	225c      	movs	r2, #92	@ 0x5c
10053ccc:	4353      	muls	r3, r2
10053cce:	4a08      	ldr	r2, [pc, #32]	@ (10053cf0 <LL_RADIO_SetAccessAddress+0x38>)
10053cd0:	4694      	mov	ip, r2
10053cd2:	4463      	add	r3, ip
10053cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10053cd6:	1dfb      	adds	r3, r7, #7
10053cd8:	781b      	ldrb	r3, [r3, #0]
10053cda:	225c      	movs	r2, #92	@ 0x5c
10053cdc:	4353      	muls	r3, r2
10053cde:	4a04      	ldr	r2, [pc, #16]	@ (10053cf0 <LL_RADIO_SetAccessAddress+0x38>)
10053ce0:	4694      	mov	ip, r2
10053ce2:	4463      	add	r3, ip
10053ce4:	683a      	ldr	r2, [r7, #0]
10053ce6:	625a      	str	r2, [r3, #36]	@ 0x24
}
10053ce8:	46c0      	nop			@ (mov r8, r8)
10053cea:	46bd      	mov	sp, r7
10053cec:	b002      	add	sp, #8
10053cee:	bd80      	pop	{r7, pc}
10053cf0:	200000dc 	.word	0x200000dc

10053cf4 <LL_RADIO_GetAccessAddress>:
  * @rmtoll WORD9          ACCADDR       LL_RADIO_GetAccessAddress
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetAccessAddress(uint8_t stateMachineNo)
{
10053cf4:	b580      	push	{r7, lr}
10053cf6:	b082      	sub	sp, #8
10053cf8:	af00      	add	r7, sp, #0
10053cfa:	0002      	movs	r2, r0
10053cfc:	1dfb      	adds	r3, r7, #7
10053cfe:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD9,
10053d00:	1dfb      	adds	r3, r7, #7
10053d02:	781b      	ldrb	r3, [r3, #0]
10053d04:	225c      	movs	r2, #92	@ 0x5c
10053d06:	4353      	muls	r3, r2
10053d08:	4a03      	ldr	r2, [pc, #12]	@ (10053d18 <LL_RADIO_GetAccessAddress+0x24>)
10053d0a:	4694      	mov	ip, r2
10053d0c:	4463      	add	r3, ip
10053d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                             STATEMACH_WORD9_ACCADDR) >> STATEMACH_WORD9_ACCADDR_Pos);
}
10053d10:	0018      	movs	r0, r3
10053d12:	46bd      	mov	sp, r7
10053d14:	b002      	add	sp, #8
10053d16:	bd80      	pop	{r7, pc}
10053d18:	200000dc 	.word	0x200000dc

10053d1c <LL_RADIO_SetCRCInitializationValue>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationValue(uint8_t stateMachineNo, uint32_t value)
{
10053d1c:	b580      	push	{r7, lr}
10053d1e:	b082      	sub	sp, #8
10053d20:	af00      	add	r7, sp, #0
10053d22:	0002      	movs	r2, r0
10053d24:	6039      	str	r1, [r7, #0]
10053d26:	1dfb      	adds	r3, r7, #7
10053d28:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_CRCINIT, value);
10053d2a:	1dfb      	adds	r3, r7, #7
10053d2c:	781b      	ldrb	r3, [r3, #0]
10053d2e:	225c      	movs	r2, #92	@ 0x5c
10053d30:	4353      	muls	r3, r2
10053d32:	4a0b      	ldr	r2, [pc, #44]	@ (10053d60 <LL_RADIO_SetCRCInitializationValue+0x44>)
10053d34:	4694      	mov	ip, r2
10053d36:	4463      	add	r3, ip
10053d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10053d3a:	0e1b      	lsrs	r3, r3, #24
10053d3c:	0619      	lsls	r1, r3, #24
10053d3e:	683b      	ldr	r3, [r7, #0]
10053d40:	021b      	lsls	r3, r3, #8
10053d42:	0a1a      	lsrs	r2, r3, #8
10053d44:	1dfb      	adds	r3, r7, #7
10053d46:	781b      	ldrb	r3, [r3, #0]
10053d48:	205c      	movs	r0, #92	@ 0x5c
10053d4a:	4343      	muls	r3, r0
10053d4c:	4804      	ldr	r0, [pc, #16]	@ (10053d60 <LL_RADIO_SetCRCInitializationValue+0x44>)
10053d4e:	4684      	mov	ip, r0
10053d50:	4463      	add	r3, ip
10053d52:	430a      	orrs	r2, r1
10053d54:	629a      	str	r2, [r3, #40]	@ 0x28
}
10053d56:	46c0      	nop			@ (mov r8, r8)
10053d58:	46bd      	mov	sp, r7
10053d5a:	b002      	add	sp, #8
10053d5c:	bd80      	pop	{r7, pc}
10053d5e:	46c0      	nop			@ (mov r8, r8)
10053d60:	200000dc 	.word	0x200000dc

10053d64 <LL_RADIO_SetMaximumReceiveLength>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetMaximumReceiveLength(uint8_t stateMachineNo, uint32_t value)
{
10053d64:	b580      	push	{r7, lr}
10053d66:	b082      	sub	sp, #8
10053d68:	af00      	add	r7, sp, #0
10053d6a:	0002      	movs	r2, r0
10053d6c:	6039      	str	r1, [r7, #0]
10053d6e:	1dfb      	adds	r3, r7, #7
10053d70:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_MAXRECEIVEDLENGTH, value);
10053d72:	1dfb      	adds	r3, r7, #7
10053d74:	781b      	ldrb	r3, [r3, #0]
10053d76:	225c      	movs	r2, #92	@ 0x5c
10053d78:	4353      	muls	r3, r2
10053d7a:	4a0a      	ldr	r2, [pc, #40]	@ (10053da4 <LL_RADIO_SetMaximumReceiveLength+0x40>)
10053d7c:	4694      	mov	ip, r2
10053d7e:	4463      	add	r3, ip
10053d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10053d82:	021b      	lsls	r3, r3, #8
10053d84:	0a19      	lsrs	r1, r3, #8
10053d86:	683b      	ldr	r3, [r7, #0]
10053d88:	061a      	lsls	r2, r3, #24
10053d8a:	1dfb      	adds	r3, r7, #7
10053d8c:	781b      	ldrb	r3, [r3, #0]
10053d8e:	205c      	movs	r0, #92	@ 0x5c
10053d90:	4343      	muls	r3, r0
10053d92:	4804      	ldr	r0, [pc, #16]	@ (10053da4 <LL_RADIO_SetMaximumReceiveLength+0x40>)
10053d94:	4684      	mov	ip, r0
10053d96:	4463      	add	r3, ip
10053d98:	430a      	orrs	r2, r1
10053d9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
10053d9c:	46c0      	nop			@ (mov r8, r8)
10053d9e:	46bd      	mov	sp, r7
10053da0:	b002      	add	sp, #8
10053da2:	bd80      	pop	{r7, pc}
10053da4:	200000dc 	.word	0x200000dc

10053da8 <LL_RADIO_SetPAPower>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPAPower(uint8_t stateMachineNo, uint32_t value)
{
10053da8:	b580      	push	{r7, lr}
10053daa:	b082      	sub	sp, #8
10053dac:	af00      	add	r7, sp, #0
10053dae:	0002      	movs	r2, r0
10053db0:	6039      	str	r1, [r7, #0]
10053db2:	1dfb      	adds	r3, r7, #7
10053db4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_PAPOWER, value);
10053db6:	1dfb      	adds	r3, r7, #7
10053db8:	781b      	ldrb	r3, [r3, #0]
10053dba:	225c      	movs	r2, #92	@ 0x5c
10053dbc:	4353      	muls	r3, r2
10053dbe:	4a0b      	ldr	r2, [pc, #44]	@ (10053dec <LL_RADIO_SetPAPower+0x44>)
10053dc0:	4694      	mov	ip, r2
10053dc2:	4463      	add	r3, ip
10053dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10053dc6:	221f      	movs	r2, #31
10053dc8:	4393      	bics	r3, r2
10053dca:	0019      	movs	r1, r3
10053dcc:	683b      	ldr	r3, [r7, #0]
10053dce:	221f      	movs	r2, #31
10053dd0:	401a      	ands	r2, r3
10053dd2:	1dfb      	adds	r3, r7, #7
10053dd4:	781b      	ldrb	r3, [r3, #0]
10053dd6:	205c      	movs	r0, #92	@ 0x5c
10053dd8:	4343      	muls	r3, r0
10053dda:	4804      	ldr	r0, [pc, #16]	@ (10053dec <LL_RADIO_SetPAPower+0x44>)
10053ddc:	4684      	mov	ip, r0
10053dde:	4463      	add	r3, ip
10053de0:	430a      	orrs	r2, r1
10053de2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10053de4:	46c0      	nop			@ (mov r8, r8)
10053de6:	46bd      	mov	sp, r7
10053de8:	b002      	add	sp, #8
10053dea:	bd80      	pop	{r7, pc}
10053dec:	200000dc 	.word	0x200000dc

10053df0 <LL_RADIO_GetPAPower>:
  * @rmtoll WORDB          PAPOWER       LL_RADIO_GetPAPower
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPAPower(uint8_t stateMachineNo)
{
10053df0:	b580      	push	{r7, lr}
10053df2:	b082      	sub	sp, #8
10053df4:	af00      	add	r7, sp, #0
10053df6:	0002      	movs	r2, r0
10053df8:	1dfb      	adds	r3, r7, #7
10053dfa:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
10053dfc:	1dfb      	adds	r3, r7, #7
10053dfe:	781b      	ldrb	r3, [r3, #0]
10053e00:	225c      	movs	r2, #92	@ 0x5c
10053e02:	4353      	muls	r3, r2
10053e04:	4a04      	ldr	r2, [pc, #16]	@ (10053e18 <LL_RADIO_GetPAPower+0x28>)
10053e06:	4694      	mov	ip, r2
10053e08:	4463      	add	r3, ip
10053e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10053e0c:	221f      	movs	r2, #31
10053e0e:	4013      	ands	r3, r2
                             STATEMACH_WORDB_PAPOWER) >> STATEMACH_WORDB_PAPOWER_Pos);
}
10053e10:	0018      	movs	r0, r3
10053e12:	46bd      	mov	sp, r7
10053e14:	b002      	add	sp, #8
10053e16:	bd80      	pop	{r7, pc}
10053e18:	200000dc 	.word	0x200000dc

10053e1c <LL_RADIO_SetHopIncrement>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetHopIncrement(uint8_t stateMachineNo, uint32_t value)
{
10053e1c:	b580      	push	{r7, lr}
10053e1e:	b082      	sub	sp, #8
10053e20:	af00      	add	r7, sp, #0
10053e22:	0002      	movs	r2, r0
10053e24:	6039      	str	r1, [r7, #0]
10053e26:	1dfb      	adds	r3, r7, #7
10053e28:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_HOPINCR, value);
10053e2a:	1dfb      	adds	r3, r7, #7
10053e2c:	781b      	ldrb	r3, [r3, #0]
10053e2e:	225c      	movs	r2, #92	@ 0x5c
10053e30:	4353      	muls	r3, r2
10053e32:	4a0c      	ldr	r2, [pc, #48]	@ (10053e64 <LL_RADIO_SetHopIncrement+0x48>)
10053e34:	4694      	mov	ip, r2
10053e36:	4463      	add	r3, ip
10053e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10053e3a:	4a0b      	ldr	r2, [pc, #44]	@ (10053e68 <LL_RADIO_SetHopIncrement+0x4c>)
10053e3c:	4013      	ands	r3, r2
10053e3e:	0019      	movs	r1, r3
10053e40:	683b      	ldr	r3, [r7, #0]
10053e42:	021a      	lsls	r2, r3, #8
10053e44:	23fc      	movs	r3, #252	@ 0xfc
10053e46:	019b      	lsls	r3, r3, #6
10053e48:	401a      	ands	r2, r3
10053e4a:	1dfb      	adds	r3, r7, #7
10053e4c:	781b      	ldrb	r3, [r3, #0]
10053e4e:	205c      	movs	r0, #92	@ 0x5c
10053e50:	4343      	muls	r3, r0
10053e52:	4804      	ldr	r0, [pc, #16]	@ (10053e64 <LL_RADIO_SetHopIncrement+0x48>)
10053e54:	4684      	mov	ip, r0
10053e56:	4463      	add	r3, ip
10053e58:	430a      	orrs	r2, r1
10053e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10053e5c:	46c0      	nop			@ (mov r8, r8)
10053e5e:	46bd      	mov	sp, r7
10053e60:	b002      	add	sp, #8
10053e62:	bd80      	pop	{r7, pc}
10053e64:	200000dc 	.word	0x200000dc
10053e68:	ffffc0ff 	.word	0xffffc0ff

10053e6c <LL_RADIO_GetHopIncrement>:
  * @rmtoll WORDB          HOPINCR       LL_RADIO_GetHopIncrement
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetHopIncrement(uint8_t stateMachineNo)
{
10053e6c:	b580      	push	{r7, lr}
10053e6e:	b082      	sub	sp, #8
10053e70:	af00      	add	r7, sp, #0
10053e72:	0002      	movs	r2, r0
10053e74:	1dfb      	adds	r3, r7, #7
10053e76:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
10053e78:	1dfb      	adds	r3, r7, #7
10053e7a:	781b      	ldrb	r3, [r3, #0]
10053e7c:	225c      	movs	r2, #92	@ 0x5c
10053e7e:	4353      	muls	r3, r2
10053e80:	4a05      	ldr	r2, [pc, #20]	@ (10053e98 <LL_RADIO_GetHopIncrement+0x2c>)
10053e82:	4694      	mov	ip, r2
10053e84:	4463      	add	r3, ip
10053e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10053e88:	0a1b      	lsrs	r3, r3, #8
10053e8a:	223f      	movs	r2, #63	@ 0x3f
10053e8c:	4013      	ands	r3, r2
                             STATEMACH_WORDB_HOPINCR) >> STATEMACH_WORDB_HOPINCR_Pos);
}
10053e8e:	0018      	movs	r0, r3
10053e90:	46bd      	mov	sp, r7
10053e92:	b002      	add	sp, #8
10053e94:	bd80      	pop	{r7, pc}
10053e96:	46c0      	nop			@ (mov r8, r8)
10053e98:	200000dc 	.word	0x200000dc

10053e9c <LL_RADIO_SetUsedChannelFlags_15_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUsedChannelFlags_15_0(uint8_t stateMachineNo, uint32_t value)
{
10053e9c:	b580      	push	{r7, lr}
10053e9e:	b082      	sub	sp, #8
10053ea0:	af00      	add	r7, sp, #0
10053ea2:	0002      	movs	r2, r0
10053ea4:	6039      	str	r1, [r7, #0]
10053ea6:	1dfb      	adds	r3, r7, #7
10053ea8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_USEDCHANNELFLAGS_15_0, value);
10053eaa:	1dfb      	adds	r3, r7, #7
10053eac:	781b      	ldrb	r3, [r3, #0]
10053eae:	225c      	movs	r2, #92	@ 0x5c
10053eb0:	4353      	muls	r3, r2
10053eb2:	4a0a      	ldr	r2, [pc, #40]	@ (10053edc <LL_RADIO_SetUsedChannelFlags_15_0+0x40>)
10053eb4:	4694      	mov	ip, r2
10053eb6:	4463      	add	r3, ip
10053eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10053eba:	041b      	lsls	r3, r3, #16
10053ebc:	0c19      	lsrs	r1, r3, #16
10053ebe:	683b      	ldr	r3, [r7, #0]
10053ec0:	041a      	lsls	r2, r3, #16
10053ec2:	1dfb      	adds	r3, r7, #7
10053ec4:	781b      	ldrb	r3, [r3, #0]
10053ec6:	205c      	movs	r0, #92	@ 0x5c
10053ec8:	4343      	muls	r3, r0
10053eca:	4804      	ldr	r0, [pc, #16]	@ (10053edc <LL_RADIO_SetUsedChannelFlags_15_0+0x40>)
10053ecc:	4684      	mov	ip, r0
10053ece:	4463      	add	r3, ip
10053ed0:	430a      	orrs	r2, r1
10053ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10053ed4:	46c0      	nop			@ (mov r8, r8)
10053ed6:	46bd      	mov	sp, r7
10053ed8:	b002      	add	sp, #8
10053eda:	bd80      	pop	{r7, pc}
10053edc:	200000dc 	.word	0x200000dc

10053ee0 <LL_RADIO_GetUsedChannelFlags_15_0>:
  * @rmtoll WORDB          USEDCHANNELFLAGS_15_0       LL_RADIO_GetUsedChannelFlags_15_0
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetUsedChannelFlags_15_0(uint8_t stateMachineNo)
{
10053ee0:	b580      	push	{r7, lr}
10053ee2:	b082      	sub	sp, #8
10053ee4:	af00      	add	r7, sp, #0
10053ee6:	0002      	movs	r2, r0
10053ee8:	1dfb      	adds	r3, r7, #7
10053eea:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
10053eec:	1dfb      	adds	r3, r7, #7
10053eee:	781b      	ldrb	r3, [r3, #0]
10053ef0:	225c      	movs	r2, #92	@ 0x5c
10053ef2:	4353      	muls	r3, r2
10053ef4:	4a05      	ldr	r2, [pc, #20]	@ (10053f0c <LL_RADIO_GetUsedChannelFlags_15_0+0x2c>)
10053ef6:	4694      	mov	ip, r2
10053ef8:	4463      	add	r3, ip
10053efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10053efc:	0c1b      	lsrs	r3, r3, #16
10053efe:	041b      	lsls	r3, r3, #16
10053f00:	0c1b      	lsrs	r3, r3, #16
                             STATEMACH_WORDB_USEDCHANNELFLAGS_15_0) >> STATEMACH_WORDB_USEDCHANNELFLAGS_15_0_Pos);
}
10053f02:	0018      	movs	r0, r3
10053f04:	46bd      	mov	sp, r7
10053f06:	b002      	add	sp, #8
10053f08:	bd80      	pop	{r7, pc}
10053f0a:	46c0      	nop			@ (mov r8, r8)
10053f0c:	200000dc 	.word	0x200000dc

10053f10 <LL_RADIO_SetUsedChannelFlags_36_16>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUsedChannelFlags_36_16(uint8_t stateMachineNo, uint32_t value)
{
10053f10:	b580      	push	{r7, lr}
10053f12:	b082      	sub	sp, #8
10053f14:	af00      	add	r7, sp, #0
10053f16:	0002      	movs	r2, r0
10053f18:	6039      	str	r1, [r7, #0]
10053f1a:	1dfb      	adds	r3, r7, #7
10053f1c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDC, STATEMACH_WORDC_USEDCHANNELFLAGS_36_16, value);
10053f1e:	1dfb      	adds	r3, r7, #7
10053f20:	781b      	ldrb	r3, [r3, #0]
10053f22:	225c      	movs	r2, #92	@ 0x5c
10053f24:	4353      	muls	r3, r2
10053f26:	4a0b      	ldr	r2, [pc, #44]	@ (10053f54 <LL_RADIO_SetUsedChannelFlags_36_16+0x44>)
10053f28:	4694      	mov	ip, r2
10053f2a:	4463      	add	r3, ip
10053f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10053f2e:	0d9b      	lsrs	r3, r3, #22
10053f30:	0599      	lsls	r1, r3, #22
10053f32:	683b      	ldr	r3, [r7, #0]
10053f34:	029b      	lsls	r3, r3, #10
10053f36:	0a9a      	lsrs	r2, r3, #10
10053f38:	1dfb      	adds	r3, r7, #7
10053f3a:	781b      	ldrb	r3, [r3, #0]
10053f3c:	205c      	movs	r0, #92	@ 0x5c
10053f3e:	4343      	muls	r3, r0
10053f40:	4804      	ldr	r0, [pc, #16]	@ (10053f54 <LL_RADIO_SetUsedChannelFlags_36_16+0x44>)
10053f42:	4684      	mov	ip, r0
10053f44:	4463      	add	r3, ip
10053f46:	430a      	orrs	r2, r1
10053f48:	631a      	str	r2, [r3, #48]	@ 0x30
}
10053f4a:	46c0      	nop			@ (mov r8, r8)
10053f4c:	46bd      	mov	sp, r7
10053f4e:	b002      	add	sp, #8
10053f50:	bd80      	pop	{r7, pc}
10053f52:	46c0      	nop			@ (mov r8, r8)
10053f54:	200000dc 	.word	0x200000dc

10053f58 <LL_RADIO_GetUsedChannelFlags_36_16>:
  * @rmtoll WORDC          USEDCHANNELFLAGS_36_16       LL_RADIO_GetUsedChannelFlags_36_16
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetUsedChannelFlags_36_16(uint8_t stateMachineNo)
{
10053f58:	b580      	push	{r7, lr}
10053f5a:	b082      	sub	sp, #8
10053f5c:	af00      	add	r7, sp, #0
10053f5e:	0002      	movs	r2, r0
10053f60:	1dfb      	adds	r3, r7, #7
10053f62:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDC,
10053f64:	1dfb      	adds	r3, r7, #7
10053f66:	781b      	ldrb	r3, [r3, #0]
10053f68:	225c      	movs	r2, #92	@ 0x5c
10053f6a:	4353      	muls	r3, r2
10053f6c:	4a04      	ldr	r2, [pc, #16]	@ (10053f80 <LL_RADIO_GetUsedChannelFlags_36_16+0x28>)
10053f6e:	4694      	mov	ip, r2
10053f70:	4463      	add	r3, ip
10053f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10053f74:	029b      	lsls	r3, r3, #10
10053f76:	0a9b      	lsrs	r3, r3, #10
                             STATEMACH_WORDC_USEDCHANNELFLAGS_36_16) >> STATEMACH_WORDC_USEDCHANNELFLAGS_36_16_Pos);
}
10053f78:	0018      	movs	r0, r3
10053f7a:	46bd      	mov	sp, r7
10053f7c:	b002      	add	sp, #8
10053f7e:	bd80      	pop	{r7, pc}
10053f80:	200000dc 	.word	0x200000dc

10053f84 <LL_RADIO_SetNextPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
10053f84:	b580      	push	{r7, lr}
10053f86:	b082      	sub	sp, #8
10053f88:	af00      	add	r7, sp, #0
10053f8a:	6078      	str	r0, [r7, #4]
10053f8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD0, TXRXPACK_WORD0_NEXTPTR, value);
10053f8e:	687b      	ldr	r3, [r7, #4]
10053f90:	681b      	ldr	r3, [r3, #0]
10053f92:	687b      	ldr	r3, [r7, #4]
10053f94:	683a      	ldr	r2, [r7, #0]
10053f96:	601a      	str	r2, [r3, #0]
}
10053f98:	46c0      	nop			@ (mov r8, r8)
10053f9a:	46bd      	mov	sp, r7
10053f9c:	b002      	add	sp, #8
10053f9e:	bd80      	pop	{r7, pc}

10053fa0 <LL_RADIO_SetCalibrationRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCalibrationRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
10053fa0:	b580      	push	{r7, lr}
10053fa2:	b082      	sub	sp, #8
10053fa4:	af00      	add	r7, sp, #0
10053fa6:	6078      	str	r0, [r7, #4]
10053fa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CALREQ, value);
10053faa:	687b      	ldr	r3, [r7, #4]
10053fac:	685b      	ldr	r3, [r3, #4]
10053fae:	2201      	movs	r2, #1
10053fb0:	4393      	bics	r3, r2
10053fb2:	001a      	movs	r2, r3
10053fb4:	683b      	ldr	r3, [r7, #0]
10053fb6:	2101      	movs	r1, #1
10053fb8:	400b      	ands	r3, r1
10053fba:	431a      	orrs	r2, r3
10053fbc:	687b      	ldr	r3, [r7, #4]
10053fbe:	605a      	str	r2, [r3, #4]
}
10053fc0:	46c0      	nop			@ (mov r8, r8)
10053fc2:	46bd      	mov	sp, r7
10053fc4:	b002      	add	sp, #8
10053fc6:	bd80      	pop	{r7, pc}

10053fc8 <LL_RADIO_SetKeepSemaRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetKeepSemaRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
10053fc8:	b580      	push	{r7, lr}
10053fca:	b082      	sub	sp, #8
10053fcc:	af00      	add	r7, sp, #0
10053fce:	6078      	str	r0, [r7, #4]
10053fd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_KEEPSEMAREQ, value);
10053fd2:	687b      	ldr	r3, [r7, #4]
10053fd4:	685b      	ldr	r3, [r3, #4]
10053fd6:	2204      	movs	r2, #4
10053fd8:	4393      	bics	r3, r2
10053fda:	001a      	movs	r2, r3
10053fdc:	683b      	ldr	r3, [r7, #0]
10053fde:	009b      	lsls	r3, r3, #2
10053fe0:	2104      	movs	r1, #4
10053fe2:	400b      	ands	r3, r1
10053fe4:	431a      	orrs	r2, r3
10053fe6:	687b      	ldr	r3, [r7, #4]
10053fe8:	605a      	str	r2, [r3, #4]
}
10053fea:	46c0      	nop			@ (mov r8, r8)
10053fec:	46bd      	mov	sp, r7
10053fee:	b002      	add	sp, #8
10053ff0:	bd80      	pop	{r7, pc}

10053ff2 <LL_RADIO_SetCTEAndSamplingEnable>:
  * @rmtoll WORD1          CTEANDSAMPLINGENABLE        LL_RADIO_SetCTEAndSamplingEnable
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCTEAndSamplingEnable(TXRXPACK_TypeDef *p, uint32_t value)
{
10053ff2:	b580      	push	{r7, lr}
10053ff4:	b082      	sub	sp, #8
10053ff6:	af00      	add	r7, sp, #0
10053ff8:	6078      	str	r0, [r7, #4]
10053ffa:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CTEANDSAMPLINGENABLE, value);
10053ffc:	687b      	ldr	r3, [r7, #4]
10053ffe:	685b      	ldr	r3, [r3, #4]
10054000:	2208      	movs	r2, #8
10054002:	4393      	bics	r3, r2
10054004:	001a      	movs	r2, r3
10054006:	683b      	ldr	r3, [r7, #0]
10054008:	00db      	lsls	r3, r3, #3
1005400a:	2108      	movs	r1, #8
1005400c:	400b      	ands	r3, r1
1005400e:	431a      	orrs	r2, r3
10054010:	687b      	ldr	r3, [r7, #4]
10054012:	605a      	str	r2, [r3, #4]
}
10054014:	46c0      	nop			@ (mov r8, r8)
10054016:	46bd      	mov	sp, r7
10054018:	b002      	add	sp, #8
1005401a:	bd80      	pop	{r7, pc}

1005401c <LL_RADIO_SetCRCInitializationSelector>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationSelector(TXRXPACK_TypeDef *p, uint32_t value)
{
1005401c:	b580      	push	{r7, lr}
1005401e:	b082      	sub	sp, #8
10054020:	af00      	add	r7, sp, #0
10054022:	6078      	str	r0, [r7, #4]
10054024:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CRCINITSEL, value);
10054026:	687b      	ldr	r3, [r7, #4]
10054028:	685b      	ldr	r3, [r3, #4]
1005402a:	2210      	movs	r2, #16
1005402c:	4393      	bics	r3, r2
1005402e:	001a      	movs	r2, r3
10054030:	683b      	ldr	r3, [r7, #0]
10054032:	011b      	lsls	r3, r3, #4
10054034:	2110      	movs	r1, #16
10054036:	400b      	ands	r3, r1
10054038:	431a      	orrs	r2, r3
1005403a:	687b      	ldr	r3, [r7, #4]
1005403c:	605a      	str	r2, [r3, #4]
}
1005403e:	46c0      	nop			@ (mov r8, r8)
10054040:	46bd      	mov	sp, r7
10054042:	b002      	add	sp, #8
10054044:	bd80      	pop	{r7, pc}

10054046 <LL_RADIO_SetAdvertise>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAdvertise(TXRXPACK_TypeDef *p, uint32_t value)
{
10054046:	b580      	push	{r7, lr}
10054048:	b082      	sub	sp, #8
1005404a:	af00      	add	r7, sp, #0
1005404c:	6078      	str	r0, [r7, #4]
1005404e:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ADVERTISE, value);
10054050:	687b      	ldr	r3, [r7, #4]
10054052:	685b      	ldr	r3, [r3, #4]
10054054:	2220      	movs	r2, #32
10054056:	4393      	bics	r3, r2
10054058:	001a      	movs	r2, r3
1005405a:	683b      	ldr	r3, [r7, #0]
1005405c:	015b      	lsls	r3, r3, #5
1005405e:	2120      	movs	r1, #32
10054060:	400b      	ands	r3, r1
10054062:	431a      	orrs	r2, r3
10054064:	687b      	ldr	r3, [r7, #4]
10054066:	605a      	str	r2, [r3, #4]
}
10054068:	46c0      	nop			@ (mov r8, r8)
1005406a:	46bd      	mov	sp, r7
1005406c:	b002      	add	sp, #8
1005406e:	bd80      	pop	{r7, pc}

10054070 <LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable>:
  * @rmtoll WORD1          SN_EN            LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable(TXRXPACK_TypeDef *p)
{
10054070:	b580      	push	{r7, lr}
10054072:	b082      	sub	sp, #8
10054074:	af00      	add	r7, sp, #0
10054076:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_SN_EN);
10054078:	687b      	ldr	r3, [r7, #4]
1005407a:	685b      	ldr	r3, [r3, #4]
1005407c:	2240      	movs	r2, #64	@ 0x40
1005407e:	431a      	orrs	r2, r3
10054080:	687b      	ldr	r3, [r7, #4]
10054082:	605a      	str	r2, [r3, #4]
}
10054084:	46c0      	nop			@ (mov r8, r8)
10054086:	46bd      	mov	sp, r7
10054088:	b002      	add	sp, #8
1005408a:	bd80      	pop	{r7, pc}

1005408c <LL_RADIO_IncrementerChannel_Enable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Enable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Enable(TXRXPACK_TypeDef *p)
{
1005408c:	b580      	push	{r7, lr}
1005408e:	b082      	sub	sp, #8
10054090:	af00      	add	r7, sp, #0
10054092:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
10054094:	687b      	ldr	r3, [r7, #4]
10054096:	685b      	ldr	r3, [r3, #4]
10054098:	2280      	movs	r2, #128	@ 0x80
1005409a:	431a      	orrs	r2, r3
1005409c:	687b      	ldr	r3, [r7, #4]
1005409e:	605a      	str	r2, [r3, #4]
}
100540a0:	46c0      	nop			@ (mov r8, r8)
100540a2:	46bd      	mov	sp, r7
100540a4:	b002      	add	sp, #8
100540a6:	bd80      	pop	{r7, pc}

100540a8 <LL_RADIO_IncrementerChannel_Disable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Disable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Disable(TXRXPACK_TypeDef *p)
{
100540a8:	b580      	push	{r7, lr}
100540aa:	b082      	sub	sp, #8
100540ac:	af00      	add	r7, sp, #0
100540ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
100540b0:	687b      	ldr	r3, [r7, #4]
100540b2:	685b      	ldr	r3, [r3, #4]
100540b4:	2280      	movs	r2, #128	@ 0x80
100540b6:	4393      	bics	r3, r2
100540b8:	001a      	movs	r2, r3
100540ba:	687b      	ldr	r3, [r7, #4]
100540bc:	605a      	str	r2, [r3, #4]
}
100540be:	46c0      	nop			@ (mov r8, r8)
100540c0:	46bd      	mov	sp, r7
100540c2:	b002      	add	sp, #8
100540c4:	bd80      	pop	{r7, pc}
	...

100540c8 <LL_RADIO_SetNextTxMode>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextTxMode(TXRXPACK_TypeDef *p, uint32_t value)
{
100540c8:	b580      	push	{r7, lr}
100540ca:	b082      	sub	sp, #8
100540cc:	af00      	add	r7, sp, #0
100540ce:	6078      	str	r0, [r7, #4]
100540d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_NEXTTXMODE, value);
100540d2:	687b      	ldr	r3, [r7, #4]
100540d4:	685b      	ldr	r3, [r3, #4]
100540d6:	4a07      	ldr	r2, [pc, #28]	@ (100540f4 <LL_RADIO_SetNextTxMode+0x2c>)
100540d8:	401a      	ands	r2, r3
100540da:	683b      	ldr	r3, [r7, #0]
100540dc:	0219      	lsls	r1, r3, #8
100540de:	2380      	movs	r3, #128	@ 0x80
100540e0:	005b      	lsls	r3, r3, #1
100540e2:	400b      	ands	r3, r1
100540e4:	431a      	orrs	r2, r3
100540e6:	687b      	ldr	r3, [r7, #4]
100540e8:	605a      	str	r2, [r3, #4]
}
100540ea:	46c0      	nop			@ (mov r8, r8)
100540ec:	46bd      	mov	sp, r7
100540ee:	b002      	add	sp, #8
100540f0:	bd80      	pop	{r7, pc}
100540f2:	46c0      	nop			@ (mov r8, r8)
100540f4:	fffffeff 	.word	0xfffffeff

100540f8 <LL_RADIO_SetAllTableDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAllTableDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
100540f8:	b580      	push	{r7, lr}
100540fa:	b082      	sub	sp, #8
100540fc:	af00      	add	r7, sp, #0
100540fe:	6078      	str	r0, [r7, #4]
10054100:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ALLTABLEREADY, value);
10054102:	687b      	ldr	r3, [r7, #4]
10054104:	685b      	ldr	r3, [r3, #4]
10054106:	4a07      	ldr	r2, [pc, #28]	@ (10054124 <LL_RADIO_SetAllTableDataReady+0x2c>)
10054108:	401a      	ands	r2, r3
1005410a:	683b      	ldr	r3, [r7, #0]
1005410c:	0259      	lsls	r1, r3, #9
1005410e:	2380      	movs	r3, #128	@ 0x80
10054110:	009b      	lsls	r3, r3, #2
10054112:	400b      	ands	r3, r1
10054114:	431a      	orrs	r2, r3
10054116:	687b      	ldr	r3, [r7, #4]
10054118:	605a      	str	r2, [r3, #4]
}
1005411a:	46c0      	nop			@ (mov r8, r8)
1005411c:	46bd      	mov	sp, r7
1005411e:	b002      	add	sp, #8
10054120:	bd80      	pop	{r7, pc}
10054122:	46c0      	nop			@ (mov r8, r8)
10054124:	fffffdff 	.word	0xfffffdff

10054128 <LL_RADIO_SetTransmissionDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
10054128:	b580      	push	{r7, lr}
1005412a:	b082      	sub	sp, #8
1005412c:	af00      	add	r7, sp, #0
1005412e:	6078      	str	r0, [r7, #4]
10054130:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_TXDATAREADY, value);
10054132:	687b      	ldr	r3, [r7, #4]
10054134:	685b      	ldr	r3, [r3, #4]
10054136:	4a07      	ldr	r2, [pc, #28]	@ (10054154 <LL_RADIO_SetTransmissionDataReady+0x2c>)
10054138:	401a      	ands	r2, r3
1005413a:	683b      	ldr	r3, [r7, #0]
1005413c:	0299      	lsls	r1, r3, #10
1005413e:	2380      	movs	r3, #128	@ 0x80
10054140:	00db      	lsls	r3, r3, #3
10054142:	400b      	ands	r3, r1
10054144:	431a      	orrs	r2, r3
10054146:	687b      	ldr	r3, [r7, #4]
10054148:	605a      	str	r2, [r3, #4]
}
1005414a:	46c0      	nop			@ (mov r8, r8)
1005414c:	46bd      	mov	sp, r7
1005414e:	b002      	add	sp, #8
10054150:	bd80      	pop	{r7, pc}
10054152:	46c0      	nop			@ (mov r8, r8)
10054154:	fffffbff 	.word	0xfffffbff

10054158 <LL_RADIO_SetDataPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetDataPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
10054158:	b580      	push	{r7, lr}
1005415a:	b082      	sub	sp, #8
1005415c:	af00      	add	r7, sp, #0
1005415e:	6078      	str	r0, [r7, #4]
10054160:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR, value);
10054162:	687b      	ldr	r3, [r7, #4]
10054164:	689b      	ldr	r3, [r3, #8]
10054166:	687b      	ldr	r3, [r7, #4]
10054168:	683a      	ldr	r2, [r7, #0]
1005416a:	609a      	str	r2, [r3, #8]
}
1005416c:	46c0      	nop			@ (mov r8, r8)
1005416e:	46bd      	mov	sp, r7
10054170:	b002      	add	sp, #8
10054172:	bd80      	pop	{r7, pc}

10054174 <LL_RADIO_GetDataPointer>:
  * @rmtoll WORD2          DATAPTR       LL_RADIO_GetDataPointer
  * @param  p RADIO Instance
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetDataPointer(TXRXPACK_TypeDef *p)
{
10054174:	b580      	push	{r7, lr}
10054176:	b082      	sub	sp, #8
10054178:	af00      	add	r7, sp, #0
1005417a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR) >> TXRXPACK_WORD2_DATAPTR_Pos);
1005417c:	687b      	ldr	r3, [r7, #4]
1005417e:	689b      	ldr	r3, [r3, #8]
}
10054180:	0018      	movs	r0, r3
10054182:	46bd      	mov	sp, r7
10054184:	b002      	add	sp, #8
10054186:	bd80      	pop	{r7, pc}

10054188 <LL_RADIO_SetTimer2Triggering>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer2Triggering(TXRXPACK_TypeDef *p, uint32_t value)
{
10054188:	b580      	push	{r7, lr}
1005418a:	b082      	sub	sp, #8
1005418c:	af00      	add	r7, sp, #0
1005418e:	6078      	str	r0, [r7, #4]
10054190:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2, value);
10054192:	687b      	ldr	r3, [r7, #4]
10054194:	68db      	ldr	r3, [r3, #12]
10054196:	0d1b      	lsrs	r3, r3, #20
10054198:	051a      	lsls	r2, r3, #20
1005419a:	683b      	ldr	r3, [r7, #0]
1005419c:	031b      	lsls	r3, r3, #12
1005419e:	0b1b      	lsrs	r3, r3, #12
100541a0:	431a      	orrs	r2, r3
100541a2:	687b      	ldr	r3, [r7, #4]
100541a4:	60da      	str	r2, [r3, #12]
}
100541a6:	46c0      	nop			@ (mov r8, r8)
100541a8:	46bd      	mov	sp, r7
100541aa:	b002      	add	sp, #8
100541ac:	bd80      	pop	{r7, pc}

100541ae <LL_RADIO_Timer2_Enable>:
  * @rmtoll WORD3          TIMER2EN            LL_RADIO_Timer2_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Timer2_Enable(TXRXPACK_TypeDef *p)
{
100541ae:	b580      	push	{r7, lr}
100541b0:	b082      	sub	sp, #8
100541b2:	af00      	add	r7, sp, #0
100541b4:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2EN);
100541b6:	687b      	ldr	r3, [r7, #4]
100541b8:	68db      	ldr	r3, [r3, #12]
100541ba:	2280      	movs	r2, #128	@ 0x80
100541bc:	0352      	lsls	r2, r2, #13
100541be:	431a      	orrs	r2, r3
100541c0:	687b      	ldr	r3, [r7, #4]
100541c2:	60da      	str	r2, [r3, #12]
}
100541c4:	46c0      	nop			@ (mov r8, r8)
100541c6:	46bd      	mov	sp, r7
100541c8:	b002      	add	sp, #8
100541ca:	bd80      	pop	{r7, pc}

100541cc <LL_RADIO_SetTrigRcv>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigRcv(TXRXPACK_TypeDef *p, uint32_t value)
{
100541cc:	b580      	push	{r7, lr}
100541ce:	b082      	sub	sp, #8
100541d0:	af00      	add	r7, sp, #0
100541d2:	6078      	str	r0, [r7, #4]
100541d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGRCV, value);
100541d6:	687b      	ldr	r3, [r7, #4]
100541d8:	68db      	ldr	r3, [r3, #12]
100541da:	4a07      	ldr	r2, [pc, #28]	@ (100541f8 <LL_RADIO_SetTrigRcv+0x2c>)
100541dc:	401a      	ands	r2, r3
100541de:	683b      	ldr	r3, [r7, #0]
100541e0:	0599      	lsls	r1, r3, #22
100541e2:	2380      	movs	r3, #128	@ 0x80
100541e4:	03db      	lsls	r3, r3, #15
100541e6:	400b      	ands	r3, r1
100541e8:	431a      	orrs	r2, r3
100541ea:	687b      	ldr	r3, [r7, #4]
100541ec:	60da      	str	r2, [r3, #12]
}
100541ee:	46c0      	nop			@ (mov r8, r8)
100541f0:	46bd      	mov	sp, r7
100541f2:	b002      	add	sp, #8
100541f4:	bd80      	pop	{r7, pc}
100541f6:	46c0      	nop			@ (mov r8, r8)
100541f8:	ffbfffff 	.word	0xffbfffff

100541fc <LL_RADIO_SetTrigDone>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigDone(TXRXPACK_TypeDef *p, uint32_t value)
{
100541fc:	b580      	push	{r7, lr}
100541fe:	b082      	sub	sp, #8
10054200:	af00      	add	r7, sp, #0
10054202:	6078      	str	r0, [r7, #4]
10054204:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGDONE, value);
10054206:	687b      	ldr	r3, [r7, #4]
10054208:	68db      	ldr	r3, [r3, #12]
1005420a:	4a07      	ldr	r2, [pc, #28]	@ (10054228 <LL_RADIO_SetTrigDone+0x2c>)
1005420c:	401a      	ands	r2, r3
1005420e:	683b      	ldr	r3, [r7, #0]
10054210:	05d9      	lsls	r1, r3, #23
10054212:	2380      	movs	r3, #128	@ 0x80
10054214:	041b      	lsls	r3, r3, #16
10054216:	400b      	ands	r3, r1
10054218:	431a      	orrs	r2, r3
1005421a:	687b      	ldr	r3, [r7, #4]
1005421c:	60da      	str	r2, [r3, #12]
}
1005421e:	46c0      	nop			@ (mov r8, r8)
10054220:	46bd      	mov	sp, r7
10054222:	b002      	add	sp, #8
10054224:	bd80      	pop	{r7, pc}
10054226:	46c0      	nop			@ (mov r8, r8)
10054228:	ff7fffff 	.word	0xff7fffff

1005422c <LL_RADIO_SetIntTxOk>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetIntTxOk(TXRXPACK_TypeDef *p, uint32_t value)
{
1005422c:	b580      	push	{r7, lr}
1005422e:	b082      	sub	sp, #8
10054230:	af00      	add	r7, sp, #0
10054232:	6078      	str	r0, [r7, #4]
10054234:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTTXOK, value);
10054236:	687b      	ldr	r3, [r7, #4]
10054238:	68db      	ldr	r3, [r3, #12]
1005423a:	4a07      	ldr	r2, [pc, #28]	@ (10054258 <LL_RADIO_SetIntTxOk+0x2c>)
1005423c:	401a      	ands	r2, r3
1005423e:	683b      	ldr	r3, [r7, #0]
10054240:	0619      	lsls	r1, r3, #24
10054242:	2380      	movs	r3, #128	@ 0x80
10054244:	045b      	lsls	r3, r3, #17
10054246:	400b      	ands	r3, r1
10054248:	431a      	orrs	r2, r3
1005424a:	687b      	ldr	r3, [r7, #4]
1005424c:	60da      	str	r2, [r3, #12]
}
1005424e:	46c0      	nop			@ (mov r8, r8)
10054250:	46bd      	mov	sp, r7
10054252:	b002      	add	sp, #8
10054254:	bd80      	pop	{r7, pc}
10054256:	46c0      	nop			@ (mov r8, r8)
10054258:	feffffff 	.word	0xfeffffff

1005425c <LL_RADIO_IntDone_Enable>:
  * @rmtoll WORD3          INTDONE            LL_RADIO_IntDone_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntDone_Enable(TXRXPACK_TypeDef *p)
{
1005425c:	b580      	push	{r7, lr}
1005425e:	b082      	sub	sp, #8
10054260:	af00      	add	r7, sp, #0
10054262:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTDONE);
10054264:	687b      	ldr	r3, [r7, #4]
10054266:	68db      	ldr	r3, [r3, #12]
10054268:	2280      	movs	r2, #128	@ 0x80
1005426a:	0492      	lsls	r2, r2, #18
1005426c:	431a      	orrs	r2, r3
1005426e:	687b      	ldr	r3, [r7, #4]
10054270:	60da      	str	r2, [r3, #12]
}
10054272:	46c0      	nop			@ (mov r8, r8)
10054274:	46bd      	mov	sp, r7
10054276:	b002      	add	sp, #8
10054278:	bd80      	pop	{r7, pc}

1005427a <LL_RADIO_IntRcvTimeout_Enable>:
  * @rmtoll WORD3          INTRCVTIMEOUT            LL_RADIO_IntRcvTimeout_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvTimeout_Enable(TXRXPACK_TypeDef *p)
{
1005427a:	b580      	push	{r7, lr}
1005427c:	b082      	sub	sp, #8
1005427e:	af00      	add	r7, sp, #0
10054280:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVTIMEOUT);
10054282:	687b      	ldr	r3, [r7, #4]
10054284:	68db      	ldr	r3, [r3, #12]
10054286:	2280      	movs	r2, #128	@ 0x80
10054288:	04d2      	lsls	r2, r2, #19
1005428a:	431a      	orrs	r2, r3
1005428c:	687b      	ldr	r3, [r7, #4]
1005428e:	60da      	str	r2, [r3, #12]
}
10054290:	46c0      	nop			@ (mov r8, r8)
10054292:	46bd      	mov	sp, r7
10054294:	b002      	add	sp, #8
10054296:	bd80      	pop	{r7, pc}

10054298 <LL_RADIO_IntRcvCRCErr_Enable>:
  * @rmtoll WORD3          INTRCVCRCERR            LL_RADIO_IntRcvCRCErr_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvCRCErr_Enable(TXRXPACK_TypeDef *p)
{
10054298:	b580      	push	{r7, lr}
1005429a:	b082      	sub	sp, #8
1005429c:	af00      	add	r7, sp, #0
1005429e:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVCRCERR);
100542a0:	687b      	ldr	r3, [r7, #4]
100542a2:	68db      	ldr	r3, [r3, #12]
100542a4:	2280      	movs	r2, #128	@ 0x80
100542a6:	05d2      	lsls	r2, r2, #23
100542a8:	431a      	orrs	r2, r3
100542aa:	687b      	ldr	r3, [r7, #4]
100542ac:	60da      	str	r2, [r3, #12]
}
100542ae:	46c0      	nop			@ (mov r8, r8)
100542b0:	46bd      	mov	sp, r7
100542b2:	b002      	add	sp, #8
100542b4:	bd80      	pop	{r7, pc}

100542b6 <LL_RADIO_IntRcvOk_Enable>:
  * @rmtoll WORD3          INTRCVOK            LL_RADIO_IntRcvOk_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvOk_Enable(TXRXPACK_TypeDef *p)
{
100542b6:	b580      	push	{r7, lr}
100542b8:	b082      	sub	sp, #8
100542ba:	af00      	add	r7, sp, #0
100542bc:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVOK);
100542be:	687b      	ldr	r3, [r7, #4]
100542c0:	68db      	ldr	r3, [r3, #12]
100542c2:	2280      	movs	r2, #128	@ 0x80
100542c4:	0612      	lsls	r2, r2, #24
100542c6:	431a      	orrs	r2, r3
100542c8:	687b      	ldr	r3, [r7, #4]
100542ca:	60da      	str	r2, [r3, #12]
}
100542cc:	46c0      	nop			@ (mov r8, r8)
100542ce:	46bd      	mov	sp, r7
100542d0:	b002      	add	sp, #8
100542d2:	bd80      	pop	{r7, pc}

100542d4 <LL_RADIO_BlueSetInterrupt1RegRegister>:
  * @rmtoll INTERRUPT1REG          ALL       LL_RADIO_BlueSetInterrupt1RegRegister
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetInterrupt1RegRegister(uint32_t value)
{
100542d4:	b580      	push	{r7, lr}
100542d6:	b082      	sub	sp, #8
100542d8:	af00      	add	r7, sp, #0
100542da:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->INTERRUPT1REG, BLUE_INTERRUPT1REG_ALL, value);
100542dc:	23c0      	movs	r3, #192	@ 0xc0
100542de:	05db      	lsls	r3, r3, #23
100542e0:	685b      	ldr	r3, [r3, #4]
100542e2:	4a07      	ldr	r2, [pc, #28]	@ (10054300 <LL_RADIO_BlueSetInterrupt1RegRegister+0x2c>)
100542e4:	4013      	ands	r3, r2
100542e6:	0019      	movs	r1, r3
100542e8:	687b      	ldr	r3, [r7, #4]
100542ea:	4a06      	ldr	r2, [pc, #24]	@ (10054304 <LL_RADIO_BlueSetInterrupt1RegRegister+0x30>)
100542ec:	401a      	ands	r2, r3
100542ee:	23c0      	movs	r3, #192	@ 0xc0
100542f0:	05db      	lsls	r3, r3, #23
100542f2:	430a      	orrs	r2, r1
100542f4:	605a      	str	r2, [r3, #4]
}
100542f6:	46c0      	nop			@ (mov r8, r8)
100542f8:	46bd      	mov	sp, r7
100542fa:	b002      	add	sp, #8
100542fc:	bd80      	pop	{r7, pc}
100542fe:	46c0      	nop			@ (mov r8, r8)
10054300:	0002004f 	.word	0x0002004f
10054304:	fffdffb0 	.word	0xfffdffb0

10054308 <LL_RADIO_BlueSetClearSemaphoreRequest>:
  * @rmtoll CMDREG          CLEARSEMAREQ       LL_RADIO_BlueSetClearSemaphoreRequest
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetClearSemaphoreRequest(uint32_t value)
{
10054308:	b580      	push	{r7, lr}
1005430a:	b082      	sub	sp, #8
1005430c:	af00      	add	r7, sp, #0
1005430e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->CMDREG, BLUE_CMDREG_CLEARSEMAREQ, value);
10054310:	23c0      	movs	r3, #192	@ 0xc0
10054312:	05db      	lsls	r3, r3, #23
10054314:	699b      	ldr	r3, [r3, #24]
10054316:	2208      	movs	r2, #8
10054318:	4393      	bics	r3, r2
1005431a:	0019      	movs	r1, r3
1005431c:	687b      	ldr	r3, [r7, #4]
1005431e:	00db      	lsls	r3, r3, #3
10054320:	2208      	movs	r2, #8
10054322:	401a      	ands	r2, r3
10054324:	23c0      	movs	r3, #192	@ 0xc0
10054326:	05db      	lsls	r3, r3, #23
10054328:	430a      	orrs	r2, r1
1005432a:	619a      	str	r2, [r3, #24]
}
1005432c:	46c0      	nop			@ (mov r8, r8)
1005432e:	46bd      	mov	sp, r7
10054330:	b002      	add	sp, #8
10054332:	bd80      	pop	{r7, pc}

10054334 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>:
 */
/* Calculate the Timeout to be programmed on Timer2 to obtain a give T_IFS
 * when the next packet is a transmit one
*/
uint32_t BLEPLAT_CNTR_GetTimer2TimeoutForIfs(uint32_t T_Ifs, BLEPLAT_CNTR_Transaction Transaction, uint8_t Cal_Enabled)
{
10054334:	b580      	push	{r7, lr}
10054336:	b088      	sub	sp, #32
10054338:	af00      	add	r7, sp, #0
1005433a:	6078      	str	r0, [r7, #4]
1005433c:	0008      	movs	r0, r1
1005433e:	0011      	movs	r1, r2
10054340:	1cfb      	adds	r3, r7, #3
10054342:	1c02      	adds	r2, r0, #0
10054344:	701a      	strb	r2, [r3, #0]
10054346:	1cbb      	adds	r3, r7, #2
10054348:	1c0a      	adds	r2, r1, #0
1005434a:	701a      	strb	r2, [r3, #0]
    uint32_t Timeout = T_Ifs;
1005434c:	687b      	ldr	r3, [r7, #4]
1005434e:	617b      	str	r3, [r7, #20]
    uint32_t Tx_Delay_Comp;
    uint32_t Init_Delay;

    if(Transaction == BLEPLAT_CNTR_RxTx)
10054350:	1cfb      	adds	r3, r7, #3
10054352:	781b      	ldrb	r3, [r3, #0]
10054354:	2b01      	cmp	r3, #1
10054356:	d105      	bne.n	10054364 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x30>
        /* The correction values below have been determined by sniffer
         * T_IFS measurements in connection, initiating and active
         * scanning
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
10054358:	2304      	movs	r3, #4
1005435a:	60bb      	str	r3, [r7, #8]
#else
        const int32_t Adjust_Value = 6;
#endif
        Tx_Delay_Comp = (TX_DELAY_START>>3) + Adjust_Value;
1005435c:	68bb      	ldr	r3, [r7, #8]
1005435e:	3302      	adds	r3, #2
10054360:	61fb      	str	r3, [r7, #28]
10054362:	e015      	b.n	10054390 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxRx)
10054364:	1cfb      	adds	r3, r7, #3
10054366:	781b      	ldrb	r3, [r3, #0]
10054368:	2b00      	cmp	r3, #0
1005436a:	d105      	bne.n	10054378 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x44>
         * values used in prrevious versions of the stack.
         * They could be optimized after careful analysis of timing margins and
         * AGC behavior.
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
1005436c:	2304      	movs	r3, #4
1005436e:	60fb      	str	r3, [r7, #12]
#else
        const int32_t Adjust_Value = 4;
#endif
        Tx_Delay_Comp = (TX_DELAY_END>>3) + Adjust_Value;
10054370:	68fb      	ldr	r3, [r7, #12]
10054372:	3302      	adds	r3, #2
10054374:	61fb      	str	r3, [r7, #28]
10054376:	e00b      	b.n	10054390 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxTx)
10054378:	1cfb      	adds	r3, r7, #3
1005437a:	781b      	ldrb	r3, [r3, #0]
1005437c:	2b02      	cmp	r3, #2
1005437e:	d105      	bne.n	1005438c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x58>
    {
        /* The correction values below have been determined by sniffer
         * T_IFS measurements in extended advertising (AUX_CHAIN_IND)
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 1;
10054380:	2301      	movs	r3, #1
10054382:	613b      	str	r3, [r7, #16]
#else
        const int32_t Adjust_Value = 2;
#endif
        Tx_Delay_Comp = ((TX_DELAY_START + TX_DELAY_END)>>3) + Adjust_Value;
10054384:	693b      	ldr	r3, [r7, #16]
10054386:	3304      	adds	r3, #4
10054388:	61fb      	str	r3, [r7, #28]
1005438a:	e001      	b.n	10054390 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else
    {
        Tx_Delay_Comp = 0;
1005438c:	2300      	movs	r3, #0
1005438e:	61fb      	str	r3, [r7, #28]
    }

    if((Transaction == BLEPLAT_CNTR_RxTx) || (Transaction == BLEPLAT_CNTR_TxTx))
10054390:	1cfb      	adds	r3, r7, #3
10054392:	781b      	ldrb	r3, [r3, #0]
10054394:	2b01      	cmp	r3, #1
10054396:	d003      	beq.n	100543a0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x6c>
10054398:	1cfb      	adds	r3, r7, #3
1005439a:	781b      	ldrb	r3, [r3, #0]
1005439c:	2b02      	cmp	r3, #2
1005439e:	d109      	bne.n	100543b4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x80>
    {
        if(Cal_Enabled == TRUE)
100543a0:	1cbb      	adds	r3, r7, #2
100543a2:	781b      	ldrb	r3, [r3, #0]
100543a4:	2b01      	cmp	r3, #1
100543a6:	d102      	bne.n	100543ae <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x7a>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_TX_DELAY_CAL;
100543a8:	239b      	movs	r3, #155	@ 0x9b
100543aa:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
100543ac:	e013      	b.n	100543d6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_TX_DELAY_NO_CAL;
100543ae:	233d      	movs	r3, #61	@ 0x3d
100543b0:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
100543b2:	e010      	b.n	100543d6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
    }
    else if((Transaction == BLEPLAT_CNTR_TxRx) || (Transaction == BLEPLAT_CNTR_RxRx))
100543b4:	1cfb      	adds	r3, r7, #3
100543b6:	781b      	ldrb	r3, [r3, #0]
100543b8:	2b00      	cmp	r3, #0
100543ba:	d003      	beq.n	100543c4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x90>
100543bc:	1cfb      	adds	r3, r7, #3
100543be:	781b      	ldrb	r3, [r3, #0]
100543c0:	2b03      	cmp	r3, #3
100543c2:	d108      	bne.n	100543d6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
         * The current calculation of Timer2 for TX-RX events is slightly conservative
         * since it soes not consider the delay from digital modulator to antenna and from
         * antenna to digital demodulator. As a consequence the demodulator is turned on
         * a few microseconds earlier than stricty needed.
         */
        if(Cal_Enabled == TRUE)
100543c4:	1cbb      	adds	r3, r7, #2
100543c6:	781b      	ldrb	r3, [r3, #0]
100543c8:	2b01      	cmp	r3, #1
100543ca:	d102      	bne.n	100543d2 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x9e>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_RX_DELAY_CAL;
100543cc:	2399      	movs	r3, #153	@ 0x99
100543ce:	61bb      	str	r3, [r7, #24]
100543d0:	e001      	b.n	100543d6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_RX_DELAY_NO_CAL;
100543d2:	233b      	movs	r3, #59	@ 0x3b
100543d4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
    }

    Timeout -= (Init_Delay + Tx_Delay_Comp);
100543d6:	69ba      	ldr	r2, [r7, #24]
100543d8:	69fb      	ldr	r3, [r7, #28]
100543da:	18d3      	adds	r3, r2, r3
100543dc:	697a      	ldr	r2, [r7, #20]
100543de:	1ad3      	subs	r3, r2, r3
100543e0:	617b      	str	r3, [r7, #20]

    return Timeout;
100543e2:	697b      	ldr	r3, [r7, #20]
}
100543e4:	0018      	movs	r0, r3
100543e6:	46bd      	mov	sp, r7
100543e8:	b008      	add	sp, #32
100543ea:	bd80      	pop	{r7, pc}

100543ec <BLEPLAT_CNTR_ClearInterrupt>:

void BLEPLAT_CNTR_ClearInterrupt(uint32_t x)
{
100543ec:	b580      	push	{r7, lr}
100543ee:	b082      	sub	sp, #8
100543f0:	af00      	add	r7, sp, #0
100543f2:	6078      	str	r0, [r7, #4]
    LL_RADIO_BlueSetInterrupt1RegRegister(x);
100543f4:	687b      	ldr	r3, [r7, #4]
100543f6:	0018      	movs	r0, r3
100543f8:	f7ff ff6c 	bl	100542d4 <LL_RADIO_BlueSetInterrupt1RegRegister>
}
100543fc:	46c0      	nop			@ (mov r8, r8)
100543fe:	46bd      	mov	sp, r7
10054400:	b002      	add	sp, #8
10054402:	bd80      	pop	{r7, pc}

10054404 <BLEPLAT_CNTR_ClearSemareq>:

void BLEPLAT_CNTR_ClearSemareq(void)
{
10054404:	b580      	push	{r7, lr}
10054406:	af00      	add	r7, sp, #0
    LL_RADIO_BlueSetClearSemaphoreRequest(0x1U);
10054408:	2001      	movs	r0, #1
1005440a:	f7ff ff7d 	bl	10054308 <LL_RADIO_BlueSetClearSemaphoreRequest>
}
1005440e:	46c0      	nop			@ (mov r8, r8)
10054410:	46bd      	mov	sp, r7
10054412:	bd80      	pop	{r7, pc}

10054414 <BLEPLAT_CNTR_GlobDisableBlue>:
{
    return LL_RADIO_BlueGetTimerCapture();
}

void BLEPLAT_CNTR_GlobDisableBlue()
{
10054414:	b580      	push	{r7, lr}
10054416:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalDisableBlue();
10054418:	f7ff f8dc 	bl	100535d4 <LL_RADIO_GlobalDisableBlue>
}
1005441c:	46c0      	nop			@ (mov r8, r8)
1005441e:	46bd      	mov	sp, r7
10054420:	bd80      	pop	{r7, pc}

10054422 <BLEPLAT_CNTR_GlobEnableBlue>:

void BLEPLAT_CNTR_GlobEnableBlue()
{
10054422:	b580      	push	{r7, lr}
10054424:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalEnableBlue();
10054426:	f7ff f8c7 	bl	100535b8 <LL_RADIO_GlobalEnableBlue>
}
1005442a:	46c0      	nop			@ (mov r8, r8)
1005442c:	46bd      	mov	sp, r7
1005442e:	bd80      	pop	{r7, pc}

10054430 <BLEPLAT_CNTR_GlobWriteSlot>:
{
    LL_RADIO_SetReceivedNoCalDelayChk((uint32_t) x);
}

void BLEPLAT_CNTR_GlobWriteSlot(uint8_t slotNo)
{
10054430:	b580      	push	{r7, lr}
10054432:	b082      	sub	sp, #8
10054434:	af00      	add	r7, sp, #0
10054436:	0002      	movs	r2, r0
10054438:	1dfb      	adds	r3, r7, #7
1005443a:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetCurrentConnectionMachineNumber((uint32_t) slotNo);
1005443c:	1dfb      	adds	r3, r7, #7
1005443e:	781b      	ldrb	r3, [r3, #0]
10054440:	0018      	movs	r0, r3
10054442:	f7ff f8a3 	bl	1005358c <LL_RADIO_SetCurrentConnectionMachineNumber>
}
10054446:	46c0      	nop			@ (mov r8, r8)
10054448:	46bd      	mov	sp, r7
1005444a:	b002      	add	sp, #8
1005444c:	bd80      	pop	{r7, pc}
	...

10054450 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>:
{
    LL_RADIO_SetTxDelayEnd((uint32_t) x);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusAnyHwError(uint32_t x)
{
10054450:	b580      	push	{r7, lr}
10054452:	b082      	sub	sp, #8
10054454:	af00      	add	r7, sp, #0
10054456:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & ANY_HW_ERROR_INTERRUPT_Msk);
10054458:	687b      	ldr	r3, [r7, #4]
1005445a:	4a03      	ldr	r2, [pc, #12]	@ (10054468 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError+0x18>)
1005445c:	4013      	ands	r3, r2
}
1005445e:	0018      	movs	r0, r3
10054460:	46bd      	mov	sp, r7
10054462:	b002      	add	sp, #8
10054464:	bd80      	pop	{r7, pc}
10054466:	46c0      	nop			@ (mov r8, r8)
10054468:	00c9df30 	.word	0x00c9df30

1005446c <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>:
{
    return (uint32_t)(x & BLUE_STATUSREG_RXOVERFLOWERROR_Msk);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitAct2Error(uint32_t x)
{
1005446c:	b580      	push	{r7, lr}
1005446e:	b082      	sub	sp, #8
10054470:	af00      	add	r7, sp, #0
10054472:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ACTIVE2ERROR_Msk);
10054474:	687a      	ldr	r2, [r7, #4]
10054476:	2380      	movs	r3, #128	@ 0x80
10054478:	03db      	lsls	r3, r3, #15
1005447a:	4013      	ands	r3, r2
}
1005447c:	0018      	movs	r0, r3
1005447e:	46bd      	mov	sp, r7
10054480:	b002      	add	sp, #8
10054482:	bd80      	pop	{r7, pc}

10054484 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>:

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun(uint32_t x)
{
10054484:	b580      	push	{r7, lr}
10054486:	b082      	sub	sp, #8
10054488:	af00      	add	r7, sp, #0
1005448a:	6078      	str	r0, [r7, #4]
    return 0;
1005448c:	2300      	movs	r3, #0
}
1005448e:	0018      	movs	r0, r3
10054490:	46bd      	mov	sp, r7
10054492:	b002      	add	sp, #8
10054494:	bd80      	pop	{r7, pc}

10054496 <BLEPLAT_CNTR_IntGetIntStatusCrcErr>:

#if defined(BLUE_STATUSREG_RCVCRCERR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusCrcErr(uint32_t x)
{
10054496:	b580      	push	{r7, lr}
10054498:	b082      	sub	sp, #8
1005449a:	af00      	add	r7, sp, #0
1005449c:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVCRCERR_Msk);
1005449e:	687a      	ldr	r2, [r7, #4]
100544a0:	2380      	movs	r3, #128	@ 0x80
100544a2:	05db      	lsls	r3, r3, #23
100544a4:	4013      	ands	r3, r2
}
100544a6:	0018      	movs	r0, r3
100544a8:	46bd      	mov	sp, r7
100544aa:	b002      	add	sp, #8
100544ac:	bd80      	pop	{r7, pc}

100544ae <BLEPLAT_CNTR_IntGetIntStatusDone>:
#endif

#if defined(BLUE_STATUSREG_DONE_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusDone(uint32_t x)
{
100544ae:	b580      	push	{r7, lr}
100544b0:	b082      	sub	sp, #8
100544b2:	af00      	add	r7, sp, #0
100544b4:	6078      	str	r0, [r7, #4]
	return (uint32_t)(x & BLUE_STATUSREG_DONE_Msk);
100544b6:	687a      	ldr	r2, [r7, #4]
100544b8:	2380      	movs	r3, #128	@ 0x80
100544ba:	049b      	lsls	r3, r3, #18
100544bc:	4013      	ands	r3, r2
}
100544be:	0018      	movs	r0, r3
100544c0:	46bd      	mov	sp, r7
100544c2:	b002      	add	sp, #8
100544c4:	bd80      	pop	{r7, pc}

100544c6 <BLEPLAT_CNTR_IntGetIntStatusEncErr>:
#endif

#if defined(BLUE_STATUSREG_ENCERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusEncErr(uint32_t x)
{
100544c6:	b580      	push	{r7, lr}
100544c8:	b082      	sub	sp, #8
100544ca:	af00      	add	r7, sp, #0
100544cc:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ENCERROR_Msk);
100544ce:	687a      	ldr	r2, [r7, #4]
100544d0:	2380      	movs	r3, #128	@ 0x80
100544d2:	019b      	lsls	r3, r3, #6
100544d4:	4013      	ands	r3, r2
}
100544d6:	0018      	movs	r0, r3
100544d8:	46bd      	mov	sp, r7
100544da:	b002      	add	sp, #8
100544dc:	bd80      	pop	{r7, pc}

100544de <BLEPLAT_CNTR_IntGetIntStatusLenErr>:
#endif

#if defined(BLUE_STATUSREG_RCVLENGTHERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusLenErr(uint32_t x)
{
100544de:	b580      	push	{r7, lr}
100544e0:	b082      	sub	sp, #8
100544e2:	af00      	add	r7, sp, #0
100544e4:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVLENGTHERROR_Msk);
100544e6:	687a      	ldr	r2, [r7, #4]
100544e8:	2380      	movs	r3, #128	@ 0x80
100544ea:	02db      	lsls	r3, r3, #11
100544ec:	4013      	ands	r3, r2
}
100544ee:	0018      	movs	r0, r3
100544f0:	46bd      	mov	sp, r7
100544f2:	b002      	add	sp, #8
100544f4:	bd80      	pop	{r7, pc}

100544f6 <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>:
#endif

#if defined(BLUE_STATUSREG_NOACTIVELERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusNoactiveError(uint32_t x)
{
100544f6:	b580      	push	{r7, lr}
100544f8:	b082      	sub	sp, #8
100544fa:	af00      	add	r7, sp, #0
100544fc:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_NOACTIVELERROR_Msk);
100544fe:	687a      	ldr	r2, [r7, #4]
10054500:	2380      	movs	r3, #128	@ 0x80
10054502:	025b      	lsls	r3, r3, #9
10054504:	4013      	ands	r3, r2
}
10054506:	0018      	movs	r0, r3
10054508:	46bd      	mov	sp, r7
1005450a:	b002      	add	sp, #8
1005450c:	bd80      	pop	{r7, pc}

1005450e <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>:
#endif

#if defined(BLUE_STATUSREG_TXRXSKIP_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxRxSkip(uint32_t x)
{
1005450e:	b580      	push	{r7, lr}
10054510:	b082      	sub	sp, #8
10054512:	af00      	add	r7, sp, #0
10054514:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXRXSKIP_Msk);
10054516:	687a      	ldr	r2, [r7, #4]
10054518:	2380      	movs	r3, #128	@ 0x80
1005451a:	039b      	lsls	r3, r3, #14
1005451c:	4013      	ands	r3, r2
}
1005451e:	0018      	movs	r0, r3
10054520:	46bd      	mov	sp, r7
10054522:	b002      	add	sp, #8
10054524:	bd80      	pop	{r7, pc}

10054526 <BLEPLAT_CNTR_IntGetIntStatusTxError1>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_1_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError1(uint32_t x)
{
10054526:	b580      	push	{r7, lr}
10054528:	b082      	sub	sp, #8
1005452a:	af00      	add	r7, sp, #0
1005452c:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_1_Msk);
1005452e:	687a      	ldr	r2, [r7, #4]
10054530:	2380      	movs	r3, #128	@ 0x80
10054532:	009b      	lsls	r3, r3, #2
10054534:	4013      	ands	r3, r2
}
10054536:	0018      	movs	r0, r3
10054538:	46bd      	mov	sp, r7
1005453a:	b002      	add	sp, #8
1005453c:	bd80      	pop	{r7, pc}

1005453e <BLEPLAT_CNTR_IntGetIntStatusTxError3>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_3_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError3(uint32_t x)
{
1005453e:	b580      	push	{r7, lr}
10054540:	b082      	sub	sp, #8
10054542:	af00      	add	r7, sp, #0
10054544:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_3_Msk);
10054546:	687a      	ldr	r2, [r7, #4]
10054548:	2380      	movs	r3, #128	@ 0x80
1005454a:	011b      	lsls	r3, r3, #4
1005454c:	4013      	ands	r3, r2
}
1005454e:	0018      	movs	r0, r3
10054550:	46bd      	mov	sp, r7
10054552:	b002      	add	sp, #8
10054554:	bd80      	pop	{r7, pc}

10054556 <BLEPLAT_CNTR_IntGetIntStatusRxOk>:
#endif

#if defined(BLUE_STATUSREG_RCVOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusRxOk(uint32_t x)
{
10054556:	b580      	push	{r7, lr}
10054558:	b082      	sub	sp, #8
1005455a:	af00      	add	r7, sp, #0
1005455c:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVOK_Msk);
1005455e:	687b      	ldr	r3, [r7, #4]
10054560:	0fdb      	lsrs	r3, r3, #31
10054562:	07db      	lsls	r3, r3, #31
}
10054564:	0018      	movs	r0, r3
10054566:	46bd      	mov	sp, r7
10054568:	b002      	add	sp, #8
1005456a:	bd80      	pop	{r7, pc}

1005456c <BLEPLAT_CNTR_IntGetIntStatusTimeout>:
#endif

#if defined(BLUE_STATUSREG_RCVTIMEOUT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTimeout(uint32_t x)
{
1005456c:	b580      	push	{r7, lr}
1005456e:	b082      	sub	sp, #8
10054570:	af00      	add	r7, sp, #0
10054572:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVTIMEOUT_Msk);
10054574:	687a      	ldr	r2, [r7, #4]
10054576:	2380      	movs	r3, #128	@ 0x80
10054578:	04db      	lsls	r3, r3, #19
1005457a:	4013      	ands	r3, r2
}
1005457c:	0018      	movs	r0, r3
1005457e:	46bd      	mov	sp, r7
10054580:	b002      	add	sp, #8
10054582:	bd80      	pop	{r7, pc}

10054584 <BLEPLAT_CNTR_IntGetIntStatusTxDone>:
}
#endif

#if defined(BLUE_STATUSREG_PREVTRANSMIT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxDone(uint32_t x)
{
10054584:	b580      	push	{r7, lr}
10054586:	b082      	sub	sp, #8
10054588:	af00      	add	r7, sp, #0
1005458a:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_PREVTRANSMIT_Msk);
1005458c:	687b      	ldr	r3, [r7, #4]
1005458e:	2240      	movs	r2, #64	@ 0x40
10054590:	4013      	ands	r3, r2
}
10054592:	0018      	movs	r0, r3
10054594:	46bd      	mov	sp, r7
10054596:	b002      	add	sp, #8
10054598:	bd80      	pop	{r7, pc}

1005459a <BLEPLAT_CNTR_IntGetIntStatusTxOk>:
#endif

#if defined(BLUE_STATUSREG_TXOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxOk(uint32_t x)
{
1005459a:	b580      	push	{r7, lr}
1005459c:	b082      	sub	sp, #8
1005459e:	af00      	add	r7, sp, #0
100545a0:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXOK_Msk);
100545a2:	687a      	ldr	r2, [r7, #4]
100545a4:	2380      	movs	r3, #128	@ 0x80
100545a6:	045b      	lsls	r3, r3, #17
100545a8:	4013      	ands	r3, r2
}
100545aa:	0018      	movs	r0, r3
100545ac:	46bd      	mov	sp, r7
100545ae:	b002      	add	sp, #8
100545b0:	bd80      	pop	{r7, pc}

100545b2 <BLEPLAT_CNTR_PacketClrCteSamplingEn>:
{
    LL_RADIO_SetCRCInitializationSelector((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketClrCteSamplingEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100545b2:	b580      	push	{r7, lr}
100545b4:	b082      	sub	sp, #8
100545b6:	af00      	add	r7, sp, #0
100545b8:	6078      	str	r0, [r7, #4]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEAndSamplingEnable((TXRXPACK_TypeDef*)packetP, 0x0);
100545ba:	687b      	ldr	r3, [r7, #4]
100545bc:	2100      	movs	r1, #0
100545be:	0018      	movs	r0, r3
100545c0:	f7ff fd17 	bl	10053ff2 <LL_RADIO_SetCTEAndSamplingEnable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
100545c4:	46c0      	nop			@ (mov r8, r8)
100545c6:	46bd      	mov	sp, r7
100545c8:	b002      	add	sp, #8
100545ca:	bd80      	pop	{r7, pc}

100545cc <BLEPLAT_CNTR_PacketClrIncChan>:

void BLEPLAT_CNTR_PacketClrIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100545cc:	b580      	push	{r7, lr}
100545ce:	b082      	sub	sp, #8
100545d0:	af00      	add	r7, sp, #0
100545d2:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Disable((TXRXPACK_TypeDef*)packetP);
100545d4:	687b      	ldr	r3, [r7, #4]
100545d6:	0018      	movs	r0, r3
100545d8:	f7ff fd66 	bl	100540a8 <LL_RADIO_IncrementerChannel_Disable>
}
100545dc:	46c0      	nop			@ (mov r8, r8)
100545de:	46bd      	mov	sp, r7
100545e0:	b002      	add	sp, #8
100545e2:	bd80      	pop	{r7, pc}

100545e4 <BLEPLAT_CNTR_PacketClrPllTrig>:

void BLEPLAT_CNTR_PacketClrPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100545e4:	b580      	push	{r7, lr}
100545e6:	b082      	sub	sp, #8
100545e8:	af00      	add	r7, sp, #0
100545ea:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
100545ec:	687b      	ldr	r3, [r7, #4]
100545ee:	2100      	movs	r1, #0
100545f0:	0018      	movs	r0, r3
100545f2:	f7ff fcd5 	bl	10053fa0 <LL_RADIO_SetCalibrationRequest>
}
100545f6:	46c0      	nop			@ (mov r8, r8)
100545f8:	46bd      	mov	sp, r7
100545fa:	b002      	add	sp, #8
100545fc:	bd80      	pop	{r7, pc}

100545fe <BLEPLAT_CNTR_PacketGetDataPtr>:
#endif

}

uint8_t* BLEPLAT_CNTR_PacketGetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100545fe:	b580      	push	{r7, lr}
10054600:	b082      	sub	sp, #8
10054602:	af00      	add	r7, sp, #0
10054604:	6078      	str	r0, [r7, #4]
    return (uint8_t*)CONV_ADR(LL_RADIO_GetDataPointer((TXRXPACK_TypeDef*)packetP));
10054606:	687b      	ldr	r3, [r7, #4]
10054608:	0018      	movs	r0, r3
1005460a:	f7ff fdb3 	bl	10054174 <LL_RADIO_GetDataPointer>
1005460e:	0003      	movs	r3, r0
}
10054610:	0018      	movs	r0, r3
10054612:	46bd      	mov	sp, r7
10054614:	b002      	add	sp, #8
10054616:	bd80      	pop	{r7, pc}

10054618 <BLEPLAT_CNTR_PacketInitTo0>:

void BLEPLAT_CNTR_PacketInitTo0(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10054618:	b580      	push	{r7, lr}
1005461a:	b082      	sub	sp, #8
1005461c:	af00      	add	r7, sp, #0
1005461e:	6078      	str	r0, [r7, #4]
    memset((void*)packetP, 0, sizeof(TXRXPACK_WORD_TypeDef));
10054620:	687b      	ldr	r3, [r7, #4]
10054622:	2210      	movs	r2, #16
10054624:	2100      	movs	r1, #0
10054626:	0018      	movs	r0, r3
10054628:	f014 f888 	bl	1006873c <memset>
}
1005462c:	46c0      	nop			@ (mov r8, r8)
1005462e:	46bd      	mov	sp, r7
10054630:	b002      	add	sp, #8
10054632:	bd80      	pop	{r7, pc}

10054634 <BLEPLAT_CNTR_PacketSetAdvPduFormat>:

void BLEPLAT_CNTR_PacketSetAdvPduFormat(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10054634:	b580      	push	{r7, lr}
10054636:	b082      	sub	sp, #8
10054638:	af00      	add	r7, sp, #0
1005463a:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1005463c:	687b      	ldr	r3, [r7, #4]
1005463e:	2101      	movs	r1, #1
10054640:	0018      	movs	r0, r3
10054642:	f7ff fd00 	bl	10054046 <LL_RADIO_SetAdvertise>
}
10054646:	46c0      	nop			@ (mov r8, r8)
10054648:	46bd      	mov	sp, r7
1005464a:	b002      	add	sp, #8
1005464c:	bd80      	pop	{r7, pc}

1005464e <BLEPLAT_CNTR_PacketSetCrcinitSel>:

void BLEPLAT_CNTR_PacketSetCrcinitSel(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1005464e:	b580      	push	{r7, lr}
10054650:	b082      	sub	sp, #8
10054652:	af00      	add	r7, sp, #0
10054654:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCRCInitializationSelector((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10054656:	687b      	ldr	r3, [r7, #4]
10054658:	2101      	movs	r1, #1
1005465a:	0018      	movs	r0, r3
1005465c:	f7ff fcde 	bl	1005401c <LL_RADIO_SetCRCInitializationSelector>
}
10054660:	46c0      	nop			@ (mov r8, r8)
10054662:	46bd      	mov	sp, r7
10054664:	b002      	add	sp, #8
10054666:	bd80      	pop	{r7, pc}

10054668 <BLEPLAT_CNTR_PacketSetCteSamplingEn>:

void BLEPLAT_CNTR_PacketSetCteSamplingEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10054668:	b580      	push	{r7, lr}
1005466a:	b082      	sub	sp, #8
1005466c:	af00      	add	r7, sp, #0
1005466e:	6078      	str	r0, [r7, #4]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEAndSamplingEnable((TXRXPACK_TypeDef*)packetP, 0x01);
10054670:	687b      	ldr	r3, [r7, #4]
10054672:	2101      	movs	r1, #1
10054674:	0018      	movs	r0, r3
10054676:	f7ff fcbc 	bl	10053ff2 <LL_RADIO_SetCTEAndSamplingEnable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
1005467a:	46c0      	nop			@ (mov r8, r8)
1005467c:	46bd      	mov	sp, r7
1005467e:	b002      	add	sp, #8
10054680:	bd80      	pop	{r7, pc}

10054682 <BLEPLAT_CNTR_PacketSetDataPtr>:
{
     LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketSetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, void* dataP)
{
10054682:	b580      	push	{r7, lr}
10054684:	b082      	sub	sp, #8
10054686:	af00      	add	r7, sp, #0
10054688:	6078      	str	r0, [r7, #4]
1005468a:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetDataPointer((TXRXPACK_TypeDef*)packetP, BLUE_DATA_PTR_CAST(dataP));
1005468c:	683a      	ldr	r2, [r7, #0]
1005468e:	687b      	ldr	r3, [r7, #4]
10054690:	0011      	movs	r1, r2
10054692:	0018      	movs	r0, r3
10054694:	f7ff fd60 	bl	10054158 <LL_RADIO_SetDataPointer>
}
10054698:	46c0      	nop			@ (mov r8, r8)
1005469a:	46bd      	mov	sp, r7
1005469c:	b002      	add	sp, #8
1005469e:	bd80      	pop	{r7, pc}

100546a0 <BLEPLAT_CNTR_PacketSetIncChan>:

void BLEPLAT_CNTR_PacketSetIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100546a0:	b580      	push	{r7, lr}
100546a2:	b082      	sub	sp, #8
100546a4:	af00      	add	r7, sp, #0
100546a6:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Enable((TXRXPACK_TypeDef*)packetP);
100546a8:	687b      	ldr	r3, [r7, #4]
100546aa:	0018      	movs	r0, r3
100546ac:	f7ff fcee 	bl	1005408c <LL_RADIO_IncrementerChannel_Enable>
}
100546b0:	46c0      	nop			@ (mov r8, r8)
100546b2:	46bd      	mov	sp, r7
100546b4:	b002      	add	sp, #8
100546b6:	bd80      	pop	{r7, pc}

100546b8 <BLEPLAT_CNTR_PacketSetIntCrcErr>:

void BLEPLAT_CNTR_PacketSetIntCrcErr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100546b8:	b580      	push	{r7, lr}
100546ba:	b082      	sub	sp, #8
100546bc:	af00      	add	r7, sp, #0
100546be:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvCRCErr_Enable((TXRXPACK_TypeDef*)packetP);
100546c0:	687b      	ldr	r3, [r7, #4]
100546c2:	0018      	movs	r0, r3
100546c4:	f7ff fde8 	bl	10054298 <LL_RADIO_IntRcvCRCErr_Enable>
}
100546c8:	46c0      	nop			@ (mov r8, r8)
100546ca:	46bd      	mov	sp, r7
100546cc:	b002      	add	sp, #8
100546ce:	bd80      	pop	{r7, pc}

100546d0 <BLEPLAT_CNTR_PacketSetIntDone>:

void BLEPLAT_CNTR_PacketSetIntDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100546d0:	b580      	push	{r7, lr}
100546d2:	b082      	sub	sp, #8
100546d4:	af00      	add	r7, sp, #0
100546d6:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntDone_Enable((TXRXPACK_TypeDef*)packetP);
100546d8:	687b      	ldr	r3, [r7, #4]
100546da:	0018      	movs	r0, r3
100546dc:	f7ff fdbe 	bl	1005425c <LL_RADIO_IntDone_Enable>
}
100546e0:	46c0      	nop			@ (mov r8, r8)
100546e2:	46bd      	mov	sp, r7
100546e4:	b002      	add	sp, #8
100546e6:	bd80      	pop	{r7, pc}

100546e8 <BLEPLAT_CNTR_PacketSetIntRcvOk>:

void BLEPLAT_CNTR_PacketSetIntRcvOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100546e8:	b580      	push	{r7, lr}
100546ea:	b082      	sub	sp, #8
100546ec:	af00      	add	r7, sp, #0
100546ee:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvOk_Enable((TXRXPACK_TypeDef*)packetP);
100546f0:	687b      	ldr	r3, [r7, #4]
100546f2:	0018      	movs	r0, r3
100546f4:	f7ff fddf 	bl	100542b6 <LL_RADIO_IntRcvOk_Enable>
}
100546f8:	46c0      	nop			@ (mov r8, r8)
100546fa:	46bd      	mov	sp, r7
100546fc:	b002      	add	sp, #8
100546fe:	bd80      	pop	{r7, pc}

10054700 <BLEPLAT_CNTR_PacketSetIntTimeout>:

void BLEPLAT_CNTR_PacketSetIntTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10054700:	b580      	push	{r7, lr}
10054702:	b082      	sub	sp, #8
10054704:	af00      	add	r7, sp, #0
10054706:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvTimeout_Enable((TXRXPACK_TypeDef*)packetP);
10054708:	687b      	ldr	r3, [r7, #4]
1005470a:	0018      	movs	r0, r3
1005470c:	f7ff fdb5 	bl	1005427a <LL_RADIO_IntRcvTimeout_Enable>
}
10054710:	46c0      	nop			@ (mov r8, r8)
10054712:	46bd      	mov	sp, r7
10054714:	b002      	add	sp, #8
10054716:	bd80      	pop	{r7, pc}

10054718 <BLEPLAT_CNTR_PacketSetIntTxOk>:
{
  LL_RADIO_SetIntTimeCapture((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1U);
}

void BLEPLAT_CNTR_PacketSetIntTxOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10054718:	b580      	push	{r7, lr}
1005471a:	b082      	sub	sp, #8
1005471c:	af00      	add	r7, sp, #0
1005471e:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetIntTxOk((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10054720:	687b      	ldr	r3, [r7, #4]
10054722:	2101      	movs	r1, #1
10054724:	0018      	movs	r0, r3
10054726:	f7ff fd81 	bl	1005422c <LL_RADIO_SetIntTxOk>
}
1005472a:	46c0      	nop			@ (mov r8, r8)
1005472c:	46bd      	mov	sp, r7
1005472e:	b002      	add	sp, #8
10054730:	bd80      	pop	{r7, pc}

10054732 <BLEPLAT_CNTR_PacketSetKeepsemareq>:

void BLEPLAT_CNTR_PacketSetKeepsemareq(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10054732:	b580      	push	{r7, lr}
10054734:	b082      	sub	sp, #8
10054736:	af00      	add	r7, sp, #0
10054738:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetKeepSemaRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1005473a:	687b      	ldr	r3, [r7, #4]
1005473c:	2101      	movs	r1, #1
1005473e:	0018      	movs	r0, r3
10054740:	f7ff fc42 	bl	10053fc8 <LL_RADIO_SetKeepSemaRequest>
}
10054744:	46c0      	nop			@ (mov r8, r8)
10054746:	46bd      	mov	sp, r7
10054748:	b002      	add	sp, #8
1005474a:	bd80      	pop	{r7, pc}

1005474c <BLEPLAT_CNTR_PacketSetNextPtr>:

void BLEPLAT_CNTR_PacketSetNextPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetNextP)
{
1005474c:	b580      	push	{r7, lr}
1005474e:	b082      	sub	sp, #8
10054750:	af00      	add	r7, sp, #0
10054752:	6078      	str	r0, [r7, #4]
10054754:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetNextPointer((TXRXPACK_TypeDef*)packetP, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetNextP));
10054756:	683a      	ldr	r2, [r7, #0]
10054758:	687b      	ldr	r3, [r7, #4]
1005475a:	0011      	movs	r1, r2
1005475c:	0018      	movs	r0, r3
1005475e:	f7ff fc11 	bl	10053f84 <LL_RADIO_SetNextPointer>
}
10054762:	46c0      	nop			@ (mov r8, r8)
10054764:	46bd      	mov	sp, r7
10054766:	b002      	add	sp, #8
10054768:	bd80      	pop	{r7, pc}

1005476a <BLEPLAT_CNTR_PacketSetNextRxMode>:

void BLEPLAT_CNTR_PacketSetNextRxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1005476a:	b580      	push	{r7, lr}
1005476c:	b082      	sub	sp, #8
1005476e:	af00      	add	r7, sp, #0
10054770:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
10054772:	687b      	ldr	r3, [r7, #4]
10054774:	2100      	movs	r1, #0
10054776:	0018      	movs	r0, r3
10054778:	f7ff fca6 	bl	100540c8 <LL_RADIO_SetNextTxMode>
}
1005477c:	46c0      	nop			@ (mov r8, r8)
1005477e:	46bd      	mov	sp, r7
10054780:	b002      	add	sp, #8
10054782:	bd80      	pop	{r7, pc}

10054784 <BLEPLAT_CNTR_PacketSetNextSlot>:

void BLEPLAT_CNTR_PacketSetNextSlot(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint8_t slot)
{
10054784:	b580      	push	{r7, lr}
10054786:	b082      	sub	sp, #8
10054788:	af00      	add	r7, sp, #0
1005478a:	6078      	str	r0, [r7, #4]
1005478c:	000a      	movs	r2, r1
1005478e:	1cfb      	adds	r3, r7, #3
10054790:	701a      	strb	r2, [r3, #0]
    /* nothing to do */
}
10054792:	46c0      	nop			@ (mov r8, r8)
10054794:	46bd      	mov	sp, r7
10054796:	b002      	add	sp, #8
10054798:	bd80      	pop	{r7, pc}

1005479a <BLEPLAT_CNTR_PacketSetNextTxMode>:

void BLEPLAT_CNTR_PacketSetNextTxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1005479a:	b580      	push	{r7, lr}
1005479c:	b082      	sub	sp, #8
1005479e:	af00      	add	r7, sp, #0
100547a0:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100547a2:	687b      	ldr	r3, [r7, #4]
100547a4:	2101      	movs	r1, #1
100547a6:	0018      	movs	r0, r3
100547a8:	f7ff fc8e 	bl	100540c8 <LL_RADIO_SetNextTxMode>
}
100547ac:	46c0      	nop			@ (mov r8, r8)
100547ae:	46bd      	mov	sp, r7
100547b0:	b002      	add	sp, #8
100547b2:	bd80      	pop	{r7, pc}

100547b4 <BLEPLAT_CNTR_PacketSetNsEn>:

void BLEPLAT_CNTR_PacketSetNsEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100547b4:	b580      	push	{r7, lr}
100547b6:	b082      	sub	sp, #8
100547b8:	af00      	add	r7, sp, #0
100547ba:	6078      	str	r0, [r7, #4]
    LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable((TXRXPACK_TypeDef*)packetP);
100547bc:	687b      	ldr	r3, [r7, #4]
100547be:	0018      	movs	r0, r3
100547c0:	f7ff fc56 	bl	10054070 <LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable>
}
100547c4:	46c0      	nop			@ (mov r8, r8)
100547c6:	46bd      	mov	sp, r7
100547c8:	b002      	add	sp, #8
100547ca:	bd80      	pop	{r7, pc}

100547cc <BLEPLAT_CNTR_PacketSetPllTrig>:

void BLEPLAT_CNTR_PacketSetPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100547cc:	b580      	push	{r7, lr}
100547ce:	b082      	sub	sp, #8
100547d0:	af00      	add	r7, sp, #0
100547d2:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100547d4:	687b      	ldr	r3, [r7, #4]
100547d6:	2101      	movs	r1, #1
100547d8:	0018      	movs	r0, r3
100547da:	f7ff fbe1 	bl	10053fa0 <LL_RADIO_SetCalibrationRequest>
}
100547de:	46c0      	nop			@ (mov r8, r8)
100547e0:	46bd      	mov	sp, r7
100547e2:	b002      	add	sp, #8
100547e4:	bd80      	pop	{r7, pc}

100547e6 <BLEPLAT_CNTR_PacketSetRxReady>:

void BLEPLAT_CNTR_PacketSetRxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100547e6:	b580      	push	{r7, lr}
100547e8:	b082      	sub	sp, #8
100547ea:	af00      	add	r7, sp, #0
100547ec:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100547ee:	687b      	ldr	r3, [r7, #4]
100547f0:	2101      	movs	r1, #1
100547f2:	0018      	movs	r0, r3
100547f4:	f7ff fc80 	bl	100540f8 <LL_RADIO_SetAllTableDataReady>
}
100547f8:	46c0      	nop			@ (mov r8, r8)
100547fa:	46bd      	mov	sp, r7
100547fc:	b002      	add	sp, #8
100547fe:	bd80      	pop	{r7, pc}

10054800 <BLEPLAT_CNTR_PacketSetTimeout>:

void BLEPLAT_CNTR_PacketSetTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t x)
{
10054800:	b580      	push	{r7, lr}
10054802:	b082      	sub	sp, #8
10054804:	af00      	add	r7, sp, #0
10054806:	6078      	str	r0, [r7, #4]
10054808:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetTimer2Triggering((TXRXPACK_TypeDef*)packetP, x);
1005480a:	683a      	ldr	r2, [r7, #0]
1005480c:	687b      	ldr	r3, [r7, #4]
1005480e:	0011      	movs	r1, r2
10054810:	0018      	movs	r0, r3
10054812:	f7ff fcb9 	bl	10054188 <LL_RADIO_SetTimer2Triggering>
}
10054816:	46c0      	nop			@ (mov r8, r8)
10054818:	46bd      	mov	sp, r7
1005481a:	b002      	add	sp, #8
1005481c:	bd80      	pop	{r7, pc}

1005481e <BLEPLAT_CNTR_PacketSetTimer2Active>:

void BLEPLAT_CNTR_PacketSetTimer2Active(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1005481e:	b580      	push	{r7, lr}
10054820:	b082      	sub	sp, #8
10054822:	af00      	add	r7, sp, #0
10054824:	6078      	str	r0, [r7, #4]
    LL_RADIO_Timer2_Enable((TXRXPACK_TypeDef*)packetP);
10054826:	687b      	ldr	r3, [r7, #4]
10054828:	0018      	movs	r0, r3
1005482a:	f7ff fcc0 	bl	100541ae <LL_RADIO_Timer2_Enable>
}
1005482e:	46c0      	nop			@ (mov r8, r8)
10054830:	46bd      	mov	sp, r7
10054832:	b002      	add	sp, #8
10054834:	bd80      	pop	{r7, pc}

10054836 <BLEPLAT_CNTR_PacketSetTimerTrigDone>:

void BLEPLAT_CNTR_PacketSetTimerTrigDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10054836:	b580      	push	{r7, lr}
10054838:	b082      	sub	sp, #8
1005483a:	af00      	add	r7, sp, #0
1005483c:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigDone((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1005483e:	687b      	ldr	r3, [r7, #4]
10054840:	2101      	movs	r1, #1
10054842:	0018      	movs	r0, r3
10054844:	f7ff fcda 	bl	100541fc <LL_RADIO_SetTrigDone>
}
10054848:	46c0      	nop			@ (mov r8, r8)
1005484a:	46bd      	mov	sp, r7
1005484c:	b002      	add	sp, #8
1005484e:	bd80      	pop	{r7, pc}

10054850 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>:

void BLEPLAT_CNTR_PacketSetTimerTrigRcv(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10054850:	b580      	push	{r7, lr}
10054852:	b082      	sub	sp, #8
10054854:	af00      	add	r7, sp, #0
10054856:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigRcv((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10054858:	687b      	ldr	r3, [r7, #4]
1005485a:	2101      	movs	r1, #1
1005485c:	0018      	movs	r0, r3
1005485e:	f7ff fcb5 	bl	100541cc <LL_RADIO_SetTrigRcv>
}
10054862:	46c0      	nop			@ (mov r8, r8)
10054864:	46bd      	mov	sp, r7
10054866:	b002      	add	sp, #8
10054868:	bd80      	pop	{r7, pc}

1005486a <BLEPLAT_CNTR_PacketSetTxReady>:

void BLEPLAT_CNTR_PacketSetTxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1005486a:	b580      	push	{r7, lr}
1005486c:	b082      	sub	sp, #8
1005486e:	af00      	add	r7, sp, #0
10054870:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTransmissionDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10054872:	687b      	ldr	r3, [r7, #4]
10054874:	2101      	movs	r1, #1
10054876:	0018      	movs	r0, r3
10054878:	f7ff fc56 	bl	10054128 <LL_RADIO_SetTransmissionDataReady>
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1005487c:	687b      	ldr	r3, [r7, #4]
1005487e:	2101      	movs	r1, #1
10054880:	0018      	movs	r0, r3
10054882:	f7ff fc39 	bl	100540f8 <LL_RADIO_SetAllTableDataReady>
}
10054886:	46c0      	nop			@ (mov r8, r8)
10054888:	46bd      	mov	sp, r7
1005488a:	b002      	add	sp, #8
1005488c:	bd80      	pop	{r7, pc}

1005488e <BLEPLAT_CNTR_SetRcvLen>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SetRcvLen(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t rcvLen)
{
1005488e:	b580      	push	{r7, lr}
10054890:	b082      	sub	sp, #8
10054892:	af00      	add	r7, sp, #0
10054894:	6078      	str	r0, [r7, #4]
10054896:	6039      	str	r1, [r7, #0]
  (void)packetP;
  LL_RADIO_SetReceiveWindowTimeout((uint32_t) (rcvLen & 0xFFFFFU));
10054898:	683b      	ldr	r3, [r7, #0]
1005489a:	031b      	lsls	r3, r3, #12
1005489c:	0b1b      	lsrs	r3, r3, #12
1005489e:	0018      	movs	r0, r3
100548a0:	f7fe fea6 	bl	100535f0 <LL_RADIO_SetReceiveWindowTimeout>
}
100548a4:	46c0      	nop			@ (mov r8, r8)
100548a6:	46bd      	mov	sp, r7
100548a8:	b002      	add	sp, #8
100548aa:	bd80      	pop	{r7, pc}

100548ac <BLEPLAT_CNTR_SmCteOff>:

void BLEPLAT_CNTR_SmCteOff(uint8_t smNo)
{
100548ac:	b580      	push	{r7, lr}
100548ae:	b082      	sub	sp, #8
100548b0:	af00      	add	r7, sp, #0
100548b2:	0002      	movs	r2, r0
100548b4:	1dfb      	adds	r3, r7, #7
100548b6:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEDisable(smNo, 0x01);
100548b8:	1dfb      	adds	r3, r7, #7
100548ba:	781b      	ldrb	r3, [r3, #0]
100548bc:	2101      	movs	r1, #1
100548be:	0018      	movs	r0, r3
100548c0:	f7ff f848 	bl	10053954 <LL_RADIO_SetCTEDisable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
100548c4:	46c0      	nop			@ (mov r8, r8)
100548c6:	46bd      	mov	sp, r7
100548c8:	b002      	add	sp, #8
100548ca:	bd80      	pop	{r7, pc}

100548cc <BLEPLAT_CNTR_SmEnRadioConfig>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmEnRadioConfig(uint8_t smNo, uint32_t enable)
{
100548cc:	b580      	push	{r7, lr}
100548ce:	b082      	sub	sp, #8
100548d0:	af00      	add	r7, sp, #0
100548d2:	0002      	movs	r2, r0
100548d4:	6039      	str	r1, [r7, #0]
100548d6:	1dfb      	adds	r3, r7, #7
100548d8:	701a      	strb	r2, [r3, #0]
    if(enable)
100548da:	683b      	ldr	r3, [r7, #0]
100548dc:	2b00      	cmp	r3, #0
100548de:	d005      	beq.n	100548ec <BLEPLAT_CNTR_SmEnRadioConfig+0x20>
	    LL_RADIO_RadioCommandList_Enable(smNo);
100548e0:	1dfb      	adds	r3, r7, #7
100548e2:	781b      	ldrb	r3, [r3, #0]
100548e4:	0018      	movs	r0, r3
100548e6:	f7fe fec1 	bl	1005366c <LL_RADIO_RadioCommandList_Enable>
	else
	    LL_RADIO_RadioCommandList_Disable(smNo);
}
100548ea:	e004      	b.n	100548f6 <BLEPLAT_CNTR_SmEnRadioConfig+0x2a>
	    LL_RADIO_RadioCommandList_Disable(smNo);
100548ec:	1dfb      	adds	r3, r7, #7
100548ee:	781b      	ldrb	r3, [r3, #0]
100548f0:	0018      	movs	r0, r3
100548f2:	f7fe fed9 	bl	100536a8 <LL_RADIO_RadioCommandList_Disable>
}
100548f6:	46c0      	nop			@ (mov r8, r8)
100548f8:	46bd      	mov	sp, r7
100548fa:	b002      	add	sp, #8
100548fc:	bd80      	pop	{r7, pc}

100548fe <BLEPLAT_CNTR_SmEncOff>:

void BLEPLAT_CNTR_SmEncOff(uint8_t smNo)
{
100548fe:	b580      	push	{r7, lr}
10054900:	b082      	sub	sp, #8
10054902:	af00      	add	r7, sp, #0
10054904:	0002      	movs	r2, r0
10054906:	1dfb      	adds	r3, r7, #7
10054908:	701a      	strb	r2, [r3, #0]
    LL_RADIO_Encryption_Disable(smNo);
1005490a:	1dfb      	adds	r3, r7, #7
1005490c:	781b      	ldrb	r3, [r3, #0]
1005490e:	0018      	movs	r0, r3
10054910:	f7fe ffc0 	bl	10053894 <LL_RADIO_Encryption_Disable>
    LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable(smNo);
10054914:	1dfb      	adds	r3, r7, #7
10054916:	781b      	ldrb	r3, [r3, #0]
10054918:	0018      	movs	r0, r3
1005491a:	f7ff f9ad 	bl	10053c78 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable>
}
1005491e:	46c0      	nop			@ (mov r8, r8)
10054920:	46bd      	mov	sp, r7
10054922:	b002      	add	sp, #8
10054924:	bd80      	pop	{r7, pc}

10054926 <BLEPLAT_CNTR_SmEncOn>:

void BLEPLAT_CNTR_SmEncOn(uint8_t smNo)
{
10054926:	b580      	push	{r7, lr}
10054928:	b082      	sub	sp, #8
1005492a:	af00      	add	r7, sp, #0
1005492c:	0002      	movs	r2, r0
1005492e:	1dfb      	adds	r3, r7, #7
10054930:	701a      	strb	r2, [r3, #0]
    LL_RADIO_Encryption_Enable(smNo);
10054932:	1dfb      	adds	r3, r7, #7
10054934:	781b      	ldrb	r3, [r3, #0]
10054936:	0018      	movs	r0, r3
10054938:	f7fe ff8c 	bl	10053854 <LL_RADIO_Encryption_Enable>
    LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable(smNo);
1005493c:	1dfb      	adds	r3, r7, #7
1005493e:	781b      	ldrb	r3, [r3, #0]
10054940:	0018      	movs	r0, r3
10054942:	f7ff f979 	bl	10053c38 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable>
}
10054946:	46c0      	nop			@ (mov r8, r8)
10054948:	46bd      	mov	sp, r7
1005494a:	b002      	add	sp, #8
1005494c:	bd80      	pop	{r7, pc}

1005494e <BLEPLAT_CNTR_SmGetAccessAddr>:

uint32_t BLEPLAT_CNTR_SmGetAccessAddr(uint8_t smNo)
{
1005494e:	b580      	push	{r7, lr}
10054950:	b082      	sub	sp, #8
10054952:	af00      	add	r7, sp, #0
10054954:	0002      	movs	r2, r0
10054956:	1dfb      	adds	r3, r7, #7
10054958:	701a      	strb	r2, [r3, #0]
    return LL_RADIO_GetAccessAddress(smNo);
1005495a:	1dfb      	adds	r3, r7, #7
1005495c:	781b      	ldrb	r3, [r3, #0]
1005495e:	0018      	movs	r0, r3
10054960:	f7ff f9c8 	bl	10053cf4 <LL_RADIO_GetAccessAddress>
10054964:	0003      	movs	r3, r0
}
10054966:	0018      	movs	r0, r3
10054968:	46bd      	mov	sp, r7
1005496a:	b002      	add	sp, #8
1005496c:	bd80      	pop	{r7, pc}

1005496e <BLEPLAT_CNTR_SmGetChannelMap>:

void BLEPLAT_CNTR_SmGetChannelMap(uint8_t smNo, uint8_t* chanMap)
{
1005496e:	b580      	push	{r7, lr}
10054970:	b082      	sub	sp, #8
10054972:	af00      	add	r7, sp, #0
10054974:	0002      	movs	r2, r0
10054976:	6039      	str	r1, [r7, #0]
10054978:	1dfb      	adds	r3, r7, #7
1005497a:	701a      	strb	r2, [r3, #0]
    chanMap[0] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_15_0(smNo));
1005497c:	1dfb      	adds	r3, r7, #7
1005497e:	781b      	ldrb	r3, [r3, #0]
10054980:	0018      	movs	r0, r3
10054982:	f7ff faad 	bl	10053ee0 <LL_RADIO_GetUsedChannelFlags_15_0>
10054986:	0003      	movs	r3, r0
10054988:	b2da      	uxtb	r2, r3
1005498a:	683b      	ldr	r3, [r7, #0]
1005498c:	701a      	strb	r2, [r3, #0]
    chanMap[1] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_15_0(smNo) >> 8U);
1005498e:	1dfb      	adds	r3, r7, #7
10054990:	781b      	ldrb	r3, [r3, #0]
10054992:	0018      	movs	r0, r3
10054994:	f7ff faa4 	bl	10053ee0 <LL_RADIO_GetUsedChannelFlags_15_0>
10054998:	0003      	movs	r3, r0
1005499a:	0a1a      	lsrs	r2, r3, #8
1005499c:	683b      	ldr	r3, [r7, #0]
1005499e:	3301      	adds	r3, #1
100549a0:	b2d2      	uxtb	r2, r2
100549a2:	701a      	strb	r2, [r3, #0]
    chanMap[2] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo));
100549a4:	1dfb      	adds	r3, r7, #7
100549a6:	781b      	ldrb	r3, [r3, #0]
100549a8:	0018      	movs	r0, r3
100549aa:	f7ff fad5 	bl	10053f58 <LL_RADIO_GetUsedChannelFlags_36_16>
100549ae:	0002      	movs	r2, r0
100549b0:	683b      	ldr	r3, [r7, #0]
100549b2:	3302      	adds	r3, #2
100549b4:	b2d2      	uxtb	r2, r2
100549b6:	701a      	strb	r2, [r3, #0]
    chanMap[3] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo) >> 8U);
100549b8:	1dfb      	adds	r3, r7, #7
100549ba:	781b      	ldrb	r3, [r3, #0]
100549bc:	0018      	movs	r0, r3
100549be:	f7ff facb 	bl	10053f58 <LL_RADIO_GetUsedChannelFlags_36_16>
100549c2:	0003      	movs	r3, r0
100549c4:	0a1a      	lsrs	r2, r3, #8
100549c6:	683b      	ldr	r3, [r7, #0]
100549c8:	3303      	adds	r3, #3
100549ca:	b2d2      	uxtb	r2, r2
100549cc:	701a      	strb	r2, [r3, #0]
    chanMap[4] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo) >> 16U);
100549ce:	1dfb      	adds	r3, r7, #7
100549d0:	781b      	ldrb	r3, [r3, #0]
100549d2:	0018      	movs	r0, r3
100549d4:	f7ff fac0 	bl	10053f58 <LL_RADIO_GetUsedChannelFlags_36_16>
100549d8:	0003      	movs	r3, r0
100549da:	0c1a      	lsrs	r2, r3, #16
100549dc:	683b      	ldr	r3, [r7, #0]
100549de:	3304      	adds	r3, #4
100549e0:	b2d2      	uxtb	r2, r2
100549e2:	701a      	strb	r2, [r3, #0]
}
100549e4:	46c0      	nop			@ (mov r8, r8)
100549e6:	46bd      	mov	sp, r7
100549e8:	b002      	add	sp, #8
100549ea:	bd80      	pop	{r7, pc}

100549ec <BLEPLAT_CNTR_SmGetEncIvPtr>:
  return (uint8_t)0;
#endif
}

uint32_t* BLEPLAT_CNTR_SmGetEncIvPtr(uint8_t smNo)
{
100549ec:	b580      	push	{r7, lr}
100549ee:	b082      	sub	sp, #8
100549f0:	af00      	add	r7, sp, #0
100549f2:	0002      	movs	r2, r0
100549f4:	1dfb      	adds	r3, r7, #7
100549f6:	701a      	strb	r2, [r3, #0]
    return (uint32_t*)&(bluedata + smNo)->ENCRYPTIV[0];
100549f8:	1dfb      	adds	r3, r7, #7
100549fa:	781b      	ldrb	r3, [r3, #0]
100549fc:	225c      	movs	r2, #92	@ 0x5c
100549fe:	4353      	muls	r3, r2
10054a00:	4a03      	ldr	r2, [pc, #12]	@ (10054a10 <BLEPLAT_CNTR_SmGetEncIvPtr+0x24>)
10054a02:	4694      	mov	ip, r2
10054a04:	4463      	add	r3, ip
10054a06:	3338      	adds	r3, #56	@ 0x38
}
10054a08:	0018      	movs	r0, r3
10054a0a:	46bd      	mov	sp, r7
10054a0c:	b002      	add	sp, #8
10054a0e:	bd80      	pop	{r7, pc}
10054a10:	200000dc 	.word	0x200000dc

10054a14 <BLEPLAT_CNTR_SmGetEncKeyPtr>:

uint32_t* BLEPLAT_CNTR_SmGetEncKeyPtr(uint8_t smNo)
{
10054a14:	b580      	push	{r7, lr}
10054a16:	b082      	sub	sp, #8
10054a18:	af00      	add	r7, sp, #0
10054a1a:	0002      	movs	r2, r0
10054a1c:	1dfb      	adds	r3, r7, #7
10054a1e:	701a      	strb	r2, [r3, #0]
	return (uint32_t*)&(bluedata + smNo)->ENCRYPTK[0];
10054a20:	1dfb      	adds	r3, r7, #7
10054a22:	781b      	ldrb	r3, [r3, #0]
10054a24:	225c      	movs	r2, #92	@ 0x5c
10054a26:	4353      	muls	r3, r2
10054a28:	4a03      	ldr	r2, [pc, #12]	@ (10054a38 <BLEPLAT_CNTR_SmGetEncKeyPtr+0x24>)
10054a2a:	4694      	mov	ip, r2
10054a2c:	4463      	add	r3, ip
10054a2e:	3340      	adds	r3, #64	@ 0x40
}
10054a30:	0018      	movs	r0, r3
10054a32:	46bd      	mov	sp, r7
10054a34:	b002      	add	sp, #8
10054a36:	bd80      	pop	{r7, pc}
10054a38:	200000dc 	.word	0x200000dc

10054a3c <BLEPLAT_CNTR_SmGetHopIncr>:
{
    return (uint8_t)LL_RADIO_Encryption_IsEnabled(smNo);
}

uint8_t BLEPLAT_CNTR_SmGetHopIncr(uint8_t smNo)
{
10054a3c:	b580      	push	{r7, lr}
10054a3e:	b082      	sub	sp, #8
10054a40:	af00      	add	r7, sp, #0
10054a42:	0002      	movs	r2, r0
10054a44:	1dfb      	adds	r3, r7, #7
10054a46:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetHopIncrement(smNo);
10054a48:	1dfb      	adds	r3, r7, #7
10054a4a:	781b      	ldrb	r3, [r3, #0]
10054a4c:	0018      	movs	r0, r3
10054a4e:	f7ff fa0d 	bl	10053e6c <LL_RADIO_GetHopIncrement>
10054a52:	0003      	movs	r3, r0
10054a54:	b2db      	uxtb	r3, r3
}
10054a56:	0018      	movs	r0, r3
10054a58:	46bd      	mov	sp, r7
10054a5a:	b002      	add	sp, #8
10054a5c:	bd80      	pop	{r7, pc}

10054a5e <BLEPLAT_CNTR_SmGetMode>:

uint8_t BLEPLAT_CNTR_SmGetMode(uint8_t smNo)
{
10054a5e:	b580      	push	{r7, lr}
10054a60:	b082      	sub	sp, #8
10054a62:	af00      	add	r7, sp, #0
10054a64:	0002      	movs	r2, r0
10054a66:	1dfb      	adds	r3, r7, #7
10054a68:	701a      	strb	r2, [r3, #0]
    return LL_RADIO_TxMode_IsEnabled(smNo);
10054a6a:	1dfb      	adds	r3, r7, #7
10054a6c:	781b      	ldrb	r3, [r3, #0]
10054a6e:	0018      	movs	r0, r3
10054a70:	f7fe fe74 	bl	1005375c <LL_RADIO_TxMode_IsEnabled>
10054a74:	0003      	movs	r3, r0
10054a76:	b2db      	uxtb	r3, r3
}
10054a78:	0018      	movs	r0, r3
10054a7a:	46bd      	mov	sp, r7
10054a7c:	b002      	add	sp, #8
10054a7e:	bd80      	pop	{r7, pc}

10054a80 <BLEPLAT_CNTR_SmGetRemapChan>:
{
    return (BLEPLAT_CNTR_TXRXPACK_TypeDef*)BLUE_TRANS_STRUCT_PTR_CAST(CONV_ADR(LL_RADIO_GetTxPointPrevious(smNo)));
}

uint8_t BLEPLAT_CNTR_SmGetRemapChan(uint8_t smNo)
{
10054a80:	b580      	push	{r7, lr}
10054a82:	b082      	sub	sp, #8
10054a84:	af00      	add	r7, sp, #0
10054a86:	0002      	movs	r2, r0
10054a88:	1dfb      	adds	r3, r7, #7
10054a8a:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetRemapChannel(smNo);
10054a8c:	1dfb      	adds	r3, r7, #7
10054a8e:	781b      	ldrb	r3, [r3, #0]
10054a90:	0018      	movs	r0, r3
10054a92:	f7fe fea7 	bl	100537e4 <LL_RADIO_GetRemapChannel>
10054a96:	0003      	movs	r3, r0
10054a98:	b2db      	uxtb	r3, r3
}
10054a9a:	0018      	movs	r0, r3
10054a9c:	46bd      	mov	sp, r7
10054a9e:	b002      	add	sp, #8
10054aa0:	bd80      	pop	{r7, pc}

10054aa2 <BLEPLAT_CNTR_SmGetRxCount>:

void BLEPLAT_CNTR_SmGetRxCount(uint8_t smNo, uint32_t* packetCount)
{
10054aa2:	b590      	push	{r4, r7, lr}
10054aa4:	b083      	sub	sp, #12
10054aa6:	af00      	add	r7, sp, #0
10054aa8:	0002      	movs	r2, r0
10054aaa:	6039      	str	r1, [r7, #0]
10054aac:	1dfb      	adds	r3, r7, #7
10054aae:	701a      	strb	r2, [r3, #0]

    packetCount[0] = LL_RADIO_GetPacketCounterRx_23_0(smNo);
10054ab0:	1dfb      	adds	r3, r7, #7
10054ab2:	781b      	ldrb	r3, [r3, #0]
10054ab4:	0018      	movs	r0, r3
10054ab6:	f7ff f86d 	bl	10053b94 <LL_RADIO_GetPacketCounterRx_23_0>
10054aba:	0002      	movs	r2, r0
10054abc:	683b      	ldr	r3, [r7, #0]
10054abe:	601a      	str	r2, [r3, #0]
    packetCount[0] = packetCount[0] | ((uint32_t)LL_RADIO_GetPacketCounterRx_39_24(smNo) << 24U);
10054ac0:	683b      	ldr	r3, [r7, #0]
10054ac2:	681c      	ldr	r4, [r3, #0]
10054ac4:	1dfb      	adds	r3, r7, #7
10054ac6:	781b      	ldrb	r3, [r3, #0]
10054ac8:	0018      	movs	r0, r3
10054aca:	f7ff f89f 	bl	10053c0c <LL_RADIO_GetPacketCounterRx_39_24>
10054ace:	0003      	movs	r3, r0
10054ad0:	061b      	lsls	r3, r3, #24
10054ad2:	0022      	movs	r2, r4
10054ad4:	431a      	orrs	r2, r3
10054ad6:	683b      	ldr	r3, [r7, #0]
10054ad8:	601a      	str	r2, [r3, #0]
    packetCount[1] = LL_RADIO_GetPacketCounterRx_39_24(smNo) >> 8U;
10054ada:	1dfb      	adds	r3, r7, #7
10054adc:	781b      	ldrb	r3, [r3, #0]
10054ade:	0018      	movs	r0, r3
10054ae0:	f7ff f894 	bl	10053c0c <LL_RADIO_GetPacketCounterRx_39_24>
10054ae4:	0002      	movs	r2, r0
10054ae6:	683b      	ldr	r3, [r7, #0]
10054ae8:	3304      	adds	r3, #4
10054aea:	0a12      	lsrs	r2, r2, #8
10054aec:	601a      	str	r2, [r3, #0]
}
10054aee:	46c0      	nop			@ (mov r8, r8)
10054af0:	46bd      	mov	sp, r7
10054af2:	b003      	add	sp, #12
10054af4:	bd90      	pop	{r4, r7, pc}

10054af6 <BLEPLAT_CNTR_SmGetRxPhy>:

uint8_t BLEPLAT_CNTR_SmGetRxPhy(uint8_t smNo)
{
10054af6:	b580      	push	{r7, lr}
10054af8:	b082      	sub	sp, #8
10054afa:	af00      	add	r7, sp, #0
10054afc:	0002      	movs	r2, r0
10054afe:	1dfb      	adds	r3, r7, #7
10054b00:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetReceptionPhy(smNo);
10054b02:	1dfb      	adds	r3, r7, #7
10054b04:	781b      	ldrb	r3, [r3, #0]
10054b06:	0018      	movs	r0, r3
10054b08:	f7fe ff74 	bl	100539f4 <LL_RADIO_GetReceptionPhy>
10054b0c:	0003      	movs	r3, r0
10054b0e:	b2db      	uxtb	r3, r3
}
10054b10:	0018      	movs	r0, r3
10054b12:	46bd      	mov	sp, r7
10054b14:	b002      	add	sp, #8
10054b16:	bd80      	pop	{r7, pc}

10054b18 <BLEPLAT_CNTR_SmGetTxPhy>:
{
    return (BLEPLAT_CNTR_TXRXPACK_TypeDef*)BLUE_TRANS_STRUCT_PTR_CAST(CONV_ADR(LL_RADIO_GetTxPoint(smNo)));
}

uint8_t BLEPLAT_CNTR_SmGetTxPhy(uint8_t smNo)
{
10054b18:	b580      	push	{r7, lr}
10054b1a:	b082      	sub	sp, #8
10054b1c:	af00      	add	r7, sp, #0
10054b1e:	0002      	movs	r2, r0
10054b20:	1dfb      	adds	r3, r7, #7
10054b22:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetTransmissionPhy(smNo);
10054b24:	1dfb      	adds	r3, r7, #7
10054b26:	781b      	ldrb	r3, [r3, #0]
10054b28:	0018      	movs	r0, r3
10054b2a:	f7fe fefb 	bl	10053924 <LL_RADIO_GetTransmissionPhy>
10054b2e:	0003      	movs	r3, r0
10054b30:	b2db      	uxtb	r3, r3
}
10054b32:	0018      	movs	r0, r3
10054b34:	46bd      	mov	sp, r7
10054b36:	b002      	add	sp, #8
10054b38:	bd80      	pop	{r7, pc}

10054b3a <BLEPLAT_CNTR_SmGetTxPwr>:

uint8_t BLEPLAT_CNTR_SmGetTxPwr(uint8_t smNo)
{
10054b3a:	b580      	push	{r7, lr}
10054b3c:	b084      	sub	sp, #16
10054b3e:	af00      	add	r7, sp, #0
10054b40:	0002      	movs	r2, r0
10054b42:	1dfb      	adds	r3, r7, #7
10054b44:	701a      	strb	r2, [r3, #0]
    uint8_t pa_level = LL_RADIO_GetPAPower(smNo);
10054b46:	1dfb      	adds	r3, r7, #7
10054b48:	781b      	ldrb	r3, [r3, #0]
10054b4a:	0018      	movs	r0, r3
10054b4c:	f7ff f950 	bl	10053df0 <LL_RADIO_GetPAPower>
10054b50:	0002      	movs	r2, r0
10054b52:	210f      	movs	r1, #15
10054b54:	187b      	adds	r3, r7, r1
10054b56:	701a      	strb	r2, [r3, #0]
    if (LL_RADIO_TxHp_IsEnabled(smNo) && (pa_level == MAX_PA_LEVEL))
    {
        pa_level = HP_PA_LEVEL;
    }
#endif
    return pa_level;
10054b58:	187b      	adds	r3, r7, r1
10054b5a:	781b      	ldrb	r3, [r3, #0]
}
10054b5c:	0018      	movs	r0, r3
10054b5e:	46bd      	mov	sp, r7
10054b60:	b004      	add	sp, #16
10054b62:	bd80      	pop	{r7, pc}

10054b64 <BLEPLAT_CNTR_SmInitTo0>:
{
    return (uint8_t)LL_RADIO_GetUnmappedChannel(smNo);
}

void BLEPLAT_CNTR_SmInitTo0(uint8_t smNo)
{
10054b64:	b580      	push	{r7, lr}
10054b66:	b082      	sub	sp, #8
10054b68:	af00      	add	r7, sp, #0
10054b6a:	0002      	movs	r2, r0
10054b6c:	1dfb      	adds	r3, r7, #7
10054b6e:	701a      	strb	r2, [r3, #0]
  memset((void*)&bluedata[smNo], 0, sizeof(STATMACH_TypeDef));
10054b70:	1dfb      	adds	r3, r7, #7
10054b72:	781b      	ldrb	r3, [r3, #0]
10054b74:	225c      	movs	r2, #92	@ 0x5c
10054b76:	4353      	muls	r3, r2
10054b78:	4a08      	ldr	r2, [pc, #32]	@ (10054b9c <BLEPLAT_CNTR_SmInitTo0+0x38>)
10054b7a:	4694      	mov	ip, r2
10054b7c:	4463      	add	r3, ip
10054b7e:	225c      	movs	r2, #92	@ 0x5c
10054b80:	2100      	movs	r1, #0
10054b82:	0018      	movs	r0, r3
10054b84:	f013 fdda 	bl	1006873c <memset>
  BLEPLAT_CNTR_SmEnRadioConfig(smNo, 0x01);
10054b88:	1dfb      	adds	r3, r7, #7
10054b8a:	781b      	ldrb	r3, [r3, #0]
10054b8c:	2101      	movs	r1, #1
10054b8e:	0018      	movs	r0, r3
10054b90:	f7ff fe9c 	bl	100548cc <BLEPLAT_CNTR_SmEnRadioConfig>
}
10054b94:	46c0      	nop			@ (mov r8, r8)
10054b96:	46bd      	mov	sp, r7
10054b98:	b002      	add	sp, #8
10054b9a:	bd80      	pop	{r7, pc}
10054b9c:	200000dc 	.word	0x200000dc

10054ba0 <BLEPLAT_CNTR_SmSetAccessAddr>:

void BLEPLAT_CNTR_SmSetAccessAddr(uint8_t smNo, uint32_t x)
{
10054ba0:	b580      	push	{r7, lr}
10054ba2:	b082      	sub	sp, #8
10054ba4:	af00      	add	r7, sp, #0
10054ba6:	0002      	movs	r2, r0
10054ba8:	6039      	str	r1, [r7, #0]
10054baa:	1dfb      	adds	r3, r7, #7
10054bac:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetAccessAddress(smNo, x);
10054bae:	683a      	ldr	r2, [r7, #0]
10054bb0:	1dfb      	adds	r3, r7, #7
10054bb2:	781b      	ldrb	r3, [r3, #0]
10054bb4:	0011      	movs	r1, r2
10054bb6:	0018      	movs	r0, r3
10054bb8:	f7ff f87e 	bl	10053cb8 <LL_RADIO_SetAccessAddress>
}
10054bbc:	46c0      	nop			@ (mov r8, r8)
10054bbe:	46bd      	mov	sp, r7
10054bc0:	b002      	add	sp, #8
10054bc2:	bd80      	pop	{r7, pc}

10054bc4 <BLEPLAT_CNTR_SmSetChannelMap>:

void BLEPLAT_CNTR_SmSetChannelMap(uint8_t smNo, uint8_t* chanMap)
{
10054bc4:	b580      	push	{r7, lr}
10054bc6:	b084      	sub	sp, #16
10054bc8:	af00      	add	r7, sp, #0
10054bca:	0002      	movs	r2, r0
10054bcc:	6039      	str	r1, [r7, #0]
10054bce:	1dfb      	adds	r3, r7, #7
10054bd0:	701a      	strb	r2, [r3, #0]
    uint32_t value = (uint32_t)chanMap[0] | ((uint32_t)chanMap[1] << 8U);
10054bd2:	683b      	ldr	r3, [r7, #0]
10054bd4:	781b      	ldrb	r3, [r3, #0]
10054bd6:	001a      	movs	r2, r3
10054bd8:	683b      	ldr	r3, [r7, #0]
10054bda:	3301      	adds	r3, #1
10054bdc:	781b      	ldrb	r3, [r3, #0]
10054bde:	021b      	lsls	r3, r3, #8
10054be0:	4313      	orrs	r3, r2
10054be2:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetUsedChannelFlags_15_0(smNo, value);
10054be4:	68fa      	ldr	r2, [r7, #12]
10054be6:	1dfb      	adds	r3, r7, #7
10054be8:	781b      	ldrb	r3, [r3, #0]
10054bea:	0011      	movs	r1, r2
10054bec:	0018      	movs	r0, r3
10054bee:	f7ff f955 	bl	10053e9c <LL_RADIO_SetUsedChannelFlags_15_0>
    value = (uint32_t)chanMap[2] | ((uint32_t)chanMap[3] << 8U) | ((uint32_t)chanMap[4] << 16U);
10054bf2:	683b      	ldr	r3, [r7, #0]
10054bf4:	3302      	adds	r3, #2
10054bf6:	781b      	ldrb	r3, [r3, #0]
10054bf8:	001a      	movs	r2, r3
10054bfa:	683b      	ldr	r3, [r7, #0]
10054bfc:	3303      	adds	r3, #3
10054bfe:	781b      	ldrb	r3, [r3, #0]
10054c00:	021b      	lsls	r3, r3, #8
10054c02:	431a      	orrs	r2, r3
10054c04:	683b      	ldr	r3, [r7, #0]
10054c06:	3304      	adds	r3, #4
10054c08:	781b      	ldrb	r3, [r3, #0]
10054c0a:	041b      	lsls	r3, r3, #16
10054c0c:	4313      	orrs	r3, r2
10054c0e:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetUsedChannelFlags_36_16(smNo, value);
10054c10:	68fa      	ldr	r2, [r7, #12]
10054c12:	1dfb      	adds	r3, r7, #7
10054c14:	781b      	ldrb	r3, [r3, #0]
10054c16:	0011      	movs	r1, r2
10054c18:	0018      	movs	r0, r3
10054c1a:	f7ff f979 	bl	10053f10 <LL_RADIO_SetUsedChannelFlags_36_16>
}
10054c1e:	46c0      	nop			@ (mov r8, r8)
10054c20:	46bd      	mov	sp, r7
10054c22:	b004      	add	sp, #16
10054c24:	bd80      	pop	{r7, pc}

10054c26 <BLEPLAT_CNTR_SmSetCrcInit>:

void BLEPLAT_CNTR_SmSetCrcInit(uint8_t smNo, uint32_t x)
{
10054c26:	b580      	push	{r7, lr}
10054c28:	b082      	sub	sp, #8
10054c2a:	af00      	add	r7, sp, #0
10054c2c:	0002      	movs	r2, r0
10054c2e:	6039      	str	r1, [r7, #0]
10054c30:	1dfb      	adds	r3, r7, #7
10054c32:	701a      	strb	r2, [r3, #0]
  LL_RADIO_SetCRCInitializationValue(smNo, x);
10054c34:	683a      	ldr	r2, [r7, #0]
10054c36:	1dfb      	adds	r3, r7, #7
10054c38:	781b      	ldrb	r3, [r3, #0]
10054c3a:	0011      	movs	r1, r2
10054c3c:	0018      	movs	r0, r3
10054c3e:	f7ff f86d 	bl	10053d1c <LL_RADIO_SetCRCInitializationValue>
}
10054c42:	46c0      	nop			@ (mov r8, r8)
10054c44:	46bd      	mov	sp, r7
10054c46:	b002      	add	sp, #8
10054c48:	bd80      	pop	{r7, pc}

10054c4a <BLEPLAT_CNTR_SmSetDataLength>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmSetDataLength(uint8_t smNo, uint8_t length)
{
10054c4a:	b580      	push	{r7, lr}
10054c4c:	b082      	sub	sp, #8
10054c4e:	af00      	add	r7, sp, #0
10054c50:	0002      	movs	r2, r0
10054c52:	1dfb      	adds	r3, r7, #7
10054c54:	701a      	strb	r2, [r3, #0]
10054c56:	1dbb      	adds	r3, r7, #6
10054c58:	1c0a      	adds	r2, r1, #0
10054c5a:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetMaximumReceiveLength(smNo, (uint32_t) length);
10054c5c:	1dbb      	adds	r3, r7, #6
10054c5e:	781a      	ldrb	r2, [r3, #0]
10054c60:	1dfb      	adds	r3, r7, #7
10054c62:	781b      	ldrb	r3, [r3, #0]
10054c64:	0011      	movs	r1, r2
10054c66:	0018      	movs	r0, r3
10054c68:	f7ff f87c 	bl	10053d64 <LL_RADIO_SetMaximumReceiveLength>
}
10054c6c:	46c0      	nop			@ (mov r8, r8)
10054c6e:	46bd      	mov	sp, r7
10054c70:	b002      	add	sp, #8
10054c72:	bd80      	pop	{r7, pc}

10054c74 <BLEPLAT_CNTR_SmSetHopIncr>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SmSetHopIncr(uint8_t smNo, uint8_t x)
{
10054c74:	b580      	push	{r7, lr}
10054c76:	b082      	sub	sp, #8
10054c78:	af00      	add	r7, sp, #0
10054c7a:	0002      	movs	r2, r0
10054c7c:	1dfb      	adds	r3, r7, #7
10054c7e:	701a      	strb	r2, [r3, #0]
10054c80:	1dbb      	adds	r3, r7, #6
10054c82:	1c0a      	adds	r2, r1, #0
10054c84:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetHopIncrement(smNo, (uint32_t) x);
10054c86:	1dbb      	adds	r3, r7, #6
10054c88:	781a      	ldrb	r2, [r3, #0]
10054c8a:	1dfb      	adds	r3, r7, #7
10054c8c:	781b      	ldrb	r3, [r3, #0]
10054c8e:	0011      	movs	r1, r2
10054c90:	0018      	movs	r0, r3
10054c92:	f7ff f8c3 	bl	10053e1c <LL_RADIO_SetHopIncrement>
}
10054c96:	46c0      	nop			@ (mov r8, r8)
10054c98:	46bd      	mov	sp, r7
10054c9a:	b002      	add	sp, #8
10054c9c:	bd80      	pop	{r7, pc}

10054c9e <BLEPLAT_CNTR_SmSetRemapChan>:

void BLEPLAT_CNTR_SmSetRemapChan(uint8_t smNo, uint8_t chan)
{
10054c9e:	b580      	push	{r7, lr}
10054ca0:	b082      	sub	sp, #8
10054ca2:	af00      	add	r7, sp, #0
10054ca4:	0002      	movs	r2, r0
10054ca6:	1dfb      	adds	r3, r7, #7
10054ca8:	701a      	strb	r2, [r3, #0]
10054caa:	1dbb      	adds	r3, r7, #6
10054cac:	1c0a      	adds	r2, r1, #0
10054cae:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRemapChannel(smNo, chan);
10054cb0:	1dbb      	adds	r3, r7, #6
10054cb2:	781a      	ldrb	r2, [r3, #0]
10054cb4:	1dfb      	adds	r3, r7, #7
10054cb6:	781b      	ldrb	r3, [r3, #0]
10054cb8:	0011      	movs	r1, r2
10054cba:	0018      	movs	r0, r3
10054cbc:	f7fe fd6a 	bl	10053794 <LL_RADIO_SetRemapChannel>
}
10054cc0:	46c0      	nop			@ (mov r8, r8)
10054cc2:	46bd      	mov	sp, r7
10054cc4:	b002      	add	sp, #8
10054cc6:	bd80      	pop	{r7, pc}

10054cc8 <BLEPLAT_CNTR_SmSetRxCount>:

void BLEPLAT_CNTR_SmSetRxCount(uint8_t smNo, uint32_t* packetCount)
{
10054cc8:	b580      	push	{r7, lr}
10054cca:	b084      	sub	sp, #16
10054ccc:	af00      	add	r7, sp, #0
10054cce:	0002      	movs	r2, r0
10054cd0:	6039      	str	r1, [r7, #0]
10054cd2:	1dfb      	adds	r3, r7, #7
10054cd4:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetPacketCounterRx_23_0(smNo, (uint32_t) packetCount[0]);
10054cd6:	683b      	ldr	r3, [r7, #0]
10054cd8:	681a      	ldr	r2, [r3, #0]
10054cda:	1dfb      	adds	r3, r7, #7
10054cdc:	781b      	ldrb	r3, [r3, #0]
10054cde:	0011      	movs	r1, r2
10054ce0:	0018      	movs	r0, r3
10054ce2:	f7fe ff33 	bl	10053b4c <LL_RADIO_SetPacketCounterRx_23_0>
    uint32_t value = (uint32_t)(packetCount[1] << 8U) | (uint32_t)(packetCount[0] >> 24U);
10054ce6:	683b      	ldr	r3, [r7, #0]
10054ce8:	3304      	adds	r3, #4
10054cea:	681b      	ldr	r3, [r3, #0]
10054cec:	021a      	lsls	r2, r3, #8
10054cee:	683b      	ldr	r3, [r7, #0]
10054cf0:	681b      	ldr	r3, [r3, #0]
10054cf2:	0e1b      	lsrs	r3, r3, #24
10054cf4:	4313      	orrs	r3, r2
10054cf6:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
10054cf8:	68fa      	ldr	r2, [r7, #12]
10054cfa:	1dfb      	adds	r3, r7, #7
10054cfc:	781b      	ldrb	r3, [r3, #0]
10054cfe:	0011      	movs	r1, r2
10054d00:	0018      	movs	r0, r3
10054d02:	f7fe ff5f 	bl	10053bc4 <LL_RADIO_SetPacketCounterRx_39_24>
}
10054d06:	46c0      	nop			@ (mov r8, r8)
10054d08:	46bd      	mov	sp, r7
10054d0a:	b004      	add	sp, #16
10054d0c:	bd80      	pop	{r7, pc}

10054d0e <BLEPLAT_CNTR_SmSetRxCountDirectionBit>:

void BLEPLAT_CNTR_SmSetRxCountDirectionBit(uint8_t smNo)
{
10054d0e:	b580      	push	{r7, lr}
10054d10:	b084      	sub	sp, #16
10054d12:	af00      	add	r7, sp, #0
10054d14:	0002      	movs	r2, r0
10054d16:	1dfb      	adds	r3, r7, #7
10054d18:	701a      	strb	r2, [r3, #0]
    uint32_t value = LL_RADIO_GetPacketCounterRx_39_24(smNo) | 0x8000U;
10054d1a:	1dfb      	adds	r3, r7, #7
10054d1c:	781b      	ldrb	r3, [r3, #0]
10054d1e:	0018      	movs	r0, r3
10054d20:	f7fe ff74 	bl	10053c0c <LL_RADIO_GetPacketCounterRx_39_24>
10054d24:	0002      	movs	r2, r0
10054d26:	2380      	movs	r3, #128	@ 0x80
10054d28:	021b      	lsls	r3, r3, #8
10054d2a:	4313      	orrs	r3, r2
10054d2c:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
10054d2e:	68fa      	ldr	r2, [r7, #12]
10054d30:	1dfb      	adds	r3, r7, #7
10054d32:	781b      	ldrb	r3, [r3, #0]
10054d34:	0011      	movs	r1, r2
10054d36:	0018      	movs	r0, r3
10054d38:	f7fe ff44 	bl	10053bc4 <LL_RADIO_SetPacketCounterRx_39_24>
}
10054d3c:	46c0      	nop			@ (mov r8, r8)
10054d3e:	46bd      	mov	sp, r7
10054d40:	b004      	add	sp, #16
10054d42:	bd80      	pop	{r7, pc}

10054d44 <BLEPLAT_CNTR_SmSetRxMode>:

void BLEPLAT_CNTR_SmSetRxMode(uint8_t smNo)
{
10054d44:	b580      	push	{r7, lr}
10054d46:	b082      	sub	sp, #8
10054d48:	af00      	add	r7, sp, #0
10054d4a:	0002      	movs	r2, r0
10054d4c:	1dfb      	adds	r3, r7, #7
10054d4e:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Disable(smNo);
10054d50:	1dfb      	adds	r3, r7, #7
10054d52:	781b      	ldrb	r3, [r3, #0]
10054d54:	0018      	movs	r0, r3
10054d56:	f7fe fce3 	bl	10053720 <LL_RADIO_TxMode_Disable>
}
10054d5a:	46c0      	nop			@ (mov r8, r8)
10054d5c:	46bd      	mov	sp, r7
10054d5e:	b002      	add	sp, #8
10054d60:	bd80      	pop	{r7, pc}

10054d62 <BLEPLAT_CNTR_SmSetRxPacketPtr>:

void BLEPLAT_CNTR_SmSetRxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10054d62:	b580      	push	{r7, lr}
10054d64:	b082      	sub	sp, #8
10054d66:	af00      	add	r7, sp, #0
10054d68:	0002      	movs	r2, r0
10054d6a:	6039      	str	r1, [r7, #0]
10054d6c:	1dfb      	adds	r3, r7, #7
10054d6e:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRcvPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
10054d70:	683a      	ldr	r2, [r7, #0]
10054d72:	1dfb      	adds	r3, r7, #7
10054d74:	781b      	ldrb	r3, [r3, #0]
10054d76:	0011      	movs	r1, r2
10054d78:	0018      	movs	r0, r3
10054d7a:	f7fe fe71 	bl	10053a60 <LL_RADIO_SetRcvPoint>
}
10054d7e:	46c0      	nop			@ (mov r8, r8)
10054d80:	46bd      	mov	sp, r7
10054d82:	b002      	add	sp, #8
10054d84:	bd80      	pop	{r7, pc}

10054d86 <BLEPLAT_CNTR_SmSetRxPhy>:

void BLEPLAT_CNTR_SmSetRxPhy(uint8_t smNo, uint8_t rxPhy)
{
10054d86:	b580      	push	{r7, lr}
10054d88:	b082      	sub	sp, #8
10054d8a:	af00      	add	r7, sp, #0
10054d8c:	0002      	movs	r2, r0
10054d8e:	1dfb      	adds	r3, r7, #7
10054d90:	701a      	strb	r2, [r3, #0]
10054d92:	1dbb      	adds	r3, r7, #6
10054d94:	1c0a      	adds	r2, r1, #0
10054d96:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetReceptionPhy(smNo, (uint32_t) rxPhy);
10054d98:	1dbb      	adds	r3, r7, #6
10054d9a:	781a      	ldrb	r2, [r3, #0]
10054d9c:	1dfb      	adds	r3, r7, #7
10054d9e:	781b      	ldrb	r3, [r3, #0]
10054da0:	0011      	movs	r1, r2
10054da2:	0018      	movs	r0, r3
10054da4:	f7fe fdfe 	bl	100539a4 <LL_RADIO_SetReceptionPhy>
}
10054da8:	46c0      	nop			@ (mov r8, r8)
10054daa:	46bd      	mov	sp, r7
10054dac:	b002      	add	sp, #8
10054dae:	bd80      	pop	{r7, pc}

10054db0 <BLEPLAT_CNTR_SmSetTxCount>:

void BLEPLAT_CNTR_SmSetTxCount(uint8_t smNo, uint32_t* packetCount)
{
10054db0:	b580      	push	{r7, lr}
10054db2:	b082      	sub	sp, #8
10054db4:	af00      	add	r7, sp, #0
10054db6:	0002      	movs	r2, r0
10054db8:	6039      	str	r1, [r7, #0]
10054dba:	1dfb      	adds	r3, r7, #7
10054dbc:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetPacketCounterTx_31_0(smNo, (uint32_t) packetCount[0]);
10054dbe:	683b      	ldr	r3, [r7, #0]
10054dc0:	681a      	ldr	r2, [r3, #0]
10054dc2:	1dfb      	adds	r3, r7, #7
10054dc4:	781b      	ldrb	r3, [r3, #0]
10054dc6:	0011      	movs	r1, r2
10054dc8:	0018      	movs	r0, r3
10054dca:	f7fe fe67 	bl	10053a9c <LL_RADIO_SetPacketCounterTx_31_0>
    LL_RADIO_SetPacketCounterTx_39_32(smNo, (uint32_t) packetCount[1]);
10054dce:	683b      	ldr	r3, [r7, #0]
10054dd0:	3304      	adds	r3, #4
10054dd2:	681a      	ldr	r2, [r3, #0]
10054dd4:	1dfb      	adds	r3, r7, #7
10054dd6:	781b      	ldrb	r3, [r3, #0]
10054dd8:	0011      	movs	r1, r2
10054dda:	0018      	movs	r0, r3
10054ddc:	f7fe fe7c 	bl	10053ad8 <LL_RADIO_SetPacketCounterTx_39_32>
}
10054de0:	46c0      	nop			@ (mov r8, r8)
10054de2:	46bd      	mov	sp, r7
10054de4:	b002      	add	sp, #8
10054de6:	bd80      	pop	{r7, pc}

10054de8 <BLEPLAT_CNTR_SmSetTxCountDirectionBit>:

void BLEPLAT_CNTR_SmSetTxCountDirectionBit(uint8_t smNo)
{
10054de8:	b580      	push	{r7, lr}
10054dea:	b084      	sub	sp, #16
10054dec:	af00      	add	r7, sp, #0
10054dee:	0002      	movs	r2, r0
10054df0:	1dfb      	adds	r3, r7, #7
10054df2:	701a      	strb	r2, [r3, #0]
    uint32_t value =  (LL_RADIO_GetPacketCounterTx_39_32(smNo) | 0x00000080U);
10054df4:	1dfb      	adds	r3, r7, #7
10054df6:	781b      	ldrb	r3, [r3, #0]
10054df8:	0018      	movs	r0, r3
10054dfa:	f7fe fe91 	bl	10053b20 <LL_RADIO_GetPacketCounterTx_39_32>
10054dfe:	0003      	movs	r3, r0
10054e00:	2280      	movs	r2, #128	@ 0x80
10054e02:	4313      	orrs	r3, r2
10054e04:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterTx_39_32(smNo,  value);
10054e06:	68fa      	ldr	r2, [r7, #12]
10054e08:	1dfb      	adds	r3, r7, #7
10054e0a:	781b      	ldrb	r3, [r3, #0]
10054e0c:	0011      	movs	r1, r2
10054e0e:	0018      	movs	r0, r3
10054e10:	f7fe fe62 	bl	10053ad8 <LL_RADIO_SetPacketCounterTx_39_32>
}
10054e14:	46c0      	nop			@ (mov r8, r8)
10054e16:	46bd      	mov	sp, r7
10054e18:	b004      	add	sp, #16
10054e1a:	bd80      	pop	{r7, pc}

10054e1c <BLEPLAT_CNTR_SmSetTxMode>:

void BLEPLAT_CNTR_SmSetTxMode(uint8_t smNo)
{
10054e1c:	b580      	push	{r7, lr}
10054e1e:	b082      	sub	sp, #8
10054e20:	af00      	add	r7, sp, #0
10054e22:	0002      	movs	r2, r0
10054e24:	1dfb      	adds	r3, r7, #7
10054e26:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Enable(smNo);
10054e28:	1dfb      	adds	r3, r7, #7
10054e2a:	781b      	ldrb	r3, [r3, #0]
10054e2c:	0018      	movs	r0, r3
10054e2e:	f7fe fc59 	bl	100536e4 <LL_RADIO_TxMode_Enable>
}
10054e32:	46c0      	nop			@ (mov r8, r8)
10054e34:	46bd      	mov	sp, r7
10054e36:	b002      	add	sp, #8
10054e38:	bd80      	pop	{r7, pc}

10054e3a <BLEPLAT_CNTR_SmSetTxPacketPtr>:

void BLEPLAT_CNTR_SmSetTxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10054e3a:	b580      	push	{r7, lr}
10054e3c:	b082      	sub	sp, #8
10054e3e:	af00      	add	r7, sp, #0
10054e40:	0002      	movs	r2, r0
10054e42:	6039      	str	r1, [r7, #0]
10054e44:	1dfb      	adds	r3, r7, #7
10054e46:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTxPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
10054e48:	683a      	ldr	r2, [r7, #0]
10054e4a:	1dfb      	adds	r3, r7, #7
10054e4c:	781b      	ldrb	r3, [r3, #0]
10054e4e:	0011      	movs	r1, r2
10054e50:	0018      	movs	r0, r3
10054e52:	f7fe fde7 	bl	10053a24 <LL_RADIO_SetTxPoint>
}
10054e56:	46c0      	nop			@ (mov r8, r8)
10054e58:	46bd      	mov	sp, r7
10054e5a:	b002      	add	sp, #8
10054e5c:	bd80      	pop	{r7, pc}

10054e5e <BLEPLAT_CNTR_SmSetTxPhy>:

void BLEPLAT_CNTR_SmSetTxPhy(uint8_t smNo, uint8_t txPhy)
{
10054e5e:	b580      	push	{r7, lr}
10054e60:	b082      	sub	sp, #8
10054e62:	af00      	add	r7, sp, #0
10054e64:	0002      	movs	r2, r0
10054e66:	1dfb      	adds	r3, r7, #7
10054e68:	701a      	strb	r2, [r3, #0]
10054e6a:	1dbb      	adds	r3, r7, #6
10054e6c:	1c0a      	adds	r2, r1, #0
10054e6e:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTransmissionPhy(smNo, (uint32_t) txPhy);
10054e70:	1dbb      	adds	r3, r7, #6
10054e72:	781a      	ldrb	r2, [r3, #0]
10054e74:	1dfb      	adds	r3, r7, #7
10054e76:	781b      	ldrb	r3, [r3, #0]
10054e78:	0011      	movs	r1, r2
10054e7a:	0018      	movs	r0, r3
10054e7c:	f7fe fd2a 	bl	100538d4 <LL_RADIO_SetTransmissionPhy>
}
10054e80:	46c0      	nop			@ (mov r8, r8)
10054e82:	46bd      	mov	sp, r7
10054e84:	b002      	add	sp, #8
10054e86:	bd80      	pop	{r7, pc}

10054e88 <BLEPLAT_CNTR_SmSetTxPwr>:
#endif
}

/* Consider PA Level 32 the one used to enable high power. */
void BLEPLAT_CNTR_SmSetTxPwr(uint8_t smNo, uint8_t paLevel)
{
10054e88:	b580      	push	{r7, lr}
10054e8a:	b082      	sub	sp, #8
10054e8c:	af00      	add	r7, sp, #0
10054e8e:	0002      	movs	r2, r0
10054e90:	1dfb      	adds	r3, r7, #7
10054e92:	701a      	strb	r2, [r3, #0]
10054e94:	1dbb      	adds	r3, r7, #6
10054e96:	1c0a      	adds	r2, r1, #0
10054e98:	701a      	strb	r2, [r3, #0]
  {
    LL_RADIO_TxHp_Disable(smNo);
  }
#endif

  LL_RADIO_SetPAPower(smNo, (uint32_t) paLevel);
10054e9a:	1dbb      	adds	r3, r7, #6
10054e9c:	781a      	ldrb	r2, [r3, #0]
10054e9e:	1dfb      	adds	r3, r7, #7
10054ea0:	781b      	ldrb	r3, [r3, #0]
10054ea2:	0011      	movs	r1, r2
10054ea4:	0018      	movs	r0, r3
10054ea6:	f7fe ff7f 	bl	10053da8 <LL_RADIO_SetPAPower>
}
10054eaa:	46c0      	nop			@ (mov r8, r8)
10054eac:	46bd      	mov	sp, r7
10054eae:	b002      	add	sp, #8
10054eb0:	bd80      	pop	{r7, pc}

10054eb2 <BLEPLAT_CNTR_SmSetUnmappedChan>:

void BLEPLAT_CNTR_SmSetUnmappedChan(uint8_t smNo, uint8_t chan)
{
10054eb2:	b580      	push	{r7, lr}
10054eb4:	b082      	sub	sp, #8
10054eb6:	af00      	add	r7, sp, #0
10054eb8:	0002      	movs	r2, r0
10054eba:	1dfb      	adds	r3, r7, #7
10054ebc:	701a      	strb	r2, [r3, #0]
10054ebe:	1dbb      	adds	r3, r7, #6
10054ec0:	1c0a      	adds	r2, r1, #0
10054ec2:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetUnmappedChannel(smNo, (uint32_t) chan);
10054ec4:	1dbb      	adds	r3, r7, #6
10054ec6:	781a      	ldrb	r2, [r3, #0]
10054ec8:	1dfb      	adds	r3, r7, #7
10054eca:	781b      	ldrb	r3, [r3, #0]
10054ecc:	0011      	movs	r1, r2
10054ece:	0018      	movs	r0, r3
10054ed0:	f7fe fba8 	bl	10053624 <LL_RADIO_SetUnmappedChannel>
}
10054ed4:	46c0      	nop			@ (mov r8, r8)
10054ed6:	46bd      	mov	sp, r7
10054ed8:	b002      	add	sp, #8
10054eda:	bd80      	pop	{r7, pc}

10054edc <BLEPLAT_CNTR_SmToggleNesn>:

void BLEPLAT_CNTR_SmToggleNesn(uint8_t smNo)
{
10054edc:	b580      	push	{r7, lr}
10054ede:	b082      	sub	sp, #8
10054ee0:	af00      	add	r7, sp, #0
10054ee2:	0002      	movs	r2, r0
10054ee4:	1dfb      	adds	r3, r7, #7
10054ee6:	701a      	strb	r2, [r3, #0]
  LL_RADIO_ToggleNextExpectedSequenceNumber(smNo);
10054ee8:	1dfb      	adds	r3, r7, #7
10054eea:	781b      	ldrb	r3, [r3, #0]
10054eec:	0018      	movs	r0, r3
10054eee:	f7fe fc91 	bl	10053814 <LL_RADIO_ToggleNextExpectedSequenceNumber>
}
10054ef2:	46c0      	nop			@ (mov r8, r8)
10054ef4:	46bd      	mov	sp, r7
10054ef6:	b002      	add	sp, #8
10054ef8:	bd80      	pop	{r7, pc}

10054efa <BLEPLAT_CNTR_DemodDelaySt>:
{
    return (uint32_t)(x - y);
}

uint8_t BLEPLAT_CNTR_DemodDelaySt(uint8_t RxPHY)
{
10054efa:	b580      	push	{r7, lr}
10054efc:	b082      	sub	sp, #8
10054efe:	af00      	add	r7, sp, #0
10054f00:	0002      	movs	r2, r0
10054f02:	1dfb      	adds	r3, r7, #7
10054f04:	701a      	strb	r2, [r3, #0]
    return (uint8_t)((LL_PHY_CODED == RxPHY) ? 0x9DU : 0x12U);
10054f06:	1dfb      	adds	r3, r7, #7
10054f08:	781b      	ldrb	r3, [r3, #0]
10054f0a:	2b04      	cmp	r3, #4
10054f0c:	d101      	bne.n	10054f12 <BLEPLAT_CNTR_DemodDelaySt+0x18>
10054f0e:	239d      	movs	r3, #157	@ 0x9d
10054f10:	e000      	b.n	10054f14 <BLEPLAT_CNTR_DemodDelaySt+0x1a>
10054f12:	2312      	movs	r3, #18
}
10054f14:	0018      	movs	r0, r3
10054f16:	46bd      	mov	sp, r7
10054f18:	b002      	add	sp, #8
10054f1a:	bd80      	pop	{r7, pc}

10054f1c <APP_DEBUG_SIGNAL_SET>:
/****************************/
/** Application debug APIs **/
/****************************/

void APP_DEBUG_SIGNAL_SET(app_debug_signal_t signal)
{
10054f1c:	b580      	push	{r7, lr}
10054f1e:	b082      	sub	sp, #8
10054f20:	af00      	add	r7, sp, #0
10054f22:	0002      	movs	r2, r0
10054f24:	1dfb      	adds	r3, r7, #7
10054f26:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10054f28:	46c0      	nop			@ (mov r8, r8)
10054f2a:	46bd      	mov	sp, r7
10054f2c:	b002      	add	sp, #8
10054f2e:	bd80      	pop	{r7, pc}

10054f30 <APP_DEBUG_SIGNAL_RESET>:
void APP_DEBUG_SIGNAL_RESET(app_debug_signal_t signal)
{
10054f30:	b580      	push	{r7, lr}
10054f32:	b082      	sub	sp, #8
10054f34:	af00      	add	r7, sp, #0
10054f36:	0002      	movs	r2, r0
10054f38:	1dfb      	adds	r3, r7, #7
10054f3a:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_RESET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10054f3c:	46c0      	nop			@ (mov r8, r8)
10054f3e:	46bd      	mov	sp, r7
10054f40:	b002      	add	sp, #8
10054f42:	bd80      	pop	{r7, pc}

10054f44 <RT_DEBUG_GPIO_Init>:
/*******************************/
/** Debug GPIO Initialization **/
/*******************************/

void RT_DEBUG_GPIO_Init(void)
{
10054f44:	b580      	push	{r7, lr}
10054f46:	af00      	add	r7, sp, #0
      GPIO_InitStruct.Pin = general_debug_table[cpt].GPIO_pin;
      HAL_GPIO_Init(general_debug_table[cpt].GPIO_port, &GPIO_InitStruct);
    }
  }
#endif /* RT_DEBUG_GPIO_MODULE */
}
10054f48:	46c0      	nop			@ (mov r8, r8)
10054f4a:	46bd      	mov	sp, r7
10054f4c:	bd80      	pop	{r7, pc}
	...

10054f50 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
10054f50:	b580      	push	{r7, lr}
10054f52:	b090      	sub	sp, #64	@ 0x40
10054f54:	af00      	add	r7, sp, #0
10054f56:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
10054f58:	4b75      	ldr	r3, [pc, #468]	@ (10055130 <UTIL_SEQ_Run+0x1e0>)
10054f5a:	681b      	ldr	r3, [r3, #0]
10054f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
10054f5e:	4b74      	ldr	r3, [pc, #464]	@ (10055130 <UTIL_SEQ_Run+0x1e0>)
10054f60:	681b      	ldr	r3, [r3, #0]
10054f62:	687a      	ldr	r2, [r7, #4]
10054f64:	401a      	ands	r2, r3
10054f66:	4b72      	ldr	r3, [pc, #456]	@ (10055130 <UTIL_SEQ_Run+0x1e0>)
10054f68:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
10054f6a:	4b72      	ldr	r3, [pc, #456]	@ (10055134 <UTIL_SEQ_Run+0x1e4>)
10054f6c:	681b      	ldr	r3, [r3, #0]
10054f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
10054f70:	4b71      	ldr	r3, [pc, #452]	@ (10055138 <UTIL_SEQ_Run+0x1e8>)
10054f72:	681b      	ldr	r3, [r3, #0]
10054f74:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
10054f76:	4b71      	ldr	r3, [pc, #452]	@ (1005513c <UTIL_SEQ_Run+0x1ec>)
10054f78:	681b      	ldr	r3, [r3, #0]
10054f7a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
10054f7c:	4b70      	ldr	r3, [pc, #448]	@ (10055140 <UTIL_SEQ_Run+0x1f0>)
10054f7e:	681b      	ldr	r3, [r3, #0]
10054f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
10054f82:	e090      	b.n	100550a6 <UTIL_SEQ_Run+0x156>
  {
    counter = 0U;
10054f84:	2300      	movs	r3, #0
10054f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
10054f88:	e002      	b.n	10054f90 <UTIL_SEQ_Run+0x40>
    {
      counter++;
10054f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10054f8c:	3301      	adds	r3, #1
10054f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
10054f90:	4b6c      	ldr	r3, [pc, #432]	@ (10055144 <UTIL_SEQ_Run+0x1f4>)
10054f92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10054f94:	00d2      	lsls	r2, r2, #3
10054f96:	58d3      	ldr	r3, [r2, r3]
10054f98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10054f9a:	401a      	ands	r2, r3
10054f9c:	4b64      	ldr	r3, [pc, #400]	@ (10055130 <UTIL_SEQ_Run+0x1e0>)
10054f9e:	681b      	ldr	r3, [r3, #0]
10054fa0:	4013      	ands	r3, r2
10054fa2:	d0f2      	beq.n	10054f8a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
10054fa4:	4b67      	ldr	r3, [pc, #412]	@ (10055144 <UTIL_SEQ_Run+0x1f4>)
10054fa6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10054fa8:	00d2      	lsls	r2, r2, #3
10054faa:	58d3      	ldr	r3, [r2, r3]
10054fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10054fae:	401a      	ands	r2, r3
10054fb0:	4b5f      	ldr	r3, [pc, #380]	@ (10055130 <UTIL_SEQ_Run+0x1e0>)
10054fb2:	681b      	ldr	r3, [r3, #0]
10054fb4:	4013      	ands	r3, r2
10054fb6:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
10054fb8:	4a62      	ldr	r2, [pc, #392]	@ (10055144 <UTIL_SEQ_Run+0x1f4>)
10054fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10054fbc:	00db      	lsls	r3, r3, #3
10054fbe:	18d3      	adds	r3, r2, r3
10054fc0:	3304      	adds	r3, #4
10054fc2:	681b      	ldr	r3, [r3, #0]
10054fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10054fc6:	4013      	ands	r3, r2
10054fc8:	d107      	bne.n	10054fda <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
10054fca:	4a5e      	ldr	r2, [pc, #376]	@ (10055144 <UTIL_SEQ_Run+0x1f4>)
10054fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10054fce:	00db      	lsls	r3, r3, #3
10054fd0:	18d3      	adds	r3, r2, r3
10054fd2:	3304      	adds	r3, #4
10054fd4:	2201      	movs	r2, #1
10054fd6:	4252      	negs	r2, r2
10054fd8:	601a      	str	r2, [r3, #0]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
10054fda:	4a5a      	ldr	r2, [pc, #360]	@ (10055144 <UTIL_SEQ_Run+0x1f4>)
10054fdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10054fde:	00db      	lsls	r3, r3, #3
10054fe0:	18d3      	adds	r3, r2, r3
10054fe2:	3304      	adds	r3, #4
10054fe4:	681b      	ldr	r3, [r3, #0]
10054fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10054fe8:	4013      	ands	r3, r2
10054fea:	0018      	movs	r0, r3
10054fec:	f000 f97c 	bl	100552e8 <SEQ_BitPosition>
10054ff0:	0003      	movs	r3, r0
10054ff2:	001a      	movs	r2, r3
10054ff4:	4b54      	ldr	r3, [pc, #336]	@ (10055148 <UTIL_SEQ_Run+0x1f8>)
10054ff6:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
10054ff8:	4a52      	ldr	r2, [pc, #328]	@ (10055144 <UTIL_SEQ_Run+0x1f4>)
10054ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10054ffc:	00db      	lsls	r3, r3, #3
10054ffe:	18d3      	adds	r3, r2, r3
10055000:	3304      	adds	r3, #4
10055002:	681a      	ldr	r2, [r3, #0]
10055004:	4b50      	ldr	r3, [pc, #320]	@ (10055148 <UTIL_SEQ_Run+0x1f8>)
10055006:	681b      	ldr	r3, [r3, #0]
10055008:	2101      	movs	r1, #1
1005500a:	4099      	lsls	r1, r3
1005500c:	000b      	movs	r3, r1
1005500e:	43db      	mvns	r3, r3
10055010:	401a      	ands	r2, r3
10055012:	494c      	ldr	r1, [pc, #304]	@ (10055144 <UTIL_SEQ_Run+0x1f4>)
10055014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10055016:	00db      	lsls	r3, r3, #3
10055018:	18cb      	adds	r3, r1, r3
1005501a:	3304      	adds	r3, #4
1005501c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1005501e:	f3ef 8310 	mrs	r3, PRIMASK
10055022:	61bb      	str	r3, [r7, #24]
  return(result);
10055024:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10055026:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
10055028:	b672      	cpsid	i
}
1005502a:	46c0      	nop			@ (mov r8, r8)
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
1005502c:	4b46      	ldr	r3, [pc, #280]	@ (10055148 <UTIL_SEQ_Run+0x1f8>)
1005502e:	681b      	ldr	r3, [r3, #0]
10055030:	2201      	movs	r2, #1
10055032:	409a      	lsls	r2, r3
10055034:	0013      	movs	r3, r2
10055036:	43da      	mvns	r2, r3
10055038:	4b3e      	ldr	r3, [pc, #248]	@ (10055134 <UTIL_SEQ_Run+0x1e4>)
1005503a:	681b      	ldr	r3, [r3, #0]
1005503c:	401a      	ands	r2, r3
1005503e:	4b3d      	ldr	r3, [pc, #244]	@ (10055134 <UTIL_SEQ_Run+0x1e4>)
10055040:	601a      	str	r2, [r3, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
10055042:	2302      	movs	r3, #2
10055044:	63fb      	str	r3, [r7, #60]	@ 0x3c
10055046:	e013      	b.n	10055070 <UTIL_SEQ_Run+0x120>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
10055048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1005504a:	1e5a      	subs	r2, r3, #1
1005504c:	4b3d      	ldr	r3, [pc, #244]	@ (10055144 <UTIL_SEQ_Run+0x1f4>)
1005504e:	00d2      	lsls	r2, r2, #3
10055050:	58d1      	ldr	r1, [r2, r3]
10055052:	4b3d      	ldr	r3, [pc, #244]	@ (10055148 <UTIL_SEQ_Run+0x1f8>)
10055054:	681b      	ldr	r3, [r3, #0]
10055056:	2201      	movs	r2, #1
10055058:	409a      	lsls	r2, r3
1005505a:	0013      	movs	r3, r2
1005505c:	43db      	mvns	r3, r3
1005505e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10055060:	3a01      	subs	r2, #1
10055062:	4019      	ands	r1, r3
10055064:	4b37      	ldr	r3, [pc, #220]	@ (10055144 <UTIL_SEQ_Run+0x1f4>)
10055066:	00d2      	lsls	r2, r2, #3
10055068:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
1005506a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1005506c:	3b01      	subs	r3, #1
1005506e:	63fb      	str	r3, [r7, #60]	@ 0x3c
10055070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10055072:	2b00      	cmp	r3, #0
10055074:	d1e8      	bne.n	10055048 <UTIL_SEQ_Run+0xf8>
10055076:	6a3b      	ldr	r3, [r7, #32]
10055078:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005507a:	697b      	ldr	r3, [r7, #20]
1005507c:	f383 8810 	msr	PRIMASK, r3
}
10055080:	46c0      	nop			@ (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
10055082:	4b31      	ldr	r3, [pc, #196]	@ (10055148 <UTIL_SEQ_Run+0x1f8>)
10055084:	681a      	ldr	r2, [r3, #0]
10055086:	4b31      	ldr	r3, [pc, #196]	@ (1005514c <UTIL_SEQ_Run+0x1fc>)
10055088:	0092      	lsls	r2, r2, #2
1005508a:	58d3      	ldr	r3, [r2, r3]
1005508c:	4798      	blx	r3

    local_taskset = TaskSet;
1005508e:	4b29      	ldr	r3, [pc, #164]	@ (10055134 <UTIL_SEQ_Run+0x1e4>)
10055090:	681b      	ldr	r3, [r3, #0]
10055092:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
10055094:	4b28      	ldr	r3, [pc, #160]	@ (10055138 <UTIL_SEQ_Run+0x1e8>)
10055096:	681b      	ldr	r3, [r3, #0]
10055098:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
1005509a:	4b28      	ldr	r3, [pc, #160]	@ (1005513c <UTIL_SEQ_Run+0x1ec>)
1005509c:	681b      	ldr	r3, [r3, #0]
1005509e:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
100550a0:	4b27      	ldr	r3, [pc, #156]	@ (10055140 <UTIL_SEQ_Run+0x1f0>)
100550a2:	681b      	ldr	r3, [r3, #0]
100550a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
100550a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100550a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100550aa:	401a      	ands	r2, r3
100550ac:	4b20      	ldr	r3, [pc, #128]	@ (10055130 <UTIL_SEQ_Run+0x1e0>)
100550ae:	681b      	ldr	r3, [r3, #0]
100550b0:	4013      	ands	r3, r2
100550b2:	d004      	beq.n	100550be <UTIL_SEQ_Run+0x16e>
100550b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100550b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
100550b8:	4013      	ands	r3, r2
100550ba:	d100      	bne.n	100550be <UTIL_SEQ_Run+0x16e>
100550bc:	e762      	b.n	10054f84 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
100550be:	4b22      	ldr	r3, [pc, #136]	@ (10055148 <UTIL_SEQ_Run+0x1f8>)
100550c0:	2201      	movs	r2, #1
100550c2:	4252      	negs	r2, r2
100550c4:	601a      	str	r2, [r3, #0]
  /* if a waited event is present, ignore the IDLE sequence */
  if ((local_evtset & EvtWaited)== 0U)
100550c6:	4b1e      	ldr	r3, [pc, #120]	@ (10055140 <UTIL_SEQ_Run+0x1f0>)
100550c8:	681b      	ldr	r3, [r3, #0]
100550ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100550cc:	4013      	ands	r3, r2
100550ce:	d127      	bne.n	10055120 <UTIL_SEQ_Run+0x1d0>
  {
    UTIL_SEQ_PreIdle( );
100550d0:	f7f2 f895 	bl	100471fe <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100550d4:	f3ef 8310 	mrs	r3, PRIMASK
100550d8:	613b      	str	r3, [r7, #16]
  return(result);
100550da:	693b      	ldr	r3, [r7, #16]

    UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
100550dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
100550de:	b672      	cpsid	i
}
100550e0:	46c0      	nop			@ (mov r8, r8)
    local_taskset = TaskSet;
100550e2:	4b14      	ldr	r3, [pc, #80]	@ (10055134 <UTIL_SEQ_Run+0x1e4>)
100550e4:	681b      	ldr	r3, [r3, #0]
100550e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
100550e8:	4b13      	ldr	r3, [pc, #76]	@ (10055138 <UTIL_SEQ_Run+0x1e8>)
100550ea:	681b      	ldr	r3, [r3, #0]
100550ec:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
100550ee:	4b13      	ldr	r3, [pc, #76]	@ (1005513c <UTIL_SEQ_Run+0x1ec>)
100550f0:	681b      	ldr	r3, [r3, #0]
100550f2:	633b      	str	r3, [r7, #48]	@ 0x30
    if ((local_taskset & local_taskmask & SuperMask) == 0U)
100550f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100550f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100550f8:	401a      	ands	r2, r3
100550fa:	4b0d      	ldr	r3, [pc, #52]	@ (10055130 <UTIL_SEQ_Run+0x1e0>)
100550fc:	681b      	ldr	r3, [r3, #0]
100550fe:	4013      	ands	r3, r2
10055100:	d106      	bne.n	10055110 <UTIL_SEQ_Run+0x1c0>
    {
      if ((local_evtset & EvtWaited)== 0U)
10055102:	4b0f      	ldr	r3, [pc, #60]	@ (10055140 <UTIL_SEQ_Run+0x1f0>)
10055104:	681b      	ldr	r3, [r3, #0]
10055106:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10055108:	4013      	ands	r3, r2
1005510a:	d101      	bne.n	10055110 <UTIL_SEQ_Run+0x1c0>
      {
        UTIL_SEQ_Idle( );
1005510c:	f7f2 f87c 	bl	10047208 <UTIL_SEQ_Idle>
10055110:	69fb      	ldr	r3, [r7, #28]
10055112:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10055114:	68fb      	ldr	r3, [r7, #12]
10055116:	f383 8810 	msr	PRIMASK, r3
}
1005511a:	46c0      	nop			@ (mov r8, r8)
      }
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

    UTIL_SEQ_PostIdle( );
1005511c:	f000 f8de 	bl	100552dc <UTIL_SEQ_PostIdle>
  }

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
10055120:	4b03      	ldr	r3, [pc, #12]	@ (10055130 <UTIL_SEQ_Run+0x1e0>)
10055122:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10055124:	601a      	str	r2, [r3, #0]

  return;
10055126:	46c0      	nop			@ (mov r8, r8)
}
10055128:	46bd      	mov	sp, r7
1005512a:	b010      	add	sp, #64	@ 0x40
1005512c:	bd80      	pop	{r7, pc}
1005512e:	46c0      	nop			@ (mov r8, r8)
10055130:	20002d94 	.word	0x20002d94
10055134:	20002860 	.word	0x20002860
10055138:	20002864 	.word	0x20002864
1005513c:	20002d90 	.word	0x20002d90
10055140:	20002868 	.word	0x20002868
10055144:	200028f0 	.word	0x200028f0
10055148:	2000286c 	.word	0x2000286c
1005514c:	20002870 	.word	0x20002870

10055150 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
10055150:	b580      	push	{r7, lr}
10055152:	b088      	sub	sp, #32
10055154:	af00      	add	r7, sp, #0
10055156:	60f8      	str	r0, [r7, #12]
10055158:	60b9      	str	r1, [r7, #8]
1005515a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1005515c:	f3ef 8310 	mrs	r3, PRIMASK
10055160:	617b      	str	r3, [r7, #20]
  return(result);
10055162:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
10055164:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10055166:	b672      	cpsid	i
}
10055168:	46c0      	nop			@ (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
1005516a:	68fb      	ldr	r3, [r7, #12]
1005516c:	0018      	movs	r0, r3
1005516e:	f000 f8bb 	bl	100552e8 <SEQ_BitPosition>
10055172:	0003      	movs	r3, r0
10055174:	001a      	movs	r2, r3
10055176:	4b07      	ldr	r3, [pc, #28]	@ (10055194 <UTIL_SEQ_RegTask+0x44>)
10055178:	0092      	lsls	r2, r2, #2
1005517a:	6879      	ldr	r1, [r7, #4]
1005517c:	50d1      	str	r1, [r2, r3]
1005517e:	69fb      	ldr	r3, [r7, #28]
10055180:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10055182:	69bb      	ldr	r3, [r7, #24]
10055184:	f383 8810 	msr	PRIMASK, r3
}
10055188:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
1005518a:	46c0      	nop			@ (mov r8, r8)
}
1005518c:	46bd      	mov	sp, r7
1005518e:	b008      	add	sp, #32
10055190:	bd80      	pop	{r7, pc}
10055192:	46c0      	nop			@ (mov r8, r8)
10055194:	20002870 	.word	0x20002870

10055198 <UTIL_SEQ_SetTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
10055198:	b580      	push	{r7, lr}
1005519a:	b086      	sub	sp, #24
1005519c:	af00      	add	r7, sp, #0
1005519e:	6078      	str	r0, [r7, #4]
100551a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100551a2:	f3ef 8310 	mrs	r3, PRIMASK
100551a6:	60fb      	str	r3, [r7, #12]
  return(result);
100551a8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
100551aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
100551ac:	b672      	cpsid	i
}
100551ae:	46c0      	nop			@ (mov r8, r8)

  TaskSet |= TaskId_bm;
100551b0:	4b0d      	ldr	r3, [pc, #52]	@ (100551e8 <UTIL_SEQ_SetTask+0x50>)
100551b2:	681a      	ldr	r2, [r3, #0]
100551b4:	687b      	ldr	r3, [r7, #4]
100551b6:	431a      	orrs	r2, r3
100551b8:	4b0b      	ldr	r3, [pc, #44]	@ (100551e8 <UTIL_SEQ_SetTask+0x50>)
100551ba:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
100551bc:	4b0b      	ldr	r3, [pc, #44]	@ (100551ec <UTIL_SEQ_SetTask+0x54>)
100551be:	683a      	ldr	r2, [r7, #0]
100551c0:	00d2      	lsls	r2, r2, #3
100551c2:	58d2      	ldr	r2, [r2, r3]
100551c4:	687b      	ldr	r3, [r7, #4]
100551c6:	431a      	orrs	r2, r3
100551c8:	0011      	movs	r1, r2
100551ca:	4b08      	ldr	r3, [pc, #32]	@ (100551ec <UTIL_SEQ_SetTask+0x54>)
100551cc:	683a      	ldr	r2, [r7, #0]
100551ce:	00d2      	lsls	r2, r2, #3
100551d0:	50d1      	str	r1, [r2, r3]
100551d2:	697b      	ldr	r3, [r7, #20]
100551d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100551d6:	693b      	ldr	r3, [r7, #16]
100551d8:	f383 8810 	msr	PRIMASK, r3
}
100551dc:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
100551de:	46c0      	nop			@ (mov r8, r8)
}
100551e0:	46bd      	mov	sp, r7
100551e2:	b006      	add	sp, #24
100551e4:	bd80      	pop	{r7, pc}
100551e6:	46c0      	nop			@ (mov r8, r8)
100551e8:	20002860 	.word	0x20002860
100551ec:	200028f0 	.word	0x200028f0

100551f0 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
100551f0:	b580      	push	{r7, lr}
100551f2:	b086      	sub	sp, #24
100551f4:	af00      	add	r7, sp, #0
100551f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100551f8:	f3ef 8310 	mrs	r3, PRIMASK
100551fc:	60fb      	str	r3, [r7, #12]
  return(result);
100551fe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10055200:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
10055202:	b672      	cpsid	i
}
10055204:	46c0      	nop			@ (mov r8, r8)

  EvtSet |= EvtId_bm;
10055206:	4b08      	ldr	r3, [pc, #32]	@ (10055228 <UTIL_SEQ_SetEvt+0x38>)
10055208:	681a      	ldr	r2, [r3, #0]
1005520a:	687b      	ldr	r3, [r7, #4]
1005520c:	431a      	orrs	r2, r3
1005520e:	4b06      	ldr	r3, [pc, #24]	@ (10055228 <UTIL_SEQ_SetEvt+0x38>)
10055210:	601a      	str	r2, [r3, #0]
10055212:	697b      	ldr	r3, [r7, #20]
10055214:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10055216:	693b      	ldr	r3, [r7, #16]
10055218:	f383 8810 	msr	PRIMASK, r3
}
1005521c:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
1005521e:	46c0      	nop			@ (mov r8, r8)
}
10055220:	46bd      	mov	sp, r7
10055222:	b006      	add	sp, #24
10055224:	bd80      	pop	{r7, pc}
10055226:	46c0      	nop			@ (mov r8, r8)
10055228:	20002864 	.word	0x20002864

1005522c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
1005522c:	b580      	push	{r7, lr}
1005522e:	b088      	sub	sp, #32
10055230:	af00      	add	r7, sp, #0
10055232:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
10055234:	4b1f      	ldr	r3, [pc, #124]	@ (100552b4 <UTIL_SEQ_WaitEvt+0x88>)
10055236:	681b      	ldr	r3, [r3, #0]
10055238:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
1005523a:	4b1e      	ldr	r3, [pc, #120]	@ (100552b4 <UTIL_SEQ_WaitEvt+0x88>)
1005523c:	681b      	ldr	r3, [r3, #0]
1005523e:	3301      	adds	r3, #1
10055240:	d102      	bne.n	10055248 <UTIL_SEQ_WaitEvt+0x1c>
  {
    wait_task_idx = 0u;
10055242:	2300      	movs	r3, #0
10055244:	61fb      	str	r3, [r7, #28]
10055246:	e005      	b.n	10055254 <UTIL_SEQ_WaitEvt+0x28>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
10055248:	4b1a      	ldr	r3, [pc, #104]	@ (100552b4 <UTIL_SEQ_WaitEvt+0x88>)
1005524a:	681b      	ldr	r3, [r3, #0]
1005524c:	2201      	movs	r2, #1
1005524e:	409a      	lsls	r2, r3
10055250:	0013      	movs	r3, r2
10055252:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
10055254:	4b18      	ldr	r3, [pc, #96]	@ (100552b8 <UTIL_SEQ_WaitEvt+0x8c>)
10055256:	681b      	ldr	r3, [r3, #0]
10055258:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
1005525a:	4b17      	ldr	r3, [pc, #92]	@ (100552b8 <UTIL_SEQ_WaitEvt+0x8c>)
1005525c:	687a      	ldr	r2, [r7, #4]
1005525e:	601a      	str	r2, [r3, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
10055260:	e005      	b.n	1005526e <UTIL_SEQ_WaitEvt+0x42>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
10055262:	687a      	ldr	r2, [r7, #4]
10055264:	69fb      	ldr	r3, [r7, #28]
10055266:	0011      	movs	r1, r2
10055268:	0018      	movs	r0, r3
1005526a:	f000 f829 	bl	100552c0 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
1005526e:	4b13      	ldr	r3, [pc, #76]	@ (100552bc <UTIL_SEQ_WaitEvt+0x90>)
10055270:	681b      	ldr	r3, [r3, #0]
10055272:	687a      	ldr	r2, [r7, #4]
10055274:	4013      	ands	r3, r2
10055276:	d0f4      	beq.n	10055262 <UTIL_SEQ_WaitEvt+0x36>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
10055278:	4b0e      	ldr	r3, [pc, #56]	@ (100552b4 <UTIL_SEQ_WaitEvt+0x88>)
1005527a:	69ba      	ldr	r2, [r7, #24]
1005527c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1005527e:	f3ef 8310 	mrs	r3, PRIMASK
10055282:	60bb      	str	r3, [r7, #8]
  return(result);
10055284:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10055286:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
10055288:	b672      	cpsid	i
}
1005528a:	46c0      	nop			@ (mov r8, r8)

  EvtSet &= (~EvtId_bm);
1005528c:	687b      	ldr	r3, [r7, #4]
1005528e:	43da      	mvns	r2, r3
10055290:	4b0a      	ldr	r3, [pc, #40]	@ (100552bc <UTIL_SEQ_WaitEvt+0x90>)
10055292:	681b      	ldr	r3, [r3, #0]
10055294:	401a      	ands	r2, r3
10055296:	4b09      	ldr	r3, [pc, #36]	@ (100552bc <UTIL_SEQ_WaitEvt+0x90>)
10055298:	601a      	str	r2, [r3, #0]
1005529a:	693b      	ldr	r3, [r7, #16]
1005529c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005529e:	68fb      	ldr	r3, [r7, #12]
100552a0:	f383 8810 	msr	PRIMASK, r3
}
100552a4:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
100552a6:	4b04      	ldr	r3, [pc, #16]	@ (100552b8 <UTIL_SEQ_WaitEvt+0x8c>)
100552a8:	697a      	ldr	r2, [r7, #20]
100552aa:	601a      	str	r2, [r3, #0]
  return;
100552ac:	46c0      	nop			@ (mov r8, r8)
}
100552ae:	46bd      	mov	sp, r7
100552b0:	b008      	add	sp, #32
100552b2:	bd80      	pop	{r7, pc}
100552b4:	2000286c 	.word	0x2000286c
100552b8:	20002868 	.word	0x20002868
100552bc:	20002864 	.word	0x20002864

100552c0 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
100552c0:	b580      	push	{r7, lr}
100552c2:	b082      	sub	sp, #8
100552c4:	af00      	add	r7, sp, #0
100552c6:	6078      	str	r0, [r7, #4]
100552c8:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
100552ca:	687b      	ldr	r3, [r7, #4]
100552cc:	43db      	mvns	r3, r3
100552ce:	0018      	movs	r0, r3
100552d0:	f7ff fe3e 	bl	10054f50 <UTIL_SEQ_Run>
  return;
100552d4:	46c0      	nop			@ (mov r8, r8)
}
100552d6:	46bd      	mov	sp, r7
100552d8:	b002      	add	sp, #8
100552da:	bd80      	pop	{r7, pc}

100552dc <UTIL_SEQ_PostIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PostIdle( void )
{
100552dc:	b580      	push	{r7, lr}
100552de:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
100552e0:	46c0      	nop			@ (mov r8, r8)
}
100552e2:	46bd      	mov	sp, r7
100552e4:	bd80      	pop	{r7, pc}
	...

100552e8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
100552e8:	b580      	push	{r7, lr}
100552ea:	b084      	sub	sp, #16
100552ec:	af00      	add	r7, sp, #0
100552ee:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
100552f0:	210f      	movs	r1, #15
100552f2:	187b      	adds	r3, r7, r1
100552f4:	2200      	movs	r2, #0
100552f6:	701a      	strb	r2, [r3, #0]
uint32_t lvalue = Value;
100552f8:	687b      	ldr	r3, [r7, #4]
100552fa:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
100552fc:	68ba      	ldr	r2, [r7, #8]
100552fe:	2380      	movs	r3, #128	@ 0x80
10055300:	025b      	lsls	r3, r3, #9
10055302:	429a      	cmp	r2, r3
10055304:	d205      	bcs.n	10055312 <SEQ_BitPosition+0x2a>
10055306:	187b      	adds	r3, r7, r1
10055308:	2210      	movs	r2, #16
1005530a:	701a      	strb	r2, [r3, #0]
1005530c:	68bb      	ldr	r3, [r7, #8]
1005530e:	041b      	lsls	r3, r3, #16
10055310:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
10055312:	68ba      	ldr	r2, [r7, #8]
10055314:	2380      	movs	r3, #128	@ 0x80
10055316:	045b      	lsls	r3, r3, #17
10055318:	429a      	cmp	r2, r3
1005531a:	d208      	bcs.n	1005532e <SEQ_BitPosition+0x46>
1005531c:	220f      	movs	r2, #15
1005531e:	18bb      	adds	r3, r7, r2
10055320:	18ba      	adds	r2, r7, r2
10055322:	7812      	ldrb	r2, [r2, #0]
10055324:	3208      	adds	r2, #8
10055326:	701a      	strb	r2, [r3, #0]
10055328:	68bb      	ldr	r3, [r7, #8]
1005532a:	021b      	lsls	r3, r3, #8
1005532c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
1005532e:	68ba      	ldr	r2, [r7, #8]
10055330:	2380      	movs	r3, #128	@ 0x80
10055332:	055b      	lsls	r3, r3, #21
10055334:	429a      	cmp	r2, r3
10055336:	d208      	bcs.n	1005534a <SEQ_BitPosition+0x62>
10055338:	220f      	movs	r2, #15
1005533a:	18bb      	adds	r3, r7, r2
1005533c:	18ba      	adds	r2, r7, r2
1005533e:	7812      	ldrb	r2, [r2, #0]
10055340:	3204      	adds	r2, #4
10055342:	701a      	strb	r2, [r3, #0]
10055344:	68bb      	ldr	r3, [r7, #8]
10055346:	011b      	lsls	r3, r3, #4
10055348:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
1005534a:	68bb      	ldr	r3, [r7, #8]
1005534c:	0f1b      	lsrs	r3, r3, #28
1005534e:	4a08      	ldr	r2, [pc, #32]	@ (10055370 <SEQ_BitPosition+0x88>)
10055350:	5cd1      	ldrb	r1, [r2, r3]
10055352:	200f      	movs	r0, #15
10055354:	183b      	adds	r3, r7, r0
10055356:	183a      	adds	r2, r7, r0
10055358:	7812      	ldrb	r2, [r2, #0]
1005535a:	188a      	adds	r2, r1, r2
1005535c:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
1005535e:	183b      	adds	r3, r7, r0
10055360:	781b      	ldrb	r3, [r3, #0]
10055362:	221f      	movs	r2, #31
10055364:	1ad3      	subs	r3, r2, r3
10055366:	b2db      	uxtb	r3, r3
}
10055368:	0018      	movs	r0, r3
1005536a:	46bd      	mov	sp, r7
1005536c:	b004      	add	sp, #16
1005536e:	bd80      	pop	{r7, pc}
10055370:	1006a384 	.word	0x1006a384

10055374 <aci_gap_init>:
10055374:	b580      	push	{r7, lr}
10055376:	2802      	cmp	r0, #2
10055378:	d901      	bls.n	1005537e <aci_gap_init+0xa>
1005537a:	2012      	movs	r0, #18
1005537c:	bd80      	pop	{r7, pc}
1005537e:	f001 fc17 	bl	10056bb0 <GAP_Init>
10055382:	bd80      	pop	{r7, pc}

10055384 <aci_gap_terminate_api>:
10055384:	b580      	push	{r7, lr}
10055386:	f001 fde9 	bl	10056f5c <GAP_Terminate_Link>
1005538a:	bd80      	pop	{r7, pc}

1005538c <_aci_gap_lists_check>:
1005538c:	b5b0      	push	{r4, r5, r7, lr}
1005538e:	4604      	mov	r4, r0
10055390:	7800      	ldrb	r0, [r0, #0]
10055392:	2800      	cmp	r0, #0
10055394:	d001      	beq.n	1005539a <_aci_gap_lists_check+0xe>
10055396:	2804      	cmp	r0, #4
10055398:	d301      	bcc.n	1005539e <_aci_gap_lists_check+0x12>
1005539a:	2012      	movs	r0, #18
1005539c:	e000      	b.n	100553a0 <_aci_gap_lists_check+0x14>
1005539e:	2000      	movs	r0, #0
100553a0:	2512      	movs	r5, #18
100553a2:	2a00      	cmp	r2, #0
100553a4:	462a      	mov	r2, r5
100553a6:	d000      	beq.n	100553aa <_aci_gap_lists_check+0x1e>
100553a8:	4602      	mov	r2, r0
100553aa:	2901      	cmp	r1, #1
100553ac:	d800      	bhi.n	100553b0 <_aci_gap_lists_check+0x24>
100553ae:	4615      	mov	r5, r2
100553b0:	2d00      	cmp	r5, #0
100553b2:	d107      	bne.n	100553c4 <_aci_gap_lists_check+0x38>
100553b4:	f007 f9b1 	bl	1005c71a <llc_priv_controller_privacy_csr_ucfg_weak>
100553b8:	2800      	cmp	r0, #0
100553ba:	d103      	bne.n	100553c4 <_aci_gap_lists_check+0x38>
100553bc:	7820      	ldrb	r0, [r4, #0]
100553be:	21fd      	movs	r1, #253	@ 0xfd
100553c0:	4001      	ands	r1, r0
100553c2:	7021      	strb	r1, [r4, #0]
100553c4:	4628      	mov	r0, r5
100553c6:	bdb0      	pop	{r4, r5, r7, pc}

100553c8 <aci_gap_configure_filter_accept_and_resolving_list>:
100553c8:	b5e0      	push	{r5, r6, r7, lr}
100553ca:	a901      	add	r1, sp, #4
100553cc:	7008      	strb	r0, [r1, #0]
100553ce:	2201      	movs	r2, #1
100553d0:	4608      	mov	r0, r1
100553d2:	4611      	mov	r1, r2
100553d4:	f7ff ffda 	bl	1005538c <_aci_gap_lists_check>
100553d8:	2800      	cmp	r0, #0
100553da:	d000      	beq.n	100553de <aci_gap_configure_filter_accept_and_resolving_list+0x16>
100553dc:	bd8c      	pop	{r2, r3, r7, pc}
100553de:	a801      	add	r0, sp, #4
100553e0:	7800      	ldrb	r0, [r0, #0]
100553e2:	f001 fdd1 	bl	10056f88 <GAP_configure_filter_accept_and_resolving_list>
100553e6:	bd8c      	pop	{r2, r3, r7, pc}

100553e8 <GAP_set_advertising_configuration_ucfg_weak>:
100553e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100553ea:	461c      	mov	r4, r3
100553ec:	4608      	mov	r0, r1
100553ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
100553f0:	9103      	str	r1, [sp, #12]
100553f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
100553f4:	9102      	str	r1, [sp, #8]
100553f6:	9908      	ldr	r1, [sp, #32]
100553f8:	9101      	str	r1, [sp, #4]
100553fa:	9907      	ldr	r1, [sp, #28]
100553fc:	9100      	str	r1, [sp, #0]
100553fe:	9b06      	ldr	r3, [sp, #24]
10055400:	4611      	mov	r1, r2
10055402:	4622      	mov	r2, r4
10055404:	f001 fea0 	bl	10057148 <GAP_set_legacy_advertising_configuration>
10055408:	b004      	add	sp, #16
1005540a:	bd10      	pop	{r4, pc}

1005540c <GAP_set_advertising_data_ucfg_weak>:
1005540c:	b580      	push	{r7, lr}
1005540e:	4619      	mov	r1, r3
10055410:	4610      	mov	r0, r2
10055412:	f002 f80d 	bl	10057430 <GAP_set_legacy_advertising_data>
10055416:	bd80      	pop	{r7, pc}

10055418 <GAP_set_advertising_enable_ucfg_weak>:
10055418:	b580      	push	{r7, lr}
1005541a:	f001 ff05 	bl	10057228 <GAP_set_legacy_advertising_enable>
1005541e:	bd80      	pop	{r7, pc}

10055420 <aci_gap_set_advertising_configuration>:
10055420:	b5f0      	push	{r4, r5, r6, r7, lr}
10055422:	b093      	sub	sp, #76	@ 0x4c
10055424:	461f      	mov	r7, r3
10055426:	4615      	mov	r5, r2
10055428:	460e      	mov	r6, r1
1005542a:	9012      	str	r0, [sp, #72]	@ 0x48
1005542c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
1005542e:	4608      	mov	r0, r1
10055430:	4611      	mov	r1, r2
10055432:	4622      	mov	r2, r4
10055434:	f001 fe5a 	bl	100570ec <GAP_check_discoverability_mode>
10055438:	2800      	cmp	r0, #0
1005543a:	d124      	bne.n	10055486 <aci_gap_set_advertising_configuration+0x66>
1005543c:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005543e:	900d      	str	r0, [sp, #52]	@ 0x34
10055440:	ab1f      	add	r3, sp, #124	@ 0x7c
10055442:	cb0d      	ldmia	r3, {r0, r2, r3}
10055444:	9011      	str	r0, [sp, #68]	@ 0x44
10055446:	981e      	ldr	r0, [sp, #120]	@ 0x78
10055448:	900f      	str	r0, [sp, #60]	@ 0x3c
1005544a:	981d      	ldr	r0, [sp, #116]	@ 0x74
1005544c:	900e      	str	r0, [sp, #56]	@ 0x38
1005544e:	981b      	ldr	r0, [sp, #108]	@ 0x6c
10055450:	900c      	str	r0, [sp, #48]	@ 0x30
10055452:	991a      	ldr	r1, [sp, #104]	@ 0x68
10055454:	9819      	ldr	r0, [sp, #100]	@ 0x64
10055456:	9710      	str	r7, [sp, #64]	@ 0x40
10055458:	9f18      	ldr	r7, [sp, #96]	@ 0x60
1005545a:	9208      	str	r2, [sp, #32]
1005545c:	9309      	str	r3, [sp, #36]	@ 0x24
1005545e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10055460:	920a      	str	r2, [sp, #40]	@ 0x28
10055462:	9700      	str	r7, [sp, #0]
10055464:	9001      	str	r0, [sp, #4]
10055466:	9102      	str	r1, [sp, #8]
10055468:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005546a:	9003      	str	r0, [sp, #12]
1005546c:	9404      	str	r4, [sp, #16]
1005546e:	980e      	ldr	r0, [sp, #56]	@ 0x38
10055470:	9005      	str	r0, [sp, #20]
10055472:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10055474:	9006      	str	r0, [sp, #24]
10055476:	9811      	ldr	r0, [sp, #68]	@ 0x44
10055478:	9007      	str	r0, [sp, #28]
1005547a:	9812      	ldr	r0, [sp, #72]	@ 0x48
1005547c:	4631      	mov	r1, r6
1005547e:	462a      	mov	r2, r5
10055480:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10055482:	f7ff ffb1 	bl	100553e8 <GAP_set_advertising_configuration_ucfg_weak>
10055486:	b013      	add	sp, #76	@ 0x4c
10055488:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005548a <aci_gap_set_advertising_data>:
1005548a:	b580      	push	{r7, lr}
1005548c:	f7ff ffbe 	bl	1005540c <GAP_set_advertising_data_ucfg_weak>
10055490:	bd80      	pop	{r7, pc}

10055492 <aci_gap_set_advertising_enable>:
10055492:	b580      	push	{r7, lr}
10055494:	f7ff ffc0 	bl	10055418 <GAP_set_advertising_enable_ucfg_weak>
10055498:	bd80      	pop	{r7, pc}

1005549a <aci_gap_set_io_capability_api>:
1005549a:	b580      	push	{r7, lr}
1005549c:	2804      	cmp	r0, #4
1005549e:	d901      	bls.n	100554a4 <aci_gap_set_io_capability_api+0xa>
100554a0:	2012      	movs	r0, #18
100554a2:	bd80      	pop	{r7, pc}
100554a4:	f00d fb26 	bl	10062af4 <smp_sap_aci_set_io_capabilities>
100554a8:	bd80      	pop	{r7, pc}
	...

100554ac <aci_gap_set_security_requirements_api>:
100554ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100554ae:	b089      	sub	sp, #36	@ 0x24
100554b0:	4605      	mov	r5, r0
100554b2:	4608      	mov	r0, r1
100554b4:	4328      	orrs	r0, r5
100554b6:	2412      	movs	r4, #18
100554b8:	2801      	cmp	r0, #1
100554ba:	d836      	bhi.n	1005552a <aci_gap_set_security_requirements_api+0x7e>
100554bc:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
100554be:	2f07      	cmp	r7, #7
100554c0:	d333      	bcc.n	1005552a <aci_gap_set_security_requirements_api+0x7e>
100554c2:	2f10      	cmp	r7, #16
100554c4:	d831      	bhi.n	1005552a <aci_gap_set_security_requirements_api+0x7e>
100554c6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
100554c8:	2810      	cmp	r0, #16
100554ca:	d82e      	bhi.n	1005552a <aci_gap_set_security_requirements_api+0x7e>
100554cc:	42b8      	cmp	r0, r7
100554ce:	d32c      	bcc.n	1005552a <aci_gap_set_security_requirements_api+0x7e>
100554d0:	460e      	mov	r6, r1
100554d2:	9910      	ldr	r1, [sp, #64]	@ 0x40
100554d4:	2902      	cmp	r1, #2
100554d6:	d828      	bhi.n	1005552a <aci_gap_set_security_requirements_api+0x7e>
100554d8:	9101      	str	r1, [sp, #4]
100554da:	9002      	str	r0, [sp, #8]
100554dc:	9303      	str	r3, [sp, #12]
100554de:	9204      	str	r2, [sp, #16]
100554e0:	f00d fd81 	bl	10062fe6 <secure_connections_csr_ucfg_weak>
100554e4:	2801      	cmp	r0, #1
100554e6:	d106      	bne.n	100554f6 <aci_gap_set_security_requirements_api+0x4a>
100554e8:	9904      	ldr	r1, [sp, #16]
100554ea:	2902      	cmp	r1, #2
100554ec:	d81d      	bhi.n	1005552a <aci_gap_set_security_requirements_api+0x7e>
100554ee:	9a03      	ldr	r2, [sp, #12]
100554f0:	2a01      	cmp	r2, #1
100554f2:	d907      	bls.n	10055504 <aci_gap_set_security_requirements_api+0x58>
100554f4:	e019      	b.n	1005552a <aci_gap_set_security_requirements_api+0x7e>
100554f6:	9a03      	ldr	r2, [sp, #12]
100554f8:	4610      	mov	r0, r2
100554fa:	9904      	ldr	r1, [sp, #16]
100554fc:	4308      	orrs	r0, r1
100554fe:	d001      	beq.n	10055504 <aci_gap_set_security_requirements_api+0x58>
10055500:	2411      	movs	r4, #17
10055502:	e012      	b.n	1005552a <aci_gap_set_security_requirements_api+0x7e>
10055504:	ac05      	add	r4, sp, #20
10055506:	9801      	ldr	r0, [sp, #4]
10055508:	7320      	strb	r0, [r4, #12]
1005550a:	4809      	ldr	r0, [pc, #36]	@ (10055530 <__arm_cp.1_0>)
1005550c:	80e0      	strh	r0, [r4, #6]
1005550e:	9802      	ldr	r0, [sp, #8]
10055510:	7160      	strb	r0, [r4, #5]
10055512:	7127      	strb	r7, [r4, #4]
10055514:	70e2      	strb	r2, [r4, #3]
10055516:	70a1      	strb	r1, [r4, #2]
10055518:	7066      	strb	r6, [r4, #1]
1005551a:	7025      	strb	r5, [r4, #0]
1005551c:	f001 fcfe 	bl	10056f1c <GAP_get_identity_address_type>
10055520:	7360      	strb	r0, [r4, #13]
10055522:	4620      	mov	r0, r4
10055524:	f00d fb1c 	bl	10062b60 <smp_sap_aci_set_authentication_req>
10055528:	4604      	mov	r4, r0
1005552a:	4620      	mov	r0, r4
1005552c:	b009      	add	sp, #36	@ 0x24
1005552e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10055530 <__arm_cp.1_0>:
10055530:	00000707 	.word	0x00000707

10055534 <aci_gap_passkey_resp_api>:
10055534:	b580      	push	{r7, lr}
10055536:	4a04      	ldr	r2, [pc, #16]	@ (10055548 <__arm_cp.4_0>)
10055538:	4291      	cmp	r1, r2
1005553a:	d901      	bls.n	10055540 <aci_gap_passkey_resp_api+0xc>
1005553c:	2012      	movs	r0, #18
1005553e:	bd80      	pop	{r7, pc}
10055540:	f00d fb38 	bl	10062bb4 <smp_sap_aci_passkey_response>
10055544:	bd80      	pop	{r7, pc}
10055546:	46c0      	nop			@ (mov r8, r8)

10055548 <__arm_cp.4_0>:
10055548:	000f423f 	.word	0x000f423f

1005554c <aci_gatt_srv_add_service_api>:
1005554c:	b580      	push	{r7, lr}
1005554e:	f004 fa37 	bl	100599c0 <GAT_srv_add_service>
10055552:	bd80      	pop	{r7, pc}

10055554 <aci_gatt_srv_get_service_handle_api>:
10055554:	b580      	push	{r7, lr}
10055556:	f004 fc71 	bl	10059e3c <GAT_srv_get_service_handle>
1005555a:	bd80      	pop	{r7, pc}

1005555c <aci_gatt_srv_add_char_api>:
1005555c:	b580      	push	{r7, lr}
1005555e:	f004 fadf 	bl	10059b20 <GAT_srv_add_characteristic>
10055562:	bd80      	pop	{r7, pc}

10055564 <aci_gatt_srv_get_char_decl_handle_api>:
10055564:	b580      	push	{r7, lr}
10055566:	f004 fc73 	bl	10059e50 <GAT_srv_get_char_decl_handle>
1005556a:	bd80      	pop	{r7, pc}

1005556c <aci_gatt_srv_resp_api>:
1005556c:	b51c      	push	{r2, r3, r4, lr}
1005556e:	9c05      	ldr	r4, [sp, #20]
10055570:	9401      	str	r4, [sp, #4]
10055572:	9c04      	ldr	r4, [sp, #16]
10055574:	9400      	str	r4, [sp, #0]
10055576:	f004 fc59 	bl	10059e2c <GAT_srv_resp>
1005557a:	2000      	movs	r0, #0
1005557c:	bd1c      	pop	{r2, r3, r4, pc}

1005557e <configBitmapSet>:
1005557e:	2000      	movs	r0, #0
10055580:	4770      	bx	lr
	...

10055584 <HAL_Write_ConfigData>:
10055584:	b5f0      	push	{r4, r5, r6, r7, lr}
10055586:	b087      	sub	sp, #28
10055588:	4614      	mov	r4, r2
1005558a:	460d      	mov	r5, r1
1005558c:	4606      	mov	r6, r0
1005558e:	4869      	ldr	r0, [pc, #420]	@ (10055734 <__arm_cp.4_0>)
10055590:	6800      	ldr	r0, [r0, #0]
10055592:	2e00      	cmp	r6, #0
10055594:	d101      	bne.n	1005559a <HAL_Write_ConfigData+0x16>
10055596:	2d06      	cmp	r5, #6
10055598:	d017      	beq.n	100555ca <HAL_Write_ConfigData+0x46>
1005559a:	2e06      	cmp	r6, #6
1005559c:	d101      	bne.n	100555a2 <HAL_Write_ConfigData+0x1e>
1005559e:	2d02      	cmp	r5, #2
100555a0:	d013      	beq.n	100555ca <HAL_Write_ConfigData+0x46>
100555a2:	2e08      	cmp	r6, #8
100555a4:	d101      	bne.n	100555aa <HAL_Write_ConfigData+0x26>
100555a6:	2d10      	cmp	r5, #16
100555a8:	d00f      	beq.n	100555ca <HAL_Write_ConfigData+0x46>
100555aa:	2e18      	cmp	r6, #24
100555ac:	d101      	bne.n	100555b2 <HAL_Write_ConfigData+0x2e>
100555ae:	2d10      	cmp	r5, #16
100555b0:	d00b      	beq.n	100555ca <HAL_Write_ConfigData+0x46>
100555b2:	2e28      	cmp	r6, #40	@ 0x28
100555b4:	d101      	bne.n	100555ba <HAL_Write_ConfigData+0x36>
100555b6:	2d02      	cmp	r5, #2
100555b8:	d007      	beq.n	100555ca <HAL_Write_ConfigData+0x46>
100555ba:	2e2a      	cmp	r6, #42	@ 0x2a
100555bc:	d101      	bne.n	100555c2 <HAL_Write_ConfigData+0x3e>
100555be:	2d02      	cmp	r5, #2
100555c0:	d003      	beq.n	100555ca <HAL_Write_ConfigData+0x46>
100555c2:	2e2c      	cmp	r6, #44	@ 0x2c
100555c4:	d109      	bne.n	100555da <HAL_Write_ConfigData+0x56>
100555c6:	2d01      	cmp	r5, #1
100555c8:	d107      	bne.n	100555da <HAL_Write_ConfigData+0x56>
100555ca:	1980      	adds	r0, r0, r6
100555cc:	4621      	mov	r1, r4
100555ce:	462a      	mov	r2, r5
100555d0:	f7fd feb0 	bl	10053334 <BLEPLAT_MemCpy>
100555d4:	2000      	movs	r0, #0
100555d6:	b007      	add	sp, #28
100555d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100555da:	2e2e      	cmp	r6, #46	@ 0x2e
100555dc:	d107      	bne.n	100555ee <HAL_Write_ConfigData+0x6a>
100555de:	2d06      	cmp	r5, #6
100555e0:	d105      	bne.n	100555ee <HAL_Write_ConfigData+0x6a>
100555e2:	7961      	ldrb	r1, [r4, #5]
100555e4:	0989      	lsrs	r1, r1, #6
100555e6:	2903      	cmp	r1, #3
100555e8:	d2ef      	bcs.n	100555ca <HAL_Write_ConfigData+0x46>
100555ea:	2012      	movs	r0, #18
100555ec:	e7f3      	b.n	100555d6 <HAL_Write_ConfigData+0x52>
100555ee:	2ed0      	cmp	r6, #208	@ 0xd0
100555f0:	d105      	bne.n	100555fe <HAL_Write_ConfigData+0x7a>
100555f2:	2d01      	cmp	r5, #1
100555f4:	d103      	bne.n	100555fe <HAL_Write_ConfigData+0x7a>
100555f6:	7820      	ldrb	r0, [r4, #0]
100555f8:	f7fa f9df 	bl	1004f9ba <smp_sap_scp_force_debug_key_usage_ucfg>
100555fc:	e7eb      	b.n	100555d6 <HAL_Write_ConfigData+0x52>
100555fe:	2ed2      	cmp	r6, #210	@ 0xd2
10055600:	d105      	bne.n	1005560e <HAL_Write_ConfigData+0x8a>
10055602:	2d01      	cmp	r5, #1
10055604:	d103      	bne.n	1005560e <HAL_Write_ConfigData+0x8a>
10055606:	7821      	ldrb	r1, [r4, #0]
10055608:	2236      	movs	r2, #54	@ 0x36
1005560a:	5481      	strb	r1, [r0, r2]
1005560c:	e7e2      	b.n	100555d4 <HAL_Write_ConfigData+0x50>
1005560e:	2ed5      	cmp	r6, #213	@ 0xd5
10055610:	d10a      	bne.n	10055628 <HAL_Write_ConfigData+0xa4>
10055612:	2d04      	cmp	r5, #4
10055614:	d108      	bne.n	10055628 <HAL_Write_ConfigData+0xa4>
10055616:	a802      	add	r0, sp, #8
10055618:	2204      	movs	r2, #4
1005561a:	4621      	mov	r1, r4
1005561c:	f7fd fe8a 	bl	10053334 <BLEPLAT_MemCpy>
10055620:	9802      	ldr	r0, [sp, #8]
10055622:	f7fa f9bd 	bl	1004f9a0 <smp_debug_trudy__set_config_ucfg>
10055626:	e7d6      	b.n	100555d6 <HAL_Write_ConfigData+0x52>
10055628:	f004 fe20 	bl	1005a26c <data_length_extension_csr_ucfg_weak>
1005562c:	2d08      	cmp	r5, #8
1005562e:	d123      	bne.n	10055678 <HAL_Write_ConfigData+0xf4>
10055630:	2ed1      	cmp	r6, #209	@ 0xd1
10055632:	d121      	bne.n	10055678 <HAL_Write_ConfigData+0xf4>
10055634:	2801      	cmp	r0, #1
10055636:	d11f      	bne.n	10055678 <HAL_Write_ConfigData+0xf4>
10055638:	a802      	add	r0, sp, #8
1005563a:	9001      	str	r0, [sp, #4]
1005563c:	2602      	movs	r6, #2
1005563e:	4d3f      	ldr	r5, [pc, #252]	@ (1005573c <__arm_cp.4_2>)
10055640:	4621      	mov	r1, r4
10055642:	4632      	mov	r2, r6
10055644:	47a8      	blx	r5
10055646:	1ca1      	adds	r1, r4, #2
10055648:	af06      	add	r7, sp, #24
1005564a:	4638      	mov	r0, r7
1005564c:	4632      	mov	r2, r6
1005564e:	47a8      	blx	r5
10055650:	1d21      	adds	r1, r4, #4
10055652:	ad05      	add	r5, sp, #20
10055654:	4628      	mov	r0, r5
10055656:	4632      	mov	r2, r6
10055658:	4b38      	ldr	r3, [pc, #224]	@ (1005573c <__arm_cp.4_2>)
1005565a:	4798      	blx	r3
1005565c:	1da1      	adds	r1, r4, #6
1005565e:	ac04      	add	r4, sp, #16
10055660:	4620      	mov	r0, r4
10055662:	4632      	mov	r2, r6
10055664:	4b35      	ldr	r3, [pc, #212]	@ (1005573c <__arm_cp.4_2>)
10055666:	4798      	blx	r3
10055668:	8823      	ldrh	r3, [r4, #0]
1005566a:	882a      	ldrh	r2, [r5, #0]
1005566c:	8839      	ldrh	r1, [r7, #0]
1005566e:	9801      	ldr	r0, [sp, #4]
10055670:	8800      	ldrh	r0, [r0, #0]
10055672:	f00b fa6d 	bl	10060b50 <ll_write_supported_data_ucfg_weak>
10055676:	e7ae      	b.n	100555d6 <HAL_Write_ConfigData+0x52>
10055678:	2e30      	cmp	r6, #48	@ 0x30
1005567a:	d105      	bne.n	10055688 <HAL_Write_ConfigData+0x104>
1005567c:	2d01      	cmp	r5, #1
1005567e:	d103      	bne.n	10055688 <HAL_Write_ConfigData+0x104>
10055680:	7820      	ldrb	r0, [r4, #0]
10055682:	f7fa f9ba 	bl	1004f9fa <llc_conn_multi_link_connection_ucfg>
10055686:	e7a6      	b.n	100555d6 <HAL_Write_ConfigData+0x52>
10055688:	2ed3      	cmp	r6, #211	@ 0xd3
1005568a:	d105      	bne.n	10055698 <HAL_Write_ConfigData+0x114>
1005568c:	2d01      	cmp	r5, #1
1005568e:	d103      	bne.n	10055698 <HAL_Write_ConfigData+0x114>
10055690:	7820      	ldrb	r0, [r4, #0]
10055692:	f00b f96b 	bl	1006096c <LL_force_chsel_1>
10055696:	e79e      	b.n	100555d6 <HAL_Write_ConfigData+0x52>
10055698:	2eff      	cmp	r6, #255	@ 0xff
1005569a:	d10a      	bne.n	100556b2 <HAL_Write_ConfigData+0x12e>
1005569c:	2d04      	cmp	r5, #4
1005569e:	d108      	bne.n	100556b2 <HAL_Write_ConfigData+0x12e>
100556a0:	a802      	add	r0, sp, #8
100556a2:	2204      	movs	r2, #4
100556a4:	4621      	mov	r1, r4
100556a6:	f7fd fe45 	bl	10053334 <BLEPLAT_MemCpy>
100556aa:	9802      	ldr	r0, [sp, #8]
100556ac:	f7ff ff67 	bl	1005557e <configBitmapSet>
100556b0:	e00c      	b.n	100556cc <HAL_Write_ConfigData+0x148>
100556b2:	2efe      	cmp	r6, #254	@ 0xfe
100556b4:	d10d      	bne.n	100556d2 <HAL_Write_ConfigData+0x14e>
100556b6:	2d05      	cmp	r5, #5
100556b8:	d10b      	bne.n	100556d2 <HAL_Write_ConfigData+0x14e>
100556ba:	ad02      	add	r5, sp, #8
100556bc:	2205      	movs	r2, #5
100556be:	4628      	mov	r0, r5
100556c0:	4621      	mov	r1, r4
100556c2:	f7fd fe37 	bl	10053334 <BLEPLAT_MemCpy>
100556c6:	4628      	mov	r0, r5
100556c8:	f000 fb78 	bl	10055dbc <log_verbosity_set_ucfg_weak>
100556cc:	2800      	cmp	r0, #0
100556ce:	d181      	bne.n	100555d4 <HAL_Write_ConfigData+0x50>
100556d0:	e78b      	b.n	100555ea <HAL_Write_ConfigData+0x66>
100556d2:	2e2f      	cmp	r6, #47	@ 0x2f
100556d4:	d105      	bne.n	100556e2 <HAL_Write_ConfigData+0x15e>
100556d6:	2d01      	cmp	r5, #1
100556d8:	d103      	bne.n	100556e2 <HAL_Write_ConfigData+0x15e>
100556da:	7820      	ldrb	r0, [r4, #0]
100556dc:	f007 f85c 	bl	1005c798 <llc_scan_set_scan_channel_bitmap>
100556e0:	e779      	b.n	100555d6 <HAL_Write_ConfigData+0x52>
100556e2:	2e32      	cmp	r6, #50	@ 0x32
100556e4:	d112      	bne.n	1005570c <HAL_Write_ConfigData+0x188>
100556e6:	2d02      	cmp	r5, #2
100556e8:	d110      	bne.n	1005570c <HAL_Write_ConfigData+0x188>
100556ea:	ad02      	add	r5, sp, #8
100556ec:	2202      	movs	r2, #2
100556ee:	4628      	mov	r0, r5
100556f0:	4621      	mov	r1, r4
100556f2:	f7fd fe1f 	bl	10053334 <BLEPLAT_MemCpy>
100556f6:	8828      	ldrh	r0, [r5, #0]
100556f8:	1e41      	subs	r1, r0, #1
100556fa:	08c9      	lsrs	r1, r1, #3
100556fc:	29e0      	cmp	r1, #224	@ 0xe0
100556fe:	d900      	bls.n	10055702 <HAL_Write_ConfigData+0x17e>
10055700:	e773      	b.n	100555ea <HAL_Write_ConfigData+0x66>
10055702:	490d      	ldr	r1, [pc, #52]	@ (10055738 <__arm_cp.4_1>)
10055704:	6809      	ldr	r1, [r1, #0]
10055706:	225a      	movs	r2, #90	@ 0x5a
10055708:	5288      	strh	r0, [r1, r2]
1005570a:	e763      	b.n	100555d4 <HAL_Write_ConfigData+0x50>
1005570c:	2012      	movs	r0, #18
1005570e:	2e33      	cmp	r6, #51	@ 0x33
10055710:	d000      	beq.n	10055714 <HAL_Write_ConfigData+0x190>
10055712:	e760      	b.n	100555d6 <HAL_Write_ConfigData+0x52>
10055714:	2d01      	cmp	r5, #1
10055716:	d000      	beq.n	1005571a <HAL_Write_ConfigData+0x196>
10055718:	e75d      	b.n	100555d6 <HAL_Write_ConfigData+0x52>
1005571a:	ad02      	add	r5, sp, #8
1005571c:	2201      	movs	r2, #1
1005571e:	4628      	mov	r0, r5
10055720:	4621      	mov	r1, r4
10055722:	f7fd fe07 	bl	10053334 <BLEPLAT_MemCpy>
10055726:	7828      	ldrb	r0, [r5, #0]
10055728:	f001 fcd8 	bl	100570dc <GAP_enable_rpa_change_at_timeout>
1005572c:	7828      	ldrb	r0, [r5, #0]
1005572e:	f006 fffb 	bl	1005c728 <llc_priv_enable_rpa_change_at_timeout_ucfg_weak>
10055732:	e74f      	b.n	100555d4 <HAL_Write_ConfigData+0x50>

10055734 <__arm_cp.4_0>:
10055734:	20002904 	.word	0x20002904

10055738 <__arm_cp.4_1>:
10055738:	2000290c 	.word	0x2000290c

1005573c <__arm_cp.4_2>:
1005573c:	10053335 	.word	0x10053335

10055740 <aci_hal_write_config_data>:
10055740:	b580      	push	{r7, lr}
10055742:	f7ff ff1f 	bl	10055584 <HAL_Write_ConfigData>
10055746:	bd80      	pop	{r7, pc}

10055748 <aci_hal_set_tx_power_level>:
10055748:	b580      	push	{r7, lr}
1005574a:	f000 f801 	bl	10055750 <HAL_Set_TX_Power_Level>
1005574e:	bd80      	pop	{r7, pc}

10055750 <HAL_Set_TX_Power_Level>:
10055750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055752:	460e      	mov	r6, r1
10055754:	4605      	mov	r5, r0
10055756:	2412      	movs	r4, #18
10055758:	f7fd fe90 	bl	1005347c <BLEPLAT_GetMaxPALevel>
1005575c:	42b0      	cmp	r0, r6
1005575e:	d317      	bcc.n	10055790 <HAL_Set_TX_Power_Level+0x40>
10055760:	2d01      	cmp	r5, #1
10055762:	d815      	bhi.n	10055790 <HAL_Set_TX_Power_Level+0x40>
10055764:	480b      	ldr	r0, [pc, #44]	@ (10055794 <__arm_cp.11_0>)
10055766:	6800      	ldr	r0, [r0, #0]
10055768:	7a81      	ldrb	r1, [r0, #10]
1005576a:	9100      	str	r1, [sp, #0]
1005576c:	7285      	strb	r5, [r0, #10]
1005576e:	7a47      	ldrb	r7, [r0, #9]
10055770:	7246      	strb	r6, [r0, #9]
10055772:	4628      	mov	r0, r5
10055774:	f7fd fe92 	bl	1005349c <BLEPLAT_SetHighPower>
10055778:	2400      	movs	r4, #0
1005577a:	42b7      	cmp	r7, r6
1005577c:	d102      	bne.n	10055784 <HAL_Set_TX_Power_Level+0x34>
1005577e:	9800      	ldr	r0, [sp, #0]
10055780:	42a8      	cmp	r0, r5
10055782:	d005      	beq.n	10055790 <HAL_Set_TX_Power_Level+0x40>
10055784:	20ff      	movs	r0, #255	@ 0xff
10055786:	227f      	movs	r2, #127	@ 0x7f
10055788:	2101      	movs	r1, #1
1005578a:	460b      	mov	r3, r1
1005578c:	f009 fa5e 	bl	1005ec4c <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
10055790:	4620      	mov	r0, r4
10055792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10055794 <__arm_cp.11_0>:
10055794:	20002958 	.word	0x20002958

10055798 <ble_HAL_Init>:
10055798:	b580      	push	{r7, lr}
1005579a:	4804      	ldr	r0, [pc, #16]	@ (100557ac <__arm_cp.17_0>)
1005579c:	6800      	ldr	r0, [r0, #0]
1005579e:	3060      	adds	r0, #96	@ 0x60
100557a0:	2100      	movs	r1, #0
100557a2:	2204      	movs	r2, #4
100557a4:	f7fd fdd6 	bl	10053354 <BLEPLAT_MemSet>
100557a8:	bd80      	pop	{r7, pc}
100557aa:	46c0      	nop			@ (mov r8, r8)

100557ac <__arm_cp.17_0>:
100557ac:	20002958 	.word	0x20002958

100557b0 <hal_read_radio_activity_state>:
100557b0:	b570      	push	{r4, r5, r6, lr}
100557b2:	4603      	mov	r3, r0
100557b4:	480a      	ldr	r0, [pc, #40]	@ (100557e0 <__arm_cp.18_0>)
100557b6:	6804      	ldr	r4, [r0, #0]
100557b8:	f3ef 8010 	mrs	r0, PRIMASK
100557bc:	b672      	cpsid	i
100557be:	7d20      	ldrb	r0, [r4, #20]
100557c0:	2500      	movs	r5, #0
100557c2:	7525      	strb	r5, [r4, #20]
100557c4:	7c25      	ldrb	r5, [r4, #16]
100557c6:	260f      	movs	r6, #15
100557c8:	402e      	ands	r6, r5
100557ca:	701e      	strb	r6, [r3, #0]
100557cc:	7c23      	ldrb	r3, [r4, #16]
100557ce:	091b      	lsrs	r3, r3, #4
100557d0:	700b      	strb	r3, [r1, #0]
100557d2:	68e1      	ldr	r1, [r4, #12]
100557d4:	6011      	str	r1, [r2, #0]
100557d6:	1e41      	subs	r1, r0, #1
100557d8:	4188      	sbcs	r0, r1
100557da:	b662      	cpsie	i
100557dc:	bd70      	pop	{r4, r5, r6, pc}
100557de:	46c0      	nop			@ (mov r8, r8)

100557e0 <__arm_cp.18_0>:
100557e0:	20002958 	.word	0x20002958

100557e4 <hal_radio_activity_state_init>:
100557e4:	4803      	ldr	r0, [pc, #12]	@ (100557f4 <__arm_cp.20_0>)
100557e6:	6800      	ldr	r0, [r0, #0]
100557e8:	2100      	movs	r1, #0
100557ea:	7501      	strb	r1, [r0, #20]
100557ec:	8241      	strh	r1, [r0, #18]
100557ee:	7401      	strb	r1, [r0, #16]
100557f0:	4770      	bx	lr
100557f2:	46c0      	nop			@ (mov r8, r8)

100557f4 <__arm_cp.20_0>:
100557f4:	20002958 	.word	0x20002958

100557f8 <hal_radio_activity_state_cb_check>:
100557f8:	b510      	push	{r4, lr}
100557fa:	b086      	sub	sp, #24
100557fc:	4815      	ldr	r0, [pc, #84]	@ (10055854 <__arm_cp.22_0>)
100557fe:	6804      	ldr	r4, [r0, #0]
10055800:	a802      	add	r0, sp, #8
10055802:	a901      	add	r1, sp, #4
10055804:	466a      	mov	r2, sp
10055806:	f7ff ffd3 	bl	100557b0 <hal_read_radio_activity_state>
1005580a:	2800      	cmp	r0, #0
1005580c:	d01f      	beq.n	1005584e <hal_radio_activity_state_cb_check+0x56>
1005580e:	a802      	add	r0, sp, #8
10055810:	7801      	ldrb	r1, [r0, #0]
10055812:	8a60      	ldrh	r0, [r4, #18]
10055814:	40c8      	lsrs	r0, r1
10055816:	07c0      	lsls	r0, r0, #31
10055818:	d019      	beq.n	1005584e <hal_radio_activity_state_cb_check+0x56>
1005581a:	9a01      	ldr	r2, [sp, #4]
1005581c:	9b00      	ldr	r3, [sp, #0]
1005581e:	a803      	add	r0, sp, #12
10055820:	2408      	movs	r4, #8
10055822:	7084      	strb	r4, [r0, #2]
10055824:	0e1c      	lsrs	r4, r3, #24
10055826:	72c4      	strb	r4, [r0, #11]
10055828:	0c1c      	lsrs	r4, r3, #16
1005582a:	7284      	strb	r4, [r0, #10]
1005582c:	0a1c      	lsrs	r4, r3, #8
1005582e:	7244      	strb	r4, [r0, #9]
10055830:	7203      	strb	r3, [r0, #8]
10055832:	71c2      	strb	r2, [r0, #7]
10055834:	7181      	strb	r1, [r0, #6]
10055836:	21ff      	movs	r1, #255	@ 0xff
10055838:	7041      	strb	r1, [r0, #1]
1005583a:	2182      	movs	r1, #130	@ 0x82
1005583c:	7001      	strb	r1, [r0, #0]
1005583e:	2100      	movs	r1, #0
10055840:	7141      	strb	r1, [r0, #5]
10055842:	2204      	movs	r2, #4
10055844:	7102      	strb	r2, [r0, #4]
10055846:	70c1      	strb	r1, [r0, #3]
10055848:	210c      	movs	r1, #12
1005584a:	f7f9 ff41 	bl	1004f6d0 <BLE_STACK_Event>
1005584e:	b006      	add	sp, #24
10055850:	bd10      	pop	{r4, pc}
10055852:	46c0      	nop			@ (mov r8, r8)

10055854 <__arm_cp.22_0>:
10055854:	20002958 	.word	0x20002958

10055858 <aci_l2cap_connection_parameter_update_req_api>:
10055858:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1005585a:	ac01      	add	r4, sp, #4
1005585c:	9d08      	ldr	r5, [sp, #32]
1005585e:	8125      	strh	r5, [r4, #8]
10055860:	80e3      	strh	r3, [r4, #6]
10055862:	80a2      	strh	r2, [r4, #4]
10055864:	8061      	strh	r1, [r4, #2]
10055866:	8020      	strh	r0, [r4, #0]
10055868:	4620      	mov	r0, r4
1005586a:	f004 fd0b 	bl	1005a284 <L2C_build_connect_update_request>
1005586e:	b004      	add	sp, #16
10055870:	bdb0      	pop	{r4, r5, r7, pc}
	...

10055874 <Acl_Init>:
10055874:	4803      	ldr	r0, [pc, #12]	@ (10055884 <__arm_cp.0_0>)
10055876:	6800      	ldr	r0, [r0, #0]
10055878:	2188      	movs	r1, #136	@ 0x88
1005587a:	4a03      	ldr	r2, [pc, #12]	@ (10055888 <__arm_cp.0_1>)
1005587c:	5042      	str	r2, [r0, r1]
1005587e:	2000      	movs	r0, #0
10055880:	4770      	bx	lr
10055882:	46c0      	nop			@ (mov r8, r8)

10055884 <__arm_cp.0_0>:
10055884:	20002958 	.word	0x20002958

10055888 <__arm_cp.0_1>:
10055888:	03030000 	.word	0x03030000

1005588c <isr_Acl_Data_Indication_Queue_Full>:
1005588c:	4805      	ldr	r0, [pc, #20]	@ (100558a4 <__arm_cp.1_0>)
1005588e:	6800      	ldr	r0, [r0, #0]
10055890:	2188      	movs	r1, #136	@ 0x88
10055892:	5c41      	ldrb	r1, [r0, r1]
10055894:	3088      	adds	r0, #136	@ 0x88
10055896:	7880      	ldrb	r0, [r0, #2]
10055898:	4281      	cmp	r1, r0
1005589a:	d801      	bhi.n	100558a0 <isr_Acl_Data_Indication_Queue_Full+0x14>
1005589c:	2000      	movs	r0, #0
1005589e:	4770      	bx	lr
100558a0:	2001      	movs	r0, #1
100558a2:	4770      	bx	lr

100558a4 <__arm_cp.1_0>:
100558a4:	20002958 	.word	0x20002958

100558a8 <isr_Acl_Data_TX_Cmpl_Queue_Full>:
100558a8:	4805      	ldr	r0, [pc, #20]	@ (100558c0 <__arm_cp.2_0>)
100558aa:	6800      	ldr	r0, [r0, #0]
100558ac:	2189      	movs	r1, #137	@ 0x89
100558ae:	5c41      	ldrb	r1, [r0, r1]
100558b0:	3089      	adds	r0, #137	@ 0x89
100558b2:	7880      	ldrb	r0, [r0, #2]
100558b4:	4281      	cmp	r1, r0
100558b6:	d801      	bhi.n	100558bc <isr_Acl_Data_TX_Cmpl_Queue_Full+0x14>
100558b8:	2000      	movs	r0, #0
100558ba:	4770      	bx	lr
100558bc:	2001      	movs	r0, #1
100558be:	4770      	bx	lr

100558c0 <__arm_cp.2_0>:
100558c0:	20002958 	.word	0x20002958

100558c4 <Acl_Rcv_Pkt_Handler>:
100558c4:	b510      	push	{r4, lr}
100558c6:	4604      	mov	r4, r0
100558c8:	480a      	ldr	r0, [pc, #40]	@ (100558f4 <__arm_cp.5_0>)
100558ca:	6800      	ldr	r0, [r0, #0]
100558cc:	6900      	ldr	r0, [r0, #16]
100558ce:	2190      	movs	r1, #144	@ 0x90
100558d0:	2201      	movs	r2, #1
100558d2:	4613      	mov	r3, r2
100558d4:	f000 fa7a 	bl	10055dcc <aci_event_fifo_push_header>
100558d8:	2800      	cmp	r0, #0
100558da:	d004      	beq.n	100558e6 <Acl_Rcv_Pkt_Handler+0x22>
100558dc:	4601      	mov	r1, r0
100558de:	6044      	str	r4, [r0, #4]
100558e0:	2090      	movs	r0, #144	@ 0x90
100558e2:	f000 fb10 	bl	10055f06 <aci_event_fifo_push>
100558e6:	4804      	ldr	r0, [pc, #16]	@ (100558f8 <__arm_cp.5_1>)
100558e8:	6800      	ldr	r0, [r0, #0]
100558ea:	2188      	movs	r1, #136	@ 0x88
100558ec:	5c42      	ldrb	r2, [r0, r1]
100558ee:	1c52      	adds	r2, r2, #1
100558f0:	5442      	strb	r2, [r0, r1]
100558f2:	bd10      	pop	{r4, pc}

100558f4 <__arm_cp.5_0>:
100558f4:	20002908 	.word	0x20002908

100558f8 <__arm_cp.5_1>:
100558f8:	20002958 	.word	0x20002958

100558fc <Acl_Tx_Cmpl_Pkt_Handler>:
100558fc:	b510      	push	{r4, lr}
100558fe:	4604      	mov	r4, r0
10055900:	7a00      	ldrb	r0, [r0, #8]
10055902:	21f7      	movs	r1, #247	@ 0xf7
10055904:	4001      	ands	r1, r0
10055906:	7221      	strb	r1, [r4, #8]
10055908:	480a      	ldr	r0, [pc, #40]	@ (10055934 <__arm_cp.6_0>)
1005590a:	6800      	ldr	r0, [r0, #0]
1005590c:	6900      	ldr	r0, [r0, #16]
1005590e:	2190      	movs	r1, #144	@ 0x90
10055910:	2200      	movs	r2, #0
10055912:	2301      	movs	r3, #1
10055914:	f000 fa5a 	bl	10055dcc <aci_event_fifo_push_header>
10055918:	2800      	cmp	r0, #0
1005591a:	d004      	beq.n	10055926 <Acl_Tx_Cmpl_Pkt_Handler+0x2a>
1005591c:	4601      	mov	r1, r0
1005591e:	6044      	str	r4, [r0, #4]
10055920:	2090      	movs	r0, #144	@ 0x90
10055922:	f000 faf0 	bl	10055f06 <aci_event_fifo_push>
10055926:	4804      	ldr	r0, [pc, #16]	@ (10055938 <__arm_cp.6_1>)
10055928:	6800      	ldr	r0, [r0, #0]
1005592a:	2189      	movs	r1, #137	@ 0x89
1005592c:	5c42      	ldrb	r2, [r0, r1]
1005592e:	1c52      	adds	r2, r2, #1
10055930:	5442      	strb	r2, [r0, r1]
10055932:	bd10      	pop	{r4, pc}

10055934 <__arm_cp.6_0>:
10055934:	20002908 	.word	0x20002908

10055938 <__arm_cp.6_1>:
10055938:	20002958 	.word	0x20002958

1005593c <Acl_Transmit_Data>:
1005593c:	b510      	push	{r4, lr}
1005593e:	2400      	movs	r4, #0
10055940:	61c4      	str	r4, [r0, #28]
10055942:	f006 fc0f 	bl	1005c164 <llc_conn_send_acl_data>
10055946:	2884      	cmp	r0, #132	@ 0x84
10055948:	d000      	beq.n	1005594c <Acl_Transmit_Data+0x10>
1005594a:	2481      	movs	r4, #129	@ 0x81
1005594c:	4620      	mov	r0, r4
1005594e:	bd10      	pop	{r4, pc}

10055950 <hci_acl_data_tx_cmpl_event_int_cb>:
10055950:	b5b0      	push	{r4, r5, r7, lr}
10055952:	6809      	ldr	r1, [r1, #0]
10055954:	2483      	movs	r4, #131	@ 0x83
10055956:	2200      	movs	r2, #0
10055958:	2900      	cmp	r1, #0
1005595a:	d012      	beq.n	10055982 <hci_acl_data_tx_cmpl_event_int_cb+0x32>
1005595c:	69cd      	ldr	r5, [r1, #28]
1005595e:	2400      	movs	r4, #0
10055960:	61cc      	str	r4, [r1, #28]
10055962:	7a08      	ldrb	r0, [r1, #8]
10055964:	06c0      	lsls	r0, r0, #27
10055966:	d403      	bmi.n	10055970 <hci_acl_data_tx_cmpl_event_int_cb+0x20>
10055968:	2000      	movs	r0, #0
1005596a:	f004 ff87 	bl	1005a87c <L2C_mux_acl_packet>
1005596e:	e002      	b.n	10055976 <hci_acl_data_tx_cmpl_event_int_cb+0x26>
10055970:	4608      	mov	r0, r1
10055972:	f004 faab 	bl	10059ecc <hci_tx_acl_data_done>
10055976:	2201      	movs	r2, #1
10055978:	2800      	cmp	r0, #0
1005597a:	4629      	mov	r1, r5
1005597c:	d0ec      	beq.n	10055958 <hci_acl_data_tx_cmpl_event_int_cb+0x8>
1005597e:	2483      	movs	r4, #131	@ 0x83
10055980:	e00c      	b.n	1005599c <hci_acl_data_tx_cmpl_event_int_cb+0x4c>
10055982:	07d0      	lsls	r0, r2, #31
10055984:	d00a      	beq.n	1005599c <hci_acl_data_tx_cmpl_event_int_cb+0x4c>
10055986:	f3ef 8010 	mrs	r0, PRIMASK
1005598a:	b672      	cpsid	i
1005598c:	4804      	ldr	r0, [pc, #16]	@ (100559a0 <__arm_cp.9_0>)
1005598e:	6800      	ldr	r0, [r0, #0]
10055990:	2189      	movs	r1, #137	@ 0x89
10055992:	5c42      	ldrb	r2, [r0, r1]
10055994:	1e52      	subs	r2, r2, #1
10055996:	5442      	strb	r2, [r0, r1]
10055998:	b662      	cpsie	i
1005599a:	2400      	movs	r4, #0
1005599c:	b2e0      	uxtb	r0, r4
1005599e:	bdb0      	pop	{r4, r5, r7, pc}

100559a0 <__arm_cp.9_0>:
100559a0:	20002958 	.word	0x20002958

100559a4 <hci_acl_data_ind_event_int_cb>:
100559a4:	b580      	push	{r7, lr}
100559a6:	480e      	ldr	r0, [pc, #56]	@ (100559e0 <__arm_cp.11_0>)
100559a8:	6800      	ldr	r0, [r0, #0]
100559aa:	222c      	movs	r2, #44	@ 0x2c
100559ac:	5c80      	ldrb	r0, [r0, r2]
100559ae:	07c0      	lsls	r0, r0, #31
100559b0:	6808      	ldr	r0, [r1, #0]
100559b2:	d102      	bne.n	100559ba <hci_acl_data_ind_event_int_cb+0x16>
100559b4:	f004 fed4 	bl	1005a760 <L2C_receive_data>
100559b8:	e001      	b.n	100559be <hci_acl_data_ind_event_int_cb+0x1a>
100559ba:	f004 fa53 	bl	10059e64 <hci_rx_acl_data>
100559be:	2800      	cmp	r0, #0
100559c0:	d001      	beq.n	100559c6 <hci_acl_data_ind_event_int_cb+0x22>
100559c2:	2083      	movs	r0, #131	@ 0x83
100559c4:	bd80      	pop	{r7, pc}
100559c6:	f3ef 8010 	mrs	r0, PRIMASK
100559ca:	b672      	cpsid	i
100559cc:	4805      	ldr	r0, [pc, #20]	@ (100559e4 <__arm_cp.11_1>)
100559ce:	6800      	ldr	r0, [r0, #0]
100559d0:	2188      	movs	r1, #136	@ 0x88
100559d2:	5c42      	ldrb	r2, [r0, r1]
100559d4:	1e52      	subs	r2, r2, #1
100559d6:	5442      	strb	r2, [r0, r1]
100559d8:	b662      	cpsie	i
100559da:	2000      	movs	r0, #0
100559dc:	bd80      	pop	{r7, pc}
100559de:	46c0      	nop			@ (mov r8, r8)

100559e0 <__arm_cp.11_0>:
100559e0:	20002904 	.word	0x20002904

100559e4 <__arm_cp.11_1>:
100559e4:	20002958 	.word	0x20002958

100559e8 <ACL_pkt_init>:
100559e8:	b570      	push	{r4, r5, r6, lr}
100559ea:	4c0b      	ldr	r4, [pc, #44]	@ (10055a18 <__arm_cp.1_0>)
100559ec:	2501      	movs	r5, #1
100559ee:	2204      	movs	r2, #4
100559f0:	4620      	mov	r0, r4
100559f2:	4629      	mov	r1, r5
100559f4:	f00b ff4c 	bl	10061890 <csmem_mem_assign>
100559f8:	4e08      	ldr	r6, [pc, #32]	@ (10055a1c <__arm_cp.1_1>)
100559fa:	6030      	str	r0, [r6, #0]
100559fc:	2206      	movs	r2, #6
100559fe:	4620      	mov	r0, r4
10055a00:	4629      	mov	r1, r5
10055a02:	f00b ff45 	bl	10061890 <csmem_mem_assign>
10055a06:	6831      	ldr	r1, [r6, #0]
10055a08:	6008      	str	r0, [r1, #0]
10055a0a:	6830      	ldr	r0, [r6, #0]
10055a0c:	6801      	ldr	r1, [r0, #0]
10055a0e:	2000      	movs	r0, #0
10055a10:	8088      	strh	r0, [r1, #4]
10055a12:	8048      	strh	r0, [r1, #2]
10055a14:	7008      	strb	r0, [r1, #0]
10055a16:	bd70      	pop	{r4, r5, r6, pc}

10055a18 <__arm_cp.1_0>:
10055a18:	20002968 	.word	0x20002968

10055a1c <__arm_cp.1_1>:
10055a1c:	20002900 	.word	0x20002900

10055a20 <ACL_pkt_get>:
10055a20:	b5b0      	push	{r4, r5, r7, lr}
10055a22:	460d      	mov	r5, r1
10055a24:	4604      	mov	r4, r0
10055a26:	1e41      	subs	r1, r0, #1
10055a28:	4188      	sbcs	r0, r1
10055a2a:	1e51      	subs	r1, r2, #1
10055a2c:	221f      	movs	r2, #31
10055a2e:	430a      	orrs	r2, r1
10055a30:	3221      	adds	r2, #33	@ 0x21
10055a32:	b291      	uxth	r1, r2
10055a34:	f00b fe0a 	bl	1006164c <MBM_get>
10055a38:	2800      	cmp	r0, #0
10055a3a:	d006      	beq.n	10055a4a <ACL_pkt_get+0x2a>
10055a3c:	8085      	strh	r5, [r0, #4]
10055a3e:	6801      	ldr	r1, [r0, #0]
10055a40:	6081      	str	r1, [r0, #8]
10055a42:	2c00      	cmp	r4, #0
10055a44:	d103      	bne.n	10055a4e <ACL_pkt_get+0x2e>
10055a46:	2140      	movs	r1, #64	@ 0x40
10055a48:	e003      	b.n	10055a52 <ACL_pkt_get+0x32>
10055a4a:	2000      	movs	r0, #0
10055a4c:	bdb0      	pop	{r4, r5, r7, pc}
10055a4e:	217f      	movs	r1, #127	@ 0x7f
10055a50:	43c9      	mvns	r1, r1
10055a52:	7301      	strb	r1, [r0, #12]
10055a54:	1d00      	adds	r0, r0, #4
10055a56:	bdb0      	pop	{r4, r5, r7, pc}

10055a58 <ACL_pkt_get_available_mem_buffers>:
10055a58:	b580      	push	{r7, lr}
10055a5a:	1e41      	subs	r1, r0, #1
10055a5c:	4188      	sbcs	r0, r1
10055a5e:	f00b fe5d 	bl	1006171c <MBM_get_available_mem_buffers>
10055a62:	bd80      	pop	{r7, pc}

10055a64 <ACL_pkt_release>:
10055a64:	b580      	push	{r7, lr}
10055a66:	7a01      	ldrb	r1, [r0, #8]
10055a68:	098a      	lsrs	r2, r1, #6
10055a6a:	2101      	movs	r1, #1
10055a6c:	4391      	bics	r1, r2
10055a6e:	1f00      	subs	r0, r0, #4
10055a70:	f00b fe26 	bl	100616c0 <MBM_release>
10055a74:	bd80      	pop	{r7, pc}

10055a76 <ACL_pkt_resize>:
10055a76:	b580      	push	{r7, lr}
10055a78:	460a      	mov	r2, r1
10055a7a:	7a01      	ldrb	r1, [r0, #8]
10055a7c:	098b      	lsrs	r3, r1, #6
10055a7e:	2101      	movs	r1, #1
10055a80:	4399      	bics	r1, r3
10055a82:	6840      	ldr	r0, [r0, #4]
10055a84:	f00b fe5e 	bl	10061744 <MBM_resize>
10055a88:	bd80      	pop	{r7, pc}

10055a8a <ACL_pkt_cmp>:
10055a8a:	b510      	push	{r4, lr}
10055a8c:	4614      	mov	r4, r2
10055a8e:	460a      	mov	r2, r1
10055a90:	6840      	ldr	r0, [r0, #4]
10055a92:	4619      	mov	r1, r3
10055a94:	4623      	mov	r3, r4
10055a96:	f00c f82f 	bl	10061af8 <Mem_Buff_cmp>
10055a9a:	bd10      	pop	{r4, pc}

10055a9c <ACL_pkt_read>:
10055a9c:	b510      	push	{r4, lr}
10055a9e:	4614      	mov	r4, r2
10055aa0:	460a      	mov	r2, r1
10055aa2:	6840      	ldr	r0, [r0, #4]
10055aa4:	4619      	mov	r1, r3
10055aa6:	4623      	mov	r3, r4
10055aa8:	f00b ffed 	bl	10061a86 <Mem_Buff_read>
10055aac:	bd10      	pop	{r4, pc}

10055aae <ACL_pkt_read_16b>:
10055aae:	b5e0      	push	{r5, r6, r7, lr}
10055ab0:	2202      	movs	r2, #2
10055ab2:	ab01      	add	r3, sp, #4
10055ab4:	f7ff fff2 	bl	10055a9c <ACL_pkt_read>
10055ab8:	2800      	cmp	r0, #0
10055aba:	d001      	beq.n	10055ac0 <ACL_pkt_read_16b+0x12>
10055abc:	2000      	movs	r0, #0
10055abe:	e004      	b.n	10055aca <ACL_pkt_read_16b+0x1c>
10055ac0:	a801      	add	r0, sp, #4
10055ac2:	7801      	ldrb	r1, [r0, #0]
10055ac4:	7840      	ldrb	r0, [r0, #1]
10055ac6:	0200      	lsls	r0, r0, #8
10055ac8:	1840      	adds	r0, r0, r1
10055aca:	b280      	uxth	r0, r0
10055acc:	bd8c      	pop	{r2, r3, r7, pc}

10055ace <ACL_pkt_write_16b>:
10055ace:	b5e0      	push	{r5, r6, r7, lr}
10055ad0:	ab01      	add	r3, sp, #4
10055ad2:	701a      	strb	r2, [r3, #0]
10055ad4:	0a12      	lsrs	r2, r2, #8
10055ad6:	705a      	strb	r2, [r3, #1]
10055ad8:	2202      	movs	r2, #2
10055ada:	f000 f801 	bl	10055ae0 <ACL_pkt_write>
10055ade:	bd8c      	pop	{r2, r3, r7, pc}

10055ae0 <ACL_pkt_write>:
10055ae0:	b510      	push	{r4, lr}
10055ae2:	4614      	mov	r4, r2
10055ae4:	460a      	mov	r2, r1
10055ae6:	6840      	ldr	r0, [r0, #4]
10055ae8:	4619      	mov	r1, r3
10055aea:	4623      	mov	r3, r4
10055aec:	f00b ff91 	bl	10061a12 <Mem_Buff_write>
10055af0:	bd10      	pop	{r4, pc}

10055af2 <ACL_pkt_extract_pdu>:
10055af2:	1f01      	subs	r1, r0, #4
10055af4:	2200      	movs	r2, #0
10055af6:	600a      	str	r2, [r1, #0]
10055af8:	6840      	ldr	r0, [r0, #4]
10055afa:	4770      	bx	lr

10055afc <ACL_pkt_connection>:
10055afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055afe:	480f      	ldr	r0, [pc, #60]	@ (10055b3c <__arm_cp.14_0>)
10055b00:	6800      	ldr	r0, [r0, #0]
10055b02:	6805      	ldr	r5, [r0, #0]
10055b04:	7828      	ldrb	r0, [r5, #0]
10055b06:	1c41      	adds	r1, r0, #1
10055b08:	7029      	strb	r1, [r5, #0]
10055b0a:	4f0d      	ldr	r7, [pc, #52]	@ (10055b40 <__arm_cp.14_1>)
10055b0c:	8a39      	ldrh	r1, [r7, #16]
10055b0e:	3125      	adds	r1, #37	@ 0x25
10055b10:	094e      	lsrs	r6, r1, #5
10055b12:	1c74      	adds	r4, r6, #1
10055b14:	2800      	cmp	r0, #0
10055b16:	d109      	bne.n	10055b2c <ACL_pkt_connection+0x30>
10055b18:	2000      	movs	r0, #0
10055b1a:	4621      	mov	r1, r4
10055b1c:	f00b fe4e 	bl	100617bc <MBM_reserve>
10055b20:	8a38      	ldrh	r0, [r7, #16]
10055b22:	3025      	adds	r0, #37	@ 0x25
10055b24:	0940      	lsrs	r0, r0, #5
10055b26:	1c40      	adds	r0, r0, #1
10055b28:	8068      	strh	r0, [r5, #2]
10055b2a:	1cb4      	adds	r4, r6, #2
10055b2c:	2001      	movs	r0, #1
10055b2e:	4621      	mov	r1, r4
10055b30:	f00b fe44 	bl	100617bc <MBM_reserve>
10055b34:	88a8      	ldrh	r0, [r5, #4]
10055b36:	1900      	adds	r0, r0, r4
10055b38:	80a8      	strh	r0, [r5, #4]
10055b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10055b3c <__arm_cp.14_0>:
10055b3c:	20002900 	.word	0x20002900

10055b40 <__arm_cp.14_1>:
10055b40:	2000296c 	.word	0x2000296c

10055b44 <ACL_pkt_disconnection>:
10055b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055b46:	480e      	ldr	r0, [pc, #56]	@ (10055b80 <__arm_cp.15_0>)
10055b48:	6800      	ldr	r0, [r0, #0]
10055b4a:	6806      	ldr	r6, [r0, #0]
10055b4c:	7830      	ldrb	r0, [r6, #0]
10055b4e:	1e40      	subs	r0, r0, #1
10055b50:	7030      	strb	r0, [r6, #0]
10055b52:	490c      	ldr	r1, [pc, #48]	@ (10055b84 <__arm_cp.15_1>)
10055b54:	8a09      	ldrh	r1, [r1, #16]
10055b56:	3125      	adds	r1, #37	@ 0x25
10055b58:	094f      	lsrs	r7, r1, #5
10055b5a:	1c7c      	adds	r4, r7, #1
10055b5c:	0600      	lsls	r0, r0, #24
10055b5e:	d106      	bne.n	10055b6e <ACL_pkt_disconnection+0x2a>
10055b60:	2500      	movs	r5, #0
10055b62:	4628      	mov	r0, r5
10055b64:	4621      	mov	r1, r4
10055b66:	f00b fe7d 	bl	10061864 <MBM_unreserve>
10055b6a:	8075      	strh	r5, [r6, #2]
10055b6c:	1cbc      	adds	r4, r7, #2
10055b6e:	2001      	movs	r0, #1
10055b70:	4621      	mov	r1, r4
10055b72:	f00b fe77 	bl	10061864 <MBM_unreserve>
10055b76:	88b0      	ldrh	r0, [r6, #4]
10055b78:	1b00      	subs	r0, r0, r4
10055b7a:	80b0      	strh	r0, [r6, #4]
10055b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10055b7e:	46c0      	nop			@ (mov r8, r8)

10055b80 <__arm_cp.15_0>:
10055b80:	20002900 	.word	0x20002900

10055b84 <__arm_cp.15_1>:
10055b84:	2000296c 	.word	0x2000296c

10055b88 <BLE_STACK_Tick>:
10055b88:	b580      	push	{r7, lr}
10055b8a:	f00d fc35 	bl	100633f8 <tsk_scheduler>
10055b8e:	bd80      	pop	{r7, pc}

10055b90 <BlueNRG_Stack_Initialize_Layers>:
10055b90:	b5f0      	push	{r4, r5, r6, r7, lr}
10055b92:	b08f      	sub	sp, #60	@ 0x3c
10055b94:	9309      	str	r3, [sp, #36]	@ 0x24
10055b96:	920b      	str	r2, [sp, #44]	@ 0x2c
10055b98:	910a      	str	r1, [sp, #40]	@ 0x28
10055b9a:	9008      	str	r0, [sp, #32]
10055b9c:	f00b fe72 	bl	10061884 <csmem_init>
10055ba0:	2401      	movs	r4, #1
10055ba2:	2138      	movs	r1, #56	@ 0x38
10055ba4:	4620      	mov	r0, r4
10055ba6:	f00b fe85 	bl	100618b4 <csmem_mem_0_assign>
10055baa:	4933      	ldr	r1, [pc, #204]	@ (10055c78 <__arm_cp.1_0>)
10055bac:	7ac9      	ldrb	r1, [r1, #11]
10055bae:	2234      	movs	r2, #52	@ 0x34
10055bb0:	5481      	strb	r1, [r0, r2]
10055bb2:	4e32      	ldr	r6, [pc, #200]	@ (10055c7c <__arm_cp.1_1>)
10055bb4:	6030      	str	r0, [r6, #0]
10055bb6:	2700      	movs	r7, #0
10055bb8:	7007      	strb	r7, [r0, #0]
10055bba:	6830      	ldr	r0, [r6, #0]
10055bbc:	7047      	strb	r7, [r0, #1]
10055bbe:	6830      	ldr	r0, [r6, #0]
10055bc0:	7087      	strb	r7, [r0, #2]
10055bc2:	6830      	ldr	r0, [r6, #0]
10055bc4:	21e1      	movs	r1, #225	@ 0xe1
10055bc6:	70c1      	strb	r1, [r0, #3]
10055bc8:	2005      	movs	r0, #5
10055bca:	01c0      	lsls	r0, r0, #7
10055bcc:	6831      	ldr	r1, [r6, #0]
10055bce:	8088      	strh	r0, [r1, #4]
10055bd0:	2030      	movs	r0, #48	@ 0x30
10055bd2:	8508      	strh	r0, [r1, #40]	@ 0x28
10055bd4:	ad0e      	add	r5, sp, #56	@ 0x38
10055bd6:	a90d      	add	r1, sp, #52	@ 0x34
10055bd8:	aa0c      	add	r2, sp, #48	@ 0x30
10055bda:	4628      	mov	r0, r5
10055bdc:	f7fd fbdb 	bl	10053396 <BLEPLAT_GetPartInfo>
10055be0:	980c      	ldr	r0, [sp, #48]	@ 0x30
10055be2:	0200      	lsls	r0, r0, #8
10055be4:	7829      	ldrb	r1, [r5, #0]
10055be6:	0109      	lsls	r1, r1, #4
10055be8:	4301      	orrs	r1, r0
10055bea:	980d      	ldr	r0, [sp, #52]	@ 0x34
10055bec:	0300      	lsls	r0, r0, #12
10055bee:	4308      	orrs	r0, r1
10055bf0:	1d00      	adds	r0, r0, #4
10055bf2:	6831      	ldr	r1, [r6, #0]
10055bf4:	8548      	strh	r0, [r1, #42]	@ 0x2a
10055bf6:	2118      	movs	r1, #24
10055bf8:	4620      	mov	r0, r4
10055bfa:	f00b fe5b 	bl	100618b4 <csmem_mem_0_assign>
10055bfe:	4920      	ldr	r1, [pc, #128]	@ (10055c80 <__arm_cp.1_2>)
10055c00:	6008      	str	r0, [r1, #0]
10055c02:	7507      	strb	r7, [r0, #20]
10055c04:	f00d fbee 	bl	100633e4 <tsk_init>
10055c08:	981c      	ldr	r0, [sp, #112]	@ 0x70
10055c0a:	9006      	str	r0, [sp, #24]
10055c0c:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
10055c0e:	9405      	str	r4, [sp, #20]
10055c10:	981a      	ldr	r0, [sp, #104]	@ 0x68
10055c12:	9004      	str	r0, [sp, #16]
10055c14:	9819      	ldr	r0, [sp, #100]	@ 0x64
10055c16:	9003      	str	r0, [sp, #12]
10055c18:	9818      	ldr	r0, [sp, #96]	@ 0x60
10055c1a:	9002      	str	r0, [sp, #8]
10055c1c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
10055c1e:	9001      	str	r0, [sp, #4]
10055c20:	9d15      	ldr	r5, [sp, #84]	@ 0x54
10055c22:	9500      	str	r5, [sp, #0]
10055c24:	9808      	ldr	r0, [sp, #32]
10055c26:	990a      	ldr	r1, [sp, #40]	@ 0x28
10055c28:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
10055c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10055c2c:	f7f9 ff9b 	bl	1004fb66 <LL_init_ucfg>
10055c30:	f7f9 feae 	bl	1004f990 <MBM_init_ucfg>
10055c34:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
10055c36:	2c01      	cmp	r4, #1
10055c38:	d101      	bne.n	10055c3e <BlueNRG_Stack_Initialize_Layers+0xae>
10055c3a:	f7f9 fe21 	bl	1004f880 <ACL_pkt_init_ucfg>
10055c3e:	f000 f98b 	bl	10055f58 <Events_Process_init>
10055c42:	2f01      	cmp	r7, #1
10055c44:	d101      	bne.n	10055c4a <BlueNRG_Stack_Initialize_Layers+0xba>
10055c46:	f000 f8bb 	bl	10055dc0 <log_init_ucfg_weak>
10055c4a:	6830      	ldr	r0, [r6, #0]
10055c4c:	212c      	movs	r1, #44	@ 0x2c
10055c4e:	5c40      	ldrb	r0, [r0, r1]
10055c50:	07c0      	lsls	r0, r0, #31
10055c52:	d10e      	bne.n	10055c72 <BlueNRG_Stack_Initialize_Layers+0xe2>
10055c54:	2c01      	cmp	r4, #1
10055c56:	d106      	bne.n	10055c66 <BlueNRG_Stack_Initialize_Layers+0xd6>
10055c58:	9816      	ldr	r0, [sp, #88]	@ 0x58
10055c5a:	f7f9 febe 	bl	1004f9da <L2C_init_ucfg>
10055c5e:	f7f9 ffde 	bl	1004fc1e <smp_init_ucfg>
10055c62:	f7f9 ffe3 	bl	1004fc2c <GAT_att_cmn_init_ucfg>
10055c66:	980a      	ldr	r0, [sp, #40]	@ 0x28
10055c68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10055c6a:	462a      	mov	r2, r5
10055c6c:	4623      	mov	r3, r4
10055c6e:	f000 ff03 	bl	10056a78 <GAP_init_context>
10055c72:	b00f      	add	sp, #60	@ 0x3c
10055c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
10055c76:	46c0      	nop			@ (mov r8, r8)

10055c78 <__arm_cp.1_0>:
10055c78:	2000296c 	.word	0x2000296c

10055c7c <__arm_cp.1_1>:
10055c7c:	20002904 	.word	0x20002904

10055c80 <__arm_cp.1_2>:
10055c80:	200029ac 	.word	0x200029ac

10055c84 <_BlueNRG_Stack_Initialization>:
10055c84:	b5f0      	push	{r4, r5, r6, r7, lr}
10055c86:	b095      	sub	sp, #84	@ 0x54
10055c88:	2001      	movs	r0, #1
10055c8a:	0481      	lsls	r1, r0, #18
10055c8c:	9114      	str	r1, [sp, #80]	@ 0x50
10055c8e:	482e      	ldr	r0, [pc, #184]	@ (10055d48 <__arm_cp.2_0>)
10055c90:	6001      	str	r1, [r0, #0]
10055c92:	f3bf 8f4f 	dsb	sy
10055c96:	f3bf 8f6f 	isb	sy
10055c9a:	f7fe fbbb 	bl	10054414 <BLEPLAT_CNTR_GlobDisableBlue>
10055c9e:	f7fd fc55 	bl	1005354c <BLEPLAT_ClearRadioTimerValue>
10055ca2:	2000      	movs	r0, #0
10055ca4:	9012      	str	r0, [sp, #72]	@ 0x48
10055ca6:	43c0      	mvns	r0, r0
10055ca8:	f7fe fba0 	bl	100543ec <BLEPLAT_CNTR_ClearInterrupt>
10055cac:	f004 fade 	bl	1005a26c <data_length_extension_csr_ucfg_weak>
10055cb0:	9013      	str	r0, [sp, #76]	@ 0x4c
10055cb2:	f7f9 fdd5 	bl	1004f860 <phy_upd_csr_ucfg>
10055cb6:	9011      	str	r0, [sp, #68]	@ 0x44
10055cb8:	f00a fe64 	bl	10060984 <ext_adv_scan_enabled_ucfg_weak>
10055cbc:	9010      	str	r0, [sp, #64]	@ 0x40
10055cbe:	f006 fd2c 	bl	1005c71a <llc_priv_controller_privacy_csr_ucfg_weak>
10055cc2:	900f      	str	r0, [sp, #60]	@ 0x3c
10055cc4:	f00d f98f 	bl	10062fe6 <secure_connections_csr_ucfg_weak>
10055cc8:	f004 fad6 	bl	1005a278 <scan_csr_ucfg_weak>
10055ccc:	900e      	str	r0, [sp, #56]	@ 0x38
10055cce:	f004 fc99 	bl	1005a604 <l2c_cos_csr_ucfg_weak>
10055cd2:	900d      	str	r0, [sp, #52]	@ 0x34
10055cd4:	f006 fd18 	bl	1005c708 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10055cd8:	900c      	str	r0, [sp, #48]	@ 0x30
10055cda:	f006 fd17 	bl	1005c70c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
10055cde:	900b      	str	r0, [sp, #44]	@ 0x2c
10055ce0:	f004 fa68 	bl	1005a1b4 <cte_csr_ucfg_weak>
10055ce4:	4604      	mov	r4, r0
10055ce6:	f004 fac3 	bl	1005a270 <pcl_csr_ucfg_weak>
10055cea:	4605      	mov	r5, r0
10055cec:	f7f9 fdc0 	bl	1004f870 <conn_supp_csr_ucfg>
10055cf0:	4606      	mov	r6, r0
10055cf2:	f004 f96a 	bl	10059fca <chc_csr_ucfg_weak>
10055cf6:	4607      	mov	r7, r0
10055cf8:	f000 f865 	bl	10055dc6 <log_csr_ucfg_weak>
10055cfc:	b2c0      	uxtb	r0, r0
10055cfe:	b2f9      	uxtb	r1, r7
10055d00:	9108      	str	r1, [sp, #32]
10055d02:	9009      	str	r0, [sp, #36]	@ 0x24
10055d04:	b2f0      	uxtb	r0, r6
10055d06:	b2e9      	uxtb	r1, r5
10055d08:	b2e2      	uxtb	r2, r4
10055d0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10055d0c:	b2db      	uxtb	r3, r3
10055d0e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10055d10:	b2e4      	uxtb	r4, r4
10055d12:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10055d14:	b2ed      	uxtb	r5, r5
10055d16:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
10055d18:	b2f6      	uxtb	r6, r6
10055d1a:	9f12      	ldr	r7, [sp, #72]	@ 0x48
10055d1c:	9700      	str	r7, [sp, #0]
10055d1e:	9601      	str	r6, [sp, #4]
10055d20:	9502      	str	r5, [sp, #8]
10055d22:	9403      	str	r4, [sp, #12]
10055d24:	9304      	str	r3, [sp, #16]
10055d26:	9205      	str	r2, [sp, #20]
10055d28:	9106      	str	r1, [sp, #24]
10055d2a:	9007      	str	r0, [sp, #28]
10055d2c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
10055d2e:	b2c0      	uxtb	r0, r0
10055d30:	9911      	ldr	r1, [sp, #68]	@ 0x44
10055d32:	b2c9      	uxtb	r1, r1
10055d34:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
10055d36:	b2d3      	uxtb	r3, r2
10055d38:	9a10      	ldr	r2, [sp, #64]	@ 0x40
10055d3a:	f7ff ff29 	bl	10055b90 <BlueNRG_Stack_Initialize_Layers>
10055d3e:	4803      	ldr	r0, [pc, #12]	@ (10055d4c <__arm_cp.2_1>)
10055d40:	9914      	ldr	r1, [sp, #80]	@ 0x50
10055d42:	6001      	str	r1, [r0, #0]
10055d44:	b015      	add	sp, #84	@ 0x54
10055d46:	bdf0      	pop	{r4, r5, r6, r7, pc}

10055d48 <__arm_cp.2_0>:
10055d48:	e000e180 	.word	0xe000e180

10055d4c <__arm_cp.2_1>:
10055d4c:	e000e100 	.word	0xe000e100

10055d50 <BLE_STACK_Init>:
10055d50:	b5b0      	push	{r4, r5, r7, lr}
10055d52:	4605      	mov	r5, r0
10055d54:	7ac0      	ldrb	r0, [r0, #11]
10055d56:	2412      	movs	r4, #18
10055d58:	2880      	cmp	r0, #128	@ 0x80
10055d5a:	d829      	bhi.n	10055db0 <BLE_STACK_Init+0x60>
10055d5c:	8c29      	ldrh	r1, [r5, #32]
10055d5e:	2917      	cmp	r1, #23
10055d60:	d326      	bcc.n	10055db0 <BLE_STACK_Init+0x60>
10055d62:	4814      	ldr	r0, [pc, #80]	@ (10055db4 <__arm_cp.3_0>)
10055d64:	1d82      	adds	r2, r0, #6
10055d66:	4291      	cmp	r1, r2
10055d68:	d822      	bhi.n	10055db0 <BLE_STACK_Init+0x60>
10055d6a:	8a29      	ldrh	r1, [r5, #16]
10055d6c:	2917      	cmp	r1, #23
10055d6e:	d31f      	bcc.n	10055db0 <BLE_STACK_Init+0x60>
10055d70:	4281      	cmp	r1, r0
10055d72:	d81d      	bhi.n	10055db0 <BLE_STACK_Init+0x60>
10055d74:	7ea8      	ldrb	r0, [r5, #26]
10055d76:	2800      	cmp	r0, #0
10055d78:	d01a      	beq.n	10055db0 <BLE_STACK_Init+0x60>
10055d7a:	f006 fcc7 	bl	1005c70c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
10055d7e:	2800      	cmp	r0, #0
10055d80:	d008      	beq.n	10055d94 <BLE_STACK_Init+0x44>
10055d82:	7ee8      	ldrb	r0, [r5, #27]
10055d84:	2800      	cmp	r0, #0
10055d86:	d013      	beq.n	10055db0 <BLE_STACK_Init+0x60>
10055d88:	2880      	cmp	r0, #128	@ 0x80
10055d8a:	d811      	bhi.n	10055db0 <BLE_STACK_Init+0x60>
10055d8c:	7f28      	ldrb	r0, [r5, #28]
10055d8e:	1e40      	subs	r0, r0, #1
10055d90:	280e      	cmp	r0, #14
10055d92:	d80d      	bhi.n	10055db0 <BLE_STACK_Init+0x60>
10055d94:	4808      	ldr	r0, [pc, #32]	@ (10055db8 <__arm_cp.3_1>)
10055d96:	2234      	movs	r2, #52	@ 0x34
10055d98:	4629      	mov	r1, r5
10055d9a:	f7fd facb 	bl	10053334 <BLEPLAT_MemCpy>
10055d9e:	f00b ff23 	bl	10061be8 <BlueNRG_Stack_Initialize_RAM_check>
10055da2:	2800      	cmp	r0, #0
10055da4:	d403      	bmi.n	10055dae <BLE_STACK_Init+0x5e>
10055da6:	f7ff ff6d 	bl	10055c84 <_BlueNRG_Stack_Initialization>
10055daa:	2400      	movs	r4, #0
10055dac:	e000      	b.n	10055db0 <BLE_STACK_Init+0x60>
10055dae:	2487      	movs	r4, #135	@ 0x87
10055db0:	4620      	mov	r0, r4
10055db2:	bdb0      	pop	{r4, r5, r7, pc}

10055db4 <__arm_cp.3_0>:
10055db4:	000003fa 	.word	0x000003fa

10055db8 <__arm_cp.3_1>:
10055db8:	2000296c 	.word	0x2000296c

10055dbc <log_verbosity_set_ucfg_weak>:
10055dbc:	2000      	movs	r0, #0
10055dbe:	4770      	bx	lr

10055dc0 <log_init_ucfg_weak>:
10055dc0:	4770      	bx	lr

10055dc2 <log_notify_stu_ucfg_weak>:
10055dc2:	4770      	bx	lr

10055dc4 <log_notify_us_flush_ucfg_weak>:
10055dc4:	4770      	bx	lr

10055dc6 <log_csr_ucfg_weak>:
10055dc6:	2000      	movs	r0, #0
10055dc8:	4770      	bx	lr
	...

10055dcc <aci_event_fifo_push_header>:
10055dcc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10055dce:	4615      	mov	r5, r2
10055dd0:	460c      	mov	r4, r1
10055dd2:	4606      	mov	r6, r0
10055dd4:	0608      	lsls	r0, r1, #24
10055dd6:	d414      	bmi.n	10055e02 <aci_event_fifo_push_header+0x36>
10055dd8:	aa02      	add	r2, sp, #8
10055dda:	af01      	add	r7, sp, #4
10055ddc:	4630      	mov	r0, r6
10055dde:	4619      	mov	r1, r3
10055de0:	463b      	mov	r3, r7
10055de2:	f000 f853 	bl	10055e8c <fifoBuf_getFreeHeader>
10055de6:	2800      	cmp	r0, #0
10055de8:	d021      	beq.n	10055e2e <aci_event_fifo_push_header+0x62>
10055dea:	0660      	lsls	r0, r4, #25
10055dec:	d438      	bmi.n	10055e60 <aci_event_fifo_push_header+0x94>
10055dee:	9802      	ldr	r0, [sp, #8]
10055df0:	7881      	ldrb	r1, [r0, #2]
10055df2:	22fc      	movs	r2, #252	@ 0xfc
10055df4:	400a      	ands	r2, r1
10055df6:	7082      	strb	r2, [r0, #2]
10055df8:	9901      	ldr	r1, [sp, #4]
10055dfa:	8001      	strh	r1, [r0, #0]
10055dfc:	8071      	strh	r1, [r6, #2]
10055dfe:	2701      	movs	r7, #1
10055e00:	e02f      	b.n	10055e62 <aci_event_fifo_push_header+0x96>
10055e02:	f3ef 8010 	mrs	r0, PRIMASK
10055e06:	b672      	cpsid	i
10055e08:	aa02      	add	r2, sp, #8
10055e0a:	af01      	add	r7, sp, #4
10055e0c:	4630      	mov	r0, r6
10055e0e:	4619      	mov	r1, r3
10055e10:	463b      	mov	r3, r7
10055e12:	f000 f83b 	bl	10055e8c <fifoBuf_getFreeHeader>
10055e16:	2800      	cmp	r0, #0
10055e18:	d00b      	beq.n	10055e32 <aci_event_fifo_push_header+0x66>
10055e1a:	9902      	ldr	r1, [sp, #8]
10055e1c:	788a      	ldrb	r2, [r1, #2]
10055e1e:	23fc      	movs	r3, #252	@ 0xfc
10055e20:	4013      	ands	r3, r2
10055e22:	708b      	strb	r3, [r1, #2]
10055e24:	9a01      	ldr	r2, [sp, #4]
10055e26:	800a      	strh	r2, [r1, #0]
10055e28:	8072      	strh	r2, [r6, #2]
10055e2a:	2701      	movs	r7, #1
10055e2c:	e002      	b.n	10055e34 <aci_event_fifo_push_header+0x68>
10055e2e:	2700      	movs	r7, #0
10055e30:	e003      	b.n	10055e3a <aci_event_fifo_push_header+0x6e>
10055e32:	2700      	movs	r7, #0
10055e34:	b662      	cpsie	i
10055e36:	2800      	cmp	r0, #0
10055e38:	d113      	bne.n	10055e62 <aci_event_fifo_push_header+0x96>
10055e3a:	f3ef 8010 	mrs	r0, PRIMASK
10055e3e:	b672      	cpsid	i
10055e40:	06a0      	lsls	r0, r4, #26
10055e42:	d40a      	bmi.n	10055e5a <aci_event_fifo_push_header+0x8e>
10055e44:	4810      	ldr	r0, [pc, #64]	@ (10055e88 <__arm_cp.0_0>)
10055e46:	6800      	ldr	r0, [r0, #0]
10055e48:	6801      	ldr	r1, [r0, #0]
10055e4a:	2208      	movs	r2, #8
10055e4c:	430a      	orrs	r2, r1
10055e4e:	6002      	str	r2, [r0, #0]
10055e50:	2000      	movs	r0, #0
10055e52:	f00d fb05 	bl	10063460 <tsk_notify_idx>
10055e56:	f7fc fc86 	bl	10052766 <BLE_STACK_ProcessRequest>
10055e5a:	b662      	cpsie	i
10055e5c:	2600      	movs	r6, #0
10055e5e:	e00a      	b.n	10055e76 <aci_event_fifo_push_header+0xaa>
10055e60:	2700      	movs	r7, #0
10055e62:	9e02      	ldr	r6, [sp, #8]
10055e64:	70f5      	strb	r5, [r6, #3]
10055e66:	00a0      	lsls	r0, r4, #2
10055e68:	2160      	movs	r1, #96	@ 0x60
10055e6a:	4001      	ands	r1, r0
10055e6c:	78b0      	ldrb	r0, [r6, #2]
10055e6e:	2203      	movs	r2, #3
10055e70:	4002      	ands	r2, r0
10055e72:	1850      	adds	r0, r2, r1
10055e74:	70b0      	strb	r0, [r6, #2]
10055e76:	2f00      	cmp	r7, #0
10055e78:	d004      	beq.n	10055e84 <aci_event_fifo_push_header+0xb8>
10055e7a:	2000      	movs	r0, #0
10055e7c:	f00d faf0 	bl	10063460 <tsk_notify_idx>
10055e80:	f7fc fc71 	bl	10052766 <BLE_STACK_ProcessRequest>
10055e84:	4630      	mov	r0, r6
10055e86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10055e88 <__arm_cp.0_0>:
10055e88:	20002908 	.word	0x20002908

10055e8c <fifoBuf_getFreeHeader>:
10055e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055e8e:	9200      	str	r2, [sp, #0]
10055e90:	8845      	ldrh	r5, [r0, #2]
10055e92:	08ac      	lsrs	r4, r5, #2
10055e94:	801c      	strh	r4, [r3, #0]
10055e96:	1c49      	adds	r1, r1, #1
10055e98:	b28a      	uxth	r2, r1
10055e9a:	18a6      	adds	r6, r4, r2
10055e9c:	8887      	ldrh	r7, [r0, #4]
10055e9e:	42be      	cmp	r6, r7
10055ea0:	d900      	bls.n	10055ea4 <fifoBuf_getFreeHeader+0x18>
10055ea2:	1b09      	subs	r1, r1, r4
10055ea4:	190a      	adds	r2, r1, r4
10055ea6:	0092      	lsls	r2, r2, #2
10055ea8:	42be      	cmp	r6, r7
10055eaa:	d900      	bls.n	10055eae <fifoBuf_getFreeHeader+0x22>
10055eac:	1c6d      	adds	r5, r5, #1
10055eae:	2603      	movs	r6, #3
10055eb0:	4035      	ands	r5, r6
10055eb2:	1952      	adds	r2, r2, r5
10055eb4:	801a      	strh	r2, [r3, #0]
10055eb6:	00a3      	lsls	r3, r4, #2
10055eb8:	181b      	adds	r3, r3, r0
10055eba:	3308      	adds	r3, #8
10055ebc:	9c00      	ldr	r4, [sp, #0]
10055ebe:	6023      	str	r3, [r4, #0]
10055ec0:	b292      	uxth	r2, r2
10055ec2:	8805      	ldrh	r5, [r0, #0]
10055ec4:	1b52      	subs	r2, r2, r5
10055ec6:	4617      	mov	r7, r2
10055ec8:	4037      	ands	r7, r6
10055eca:	8884      	ldrh	r4, [r0, #4]
10055ecc:	4367      	muls	r7, r4
10055ece:	4035      	ands	r5, r6
10055ed0:	1952      	adds	r2, r2, r5
10055ed2:	0892      	lsrs	r2, r2, #2
10055ed4:	19d2      	adds	r2, r2, r7
10055ed6:	b295      	uxth	r5, r2
10055ed8:	88c6      	ldrh	r6, [r0, #6]
10055eda:	42b5      	cmp	r5, r6
10055edc:	d900      	bls.n	10055ee0 <fifoBuf_getFreeHeader+0x54>
10055ede:	80c2      	strh	r2, [r0, #6]
10055ee0:	42a5      	cmp	r5, r4
10055ee2:	d80a      	bhi.n	10055efa <fifoBuf_getFreeHeader+0x6e>
10055ee4:	b209      	sxth	r1, r1
10055ee6:	2900      	cmp	r1, #0
10055ee8:	d507      	bpl.n	10055efa <fifoBuf_getFreeHeader+0x6e>
10055eea:	7899      	ldrb	r1, [r3, #2]
10055eec:	22fc      	movs	r2, #252	@ 0xfc
10055eee:	400a      	ands	r2, r1
10055ef0:	1c51      	adds	r1, r2, #1
10055ef2:	7099      	strb	r1, [r3, #2]
10055ef4:	3008      	adds	r0, #8
10055ef6:	9900      	ldr	r1, [sp, #0]
10055ef8:	6008      	str	r0, [r1, #0]
10055efa:	42a5      	cmp	r5, r4
10055efc:	d901      	bls.n	10055f02 <fifoBuf_getFreeHeader+0x76>
10055efe:	2000      	movs	r0, #0
10055f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10055f02:	2001      	movs	r0, #1
10055f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10055f06 <aci_event_fifo_push>:
10055f06:	b580      	push	{r7, lr}
10055f08:	0640      	lsls	r0, r0, #25
10055f0a:	d405      	bmi.n	10055f18 <aci_event_fifo_push+0x12>
10055f0c:	7888      	ldrb	r0, [r1, #2]
10055f0e:	22fc      	movs	r2, #252	@ 0xfc
10055f10:	4002      	ands	r2, r0
10055f12:	1c90      	adds	r0, r2, #2
10055f14:	7088      	strb	r0, [r1, #2]
10055f16:	bd80      	pop	{r7, pc}
10055f18:	4608      	mov	r0, r1
10055f1a:	f000 f801 	bl	10055f20 <event_notify_cb>
10055f1e:	bd80      	pop	{r7, pc}

10055f20 <event_notify_cb>:
10055f20:	b580      	push	{r7, lr}
10055f22:	1d01      	adds	r1, r0, #4
10055f24:	78c2      	ldrb	r2, [r0, #3]
10055f26:	2a14      	cmp	r2, #20
10055f28:	d804      	bhi.n	10055f34 <event_notify_cb+0x14>
10055f2a:	6842      	ldr	r2, [r0, #4]
10055f2c:	7880      	ldrb	r0, [r0, #2]
10055f2e:	0880      	lsrs	r0, r0, #2
10055f30:	4790      	blx	r2
10055f32:	bd80      	pop	{r7, pc}
10055f34:	2a3d      	cmp	r2, #61	@ 0x3d
10055f36:	d803      	bhi.n	10055f40 <event_notify_cb+0x20>
10055f38:	2000      	movs	r0, #0
10055f3a:	f000 f8e9 	bl	10056110 <hci_event_notify_cb>
10055f3e:	bd80      	pop	{r7, pc}
10055f40:	2a3f      	cmp	r2, #63	@ 0x3f
10055f42:	d803      	bhi.n	10055f4c <event_notify_cb+0x2c>
10055f44:	2000      	movs	r0, #0
10055f46:	f000 f8f5 	bl	10056134 <hci_rx_data_notify_cb>
10055f4a:	bd80      	pop	{r7, pc}
10055f4c:	2a60      	cmp	r2, #96	@ 0x60
10055f4e:	d802      	bhi.n	10055f56 <event_notify_cb+0x36>
10055f50:	2000      	movs	r0, #0
10055f52:	f000 f8e4 	bl	1005611e <hci_aci_event_notify_cb>
10055f56:	bd80      	pop	{r7, pc}

10055f58 <Events_Process_init>:
10055f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055f5a:	2001      	movs	r0, #1
10055f5c:	211c      	movs	r1, #28
10055f5e:	4a29      	ldr	r2, [pc, #164]	@ (10056004 <__arm_cp.7_0>)
10055f60:	4790      	blx	r2
10055f62:	4f29      	ldr	r7, [pc, #164]	@ (10056008 <__arm_cp.7_1>)
10055f64:	6038      	str	r0, [r7, #0]
10055f66:	4d29      	ldr	r5, [pc, #164]	@ (1005600c <__arm_cp.7_2>)
10055f68:	8da8      	ldrh	r0, [r5, #44]	@ 0x2c
10055f6a:	1e40      	subs	r0, r0, #1
10055f6c:	2603      	movs	r6, #3
10055f6e:	4330      	orrs	r0, r6
10055f70:	1c40      	adds	r0, r0, #1
10055f72:	0880      	lsrs	r0, r0, #2
10055f74:	1cc0      	adds	r0, r0, #3
10055f76:	2404      	movs	r4, #4
10055f78:	4621      	mov	r1, r4
10055f7a:	4a22      	ldr	r2, [pc, #136]	@ (10056004 <__arm_cp.7_0>)
10055f7c:	4790      	blx	r2
10055f7e:	6839      	ldr	r1, [r7, #0]
10055f80:	6048      	str	r0, [r1, #4]
10055f82:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
10055f84:	1e40      	subs	r0, r0, #1
10055f86:	4330      	orrs	r0, r6
10055f88:	1c40      	adds	r0, r0, #1
10055f8a:	0880      	lsrs	r0, r0, #2
10055f8c:	1cc0      	adds	r0, r0, #3
10055f8e:	4621      	mov	r1, r4
10055f90:	4d1c      	ldr	r5, [pc, #112]	@ (10056004 <__arm_cp.7_0>)
10055f92:	47a8      	blx	r5
10055f94:	462a      	mov	r2, r5
10055f96:	6839      	ldr	r1, [r7, #0]
10055f98:	6088      	str	r0, [r1, #8]
10055f9a:	4d1c      	ldr	r5, [pc, #112]	@ (1005600c <__arm_cp.7_2>)
10055f9c:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
10055f9e:	1e40      	subs	r0, r0, #1
10055fa0:	4330      	orrs	r0, r6
10055fa2:	1c40      	adds	r0, r0, #1
10055fa4:	0880      	lsrs	r0, r0, #2
10055fa6:	1cc0      	adds	r0, r0, #3
10055fa8:	4621      	mov	r1, r4
10055faa:	4790      	blx	r2
10055fac:	6839      	ldr	r1, [r7, #0]
10055fae:	60c8      	str	r0, [r1, #12]
10055fb0:	f7ff fc18 	bl	100557e4 <hal_radio_activity_state_init>
10055fb4:	6838      	ldr	r0, [r7, #0]
10055fb6:	6842      	ldr	r2, [r0, #4]
10055fb8:	2100      	movs	r1, #0
10055fba:	8011      	strh	r1, [r2, #0]
10055fbc:	8051      	strh	r1, [r2, #2]
10055fbe:	6883      	ldr	r3, [r0, #8]
10055fc0:	8019      	strh	r1, [r3, #0]
10055fc2:	80d1      	strh	r1, [r2, #6]
10055fc4:	8daf      	ldrh	r7, [r5, #44]	@ 0x2c
10055fc6:	1e7f      	subs	r7, r7, #1
10055fc8:	4337      	orrs	r7, r6
10055fca:	1c7f      	adds	r7, r7, #1
10055fcc:	08bf      	lsrs	r7, r7, #2
10055fce:	8097      	strh	r7, [r2, #4]
10055fd0:	8059      	strh	r1, [r3, #2]
10055fd2:	80d9      	strh	r1, [r3, #6]
10055fd4:	8def      	ldrh	r7, [r5, #46]	@ 0x2e
10055fd6:	1e7f      	subs	r7, r7, #1
10055fd8:	4337      	orrs	r7, r6
10055fda:	1c7f      	adds	r7, r7, #1
10055fdc:	08bf      	lsrs	r7, r7, #2
10055fde:	809f      	strh	r7, [r3, #4]
10055fe0:	68c7      	ldr	r7, [r0, #12]
10055fe2:	8039      	strh	r1, [r7, #0]
10055fe4:	6102      	str	r2, [r0, #16]
10055fe6:	6143      	str	r3, [r0, #20]
10055fe8:	80f9      	strh	r1, [r7, #6]
10055fea:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
10055fec:	1e52      	subs	r2, r2, #1
10055fee:	4332      	orrs	r2, r6
10055ff0:	1c52      	adds	r2, r2, #1
10055ff2:	0892      	lsrs	r2, r2, #2
10055ff4:	80ba      	strh	r2, [r7, #4]
10055ff6:	8079      	strh	r1, [r7, #2]
10055ff8:	6187      	str	r7, [r0, #24]
10055ffa:	4622      	mov	r2, r4
10055ffc:	f7fd f9aa 	bl	10053354 <BLEPLAT_MemSet>
10056000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10056002:	46c0      	nop			@ (mov r8, r8)

10056004 <__arm_cp.7_0>:
10056004:	100618b5 	.word	0x100618b5

10056008 <__arm_cp.7_1>:
10056008:	20002908 	.word	0x20002908

1005600c <__arm_cp.7_2>:
1005600c:	2000296c 	.word	0x2000296c

10056010 <Events_Process_Q>:
10056010:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10056012:	4d3d      	ldr	r5, [pc, #244]	@ (10056108 <__arm_cp.8_0>)
10056014:	6828      	ldr	r0, [r5, #0]
10056016:	3010      	adds	r0, #16
10056018:	2100      	movs	r1, #0
1005601a:	2906      	cmp	r1, #6
1005601c:	d005      	beq.n	1005602a <Events_Process_Q+0x1a>
1005601e:	c804      	ldmia	r0!, {r2}
10056020:	8852      	ldrh	r2, [r2, #2]
10056022:	ab01      	add	r3, sp, #4
10056024:	525a      	strh	r2, [r3, r1]
10056026:	1c89      	adds	r1, r1, #2
10056028:	e7f7      	b.n	1005601a <Events_Process_Q+0xa>
1005602a:	f3ef 8010 	mrs	r0, PRIMASK
1005602e:	b672      	cpsid	i
10056030:	6828      	ldr	r0, [r5, #0]
10056032:	6804      	ldr	r4, [r0, #0]
10056034:	2700      	movs	r7, #0
10056036:	6007      	str	r7, [r0, #0]
10056038:	b662      	cpsie	i
1005603a:	07e0      	lsls	r0, r4, #31
1005603c:	d002      	beq.n	10056044 <Events_Process_Q+0x34>
1005603e:	2000      	movs	r0, #0
10056040:	f000 fc4a 	bl	100568d8 <hci_hardware_error_event_cb>
10056044:	07a0      	lsls	r0, r4, #30
10056046:	d502      	bpl.n	1005604e <Events_Process_Q+0x3e>
10056048:	2001      	movs	r0, #1
1005604a:	f000 fc45 	bl	100568d8 <hci_hardware_error_event_cb>
1005604e:	0760      	lsls	r0, r4, #29
10056050:	d502      	bpl.n	10056058 <Events_Process_Q+0x48>
10056052:	2002      	movs	r0, #2
10056054:	f000 fc40 	bl	100568d8 <hci_hardware_error_event_cb>
10056058:	0720      	lsls	r0, r4, #28
1005605a:	d502      	bpl.n	10056062 <Events_Process_Q+0x52>
1005605c:	2003      	movs	r0, #3
1005605e:	f000 fc3b 	bl	100568d8 <hci_hardware_error_event_cb>
10056062:	06e0      	lsls	r0, r4, #27
10056064:	d54a      	bpl.n	100560fc <Events_Process_Q+0xec>
10056066:	2004      	movs	r0, #4
10056068:	f000 fc36 	bl	100568d8 <hci_hardware_error_event_cb>
1005606c:	e046      	b.n	100560fc <Events_Process_Q+0xec>
1005606e:	0078      	lsls	r0, r7, #1
10056070:	a901      	add	r1, sp, #4
10056072:	5a0e      	ldrh	r6, [r1, r0]
10056074:	9700      	str	r7, [sp, #0]
10056076:	00bf      	lsls	r7, r7, #2
10056078:	6828      	ldr	r0, [r5, #0]
1005607a:	19c0      	adds	r0, r0, r7
1005607c:	6900      	ldr	r0, [r0, #16]
1005607e:	8801      	ldrh	r1, [r0, #0]
10056080:	8802      	ldrh	r2, [r0, #0]
10056082:	42b2      	cmp	r2, r6
10056084:	d02a      	beq.n	100560dc <Events_Process_Q+0xcc>
10056086:	0889      	lsrs	r1, r1, #2
10056088:	1c89      	adds	r1, r1, #2
1005608a:	0089      	lsls	r1, r1, #2
1005608c:	1844      	adds	r4, r0, r1
1005608e:	78a1      	ldrb	r1, [r4, #2]
10056090:	2203      	movs	r2, #3
10056092:	400a      	ands	r2, r1
10056094:	2a01      	cmp	r2, #1
10056096:	d002      	beq.n	1005609e <Events_Process_Q+0x8e>
10056098:	2a00      	cmp	r2, #0
1005609a:	d103      	bne.n	100560a4 <Events_Process_Q+0x94>
1005609c:	e01e      	b.n	100560dc <Events_Process_Q+0xcc>
1005609e:	7a81      	ldrb	r1, [r0, #10]
100560a0:	3008      	adds	r0, #8
100560a2:	4604      	mov	r4, r0
100560a4:	0648      	lsls	r0, r1, #25
100560a6:	d403      	bmi.n	100560b0 <Events_Process_Q+0xa0>
100560a8:	4620      	mov	r0, r4
100560aa:	f7ff ff39 	bl	10055f20 <event_notify_cb>
100560ae:	e00a      	b.n	100560c6 <Events_Process_Q+0xb6>
100560b0:	78e0      	ldrb	r0, [r4, #3]
100560b2:	2813      	cmp	r0, #19
100560b4:	d207      	bcs.n	100560c6 <Events_Process_Q+0xb6>
100560b6:	0080      	lsls	r0, r0, #2
100560b8:	4914      	ldr	r1, [pc, #80]	@ (1005610c <__arm_cp.8_1>)
100560ba:	580a      	ldr	r2, [r1, r0]
100560bc:	1d21      	adds	r1, r4, #4
100560be:	4620      	mov	r0, r4
100560c0:	4790      	blx	r2
100560c2:	2800      	cmp	r0, #0
100560c4:	d105      	bne.n	100560d2 <Events_Process_Q+0xc2>
100560c6:	6828      	ldr	r0, [r5, #0]
100560c8:	19c0      	adds	r0, r0, r7
100560ca:	6900      	ldr	r0, [r0, #16]
100560cc:	8821      	ldrh	r1, [r4, #0]
100560ce:	8001      	strh	r1, [r0, #0]
100560d0:	e7d5      	b.n	1005607e <Events_Process_Q+0x6e>
100560d2:	2000      	movs	r0, #0
100560d4:	f00d f9c4 	bl	10063460 <tsk_notify_idx>
100560d8:	f7fc fb45 	bl	10052766 <BLE_STACK_ProcessRequest>
100560dc:	f3ef 8010 	mrs	r0, PRIMASK
100560e0:	b672      	cpsid	i
100560e2:	6828      	ldr	r0, [r5, #0]
100560e4:	19c0      	adds	r0, r0, r7
100560e6:	6900      	ldr	r0, [r0, #16]
100560e8:	8841      	ldrh	r1, [r0, #2]
100560ea:	8802      	ldrh	r2, [r0, #0]
100560ec:	4291      	cmp	r1, r2
100560ee:	d102      	bne.n	100560f6 <Events_Process_Q+0xe6>
100560f0:	2100      	movs	r1, #0
100560f2:	8001      	strh	r1, [r0, #0]
100560f4:	8041      	strh	r1, [r0, #2]
100560f6:	b662      	cpsie	i
100560f8:	9f00      	ldr	r7, [sp, #0]
100560fa:	1c7f      	adds	r7, r7, #1
100560fc:	2f03      	cmp	r7, #3
100560fe:	d1b6      	bne.n	1005606e <Events_Process_Q+0x5e>
10056100:	f7ff fb7a 	bl	100557f8 <hal_radio_activity_state_cb_check>
10056104:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10056106:	46c0      	nop			@ (mov r8, r8)

10056108 <__arm_cp.8_0>:
10056108:	20002908 	.word	0x20002908

1005610c <__arm_cp.8_1>:
1005610c:	1006a394 	.word	0x1006a394

10056110 <hci_event_notify_cb>:
10056110:	b580      	push	{r7, lr}
10056112:	4608      	mov	r0, r1
10056114:	7889      	ldrb	r1, [r1, #2]
10056116:	1cc9      	adds	r1, r1, #3
10056118:	f7f9 fada 	bl	1004f6d0 <BLE_STACK_Event>
1005611c:	bd80      	pop	{r7, pc}

1005611e <hci_aci_event_notify_cb>:
1005611e:	b580      	push	{r7, lr}
10056120:	4608      	mov	r0, r1
10056122:	7889      	ldrb	r1, [r1, #2]
10056124:	78c2      	ldrb	r2, [r0, #3]
10056126:	0212      	lsls	r2, r2, #8
10056128:	1851      	adds	r1, r2, r1
1005612a:	1d09      	adds	r1, r1, #4
1005612c:	b289      	uxth	r1, r1
1005612e:	f7f9 facf 	bl	1004f6d0 <BLE_STACK_Event>
10056132:	bd80      	pop	{r7, pc}

10056134 <hci_rx_data_notify_cb>:
10056134:	b580      	push	{r7, lr}
10056136:	4608      	mov	r0, r1
10056138:	78c9      	ldrb	r1, [r1, #3]
1005613a:	7902      	ldrb	r2, [r0, #4]
1005613c:	0212      	lsls	r2, r2, #8
1005613e:	1851      	adds	r1, r2, r1
10056140:	1d49      	adds	r1, r1, #5
10056142:	b289      	uxth	r1, r1
10056144:	f7f9 fac4 	bl	1004f6d0 <BLE_STACK_Event>
10056148:	bd80      	pop	{r7, pc}
	...

1005614c <hci_disconnection_complete_event_int_cb>:
1005614c:	b5b0      	push	{r4, r5, r7, lr}
1005614e:	460d      	mov	r5, r1
10056150:	4604      	mov	r4, r0
10056152:	7908      	ldrb	r0, [r1, #4]
10056154:	7949      	ldrb	r1, [r1, #5]
10056156:	0209      	lsls	r1, r1, #8
10056158:	1808      	adds	r0, r1, r0
1005615a:	f001 fb3f 	bl	100577dc <GAT_att_cmn_disconnection>
1005615e:	7928      	ldrb	r0, [r5, #4]
10056160:	7969      	ldrb	r1, [r5, #5]
10056162:	0209      	lsls	r1, r1, #8
10056164:	1808      	adds	r0, r1, r0
10056166:	f00c feff 	bl	10062f68 <smp_sap_hci_disconnection_complete_evt_hndl>
1005616a:	7928      	ldrb	r0, [r5, #4]
1005616c:	7969      	ldrb	r1, [r5, #5]
1005616e:	0209      	lsls	r1, r1, #8
10056170:	1808      	adds	r0, r1, r0
10056172:	f004 fd1b 	bl	1005abac <l2c_sap_hci_disconnection_complete_evt_hndl>
10056176:	f000 feba 	bl	10056eee <GAP_hci_disconnection_complete_evt_hndl>
1005617a:	7928      	ldrb	r0, [r5, #4]
1005617c:	7969      	ldrb	r1, [r5, #5]
1005617e:	0209      	lsls	r1, r1, #8
10056180:	1808      	adds	r0, r1, r0
10056182:	f7ff fcdf 	bl	10055b44 <ACL_pkt_disconnection>
10056186:	4808      	ldr	r0, [pc, #32]	@ (100561a8 <__arm_cp.14_0>)
10056188:	6800      	ldr	r0, [r0, #0]
1005618a:	2136      	movs	r1, #54	@ 0x36
1005618c:	5c40      	ldrb	r0, [r0, r1]
1005618e:	06c0      	lsls	r0, r0, #27
10056190:	d401      	bmi.n	10056196 <hci_disconnection_complete_event_int_cb+0x4a>
10056192:	2000      	movs	r0, #0
10056194:	bdb0      	pop	{r4, r5, r7, pc}
10056196:	2015      	movs	r0, #21
10056198:	70e0      	strb	r0, [r4, #3]
1005619a:	78a0      	ldrb	r0, [r4, #2]
1005619c:	21bf      	movs	r1, #191	@ 0xbf
1005619e:	4001      	ands	r1, r0
100561a0:	70a1      	strb	r1, [r4, #2]
100561a2:	2084      	movs	r0, #132	@ 0x84
100561a4:	bdb0      	pop	{r4, r5, r7, pc}
100561a6:	46c0      	nop			@ (mov r8, r8)

100561a8 <__arm_cp.14_0>:
100561a8:	20002958 	.word	0x20002958

100561ac <hci_encryption_change_event_int_cb>:
100561ac:	b510      	push	{r4, lr}
100561ae:	4604      	mov	r4, r0
100561b0:	7908      	ldrb	r0, [r1, #4]
100561b2:	794a      	ldrb	r2, [r1, #5]
100561b4:	0212      	lsls	r2, r2, #8
100561b6:	1812      	adds	r2, r2, r0
100561b8:	78c9      	ldrb	r1, [r1, #3]
100561ba:	2006      	movs	r0, #6
100561bc:	f00c fe5a 	bl	10062e74 <smp_sap_hci_encryption_change_evt_hndl>
100561c0:	4807      	ldr	r0, [pc, #28]	@ (100561e0 <__arm_cp.16_0>)
100561c2:	6800      	ldr	r0, [r0, #0]
100561c4:	2136      	movs	r1, #54	@ 0x36
100561c6:	5640      	ldrsb	r0, [r0, r1]
100561c8:	2800      	cmp	r0, #0
100561ca:	d401      	bmi.n	100561d0 <hci_encryption_change_event_int_cb+0x24>
100561cc:	2000      	movs	r0, #0
100561ce:	bd10      	pop	{r4, pc}
100561d0:	2016      	movs	r0, #22
100561d2:	70e0      	strb	r0, [r4, #3]
100561d4:	78a0      	ldrb	r0, [r4, #2]
100561d6:	21bf      	movs	r1, #191	@ 0xbf
100561d8:	4001      	ands	r1, r0
100561da:	70a1      	strb	r1, [r4, #2]
100561dc:	2084      	movs	r0, #132	@ 0x84
100561de:	bd10      	pop	{r4, pc}

100561e0 <__arm_cp.16_0>:
100561e0:	20002958 	.word	0x20002958

100561e4 <hci_encryption_key_refresh_complete_event_int_cb>:
100561e4:	b510      	push	{r4, lr}
100561e6:	4604      	mov	r4, r0
100561e8:	7908      	ldrb	r0, [r1, #4]
100561ea:	794a      	ldrb	r2, [r1, #5]
100561ec:	0212      	lsls	r2, r2, #8
100561ee:	1812      	adds	r2, r2, r0
100561f0:	78c9      	ldrb	r1, [r1, #3]
100561f2:	2007      	movs	r0, #7
100561f4:	f00c fe3e 	bl	10062e74 <smp_sap_hci_encryption_change_evt_hndl>
100561f8:	4807      	ldr	r0, [pc, #28]	@ (10056218 <__arm_cp.18_0>)
100561fa:	6800      	ldr	r0, [r0, #0]
100561fc:	213b      	movs	r1, #59	@ 0x3b
100561fe:	5640      	ldrsb	r0, [r0, r1]
10056200:	2800      	cmp	r0, #0
10056202:	d401      	bmi.n	10056208 <hci_encryption_key_refresh_complete_event_int_cb+0x24>
10056204:	2000      	movs	r0, #0
10056206:	bd10      	pop	{r4, pc}
10056208:	2017      	movs	r0, #23
1005620a:	70e0      	strb	r0, [r4, #3]
1005620c:	78a0      	ldrb	r0, [r4, #2]
1005620e:	21bf      	movs	r1, #191	@ 0xbf
10056210:	4001      	ands	r1, r0
10056212:	70a1      	strb	r1, [r4, #2]
10056214:	2084      	movs	r0, #132	@ 0x84
10056216:	bd10      	pop	{r4, pc}

10056218 <__arm_cp.18_0>:
10056218:	20002958 	.word	0x20002958

1005621c <hci_le_connection_complete_event_int_cb>:
1005621c:	b5b0      	push	{r4, r5, r7, lr}
1005621e:	460d      	mov	r5, r1
10056220:	4604      	mov	r4, r0
10056222:	7908      	ldrb	r0, [r1, #4]
10056224:	2800      	cmp	r0, #0
10056226:	d11d      	bne.n	10056264 <hci_le_connection_complete_event_int_cb+0x48>
10056228:	7968      	ldrb	r0, [r5, #5]
1005622a:	79a9      	ldrb	r1, [r5, #6]
1005622c:	0209      	lsls	r1, r1, #8
1005622e:	1808      	adds	r0, r1, r0
10056230:	f7ff fc64 	bl	10055afc <ACL_pkt_connection>
10056234:	7968      	ldrb	r0, [r5, #5]
10056236:	79a9      	ldrb	r1, [r5, #6]
10056238:	0209      	lsls	r1, r1, #8
1005623a:	1808      	adds	r0, r1, r0
1005623c:	7a2a      	ldrb	r2, [r5, #8]
1005623e:	79e9      	ldrb	r1, [r5, #7]
10056240:	462b      	mov	r3, r5
10056242:	3309      	adds	r3, #9
10056244:	f00c fcd4 	bl	10062bf0 <smp_sap_hci_le_connection_complete_evt_hndl>
10056248:	7968      	ldrb	r0, [r5, #5]
1005624a:	79a9      	ldrb	r1, [r5, #6]
1005624c:	0209      	lsls	r1, r1, #8
1005624e:	1808      	adds	r0, r1, r0
10056250:	f001 faa4 	bl	1005779c <GAT_att_cmn_connection>
10056254:	7968      	ldrb	r0, [r5, #5]
10056256:	79a9      	ldrb	r1, [r5, #6]
10056258:	0209      	lsls	r1, r1, #8
1005625a:	1808      	adds	r0, r1, r0
1005625c:	79e9      	ldrb	r1, [r5, #7]
1005625e:	f004 fc95 	bl	1005ab8c <l2c_sap_hci_le_connection_complete_evt_hndl>
10056262:	7928      	ldrb	r0, [r5, #4]
10056264:	7969      	ldrb	r1, [r5, #5]
10056266:	79aa      	ldrb	r2, [r5, #6]
10056268:	0212      	lsls	r2, r2, #8
1005626a:	1851      	adds	r1, r2, r1
1005626c:	79ea      	ldrb	r2, [r5, #7]
1005626e:	f000 fe3f 	bl	10056ef0 <GAP_hci_le_connection_complete_evt_hndl>
10056272:	4809      	ldr	r0, [pc, #36]	@ (10056298 <__arm_cp.20_0>)
10056274:	6801      	ldr	r1, [r0, #0]
10056276:	203d      	movs	r0, #61	@ 0x3d
10056278:	5c0a      	ldrb	r2, [r1, r0]
1005627a:	2000      	movs	r0, #0
1005627c:	0692      	lsls	r2, r2, #26
1005627e:	d50a      	bpl.n	10056296 <hci_le_connection_complete_event_int_cb+0x7a>
10056280:	313d      	adds	r1, #61	@ 0x3d
10056282:	7a49      	ldrb	r1, [r1, #9]
10056284:	07c9      	lsls	r1, r1, #31
10056286:	d006      	beq.n	10056296 <hci_le_connection_complete_event_int_cb+0x7a>
10056288:	2018      	movs	r0, #24
1005628a:	70e0      	strb	r0, [r4, #3]
1005628c:	78a0      	ldrb	r0, [r4, #2]
1005628e:	21bf      	movs	r1, #191	@ 0xbf
10056290:	4001      	ands	r1, r0
10056292:	70a1      	strb	r1, [r4, #2]
10056294:	2084      	movs	r0, #132	@ 0x84
10056296:	bdb0      	pop	{r4, r5, r7, pc}

10056298 <__arm_cp.20_0>:
10056298:	20002958 	.word	0x20002958

1005629c <hci_le_enhanced_connection_complete_event_int_cb>:
1005629c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005629e:	460d      	mov	r5, r1
100562a0:	4604      	mov	r4, r0
100562a2:	7908      	ldrb	r0, [r1, #4]
100562a4:	2800      	cmp	r0, #0
100562a6:	d123      	bne.n	100562f0 <hci_le_enhanced_connection_complete_event_int_cb+0x54>
100562a8:	7968      	ldrb	r0, [r5, #5]
100562aa:	79a9      	ldrb	r1, [r5, #6]
100562ac:	0209      	lsls	r1, r1, #8
100562ae:	1808      	adds	r0, r1, r0
100562b0:	f7ff fc24 	bl	10055afc <ACL_pkt_connection>
100562b4:	7a2a      	ldrb	r2, [r5, #8]
100562b6:	79e9      	ldrb	r1, [r5, #7]
100562b8:	7968      	ldrb	r0, [r5, #5]
100562ba:	79ab      	ldrb	r3, [r5, #6]
100562bc:	462e      	mov	r6, r5
100562be:	3615      	adds	r6, #21
100562c0:	462f      	mov	r7, r5
100562c2:	370f      	adds	r7, #15
100562c4:	9700      	str	r7, [sp, #0]
100562c6:	9601      	str	r6, [sp, #4]
100562c8:	021b      	lsls	r3, r3, #8
100562ca:	1818      	adds	r0, r3, r0
100562cc:	462b      	mov	r3, r5
100562ce:	3309      	adds	r3, #9
100562d0:	f00c fd28 	bl	10062d24 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl>
100562d4:	7968      	ldrb	r0, [r5, #5]
100562d6:	79a9      	ldrb	r1, [r5, #6]
100562d8:	0209      	lsls	r1, r1, #8
100562da:	1808      	adds	r0, r1, r0
100562dc:	f001 fa5e 	bl	1005779c <GAT_att_cmn_connection>
100562e0:	7968      	ldrb	r0, [r5, #5]
100562e2:	79a9      	ldrb	r1, [r5, #6]
100562e4:	0209      	lsls	r1, r1, #8
100562e6:	1808      	adds	r0, r1, r0
100562e8:	79e9      	ldrb	r1, [r5, #7]
100562ea:	f004 fc4f 	bl	1005ab8c <l2c_sap_hci_le_connection_complete_evt_hndl>
100562ee:	7928      	ldrb	r0, [r5, #4]
100562f0:	7969      	ldrb	r1, [r5, #5]
100562f2:	79aa      	ldrb	r2, [r5, #6]
100562f4:	0212      	lsls	r2, r2, #8
100562f6:	1851      	adds	r1, r2, r1
100562f8:	79ea      	ldrb	r2, [r5, #7]
100562fa:	f000 fdf9 	bl	10056ef0 <GAP_hci_le_connection_complete_evt_hndl>
100562fe:	4809      	ldr	r0, [pc, #36]	@ (10056324 <__arm_cp.22_0>)
10056300:	6801      	ldr	r1, [r0, #0]
10056302:	203d      	movs	r0, #61	@ 0x3d
10056304:	5c0a      	ldrb	r2, [r1, r0]
10056306:	2000      	movs	r0, #0
10056308:	0692      	lsls	r2, r2, #26
1005630a:	d50a      	bpl.n	10056322 <hci_le_enhanced_connection_complete_event_int_cb+0x86>
1005630c:	313d      	adds	r1, #61	@ 0x3d
1005630e:	7a89      	ldrb	r1, [r1, #10]
10056310:	0789      	lsls	r1, r1, #30
10056312:	d506      	bpl.n	10056322 <hci_le_enhanced_connection_complete_event_int_cb+0x86>
10056314:	201c      	movs	r0, #28
10056316:	70e0      	strb	r0, [r4, #3]
10056318:	78a0      	ldrb	r0, [r4, #2]
1005631a:	21bf      	movs	r1, #191	@ 0xbf
1005631c:	4001      	ands	r1, r0
1005631e:	70a1      	strb	r1, [r4, #2]
10056320:	2084      	movs	r0, #132	@ 0x84
10056322:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10056324 <__arm_cp.22_0>:
10056324:	20002958 	.word	0x20002958

10056328 <hci_le_long_term_key_request_event_int_cb>:
10056328:	b570      	push	{r4, r5, r6, lr}
1005632a:	4604      	mov	r4, r0
1005632c:	4d14      	ldr	r5, [pc, #80]	@ (10056380 <__arm_cp.24_0>)
1005632e:	6828      	ldr	r0, [r5, #0]
10056330:	2636      	movs	r6, #54	@ 0x36
10056332:	5d80      	ldrb	r0, [r0, r6]
10056334:	2800      	cmp	r0, #0
10056336:	d10e      	bne.n	10056356 <hci_le_long_term_key_request_event_int_cb+0x2e>
10056338:	7908      	ldrb	r0, [r1, #4]
1005633a:	794a      	ldrb	r2, [r1, #5]
1005633c:	0212      	lsls	r2, r2, #8
1005633e:	1810      	adds	r0, r2, r0
10056340:	7b8a      	ldrb	r2, [r1, #14]
10056342:	7bcb      	ldrb	r3, [r1, #15]
10056344:	021b      	lsls	r3, r3, #8
10056346:	189a      	adds	r2, r3, r2
10056348:	1d89      	adds	r1, r1, #6
1005634a:	f00c fd13 	bl	10062d74 <smp_sap_hci_le_long_term_key_request_evt_hndl>
1005634e:	6828      	ldr	r0, [r5, #0]
10056350:	5d80      	ldrb	r0, [r0, r6]
10056352:	2800      	cmp	r0, #0
10056354:	d012      	beq.n	1005637c <hci_le_long_term_key_request_event_int_cb+0x54>
10056356:	480b      	ldr	r0, [pc, #44]	@ (10056384 <__arm_cp.24_1>)
10056358:	6801      	ldr	r1, [r0, #0]
1005635a:	203d      	movs	r0, #61	@ 0x3d
1005635c:	5c0a      	ldrb	r2, [r1, r0]
1005635e:	2000      	movs	r0, #0
10056360:	0692      	lsls	r2, r2, #26
10056362:	d50a      	bpl.n	1005637a <hci_le_long_term_key_request_event_int_cb+0x52>
10056364:	313d      	adds	r1, #61	@ 0x3d
10056366:	7a49      	ldrb	r1, [r1, #9]
10056368:	06c9      	lsls	r1, r1, #27
1005636a:	d506      	bpl.n	1005637a <hci_le_long_term_key_request_event_int_cb+0x52>
1005636c:	2019      	movs	r0, #25
1005636e:	70e0      	strb	r0, [r4, #3]
10056370:	78a0      	ldrb	r0, [r4, #2]
10056372:	21bf      	movs	r1, #191	@ 0xbf
10056374:	4001      	ands	r1, r0
10056376:	70a1      	strb	r1, [r4, #2]
10056378:	2084      	movs	r0, #132	@ 0x84
1005637a:	bd70      	pop	{r4, r5, r6, pc}
1005637c:	2000      	movs	r0, #0
1005637e:	bd70      	pop	{r4, r5, r6, pc}

10056380 <__arm_cp.24_0>:
10056380:	20002904 	.word	0x20002904

10056384 <__arm_cp.24_1>:
10056384:	20002958 	.word	0x20002958

10056388 <hci_le_read_local_p256_public_key_complete_event_int_cb>:
10056388:	b510      	push	{r4, lr}
1005638a:	4604      	mov	r4, r0
1005638c:	7908      	ldrb	r0, [r1, #4]
1005638e:	1d49      	adds	r1, r1, #5
10056390:	f00c fe2b 	bl	10062fea <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg_weak>
10056394:	480a      	ldr	r0, [pc, #40]	@ (100563c0 <__arm_cp.26_0>)
10056396:	6801      	ldr	r1, [r0, #0]
10056398:	203d      	movs	r0, #61	@ 0x3d
1005639a:	5c0a      	ldrb	r2, [r1, r0]
1005639c:	2000      	movs	r0, #0
1005639e:	0692      	lsls	r2, r2, #26
100563a0:	d504      	bpl.n	100563ac <hci_le_read_local_p256_public_key_complete_event_int_cb+0x24>
100563a2:	313d      	adds	r1, #61	@ 0x3d
100563a4:	2209      	movs	r2, #9
100563a6:	5689      	ldrsb	r1, [r1, r2]
100563a8:	2900      	cmp	r1, #0
100563aa:	d400      	bmi.n	100563ae <hci_le_read_local_p256_public_key_complete_event_int_cb+0x26>
100563ac:	bd10      	pop	{r4, pc}
100563ae:	201a      	movs	r0, #26
100563b0:	70e0      	strb	r0, [r4, #3]
100563b2:	78a0      	ldrb	r0, [r4, #2]
100563b4:	21bf      	movs	r1, #191	@ 0xbf
100563b6:	4001      	ands	r1, r0
100563b8:	70a1      	strb	r1, [r4, #2]
100563ba:	2084      	movs	r0, #132	@ 0x84
100563bc:	bd10      	pop	{r4, pc}
100563be:	46c0      	nop			@ (mov r8, r8)

100563c0 <__arm_cp.26_0>:
100563c0:	20002958 	.word	0x20002958

100563c4 <hci_le_generate_dhkey_complete_event_int_cb>:
100563c4:	b510      	push	{r4, lr}
100563c6:	4604      	mov	r4, r0
100563c8:	7908      	ldrb	r0, [r1, #4]
100563ca:	1d49      	adds	r1, r1, #5
100563cc:	f00c fe0e 	bl	10062fec <smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg_weak>
100563d0:	4809      	ldr	r0, [pc, #36]	@ (100563f8 <__arm_cp.28_0>)
100563d2:	6801      	ldr	r1, [r0, #0]
100563d4:	203d      	movs	r0, #61	@ 0x3d
100563d6:	5c0a      	ldrb	r2, [r1, r0]
100563d8:	2000      	movs	r0, #0
100563da:	0692      	lsls	r2, r2, #26
100563dc:	d50a      	bpl.n	100563f4 <hci_le_generate_dhkey_complete_event_int_cb+0x30>
100563de:	313d      	adds	r1, #61	@ 0x3d
100563e0:	7a89      	ldrb	r1, [r1, #10]
100563e2:	07c9      	lsls	r1, r1, #31
100563e4:	d006      	beq.n	100563f4 <hci_le_generate_dhkey_complete_event_int_cb+0x30>
100563e6:	201b      	movs	r0, #27
100563e8:	70e0      	strb	r0, [r4, #3]
100563ea:	78a0      	ldrb	r0, [r4, #2]
100563ec:	21bf      	movs	r1, #191	@ 0xbf
100563ee:	4001      	ands	r1, r0
100563f0:	70a1      	strb	r1, [r4, #2]
100563f2:	2084      	movs	r0, #132	@ 0x84
100563f4:	bd10      	pop	{r4, pc}
100563f6:	46c0      	nop			@ (mov r8, r8)

100563f8 <__arm_cp.28_0>:
100563f8:	20002958 	.word	0x20002958

100563fc <hci_le_advertising_report_event_int_cb_ucfg_weak>:
100563fc:	2000      	movs	r0, #0
100563fe:	4770      	bx	lr

10056400 <hci_le_directed_advertising_report_event_int_cb_ucfg_weak>:
10056400:	2000      	movs	r0, #0
10056402:	4770      	bx	lr

10056404 <hci_le_extended_advertising_report_event_int_cb_ucfg_weak>:
10056404:	2000      	movs	r0, #0
10056406:	4770      	bx	lr

10056408 <hci_le_scan_timeout_event_int_cb_ucfg_weak>:
10056408:	2000      	movs	r0, #0
1005640a:	4770      	bx	lr

1005640c <hci_le_advertising_set_terminated_event_int_cb_ucfg_weak>:
1005640c:	2000      	movs	r0, #0
1005640e:	4770      	bx	lr

10056410 <hci_read_remote_version_information_complete_event_copy>:
10056410:	7101      	strb	r1, [r0, #4]
10056412:	2300      	movs	r3, #0
10056414:	70c3      	strb	r3, [r0, #3]
10056416:	0a09      	lsrs	r1, r1, #8
10056418:	7141      	strb	r1, [r0, #5]
1005641a:	7811      	ldrb	r1, [r2, #0]
1005641c:	7181      	strb	r1, [r0, #6]
1005641e:	7851      	ldrb	r1, [r2, #1]
10056420:	7893      	ldrb	r3, [r2, #2]
10056422:	7203      	strb	r3, [r0, #8]
10056424:	71c1      	strb	r1, [r0, #7]
10056426:	78d1      	ldrb	r1, [r2, #3]
10056428:	7912      	ldrb	r2, [r2, #4]
1005642a:	7282      	strb	r2, [r0, #10]
1005642c:	7241      	strb	r1, [r0, #9]
1005642e:	4770      	bx	lr

10056430 <hci_number_of_completed_packets_event_copy>:
10056430:	2200      	movs	r2, #0
10056432:	7102      	strb	r2, [r0, #4]
10056434:	2201      	movs	r2, #1
10056436:	70c2      	strb	r2, [r0, #3]
10056438:	7041      	strb	r1, [r0, #1]
1005643a:	7002      	strb	r2, [r0, #0]
1005643c:	0a09      	lsrs	r1, r1, #8
1005643e:	7081      	strb	r1, [r0, #2]
10056440:	4770      	bx	lr

10056442 <aci_gap_proc_complete_event_copy>:
10056442:	b510      	push	{r4, lr}
10056444:	7813      	ldrb	r3, [r2, #0]
10056446:	7183      	strb	r3, [r0, #6]
10056448:	7853      	ldrb	r3, [r2, #1]
1005644a:	1e8c      	subs	r4, r1, #2
1005644c:	7204      	strb	r4, [r0, #8]
1005644e:	71c3      	strb	r3, [r0, #7]
10056450:	3009      	adds	r0, #9
10056452:	1c91      	adds	r1, r2, #2
10056454:	b2e2      	uxtb	r2, r4
10056456:	f7fc ff6d 	bl	10053334 <BLEPLAT_MemCpy>
1005645a:	bd10      	pop	{r4, pc}

1005645c <aci_l2cap_connection_update_req_event_copy>:
1005645c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005645e:	b085      	sub	sp, #20
10056460:	4617      	mov	r7, r2
10056462:	9103      	str	r1, [sp, #12]
10056464:	4604      	mov	r4, r0
10056466:	6850      	ldr	r0, [r2, #4]
10056468:	7a40      	ldrb	r0, [r0, #9]
1005646a:	9004      	str	r0, [sp, #16]
1005646c:	2106      	movs	r1, #6
1005646e:	4d16      	ldr	r5, [pc, #88]	@ (100564c8 <__arm_cp.42_0>)
10056470:	4610      	mov	r0, r2
10056472:	47a8      	blx	r5
10056474:	9002      	str	r0, [sp, #8]
10056476:	2108      	movs	r1, #8
10056478:	4638      	mov	r0, r7
1005647a:	47a8      	blx	r5
1005647c:	9001      	str	r0, [sp, #4]
1005647e:	210a      	movs	r1, #10
10056480:	4638      	mov	r0, r7
10056482:	47a8      	blx	r5
10056484:	4606      	mov	r6, r0
10056486:	210c      	movs	r1, #12
10056488:	4638      	mov	r0, r7
1005648a:	47a8      	blx	r5
1005648c:	462a      	mov	r2, r5
1005648e:	4605      	mov	r5, r0
10056490:	210e      	movs	r1, #14
10056492:	4638      	mov	r0, r7
10056494:	4790      	blx	r2
10056496:	7460      	strb	r0, [r4, #17]
10056498:	0a29      	lsrs	r1, r5, #8
1005649a:	7421      	strb	r1, [r4, #16]
1005649c:	73e5      	strb	r5, [r4, #15]
1005649e:	0a31      	lsrs	r1, r6, #8
100564a0:	73a1      	strb	r1, [r4, #14]
100564a2:	7366      	strb	r6, [r4, #13]
100564a4:	9a01      	ldr	r2, [sp, #4]
100564a6:	0a11      	lsrs	r1, r2, #8
100564a8:	7321      	strb	r1, [r4, #12]
100564aa:	72e2      	strb	r2, [r4, #11]
100564ac:	9a02      	ldr	r2, [sp, #8]
100564ae:	0a11      	lsrs	r1, r2, #8
100564b0:	72a1      	strb	r1, [r4, #10]
100564b2:	7262      	strb	r2, [r4, #9]
100564b4:	9a03      	ldr	r2, [sp, #12]
100564b6:	0a11      	lsrs	r1, r2, #8
100564b8:	71e1      	strb	r1, [r4, #7]
100564ba:	71a2      	strb	r2, [r4, #6]
100564bc:	9904      	ldr	r1, [sp, #16]
100564be:	7221      	strb	r1, [r4, #8]
100564c0:	0a00      	lsrs	r0, r0, #8
100564c2:	74a0      	strb	r0, [r4, #18]
100564c4:	b005      	add	sp, #20
100564c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100564c8 <__arm_cp.42_0>:
100564c8:	10055aaf 	.word	0x10055aaf

100564cc <ACL_pkt_read_8b>:
100564cc:	b51c      	push	{r2, r3, r4, lr}
100564ce:	291f      	cmp	r1, #31
100564d0:	d803      	bhi.n	100564da <ACL_pkt_read_8b+0xe>
100564d2:	aa01      	add	r2, sp, #4
100564d4:	8011      	strh	r1, [r2, #0]
100564d6:	6840      	ldr	r0, [r0, #4]
100564d8:	e005      	b.n	100564e6 <ACL_pkt_read_8b+0x1a>
100564da:	6840      	ldr	r0, [r0, #4]
100564dc:	ac01      	add	r4, sp, #4
100564de:	4622      	mov	r2, r4
100564e0:	f00b fa87 	bl	100619f2 <Mem_Buff_get_buff_off>
100564e4:	8821      	ldrh	r1, [r4, #0]
100564e6:	1840      	adds	r0, r0, r1
100564e8:	7900      	ldrb	r0, [r0, #4]
100564ea:	bd1c      	pop	{r2, r3, r4, pc}

100564ec <aci_l2cap_command_reject_event_copy>:
100564ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100564ee:	4615      	mov	r5, r2
100564f0:	460e      	mov	r6, r1
100564f2:	4604      	mov	r4, r0
100564f4:	6850      	ldr	r0, [r2, #4]
100564f6:	7a40      	ldrb	r0, [r0, #9]
100564f8:	9000      	str	r0, [sp, #0]
100564fa:	2106      	movs	r1, #6
100564fc:	4610      	mov	r0, r2
100564fe:	f7ff fad6 	bl	10055aae <ACL_pkt_read_16b>
10056502:	4607      	mov	r7, r0
10056504:	2108      	movs	r1, #8
10056506:	4628      	mov	r0, r5
10056508:	f7ff fad1 	bl	10055aae <ACL_pkt_read_16b>
1005650c:	1eb9      	subs	r1, r7, #2
1005650e:	72e1      	strb	r1, [r4, #11]
10056510:	7260      	strb	r0, [r4, #9]
10056512:	9a00      	ldr	r2, [sp, #0]
10056514:	7222      	strb	r2, [r4, #8]
10056516:	0a32      	lsrs	r2, r6, #8
10056518:	71e2      	strb	r2, [r4, #7]
1005651a:	71a6      	strb	r6, [r4, #6]
1005651c:	0a00      	lsrs	r0, r0, #8
1005651e:	72a0      	strb	r0, [r4, #10]
10056520:	b2ca      	uxtb	r2, r1
10056522:	89a8      	ldrh	r0, [r5, #12]
10056524:	340c      	adds	r4, #12
10056526:	1d80      	adds	r0, r0, #6
10056528:	b281      	uxth	r1, r0
1005652a:	4628      	mov	r0, r5
1005652c:	4623      	mov	r3, r4
1005652e:	f7ff fab5 	bl	10055a9c <ACL_pkt_read>
10056532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10056534 <aci_att_clt_find_info_resp_event_copy>:
10056534:	b570      	push	{r4, r5, r6, lr}
10056536:	461c      	mov	r4, r3
10056538:	4605      	mov	r5, r0
1005653a:	885e      	ldrh	r6, [r3, #2]
1005653c:	0a10      	lsrs	r0, r2, #8
1005653e:	70e8      	strb	r0, [r5, #3]
10056540:	70aa      	strb	r2, [r5, #2]
10056542:	0a08      	lsrs	r0, r1, #8
10056544:	7068      	strb	r0, [r5, #1]
10056546:	7029      	strb	r1, [r5, #0]
10056548:	8998      	ldrh	r0, [r3, #12]
1005654a:	1c40      	adds	r0, r0, #1
1005654c:	b281      	uxth	r1, r0
1005654e:	4618      	mov	r0, r3
10056550:	f7ff ffbc 	bl	100564cc <ACL_pkt_read_8b>
10056554:	1eb1      	subs	r1, r6, #2
10056556:	0a0a      	lsrs	r2, r1, #8
10056558:	71aa      	strb	r2, [r5, #6]
1005655a:	7169      	strb	r1, [r5, #5]
1005655c:	7128      	strb	r0, [r5, #4]
1005655e:	89a0      	ldrh	r0, [r4, #12]
10056560:	1deb      	adds	r3, r5, #7
10056562:	b28a      	uxth	r2, r1
10056564:	1c80      	adds	r0, r0, #2
10056566:	b281      	uxth	r1, r0
10056568:	4620      	mov	r0, r4
1005656a:	f7ff fa97 	bl	10055a9c <ACL_pkt_read>
1005656e:	bd70      	pop	{r4, r5, r6, pc}

10056570 <aci_att_clt_find_by_type_value_resp_event_copy>:
10056570:	b5b0      	push	{r4, r5, r7, lr}
10056572:	461c      	mov	r4, r3
10056574:	885b      	ldrh	r3, [r3, #2]
10056576:	0a15      	lsrs	r5, r2, #8
10056578:	70c5      	strb	r5, [r0, #3]
1005657a:	7082      	strb	r2, [r0, #2]
1005657c:	0a0a      	lsrs	r2, r1, #8
1005657e:	7042      	strb	r2, [r0, #1]
10056580:	7001      	strb	r1, [r0, #0]
10056582:	1e59      	subs	r1, r3, #1
10056584:	088a      	lsrs	r2, r1, #2
10056586:	7102      	strb	r2, [r0, #4]
10056588:	89a5      	ldrh	r5, [r4, #12]
1005658a:	1d43      	adds	r3, r0, #5
1005658c:	b28a      	uxth	r2, r1
1005658e:	1c68      	adds	r0, r5, #1
10056590:	b281      	uxth	r1, r0
10056592:	4620      	mov	r0, r4
10056594:	f7ff fa82 	bl	10055a9c <ACL_pkt_read>
10056598:	bdb0      	pop	{r4, r5, r7, pc}

1005659a <aci_att_clt_read_by_type_resp_event_copy>:
1005659a:	b570      	push	{r4, r5, r6, lr}
1005659c:	461c      	mov	r4, r3
1005659e:	4605      	mov	r5, r0
100565a0:	885e      	ldrh	r6, [r3, #2]
100565a2:	0a10      	lsrs	r0, r2, #8
100565a4:	70e8      	strb	r0, [r5, #3]
100565a6:	70aa      	strb	r2, [r5, #2]
100565a8:	0a08      	lsrs	r0, r1, #8
100565aa:	7068      	strb	r0, [r5, #1]
100565ac:	7029      	strb	r1, [r5, #0]
100565ae:	8998      	ldrh	r0, [r3, #12]
100565b0:	1c40      	adds	r0, r0, #1
100565b2:	b281      	uxth	r1, r0
100565b4:	4618      	mov	r0, r3
100565b6:	f7ff ff89 	bl	100564cc <ACL_pkt_read_8b>
100565ba:	1eb1      	subs	r1, r6, #2
100565bc:	0a0a      	lsrs	r2, r1, #8
100565be:	71aa      	strb	r2, [r5, #6]
100565c0:	7169      	strb	r1, [r5, #5]
100565c2:	7128      	strb	r0, [r5, #4]
100565c4:	89a0      	ldrh	r0, [r4, #12]
100565c6:	1deb      	adds	r3, r5, #7
100565c8:	b28a      	uxth	r2, r1
100565ca:	1c80      	adds	r0, r0, #2
100565cc:	b281      	uxth	r1, r0
100565ce:	4620      	mov	r0, r4
100565d0:	f7ff fa64 	bl	10055a9c <ACL_pkt_read>
100565d4:	bd70      	pop	{r4, r5, r6, pc}

100565d6 <aci_att_clt_read_resp_event_copy>:
100565d6:	b5b0      	push	{r4, r5, r7, lr}
100565d8:	461c      	mov	r4, r3
100565da:	885b      	ldrh	r3, [r3, #2]
100565dc:	0a15      	lsrs	r5, r2, #8
100565de:	70c5      	strb	r5, [r0, #3]
100565e0:	7082      	strb	r2, [r0, #2]
100565e2:	0a0a      	lsrs	r2, r1, #8
100565e4:	7042      	strb	r2, [r0, #1]
100565e6:	7001      	strb	r1, [r0, #0]
100565e8:	1e59      	subs	r1, r3, #1
100565ea:	7101      	strb	r1, [r0, #4]
100565ec:	0a0a      	lsrs	r2, r1, #8
100565ee:	7142      	strb	r2, [r0, #5]
100565f0:	89a5      	ldrh	r5, [r4, #12]
100565f2:	1d83      	adds	r3, r0, #6
100565f4:	b28a      	uxth	r2, r1
100565f6:	1c68      	adds	r0, r5, #1
100565f8:	b281      	uxth	r1, r0
100565fa:	4620      	mov	r0, r4
100565fc:	f7ff fa4e 	bl	10055a9c <ACL_pkt_read>
10056600:	bdb0      	pop	{r4, r5, r7, pc}

10056602 <aci_att_clt_read_blob_resp_event_copy>:
10056602:	b5b0      	push	{r4, r5, r7, lr}
10056604:	461c      	mov	r4, r3
10056606:	885b      	ldrh	r3, [r3, #2]
10056608:	0a15      	lsrs	r5, r2, #8
1005660a:	70c5      	strb	r5, [r0, #3]
1005660c:	7082      	strb	r2, [r0, #2]
1005660e:	0a0a      	lsrs	r2, r1, #8
10056610:	7042      	strb	r2, [r0, #1]
10056612:	7001      	strb	r1, [r0, #0]
10056614:	1e59      	subs	r1, r3, #1
10056616:	7101      	strb	r1, [r0, #4]
10056618:	0a0a      	lsrs	r2, r1, #8
1005661a:	7142      	strb	r2, [r0, #5]
1005661c:	89a5      	ldrh	r5, [r4, #12]
1005661e:	1d83      	adds	r3, r0, #6
10056620:	b28a      	uxth	r2, r1
10056622:	1c68      	adds	r0, r5, #1
10056624:	b281      	uxth	r1, r0
10056626:	4620      	mov	r0, r4
10056628:	f7ff fa38 	bl	10055a9c <ACL_pkt_read>
1005662c:	bdb0      	pop	{r4, r5, r7, pc}

1005662e <aci_att_clt_read_multiple_resp_event_copy>:
1005662e:	b5b0      	push	{r4, r5, r7, lr}
10056630:	461c      	mov	r4, r3
10056632:	885b      	ldrh	r3, [r3, #2]
10056634:	0a15      	lsrs	r5, r2, #8
10056636:	70c5      	strb	r5, [r0, #3]
10056638:	7082      	strb	r2, [r0, #2]
1005663a:	0a0a      	lsrs	r2, r1, #8
1005663c:	7042      	strb	r2, [r0, #1]
1005663e:	7001      	strb	r1, [r0, #0]
10056640:	1e59      	subs	r1, r3, #1
10056642:	7101      	strb	r1, [r0, #4]
10056644:	0a0a      	lsrs	r2, r1, #8
10056646:	7142      	strb	r2, [r0, #5]
10056648:	89a5      	ldrh	r5, [r4, #12]
1005664a:	1d83      	adds	r3, r0, #6
1005664c:	b28a      	uxth	r2, r1
1005664e:	1c68      	adds	r0, r5, #1
10056650:	b281      	uxth	r1, r0
10056652:	4620      	mov	r0, r4
10056654:	f7ff fa22 	bl	10055a9c <ACL_pkt_read>
10056658:	bdb0      	pop	{r4, r5, r7, pc}

1005665a <aci_att_clt_read_by_group_type_resp_event_copy>:
1005665a:	b570      	push	{r4, r5, r6, lr}
1005665c:	461c      	mov	r4, r3
1005665e:	4605      	mov	r5, r0
10056660:	885e      	ldrh	r6, [r3, #2]
10056662:	0a10      	lsrs	r0, r2, #8
10056664:	70e8      	strb	r0, [r5, #3]
10056666:	70aa      	strb	r2, [r5, #2]
10056668:	0a08      	lsrs	r0, r1, #8
1005666a:	7068      	strb	r0, [r5, #1]
1005666c:	7029      	strb	r1, [r5, #0]
1005666e:	8998      	ldrh	r0, [r3, #12]
10056670:	1c40      	adds	r0, r0, #1
10056672:	b281      	uxth	r1, r0
10056674:	4618      	mov	r0, r3
10056676:	f7ff ff29 	bl	100564cc <ACL_pkt_read_8b>
1005667a:	1eb1      	subs	r1, r6, #2
1005667c:	0a0a      	lsrs	r2, r1, #8
1005667e:	71aa      	strb	r2, [r5, #6]
10056680:	7169      	strb	r1, [r5, #5]
10056682:	7128      	strb	r0, [r5, #4]
10056684:	89a0      	ldrh	r0, [r4, #12]
10056686:	1deb      	adds	r3, r5, #7
10056688:	b28a      	uxth	r2, r1
1005668a:	1c80      	adds	r0, r0, #2
1005668c:	b281      	uxth	r1, r0
1005668e:	4620      	mov	r0, r4
10056690:	f7ff fa04 	bl	10055a9c <ACL_pkt_read>
10056694:	bd70      	pop	{r4, r5, r6, pc}

10056696 <aci_att_clt_prepare_write_resp_event_copy>:
10056696:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10056698:	461c      	mov	r4, r3
1005669a:	4617      	mov	r7, r2
1005669c:	9102      	str	r1, [sp, #8]
1005669e:	4605      	mov	r5, r0
100566a0:	8858      	ldrh	r0, [r3, #2]
100566a2:	9001      	str	r0, [sp, #4]
100566a4:	8998      	ldrh	r0, [r3, #12]
100566a6:	1c40      	adds	r0, r0, #1
100566a8:	b281      	uxth	r1, r0
100566aa:	4618      	mov	r0, r3
100566ac:	f7ff f9ff 	bl	10055aae <ACL_pkt_read_16b>
100566b0:	4606      	mov	r6, r0
100566b2:	89a0      	ldrh	r0, [r4, #12]
100566b4:	1cc0      	adds	r0, r0, #3
100566b6:	b281      	uxth	r1, r0
100566b8:	4620      	mov	r0, r4
100566ba:	f7ff f9f8 	bl	10055aae <ACL_pkt_read_16b>
100566be:	9901      	ldr	r1, [sp, #4]
100566c0:	1f49      	subs	r1, r1, #5
100566c2:	0a0a      	lsrs	r2, r1, #8
100566c4:	726a      	strb	r2, [r5, #9]
100566c6:	7229      	strb	r1, [r5, #8]
100566c8:	71a8      	strb	r0, [r5, #6]
100566ca:	0a32      	lsrs	r2, r6, #8
100566cc:	716a      	strb	r2, [r5, #5]
100566ce:	712e      	strb	r6, [r5, #4]
100566d0:	0a3a      	lsrs	r2, r7, #8
100566d2:	70ea      	strb	r2, [r5, #3]
100566d4:	70af      	strb	r7, [r5, #2]
100566d6:	9b02      	ldr	r3, [sp, #8]
100566d8:	0a1a      	lsrs	r2, r3, #8
100566da:	706a      	strb	r2, [r5, #1]
100566dc:	702b      	strb	r3, [r5, #0]
100566de:	0a00      	lsrs	r0, r0, #8
100566e0:	71e8      	strb	r0, [r5, #7]
100566e2:	89a0      	ldrh	r0, [r4, #12]
100566e4:	350a      	adds	r5, #10
100566e6:	b28a      	uxth	r2, r1
100566e8:	1d40      	adds	r0, r0, #5
100566ea:	b281      	uxth	r1, r0
100566ec:	4620      	mov	r0, r4
100566ee:	462b      	mov	r3, r5
100566f0:	f7ff f9d4 	bl	10055a9c <ACL_pkt_read>
100566f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100566f6 <aci_gatt_clt_indication_event_copy>:
100566f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100566f8:	461c      	mov	r4, r3
100566fa:	4617      	mov	r7, r2
100566fc:	460e      	mov	r6, r1
100566fe:	4605      	mov	r5, r0
10056700:	8858      	ldrh	r0, [r3, #2]
10056702:	9000      	str	r0, [sp, #0]
10056704:	8998      	ldrh	r0, [r3, #12]
10056706:	1c40      	adds	r0, r0, #1
10056708:	b281      	uxth	r1, r0
1005670a:	4618      	mov	r0, r3
1005670c:	f7ff f9cf 	bl	10055aae <ACL_pkt_read_16b>
10056710:	9900      	ldr	r1, [sp, #0]
10056712:	1ec9      	subs	r1, r1, #3
10056714:	0a0a      	lsrs	r2, r1, #8
10056716:	71ea      	strb	r2, [r5, #7]
10056718:	71a9      	strb	r1, [r5, #6]
1005671a:	7128      	strb	r0, [r5, #4]
1005671c:	0a3a      	lsrs	r2, r7, #8
1005671e:	70ea      	strb	r2, [r5, #3]
10056720:	70af      	strb	r7, [r5, #2]
10056722:	0a32      	lsrs	r2, r6, #8
10056724:	706a      	strb	r2, [r5, #1]
10056726:	702e      	strb	r6, [r5, #0]
10056728:	0a00      	lsrs	r0, r0, #8
1005672a:	7168      	strb	r0, [r5, #5]
1005672c:	89a0      	ldrh	r0, [r4, #12]
1005672e:	3508      	adds	r5, #8
10056730:	b28a      	uxth	r2, r1
10056732:	1cc0      	adds	r0, r0, #3
10056734:	b281      	uxth	r1, r0
10056736:	4620      	mov	r0, r4
10056738:	462b      	mov	r3, r5
1005673a:	f7ff f9af 	bl	10055a9c <ACL_pkt_read>
1005673e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10056740 <aci_gatt_clt_notification_event_copy>:
10056740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10056742:	461c      	mov	r4, r3
10056744:	4617      	mov	r7, r2
10056746:	460e      	mov	r6, r1
10056748:	4605      	mov	r5, r0
1005674a:	8858      	ldrh	r0, [r3, #2]
1005674c:	9000      	str	r0, [sp, #0]
1005674e:	8998      	ldrh	r0, [r3, #12]
10056750:	1c40      	adds	r0, r0, #1
10056752:	b281      	uxth	r1, r0
10056754:	4618      	mov	r0, r3
10056756:	f7ff f9aa 	bl	10055aae <ACL_pkt_read_16b>
1005675a:	9900      	ldr	r1, [sp, #0]
1005675c:	1ec9      	subs	r1, r1, #3
1005675e:	0a0a      	lsrs	r2, r1, #8
10056760:	71ea      	strb	r2, [r5, #7]
10056762:	71a9      	strb	r1, [r5, #6]
10056764:	7128      	strb	r0, [r5, #4]
10056766:	0a3a      	lsrs	r2, r7, #8
10056768:	70ea      	strb	r2, [r5, #3]
1005676a:	70af      	strb	r7, [r5, #2]
1005676c:	0a32      	lsrs	r2, r6, #8
1005676e:	706a      	strb	r2, [r5, #1]
10056770:	702e      	strb	r6, [r5, #0]
10056772:	0a00      	lsrs	r0, r0, #8
10056774:	7168      	strb	r0, [r5, #5]
10056776:	89a0      	ldrh	r0, [r4, #12]
10056778:	3508      	adds	r5, #8
1005677a:	b28a      	uxth	r2, r1
1005677c:	1cc0      	adds	r0, r0, #3
1005677e:	b281      	uxth	r1, r0
10056780:	4620      	mov	r0, r4
10056782:	462b      	mov	r3, r5
10056784:	f7ff f98a 	bl	10055a9c <ACL_pkt_read>
10056788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005678a <aci_gatt_clt_disc_read_char_by_uuid_resp_event_copy>:
1005678a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
1005678c:	461d      	mov	r5, r3
1005678e:	4604      	mov	r4, r0
10056790:	7202      	strb	r2, [r0, #8]
10056792:	7181      	strb	r1, [r0, #6]
10056794:	0a10      	lsrs	r0, r2, #8
10056796:	7260      	strb	r0, [r4, #9]
10056798:	0a08      	lsrs	r0, r1, #8
1005679a:	71e0      	strb	r0, [r4, #7]
1005679c:	9e07      	ldr	r6, [sp, #28]
1005679e:	89b0      	ldrh	r0, [r6, #12]
100567a0:	18c0      	adds	r0, r0, r3
100567a2:	b281      	uxth	r1, r0
100567a4:	2202      	movs	r2, #2
100567a6:	ab01      	add	r3, sp, #4
100567a8:	4630      	mov	r0, r6
100567aa:	f7ff f977 	bl	10055a9c <ACL_pkt_read>
100567ae:	9806      	ldr	r0, [sp, #24]
100567b0:	1e80      	subs	r0, r0, #2
100567b2:	7320      	strb	r0, [r4, #12]
100567b4:	9901      	ldr	r1, [sp, #4]
100567b6:	72a1      	strb	r1, [r4, #10]
100567b8:	0a09      	lsrs	r1, r1, #8
100567ba:	72e1      	strb	r1, [r4, #11]
100567bc:	89b1      	ldrh	r1, [r6, #12]
100567be:	1869      	adds	r1, r5, r1
100567c0:	1c89      	adds	r1, r1, #2
100567c2:	b289      	uxth	r1, r1
100567c4:	340d      	adds	r4, #13
100567c6:	b2c2      	uxtb	r2, r0
100567c8:	4630      	mov	r0, r6
100567ca:	4623      	mov	r3, r4
100567cc:	f7ff f966 	bl	10055a9c <ACL_pkt_read>
100567d0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

100567d2 <aci_gatt_srv_write_event_copy>:
100567d2:	b5b0      	push	{r4, r5, r7, lr}
100567d4:	4615      	mov	r5, r2
100567d6:	4604      	mov	r4, r0
100567d8:	9a05      	ldr	r2, [sp, #20]
100567da:	71c2      	strb	r2, [r0, #7]
100567dc:	9804      	ldr	r0, [sp, #16]
100567de:	7160      	strb	r0, [r4, #5]
100567e0:	7123      	strb	r3, [r4, #4]
100567e2:	70a5      	strb	r5, [r4, #2]
100567e4:	7021      	strb	r1, [r4, #0]
100567e6:	0a13      	lsrs	r3, r2, #8
100567e8:	7223      	strb	r3, [r4, #8]
100567ea:	0a00      	lsrs	r0, r0, #8
100567ec:	71a0      	strb	r0, [r4, #6]
100567ee:	0a28      	lsrs	r0, r5, #8
100567f0:	70e0      	strb	r0, [r4, #3]
100567f2:	0a08      	lsrs	r0, r1, #8
100567f4:	7060      	strb	r0, [r4, #1]
100567f6:	9806      	ldr	r0, [sp, #24]
100567f8:	8981      	ldrh	r1, [r0, #12]
100567fa:	3409      	adds	r4, #9
100567fc:	1cc9      	adds	r1, r1, #3
100567fe:	b289      	uxth	r1, r1
10056800:	4623      	mov	r3, r4
10056802:	f7ff f94b 	bl	10055a9c <ACL_pkt_read>
10056806:	bdb0      	pop	{r4, r5, r7, pc}

10056808 <aci_att_srv_prepare_write_req_event_copy>:
10056808:	b570      	push	{r4, r5, r6, lr}
1005680a:	4615      	mov	r5, r2
1005680c:	4604      	mov	r4, r0
1005680e:	9a05      	ldr	r2, [sp, #20]
10056810:	7202      	strb	r2, [r0, #8]
10056812:	9804      	ldr	r0, [sp, #16]
10056814:	71a0      	strb	r0, [r4, #6]
10056816:	7123      	strb	r3, [r4, #4]
10056818:	70a5      	strb	r5, [r4, #2]
1005681a:	7021      	strb	r1, [r4, #0]
1005681c:	0a16      	lsrs	r6, r2, #8
1005681e:	7266      	strb	r6, [r4, #9]
10056820:	0a00      	lsrs	r0, r0, #8
10056822:	71e0      	strb	r0, [r4, #7]
10056824:	0a18      	lsrs	r0, r3, #8
10056826:	7160      	strb	r0, [r4, #5]
10056828:	0a28      	lsrs	r0, r5, #8
1005682a:	70e0      	strb	r0, [r4, #3]
1005682c:	0a08      	lsrs	r0, r1, #8
1005682e:	7060      	strb	r0, [r4, #1]
10056830:	9806      	ldr	r0, [sp, #24]
10056832:	8981      	ldrh	r1, [r0, #12]
10056834:	340a      	adds	r4, #10
10056836:	1d49      	adds	r1, r1, #5
10056838:	b289      	uxth	r1, r1
1005683a:	4623      	mov	r3, r4
1005683c:	f7ff f92e 	bl	10055a9c <ACL_pkt_read>
10056840:	bd70      	pop	{r4, r5, r6, pc}

10056842 <aci_gatt_clt_multi_notification_int_event_copy>:
10056842:	b5b0      	push	{r4, r5, r7, lr}
10056844:	461c      	mov	r4, r3
10056846:	885b      	ldrh	r3, [r3, #2]
10056848:	0a15      	lsrs	r5, r2, #8
1005684a:	70c5      	strb	r5, [r0, #3]
1005684c:	7082      	strb	r2, [r0, #2]
1005684e:	0a0a      	lsrs	r2, r1, #8
10056850:	7042      	strb	r2, [r0, #1]
10056852:	7001      	strb	r1, [r0, #0]
10056854:	1e59      	subs	r1, r3, #1
10056856:	7101      	strb	r1, [r0, #4]
10056858:	0a0a      	lsrs	r2, r1, #8
1005685a:	7142      	strb	r2, [r0, #5]
1005685c:	89a5      	ldrh	r5, [r4, #12]
1005685e:	1d83      	adds	r3, r0, #6
10056860:	b28a      	uxth	r2, r1
10056862:	1c68      	adds	r0, r5, #1
10056864:	b281      	uxth	r1, r0
10056866:	4620      	mov	r0, r4
10056868:	f7ff f918 	bl	10055a9c <ACL_pkt_read>
1005686c:	bdb0      	pop	{r4, r5, r7, pc}

1005686e <aci_att_clt_read_multiple_var_len_resp_event_copy>:
1005686e:	b5b0      	push	{r4, r5, r7, lr}
10056870:	461c      	mov	r4, r3
10056872:	885b      	ldrh	r3, [r3, #2]
10056874:	0a15      	lsrs	r5, r2, #8
10056876:	70c5      	strb	r5, [r0, #3]
10056878:	7082      	strb	r2, [r0, #2]
1005687a:	0a0a      	lsrs	r2, r1, #8
1005687c:	7042      	strb	r2, [r0, #1]
1005687e:	7001      	strb	r1, [r0, #0]
10056880:	1e59      	subs	r1, r3, #1
10056882:	7101      	strb	r1, [r0, #4]
10056884:	0a0a      	lsrs	r2, r1, #8
10056886:	7142      	strb	r2, [r0, #5]
10056888:	89a5      	ldrh	r5, [r4, #12]
1005688a:	1d83      	adds	r3, r0, #6
1005688c:	b28a      	uxth	r2, r1
1005688e:	1c68      	adds	r0, r5, #1
10056890:	b281      	uxth	r1, r0
10056892:	4620      	mov	r0, r4
10056894:	f7ff f902 	bl	10055a9c <ACL_pkt_read>
10056898:	bdb0      	pop	{r4, r5, r7, pc}

1005689a <hci_rx_acl_data_event_copy>:
1005689a:	b5b0      	push	{r4, r5, r7, lr}
1005689c:	4614      	mov	r4, r2
1005689e:	9a04      	ldr	r2, [sp, #16]
100568a0:	70c2      	strb	r2, [r0, #3]
100568a2:	7041      	strb	r1, [r0, #1]
100568a4:	0a15      	lsrs	r5, r2, #8
100568a6:	7105      	strb	r5, [r0, #4]
100568a8:	250f      	movs	r5, #15
100568aa:	022d      	lsls	r5, r5, #8
100568ac:	400d      	ands	r5, r1
100568ae:	07a1      	lsls	r1, r4, #30
100568b0:	0c89      	lsrs	r1, r1, #18
100568b2:	1949      	adds	r1, r1, r5
100568b4:	039b      	lsls	r3, r3, #14
100568b6:	18c9      	adds	r1, r1, r3
100568b8:	0a09      	lsrs	r1, r1, #8
100568ba:	7081      	strb	r1, [r0, #2]
100568bc:	1d43      	adds	r3, r0, #5
100568be:	9805      	ldr	r0, [sp, #20]
100568c0:	2100      	movs	r1, #0
100568c2:	f7ff f8eb 	bl	10055a9c <ACL_pkt_read>
100568c6:	bdb0      	pop	{r4, r5, r7, pc}

100568c8 <aci_l2cap_proc_timeout_event_copy>:
100568c8:	7001      	strb	r1, [r0, #0]
100568ca:	2200      	movs	r2, #0
100568cc:	7082      	strb	r2, [r0, #2]
100568ce:	0a09      	lsrs	r1, r1, #8
100568d0:	7041      	strb	r1, [r0, #1]
100568d2:	4770      	bx	lr

100568d4 <hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg_weak>:
100568d4:	2000      	movs	r0, #0
100568d6:	4770      	bx	lr

100568d8 <hci_hardware_error_event_cb>:
100568d8:	b5e0      	push	{r5, r6, r7, lr}
100568da:	aa01      	add	r2, sp, #4
100568dc:	70d0      	strb	r0, [r2, #3]
100568de:	2001      	movs	r0, #1
100568e0:	7090      	strb	r0, [r2, #2]
100568e2:	2010      	movs	r0, #16
100568e4:	7050      	strb	r0, [r2, #1]
100568e6:	2104      	movs	r1, #4
100568e8:	7011      	strb	r1, [r2, #0]
100568ea:	4610      	mov	r0, r2
100568ec:	f7f8 fef0 	bl	1004f6d0 <BLE_STACK_Event>
100568f0:	bd8c      	pop	{r2, r3, r7, pc}

100568f2 <GAP_enable_disable_scan_ucfg_weak>:
100568f2:	2000      	movs	r0, #0
100568f4:	4770      	bx	lr

100568f6 <GAP_discover_peer_name_ucfg_weak>:
100568f6:	2000      	movs	r0, #0
100568f8:	4770      	bx	lr
	...

100568fc <GAP_name_disc_proc_connected_check>:
100568fc:	b51c      	push	{r2, r3, r4, lr}
100568fe:	4811      	ldr	r0, [pc, #68]	@ (10056944 <__arm_cp.18_0>)
10056900:	6804      	ldr	r4, [r0, #0]
10056902:	f7ff fff8 	bl	100568f6 <GAP_discover_peer_name_ucfg_weak>
10056906:	2888      	cmp	r0, #136	@ 0x88
10056908:	d007      	beq.n	1005691a <GAP_name_disc_proc_connected_check+0x1e>
1005690a:	280c      	cmp	r0, #12
1005690c:	d005      	beq.n	1005691a <GAP_name_disc_proc_connected_check+0x1e>
1005690e:	345d      	adds	r4, #93	@ 0x5d
10056910:	2800      	cmp	r0, #0
10056912:	d108      	bne.n	10056926 <GAP_name_disc_proc_connected_check+0x2a>
10056914:	2002      	movs	r0, #2
10056916:	7060      	strb	r0, [r4, #1]
10056918:	bd1c      	pop	{r2, r3, r4, pc}
1005691a:	2005      	movs	r0, #5
1005691c:	f00c fda0 	bl	10063460 <tsk_notify_idx>
10056920:	f7fb ff21 	bl	10052766 <BLE_STACK_ProcessRequest>
10056924:	bd1c      	pop	{r2, r3, r4, pc}
10056926:	2000      	movs	r0, #0
10056928:	7060      	strb	r0, [r4, #1]
1005692a:	7820      	ldrb	r0, [r4, #0]
1005692c:	217f      	movs	r1, #127	@ 0x7f
1005692e:	4001      	ands	r1, r0
10056930:	7021      	strb	r1, [r4, #0]
10056932:	a901      	add	r1, sp, #4
10056934:	2086      	movs	r0, #134	@ 0x86
10056936:	7048      	strb	r0, [r1, #1]
10056938:	2080      	movs	r0, #128	@ 0x80
1005693a:	7008      	strb	r0, [r1, #0]
1005693c:	2002      	movs	r0, #2
1005693e:	f000 f9bf 	bl	10056cc0 <aci_gap_proc_complete_event_wrapper>
10056942:	bd1c      	pop	{r2, r3, r4, pc}

10056944 <__arm_cp.18_0>:
10056944:	2000290c 	.word	0x2000290c

10056948 <GAP_central_connection_complete_handler_ucfg_weak>:
10056948:	4770      	bx	lr

1005694a <GAP_DiscProcTimeoutcb_ucfg_weak>:
1005694a:	4770      	bx	lr

1005694c <GAP_started_gatt_proc>:
1005694c:	4907      	ldr	r1, [pc, #28]	@ (1005696c <__arm_cp.28_0>)
1005694e:	6809      	ldr	r1, [r1, #0]
10056950:	225d      	movs	r2, #93	@ 0x5d
10056952:	5c8a      	ldrb	r2, [r1, r2]
10056954:	2388      	movs	r3, #136	@ 0x88
10056956:	421a      	tst	r2, r3
10056958:	d004      	beq.n	10056964 <GAP_started_gatt_proc+0x18>
1005695a:	3172      	adds	r1, #114	@ 0x72
1005695c:	8809      	ldrh	r1, [r1, #0]
1005695e:	4041      	eors	r1, r0
10056960:	0508      	lsls	r0, r1, #20
10056962:	d001      	beq.n	10056968 <GAP_started_gatt_proc+0x1c>
10056964:	2000      	movs	r0, #0
10056966:	4770      	bx	lr
10056968:	2001      	movs	r0, #1
1005696a:	4770      	bx	lr

1005696c <__arm_cp.28_0>:
1005696c:	2000290c 	.word	0x2000290c

10056970 <gap_timers_callback_wrapper>:
10056970:	b580      	push	{r7, lr}
10056972:	6940      	ldr	r0, [r0, #20]
10056974:	4901      	ldr	r1, [pc, #4]	@ (1005697c <__arm_cp.0_0>)
10056976:	f00c feaa 	bl	100636ce <cst_sharedCallback>
1005697a:	bd80      	pop	{r7, pc}

1005697c <__arm_cp.0_0>:
1005697c:	10056981 	.word	0x10056981

10056980 <gap_timers_callback>:
10056980:	b580      	push	{r7, lr}
10056982:	2802      	cmp	r0, #2
10056984:	d007      	beq.n	10056996 <gap_timers_callback+0x16>
10056986:	2801      	cmp	r0, #1
10056988:	d009      	beq.n	1005699e <gap_timers_callback+0x1e>
1005698a:	2800      	cmp	r0, #0
1005698c:	d106      	bne.n	1005699c <gap_timers_callback+0x1c>
1005698e:	2000      	movs	r0, #0
10056990:	f7f8 ff19 	bl	1004f7c6 <GAP_LimDiscTimeoutcb_ucfg>
10056994:	bd80      	pop	{r7, pc}
10056996:	2000      	movs	r0, #0
10056998:	f7ff ffd7 	bl	1005694a <GAP_DiscProcTimeoutcb_ucfg_weak>
1005699c:	bd80      	pop	{r7, pc}
1005699e:	2000      	movs	r0, #0
100569a0:	f000 f802 	bl	100569a8 <GAP_PrivateAddrTimercb>
100569a4:	bd80      	pop	{r7, pc}
	...

100569a8 <GAP_PrivateAddrTimercb>:
100569a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100569aa:	b087      	sub	sp, #28
100569ac:	4831      	ldr	r0, [pc, #196]	@ (10056a74 <__arm_cp.2_0>)
100569ae:	6804      	ldr	r4, [r0, #0]
100569b0:	a906      	add	r1, sp, #24
100569b2:	9104      	str	r1, [sp, #16]
100569b4:	2000      	movs	r0, #0
100569b6:	9001      	str	r0, [sp, #4]
100569b8:	7008      	strb	r0, [r1, #0]
100569ba:	ae05      	add	r6, sp, #20
100569bc:	2001      	movs	r0, #1
100569be:	7030      	strb	r0, [r6, #0]
100569c0:	f000 f950 	bl	10056c64 <GAP_reset_privacy_timer>
100569c4:	205d      	movs	r0, #93	@ 0x5d
100569c6:	9403      	str	r4, [sp, #12]
100569c8:	5c27      	ldrb	r7, [r4, r0]
100569ca:	1e78      	subs	r0, r7, #1
100569cc:	463d      	mov	r5, r7
100569ce:	4185      	sbcs	r5, r0
100569d0:	2020      	movs	r0, #32
100569d2:	4038      	ands	r0, r7
100569d4:	4244      	negs	r4, r0
100569d6:	9002      	str	r0, [sp, #8]
100569d8:	4144      	adcs	r4, r0
100569da:	9804      	ldr	r0, [sp, #16]
100569dc:	4631      	mov	r1, r6
100569de:	f000 fd51 	bl	10057484 <GAP_check_adv_status>
100569e2:	2f00      	cmp	r7, #0
100569e4:	d101      	bne.n	100569ea <GAP_PrivateAddrTimercb+0x42>
100569e6:	2801      	cmp	r0, #1
100569e8:	d13e      	bne.n	10056a68 <GAP_PrivateAddrTimercb+0xc0>
100569ea:	402c      	ands	r4, r5
100569ec:	d138      	bne.n	10056a60 <GAP_PrivateAddrTimercb+0xb8>
100569ee:	a805      	add	r0, sp, #20
100569f0:	7800      	ldrb	r0, [r0, #0]
100569f2:	2800      	cmp	r0, #0
100569f4:	d034      	beq.n	10056a60 <GAP_PrivateAddrTimercb+0xb8>
100569f6:	9c03      	ldr	r4, [sp, #12]
100569f8:	4620      	mov	r0, r4
100569fa:	305d      	adds	r0, #93	@ 0x5d
100569fc:	7bc0      	ldrb	r0, [r0, #15]
100569fe:	2800      	cmp	r0, #0
10056a00:	d034      	beq.n	10056a6c <GAP_PrivateAddrTimercb+0xc4>
10056a02:	3428      	adds	r4, #40	@ 0x28
10056a04:	9d02      	ldr	r5, [sp, #8]
10056a06:	2d00      	cmp	r5, #0
10056a08:	d003      	beq.n	10056a12 <GAP_PrivateAddrTimercb+0x6a>
10056a0a:	7821      	ldrb	r1, [r4, #0]
10056a0c:	2000      	movs	r0, #0
10056a0e:	f7ff ff70 	bl	100568f2 <GAP_enable_disable_scan_ucfg_weak>
10056a12:	a806      	add	r0, sp, #24
10056a14:	7800      	ldrb	r0, [r0, #0]
10056a16:	2801      	cmp	r0, #1
10056a18:	d102      	bne.n	10056a20 <GAP_PrivateAddrTimercb+0x78>
10056a1a:	2000      	movs	r0, #0
10056a1c:	f000 fcf6 	bl	1005740c <GAP_suspend_resume_active_advertising_sets_ucfg_weak>
10056a20:	f000 fafc 	bl	1005701c <GAP_generate_new_rpa>
10056a24:	2800      	cmp	r0, #0
10056a26:	d104      	bne.n	10056a32 <GAP_PrivateAddrTimercb+0x8a>
10056a28:	2000      	movs	r0, #0
10056a2a:	2101      	movs	r1, #1
10056a2c:	f000 face 	bl	10056fcc <GAP_start_privacy_timer>
10056a30:	9001      	str	r0, [sp, #4]
10056a32:	2d00      	cmp	r5, #0
10056a34:	d00a      	beq.n	10056a4c <GAP_PrivateAddrTimercb+0xa4>
10056a36:	7821      	ldrb	r1, [r4, #0]
10056a38:	2001      	movs	r0, #1
10056a3a:	f7ff ff5a 	bl	100568f2 <GAP_enable_disable_scan_ucfg_weak>
10056a3e:	2800      	cmp	r0, #0
10056a40:	d004      	beq.n	10056a4c <GAP_PrivateAddrTimercb+0xa4>
10056a42:	9801      	ldr	r0, [sp, #4]
10056a44:	2800      	cmp	r0, #0
10056a46:	d001      	beq.n	10056a4c <GAP_PrivateAddrTimercb+0xa4>
10056a48:	f000 fa2c 	bl	10056ea4 <GAP_stop_privacy_timer>
10056a4c:	a806      	add	r0, sp, #24
10056a4e:	7800      	ldrb	r0, [r0, #0]
10056a50:	2801      	cmp	r0, #1
10056a52:	d109      	bne.n	10056a68 <GAP_PrivateAddrTimercb+0xc0>
10056a54:	2006      	movs	r0, #6
10056a56:	f00c fd03 	bl	10063460 <tsk_notify_idx>
10056a5a:	f7fb fe84 	bl	10052766 <BLE_STACK_ProcessRequest>
10056a5e:	e003      	b.n	10056a68 <GAP_PrivateAddrTimercb+0xc0>
10056a60:	2001      	movs	r0, #1
10056a62:	4601      	mov	r1, r0
10056a64:	f000 fab2 	bl	10056fcc <GAP_start_privacy_timer>
10056a68:	b007      	add	sp, #28
10056a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10056a6c:	2000      	movs	r0, #0
10056a6e:	2101      	movs	r1, #1
10056a70:	e7f8      	b.n	10056a64 <GAP_PrivateAddrTimercb+0xbc>
10056a72:	46c0      	nop			@ (mov r8, r8)

10056a74 <__arm_cp.2_0>:
10056a74:	2000290c 	.word	0x2000290c

10056a78 <GAP_init_context>:
10056a78:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10056a7a:	461f      	mov	r7, r3
10056a7c:	9201      	str	r2, [sp, #4]
10056a7e:	9102      	str	r1, [sp, #8]
10056a80:	4605      	mov	r5, r0
10056a82:	2401      	movs	r4, #1
10056a84:	2178      	movs	r1, #120	@ 0x78
10056a86:	4620      	mov	r0, r4
10056a88:	f00a ff14 	bl	100618b4 <csmem_mem_0_assign>
10056a8c:	21e1      	movs	r1, #225	@ 0xe1
10056a8e:	0089      	lsls	r1, r1, #2
10056a90:	225a      	movs	r2, #90	@ 0x5a
10056a92:	5281      	strh	r1, [r0, r2]
10056a94:	4e24      	ldr	r6, [pc, #144]	@ (10056b28 <__arm_cp.3_0>)
10056a96:	6030      	str	r0, [r6, #0]
10056a98:	2d01      	cmp	r5, #1
10056a9a:	d117      	bne.n	10056acc <GAP_init_context+0x54>
10056a9c:	2001      	movs	r0, #1
10056a9e:	2106      	movs	r1, #6
10056aa0:	f00a ff08 	bl	100618b4 <csmem_mem_0_assign>
10056aa4:	4601      	mov	r1, r0
10056aa6:	6830      	ldr	r0, [r6, #0]
10056aa8:	6381      	str	r1, [r0, #56]	@ 0x38
10056aaa:	2f01      	cmp	r7, #1
10056aac:	d10e      	bne.n	10056acc <GAP_init_context+0x54>
10056aae:	2501      	movs	r5, #1
10056ab0:	270e      	movs	r7, #14
10056ab2:	4628      	mov	r0, r5
10056ab4:	4639      	mov	r1, r7
10056ab6:	f00a fefd 	bl	100618b4 <csmem_mem_0_assign>
10056aba:	6831      	ldr	r1, [r6, #0]
10056abc:	64c8      	str	r0, [r1, #76]	@ 0x4c
10056abe:	4628      	mov	r0, r5
10056ac0:	4639      	mov	r1, r7
10056ac2:	f00a fef7 	bl	100618b4 <csmem_mem_0_assign>
10056ac6:	4601      	mov	r1, r0
10056ac8:	6830      	ldr	r0, [r6, #0]
10056aca:	6501      	str	r1, [r0, #80]	@ 0x50
10056acc:	9902      	ldr	r1, [sp, #8]
10056ace:	2901      	cmp	r1, #1
10056ad0:	d10b      	bne.n	10056aea <GAP_init_context+0x72>
10056ad2:	9801      	ldr	r0, [sp, #4]
10056ad4:	2801      	cmp	r0, #1
10056ad6:	d105      	bne.n	10056ae4 <GAP_init_context+0x6c>
10056ad8:	201c      	movs	r0, #28
10056ada:	2101      	movs	r1, #1
10056adc:	f00a feea 	bl	100618b4 <csmem_mem_0_assign>
10056ae0:	6831      	ldr	r1, [r6, #0]
10056ae2:	62c8      	str	r0, [r1, #44]	@ 0x2c
10056ae4:	4811      	ldr	r0, [pc, #68]	@ (10056b2c <__arm_cp.3_1>)
10056ae6:	7e84      	ldrb	r4, [r0, #26]
10056ae8:	e001      	b.n	10056aee <GAP_init_context+0x76>
10056aea:	2100      	movs	r1, #0
10056aec:	62c1      	str	r1, [r0, #44]	@ 0x2c
10056aee:	2114      	movs	r1, #20
10056af0:	4620      	mov	r0, r4
10056af2:	f00a fedf 	bl	100618b4 <csmem_mem_0_assign>
10056af6:	6831      	ldr	r1, [r6, #0]
10056af8:	6548      	str	r0, [r1, #84]	@ 0x54
10056afa:	4c0d      	ldr	r4, [pc, #52]	@ (10056b30 <__arm_cp.3_2>)
10056afc:	2104      	movs	r1, #4
10056afe:	2201      	movs	r2, #1
10056b00:	4620      	mov	r0, r4
10056b02:	f00a fec5 	bl	10061890 <csmem_mem_assign>
10056b06:	6831      	ldr	r1, [r6, #0]
10056b08:	6208      	str	r0, [r1, #32]
10056b0a:	2503      	movs	r5, #3
10056b0c:	2202      	movs	r2, #2
10056b0e:	4620      	mov	r0, r4
10056b10:	4629      	mov	r1, r5
10056b12:	f00a febd 	bl	10061890 <csmem_mem_assign>
10056b16:	6831      	ldr	r1, [r6, #0]
10056b18:	6248      	str	r0, [r1, #36]	@ 0x24
10056b1a:	4a06      	ldr	r2, [pc, #24]	@ (10056b34 <__arm_cp.3_3>)
10056b1c:	2307      	movs	r3, #7
10056b1e:	4608      	mov	r0, r1
10056b20:	4629      	mov	r1, r5
10056b22:	f00c fcfb 	bl	1006351c <CST_init>
10056b26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10056b28 <__arm_cp.3_0>:
10056b28:	2000290c 	.word	0x2000290c

10056b2c <__arm_cp.3_1>:
10056b2c:	2000296c 	.word	0x2000296c

10056b30 <__arm_cp.3_2>:
10056b30:	20002968 	.word	0x20002968

10056b34 <__arm_cp.3_3>:
10056b34:	10056971 	.word	0x10056971

10056b38 <GAP_get_default_le_event_mask>:
10056b38:	b5b0      	push	{r4, r5, r7, lr}
10056b3a:	4604      	mov	r4, r0
10056b3c:	2100      	movs	r1, #0
10056b3e:	2508      	movs	r5, #8
10056b40:	462a      	mov	r2, r5
10056b42:	f7fc fc07 	bl	10053354 <BLEPLAT_MemSet>
10056b46:	7820      	ldrb	r0, [r4, #0]
10056b48:	21df      	movs	r1, #223	@ 0xdf
10056b4a:	4301      	orrs	r1, r0
10056b4c:	7021      	strb	r1, [r4, #0]
10056b4e:	7860      	ldrb	r0, [r4, #1]
10056b50:	2109      	movs	r1, #9
10056b52:	4301      	orrs	r1, r0
10056b54:	7061      	strb	r1, [r4, #1]
10056b56:	78a1      	ldrb	r1, [r4, #2]
10056b58:	4329      	orrs	r1, r5
10056b5a:	70a1      	strb	r1, [r4, #2]
10056b5c:	4911      	ldr	r1, [pc, #68]	@ (10056ba4 <__arm_cp.4_0>)
10056b5e:	6809      	ldr	r1, [r1, #0]
10056b60:	225c      	movs	r2, #92	@ 0x5c
10056b62:	5c89      	ldrb	r1, [r1, r2]
10056b64:	0689      	lsls	r1, r1, #26
10056b66:	d502      	bpl.n	10056b6e <GAP_get_default_le_event_mask+0x36>
10056b68:	210f      	movs	r1, #15
10056b6a:	4308      	orrs	r0, r1
10056b6c:	7060      	strb	r0, [r4, #1]
10056b6e:	f009 ff09 	bl	10060984 <ext_adv_scan_enabled_ucfg_weak>
10056b72:	2801      	cmp	r0, #1
10056b74:	d107      	bne.n	10056b86 <GAP_get_default_le_event_mask+0x4e>
10056b76:	7860      	ldrb	r0, [r4, #1]
10056b78:	2112      	movs	r1, #18
10056b7a:	4301      	orrs	r1, r0
10056b7c:	7061      	strb	r1, [r4, #1]
10056b7e:	78a0      	ldrb	r0, [r4, #2]
10056b80:	2107      	movs	r1, #7
10056b82:	4301      	orrs	r1, r0
10056b84:	70a1      	strb	r1, [r4, #2]
10056b86:	f005 fdbf 	bl	1005c708 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10056b8a:	b2c0      	uxtb	r0, r0
10056b8c:	2801      	cmp	r0, #1
10056b8e:	d107      	bne.n	10056ba0 <GAP_get_default_le_event_mask+0x68>
10056b90:	7860      	ldrb	r0, [r4, #1]
10056b92:	21e0      	movs	r1, #224	@ 0xe0
10056b94:	4301      	orrs	r1, r0
10056b96:	7061      	strb	r1, [r4, #1]
10056b98:	78a0      	ldrb	r0, [r4, #2]
10056b9a:	2180      	movs	r1, #128	@ 0x80
10056b9c:	4301      	orrs	r1, r0
10056b9e:	70a1      	strb	r1, [r4, #2]
10056ba0:	bdb0      	pop	{r4, r5, r7, pc}
10056ba2:	46c0      	nop			@ (mov r8, r8)

10056ba4 <__arm_cp.4_0>:
10056ba4:	2000290c 	.word	0x2000290c

10056ba8 <gap_extended_adv_scan_supported>:
10056ba8:	b580      	push	{r7, lr}
10056baa:	f009 feeb 	bl	10060984 <ext_adv_scan_enabled_ucfg_weak>
10056bae:	bd80      	pop	{r7, pc}

10056bb0 <GAP_Init>:
10056bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
10056bb2:	b085      	sub	sp, #20
10056bb4:	4605      	mov	r5, r0
10056bb6:	a804      	add	r0, sp, #16
10056bb8:	2700      	movs	r7, #0
10056bba:	7007      	strb	r7, [r0, #0]
10056bbc:	2412      	movs	r4, #18
10056bbe:	2901      	cmp	r1, #1
10056bc0:	d901      	bls.n	10056bc6 <GAP_Init+0x16>
10056bc2:	4620      	mov	r0, r4
10056bc4:	e048      	b.n	10056c58 <GAP_Init+0xa8>
10056bc6:	460e      	mov	r6, r1
10056bc8:	4824      	ldr	r0, [pc, #144]	@ (10056c5c <__arm_cp.7_0>)
10056bca:	6800      	ldr	r0, [r0, #0]
10056bcc:	9000      	str	r0, [sp, #0]
10056bce:	f00c ff85 	bl	10063adc <IDD_Initialize_Device_IDs>
10056bd2:	2800      	cmp	r0, #0
10056bd4:	d140      	bne.n	10056c58 <GAP_Init+0xa8>
10056bd6:	9900      	ldr	r1, [sp, #0]
10056bd8:	315c      	adds	r1, #92	@ 0x5c
10056bda:	7808      	ldrb	r0, [r1, #0]
10056bdc:	07c0      	lsls	r0, r0, #31
10056bde:	d111      	bne.n	10056c04 <GAP_Init+0x54>
10056be0:	78c8      	ldrb	r0, [r1, #3]
10056be2:	4330      	orrs	r0, r6
10056be4:	460e      	mov	r6, r1
10056be6:	70c8      	strb	r0, [r1, #3]
10056be8:	a803      	add	r0, sp, #12
10056bea:	2107      	movs	r1, #7
10056bec:	7001      	strb	r1, [r0, #0]
10056bee:	2d00      	cmp	r5, #0
10056bf0:	d012      	beq.n	10056c18 <GAP_Init+0x68>
10056bf2:	2d02      	cmp	r5, #2
10056bf4:	d008      	beq.n	10056c08 <GAP_Init+0x58>
10056bf6:	2d01      	cmp	r5, #1
10056bf8:	4620      	mov	r0, r4
10056bfa:	d12d      	bne.n	10056c58 <GAP_Init+0xa8>
10056bfc:	a804      	add	r0, sp, #16
10056bfe:	2110      	movs	r1, #16
10056c00:	7001      	strb	r1, [r0, #0]
10056c02:	e009      	b.n	10056c18 <GAP_Init+0x68>
10056c04:	200c      	movs	r0, #12
10056c06:	e027      	b.n	10056c58 <GAP_Init+0xa8>
10056c08:	a804      	add	r0, sp, #16
10056c0a:	2120      	movs	r1, #32
10056c0c:	7001      	strb	r1, [r0, #0]
10056c0e:	a903      	add	r1, sp, #12
10056c10:	f000 f9a2 	bl	10056f58 <GAP_enable_controller_privacy_ucfg_weak>
10056c14:	2800      	cmp	r0, #0
10056c16:	d11f      	bne.n	10056c58 <GAP_Init+0xa8>
10056c18:	f000 f9d6 	bl	10056fc8 <GAP_init_advertising_sets_ucfg_weak>
10056c1c:	2800      	cmp	r0, #0
10056c1e:	d11b      	bne.n	10056c58 <GAP_Init+0xa8>
10056c20:	9800      	ldr	r0, [sp, #0]
10056c22:	3060      	adds	r0, #96	@ 0x60
10056c24:	f000 f9cc 	bl	10056fc0 <GAP_set_controller_random_address_ucfg_weak>
10056c28:	2800      	cmp	r0, #0
10056c2a:	d115      	bne.n	10056c58 <GAP_Init+0xa8>
10056c2c:	9804      	ldr	r0, [sp, #16]
10056c2e:	2101      	movs	r1, #1
10056c30:	7431      	strb	r1, [r6, #16]
10056c32:	4308      	orrs	r0, r1
10056c34:	7030      	strb	r0, [r6, #0]
10056c36:	f000 f815 	bl	10056c64 <GAP_reset_privacy_timer>
10056c3a:	ac01      	add	r4, sp, #4
10056c3c:	4620      	mov	r0, r4
10056c3e:	f7ff ff7b 	bl	10056b38 <GAP_get_default_le_event_mask>
10056c42:	4620      	mov	r0, r4
10056c44:	f003 fa24 	bl	1005a090 <hci_le_set_event_mask>
10056c48:	43f8      	mvns	r0, r7
10056c4a:	9001      	str	r0, [sp, #4]
10056c4c:	4804      	ldr	r0, [pc, #16]	@ (10056c60 <__arm_cp.7_1>)
10056c4e:	9002      	str	r0, [sp, #8]
10056c50:	4620      	mov	r0, r4
10056c52:	f003 fa0d 	bl	1005a070 <hci_set_event_mask>
10056c56:	4638      	mov	r0, r7
10056c58:	b005      	add	sp, #20
10056c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10056c5c <__arm_cp.7_0>:
10056c5c:	2000290c 	.word	0x2000290c

10056c60 <__arm_cp.7_1>:
10056c60:	20009fff 	.word	0x20009fff

10056c64 <GAP_reset_privacy_timer>:
10056c64:	4806      	ldr	r0, [pc, #24]	@ (10056c80 <__arm_cp.8_0>)
10056c66:	6800      	ldr	r0, [r0, #0]
10056c68:	215c      	movs	r1, #92	@ 0x5c
10056c6a:	5c41      	ldrb	r1, [r0, r1]
10056c6c:	0689      	lsls	r1, r1, #26
10056c6e:	0f89      	lsrs	r1, r1, #30
10056c70:	d004      	beq.n	10056c7c <GAP_reset_privacy_timer+0x18>
10056c72:	305c      	adds	r0, #92	@ 0x5c
10056c74:	78c1      	ldrb	r1, [r0, #3]
10056c76:	2202      	movs	r2, #2
10056c78:	430a      	orrs	r2, r1
10056c7a:	70c2      	strb	r2, [r0, #3]
10056c7c:	4770      	bx	lr
10056c7e:	46c0      	nop			@ (mov r8, r8)

10056c80 <__arm_cp.8_0>:
10056c80:	2000290c 	.word	0x2000290c

10056c84 <GAP_internal_evt_handler>:
10056c84:	b5b0      	push	{r4, r5, r7, lr}
10056c86:	285c      	cmp	r0, #92	@ 0x5c
10056c88:	d106      	bne.n	10056c98 <GAP_internal_evt_handler+0x14>
10056c8a:	480c      	ldr	r0, [pc, #48]	@ (10056cbc <__arm_cp.12_0>)
10056c8c:	6804      	ldr	r4, [r0, #0]
10056c8e:	345d      	adds	r4, #93	@ 0x5d
10056c90:	2500      	movs	r5, #0
10056c92:	5760      	ldrsb	r0, [r4, r5]
10056c94:	2800      	cmp	r0, #0
10056c96:	d400      	bmi.n	10056c9a <GAP_internal_evt_handler+0x16>
10056c98:	bdb0      	pop	{r4, r5, r7, pc}
10056c9a:	7860      	ldrb	r0, [r4, #1]
10056c9c:	2802      	cmp	r0, #2
10056c9e:	d1fb      	bne.n	10056c98 <GAP_internal_evt_handler+0x14>
10056ca0:	7055      	strb	r5, [r2, #1]
10056ca2:	2080      	movs	r0, #128	@ 0x80
10056ca4:	7010      	strb	r0, [r2, #0]
10056ca6:	b2c8      	uxtb	r0, r1
10056ca8:	4611      	mov	r1, r2
10056caa:	f000 f809 	bl	10056cc0 <aci_gap_proc_complete_event_wrapper>
10056cae:	7065      	strb	r5, [r4, #1]
10056cb0:	7820      	ldrb	r0, [r4, #0]
10056cb2:	217f      	movs	r1, #127	@ 0x7f
10056cb4:	4001      	ands	r1, r0
10056cb6:	7021      	strb	r1, [r4, #0]
10056cb8:	bdb0      	pop	{r4, r5, r7, pc}
10056cba:	46c0      	nop			@ (mov r8, r8)

10056cbc <__arm_cp.12_0>:
10056cbc:	2000290c 	.word	0x2000290c

10056cc0 <aci_gap_proc_complete_event_wrapper>:
10056cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10056cc2:	2900      	cmp	r1, #0
10056cc4:	d016      	beq.n	10056cf4 <aci_gap_proc_complete_event_wrapper+0x34>
10056cc6:	460e      	mov	r6, r1
10056cc8:	4605      	mov	r5, r0
10056cca:	7809      	ldrb	r1, [r1, #0]
10056ccc:	2400      	movs	r4, #0
10056cce:	07c8      	lsls	r0, r1, #31
10056cd0:	4620      	mov	r0, r4
10056cd2:	d11f      	bne.n	10056d14 <aci_gap_proc_complete_event_wrapper+0x54>
10056cd4:	0788      	lsls	r0, r1, #30
10056cd6:	d40f      	bmi.n	10056cf8 <aci_gap_proc_complete_event_wrapper+0x38>
10056cd8:	0748      	lsls	r0, r1, #29
10056cda:	d40f      	bmi.n	10056cfc <aci_gap_proc_complete_event_wrapper+0x3c>
10056cdc:	0708      	lsls	r0, r1, #28
10056cde:	d40f      	bmi.n	10056d00 <aci_gap_proc_complete_event_wrapper+0x40>
10056ce0:	06c8      	lsls	r0, r1, #27
10056ce2:	d40f      	bmi.n	10056d04 <aci_gap_proc_complete_event_wrapper+0x44>
10056ce4:	0688      	lsls	r0, r1, #26
10056ce6:	d40f      	bmi.n	10056d08 <aci_gap_proc_complete_event_wrapper+0x48>
10056ce8:	0648      	lsls	r0, r1, #25
10056cea:	d40f      	bmi.n	10056d0c <aci_gap_proc_complete_event_wrapper+0x4c>
10056cec:	0608      	lsls	r0, r1, #24
10056cee:	d50f      	bpl.n	10056d10 <aci_gap_proc_complete_event_wrapper+0x50>
10056cf0:	2007      	movs	r0, #7
10056cf2:	e00f      	b.n	10056d14 <aci_gap_proc_complete_event_wrapper+0x54>
10056cf4:	2412      	movs	r4, #18
10056cf6:	e03c      	b.n	10056d72 <aci_gap_proc_complete_event_wrapper+0xb2>
10056cf8:	2001      	movs	r0, #1
10056cfa:	e00b      	b.n	10056d14 <aci_gap_proc_complete_event_wrapper+0x54>
10056cfc:	2002      	movs	r0, #2
10056cfe:	e009      	b.n	10056d14 <aci_gap_proc_complete_event_wrapper+0x54>
10056d00:	2003      	movs	r0, #3
10056d02:	e007      	b.n	10056d14 <aci_gap_proc_complete_event_wrapper+0x54>
10056d04:	2004      	movs	r0, #4
10056d06:	e005      	b.n	10056d14 <aci_gap_proc_complete_event_wrapper+0x54>
10056d08:	2005      	movs	r0, #5
10056d0a:	e003      	b.n	10056d14 <aci_gap_proc_complete_event_wrapper+0x54>
10056d0c:	2006      	movs	r0, #6
10056d0e:	e001      	b.n	10056d14 <aci_gap_proc_complete_event_wrapper+0x54>
10056d10:	2000      	movs	r0, #0
10056d12:	43c0      	mvns	r0, r0
10056d14:	7030      	strb	r0, [r6, #0]
10056d16:	4818      	ldr	r0, [pc, #96]	@ (10056d78 <__arm_cp.13_0>)
10056d18:	6800      	ldr	r0, [r0, #0]
10056d1a:	214e      	movs	r1, #78	@ 0x4e
10056d1c:	5640      	ldrsb	r0, [r0, r1]
10056d1e:	2800      	cmp	r0, #0
10056d20:	d527      	bpl.n	10056d72 <aci_gap_proc_complete_event_wrapper+0xb2>
10056d22:	4816      	ldr	r0, [pc, #88]	@ (10056d7c <__arm_cp.13_1>)
10056d24:	1828      	adds	r0, r5, r0
10056d26:	2103      	movs	r1, #3
10056d28:	4301      	orrs	r1, r0
10056d2a:	310d      	adds	r1, #13
10056d2c:	0888      	lsrs	r0, r1, #2
10056d2e:	b283      	uxth	r3, r0
10056d30:	4813      	ldr	r0, [pc, #76]	@ (10056d80 <__arm_cp.13_2>)
10056d32:	6800      	ldr	r0, [r0, #0]
10056d34:	6980      	ldr	r0, [r0, #24]
10056d36:	2102      	movs	r1, #2
10056d38:	2247      	movs	r2, #71	@ 0x47
10056d3a:	f7ff f847 	bl	10055dcc <aci_event_fifo_push_header>
10056d3e:	2800      	cmp	r0, #0
10056d40:	d016      	beq.n	10056d70 <aci_gap_proc_complete_event_wrapper+0xb0>
10056d42:	4607      	mov	r7, r0
10056d44:	1d00      	adds	r0, r0, #4
10056d46:	4629      	mov	r1, r5
10056d48:	4632      	mov	r2, r6
10056d4a:	f7ff fb7a 	bl	10056442 <aci_gap_proc_complete_event_copy>
10056d4e:	2004      	movs	r0, #4
10056d50:	7278      	strb	r0, [r7, #9]
10056d52:	2007      	movs	r0, #7
10056d54:	7238      	strb	r0, [r7, #8]
10056d56:	1ce8      	adds	r0, r5, #3
10056d58:	0a01      	lsrs	r1, r0, #8
10056d5a:	71f9      	strb	r1, [r7, #7]
10056d5c:	71b8      	strb	r0, [r7, #6]
10056d5e:	20ff      	movs	r0, #255	@ 0xff
10056d60:	7178      	strb	r0, [r7, #5]
10056d62:	2082      	movs	r0, #130	@ 0x82
10056d64:	7138      	strb	r0, [r7, #4]
10056d66:	2002      	movs	r0, #2
10056d68:	4639      	mov	r1, r7
10056d6a:	f7ff f8cc 	bl	10055f06 <aci_event_fifo_push>
10056d6e:	e000      	b.n	10056d72 <aci_gap_proc_complete_event_wrapper+0xb2>
10056d70:	2407      	movs	r4, #7
10056d72:	4620      	mov	r0, r4
10056d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10056d76:	46c0      	nop			@ (mov r8, r8)

10056d78 <__arm_cp.13_0>:
10056d78:	20002958 	.word	0x20002958

10056d7c <__arm_cp.13_1>:
10056d7c:	0003fffd 	.word	0x0003fffd

10056d80 <__arm_cp.13_2>:
10056d80:	20002908 	.word	0x20002908

10056d84 <GAP_LimDiscTimeoutcb>:
10056d84:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10056d86:	4811      	ldr	r0, [pc, #68]	@ (10056dcc <__arm_cp.15_0>)
10056d88:	6800      	ldr	r0, [r0, #0]
10056d8a:	6d44      	ldr	r4, [r0, #84]	@ 0x54
10056d8c:	f009 fdfa 	bl	10060984 <ext_adv_scan_enabled_ucfg_weak>
10056d90:	2800      	cmp	r0, #0
10056d92:	d002      	beq.n	10056d9a <GAP_LimDiscTimeoutcb+0x16>
10056d94:	480e      	ldr	r0, [pc, #56]	@ (10056dd0 <__arm_cp.15_1>)
10056d96:	7e80      	ldrb	r0, [r0, #26]
10056d98:	e000      	b.n	10056d9c <GAP_LimDiscTimeoutcb+0x18>
10056d9a:	2001      	movs	r0, #1
10056d9c:	b2c5      	uxtb	r5, r0
10056d9e:	3411      	adds	r4, #17
10056da0:	2d00      	cmp	r5, #0
10056da2:	d011      	beq.n	10056dc8 <GAP_LimDiscTimeoutcb+0x44>
10056da4:	7820      	ldrb	r0, [r4, #0]
10056da6:	2800      	cmp	r0, #0
10056da8:	d00b      	beq.n	10056dc2 <GAP_LimDiscTimeoutcb+0x3e>
10056daa:	4620      	mov	r0, r4
10056dac:	380f      	subs	r0, #15
10056dae:	7800      	ldrb	r0, [r0, #0]
10056db0:	0780      	lsls	r0, r0, #30
10056db2:	d506      	bpl.n	10056dc2 <GAP_LimDiscTimeoutcb+0x3e>
10056db4:	7860      	ldrb	r0, [r4, #1]
10056db6:	466a      	mov	r2, sp
10056db8:	7010      	strb	r0, [r2, #0]
10056dba:	2000      	movs	r0, #0
10056dbc:	2101      	movs	r1, #1
10056dbe:	f7fe fb2b 	bl	10055418 <GAP_set_advertising_enable_ucfg_weak>
10056dc2:	3414      	adds	r4, #20
10056dc4:	1e6d      	subs	r5, r5, #1
10056dc6:	e7eb      	b.n	10056da0 <GAP_LimDiscTimeoutcb+0x1c>
10056dc8:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10056dca:	46c0      	nop			@ (mov r8, r8)

10056dcc <__arm_cp.15_0>:
10056dcc:	2000290c 	.word	0x2000290c

10056dd0 <__arm_cp.15_1>:
10056dd0:	2000296c 	.word	0x2000296c

10056dd4 <GAP_stop_discoverability>:
10056dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10056dd6:	4604      	mov	r4, r0
10056dd8:	4668      	mov	r0, sp
10056dda:	2500      	movs	r5, #0
10056ddc:	7005      	strb	r5, [r0, #0]
10056dde:	f009 fdd1 	bl	10060984 <ext_adv_scan_enabled_ucfg_weak>
10056de2:	2800      	cmp	r0, #0
10056de4:	d005      	beq.n	10056df2 <GAP_stop_discoverability+0x1e>
10056de6:	466d      	mov	r5, sp
10056de8:	4620      	mov	r0, r4
10056dea:	4629      	mov	r1, r5
10056dec:	f000 f9fe 	bl	100571ec <GAP_get_advertising_set_index>
10056df0:	782d      	ldrb	r5, [r5, #0]
10056df2:	f009 fdc7 	bl	10060984 <ext_adv_scan_enabled_ucfg_weak>
10056df6:	2800      	cmp	r0, #0
10056df8:	d002      	beq.n	10056e00 <GAP_stop_discoverability+0x2c>
10056dfa:	4826      	ldr	r0, [pc, #152]	@ (10056e94 <__arm_cp.18_0>)
10056dfc:	7e83      	ldrb	r3, [r0, #26]
10056dfe:	e000      	b.n	10056e02 <GAP_stop_discoverability+0x2e>
10056e00:	2301      	movs	r3, #1
10056e02:	2614      	movs	r6, #20
10056e04:	4375      	muls	r5, r6
10056e06:	4f24      	ldr	r7, [pc, #144]	@ (10056e98 <__arm_cp.18_1>)
10056e08:	6838      	ldr	r0, [r7, #0]
10056e0a:	6d41      	ldr	r1, [r0, #84]	@ 0x54
10056e0c:	194c      	adds	r4, r1, r5
10056e0e:	78a5      	ldrb	r5, [r4, #2]
10056e10:	2202      	movs	r2, #2
10056e12:	402a      	ands	r2, r5
10056e14:	d002      	beq.n	10056e1c <GAP_stop_discoverability+0x48>
10056e16:	1ca4      	adds	r4, r4, #2
10056e18:	2500      	movs	r5, #0
10056e1a:	7025      	strb	r5, [r4, #0]
10056e1c:	3111      	adds	r1, #17
10056e1e:	b2db      	uxtb	r3, r3
10056e20:	2b00      	cmp	r3, #0
10056e22:	d00a      	beq.n	10056e3a <GAP_stop_discoverability+0x66>
10056e24:	780c      	ldrb	r4, [r1, #0]
10056e26:	2c00      	cmp	r4, #0
10056e28:	d004      	beq.n	10056e34 <GAP_stop_discoverability+0x60>
10056e2a:	460c      	mov	r4, r1
10056e2c:	3c0f      	subs	r4, #15
10056e2e:	7824      	ldrb	r4, [r4, #0]
10056e30:	07a4      	lsls	r4, r4, #30
10056e32:	d426      	bmi.n	10056e82 <GAP_stop_discoverability+0xae>
10056e34:	1e5b      	subs	r3, r3, #1
10056e36:	3114      	adds	r1, #20
10056e38:	e7f2      	b.n	10056e20 <GAP_stop_discoverability+0x4c>
10056e3a:	2a00      	cmp	r2, #0
10056e3c:	d021      	beq.n	10056e82 <GAP_stop_discoverability+0xae>
10056e3e:	2400      	movs	r4, #0
10056e40:	4621      	mov	r1, r4
10056e42:	f00c fb80 	bl	10063546 <CST_stop>
10056e46:	4815      	ldr	r0, [pc, #84]	@ (10056e9c <__arm_cp.18_2>)
10056e48:	6800      	ldr	r0, [r0, #0]
10056e4a:	214e      	movs	r1, #78	@ 0x4e
10056e4c:	5c40      	ldrb	r0, [r0, r1]
10056e4e:	07c0      	lsls	r0, r0, #31
10056e50:	d017      	beq.n	10056e82 <GAP_stop_discoverability+0xae>
10056e52:	4813      	ldr	r0, [pc, #76]	@ (10056ea0 <__arm_cp.18_3>)
10056e54:	6800      	ldr	r0, [r0, #0]
10056e56:	6980      	ldr	r0, [r0, #24]
10056e58:	2244      	movs	r2, #68	@ 0x44
10056e5a:	2502      	movs	r5, #2
10056e5c:	4629      	mov	r1, r5
10056e5e:	462b      	mov	r3, r5
10056e60:	f7fe ffb4 	bl	10055dcc <aci_event_fifo_push_header>
10056e64:	2800      	cmp	r0, #0
10056e66:	d00c      	beq.n	10056e82 <GAP_stop_discoverability+0xae>
10056e68:	4601      	mov	r1, r0
10056e6a:	7185      	strb	r5, [r0, #6]
10056e6c:	71c4      	strb	r4, [r0, #7]
10056e6e:	7204      	strb	r4, [r0, #8]
10056e70:	20ff      	movs	r0, #255	@ 0xff
10056e72:	7148      	strb	r0, [r1, #5]
10056e74:	2082      	movs	r0, #130	@ 0x82
10056e76:	7108      	strb	r0, [r1, #4]
10056e78:	2004      	movs	r0, #4
10056e7a:	7248      	strb	r0, [r1, #9]
10056e7c:	4628      	mov	r0, r5
10056e7e:	f7ff f842 	bl	10055f06 <aci_event_fifo_push>
10056e82:	4668      	mov	r0, sp
10056e84:	7800      	ldrb	r0, [r0, #0]
10056e86:	4346      	muls	r6, r0
10056e88:	6838      	ldr	r0, [r7, #0]
10056e8a:	6d40      	ldr	r0, [r0, #84]	@ 0x54
10056e8c:	1980      	adds	r0, r0, r6
10056e8e:	2100      	movs	r1, #0
10056e90:	7441      	strb	r1, [r0, #17]
10056e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10056e94 <__arm_cp.18_0>:
10056e94:	2000296c 	.word	0x2000296c

10056e98 <__arm_cp.18_1>:
10056e98:	2000290c 	.word	0x2000290c

10056e9c <__arm_cp.18_2>:
10056e9c:	20002958 	.word	0x20002958

10056ea0 <__arm_cp.18_3>:
10056ea0:	20002908 	.word	0x20002908

10056ea4 <GAP_stop_privacy_timer>:
10056ea4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10056ea6:	4c0d      	ldr	r4, [pc, #52]	@ (10056edc <__arm_cp.19_0>)
10056ea8:	6825      	ldr	r5, [r4, #0]
10056eaa:	205c      	movs	r0, #92	@ 0x5c
10056eac:	5c28      	ldrb	r0, [r5, r0]
10056eae:	0680      	lsls	r0, r0, #26
10056eb0:	0f80      	lsrs	r0, r0, #30
10056eb2:	d012      	beq.n	10056eda <GAP_stop_privacy_timer+0x36>
10056eb4:	355c      	adds	r5, #92	@ 0x5c
10056eb6:	78e8      	ldrb	r0, [r5, #3]
10056eb8:	2602      	movs	r6, #2
10056eba:	4030      	ands	r0, r6
10056ebc:	d10d      	bne.n	10056eda <GAP_stop_privacy_timer+0x36>
10056ebe:	a801      	add	r0, sp, #4
10056ec0:	4669      	mov	r1, sp
10056ec2:	f000 fadf 	bl	10057484 <GAP_check_adv_status>
10056ec6:	7869      	ldrb	r1, [r5, #1]
10056ec8:	4301      	orrs	r1, r0
10056eca:	d106      	bne.n	10056eda <GAP_stop_privacy_timer+0x36>
10056ecc:	78e8      	ldrb	r0, [r5, #3]
10056ece:	4330      	orrs	r0, r6
10056ed0:	70e8      	strb	r0, [r5, #3]
10056ed2:	6820      	ldr	r0, [r4, #0]
10056ed4:	2101      	movs	r1, #1
10056ed6:	f00c fb36 	bl	10063546 <CST_stop>
10056eda:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10056edc <__arm_cp.19_0>:
10056edc:	2000290c 	.word	0x2000290c

10056ee0 <GAP_peripheral_connection_complete_handler_ucfg_weak>:
10056ee0:	b580      	push	{r7, lr}
10056ee2:	2000      	movs	r0, #0
10056ee4:	f7ff ff76 	bl	10056dd4 <GAP_stop_discoverability>
10056ee8:	f7ff ffdc 	bl	10056ea4 <GAP_stop_privacy_timer>
10056eec:	bd80      	pop	{r7, pc}

10056eee <GAP_hci_disconnection_complete_evt_hndl>:
10056eee:	4770      	bx	lr

10056ef0 <GAP_hci_le_connection_complete_evt_hndl>:
10056ef0:	b580      	push	{r7, lr}
10056ef2:	2a00      	cmp	r2, #0
10056ef4:	d003      	beq.n	10056efe <GAP_hci_le_connection_complete_evt_hndl+0xe>
10056ef6:	4608      	mov	r0, r1
10056ef8:	f7ff fff2 	bl	10056ee0 <GAP_peripheral_connection_complete_handler_ucfg_weak>
10056efc:	bd80      	pop	{r7, pc}
10056efe:	f7ff fd23 	bl	10056948 <GAP_central_connection_complete_handler_ucfg_weak>
10056f02:	bd80      	pop	{r7, pc}

10056f04 <GapIsPrivacySupported>:
10056f04:	4804      	ldr	r0, [pc, #16]	@ (10056f18 <__arm_cp.26_0>)
10056f06:	6800      	ldr	r0, [r0, #0]
10056f08:	215c      	movs	r1, #92	@ 0x5c
10056f0a:	5c41      	ldrb	r1, [r0, r1]
10056f0c:	2030      	movs	r0, #48	@ 0x30
10056f0e:	4008      	ands	r0, r1
10056f10:	1e41      	subs	r1, r0, #1
10056f12:	4188      	sbcs	r0, r1
10056f14:	4770      	bx	lr
10056f16:	46c0      	nop			@ (mov r8, r8)

10056f18 <__arm_cp.26_0>:
10056f18:	2000290c 	.word	0x2000290c

10056f1c <GAP_get_identity_address_type>:
10056f1c:	4803      	ldr	r0, [pc, #12]	@ (10056f2c <__arm_cp.28_0>)
10056f1e:	6800      	ldr	r0, [r0, #0]
10056f20:	215f      	movs	r1, #95	@ 0x5f
10056f22:	5c41      	ldrb	r1, [r0, r1]
10056f24:	2001      	movs	r0, #1
10056f26:	4008      	ands	r0, r1
10056f28:	4770      	bx	lr
10056f2a:	46c0      	nop			@ (mov r8, r8)

10056f2c <__arm_cp.28_0>:
10056f2c:	2000290c 	.word	0x2000290c

10056f30 <GAP_get_own_address_type>:
10056f30:	4808      	ldr	r0, [pc, #32]	@ (10056f54 <__arm_cp.29_0>)
10056f32:	6800      	ldr	r0, [r0, #0]
10056f34:	215c      	movs	r1, #92	@ 0x5c
10056f36:	5c41      	ldrb	r1, [r0, r1]
10056f38:	06ca      	lsls	r2, r1, #27
10056f3a:	d406      	bmi.n	10056f4a <GAP_get_own_address_type+0x1a>
10056f3c:	0689      	lsls	r1, r1, #26
10056f3e:	d406      	bmi.n	10056f4e <GAP_get_own_address_type+0x1e>
10056f40:	305c      	adds	r0, #92	@ 0x5c
10056f42:	78c1      	ldrb	r1, [r0, #3]
10056f44:	2001      	movs	r0, #1
10056f46:	4008      	ands	r0, r1
10056f48:	4770      	bx	lr
10056f4a:	2001      	movs	r0, #1
10056f4c:	4770      	bx	lr
10056f4e:	2003      	movs	r0, #3
10056f50:	4770      	bx	lr
10056f52:	46c0      	nop			@ (mov r8, r8)

10056f54 <__arm_cp.29_0>:
10056f54:	2000290c 	.word	0x2000290c

10056f58 <GAP_enable_controller_privacy_ucfg_weak>:
10056f58:	2012      	movs	r0, #18
10056f5a:	4770      	bx	lr

10056f5c <GAP_Terminate_Link>:
10056f5c:	b580      	push	{r7, lr}
10056f5e:	f004 fd17 	bl	1005b990 <llc_conn_disconnect_link>
10056f62:	bd80      	pop	{r7, pc}

10056f64 <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak>:
10056f64:	b580      	push	{r7, lr}
10056f66:	07c0      	lsls	r0, r0, #31
10056f68:	d101      	bne.n	10056f6e <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak+0xa>
10056f6a:	2000      	movs	r0, #0
10056f6c:	bd80      	pop	{r7, pc}
10056f6e:	4608      	mov	r0, r1
10056f70:	4611      	mov	r1, r2
10056f72:	f003 f966 	bl	1005a242 <hci_le_add_device_to_filter_accept_list>
10056f76:	bd80      	pop	{r7, pc}

10056f78 <GAP_clear_filter_accept_and_resolving_list_ucfg_weak>:
10056f78:	b580      	push	{r7, lr}
10056f7a:	07c0      	lsls	r0, r0, #31
10056f7c:	d101      	bne.n	10056f82 <GAP_clear_filter_accept_and_resolving_list_ucfg_weak+0xa>
10056f7e:	2000      	movs	r0, #0
10056f80:	bd80      	pop	{r7, pc}
10056f82:	f003 f95a 	bl	1005a23a <hci_le_clear_filter_accept_list>
10056f86:	bd80      	pop	{r7, pc}

10056f88 <GAP_configure_filter_accept_and_resolving_list>:
10056f88:	b570      	push	{r4, r5, r6, lr}
10056f8a:	b094      	sub	sp, #80	@ 0x50
10056f8c:	4604      	mov	r4, r0
10056f8e:	f7ff fff3 	bl	10056f78 <GAP_clear_filter_accept_and_resolving_list_ucfg_weak>
10056f92:	4606      	mov	r6, r0
10056f94:	466d      	mov	r5, sp
10056f96:	353e      	adds	r5, #62	@ 0x3e
10056f98:	4668      	mov	r0, sp
10056f9a:	f00b f8d3 	bl	10062144 <sdb_sap_read_security_record_sequential>
10056f9e:	2800      	cmp	r0, #0
10056fa0:	d10b      	bne.n	10056fba <GAP_configure_filter_accept_and_resolving_list+0x32>
10056fa2:	2e00      	cmp	r6, #0
10056fa4:	d109      	bne.n	10056fba <GAP_configure_filter_accept_and_resolving_list+0x32>
10056fa6:	4668      	mov	r0, sp
10056fa8:	7840      	ldrb	r0, [r0, #1]
10056faa:	2101      	movs	r1, #1
10056fac:	4001      	ands	r1, r0
10056fae:	4620      	mov	r0, r4
10056fb0:	462a      	mov	r2, r5
10056fb2:	f7ff ffd7 	bl	10056f64 <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak>
10056fb6:	4606      	mov	r6, r0
10056fb8:	e7ee      	b.n	10056f98 <GAP_configure_filter_accept_and_resolving_list+0x10>
10056fba:	b2f0      	uxtb	r0, r6
10056fbc:	b014      	add	sp, #80	@ 0x50
10056fbe:	bd70      	pop	{r4, r5, r6, pc}

10056fc0 <GAP_set_controller_random_address_ucfg_weak>:
10056fc0:	b580      	push	{r7, lr}
10056fc2:	f003 f851 	bl	1005a068 <hci_le_set_random_address>
10056fc6:	bd80      	pop	{r7, pc}

10056fc8 <GAP_init_advertising_sets_ucfg_weak>:
10056fc8:	2000      	movs	r0, #0
10056fca:	4770      	bx	lr

10056fcc <GAP_start_privacy_timer>:
10056fcc:	b5b0      	push	{r4, r5, r7, lr}
10056fce:	4602      	mov	r2, r0
10056fd0:	4810      	ldr	r0, [pc, #64]	@ (10057014 <__arm_cp.47_0>)
10056fd2:	6800      	ldr	r0, [r0, #0]
10056fd4:	4605      	mov	r5, r0
10056fd6:	355a      	adds	r5, #90	@ 0x5a
10056fd8:	2900      	cmp	r1, #0
10056fda:	d108      	bne.n	10056fee <GAP_start_privacy_timer+0x22>
10056fdc:	78a9      	ldrb	r1, [r5, #2]
10056fde:	0689      	lsls	r1, r1, #26
10056fe0:	2400      	movs	r4, #0
10056fe2:	0f89      	lsrs	r1, r1, #30
10056fe4:	d014      	beq.n	10057010 <GAP_start_privacy_timer+0x44>
10056fe6:	7969      	ldrb	r1, [r5, #5]
10056fe8:	2302      	movs	r3, #2
10056fea:	400b      	ands	r3, r1
10056fec:	d010      	beq.n	10057010 <GAP_start_privacy_timer+0x44>
10056fee:	2a00      	cmp	r2, #0
10056ff0:	d001      	beq.n	10056ff6 <GAP_start_privacy_timer+0x2a>
10056ff2:	4b09      	ldr	r3, [pc, #36]	@ (10057018 <__arm_cp.47_1>)
10056ff4:	e003      	b.n	10056ffe <GAP_start_privacy_timer+0x32>
10056ff6:	217d      	movs	r1, #125	@ 0x7d
10056ff8:	00c9      	lsls	r1, r1, #3
10056ffa:	882b      	ldrh	r3, [r5, #0]
10056ffc:	434b      	muls	r3, r1
10056ffe:	2401      	movs	r4, #1
10057000:	4621      	mov	r1, r4
10057002:	4622      	mov	r2, r4
10057004:	f00c fad5 	bl	100635b2 <CST_start>
10057008:	7968      	ldrb	r0, [r5, #5]
1005700a:	21fd      	movs	r1, #253	@ 0xfd
1005700c:	4001      	ands	r1, r0
1005700e:	7169      	strb	r1, [r5, #5]
10057010:	4620      	mov	r0, r4
10057012:	bdb0      	pop	{r4, r5, r7, pc}

10057014 <__arm_cp.47_0>:
10057014:	2000290c 	.word	0x2000290c

10057018 <__arm_cp.47_1>:
10057018:	00007530 	.word	0x00007530

1005701c <GAP_generate_new_rpa>:
1005701c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005701e:	4d0d      	ldr	r5, [pc, #52]	@ (10057054 <__arm_cp.48_0>)
10057020:	6828      	ldr	r0, [r5, #0]
10057022:	215f      	movs	r1, #95	@ 0x5f
10057024:	5c40      	ldrb	r0, [r0, r1]
10057026:	0780      	lsls	r0, r0, #30
10057028:	d401      	bmi.n	1005702e <GAP_generate_new_rpa+0x12>
1005702a:	240c      	movs	r4, #12
1005702c:	e00f      	b.n	1005704e <GAP_generate_new_rpa+0x32>
1005702e:	466c      	mov	r4, sp
10057030:	4620      	mov	r0, r4
10057032:	f00b f997 	bl	10062364 <smp_sap_crt_generate_rpa>
10057036:	4620      	mov	r0, r4
10057038:	f7ff ffc2 	bl	10056fc0 <GAP_set_controller_random_address_ucfg_weak>
1005703c:	4604      	mov	r4, r0
1005703e:	2800      	cmp	r0, #0
10057040:	d105      	bne.n	1005704e <GAP_generate_new_rpa+0x32>
10057042:	6828      	ldr	r0, [r5, #0]
10057044:	3066      	adds	r0, #102	@ 0x66
10057046:	4669      	mov	r1, sp
10057048:	2206      	movs	r2, #6
1005704a:	f7fc f973 	bl	10053334 <BLEPLAT_MemCpy>
1005704e:	4620      	mov	r0, r4
10057050:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10057052:	46c0      	nop			@ (mov r8, r8)

10057054 <__arm_cp.48_0>:
10057054:	2000290c 	.word	0x2000290c

10057058 <GAP_get_current_address>:
10057058:	b5b0      	push	{r4, r5, r7, lr}
1005705a:	460d      	mov	r5, r1
1005705c:	4604      	mov	r4, r0
1005705e:	480f      	ldr	r0, [pc, #60]	@ (1005709c <__arm_cp.49_0>)
10057060:	6800      	ldr	r0, [r0, #0]
10057062:	215c      	movs	r1, #92	@ 0x5c
10057064:	5c40      	ldrb	r0, [r0, r1]
10057066:	0680      	lsls	r0, r0, #26
10057068:	0f80      	lsrs	r0, r0, #30
1005706a:	d005      	beq.n	10057078 <GAP_get_current_address+0x20>
1005706c:	2001      	movs	r0, #1
1005706e:	7028      	strb	r0, [r5, #0]
10057070:	4620      	mov	r0, r4
10057072:	f000 f815 	bl	100570a0 <GAP_get_rpa>
10057076:	e00e      	b.n	10057096 <GAP_get_current_address+0x3e>
10057078:	f7ff ff5a 	bl	10056f30 <GAP_get_own_address_type>
1005707c:	2800      	cmp	r0, #0
1005707e:	d005      	beq.n	1005708c <GAP_get_current_address+0x34>
10057080:	2001      	movs	r0, #1
10057082:	7028      	strb	r0, [r5, #0]
10057084:	4620      	mov	r0, r4
10057086:	f000 f81f 	bl	100570c8 <GAP_get_static_random_address>
1005708a:	e004      	b.n	10057096 <GAP_get_current_address+0x3e>
1005708c:	2000      	movs	r0, #0
1005708e:	7028      	strb	r0, [r5, #0]
10057090:	4620      	mov	r0, r4
10057092:	f000 f80f 	bl	100570b4 <GAP_get_public_address>
10057096:	2000      	movs	r0, #0
10057098:	bdb0      	pop	{r4, r5, r7, pc}
1005709a:	46c0      	nop			@ (mov r8, r8)

1005709c <__arm_cp.49_0>:
1005709c:	2000290c 	.word	0x2000290c

100570a0 <GAP_get_rpa>:
100570a0:	b580      	push	{r7, lr}
100570a2:	4903      	ldr	r1, [pc, #12]	@ (100570b0 <__arm_cp.50_0>)
100570a4:	6809      	ldr	r1, [r1, #0]
100570a6:	3166      	adds	r1, #102	@ 0x66
100570a8:	2206      	movs	r2, #6
100570aa:	f7fc f943 	bl	10053334 <BLEPLAT_MemCpy>
100570ae:	bd80      	pop	{r7, pc}

100570b0 <__arm_cp.50_0>:
100570b0:	2000290c 	.word	0x2000290c

100570b4 <GAP_get_public_address>:
100570b4:	b580      	push	{r7, lr}
100570b6:	4903      	ldr	r1, [pc, #12]	@ (100570c4 <__arm_cp.51_0>)
100570b8:	6809      	ldr	r1, [r1, #0]
100570ba:	2206      	movs	r2, #6
100570bc:	f7fc f93a 	bl	10053334 <BLEPLAT_MemCpy>
100570c0:	bd80      	pop	{r7, pc}
100570c2:	46c0      	nop			@ (mov r8, r8)

100570c4 <__arm_cp.51_0>:
100570c4:	20002904 	.word	0x20002904

100570c8 <GAP_get_static_random_address>:
100570c8:	b580      	push	{r7, lr}
100570ca:	4903      	ldr	r1, [pc, #12]	@ (100570d8 <__arm_cp.52_0>)
100570cc:	6809      	ldr	r1, [r1, #0]
100570ce:	3160      	adds	r1, #96	@ 0x60
100570d0:	2206      	movs	r2, #6
100570d2:	f7fc f92f 	bl	10053334 <BLEPLAT_MemCpy>
100570d6:	bd80      	pop	{r7, pc}

100570d8 <__arm_cp.52_0>:
100570d8:	2000290c 	.word	0x2000290c

100570dc <GAP_enable_rpa_change_at_timeout>:
100570dc:	4902      	ldr	r1, [pc, #8]	@ (100570e8 <__arm_cp.53_0>)
100570de:	6809      	ldr	r1, [r1, #0]
100570e0:	226c      	movs	r2, #108	@ 0x6c
100570e2:	5488      	strb	r0, [r1, r2]
100570e4:	4770      	bx	lr
100570e6:	46c0      	nop			@ (mov r8, r8)

100570e8 <__arm_cp.53_0>:
100570e8:	2000290c 	.word	0x2000290c

100570ec <GAP_check_discoverability_mode>:
100570ec:	1e43      	subs	r3, r0, #1
100570ee:	2b02      	cmp	r3, #2
100570f0:	d309      	bcc.n	10057106 <GAP_check_discoverability_mode+0x1a>
100570f2:	2800      	cmp	r0, #0
100570f4:	d00c      	beq.n	10057110 <GAP_check_discoverability_mode+0x24>
100570f6:	2803      	cmp	r0, #3
100570f8:	d109      	bne.n	1005710e <GAP_check_discoverability_mode+0x22>
100570fa:	2001      	movs	r0, #1
100570fc:	4001      	ands	r1, r0
100570fe:	4249      	negs	r1, r1
10057100:	2012      	movs	r0, #18
10057102:	4008      	ands	r0, r1
10057104:	4770      	bx	lr
10057106:	2a00      	cmp	r2, #0
10057108:	d101      	bne.n	1005710e <GAP_check_discoverability_mode+0x22>
1005710a:	4610      	mov	r0, r2
1005710c:	4770      	bx	lr
1005710e:	2012      	movs	r0, #18
10057110:	4770      	bx	lr
	...

10057114 <GAP_advEvtProp_to_advType>:
10057114:	4601      	mov	r1, r0
10057116:	3910      	subs	r1, #16
10057118:	2905      	cmp	r1, #5
1005711a:	d80a      	bhi.n	10057132 <GAP_advEvtProp_to_advType+0x1e>
1005711c:	2000      	movs	r0, #0
1005711e:	46c0      	nop			@ (mov r8, r8)
10057120:	4479      	add	r1, pc
10057122:	7909      	ldrb	r1, [r1, #4]
10057124:	0049      	lsls	r1, r1, #1
10057126:	448f      	add	pc, r1
10057128:	090a0802 	.word	0x090a0802
1005712c:	0c08      	.short	0x0c08
1005712e:	2003      	movs	r0, #3
10057130:	4770      	bx	lr
10057132:	281d      	cmp	r0, #29
10057134:	d101      	bne.n	1005713a <GAP_advEvtProp_to_advType+0x26>
10057136:	2001      	movs	r0, #1
10057138:	4770      	bx	lr
1005713a:	2005      	movs	r0, #5
1005713c:	4770      	bx	lr
1005713e:	2002      	movs	r0, #2
10057140:	4770      	bx	lr
10057142:	2004      	movs	r0, #4
10057144:	4770      	bx	lr
	...

10057148 <GAP_set_legacy_advertising_configuration>:
10057148:	b5f0      	push	{r4, r5, r6, r7, lr}
1005714a:	b08b      	sub	sp, #44	@ 0x2c
1005714c:	4615      	mov	r5, r2
1005714e:	460f      	mov	r7, r1
10057150:	4601      	mov	r1, r0
10057152:	06fa      	lsls	r2, r7, #27
10057154:	2012      	movs	r0, #18
10057156:	2a00      	cmp	r2, #0
10057158:	d53f      	bpl.n	100571da <GAP_set_legacy_advertising_configuration+0x92>
1005715a:	461c      	mov	r4, r3
1005715c:	2301      	movs	r3, #1
1005715e:	039a      	lsls	r2, r3, #14
10057160:	4295      	cmp	r5, r2
10057162:	d83a      	bhi.n	100571da <GAP_set_legacy_advertising_configuration+0x92>
10057164:	4294      	cmp	r4, r2
10057166:	d838      	bhi.n	100571da <GAP_set_legacy_advertising_configuration+0x92>
10057168:	930a      	str	r3, [sp, #40]	@ 0x28
1005716a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1005716c:	9009      	str	r0, [sp, #36]	@ 0x24
1005716e:	9812      	ldr	r0, [sp, #72]	@ 0x48
10057170:	9008      	str	r0, [sp, #32]
10057172:	9811      	ldr	r0, [sp, #68]	@ 0x44
10057174:	9006      	str	r0, [sp, #24]
10057176:	9810      	ldr	r0, [sp, #64]	@ 0x40
10057178:	9007      	str	r0, [sp, #28]
1005717a:	4819      	ldr	r0, [pc, #100]	@ (100571e0 <__arm_cp.2_0>)
1005717c:	6800      	ldr	r0, [r0, #0]
1005717e:	6d46      	ldr	r6, [r0, #84]	@ 0x54
10057180:	2000      	movs	r0, #0
10057182:	9004      	str	r0, [sp, #16]
10057184:	7070      	strb	r0, [r6, #1]
10057186:	7031      	strb	r1, [r6, #0]
10057188:	f7ff fed2 	bl	10056f30 <GAP_get_own_address_type>
1005718c:	9005      	str	r0, [sp, #20]
1005718e:	4638      	mov	r0, r7
10057190:	f7ff ffc0 	bl	10057114 <GAP_advEvtProp_to_advType>
10057194:	4602      	mov	r2, r0
10057196:	7870      	ldrb	r0, [r6, #1]
10057198:	2120      	movs	r1, #32
1005719a:	4301      	orrs	r1, r0
1005719c:	7071      	strb	r1, [r6, #1]
1005719e:	2a04      	cmp	r2, #4
100571a0:	d808      	bhi.n	100571b4 <GAP_set_legacy_advertising_configuration+0x6c>
100571a2:	2117      	movs	r1, #23
100571a4:	40d1      	lsrs	r1, r2
100571a6:	07c9      	lsls	r1, r1, #31
100571a8:	d004      	beq.n	100571b4 <GAP_set_legacy_advertising_configuration+0x6c>
100571aa:	b251      	sxtb	r1, r2
100571ac:	a30d      	add	r3, pc, #52	@ (adr r3, 100571e4 <__arm_cp.2_0+0x4>)
100571ae:	5c59      	ldrb	r1, [r3, r1]
100571b0:	4308      	orrs	r0, r1
100571b2:	7070      	strb	r0, [r6, #1]
100571b4:	9806      	ldr	r0, [sp, #24]
100571b6:	9000      	str	r0, [sp, #0]
100571b8:	9808      	ldr	r0, [sp, #32]
100571ba:	9001      	str	r0, [sp, #4]
100571bc:	9807      	ldr	r0, [sp, #28]
100571be:	9002      	str	r0, [sp, #8]
100571c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
100571c2:	9003      	str	r0, [sp, #12]
100571c4:	b2a8      	uxth	r0, r5
100571c6:	b2a1      	uxth	r1, r4
100571c8:	9b05      	ldr	r3, [sp, #20]
100571ca:	f002 fe8d 	bl	10059ee8 <hci_le_set_advertising_parameters>
100571ce:	2800      	cmp	r0, #0
100571d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
100571d2:	d102      	bne.n	100571da <GAP_set_legacy_advertising_configuration+0x92>
100571d4:	9804      	ldr	r0, [sp, #16]
100571d6:	74b0      	strb	r0, [r6, #18]
100571d8:	7431      	strb	r1, [r6, #16]
100571da:	b00b      	add	sp, #44	@ 0x2c
100571dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100571de:	46c0      	nop			@ (mov r8, r8)

100571e0 <__arm_cp.2_0>:
100571e0:	2000290c 	.word	0x2000290c
100571e4:	70287028 	.word	0x70287028
100571e8:	00000030 	.word	0x00000030

100571ec <GAP_get_advertising_set_index>:
100571ec:	b570      	push	{r4, r5, r6, lr}
100571ee:	4602      	mov	r2, r0
100571f0:	480b      	ldr	r0, [pc, #44]	@ (10057220 <__arm_cp.4_0>)
100571f2:	7e84      	ldrb	r4, [r0, #26]
100571f4:	480b      	ldr	r0, [pc, #44]	@ (10057224 <__arm_cp.4_1>)
100571f6:	6800      	ldr	r0, [r0, #0]
100571f8:	6d45      	ldr	r5, [r0, #84]	@ 0x54
100571fa:	3510      	adds	r5, #16
100571fc:	2000      	movs	r0, #0
100571fe:	4603      	mov	r3, r0
10057200:	429c      	cmp	r4, r3
10057202:	d008      	beq.n	10057216 <GAP_get_advertising_set_index+0x2a>
10057204:	782e      	ldrb	r6, [r5, #0]
10057206:	2e00      	cmp	r6, #0
10057208:	d008      	beq.n	1005721c <GAP_get_advertising_set_index+0x30>
1005720a:	78ae      	ldrb	r6, [r5, #2]
1005720c:	4296      	cmp	r6, r2
1005720e:	d004      	beq.n	1005721a <GAP_get_advertising_set_index+0x2e>
10057210:	3514      	adds	r5, #20
10057212:	1c5b      	adds	r3, r3, #1
10057214:	e7f4      	b.n	10057200 <GAP_get_advertising_set_index+0x14>
10057216:	4623      	mov	r3, r4
10057218:	e000      	b.n	1005721c <GAP_get_advertising_set_index+0x30>
1005721a:	2001      	movs	r0, #1
1005721c:	700b      	strb	r3, [r1, #0]
1005721e:	bd70      	pop	{r4, r5, r6, pc}

10057220 <__arm_cp.4_0>:
10057220:	2000296c 	.word	0x2000296c

10057224 <__arm_cp.4_1>:
10057224:	2000290c 	.word	0x2000290c

10057228 <GAP_set_legacy_advertising_enable>:
10057228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005722a:	4604      	mov	r4, r0
1005722c:	4819      	ldr	r0, [pc, #100]	@ (10057294 <__arm_cp.5_0>)
1005722e:	6800      	ldr	r0, [r0, #0]
10057230:	6d47      	ldr	r7, [r0, #84]	@ 0x54
10057232:	2c00      	cmp	r4, #0
10057234:	d00d      	beq.n	10057252 <GAP_set_legacy_advertising_enable+0x2a>
10057236:	7c38      	ldrb	r0, [r7, #16]
10057238:	2800      	cmp	r0, #0
1005723a:	d023      	beq.n	10057284 <GAP_set_legacy_advertising_enable+0x5c>
1005723c:	2000      	movs	r0, #0
1005723e:	4601      	mov	r1, r0
10057240:	f000 f82a 	bl	10057298 <GAP_check_flags>
10057244:	4605      	mov	r5, r0
10057246:	2800      	cmp	r0, #0
10057248:	d122      	bne.n	10057290 <GAP_set_legacy_advertising_enable+0x68>
1005724a:	f7ff fee7 	bl	1005701c <GAP_generate_new_rpa>
1005724e:	4606      	mov	r6, r0
10057250:	e000      	b.n	10057254 <GAP_set_legacy_advertising_enable+0x2c>
10057252:	260c      	movs	r6, #12
10057254:	4620      	mov	r0, r4
10057256:	f002 fea7 	bl	10059fa8 <hci_le_set_advertising_enable>
1005725a:	4605      	mov	r5, r0
1005725c:	2800      	cmp	r0, #0
1005725e:	d117      	bne.n	10057290 <GAP_set_legacy_advertising_enable+0x68>
10057260:	2500      	movs	r5, #0
10057262:	4620      	mov	r0, r4
10057264:	4629      	mov	r1, r5
10057266:	462a      	mov	r2, r5
10057268:	f000 f870 	bl	1005734c <GAP_set_discoverability_mode>
1005726c:	2c00      	cmp	r4, #0
1005726e:	d00b      	beq.n	10057288 <GAP_set_legacy_advertising_enable+0x60>
10057270:	2001      	movs	r0, #1
10057272:	7478      	strb	r0, [r7, #17]
10057274:	2e00      	cmp	r6, #0
10057276:	d10b      	bne.n	10057290 <GAP_set_legacy_advertising_enable+0x68>
10057278:	2500      	movs	r5, #0
1005727a:	4628      	mov	r0, r5
1005727c:	4629      	mov	r1, r5
1005727e:	f7ff fea5 	bl	10056fcc <GAP_start_privacy_timer>
10057282:	e005      	b.n	10057290 <GAP_set_legacy_advertising_enable+0x68>
10057284:	25d3      	movs	r5, #211	@ 0xd3
10057286:	e003      	b.n	10057290 <GAP_set_legacy_advertising_enable+0x68>
10057288:	2500      	movs	r5, #0
1005728a:	747d      	strb	r5, [r7, #17]
1005728c:	f7ff fe0a 	bl	10056ea4 <GAP_stop_privacy_timer>
10057290:	4628      	mov	r0, r5
10057292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10057294 <__arm_cp.5_0>:
10057294:	2000290c 	.word	0x2000290c

10057298 <GAP_check_flags>:
10057298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005729a:	4a28      	ldr	r2, [pc, #160]	@ (1005733c <__arm_cp.6_0>)
1005729c:	7e92      	ldrb	r2, [r2, #26]
1005729e:	2512      	movs	r5, #18
100572a0:	428a      	cmp	r2, r1
100572a2:	d925      	bls.n	100572f0 <GAP_check_flags+0x58>
100572a4:	2800      	cmp	r0, #0
100572a6:	d100      	bne.n	100572aa <GAP_check_flags+0x12>
100572a8:	4601      	mov	r1, r0
100572aa:	2214      	movs	r2, #20
100572ac:	434a      	muls	r2, r1
100572ae:	4824      	ldr	r0, [pc, #144]	@ (10057340 <__arm_cp.6_1>)
100572b0:	6800      	ldr	r0, [r0, #0]
100572b2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
100572b4:	1899      	adds	r1, r3, r2
100572b6:	784c      	ldrb	r4, [r1, #1]
100572b8:	06a0      	lsls	r0, r4, #26
100572ba:	0fc6      	lsrs	r6, r0, #31
100572bc:	2000      	movs	r0, #0
100572be:	2e00      	cmp	r6, #0
100572c0:	d002      	beq.n	100572c8 <GAP_check_flags+0x30>
100572c2:	2710      	movs	r7, #16
100572c4:	4027      	ands	r7, r4
100572c6:	d114      	bne.n	100572f2 <GAP_check_flags+0x5a>
100572c8:	2e00      	cmp	r6, #0
100572ca:	d102      	bne.n	100572d2 <GAP_check_flags+0x3a>
100572cc:	2608      	movs	r6, #8
100572ce:	4034      	ands	r4, r6
100572d0:	d10f      	bne.n	100572f2 <GAP_check_flags+0x5a>
100572d2:	5c9e      	ldrb	r6, [r3, r2]
100572d4:	684c      	ldr	r4, [r1, #4]
100572d6:	8988      	ldrh	r0, [r1, #12]
100572d8:	4621      	mov	r1, r4
100572da:	f000 f8bb 	bl	10057454 <GAP_search_flags_index>
100572de:	4919      	ldr	r1, [pc, #100]	@ (10057344 <__arm_cp.6_2>)
100572e0:	4288      	cmp	r0, r1
100572e2:	d008      	beq.n	100572f6 <GAP_check_flags+0x5e>
100572e4:	1900      	adds	r0, r0, r4
100572e6:	7881      	ldrb	r1, [r0, #2]
100572e8:	0748      	lsls	r0, r1, #29
100572ea:	d40b      	bmi.n	10057304 <GAP_check_flags+0x6c>
100572ec:	20d4      	movs	r0, #212	@ 0xd4
100572ee:	e000      	b.n	100572f2 <GAP_check_flags+0x5a>
100572f0:	4628      	mov	r0, r5
100572f2:	b2c0      	uxtb	r0, r0
100572f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100572f6:	2e03      	cmp	r6, #3
100572f8:	4628      	mov	r0, r5
100572fa:	d8fa      	bhi.n	100572f2 <GAP_check_flags+0x5a>
100572fc:	00f1      	lsls	r1, r6, #3
100572fe:	4812      	ldr	r0, [pc, #72]	@ (10057348 <__arm_cp.6_3>)
10057300:	40c8      	lsrs	r0, r1
10057302:	e7f6      	b.n	100572f2 <GAP_check_flags+0x5a>
10057304:	2e03      	cmp	r6, #3
10057306:	4628      	mov	r0, r5
10057308:	d8f3      	bhi.n	100572f2 <GAP_check_flags+0x5a>
1005730a:	46c0      	nop			@ (mov r8, r8)
1005730c:	447e      	add	r6, pc
1005730e:	7936      	ldrb	r6, [r6, #4]
10057310:	0076      	lsls	r6, r6, #1
10057312:	44b7      	add	pc, r6
10057314:	010d0601 	.word	0x010d0601
10057318:	2003      	movs	r0, #3
1005731a:	4001      	ands	r1, r0
1005731c:	d105      	bne.n	1005732a <GAP_check_flags+0x92>
1005731e:	4608      	mov	r0, r1
10057320:	e7e7      	b.n	100572f2 <GAP_check_flags+0x5a>
10057322:	2003      	movs	r0, #3
10057324:	4001      	ands	r1, r0
10057326:	2901      	cmp	r1, #1
10057328:	d006      	beq.n	10057338 <GAP_check_flags+0xa0>
1005732a:	202b      	movs	r0, #43	@ 0x2b
1005732c:	43c0      	mvns	r0, r0
1005732e:	e7e0      	b.n	100572f2 <GAP_check_flags+0x5a>
10057330:	2003      	movs	r0, #3
10057332:	4001      	ands	r1, r0
10057334:	2902      	cmp	r1, #2
10057336:	d1f8      	bne.n	1005732a <GAP_check_flags+0x92>
10057338:	2000      	movs	r0, #0
1005733a:	e7da      	b.n	100572f2 <GAP_check_flags+0x5a>

1005733c <__arm_cp.6_0>:
1005733c:	2000296c 	.word	0x2000296c

10057340 <__arm_cp.6_1>:
10057340:	2000290c 	.word	0x2000290c

10057344 <__arm_cp.6_2>:
10057344:	0000ffff 	.word	0x0000ffff

10057348 <__arm_cp.6_3>:
10057348:	00d4d400 	.word	0x00d4d400

1005734c <GAP_set_discoverability_mode>:
1005734c:	b570      	push	{r4, r5, r6, lr}
1005734e:	4603      	mov	r3, r0
10057350:	2900      	cmp	r1, #0
10057352:	d100      	bne.n	10057356 <GAP_set_discoverability_mode+0xa>
10057354:	460a      	mov	r2, r1
10057356:	4829      	ldr	r0, [pc, #164]	@ (100573fc <__arm_cp.7_0>)
10057358:	6800      	ldr	r0, [r0, #0]
1005735a:	6d41      	ldr	r1, [r0, #84]	@ 0x54
1005735c:	2b01      	cmp	r3, #1
1005735e:	d10c      	bne.n	1005737a <GAP_set_discoverability_mode+0x2e>
10057360:	2314      	movs	r3, #20
10057362:	4353      	muls	r3, r2
10057364:	5cca      	ldrb	r2, [r1, r3]
10057366:	2a01      	cmp	r2, #1
10057368:	d033      	beq.n	100573d2 <GAP_set_discoverability_mode+0x86>
1005736a:	2a02      	cmp	r2, #2
1005736c:	d13e      	bne.n	100573ec <GAP_set_discoverability_mode+0xa0>
1005736e:	18ca      	adds	r2, r1, r3
10057370:	7894      	ldrb	r4, [r2, #2]
10057372:	2004      	movs	r0, #4
10057374:	4320      	orrs	r0, r4
10057376:	7090      	strb	r0, [r2, #2]
10057378:	e03a      	b.n	100573f0 <GAP_set_discoverability_mode+0xa4>
1005737a:	2314      	movs	r3, #20
1005737c:	4353      	muls	r3, r2
1005737e:	18c9      	adds	r1, r1, r3
10057380:	1c8e      	adds	r6, r1, #2
10057382:	7889      	ldrb	r1, [r1, #2]
10057384:	0789      	lsls	r1, r1, #30
10057386:	d521      	bpl.n	100573cc <GAP_set_discoverability_mode+0x80>
10057388:	2400      	movs	r4, #0
1005738a:	4621      	mov	r1, r4
1005738c:	f00c f8db 	bl	10063546 <CST_stop>
10057390:	481b      	ldr	r0, [pc, #108]	@ (10057400 <__arm_cp.7_1>)
10057392:	6800      	ldr	r0, [r0, #0]
10057394:	214e      	movs	r1, #78	@ 0x4e
10057396:	5c40      	ldrb	r0, [r0, r1]
10057398:	07c0      	lsls	r0, r0, #31
1005739a:	d017      	beq.n	100573cc <GAP_set_discoverability_mode+0x80>
1005739c:	4819      	ldr	r0, [pc, #100]	@ (10057404 <__arm_cp.7_2>)
1005739e:	6800      	ldr	r0, [r0, #0]
100573a0:	6980      	ldr	r0, [r0, #24]
100573a2:	2244      	movs	r2, #68	@ 0x44
100573a4:	2502      	movs	r5, #2
100573a6:	4629      	mov	r1, r5
100573a8:	462b      	mov	r3, r5
100573aa:	f7fe fd0f 	bl	10055dcc <aci_event_fifo_push_header>
100573ae:	2800      	cmp	r0, #0
100573b0:	d00c      	beq.n	100573cc <GAP_set_discoverability_mode+0x80>
100573b2:	4601      	mov	r1, r0
100573b4:	7185      	strb	r5, [r0, #6]
100573b6:	71c4      	strb	r4, [r0, #7]
100573b8:	7204      	strb	r4, [r0, #8]
100573ba:	20ff      	movs	r0, #255	@ 0xff
100573bc:	7148      	strb	r0, [r1, #5]
100573be:	2082      	movs	r0, #130	@ 0x82
100573c0:	7108      	strb	r0, [r1, #4]
100573c2:	2004      	movs	r0, #4
100573c4:	7248      	strb	r0, [r1, #9]
100573c6:	4628      	mov	r0, r5
100573c8:	f7fe fd9d 	bl	10055f06 <aci_event_fifo_push>
100573cc:	2000      	movs	r0, #0
100573ce:	7030      	strb	r0, [r6, #0]
100573d0:	bd70      	pop	{r4, r5, r6, pc}
100573d2:	18c9      	adds	r1, r1, r3
100573d4:	784a      	ldrb	r2, [r1, #1]
100573d6:	788b      	ldrb	r3, [r1, #2]
100573d8:	4313      	orrs	r3, r2
100573da:	2202      	movs	r2, #2
100573dc:	431a      	orrs	r2, r3
100573de:	708a      	strb	r2, [r1, #2]
100573e0:	2100      	movs	r1, #0
100573e2:	2201      	movs	r2, #1
100573e4:	4b08      	ldr	r3, [pc, #32]	@ (10057408 <__arm_cp.7_3>)
100573e6:	f00c f8e4 	bl	100635b2 <CST_start>
100573ea:	bd70      	pop	{r4, r5, r6, pc}
100573ec:	18c8      	adds	r0, r1, r3
100573ee:	7880      	ldrb	r0, [r0, #2]
100573f0:	18c9      	adds	r1, r1, r3
100573f2:	784a      	ldrb	r2, [r1, #1]
100573f4:	4302      	orrs	r2, r0
100573f6:	708a      	strb	r2, [r1, #2]
100573f8:	bd70      	pop	{r4, r5, r6, pc}
100573fa:	46c0      	nop			@ (mov r8, r8)

100573fc <__arm_cp.7_0>:
100573fc:	2000290c 	.word	0x2000290c

10057400 <__arm_cp.7_1>:
10057400:	20002958 	.word	0x20002958

10057404 <__arm_cp.7_2>:
10057404:	20002908 	.word	0x20002908

10057408 <__arm_cp.7_3>:
10057408:	0002bf20 	.word	0x0002bf20

1005740c <GAP_suspend_resume_active_advertising_sets_ucfg_weak>:
1005740c:	b580      	push	{r7, lr}
1005740e:	f000 f801 	bl	10057414 <GAP_suspend_resume_active_advertising_sets_legacy>
10057412:	bd80      	pop	{r7, pc}

10057414 <GAP_suspend_resume_active_advertising_sets_legacy>:
10057414:	b580      	push	{r7, lr}
10057416:	4905      	ldr	r1, [pc, #20]	@ (1005742c <__arm_cp.11_0>)
10057418:	6809      	ldr	r1, [r1, #0]
1005741a:	6d49      	ldr	r1, [r1, #84]	@ 0x54
1005741c:	7c49      	ldrb	r1, [r1, #17]
1005741e:	2901      	cmp	r1, #1
10057420:	d102      	bne.n	10057428 <GAP_suspend_resume_active_advertising_sets_legacy+0x14>
10057422:	f002 fdc1 	bl	10059fa8 <hci_le_set_advertising_enable>
10057426:	bd80      	pop	{r7, pc}
10057428:	2000      	movs	r0, #0
1005742a:	bd80      	pop	{r7, pc}

1005742c <__arm_cp.11_0>:
1005742c:	2000290c 	.word	0x2000290c

10057430 <GAP_set_legacy_advertising_data>:
10057430:	b5b0      	push	{r4, r5, r7, lr}
10057432:	460c      	mov	r4, r1
10057434:	4605      	mov	r5, r0
10057436:	b2c0      	uxtb	r0, r0
10057438:	f008 fe9e 	bl	10060178 <ll_set_legacy_advertising_data_ptr>
1005743c:	2800      	cmp	r0, #0
1005743e:	d000      	beq.n	10057442 <GAP_set_legacy_advertising_data+0x12>
10057440:	bdb0      	pop	{r4, r5, r7, pc}
10057442:	4903      	ldr	r1, [pc, #12]	@ (10057450 <__arm_cp.12_0>)
10057444:	6809      	ldr	r1, [r1, #0]
10057446:	6d49      	ldr	r1, [r1, #84]	@ 0x54
10057448:	818d      	strh	r5, [r1, #12]
1005744a:	604c      	str	r4, [r1, #4]
1005744c:	bdb0      	pop	{r4, r5, r7, pc}
1005744e:	46c0      	nop			@ (mov r8, r8)

10057450 <__arm_cp.12_0>:
10057450:	2000290c 	.word	0x2000290c

10057454 <GAP_search_flags_index>:
10057454:	b5b0      	push	{r4, r5, r7, lr}
10057456:	4a0a      	ldr	r2, [pc, #40]	@ (10057480 <__arm_cp.16_0>)
10057458:	2803      	cmp	r0, #3
1005745a:	d30f      	bcc.n	1005747c <GAP_search_flags_index+0x28>
1005745c:	2300      	movs	r3, #0
1005745e:	b29d      	uxth	r5, r3
10057460:	5d4c      	ldrb	r4, [r1, r5]
10057462:	2c02      	cmp	r4, #2
10057464:	d103      	bne.n	1005746e <GAP_search_flags_index+0x1a>
10057466:	186d      	adds	r5, r5, r1
10057468:	786d      	ldrb	r5, [r5, #1]
1005746a:	2d01      	cmp	r5, #1
1005746c:	d005      	beq.n	1005747a <GAP_search_flags_index+0x26>
1005746e:	191b      	adds	r3, r3, r4
10057470:	1c5b      	adds	r3, r3, #1
10057472:	b29c      	uxth	r4, r3
10057474:	4284      	cmp	r4, r0
10057476:	d3f2      	bcc.n	1005745e <GAP_search_flags_index+0xa>
10057478:	e000      	b.n	1005747c <GAP_search_flags_index+0x28>
1005747a:	461a      	mov	r2, r3
1005747c:	b290      	uxth	r0, r2
1005747e:	bdb0      	pop	{r4, r5, r7, pc}

10057480 <__arm_cp.16_0>:
10057480:	0000ffff 	.word	0x0000ffff

10057484 <GAP_check_adv_status>:
10057484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10057486:	4605      	mov	r5, r0
10057488:	2600      	movs	r6, #0
1005748a:	7006      	strb	r6, [r0, #0]
1005748c:	2401      	movs	r4, #1
1005748e:	9100      	str	r1, [sp, #0]
10057490:	700c      	strb	r4, [r1, #0]
10057492:	4816      	ldr	r0, [pc, #88]	@ (100574ec <__arm_cp.17_0>)
10057494:	6800      	ldr	r0, [r0, #0]
10057496:	6d47      	ldr	r7, [r0, #84]	@ 0x54
10057498:	f7ff fb86 	bl	10056ba8 <gap_extended_adv_scan_supported>
1005749c:	2800      	cmp	r0, #0
1005749e:	d001      	beq.n	100574a4 <GAP_check_adv_status+0x20>
100574a0:	4813      	ldr	r0, [pc, #76]	@ (100574f0 <__arm_cp.17_1>)
100574a2:	7e84      	ldrb	r4, [r0, #26]
100574a4:	b2e1      	uxtb	r1, r4
100574a6:	3711      	adds	r7, #17
100574a8:	4630      	mov	r0, r6
100574aa:	4632      	mov	r2, r6
100574ac:	2900      	cmp	r1, #0
100574ae:	d00f      	beq.n	100574d0 <GAP_check_adv_status+0x4c>
100574b0:	783b      	ldrb	r3, [r7, #0]
100574b2:	2b00      	cmp	r3, #0
100574b4:	d009      	beq.n	100574ca <GAP_check_adv_status+0x46>
100574b6:	2b02      	cmp	r3, #2
100574b8:	d100      	bne.n	100574bc <GAP_check_adv_status+0x38>
100574ba:	2001      	movs	r0, #1
100574bc:	463a      	mov	r2, r7
100574be:	3a0f      	subs	r2, #15
100574c0:	7813      	ldrb	r3, [r2, #0]
100574c2:	2201      	movs	r2, #1
100574c4:	079b      	lsls	r3, r3, #30
100574c6:	d500      	bpl.n	100574ca <GAP_check_adv_status+0x46>
100574c8:	4616      	mov	r6, r2
100574ca:	3714      	adds	r7, #20
100574cc:	1e49      	subs	r1, r1, #1
100574ce:	e7ed      	b.n	100574ac <GAP_check_adv_status+0x28>
100574d0:	2a01      	cmp	r2, #1
100574d2:	d101      	bne.n	100574d8 <GAP_check_adv_status+0x54>
100574d4:	2101      	movs	r1, #1
100574d6:	7029      	strb	r1, [r5, #0]
100574d8:	2801      	cmp	r0, #1
100574da:	d002      	beq.n	100574e2 <GAP_check_adv_status+0x5e>
100574dc:	b2f0      	uxtb	r0, r6
100574de:	2801      	cmp	r0, #1
100574e0:	d102      	bne.n	100574e8 <GAP_check_adv_status+0x64>
100574e2:	2000      	movs	r0, #0
100574e4:	9900      	ldr	r1, [sp, #0]
100574e6:	7008      	strb	r0, [r1, #0]
100574e8:	b2d0      	uxtb	r0, r2
100574ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100574ec <__arm_cp.17_0>:
100574ec:	2000290c 	.word	0x2000290c

100574f0 <__arm_cp.17_1>:
100574f0:	2000296c 	.word	0x2000296c

100574f4 <GAP_ResumeAdvertising_ucfg_weak>:
100574f4:	b580      	push	{r7, lr}
100574f6:	2001      	movs	r0, #1
100574f8:	f7ff ff8c 	bl	10057414 <GAP_suspend_resume_active_advertising_sets_legacy>
100574fc:	bd80      	pop	{r7, pc}
	...

10057500 <GAT_att_cmn_init>:
10057500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10057502:	2001      	movs	r0, #1
10057504:	2198      	movs	r1, #152	@ 0x98
10057506:	f00a f9d5 	bl	100618b4 <csmem_mem_0_assign>
1005750a:	4e2b      	ldr	r6, [pc, #172]	@ (100575b8 <__arm_cp.1_0>)
1005750c:	6030      	str	r0, [r6, #0]
1005750e:	4f2b      	ldr	r7, [pc, #172]	@ (100575bc <__arm_cp.1_1>)
10057510:	7af8      	ldrb	r0, [r7, #11]
10057512:	7b39      	ldrb	r1, [r7, #12]
10057514:	1808      	adds	r0, r1, r0
10057516:	2414      	movs	r4, #20
10057518:	4621      	mov	r1, r4
1005751a:	f00a f9cb 	bl	100618b4 <csmem_mem_0_assign>
1005751e:	6832      	ldr	r2, [r6, #0]
10057520:	2500      	movs	r5, #0
10057522:	6355      	str	r5, [r2, #52]	@ 0x34
10057524:	62d5      	str	r5, [r2, #44]	@ 0x2c
10057526:	7af9      	ldrb	r1, [r7, #11]
10057528:	4603      	mov	r3, r0
1005752a:	462f      	mov	r7, r5
1005752c:	42b9      	cmp	r1, r7
1005752e:	d00a      	beq.n	10057546 <GAT_att_cmn_init+0x46>
10057530:	611d      	str	r5, [r3, #16]
10057532:	705f      	strb	r7, [r3, #1]
10057534:	701f      	strb	r7, [r3, #0]
10057536:	6832      	ldr	r2, [r6, #0]
10057538:	62d3      	str	r3, [r2, #44]	@ 0x2c
1005753a:	4625      	mov	r5, r4
1005753c:	437d      	muls	r5, r7
1005753e:	1945      	adds	r5, r0, r5
10057540:	3314      	adds	r3, #20
10057542:	1c7f      	adds	r7, r7, #1
10057544:	e7f2      	b.n	1005752c <GAT_att_cmn_init+0x2c>
10057546:	2300      	movs	r3, #0
10057548:	6313      	str	r3, [r2, #48]	@ 0x30
1005754a:	4a1c      	ldr	r2, [pc, #112]	@ (100575bc <__arm_cp.1_1>)
1005754c:	7b12      	ldrb	r2, [r2, #12]
1005754e:	1852      	adds	r2, r2, r1
10057550:	b2cd      	uxtb	r5, r1
10057552:	42aa      	cmp	r2, r5
10057554:	d90a      	bls.n	1005756c <GAT_att_cmn_init+0x6c>
10057556:	4365      	muls	r5, r4
10057558:	27ff      	movs	r7, #255	@ 0xff
1005755a:	5547      	strb	r7, [r0, r5]
1005755c:	1945      	adds	r5, r0, r5
1005755e:	612b      	str	r3, [r5, #16]
10057560:	7069      	strb	r1, [r5, #1]
10057562:	6833      	ldr	r3, [r6, #0]
10057564:	631d      	str	r5, [r3, #48]	@ 0x30
10057566:	1c49      	adds	r1, r1, #1
10057568:	462b      	mov	r3, r5
1005756a:	e7f1      	b.n	10057550 <GAT_att_cmn_init+0x50>
1005756c:	0690      	lsls	r0, r2, #26
1005756e:	0e00      	lsrs	r0, r0, #24
10057570:	1c41      	adds	r1, r0, #1
10057572:	4c13      	ldr	r4, [pc, #76]	@ (100575c0 <__arm_cp.1_2>)
10057574:	2201      	movs	r2, #1
10057576:	4620      	mov	r0, r4
10057578:	f00a f98a 	bl	10061890 <csmem_mem_assign>
1005757c:	6831      	ldr	r1, [r6, #0]
1005757e:	6208      	str	r0, [r1, #32]
10057580:	4d0e      	ldr	r5, [pc, #56]	@ (100575bc <__arm_cp.1_1>)
10057582:	7ae8      	ldrb	r0, [r5, #11]
10057584:	7b29      	ldrb	r1, [r5, #12]
10057586:	1808      	adds	r0, r1, r0
10057588:	0680      	lsls	r0, r0, #26
1005758a:	0e01      	lsrs	r1, r0, #24
1005758c:	2202      	movs	r2, #2
1005758e:	4620      	mov	r0, r4
10057590:	f00a f97e 	bl	10061890 <csmem_mem_assign>
10057594:	6834      	ldr	r4, [r6, #0]
10057596:	6260      	str	r0, [r4, #36]	@ 0x24
10057598:	7ae8      	ldrb	r0, [r5, #11]
1005759a:	7b29      	ldrb	r1, [r5, #12]
1005759c:	1808      	adds	r0, r1, r0
1005759e:	0680      	lsls	r0, r0, #26
100575a0:	0e01      	lsrs	r1, r0, #24
100575a2:	4a08      	ldr	r2, [pc, #32]	@ (100575c4 <__arm_cp.1_3>)
100575a4:	2307      	movs	r3, #7
100575a6:	4620      	mov	r0, r4
100575a8:	f00b ffb8 	bl	1006351c <CST_init>
100575ac:	f000 f9f2 	bl	10057994 <GAT_att_srv_init>
100575b0:	f00d fbfc 	bl	10064dac <GAT_att_clt_init>
100575b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100575b6:	46c0      	nop			@ (mov r8, r8)

100575b8 <__arm_cp.1_0>:
100575b8:	20002910 	.word	0x20002910

100575bc <__arm_cp.1_1>:
100575bc:	2000296c 	.word	0x2000296c

100575c0 <__arm_cp.1_2>:
100575c0:	20002968 	.word	0x20002968

100575c4 <__arm_cp.1_3>:
100575c4:	100575c9 	.word	0x100575c9

100575c8 <GAT_att_cmn_timeout_cb_wrapper>:
100575c8:	b580      	push	{r7, lr}
100575ca:	6940      	ldr	r0, [r0, #20]
100575cc:	4901      	ldr	r1, [pc, #4]	@ (100575d4 <__arm_cp.2_0>)
100575ce:	f00c f87e 	bl	100636ce <cst_sharedCallback>
100575d2:	bd80      	pop	{r7, pc}

100575d4 <__arm_cp.2_0>:
100575d4:	10057941 	.word	0x10057941

100575d8 <GAT_att_cmn_timer_expire_tsk>:
100575d8:	b5e0      	push	{r5, r6, r7, lr}
100575da:	2000      	movs	r0, #0
100575dc:	9000      	str	r0, [sp, #0]
100575de:	4b06      	ldr	r3, [pc, #24]	@ (100575f8 <__arm_cp.4_0>)
100575e0:	4601      	mov	r1, r0
100575e2:	4602      	mov	r2, r0
100575e4:	f000 f80a 	bl	100575fc <GAT_att_cmn_for_each_ch_descr>
100575e8:	2800      	cmp	r0, #0
100575ea:	d004      	beq.n	100575f6 <GAT_att_cmn_timer_expire_tsk+0x1e>
100575ec:	2007      	movs	r0, #7
100575ee:	f00b ff37 	bl	10063460 <tsk_notify_idx>
100575f2:	f7fb f8b8 	bl	10052766 <BLE_STACK_ProcessRequest>
100575f6:	bd8c      	pop	{r2, r3, r7, pc}

100575f8 <__arm_cp.4_0>:
100575f8:	10057659 	.word	0x10057659

100575fc <GAT_att_cmn_for_each_ch_descr>:
100575fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100575fe:	b085      	sub	sp, #20
10057600:	9304      	str	r3, [sp, #16]
10057602:	9201      	str	r2, [sp, #4]
10057604:	9102      	str	r1, [sp, #8]
10057606:	4607      	mov	r7, r0
10057608:	2002      	movs	r0, #2
1005760a:	4038      	ands	r0, r7
1005760c:	9003      	str	r0, [sp, #12]
1005760e:	2401      	movs	r4, #1
10057610:	403c      	ands	r4, r7
10057612:	4810      	ldr	r0, [pc, #64]	@ (10057654 <__arm_cp.5_0>)
10057614:	6805      	ldr	r5, [r0, #0]
10057616:	3534      	adds	r5, #52	@ 0x34
10057618:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1005761a:	682d      	ldr	r5, [r5, #0]
1005761c:	2d00      	cmp	r5, #0
1005761e:	d016      	beq.n	1005764e <GAT_att_cmn_for_each_ch_descr+0x52>
10057620:	2f00      	cmp	r7, #0
10057622:	d00c      	beq.n	1005763e <GAT_att_cmn_for_each_ch_descr+0x42>
10057624:	2c00      	cmp	r4, #0
10057626:	d003      	beq.n	10057630 <GAT_att_cmn_for_each_ch_descr+0x34>
10057628:	8928      	ldrh	r0, [r5, #8]
1005762a:	9902      	ldr	r1, [sp, #8]
1005762c:	4288      	cmp	r0, r1
1005762e:	d10c      	bne.n	1005764a <GAT_att_cmn_for_each_ch_descr+0x4e>
10057630:	9803      	ldr	r0, [sp, #12]
10057632:	2800      	cmp	r0, #0
10057634:	d003      	beq.n	1005763e <GAT_att_cmn_for_each_ch_descr+0x42>
10057636:	8968      	ldrh	r0, [r5, #10]
10057638:	9901      	ldr	r1, [sp, #4]
1005763a:	4288      	cmp	r0, r1
1005763c:	d105      	bne.n	1005764a <GAT_att_cmn_for_each_ch_descr+0x4e>
1005763e:	4628      	mov	r0, r5
10057640:	4631      	mov	r1, r6
10057642:	9a04      	ldr	r2, [sp, #16]
10057644:	4790      	blx	r2
10057646:	2800      	cmp	r0, #0
10057648:	d102      	bne.n	10057650 <GAT_att_cmn_for_each_ch_descr+0x54>
1005764a:	3510      	adds	r5, #16
1005764c:	e7e5      	b.n	1005761a <GAT_att_cmn_for_each_ch_descr+0x1e>
1005764e:	2000      	movs	r0, #0
10057650:	b005      	add	sp, #20
10057652:	bdf0      	pop	{r4, r5, r6, r7, pc}

10057654 <__arm_cp.5_0>:
10057654:	20002910 	.word	0x20002910

10057658 <GAT_att_cmn_handle_disconnec_iterate_f>:
10057658:	b5b0      	push	{r4, r5, r7, lr}
1005765a:	4604      	mov	r4, r0
1005765c:	8880      	ldrh	r0, [r0, #4]
1005765e:	2500      	movs	r5, #0
10057660:	05c0      	lsls	r0, r0, #23
10057662:	d401      	bmi.n	10057668 <GAT_att_cmn_handle_disconnec_iterate_f+0x10>
10057664:	4628      	mov	r0, r5
10057666:	e006      	b.n	10057676 <GAT_att_cmn_handle_disconnec_iterate_f+0x1e>
10057668:	8962      	ldrh	r2, [r4, #10]
1005766a:	8921      	ldrh	r1, [r4, #8]
1005766c:	2002      	movs	r0, #2
1005766e:	f00c fd83 	bl	10064178 <aci_gatt_proc_timeout_event_push_noinline>
10057672:	2800      	cmp	r0, #0
10057674:	d000      	beq.n	10057678 <GAT_att_cmn_handle_disconnec_iterate_f+0x20>
10057676:	bdb0      	pop	{r4, r5, r7, pc}
10057678:	8920      	ldrh	r0, [r4, #8]
1005767a:	8961      	ldrh	r1, [r4, #10]
1005767c:	2904      	cmp	r1, #4
1005767e:	d102      	bne.n	10057686 <GAT_att_cmn_handle_disconnec_iterate_f+0x2e>
10057680:	f000 f8ac 	bl	100577dc <GAT_att_cmn_disconnection>
10057684:	e7ee      	b.n	10057664 <GAT_att_cmn_handle_disconnec_iterate_f+0xc>
10057686:	f000 fb17 	bl	10057cb8 <GAT_att_srv_bearer_close>
1005768a:	8961      	ldrh	r1, [r4, #10]
1005768c:	8920      	ldrh	r0, [r4, #8]
1005768e:	f00d fc7e 	bl	10064f8e <GAT_att_clt_bearer_close>
10057692:	2000      	movs	r0, #0
10057694:	8120      	strh	r0, [r4, #8]
10057696:	4909      	ldr	r1, [pc, #36]	@ (100576bc <__arm_cp.6_0>)
10057698:	6809      	ldr	r1, [r1, #0]
1005769a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
1005769c:	42a3      	cmp	r3, r4
1005769e:	d005      	beq.n	100576ac <GAT_att_cmn_handle_disconnec_iterate_f+0x54>
100576a0:	461a      	mov	r2, r3
100576a2:	691b      	ldr	r3, [r3, #16]
100576a4:	42a3      	cmp	r3, r4
100576a6:	d1fb      	bne.n	100576a0 <GAT_att_cmn_handle_disconnec_iterate_f+0x48>
100576a8:	3210      	adds	r2, #16
100576aa:	e001      	b.n	100576b0 <GAT_att_cmn_handle_disconnec_iterate_f+0x58>
100576ac:	460a      	mov	r2, r1
100576ae:	3234      	adds	r2, #52	@ 0x34
100576b0:	6923      	ldr	r3, [r4, #16]
100576b2:	6013      	str	r3, [r2, #0]
100576b4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
100576b6:	6122      	str	r2, [r4, #16]
100576b8:	630c      	str	r4, [r1, #48]	@ 0x30
100576ba:	bdb0      	pop	{r4, r5, r7, pc}

100576bc <__arm_cp.6_0>:
100576bc:	20002910 	.word	0x20002910

100576c0 <GAT_att_cmn_tx_pool_evt_tsk>:
100576c0:	b580      	push	{r7, lr}
100576c2:	2000      	movs	r0, #0
100576c4:	f7fe f9c8 	bl	10055a58 <ACL_pkt_get_available_mem_buffers>
100576c8:	490d      	ldr	r1, [pc, #52]	@ (10057700 <__arm_cp.8_0>)
100576ca:	8a09      	ldrh	r1, [r1, #16]
100576cc:	3125      	adds	r1, #37	@ 0x25
100576ce:	0949      	lsrs	r1, r1, #5
100576d0:	4288      	cmp	r0, r1
100576d2:	d90f      	bls.n	100576f4 <GAT_att_cmn_tx_pool_evt_tsk+0x34>
100576d4:	1c49      	adds	r1, r1, #1
100576d6:	f7e8 fdb3 	bl	10040240 <__udivsi3>
100576da:	4602      	mov	r2, r0
100576dc:	2042      	movs	r0, #66	@ 0x42
100576de:	2100      	movs	r1, #0
100576e0:	f00c fe86 	bl	100643f0 <aci_gatt_tx_pool_available_event_push_noinline>
100576e4:	2800      	cmp	r0, #0
100576e6:	d004      	beq.n	100576f2 <GAT_att_cmn_tx_pool_evt_tsk+0x32>
100576e8:	2008      	movs	r0, #8
100576ea:	f00b feb9 	bl	10063460 <tsk_notify_idx>
100576ee:	f7fb f83a 	bl	10052766 <BLE_STACK_ProcessRequest>
100576f2:	bd80      	pop	{r7, pc}
100576f4:	2008      	movs	r0, #8
100576f6:	2100      	movs	r1, #0
100576f8:	f00b fec4 	bl	10063484 <tsk_wait_resource_idx>
100576fc:	bd80      	pop	{r7, pc}
100576fe:	46c0      	nop			@ (mov r8, r8)

10057700 <__arm_cp.8_0>:
10057700:	2000296c 	.word	0x2000296c

10057704 <GAT_att_cmn_rcv>:
10057704:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10057706:	460c      	mov	r4, r1
10057708:	2800      	cmp	r0, #0
1005770a:	d013      	beq.n	10057734 <GAT_att_cmn_rcv+0x30>
1005770c:	8825      	ldrh	r5, [r4, #0]
1005770e:	4620      	mov	r0, r4
10057710:	f002 febf 	bl	1005a492 <L2C_get_cid_from_basic_packet_header>
10057714:	4601      	mov	r1, r0
10057716:	4628      	mov	r0, r5
10057718:	f000 f82e 	bl	10057778 <GAT_att_cmn_get_channel_descr_p>
1005771c:	2800      	cmp	r0, #0
1005771e:	d009      	beq.n	10057734 <GAT_att_cmn_rcv+0x30>
10057720:	8860      	ldrh	r0, [r4, #2]
10057722:	2800      	cmp	r0, #0
10057724:	d006      	beq.n	10057734 <GAT_att_cmn_rcv+0x30>
10057726:	89a1      	ldrh	r1, [r4, #12]
10057728:	291f      	cmp	r1, #31
1005772a:	d808      	bhi.n	1005773e <GAT_att_cmn_rcv+0x3a>
1005772c:	a801      	add	r0, sp, #4
1005772e:	8001      	strh	r1, [r0, #0]
10057730:	6860      	ldr	r0, [r4, #4]
10057732:	e00a      	b.n	1005774a <GAT_att_cmn_rcv+0x46>
10057734:	4620      	mov	r0, r4
10057736:	f7fe f995 	bl	10055a64 <ACL_pkt_release>
1005773a:	2000      	movs	r0, #0
1005773c:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005773e:	6860      	ldr	r0, [r4, #4]
10057740:	ad01      	add	r5, sp, #4
10057742:	462a      	mov	r2, r5
10057744:	f00a f955 	bl	100619f2 <Mem_Buff_get_buff_off>
10057748:	8829      	ldrh	r1, [r5, #0]
1005774a:	1840      	adds	r0, r0, r1
1005774c:	7900      	ldrb	r0, [r0, #4]
1005774e:	07c1      	lsls	r1, r0, #31
10057750:	d104      	bne.n	1005775c <GAT_att_cmn_rcv+0x58>
10057752:	281b      	cmp	r0, #27
10057754:	d008      	beq.n	10057768 <GAT_att_cmn_rcv+0x64>
10057756:	281d      	cmp	r0, #29
10057758:	d006      	beq.n	10057768 <GAT_att_cmn_rcv+0x64>
1005775a:	e009      	b.n	10057770 <GAT_att_cmn_rcv+0x6c>
1005775c:	281e      	cmp	r0, #30
1005775e:	d303      	bcc.n	10057768 <GAT_att_cmn_rcv+0x64>
10057760:	2102      	movs	r1, #2
10057762:	4308      	orrs	r0, r1
10057764:	2823      	cmp	r0, #35	@ 0x23
10057766:	d103      	bne.n	10057770 <GAT_att_cmn_rcv+0x6c>
10057768:	4620      	mov	r0, r4
1005776a:	f00d fb23 	bl	10064db4 <GAT_att_clt_rcv>
1005776e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10057770:	4620      	mov	r0, r4
10057772:	f000 f927 	bl	100579c4 <GAT_att_srv_rcv>
10057776:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10057778 <GAT_att_cmn_get_channel_descr_p>:
10057778:	4a07      	ldr	r2, [pc, #28]	@ (10057798 <__arm_cp.10_0>)
1005777a:	6812      	ldr	r2, [r2, #0]
1005777c:	3234      	adds	r2, #52	@ 0x34
1005777e:	6812      	ldr	r2, [r2, #0]
10057780:	2a00      	cmp	r2, #0
10057782:	d007      	beq.n	10057794 <GAT_att_cmn_get_channel_descr_p+0x1c>
10057784:	8913      	ldrh	r3, [r2, #8]
10057786:	4283      	cmp	r3, r0
10057788:	d102      	bne.n	10057790 <GAT_att_cmn_get_channel_descr_p+0x18>
1005778a:	8953      	ldrh	r3, [r2, #10]
1005778c:	428b      	cmp	r3, r1
1005778e:	d001      	beq.n	10057794 <GAT_att_cmn_get_channel_descr_p+0x1c>
10057790:	3210      	adds	r2, #16
10057792:	e7f4      	b.n	1005777e <GAT_att_cmn_get_channel_descr_p+0x6>
10057794:	4610      	mov	r0, r2
10057796:	4770      	bx	lr

10057798 <__arm_cp.10_0>:
10057798:	20002910 	.word	0x20002910

1005779c <GAT_att_cmn_connection>:
1005779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005779e:	4604      	mov	r4, r0
100577a0:	4e0d      	ldr	r6, [pc, #52]	@ (100577d8 <__arm_cp.11_0>)
100577a2:	6830      	ldr	r0, [r6, #0]
100577a4:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
100577a6:	6929      	ldr	r1, [r5, #16]
100577a8:	62c1      	str	r1, [r0, #44]	@ 0x2c
100577aa:	882f      	ldrh	r7, [r5, #0]
100577ac:	2100      	movs	r1, #0
100577ae:	2214      	movs	r2, #20
100577b0:	4628      	mov	r0, r5
100577b2:	f7fb fdcf 	bl	10053354 <BLEPLAT_MemSet>
100577b6:	2004      	movs	r0, #4
100577b8:	8168      	strh	r0, [r5, #10]
100577ba:	2017      	movs	r0, #23
100577bc:	80e8      	strh	r0, [r5, #6]
100577be:	812c      	strh	r4, [r5, #8]
100577c0:	802f      	strh	r7, [r5, #0]
100577c2:	6830      	ldr	r0, [r6, #0]
100577c4:	6b41      	ldr	r1, [r0, #52]	@ 0x34
100577c6:	6345      	str	r5, [r0, #52]	@ 0x34
100577c8:	6129      	str	r1, [r5, #16]
100577ca:	4620      	mov	r0, r4
100577cc:	f000 fa70 	bl	10057cb0 <GAT_att_srv_connection>
100577d0:	4620      	mov	r0, r4
100577d2:	f00d fbd8 	bl	10064f86 <GAT_att_clt_connection>
100577d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100577d8 <__arm_cp.11_0>:
100577d8:	20002910 	.word	0x20002910

100577dc <GAT_att_cmn_disconnection>:
100577dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100577de:	4604      	mov	r4, r0
100577e0:	f00b fceb 	bl	100631ba <smp_sap_forget_device_upon_disconnection>
100577e4:	481c      	ldr	r0, [pc, #112]	@ (10057858 <__arm_cp.12_0>)
100577e6:	6800      	ldr	r0, [r0, #0]
100577e8:	6b46      	ldr	r6, [r0, #52]	@ 0x34
100577ea:	2e00      	cmp	r6, #0
100577ec:	d032      	beq.n	10057854 <GAT_att_cmn_disconnection+0x78>
100577ee:	4637      	mov	r7, r6
100577f0:	6936      	ldr	r6, [r6, #16]
100577f2:	8938      	ldrh	r0, [r7, #8]
100577f4:	42a0      	cmp	r0, r4
100577f6:	d1f8      	bne.n	100577ea <GAT_att_cmn_disconnection+0xe>
100577f8:	2500      	movs	r5, #0
100577fa:	897a      	ldrh	r2, [r7, #10]
100577fc:	b2e8      	uxtb	r0, r5
100577fe:	2803      	cmp	r0, #3
10057800:	d804      	bhi.n	1005780c <GAT_att_cmn_disconnection+0x30>
10057802:	4621      	mov	r1, r4
10057804:	f000 f82a 	bl	1005785c <GAT_att_cmn_stop_timer>
10057808:	1c6d      	adds	r5, r5, #1
1005780a:	e7f6      	b.n	100577fa <GAT_att_cmn_disconnection+0x1e>
1005780c:	4620      	mov	r0, r4
1005780e:	4611      	mov	r1, r2
10057810:	f000 fa52 	bl	10057cb8 <GAT_att_srv_bearer_close>
10057814:	8979      	ldrh	r1, [r7, #10]
10057816:	4620      	mov	r0, r4
10057818:	f00d fbb9 	bl	10064f8e <GAT_att_clt_bearer_close>
1005781c:	2000      	movs	r0, #0
1005781e:	8138      	strh	r0, [r7, #8]
10057820:	480d      	ldr	r0, [pc, #52]	@ (10057858 <__arm_cp.12_0>)
10057822:	6800      	ldr	r0, [r0, #0]
10057824:	6b42      	ldr	r2, [r0, #52]	@ 0x34
10057826:	42ba      	cmp	r2, r7
10057828:	d005      	beq.n	10057836 <GAT_att_cmn_disconnection+0x5a>
1005782a:	4611      	mov	r1, r2
1005782c:	6912      	ldr	r2, [r2, #16]
1005782e:	42ba      	cmp	r2, r7
10057830:	d1fb      	bne.n	1005782a <GAT_att_cmn_disconnection+0x4e>
10057832:	3110      	adds	r1, #16
10057834:	e001      	b.n	1005783a <GAT_att_cmn_disconnection+0x5e>
10057836:	4601      	mov	r1, r0
10057838:	3134      	adds	r1, #52	@ 0x34
1005783a:	693a      	ldr	r2, [r7, #16]
1005783c:	600a      	str	r2, [r1, #0]
1005783e:	8979      	ldrh	r1, [r7, #10]
10057840:	2904      	cmp	r1, #4
10057842:	d103      	bne.n	1005784c <GAT_att_cmn_disconnection+0x70>
10057844:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
10057846:	6139      	str	r1, [r7, #16]
10057848:	62c7      	str	r7, [r0, #44]	@ 0x2c
1005784a:	e7ce      	b.n	100577ea <GAT_att_cmn_disconnection+0xe>
1005784c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
1005784e:	6139      	str	r1, [r7, #16]
10057850:	6307      	str	r7, [r0, #48]	@ 0x30
10057852:	e7ca      	b.n	100577ea <GAT_att_cmn_disconnection+0xe>
10057854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10057856:	46c0      	nop			@ (mov r8, r8)

10057858 <__arm_cp.12_0>:
10057858:	20002910 	.word	0x20002910

1005785c <GAT_att_cmn_stop_timer>:
1005785c:	b510      	push	{r4, lr}
1005785e:	4604      	mov	r4, r0
10057860:	4608      	mov	r0, r1
10057862:	4611      	mov	r1, r2
10057864:	f000 f858 	bl	10057918 <GAT_att_cmn_get_timer_index>
10057868:	0080      	lsls	r0, r0, #2
1005786a:	1900      	adds	r0, r0, r4
1005786c:	b2c1      	uxtb	r1, r0
1005786e:	4802      	ldr	r0, [pc, #8]	@ (10057878 <__arm_cp.13_0>)
10057870:	6800      	ldr	r0, [r0, #0]
10057872:	f00b fe68 	bl	10063546 <CST_stop>
10057876:	bd10      	pop	{r4, pc}

10057878 <__arm_cp.13_0>:
10057878:	20002910 	.word	0x20002910

1005787c <GAT_att_cmn_send>:
1005787c:	b5b0      	push	{r4, r5, r7, lr}
1005787e:	460c      	mov	r4, r1
10057880:	4605      	mov	r5, r0
10057882:	8848      	ldrh	r0, [r1, #2]
10057884:	1d00      	adds	r0, r0, #4
10057886:	b281      	uxth	r1, r0
10057888:	4620      	mov	r0, r4
1005788a:	f7fe f8f4 	bl	10055a76 <ACL_pkt_resize>
1005788e:	4628      	mov	r0, r5
10057890:	4621      	mov	r1, r4
10057892:	f002 ff29 	bl	1005a6e8 <L2C_send_frame>
10057896:	2800      	cmp	r0, #0
10057898:	d004      	beq.n	100578a4 <GAT_att_cmn_send+0x28>
1005789a:	4620      	mov	r0, r4
1005789c:	f7fe f8e2 	bl	10055a64 <ACL_pkt_release>
100578a0:	2081      	movs	r0, #129	@ 0x81
100578a2:	bdb0      	pop	{r4, r5, r7, pc}
100578a4:	2000      	movs	r0, #0
100578a6:	bdb0      	pop	{r4, r5, r7, pc}

100578a8 <GAT_att_cmn_dscr_flag_check_is_not_set_f>:
100578a8:	8809      	ldrh	r1, [r1, #0]
100578aa:	8880      	ldrh	r0, [r0, #4]
100578ac:	4008      	ands	r0, r1
100578ae:	d000      	beq.n	100578b2 <GAT_att_cmn_dscr_flag_check_is_not_set_f+0xa>
100578b0:	2086      	movs	r0, #134	@ 0x86
100578b2:	4770      	bx	lr

100578b4 <GAT_att_cmn_dscr_flag_set_f>:
100578b4:	8809      	ldrh	r1, [r1, #0]
100578b6:	8882      	ldrh	r2, [r0, #4]
100578b8:	430a      	orrs	r2, r1
100578ba:	8082      	strh	r2, [r0, #4]
100578bc:	2000      	movs	r0, #0
100578be:	4770      	bx	lr

100578c0 <GAT_att_cmn_dscr_flag_clear_f>:
100578c0:	8809      	ldrh	r1, [r1, #0]
100578c2:	8882      	ldrh	r2, [r0, #4]
100578c4:	438a      	bics	r2, r1
100578c6:	8082      	strh	r2, [r0, #4]
100578c8:	2000      	movs	r0, #0
100578ca:	4770      	bx	lr

100578cc <GAT_att_cmn_get_conn_index>:
100578cc:	4907      	ldr	r1, [pc, #28]	@ (100578ec <__arm_cp.22_0>)
100578ce:	6809      	ldr	r1, [r1, #0]
100578d0:	3134      	adds	r1, #52	@ 0x34
100578d2:	6809      	ldr	r1, [r1, #0]
100578d4:	2900      	cmp	r1, #0
100578d6:	d004      	beq.n	100578e2 <GAT_att_cmn_get_conn_index+0x16>
100578d8:	890a      	ldrh	r2, [r1, #8]
100578da:	4282      	cmp	r2, r0
100578dc:	d003      	beq.n	100578e6 <GAT_att_cmn_get_conn_index+0x1a>
100578de:	3110      	adds	r1, #16
100578e0:	e7f7      	b.n	100578d2 <GAT_att_cmn_get_conn_index+0x6>
100578e2:	20ff      	movs	r0, #255	@ 0xff
100578e4:	4770      	bx	lr
100578e6:	7808      	ldrb	r0, [r1, #0]
100578e8:	4770      	bx	lr
100578ea:	46c0      	nop			@ (mov r8, r8)

100578ec <__arm_cp.22_0>:
100578ec:	20002910 	.word	0x20002910

100578f0 <GAT_att_cmn_start_timer>:
100578f0:	b510      	push	{r4, lr}
100578f2:	4604      	mov	r4, r0
100578f4:	4608      	mov	r0, r1
100578f6:	4611      	mov	r1, r2
100578f8:	f000 f80e 	bl	10057918 <GAT_att_cmn_get_timer_index>
100578fc:	0080      	lsls	r0, r0, #2
100578fe:	1900      	adds	r0, r0, r4
10057900:	b2c1      	uxtb	r1, r0
10057902:	4803      	ldr	r0, [pc, #12]	@ (10057910 <__arm_cp.23_0>)
10057904:	6800      	ldr	r0, [r0, #0]
10057906:	2200      	movs	r2, #0
10057908:	4b02      	ldr	r3, [pc, #8]	@ (10057914 <__arm_cp.23_1>)
1005790a:	f00b fe52 	bl	100635b2 <CST_start>
1005790e:	bd10      	pop	{r4, pc}

10057910 <__arm_cp.23_0>:
10057910:	20002910 	.word	0x20002910

10057914 <__arm_cp.23_1>:
10057914:	00007530 	.word	0x00007530

10057918 <GAT_att_cmn_get_timer_index>:
10057918:	4a08      	ldr	r2, [pc, #32]	@ (1005793c <__arm_cp.24_0>)
1005791a:	6812      	ldr	r2, [r2, #0]
1005791c:	3234      	adds	r2, #52	@ 0x34
1005791e:	6812      	ldr	r2, [r2, #0]
10057920:	2a00      	cmp	r2, #0
10057922:	d007      	beq.n	10057934 <GAT_att_cmn_get_timer_index+0x1c>
10057924:	8913      	ldrh	r3, [r2, #8]
10057926:	4283      	cmp	r3, r0
10057928:	d102      	bne.n	10057930 <GAT_att_cmn_get_timer_index+0x18>
1005792a:	8953      	ldrh	r3, [r2, #10]
1005792c:	428b      	cmp	r3, r1
1005792e:	d003      	beq.n	10057938 <GAT_att_cmn_get_timer_index+0x20>
10057930:	3210      	adds	r2, #16
10057932:	e7f4      	b.n	1005791e <GAT_att_cmn_get_timer_index+0x6>
10057934:	20ff      	movs	r0, #255	@ 0xff
10057936:	4770      	bx	lr
10057938:	7850      	ldrb	r0, [r2, #1]
1005793a:	4770      	bx	lr

1005793c <__arm_cp.24_0>:
1005793c:	20002910 	.word	0x20002910

10057940 <GAT_att_cmn_timeout_cb>:
10057940:	b580      	push	{r7, lr}
10057942:	0881      	lsrs	r1, r0, #2
10057944:	480a      	ldr	r0, [pc, #40]	@ (10057970 <__arm_cp.25_0>)
10057946:	6800      	ldr	r0, [r0, #0]
10057948:	3034      	adds	r0, #52	@ 0x34
1005794a:	6800      	ldr	r0, [r0, #0]
1005794c:	2800      	cmp	r0, #0
1005794e:	d00e      	beq.n	1005796e <GAT_att_cmn_timeout_cb+0x2e>
10057950:	7842      	ldrb	r2, [r0, #1]
10057952:	428a      	cmp	r2, r1
10057954:	d001      	beq.n	1005795a <GAT_att_cmn_timeout_cb+0x1a>
10057956:	3010      	adds	r0, #16
10057958:	e7f7      	b.n	1005794a <GAT_att_cmn_timeout_cb+0xa>
1005795a:	2101      	movs	r1, #1
1005795c:	0209      	lsls	r1, r1, #8
1005795e:	8882      	ldrh	r2, [r0, #4]
10057960:	430a      	orrs	r2, r1
10057962:	8082      	strh	r2, [r0, #4]
10057964:	2007      	movs	r0, #7
10057966:	f00b fd7b 	bl	10063460 <tsk_notify_idx>
1005796a:	f7fa fefc 	bl	10052766 <BLE_STACK_ProcessRequest>
1005796e:	bd80      	pop	{r7, pc}

10057970 <__arm_cp.25_0>:
10057970:	20002910 	.word	0x20002910

10057974 <GAT_att_cmn_get_pckt>:
10057974:	b510      	push	{r4, lr}
10057976:	8944      	ldrh	r4, [r0, #10]
10057978:	2c04      	cmp	r4, #4
1005797a:	d000      	beq.n	1005797e <GAT_att_cmn_get_pckt+0xa>
1005797c:	2406      	movs	r4, #6
1005797e:	1861      	adds	r1, r4, r1
10057980:	b28a      	uxth	r2, r1
10057982:	8901      	ldrh	r1, [r0, #8]
10057984:	2000      	movs	r0, #0
10057986:	f7fe f84b 	bl	10055a20 <ACL_pkt_get>
1005798a:	2800      	cmp	r0, #0
1005798c:	d000      	beq.n	10057990 <GAT_att_cmn_get_pckt+0x1c>
1005798e:	8184      	strh	r4, [r0, #12]
10057990:	bd10      	pop	{r4, pc}
	...

10057994 <GAT_att_srv_init>:
10057994:	b510      	push	{r4, lr}
10057996:	4c08      	ldr	r4, [pc, #32]	@ (100579b8 <__arm_cp.0_0>)
10057998:	6820      	ldr	r0, [r4, #0]
1005799a:	3040      	adds	r0, #64	@ 0x40
1005799c:	f00b ff52 	bl	10063844 <ACL_list_init>
100579a0:	6820      	ldr	r0, [r4, #0]
100579a2:	3038      	adds	r0, #56	@ 0x38
100579a4:	f00b ff4e 	bl	10063844 <ACL_list_init>
100579a8:	4804      	ldr	r0, [pc, #16]	@ (100579bc <__arm_cp.0_1>)
100579aa:	4905      	ldr	r1, [pc, #20]	@ (100579c0 <__arm_cp.0_2>)
100579ac:	223c      	movs	r2, #60	@ 0x3c
100579ae:	f7fb fcc1 	bl	10053334 <BLEPLAT_MemCpy>
100579b2:	f001 f8ef 	bl	10058b94 <GAT_srv_init>
100579b6:	bd10      	pop	{r4, pc}

100579b8 <__arm_cp.0_0>:
100579b8:	20002910 	.word	0x20002910

100579bc <__arm_cp.0_1>:
100579bc:	20002914 	.word	0x20002914

100579c0 <__arm_cp.0_2>:
100579c0:	1006a3e0 	.word	0x1006a3e0

100579c4 <GAT_att_srv_rcv>:
100579c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100579c6:	b087      	sub	sp, #28
100579c8:	4604      	mov	r4, r0
100579ca:	8805      	ldrh	r5, [r0, #0]
100579cc:	f002 fd61 	bl	1005a492 <L2C_get_cid_from_basic_packet_header>
100579d0:	4601      	mov	r1, r0
100579d2:	4628      	mov	r0, r5
100579d4:	f7ff fed0 	bl	10057778 <GAT_att_cmn_get_channel_descr_p>
100579d8:	4605      	mov	r5, r0
100579da:	4620      	mov	r0, r4
100579dc:	f000 f858 	bl	10057a90 <GAT_att_cmn_get_opcode>
100579e0:	4606      	mov	r6, r0
100579e2:	f000 f85b 	bl	10057a9c <GAT_att_srv_get_exec_fn_id_by_op>
100579e6:	280f      	cmp	r0, #15
100579e8:	d119      	bne.n	10057a1e <GAT_att_srv_rcv+0x5a>
100579ea:	2e1e      	cmp	r6, #30
100579ec:	d047      	beq.n	10057a7e <GAT_att_srv_rcv+0xba>
100579ee:	2040      	movs	r0, #64	@ 0x40
100579f0:	4030      	ands	r0, r6
100579f2:	d144      	bne.n	10057a7e <GAT_att_srv_rcv+0xba>
100579f4:	2105      	movs	r1, #5
100579f6:	4628      	mov	r0, r5
100579f8:	f7ff ffbc 	bl	10057974 <GAT_att_cmn_get_pckt>
100579fc:	2800      	cmp	r0, #0
100579fe:	d045      	beq.n	10057a8c <GAT_att_srv_rcv+0xc8>
10057a00:	4607      	mov	r7, r0
10057a02:	2100      	movs	r1, #0
10057a04:	2206      	movs	r2, #6
10057a06:	4630      	mov	r0, r6
10057a08:	463b      	mov	r3, r7
10057a0a:	f000 fafd 	bl	10058008 <GAT_att_srv_write_err_packet>
10057a0e:	8968      	ldrh	r0, [r5, #10]
10057a10:	4639      	mov	r1, r7
10057a12:	f7ff ff33 	bl	1005787c <GAT_att_cmn_send>
10057a16:	4607      	mov	r7, r0
10057a18:	2800      	cmp	r0, #0
10057a1a:	d134      	bne.n	10057a86 <GAT_att_srv_rcv+0xc2>
10057a1c:	e02f      	b.n	10057a7e <GAT_att_srv_rcv+0xba>
10057a1e:	9501      	str	r5, [sp, #4]
10057a20:	2500      	movs	r5, #0
10057a22:	2e1e      	cmp	r6, #30
10057a24:	462f      	mov	r7, r5
10057a26:	d016      	beq.n	10057a56 <GAT_att_srv_rcv+0x92>
10057a28:	2040      	movs	r0, #64	@ 0x40
10057a2a:	4006      	ands	r6, r0
10057a2c:	462f      	mov	r7, r5
10057a2e:	d112      	bne.n	10057a56 <GAT_att_srv_rcv+0x92>
10057a30:	9b01      	ldr	r3, [sp, #4]
10057a32:	8898      	ldrh	r0, [r3, #4]
10057a34:	07c0      	lsls	r0, r0, #31
10057a36:	d118      	bne.n	10057a6a <GAT_att_srv_rcv+0xa6>
10057a38:	895a      	ldrh	r2, [r3, #10]
10057a3a:	8919      	ldrh	r1, [r3, #8]
10057a3c:	2600      	movs	r6, #0
10057a3e:	4630      	mov	r0, r6
10057a40:	f7ff ff56 	bl	100578f0 <GAT_att_cmn_start_timer>
10057a44:	4607      	mov	r7, r0
10057a46:	2800      	cmp	r0, #0
10057a48:	d105      	bne.n	10057a56 <GAT_att_srv_rcv+0x92>
10057a4a:	9a01      	ldr	r2, [sp, #4]
10057a4c:	8890      	ldrh	r0, [r2, #4]
10057a4e:	2101      	movs	r1, #1
10057a50:	4301      	orrs	r1, r0
10057a52:	8091      	strh	r1, [r2, #4]
10057a54:	4637      	mov	r7, r6
10057a56:	a802      	add	r0, sp, #8
10057a58:	8005      	strh	r5, [r0, #0]
10057a5a:	9506      	str	r5, [sp, #24]
10057a5c:	9505      	str	r5, [sp, #20]
10057a5e:	9901      	ldr	r1, [sp, #4]
10057a60:	9104      	str	r1, [sp, #16]
10057a62:	9403      	str	r4, [sp, #12]
10057a64:	f000 f854 	bl	10057b10 <GAT_att_srv_run>
10057a68:	e00d      	b.n	10057a86 <GAT_att_srv_rcv+0xc2>
10057a6a:	3308      	adds	r3, #8
10057a6c:	2042      	movs	r0, #66	@ 0x42
10057a6e:	2103      	movs	r1, #3
10057a70:	2202      	movs	r2, #2
10057a72:	f00d f8eb 	bl	10064c4c <aci_hal_fw_error_event_push_noinline>
10057a76:	2800      	cmp	r0, #0
10057a78:	d001      	beq.n	10057a7e <GAT_att_srv_rcv+0xba>
10057a7a:	2784      	movs	r7, #132	@ 0x84
10057a7c:	e003      	b.n	10057a86 <GAT_att_srv_rcv+0xc2>
10057a7e:	4620      	mov	r0, r4
10057a80:	f7fd fff0 	bl	10055a64 <ACL_pkt_release>
10057a84:	2700      	movs	r7, #0
10057a86:	4638      	mov	r0, r7
10057a88:	b007      	add	sp, #28
10057a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057a8c:	2788      	movs	r7, #136	@ 0x88
10057a8e:	e7fa      	b.n	10057a86 <GAT_att_srv_rcv+0xc2>

10057a90 <GAT_att_cmn_get_opcode>:
10057a90:	b580      	push	{r7, lr}
10057a92:	8981      	ldrh	r1, [r0, #12]
10057a94:	f001 f84d 	bl	10058b32 <ACL_pkt_read_8b>
10057a98:	bd80      	pop	{r7, pc}
	...

10057a9c <GAT_att_srv_get_exec_fn_id_by_op>:
10057a9c:	1e81      	subs	r1, r0, #2
10057a9e:	291e      	cmp	r1, #30
10057aa0:	d816      	bhi.n	10057ad0 <GAT_att_srv_get_exec_fn_id_by_op+0x34>
10057aa2:	2000      	movs	r0, #0
10057aa4:	4479      	add	r1, pc
10057aa6:	7909      	ldrb	r1, [r1, #4]
10057aa8:	0049      	lsls	r1, r1, #1
10057aaa:	448f      	add	pc, r1
10057aac:	170f1718 	.word	0x170f1718
10057ab0:	171b1719 	.word	0x171b1719
10057ab4:	171f171d 	.word	0x171f171d
10057ab8:	17231721 	.word	0x17231721
10057abc:	17171725 	.word	0x17171725
10057ac0:	17291727 	.word	0x17291727
10057ac4:	17171717 	.word	0x17171717
10057ac8:	002d172b 	.word	0x002d172b
10057acc:	2001      	movs	r0, #1
10057ace:	4770      	bx	lr
10057ad0:	2852      	cmp	r0, #82	@ 0x52
10057ad2:	d01b      	beq.n	10057b0c <GAT_att_srv_get_exec_fn_id_by_op+0x70>
10057ad4:	28d2      	cmp	r0, #210	@ 0xd2
10057ad6:	d101      	bne.n	10057adc <GAT_att_srv_get_exec_fn_id_by_op+0x40>
10057ad8:	200a      	movs	r0, #10
10057ada:	4770      	bx	lr
10057adc:	200f      	movs	r0, #15
10057ade:	4770      	bx	lr
10057ae0:	2002      	movs	r0, #2
10057ae2:	4770      	bx	lr
10057ae4:	2003      	movs	r0, #3
10057ae6:	4770      	bx	lr
10057ae8:	2004      	movs	r0, #4
10057aea:	4770      	bx	lr
10057aec:	2005      	movs	r0, #5
10057aee:	4770      	bx	lr
10057af0:	2006      	movs	r0, #6
10057af2:	4770      	bx	lr
10057af4:	2007      	movs	r0, #7
10057af6:	4770      	bx	lr
10057af8:	2008      	movs	r0, #8
10057afa:	4770      	bx	lr
10057afc:	200b      	movs	r0, #11
10057afe:	4770      	bx	lr
10057b00:	200c      	movs	r0, #12
10057b02:	4770      	bx	lr
10057b04:	200d      	movs	r0, #13
10057b06:	4770      	bx	lr
10057b08:	200e      	movs	r0, #14
10057b0a:	4770      	bx	lr
10057b0c:	2009      	movs	r0, #9
10057b0e:	4770      	bx	lr

10057b10 <GAT_att_srv_run>:
10057b10:	b5f0      	push	{r4, r5, r6, r7, lr}
10057b12:	b085      	sub	sp, #20
10057b14:	4604      	mov	r4, r0
10057b16:	7800      	ldrb	r0, [r0, #0]
10057b18:	2800      	cmp	r0, #0
10057b1a:	d107      	bne.n	10057b2c <GAT_att_srv_run+0x1c>
10057b1c:	6860      	ldr	r0, [r4, #4]
10057b1e:	f7ff ffb7 	bl	10057a90 <GAT_att_cmn_get_opcode>
10057b22:	7060      	strb	r0, [r4, #1]
10057b24:	68a5      	ldr	r5, [r4, #8]
10057b26:	68e8      	ldr	r0, [r5, #12]
10057b28:	2800      	cmp	r0, #0
10057b2a:	d03c      	beq.n	10057ba6 <GAT_att_srv_run+0x96>
10057b2c:	7865      	ldrb	r5, [r4, #1]
10057b2e:	4628      	mov	r0, r5
10057b30:	f7ff ffb4 	bl	10057a9c <GAT_att_srv_get_exec_fn_id_by_op>
10057b34:	280e      	cmp	r0, #14
10057b36:	d808      	bhi.n	10057b4a <GAT_att_srv_run+0x3a>
10057b38:	0080      	lsls	r0, r0, #2
10057b3a:	495b      	ldr	r1, [pc, #364]	@ (10057ca8 <__arm_cp.4_3>)
10057b3c:	5809      	ldr	r1, [r1, r0]
10057b3e:	2900      	cmp	r1, #0
10057b40:	d003      	beq.n	10057b4a <GAT_att_srv_run+0x3a>
10057b42:	4620      	mov	r0, r4
10057b44:	4788      	blx	r1
10057b46:	4607      	mov	r7, r0
10057b48:	e007      	b.n	10057b5a <GAT_att_srv_run+0x4a>
10057b4a:	68a0      	ldr	r0, [r4, #8]
10057b4c:	68c3      	ldr	r3, [r0, #12]
10057b4e:	2100      	movs	r1, #0
10057b50:	2206      	movs	r2, #6
10057b52:	4628      	mov	r0, r5
10057b54:	f000 fa58 	bl	10058008 <GAT_att_srv_write_err_packet>
10057b58:	2786      	movs	r7, #134	@ 0x86
10057b5a:	6861      	ldr	r1, [r4, #4]
10057b5c:	2900      	cmp	r1, #0
10057b5e:	d019      	beq.n	10057b94 <GAT_att_srv_run+0x84>
10057b60:	2f88      	cmp	r7, #136	@ 0x88
10057b62:	d003      	beq.n	10057b6c <GAT_att_srv_run+0x5c>
10057b64:	2f84      	cmp	r7, #132	@ 0x84
10057b66:	d00c      	beq.n	10057b82 <GAT_att_srv_run+0x72>
10057b68:	2f07      	cmp	r7, #7
10057b6a:	d110      	bne.n	10057b8e <GAT_att_srv_run+0x7e>
10057b6c:	484f      	ldr	r0, [pc, #316]	@ (10057cac <__arm_cp.4_4>)
10057b6e:	6800      	ldr	r0, [r0, #0]
10057b70:	3040      	adds	r0, #64	@ 0x40
10057b72:	f00b fe6b 	bl	1006384c <ACL_list_insert_tail>
10057b76:	2009      	movs	r0, #9
10057b78:	f00b fc72 	bl	10063460 <tsk_notify_idx>
10057b7c:	f7fa fdf3 	bl	10052766 <BLE_STACK_ProcessRequest>
10057b80:	e008      	b.n	10057b94 <GAT_att_srv_run+0x84>
10057b82:	484a      	ldr	r0, [pc, #296]	@ (10057cac <__arm_cp.4_4>)
10057b84:	6800      	ldr	r0, [r0, #0]
10057b86:	3038      	adds	r0, #56	@ 0x38
10057b88:	f00b fe60 	bl	1006384c <ACL_list_insert_tail>
10057b8c:	e009      	b.n	10057ba2 <GAT_att_srv_run+0x92>
10057b8e:	4608      	mov	r0, r1
10057b90:	f7fd ff68 	bl	10055a64 <ACL_pkt_release>
10057b94:	2f86      	cmp	r7, #134	@ 0x86
10057b96:	d001      	beq.n	10057b9c <GAT_att_srv_run+0x8c>
10057b98:	2f00      	cmp	r7, #0
10057b9a:	d102      	bne.n	10057ba2 <GAT_att_srv_run+0x92>
10057b9c:	68a0      	ldr	r0, [r4, #8]
10057b9e:	f000 fa47 	bl	10058030 <GAT_att_srv_send_response>
10057ba2:	b005      	add	sp, #20
10057ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057ba6:	6867      	ldr	r7, [r4, #4]
10057ba8:	4638      	mov	r0, r7
10057baa:	f7ff ff71 	bl	10057a90 <GAT_att_cmn_get_opcode>
10057bae:	4606      	mov	r6, r0
10057bb0:	f7ff ff74 	bl	10057a9c <GAT_att_srv_get_exec_fn_id_by_op>
10057bb4:	8879      	ldrh	r1, [r7, #2]
10057bb6:	88ea      	ldrh	r2, [r5, #6]
10057bb8:	2304      	movs	r3, #4
10057bba:	9302      	str	r3, [sp, #8]
10057bbc:	2300      	movs	r3, #0
10057bbe:	4291      	cmp	r1, r2
10057bc0:	d83e      	bhi.n	10057c40 <GAT_att_srv_run+0x130>
10057bc2:	280e      	cmp	r0, #14
10057bc4:	d83c      	bhi.n	10057c40 <GAT_att_srv_run+0x130>
10057bc6:	9301      	str	r3, [sp, #4]
10057bc8:	0042      	lsls	r2, r0, #1
10057bca:	4b34      	ldr	r3, [pc, #208]	@ (10057c9c <__arm_cp.4_0>)
10057bcc:	5a9a      	ldrh	r2, [r3, r2]
10057bce:	4b34      	ldr	r3, [pc, #208]	@ (10057ca0 <__arm_cp.4_1>)
10057bd0:	40c3      	lsrs	r3, r0
10057bd2:	07db      	lsls	r3, r3, #31
10057bd4:	d105      	bne.n	10057be2 <GAT_att_srv_run+0xd2>
10057bd6:	2380      	movs	r3, #128	@ 0x80
10057bd8:	439a      	bics	r2, r3
10057bda:	4291      	cmp	r1, r2
10057bdc:	9b01      	ldr	r3, [sp, #4]
10057bde:	d003      	beq.n	10057be8 <GAT_att_srv_run+0xd8>
10057be0:	e02e      	b.n	10057c40 <GAT_att_srv_run+0x130>
10057be2:	4291      	cmp	r1, r2
10057be4:	9b01      	ldr	r3, [sp, #4]
10057be6:	d32b      	bcc.n	10057c40 <GAT_att_srv_run+0x130>
10057be8:	1e41      	subs	r1, r0, #1
10057bea:	2903      	cmp	r1, #3
10057bec:	d301      	bcc.n	10057bf2 <GAT_att_srv_run+0xe2>
10057bee:	2807      	cmp	r0, #7
10057bf0:	d10d      	bne.n	10057c0e <GAT_att_srv_run+0xfe>
10057bf2:	a904      	add	r1, sp, #16
10057bf4:	aa03      	add	r2, sp, #12
10057bf6:	9202      	str	r2, [sp, #8]
10057bf8:	4638      	mov	r0, r7
10057bfa:	460f      	mov	r7, r1
10057bfc:	f000 ff49 	bl	10058a92 <GAT_att_srv_get_handle_range>
10057c00:	883b      	ldrh	r3, [r7, #0]
10057c02:	9802      	ldr	r0, [sp, #8]
10057c04:	8800      	ldrh	r0, [r0, #0]
10057c06:	4283      	cmp	r3, r0
10057c08:	d818      	bhi.n	10057c3c <GAT_att_srv_run+0x12c>
10057c0a:	2b00      	cmp	r3, #0
10057c0c:	d016      	beq.n	10057c3c <GAT_att_srv_run+0x12c>
10057c0e:	6866      	ldr	r6, [r4, #4]
10057c10:	4630      	mov	r0, r6
10057c12:	f7ff ff3d 	bl	10057a90 <GAT_att_cmn_get_opcode>
10057c16:	4607      	mov	r7, r0
10057c18:	8835      	ldrh	r5, [r6, #0]
10057c1a:	4630      	mov	r0, r6
10057c1c:	f002 fc39 	bl	1005a492 <L2C_get_cid_from_basic_packet_header>
10057c20:	4601      	mov	r1, r0
10057c22:	4628      	mov	r0, r5
10057c24:	f7ff fda8 	bl	10057778 <GAT_att_cmn_get_channel_descr_p>
10057c28:	4605      	mov	r5, r0
10057c2a:	2f1e      	cmp	r7, #30
10057c2c:	d01d      	beq.n	10057c6a <GAT_att_srv_run+0x15a>
10057c2e:	2040      	movs	r0, #64	@ 0x40
10057c30:	4038      	ands	r0, r7
10057c32:	d11a      	bne.n	10057c6a <GAT_att_srv_run+0x15a>
10057c34:	2f16      	cmp	r7, #22
10057c36:	d11b      	bne.n	10057c70 <GAT_att_srv_run+0x160>
10057c38:	8871      	ldrh	r1, [r6, #2]
10057c3a:	e026      	b.n	10057c8a <GAT_att_srv_run+0x17a>
10057c3c:	2001      	movs	r0, #1
10057c3e:	9002      	str	r0, [sp, #8]
10057c40:	2786      	movs	r7, #134	@ 0x86
10057c42:	2e1e      	cmp	r6, #30
10057c44:	d089      	beq.n	10057b5a <GAT_att_srv_run+0x4a>
10057c46:	2040      	movs	r0, #64	@ 0x40
10057c48:	4030      	ands	r0, r6
10057c4a:	d186      	bne.n	10057b5a <GAT_att_srv_run+0x4a>
10057c4c:	9301      	str	r3, [sp, #4]
10057c4e:	2105      	movs	r1, #5
10057c50:	4628      	mov	r0, r5
10057c52:	f7ff fe8f 	bl	10057974 <GAT_att_cmn_get_pckt>
10057c56:	60e8      	str	r0, [r5, #12]
10057c58:	2800      	cmp	r0, #0
10057c5a:	d01d      	beq.n	10057c98 <GAT_att_srv_run+0x188>
10057c5c:	4603      	mov	r3, r0
10057c5e:	4630      	mov	r0, r6
10057c60:	9901      	ldr	r1, [sp, #4]
10057c62:	9a02      	ldr	r2, [sp, #8]
10057c64:	f000 f9d0 	bl	10058008 <GAT_att_srv_write_err_packet>
10057c68:	e777      	b.n	10057b5a <GAT_att_srv_run+0x4a>
10057c6a:	2000      	movs	r0, #0
10057c6c:	60e8      	str	r0, [r5, #12]
10057c6e:	e75d      	b.n	10057b2c <GAT_att_srv_run+0x1c>
10057c70:	4638      	mov	r0, r7
10057c72:	f7ff ff13 	bl	10057a9c <GAT_att_srv_get_exec_fn_id_by_op>
10057c76:	280e      	cmp	r0, #14
10057c78:	d900      	bls.n	10057c7c <GAT_att_srv_run+0x16c>
10057c7a:	e76d      	b.n	10057b58 <GAT_att_srv_run+0x48>
10057c7c:	0040      	lsls	r0, r0, #1
10057c7e:	4909      	ldr	r1, [pc, #36]	@ (10057ca4 <__arm_cp.4_2>)
10057c80:	5a09      	ldrh	r1, [r1, r0]
10057c82:	88e8      	ldrh	r0, [r5, #6]
10057c84:	4281      	cmp	r1, r0
10057c86:	d300      	bcc.n	10057c8a <GAT_att_srv_run+0x17a>
10057c88:	4601      	mov	r1, r0
10057c8a:	4628      	mov	r0, r5
10057c8c:	f7ff fe72 	bl	10057974 <GAT_att_cmn_get_pckt>
10057c90:	60e8      	str	r0, [r5, #12]
10057c92:	2800      	cmp	r0, #0
10057c94:	d000      	beq.n	10057c98 <GAT_att_srv_run+0x188>
10057c96:	e749      	b.n	10057b2c <GAT_att_srv_run+0x1c>
10057c98:	2788      	movs	r7, #136	@ 0x88
10057c9a:	e75e      	b.n	10057b5a <GAT_att_srv_run+0x4a>

10057c9c <__arm_cp.4_0>:
10057c9c:	1006a41c 	.word	0x1006a41c

10057ca0 <__arm_cp.4_1>:
10057ca0:	00004fcc 	.word	0x00004fcc

10057ca4 <__arm_cp.4_2>:
10057ca4:	1006a43a 	.word	0x1006a43a

10057ca8 <__arm_cp.4_3>:
10057ca8:	20002914 	.word	0x20002914

10057cac <__arm_cp.4_4>:
10057cac:	20002910 	.word	0x20002910

10057cb0 <GAT_att_srv_connection>:
10057cb0:	b580      	push	{r7, lr}
10057cb2:	f000 ff81 	bl	10058bb8 <GAT_srv_connection>
10057cb6:	bd80      	pop	{r7, pc}

10057cb8 <GAT_att_srv_bearer_close>:
10057cb8:	b570      	push	{r4, r5, r6, lr}
10057cba:	460c      	mov	r4, r1
10057cbc:	4605      	mov	r5, r0
10057cbe:	f001 f821 	bl	10058d04 <GAT_srv_bearer_close>
10057cc2:	4e07      	ldr	r6, [pc, #28]	@ (10057ce0 <__arm_cp.6_0>)
10057cc4:	6832      	ldr	r2, [r6, #0]
10057cc6:	3240      	adds	r2, #64	@ 0x40
10057cc8:	4628      	mov	r0, r5
10057cca:	4621      	mov	r1, r4
10057ccc:	f000 f80a 	bl	10057ce4 <GAT_att_srv_flush_rx_pckts>
10057cd0:	6832      	ldr	r2, [r6, #0]
10057cd2:	3238      	adds	r2, #56	@ 0x38
10057cd4:	4628      	mov	r0, r5
10057cd6:	4621      	mov	r1, r4
10057cd8:	f000 f804 	bl	10057ce4 <GAT_att_srv_flush_rx_pckts>
10057cdc:	bd70      	pop	{r4, r5, r6, pc}
10057cde:	46c0      	nop			@ (mov r8, r8)

10057ce0 <__arm_cp.6_0>:
10057ce0:	20002910 	.word	0x20002910

10057ce4 <GAT_att_srv_flush_rx_pckts>:
10057ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10057ce6:	460d      	mov	r5, r1
10057ce8:	4606      	mov	r6, r0
10057cea:	9200      	str	r2, [sp, #0]
10057cec:	6814      	ldr	r4, [r2, #0]
10057cee:	2c00      	cmp	r4, #0
10057cf0:	d011      	beq.n	10057d16 <GAT_att_srv_flush_rx_pckts+0x32>
10057cf2:	4627      	mov	r7, r4
10057cf4:	69e4      	ldr	r4, [r4, #28]
10057cf6:	8838      	ldrh	r0, [r7, #0]
10057cf8:	42b0      	cmp	r0, r6
10057cfa:	d1f8      	bne.n	10057cee <GAT_att_srv_flush_rx_pckts+0xa>
10057cfc:	4638      	mov	r0, r7
10057cfe:	f002 fbc8 	bl	1005a492 <L2C_get_cid_from_basic_packet_header>
10057d02:	42a8      	cmp	r0, r5
10057d04:	d1f3      	bne.n	10057cee <GAT_att_srv_flush_rx_pckts+0xa>
10057d06:	9800      	ldr	r0, [sp, #0]
10057d08:	4639      	mov	r1, r7
10057d0a:	f00b fdaf 	bl	1006386c <ACL_list_remove>
10057d0e:	4638      	mov	r0, r7
10057d10:	f7fd fea8 	bl	10055a64 <ACL_pkt_release>
10057d14:	e7eb      	b.n	10057cee <GAT_att_srv_flush_rx_pckts+0xa>
10057d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10057d18 <GAT_att_srv_process_rx_pckt_tsk>:
10057d18:	b5f0      	push	{r4, r5, r6, r7, lr}
10057d1a:	b085      	sub	sp, #20
10057d1c:	4f0f      	ldr	r7, [pc, #60]	@ (10057d5c <__arm_cp.9_0>)
10057d1e:	6838      	ldr	r0, [r7, #0]
10057d20:	3040      	adds	r0, #64	@ 0x40
10057d22:	f00b fdc3 	bl	100638ac <ACL_list_get_pckt_count>
10057d26:	4604      	mov	r4, r0
10057d28:	0420      	lsls	r0, r4, #16
10057d2a:	d014      	beq.n	10057d56 <GAT_att_srv_process_rx_pckt_tsk+0x3e>
10057d2c:	466d      	mov	r5, sp
10057d2e:	2000      	movs	r0, #0
10057d30:	7028      	strb	r0, [r5, #0]
10057d32:	6838      	ldr	r0, [r7, #0]
10057d34:	3040      	adds	r0, #64	@ 0x40
10057d36:	f00b fdaf 	bl	10063898 <ACL_list_remove_head>
10057d3a:	9001      	str	r0, [sp, #4]
10057d3c:	8806      	ldrh	r6, [r0, #0]
10057d3e:	f002 fba8 	bl	1005a492 <L2C_get_cid_from_basic_packet_header>
10057d42:	4601      	mov	r1, r0
10057d44:	4630      	mov	r0, r6
10057d46:	f7ff fd17 	bl	10057778 <GAT_att_cmn_get_channel_descr_p>
10057d4a:	9002      	str	r0, [sp, #8]
10057d4c:	4628      	mov	r0, r5
10057d4e:	f7ff fedf 	bl	10057b10 <GAT_att_srv_run>
10057d52:	1e64      	subs	r4, r4, #1
10057d54:	e7e8      	b.n	10057d28 <GAT_att_srv_process_rx_pckt_tsk+0x10>
10057d56:	b005      	add	sp, #20
10057d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057d5a:	46c0      	nop			@ (mov r8, r8)

10057d5c <__arm_cp.9_0>:
10057d5c:	20002910 	.word	0x20002910

10057d60 <GAT_att_srv_hvtx>:
10057d60:	b5f0      	push	{r4, r5, r6, r7, lr}
10057d62:	b08b      	sub	sp, #44	@ 0x2c
10057d64:	930a      	str	r3, [sp, #40]	@ 0x28
10057d66:	4614      	mov	r4, r2
10057d68:	460d      	mov	r5, r1
10057d6a:	4607      	mov	r7, r0
10057d6c:	f7ff fd04 	bl	10057778 <GAT_att_cmn_get_channel_descr_p>
10057d70:	2800      	cmp	r0, #0
10057d72:	d011      	beq.n	10057d98 <GAT_att_srv_hvtx+0x38>
10057d74:	4606      	mov	r6, r0
10057d76:	9704      	str	r7, [sp, #16]
10057d78:	8880      	ldrh	r0, [r0, #4]
10057d7a:	270c      	movs	r7, #12
10057d7c:	0741      	lsls	r1, r0, #29
10057d7e:	d47f      	bmi.n	10057e80 <GAT_att_srv_hvtx+0x120>
10057d80:	2c02      	cmp	r4, #2
10057d82:	d101      	bne.n	10057d88 <GAT_att_srv_hvtx+0x28>
10057d84:	0780      	lsls	r0, r0, #30
10057d86:	d47b      	bmi.n	10057e80 <GAT_att_srv_hvtx+0x120>
10057d88:	9502      	str	r5, [sp, #8]
10057d8a:	9403      	str	r4, [sp, #12]
10057d8c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
10057d8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10057d90:	2b01      	cmp	r3, #1
10057d92:	d803      	bhi.n	10057d9c <GAT_att_srv_hvtx+0x3c>
10057d94:	2503      	movs	r5, #3
10057d96:	e003      	b.n	10057da0 <GAT_att_srv_hvtx+0x40>
10057d98:	2712      	movs	r7, #18
10057d9a:	e071      	b.n	10057e80 <GAT_att_srv_hvtx+0x120>
10057d9c:	0098      	lsls	r0, r3, #2
10057d9e:	1c45      	adds	r5, r0, #1
10057da0:	1ca0      	adds	r0, r4, #2
10057da2:	4619      	mov	r1, r3
10057da4:	2900      	cmp	r1, #0
10057da6:	d004      	beq.n	10057db2 <GAT_att_srv_hvtx+0x52>
10057da8:	8802      	ldrh	r2, [r0, #0]
10057daa:	1955      	adds	r5, r2, r5
10057dac:	3008      	adds	r0, #8
10057dae:	1e49      	subs	r1, r1, #1
10057db0:	e7f8      	b.n	10057da4 <GAT_att_srv_hvtx+0x44>
10057db2:	88f0      	ldrh	r0, [r6, #6]
10057db4:	2b02      	cmp	r3, #2
10057db6:	d302      	bcc.n	10057dbe <GAT_att_srv_hvtx+0x5e>
10057db8:	b2a9      	uxth	r1, r5
10057dba:	4281      	cmp	r1, r0
10057dbc:	d860      	bhi.n	10057e80 <GAT_att_srv_hvtx+0x120>
10057dbe:	b2a9      	uxth	r1, r5
10057dc0:	4281      	cmp	r1, r0
10057dc2:	d300      	bcc.n	10057dc6 <GAT_att_srv_hvtx+0x66>
10057dc4:	4605      	mov	r5, r0
10057dc6:	b2a9      	uxth	r1, r5
10057dc8:	4630      	mov	r0, r6
10057dca:	9106      	str	r1, [sp, #24]
10057dcc:	f7ff fdd2 	bl	10057974 <GAT_att_cmn_get_pckt>
10057dd0:	2800      	cmp	r0, #0
10057dd2:	d00e      	beq.n	10057df2 <GAT_att_srv_hvtx+0x92>
10057dd4:	4607      	mov	r7, r0
10057dd6:	9803      	ldr	r0, [sp, #12]
10057dd8:	2802      	cmp	r0, #2
10057dda:	9707      	str	r7, [sp, #28]
10057ddc:	9601      	str	r6, [sp, #4]
10057dde:	d10f      	bne.n	10057e00 <GAT_att_srv_hvtx+0xa0>
10057de0:	89b9      	ldrh	r1, [r7, #12]
10057de2:	221d      	movs	r2, #29
10057de4:	4638      	mov	r0, r7
10057de6:	f000 f889 	bl	10057efc <ACL_pkt_write_8b>
10057dea:	980a      	ldr	r0, [sp, #40]	@ 0x28
10057dec:	2801      	cmp	r0, #1
10057dee:	d00f      	beq.n	10057e10 <GAT_att_srv_hvtx+0xb0>
10057df0:	e04e      	b.n	10057e90 <GAT_att_srv_hvtx+0x130>
10057df2:	2008      	movs	r0, #8
10057df4:	f00b fb34 	bl	10063460 <tsk_notify_idx>
10057df8:	f7fa fcb5 	bl	10052766 <BLE_STACK_ProcessRequest>
10057dfc:	2788      	movs	r7, #136	@ 0x88
10057dfe:	e03f      	b.n	10057e80 <GAT_att_srv_hvtx+0x120>
10057e00:	89b9      	ldrh	r1, [r7, #12]
10057e02:	980a      	ldr	r0, [sp, #40]	@ 0x28
10057e04:	2801      	cmp	r0, #1
10057e06:	d13e      	bne.n	10057e86 <GAT_att_srv_hvtx+0x126>
10057e08:	221b      	movs	r2, #27
10057e0a:	4638      	mov	r0, r7
10057e0c:	f000 f876 	bl	10057efc <ACL_pkt_write_8b>
10057e10:	8822      	ldrh	r2, [r4, #0]
10057e12:	89b8      	ldrh	r0, [r7, #12]
10057e14:	1c40      	adds	r0, r0, #1
10057e16:	b281      	uxth	r1, r0
10057e18:	4638      	mov	r0, r7
10057e1a:	f7fd fe58 	bl	10055ace <ACL_pkt_write_16b>
10057e1e:	6863      	ldr	r3, [r4, #4]
10057e20:	89b8      	ldrh	r0, [r7, #12]
10057e22:	1ee9      	subs	r1, r5, #3
10057e24:	b28a      	uxth	r2, r1
10057e26:	1cc0      	adds	r0, r0, #3
10057e28:	b281      	uxth	r1, r0
10057e2a:	4638      	mov	r0, r7
10057e2c:	f7fd fe58 	bl	10055ae0 <ACL_pkt_write>
10057e30:	9807      	ldr	r0, [sp, #28]
10057e32:	8045      	strh	r5, [r0, #2]
10057e34:	9d03      	ldr	r5, [sp, #12]
10057e36:	2d02      	cmp	r5, #2
10057e38:	d10c      	bne.n	10057e54 <GAT_att_srv_hvtx+0xf4>
10057e3a:	2001      	movs	r0, #1
10057e3c:	9904      	ldr	r1, [sp, #16]
10057e3e:	9a02      	ldr	r2, [sp, #8]
10057e40:	f7ff fd56 	bl	100578f0 <GAT_att_cmn_start_timer>
10057e44:	2800      	cmp	r0, #0
10057e46:	9c01      	ldr	r4, [sp, #4]
10057e48:	d00c      	beq.n	10057e64 <GAT_att_srv_hvtx+0x104>
10057e4a:	4607      	mov	r7, r0
10057e4c:	9807      	ldr	r0, [sp, #28]
10057e4e:	f7fd fe09 	bl	10055a64 <ACL_pkt_release>
10057e52:	e015      	b.n	10057e80 <GAT_att_srv_hvtx+0x120>
10057e54:	07e8      	lsls	r0, r5, #31
10057e56:	9c01      	ldr	r4, [sp, #4]
10057e58:	d004      	beq.n	10057e64 <GAT_att_srv_hvtx+0x104>
10057e5a:	9a07      	ldr	r2, [sp, #28]
10057e5c:	7a10      	ldrb	r0, [r2, #8]
10057e5e:	2108      	movs	r1, #8
10057e60:	4301      	orrs	r1, r0
10057e62:	7211      	strb	r1, [r2, #8]
10057e64:	9802      	ldr	r0, [sp, #8]
10057e66:	9907      	ldr	r1, [sp, #28]
10057e68:	f7ff fd08 	bl	1005787c <GAT_att_cmn_send>
10057e6c:	4607      	mov	r7, r0
10057e6e:	2d02      	cmp	r5, #2
10057e70:	d106      	bne.n	10057e80 <GAT_att_srv_hvtx+0x120>
10057e72:	2f00      	cmp	r7, #0
10057e74:	d104      	bne.n	10057e80 <GAT_att_srv_hvtx+0x120>
10057e76:	88a0      	ldrh	r0, [r4, #4]
10057e78:	2102      	movs	r1, #2
10057e7a:	4301      	orrs	r1, r0
10057e7c:	80a1      	strh	r1, [r4, #4]
10057e7e:	2700      	movs	r7, #0
10057e80:	4638      	mov	r0, r7
10057e82:	b00b      	add	sp, #44	@ 0x2c
10057e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057e86:	2223      	movs	r2, #35	@ 0x23
10057e88:	4638      	mov	r0, r7
10057e8a:	f000 f837 	bl	10057efc <ACL_pkt_write_8b>
10057e8e:	980a      	ldr	r0, [sp, #40]	@ 0x28
10057e90:	1ca7      	adds	r7, r4, #2
10057e92:	2101      	movs	r1, #1
10057e94:	9505      	str	r5, [sp, #20]
10057e96:	2800      	cmp	r0, #0
10057e98:	d0ca      	beq.n	10057e30 <GAT_att_srv_hvtx+0xd0>
10057e9a:	900a      	str	r0, [sp, #40]	@ 0x28
10057e9c:	9d07      	ldr	r5, [sp, #28]
10057e9e:	89a8      	ldrh	r0, [r5, #12]
10057ea0:	1840      	adds	r0, r0, r1
10057ea2:	9108      	str	r1, [sp, #32]
10057ea4:	b281      	uxth	r1, r0
10057ea6:	1ebb      	subs	r3, r7, #2
10057ea8:	2402      	movs	r4, #2
10057eaa:	4628      	mov	r0, r5
10057eac:	4622      	mov	r2, r4
10057eae:	4e12      	ldr	r6, [pc, #72]	@ (10057ef8 <__arm_cp.10_0>)
10057eb0:	47b0      	blx	r6
10057eb2:	89a8      	ldrh	r0, [r5, #12]
10057eb4:	9e08      	ldr	r6, [sp, #32]
10057eb6:	1830      	adds	r0, r6, r0
10057eb8:	1c80      	adds	r0, r0, #2
10057eba:	b281      	uxth	r1, r0
10057ebc:	4628      	mov	r0, r5
10057ebe:	9409      	str	r4, [sp, #36]	@ 0x24
10057ec0:	4622      	mov	r2, r4
10057ec2:	463b      	mov	r3, r7
10057ec4:	4c0c      	ldr	r4, [pc, #48]	@ (10057ef8 <__arm_cp.10_0>)
10057ec6:	47a0      	blx	r4
10057ec8:	1d31      	adds	r1, r6, #4
10057eca:	89a8      	ldrh	r0, [r5, #12]
10057ecc:	1840      	adds	r0, r0, r1
10057ece:	b28e      	uxth	r6, r1
10057ed0:	9906      	ldr	r1, [sp, #24]
10057ed2:	1b8a      	subs	r2, r1, r6
10057ed4:	8839      	ldrh	r1, [r7, #0]
10057ed6:	428a      	cmp	r2, r1
10057ed8:	db00      	blt.n	10057edc <GAT_att_srv_hvtx+0x17c>
10057eda:	460a      	mov	r2, r1
10057edc:	9909      	ldr	r1, [sp, #36]	@ 0x24
10057ede:	587b      	ldr	r3, [r7, r1]
10057ee0:	b281      	uxth	r1, r0
10057ee2:	b294      	uxth	r4, r2
10057ee4:	4628      	mov	r0, r5
10057ee6:	4622      	mov	r2, r4
10057ee8:	4d03      	ldr	r5, [pc, #12]	@ (10057ef8 <__arm_cp.10_0>)
10057eea:	47a8      	blx	r5
10057eec:	19a1      	adds	r1, r4, r6
10057eee:	3708      	adds	r7, #8
10057ef0:	980a      	ldr	r0, [sp, #40]	@ 0x28
10057ef2:	1e40      	subs	r0, r0, #1
10057ef4:	9d05      	ldr	r5, [sp, #20]
10057ef6:	e7ce      	b.n	10057e96 <GAT_att_srv_hvtx+0x136>

10057ef8 <__arm_cp.10_0>:
10057ef8:	10055ae1 	.word	0x10055ae1

10057efc <ACL_pkt_write_8b>:
10057efc:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10057efe:	4614      	mov	r4, r2
10057f00:	6840      	ldr	r0, [r0, #4]
10057f02:	2920      	cmp	r1, #32
10057f04:	d304      	bcc.n	10057f10 <ACL_pkt_write_8b+0x14>
10057f06:	ad01      	add	r5, sp, #4
10057f08:	462a      	mov	r2, r5
10057f0a:	f009 fd72 	bl	100619f2 <Mem_Buff_get_buff_off>
10057f0e:	8829      	ldrh	r1, [r5, #0]
10057f10:	1840      	adds	r0, r0, r1
10057f12:	7104      	strb	r4, [r0, #4]
10057f14:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10057f16 <GAT_att_srv_extract_write_packet_data>:
10057f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10057f18:	461d      	mov	r5, r3
10057f1a:	4614      	mov	r4, r2
10057f1c:	460f      	mov	r7, r1
10057f1e:	4606      	mov	r6, r0
10057f20:	f7ff fdb6 	bl	10057a90 <GAT_att_cmn_get_opcode>
10057f24:	210e      	movs	r1, #14
10057f26:	43c9      	mvns	r1, r1
10057f28:	28d2      	cmp	r0, #210	@ 0xd2
10057f2a:	d000      	beq.n	10057f2e <GAT_att_srv_extract_write_packet_data+0x18>
10057f2c:	310c      	adds	r1, #12
10057f2e:	8870      	ldrh	r0, [r6, #2]
10057f30:	1808      	adds	r0, r1, r0
10057f32:	b282      	uxth	r2, r0
10057f34:	9906      	ldr	r1, [sp, #24]
10057f36:	42ba      	cmp	r2, r7
10057f38:	d905      	bls.n	10057f46 <GAT_att_srv_extract_write_packet_data+0x30>
10057f3a:	200d      	movs	r0, #13
10057f3c:	7008      	strb	r0, [r1, #0]
10057f3e:	2000      	movs	r0, #0
10057f40:	8028      	strh	r0, [r5, #0]
10057f42:	2786      	movs	r7, #134	@ 0x86
10057f44:	e009      	b.n	10057f5a <GAT_att_srv_extract_write_packet_data+0x44>
10057f46:	2700      	movs	r7, #0
10057f48:	700f      	strb	r7, [r1, #0]
10057f4a:	8028      	strh	r0, [r5, #0]
10057f4c:	89b0      	ldrh	r0, [r6, #12]
10057f4e:	1cc0      	adds	r0, r0, #3
10057f50:	b281      	uxth	r1, r0
10057f52:	4630      	mov	r0, r6
10057f54:	4623      	mov	r3, r4
10057f56:	f7fd fda1 	bl	10055a9c <ACL_pkt_read>
10057f5a:	4638      	mov	r0, r7
10057f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10057f60 <GAT_att_srv_resp>:
10057f60:	b5f0      	push	{r4, r5, r6, r7, lr}
10057f62:	b089      	sub	sp, #36	@ 0x24
10057f64:	461f      	mov	r7, r3
10057f66:	9203      	str	r2, [sp, #12]
10057f68:	460e      	mov	r6, r1
10057f6a:	4605      	mov	r5, r0
10057f6c:	f7ff fc04 	bl	10057778 <GAT_att_cmn_get_channel_descr_p>
10057f70:	2800      	cmp	r0, #0
10057f72:	d045      	beq.n	10058000 <GAT_att_srv_resp+0xa0>
10057f74:	4604      	mov	r4, r0
10057f76:	68c0      	ldr	r0, [r0, #12]
10057f78:	2800      	cmp	r0, #0
10057f7a:	d041      	beq.n	10058000 <GAT_att_srv_resp+0xa0>
10057f7c:	9702      	str	r7, [sp, #8]
10057f7e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10057f80:	9001      	str	r0, [sp, #4]
10057f82:	980e      	ldr	r0, [sp, #56]	@ 0x38
10057f84:	9000      	str	r0, [sp, #0]
10057f86:	481f      	ldr	r0, [pc, #124]	@ (10058004 <__arm_cp.13_0>)
10057f88:	6807      	ldr	r7, [r0, #0]
10057f8a:	3738      	adds	r7, #56	@ 0x38
10057f8c:	683f      	ldr	r7, [r7, #0]
10057f8e:	2f00      	cmp	r7, #0
10057f90:	d00f      	beq.n	10057fb2 <GAT_att_srv_resp+0x52>
10057f92:	8838      	ldrh	r0, [r7, #0]
10057f94:	42a8      	cmp	r0, r5
10057f96:	d104      	bne.n	10057fa2 <GAT_att_srv_resp+0x42>
10057f98:	4638      	mov	r0, r7
10057f9a:	f002 fa7a 	bl	1005a492 <L2C_get_cid_from_basic_packet_header>
10057f9e:	42b0      	cmp	r0, r6
10057fa0:	d001      	beq.n	10057fa6 <GAT_att_srv_resp+0x46>
10057fa2:	371c      	adds	r7, #28
10057fa4:	e7f2      	b.n	10057f8c <GAT_att_srv_resp+0x2c>
10057fa6:	4817      	ldr	r0, [pc, #92]	@ (10058004 <__arm_cp.13_0>)
10057fa8:	6800      	ldr	r0, [r0, #0]
10057faa:	3038      	adds	r0, #56	@ 0x38
10057fac:	4639      	mov	r1, r7
10057fae:	f00b fc5d 	bl	1006386c <ACL_list_remove>
10057fb2:	68e0      	ldr	r0, [r4, #12]
10057fb4:	f7ff fd6c 	bl	10057a90 <GAT_att_cmn_get_opcode>
10057fb8:	1e41      	subs	r1, r0, #1
10057fba:	9802      	ldr	r0, [sp, #8]
10057fbc:	2800      	cmp	r0, #0
10057fbe:	d013      	beq.n	10057fe8 <GAT_att_srv_resp+0x88>
10057fc0:	b2c8      	uxtb	r0, r1
10057fc2:	281e      	cmp	r0, #30
10057fc4:	d007      	beq.n	10057fd6 <GAT_att_srv_resp+0x76>
10057fc6:	2240      	movs	r2, #64	@ 0x40
10057fc8:	4011      	ands	r1, r2
10057fca:	d104      	bne.n	10057fd6 <GAT_att_srv_resp+0x76>
10057fcc:	68e3      	ldr	r3, [r4, #12]
10057fce:	9903      	ldr	r1, [sp, #12]
10057fd0:	9a02      	ldr	r2, [sp, #8]
10057fd2:	f000 f819 	bl	10058008 <GAT_att_srv_write_err_packet>
10057fd6:	4620      	mov	r0, r4
10057fd8:	f000 f82a 	bl	10058030 <GAT_att_srv_send_response>
10057fdc:	2f00      	cmp	r7, #0
10057fde:	d00f      	beq.n	10058000 <GAT_att_srv_resp+0xa0>
10057fe0:	4638      	mov	r0, r7
10057fe2:	f7fd fd3f 	bl	10055a64 <ACL_pkt_release>
10057fe6:	e00b      	b.n	10058000 <GAT_att_srv_resp+0xa0>
10057fe8:	a804      	add	r0, sp, #16
10057fea:	9a00      	ldr	r2, [sp, #0]
10057fec:	8182      	strh	r2, [r0, #12]
10057fee:	7041      	strb	r1, [r0, #1]
10057ff0:	2101      	movs	r1, #1
10057ff2:	7001      	strb	r1, [r0, #0]
10057ff4:	9901      	ldr	r1, [sp, #4]
10057ff6:	9108      	str	r1, [sp, #32]
10057ff8:	9406      	str	r4, [sp, #24]
10057ffa:	9705      	str	r7, [sp, #20]
10057ffc:	f7ff fd88 	bl	10057b10 <GAT_att_srv_run>
10058000:	b009      	add	sp, #36	@ 0x24
10058002:	bdf0      	pop	{r4, r5, r6, r7, pc}

10058004 <__arm_cp.13_0>:
10058004:	20002910 	.word	0x20002910

10058008 <GAT_att_srv_write_err_packet>:
10058008:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005800a:	2b00      	cmp	r3, #0
1005800c:	d00f      	beq.n	1005802e <GAT_att_srv_write_err_packet+0x26>
1005800e:	461c      	mov	r4, r3
10058010:	466b      	mov	r3, sp
10058012:	7099      	strb	r1, [r3, #2]
10058014:	7058      	strb	r0, [r3, #1]
10058016:	2001      	movs	r0, #1
10058018:	7018      	strb	r0, [r3, #0]
1005801a:	711a      	strb	r2, [r3, #4]
1005801c:	0a08      	lsrs	r0, r1, #8
1005801e:	70d8      	strb	r0, [r3, #3]
10058020:	89a1      	ldrh	r1, [r4, #12]
10058022:	2505      	movs	r5, #5
10058024:	4620      	mov	r0, r4
10058026:	462a      	mov	r2, r5
10058028:	f7fd fd5a 	bl	10055ae0 <ACL_pkt_write>
1005802c:	8065      	strh	r5, [r4, #2]
1005802e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10058030 <GAT_att_srv_send_response>:
10058030:	b510      	push	{r4, lr}
10058032:	4604      	mov	r4, r0
10058034:	68c0      	ldr	r0, [r0, #12]
10058036:	2800      	cmp	r0, #0
10058038:	d015      	beq.n	10058066 <GAT_att_srv_send_response+0x36>
1005803a:	8841      	ldrh	r1, [r0, #2]
1005803c:	1d09      	adds	r1, r1, #4
1005803e:	b289      	uxth	r1, r1
10058040:	f7fd fd19 	bl	10055a76 <ACL_pkt_resize>
10058044:	68e1      	ldr	r1, [r4, #12]
10058046:	8960      	ldrh	r0, [r4, #10]
10058048:	f7ff fc18 	bl	1005787c <GAT_att_cmn_send>
1005804c:	2800      	cmp	r0, #0
1005804e:	d108      	bne.n	10058062 <GAT_att_srv_send_response+0x32>
10058050:	8962      	ldrh	r2, [r4, #10]
10058052:	8921      	ldrh	r1, [r4, #8]
10058054:	2000      	movs	r0, #0
10058056:	f7ff fc01 	bl	1005785c <GAT_att_cmn_stop_timer>
1005805a:	88a0      	ldrh	r0, [r4, #4]
1005805c:	2101      	movs	r1, #1
1005805e:	4388      	bics	r0, r1
10058060:	80a0      	strh	r0, [r4, #4]
10058062:	2000      	movs	r0, #0
10058064:	60e0      	str	r0, [r4, #12]
10058066:	bd10      	pop	{r4, pc}

10058068 <GAT_att_srv_confirmation_pending>:
10058068:	b5e0      	push	{r5, r6, r7, lr}
1005806a:	a801      	add	r0, sp, #4
1005806c:	2102      	movs	r1, #2
1005806e:	8001      	strh	r1, [r0, #0]
10058070:	9000      	str	r0, [sp, #0]
10058072:	2000      	movs	r0, #0
10058074:	4b04      	ldr	r3, [pc, #16]	@ (10058088 <__arm_cp.16_0>)
10058076:	4601      	mov	r1, r0
10058078:	4602      	mov	r2, r0
1005807a:	f7ff fabf 	bl	100575fc <GAT_att_cmn_for_each_ch_descr>
1005807e:	3886      	subs	r0, #134	@ 0x86
10058080:	4241      	negs	r1, r0
10058082:	4148      	adcs	r0, r1
10058084:	bd8c      	pop	{r2, r3, r7, pc}
10058086:	46c0      	nop			@ (mov r8, r8)

10058088 <__arm_cp.16_0>:
10058088:	100578a9 	.word	0x100578a9

1005808c <GAT_att_srv_request_user_pending>:
1005808c:	b510      	push	{r4, lr}
1005808e:	480a      	ldr	r0, [pc, #40]	@ (100580b8 <__arm_cp.17_0>)
10058090:	6804      	ldr	r4, [r0, #0]
10058092:	3438      	adds	r4, #56	@ 0x38
10058094:	6824      	ldr	r4, [r4, #0]
10058096:	2c00      	cmp	r4, #0
10058098:	d009      	beq.n	100580ae <GAT_att_srv_request_user_pending+0x22>
1005809a:	4620      	mov	r0, r4
1005809c:	f7ff fcf8 	bl	10057a90 <GAT_att_cmn_get_opcode>
100580a0:	281e      	cmp	r0, #30
100580a2:	d002      	beq.n	100580aa <GAT_att_srv_request_user_pending+0x1e>
100580a4:	2140      	movs	r1, #64	@ 0x40
100580a6:	4008      	ands	r0, r1
100580a8:	d003      	beq.n	100580b2 <GAT_att_srv_request_user_pending+0x26>
100580aa:	341c      	adds	r4, #28
100580ac:	e7f2      	b.n	10058094 <GAT_att_srv_request_user_pending+0x8>
100580ae:	2000      	movs	r0, #0
100580b0:	bd10      	pop	{r4, pc}
100580b2:	2001      	movs	r0, #1
100580b4:	bd10      	pop	{r4, pc}
100580b6:	46c0      	nop			@ (mov r8, r8)

100580b8 <__arm_cp.17_0>:
100580b8:	20002910 	.word	0x20002910

100580bc <GAT_att_srv_flush_user_pending_list>:
100580bc:	b570      	push	{r4, r5, r6, lr}
100580be:	4d08      	ldr	r5, [pc, #32]	@ (100580e0 <__arm_cp.18_0>)
100580c0:	6828      	ldr	r0, [r5, #0]
100580c2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
100580c4:	2c00      	cmp	r4, #0
100580c6:	d00a      	beq.n	100580de <GAT_att_srv_flush_user_pending_list+0x22>
100580c8:	69e6      	ldr	r6, [r4, #28]
100580ca:	6828      	ldr	r0, [r5, #0]
100580cc:	3038      	adds	r0, #56	@ 0x38
100580ce:	4621      	mov	r1, r4
100580d0:	f00b fbcc 	bl	1006386c <ACL_list_remove>
100580d4:	4620      	mov	r0, r4
100580d6:	f7fd fcc5 	bl	10055a64 <ACL_pkt_release>
100580da:	4634      	mov	r4, r6
100580dc:	e7f2      	b.n	100580c4 <GAT_att_srv_flush_user_pending_list+0x8>
100580de:	bd70      	pop	{r4, r5, r6, pc}

100580e0 <__arm_cp.18_0>:
100580e0:	20002910 	.word	0x20002910

100580e4 <GAT_att_srv_exchange_mtu_exc>:
100580e4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
100580e6:	4604      	mov	r4, r0
100580e8:	6880      	ldr	r0, [r0, #8]
100580ea:	8941      	ldrh	r1, [r0, #10]
100580ec:	2904      	cmp	r1, #4
100580ee:	d11a      	bne.n	10058126 <GAT_att_srv_exchange_mtu_exc+0x42>
100580f0:	6860      	ldr	r0, [r4, #4]
100580f2:	8981      	ldrh	r1, [r0, #12]
100580f4:	1c49      	adds	r1, r1, #1
100580f6:	b289      	uxth	r1, r1
100580f8:	f7fd fcd9 	bl	10055aae <ACL_pkt_read_16b>
100580fc:	4605      	mov	r5, r0
100580fe:	2817      	cmp	r0, #23
10058100:	d800      	bhi.n	10058104 <GAT_att_srv_exchange_mtu_exc+0x20>
10058102:	2517      	movs	r5, #23
10058104:	4e1d      	ldr	r6, [pc, #116]	@ (1005817c <__arm_cp.19_0>)
10058106:	8a30      	ldrh	r0, [r6, #16]
10058108:	4285      	cmp	r5, r0
1005810a:	d300      	bcc.n	1005810e <GAT_att_srv_exchange_mtu_exc+0x2a>
1005810c:	4605      	mov	r5, r0
1005810e:	68a3      	ldr	r3, [r4, #8]
10058110:	8898      	ldrh	r0, [r3, #4]
10058112:	0700      	lsls	r0, r0, #28
10058114:	d40f      	bmi.n	10058136 <GAT_att_srv_exchange_mtu_exc+0x52>
10058116:	8919      	ldrh	r1, [r3, #8]
10058118:	2002      	movs	r0, #2
1005811a:	462a      	mov	r2, r5
1005811c:	f00c fa66 	bl	100645ec <aci_att_exchange_mtu_resp_event_push_noinline>
10058120:	2800      	cmp	r0, #0
10058122:	d014      	beq.n	1005814e <GAT_att_srv_exchange_mtu_exc+0x6a>
10058124:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
10058126:	68c3      	ldr	r3, [r0, #12]
10058128:	2002      	movs	r0, #2
1005812a:	2100      	movs	r1, #0
1005812c:	2206      	movs	r2, #6
1005812e:	f7ff ff6b 	bl	10058008 <GAT_att_srv_write_err_packet>
10058132:	2086      	movs	r0, #134	@ 0x86
10058134:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
10058136:	88d8      	ldrh	r0, [r3, #6]
10058138:	42a8      	cmp	r0, r5
1005813a:	d00e      	beq.n	1005815a <GAT_att_srv_exchange_mtu_exc+0x76>
1005813c:	3308      	adds	r3, #8
1005813e:	2042      	movs	r0, #66	@ 0x42
10058140:	2103      	movs	r1, #3
10058142:	2202      	movs	r2, #2
10058144:	f00c fd82 	bl	10064c4c <aci_hal_fw_error_event_push_noinline>
10058148:	2800      	cmp	r0, #0
1005814a:	d1eb      	bne.n	10058124 <GAT_att_srv_exchange_mtu_exc+0x40>
1005814c:	e005      	b.n	1005815a <GAT_att_srv_exchange_mtu_exc+0x76>
1005814e:	68a0      	ldr	r0, [r4, #8]
10058150:	80c5      	strh	r5, [r0, #6]
10058152:	8881      	ldrh	r1, [r0, #4]
10058154:	2208      	movs	r2, #8
10058156:	430a      	orrs	r2, r1
10058158:	8082      	strh	r2, [r0, #4]
1005815a:	8a30      	ldrh	r0, [r6, #16]
1005815c:	ab01      	add	r3, sp, #4
1005815e:	7058      	strb	r0, [r3, #1]
10058160:	2503      	movs	r5, #3
10058162:	701d      	strb	r5, [r3, #0]
10058164:	0a00      	lsrs	r0, r0, #8
10058166:	7098      	strb	r0, [r3, #2]
10058168:	68a0      	ldr	r0, [r4, #8]
1005816a:	68c4      	ldr	r4, [r0, #12]
1005816c:	89a1      	ldrh	r1, [r4, #12]
1005816e:	4620      	mov	r0, r4
10058170:	462a      	mov	r2, r5
10058172:	f7fd fcb5 	bl	10055ae0 <ACL_pkt_write>
10058176:	8065      	strh	r5, [r4, #2]
10058178:	2000      	movs	r0, #0
1005817a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

1005817c <__arm_cp.19_0>:
1005817c:	2000296c 	.word	0x2000296c

10058180 <GAT_att_srv_find_info_exc>:
10058180:	b5f0      	push	{r4, r5, r6, r7, lr}
10058182:	b08f      	sub	sp, #60	@ 0x3c
10058184:	4601      	mov	r1, r0
10058186:	6840      	ldr	r0, [r0, #4]
10058188:	9101      	str	r1, [sp, #4]
1005818a:	6889      	ldr	r1, [r1, #8]
1005818c:	68cf      	ldr	r7, [r1, #12]
1005818e:	ad0d      	add	r5, sp, #52	@ 0x34
10058190:	ac0e      	add	r4, sp, #56	@ 0x38
10058192:	4629      	mov	r1, r5
10058194:	4622      	mov	r2, r4
10058196:	f000 fc7c 	bl	10058a92 <GAT_att_srv_get_handle_range>
1005819a:	8828      	ldrh	r0, [r5, #0]
1005819c:	9007      	str	r0, [sp, #28]
1005819e:	f00d fa17 	bl	100655d0 <GAT_att_db_find_from_handle>
100581a2:	4602      	mov	r2, r0
100581a4:	8820      	ldrh	r0, [r4, #0]
100581a6:	9002      	str	r0, [sp, #8]
100581a8:	2500      	movs	r5, #0
100581aa:	462b      	mov	r3, r5
100581ac:	9500      	str	r5, [sp, #0]
100581ae:	9503      	str	r5, [sp, #12]
100581b0:	2a00      	cmp	r2, #0
100581b2:	9506      	str	r5, [sp, #24]
100581b4:	d050      	beq.n	10058258 <GAT_att_srv_find_info_exc+0xd8>
100581b6:	8850      	ldrh	r0, [r2, #2]
100581b8:	9007      	str	r0, [sp, #28]
100581ba:	9902      	ldr	r1, [sp, #8]
100581bc:	4288      	cmp	r0, r1
100581be:	d84b      	bhi.n	10058258 <GAT_att_srv_find_info_exc+0xd8>
100581c0:	b2a8      	uxth	r0, r5
100581c2:	18c0      	adds	r0, r0, r3
100581c4:	9901      	ldr	r1, [sp, #4]
100581c6:	6889      	ldr	r1, [r1, #8]
100581c8:	88c9      	ldrh	r1, [r1, #6]
100581ca:	4288      	cmp	r0, r1
100581cc:	d844      	bhi.n	10058258 <GAT_att_srv_find_info_exc+0xd8>
100581ce:	461c      	mov	r4, r3
100581d0:	ad08      	add	r5, sp, #32
100581d2:	9205      	str	r2, [sp, #20]
100581d4:	4610      	mov	r0, r2
100581d6:	4629      	mov	r1, r5
100581d8:	f000 ffba 	bl	10059150 <GAT_srv_get_attr_type>
100581dc:	7c2e      	ldrb	r6, [r5, #16]
100581de:	9803      	ldr	r0, [sp, #12]
100581e0:	0600      	lsls	r0, r0, #24
100581e2:	d006      	beq.n	100581f2 <GAT_att_srv_find_info_exc+0x72>
100581e4:	9800      	ldr	r0, [sp, #0]
100581e6:	4286      	cmp	r6, r0
100581e8:	d139      	bne.n	1005825e <GAT_att_srv_find_info_exc+0xde>
100581ea:	08c0      	lsrs	r0, r0, #3
100581ec:	9004      	str	r0, [sp, #16]
100581ee:	9d06      	ldr	r5, [sp, #24]
100581f0:	e016      	b.n	10058220 <GAT_att_srv_find_info_exc+0xa0>
100581f2:	89b9      	ldrh	r1, [r7, #12]
100581f4:	2205      	movs	r2, #5
100581f6:	4638      	mov	r0, r7
100581f8:	f7ff fe80 	bl	10057efc <ACL_pkt_write_8b>
100581fc:	2e10      	cmp	r6, #16
100581fe:	d001      	beq.n	10058204 <GAT_att_srv_find_info_exc+0x84>
10058200:	2202      	movs	r2, #2
10058202:	e000      	b.n	10058206 <GAT_att_srv_find_info_exc+0x86>
10058204:	2201      	movs	r2, #1
10058206:	9d06      	ldr	r5, [sp, #24]
10058208:	89b8      	ldrh	r0, [r7, #12]
1005820a:	1c40      	adds	r0, r0, #1
1005820c:	b281      	uxth	r1, r0
1005820e:	4638      	mov	r0, r7
10058210:	9203      	str	r2, [sp, #12]
10058212:	f7ff fe73 	bl	10057efc <ACL_pkt_write_8b>
10058216:	1cad      	adds	r5, r5, #2
10058218:	08f0      	lsrs	r0, r6, #3
1005821a:	9004      	str	r0, [sp, #16]
1005821c:	1c84      	adds	r4, r0, #2
1005821e:	9600      	str	r6, [sp, #0]
10058220:	89b8      	ldrh	r0, [r7, #12]
10058222:	1940      	adds	r0, r0, r5
10058224:	b281      	uxth	r1, r0
10058226:	4638      	mov	r0, r7
10058228:	9a07      	ldr	r2, [sp, #28]
1005822a:	f7fd fc50 	bl	10055ace <ACL_pkt_write_16b>
1005822e:	89b8      	ldrh	r0, [r7, #12]
10058230:	1828      	adds	r0, r5, r0
10058232:	1c86      	adds	r6, r0, #2
10058234:	a808      	add	r0, sp, #32
10058236:	f00b fb00 	bl	1006383a <UUID_get_value_p>
1005823a:	4603      	mov	r3, r0
1005823c:	b2b1      	uxth	r1, r6
1005823e:	9804      	ldr	r0, [sp, #16]
10058240:	b2c2      	uxtb	r2, r0
10058242:	4638      	mov	r0, r7
10058244:	f7fd fc4c 	bl	10055ae0 <ACL_pkt_write>
10058248:	b2e0      	uxtb	r0, r4
1005824a:	182d      	adds	r5, r5, r0
1005824c:	9805      	ldr	r0, [sp, #20]
1005824e:	f00d fa21 	bl	10065694 <GAT_att_db_get_next>
10058252:	4602      	mov	r2, r0
10058254:	4623      	mov	r3, r4
10058256:	e7ab      	b.n	100581b0 <GAT_att_srv_find_info_exc+0x30>
10058258:	9803      	ldr	r0, [sp, #12]
1005825a:	0600      	lsls	r0, r0, #24
1005825c:	d003      	beq.n	10058266 <GAT_att_srv_find_info_exc+0xe6>
1005825e:	9806      	ldr	r0, [sp, #24]
10058260:	8078      	strh	r0, [r7, #2]
10058262:	2000      	movs	r0, #0
10058264:	e007      	b.n	10058276 <GAT_att_srv_find_info_exc+0xf6>
10058266:	9807      	ldr	r0, [sp, #28]
10058268:	b281      	uxth	r1, r0
1005826a:	2004      	movs	r0, #4
1005826c:	220a      	movs	r2, #10
1005826e:	463b      	mov	r3, r7
10058270:	f7ff feca 	bl	10058008 <GAT_att_srv_write_err_packet>
10058274:	2086      	movs	r0, #134	@ 0x86
10058276:	b00f      	add	sp, #60	@ 0x3c
10058278:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005827a <GAT_att_srv_find_by_type_val_exc>:
1005827a:	b5f0      	push	{r4, r5, r6, r7, lr}
1005827c:	b091      	sub	sp, #68	@ 0x44
1005827e:	4607      	mov	r7, r0
10058280:	ac09      	add	r4, sp, #36	@ 0x24
10058282:	2010      	movs	r0, #16
10058284:	7420      	strb	r0, [r4, #16]
10058286:	6878      	ldr	r0, [r7, #4]
10058288:	8981      	ldrh	r1, [r0, #12]
1005828a:	1d49      	adds	r1, r1, #5
1005828c:	b289      	uxth	r1, r1
1005828e:	f7fd fc0e 	bl	10055aae <ACL_pkt_read_16b>
10058292:	81a0      	strh	r0, [r4, #12]
10058294:	6878      	ldr	r0, [r7, #4]
10058296:	ae0f      	add	r6, sp, #60	@ 0x3c
10058298:	ad0e      	add	r5, sp, #56	@ 0x38
1005829a:	4631      	mov	r1, r6
1005829c:	462a      	mov	r2, r5
1005829e:	f000 fbf8 	bl	10058a92 <GAT_att_srv_get_handle_range>
100582a2:	8836      	ldrh	r6, [r6, #0]
100582a4:	6878      	ldr	r0, [r7, #4]
100582a6:	9706      	str	r7, [sp, #24]
100582a8:	68b9      	ldr	r1, [r7, #8]
100582aa:	8844      	ldrh	r4, [r0, #2]
100582ac:	68c8      	ldr	r0, [r1, #12]
100582ae:	8981      	ldrh	r1, [r0, #12]
100582b0:	2207      	movs	r2, #7
100582b2:	9002      	str	r0, [sp, #8]
100582b4:	f7ff fe22 	bl	10057efc <ACL_pkt_write_8b>
100582b8:	1fe0      	subs	r0, r4, #7
100582ba:	8829      	ldrh	r1, [r5, #0]
100582bc:	9104      	str	r1, [sp, #16]
100582be:	2101      	movs	r1, #1
100582c0:	9105      	str	r1, [sp, #20]
100582c2:	b280      	uxth	r0, r0
100582c4:	9003      	str	r0, [sp, #12]
100582c6:	9601      	str	r6, [sp, #4]
100582c8:	9805      	ldr	r0, [sp, #20]
100582ca:	b287      	uxth	r7, r0
100582cc:	1d3c      	adds	r4, r7, #4
100582ce:	9806      	ldr	r0, [sp, #24]
100582d0:	6880      	ldr	r0, [r0, #8]
100582d2:	88c0      	ldrh	r0, [r0, #6]
100582d4:	4284      	cmp	r4, r0
100582d6:	d83c      	bhi.n	10058352 <GAT_att_srv_find_by_type_val_exc+0xd8>
100582d8:	b2b0      	uxth	r0, r6
100582da:	aa09      	add	r2, sp, #36	@ 0x24
100582dc:	9904      	ldr	r1, [sp, #16]
100582de:	f001 faa7 	bl	10059830 <GAT_srv_find_by_type_attr_p>
100582e2:	2800      	cmp	r0, #0
100582e4:	d035      	beq.n	10058352 <GAT_att_srv_find_by_type_val_exc+0xd8>
100582e6:	4605      	mov	r5, r0
100582e8:	a810      	add	r0, sp, #64	@ 0x40
100582ea:	9000      	str	r0, [sp, #0]
100582ec:	2200      	movs	r2, #0
100582ee:	ab08      	add	r3, sp, #32
100582f0:	9806      	ldr	r0, [sp, #24]
100582f2:	4629      	mov	r1, r5
100582f4:	f000 fbe0 	bl	10058ab8 <GAT_att_srv_value_read>
100582f8:	2886      	cmp	r0, #134	@ 0x86
100582fa:	d028      	beq.n	1005834e <GAT_att_srv_find_by_type_val_exc+0xd4>
100582fc:	2800      	cmp	r0, #0
100582fe:	d136      	bne.n	1005836e <GAT_att_srv_find_by_type_val_exc+0xf4>
10058300:	886e      	ldrh	r6, [r5, #2]
10058302:	9808      	ldr	r0, [sp, #32]
10058304:	6843      	ldr	r3, [r0, #4]
10058306:	9806      	ldr	r0, [sp, #24]
10058308:	6840      	ldr	r0, [r0, #4]
1005830a:	8981      	ldrh	r1, [r0, #12]
1005830c:	1dc9      	adds	r1, r1, #7
1005830e:	b289      	uxth	r1, r1
10058310:	9f03      	ldr	r7, [sp, #12]
10058312:	463a      	mov	r2, r7
10058314:	f7fd fbb9 	bl	10055a8a <ACL_pkt_cmp>
10058318:	9908      	ldr	r1, [sp, #32]
1005831a:	8809      	ldrh	r1, [r1, #0]
1005831c:	42b9      	cmp	r1, r7
1005831e:	d116      	bne.n	1005834e <GAT_att_srv_find_by_type_val_exc+0xd4>
10058320:	2800      	cmp	r0, #0
10058322:	d114      	bne.n	1005834e <GAT_att_srv_find_by_type_val_exc+0xd4>
10058324:	af07      	add	r7, sp, #28
10058326:	703e      	strb	r6, [r7, #0]
10058328:	0a30      	lsrs	r0, r6, #8
1005832a:	7078      	strb	r0, [r7, #1]
1005832c:	4628      	mov	r0, r5
1005832e:	f000 ff37 	bl	100591a0 <GAT_srv_get_att_group_end_handle>
10058332:	4606      	mov	r6, r0
10058334:	70b8      	strb	r0, [r7, #2]
10058336:	0a00      	lsrs	r0, r0, #8
10058338:	70f8      	strb	r0, [r7, #3]
1005833a:	9802      	ldr	r0, [sp, #8]
1005833c:	8981      	ldrh	r1, [r0, #12]
1005833e:	9a05      	ldr	r2, [sp, #20]
10058340:	1889      	adds	r1, r1, r2
10058342:	b289      	uxth	r1, r1
10058344:	2204      	movs	r2, #4
10058346:	463b      	mov	r3, r7
10058348:	f7fd fbca 	bl	10055ae0 <ACL_pkt_write>
1005834c:	9405      	str	r4, [sp, #20]
1005834e:	1c76      	adds	r6, r6, #1
10058350:	e7ba      	b.n	100582c8 <GAT_att_srv_find_by_type_val_exc+0x4e>
10058352:	2f01      	cmp	r7, #1
10058354:	d107      	bne.n	10058366 <GAT_att_srv_find_by_type_val_exc+0xec>
10058356:	2006      	movs	r0, #6
10058358:	220a      	movs	r2, #10
1005835a:	9901      	ldr	r1, [sp, #4]
1005835c:	9b02      	ldr	r3, [sp, #8]
1005835e:	f7ff fe53 	bl	10058008 <GAT_att_srv_write_err_packet>
10058362:	2086      	movs	r0, #134	@ 0x86
10058364:	e003      	b.n	1005836e <GAT_att_srv_find_by_type_val_exc+0xf4>
10058366:	9802      	ldr	r0, [sp, #8]
10058368:	9905      	ldr	r1, [sp, #20]
1005836a:	8041      	strh	r1, [r0, #2]
1005836c:	2000      	movs	r0, #0
1005836e:	b011      	add	sp, #68	@ 0x44
10058370:	bdf0      	pop	{r4, r5, r6, r7, pc}

10058372 <GAT_att_srv_read_by_type_exc>:
10058372:	b5f0      	push	{r4, r5, r6, r7, lr}
10058374:	b097      	sub	sp, #92	@ 0x5c
10058376:	4604      	mov	r4, r0
10058378:	6840      	ldr	r0, [r0, #4]
1005837a:	a915      	add	r1, sp, #84	@ 0x54
1005837c:	aa14      	add	r2, sp, #80	@ 0x50
1005837e:	f000 fb88 	bl	10058a92 <GAT_att_srv_get_handle_range>
10058382:	940a      	str	r4, [sp, #40]	@ 0x28
10058384:	6860      	ldr	r0, [r4, #4]
10058386:	8981      	ldrh	r1, [r0, #12]
10058388:	1d49      	adds	r1, r1, #5
1005838a:	8842      	ldrh	r2, [r0, #2]
1005838c:	b289      	uxth	r1, r1
1005838e:	2a07      	cmp	r2, #7
10058390:	d105      	bne.n	1005839e <GAT_att_srv_read_by_type_exc+0x2c>
10058392:	f7fd fb8c 	bl	10055aae <ACL_pkt_read_16b>
10058396:	a90f      	add	r1, sp, #60	@ 0x3c
10058398:	8188      	strh	r0, [r1, #12]
1005839a:	2010      	movs	r0, #16
1005839c:	e004      	b.n	100583a8 <GAT_att_srv_read_by_type_exc+0x36>
1005839e:	2210      	movs	r2, #16
100583a0:	ab0f      	add	r3, sp, #60	@ 0x3c
100583a2:	f7fd fb7b 	bl	10055a9c <ACL_pkt_read>
100583a6:	2080      	movs	r0, #128	@ 0x80
100583a8:	a90f      	add	r1, sp, #60	@ 0x3c
100583aa:	7408      	strb	r0, [r1, #16]
100583ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
100583ae:	7840      	ldrb	r0, [r0, #1]
100583b0:	2810      	cmp	r0, #16
100583b2:	d001      	beq.n	100583b8 <GAT_att_srv_read_by_type_exc+0x46>
100583b4:	2102      	movs	r1, #2
100583b6:	e000      	b.n	100583ba <GAT_att_srv_read_by_type_exc+0x48>
100583b8:	2104      	movs	r1, #4
100583ba:	9107      	str	r1, [sp, #28]
100583bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
100583be:	6891      	ldr	r1, [r2, #8]
100583c0:	68cc      	ldr	r4, [r1, #12]
100583c2:	88cb      	ldrh	r3, [r1, #6]
100583c4:	9305      	str	r3, [sp, #20]
100583c6:	7812      	ldrb	r2, [r2, #0]
100583c8:	2a00      	cmp	r2, #0
100583ca:	9404      	str	r4, [sp, #16]
100583cc:	d00a      	beq.n	100583e4 <GAT_att_srv_read_by_type_exc+0x72>
100583ce:	8865      	ldrh	r5, [r4, #2]
100583d0:	2d02      	cmp	r5, #2
100583d2:	d315      	bcc.n	10058400 <GAT_att_srv_read_by_type_exc+0x8e>
100583d4:	89a0      	ldrh	r0, [r4, #12]
100583d6:	1c40      	adds	r0, r0, #1
100583d8:	b281      	uxth	r1, r0
100583da:	4620      	mov	r0, r4
100583dc:	f000 fba9 	bl	10058b32 <ACL_pkt_read_8b>
100583e0:	4606      	mov	r6, r0
100583e2:	e00e      	b.n	10058402 <GAT_att_srv_read_by_type_exc+0x90>
100583e4:	aa15      	add	r2, sp, #84	@ 0x54
100583e6:	8815      	ldrh	r5, [r2, #0]
100583e8:	2810      	cmp	r0, #16
100583ea:	d112      	bne.n	10058412 <GAT_att_srv_read_by_type_exc+0xa0>
100583ec:	a80f      	add	r0, sp, #60	@ 0x3c
100583ee:	f001 f981 	bl	100596f4 <GAT_srv_is_supported_grouping_type>
100583f2:	2800      	cmp	r0, #0
100583f4:	d100      	bne.n	100583f8 <GAT_att_srv_read_by_type_exc+0x86>
100583f6:	e0b8      	b.n	1005856a <GAT_att_srv_read_by_type_exc+0x1f8>
100583f8:	9508      	str	r5, [sp, #32]
100583fa:	89a1      	ldrh	r1, [r4, #12]
100583fc:	2211      	movs	r2, #17
100583fe:	e01b      	b.n	10058438 <GAT_att_srv_read_by_type_exc+0xc6>
10058400:	2600      	movs	r6, #0
10058402:	89a0      	ldrh	r0, [r4, #12]
10058404:	1940      	adds	r0, r0, r5
10058406:	b281      	uxth	r1, r0
10058408:	4620      	mov	r0, r4
1005840a:	f7fd fb50 	bl	10055aae <ACL_pkt_read_16b>
1005840e:	9008      	str	r0, [sp, #32]
10058410:	e018      	b.n	10058444 <GAT_att_srv_read_by_type_exc+0xd2>
10058412:	a80b      	add	r0, sp, #44	@ 0x2c
10058414:	8105      	strh	r5, [r0, #8]
10058416:	2202      	movs	r2, #2
10058418:	7102      	strb	r2, [r0, #4]
1005841a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
1005841c:	8142      	strh	r2, [r0, #10]
1005841e:	910b      	str	r1, [sp, #44]	@ 0x2c
10058420:	a90f      	add	r1, sp, #60	@ 0x3c
10058422:	910e      	str	r1, [sp, #56]	@ 0x38
10058424:	f001 f9a8 	bl	10059778 <GAT_srv_check_change_aware>
10058428:	2886      	cmp	r0, #134	@ 0x86
1005842a:	d102      	bne.n	10058432 <GAT_att_srv_read_by_type_exc+0xc0>
1005842c:	a816      	add	r0, sp, #88	@ 0x58
1005842e:	2212      	movs	r2, #18
10058430:	e09d      	b.n	1005856e <GAT_att_srv_read_by_type_exc+0x1fc>
10058432:	9508      	str	r5, [sp, #32]
10058434:	89a1      	ldrh	r1, [r4, #12]
10058436:	2209      	movs	r2, #9
10058438:	4620      	mov	r0, r4
1005843a:	f7ff fd5f 	bl	10057efc <ACL_pkt_write_8b>
1005843e:	2501      	movs	r5, #1
10058440:	8065      	strh	r5, [r4, #2]
10058442:	2600      	movs	r6, #0
10058444:	9805      	ldr	r0, [sp, #20]
10058446:	1e80      	subs	r0, r0, #2
10058448:	9001      	str	r0, [sp, #4]
1005844a:	a814      	add	r0, sp, #80	@ 0x50
1005844c:	8800      	ldrh	r0, [r0, #0]
1005844e:	9003      	str	r0, [sp, #12]
10058450:	9609      	str	r6, [sp, #36]	@ 0x24
10058452:	b2f6      	uxtb	r6, r6
10058454:	9506      	str	r5, [sp, #24]
10058456:	b2af      	uxth	r7, r5
10058458:	19b8      	adds	r0, r7, r6
1005845a:	9905      	ldr	r1, [sp, #20]
1005845c:	4288      	cmp	r0, r1
1005845e:	d874      	bhi.n	1005854a <GAT_att_srv_read_by_type_exc+0x1d8>
10058460:	9808      	ldr	r0, [sp, #32]
10058462:	b285      	uxth	r5, r0
10058464:	aa0f      	add	r2, sp, #60	@ 0x3c
10058466:	4628      	mov	r0, r5
10058468:	9903      	ldr	r1, [sp, #12]
1005846a:	f001 f9e1 	bl	10059830 <GAT_srv_find_by_type_attr_p>
1005846e:	2800      	cmp	r0, #0
10058470:	d06b      	beq.n	1005854a <GAT_att_srv_read_by_type_exc+0x1d8>
10058472:	4604      	mov	r4, r0
10058474:	9502      	str	r5, [sp, #8]
10058476:	a816      	add	r0, sp, #88	@ 0x58
10058478:	9000      	str	r0, [sp, #0]
1005847a:	2500      	movs	r5, #0
1005847c:	ab0b      	add	r3, sp, #44	@ 0x2c
1005847e:	980a      	ldr	r0, [sp, #40]	@ 0x28
10058480:	4621      	mov	r1, r4
10058482:	462a      	mov	r2, r5
10058484:	f000 fb18 	bl	10058ab8 <GAT_att_srv_value_read>
10058488:	2800      	cmp	r0, #0
1005848a:	d14f      	bne.n	1005852c <GAT_att_srv_read_by_type_exc+0x1ba>
1005848c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005848e:	8800      	ldrh	r0, [r0, #0]
10058490:	9907      	ldr	r1, [sp, #28]
10058492:	1809      	adds	r1, r1, r0
10058494:	2f01      	cmp	r7, #1
10058496:	d111      	bne.n	100584bc <GAT_att_srv_read_by_type_exc+0x14a>
10058498:	29ff      	cmp	r1, #255	@ 0xff
1005849a:	d300      	bcc.n	1005849e <GAT_att_srv_read_by_type_exc+0x12c>
1005849c:	21ff      	movs	r1, #255	@ 0xff
1005849e:	9801      	ldr	r0, [sp, #4]
100584a0:	4281      	cmp	r1, r0
100584a2:	d300      	bcc.n	100584a6 <GAT_att_srv_read_by_type_exc+0x134>
100584a4:	9901      	ldr	r1, [sp, #4]
100584a6:	9109      	str	r1, [sp, #36]	@ 0x24
100584a8:	b2ca      	uxtb	r2, r1
100584aa:	9e04      	ldr	r6, [sp, #16]
100584ac:	89b0      	ldrh	r0, [r6, #12]
100584ae:	1c40      	adds	r0, r0, #1
100584b0:	b281      	uxth	r1, r0
100584b2:	4630      	mov	r0, r6
100584b4:	f7ff fd22 	bl	10057efc <ACL_pkt_write_8b>
100584b8:	2702      	movs	r7, #2
100584ba:	e003      	b.n	100584c4 <GAT_att_srv_read_by_type_exc+0x152>
100584bc:	42b1      	cmp	r1, r6
100584be:	9e04      	ldr	r6, [sp, #16]
100584c0:	9f06      	ldr	r7, [sp, #24]
100584c2:	d15c      	bne.n	1005857e <GAT_att_srv_read_by_type_exc+0x20c>
100584c4:	8865      	ldrh	r5, [r4, #2]
100584c6:	4620      	mov	r0, r4
100584c8:	f000 fe6a 	bl	100591a0 <GAT_srv_get_att_group_end_handle>
100584cc:	9008      	str	r0, [sp, #32]
100584ce:	89b0      	ldrh	r0, [r6, #12]
100584d0:	19c0      	adds	r0, r0, r7
100584d2:	b281      	uxth	r1, r0
100584d4:	4630      	mov	r0, r6
100584d6:	462a      	mov	r2, r5
100584d8:	f7fd faf9 	bl	10055ace <ACL_pkt_write_16b>
100584dc:	9807      	ldr	r0, [sp, #28]
100584de:	9909      	ldr	r1, [sp, #36]	@ 0x24
100584e0:	1a0a      	subs	r2, r1, r0
100584e2:	463c      	mov	r4, r7
100584e4:	1cbf      	adds	r7, r7, #2
100584e6:	980a      	ldr	r0, [sp, #40]	@ 0x28
100584e8:	7840      	ldrb	r0, [r0, #1]
100584ea:	2810      	cmp	r0, #16
100584ec:	d10a      	bne.n	10058504 <GAT_att_srv_read_by_type_exc+0x192>
100584ee:	89b0      	ldrh	r0, [r6, #12]
100584f0:	19c0      	adds	r0, r0, r7
100584f2:	b281      	uxth	r1, r0
100584f4:	4630      	mov	r0, r6
100584f6:	9d08      	ldr	r5, [sp, #32]
100584f8:	4617      	mov	r7, r2
100584fa:	462a      	mov	r2, r5
100584fc:	f7fd fae7 	bl	10055ace <ACL_pkt_write_16b>
10058500:	463a      	mov	r2, r7
10058502:	1d27      	adds	r7, r4, #4
10058504:	462c      	mov	r4, r5
10058506:	89b0      	ldrh	r0, [r6, #12]
10058508:	19c0      	adds	r0, r0, r7
1005850a:	b281      	uxth	r1, r0
1005850c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005850e:	6843      	ldr	r3, [r0, #4]
10058510:	b2d5      	uxtb	r5, r2
10058512:	4630      	mov	r0, r6
10058514:	462a      	mov	r2, r5
10058516:	f7fd fae3 	bl	10055ae0 <ACL_pkt_write>
1005851a:	197d      	adds	r5, r7, r5
1005851c:	8075      	strh	r5, [r6, #2]
1005851e:	2002      	movs	r0, #2
10058520:	990a      	ldr	r1, [sp, #40]	@ 0x28
10058522:	7008      	strb	r0, [r1, #0]
10058524:	1c60      	adds	r0, r4, #1
10058526:	9008      	str	r0, [sp, #32]
10058528:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1005852a:	e791      	b.n	10058450 <GAT_att_srv_read_by_type_exc+0xde>
1005852c:	2886      	cmp	r0, #134	@ 0x86
1005852e:	9a06      	ldr	r2, [sp, #24]
10058530:	d016      	beq.n	10058560 <GAT_att_srv_read_by_type_exc+0x1ee>
10058532:	2884      	cmp	r0, #132	@ 0x84
10058534:	4605      	mov	r5, r0
10058536:	9804      	ldr	r0, [sp, #16]
10058538:	d121      	bne.n	1005857e <GAT_att_srv_read_by_type_exc+0x20c>
1005853a:	8981      	ldrh	r1, [r0, #12]
1005853c:	1889      	adds	r1, r1, r2
1005853e:	b289      	uxth	r1, r1
10058540:	9a02      	ldr	r2, [sp, #8]
10058542:	f7fd fac4 	bl	10055ace <ACL_pkt_write_16b>
10058546:	2584      	movs	r5, #132	@ 0x84
10058548:	e019      	b.n	1005857e <GAT_att_srv_read_by_type_exc+0x20c>
1005854a:	2f01      	cmp	r7, #1
1005854c:	d106      	bne.n	1005855c <GAT_att_srv_read_by_type_exc+0x1ea>
1005854e:	a816      	add	r0, sp, #88	@ 0x58
10058550:	220a      	movs	r2, #10
10058552:	7002      	strb	r2, [r0, #0]
10058554:	a815      	add	r0, sp, #84	@ 0x54
10058556:	8805      	ldrh	r5, [r0, #0]
10058558:	9c04      	ldr	r4, [sp, #16]
1005855a:	e009      	b.n	10058570 <GAT_att_srv_read_by_type_exc+0x1fe>
1005855c:	2500      	movs	r5, #0
1005855e:	e00e      	b.n	1005857e <GAT_att_srv_read_by_type_exc+0x20c>
10058560:	a816      	add	r0, sp, #88	@ 0x58
10058562:	7802      	ldrb	r2, [r0, #0]
10058564:	9c04      	ldr	r4, [sp, #16]
10058566:	9d08      	ldr	r5, [sp, #32]
10058568:	e002      	b.n	10058570 <GAT_att_srv_read_by_type_exc+0x1fe>
1005856a:	a816      	add	r0, sp, #88	@ 0x58
1005856c:	2210      	movs	r2, #16
1005856e:	7002      	strb	r2, [r0, #0]
10058570:	980a      	ldr	r0, [sp, #40]	@ 0x28
10058572:	7840      	ldrb	r0, [r0, #1]
10058574:	b2a9      	uxth	r1, r5
10058576:	4623      	mov	r3, r4
10058578:	f7ff fd46 	bl	10058008 <GAT_att_srv_write_err_packet>
1005857c:	2586      	movs	r5, #134	@ 0x86
1005857e:	4628      	mov	r0, r5
10058580:	b017      	add	sp, #92	@ 0x5c
10058582:	bdf0      	pop	{r4, r5, r6, r7, pc}

10058584 <GAT_att_srv_read_exc>:
10058584:	b5f0      	push	{r4, r5, r6, r7, lr}
10058586:	b08b      	sub	sp, #44	@ 0x2c
10058588:	4605      	mov	r5, r0
1005858a:	6880      	ldr	r0, [r0, #8]
1005858c:	68c4      	ldr	r4, [r0, #12]
1005858e:	88c7      	ldrh	r7, [r0, #6]
10058590:	7828      	ldrb	r0, [r5, #0]
10058592:	2800      	cmp	r0, #0
10058594:	d024      	beq.n	100585e0 <GAT_att_srv_read_exc+0x5c>
10058596:	462e      	mov	r6, r5
10058598:	360c      	adds	r6, #12
1005859a:	9605      	str	r6, [sp, #20]
1005859c:	6868      	ldr	r0, [r5, #4]
1005859e:	8980      	ldrh	r0, [r0, #12]
100585a0:	1c40      	adds	r0, r0, #1
100585a2:	b281      	uxth	r1, r0
100585a4:	2204      	movs	r2, #4
100585a6:	ab04      	add	r3, sp, #16
100585a8:	4620      	mov	r0, r4
100585aa:	f7fd fa77 	bl	10055a9c <ACL_pkt_read>
100585ae:	8830      	ldrh	r0, [r6, #0]
100585b0:	7869      	ldrb	r1, [r5, #1]
100585b2:	1e7f      	subs	r7, r7, #1
100585b4:	290c      	cmp	r1, #12
100585b6:	d103      	bne.n	100585c0 <GAT_att_srv_read_exc+0x3c>
100585b8:	4287      	cmp	r7, r0
100585ba:	d253      	bcs.n	10058664 <GAT_att_srv_read_exc+0xe0>
100585bc:	9904      	ldr	r1, [sp, #16]
100585be:	1a40      	subs	r0, r0, r1
100585c0:	b280      	uxth	r0, r0
100585c2:	4287      	cmp	r7, r0
100585c4:	d300      	bcc.n	100585c8 <GAT_att_srv_read_exc+0x44>
100585c6:	4607      	mov	r7, r0
100585c8:	b2ba      	uxth	r2, r7
100585ca:	6873      	ldr	r3, [r6, #4]
100585cc:	89a0      	ldrh	r0, [r4, #12]
100585ce:	1c40      	adds	r0, r0, #1
100585d0:	b281      	uxth	r1, r0
100585d2:	4620      	mov	r0, r4
100585d4:	f7fd fa84 	bl	10055ae0 <ACL_pkt_write>
100585d8:	1c78      	adds	r0, r7, #1
100585da:	8060      	strh	r0, [r4, #2]
100585dc:	2000      	movs	r0, #0
100585de:	e04d      	b.n	1005867c <GAT_att_srv_read_exc+0xf8>
100585e0:	7868      	ldrb	r0, [r5, #1]
100585e2:	280c      	cmp	r0, #12
100585e4:	9702      	str	r7, [sp, #8]
100585e6:	d107      	bne.n	100585f8 <GAT_att_srv_read_exc+0x74>
100585e8:	6868      	ldr	r0, [r5, #4]
100585ea:	8981      	ldrh	r1, [r0, #12]
100585ec:	1cc9      	adds	r1, r1, #3
100585ee:	b289      	uxth	r1, r1
100585f0:	f7fd fa5d 	bl	10055aae <ACL_pkt_read_16b>
100585f4:	220d      	movs	r2, #13
100585f6:	e001      	b.n	100585fc <GAT_att_srv_read_exc+0x78>
100585f8:	220b      	movs	r2, #11
100585fa:	2000      	movs	r0, #0
100585fc:	af04      	add	r7, sp, #16
100585fe:	9003      	str	r0, [sp, #12]
10058600:	8038      	strh	r0, [r7, #0]
10058602:	89a1      	ldrh	r1, [r4, #12]
10058604:	4620      	mov	r0, r4
10058606:	f7ff fc79 	bl	10057efc <ACL_pkt_write_8b>
1005860a:	6868      	ldr	r0, [r5, #4]
1005860c:	8981      	ldrh	r1, [r0, #12]
1005860e:	1c49      	adds	r1, r1, #1
10058610:	b289      	uxth	r1, r1
10058612:	f7fd fa4c 	bl	10055aae <ACL_pkt_read_16b>
10058616:	4606      	mov	r6, r0
10058618:	8078      	strh	r0, [r7, #2]
1005861a:	a807      	add	r0, sp, #28
1005861c:	8106      	strh	r6, [r0, #8]
1005861e:	2701      	movs	r7, #1
10058620:	7107      	strb	r7, [r0, #4]
10058622:	68a9      	ldr	r1, [r5, #8]
10058624:	9107      	str	r1, [sp, #28]
10058626:	f001 f8a7 	bl	10059778 <GAT_srv_check_change_aware>
1005862a:	2886      	cmp	r0, #134	@ 0x86
1005862c:	d101      	bne.n	10058632 <GAT_att_srv_read_exc+0xae>
1005862e:	2712      	movs	r7, #18
10058630:	e015      	b.n	1005865e <GAT_att_srv_read_exc+0xda>
10058632:	4630      	mov	r0, r6
10058634:	f00c ffa4 	bl	10065580 <GAT_att_db_find_by_handle>
10058638:	2800      	cmp	r0, #0
1005863a:	d010      	beq.n	1005865e <GAT_att_srv_read_exc+0xda>
1005863c:	4601      	mov	r1, r0
1005863e:	a806      	add	r0, sp, #24
10058640:	9000      	str	r0, [sp, #0]
10058642:	ab05      	add	r3, sp, #20
10058644:	4628      	mov	r0, r5
10058646:	9a03      	ldr	r2, [sp, #12]
10058648:	f000 fa36 	bl	10058ab8 <GAT_att_srv_value_read>
1005864c:	2800      	cmp	r0, #0
1005864e:	d017      	beq.n	10058680 <GAT_att_srv_read_exc+0xfc>
10058650:	2884      	cmp	r0, #132	@ 0x84
10058652:	d018      	beq.n	10058686 <GAT_att_srv_read_exc+0x102>
10058654:	2886      	cmp	r0, #134	@ 0x86
10058656:	d111      	bne.n	1005867c <GAT_att_srv_read_exc+0xf8>
10058658:	a806      	add	r0, sp, #24
1005865a:	7807      	ldrb	r7, [r0, #0]
1005865c:	e007      	b.n	1005866e <GAT_att_srv_read_exc+0xea>
1005865e:	a806      	add	r0, sp, #24
10058660:	7007      	strb	r7, [r0, #0]
10058662:	e004      	b.n	1005866e <GAT_att_srv_read_exc+0xea>
10058664:	a806      	add	r0, sp, #24
10058666:	270b      	movs	r7, #11
10058668:	7007      	strb	r7, [r0, #0]
1005866a:	a804      	add	r0, sp, #16
1005866c:	8846      	ldrh	r6, [r0, #2]
1005866e:	7868      	ldrb	r0, [r5, #1]
10058670:	4631      	mov	r1, r6
10058672:	463a      	mov	r2, r7
10058674:	4623      	mov	r3, r4
10058676:	f7ff fcc7 	bl	10058008 <GAT_att_srv_write_err_packet>
1005867a:	2086      	movs	r0, #134	@ 0x86
1005867c:	b00b      	add	sp, #44	@ 0x2c
1005867e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10058680:	9e05      	ldr	r6, [sp, #20]
10058682:	9f02      	ldr	r7, [sp, #8]
10058684:	e793      	b.n	100585ae <GAT_att_srv_read_exc+0x2a>
10058686:	89a0      	ldrh	r0, [r4, #12]
10058688:	1c40      	adds	r0, r0, #1
1005868a:	b281      	uxth	r1, r0
1005868c:	2204      	movs	r2, #4
1005868e:	ab04      	add	r3, sp, #16
10058690:	4620      	mov	r0, r4
10058692:	f7fd fa25 	bl	10055ae0 <ACL_pkt_write>
10058696:	2084      	movs	r0, #132	@ 0x84
10058698:	e7f0      	b.n	1005867c <GAT_att_srv_read_exc+0xf8>

1005869a <GAT_att_srv_read_multi_exc>:
1005869a:	b5f0      	push	{r4, r5, r6, r7, lr}
1005869c:	b08d      	sub	sp, #52	@ 0x34
1005869e:	6881      	ldr	r1, [r0, #8]
100586a0:	68ce      	ldr	r6, [r1, #12]
100586a2:	88c9      	ldrh	r1, [r1, #6]
100586a4:	9106      	str	r1, [sp, #24]
100586a6:	7801      	ldrb	r1, [r0, #0]
100586a8:	2900      	cmp	r1, #0
100586aa:	9007      	str	r0, [sp, #28]
100586ac:	d009      	beq.n	100586c2 <GAT_att_srv_read_multi_exc+0x28>
100586ae:	8877      	ldrh	r7, [r6, #2]
100586b0:	89b0      	ldrh	r0, [r6, #12]
100586b2:	19c0      	adds	r0, r0, r7
100586b4:	b281      	uxth	r1, r0
100586b6:	4630      	mov	r0, r6
100586b8:	f7fd f9f9 	bl	10055aae <ACL_pkt_read_16b>
100586bc:	9907      	ldr	r1, [sp, #28]
100586be:	4602      	mov	r2, r0
100586c0:	e00c      	b.n	100586dc <GAT_att_srv_read_multi_exc+0x42>
100586c2:	7840      	ldrb	r0, [r0, #1]
100586c4:	280e      	cmp	r0, #14
100586c6:	d001      	beq.n	100586cc <GAT_att_srv_read_multi_exc+0x32>
100586c8:	2221      	movs	r2, #33	@ 0x21
100586ca:	e000      	b.n	100586ce <GAT_att_srv_read_multi_exc+0x34>
100586cc:	220f      	movs	r2, #15
100586ce:	89b1      	ldrh	r1, [r6, #12]
100586d0:	4630      	mov	r0, r6
100586d2:	f7ff fc13 	bl	10057efc <ACL_pkt_write_8b>
100586d6:	2201      	movs	r2, #1
100586d8:	4617      	mov	r7, r2
100586da:	9907      	ldr	r1, [sp, #28]
100586dc:	6848      	ldr	r0, [r1, #4]
100586de:	7880      	ldrb	r0, [r0, #2]
100586e0:	1a80      	subs	r0, r0, r2
100586e2:	b2c0      	uxtb	r0, r0
100586e4:	0845      	lsrs	r5, r0, #1
100586e6:	7808      	ldrb	r0, [r1, #0]
100586e8:	2800      	cmp	r0, #0
100586ea:	9602      	str	r6, [sp, #8]
100586ec:	d066      	beq.n	100587bc <GAT_att_srv_read_multi_exc+0x122>
100586ee:	9907      	ldr	r1, [sp, #28]
100586f0:	4608      	mov	r0, r1
100586f2:	300c      	adds	r0, #12
100586f4:	9001      	str	r0, [sp, #4]
100586f6:	b2ed      	uxtb	r5, r5
100586f8:	35ff      	adds	r5, #255	@ 0xff
100586fa:	b2e8      	uxtb	r0, r5
100586fc:	2300      	movs	r3, #0
100586fe:	9303      	str	r3, [sp, #12]
10058700:	42a8      	cmp	r0, r5
10058702:	d100      	bne.n	10058706 <GAT_att_srv_read_multi_exc+0x6c>
10058704:	e0b3      	b.n	1005886e <GAT_att_srv_read_multi_exc+0x1d4>
10058706:	b2bc      	uxth	r4, r7
10058708:	9806      	ldr	r0, [sp, #24]
1005870a:	42a0      	cmp	r0, r4
1005870c:	d800      	bhi.n	10058710 <GAT_att_srv_read_multi_exc+0x76>
1005870e:	e0ae      	b.n	1005886e <GAT_att_srv_read_multi_exc+0x1d4>
10058710:	6848      	ldr	r0, [r1, #4]
10058712:	8981      	ldrh	r1, [r0, #12]
10058714:	9205      	str	r2, [sp, #20]
10058716:	1889      	adds	r1, r1, r2
10058718:	b289      	uxth	r1, r1
1005871a:	2202      	movs	r2, #2
1005871c:	ab0c      	add	r3, sp, #48	@ 0x30
1005871e:	9204      	str	r2, [sp, #16]
10058720:	f7fd f9bc 	bl	10055a9c <ACL_pkt_read>
10058724:	9907      	ldr	r1, [sp, #28]
10058726:	7808      	ldrb	r0, [r1, #0]
10058728:	2801      	cmp	r0, #1
1005872a:	d102      	bne.n	10058732 <GAT_att_srv_read_multi_exc+0x98>
1005872c:	9801      	ldr	r0, [sp, #4]
1005872e:	9008      	str	r0, [sp, #32]
10058730:	e00d      	b.n	1005874e <GAT_att_srv_read_multi_exc+0xb4>
10058732:	a80c      	add	r0, sp, #48	@ 0x30
10058734:	8800      	ldrh	r0, [r0, #0]
10058736:	f00c ff23 	bl	10065580 <GAT_att_db_find_by_handle>
1005873a:	4601      	mov	r1, r0
1005873c:	9807      	ldr	r0, [sp, #28]
1005873e:	6880      	ldr	r0, [r0, #8]
10058740:	8900      	ldrh	r0, [r0, #8]
10058742:	aa08      	add	r2, sp, #32
10058744:	f000 fdc6 	bl	100592d4 <GAT_srv_get_attr_value>
10058748:	9907      	ldr	r1, [sp, #28]
1005874a:	2884      	cmp	r0, #132	@ 0x84
1005874c:	d065      	beq.n	1005881a <GAT_att_srv_read_multi_exc+0x180>
1005874e:	9806      	ldr	r0, [sp, #24]
10058750:	1b04      	subs	r4, r0, r4
10058752:	7848      	ldrb	r0, [r1, #1]
10058754:	280e      	cmp	r0, #14
10058756:	d109      	bne.n	1005876c <GAT_att_srv_read_multi_exc+0xd2>
10058758:	89b0      	ldrh	r0, [r6, #12]
1005875a:	19c1      	adds	r1, r0, r7
1005875c:	9808      	ldr	r0, [sp, #32]
1005875e:	8802      	ldrh	r2, [r0, #0]
10058760:	4294      	cmp	r4, r2
10058762:	db00      	blt.n	10058766 <GAT_att_srv_read_multi_exc+0xcc>
10058764:	4614      	mov	r4, r2
10058766:	b289      	uxth	r1, r1
10058768:	b2a2      	uxth	r2, r4
1005876a:	e013      	b.n	10058794 <GAT_att_srv_read_multi_exc+0xfa>
1005876c:	89b0      	ldrh	r0, [r6, #12]
1005876e:	19c0      	adds	r0, r0, r7
10058770:	b281      	uxth	r1, r0
10058772:	9a08      	ldr	r2, [sp, #32]
10058774:	4630      	mov	r0, r6
10058776:	8816      	ldrh	r6, [r2, #0]
10058778:	4632      	mov	r2, r6
1005877a:	f7fd f9a8 	bl	10055ace <ACL_pkt_write_16b>
1005877e:	1ea4      	subs	r4, r4, #2
10058780:	42b4      	cmp	r4, r6
10058782:	d300      	bcc.n	10058786 <GAT_att_srv_read_multi_exc+0xec>
10058784:	4634      	mov	r4, r6
10058786:	b2a2      	uxth	r2, r4
10058788:	1cbf      	adds	r7, r7, #2
1005878a:	9e02      	ldr	r6, [sp, #8]
1005878c:	89b0      	ldrh	r0, [r6, #12]
1005878e:	19c0      	adds	r0, r0, r7
10058790:	b281      	uxth	r1, r0
10058792:	9808      	ldr	r0, [sp, #32]
10058794:	6843      	ldr	r3, [r0, #4]
10058796:	4630      	mov	r0, r6
10058798:	f7fd f9a2 	bl	10055ae0 <ACL_pkt_write>
1005879c:	193f      	adds	r7, r7, r4
1005879e:	8077      	strh	r7, [r6, #2]
100587a0:	9907      	ldr	r1, [sp, #28]
100587a2:	7848      	ldrb	r0, [r1, #1]
100587a4:	2820      	cmp	r0, #32
100587a6:	9a05      	ldr	r2, [sp, #20]
100587a8:	d104      	bne.n	100587b4 <GAT_att_srv_read_multi_exc+0x11a>
100587aa:	9806      	ldr	r0, [sp, #24]
100587ac:	1bc0      	subs	r0, r0, r7
100587ae:	b280      	uxth	r0, r0
100587b0:	2802      	cmp	r0, #2
100587b2:	d35c      	bcc.n	1005886e <GAT_att_srv_read_multi_exc+0x1d4>
100587b4:	9804      	ldr	r0, [sp, #16]
100587b6:	7008      	strb	r0, [r1, #0]
100587b8:	1c92      	adds	r2, r2, #2
100587ba:	e79c      	b.n	100586f6 <GAT_att_srv_read_multi_exc+0x5c>
100587bc:	2100      	movs	r1, #0
100587be:	9205      	str	r2, [sp, #20]
100587c0:	9c07      	ldr	r4, [sp, #28]
100587c2:	b288      	uxth	r0, r1
100587c4:	42a8      	cmp	r0, r5
100587c6:	d292      	bcs.n	100586ee <GAT_att_srv_read_multi_exc+0x54>
100587c8:	9104      	str	r1, [sp, #16]
100587ca:	0049      	lsls	r1, r1, #1
100587cc:	6860      	ldr	r0, [r4, #4]
100587ce:	8982      	ldrh	r2, [r0, #12]
100587d0:	1851      	adds	r1, r2, r1
100587d2:	1c49      	adds	r1, r1, #1
100587d4:	b289      	uxth	r1, r1
100587d6:	2202      	movs	r2, #2
100587d8:	ab0c      	add	r3, sp, #48	@ 0x30
100587da:	f7fd f95f 	bl	10055a9c <ACL_pkt_read>
100587de:	a808      	add	r0, sp, #32
100587e0:	2601      	movs	r6, #1
100587e2:	7106      	strb	r6, [r0, #4]
100587e4:	990c      	ldr	r1, [sp, #48]	@ 0x30
100587e6:	8101      	strh	r1, [r0, #8]
100587e8:	68a1      	ldr	r1, [r4, #8]
100587ea:	9108      	str	r1, [sp, #32]
100587ec:	f000 ffc4 	bl	10059778 <GAT_srv_check_change_aware>
100587f0:	2886      	cmp	r0, #134	@ 0x86
100587f2:	d02a      	beq.n	1005884a <GAT_att_srv_read_multi_exc+0x1b0>
100587f4:	a80c      	add	r0, sp, #48	@ 0x30
100587f6:	8800      	ldrh	r0, [r0, #0]
100587f8:	f00c fec2 	bl	10065580 <GAT_att_db_find_by_handle>
100587fc:	2800      	cmp	r0, #0
100587fe:	d027      	beq.n	10058850 <GAT_att_srv_read_multi_exc+0x1b6>
10058800:	9907      	ldr	r1, [sp, #28]
10058802:	6889      	ldr	r1, [r1, #8]
10058804:	8909      	ldrh	r1, [r1, #8]
10058806:	2201      	movs	r2, #1
10058808:	f000 fcee 	bl	100591e8 <GAT_srv_check_perms>
1005880c:	2800      	cmp	r0, #0
1005880e:	d11e      	bne.n	1005884e <GAT_att_srv_read_multi_exc+0x1b4>
10058810:	9904      	ldr	r1, [sp, #16]
10058812:	1c49      	adds	r1, r1, #1
10058814:	9e02      	ldr	r6, [sp, #8]
10058816:	9a05      	ldr	r2, [sp, #20]
10058818:	e7d3      	b.n	100587c2 <GAT_att_srv_read_multi_exc+0x128>
1005881a:	a80c      	add	r0, sp, #48	@ 0x30
1005881c:	8803      	ldrh	r3, [r0, #0]
1005881e:	6888      	ldr	r0, [r1, #8]
10058820:	8942      	ldrh	r2, [r0, #10]
10058822:	8901      	ldrh	r1, [r0, #8]
10058824:	2000      	movs	r0, #0
10058826:	9000      	str	r0, [sp, #0]
10058828:	2002      	movs	r0, #2
1005882a:	f00b fe45 	bl	100644b8 <aci_gatt_srv_read_event_push_noinline>
1005882e:	9003      	str	r0, [sp, #12]
10058830:	2800      	cmp	r0, #0
10058832:	9a05      	ldr	r2, [sp, #20]
10058834:	d11b      	bne.n	1005886e <GAT_att_srv_read_multi_exc+0x1d4>
10058836:	8077      	strh	r7, [r6, #2]
10058838:	89b0      	ldrh	r0, [r6, #12]
1005883a:	19c0      	adds	r0, r0, r7
1005883c:	b281      	uxth	r1, r0
1005883e:	b292      	uxth	r2, r2
10058840:	4630      	mov	r0, r6
10058842:	f7fd f944 	bl	10055ace <ACL_pkt_write_16b>
10058846:	2084      	movs	r0, #132	@ 0x84
10058848:	e010      	b.n	1005886c <GAT_att_srv_read_multi_exc+0x1d2>
1005884a:	2612      	movs	r6, #18
1005884c:	e000      	b.n	10058850 <GAT_att_srv_read_multi_exc+0x1b6>
1005884e:	4606      	mov	r6, r0
10058850:	a80c      	add	r0, sp, #48	@ 0x30
10058852:	8801      	ldrh	r1, [r0, #0]
10058854:	9807      	ldr	r0, [sp, #28]
10058856:	7840      	ldrb	r0, [r0, #1]
10058858:	280e      	cmp	r0, #14
1005885a:	d101      	bne.n	10058860 <GAT_att_srv_read_multi_exc+0x1c6>
1005885c:	200e      	movs	r0, #14
1005885e:	e000      	b.n	10058862 <GAT_att_srv_read_multi_exc+0x1c8>
10058860:	2020      	movs	r0, #32
10058862:	4632      	mov	r2, r6
10058864:	9b02      	ldr	r3, [sp, #8]
10058866:	f7ff fbcf 	bl	10058008 <GAT_att_srv_write_err_packet>
1005886a:	2086      	movs	r0, #134	@ 0x86
1005886c:	9003      	str	r0, [sp, #12]
1005886e:	9803      	ldr	r0, [sp, #12]
10058870:	b00d      	add	sp, #52	@ 0x34
10058872:	bdf0      	pop	{r4, r5, r6, r7, pc}

10058874 <GAT_att_srv_write_exc>:
10058874:	b5f0      	push	{r4, r5, r6, r7, lr}
10058876:	b089      	sub	sp, #36	@ 0x24
10058878:	4604      	mov	r4, r0
1005887a:	7800      	ldrb	r0, [r0, #0]
1005887c:	2800      	cmp	r0, #0
1005887e:	d001      	beq.n	10058884 <GAT_att_srv_write_exc+0x10>
10058880:	2000      	movs	r0, #0
10058882:	e03b      	b.n	100588fc <GAT_att_srv_write_exc+0x88>
10058884:	6860      	ldr	r0, [r4, #4]
10058886:	68a1      	ldr	r1, [r4, #8]
10058888:	68c9      	ldr	r1, [r1, #12]
1005888a:	9106      	str	r1, [sp, #24]
1005888c:	8846      	ldrh	r6, [r0, #2]
1005888e:	8981      	ldrh	r1, [r0, #12]
10058890:	1c49      	adds	r1, r1, #1
10058892:	b289      	uxth	r1, r1
10058894:	f7fd f90b 	bl	10055aae <ACL_pkt_read_16b>
10058898:	4605      	mov	r5, r0
1005889a:	1ef1      	subs	r1, r6, #3
1005889c:	7860      	ldrb	r0, [r4, #1]
1005889e:	2700      	movs	r7, #0
100588a0:	2852      	cmp	r0, #82	@ 0x52
100588a2:	d00c      	beq.n	100588be <GAT_att_srv_write_exc+0x4a>
100588a4:	28d2      	cmp	r0, #210	@ 0xd2
100588a6:	d10e      	bne.n	100588c6 <GAT_att_srv_write_exc+0x52>
100588a8:	68a0      	ldr	r0, [r4, #8]
100588aa:	8940      	ldrh	r0, [r0, #10]
100588ac:	2804      	cmp	r0, #4
100588ae:	d124      	bne.n	100588fa <GAT_att_srv_write_exc+0x86>
100588b0:	3e0f      	subs	r6, #15
100588b2:	2205      	movs	r2, #5
100588b4:	2701      	movs	r7, #1
100588b6:	2000      	movs	r0, #0
100588b8:	9004      	str	r0, [sp, #16]
100588ba:	9605      	str	r6, [sp, #20]
100588bc:	e00e      	b.n	100588dc <GAT_att_srv_write_exc+0x68>
100588be:	9105      	str	r1, [sp, #20]
100588c0:	2204      	movs	r2, #4
100588c2:	9704      	str	r7, [sp, #16]
100588c4:	e00a      	b.n	100588dc <GAT_att_srv_write_exc+0x68>
100588c6:	9105      	str	r1, [sp, #20]
100588c8:	9e06      	ldr	r6, [sp, #24]
100588ca:	89b1      	ldrh	r1, [r6, #12]
100588cc:	2213      	movs	r2, #19
100588ce:	4630      	mov	r0, r6
100588d0:	f7ff fb14 	bl	10057efc <ACL_pkt_write_8b>
100588d4:	2001      	movs	r0, #1
100588d6:	9004      	str	r0, [sp, #16]
100588d8:	8070      	strh	r0, [r6, #2]
100588da:	2203      	movs	r2, #3
100588dc:	ab07      	add	r3, sp, #28
100588de:	4620      	mov	r0, r4
100588e0:	4629      	mov	r1, r5
100588e2:	f000 f936 	bl	10058b52 <GAT_att_srv_set_attr_value_check>
100588e6:	4602      	mov	r2, r0
100588e8:	a808      	add	r0, sp, #32
100588ea:	7002      	strb	r2, [r0, #0]
100588ec:	2a00      	cmp	r2, #0
100588ee:	d007      	beq.n	10058900 <GAT_att_srv_write_exc+0x8c>
100588f0:	7860      	ldrb	r0, [r4, #1]
100588f2:	4629      	mov	r1, r5
100588f4:	9b06      	ldr	r3, [sp, #24]
100588f6:	f7ff fb87 	bl	10058008 <GAT_att_srv_write_err_packet>
100588fa:	2086      	movs	r0, #134	@ 0x86
100588fc:	b009      	add	sp, #36	@ 0x24
100588fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10058900:	2f00      	cmp	r7, #0
10058902:	d008      	beq.n	10058916 <GAT_att_srv_write_exc+0xa2>
10058904:	6861      	ldr	r1, [r4, #4]
10058906:	68a0      	ldr	r0, [r4, #8]
10058908:	8900      	ldrh	r0, [r0, #8]
1005890a:	f00a fc94 	bl	10063236 <smp_sap_sm2_packet_data_signing_validate>
1005890e:	2800      	cmp	r0, #0
10058910:	d001      	beq.n	10058916 <GAT_att_srv_write_exc+0xa2>
10058912:	2200      	movs	r2, #0
10058914:	e7ec      	b.n	100588f0 <GAT_att_srv_write_exc+0x7c>
10058916:	6861      	ldr	r1, [r4, #4]
10058918:	9807      	ldr	r0, [sp, #28]
1005891a:	aa08      	add	r2, sp, #32
1005891c:	f000 fdda 	bl	100594d4 <GAT_srv_attr_value_write>
10058920:	2800      	cmp	r0, #0
10058922:	d0eb      	beq.n	100588fc <GAT_att_srv_write_exc+0x88>
10058924:	2884      	cmp	r0, #132	@ 0x84
10058926:	d112      	bne.n	1005894e <GAT_att_srv_write_exc+0xda>
10058928:	6860      	ldr	r0, [r4, #4]
1005892a:	68a1      	ldr	r1, [r4, #8]
1005892c:	894a      	ldrh	r2, [r1, #10]
1005892e:	8909      	ldrh	r1, [r1, #8]
10058930:	9b05      	ldr	r3, [sp, #20]
10058932:	b29b      	uxth	r3, r3
10058934:	9500      	str	r5, [sp, #0]
10058936:	9301      	str	r3, [sp, #4]
10058938:	9002      	str	r0, [sp, #8]
1005893a:	200a      	movs	r0, #10
1005893c:	9b04      	ldr	r3, [sp, #16]
1005893e:	f00b fdf5 	bl	1006452c <aci_gatt_srv_write_event_push_noinline>
10058942:	2800      	cmp	r0, #0
10058944:	d1da      	bne.n	100588fc <GAT_att_srv_write_exc+0x88>
10058946:	2000      	movs	r0, #0
10058948:	6060      	str	r0, [r4, #4]
1005894a:	2084      	movs	r0, #132	@ 0x84
1005894c:	e7d6      	b.n	100588fc <GAT_att_srv_write_exc+0x88>
1005894e:	a808      	add	r0, sp, #32
10058950:	7802      	ldrb	r2, [r0, #0]
10058952:	e7cd      	b.n	100588f0 <GAT_att_srv_write_exc+0x7c>

10058954 <GAT_att_srv_prep_wr_exc>:
10058954:	b570      	push	{r4, r5, r6, lr}
10058956:	b086      	sub	sp, #24
10058958:	4604      	mov	r4, r0
1005895a:	7800      	ldrb	r0, [r0, #0]
1005895c:	2800      	cmp	r0, #0
1005895e:	d014      	beq.n	1005898a <GAT_att_srv_prep_wr_exc+0x36>
10058960:	89a5      	ldrh	r5, [r4, #12]
10058962:	68a0      	ldr	r0, [r4, #8]
10058964:	88c1      	ldrh	r1, [r0, #6]
10058966:	1f49      	subs	r1, r1, #5
10058968:	42a9      	cmp	r1, r5
1005896a:	d800      	bhi.n	1005896e <GAT_att_srv_prep_wr_exc+0x1a>
1005896c:	460d      	mov	r5, r1
1005896e:	b2aa      	uxth	r2, r5
10058970:	6923      	ldr	r3, [r4, #16]
10058972:	68c0      	ldr	r0, [r0, #12]
10058974:	8981      	ldrh	r1, [r0, #12]
10058976:	1d49      	adds	r1, r1, #5
10058978:	b289      	uxth	r1, r1
1005897a:	f7fd f8b1 	bl	10055ae0 <ACL_pkt_write>
1005897e:	1d68      	adds	r0, r5, #5
10058980:	68a1      	ldr	r1, [r4, #8]
10058982:	68c9      	ldr	r1, [r1, #12]
10058984:	8048      	strh	r0, [r1, #2]
10058986:	2000      	movs	r0, #0
10058988:	e040      	b.n	10058a0c <GAT_att_srv_prep_wr_exc+0xb8>
1005898a:	6860      	ldr	r0, [r4, #4]
1005898c:	8981      	ldrh	r1, [r0, #12]
1005898e:	1c49      	adds	r1, r1, #1
10058990:	b289      	uxth	r1, r1
10058992:	f7fd f88c 	bl	10055aae <ACL_pkt_read_16b>
10058996:	4605      	mov	r5, r0
10058998:	2203      	movs	r2, #3
1005899a:	ab05      	add	r3, sp, #20
1005899c:	4620      	mov	r0, r4
1005899e:	4629      	mov	r1, r5
100589a0:	f000 f8d7 	bl	10058b52 <GAT_att_srv_set_attr_value_check>
100589a4:	2800      	cmp	r0, #0
100589a6:	d008      	beq.n	100589ba <GAT_att_srv_prep_wr_exc+0x66>
100589a8:	4602      	mov	r2, r0
100589aa:	68a0      	ldr	r0, [r4, #8]
100589ac:	68c3      	ldr	r3, [r0, #12]
100589ae:	2016      	movs	r0, #22
100589b0:	4629      	mov	r1, r5
100589b2:	f7ff fb29 	bl	10058008 <GAT_att_srv_write_err_packet>
100589b6:	2086      	movs	r0, #134	@ 0x86
100589b8:	e028      	b.n	10058a0c <GAT_att_srv_prep_wr_exc+0xb8>
100589ba:	6860      	ldr	r0, [r4, #4]
100589bc:	8981      	ldrh	r1, [r0, #12]
100589be:	1cc9      	adds	r1, r1, #3
100589c0:	b289      	uxth	r1, r1
100589c2:	f7fd f874 	bl	10055aae <ACL_pkt_read_16b>
100589c6:	4606      	mov	r6, r0
100589c8:	6860      	ldr	r0, [r4, #4]
100589ca:	68a1      	ldr	r1, [r4, #8]
100589cc:	894a      	ldrh	r2, [r1, #10]
100589ce:	8909      	ldrh	r1, [r1, #8]
100589d0:	8843      	ldrh	r3, [r0, #2]
100589d2:	1f5b      	subs	r3, r3, #5
100589d4:	b29b      	uxth	r3, r3
100589d6:	9600      	str	r6, [sp, #0]
100589d8:	9301      	str	r3, [sp, #4]
100589da:	9002      	str	r0, [sp, #8]
100589dc:	200a      	movs	r0, #10
100589de:	462b      	mov	r3, r5
100589e0:	f00c f80c 	bl	100649fc <aci_att_srv_prepare_write_req_event_push_noinline>
100589e4:	2800      	cmp	r0, #0
100589e6:	d111      	bne.n	10058a0c <GAT_att_srv_prep_wr_exc+0xb8>
100589e8:	ab03      	add	r3, sp, #12
100589ea:	705d      	strb	r5, [r3, #1]
100589ec:	0a28      	lsrs	r0, r5, #8
100589ee:	7098      	strb	r0, [r3, #2]
100589f0:	70de      	strb	r6, [r3, #3]
100589f2:	2017      	movs	r0, #23
100589f4:	7018      	strb	r0, [r3, #0]
100589f6:	0a30      	lsrs	r0, r6, #8
100589f8:	7118      	strb	r0, [r3, #4]
100589fa:	68a0      	ldr	r0, [r4, #8]
100589fc:	68c0      	ldr	r0, [r0, #12]
100589fe:	8981      	ldrh	r1, [r0, #12]
10058a00:	2205      	movs	r2, #5
10058a02:	f7fd f86d 	bl	10055ae0 <ACL_pkt_write>
10058a06:	2000      	movs	r0, #0
10058a08:	6060      	str	r0, [r4, #4]
10058a0a:	2084      	movs	r0, #132	@ 0x84
10058a0c:	b006      	add	sp, #24
10058a0e:	bd70      	pop	{r4, r5, r6, pc}

10058a10 <GAT_att_srv_exec_wr_exc>:
10058a10:	b510      	push	{r4, lr}
10058a12:	4604      	mov	r4, r0
10058a14:	7800      	ldrb	r0, [r0, #0]
10058a16:	2800      	cmp	r0, #0
10058a18:	d001      	beq.n	10058a1e <GAT_att_srv_exec_wr_exc+0xe>
10058a1a:	2000      	movs	r0, #0
10058a1c:	bd10      	pop	{r4, pc}
10058a1e:	6860      	ldr	r0, [r4, #4]
10058a20:	8981      	ldrh	r1, [r0, #12]
10058a22:	1c49      	adds	r1, r1, #1
10058a24:	b289      	uxth	r1, r1
10058a26:	f000 f884 	bl	10058b32 <ACL_pkt_read_8b>
10058a2a:	4603      	mov	r3, r0
10058a2c:	68a0      	ldr	r0, [r4, #8]
10058a2e:	8942      	ldrh	r2, [r0, #10]
10058a30:	8901      	ldrh	r1, [r0, #8]
10058a32:	2002      	movs	r0, #2
10058a34:	f00c f810 	bl	10064a58 <aci_att_srv_exec_write_req_event_push_noinline>
10058a38:	2800      	cmp	r0, #0
10058a3a:	d000      	beq.n	10058a3e <GAT_att_srv_exec_wr_exc+0x2e>
10058a3c:	bd10      	pop	{r4, pc}
10058a3e:	68a0      	ldr	r0, [r4, #8]
10058a40:	68c0      	ldr	r0, [r0, #12]
10058a42:	8981      	ldrh	r1, [r0, #12]
10058a44:	2219      	movs	r2, #25
10058a46:	f7ff fa59 	bl	10057efc <ACL_pkt_write_8b>
10058a4a:	68a0      	ldr	r0, [r4, #8]
10058a4c:	68c0      	ldr	r0, [r0, #12]
10058a4e:	2101      	movs	r1, #1
10058a50:	8041      	strh	r1, [r0, #2]
10058a52:	2084      	movs	r0, #132	@ 0x84
10058a54:	bd10      	pop	{r4, pc}

10058a56 <GAT_att_srv_confirm_exc>:
10058a56:	b5b0      	push	{r4, r5, r7, lr}
10058a58:	4605      	mov	r5, r0
10058a5a:	6880      	ldr	r0, [r0, #8]
10058a5c:	8942      	ldrh	r2, [r0, #10]
10058a5e:	8901      	ldrh	r1, [r0, #8]
10058a60:	2042      	movs	r0, #66	@ 0x42
10058a62:	f00b fcf7 	bl	10064454 <aci_gatt_srv_confirmation_event_push_noinline>
10058a66:	4604      	mov	r4, r0
10058a68:	2800      	cmp	r0, #0
10058a6a:	d110      	bne.n	10058a8e <GAT_att_srv_confirm_exc+0x38>
10058a6c:	68a8      	ldr	r0, [r5, #8]
10058a6e:	8942      	ldrh	r2, [r0, #10]
10058a70:	8901      	ldrh	r1, [r0, #8]
10058a72:	2001      	movs	r0, #1
10058a74:	f7fe fef2 	bl	1005785c <GAT_att_cmn_stop_timer>
10058a78:	68a8      	ldr	r0, [r5, #8]
10058a7a:	8881      	ldrh	r1, [r0, #4]
10058a7c:	064a      	lsls	r2, r1, #25
10058a7e:	d503      	bpl.n	10058a88 <GAT_att_srv_confirm_exc+0x32>
10058a80:	f000 fe6c 	bl	1005975c <GAT_srv_set_change_aware>
10058a84:	68a8      	ldr	r0, [r5, #8]
10058a86:	8881      	ldrh	r1, [r0, #4]
10058a88:	2202      	movs	r2, #2
10058a8a:	4391      	bics	r1, r2
10058a8c:	8081      	strh	r1, [r0, #4]
10058a8e:	4620      	mov	r0, r4
10058a90:	bdb0      	pop	{r4, r5, r7, pc}

10058a92 <GAT_att_srv_get_handle_range>:
10058a92:	b570      	push	{r4, r5, r6, lr}
10058a94:	4614      	mov	r4, r2
10058a96:	460d      	mov	r5, r1
10058a98:	4606      	mov	r6, r0
10058a9a:	8980      	ldrh	r0, [r0, #12]
10058a9c:	1c40      	adds	r0, r0, #1
10058a9e:	b281      	uxth	r1, r0
10058aa0:	4630      	mov	r0, r6
10058aa2:	f7fd f804 	bl	10055aae <ACL_pkt_read_16b>
10058aa6:	8028      	strh	r0, [r5, #0]
10058aa8:	89b0      	ldrh	r0, [r6, #12]
10058aaa:	1cc0      	adds	r0, r0, #3
10058aac:	b281      	uxth	r1, r0
10058aae:	4630      	mov	r0, r6
10058ab0:	f7fc fffd 	bl	10055aae <ACL_pkt_read_16b>
10058ab4:	8020      	strh	r0, [r4, #0]
10058ab6:	bd70      	pop	{r4, r5, r6, pc}

10058ab8 <GAT_att_srv_value_read>:
10058ab8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10058aba:	461f      	mov	r7, r3
10058abc:	4606      	mov	r6, r0
10058abe:	9d08      	ldr	r5, [sp, #32]
10058ac0:	2400      	movs	r4, #0
10058ac2:	702c      	strb	r4, [r5, #0]
10058ac4:	7800      	ldrb	r0, [r0, #0]
10058ac6:	2801      	cmp	r0, #1
10058ac8:	d107      	bne.n	10058ada <GAT_att_srv_value_read+0x22>
10058aca:	6930      	ldr	r0, [r6, #16]
10058acc:	2800      	cmp	r0, #0
10058ace:	d01f      	beq.n	10058b10 <GAT_att_srv_value_read+0x58>
10058ad0:	360c      	adds	r6, #12
10058ad2:	603e      	str	r6, [r7, #0]
10058ad4:	2000      	movs	r0, #0
10058ad6:	7028      	strb	r0, [r5, #0]
10058ad8:	e029      	b.n	10058b2e <GAT_att_srv_value_read+0x76>
10058ada:	9202      	str	r2, [sp, #8]
10058adc:	68b0      	ldr	r0, [r6, #8]
10058ade:	8900      	ldrh	r0, [r0, #8]
10058ae0:	9101      	str	r1, [sp, #4]
10058ae2:	463a      	mov	r2, r7
10058ae4:	462b      	mov	r3, r5
10058ae6:	f000 fb66 	bl	100591b6 <GAT_srv_attr_value_read>
10058aea:	2800      	cmp	r0, #0
10058aec:	d012      	beq.n	10058b14 <GAT_att_srv_value_read+0x5c>
10058aee:	2884      	cmp	r0, #132	@ 0x84
10058af0:	d11d      	bne.n	10058b2e <GAT_att_srv_value_read+0x76>
10058af2:	9801      	ldr	r0, [sp, #4]
10058af4:	8843      	ldrh	r3, [r0, #2]
10058af6:	68b0      	ldr	r0, [r6, #8]
10058af8:	8942      	ldrh	r2, [r0, #10]
10058afa:	8901      	ldrh	r1, [r0, #8]
10058afc:	9802      	ldr	r0, [sp, #8]
10058afe:	9000      	str	r0, [sp, #0]
10058b00:	2002      	movs	r0, #2
10058b02:	f00b fcd9 	bl	100644b8 <aci_gatt_srv_read_event_push_noinline>
10058b06:	2800      	cmp	r0, #0
10058b08:	d111      	bne.n	10058b2e <GAT_att_srv_value_read+0x76>
10058b0a:	207b      	movs	r0, #123	@ 0x7b
10058b0c:	43c0      	mvns	r0, r0
10058b0e:	e00e      	b.n	10058b2e <GAT_att_srv_value_read+0x76>
10058b10:	200e      	movs	r0, #14
10058b12:	e005      	b.n	10058b20 <GAT_att_srv_value_read+0x68>
10058b14:	6838      	ldr	r0, [r7, #0]
10058b16:	8801      	ldrh	r1, [r0, #0]
10058b18:	9a02      	ldr	r2, [sp, #8]
10058b1a:	4291      	cmp	r1, r2
10058b1c:	d203      	bcs.n	10058b26 <GAT_att_srv_value_read+0x6e>
10058b1e:	2007      	movs	r0, #7
10058b20:	7028      	strb	r0, [r5, #0]
10058b22:	2086      	movs	r0, #134	@ 0x86
10058b24:	e003      	b.n	10058b2e <GAT_att_srv_value_read+0x76>
10058b26:	6841      	ldr	r1, [r0, #4]
10058b28:	1889      	adds	r1, r1, r2
10058b2a:	6041      	str	r1, [r0, #4]
10058b2c:	4620      	mov	r0, r4
10058b2e:	b2c0      	uxtb	r0, r0
10058b30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10058b32 <ACL_pkt_read_8b>:
10058b32:	b51c      	push	{r2, r3, r4, lr}
10058b34:	291f      	cmp	r1, #31
10058b36:	d803      	bhi.n	10058b40 <ACL_pkt_read_8b+0xe>
10058b38:	aa01      	add	r2, sp, #4
10058b3a:	8011      	strh	r1, [r2, #0]
10058b3c:	6840      	ldr	r0, [r0, #4]
10058b3e:	e005      	b.n	10058b4c <ACL_pkt_read_8b+0x1a>
10058b40:	6840      	ldr	r0, [r0, #4]
10058b42:	ac01      	add	r4, sp, #4
10058b44:	4622      	mov	r2, r4
10058b46:	f008 ff54 	bl	100619f2 <Mem_Buff_get_buff_off>
10058b4a:	8821      	ldrh	r1, [r4, #0]
10058b4c:	1840      	adds	r0, r0, r1
10058b4e:	7900      	ldrb	r0, [r0, #4]
10058b50:	bd1c      	pop	{r2, r3, r4, pc}

10058b52 <GAT_att_srv_set_attr_value_check>:
10058b52:	b5f0      	push	{r4, r5, r6, r7, lr}
10058b54:	b085      	sub	sp, #20
10058b56:	461e      	mov	r6, r3
10058b58:	4614      	mov	r4, r2
10058b5a:	460f      	mov	r7, r1
10058b5c:	4605      	mov	r5, r0
10058b5e:	a801      	add	r0, sp, #4
10058b60:	8101      	strh	r1, [r0, #8]
10058b62:	7102      	strb	r2, [r0, #4]
10058b64:	68a9      	ldr	r1, [r5, #8]
10058b66:	9101      	str	r1, [sp, #4]
10058b68:	f000 fe06 	bl	10059778 <GAT_srv_check_change_aware>
10058b6c:	2886      	cmp	r0, #134	@ 0x86
10058b6e:	d101      	bne.n	10058b74 <GAT_att_srv_set_attr_value_check+0x22>
10058b70:	2012      	movs	r0, #18
10058b72:	e00c      	b.n	10058b8e <GAT_att_srv_set_attr_value_check+0x3c>
10058b74:	4638      	mov	r0, r7
10058b76:	f00c fd03 	bl	10065580 <GAT_att_db_find_by_handle>
10058b7a:	6030      	str	r0, [r6, #0]
10058b7c:	2800      	cmp	r0, #0
10058b7e:	d005      	beq.n	10058b8c <GAT_att_srv_set_attr_value_check+0x3a>
10058b80:	68a9      	ldr	r1, [r5, #8]
10058b82:	8909      	ldrh	r1, [r1, #8]
10058b84:	4622      	mov	r2, r4
10058b86:	f000 fb2f 	bl	100591e8 <GAT_srv_check_perms>
10058b8a:	e000      	b.n	10058b8e <GAT_att_srv_set_attr_value_check+0x3c>
10058b8c:	2001      	movs	r0, #1
10058b8e:	b005      	add	sp, #20
10058b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10058b94 <GAT_srv_init>:
10058b94:	b580      	push	{r7, lr}
10058b96:	4806      	ldr	r0, [pc, #24]	@ (10058bb0 <__arm_cp.0_0>)
10058b98:	8900      	ldrh	r0, [r0, #8]
10058b9a:	3016      	adds	r0, #22
10058b9c:	b280      	uxth	r0, r0
10058b9e:	f00c fc8b 	bl	100654b8 <GAT_att_db_init>
10058ba2:	4804      	ldr	r0, [pc, #16]	@ (10058bb4 <__arm_cp.0_1>)
10058ba4:	6800      	ldr	r0, [r0, #0]
10058ba6:	215c      	movs	r1, #92	@ 0x5c
10058ba8:	2201      	movs	r2, #1
10058baa:	5442      	strb	r2, [r0, r1]
10058bac:	bd80      	pop	{r7, pc}
10058bae:	46c0      	nop			@ (mov r8, r8)

10058bb0 <__arm_cp.0_0>:
10058bb0:	2000296c 	.word	0x2000296c

10058bb4 <__arm_cp.0_1>:
10058bb4:	20002910 	.word	0x20002910

10058bb8 <GAT_srv_connection>:
10058bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
10058bba:	b0a1      	sub	sp, #132	@ 0x84
10058bbc:	4604      	mov	r4, r0
10058bbe:	f000 f89b 	bl	10058cf8 <GAT_srv_is_bonded>
10058bc2:	2801      	cmp	r0, #1
10058bc4:	d114      	bne.n	10058bf0 <GAT_srv_connection+0x38>
10058bc6:	a807      	add	r0, sp, #28
10058bc8:	4945      	ldr	r1, [pc, #276]	@ (10058ce0 <__arm_cp.1_0>)
10058bca:	2514      	movs	r5, #20
10058bcc:	462a      	mov	r2, r5
10058bce:	f00f fe26 	bl	1006881e <__aeabi_memcpy>
10058bd2:	a802      	add	r0, sp, #8
10058bd4:	4943      	ldr	r1, [pc, #268]	@ (10058ce4 <__arm_cp.1_1>)
10058bd6:	462a      	mov	r2, r5
10058bd8:	f00f fe21 	bl	1006881e <__aeabi_memcpy>
10058bdc:	2044      	movs	r0, #68	@ 0x44
10058bde:	900f      	str	r0, [sp, #60]	@ 0x3c
10058be0:	2101      	movs	r1, #1
10058be2:	aa0d      	add	r2, sp, #52	@ 0x34
10058be4:	ab0c      	add	r3, sp, #48	@ 0x30
10058be6:	4620      	mov	r0, r4
10058be8:	f00a fa87 	bl	100630fa <smp_sap_get_remote_address_check_addr_type>
10058bec:	2800      	cmp	r0, #0
10058bee:	d001      	beq.n	10058bf4 <GAT_srv_connection+0x3c>
10058bf0:	b021      	add	sp, #132	@ 0x84
10058bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10058bf4:	a80c      	add	r0, sp, #48	@ 0x30
10058bf6:	7801      	ldrb	r1, [r0, #0]
10058bf8:	a80d      	add	r0, sp, #52	@ 0x34
10058bfa:	aa0f      	add	r2, sp, #60	@ 0x3c
10058bfc:	ab10      	add	r3, sp, #64	@ 0x40
10058bfe:	f009 fb1a 	bl	10062236 <SDB_sap_read_peer_bonded_gatt_client_data>
10058c02:	2800      	cmp	r0, #0
10058c04:	d1f4      	bne.n	10058bf0 <GAT_srv_connection+0x38>
10058c06:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10058c08:	2844      	cmp	r0, #68	@ 0x44
10058c0a:	d8f1      	bhi.n	10058bf0 <GAT_srv_connection+0x38>
10058c0c:	2001      	movs	r0, #1
10058c0e:	4d36      	ldr	r5, [pc, #216]	@ (10058ce8 <__arm_cp.1_2>)
10058c10:	aa02      	add	r2, sp, #8
10058c12:	4629      	mov	r1, r5
10058c14:	f000 fe0c 	bl	10059830 <GAT_srv_find_by_type_attr_p>
10058c18:	2800      	cmp	r0, #0
10058c1a:	d010      	beq.n	10058c3e <GAT_srv_connection+0x86>
10058c1c:	4606      	mov	r6, r0
10058c1e:	4620      	mov	r0, r4
10058c20:	f7fe fe54 	bl	100578cc <GAT_att_cmn_get_conn_index>
10058c24:	a910      	add	r1, sp, #64	@ 0x40
10058c26:	7c0a      	ldrb	r2, [r1, #16]
10058c28:	4930      	ldr	r1, [pc, #192]	@ (10058cec <__arm_cp.1_3>)
10058c2a:	7ac9      	ldrb	r1, [r1, #11]
10058c2c:	6873      	ldr	r3, [r6, #4]
10058c2e:	6a1b      	ldr	r3, [r3, #32]
10058c30:	689b      	ldr	r3, [r3, #8]
10058c32:	9300      	str	r3, [sp, #0]
10058c34:	0849      	lsrs	r1, r1, #1
10058c36:	1c4b      	adds	r3, r1, #1
10058c38:	2104      	movs	r1, #4
10058c3a:	f000 fd08 	bl	1005964e <GAT_srv_set_zip_val>
10058c3e:	482c      	ldr	r0, [pc, #176]	@ (10058cf0 <__arm_cp.1_4>)
10058c40:	6801      	ldr	r1, [r0, #0]
10058c42:	3183      	adds	r1, #131	@ 0x83
10058c44:	a810      	add	r0, sp, #64	@ 0x40
10058c46:	2210      	movs	r2, #16
10058c48:	f7fa fb94 	bl	10053374 <BLEPLAT_MemCmp>
10058c4c:	2800      	cmp	r0, #0
10058c4e:	d01f      	beq.n	10058c90 <GAT_srv_connection+0xd8>
10058c50:	2001      	movs	r0, #1
10058c52:	aa07      	add	r2, sp, #28
10058c54:	4629      	mov	r1, r5
10058c56:	f000 fdeb 	bl	10059830 <GAT_srv_find_by_type_attr_p>
10058c5a:	2800      	cmp	r0, #0
10058c5c:	d0c8      	beq.n	10058bf0 <GAT_srv_connection+0x38>
10058c5e:	f000 fe3f 	bl	100598e0 <GAT_srv_get_cccd_attr_p>
10058c62:	2800      	cmp	r0, #0
10058c64:	d0c4      	beq.n	10058bf0 <GAT_srv_connection+0x38>
10058c66:	4605      	mov	r5, r0
10058c68:	2104      	movs	r1, #4
10058c6a:	4620      	mov	r0, r4
10058c6c:	f7fe fd84 	bl	10057778 <GAT_att_cmn_get_channel_descr_p>
10058c70:	8881      	ldrh	r1, [r0, #4]
10058c72:	2240      	movs	r2, #64	@ 0x40
10058c74:	430a      	orrs	r2, r1
10058c76:	8082      	strh	r2, [r0, #4]
10058c78:	a810      	add	r0, sp, #64	@ 0x40
10058c7a:	7c42      	ldrb	r2, [r0, #17]
10058c7c:	4620      	mov	r0, r4
10058c7e:	4629      	mov	r1, r5
10058c80:	f000 fd26 	bl	100596d0 <GAT_srv_set_cccd_val>
10058c84:	200b      	movs	r0, #11
10058c86:	f00a fbeb 	bl	10063460 <tsk_notify_idx>
10058c8a:	f7f9 fd6c 	bl	10052766 <BLE_STACK_ProcessRequest>
10058c8e:	e7af      	b.n	10058bf0 <GAT_srv_connection+0x38>
10058c90:	2001      	movs	r0, #1
10058c92:	f00c fc9d 	bl	100655d0 <GAT_att_db_find_from_handle>
10058c96:	4606      	mov	r6, r0
10058c98:	ad10      	add	r5, sp, #64	@ 0x40
10058c9a:	3512      	adds	r5, #18
10058c9c:	2700      	movs	r7, #0
10058c9e:	2e00      	cmp	r6, #0
10058ca0:	d0a6      	beq.n	10058bf0 <GAT_srv_connection+0x38>
10058ca2:	b2b8      	uxth	r0, r7
10058ca4:	2863      	cmp	r0, #99	@ 0x63
10058ca6:	d8a3      	bhi.n	10058bf0 <GAT_srv_connection+0x38>
10058ca8:	7831      	ldrb	r1, [r6, #0]
10058caa:	2904      	cmp	r1, #4
10058cac:	d112      	bne.n	10058cd4 <GAT_srv_connection+0x11c>
10058cae:	6871      	ldr	r1, [r6, #4]
10058cb0:	7d0a      	ldrb	r2, [r1, #20]
10058cb2:	2a10      	cmp	r2, #16
10058cb4:	d10e      	bne.n	10058cd4 <GAT_srv_connection+0x11c>
10058cb6:	8a09      	ldrh	r1, [r1, #16]
10058cb8:	4a0e      	ldr	r2, [pc, #56]	@ (10058cf4 <__arm_cp.1_5>)
10058cba:	4291      	cmp	r1, r2
10058cbc:	d10a      	bne.n	10058cd4 <GAT_srv_connection+0x11c>
10058cbe:	2102      	movs	r1, #2
10058cc0:	2232      	movs	r2, #50	@ 0x32
10058cc2:	462b      	mov	r3, r5
10058cc4:	f000 fcb0 	bl	10059628 <GAT_srv_get_zip_val>
10058cc8:	4602      	mov	r2, r0
10058cca:	4620      	mov	r0, r4
10058ccc:	4631      	mov	r1, r6
10058cce:	f000 fcff 	bl	100596d0 <GAT_srv_set_cccd_val>
10058cd2:	1c7f      	adds	r7, r7, #1
10058cd4:	4630      	mov	r0, r6
10058cd6:	f00c fcdd 	bl	10065694 <GAT_att_db_get_next>
10058cda:	4606      	mov	r6, r0
10058cdc:	e7df      	b.n	10058c9e <GAT_srv_connection+0xe6>
10058cde:	46c0      	nop			@ (mov r8, r8)

10058ce0 <__arm_cp.1_0>:
10058ce0:	1006a458 	.word	0x1006a458

10058ce4 <__arm_cp.1_1>:
10058ce4:	1006a46c 	.word	0x1006a46c

10058ce8 <__arm_cp.1_2>:
10058ce8:	0000ffff 	.word	0x0000ffff

10058cec <__arm_cp.1_3>:
10058cec:	2000296c 	.word	0x2000296c

10058cf0 <__arm_cp.1_4>:
10058cf0:	20002910 	.word	0x20002910

10058cf4 <__arm_cp.1_5>:
10058cf4:	00002902 	.word	0x00002902

10058cf8 <GAT_srv_is_bonded>:
10058cf8:	b580      	push	{r7, lr}
10058cfa:	f00a fa34 	bl	10063166 <smp_sap_check_is_peer_device_bonded>
10058cfe:	4241      	negs	r1, r0
10058d00:	4148      	adcs	r0, r1
10058d02:	bd80      	pop	{r7, pc}

10058d04 <GAT_srv_bearer_close>:
10058d04:	b5f0      	push	{r4, r5, r6, r7, lr}
10058d06:	b0a1      	sub	sp, #132	@ 0x84
10058d08:	2904      	cmp	r1, #4
10058d0a:	d000      	beq.n	10058d0e <GAT_srv_bearer_close+0xa>
10058d0c:	e0de      	b.n	10058ecc <GAT_srv_bearer_close+0x1c8>
10058d0e:	4607      	mov	r7, r0
10058d10:	f7ff fff2 	bl	10058cf8 <GAT_srv_is_bonded>
10058d14:	4c6e      	ldr	r4, [pc, #440]	@ (10058ed0 <__arm_cp.3_0>)
10058d16:	4e6f      	ldr	r6, [pc, #444]	@ (10058ed4 <__arm_cp.3_1>)
10058d18:	2801      	cmp	r0, #1
10058d1a:	d000      	beq.n	10058d1e <GAT_srv_bearer_close+0x1a>
10058d1c:	e0a0      	b.n	10058e60 <GAT_srv_bearer_close+0x15c>
10058d1e:	ad0b      	add	r5, sp, #44	@ 0x2c
10058d20:	496d      	ldr	r1, [pc, #436]	@ (10058ed8 <__arm_cp.3_2>)
10058d22:	2214      	movs	r2, #20
10058d24:	4628      	mov	r0, r5
10058d26:	f00f fd7a 	bl	1006881e <__aeabi_memcpy>
10058d2a:	a810      	add	r0, sp, #64	@ 0x40
10058d2c:	4634      	mov	r4, r6
10058d2e:	2600      	movs	r6, #0
10058d30:	2244      	movs	r2, #68	@ 0x44
10058d32:	4631      	mov	r1, r6
10058d34:	f7fa fb0e 	bl	10053354 <BLEPLAT_MemSet>
10058d38:	2001      	movs	r0, #1
10058d3a:	4621      	mov	r1, r4
10058d3c:	462a      	mov	r2, r5
10058d3e:	f000 fd77 	bl	10059830 <GAT_srv_find_by_type_attr_p>
10058d42:	2800      	cmp	r0, #0
10058d44:	d00f      	beq.n	10058d66 <GAT_srv_bearer_close+0x62>
10058d46:	4604      	mov	r4, r0
10058d48:	4638      	mov	r0, r7
10058d4a:	f7fe fdbf 	bl	100578cc <GAT_att_cmn_get_conn_index>
10058d4e:	6861      	ldr	r1, [r4, #4]
10058d50:	6a09      	ldr	r1, [r1, #32]
10058d52:	688b      	ldr	r3, [r1, #8]
10058d54:	4961      	ldr	r1, [pc, #388]	@ (10058edc <__arm_cp.3_3>)
10058d56:	7ac9      	ldrb	r1, [r1, #11]
10058d58:	0849      	lsrs	r1, r1, #1
10058d5a:	1c4a      	adds	r2, r1, #1
10058d5c:	2104      	movs	r1, #4
10058d5e:	f000 fc63 	bl	10059628 <GAT_srv_get_zip_val>
10058d62:	a910      	add	r1, sp, #64	@ 0x40
10058d64:	7408      	strb	r0, [r1, #16]
10058d66:	2104      	movs	r1, #4
10058d68:	9704      	str	r7, [sp, #16]
10058d6a:	4638      	mov	r0, r7
10058d6c:	f7fe fd04 	bl	10057778 <GAT_att_cmn_get_channel_descr_p>
10058d70:	a910      	add	r1, sp, #64	@ 0x40
10058d72:	7c09      	ldrb	r1, [r1, #16]
10058d74:	2901      	cmp	r1, #1
10058d76:	d103      	bne.n	10058d80 <GAT_srv_bearer_close+0x7c>
10058d78:	8880      	ldrh	r0, [r0, #4]
10058d7a:	0600      	lsls	r0, r0, #24
10058d7c:	0f80      	lsrs	r0, r0, #30
10058d7e:	d106      	bne.n	10058d8e <GAT_srv_bearer_close+0x8a>
10058d80:	4857      	ldr	r0, [pc, #348]	@ (10058ee0 <__arm_cp.3_4>)
10058d82:	6801      	ldr	r1, [r0, #0]
10058d84:	3183      	adds	r1, #131	@ 0x83
10058d86:	a810      	add	r0, sp, #64	@ 0x40
10058d88:	2210      	movs	r2, #16
10058d8a:	f7fa fad3 	bl	10053334 <BLEPLAT_MemCpy>
10058d8e:	2001      	movs	r0, #1
10058d90:	9003      	str	r0, [sp, #12]
10058d92:	f00c fc1d 	bl	100655d0 <GAT_att_db_find_from_handle>
10058d96:	4605      	mov	r5, r0
10058d98:	a810      	add	r0, sp, #64	@ 0x40
10058d9a:	3012      	adds	r0, #18
10058d9c:	9002      	str	r0, [sp, #8]
10058d9e:	9605      	str	r6, [sp, #20]
10058da0:	4c4b      	ldr	r4, [pc, #300]	@ (10058ed0 <__arm_cp.3_0>)
10058da2:	2d00      	cmp	r5, #0
10058da4:	d034      	beq.n	10058e10 <GAT_srv_bearer_close+0x10c>
10058da6:	b2b7      	uxth	r7, r6
10058da8:	2f63      	cmp	r7, #99	@ 0x63
10058daa:	d831      	bhi.n	10058e10 <GAT_srv_bearer_close+0x10c>
10058dac:	7828      	ldrb	r0, [r5, #0]
10058dae:	2804      	cmp	r0, #4
10058db0:	d00b      	beq.n	10058dca <GAT_srv_bearer_close+0xc6>
10058db2:	2802      	cmp	r0, #2
10058db4:	d127      	bne.n	10058e06 <GAT_srv_bearer_close+0x102>
10058db6:	6868      	ldr	r0, [r5, #4]
10058db8:	7d01      	ldrb	r1, [r0, #20]
10058dba:	2910      	cmp	r1, #16
10058dbc:	d121      	bne.n	10058e02 <GAT_srv_bearer_close+0xfe>
10058dbe:	8a00      	ldrh	r0, [r0, #16]
10058dc0:	4949      	ldr	r1, [pc, #292]	@ (10058ee8 <__arm_cp.3_6>)
10058dc2:	4288      	cmp	r0, r1
10058dc4:	d11d      	bne.n	10058e02 <GAT_srv_bearer_close+0xfe>
10058dc6:	9803      	ldr	r0, [sp, #12]
10058dc8:	e01c      	b.n	10058e04 <GAT_srv_bearer_close+0x100>
10058dca:	6868      	ldr	r0, [r5, #4]
10058dcc:	7d01      	ldrb	r1, [r0, #20]
10058dce:	2910      	cmp	r1, #16
10058dd0:	d119      	bne.n	10058e06 <GAT_srv_bearer_close+0x102>
10058dd2:	8a00      	ldrh	r0, [r0, #16]
10058dd4:	42a0      	cmp	r0, r4
10058dd6:	d116      	bne.n	10058e06 <GAT_srv_bearer_close+0x102>
10058dd8:	9804      	ldr	r0, [sp, #16]
10058dda:	4629      	mov	r1, r5
10058ddc:	f000 fdb0 	bl	10059940 <GAT_srv_get_cccd_val>
10058de0:	4604      	mov	r4, r0
10058de2:	9802      	ldr	r0, [sp, #8]
10058de4:	9000      	str	r0, [sp, #0]
10058de6:	b2e2      	uxtb	r2, r4
10058de8:	2102      	movs	r1, #2
10058dea:	2332      	movs	r3, #50	@ 0x32
10058dec:	4638      	mov	r0, r7
10058dee:	f000 fc2e 	bl	1005964e <GAT_srv_set_zip_val>
10058df2:	9805      	ldr	r0, [sp, #20]
10058df4:	2801      	cmp	r0, #1
10058df6:	d101      	bne.n	10058dfc <GAT_srv_bearer_close+0xf8>
10058df8:	a810      	add	r0, sp, #64	@ 0x40
10058dfa:	7444      	strb	r4, [r0, #17]
10058dfc:	1c76      	adds	r6, r6, #1
10058dfe:	4c34      	ldr	r4, [pc, #208]	@ (10058ed0 <__arm_cp.3_0>)
10058e00:	e001      	b.n	10058e06 <GAT_srv_bearer_close+0x102>
10058e02:	2000      	movs	r0, #0
10058e04:	9005      	str	r0, [sp, #20]
10058e06:	4628      	mov	r0, r5
10058e08:	f00c fc44 	bl	10065694 <GAT_att_db_get_next>
10058e0c:	4605      	mov	r5, r0
10058e0e:	e7c8      	b.n	10058da2 <GAT_srv_bearer_close+0x9e>
10058e10:	2101      	movs	r1, #1
10058e12:	aa09      	add	r2, sp, #36	@ 0x24
10058e14:	ab08      	add	r3, sp, #32
10058e16:	9f04      	ldr	r7, [sp, #16]
10058e18:	4638      	mov	r0, r7
10058e1a:	f00a f96e 	bl	100630fa <smp_sap_get_remote_address_check_addr_type>
10058e1e:	2800      	cmp	r0, #0
10058e20:	d11c      	bne.n	10058e5c <GAT_srv_bearer_close+0x158>
10058e22:	b2b0      	uxth	r0, r6
10058e24:	0040      	lsls	r0, r0, #1
10058e26:	492f      	ldr	r1, [pc, #188]	@ (10058ee4 <__arm_cp.3_5>)
10058e28:	1840      	adds	r0, r0, r1
10058e2a:	0880      	lsrs	r0, r0, #2
10058e2c:	3013      	adds	r0, #19
10058e2e:	b282      	uxth	r2, r0
10058e30:	a808      	add	r0, sp, #32
10058e32:	7801      	ldrb	r1, [r0, #0]
10058e34:	a809      	add	r0, sp, #36	@ 0x24
10058e36:	ab10      	add	r3, sp, #64	@ 0x40
10058e38:	f009 f9cb 	bl	100621d2 <SDB_sap_write_peer_bonded_gatt_client_data>
10058e3c:	2800      	cmp	r0, #0
10058e3e:	d00d      	beq.n	10058e5c <GAT_srv_bearer_close+0x158>
10058e40:	4604      	mov	r4, r0
10058e42:	ad06      	add	r5, sp, #24
10058e44:	a909      	add	r1, sp, #36	@ 0x24
10058e46:	2206      	movs	r2, #6
10058e48:	4628      	mov	r0, r5
10058e4a:	f7fa fa73 	bl	10053334 <BLEPLAT_MemCpy>
10058e4e:	71ac      	strb	r4, [r5, #6]
10058e50:	2042      	movs	r0, #66	@ 0x42
10058e52:	2104      	movs	r1, #4
10058e54:	2207      	movs	r2, #7
10058e56:	462b      	mov	r3, r5
10058e58:	f00b fef8 	bl	10064c4c <aci_hal_fw_error_event_push_noinline>
10058e5c:	4e1d      	ldr	r6, [pc, #116]	@ (10058ed4 <__arm_cp.3_1>)
10058e5e:	4c1c      	ldr	r4, [pc, #112]	@ (10058ed0 <__arm_cp.3_0>)
10058e60:	2001      	movs	r0, #1
10058e62:	f00c fbb5 	bl	100655d0 <GAT_att_db_find_from_handle>
10058e66:	4605      	mov	r5, r0
10058e68:	2800      	cmp	r0, #0
10058e6a:	d012      	beq.n	10058e92 <GAT_srv_bearer_close+0x18e>
10058e6c:	7828      	ldrb	r0, [r5, #0]
10058e6e:	2804      	cmp	r0, #4
10058e70:	d10b      	bne.n	10058e8a <GAT_srv_bearer_close+0x186>
10058e72:	6868      	ldr	r0, [r5, #4]
10058e74:	7d01      	ldrb	r1, [r0, #20]
10058e76:	2910      	cmp	r1, #16
10058e78:	d107      	bne.n	10058e8a <GAT_srv_bearer_close+0x186>
10058e7a:	8a00      	ldrh	r0, [r0, #16]
10058e7c:	42a0      	cmp	r0, r4
10058e7e:	d104      	bne.n	10058e8a <GAT_srv_bearer_close+0x186>
10058e80:	2200      	movs	r2, #0
10058e82:	4638      	mov	r0, r7
10058e84:	4629      	mov	r1, r5
10058e86:	f000 fc23 	bl	100596d0 <GAT_srv_set_cccd_val>
10058e8a:	4628      	mov	r0, r5
10058e8c:	f00c fc02 	bl	10065694 <GAT_att_db_get_next>
10058e90:	e7e9      	b.n	10058e66 <GAT_srv_bearer_close+0x162>
10058e92:	ac10      	add	r4, sp, #64	@ 0x40
10058e94:	4910      	ldr	r1, [pc, #64]	@ (10058ed8 <__arm_cp.3_2>)
10058e96:	2214      	movs	r2, #20
10058e98:	4620      	mov	r0, r4
10058e9a:	f00f fcc0 	bl	1006881e <__aeabi_memcpy>
10058e9e:	2001      	movs	r0, #1
10058ea0:	4631      	mov	r1, r6
10058ea2:	4622      	mov	r2, r4
10058ea4:	f000 fcc4 	bl	10059830 <GAT_srv_find_by_type_attr_p>
10058ea8:	2800      	cmp	r0, #0
10058eaa:	d00f      	beq.n	10058ecc <GAT_srv_bearer_close+0x1c8>
10058eac:	4604      	mov	r4, r0
10058eae:	4638      	mov	r0, r7
10058eb0:	f7fe fd0c 	bl	100578cc <GAT_att_cmn_get_conn_index>
10058eb4:	4909      	ldr	r1, [pc, #36]	@ (10058edc <__arm_cp.3_3>)
10058eb6:	7ac9      	ldrb	r1, [r1, #11]
10058eb8:	6862      	ldr	r2, [r4, #4]
10058eba:	6a12      	ldr	r2, [r2, #32]
10058ebc:	6892      	ldr	r2, [r2, #8]
10058ebe:	9200      	str	r2, [sp, #0]
10058ec0:	0849      	lsrs	r1, r1, #1
10058ec2:	1c4b      	adds	r3, r1, #1
10058ec4:	2104      	movs	r1, #4
10058ec6:	2200      	movs	r2, #0
10058ec8:	f000 fbc1 	bl	1005964e <GAT_srv_set_zip_val>
10058ecc:	b021      	add	sp, #132	@ 0x84
10058ece:	bdf0      	pop	{r4, r5, r6, r7, pc}

10058ed0 <__arm_cp.3_0>:
10058ed0:	00002902 	.word	0x00002902

10058ed4 <__arm_cp.3_1>:
10058ed4:	0000ffff 	.word	0x0000ffff

10058ed8 <__arm_cp.3_2>:
10058ed8:	1006a46c 	.word	0x1006a46c

10058edc <__arm_cp.3_3>:
10058edc:	2000296c 	.word	0x2000296c

10058ee0 <__arm_cp.3_4>:
10058ee0:	20002910 	.word	0x20002910

10058ee4 <__arm_cp.3_5>:
10058ee4:	0003fffe 	.word	0x0003fffe

10058ee8 <__arm_cp.3_6>:
10058ee8:	00002a05 	.word	0x00002a05

10058eec <GAT_srv_db_hash_tsk>:
10058eec:	b5f0      	push	{r4, r5, r6, r7, lr}
10058eee:	b0d3      	sub	sp, #332	@ 0x14c
10058ef0:	2500      	movs	r5, #0
10058ef2:	950c      	str	r5, [sp, #48]	@ 0x30
10058ef4:	950b      	str	r5, [sp, #44]	@ 0x2c
10058ef6:	950a      	str	r5, [sp, #40]	@ 0x28
10058ef8:	9509      	str	r5, [sp, #36]	@ 0x24
10058efa:	2041      	movs	r0, #65	@ 0x41
10058efc:	0082      	lsls	r2, r0, #2
10058efe:	ac0d      	add	r4, sp, #52	@ 0x34
10058f00:	4620      	mov	r0, r4
10058f02:	4629      	mov	r1, r5
10058f04:	f7fa fa26 	bl	10053354 <BLEPLAT_MemSet>
10058f08:	7125      	strb	r5, [r4, #4]
10058f0a:	2010      	movs	r0, #16
10058f0c:	9044      	str	r0, [sp, #272]	@ 0x110
10058f0e:	9016      	str	r0, [sp, #88]	@ 0x58
10058f10:	a809      	add	r0, sp, #36	@ 0x24
10058f12:	900f      	str	r0, [sp, #60]	@ 0x3c
10058f14:	4620      	mov	r0, r4
10058f16:	f7fa fa6a 	bl	100533ee <BLEPLAT_AesCMACEncryptInit>
10058f1a:	34dc      	adds	r4, #220	@ 0xdc
10058f1c:	9401      	str	r4, [sp, #4]
10058f1e:	2001      	movs	r0, #1
10058f20:	f00c fb56 	bl	100655d0 <GAT_att_db_find_from_handle>
10058f24:	4606      	mov	r6, r0
10058f26:	a84e      	add	r0, sp, #312	@ 0x138
10058f28:	300c      	adds	r0, #12
10058f2a:	9002      	str	r0, [sp, #8]
10058f2c:	4d48      	ldr	r5, [pc, #288]	@ (10059050 <__arm_cp.5_2>)
10058f2e:	2e00      	cmp	r6, #0
10058f30:	d041      	beq.n	10058fb6 <GAT_srv_db_hash_tsk+0xca>
10058f32:	7830      	ldrb	r0, [r6, #0]
10058f34:	2803      	cmp	r0, #3
10058f36:	d039      	beq.n	10058fac <GAT_srv_db_hash_tsk+0xc0>
10058f38:	af4e      	add	r7, sp, #312	@ 0x138
10058f3a:	4630      	mov	r0, r6
10058f3c:	4639      	mov	r1, r7
10058f3e:	f000 f907 	bl	10059150 <GAT_srv_get_attr_type>
10058f42:	7c38      	ldrb	r0, [r7, #16]
10058f44:	2810      	cmp	r0, #16
10058f46:	d131      	bne.n	10058fac <GAT_srv_db_hash_tsk+0xc0>
10058f48:	8870      	ldrh	r0, [r6, #2]
10058f4a:	a904      	add	r1, sp, #16
10058f4c:	8008      	strh	r0, [r1, #0]
10058f4e:	a84e      	add	r0, sp, #312	@ 0x138
10058f50:	8980      	ldrh	r0, [r0, #12]
10058f52:	493d      	ldr	r1, [pc, #244]	@ (10059048 <__arm_cp.5_0>)
10058f54:	1841      	adds	r1, r0, r1
10058f56:	2905      	cmp	r1, #5
10058f58:	d31c      	bcc.n	10058f94 <GAT_srv_db_hash_tsk+0xa8>
10058f5a:	493c      	ldr	r1, [pc, #240]	@ (1005904c <__arm_cp.5_1>)
10058f5c:	1841      	adds	r1, r0, r1
10058f5e:	2904      	cmp	r1, #4
10058f60:	d303      	bcc.n	10058f6a <GAT_srv_db_hash_tsk+0x7e>
10058f62:	2129      	movs	r1, #41	@ 0x29
10058f64:	0209      	lsls	r1, r1, #8
10058f66:	4288      	cmp	r0, r1
10058f68:	d120      	bne.n	10058fac <GAT_srv_db_hash_tsk+0xc0>
10058f6a:	af0d      	add	r7, sp, #52	@ 0x34
10058f6c:	2402      	movs	r4, #2
10058f6e:	aa04      	add	r2, sp, #16
10058f70:	4638      	mov	r0, r7
10058f72:	4621      	mov	r1, r4
10058f74:	47a8      	blx	r5
10058f76:	4638      	mov	r0, r7
10058f78:	4621      	mov	r1, r4
10058f7a:	9a02      	ldr	r2, [sp, #8]
10058f7c:	47a8      	blx	r5
10058f7e:	2000      	movs	r0, #0
10058f80:	aa05      	add	r2, sp, #20
10058f82:	4631      	mov	r1, r6
10058f84:	f000 f9a6 	bl	100592d4 <GAT_srv_get_attr_value>
10058f88:	9805      	ldr	r0, [sp, #20]
10058f8a:	6842      	ldr	r2, [r0, #4]
10058f8c:	8801      	ldrh	r1, [r0, #0]
10058f8e:	4638      	mov	r0, r7
10058f90:	47a8      	blx	r5
10058f92:	e00b      	b.n	10058fac <GAT_srv_db_hash_tsk+0xc0>
10058f94:	ac0d      	add	r4, sp, #52	@ 0x34
10058f96:	2702      	movs	r7, #2
10058f98:	aa04      	add	r2, sp, #16
10058f9a:	4620      	mov	r0, r4
10058f9c:	4639      	mov	r1, r7
10058f9e:	f000 fcdb 	bl	10059958 <GAT_srv_aes_cmac_append>
10058fa2:	4620      	mov	r0, r4
10058fa4:	4639      	mov	r1, r7
10058fa6:	9a02      	ldr	r2, [sp, #8]
10058fa8:	f000 fcd6 	bl	10059958 <GAT_srv_aes_cmac_append>
10058fac:	4630      	mov	r0, r6
10058fae:	f00c fb71 	bl	10065694 <GAT_att_db_get_next>
10058fb2:	4606      	mov	r6, r0
10058fb4:	e7bb      	b.n	10058f2e <GAT_srv_db_hash_tsk+0x42>
10058fb6:	9801      	ldr	r0, [sp, #4]
10058fb8:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
10058fba:	2a00      	cmp	r2, #0
10058fbc:	d006      	beq.n	10058fcc <GAT_srv_db_hash_tsk+0xe0>
10058fbe:	a80d      	add	r0, sp, #52	@ 0x34
10058fc0:	2120      	movs	r1, #32
10058fc2:	7101      	strb	r1, [r0, #4]
10058fc4:	4601      	mov	r1, r0
10058fc6:	31e0      	adds	r1, #224	@ 0xe0
10058fc8:	f7fa fa1e 	bl	10053408 <BLEPLAT_AesCMACEncryptAppend>
10058fcc:	a80d      	add	r0, sp, #52	@ 0x34
10058fce:	ac4e      	add	r4, sp, #312	@ 0x138
10058fd0:	aa04      	add	r2, sp, #16
10058fd2:	4621      	mov	r1, r4
10058fd4:	f7fa fa29 	bl	1005342a <BLEPLAT_AesCMACEncryptFinish>
10058fd8:	ad05      	add	r5, sp, #20
10058fda:	2610      	movs	r6, #16
10058fdc:	2301      	movs	r3, #1
10058fde:	4628      	mov	r0, r5
10058fe0:	4621      	mov	r1, r4
10058fe2:	4632      	mov	r2, r6
10058fe4:	f00a fba2 	bl	1006372c <copy_swap_buffer>
10058fe8:	4f1a      	ldr	r7, [pc, #104]	@ (10059054 <__arm_cp.5_3>)
10058fea:	6839      	ldr	r1, [r7, #0]
10058fec:	3183      	adds	r1, #131	@ 0x83
10058fee:	4628      	mov	r0, r5
10058ff0:	4632      	mov	r2, r6
10058ff2:	f7fa f9bf 	bl	10053374 <BLEPLAT_MemCmp>
10058ff6:	2800      	cmp	r0, #0
10058ff8:	d019      	beq.n	1005902e <GAT_srv_db_hash_tsk+0x142>
10058ffa:	6838      	ldr	r0, [r7, #0]
10058ffc:	3083      	adds	r0, #131	@ 0x83
10058ffe:	a905      	add	r1, sp, #20
10059000:	2210      	movs	r2, #16
10059002:	f7fa f997 	bl	10053334 <BLEPLAT_MemCpy>
10059006:	ad03      	add	r5, sp, #12
10059008:	2082      	movs	r0, #130	@ 0x82
1005900a:	8028      	strh	r0, [r5, #0]
1005900c:	9500      	str	r5, [sp, #0]
1005900e:	2400      	movs	r4, #0
10059010:	4b11      	ldr	r3, [pc, #68]	@ (10059058 <__arm_cp.5_4>)
10059012:	4620      	mov	r0, r4
10059014:	4621      	mov	r1, r4
10059016:	4622      	mov	r2, r4
10059018:	f7fe faf0 	bl	100575fc <GAT_att_cmn_for_each_ch_descr>
1005901c:	2040      	movs	r0, #64	@ 0x40
1005901e:	8028      	strh	r0, [r5, #0]
10059020:	9500      	str	r5, [sp, #0]
10059022:	4b0e      	ldr	r3, [pc, #56]	@ (1005905c <__arm_cp.5_5>)
10059024:	4620      	mov	r0, r4
10059026:	4621      	mov	r1, r4
10059028:	4622      	mov	r2, r4
1005902a:	f7fe fae7 	bl	100575fc <GAT_att_cmn_for_each_ch_descr>
1005902e:	6838      	ldr	r0, [r7, #0]
10059030:	215c      	movs	r1, #92	@ 0x5c
10059032:	5c42      	ldrb	r2, [r0, r1]
10059034:	23fd      	movs	r3, #253	@ 0xfd
10059036:	4013      	ands	r3, r2
10059038:	5443      	strb	r3, [r0, r1]
1005903a:	200b      	movs	r0, #11
1005903c:	f00a fa10 	bl	10063460 <tsk_notify_idx>
10059040:	f7f9 fb91 	bl	10052766 <BLE_STACK_ProcessRequest>
10059044:	b053      	add	sp, #332	@ 0x14c
10059046:	bdf0      	pop	{r4, r5, r6, r7, pc}

10059048 <__arm_cp.5_0>:
10059048:	ffffd6ff 	.word	0xffffd6ff

1005904c <__arm_cp.5_1>:
1005904c:	ffffd800 	.word	0xffffd800

10059050 <__arm_cp.5_2>:
10059050:	10059959 	.word	0x10059959

10059054 <__arm_cp.5_3>:
10059054:	20002910 	.word	0x20002910

10059058 <__arm_cp.5_4>:
10059058:	100578c1 	.word	0x100578c1

1005905c <__arm_cp.5_5>:
1005905c:	100578b5 	.word	0x100578b5

10059060 <GAT_srv_send_srv_change_tsk>:
10059060:	b5e0      	push	{r5, r6, r7, lr}
10059062:	2100      	movs	r1, #0
10059064:	9100      	str	r1, [sp, #0]
10059066:	2002      	movs	r0, #2
10059068:	2204      	movs	r2, #4
1005906a:	4b07      	ldr	r3, [pc, #28]	@ (10059088 <__arm_cp.7_0>)
1005906c:	f7fe fac6 	bl	100575fc <GAT_att_cmn_for_each_ch_descr>
10059070:	2800      	cmp	r0, #0
10059072:	d001      	beq.n	10059078 <GAT_srv_send_srv_change_tsk+0x18>
10059074:	2881      	cmp	r0, #129	@ 0x81
10059076:	d100      	bne.n	1005907a <GAT_srv_send_srv_change_tsk+0x1a>
10059078:	bd8c      	pop	{r2, r3, r7, pc}
1005907a:	200b      	movs	r0, #11
1005907c:	f00a f9f0 	bl	10063460 <tsk_notify_idx>
10059080:	f7f9 fb71 	bl	10052766 <BLE_STACK_ProcessRequest>
10059084:	bd8c      	pop	{r2, r3, r7, pc}
10059086:	46c0      	nop			@ (mov r8, r8)

10059088 <__arm_cp.7_0>:
10059088:	1005908d 	.word	0x1005908d

1005908c <GAT_srv_tx_service_change>:
1005908c:	b5b0      	push	{r4, r5, r7, lr}
1005908e:	b08a      	sub	sp, #40	@ 0x28
10059090:	4604      	mov	r4, r0
10059092:	8880      	ldrh	r0, [r0, #4]
10059094:	0640      	lsls	r0, r0, #25
10059096:	d401      	bmi.n	1005909c <GAT_srv_tx_service_change+0x10>
10059098:	2500      	movs	r5, #0
1005909a:	e04b      	b.n	10059134 <GAT_srv_tx_service_change+0xa8>
1005909c:	a809      	add	r0, sp, #36	@ 0x24
1005909e:	2180      	movs	r1, #128	@ 0x80
100590a0:	8001      	strh	r1, [r0, #0]
100590a2:	8921      	ldrh	r1, [r4, #8]
100590a4:	9000      	str	r0, [sp, #0]
100590a6:	2001      	movs	r0, #1
100590a8:	2500      	movs	r5, #0
100590aa:	4b24      	ldr	r3, [pc, #144]	@ (1005913c <__arm_cp.8_0>)
100590ac:	462a      	mov	r2, r5
100590ae:	f7fe faa5 	bl	100575fc <GAT_att_cmn_for_each_ch_descr>
100590b2:	88a1      	ldrh	r1, [r4, #4]
100590b4:	0789      	lsls	r1, r1, #30
100590b6:	d43d      	bmi.n	10059134 <GAT_srv_tx_service_change+0xa8>
100590b8:	2800      	cmp	r0, #0
100590ba:	d13b      	bne.n	10059134 <GAT_srv_tx_service_change+0xa8>
100590bc:	ad04      	add	r5, sp, #16
100590be:	4920      	ldr	r1, [pc, #128]	@ (10059140 <__arm_cp.8_1>)
100590c0:	2214      	movs	r2, #20
100590c2:	4628      	mov	r0, r5
100590c4:	f00f fbab 	bl	1006881e <__aeabi_memcpy>
100590c8:	2001      	movs	r0, #1
100590ca:	491e      	ldr	r1, [pc, #120]	@ (10059144 <__arm_cp.8_2>)
100590cc:	462a      	mov	r2, r5
100590ce:	f000 fbaf 	bl	10059830 <GAT_srv_find_by_type_attr_p>
100590d2:	2800      	cmp	r0, #0
100590d4:	d012      	beq.n	100590fc <GAT_srv_tx_service_change+0x70>
100590d6:	4605      	mov	r5, r0
100590d8:	f000 fc02 	bl	100598e0 <GAT_srv_get_cccd_attr_p>
100590dc:	2800      	cmp	r0, #0
100590de:	d00d      	beq.n	100590fc <GAT_srv_tx_service_change+0x70>
100590e0:	4601      	mov	r1, r0
100590e2:	8920      	ldrh	r0, [r4, #8]
100590e4:	f000 fc2c 	bl	10059940 <GAT_srv_get_cccd_val>
100590e8:	0780      	lsls	r0, r0, #30
100590ea:	d412      	bmi.n	10059112 <GAT_srv_tx_service_change+0x86>
100590ec:	8920      	ldrh	r0, [r4, #8]
100590ee:	2100      	movs	r1, #0
100590f0:	2201      	movs	r2, #1
100590f2:	f000 fbbd 	bl	10059870 <GAT_srv_check_client_support_feature>
100590f6:	4605      	mov	r5, r0
100590f8:	2881      	cmp	r0, #129	@ 0x81
100590fa:	d11b      	bne.n	10059134 <GAT_srv_tx_service_change+0xa8>
100590fc:	a809      	add	r0, sp, #36	@ 0x24
100590fe:	2140      	movs	r1, #64	@ 0x40
10059100:	8001      	strh	r1, [r0, #0]
10059102:	8921      	ldrh	r1, [r4, #8]
10059104:	9000      	str	r0, [sp, #0]
10059106:	2001      	movs	r0, #1
10059108:	2200      	movs	r2, #0
1005910a:	4b10      	ldr	r3, [pc, #64]	@ (1005914c <__arm_cp.8_4>)
1005910c:	f7fe fa76 	bl	100575fc <GAT_att_cmn_for_each_ch_descr>
10059110:	e00f      	b.n	10059132 <GAT_srv_tx_service_change+0xa6>
10059112:	480d      	ldr	r0, [pc, #52]	@ (10059148 <__arm_cp.8_3>)
10059114:	9003      	str	r0, [sp, #12]
10059116:	aa01      	add	r2, sp, #4
10059118:	2004      	movs	r0, #4
1005911a:	8050      	strh	r0, [r2, #2]
1005911c:	8868      	ldrh	r0, [r5, #2]
1005911e:	8010      	strh	r0, [r2, #0]
10059120:	a803      	add	r0, sp, #12
10059122:	9002      	str	r0, [sp, #8]
10059124:	8961      	ldrh	r1, [r4, #10]
10059126:	8920      	ldrh	r0, [r4, #8]
10059128:	9200      	str	r2, [sp, #0]
1005912a:	2202      	movs	r2, #2
1005912c:	2301      	movs	r3, #1
1005912e:	f7fe fe17 	bl	10057d60 <GAT_att_srv_hvtx>
10059132:	4605      	mov	r5, r0
10059134:	4628      	mov	r0, r5
10059136:	b00a      	add	sp, #40	@ 0x28
10059138:	bdb0      	pop	{r4, r5, r7, pc}
1005913a:	46c0      	nop			@ (mov r8, r8)

1005913c <__arm_cp.8_0>:
1005913c:	100578a9 	.word	0x100578a9

10059140 <__arm_cp.8_1>:
10059140:	1006a458 	.word	0x1006a458

10059144 <__arm_cp.8_2>:
10059144:	0000ffff 	.word	0x0000ffff

10059148 <__arm_cp.8_3>:
10059148:	ffff0001 	.word	0xffff0001

1005914c <__arm_cp.8_4>:
1005914c:	100578c1 	.word	0x100578c1

10059150 <GAT_srv_get_attr_type>:
10059150:	b580      	push	{r7, lr}
10059152:	2210      	movs	r2, #16
10059154:	740a      	strb	r2, [r1, #16]
10059156:	7802      	ldrb	r2, [r0, #0]
10059158:	2a04      	cmp	r2, #4
1005915a:	d80d      	bhi.n	10059178 <GAT_srv_get_attr_type+0x28>
1005915c:	447a      	add	r2, pc
1005915e:	7912      	ldrb	r2, [r2, #4]
10059160:	0052      	lsls	r2, r2, #1
10059162:	4497      	add	pc, r2
10059164:	0212160a 	.word	0x0212160a
10059168:	0002      	.short	0x0002
1005916a:	6840      	ldr	r0, [r0, #4]
1005916c:	1d03      	adds	r3, r0, #4
1005916e:	2214      	movs	r2, #20
10059170:	4608      	mov	r0, r1
10059172:	4619      	mov	r1, r3
10059174:	f7fa f8de 	bl	10053334 <BLEPLAT_MemCpy>
10059178:	bd80      	pop	{r7, pc}
1005917a:	2205      	movs	r2, #5
1005917c:	02d2      	lsls	r2, r2, #11
1005917e:	6840      	ldr	r0, [r0, #4]
10059180:	7d00      	ldrb	r0, [r0, #20]
10059182:	2801      	cmp	r0, #1
10059184:	d109      	bne.n	1005919a <GAT_srv_get_attr_type+0x4a>
10059186:	818a      	strh	r2, [r1, #12]
10059188:	bd80      	pop	{r7, pc}
1005918a:	2005      	movs	r0, #5
1005918c:	02c0      	lsls	r0, r0, #11
1005918e:	1cc0      	adds	r0, r0, #3
10059190:	e004      	b.n	1005919c <GAT_srv_get_attr_type+0x4c>
10059192:	2005      	movs	r0, #5
10059194:	02c0      	lsls	r0, r0, #11
10059196:	1c80      	adds	r0, r0, #2
10059198:	e000      	b.n	1005919c <GAT_srv_get_attr_type+0x4c>
1005919a:	1c50      	adds	r0, r2, #1
1005919c:	8188      	strh	r0, [r1, #12]
1005919e:	bd80      	pop	{r7, pc}

100591a0 <GAT_srv_get_att_group_end_handle>:
100591a0:	b580      	push	{r7, lr}
100591a2:	7801      	ldrb	r1, [r0, #0]
100591a4:	2202      	movs	r2, #2
100591a6:	430a      	orrs	r2, r1
100591a8:	2a02      	cmp	r2, #2
100591aa:	d102      	bne.n	100591b2 <GAT_srv_get_att_group_end_handle+0x12>
100591ac:	f00c fa86 	bl	100656bc <GAT_att_db_get_last_group_handle>
100591b0:	bd80      	pop	{r7, pc}
100591b2:	8840      	ldrh	r0, [r0, #2]
100591b4:	bd80      	pop	{r7, pc}

100591b6 <GAT_srv_attr_value_read>:
100591b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100591b8:	461c      	mov	r4, r3
100591ba:	9200      	str	r2, [sp, #0]
100591bc:	460e      	mov	r6, r1
100591be:	4607      	mov	r7, r0
100591c0:	2201      	movs	r2, #1
100591c2:	4608      	mov	r0, r1
100591c4:	4639      	mov	r1, r7
100591c6:	f000 f80f 	bl	100591e8 <GAT_srv_check_perms>
100591ca:	7020      	strb	r0, [r4, #0]
100591cc:	2586      	movs	r5, #134	@ 0x86
100591ce:	2800      	cmp	r0, #0
100591d0:	d108      	bne.n	100591e4 <GAT_srv_attr_value_read+0x2e>
100591d2:	4638      	mov	r0, r7
100591d4:	4631      	mov	r1, r6
100591d6:	9a00      	ldr	r2, [sp, #0]
100591d8:	f000 f87c 	bl	100592d4 <GAT_srv_get_attr_value>
100591dc:	2886      	cmp	r0, #134	@ 0x86
100591de:	d102      	bne.n	100591e6 <GAT_srv_attr_value_read+0x30>
100591e0:	200e      	movs	r0, #14
100591e2:	7020      	strb	r0, [r4, #0]
100591e4:	4628      	mov	r0, r5
100591e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100591e8 <GAT_srv_check_perms>:
100591e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100591ea:	b085      	sub	sp, #20
100591ec:	4615      	mov	r5, r2
100591ee:	9101      	str	r1, [sp, #4]
100591f0:	4601      	mov	r1, r0
100591f2:	7804      	ldrb	r4, [r0, #0]
100591f4:	2700      	movs	r7, #0
100591f6:	2302      	movs	r3, #2
100591f8:	200e      	movs	r0, #14
100591fa:	2c03      	cmp	r4, #3
100591fc:	461a      	mov	r2, r3
100591fe:	463e      	mov	r6, r7
10059200:	d312      	bcc.n	10059228 <GAT_srv_check_perms+0x40>
10059202:	d00b      	beq.n	1005921c <GAT_srv_check_perms+0x34>
10059204:	2c04      	cmp	r4, #4
10059206:	d158      	bne.n	100592ba <GAT_srv_check_perms+0xd2>
10059208:	6848      	ldr	r0, [r1, #4]
1005920a:	7801      	ldrb	r1, [r0, #0]
1005920c:	078c      	lsls	r4, r1, #30
1005920e:	07c9      	lsls	r1, r1, #31
10059210:	0f8a      	lsrs	r2, r1, #30
10059212:	2c00      	cmp	r4, #0
10059214:	d500      	bpl.n	10059218 <GAT_srv_check_perms+0x30>
10059216:	324c      	adds	r2, #76	@ 0x4c
10059218:	1c41      	adds	r1, r0, #1
1005921a:	e002      	b.n	10059222 <GAT_srv_check_perms+0x3a>
1005921c:	6848      	ldr	r0, [r1, #4]
1005921e:	1c41      	adds	r1, r0, #1
10059220:	7802      	ldrb	r2, [r0, #0]
10059222:	1c80      	adds	r0, r0, #2
10059224:	780e      	ldrb	r6, [r1, #0]
10059226:	7807      	ldrb	r7, [r0, #0]
10059228:	2d01      	cmp	r5, #1
1005922a:	d103      	bne.n	10059234 <GAT_srv_check_perms+0x4c>
1005922c:	4610      	mov	r0, r2
1005922e:	4018      	ands	r0, r3
10059230:	4618      	mov	r0, r3
10059232:	d042      	beq.n	100592ba <GAT_srv_check_perms+0xd2>
10059234:	2003      	movs	r0, #3
10059236:	2d03      	cmp	r5, #3
10059238:	d102      	bne.n	10059240 <GAT_srv_check_perms+0x58>
1005923a:	2108      	movs	r1, #8
1005923c:	4011      	ands	r1, r2
1005923e:	d03c      	beq.n	100592ba <GAT_srv_check_perms+0xd2>
10059240:	2d04      	cmp	r5, #4
10059242:	d102      	bne.n	1005924a <GAT_srv_check_perms+0x62>
10059244:	2104      	movs	r1, #4
10059246:	4011      	ands	r1, r2
10059248:	d037      	beq.n	100592ba <GAT_srv_check_perms+0xd2>
1005924a:	2d05      	cmp	r5, #5
1005924c:	d102      	bne.n	10059254 <GAT_srv_check_perms+0x6c>
1005924e:	2140      	movs	r1, #64	@ 0x40
10059250:	400a      	ands	r2, r1
10059252:	d032      	beq.n	100592ba <GAT_srv_check_perms+0xd2>
10059254:	a904      	add	r1, sp, #16
10059256:	aa03      	add	r2, sp, #12
10059258:	ab02      	add	r3, sp, #8
1005925a:	9c01      	ldr	r4, [sp, #4]
1005925c:	4620      	mov	r0, r4
1005925e:	f009 ff26 	bl	100630ae <smp_sap_get_security_level>
10059262:	2802      	cmp	r0, #2
10059264:	d102      	bne.n	1005926c <GAT_srv_check_perms+0x84>
10059266:	2f00      	cmp	r7, #0
10059268:	d10f      	bne.n	1005928a <GAT_srv_check_perms+0xa2>
1005926a:	e025      	b.n	100592b8 <GAT_srv_check_perms+0xd0>
1005926c:	2d01      	cmp	r5, #1
1005926e:	d000      	beq.n	10059272 <GAT_srv_check_perms+0x8a>
10059270:	08ff      	lsrs	r7, r7, #3
10059272:	2d05      	cmp	r5, #5
10059274:	d10b      	bne.n	1005928e <GAT_srv_check_perms+0xa6>
10059276:	a804      	add	r0, sp, #16
10059278:	7800      	ldrb	r0, [r0, #0]
1005927a:	2802      	cmp	r0, #2
1005927c:	d105      	bne.n	1005928a <GAT_srv_check_perms+0xa2>
1005927e:	a802      	add	r0, sp, #8
10059280:	7800      	ldrb	r0, [r0, #0]
10059282:	2802      	cmp	r0, #2
10059284:	d114      	bne.n	100592b0 <GAT_srv_check_perms+0xc8>
10059286:	2000      	movs	r0, #0
10059288:	e013      	b.n	100592b2 <GAT_srv_check_perms+0xca>
1005928a:	200e      	movs	r0, #14
1005928c:	e015      	b.n	100592ba <GAT_srv_check_perms+0xd2>
1005928e:	2000      	movs	r0, #0
10059290:	2f00      	cmp	r7, #0
10059292:	d012      	beq.n	100592ba <GAT_srv_check_perms+0xd2>
10059294:	a903      	add	r1, sp, #12
10059296:	7809      	ldrb	r1, [r1, #0]
10059298:	07fa      	lsls	r2, r7, #31
1005929a:	d003      	beq.n	100592a4 <GAT_srv_check_perms+0xbc>
1005929c:	2903      	cmp	r1, #3
1005929e:	d201      	bcs.n	100592a4 <GAT_srv_check_perms+0xbc>
100592a0:	2005      	movs	r0, #5
100592a2:	e00a      	b.n	100592ba <GAT_srv_check_perms+0xd2>
100592a4:	077a      	lsls	r2, r7, #29
100592a6:	d508      	bpl.n	100592ba <GAT_srv_check_perms+0xd2>
100592a8:	2902      	cmp	r1, #2
100592aa:	d208      	bcs.n	100592be <GAT_srv_check_perms+0xd6>
100592ac:	200f      	movs	r0, #15
100592ae:	e004      	b.n	100592ba <GAT_srv_check_perms+0xd2>
100592b0:	2005      	movs	r0, #5
100592b2:	2101      	movs	r1, #1
100592b4:	400f      	ands	r7, r1
100592b6:	d100      	bne.n	100592ba <GAT_srv_check_perms+0xd2>
100592b8:	4638      	mov	r0, r7
100592ba:	b005      	add	sp, #20
100592bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100592be:	4620      	mov	r0, r4
100592c0:	4631      	mov	r1, r6
100592c2:	f009 ff6a 	bl	1006319a <smp_sap_check_encryption_key_size>
100592c6:	28b6      	cmp	r0, #182	@ 0xb6
100592c8:	d001      	beq.n	100592ce <GAT_srv_check_perms+0xe6>
100592ca:	2000      	movs	r0, #0
100592cc:	e7f5      	b.n	100592ba <GAT_srv_check_perms+0xd2>
100592ce:	200c      	movs	r0, #12
100592d0:	e7f3      	b.n	100592ba <GAT_srv_check_perms+0xd2>
	...

100592d4 <GAT_srv_get_attr_value>:
100592d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100592d6:	b085      	sub	sp, #20
100592d8:	460d      	mov	r5, r1
100592da:	7809      	ldrb	r1, [r1, #0]
100592dc:	2904      	cmp	r1, #4
100592de:	d811      	bhi.n	10059304 <GAT_srv_get_attr_value+0x30>
100592e0:	4614      	mov	r4, r2
100592e2:	46c0      	nop			@ (mov r8, r8)
100592e4:	4479      	add	r1, pc
100592e6:	7909      	ldrb	r1, [r1, #4]
100592e8:	0049      	lsls	r1, r1, #1
100592ea:	448f      	add	pc, r1
100592ec:	694a0d02 	.word	0x694a0d02
100592f0:	007e      	.short	0x007e
100592f2:	4e73      	ldr	r6, [pc, #460]	@ (100594c0 <__arm_cp.13_0>)
100592f4:	6830      	ldr	r0, [r6, #0]
100592f6:	4601      	mov	r1, r0
100592f8:	3170      	adds	r1, #112	@ 0x70
100592fa:	66c1      	str	r1, [r0, #108]	@ 0x6c
100592fc:	6868      	ldr	r0, [r5, #4]
100592fe:	f00a fa87 	bl	10063810 <UUID_write_to_flat>
10059302:	e057      	b.n	100593b4 <GAT_srv_get_attr_value+0xe0>
10059304:	2686      	movs	r6, #134	@ 0x86
10059306:	e0d3      	b.n	100594b0 <GAT_srv_get_attr_value+0x1dc>
10059308:	4f6d      	ldr	r7, [pc, #436]	@ (100594c0 <__arm_cp.13_0>)
1005930a:	6838      	ldr	r0, [r7, #0]
1005930c:	4601      	mov	r1, r0
1005930e:	3170      	adds	r1, #112	@ 0x70
10059310:	66c1      	str	r1, [r0, #108]	@ 0x6c
10059312:	686b      	ldr	r3, [r5, #4]
10059314:	2001      	movs	r0, #1
10059316:	496e      	ldr	r1, [pc, #440]	@ (100594d0 <__arm_cp.13_4>)
10059318:	2600      	movs	r6, #0
1005931a:	4632      	mov	r2, r6
1005931c:	f000 fad6 	bl	100598cc <GAT_srv_get_attribute_handle>
10059320:	a901      	add	r1, sp, #4
10059322:	8008      	strh	r0, [r1, #0]
10059324:	2800      	cmp	r0, #0
10059326:	d100      	bne.n	1005932a <GAT_srv_get_attr_value+0x56>
10059328:	e0ad      	b.n	10059486 <GAT_srv_get_attr_value+0x1b2>
1005932a:	f00c f929 	bl	10065580 <GAT_att_db_find_by_handle>
1005932e:	f7ff ff37 	bl	100591a0 <GAT_srv_get_att_group_end_handle>
10059332:	a902      	add	r1, sp, #8
10059334:	9100      	str	r1, [sp, #0]
10059336:	8008      	strh	r0, [r1, #0]
10059338:	6838      	ldr	r0, [r7, #0]
1005933a:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
1005933c:	a901      	add	r1, sp, #4
1005933e:	2702      	movs	r7, #2
10059340:	463a      	mov	r2, r7
10059342:	f7f9 fff7 	bl	10053334 <BLEPLAT_MemCpy>
10059346:	485e      	ldr	r0, [pc, #376]	@ (100594c0 <__arm_cp.13_0>)
10059348:	6800      	ldr	r0, [r0, #0]
1005934a:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
1005934c:	1c80      	adds	r0, r0, #2
1005934e:	9900      	ldr	r1, [sp, #0]
10059350:	463a      	mov	r2, r7
10059352:	f7f9 ffef 	bl	10053334 <BLEPLAT_MemCpy>
10059356:	485a      	ldr	r0, [pc, #360]	@ (100594c0 <__arm_cp.13_0>)
10059358:	6800      	ldr	r0, [r0, #0]
1005935a:	2768      	movs	r7, #104	@ 0x68
1005935c:	2104      	movs	r1, #4
1005935e:	53c1      	strh	r1, [r0, r7]
10059360:	6869      	ldr	r1, [r5, #4]
10059362:	7c0a      	ldrb	r2, [r1, #16]
10059364:	2a10      	cmp	r2, #16
10059366:	d000      	beq.n	1005936a <GAT_srv_get_attr_value+0x96>
10059368:	e091      	b.n	1005948e <GAT_srv_get_attr_value+0x1ba>
1005936a:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
1005936c:	310c      	adds	r1, #12
1005936e:	1d00      	adds	r0, r0, #4
10059370:	2202      	movs	r2, #2
10059372:	f7f9 ffdf 	bl	10053334 <BLEPLAT_MemCpy>
10059376:	4852      	ldr	r0, [pc, #328]	@ (100594c0 <__arm_cp.13_0>)
10059378:	6800      	ldr	r0, [r0, #0]
1005937a:	5bc1      	ldrh	r1, [r0, r7]
1005937c:	1c89      	adds	r1, r1, #2
1005937e:	53c1      	strh	r1, [r0, r7]
10059380:	e085      	b.n	1005948e <GAT_srv_get_attr_value+0x1ba>
10059382:	4e4f      	ldr	r6, [pc, #316]	@ (100594c0 <__arm_cp.13_0>)
10059384:	6830      	ldr	r0, [r6, #0]
10059386:	4601      	mov	r1, r0
10059388:	3170      	adds	r1, #112	@ 0x70
1005938a:	66c1      	str	r1, [r0, #108]	@ 0x6c
1005938c:	6869      	ldr	r1, [r5, #4]
1005938e:	7809      	ldrb	r1, [r1, #0]
10059390:	2270      	movs	r2, #112	@ 0x70
10059392:	5481      	strb	r1, [r0, r2]
10059394:	8869      	ldrh	r1, [r5, #2]
10059396:	1c4a      	adds	r2, r1, #1
10059398:	a903      	add	r1, sp, #12
1005939a:	800a      	strh	r2, [r1, #0]
1005939c:	3071      	adds	r0, #113	@ 0x71
1005939e:	2202      	movs	r2, #2
100593a0:	f7f9 ffc8 	bl	10053334 <BLEPLAT_MemCpy>
100593a4:	6830      	ldr	r0, [r6, #0]
100593a6:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
100593a8:	6868      	ldr	r0, [r5, #4]
100593aa:	1d00      	adds	r0, r0, #4
100593ac:	1cc9      	adds	r1, r1, #3
100593ae:	f00a fa2f 	bl	10063810 <UUID_write_to_flat>
100593b2:	1cc0      	adds	r0, r0, #3
100593b4:	6831      	ldr	r1, [r6, #0]
100593b6:	2268      	movs	r2, #104	@ 0x68
100593b8:	5288      	strh	r0, [r1, r2]
100593ba:	3168      	adds	r1, #104	@ 0x68
100593bc:	6021      	str	r1, [r4, #0]
100593be:	e076      	b.n	100594ae <GAT_srv_get_attr_value+0x1da>
100593c0:	6869      	ldr	r1, [r5, #4]
100593c2:	7d0a      	ldrb	r2, [r1, #20]
100593c4:	2a10      	cmp	r2, #16
100593c6:	d132      	bne.n	1005942e <GAT_srv_get_attr_value+0x15a>
100593c8:	4a3f      	ldr	r2, [pc, #252]	@ (100594c8 <__arm_cp.13_2>)
100593ca:	1c52      	adds	r2, r2, #1
100593cc:	8a0b      	ldrh	r3, [r1, #16]
100593ce:	4293      	cmp	r3, r2
100593d0:	d12d      	bne.n	1005942e <GAT_srv_get_attr_value+0x15a>
100593d2:	483b      	ldr	r0, [pc, #236]	@ (100594c0 <__arm_cp.13_0>)
100593d4:	6801      	ldr	r1, [r0, #0]
100593d6:	3168      	adds	r1, #104	@ 0x68
100593d8:	6021      	str	r1, [r4, #0]
100593da:	6800      	ldr	r0, [r0, #0]
100593dc:	2168      	movs	r1, #104	@ 0x68
100593de:	2210      	movs	r2, #16
100593e0:	5242      	strh	r2, [r0, r1]
100593e2:	4601      	mov	r1, r0
100593e4:	3183      	adds	r1, #131	@ 0x83
100593e6:	66c1      	str	r1, [r0, #108]	@ 0x6c
100593e8:	e061      	b.n	100594ae <GAT_srv_get_attr_value+0x1da>
100593ea:	6869      	ldr	r1, [r5, #4]
100593ec:	6989      	ldr	r1, [r1, #24]
100593ee:	2900      	cmp	r1, #0
100593f0:	d045      	beq.n	1005947e <GAT_srv_get_attr_value+0x1aa>
100593f2:	4e33      	ldr	r6, [pc, #204]	@ (100594c0 <__arm_cp.13_0>)
100593f4:	6831      	ldr	r1, [r6, #0]
100593f6:	3168      	adds	r1, #104	@ 0x68
100593f8:	6021      	str	r1, [r4, #0]
100593fa:	6869      	ldr	r1, [r5, #4]
100593fc:	7d0a      	ldrb	r2, [r1, #20]
100593fe:	2a10      	cmp	r2, #16
10059400:	d13f      	bne.n	10059482 <GAT_srv_get_attr_value+0x1ae>
10059402:	8a0a      	ldrh	r2, [r1, #16]
10059404:	4b2f      	ldr	r3, [pc, #188]	@ (100594c4 <__arm_cp.13_1>)
10059406:	429a      	cmp	r2, r3
10059408:	d13b      	bne.n	10059482 <GAT_srv_get_attr_value+0x1ae>
1005940a:	6831      	ldr	r1, [r6, #0]
1005940c:	2268      	movs	r2, #104	@ 0x68
1005940e:	2402      	movs	r4, #2
10059410:	528c      	strh	r4, [r1, r2]
10059412:	460a      	mov	r2, r1
10059414:	3270      	adds	r2, #112	@ 0x70
10059416:	66ca      	str	r2, [r1, #108]	@ 0x6c
10059418:	4629      	mov	r1, r5
1005941a:	f000 fa91 	bl	10059940 <GAT_srv_get_cccd_val>
1005941e:	a904      	add	r1, sp, #16
10059420:	8008      	strh	r0, [r1, #0]
10059422:	6830      	ldr	r0, [r6, #0]
10059424:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
10059426:	4622      	mov	r2, r4
10059428:	f7f9 ff84 	bl	10053334 <BLEPLAT_MemCpy>
1005942c:	e03f      	b.n	100594ae <GAT_srv_get_attr_value+0x1da>
1005942e:	6a09      	ldr	r1, [r1, #32]
10059430:	2900      	cmp	r1, #0
10059432:	d024      	beq.n	1005947e <GAT_srv_get_attr_value+0x1aa>
10059434:	4e22      	ldr	r6, [pc, #136]	@ (100594c0 <__arm_cp.13_0>)
10059436:	6831      	ldr	r1, [r6, #0]
10059438:	3168      	adds	r1, #104	@ 0x68
1005943a:	6021      	str	r1, [r4, #0]
1005943c:	6869      	ldr	r1, [r5, #4]
1005943e:	7d0a      	ldrb	r2, [r1, #20]
10059440:	2a10      	cmp	r2, #16
10059442:	d127      	bne.n	10059494 <GAT_srv_get_attr_value+0x1c0>
10059444:	8a0a      	ldrh	r2, [r1, #16]
10059446:	4b20      	ldr	r3, [pc, #128]	@ (100594c8 <__arm_cp.13_2>)
10059448:	429a      	cmp	r2, r3
1005944a:	d123      	bne.n	10059494 <GAT_srv_get_attr_value+0x1c0>
1005944c:	6831      	ldr	r1, [r6, #0]
1005944e:	2268      	movs	r2, #104	@ 0x68
10059450:	2301      	movs	r3, #1
10059452:	528b      	strh	r3, [r1, r2]
10059454:	460a      	mov	r2, r1
10059456:	3270      	adds	r2, #112	@ 0x70
10059458:	66ca      	str	r2, [r1, #108]	@ 0x6c
1005945a:	f7fe fa37 	bl	100578cc <GAT_att_cmn_get_conn_index>
1005945e:	28ff      	cmp	r0, #255	@ 0xff
10059460:	d029      	beq.n	100594b6 <GAT_srv_get_attr_value+0x1e2>
10059462:	6869      	ldr	r1, [r5, #4]
10059464:	6a09      	ldr	r1, [r1, #32]
10059466:	688b      	ldr	r3, [r1, #8]
10059468:	4918      	ldr	r1, [pc, #96]	@ (100594cc <__arm_cp.13_3>)
1005946a:	7ac9      	ldrb	r1, [r1, #11]
1005946c:	0849      	lsrs	r1, r1, #1
1005946e:	1c4a      	adds	r2, r1, #1
10059470:	2104      	movs	r1, #4
10059472:	f000 f8d9 	bl	10059628 <GAT_srv_get_zip_val>
10059476:	6831      	ldr	r1, [r6, #0]
10059478:	2270      	movs	r2, #112	@ 0x70
1005947a:	5488      	strb	r0, [r1, r2]
1005947c:	e017      	b.n	100594ae <GAT_srv_get_attr_value+0x1da>
1005947e:	2684      	movs	r6, #132	@ 0x84
10059480:	e016      	b.n	100594b0 <GAT_srv_get_attr_value+0x1dc>
10059482:	6988      	ldr	r0, [r1, #24]
10059484:	e007      	b.n	10059496 <GAT_srv_get_attr_value+0x1c2>
10059486:	6838      	ldr	r0, [r7, #0]
10059488:	2168      	movs	r1, #104	@ 0x68
1005948a:	2200      	movs	r2, #0
1005948c:	5242      	strh	r2, [r0, r1]
1005948e:	3068      	adds	r0, #104	@ 0x68
10059490:	6020      	str	r0, [r4, #0]
10059492:	e00d      	b.n	100594b0 <GAT_srv_get_attr_value+0x1dc>
10059494:	6a08      	ldr	r0, [r1, #32]
10059496:	7801      	ldrb	r1, [r0, #0]
10059498:	0789      	lsls	r1, r1, #30
1005949a:	d501      	bpl.n	100594a0 <GAT_srv_get_attr_value+0x1cc>
1005949c:	2102      	movs	r1, #2
1005949e:	e000      	b.n	100594a2 <GAT_srv_get_attr_value+0x1ce>
100594a0:	2104      	movs	r1, #4
100594a2:	5a41      	ldrh	r1, [r0, r1]
100594a4:	6880      	ldr	r0, [r0, #8]
100594a6:	6832      	ldr	r2, [r6, #0]
100594a8:	2368      	movs	r3, #104	@ 0x68
100594aa:	52d1      	strh	r1, [r2, r3]
100594ac:	66d0      	str	r0, [r2, #108]	@ 0x6c
100594ae:	2600      	movs	r6, #0
100594b0:	4630      	mov	r0, r6
100594b2:	b005      	add	sp, #20
100594b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100594b6:	6830      	ldr	r0, [r6, #0]
100594b8:	2170      	movs	r1, #112	@ 0x70
100594ba:	2600      	movs	r6, #0
100594bc:	5446      	strb	r6, [r0, r1]
100594be:	e7f7      	b.n	100594b0 <GAT_srv_get_attr_value+0x1dc>

100594c0 <__arm_cp.13_0>:
100594c0:	20002910 	.word	0x20002910

100594c4 <__arm_cp.13_1>:
100594c4:	00002902 	.word	0x00002902

100594c8 <__arm_cp.13_2>:
100594c8:	00002b29 	.word	0x00002b29

100594cc <__arm_cp.13_3>:
100594cc:	2000296c 	.word	0x2000296c

100594d0 <__arm_cp.13_4>:
100594d0:	0000ffff 	.word	0x0000ffff

100594d4 <GAT_srv_attr_value_write>:
100594d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100594d6:	b089      	sub	sp, #36	@ 0x24
100594d8:	4617      	mov	r7, r2
100594da:	460d      	mov	r5, r1
100594dc:	4606      	mov	r6, r0
100594de:	7800      	ldrb	r0, [r0, #0]
100594e0:	8874      	ldrh	r4, [r6, #2]
100594e2:	2804      	cmp	r0, #4
100594e4:	d045      	beq.n	10059572 <GAT_srv_attr_value_write+0x9e>
100594e6:	2803      	cmp	r0, #3
100594e8:	d177      	bne.n	100595da <GAT_srv_attr_value_write+0x106>
100594ea:	6871      	ldr	r1, [r6, #4]
100594ec:	6a08      	ldr	r0, [r1, #32]
100594ee:	2800      	cmp	r0, #0
100594f0:	d07d      	beq.n	100595ee <GAT_srv_attr_value_write+0x11a>
100594f2:	7d0a      	ldrb	r2, [r1, #20]
100594f4:	2a10      	cmp	r2, #16
100594f6:	d174      	bne.n	100595e2 <GAT_srv_attr_value_write+0x10e>
100594f8:	8a09      	ldrh	r1, [r1, #16]
100594fa:	4a49      	ldr	r2, [pc, #292]	@ (10059620 <__arm_cp.14_1>)
100594fc:	4291      	cmp	r1, r2
100594fe:	d170      	bne.n	100595e2 <GAT_srv_attr_value_write+0x10e>
10059500:	9700      	str	r7, [sp, #0]
10059502:	2101      	movs	r1, #1
10059504:	aa07      	add	r2, sp, #28
10059506:	ab08      	add	r3, sp, #32
10059508:	4628      	mov	r0, r5
1005950a:	f7fe fd04 	bl	10057f16 <GAT_att_srv_extract_write_packet_data>
1005950e:	2800      	cmp	r0, #0
10059510:	d16e      	bne.n	100595f0 <GAT_srv_attr_value_write+0x11c>
10059512:	8828      	ldrh	r0, [r5, #0]
10059514:	f7fe f9da 	bl	100578cc <GAT_att_cmn_get_conn_index>
10059518:	aa07      	add	r2, sp, #28
1005951a:	7811      	ldrb	r1, [r2, #0]
1005951c:	2307      	movs	r3, #7
1005951e:	400b      	ands	r3, r1
10059520:	9305      	str	r3, [sp, #20]
10059522:	7013      	strb	r3, [r2, #0]
10059524:	6871      	ldr	r1, [r6, #4]
10059526:	6a09      	ldr	r1, [r1, #32]
10059528:	688b      	ldr	r3, [r1, #8]
1005952a:	493e      	ldr	r1, [pc, #248]	@ (10059624 <__arm_cp.14_2>)
1005952c:	7ac9      	ldrb	r1, [r1, #11]
1005952e:	0849      	lsrs	r1, r1, #1
10059530:	1c4a      	adds	r2, r1, #1
10059532:	2104      	movs	r1, #4
10059534:	9004      	str	r0, [sp, #16]
10059536:	9203      	str	r2, [sp, #12]
10059538:	9302      	str	r3, [sp, #8]
1005953a:	f000 f875 	bl	10059628 <GAT_srv_get_zip_val>
1005953e:	9a05      	ldr	r2, [sp, #20]
10059540:	4601      	mov	r1, r0
10059542:	4011      	ands	r1, r2
10059544:	4281      	cmp	r1, r0
10059546:	d157      	bne.n	100595f8 <GAT_srv_attr_value_write+0x124>
10059548:	9802      	ldr	r0, [sp, #8]
1005954a:	9000      	str	r0, [sp, #0]
1005954c:	2104      	movs	r1, #4
1005954e:	9804      	ldr	r0, [sp, #16]
10059550:	9b03      	ldr	r3, [sp, #12]
10059552:	f000 f87c 	bl	1005964e <GAT_srv_set_zip_val>
10059556:	6870      	ldr	r0, [r6, #4]
10059558:	6a00      	ldr	r0, [r0, #32]
1005955a:	7800      	ldrb	r0, [r0, #0]
1005955c:	07c0      	lsls	r0, r0, #31
1005955e:	d03a      	beq.n	100595d6 <GAT_srv_attr_value_write+0x102>
10059560:	882e      	ldrh	r6, [r5, #0]
10059562:	4628      	mov	r0, r5
10059564:	f000 ff95 	bl	1005a492 <L2C_get_cid_from_basic_packet_header>
10059568:	4602      	mov	r2, r0
1005956a:	a808      	add	r0, sp, #32
1005956c:	8800      	ldrh	r0, [r0, #0]
1005956e:	a907      	add	r1, sp, #28
10059570:	e04c      	b.n	1005960c <GAT_srv_attr_value_write+0x138>
10059572:	6871      	ldr	r1, [r6, #4]
10059574:	6988      	ldr	r0, [r1, #24]
10059576:	2800      	cmp	r0, #0
10059578:	d039      	beq.n	100595ee <GAT_srv_attr_value_write+0x11a>
1005957a:	7d0a      	ldrb	r2, [r1, #20]
1005957c:	2a10      	cmp	r2, #16
1005957e:	d130      	bne.n	100595e2 <GAT_srv_attr_value_write+0x10e>
10059580:	8a09      	ldrh	r1, [r1, #16]
10059582:	4a26      	ldr	r2, [pc, #152]	@ (1005961c <__arm_cp.14_0>)
10059584:	4291      	cmp	r1, r2
10059586:	d12c      	bne.n	100595e2 <GAT_srv_attr_value_write+0x10e>
10059588:	9700      	str	r7, [sp, #0]
1005958a:	2102      	movs	r1, #2
1005958c:	aa06      	add	r2, sp, #24
1005958e:	ab08      	add	r3, sp, #32
10059590:	4628      	mov	r0, r5
10059592:	f7fe fcc0 	bl	10057f16 <GAT_att_srv_extract_write_packet_data>
10059596:	2800      	cmp	r0, #0
10059598:	d12a      	bne.n	100595f0 <GAT_srv_attr_value_write+0x11c>
1005959a:	a806      	add	r0, sp, #24
1005959c:	8800      	ldrh	r0, [r0, #0]
1005959e:	9005      	str	r0, [sp, #20]
100595a0:	8870      	ldrh	r0, [r6, #2]
100595a2:	1e80      	subs	r0, r0, #2
100595a4:	b281      	uxth	r1, r0
100595a6:	2002      	movs	r0, #2
100595a8:	f00c f920 	bl	100657ec <GAT_att_db_reverse_find_attr_of_type>
100595ac:	2800      	cmp	r0, #0
100595ae:	d021      	beq.n	100595f4 <GAT_srv_attr_value_write+0x120>
100595b0:	9905      	ldr	r1, [sp, #20]
100595b2:	0789      	lsls	r1, r1, #30
100595b4:	0e89      	lsrs	r1, r1, #26
100595b6:	6840      	ldr	r0, [r0, #4]
100595b8:	7800      	ldrb	r0, [r0, #0]
100595ba:	4008      	ands	r0, r1
100595bc:	4288      	cmp	r0, r1
100595be:	d119      	bne.n	100595f4 <GAT_srv_attr_value_write+0x120>
100595c0:	a806      	add	r0, sp, #24
100595c2:	8802      	ldrh	r2, [r0, #0]
100595c4:	8828      	ldrh	r0, [r5, #0]
100595c6:	4631      	mov	r1, r6
100595c8:	f000 f882 	bl	100596d0 <GAT_srv_set_cccd_val>
100595cc:	6870      	ldr	r0, [r6, #4]
100595ce:	6980      	ldr	r0, [r0, #24]
100595d0:	7800      	ldrb	r0, [r0, #0]
100595d2:	07c0      	lsls	r0, r0, #31
100595d4:	d112      	bne.n	100595fc <GAT_srv_attr_value_write+0x128>
100595d6:	2000      	movs	r0, #0
100595d8:	e00a      	b.n	100595f0 <GAT_srv_attr_value_write+0x11c>
100595da:	2003      	movs	r0, #3
100595dc:	7038      	strb	r0, [r7, #0]
100595de:	2086      	movs	r0, #134	@ 0x86
100595e0:	e006      	b.n	100595f0 <GAT_srv_attr_value_write+0x11c>
100595e2:	4621      	mov	r1, r4
100595e4:	462a      	mov	r2, r5
100595e6:	463b      	mov	r3, r7
100595e8:	f000 f847 	bl	1005967a <GAT_srv_attr_direct_value_write>
100595ec:	e000      	b.n	100595f0 <GAT_srv_attr_value_write+0x11c>
100595ee:	2084      	movs	r0, #132	@ 0x84
100595f0:	b009      	add	sp, #36	@ 0x24
100595f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100595f4:	20fd      	movs	r0, #253	@ 0xfd
100595f6:	e7f1      	b.n	100595dc <GAT_srv_attr_value_write+0x108>
100595f8:	2013      	movs	r0, #19
100595fa:	e7ef      	b.n	100595dc <GAT_srv_attr_value_write+0x108>
100595fc:	882e      	ldrh	r6, [r5, #0]
100595fe:	4628      	mov	r0, r5
10059600:	f000 ff47 	bl	1005a492 <L2C_get_cid_from_basic_packet_header>
10059604:	4602      	mov	r2, r0
10059606:	a808      	add	r0, sp, #32
10059608:	8800      	ldrh	r0, [r0, #0]
1005960a:	a906      	add	r1, sp, #24
1005960c:	9000      	str	r0, [sp, #0]
1005960e:	9101      	str	r1, [sp, #4]
10059610:	2002      	movs	r0, #2
10059612:	4631      	mov	r1, r6
10059614:	4623      	mov	r3, r4
10059616:	f00a fd59 	bl	100640cc <aci_gatt_srv_attribute_modified_event_push_noinline>
1005961a:	e7e9      	b.n	100595f0 <GAT_srv_attr_value_write+0x11c>

1005961c <__arm_cp.14_0>:
1005961c:	00002902 	.word	0x00002902

10059620 <__arm_cp.14_1>:
10059620:	00002b29 	.word	0x00002b29

10059624 <__arm_cp.14_2>:
10059624:	2000296c 	.word	0x2000296c

10059628 <GAT_srv_get_zip_val>:
10059628:	b510      	push	{r4, lr}
1005962a:	4348      	muls	r0, r1
1005962c:	08c4      	lsrs	r4, r0, #3
1005962e:	b2a4      	uxth	r4, r4
10059630:	4294      	cmp	r4, r2
10059632:	d901      	bls.n	10059638 <GAT_srv_get_zip_val+0x10>
10059634:	2000      	movs	r0, #0
10059636:	bd10      	pop	{r4, pc}
10059638:	2207      	movs	r2, #7
1005963a:	4010      	ands	r0, r2
1005963c:	5d1a      	ldrb	r2, [r3, r4]
1005963e:	40c2      	lsrs	r2, r0
10059640:	2020      	movs	r0, #32
10059642:	1a41      	subs	r1, r0, r1
10059644:	2000      	movs	r0, #0
10059646:	43c0      	mvns	r0, r0
10059648:	40c8      	lsrs	r0, r1
1005964a:	4010      	ands	r0, r2
1005964c:	bd10      	pop	{r4, pc}

1005964e <GAT_srv_set_zip_val>:
1005964e:	b5b0      	push	{r4, r5, r7, lr}
10059650:	4348      	muls	r0, r1
10059652:	08c4      	lsrs	r4, r0, #3
10059654:	b2a4      	uxth	r4, r4
10059656:	429c      	cmp	r4, r3
10059658:	d80e      	bhi.n	10059678 <GAT_srv_set_zip_val+0x2a>
1005965a:	9b04      	ldr	r3, [sp, #16]
1005965c:	2507      	movs	r5, #7
1005965e:	4028      	ands	r0, r5
10059660:	2520      	movs	r5, #32
10059662:	1a69      	subs	r1, r5, r1
10059664:	2500      	movs	r5, #0
10059666:	43ed      	mvns	r5, r5
10059668:	40cd      	lsrs	r5, r1
1005966a:	402a      	ands	r2, r5
1005966c:	4082      	lsls	r2, r0
1005966e:	4085      	lsls	r5, r0
10059670:	5d18      	ldrb	r0, [r3, r4]
10059672:	43a8      	bics	r0, r5
10059674:	4310      	orrs	r0, r2
10059676:	5518      	strb	r0, [r3, r4]
10059678:	bdb0      	pop	{r4, r5, r7, pc}

1005967a <GAT_srv_attr_direct_value_write>:
1005967a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005967c:	4616      	mov	r6, r2
1005967e:	460c      	mov	r4, r1
10059680:	4605      	mov	r5, r0
10059682:	6882      	ldr	r2, [r0, #8]
10059684:	8881      	ldrh	r1, [r0, #4]
10059686:	9300      	str	r3, [sp, #0]
10059688:	ab02      	add	r3, sp, #8
1005968a:	4630      	mov	r0, r6
1005968c:	f7fe fc43 	bl	10057f16 <GAT_att_srv_extract_write_packet_data>
10059690:	2800      	cmp	r0, #0
10059692:	d000      	beq.n	10059696 <GAT_srv_attr_direct_value_write+0x1c>
10059694:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10059696:	7828      	ldrb	r0, [r5, #0]
10059698:	0781      	lsls	r1, r0, #30
1005969a:	d403      	bmi.n	100596a4 <GAT_srv_attr_direct_value_write+0x2a>
1005969c:	88a9      	ldrh	r1, [r5, #4]
1005969e:	aa02      	add	r2, sp, #8
100596a0:	8011      	strh	r1, [r2, #0]
100596a2:	e001      	b.n	100596a8 <GAT_srv_attr_direct_value_write+0x2e>
100596a4:	9902      	ldr	r1, [sp, #8]
100596a6:	8069      	strh	r1, [r5, #2]
100596a8:	07c0      	lsls	r0, r0, #31
100596aa:	d101      	bne.n	100596b0 <GAT_srv_attr_direct_value_write+0x36>
100596ac:	2000      	movs	r0, #0
100596ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100596b0:	8837      	ldrh	r7, [r6, #0]
100596b2:	4630      	mov	r0, r6
100596b4:	f000 feed 	bl	1005a492 <L2C_get_cid_from_basic_packet_header>
100596b8:	4602      	mov	r2, r0
100596ba:	a802      	add	r0, sp, #8
100596bc:	8800      	ldrh	r0, [r0, #0]
100596be:	68a9      	ldr	r1, [r5, #8]
100596c0:	9000      	str	r0, [sp, #0]
100596c2:	9101      	str	r1, [sp, #4]
100596c4:	2002      	movs	r0, #2
100596c6:	4639      	mov	r1, r7
100596c8:	4623      	mov	r3, r4
100596ca:	f00a fcff 	bl	100640cc <aci_gatt_srv_attribute_modified_event_push_noinline>
100596ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100596d0 <GAT_srv_set_cccd_val>:
100596d0:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100596d2:	4614      	mov	r4, r2
100596d4:	460d      	mov	r5, r1
100596d6:	f7fe f8f9 	bl	100578cc <GAT_att_cmn_get_conn_index>
100596da:	6869      	ldr	r1, [r5, #4]
100596dc:	6989      	ldr	r1, [r1, #24]
100596de:	888b      	ldrh	r3, [r1, #4]
100596e0:	6889      	ldr	r1, [r1, #8]
100596e2:	9100      	str	r1, [sp, #0]
100596e4:	2103      	movs	r1, #3
100596e6:	400c      	ands	r4, r1
100596e8:	2102      	movs	r1, #2
100596ea:	4622      	mov	r2, r4
100596ec:	f7ff ffaf 	bl	1005964e <GAT_srv_set_zip_val>
100596f0:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
	...

100596f4 <GAT_srv_is_supported_grouping_type>:
100596f4:	b570      	push	{r4, r5, r6, lr}
100596f6:	b08a      	sub	sp, #40	@ 0x28
100596f8:	4604      	mov	r4, r0
100596fa:	ad05      	add	r5, sp, #20
100596fc:	a10d      	add	r1, pc, #52	@ (adr r1, 10059734 <GAT_srv_is_supported_grouping_type+0x40>)
100596fe:	2614      	movs	r6, #20
10059700:	4628      	mov	r0, r5
10059702:	4632      	mov	r2, r6
10059704:	f00f f88b 	bl	1006881e <__aeabi_memcpy>
10059708:	4668      	mov	r0, sp
1005970a:	a10f      	add	r1, pc, #60	@ (adr r1, 10059748 <GAT_srv_is_supported_grouping_type+0x54>)
1005970c:	4632      	mov	r2, r6
1005970e:	f00f f886 	bl	1006881e <__aeabi_memcpy>
10059712:	4620      	mov	r0, r4
10059714:	4629      	mov	r1, r5
10059716:	f00a f84b 	bl	100637b0 <UUID_cmp_128bits>
1005971a:	2800      	cmp	r0, #0
1005971c:	d007      	beq.n	1005972e <GAT_srv_is_supported_grouping_type+0x3a>
1005971e:	4669      	mov	r1, sp
10059720:	4620      	mov	r0, r4
10059722:	f00a f845 	bl	100637b0 <UUID_cmp_128bits>
10059726:	4601      	mov	r1, r0
10059728:	4240      	negs	r0, r0
1005972a:	4148      	adcs	r0, r1
1005972c:	e000      	b.n	10059730 <GAT_srv_is_supported_grouping_type+0x3c>
1005972e:	2001      	movs	r0, #1
10059730:	b00a      	add	sp, #40	@ 0x28
10059732:	bd70      	pop	{r4, r5, r6, pc}
10059734:	5f9b34fb 	.word	0x5f9b34fb
10059738:	80000080 	.word	0x80000080
1005973c:	00001000 	.word	0x00001000
10059740:	00002800 	.word	0x00002800
10059744:	00000010 	.word	0x00000010
10059748:	5f9b34fb 	.word	0x5f9b34fb
1005974c:	80000080 	.word	0x80000080
10059750:	00001000 	.word	0x00001000
10059754:	00002801 	.word	0x00002801
10059758:	00000010 	.word	0x00000010

1005975c <GAT_srv_set_change_aware>:
1005975c:	b5e0      	push	{r5, r6, r7, lr}
1005975e:	aa01      	add	r2, sp, #4
10059760:	21c2      	movs	r1, #194	@ 0xc2
10059762:	8011      	strh	r1, [r2, #0]
10059764:	8901      	ldrh	r1, [r0, #8]
10059766:	9200      	str	r2, [sp, #0]
10059768:	2001      	movs	r0, #1
1005976a:	2200      	movs	r2, #0
1005976c:	4b01      	ldr	r3, [pc, #4]	@ (10059774 <__arm_cp.21_0>)
1005976e:	f7fd ff45 	bl	100575fc <GAT_att_cmn_for_each_ch_descr>
10059772:	bd8c      	pop	{r2, r3, r7, pc}

10059774 <__arm_cp.21_0>:
10059774:	100578c1 	.word	0x100578c1

10059778 <GAT_srv_check_change_aware>:
10059778:	b5f0      	push	{r4, r5, r6, r7, lr}
1005977a:	b087      	sub	sp, #28
1005977c:	4605      	mov	r5, r0
1005977e:	ac02      	add	r4, sp, #8
10059780:	4927      	ldr	r1, [pc, #156]	@ (10059820 <__arm_cp.22_0>)
10059782:	2214      	movs	r2, #20
10059784:	4620      	mov	r0, r4
10059786:	f00f f84a 	bl	1006881e <__aeabi_memcpy>
1005978a:	2001      	movs	r0, #1
1005978c:	4e25      	ldr	r6, [pc, #148]	@ (10059824 <__arm_cp.22_1>)
1005978e:	4631      	mov	r1, r6
10059790:	4622      	mov	r2, r4
10059792:	f000 f84d 	bl	10059830 <GAT_srv_find_by_type_attr_p>
10059796:	2700      	movs	r7, #0
10059798:	2800      	cmp	r0, #0
1005979a:	d03c      	beq.n	10059816 <GAT_srv_check_change_aware+0x9e>
1005979c:	4601      	mov	r1, r0
1005979e:	6828      	ldr	r0, [r5, #0]
100597a0:	8882      	ldrh	r2, [r0, #4]
100597a2:	0652      	lsls	r2, r2, #25
100597a4:	d537      	bpl.n	10059816 <GAT_srv_check_change_aware+0x9e>
100597a6:	792a      	ldrb	r2, [r5, #4]
100597a8:	23fe      	movs	r3, #254	@ 0xfe
100597aa:	4013      	ands	r3, r2
100597ac:	2486      	movs	r4, #134	@ 0x86
100597ae:	2b04      	cmp	r3, #4
100597b0:	d032      	beq.n	10059818 <GAT_srv_check_change_aware+0xa0>
100597b2:	8900      	ldrh	r0, [r0, #8]
100597b4:	2201      	movs	r2, #1
100597b6:	f000 f85b 	bl	10059870 <GAT_srv_check_client_support_feature>
100597ba:	2881      	cmp	r0, #129	@ 0x81
100597bc:	d02b      	beq.n	10059816 <GAT_srv_check_change_aware+0x9e>
100597be:	6828      	ldr	r0, [r5, #0]
100597c0:	8881      	ldrh	r1, [r0, #4]
100597c2:	060a      	lsls	r2, r1, #24
100597c4:	d425      	bmi.n	10059812 <GAT_srv_check_change_aware+0x9a>
100597c6:	2780      	movs	r7, #128	@ 0x80
100597c8:	4339      	orrs	r1, r7
100597ca:	8081      	strh	r1, [r0, #4]
100597cc:	7928      	ldrb	r0, [r5, #4]
100597ce:	2802      	cmp	r0, #2
100597d0:	d122      	bne.n	10059818 <GAT_srv_check_change_aware+0xa0>
100597d2:	8928      	ldrh	r0, [r5, #8]
100597d4:	2801      	cmp	r0, #1
100597d6:	d11f      	bne.n	10059818 <GAT_srv_check_change_aware+0xa0>
100597d8:	8968      	ldrh	r0, [r5, #10]
100597da:	42b0      	cmp	r0, r6
100597dc:	d11c      	bne.n	10059818 <GAT_srv_check_change_aware+0xa0>
100597de:	68ea      	ldr	r2, [r5, #12]
100597e0:	7c10      	ldrb	r0, [r2, #16]
100597e2:	2810      	cmp	r0, #16
100597e4:	d118      	bne.n	10059818 <GAT_srv_check_change_aware+0xa0>
100597e6:	8990      	ldrh	r0, [r2, #12]
100597e8:	490f      	ldr	r1, [pc, #60]	@ (10059828 <__arm_cp.22_2>)
100597ea:	4288      	cmp	r0, r1
100597ec:	d114      	bne.n	10059818 <GAT_srv_check_change_aware+0xa0>
100597ee:	2001      	movs	r0, #1
100597f0:	4631      	mov	r1, r6
100597f2:	f000 f81d 	bl	10059830 <GAT_srv_find_by_type_attr_p>
100597f6:	2800      	cmp	r0, #0
100597f8:	d00e      	beq.n	10059818 <GAT_srv_check_change_aware+0xa0>
100597fa:	a801      	add	r0, sp, #4
100597fc:	8007      	strh	r7, [r0, #0]
100597fe:	6829      	ldr	r1, [r5, #0]
10059800:	8909      	ldrh	r1, [r1, #8]
10059802:	9000      	str	r0, [sp, #0]
10059804:	2001      	movs	r0, #1
10059806:	2400      	movs	r4, #0
10059808:	4b08      	ldr	r3, [pc, #32]	@ (1005982c <__arm_cp.22_3>)
1005980a:	4622      	mov	r2, r4
1005980c:	f7fd fef6 	bl	100575fc <GAT_att_cmn_for_each_ch_descr>
10059810:	e002      	b.n	10059818 <GAT_srv_check_change_aware+0xa0>
10059812:	f7ff ffa3 	bl	1005975c <GAT_srv_set_change_aware>
10059816:	463c      	mov	r4, r7
10059818:	4620      	mov	r0, r4
1005981a:	b007      	add	sp, #28
1005981c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005981e:	46c0      	nop			@ (mov r8, r8)

10059820 <__arm_cp.22_0>:
10059820:	1006a46c 	.word	0x1006a46c

10059824 <__arm_cp.22_1>:
10059824:	0000ffff 	.word	0x0000ffff

10059828 <__arm_cp.22_2>:
10059828:	00002b2a 	.word	0x00002b2a

1005982c <__arm_cp.22_3>:
1005982c:	100578b5 	.word	0x100578b5

10059830 <GAT_srv_find_by_type_attr_p>:
10059830:	b5f0      	push	{r4, r5, r6, r7, lr}
10059832:	b085      	sub	sp, #20
10059834:	4614      	mov	r4, r2
10059836:	460d      	mov	r5, r1
10059838:	f00b feca 	bl	100655d0 <GAT_att_db_find_from_handle>
1005983c:	4606      	mov	r6, r0
1005983e:	2000      	movs	r0, #0
10059840:	2e00      	cmp	r6, #0
10059842:	d012      	beq.n	1005986a <GAT_srv_find_by_type_attr_p+0x3a>
10059844:	8871      	ldrh	r1, [r6, #2]
10059846:	42a9      	cmp	r1, r5
10059848:	d80f      	bhi.n	1005986a <GAT_srv_find_by_type_attr_p+0x3a>
1005984a:	466f      	mov	r7, sp
1005984c:	4630      	mov	r0, r6
1005984e:	4639      	mov	r1, r7
10059850:	f7ff fc7e 	bl	10059150 <GAT_srv_get_attr_type>
10059854:	4620      	mov	r0, r4
10059856:	4639      	mov	r1, r7
10059858:	f009 ff93 	bl	10063782 <UUID_cmp>
1005985c:	2800      	cmp	r0, #0
1005985e:	d003      	beq.n	10059868 <GAT_srv_find_by_type_attr_p+0x38>
10059860:	4630      	mov	r0, r6
10059862:	f00b ff17 	bl	10065694 <GAT_att_db_get_next>
10059866:	e7e9      	b.n	1005983c <GAT_srv_find_by_type_attr_p+0xc>
10059868:	4630      	mov	r0, r6
1005986a:	b005      	add	sp, #20
1005986c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10059870 <GAT_srv_check_client_support_feature>:
10059870:	b570      	push	{r4, r5, r6, lr}
10059872:	b086      	sub	sp, #24
10059874:	4614      	mov	r4, r2
10059876:	460e      	mov	r6, r1
10059878:	4605      	mov	r5, r0
1005987a:	a801      	add	r0, sp, #4
1005987c:	4910      	ldr	r1, [pc, #64]	@ (100598c0 <__arm_cp.24_0>)
1005987e:	2214      	movs	r2, #20
10059880:	f00e ffcd 	bl	1006881e <__aeabi_memcpy>
10059884:	2e00      	cmp	r6, #0
10059886:	d107      	bne.n	10059898 <GAT_srv_check_client_support_feature+0x28>
10059888:	2001      	movs	r0, #1
1005988a:	490e      	ldr	r1, [pc, #56]	@ (100598c4 <__arm_cp.24_1>)
1005988c:	aa01      	add	r2, sp, #4
1005988e:	f7ff ffcf 	bl	10059830 <GAT_srv_find_by_type_attr_p>
10059892:	4606      	mov	r6, r0
10059894:	2800      	cmp	r0, #0
10059896:	d010      	beq.n	100598ba <GAT_srv_check_client_support_feature+0x4a>
10059898:	4628      	mov	r0, r5
1005989a:	f7fe f817 	bl	100578cc <GAT_att_cmn_get_conn_index>
1005989e:	6871      	ldr	r1, [r6, #4]
100598a0:	6a09      	ldr	r1, [r1, #32]
100598a2:	688b      	ldr	r3, [r1, #8]
100598a4:	4908      	ldr	r1, [pc, #32]	@ (100598c8 <__arm_cp.24_2>)
100598a6:	7ac9      	ldrb	r1, [r1, #11]
100598a8:	0849      	lsrs	r1, r1, #1
100598aa:	1c4a      	adds	r2, r1, #1
100598ac:	2104      	movs	r1, #4
100598ae:	f7ff febb 	bl	10059628 <GAT_srv_get_zip_val>
100598b2:	4220      	tst	r0, r4
100598b4:	d001      	beq.n	100598ba <GAT_srv_check_client_support_feature+0x4a>
100598b6:	2000      	movs	r0, #0
100598b8:	e000      	b.n	100598bc <GAT_srv_check_client_support_feature+0x4c>
100598ba:	2081      	movs	r0, #129	@ 0x81
100598bc:	b006      	add	sp, #24
100598be:	bd70      	pop	{r4, r5, r6, pc}

100598c0 <__arm_cp.24_0>:
100598c0:	1006a46c 	.word	0x1006a46c

100598c4 <__arm_cp.24_1>:
100598c4:	0000ffff 	.word	0x0000ffff

100598c8 <__arm_cp.24_2>:
100598c8:	2000296c 	.word	0x2000296c

100598cc <GAT_srv_get_attribute_handle>:
100598cc:	b580      	push	{r7, lr}
100598ce:	f00b fea9 	bl	10065624 <GAT_att_db_find_by_def>
100598d2:	2800      	cmp	r0, #0
100598d4:	d001      	beq.n	100598da <GAT_srv_get_attribute_handle+0xe>
100598d6:	8840      	ldrh	r0, [r0, #2]
100598d8:	bd80      	pop	{r7, pc}
100598da:	2000      	movs	r0, #0
100598dc:	bd80      	pop	{r7, pc}
	...

100598e0 <GAT_srv_get_cccd_attr_p>:
100598e0:	b570      	push	{r4, r5, r6, lr}
100598e2:	b08a      	sub	sp, #40	@ 0x28
100598e4:	4605      	mov	r5, r0
100598e6:	a805      	add	r0, sp, #20
100598e8:	a110      	add	r1, pc, #64	@ (adr r1, 1005992c <GAT_srv_get_cccd_attr_p+0x4c>)
100598ea:	2214      	movs	r2, #20
100598ec:	f00e ff97 	bl	1006881e <__aeabi_memcpy>
100598f0:	7828      	ldrb	r0, [r5, #0]
100598f2:	21fe      	movs	r1, #254	@ 0xfe
100598f4:	4001      	ands	r1, r0
100598f6:	2400      	movs	r4, #0
100598f8:	2902      	cmp	r1, #2
100598fa:	d114      	bne.n	10059926 <GAT_srv_get_cccd_attr_p+0x46>
100598fc:	4628      	mov	r0, r5
100598fe:	f00b fec9 	bl	10065694 <GAT_att_db_get_next>
10059902:	4605      	mov	r5, r0
10059904:	2800      	cmp	r0, #0
10059906:	d00e      	beq.n	10059926 <GAT_srv_get_cccd_attr_p+0x46>
10059908:	7828      	ldrb	r0, [r5, #0]
1005990a:	2802      	cmp	r0, #2
1005990c:	d00b      	beq.n	10059926 <GAT_srv_get_cccd_attr_p+0x46>
1005990e:	466e      	mov	r6, sp
10059910:	4628      	mov	r0, r5
10059912:	4631      	mov	r1, r6
10059914:	f7ff fc1c 	bl	10059150 <GAT_srv_get_attr_type>
10059918:	a805      	add	r0, sp, #20
1005991a:	4631      	mov	r1, r6
1005991c:	f009 ff31 	bl	10063782 <UUID_cmp>
10059920:	2800      	cmp	r0, #0
10059922:	d1eb      	bne.n	100598fc <GAT_srv_get_cccd_attr_p+0x1c>
10059924:	462c      	mov	r4, r5
10059926:	4620      	mov	r0, r4
10059928:	b00a      	add	sp, #40	@ 0x28
1005992a:	bd70      	pop	{r4, r5, r6, pc}
1005992c:	5f9b34fb 	.word	0x5f9b34fb
10059930:	80000080 	.word	0x80000080
10059934:	00001000 	.word	0x00001000
10059938:	00002902 	.word	0x00002902
1005993c:	00000010 	.word	0x00000010

10059940 <GAT_srv_get_cccd_val>:
10059940:	b510      	push	{r4, lr}
10059942:	460c      	mov	r4, r1
10059944:	f7fd ffc2 	bl	100578cc <GAT_att_cmn_get_conn_index>
10059948:	6861      	ldr	r1, [r4, #4]
1005994a:	6989      	ldr	r1, [r1, #24]
1005994c:	688b      	ldr	r3, [r1, #8]
1005994e:	888a      	ldrh	r2, [r1, #4]
10059950:	2102      	movs	r1, #2
10059952:	f7ff fe69 	bl	10059628 <GAT_srv_get_zip_val>
10059956:	bd10      	pop	{r4, pc}

10059958 <GAT_srv_aes_cmac_append>:
10059958:	b5f0      	push	{r4, r5, r6, r7, lr}
1005995a:	b085      	sub	sp, #20
1005995c:	9203      	str	r2, [sp, #12]
1005995e:	460c      	mov	r4, r1
10059960:	2101      	movs	r1, #1
10059962:	0209      	lsls	r1, r1, #8
10059964:	1841      	adds	r1, r0, r1
10059966:	9104      	str	r1, [sp, #16]
10059968:	9002      	str	r0, [sp, #8]
1005996a:	30e0      	adds	r0, #224	@ 0xe0
1005996c:	9001      	str	r0, [sp, #4]
1005996e:	0420      	lsls	r0, r4, #16
10059970:	d023      	beq.n	100599ba <GAT_srv_aes_cmac_append+0x62>
10059972:	9804      	ldr	r0, [sp, #16]
10059974:	8800      	ldrh	r0, [r0, #0]
10059976:	2810      	cmp	r0, #16
10059978:	d107      	bne.n	1005998a <GAT_srv_aes_cmac_append+0x32>
1005997a:	2210      	movs	r2, #16
1005997c:	9802      	ldr	r0, [sp, #8]
1005997e:	9901      	ldr	r1, [sp, #4]
10059980:	f7f9 fd42 	bl	10053408 <BLEPLAT_AesCMACEncryptAppend>
10059984:	2000      	movs	r0, #0
10059986:	9904      	ldr	r1, [sp, #16]
10059988:	8008      	strh	r0, [r1, #0]
1005998a:	2110      	movs	r1, #16
1005998c:	1a0d      	subs	r5, r1, r0
1005998e:	b2a9      	uxth	r1, r5
10059990:	b2a2      	uxth	r2, r4
10059992:	4291      	cmp	r1, r2
10059994:	d300      	bcc.n	10059998 <GAT_srv_aes_cmac_append+0x40>
10059996:	4625      	mov	r5, r4
10059998:	b2af      	uxth	r7, r5
1005999a:	9902      	ldr	r1, [sp, #8]
1005999c:	1808      	adds	r0, r1, r0
1005999e:	30e0      	adds	r0, #224	@ 0xe0
100599a0:	9e03      	ldr	r6, [sp, #12]
100599a2:	4631      	mov	r1, r6
100599a4:	463a      	mov	r2, r7
100599a6:	f7f9 fcc5 	bl	10053334 <BLEPLAT_MemCpy>
100599aa:	9904      	ldr	r1, [sp, #16]
100599ac:	8808      	ldrh	r0, [r1, #0]
100599ae:	1828      	adds	r0, r5, r0
100599b0:	8008      	strh	r0, [r1, #0]
100599b2:	1b64      	subs	r4, r4, r5
100599b4:	19f6      	adds	r6, r6, r7
100599b6:	9603      	str	r6, [sp, #12]
100599b8:	e7d9      	b.n	1005996e <GAT_srv_aes_cmac_append+0x16>
100599ba:	b005      	add	sp, #20
100599bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

100599c0 <GAT_srv_add_service>:
100599c0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100599c2:	4604      	mov	r4, r0
100599c4:	f000 f89c 	bl	10059b00 <GAT_srv_db_update_allowed>
100599c8:	250c      	movs	r5, #12
100599ca:	2800      	cmp	r0, #0
100599cc:	d025      	beq.n	10059a1a <GAT_srv_add_service+0x5a>
100599ce:	2612      	movs	r6, #18
100599d0:	2c00      	cmp	r4, #0
100599d2:	d023      	beq.n	10059a1c <GAT_srv_add_service+0x5c>
100599d4:	7d20      	ldrb	r0, [r4, #20]
100599d6:	1e40      	subs	r0, r0, #1
100599d8:	2801      	cmp	r0, #1
100599da:	d81f      	bhi.n	10059a1c <GAT_srv_add_service+0x5c>
100599dc:	7c20      	ldrb	r0, [r4, #16]
100599de:	2880      	cmp	r0, #128	@ 0x80
100599e0:	d01e      	beq.n	10059a20 <GAT_srv_add_service+0x60>
100599e2:	2810      	cmp	r0, #16
100599e4:	d11a      	bne.n	10059a1c <GAT_srv_add_service+0x5c>
100599e6:	89a0      	ldrh	r0, [r4, #12]
100599e8:	2101      	movs	r1, #1
100599ea:	4388      	bics	r0, r1
100599ec:	2103      	movs	r1, #3
100599ee:	02c9      	lsls	r1, r1, #11
100599f0:	4288      	cmp	r0, r1
100599f2:	d115      	bne.n	10059a20 <GAT_srv_add_service+0x60>
100599f4:	2001      	movs	r0, #1
100599f6:	f00b fdeb 	bl	100655d0 <GAT_att_db_find_from_handle>
100599fa:	2800      	cmp	r0, #0
100599fc:	d010      	beq.n	10059a20 <GAT_srv_add_service+0x60>
100599fe:	7801      	ldrb	r1, [r0, #0]
10059a00:	2900      	cmp	r1, #0
10059a02:	d107      	bne.n	10059a14 <GAT_srv_add_service+0x54>
10059a04:	6841      	ldr	r1, [r0, #4]
10059a06:	7c0a      	ldrb	r2, [r1, #16]
10059a08:	2a10      	cmp	r2, #16
10059a0a:	d103      	bne.n	10059a14 <GAT_srv_add_service+0x54>
10059a0c:	8989      	ldrh	r1, [r1, #12]
10059a0e:	89a2      	ldrh	r2, [r4, #12]
10059a10:	428a      	cmp	r2, r1
10059a12:	d002      	beq.n	10059a1a <GAT_srv_add_service+0x5a>
10059a14:	f00b fe3e 	bl	10065694 <GAT_att_db_get_next>
10059a18:	e7ef      	b.n	100599fa <GAT_srv_add_service+0x3a>
10059a1a:	462e      	mov	r6, r5
10059a1c:	4630      	mov	r0, r6
10059a1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10059a20:	2000      	movs	r0, #0
10059a22:	f00b fecd 	bl	100657c0 <GAT_att_db_find_last_attr_of_type>
10059a26:	2800      	cmp	r0, #0
10059a28:	d006      	beq.n	10059a38 <GAT_srv_add_service+0x78>
10059a2a:	6841      	ldr	r1, [r0, #4]
10059a2c:	8ac9      	ldrh	r1, [r1, #22]
10059a2e:	2900      	cmp	r1, #0
10059a30:	d004      	beq.n	10059a3c <GAT_srv_add_service+0x7c>
10059a32:	8840      	ldrh	r0, [r0, #2]
10059a34:	1840      	adds	r0, r0, r1
10059a36:	e004      	b.n	10059a42 <GAT_srv_add_service+0x82>
10059a38:	2001      	movs	r0, #1
10059a3a:	e002      	b.n	10059a42 <GAT_srv_add_service+0x82>
10059a3c:	f00b fe6e 	bl	1006571c <GAT_att_db_get_last_handle>
10059a40:	1c40      	adds	r0, r0, #1
10059a42:	b282      	uxth	r2, r0
10059a44:	2600      	movs	r6, #0
10059a46:	4630      	mov	r0, r6
10059a48:	4631      	mov	r1, r6
10059a4a:	4623      	mov	r3, r4
10059a4c:	f00b fd44 	bl	100654d8 <GAT_att_db_insert>
10059a50:	2800      	cmp	r0, #0
10059a52:	d020      	beq.n	10059a96 <GAT_srv_add_service+0xd6>
10059a54:	43f7      	mvns	r7, r6
10059a56:	8ae1      	ldrh	r1, [r4, #22]
10059a58:	1e49      	subs	r1, r1, #1
10059a5a:	9102      	str	r1, [sp, #8]
10059a5c:	9000      	str	r0, [sp, #0]
10059a5e:	9401      	str	r4, [sp, #4]
10059a60:	1c7f      	adds	r7, r7, #1
10059a62:	7e21      	ldrb	r1, [r4, #24]
10059a64:	428f      	cmp	r7, r1
10059a66:	d218      	bcs.n	10059a9a <GAT_srv_add_service+0xda>
10059a68:	8ae1      	ldrh	r1, [r4, #22]
10059a6a:	2900      	cmp	r1, #0
10059a6c:	d004      	beq.n	10059a78 <GAT_srv_add_service+0xb8>
10059a6e:	9a02      	ldr	r2, [sp, #8]
10059a70:	0411      	lsls	r1, r2, #16
10059a72:	d03a      	beq.n	10059aea <GAT_srv_add_service+0x12a>
10059a74:	1e52      	subs	r2, r2, #1
10059a76:	9202      	str	r2, [sp, #8]
10059a78:	1d35      	adds	r5, r6, #4
10059a7a:	1c40      	adds	r0, r0, #1
10059a7c:	9c01      	ldr	r4, [sp, #4]
10059a7e:	69e1      	ldr	r1, [r4, #28]
10059a80:	598b      	ldr	r3, [r1, r6]
10059a82:	b282      	uxth	r2, r0
10059a84:	2001      	movs	r0, #1
10059a86:	2100      	movs	r1, #0
10059a88:	f00b fd26 	bl	100654d8 <GAT_att_db_insert>
10059a8c:	2800      	cmp	r0, #0
10059a8e:	462e      	mov	r6, r5
10059a90:	d1e6      	bne.n	10059a60 <GAT_srv_add_service+0xa0>
10059a92:	2687      	movs	r6, #135	@ 0x87
10059a94:	e02e      	b.n	10059af4 <GAT_srv_add_service+0x134>
10059a96:	2687      	movs	r6, #135	@ 0x87
10059a98:	e7c0      	b.n	10059a1c <GAT_srv_add_service+0x5c>
10059a9a:	4818      	ldr	r0, [pc, #96]	@ (10059afc <__arm_cp.0_0>)
10059a9c:	6800      	ldr	r0, [r0, #0]
10059a9e:	215c      	movs	r1, #92	@ 0x5c
10059aa0:	5c42      	ldrb	r2, [r0, r1]
10059aa2:	2302      	movs	r3, #2
10059aa4:	4313      	orrs	r3, r2
10059aa6:	5443      	strb	r3, [r0, r1]
10059aa8:	200a      	movs	r0, #10
10059aaa:	f009 fcd9 	bl	10063460 <tsk_notify_idx>
10059aae:	f7f8 fe5a 	bl	10052766 <BLE_STACK_ProcessRequest>
10059ab2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
10059ab4:	2600      	movs	r6, #0
10059ab6:	2800      	cmp	r0, #0
10059ab8:	d0b0      	beq.n	10059a1c <GAT_srv_add_service+0x5c>
10059aba:	2020      	movs	r0, #32
10059abc:	5c20      	ldrb	r0, [r4, r0]
10059abe:	2800      	cmp	r0, #0
10059ac0:	d0ac      	beq.n	10059a1c <GAT_srv_add_service+0x5c>
10059ac2:	4621      	mov	r1, r4
10059ac4:	3120      	adds	r1, #32
10059ac6:	9102      	str	r1, [sp, #8]
10059ac8:	2500      	movs	r5, #0
10059aca:	462f      	mov	r7, r5
10059acc:	9501      	str	r5, [sp, #4]
10059ace:	4285      	cmp	r5, r0
10059ad0:	9900      	ldr	r1, [sp, #0]
10059ad2:	d20c      	bcs.n	10059aee <GAT_srv_add_service+0x12e>
10059ad4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
10059ad6:	19c0      	adds	r0, r0, r7
10059ad8:	f000 f822 	bl	10059b20 <GAT_srv_add_characteristic>
10059adc:	2800      	cmp	r0, #0
10059ade:	d108      	bne.n	10059af2 <GAT_srv_add_service+0x132>
10059ae0:	3724      	adds	r7, #36	@ 0x24
10059ae2:	9802      	ldr	r0, [sp, #8]
10059ae4:	7800      	ldrb	r0, [r0, #0]
10059ae6:	1c6d      	adds	r5, r5, #1
10059ae8:	e7f1      	b.n	10059ace <GAT_srv_add_service+0x10e>
10059aea:	2612      	movs	r6, #18
10059aec:	e002      	b.n	10059af4 <GAT_srv_add_service+0x134>
10059aee:	9e01      	ldr	r6, [sp, #4]
10059af0:	e794      	b.n	10059a1c <GAT_srv_add_service+0x5c>
10059af2:	4606      	mov	r6, r0
10059af4:	9800      	ldr	r0, [sp, #0]
10059af6:	f000 f8a3 	bl	10059c40 <GAT_srv_rm_service>
10059afa:	e78f      	b.n	10059a1c <GAT_srv_add_service+0x5c>

10059afc <__arm_cp.0_0>:
10059afc:	20002910 	.word	0x20002910

10059b00 <GAT_srv_db_update_allowed>:
10059b00:	b510      	push	{r4, lr}
10059b02:	f7fe fac3 	bl	1005808c <GAT_att_srv_request_user_pending>
10059b06:	2400      	movs	r4, #0
10059b08:	2800      	cmp	r0, #0
10059b0a:	d106      	bne.n	10059b1a <GAT_srv_db_update_allowed+0x1a>
10059b0c:	f7fe faac 	bl	10058068 <GAT_att_srv_confirmation_pending>
10059b10:	2800      	cmp	r0, #0
10059b12:	d102      	bne.n	10059b1a <GAT_srv_db_update_allowed+0x1a>
10059b14:	f7fe fad2 	bl	100580bc <GAT_att_srv_flush_user_pending_list>
10059b18:	2401      	movs	r4, #1
10059b1a:	4620      	mov	r0, r4
10059b1c:	bd10      	pop	{r4, pc}
	...

10059b20 <GAT_srv_add_characteristic>:
10059b20:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10059b22:	460e      	mov	r6, r1
10059b24:	4604      	mov	r4, r0
10059b26:	f7ff ffeb 	bl	10059b00 <GAT_srv_db_update_allowed>
10059b2a:	2800      	cmp	r0, #0
10059b2c:	d066      	beq.n	10059bfc <GAT_srv_add_characteristic+0xdc>
10059b2e:	2512      	movs	r5, #18
10059b30:	2c00      	cmp	r4, #0
10059b32:	d064      	beq.n	10059bfe <GAT_srv_add_characteristic+0xde>
10059b34:	7d20      	ldrb	r0, [r4, #20]
10059b36:	2880      	cmp	r0, #128	@ 0x80
10059b38:	d013      	beq.n	10059b62 <GAT_srv_add_characteristic+0x42>
10059b3a:	2810      	cmp	r0, #16
10059b3c:	d15f      	bne.n	10059bfe <GAT_srv_add_characteristic+0xde>
10059b3e:	8a20      	ldrh	r0, [r4, #16]
10059b40:	493c      	ldr	r1, [pc, #240]	@ (10059c34 <__arm_cp.2_0>)
10059b42:	4288      	cmp	r0, r1
10059b44:	d10d      	bne.n	10059b62 <GAT_srv_add_characteristic+0x42>
10059b46:	6a20      	ldr	r0, [r4, #32]
10059b48:	2800      	cmp	r0, #0
10059b4a:	d058      	beq.n	10059bfe <GAT_srv_add_characteristic+0xde>
10059b4c:	8882      	ldrh	r2, [r0, #4]
10059b4e:	493a      	ldr	r1, [pc, #232]	@ (10059c38 <__arm_cp.2_1>)
10059b50:	7ac9      	ldrb	r1, [r1, #11]
10059b52:	0849      	lsrs	r1, r1, #1
10059b54:	1c49      	adds	r1, r1, #1
10059b56:	428a      	cmp	r2, r1
10059b58:	d351      	bcc.n	10059bfe <GAT_srv_add_characteristic+0xde>
10059b5a:	6880      	ldr	r0, [r0, #8]
10059b5c:	2100      	movs	r1, #0
10059b5e:	f7f9 fbf9 	bl	10053354 <BLEPLAT_MemSet>
10059b62:	78a0      	ldrb	r0, [r4, #2]
10059b64:	2124      	movs	r1, #36	@ 0x24
10059b66:	4208      	tst	r0, r1
10059b68:	d003      	beq.n	10059b72 <GAT_srv_add_characteristic+0x52>
10059b6a:	7860      	ldrb	r0, [r4, #1]
10059b6c:	1fc0      	subs	r0, r0, #7
10059b6e:	2809      	cmp	r0, #9
10059b70:	d845      	bhi.n	10059bfe <GAT_srv_add_characteristic+0xde>
10059b72:	4630      	mov	r0, r6
10059b74:	f00b fd04 	bl	10065580 <GAT_att_db_find_by_handle>
10059b78:	2800      	cmp	r0, #0
10059b7a:	d040      	beq.n	10059bfe <GAT_srv_add_characteristic+0xde>
10059b7c:	4606      	mov	r6, r0
10059b7e:	7800      	ldrb	r0, [r0, #0]
10059b80:	2800      	cmp	r0, #0
10059b82:	d13c      	bne.n	10059bfe <GAT_srv_add_characteristic+0xde>
10059b84:	7e20      	ldrb	r0, [r4, #24]
10059b86:	1c81      	adds	r1, r0, #2
10059b88:	4630      	mov	r0, r6
10059b8a:	f000 f883 	bl	10059c94 <GAT_srv_check_group_size>
10059b8e:	4605      	mov	r5, r0
10059b90:	2800      	cmp	r0, #0
10059b92:	d134      	bne.n	10059bfe <GAT_srv_add_characteristic+0xde>
10059b94:	4630      	mov	r0, r6
10059b96:	f7ff fb03 	bl	100591a0 <GAT_srv_get_att_group_end_handle>
10059b9a:	4605      	mov	r5, r0
10059b9c:	f00b fcf0 	bl	10065580 <GAT_att_db_find_by_handle>
10059ba0:	4601      	mov	r1, r0
10059ba2:	1c68      	adds	r0, r5, #1
10059ba4:	b286      	uxth	r6, r0
10059ba6:	2702      	movs	r7, #2
10059ba8:	4638      	mov	r0, r7
10059baa:	4632      	mov	r2, r6
10059bac:	4623      	mov	r3, r4
10059bae:	f00b fc93 	bl	100654d8 <GAT_att_db_insert>
10059bb2:	42b0      	cmp	r0, r6
10059bb4:	d125      	bne.n	10059c02 <GAT_srv_add_characteristic+0xe2>
10059bb6:	4630      	mov	r0, r6
10059bb8:	f00b fce2 	bl	10065580 <GAT_att_db_find_by_handle>
10059bbc:	4601      	mov	r1, r0
10059bbe:	1ca8      	adds	r0, r5, #2
10059bc0:	b282      	uxth	r2, r0
10059bc2:	2003      	movs	r0, #3
10059bc4:	4623      	mov	r3, r4
10059bc6:	f00b fc87 	bl	100654d8 <GAT_att_db_insert>
10059bca:	2800      	cmp	r0, #0
10059bcc:	d029      	beq.n	10059c22 <GAT_srv_add_characteristic+0x102>
10059bce:	9701      	str	r7, [sp, #4]
10059bd0:	9602      	str	r6, [sp, #8]
10059bd2:	69e0      	ldr	r0, [r4, #28]
10059bd4:	2800      	cmp	r0, #0
10059bd6:	d016      	beq.n	10059c06 <GAT_srv_add_characteristic+0xe6>
10059bd8:	7e20      	ldrb	r0, [r4, #24]
10059bda:	2800      	cmp	r0, #0
10059bdc:	d013      	beq.n	10059c06 <GAT_srv_add_characteristic+0xe6>
10059bde:	2600      	movs	r6, #0
10059be0:	4637      	mov	r7, r6
10059be2:	4287      	cmp	r7, r0
10059be4:	d20f      	bcs.n	10059c06 <GAT_srv_add_characteristic+0xe6>
10059be6:	69e0      	ldr	r0, [r4, #28]
10059be8:	1980      	adds	r0, r0, r6
10059bea:	9902      	ldr	r1, [sp, #8]
10059bec:	f000 f86c 	bl	10059cc8 <GAT_srv_add_char_descriptor>
10059bf0:	2800      	cmp	r0, #0
10059bf2:	d118      	bne.n	10059c26 <GAT_srv_add_characteristic+0x106>
10059bf4:	361c      	adds	r6, #28
10059bf6:	7e20      	ldrb	r0, [r4, #24]
10059bf8:	1c7f      	adds	r7, r7, #1
10059bfa:	e7f2      	b.n	10059be2 <GAT_srv_add_characteristic+0xc2>
10059bfc:	250c      	movs	r5, #12
10059bfe:	4628      	mov	r0, r5
10059c00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10059c02:	2587      	movs	r5, #135	@ 0x87
10059c04:	e7fb      	b.n	10059bfe <GAT_srv_add_characteristic+0xde>
10059c06:	480d      	ldr	r0, [pc, #52]	@ (10059c3c <__arm_cp.2_2>)
10059c08:	6800      	ldr	r0, [r0, #0]
10059c0a:	215c      	movs	r1, #92	@ 0x5c
10059c0c:	5c42      	ldrb	r2, [r0, r1]
10059c0e:	9b01      	ldr	r3, [sp, #4]
10059c10:	431a      	orrs	r2, r3
10059c12:	5442      	strb	r2, [r0, r1]
10059c14:	200a      	movs	r0, #10
10059c16:	f009 fc23 	bl	10063460 <tsk_notify_idx>
10059c1a:	f7f8 fda4 	bl	10052766 <BLE_STACK_ProcessRequest>
10059c1e:	2500      	movs	r5, #0
10059c20:	e7ed      	b.n	10059bfe <GAT_srv_add_characteristic+0xde>
10059c22:	2587      	movs	r5, #135	@ 0x87
10059c24:	e001      	b.n	10059c2a <GAT_srv_add_characteristic+0x10a>
10059c26:	4605      	mov	r5, r0
10059c28:	9e02      	ldr	r6, [sp, #8]
10059c2a:	4630      	mov	r0, r6
10059c2c:	f000 f8d4 	bl	10059dd8 <GAT_srv_rm_characteristic>
10059c30:	e7e5      	b.n	10059bfe <GAT_srv_add_characteristic+0xde>
10059c32:	46c0      	nop			@ (mov r8, r8)

10059c34 <__arm_cp.2_0>:
10059c34:	00002b29 	.word	0x00002b29

10059c38 <__arm_cp.2_1>:
10059c38:	2000296c 	.word	0x2000296c

10059c3c <__arm_cp.2_2>:
10059c3c:	20002910 	.word	0x20002910

10059c40 <GAT_srv_rm_service>:
10059c40:	b510      	push	{r4, lr}
10059c42:	4604      	mov	r4, r0
10059c44:	f7ff ff5c 	bl	10059b00 <GAT_srv_db_update_allowed>
10059c48:	2800      	cmp	r0, #0
10059c4a:	d00a      	beq.n	10059c62 <GAT_srv_rm_service+0x22>
10059c4c:	4620      	mov	r0, r4
10059c4e:	f00b fc97 	bl	10065580 <GAT_att_db_find_by_handle>
10059c52:	4601      	mov	r1, r0
10059c54:	2012      	movs	r0, #18
10059c56:	2900      	cmp	r1, #0
10059c58:	d002      	beq.n	10059c60 <GAT_srv_rm_service+0x20>
10059c5a:	780a      	ldrb	r2, [r1, #0]
10059c5c:	2a00      	cmp	r2, #0
10059c5e:	d002      	beq.n	10059c66 <GAT_srv_rm_service+0x26>
10059c60:	bd10      	pop	{r4, pc}
10059c62:	200c      	movs	r0, #12
10059c64:	bd10      	pop	{r4, pc}
10059c66:	4608      	mov	r0, r1
10059c68:	f00b fd28 	bl	100656bc <GAT_att_db_get_last_group_handle>
10059c6c:	4601      	mov	r1, r0
10059c6e:	4620      	mov	r0, r4
10059c70:	f00b fd64 	bl	1006573c <GAT_att_db_rm_att_range>
10059c74:	4806      	ldr	r0, [pc, #24]	@ (10059c90 <__arm_cp.3_0>)
10059c76:	6800      	ldr	r0, [r0, #0]
10059c78:	215c      	movs	r1, #92	@ 0x5c
10059c7a:	5c42      	ldrb	r2, [r0, r1]
10059c7c:	2302      	movs	r3, #2
10059c7e:	4313      	orrs	r3, r2
10059c80:	5443      	strb	r3, [r0, r1]
10059c82:	200a      	movs	r0, #10
10059c84:	f009 fbec 	bl	10063460 <tsk_notify_idx>
10059c88:	f7f8 fd6d 	bl	10052766 <BLE_STACK_ProcessRequest>
10059c8c:	2000      	movs	r0, #0
10059c8e:	bd10      	pop	{r4, pc}

10059c90 <__arm_cp.3_0>:
10059c90:	20002910 	.word	0x20002910

10059c94 <GAT_srv_check_group_size>:
10059c94:	b5b0      	push	{r4, r5, r7, lr}
10059c96:	460d      	mov	r5, r1
10059c98:	4604      	mov	r4, r0
10059c9a:	f7ff fa81 	bl	100591a0 <GAT_srv_get_att_group_end_handle>
10059c9e:	6861      	ldr	r1, [r4, #4]
10059ca0:	8ac9      	ldrh	r1, [r1, #22]
10059ca2:	2900      	cmp	r1, #0
10059ca4:	d008      	beq.n	10059cb8 <GAT_srv_check_group_size+0x24>
10059ca6:	43c0      	mvns	r0, r0
10059ca8:	1808      	adds	r0, r1, r0
10059caa:	8861      	ldrh	r1, [r4, #2]
10059cac:	1840      	adds	r0, r0, r1
10059cae:	b280      	uxth	r0, r0
10059cb0:	42a8      	cmp	r0, r5
10059cb2:	d306      	bcc.n	10059cc2 <GAT_srv_check_group_size+0x2e>
10059cb4:	2000      	movs	r0, #0
10059cb6:	bdb0      	pop	{r4, r5, r7, pc}
10059cb8:	2000      	movs	r0, #0
10059cba:	f00b fd81 	bl	100657c0 <GAT_att_db_find_last_attr_of_type>
10059cbe:	42a0      	cmp	r0, r4
10059cc0:	d0f8      	beq.n	10059cb4 <GAT_srv_check_group_size+0x20>
10059cc2:	200c      	movs	r0, #12
10059cc4:	bdb0      	pop	{r4, r5, r7, pc}
	...

10059cc8 <GAT_srv_add_char_descriptor>:
10059cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10059cca:	460e      	mov	r6, r1
10059ccc:	4604      	mov	r4, r0
10059cce:	f7ff ff17 	bl	10059b00 <GAT_srv_db_update_allowed>
10059cd2:	2800      	cmp	r0, #0
10059cd4:	d075      	beq.n	10059dc2 <GAT_srv_add_char_descriptor+0xfa>
10059cd6:	2512      	movs	r5, #18
10059cd8:	2c00      	cmp	r4, #0
10059cda:	d073      	beq.n	10059dc4 <GAT_srv_add_char_descriptor+0xfc>
10059cdc:	7d20      	ldrb	r0, [r4, #20]
10059cde:	2880      	cmp	r0, #128	@ 0x80
10059ce0:	d001      	beq.n	10059ce6 <GAT_srv_add_char_descriptor+0x1e>
10059ce2:	2810      	cmp	r0, #16
10059ce4:	d16e      	bne.n	10059dc4 <GAT_srv_add_char_descriptor+0xfc>
10059ce6:	2810      	cmp	r0, #16
10059ce8:	d108      	bne.n	10059cfc <GAT_srv_add_char_descriptor+0x34>
10059cea:	8a21      	ldrh	r1, [r4, #16]
10059cec:	2229      	movs	r2, #41	@ 0x29
10059cee:	0212      	lsls	r2, r2, #8
10059cf0:	1c92      	adds	r2, r2, #2
10059cf2:	4291      	cmp	r1, r2
10059cf4:	d102      	bne.n	10059cfc <GAT_srv_add_char_descriptor+0x34>
10059cf6:	69a1      	ldr	r1, [r4, #24]
10059cf8:	2900      	cmp	r1, #0
10059cfa:	d063      	beq.n	10059dc4 <GAT_srv_add_char_descriptor+0xfc>
10059cfc:	78a1      	ldrb	r1, [r4, #2]
10059cfe:	2224      	movs	r2, #36	@ 0x24
10059d00:	4211      	tst	r1, r2
10059d02:	d003      	beq.n	10059d0c <GAT_srv_add_char_descriptor+0x44>
10059d04:	7862      	ldrb	r2, [r4, #1]
10059d06:	1fd2      	subs	r2, r2, #7
10059d08:	2a09      	cmp	r2, #9
10059d0a:	d85b      	bhi.n	10059dc4 <GAT_srv_add_char_descriptor+0xfc>
10059d0c:	2810      	cmp	r0, #16
10059d0e:	d115      	bne.n	10059d3c <GAT_srv_add_char_descriptor+0x74>
10059d10:	8a20      	ldrh	r0, [r4, #16]
10059d12:	4a2f      	ldr	r2, [pc, #188]	@ (10059dd0 <__arm_cp.7_0>)
10059d14:	1882      	adds	r2, r0, r2
10059d16:	2a05      	cmp	r2, #5
10059d18:	d810      	bhi.n	10059d3c <GAT_srv_add_char_descriptor+0x74>
10059d1a:	2301      	movs	r3, #1
10059d1c:	4093      	lsls	r3, r2
10059d1e:	2231      	movs	r2, #49	@ 0x31
10059d20:	4213      	tst	r3, r2
10059d22:	d00b      	beq.n	10059d3c <GAT_srv_add_char_descriptor+0x74>
10059d24:	7822      	ldrb	r2, [r4, #0]
10059d26:	2a01      	cmp	r2, #1
10059d28:	d14c      	bne.n	10059dc4 <GAT_srv_add_char_descriptor+0xfc>
10059d2a:	2900      	cmp	r1, #0
10059d2c:	d14a      	bne.n	10059dc4 <GAT_srv_add_char_descriptor+0xfc>
10059d2e:	2129      	movs	r1, #41	@ 0x29
10059d30:	0209      	lsls	r1, r1, #8
10059d32:	4288      	cmp	r0, r1
10059d34:	d102      	bne.n	10059d3c <GAT_srv_add_char_descriptor+0x74>
10059d36:	69a0      	ldr	r0, [r4, #24]
10059d38:	2800      	cmp	r0, #0
10059d3a:	d043      	beq.n	10059dc4 <GAT_srv_add_char_descriptor+0xfc>
10059d3c:	4630      	mov	r0, r6
10059d3e:	f00b fc1f 	bl	10065580 <GAT_att_db_find_by_handle>
10059d42:	2800      	cmp	r0, #0
10059d44:	d03e      	beq.n	10059dc4 <GAT_srv_add_char_descriptor+0xfc>
10059d46:	4607      	mov	r7, r0
10059d48:	7800      	ldrb	r0, [r0, #0]
10059d4a:	2802      	cmp	r0, #2
10059d4c:	d13a      	bne.n	10059dc4 <GAT_srv_add_char_descriptor+0xfc>
10059d4e:	2500      	movs	r5, #0
10059d50:	4628      	mov	r0, r5
10059d52:	4631      	mov	r1, r6
10059d54:	f00b fd4a 	bl	100657ec <GAT_att_db_reverse_find_attr_of_type>
10059d58:	2800      	cmp	r0, #0
10059d5a:	d035      	beq.n	10059dc8 <GAT_srv_add_char_descriptor+0x100>
10059d5c:	462e      	mov	r6, r5
10059d5e:	2101      	movs	r1, #1
10059d60:	f7ff ff98 	bl	10059c94 <GAT_srv_check_group_size>
10059d64:	4605      	mov	r5, r0
10059d66:	2800      	cmp	r0, #0
10059d68:	d12c      	bne.n	10059dc4 <GAT_srv_add_char_descriptor+0xfc>
10059d6a:	4638      	mov	r0, r7
10059d6c:	f7ff fa18 	bl	100591a0 <GAT_srv_get_att_group_end_handle>
10059d70:	4605      	mov	r5, r0
10059d72:	f00b fc05 	bl	10065580 <GAT_att_db_find_by_handle>
10059d76:	4601      	mov	r1, r0
10059d78:	1c6d      	adds	r5, r5, #1
10059d7a:	b2aa      	uxth	r2, r5
10059d7c:	2004      	movs	r0, #4
10059d7e:	4623      	mov	r3, r4
10059d80:	f00b fbaa 	bl	100654d8 <GAT_att_db_insert>
10059d84:	4285      	cmp	r5, r0
10059d86:	d121      	bne.n	10059dcc <GAT_srv_add_char_descriptor+0x104>
10059d88:	7d20      	ldrb	r0, [r4, #20]
10059d8a:	2810      	cmp	r0, #16
10059d8c:	d10b      	bne.n	10059da6 <GAT_srv_add_char_descriptor+0xde>
10059d8e:	8a20      	ldrh	r0, [r4, #16]
10059d90:	2129      	movs	r1, #41	@ 0x29
10059d92:	0209      	lsls	r1, r1, #8
10059d94:	1c89      	adds	r1, r1, #2
10059d96:	4288      	cmp	r0, r1
10059d98:	d105      	bne.n	10059da6 <GAT_srv_add_char_descriptor+0xde>
10059d9a:	69a0      	ldr	r0, [r4, #24]
10059d9c:	8882      	ldrh	r2, [r0, #4]
10059d9e:	6880      	ldr	r0, [r0, #8]
10059da0:	2100      	movs	r1, #0
10059da2:	f7f9 fad7 	bl	10053354 <BLEPLAT_MemSet>
10059da6:	480b      	ldr	r0, [pc, #44]	@ (10059dd4 <__arm_cp.7_1>)
10059da8:	6800      	ldr	r0, [r0, #0]
10059daa:	215c      	movs	r1, #92	@ 0x5c
10059dac:	5c42      	ldrb	r2, [r0, r1]
10059dae:	2302      	movs	r3, #2
10059db0:	4313      	orrs	r3, r2
10059db2:	5443      	strb	r3, [r0, r1]
10059db4:	200a      	movs	r0, #10
10059db6:	f009 fb53 	bl	10063460 <tsk_notify_idx>
10059dba:	f7f8 fcd4 	bl	10052766 <BLE_STACK_ProcessRequest>
10059dbe:	4635      	mov	r5, r6
10059dc0:	e000      	b.n	10059dc4 <GAT_srv_add_char_descriptor+0xfc>
10059dc2:	250c      	movs	r5, #12
10059dc4:	4628      	mov	r0, r5
10059dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10059dc8:	2586      	movs	r5, #134	@ 0x86
10059dca:	e7fb      	b.n	10059dc4 <GAT_srv_add_char_descriptor+0xfc>
10059dcc:	2587      	movs	r5, #135	@ 0x87
10059dce:	e7f9      	b.n	10059dc4 <GAT_srv_add_char_descriptor+0xfc>

10059dd0 <__arm_cp.7_0>:
10059dd0:	ffffd700 	.word	0xffffd700

10059dd4 <__arm_cp.7_1>:
10059dd4:	20002910 	.word	0x20002910

10059dd8 <GAT_srv_rm_characteristic>:
10059dd8:	b510      	push	{r4, lr}
10059dda:	4604      	mov	r4, r0
10059ddc:	f7ff fe90 	bl	10059b00 <GAT_srv_db_update_allowed>
10059de0:	2800      	cmp	r0, #0
10059de2:	d01e      	beq.n	10059e22 <GAT_srv_rm_characteristic+0x4a>
10059de4:	4620      	mov	r0, r4
10059de6:	f00b fbcb 	bl	10065580 <GAT_att_db_find_by_handle>
10059dea:	4601      	mov	r1, r0
10059dec:	2012      	movs	r0, #18
10059dee:	2900      	cmp	r1, #0
10059df0:	d016      	beq.n	10059e20 <GAT_srv_rm_characteristic+0x48>
10059df2:	780a      	ldrb	r2, [r1, #0]
10059df4:	2a02      	cmp	r2, #2
10059df6:	d113      	bne.n	10059e20 <GAT_srv_rm_characteristic+0x48>
10059df8:	4608      	mov	r0, r1
10059dfa:	f00b fc5f 	bl	100656bc <GAT_att_db_get_last_group_handle>
10059dfe:	4601      	mov	r1, r0
10059e00:	4620      	mov	r0, r4
10059e02:	f00b fc9b 	bl	1006573c <GAT_att_db_rm_att_range>
10059e06:	4808      	ldr	r0, [pc, #32]	@ (10059e28 <__arm_cp.8_0>)
10059e08:	6800      	ldr	r0, [r0, #0]
10059e0a:	215c      	movs	r1, #92	@ 0x5c
10059e0c:	5c42      	ldrb	r2, [r0, r1]
10059e0e:	2302      	movs	r3, #2
10059e10:	4313      	orrs	r3, r2
10059e12:	5443      	strb	r3, [r0, r1]
10059e14:	200a      	movs	r0, #10
10059e16:	f009 fb23 	bl	10063460 <tsk_notify_idx>
10059e1a:	f7f8 fca4 	bl	10052766 <BLE_STACK_ProcessRequest>
10059e1e:	2000      	movs	r0, #0
10059e20:	bd10      	pop	{r4, pc}
10059e22:	200c      	movs	r0, #12
10059e24:	bd10      	pop	{r4, pc}
10059e26:	46c0      	nop			@ (mov r8, r8)

10059e28 <__arm_cp.8_0>:
10059e28:	20002910 	.word	0x20002910

10059e2c <GAT_srv_resp>:
10059e2c:	b51c      	push	{r2, r3, r4, lr}
10059e2e:	9c05      	ldr	r4, [sp, #20]
10059e30:	9401      	str	r4, [sp, #4]
10059e32:	9c04      	ldr	r4, [sp, #16]
10059e34:	9400      	str	r4, [sp, #0]
10059e36:	f7fe f893 	bl	10057f60 <GAT_att_srv_resp>
10059e3a:	bd1c      	pop	{r2, r3, r4, pc}

10059e3c <GAT_srv_get_service_handle>:
10059e3c:	b580      	push	{r7, lr}
10059e3e:	4603      	mov	r3, r0
10059e40:	2001      	movs	r0, #1
10059e42:	4902      	ldr	r1, [pc, #8]	@ (10059e4c <__arm_cp.14_0>)
10059e44:	2200      	movs	r2, #0
10059e46:	f7ff fd41 	bl	100598cc <GAT_srv_get_attribute_handle>
10059e4a:	bd80      	pop	{r7, pc}

10059e4c <__arm_cp.14_0>:
10059e4c:	0000ffff 	.word	0x0000ffff

10059e50 <GAT_srv_get_char_decl_handle>:
10059e50:	b580      	push	{r7, lr}
10059e52:	4603      	mov	r3, r0
10059e54:	2001      	movs	r0, #1
10059e56:	4902      	ldr	r1, [pc, #8]	@ (10059e60 <__arm_cp.16_0>)
10059e58:	2202      	movs	r2, #2
10059e5a:	f7ff fd37 	bl	100598cc <GAT_srv_get_attribute_handle>
10059e5e:	bd80      	pop	{r7, pc}

10059e60 <__arm_cp.16_0>:
10059e60:	0000ffff 	.word	0x0000ffff

10059e64 <hci_rx_acl_data>:
10059e64:	b5f0      	push	{r4, r5, r6, r7, lr}
10059e66:	b085      	sub	sp, #20
10059e68:	4604      	mov	r4, r0
10059e6a:	7887      	ldrb	r7, [r0, #2]
10059e6c:	1e78      	subs	r0, r7, #1
10059e6e:	2103      	movs	r1, #3
10059e70:	9104      	str	r1, [sp, #16]
10059e72:	4308      	orrs	r0, r1
10059e74:	3009      	adds	r0, #9
10059e76:	0880      	lsrs	r0, r0, #2
10059e78:	b283      	uxth	r3, r0
10059e7a:	7a20      	ldrb	r0, [r4, #8]
10059e7c:	9003      	str	r0, [sp, #12]
10059e7e:	8820      	ldrh	r0, [r4, #0]
10059e80:	9002      	str	r0, [sp, #8]
10059e82:	4811      	ldr	r0, [pc, #68]	@ (10059ec8 <__arm_cp.2_0>)
10059e84:	6800      	ldr	r0, [r0, #0]
10059e86:	6980      	ldr	r0, [r0, #24]
10059e88:	2502      	movs	r5, #2
10059e8a:	223e      	movs	r2, #62	@ 0x3e
10059e8c:	4629      	mov	r1, r5
10059e8e:	f7fb ff9d 	bl	10055dcc <aci_event_fifo_push_header>
10059e92:	2800      	cmp	r0, #0
10059e94:	d014      	beq.n	10059ec0 <hci_rx_acl_data+0x5c>
10059e96:	4606      	mov	r6, r0
10059e98:	9700      	str	r7, [sp, #0]
10059e9a:	9401      	str	r4, [sp, #4]
10059e9c:	9804      	ldr	r0, [sp, #16]
10059e9e:	9a03      	ldr	r2, [sp, #12]
10059ea0:	4002      	ands	r2, r0
10059ea2:	1d30      	adds	r0, r6, #4
10059ea4:	2700      	movs	r7, #0
10059ea6:	9902      	ldr	r1, [sp, #8]
10059ea8:	463b      	mov	r3, r7
10059eaa:	f7fc fcf6 	bl	1005689a <hci_rx_acl_data_event_copy>
10059eae:	7135      	strb	r5, [r6, #4]
10059eb0:	4628      	mov	r0, r5
10059eb2:	4631      	mov	r1, r6
10059eb4:	f7fc f827 	bl	10055f06 <aci_event_fifo_push>
10059eb8:	4620      	mov	r0, r4
10059eba:	f7fb fdd3 	bl	10055a64 <ACL_pkt_release>
10059ebe:	e000      	b.n	10059ec2 <hci_rx_acl_data+0x5e>
10059ec0:	2707      	movs	r7, #7
10059ec2:	4638      	mov	r0, r7
10059ec4:	b005      	add	sp, #20
10059ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}

10059ec8 <__arm_cp.2_0>:
10059ec8:	20002908 	.word	0x20002908

10059ecc <hci_tx_acl_data_done>:
10059ecc:	b5b0      	push	{r4, r5, r7, lr}
10059ece:	4604      	mov	r4, r0
10059ed0:	8801      	ldrh	r1, [r0, #0]
10059ed2:	2002      	movs	r0, #2
10059ed4:	f00a fe38 	bl	10064b48 <hci_number_of_completed_packets_event_push_noinline>
10059ed8:	4605      	mov	r5, r0
10059eda:	2800      	cmp	r0, #0
10059edc:	d102      	bne.n	10059ee4 <hci_tx_acl_data_done+0x18>
10059ede:	4620      	mov	r0, r4
10059ee0:	f7fb fdc0 	bl	10055a64 <ACL_pkt_release>
10059ee4:	4628      	mov	r0, r5
10059ee6:	bdb0      	pop	{r4, r5, r7, pc}

10059ee8 <hci_le_set_advertising_parameters>:
10059ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
10059eea:	b089      	sub	sp, #36	@ 0x24
10059eec:	461d      	mov	r5, r3
10059eee:	4616      	mov	r6, r2
10059ef0:	460f      	mov	r7, r1
10059ef2:	9004      	str	r0, [sp, #16]
10059ef4:	2002      	movs	r0, #2
10059ef6:	2401      	movs	r4, #1
10059ef8:	4621      	mov	r1, r4
10059efa:	f000 f8d9 	bl	1005a0b0 <hci_get_set_legacy_ext_flag>
10059efe:	2800      	cmp	r0, #0
10059f00:	d150      	bne.n	10059fa4 <hci_le_set_advertising_parameters+0xbc>
10059f02:	9703      	str	r7, [sp, #12]
10059f04:	2012      	movs	r0, #18
10059f06:	2e04      	cmp	r6, #4
10059f08:	d84c      	bhi.n	10059fa4 <hci_le_set_advertising_parameters+0xbc>
10059f0a:	9002      	str	r0, [sp, #8]
10059f0c:	f7f5 fcb0 	bl	1004f870 <conn_supp_csr_ucfg>
10059f10:	2e01      	cmp	r6, #1
10059f12:	d803      	bhi.n	10059f1c <hci_le_set_advertising_parameters+0x34>
10059f14:	2800      	cmp	r0, #0
10059f16:	d101      	bne.n	10059f1c <hci_le_set_advertising_parameters+0x34>
10059f18:	2011      	movs	r0, #17
10059f1a:	e043      	b.n	10059fa4 <hci_le_set_advertising_parameters+0xbc>
10059f1c:	9811      	ldr	r0, [sp, #68]	@ 0x44
10059f1e:	9000      	str	r0, [sp, #0]
10059f20:	9810      	ldr	r0, [sp, #64]	@ 0x40
10059f22:	9001      	str	r0, [sp, #4]
10059f24:	990f      	ldr	r1, [sp, #60]	@ 0x3c
10059f26:	980e      	ldr	r0, [sp, #56]	@ 0x38
10059f28:	af05      	add	r7, sp, #20
10059f2a:	7238      	strb	r0, [r7, #8]
10059f2c:	71fd      	strb	r5, [r7, #7]
10059f2e:	713e      	strb	r6, [r7, #4]
10059f30:	9803      	ldr	r0, [sp, #12]
10059f32:	8078      	strh	r0, [r7, #2]
10059f34:	9804      	ldr	r0, [sp, #16]
10059f36:	8038      	strh	r0, [r7, #0]
10059f38:	4638      	mov	r0, r7
10059f3a:	3009      	adds	r0, #9
10059f3c:	2206      	movs	r2, #6
10059f3e:	f7f9 f9f9 	bl	10053334 <BLEPLAT_MemCpy>
10059f42:	9900      	ldr	r1, [sp, #0]
10059f44:	71b9      	strb	r1, [r7, #6]
10059f46:	9801      	ldr	r0, [sp, #4]
10059f48:	7178      	strb	r0, [r7, #5]
10059f4a:	7938      	ldrb	r0, [r7, #4]
10059f4c:	2804      	cmp	r0, #4
10059f4e:	d001      	beq.n	10059f54 <hci_le_set_advertising_parameters+0x6c>
10059f50:	2801      	cmp	r0, #1
10059f52:	d104      	bne.n	10059f5e <hci_le_set_advertising_parameters+0x76>
10059f54:	a905      	add	r1, sp, #20
10059f56:	7a09      	ldrb	r1, [r1, #8]
10059f58:	2902      	cmp	r1, #2
10059f5a:	d302      	bcc.n	10059f62 <hci_le_set_advertising_parameters+0x7a>
10059f5c:	e021      	b.n	10059fa2 <hci_le_set_advertising_parameters+0xba>
10059f5e:	2903      	cmp	r1, #3
10059f60:	d81f      	bhi.n	10059fa2 <hci_le_set_advertising_parameters+0xba>
10059f62:	2801      	cmp	r0, #1
10059f64:	d10e      	bne.n	10059f84 <hci_le_set_advertising_parameters+0x9c>
10059f66:	f000 f966 	bl	1005a236 <hci_le_check_own_address_type_max_value_ucfg_weak>
10059f6a:	a905      	add	r1, sp, #20
10059f6c:	79c9      	ldrb	r1, [r1, #7]
10059f6e:	4281      	cmp	r1, r0
10059f70:	d817      	bhi.n	10059fa2 <hci_le_set_advertising_parameters+0xba>
10059f72:	a805      	add	r0, sp, #20
10059f74:	7940      	ldrb	r0, [r0, #5]
10059f76:	0740      	lsls	r0, r0, #29
10059f78:	9802      	ldr	r0, [sp, #8]
10059f7a:	d013      	beq.n	10059fa4 <hci_le_set_advertising_parameters+0xbc>
10059f7c:	a805      	add	r0, sp, #20
10059f7e:	f005 fde1 	bl	1005fb44 <LL_LE_Set_Advertising_Parameters>
10059f82:	e00f      	b.n	10059fa4 <hci_le_set_advertising_parameters+0xbc>
10059f84:	a805      	add	r0, sp, #20
10059f86:	8800      	ldrh	r0, [r0, #0]
10059f88:	2820      	cmp	r0, #32
10059f8a:	d30a      	bcc.n	10059fa2 <hci_le_set_advertising_parameters+0xba>
10059f8c:	03a1      	lsls	r1, r4, #14
10059f8e:	4288      	cmp	r0, r1
10059f90:	d807      	bhi.n	10059fa2 <hci_le_set_advertising_parameters+0xba>
10059f92:	aa05      	add	r2, sp, #20
10059f94:	8852      	ldrh	r2, [r2, #2]
10059f96:	2a20      	cmp	r2, #32
10059f98:	d303      	bcc.n	10059fa2 <hci_le_set_advertising_parameters+0xba>
10059f9a:	428a      	cmp	r2, r1
10059f9c:	d801      	bhi.n	10059fa2 <hci_le_set_advertising_parameters+0xba>
10059f9e:	4290      	cmp	r0, r2
10059fa0:	d9e1      	bls.n	10059f66 <hci_le_set_advertising_parameters+0x7e>
10059fa2:	9802      	ldr	r0, [sp, #8]
10059fa4:	b009      	add	sp, #36	@ 0x24
10059fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

10059fa8 <hci_le_set_advertising_enable>:
10059fa8:	b510      	push	{r4, lr}
10059faa:	4604      	mov	r4, r0
10059fac:	2002      	movs	r0, #2
10059fae:	2101      	movs	r1, #1
10059fb0:	f000 f87e 	bl	1005a0b0 <hci_get_set_legacy_ext_flag>
10059fb4:	2800      	cmp	r0, #0
10059fb6:	d000      	beq.n	10059fba <hci_le_set_advertising_enable+0x12>
10059fb8:	bd10      	pop	{r4, pc}
10059fba:	2c01      	cmp	r4, #1
10059fbc:	d803      	bhi.n	10059fc6 <hci_le_set_advertising_enable+0x1e>
10059fbe:	4620      	mov	r0, r4
10059fc0:	f005 fe44 	bl	1005fc4c <LL_LE_Set_Advertise_Enable>
10059fc4:	bd10      	pop	{r4, pc}
10059fc6:	2012      	movs	r0, #18
10059fc8:	bd10      	pop	{r4, pc}

10059fca <chc_csr_ucfg_weak>:
10059fca:	2000      	movs	r0, #0
10059fcc:	4770      	bx	lr
	...

10059fd0 <HCI_Init>:
10059fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10059fd2:	4917      	ldr	r1, [pc, #92]	@ (1005a030 <__arm_cp.0_0>)
10059fd4:	6808      	ldr	r0, [r1, #0]
10059fd6:	460d      	mov	r5, r1
10059fd8:	2124      	movs	r1, #36	@ 0x24
10059fda:	2400      	movs	r4, #0
10059fdc:	5444      	strb	r4, [r0, r1]
10059fde:	3025      	adds	r0, #37	@ 0x25
10059fe0:	2211      	movs	r2, #17
10059fe2:	4f14      	ldr	r7, [pc, #80]	@ (1005a034 <__arm_cp.0_1>)
10059fe4:	4621      	mov	r1, r4
10059fe6:	47b8      	blx	r7
10059fe8:	6828      	ldr	r0, [r5, #0]
10059fea:	3036      	adds	r0, #54	@ 0x36
10059fec:	26ff      	movs	r6, #255	@ 0xff
10059fee:	2205      	movs	r2, #5
10059ff0:	4631      	mov	r1, r6
10059ff2:	47b8      	blx	r7
10059ff4:	6829      	ldr	r1, [r5, #0]
10059ff6:	203b      	movs	r0, #59	@ 0x3b
10059ff8:	231f      	movs	r3, #31
10059ffa:	540b      	strb	r3, [r1, r0]
10059ffc:	2201      	movs	r2, #1
10059ffe:	0355      	lsls	r5, r2, #13
1005a000:	4608      	mov	r0, r1
1005a002:	303b      	adds	r0, #59	@ 0x3b
1005a004:	5285      	strh	r5, [r0, r2]
1005a006:	72c3      	strb	r3, [r0, #11]
1005a008:	3147      	adds	r1, #71	@ 0x47
1005a00a:	2207      	movs	r2, #7
1005a00c:	4608      	mov	r0, r1
1005a00e:	4621      	mov	r1, r4
1005a010:	47b8      	blx	r7
1005a012:	4d07      	ldr	r5, [pc, #28]	@ (1005a030 <__arm_cp.0_0>)
1005a014:	6828      	ldr	r0, [r5, #0]
1005a016:	304e      	adds	r0, #78	@ 0x4e
1005a018:	2208      	movs	r2, #8
1005a01a:	4631      	mov	r1, r6
1005a01c:	47b8      	blx	r7
1005a01e:	4806      	ldr	r0, [pc, #24]	@ (1005a038 <__arm_cp.0_2>)
1005a020:	6800      	ldr	r0, [r0, #0]
1005a022:	2135      	movs	r1, #53	@ 0x35
1005a024:	5444      	strb	r4, [r0, r1]
1005a026:	6828      	ldr	r0, [r5, #0]
1005a028:	4904      	ldr	r1, [pc, #16]	@ (1005a03c <__arm_cp.0_3>)
1005a02a:	6201      	str	r1, [r0, #32]
1005a02c:	65c4      	str	r4, [r0, #92]	@ 0x5c
1005a02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005a030 <__arm_cp.0_0>:
1005a030:	20002958 	.word	0x20002958

1005a034 <__arm_cp.0_1>:
1005a034:	10053355 	.word	0x10053355

1005a038 <__arm_cp.0_2>:
1005a038:	20002904 	.word	0x20002904

1005a03c <__arm_cp.0_3>:
1005a03c:	fffffdbe 	.word	0xfffffdbe

1005a040 <Controller_Process_Q>:
1005a040:	b570      	push	{r4, r5, r6, lr}
1005a042:	2500      	movs	r5, #0
1005a044:	4e07      	ldr	r6, [pc, #28]	@ (1005a064 <__arm_cp.2_0>)
1005a046:	7af0      	ldrb	r0, [r6, #11]
1005a048:	4285      	cmp	r5, r0
1005a04a:	d20a      	bcs.n	1005a062 <Controller_Process_Q+0x22>
1005a04c:	b2ec      	uxtb	r4, r5
1005a04e:	4620      	mov	r0, r4
1005a050:	f002 fcc6 	bl	1005c9e0 <LL_cpe_engine>
1005a054:	2800      	cmp	r0, #0
1005a056:	d002      	beq.n	1005a05e <Controller_Process_Q+0x1e>
1005a058:	4620      	mov	r0, r4
1005a05a:	f002 fcc1 	bl	1005c9e0 <LL_cpe_engine>
1005a05e:	1c6d      	adds	r5, r5, #1
1005a060:	e7f1      	b.n	1005a046 <Controller_Process_Q+0x6>
1005a062:	bd70      	pop	{r4, r5, r6, pc}

1005a064 <__arm_cp.2_0>:
1005a064:	2000296c 	.word	0x2000296c

1005a068 <hci_le_set_random_address>:
1005a068:	b580      	push	{r7, lr}
1005a06a:	f005 ffff 	bl	1006006c <LL_Set_Advertising_Set_Random_Address>
1005a06e:	bd80      	pop	{r7, pc}

1005a070 <hci_set_event_mask>:
1005a070:	b510      	push	{r4, lr}
1005a072:	2136      	movs	r1, #54	@ 0x36
1005a074:	4a05      	ldr	r2, [pc, #20]	@ (1005a08c <__arm_cp.14_0>)
1005a076:	293e      	cmp	r1, #62	@ 0x3e
1005a078:	d006      	beq.n	1005a088 <hci_set_event_mask+0x18>
1005a07a:	1843      	adds	r3, r0, r1
1005a07c:	3b36      	subs	r3, #54	@ 0x36
1005a07e:	781b      	ldrb	r3, [r3, #0]
1005a080:	6814      	ldr	r4, [r2, #0]
1005a082:	5463      	strb	r3, [r4, r1]
1005a084:	1c49      	adds	r1, r1, #1
1005a086:	e7f6      	b.n	1005a076 <hci_set_event_mask+0x6>
1005a088:	2000      	movs	r0, #0
1005a08a:	bd10      	pop	{r4, pc}

1005a08c <__arm_cp.14_0>:
1005a08c:	20002958 	.word	0x20002958

1005a090 <hci_le_set_event_mask>:
1005a090:	b510      	push	{r4, lr}
1005a092:	2146      	movs	r1, #70	@ 0x46
1005a094:	4a05      	ldr	r2, [pc, #20]	@ (1005a0ac <__arm_cp.16_0>)
1005a096:	294e      	cmp	r1, #78	@ 0x4e
1005a098:	d006      	beq.n	1005a0a8 <hci_le_set_event_mask+0x18>
1005a09a:	1843      	adds	r3, r0, r1
1005a09c:	3b46      	subs	r3, #70	@ 0x46
1005a09e:	781b      	ldrb	r3, [r3, #0]
1005a0a0:	6814      	ldr	r4, [r2, #0]
1005a0a2:	5463      	strb	r3, [r4, r1]
1005a0a4:	1c49      	adds	r1, r1, #1
1005a0a6:	e7f6      	b.n	1005a096 <hci_le_set_event_mask+0x6>
1005a0a8:	2000      	movs	r0, #0
1005a0aa:	bd10      	pop	{r4, pc}

1005a0ac <__arm_cp.16_0>:
1005a0ac:	20002958 	.word	0x20002958

1005a0b0 <hci_get_set_legacy_ext_flag>:
1005a0b0:	4a05      	ldr	r2, [pc, #20]	@ (1005a0c8 <__arm_cp.18_0>)
1005a0b2:	6812      	ldr	r2, [r2, #0]
1005a0b4:	2335      	movs	r3, #53	@ 0x35
1005a0b6:	5cd3      	ldrb	r3, [r2, r3]
1005a0b8:	4203      	tst	r3, r0
1005a0ba:	d001      	beq.n	1005a0c0 <hci_get_set_legacy_ext_flag+0x10>
1005a0bc:	200c      	movs	r0, #12
1005a0be:	4770      	bx	lr
1005a0c0:	3235      	adds	r2, #53	@ 0x35
1005a0c2:	7011      	strb	r1, [r2, #0]
1005a0c4:	2000      	movs	r0, #0
1005a0c6:	4770      	bx	lr

1005a0c8 <__arm_cp.18_0>:
1005a0c8:	20002904 	.word	0x20002904

1005a0cc <hci_check_legacy_ext_flag>:
1005a0cc:	4903      	ldr	r1, [pc, #12]	@ (1005a0dc <__arm_cp.25_0>)
1005a0ce:	6809      	ldr	r1, [r1, #0]
1005a0d0:	2235      	movs	r2, #53	@ 0x35
1005a0d2:	5c89      	ldrb	r1, [r1, r2]
1005a0d4:	4008      	ands	r0, r1
1005a0d6:	1e41      	subs	r1, r0, #1
1005a0d8:	4188      	sbcs	r0, r1
1005a0da:	4770      	bx	lr

1005a0dc <__arm_cp.25_0>:
1005a0dc:	20002904 	.word	0x20002904

1005a0e0 <LLC_offline_control_procedures_processing>:
1005a0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a0e2:	2400      	movs	r4, #0
1005a0e4:	4620      	mov	r0, r4
1005a0e6:	f000 fd97 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005a0ea:	4605      	mov	r5, r0
1005a0ec:	2201      	movs	r2, #1
1005a0ee:	4b30      	ldr	r3, [pc, #192]	@ (1005a1b0 <__arm_cp.27_0>)
1005a0f0:	4627      	mov	r7, r4
1005a0f2:	9200      	str	r2, [sp, #0]
1005a0f4:	6818      	ldr	r0, [r3, #0]
1005a0f6:	2134      	movs	r1, #52	@ 0x34
1005a0f8:	5c40      	ldrb	r0, [r0, r1]
1005a0fa:	4284      	cmp	r4, r0
1005a0fc:	d250      	bcs.n	1005a1a0 <LLC_offline_control_procedures_processing+0xc0>
1005a0fe:	202c      	movs	r0, #44	@ 0x2c
1005a100:	5c28      	ldrb	r0, [r5, r0]
1005a102:	21fe      	movs	r1, #254	@ 0xfe
1005a104:	4001      	ands	r1, r0
1005a106:	2902      	cmp	r1, #2
1005a108:	d13e      	bne.n	1005a188 <LLC_offline_control_procedures_processing+0xa8>
1005a10a:	208c      	movs	r0, #140	@ 0x8c
1005a10c:	582e      	ldr	r6, [r5, r0]
1005a10e:	07f0      	lsls	r0, r6, #31
1005a110:	d00d      	beq.n	1005a12e <LLC_offline_control_procedures_processing+0x4e>
1005a112:	8f69      	ldrh	r1, [r5, #58]	@ 0x3a
1005a114:	2000      	movs	r0, #0
1005a116:	f004 fb93 	bl	1005e840 <LL_Read_Remote_Used_Features>
1005a11a:	283a      	cmp	r0, #58	@ 0x3a
1005a11c:	9a00      	ldr	r2, [sp, #0]
1005a11e:	4610      	mov	r0, r2
1005a120:	d030      	beq.n	1005a184 <LLC_offline_control_procedures_processing+0xa4>
1005a122:	4628      	mov	r0, r5
1005a124:	308c      	adds	r0, #140	@ 0x8c
1005a126:	6801      	ldr	r1, [r0, #0]
1005a128:	2201      	movs	r2, #1
1005a12a:	4391      	bics	r1, r2
1005a12c:	6001      	str	r1, [r0, #0]
1005a12e:	4628      	mov	r0, r5
1005a130:	f002 fb7e 	bl	1005c830 <llc_subrate_offline_processing_ucfg_weak>
1005a134:	2800      	cmp	r0, #0
1005a136:	9a00      	ldr	r2, [sp, #0]
1005a138:	4610      	mov	r0, r2
1005a13a:	d123      	bne.n	1005a184 <LLC_offline_control_procedures_processing+0xa4>
1005a13c:	4628      	mov	r0, r5
1005a13e:	4631      	mov	r1, r6
1005a140:	f006 fd04 	bl	10060b4c <Data_Len_Update_Offline_Processing_ucfg_weak>
1005a144:	9a00      	ldr	r2, [sp, #0]
1005a146:	2800      	cmp	r0, #0
1005a148:	4610      	mov	r0, r2
1005a14a:	d11b      	bne.n	1005a184 <LLC_offline_control_procedures_processing+0xa4>
1005a14c:	b2e6      	uxtb	r6, r4
1005a14e:	4630      	mov	r0, r6
1005a150:	f003 fc0e 	bl	1005d970 <LLC_channel_map_update_offline_processing_ucfg_weak>
1005a154:	9a00      	ldr	r2, [sp, #0]
1005a156:	2800      	cmp	r0, #0
1005a158:	4610      	mov	r0, r2
1005a15a:	d113      	bne.n	1005a184 <LLC_offline_control_procedures_processing+0xa4>
1005a15c:	4630      	mov	r0, r6
1005a15e:	f003 fc0b 	bl	1005d978 <LLC_chc_reporting_offline_processing_ucfg_weak>
1005a162:	9a00      	ldr	r2, [sp, #0]
1005a164:	2800      	cmp	r0, #0
1005a166:	4610      	mov	r0, r2
1005a168:	d10c      	bne.n	1005a184 <LLC_offline_control_procedures_processing+0xa4>
1005a16a:	4628      	mov	r0, r5
1005a16c:	f003 fe45 	bl	1005ddfa <LLC_cte_request_procedure_ucfg_weak>
1005a170:	9a00      	ldr	r2, [sp, #0]
1005a172:	2800      	cmp	r0, #0
1005a174:	4610      	mov	r0, r2
1005a176:	d105      	bne.n	1005a184 <LLC_offline_control_procedures_processing+0xa4>
1005a178:	4630      	mov	r0, r6
1005a17a:	f004 fd68 	bl	1005ec4e <LLC_pcl_offline_processing_ucfg_weak>
1005a17e:	9a00      	ldr	r2, [sp, #0]
1005a180:	1e41      	subs	r1, r0, #1
1005a182:	4188      	sbcs	r0, r1
1005a184:	4b0a      	ldr	r3, [pc, #40]	@ (1005a1b0 <__arm_cp.27_0>)
1005a186:	e000      	b.n	1005a18a <LLC_offline_control_procedures_processing+0xaa>
1005a188:	2000      	movs	r0, #0
1005a18a:	1e41      	subs	r1, r0, #1
1005a18c:	4188      	sbcs	r0, r1
1005a18e:	0639      	lsls	r1, r7, #24
1005a190:	4617      	mov	r7, r2
1005a192:	d100      	bne.n	1005a196 <LLC_offline_control_procedures_processing+0xb6>
1005a194:	4607      	mov	r7, r0
1005a196:	204d      	movs	r0, #77	@ 0x4d
1005a198:	0080      	lsls	r0, r0, #2
1005a19a:	182d      	adds	r5, r5, r0
1005a19c:	1c64      	adds	r4, r4, #1
1005a19e:	e7a9      	b.n	1005a0f4 <LLC_offline_control_procedures_processing+0x14>
1005a1a0:	0638      	lsls	r0, r7, #24
1005a1a2:	d003      	beq.n	1005a1ac <LLC_offline_control_procedures_processing+0xcc>
1005a1a4:	2011      	movs	r0, #17
1005a1a6:	2101      	movs	r1, #1
1005a1a8:	f009 f96c 	bl	10063484 <tsk_wait_resource_idx>
1005a1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005a1ae:	46c0      	nop			@ (mov r8, r8)

1005a1b0 <__arm_cp.27_0>:
1005a1b0:	20002904 	.word	0x20002904

1005a1b4 <cte_csr_ucfg_weak>:
1005a1b4:	2000      	movs	r0, #0
1005a1b6:	4770      	bx	lr

1005a1b8 <hci_le_encrypt>:
1005a1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1005a1ba:	b08f      	sub	sp, #60	@ 0x3c
1005a1bc:	9202      	str	r2, [sp, #8]
1005a1be:	4607      	mov	r7, r0
1005a1c0:	a807      	add	r0, sp, #28
1005a1c2:	9001      	str	r0, [sp, #4]
1005a1c4:	2510      	movs	r5, #16
1005a1c6:	4e0c      	ldr	r6, [pc, #48]	@ (1005a1f8 <__arm_cp.0_0>)
1005a1c8:	462a      	mov	r2, r5
1005a1ca:	47b0      	blx	r6
1005a1cc:	ac0b      	add	r4, sp, #44	@ 0x2c
1005a1ce:	4620      	mov	r0, r4
1005a1d0:	4639      	mov	r1, r7
1005a1d2:	462a      	mov	r2, r5
1005a1d4:	47b0      	blx	r6
1005a1d6:	af03      	add	r7, sp, #12
1005a1d8:	2600      	movs	r6, #0
1005a1da:	9801      	ldr	r0, [sp, #4]
1005a1dc:	4621      	mov	r1, r4
1005a1de:	463a      	mov	r2, r7
1005a1e0:	4633      	mov	r3, r6
1005a1e2:	f009 fc53 	bl	10063a8c <BLEPLAT_aes128_encrypt>
1005a1e6:	9802      	ldr	r0, [sp, #8]
1005a1e8:	4639      	mov	r1, r7
1005a1ea:	462a      	mov	r2, r5
1005a1ec:	4b02      	ldr	r3, [pc, #8]	@ (1005a1f8 <__arm_cp.0_0>)
1005a1ee:	4798      	blx	r3
1005a1f0:	4630      	mov	r0, r6
1005a1f2:	b00f      	add	sp, #60	@ 0x3c
1005a1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005a1f6:	46c0      	nop			@ (mov r8, r8)

1005a1f8 <__arm_cp.0_0>:
1005a1f8:	10053335 	.word	0x10053335

1005a1fc <hci_le_long_term_key_request_reply_api>:
1005a1fc:	b5b0      	push	{r4, r5, r7, lr}
1005a1fe:	460c      	mov	r4, r1
1005a200:	4605      	mov	r5, r0
1005a202:	f000 ff83 	bl	1005b10c <llc_conn_get_conn_idx>
1005a206:	28ff      	cmp	r0, #255	@ 0xff
1005a208:	d005      	beq.n	1005a216 <hci_le_long_term_key_request_reply_api+0x1a>
1005a20a:	2000      	movs	r0, #0
1005a20c:	4629      	mov	r1, r5
1005a20e:	4622      	mov	r2, r4
1005a210:	f004 f9c3 	bl	1005e59a <LL_Get_LTK>
1005a214:	bdb0      	pop	{r4, r5, r7, pc}
1005a216:	2002      	movs	r0, #2
1005a218:	bdb0      	pop	{r4, r5, r7, pc}

1005a21a <hci_le_long_term_key_request_negative_reply_api>:
1005a21a:	b510      	push	{r4, lr}
1005a21c:	4604      	mov	r4, r0
1005a21e:	f000 ff75 	bl	1005b10c <llc_conn_get_conn_idx>
1005a222:	28ff      	cmp	r0, #255	@ 0xff
1005a224:	d005      	beq.n	1005a232 <hci_le_long_term_key_request_negative_reply_api+0x18>
1005a226:	2081      	movs	r0, #129	@ 0x81
1005a228:	2200      	movs	r2, #0
1005a22a:	4621      	mov	r1, r4
1005a22c:	f004 f9b5 	bl	1005e59a <LL_Get_LTK>
1005a230:	bd10      	pop	{r4, pc}
1005a232:	2002      	movs	r0, #2
1005a234:	bd10      	pop	{r4, pc}

1005a236 <hci_le_check_own_address_type_max_value_ucfg_weak>:
1005a236:	2001      	movs	r0, #1
1005a238:	4770      	bx	lr

1005a23a <hci_le_clear_filter_accept_list>:
1005a23a:	b580      	push	{r7, lr}
1005a23c:	f002 fa02 	bl	1005c644 <llc_wl_clear_filter_accept_list>
1005a240:	bd80      	pop	{r7, pc}

1005a242 <hci_le_add_device_to_filter_accept_list>:
1005a242:	b5e0      	push	{r5, r6, r7, lr}
1005a244:	2802      	cmp	r0, #2
1005a246:	d301      	bcc.n	1005a24c <hci_le_add_device_to_filter_accept_list+0xa>
1005a248:	28ff      	cmp	r0, #255	@ 0xff
1005a24a:	d10d      	bne.n	1005a268 <hci_le_add_device_to_filter_accept_list+0x26>
1005a24c:	2200      	movs	r2, #0
1005a24e:	9200      	str	r2, [sp, #0]
1005a250:	466b      	mov	r3, sp
1005a252:	7018      	strb	r0, [r3, #0]
1005a254:	9201      	str	r2, [sp, #4]
1005a256:	1c58      	adds	r0, r3, #1
1005a258:	2206      	movs	r2, #6
1005a25a:	f7f9 f86b 	bl	10053334 <BLEPLAT_MemCpy>
1005a25e:	9901      	ldr	r1, [sp, #4]
1005a260:	9800      	ldr	r0, [sp, #0]
1005a262:	f002 fa09 	bl	1005c678 <llc_wl_add_device_to_filter_accept_list>
1005a266:	bd8c      	pop	{r2, r3, r7, pc}
1005a268:	2012      	movs	r0, #18
1005a26a:	bd8c      	pop	{r2, r3, r7, pc}

1005a26c <data_length_extension_csr_ucfg_weak>:
1005a26c:	2000      	movs	r0, #0
1005a26e:	4770      	bx	lr

1005a270 <pcl_csr_ucfg_weak>:
1005a270:	2000      	movs	r0, #0
1005a272:	4770      	bx	lr

1005a274 <phy_upd_csr>:
1005a274:	2001      	movs	r0, #1
1005a276:	4770      	bx	lr

1005a278 <scan_csr_ucfg_weak>:
1005a278:	2000      	movs	r0, #0
1005a27a:	4770      	bx	lr

1005a27c <conn_supp_csr>:
1005a27c:	2001      	movs	r0, #1
1005a27e:	4770      	bx	lr

1005a280 <subrate_csr_ucfg_weak>:
1005a280:	2000      	movs	r0, #0
1005a282:	4770      	bx	lr

1005a284 <L2C_build_connect_update_request>:
1005a284:	b5f0      	push	{r4, r5, r6, r7, lr}
1005a286:	b087      	sub	sp, #28
1005a288:	8901      	ldrh	r1, [r0, #8]
1005a28a:	9104      	str	r1, [sp, #16]
1005a28c:	88c1      	ldrh	r1, [r0, #6]
1005a28e:	9105      	str	r1, [sp, #20]
1005a290:	8884      	ldrh	r4, [r0, #4]
1005a292:	8846      	ldrh	r6, [r0, #2]
1005a294:	8807      	ldrh	r7, [r0, #0]
1005a296:	2000      	movs	r0, #0
1005a298:	9006      	str	r0, [sp, #24]
1005a29a:	a906      	add	r1, sp, #24
1005a29c:	4638      	mov	r0, r7
1005a29e:	f000 f89f 	bl	1005a3e0 <l2c_get_check_link_status_on_request_sending>
1005a2a2:	4605      	mov	r5, r0
1005a2a4:	2800      	cmp	r0, #0
1005a2a6:	d15a      	bne.n	1005a35e <L2C_build_connect_update_request+0xda>
1005a2a8:	9603      	str	r6, [sp, #12]
1005a2aa:	9402      	str	r4, [sp, #8]
1005a2ac:	9806      	ldr	r0, [sp, #24]
1005a2ae:	7880      	ldrb	r0, [r0, #2]
1005a2b0:	07c0      	lsls	r0, r0, #31
1005a2b2:	d151      	bne.n	1005a358 <L2C_build_connect_update_request+0xd4>
1005a2b4:	2400      	movs	r4, #0
1005a2b6:	2210      	movs	r2, #16
1005a2b8:	4620      	mov	r0, r4
1005a2ba:	4639      	mov	r1, r7
1005a2bc:	f7fb fbb0 	bl	10055a20 <ACL_pkt_get>
1005a2c0:	2800      	cmp	r0, #0
1005a2c2:	d04b      	beq.n	1005a35c <L2C_build_connect_update_request+0xd8>
1005a2c4:	4607      	mov	r7, r0
1005a2c6:	482a      	ldr	r0, [pc, #168]	@ (1005a370 <__arm_cp.0_0>)
1005a2c8:	9a03      	ldr	r2, [sp, #12]
1005a2ca:	1f91      	subs	r1, r2, #6
1005a2cc:	b289      	uxth	r1, r1
1005a2ce:	2512      	movs	r5, #18
1005a2d0:	4281      	cmp	r1, r0
1005a2d2:	d23d      	bcs.n	1005a350 <L2C_build_connect_update_request+0xcc>
1005a2d4:	9e02      	ldr	r6, [sp, #8]
1005a2d6:	2e06      	cmp	r6, #6
1005a2d8:	d33a      	bcc.n	1005a350 <L2C_build_connect_update_request+0xcc>
1005a2da:	1d80      	adds	r0, r0, #6
1005a2dc:	4286      	cmp	r6, r0
1005a2de:	d237      	bcs.n	1005a350 <L2C_build_connect_update_request+0xcc>
1005a2e0:	42b2      	cmp	r2, r6
1005a2e2:	d835      	bhi.n	1005a350 <L2C_build_connect_update_request+0xcc>
1005a2e4:	9a05      	ldr	r2, [sp, #20]
1005a2e6:	0891      	lsrs	r1, r2, #2
1005a2e8:	297c      	cmp	r1, #124	@ 0x7c
1005a2ea:	d831      	bhi.n	1005a350 <L2C_build_connect_update_request+0xcc>
1005a2ec:	1c51      	adds	r1, r2, #1
1005a2ee:	4371      	muls	r1, r6
1005a2f0:	9b04      	ldr	r3, [sp, #16]
1005a2f2:	009a      	lsls	r2, r3, #2
1005a2f4:	4291      	cmp	r1, r2
1005a2f6:	d82b      	bhi.n	1005a350 <L2C_build_connect_update_request+0xcc>
1005a2f8:	2b0a      	cmp	r3, #10
1005a2fa:	d329      	bcc.n	1005a350 <L2C_build_connect_update_request+0xcc>
1005a2fc:	4283      	cmp	r3, r0
1005a2fe:	d227      	bcs.n	1005a350 <L2C_build_connect_update_request+0xcc>
1005a300:	9401      	str	r4, [sp, #4]
1005a302:	6878      	ldr	r0, [r7, #4]
1005a304:	2112      	movs	r1, #18
1005a306:	7201      	strb	r1, [r0, #8]
1005a308:	6878      	ldr	r0, [r7, #4]
1005a30a:	9906      	ldr	r1, [sp, #24]
1005a30c:	7909      	ldrb	r1, [r1, #4]
1005a30e:	7241      	strb	r1, [r0, #9]
1005a310:	2106      	movs	r1, #6
1005a312:	2508      	movs	r5, #8
1005a314:	4c17      	ldr	r4, [pc, #92]	@ (1005a374 <__arm_cp.0_1>)
1005a316:	4638      	mov	r0, r7
1005a318:	462a      	mov	r2, r5
1005a31a:	47a0      	blx	r4
1005a31c:	4638      	mov	r0, r7
1005a31e:	4629      	mov	r1, r5
1005a320:	9a03      	ldr	r2, [sp, #12]
1005a322:	47a0      	blx	r4
1005a324:	210a      	movs	r1, #10
1005a326:	4638      	mov	r0, r7
1005a328:	4632      	mov	r2, r6
1005a32a:	4625      	mov	r5, r4
1005a32c:	47a0      	blx	r4
1005a32e:	240c      	movs	r4, #12
1005a330:	4638      	mov	r0, r7
1005a332:	4621      	mov	r1, r4
1005a334:	9a05      	ldr	r2, [sp, #20]
1005a336:	47a8      	blx	r5
1005a338:	210e      	movs	r1, #14
1005a33a:	4638      	mov	r0, r7
1005a33c:	9a04      	ldr	r2, [sp, #16]
1005a33e:	47a8      	blx	r5
1005a340:	807c      	strh	r4, [r7, #2]
1005a342:	2005      	movs	r0, #5
1005a344:	4639      	mov	r1, r7
1005a346:	f000 f9cf 	bl	1005a6e8 <L2C_send_frame>
1005a34a:	2800      	cmp	r0, #0
1005a34c:	d00a      	beq.n	1005a364 <L2C_build_connect_update_request+0xe0>
1005a34e:	2581      	movs	r5, #129	@ 0x81
1005a350:	4638      	mov	r0, r7
1005a352:	f7fb fb87 	bl	10055a64 <ACL_pkt_release>
1005a356:	e002      	b.n	1005a35e <L2C_build_connect_update_request+0xda>
1005a358:	250c      	movs	r5, #12
1005a35a:	e000      	b.n	1005a35e <L2C_build_connect_update_request+0xda>
1005a35c:	2588      	movs	r5, #136	@ 0x88
1005a35e:	4628      	mov	r0, r5
1005a360:	b007      	add	sp, #28
1005a362:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005a364:	9906      	ldr	r1, [sp, #24]
1005a366:	2012      	movs	r0, #18
1005a368:	f000 f84f 	bl	1005a40a <l2c_set_link_status_after_request_enqueued>
1005a36c:	9d01      	ldr	r5, [sp, #4]
1005a36e:	e7f6      	b.n	1005a35e <L2C_build_connect_update_request+0xda>

1005a370 <__arm_cp.0_0>:
1005a370:	00000c7b 	.word	0x00000c7b

1005a374 <__arm_cp.0_1>:
1005a374:	10055acf 	.word	0x10055acf

1005a378 <l2c_get_link_control_block_ref>:
1005a378:	b570      	push	{r4, r5, r6, lr}
1005a37a:	490b      	ldr	r1, [pc, #44]	@ (1005a3a8 <__arm_cp.0_0>)
1005a37c:	7ac9      	ldrb	r1, [r1, #11]
1005a37e:	2214      	movs	r2, #20
1005a380:	434a      	muls	r2, r1
1005a382:	3214      	adds	r2, #20
1005a384:	4909      	ldr	r1, [pc, #36]	@ (1005a3ac <__arm_cp.0_1>)
1005a386:	680b      	ldr	r3, [r1, #0]
1005a388:	2100      	movs	r1, #0
1005a38a:	460d      	mov	r5, r1
1005a38c:	460c      	mov	r4, r1
1005a38e:	3414      	adds	r4, #20
1005a390:	42a2      	cmp	r2, r4
1005a392:	d006      	beq.n	1005a3a2 <l2c_get_link_control_block_ref+0x2a>
1005a394:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
1005a396:	5b75      	ldrh	r5, [r6, r5]
1005a398:	4285      	cmp	r5, r0
1005a39a:	4625      	mov	r5, r4
1005a39c:	d1f7      	bne.n	1005a38e <l2c_get_link_control_block_ref+0x16>
1005a39e:	1931      	adds	r1, r6, r4
1005a3a0:	3914      	subs	r1, #20
1005a3a2:	4608      	mov	r0, r1
1005a3a4:	bd70      	pop	{r4, r5, r6, pc}
1005a3a6:	46c0      	nop			@ (mov r8, r8)

1005a3a8 <__arm_cp.0_0>:
1005a3a8:	2000296c 	.word	0x2000296c

1005a3ac <__arm_cp.0_1>:
1005a3ac:	20002950 	.word	0x20002950

1005a3b0 <l2c_get_link_control_block_index>:
1005a3b0:	b5b0      	push	{r4, r5, r7, lr}
1005a3b2:	4909      	ldr	r1, [pc, #36]	@ (1005a3d8 <__arm_cp.1_0>)
1005a3b4:	7aca      	ldrb	r2, [r1, #11]
1005a3b6:	4909      	ldr	r1, [pc, #36]	@ (1005a3dc <__arm_cp.1_1>)
1005a3b8:	680b      	ldr	r3, [r1, #0]
1005a3ba:	2400      	movs	r4, #0
1005a3bc:	4621      	mov	r1, r4
1005a3be:	428a      	cmp	r2, r1
1005a3c0:	d006      	beq.n	1005a3d0 <l2c_get_link_control_block_index+0x20>
1005a3c2:	6add      	ldr	r5, [r3, #44]	@ 0x2c
1005a3c4:	5b2d      	ldrh	r5, [r5, r4]
1005a3c6:	4285      	cmp	r5, r0
1005a3c8:	d003      	beq.n	1005a3d2 <l2c_get_link_control_block_index+0x22>
1005a3ca:	3414      	adds	r4, #20
1005a3cc:	1c49      	adds	r1, r1, #1
1005a3ce:	e7f6      	b.n	1005a3be <l2c_get_link_control_block_index+0xe>
1005a3d0:	4611      	mov	r1, r2
1005a3d2:	b2c8      	uxtb	r0, r1
1005a3d4:	bdb0      	pop	{r4, r5, r7, pc}
1005a3d6:	46c0      	nop			@ (mov r8, r8)

1005a3d8 <__arm_cp.1_0>:
1005a3d8:	2000296c 	.word	0x2000296c

1005a3dc <__arm_cp.1_1>:
1005a3dc:	20002950 	.word	0x20002950

1005a3e0 <l2c_get_check_link_status_on_request_sending>:
1005a3e0:	b5b0      	push	{r4, r5, r7, lr}
1005a3e2:	460c      	mov	r4, r1
1005a3e4:	4605      	mov	r5, r0
1005a3e6:	f7ff ffc7 	bl	1005a378 <l2c_get_link_control_block_ref>
1005a3ea:	4601      	mov	r1, r0
1005a3ec:	6020      	str	r0, [r4, #0]
1005a3ee:	2002      	movs	r0, #2
1005a3f0:	2d00      	cmp	r5, #0
1005a3f2:	d009      	beq.n	1005a408 <l2c_get_check_link_status_on_request_sending+0x28>
1005a3f4:	2900      	cmp	r1, #0
1005a3f6:	d007      	beq.n	1005a408 <l2c_get_check_link_status_on_request_sending+0x28>
1005a3f8:	7908      	ldrb	r0, [r1, #4]
1005a3fa:	2800      	cmp	r0, #0
1005a3fc:	d003      	beq.n	1005a406 <l2c_get_check_link_status_on_request_sending+0x26>
1005a3fe:	7889      	ldrb	r1, [r1, #2]
1005a400:	2006      	movs	r0, #6
1005a402:	4008      	ands	r0, r1
1005a404:	d000      	beq.n	1005a408 <l2c_get_check_link_status_on_request_sending+0x28>
1005a406:	200c      	movs	r0, #12
1005a408:	bdb0      	pop	{r4, r5, r7, pc}

1005a40a <l2c_set_link_status_after_request_enqueued>:
1005a40a:	7188      	strb	r0, [r1, #6]
1005a40c:	7908      	ldrb	r0, [r1, #4]
1005a40e:	71c8      	strb	r0, [r1, #7]
1005a410:	7888      	ldrb	r0, [r1, #2]
1005a412:	2206      	movs	r2, #6
1005a414:	4302      	orrs	r2, r0
1005a416:	708a      	strb	r2, [r1, #2]
1005a418:	4770      	bx	lr

1005a41a <l2c_post_process_incoming_request_packet>:
1005a41a:	7190      	strb	r0, [r2, #6]
1005a41c:	7151      	strb	r1, [r2, #5]
1005a41e:	7890      	ldrb	r0, [r2, #2]
1005a420:	2104      	movs	r1, #4
1005a422:	4301      	orrs	r1, r0
1005a424:	7091      	strb	r1, [r2, #2]
1005a426:	4770      	bx	lr

1005a428 <l2c_pre_process_incoming_response_packet>:
1005a428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a42a:	4604      	mov	r4, r0
1005a42c:	2014      	movs	r0, #20
1005a42e:	4360      	muls	r0, r4
1005a430:	4b14      	ldr	r3, [pc, #80]	@ (1005a484 <__arm_cp.7_0>)
1005a432:	681b      	ldr	r3, [r3, #0]
1005a434:	6add      	ldr	r5, [r3, #44]	@ 0x2c
1005a436:	182d      	adds	r5, r5, r0
1005a438:	78a8      	ldrb	r0, [r5, #2]
1005a43a:	0746      	lsls	r6, r0, #29
1005a43c:	2081      	movs	r0, #129	@ 0x81
1005a43e:	2e00      	cmp	r6, #0
1005a440:	d51f      	bpl.n	1005a482 <l2c_pre_process_incoming_response_packet+0x5a>
1005a442:	79ae      	ldrb	r6, [r5, #6]
1005a444:	1c76      	adds	r6, r6, #1
1005a446:	428e      	cmp	r6, r1
1005a448:	d001      	beq.n	1005a44e <l2c_pre_process_incoming_response_packet+0x26>
1005a44a:	2901      	cmp	r1, #1
1005a44c:	d119      	bne.n	1005a482 <l2c_pre_process_incoming_response_packet+0x5a>
1005a44e:	79e9      	ldrb	r1, [r5, #7]
1005a450:	4291      	cmp	r1, r2
1005a452:	d116      	bne.n	1005a482 <l2c_pre_process_incoming_response_packet+0x5a>
1005a454:	1cae      	adds	r6, r5, #2
1005a456:	1daf      	adds	r7, r5, #6
1005a458:	1de8      	adds	r0, r5, #7
1005a45a:	9000      	str	r0, [sp, #0]
1005a45c:	4618      	mov	r0, r3
1005a45e:	4621      	mov	r1, r4
1005a460:	f009 f871 	bl	10063546 <CST_stop>
1005a464:	2000      	movs	r0, #0
1005a466:	7038      	strb	r0, [r7, #0]
1005a468:	9900      	ldr	r1, [sp, #0]
1005a46a:	7008      	strb	r0, [r1, #0]
1005a46c:	7831      	ldrb	r1, [r6, #0]
1005a46e:	22fb      	movs	r2, #251	@ 0xfb
1005a470:	400a      	ands	r2, r1
1005a472:	7032      	strb	r2, [r6, #0]
1005a474:	7929      	ldrb	r1, [r5, #4]
1005a476:	1c4a      	adds	r2, r1, #1
1005a478:	b2d1      	uxtb	r1, r2
1005a47a:	4291      	cmp	r1, r2
1005a47c:	d000      	beq.n	1005a480 <l2c_pre_process_incoming_response_packet+0x58>
1005a47e:	2101      	movs	r1, #1
1005a480:	7129      	strb	r1, [r5, #4]
1005a482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005a484 <__arm_cp.7_0>:
1005a484:	20002950 	.word	0x20002950

1005a488 <l2c_release_unexpected_acl_packet>:
1005a488:	b580      	push	{r7, lr}
1005a48a:	4608      	mov	r0, r1
1005a48c:	f7fb faea 	bl	10055a64 <ACL_pkt_release>
1005a490:	bd80      	pop	{r7, pc}

1005a492 <L2C_get_cid_from_basic_packet_header>:
1005a492:	b580      	push	{r7, lr}
1005a494:	2102      	movs	r1, #2
1005a496:	f7fb fb0a 	bl	10055aae <ACL_pkt_read_16b>
1005a49a:	bd80      	pop	{r7, pc}

1005a49c <L2C_build_command_reject_pdu>:
1005a49c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005a49e:	b085      	sub	sp, #20
1005a4a0:	461e      	mov	r6, r3
1005a4a2:	9204      	str	r2, [sp, #16]
1005a4a4:	460d      	mov	r5, r1
1005a4a6:	4607      	mov	r7, r0
1005a4a8:	f7ff ff66 	bl	1005a378 <l2c_get_link_control_block_ref>
1005a4ac:	2800      	cmp	r0, #0
1005a4ae:	d00f      	beq.n	1005a4d0 <L2C_build_command_reject_pdu+0x34>
1005a4b0:	4604      	mov	r4, r0
1005a4b2:	9603      	str	r6, [sp, #12]
1005a4b4:	7940      	ldrb	r0, [r0, #5]
1005a4b6:	2612      	movs	r6, #18
1005a4b8:	42a8      	cmp	r0, r5
1005a4ba:	d10a      	bne.n	1005a4d2 <L2C_build_command_reject_pdu+0x36>
1005a4bc:	9904      	ldr	r1, [sp, #16]
1005a4be:	2902      	cmp	r1, #2
1005a4c0:	d807      	bhi.n	1005a4d2 <L2C_build_command_reject_pdu+0x36>
1005a4c2:	78a0      	ldrb	r0, [r4, #2]
1005a4c4:	0780      	lsls	r0, r0, #30
1005a4c6:	d407      	bmi.n	1005a4d8 <L2C_build_command_reject_pdu+0x3c>
1005a4c8:	2901      	cmp	r1, #1
1005a4ca:	d007      	beq.n	1005a4dc <L2C_build_command_reject_pdu+0x40>
1005a4cc:	2004      	movs	r0, #4
1005a4ce:	e006      	b.n	1005a4de <L2C_build_command_reject_pdu+0x42>
1005a4d0:	2602      	movs	r6, #2
1005a4d2:	4630      	mov	r0, r6
1005a4d4:	b005      	add	sp, #20
1005a4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005a4d8:	260c      	movs	r6, #12
1005a4da:	e7fa      	b.n	1005a4d2 <L2C_build_command_reject_pdu+0x36>
1005a4dc:	2002      	movs	r0, #2
1005a4de:	2900      	cmp	r1, #0
1005a4e0:	d100      	bne.n	1005a4e4 <L2C_build_command_reject_pdu+0x48>
1005a4e2:	4608      	mov	r0, r1
1005a4e4:	9002      	str	r0, [sp, #8]
1005a4e6:	1d82      	adds	r2, r0, #6
1005a4e8:	2600      	movs	r6, #0
1005a4ea:	4630      	mov	r0, r6
1005a4ec:	4639      	mov	r1, r7
1005a4ee:	9201      	str	r2, [sp, #4]
1005a4f0:	f7fb fa96 	bl	10055a20 <ACL_pkt_get>
1005a4f4:	2800      	cmp	r0, #0
1005a4f6:	d027      	beq.n	1005a548 <L2C_build_command_reject_pdu+0xac>
1005a4f8:	4607      	mov	r7, r0
1005a4fa:	6840      	ldr	r0, [r0, #4]
1005a4fc:	2101      	movs	r1, #1
1005a4fe:	7201      	strb	r1, [r0, #8]
1005a500:	6878      	ldr	r0, [r7, #4]
1005a502:	7245      	strb	r5, [r0, #9]
1005a504:	9802      	ldr	r0, [sp, #8]
1005a506:	1c80      	adds	r0, r0, #2
1005a508:	b282      	uxth	r2, r0
1005a50a:	2106      	movs	r1, #6
1005a50c:	4638      	mov	r0, r7
1005a50e:	f7fb fade 	bl	10055ace <ACL_pkt_write_16b>
1005a512:	2108      	movs	r1, #8
1005a514:	4638      	mov	r0, r7
1005a516:	9d04      	ldr	r5, [sp, #16]
1005a518:	462a      	mov	r2, r5
1005a51a:	f7fb fad8 	bl	10055ace <ACL_pkt_write_16b>
1005a51e:	2d00      	cmp	r5, #0
1005a520:	d005      	beq.n	1005a52e <L2C_build_command_reject_pdu+0x92>
1005a522:	210a      	movs	r1, #10
1005a524:	4638      	mov	r0, r7
1005a526:	9a02      	ldr	r2, [sp, #8]
1005a528:	9b03      	ldr	r3, [sp, #12]
1005a52a:	f7fb fad9 	bl	10055ae0 <ACL_pkt_write>
1005a52e:	9801      	ldr	r0, [sp, #4]
1005a530:	8078      	strh	r0, [r7, #2]
1005a532:	2005      	movs	r0, #5
1005a534:	4639      	mov	r1, r7
1005a536:	f000 f8d7 	bl	1005a6e8 <L2C_send_frame>
1005a53a:	2800      	cmp	r0, #0
1005a53c:	d006      	beq.n	1005a54c <L2C_build_command_reject_pdu+0xb0>
1005a53e:	4638      	mov	r0, r7
1005a540:	f7fb fa90 	bl	10055a64 <ACL_pkt_release>
1005a544:	2681      	movs	r6, #129	@ 0x81
1005a546:	e7c4      	b.n	1005a4d2 <L2C_build_command_reject_pdu+0x36>
1005a548:	2688      	movs	r6, #136	@ 0x88
1005a54a:	e7c2      	b.n	1005a4d2 <L2C_build_command_reject_pdu+0x36>
1005a54c:	71a6      	strb	r6, [r4, #6]
1005a54e:	78a0      	ldrb	r0, [r4, #2]
1005a550:	21fb      	movs	r1, #251	@ 0xfb
1005a552:	4001      	ands	r1, r0
1005a554:	70a1      	strb	r1, [r4, #2]
1005a556:	e7bc      	b.n	1005a4d2 <L2C_build_command_reject_pdu+0x36>

1005a558 <l2c_cos_channel_descriptor_reset>:
1005a558:	b570      	push	{r4, r5, r6, lr}
1005a55a:	4604      	mov	r4, r0
1005a55c:	2022      	movs	r0, #34	@ 0x22
1005a55e:	4910      	ldr	r1, [pc, #64]	@ (1005a5a0 <__arm_cp.4_0>)
1005a560:	5c08      	ldrb	r0, [r1, r0]
1005a562:	42a0      	cmp	r0, r4
1005a564:	d91b      	bls.n	1005a59e <l2c_cos_channel_descriptor_reset+0x46>
1005a566:	4d0f      	ldr	r5, [pc, #60]	@ (1005a5a4 <__arm_cp.4_1>)
1005a568:	6829      	ldr	r1, [r5, #0]
1005a56a:	2030      	movs	r0, #48	@ 0x30
1005a56c:	5c0a      	ldrb	r2, [r1, r0]
1005a56e:	1c52      	adds	r2, r2, #1
1005a570:	540a      	strb	r2, [r1, r0]
1005a572:	2234      	movs	r2, #52	@ 0x34
1005a574:	4354      	muls	r4, r2
1005a576:	3130      	adds	r1, #48	@ 0x30
1005a578:	6848      	ldr	r0, [r1, #4]
1005a57a:	1900      	adds	r0, r0, r4
1005a57c:	7883      	ldrb	r3, [r0, #2]
1005a57e:	071b      	lsls	r3, r3, #28
1005a580:	d505      	bpl.n	1005a58e <l2c_cos_channel_descriptor_reset+0x36>
1005a582:	78c3      	ldrb	r3, [r0, #3]
1005a584:	2b11      	cmp	r3, #17
1005a586:	d302      	bcc.n	1005a58e <l2c_cos_channel_descriptor_reset+0x36>
1005a588:	784b      	ldrb	r3, [r1, #1]
1005a58a:	1e5b      	subs	r3, r3, #1
1005a58c:	704b      	strb	r3, [r1, #1]
1005a58e:	8946      	ldrh	r6, [r0, #10]
1005a590:	2100      	movs	r1, #0
1005a592:	f7f8 fedf 	bl	10053354 <BLEPLAT_MemSet>
1005a596:	6828      	ldr	r0, [r5, #0]
1005a598:	6b40      	ldr	r0, [r0, #52]	@ 0x34
1005a59a:	1900      	adds	r0, r0, r4
1005a59c:	8146      	strh	r6, [r0, #10]
1005a59e:	bd70      	pop	{r4, r5, r6, pc}

1005a5a0 <__arm_cp.4_0>:
1005a5a0:	2000296c 	.word	0x2000296c

1005a5a4 <__arm_cp.4_1>:
1005a5a4:	20002950 	.word	0x20002950

1005a5a8 <L2C_cos_channel_descriptors_reset_pending>:
1005a5a8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005a5aa:	460c      	mov	r4, r1
1005a5ac:	4605      	mov	r5, r0
1005a5ae:	2022      	movs	r0, #34	@ 0x22
1005a5b0:	4912      	ldr	r1, [pc, #72]	@ (1005a5fc <__arm_cp.5_0>)
1005a5b2:	9002      	str	r0, [sp, #8]
1005a5b4:	5c08      	ldrb	r0, [r1, r0]
1005a5b6:	2700      	movs	r7, #0
1005a5b8:	2603      	movs	r6, #3
1005a5ba:	4b11      	ldr	r3, [pc, #68]	@ (1005a600 <__arm_cp.5_1>)
1005a5bc:	9501      	str	r5, [sp, #4]
1005a5be:	b2c1      	uxtb	r1, r0
1005a5c0:	428f      	cmp	r7, r1
1005a5c2:	d219      	bcs.n	1005a5f8 <L2C_cos_channel_descriptors_reset_pending+0x50>
1005a5c4:	6819      	ldr	r1, [r3, #0]
1005a5c6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
1005a5c8:	198a      	adds	r2, r1, r6
1005a5ca:	1ed2      	subs	r2, r2, #3
1005a5cc:	8812      	ldrh	r2, [r2, #0]
1005a5ce:	42aa      	cmp	r2, r5
1005a5d0:	d10f      	bne.n	1005a5f2 <L2C_cos_channel_descriptors_reset_pending+0x4a>
1005a5d2:	2cff      	cmp	r4, #255	@ 0xff
1005a5d4:	d002      	beq.n	1005a5dc <L2C_cos_channel_descriptors_reset_pending+0x34>
1005a5d6:	5d89      	ldrb	r1, [r1, r6]
1005a5d8:	42a1      	cmp	r1, r4
1005a5da:	d10a      	bne.n	1005a5f2 <L2C_cos_channel_descriptors_reset_pending+0x4a>
1005a5dc:	b2f8      	uxtb	r0, r7
1005a5de:	4625      	mov	r5, r4
1005a5e0:	461c      	mov	r4, r3
1005a5e2:	f7ff ffb9 	bl	1005a558 <l2c_cos_channel_descriptor_reset>
1005a5e6:	4623      	mov	r3, r4
1005a5e8:	462c      	mov	r4, r5
1005a5ea:	9d01      	ldr	r5, [sp, #4]
1005a5ec:	9802      	ldr	r0, [sp, #8]
1005a5ee:	4903      	ldr	r1, [pc, #12]	@ (1005a5fc <__arm_cp.5_0>)
1005a5f0:	5c08      	ldrb	r0, [r1, r0]
1005a5f2:	3634      	adds	r6, #52	@ 0x34
1005a5f4:	1c7f      	adds	r7, r7, #1
1005a5f6:	e7e2      	b.n	1005a5be <L2C_cos_channel_descriptors_reset_pending+0x16>
1005a5f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005a5fa:	46c0      	nop			@ (mov r8, r8)

1005a5fc <__arm_cp.5_0>:
1005a5fc:	2000296c 	.word	0x2000296c

1005a600 <__arm_cp.5_1>:
1005a600:	20002950 	.word	0x20002950

1005a604 <l2c_cos_csr_ucfg_weak>:
1005a604:	2000      	movs	r0, #0
1005a606:	4770      	bx	lr

1005a608 <L2C_cos_cfc_init_ucfg_weak>:
1005a608:	2000      	movs	r0, #0
1005a60a:	4770      	bx	lr

1005a60c <l2c_cos_process_pending_actions_tsk_ucfg_weak>:
1005a60c:	4770      	bx	lr

1005a60e <L2C_cos_physical_link_disconnection_hndl_ucfg_weak>:
1005a60e:	4770      	bx	lr

1005a610 <l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak>:
1005a610:	2000      	movs	r0, #0
1005a612:	4770      	bx	lr

1005a614 <l2c_cos_sdu_segmentation_tsk_ucfg_weak>:
1005a614:	4770      	bx	lr

1005a616 <l2c_cos_transmit_pdu_packets_tsk_ucfg_weak>:
1005a616:	4770      	bx	lr

1005a618 <l2cap_timers_callback_wrapper>:
1005a618:	b580      	push	{r7, lr}
1005a61a:	6940      	ldr	r0, [r0, #20]
1005a61c:	4901      	ldr	r1, [pc, #4]	@ (1005a624 <__arm_cp.0_0>)
1005a61e:	f009 f856 	bl	100636ce <cst_sharedCallback>
1005a622:	bd80      	pop	{r7, pc}

1005a624 <__arm_cp.0_0>:
1005a624:	1005a629 	.word	0x1005a629

1005a628 <l2cap_timers_callback>:
1005a628:	b580      	push	{r7, lr}
1005a62a:	4903      	ldr	r1, [pc, #12]	@ (1005a638 <__arm_cp.1_0>)
1005a62c:	7ac9      	ldrb	r1, [r1, #11]
1005a62e:	4281      	cmp	r1, r0
1005a630:	d301      	bcc.n	1005a636 <l2cap_timers_callback+0xe>
1005a632:	f000 fa77 	bl	1005ab24 <L2C_timeout_handler_signalling>
1005a636:	bd80      	pop	{r7, pc}

1005a638 <__arm_cp.1_0>:
1005a638:	2000296c 	.word	0x2000296c

1005a63c <L2C_init>:
1005a63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a63e:	4605      	mov	r5, r0
1005a640:	2001      	movs	r0, #1
1005a642:	2168      	movs	r1, #104	@ 0x68
1005a644:	f007 f936 	bl	100618b4 <csmem_mem_0_assign>
1005a648:	4f23      	ldr	r7, [pc, #140]	@ (1005a6d8 <__arm_cp.3_0>)
1005a64a:	6038      	str	r0, [r7, #0]
1005a64c:	4e23      	ldr	r6, [pc, #140]	@ (1005a6dc <__arm_cp.3_1>)
1005a64e:	7af0      	ldrb	r0, [r6, #11]
1005a650:	2414      	movs	r4, #20
1005a652:	4621      	mov	r1, r4
1005a654:	f007 f92e 	bl	100618b4 <csmem_mem_0_assign>
1005a658:	4601      	mov	r1, r0
1005a65a:	6838      	ldr	r0, [r7, #0]
1005a65c:	62c1      	str	r1, [r0, #44]	@ 0x2c
1005a65e:	2d01      	cmp	r5, #1
1005a660:	d110      	bne.n	1005a684 <L2C_init+0x48>
1005a662:	305c      	adds	r0, #92	@ 0x5c
1005a664:	f009 f8ee 	bl	10063844 <ACL_list_init>
1005a668:	2522      	movs	r5, #34	@ 0x22
1005a66a:	5d70      	ldrb	r0, [r6, r5]
1005a66c:	2134      	movs	r1, #52	@ 0x34
1005a66e:	f007 f921 	bl	100618b4 <csmem_mem_0_assign>
1005a672:	6839      	ldr	r1, [r7, #0]
1005a674:	6348      	str	r0, [r1, #52]	@ 0x34
1005a676:	5d70      	ldrb	r0, [r6, r5]
1005a678:	0040      	lsls	r0, r0, #1
1005a67a:	2110      	movs	r1, #16
1005a67c:	f007 f91a 	bl	100618b4 <csmem_mem_0_assign>
1005a680:	6839      	ldr	r1, [r7, #0]
1005a682:	6488      	str	r0, [r1, #72]	@ 0x48
1005a684:	7af0      	ldrb	r0, [r6, #11]
1005a686:	1c41      	adds	r1, r0, #1
1005a688:	4d15      	ldr	r5, [pc, #84]	@ (1005a6e0 <__arm_cp.3_2>)
1005a68a:	2201      	movs	r2, #1
1005a68c:	4628      	mov	r0, r5
1005a68e:	f007 f8ff 	bl	10061890 <csmem_mem_assign>
1005a692:	6839      	ldr	r1, [r7, #0]
1005a694:	6208      	str	r0, [r1, #32]
1005a696:	7af1      	ldrb	r1, [r6, #11]
1005a698:	2202      	movs	r2, #2
1005a69a:	4628      	mov	r0, r5
1005a69c:	f007 f8f8 	bl	10061890 <csmem_mem_assign>
1005a6a0:	683d      	ldr	r5, [r7, #0]
1005a6a2:	6268      	str	r0, [r5, #36]	@ 0x24
1005a6a4:	7af1      	ldrb	r1, [r6, #11]
1005a6a6:	4a0f      	ldr	r2, [pc, #60]	@ (1005a6e4 <__arm_cp.3_3>)
1005a6a8:	2307      	movs	r3, #7
1005a6aa:	4628      	mov	r0, r5
1005a6ac:	f008 ff36 	bl	1006351c <CST_init>
1005a6b0:	6838      	ldr	r0, [r7, #0]
1005a6b2:	2117      	movs	r1, #23
1005a6b4:	8501      	strh	r1, [r0, #40]	@ 0x28
1005a6b6:	8c31      	ldrh	r1, [r6, #32]
1005a6b8:	2917      	cmp	r1, #23
1005a6ba:	d201      	bcs.n	1005a6c0 <L2C_init+0x84>
1005a6bc:	2086      	movs	r0, #134	@ 0x86
1005a6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005a6c0:	8541      	strh	r1, [r0, #42]	@ 0x2a
1005a6c2:	7af1      	ldrb	r1, [r6, #11]
1005a6c4:	434c      	muls	r4, r1
1005a6c6:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
1005a6c8:	2100      	movs	r1, #0
1005a6ca:	4622      	mov	r2, r4
1005a6cc:	f7f8 fe42 	bl	10053354 <BLEPLAT_MemSet>
1005a6d0:	f7ff ff9a 	bl	1005a608 <L2C_cos_cfc_init_ucfg_weak>
1005a6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005a6d6:	46c0      	nop			@ (mov r8, r8)

1005a6d8 <__arm_cp.3_0>:
1005a6d8:	20002950 	.word	0x20002950

1005a6dc <__arm_cp.3_1>:
1005a6dc:	2000296c 	.word	0x2000296c

1005a6e0 <__arm_cp.3_2>:
1005a6e0:	20002968 	.word	0x20002968

1005a6e4 <__arm_cp.3_3>:
1005a6e4:	1005a619 	.word	0x1005a619

1005a6e8 <L2C_send_frame>:
1005a6e8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005a6ea:	460c      	mov	r4, r1
1005a6ec:	1f01      	subs	r1, r0, #4
1005a6ee:	4606      	mov	r6, r0
1005a6f0:	2902      	cmp	r1, #2
1005a6f2:	d821      	bhi.n	1005a738 <L2C_send_frame+0x50>
1005a6f4:	8862      	ldrh	r2, [r4, #2]
1005a6f6:	2500      	movs	r5, #0
1005a6f8:	4620      	mov	r0, r4
1005a6fa:	4629      	mov	r1, r5
1005a6fc:	f7fb f9e7 	bl	10055ace <ACL_pkt_write_16b>
1005a700:	2702      	movs	r7, #2
1005a702:	4620      	mov	r0, r4
1005a704:	4639      	mov	r1, r7
1005a706:	4632      	mov	r2, r6
1005a708:	f7fb f9e1 	bl	10055ace <ACL_pkt_write_16b>
1005a70c:	8225      	strh	r5, [r4, #16]
1005a70e:	81e5      	strh	r5, [r4, #14]
1005a710:	7325      	strb	r5, [r4, #12]
1005a712:	6860      	ldr	r0, [r4, #4]
1005a714:	6160      	str	r0, [r4, #20]
1005a716:	61a0      	str	r0, [r4, #24]
1005a718:	8860      	ldrh	r0, [r4, #2]
1005a71a:	1d00      	adds	r0, r0, #4
1005a71c:	8060      	strh	r0, [r4, #2]
1005a71e:	7a20      	ldrb	r0, [r4, #8]
1005a720:	4338      	orrs	r0, r7
1005a722:	7220      	strb	r0, [r4, #8]
1005a724:	4620      	mov	r0, r4
1005a726:	f7fb f909 	bl	1005593c <Acl_Transmit_Data>
1005a72a:	2800      	cmp	r0, #0
1005a72c:	d014      	beq.n	1005a758 <L2C_send_frame+0x70>
1005a72e:	8860      	ldrh	r0, [r4, #2]
1005a730:	1f00      	subs	r0, r0, #4
1005a732:	8060      	strh	r0, [r4, #2]
1005a734:	2581      	movs	r5, #129	@ 0x81
1005a736:	e00f      	b.n	1005a758 <L2C_send_frame+0x70>
1005a738:	25a0      	movs	r5, #160	@ 0xa0
1005a73a:	283f      	cmp	r0, #63	@ 0x3f
1005a73c:	d00c      	beq.n	1005a758 <L2C_send_frame+0x70>
1005a73e:	3820      	subs	r0, #32
1005a740:	285f      	cmp	r0, #95	@ 0x5f
1005a742:	d809      	bhi.n	1005a758 <L2C_send_frame+0x70>
1005a744:	a801      	add	r0, sp, #4
1005a746:	8086      	strh	r6, [r0, #4]
1005a748:	2122      	movs	r1, #34	@ 0x22
1005a74a:	4a04      	ldr	r2, [pc, #16]	@ (1005a75c <__arm_cp.4_0>)
1005a74c:	5c51      	ldrb	r1, [r2, r1]
1005a74e:	7181      	strb	r1, [r0, #6]
1005a750:	9401      	str	r4, [sp, #4]
1005a752:	f7ff ff5d 	bl	1005a610 <l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak>
1005a756:	4605      	mov	r5, r0
1005a758:	4628      	mov	r0, r5
1005a75a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005a75c <__arm_cp.4_0>:
1005a75c:	2000296c 	.word	0x2000296c

1005a760 <L2C_receive_data>:
1005a760:	b5f0      	push	{r4, r5, r6, r7, lr}
1005a762:	b0c3      	sub	sp, #268	@ 0x10c
1005a764:	4604      	mov	r4, r0
1005a766:	8800      	ldrh	r0, [r0, #0]
1005a768:	f7ff fe06 	bl	1005a378 <l2c_get_link_control_block_ref>
1005a76c:	2800      	cmp	r0, #0
1005a76e:	d07c      	beq.n	1005a86a <L2C_receive_data+0x10a>
1005a770:	4605      	mov	r5, r0
1005a772:	7a20      	ldrb	r0, [r4, #8]
1005a774:	2703      	movs	r7, #3
1005a776:	4007      	ands	r7, r0
1005a778:	6928      	ldr	r0, [r5, #16]
1005a77a:	462a      	mov	r2, r5
1005a77c:	320c      	adds	r2, #12
1005a77e:	2f02      	cmp	r7, #2
1005a780:	9203      	str	r2, [sp, #12]
1005a782:	d108      	bne.n	1005a796 <L2C_receive_data+0x36>
1005a784:	2800      	cmp	r0, #0
1005a786:	d02f      	beq.n	1005a7e8 <L2C_receive_data+0x88>
1005a788:	8811      	ldrh	r1, [r2, #0]
1005a78a:	2684      	movs	r6, #132	@ 0x84
1005a78c:	2904      	cmp	r1, #4
1005a78e:	d354      	bcc.n	1005a83a <L2C_receive_data+0xda>
1005a790:	2101      	movs	r1, #1
1005a792:	9102      	str	r1, [sp, #8]
1005a794:	e031      	b.n	1005a7fa <L2C_receive_data+0x9a>
1005a796:	2800      	cmp	r0, #0
1005a798:	d04a      	beq.n	1005a830 <L2C_receive_data+0xd0>
1005a79a:	8866      	ldrh	r6, [r4, #2]
1005a79c:	2e00      	cmp	r6, #0
1005a79e:	d026      	beq.n	1005a7ee <L2C_receive_data+0x8e>
1005a7a0:	2100      	movs	r1, #0
1005a7a2:	9101      	str	r1, [sp, #4]
1005a7a4:	a804      	add	r0, sp, #16
1005a7a6:	9002      	str	r0, [sp, #8]
1005a7a8:	4620      	mov	r0, r4
1005a7aa:	4632      	mov	r2, r6
1005a7ac:	9b02      	ldr	r3, [sp, #8]
1005a7ae:	f7fb f975 	bl	10055a9c <ACL_pkt_read>
1005a7b2:	6928      	ldr	r0, [r5, #16]
1005a7b4:	6840      	ldr	r0, [r0, #4]
1005a7b6:	9000      	str	r0, [sp, #0]
1005a7b8:	4620      	mov	r0, r4
1005a7ba:	f7fb f99a 	bl	10055af2 <ACL_pkt_extract_pdu>
1005a7be:	4601      	mov	r1, r0
1005a7c0:	9800      	ldr	r0, [sp, #0]
1005a7c2:	f007 fa0a 	bl	10061bda <Mem_Buff_append>
1005a7c6:	89a9      	ldrh	r1, [r5, #12]
1005a7c8:	6928      	ldr	r0, [r5, #16]
1005a7ca:	4632      	mov	r2, r6
1005a7cc:	9b02      	ldr	r3, [sp, #8]
1005a7ce:	f7fb f987 	bl	10055ae0 <ACL_pkt_write>
1005a7d2:	89a8      	ldrh	r0, [r5, #12]
1005a7d4:	1980      	adds	r0, r0, r6
1005a7d6:	81a8      	strh	r0, [r5, #12]
1005a7d8:	b281      	uxth	r1, r0
1005a7da:	6928      	ldr	r0, [r5, #16]
1005a7dc:	f7fb f94b 	bl	10055a76 <ACL_pkt_resize>
1005a7e0:	9a03      	ldr	r2, [sp, #12]
1005a7e2:	9801      	ldr	r0, [sp, #4]
1005a7e4:	8060      	strh	r0, [r4, #2]
1005a7e6:	e002      	b.n	1005a7ee <L2C_receive_data+0x8e>
1005a7e8:	612c      	str	r4, [r5, #16]
1005a7ea:	8860      	ldrh	r0, [r4, #2]
1005a7ec:	81a8      	strh	r0, [r5, #12]
1005a7ee:	8810      	ldrh	r0, [r2, #0]
1005a7f0:	2804      	cmp	r0, #4
1005a7f2:	d31b      	bcc.n	1005a82c <L2C_receive_data+0xcc>
1005a7f4:	6928      	ldr	r0, [r5, #16]
1005a7f6:	2600      	movs	r6, #0
1005a7f8:	9602      	str	r6, [sp, #8]
1005a7fa:	2100      	movs	r1, #0
1005a7fc:	9101      	str	r1, [sp, #4]
1005a7fe:	f7fb f956 	bl	10055aae <ACL_pkt_read_16b>
1005a802:	1d00      	adds	r0, r0, #4
1005a804:	b281      	uxth	r1, r0
1005a806:	89aa      	ldrh	r2, [r5, #12]
1005a808:	428a      	cmp	r2, r1
1005a80a:	d816      	bhi.n	1005a83a <L2C_receive_data+0xda>
1005a80c:	d112      	bne.n	1005a834 <L2C_receive_data+0xd4>
1005a80e:	6929      	ldr	r1, [r5, #16]
1005a810:	8048      	strh	r0, [r1, #2]
1005a812:	2001      	movs	r0, #1
1005a814:	f000 f832 	bl	1005a87c <L2C_mux_acl_packet>
1005a818:	2800      	cmp	r0, #0
1005a81a:	d02d      	beq.n	1005a878 <L2C_receive_data+0x118>
1005a81c:	6928      	ldr	r0, [r5, #16]
1005a81e:	2684      	movs	r6, #132	@ 0x84
1005a820:	42a0      	cmp	r0, r4
1005a822:	d126      	bne.n	1005a872 <L2C_receive_data+0x112>
1005a824:	9801      	ldr	r0, [sp, #4]
1005a826:	81a8      	strh	r0, [r5, #12]
1005a828:	6128      	str	r0, [r5, #16]
1005a82a:	e022      	b.n	1005a872 <L2C_receive_data+0x112>
1005a82c:	2600      	movs	r6, #0
1005a82e:	e018      	b.n	1005a862 <L2C_receive_data+0x102>
1005a830:	2600      	movs	r6, #0
1005a832:	e002      	b.n	1005a83a <L2C_receive_data+0xda>
1005a834:	9802      	ldr	r0, [sp, #8]
1005a836:	2800      	cmp	r0, #0
1005a838:	d013      	beq.n	1005a862 <L2C_receive_data+0x102>
1005a83a:	78a8      	ldrb	r0, [r5, #2]
1005a83c:	2110      	movs	r1, #16
1005a83e:	4301      	orrs	r1, r0
1005a840:	70a9      	strb	r1, [r5, #2]
1005a842:	2042      	movs	r0, #66	@ 0x42
1005a844:	2101      	movs	r1, #1
1005a846:	2202      	movs	r2, #2
1005a848:	462b      	mov	r3, r5
1005a84a:	f00a f9ff 	bl	10064c4c <aci_hal_fw_error_event_push_noinline>
1005a84e:	6928      	ldr	r0, [r5, #16]
1005a850:	2800      	cmp	r0, #0
1005a852:	d006      	beq.n	1005a862 <L2C_receive_data+0x102>
1005a854:	f7fb f906 	bl	10055a64 <ACL_pkt_release>
1005a858:	2000      	movs	r0, #0
1005a85a:	6128      	str	r0, [r5, #16]
1005a85c:	9903      	ldr	r1, [sp, #12]
1005a85e:	2000      	movs	r0, #0
1005a860:	8008      	strh	r0, [r1, #0]
1005a862:	2e00      	cmp	r6, #0
1005a864:	d105      	bne.n	1005a872 <L2C_receive_data+0x112>
1005a866:	2f01      	cmp	r7, #1
1005a868:	d103      	bne.n	1005a872 <L2C_receive_data+0x112>
1005a86a:	4620      	mov	r0, r4
1005a86c:	f7fb f8fa 	bl	10055a64 <ACL_pkt_release>
1005a870:	2600      	movs	r6, #0
1005a872:	4630      	mov	r0, r6
1005a874:	b043      	add	sp, #268	@ 0x10c
1005a876:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005a878:	9801      	ldr	r0, [sp, #4]
1005a87a:	e7ee      	b.n	1005a85a <L2C_receive_data+0xfa>

1005a87c <L2C_mux_acl_packet>:
1005a87c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005a87e:	460c      	mov	r4, r1
1005a880:	4605      	mov	r5, r0
1005a882:	8848      	ldrh	r0, [r1, #2]
1005a884:	1f00      	subs	r0, r0, #4
1005a886:	8048      	strh	r0, [r1, #2]
1005a888:	4608      	mov	r0, r1
1005a88a:	f7ff fe02 	bl	1005a492 <L2C_get_cid_from_basic_packet_header>
1005a88e:	1f01      	subs	r1, r0, #4
1005a890:	2902      	cmp	r1, #2
1005a892:	d80c      	bhi.n	1005a8ae <L2C_mux_acl_packet+0x32>
1005a894:	2806      	cmp	r0, #6
1005a896:	d01a      	beq.n	1005a8ce <L2C_mux_acl_packet+0x52>
1005a898:	2805      	cmp	r0, #5
1005a89a:	d01d      	beq.n	1005a8d8 <L2C_mux_acl_packet+0x5c>
1005a89c:	2804      	cmp	r0, #4
1005a89e:	d111      	bne.n	1005a8c4 <L2C_mux_acl_packet+0x48>
1005a8a0:	2004      	movs	r0, #4
1005a8a2:	81a0      	strh	r0, [r4, #12]
1005a8a4:	4628      	mov	r0, r5
1005a8a6:	4621      	mov	r1, r4
1005a8a8:	f7fc ff2c 	bl	10057704 <GAT_att_cmn_rcv>
1005a8ac:	e018      	b.n	1005a8e0 <L2C_mux_acl_packet+0x64>
1005a8ae:	283f      	cmp	r0, #63	@ 0x3f
1005a8b0:	d008      	beq.n	1005a8c4 <L2C_mux_acl_packet+0x48>
1005a8b2:	3820      	subs	r0, #32
1005a8b4:	285f      	cmp	r0, #95	@ 0x5f
1005a8b6:	d805      	bhi.n	1005a8c4 <L2C_mux_acl_packet+0x48>
1005a8b8:	4668      	mov	r0, sp
1005a8ba:	7005      	strb	r5, [r0, #0]
1005a8bc:	9401      	str	r4, [sp, #4]
1005a8be:	f00b fb8b 	bl	10065fd8 <l2c_cos_hndl_incoming_le_frame_ucfg_weak>
1005a8c2:	e00d      	b.n	1005a8e0 <L2C_mux_acl_packet+0x64>
1005a8c4:	4628      	mov	r0, r5
1005a8c6:	4621      	mov	r1, r4
1005a8c8:	f7ff fdde 	bl	1005a488 <l2c_release_unexpected_acl_packet>
1005a8cc:	e00e      	b.n	1005a8ec <L2C_mux_acl_packet+0x70>
1005a8ce:	4628      	mov	r0, r5
1005a8d0:	4621      	mov	r1, r4
1005a8d2:	f008 fb8d 	bl	10062ff0 <smp_sap_l2c_acl_data_hndl>
1005a8d6:	e003      	b.n	1005a8e0 <L2C_mux_acl_packet+0x64>
1005a8d8:	4628      	mov	r0, r5
1005a8da:	4621      	mov	r1, r4
1005a8dc:	f000 f808 	bl	1005a8f0 <L2C_acl_cframe_signaling_hndl>
1005a8e0:	2800      	cmp	r0, #0
1005a8e2:	d003      	beq.n	1005a8ec <L2C_mux_acl_packet+0x70>
1005a8e4:	8861      	ldrh	r1, [r4, #2]
1005a8e6:	1d09      	adds	r1, r1, #4
1005a8e8:	8061      	strh	r1, [r4, #2]
1005a8ea:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005a8ec:	2000      	movs	r0, #0
1005a8ee:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1005a8f0 <L2C_acl_cframe_signaling_hndl>:
1005a8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005a8f2:	b085      	sub	sp, #20
1005a8f4:	460c      	mov	r4, r1
1005a8f6:	4606      	mov	r6, r0
1005a8f8:	880f      	ldrh	r7, [r1, #0]
1005a8fa:	4638      	mov	r0, r7
1005a8fc:	f7ff fd58 	bl	1005a3b0 <l2c_get_link_control_block_index>
1005a900:	4605      	mov	r5, r0
1005a902:	4880      	ldr	r0, [pc, #512]	@ (1005ab04 <__arm_cp.7_0>)
1005a904:	7ac1      	ldrb	r1, [r0, #11]
1005a906:	428d      	cmp	r5, r1
1005a908:	d206      	bcs.n	1005a918 <L2C_acl_cframe_signaling_hndl+0x28>
1005a90a:	2014      	movs	r0, #20
1005a90c:	4368      	muls	r0, r5
1005a90e:	4a7e      	ldr	r2, [pc, #504]	@ (1005ab08 <__arm_cp.7_1>)
1005a910:	6812      	ldr	r2, [r2, #0]
1005a912:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
1005a914:	1810      	adds	r0, r2, r0
1005a916:	9002      	str	r0, [sp, #8]
1005a918:	6862      	ldr	r2, [r4, #4]
1005a91a:	7a10      	ldrb	r0, [r2, #8]
1005a91c:	2300      	movs	r3, #0
1005a91e:	2e01      	cmp	r6, #1
1005a920:	d01c      	beq.n	1005a95c <L2C_acl_cframe_signaling_hndl+0x6c>
1005a922:	2e00      	cmp	r6, #0
1005a924:	d13c      	bne.n	1005a9a0 <L2C_acl_cframe_signaling_hndl+0xb0>
1005a926:	461e      	mov	r6, r3
1005a928:	428d      	cmp	r5, r1
1005a92a:	d212      	bcs.n	1005a952 <L2C_acl_cframe_signaling_hndl+0x62>
1005a92c:	2819      	cmp	r0, #25
1005a92e:	d80b      	bhi.n	1005a948 <L2C_acl_cframe_signaling_hndl+0x58>
1005a930:	2101      	movs	r1, #1
1005a932:	4081      	lsls	r1, r0
1005a934:	4879      	ldr	r0, [pc, #484]	@ (1005ab1c <__arm_cp.7_6>)
1005a936:	4201      	tst	r1, r0
1005a938:	d006      	beq.n	1005a948 <L2C_acl_cframe_signaling_hndl+0x58>
1005a93a:	4873      	ldr	r0, [pc, #460]	@ (1005ab08 <__arm_cp.7_1>)
1005a93c:	6800      	ldr	r0, [r0, #0]
1005a93e:	2201      	movs	r2, #1
1005a940:	4b77      	ldr	r3, [pc, #476]	@ (1005ab20 <__arm_cp.7_7>)
1005a942:	4629      	mov	r1, r5
1005a944:	f008 fe35 	bl	100635b2 <CST_start>
1005a948:	9a02      	ldr	r2, [sp, #8]
1005a94a:	7890      	ldrb	r0, [r2, #2]
1005a94c:	21fd      	movs	r1, #253	@ 0xfd
1005a94e:	4001      	ands	r1, r0
1005a950:	7091      	strb	r1, [r2, #2]
1005a952:	4620      	mov	r0, r4
1005a954:	f7fb f886 	bl	10055a64 <ACL_pkt_release>
1005a958:	4630      	mov	r0, r6
1005a95a:	e0d0      	b.n	1005aafe <L2C_acl_cframe_signaling_hndl+0x20e>
1005a95c:	428d      	cmp	r5, r1
1005a95e:	d300      	bcc.n	1005a962 <L2C_acl_cframe_signaling_hndl+0x72>
1005a960:	e0c8      	b.n	1005aaf4 <L2C_acl_cframe_signaling_hndl+0x204>
1005a962:	7a56      	ldrb	r6, [r2, #9]
1005a964:	2813      	cmp	r0, #19
1005a966:	d81d      	bhi.n	1005a9a4 <L2C_acl_cframe_signaling_hndl+0xb4>
1005a968:	2101      	movs	r1, #1
1005a96a:	9100      	str	r1, [sp, #0]
1005a96c:	4081      	lsls	r1, r0
1005a96e:	4a67      	ldr	r2, [pc, #412]	@ (1005ab0c <__arm_cp.7_2>)
1005a970:	4211      	tst	r1, r2
1005a972:	d017      	beq.n	1005a9a4 <L2C_acl_cframe_signaling_hndl+0xb4>
1005a974:	2801      	cmp	r0, #1
1005a976:	d021      	beq.n	1005a9bc <L2C_acl_cframe_signaling_hndl+0xcc>
1005a978:	2114      	movs	r1, #20
1005a97a:	4a63      	ldr	r2, [pc, #396]	@ (1005ab08 <__arm_cp.7_1>)
1005a97c:	6812      	ldr	r2, [r2, #0]
1005a97e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
1005a980:	2813      	cmp	r0, #19
1005a982:	d03e      	beq.n	1005aa02 <L2C_acl_cframe_signaling_hndl+0x112>
1005a984:	2812      	cmp	r0, #18
1005a986:	d000      	beq.n	1005a98a <L2C_acl_cframe_signaling_hndl+0x9a>
1005a988:	e0b4      	b.n	1005aaf4 <L2C_acl_cframe_signaling_hndl+0x204>
1005a98a:	9301      	str	r3, [sp, #4]
1005a98c:	4608      	mov	r0, r1
1005a98e:	4368      	muls	r0, r5
1005a990:	1810      	adds	r0, r2, r0
1005a992:	7883      	ldrb	r3, [r0, #2]
1005a994:	07df      	lsls	r7, r3, #31
1005a996:	d166      	bne.n	1005aa66 <L2C_acl_cframe_signaling_hndl+0x176>
1005a998:	7146      	strb	r6, [r0, #5]
1005a99a:	8820      	ldrh	r0, [r4, #0]
1005a99c:	2200      	movs	r2, #0
1005a99e:	e09d      	b.n	1005aadc <L2C_acl_cframe_signaling_hndl+0x1ec>
1005a9a0:	4618      	mov	r0, r3
1005a9a2:	e0ac      	b.n	1005aafe <L2C_acl_cframe_signaling_hndl+0x20e>
1005a9a4:	9301      	str	r3, [sp, #4]
1005a9a6:	f00b fb15 	bl	10065fd4 <L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak>
1005a9aa:	2800      	cmp	r0, #0
1005a9ac:	d100      	bne.n	1005a9b0 <L2C_acl_cframe_signaling_hndl+0xc0>
1005a9ae:	e091      	b.n	1005aad4 <L2C_acl_cframe_signaling_hndl+0x1e4>
1005a9b0:	a803      	add	r0, sp, #12
1005a9b2:	7105      	strb	r5, [r0, #4]
1005a9b4:	9403      	str	r4, [sp, #12]
1005a9b6:	f00b fb0b 	bl	10065fd0 <L2C_cos_process_cfc_mode_command_ucfg_weak>
1005a9ba:	e093      	b.n	1005aae4 <L2C_acl_cframe_signaling_hndl+0x1f4>
1005a9bc:	2701      	movs	r7, #1
1005a9be:	4628      	mov	r0, r5
1005a9c0:	4639      	mov	r1, r7
1005a9c2:	4632      	mov	r2, r6
1005a9c4:	9301      	str	r3, [sp, #4]
1005a9c6:	f7ff fd2f 	bl	1005a428 <l2c_pre_process_incoming_response_packet>
1005a9ca:	9b01      	ldr	r3, [sp, #4]
1005a9cc:	2800      	cmp	r0, #0
1005a9ce:	d000      	beq.n	1005a9d2 <L2C_acl_cframe_signaling_hndl+0xe2>
1005a9d0:	e090      	b.n	1005aaf4 <L2C_acl_cframe_signaling_hndl+0x204>
1005a9d2:	8826      	ldrh	r6, [r4, #0]
1005a9d4:	484e      	ldr	r0, [pc, #312]	@ (1005ab10 <__arm_cp.7_3>)
1005a9d6:	6800      	ldr	r0, [r0, #0]
1005a9d8:	6980      	ldr	r0, [r0, #24]
1005a9da:	2142      	movs	r1, #66	@ 0x42
1005a9dc:	2252      	movs	r2, #82	@ 0x52
1005a9de:	2303      	movs	r3, #3
1005a9e0:	f7fb f9f4 	bl	10055dcc <aci_event_fifo_push_header>
1005a9e4:	9b01      	ldr	r3, [sp, #4]
1005a9e6:	2800      	cmp	r0, #0
1005a9e8:	d100      	bne.n	1005a9ec <L2C_acl_cframe_signaling_hndl+0xfc>
1005a9ea:	e083      	b.n	1005aaf4 <L2C_acl_cframe_signaling_hndl+0x204>
1005a9ec:	4605      	mov	r5, r0
1005a9ee:	4631      	mov	r1, r6
1005a9f0:	1d06      	adds	r6, r0, #4
1005a9f2:	4630      	mov	r0, r6
1005a9f4:	4622      	mov	r2, r4
1005a9f6:	f7fb fd79 	bl	100564ec <aci_l2cap_command_reject_event_copy>
1005a9fa:	02f8      	lsls	r0, r7, #11
1005a9fc:	300a      	adds	r0, #10
1005a9fe:	2108      	movs	r1, #8
1005aa00:	e058      	b.n	1005aab4 <L2C_acl_cframe_signaling_hndl+0x1c4>
1005aa02:	4369      	muls	r1, r5
1005aa04:	1850      	adds	r0, r2, r1
1005aa06:	7880      	ldrb	r0, [r0, #2]
1005aa08:	07c0      	lsls	r0, r0, #31
1005aa0a:	d173      	bne.n	1005aaf4 <L2C_acl_cframe_signaling_hndl+0x204>
1005aa0c:	2113      	movs	r1, #19
1005aa0e:	4628      	mov	r0, r5
1005aa10:	4632      	mov	r2, r6
1005aa12:	9301      	str	r3, [sp, #4]
1005aa14:	f7ff fd08 	bl	1005a428 <l2c_pre_process_incoming_response_packet>
1005aa18:	9b01      	ldr	r3, [sp, #4]
1005aa1a:	2800      	cmp	r0, #0
1005aa1c:	d16a      	bne.n	1005aaf4 <L2C_acl_cframe_signaling_hndl+0x204>
1005aa1e:	2108      	movs	r1, #8
1005aa20:	4620      	mov	r0, r4
1005aa22:	f7fb f844 	bl	10055aae <ACL_pkt_read_16b>
1005aa26:	9b01      	ldr	r3, [sp, #4]
1005aa28:	4606      	mov	r6, r0
1005aa2a:	483a      	ldr	r0, [pc, #232]	@ (1005ab14 <__arm_cp.7_4>)
1005aa2c:	6800      	ldr	r0, [r0, #0]
1005aa2e:	214f      	movs	r1, #79	@ 0x4f
1005aa30:	5c40      	ldrb	r0, [r0, r1]
1005aa32:	0780      	lsls	r0, r0, #30
1005aa34:	d55e      	bpl.n	1005aaf4 <L2C_acl_cframe_signaling_hndl+0x204>
1005aa36:	8827      	ldrh	r7, [r4, #0]
1005aa38:	4835      	ldr	r0, [pc, #212]	@ (1005ab10 <__arm_cp.7_3>)
1005aa3a:	6800      	ldr	r0, [r0, #0]
1005aa3c:	6980      	ldr	r0, [r0, #24]
1005aa3e:	2142      	movs	r1, #66	@ 0x42
1005aa40:	224c      	movs	r2, #76	@ 0x4c
1005aa42:	2303      	movs	r3, #3
1005aa44:	f7fb f9c2 	bl	10055dcc <aci_event_fifo_push_header>
1005aa48:	9b01      	ldr	r3, [sp, #4]
1005aa4a:	2800      	cmp	r0, #0
1005aa4c:	d052      	beq.n	1005aaf4 <L2C_acl_cframe_signaling_hndl+0x204>
1005aa4e:	4605      	mov	r5, r0
1005aa50:	7306      	strb	r6, [r0, #12]
1005aa52:	7287      	strb	r7, [r0, #10]
1005aa54:	0a30      	lsrs	r0, r6, #8
1005aa56:	7368      	strb	r0, [r5, #13]
1005aa58:	0a38      	lsrs	r0, r7, #8
1005aa5a:	72e8      	strb	r0, [r5, #11]
1005aa5c:	1d2e      	adds	r6, r5, #4
1005aa5e:	9800      	ldr	r0, [sp, #0]
1005aa60:	02c0      	lsls	r0, r0, #11
1005aa62:	2106      	movs	r1, #6
1005aa64:	e026      	b.n	1005aab4 <L2C_acl_cframe_signaling_hndl+0x1c4>
1005aa66:	0758      	lsls	r0, r3, #29
1005aa68:	9b01      	ldr	r3, [sp, #4]
1005aa6a:	d443      	bmi.n	1005aaf4 <L2C_acl_cframe_signaling_hndl+0x204>
1005aa6c:	4369      	muls	r1, r5
1005aa6e:	1852      	adds	r2, r2, r1
1005aa70:	2012      	movs	r0, #18
1005aa72:	4631      	mov	r1, r6
1005aa74:	f7ff fcd1 	bl	1005a41a <l2c_post_process_incoming_request_packet>
1005aa78:	9b01      	ldr	r3, [sp, #4]
1005aa7a:	4826      	ldr	r0, [pc, #152]	@ (1005ab14 <__arm_cp.7_4>)
1005aa7c:	6800      	ldr	r0, [r0, #0]
1005aa7e:	214f      	movs	r1, #79	@ 0x4f
1005aa80:	5c40      	ldrb	r0, [r0, r1]
1005aa82:	07c0      	lsls	r0, r0, #31
1005aa84:	d036      	beq.n	1005aaf4 <L2C_acl_cframe_signaling_hndl+0x204>
1005aa86:	8827      	ldrh	r7, [r4, #0]
1005aa88:	4821      	ldr	r0, [pc, #132]	@ (1005ab10 <__arm_cp.7_3>)
1005aa8a:	6800      	ldr	r0, [r0, #0]
1005aa8c:	6980      	ldr	r0, [r0, #24]
1005aa8e:	2142      	movs	r1, #66	@ 0x42
1005aa90:	224d      	movs	r2, #77	@ 0x4d
1005aa92:	2305      	movs	r3, #5
1005aa94:	f7fb f99a 	bl	10055dcc <aci_event_fifo_push_header>
1005aa98:	9b01      	ldr	r3, [sp, #4]
1005aa9a:	2800      	cmp	r0, #0
1005aa9c:	d02a      	beq.n	1005aaf4 <L2C_acl_cframe_signaling_hndl+0x204>
1005aa9e:	4605      	mov	r5, r0
1005aaa0:	1d06      	adds	r6, r0, #4
1005aaa2:	4630      	mov	r0, r6
1005aaa4:	4639      	mov	r1, r7
1005aaa6:	4622      	mov	r2, r4
1005aaa8:	f7fb fcd8 	bl	1005645c <aci_l2cap_connection_update_req_event_copy>
1005aaac:	9800      	ldr	r0, [sp, #0]
1005aaae:	02c0      	lsls	r0, r0, #11
1005aab0:	1c80      	adds	r0, r0, #2
1005aab2:	210f      	movs	r1, #15
1005aab4:	22ff      	movs	r2, #255	@ 0xff
1005aab6:	7072      	strb	r2, [r6, #1]
1005aab8:	2282      	movs	r2, #130	@ 0x82
1005aaba:	7032      	strb	r2, [r6, #0]
1005aabc:	0a02      	lsrs	r2, r0, #8
1005aabe:	726a      	strb	r2, [r5, #9]
1005aac0:	7228      	strb	r0, [r5, #8]
1005aac2:	2000      	movs	r0, #0
1005aac4:	71e8      	strb	r0, [r5, #7]
1005aac6:	71a9      	strb	r1, [r5, #6]
1005aac8:	2042      	movs	r0, #66	@ 0x42
1005aaca:	4629      	mov	r1, r5
1005aacc:	f7fb fa1b 	bl	10055f06 <aci_event_fifo_push>
1005aad0:	9b01      	ldr	r3, [sp, #4]
1005aad2:	e00f      	b.n	1005aaf4 <L2C_acl_cframe_signaling_hndl+0x204>
1005aad4:	9802      	ldr	r0, [sp, #8]
1005aad6:	7146      	strb	r6, [r0, #5]
1005aad8:	2200      	movs	r2, #0
1005aada:	4638      	mov	r0, r7
1005aadc:	4631      	mov	r1, r6
1005aade:	4613      	mov	r3, r2
1005aae0:	f7ff fcdc 	bl	1005a49c <L2C_build_command_reject_pdu>
1005aae4:	9b01      	ldr	r3, [sp, #4]
1005aae6:	2812      	cmp	r0, #18
1005aae8:	d809      	bhi.n	1005aafe <L2C_acl_cframe_signaling_hndl+0x20e>
1005aaea:	2101      	movs	r1, #1
1005aaec:	4081      	lsls	r1, r0
1005aaee:	4a0a      	ldr	r2, [pc, #40]	@ (1005ab18 <__arm_cp.7_5>)
1005aaf0:	4211      	tst	r1, r2
1005aaf2:	d004      	beq.n	1005aafe <L2C_acl_cframe_signaling_hndl+0x20e>
1005aaf4:	4620      	mov	r0, r4
1005aaf6:	461c      	mov	r4, r3
1005aaf8:	f7fa ffb4 	bl	10055a64 <ACL_pkt_release>
1005aafc:	4620      	mov	r0, r4
1005aafe:	b005      	add	sp, #20
1005ab00:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005ab02:	46c0      	nop			@ (mov r8, r8)

1005ab04 <__arm_cp.7_0>:
1005ab04:	2000296c 	.word	0x2000296c

1005ab08 <__arm_cp.7_1>:
1005ab08:	20002950 	.word	0x20002950

1005ab0c <__arm_cp.7_2>:
1005ab0c:	000c0002 	.word	0x000c0002

1005ab10 <__arm_cp.7_3>:
1005ab10:	20002908 	.word	0x20002908

1005ab14 <__arm_cp.7_4>:
1005ab14:	20002958 	.word	0x20002958

1005ab18 <__arm_cp.7_5>:
1005ab18:	00040005 	.word	0x00040005

1005ab1c <__arm_cp.7_6>:
1005ab1c:	02940040 	.word	0x02940040

1005ab20 <__arm_cp.7_7>:
1005ab20:	00007530 	.word	0x00007530

1005ab24 <L2C_timeout_handler_signalling>:
1005ab24:	b570      	push	{r4, r5, r6, lr}
1005ab26:	2414      	movs	r4, #20
1005ab28:	4344      	muls	r4, r0
1005ab2a:	4d14      	ldr	r5, [pc, #80]	@ (1005ab7c <__arm_cp.8_0>)
1005ab2c:	4814      	ldr	r0, [pc, #80]	@ (1005ab80 <__arm_cp.8_1>)
1005ab2e:	6800      	ldr	r0, [r0, #0]
1005ab30:	214f      	movs	r1, #79	@ 0x4f
1005ab32:	5c40      	ldrb	r0, [r0, r1]
1005ab34:	0700      	lsls	r0, r0, #28
1005ab36:	d513      	bpl.n	1005ab60 <L2C_timeout_handler_signalling+0x3c>
1005ab38:	6828      	ldr	r0, [r5, #0]
1005ab3a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
1005ab3c:	5b06      	ldrh	r6, [r0, r4]
1005ab3e:	4811      	ldr	r0, [pc, #68]	@ (1005ab84 <__arm_cp.8_2>)
1005ab40:	6800      	ldr	r0, [r0, #0]
1005ab42:	6980      	ldr	r0, [r0, #24]
1005ab44:	2206      	movs	r2, #6
1005ab46:	2102      	movs	r1, #2
1005ab48:	460b      	mov	r3, r1
1005ab4a:	f7fb f93f 	bl	10055dcc <aci_event_fifo_push_header>
1005ab4e:	2800      	cmp	r0, #0
1005ab50:	d006      	beq.n	1005ab60 <L2C_timeout_handler_signalling+0x3c>
1005ab52:	4601      	mov	r1, r0
1005ab54:	480c      	ldr	r0, [pc, #48]	@ (1005ab88 <__arm_cp.8_3>)
1005ab56:	6048      	str	r0, [r1, #4]
1005ab58:	810e      	strh	r6, [r1, #8]
1005ab5a:	2002      	movs	r0, #2
1005ab5c:	f7fb f9d3 	bl	10055f06 <aci_event_fifo_push>
1005ab60:	6828      	ldr	r0, [r5, #0]
1005ab62:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
1005ab64:	1901      	adds	r1, r0, r4
1005ab66:	2200      	movs	r2, #0
1005ab68:	718a      	strb	r2, [r1, #6]
1005ab6a:	788a      	ldrb	r2, [r1, #2]
1005ab6c:	23f9      	movs	r3, #249	@ 0xf9
1005ab6e:	4013      	ands	r3, r2
1005ab70:	708b      	strb	r3, [r1, #2]
1005ab72:	5b00      	ldrh	r0, [r0, r4]
1005ab74:	21ff      	movs	r1, #255	@ 0xff
1005ab76:	f7ff fd17 	bl	1005a5a8 <L2C_cos_channel_descriptors_reset_pending>
1005ab7a:	bd70      	pop	{r4, r5, r6, pc}

1005ab7c <__arm_cp.8_0>:
1005ab7c:	20002950 	.word	0x20002950

1005ab80 <__arm_cp.8_1>:
1005ab80:	20002958 	.word	0x20002958

1005ab84 <__arm_cp.8_2>:
1005ab84:	20002908 	.word	0x20002908

1005ab88 <__arm_cp.8_3>:
1005ab88:	10064c15 	.word	0x10064c15

1005ab8c <l2c_sap_hci_le_connection_complete_evt_hndl>:
1005ab8c:	b5b0      	push	{r4, r5, r7, lr}
1005ab8e:	460c      	mov	r4, r1
1005ab90:	4605      	mov	r5, r0
1005ab92:	2000      	movs	r0, #0
1005ab94:	f7ff fbf0 	bl	1005a378 <l2c_get_link_control_block_ref>
1005ab98:	2800      	cmp	r0, #0
1005ab9a:	d005      	beq.n	1005aba8 <l2c_sap_hci_le_connection_complete_evt_hndl+0x1c>
1005ab9c:	2101      	movs	r1, #1
1005ab9e:	8081      	strh	r1, [r0, #4]
1005aba0:	8005      	strh	r5, [r0, #0]
1005aba2:	4261      	negs	r1, r4
1005aba4:	4161      	adcs	r1, r4
1005aba6:	7081      	strb	r1, [r0, #2]
1005aba8:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005abac <l2c_sap_hci_disconnection_complete_evt_hndl>:
1005abac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005abae:	4604      	mov	r4, r0
1005abb0:	f7ff fbfe 	bl	1005a3b0 <l2c_get_link_control_block_index>
1005abb4:	4605      	mov	r5, r0
1005abb6:	4810      	ldr	r0, [pc, #64]	@ (1005abf8 <__arm_cp.1_0>)
1005abb8:	7ac0      	ldrb	r0, [r0, #11]
1005abba:	4285      	cmp	r5, r0
1005abbc:	d21b      	bcs.n	1005abf6 <l2c_sap_hci_disconnection_complete_evt_hndl+0x4a>
1005abbe:	4e0f      	ldr	r6, [pc, #60]	@ (1005abfc <__arm_cp.1_1>)
1005abc0:	6830      	ldr	r0, [r6, #0]
1005abc2:	4629      	mov	r1, r5
1005abc4:	f008 fcbf 	bl	10063546 <CST_stop>
1005abc8:	2714      	movs	r7, #20
1005abca:	436f      	muls	r7, r5
1005abcc:	6830      	ldr	r0, [r6, #0]
1005abce:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
1005abd0:	2500      	movs	r5, #0
1005abd2:	53c5      	strh	r5, [r0, r7]
1005abd4:	19c0      	adds	r0, r0, r7
1005abd6:	6900      	ldr	r0, [r0, #16]
1005abd8:	2800      	cmp	r0, #0
1005abda:	d009      	beq.n	1005abf0 <l2c_sap_hci_disconnection_complete_evt_hndl+0x44>
1005abdc:	f7fa ff42 	bl	10055a64 <ACL_pkt_release>
1005abe0:	6830      	ldr	r0, [r6, #0]
1005abe2:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
1005abe4:	19c0      	adds	r0, r0, r7
1005abe6:	6105      	str	r5, [r0, #16]
1005abe8:	6830      	ldr	r0, [r6, #0]
1005abea:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
1005abec:	19c0      	adds	r0, r0, r7
1005abee:	8185      	strh	r5, [r0, #12]
1005abf0:	4620      	mov	r0, r4
1005abf2:	f7ff fd0c 	bl	1005a60e <L2C_cos_physical_link_disconnection_hndl_ucfg_weak>
1005abf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005abf8 <__arm_cp.1_0>:
1005abf8:	2000296c 	.word	0x2000296c

1005abfc <__arm_cp.1_1>:
1005abfc:	20002950 	.word	0x20002950

1005ac00 <llc_cig_cmn_start_cis_ucfg_weak>:
1005ac00:	4770      	bx	lr

1005ac02 <llc_cig_cmn_terminate_cises_on_acl_ucfg_weak>:
1005ac02:	4770      	bx	lr

1005ac04 <llc_conn_get_cntxt_p>:
1005ac04:	4803      	ldr	r0, [pc, #12]	@ (1005ac14 <__arm_cp.0_0>)
1005ac06:	6800      	ldr	r0, [r0, #0]
1005ac08:	219c      	movs	r1, #156	@ 0x9c
1005ac0a:	5840      	ldr	r0, [r0, r1]
1005ac0c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005ac0e:	6800      	ldr	r0, [r0, #0]
1005ac10:	4770      	bx	lr
1005ac12:	46c0      	nop			@ (mov r8, r8)

1005ac14 <__arm_cp.0_0>:
1005ac14:	20002958 	.word	0x20002958

1005ac18 <llc_conn_get_cntxt_per_p>:
1005ac18:	214d      	movs	r1, #77	@ 0x4d
1005ac1a:	0089      	lsls	r1, r1, #2
1005ac1c:	4341      	muls	r1, r0
1005ac1e:	4804      	ldr	r0, [pc, #16]	@ (1005ac30 <__arm_cp.1_0>)
1005ac20:	6800      	ldr	r0, [r0, #0]
1005ac22:	229c      	movs	r2, #156	@ 0x9c
1005ac24:	5880      	ldr	r0, [r0, r2]
1005ac26:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005ac28:	6840      	ldr	r0, [r0, #4]
1005ac2a:	1840      	adds	r0, r0, r1
1005ac2c:	4770      	bx	lr
1005ac2e:	46c0      	nop			@ (mov r8, r8)

1005ac30 <__arm_cp.1_0>:
1005ac30:	20002958 	.word	0x20002958

1005ac34 <llc_conn_get_cntxt_per_p_from_handle>:
1005ac34:	b510      	push	{r4, lr}
1005ac36:	4601      	mov	r1, r0
1005ac38:	2000      	movs	r0, #0
1005ac3a:	4a0d      	ldr	r2, [pc, #52]	@ (1005ac70 <__arm_cp.2_0>)
1005ac3c:	4291      	cmp	r1, r2
1005ac3e:	d015      	beq.n	1005ac6c <llc_conn_get_cntxt_per_p_from_handle+0x38>
1005ac40:	4a0c      	ldr	r2, [pc, #48]	@ (1005ac74 <__arm_cp.2_1>)
1005ac42:	6812      	ldr	r2, [r2, #0]
1005ac44:	2334      	movs	r3, #52	@ 0x34
1005ac46:	5cd2      	ldrb	r2, [r2, r3]
1005ac48:	1c52      	adds	r2, r2, #1
1005ac4a:	4b0b      	ldr	r3, [pc, #44]	@ (1005ac78 <__arm_cp.2_2>)
1005ac4c:	681b      	ldr	r3, [r3, #0]
1005ac4e:	249c      	movs	r4, #156	@ 0x9c
1005ac50:	591b      	ldr	r3, [r3, r4]
1005ac52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1005ac54:	685b      	ldr	r3, [r3, #4]
1005ac56:	1e52      	subs	r2, r2, #1
1005ac58:	d008      	beq.n	1005ac6c <llc_conn_get_cntxt_per_p_from_handle+0x38>
1005ac5a:	244d      	movs	r4, #77	@ 0x4d
1005ac5c:	00a4      	lsls	r4, r4, #2
1005ac5e:	191c      	adds	r4, r3, r4
1005ac60:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
1005ac62:	428b      	cmp	r3, r1
1005ac64:	4623      	mov	r3, r4
1005ac66:	d1f6      	bne.n	1005ac56 <llc_conn_get_cntxt_per_p_from_handle+0x22>
1005ac68:	4804      	ldr	r0, [pc, #16]	@ (1005ac7c <__arm_cp.2_3>)
1005ac6a:	1820      	adds	r0, r4, r0
1005ac6c:	bd10      	pop	{r4, pc}
1005ac6e:	46c0      	nop			@ (mov r8, r8)

1005ac70 <__arm_cp.2_0>:
1005ac70:	0000ffff 	.word	0x0000ffff

1005ac74 <__arm_cp.2_1>:
1005ac74:	20002904 	.word	0x20002904

1005ac78 <__arm_cp.2_2>:
1005ac78:	20002958 	.word	0x20002958

1005ac7c <__arm_cp.2_3>:
1005ac7c:	fffffecc 	.word	0xfffffecc

1005ac80 <llc_conn_get_phy_upd_cntxt_per_p>:
1005ac80:	b510      	push	{r4, lr}
1005ac82:	4604      	mov	r4, r0
1005ac84:	f7f4 fdec 	bl	1004f860 <phy_upd_csr_ucfg>
1005ac88:	2801      	cmp	r0, #1
1005ac8a:	d109      	bne.n	1005aca0 <llc_conn_get_phy_upd_cntxt_per_p+0x20>
1005ac8c:	200e      	movs	r0, #14
1005ac8e:	4360      	muls	r0, r4
1005ac90:	4904      	ldr	r1, [pc, #16]	@ (1005aca4 <__arm_cp.7_0>)
1005ac92:	6809      	ldr	r1, [r1, #0]
1005ac94:	229c      	movs	r2, #156	@ 0x9c
1005ac96:	5889      	ldr	r1, [r1, r2]
1005ac98:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005ac9a:	6949      	ldr	r1, [r1, #20]
1005ac9c:	1808      	adds	r0, r1, r0
1005ac9e:	bd10      	pop	{r4, pc}
1005aca0:	2000      	movs	r0, #0
1005aca2:	bd10      	pop	{r4, pc}

1005aca4 <__arm_cp.7_0>:
1005aca4:	20002958 	.word	0x20002958

1005aca8 <llc_conn_init>:
1005aca8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005acaa:	4c3e      	ldr	r4, [pc, #248]	@ (1005ada4 <__arm_cp.8_0>)
1005acac:	6820      	ldr	r0, [r4, #0]
1005acae:	259c      	movs	r5, #156	@ 0x9c
1005acb0:	5940      	ldr	r0, [r0, r5]
1005acb2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005acb4:	6803      	ldr	r3, [r0, #0]
1005acb6:	2136      	movs	r1, #54	@ 0x36
1005acb8:	2600      	movs	r6, #0
1005acba:	545e      	strb	r6, [r3, r1]
1005acbc:	493a      	ldr	r1, [pc, #232]	@ (1005ada8 <__arm_cp.8_1>)
1005acbe:	6949      	ldr	r1, [r1, #20]
1005acc0:	0c0a      	lsrs	r2, r1, #16
1005acc2:	2a19      	cmp	r2, #25
1005acc4:	d301      	bcc.n	1005acca <llc_conn_init+0x22>
1005acc6:	2119      	movs	r1, #25
1005acc8:	0409      	lsls	r1, r1, #16
1005acca:	6059      	str	r1, [r3, #4]
1005accc:	6019      	str	r1, [r3, #0]
1005acce:	6900      	ldr	r0, [r0, #16]
1005acd0:	9302      	str	r3, [sp, #8]
1005acd2:	6098      	str	r0, [r3, #8]
1005acd4:	f000 fad0 	bl	1005b278 <llc_conn_list_reset>
1005acd8:	6820      	ldr	r0, [r4, #0]
1005acda:	5940      	ldr	r0, [r0, r5]
1005acdc:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005acde:	6807      	ldr	r7, [r0, #0]
1005ace0:	f7ff fac4 	bl	1005a26c <data_length_extension_csr_ucfg_weak>
1005ace4:	2801      	cmp	r0, #1
1005ace6:	d001      	beq.n	1005acec <llc_conn_init+0x44>
1005ace8:	201b      	movs	r0, #27
1005acea:	e000      	b.n	1005acee <llc_conn_init+0x46>
1005acec:	20fb      	movs	r0, #251	@ 0xfb
1005acee:	82b8      	strh	r0, [r7, #20]
1005acf0:	f7ff fabc 	bl	1005a26c <data_length_extension_csr_ucfg_weak>
1005acf4:	4604      	mov	r4, r0
1005acf6:	2029      	movs	r0, #41	@ 0x29
1005acf8:	00c0      	lsls	r0, r0, #3
1005acfa:	9000      	str	r0, [sp, #0]
1005acfc:	20a9      	movs	r0, #169	@ 0xa9
1005acfe:	0105      	lsls	r5, r0, #4
1005ad00:	f7f4 fdae 	bl	1004f860 <phy_upd_csr_ucfg>
1005ad04:	2c01      	cmp	r4, #1
1005ad06:	9501      	str	r5, [sp, #4]
1005ad08:	d107      	bne.n	1005ad1a <llc_conn_init+0x72>
1005ad0a:	2801      	cmp	r0, #1
1005ad0c:	4d27      	ldr	r5, [pc, #156]	@ (1005adac <__arm_cp.8_2>)
1005ad0e:	9c00      	ldr	r4, [sp, #0]
1005ad10:	d00c      	beq.n	1005ad2c <llc_conn_init+0x84>
1005ad12:	4d27      	ldr	r5, [pc, #156]	@ (1005adb0 <__arm_cp.8_3>)
1005ad14:	f7ff fa4e 	bl	1005a1b4 <cte_csr_ucfg_weak>
1005ad18:	e005      	b.n	1005ad26 <llc_conn_init+0x7e>
1005ad1a:	2801      	cmp	r0, #1
1005ad1c:	9c00      	ldr	r4, [sp, #0]
1005ad1e:	d005      	beq.n	1005ad2c <llc_conn_init+0x84>
1005ad20:	f7ff fa48 	bl	1005a1b4 <cte_csr_ucfg_weak>
1005ad24:	4625      	mov	r5, r4
1005ad26:	2801      	cmp	r0, #1
1005ad28:	d100      	bne.n	1005ad2c <llc_conn_init+0x84>
1005ad2a:	3508      	adds	r5, #8
1005ad2c:	82fd      	strh	r5, [r7, #22]
1005ad2e:	f7ff fa9d 	bl	1005a26c <data_length_extension_csr_ucfg_weak>
1005ad32:	2801      	cmp	r0, #1
1005ad34:	d001      	beq.n	1005ad3a <llc_conn_init+0x92>
1005ad36:	201b      	movs	r0, #27
1005ad38:	e000      	b.n	1005ad3c <llc_conn_init+0x94>
1005ad3a:	20fb      	movs	r0, #251	@ 0xfb
1005ad3c:	8338      	strh	r0, [r7, #24]
1005ad3e:	f7ff fa95 	bl	1005a26c <data_length_extension_csr_ucfg_weak>
1005ad42:	4605      	mov	r5, r0
1005ad44:	f7f4 fd8c 	bl	1004f860 <phy_upd_csr_ucfg>
1005ad48:	2d01      	cmp	r5, #1
1005ad4a:	d107      	bne.n	1005ad5c <llc_conn_init+0xb4>
1005ad4c:	2801      	cmp	r0, #1
1005ad4e:	9d01      	ldr	r5, [sp, #4]
1005ad50:	4916      	ldr	r1, [pc, #88]	@ (1005adac <__arm_cp.8_2>)
1005ad52:	d00d      	beq.n	1005ad70 <llc_conn_init+0xc8>
1005ad54:	f7ff fa2e 	bl	1005a1b4 <cte_csr_ucfg_weak>
1005ad58:	4915      	ldr	r1, [pc, #84]	@ (1005adb0 <__arm_cp.8_3>)
1005ad5a:	e006      	b.n	1005ad6a <llc_conn_init+0xc2>
1005ad5c:	2801      	cmp	r0, #1
1005ad5e:	9d01      	ldr	r5, [sp, #4]
1005ad60:	4629      	mov	r1, r5
1005ad62:	d005      	beq.n	1005ad70 <llc_conn_init+0xc8>
1005ad64:	f7ff fa26 	bl	1005a1b4 <cte_csr_ucfg_weak>
1005ad68:	4621      	mov	r1, r4
1005ad6a:	2801      	cmp	r0, #1
1005ad6c:	d100      	bne.n	1005ad70 <llc_conn_init+0xc8>
1005ad6e:	3108      	adds	r1, #8
1005ad70:	83fc      	strh	r4, [r7, #30]
1005ad72:	201b      	movs	r0, #27
1005ad74:	83b8      	strh	r0, [r7, #28]
1005ad76:	827d      	strh	r5, [r7, #18]
1005ad78:	823c      	strh	r4, [r7, #16]
1005ad7a:	81fc      	strh	r4, [r7, #14]
1005ad7c:	81b8      	strh	r0, [r7, #12]
1005ad7e:	8379      	strh	r1, [r7, #26]
1005ad80:	f7f4 fead 	bl	1004fade <LL_phy_update_init_ucfg>
1005ad84:	9802      	ldr	r0, [sp, #8]
1005ad86:	f001 fd33 	bl	1005c7f0 <llc_subrate_init_acceptable>
1005ad8a:	4c0a      	ldr	r4, [pc, #40]	@ (1005adb4 <__arm_cp.8_4>)
1005ad8c:	6820      	ldr	r0, [r4, #0]
1005ad8e:	2134      	movs	r1, #52	@ 0x34
1005ad90:	5c41      	ldrb	r1, [r0, r1]
1005ad92:	b2f0      	uxtb	r0, r6
1005ad94:	4288      	cmp	r0, r1
1005ad96:	d203      	bcs.n	1005ada0 <llc_conn_init+0xf8>
1005ad98:	f000 f80e 	bl	1005adb8 <llc_conn_per_init>
1005ad9c:	1c76      	adds	r6, r6, #1
1005ad9e:	e7f5      	b.n	1005ad8c <llc_conn_init+0xe4>
1005ada0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005ada2:	46c0      	nop			@ (mov r8, r8)

1005ada4 <__arm_cp.8_0>:
1005ada4:	20002958 	.word	0x20002958

1005ada8 <__arm_cp.8_1>:
1005ada8:	2000296c 	.word	0x2000296c

1005adac <__arm_cp.8_2>:
1005adac:	00004290 	.word	0x00004290

1005adb0 <__arm_cp.8_3>:
1005adb0:	00000848 	.word	0x00000848

1005adb4 <__arm_cp.8_4>:
1005adb4:	20002904 	.word	0x20002904

1005adb8 <llc_conn_per_init>:
1005adb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005adba:	4605      	mov	r5, r0
1005adbc:	204d      	movs	r0, #77	@ 0x4d
1005adbe:	0080      	lsls	r0, r0, #2
1005adc0:	4368      	muls	r0, r5
1005adc2:	492d      	ldr	r1, [pc, #180]	@ (1005ae78 <__arm_cp.9_0>)
1005adc4:	6809      	ldr	r1, [r1, #0]
1005adc6:	279c      	movs	r7, #156	@ 0x9c
1005adc8:	59c9      	ldr	r1, [r1, r7]
1005adca:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005adcc:	6849      	ldr	r1, [r1, #4]
1005adce:	180c      	adds	r4, r1, r0
1005add0:	f001 fc9a 	bl	1005c708 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005add4:	4606      	mov	r6, r0
1005add6:	f001 fc8d 	bl	1005c6f4 <cis_csr_ucfg_weak>
1005adda:	4330      	orrs	r0, r6
1005addc:	b2c0      	uxtb	r0, r0
1005adde:	f006 f8a3 	bl	10060f28 <LL_get_control_pdu_size>
1005ade2:	2200      	movs	r2, #0
1005ade4:	51e2      	str	r2, [r4, r7]
1005ade6:	212e      	movs	r1, #46	@ 0x2e
1005ade8:	231f      	movs	r3, #31
1005adea:	5463      	strb	r3, [r4, r1]
1005adec:	85a2      	strh	r2, [r4, #44]	@ 0x2c
1005adee:	0880      	lsrs	r0, r0, #2
1005adf0:	4368      	muls	r0, r5
1005adf2:	0080      	lsls	r0, r0, #2
1005adf4:	4920      	ldr	r1, [pc, #128]	@ (1005ae78 <__arm_cp.9_0>)
1005adf6:	6809      	ldr	r1, [r1, #0]
1005adf8:	460b      	mov	r3, r1
1005adfa:	3394      	adds	r3, #148	@ 0x94
1005adfc:	685b      	ldr	r3, [r3, #4]
1005adfe:	181b      	adds	r3, r3, r0
1005ae00:	2690      	movs	r6, #144	@ 0x90
1005ae02:	51a3      	str	r3, [r4, r6]
1005ae04:	238c      	movs	r3, #140	@ 0x8c
1005ae06:	50e2      	str	r2, [r4, r3]
1005ae08:	2388      	movs	r3, #136	@ 0x88
1005ae0a:	50e2      	str	r2, [r4, r3]
1005ae0c:	2330      	movs	r3, #48	@ 0x30
1005ae0e:	54e5      	strb	r5, [r4, r3]
1005ae10:	239a      	movs	r3, #154	@ 0x9a
1005ae12:	52e2      	strh	r2, [r4, r3]
1005ae14:	23ff      	movs	r3, #255	@ 0xff
1005ae16:	461d      	mov	r5, r3
1005ae18:	3508      	adds	r5, #8
1005ae1a:	5562      	strb	r2, [r4, r5]
1005ae1c:	2241      	movs	r2, #65	@ 0x41
1005ae1e:	54a3      	strb	r3, [r4, r2]
1005ae20:	222f      	movs	r2, #47	@ 0x2f
1005ae22:	2307      	movs	r3, #7
1005ae24:	54a3      	strb	r3, [r4, r2]
1005ae26:	227d      	movs	r2, #125	@ 0x7d
1005ae28:	0452      	lsls	r2, r2, #17
1005ae2a:	66e2      	str	r2, [r4, #108]	@ 0x6c
1005ae2c:	6722      	str	r2, [r4, #112]	@ 0x70
1005ae2e:	2201      	movs	r2, #1
1005ae30:	8522      	strh	r2, [r4, #40]	@ 0x28
1005ae32:	4a12      	ldr	r2, [pc, #72]	@ (1005ae7c <__arm_cp.9_1>)
1005ae34:	8762      	strh	r2, [r4, #58]	@ 0x3a
1005ae36:	2219      	movs	r2, #25
1005ae38:	0412      	lsls	r2, r2, #16
1005ae3a:	65a2      	str	r2, [r4, #88]	@ 0x58
1005ae3c:	65e2      	str	r2, [r4, #92]	@ 0x5c
1005ae3e:	6622      	str	r2, [r4, #96]	@ 0x60
1005ae40:	4622      	mov	r2, r4
1005ae42:	32b4      	adds	r2, #180	@ 0xb4
1005ae44:	2394      	movs	r3, #148	@ 0x94
1005ae46:	58c9      	ldr	r1, [r1, r3]
1005ae48:	231b      	movs	r3, #27
1005ae4a:	8053      	strh	r3, [r2, #2]
1005ae4c:	1808      	adds	r0, r1, r0
1005ae4e:	4621      	mov	r1, r4
1005ae50:	3190      	adds	r1, #144	@ 0x90
1005ae52:	6048      	str	r0, [r1, #4]
1005ae54:	20b4      	movs	r0, #180	@ 0xb4
1005ae56:	5223      	strh	r3, [r4, r0]
1005ae58:	4809      	ldr	r0, [pc, #36]	@ (1005ae80 <__arm_cp.9_2>)
1005ae5a:	490a      	ldr	r1, [pc, #40]	@ (1005ae84 <__arm_cp.9_3>)
1005ae5c:	6050      	str	r0, [r2, #4]
1005ae5e:	6091      	str	r1, [r2, #8]
1005ae60:	2029      	movs	r0, #41	@ 0x29
1005ae62:	00c0      	lsls	r0, r0, #3
1005ae64:	8190      	strh	r0, [r2, #12]
1005ae66:	4620      	mov	r0, r4
1005ae68:	f001 fcd7 	bl	1005c81a <llc_subrate_reset_params>
1005ae6c:	3480      	adds	r4, #128	@ 0x80
1005ae6e:	4620      	mov	r0, r4
1005ae70:	f008 fce8 	bl	10063844 <ACL_list_init>
1005ae74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005ae76:	46c0      	nop			@ (mov r8, r8)

1005ae78 <__arm_cp.9_0>:
1005ae78:	20002958 	.word	0x20002958

1005ae7c <__arm_cp.9_1>:
1005ae7c:	0000ffff 	.word	0x0000ffff

1005ae80 <__arm_cp.9_2>:
1005ae80:	0148001b 	.word	0x0148001b

1005ae84 <__arm_cp.9_3>:
1005ae84:	001b0148 	.word	0x001b0148

1005ae88 <llc_conn_mem_allocate>:
1005ae88:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ae8a:	b085      	sub	sp, #20
1005ae8c:	2b01      	cmp	r3, #1
1005ae8e:	d000      	beq.n	1005ae92 <llc_conn_mem_allocate+0xa>
1005ae90:	e082      	b.n	1005af98 <llc_conn_mem_allocate+0x110>
1005ae92:	ab02      	add	r3, sp, #8
1005ae94:	c307      	stmia	r3!, {r0, r1, r2}
1005ae96:	4841      	ldr	r0, [pc, #260]	@ (1005af9c <__arm_cp.10_0>)
1005ae98:	7fc1      	ldrb	r1, [r0, #31]
1005ae9a:	9101      	str	r1, [sp, #4]
1005ae9c:	7ac4      	ldrb	r4, [r0, #11]
1005ae9e:	9400      	str	r4, [sp, #0]
1005aea0:	2601      	movs	r6, #1
1005aea2:	2124      	movs	r1, #36	@ 0x24
1005aea4:	4a3e      	ldr	r2, [pc, #248]	@ (1005afa0 <__arm_cp.10_1>)
1005aea6:	4630      	mov	r0, r6
1005aea8:	4790      	blx	r2
1005aeaa:	493e      	ldr	r1, [pc, #248]	@ (1005afa4 <__arm_cp.10_2>)
1005aeac:	6809      	ldr	r1, [r1, #0]
1005aeae:	279c      	movs	r7, #156	@ 0x9c
1005aeb0:	59c9      	ldr	r1, [r1, r7]
1005aeb2:	63c8      	str	r0, [r1, #60]	@ 0x3c
1005aeb4:	2538      	movs	r5, #56	@ 0x38
1005aeb6:	4630      	mov	r0, r6
1005aeb8:	4629      	mov	r1, r5
1005aeba:	4a39      	ldr	r2, [pc, #228]	@ (1005afa0 <__arm_cp.10_1>)
1005aebc:	4790      	blx	r2
1005aebe:	4939      	ldr	r1, [pc, #228]	@ (1005afa4 <__arm_cp.10_2>)
1005aec0:	6809      	ldr	r1, [r1, #0]
1005aec2:	59c9      	ldr	r1, [r1, r7]
1005aec4:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005aec6:	6008      	str	r0, [r1, #0]
1005aec8:	204d      	movs	r0, #77	@ 0x4d
1005aeca:	0081      	lsls	r1, r0, #2
1005aecc:	4620      	mov	r0, r4
1005aece:	4c34      	ldr	r4, [pc, #208]	@ (1005afa0 <__arm_cp.10_1>)
1005aed0:	47a0      	blx	r4
1005aed2:	4934      	ldr	r1, [pc, #208]	@ (1005afa4 <__arm_cp.10_2>)
1005aed4:	6809      	ldr	r1, [r1, #0]
1005aed6:	59c9      	ldr	r1, [r1, r7]
1005aed8:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005aeda:	6048      	str	r0, [r1, #4]
1005aedc:	9801      	ldr	r0, [sp, #4]
1005aede:	4086      	lsls	r6, r0
1005aee0:	b2f0      	uxtb	r0, r6
1005aee2:	2108      	movs	r1, #8
1005aee4:	47a0      	blx	r4
1005aee6:	492f      	ldr	r1, [pc, #188]	@ (1005afa4 <__arm_cp.10_2>)
1005aee8:	6809      	ldr	r1, [r1, #0]
1005aeea:	59c9      	ldr	r1, [r1, r7]
1005aeec:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005aeee:	6809      	ldr	r1, [r1, #0]
1005aef0:	2228      	movs	r2, #40	@ 0x28
1005aef2:	2300      	movs	r3, #0
1005aef4:	548b      	strb	r3, [r1, r2]
1005aef6:	6248      	str	r0, [r1, #36]	@ 0x24
1005aef8:	3128      	adds	r1, #40	@ 0x28
1005aefa:	704e      	strb	r6, [r1, #1]
1005aefc:	9c00      	ldr	r4, [sp, #0]
1005aefe:	2013      	movs	r0, #19
1005af00:	2104      	movs	r1, #4
1005af02:	4e27      	ldr	r6, [pc, #156]	@ (1005afa0 <__arm_cp.10_1>)
1005af04:	47b0      	blx	r6
1005af06:	4927      	ldr	r1, [pc, #156]	@ (1005afa4 <__arm_cp.10_2>)
1005af08:	6809      	ldr	r1, [r1, #0]
1005af0a:	59c9      	ldr	r1, [r1, r7]
1005af0c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005af0e:	6108      	str	r0, [r1, #16]
1005af10:	4620      	mov	r0, r4
1005af12:	4629      	mov	r1, r5
1005af14:	47b0      	blx	r6
1005af16:	4633      	mov	r3, r6
1005af18:	4a22      	ldr	r2, [pc, #136]	@ (1005afa4 <__arm_cp.10_2>)
1005af1a:	6811      	ldr	r1, [r2, #0]
1005af1c:	59c9      	ldr	r1, [r1, r7]
1005af1e:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005af20:	6088      	str	r0, [r1, #8]
1005af22:	4626      	mov	r6, r4
1005af24:	4620      	mov	r0, r4
1005af26:	4629      	mov	r1, r5
1005af28:	4615      	mov	r5, r2
1005af2a:	4798      	blx	r3
1005af2c:	6829      	ldr	r1, [r5, #0]
1005af2e:	59c9      	ldr	r1, [r1, r7]
1005af30:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005af32:	60c8      	str	r0, [r1, #12]
1005af34:	9802      	ldr	r0, [sp, #8]
1005af36:	2801      	cmp	r0, #1
1005af38:	d107      	bne.n	1005af4a <llc_conn_mem_allocate+0xc2>
1005af3a:	210e      	movs	r1, #14
1005af3c:	4630      	mov	r0, r6
1005af3e:	f006 fcb9 	bl	100618b4 <csmem_mem_0_assign>
1005af42:	6829      	ldr	r1, [r5, #0]
1005af44:	59c9      	ldr	r1, [r1, r7]
1005af46:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005af48:	6148      	str	r0, [r1, #20]
1005af4a:	9803      	ldr	r0, [sp, #12]
1005af4c:	2801      	cmp	r0, #1
1005af4e:	d107      	bne.n	1005af60 <llc_conn_mem_allocate+0xd8>
1005af50:	2108      	movs	r1, #8
1005af52:	4630      	mov	r0, r6
1005af54:	f006 fcae 	bl	100618b4 <csmem_mem_0_assign>
1005af58:	6829      	ldr	r1, [r5, #0]
1005af5a:	59c9      	ldr	r1, [r1, r7]
1005af5c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005af5e:	6188      	str	r0, [r1, #24]
1005af60:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1005af62:	9804      	ldr	r0, [sp, #16]
1005af64:	2801      	cmp	r0, #1
1005af66:	d10d      	bne.n	1005af84 <llc_conn_mem_allocate+0xfc>
1005af68:	2120      	movs	r1, #32
1005af6a:	4630      	mov	r0, r6
1005af6c:	f006 fca2 	bl	100618b4 <csmem_mem_0_assign>
1005af70:	6829      	ldr	r1, [r5, #0]
1005af72:	59c9      	ldr	r1, [r1, r7]
1005af74:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005af76:	61c8      	str	r0, [r1, #28]
1005af78:	2001      	movs	r0, #1
1005af7a:	2111      	movs	r1, #17
1005af7c:	f006 fc9a 	bl	100618b4 <csmem_mem_0_assign>
1005af80:	6829      	ldr	r1, [r5, #0]
1005af82:	6648      	str	r0, [r1, #100]	@ 0x64
1005af84:	2c01      	cmp	r4, #1
1005af86:	d107      	bne.n	1005af98 <llc_conn_mem_allocate+0x110>
1005af88:	211c      	movs	r1, #28
1005af8a:	4630      	mov	r0, r6
1005af8c:	f006 fc92 	bl	100618b4 <csmem_mem_0_assign>
1005af90:	6829      	ldr	r1, [r5, #0]
1005af92:	59c9      	ldr	r1, [r1, r7]
1005af94:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005af96:	6208      	str	r0, [r1, #32]
1005af98:	b005      	add	sp, #20
1005af9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005af9c <__arm_cp.10_0>:
1005af9c:	2000296c 	.word	0x2000296c

1005afa0 <__arm_cp.10_1>:
1005afa0:	100618b5 	.word	0x100618b5

1005afa4 <__arm_cp.10_2>:
1005afa4:	20002958 	.word	0x20002958

1005afa8 <llc_conn_clr_instant_reached_passed>:
1005afa8:	219a      	movs	r1, #154	@ 0x9a
1005afaa:	5a42      	ldrh	r2, [r0, r1]
1005afac:	2304      	movs	r3, #4
1005afae:	439a      	bics	r2, r3
1005afb0:	5242      	strh	r2, [r0, r1]
1005afb2:	5a42      	ldrh	r2, [r0, r1]
1005afb4:	2302      	movs	r3, #2
1005afb6:	439a      	bics	r2, r3
1005afb8:	5242      	strh	r2, [r0, r1]
1005afba:	4770      	bx	lr

1005afbc <llc_conn_clr_rx_acl_blocked>:
1005afbc:	2194      	movs	r1, #148	@ 0x94
1005afbe:	5840      	ldr	r0, [r0, r1]
1005afc0:	8801      	ldrh	r1, [r0, #0]
1005afc2:	4a02      	ldr	r2, [pc, #8]	@ (1005afcc <__arm_cp.5_0>)
1005afc4:	400a      	ands	r2, r1
1005afc6:	8002      	strh	r2, [r0, #0]
1005afc8:	4770      	bx	lr
1005afca:	46c0      	nop			@ (mov r8, r8)

1005afcc <__arm_cp.5_0>:
1005afcc:	0000feff 	.word	0x0000feff

1005afd0 <llc_conn_clr_rx_ctrl_pdu_full>:
1005afd0:	2190      	movs	r1, #144	@ 0x90
1005afd2:	5840      	ldr	r0, [r0, r1]
1005afd4:	8801      	ldrh	r1, [r0, #0]
1005afd6:	2201      	movs	r2, #1
1005afd8:	4391      	bics	r1, r2
1005afda:	8001      	strh	r1, [r0, #0]
1005afdc:	4770      	bx	lr

1005afde <llc_conn_clr_tx_acl_blocked>:
1005afde:	2194      	movs	r1, #148	@ 0x94
1005afe0:	5840      	ldr	r0, [r0, r1]
1005afe2:	8801      	ldrh	r1, [r0, #0]
1005afe4:	2280      	movs	r2, #128	@ 0x80
1005afe6:	4391      	bics	r1, r2
1005afe8:	8001      	strh	r1, [r0, #0]
1005afea:	4770      	bx	lr

1005afec <llc_conn_copy_tx_data_packet>:
1005afec:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005afee:	460c      	mov	r4, r1
1005aff0:	2188      	movs	r1, #136	@ 0x88
1005aff2:	5c41      	ldrb	r1, [r0, r1]
1005aff4:	0649      	lsls	r1, r1, #25
1005aff6:	d40c      	bmi.n	1005b012 <llc_conn_copy_tx_data_packet+0x26>
1005aff8:	3088      	adds	r0, #136	@ 0x88
1005affa:	8a21      	ldrh	r1, [r4, #16]
1005affc:	8862      	ldrh	r2, [r4, #2]
1005affe:	1a52      	subs	r2, r2, r1
1005b000:	b293      	uxth	r3, r2
1005b002:	8dc5      	ldrh	r5, [r0, #46]	@ 0x2e
1005b004:	42ab      	cmp	r3, r5
1005b006:	d909      	bls.n	1005b01c <llc_conn_copy_tx_data_packet+0x30>
1005b008:	7a20      	ldrb	r0, [r4, #8]
1005b00a:	22f7      	movs	r2, #247	@ 0xf7
1005b00c:	4002      	ands	r2, r0
1005b00e:	7222      	strb	r2, [r4, #8]
1005b010:	e001      	b.n	1005b016 <llc_conn_copy_tx_data_packet+0x2a>
1005b012:	8a21      	ldrh	r1, [r4, #16]
1005b014:	7b25      	ldrb	r5, [r4, #12]
1005b016:	2010      	movs	r0, #16
1005b018:	9001      	str	r0, [sp, #4]
1005b01a:	e005      	b.n	1005b028 <llc_conn_copy_tx_data_packet+0x3c>
1005b01c:	69e0      	ldr	r0, [r4, #28]
1005b01e:	1e43      	subs	r3, r0, #1
1005b020:	4198      	sbcs	r0, r3
1005b022:	0100      	lsls	r0, r0, #4
1005b024:	9001      	str	r0, [sp, #4]
1005b026:	4615      	mov	r5, r2
1005b028:	2900      	cmp	r1, #0
1005b02a:	d102      	bne.n	1005b032 <llc_conn_copy_tx_data_packet+0x46>
1005b02c:	7a20      	ldrb	r0, [r4, #8]
1005b02e:	0780      	lsls	r0, r0, #30
1005b030:	d401      	bmi.n	1005b036 <llc_conn_copy_tx_data_packet+0x4a>
1005b032:	2001      	movs	r0, #1
1005b034:	e000      	b.n	1005b038 <llc_conn_copy_tx_data_packet+0x4c>
1005b036:	2002      	movs	r0, #2
1005b038:	9002      	str	r0, [sp, #8]
1005b03a:	480e      	ldr	r0, [pc, #56]	@ (1005b074 <__arm_cp.8_0>)
1005b03c:	6800      	ldr	r0, [r0, #0]
1005b03e:	278c      	movs	r7, #140	@ 0x8c
1005b040:	59c0      	ldr	r0, [r0, r7]
1005b042:	1d00      	adds	r0, r0, #4
1005b044:	89e2      	ldrh	r2, [r4, #14]
1005b046:	1851      	adds	r1, r2, r1
1005b048:	261f      	movs	r6, #31
1005b04a:	400e      	ands	r6, r1
1005b04c:	19a9      	adds	r1, r5, r6
1005b04e:	b28a      	uxth	r2, r1
1005b050:	69a1      	ldr	r1, [r4, #24]
1005b052:	f006 fd90 	bl	10061b76 <Mem_Buff_block_copy>
1005b056:	6160      	str	r0, [r4, #20]
1005b058:	7325      	strb	r5, [r4, #12]
1005b05a:	4b06      	ldr	r3, [pc, #24]	@ (1005b074 <__arm_cp.8_0>)
1005b05c:	6818      	ldr	r0, [r3, #0]
1005b05e:	59c0      	ldr	r0, [r0, r7]
1005b060:	1830      	adds	r0, r6, r0
1005b062:	9901      	ldr	r1, [sp, #4]
1005b064:	9a02      	ldr	r2, [sp, #8]
1005b066:	4311      	orrs	r1, r2
1005b068:	7081      	strb	r1, [r0, #2]
1005b06a:	6818      	ldr	r0, [r3, #0]
1005b06c:	59c0      	ldr	r0, [r0, r7]
1005b06e:	1830      	adds	r0, r6, r0
1005b070:	70c5      	strb	r5, [r0, #3]
1005b072:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005b074 <__arm_cp.8_0>:
1005b074:	20002958 	.word	0x20002958

1005b078 <llc_conn_enhanced_get_latency>:
1005b078:	b570      	push	{r4, r5, r6, lr}
1005b07a:	4605      	mov	r5, r0
1005b07c:	202c      	movs	r0, #44	@ 0x2c
1005b07e:	5c28      	ldrb	r0, [r5, r0]
1005b080:	2401      	movs	r4, #1
1005b082:	2803      	cmp	r0, #3
1005b084:	d13f      	bne.n	1005b106 <llc_conn_enhanced_get_latency+0x8e>
1005b086:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
1005b088:	2800      	cmp	r0, #0
1005b08a:	d03c      	beq.n	1005b106 <llc_conn_enhanced_get_latency+0x8e>
1005b08c:	4628      	mov	r0, r5
1005b08e:	f7f9 fab6 	bl	100545fe <BLEPLAT_CNTR_PacketGetDataPtr>
1005b092:	4629      	mov	r1, r5
1005b094:	3128      	adds	r1, #40	@ 0x28
1005b096:	4288      	cmp	r0, r1
1005b098:	d135      	bne.n	1005b106 <llc_conn_enhanced_get_latency+0x8e>
1005b09a:	462e      	mov	r6, r5
1005b09c:	362c      	adds	r6, #44	@ 0x2c
1005b09e:	205c      	movs	r0, #92	@ 0x5c
1005b0a0:	5c30      	ldrb	r0, [r6, r0]
1005b0a2:	0600      	lsls	r0, r0, #24
1005b0a4:	0f80      	lsrs	r0, r0, #30
1005b0a6:	d12e      	bne.n	1005b106 <llc_conn_enhanced_get_latency+0x8e>
1005b0a8:	20ff      	movs	r0, #255	@ 0xff
1005b0aa:	3008      	adds	r0, #8
1005b0ac:	1828      	adds	r0, r5, r0
1005b0ae:	7800      	ldrb	r0, [r0, #0]
1005b0b0:	0780      	lsls	r0, r0, #30
1005b0b2:	d428      	bmi.n	1005b106 <llc_conn_enhanced_get_latency+0x8e>
1005b0b4:	208f      	movs	r0, #143	@ 0x8f
1005b0b6:	0040      	lsls	r0, r0, #1
1005b0b8:	1828      	adds	r0, r5, r0
1005b0ba:	8800      	ldrh	r0, [r0, #0]
1005b0bc:	2800      	cmp	r0, #0
1005b0be:	d122      	bne.n	1005b106 <llc_conn_enhanced_get_latency+0x8e>
1005b0c0:	7930      	ldrb	r0, [r6, #4]
1005b0c2:	2401      	movs	r4, #1
1005b0c4:	4621      	mov	r1, r4
1005b0c6:	f001 fbfc 	bl	1005c8c2 <LL_cpe_get_active_status>
1005b0ca:	2800      	cmp	r0, #0
1005b0cc:	d105      	bne.n	1005b0da <llc_conn_enhanced_get_latency+0x62>
1005b0ce:	7930      	ldrb	r0, [r6, #4]
1005b0d0:	2100      	movs	r1, #0
1005b0d2:	f001 fbf6 	bl	1005c8c2 <LL_cpe_get_active_status>
1005b0d6:	2800      	cmp	r0, #0
1005b0d8:	d013      	beq.n	1005b102 <llc_conn_enhanced_get_latency+0x8a>
1005b0da:	4628      	mov	r0, r5
1005b0dc:	3098      	adds	r0, #152	@ 0x98
1005b0de:	8841      	ldrh	r1, [r0, #2]
1005b0e0:	07c9      	lsls	r1, r1, #31
1005b0e2:	d010      	beq.n	1005b106 <llc_conn_enhanced_get_latency+0x8e>
1005b0e4:	8af1      	ldrh	r1, [r6, #22]
1005b0e6:	8800      	ldrh	r0, [r0, #0]
1005b0e8:	1a40      	subs	r0, r0, r1
1005b0ea:	b281      	uxth	r1, r0
1005b0ec:	2902      	cmp	r1, #2
1005b0ee:	d30a      	bcc.n	1005b106 <llc_conn_enhanced_get_latency+0x8e>
1005b0f0:	1e44      	subs	r4, r0, #1
1005b0f2:	b2a1      	uxth	r1, r4
1005b0f4:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
1005b0f6:	1c40      	adds	r0, r0, #1
1005b0f8:	b282      	uxth	r2, r0
1005b0fa:	4291      	cmp	r1, r2
1005b0fc:	d303      	bcc.n	1005b106 <llc_conn_enhanced_get_latency+0x8e>
1005b0fe:	4604      	mov	r4, r0
1005b100:	e001      	b.n	1005b106 <llc_conn_enhanced_get_latency+0x8e>
1005b102:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
1005b104:	1c44      	adds	r4, r0, #1
1005b106:	b2a0      	uxth	r0, r4
1005b108:	bd70      	pop	{r4, r5, r6, pc}
	...

1005b10c <llc_conn_get_conn_idx>:
1005b10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005b10e:	4604      	mov	r4, r0
1005b110:	25ff      	movs	r5, #255	@ 0xff
1005b112:	480a      	ldr	r0, [pc, #40]	@ (1005b13c <__arm_cp.13_0>)
1005b114:	4284      	cmp	r4, r0
1005b116:	d00f      	beq.n	1005b138 <llc_conn_get_conn_idx+0x2c>
1005b118:	2600      	movs	r6, #0
1005b11a:	4f09      	ldr	r7, [pc, #36]	@ (1005b140 <__arm_cp.13_1>)
1005b11c:	6838      	ldr	r0, [r7, #0]
1005b11e:	2134      	movs	r1, #52	@ 0x34
1005b120:	5c41      	ldrb	r1, [r0, r1]
1005b122:	b2f0      	uxtb	r0, r6
1005b124:	4288      	cmp	r0, r1
1005b126:	d207      	bcs.n	1005b138 <llc_conn_get_conn_idx+0x2c>
1005b128:	f7ff fd76 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005b12c:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
1005b12e:	42a0      	cmp	r0, r4
1005b130:	d001      	beq.n	1005b136 <llc_conn_get_conn_idx+0x2a>
1005b132:	1c76      	adds	r6, r6, #1
1005b134:	e7f2      	b.n	1005b11c <llc_conn_get_conn_idx+0x10>
1005b136:	4635      	mov	r5, r6
1005b138:	b2e8      	uxtb	r0, r5
1005b13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005b13c <__arm_cp.13_0>:
1005b13c:	0000ffff 	.word	0x0000ffff

1005b140 <__arm_cp.13_1>:
1005b140:	20002904 	.word	0x20002904

1005b144 <llc_conn_get_ctrl_pdu_data_p>:
1005b144:	0089      	lsls	r1, r1, #2
1005b146:	1840      	adds	r0, r0, r1
1005b148:	2190      	movs	r1, #144	@ 0x90
1005b14a:	5840      	ldr	r0, [r0, r1]
1005b14c:	1c80      	adds	r0, r0, #2
1005b14e:	4770      	bx	lr

1005b150 <llc_conn_get_enc_on>:
1005b150:	2900      	cmp	r1, #0
1005b152:	d001      	beq.n	1005b158 <llc_conn_get_enc_on+0x8>
1005b154:	2102      	movs	r1, #2
1005b156:	e000      	b.n	1005b15a <llc_conn_get_enc_on+0xa>
1005b158:	2103      	movs	r1, #3
1005b15a:	2288      	movs	r2, #136	@ 0x88
1005b15c:	5882      	ldr	r2, [r0, r2]
1005b15e:	40ca      	lsrs	r2, r1
1005b160:	2001      	movs	r0, #1
1005b162:	4010      	ands	r0, r2
1005b164:	4770      	bx	lr

1005b166 <llc_conn_get_instant_passed>:
1005b166:	219a      	movs	r1, #154	@ 0x9a
1005b168:	5a40      	ldrh	r0, [r0, r1]
1005b16a:	0740      	lsls	r0, r0, #29
1005b16c:	0fc0      	lsrs	r0, r0, #31
1005b16e:	4770      	bx	lr

1005b170 <llc_conn_get_instant_reached>:
1005b170:	219a      	movs	r1, #154	@ 0x9a
1005b172:	5a40      	ldrh	r0, [r0, r1]
1005b174:	0780      	lsls	r0, r0, #30
1005b176:	0fc0      	lsrs	r0, r0, #31
1005b178:	4770      	bx	lr

1005b17a <llc_conn_get_rx_ctrl_pdu_full>:
1005b17a:	2190      	movs	r1, #144	@ 0x90
1005b17c:	5840      	ldr	r0, [r0, r1]
1005b17e:	8801      	ldrh	r1, [r0, #0]
1005b180:	2001      	movs	r0, #1
1005b182:	4008      	ands	r0, r1
1005b184:	4770      	bx	lr

1005b186 <llc_conn_get_rx_acl_blocked>:
1005b186:	2194      	movs	r1, #148	@ 0x94
1005b188:	5840      	ldr	r0, [r0, r1]
1005b18a:	8800      	ldrh	r0, [r0, #0]
1005b18c:	05c0      	lsls	r0, r0, #23
1005b18e:	0fc0      	lsrs	r0, r0, #31
1005b190:	4770      	bx	lr

1005b192 <llc_conn_get_tx_acl_blocked>:
1005b192:	2194      	movs	r1, #148	@ 0x94
1005b194:	5840      	ldr	r0, [r0, r1]
1005b196:	8800      	ldrh	r0, [r0, #0]
1005b198:	b2c0      	uxtb	r0, r0
1005b19a:	09c0      	lsrs	r0, r0, #7
1005b19c:	4770      	bx	lr

1005b19e <llc_conn_get_tx_ctrl_pdu_state>:
1005b19e:	2194      	movs	r1, #148	@ 0x94
1005b1a0:	5840      	ldr	r0, [r0, r1]
1005b1a2:	8801      	ldrh	r1, [r0, #0]
1005b1a4:	2003      	movs	r0, #3
1005b1a6:	4008      	ands	r0, r1
1005b1a8:	4770      	bx	lr
	...

1005b1ac <llc_conn_guard_time_for_close_conn_event>:
1005b1ac:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005b1ae:	4607      	mov	r7, r0
1005b1b0:	2441      	movs	r4, #65	@ 0x41
1005b1b2:	5d00      	ldrb	r0, [r0, r4]
1005b1b4:	f7f9 fcb0 	bl	10054b18 <BLEPLAT_CNTR_SmGetTxPhy>
1005b1b8:	4605      	mov	r5, r0
1005b1ba:	5d38      	ldrb	r0, [r7, r4]
1005b1bc:	f7f9 fc9b 	bl	10054af6 <BLEPLAT_CNTR_SmGetRxPhy>
1005b1c0:	23b6      	movs	r3, #182	@ 0xb6
1005b1c2:	1e6c      	subs	r4, r5, #1
1005b1c4:	b2e1      	uxtb	r1, r4
1005b1c6:	9702      	str	r7, [sp, #8]
1005b1c8:	37b6      	adds	r7, #182	@ 0xb6
1005b1ca:	2570      	movs	r5, #112	@ 0x70
1005b1cc:	2603      	movs	r6, #3
1005b1ce:	2905      	cmp	r1, #5
1005b1d0:	4632      	mov	r2, r6
1005b1d2:	9501      	str	r5, [sp, #4]
1005b1d4:	4629      	mov	r1, r5
1005b1d6:	d805      	bhi.n	1005b1e4 <llc_conn_guard_time_for_close_conn_event+0x38>
1005b1d8:	b261      	sxtb	r1, r4
1005b1da:	008a      	lsls	r2, r1, #2
1005b1dc:	4919      	ldr	r1, [pc, #100]	@ (1005b244 <__arm_cp.22_0>)
1005b1de:	5889      	ldr	r1, [r1, r2]
1005b1e0:	4c19      	ldr	r4, [pc, #100]	@ (1005b248 <__arm_cp.22_1>)
1005b1e2:	58a2      	ldr	r2, [r4, r2]
1005b1e4:	9c02      	ldr	r4, [sp, #8]
1005b1e6:	5ae3      	ldrh	r3, [r4, r3]
1005b1e8:	887c      	ldrh	r4, [r7, #2]
1005b1ea:	1e40      	subs	r0, r0, #1
1005b1ec:	b2c5      	uxtb	r5, r0
1005b1ee:	2d05      	cmp	r5, #5
1005b1f0:	d806      	bhi.n	1005b200 <llc_conn_guard_time_for_close_conn_event+0x54>
1005b1f2:	b240      	sxtb	r0, r0
1005b1f4:	0080      	lsls	r0, r0, #2
1005b1f6:	4d13      	ldr	r5, [pc, #76]	@ (1005b244 <__arm_cp.22_0>)
1005b1f8:	582d      	ldr	r5, [r5, r0]
1005b1fa:	9501      	str	r5, [sp, #4]
1005b1fc:	4d12      	ldr	r5, [pc, #72]	@ (1005b248 <__arm_cp.22_1>)
1005b1fe:	582e      	ldr	r6, [r5, r0]
1005b200:	4093      	lsls	r3, r2
1005b202:	1858      	adds	r0, r3, r1
1005b204:	0200      	lsls	r0, r0, #8
1005b206:	2147      	movs	r1, #71	@ 0x47
1005b208:	00cd      	lsls	r5, r1, #3
1005b20a:	1940      	adds	r0, r0, r5
1005b20c:	490f      	ldr	r1, [pc, #60]	@ (1005b24c <__arm_cp.22_2>)
1005b20e:	f7e5 f817 	bl	10040240 <__udivsi3>
1005b212:	9000      	str	r0, [sp, #0]
1005b214:	40b4      	lsls	r4, r6
1005b216:	9801      	ldr	r0, [sp, #4]
1005b218:	1820      	adds	r0, r4, r0
1005b21a:	0200      	lsls	r0, r0, #8
1005b21c:	1940      	adds	r0, r0, r5
1005b21e:	490b      	ldr	r1, [pc, #44]	@ (1005b24c <__arm_cp.22_2>)
1005b220:	f7e5 f80e 	bl	10040240 <__udivsi3>
1005b224:	4606      	mov	r6, r0
1005b226:	88fc      	ldrh	r4, [r7, #6]
1005b228:	f005 fec2 	bl	10060fb0 <LL_sched_engine_return_actual_scheduler_margin>
1005b22c:	9900      	ldr	r1, [sp, #0]
1005b22e:	1808      	adds	r0, r1, r0
1005b230:	b2b1      	uxth	r1, r6
1005b232:	428c      	cmp	r4, r1
1005b234:	d800      	bhi.n	1005b238 <llc_conn_guard_time_for_close_conn_event+0x8c>
1005b236:	4621      	mov	r1, r4
1005b238:	1840      	adds	r0, r0, r1
1005b23a:	30cd      	adds	r0, #205	@ 0xcd
1005b23c:	9902      	ldr	r1, [sp, #8]
1005b23e:	6748      	str	r0, [r1, #116]	@ 0x74
1005b240:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005b242:	46c0      	nop			@ (mov r8, r8)

1005b244 <__arm_cp.22_0>:
1005b244:	1006a498 	.word	0x1006a498

1005b248 <__arm_cp.22_1>:
1005b248:	1006a480 	.word	0x1006a480

1005b24c <__arm_cp.22_2>:
1005b24c:	00000271 	.word	0x00000271

1005b250 <llc_conn_list_add_address>:
1005b250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005b252:	460a      	mov	r2, r1
1005b254:	4601      	mov	r1, r0
1005b256:	4807      	ldr	r0, [pc, #28]	@ (1005b274 <__arm_cp.23_0>)
1005b258:	6800      	ldr	r0, [r0, #0]
1005b25a:	239c      	movs	r3, #156	@ 0x9c
1005b25c:	58c0      	ldr	r0, [r0, r3]
1005b25e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005b260:	6800      	ldr	r0, [r0, #0]
1005b262:	ab02      	add	r3, sp, #8
1005b264:	9301      	str	r3, [sp, #4]
1005b266:	ab03      	add	r3, sp, #12
1005b268:	9300      	str	r3, [sp, #0]
1005b26a:	3024      	adds	r0, #36	@ 0x24
1005b26c:	2301      	movs	r3, #1
1005b26e:	f008 fb8b 	bl	10063988 <addr8_list_add>
1005b272:	bd8f      	pop	{r0, r1, r2, r3, r7, pc}

1005b274 <__arm_cp.23_0>:
1005b274:	20002958 	.word	0x20002958

1005b278 <llc_conn_list_reset>:
1005b278:	b580      	push	{r7, lr}
1005b27a:	4805      	ldr	r0, [pc, #20]	@ (1005b290 <__arm_cp.24_0>)
1005b27c:	6800      	ldr	r0, [r0, #0]
1005b27e:	219c      	movs	r1, #156	@ 0x9c
1005b280:	5840      	ldr	r0, [r0, r1]
1005b282:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005b284:	6800      	ldr	r0, [r0, #0]
1005b286:	3024      	adds	r0, #36	@ 0x24
1005b288:	f008 fbfd 	bl	10063a86 <addr8_list_clear>
1005b28c:	bd80      	pop	{r7, pc}
1005b28e:	46c0      	nop			@ (mov r8, r8)

1005b290 <__arm_cp.24_0>:
1005b290:	20002958 	.word	0x20002958

1005b294 <llc_conn_list_remove_address>:
1005b294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005b296:	460a      	mov	r2, r1
1005b298:	4601      	mov	r1, r0
1005b29a:	4807      	ldr	r0, [pc, #28]	@ (1005b2b8 <__arm_cp.25_0>)
1005b29c:	6800      	ldr	r0, [r0, #0]
1005b29e:	239c      	movs	r3, #156	@ 0x9c
1005b2a0:	58c0      	ldr	r0, [r0, r3]
1005b2a2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005b2a4:	6800      	ldr	r0, [r0, #0]
1005b2a6:	ab02      	add	r3, sp, #8
1005b2a8:	9301      	str	r3, [sp, #4]
1005b2aa:	ab03      	add	r3, sp, #12
1005b2ac:	9300      	str	r3, [sp, #0]
1005b2ae:	3024      	adds	r0, #36	@ 0x24
1005b2b0:	2301      	movs	r3, #1
1005b2b2:	f008 fbac 	bl	10063a0e <addr8_list_remove_by_addr>
1005b2b6:	bd8f      	pop	{r0, r1, r2, r3, r7, pc}

1005b2b8 <__arm_cp.25_0>:
1005b2b8:	20002958 	.word	0x20002958

1005b2bc <llc_conn_list_search_address>:
1005b2bc:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1005b2be:	460c      	mov	r4, r1
1005b2c0:	4605      	mov	r5, r0
1005b2c2:	f7ff fc9f 	bl	1005ac04 <llc_conn_get_cntxt_p>
1005b2c6:	2136      	movs	r1, #54	@ 0x36
1005b2c8:	5c40      	ldrb	r0, [r0, r1]
1005b2ca:	2800      	cmp	r0, #0
1005b2cc:	d001      	beq.n	1005b2d2 <llc_conn_list_search_address+0x16>
1005b2ce:	2000      	movs	r0, #0
1005b2d0:	e011      	b.n	1005b2f6 <llc_conn_list_search_address+0x3a>
1005b2d2:	480a      	ldr	r0, [pc, #40]	@ (1005b2fc <__arm_cp.26_0>)
1005b2d4:	6800      	ldr	r0, [r0, #0]
1005b2d6:	219c      	movs	r1, #156	@ 0x9c
1005b2d8:	5840      	ldr	r0, [r0, r1]
1005b2da:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005b2dc:	6801      	ldr	r1, [r0, #0]
1005b2de:	6a48      	ldr	r0, [r1, #36]	@ 0x24
1005b2e0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
1005b2e2:	aa03      	add	r2, sp, #12
1005b2e4:	2301      	movs	r3, #1
1005b2e6:	9300      	str	r3, [sp, #0]
1005b2e8:	9201      	str	r2, [sp, #4]
1005b2ea:	22fe      	movs	r2, #254	@ 0xfe
1005b2ec:	4395      	bics	r5, r2
1005b2ee:	462a      	mov	r2, r5
1005b2f0:	4623      	mov	r3, r4
1005b2f2:	f008 fae5 	bl	100638c0 <addr8_list_search>
1005b2f6:	b004      	add	sp, #16
1005b2f8:	bdb0      	pop	{r4, r5, r7, pc}
1005b2fa:	46c0      	nop			@ (mov r8, r8)

1005b2fc <__arm_cp.26_0>:
1005b2fc:	20002958 	.word	0x20002958

1005b300 <llc_conn_push_adv_set_terminated_event>:
1005b300:	b570      	push	{r4, r5, r6, lr}
1005b302:	460d      	mov	r5, r1
1005b304:	4604      	mov	r4, r0
1005b306:	481a      	ldr	r0, [pc, #104]	@ (1005b370 <__arm_cp.27_0>)
1005b308:	6800      	ldr	r0, [r0, #0]
1005b30a:	212c      	movs	r1, #44	@ 0x2c
1005b30c:	5c40      	ldrb	r0, [r0, r1]
1005b30e:	07c0      	lsls	r0, r0, #31
1005b310:	0ec1      	lsrs	r1, r0, #27
1005b312:	d101      	bne.n	1005b318 <llc_conn_push_adv_set_terminated_event+0x18>
1005b314:	2211      	movs	r2, #17
1005b316:	e00a      	b.n	1005b32e <llc_conn_push_adv_set_terminated_event+0x2e>
1005b318:	4816      	ldr	r0, [pc, #88]	@ (1005b374 <__arm_cp.27_1>)
1005b31a:	6800      	ldr	r0, [r0, #0]
1005b31c:	223d      	movs	r2, #61	@ 0x3d
1005b31e:	5c82      	ldrb	r2, [r0, r2]
1005b320:	0692      	lsls	r2, r2, #26
1005b322:	d524      	bpl.n	1005b36e <llc_conn_push_adv_set_terminated_event+0x6e>
1005b324:	303d      	adds	r0, #61	@ 0x3d
1005b326:	7ac0      	ldrb	r0, [r0, #11]
1005b328:	0780      	lsls	r0, r0, #30
1005b32a:	d520      	bpl.n	1005b36e <llc_conn_push_adv_set_terminated_event+0x6e>
1005b32c:	221f      	movs	r2, #31
1005b32e:	204e      	movs	r0, #78	@ 0x4e
1005b330:	43c0      	mvns	r0, r0
1005b332:	4041      	eors	r1, r0
1005b334:	4810      	ldr	r0, [pc, #64]	@ (1005b378 <__arm_cp.27_2>)
1005b336:	6800      	ldr	r0, [r0, #0]
1005b338:	6940      	ldr	r0, [r0, #20]
1005b33a:	b2ce      	uxtb	r6, r1
1005b33c:	2303      	movs	r3, #3
1005b33e:	4631      	mov	r1, r6
1005b340:	f7fa fd44 	bl	10055dcc <aci_event_fifo_push_header>
1005b344:	2800      	cmp	r0, #0
1005b346:	d012      	beq.n	1005b36e <llc_conn_push_adv_set_terminated_event+0x6e>
1005b348:	4601      	mov	r1, r0
1005b34a:	7284      	strb	r4, [r0, #10]
1005b34c:	2000      	movs	r0, #0
1005b34e:	7308      	strb	r0, [r1, #12]
1005b350:	724d      	strb	r5, [r1, #9]
1005b352:	7208      	strb	r0, [r1, #8]
1005b354:	2012      	movs	r0, #18
1005b356:	71c8      	strb	r0, [r1, #7]
1005b358:	2006      	movs	r0, #6
1005b35a:	7188      	strb	r0, [r1, #6]
1005b35c:	203e      	movs	r0, #62	@ 0x3e
1005b35e:	7148      	strb	r0, [r1, #5]
1005b360:	2004      	movs	r0, #4
1005b362:	7108      	strb	r0, [r1, #4]
1005b364:	0a20      	lsrs	r0, r4, #8
1005b366:	72c8      	strb	r0, [r1, #11]
1005b368:	4630      	mov	r0, r6
1005b36a:	f7fa fdcc 	bl	10055f06 <aci_event_fifo_push>
1005b36e:	bd70      	pop	{r4, r5, r6, pc}

1005b370 <__arm_cp.27_0>:
1005b370:	20002904 	.word	0x20002904

1005b374 <__arm_cp.27_1>:
1005b374:	20002958 	.word	0x20002958

1005b378 <__arm_cp.27_2>:
1005b378:	20002908 	.word	0x20002908

1005b37c <llc_conn_push_connection_complete_event>:
1005b37c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b37e:	b08d      	sub	sp, #52	@ 0x34
1005b380:	4604      	mov	r4, r0
1005b382:	4895      	ldr	r0, [pc, #596]	@ (1005b5d8 <__arm_cp.28_0>)
1005b384:	6800      	ldr	r0, [r0, #0]
1005b386:	212c      	movs	r1, #44	@ 0x2c
1005b388:	5c40      	ldrb	r0, [r0, r1]
1005b38a:	07c0      	lsls	r0, r0, #31
1005b38c:	0ec5      	lsrs	r5, r0, #27
1005b38e:	206f      	movs	r0, #111	@ 0x6f
1005b390:	43c6      	mvns	r6, r0
1005b392:	406e      	eors	r6, r5
1005b394:	f001 f9ba 	bl	1005c70c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005b398:	4990      	ldr	r1, [pc, #576]	@ (1005b5dc <__arm_cp.28_1>)
1005b39a:	6809      	ldr	r1, [r1, #0]
1005b39c:	223d      	movs	r2, #61	@ 0x3d
1005b39e:	5c8b      	ldrb	r3, [r1, r2]
1005b3a0:	2220      	movs	r2, #32
1005b3a2:	4013      	ands	r3, r2
1005b3a4:	313d      	adds	r1, #61	@ 0x3d
1005b3a6:	2800      	cmp	r0, #0
1005b3a8:	d066      	beq.n	1005b478 <llc_conn_push_connection_complete_event+0xfc>
1005b3aa:	2b00      	cmp	r3, #0
1005b3ac:	d100      	bne.n	1005b3b0 <llc_conn_push_connection_complete_event+0x34>
1005b3ae:	e110      	b.n	1005b5d2 <llc_conn_push_connection_complete_event+0x256>
1005b3b0:	7b88      	ldrb	r0, [r1, #14]
1005b3b2:	07c0      	lsls	r0, r0, #31
1005b3b4:	d063      	beq.n	1005b47e <llc_conn_push_connection_complete_event+0x102>
1005b3b6:	2d00      	cmp	r5, #0
1005b3b8:	d100      	bne.n	1005b3bc <llc_conn_push_connection_complete_event+0x40>
1005b3ba:	2212      	movs	r2, #18
1005b3bc:	8aa0      	ldrh	r0, [r4, #20]
1005b3be:	900c      	str	r0, [sp, #48]	@ 0x30
1005b3c0:	7da7      	ldrb	r7, [r4, #22]
1005b3c2:	7de0      	ldrb	r0, [r4, #23]
1005b3c4:	9008      	str	r0, [sp, #32]
1005b3c6:	8a60      	ldrh	r0, [r4, #18]
1005b3c8:	900b      	str	r0, [sp, #44]	@ 0x2c
1005b3ca:	8a20      	ldrh	r0, [r4, #16]
1005b3cc:	9009      	str	r0, [sp, #36]	@ 0x24
1005b3ce:	89a0      	ldrh	r0, [r4, #12]
1005b3d0:	900a      	str	r0, [sp, #40]	@ 0x28
1005b3d2:	6820      	ldr	r0, [r4, #0]
1005b3d4:	9005      	str	r0, [sp, #20]
1005b3d6:	6860      	ldr	r0, [r4, #4]
1005b3d8:	9007      	str	r0, [sp, #28]
1005b3da:	68a0      	ldr	r0, [r4, #8]
1005b3dc:	9006      	str	r0, [sp, #24]
1005b3de:	7e20      	ldrb	r0, [r4, #24]
1005b3e0:	9003      	str	r0, [sp, #12]
1005b3e2:	7e60      	ldrb	r0, [r4, #25]
1005b3e4:	9004      	str	r0, [sp, #16]
1005b3e6:	89e5      	ldrh	r5, [r4, #14]
1005b3e8:	7ea0      	ldrb	r0, [r4, #26]
1005b3ea:	9002      	str	r0, [sp, #8]
1005b3ec:	487c      	ldr	r0, [pc, #496]	@ (1005b5e0 <__arm_cp.28_2>)
1005b3ee:	6800      	ldr	r0, [r0, #0]
1005b3f0:	6900      	ldr	r0, [r0, #16]
1005b3f2:	b2f1      	uxtb	r1, r6
1005b3f4:	230a      	movs	r3, #10
1005b3f6:	f7fa fce9 	bl	10055dcc <aci_event_fifo_push_header>
1005b3fa:	2800      	cmp	r0, #0
1005b3fc:	d100      	bne.n	1005b400 <llc_conn_push_connection_complete_event+0x84>
1005b3fe:	e0e8      	b.n	1005b5d2 <llc_conn_push_connection_complete_event+0x256>
1005b400:	4604      	mov	r4, r0
1005b402:	9701      	str	r7, [sp, #4]
1005b404:	4607      	mov	r7, r0
1005b406:	371f      	adds	r7, #31
1005b408:	7245      	strb	r5, [r0, #9]
1005b40a:	9803      	ldr	r0, [sp, #12]
1005b40c:	7320      	strb	r0, [r4, #12]
1005b40e:	9804      	ldr	r0, [sp, #16]
1005b410:	72e0      	strb	r0, [r4, #11]
1005b412:	9802      	ldr	r0, [sp, #8]
1005b414:	7220      	strb	r0, [r4, #8]
1005b416:	0a28      	lsrs	r0, r5, #8
1005b418:	72a0      	strb	r0, [r4, #10]
1005b41a:	4620      	mov	r0, r4
1005b41c:	300d      	adds	r0, #13
1005b41e:	2506      	movs	r5, #6
1005b420:	9905      	ldr	r1, [sp, #20]
1005b422:	462a      	mov	r2, r5
1005b424:	4b6f      	ldr	r3, [pc, #444]	@ (1005b5e4 <__arm_cp.28_3>)
1005b426:	4798      	blx	r3
1005b428:	4620      	mov	r0, r4
1005b42a:	3013      	adds	r0, #19
1005b42c:	9906      	ldr	r1, [sp, #24]
1005b42e:	462a      	mov	r2, r5
1005b430:	4b6c      	ldr	r3, [pc, #432]	@ (1005b5e4 <__arm_cp.28_3>)
1005b432:	4798      	blx	r3
1005b434:	4b6b      	ldr	r3, [pc, #428]	@ (1005b5e4 <__arm_cp.28_3>)
1005b436:	4620      	mov	r0, r4
1005b438:	3019      	adds	r0, #25
1005b43a:	9907      	ldr	r1, [sp, #28]
1005b43c:	462a      	mov	r2, r5
1005b43e:	4798      	blx	r3
1005b440:	2021      	movs	r0, #33	@ 0x21
1005b442:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005b444:	5421      	strb	r1, [r4, r0]
1005b446:	2025      	movs	r0, #37	@ 0x25
1005b448:	9a08      	ldr	r2, [sp, #32]
1005b44a:	5422      	strb	r2, [r4, r0]
1005b44c:	4620      	mov	r0, r4
1005b44e:	3021      	adds	r0, #33	@ 0x21
1005b450:	0a09      	lsrs	r1, r1, #8
1005b452:	7041      	strb	r1, [r0, #1]
1005b454:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005b456:	0a08      	lsrs	r0, r1, #8
1005b458:	7078      	strb	r0, [r7, #1]
1005b45a:	7039      	strb	r1, [r7, #0]
1005b45c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005b45e:	0a08      	lsrs	r0, r1, #8
1005b460:	7178      	strb	r0, [r7, #5]
1005b462:	7139      	strb	r1, [r7, #4]
1005b464:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005b466:	0a08      	lsrs	r0, r1, #8
1005b468:	7278      	strb	r0, [r7, #9]
1005b46a:	7239      	strb	r1, [r7, #8]
1005b46c:	9801      	ldr	r0, [sp, #4]
1005b46e:	71f8      	strb	r0, [r7, #7]
1005b470:	1d20      	adds	r0, r4, #4
1005b472:	2129      	movs	r1, #41	@ 0x29
1005b474:	2222      	movs	r2, #34	@ 0x22
1005b476:	e0a2      	b.n	1005b5be <llc_conn_push_connection_complete_event+0x242>
1005b478:	2b00      	cmp	r3, #0
1005b47a:	d100      	bne.n	1005b47e <llc_conn_push_connection_complete_event+0x102>
1005b47c:	e0a9      	b.n	1005b5d2 <llc_conn_push_connection_complete_event+0x256>
1005b47e:	7a88      	ldrb	r0, [r1, #10]
1005b480:	0780      	lsls	r0, r0, #30
1005b482:	d445      	bmi.n	1005b510 <llc_conn_push_connection_complete_event+0x194>
1005b484:	7a48      	ldrb	r0, [r1, #9]
1005b486:	07c0      	lsls	r0, r0, #31
1005b488:	d100      	bne.n	1005b48c <llc_conn_push_connection_complete_event+0x110>
1005b48a:	e0a2      	b.n	1005b5d2 <llc_conn_push_connection_complete_event+0x256>
1005b48c:	2008      	movs	r0, #8
1005b48e:	4305      	orrs	r5, r0
1005b490:	7de0      	ldrb	r0, [r4, #23]
1005b492:	900c      	str	r0, [sp, #48]	@ 0x30
1005b494:	8a60      	ldrh	r0, [r4, #18]
1005b496:	900b      	str	r0, [sp, #44]	@ 0x2c
1005b498:	8a20      	ldrh	r0, [r4, #16]
1005b49a:	9009      	str	r0, [sp, #36]	@ 0x24
1005b49c:	89a0      	ldrh	r0, [r4, #12]
1005b49e:	900a      	str	r0, [sp, #40]	@ 0x28
1005b4a0:	6820      	ldr	r0, [r4, #0]
1005b4a2:	9008      	str	r0, [sp, #32]
1005b4a4:	7e20      	ldrb	r0, [r4, #24]
1005b4a6:	9006      	str	r0, [sp, #24]
1005b4a8:	7e60      	ldrb	r0, [r4, #25]
1005b4aa:	9007      	str	r0, [sp, #28]
1005b4ac:	89e7      	ldrh	r7, [r4, #14]
1005b4ae:	7ea0      	ldrb	r0, [r4, #26]
1005b4b0:	9005      	str	r0, [sp, #20]
1005b4b2:	484b      	ldr	r0, [pc, #300]	@ (1005b5e0 <__arm_cp.28_2>)
1005b4b4:	6800      	ldr	r0, [r0, #0]
1005b4b6:	6900      	ldr	r0, [r0, #16]
1005b4b8:	b2f1      	uxtb	r1, r6
1005b4ba:	2306      	movs	r3, #6
1005b4bc:	462a      	mov	r2, r5
1005b4be:	f7fa fc85 	bl	10055dcc <aci_event_fifo_push_header>
1005b4c2:	2800      	cmp	r0, #0
1005b4c4:	d100      	bne.n	1005b4c8 <llc_conn_push_connection_complete_event+0x14c>
1005b4c6:	e084      	b.n	1005b5d2 <llc_conn_push_connection_complete_event+0x256>
1005b4c8:	4604      	mov	r4, r0
1005b4ca:	4605      	mov	r5, r0
1005b4cc:	3513      	adds	r5, #19
1005b4ce:	7247      	strb	r7, [r0, #9]
1005b4d0:	9806      	ldr	r0, [sp, #24]
1005b4d2:	7320      	strb	r0, [r4, #12]
1005b4d4:	9807      	ldr	r0, [sp, #28]
1005b4d6:	72e0      	strb	r0, [r4, #11]
1005b4d8:	9805      	ldr	r0, [sp, #20]
1005b4da:	7220      	strb	r0, [r4, #8]
1005b4dc:	0a38      	lsrs	r0, r7, #8
1005b4de:	72a0      	strb	r0, [r4, #10]
1005b4e0:	4620      	mov	r0, r4
1005b4e2:	300d      	adds	r0, #13
1005b4e4:	2206      	movs	r2, #6
1005b4e6:	9908      	ldr	r1, [sp, #32]
1005b4e8:	f7f7 ff24 	bl	10053334 <BLEPLAT_MemCpy>
1005b4ec:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005b4ee:	0a08      	lsrs	r0, r1, #8
1005b4f0:	75a0      	strb	r0, [r4, #22]
1005b4f2:	7561      	strb	r1, [r4, #21]
1005b4f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005b4f6:	0a08      	lsrs	r0, r1, #8
1005b4f8:	7068      	strb	r0, [r5, #1]
1005b4fa:	7029      	strb	r1, [r5, #0]
1005b4fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005b4fe:	0a08      	lsrs	r0, r1, #8
1005b500:	7168      	strb	r0, [r5, #5]
1005b502:	7129      	strb	r1, [r5, #4]
1005b504:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005b506:	7660      	strb	r0, [r4, #25]
1005b508:	1d20      	adds	r0, r4, #4
1005b50a:	2101      	movs	r1, #1
1005b50c:	2213      	movs	r2, #19
1005b50e:	e056      	b.n	1005b5be <llc_conn_push_connection_complete_event+0x242>
1005b510:	2d00      	cmp	r5, #0
1005b512:	d001      	beq.n	1005b518 <llc_conn_push_connection_complete_event+0x19c>
1005b514:	221c      	movs	r2, #28
1005b516:	e000      	b.n	1005b51a <llc_conn_push_connection_complete_event+0x19e>
1005b518:	220d      	movs	r2, #13
1005b51a:	7de0      	ldrb	r0, [r4, #23]
1005b51c:	900a      	str	r0, [sp, #40]	@ 0x28
1005b51e:	8a67      	ldrh	r7, [r4, #18]
1005b520:	8a20      	ldrh	r0, [r4, #16]
1005b522:	900b      	str	r0, [sp, #44]	@ 0x2c
1005b524:	89a0      	ldrh	r0, [r4, #12]
1005b526:	900c      	str	r0, [sp, #48]	@ 0x30
1005b528:	6820      	ldr	r0, [r4, #0]
1005b52a:	9007      	str	r0, [sp, #28]
1005b52c:	6860      	ldr	r0, [r4, #4]
1005b52e:	9009      	str	r0, [sp, #36]	@ 0x24
1005b530:	68a0      	ldr	r0, [r4, #8]
1005b532:	9008      	str	r0, [sp, #32]
1005b534:	7e20      	ldrb	r0, [r4, #24]
1005b536:	9005      	str	r0, [sp, #20]
1005b538:	7e60      	ldrb	r0, [r4, #25]
1005b53a:	9006      	str	r0, [sp, #24]
1005b53c:	89e5      	ldrh	r5, [r4, #14]
1005b53e:	7ea0      	ldrb	r0, [r4, #26]
1005b540:	9004      	str	r0, [sp, #16]
1005b542:	4827      	ldr	r0, [pc, #156]	@ (1005b5e0 <__arm_cp.28_2>)
1005b544:	6800      	ldr	r0, [r0, #0]
1005b546:	6900      	ldr	r0, [r0, #16]
1005b548:	b2f1      	uxtb	r1, r6
1005b54a:	2309      	movs	r3, #9
1005b54c:	f7fa fc3e 	bl	10055dcc <aci_event_fifo_push_header>
1005b550:	2800      	cmp	r0, #0
1005b552:	d03e      	beq.n	1005b5d2 <llc_conn_push_connection_complete_event+0x256>
1005b554:	4604      	mov	r4, r0
1005b556:	9703      	str	r7, [sp, #12]
1005b558:	4607      	mov	r7, r0
1005b55a:	371f      	adds	r7, #31
1005b55c:	7245      	strb	r5, [r0, #9]
1005b55e:	9805      	ldr	r0, [sp, #20]
1005b560:	7320      	strb	r0, [r4, #12]
1005b562:	9806      	ldr	r0, [sp, #24]
1005b564:	72e0      	strb	r0, [r4, #11]
1005b566:	9804      	ldr	r0, [sp, #16]
1005b568:	7220      	strb	r0, [r4, #8]
1005b56a:	0a28      	lsrs	r0, r5, #8
1005b56c:	72a0      	strb	r0, [r4, #10]
1005b56e:	4620      	mov	r0, r4
1005b570:	300d      	adds	r0, #13
1005b572:	2506      	movs	r5, #6
1005b574:	9907      	ldr	r1, [sp, #28]
1005b576:	462a      	mov	r2, r5
1005b578:	4b1a      	ldr	r3, [pc, #104]	@ (1005b5e4 <__arm_cp.28_3>)
1005b57a:	4798      	blx	r3
1005b57c:	4620      	mov	r0, r4
1005b57e:	3013      	adds	r0, #19
1005b580:	9908      	ldr	r1, [sp, #32]
1005b582:	462a      	mov	r2, r5
1005b584:	4b17      	ldr	r3, [pc, #92]	@ (1005b5e4 <__arm_cp.28_3>)
1005b586:	4798      	blx	r3
1005b588:	4b16      	ldr	r3, [pc, #88]	@ (1005b5e4 <__arm_cp.28_3>)
1005b58a:	4620      	mov	r0, r4
1005b58c:	3019      	adds	r0, #25
1005b58e:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005b590:	462a      	mov	r2, r5
1005b592:	4798      	blx	r3
1005b594:	2021      	movs	r0, #33	@ 0x21
1005b596:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005b598:	5422      	strb	r2, [r4, r0]
1005b59a:	2025      	movs	r0, #37	@ 0x25
1005b59c:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005b59e:	5421      	strb	r1, [r4, r0]
1005b5a0:	1d20      	adds	r0, r4, #4
1005b5a2:	4621      	mov	r1, r4
1005b5a4:	3121      	adds	r1, #33	@ 0x21
1005b5a6:	0a12      	lsrs	r2, r2, #8
1005b5a8:	704a      	strb	r2, [r1, #1]
1005b5aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1005b5ac:	0a11      	lsrs	r1, r2, #8
1005b5ae:	7079      	strb	r1, [r7, #1]
1005b5b0:	703a      	strb	r2, [r7, #0]
1005b5b2:	9a03      	ldr	r2, [sp, #12]
1005b5b4:	0a11      	lsrs	r1, r2, #8
1005b5b6:	7179      	strb	r1, [r7, #5]
1005b5b8:	713a      	strb	r2, [r7, #4]
1005b5ba:	210a      	movs	r1, #10
1005b5bc:	221f      	movs	r2, #31
1005b5be:	2304      	movs	r3, #4
1005b5c0:	7123      	strb	r3, [r4, #4]
1005b5c2:	233e      	movs	r3, #62	@ 0x3e
1005b5c4:	7043      	strb	r3, [r0, #1]
1005b5c6:	71e1      	strb	r1, [r4, #7]
1005b5c8:	71a2      	strb	r2, [r4, #6]
1005b5ca:	b2f0      	uxtb	r0, r6
1005b5cc:	4621      	mov	r1, r4
1005b5ce:	f7fa fc9a 	bl	10055f06 <aci_event_fifo_push>
1005b5d2:	b00d      	add	sp, #52	@ 0x34
1005b5d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005b5d6:	46c0      	nop			@ (mov r8, r8)

1005b5d8 <__arm_cp.28_0>:
1005b5d8:	20002904 	.word	0x20002904

1005b5dc <__arm_cp.28_1>:
1005b5dc:	20002958 	.word	0x20002958

1005b5e0 <__arm_cp.28_2>:
1005b5e0:	20002908 	.word	0x20002908

1005b5e4 <__arm_cp.28_3>:
1005b5e4:	10053335 	.word	0x10053335

1005b5e8 <llc_conn_push_csa_event>:
1005b5e8:	b5b0      	push	{r4, r5, r7, lr}
1005b5ea:	460d      	mov	r5, r1
1005b5ec:	4604      	mov	r4, r0
1005b5ee:	4812      	ldr	r0, [pc, #72]	@ (1005b638 <__arm_cp.29_0>)
1005b5f0:	6800      	ldr	r0, [r0, #0]
1005b5f2:	213d      	movs	r1, #61	@ 0x3d
1005b5f4:	5c41      	ldrb	r1, [r0, r1]
1005b5f6:	0689      	lsls	r1, r1, #26
1005b5f8:	d51c      	bpl.n	1005b634 <llc_conn_push_csa_event+0x4c>
1005b5fa:	303d      	adds	r0, #61	@ 0x3d
1005b5fc:	7ac0      	ldrb	r0, [r0, #11]
1005b5fe:	0700      	lsls	r0, r0, #28
1005b600:	d518      	bpl.n	1005b634 <llc_conn_push_csa_event+0x4c>
1005b602:	480e      	ldr	r0, [pc, #56]	@ (1005b63c <__arm_cp.29_1>)
1005b604:	6800      	ldr	r0, [r0, #0]
1005b606:	6940      	ldr	r0, [r0, #20]
1005b608:	21a1      	movs	r1, #161	@ 0xa1
1005b60a:	222c      	movs	r2, #44	@ 0x2c
1005b60c:	2302      	movs	r3, #2
1005b60e:	f7fa fbdd 	bl	10055dcc <aci_event_fifo_push_header>
1005b612:	2800      	cmp	r0, #0
1005b614:	d00e      	beq.n	1005b634 <llc_conn_push_csa_event+0x4c>
1005b616:	4601      	mov	r1, r0
1005b618:	7204      	strb	r4, [r0, #8]
1005b61a:	7285      	strb	r5, [r0, #10]
1005b61c:	2014      	movs	r0, #20
1005b61e:	71c8      	strb	r0, [r1, #7]
1005b620:	2004      	movs	r0, #4
1005b622:	7188      	strb	r0, [r1, #6]
1005b624:	223e      	movs	r2, #62	@ 0x3e
1005b626:	714a      	strb	r2, [r1, #5]
1005b628:	7108      	strb	r0, [r1, #4]
1005b62a:	0a20      	lsrs	r0, r4, #8
1005b62c:	7248      	strb	r0, [r1, #9]
1005b62e:	20a1      	movs	r0, #161	@ 0xa1
1005b630:	f7fa fc69 	bl	10055f06 <aci_event_fifo_push>
1005b634:	bdb0      	pop	{r4, r5, r7, pc}
1005b636:	46c0      	nop			@ (mov r8, r8)

1005b638 <__arm_cp.29_0>:
1005b638:	20002958 	.word	0x20002958

1005b63c <__arm_cp.29_1>:
1005b63c:	20002908 	.word	0x20002908

1005b640 <llc_conn_set_chmap_params>:
1005b640:	2398      	movs	r3, #152	@ 0x98
1005b642:	52c2      	strh	r2, [r0, r3]
1005b644:	3098      	adds	r0, #152	@ 0x98
1005b646:	6341      	str	r1, [r0, #52]	@ 0x34
1005b648:	8841      	ldrh	r1, [r0, #2]
1005b64a:	2220      	movs	r2, #32
1005b64c:	430a      	orrs	r2, r1
1005b64e:	8042      	strh	r2, [r0, #2]
1005b650:	4770      	bx	lr

1005b652 <llc_conn_set_conn_update_params>:
1005b652:	2398      	movs	r3, #152	@ 0x98
1005b654:	52c2      	strh	r2, [r0, r3]
1005b656:	3098      	adds	r0, #152	@ 0x98
1005b658:	6301      	str	r1, [r0, #48]	@ 0x30
1005b65a:	8841      	ldrh	r1, [r0, #2]
1005b65c:	2208      	movs	r2, #8
1005b65e:	430a      	orrs	r2, r1
1005b660:	8042      	strh	r2, [r0, #2]
1005b662:	4770      	bx	lr

1005b664 <llc_conn_set_rx_acl_blocked>:
1005b664:	2194      	movs	r1, #148	@ 0x94
1005b666:	5840      	ldr	r0, [r0, r1]
1005b668:	8801      	ldrh	r1, [r0, #0]
1005b66a:	2201      	movs	r2, #1
1005b66c:	0212      	lsls	r2, r2, #8
1005b66e:	430a      	orrs	r2, r1
1005b670:	8002      	strh	r2, [r0, #0]
1005b672:	4770      	bx	lr

1005b674 <llc_conn_set_start_enc>:
1005b674:	2294      	movs	r2, #148	@ 0x94
1005b676:	5880      	ldr	r0, [r0, r2]
1005b678:	2900      	cmp	r1, #0
1005b67a:	d007      	beq.n	1005b68c <llc_conn_set_start_enc+0x18>
1005b67c:	2901      	cmp	r1, #1
1005b67e:	d003      	beq.n	1005b688 <llc_conn_set_start_enc+0x14>
1005b680:	8801      	ldrh	r1, [r0, #0]
1005b682:	2210      	movs	r2, #16
1005b684:	430a      	orrs	r2, r1
1005b686:	8002      	strh	r2, [r0, #0]
1005b688:	2108      	movs	r1, #8
1005b68a:	e000      	b.n	1005b68e <llc_conn_set_start_enc+0x1a>
1005b68c:	2110      	movs	r1, #16
1005b68e:	8802      	ldrh	r2, [r0, #0]
1005b690:	430a      	orrs	r2, r1
1005b692:	8002      	strh	r2, [r0, #0]
1005b694:	4770      	bx	lr

1005b696 <llc_conn_set_stop_enc>:
1005b696:	2294      	movs	r2, #148	@ 0x94
1005b698:	5880      	ldr	r0, [r0, r2]
1005b69a:	2900      	cmp	r1, #0
1005b69c:	d007      	beq.n	1005b6ae <llc_conn_set_stop_enc+0x18>
1005b69e:	2901      	cmp	r1, #1
1005b6a0:	d003      	beq.n	1005b6aa <llc_conn_set_stop_enc+0x14>
1005b6a2:	8801      	ldrh	r1, [r0, #0]
1005b6a4:	2240      	movs	r2, #64	@ 0x40
1005b6a6:	430a      	orrs	r2, r1
1005b6a8:	8002      	strh	r2, [r0, #0]
1005b6aa:	2120      	movs	r1, #32
1005b6ac:	e000      	b.n	1005b6b0 <llc_conn_set_stop_enc+0x1a>
1005b6ae:	2140      	movs	r1, #64	@ 0x40
1005b6b0:	8802      	ldrh	r2, [r0, #0]
1005b6b2:	430a      	orrs	r2, r1
1005b6b4:	8002      	strh	r2, [r0, #0]
1005b6b6:	4770      	bx	lr

1005b6b8 <llc_conn_set_tx_acl_blocked>:
1005b6b8:	2194      	movs	r1, #148	@ 0x94
1005b6ba:	5840      	ldr	r0, [r0, r1]
1005b6bc:	8801      	ldrh	r1, [r0, #0]
1005b6be:	2280      	movs	r2, #128	@ 0x80
1005b6c0:	430a      	orrs	r2, r1
1005b6c2:	8002      	strh	r2, [r0, #0]
1005b6c4:	4770      	bx	lr

1005b6c6 <llc_conn_set_tx_ctrl_pdu_has_instant>:
1005b6c6:	2194      	movs	r1, #148	@ 0x94
1005b6c8:	5840      	ldr	r0, [r0, r1]
1005b6ca:	8801      	ldrh	r1, [r0, #0]
1005b6cc:	2204      	movs	r2, #4
1005b6ce:	430a      	orrs	r2, r1
1005b6d0:	8002      	strh	r2, [r0, #0]
1005b6d2:	4770      	bx	lr

1005b6d4 <llc_conn_set_tx_ctrl_pdu_state>:
1005b6d4:	b580      	push	{r7, lr}
1005b6d6:	2294      	movs	r2, #148	@ 0x94
1005b6d8:	5880      	ldr	r0, [r0, r2]
1005b6da:	8802      	ldrh	r2, [r0, #0]
1005b6dc:	2303      	movs	r3, #3
1005b6de:	439a      	bics	r2, r3
1005b6e0:	8002      	strh	r2, [r0, #0]
1005b6e2:	4019      	ands	r1, r3
1005b6e4:	8802      	ldrh	r2, [r0, #0]
1005b6e6:	430a      	orrs	r2, r1
1005b6e8:	8002      	strh	r2, [r0, #0]
1005b6ea:	2015      	movs	r0, #21
1005b6ec:	f007 feb8 	bl	10063460 <tsk_notify_idx>
1005b6f0:	f7f7 f839 	bl	10052766 <BLE_STACK_ProcessRequest>
1005b6f4:	bd80      	pop	{r7, pc}

1005b6f6 <llc_conn_calc_skip_ucfg_weak>:
1005b6f6:	4610      	mov	r0, r2
1005b6f8:	4770      	bx	lr

1005b6fa <llc_conn_multi_link_connection>:
1005b6fa:	b5b0      	push	{r4, r5, r7, lr}
1005b6fc:	4604      	mov	r4, r0
1005b6fe:	2536      	movs	r5, #54	@ 0x36
1005b700:	f7ff fa80 	bl	1005ac04 <llc_conn_get_cntxt_p>
1005b704:	5544      	strb	r4, [r0, r5]
1005b706:	2000      	movs	r0, #0
1005b708:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005b70c <llc_conn_check_connect_request_params>:
1005b70c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b70e:	b087      	sub	sp, #28
1005b710:	4604      	mov	r4, r0
1005b712:	7e00      	ldrb	r0, [r0, #24]
1005b714:	7e61      	ldrb	r1, [r4, #25]
1005b716:	0209      	lsls	r1, r1, #8
1005b718:	180e      	adds	r6, r1, r0
1005b71a:	1e72      	subs	r2, r6, #1
1005b71c:	2a08      	cmp	r2, #8
1005b71e:	d300      	bcc.n	1005b722 <llc_conn_check_connect_request_params+0x16>
1005b720:	2208      	movs	r2, #8
1005b722:	7ea0      	ldrb	r0, [r4, #26]
1005b724:	9004      	str	r0, [sp, #16]
1005b726:	7ee0      	ldrb	r0, [r4, #27]
1005b728:	9003      	str	r0, [sp, #12]
1005b72a:	7d60      	ldrb	r0, [r4, #21]
1005b72c:	2101      	movs	r1, #1
1005b72e:	4f27      	ldr	r7, [pc, #156]	@ (1005b7cc <__arm_cp.1_0>)
1005b730:	9101      	str	r1, [sp, #4]
1005b732:	47b8      	blx	r7
1005b734:	4605      	mov	r5, r0
1005b736:	7da0      	ldrb	r0, [r4, #22]
1005b738:	7de1      	ldrb	r1, [r4, #23]
1005b73a:	0209      	lsls	r1, r1, #8
1005b73c:	1808      	adds	r0, r1, r0
1005b73e:	2100      	movs	r1, #0
1005b740:	9106      	str	r1, [sp, #24]
1005b742:	4632      	mov	r2, r6
1005b744:	47b8      	blx	r7
1005b746:	4633      	mov	r3, r6
1005b748:	9602      	str	r6, [sp, #8]
1005b74a:	4606      	mov	r6, r0
1005b74c:	432e      	orrs	r6, r5
1005b74e:	2019      	movs	r0, #25
1005b750:	01c2      	lsls	r2, r0, #7
1005b752:	2106      	movs	r1, #6
1005b754:	4618      	mov	r0, r3
1005b756:	9205      	str	r2, [sp, #20]
1005b758:	47b8      	blx	r7
1005b75a:	463b      	mov	r3, r7
1005b75c:	4605      	mov	r5, r0
1005b75e:	4335      	orrs	r5, r6
1005b760:	9803      	ldr	r0, [sp, #12]
1005b762:	0200      	lsls	r0, r0, #8
1005b764:	9904      	ldr	r1, [sp, #16]
1005b766:	1847      	adds	r7, r0, r1
1005b768:	22ff      	movs	r2, #255	@ 0xff
1005b76a:	32f4      	adds	r2, #244	@ 0xf4
1005b76c:	4638      	mov	r0, r7
1005b76e:	9906      	ldr	r1, [sp, #24]
1005b770:	4798      	blx	r3
1005b772:	4606      	mov	r6, r0
1005b774:	432e      	orrs	r6, r5
1005b776:	1c78      	adds	r0, r7, #1
1005b778:	9902      	ldr	r1, [sp, #8]
1005b77a:	4348      	muls	r0, r1
1005b77c:	0880      	lsrs	r0, r0, #2
1005b77e:	b281      	uxth	r1, r0
1005b780:	290a      	cmp	r1, #10
1005b782:	d800      	bhi.n	1005b786 <llc_conn_check_connect_request_params+0x7a>
1005b784:	210a      	movs	r1, #10
1005b786:	7f20      	ldrb	r0, [r4, #28]
1005b788:	7f62      	ldrb	r2, [r4, #29]
1005b78a:	0212      	lsls	r2, r2, #8
1005b78c:	1810      	adds	r0, r2, r0
1005b78e:	9a05      	ldr	r2, [sp, #20]
1005b790:	4d0e      	ldr	r5, [pc, #56]	@ (1005b7cc <__arm_cp.1_0>)
1005b792:	47a8      	blx	r5
1005b794:	4306      	orrs	r6, r0
1005b796:	2023      	movs	r0, #35	@ 0x23
1005b798:	5c21      	ldrb	r1, [r4, r0]
1005b79a:	201f      	movs	r0, #31
1005b79c:	4008      	ands	r0, r1
1005b79e:	2105      	movs	r1, #5
1005b7a0:	2210      	movs	r2, #16
1005b7a2:	47a8      	blx	r5
1005b7a4:	4330      	orrs	r0, r6
1005b7a6:	d001      	beq.n	1005b7ac <llc_conn_check_connect_request_params+0xa0>
1005b7a8:	9806      	ldr	r0, [sp, #24]
1005b7aa:	e00c      	b.n	1005b7c6 <llc_conn_check_connect_request_params+0xba>
1005b7ac:	4620      	mov	r0, r4
1005b7ae:	3022      	adds	r0, #34	@ 0x22
1005b7b0:	7800      	ldrb	r0, [r0, #0]
1005b7b2:	06c0      	lsls	r0, r0, #27
1005b7b4:	d106      	bne.n	1005b7c4 <llc_conn_check_connect_request_params+0xb8>
1005b7b6:	201e      	movs	r0, #30
1005b7b8:	2822      	cmp	r0, #34	@ 0x22
1005b7ba:	d0f5      	beq.n	1005b7a8 <llc_conn_check_connect_request_params+0x9c>
1005b7bc:	5c21      	ldrb	r1, [r4, r0]
1005b7be:	1c40      	adds	r0, r0, #1
1005b7c0:	2900      	cmp	r1, #0
1005b7c2:	d0f9      	beq.n	1005b7b8 <llc_conn_check_connect_request_params+0xac>
1005b7c4:	9801      	ldr	r0, [sp, #4]
1005b7c6:	b007      	add	sp, #28
1005b7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005b7ca:	46c0      	nop			@ (mov r8, r8)

1005b7cc <__arm_cp.1_0>:
1005b7cc:	10060b3d 	.word	0x10060b3d

1005b7d0 <llc_conn_check_ctrl_proc_rsp_timer>:
1005b7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005b7d2:	460d      	mov	r5, r1
1005b7d4:	4604      	mov	r4, r0
1005b7d6:	2030      	movs	r0, #48	@ 0x30
1005b7d8:	5c20      	ldrb	r0, [r4, r0]
1005b7da:	2101      	movs	r1, #1
1005b7dc:	f001 f871 	bl	1005c8c2 <LL_cpe_get_active_status>
1005b7e0:	4627      	mov	r7, r4
1005b7e2:	3730      	adds	r7, #48	@ 0x30
1005b7e4:	2801      	cmp	r0, #1
1005b7e6:	d10e      	bne.n	1005b806 <llc_conn_check_ctrl_proc_rsp_timer+0x36>
1005b7e8:	7838      	ldrb	r0, [r7, #0]
1005b7ea:	2101      	movs	r1, #1
1005b7ec:	f001 fe8a 	bl	1005d504 <LL_cpe_conn_exception_opcode_from_sm>
1005b7f0:	2800      	cmp	r0, #0
1005b7f2:	d108      	bne.n	1005b806 <llc_conn_check_ctrl_proc_rsp_timer+0x36>
1005b7f4:	6f20      	ldr	r0, [r4, #112]	@ 0x70
1005b7f6:	1e41      	subs	r1, r0, #1
1005b7f8:	d41d      	bmi.n	1005b836 <llc_conn_check_ctrl_proc_rsp_timer+0x66>
1005b7fa:	217d      	movs	r1, #125	@ 0x7d
1005b7fc:	0449      	lsls	r1, r1, #17
1005b7fe:	4288      	cmp	r0, r1
1005b800:	d800      	bhi.n	1005b804 <llc_conn_check_ctrl_proc_rsp_timer+0x34>
1005b802:	1b41      	subs	r1, r0, r5
1005b804:	6721      	str	r1, [r4, #112]	@ 0x70
1005b806:	7838      	ldrb	r0, [r7, #0]
1005b808:	2600      	movs	r6, #0
1005b80a:	4631      	mov	r1, r6
1005b80c:	f001 f859 	bl	1005c8c2 <LL_cpe_get_active_status>
1005b810:	2801      	cmp	r0, #1
1005b812:	d111      	bne.n	1005b838 <llc_conn_check_ctrl_proc_rsp_timer+0x68>
1005b814:	7838      	ldrb	r0, [r7, #0]
1005b816:	2600      	movs	r6, #0
1005b818:	4631      	mov	r1, r6
1005b81a:	f001 fe73 	bl	1005d504 <LL_cpe_conn_exception_opcode_from_sm>
1005b81e:	2800      	cmp	r0, #0
1005b820:	d10a      	bne.n	1005b838 <llc_conn_check_ctrl_proc_rsp_timer+0x68>
1005b822:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
1005b824:	1e41      	subs	r1, r0, #1
1005b826:	d406      	bmi.n	1005b836 <llc_conn_check_ctrl_proc_rsp_timer+0x66>
1005b828:	217d      	movs	r1, #125	@ 0x7d
1005b82a:	0449      	lsls	r1, r1, #17
1005b82c:	4288      	cmp	r0, r1
1005b82e:	d800      	bhi.n	1005b832 <llc_conn_check_ctrl_proc_rsp_timer+0x62>
1005b830:	1b41      	subs	r1, r0, r5
1005b832:	66e1      	str	r1, [r4, #108]	@ 0x6c
1005b834:	e000      	b.n	1005b838 <llc_conn_check_ctrl_proc_rsp_timer+0x68>
1005b836:	2622      	movs	r6, #34	@ 0x22
1005b838:	4630      	mov	r0, r6
1005b83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005b83c <llc_conn_check_instant_and_set_params>:
1005b83c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005b83e:	4604      	mov	r4, r0
1005b840:	209a      	movs	r0, #154	@ 0x9a
1005b842:	5a20      	ldrh	r0, [r4, r0]
1005b844:	07c2      	lsls	r2, r0, #31
1005b846:	4625      	mov	r5, r4
1005b848:	352c      	adds	r5, #44	@ 0x2c
1005b84a:	2a00      	cmp	r2, #0
1005b84c:	d100      	bne.n	1005b850 <llc_conn_check_instant_and_set_params+0x14>
1005b84e:	e081      	b.n	1005b954 <llc_conn_check_instant_and_set_params+0x118>
1005b850:	4626      	mov	r6, r4
1005b852:	3698      	adds	r6, #152	@ 0x98
1005b854:	8832      	ldrh	r2, [r6, #0]
1005b856:	1a51      	subs	r1, r2, r1
1005b858:	040b      	lsls	r3, r1, #16
1005b85a:	d004      	beq.n	1005b866 <llc_conn_check_instant_and_set_params+0x2a>
1005b85c:	b208      	sxth	r0, r1
1005b85e:	2800      	cmp	r0, #0
1005b860:	d578      	bpl.n	1005b954 <llc_conn_check_instant_and_set_params+0x118>
1005b862:	2028      	movs	r0, #40	@ 0x28
1005b864:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005b866:	0541      	lsls	r1, r0, #21
1005b868:	d40f      	bmi.n	1005b88a <llc_conn_check_instant_and_set_params+0x4e>
1005b86a:	0701      	lsls	r1, r0, #28
1005b86c:	d416      	bmi.n	1005b89c <llc_conn_check_instant_and_set_params+0x60>
1005b86e:	0680      	lsls	r0, r0, #26
1005b870:	d438      	bmi.n	1005b8e4 <llc_conn_check_instant_and_set_params+0xa8>
1005b872:	7928      	ldrb	r0, [r5, #4]
1005b874:	f7f4 f923 	bl	1004fabe <LL_phy_upd_pending_ucfg>
1005b878:	2800      	cmp	r0, #0
1005b87a:	d060      	beq.n	1005b93e <llc_conn_check_instant_and_set_params+0x102>
1005b87c:	7928      	ldrb	r0, [r5, #4]
1005b87e:	2101      	movs	r1, #1
1005b880:	2200      	movs	r2, #0
1005b882:	4613      	mov	r3, r2
1005b884:	f003 f9e2 	bl	1005ec4c <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
1005b888:	e059      	b.n	1005b93e <llc_conn_check_instant_and_set_params+0x102>
1005b88a:	7928      	ldrb	r0, [r5, #4]
1005b88c:	4611      	mov	r1, r2
1005b88e:	f7ff f9b7 	bl	1005ac00 <llc_cig_cmn_start_cis_ucfg_weak>
1005b892:	8870      	ldrh	r0, [r6, #2]
1005b894:	4932      	ldr	r1, [pc, #200]	@ (1005b960 <__arm_cp.3_0>)
1005b896:	4001      	ands	r1, r0
1005b898:	8071      	strh	r1, [r6, #2]
1005b89a:	e050      	b.n	1005b93e <llc_conn_check_instant_and_set_params+0x102>
1005b89c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005b89e:	6b37      	ldr	r7, [r6, #48]	@ 0x30
1005b8a0:	6879      	ldr	r1, [r7, #4]
1005b8a2:	1840      	adds	r0, r0, r1
1005b8a4:	6460      	str	r0, [r4, #68]	@ 0x44
1005b8a6:	68b9      	ldr	r1, [r7, #8]
1005b8a8:	683a      	ldr	r2, [r7, #0]
1005b8aa:	7828      	ldrb	r0, [r5, #0]
1005b8ac:	2802      	cmp	r0, #2
1005b8ae:	9102      	str	r1, [sp, #8]
1005b8b0:	9201      	str	r2, [sp, #4]
1005b8b2:	d129      	bne.n	1005b908 <llc_conn_check_instant_and_set_params+0xcc>
1005b8b4:	7d68      	ldrb	r0, [r5, #21]
1005b8b6:	f7f9 f92f 	bl	10054b18 <BLEPLAT_CNTR_SmGetTxPhy>
1005b8ba:	2804      	cmp	r0, #4
1005b8bc:	d001      	beq.n	1005b8c2 <llc_conn_check_instant_and_set_params+0x86>
1005b8be:	2806      	cmp	r0, #6
1005b8c0:	d100      	bne.n	1005b8c4 <llc_conn_check_instant_and_set_params+0x88>
1005b8c2:	2002      	movs	r0, #2
1005b8c4:	9b02      	ldr	r3, [sp, #8]
1005b8c6:	6979      	ldr	r1, [r7, #20]
1005b8c8:	4299      	cmp	r1, r3
1005b8ca:	460a      	mov	r2, r1
1005b8cc:	d300      	bcc.n	1005b8d0 <llc_conn_check_instant_and_set_params+0x94>
1005b8ce:	461a      	mov	r2, r3
1005b8d0:	6522      	str	r2, [r4, #80]	@ 0x50
1005b8d2:	0080      	lsls	r0, r0, #2
1005b8d4:	1820      	adds	r0, r4, r0
1005b8d6:	6581      	str	r1, [r0, #88]	@ 0x58
1005b8d8:	9801      	ldr	r0, [sp, #4]
1005b8da:	0840      	lsrs	r0, r0, #1
1005b8dc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
1005b8de:	1808      	adds	r0, r1, r0
1005b8e0:	6460      	str	r0, [r4, #68]	@ 0x44
1005b8e2:	e01b      	b.n	1005b91c <llc_conn_check_instant_and_set_params+0xe0>
1005b8e4:	2083      	movs	r0, #131	@ 0x83
1005b8e6:	0040      	lsls	r0, r0, #1
1005b8e8:	1827      	adds	r7, r4, r0
1005b8ea:	6b71      	ldr	r1, [r6, #52]	@ 0x34
1005b8ec:	7d68      	ldrb	r0, [r5, #21]
1005b8ee:	f7f9 f969 	bl	10054bc4 <BLEPLAT_CNTR_SmSetChannelMap>
1005b8f2:	7838      	ldrb	r0, [r7, #0]
1005b8f4:	2801      	cmp	r0, #1
1005b8f6:	d104      	bne.n	1005b902 <llc_conn_check_instant_and_set_params+0xc6>
1005b8f8:	6b71      	ldr	r1, [r6, #52]	@ 0x34
1005b8fa:	34e0      	adds	r4, #224	@ 0xe0
1005b8fc:	4620      	mov	r0, r4
1005b8fe:	f000 fdcf 	bl	1005c4a0 <llc_mngm_csa2_update_remapping_table>
1005b902:	8870      	ldrh	r0, [r6, #2]
1005b904:	2120      	movs	r1, #32
1005b906:	e018      	b.n	1005b93a <llc_conn_check_instant_and_set_params+0xfe>
1005b908:	f7ff f97c 	bl	1005ac04 <llc_conn_get_cntxt_p>
1005b90c:	9b02      	ldr	r3, [sp, #8]
1005b90e:	9901      	ldr	r1, [sp, #4]
1005b910:	6361      	str	r1, [r4, #52]	@ 0x34
1005b912:	6840      	ldr	r0, [r0, #4]
1005b914:	4298      	cmp	r0, r3
1005b916:	d300      	bcc.n	1005b91a <llc_conn_check_instant_and_set_params+0xde>
1005b918:	4618      	mov	r0, r3
1005b91a:	6520      	str	r0, [r4, #80]	@ 0x50
1005b91c:	68f8      	ldr	r0, [r7, #12]
1005b91e:	8720      	strh	r0, [r4, #56]	@ 0x38
1005b920:	6938      	ldr	r0, [r7, #16]
1005b922:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
1005b924:	180a      	adds	r2, r1, r0
1005b926:	6662      	str	r2, [r4, #100]	@ 0x64
1005b928:	66a0      	str	r0, [r4, #104]	@ 0x68
1005b92a:	4299      	cmp	r1, r3
1005b92c:	d003      	beq.n	1005b936 <llc_conn_check_instant_and_set_params+0xfa>
1005b92e:	64e3      	str	r3, [r4, #76]	@ 0x4c
1005b930:	4620      	mov	r0, r4
1005b932:	f000 ff72 	bl	1005c81a <llc_subrate_reset_params>
1005b936:	8870      	ldrh	r0, [r6, #2]
1005b938:	2108      	movs	r1, #8
1005b93a:	4388      	bics	r0, r1
1005b93c:	8070      	strh	r0, [r6, #2]
1005b93e:	8870      	ldrh	r0, [r6, #2]
1005b940:	2102      	movs	r1, #2
1005b942:	4301      	orrs	r1, r0
1005b944:	2001      	movs	r0, #1
1005b946:	4381      	bics	r1, r0
1005b948:	8071      	strh	r1, [r6, #2]
1005b94a:	2015      	movs	r0, #21
1005b94c:	f007 fd88 	bl	10063460 <tsk_notify_idx>
1005b950:	f7f6 ff09 	bl	10052766 <BLE_STACK_ProcessRequest>
1005b954:	7928      	ldrb	r0, [r5, #4]
1005b956:	f7f4 f8da 	bl	1004fb0e <LL_phy_upd_evt_pending_check_isr_ucfg>
1005b95a:	2000      	movs	r0, #0
1005b95c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005b95e:	46c0      	nop			@ (mov r8, r8)

1005b960 <__arm_cp.3_0>:
1005b960:	0000fbff 	.word	0x0000fbff

1005b964 <llc_conn_check_supervision_timer>:
1005b964:	6e42      	ldr	r2, [r0, #100]	@ 0x64
1005b966:	1a51      	subs	r1, r2, r1
1005b968:	6641      	str	r1, [r0, #100]	@ 0x64
1005b96a:	1e49      	subs	r1, r1, #1
1005b96c:	d401      	bmi.n	1005b972 <llc_conn_check_supervision_timer+0xe>
1005b96e:	2000      	movs	r0, #0
1005b970:	4770      	bx	lr
1005b972:	2188      	movs	r1, #136	@ 0x88
1005b974:	5c40      	ldrb	r0, [r0, r1]
1005b976:	0680      	lsls	r0, r0, #26
1005b978:	d501      	bpl.n	1005b97e <llc_conn_check_supervision_timer+0x1a>
1005b97a:	2008      	movs	r0, #8
1005b97c:	4770      	bx	lr
1005b97e:	203e      	movs	r0, #62	@ 0x3e
1005b980:	4770      	bx	lr

1005b982 <llc_conn_release_conn_idx>:
1005b982:	b580      	push	{r7, lr}
1005b984:	f7ff f948 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005b988:	212c      	movs	r1, #44	@ 0x2c
1005b98a:	2200      	movs	r2, #0
1005b98c:	5442      	strb	r2, [r0, r1]
1005b98e:	bd80      	pop	{r7, pc}

1005b990 <llc_conn_disconnect_link>:
1005b990:	b5b0      	push	{r4, r5, r7, lr}
1005b992:	460c      	mov	r4, r1
1005b994:	4601      	mov	r1, r0
1005b996:	0a02      	lsrs	r2, r0, #8
1005b998:	2012      	movs	r0, #18
1005b99a:	2a0e      	cmp	r2, #14
1005b99c:	d81c      	bhi.n	1005b9d8 <llc_conn_disconnect_link+0x48>
1005b99e:	2c1a      	cmp	r4, #26
1005b9a0:	d81a      	bhi.n	1005b9d8 <llc_conn_disconnect_link+0x48>
1005b9a2:	2201      	movs	r2, #1
1005b9a4:	40a2      	lsls	r2, r4
1005b9a6:	4b0d      	ldr	r3, [pc, #52]	@ (1005b9dc <__arm_cp.9_0>)
1005b9a8:	421a      	tst	r2, r3
1005b9aa:	d015      	beq.n	1005b9d8 <llc_conn_disconnect_link+0x48>
1005b9ac:	4608      	mov	r0, r1
1005b9ae:	f7ff f941 	bl	1005ac34 <llc_conn_get_cntxt_per_p_from_handle>
1005b9b2:	2800      	cmp	r0, #0
1005b9b4:	d008      	beq.n	1005b9c8 <llc_conn_disconnect_link+0x38>
1005b9b6:	4605      	mov	r5, r0
1005b9b8:	2030      	movs	r0, #48	@ 0x30
1005b9ba:	5c28      	ldrb	r0, [r5, r0]
1005b9bc:	f001 fd9b 	bl	1005d4f6 <LL_cpe_get_tx_terminate_in_progress>
1005b9c0:	2801      	cmp	r0, #1
1005b9c2:	d103      	bne.n	1005b9cc <llc_conn_disconnect_link+0x3c>
1005b9c4:	203a      	movs	r0, #58	@ 0x3a
1005b9c6:	bdb0      	pop	{r4, r5, r7, pc}
1005b9c8:	2002      	movs	r0, #2
1005b9ca:	bdb0      	pop	{r4, r5, r7, pc}
1005b9cc:	3530      	adds	r5, #48	@ 0x30
1005b9ce:	7828      	ldrb	r0, [r5, #0]
1005b9d0:	4621      	mov	r1, r4
1005b9d2:	f001 fd83 	bl	1005d4dc <LL_cpe_set_disconnect>
1005b9d6:	2000      	movs	r0, #0
1005b9d8:	bdb0      	pop	{r4, r5, r7, pc}
1005b9da:	46c0      	nop			@ (mov r8, r8)

1005b9dc <__arm_cp.9_0>:
1005b9dc:	04080020 	.word	0x04080020

1005b9e0 <llc_conn_disconnect_link_from_cpf>:
1005b9e0:	b510      	push	{r4, lr}
1005b9e2:	4604      	mov	r4, r0
1005b9e4:	202d      	movs	r0, #45	@ 0x2d
1005b9e6:	5421      	strb	r1, [r4, r0]
1005b9e8:	342d      	adds	r4, #45	@ 0x2d
1005b9ea:	7d20      	ldrb	r0, [r4, #20]
1005b9ec:	f005 fd72 	bl	100614d4 <LL_sched_delete_taskslot>
1005b9f0:	7d20      	ldrb	r0, [r4, #20]
1005b9f2:	f005 fdc1 	bl	10061578 <LL_sched_check_and_wait_sched>
1005b9f6:	bd10      	pop	{r4, pc}

1005b9f8 <llc_conn_go_to_connect>:
1005b9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b9fa:	b0ad      	sub	sp, #180	@ 0xb4
1005b9fc:	4605      	mov	r5, r0
1005b9fe:	7ac0      	ldrb	r0, [r0, #11]
1005ba00:	f7ff f90a 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005ba04:	4606      	mov	r6, r0
1005ba06:	f7ff f8fd 	bl	1005ac04 <llc_conn_get_cntxt_p>
1005ba0a:	901f      	str	r0, [sp, #124]	@ 0x7c
1005ba0c:	682c      	ldr	r4, [r5, #0]
1005ba0e:	2022      	movs	r0, #34	@ 0x22
1005ba10:	5c21      	ldrb	r1, [r4, r0]
1005ba12:	221f      	movs	r2, #31
1005ba14:	9217      	str	r2, [sp, #92]	@ 0x5c
1005ba16:	4011      	ands	r1, r2
1005ba18:	5421      	strb	r1, [r4, r0]
1005ba1a:	7d60      	ldrb	r0, [r4, #21]
1005ba1c:	9010      	str	r0, [sp, #64]	@ 0x40
1005ba1e:	7ba0      	ldrb	r0, [r4, #14]
1005ba20:	9020      	str	r0, [sp, #128]	@ 0x80
1005ba22:	7be0      	ldrb	r0, [r4, #15]
1005ba24:	900c      	str	r0, [sp, #48]	@ 0x30
1005ba26:	7c20      	ldrb	r0, [r4, #16]
1005ba28:	9018      	str	r0, [sp, #96]	@ 0x60
1005ba2a:	7c60      	ldrb	r0, [r4, #17]
1005ba2c:	901a      	str	r0, [sp, #104]	@ 0x68
1005ba2e:	7ca0      	ldrb	r0, [r4, #18]
1005ba30:	901c      	str	r0, [sp, #112]	@ 0x70
1005ba32:	7ce0      	ldrb	r0, [r4, #19]
1005ba34:	9013      	str	r0, [sp, #76]	@ 0x4c
1005ba36:	7d20      	ldrb	r0, [r4, #20]
1005ba38:	9016      	str	r0, [sp, #88]	@ 0x58
1005ba3a:	7da0      	ldrb	r0, [r4, #22]
1005ba3c:	9008      	str	r0, [sp, #32]
1005ba3e:	7de0      	ldrb	r0, [r4, #23]
1005ba40:	900e      	str	r0, [sp, #56]	@ 0x38
1005ba42:	7e20      	ldrb	r0, [r4, #24]
1005ba44:	9015      	str	r0, [sp, #84]	@ 0x54
1005ba46:	7e60      	ldrb	r0, [r4, #25]
1005ba48:	9009      	str	r0, [sp, #36]	@ 0x24
1005ba4a:	7ea0      	ldrb	r0, [r4, #26]
1005ba4c:	9011      	str	r0, [sp, #68]	@ 0x44
1005ba4e:	7ee0      	ldrb	r0, [r4, #27]
1005ba50:	900a      	str	r0, [sp, #40]	@ 0x28
1005ba52:	7f20      	ldrb	r0, [r4, #28]
1005ba54:	9014      	str	r0, [sp, #80]	@ 0x50
1005ba56:	7f60      	ldrb	r0, [r4, #29]
1005ba58:	900f      	str	r0, [sp, #60]	@ 0x3c
1005ba5a:	7820      	ldrb	r0, [r4, #0]
1005ba5c:	901d      	str	r0, [sp, #116]	@ 0x74
1005ba5e:	4620      	mov	r0, r4
1005ba60:	3022      	adds	r0, #34	@ 0x22
1005ba62:	7840      	ldrb	r0, [r0, #1]
1005ba64:	9019      	str	r0, [sp, #100]	@ 0x64
1005ba66:	7ba8      	ldrb	r0, [r5, #14]
1005ba68:	f7f9 f856 	bl	10054b18 <BLEPLAT_CNTR_SmGetTxPhy>
1005ba6c:	9022      	str	r0, [sp, #136]	@ 0x88
1005ba6e:	f004 ff77 	bl	10060960 <llc_get_channel_sel_algo2_enabled>
1005ba72:	900b      	str	r0, [sp, #44]	@ 0x2c
1005ba74:	2094      	movs	r0, #148	@ 0x94
1005ba76:	5830      	ldr	r0, [r6, r0]
1005ba78:	2300      	movs	r3, #0
1005ba7a:	6003      	str	r3, [r0, #0]
1005ba7c:	2090      	movs	r0, #144	@ 0x90
1005ba7e:	5830      	ldr	r0, [r6, r0]
1005ba80:	6003      	str	r3, [r0, #0]
1005ba82:	20a8      	movs	r0, #168	@ 0xa8
1005ba84:	5233      	strh	r3, [r6, r0]
1005ba86:	2042      	movs	r0, #66	@ 0x42
1005ba88:	5233      	strh	r3, [r6, r0]
1005ba8a:	202d      	movs	r0, #45	@ 0x2d
1005ba8c:	5433      	strb	r3, [r6, r0]
1005ba8e:	2045      	movs	r0, #69	@ 0x45
1005ba90:	0080      	lsls	r0, r0, #2
1005ba92:	5033      	str	r3, [r6, r0]
1005ba94:	2111      	movs	r1, #17
1005ba96:	0109      	lsls	r1, r1, #4
1005ba98:	5473      	strb	r3, [r6, r1]
1005ba9a:	2121      	movs	r1, #33	@ 0x21
1005ba9c:	00c9      	lsls	r1, r1, #3
1005ba9e:	227f      	movs	r2, #127	@ 0x7f
1005baa0:	5472      	strb	r2, [r6, r1]
1005baa2:	212f      	movs	r1, #47	@ 0x2f
1005baa4:	2207      	movs	r2, #7
1005baa6:	5472      	strb	r2, [r6, r1]
1005baa8:	2188      	movs	r1, #136	@ 0x88
1005baaa:	5073      	str	r3, [r6, r1]
1005baac:	218c      	movs	r1, #140	@ 0x8c
1005baae:	5073      	str	r3, [r6, r1]
1005bab0:	4631      	mov	r1, r6
1005bab2:	31a8      	adds	r1, #168	@ 0xa8
1005bab4:	810b      	strh	r3, [r1, #8]
1005bab6:	9121      	str	r1, [sp, #132]	@ 0x84
1005bab8:	728b      	strb	r3, [r1, #10]
1005baba:	1830      	adds	r0, r6, r0
1005babc:	931e      	str	r3, [sp, #120]	@ 0x78
1005babe:	900d      	str	r0, [sp, #52]	@ 0x34
1005bac0:	6043      	str	r3, [r0, #4]
1005bac2:	2701      	movs	r7, #1
1005bac4:	8537      	strh	r7, [r6, #40]	@ 0x28
1005bac6:	9523      	str	r5, [sp, #140]	@ 0x8c
1005bac8:	7ba8      	ldrb	r0, [r5, #14]
1005baca:	2141      	movs	r1, #65	@ 0x41
1005bacc:	5470      	strb	r0, [r6, r1]
1005bace:	9a19      	ldr	r2, [sp, #100]	@ 0x64
1005bad0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1005bad2:	4002      	ands	r2, r0
1005bad4:	7ae8      	ldrb	r0, [r5, #11]
1005bad6:	2131      	movs	r1, #49	@ 0x31
1005bad8:	921b      	str	r2, [sp, #108]	@ 0x6c
1005bada:	5472      	strb	r2, [r6, r1]
1005badc:	2130      	movs	r1, #48	@ 0x30
1005bade:	9112      	str	r1, [sp, #72]	@ 0x48
1005bae0:	5470      	strb	r0, [r6, r1]
1005bae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005bae4:	0200      	lsls	r0, r0, #8
1005bae6:	9915      	ldr	r1, [sp, #84]	@ 0x54
1005bae8:	1840      	adds	r0, r0, r1
1005baea:	9015      	str	r0, [sp, #84]	@ 0x54
1005baec:	b280      	uxth	r0, r0
1005baee:	0241      	lsls	r1, r0, #9
1005baf0:	64f1      	str	r1, [r6, #76]	@ 0x4c
1005baf2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1005baf4:	0209      	lsls	r1, r1, #8
1005baf6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
1005baf8:	1889      	adds	r1, r1, r2
1005bafa:	9114      	str	r1, [sp, #80]	@ 0x50
1005bafc:	b289      	uxth	r1, r1
1005bafe:	0309      	lsls	r1, r1, #12
1005bb00:	2203      	movs	r2, #3
1005bb02:	920f      	str	r2, [sp, #60]	@ 0x3c
1005bb04:	0292      	lsls	r2, r2, #10
1005bb06:	4342      	muls	r2, r0
1005bb08:	6672      	str	r2, [r6, #100]	@ 0x64
1005bb0a:	66b1      	str	r1, [r6, #104]	@ 0x68
1005bb0c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1005bb0e:	0200      	lsls	r0, r0, #8
1005bb10:	991c      	ldr	r1, [sp, #112]	@ 0x70
1005bb12:	1840      	adds	r0, r0, r1
1005bb14:	9916      	ldr	r1, [sp, #88]	@ 0x58
1005bb16:	0409      	lsls	r1, r1, #16
1005bb18:	1840      	adds	r0, r0, r1
1005bb1a:	9016      	str	r0, [sp, #88]	@ 0x58
1005bb1c:	6570      	str	r0, [r6, #84]	@ 0x54
1005bb1e:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005bb20:	0200      	lsls	r0, r0, #8
1005bb22:	9911      	ldr	r1, [sp, #68]	@ 0x44
1005bb24:	1840      	adds	r0, r0, r1
1005bb26:	9011      	str	r0, [sp, #68]	@ 0x44
1005bb28:	8730      	strh	r0, [r6, #56]	@ 0x38
1005bb2a:	25ff      	movs	r5, #255	@ 0xff
1005bb2c:	950a      	str	r5, [sp, #40]	@ 0x28
1005bb2e:	3512      	adds	r5, #18
1005bb30:	f005 fa08 	bl	10060f44 <llc_get_next_free_conn_handle>
1005bb34:	971c      	str	r7, [sp, #112]	@ 0x70
1005bb36:	5577      	strb	r7, [r6, r5]
1005bb38:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005bb3a:	8770      	strh	r0, [r6, #58]	@ 0x3a
1005bb3c:	207d      	movs	r0, #125	@ 0x7d
1005bb3e:	0440      	lsls	r0, r0, #17
1005bb40:	66f0      	str	r0, [r6, #108]	@ 0x6c
1005bb42:	6730      	str	r0, [r6, #112]	@ 0x70
1005bb44:	2083      	movs	r0, #131	@ 0x83
1005bb46:	0040      	lsls	r0, r0, #1
1005bb48:	1833      	adds	r3, r6, r0
1005bb4a:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005bb4c:	0200      	lsls	r0, r0, #8
1005bb4e:	9920      	ldr	r1, [sp, #128]	@ 0x80
1005bb50:	1840      	adds	r0, r0, r1
1005bb52:	9918      	ldr	r1, [sp, #96]	@ 0x60
1005bb54:	0409      	lsls	r1, r1, #16
1005bb56:	1840      	adds	r0, r0, r1
1005bb58:	991a      	ldr	r1, [sp, #104]	@ 0x68
1005bb5a:	0609      	lsls	r1, r1, #24
1005bb5c:	1840      	adds	r0, r0, r1
1005bb5e:	901a      	str	r0, [sp, #104]	@ 0x68
1005bb60:	4632      	mov	r2, r6
1005bb62:	322c      	adds	r2, #44	@ 0x2c
1005bb64:	341e      	adds	r4, #30
1005bb66:	9418      	str	r4, [sp, #96]	@ 0x60
1005bb68:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005bb6a:	2801      	cmp	r0, #1
1005bb6c:	9220      	str	r2, [sp, #128]	@ 0x80
1005bb6e:	9313      	str	r3, [sp, #76]	@ 0x4c
1005bb70:	d106      	bne.n	1005bb80 <llc_conn_go_to_connect+0x188>
1005bb72:	7c38      	ldrb	r0, [r7, #16]
1005bb74:	2801      	cmp	r0, #1
1005bb76:	d103      	bne.n	1005bb80 <llc_conn_go_to_connect+0x188>
1005bb78:	2020      	movs	r0, #32
1005bb7a:	991d      	ldr	r1, [sp, #116]	@ 0x74
1005bb7c:	4008      	ands	r0, r1
1005bb7e:	d104      	bne.n	1005bb8a <llc_conn_go_to_connect+0x192>
1005bb80:	7b38      	ldrb	r0, [r7, #12]
1005bb82:	21fe      	movs	r1, #254	@ 0xfe
1005bb84:	4001      	ands	r1, r0
1005bb86:	2902      	cmp	r1, #2
1005bb88:	d11b      	bne.n	1005bbc2 <llc_conn_go_to_connect+0x1ca>
1005bb8a:	2001      	movs	r0, #1
1005bb8c:	7018      	strb	r0, [r3, #0]
1005bb8e:	7bb8      	ldrb	r0, [r7, #14]
1005bb90:	9c18      	ldr	r4, [sp, #96]	@ 0x60
1005bb92:	4621      	mov	r1, r4
1005bb94:	f7f9 f816 	bl	10054bc4 <BLEPLAT_CNTR_SmSetChannelMap>
1005bb98:	4635      	mov	r5, r6
1005bb9a:	35e0      	adds	r5, #224	@ 0xe0
1005bb9c:	4628      	mov	r0, r5
1005bb9e:	4621      	mov	r1, r4
1005bba0:	f000 fc7e 	bl	1005c4a0 <llc_mngm_csa2_update_remapping_table>
1005bba4:	9820      	ldr	r0, [sp, #128]	@ 0x80
1005bba6:	7d40      	ldrb	r0, [r0, #21]
1005bba8:	2200      	movs	r2, #0
1005bbaa:	9200      	str	r2, [sp, #0]
1005bbac:	991a      	ldr	r1, [sp, #104]	@ 0x68
1005bbae:	9101      	str	r1, [sp, #4]
1005bbb0:	9202      	str	r2, [sp, #8]
1005bbb2:	4629      	mov	r1, r5
1005bbb4:	921b      	str	r2, [sp, #108]	@ 0x6c
1005bbb6:	4613      	mov	r3, r2
1005bbb8:	f000 fc8d 	bl	1005c4d6 <llc_mngm_csa2_select_channel_for_task>
1005bbbc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
1005bbbe:	901e      	str	r0, [sp, #120]	@ 0x78
1005bbc0:	e001      	b.n	1005bbc6 <llc_conn_go_to_connect+0x1ce>
1005bbc2:	981e      	ldr	r0, [sp, #120]	@ 0x78
1005bbc4:	7018      	strb	r0, [r3, #0]
1005bbc6:	209f      	movs	r0, #159	@ 0x9f
1005bbc8:	990d      	ldr	r1, [sp, #52]	@ 0x34
1005bbca:	7788      	strb	r0, [r1, #30]
1005bbcc:	48f8      	ldr	r0, [pc, #992]	@ (1005bfb0 <__arm_cp.11_0>)
1005bbce:	8388      	strh	r0, [r1, #28]
1005bbd0:	48f8      	ldr	r0, [pc, #992]	@ (1005bfb4 <__arm_cp.11_1>)
1005bbd2:	8348      	strh	r0, [r1, #26]
1005bbd4:	6e10      	ldr	r0, [r2, #96]	@ 0x60
1005bbd6:	991c      	ldr	r1, [sp, #112]	@ 0x70
1005bbd8:	4388      	bics	r0, r1
1005bbda:	6610      	str	r0, [r2, #96]	@ 0x60
1005bbdc:	7af8      	ldrb	r0, [r7, #11]
1005bbde:	f7f3 ff86 	bl	1004faee <LL_phy_update_init_per_st_data_ucfg>
1005bbe2:	2029      	movs	r0, #41	@ 0x29
1005bbe4:	00c5      	lsls	r5, r0, #3
1005bbe6:	20a9      	movs	r0, #169	@ 0xa9
1005bbe8:	0107      	lsls	r7, r0, #4
1005bbea:	f7fe fb3f 	bl	1005a26c <data_length_extension_csr_ucfg_weak>
1005bbee:	2801      	cmp	r0, #1
1005bbf0:	d118      	bne.n	1005bc24 <llc_conn_go_to_connect+0x22c>
1005bbf2:	981f      	ldr	r0, [sp, #124]	@ 0x7c
1005bbf4:	8980      	ldrh	r0, [r0, #12]
1005bbf6:	281b      	cmp	r0, #27
1005bbf8:	d10f      	bne.n	1005bc1a <llc_conn_go_to_connect+0x222>
1005bbfa:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005bbfc:	2804      	cmp	r0, #4
1005bbfe:	d108      	bne.n	1005bc12 <llc_conn_go_to_connect+0x21a>
1005bc00:	981f      	ldr	r0, [sp, #124]	@ 0x7c
1005bc02:	8a40      	ldrh	r0, [r0, #18]
1005bc04:	42b8      	cmp	r0, r7
1005bc06:	d108      	bne.n	1005bc1a <llc_conn_go_to_connect+0x222>
1005bc08:	201b      	movs	r0, #27
1005bc0a:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005bc0c:	8208      	strh	r0, [r1, #16]
1005bc0e:	8188      	strh	r0, [r1, #12]
1005bc10:	e010      	b.n	1005bc34 <llc_conn_go_to_connect+0x23c>
1005bc12:	981f      	ldr	r0, [sp, #124]	@ 0x7c
1005bc14:	8a00      	ldrh	r0, [r0, #16]
1005bc16:	42a8      	cmp	r0, r5
1005bc18:	d004      	beq.n	1005bc24 <llc_conn_go_to_connect+0x22c>
1005bc1a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
1005bc1c:	6e10      	ldr	r0, [r2, #96]	@ 0x60
1005bc1e:	2104      	movs	r1, #4
1005bc20:	4301      	orrs	r1, r0
1005bc22:	6611      	str	r1, [r2, #96]	@ 0x60
1005bc24:	201b      	movs	r0, #27
1005bc26:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005bc28:	8208      	strh	r0, [r1, #16]
1005bc2a:	8188      	strh	r0, [r1, #12]
1005bc2c:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005bc2e:	2804      	cmp	r0, #4
1005bc30:	d000      	beq.n	1005bc34 <llc_conn_go_to_connect+0x23c>
1005bc32:	462f      	mov	r7, r5
1005bc34:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005bc36:	0200      	lsls	r0, r0, #8
1005bc38:	900e      	str	r0, [sp, #56]	@ 0x38
1005bc3a:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005bc3c:	828f      	strh	r7, [r1, #20]
1005bc3e:	824f      	strh	r7, [r1, #18]
1005bc40:	830f      	strh	r7, [r1, #24]
1005bc42:	201b      	movs	r0, #27
1005bc44:	82c8      	strh	r0, [r1, #22]
1005bc46:	81c8      	strh	r0, [r1, #14]
1005bc48:	83cf      	strh	r7, [r1, #30]
1005bc4a:	838f      	strh	r7, [r1, #28]
1005bc4c:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
1005bc4e:	8b68      	ldrh	r0, [r5, #26]
1005bc50:	8348      	strh	r0, [r1, #26]
1005bc52:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005bc54:	7af8      	ldrb	r0, [r7, #11]
1005bc56:	f002 f8cf 	bl	1005ddf8 <llc_conn_init_cte_ctxt_ucfg_weak>
1005bc5a:	7af8      	ldrb	r0, [r7, #11]
1005bc5c:	f002 ffe4 	bl	1005ec28 <llc_conn_init_pcl_ctxt_ucfg_weak>
1005bc60:	7af8      	ldrb	r0, [r7, #11]
1005bc62:	f001 fe87 	bl	1005d974 <LLC_conn_init_chc_ctxt_ucfg_weak>
1005bc66:	4628      	mov	r0, r5
1005bc68:	4631      	mov	r1, r6
1005bc6a:	f000 fdcb 	bl	1005c804 <llc_subrate_init_acceptable_per>
1005bc6e:	7af8      	ldrb	r0, [r7, #11]
1005bc70:	f002 ffde 	bl	1005ec30 <LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak>
1005bc74:	7af8      	ldrb	r0, [r7, #11]
1005bc76:	f000 fd4b 	bl	1005c710 <llc_past_init_ucfg_weak>
1005bc7a:	4630      	mov	r0, r6
1005bc7c:	f002 fe44 	bl	1005e908 <LLC_init_le_ping_params>
1005bc80:	7af8      	ldrb	r0, [r7, #11]
1005bc82:	f001 fc5b 	bl	1005d53c <llc_cpe_init_sm_ctxt>
1005bc86:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005bc88:	f7f9 f937 	bl	10054efa <BLEPLAT_CNTR_DemodDelaySt>
1005bc8c:	7b39      	ldrb	r1, [r7, #12]
1005bc8e:	4aca      	ldr	r2, [pc, #808]	@ (1005bfb8 <__arm_cp.11_2>)
1005bc90:	6812      	ldr	r2, [r2, #0]
1005bc92:	6817      	ldr	r7, [r2, #0]
1005bc94:	2903      	cmp	r1, #3
1005bc96:	d004      	beq.n	1005bca2 <llc_conn_go_to_connect+0x2aa>
1005bc98:	2902      	cmp	r1, #2
1005bc9a:	d10b      	bne.n	1005bcb4 <llc_conn_go_to_connect+0x2bc>
1005bc9c:	1a38      	subs	r0, r7, r0
1005bc9e:	383e      	subs	r0, #62	@ 0x3e
1005bca0:	e012      	b.n	1005bcc8 <llc_conn_go_to_connect+0x2d0>
1005bca2:	210e      	movs	r1, #14
1005bca4:	9d22      	ldr	r5, [sp, #136]	@ 0x88
1005bca6:	4628      	mov	r0, r5
1005bca8:	f004 ff26 	bl	10060af8 <LL_link_calc_packetlength>
1005bcac:	1a38      	subs	r0, r7, r0
1005bcae:	383e      	subs	r0, #62	@ 0x3e
1005bcb0:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005bcb2:	e00b      	b.n	1005bccc <llc_conn_go_to_connect+0x2d4>
1005bcb4:	9923      	ldr	r1, [sp, #140]	@ 0x8c
1005bcb6:	7b49      	ldrb	r1, [r1, #13]
1005bcb8:	1a38      	subs	r0, r7, r0
1005bcba:	2900      	cmp	r1, #0
1005bcbc:	d001      	beq.n	1005bcc2 <llc_conn_go_to_connect+0x2ca>
1005bcbe:	3090      	adds	r0, #144	@ 0x90
1005bcc0:	e002      	b.n	1005bcc8 <llc_conn_go_to_connect+0x2d0>
1005bcc2:	2181      	movs	r1, #129	@ 0x81
1005bcc4:	0049      	lsls	r1, r1, #1
1005bcc6:	1840      	adds	r0, r0, r1
1005bcc8:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005bcca:	9d22      	ldr	r5, [sp, #136]	@ 0x88
1005bccc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1005bcce:	9908      	ldr	r1, [sp, #32]
1005bcd0:	065a      	lsls	r2, r3, #25
1005bcd2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1005bcd4:	1861      	adds	r1, r4, r1
1005bcd6:	2d04      	cmp	r5, #4
1005bcd8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
1005bcda:	d007      	beq.n	1005bcec <llc_conn_go_to_connect+0x2f4>
1005bcdc:	7b3d      	ldrb	r5, [r7, #12]
1005bcde:	23fe      	movs	r3, #254	@ 0xfe
1005bce0:	402b      	ands	r3, r5
1005bce2:	2b02      	cmp	r3, #2
1005bce4:	d100      	bne.n	1005bce8 <llc_conn_go_to_connect+0x2f0>
1005bce6:	931c      	str	r3, [sp, #112]	@ 0x70
1005bce8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
1005bcea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1005bcec:	09db      	lsrs	r3, r3, #7
1005bcee:	930e      	str	r3, [sp, #56]	@ 0x38
1005bcf0:	0fd2      	lsrs	r2, r2, #31
1005bcf2:	920f      	str	r2, [sp, #60]	@ 0x3c
1005bcf4:	1861      	adds	r1, r4, r1
1005bcf6:	024d      	lsls	r5, r1, #9
1005bcf8:	1829      	adds	r1, r5, r0
1005bcfa:	683c      	ldr	r4, [r7, #0]
1005bcfc:	7b78      	ldrb	r0, [r7, #13]
1005bcfe:	2800      	cmp	r0, #0
1005bd00:	d02a      	beq.n	1005bd58 <llc_conn_go_to_connect+0x360>
1005bd02:	911d      	str	r1, [sp, #116]	@ 0x74
1005bd04:	9819      	ldr	r0, [sp, #100]	@ 0x64
1005bd06:	0947      	lsrs	r7, r0, #5
1005bd08:	f004 ff12 	bl	10060b30 <LL_link_get_own_sca_ppm>
1005bd0c:	9019      	str	r0, [sp, #100]	@ 0x64
1005bd0e:	971c      	str	r7, [sp, #112]	@ 0x70
1005bd10:	4638      	mov	r0, r7
1005bd12:	f000 fd8f 	bl	1005c834 <llc_convert_sca_to_ppm>
1005bd16:	2103      	movs	r1, #3
1005bd18:	9a20      	ldr	r2, [sp, #128]	@ 0x80
1005bd1a:	7011      	strb	r1, [r2, #0]
1005bd1c:	9910      	ldr	r1, [sp, #64]	@ 0x40
1005bd1e:	0249      	lsls	r1, r1, #9
1005bd20:	6371      	str	r1, [r6, #52]	@ 0x34
1005bd22:	9919      	ldr	r1, [sp, #100]	@ 0x64
1005bd24:	1840      	adds	r0, r0, r1
1005bd26:	8570      	strh	r0, [r6, #42]	@ 0x2a
1005bd28:	6cf1      	ldr	r1, [r6, #76]	@ 0x4c
1005bd2a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
1005bd2c:	6852      	ldr	r2, [r2, #4]
1005bd2e:	4291      	cmp	r1, r2
1005bd30:	d300      	bcc.n	1005bd34 <llc_conn_go_to_connect+0x33c>
1005bd32:	4611      	mov	r1, r2
1005bd34:	6531      	str	r1, [r6, #80]	@ 0x50
1005bd36:	b280      	uxth	r0, r0
1005bd38:	4629      	mov	r1, r5
1005bd3a:	f004 fed3 	bl	10060ae4 <LL_link_calculate_window_widening_from_ppm>
1005bd3e:	300d      	adds	r0, #13
1005bd40:	0041      	lsls	r1, r0, #1
1005bd42:	6b72      	ldr	r2, [r6, #52]	@ 0x34
1005bd44:	188a      	adds	r2, r1, r2
1005bd46:	1ca4      	adds	r4, r4, #2
1005bd48:	941f      	str	r4, [sp, #124]	@ 0x7c
1005bd4a:	2102      	movs	r1, #2
1005bd4c:	9110      	str	r1, [sp, #64]	@ 0x40
1005bd4e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
1005bd50:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005bd52:	4b99      	ldr	r3, [pc, #612]	@ (1005bfb8 <__arm_cp.11_2>)
1005bd54:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
1005bd56:	e01b      	b.n	1005bd90 <llc_conn_go_to_connect+0x398>
1005bd58:	460d      	mov	r5, r1
1005bd5a:	2102      	movs	r1, #2
1005bd5c:	9820      	ldr	r0, [sp, #128]	@ 0x80
1005bd5e:	7001      	strb	r1, [r0, #0]
1005bd60:	2000      	movs	r0, #0
1005bd62:	8570      	strh	r0, [r6, #42]	@ 0x2a
1005bd64:	9a22      	ldr	r2, [sp, #136]	@ 0x88
1005bd66:	2a04      	cmp	r2, #4
1005bd68:	d000      	beq.n	1005bd6c <llc_conn_go_to_connect+0x374>
1005bd6a:	4611      	mov	r1, r2
1005bd6c:	0089      	lsls	r1, r1, #2
1005bd6e:	1871      	adds	r1, r6, r1
1005bd70:	6d89      	ldr	r1, [r1, #88]	@ 0x58
1005bd72:	6cf2      	ldr	r2, [r6, #76]	@ 0x4c
1005bd74:	428a      	cmp	r2, r1
1005bd76:	4b90      	ldr	r3, [pc, #576]	@ (1005bfb8 <__arm_cp.11_2>)
1005bd78:	d300      	bcc.n	1005bd7c <llc_conn_go_to_connect+0x384>
1005bd7a:	460a      	mov	r2, r1
1005bd7c:	6532      	str	r2, [r6, #80]	@ 0x50
1005bd7e:	9910      	ldr	r1, [sp, #64]	@ 0x40
1005bd80:	0209      	lsls	r1, r1, #8
1005bd82:	186d      	adds	r5, r5, r1
1005bd84:	3408      	adds	r4, #8
1005bd86:	941f      	str	r4, [sp, #124]	@ 0x7c
1005bd88:	2185      	movs	r1, #133	@ 0x85
1005bd8a:	9110      	str	r1, [sp, #64]	@ 0x40
1005bd8c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1005bd8e:	901c      	str	r0, [sp, #112]	@ 0x70
1005bd90:	6475      	str	r5, [r6, #68]	@ 0x44
1005bd92:	64b0      	str	r0, [r6, #72]	@ 0x48
1005bd94:	a824      	add	r0, sp, #144	@ 0x90
1005bd96:	2100      	movs	r1, #0
1005bd98:	8081      	strh	r1, [r0, #4]
1005bd9a:	911d      	str	r1, [sp, #116]	@ 0x74
1005bd9c:	9124      	str	r1, [sp, #144]	@ 0x90
1005bd9e:	6818      	ldr	r0, [r3, #0]
1005bda0:	213d      	movs	r1, #61	@ 0x3d
1005bda2:	5c41      	ldrb	r1, [r0, r1]
1005bda4:	0689      	lsls	r1, r1, #26
1005bda6:	9219      	str	r2, [sp, #100]	@ 0x64
1005bda8:	d506      	bpl.n	1005bdb8 <llc_conn_go_to_connect+0x3c0>
1005bdaa:	303d      	adds	r0, #61	@ 0x3d
1005bdac:	7b81      	ldrb	r1, [r0, #14]
1005bdae:	07c9      	lsls	r1, r1, #31
1005bdb0:	d105      	bne.n	1005bdbe <llc_conn_go_to_connect+0x3c6>
1005bdb2:	7a80      	ldrb	r0, [r0, #10]
1005bdb4:	0780      	lsls	r0, r0, #30
1005bdb6:	d402      	bmi.n	1005bdbe <llc_conn_go_to_connect+0x3c6>
1005bdb8:	4627      	mov	r7, r4
1005bdba:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
1005bdbc:	e036      	b.n	1005be2c <llc_conn_go_to_connect+0x434>
1005bdbe:	6878      	ldr	r0, [r7, #4]
1005bdc0:	6801      	ldr	r1, [r0, #0]
1005bdc2:	23fe      	movs	r3, #254	@ 0xfe
1005bdc4:	400b      	ands	r3, r1
1005bdc6:	aa24      	add	r2, sp, #144	@ 0x90
1005bdc8:	2b02      	cmp	r3, #2
1005bdca:	d000      	beq.n	1005bdce <llc_conn_go_to_connect+0x3d6>
1005bdcc:	921f      	str	r2, [sp, #124]	@ 0x7c
1005bdce:	b2cd      	uxtb	r5, r1
1005bdd0:	7b79      	ldrb	r1, [r7, #13]
1005bdd2:	2900      	cmp	r1, #0
1005bdd4:	d00c      	beq.n	1005bdf0 <llc_conn_go_to_connect+0x3f8>
1005bdd6:	a924      	add	r1, sp, #144	@ 0x90
1005bdd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005bdda:	2a00      	cmp	r2, #0
1005bddc:	d016      	beq.n	1005be0c <llc_conn_go_to_connect+0x414>
1005bdde:	6839      	ldr	r1, [r7, #0]
1005bde0:	7b4a      	ldrb	r2, [r1, #13]
1005bde2:	23c0      	movs	r3, #192	@ 0xc0
1005bde4:	4013      	ands	r3, r2
1005bde6:	aa24      	add	r2, sp, #144	@ 0x90
1005bde8:	2b40      	cmp	r3, #64	@ 0x40
1005bdea:	d00e      	beq.n	1005be0a <llc_conn_go_to_connect+0x412>
1005bdec:	4611      	mov	r1, r2
1005bdee:	e00d      	b.n	1005be0c <llc_conn_go_to_connect+0x414>
1005bdf0:	a924      	add	r1, sp, #144	@ 0x90
1005bdf2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1005bdf4:	2a00      	cmp	r2, #0
1005bdf6:	d009      	beq.n	1005be0c <llc_conn_go_to_connect+0x414>
1005bdf8:	683a      	ldr	r2, [r7, #0]
1005bdfa:	79d1      	ldrb	r1, [r2, #7]
1005bdfc:	23c0      	movs	r3, #192	@ 0xc0
1005bdfe:	400b      	ands	r3, r1
1005be00:	a924      	add	r1, sp, #144	@ 0x90
1005be02:	2b40      	cmp	r3, #64	@ 0x40
1005be04:	d102      	bne.n	1005be0c <llc_conn_go_to_connect+0x414>
1005be06:	1c91      	adds	r1, r2, #2
1005be08:	e000      	b.n	1005be0c <llc_conn_go_to_connect+0x414>
1005be0a:	3108      	adds	r1, #8
1005be0c:	7aba      	ldrb	r2, [r7, #10]
1005be0e:	ab26      	add	r3, sp, #152	@ 0x98
1005be10:	759a      	strb	r2, [r3, #22]
1005be12:	893a      	ldrh	r2, [r7, #8]
1005be14:	829a      	strh	r2, [r3, #20]
1005be16:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
1005be18:	9227      	str	r2, [sp, #156]	@ 0x9c
1005be1a:	9128      	str	r1, [sp, #160]	@ 0xa0
1005be1c:	2dfe      	cmp	r5, #254	@ 0xfe
1005be1e:	d003      	beq.n	1005be28 <llc_conn_go_to_connect+0x430>
1005be20:	2103      	movs	r1, #3
1005be22:	400d      	ands	r5, r1
1005be24:	462f      	mov	r7, r5
1005be26:	e000      	b.n	1005be2a <llc_conn_go_to_connect+0x432>
1005be28:	2701      	movs	r7, #1
1005be2a:	1c44      	adds	r4, r0, #1
1005be2c:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005be2e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
1005be30:	630d      	str	r5, [r1, #48]	@ 0x30
1005be32:	2001      	movs	r0, #1
1005be34:	4038      	ands	r0, r7
1005be36:	9a12      	ldr	r2, [sp, #72]	@ 0x48
1005be38:	5488      	strb	r0, [r1, r2]
1005be3a:	634d      	str	r5, [r1, #52]	@ 0x34
1005be3c:	4608      	mov	r0, r1
1005be3e:	3030      	adds	r0, #48	@ 0x30
1005be40:	1c40      	adds	r0, r0, #1
1005be42:	2206      	movs	r2, #6
1005be44:	4621      	mov	r1, r4
1005be46:	f7f7 fa75 	bl	10053334 <BLEPLAT_MemCpy>
1005be4a:	a826      	add	r0, sp, #152	@ 0x98
1005be4c:	7685      	strb	r5, [r0, #26]
1005be4e:	7607      	strb	r7, [r0, #24]
1005be50:	991c      	ldr	r1, [sp, #112]	@ 0x70
1005be52:	75c1      	strb	r1, [r0, #23]
1005be54:	9914      	ldr	r1, [sp, #80]	@ 0x50
1005be56:	8241      	strh	r1, [r0, #18]
1005be58:	9911      	ldr	r1, [sp, #68]	@ 0x44
1005be5a:	8201      	strh	r1, [r0, #16]
1005be5c:	9915      	ldr	r1, [sp, #84]	@ 0x54
1005be5e:	8181      	strh	r1, [r0, #12]
1005be60:	8f71      	ldrh	r1, [r6, #58]	@ 0x3a
1005be62:	81c1      	strh	r1, [r0, #14]
1005be64:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005be66:	7b79      	ldrb	r1, [r7, #13]
1005be68:	7641      	strb	r1, [r0, #25]
1005be6a:	9426      	str	r4, [sp, #152]	@ 0x98
1005be6c:	f7ff fa86 	bl	1005b37c <llc_conn_push_connection_complete_event>
1005be70:	7bf8      	ldrb	r0, [r7, #15]
1005be72:	2800      	cmp	r0, #0
1005be74:	d003      	beq.n	1005be7e <llc_conn_go_to_connect+0x486>
1005be76:	7ab9      	ldrb	r1, [r7, #10]
1005be78:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
1005be7a:	f7ff fa41 	bl	1005b300 <llc_conn_push_adv_set_terminated_event>
1005be7e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1005be80:	7801      	ldrb	r1, [r0, #0]
1005be82:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
1005be84:	f7ff fbb0 	bl	1005b5e8 <llc_conn_push_csa_event>
1005be88:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005be8a:	6b08      	ldr	r0, [r1, #48]	@ 0x30
1005be8c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
1005be8e:	f7ff f9df 	bl	1005b250 <llc_conn_list_add_address>
1005be92:	7b7c      	ldrb	r4, [r7, #13]
1005be94:	7bbf      	ldrb	r7, [r7, #14]
1005be96:	4638      	mov	r0, r7
1005be98:	f7f8 fe4f 	bl	10054b3a <BLEPLAT_CNTR_SmGetTxPwr>
1005be9c:	9021      	str	r0, [sp, #132]	@ 0x84
1005be9e:	4638      	mov	r0, r7
1005bea0:	f7f8 fe60 	bl	10054b64 <BLEPLAT_CNTR_SmInitTo0>
1005bea4:	4638      	mov	r0, r7
1005bea6:	9d22      	ldr	r5, [sp, #136]	@ 0x88
1005bea8:	4629      	mov	r1, r5
1005beaa:	f7f8 ffd8 	bl	10054e5e <BLEPLAT_CNTR_SmSetTxPhy>
1005beae:	4638      	mov	r0, r7
1005beb0:	4629      	mov	r1, r5
1005beb2:	f7f8 ff68 	bl	10054d86 <BLEPLAT_CNTR_SmSetRxPhy>
1005beb6:	4638      	mov	r0, r7
1005beb8:	9918      	ldr	r1, [sp, #96]	@ 0x60
1005beba:	f7f8 fe83 	bl	10054bc4 <BLEPLAT_CNTR_SmSetChannelMap>
1005bebe:	4638      	mov	r0, r7
1005bec0:	991a      	ldr	r1, [sp, #104]	@ 0x68
1005bec2:	f7f8 fe6d 	bl	10054ba0 <BLEPLAT_CNTR_SmSetAccessAddr>
1005bec6:	4638      	mov	r0, r7
1005bec8:	991e      	ldr	r1, [sp, #120]	@ 0x78
1005beca:	f7f8 fff2 	bl	10054eb2 <BLEPLAT_CNTR_SmSetUnmappedChan>
1005bece:	4638      	mov	r0, r7
1005bed0:	991b      	ldr	r1, [sp, #108]	@ 0x6c
1005bed2:	f7f8 fecf 	bl	10054c74 <BLEPLAT_CNTR_SmSetHopIncr>
1005bed6:	4638      	mov	r0, r7
1005bed8:	9916      	ldr	r1, [sp, #88]	@ 0x58
1005beda:	f7f8 fea4 	bl	10054c26 <BLEPLAT_CNTR_SmSetCrcInit>
1005bede:	4638      	mov	r0, r7
1005bee0:	4631      	mov	r1, r6
1005bee2:	f7f8 ffaa 	bl	10054e3a <BLEPLAT_CNTR_SmSetTxPacketPtr>
1005bee6:	4635      	mov	r5, r6
1005bee8:	3514      	adds	r5, #20
1005beea:	4638      	mov	r0, r7
1005beec:	4629      	mov	r1, r5
1005beee:	f7f8 ff38 	bl	10054d62 <BLEPLAT_CNTR_SmSetRxPacketPtr>
1005bef2:	4638      	mov	r0, r7
1005bef4:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005bef6:	f7f8 ffc7 	bl	10054e88 <BLEPLAT_CNTR_SmSetTxPwr>
1005befa:	f7fe f95b 	bl	1005a1b4 <cte_csr_ucfg_weak>
1005befe:	2800      	cmp	r0, #0
1005bf00:	d102      	bne.n	1005bf08 <llc_conn_go_to_connect+0x510>
1005bf02:	4638      	mov	r0, r7
1005bf04:	f7f8 fcd2 	bl	100548ac <BLEPLAT_CNTR_SmCteOff>
1005bf08:	4638      	mov	r0, r7
1005bf0a:	2c00      	cmp	r4, #0
1005bf0c:	d002      	beq.n	1005bf14 <llc_conn_go_to_connect+0x51c>
1005bf0e:	f7f8 ff19 	bl	10054d44 <BLEPLAT_CNTR_SmSetRxMode>
1005bf12:	e001      	b.n	1005bf18 <llc_conn_go_to_connect+0x520>
1005bf14:	f7f8 ff82 	bl	10054e1c <BLEPLAT_CNTR_SmSetTxMode>
1005bf18:	4634      	mov	r4, r6
1005bf1a:	3428      	adds	r4, #40	@ 0x28
1005bf1c:	f7fe f9a6 	bl	1005a26c <data_length_extension_csr_ucfg_weak>
1005bf20:	2801      	cmp	r0, #1
1005bf22:	d101      	bne.n	1005bf28 <llc_conn_go_to_connect+0x530>
1005bf24:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005bf26:	e00c      	b.n	1005bf42 <llc_conn_go_to_connect+0x54a>
1005bf28:	f000 fbee 	bl	1005c708 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005bf2c:	2801      	cmp	r0, #1
1005bf2e:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005bf30:	d007      	beq.n	1005bf42 <llc_conn_go_to_connect+0x54a>
1005bf32:	f000 fbdf 	bl	1005c6f4 <cis_csr_ucfg_weak>
1005bf36:	2801      	cmp	r0, #1
1005bf38:	d001      	beq.n	1005bf3e <llc_conn_go_to_connect+0x546>
1005bf3a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1005bf3c:	e001      	b.n	1005bf42 <llc_conn_go_to_connect+0x54a>
1005bf3e:	981d      	ldr	r0, [sp, #116]	@ 0x74
1005bf40:	43c0      	mvns	r0, r0
1005bf42:	b2c1      	uxtb	r1, r0
1005bf44:	4638      	mov	r0, r7
1005bf46:	f7f8 fe80 	bl	10054c4a <BLEPLAT_CNTR_SmSetDataLength>
1005bf4a:	4630      	mov	r0, r6
1005bf4c:	4621      	mov	r1, r4
1005bf4e:	463a      	mov	r2, r7
1005bf50:	f000 fa3c 	bl	1005c3cc <llc_conn_set_blue_packets>
1005bf54:	2100      	movs	r1, #0
1005bf56:	4628      	mov	r0, r5
1005bf58:	463a      	mov	r2, r7
1005bf5a:	f000 fa37 	bl	1005c3cc <llc_conn_set_blue_packets>
1005bf5e:	4630      	mov	r0, r6
1005bf60:	f7f8 fc83 	bl	1005486a <BLEPLAT_CNTR_PacketSetTxReady>
1005bf64:	4628      	mov	r0, r5
1005bf66:	f7f8 fc3e 	bl	100547e6 <BLEPLAT_CNTR_PacketSetRxReady>
1005bf6a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
1005bf6c:	7b81      	ldrb	r1, [r0, #14]
1005bf6e:	9122      	str	r1, [sp, #136]	@ 0x88
1005bf70:	7c40      	ldrb	r0, [r0, #17]
1005bf72:	4634      	mov	r4, r6
1005bf74:	3444      	adds	r4, #68	@ 0x44
1005bf76:	cc1c      	ldmia	r4, {r2, r3, r4}
1005bf78:	9920      	ldr	r1, [sp, #128]	@ 0x80
1005bf7a:	788d      	ldrb	r5, [r1, #2]
1005bf7c:	78cf      	ldrb	r7, [r1, #3]
1005bf7e:	490f      	ldr	r1, [pc, #60]	@ (1005bfbc <__arm_cp.11_3>)
1005bf80:	9107      	str	r1, [sp, #28]
1005bf82:	490f      	ldr	r1, [pc, #60]	@ (1005bfc0 <__arm_cp.11_4>)
1005bf84:	9106      	str	r1, [sp, #24]
1005bf86:	490f      	ldr	r1, [pc, #60]	@ (1005bfc4 <__arm_cp.11_5>)
1005bf88:	9105      	str	r1, [sp, #20]
1005bf8a:	490f      	ldr	r1, [pc, #60]	@ (1005bfc8 <__arm_cp.11_6>)
1005bf8c:	9104      	str	r1, [sp, #16]
1005bf8e:	9703      	str	r7, [sp, #12]
1005bf90:	9502      	str	r5, [sp, #8]
1005bf92:	1ad1      	subs	r1, r2, r3
1005bf94:	9101      	str	r1, [sp, #4]
1005bf96:	9400      	str	r4, [sp, #0]
1005bf98:	2800      	cmp	r0, #0
1005bf9a:	d001      	beq.n	1005bfa0 <llc_conn_go_to_connect+0x5a8>
1005bf9c:	4c0c      	ldr	r4, [pc, #48]	@ (1005bfd0 <__arm_cp.11_8>)
1005bf9e:	e000      	b.n	1005bfa2 <llc_conn_go_to_connect+0x5aa>
1005bfa0:	4c0a      	ldr	r4, [pc, #40]	@ (1005bfcc <__arm_cp.11_7>)
1005bfa2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1005bfa4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1005bfa6:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005bfa8:	4631      	mov	r1, r6
1005bfaa:	47a0      	blx	r4
1005bfac:	b02d      	add	sp, #180	@ 0xb4
1005bfae:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005bfb0 <__arm_cp.11_0>:
1005bfb0:	000004ff 	.word	0x000004ff

1005bfb4 <__arm_cp.11_1>:
1005bfb4:	0000f7fb 	.word	0x0000f7fb

1005bfb8 <__arm_cp.11_2>:
1005bfb8:	20002958 	.word	0x20002958

1005bfbc <__arm_cp.11_3>:
1005bfbc:	10065fef 	.word	0x10065fef

1005bfc0 <__arm_cp.11_4>:
1005bfc0:	1006617d 	.word	0x1006617d

1005bfc4 <__arm_cp.11_5>:
1005bfc4:	10066027 	.word	0x10066027

1005bfc8 <__arm_cp.11_6>:
1005bfc8:	100660b1 	.word	0x100660b1

1005bfcc <__arm_cp.11_7>:
1005bfcc:	1006149d 	.word	0x1006149d

1005bfd0 <__arm_cp.11_8>:
1005bfd0:	10061039 	.word	0x10061039

1005bfd4 <llc_conn_peripheral_roll_back_params>:
1005bfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
1005bfd6:	b089      	sub	sp, #36	@ 0x24
1005bfd8:	4604      	mov	r4, r0
1005bfda:	2091      	movs	r0, #145	@ 0x91
1005bfdc:	0040      	lsls	r0, r0, #1
1005bfde:	5a25      	ldrh	r5, [r4, r0]
1005bfe0:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
1005bfe2:	26ff      	movs	r6, #255	@ 0xff
1005bfe4:	3608      	adds	r6, #8
1005bfe6:	f7f7 fa70 	bl	100534ca <BLEPLAT_GetCurrentSysTime>
1005bfea:	5da1      	ldrb	r1, [r4, r6]
1005bfec:	22fe      	movs	r2, #254	@ 0xfe
1005bfee:	400a      	ands	r2, r1
1005bff0:	55a2      	strb	r2, [r4, r6]
1005bff2:	2135      	movs	r1, #53	@ 0x35
1005bff4:	0109      	lsls	r1, r1, #4
1005bff6:	1846      	adds	r6, r0, r1
1005bff8:	437d      	muls	r5, r7
1005bffa:	0068      	lsls	r0, r5, #1
1005bffc:	1830      	adds	r0, r6, r0
1005bffe:	f3ef 8110 	mrs	r1, PRIMASK
1005c002:	b672      	cpsid	i
1005c004:	6c61      	ldr	r1, [r4, #68]	@ 0x44
1005c006:	43c9      	mvns	r1, r1
1005c008:	1840      	adds	r0, r0, r1
1005c00a:	d400      	bmi.n	1005c00e <llc_conn_peripheral_roll_back_params+0x3a>
1005c00c:	e089      	b.n	1005c122 <llc_conn_peripheral_roll_back_params+0x14e>
1005c00e:	2083      	movs	r0, #131	@ 0x83
1005c010:	0040      	lsls	r0, r0, #1
1005c012:	1820      	adds	r0, r4, r0
1005c014:	9008      	str	r0, [sp, #32]
1005c016:	4630      	mov	r0, r6
1005c018:	f005 f84a 	bl	100610b0 <LL_sched_is_scheduler_call_pending>
1005c01c:	2800      	cmp	r0, #0
1005c01e:	d004      	beq.n	1005c02a <llc_conn_peripheral_roll_back_params+0x56>
1005c020:	4941      	ldr	r1, [pc, #260]	@ (1005c128 <__arm_cp.14_0>)
1005c022:	6809      	ldr	r1, [r1, #0]
1005c024:	7bc9      	ldrb	r1, [r1, #15]
1005c026:	2903      	cmp	r1, #3
1005c028:	d171      	bne.n	1005c10e <llc_conn_peripheral_roll_back_params+0x13a>
1005c02a:	9706      	str	r7, [sp, #24]
1005c02c:	9004      	str	r0, [sp, #16]
1005c02e:	4620      	mov	r0, r4
1005c030:	3031      	adds	r0, #49	@ 0x31
1005c032:	9007      	str	r0, [sp, #28]
1005c034:	4620      	mov	r0, r4
1005c036:	3042      	adds	r0, #66	@ 0x42
1005c038:	9005      	str	r0, [sp, #20]
1005c03a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005c03c:	1b80      	subs	r0, r0, r6
1005c03e:	2700      	movs	r7, #0
1005c040:	2108      	movs	r1, #8
1005c042:	b24a      	sxtb	r2, r1
1005c044:	2a00      	cmp	r2, #0
1005c046:	d40c      	bmi.n	1005c062 <llc_conn_peripheral_roll_back_params+0x8e>
1005c048:	b2cb      	uxtb	r3, r1
1005c04a:	462a      	mov	r2, r5
1005c04c:	409a      	lsls	r2, r3
1005c04e:	4290      	cmp	r0, r2
1005c050:	d302      	bcc.n	1005c058 <llc_conn_peripheral_roll_back_params+0x84>
1005c052:	2601      	movs	r6, #1
1005c054:	409e      	lsls	r6, r3
1005c056:	19bf      	adds	r7, r7, r6
1005c058:	1a82      	subs	r2, r0, r2
1005c05a:	d300      	bcc.n	1005c05e <llc_conn_peripheral_roll_back_params+0x8a>
1005c05c:	4610      	mov	r0, r2
1005c05e:	1e49      	subs	r1, r1, #1
1005c060:	e7ef      	b.n	1005c042 <llc_conn_peripheral_roll_back_params+0x6e>
1005c062:	9908      	ldr	r1, [sp, #32]
1005c064:	8b88      	ldrh	r0, [r1, #28]
1005c066:	4347      	muls	r7, r0
1005c068:	9a05      	ldr	r2, [sp, #20]
1005c06a:	8810      	ldrh	r0, [r2, #0]
1005c06c:	1bc0      	subs	r0, r0, r7
1005c06e:	8010      	strh	r0, [r2, #0]
1005c070:	b2be      	uxth	r6, r7
1005c072:	9d07      	ldr	r5, [sp, #28]
1005c074:	7c28      	ldrb	r0, [r5, #16]
1005c076:	7809      	ldrb	r1, [r1, #0]
1005c078:	2901      	cmp	r1, #1
1005c07a:	d10f      	bne.n	1005c09c <llc_conn_peripheral_roll_back_params+0xc8>
1005c07c:	4617      	mov	r7, r2
1005c07e:	f7f8 fc66 	bl	1005494e <BLEPLAT_CNTR_SmGetAccessAddr>
1005c082:	883f      	ldrh	r7, [r7, #0]
1005c084:	7c2a      	ldrb	r2, [r5, #16]
1005c086:	2300      	movs	r3, #0
1005c088:	9300      	str	r3, [sp, #0]
1005c08a:	9001      	str	r0, [sp, #4]
1005c08c:	9302      	str	r3, [sp, #8]
1005c08e:	4621      	mov	r1, r4
1005c090:	31e0      	adds	r1, #224	@ 0xe0
1005c092:	4610      	mov	r0, r2
1005c094:	463a      	mov	r2, r7
1005c096:	f000 fa1e 	bl	1005c4d6 <llc_mngm_csa2_select_channel_for_task>
1005c09a:	e010      	b.n	1005c0be <llc_conn_peripheral_roll_back_params+0xea>
1005c09c:	f7f8 fcce 	bl	10054a3c <BLEPLAT_CNTR_SmGetHopIncr>
1005c0a0:	2125      	movs	r1, #37	@ 0x25
1005c0a2:	1a08      	subs	r0, r1, r0
1005c0a4:	9008      	str	r0, [sp, #32]
1005c0a6:	4347      	muls	r7, r0
1005c0a8:	7828      	ldrb	r0, [r5, #0]
1005c0aa:	1838      	adds	r0, r7, r0
1005c0ac:	b280      	uxth	r0, r0
1005c0ae:	f000 f9e7 	bl	1005c480 <llc_mngm_mod_37>
1005c0b2:	7028      	strb	r0, [r5, #0]
1005c0b4:	9908      	ldr	r1, [sp, #32]
1005c0b6:	1808      	adds	r0, r1, r0
1005c0b8:	b280      	uxth	r0, r0
1005c0ba:	f000 f9e1 	bl	1005c480 <llc_mngm_mod_37>
1005c0be:	4601      	mov	r1, r0
1005c0c0:	462f      	mov	r7, r5
1005c0c2:	7c28      	ldrb	r0, [r5, #16]
1005c0c4:	f7f8 fef5 	bl	10054eb2 <BLEPLAT_CNTR_SmSetUnmappedChan>
1005c0c8:	9806      	ldr	r0, [sp, #24]
1005c0ca:	4346      	muls	r6, r0
1005c0cc:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005c0ce:	1b80      	subs	r0, r0, r6
1005c0d0:	6460      	str	r0, [r4, #68]	@ 0x44
1005c0d2:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
1005c0d4:	4631      	mov	r1, r6
1005c0d6:	f004 fd05 	bl	10060ae4 <LL_link_calculate_window_widening_from_ppm>
1005c0da:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
1005c0dc:	4282      	cmp	r2, r0
1005c0de:	d904      	bls.n	1005c0ea <llc_conn_peripheral_roll_back_params+0x116>
1005c0e0:	1a12      	subs	r2, r2, r0
1005c0e2:	2a0d      	cmp	r2, #13
1005c0e4:	d800      	bhi.n	1005c0e8 <llc_conn_peripheral_roll_back_params+0x114>
1005c0e6:	220d      	movs	r2, #13
1005c0e8:	64a2      	str	r2, [r4, #72]	@ 0x48
1005c0ea:	9d04      	ldr	r5, [sp, #16]
1005c0ec:	6e60      	ldr	r0, [r4, #100]	@ 0x64
1005c0ee:	1980      	adds	r0, r0, r6
1005c0f0:	6660      	str	r0, [r4, #100]	@ 0x64
1005c0f2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
1005c0f4:	0051      	lsls	r1, r2, #1
1005c0f6:	1809      	adds	r1, r1, r0
1005c0f8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005c0fa:	1a82      	subs	r2, r0, r2
1005c0fc:	7c38      	ldrb	r0, [r7, #16]
1005c0fe:	f004 ff7f 	bl	10061000 <LL_sched_set_taskslot_length_anchor>
1005c102:	2d00      	cmp	r5, #0
1005c104:	d10d      	bne.n	1005c122 <llc_conn_peripheral_roll_back_params+0x14e>
1005c106:	7c38      	ldrb	r0, [r7, #16]
1005c108:	f004 fff4 	bl	100610f4 <LL_sched_engine>
1005c10c:	e009      	b.n	1005c122 <llc_conn_peripheral_roll_back_params+0x14e>
1005c10e:	9a08      	ldr	r2, [sp, #32]
1005c110:	7850      	ldrb	r0, [r2, #1]
1005c112:	2101      	movs	r1, #1
1005c114:	4301      	orrs	r1, r0
1005c116:	7051      	strb	r1, [r2, #1]
1005c118:	2013      	movs	r0, #19
1005c11a:	f007 f9a1 	bl	10063460 <tsk_notify_idx>
1005c11e:	f7f6 fb22 	bl	10052766 <BLE_STACK_ProcessRequest>
1005c122:	b662      	cpsie	i
1005c124:	b009      	add	sp, #36	@ 0x24
1005c126:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005c128 <__arm_cp.14_0>:
1005c128:	2000295c 	.word	0x2000295c

1005c12c <llc_conn_reserve_conn_idx>:
1005c12c:	b510      	push	{r4, lr}
1005c12e:	2400      	movs	r4, #0
1005c130:	4620      	mov	r0, r4
1005c132:	f7fe fd71 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005c136:	490a      	ldr	r1, [pc, #40]	@ (1005c160 <__arm_cp.15_0>)
1005c138:	6809      	ldr	r1, [r1, #0]
1005c13a:	2234      	movs	r2, #52	@ 0x34
1005c13c:	5c89      	ldrb	r1, [r1, r2]
1005c13e:	302c      	adds	r0, #44	@ 0x2c
1005c140:	42a1      	cmp	r1, r4
1005c142:	d007      	beq.n	1005c154 <llc_conn_reserve_conn_idx+0x28>
1005c144:	7802      	ldrb	r2, [r0, #0]
1005c146:	2a00      	cmp	r2, #0
1005c148:	d006      	beq.n	1005c158 <llc_conn_reserve_conn_idx+0x2c>
1005c14a:	224d      	movs	r2, #77	@ 0x4d
1005c14c:	0092      	lsls	r2, r2, #2
1005c14e:	1880      	adds	r0, r0, r2
1005c150:	1c64      	adds	r4, r4, #1
1005c152:	e7f5      	b.n	1005c140 <llc_conn_reserve_conn_idx+0x14>
1005c154:	24ff      	movs	r4, #255	@ 0xff
1005c156:	e001      	b.n	1005c15c <llc_conn_reserve_conn_idx+0x30>
1005c158:	2101      	movs	r1, #1
1005c15a:	7001      	strb	r1, [r0, #0]
1005c15c:	b2e0      	uxtb	r0, r4
1005c15e:	bd10      	pop	{r4, pc}

1005c160 <__arm_cp.15_0>:
1005c160:	20002904 	.word	0x20002904

1005c164 <llc_conn_send_acl_data>:
1005c164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005c166:	4606      	mov	r6, r0
1005c168:	8800      	ldrh	r0, [r0, #0]
1005c16a:	f7fe fd63 	bl	1005ac34 <llc_conn_get_cntxt_per_p_from_handle>
1005c16e:	2800      	cmp	r0, #0
1005c170:	d012      	beq.n	1005c198 <llc_conn_send_acl_data+0x34>
1005c172:	4604      	mov	r4, r0
1005c174:	4607      	mov	r7, r0
1005c176:	372c      	adds	r7, #44	@ 0x2c
1005c178:	f3ef 8010 	mrs	r0, PRIMASK
1005c17c:	b672      	cpsid	i
1005c17e:	463d      	mov	r5, r7
1005c180:	3554      	adds	r5, #84	@ 0x54
1005c182:	4628      	mov	r0, r5
1005c184:	4631      	mov	r1, r6
1005c186:	f007 fb61 	bl	1006384c <ACL_list_insert_tail>
1005c18a:	7838      	ldrb	r0, [r7, #0]
1005c18c:	2803      	cmp	r0, #3
1005c18e:	d105      	bne.n	1005c19c <llc_conn_send_acl_data+0x38>
1005c190:	4620      	mov	r0, r4
1005c192:	f7ff ff1f 	bl	1005bfd4 <llc_conn_peripheral_roll_back_params>
1005c196:	e01a      	b.n	1005c1ce <llc_conn_send_acl_data+0x6a>
1005c198:	2002      	movs	r0, #2
1005c19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005c19c:	7d78      	ldrb	r0, [r7, #21]
1005c19e:	4e28      	ldr	r6, [pc, #160]	@ (1005c240 <__arm_cp.16_0>)
1005c1a0:	6831      	ldr	r1, [r6, #0]
1005c1a2:	7b49      	ldrb	r1, [r1, #13]
1005c1a4:	4288      	cmp	r0, r1
1005c1a6:	d112      	bne.n	1005c1ce <llc_conn_send_acl_data+0x6a>
1005c1a8:	f7f7 f98f 	bl	100534ca <BLEPLAT_GetCurrentSysTime>
1005c1ac:	6831      	ldr	r1, [r6, #0]
1005c1ae:	6809      	ldr	r1, [r1, #0]
1005c1b0:	43c9      	mvns	r1, r1
1005c1b2:	1840      	adds	r0, r0, r1
1005c1b4:	2101      	movs	r1, #1
1005c1b6:	0289      	lsls	r1, r1, #10
1005c1b8:	1840      	adds	r0, r0, r1
1005c1ba:	d508      	bpl.n	1005c1ce <llc_conn_send_acl_data+0x6a>
1005c1bc:	205c      	movs	r0, #92	@ 0x5c
1005c1be:	5c38      	ldrb	r0, [r7, r0]
1005c1c0:	0640      	lsls	r0, r0, #25
1005c1c2:	d404      	bmi.n	1005c1ce <llc_conn_send_acl_data+0x6a>
1005c1c4:	4620      	mov	r0, r4
1005c1c6:	f7fe ffe4 	bl	1005b192 <llc_conn_get_tx_acl_blocked>
1005c1ca:	2800      	cmp	r0, #0
1005c1cc:	d002      	beq.n	1005c1d4 <llc_conn_send_acl_data+0x70>
1005c1ce:	b662      	cpsie	i
1005c1d0:	2084      	movs	r0, #132	@ 0x84
1005c1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005c1d4:	4620      	mov	r0, r4
1005c1d6:	f7f8 fa12 	bl	100545fe <BLEPLAT_CNTR_PacketGetDataPtr>
1005c1da:	4606      	mov	r6, r0
1005c1dc:	4620      	mov	r0, r4
1005c1de:	3028      	adds	r0, #40	@ 0x28
1005c1e0:	4286      	cmp	r6, r0
1005c1e2:	d00a      	beq.n	1005c1fa <llc_conn_send_acl_data+0x96>
1005c1e4:	2101      	movs	r1, #1
1005c1e6:	4620      	mov	r0, r4
1005c1e8:	f7fe ffac 	bl	1005b144 <llc_conn_get_ctrl_pdu_data_p>
1005c1ec:	4286      	cmp	r6, r0
1005c1ee:	d0ee      	beq.n	1005c1ce <llc_conn_send_acl_data+0x6a>
1005c1f0:	7830      	ldrb	r0, [r6, #0]
1005c1f2:	2110      	movs	r1, #16
1005c1f4:	4301      	orrs	r1, r0
1005c1f6:	7031      	strb	r1, [r6, #0]
1005c1f8:	e7e9      	b.n	1005c1ce <llc_conn_send_acl_data+0x6a>
1005c1fa:	4812      	ldr	r0, [pc, #72]	@ (1005c244 <__arm_cp.16_1>)
1005c1fc:	6800      	ldr	r0, [r0, #0]
1005c1fe:	218c      	movs	r1, #140	@ 0x8c
1005c200:	5840      	ldr	r0, [r0, r1]
1005c202:	682e      	ldr	r6, [r5, #0]
1005c204:	8a31      	ldrh	r1, [r6, #16]
1005c206:	89f2      	ldrh	r2, [r6, #14]
1005c208:	1851      	adds	r1, r2, r1
1005c20a:	221f      	movs	r2, #31
1005c20c:	400a      	ands	r2, r1
1005c20e:	1817      	adds	r7, r2, r0
1005c210:	1cbd      	adds	r5, r7, #2
1005c212:	4620      	mov	r0, r4
1005c214:	4629      	mov	r1, r5
1005c216:	f7f8 fa34 	bl	10054682 <BLEPLAT_CNTR_PacketSetDataPtr>
1005c21a:	4620      	mov	r0, r4
1005c21c:	4631      	mov	r1, r6
1005c21e:	f7fe fee5 	bl	1005afec <llc_conn_copy_tx_data_packet>
1005c222:	67e6      	str	r6, [r4, #124]	@ 0x7c
1005c224:	78f8      	ldrb	r0, [r7, #3]
1005c226:	2800      	cmp	r0, #0
1005c228:	d0d1      	beq.n	1005c1ce <llc_conn_send_acl_data+0x6a>
1005c22a:	2101      	movs	r1, #1
1005c22c:	4620      	mov	r0, r4
1005c22e:	f7fe ff8f 	bl	1005b150 <llc_conn_get_enc_on>
1005c232:	2801      	cmp	r0, #1
1005c234:	d1cb      	bne.n	1005c1ce <llc_conn_send_acl_data+0x6a>
1005c236:	7868      	ldrb	r0, [r5, #1]
1005c238:	1d00      	adds	r0, r0, #4
1005c23a:	7068      	strb	r0, [r5, #1]
1005c23c:	e7c7      	b.n	1005c1ce <llc_conn_send_acl_data+0x6a>
1005c23e:	46c0      	nop			@ (mov r8, r8)

1005c240 <__arm_cp.16_0>:
1005c240:	2000295c 	.word	0x2000295c

1005c244 <__arm_cp.16_1>:
1005c244:	20002958 	.word	0x20002958

1005c248 <llc_conn_set_taskslot_params>:
1005c248:	b5f0      	push	{r4, r5, r6, r7, lr}
1005c24a:	b085      	sub	sp, #20
1005c24c:	460f      	mov	r7, r1
1005c24e:	4604      	mov	r4, r0
1005c250:	2041      	movs	r0, #65	@ 0x41
1005c252:	5c20      	ldrb	r0, [r4, r0]
1005c254:	2183      	movs	r1, #131	@ 0x83
1005c256:	0049      	lsls	r1, r1, #1
1005c258:	5c61      	ldrb	r1, [r4, r1]
1005c25a:	4625      	mov	r5, r4
1005c25c:	352c      	adds	r5, #44	@ 0x2c
1005c25e:	2901      	cmp	r1, #1
1005c260:	d10d      	bne.n	1005c27e <llc_conn_set_taskslot_params+0x36>
1005c262:	f7f8 fb74 	bl	1005494e <BLEPLAT_CNTR_SmGetAccessAddr>
1005c266:	8aea      	ldrh	r2, [r5, #22]
1005c268:	7d6e      	ldrb	r6, [r5, #21]
1005c26a:	2300      	movs	r3, #0
1005c26c:	9300      	str	r3, [sp, #0]
1005c26e:	9001      	str	r0, [sp, #4]
1005c270:	9302      	str	r3, [sp, #8]
1005c272:	4621      	mov	r1, r4
1005c274:	31e0      	adds	r1, #224	@ 0xe0
1005c276:	4630      	mov	r0, r6
1005c278:	f000 f92d 	bl	1005c4d6 <llc_mngm_csa2_select_channel_for_task>
1005c27c:	e010      	b.n	1005c2a0 <llc_conn_set_taskslot_params+0x58>
1005c27e:	4616      	mov	r6, r2
1005c280:	f7f8 fbdc 	bl	10054a3c <BLEPLAT_CNTR_SmGetHopIncr>
1005c284:	9704      	str	r7, [sp, #16]
1005c286:	4607      	mov	r7, r0
1005c288:	4346      	muls	r6, r0
1005c28a:	7968      	ldrb	r0, [r5, #5]
1005c28c:	1836      	adds	r6, r6, r0
1005c28e:	b2b0      	uxth	r0, r6
1005c290:	f000 f8f6 	bl	1005c480 <llc_mngm_mod_37>
1005c294:	7168      	strb	r0, [r5, #5]
1005c296:	1bf0      	subs	r0, r6, r7
1005c298:	9f04      	ldr	r7, [sp, #16]
1005c29a:	b280      	uxth	r0, r0
1005c29c:	f000 f8f0 	bl	1005c480 <llc_mngm_mod_37>
1005c2a0:	4601      	mov	r1, r0
1005c2a2:	7d68      	ldrb	r0, [r5, #21]
1005c2a4:	f7f8 fe05 	bl	10054eb2 <BLEPLAT_CNTR_SmSetUnmappedChan>
1005c2a8:	7828      	ldrb	r0, [r5, #0]
1005c2aa:	2802      	cmp	r0, #2
1005c2ac:	d10c      	bne.n	1005c2c8 <llc_conn_set_taskslot_params+0x80>
1005c2ae:	4620      	mov	r0, r4
1005c2b0:	f7f8 fa8c 	bl	100547cc <BLEPLAT_CNTR_PacketSetPllTrig>
1005c2b4:	4620      	mov	r0, r4
1005c2b6:	f7f8 f9f3 	bl	100546a0 <BLEPLAT_CNTR_PacketSetIncChan>
1005c2ba:	7d68      	ldrb	r0, [r5, #21]
1005c2bc:	f7f8 fdae 	bl	10054e1c <BLEPLAT_CNTR_SmSetTxMode>
1005c2c0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
1005c2c2:	6d21      	ldr	r1, [r4, #80]	@ 0x50
1005c2c4:	7d68      	ldrb	r0, [r5, #21]
1005c2c6:	e02d      	b.n	1005c324 <llc_conn_set_taskslot_params+0xdc>
1005c2c8:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
1005c2ca:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
1005c2cc:	4639      	mov	r1, r7
1005c2ce:	f004 fc09 	bl	10060ae4 <LL_link_calculate_window_widening_from_ppm>
1005c2d2:	1980      	adds	r0, r0, r6
1005c2d4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
1005c2d6:	2900      	cmp	r1, #0
1005c2d8:	d100      	bne.n	1005c2dc <llc_conn_set_taskslot_params+0x94>
1005c2da:	300d      	adds	r0, #13
1005c2dc:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
1005c2de:	0849      	lsrs	r1, r1, #1
1005c2e0:	393e      	subs	r1, #62	@ 0x3e
1005c2e2:	4288      	cmp	r0, r1
1005c2e4:	d901      	bls.n	1005c2ea <llc_conn_set_taskslot_params+0xa2>
1005c2e6:	2008      	movs	r0, #8
1005c2e8:	e022      	b.n	1005c330 <llc_conn_set_taskslot_params+0xe8>
1005c2ea:	64a0      	str	r0, [r4, #72]	@ 0x48
1005c2ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1005c2ee:	0040      	lsls	r0, r0, #1
1005c2f0:	2900      	cmp	r1, #0
1005c2f2:	d001      	beq.n	1005c2f8 <llc_conn_set_taskslot_params+0xb0>
1005c2f4:	180f      	adds	r7, r1, r0
1005c2f6:	e005      	b.n	1005c304 <llc_conn_set_taskslot_params+0xbc>
1005c2f8:	6f61      	ldr	r1, [r4, #116]	@ 0x74
1005c2fa:	1808      	adds	r0, r1, r0
1005c2fc:	6d27      	ldr	r7, [r4, #80]	@ 0x50
1005c2fe:	42b8      	cmp	r0, r7
1005c300:	d800      	bhi.n	1005c304 <llc_conn_set_taskslot_params+0xbc>
1005c302:	4607      	mov	r7, r0
1005c304:	4626      	mov	r6, r4
1005c306:	3614      	adds	r6, #20
1005c308:	4630      	mov	r0, r6
1005c30a:	f7f8 fa5f 	bl	100547cc <BLEPLAT_CNTR_PacketSetPllTrig>
1005c30e:	4630      	mov	r0, r6
1005c310:	f7f8 f9c6 	bl	100546a0 <BLEPLAT_CNTR_PacketSetIncChan>
1005c314:	7d68      	ldrb	r0, [r5, #21]
1005c316:	f7f8 fd15 	bl	10054d44 <BLEPLAT_CNTR_SmSetRxMode>
1005c31a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005c31c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
1005c31e:	1a42      	subs	r2, r0, r1
1005c320:	7d68      	ldrb	r0, [r5, #21]
1005c322:	4639      	mov	r1, r7
1005c324:	f004 fe6c 	bl	10061000 <LL_sched_set_taskslot_length_anchor>
1005c328:	8e60      	ldrh	r0, [r4, #50]	@ 0x32
1005c32a:	1c40      	adds	r0, r0, #1
1005c32c:	8660      	strh	r0, [r4, #50]	@ 0x32
1005c32e:	2000      	movs	r0, #0
1005c330:	b005      	add	sp, #20
1005c332:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005c334 <llc_conn_update_receive_window>:
1005c334:	b570      	push	{r4, r5, r6, lr}
1005c336:	4604      	mov	r4, r0
1005c338:	4606      	mov	r6, r0
1005c33a:	362c      	adds	r6, #44	@ 0x2c
1005c33c:	4605      	mov	r5, r0
1005c33e:	35d0      	adds	r5, #208	@ 0xd0
1005c340:	f7f3 fa8e 	bl	1004f860 <phy_upd_csr_ucfg>
1005c344:	2801      	cmp	r0, #1
1005c346:	d10b      	bne.n	1005c360 <llc_conn_update_receive_window+0x2c>
1005c348:	7930      	ldrb	r0, [r6, #4]
1005c34a:	210e      	movs	r1, #14
1005c34c:	4341      	muls	r1, r0
1005c34e:	480e      	ldr	r0, [pc, #56]	@ (1005c388 <__arm_cp.18_0>)
1005c350:	6800      	ldr	r0, [r0, #0]
1005c352:	229c      	movs	r2, #156	@ 0x9c
1005c354:	5880      	ldr	r0, [r0, r2]
1005c356:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005c358:	6940      	ldr	r0, [r0, #20]
1005c35a:	1840      	adds	r0, r0, r1
1005c35c:	79c0      	ldrb	r0, [r0, #7]
1005c35e:	e000      	b.n	1005c362 <llc_conn_update_receive_window+0x2e>
1005c360:	2001      	movs	r0, #1
1005c362:	f7f8 fdca 	bl	10054efa <BLEPLAT_CNTR_DemodDelaySt>
1005c366:	4909      	ldr	r1, [pc, #36]	@ (1005c38c <__arm_cp.18_1>)
1005c368:	4348      	muls	r0, r1
1005c36a:	0a00      	lsrs	r0, r0, #8
1005c36c:	3010      	adds	r0, #16
1005c36e:	6028      	str	r0, [r5, #0]
1005c370:	7832      	ldrb	r2, [r6, #0]
1005c372:	2a03      	cmp	r2, #3
1005c374:	d107      	bne.n	1005c386 <llc_conn_update_receive_window+0x52>
1005c376:	6b62      	ldr	r2, [r4, #52]	@ 0x34
1005c378:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
1005c37a:	005b      	lsls	r3, r3, #1
1005c37c:	189a      	adds	r2, r3, r2
1005c37e:	4351      	muls	r1, r2
1005c380:	0a09      	lsrs	r1, r1, #8
1005c382:	1808      	adds	r0, r1, r0
1005c384:	6028      	str	r0, [r5, #0]
1005c386:	bd70      	pop	{r4, r5, r6, pc}

1005c388 <__arm_cp.18_0>:
1005c388:	20002958 	.word	0x20002958

1005c38c <__arm_cp.18_1>:
1005c38c:	00000271 	.word	0x00000271

1005c390 <llc_conn_peripheral_roll_back_params_tsk>:
1005c390:	b570      	push	{r4, r5, r6, lr}
1005c392:	2400      	movs	r4, #0
1005c394:	4620      	mov	r0, r4
1005c396:	f7fe fc3f 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005c39a:	4605      	mov	r5, r0
1005c39c:	4e0a      	ldr	r6, [pc, #40]	@ (1005c3c8 <__arm_cp.20_0>)
1005c39e:	6830      	ldr	r0, [r6, #0]
1005c3a0:	2134      	movs	r1, #52	@ 0x34
1005c3a2:	5c41      	ldrb	r1, [r0, r1]
1005c3a4:	428c      	cmp	r4, r1
1005c3a6:	d20d      	bcs.n	1005c3c4 <llc_conn_peripheral_roll_back_params_tsk+0x34>
1005c3a8:	21ff      	movs	r1, #255	@ 0xff
1005c3aa:	3108      	adds	r1, #8
1005c3ac:	5c69      	ldrb	r1, [r5, r1]
1005c3ae:	07c9      	lsls	r1, r1, #31
1005c3b0:	d003      	beq.n	1005c3ba <llc_conn_peripheral_roll_back_params_tsk+0x2a>
1005c3b2:	4628      	mov	r0, r5
1005c3b4:	f7ff fe0e 	bl	1005bfd4 <llc_conn_peripheral_roll_back_params>
1005c3b8:	6830      	ldr	r0, [r6, #0]
1005c3ba:	214d      	movs	r1, #77	@ 0x4d
1005c3bc:	0089      	lsls	r1, r1, #2
1005c3be:	186d      	adds	r5, r5, r1
1005c3c0:	1c64      	adds	r4, r4, #1
1005c3c2:	e7ed      	b.n	1005c3a0 <llc_conn_peripheral_roll_back_params_tsk+0x10>
1005c3c4:	bd70      	pop	{r4, r5, r6, pc}
1005c3c6:	46c0      	nop			@ (mov r8, r8)

1005c3c8 <__arm_cp.20_0>:
1005c3c8:	20002904 	.word	0x20002904

1005c3cc <llc_conn_set_blue_packets>:
1005c3cc:	b570      	push	{r4, r5, r6, lr}
1005c3ce:	4616      	mov	r6, r2
1005c3d0:	460d      	mov	r5, r1
1005c3d2:	4604      	mov	r4, r0
1005c3d4:	f7f8 f920 	bl	10054618 <BLEPLAT_CNTR_PacketInitTo0>
1005c3d8:	4620      	mov	r0, r4
1005c3da:	f7f8 f938 	bl	1005464e <BLEPLAT_CNTR_PacketSetCrcinitSel>
1005c3de:	4620      	mov	r0, r4
1005c3e0:	f7f8 f976 	bl	100546d0 <BLEPLAT_CNTR_PacketSetIntDone>
1005c3e4:	4620      	mov	r0, r4
1005c3e6:	4621      	mov	r1, r4
1005c3e8:	f7f8 f9b0 	bl	1005474c <BLEPLAT_CNTR_PacketSetNextPtr>
1005c3ec:	4620      	mov	r0, r4
1005c3ee:	f7f8 f9e1 	bl	100547b4 <BLEPLAT_CNTR_PacketSetNsEn>
1005c3f2:	4620      	mov	r0, r4
1005c3f4:	4631      	mov	r1, r6
1005c3f6:	f7f8 f9c5 	bl	10054784 <BLEPLAT_CNTR_PacketSetNextSlot>
1005c3fa:	4620      	mov	r0, r4
1005c3fc:	f7f8 fa0f 	bl	1005481e <BLEPLAT_CNTR_PacketSetTimer2Active>
1005c400:	4620      	mov	r0, r4
1005c402:	f7f8 f9e3 	bl	100547cc <BLEPLAT_CNTR_PacketSetPllTrig>
1005c406:	4620      	mov	r0, r4
1005c408:	f7f8 f94a 	bl	100546a0 <BLEPLAT_CNTR_PacketSetIncChan>
1005c40c:	4620      	mov	r0, r4
1005c40e:	f7f8 f990 	bl	10054732 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005c412:	2d00      	cmp	r5, #0
1005c414:	d00d      	beq.n	1005c432 <llc_conn_set_blue_packets+0x66>
1005c416:	2094      	movs	r0, #148	@ 0x94
1005c418:	2100      	movs	r1, #0
1005c41a:	460a      	mov	r2, r1
1005c41c:	f7f7 ff8a 	bl	10054334 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005c420:	4601      	mov	r1, r0
1005c422:	4620      	mov	r0, r4
1005c424:	f7f8 f9ec 	bl	10054800 <BLEPLAT_CNTR_PacketSetTimeout>
1005c428:	4620      	mov	r0, r4
1005c42a:	4629      	mov	r1, r5
1005c42c:	f7f8 f929 	bl	10054682 <BLEPLAT_CNTR_PacketSetDataPtr>
1005c430:	bd70      	pop	{r4, r5, r6, pc}
1005c432:	4812      	ldr	r0, [pc, #72]	@ (1005c47c <__arm_cp.21_0>)
1005c434:	6800      	ldr	r0, [r0, #0]
1005c436:	2190      	movs	r1, #144	@ 0x90
1005c438:	5845      	ldr	r5, [r0, r1]
1005c43a:	2096      	movs	r0, #150	@ 0x96
1005c43c:	2101      	movs	r1, #1
1005c43e:	2200      	movs	r2, #0
1005c440:	f7f7 ff78 	bl	10054334 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005c444:	4601      	mov	r1, r0
1005c446:	4620      	mov	r0, r4
1005c448:	f7f8 f9da 	bl	10054800 <BLEPLAT_CNTR_PacketSetTimeout>
1005c44c:	4620      	mov	r0, r4
1005c44e:	f7f8 f94b 	bl	100546e8 <BLEPLAT_CNTR_PacketSetIntRcvOk>
1005c452:	4620      	mov	r0, r4
1005c454:	f7f8 f960 	bl	10054718 <BLEPLAT_CNTR_PacketSetIntTxOk>
1005c458:	4620      	mov	r0, r4
1005c45a:	f7f8 f951 	bl	10054700 <BLEPLAT_CNTR_PacketSetIntTimeout>
1005c45e:	4620      	mov	r0, r4
1005c460:	f7f8 f92a 	bl	100546b8 <BLEPLAT_CNTR_PacketSetIntCrcErr>
1005c464:	1ca9      	adds	r1, r5, #2
1005c466:	4620      	mov	r0, r4
1005c468:	f7f8 f90b 	bl	10054682 <BLEPLAT_CNTR_PacketSetDataPtr>
1005c46c:	4620      	mov	r0, r4
1005c46e:	f7f8 f994 	bl	1005479a <BLEPLAT_CNTR_PacketSetNextTxMode>
1005c472:	4620      	mov	r0, r4
1005c474:	f7f8 f9ec 	bl	10054850 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005c478:	bd70      	pop	{r4, r5, r6, pc}
1005c47a:	46c0      	nop			@ (mov r8, r8)

1005c47c <__arm_cp.21_0>:
1005c47c:	20002958 	.word	0x20002958

1005c480 <llc_mngm_mod_37>:
1005c480:	4906      	ldr	r1, [pc, #24]	@ (1005c49c <__arm_cp.0_0>)
1005c482:	4341      	muls	r1, r0
1005c484:	0c09      	lsrs	r1, r1, #16
1005c486:	2224      	movs	r2, #36	@ 0x24
1005c488:	43d2      	mvns	r2, r2
1005c48a:	434a      	muls	r2, r1
1005c48c:	1810      	adds	r0, r2, r0
1005c48e:	b281      	uxth	r1, r0
1005c490:	2924      	cmp	r1, #36	@ 0x24
1005c492:	d900      	bls.n	1005c496 <llc_mngm_mod_37+0x16>
1005c494:	3825      	subs	r0, #37	@ 0x25
1005c496:	b2c0      	uxtb	r0, r0
1005c498:	4770      	bx	lr
1005c49a:	46c0      	nop			@ (mov r8, r8)

1005c49c <__arm_cp.0_0>:
1005c49c:	000006eb 	.word	0x000006eb

1005c4a0 <llc_mngm_csa2_update_remapping_table>:
1005c4a0:	b570      	push	{r4, r5, r6, lr}
1005c4a2:	460d      	mov	r5, r1
1005c4a4:	4604      	mov	r4, r0
1005c4a6:	1c40      	adds	r0, r0, #1
1005c4a8:	2600      	movs	r6, #0
1005c4aa:	2225      	movs	r2, #37	@ 0x25
1005c4ac:	4631      	mov	r1, r6
1005c4ae:	f7f6 ff51 	bl	10053354 <BLEPLAT_MemSet>
1005c4b2:	4630      	mov	r0, r6
1005c4b4:	2e25      	cmp	r6, #37	@ 0x25
1005c4b6:	d20c      	bcs.n	1005c4d2 <llc_mngm_csa2_update_remapping_table+0x32>
1005c4b8:	2107      	movs	r1, #7
1005c4ba:	4031      	ands	r1, r6
1005c4bc:	08f2      	lsrs	r2, r6, #3
1005c4be:	5caa      	ldrb	r2, [r5, r2]
1005c4c0:	40ca      	lsrs	r2, r1
1005c4c2:	07d1      	lsls	r1, r2, #31
1005c4c4:	d003      	beq.n	1005c4ce <llc_mngm_csa2_update_remapping_table+0x2e>
1005c4c6:	b2c1      	uxtb	r1, r0
1005c4c8:	1861      	adds	r1, r4, r1
1005c4ca:	704e      	strb	r6, [r1, #1]
1005c4cc:	1c40      	adds	r0, r0, #1
1005c4ce:	1c76      	adds	r6, r6, #1
1005c4d0:	e7f0      	b.n	1005c4b4 <llc_mngm_csa2_update_remapping_table+0x14>
1005c4d2:	7020      	strb	r0, [r4, #0]
1005c4d4:	bd70      	pop	{r4, r5, r6, pc}

1005c4d6 <llc_mngm_csa2_select_channel_for_task>:
1005c4d6:	b5f0      	push	{r4, r5, r6, r7, lr}
1005c4d8:	b08b      	sub	sp, #44	@ 0x2c
1005c4da:	9305      	str	r3, [sp, #20]
1005c4dc:	4617      	mov	r7, r2
1005c4de:	460d      	mov	r5, r1
1005c4e0:	a909      	add	r1, sp, #36	@ 0x24
1005c4e2:	f7f8 fa44 	bl	1005496e <BLEPLAT_CNTR_SmGetChannelMap>
1005c4e6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
1005c4e8:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005c4ea:	9006      	str	r0, [sp, #24]
1005c4ec:	2800      	cmp	r0, #0
1005c4ee:	d018      	beq.n	1005c522 <llc_mngm_csa2_select_channel_for_task+0x4c>
1005c4f0:	9504      	str	r5, [sp, #16]
1005c4f2:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1005c4f4:	2500      	movs	r5, #0
1005c4f6:	9806      	ldr	r0, [sp, #24]
1005c4f8:	42a8      	cmp	r0, r5
1005c4fa:	d010      	beq.n	1005c51e <llc_mngm_csa2_select_channel_for_task+0x48>
1005c4fc:	9804      	ldr	r0, [sp, #16]
1005c4fe:	9003      	str	r0, [sp, #12]
1005c500:	a809      	add	r0, sp, #36	@ 0x24
1005c502:	9002      	str	r0, [sp, #8]
1005c504:	a808      	add	r0, sp, #32
1005c506:	9001      	str	r0, [sp, #4]
1005c508:	a807      	add	r0, sp, #28
1005c50a:	9000      	str	r0, [sp, #0]
1005c50c:	b2eb      	uxtb	r3, r5
1005c50e:	4620      	mov	r0, r4
1005c510:	4639      	mov	r1, r7
1005c512:	9a05      	ldr	r2, [sp, #20]
1005c514:	f000 f812 	bl	1005c53c <llc_mngm_csa2_select_channel>
1005c518:	5570      	strb	r0, [r6, r5]
1005c51a:	1c6d      	adds	r5, r5, #1
1005c51c:	e7eb      	b.n	1005c4f6 <llc_mngm_csa2_select_channel_for_task+0x20>
1005c51e:	7830      	ldrb	r0, [r6, #0]
1005c520:	e00a      	b.n	1005c538 <llc_mngm_csa2_select_channel_for_task+0x62>
1005c522:	9503      	str	r5, [sp, #12]
1005c524:	a809      	add	r0, sp, #36	@ 0x24
1005c526:	9002      	str	r0, [sp, #8]
1005c528:	2200      	movs	r2, #0
1005c52a:	9201      	str	r2, [sp, #4]
1005c52c:	9200      	str	r2, [sp, #0]
1005c52e:	4620      	mov	r0, r4
1005c530:	4639      	mov	r1, r7
1005c532:	4613      	mov	r3, r2
1005c534:	f000 f802 	bl	1005c53c <llc_mngm_csa2_select_channel>
1005c538:	b00b      	add	sp, #44	@ 0x2c
1005c53a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005c53c <llc_mngm_csa2_select_channel>:
1005c53c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005c53e:	b089      	sub	sp, #36	@ 0x24
1005c540:	4615      	mov	r5, r2
1005c542:	aa08      	add	r2, sp, #32
1005c544:	2600      	movs	r6, #0
1005c546:	7016      	strb	r6, [r2, #0]
1005c548:	2d00      	cmp	r5, #0
1005c54a:	9306      	str	r3, [sp, #24]
1005c54c:	461a      	mov	r2, r3
1005c54e:	d100      	bne.n	1005c552 <llc_mngm_csa2_select_channel+0x16>
1005c550:	462a      	mov	r2, r5
1005c552:	0c07      	lsrs	r7, r0, #16
1005c554:	4047      	eors	r7, r0
1005c556:	9811      	ldr	r0, [sp, #68]	@ 0x44
1005c558:	9007      	str	r0, [sp, #28]
1005c55a:	2d00      	cmp	r5, #0
1005c55c:	d104      	bne.n	1005c568 <llc_mngm_csa2_select_channel+0x2c>
1005c55e:	2300      	movs	r3, #0
1005c560:	9806      	ldr	r0, [sp, #24]
1005c562:	2801      	cmp	r0, #1
1005c564:	461c      	mov	r4, r3
1005c566:	d838      	bhi.n	1005c5da <llc_mngm_csa2_select_channel+0x9e>
1005c568:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005c56a:	9005      	str	r0, [sp, #20]
1005c56c:	4079      	eors	r1, r7
1005c56e:	4051      	eors	r1, r2
1005c570:	460c      	mov	r4, r1
1005c572:	2e02      	cmp	r6, #2
1005c574:	d807      	bhi.n	1005c586 <llc_mngm_csa2_select_channel+0x4a>
1005c576:	b2a0      	uxth	r0, r4
1005c578:	f000 f842 	bl	1005c600 <llc_mngm_csa2_permutation>
1005c57c:	2111      	movs	r1, #17
1005c57e:	4341      	muls	r1, r0
1005c580:	19cc      	adds	r4, r1, r7
1005c582:	1c76      	adds	r6, r6, #1
1005c584:	e7f5      	b.n	1005c572 <llc_mngm_csa2_select_channel+0x36>
1005c586:	4620      	mov	r0, r4
1005c588:	4078      	eors	r0, r7
1005c58a:	b286      	uxth	r6, r0
1005c58c:	4630      	mov	r0, r6
1005c58e:	f7ff ff77 	bl	1005c480 <llc_mngm_mod_37>
1005c592:	2824      	cmp	r0, #36	@ 0x24
1005c594:	d815      	bhi.n	1005c5c2 <llc_mngm_csa2_select_channel+0x86>
1005c596:	08c1      	lsrs	r1, r0, #3
1005c598:	9a05      	ldr	r2, [sp, #20]
1005c59a:	5c52      	ldrb	r2, [r2, r1]
1005c59c:	00c9      	lsls	r1, r1, #3
1005c59e:	1a41      	subs	r1, r0, r1
1005c5a0:	b2c9      	uxtb	r1, r1
1005c5a2:	40ca      	lsrs	r2, r1
1005c5a4:	07d1      	lsls	r1, r2, #31
1005c5a6:	d00c      	beq.n	1005c5c2 <llc_mngm_csa2_select_channel+0x86>
1005c5a8:	a908      	add	r1, sp, #32
1005c5aa:	7008      	strb	r0, [r1, #0]
1005c5ac:	9a07      	ldr	r2, [sp, #28]
1005c5ae:	1c51      	adds	r1, r2, #1
1005c5b0:	7812      	ldrb	r2, [r2, #0]
1005c5b2:	2300      	movs	r3, #0
1005c5b4:	429a      	cmp	r2, r3
1005c5b6:	d00d      	beq.n	1005c5d4 <llc_mngm_csa2_select_channel+0x98>
1005c5b8:	5cce      	ldrb	r6, [r1, r3]
1005c5ba:	4286      	cmp	r6, r0
1005c5bc:	d00b      	beq.n	1005c5d6 <llc_mngm_csa2_select_channel+0x9a>
1005c5be:	1c5b      	adds	r3, r3, #1
1005c5c0:	e7f8      	b.n	1005c5b4 <llc_mngm_csa2_select_channel+0x78>
1005c5c2:	9907      	ldr	r1, [sp, #28]
1005c5c4:	7808      	ldrb	r0, [r1, #0]
1005c5c6:	4346      	muls	r6, r0
1005c5c8:	0c33      	lsrs	r3, r6, #16
1005c5ca:	18c8      	adds	r0, r1, r3
1005c5cc:	7840      	ldrb	r0, [r0, #1]
1005c5ce:	a908      	add	r1, sp, #32
1005c5d0:	7008      	strb	r0, [r1, #0]
1005c5d2:	e000      	b.n	1005c5d6 <llc_mngm_csa2_select_channel+0x9a>
1005c5d4:	2325      	movs	r3, #37	@ 0x25
1005c5d6:	2d00      	cmp	r5, #0
1005c5d8:	d10e      	bne.n	1005c5f8 <llc_mngm_csa2_select_channel+0xbc>
1005c5da:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1005c5dc:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005c5de:	ad08      	add	r5, sp, #32
1005c5e0:	b2ba      	uxth	r2, r7
1005c5e2:	9000      	str	r0, [sp, #0]
1005c5e4:	9201      	str	r2, [sp, #4]
1005c5e6:	9807      	ldr	r0, [sp, #28]
1005c5e8:	9002      	str	r0, [sp, #8]
1005c5ea:	9503      	str	r5, [sp, #12]
1005c5ec:	b2a2      	uxth	r2, r4
1005c5ee:	b2db      	uxtb	r3, r3
1005c5f0:	9806      	ldr	r0, [sp, #24]
1005c5f2:	f000 f803 	bl	1005c5fc <llc_mngm_csa2_select_subevent_channel_ucfg_weak>
1005c5f6:	7828      	ldrb	r0, [r5, #0]
1005c5f8:	b009      	add	sp, #36	@ 0x24
1005c5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005c5fc <llc_mngm_csa2_select_subevent_channel_ucfg_weak>:
1005c5fc:	4770      	bx	lr
	...

1005c600 <llc_mngm_csa2_permutation>:
1005c600:	0041      	lsls	r1, r0, #1
1005c602:	4a0a      	ldr	r2, [pc, #40]	@ (1005c62c <__arm_cp.7_0>)
1005c604:	400a      	ands	r2, r1
1005c606:	0840      	lsrs	r0, r0, #1
1005c608:	4909      	ldr	r1, [pc, #36]	@ (1005c630 <__arm_cp.7_1>)
1005c60a:	4001      	ands	r1, r0
1005c60c:	1888      	adds	r0, r1, r2
1005c60e:	0081      	lsls	r1, r0, #2
1005c610:	4a08      	ldr	r2, [pc, #32]	@ (1005c634 <__arm_cp.7_2>)
1005c612:	400a      	ands	r2, r1
1005c614:	0880      	lsrs	r0, r0, #2
1005c616:	4908      	ldr	r1, [pc, #32]	@ (1005c638 <__arm_cp.7_3>)
1005c618:	4001      	ands	r1, r0
1005c61a:	1888      	adds	r0, r1, r2
1005c61c:	0101      	lsls	r1, r0, #4
1005c61e:	4a07      	ldr	r2, [pc, #28]	@ (1005c63c <__arm_cp.7_4>)
1005c620:	400a      	ands	r2, r1
1005c622:	0900      	lsrs	r0, r0, #4
1005c624:	4906      	ldr	r1, [pc, #24]	@ (1005c640 <__arm_cp.7_5>)
1005c626:	4001      	ands	r1, r0
1005c628:	1888      	adds	r0, r1, r2
1005c62a:	4770      	bx	lr

1005c62c <__arm_cp.7_0>:
1005c62c:	0001aaaa 	.word	0x0001aaaa

1005c630 <__arm_cp.7_1>:
1005c630:	00005555 	.word	0x00005555

1005c634 <__arm_cp.7_2>:
1005c634:	0007cccc 	.word	0x0007cccc

1005c638 <__arm_cp.7_3>:
1005c638:	00003333 	.word	0x00003333

1005c63c <__arm_cp.7_4>:
1005c63c:	0000f0f0 	.word	0x0000f0f0

1005c640 <__arm_cp.7_5>:
1005c640:	00000f0f 	.word	0x00000f0f

1005c644 <llc_wl_clear_filter_accept_list>:
1005c644:	b5b0      	push	{r4, r5, r7, lr}
1005c646:	2401      	movs	r4, #1
1005c648:	4620      	mov	r0, r4
1005c64a:	f003 f9f7 	bl	1005fa3c <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>
1005c64e:	4605      	mov	r5, r0
1005c650:	4620      	mov	r0, r4
1005c652:	f000 f8b4 	bl	1005c7be <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>
1005c656:	4328      	orrs	r0, r5
1005c658:	d10a      	bne.n	1005c670 <llc_wl_clear_filter_accept_list+0x2c>
1005c65a:	4806      	ldr	r0, [pc, #24]	@ (1005c674 <__arm_cp.1_0>)
1005c65c:	6800      	ldr	r0, [r0, #0]
1005c65e:	219c      	movs	r1, #156	@ 0x9c
1005c660:	5840      	ldr	r0, [r0, r1]
1005c662:	300c      	adds	r0, #12
1005c664:	f007 fa0f 	bl	10063a86 <addr8_list_clear>
1005c668:	f000 f85a 	bl	1005c720 <llc_priv_clr_all_filter_accept_list_flags_in_resolving_list_ucfg_weak>
1005c66c:	2000      	movs	r0, #0
1005c66e:	bdb0      	pop	{r4, r5, r7, pc}
1005c670:	200c      	movs	r0, #12
1005c672:	bdb0      	pop	{r4, r5, r7, pc}

1005c674 <__arm_cp.1_0>:
1005c674:	20002958 	.word	0x20002958

1005c678 <llc_wl_add_device_to_filter_accept_list>:
1005c678:	b5f0      	push	{r4, r5, r6, r7, lr}
1005c67a:	b087      	sub	sp, #28
1005c67c:	460c      	mov	r4, r1
1005c67e:	4605      	mov	r5, r0
1005c680:	9106      	str	r1, [sp, #24]
1005c682:	9005      	str	r0, [sp, #20]
1005c684:	2601      	movs	r6, #1
1005c686:	4630      	mov	r0, r6
1005c688:	f003 f9d8 	bl	1005fa3c <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>
1005c68c:	4607      	mov	r7, r0
1005c68e:	4630      	mov	r0, r6
1005c690:	f000 f895 	bl	1005c7be <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>
1005c694:	4338      	orrs	r0, r7
1005c696:	d11d      	bne.n	1005c6d4 <llc_wl_add_device_to_filter_accept_list+0x5c>
1005c698:	b2e8      	uxtb	r0, r5
1005c69a:	28ff      	cmp	r0, #255	@ 0xff
1005c69c:	d105      	bne.n	1005c6aa <llc_wl_add_device_to_filter_accept_list+0x32>
1005c69e:	9005      	str	r0, [sp, #20]
1005c6a0:	21ff      	movs	r1, #255	@ 0xff
1005c6a2:	0609      	lsls	r1, r1, #24
1005c6a4:	400c      	ands	r4, r1
1005c6a6:	9406      	str	r4, [sp, #24]
1005c6a8:	4605      	mov	r5, r0
1005c6aa:	4810      	ldr	r0, [pc, #64]	@ (1005c6ec <__arm_cp.2_0>)
1005c6ac:	6800      	ldr	r0, [r0, #0]
1005c6ae:	219c      	movs	r1, #156	@ 0x9c
1005c6b0:	5840      	ldr	r0, [r0, r1]
1005c6b2:	a903      	add	r1, sp, #12
1005c6b4:	9101      	str	r1, [sp, #4]
1005c6b6:	a904      	add	r1, sp, #16
1005c6b8:	9100      	str	r1, [sp, #0]
1005c6ba:	300c      	adds	r0, #12
1005c6bc:	2301      	movs	r3, #1
1005c6be:	4629      	mov	r1, r5
1005c6c0:	4622      	mov	r2, r4
1005c6c2:	f007 f961 	bl	10063988 <addr8_list_add>
1005c6c6:	2800      	cmp	r0, #0
1005c6c8:	d006      	beq.n	1005c6d8 <llc_wl_add_device_to_filter_accept_list+0x60>
1005c6ca:	a805      	add	r0, sp, #20
1005c6cc:	2101      	movs	r1, #1
1005c6ce:	f000 f826 	bl	1005c71e <llc_priv_set_filter_accept_list_flag_in_resolving_list_ucfg_weak>
1005c6d2:	e005      	b.n	1005c6e0 <llc_wl_add_device_to_filter_accept_list+0x68>
1005c6d4:	200c      	movs	r0, #12
1005c6d6:	e006      	b.n	1005c6e6 <llc_wl_add_device_to_filter_accept_list+0x6e>
1005c6d8:	a803      	add	r0, sp, #12
1005c6da:	7800      	ldrb	r0, [r0, #0]
1005c6dc:	2800      	cmp	r0, #0
1005c6de:	d001      	beq.n	1005c6e4 <llc_wl_add_device_to_filter_accept_list+0x6c>
1005c6e0:	2000      	movs	r0, #0
1005c6e2:	e000      	b.n	1005c6e6 <llc_wl_add_device_to_filter_accept_list+0x6e>
1005c6e4:	2007      	movs	r0, #7
1005c6e6:	b007      	add	sp, #28
1005c6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005c6ea:	46c0      	nop			@ (mov r8, r8)

1005c6ec <__arm_cp.2_0>:
1005c6ec:	20002958 	.word	0x20002958

1005c6f0 <bis_csr_ucfg_weak>:
1005c6f0:	2000      	movs	r0, #0
1005c6f2:	4770      	bx	lr

1005c6f4 <cis_csr_ucfg_weak>:
1005c6f4:	2000      	movs	r0, #0
1005c6f6:	4770      	bx	lr

1005c6f8 <llc_isoal_mem_alloc_ucfg_weak>:
1005c6f8:	4770      	bx	lr

1005c6fa <iso_rx_bn_pdu_event_int_cb_ucfg_weak>:
1005c6fa:	2000      	movs	r0, #0
1005c6fc:	4770      	bx	lr

1005c6fe <iso_terminate_event_int_cb_ucfg_weak>:
1005c6fe:	2000      	movs	r0, #0
1005c700:	4770      	bx	lr

1005c702 <iso_tx_bn_pdu_event_int_cb_ucfg_weak>:
1005c702:	2000      	movs	r0, #0
1005c704:	4770      	bx	lr

1005c706 <llc_iso_cmn_mem_alloc_ucfg_weak>:
1005c706:	4770      	bx	lr

1005c708 <llc_padv_periodic_adv_sync_csr_ucfg_weak>:
1005c708:	2000      	movs	r0, #0
1005c70a:	4770      	bx	lr

1005c70c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>:
1005c70c:	2000      	movs	r0, #0
1005c70e:	4770      	bx	lr

1005c710 <llc_past_init_ucfg_weak>:
1005c710:	4770      	bx	lr

1005c712 <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>:
1005c712:	4770      	bx	lr

1005c714 <llc_priv_init_ucfg_weak>:
1005c714:	4770      	bx	lr

1005c716 <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>:
1005c716:	4770      	bx	lr

1005c718 <llc_priv_offline_rpa_resolution_ucfg_weak>:
1005c718:	4770      	bx	lr

1005c71a <llc_priv_controller_privacy_csr_ucfg_weak>:
1005c71a:	2000      	movs	r0, #0
1005c71c:	4770      	bx	lr

1005c71e <llc_priv_set_filter_accept_list_flag_in_resolving_list_ucfg_weak>:
1005c71e:	4770      	bx	lr

1005c720 <llc_priv_clr_all_filter_accept_list_flags_in_resolving_list_ucfg_weak>:
1005c720:	4770      	bx	lr

1005c722 <llc_priv_start_privacy_timer_ucfg_weak>:
1005c722:	4770      	bx	lr

1005c724 <llc_priv_stop_privacy_timer_ucfg_weak>:
1005c724:	4770      	bx	lr

1005c726 <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>:
1005c726:	4770      	bx	lr

1005c728 <llc_priv_enable_rpa_change_at_timeout_ucfg_weak>:
1005c728:	4770      	bx	lr
	...

1005c72c <llc_pscan_get_cntxt_per_p>:
1005c72c:	218c      	movs	r1, #140	@ 0x8c
1005c72e:	4341      	muls	r1, r0
1005c730:	4804      	ldr	r0, [pc, #16]	@ (1005c744 <__arm_cp.1_0>)
1005c732:	6800      	ldr	r0, [r0, #0]
1005c734:	229c      	movs	r2, #156	@ 0x9c
1005c736:	5880      	ldr	r0, [r0, r2]
1005c738:	6840      	ldr	r0, [r0, #4]
1005c73a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
1005c73c:	6800      	ldr	r0, [r0, #0]
1005c73e:	6800      	ldr	r0, [r0, #0]
1005c740:	1840      	adds	r0, r0, r1
1005c742:	4770      	bx	lr

1005c744 <__arm_cp.1_0>:
1005c744:	20002958 	.word	0x20002958

1005c748 <llc_pscan_init_ucfg_weak>:
1005c748:	4770      	bx	lr

1005c74a <llc_pscan_mem_allocate_ucfg_weak>:
1005c74a:	4770      	bx	lr

1005c74c <llc_pscan_wr_init_ucfg_weak>:
1005c74c:	4770      	bx	lr
	...

1005c750 <llc_pscan_wr_mem_allocate_ucfg_weak>:
1005c750:	b510      	push	{r4, lr}
1005c752:	2801      	cmp	r0, #1
1005c754:	d110      	bne.n	1005c778 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005c756:	2901      	cmp	r1, #1
1005c758:	d10e      	bne.n	1005c778 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005c75a:	2a01      	cmp	r2, #1
1005c75c:	d10c      	bne.n	1005c778 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005c75e:	2400      	movs	r4, #0
1005c760:	4620      	mov	r0, r4
1005c762:	f7ff ffe3 	bl	1005c72c <llc_pscan_get_cntxt_per_p>
1005c766:	3014      	adds	r0, #20
1005c768:	4904      	ldr	r1, [pc, #16]	@ (1005c77c <__arm_cp.5_0>)
1005c76a:	7f89      	ldrb	r1, [r1, #30]
1005c76c:	2900      	cmp	r1, #0
1005c76e:	d003      	beq.n	1005c778 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005c770:	6004      	str	r4, [r0, #0]
1005c772:	308c      	adds	r0, #140	@ 0x8c
1005c774:	1e49      	subs	r1, r1, #1
1005c776:	e7f9      	b.n	1005c76c <llc_pscan_wr_mem_allocate_ucfg_weak+0x1c>
1005c778:	bd10      	pop	{r4, pc}
1005c77a:	46c0      	nop			@ (mov r8, r8)

1005c77c <__arm_cp.5_0>:
1005c77c:	2000296c 	.word	0x2000296c

1005c780 <llc_pscan_wr_check_pawr_active_ucfg_weak>:
1005c780:	2000      	movs	r0, #0
1005c782:	4770      	bx	lr

1005c784 <llc_scan_get_cntxt_p>:
1005c784:	4802      	ldr	r0, [pc, #8]	@ (1005c790 <__arm_cp.0_0>)
1005c786:	6800      	ldr	r0, [r0, #0]
1005c788:	219c      	movs	r1, #156	@ 0x9c
1005c78a:	5840      	ldr	r0, [r0, r1]
1005c78c:	6840      	ldr	r0, [r0, #4]
1005c78e:	4770      	bx	lr

1005c790 <__arm_cp.0_0>:
1005c790:	20002958 	.word	0x20002958

1005c794 <llc_scan_init_ucfg_weak>:
1005c794:	4770      	bx	lr

1005c796 <llc_scan_mem_allocate_ucfg_weak>:
1005c796:	4770      	bx	lr

1005c798 <llc_scan_set_scan_channel_bitmap>:
1005c798:	b510      	push	{r4, lr}
1005c79a:	4604      	mov	r4, r0
1005c79c:	f7fd fd6c 	bl	1005a278 <scan_csr_ucfg_weak>
1005c7a0:	2801      	cmp	r0, #1
1005c7a2:	d108      	bne.n	1005c7b6 <llc_scan_set_scan_channel_bitmap+0x1e>
1005c7a4:	1e60      	subs	r0, r4, #1
1005c7a6:	2806      	cmp	r0, #6
1005c7a8:	d807      	bhi.n	1005c7ba <llc_scan_set_scan_channel_bitmap+0x22>
1005c7aa:	f7ff ffeb 	bl	1005c784 <llc_scan_get_cntxt_p>
1005c7ae:	21ef      	movs	r1, #239	@ 0xef
1005c7b0:	5444      	strb	r4, [r0, r1]
1005c7b2:	2000      	movs	r0, #0
1005c7b4:	bd10      	pop	{r4, pc}
1005c7b6:	2011      	movs	r0, #17
1005c7b8:	bd10      	pop	{r4, pc}
1005c7ba:	2012      	movs	r0, #18
1005c7bc:	bd10      	pop	{r4, pc}

1005c7be <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>:
1005c7be:	b5b0      	push	{r4, r5, r7, lr}
1005c7c0:	4605      	mov	r5, r0
1005c7c2:	2400      	movs	r4, #0
1005c7c4:	f7fd fd58 	bl	1005a278 <scan_csr_ucfg_weak>
1005c7c8:	2801      	cmp	r0, #1
1005c7ca:	d10d      	bne.n	1005c7e8 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
1005c7cc:	f7ff ffda 	bl	1005c784 <llc_scan_get_cntxt_p>
1005c7d0:	21eb      	movs	r1, #235	@ 0xeb
1005c7d2:	5c41      	ldrb	r1, [r0, r1]
1005c7d4:	07c9      	lsls	r1, r1, #31
1005c7d6:	d007      	beq.n	1005c7e8 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
1005c7d8:	2d00      	cmp	r5, #0
1005c7da:	d004      	beq.n	1005c7e6 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x28>
1005c7dc:	30ea      	adds	r0, #234	@ 0xea
1005c7de:	7800      	ldrb	r0, [r0, #0]
1005c7e0:	2401      	movs	r4, #1
1005c7e2:	4004      	ands	r4, r0
1005c7e4:	e000      	b.n	1005c7e8 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
1005c7e6:	2401      	movs	r4, #1
1005c7e8:	4620      	mov	r0, r4
1005c7ea:	bdb0      	pop	{r4, r5, r7, pc}

1005c7ec <llc_scan_stop_ucfg_weak>:
1005c7ec:	2000      	movs	r0, #0
1005c7ee:	4770      	bx	lr

1005c7f0 <llc_subrate_init_acceptable>:
1005c7f0:	2100      	movs	r1, #0
1005c7f2:	4a03      	ldr	r2, [pc, #12]	@ (1005c800 <__arm_cp.4_0>)
1005c7f4:	62c1      	str	r1, [r0, #44]	@ 0x2c
1005c7f6:	6302      	str	r2, [r0, #48]	@ 0x30
1005c7f8:	2119      	movs	r1, #25
1005c7fa:	01c9      	lsls	r1, r1, #7
1005c7fc:	8681      	strh	r1, [r0, #52]	@ 0x34
1005c7fe:	4770      	bx	lr

1005c800 <__arm_cp.4_0>:
1005c800:	00010001 	.word	0x00010001

1005c804 <llc_subrate_init_acceptable_per>:
1005c804:	b580      	push	{r7, lr}
1005c806:	4603      	mov	r3, r0
1005c808:	2049      	movs	r0, #73	@ 0x49
1005c80a:	0080      	lsls	r0, r0, #2
1005c80c:	1808      	adds	r0, r1, r0
1005c80e:	332c      	adds	r3, #44	@ 0x2c
1005c810:	220a      	movs	r2, #10
1005c812:	4619      	mov	r1, r3
1005c814:	f7f6 fd8e 	bl	10053334 <BLEPLAT_MemCpy>
1005c818:	bd80      	pop	{r7, pc}

1005c81a <llc_subrate_reset_params>:
1005c81a:	2147      	movs	r1, #71	@ 0x47
1005c81c:	0089      	lsls	r1, r1, #2
1005c81e:	2200      	movs	r2, #0
1005c820:	5042      	str	r2, [r0, r1]
1005c822:	1840      	adds	r0, r0, r1
1005c824:	2101      	movs	r1, #1
1005c826:	0409      	lsls	r1, r1, #16
1005c828:	6041      	str	r1, [r0, #4]
1005c82a:	4770      	bx	lr

1005c82c <llc_subrate_new_sr_base_event_ucfg_weak>:
1005c82c:	4770      	bx	lr

1005c82e <llc_subrate_update_cont_counter_ucfg_weak>:
1005c82e:	4770      	bx	lr

1005c830 <llc_subrate_offline_processing_ucfg_weak>:
1005c830:	2000      	movs	r0, #0
1005c832:	4770      	bx	lr

1005c834 <llc_convert_sca_to_ppm>:
1005c834:	0740      	lsls	r0, r0, #29
1005c836:	0f00      	lsrs	r0, r0, #28
1005c838:	4901      	ldr	r1, [pc, #4]	@ (1005c840 <__arm_cp.1_0>)
1005c83a:	5a08      	ldrh	r0, [r1, r0]
1005c83c:	4770      	bx	lr
1005c83e:	46c0      	nop			@ (mov r8, r8)

1005c840 <__arm_cp.1_0>:
1005c840:	1006a4b0 	.word	0x1006a4b0

1005c844 <llc_convert_hci_phy_enum_to_hw_phy>:
1005c844:	1e80      	subs	r0, r0, #2
1005c846:	b2c0      	uxtb	r0, r0
1005c848:	2803      	cmp	r0, #3
1005c84a:	d301      	bcc.n	1005c850 <llc_convert_hci_phy_enum_to_hw_phy+0xc>
1005c84c:	2000      	movs	r0, #0
1005c84e:	e002      	b.n	1005c856 <llc_convert_hci_phy_enum_to_hw_phy+0x12>
1005c850:	00c1      	lsls	r1, r0, #3
1005c852:	4802      	ldr	r0, [pc, #8]	@ (1005c85c <__arm_cp.4_0>)
1005c854:	40c8      	lsrs	r0, r1
1005c856:	b2c0      	uxtb	r0, r0
1005c858:	4770      	bx	lr
1005c85a:	46c0      	nop			@ (mov r8, r8)

1005c85c <__arm_cp.4_0>:
1005c85c:	00060401 	.word	0x00060401

1005c860 <ll_cpe_get_cpid_from_opcode>:
1005c860:	282a      	cmp	r0, #42	@ 0x2a
1005c862:	d804      	bhi.n	1005c86e <ll_cpe_get_cpid_from_opcode+0xe>
1005c864:	2103      	movs	r1, #3
1005c866:	4341      	muls	r1, r0
1005c868:	4802      	ldr	r0, [pc, #8]	@ (1005c874 <__arm_cp.0_0>)
1005c86a:	5c40      	ldrb	r0, [r0, r1]
1005c86c:	4770      	bx	lr
1005c86e:	2016      	movs	r0, #22
1005c870:	4770      	bx	lr
1005c872:	46c0      	nop			@ (mov r8, r8)

1005c874 <__arm_cp.0_0>:
1005c874:	1006a4c0 	.word	0x1006a4c0

1005c878 <ll_cpe_set_unknown_rsp_pending>:
1005c878:	b5b0      	push	{r4, r5, r7, lr}
1005c87a:	4604      	mov	r4, r0
1005c87c:	f7fe f9cc 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005c880:	2100      	movs	r1, #0
1005c882:	f7fe fc5f 	bl	1005b144 <llc_conn_get_ctrl_pdu_data_p>
1005c886:	4605      	mov	r5, r0
1005c888:	4620      	mov	r0, r4
1005c88a:	f000 f80d 	bl	1005c8a8 <LL_cpe_get_ctrl_flds_common_p>
1005c88e:	8801      	ldrh	r1, [r0, #0]
1005c890:	4a04      	ldr	r2, [pc, #16]	@ (1005c8a4 <__arm_cp.1_0>)
1005c892:	400a      	ands	r2, r1
1005c894:	8869      	ldrh	r1, [r5, #2]
1005c896:	0609      	lsls	r1, r1, #24
1005c898:	0cc9      	lsrs	r1, r1, #19
1005c89a:	1889      	adds	r1, r1, r2
1005c89c:	3110      	adds	r1, #16
1005c89e:	8001      	strh	r1, [r0, #0]
1005c8a0:	bdb0      	pop	{r4, r5, r7, pc}
1005c8a2:	46c0      	nop			@ (mov r8, r8)

1005c8a4 <__arm_cp.1_0>:
1005c8a4:	0000e00f 	.word	0x0000e00f

1005c8a8 <LL_cpe_get_ctrl_flds_common_p>:
1005c8a8:	b580      	push	{r7, lr}
1005c8aa:	f7fe f9b5 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005c8ae:	30b0      	adds	r0, #176	@ 0xb0
1005c8b0:	bd80      	pop	{r7, pc}

1005c8b2 <LL_cpe_register_cpf>:
1005c8b2:	b5b0      	push	{r4, r5, r7, lr}
1005c8b4:	460c      	mov	r4, r1
1005c8b6:	0085      	lsls	r5, r0, #2
1005c8b8:	f7fe f9a4 	bl	1005ac04 <llc_conn_get_cntxt_p>
1005c8bc:	6880      	ldr	r0, [r0, #8]
1005c8be:	5144      	str	r4, [r0, r5]
1005c8c0:	bdb0      	pop	{r4, r5, r7, pc}

1005c8c2 <LL_cpe_get_active_status>:
1005c8c2:	b580      	push	{r7, lr}
1005c8c4:	f000 f804 	bl	1005c8d0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c8c8:	7801      	ldrb	r1, [r0, #0]
1005c8ca:	2001      	movs	r0, #1
1005c8cc:	4008      	ands	r0, r1
1005c8ce:	bd80      	pop	{r7, pc}

1005c8d0 <ll_cpe_get_ctrl_flds_per_sm_p>:
1005c8d0:	b510      	push	{r4, lr}
1005c8d2:	460c      	mov	r4, r1
1005c8d4:	f7fe f9a0 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005c8d8:	1900      	adds	r0, r0, r4
1005c8da:	30a8      	adds	r0, #168	@ 0xa8
1005c8dc:	bd10      	pop	{r4, pc}

1005c8de <LL_cpe_set_active>:
1005c8de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005c8e0:	461c      	mov	r4, r3
1005c8e2:	4615      	mov	r5, r2
1005c8e4:	460e      	mov	r6, r1
1005c8e6:	4607      	mov	r7, r0
1005c8e8:	f7fe f996 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005c8ec:	1980      	adds	r0, r0, r6
1005c8ee:	21ac      	movs	r1, #172	@ 0xac
1005c8f0:	5445      	strb	r5, [r0, r1]
1005c8f2:	4638      	mov	r0, r7
1005c8f4:	4631      	mov	r1, r6
1005c8f6:	f7ff ffeb 	bl	1005c8d0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c8fa:	7801      	ldrb	r1, [r0, #0]
1005c8fc:	22de      	movs	r2, #222	@ 0xde
1005c8fe:	400a      	ands	r2, r1
1005c900:	07e1      	lsls	r1, r4, #31
1005c902:	0e89      	lsrs	r1, r1, #26
1005c904:	1889      	adds	r1, r1, r2
1005c906:	1c49      	adds	r1, r1, #1
1005c908:	7001      	strb	r1, [r0, #0]
1005c90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005c90c <LL_cpe_clr_active>:
1005c90c:	b570      	push	{r4, r5, r6, lr}
1005c90e:	4616      	mov	r6, r2
1005c910:	460d      	mov	r5, r1
1005c912:	4604      	mov	r4, r0
1005c914:	f000 f814 	bl	1005c940 <ll_cpe_get_cpid_from_sm>
1005c918:	42b0      	cmp	r0, r6
1005c91a:	d110      	bne.n	1005c93e <LL_cpe_clr_active+0x32>
1005c91c:	4620      	mov	r0, r4
1005c91e:	4629      	mov	r1, r5
1005c920:	f7ff ffd6 	bl	1005c8d0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c924:	2100      	movs	r1, #0
1005c926:	7001      	strb	r1, [r0, #0]
1005c928:	2d01      	cmp	r5, #1
1005c92a:	d001      	beq.n	1005c930 <LL_cpe_clr_active+0x24>
1005c92c:	256c      	movs	r5, #108	@ 0x6c
1005c92e:	e000      	b.n	1005c932 <LL_cpe_clr_active+0x26>
1005c930:	2570      	movs	r5, #112	@ 0x70
1005c932:	4620      	mov	r0, r4
1005c934:	f7fe f970 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005c938:	217d      	movs	r1, #125	@ 0x7d
1005c93a:	0449      	lsls	r1, r1, #17
1005c93c:	5141      	str	r1, [r0, r5]
1005c93e:	bd70      	pop	{r4, r5, r6, pc}

1005c940 <ll_cpe_get_cpid_from_sm>:
1005c940:	b510      	push	{r4, lr}
1005c942:	460c      	mov	r4, r1
1005c944:	f7fe f968 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005c948:	1900      	adds	r0, r0, r4
1005c94a:	21ac      	movs	r1, #172	@ 0xac
1005c94c:	5c40      	ldrb	r0, [r0, r1]
1005c94e:	bd10      	pop	{r4, pc}

1005c950 <LL_cpe_set_blocked>:
1005c950:	b510      	push	{r4, lr}
1005c952:	4614      	mov	r4, r2
1005c954:	f7ff ffbc 	bl	1005c8d0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c958:	2c02      	cmp	r4, #2
1005c95a:	d805      	bhi.n	1005c968 <LL_cpe_set_blocked+0x18>
1005c95c:	00e1      	lsls	r1, r4, #3
1005c95e:	4a03      	ldr	r2, [pc, #12]	@ (1005c96c <__arm_cp.9_0>)
1005c960:	40ca      	lsrs	r2, r1
1005c962:	7801      	ldrb	r1, [r0, #0]
1005c964:	4311      	orrs	r1, r2
1005c966:	7001      	strb	r1, [r0, #0]
1005c968:	bd10      	pop	{r4, pc}
1005c96a:	46c0      	nop			@ (mov r8, r8)

1005c96c <__arm_cp.9_0>:
1005c96c:	00080402 	.word	0x00080402

1005c970 <LL_cpe_set_prepare_tx_pdu>:
1005c970:	b580      	push	{r7, lr}
1005c972:	f7ff ffad 	bl	1005c8d0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c976:	7801      	ldrb	r1, [r0, #0]
1005c978:	2210      	movs	r2, #16
1005c97a:	430a      	orrs	r2, r1
1005c97c:	7002      	strb	r2, [r0, #0]
1005c97e:	2015      	movs	r0, #21
1005c980:	f006 fd6e 	bl	10063460 <tsk_notify_idx>
1005c984:	f7f5 feef 	bl	10052766 <BLE_STACK_ProcessRequest>
1005c988:	bd80      	pop	{r7, pc}

1005c98a <LL_cpe_get_cntxt>:
1005c98a:	b510      	push	{r4, lr}
1005c98c:	460c      	mov	r4, r1
1005c98e:	f7fe f943 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005c992:	00a1      	lsls	r1, r4, #2
1005c994:	1840      	adds	r0, r0, r1
1005c996:	21a0      	movs	r1, #160	@ 0xa0
1005c998:	5840      	ldr	r0, [r0, r1]
1005c99a:	bd10      	pop	{r4, pc}

1005c99c <LL_cpe_set_tx_with_instant>:
1005c99c:	b5b0      	push	{r4, r5, r7, lr}
1005c99e:	4604      	mov	r4, r0
1005c9a0:	f7ff ff96 	bl	1005c8d0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c9a4:	4605      	mov	r5, r0
1005c9a6:	4620      	mov	r0, r4
1005c9a8:	f7fe f936 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005c9ac:	7829      	ldrb	r1, [r5, #0]
1005c9ae:	2240      	movs	r2, #64	@ 0x40
1005c9b0:	430a      	orrs	r2, r1
1005c9b2:	702a      	strb	r2, [r5, #0]
1005c9b4:	f7fe fe87 	bl	1005b6c6 <llc_conn_set_tx_ctrl_pdu_has_instant>
1005c9b8:	bdb0      	pop	{r4, r5, r7, pc}

1005c9ba <LL_cpe_set_rx_with_instant>:
1005c9ba:	b5b0      	push	{r4, r5, r7, lr}
1005c9bc:	4604      	mov	r4, r0
1005c9be:	f7ff ff87 	bl	1005c8d0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c9c2:	4605      	mov	r5, r0
1005c9c4:	4620      	mov	r0, r4
1005c9c6:	f7fe f927 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005c9ca:	7829      	ldrb	r1, [r5, #0]
1005c9cc:	2240      	movs	r2, #64	@ 0x40
1005c9ce:	430a      	orrs	r2, r1
1005c9d0:	702a      	strb	r2, [r5, #0]
1005c9d2:	219a      	movs	r1, #154	@ 0x9a
1005c9d4:	5a42      	ldrh	r2, [r0, r1]
1005c9d6:	2301      	movs	r3, #1
1005c9d8:	4313      	orrs	r3, r2
1005c9da:	5243      	strh	r3, [r0, r1]
1005c9dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005c9e0 <LL_cpe_engine>:
1005c9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005c9e2:	b08d      	sub	sp, #52	@ 0x34
1005c9e4:	4604      	mov	r4, r0
1005c9e6:	a80c      	add	r0, sp, #48	@ 0x30
1005c9e8:	2700      	movs	r7, #0
1005c9ea:	8007      	strh	r7, [r0, #0]
1005c9ec:	4620      	mov	r0, r4
1005c9ee:	f7fe f913 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005c9f2:	21ff      	movs	r1, #255	@ 0xff
1005c9f4:	3112      	adds	r1, #18
1005c9f6:	900b      	str	r0, [sp, #44]	@ 0x2c
1005c9f8:	5c40      	ldrb	r0, [r0, r1]
1005c9fa:	2800      	cmp	r0, #0
1005c9fc:	9406      	str	r4, [sp, #24]
1005c9fe:	d100      	bne.n	1005ca02 <LL_cpe_engine+0x22>
1005ca00:	e083      	b.n	1005cb0a <LL_cpe_engine+0x12a>
1005ca02:	4620      	mov	r0, r4
1005ca04:	f000 fbc2 	bl	1005d18c <ll_cpe_set_active>
1005ca08:	4620      	mov	r0, r4
1005ca0a:	f7ff ff4d 	bl	1005c8a8 <LL_cpe_get_ctrl_flds_common_p>
1005ca0e:	4606      	mov	r6, r0
1005ca10:	4620      	mov	r0, r4
1005ca12:	f7fe f901 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005ca16:	4604      	mov	r4, r0
1005ca18:	8835      	ldrh	r5, [r6, #0]
1005ca1a:	f7fe fbc0 	bl	1005b19e <llc_conn_get_tx_ctrl_pdu_state>
1005ca1e:	0729      	lsls	r1, r5, #28
1005ca20:	d509      	bpl.n	1005ca36 <LL_cpe_engine+0x56>
1005ca22:	2803      	cmp	r0, #3
1005ca24:	d107      	bne.n	1005ca36 <LL_cpe_engine+0x56>
1005ca26:	2100      	movs	r1, #0
1005ca28:	4620      	mov	r0, r4
1005ca2a:	f7fe fe53 	bl	1005b6d4 <llc_conn_set_tx_ctrl_pdu_state>
1005ca2e:	8830      	ldrh	r0, [r6, #0]
1005ca30:	2108      	movs	r1, #8
1005ca32:	4388      	bics	r0, r1
1005ca34:	8030      	strh	r0, [r6, #0]
1005ca36:	9806      	ldr	r0, [sp, #24]
1005ca38:	f000 fbb0 	bl	1005d19c <ll_cpe_check_rx_pdu_can_be_processed>
1005ca3c:	2800      	cmp	r0, #0
1005ca3e:	d100      	bne.n	1005ca42 <LL_cpe_engine+0x62>
1005ca40:	e12e      	b.n	1005cca0 <LL_cpe_engine+0x2c0>
1005ca42:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005ca44:	4606      	mov	r6, r0
1005ca46:	362c      	adds	r6, #44	@ 0x2c
1005ca48:	4639      	mov	r1, r7
1005ca4a:	f7fe fb7b 	bl	1005b144 <llc_conn_get_ctrl_pdu_data_p>
1005ca4e:	7885      	ldrb	r5, [r0, #2]
1005ca50:	9005      	str	r0, [sp, #20]
1005ca52:	7840      	ldrb	r0, [r0, #1]
1005ca54:	9008      	str	r0, [sp, #32]
1005ca56:	2101      	movs	r1, #1
1005ca58:	9c06      	ldr	r4, [sp, #24]
1005ca5a:	4620      	mov	r0, r4
1005ca5c:	9104      	str	r1, [sp, #16]
1005ca5e:	463a      	mov	r2, r7
1005ca60:	f000 fbad 	bl	1005d1be <ll_cpe_get_blocked_status>
1005ca64:	9009      	str	r0, [sp, #36]	@ 0x24
1005ca66:	4620      	mov	r0, r4
1005ca68:	4639      	mov	r1, r7
1005ca6a:	463a      	mov	r2, r7
1005ca6c:	f000 fba7 	bl	1005d1be <ll_cpe_get_blocked_status>
1005ca70:	4603      	mov	r3, r0
1005ca72:	9607      	str	r6, [sp, #28]
1005ca74:	7830      	ldrb	r0, [r6, #0]
1005ca76:	1e84      	subs	r4, r0, #2
1005ca78:	1e61      	subs	r1, r4, #1
1005ca7a:	4620      	mov	r0, r4
1005ca7c:	4188      	sbcs	r0, r1
1005ca7e:	950a      	str	r5, [sp, #40]	@ 0x28
1005ca80:	2d2a      	cmp	r5, #42	@ 0x2a
1005ca82:	d900      	bls.n	1005ca86 <LL_cpe_engine+0xa6>
1005ca84:	e068      	b.n	1005cb58 <LL_cpe_engine+0x178>
1005ca86:	2103      	movs	r1, #3
1005ca88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005ca8a:	4351      	muls	r1, r2
1005ca8c:	4aa1      	ldr	r2, [pc, #644]	@ (1005cd14 <__arm_cp.14_7>)
1005ca8e:	1851      	adds	r1, r2, r1
1005ca90:	7849      	ldrb	r1, [r1, #1]
1005ca92:	9a08      	ldr	r2, [sp, #32]
1005ca94:	4291      	cmp	r1, r2
1005ca96:	d000      	beq.n	1005ca9a <LL_cpe_engine+0xba>
1005ca98:	e05e      	b.n	1005cb58 <LL_cpe_engine+0x178>
1005ca9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005ca9c:	292a      	cmp	r1, #42	@ 0x2a
1005ca9e:	d900      	bls.n	1005caa2 <LL_cpe_engine+0xc2>
1005caa0:	e05a      	b.n	1005cb58 <LL_cpe_engine+0x178>
1005caa2:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005caa4:	0049      	lsls	r1, r1, #1
1005caa6:	46c0      	nop			@ (mov r8, r8)
1005caa8:	4479      	add	r1, pc
1005caaa:	8889      	ldrh	r1, [r1, #4]
1005caac:	0049      	lsls	r1, r1, #1
1005caae:	448f      	add	pc, r1
1005cab0:	00540054 	.word	0x00540054
1005cab4:	0054002a 	.word	0x0054002a
1005cab8:	030e030e 	.word	0x030e030e
1005cabc:	002a002a 	.word	0x002a002a
1005cac0:	002a0054 	.word	0x002a0054
1005cac4:	002a0054 	.word	0x002a0054
1005cac8:	002a002a 	.word	0x002a002a
1005cacc:	0053030e 	.word	0x0053030e
1005cad0:	002a0053 	.word	0x002a0053
1005cad4:	002a002a 	.word	0x002a002a
1005cad8:	03150315 	.word	0x03150315
1005cadc:	03600321 	.word	0x03600321
1005cae0:	00530325 	.word	0x00530325
1005cae4:	03190319 	.word	0x03190319
1005cae8:	002a0329 	.word	0x002a0329
1005caec:	031d002a 	.word	0x031d002a
1005caf0:	031d032d 	.word	0x031d032d
1005caf4:	03110333 	.word	0x03110333
1005caf8:	03110311 	.word	0x03110311
1005cafc:	033d0337 	.word	0x033d0337
1005cb00:	034c0341 	.word	0x034c0341
1005cb04:	0352      	.short	0x0352
1005cb06:	9804      	ldr	r0, [sp, #16]
1005cb08:	e027      	b.n	1005cb5a <LL_cpe_engine+0x17a>
1005cb0a:	4620      	mov	r0, r4
1005cb0c:	f7fe f884 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005cb10:	4605      	mov	r5, r0
1005cb12:	202d      	movs	r0, #45	@ 0x2d
1005cb14:	5c28      	ldrb	r0, [r5, r0]
1005cb16:	2800      	cmp	r0, #0
1005cb18:	d100      	bne.n	1005cb1c <LL_cpe_engine+0x13c>
1005cb1a:	e09b      	b.n	1005cc54 <LL_cpe_engine+0x274>
1005cb1c:	900a      	str	r0, [sp, #40]	@ 0x28
1005cb1e:	462f      	mov	r7, r5
1005cb20:	372c      	adds	r7, #44	@ 0x2c
1005cb22:	462e      	mov	r6, r5
1005cb24:	36d8      	adds	r6, #216	@ 0xd8
1005cb26:	6d78      	ldr	r0, [r7, #84]	@ 0x54
1005cb28:	463c      	mov	r4, r7
1005cb2a:	3454      	adds	r4, #84	@ 0x54
1005cb2c:	7d79      	ldrb	r1, [r7, #21]
1005cb2e:	910b      	str	r1, [sp, #44]	@ 0x2c
1005cb30:	2800      	cmp	r0, #0
1005cb32:	d001      	beq.n	1005cb38 <LL_cpe_engine+0x158>
1005cb34:	f7f8 fee2 	bl	100558fc <Acl_Tx_Cmpl_Pkt_Handler>
1005cb38:	4620      	mov	r0, r4
1005cb3a:	f006 fe83 	bl	10063844 <ACL_list_init>
1005cb3e:	ce03      	ldmia	r6!, {r0, r1}
1005cb40:	f7fe fba8 	bl	1005b294 <llc_conn_list_remove_address>
1005cb44:	4874      	ldr	r0, [pc, #464]	@ (1005cd18 <__arm_cp.14_8>)
1005cb46:	6800      	ldr	r0, [r0, #0]
1005cb48:	212c      	movs	r1, #44	@ 0x2c
1005cb4a:	5c40      	ldrb	r0, [r0, r1]
1005cb4c:	07c0      	lsls	r0, r0, #31
1005cb4e:	0ec1      	lsrs	r1, r0, #27
1005cb50:	8f6c      	ldrh	r4, [r5, #58]	@ 0x3a
1005cb52:	d148      	bne.n	1005cbe6 <LL_cpe_engine+0x206>
1005cb54:	2205      	movs	r2, #5
1005cb56:	e04d      	b.n	1005cbf4 <LL_cpe_engine+0x214>
1005cb58:	4638      	mov	r0, r7
1005cb5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005cb5c:	4319      	orrs	r1, r3
1005cb5e:	d000      	beq.n	1005cb62 <LL_cpe_engine+0x182>
1005cb60:	e09e      	b.n	1005cca0 <LL_cpe_engine+0x2c0>
1005cb62:	2800      	cmp	r0, #0
1005cb64:	d07d      	beq.n	1005cc62 <LL_cpe_engine+0x282>
1005cb66:	9805      	ldr	r0, [sp, #20]
1005cb68:	78c6      	ldrb	r6, [r0, #3]
1005cb6a:	2401      	movs	r4, #1
1005cb6c:	9f06      	ldr	r7, [sp, #24]
1005cb6e:	4638      	mov	r0, r7
1005cb70:	4621      	mov	r1, r4
1005cb72:	f000 fb3d 	bl	1005d1f0 <ll_cpe_get_expected_opcode>
1005cb76:	9005      	str	r0, [sp, #20]
1005cb78:	4638      	mov	r0, r7
1005cb7a:	4621      	mov	r1, r4
1005cb7c:	f000 fb40 	bl	1005d200 <ll_cpe_get_state>
1005cb80:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
1005cb82:	9004      	str	r0, [sp, #16]
1005cb84:	4628      	mov	r0, r5
1005cb86:	9603      	str	r6, [sp, #12]
1005cb88:	4631      	mov	r1, r6
1005cb8a:	463a      	mov	r2, r7
1005cb8c:	9409      	str	r4, [sp, #36]	@ 0x24
1005cb8e:	4623      	mov	r3, r4
1005cb90:	f000 fb3e 	bl	1005d210 <LL_cpe_rxctrlpdu_checkreject>
1005cb94:	1e41      	subs	r1, r0, #1
1005cb96:	4188      	sbcs	r0, r1
1005cb98:	9905      	ldr	r1, [sp, #20]
1005cb9a:	1b49      	subs	r1, r1, r5
1005cb9c:	424a      	negs	r2, r1
1005cb9e:	414a      	adcs	r2, r1
1005cba0:	4302      	orrs	r2, r0
1005cba2:	9804      	ldr	r0, [sp, #16]
1005cba4:	1f00      	subs	r0, r0, #4
1005cba6:	4245      	negs	r5, r0
1005cba8:	4145      	adcs	r5, r0
1005cbaa:	4015      	ands	r5, r2
1005cbac:	2400      	movs	r4, #0
1005cbae:	4638      	mov	r0, r7
1005cbb0:	4621      	mov	r1, r4
1005cbb2:	f000 fb1d 	bl	1005d1f0 <ll_cpe_get_expected_opcode>
1005cbb6:	4606      	mov	r6, r0
1005cbb8:	9807      	ldr	r0, [sp, #28]
1005cbba:	7800      	ldrb	r0, [r0, #0]
1005cbbc:	9007      	str	r0, [sp, #28]
1005cbbe:	4638      	mov	r0, r7
1005cbc0:	4621      	mov	r1, r4
1005cbc2:	f000 fb1d 	bl	1005d200 <ll_cpe_get_state>
1005cbc6:	4607      	mov	r7, r0
1005cbc8:	2801      	cmp	r0, #1
1005cbca:	d14e      	bne.n	1005cc6a <LL_cpe_engine+0x28a>
1005cbcc:	9807      	ldr	r0, [sp, #28]
1005cbce:	1e81      	subs	r1, r0, #2
1005cbd0:	1e48      	subs	r0, r1, #1
1005cbd2:	4181      	sbcs	r1, r0
1005cbd4:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005cbd6:	4604      	mov	r4, r0
1005cbd8:	9a08      	ldr	r2, [sp, #32]
1005cbda:	f000 fb41 	bl	1005d260 <valid_first_opcode>
1005cbde:	2800      	cmp	r0, #0
1005cbe0:	d044      	beq.n	1005cc6c <LL_cpe_engine+0x28c>
1005cbe2:	2501      	movs	r5, #1
1005cbe4:	e042      	b.n	1005cc6c <LL_cpe_engine+0x28c>
1005cbe6:	484d      	ldr	r0, [pc, #308]	@ (1005cd1c <__arm_cp.14_9>)
1005cbe8:	6800      	ldr	r0, [r0, #0]
1005cbea:	2236      	movs	r2, #54	@ 0x36
1005cbec:	5c80      	ldrb	r0, [r0, r2]
1005cbee:	06c0      	lsls	r0, r0, #27
1005cbf0:	d51d      	bpl.n	1005cc2e <LL_cpe_engine+0x24e>
1005cbf2:	2215      	movs	r2, #21
1005cbf4:	206f      	movs	r0, #111	@ 0x6f
1005cbf6:	43c0      	mvns	r0, r0
1005cbf8:	4041      	eors	r1, r0
1005cbfa:	4849      	ldr	r0, [pc, #292]	@ (1005cd20 <__arm_cp.14_10>)
1005cbfc:	6800      	ldr	r0, [r0, #0]
1005cbfe:	6900      	ldr	r0, [r0, #16]
1005cc00:	b2ce      	uxtb	r6, r1
1005cc02:	2302      	movs	r3, #2
1005cc04:	4631      	mov	r1, r6
1005cc06:	f7f9 f8e1 	bl	10055dcc <aci_event_fifo_push_header>
1005cc0a:	2800      	cmp	r0, #0
1005cc0c:	d00f      	beq.n	1005cc2e <LL_cpe_engine+0x24e>
1005cc0e:	4601      	mov	r1, r0
1005cc10:	7204      	strb	r4, [r0, #8]
1005cc12:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005cc14:	7288      	strb	r0, [r1, #10]
1005cc16:	2000      	movs	r0, #0
1005cc18:	71c8      	strb	r0, [r1, #7]
1005cc1a:	2004      	movs	r0, #4
1005cc1c:	7188      	strb	r0, [r1, #6]
1005cc1e:	2205      	movs	r2, #5
1005cc20:	714a      	strb	r2, [r1, #5]
1005cc22:	7108      	strb	r0, [r1, #4]
1005cc24:	0a20      	lsrs	r0, r4, #8
1005cc26:	7248      	strb	r0, [r1, #9]
1005cc28:	4630      	mov	r0, r6
1005cc2a:	f7f9 f96c 	bl	10055f06 <aci_event_fifo_push>
1005cc2e:	4628      	mov	r0, r5
1005cc30:	f001 ffa4 	bl	1005eb7c <LLC_authenticated_payload_timeout_reset>
1005cc34:	9c06      	ldr	r4, [sp, #24]
1005cc36:	4620      	mov	r0, r4
1005cc38:	f000 fc18 	bl	1005d46c <ll_cpe_reset_state_machines>
1005cc3c:	4620      	mov	r0, r4
1005cc3e:	f7fe f8bb 	bl	1005adb8 <llc_conn_per_init>
1005cc42:	4620      	mov	r0, r4
1005cc44:	f7ff fd9c 	bl	1005c780 <llc_pscan_wr_check_pawr_active_ucfg_weak>
1005cc48:	2800      	cmp	r0, #0
1005cc4a:	d003      	beq.n	1005cc54 <LL_cpe_engine+0x274>
1005cc4c:	2001      	movs	r0, #1
1005cc4e:	7038      	strb	r0, [r7, #0]
1005cc50:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005cc52:	7578      	strb	r0, [r7, #21]
1005cc54:	a80c      	add	r0, sp, #48	@ 0x30
1005cc56:	7841      	ldrb	r1, [r0, #1]
1005cc58:	2902      	cmp	r1, #2
1005cc5a:	d000      	beq.n	1005cc5e <LL_cpe_engine+0x27e>
1005cc5c:	e232      	b.n	1005d0c4 <__arm_cp.14_10+0x3a4>
1005cc5e:	2001      	movs	r0, #1
1005cc60:	e233      	b.n	1005d0ca <__arm_cp.14_10+0x3aa>
1005cc62:	9806      	ldr	r0, [sp, #24]
1005cc64:	f7ff fe08 	bl	1005c878 <ll_cpe_set_unknown_rsp_pending>
1005cc68:	e017      	b.n	1005cc9a <LL_cpe_engine+0x2ba>
1005cc6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1005cc6c:	9903      	ldr	r1, [sp, #12]
1005cc6e:	2204      	movs	r2, #4
1005cc70:	407a      	eors	r2, r7
1005cc72:	4620      	mov	r0, r4
1005cc74:	4066      	eors	r6, r4
1005cc76:	4316      	orrs	r6, r2
1005cc78:	4274      	negs	r4, r6
1005cc7a:	4174      	adcs	r4, r6
1005cc7c:	2f04      	cmp	r7, #4
1005cc7e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1005cc80:	d000      	beq.n	1005cc84 <LL_cpe_engine+0x2a4>
1005cc82:	4626      	mov	r6, r4
1005cc84:	2300      	movs	r3, #0
1005cc86:	9a06      	ldr	r2, [sp, #24]
1005cc88:	f000 fac2 	bl	1005d210 <LL_cpe_rxctrlpdu_checkreject>
1005cc8c:	2800      	cmp	r0, #0
1005cc8e:	d100      	bne.n	1005cc92 <LL_cpe_engine+0x2b2>
1005cc90:	4626      	mov	r6, r4
1005cc92:	2e01      	cmp	r6, #1
1005cc94:	d004      	beq.n	1005cca0 <LL_cpe_engine+0x2c0>
1005cc96:	2d00      	cmp	r5, #0
1005cc98:	d102      	bne.n	1005cca0 <LL_cpe_engine+0x2c0>
1005cc9a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005cc9c:	f7fe f998 	bl	1005afd0 <llc_conn_clr_rx_ctrl_pdu_full>
1005cca0:	2000      	movs	r0, #0
1005cca2:	9005      	str	r0, [sp, #20]
1005cca4:	43c0      	mvns	r0, r0
1005cca6:	9f06      	ldr	r7, [sp, #24]
1005cca8:	2801      	cmp	r0, #1
1005ccaa:	d100      	bne.n	1005ccae <LL_cpe_engine+0x2ce>
1005ccac:	e1ff      	b.n	1005d0ae <__arm_cp.14_10+0x38e>
1005ccae:	900a      	str	r0, [sp, #40]	@ 0x28
1005ccb0:	1c40      	adds	r0, r0, #1
1005ccb2:	900b      	str	r0, [sp, #44]	@ 0x2c
1005ccb4:	4638      	mov	r0, r7
1005ccb6:	f000 fc5a 	bl	1005d56e <ll_cpe_get_active>
1005ccba:	2800      	cmp	r0, #0
1005ccbc:	d017      	beq.n	1005ccee <LL_cpe_engine+0x30e>
1005ccbe:	4638      	mov	r0, r7
1005ccc0:	f7ff fdf2 	bl	1005c8a8 <LL_cpe_get_ctrl_flds_common_p>
1005ccc4:	4605      	mov	r5, r0
1005ccc6:	8800      	ldrh	r0, [r0, #0]
1005ccc8:	0780      	lsls	r0, r0, #30
1005ccca:	d500      	bpl.n	1005ccce <LL_cpe_engine+0x2ee>
1005cccc:	e1ed      	b.n	1005d0aa <__arm_cp.14_10+0x38a>
1005ccce:	4638      	mov	r0, r7
1005ccd0:	f7fd ffa2 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005ccd4:	24b2      	movs	r4, #178	@ 0xb2
1005ccd6:	5d06      	ldrb	r6, [r0, r4]
1005ccd8:	2e00      	cmp	r6, #0
1005ccda:	d008      	beq.n	1005ccee <LL_cpe_engine+0x30e>
1005ccdc:	4638      	mov	r0, r7
1005ccde:	f7fd ff9b 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005cce2:	9009      	str	r0, [sp, #36]	@ 0x24
1005cce4:	f7fe fa5b 	bl	1005b19e <llc_conn_get_tx_ctrl_pdu_state>
1005cce8:	2800      	cmp	r0, #0
1005ccea:	d100      	bne.n	1005ccee <LL_cpe_engine+0x30e>
1005ccec:	e0e1      	b.n	1005ceb2 <__arm_cp.14_10+0x192>
1005ccee:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005ccf0:	b2c6      	uxtb	r6, r0
1005ccf2:	4638      	mov	r0, r7
1005ccf4:	4631      	mov	r1, r6
1005ccf6:	f000 fa83 	bl	1005d200 <ll_cpe_get_state>
1005ccfa:	4605      	mov	r5, r0
1005ccfc:	2805      	cmp	r0, #5
1005ccfe:	9608      	str	r6, [sp, #32]
1005cd00:	9009      	str	r0, [sp, #36]	@ 0x24
1005cd02:	d816      	bhi.n	1005cd32 <__arm_cp.14_10+0x12>
1005cd04:	447d      	add	r5, pc
1005cd06:	792d      	ldrb	r5, [r5, #4]
1005cd08:	006d      	lsls	r5, r5, #1
1005cd0a:	44af      	add	pc, r5
1005cd0c:	6544140b 	.word	0x6544140b
1005cd10:	46c0b799 	.word	0x46c0b799

1005cd14 <__arm_cp.14_7>:
1005cd14:	1006a4c0 	.word	0x1006a4c0

1005cd18 <__arm_cp.14_8>:
1005cd18:	20002904 	.word	0x20002904

1005cd1c <__arm_cp.14_9>:
1005cd1c:	20002958 	.word	0x20002958

1005cd20 <__arm_cp.14_10>:
1005cd20:	20002908 	.word	0x20002908
1005cd24:	4638      	mov	r0, r7
1005cd26:	f000 fc22 	bl	1005d56e <ll_cpe_get_active>
1005cd2a:	4604      	mov	r4, r0
1005cd2c:	1e40      	subs	r0, r0, #1
1005cd2e:	4184      	sbcs	r4, r0
1005cd30:	e180      	b.n	1005d034 <__arm_cp.14_10+0x314>
1005cd32:	462c      	mov	r4, r5
1005cd34:	e17e      	b.n	1005d034 <__arm_cp.14_10+0x314>
1005cd36:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005cd38:	2800      	cmp	r0, #0
1005cd3a:	d100      	bne.n	1005cd3e <__arm_cp.14_10+0x1e>
1005cd3c:	e0df      	b.n	1005cefe <__arm_cp.14_10+0x1de>
1005cd3e:	4638      	mov	r0, r7
1005cd40:	f000 fa2c 	bl	1005d19c <ll_cpe_check_rx_pdu_can_be_processed>
1005cd44:	2800      	cmp	r0, #0
1005cd46:	d100      	bne.n	1005cd4a <__arm_cp.14_10+0x2a>
1005cd48:	e0d7      	b.n	1005cefa <__arm_cp.14_10+0x1da>
1005cd4a:	2501      	movs	r5, #1
1005cd4c:	4638      	mov	r0, r7
1005cd4e:	4629      	mov	r1, r5
1005cd50:	f000 fa56 	bl	1005d200 <ll_cpe_get_state>
1005cd54:	4604      	mov	r4, r0
1005cd56:	4638      	mov	r0, r7
1005cd58:	f000 fc10 	bl	1005d57c <ll_cpe_get_rx_pdu_discarded_by_one_sm>
1005cd5c:	2c04      	cmp	r4, #4
1005cd5e:	d103      	bne.n	1005cd68 <__arm_cp.14_10+0x48>
1005cd60:	462c      	mov	r4, r5
1005cd62:	2800      	cmp	r0, #0
1005cd64:	d100      	bne.n	1005cd68 <__arm_cp.14_10+0x48>
1005cd66:	e165      	b.n	1005d034 <__arm_cp.14_10+0x314>
1005cd68:	2100      	movs	r1, #0
1005cd6a:	2401      	movs	r4, #1
1005cd6c:	4638      	mov	r0, r7
1005cd6e:	4622      	mov	r2, r4
1005cd70:	f000 fc0c 	bl	1005d58c <ll_cpe_process_rx_pdu>
1005cd74:	2800      	cmp	r0, #0
1005cd76:	d100      	bne.n	1005cd7a <__arm_cp.14_10+0x5a>
1005cd78:	e153      	b.n	1005d022 <__arm_cp.14_10+0x302>
1005cd7a:	2100      	movs	r1, #0
1005cd7c:	4638      	mov	r0, r7
1005cd7e:	f7ff fda0 	bl	1005c8c2 <LL_cpe_get_active_status>
1005cd82:	2800      	cmp	r0, #0
1005cd84:	d100      	bne.n	1005cd88 <__arm_cp.14_10+0x68>
1005cd86:	e152      	b.n	1005d02e <__arm_cp.14_10+0x30e>
1005cd88:	2100      	movs	r1, #0
1005cd8a:	4638      	mov	r0, r7
1005cd8c:	f000 fcf4 	bl	1005d778 <ll_cpe_get_instant_active>
1005cd90:	2800      	cmp	r0, #0
1005cd92:	d171      	bne.n	1005ce78 <__arm_cp.14_10+0x158>
1005cd94:	e143      	b.n	1005d01e <__arm_cp.14_10+0x2fe>
1005cd96:	4638      	mov	r0, r7
1005cd98:	f7fd ff3e 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005cd9c:	4604      	mov	r4, r0
1005cd9e:	4638      	mov	r0, r7
1005cda0:	4631      	mov	r1, r6
1005cda2:	f7ff fd95 	bl	1005c8d0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005cda6:	7800      	ldrb	r0, [r0, #0]
1005cda8:	06c7      	lsls	r7, r0, #27
1005cdaa:	9407      	str	r4, [sp, #28]
1005cdac:	4620      	mov	r0, r4
1005cdae:	f7fe f9f6 	bl	1005b19e <llc_conn_get_tx_ctrl_pdu_state>
1005cdb2:	2402      	movs	r4, #2
1005cdb4:	2f00      	cmp	r7, #0
1005cdb6:	d400      	bmi.n	1005cdba <__arm_cp.14_10+0x9a>
1005cdb8:	e09d      	b.n	1005cef6 <__arm_cp.14_10+0x1d6>
1005cdba:	2800      	cmp	r0, #0
1005cdbc:	d000      	beq.n	1005cdc0 <__arm_cp.14_10+0xa0>
1005cdbe:	e09a      	b.n	1005cef6 <__arm_cp.14_10+0x1d6>
1005cdc0:	2701      	movs	r7, #1
1005cdc2:	9d06      	ldr	r5, [sp, #24]
1005cdc4:	4628      	mov	r0, r5
1005cdc6:	4631      	mov	r1, r6
1005cdc8:	463a      	mov	r2, r7
1005cdca:	f000 f9f8 	bl	1005d1be <ll_cpe_get_blocked_status>
1005cdce:	2800      	cmp	r0, #0
1005cdd0:	d100      	bne.n	1005cdd4 <__arm_cp.14_10+0xb4>
1005cdd2:	e0b6      	b.n	1005cf42 <__arm_cp.14_10+0x222>
1005cdd4:	462f      	mov	r7, r5
1005cdd6:	e12d      	b.n	1005d034 <__arm_cp.14_10+0x314>
1005cdd8:	4638      	mov	r0, r7
1005cdda:	f7fd ff1d 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005cdde:	4605      	mov	r5, r0
1005cde0:	f7fe f9dd 	bl	1005b19e <llc_conn_get_tx_ctrl_pdu_state>
1005cde4:	2803      	cmp	r0, #3
1005cde6:	d000      	beq.n	1005cdea <__arm_cp.14_10+0xca>
1005cde8:	e0ed      	b.n	1005cfc6 <__arm_cp.14_10+0x2a6>
1005cdea:	4638      	mov	r0, r7
1005cdec:	4631      	mov	r1, r6
1005cdee:	f7ff fda7 	bl	1005c940 <ll_cpe_get_cpid_from_sm>
1005cdf2:	f000 fcff 	bl	1005d7f4 <LL_cpe_get_cpf>
1005cdf6:	4604      	mov	r4, r0
1005cdf8:	2600      	movs	r6, #0
1005cdfa:	4638      	mov	r0, r7
1005cdfc:	9908      	ldr	r1, [sp, #32]
1005cdfe:	4632      	mov	r2, r6
1005ce00:	4633      	mov	r3, r6
1005ce02:	47a0      	blx	r4
1005ce04:	4602      	mov	r2, r0
1005ce06:	4638      	mov	r0, r7
1005ce08:	9908      	ldr	r1, [sp, #32]
1005ce0a:	f000 fd00 	bl	1005d80e <ll_cpe_set_expected_opcode>
1005ce0e:	4628      	mov	r0, r5
1005ce10:	4631      	mov	r1, r6
1005ce12:	9c08      	ldr	r4, [sp, #32]
1005ce14:	f7fe fc5e 	bl	1005b6d4 <llc_conn_set_tx_ctrl_pdu_state>
1005ce18:	4638      	mov	r0, r7
1005ce1a:	4621      	mov	r1, r4
1005ce1c:	f7ff fd51 	bl	1005c8c2 <LL_cpe_get_active_status>
1005ce20:	2800      	cmp	r0, #0
1005ce22:	d06a      	beq.n	1005cefa <__arm_cp.14_10+0x1da>
1005ce24:	4638      	mov	r0, r7
1005ce26:	4621      	mov	r1, r4
1005ce28:	f000 fca6 	bl	1005d778 <ll_cpe_get_instant_active>
1005ce2c:	2800      	cmp	r0, #0
1005ce2e:	d160      	bne.n	1005cef2 <__arm_cp.14_10+0x1d2>
1005ce30:	4638      	mov	r0, r7
1005ce32:	4621      	mov	r1, r4
1005ce34:	f000 f9dc 	bl	1005d1f0 <ll_cpe_get_expected_opcode>
1005ce38:	28ff      	cmp	r0, #255	@ 0xff
1005ce3a:	d068      	beq.n	1005cf0e <__arm_cp.14_10+0x1ee>
1005ce3c:	2404      	movs	r4, #4
1005ce3e:	e0f9      	b.n	1005d034 <__arm_cp.14_10+0x314>
1005ce40:	4638      	mov	r0, r7
1005ce42:	f000 f9ab 	bl	1005d19c <ll_cpe_check_rx_pdu_can_be_processed>
1005ce46:	2404      	movs	r4, #4
1005ce48:	2800      	cmp	r0, #0
1005ce4a:	d100      	bne.n	1005ce4e <__arm_cp.14_10+0x12e>
1005ce4c:	e0f2      	b.n	1005d034 <__arm_cp.14_10+0x314>
1005ce4e:	2203      	movs	r2, #3
1005ce50:	4638      	mov	r0, r7
1005ce52:	4631      	mov	r1, r6
1005ce54:	f000 fb9a 	bl	1005d58c <ll_cpe_process_rx_pdu>
1005ce58:	2800      	cmp	r0, #0
1005ce5a:	d05a      	beq.n	1005cf12 <__arm_cp.14_10+0x1f2>
1005ce5c:	4638      	mov	r0, r7
1005ce5e:	4631      	mov	r1, r6
1005ce60:	f7ff fd2f 	bl	1005c8c2 <LL_cpe_get_active_status>
1005ce64:	2800      	cmp	r0, #0
1005ce66:	d100      	bne.n	1005ce6a <__arm_cp.14_10+0x14a>
1005ce68:	e0bb      	b.n	1005cfe2 <__arm_cp.14_10+0x2c2>
1005ce6a:	4638      	mov	r0, r7
1005ce6c:	4631      	mov	r1, r6
1005ce6e:	f000 fc83 	bl	1005d778 <ll_cpe_get_instant_active>
1005ce72:	2800      	cmp	r0, #0
1005ce74:	d100      	bne.n	1005ce78 <__arm_cp.14_10+0x158>
1005ce76:	e0b6      	b.n	1005cfe6 <__arm_cp.14_10+0x2c6>
1005ce78:	2405      	movs	r4, #5
1005ce7a:	e0d8      	b.n	1005d02e <__arm_cp.14_10+0x30e>
1005ce7c:	4638      	mov	r0, r7
1005ce7e:	f7fd fecb 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005ce82:	4604      	mov	r4, r0
1005ce84:	f7fe f974 	bl	1005b170 <llc_conn_get_instant_reached>
1005ce88:	2801      	cmp	r0, #1
1005ce8a:	d132      	bne.n	1005cef2 <__arm_cp.14_10+0x1d2>
1005ce8c:	4638      	mov	r0, r7
1005ce8e:	4631      	mov	r1, r6
1005ce90:	f7ff fd56 	bl	1005c940 <ll_cpe_get_cpid_from_sm>
1005ce94:	f000 fcae 	bl	1005d7f4 <LL_cpe_get_cpf>
1005ce98:	2800      	cmp	r0, #0
1005ce9a:	9407      	str	r4, [sp, #28]
1005ce9c:	d100      	bne.n	1005cea0 <__arm_cp.14_10+0x180>
1005ce9e:	e094      	b.n	1005cfca <__arm_cp.14_10+0x2aa>
1005cea0:	4605      	mov	r5, r0
1005cea2:	4620      	mov	r0, r4
1005cea4:	f7fe f95f 	bl	1005b166 <llc_conn_get_instant_passed>
1005cea8:	2801      	cmp	r0, #1
1005ceaa:	d100      	bne.n	1005ceae <__arm_cp.14_10+0x18e>
1005ceac:	e08f      	b.n	1005cfce <__arm_cp.14_10+0x2ae>
1005ceae:	2207      	movs	r2, #7
1005ceb0:	e08e      	b.n	1005cfd0 <__arm_cp.14_10+0x2b0>
1005ceb2:	2101      	movs	r1, #1
1005ceb4:	910a      	str	r1, [sp, #40]	@ 0x28
1005ceb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005ceb8:	f7fe f944 	bl	1005b144 <llc_conn_get_ctrl_pdu_data_p>
1005cebc:	49b2      	ldr	r1, [pc, #712]	@ (1005d188 <__arm_cp.14_1>)
1005cebe:	8001      	strh	r1, [r0, #0]
1005cec0:	0671      	lsls	r1, r6, #25
1005cec2:	0c49      	lsrs	r1, r1, #17
1005cec4:	1c89      	adds	r1, r1, #2
1005cec6:	8041      	strh	r1, [r0, #2]
1005cec8:	8828      	ldrh	r0, [r5, #0]
1005ceca:	2102      	movs	r1, #2
1005cecc:	4301      	orrs	r1, r0
1005cece:	8029      	strh	r1, [r5, #0]
1005ced0:	4638      	mov	r0, r7
1005ced2:	f7fd fea1 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005ced6:	9d05      	ldr	r5, [sp, #20]
1005ced8:	5505      	strb	r5, [r0, r4]
1005ceda:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005cedc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1005cede:	4621      	mov	r1, r4
1005cee0:	f7fe fbf8 	bl	1005b6d4 <llc_conn_set_tx_ctrl_pdu_state>
1005cee4:	2204      	movs	r2, #4
1005cee6:	4638      	mov	r0, r7
1005cee8:	4621      	mov	r1, r4
1005ceea:	462b      	mov	r3, r5
1005ceec:	f7ff fcf7 	bl	1005c8de <LL_cpe_set_active>
1005cef0:	e0db      	b.n	1005d0aa <__arm_cp.14_10+0x38a>
1005cef2:	2405      	movs	r4, #5
1005cef4:	e09e      	b.n	1005d034 <__arm_cp.14_10+0x314>
1005cef6:	9f06      	ldr	r7, [sp, #24]
1005cef8:	e09c      	b.n	1005d034 <__arm_cp.14_10+0x314>
1005cefa:	2401      	movs	r4, #1
1005cefc:	e09a      	b.n	1005d034 <__arm_cp.14_10+0x314>
1005cefe:	2401      	movs	r4, #1
1005cf00:	4638      	mov	r0, r7
1005cf02:	4621      	mov	r1, r4
1005cf04:	f7ff fcdd 	bl	1005c8c2 <LL_cpe_get_active_status>
1005cf08:	2800      	cmp	r0, #0
1005cf0a:	d100      	bne.n	1005cf0e <__arm_cp.14_10+0x1ee>
1005cf0c:	e092      	b.n	1005d034 <__arm_cp.14_10+0x314>
1005cf0e:	2402      	movs	r4, #2
1005cf10:	e090      	b.n	1005d034 <__arm_cp.14_10+0x314>
1005cf12:	4626      	mov	r6, r4
1005cf14:	4638      	mov	r0, r7
1005cf16:	f000 fb31 	bl	1005d57c <ll_cpe_get_rx_pdu_discarded_by_one_sm>
1005cf1a:	4604      	mov	r4, r0
1005cf1c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005cf1e:	4241      	negs	r1, r0
1005cf20:	4141      	adcs	r1, r0
1005cf22:	4638      	mov	r0, r7
1005cf24:	f000 f96c 	bl	1005d200 <ll_cpe_get_state>
1005cf28:	2c00      	cmp	r4, #0
1005cf2a:	d064      	beq.n	1005cff6 <__arm_cp.14_10+0x2d6>
1005cf2c:	4638      	mov	r0, r7
1005cf2e:	f7fd fe73 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005cf32:	2100      	movs	r1, #0
1005cf34:	f7fe f906 	bl	1005b144 <llc_conn_get_ctrl_pdu_data_p>
1005cf38:	4638      	mov	r0, r7
1005cf3a:	f000 fc24 	bl	1005d786 <ll_cpe_clr_rx_pdu_discarded_by_one_sm>
1005cf3e:	4634      	mov	r4, r6
1005cf40:	e078      	b.n	1005d034 <__arm_cp.14_10+0x314>
1005cf42:	9704      	str	r7, [sp, #16]
1005cf44:	22ff      	movs	r2, #255	@ 0xff
1005cf46:	4628      	mov	r0, r5
1005cf48:	4631      	mov	r1, r6
1005cf4a:	f000 fc24 	bl	1005d796 <ll_cpe_check_instant_blocked>
1005cf4e:	2800      	cmp	r0, #0
1005cf50:	462f      	mov	r7, r5
1005cf52:	d16f      	bne.n	1005d034 <__arm_cp.14_10+0x314>
1005cf54:	4638      	mov	r0, r7
1005cf56:	4631      	mov	r1, r6
1005cf58:	f7ff fcf2 	bl	1005c940 <ll_cpe_get_cpid_from_sm>
1005cf5c:	f000 fc4a 	bl	1005d7f4 <LL_cpe_get_cpf>
1005cf60:	4604      	mov	r4, r0
1005cf62:	9807      	ldr	r0, [sp, #28]
1005cf64:	9d04      	ldr	r5, [sp, #16]
1005cf66:	4629      	mov	r1, r5
1005cf68:	f7fe f8ec 	bl	1005b144 <llc_conn_get_ctrl_pdu_data_p>
1005cf6c:	4603      	mov	r3, r0
1005cf6e:	2206      	movs	r2, #6
1005cf70:	4638      	mov	r0, r7
1005cf72:	4631      	mov	r1, r6
1005cf74:	9303      	str	r3, [sp, #12]
1005cf76:	47a0      	blx	r4
1005cf78:	4638      	mov	r0, r7
1005cf7a:	4631      	mov	r1, r6
1005cf7c:	f7ff fca1 	bl	1005c8c2 <LL_cpe_get_active_status>
1005cf80:	2800      	cmp	r0, #0
1005cf82:	462c      	mov	r4, r5
1005cf84:	d056      	beq.n	1005d034 <__arm_cp.14_10+0x314>
1005cf86:	4638      	mov	r0, r7
1005cf88:	4631      	mov	r1, r6
1005cf8a:	f7ff fca1 	bl	1005c8d0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005cf8e:	7801      	ldrb	r1, [r0, #0]
1005cf90:	22ef      	movs	r2, #239	@ 0xef
1005cf92:	400a      	ands	r2, r1
1005cf94:	7002      	strb	r2, [r0, #0]
1005cf96:	22ff      	movs	r2, #255	@ 0xff
1005cf98:	4638      	mov	r0, r7
1005cf9a:	4631      	mov	r1, r6
1005cf9c:	f000 fc37 	bl	1005d80e <ll_cpe_set_expected_opcode>
1005cfa0:	2401      	movs	r4, #1
1005cfa2:	9807      	ldr	r0, [sp, #28]
1005cfa4:	4621      	mov	r1, r4
1005cfa6:	f7fe fb95 	bl	1005b6d4 <llc_conn_set_tx_ctrl_pdu_state>
1005cfaa:	9a03      	ldr	r2, [sp, #12]
1005cfac:	7850      	ldrb	r0, [r2, #1]
1005cfae:	2108      	movs	r1, #8
1005cfb0:	1c80      	adds	r0, r0, #2
1005cfb2:	b2c0      	uxtb	r0, r0
1005cfb4:	9100      	str	r1, [sp, #0]
1005cfb6:	9001      	str	r0, [sp, #4]
1005cfb8:	9202      	str	r2, [sp, #8]
1005cfba:	2000      	movs	r0, #0
1005cfbc:	4621      	mov	r1, r4
1005cfbe:	4622      	mov	r2, r4
1005cfc0:	4623      	mov	r3, r4
1005cfc2:	f7f8 fefe 	bl	10055dc2 <log_notify_stu_ucfg_weak>
1005cfc6:	2403      	movs	r4, #3
1005cfc8:	e034      	b.n	1005d034 <__arm_cp.14_10+0x314>
1005cfca:	2405      	movs	r4, #5
1005cfcc:	e005      	b.n	1005cfda <__arm_cp.14_10+0x2ba>
1005cfce:	2208      	movs	r2, #8
1005cfd0:	2300      	movs	r3, #0
1005cfd2:	4638      	mov	r0, r7
1005cfd4:	4631      	mov	r1, r6
1005cfd6:	47a8      	blx	r5
1005cfd8:	2401      	movs	r4, #1
1005cfda:	9807      	ldr	r0, [sp, #28]
1005cfdc:	f7fd ffe4 	bl	1005afa8 <llc_conn_clr_instant_reached_passed>
1005cfe0:	e028      	b.n	1005d034 <__arm_cp.14_10+0x314>
1005cfe2:	2401      	movs	r4, #1
1005cfe4:	e023      	b.n	1005d02e <__arm_cp.14_10+0x30e>
1005cfe6:	4638      	mov	r0, r7
1005cfe8:	4631      	mov	r1, r6
1005cfea:	f000 f901 	bl	1005d1f0 <ll_cpe_get_expected_opcode>
1005cfee:	28ff      	cmp	r0, #255	@ 0xff
1005cff0:	d015      	beq.n	1005d01e <__arm_cp.14_10+0x2fe>
1005cff2:	2404      	movs	r4, #4
1005cff4:	e01b      	b.n	1005d02e <__arm_cp.14_10+0x30e>
1005cff6:	2804      	cmp	r0, #4
1005cff8:	d004      	beq.n	1005d004 <__arm_cp.14_10+0x2e4>
1005cffa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005cffc:	2900      	cmp	r1, #0
1005cffe:	d095      	beq.n	1005cf2c <__arm_cp.14_10+0x20c>
1005d000:	2801      	cmp	r0, #1
1005d002:	d193      	bne.n	1005cf2c <__arm_cp.14_10+0x20c>
1005d004:	4638      	mov	r0, r7
1005d006:	f7ff fc4f 	bl	1005c8a8 <LL_cpe_get_ctrl_flds_common_p>
1005d00a:	8801      	ldrh	r1, [r0, #0]
1005d00c:	2404      	movs	r4, #4
1005d00e:	4321      	orrs	r1, r4
1005d010:	8001      	strh	r1, [r0, #0]
1005d012:	2015      	movs	r0, #21
1005d014:	f006 fa24 	bl	10063460 <tsk_notify_idx>
1005d018:	f7f5 fba5 	bl	10052766 <BLE_STACK_ProcessRequest>
1005d01c:	e00a      	b.n	1005d034 <__arm_cp.14_10+0x314>
1005d01e:	2402      	movs	r4, #2
1005d020:	e005      	b.n	1005d02e <__arm_cp.14_10+0x30e>
1005d022:	4638      	mov	r0, r7
1005d024:	f7fd fdf8 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005d028:	2100      	movs	r1, #0
1005d02a:	f7fe f88b 	bl	1005b144 <llc_conn_get_ctrl_pdu_data_p>
1005d02e:	4638      	mov	r0, r7
1005d030:	f000 fba9 	bl	1005d786 <ll_cpe_clr_rx_pdu_discarded_by_one_sm>
1005d034:	4638      	mov	r0, r7
1005d036:	f7ff fc37 	bl	1005c8a8 <LL_cpe_get_ctrl_flds_common_p>
1005d03a:	4606      	mov	r6, r0
1005d03c:	8800      	ldrh	r0, [r0, #0]
1005d03e:	06c0      	lsls	r0, r0, #27
1005d040:	d527      	bpl.n	1005d092 <__arm_cp.14_10+0x372>
1005d042:	4638      	mov	r0, r7
1005d044:	f7fd fde8 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005d048:	4605      	mov	r5, r0
1005d04a:	f7fe f8a8 	bl	1005b19e <llc_conn_get_tx_ctrl_pdu_state>
1005d04e:	9407      	str	r4, [sp, #28]
1005d050:	4604      	mov	r4, r0
1005d052:	2100      	movs	r1, #0
1005d054:	2201      	movs	r2, #1
1005d056:	4638      	mov	r0, r7
1005d058:	f000 f8b1 	bl	1005d1be <ll_cpe_get_blocked_status>
1005d05c:	4320      	orrs	r0, r4
1005d05e:	9c07      	ldr	r4, [sp, #28]
1005d060:	d117      	bne.n	1005d092 <__arm_cp.14_10+0x372>
1005d062:	8837      	ldrh	r7, [r6, #0]
1005d064:	2401      	movs	r4, #1
1005d066:	4628      	mov	r0, r5
1005d068:	4621      	mov	r1, r4
1005d06a:	f7fe f86b 	bl	1005b144 <llc_conn_get_ctrl_pdu_data_p>
1005d06e:	4946      	ldr	r1, [pc, #280]	@ (1005d188 <__arm_cp.14_1>)
1005d070:	8001      	strh	r1, [r0, #0]
1005d072:	0979      	lsrs	r1, r7, #5
1005d074:	9f06      	ldr	r7, [sp, #24]
1005d076:	0209      	lsls	r1, r1, #8
1005d078:	1dc9      	adds	r1, r1, #7
1005d07a:	8041      	strh	r1, [r0, #2]
1005d07c:	8830      	ldrh	r0, [r6, #0]
1005d07e:	2108      	movs	r1, #8
1005d080:	4301      	orrs	r1, r0
1005d082:	2010      	movs	r0, #16
1005d084:	4381      	bics	r1, r0
1005d086:	8031      	strh	r1, [r6, #0]
1005d088:	4628      	mov	r0, r5
1005d08a:	4621      	mov	r1, r4
1005d08c:	9c07      	ldr	r4, [sp, #28]
1005d08e:	f7fe fb21 	bl	1005b6d4 <llc_conn_set_tx_ctrl_pdu_state>
1005d092:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d094:	42a0      	cmp	r0, r4
1005d096:	d004      	beq.n	1005d0a2 <__arm_cp.14_10+0x382>
1005d098:	4638      	mov	r0, r7
1005d09a:	9908      	ldr	r1, [sp, #32]
1005d09c:	4622      	mov	r2, r4
1005d09e:	f000 fa5d 	bl	1005d55c <ll_cpe_set_state>
1005d0a2:	a80c      	add	r0, sp, #48	@ 0x30
1005d0a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005d0a6:	1840      	adds	r0, r0, r1
1005d0a8:	7044      	strb	r4, [r0, #1]
1005d0aa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005d0ac:	e5fc      	b.n	1005cca8 <LL_cpe_engine+0x2c8>
1005d0ae:	a80c      	add	r0, sp, #48	@ 0x30
1005d0b0:	7802      	ldrb	r2, [r0, #0]
1005d0b2:	2001      	movs	r0, #1
1005d0b4:	2a02      	cmp	r2, #2
1005d0b6:	d008      	beq.n	1005d0ca <__arm_cp.14_10+0x3aa>
1005d0b8:	a90c      	add	r1, sp, #48	@ 0x30
1005d0ba:	7849      	ldrb	r1, [r1, #1]
1005d0bc:	2902      	cmp	r1, #2
1005d0be:	d004      	beq.n	1005d0ca <__arm_cp.14_10+0x3aa>
1005d0c0:	2a03      	cmp	r2, #3
1005d0c2:	d002      	beq.n	1005d0ca <__arm_cp.14_10+0x3aa>
1005d0c4:	1ec9      	subs	r1, r1, #3
1005d0c6:	4248      	negs	r0, r1
1005d0c8:	4148      	adcs	r0, r1
1005d0ca:	b00d      	add	sp, #52	@ 0x34
1005d0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005d0ce:	4260      	negs	r0, r4
1005d0d0:	4160      	adcs	r0, r4
1005d0d2:	e542      	b.n	1005cb5a <LL_cpe_engine+0x17a>
1005d0d4:	461c      	mov	r4, r3
1005d0d6:	f7fd f8cb 	bl	1005a270 <pcl_csr_ucfg_weak>
1005d0da:	e046      	b.n	1005d16a <__arm_cp.14_10+0x44a>
1005d0dc:	461c      	mov	r4, r3
1005d0de:	f7fd f8c5 	bl	1005a26c <data_length_extension_csr_ucfg_weak>
1005d0e2:	e042      	b.n	1005d16a <__arm_cp.14_10+0x44a>
1005d0e4:	461c      	mov	r4, r3
1005d0e6:	f7fd f865 	bl	1005a1b4 <cte_csr_ucfg_weak>
1005d0ea:	e03e      	b.n	1005d16a <__arm_cp.14_10+0x44a>
1005d0ec:	461d      	mov	r5, r3
1005d0ee:	f7ff fb01 	bl	1005c6f4 <cis_csr_ucfg_weak>
1005d0f2:	e022      	b.n	1005d13a <__arm_cp.14_10+0x41a>
1005d0f4:	461c      	mov	r4, r3
1005d0f6:	f7f2 fbb3 	bl	1004f860 <phy_upd_csr_ucfg>
1005d0fa:	e036      	b.n	1005d16a <__arm_cp.14_10+0x44a>
1005d0fc:	461d      	mov	r5, r3
1005d0fe:	f7f2 fbaf 	bl	1004f860 <phy_upd_csr_ucfg>
1005d102:	e01a      	b.n	1005d13a <__arm_cp.14_10+0x41a>
1005d104:	461c      	mov	r4, r3
1005d106:	f7ff faff 	bl	1005c708 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005d10a:	e027      	b.n	1005d15c <__arm_cp.14_10+0x43c>
1005d10c:	4265      	negs	r5, r4
1005d10e:	4165      	adcs	r5, r4
1005d110:	461c      	mov	r4, r3
1005d112:	f7ff faef 	bl	1005c6f4 <cis_csr_ucfg_weak>
1005d116:	e031      	b.n	1005d17c <__arm_cp.14_10+0x45c>
1005d118:	461c      	mov	r4, r3
1005d11a:	f7ff faeb 	bl	1005c6f4 <cis_csr_ucfg_weak>
1005d11e:	e024      	b.n	1005d16a <__arm_cp.14_10+0x44a>
1005d120:	4265      	negs	r5, r4
1005d122:	4165      	adcs	r5, r4
1005d124:	461c      	mov	r4, r3
1005d126:	f7fd f8ab 	bl	1005a280 <subrate_csr_ucfg_weak>
1005d12a:	e027      	b.n	1005d17c <__arm_cp.14_10+0x45c>
1005d12c:	461d      	mov	r5, r3
1005d12e:	f7fd f8a7 	bl	1005a280 <subrate_csr_ucfg_weak>
1005d132:	e002      	b.n	1005d13a <__arm_cp.14_10+0x41a>
1005d134:	461d      	mov	r5, r3
1005d136:	f7fc ff48 	bl	10059fca <chc_csr_ucfg_weak>
1005d13a:	462b      	mov	r3, r5
1005d13c:	1e41      	subs	r1, r0, #1
1005d13e:	4188      	sbcs	r0, r1
1005d140:	1e61      	subs	r1, r4, #1
1005d142:	418c      	sbcs	r4, r1
1005d144:	4004      	ands	r4, r0
1005d146:	4620      	mov	r0, r4
1005d148:	e507      	b.n	1005cb5a <LL_cpe_engine+0x17a>
1005d14a:	4265      	negs	r5, r4
1005d14c:	4165      	adcs	r5, r4
1005d14e:	461c      	mov	r4, r3
1005d150:	f7fc ff3b 	bl	10059fca <chc_csr_ucfg_weak>
1005d154:	e012      	b.n	1005d17c <__arm_cp.14_10+0x45c>
1005d156:	461c      	mov	r4, r3
1005d158:	f7ff fad8 	bl	1005c70c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005d15c:	4623      	mov	r3, r4
1005d15e:	2800      	cmp	r0, #0
1005d160:	4638      	mov	r0, r7
1005d162:	d100      	bne.n	1005d166 <__arm_cp.14_10+0x446>
1005d164:	e4f9      	b.n	1005cb5a <LL_cpe_engine+0x17a>
1005d166:	f7fd f887 	bl	1005a278 <scan_csr_ucfg_weak>
1005d16a:	4623      	mov	r3, r4
1005d16c:	1e41      	subs	r1, r0, #1
1005d16e:	4188      	sbcs	r0, r1
1005d170:	e4f3      	b.n	1005cb5a <LL_cpe_engine+0x17a>
1005d172:	4265      	negs	r5, r4
1005d174:	4165      	adcs	r5, r4
1005d176:	461c      	mov	r4, r3
1005d178:	f7f2 fb72 	bl	1004f860 <phy_upd_csr_ucfg>
1005d17c:	4623      	mov	r3, r4
1005d17e:	1e41      	subs	r1, r0, #1
1005d180:	4188      	sbcs	r0, r1
1005d182:	4028      	ands	r0, r5
1005d184:	e4e9      	b.n	1005cb5a <LL_cpe_engine+0x17a>
1005d186:	46c0      	nop			@ (mov r8, r8)

1005d188 <__arm_cp.14_1>:
1005d188:	00000203 	.word	0x00000203

1005d18c <ll_cpe_set_active>:
1005d18c:	b580      	push	{r7, lr}
1005d18e:	f7ff fb8b 	bl	1005c8a8 <LL_cpe_get_ctrl_flds_common_p>
1005d192:	8801      	ldrh	r1, [r0, #0]
1005d194:	2201      	movs	r2, #1
1005d196:	430a      	orrs	r2, r1
1005d198:	8002      	strh	r2, [r0, #0]
1005d19a:	bd80      	pop	{r7, pc}

1005d19c <ll_cpe_check_rx_pdu_can_be_processed>:
1005d19c:	b510      	push	{r4, lr}
1005d19e:	f7fd fd3b 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005d1a2:	4604      	mov	r4, r0
1005d1a4:	f7fd ffe9 	bl	1005b17a <llc_conn_get_rx_ctrl_pdu_full>
1005d1a8:	2800      	cmp	r0, #0
1005d1aa:	d006      	beq.n	1005d1ba <ll_cpe_check_rx_pdu_can_be_processed+0x1e>
1005d1ac:	4620      	mov	r0, r4
1005d1ae:	f7fd fff6 	bl	1005b19e <llc_conn_get_tx_ctrl_pdu_state>
1005d1b2:	1ec0      	subs	r0, r0, #3
1005d1b4:	1e41      	subs	r1, r0, #1
1005d1b6:	4188      	sbcs	r0, r1
1005d1b8:	bd10      	pop	{r4, pc}
1005d1ba:	2000      	movs	r0, #0
1005d1bc:	bd10      	pop	{r4, pc}

1005d1be <ll_cpe_get_blocked_status>:
1005d1be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d1c0:	4614      	mov	r4, r2
1005d1c2:	4607      	mov	r7, r0
1005d1c4:	424e      	negs	r6, r1
1005d1c6:	414e      	adcs	r6, r1
1005d1c8:	4631      	mov	r1, r6
1005d1ca:	f7ff fb7a 	bl	1005c8c2 <LL_cpe_get_active_status>
1005d1ce:	2500      	movs	r5, #0
1005d1d0:	2800      	cmp	r0, #0
1005d1d2:	d00b      	beq.n	1005d1ec <ll_cpe_get_blocked_status+0x2e>
1005d1d4:	4638      	mov	r0, r7
1005d1d6:	4631      	mov	r1, r6
1005d1d8:	f7ff fb7a 	bl	1005c8d0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005d1dc:	2c02      	cmp	r4, #2
1005d1de:	d805      	bhi.n	1005d1ec <ll_cpe_get_blocked_status+0x2e>
1005d1e0:	7800      	ldrb	r0, [r0, #0]
1005d1e2:	1c61      	adds	r1, r4, #1
1005d1e4:	b2c9      	uxtb	r1, r1
1005d1e6:	40c8      	lsrs	r0, r1
1005d1e8:	2501      	movs	r5, #1
1005d1ea:	4005      	ands	r5, r0
1005d1ec:	4628      	mov	r0, r5
1005d1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005d1f0 <ll_cpe_get_expected_opcode>:
1005d1f0:	b510      	push	{r4, lr}
1005d1f2:	460c      	mov	r4, r1
1005d1f4:	f7fd fd10 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005d1f8:	1900      	adds	r0, r0, r4
1005d1fa:	21ae      	movs	r1, #174	@ 0xae
1005d1fc:	5c40      	ldrb	r0, [r0, r1]
1005d1fe:	bd10      	pop	{r4, pc}

1005d200 <ll_cpe_get_state>:
1005d200:	b510      	push	{r4, lr}
1005d202:	460c      	mov	r4, r1
1005d204:	f7fd fd08 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005d208:	1900      	adds	r0, r0, r4
1005d20a:	21aa      	movs	r1, #170	@ 0xaa
1005d20c:	5c40      	ldrb	r0, [r0, r1]
1005d20e:	bd10      	pop	{r4, pc}

1005d210 <LL_cpe_rxctrlpdu_checkreject>:
1005d210:	b5b0      	push	{r4, r5, r7, lr}
1005d212:	460c      	mov	r4, r1
1005d214:	4605      	mov	r5, r0
1005d216:	4610      	mov	r0, r2
1005d218:	4619      	mov	r1, r3
1005d21a:	f7ff fb91 	bl	1005c940 <ll_cpe_get_cpid_from_sm>
1005d21e:	4601      	mov	r1, r0
1005d220:	2001      	movs	r0, #1
1005d222:	2d0d      	cmp	r5, #13
1005d224:	d102      	bne.n	1005d22c <LL_cpe_rxctrlpdu_checkreject+0x1c>
1005d226:	2901      	cmp	r1, #1
1005d228:	d100      	bne.n	1005d22c <LL_cpe_rxctrlpdu_checkreject+0x1c>
1005d22a:	bdb0      	pop	{r4, r5, r7, pc}
1005d22c:	2200      	movs	r2, #0
1005d22e:	2d11      	cmp	r5, #17
1005d230:	d001      	beq.n	1005d236 <LL_cpe_rxctrlpdu_checkreject+0x26>
1005d232:	2d07      	cmp	r5, #7
1005d234:	d110      	bne.n	1005d258 <LL_cpe_rxctrlpdu_checkreject+0x48>
1005d236:	2c2a      	cmp	r4, #42	@ 0x2a
1005d238:	d804      	bhi.n	1005d244 <LL_cpe_rxctrlpdu_checkreject+0x34>
1005d23a:	2303      	movs	r3, #3
1005d23c:	4363      	muls	r3, r4
1005d23e:	4d07      	ldr	r5, [pc, #28]	@ (1005d25c <__arm_cp.20_0>)
1005d240:	5ceb      	ldrb	r3, [r5, r3]
1005d242:	e000      	b.n	1005d246 <LL_cpe_rxctrlpdu_checkreject+0x36>
1005d244:	2316      	movs	r3, #22
1005d246:	4299      	cmp	r1, r3
1005d248:	d106      	bne.n	1005d258 <LL_cpe_rxctrlpdu_checkreject+0x48>
1005d24a:	2103      	movs	r1, #3
1005d24c:	4361      	muls	r1, r4
1005d24e:	4b03      	ldr	r3, [pc, #12]	@ (1005d25c <__arm_cp.20_0>)
1005d250:	1859      	adds	r1, r3, r1
1005d252:	7889      	ldrb	r1, [r1, #2]
1005d254:	2900      	cmp	r1, #0
1005d256:	d1e8      	bne.n	1005d22a <LL_cpe_rxctrlpdu_checkreject+0x1a>
1005d258:	4610      	mov	r0, r2
1005d25a:	bdb0      	pop	{r4, r5, r7, pc}

1005d25c <__arm_cp.20_0>:
1005d25c:	1006a4c0 	.word	0x1006a4c0

1005d260 <valid_first_opcode>:
1005d260:	b5b0      	push	{r4, r5, r7, lr}
1005d262:	2300      	movs	r3, #0
1005d264:	282a      	cmp	r0, #42	@ 0x2a
1005d266:	d863      	bhi.n	1005d330 <valid_first_opcode+0xd0>
1005d268:	2403      	movs	r4, #3
1005d26a:	4344      	muls	r4, r0
1005d26c:	4d34      	ldr	r5, [pc, #208]	@ (1005d340 <__arm_cp.21_0>)
1005d26e:	192c      	adds	r4, r5, r4
1005d270:	7864      	ldrb	r4, [r4, #1]
1005d272:	4294      	cmp	r4, r2
1005d274:	d15c      	bne.n	1005d330 <valid_first_opcode+0xd0>
1005d276:	282a      	cmp	r0, #42	@ 0x2a
1005d278:	d85a      	bhi.n	1005d330 <valid_first_opcode+0xd0>
1005d27a:	0080      	lsls	r0, r0, #2
1005d27c:	a201      	add	r2, pc, #4	@ (adr r2, 1005d284 <valid_first_opcode+0x24>)
1005d27e:	5810      	ldr	r0, [r2, r0]
1005d280:	4687      	mov	pc, r0
1005d282:	46c0      	nop			@ (mov r8, r8)
1005d284:	1005d333 	.word	0x1005d333
1005d288:	1005d333 	.word	0x1005d333
1005d28c:	1005d331 	.word	0x1005d331
1005d290:	1005d333 	.word	0x1005d333
1005d294:	1005d331 	.word	0x1005d331
1005d298:	1005d331 	.word	0x1005d331
1005d29c:	1005d331 	.word	0x1005d331
1005d2a0:	1005d331 	.word	0x1005d331
1005d2a4:	1005d333 	.word	0x1005d333
1005d2a8:	1005d331 	.word	0x1005d331
1005d2ac:	1005d333 	.word	0x1005d333
1005d2b0:	1005d331 	.word	0x1005d331
1005d2b4:	1005d337 	.word	0x1005d337
1005d2b8:	1005d331 	.word	0x1005d331
1005d2bc:	1005d33b 	.word	0x1005d33b
1005d2c0:	1005d331 	.word	0x1005d331
1005d2c4:	1005d331 	.word	0x1005d331
1005d2c8:	1005d331 	.word	0x1005d331
1005d2cc:	1005d337 	.word	0x1005d337
1005d2d0:	1005d331 	.word	0x1005d331
1005d2d4:	1005d337 	.word	0x1005d337
1005d2d8:	1005d331 	.word	0x1005d331
1005d2dc:	1005d337 	.word	0x1005d337
1005d2e0:	1005d331 	.word	0x1005d331
1005d2e4:	1005d331 	.word	0x1005d331
1005d2e8:	1005d331 	.word	0x1005d331
1005d2ec:	1005d337 	.word	0x1005d337
1005d2f0:	1005d331 	.word	0x1005d331
1005d2f4:	1005d337 	.word	0x1005d337
1005d2f8:	1005d337 	.word	0x1005d337
1005d2fc:	1005d331 	.word	0x1005d331
1005d300:	1005d333 	.word	0x1005d333
1005d304:	1005d331 	.word	0x1005d331
1005d308:	1005d331 	.word	0x1005d331
1005d30c:	1005d337 	.word	0x1005d337
1005d310:	1005d337 	.word	0x1005d337
1005d314:	1005d331 	.word	0x1005d331
1005d318:	1005d337 	.word	0x1005d337
1005d31c:	1005d337 	.word	0x1005d337
1005d320:	1005d337 	.word	0x1005d337
1005d324:	1005d337 	.word	0x1005d337
1005d328:	1005d337 	.word	0x1005d337
1005d32c:	1005d337 	.word	0x1005d337
1005d330:	4619      	mov	r1, r3
1005d332:	4608      	mov	r0, r1
1005d334:	bdb0      	pop	{r4, r5, r7, pc}
1005d336:	2101      	movs	r1, #1
1005d338:	e7fb      	b.n	1005d332 <valid_first_opcode+0xd2>
1005d33a:	4248      	negs	r0, r1
1005d33c:	4141      	adcs	r1, r0
1005d33e:	e7f8      	b.n	1005d332 <valid_first_opcode+0xd2>

1005d340 <__arm_cp.21_0>:
1005d340:	1006a4c0 	.word	0x1006a4c0

1005d344 <LL_cpe_init_phy_update>:
1005d344:	b580      	push	{r7, lr}
1005d346:	2007      	movs	r0, #7
1005d348:	4901      	ldr	r1, [pc, #4]	@ (1005d350 <__arm_cp.23_0>)
1005d34a:	f7ff fab2 	bl	1005c8b2 <LL_cpe_register_cpf>
1005d34e:	bd80      	pop	{r7, pc}

1005d350 <__arm_cp.23_0>:
1005d350:	1005ed5d 	.word	0x1005ed5d

1005d354 <LL_cpe_init_conn_update>:
1005d354:	b580      	push	{r7, lr}
1005d356:	2000      	movs	r0, #0
1005d358:	4901      	ldr	r1, [pc, #4]	@ (1005d360 <__arm_cp.28_0>)
1005d35a:	f7ff faaa 	bl	1005c8b2 <LL_cpe_register_cpf>
1005d35e:	bd80      	pop	{r7, pc}

1005d360 <__arm_cp.28_0>:
1005d360:	1005d981 	.word	0x1005d981

1005d364 <LL_cpe_init_chmap_update>:
1005d364:	b580      	push	{r7, lr}
1005d366:	2002      	movs	r0, #2
1005d368:	4901      	ldr	r1, [pc, #4]	@ (1005d370 <__arm_cp.29_0>)
1005d36a:	f7ff faa2 	bl	1005c8b2 <LL_cpe_register_cpf>
1005d36e:	bd80      	pop	{r7, pc}

1005d370 <__arm_cp.29_0>:
1005d370:	1005d871 	.word	0x1005d871

1005d374 <LL_cpe_init_length_update_ucfg_weak>:
1005d374:	b580      	push	{r7, lr}
1005d376:	2006      	movs	r0, #6
1005d378:	2100      	movs	r1, #0
1005d37a:	f7ff fa9a 	bl	1005c8b2 <LL_cpe_register_cpf>
1005d37e:	bd80      	pop	{r7, pc}

1005d380 <LL_cpe_init_cte_ucfg_weak>:
1005d380:	b580      	push	{r7, lr}
1005d382:	200a      	movs	r0, #10
1005d384:	2100      	movs	r1, #0
1005d386:	f7ff fa94 	bl	1005c8b2 <LL_cpe_register_cpf>
1005d38a:	bd80      	pop	{r7, pc}

1005d38c <LL_cpe_init_past_ucfg_weak>:
1005d38c:	b580      	push	{r7, lr}
1005d38e:	2009      	movs	r0, #9
1005d390:	2100      	movs	r1, #0
1005d392:	f7ff fa8e 	bl	1005c8b2 <LL_cpe_register_cpf>
1005d396:	bd80      	pop	{r7, pc}

1005d398 <LL_cpe_init_pcl_ucfg_weak>:
1005d398:	b580      	push	{r7, lr}
1005d39a:	200b      	movs	r0, #11
1005d39c:	2100      	movs	r1, #0
1005d39e:	f7ff fa88 	bl	1005c8b2 <LL_cpe_register_cpf>
1005d3a2:	bd80      	pop	{r7, pc}

1005d3a4 <LL_cpe_init_chc_enable_ucfg_weak>:
1005d3a4:	b580      	push	{r7, lr}
1005d3a6:	200c      	movs	r0, #12
1005d3a8:	2100      	movs	r1, #0
1005d3aa:	f7ff fa82 	bl	1005c8b2 <LL_cpe_register_cpf>
1005d3ae:	bd80      	pop	{r7, pc}

1005d3b0 <LL_cpe_init_chc_reporting_ucfg_weak>:
1005d3b0:	b580      	push	{r7, lr}
1005d3b2:	200d      	movs	r0, #13
1005d3b4:	2100      	movs	r1, #0
1005d3b6:	f7ff fa7c 	bl	1005c8b2 <LL_cpe_register_cpf>
1005d3ba:	bd80      	pop	{r7, pc}

1005d3bc <LL_cpe_init_subrate_ucfg_weak>:
1005d3bc:	b580      	push	{r7, lr}
1005d3be:	2011      	movs	r0, #17
1005d3c0:	2100      	movs	r1, #0
1005d3c2:	f7ff fa76 	bl	1005c8b2 <LL_cpe_register_cpf>
1005d3c6:	bd80      	pop	{r7, pc}

1005d3c8 <LL_cpe_init_sca_upd_ucfg_weak>:
1005d3c8:	b580      	push	{r7, lr}
1005d3ca:	2012      	movs	r0, #18
1005d3cc:	2100      	movs	r1, #0
1005d3ce:	f7ff fa70 	bl	1005c8b2 <LL_cpe_register_cpf>
1005d3d2:	bd80      	pop	{r7, pc}

1005d3d4 <LL_cpe_init_cis_ucfg_weak>:
1005d3d4:	b510      	push	{r4, lr}
1005d3d6:	200e      	movs	r0, #14
1005d3d8:	2400      	movs	r4, #0
1005d3da:	4621      	mov	r1, r4
1005d3dc:	f7ff fa69 	bl	1005c8b2 <LL_cpe_register_cpf>
1005d3e0:	2010      	movs	r0, #16
1005d3e2:	4621      	mov	r1, r4
1005d3e4:	f7ff fa65 	bl	1005c8b2 <LL_cpe_register_cpf>
1005d3e8:	bd10      	pop	{r4, pc}
	...

1005d3ec <LL_cpe_init>:
1005d3ec:	b5b0      	push	{r4, r5, r7, lr}
1005d3ee:	2001      	movs	r0, #1
1005d3f0:	4918      	ldr	r1, [pc, #96]	@ (1005d454 <__arm_cp.47_0>)
1005d3f2:	4c19      	ldr	r4, [pc, #100]	@ (1005d458 <__arm_cp.47_1>)
1005d3f4:	47a0      	blx	r4
1005d3f6:	2003      	movs	r0, #3
1005d3f8:	4918      	ldr	r1, [pc, #96]	@ (1005d45c <__arm_cp.47_2>)
1005d3fa:	47a0      	blx	r4
1005d3fc:	2005      	movs	r0, #5
1005d3fe:	4918      	ldr	r1, [pc, #96]	@ (1005d460 <__arm_cp.47_3>)
1005d400:	47a0      	blx	r4
1005d402:	2008      	movs	r0, #8
1005d404:	4917      	ldr	r1, [pc, #92]	@ (1005d464 <__arm_cp.47_4>)
1005d406:	47a0      	blx	r4
1005d408:	f7f2 fb1d 	bl	1004fa46 <LL_cpe_init_conn_update_ucfg>
1005d40c:	f7f2 fb22 	bl	1004fa54 <LL_cpe_init_chmap_update_ucfg>
1005d410:	f7ff ffb0 	bl	1005d374 <LL_cpe_init_length_update_ucfg_weak>
1005d414:	f7f2 fb10 	bl	1004fa38 <LL_cpe_init_phy_update_ucfg>
1005d418:	f7ff ffb8 	bl	1005d38c <LL_cpe_init_past_ucfg_weak>
1005d41c:	f7ff ffb0 	bl	1005d380 <LL_cpe_init_cte_ucfg_weak>
1005d420:	f7ff ffba 	bl	1005d398 <LL_cpe_init_pcl_ucfg_weak>
1005d424:	f7ff ffbe 	bl	1005d3a4 <LL_cpe_init_chc_enable_ucfg_weak>
1005d428:	f7ff ffc2 	bl	1005d3b0 <LL_cpe_init_chc_reporting_ucfg_weak>
1005d42c:	f7ff ffd2 	bl	1005d3d4 <LL_cpe_init_cis_ucfg_weak>
1005d430:	f7ff ffc4 	bl	1005d3bc <LL_cpe_init_subrate_ucfg_weak>
1005d434:	f7ff ffc8 	bl	1005d3c8 <LL_cpe_init_sca_upd_ucfg_weak>
1005d438:	2400      	movs	r4, #0
1005d43a:	4d0b      	ldr	r5, [pc, #44]	@ (1005d468 <__arm_cp.47_5>)
1005d43c:	6828      	ldr	r0, [r5, #0]
1005d43e:	2134      	movs	r1, #52	@ 0x34
1005d440:	5c41      	ldrb	r1, [r0, r1]
1005d442:	b2e0      	uxtb	r0, r4
1005d444:	4288      	cmp	r0, r1
1005d446:	d203      	bcs.n	1005d450 <LL_cpe_init+0x64>
1005d448:	f000 f810 	bl	1005d46c <ll_cpe_reset_state_machines>
1005d44c:	1c64      	adds	r4, r4, #1
1005d44e:	e7f5      	b.n	1005d43c <LL_cpe_init+0x50>
1005d450:	bdb0      	pop	{r4, r5, r7, pc}
1005d452:	46c0      	nop			@ (mov r8, r8)

1005d454 <__arm_cp.47_0>:
1005d454:	1005de05 	.word	0x1005de05

1005d458 <__arm_cp.47_1>:
1005d458:	1005c8b3 	.word	0x1005c8b3

1005d45c <__arm_cp.47_2>:
1005d45c:	1005e5f1 	.word	0x1005e5f1

1005d460 <__arm_cp.47_3>:
1005d460:	1005f625 	.word	0x1005f625

1005d464 <__arm_cp.47_4>:
1005d464:	1005ebb1 	.word	0x1005ebb1

1005d468 <__arm_cp.47_5>:
1005d468:	20002904 	.word	0x20002904

1005d46c <ll_cpe_reset_state_machines>:
1005d46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d46e:	2638      	movs	r6, #56	@ 0x38
1005d470:	4346      	muls	r6, r0
1005d472:	9000      	str	r0, [sp, #0]
1005d474:	f7fd fbd0 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005d478:	4605      	mov	r5, r0
1005d47a:	4816      	ldr	r0, [pc, #88]	@ (1005d4d4 <__arm_cp.48_0>)
1005d47c:	6800      	ldr	r0, [r0, #0]
1005d47e:	219c      	movs	r1, #156	@ 0x9c
1005d480:	5842      	ldr	r2, [r0, r1]
1005d482:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
1005d484:	6892      	ldr	r2, [r2, #8]
1005d486:	1992      	adds	r2, r2, r6
1005d488:	23a0      	movs	r3, #160	@ 0xa0
1005d48a:	50ea      	str	r2, [r5, r3]
1005d48c:	5840      	ldr	r0, [r0, r1]
1005d48e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005d490:	68c0      	ldr	r0, [r0, #12]
1005d492:	1980      	adds	r0, r0, r6
1005d494:	462e      	mov	r6, r5
1005d496:	36a0      	adds	r6, #160	@ 0xa0
1005d498:	6070      	str	r0, [r6, #4]
1005d49a:	27ae      	movs	r7, #174	@ 0xae
1005d49c:	2fb0      	cmp	r7, #176	@ 0xb0
1005d49e:	d00f      	beq.n	1005d4c0 <ll_cpe_reset_state_machines+0x54>
1005d4a0:	4638      	mov	r0, r7
1005d4a2:	38ae      	subs	r0, #174	@ 0xae
1005d4a4:	19e9      	adds	r1, r5, r7
1005d4a6:	1f09      	subs	r1, r1, #4
1005d4a8:	2400      	movs	r4, #0
1005d4aa:	700c      	strb	r4, [r1, #0]
1005d4ac:	b2c1      	uxtb	r1, r0
1005d4ae:	9800      	ldr	r0, [sp, #0]
1005d4b0:	f7ff fa0e 	bl	1005c8d0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005d4b4:	7004      	strb	r4, [r0, #0]
1005d4b6:	20ff      	movs	r0, #255	@ 0xff
1005d4b8:	55e8      	strb	r0, [r5, r7]
1005d4ba:	74f4      	strb	r4, [r6, #19]
1005d4bc:	1c7f      	adds	r7, r7, #1
1005d4be:	e7ed      	b.n	1005d49c <ll_cpe_reset_state_machines+0x30>
1005d4c0:	2400      	movs	r4, #0
1005d4c2:	74b4      	strb	r4, [r6, #18]
1005d4c4:	9800      	ldr	r0, [sp, #0]
1005d4c6:	f7ff f9ef 	bl	1005c8a8 <LL_cpe_get_ctrl_flds_common_p>
1005d4ca:	8004      	strh	r4, [r0, #0]
1005d4cc:	4802      	ldr	r0, [pc, #8]	@ (1005d4d8 <__arm_cp.48_1>)
1005d4ce:	8768      	strh	r0, [r5, #58]	@ 0x3a
1005d4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d4d2:	46c0      	nop			@ (mov r8, r8)

1005d4d4 <__arm_cp.48_0>:
1005d4d4:	20002958 	.word	0x20002958

1005d4d8 <__arm_cp.48_1>:
1005d4d8:	0000ffff 	.word	0x0000ffff

1005d4dc <LL_cpe_set_disconnect>:
1005d4dc:	b510      	push	{r4, lr}
1005d4de:	2480      	movs	r4, #128	@ 0x80
1005d4e0:	430c      	orrs	r4, r1
1005d4e2:	f7fd fb99 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005d4e6:	21b2      	movs	r1, #178	@ 0xb2
1005d4e8:	5444      	strb	r4, [r0, r1]
1005d4ea:	2015      	movs	r0, #21
1005d4ec:	f005 ffb8 	bl	10063460 <tsk_notify_idx>
1005d4f0:	f7f5 f939 	bl	10052766 <BLE_STACK_ProcessRequest>
1005d4f4:	bd10      	pop	{r4, pc}

1005d4f6 <LL_cpe_get_tx_terminate_in_progress>:
1005d4f6:	b580      	push	{r7, lr}
1005d4f8:	f7ff f9d6 	bl	1005c8a8 <LL_cpe_get_ctrl_flds_common_p>
1005d4fc:	7800      	ldrb	r0, [r0, #0]
1005d4fe:	0780      	lsls	r0, r0, #30
1005d500:	0fc0      	lsrs	r0, r0, #31
1005d502:	bd80      	pop	{r7, pc}

1005d504 <LL_cpe_conn_exception_opcode_from_sm>:
1005d504:	b580      	push	{r7, lr}
1005d506:	f7ff fa1b 	bl	1005c940 <ll_cpe_get_cpid_from_sm>
1005d50a:	21fd      	movs	r1, #253	@ 0xfd
1005d50c:	4008      	ands	r0, r1
1005d50e:	4241      	negs	r1, r0
1005d510:	4148      	adcs	r0, r1
1005d512:	bd80      	pop	{r7, pc}

1005d514 <LL_cpe_conn_get_proc_id_from_sm>:
1005d514:	b580      	push	{r7, lr}
1005d516:	f7ff fa13 	bl	1005c940 <ll_cpe_get_cpid_from_sm>
1005d51a:	bd80      	pop	{r7, pc}

1005d51c <llc_cpe_calc_instant>:
1005d51c:	b580      	push	{r7, lr}
1005d51e:	f7fd fb7b 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005d522:	2142      	movs	r1, #66	@ 0x42
1005d524:	5a41      	ldrh	r1, [r0, r1]
1005d526:	2291      	movs	r2, #145	@ 0x91
1005d528:	0052      	lsls	r2, r2, #1
1005d52a:	5a82      	ldrh	r2, [r0, r2]
1005d52c:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
1005d52e:	1c40      	adds	r0, r0, #1
1005d530:	4350      	muls	r0, r2
1005d532:	2206      	movs	r2, #6
1005d534:	4342      	muls	r2, r0
1005d536:	1850      	adds	r0, r2, r1
1005d538:	b280      	uxth	r0, r0
1005d53a:	bd80      	pop	{r7, pc}

1005d53c <llc_cpe_init_sm_ctxt>:
1005d53c:	b5b0      	push	{r4, r5, r7, lr}
1005d53e:	4604      	mov	r4, r0
1005d540:	f7ff fe24 	bl	1005d18c <ll_cpe_set_active>
1005d544:	4620      	mov	r0, r4
1005d546:	f7fd fb67 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005d54a:	21aa      	movs	r1, #170	@ 0xaa
1005d54c:	2501      	movs	r5, #1
1005d54e:	5445      	strb	r5, [r0, r1]
1005d550:	4620      	mov	r0, r4
1005d552:	f7fd fb61 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005d556:	21ab      	movs	r1, #171	@ 0xab
1005d558:	5445      	strb	r5, [r0, r1]
1005d55a:	bdb0      	pop	{r4, r5, r7, pc}

1005d55c <ll_cpe_set_state>:
1005d55c:	b5b0      	push	{r4, r5, r7, lr}
1005d55e:	4614      	mov	r4, r2
1005d560:	460d      	mov	r5, r1
1005d562:	f7fd fb59 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005d566:	1940      	adds	r0, r0, r5
1005d568:	21aa      	movs	r1, #170	@ 0xaa
1005d56a:	5444      	strb	r4, [r0, r1]
1005d56c:	bdb0      	pop	{r4, r5, r7, pc}

1005d56e <ll_cpe_get_active>:
1005d56e:	b580      	push	{r7, lr}
1005d570:	f7ff f99a 	bl	1005c8a8 <LL_cpe_get_ctrl_flds_common_p>
1005d574:	8801      	ldrh	r1, [r0, #0]
1005d576:	2001      	movs	r0, #1
1005d578:	4008      	ands	r0, r1
1005d57a:	bd80      	pop	{r7, pc}

1005d57c <ll_cpe_get_rx_pdu_discarded_by_one_sm>:
1005d57c:	b580      	push	{r7, lr}
1005d57e:	f7ff f993 	bl	1005c8a8 <LL_cpe_get_ctrl_flds_common_p>
1005d582:	7800      	ldrb	r0, [r0, #0]
1005d584:	0740      	lsls	r0, r0, #29
1005d586:	0fc0      	lsrs	r0, r0, #31
1005d588:	bd80      	pop	{r7, pc}
	...

1005d58c <ll_cpe_process_rx_pdu>:
1005d58c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d58e:	b08f      	sub	sp, #60	@ 0x3c
1005d590:	9206      	str	r2, [sp, #24]
1005d592:	460d      	mov	r5, r1
1005d594:	4606      	mov	r6, r0
1005d596:	f7fd fb3f 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005d59a:	212c      	movs	r1, #44	@ 0x2c
1005d59c:	5c41      	ldrb	r1, [r0, r1]
1005d59e:	1ec9      	subs	r1, r1, #3
1005d5a0:	424a      	negs	r2, r1
1005d5a2:	414a      	adcs	r2, r1
1005d5a4:	9205      	str	r2, [sp, #20]
1005d5a6:	2400      	movs	r4, #0
1005d5a8:	900a      	str	r0, [sp, #40]	@ 0x28
1005d5aa:	4621      	mov	r1, r4
1005d5ac:	f7fd fdca 	bl	1005b144 <llc_conn_get_ctrl_pdu_data_p>
1005d5b0:	7841      	ldrb	r1, [r0, #1]
1005d5b2:	9104      	str	r1, [sp, #16]
1005d5b4:	9009      	str	r0, [sp, #36]	@ 0x24
1005d5b6:	8847      	ldrh	r7, [r0, #2]
1005d5b8:	4630      	mov	r0, r6
1005d5ba:	4629      	mov	r1, r5
1005d5bc:	f7ff fe18 	bl	1005d1f0 <ll_cpe_get_expected_opcode>
1005d5c0:	9003      	str	r0, [sp, #12]
1005d5c2:	4630      	mov	r0, r6
1005d5c4:	4629      	mov	r1, r5
1005d5c6:	9407      	str	r4, [sp, #28]
1005d5c8:	4622      	mov	r2, r4
1005d5ca:	f7ff fdf8 	bl	1005d1be <ll_cpe_get_blocked_status>
1005d5ce:	900b      	str	r0, [sp, #44]	@ 0x2c
1005d5d0:	b2fa      	uxtb	r2, r7
1005d5d2:	4630      	mov	r0, r6
1005d5d4:	4629      	mov	r1, r5
1005d5d6:	920e      	str	r2, [sp, #56]	@ 0x38
1005d5d8:	f000 f8dd 	bl	1005d796 <ll_cpe_check_instant_blocked>
1005d5dc:	900c      	str	r0, [sp, #48]	@ 0x30
1005d5de:	426c      	negs	r4, r5
1005d5e0:	9508      	str	r5, [sp, #32]
1005d5e2:	416c      	adcs	r4, r5
1005d5e4:	4630      	mov	r0, r6
1005d5e6:	4621      	mov	r1, r4
1005d5e8:	f7ff fe0a 	bl	1005d200 <ll_cpe_get_state>
1005d5ec:	4605      	mov	r5, r0
1005d5ee:	960d      	str	r6, [sp, #52]	@ 0x34
1005d5f0:	4630      	mov	r0, r6
1005d5f2:	4621      	mov	r1, r4
1005d5f4:	f7ff fdfc 	bl	1005d1f0 <ll_cpe_get_expected_opcode>
1005d5f8:	463a      	mov	r2, r7
1005d5fa:	1ff9      	subs	r1, r7, #7
1005d5fc:	b2cb      	uxtb	r3, r1
1005d5fe:	2b0b      	cmp	r3, #11
1005d600:	d302      	bcc.n	1005d608 <ll_cpe_process_rx_pdu+0x7c>
1005d602:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005d604:	9f07      	ldr	r7, [sp, #28]
1005d606:	e001      	b.n	1005d60c <ll_cpe_process_rx_pdu+0x80>
1005d608:	2701      	movs	r7, #1
1005d60a:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005d60c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1005d60e:	2e01      	cmp	r6, #1
1005d610:	d103      	bne.n	1005d61a <ll_cpe_process_rx_pdu+0x8e>
1005d612:	2d04      	cmp	r5, #4
1005d614:	d147      	bne.n	1005d6a6 <ll_cpe_process_rx_pdu+0x11a>
1005d616:	4288      	cmp	r0, r1
1005d618:	d145      	bne.n	1005d6a6 <ll_cpe_process_rx_pdu+0x11a>
1005d61a:	4955      	ldr	r1, [pc, #340]	@ (1005d770 <__arm_cp.58_0>)
1005d61c:	40d9      	lsrs	r1, r3
1005d61e:	400f      	ands	r7, r1
1005d620:	0a16      	lsrs	r6, r2, #8
1005d622:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005d624:	2901      	cmp	r1, #1
1005d626:	d11d      	bne.n	1005d664 <ll_cpe_process_rx_pdu+0xd8>
1005d628:	900c      	str	r0, [sp, #48]	@ 0x30
1005d62a:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005d62c:	4631      	mov	r1, r6
1005d62e:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1005d630:	4632      	mov	r2, r6
1005d632:	4623      	mov	r3, r4
1005d634:	f7ff fdec 	bl	1005d210 <LL_cpe_rxctrlpdu_checkreject>
1005d638:	2d04      	cmp	r5, #4
1005d63a:	d10c      	bne.n	1005d656 <ll_cpe_process_rx_pdu+0xca>
1005d63c:	2101      	movs	r1, #1
1005d63e:	404f      	eors	r7, r1
1005d640:	d101      	bne.n	1005d646 <ll_cpe_process_rx_pdu+0xba>
1005d642:	2800      	cmp	r0, #0
1005d644:	d007      	beq.n	1005d656 <ll_cpe_process_rx_pdu+0xca>
1005d646:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005d648:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005d64a:	1a40      	subs	r0, r0, r1
1005d64c:	1e41      	subs	r1, r0, #1
1005d64e:	4188      	sbcs	r0, r1
1005d650:	4007      	ands	r7, r0
1005d652:	2f01      	cmp	r7, #1
1005d654:	d16e      	bne.n	1005d734 <ll_cpe_process_rx_pdu+0x1a8>
1005d656:	4630      	mov	r0, r6
1005d658:	4621      	mov	r1, r4
1005d65a:	f7ff f971 	bl	1005c940 <ll_cpe_get_cpid_from_sm>
1005d65e:	4605      	mov	r5, r0
1005d660:	2605      	movs	r6, #5
1005d662:	e026      	b.n	1005d6b2 <ll_cpe_process_rx_pdu+0x126>
1005d664:	2400      	movs	r4, #0
1005d666:	9806      	ldr	r0, [sp, #24]
1005d668:	2803      	cmp	r0, #3
1005d66a:	d049      	beq.n	1005d700 <ll_cpe_process_rx_pdu+0x174>
1005d66c:	2801      	cmp	r0, #1
1005d66e:	d144      	bne.n	1005d6fa <ll_cpe_process_rx_pdu+0x16e>
1005d670:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
1005d672:	4630      	mov	r0, r6
1005d674:	9905      	ldr	r1, [sp, #20]
1005d676:	9a04      	ldr	r2, [sp, #16]
1005d678:	f7ff fdf2 	bl	1005d260 <valid_first_opcode>
1005d67c:	2801      	cmp	r0, #1
1005d67e:	d13c      	bne.n	1005d6fa <ll_cpe_process_rx_pdu+0x16e>
1005d680:	2401      	movs	r4, #1
1005d682:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
1005d684:	4628      	mov	r0, r5
1005d686:	4621      	mov	r1, r4
1005d688:	f7ff f91b 	bl	1005c8c2 <LL_cpe_get_active_status>
1005d68c:	4607      	mov	r7, r0
1005d68e:	4628      	mov	r0, r5
1005d690:	4621      	mov	r1, r4
1005d692:	f000 f897 	bl	1005d7c4 <ll_cpe_get_instant_supported>
1005d696:	4605      	mov	r5, r0
1005d698:	4630      	mov	r0, r6
1005d69a:	f000 f89b 	bl	1005d7d4 <LL_cpe_is_opcode_supporting_instant>
1005d69e:	2801      	cmp	r0, #1
1005d6a0:	d04a      	beq.n	1005d738 <ll_cpe_process_rx_pdu+0x1ac>
1005d6a2:	4622      	mov	r2, r4
1005d6a4:	e049      	b.n	1005d73a <ll_cpe_process_rx_pdu+0x1ae>
1005d6a6:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005d6a8:	4621      	mov	r1, r4
1005d6aa:	f7ff f949 	bl	1005c940 <ll_cpe_get_cpid_from_sm>
1005d6ae:	4605      	mov	r5, r0
1005d6b0:	2604      	movs	r6, #4
1005d6b2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005d6b4:	7878      	ldrb	r0, [r7, #1]
1005d6b6:	2110      	movs	r1, #16
1005d6b8:	1c80      	adds	r0, r0, #2
1005d6ba:	b2c0      	uxtb	r0, r0
1005d6bc:	9100      	str	r1, [sp, #0]
1005d6be:	9001      	str	r0, [sp, #4]
1005d6c0:	9702      	str	r7, [sp, #8]
1005d6c2:	2401      	movs	r4, #1
1005d6c4:	2000      	movs	r0, #0
1005d6c6:	4621      	mov	r1, r4
1005d6c8:	4622      	mov	r2, r4
1005d6ca:	4603      	mov	r3, r0
1005d6cc:	f7f8 fb79 	bl	10055dc2 <log_notify_stu_ucfg_weak>
1005d6d0:	4628      	mov	r0, r5
1005d6d2:	f000 f88f 	bl	1005d7f4 <LL_cpe_get_cpf>
1005d6d6:	2800      	cmp	r0, #0
1005d6d8:	d00c      	beq.n	1005d6f4 <ll_cpe_process_rx_pdu+0x168>
1005d6da:	4605      	mov	r5, r0
1005d6dc:	4632      	mov	r2, r6
1005d6de:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1005d6e0:	4630      	mov	r0, r6
1005d6e2:	463b      	mov	r3, r7
1005d6e4:	9f08      	ldr	r7, [sp, #32]
1005d6e6:	4639      	mov	r1, r7
1005d6e8:	47a8      	blx	r5
1005d6ea:	4602      	mov	r2, r0
1005d6ec:	4630      	mov	r0, r6
1005d6ee:	4639      	mov	r1, r7
1005d6f0:	f000 f88d 	bl	1005d80e <ll_cpe_set_expected_opcode>
1005d6f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005d6f6:	f7fd fc6b 	bl	1005afd0 <llc_conn_clr_rx_ctrl_pdu_full>
1005d6fa:	4620      	mov	r0, r4
1005d6fc:	b00f      	add	sp, #60	@ 0x3c
1005d6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005d700:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005d702:	9d08      	ldr	r5, [sp, #32]
1005d704:	4629      	mov	r1, r5
1005d706:	f7ff f91b 	bl	1005c940 <ll_cpe_get_cpid_from_sm>
1005d70a:	900c      	str	r0, [sp, #48]	@ 0x30
1005d70c:	2f00      	cmp	r7, #0
1005d70e:	d009      	beq.n	1005d724 <ll_cpe_process_rx_pdu+0x198>
1005d710:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005d712:	4631      	mov	r1, r6
1005d714:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1005d716:	462b      	mov	r3, r5
1005d718:	f7ff fd7a 	bl	1005d210 <LL_cpe_rxctrlpdu_checkreject>
1005d71c:	4604      	mov	r4, r0
1005d71e:	2801      	cmp	r0, #1
1005d720:	d004      	beq.n	1005d72c <ll_cpe_process_rx_pdu+0x1a0>
1005d722:	e7ea      	b.n	1005d6fa <ll_cpe_process_rx_pdu+0x16e>
1005d724:	9803      	ldr	r0, [sp, #12]
1005d726:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005d728:	4288      	cmp	r0, r1
1005d72a:	d113      	bne.n	1005d754 <ll_cpe_process_rx_pdu+0x1c8>
1005d72c:	2603      	movs	r6, #3
1005d72e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005d730:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
1005d732:	e7bf      	b.n	1005d6b4 <ll_cpe_process_rx_pdu+0x128>
1005d734:	2400      	movs	r4, #0
1005d736:	e7e0      	b.n	1005d6fa <ll_cpe_process_rx_pdu+0x16e>
1005d738:	2202      	movs	r2, #2
1005d73a:	4067      	eors	r7, r4
1005d73c:	4065      	eors	r5, r4
1005d73e:	433d      	orrs	r5, r7
1005d740:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005d742:	d000      	beq.n	1005d746 <ll_cpe_process_rx_pdu+0x1ba>
1005d744:	4622      	mov	r2, r4
1005d746:	2e2a      	cmp	r6, #42	@ 0x2a
1005d748:	d80e      	bhi.n	1005d768 <ll_cpe_process_rx_pdu+0x1dc>
1005d74a:	2003      	movs	r0, #3
1005d74c:	4370      	muls	r0, r6
1005d74e:	4909      	ldr	r1, [pc, #36]	@ (1005d774 <__arm_cp.58_1>)
1005d750:	5c0d      	ldrb	r5, [r1, r0]
1005d752:	e00a      	b.n	1005d76a <ll_cpe_process_rx_pdu+0x1de>
1005d754:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005d756:	f7fd fd16 	bl	1005b186 <llc_conn_get_rx_acl_blocked>
1005d75a:	2801      	cmp	r0, #1
1005d75c:	d1cd      	bne.n	1005d6fa <ll_cpe_process_rx_pdu+0x16e>
1005d75e:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005d760:	2801      	cmp	r0, #1
1005d762:	d1ca      	bne.n	1005d6fa <ll_cpe_process_rx_pdu+0x16e>
1005d764:	2501      	movs	r5, #1
1005d766:	e77b      	b.n	1005d660 <ll_cpe_process_rx_pdu+0xd4>
1005d768:	2516      	movs	r5, #22
1005d76a:	4616      	mov	r6, r2
1005d76c:	e7a2      	b.n	1005d6b4 <ll_cpe_process_rx_pdu+0x128>
1005d76e:	46c0      	nop			@ (mov r8, r8)

1005d770 <__arm_cp.58_0>:
1005d770:	00000441 	.word	0x00000441

1005d774 <__arm_cp.58_1>:
1005d774:	1006a4c0 	.word	0x1006a4c0

1005d778 <ll_cpe_get_instant_active>:
1005d778:	b580      	push	{r7, lr}
1005d77a:	f7ff f8a9 	bl	1005c8d0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005d77e:	7800      	ldrb	r0, [r0, #0]
1005d780:	0640      	lsls	r0, r0, #25
1005d782:	0fc0      	lsrs	r0, r0, #31
1005d784:	bd80      	pop	{r7, pc}

1005d786 <ll_cpe_clr_rx_pdu_discarded_by_one_sm>:
1005d786:	b580      	push	{r7, lr}
1005d788:	f7ff f88e 	bl	1005c8a8 <LL_cpe_get_ctrl_flds_common_p>
1005d78c:	8801      	ldrh	r1, [r0, #0]
1005d78e:	2204      	movs	r2, #4
1005d790:	4391      	bics	r1, r2
1005d792:	8001      	strh	r1, [r0, #0]
1005d794:	bd80      	pop	{r7, pc}

1005d796 <ll_cpe_check_instant_blocked>:
1005d796:	b5b0      	push	{r4, r5, r7, lr}
1005d798:	460c      	mov	r4, r1
1005d79a:	4605      	mov	r5, r0
1005d79c:	2aff      	cmp	r2, #255	@ 0xff
1005d79e:	d003      	beq.n	1005d7a8 <ll_cpe_check_instant_blocked+0x12>
1005d7a0:	4610      	mov	r0, r2
1005d7a2:	f000 f817 	bl	1005d7d4 <LL_cpe_is_opcode_supporting_instant>
1005d7a6:	e003      	b.n	1005d7b0 <ll_cpe_check_instant_blocked+0x1a>
1005d7a8:	4628      	mov	r0, r5
1005d7aa:	4621      	mov	r1, r4
1005d7ac:	f000 f80a 	bl	1005d7c4 <ll_cpe_get_instant_supported>
1005d7b0:	2800      	cmp	r0, #0
1005d7b2:	d005      	beq.n	1005d7c0 <ll_cpe_check_instant_blocked+0x2a>
1005d7b4:	2202      	movs	r2, #2
1005d7b6:	4628      	mov	r0, r5
1005d7b8:	4621      	mov	r1, r4
1005d7ba:	f7ff fd00 	bl	1005d1be <ll_cpe_get_blocked_status>
1005d7be:	bdb0      	pop	{r4, r5, r7, pc}
1005d7c0:	2000      	movs	r0, #0
1005d7c2:	bdb0      	pop	{r4, r5, r7, pc}

1005d7c4 <ll_cpe_get_instant_supported>:
1005d7c4:	b580      	push	{r7, lr}
1005d7c6:	f7ff f883 	bl	1005c8d0 <ll_cpe_get_ctrl_flds_per_sm_p>
1005d7ca:	7800      	ldrb	r0, [r0, #0]
1005d7cc:	0680      	lsls	r0, r0, #26
1005d7ce:	0fc0      	lsrs	r0, r0, #31
1005d7d0:	bd80      	pop	{r7, pc}
	...

1005d7d4 <LL_cpe_is_opcode_supporting_instant>:
1005d7d4:	b510      	push	{r4, lr}
1005d7d6:	4601      	mov	r1, r0
1005d7d8:	2000      	movs	r0, #0
1005d7da:	a205      	add	r2, pc, #20	@ (adr r2, 1005d7f0 <LL_cpe_is_opcode_supporting_instant+0x1c>)
1005d7dc:	4603      	mov	r3, r0
1005d7de:	2b04      	cmp	r3, #4
1005d7e0:	d004      	beq.n	1005d7ec <LL_cpe_is_opcode_supporting_instant+0x18>
1005d7e2:	5cd4      	ldrb	r4, [r2, r3]
1005d7e4:	1c5b      	adds	r3, r3, #1
1005d7e6:	428c      	cmp	r4, r1
1005d7e8:	d1f9      	bne.n	1005d7de <LL_cpe_is_opcode_supporting_instant+0xa>
1005d7ea:	2001      	movs	r0, #1
1005d7ec:	bd10      	pop	{r4, pc}
1005d7ee:	46c0      	nop			@ (mov r8, r8)
1005d7f0:	1f160001 	.word	0x1f160001

1005d7f4 <LL_cpe_get_cpf>:
1005d7f4:	b510      	push	{r4, lr}
1005d7f6:	4601      	mov	r1, r0
1005d7f8:	3914      	subs	r1, #20
1005d7fa:	2903      	cmp	r1, #3
1005d7fc:	d201      	bcs.n	1005d802 <LL_cpe_get_cpf+0xe>
1005d7fe:	2000      	movs	r0, #0
1005d800:	bd10      	pop	{r4, pc}
1005d802:	0084      	lsls	r4, r0, #2
1005d804:	f7fd f9fe 	bl	1005ac04 <llc_conn_get_cntxt_p>
1005d808:	6880      	ldr	r0, [r0, #8]
1005d80a:	5900      	ldr	r0, [r0, r4]
1005d80c:	bd10      	pop	{r4, pc}

1005d80e <ll_cpe_set_expected_opcode>:
1005d80e:	b5b0      	push	{r4, r5, r7, lr}
1005d810:	4614      	mov	r4, r2
1005d812:	460d      	mov	r5, r1
1005d814:	f7fd fa00 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005d818:	1940      	adds	r0, r0, r5
1005d81a:	21ae      	movs	r1, #174	@ 0xae
1005d81c:	5444      	strb	r4, [r0, r1]
1005d81e:	bdb0      	pop	{r4, r5, r7, pc}

1005d820 <LL_channel_map_update_param_check>:
1005d820:	b5b0      	push	{r4, r5, r7, lr}
1005d822:	4601      	mov	r1, r0
1005d824:	7900      	ldrb	r0, [r0, #4]
1005d826:	281f      	cmp	r0, #31
1005d828:	d811      	bhi.n	1005d84e <LL_channel_map_update_param_check+0x2e>
1005d82a:	2000      	movs	r0, #0
1005d82c:	4602      	mov	r2, r0
1005d82e:	4603      	mov	r3, r0
1005d830:	2a25      	cmp	r2, #37	@ 0x25
1005d832:	d00f      	beq.n	1005d854 <LL_channel_map_update_param_check+0x34>
1005d834:	2407      	movs	r4, #7
1005d836:	4014      	ands	r4, r2
1005d838:	08d5      	lsrs	r5, r2, #3
1005d83a:	5d4d      	ldrb	r5, [r1, r5]
1005d83c:	40e5      	lsrs	r5, r4
1005d83e:	07ec      	lsls	r4, r5, #31
1005d840:	d003      	beq.n	1005d84a <LL_channel_map_update_param_check+0x2a>
1005d842:	1c5b      	adds	r3, r3, #1
1005d844:	b2dc      	uxtb	r4, r3
1005d846:	2c02      	cmp	r4, #2
1005d848:	d003      	beq.n	1005d852 <LL_channel_map_update_param_check+0x32>
1005d84a:	1c52      	adds	r2, r2, #1
1005d84c:	e7f0      	b.n	1005d830 <LL_channel_map_update_param_check+0x10>
1005d84e:	2000      	movs	r0, #0
1005d850:	bdb0      	pop	{r4, r5, r7, pc}
1005d852:	2001      	movs	r0, #1
1005d854:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005d858 <LLC_channel_map_copy_to_cpf_context_ucfg_weak>:
1005d858:	b580      	push	{r7, lr}
1005d85a:	4904      	ldr	r1, [pc, #16]	@ (1005d86c <__arm_cp.1_0>)
1005d85c:	6809      	ldr	r1, [r1, #0]
1005d85e:	229c      	movs	r2, #156	@ 0x9c
1005d860:	5889      	ldr	r1, [r1, r2]
1005d862:	3148      	adds	r1, #72	@ 0x48
1005d864:	2205      	movs	r2, #5
1005d866:	f7f5 fd65 	bl	10053334 <BLEPLAT_MemCpy>
1005d86a:	bd80      	pop	{r7, pc}

1005d86c <__arm_cp.1_0>:
1005d86c:	20002958 	.word	0x20002958

1005d870 <LL_channel_map_update>:
1005d870:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d872:	b085      	sub	sp, #20
1005d874:	461e      	mov	r6, r3
1005d876:	4617      	mov	r7, r2
1005d878:	4605      	mov	r5, r0
1005d87a:	9103      	str	r1, [sp, #12]
1005d87c:	f7ff f885 	bl	1005c98a <LL_cpe_get_cntxt>
1005d880:	4604      	mov	r4, r0
1005d882:	4628      	mov	r0, r5
1005d884:	f7fd f9c8 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005d888:	4602      	mov	r2, r0
1005d88a:	1e78      	subs	r0, r7, #1
1005d88c:	2806      	cmp	r0, #6
1005d88e:	d86c      	bhi.n	1005d96a <LL_channel_map_update+0xfa>
1005d890:	4478      	add	r0, pc
1005d892:	7900      	ldrb	r0, [r0, #4]
1005d894:	0040      	lsls	r0, r0, #1
1005d896:	4487      	add	pc, r0
1005d898:	30680303 	.word	0x30680303
1005d89c:	005a3568 	.word	0x005a3568
1005d8a0:	202c      	movs	r0, #44	@ 0x2c
1005d8a2:	5c10      	ldrb	r0, [r2, r0]
1005d8a4:	2803      	cmp	r0, #3
1005d8a6:	d160      	bne.n	1005d96a <LL_channel_map_update+0xfa>
1005d8a8:	9202      	str	r2, [sp, #8]
1005d8aa:	1cf0      	adds	r0, r6, #3
1005d8ac:	4607      	mov	r7, r0
1005d8ae:	f7ff ffb7 	bl	1005d820 <LL_channel_map_update_param_check>
1005d8b2:	2801      	cmp	r0, #1
1005d8b4:	d151      	bne.n	1005d95a <LL_channel_map_update+0xea>
1005d8b6:	7a30      	ldrb	r0, [r6, #8]
1005d8b8:	9001      	str	r0, [sp, #4]
1005d8ba:	7a76      	ldrb	r6, [r6, #9]
1005d8bc:	2205      	movs	r2, #5
1005d8be:	4638      	mov	r0, r7
1005d8c0:	4621      	mov	r1, r4
1005d8c2:	f005 ff55 	bl	10063770 <char_copy>
1005d8c6:	0230      	lsls	r0, r6, #8
1005d8c8:	9901      	ldr	r1, [sp, #4]
1005d8ca:	1840      	adds	r0, r0, r1
1005d8cc:	b282      	uxth	r2, r0
1005d8ce:	9802      	ldr	r0, [sp, #8]
1005d8d0:	4621      	mov	r1, r4
1005d8d2:	f7fd feb5 	bl	1005b640 <llc_conn_set_chmap_params>
1005d8d6:	2600      	movs	r6, #0
1005d8d8:	2702      	movs	r7, #2
1005d8da:	4628      	mov	r0, r5
1005d8dc:	4631      	mov	r1, r6
1005d8de:	463a      	mov	r2, r7
1005d8e0:	f7ff f836 	bl	1005c950 <LL_cpe_set_blocked>
1005d8e4:	2301      	movs	r3, #1
1005d8e6:	4628      	mov	r0, r5
1005d8e8:	4631      	mov	r1, r6
1005d8ea:	463a      	mov	r2, r7
1005d8ec:	f7fe fff7 	bl	1005c8de <LL_cpe_set_active>
1005d8f0:	4628      	mov	r0, r5
1005d8f2:	9903      	ldr	r1, [sp, #12]
1005d8f4:	f7ff f861 	bl	1005c9ba <LL_cpe_set_rx_with_instant>
1005d8f8:	e037      	b.n	1005d96a <LL_channel_map_update+0xfa>
1005d8fa:	78b0      	ldrb	r0, [r6, #2]
1005d8fc:	2801      	cmp	r0, #1
1005d8fe:	d030      	beq.n	1005d962 <LL_channel_map_update+0xf2>
1005d900:	212a      	movs	r1, #42	@ 0x2a
1005d902:	e02f      	b.n	1005d964 <LL_channel_map_update+0xf4>
1005d904:	4628      	mov	r0, r5
1005d906:	9202      	str	r2, [sp, #8]
1005d908:	f7ff fe08 	bl	1005d51c <llc_cpe_calc_instant>
1005d90c:	af04      	add	r7, sp, #16
1005d90e:	8038      	strh	r0, [r7, #0]
1005d910:	4620      	mov	r0, r4
1005d912:	4629      	mov	r1, r5
1005d914:	f7ff ffa0 	bl	1005d858 <LLC_channel_map_copy_to_cpf_context_ucfg_weak>
1005d918:	2001      	movs	r0, #1
1005d91a:	70b0      	strb	r0, [r6, #2]
1005d91c:	2008      	movs	r0, #8
1005d91e:	7070      	strb	r0, [r6, #1]
1005d920:	2003      	movs	r0, #3
1005d922:	7030      	strb	r0, [r6, #0]
1005d924:	1cf1      	adds	r1, r6, #3
1005d926:	2205      	movs	r2, #5
1005d928:	4620      	mov	r0, r4
1005d92a:	f005 ff21 	bl	10063770 <char_copy>
1005d92e:	3608      	adds	r6, #8
1005d930:	2202      	movs	r2, #2
1005d932:	4638      	mov	r0, r7
1005d934:	4631      	mov	r1, r6
1005d936:	f005 ff1b 	bl	10063770 <char_copy>
1005d93a:	883a      	ldrh	r2, [r7, #0]
1005d93c:	9802      	ldr	r0, [sp, #8]
1005d93e:	4621      	mov	r1, r4
1005d940:	f7fd fe7e 	bl	1005b640 <llc_conn_set_chmap_params>
1005d944:	4628      	mov	r0, r5
1005d946:	9903      	ldr	r1, [sp, #12]
1005d948:	f7ff f828 	bl	1005c99c <LL_cpe_set_tx_with_instant>
1005d94c:	e00d      	b.n	1005d96a <LL_channel_map_update+0xfa>
1005d94e:	2202      	movs	r2, #2
1005d950:	4628      	mov	r0, r5
1005d952:	9903      	ldr	r1, [sp, #12]
1005d954:	f7fe ffda 	bl	1005c90c <LL_cpe_clr_active>
1005d958:	e007      	b.n	1005d96a <LL_channel_map_update+0xfa>
1005d95a:	4628      	mov	r0, r5
1005d95c:	f7fe ff8c 	bl	1005c878 <ll_cpe_set_unknown_rsp_pending>
1005d960:	e003      	b.n	1005d96a <LL_channel_map_update+0xfa>
1005d962:	2123      	movs	r1, #35	@ 0x23
1005d964:	4610      	mov	r0, r2
1005d966:	f7fe f83b 	bl	1005b9e0 <llc_conn_disconnect_link_from_cpf>
1005d96a:	20ff      	movs	r0, #255	@ 0xff
1005d96c:	b005      	add	sp, #20
1005d96e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005d970 <LLC_channel_map_update_offline_processing_ucfg_weak>:
1005d970:	2000      	movs	r0, #0
1005d972:	4770      	bx	lr

1005d974 <LLC_conn_init_chc_ctxt_ucfg_weak>:
1005d974:	4770      	bx	lr

1005d976 <LLC_chc_ll_cntxt_init_ucfg_weak>:
1005d976:	4770      	bx	lr

1005d978 <LLC_chc_reporting_offline_processing_ucfg_weak>:
1005d978:	2000      	movs	r0, #0
1005d97a:	4770      	bx	lr

1005d97c <LL_cpf_cis_processing_ucfg_weak>:
1005d97c:	4770      	bx	lr
	...

1005d980 <LL_cpf_conn_upd>:
1005d980:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d982:	b091      	sub	sp, #68	@ 0x44
1005d984:	461e      	mov	r6, r3
1005d986:	4614      	mov	r4, r2
1005d988:	4605      	mov	r5, r0
1005d98a:	910c      	str	r1, [sp, #48]	@ 0x30
1005d98c:	f7fe fffd 	bl	1005c98a <LL_cpe_get_cntxt>
1005d990:	4607      	mov	r7, r0
1005d992:	4628      	mov	r0, r5
1005d994:	f7fd f940 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005d998:	4603      	mov	r3, r0
1005d99a:	1e60      	subs	r0, r4, #1
1005d99c:	2807      	cmp	r0, #7
1005d99e:	d900      	bls.n	1005d9a2 <LL_cpf_conn_upd+0x22>
1005d9a0:	e0ce      	b.n	1005db40 <LL_cpf_conn_upd+0x1c0>
1005d9a2:	46c0      	nop			@ (mov r8, r8)
1005d9a4:	4478      	add	r0, pc
1005d9a6:	7900      	ldrb	r0, [r0, #4]
1005d9a8:	0040      	lsls	r0, r0, #1
1005d9aa:	4487      	add	pc, r0
1005d9ac:	22c90303 	.word	0x22c90303
1005d9b0:	c47c2fc9 	.word	0xc47c2fc9
1005d9b4:	4618      	mov	r0, r3
1005d9b6:	302c      	adds	r0, #44	@ 0x2c
1005d9b8:	7800      	ldrb	r0, [r0, #0]
1005d9ba:	2803      	cmp	r0, #3
1005d9bc:	d000      	beq.n	1005d9c0 <LL_cpf_conn_upd+0x40>
1005d9be:	e0bf      	b.n	1005db40 <LL_cpf_conn_upd+0x1c0>
1005d9c0:	2091      	movs	r0, #145	@ 0x91
1005d9c2:	0040      	lsls	r0, r0, #1
1005d9c4:	930b      	str	r3, [sp, #44]	@ 0x2c
1005d9c6:	1819      	adds	r1, r3, r0
1005d9c8:	8973      	ldrh	r3, [r6, #10]
1005d9ca:	8932      	ldrh	r2, [r6, #8]
1005d9cc:	88f0      	ldrh	r0, [r6, #6]
1005d9ce:	880c      	ldrh	r4, [r1, #0]
1005d9d0:	2100      	movs	r1, #0
1005d9d2:	9100      	str	r1, [sp, #0]
1005d9d4:	9101      	str	r1, [sp, #4]
1005d9d6:	9402      	str	r4, [sp, #8]
1005d9d8:	900a      	str	r0, [sp, #40]	@ 0x28
1005d9da:	4601      	mov	r1, r0
1005d9dc:	9209      	str	r2, [sp, #36]	@ 0x24
1005d9de:	461c      	mov	r4, r3
1005d9e0:	f000 f906 	bl	1005dbf0 <llc_conn_upd_params_check>
1005d9e4:	2800      	cmp	r0, #0
1005d9e6:	d100      	bne.n	1005d9ea <LL_cpf_conn_upd+0x6a>
1005d9e8:	e0ad      	b.n	1005db46 <LL_cpf_conn_upd+0x1c6>
1005d9ea:	4628      	mov	r0, r5
1005d9ec:	f7fe ff44 	bl	1005c878 <ll_cpe_set_unknown_rsp_pending>
1005d9f0:	e0a6      	b.n	1005db40 <LL_cpf_conn_upd+0x1c0>
1005d9f2:	78b0      	ldrb	r0, [r6, #2]
1005d9f4:	2123      	movs	r1, #35	@ 0x23
1005d9f6:	280f      	cmp	r0, #15
1005d9f8:	460a      	mov	r2, r1
1005d9fa:	d000      	beq.n	1005d9fe <LL_cpf_conn_upd+0x7e>
1005d9fc:	222a      	movs	r2, #42	@ 0x2a
1005d9fe:	2800      	cmp	r0, #0
1005da00:	d000      	beq.n	1005da04 <LL_cpf_conn_upd+0x84>
1005da02:	4611      	mov	r1, r2
1005da04:	4618      	mov	r0, r3
1005da06:	f7fd ffeb 	bl	1005b9e0 <llc_conn_disconnect_link_from_cpf>
1005da0a:	e099      	b.n	1005db40 <LL_cpf_conn_upd+0x1c0>
1005da0c:	930b      	str	r3, [sp, #44]	@ 0x2c
1005da0e:	1cb0      	adds	r0, r6, #2
1005da10:	9008      	str	r0, [sp, #32]
1005da12:	f7fd f8f7 	bl	1005ac04 <llc_conn_get_cntxt_p>
1005da16:	9009      	str	r0, [sp, #36]	@ 0x24
1005da18:	4628      	mov	r0, r5
1005da1a:	f7ff fd7f 	bl	1005d51c <llc_cpe_calc_instant>
1005da1e:	4604      	mov	r4, r0
1005da20:	2028      	movs	r0, #40	@ 0x28
1005da22:	2101      	movs	r1, #1
1005da24:	9107      	str	r1, [sp, #28]
1005da26:	5439      	strb	r1, [r7, r0]
1005da28:	8b38      	ldrh	r0, [r7, #24]
1005da2a:	8b79      	ldrh	r1, [r7, #26]
1005da2c:	1808      	adds	r0, r1, r0
1005da2e:	0840      	lsrs	r0, r0, #1
1005da30:	9010      	str	r0, [sp, #64]	@ 0x40
1005da32:	8bb8      	ldrh	r0, [r7, #28]
1005da34:	9006      	str	r0, [sp, #24]
1005da36:	8bf8      	ldrh	r0, [r7, #30]
1005da38:	9005      	str	r0, [sp, #20]
1005da3a:	a80d      	add	r0, sp, #52	@ 0x34
1005da3c:	7105      	strb	r5, [r0, #4]
1005da3e:	a910      	add	r1, sp, #64	@ 0x40
1005da40:	910f      	str	r1, [sp, #60]	@ 0x3c
1005da42:	970d      	str	r7, [sp, #52]	@ 0x34
1005da44:	f7f2 f814 	bl	1004fa70 <LL_conn_upd_max_tx_time_coded_ucfg>
1005da48:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005da4a:	8338      	strh	r0, [r7, #24]
1005da4c:	940a      	str	r4, [sp, #40]	@ 0x28
1005da4e:	0421      	lsls	r1, r4, #16
1005da50:	9a05      	ldr	r2, [sp, #20]
1005da52:	1889      	adds	r1, r1, r2
1005da54:	9104      	str	r1, [sp, #16]
1005da56:	9c06      	ldr	r4, [sp, #24]
1005da58:	0423      	lsls	r3, r4, #16
1005da5a:	4303      	orrs	r3, r0
1005da5c:	9808      	ldr	r0, [sp, #32]
1005da5e:	4962      	ldr	r1, [pc, #392]	@ (1005dbe8 <__arm_cp.0_2>)
1005da60:	c00a      	stmia	r0!, {r1, r3}
1005da62:	9904      	ldr	r1, [sp, #16]
1005da64:	6001      	str	r1, [r0, #0]
1005da66:	4861      	ldr	r0, [pc, #388]	@ (1005dbec <__arm_cp.0_3>)
1005da68:	8030      	strh	r0, [r6, #0]
1005da6a:	2003      	movs	r0, #3
1005da6c:	0240      	lsls	r0, r0, #9
1005da6e:	0311      	lsls	r1, r2, #12
1005da70:	60fc      	str	r4, [r7, #12]
1005da72:	6139      	str	r1, [r7, #16]
1005da74:	9907      	ldr	r1, [sp, #28]
1005da76:	0249      	lsls	r1, r1, #9
1005da78:	c703      	stmia	r7!, {r0, r1}
1005da7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005da7c:	6800      	ldr	r0, [r0, #0]
1005da7e:	8b79      	ldrh	r1, [r7, #26]
1005da80:	0209      	lsls	r1, r1, #8
1005da82:	3f08      	subs	r7, #8
1005da84:	4288      	cmp	r0, r1
1005da86:	d300      	bcc.n	1005da8a <LL_cpf_conn_upd+0x10a>
1005da88:	4608      	mov	r0, r1
1005da8a:	6178      	str	r0, [r7, #20]
1005da8c:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005da8e:	0240      	lsls	r0, r0, #9
1005da90:	60b8      	str	r0, [r7, #8]
1005da92:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005da94:	4639      	mov	r1, r7
1005da96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005da98:	f7fd fddb 	bl	1005b652 <llc_conn_set_conn_update_params>
1005da9c:	4628      	mov	r0, r5
1005da9e:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005daa0:	f7fe ff7c 	bl	1005c99c <LL_cpe_set_tx_with_instant>
1005daa4:	e04c      	b.n	1005db40 <LL_cpf_conn_upd+0x1c0>
1005daa6:	2028      	movs	r0, #40	@ 0x28
1005daa8:	5c38      	ldrb	r0, [r7, r0]
1005daaa:	2801      	cmp	r0, #1
1005daac:	d143      	bne.n	1005db36 <LL_cpf_conn_upd+0x1b6>
1005daae:	461c      	mov	r4, r3
1005dab0:	a80d      	add	r0, sp, #52	@ 0x34
1005dab2:	7105      	strb	r5, [r0, #4]
1005dab4:	970d      	str	r7, [sp, #52]	@ 0x34
1005dab6:	f7f1 ffe7 	bl	1004fa88 <LL_conn_upd_data_length_change_event_ucfg>
1005daba:	4849      	ldr	r0, [pc, #292]	@ (1005dbe0 <__arm_cp.0_0>)
1005dabc:	6800      	ldr	r0, [r0, #0]
1005dabe:	213d      	movs	r1, #61	@ 0x3d
1005dac0:	5c41      	ldrb	r1, [r0, r1]
1005dac2:	0689      	lsls	r1, r1, #26
1005dac4:	d532      	bpl.n	1005db2c <LL_cpf_conn_upd+0x1ac>
1005dac6:	303d      	adds	r0, #61	@ 0x3d
1005dac8:	7a40      	ldrb	r0, [r0, #9]
1005daca:	0740      	lsls	r0, r0, #29
1005dacc:	d52e      	bpl.n	1005db2c <LL_cpf_conn_upd+0x1ac>
1005dace:	8bf8      	ldrh	r0, [r7, #30]
1005dad0:	900a      	str	r0, [sp, #40]	@ 0x28
1005dad2:	8bb8      	ldrh	r0, [r7, #28]
1005dad4:	9009      	str	r0, [sp, #36]	@ 0x24
1005dad6:	8b3f      	ldrh	r7, [r7, #24]
1005dad8:	8f64      	ldrh	r4, [r4, #58]	@ 0x3a
1005dada:	4842      	ldr	r0, [pc, #264]	@ (1005dbe4 <__arm_cp.0_1>)
1005dadc:	6800      	ldr	r0, [r0, #0]
1005dade:	6900      	ldr	r0, [r0, #16]
1005dae0:	2180      	movs	r1, #128	@ 0x80
1005dae2:	2224      	movs	r2, #36	@ 0x24
1005dae4:	2604      	movs	r6, #4
1005dae6:	4633      	mov	r3, r6
1005dae8:	f7f8 f970 	bl	10055dcc <aci_event_fifo_push_header>
1005daec:	2800      	cmp	r0, #0
1005daee:	d01d      	beq.n	1005db2c <LL_cpf_conn_upd+0x1ac>
1005daf0:	4601      	mov	r1, r0
1005daf2:	300b      	adds	r0, #11
1005daf4:	724c      	strb	r4, [r1, #9]
1005daf6:	7007      	strb	r7, [r0, #0]
1005daf8:	970b      	str	r7, [sp, #44]	@ 0x2c
1005dafa:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005dafc:	734f      	strb	r7, [r1, #13]
1005dafe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1005db00:	7103      	strb	r3, [r0, #4]
1005db02:	2200      	movs	r2, #0
1005db04:	720a      	strb	r2, [r1, #8]
1005db06:	2203      	movs	r2, #3
1005db08:	71ca      	strb	r2, [r1, #7]
1005db0a:	220a      	movs	r2, #10
1005db0c:	718a      	strb	r2, [r1, #6]
1005db0e:	223e      	movs	r2, #62	@ 0x3e
1005db10:	714a      	strb	r2, [r1, #5]
1005db12:	710e      	strb	r6, [r1, #4]
1005db14:	0a22      	lsrs	r2, r4, #8
1005db16:	728a      	strb	r2, [r1, #10]
1005db18:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005db1a:	0a12      	lsrs	r2, r2, #8
1005db1c:	7042      	strb	r2, [r0, #1]
1005db1e:	0a3a      	lsrs	r2, r7, #8
1005db20:	738a      	strb	r2, [r1, #14]
1005db22:	0a1a      	lsrs	r2, r3, #8
1005db24:	7142      	strb	r2, [r0, #5]
1005db26:	2080      	movs	r0, #128	@ 0x80
1005db28:	f7f8 f9ed 	bl	10055f06 <aci_event_fifo_push>
1005db2c:	2100      	movs	r1, #0
1005db2e:	4628      	mov	r0, r5
1005db30:	460a      	mov	r2, r1
1005db32:	f000 fec0 	bl	1005e8b6 <LLC_update_le_ping_params>
1005db36:	2200      	movs	r2, #0
1005db38:	4628      	mov	r0, r5
1005db3a:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005db3c:	f7fe fee6 	bl	1005c90c <LL_cpe_clr_active>
1005db40:	20ff      	movs	r0, #255	@ 0xff
1005db42:	b011      	add	sp, #68	@ 0x44
1005db44:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005db46:	78f0      	ldrb	r0, [r6, #3]
1005db48:	2800      	cmp	r0, #0
1005db4a:	d100      	bne.n	1005db4e <LL_cpf_conn_upd+0x1ce>
1005db4c:	e74d      	b.n	1005d9ea <LL_cpf_conn_upd+0x6a>
1005db4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005db50:	1e49      	subs	r1, r1, #1
1005db52:	2908      	cmp	r1, #8
1005db54:	d300      	bcc.n	1005db58 <LL_cpf_conn_upd+0x1d8>
1005db56:	2108      	movs	r1, #8
1005db58:	4281      	cmp	r1, r0
1005db5a:	d200      	bcs.n	1005db5e <LL_cpf_conn_upd+0x1de>
1005db5c:	e745      	b.n	1005d9ea <LL_cpf_conn_upd+0x6a>
1005db5e:	88b2      	ldrh	r2, [r6, #4]
1005db60:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005db62:	428a      	cmp	r2, r1
1005db64:	d900      	bls.n	1005db68 <LL_cpf_conn_upd+0x1e8>
1005db66:	e740      	b.n	1005d9ea <LL_cpf_conn_upd+0x6a>
1005db68:	83fc      	strh	r4, [r7, #30]
1005db6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005db6c:	83b9      	strh	r1, [r7, #28]
1005db6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1005db70:	833b      	strh	r3, [r7, #24]
1005db72:	837b      	strh	r3, [r7, #26]
1005db74:	0324      	lsls	r4, r4, #12
1005db76:	025b      	lsls	r3, r3, #9
1005db78:	0252      	lsls	r2, r2, #9
1005db7a:	0240      	lsls	r0, r0, #9
1005db7c:	c70d      	stmia	r7!, {r0, r2, r3}
1005db7e:	6039      	str	r1, [r7, #0]
1005db80:	607c      	str	r4, [r7, #4]
1005db82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005db84:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
1005db86:	2001      	movs	r0, #1
1005db88:	3f0c      	subs	r7, #12
1005db8a:	429a      	cmp	r2, r3
1005db8c:	d107      	bne.n	1005db9e <LL_cpf_conn_upd+0x21e>
1005db8e:	6e8a      	ldr	r2, [r1, #104]	@ 0x68
1005db90:	4294      	cmp	r4, r2
1005db92:	d104      	bne.n	1005db9e <LL_cpf_conn_upd+0x21e>
1005db94:	8f08      	ldrh	r0, [r1, #56]	@ 0x38
1005db96:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005db98:	1a08      	subs	r0, r1, r0
1005db9a:	1e41      	subs	r1, r0, #1
1005db9c:	4188      	sbcs	r0, r1
1005db9e:	2128      	movs	r1, #40	@ 0x28
1005dba0:	5478      	strb	r0, [r7, r1]
1005dba2:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005dba4:	9010      	str	r0, [sp, #64]	@ 0x40
1005dba6:	a80d      	add	r0, sp, #52	@ 0x34
1005dba8:	7105      	strb	r5, [r0, #4]
1005dbaa:	a910      	add	r1, sp, #64	@ 0x40
1005dbac:	910f      	str	r1, [sp, #60]	@ 0x3c
1005dbae:	970d      	str	r7, [sp, #52]	@ 0x34
1005dbb0:	f7f1 ff5e 	bl	1004fa70 <LL_conn_upd_max_tx_time_coded_ucfg>
1005dbb4:	2202      	movs	r2, #2
1005dbb6:	4628      	mov	r0, r5
1005dbb8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
1005dbba:	4621      	mov	r1, r4
1005dbbc:	f7fe fec8 	bl	1005c950 <LL_cpe_set_blocked>
1005dbc0:	2200      	movs	r2, #0
1005dbc2:	2301      	movs	r3, #1
1005dbc4:	4628      	mov	r0, r5
1005dbc6:	4621      	mov	r1, r4
1005dbc8:	f7fe fe89 	bl	1005c8de <LL_cpe_set_active>
1005dbcc:	89b2      	ldrh	r2, [r6, #12]
1005dbce:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005dbd0:	4639      	mov	r1, r7
1005dbd2:	f7fd fd3e 	bl	1005b652 <llc_conn_set_conn_update_params>
1005dbd6:	4628      	mov	r0, r5
1005dbd8:	4621      	mov	r1, r4
1005dbda:	f7fe feee 	bl	1005c9ba <LL_cpe_set_rx_with_instant>
1005dbde:	e7af      	b.n	1005db40 <LL_cpf_conn_upd+0x1c0>

1005dbe0 <__arm_cp.0_0>:
1005dbe0:	20002958 	.word	0x20002958

1005dbe4 <__arm_cp.0_1>:
1005dbe4:	20002908 	.word	0x20002908

1005dbe8 <__arm_cp.0_2>:
1005dbe8:	00010300 	.word	0x00010300

1005dbec <__arm_cp.0_3>:
1005dbec:	00000c03 	.word	0x00000c03

1005dbf0 <llc_conn_upd_params_check>:
1005dbf0:	b570      	push	{r4, r5, r6, lr}
1005dbf2:	4604      	mov	r4, r0
1005dbf4:	2012      	movs	r0, #18
1005dbf6:	2c06      	cmp	r4, #6
1005dbf8:	d31c      	bcc.n	1005dc34 <llc_conn_upd_params_check+0x44>
1005dbfa:	2519      	movs	r5, #25
1005dbfc:	01ed      	lsls	r5, r5, #7
1005dbfe:	42ac      	cmp	r4, r5
1005dc00:	d818      	bhi.n	1005dc34 <llc_conn_upd_params_check+0x44>
1005dc02:	2906      	cmp	r1, #6
1005dc04:	d316      	bcc.n	1005dc34 <llc_conn_upd_params_check+0x44>
1005dc06:	42a9      	cmp	r1, r5
1005dc08:	d814      	bhi.n	1005dc34 <llc_conn_upd_params_check+0x44>
1005dc0a:	42a1      	cmp	r1, r4
1005dc0c:	d312      	bcc.n	1005dc34 <llc_conn_upd_params_check+0x44>
1005dc0e:	0894      	lsrs	r4, r2, #2
1005dc10:	2c7c      	cmp	r4, #124	@ 0x7c
1005dc12:	d80f      	bhi.n	1005dc34 <llc_conn_upd_params_check+0x44>
1005dc14:	9c05      	ldr	r4, [sp, #20]
1005dc16:	9e04      	ldr	r6, [sp, #16]
1005dc18:	42b4      	cmp	r4, r6
1005dc1a:	d30b      	bcc.n	1005dc34 <llc_conn_upd_params_check+0x44>
1005dc1c:	2b0a      	cmp	r3, #10
1005dc1e:	d309      	bcc.n	1005dc34 <llc_conn_upd_params_check+0x44>
1005dc20:	42ab      	cmp	r3, r5
1005dc22:	d807      	bhi.n	1005dc34 <llc_conn_upd_params_check+0x44>
1005dc24:	9806      	ldr	r0, [sp, #24]
1005dc26:	1c52      	adds	r2, r2, #1
1005dc28:	434a      	muls	r2, r1
1005dc2a:	4342      	muls	r2, r0
1005dc2c:	0890      	lsrs	r0, r2, #2
1005dc2e:	4283      	cmp	r3, r0
1005dc30:	d801      	bhi.n	1005dc36 <llc_conn_upd_params_check+0x46>
1005dc32:	2012      	movs	r0, #18
1005dc34:	bd70      	pop	{r4, r5, r6, pc}
1005dc36:	2000      	movs	r0, #0
1005dc38:	bd70      	pop	{r4, r5, r6, pc}
	...

1005dc3c <LL_conn_upd_max_tx_time_coded>:
1005dc3c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005dc3e:	4606      	mov	r6, r0
1005dc40:	6887      	ldr	r7, [r0, #8]
1005dc42:	7904      	ldrb	r4, [r0, #4]
1005dc44:	4620      	mov	r0, r4
1005dc46:	f7fc ffe7 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005dc4a:	4605      	mov	r5, r0
1005dc4c:	4620      	mov	r0, r4
1005dc4e:	f7fd f817 	bl	1005ac80 <llc_conn_get_phy_upd_cntxt_per_p>
1005dc52:	2800      	cmp	r0, #0
1005dc54:	d044      	beq.n	1005dce0 <LL_conn_upd_max_tx_time_coded+0xa4>
1005dc56:	7980      	ldrb	r0, [r0, #6]
1005dc58:	2804      	cmp	r0, #4
1005dc5a:	d141      	bne.n	1005dce0 <LL_conn_upd_max_tx_time_coded+0xa4>
1005dc5c:	0278      	lsls	r0, r7, #9
1005dc5e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
1005dc60:	4281      	cmp	r1, r0
1005dc62:	d03d      	beq.n	1005dce0 <LL_conn_upd_max_tx_time_coded+0xa4>
1005dc64:	4628      	mov	r0, r5
1005dc66:	302c      	adds	r0, #44	@ 0x2c
1005dc68:	9502      	str	r5, [sp, #8]
1005dc6a:	35b6      	adds	r5, #182	@ 0xb6
1005dc6c:	6839      	ldr	r1, [r7, #0]
1005dc6e:	223d      	movs	r2, #61	@ 0x3d
1005dc70:	0112      	lsls	r2, r2, #4
1005dc72:	886b      	ldrh	r3, [r5, #2]
1005dc74:	019b      	lsls	r3, r3, #6
1005dc76:	189a      	adds	r2, r3, r2
1005dc78:	88eb      	ldrh	r3, [r5, #6]
1005dc7a:	429a      	cmp	r2, r3
1005dc7c:	d800      	bhi.n	1005dc80 <LL_conn_upd_max_tx_time_coded+0x44>
1005dc7e:	4613      	mov	r3, r2
1005dc80:	4a18      	ldr	r2, [pc, #96]	@ (1005dce4 <__arm_cp.3_0>)
1005dc82:	434a      	muls	r2, r1
1005dc84:	4611      	mov	r1, r2
1005dc86:	6836      	ldr	r6, [r6, #0]
1005dc88:	7800      	ldrb	r0, [r0, #0]
1005dc8a:	2802      	cmp	r0, #2
1005dc8c:	d10b      	bne.n	1005dca6 <LL_conn_upd_max_tx_time_coded+0x6a>
1005dc8e:	4816      	ldr	r0, [pc, #88]	@ (1005dce8 <__arm_cp.3_1>)
1005dc90:	1818      	adds	r0, r3, r0
1005dc92:	4281      	cmp	r1, r0
1005dc94:	d207      	bcs.n	1005dca6 <LL_conn_upd_max_tx_time_coded+0x6a>
1005dc96:	9101      	str	r1, [sp, #4]
1005dc98:	4912      	ldr	r1, [pc, #72]	@ (1005dce4 <__arm_cp.3_0>)
1005dc9a:	9300      	str	r3, [sp, #0]
1005dc9c:	f7e2 fad0 	bl	10040240 <__udivsi3>
1005dca0:	9b00      	ldr	r3, [sp, #0]
1005dca2:	9901      	ldr	r1, [sp, #4]
1005dca4:	6038      	str	r0, [r7, #0]
1005dca6:	8828      	ldrh	r0, [r5, #0]
1005dca8:	84f0      	strh	r0, [r6, #38]	@ 0x26
1005dcaa:	204b      	movs	r0, #75	@ 0x4b
1005dcac:	0080      	lsls	r0, r0, #2
1005dcae:	1818      	adds	r0, r3, r0
1005dcb0:	1a09      	subs	r1, r1, r0
1005dcb2:	d200      	bcs.n	1005dcb6 <LL_conn_upd_max_tx_time_coded+0x7a>
1005dcb4:	2100      	movs	r1, #0
1005dcb6:	8968      	ldrh	r0, [r5, #10]
1005dcb8:	8a2a      	ldrh	r2, [r5, #16]
1005dcba:	4290      	cmp	r0, r2
1005dcbc:	d300      	bcc.n	1005dcc0 <LL_conn_upd_max_tx_time_coded+0x84>
1005dcbe:	4610      	mov	r0, r2
1005dcc0:	4281      	cmp	r1, r0
1005dcc2:	9b02      	ldr	r3, [sp, #8]
1005dcc4:	d800      	bhi.n	1005dcc8 <LL_conn_upd_max_tx_time_coded+0x8c>
1005dcc6:	4608      	mov	r0, r1
1005dcc8:	b282      	uxth	r2, r0
1005dcca:	21a9      	movs	r1, #169	@ 0xa9
1005dccc:	0109      	lsls	r1, r1, #4
1005dcce:	428a      	cmp	r2, r1
1005dcd0:	d800      	bhi.n	1005dcd4 <LL_conn_upd_max_tx_time_coded+0x98>
1005dcd2:	4608      	mov	r0, r1
1005dcd4:	84b0      	strh	r0, [r6, #36]	@ 0x24
1005dcd6:	2101      	movs	r1, #1
1005dcd8:	4620      	mov	r0, r4
1005dcda:	4632      	mov	r2, r6
1005dcdc:	f000 f806 	bl	1005dcec <LL_adjust_max_tx_data_frag_coded>
1005dce0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005dce2:	46c0      	nop			@ (mov r8, r8)

1005dce4 <__arm_cp.3_0>:
1005dce4:	000004e2 	.word	0x000004e2

1005dce8 <__arm_cp.3_1>:
1005dce8:	00000bbc 	.word	0x00000bbc

1005dcec <LL_adjust_max_tx_data_frag_coded>:
1005dcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005dcee:	461c      	mov	r4, r3
1005dcf0:	4615      	mov	r5, r2
1005dcf2:	460e      	mov	r6, r1
1005dcf4:	461f      	mov	r7, r3
1005dcf6:	37b4      	adds	r7, #180	@ 0xb4
1005dcf8:	f7fc ffc2 	bl	1005ac80 <llc_conn_get_phy_upd_cntxt_per_p>
1005dcfc:	2800      	cmp	r0, #0
1005dcfe:	d002      	beq.n	1005dd06 <LL_adjust_max_tx_data_frag_coded+0x1a>
1005dd00:	8800      	ldrh	r0, [r0, #0]
1005dd02:	2802      	cmp	r0, #2
1005dd04:	d001      	beq.n	1005dd0a <LL_adjust_max_tx_data_frag_coded+0x1e>
1005dd06:	2001      	movs	r0, #1
1005dd08:	e000      	b.n	1005dd0c <LL_adjust_max_tx_data_frag_coded+0x20>
1005dd0a:	2003      	movs	r0, #3
1005dd0c:	8ca9      	ldrh	r1, [r5, #36]	@ 0x24
1005dd0e:	4a0b      	ldr	r2, [pc, #44]	@ (1005dd3c <__arm_cp.4_0>)
1005dd10:	1889      	adds	r1, r1, r2
1005dd12:	40c1      	lsrs	r1, r0
1005dd14:	480a      	ldr	r0, [pc, #40]	@ (1005dd40 <__arm_cp.4_1>)
1005dd16:	1808      	adds	r0, r1, r0
1005dd18:	08c0      	lsrs	r0, r0, #3
1005dd1a:	b281      	uxth	r1, r0
1005dd1c:	8838      	ldrh	r0, [r7, #0]
1005dd1e:	4288      	cmp	r0, r1
1005dd20:	d300      	bcc.n	1005dd24 <LL_adjust_max_tx_data_frag_coded+0x38>
1005dd22:	4608      	mov	r0, r1
1005dd24:	2e00      	cmp	r6, #0
1005dd26:	d002      	beq.n	1005dd2e <LL_adjust_max_tx_data_frag_coded+0x42>
1005dd28:	8ce9      	ldrh	r1, [r5, #38]	@ 0x26
1005dd2a:	4281      	cmp	r1, r0
1005dd2c:	d300      	bcc.n	1005dd30 <LL_adjust_max_tx_data_frag_coded+0x44>
1005dd2e:	4601      	mov	r1, r0
1005dd30:	8079      	strh	r1, [r7, #2]
1005dd32:	4620      	mov	r0, r4
1005dd34:	f7fd fa3a 	bl	1005b1ac <llc_conn_guard_time_for_close_conn_event>
1005dd38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005dd3a:	46c0      	nop			@ (mov r8, r8)

1005dd3c <__arm_cp.4_0>:
1005dd3c:	fffffe88 	.word	0xfffffe88

1005dd40 <__arm_cp.4_1>:
1005dd40:	0007ffb5 	.word	0x0007ffb5

1005dd44 <LL_conn_upd_data_length_change_event>:
1005dd44:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005dd46:	6805      	ldr	r5, [r0, #0]
1005dd48:	7906      	ldrb	r6, [r0, #4]
1005dd4a:	4630      	mov	r0, r6
1005dd4c:	f7fc ff64 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005dd50:	4607      	mov	r7, r0
1005dd52:	4630      	mov	r0, r6
1005dd54:	f7fc ff94 	bl	1005ac80 <llc_conn_get_phy_upd_cntxt_per_p>
1005dd58:	2800      	cmp	r0, #0
1005dd5a:	d047      	beq.n	1005ddec <LL_conn_upd_data_length_change_event+0xa8>
1005dd5c:	7980      	ldrb	r0, [r0, #6]
1005dd5e:	2804      	cmp	r0, #4
1005dd60:	d144      	bne.n	1005ddec <LL_conn_upd_data_length_change_event+0xa8>
1005dd62:	463c      	mov	r4, r7
1005dd64:	34b4      	adds	r4, #180	@ 0xb4
1005dd66:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
1005dd68:	88e1      	ldrh	r1, [r4, #6]
1005dd6a:	4281      	cmp	r1, r0
1005dd6c:	d03e      	beq.n	1005ddec <LL_conn_upd_data_length_change_event+0xa8>
1005dd6e:	80e0      	strh	r0, [r4, #6]
1005dd70:	2100      	movs	r1, #0
1005dd72:	4630      	mov	r0, r6
1005dd74:	462a      	mov	r2, r5
1005dd76:	463b      	mov	r3, r7
1005dd78:	f7ff ffb8 	bl	1005dcec <LL_adjust_max_tx_data_frag_coded>
1005dd7c:	481c      	ldr	r0, [pc, #112]	@ (1005ddf0 <__arm_cp.6_0>)
1005dd7e:	6800      	ldr	r0, [r0, #0]
1005dd80:	213d      	movs	r1, #61	@ 0x3d
1005dd82:	5c41      	ldrb	r1, [r0, r1]
1005dd84:	0689      	lsls	r1, r1, #26
1005dd86:	d531      	bpl.n	1005ddec <LL_conn_upd_data_length_change_event+0xa8>
1005dd88:	303d      	adds	r0, #61	@ 0x3d
1005dd8a:	7a40      	ldrb	r0, [r0, #9]
1005dd8c:	0640      	lsls	r0, r0, #25
1005dd8e:	d52d      	bpl.n	1005ddec <LL_conn_upd_data_length_change_event+0xa8>
1005dd90:	8926      	ldrh	r6, [r4, #8]
1005dd92:	88a5      	ldrh	r5, [r4, #4]
1005dd94:	88e0      	ldrh	r0, [r4, #6]
1005dd96:	9001      	str	r0, [sp, #4]
1005dd98:	8820      	ldrh	r0, [r4, #0]
1005dd9a:	9002      	str	r0, [sp, #8]
1005dd9c:	8f7f      	ldrh	r7, [r7, #58]	@ 0x3a
1005dd9e:	4815      	ldr	r0, [pc, #84]	@ (1005ddf4 <__arm_cp.6_1>)
1005dda0:	6800      	ldr	r0, [r0, #0]
1005dda2:	6900      	ldr	r0, [r0, #16]
1005dda4:	2180      	movs	r1, #128	@ 0x80
1005dda6:	2226      	movs	r2, #38	@ 0x26
1005dda8:	2404      	movs	r4, #4
1005ddaa:	4623      	mov	r3, r4
1005ddac:	f7f8 f80e 	bl	10055dcc <aci_event_fifo_push_header>
1005ddb0:	2800      	cmp	r0, #0
1005ddb2:	d01b      	beq.n	1005ddec <LL_conn_upd_data_length_change_event+0xa8>
1005ddb4:	4601      	mov	r1, r0
1005ddb6:	7406      	strb	r6, [r0, #16]
1005ddb8:	7385      	strb	r5, [r0, #14]
1005ddba:	9b01      	ldr	r3, [sp, #4]
1005ddbc:	7303      	strb	r3, [r0, #12]
1005ddbe:	9a02      	ldr	r2, [sp, #8]
1005ddc0:	7282      	strb	r2, [r0, #10]
1005ddc2:	7207      	strb	r7, [r0, #8]
1005ddc4:	2007      	movs	r0, #7
1005ddc6:	71c8      	strb	r0, [r1, #7]
1005ddc8:	200b      	movs	r0, #11
1005ddca:	7188      	strb	r0, [r1, #6]
1005ddcc:	203e      	movs	r0, #62	@ 0x3e
1005ddce:	7148      	strb	r0, [r1, #5]
1005ddd0:	710c      	strb	r4, [r1, #4]
1005ddd2:	0a30      	lsrs	r0, r6, #8
1005ddd4:	7448      	strb	r0, [r1, #17]
1005ddd6:	0a28      	lsrs	r0, r5, #8
1005ddd8:	73c8      	strb	r0, [r1, #15]
1005ddda:	0a18      	lsrs	r0, r3, #8
1005dddc:	7348      	strb	r0, [r1, #13]
1005ddde:	0a10      	lsrs	r0, r2, #8
1005dde0:	72c8      	strb	r0, [r1, #11]
1005dde2:	0a38      	lsrs	r0, r7, #8
1005dde4:	7248      	strb	r0, [r1, #9]
1005dde6:	2080      	movs	r0, #128	@ 0x80
1005dde8:	f7f8 f88d 	bl	10055f06 <aci_event_fifo_push>
1005ddec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005ddee:	46c0      	nop			@ (mov r8, r8)

1005ddf0 <__arm_cp.6_0>:
1005ddf0:	20002958 	.word	0x20002958

1005ddf4 <__arm_cp.6_1>:
1005ddf4:	20002908 	.word	0x20002908

1005ddf8 <llc_conn_init_cte_ctxt_ucfg_weak>:
1005ddf8:	4770      	bx	lr

1005ddfa <LLC_cte_request_procedure_ucfg_weak>:
1005ddfa:	2000      	movs	r0, #0
1005ddfc:	4770      	bx	lr

1005ddfe <LLC_connection_cte_response_pause_resume_ucfg_weak>:
1005ddfe:	4770      	bx	lr

1005de00 <LLC_connection_cte_response_disable_ucfg_weak>:
1005de00:	4770      	bx	lr

1005de02 <llc_cte_process_rx_cte_ucfg_weak>:
1005de02:	4770      	bx	lr

1005de04 <LL_encryption>:
1005de04:	b5f0      	push	{r4, r5, r6, r7, lr}
1005de06:	b08d      	sub	sp, #52	@ 0x34
1005de08:	9309      	str	r3, [sp, #36]	@ 0x24
1005de0a:	4617      	mov	r7, r2
1005de0c:	460d      	mov	r5, r1
1005de0e:	4606      	mov	r6, r0
1005de10:	f7fe fdbb 	bl	1005c98a <LL_cpe_get_cntxt>
1005de14:	4604      	mov	r4, r0
1005de16:	9608      	str	r6, [sp, #32]
1005de18:	4630      	mov	r0, r6
1005de1a:	f7fc fefd 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005de1e:	4603      	mov	r3, r0
1005de20:	2f05      	cmp	r7, #5
1005de22:	d107      	bne.n	1005de34 <LL_encryption+0x30>
1005de24:	213d      	movs	r1, #61	@ 0x3d
1005de26:	4618      	mov	r0, r3
1005de28:	f7fd fdda 	bl	1005b9e0 <llc_conn_disconnect_link_from_cpf>
1005de2c:	27ff      	movs	r7, #255	@ 0xff
1005de2e:	4638      	mov	r0, r7
1005de30:	b00d      	add	sp, #52	@ 0x34
1005de32:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005de34:	9407      	str	r4, [sp, #28]
1005de36:	4622      	mov	r2, r4
1005de38:	3228      	adds	r2, #40	@ 0x28
1005de3a:	461e      	mov	r6, r3
1005de3c:	362c      	adds	r6, #44	@ 0x2c
1005de3e:	7830      	ldrb	r0, [r6, #0]
1005de40:	2802      	cmp	r0, #2
1005de42:	d129      	bne.n	1005de98 <LL_encryption+0x94>
1005de44:	7810      	ldrb	r0, [r2, #0]
1005de46:	1e40      	subs	r0, r0, #1
1005de48:	27ff      	movs	r7, #255	@ 0xff
1005de4a:	280b      	cmp	r0, #11
1005de4c:	d8ef      	bhi.n	1005de2e <LL_encryption+0x2a>
1005de4e:	0040      	lsls	r0, r0, #1
1005de50:	4478      	add	r0, pc
1005de52:	8880      	ldrh	r0, [r0, #4]
1005de54:	0040      	lsls	r0, r0, #1
1005de56:	4487      	add	pc, r0
1005de58:	00a4000b 	.word	0x00a4000b
1005de5c:	00c200a7 	.word	0x00c200a7
1005de60:	00d000cc 	.word	0x00d000cc
1005de64:	01370133 	.word	0x01370133
1005de68:	016f015f 	.word	0x016f015f
1005de6c:	0181017e 	.word	0x0181017e
1005de70:	200a      	movs	r0, #10
1005de72:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005de74:	7088      	strb	r0, [r1, #2]
1005de76:	27ff      	movs	r7, #255	@ 0xff
1005de78:	4638      	mov	r0, r7
1005de7a:	3004      	adds	r0, #4
1005de7c:	8008      	strh	r0, [r1, #0]
1005de7e:	2101      	movs	r1, #1
1005de80:	9808      	ldr	r0, [sp, #32]
1005de82:	4615      	mov	r5, r2
1005de84:	460a      	mov	r2, r1
1005de86:	461c      	mov	r4, r3
1005de88:	f7fe fd62 	bl	1005c950 <LL_cpe_set_blocked>
1005de8c:	4620      	mov	r0, r4
1005de8e:	f7fd fc13 	bl	1005b6b8 <llc_conn_set_tx_acl_blocked>
1005de92:	2002      	movs	r0, #2
1005de94:	7028      	strb	r0, [r5, #0]
1005de96:	e7ca      	b.n	1005de2e <LL_encryption+0x2a>
1005de98:	2f01      	cmp	r7, #1
1005de9a:	d12e      	bne.n	1005defa <LL_encryption+0xf6>
1005de9c:	2000      	movs	r0, #0
1005de9e:	7050      	strb	r0, [r2, #1]
1005dea0:	9206      	str	r2, [sp, #24]
1005dea2:	2500      	movs	r5, #0
1005dea4:	461e      	mov	r6, r3
1005dea6:	4618      	mov	r0, r3
1005dea8:	4629      	mov	r1, r5
1005deaa:	f7fd f951 	bl	1005b150 <llc_conn_get_enc_on>
1005deae:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005deb0:	7889      	ldrb	r1, [r1, #2]
1005deb2:	2903      	cmp	r1, #3
1005deb4:	d157      	bne.n	1005df66 <LL_encryption+0x162>
1005deb6:	2800      	cmp	r0, #0
1005deb8:	4633      	mov	r3, r6
1005deba:	9f07      	ldr	r7, [sp, #28]
1005debc:	d1b2      	bne.n	1005de24 <LL_encryption+0x20>
1005debe:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005dec0:	1ce0      	adds	r0, r4, #3
1005dec2:	4639      	mov	r1, r7
1005dec4:	3130      	adds	r1, #48	@ 0x30
1005dec6:	2208      	movs	r2, #8
1005dec8:	9205      	str	r2, [sp, #20]
1005deca:	4b19      	ldr	r3, [pc, #100]	@ (1005df30 <LL_encryption+0x12c>)
1005decc:	4798      	blx	r3
1005dece:	4620      	mov	r0, r4
1005ded0:	300b      	adds	r0, #11
1005ded2:	4639      	mov	r1, r7
1005ded4:	312e      	adds	r1, #46	@ 0x2e
1005ded6:	2202      	movs	r2, #2
1005ded8:	4b15      	ldr	r3, [pc, #84]	@ (1005df30 <LL_encryption+0x12c>)
1005deda:	4798      	blx	r3
1005dedc:	4620      	mov	r0, r4
1005dede:	300d      	adds	r0, #13
1005dee0:	4639      	mov	r1, r7
1005dee2:	9a05      	ldr	r2, [sp, #20]
1005dee4:	4b12      	ldr	r3, [pc, #72]	@ (1005df30 <LL_encryption+0x12c>)
1005dee6:	4798      	blx	r3
1005dee8:	3415      	adds	r4, #21
1005deea:	3720      	adds	r7, #32
1005deec:	2204      	movs	r2, #4
1005deee:	4620      	mov	r0, r4
1005def0:	4639      	mov	r1, r7
1005def2:	4b0f      	ldr	r3, [pc, #60]	@ (1005df30 <LL_encryption+0x12c>)
1005def4:	4798      	blx	r3
1005def6:	2005      	movs	r0, #5
1005def8:	e03b      	b.n	1005df72 <LL_encryption+0x16e>
1005defa:	7850      	ldrb	r0, [r2, #1]
1005defc:	27ff      	movs	r7, #255	@ 0xff
1005defe:	280d      	cmp	r0, #13
1005df00:	d895      	bhi.n	1005de2e <LL_encryption+0x2a>
1005df02:	9705      	str	r7, [sp, #20]
1005df04:	2111      	movs	r1, #17
1005df06:	0109      	lsls	r1, r1, #4
1005df08:	185f      	adds	r7, r3, r1
1005df0a:	0040      	lsls	r0, r0, #1
1005df0c:	4478      	add	r0, pc
1005df0e:	8880      	ldrh	r0, [r0, #4]
1005df10:	0040      	lsls	r0, r0, #1
1005df12:	4487      	add	pc, r0
1005df14:	0010000f 	.word	0x0010000f
1005df18:	016d0165 	.word	0x016d0165
1005df1c:	019b0176 	.word	0x019b0176
1005df20:	022001d6 	.word	0x022001d6
1005df24:	024001e9 	.word	0x024001e9
1005df28:	01fe01ed 	.word	0x01fe01ed
1005df2c:	02340214 	.word	0x02340214
1005df30:	10063771 	.word	0x10063771
1005df34:	e7b4      	b.n	1005dea0 <LL_encryption+0x9c>
1005df36:	200b      	movs	r0, #11
1005df38:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005df3a:	7088      	strb	r0, [r1, #2]
1005df3c:	2002      	movs	r0, #2
1005df3e:	7050      	strb	r0, [r2, #1]
1005df40:	27ff      	movs	r7, #255	@ 0xff
1005df42:	4638      	mov	r0, r7
1005df44:	3004      	adds	r0, #4
1005df46:	8008      	strh	r0, [r1, #0]
1005df48:	2400      	movs	r4, #0
1005df4a:	2201      	movs	r2, #1
1005df4c:	9808      	ldr	r0, [sp, #32]
1005df4e:	4621      	mov	r1, r4
1005df50:	461d      	mov	r5, r3
1005df52:	f7fe fcfd 	bl	1005c950 <LL_cpe_set_blocked>
1005df56:	4628      	mov	r0, r5
1005df58:	f7fd fbae 	bl	1005b6b8 <llc_conn_set_tx_acl_blocked>
1005df5c:	4628      	mov	r0, r5
1005df5e:	4621      	mov	r1, r4
1005df60:	f7fd fb99 	bl	1005b696 <llc_conn_set_stop_enc>
1005df64:	e763      	b.n	1005de2e <LL_encryption+0x2a>
1005df66:	2801      	cmp	r0, #1
1005df68:	4633      	mov	r3, r6
1005df6a:	d000      	beq.n	1005df6e <LL_encryption+0x16a>
1005df6c:	e75a      	b.n	1005de24 <LL_encryption+0x20>
1005df6e:	2501      	movs	r5, #1
1005df70:	4628      	mov	r0, r5
1005df72:	9f06      	ldr	r7, [sp, #24]
1005df74:	7078      	strb	r0, [r7, #1]
1005df76:	713d      	strb	r5, [r7, #4]
1005df78:	2400      	movs	r4, #0
1005df7a:	9d08      	ldr	r5, [sp, #32]
1005df7c:	4628      	mov	r0, r5
1005df7e:	4621      	mov	r1, r4
1005df80:	4622      	mov	r2, r4
1005df82:	f7fe fce5 	bl	1005c950 <LL_cpe_set_blocked>
1005df86:	4630      	mov	r0, r6
1005df88:	f7fd fb6c 	bl	1005b664 <llc_conn_set_rx_acl_blocked>
1005df8c:	4628      	mov	r0, r5
1005df8e:	4621      	mov	r1, r4
1005df90:	f7fe fcee 	bl	1005c970 <LL_cpe_set_prepare_tx_pdu>
1005df94:	2201      	movs	r2, #1
1005df96:	4628      	mov	r0, r5
1005df98:	4621      	mov	r1, r4
1005df9a:	4623      	mov	r3, r4
1005df9c:	f7fe fc9f 	bl	1005c8de <LL_cpe_set_active>
1005dfa0:	e744      	b.n	1005de2c <LL_encryption+0x28>
1005dfa2:	2003      	movs	r0, #3
1005dfa4:	7010      	strb	r0, [r2, #0]
1005dfa6:	e121      	b.n	1005e1ec <LL_encryption+0x3e8>
1005dfa8:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005dfaa:	7880      	ldrb	r0, [r0, #2]
1005dfac:	280b      	cmp	r0, #11
1005dfae:	d000      	beq.n	1005dfb2 <LL_encryption+0x1ae>
1005dfb0:	e738      	b.n	1005de24 <LL_encryption+0x20>
1005dfb2:	2004      	movs	r0, #4
1005dfb4:	7010      	strb	r0, [r2, #0]
1005dfb6:	2102      	movs	r1, #2
1005dfb8:	4618      	mov	r0, r3
1005dfba:	461d      	mov	r5, r3
1005dfbc:	f7fd fb6b 	bl	1005b696 <llc_conn_set_stop_enc>
1005dfc0:	2401      	movs	r4, #1
1005dfc2:	9e08      	ldr	r6, [sp, #32]
1005dfc4:	4630      	mov	r0, r6
1005dfc6:	4621      	mov	r1, r4
1005dfc8:	f7fe fcd2 	bl	1005c970 <LL_cpe_set_prepare_tx_pdu>
1005dfcc:	2200      	movs	r2, #0
1005dfce:	4630      	mov	r0, r6
1005dfd0:	4621      	mov	r1, r4
1005dfd2:	f7fe fcbd 	bl	1005c950 <LL_cpe_set_blocked>
1005dfd6:	4628      	mov	r0, r5
1005dfd8:	f7fd fb44 	bl	1005b664 <llc_conn_set_rx_acl_blocked>
1005dfdc:	e727      	b.n	1005de2e <LL_encryption+0x2a>
1005dfde:	200b      	movs	r0, #11
1005dfe0:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005dfe2:	7088      	strb	r0, [r1, #2]
1005dfe4:	2005      	movs	r0, #5
1005dfe6:	7010      	strb	r0, [r2, #0]
1005dfe8:	27ff      	movs	r7, #255	@ 0xff
1005dfea:	4638      	mov	r0, r7
1005dfec:	3004      	adds	r0, #4
1005dfee:	8008      	strh	r0, [r1, #0]
1005dff0:	e71d      	b.n	1005de2e <LL_encryption+0x2a>
1005dff2:	2006      	movs	r0, #6
1005dff4:	7010      	strb	r0, [r2, #0]
1005dff6:	2101      	movs	r1, #1
1005dff8:	e1d6      	b.n	1005e3a8 <LL_encryption+0x5a4>
1005dffa:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005dffc:	1ca0      	adds	r0, r4, #2
1005dffe:	9001      	str	r0, [sp, #4]
1005e000:	9705      	str	r7, [sp, #20]
1005e002:	2700      	movs	r7, #0
1005e004:	4dfd      	ldr	r5, [pc, #1012]	@ (1005e3fc <LL_encryption+0x5f8>)
1005e006:	4638      	mov	r0, r7
1005e008:	9304      	str	r3, [sp, #16]
1005e00a:	4616      	mov	r6, r2
1005e00c:	47a8      	blx	r5
1005e00e:	9002      	str	r0, [sp, #8]
1005e010:	900b      	str	r0, [sp, #44]	@ 0x2c
1005e012:	4638      	mov	r0, r7
1005e014:	47a8      	blx	r5
1005e016:	900c      	str	r0, [sp, #48]	@ 0x30
1005e018:	4638      	mov	r0, r7
1005e01a:	9f05      	ldr	r7, [sp, #20]
1005e01c:	47a8      	blx	r5
1005e01e:	9003      	str	r0, [sp, #12]
1005e020:	49fc      	ldr	r1, [pc, #1008]	@ (1005e414 <__arm_cp.0_10>)
1005e022:	8021      	strh	r1, [r4, #0]
1005e024:	900a      	str	r0, [sp, #40]	@ 0x28
1005e026:	4635      	mov	r5, r6
1005e028:	7a30      	ldrb	r0, [r6, #8]
1005e02a:	0200      	lsls	r0, r0, #8
1005e02c:	7a71      	ldrb	r1, [r6, #9]
1005e02e:	0409      	lsls	r1, r1, #16
1005e030:	1840      	adds	r0, r0, r1
1005e032:	7ab1      	ldrb	r1, [r6, #10]
1005e034:	9606      	str	r6, [sp, #24]
1005e036:	0609      	lsls	r1, r1, #24
1005e038:	1840      	adds	r0, r0, r1
1005e03a:	1cc0      	adds	r0, r0, #3
1005e03c:	9c01      	ldr	r4, [sp, #4]
1005e03e:	6020      	str	r0, [r4, #0]
1005e040:	9e07      	ldr	r6, [sp, #28]
1005e042:	4630      	mov	r0, r6
1005e044:	3033      	adds	r0, #51	@ 0x33
1005e046:	f000 fa25 	bl	1005e494 <le4ByteToInt32>
1005e04a:	6060      	str	r0, [r4, #4]
1005e04c:	9802      	ldr	r0, [sp, #8]
1005e04e:	0600      	lsls	r0, r0, #24
1005e050:	8df1      	ldrh	r1, [r6, #46]	@ 0x2e
1005e052:	0209      	lsls	r1, r1, #8
1005e054:	1808      	adds	r0, r1, r0
1005e056:	7be9      	ldrb	r1, [r5, #15]
1005e058:	1840      	adds	r0, r0, r1
1005e05a:	60a0      	str	r0, [r4, #8]
1005e05c:	4625      	mov	r5, r4
1005e05e:	ac0b      	add	r4, sp, #44	@ 0x2c
1005e060:	1c60      	adds	r0, r4, #1
1005e062:	f000 fa17 	bl	1005e494 <le4ByteToInt32>
1005e066:	60e8      	str	r0, [r5, #12]
1005e068:	9803      	ldr	r0, [sp, #12]
1005e06a:	0600      	lsls	r0, r0, #24
1005e06c:	7961      	ldrb	r1, [r4, #5]
1005e06e:	1840      	adds	r0, r0, r1
1005e070:	79a1      	ldrb	r1, [r4, #6]
1005e072:	0209      	lsls	r1, r1, #8
1005e074:	1840      	adds	r0, r0, r1
1005e076:	79e1      	ldrb	r1, [r4, #7]
1005e078:	0409      	lsls	r1, r1, #16
1005e07a:	1840      	adds	r0, r0, r1
1005e07c:	6128      	str	r0, [r5, #16]
1005e07e:	462a      	mov	r2, r5
1005e080:	ad0a      	add	r5, sp, #40	@ 0x28
1005e082:	7868      	ldrb	r0, [r5, #1]
1005e084:	78a9      	ldrb	r1, [r5, #2]
1005e086:	0209      	lsls	r1, r1, #8
1005e088:	1808      	adds	r0, r1, r0
1005e08a:	78e9      	ldrb	r1, [r5, #3]
1005e08c:	0409      	lsls	r1, r1, #16
1005e08e:	1840      	adds	r0, r0, r1
1005e090:	6150      	str	r0, [r2, #20]
1005e092:	2208      	movs	r2, #8
1005e094:	4620      	mov	r0, r4
1005e096:	4631      	mov	r1, r6
1005e098:	f005 fb6a 	bl	10063770 <char_copy>
1005e09c:	3620      	adds	r6, #32
1005e09e:	2204      	movs	r2, #4
1005e0a0:	4628      	mov	r0, r5
1005e0a2:	4631      	mov	r1, r6
1005e0a4:	f005 fb64 	bl	10063770 <char_copy>
1005e0a8:	2007      	movs	r0, #7
1005e0aa:	9906      	ldr	r1, [sp, #24]
1005e0ac:	7008      	strb	r0, [r1, #0]
1005e0ae:	2101      	movs	r1, #1
1005e0b0:	9808      	ldr	r0, [sp, #32]
1005e0b2:	460a      	mov	r2, r1
1005e0b4:	f7fe fc4c 	bl	1005c950 <LL_cpe_set_blocked>
1005e0b8:	9804      	ldr	r0, [sp, #16]
1005e0ba:	f7fd fafd 	bl	1005b6b8 <llc_conn_set_tx_acl_blocked>
1005e0be:	e6b6      	b.n	1005de2e <LL_encryption+0x2a>
1005e0c0:	2008      	movs	r0, #8
1005e0c2:	7010      	strb	r0, [r2, #0]
1005e0c4:	2704      	movs	r7, #4
1005e0c6:	e6b2      	b.n	1005de2e <LL_encryption+0x2a>
1005e0c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005e0ca:	7880      	ldrb	r0, [r0, #2]
1005e0cc:	2811      	cmp	r0, #17
1005e0ce:	d061      	beq.n	1005e194 <LL_encryption+0x390>
1005e0d0:	2807      	cmp	r0, #7
1005e0d2:	d05f      	beq.n	1005e194 <LL_encryption+0x390>
1005e0d4:	280d      	cmp	r0, #13
1005e0d6:	d05d      	beq.n	1005e194 <LL_encryption+0x390>
1005e0d8:	2804      	cmp	r0, #4
1005e0da:	9c07      	ldr	r4, [sp, #28]
1005e0dc:	d000      	beq.n	1005e0e0 <LL_encryption+0x2dc>
1005e0de:	e6a1      	b.n	1005de24 <LL_encryption+0x20>
1005e0e0:	2009      	movs	r0, #9
1005e0e2:	7010      	strb	r0, [r2, #0]
1005e0e4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005e0e6:	1cf8      	adds	r0, r7, #3
1005e0e8:	4621      	mov	r1, r4
1005e0ea:	3108      	adds	r1, #8
1005e0ec:	2208      	movs	r2, #8
1005e0ee:	461d      	mov	r5, r3
1005e0f0:	f005 fb3e 	bl	10063770 <char_copy>
1005e0f4:	370b      	adds	r7, #11
1005e0f6:	4621      	mov	r1, r4
1005e0f8:	3124      	adds	r1, #36	@ 0x24
1005e0fa:	2204      	movs	r2, #4
1005e0fc:	4638      	mov	r0, r7
1005e0fe:	f005 fb37 	bl	10063770 <char_copy>
1005e102:	6734      	str	r4, [r6, #112]	@ 0x70
1005e104:	2101      	movs	r1, #1
1005e106:	2200      	movs	r2, #0
1005e108:	9808      	ldr	r0, [sp, #32]
1005e10a:	f7fe fc21 	bl	1005c950 <LL_cpe_set_blocked>
1005e10e:	4628      	mov	r0, r5
1005e110:	f7fd faa8 	bl	1005b664 <llc_conn_set_rx_acl_blocked>
1005e114:	2705      	movs	r7, #5
1005e116:	e68a      	b.n	1005de2e <LL_encryption+0x2a>
1005e118:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005e11a:	7880      	ldrb	r0, [r0, #2]
1005e11c:	2811      	cmp	r0, #17
1005e11e:	d046      	beq.n	1005e1ae <LL_encryption+0x3aa>
1005e120:	280d      	cmp	r0, #13
1005e122:	d044      	beq.n	1005e1ae <LL_encryption+0x3aa>
1005e124:	2805      	cmp	r0, #5
1005e126:	d000      	beq.n	1005e12a <LL_encryption+0x326>
1005e128:	e67c      	b.n	1005de24 <LL_encryption+0x20>
1005e12a:	4614      	mov	r4, r2
1005e12c:	2101      	movs	r1, #1
1005e12e:	9808      	ldr	r0, [sp, #32]
1005e130:	f7fe fc1e 	bl	1005c970 <LL_cpe_set_prepare_tx_pdu>
1005e134:	200a      	movs	r0, #10
1005e136:	e00c      	b.n	1005e152 <LL_encryption+0x34e>
1005e138:	2006      	movs	r0, #6
1005e13a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005e13c:	7088      	strb	r0, [r1, #2]
1005e13e:	27ff      	movs	r7, #255	@ 0xff
1005e140:	4638      	mov	r0, r7
1005e142:	3004      	adds	r0, #4
1005e144:	8008      	strh	r0, [r1, #0]
1005e146:	2102      	movs	r1, #2
1005e148:	4618      	mov	r0, r3
1005e14a:	4614      	mov	r4, r2
1005e14c:	f7fd fa92 	bl	1005b674 <llc_conn_set_start_enc>
1005e150:	200b      	movs	r0, #11
1005e152:	7020      	strb	r0, [r4, #0]
1005e154:	e66b      	b.n	1005de2e <LL_encryption+0x2a>
1005e156:	200c      	movs	r0, #12
1005e158:	7010      	strb	r0, [r2, #0]
1005e15a:	e0c7      	b.n	1005e2ec <LL_encryption+0x4e8>
1005e15c:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005e15e:	7880      	ldrb	r0, [r0, #2]
1005e160:	2806      	cmp	r0, #6
1005e162:	d000      	beq.n	1005e166 <LL_encryption+0x362>
1005e164:	e65e      	b.n	1005de24 <LL_encryption+0x20>
1005e166:	2000      	movs	r0, #0
1005e168:	4615      	mov	r5, r2
1005e16a:	7010      	strb	r0, [r2, #0]
1005e16c:	48c4      	ldr	r0, [pc, #784]	@ (1005e480 <__arm_cp.0_0>)
1005e16e:	6800      	ldr	r0, [r0, #0]
1005e170:	212c      	movs	r1, #44	@ 0x2c
1005e172:	5c40      	ldrb	r0, [r0, r1]
1005e174:	07c0      	lsls	r0, r0, #31
1005e176:	0ec1      	lsrs	r1, r0, #27
1005e178:	206f      	movs	r0, #111	@ 0x6f
1005e17a:	43c0      	mvns	r0, r0
1005e17c:	4048      	eors	r0, r1
1005e17e:	461c      	mov	r4, r3
1005e180:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005e182:	7929      	ldrb	r1, [r5, #4]
1005e184:	b2c0      	uxtb	r0, r0
1005e186:	2901      	cmp	r1, #1
1005e188:	d000      	beq.n	1005e18c <LL_encryption+0x388>
1005e18a:	e111      	b.n	1005e3b0 <LL_encryption+0x5ac>
1005e18c:	4611      	mov	r1, r2
1005e18e:	f000 f9bf 	bl	1005e510 <hci_encryption_key_refresh_complete_event_push>
1005e192:	e111      	b.n	1005e3b8 <LL_encryption+0x5b4>
1005e194:	48ba      	ldr	r0, [pc, #744]	@ (1005e480 <__arm_cp.0_0>)
1005e196:	6800      	ldr	r0, [r0, #0]
1005e198:	212c      	movs	r1, #44	@ 0x2c
1005e19a:	5c40      	ldrb	r0, [r0, r1]
1005e19c:	0100      	lsls	r0, r0, #4
1005e19e:	43c0      	mvns	r0, r0
1005e1a0:	2180      	movs	r1, #128	@ 0x80
1005e1a2:	4301      	orrs	r1, r0
1005e1a4:	2090      	movs	r0, #144	@ 0x90
1005e1a6:	4008      	ands	r0, r1
1005e1a8:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005e1aa:	211a      	movs	r1, #26
1005e1ac:	e00b      	b.n	1005e1c6 <LL_encryption+0x3c2>
1005e1ae:	48b4      	ldr	r0, [pc, #720]	@ (1005e480 <__arm_cp.0_0>)
1005e1b0:	6800      	ldr	r0, [r0, #0]
1005e1b2:	212c      	movs	r1, #44	@ 0x2c
1005e1b4:	5c40      	ldrb	r0, [r0, r1]
1005e1b6:	0100      	lsls	r0, r0, #4
1005e1b8:	43c0      	mvns	r0, r0
1005e1ba:	2180      	movs	r1, #128	@ 0x80
1005e1bc:	4301      	orrs	r1, r0
1005e1be:	2090      	movs	r0, #144	@ 0x90
1005e1c0:	4008      	ands	r0, r1
1005e1c2:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005e1c4:	2106      	movs	r1, #6
1005e1c6:	461c      	mov	r4, r3
1005e1c8:	2300      	movs	r3, #0
1005e1ca:	f000 f96f 	bl	1005e4ac <hci_encryption_change_event_push>
1005e1ce:	4620      	mov	r0, r4
1005e1d0:	f7fc ff05 	bl	1005afde <llc_conn_clr_tx_acl_blocked>
1005e1d4:	4620      	mov	r0, r4
1005e1d6:	f7fc fef1 	bl	1005afbc <llc_conn_clr_rx_acl_blocked>
1005e1da:	2101      	movs	r1, #1
1005e1dc:	9808      	ldr	r0, [sp, #32]
1005e1de:	e0f4      	b.n	1005e3ca <LL_encryption+0x5c6>
1005e1e0:	2003      	movs	r0, #3
1005e1e2:	7050      	strb	r0, [r2, #1]
1005e1e4:	2101      	movs	r1, #1
1005e1e6:	4618      	mov	r0, r3
1005e1e8:	f7fd fa55 	bl	1005b696 <llc_conn_set_stop_enc>
1005e1ec:	270b      	movs	r7, #11
1005e1ee:	e61e      	b.n	1005de2e <LL_encryption+0x2a>
1005e1f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005e1f2:	7880      	ldrb	r0, [r0, #2]
1005e1f4:	280b      	cmp	r0, #11
1005e1f6:	d000      	beq.n	1005e1fa <LL_encryption+0x3f6>
1005e1f8:	e614      	b.n	1005de24 <LL_encryption+0x20>
1005e1fa:	2004      	movs	r0, #4
1005e1fc:	7050      	strb	r0, [r2, #1]
1005e1fe:	2703      	movs	r7, #3
1005e200:	e615      	b.n	1005de2e <LL_encryption+0x2a>
1005e202:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005e204:	7880      	ldrb	r0, [r0, #2]
1005e206:	2803      	cmp	r0, #3
1005e208:	9f05      	ldr	r7, [sp, #20]
1005e20a:	9e07      	ldr	r6, [sp, #28]
1005e20c:	d000      	beq.n	1005e210 <LL_encryption+0x40c>
1005e20e:	e609      	b.n	1005de24 <LL_encryption+0x20>
1005e210:	2005      	movs	r0, #5
1005e212:	7050      	strb	r0, [r2, #1]
1005e214:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005e216:	1ce0      	adds	r0, r4, #3
1005e218:	4631      	mov	r1, r6
1005e21a:	3130      	adds	r1, #48	@ 0x30
1005e21c:	2508      	movs	r5, #8
1005e21e:	462a      	mov	r2, r5
1005e220:	4b9b      	ldr	r3, [pc, #620]	@ (1005e490 <__arm_cp.0_4>)
1005e222:	4798      	blx	r3
1005e224:	4620      	mov	r0, r4
1005e226:	300b      	adds	r0, #11
1005e228:	4631      	mov	r1, r6
1005e22a:	312e      	adds	r1, #46	@ 0x2e
1005e22c:	2202      	movs	r2, #2
1005e22e:	4b98      	ldr	r3, [pc, #608]	@ (1005e490 <__arm_cp.0_4>)
1005e230:	4798      	blx	r3
1005e232:	4620      	mov	r0, r4
1005e234:	300d      	adds	r0, #13
1005e236:	4631      	mov	r1, r6
1005e238:	462a      	mov	r2, r5
1005e23a:	4d95      	ldr	r5, [pc, #596]	@ (1005e490 <__arm_cp.0_4>)
1005e23c:	47a8      	blx	r5
1005e23e:	3415      	adds	r4, #21
1005e240:	3620      	adds	r6, #32
1005e242:	2204      	movs	r2, #4
1005e244:	4620      	mov	r0, r4
1005e246:	4631      	mov	r1, r6
1005e248:	47a8      	blx	r5
1005e24a:	e0ac      	b.n	1005e3a6 <LL_encryption+0x5a2>
1005e24c:	2400      	movs	r4, #0
1005e24e:	9403      	str	r4, [sp, #12]
1005e250:	4d8e      	ldr	r5, [pc, #568]	@ (1005e48c <__arm_cp.0_3>)
1005e252:	4620      	mov	r0, r4
1005e254:	9304      	str	r3, [sp, #16]
1005e256:	9206      	str	r2, [sp, #24]
1005e258:	47a8      	blx	r5
1005e25a:	900b      	str	r0, [sp, #44]	@ 0x2c
1005e25c:	4620      	mov	r0, r4
1005e25e:	47a8      	blx	r5
1005e260:	900c      	str	r0, [sp, #48]	@ 0x30
1005e262:	4620      	mov	r0, r4
1005e264:	47a8      	blx	r5
1005e266:	2604      	movs	r6, #4
1005e268:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005e26a:	70a6      	strb	r6, [r4, #2]
1005e26c:	210d      	movs	r1, #13
1005e26e:	7061      	strb	r1, [r4, #1]
1005e270:	2103      	movs	r1, #3
1005e272:	7021      	strb	r1, [r4, #0]
1005e274:	900a      	str	r0, [sp, #40]	@ 0x28
1005e276:	1ce1      	adds	r1, r4, #3
1005e278:	ad0b      	add	r5, sp, #44	@ 0x2c
1005e27a:	2208      	movs	r2, #8
1005e27c:	9202      	str	r2, [sp, #8]
1005e27e:	4b84      	ldr	r3, [pc, #528]	@ (1005e490 <__arm_cp.0_4>)
1005e280:	4628      	mov	r0, r5
1005e282:	4798      	blx	r3
1005e284:	340b      	adds	r4, #11
1005e286:	af0a      	add	r7, sp, #40	@ 0x28
1005e288:	4638      	mov	r0, r7
1005e28a:	4621      	mov	r1, r4
1005e28c:	4632      	mov	r2, r6
1005e28e:	4b80      	ldr	r3, [pc, #512]	@ (1005e490 <__arm_cp.0_4>)
1005e290:	4798      	blx	r3
1005e292:	9c07      	ldr	r4, [sp, #28]
1005e294:	4621      	mov	r1, r4
1005e296:	3108      	adds	r1, #8
1005e298:	4628      	mov	r0, r5
1005e29a:	9a02      	ldr	r2, [sp, #8]
1005e29c:	4d7c      	ldr	r5, [pc, #496]	@ (1005e490 <__arm_cp.0_4>)
1005e29e:	47a8      	blx	r5
1005e2a0:	3424      	adds	r4, #36	@ 0x24
1005e2a2:	4638      	mov	r0, r7
1005e2a4:	4621      	mov	r1, r4
1005e2a6:	4632      	mov	r2, r6
1005e2a8:	47a8      	blx	r5
1005e2aa:	2006      	movs	r0, #6
1005e2ac:	9906      	ldr	r1, [sp, #24]
1005e2ae:	7048      	strb	r0, [r1, #1]
1005e2b0:	2201      	movs	r2, #1
1005e2b2:	9808      	ldr	r0, [sp, #32]
1005e2b4:	9903      	ldr	r1, [sp, #12]
1005e2b6:	f7fe fb4b 	bl	1005c950 <LL_cpe_set_blocked>
1005e2ba:	9804      	ldr	r0, [sp, #16]
1005e2bc:	f7fd f9fc 	bl	1005b6b8 <llc_conn_set_tx_acl_blocked>
1005e2c0:	e0db      	b.n	1005e47a <__arm_cp.0_10+0x66>
1005e2c2:	4870      	ldr	r0, [pc, #448]	@ (1005e484 <__arm_cp.0_1>)
1005e2c4:	6800      	ldr	r0, [r0, #0]
1005e2c6:	213d      	movs	r1, #61	@ 0x3d
1005e2c8:	5c41      	ldrb	r1, [r0, r1]
1005e2ca:	0689      	lsls	r1, r1, #26
1005e2cc:	d504      	bpl.n	1005e2d8 <LL_encryption+0x4d4>
1005e2ce:	303d      	adds	r0, #61	@ 0x3d
1005e2d0:	7a40      	ldrb	r0, [r0, #9]
1005e2d2:	06c0      	lsls	r0, r0, #27
1005e2d4:	d500      	bpl.n	1005e2d8 <LL_encryption+0x4d4>
1005e2d6:	e093      	b.n	1005e400 <LL_encryption+0x5fc>
1005e2d8:	2100      	movs	r1, #0
1005e2da:	9808      	ldr	r0, [sp, #32]
1005e2dc:	4614      	mov	r4, r2
1005e2de:	f7fe fb47 	bl	1005c970 <LL_cpe_set_prepare_tx_pdu>
1005e2e2:	4620      	mov	r0, r4
1005e2e4:	270d      	movs	r7, #13
1005e2e6:	e0c7      	b.n	1005e478 <__arm_cp.0_10+0x64>
1005e2e8:	2009      	movs	r0, #9
1005e2ea:	7050      	strb	r0, [r2, #1]
1005e2ec:	2706      	movs	r7, #6
1005e2ee:	e59e      	b.n	1005de2e <LL_encryption+0x2a>
1005e2f0:	2006      	movs	r0, #6
1005e2f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005e2f4:	7088      	strb	r0, [r1, #2]
1005e2f6:	200b      	movs	r0, #11
1005e2f8:	7050      	strb	r0, [r2, #1]
1005e2fa:	25ff      	movs	r5, #255	@ 0xff
1005e2fc:	4628      	mov	r0, r5
1005e2fe:	3004      	adds	r0, #4
1005e300:	8008      	strh	r0, [r1, #0]
1005e302:	2401      	movs	r4, #1
1005e304:	4618      	mov	r0, r3
1005e306:	4621      	mov	r1, r4
1005e308:	f7fd f9b4 	bl	1005b674 <llc_conn_set_start_enc>
1005e30c:	703c      	strb	r4, [r7, #0]
1005e30e:	462f      	mov	r7, r5
1005e310:	e58d      	b.n	1005de2e <LL_encryption+0x2a>
1005e312:	2400      	movs	r4, #0
1005e314:	7054      	strb	r4, [r2, #1]
1005e316:	485a      	ldr	r0, [pc, #360]	@ (1005e480 <__arm_cp.0_0>)
1005e318:	6800      	ldr	r0, [r0, #0]
1005e31a:	212c      	movs	r1, #44	@ 0x2c
1005e31c:	5c40      	ldrb	r0, [r0, r1]
1005e31e:	07c0      	lsls	r0, r0, #31
1005e320:	0ec1      	lsrs	r1, r0, #27
1005e322:	206f      	movs	r0, #111	@ 0x6f
1005e324:	43c0      	mvns	r0, r0
1005e326:	4048      	eors	r0, r1
1005e328:	4611      	mov	r1, r2
1005e32a:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005e32c:	7909      	ldrb	r1, [r1, #4]
1005e32e:	b2c0      	uxtb	r0, r0
1005e330:	2901      	cmp	r1, #1
1005e332:	d14e      	bne.n	1005e3d2 <LL_encryption+0x5ce>
1005e334:	4611      	mov	r1, r2
1005e336:	461e      	mov	r6, r3
1005e338:	f000 f8ea 	bl	1005e510 <hci_encryption_key_refresh_complete_event_push>
1005e33c:	e04e      	b.n	1005e3dc <LL_encryption+0x5d8>
1005e33e:	4618      	mov	r0, r3
1005e340:	4615      	mov	r5, r2
1005e342:	f7fc fe4c 	bl	1005afde <llc_conn_clr_tx_acl_blocked>
1005e346:	2400      	movs	r4, #0
1005e348:	2201      	movs	r2, #1
1005e34a:	9808      	ldr	r0, [sp, #32]
1005e34c:	4621      	mov	r1, r4
1005e34e:	f7fe fadd 	bl	1005c90c <LL_cpe_clr_active>
1005e352:	706c      	strb	r4, [r5, #1]
1005e354:	e091      	b.n	1005e47a <__arm_cp.0_10+0x66>
1005e356:	78d0      	ldrb	r0, [r2, #3]
1005e358:	2801      	cmp	r0, #1
1005e35a:	d110      	bne.n	1005e37e <LL_encryption+0x57a>
1005e35c:	2005      	movs	r0, #5
1005e35e:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005e360:	7088      	strb	r0, [r1, #2]
1005e362:	9807      	ldr	r0, [sp, #28]
1005e364:	6730      	str	r0, [r6, #112]	@ 0x70
1005e366:	27ff      	movs	r7, #255	@ 0xff
1005e368:	4638      	mov	r0, r7
1005e36a:	3004      	adds	r0, #4
1005e36c:	8008      	strh	r0, [r1, #0]
1005e36e:	2100      	movs	r1, #0
1005e370:	4618      	mov	r0, r3
1005e372:	4614      	mov	r4, r2
1005e374:	f7fd f97e 	bl	1005b674 <llc_conn_set_start_enc>
1005e378:	2008      	movs	r0, #8
1005e37a:	7060      	strb	r0, [r4, #1]
1005e37c:	e557      	b.n	1005de2e <LL_encryption+0x2a>
1005e37e:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005e380:	4619      	mov	r1, r3
1005e382:	461c      	mov	r4, r3
1005e384:	4615      	mov	r5, r2
1005e386:	f000 f8f5 	bl	1005e574 <llc_enc_prepare_reject>
1005e38a:	200c      	movs	r0, #12
1005e38c:	7068      	strb	r0, [r5, #1]
1005e38e:	4620      	mov	r0, r4
1005e390:	f7fc fe14 	bl	1005afbc <llc_conn_clr_rx_acl_blocked>
1005e394:	e071      	b.n	1005e47a <__arm_cp.0_10+0x66>
1005e396:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005e398:	7880      	ldrb	r0, [r0, #2]
1005e39a:	2806      	cmp	r0, #6
1005e39c:	9f05      	ldr	r7, [sp, #20]
1005e39e:	d000      	beq.n	1005e3a2 <LL_encryption+0x59e>
1005e3a0:	e540      	b.n	1005de24 <LL_encryption+0x20>
1005e3a2:	200a      	movs	r0, #10
1005e3a4:	7050      	strb	r0, [r2, #1]
1005e3a6:	2100      	movs	r1, #0
1005e3a8:	9808      	ldr	r0, [sp, #32]
1005e3aa:	f7fe fae1 	bl	1005c970 <LL_cpe_set_prepare_tx_pdu>
1005e3ae:	e53e      	b.n	1005de2e <LL_encryption+0x2a>
1005e3b0:	2100      	movs	r1, #0
1005e3b2:	2301      	movs	r3, #1
1005e3b4:	f000 f87a 	bl	1005e4ac <hci_encryption_change_event_push>
1005e3b8:	9d08      	ldr	r5, [sp, #32]
1005e3ba:	4620      	mov	r0, r4
1005e3bc:	f7fc fe0f 	bl	1005afde <llc_conn_clr_tx_acl_blocked>
1005e3c0:	4620      	mov	r0, r4
1005e3c2:	f7fc fdfb 	bl	1005afbc <llc_conn_clr_rx_acl_blocked>
1005e3c6:	2101      	movs	r1, #1
1005e3c8:	4628      	mov	r0, r5
1005e3ca:	460a      	mov	r2, r1
1005e3cc:	f7fe fa9e 	bl	1005c90c <LL_cpe_clr_active>
1005e3d0:	e52d      	b.n	1005de2e <LL_encryption+0x2a>
1005e3d2:	2100      	movs	r1, #0
1005e3d4:	461e      	mov	r6, r3
1005e3d6:	2301      	movs	r3, #1
1005e3d8:	f000 f868 	bl	1005e4ac <hci_encryption_change_event_push>
1005e3dc:	4630      	mov	r0, r6
1005e3de:	9e08      	ldr	r6, [sp, #32]
1005e3e0:	703c      	strb	r4, [r7, #0]
1005e3e2:	4604      	mov	r4, r0
1005e3e4:	f7fc fdfb 	bl	1005afde <llc_conn_clr_tx_acl_blocked>
1005e3e8:	4620      	mov	r0, r4
1005e3ea:	f7fc fde7 	bl	1005afbc <llc_conn_clr_rx_acl_blocked>
1005e3ee:	2201      	movs	r2, #1
1005e3f0:	4630      	mov	r0, r6
1005e3f2:	4629      	mov	r1, r5
1005e3f4:	f7fe fa8a 	bl	1005c90c <LL_cpe_clr_active>
1005e3f8:	e03f      	b.n	1005e47a <__arm_cp.0_10+0x66>
1005e3fa:	46c0      	nop			@ (mov r8, r8)
1005e3fc:	10063aa3 	.word	0x10063aa3
1005e400:	481f      	ldr	r0, [pc, #124]	@ (1005e480 <__arm_cp.0_0>)
1005e402:	6800      	ldr	r0, [r0, #0]
1005e404:	212c      	movs	r1, #44	@ 0x2c
1005e406:	5c40      	ldrb	r0, [r0, r1]
1005e408:	07c0      	lsls	r0, r0, #31
1005e40a:	0ec0      	lsrs	r0, r0, #27
1005e40c:	9206      	str	r2, [sp, #24]
1005e40e:	d003      	beq.n	1005e418 <__arm_cp.0_10+0x4>
1005e410:	2219      	movs	r2, #25
1005e412:	e002      	b.n	1005e41a <__arm_cp.0_10+0x6>

1005e414 <__arm_cp.0_10>:
1005e414:	00001703 	.word	0x00001703
1005e418:	220a      	movs	r2, #10
1005e41a:	9d07      	ldr	r5, [sp, #28]
1005e41c:	216f      	movs	r1, #111	@ 0x6f
1005e41e:	43c9      	mvns	r1, r1
1005e420:	4048      	eors	r0, r1
1005e422:	b2c1      	uxtb	r1, r0
1005e424:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
1005e426:	9007      	str	r0, [sp, #28]
1005e428:	8f5c      	ldrh	r4, [r3, #58]	@ 0x3a
1005e42a:	4817      	ldr	r0, [pc, #92]	@ (1005e488 <__arm_cp.0_2>)
1005e42c:	6800      	ldr	r0, [r0, #0]
1005e42e:	6900      	ldr	r0, [r0, #16]
1005e430:	2304      	movs	r3, #4
1005e432:	9109      	str	r1, [sp, #36]	@ 0x24
1005e434:	9308      	str	r3, [sp, #32]
1005e436:	f7f7 fcc9 	bl	10055dcc <aci_event_fifo_push_header>
1005e43a:	2707      	movs	r7, #7
1005e43c:	2800      	cmp	r0, #0
1005e43e:	d01a      	beq.n	1005e476 <__arm_cp.0_10+0x62>
1005e440:	4606      	mov	r6, r0
1005e442:	7204      	strb	r4, [r0, #8]
1005e444:	0a20      	lsrs	r0, r4, #8
1005e446:	7270      	strb	r0, [r6, #9]
1005e448:	4630      	mov	r0, r6
1005e44a:	300a      	adds	r0, #10
1005e44c:	3530      	adds	r5, #48	@ 0x30
1005e44e:	2208      	movs	r2, #8
1005e450:	4629      	mov	r1, r5
1005e452:	f7f4 ff6f 	bl	10053334 <BLEPLAT_MemCpy>
1005e456:	9907      	ldr	r1, [sp, #28]
1005e458:	0a08      	lsrs	r0, r1, #8
1005e45a:	74f0      	strb	r0, [r6, #19]
1005e45c:	74b1      	strb	r1, [r6, #18]
1005e45e:	2005      	movs	r0, #5
1005e460:	71f0      	strb	r0, [r6, #7]
1005e462:	200d      	movs	r0, #13
1005e464:	71b0      	strb	r0, [r6, #6]
1005e466:	203e      	movs	r0, #62	@ 0x3e
1005e468:	7170      	strb	r0, [r6, #5]
1005e46a:	9808      	ldr	r0, [sp, #32]
1005e46c:	7130      	strb	r0, [r6, #4]
1005e46e:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005e470:	4631      	mov	r1, r6
1005e472:	f7f7 fd48 	bl	10055f06 <aci_event_fifo_push>
1005e476:	9806      	ldr	r0, [sp, #24]
1005e478:	7047      	strb	r7, [r0, #1]
1005e47a:	9f05      	ldr	r7, [sp, #20]
1005e47c:	e4d7      	b.n	1005de2e <LL_encryption+0x2a>
1005e47e:	46c0      	nop			@ (mov r8, r8)

1005e480 <__arm_cp.0_0>:
1005e480:	20002904 	.word	0x20002904

1005e484 <__arm_cp.0_1>:
1005e484:	20002958 	.word	0x20002958

1005e488 <__arm_cp.0_2>:
1005e488:	20002908 	.word	0x20002908

1005e48c <__arm_cp.0_3>:
1005e48c:	10063aa3 	.word	0x10063aa3

1005e490 <__arm_cp.0_4>:
1005e490:	10063771 	.word	0x10063771

1005e494 <le4ByteToInt32>:
1005e494:	7801      	ldrb	r1, [r0, #0]
1005e496:	7842      	ldrb	r2, [r0, #1]
1005e498:	0212      	lsls	r2, r2, #8
1005e49a:	1851      	adds	r1, r2, r1
1005e49c:	7882      	ldrb	r2, [r0, #2]
1005e49e:	0412      	lsls	r2, r2, #16
1005e4a0:	1889      	adds	r1, r1, r2
1005e4a2:	78c0      	ldrb	r0, [r0, #3]
1005e4a4:	0600      	lsls	r0, r0, #24
1005e4a6:	1808      	adds	r0, r1, r0
1005e4a8:	4770      	bx	lr
	...

1005e4ac <hci_encryption_change_event_push>:
1005e4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005e4ae:	461e      	mov	r6, r3
1005e4b0:	4615      	mov	r5, r2
1005e4b2:	460f      	mov	r7, r1
1005e4b4:	4604      	mov	r4, r0
1005e4b6:	06c0      	lsls	r0, r0, #27
1005e4b8:	d406      	bmi.n	1005e4c8 <hci_encryption_change_event_push+0x1c>
1005e4ba:	4813      	ldr	r0, [pc, #76]	@ (1005e508 <__arm_cp.2_0>)
1005e4bc:	6800      	ldr	r0, [r0, #0]
1005e4be:	2136      	movs	r1, #54	@ 0x36
1005e4c0:	5640      	ldrsb	r0, [r0, r1]
1005e4c2:	2800      	cmp	r0, #0
1005e4c4:	d404      	bmi.n	1005e4d0 <hci_encryption_change_event_push+0x24>
1005e4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005e4c8:	20bf      	movs	r0, #191	@ 0xbf
1005e4ca:	4004      	ands	r4, r0
1005e4cc:	2206      	movs	r2, #6
1005e4ce:	e000      	b.n	1005e4d2 <hci_encryption_change_event_push+0x26>
1005e4d0:	2216      	movs	r2, #22
1005e4d2:	480e      	ldr	r0, [pc, #56]	@ (1005e50c <__arm_cp.2_1>)
1005e4d4:	6800      	ldr	r0, [r0, #0]
1005e4d6:	0761      	lsls	r1, r4, #29
1005e4d8:	0ec9      	lsrs	r1, r1, #27
1005e4da:	1840      	adds	r0, r0, r1
1005e4dc:	6900      	ldr	r0, [r0, #16]
1005e4de:	2302      	movs	r3, #2
1005e4e0:	4621      	mov	r1, r4
1005e4e2:	f7f7 fc73 	bl	10055dcc <aci_event_fifo_push_header>
1005e4e6:	2800      	cmp	r0, #0
1005e4e8:	d0ed      	beq.n	1005e4c6 <hci_encryption_change_event_push+0x1a>
1005e4ea:	4601      	mov	r1, r0
1005e4ec:	7205      	strb	r5, [r0, #8]
1005e4ee:	7286      	strb	r6, [r0, #10]
1005e4f0:	71c7      	strb	r7, [r0, #7]
1005e4f2:	2004      	movs	r0, #4
1005e4f4:	7188      	strb	r0, [r1, #6]
1005e4f6:	2208      	movs	r2, #8
1005e4f8:	714a      	strb	r2, [r1, #5]
1005e4fa:	7108      	strb	r0, [r1, #4]
1005e4fc:	0a28      	lsrs	r0, r5, #8
1005e4fe:	7248      	strb	r0, [r1, #9]
1005e500:	4620      	mov	r0, r4
1005e502:	f7f7 fd00 	bl	10055f06 <aci_event_fifo_push>
1005e506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005e508 <__arm_cp.2_0>:
1005e508:	20002958 	.word	0x20002958

1005e50c <__arm_cp.2_1>:
1005e50c:	20002908 	.word	0x20002908

1005e510 <hci_encryption_key_refresh_complete_event_push>:
1005e510:	b5b0      	push	{r4, r5, r7, lr}
1005e512:	460d      	mov	r5, r1
1005e514:	4604      	mov	r4, r0
1005e516:	06c0      	lsls	r0, r0, #27
1005e518:	d406      	bmi.n	1005e528 <hci_encryption_key_refresh_complete_event_push+0x18>
1005e51a:	4814      	ldr	r0, [pc, #80]	@ (1005e56c <__arm_cp.3_0>)
1005e51c:	6800      	ldr	r0, [r0, #0]
1005e51e:	213b      	movs	r1, #59	@ 0x3b
1005e520:	5640      	ldrsb	r0, [r0, r1]
1005e522:	2800      	cmp	r0, #0
1005e524:	d404      	bmi.n	1005e530 <hci_encryption_key_refresh_complete_event_push+0x20>
1005e526:	bdb0      	pop	{r4, r5, r7, pc}
1005e528:	20bf      	movs	r0, #191	@ 0xbf
1005e52a:	4004      	ands	r4, r0
1005e52c:	2207      	movs	r2, #7
1005e52e:	e000      	b.n	1005e532 <hci_encryption_key_refresh_complete_event_push+0x22>
1005e530:	2217      	movs	r2, #23
1005e532:	480f      	ldr	r0, [pc, #60]	@ (1005e570 <__arm_cp.3_1>)
1005e534:	6800      	ldr	r0, [r0, #0]
1005e536:	0761      	lsls	r1, r4, #29
1005e538:	0ec9      	lsrs	r1, r1, #27
1005e53a:	1840      	adds	r0, r0, r1
1005e53c:	6900      	ldr	r0, [r0, #16]
1005e53e:	2302      	movs	r3, #2
1005e540:	4621      	mov	r1, r4
1005e542:	f7f7 fc43 	bl	10055dcc <aci_event_fifo_push_header>
1005e546:	2800      	cmp	r0, #0
1005e548:	d0ed      	beq.n	1005e526 <hci_encryption_key_refresh_complete_event_push+0x16>
1005e54a:	4601      	mov	r1, r0
1005e54c:	7205      	strb	r5, [r0, #8]
1005e54e:	2000      	movs	r0, #0
1005e550:	71c8      	strb	r0, [r1, #7]
1005e552:	2003      	movs	r0, #3
1005e554:	7188      	strb	r0, [r1, #6]
1005e556:	2030      	movs	r0, #48	@ 0x30
1005e558:	7148      	strb	r0, [r1, #5]
1005e55a:	2004      	movs	r0, #4
1005e55c:	7108      	strb	r0, [r1, #4]
1005e55e:	0a28      	lsrs	r0, r5, #8
1005e560:	7248      	strb	r0, [r1, #9]
1005e562:	4620      	mov	r0, r4
1005e564:	f7f7 fccf 	bl	10055f06 <aci_event_fifo_push>
1005e568:	bdb0      	pop	{r4, r5, r7, pc}
1005e56a:	46c0      	nop			@ (mov r8, r8)

1005e56c <__arm_cp.3_0>:
1005e56c:	20002958 	.word	0x20002958

1005e570 <__arm_cp.3_1>:
1005e570:	20002908 	.word	0x20002908

1005e574 <llc_enc_prepare_reject>:
1005e574:	2203      	movs	r2, #3
1005e576:	7002      	strb	r2, [r0, #0]
1005e578:	2397      	movs	r3, #151	@ 0x97
1005e57a:	005b      	lsls	r3, r3, #1
1005e57c:	5cc9      	ldrb	r1, [r1, r3]
1005e57e:	0749      	lsls	r1, r1, #29
1005e580:	d403      	bmi.n	1005e58a <llc_enc_prepare_reject+0x16>
1005e582:	2306      	movs	r3, #6
1005e584:	210d      	movs	r1, #13
1005e586:	2202      	movs	r2, #2
1005e588:	e003      	b.n	1005e592 <llc_enc_prepare_reject+0x1e>
1005e58a:	2106      	movs	r1, #6
1005e58c:	7101      	strb	r1, [r0, #4]
1005e58e:	2111      	movs	r1, #17
1005e590:	4613      	mov	r3, r2
1005e592:	70c3      	strb	r3, [r0, #3]
1005e594:	7081      	strb	r1, [r0, #2]
1005e596:	7042      	strb	r2, [r0, #1]
1005e598:	4770      	bx	lr

1005e59a <LL_Get_LTK>:
1005e59a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005e59c:	4614      	mov	r4, r2
1005e59e:	4606      	mov	r6, r0
1005e5a0:	4608      	mov	r0, r1
1005e5a2:	f7fc fb47 	bl	1005ac34 <llc_conn_get_cntxt_per_p_from_handle>
1005e5a6:	2130      	movs	r1, #48	@ 0x30
1005e5a8:	5641      	ldrsb	r1, [r0, r1]
1005e5aa:	2900      	cmp	r1, #0
1005e5ac:	d405      	bmi.n	1005e5ba <LL_Get_LTK+0x20>
1005e5ae:	302c      	adds	r0, #44	@ 0x2c
1005e5b0:	7800      	ldrb	r0, [r0, #0]
1005e5b2:	2802      	cmp	r0, #2
1005e5b4:	d103      	bne.n	1005e5be <LL_Get_LTK+0x24>
1005e5b6:	2512      	movs	r5, #18
1005e5b8:	e018      	b.n	1005e5ec <LL_Get_LTK+0x52>
1005e5ba:	2502      	movs	r5, #2
1005e5bc:	e016      	b.n	1005e5ec <LL_Get_LTK+0x52>
1005e5be:	b2cf      	uxtb	r7, r1
1005e5c0:	2500      	movs	r5, #0
1005e5c2:	4638      	mov	r0, r7
1005e5c4:	4629      	mov	r1, r5
1005e5c6:	f7fe f9d3 	bl	1005c970 <LL_cpe_set_prepare_tx_pdu>
1005e5ca:	4638      	mov	r0, r7
1005e5cc:	4629      	mov	r1, r5
1005e5ce:	f7fe f9dc 	bl	1005c98a <LL_cpe_get_cntxt>
1005e5d2:	4601      	mov	r1, r0
1005e5d4:	302b      	adds	r0, #43	@ 0x2b
1005e5d6:	2e00      	cmp	r6, #0
1005e5d8:	d001      	beq.n	1005e5de <LL_Get_LTK+0x44>
1005e5da:	7005      	strb	r5, [r0, #0]
1005e5dc:	e006      	b.n	1005e5ec <LL_Get_LTK+0x52>
1005e5de:	2201      	movs	r2, #1
1005e5e0:	7002      	strb	r2, [r0, #0]
1005e5e2:	3110      	adds	r1, #16
1005e5e4:	2210      	movs	r2, #16
1005e5e6:	4620      	mov	r0, r4
1005e5e8:	f005 f8c2 	bl	10063770 <char_copy>
1005e5ec:	4628      	mov	r0, r5
1005e5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005e5f0 <LL_feature_exchange>:
1005e5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e5f2:	b085      	sub	sp, #20
1005e5f4:	461c      	mov	r4, r3
1005e5f6:	4615      	mov	r5, r2
1005e5f8:	460e      	mov	r6, r1
1005e5fa:	4607      	mov	r7, r0
1005e5fc:	f7fe f9c5 	bl	1005c98a <LL_cpe_get_cntxt>
1005e600:	9003      	str	r0, [sp, #12]
1005e602:	9702      	str	r7, [sp, #8]
1005e604:	4638      	mov	r0, r7
1005e606:	f7fc fb07 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005e60a:	4607      	mov	r7, r0
1005e60c:	20ff      	movs	r0, #255	@ 0xff
1005e60e:	2d06      	cmp	r5, #6
1005e610:	d900      	bls.n	1005e614 <LL_feature_exchange+0x24>
1005e612:	e099      	b.n	1005e748 <LL_feature_exchange+0x158>
1005e614:	9604      	str	r6, [sp, #16]
1005e616:	2197      	movs	r1, #151	@ 0x97
1005e618:	0049      	lsls	r1, r1, #1
1005e61a:	187b      	adds	r3, r7, r1
1005e61c:	463e      	mov	r6, r7
1005e61e:	362c      	adds	r6, #44	@ 0x2c
1005e620:	447d      	add	r5, pc
1005e622:	792d      	ldrb	r5, [r5, #4]
1005e624:	006d      	lsls	r5, r5, #1
1005e626:	44af      	add	pc, r5
1005e628:	298f0803 	.word	0x298f0803
1005e62c:	004a8f8f 	.word	0x004a8f8f
1005e630:	9904      	ldr	r1, [sp, #16]
1005e632:	2901      	cmp	r1, #1
1005e634:	d160      	bne.n	1005e6f8 <LL_feature_exchange+0x108>
1005e636:	2009      	movs	r0, #9
1005e638:	e086      	b.n	1005e748 <LL_feature_exchange+0x158>
1005e63a:	78a1      	ldrb	r1, [r4, #2]
1005e63c:	290e      	cmp	r1, #14
1005e63e:	d002      	beq.n	1005e646 <LL_feature_exchange+0x56>
1005e640:	2908      	cmp	r1, #8
1005e642:	d000      	beq.n	1005e646 <LL_feature_exchange+0x56>
1005e644:	e080      	b.n	1005e748 <LL_feature_exchange+0x158>
1005e646:	1ce4      	adds	r4, r4, #3
1005e648:	9903      	ldr	r1, [sp, #12]
1005e64a:	3108      	adds	r1, #8
1005e64c:	4605      	mov	r5, r0
1005e64e:	2208      	movs	r2, #8
1005e650:	4620      	mov	r0, r4
1005e652:	461e      	mov	r6, r3
1005e654:	f005 f88c 	bl	10063770 <char_copy>
1005e658:	2205      	movs	r2, #5
1005e65a:	4630      	mov	r0, r6
1005e65c:	4621      	mov	r1, r4
1005e65e:	f7f4 fe69 	bl	10053334 <BLEPLAT_MemCpy>
1005e662:	9e02      	ldr	r6, [sp, #8]
1005e664:	4630      	mov	r0, r6
1005e666:	9c04      	ldr	r4, [sp, #16]
1005e668:	4621      	mov	r1, r4
1005e66a:	f7fe f981 	bl	1005c970 <LL_cpe_set_prepare_tx_pdu>
1005e66e:	2203      	movs	r2, #3
1005e670:	2300      	movs	r3, #0
1005e672:	4630      	mov	r0, r6
1005e674:	4621      	mov	r1, r4
1005e676:	f7fe f932 	bl	1005c8de <LL_cpe_set_active>
1005e67a:	e01e      	b.n	1005e6ba <LL_feature_exchange+0xca>
1005e67c:	78a1      	ldrb	r1, [r4, #2]
1005e67e:	2907      	cmp	r1, #7
1005e680:	d046      	beq.n	1005e710 <LL_feature_exchange+0x120>
1005e682:	2909      	cmp	r1, #9
1005e684:	d160      	bne.n	1005e748 <LL_feature_exchange+0x158>
1005e686:	4605      	mov	r5, r0
1005e688:	1ce4      	adds	r4, r4, #3
1005e68a:	2205      	movs	r2, #5
1005e68c:	4618      	mov	r0, r3
1005e68e:	4621      	mov	r1, r4
1005e690:	f7f4 fe50 	bl	10053334 <BLEPLAT_MemCpy>
1005e694:	9803      	ldr	r0, [sp, #12]
1005e696:	7c40      	ldrb	r0, [r0, #17]
1005e698:	2800      	cmp	r0, #0
1005e69a:	d005      	beq.n	1005e6a8 <LL_feature_exchange+0xb8>
1005e69c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
1005e69e:	2080      	movs	r0, #128	@ 0x80
1005e6a0:	2100      	movs	r1, #0
1005e6a2:	4623      	mov	r3, r4
1005e6a4:	f006 fa74 	bl	10064b90 <hci_le_read_remote_features_complete_event_push_noinline>
1005e6a8:	6e30      	ldr	r0, [r6, #96]	@ 0x60
1005e6aa:	2110      	movs	r1, #16
1005e6ac:	4301      	orrs	r1, r0
1005e6ae:	6631      	str	r1, [r6, #96]	@ 0x60
1005e6b0:	2203      	movs	r2, #3
1005e6b2:	9802      	ldr	r0, [sp, #8]
1005e6b4:	9904      	ldr	r1, [sp, #16]
1005e6b6:	f7fe f929 	bl	1005c90c <LL_cpe_clr_active>
1005e6ba:	4628      	mov	r0, r5
1005e6bc:	e044      	b.n	1005e748 <LL_feature_exchange+0x158>
1005e6be:	9002      	str	r0, [sp, #8]
1005e6c0:	2009      	movs	r0, #9
1005e6c2:	9001      	str	r0, [sp, #4]
1005e6c4:	7060      	strb	r0, [r4, #1]
1005e6c6:	2003      	movs	r0, #3
1005e6c8:	7020      	strb	r0, [r4, #0]
1005e6ca:	1ce7      	adds	r7, r4, #3
1005e6cc:	4638      	mov	r0, r7
1005e6ce:	f000 f83d 	bl	1005e74c <LL_Get_Supported_Features>
1005e6d2:	79a0      	ldrb	r0, [r4, #6]
1005e6d4:	21f7      	movs	r1, #247	@ 0xf7
1005e6d6:	4001      	ands	r1, r0
1005e6d8:	71a1      	strb	r1, [r4, #6]
1005e6da:	2508      	movs	r5, #8
1005e6dc:	4638      	mov	r0, r7
1005e6de:	9f03      	ldr	r7, [sp, #12]
1005e6e0:	4639      	mov	r1, r7
1005e6e2:	462a      	mov	r2, r5
1005e6e4:	f005 f844 	bl	10063770 <char_copy>
1005e6e8:	9804      	ldr	r0, [sp, #16]
1005e6ea:	2801      	cmp	r0, #1
1005e6ec:	d108      	bne.n	1005e700 <LL_feature_exchange+0x110>
1005e6ee:	7830      	ldrb	r0, [r6, #0]
1005e6f0:	2802      	cmp	r0, #2
1005e6f2:	d126      	bne.n	1005e742 <LL_feature_exchange+0x152>
1005e6f4:	70a5      	strb	r5, [r4, #2]
1005e6f6:	e026      	b.n	1005e746 <LL_feature_exchange+0x156>
1005e6f8:	4604      	mov	r4, r0
1005e6fa:	2203      	movs	r2, #3
1005e6fc:	9802      	ldr	r0, [sp, #8]
1005e6fe:	e01c      	b.n	1005e73a <LL_feature_exchange+0x14a>
1005e700:	9801      	ldr	r0, [sp, #4]
1005e702:	70a0      	strb	r0, [r4, #2]
1005e704:	78e0      	ldrb	r0, [r4, #3]
1005e706:	7a39      	ldrb	r1, [r7, #8]
1005e708:	4001      	ands	r1, r0
1005e70a:	70e1      	strb	r1, [r4, #3]
1005e70c:	7439      	strb	r1, [r7, #16]
1005e70e:	e01a      	b.n	1005e746 <LL_feature_exchange+0x156>
1005e710:	7831      	ldrb	r1, [r6, #0]
1005e712:	2903      	cmp	r1, #3
1005e714:	d118      	bne.n	1005e748 <LL_feature_exchange+0x158>
1005e716:	4604      	mov	r4, r0
1005e718:	7818      	ldrb	r0, [r3, #0]
1005e71a:	21f7      	movs	r1, #247	@ 0xf7
1005e71c:	4001      	ands	r1, r0
1005e71e:	7019      	strb	r1, [r3, #0]
1005e720:	9b03      	ldr	r3, [sp, #12]
1005e722:	7c58      	ldrb	r0, [r3, #17]
1005e724:	2800      	cmp	r0, #0
1005e726:	d005      	beq.n	1005e734 <LL_feature_exchange+0x144>
1005e728:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
1005e72a:	3308      	adds	r3, #8
1005e72c:	2080      	movs	r0, #128	@ 0x80
1005e72e:	211a      	movs	r1, #26
1005e730:	f006 fa2e 	bl	10064b90 <hci_le_read_remote_features_complete_event_push_noinline>
1005e734:	2203      	movs	r2, #3
1005e736:	9802      	ldr	r0, [sp, #8]
1005e738:	9904      	ldr	r1, [sp, #16]
1005e73a:	f7fe f8e7 	bl	1005c90c <LL_cpe_clr_active>
1005e73e:	4620      	mov	r0, r4
1005e740:	e002      	b.n	1005e748 <LL_feature_exchange+0x158>
1005e742:	200e      	movs	r0, #14
1005e744:	70a0      	strb	r0, [r4, #2]
1005e746:	9802      	ldr	r0, [sp, #8]
1005e748:	b005      	add	sp, #20
1005e74a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005e74c <LL_Get_Supported_Features>:
1005e74c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005e74e:	9000      	str	r0, [sp, #0]
1005e750:	f7fb fd8c 	bl	1005a26c <data_length_extension_csr_ucfg_weak>
1005e754:	4605      	mov	r5, r0
1005e756:	f7fd ffe0 	bl	1005c71a <llc_priv_controller_privacy_csr_ucfg_weak>
1005e75a:	b2c0      	uxtb	r0, r0
1005e75c:	21c0      	movs	r1, #192	@ 0xc0
1005e75e:	4341      	muls	r1, r0
1005e760:	0628      	lsls	r0, r5, #24
1005e762:	0cc5      	lsrs	r5, r0, #19
1005e764:	430d      	orrs	r5, r1
1005e766:	2009      	movs	r0, #9
1005e768:	0206      	lsls	r6, r0, #8
1005e76a:	f7f1 f879 	bl	1004f860 <phy_upd_csr_ucfg>
1005e76e:	b2c7      	uxtb	r7, r0
1005e770:	4377      	muls	r7, r6
1005e772:	432f      	orrs	r7, r5
1005e774:	f002 f906 	bl	10060984 <ext_adv_scan_enabled_ucfg_weak>
1005e778:	0305      	lsls	r5, r0, #12
1005e77a:	433d      	orrs	r5, r7
1005e77c:	4e2c      	ldr	r6, [pc, #176]	@ (1005e830 <__arm_cp.1_0>)
1005e77e:	47b0      	blx	r6
1005e780:	b2c0      	uxtb	r0, r0
1005e782:	4f2c      	ldr	r7, [pc, #176]	@ (1005e834 <__arm_cp.1_1>)
1005e784:	4347      	muls	r7, r0
1005e786:	432f      	orrs	r7, r5
1005e788:	200d      	movs	r0, #13
1005e78a:	0685      	lsls	r5, r0, #26
1005e78c:	f7fd ffb2 	bl	1005c6f4 <cis_csr_ucfg_weak>
1005e790:	b2c4      	uxtb	r4, r0
1005e792:	436c      	muls	r4, r5
1005e794:	433c      	orrs	r4, r7
1005e796:	2073      	movs	r0, #115	@ 0x73
1005e798:	0445      	lsls	r5, r0, #17
1005e79a:	f7fb fd0b 	bl	1005a1b4 <cte_csr_ucfg_weak>
1005e79e:	b2c7      	uxtb	r7, r0
1005e7a0:	436f      	muls	r7, r5
1005e7a2:	4327      	orrs	r7, r4
1005e7a4:	f7fb fd06 	bl	1005a1b4 <cte_csr_ucfg_weak>
1005e7a8:	4605      	mov	r5, r0
1005e7aa:	47b0      	blx	r6
1005e7ac:	4028      	ands	r0, r5
1005e7ae:	b2c0      	uxtb	r0, r0
1005e7b0:	2503      	movs	r5, #3
1005e7b2:	04ec      	lsls	r4, r5, #19
1005e7b4:	4344      	muls	r4, r0
1005e7b6:	433c      	orrs	r4, r7
1005e7b8:	f7fd ff9a 	bl	1005c6f0 <bis_csr_ucfg_weak>
1005e7bc:	0780      	lsls	r0, r0, #30
1005e7be:	4247      	negs	r7, r0
1005e7c0:	4327      	orrs	r7, r4
1005e7c2:	f002 f8cd 	bl	10060960 <llc_get_channel_sel_algo2_enabled>
1005e7c6:	0380      	lsls	r0, r0, #14
1005e7c8:	4338      	orrs	r0, r7
1005e7ca:	491b      	ldr	r1, [pc, #108]	@ (1005e838 <__arm_cp.1_2>)
1005e7cc:	4301      	orrs	r1, r0
1005e7ce:	9101      	str	r1, [sp, #4]
1005e7d0:	f7fb fd4e 	bl	1005a270 <pcl_csr_ucfg_weak>
1005e7d4:	b2c0      	uxtb	r0, r0
1005e7d6:	240e      	movs	r4, #14
1005e7d8:	4344      	muls	r4, r0
1005e7da:	f7fb fbf6 	bl	10059fca <chc_csr_ucfg_weak>
1005e7de:	0600      	lsls	r0, r0, #24
1005e7e0:	0c47      	lsrs	r7, r0, #17
1005e7e2:	4327      	orrs	r7, r4
1005e7e4:	47b0      	blx	r6
1005e7e6:	21f9      	movs	r1, #249	@ 0xf9
1005e7e8:	0109      	lsls	r1, r1, #4
1005e7ea:	0104      	lsls	r4, r0, #4
1005e7ec:	400c      	ands	r4, r1
1005e7ee:	433c      	orrs	r4, r7
1005e7f0:	022e      	lsls	r6, r5, #8
1005e7f2:	f002 f8c7 	bl	10060984 <ext_adv_scan_enabled_ucfg_weak>
1005e7f6:	4605      	mov	r5, r0
1005e7f8:	4375      	muls	r5, r6
1005e7fa:	4325      	orrs	r5, r4
1005e7fc:	2001      	movs	r0, #1
1005e7fe:	02c4      	lsls	r4, r0, #11
1005e800:	f7fb fd3a 	bl	1005a278 <scan_csr_ucfg_weak>
1005e804:	0600      	lsls	r0, r0, #24
1005e806:	0b00      	lsrs	r0, r0, #12
1005e808:	1904      	adds	r4, r0, r4
1005e80a:	f7fd ff7f 	bl	1005c70c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005e80e:	b2c0      	uxtb	r0, r0
1005e810:	4360      	muls	r0, r4
1005e812:	4328      	orrs	r0, r5
1005e814:	2161      	movs	r1, #97	@ 0x61
1005e816:	4301      	orrs	r1, r0
1005e818:	4808      	ldr	r0, [pc, #32]	@ (1005e83c <__arm_cp.1_3>)
1005e81a:	6800      	ldr	r0, [r0, #0]
1005e81c:	6a00      	ldr	r0, [r0, #32]
1005e81e:	4008      	ands	r0, r1
1005e820:	9002      	str	r0, [sp, #8]
1005e822:	a901      	add	r1, sp, #4
1005e824:	2208      	movs	r2, #8
1005e826:	9800      	ldr	r0, [sp, #0]
1005e828:	f7f4 fd84 	bl	10053334 <BLEPLAT_MemCpy>
1005e82c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005e82e:	46c0      	nop			@ (mov r8, r8)

1005e830 <__arm_cp.1_0>:
1005e830:	1005c709 	.word	0x1005c709

1005e834 <__arm_cp.1_1>:
1005e834:	03002000 	.word	0x03002000

1005e838 <__arm_cp.1_2>:
1005e838:	0800001d 	.word	0x0800001d

1005e83c <__arm_cp.1_3>:
1005e83c:	20002958 	.word	0x20002958

1005e840 <LL_Read_Remote_Used_Features>:
1005e840:	b570      	push	{r4, r5, r6, lr}
1005e842:	4604      	mov	r4, r0
1005e844:	4608      	mov	r0, r1
1005e846:	f7fc f9f5 	bl	1005ac34 <llc_conn_get_cntxt_per_p_from_handle>
1005e84a:	2800      	cmp	r0, #0
1005e84c:	d01c      	beq.n	1005e888 <LL_Read_Remote_Used_Features+0x48>
1005e84e:	4606      	mov	r6, r0
1005e850:	362c      	adds	r6, #44	@ 0x2c
1005e852:	7831      	ldrb	r1, [r6, #0]
1005e854:	2903      	cmp	r1, #3
1005e856:	d107      	bne.n	1005e868 <LL_Read_Remote_Used_Features+0x28>
1005e858:	2197      	movs	r1, #151	@ 0x97
1005e85a:	0049      	lsls	r1, r1, #1
1005e85c:	1840      	adds	r0, r0, r1
1005e85e:	7800      	ldrb	r0, [r0, #0]
1005e860:	0700      	lsls	r0, r0, #28
1005e862:	d401      	bmi.n	1005e868 <LL_Read_Remote_Used_Features+0x28>
1005e864:	241a      	movs	r4, #26
1005e866:	e024      	b.n	1005e8b2 <LL_Read_Remote_Used_Features+0x72>
1005e868:	7930      	ldrb	r0, [r6, #4]
1005e86a:	2101      	movs	r1, #1
1005e86c:	f7fe f829 	bl	1005c8c2 <LL_cpe_get_active_status>
1005e870:	2800      	cmp	r0, #0
1005e872:	d00d      	beq.n	1005e890 <LL_Read_Remote_Used_Features+0x50>
1005e874:	2c00      	cmp	r4, #0
1005e876:	d109      	bne.n	1005e88c <LL_Read_Remote_Used_Features+0x4c>
1005e878:	7930      	ldrb	r0, [r6, #4]
1005e87a:	2101      	movs	r1, #1
1005e87c:	f7fe fe4a 	bl	1005d514 <LL_cpe_conn_get_proc_id_from_sm>
1005e880:	2803      	cmp	r0, #3
1005e882:	d103      	bne.n	1005e88c <LL_Read_Remote_Used_Features+0x4c>
1005e884:	2400      	movs	r4, #0
1005e886:	e014      	b.n	1005e8b2 <LL_Read_Remote_Used_Features+0x72>
1005e888:	2402      	movs	r4, #2
1005e88a:	e012      	b.n	1005e8b2 <LL_Read_Remote_Used_Features+0x72>
1005e88c:	243a      	movs	r4, #58	@ 0x3a
1005e88e:	e010      	b.n	1005e8b2 <LL_Read_Remote_Used_Features+0x72>
1005e890:	7930      	ldrb	r0, [r6, #4]
1005e892:	2501      	movs	r5, #1
1005e894:	4629      	mov	r1, r5
1005e896:	f7fe f878 	bl	1005c98a <LL_cpe_get_cntxt>
1005e89a:	7444      	strb	r4, [r0, #17]
1005e89c:	7930      	ldrb	r0, [r6, #4]
1005e89e:	4629      	mov	r1, r5
1005e8a0:	f7fe f866 	bl	1005c970 <LL_cpe_set_prepare_tx_pdu>
1005e8a4:	7930      	ldrb	r0, [r6, #4]
1005e8a6:	2203      	movs	r2, #3
1005e8a8:	2400      	movs	r4, #0
1005e8aa:	4629      	mov	r1, r5
1005e8ac:	4623      	mov	r3, r4
1005e8ae:	f7fe f816 	bl	1005c8de <LL_cpe_set_active>
1005e8b2:	4620      	mov	r0, r4
1005e8b4:	bd70      	pop	{r4, r5, r6, pc}

1005e8b6 <LLC_update_le_ping_params>:
1005e8b6:	b5b0      	push	{r4, r5, r7, lr}
1005e8b8:	4615      	mov	r5, r2
1005e8ba:	460c      	mov	r4, r1
1005e8bc:	f7fc f9ac 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005e8c0:	2185      	movs	r1, #133	@ 0x85
1005e8c2:	0049      	lsls	r1, r1, #1
1005e8c4:	5a43      	ldrh	r3, [r0, r1]
1005e8c6:	2d00      	cmp	r5, #0
1005e8c8:	461a      	mov	r2, r3
1005e8ca:	d000      	beq.n	1005e8ce <LLC_update_le_ping_params+0x18>
1005e8cc:	4622      	mov	r2, r4
1005e8ce:	1841      	adds	r1, r0, r1
1005e8d0:	8b0c      	ldrh	r4, [r1, #24]
1005e8d2:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
1005e8d4:	4365      	muls	r5, r4
1005e8d6:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
1005e8d8:	300a      	adds	r0, #10
1005e8da:	4368      	muls	r0, r5
1005e8dc:	0b00      	lsrs	r0, r0, #12
1005e8de:	b284      	uxth	r4, r0
1005e8e0:	1d64      	adds	r4, r4, #5
1005e8e2:	4294      	cmp	r4, r2
1005e8e4:	d300      	bcc.n	1005e8e8 <LLC_update_le_ping_params+0x32>
1005e8e6:	4622      	mov	r2, r4
1005e8e8:	b294      	uxth	r4, r2
1005e8ea:	42a3      	cmp	r3, r4
1005e8ec:	d00b      	beq.n	1005e906 <LLC_update_le_ping_params+0x50>
1005e8ee:	8048      	strh	r0, [r1, #2]
1005e8f0:	800a      	strh	r2, [r1, #0]
1005e8f2:	7908      	ldrb	r0, [r1, #4]
1005e8f4:	2801      	cmp	r0, #1
1005e8f6:	d006      	beq.n	1005e906 <LLC_update_le_ping_params+0x50>
1005e8f8:	2002      	movs	r0, #2
1005e8fa:	7108      	strb	r0, [r1, #4]
1005e8fc:	2012      	movs	r0, #18
1005e8fe:	f004 fdaf 	bl	10063460 <tsk_notify_idx>
1005e902:	f7f3 ff30 	bl	10052766 <BLE_STACK_ProcessRequest>
1005e906:	bdb0      	pop	{r4, r5, r7, pc}

1005e908 <LLC_init_le_ping_params>:
1005e908:	b5b0      	push	{r4, r5, r7, lr}
1005e90a:	2185      	movs	r1, #133	@ 0x85
1005e90c:	004a      	lsls	r2, r1, #1
1005e90e:	1881      	adds	r1, r0, r2
1005e910:	8b0b      	ldrh	r3, [r1, #24]
1005e912:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
1005e914:	435c      	muls	r4, r3
1005e916:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
1005e918:	330a      	adds	r3, #10
1005e91a:	4363      	muls	r3, r4
1005e91c:	0b1b      	lsrs	r3, r3, #12
1005e91e:	b29c      	uxth	r4, r3
1005e920:	4d07      	ldr	r5, [pc, #28]	@ (1005e940 <__arm_cp.3_0>)
1005e922:	42ac      	cmp	r4, r5
1005e924:	d800      	bhi.n	1005e928 <LLC_init_le_ping_params+0x20>
1005e926:	462c      	mov	r4, r5
1005e928:	1d64      	adds	r4, r4, #5
1005e92a:	5284      	strh	r4, [r0, r2]
1005e92c:	2001      	movs	r0, #1
1005e92e:	7108      	strb	r0, [r1, #4]
1005e930:	804b      	strh	r3, [r1, #2]
1005e932:	2012      	movs	r0, #18
1005e934:	f004 fd94 	bl	10063460 <tsk_notify_idx>
1005e938:	f7f3 ff15 	bl	10052766 <BLE_STACK_ProcessRequest>
1005e93c:	bdb0      	pop	{r4, r5, r7, pc}
1005e93e:	46c0      	nop			@ (mov r8, r8)

1005e940 <__arm_cp.3_0>:
1005e940:	00000bb3 	.word	0x00000bb3

1005e944 <LLC_authenticated_payload_timeout_processing>:
1005e944:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e946:	b089      	sub	sp, #36	@ 0x24
1005e948:	2400      	movs	r4, #0
1005e94a:	4620      	mov	r0, r4
1005e94c:	f7fc f964 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005e950:	9000      	str	r0, [sp, #0]
1005e952:	2001      	movs	r0, #1
1005e954:	9008      	str	r0, [sp, #32]
1005e956:	4843      	ldr	r0, [pc, #268]	@ (1005ea64 <__arm_cp.5_0>)
1005e958:	6800      	ldr	r0, [r0, #0]
1005e95a:	2134      	movs	r1, #52	@ 0x34
1005e95c:	5c40      	ldrb	r0, [r0, r1]
1005e95e:	4284      	cmp	r4, r0
1005e960:	d300      	bcc.n	1005e964 <LLC_authenticated_payload_timeout_processing+0x20>
1005e962:	e07d      	b.n	1005ea60 <LLC_authenticated_payload_timeout_processing+0x11c>
1005e964:	204d      	movs	r0, #77	@ 0x4d
1005e966:	0080      	lsls	r0, r0, #2
1005e968:	9405      	str	r4, [sp, #20]
1005e96a:	4360      	muls	r0, r4
1005e96c:	9900      	ldr	r1, [sp, #0]
1005e96e:	180c      	adds	r4, r1, r0
1005e970:	202c      	movs	r0, #44	@ 0x2c
1005e972:	5c20      	ldrb	r0, [r4, r0]
1005e974:	21fe      	movs	r1, #254	@ 0xfe
1005e976:	4001      	ands	r1, r0
1005e978:	2902      	cmp	r1, #2
1005e97a:	d16e      	bne.n	1005ea5a <LLC_authenticated_payload_timeout_processing+0x116>
1005e97c:	2101      	movs	r1, #1
1005e97e:	9e00      	ldr	r6, [sp, #0]
1005e980:	4630      	mov	r0, r6
1005e982:	9107      	str	r1, [sp, #28]
1005e984:	f7fc fbe4 	bl	1005b150 <llc_conn_get_enc_on>
1005e988:	4605      	mov	r5, r0
1005e98a:	2100      	movs	r1, #0
1005e98c:	4630      	mov	r0, r6
1005e98e:	9101      	str	r1, [sp, #4]
1005e990:	f7fc fbde 	bl	1005b150 <llc_conn_get_enc_on>
1005e994:	1e41      	subs	r1, r0, #1
1005e996:	4188      	sbcs	r0, r1
1005e998:	2d00      	cmp	r5, #0
1005e99a:	9908      	ldr	r1, [sp, #32]
1005e99c:	9104      	str	r1, [sp, #16]
1005e99e:	d100      	bne.n	1005e9a2 <LLC_authenticated_payload_timeout_processing+0x5e>
1005e9a0:	9004      	str	r0, [sp, #16]
1005e9a2:	2043      	movs	r0, #67	@ 0x43
1005e9a4:	0080      	lsls	r0, r0, #2
1005e9a6:	1820      	adds	r0, r4, r0
1005e9a8:	9003      	str	r0, [sp, #12]
1005e9aa:	2085      	movs	r0, #133	@ 0x85
1005e9ac:	0040      	lsls	r0, r0, #1
1005e9ae:	1820      	adds	r0, r4, r0
1005e9b0:	9002      	str	r0, [sp, #8]
1005e9b2:	2087      	movs	r0, #135	@ 0x87
1005e9b4:	0040      	lsls	r0, r0, #1
1005e9b6:	1823      	adds	r3, r4, r0
1005e9b8:	9f08      	ldr	r7, [sp, #32]
1005e9ba:	9306      	str	r3, [sp, #24]
1005e9bc:	781c      	ldrb	r4, [r3, #0]
1005e9be:	26f0      	movs	r6, #240	@ 0xf0
1005e9c0:	4026      	ands	r6, r4
1005e9c2:	250f      	movs	r5, #15
1005e9c4:	4025      	ands	r5, r4
1005e9c6:	2d03      	cmp	r5, #3
1005e9c8:	d01f      	beq.n	1005ea0a <LLC_authenticated_payload_timeout_processing+0xc6>
1005e9ca:	2d02      	cmp	r5, #2
1005e9cc:	d00b      	beq.n	1005e9e6 <LLC_authenticated_payload_timeout_processing+0xa2>
1005e9ce:	2d01      	cmp	r5, #1
1005e9d0:	d12b      	bne.n	1005ea2a <LLC_authenticated_payload_timeout_processing+0xe6>
1005e9d2:	9804      	ldr	r0, [sp, #16]
1005e9d4:	2800      	cmp	r0, #0
1005e9d6:	d02c      	beq.n	1005ea32 <LLC_authenticated_payload_timeout_processing+0xee>
1005e9d8:	2012      	movs	r0, #18
1005e9da:	2101      	movs	r1, #1
1005e9dc:	f004 fd52 	bl	10063484 <tsk_wait_resource_idx>
1005e9e0:	9b06      	ldr	r3, [sp, #24]
1005e9e2:	2502      	movs	r5, #2
1005e9e4:	e025      	b.n	1005ea32 <LLC_authenticated_payload_timeout_processing+0xee>
1005e9e6:	9803      	ldr	r0, [sp, #12]
1005e9e8:	8800      	ldrh	r0, [r0, #0]
1005e9ea:	9902      	ldr	r1, [sp, #8]
1005e9ec:	8809      	ldrh	r1, [r1, #0]
1005e9ee:	1a08      	subs	r0, r1, r0
1005e9f0:	230a      	movs	r3, #10
1005e9f2:	4343      	muls	r3, r0
1005e9f4:	481c      	ldr	r0, [pc, #112]	@ (1005ea68 <__arm_cp.5_1>)
1005e9f6:	6800      	ldr	r0, [r0, #0]
1005e9f8:	9905      	ldr	r1, [sp, #20]
1005e9fa:	b2c9      	uxtb	r1, r1
1005e9fc:	30b0      	adds	r0, #176	@ 0xb0
1005e9fe:	2201      	movs	r2, #1
1005ea00:	f004 fdd7 	bl	100635b2 <CST_start>
1005ea04:	9b06      	ldr	r3, [sp, #24]
1005ea06:	2503      	movs	r5, #3
1005ea08:	e013      	b.n	1005ea32 <LLC_authenticated_payload_timeout_processing+0xee>
1005ea0a:	06a0      	lsls	r0, r4, #26
1005ea0c:	d511      	bpl.n	1005ea32 <LLC_authenticated_payload_timeout_processing+0xee>
1005ea0e:	9804      	ldr	r0, [sp, #16]
1005ea10:	2800      	cmp	r0, #0
1005ea12:	d00c      	beq.n	1005ea2e <LLC_authenticated_payload_timeout_processing+0xea>
1005ea14:	9805      	ldr	r0, [sp, #20]
1005ea16:	b2c0      	uxtb	r0, r0
1005ea18:	f000 f828 	bl	1005ea6c <LLC_authenticated_payload_timeout_start_le_ping>
1005ea1c:	2800      	cmp	r0, #0
1005ea1e:	d001      	beq.n	1005ea24 <LLC_authenticated_payload_timeout_processing+0xe0>
1005ea20:	26d0      	movs	r6, #208	@ 0xd0
1005ea22:	4026      	ands	r6, r4
1005ea24:	9808      	ldr	r0, [sp, #32]
1005ea26:	9b06      	ldr	r3, [sp, #24]
1005ea28:	e004      	b.n	1005ea34 <LLC_authenticated_payload_timeout_processing+0xf0>
1005ea2a:	9801      	ldr	r0, [sp, #4]
1005ea2c:	e002      	b.n	1005ea34 <LLC_authenticated_payload_timeout_processing+0xf0>
1005ea2e:	26d0      	movs	r6, #208	@ 0xd0
1005ea30:	4026      	ands	r6, r4
1005ea32:	9808      	ldr	r0, [sp, #32]
1005ea34:	f3ef 8110 	mrs	r1, PRIMASK
1005ea38:	b672      	cpsid	i
1005ea3a:	7819      	ldrb	r1, [r3, #0]
1005ea3c:	428c      	cmp	r4, r1
1005ea3e:	d103      	bne.n	1005ea48 <LLC_authenticated_payload_timeout_processing+0x104>
1005ea40:	432e      	orrs	r6, r5
1005ea42:	701e      	strb	r6, [r3, #0]
1005ea44:	2100      	movs	r1, #0
1005ea46:	e002      	b.n	1005ea4e <LLC_authenticated_payload_timeout_processing+0x10a>
1005ea48:	9907      	ldr	r1, [sp, #28]
1005ea4a:	400f      	ands	r7, r1
1005ea4c:	4639      	mov	r1, r7
1005ea4e:	1e4a      	subs	r2, r1, #1
1005ea50:	4191      	sbcs	r1, r2
1005ea52:	b662      	cpsie	i
1005ea54:	2700      	movs	r7, #0
1005ea56:	4208      	tst	r0, r1
1005ea58:	d1b0      	bne.n	1005e9bc <LLC_authenticated_payload_timeout_processing+0x78>
1005ea5a:	9c05      	ldr	r4, [sp, #20]
1005ea5c:	1c64      	adds	r4, r4, #1
1005ea5e:	e77a      	b.n	1005e956 <LLC_authenticated_payload_timeout_processing+0x12>
1005ea60:	b009      	add	sp, #36	@ 0x24
1005ea62:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ea64 <__arm_cp.5_0>:
1005ea64:	20002904 	.word	0x20002904

1005ea68 <__arm_cp.5_1>:
1005ea68:	20002958 	.word	0x20002958

1005ea6c <LLC_authenticated_payload_timeout_start_le_ping>:
1005ea6c:	b570      	push	{r4, r5, r6, lr}
1005ea6e:	4605      	mov	r5, r0
1005ea70:	2101      	movs	r1, #1
1005ea72:	f7fd ff26 	bl	1005c8c2 <LL_cpe_get_active_status>
1005ea76:	4604      	mov	r4, r0
1005ea78:	2801      	cmp	r0, #1
1005ea7a:	d104      	bne.n	1005ea86 <LLC_authenticated_payload_timeout_start_le_ping+0x1a>
1005ea7c:	2012      	movs	r0, #18
1005ea7e:	2101      	movs	r1, #1
1005ea80:	f004 fd00 	bl	10063484 <tsk_wait_resource_idx>
1005ea84:	e00a      	b.n	1005ea9c <LLC_authenticated_payload_timeout_start_le_ping+0x30>
1005ea86:	2601      	movs	r6, #1
1005ea88:	4628      	mov	r0, r5
1005ea8a:	4631      	mov	r1, r6
1005ea8c:	f7fd ff70 	bl	1005c970 <LL_cpe_set_prepare_tx_pdu>
1005ea90:	2208      	movs	r2, #8
1005ea92:	2300      	movs	r3, #0
1005ea94:	4628      	mov	r0, r5
1005ea96:	4631      	mov	r1, r6
1005ea98:	f7fd ff21 	bl	1005c8de <LL_cpe_set_active>
1005ea9c:	4260      	negs	r0, r4
1005ea9e:	4160      	adcs	r0, r4
1005eaa0:	bd70      	pop	{r4, r5, r6, pc}
	...

1005eaa4 <LLC_authenticated_payload_timeout_cb>:
1005eaa4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005eaa6:	4604      	mov	r4, r0
1005eaa8:	f7fc f8b6 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005eaac:	4605      	mov	r5, r0
1005eaae:	202c      	movs	r0, #44	@ 0x2c
1005eab0:	5c28      	ldrb	r0, [r5, r0]
1005eab2:	21fe      	movs	r1, #254	@ 0xfe
1005eab4:	4001      	ands	r1, r0
1005eab6:	2902      	cmp	r1, #2
1005eab8:	d15b      	bne.n	1005eb72 <LLC_authenticated_payload_timeout_cb+0xce>
1005eaba:	9402      	str	r4, [sp, #8]
1005eabc:	2085      	movs	r0, #133	@ 0x85
1005eabe:	0040      	lsls	r0, r0, #1
1005eac0:	182f      	adds	r7, r5, r0
1005eac2:	793a      	ldrb	r2, [r7, #4]
1005eac4:	06d0      	lsls	r0, r2, #27
1005eac6:	d419      	bmi.n	1005eafc <LLC_authenticated_payload_timeout_cb+0x58>
1005eac8:	24f0      	movs	r4, #240	@ 0xf0
1005eaca:	9201      	str	r2, [sp, #4]
1005eacc:	4014      	ands	r4, r2
1005eace:	2101      	movs	r1, #1
1005ead0:	4628      	mov	r0, r5
1005ead2:	f7fc fb3d 	bl	1005b150 <llc_conn_get_enc_on>
1005ead6:	4606      	mov	r6, r0
1005ead8:	2100      	movs	r1, #0
1005eada:	4628      	mov	r0, r5
1005eadc:	f7fc fb38 	bl	1005b150 <llc_conn_get_enc_on>
1005eae0:	4330      	orrs	r0, r6
1005eae2:	d006      	beq.n	1005eaf2 <LLC_authenticated_payload_timeout_cb+0x4e>
1005eae4:	9802      	ldr	r0, [sp, #8]
1005eae6:	f7ff ffc1 	bl	1005ea6c <LLC_authenticated_payload_timeout_start_le_ping>
1005eaea:	2801      	cmp	r0, #1
1005eaec:	d001      	beq.n	1005eaf2 <LLC_authenticated_payload_timeout_cb+0x4e>
1005eaee:	2020      	movs	r0, #32
1005eaf0:	4304      	orrs	r4, r0
1005eaf2:	9a01      	ldr	r2, [sp, #4]
1005eaf4:	2610      	movs	r6, #16
1005eaf6:	4326      	orrs	r6, r4
1005eaf8:	8878      	ldrh	r0, [r7, #2]
1005eafa:	e027      	b.n	1005eb4c <LLC_authenticated_payload_timeout_cb+0xa8>
1005eafc:	26c0      	movs	r6, #192	@ 0xc0
1005eafe:	481d      	ldr	r0, [pc, #116]	@ (1005eb74 <__arm_cp.7_0>)
1005eb00:	6800      	ldr	r0, [r0, #0]
1005eb02:	2140      	movs	r1, #64	@ 0x40
1005eb04:	5640      	ldrsb	r0, [r0, r1]
1005eb06:	2800      	cmp	r0, #0
1005eb08:	d51c      	bpl.n	1005eb44 <LLC_authenticated_payload_timeout_cb+0xa0>
1005eb0a:	8f68      	ldrh	r0, [r5, #58]	@ 0x3a
1005eb0c:	9001      	str	r0, [sp, #4]
1005eb0e:	481a      	ldr	r0, [pc, #104]	@ (1005eb78 <__arm_cp.7_1>)
1005eb10:	6800      	ldr	r0, [r0, #0]
1005eb12:	6980      	ldr	r0, [r0, #24]
1005eb14:	2142      	movs	r1, #66	@ 0x42
1005eb16:	4614      	mov	r4, r2
1005eb18:	2223      	movs	r2, #35	@ 0x23
1005eb1a:	2502      	movs	r5, #2
1005eb1c:	462b      	mov	r3, r5
1005eb1e:	f7f7 f955 	bl	10055dcc <aci_event_fifo_push_header>
1005eb22:	4622      	mov	r2, r4
1005eb24:	2800      	cmp	r0, #0
1005eb26:	d00d      	beq.n	1005eb44 <LLC_authenticated_payload_timeout_cb+0xa0>
1005eb28:	4601      	mov	r1, r0
1005eb2a:	9a01      	ldr	r2, [sp, #4]
1005eb2c:	71c2      	strb	r2, [r0, #7]
1005eb2e:	7185      	strb	r5, [r0, #6]
1005eb30:	2057      	movs	r0, #87	@ 0x57
1005eb32:	7148      	strb	r0, [r1, #5]
1005eb34:	2004      	movs	r0, #4
1005eb36:	7108      	strb	r0, [r1, #4]
1005eb38:	0a10      	lsrs	r0, r2, #8
1005eb3a:	7208      	strb	r0, [r1, #8]
1005eb3c:	2042      	movs	r0, #66	@ 0x42
1005eb3e:	f7f7 f9e2 	bl	10055f06 <aci_event_fifo_push>
1005eb42:	4622      	mov	r2, r4
1005eb44:	4016      	ands	r6, r2
1005eb46:	8878      	ldrh	r0, [r7, #2]
1005eb48:	8839      	ldrh	r1, [r7, #0]
1005eb4a:	1a08      	subs	r0, r1, r0
1005eb4c:	230a      	movs	r3, #10
1005eb4e:	4343      	muls	r3, r0
1005eb50:	f3ef 8010 	mrs	r0, PRIMASK
1005eb54:	b672      	cpsid	i
1005eb56:	7938      	ldrb	r0, [r7, #4]
1005eb58:	4282      	cmp	r2, r0
1005eb5a:	9902      	ldr	r1, [sp, #8]
1005eb5c:	d102      	bne.n	1005eb64 <LLC_authenticated_payload_timeout_cb+0xc0>
1005eb5e:	2003      	movs	r0, #3
1005eb60:	4306      	orrs	r6, r0
1005eb62:	713e      	strb	r6, [r7, #4]
1005eb64:	b662      	cpsie	i
1005eb66:	4803      	ldr	r0, [pc, #12]	@ (1005eb74 <__arm_cp.7_0>)
1005eb68:	6800      	ldr	r0, [r0, #0]
1005eb6a:	30b0      	adds	r0, #176	@ 0xb0
1005eb6c:	2201      	movs	r2, #1
1005eb6e:	f004 fd20 	bl	100635b2 <CST_start>
1005eb72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005eb74 <__arm_cp.7_0>:
1005eb74:	20002958 	.word	0x20002958

1005eb78 <__arm_cp.7_1>:
1005eb78:	20002908 	.word	0x20002908

1005eb7c <LLC_authenticated_payload_timeout_reset>:
1005eb7c:	b510      	push	{r4, lr}
1005eb7e:	4604      	mov	r4, r0
1005eb80:	2087      	movs	r0, #135	@ 0x87
1005eb82:	0040      	lsls	r0, r0, #1
1005eb84:	5c20      	ldrb	r0, [r4, r0]
1005eb86:	2801      	cmp	r0, #1
1005eb88:	d00e      	beq.n	1005eba8 <LLC_authenticated_payload_timeout_reset+0x2c>
1005eb8a:	4620      	mov	r0, r4
1005eb8c:	3030      	adds	r0, #48	@ 0x30
1005eb8e:	7801      	ldrb	r1, [r0, #0]
1005eb90:	4806      	ldr	r0, [pc, #24]	@ (1005ebac <__arm_cp.8_0>)
1005eb92:	6800      	ldr	r0, [r0, #0]
1005eb94:	30b0      	adds	r0, #176	@ 0xb0
1005eb96:	f004 fcd6 	bl	10063546 <CST_stop>
1005eb9a:	2085      	movs	r0, #133	@ 0x85
1005eb9c:	0040      	lsls	r0, r0, #1
1005eb9e:	2100      	movs	r1, #0
1005eba0:	5221      	strh	r1, [r4, r0]
1005eba2:	1820      	adds	r0, r4, r0
1005eba4:	8041      	strh	r1, [r0, #2]
1005eba6:	7101      	strb	r1, [r0, #4]
1005eba8:	bd10      	pop	{r4, pc}
1005ebaa:	46c0      	nop			@ (mov r8, r8)

1005ebac <__arm_cp.8_0>:
1005ebac:	20002958 	.word	0x20002958

1005ebb0 <LLC_le_ping>:
1005ebb0:	b570      	push	{r4, r5, r6, lr}
1005ebb2:	24ff      	movs	r4, #255	@ 0xff
1005ebb4:	2a06      	cmp	r2, #6
1005ebb6:	d835      	bhi.n	1005ec24 <LLC_le_ping+0x74>
1005ebb8:	4605      	mov	r5, r0
1005ebba:	0090      	lsls	r0, r2, #2
1005ebbc:	a201      	add	r2, pc, #4	@ (adr r2, 1005ebc4 <LLC_le_ping+0x14>)
1005ebbe:	5810      	ldr	r0, [r2, r0]
1005ebc0:	4687      	mov	pc, r0
1005ebc2:	46c0      	nop			@ (mov r8, r8)
1005ebc4:	1005ebe1 	.word	0x1005ebe1
1005ebc8:	1005ebe9 	.word	0x1005ebe9
1005ebcc:	1005ec25 	.word	0x1005ec25
1005ebd0:	1005ec01 	.word	0x1005ec01
1005ebd4:	1005ec25 	.word	0x1005ec25
1005ebd8:	1005ec25 	.word	0x1005ec25
1005ebdc:	1005ec05 	.word	0x1005ec05
1005ebe0:	2901      	cmp	r1, #1
1005ebe2:	d117      	bne.n	1005ec14 <LLC_le_ping+0x64>
1005ebe4:	2413      	movs	r4, #19
1005ebe6:	e01d      	b.n	1005ec24 <LLC_le_ping+0x74>
1005ebe8:	2600      	movs	r6, #0
1005ebea:	4628      	mov	r0, r5
1005ebec:	4631      	mov	r1, r6
1005ebee:	f7fd febf 	bl	1005c970 <LL_cpe_set_prepare_tx_pdu>
1005ebf2:	2208      	movs	r2, #8
1005ebf4:	4628      	mov	r0, r5
1005ebf6:	4631      	mov	r1, r6
1005ebf8:	4633      	mov	r3, r6
1005ebfa:	f7fd fe70 	bl	1005c8de <LL_cpe_set_active>
1005ebfe:	e011      	b.n	1005ec24 <LLC_le_ping+0x74>
1005ec00:	2101      	movs	r1, #1
1005ec02:	e008      	b.n	1005ec16 <LLC_le_ping+0x66>
1005ec04:	2001      	movs	r0, #1
1005ec06:	7058      	strb	r0, [r3, #1]
1005ec08:	2003      	movs	r0, #3
1005ec0a:	7018      	strb	r0, [r3, #0]
1005ec0c:	2901      	cmp	r1, #1
1005ec0e:	d007      	beq.n	1005ec20 <LLC_le_ping+0x70>
1005ec10:	2013      	movs	r0, #19
1005ec12:	e006      	b.n	1005ec22 <LLC_le_ping+0x72>
1005ec14:	2100      	movs	r1, #0
1005ec16:	2208      	movs	r2, #8
1005ec18:	4628      	mov	r0, r5
1005ec1a:	f7fd fe77 	bl	1005c90c <LL_cpe_clr_active>
1005ec1e:	e001      	b.n	1005ec24 <LLC_le_ping+0x74>
1005ec20:	2012      	movs	r0, #18
1005ec22:	7098      	strb	r0, [r3, #2]
1005ec24:	4620      	mov	r0, r4
1005ec26:	bd70      	pop	{r4, r5, r6, pc}

1005ec28 <llc_conn_init_pcl_ctxt_ucfg_weak>:
1005ec28:	4770      	bx	lr

1005ec2a <LLC_pcl_hal_cntxt_init_ucfg_weak>:
1005ec2a:	4770      	bx	lr

1005ec2c <LLC_pcl_incr_rx_packets_ucfg_weak>:
1005ec2c:	4770      	bx	lr

1005ec2e <LLC_pcl_update_avg_rssi_ucfg_weak>:
1005ec2e:	4770      	bx	lr

1005ec30 <LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak>:
1005ec30:	b580      	push	{r7, lr}
1005ec32:	f7fb fff1 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005ec36:	2141      	movs	r1, #65	@ 0x41
1005ec38:	5c40      	ldrb	r0, [r0, r1]
1005ec3a:	4903      	ldr	r1, [pc, #12]	@ (1005ec48 <__arm_cp.22_0>)
1005ec3c:	6809      	ldr	r1, [r1, #0]
1005ec3e:	7a49      	ldrb	r1, [r1, #9]
1005ec40:	f7f6 f922 	bl	10054e88 <BLEPLAT_CNTR_SmSetTxPwr>
1005ec44:	bd80      	pop	{r7, pc}
1005ec46:	46c0      	nop			@ (mov r8, r8)

1005ec48 <__arm_cp.22_0>:
1005ec48:	20002958 	.word	0x20002958

1005ec4c <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>:
1005ec4c:	4770      	bx	lr

1005ec4e <LLC_pcl_offline_processing_ucfg_weak>:
1005ec4e:	2000      	movs	r0, #0
1005ec50:	4770      	bx	lr
	...

1005ec54 <LL_phy_update_init>:
1005ec54:	b580      	push	{r7, lr}
1005ec56:	f7fb ffd5 	bl	1005ac04 <llc_conn_get_cntxt_p>
1005ec5a:	4902      	ldr	r1, [pc, #8]	@ (1005ec64 <__arm_cp.3_0>)
1005ec5c:	6201      	str	r1, [r0, #32]
1005ec5e:	2000      	movs	r0, #0
1005ec60:	bd80      	pop	{r7, pc}
1005ec62:	46c0      	nop			@ (mov r8, r8)

1005ec64 <__arm_cp.3_0>:
1005ec64:	07070002 	.word	0x07070002

1005ec68 <LL_phy_update_init_per_st_data>:
1005ec68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ec6a:	4605      	mov	r5, r0
1005ec6c:	f7fc f808 	bl	1005ac80 <llc_conn_get_phy_upd_cntxt_per_p>
1005ec70:	2800      	cmp	r0, #0
1005ec72:	d027      	beq.n	1005ecc4 <LL_phy_update_init_per_st_data+0x5c>
1005ec74:	4604      	mov	r4, r0
1005ec76:	f7fb ffc5 	bl	1005ac04 <llc_conn_get_cntxt_p>
1005ec7a:	4606      	mov	r6, r0
1005ec7c:	4628      	mov	r0, r5
1005ec7e:	f7fb ffcb 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005ec82:	4605      	mov	r5, r0
1005ec84:	2100      	movs	r1, #0
1005ec86:	220e      	movs	r2, #14
1005ec88:	4620      	mov	r0, r4
1005ec8a:	f7f4 fb63 	bl	10053354 <BLEPLAT_MemSet>
1005ec8e:	8c70      	ldrh	r0, [r6, #34]	@ 0x22
1005ec90:	8060      	strh	r0, [r4, #2]
1005ec92:	8c30      	ldrh	r0, [r6, #32]
1005ec94:	8020      	strh	r0, [r4, #0]
1005ec96:	2741      	movs	r7, #65	@ 0x41
1005ec98:	9500      	str	r5, [sp, #0]
1005ec9a:	5de8      	ldrb	r0, [r5, r7]
1005ec9c:	f7f5 ff3c 	bl	10054b18 <BLEPLAT_CNTR_SmGetTxPhy>
1005eca0:	2501      	movs	r5, #1
1005eca2:	2804      	cmp	r0, #4
1005eca4:	d101      	bne.n	1005ecaa <LL_phy_update_init_per_st_data+0x42>
1005eca6:	4606      	mov	r6, r0
1005eca8:	e001      	b.n	1005ecae <LL_phy_update_init_per_st_data+0x46>
1005ecaa:	462e      	mov	r6, r5
1005ecac:	4086      	lsls	r6, r0
1005ecae:	9800      	ldr	r0, [sp, #0]
1005ecb0:	5dc0      	ldrb	r0, [r0, r7]
1005ecb2:	f7f5 ff20 	bl	10054af6 <BLEPLAT_CNTR_SmGetRxPhy>
1005ecb6:	71a6      	strb	r6, [r4, #6]
1005ecb8:	2804      	cmp	r0, #4
1005ecba:	d101      	bne.n	1005ecc0 <LL_phy_update_init_per_st_data+0x58>
1005ecbc:	4605      	mov	r5, r0
1005ecbe:	e000      	b.n	1005ecc2 <LL_phy_update_init_per_st_data+0x5a>
1005ecc0:	4085      	lsls	r5, r0
1005ecc2:	71e5      	strb	r5, [r4, #7]
1005ecc4:	2000      	movs	r0, #0
1005ecc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005ecc8 <LL_phy_upd_compute_data_PDU_length_params_ucfg_weak>:
1005ecc8:	6800      	ldr	r0, [r0, #0]
1005ecca:	21a9      	movs	r1, #169	@ 0xa9
1005eccc:	0109      	lsls	r1, r1, #4
1005ecce:	8181      	strh	r1, [r0, #12]
1005ecd0:	2229      	movs	r2, #41	@ 0x29
1005ecd2:	00d2      	lsls	r2, r2, #3
1005ecd4:	80c2      	strh	r2, [r0, #6]
1005ecd6:	8141      	strh	r1, [r0, #10]
1005ecd8:	8101      	strh	r1, [r0, #8]
1005ecda:	8082      	strh	r2, [r0, #4]
1005ecdc:	4770      	bx	lr

1005ecde <LL_phy_upd_pending>:
1005ecde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ece0:	4605      	mov	r5, r0
1005ece2:	f7fb ff99 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005ece6:	4604      	mov	r4, r0
1005ece8:	4628      	mov	r0, r5
1005ecea:	f7fb ffc9 	bl	1005ac80 <llc_conn_get_phy_upd_cntxt_per_p>
1005ecee:	219a      	movs	r1, #154	@ 0x9a
1005ecf0:	5a66      	ldrh	r6, [r4, r1]
1005ecf2:	b271      	sxtb	r1, r6
1005ecf4:	2900      	cmp	r1, #0
1005ecf6:	d52e      	bpl.n	1005ed56 <LL_phy_upd_pending+0x78>
1005ecf8:	4627      	mov	r7, r4
1005ecfa:	372c      	adds	r7, #44	@ 0x2c
1005ecfc:	7839      	ldrb	r1, [r7, #0]
1005ecfe:	2902      	cmp	r1, #2
1005ed00:	d106      	bne.n	1005ed10 <LL_phy_upd_pending+0x32>
1005ed02:	7a01      	ldrb	r1, [r0, #8]
1005ed04:	2900      	cmp	r1, #0
1005ed06:	d100      	bne.n	1005ed0a <LL_phy_upd_pending+0x2c>
1005ed08:	7981      	ldrb	r1, [r0, #6]
1005ed0a:	7181      	strb	r1, [r0, #6]
1005ed0c:	7a45      	ldrb	r5, [r0, #9]
1005ed0e:	e005      	b.n	1005ed1c <LL_phy_upd_pending+0x3e>
1005ed10:	7a41      	ldrb	r1, [r0, #9]
1005ed12:	2900      	cmp	r1, #0
1005ed14:	d100      	bne.n	1005ed18 <LL_phy_upd_pending+0x3a>
1005ed16:	7981      	ldrb	r1, [r0, #6]
1005ed18:	7181      	strb	r1, [r0, #6]
1005ed1a:	7a05      	ldrb	r5, [r0, #8]
1005ed1c:	2d00      	cmp	r5, #0
1005ed1e:	d100      	bne.n	1005ed22 <LL_phy_upd_pending+0x44>
1005ed20:	79c5      	ldrb	r5, [r0, #7]
1005ed22:	71c5      	strb	r5, [r0, #7]
1005ed24:	2904      	cmp	r1, #4
1005ed26:	d104      	bne.n	1005ed32 <LL_phy_upd_pending+0x54>
1005ed28:	8800      	ldrh	r0, [r0, #0]
1005ed2a:	2801      	cmp	r0, #1
1005ed2c:	d003      	beq.n	1005ed36 <LL_phy_upd_pending+0x58>
1005ed2e:	2104      	movs	r1, #4
1005ed30:	e002      	b.n	1005ed38 <LL_phy_upd_pending+0x5a>
1005ed32:	0849      	lsrs	r1, r1, #1
1005ed34:	e000      	b.n	1005ed38 <LL_phy_upd_pending+0x5a>
1005ed36:	2106      	movs	r1, #6
1005ed38:	349a      	adds	r4, #154	@ 0x9a
1005ed3a:	7d78      	ldrb	r0, [r7, #21]
1005ed3c:	f7f6 f88f 	bl	10054e5e <BLEPLAT_CNTR_SmSetTxPhy>
1005ed40:	2d04      	cmp	r5, #4
1005ed42:	d000      	beq.n	1005ed46 <LL_phy_upd_pending+0x68>
1005ed44:	086d      	lsrs	r5, r5, #1
1005ed46:	7d78      	ldrb	r0, [r7, #21]
1005ed48:	4629      	mov	r1, r5
1005ed4a:	f7f6 f81c 	bl	10054d86 <BLEPLAT_CNTR_SmSetRxPhy>
1005ed4e:	8820      	ldrh	r0, [r4, #0]
1005ed50:	2180      	movs	r1, #128	@ 0x80
1005ed52:	4388      	bics	r0, r1
1005ed54:	8020      	strh	r0, [r4, #0]
1005ed56:	b2f0      	uxtb	r0, r6
1005ed58:	09c0      	lsrs	r0, r0, #7
1005ed5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005ed5c <LL_phy_update>:
1005ed5c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ed5e:	b087      	sub	sp, #28
1005ed60:	461e      	mov	r6, r3
1005ed62:	4617      	mov	r7, r2
1005ed64:	460d      	mov	r5, r1
1005ed66:	4604      	mov	r4, r0
1005ed68:	f7fd fe0f 	bl	1005c98a <LL_cpe_get_cntxt>
1005ed6c:	9003      	str	r0, [sp, #12]
1005ed6e:	9404      	str	r4, [sp, #16]
1005ed70:	4620      	mov	r0, r4
1005ed72:	f7fb ff51 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005ed76:	23ff      	movs	r3, #255	@ 0xff
1005ed78:	2f07      	cmp	r7, #7
1005ed7a:	d900      	bls.n	1005ed7e <LL_phy_update+0x22>
1005ed7c:	e18d      	b.n	1005f09a <LL_phy_update+0x33e>
1005ed7e:	9502      	str	r5, [sp, #8]
1005ed80:	4605      	mov	r5, r0
1005ed82:	352c      	adds	r5, #44	@ 0x2c
1005ed84:	4604      	mov	r4, r0
1005ed86:	3498      	adds	r4, #152	@ 0x98
1005ed88:	007f      	lsls	r7, r7, #1
1005ed8a:	46c0      	nop			@ (mov r8, r8)
1005ed8c:	447f      	add	r7, pc
1005ed8e:	88bf      	ldrh	r7, [r7, #4]
1005ed90:	007f      	lsls	r7, r7, #1
1005ed92:	44bf      	add	pc, r7
1005ed94:	001c0007 	.word	0x001c0007
1005ed98:	004d0041 	.word	0x004d0041
1005ed9c:	01820067 	.word	0x01820067
1005eda0:	006e0026 	.word	0x006e0026
1005eda4:	7828      	ldrb	r0, [r5, #0]
1005eda6:	9902      	ldr	r1, [sp, #8]
1005eda8:	2901      	cmp	r1, #1
1005edaa:	d000      	beq.n	1005edae <LL_phy_update+0x52>
1005edac:	e0b5      	b.n	1005ef1a <LL_phy_update+0x1be>
1005edae:	2802      	cmp	r0, #2
1005edb0:	d000      	beq.n	1005edb4 <LL_phy_update+0x58>
1005edb2:	e103      	b.n	1005efbc <LL_phy_update+0x260>
1005edb4:	9e03      	ldr	r6, [sp, #12]
1005edb6:	7c30      	ldrb	r0, [r6, #16]
1005edb8:	2803      	cmp	r0, #3
1005edba:	d100      	bne.n	1005edbe <LL_phy_update+0x62>
1005edbc:	e158      	b.n	1005f070 <LL_phy_update+0x314>
1005edbe:	2801      	cmp	r0, #1
1005edc0:	d000      	beq.n	1005edc4 <LL_phy_update+0x68>
1005edc2:	e16a      	b.n	1005f09a <LL_phy_update+0x33e>
1005edc4:	2002      	movs	r0, #2
1005edc6:	9903      	ldr	r1, [sp, #12]
1005edc8:	7408      	strb	r0, [r1, #16]
1005edca:	2317      	movs	r3, #23
1005edcc:	e165      	b.n	1005f09a <LL_phy_update+0x33e>
1005edce:	78f0      	ldrb	r0, [r6, #3]
1005edd0:	a905      	add	r1, sp, #20
1005edd2:	7088      	strb	r0, [r1, #2]
1005edd4:	7930      	ldrb	r0, [r6, #4]
1005edd6:	70c8      	strb	r0, [r1, #3]
1005edd8:	9804      	ldr	r0, [sp, #16]
1005edda:	461c      	mov	r4, r3
1005eddc:	f000 fac8 	bl	1005f370 <LL_process_phy_req_rcpt>
1005ede0:	e15a      	b.n	1005f098 <LL_phy_update+0x33c>
1005ede2:	7828      	ldrb	r0, [r5, #0]
1005ede4:	9902      	ldr	r1, [sp, #8]
1005ede6:	2901      	cmp	r1, #1
1005ede8:	d171      	bne.n	1005eece <LL_phy_update+0x172>
1005edea:	2802      	cmp	r0, #2
1005edec:	9903      	ldr	r1, [sp, #12]
1005edee:	d000      	beq.n	1005edf2 <LL_phy_update+0x96>
1005edf0:	e0ce      	b.n	1005ef90 <LL_phy_update+0x234>
1005edf2:	7c08      	ldrb	r0, [r1, #16]
1005edf4:	2802      	cmp	r0, #2
1005edf6:	d100      	bne.n	1005edfa <LL_phy_update+0x9e>
1005edf8:	e152      	b.n	1005f0a0 <LL_phy_update+0x344>
1005edfa:	2800      	cmp	r0, #0
1005edfc:	d000      	beq.n	1005ee00 <LL_phy_update+0xa4>
1005edfe:	e14c      	b.n	1005f09a <LL_phy_update+0x33e>
1005ee00:	2016      	movs	r0, #22
1005ee02:	70b0      	strb	r0, [r6, #2]
1005ee04:	2003      	movs	r0, #3
1005ee06:	7070      	strb	r0, [r6, #1]
1005ee08:	7030      	strb	r0, [r6, #0]
1005ee0a:	7cc8      	ldrb	r0, [r1, #19]
1005ee0c:	70f0      	strb	r0, [r6, #3]
1005ee0e:	7d08      	ldrb	r0, [r1, #20]
1005ee10:	7130      	strb	r0, [r6, #4]
1005ee12:	2001      	movs	r0, #1
1005ee14:	7408      	strb	r0, [r1, #16]
1005ee16:	e140      	b.n	1005f09a <LL_phy_update+0x33e>
1005ee18:	78f1      	ldrb	r1, [r6, #3]
1005ee1a:	a805      	add	r0, sp, #20
1005ee1c:	7081      	strb	r1, [r0, #2]
1005ee1e:	7931      	ldrb	r1, [r6, #4]
1005ee20:	70c1      	strb	r1, [r0, #3]
1005ee22:	7d65      	ldrb	r5, [r4, #21]
1005ee24:	461e      	mov	r6, r3
1005ee26:	2d07      	cmp	r5, #7
1005ee28:	d100      	bne.n	1005ee2c <LL_phy_update+0xd0>
1005ee2a:	e090      	b.n	1005ef4e <LL_phy_update+0x1f2>
1005ee2c:	2102      	movs	r1, #2
1005ee2e:	e08f      	b.n	1005ef50 <LL_phy_update+0x1f4>
1005ee30:	78b0      	ldrb	r0, [r6, #2]
1005ee32:	2807      	cmp	r0, #7
1005ee34:	d100      	bne.n	1005ee38 <LL_phy_update+0xdc>
1005ee36:	e0d2      	b.n	1005efde <LL_phy_update+0x282>
1005ee38:	2811      	cmp	r0, #17
1005ee3a:	9f04      	ldr	r7, [sp, #16]
1005ee3c:	d100      	bne.n	1005ee40 <LL_phy_update+0xe4>
1005ee3e:	e0e7      	b.n	1005f010 <LL_phy_update+0x2b4>
1005ee40:	2818      	cmp	r0, #24
1005ee42:	d100      	bne.n	1005ee46 <LL_phy_update+0xea>
1005ee44:	e0fa      	b.n	1005f03c <LL_phy_update+0x2e0>
1005ee46:	2817      	cmp	r0, #23
1005ee48:	d000      	beq.n	1005ee4c <LL_phy_update+0xf0>
1005ee4a:	e126      	b.n	1005f09a <LL_phy_update+0x33e>
1005ee4c:	a905      	add	r1, sp, #20
1005ee4e:	2000      	movs	r0, #0
1005ee50:	7108      	strb	r0, [r1, #4]
1005ee52:	78f0      	ldrb	r0, [r6, #3]
1005ee54:	7088      	strb	r0, [r1, #2]
1005ee56:	7930      	ldrb	r0, [r6, #4]
1005ee58:	70c8      	strb	r0, [r1, #3]
1005ee5a:	4638      	mov	r0, r7
1005ee5c:	461c      	mov	r4, r3
1005ee5e:	f000 f9cf 	bl	1005f200 <LL_compute_phy_upd_ind>
1005ee62:	e119      	b.n	1005f098 <LL_phy_update+0x33c>
1005ee64:	78b1      	ldrb	r1, [r6, #2]
1005ee66:	461c      	mov	r4, r3
1005ee68:	2916      	cmp	r1, #22
1005ee6a:	d100      	bne.n	1005ee6e <LL_phy_update+0x112>
1005ee6c:	e085      	b.n	1005ef7a <LL_phy_update+0x21e>
1005ee6e:	212a      	movs	r1, #42	@ 0x2a
1005ee70:	e084      	b.n	1005ef7c <LL_phy_update+0x220>
1005ee72:	9301      	str	r3, [sp, #4]
1005ee74:	9f04      	ldr	r7, [sp, #16]
1005ee76:	4638      	mov	r0, r7
1005ee78:	9e03      	ldr	r6, [sp, #12]
1005ee7a:	4631      	mov	r1, r6
1005ee7c:	f000 f9a3 	bl	1005f1c6 <LL_reset_max_tx_data_frag>
1005ee80:	7d69      	ldrb	r1, [r5, #21]
1005ee82:	4638      	mov	r0, r7
1005ee84:	f7fe ffbc 	bl	1005de00 <LLC_connection_cte_response_disable_ucfg_weak>
1005ee88:	8871      	ldrh	r1, [r6, #2]
1005ee8a:	8830      	ldrh	r0, [r6, #0]
1005ee8c:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
1005ee8e:	4290      	cmp	r0, r2
1005ee90:	d102      	bne.n	1005ee98 <LL_phy_update+0x13c>
1005ee92:	8ca2      	ldrh	r2, [r4, #36]	@ 0x24
1005ee94:	4291      	cmp	r1, r2
1005ee96:	d00a      	beq.n	1005eeae <LL_phy_update+0x152>
1005ee98:	84a1      	strh	r1, [r4, #36]	@ 0x24
1005ee9a:	8460      	strh	r0, [r4, #34]	@ 0x22
1005ee9c:	f3ef 8010 	mrs	r0, PRIMASK
1005eea0:	b672      	cpsid	i
1005eea2:	2001      	movs	r0, #1
1005eea4:	0240      	lsls	r0, r0, #9
1005eea6:	8861      	ldrh	r1, [r4, #2]
1005eea8:	4301      	orrs	r1, r0
1005eeaa:	8061      	strh	r1, [r4, #2]
1005eeac:	b662      	cpsie	i
1005eeae:	f3ef 8010 	mrs	r0, PRIMASK
1005eeb2:	b672      	cpsid	i
1005eeb4:	2001      	movs	r0, #1
1005eeb6:	0200      	lsls	r0, r0, #8
1005eeb8:	8861      	ldrh	r1, [r4, #2]
1005eeba:	4301      	orrs	r1, r0
1005eebc:	8061      	strh	r1, [r4, #2]
1005eebe:	b662      	cpsie	i
1005eec0:	2207      	movs	r2, #7
1005eec2:	4638      	mov	r0, r7
1005eec4:	9902      	ldr	r1, [sp, #8]
1005eec6:	f7fd fd21 	bl	1005c90c <LL_cpe_clr_active>
1005eeca:	9b01      	ldr	r3, [sp, #4]
1005eecc:	e0e5      	b.n	1005f09a <LL_phy_update+0x33e>
1005eece:	2802      	cmp	r0, #2
1005eed0:	9903      	ldr	r1, [sp, #12]
1005eed2:	d166      	bne.n	1005efa2 <LL_phy_update+0x246>
1005eed4:	7c08      	ldrb	r0, [r1, #16]
1005eed6:	2805      	cmp	r0, #5
1005eed8:	d100      	bne.n	1005eedc <LL_phy_update+0x180>
1005eeda:	e100      	b.n	1005f0de <LL_phy_update+0x382>
1005eedc:	2800      	cmp	r0, #0
1005eede:	d000      	beq.n	1005eee2 <LL_phy_update+0x186>
1005eee0:	e0db      	b.n	1005f09a <LL_phy_update+0x33e>
1005eee2:	9301      	str	r3, [sp, #4]
1005eee4:	9f04      	ldr	r7, [sp, #16]
1005eee6:	4638      	mov	r0, r7
1005eee8:	f7fb feca 	bl	1005ac80 <llc_conn_get_phy_upd_cntxt_per_p>
1005eeec:	2118      	movs	r1, #24
1005eeee:	70b1      	strb	r1, [r6, #2]
1005eef0:	2105      	movs	r1, #5
1005eef2:	7071      	strb	r1, [r6, #1]
1005eef4:	2503      	movs	r5, #3
1005eef6:	7035      	strb	r5, [r6, #0]
1005eef8:	7a01      	ldrb	r1, [r0, #8]
1005eefa:	70f1      	strb	r1, [r6, #3]
1005eefc:	7a40      	ldrb	r0, [r0, #9]
1005eefe:	7130      	strb	r0, [r6, #4]
1005ef00:	1d71      	adds	r1, r6, #5
1005ef02:	2202      	movs	r2, #2
1005ef04:	4620      	mov	r0, r4
1005ef06:	f004 fc33 	bl	10063770 <char_copy>
1005ef0a:	9803      	ldr	r0, [sp, #12]
1005ef0c:	7405      	strb	r5, [r0, #16]
1005ef0e:	8820      	ldrh	r0, [r4, #0]
1005ef10:	2800      	cmp	r0, #0
1005ef12:	d0da      	beq.n	1005eeca <LL_phy_update+0x16e>
1005ef14:	4638      	mov	r0, r7
1005ef16:	9902      	ldr	r1, [sp, #8]
1005ef18:	e0de      	b.n	1005f0d8 <LL_phy_update+0x37c>
1005ef1a:	2802      	cmp	r0, #2
1005ef1c:	d14a      	bne.n	1005efb4 <LL_phy_update+0x258>
1005ef1e:	9e03      	ldr	r6, [sp, #12]
1005ef20:	7c30      	ldrb	r0, [r6, #16]
1005ef22:	2803      	cmp	r0, #3
1005ef24:	d000      	beq.n	1005ef28 <LL_phy_update+0x1cc>
1005ef26:	e09f      	b.n	1005f068 <LL_phy_update+0x30c>
1005ef28:	461c      	mov	r4, r3
1005ef2a:	7c70      	ldrb	r0, [r6, #17]
1005ef2c:	a905      	add	r1, sp, #20
1005ef2e:	7108      	strb	r0, [r1, #4]
1005ef30:	9d04      	ldr	r5, [sp, #16]
1005ef32:	4628      	mov	r0, r5
1005ef34:	4632      	mov	r2, r6
1005ef36:	f000 f8f0 	bl	1005f11a <LL_process_phy_upd_ind>
1005ef3a:	2800      	cmp	r0, #0
1005ef3c:	d100      	bne.n	1005ef40 <LL_phy_update+0x1e4>
1005ef3e:	e0ab      	b.n	1005f098 <LL_phy_update+0x33c>
1005ef40:	4628      	mov	r0, r5
1005ef42:	4631      	mov	r1, r6
1005ef44:	f000 f93f 	bl	1005f1c6 <LL_reset_max_tx_data_frag>
1005ef48:	2207      	movs	r2, #7
1005ef4a:	4628      	mov	r0, r5
1005ef4c:	e074      	b.n	1005f038 <LL_phy_update+0x2dc>
1005ef4e:	2101      	movs	r1, #1
1005ef50:	9f04      	ldr	r7, [sp, #16]
1005ef52:	7181      	strb	r1, [r0, #6]
1005ef54:	2100      	movs	r1, #0
1005ef56:	4638      	mov	r0, r7
1005ef58:	f7fd fd17 	bl	1005c98a <LL_cpe_get_cntxt>
1005ef5c:	4604      	mov	r4, r0
1005ef5e:	4638      	mov	r0, r7
1005ef60:	f7fb fe5a 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005ef64:	212c      	movs	r1, #44	@ 0x2c
1005ef66:	5c40      	ldrb	r0, [r0, r1]
1005ef68:	2802      	cmp	r0, #2
1005ef6a:	d10a      	bne.n	1005ef82 <LL_phy_update+0x226>
1005ef6c:	20ff      	movs	r0, #255	@ 0xff
1005ef6e:	3006      	adds	r0, #6
1005ef70:	8220      	strh	r0, [r4, #16]
1005ef72:	2d07      	cmp	r5, #7
1005ef74:	d024      	beq.n	1005efc0 <LL_phy_update+0x264>
1005ef76:	202a      	movs	r0, #42	@ 0x2a
1005ef78:	e023      	b.n	1005efc2 <LL_phy_update+0x266>
1005ef7a:	2123      	movs	r1, #35	@ 0x23
1005ef7c:	f7fc fd30 	bl	1005b9e0 <llc_conn_disconnect_link_from_cpf>
1005ef80:	e08a      	b.n	1005f098 <LL_phy_update+0x33c>
1005ef82:	2d07      	cmp	r5, #7
1005ef84:	d129      	bne.n	1005efda <LL_phy_update+0x27e>
1005ef86:	a905      	add	r1, sp, #20
1005ef88:	4638      	mov	r0, r7
1005ef8a:	f000 f9f1 	bl	1005f370 <LL_process_phy_req_rcpt>
1005ef8e:	e024      	b.n	1005efda <LL_phy_update+0x27e>
1005ef90:	2016      	movs	r0, #22
1005ef92:	70b0      	strb	r0, [r6, #2]
1005ef94:	2003      	movs	r0, #3
1005ef96:	7070      	strb	r0, [r6, #1]
1005ef98:	7030      	strb	r0, [r6, #0]
1005ef9a:	7cc8      	ldrb	r0, [r1, #19]
1005ef9c:	70f0      	strb	r0, [r6, #3]
1005ef9e:	7d08      	ldrb	r0, [r1, #20]
1005efa0:	e0a5      	b.n	1005f0ee <LL_phy_update+0x392>
1005efa2:	2017      	movs	r0, #23
1005efa4:	70b0      	strb	r0, [r6, #2]
1005efa6:	2003      	movs	r0, #3
1005efa8:	7070      	strb	r0, [r6, #1]
1005efaa:	7030      	strb	r0, [r6, #0]
1005efac:	7d48      	ldrb	r0, [r1, #21]
1005efae:	70f0      	strb	r0, [r6, #3]
1005efb0:	7d88      	ldrb	r0, [r1, #22]
1005efb2:	e09c      	b.n	1005f0ee <LL_phy_update+0x392>
1005efb4:	2202      	movs	r2, #2
1005efb6:	9804      	ldr	r0, [sp, #16]
1005efb8:	f7fd fcca 	bl	1005c950 <LL_cpe_set_blocked>
1005efbc:	2318      	movs	r3, #24
1005efbe:	e06c      	b.n	1005f09a <LL_phy_update+0x33e>
1005efc0:	2023      	movs	r0, #35	@ 0x23
1005efc2:	74a0      	strb	r0, [r4, #18]
1005efc4:	2400      	movs	r4, #0
1005efc6:	4638      	mov	r0, r7
1005efc8:	4621      	mov	r1, r4
1005efca:	f7fd fcd1 	bl	1005c970 <LL_cpe_set_prepare_tx_pdu>
1005efce:	2207      	movs	r2, #7
1005efd0:	2301      	movs	r3, #1
1005efd2:	4638      	mov	r0, r7
1005efd4:	4621      	mov	r1, r4
1005efd6:	f7fd fc82 	bl	1005c8de <LL_cpe_set_active>
1005efda:	4633      	mov	r3, r6
1005efdc:	e05d      	b.n	1005f09a <LL_phy_update+0x33e>
1005efde:	461c      	mov	r4, r3
1005efe0:	a905      	add	r1, sp, #20
1005efe2:	2007      	movs	r0, #7
1005efe4:	7088      	strb	r0, [r1, #2]
1005efe6:	2000      	movs	r0, #0
1005efe8:	7048      	strb	r0, [r1, #1]
1005efea:	78f0      	ldrb	r0, [r6, #3]
1005efec:	7008      	strb	r0, [r1, #0]
1005efee:	9f03      	ldr	r7, [sp, #12]
1005eff0:	7c78      	ldrb	r0, [r7, #17]
1005eff2:	70c8      	strb	r0, [r1, #3]
1005eff4:	9e04      	ldr	r6, [sp, #16]
1005eff6:	4630      	mov	r0, r6
1005eff8:	f000 f992 	bl	1005f320 <LL_process_unknown_rsp_reject_ind_rcpt>
1005effc:	7828      	ldrb	r0, [r5, #0]
1005effe:	2803      	cmp	r0, #3
1005f000:	d103      	bne.n	1005f00a <LL_phy_update+0x2ae>
1005f002:	4630      	mov	r0, r6
1005f004:	4639      	mov	r1, r7
1005f006:	f000 f8de 	bl	1005f1c6 <LL_reset_max_tx_data_frag>
1005f00a:	2207      	movs	r2, #7
1005f00c:	4630      	mov	r0, r6
1005f00e:	e013      	b.n	1005f038 <LL_phy_update+0x2dc>
1005f010:	a905      	add	r1, sp, #20
1005f012:	2011      	movs	r0, #17
1005f014:	7088      	strb	r0, [r1, #2]
1005f016:	78f0      	ldrb	r0, [r6, #3]
1005f018:	7008      	strb	r0, [r1, #0]
1005f01a:	7930      	ldrb	r0, [r6, #4]
1005f01c:	7048      	strb	r0, [r1, #1]
1005f01e:	9d03      	ldr	r5, [sp, #12]
1005f020:	7c68      	ldrb	r0, [r5, #17]
1005f022:	70c8      	strb	r0, [r1, #3]
1005f024:	4638      	mov	r0, r7
1005f026:	461c      	mov	r4, r3
1005f028:	f000 f97a 	bl	1005f320 <LL_process_unknown_rsp_reject_ind_rcpt>
1005f02c:	4638      	mov	r0, r7
1005f02e:	4629      	mov	r1, r5
1005f030:	f000 f8c9 	bl	1005f1c6 <LL_reset_max_tx_data_frag>
1005f034:	2207      	movs	r2, #7
1005f036:	4638      	mov	r0, r7
1005f038:	9902      	ldr	r1, [sp, #8]
1005f03a:	e02b      	b.n	1005f094 <LL_phy_update+0x338>
1005f03c:	9301      	str	r3, [sp, #4]
1005f03e:	1cf0      	adds	r0, r6, #3
1005f040:	ae05      	add	r6, sp, #20
1005f042:	2205      	movs	r2, #5
1005f044:	4631      	mov	r1, r6
1005f046:	f004 fb93 	bl	10063770 <char_copy>
1005f04a:	9d03      	ldr	r5, [sp, #12]
1005f04c:	7c68      	ldrb	r0, [r5, #17]
1005f04e:	7130      	strb	r0, [r6, #4]
1005f050:	4638      	mov	r0, r7
1005f052:	4631      	mov	r1, r6
1005f054:	462a      	mov	r2, r5
1005f056:	f000 f860 	bl	1005f11a <LL_process_phy_upd_ind>
1005f05a:	2800      	cmp	r0, #0
1005f05c:	d049      	beq.n	1005f0f2 <LL_phy_update+0x396>
1005f05e:	4638      	mov	r0, r7
1005f060:	4629      	mov	r1, r5
1005f062:	f000 f8b0 	bl	1005f1c6 <LL_reset_max_tx_data_frag>
1005f066:	e72b      	b.n	1005eec0 <LL_phy_update+0x164>
1005f068:	2207      	movs	r2, #7
1005f06a:	9804      	ldr	r0, [sp, #16]
1005f06c:	461c      	mov	r4, r3
1005f06e:	e011      	b.n	1005f094 <LL_phy_update+0x338>
1005f070:	461c      	mov	r4, r3
1005f072:	7c70      	ldrb	r0, [r6, #17]
1005f074:	a905      	add	r1, sp, #20
1005f076:	7108      	strb	r0, [r1, #4]
1005f078:	9d04      	ldr	r5, [sp, #16]
1005f07a:	4628      	mov	r0, r5
1005f07c:	4632      	mov	r2, r6
1005f07e:	f000 f84c 	bl	1005f11a <LL_process_phy_upd_ind>
1005f082:	2800      	cmp	r0, #0
1005f084:	d046      	beq.n	1005f114 <LL_phy_update+0x3b8>
1005f086:	4628      	mov	r0, r5
1005f088:	4631      	mov	r1, r6
1005f08a:	f000 f89c 	bl	1005f1c6 <LL_reset_max_tx_data_frag>
1005f08e:	2101      	movs	r1, #1
1005f090:	2207      	movs	r2, #7
1005f092:	4628      	mov	r0, r5
1005f094:	f7fd fc3a 	bl	1005c90c <LL_cpe_clr_active>
1005f098:	4623      	mov	r3, r4
1005f09a:	4618      	mov	r0, r3
1005f09c:	b007      	add	sp, #28
1005f09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005f0a0:	9301      	str	r3, [sp, #4]
1005f0a2:	9f04      	ldr	r7, [sp, #16]
1005f0a4:	4638      	mov	r0, r7
1005f0a6:	f7fb fdeb 	bl	1005ac80 <llc_conn_get_phy_upd_cntxt_per_p>
1005f0aa:	2118      	movs	r1, #24
1005f0ac:	70b1      	strb	r1, [r6, #2]
1005f0ae:	2105      	movs	r1, #5
1005f0b0:	7071      	strb	r1, [r6, #1]
1005f0b2:	2503      	movs	r5, #3
1005f0b4:	7035      	strb	r5, [r6, #0]
1005f0b6:	7a01      	ldrb	r1, [r0, #8]
1005f0b8:	70f1      	strb	r1, [r6, #3]
1005f0ba:	7a40      	ldrb	r0, [r0, #9]
1005f0bc:	7130      	strb	r0, [r6, #4]
1005f0be:	1d71      	adds	r1, r6, #5
1005f0c0:	2202      	movs	r2, #2
1005f0c2:	4620      	mov	r0, r4
1005f0c4:	f004 fb54 	bl	10063770 <char_copy>
1005f0c8:	9803      	ldr	r0, [sp, #12]
1005f0ca:	7405      	strb	r5, [r0, #16]
1005f0cc:	8820      	ldrh	r0, [r4, #0]
1005f0ce:	2800      	cmp	r0, #0
1005f0d0:	d100      	bne.n	1005f0d4 <LL_phy_update+0x378>
1005f0d2:	e6fa      	b.n	1005eeca <LL_phy_update+0x16e>
1005f0d4:	2101      	movs	r1, #1
1005f0d6:	4638      	mov	r0, r7
1005f0d8:	f7fd fc60 	bl	1005c99c <LL_cpe_set_tx_with_instant>
1005f0dc:	e015      	b.n	1005f10a <LL_phy_update+0x3ae>
1005f0de:	2016      	movs	r0, #22
1005f0e0:	70f0      	strb	r0, [r6, #3]
1005f0e2:	2011      	movs	r0, #17
1005f0e4:	70b0      	strb	r0, [r6, #2]
1005f0e6:	2003      	movs	r0, #3
1005f0e8:	7070      	strb	r0, [r6, #1]
1005f0ea:	7030      	strb	r0, [r6, #0]
1005f0ec:	7c88      	ldrb	r0, [r1, #18]
1005f0ee:	7130      	strb	r0, [r6, #4]
1005f0f0:	e7d3      	b.n	1005f09a <LL_phy_update+0x33e>
1005f0f2:	9d02      	ldr	r5, [sp, #8]
1005f0f4:	2d01      	cmp	r5, #1
1005f0f6:	d104      	bne.n	1005f102 <LL_phy_update+0x3a6>
1005f0f8:	2101      	movs	r1, #1
1005f0fa:	2202      	movs	r2, #2
1005f0fc:	4638      	mov	r0, r7
1005f0fe:	f7fd fc27 	bl	1005c950 <LL_cpe_set_blocked>
1005f102:	4638      	mov	r0, r7
1005f104:	4629      	mov	r1, r5
1005f106:	f7fd fc58 	bl	1005c9ba <LL_cpe_set_rx_with_instant>
1005f10a:	8860      	ldrh	r0, [r4, #2]
1005f10c:	2180      	movs	r1, #128	@ 0x80
1005f10e:	4301      	orrs	r1, r0
1005f110:	8061      	strh	r1, [r4, #2]
1005f112:	e6da      	b.n	1005eeca <LL_phy_update+0x16e>
1005f114:	2004      	movs	r0, #4
1005f116:	7430      	strb	r0, [r6, #16]
1005f118:	e7be      	b.n	1005f098 <LL_phy_update+0x33c>

1005f11a <LL_process_phy_upd_ind>:
1005f11a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005f11c:	9201      	str	r2, [sp, #4]
1005f11e:	460c      	mov	r4, r1
1005f120:	4606      	mov	r6, r0
1005f122:	f7fb fd79 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005f126:	4607      	mov	r7, r0
1005f128:	4630      	mov	r0, r6
1005f12a:	f7fb fda9 	bl	1005ac80 <llc_conn_get_phy_upd_cntxt_per_p>
1005f12e:	4605      	mov	r5, r0
1005f130:	202c      	movs	r0, #44	@ 0x2c
1005f132:	9702      	str	r7, [sp, #8]
1005f134:	5c39      	ldrb	r1, [r7, r0]
1005f136:	2903      	cmp	r1, #3
1005f138:	d111      	bne.n	1005f15e <LL_process_phy_upd_ind+0x44>
1005f13a:	7827      	ldrb	r7, [r4, #0]
1005f13c:	2001      	movs	r0, #1
1005f13e:	2f04      	cmp	r7, #4
1005f140:	d82e      	bhi.n	1005f1a0 <LL_process_phy_upd_ind+0x86>
1005f142:	2f03      	cmp	r7, #3
1005f144:	d02c      	beq.n	1005f1a0 <LL_process_phy_upd_ind+0x86>
1005f146:	7862      	ldrb	r2, [r4, #1]
1005f148:	2a04      	cmp	r2, #4
1005f14a:	d829      	bhi.n	1005f1a0 <LL_process_phy_upd_ind+0x86>
1005f14c:	2a03      	cmp	r2, #3
1005f14e:	d027      	beq.n	1005f1a0 <LL_process_phy_upd_ind+0x86>
1005f150:	9b02      	ldr	r3, [sp, #8]
1005f152:	3398      	adds	r3, #152	@ 0x98
1005f154:	726a      	strb	r2, [r5, #9]
1005f156:	722f      	strb	r7, [r5, #8]
1005f158:	8862      	ldrh	r2, [r4, #2]
1005f15a:	801a      	strh	r2, [r3, #0]
1005f15c:	e000      	b.n	1005f160 <LL_process_phy_upd_ind+0x46>
1005f15e:	7a2f      	ldrb	r7, [r5, #8]
1005f160:	2f00      	cmp	r7, #0
1005f162:	d102      	bne.n	1005f16a <LL_process_phy_upd_ind+0x50>
1005f164:	7a6a      	ldrb	r2, [r5, #9]
1005f166:	2a00      	cmp	r2, #0
1005f168:	d016      	beq.n	1005f198 <LL_process_phy_upd_ind+0x7e>
1005f16a:	2000      	movs	r0, #0
1005f16c:	2903      	cmp	r1, #3
1005f16e:	d117      	bne.n	1005f1a0 <LL_process_phy_upd_ind+0x86>
1005f170:	7a69      	ldrb	r1, [r5, #9]
1005f172:	2900      	cmp	r1, #0
1005f174:	d014      	beq.n	1005f1a0 <LL_process_phy_upd_ind+0x86>
1005f176:	79ea      	ldrb	r2, [r5, #7]
1005f178:	9b01      	ldr	r3, [sp, #4]
1005f17a:	9300      	str	r3, [sp, #0]
1005f17c:	403a      	ands	r2, r7
1005f17e:	0752      	lsls	r2, r2, #29
1005f180:	0fd2      	lsrs	r2, r2, #31
1005f182:	4604      	mov	r4, r0
1005f184:	2301      	movs	r3, #1
1005f186:	4630      	mov	r0, r6
1005f188:	f000 fa04 	bl	1005f594 <LL_adjust_max_tx_data_frag>
1005f18c:	7a69      	ldrb	r1, [r5, #9]
1005f18e:	4630      	mov	r0, r6
1005f190:	f7fe fe35 	bl	1005ddfe <LLC_connection_cte_response_pause_resume_ucfg_weak>
1005f194:	4620      	mov	r0, r4
1005f196:	e003      	b.n	1005f1a0 <LL_process_phy_upd_ind+0x86>
1005f198:	7921      	ldrb	r1, [r4, #4]
1005f19a:	2001      	movs	r0, #1
1005f19c:	2900      	cmp	r1, #0
1005f19e:	d000      	beq.n	1005f1a2 <LL_process_phy_upd_ind+0x88>
1005f1a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f1a2:	4604      	mov	r4, r0
1005f1a4:	79e9      	ldrb	r1, [r5, #7]
1005f1a6:	2003      	movs	r0, #3
1005f1a8:	074a      	lsls	r2, r1, #29
1005f1aa:	d500      	bpl.n	1005f1ae <LL_process_phy_upd_ind+0x94>
1005f1ac:	4601      	mov	r1, r0
1005f1ae:	9a02      	ldr	r2, [sp, #8]
1005f1b0:	8f52      	ldrh	r2, [r2, #58]	@ 0x3a
1005f1b2:	79ab      	ldrb	r3, [r5, #6]
1005f1b4:	9100      	str	r1, [sp, #0]
1005f1b6:	0759      	lsls	r1, r3, #29
1005f1b8:	d500      	bpl.n	1005f1bc <LL_process_phy_upd_ind+0xa2>
1005f1ba:	4603      	mov	r3, r0
1005f1bc:	2080      	movs	r0, #128	@ 0x80
1005f1be:	2100      	movs	r1, #0
1005f1c0:	f000 f9b2 	bl	1005f528 <hci_le_phy_update_complete_event_push>
1005f1c4:	e7e6      	b.n	1005f194 <LL_process_phy_upd_ind+0x7a>

1005f1c6 <LL_reset_max_tx_data_frag>:
1005f1c6:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005f1c8:	460d      	mov	r5, r1
1005f1ca:	4604      	mov	r4, r0
1005f1cc:	f7fb fd58 	bl	1005ac80 <llc_conn_get_phy_upd_cntxt_per_p>
1005f1d0:	2800      	cmp	r0, #0
1005f1d2:	d007      	beq.n	1005f1e4 <LL_reset_max_tx_data_frag+0x1e>
1005f1d4:	7981      	ldrb	r1, [r0, #6]
1005f1d6:	79c0      	ldrb	r0, [r0, #7]
1005f1d8:	2804      	cmp	r0, #4
1005f1da:	d107      	bne.n	1005f1ec <LL_reset_max_tx_data_frag+0x26>
1005f1dc:	4628      	mov	r0, r5
1005f1de:	300c      	adds	r0, #12
1005f1e0:	2201      	movs	r2, #1
1005f1e2:	e005      	b.n	1005f1f0 <LL_reset_max_tx_data_frag+0x2a>
1005f1e4:	1da8      	adds	r0, r5, #6
1005f1e6:	2200      	movs	r2, #0
1005f1e8:	2101      	movs	r1, #1
1005f1ea:	e001      	b.n	1005f1f0 <LL_reset_max_tx_data_frag+0x2a>
1005f1ec:	1da8      	adds	r0, r5, #6
1005f1ee:	2200      	movs	r2, #0
1005f1f0:	8800      	ldrh	r0, [r0, #0]
1005f1f2:	8068      	strh	r0, [r5, #2]
1005f1f4:	9500      	str	r5, [sp, #0]
1005f1f6:	2300      	movs	r3, #0
1005f1f8:	4620      	mov	r0, r4
1005f1fa:	f000 f9cb 	bl	1005f594 <LL_adjust_max_tx_data_frag>
1005f1fe:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1005f200 <LL_compute_phy_upd_ind>:
1005f200:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005f202:	460d      	mov	r5, r1
1005f204:	4604      	mov	r4, r0
1005f206:	f7fb fd3b 	bl	1005ac80 <llc_conn_get_phy_upd_cntxt_per_p>
1005f20a:	4606      	mov	r6, r0
1005f20c:	7928      	ldrb	r0, [r5, #4]
1005f20e:	2801      	cmp	r0, #1
1005f210:	9002      	str	r0, [sp, #8]
1005f212:	d114      	bne.n	1005f23e <LL_compute_phy_upd_ind+0x3e>
1005f214:	2500      	movs	r5, #0
1005f216:	4620      	mov	r0, r4
1005f218:	4629      	mov	r1, r5
1005f21a:	f7fd fbb6 	bl	1005c98a <LL_cpe_get_cntxt>
1005f21e:	4607      	mov	r7, r0
1005f220:	7d02      	ldrb	r2, [r0, #20]
1005f222:	7cc3      	ldrb	r3, [r0, #19]
1005f224:	4293      	cmp	r3, r2
1005f226:	9501      	str	r5, [sp, #4]
1005f228:	d105      	bne.n	1005f236 <LL_compute_phy_upd_ind+0x36>
1005f22a:	2b03      	cmp	r3, #3
1005f22c:	d302      	bcc.n	1005f234 <LL_compute_phy_upd_ind+0x34>
1005f22e:	2b04      	cmp	r3, #4
1005f230:	9d01      	ldr	r5, [sp, #4]
1005f232:	d100      	bne.n	1005f236 <LL_compute_phy_upd_ind+0x36>
1005f234:	2501      	movs	r5, #1
1005f236:	78f0      	ldrb	r0, [r6, #3]
1005f238:	4018      	ands	r0, r3
1005f23a:	78b3      	ldrb	r3, [r6, #2]
1005f23c:	e014      	b.n	1005f268 <LL_compute_phy_upd_ind+0x68>
1005f23e:	2101      	movs	r1, #1
1005f240:	4620      	mov	r0, r4
1005f242:	9101      	str	r1, [sp, #4]
1005f244:	f7fd fba1 	bl	1005c98a <LL_cpe_get_cntxt>
1005f248:	4607      	mov	r7, r0
1005f24a:	78ab      	ldrb	r3, [r5, #2]
1005f24c:	7543      	strb	r3, [r0, #21]
1005f24e:	78ea      	ldrb	r2, [r5, #3]
1005f250:	7582      	strb	r2, [r0, #22]
1005f252:	2500      	movs	r5, #0
1005f254:	4293      	cmp	r3, r2
1005f256:	d104      	bne.n	1005f262 <LL_compute_phy_upd_ind+0x62>
1005f258:	2b03      	cmp	r3, #3
1005f25a:	d301      	bcc.n	1005f260 <LL_compute_phy_upd_ind+0x60>
1005f25c:	2b04      	cmp	r3, #4
1005f25e:	d100      	bne.n	1005f262 <LL_compute_phy_upd_ind+0x62>
1005f260:	2501      	movs	r5, #1
1005f262:	7d38      	ldrb	r0, [r7, #20]
1005f264:	4018      	ands	r0, r3
1005f266:	7cfb      	ldrb	r3, [r7, #19]
1005f268:	4013      	ands	r3, r2
1005f26a:	2d00      	cmp	r5, #0
1005f26c:	d002      	beq.n	1005f274 <LL_compute_phy_upd_ind+0x74>
1005f26e:	4283      	cmp	r3, r0
1005f270:	4603      	mov	r3, r0
1005f272:	d107      	bne.n	1005f284 <LL_compute_phy_upd_ind+0x84>
1005f274:	2100      	movs	r1, #0
1005f276:	2b00      	cmp	r3, #0
1005f278:	460a      	mov	r2, r1
1005f27a:	d00a      	beq.n	1005f292 <LL_compute_phy_upd_ind+0x92>
1005f27c:	07da      	lsls	r2, r3, #31
1005f27e:	d004      	beq.n	1005f28a <LL_compute_phy_upd_ind+0x8a>
1005f280:	2201      	movs	r2, #1
1005f282:	e003      	b.n	1005f28c <LL_compute_phy_upd_ind+0x8c>
1005f284:	2200      	movs	r2, #0
1005f286:	4611      	mov	r1, r2
1005f288:	e00d      	b.n	1005f2a6 <LL_compute_phy_upd_ind+0xa6>
1005f28a:	2204      	movs	r2, #4
1005f28c:	079b      	lsls	r3, r3, #30
1005f28e:	d500      	bpl.n	1005f292 <LL_compute_phy_upd_ind+0x92>
1005f290:	2202      	movs	r2, #2
1005f292:	2800      	cmp	r0, #0
1005f294:	d007      	beq.n	1005f2a6 <LL_compute_phy_upd_ind+0xa6>
1005f296:	07c1      	lsls	r1, r0, #31
1005f298:	d001      	beq.n	1005f29e <LL_compute_phy_upd_ind+0x9e>
1005f29a:	2101      	movs	r1, #1
1005f29c:	e000      	b.n	1005f2a0 <LL_compute_phy_upd_ind+0xa0>
1005f29e:	2104      	movs	r1, #4
1005f2a0:	0780      	lsls	r0, r0, #30
1005f2a2:	d500      	bpl.n	1005f2a6 <LL_compute_phy_upd_ind+0xa6>
1005f2a4:	2102      	movs	r1, #2
1005f2a6:	79b3      	ldrb	r3, [r6, #6]
1005f2a8:	2000      	movs	r0, #0
1005f2aa:	429a      	cmp	r2, r3
1005f2ac:	4603      	mov	r3, r0
1005f2ae:	d000      	beq.n	1005f2b2 <LL_compute_phy_upd_ind+0xb2>
1005f2b0:	4613      	mov	r3, r2
1005f2b2:	7233      	strb	r3, [r6, #8]
1005f2b4:	79f2      	ldrb	r2, [r6, #7]
1005f2b6:	4291      	cmp	r1, r2
1005f2b8:	d000      	beq.n	1005f2bc <LL_compute_phy_upd_ind+0xbc>
1005f2ba:	4608      	mov	r0, r1
1005f2bc:	7270      	strb	r0, [r6, #9]
1005f2be:	4620      	mov	r0, r4
1005f2c0:	f7fb fcaa 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005f2c4:	4605      	mov	r5, r0
1005f2c6:	7a70      	ldrb	r0, [r6, #9]
1005f2c8:	2800      	cmp	r0, #0
1005f2ca:	d102      	bne.n	1005f2d2 <LL_compute_phy_upd_ind+0xd2>
1005f2cc:	7a30      	ldrb	r0, [r6, #8]
1005f2ce:	2800      	cmp	r0, #0
1005f2d0:	d015      	beq.n	1005f2fe <LL_compute_phy_upd_ind+0xfe>
1005f2d2:	4620      	mov	r0, r4
1005f2d4:	f7fe f922 	bl	1005d51c <llc_cpe_calc_instant>
1005f2d8:	2198      	movs	r1, #152	@ 0x98
1005f2da:	5268      	strh	r0, [r5, r1]
1005f2dc:	7a31      	ldrb	r1, [r6, #8]
1005f2de:	2900      	cmp	r1, #0
1005f2e0:	d010      	beq.n	1005f304 <LL_compute_phy_upd_ind+0x104>
1005f2e2:	79f0      	ldrb	r0, [r6, #7]
1005f2e4:	9700      	str	r7, [sp, #0]
1005f2e6:	4008      	ands	r0, r1
1005f2e8:	0740      	lsls	r0, r0, #29
1005f2ea:	0fc2      	lsrs	r2, r0, #31
1005f2ec:	2301      	movs	r3, #1
1005f2ee:	4620      	mov	r0, r4
1005f2f0:	f000 f950 	bl	1005f594 <LL_adjust_max_tx_data_frag>
1005f2f4:	7a31      	ldrb	r1, [r6, #8]
1005f2f6:	4620      	mov	r0, r4
1005f2f8:	f7fe fd81 	bl	1005ddfe <LLC_connection_cte_response_pause_resume_ucfg_weak>
1005f2fc:	e002      	b.n	1005f304 <LL_compute_phy_upd_ind+0x104>
1005f2fe:	2098      	movs	r0, #152	@ 0x98
1005f300:	2100      	movs	r1, #0
1005f302:	5229      	strh	r1, [r5, r0]
1005f304:	9802      	ldr	r0, [sp, #8]
1005f306:	2801      	cmp	r0, #1
1005f308:	d009      	beq.n	1005f31e <LL_compute_phy_upd_ind+0x11e>
1005f30a:	4620      	mov	r0, r4
1005f30c:	9d01      	ldr	r5, [sp, #4]
1005f30e:	4629      	mov	r1, r5
1005f310:	f7fd fb2e 	bl	1005c970 <LL_cpe_set_prepare_tx_pdu>
1005f314:	2202      	movs	r2, #2
1005f316:	4620      	mov	r0, r4
1005f318:	4629      	mov	r1, r5
1005f31a:	f7fd fb19 	bl	1005c950 <LL_cpe_set_blocked>
1005f31e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005f320 <LL_process_unknown_rsp_reject_ind_rcpt>:
1005f320:	b57c      	push	{r2, r3, r4, r5, r6, lr}
1005f322:	460d      	mov	r5, r1
1005f324:	4606      	mov	r6, r0
1005f326:	f7fb fcab 	bl	1005ac80 <llc_conn_get_phy_upd_cntxt_per_p>
1005f32a:	4604      	mov	r4, r0
1005f32c:	4630      	mov	r0, r6
1005f32e:	f7fb fc73 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005f332:	78a9      	ldrb	r1, [r5, #2]
1005f334:	2907      	cmp	r1, #7
1005f336:	d107      	bne.n	1005f348 <LL_process_unknown_rsp_reject_ind_rcpt+0x28>
1005f338:	21ff      	movs	r1, #255	@ 0xff
1005f33a:	3130      	adds	r1, #48	@ 0x30
1005f33c:	5c42      	ldrb	r2, [r0, r1]
1005f33e:	23f6      	movs	r3, #246	@ 0xf6
1005f340:	4013      	ands	r3, r2
1005f342:	5443      	strb	r3, [r0, r1]
1005f344:	211a      	movs	r1, #26
1005f346:	e000      	b.n	1005f34a <LL_process_unknown_rsp_reject_ind_rcpt+0x2a>
1005f348:	7869      	ldrb	r1, [r5, #1]
1005f34a:	78ea      	ldrb	r2, [r5, #3]
1005f34c:	2a00      	cmp	r2, #0
1005f34e:	d000      	beq.n	1005f352 <LL_process_unknown_rsp_reject_ind_rcpt+0x32>
1005f350:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
1005f352:	79e6      	ldrb	r6, [r4, #7]
1005f354:	2503      	movs	r5, #3
1005f356:	0772      	lsls	r2, r6, #29
1005f358:	d500      	bpl.n	1005f35c <LL_process_unknown_rsp_reject_ind_rcpt+0x3c>
1005f35a:	462e      	mov	r6, r5
1005f35c:	8f42      	ldrh	r2, [r0, #58]	@ 0x3a
1005f35e:	79a3      	ldrb	r3, [r4, #6]
1005f360:	9600      	str	r6, [sp, #0]
1005f362:	0758      	lsls	r0, r3, #29
1005f364:	d500      	bpl.n	1005f368 <LL_process_unknown_rsp_reject_ind_rcpt+0x48>
1005f366:	462b      	mov	r3, r5
1005f368:	2080      	movs	r0, #128	@ 0x80
1005f36a:	f000 f8dd 	bl	1005f528 <hci_le_phy_update_complete_event_push>
1005f36e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

1005f370 <LL_process_phy_req_rcpt>:
1005f370:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f372:	b085      	sub	sp, #20
1005f374:	460f      	mov	r7, r1
1005f376:	4604      	mov	r4, r0
1005f378:	f7fb fc4e 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005f37c:	4605      	mov	r5, r0
1005f37e:	2100      	movs	r1, #0
1005f380:	4620      	mov	r0, r4
1005f382:	9102      	str	r1, [sp, #8]
1005f384:	f7fd fb01 	bl	1005c98a <LL_cpe_get_cntxt>
1005f388:	4606      	mov	r6, r0
1005f38a:	2001      	movs	r0, #1
1005f38c:	9001      	str	r0, [sp, #4]
1005f38e:	7470      	strb	r0, [r6, #17]
1005f390:	78b8      	ldrb	r0, [r7, #2]
1005f392:	74f0      	strb	r0, [r6, #19]
1005f394:	78f8      	ldrb	r0, [r7, #3]
1005f396:	7530      	strb	r0, [r6, #20]
1005f398:	20b6      	movs	r0, #182	@ 0xb6
1005f39a:	5a28      	ldrh	r0, [r5, r0]
1005f39c:	81f0      	strh	r0, [r6, #14]
1005f39e:	a803      	add	r0, sp, #12
1005f3a0:	7104      	strb	r4, [r0, #4]
1005f3a2:	9603      	str	r6, [sp, #12]
1005f3a4:	f7ff fc90 	bl	1005ecc8 <LL_phy_upd_compute_data_PDU_length_params_ucfg_weak>
1005f3a8:	202c      	movs	r0, #44	@ 0x2c
1005f3aa:	5c28      	ldrb	r0, [r5, r0]
1005f3ac:	352c      	adds	r5, #44	@ 0x2c
1005f3ae:	2802      	cmp	r0, #2
1005f3b0:	d108      	bne.n	1005f3c4 <LL_process_phy_req_rcpt+0x54>
1005f3b2:	7c70      	ldrb	r0, [r6, #17]
1005f3b4:	7138      	strb	r0, [r7, #4]
1005f3b6:	4620      	mov	r0, r4
1005f3b8:	4639      	mov	r1, r7
1005f3ba:	f7ff ff21 	bl	1005f200 <LL_compute_phy_upd_ind>
1005f3be:	9802      	ldr	r0, [sp, #8]
1005f3c0:	7430      	strb	r0, [r6, #16]
1005f3c2:	e025      	b.n	1005f410 <LL_process_phy_req_rcpt+0xa0>
1005f3c4:	4620      	mov	r0, r4
1005f3c6:	f7fb fc5b 	bl	1005ac80 <llc_conn_get_phy_upd_cntxt_per_p>
1005f3ca:	7881      	ldrb	r1, [r0, #2]
1005f3cc:	7571      	strb	r1, [r6, #21]
1005f3ce:	78c7      	ldrb	r7, [r0, #3]
1005f3d0:	75b7      	strb	r7, [r6, #22]
1005f3d2:	7d33      	ldrb	r3, [r6, #20]
1005f3d4:	400b      	ands	r3, r1
1005f3d6:	b2db      	uxtb	r3, r3
1005f3d8:	2b00      	cmp	r3, #0
1005f3da:	d019      	beq.n	1005f410 <LL_process_phy_req_rcpt+0xa0>
1005f3dc:	7981      	ldrb	r1, [r0, #6]
1005f3de:	428b      	cmp	r3, r1
1005f3e0:	d016      	beq.n	1005f410 <LL_process_phy_req_rcpt+0xa0>
1005f3e2:	07d9      	lsls	r1, r3, #31
1005f3e4:	d002      	beq.n	1005f3ec <LL_process_phy_req_rcpt+0x7c>
1005f3e6:	9a01      	ldr	r2, [sp, #4]
1005f3e8:	4611      	mov	r1, r2
1005f3ea:	e001      	b.n	1005f3f0 <LL_process_phy_req_rcpt+0x80>
1005f3ec:	2102      	movs	r1, #2
1005f3ee:	9a01      	ldr	r2, [sp, #4]
1005f3f0:	075b      	lsls	r3, r3, #29
1005f3f2:	d500      	bpl.n	1005f3f6 <LL_process_phy_req_rcpt+0x86>
1005f3f4:	2104      	movs	r1, #4
1005f3f6:	7cf3      	ldrb	r3, [r6, #19]
1005f3f8:	401f      	ands	r7, r3
1005f3fa:	077b      	lsls	r3, r7, #29
1005f3fc:	d403      	bmi.n	1005f406 <LL_process_phy_req_rcpt+0x96>
1005f3fe:	79c0      	ldrb	r0, [r0, #7]
1005f400:	1f00      	subs	r0, r0, #4
1005f402:	4242      	negs	r2, r0
1005f404:	4142      	adcs	r2, r0
1005f406:	9600      	str	r6, [sp, #0]
1005f408:	2301      	movs	r3, #1
1005f40a:	4620      	mov	r0, r4
1005f40c:	f000 f8c2 	bl	1005f594 <LL_adjust_max_tx_data_frag>
1005f410:	2600      	movs	r6, #0
1005f412:	4620      	mov	r0, r4
1005f414:	4631      	mov	r1, r6
1005f416:	f7fd faab 	bl	1005c970 <LL_cpe_set_prepare_tx_pdu>
1005f41a:	2207      	movs	r2, #7
1005f41c:	2301      	movs	r3, #1
1005f41e:	4620      	mov	r0, r4
1005f420:	4631      	mov	r1, r6
1005f422:	f7fd fa5c 	bl	1005c8de <LL_cpe_set_active>
1005f426:	7828      	ldrb	r0, [r5, #0]
1005f428:	2802      	cmp	r0, #2
1005f42a:	d104      	bne.n	1005f436 <LL_process_phy_req_rcpt+0xc6>
1005f42c:	2100      	movs	r1, #0
1005f42e:	2202      	movs	r2, #2
1005f430:	4620      	mov	r0, r4
1005f432:	f7fd fa8d 	bl	1005c950 <LL_cpe_set_blocked>
1005f436:	b005      	add	sp, #20
1005f438:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1005f43c <LL_phy_upd_evt_pending_check_isr>:
1005f43c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f43e:	b087      	sub	sp, #28
1005f440:	4605      	mov	r5, r0
1005f442:	f7fb fbe9 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005f446:	4604      	mov	r4, r0
1005f448:	4628      	mov	r0, r5
1005f44a:	f7fb fc19 	bl	1005ac80 <llc_conn_get_phy_upd_cntxt_per_p>
1005f44e:	4605      	mov	r5, r0
1005f450:	209a      	movs	r0, #154	@ 0x9a
1005f452:	5a26      	ldrh	r6, [r4, r0]
1005f454:	05b0      	lsls	r0, r6, #22
1005f456:	4627      	mov	r7, r4
1005f458:	379a      	adds	r7, #154	@ 0x9a
1005f45a:	2800      	cmp	r0, #0
1005f45c:	d545      	bpl.n	1005f4ea <LL_phy_upd_evt_pending_check_isr+0xae>
1005f45e:	482e      	ldr	r0, [pc, #184]	@ (1005f518 <__arm_cp.15_0>)
1005f460:	6800      	ldr	r0, [r0, #0]
1005f462:	213d      	movs	r1, #61	@ 0x3d
1005f464:	5c41      	ldrb	r1, [r0, r1]
1005f466:	0689      	lsls	r1, r1, #26
1005f468:	d53b      	bpl.n	1005f4e2 <LL_phy_upd_evt_pending_check_isr+0xa6>
1005f46a:	303d      	adds	r0, #61	@ 0x3d
1005f46c:	7a40      	ldrb	r0, [r0, #9]
1005f46e:	0640      	lsls	r0, r0, #25
1005f470:	d537      	bpl.n	1005f4e2 <LL_phy_upd_evt_pending_check_isr+0xa6>
1005f472:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
1005f474:	9002      	str	r0, [sp, #8]
1005f476:	8bf8      	ldrh	r0, [r7, #30]
1005f478:	9003      	str	r0, [sp, #12]
1005f47a:	8c38      	ldrh	r0, [r7, #32]
1005f47c:	9004      	str	r0, [sp, #16]
1005f47e:	8b78      	ldrh	r0, [r7, #26]
1005f480:	9005      	str	r0, [sp, #20]
1005f482:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
1005f484:	9006      	str	r0, [sp, #24]
1005f486:	4825      	ldr	r0, [pc, #148]	@ (1005f51c <__arm_cp.15_1>)
1005f488:	6800      	ldr	r0, [r0, #0]
1005f48a:	6900      	ldr	r0, [r0, #16]
1005f48c:	2180      	movs	r1, #128	@ 0x80
1005f48e:	2226      	movs	r2, #38	@ 0x26
1005f490:	2304      	movs	r3, #4
1005f492:	9301      	str	r3, [sp, #4]
1005f494:	f7f6 fc9a 	bl	10055dcc <aci_event_fifo_push_header>
1005f498:	2800      	cmp	r0, #0
1005f49a:	d022      	beq.n	1005f4e2 <LL_phy_upd_evt_pending_check_isr+0xa6>
1005f49c:	4601      	mov	r1, r0
1005f49e:	9a02      	ldr	r2, [sp, #8]
1005f4a0:	7402      	strb	r2, [r0, #16]
1005f4a2:	9b03      	ldr	r3, [sp, #12]
1005f4a4:	7383      	strb	r3, [r0, #14]
1005f4a6:	9804      	ldr	r0, [sp, #16]
1005f4a8:	7308      	strb	r0, [r1, #12]
1005f4aa:	9805      	ldr	r0, [sp, #20]
1005f4ac:	7288      	strb	r0, [r1, #10]
1005f4ae:	9806      	ldr	r0, [sp, #24]
1005f4b0:	7208      	strb	r0, [r1, #8]
1005f4b2:	2007      	movs	r0, #7
1005f4b4:	71c8      	strb	r0, [r1, #7]
1005f4b6:	200b      	movs	r0, #11
1005f4b8:	7188      	strb	r0, [r1, #6]
1005f4ba:	203e      	movs	r0, #62	@ 0x3e
1005f4bc:	7148      	strb	r0, [r1, #5]
1005f4be:	9801      	ldr	r0, [sp, #4]
1005f4c0:	7108      	strb	r0, [r1, #4]
1005f4c2:	0a10      	lsrs	r0, r2, #8
1005f4c4:	7448      	strb	r0, [r1, #17]
1005f4c6:	0a18      	lsrs	r0, r3, #8
1005f4c8:	73c8      	strb	r0, [r1, #15]
1005f4ca:	9804      	ldr	r0, [sp, #16]
1005f4cc:	0a00      	lsrs	r0, r0, #8
1005f4ce:	7348      	strb	r0, [r1, #13]
1005f4d0:	9805      	ldr	r0, [sp, #20]
1005f4d2:	0a00      	lsrs	r0, r0, #8
1005f4d4:	72c8      	strb	r0, [r1, #11]
1005f4d6:	9806      	ldr	r0, [sp, #24]
1005f4d8:	0a00      	lsrs	r0, r0, #8
1005f4da:	7248      	strb	r0, [r1, #9]
1005f4dc:	2080      	movs	r0, #128	@ 0x80
1005f4de:	f7f6 fd12 	bl	10055f06 <aci_event_fifo_push>
1005f4e2:	8838      	ldrh	r0, [r7, #0]
1005f4e4:	490e      	ldr	r1, [pc, #56]	@ (1005f520 <__arm_cp.15_2>)
1005f4e6:	4001      	ands	r1, r0
1005f4e8:	8039      	strh	r1, [r7, #0]
1005f4ea:	05f0      	lsls	r0, r6, #23
1005f4ec:	d512      	bpl.n	1005f514 <LL_phy_upd_evt_pending_check_isr+0xd8>
1005f4ee:	79e9      	ldrb	r1, [r5, #7]
1005f4f0:	2003      	movs	r0, #3
1005f4f2:	074a      	lsls	r2, r1, #29
1005f4f4:	d500      	bpl.n	1005f4f8 <LL_phy_upd_evt_pending_check_isr+0xbc>
1005f4f6:	4601      	mov	r1, r0
1005f4f8:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
1005f4fa:	79ab      	ldrb	r3, [r5, #6]
1005f4fc:	9100      	str	r1, [sp, #0]
1005f4fe:	0759      	lsls	r1, r3, #29
1005f500:	d500      	bpl.n	1005f504 <LL_phy_upd_evt_pending_check_isr+0xc8>
1005f502:	4603      	mov	r3, r0
1005f504:	2080      	movs	r0, #128	@ 0x80
1005f506:	2100      	movs	r1, #0
1005f508:	f000 f80e 	bl	1005f528 <hci_le_phy_update_complete_event_push>
1005f50c:	8838      	ldrh	r0, [r7, #0]
1005f50e:	4905      	ldr	r1, [pc, #20]	@ (1005f524 <__arm_cp.15_3>)
1005f510:	4001      	ands	r1, r0
1005f512:	8039      	strh	r1, [r7, #0]
1005f514:	b007      	add	sp, #28
1005f516:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f518 <__arm_cp.15_0>:
1005f518:	20002958 	.word	0x20002958

1005f51c <__arm_cp.15_1>:
1005f51c:	20002908 	.word	0x20002908

1005f520 <__arm_cp.15_2>:
1005f520:	0000fdff 	.word	0x0000fdff

1005f524 <__arm_cp.15_3>:
1005f524:	0000feff 	.word	0x0000feff

1005f528 <hci_le_phy_update_complete_event_push>:
1005f528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f52a:	4604      	mov	r4, r0
1005f52c:	06c0      	lsls	r0, r0, #27
1005f52e:	d42c      	bmi.n	1005f58a <hci_le_phy_update_complete_event_push+0x62>
1005f530:	460f      	mov	r7, r1
1005f532:	4816      	ldr	r0, [pc, #88]	@ (1005f58c <__arm_cp.16_0>)
1005f534:	6800      	ldr	r0, [r0, #0]
1005f536:	213d      	movs	r1, #61	@ 0x3d
1005f538:	5c41      	ldrb	r1, [r0, r1]
1005f53a:	0689      	lsls	r1, r1, #26
1005f53c:	d525      	bpl.n	1005f58a <hci_le_phy_update_complete_event_push+0x62>
1005f53e:	303d      	adds	r0, #61	@ 0x3d
1005f540:	7a80      	ldrb	r0, [r0, #10]
1005f542:	0700      	lsls	r0, r0, #28
1005f544:	d521      	bpl.n	1005f58a <hci_le_phy_update_complete_event_push+0x62>
1005f546:	461e      	mov	r6, r3
1005f548:	4615      	mov	r5, r2
1005f54a:	4811      	ldr	r0, [pc, #68]	@ (1005f590 <__arm_cp.16_1>)
1005f54c:	6800      	ldr	r0, [r0, #0]
1005f54e:	0761      	lsls	r1, r4, #29
1005f550:	0ec9      	lsrs	r1, r1, #27
1005f552:	1840      	adds	r0, r0, r1
1005f554:	6900      	ldr	r0, [r0, #16]
1005f556:	2227      	movs	r2, #39	@ 0x27
1005f558:	2303      	movs	r3, #3
1005f55a:	4621      	mov	r1, r4
1005f55c:	f7f6 fc36 	bl	10055dcc <aci_event_fifo_push_header>
1005f560:	2800      	cmp	r0, #0
1005f562:	d012      	beq.n	1005f58a <hci_le_phy_update_complete_event_push+0x62>
1005f564:	4601      	mov	r1, r0
1005f566:	9806      	ldr	r0, [sp, #24]
1005f568:	724d      	strb	r5, [r1, #9]
1005f56a:	7308      	strb	r0, [r1, #12]
1005f56c:	72ce      	strb	r6, [r1, #11]
1005f56e:	720f      	strb	r7, [r1, #8]
1005f570:	200c      	movs	r0, #12
1005f572:	71c8      	strb	r0, [r1, #7]
1005f574:	2006      	movs	r0, #6
1005f576:	7188      	strb	r0, [r1, #6]
1005f578:	203e      	movs	r0, #62	@ 0x3e
1005f57a:	7148      	strb	r0, [r1, #5]
1005f57c:	2004      	movs	r0, #4
1005f57e:	7108      	strb	r0, [r1, #4]
1005f580:	0a28      	lsrs	r0, r5, #8
1005f582:	7288      	strb	r0, [r1, #10]
1005f584:	4620      	mov	r0, r4
1005f586:	f7f6 fcbe 	bl	10055f06 <aci_event_fifo_push>
1005f58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005f58c <__arm_cp.16_0>:
1005f58c:	20002958 	.word	0x20002958

1005f590 <__arm_cp.16_1>:
1005f590:	20002908 	.word	0x20002908

1005f594 <LL_adjust_max_tx_data_frag>:
1005f594:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005f596:	9302      	str	r3, [sp, #8]
1005f598:	9201      	str	r2, [sp, #4]
1005f59a:	460e      	mov	r6, r1
1005f59c:	4605      	mov	r5, r0
1005f59e:	f7fb fb3b 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005f5a2:	4604      	mov	r4, r0
1005f5a4:	4607      	mov	r7, r0
1005f5a6:	34b4      	adds	r4, #180	@ 0xb4
1005f5a8:	4628      	mov	r0, r5
1005f5aa:	f7fb fb69 	bl	1005ac80 <llc_conn_get_phy_upd_cntxt_per_p>
1005f5ae:	9908      	ldr	r1, [sp, #32]
1005f5b0:	2e04      	cmp	r6, #4
1005f5b2:	d106      	bne.n	1005f5c2 <LL_adjust_max_tx_data_frag+0x2e>
1005f5b4:	2800      	cmp	r0, #0
1005f5b6:	d004      	beq.n	1005f5c2 <LL_adjust_max_tx_data_frag+0x2e>
1005f5b8:	9a01      	ldr	r2, [sp, #4]
1005f5ba:	2a00      	cmp	r2, #0
1005f5bc:	d00c      	beq.n	1005f5d8 <LL_adjust_max_tx_data_frag+0x44>
1005f5be:	220a      	movs	r2, #10
1005f5c0:	e00b      	b.n	1005f5da <LL_adjust_max_tx_data_frag+0x46>
1005f5c2:	8888      	ldrh	r0, [r1, #4]
1005f5c4:	8008      	strh	r0, [r1, #0]
1005f5c6:	2e01      	cmp	r6, #1
1005f5c8:	d102      	bne.n	1005f5d0 <LL_adjust_max_tx_data_frag+0x3c>
1005f5ca:	08c0      	lsrs	r0, r0, #3
1005f5cc:	380e      	subs	r0, #14
1005f5ce:	e001      	b.n	1005f5d4 <LL_adjust_max_tx_data_frag+0x40>
1005f5d0:	0880      	lsrs	r0, r0, #2
1005f5d2:	380f      	subs	r0, #15
1005f5d4:	9e02      	ldr	r6, [sp, #8]
1005f5d6:	e00f      	b.n	1005f5f8 <LL_adjust_max_tx_data_frag+0x64>
1005f5d8:	2208      	movs	r2, #8
1005f5da:	9e02      	ldr	r6, [sp, #8]
1005f5dc:	5a8a      	ldrh	r2, [r1, r2]
1005f5de:	800a      	strh	r2, [r1, #0]
1005f5e0:	8800      	ldrh	r0, [r0, #0]
1005f5e2:	2802      	cmp	r0, #2
1005f5e4:	d001      	beq.n	1005f5ea <LL_adjust_max_tx_data_frag+0x56>
1005f5e6:	2001      	movs	r0, #1
1005f5e8:	e000      	b.n	1005f5ec <LL_adjust_max_tx_data_frag+0x58>
1005f5ea:	2003      	movs	r0, #3
1005f5ec:	4b0b      	ldr	r3, [pc, #44]	@ (1005f61c <__arm_cp.20_0>)
1005f5ee:	18d2      	adds	r2, r2, r3
1005f5f0:	40c2      	lsrs	r2, r0
1005f5f2:	480b      	ldr	r0, [pc, #44]	@ (1005f620 <__arm_cp.20_1>)
1005f5f4:	1810      	adds	r0, r2, r0
1005f5f6:	08c0      	lsrs	r0, r0, #3
1005f5f8:	b283      	uxth	r3, r0
1005f5fa:	8822      	ldrh	r2, [r4, #0]
1005f5fc:	429a      	cmp	r2, r3
1005f5fe:	d300      	bcc.n	1005f602 <LL_adjust_max_tx_data_frag+0x6e>
1005f600:	4602      	mov	r2, r0
1005f602:	2e00      	cmp	r6, #0
1005f604:	d003      	beq.n	1005f60e <LL_adjust_max_tx_data_frag+0x7a>
1005f606:	b293      	uxth	r3, r2
1005f608:	89c8      	ldrh	r0, [r1, #14]
1005f60a:	4298      	cmp	r0, r3
1005f60c:	d300      	bcc.n	1005f610 <LL_adjust_max_tx_data_frag+0x7c>
1005f60e:	4610      	mov	r0, r2
1005f610:	8060      	strh	r0, [r4, #2]
1005f612:	4638      	mov	r0, r7
1005f614:	f7fb fdca 	bl	1005b1ac <llc_conn_guard_time_for_close_conn_event>
1005f618:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f61a:	46c0      	nop			@ (mov r8, r8)

1005f61c <__arm_cp.20_0>:
1005f61c:	fffffe88 	.word	0xfffffe88

1005f620 <__arm_cp.20_1>:
1005f620:	0007ffb5 	.word	0x0007ffb5

1005f624 <LL_version_exchange>:
1005f624:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f626:	b087      	sub	sp, #28
1005f628:	461f      	mov	r7, r3
1005f62a:	4616      	mov	r6, r2
1005f62c:	460c      	mov	r4, r1
1005f62e:	4605      	mov	r5, r0
1005f630:	f7fd f9ab 	bl	1005c98a <LL_cpe_get_cntxt>
1005f634:	9004      	str	r0, [sp, #16]
1005f636:	4628      	mov	r0, r5
1005f638:	f7fb faee 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005f63c:	22ff      	movs	r2, #255	@ 0xff
1005f63e:	2e06      	cmp	r6, #6
1005f640:	d900      	bls.n	1005f644 <LL_version_exchange+0x20>
1005f642:	e0b2      	b.n	1005f7aa <LL_version_exchange+0x186>
1005f644:	4603      	mov	r3, r0
1005f646:	46c0      	nop			@ (mov r8, r8)
1005f648:	447e      	add	r6, pc
1005f64a:	7936      	ldrb	r6, [r6, #4]
1005f64c:	0076      	lsls	r6, r6, #1
1005f64e:	44b7      	add	pc, r6
1005f650:	3aac0e03 	.word	0x3aac0e03
1005f654:	0053acac 	.word	0x0053acac
1005f658:	2c01      	cmp	r4, #1
1005f65a:	d15c      	bne.n	1005f716 <LL_version_exchange+0xf2>
1005f65c:	208c      	movs	r0, #140	@ 0x8c
1005f65e:	5818      	ldr	r0, [r3, r0]
1005f660:	0601      	lsls	r1, r0, #24
1005f662:	338c      	adds	r3, #140	@ 0x8c
1005f664:	2900      	cmp	r1, #0
1005f666:	9904      	ldr	r1, [sp, #16]
1005f668:	d460      	bmi.n	1005f72c <LL_version_exchange+0x108>
1005f66a:	220c      	movs	r2, #12
1005f66c:	e06c      	b.n	1005f748 <LL_version_exchange+0x124>
1005f66e:	9302      	str	r3, [sp, #8]
1005f670:	9203      	str	r2, [sp, #12]
1005f672:	4628      	mov	r0, r5
1005f674:	f000 f8d4 	bl	1005f820 <LL_conn_get_version_exchange_cached>
1005f678:	2800      	cmp	r0, #0
1005f67a:	d000      	beq.n	1005f67e <LL_version_exchange+0x5a>
1005f67c:	e094      	b.n	1005f7a8 <LL_version_exchange+0x184>
1005f67e:	1cf8      	adds	r0, r7, #3
1005f680:	2205      	movs	r2, #5
1005f682:	9201      	str	r2, [sp, #4]
1005f684:	9e04      	ldr	r6, [sp, #16]
1005f686:	4631      	mov	r1, r6
1005f688:	f004 f872 	bl	10063770 <char_copy>
1005f68c:	9f02      	ldr	r7, [sp, #8]
1005f68e:	4639      	mov	r1, r7
1005f690:	313c      	adds	r1, #60	@ 0x3c
1005f692:	4630      	mov	r0, r6
1005f694:	9a01      	ldr	r2, [sp, #4]
1005f696:	f004 f86b 	bl	10063770 <char_copy>
1005f69a:	208c      	movs	r0, #140	@ 0x8c
1005f69c:	5838      	ldr	r0, [r7, r0]
1005f69e:	0642      	lsls	r2, r0, #25
1005f6a0:	4639      	mov	r1, r7
1005f6a2:	318c      	adds	r1, #140	@ 0x8c
1005f6a4:	2a00      	cmp	r2, #0
1005f6a6:	d46e      	bmi.n	1005f786 <LL_version_exchange+0x162>
1005f6a8:	2201      	movs	r2, #1
1005f6aa:	0212      	lsls	r2, r2, #8
1005f6ac:	4310      	orrs	r0, r2
1005f6ae:	6008      	str	r0, [r1, #0]
1005f6b0:	4628      	mov	r0, r5
1005f6b2:	4621      	mov	r1, r4
1005f6b4:	f7fd f95c 	bl	1005c970 <LL_cpe_set_prepare_tx_pdu>
1005f6b8:	2205      	movs	r2, #5
1005f6ba:	2300      	movs	r3, #0
1005f6bc:	4628      	mov	r0, r5
1005f6be:	4621      	mov	r1, r4
1005f6c0:	f7fd f90d 	bl	1005c8de <LL_cpe_set_active>
1005f6c4:	e070      	b.n	1005f7a8 <LL_version_exchange+0x184>
1005f6c6:	78b8      	ldrb	r0, [r7, #2]
1005f6c8:	280c      	cmp	r0, #12
1005f6ca:	d16e      	bne.n	1005f7aa <LL_version_exchange+0x186>
1005f6cc:	1cf8      	adds	r0, r7, #3
1005f6ce:	2605      	movs	r6, #5
1005f6d0:	9f04      	ldr	r7, [sp, #16]
1005f6d2:	4639      	mov	r1, r7
1005f6d4:	9203      	str	r2, [sp, #12]
1005f6d6:	4632      	mov	r2, r6
1005f6d8:	9302      	str	r3, [sp, #8]
1005f6da:	f004 f849 	bl	10063770 <char_copy>
1005f6de:	4628      	mov	r0, r5
1005f6e0:	4621      	mov	r1, r4
1005f6e2:	4632      	mov	r2, r6
1005f6e4:	f7fd f912 	bl	1005c90c <LL_cpe_clr_active>
1005f6e8:	9802      	ldr	r0, [sp, #8]
1005f6ea:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
1005f6ec:	4639      	mov	r1, r7
1005f6ee:	f000 f86f 	bl	1005f7d0 <hci_read_remote_version_information_complete_event_push>
1005f6f2:	4628      	mov	r0, r5
1005f6f4:	4639      	mov	r1, r7
1005f6f6:	e055      	b.n	1005f7a4 <LL_version_exchange+0x180>
1005f6f8:	4616      	mov	r6, r2
1005f6fa:	a806      	add	r0, sp, #24
1005f6fc:	2130      	movs	r1, #48	@ 0x30
1005f6fe:	8001      	strh	r1, [r0, #0]
1005f700:	2c01      	cmp	r4, #1
1005f702:	d12a      	bne.n	1005f75a <LL_version_exchange+0x136>
1005f704:	208c      	movs	r0, #140	@ 0x8c
1005f706:	5818      	ldr	r0, [r3, r0]
1005f708:	05c1      	lsls	r1, r0, #23
1005f70a:	d421      	bmi.n	1005f750 <LL_version_exchange+0x12c>
1005f70c:	338c      	adds	r3, #140	@ 0x8c
1005f70e:	2140      	movs	r1, #64	@ 0x40
1005f710:	4308      	orrs	r0, r1
1005f712:	6018      	str	r0, [r3, #0]
1005f714:	e021      	b.n	1005f75a <LL_version_exchange+0x136>
1005f716:	4616      	mov	r6, r2
1005f718:	2205      	movs	r2, #5
1005f71a:	4628      	mov	r0, r5
1005f71c:	4621      	mov	r1, r4
1005f71e:	f7fd f8f5 	bl	1005c90c <LL_cpe_clr_active>
1005f722:	4628      	mov	r0, r5
1005f724:	9904      	ldr	r1, [sp, #16]
1005f726:	f000 f843 	bl	1005f7b0 <LL_conn_version_exchange_set_cached>
1005f72a:	e02a      	b.n	1005f782 <LL_version_exchange+0x15e>
1005f72c:	4628      	mov	r0, r5
1005f72e:	461c      	mov	r4, r3
1005f730:	f000 f83e 	bl	1005f7b0 <LL_conn_version_exchange_set_cached>
1005f734:	2101      	movs	r1, #1
1005f736:	2205      	movs	r2, #5
1005f738:	4628      	mov	r0, r5
1005f73a:	f7fd f8e7 	bl	1005c90c <LL_cpe_clr_active>
1005f73e:	4623      	mov	r3, r4
1005f740:	6820      	ldr	r0, [r4, #0]
1005f742:	2180      	movs	r1, #128	@ 0x80
1005f744:	4388      	bics	r0, r1
1005f746:	22ff      	movs	r2, #255	@ 0xff
1005f748:	2140      	movs	r1, #64	@ 0x40
1005f74a:	4388      	bics	r0, r1
1005f74c:	6018      	str	r0, [r3, #0]
1005f74e:	e02c      	b.n	1005f7aa <LL_version_exchange+0x186>
1005f750:	2101      	movs	r1, #1
1005f752:	2205      	movs	r2, #5
1005f754:	4628      	mov	r0, r5
1005f756:	f7fd f8d9 	bl	1005c90c <LL_cpe_clr_active>
1005f75a:	200d      	movs	r0, #13
1005f75c:	70f8      	strb	r0, [r7, #3]
1005f75e:	200c      	movs	r0, #12
1005f760:	70b8      	strb	r0, [r7, #2]
1005f762:	2006      	movs	r0, #6
1005f764:	7078      	strb	r0, [r7, #1]
1005f766:	2503      	movs	r5, #3
1005f768:	703d      	strb	r5, [r7, #0]
1005f76a:	1d39      	adds	r1, r7, #4
1005f76c:	a806      	add	r0, sp, #24
1005f76e:	2402      	movs	r4, #2
1005f770:	4622      	mov	r2, r4
1005f772:	f003 fffd 	bl	10063770 <char_copy>
1005f776:	a805      	add	r0, sp, #20
1005f778:	8005      	strh	r5, [r0, #0]
1005f77a:	1db9      	adds	r1, r7, #6
1005f77c:	4622      	mov	r2, r4
1005f77e:	f003 fff7 	bl	10063770 <char_copy>
1005f782:	4632      	mov	r2, r6
1005f784:	e011      	b.n	1005f7aa <LL_version_exchange+0x186>
1005f786:	2280      	movs	r2, #128	@ 0x80
1005f788:	4310      	orrs	r0, r2
1005f78a:	6008      	str	r0, [r1, #0]
1005f78c:	2205      	movs	r2, #5
1005f78e:	4628      	mov	r0, r5
1005f790:	4621      	mov	r1, r4
1005f792:	463c      	mov	r4, r7
1005f794:	f7fd f8ba 	bl	1005c90c <LL_cpe_clr_active>
1005f798:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
1005f79a:	4631      	mov	r1, r6
1005f79c:	f000 f818 	bl	1005f7d0 <hci_read_remote_version_information_complete_event_push>
1005f7a0:	4628      	mov	r0, r5
1005f7a2:	4631      	mov	r1, r6
1005f7a4:	f000 f804 	bl	1005f7b0 <LL_conn_version_exchange_set_cached>
1005f7a8:	9a03      	ldr	r2, [sp, #12]
1005f7aa:	4610      	mov	r0, r2
1005f7ac:	b007      	add	sp, #28
1005f7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f7b0 <LL_conn_version_exchange_set_cached>:
1005f7b0:	b510      	push	{r4, lr}
1005f7b2:	460c      	mov	r4, r1
1005f7b4:	f7fb fa30 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005f7b8:	4601      	mov	r1, r0
1005f7ba:	208c      	movs	r0, #140	@ 0x8c
1005f7bc:	580a      	ldr	r2, [r1, r0]
1005f7be:	2308      	movs	r3, #8
1005f7c0:	4313      	orrs	r3, r2
1005f7c2:	500b      	str	r3, [r1, r0]
1005f7c4:	313c      	adds	r1, #60	@ 0x3c
1005f7c6:	2205      	movs	r2, #5
1005f7c8:	4620      	mov	r0, r4
1005f7ca:	f003 ffd1 	bl	10063770 <char_copy>
1005f7ce:	bd10      	pop	{r4, pc}

1005f7d0 <hci_read_remote_version_information_complete_event_push>:
1005f7d0:	b570      	push	{r4, r5, r6, lr}
1005f7d2:	460c      	mov	r4, r1
1005f7d4:	4605      	mov	r5, r0
1005f7d6:	4810      	ldr	r0, [pc, #64]	@ (1005f818 <__arm_cp.2_0>)
1005f7d8:	6800      	ldr	r0, [r0, #0]
1005f7da:	2137      	movs	r1, #55	@ 0x37
1005f7dc:	5c40      	ldrb	r0, [r0, r1]
1005f7de:	0700      	lsls	r0, r0, #28
1005f7e0:	d519      	bpl.n	1005f816 <hci_read_remote_version_information_complete_event_push+0x46>
1005f7e2:	480e      	ldr	r0, [pc, #56]	@ (1005f81c <__arm_cp.2_1>)
1005f7e4:	6800      	ldr	r0, [r0, #0]
1005f7e6:	6980      	ldr	r0, [r0, #24]
1005f7e8:	2102      	movs	r1, #2
1005f7ea:	2221      	movs	r2, #33	@ 0x21
1005f7ec:	2303      	movs	r3, #3
1005f7ee:	f7f6 faed 	bl	10055dcc <aci_event_fifo_push_header>
1005f7f2:	2800      	cmp	r0, #0
1005f7f4:	d00f      	beq.n	1005f816 <hci_read_remote_version_information_complete_event_push+0x46>
1005f7f6:	4606      	mov	r6, r0
1005f7f8:	1d00      	adds	r0, r0, #4
1005f7fa:	4629      	mov	r1, r5
1005f7fc:	4622      	mov	r2, r4
1005f7fe:	f7f6 fe07 	bl	10056410 <hci_read_remote_version_information_complete_event_copy>
1005f802:	2008      	movs	r0, #8
1005f804:	71b0      	strb	r0, [r6, #6]
1005f806:	200c      	movs	r0, #12
1005f808:	7170      	strb	r0, [r6, #5]
1005f80a:	2004      	movs	r0, #4
1005f80c:	7130      	strb	r0, [r6, #4]
1005f80e:	2002      	movs	r0, #2
1005f810:	4631      	mov	r1, r6
1005f812:	f7f6 fb78 	bl	10055f06 <aci_event_fifo_push>
1005f816:	bd70      	pop	{r4, r5, r6, pc}

1005f818 <__arm_cp.2_0>:
1005f818:	20002958 	.word	0x20002958

1005f81c <__arm_cp.2_1>:
1005f81c:	20002908 	.word	0x20002908

1005f820 <LL_conn_get_version_exchange_cached>:
1005f820:	b580      	push	{r7, lr}
1005f822:	f7fb f9f9 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
1005f826:	218c      	movs	r1, #140	@ 0x8c
1005f828:	5840      	ldr	r0, [r0, r1]
1005f82a:	0700      	lsls	r0, r0, #28
1005f82c:	0fc0      	lsrs	r0, r0, #31
1005f82e:	bd80      	pop	{r7, pc}

1005f830 <llc_cte_get_ctxt>:
1005f830:	4802      	ldr	r0, [pc, #8]	@ (1005f83c <__arm_cp.2_0>)
1005f832:	6800      	ldr	r0, [r0, #0]
1005f834:	219c      	movs	r1, #156	@ 0x9c
1005f836:	5840      	ldr	r0, [r0, r1]
1005f838:	6d00      	ldr	r0, [r0, #80]	@ 0x50
1005f83a:	4770      	bx	lr

1005f83c <__arm_cp.2_0>:
1005f83c:	20002958 	.word	0x20002958

1005f840 <llc_cte_init_ucfg_weak>:
1005f840:	4770      	bx	lr

1005f842 <llc_cte_mem_allocate_ucfg_weak>:
1005f842:	4770      	bx	lr

1005f844 <llc_cte_timer_error_ucfg_weak>:
1005f844:	4770      	bx	lr

1005f846 <llc_cte_timer_stop_ucfg_weak>:
1005f846:	2000      	movs	r0, #0
1005f848:	4770      	bx	lr
	...

1005f84c <LL_dtm_init>:
1005f84c:	b5b0      	push	{r4, r5, r7, lr}
1005f84e:	480e      	ldr	r0, [pc, #56]	@ (1005f888 <__arm_cp.0_0>)
1005f850:	6800      	ldr	r0, [r0, #0]
1005f852:	21ac      	movs	r1, #172	@ 0xac
1005f854:	5844      	ldr	r4, [r0, r1]
1005f856:	20ff      	movs	r0, #255	@ 0xff
1005f858:	77a0      	strb	r0, [r4, #30]
1005f85a:	2500      	movs	r5, #0
1005f85c:	77e5      	strb	r5, [r4, #31]
1005f85e:	f7fa fca9 	bl	1005a1b4 <cte_csr_ucfg_weak>
1005f862:	2801      	cmp	r0, #1
1005f864:	d10f      	bne.n	1005f886 <LL_dtm_init+0x3a>
1005f866:	f7ff ffe3 	bl	1005f830 <llc_cte_get_ctxt>
1005f86a:	2224      	movs	r2, #36	@ 0x24
1005f86c:	4907      	ldr	r1, [pc, #28]	@ (1005f88c <__arm_cp.0_1>)
1005f86e:	5c8a      	ldrb	r2, [r1, r2]
1005f870:	2a00      	cmp	r2, #0
1005f872:	462a      	mov	r2, r5
1005f874:	d000      	beq.n	1005f878 <LL_dtm_init+0x2c>
1005f876:	6802      	ldr	r2, [r0, #0]
1005f878:	62a2      	str	r2, [r4, #40]	@ 0x28
1005f87a:	2223      	movs	r2, #35	@ 0x23
1005f87c:	5c89      	ldrb	r1, [r1, r2]
1005f87e:	2900      	cmp	r1, #0
1005f880:	d000      	beq.n	1005f884 <LL_dtm_init+0x38>
1005f882:	6845      	ldr	r5, [r0, #4]
1005f884:	62e5      	str	r5, [r4, #44]	@ 0x2c
1005f886:	bdb0      	pop	{r4, r5, r7, pc}

1005f888 <__arm_cp.0_0>:
1005f888:	20002958 	.word	0x20002958

1005f88c <__arm_cp.0_1>:
1005f88c:	2000296c 	.word	0x2000296c

1005f890 <LL_eadv_switchbackupdata_data_struc>:
1005f890:	b510      	push	{r4, lr}
1005f892:	7c01      	ldrb	r1, [r0, #16]
1005f894:	2902      	cmp	r1, #2
1005f896:	d109      	bne.n	1005f8ac <LL_eadv_switchbackupdata_data_struc+0x1c>
1005f898:	2401      	movs	r4, #1
1005f89a:	7404      	strb	r4, [r0, #16]
1005f89c:	6801      	ldr	r1, [r0, #0]
1005f89e:	6882      	ldr	r2, [r0, #8]
1005f8a0:	68c3      	ldr	r3, [r0, #12]
1005f8a2:	c00c      	stmia	r0!, {r2, r3}
1005f8a4:	20a1      	movs	r0, #161	@ 0xa1
1005f8a6:	f005 fa0b 	bl	10064cc0 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1005f8aa:	e000      	b.n	1005f8ae <LL_eadv_switchbackupdata_data_struc+0x1e>
1005f8ac:	2400      	movs	r4, #0
1005f8ae:	4620      	mov	r0, r4
1005f8b0:	bd10      	pop	{r4, pc}

1005f8b2 <LL_eadv_Blue_Tx>:
1005f8b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f8b4:	461e      	mov	r6, r3
1005f8b6:	4617      	mov	r7, r2
1005f8b8:	460d      	mov	r5, r1
1005f8ba:	4604      	mov	r4, r0
1005f8bc:	f7f4 feac 	bl	10054618 <BLEPLAT_CNTR_PacketInitTo0>
1005f8c0:	4620      	mov	r0, r4
1005f8c2:	f7f4 feb7 	bl	10054634 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1005f8c6:	4620      	mov	r0, r4
1005f8c8:	f7f4 ff33 	bl	10054732 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005f8cc:	4620      	mov	r0, r4
1005f8ce:	4621      	mov	r1, r4
1005f8d0:	f7f4 ff3c 	bl	1005474c <BLEPLAT_CNTR_PacketSetNextPtr>
1005f8d4:	4620      	mov	r0, r4
1005f8d6:	4639      	mov	r1, r7
1005f8d8:	f7f4 fed3 	bl	10054682 <BLEPLAT_CNTR_PacketSetDataPtr>
1005f8dc:	4620      	mov	r0, r4
1005f8de:	4631      	mov	r1, r6
1005f8e0:	f7f4 ff8e 	bl	10054800 <BLEPLAT_CNTR_PacketSetTimeout>
1005f8e4:	9f06      	ldr	r7, [sp, #24]
1005f8e6:	2e00      	cmp	r6, #0
1005f8e8:	d002      	beq.n	1005f8f0 <LL_eadv_Blue_Tx+0x3e>
1005f8ea:	4620      	mov	r0, r4
1005f8ec:	f7f4 ff97 	bl	1005481e <BLEPLAT_CNTR_PacketSetTimer2Active>
1005f8f0:	4620      	mov	r0, r4
1005f8f2:	f7f4 fe6b 	bl	100545cc <BLEPLAT_CNTR_PacketClrIncChan>
1005f8f6:	4620      	mov	r0, r4
1005f8f8:	f7f4 feea 	bl	100546d0 <BLEPLAT_CNTR_PacketSetIntDone>
1005f8fc:	4620      	mov	r0, r4
1005f8fe:	f7f4 ffb4 	bl	1005486a <BLEPLAT_CNTR_PacketSetTxReady>
1005f902:	4620      	mov	r0, r4
1005f904:	2f81      	cmp	r7, #129	@ 0x81
1005f906:	d109      	bne.n	1005f91c <LL_eadv_Blue_Tx+0x6a>
1005f908:	4629      	mov	r1, r5
1005f90a:	f7f4 ff3b 	bl	10054784 <BLEPLAT_CNTR_PacketSetNextSlot>
1005f90e:	4620      	mov	r0, r4
1005f910:	f7f4 ff5c 	bl	100547cc <BLEPLAT_CNTR_PacketSetPllTrig>
1005f914:	4620      	mov	r0, r4
1005f916:	f7f4 ff8e 	bl	10054836 <BLEPLAT_CNTR_PacketSetTimerTrigDone>
1005f91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005f91c:	f7f4 ff98 	bl	10054850 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005f920:	4620      	mov	r0, r4
1005f922:	f7f4 ff22 	bl	1005476a <BLEPLAT_CNTR_PacketSetNextRxMode>
1005f926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005f928 <LL_eadv_Blue_Rx>:
1005f928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f92a:	461e      	mov	r6, r3
1005f92c:	4617      	mov	r7, r2
1005f92e:	460d      	mov	r5, r1
1005f930:	4604      	mov	r4, r0
1005f932:	f7f4 fe71 	bl	10054618 <BLEPLAT_CNTR_PacketInitTo0>
1005f936:	4620      	mov	r0, r4
1005f938:	f7f4 fe7c 	bl	10054634 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1005f93c:	4620      	mov	r0, r4
1005f93e:	f7f4 fef8 	bl	10054732 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005f942:	4620      	mov	r0, r4
1005f944:	4621      	mov	r1, r4
1005f946:	f7f4 ff01 	bl	1005474c <BLEPLAT_CNTR_PacketSetNextPtr>
1005f94a:	4620      	mov	r0, r4
1005f94c:	4639      	mov	r1, r7
1005f94e:	f7f4 fe98 	bl	10054682 <BLEPLAT_CNTR_PacketSetDataPtr>
1005f952:	4620      	mov	r0, r4
1005f954:	4631      	mov	r1, r6
1005f956:	f7f4 ff53 	bl	10054800 <BLEPLAT_CNTR_PacketSetTimeout>
1005f95a:	9f07      	ldr	r7, [sp, #28]
1005f95c:	2e00      	cmp	r6, #0
1005f95e:	d002      	beq.n	1005f966 <LL_eadv_Blue_Rx+0x3e>
1005f960:	4620      	mov	r0, r4
1005f962:	f7f4 ff5c 	bl	1005481e <BLEPLAT_CNTR_PacketSetTimer2Active>
1005f966:	4620      	mov	r0, r4
1005f968:	f7f4 ff17 	bl	1005479a <BLEPLAT_CNTR_PacketSetNextTxMode>
1005f96c:	4620      	mov	r0, r4
1005f96e:	f7f4 fe2d 	bl	100545cc <BLEPLAT_CNTR_PacketClrIncChan>
1005f972:	4620      	mov	r0, r4
1005f974:	f7f4 feac 	bl	100546d0 <BLEPLAT_CNTR_PacketSetIntDone>
1005f978:	4620      	mov	r0, r4
1005f97a:	f7f4 ff69 	bl	10054850 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005f97e:	4620      	mov	r0, r4
1005f980:	f7f4 feb2 	bl	100546e8 <BLEPLAT_CNTR_PacketSetIntRcvOk>
1005f984:	4620      	mov	r0, r4
1005f986:	f7f4 ff2e 	bl	100547e6 <BLEPLAT_CNTR_PacketSetRxReady>
1005f98a:	2f81      	cmp	r7, #129	@ 0x81
1005f98c:	d107      	bne.n	1005f99e <LL_eadv_Blue_Rx+0x76>
1005f98e:	4620      	mov	r0, r4
1005f990:	4629      	mov	r1, r5
1005f992:	f7f4 fef7 	bl	10054784 <BLEPLAT_CNTR_PacketSetNextSlot>
1005f996:	4620      	mov	r0, r4
1005f998:	f7f4 fe24 	bl	100545e4 <BLEPLAT_CNTR_PacketClrPllTrig>
1005f99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005f99e:	4620      	mov	r0, r4
1005f9a0:	f7f4 ff14 	bl	100547cc <BLEPLAT_CNTR_PacketSetPllTrig>
1005f9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1005f9a8 <LL_eadv_BLUE_SM>:
1005f9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f9aa:	461d      	mov	r5, r3
1005f9ac:	4616      	mov	r6, r2
1005f9ae:	460f      	mov	r7, r1
1005f9b0:	4604      	mov	r4, r0
1005f9b2:	f7f5 f8d7 	bl	10054b64 <BLEPLAT_CNTR_SmInitTo0>
1005f9b6:	4911      	ldr	r1, [pc, #68]	@ (1005f9fc <__arm_cp.10_0>)
1005f9b8:	4620      	mov	r0, r4
1005f9ba:	f7f5 f8f1 	bl	10054ba0 <BLEPLAT_CNTR_SmSetAccessAddr>
1005f9be:	4910      	ldr	r1, [pc, #64]	@ (1005fa00 <__arm_cp.10_1>)
1005f9c0:	4620      	mov	r0, r4
1005f9c2:	f7f5 f930 	bl	10054c26 <BLEPLAT_CNTR_SmSetCrcInit>
1005f9c6:	4620      	mov	r0, r4
1005f9c8:	4639      	mov	r1, r7
1005f9ca:	f7f5 fa5d 	bl	10054e88 <BLEPLAT_CNTR_SmSetTxPwr>
1005f9ce:	4620      	mov	r0, r4
1005f9d0:	4631      	mov	r1, r6
1005f9d2:	f7f5 fa32 	bl	10054e3a <BLEPLAT_CNTR_SmSetTxPacketPtr>
1005f9d6:	4620      	mov	r0, r4
1005f9d8:	4629      	mov	r1, r5
1005f9da:	f7f5 f9c2 	bl	10054d62 <BLEPLAT_CNTR_SmSetRxPacketPtr>
1005f9de:	9806      	ldr	r0, [sp, #24]
1005f9e0:	2881      	cmp	r0, #129	@ 0x81
1005f9e2:	d103      	bne.n	1005f9ec <LL_eadv_BLUE_SM+0x44>
1005f9e4:	4620      	mov	r0, r4
1005f9e6:	f7f5 fa19 	bl	10054e1c <BLEPLAT_CNTR_SmSetTxMode>
1005f9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005f9ec:	4620      	mov	r0, r4
1005f9ee:	f7f5 f9a9 	bl	10054d44 <BLEPLAT_CNTR_SmSetRxMode>
1005f9f2:	2101      	movs	r1, #1
1005f9f4:	4620      	mov	r0, r4
1005f9f6:	f7f5 f93d 	bl	10054c74 <BLEPLAT_CNTR_SmSetHopIncr>
1005f9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005f9fc <__arm_cp.10_0>:
1005f9fc:	8e89bed6 	.word	0x8e89bed6

1005fa00 <__arm_cp.10_1>:
1005fa00:	00555555 	.word	0x00555555

1005fa04 <llc_get_advertising_set_index>:
1005fa04:	b570      	push	{r4, r5, r6, lr}
1005fa06:	4604      	mov	r4, r0
1005fa08:	f001 fa94 	bl	10060f34 <llc_get_linkms_cntxt_p>
1005fa0c:	214d      	movs	r1, #77	@ 0x4d
1005fa0e:	5c41      	ldrb	r1, [r0, r1]
1005fa10:	4d09      	ldr	r5, [pc, #36]	@ (1005fa38 <__arm_cp.12_0>)
1005fa12:	2200      	movs	r2, #0
1005fa14:	23be      	movs	r3, #190	@ 0xbe
1005fa16:	4291      	cmp	r1, r2
1005fa18:	d00b      	beq.n	1005fa32 <llc_get_advertising_set_index+0x2e>
1005fa1a:	6806      	ldr	r6, [r0, #0]
1005fa1c:	5af6      	ldrh	r6, [r6, r3]
1005fa1e:	42a6      	cmp	r6, r4
1005fa20:	4616      	mov	r6, r2
1005fa22:	d000      	beq.n	1005fa26 <llc_get_advertising_set_index+0x22>
1005fa24:	462e      	mov	r6, r5
1005fa26:	2501      	movs	r5, #1
1005fa28:	022d      	lsls	r5, r5, #8
1005fa2a:	195b      	adds	r3, r3, r5
1005fa2c:	1c52      	adds	r2, r2, #1
1005fa2e:	4635      	mov	r5, r6
1005fa30:	e7f1      	b.n	1005fa16 <llc_get_advertising_set_index+0x12>
1005fa32:	b2a8      	uxth	r0, r5
1005fa34:	bd70      	pop	{r4, r5, r6, pc}
1005fa36:	46c0      	nop			@ (mov r8, r8)

1005fa38 <__arm_cp.12_0>:
1005fa38:	0000ffff 	.word	0x0000ffff

1005fa3c <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>:
1005fa3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005fa3e:	4604      	mov	r4, r0
1005fa40:	f001 fa78 	bl	10060f34 <llc_get_linkms_cntxt_p>
1005fa44:	4601      	mov	r1, r0
1005fa46:	204d      	movs	r0, #77	@ 0x4d
1005fa48:	5c08      	ldrb	r0, [r1, r0]
1005fa4a:	0202      	lsls	r2, r0, #8
1005fa4c:	2000      	movs	r0, #0
1005fa4e:	4b0d      	ldr	r3, [pc, #52]	@ (1005fa84 <__arm_cp.17_0>)
1005fa50:	4605      	mov	r5, r0
1005fa52:	42aa      	cmp	r2, r5
1005fa54:	d013      	beq.n	1005fa7e <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x42>
1005fa56:	680e      	ldr	r6, [r1, #0]
1005fa58:	1976      	adds	r6, r6, r5
1005fa5a:	27be      	movs	r7, #190	@ 0xbe
1005fa5c:	5bf7      	ldrh	r7, [r6, r7]
1005fa5e:	429f      	cmp	r7, r3
1005fa60:	d003      	beq.n	1005fa6a <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x2e>
1005fa62:	27ce      	movs	r7, #206	@ 0xce
1005fa64:	5df7      	ldrb	r7, [r6, r7]
1005fa66:	2f01      	cmp	r7, #1
1005fa68:	d003      	beq.n	1005fa72 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x36>
1005fa6a:	2601      	movs	r6, #1
1005fa6c:	0236      	lsls	r6, r6, #8
1005fa6e:	19ad      	adds	r5, r5, r6
1005fa70:	e7ef      	b.n	1005fa52 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x16>
1005fa72:	2c00      	cmp	r4, #0
1005fa74:	d004      	beq.n	1005fa80 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x44>
1005fa76:	20c3      	movs	r0, #195	@ 0xc3
1005fa78:	5c30      	ldrb	r0, [r6, r0]
1005fa7a:	1e41      	subs	r1, r0, #1
1005fa7c:	4188      	sbcs	r0, r1
1005fa7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005fa80:	2001      	movs	r0, #1
1005fa82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005fa84 <__arm_cp.17_0>:
1005fa84:	0000ffff 	.word	0x0000ffff

1005fa88 <llc_eadv_generate_new_rpa_for_one_adv_set>:
1005fa88:	b5b0      	push	{r4, r5, r7, lr}
1005fa8a:	4604      	mov	r4, r0
1005fa8c:	20d6      	movs	r0, #214	@ 0xd6
1005fa8e:	5c20      	ldrb	r0, [r4, r0]
1005fa90:	0780      	lsls	r0, r0, #30
1005fa92:	d401      	bmi.n	1005fa98 <llc_eadv_generate_new_rpa_for_one_adv_set+0x10>
1005fa94:	2000      	movs	r0, #0
1005fa96:	bdb0      	pop	{r4, r5, r7, pc}
1005fa98:	4625      	mov	r5, r4
1005fa9a:	3584      	adds	r5, #132	@ 0x84
1005fa9c:	4628      	mov	r0, r5
1005fa9e:	f7fc fe42 	bl	1005c726 <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>
1005faa2:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1005faa4:	4628      	mov	r0, r5
1005faa6:	f7fc fe36 	bl	1005c716 <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>
1005faaa:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
1005faac:	3008      	adds	r0, #8
1005faae:	2100      	movs	r1, #0
1005fab0:	f7fc fe2f 	bl	1005c712 <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>
1005fab4:	6f60      	ldr	r0, [r4, #116]	@ 0x74
1005fab6:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1005fab8:	6761      	str	r1, [r4, #116]	@ 0x74
1005faba:	67a0      	str	r0, [r4, #120]	@ 0x78
1005fabc:	2001      	movs	r0, #1
1005fabe:	bdb0      	pop	{r4, r5, r7, pc}

1005fac0 <EADV_init>:
1005fac0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fac2:	b085      	sub	sp, #20
1005fac4:	9204      	str	r2, [sp, #16]
1005fac6:	460e      	mov	r6, r1
1005fac8:	4605      	mov	r5, r0
1005faca:	244d      	movs	r4, #77	@ 0x4d
1005facc:	f001 fa32 	bl	10060f34 <llc_get_linkms_cntxt_p>
1005fad0:	5505      	strb	r5, [r0, r4]
1005fad2:	6006      	str	r6, [r0, #0]
1005fad4:	9003      	str	r0, [sp, #12]
1005fad6:	304d      	adds	r0, #77	@ 0x4d
1005fad8:	2101      	movs	r1, #1
1005fada:	9002      	str	r0, [sp, #8]
1005fadc:	7041      	strb	r1, [r0, #1]
1005fade:	9101      	str	r1, [sp, #4]
1005fae0:	04cb      	lsls	r3, r1, #19
1005fae2:	2600      	movs	r6, #0
1005fae4:	277c      	movs	r7, #124	@ 0x7c
1005fae6:	9a04      	ldr	r2, [sp, #16]
1005fae8:	b2e8      	uxtb	r0, r5
1005faea:	4286      	cmp	r6, r0
1005faec:	d226      	bcs.n	1005fb3c <EADV_init+0x7c>
1005faee:	9803      	ldr	r0, [sp, #12]
1005faf0:	6800      	ldr	r0, [r0, #0]
1005faf2:	51c3      	str	r3, [r0, r7]
1005faf4:	19c5      	adds	r5, r0, r7
1005faf6:	2054      	movs	r0, #84	@ 0x54
1005faf8:	4911      	ldr	r1, [pc, #68]	@ (1005fb40 <__arm_cp.19_0>)
1005fafa:	5229      	strh	r1, [r5, r0]
1005fafc:	2452      	movs	r4, #82	@ 0x52
1005fafe:	2000      	movs	r0, #0
1005fb00:	5328      	strh	r0, [r5, r4]
1005fb02:	2442      	movs	r4, #66	@ 0x42
1005fb04:	5329      	strh	r1, [r5, r4]
1005fb06:	245e      	movs	r4, #94	@ 0x5e
1005fb08:	5528      	strb	r0, [r5, r4]
1005fb0a:	245c      	movs	r4, #92	@ 0x5c
1005fb0c:	21ff      	movs	r1, #255	@ 0xff
1005fb0e:	5529      	strb	r1, [r5, r4]
1005fb10:	215a      	movs	r1, #90	@ 0x5a
1005fb12:	5468      	strb	r0, [r5, r1]
1005fb14:	2146      	movs	r1, #70	@ 0x46
1005fb16:	2407      	movs	r4, #7
1005fb18:	526c      	strh	r4, [r5, r1]
1005fb1a:	6128      	str	r0, [r5, #16]
1005fb1c:	6168      	str	r0, [r5, #20]
1005fb1e:	606b      	str	r3, [r5, #4]
1005fb20:	9904      	ldr	r1, [sp, #16]
1005fb22:	2900      	cmp	r1, #0
1005fb24:	d002      	beq.n	1005fb2c <EADV_init+0x6c>
1005fb26:	6550      	str	r0, [r2, #84]	@ 0x54
1005fb28:	3d2c      	subs	r5, #44	@ 0x2c
1005fb2a:	602a      	str	r2, [r5, #0]
1005fb2c:	9801      	ldr	r0, [sp, #4]
1005fb2e:	0200      	lsls	r0, r0, #8
1005fb30:	183f      	adds	r7, r7, r0
1005fb32:	325c      	adds	r2, #92	@ 0x5c
1005fb34:	9802      	ldr	r0, [sp, #8]
1005fb36:	7805      	ldrb	r5, [r0, #0]
1005fb38:	1c76      	adds	r6, r6, #1
1005fb3a:	e7d5      	b.n	1005fae8 <EADV_init+0x28>
1005fb3c:	b005      	add	sp, #20
1005fb3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005fb40 <__arm_cp.19_0>:
1005fb40:	0000ffff 	.word	0x0000ffff

1005fb44 <LL_LE_Set_Advertising_Parameters>:
1005fb44:	b570      	push	{r4, r5, r6, lr}
1005fb46:	4604      	mov	r4, r0
1005fb48:	f001 f9f4 	bl	10060f34 <llc_get_linkms_cntxt_p>
1005fb4c:	4605      	mov	r5, r0
1005fb4e:	4e30      	ldr	r6, [pc, #192]	@ (1005fc10 <__arm_cp.20_0>)
1005fb50:	4630      	mov	r0, r6
1005fb52:	f7ff ff57 	bl	1005fa04 <llc_get_advertising_set_index>
1005fb56:	492f      	ldr	r1, [pc, #188]	@ (1005fc14 <__arm_cp.20_1>)
1005fb58:	4288      	cmp	r0, r1
1005fb5a:	d112      	bne.n	1005fb82 <LL_LE_Set_Advertising_Parameters+0x3e>
1005fb5c:	f000 f860 	bl	1005fc20 <LL_Context_ReturnFree>
1005fb60:	28ff      	cmp	r0, #255	@ 0xff
1005fb62:	d034      	beq.n	1005fbce <LL_LE_Set_Advertising_Parameters+0x8a>
1005fb64:	0200      	lsls	r0, r0, #8
1005fb66:	6829      	ldr	r1, [r5, #0]
1005fb68:	1808      	adds	r0, r1, r0
1005fb6a:	21be      	movs	r1, #190	@ 0xbe
1005fb6c:	5246      	strh	r6, [r0, r1]
1005fb6e:	214c      	movs	r1, #76	@ 0x4c
1005fb70:	2200      	movs	r2, #0
1005fb72:	5442      	strb	r2, [r0, r1]
1005fb74:	2138      	movs	r1, #56	@ 0x38
1005fb76:	5442      	strb	r2, [r0, r1]
1005fb78:	63c2      	str	r2, [r0, #60]	@ 0x3c
1005fb7a:	6402      	str	r2, [r0, #64]	@ 0x40
1005fb7c:	6282      	str	r2, [r0, #40]	@ 0x28
1005fb7e:	62c2      	str	r2, [r0, #44]	@ 0x2c
1005fb80:	e008      	b.n	1005fb94 <LL_LE_Set_Advertising_Parameters+0x50>
1005fb82:	0200      	lsls	r0, r0, #8
1005fb84:	6829      	ldr	r1, [r5, #0]
1005fb86:	1808      	adds	r0, r1, r0
1005fb88:	21ce      	movs	r1, #206	@ 0xce
1005fb8a:	5c41      	ldrb	r1, [r0, r1]
1005fb8c:	2901      	cmp	r1, #1
1005fb8e:	d101      	bne.n	1005fb94 <LL_LE_Set_Advertising_Parameters+0x50>
1005fb90:	250c      	movs	r5, #12
1005fb92:	e03a      	b.n	1005fc0a <LL_LE_Set_Advertising_Parameters+0xc6>
1005fb94:	7961      	ldrb	r1, [r4, #5]
1005fb96:	22c2      	movs	r2, #194	@ 0xc2
1005fb98:	5481      	strb	r1, [r0, r2]
1005fb9a:	4606      	mov	r6, r0
1005fb9c:	36c2      	adds	r6, #194	@ 0xc2
1005fb9e:	2500      	movs	r5, #0
1005fba0:	72f5      	strb	r5, [r6, #11]
1005fba2:	2101      	movs	r1, #1
1005fba4:	70f1      	strb	r1, [r6, #3]
1005fba6:	79a1      	ldrb	r1, [r4, #6]
1005fba8:	7071      	strb	r1, [r6, #1]
1005fbaa:	8821      	ldrh	r1, [r4, #0]
1005fbac:	0209      	lsls	r1, r1, #8
1005fbae:	67c1      	str	r1, [r0, #124]	@ 0x7c
1005fbb0:	4601      	mov	r1, r0
1005fbb2:	3184      	adds	r1, #132	@ 0x84
1005fbb4:	7922      	ldrb	r2, [r4, #4]
1005fbb6:	2a04      	cmp	r2, #4
1005fbb8:	d815      	bhi.n	1005fbe6 <LL_LE_Set_Advertising_Parameters+0xa2>
1005fbba:	46c0      	nop			@ (mov r8, r8)
1005fbbc:	447a      	add	r2, pc
1005fbbe:	7912      	ldrb	r2, [r2, #4]
1005fbc0:	0052      	lsls	r2, r2, #1
1005fbc2:	4497      	add	pc, r2
1005fbc4:	0c0a0602 	.word	0x0c0a0602
1005fbc8:	000e      	.short	0x000e
1005fbca:	20f3      	movs	r0, #243	@ 0xf3
1005fbcc:	e00a      	b.n	1005fbe4 <LL_LE_Set_Advertising_Parameters+0xa0>
1005fbce:	2507      	movs	r5, #7
1005fbd0:	e01b      	b.n	1005fc0a <LL_LE_Set_Advertising_Parameters+0xc6>
1005fbd2:	4a11      	ldr	r2, [pc, #68]	@ (1005fc18 <__arm_cp.20_2>)
1005fbd4:	67c2      	str	r2, [r0, #124]	@ 0x7c
1005fbd6:	20fd      	movs	r0, #253	@ 0xfd
1005fbd8:	e004      	b.n	1005fbe4 <LL_LE_Set_Advertising_Parameters+0xa0>
1005fbda:	20f2      	movs	r0, #242	@ 0xf2
1005fbdc:	e002      	b.n	1005fbe4 <LL_LE_Set_Advertising_Parameters+0xa0>
1005fbde:	20f0      	movs	r0, #240	@ 0xf0
1005fbe0:	e000      	b.n	1005fbe4 <LL_LE_Set_Advertising_Parameters+0xa0>
1005fbe2:	20f5      	movs	r0, #245	@ 0xf5
1005fbe4:	8688      	strh	r0, [r1, #52]	@ 0x34
1005fbe6:	7a20      	ldrb	r0, [r4, #8]
1005fbe8:	79e2      	ldrb	r2, [r4, #7]
1005fbea:	600d      	str	r5, [r1, #0]
1005fbec:	604d      	str	r5, [r1, #4]
1005fbee:	7532      	strb	r2, [r6, #20]
1005fbf0:	7570      	strb	r0, [r6, #21]
1005fbf2:	7a20      	ldrb	r0, [r4, #8]
1005fbf4:	7008      	strb	r0, [r1, #0]
1005fbf6:	1c48      	adds	r0, r1, #1
1005fbf8:	3409      	adds	r4, #9
1005fbfa:	2206      	movs	r2, #6
1005fbfc:	4621      	mov	r1, r4
1005fbfe:	f7f3 fb99 	bl	10053334 <BLEPLAT_MemCpy>
1005fc02:	4806      	ldr	r0, [pc, #24]	@ (1005fc1c <__arm_cp.20_3>)
1005fc04:	6800      	ldr	r0, [r0, #0]
1005fc06:	7a40      	ldrb	r0, [r0, #9]
1005fc08:	70b0      	strb	r0, [r6, #2]
1005fc0a:	4628      	mov	r0, r5
1005fc0c:	bd70      	pop	{r4, r5, r6, pc}
1005fc0e:	46c0      	nop			@ (mov r8, r8)

1005fc10 <__arm_cp.20_0>:
1005fc10:	0000fffc 	.word	0x0000fffc

1005fc14 <__arm_cp.20_1>:
1005fc14:	0000ffff 	.word	0x0000ffff

1005fc18 <__arm_cp.20_2>:
1005fc18:	000005dc 	.word	0x000005dc

1005fc1c <__arm_cp.20_3>:
1005fc1c:	20002958 	.word	0x20002958

1005fc20 <LL_Context_ReturnFree>:
1005fc20:	b510      	push	{r4, lr}
1005fc22:	f001 f987 	bl	10060f34 <llc_get_linkms_cntxt_p>
1005fc26:	214d      	movs	r1, #77	@ 0x4d
1005fc28:	5c42      	ldrb	r2, [r0, r1]
1005fc2a:	2100      	movs	r1, #0
1005fc2c:	23be      	movs	r3, #190	@ 0xbe
1005fc2e:	428a      	cmp	r2, r1
1005fc30:	d008      	beq.n	1005fc44 <LL_Context_ReturnFree+0x24>
1005fc32:	6804      	ldr	r4, [r0, #0]
1005fc34:	5ae4      	ldrh	r4, [r4, r3]
1005fc36:	0b24      	lsrs	r4, r4, #12
1005fc38:	d105      	bne.n	1005fc46 <LL_Context_ReturnFree+0x26>
1005fc3a:	2401      	movs	r4, #1
1005fc3c:	0224      	lsls	r4, r4, #8
1005fc3e:	191b      	adds	r3, r3, r4
1005fc40:	1c49      	adds	r1, r1, #1
1005fc42:	e7f4      	b.n	1005fc2e <LL_Context_ReturnFree+0xe>
1005fc44:	21ff      	movs	r1, #255	@ 0xff
1005fc46:	b2c8      	uxtb	r0, r1
1005fc48:	bd10      	pop	{r4, pc}
	...

1005fc4c <LL_LE_Set_Advertise_Enable>:
1005fc4c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005fc4e:	4604      	mov	r4, r0
1005fc50:	f000 f816 	bl	1005fc80 <LL_LE_Set_Advertising_Parameters_Default>
1005fc54:	2300      	movs	r3, #0
1005fc56:	9300      	str	r3, [sp, #0]
1005fc58:	2101      	movs	r1, #1
1005fc5a:	4d07      	ldr	r5, [pc, #28]	@ (1005fc78 <__arm_cp.22_0>)
1005fc5c:	4620      	mov	r0, r4
1005fc5e:	462a      	mov	r2, r5
1005fc60:	f000 f82c 	bl	1005fcbc <LL_Set_Extented_Advertising_Enable>
1005fc64:	4604      	mov	r4, r0
1005fc66:	4805      	ldr	r0, [pc, #20]	@ (1005fc7c <__arm_cp.22_1>)
1005fc68:	6801      	ldr	r1, [r0, #0]
1005fc6a:	3156      	adds	r1, #86	@ 0x56
1005fc6c:	4628      	mov	r0, r5
1005fc6e:	f000 f98f 	bl	1005ff90 <LL_Set_Extented_Advertising_Set_Random_Address>
1005fc72:	4620      	mov	r0, r4
1005fc74:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005fc76:	46c0      	nop			@ (mov r8, r8)

1005fc78 <__arm_cp.22_0>:
1005fc78:	0000fffc 	.word	0x0000fffc

1005fc7c <__arm_cp.22_1>:
1005fc7c:	20002958 	.word	0x20002958

1005fc80 <LL_LE_Set_Advertising_Parameters_Default>:
1005fc80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1005fc82:	480c      	ldr	r0, [pc, #48]	@ (1005fcb4 <__arm_cp.23_0>)
1005fc84:	f7ff febe 	bl	1005fa04 <llc_get_advertising_set_index>
1005fc88:	490b      	ldr	r1, [pc, #44]	@ (1005fcb8 <__arm_cp.23_1>)
1005fc8a:	4288      	cmp	r0, r1
1005fc8c:	d110      	bne.n	1005fcb0 <LL_LE_Set_Advertising_Parameters_Default+0x30>
1005fc8e:	466c      	mov	r4, sp
1005fc90:	2100      	movs	r1, #0
1005fc92:	7221      	strb	r1, [r4, #8]
1005fc94:	2001      	movs	r0, #1
1005fc96:	02c0      	lsls	r0, r0, #11
1005fc98:	8020      	strh	r0, [r4, #0]
1005fc9a:	2007      	movs	r0, #7
1005fc9c:	0200      	lsls	r0, r0, #8
1005fc9e:	9001      	str	r0, [sp, #4]
1005fca0:	4620      	mov	r0, r4
1005fca2:	3009      	adds	r0, #9
1005fca4:	2206      	movs	r2, #6
1005fca6:	f7f3 fb55 	bl	10053354 <BLEPLAT_MemSet>
1005fcaa:	4620      	mov	r0, r4
1005fcac:	f7ff ff4a 	bl	1005fb44 <LL_LE_Set_Advertising_Parameters>
1005fcb0:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
1005fcb2:	46c0      	nop			@ (mov r8, r8)

1005fcb4 <__arm_cp.23_0>:
1005fcb4:	0000fffc 	.word	0x0000fffc

1005fcb8 <__arm_cp.23_1>:
1005fcb8:	0000ffff 	.word	0x0000ffff

1005fcbc <LL_Set_Extented_Advertising_Enable>:
1005fcbc:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fcbe:	b08f      	sub	sp, #60	@ 0x3c
1005fcc0:	930e      	str	r3, [sp, #56]	@ 0x38
1005fcc2:	4617      	mov	r7, r2
1005fcc4:	460d      	mov	r5, r1
1005fcc6:	4606      	mov	r6, r0
1005fcc8:	4305      	orrs	r5, r0
1005fcca:	f001 f933 	bl	10060f34 <llc_get_linkms_cntxt_p>
1005fcce:	4604      	mov	r4, r0
1005fcd0:	2d00      	cmp	r5, #0
1005fcd2:	d007      	beq.n	1005fce4 <LL_Set_Extented_Advertising_Enable+0x28>
1005fcd4:	4638      	mov	r0, r7
1005fcd6:	f7ff fe95 	bl	1005fa04 <llc_get_advertising_set_index>
1005fcda:	49a7      	ldr	r1, [pc, #668]	@ (1005ff78 <__arm_cp.24_1>)
1005fcdc:	4288      	cmp	r0, r1
1005fcde:	d118      	bne.n	1005fd12 <LL_Set_Extented_Advertising_Enable+0x56>
1005fce0:	2042      	movs	r0, #66	@ 0x42
1005fce2:	e04a      	b.n	1005fd7a <LL_Set_Extented_Advertising_Enable+0xbe>
1005fce4:	4625      	mov	r5, r4
1005fce6:	354d      	adds	r5, #77	@ 0x4d
1005fce8:	2600      	movs	r6, #0
1005fcea:	4637      	mov	r7, r6
1005fcec:	960e      	str	r6, [sp, #56]	@ 0x38
1005fcee:	7828      	ldrb	r0, [r5, #0]
1005fcf0:	4286      	cmp	r6, r0
1005fcf2:	d20c      	bcs.n	1005fd0e <LL_Set_Extented_Advertising_Enable+0x52>
1005fcf4:	6820      	ldr	r0, [r4, #0]
1005fcf6:	19c0      	adds	r0, r0, r7
1005fcf8:	21ce      	movs	r1, #206	@ 0xce
1005fcfa:	5c41      	ldrb	r1, [r0, r1]
1005fcfc:	2901      	cmp	r1, #1
1005fcfe:	d101      	bne.n	1005fd04 <LL_Set_Extented_Advertising_Enable+0x48>
1005fd00:	f000 f992 	bl	10060028 <EADV_stop>
1005fd04:	2001      	movs	r0, #1
1005fd06:	0200      	lsls	r0, r0, #8
1005fd08:	183f      	adds	r7, r7, r0
1005fd0a:	1c76      	adds	r6, r6, #1
1005fd0c:	e7ef      	b.n	1005fcee <LL_Set_Extented_Advertising_Enable+0x32>
1005fd0e:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005fd10:	e033      	b.n	1005fd7a <LL_Set_Extented_Advertising_Enable+0xbe>
1005fd12:	0201      	lsls	r1, r0, #8
1005fd14:	6822      	ldr	r2, [r4, #0]
1005fd16:	1854      	adds	r4, r2, r1
1005fd18:	21ce      	movs	r1, #206	@ 0xce
1005fd1a:	5c61      	ldrb	r1, [r4, r1]
1005fd1c:	2e01      	cmp	r6, #1
1005fd1e:	d124      	bne.n	1005fd6a <LL_Set_Extented_Advertising_Enable+0xae>
1005fd20:	0200      	lsls	r0, r0, #8
1005fd22:	1815      	adds	r5, r2, r0
1005fd24:	20d6      	movs	r0, #214	@ 0xd6
1005fd26:	5c28      	ldrb	r0, [r5, r0]
1005fd28:	2701      	movs	r7, #1
1005fd2a:	4038      	ands	r0, r7
1005fd2c:	2900      	cmp	r1, #0
1005fd2e:	d026      	beq.n	1005fd7e <LL_Set_Extented_Advertising_Enable+0xc2>
1005fd30:	2800      	cmp	r0, #0
1005fd32:	d00a      	beq.n	1005fd4a <LL_Set_Extented_Advertising_Enable+0x8e>
1005fd34:	208c      	movs	r0, #140	@ 0x8c
1005fd36:	5828      	ldr	r0, [r5, r0]
1005fd38:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1005fd3a:	462a      	mov	r2, r5
1005fd3c:	328c      	adds	r2, #140	@ 0x8c
1005fd3e:	6852      	ldr	r2, [r2, #4]
1005fd40:	c105      	stmia	r1!, {r0, r2}
1005fd42:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1005fd44:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1005fd46:	6769      	str	r1, [r5, #116]	@ 0x74
1005fd48:	67a8      	str	r0, [r5, #120]	@ 0x78
1005fd4a:	2094      	movs	r0, #148	@ 0x94
1005fd4c:	5828      	ldr	r0, [r5, r0]
1005fd4e:	2600      	movs	r6, #0
1005fd50:	2800      	cmp	r0, #0
1005fd52:	d008      	beq.n	1005fd66 <LL_Set_Extented_Advertising_Enable+0xaa>
1005fd54:	3594      	adds	r5, #148	@ 0x94
1005fd56:	207d      	movs	r0, #125	@ 0x7d
1005fd58:	0144      	lsls	r4, r0, #5
1005fd5a:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005fd5c:	4344      	muls	r4, r0
1005fd5e:	f7f3 fbb4 	bl	100534ca <BLEPLAT_GetCurrentSysTime>
1005fd62:	1820      	adds	r0, r4, r0
1005fd64:	6028      	str	r0, [r5, #0]
1005fd66:	4630      	mov	r0, r6
1005fd68:	e007      	b.n	1005fd7a <LL_Set_Extented_Advertising_Enable+0xbe>
1005fd6a:	2000      	movs	r0, #0
1005fd6c:	2901      	cmp	r1, #1
1005fd6e:	d104      	bne.n	1005fd7a <LL_Set_Extented_Advertising_Enable+0xbe>
1005fd70:	4605      	mov	r5, r0
1005fd72:	4620      	mov	r0, r4
1005fd74:	f000 f958 	bl	10060028 <EADV_stop>
1005fd78:	4628      	mov	r0, r5
1005fd7a:	b00f      	add	sp, #60	@ 0x3c
1005fd7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005fd7e:	2800      	cmp	r0, #0
1005fd80:	d007      	beq.n	1005fd92 <LL_Set_Extented_Advertising_Enable+0xd6>
1005fd82:	208c      	movs	r0, #140	@ 0x8c
1005fd84:	5828      	ldr	r0, [r5, r0]
1005fd86:	2800      	cmp	r0, #0
1005fd88:	d103      	bne.n	1005fd92 <LL_Set_Extented_Advertising_Enable+0xd6>
1005fd8a:	2090      	movs	r0, #144	@ 0x90
1005fd8c:	5828      	ldr	r0, [r5, r0]
1005fd8e:	2800      	cmp	r0, #0
1005fd90:	d006      	beq.n	1005fda0 <LL_Set_Extented_Advertising_Enable+0xe4>
1005fd92:	20b8      	movs	r0, #184	@ 0xb8
1005fd94:	5a28      	ldrh	r0, [r5, r0]
1005fd96:	07c1      	lsls	r1, r0, #31
1005fd98:	d004      	beq.n	1005fda4 <LL_Set_Extented_Advertising_Enable+0xe8>
1005fd9a:	8de9      	ldrh	r1, [r5, #46]	@ 0x2e
1005fd9c:	29f5      	cmp	r1, #245	@ 0xf5
1005fd9e:	d901      	bls.n	1005fda4 <LL_Set_Extented_Advertising_Enable+0xe8>
1005fda0:	2012      	movs	r0, #18
1005fda2:	e7ea      	b.n	1005fd7a <LL_Set_Extented_Advertising_Enable+0xbe>
1005fda4:	2312      	movs	r3, #18
1005fda6:	4601      	mov	r1, r0
1005fda8:	461a      	mov	r2, r3
1005fdaa:	4019      	ands	r1, r3
1005fdac:	2902      	cmp	r1, #2
1005fdae:	d103      	bne.n	1005fdb8 <LL_Set_Extented_Advertising_Enable+0xfc>
1005fdb0:	2142      	movs	r1, #66	@ 0x42
1005fdb2:	5a69      	ldrh	r1, [r5, r1]
1005fdb4:	2900      	cmp	r1, #0
1005fdb6:	d040      	beq.n	1005fe3a <LL_Set_Extented_Advertising_Enable+0x17e>
1005fdb8:	0700      	lsls	r0, r0, #28
1005fdba:	d50f      	bpl.n	1005fddc <LL_Set_Extented_Advertising_Enable+0x120>
1005fdbc:	486d      	ldr	r0, [pc, #436]	@ (1005ff74 <__arm_cp.24_0>)
1005fdbe:	21be      	movs	r1, #190	@ 0xbe
1005fdc0:	5a69      	ldrh	r1, [r5, r1]
1005fdc2:	4281      	cmp	r1, r0
1005fdc4:	d001      	beq.n	1005fdca <LL_Set_Extented_Advertising_Enable+0x10e>
1005fdc6:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005fdc8:	e000      	b.n	1005fdcc <LL_Set_Extented_Advertising_Enable+0x110>
1005fdca:	2080      	movs	r0, #128	@ 0x80
1005fdcc:	2880      	cmp	r0, #128	@ 0x80
1005fdce:	d901      	bls.n	1005fdd4 <LL_Set_Extented_Advertising_Enable+0x118>
1005fdd0:	4610      	mov	r0, r2
1005fdd2:	e7d2      	b.n	1005fd7a <LL_Set_Extented_Advertising_Enable+0xbe>
1005fdd4:	900e      	str	r0, [sp, #56]	@ 0x38
1005fdd6:	2800      	cmp	r0, #0
1005fdd8:	4610      	mov	r0, r2
1005fdda:	d0ce      	beq.n	1005fd7a <LL_Set_Extented_Advertising_Enable+0xbe>
1005fddc:	9814      	ldr	r0, [sp, #80]	@ 0x50
1005fdde:	21ba      	movs	r1, #186	@ 0xba
1005fde0:	5268      	strh	r0, [r5, r1]
1005fde2:	267d      	movs	r6, #125	@ 0x7d
1005fde4:	0171      	lsls	r1, r6, #5
1005fde6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005fde8:	4351      	muls	r1, r2
1005fdea:	2294      	movs	r2, #148	@ 0x94
1005fdec:	50a9      	str	r1, [r5, r2]
1005fdee:	2800      	cmp	r0, #0
1005fdf0:	d001      	beq.n	1005fdf6 <LL_Set_Extented_Advertising_Enable+0x13a>
1005fdf2:	21cf      	movs	r1, #207	@ 0xcf
1005fdf4:	546f      	strb	r7, [r5, r1]
1005fdf6:	21bc      	movs	r1, #188	@ 0xbc
1005fdf8:	5268      	strh	r0, [r5, r1]
1005fdfa:	4620      	mov	r0, r4
1005fdfc:	f7ef fea6 	bl	1004fb4c <EADV_start_request_radio_tasks_ucfg>
1005fe00:	2800      	cmp	r0, #0
1005fe02:	d1ba      	bne.n	1005fd7a <LL_Set_Extented_Advertising_Enable+0xbe>
1005fe04:	4629      	mov	r1, r5
1005fe06:	31d6      	adds	r1, #214	@ 0xd6
1005fe08:	4628      	mov	r0, r5
1005fe0a:	3064      	adds	r0, #100	@ 0x64
1005fe0c:	462a      	mov	r2, r5
1005fe0e:	3254      	adds	r2, #84	@ 0x54
1005fe10:	676a      	str	r2, [r5, #116]	@ 0x74
1005fe12:	67a8      	str	r0, [r5, #120]	@ 0x78
1005fe14:	462b      	mov	r3, r5
1005fe16:	3378      	adds	r3, #120	@ 0x78
1005fe18:	7809      	ldrb	r1, [r1, #0]
1005fe1a:	07c9      	lsls	r1, r1, #31
1005fe1c:	930d      	str	r3, [sp, #52]	@ 0x34
1005fe1e:	d10e      	bne.n	1005fe3e <LL_Set_Extented_Advertising_Enable+0x182>
1005fe20:	2100      	movs	r1, #0
1005fe22:	6001      	str	r1, [r0, #0]
1005fe24:	66a9      	str	r1, [r5, #104]	@ 0x68
1005fe26:	4855      	ldr	r0, [pc, #340]	@ (1005ff7c <__arm_cp.24_2>)
1005fe28:	6801      	ldr	r1, [r0, #0]
1005fe2a:	4620      	mov	r0, r4
1005fe2c:	3065      	adds	r0, #101	@ 0x65
1005fe2e:	2206      	movs	r2, #6
1005fe30:	f7f3 fa80 	bl	10053334 <BLEPLAT_MemCpy>
1005fe34:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005fe36:	6800      	ldr	r0, [r0, #0]
1005fe38:	e008      	b.n	1005fe4c <LL_Set_Extented_Advertising_Enable+0x190>
1005fe3a:	200c      	movs	r0, #12
1005fe3c:	e79d      	b.n	1005fd7a <LL_Set_Extented_Advertising_Enable+0xbe>
1005fe3e:	218c      	movs	r1, #140	@ 0x8c
1005fe40:	5869      	ldr	r1, [r5, r1]
1005fe42:	462a      	mov	r2, r5
1005fe44:	328c      	adds	r2, #140	@ 0x8c
1005fe46:	6852      	ldr	r2, [r2, #4]
1005fe48:	c006      	stmia	r0!, {r1, r2}
1005fe4a:	3808      	subs	r0, #8
1005fe4c:	4629      	mov	r1, r5
1005fe4e:	3194      	adds	r1, #148	@ 0x94
1005fe50:	910e      	str	r1, [sp, #56]	@ 0x38
1005fe52:	2184      	movs	r1, #132	@ 0x84
1005fe54:	5869      	ldr	r1, [r5, r1]
1005fe56:	462a      	mov	r2, r5
1005fe58:	3284      	adds	r2, #132	@ 0x84
1005fe5a:	6852      	ldr	r2, [r2, #4]
1005fe5c:	6081      	str	r1, [r0, #8]
1005fe5e:	60c2      	str	r2, [r0, #12]
1005fe60:	4620      	mov	r0, r4
1005fe62:	f7ff fe11 	bl	1005fa88 <llc_eadv_generate_new_rpa_for_one_adv_set>
1005fe66:	2800      	cmp	r0, #0
1005fe68:	960c      	str	r6, [sp, #48]	@ 0x30
1005fe6a:	d002      	beq.n	1005fe72 <LL_Set_Extented_Advertising_Enable+0x1b6>
1005fe6c:	f7fc fc59 	bl	1005c722 <llc_priv_start_privacy_timer_ucfg_weak>
1005fe70:	e006      	b.n	1005fe80 <LL_Set_Extented_Advertising_Enable+0x1c4>
1005fe72:	4628      	mov	r0, r5
1005fe74:	3074      	adds	r0, #116	@ 0x74
1005fe76:	6801      	ldr	r1, [r0, #0]
1005fe78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1005fe7a:	681a      	ldr	r2, [r3, #0]
1005fe7c:	6002      	str	r2, [r0, #0]
1005fe7e:	6019      	str	r1, [r3, #0]
1005fe80:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005fe82:	4626      	mov	r6, r4
1005fe84:	36ce      	adds	r6, #206	@ 0xce
1005fe86:	4628      	mov	r0, r5
1005fe88:	30b8      	adds	r0, #184	@ 0xb8
1005fe8a:	900d      	str	r0, [sp, #52]	@ 0x34
1005fe8c:	6808      	ldr	r0, [r1, #0]
1005fe8e:	2800      	cmp	r0, #0
1005fe90:	d005      	beq.n	1005fe9e <LL_Set_Extented_Advertising_Enable+0x1e2>
1005fe92:	f7f3 fb1a 	bl	100534ca <BLEPLAT_GetCurrentSysTime>
1005fe96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005fe98:	6811      	ldr	r1, [r2, #0]
1005fe9a:	1808      	adds	r0, r1, r0
1005fe9c:	6010      	str	r0, [r2, #0]
1005fe9e:	7037      	strb	r7, [r6, #0]
1005fea0:	20c4      	movs	r0, #196	@ 0xc4
1005fea2:	5c29      	ldrb	r1, [r5, r0]
1005fea4:	27d0      	movs	r7, #208	@ 0xd0
1005fea6:	5de8      	ldrb	r0, [r5, r7]
1005fea8:	2281      	movs	r2, #129	@ 0x81
1005feaa:	920e      	str	r2, [sp, #56]	@ 0x38
1005feac:	9200      	str	r2, [sp, #0]
1005feae:	462e      	mov	r6, r5
1005feb0:	3614      	adds	r6, #20
1005feb2:	4622      	mov	r2, r4
1005feb4:	4633      	mov	r3, r6
1005feb6:	f7ff fd77 	bl	1005f9a8 <LL_eadv_BLUE_SM>
1005feba:	5de8      	ldrb	r0, [r5, r7]
1005febc:	2125      	movs	r1, #37	@ 0x25
1005febe:	f7f4 fec4 	bl	10054c4a <BLEPLAT_CNTR_SmSetDataLength>
1005fec2:	462f      	mov	r7, r5
1005fec4:	37d0      	adds	r7, #208	@ 0xd0
1005fec6:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005fec8:	8800      	ldrh	r0, [r0, #0]
1005feca:	06c0      	lsls	r0, r0, #27
1005fecc:	d403      	bmi.n	1005fed6 <LL_Set_Extented_Advertising_Enable+0x21a>
1005fece:	4620      	mov	r0, r4
1005fed0:	f000 fd57 	bl	10060982 <LL_eadv_start_extended_ucfg_weak>
1005fed4:	e042      	b.n	1005ff5c <LL_Set_Extented_Advertising_Enable+0x2a0>
1005fed6:	f7f3 faf8 	bl	100534ca <BLEPLAT_GetCurrentSysTime>
1005feda:	219c      	movs	r1, #156	@ 0x9c
1005fedc:	910b      	str	r1, [sp, #44]	@ 0x2c
1005fede:	5068      	str	r0, [r5, r1]
1005fee0:	f001 f812 	bl	10060f08 <LL_get_tx_common_buffer_p>
1005fee4:	9009      	str	r0, [sp, #36]	@ 0x24
1005fee6:	f001 f817 	bl	10060f18 <LL_get_rx_common_buffer_p>
1005feea:	900a      	str	r0, [sp, #40]	@ 0x28
1005feec:	7838      	ldrb	r0, [r7, #0]
1005feee:	9008      	str	r0, [sp, #32]
1005fef0:	2094      	movs	r0, #148	@ 0x94
1005fef2:	2100      	movs	r1, #0
1005fef4:	910d      	str	r1, [sp, #52]	@ 0x34
1005fef6:	460a      	mov	r2, r1
1005fef8:	f7f4 fa1c 	bl	10054334 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005fefc:	4603      	mov	r3, r0
1005fefe:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005ff00:	9000      	str	r0, [sp, #0]
1005ff02:	4620      	mov	r0, r4
1005ff04:	9908      	ldr	r1, [sp, #32]
1005ff06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1005ff08:	f7ff fcd3 	bl	1005f8b2 <LL_eadv_Blue_Tx>
1005ff0c:	7838      	ldrb	r0, [r7, #0]
1005ff0e:	9009      	str	r0, [sp, #36]	@ 0x24
1005ff10:	2096      	movs	r0, #150	@ 0x96
1005ff12:	2101      	movs	r1, #1
1005ff14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1005ff16:	f7f4 fa0d 	bl	10054334 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005ff1a:	4603      	mov	r3, r0
1005ff1c:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005ff1e:	9000      	str	r0, [sp, #0]
1005ff20:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005ff22:	9001      	str	r0, [sp, #4]
1005ff24:	4630      	mov	r0, r6
1005ff26:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005ff28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005ff2a:	f7ff fcfd 	bl	1005f928 <LL_eadv_Blue_Rx>
1005ff2e:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
1005ff30:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005ff32:	582a      	ldr	r2, [r5, r0]
1005ff34:	7838      	ldrb	r0, [r7, #0]
1005ff36:	4b12      	ldr	r3, [pc, #72]	@ (1005ff80 <__arm_cp.24_3>)
1005ff38:	9307      	str	r3, [sp, #28]
1005ff3a:	4b12      	ldr	r3, [pc, #72]	@ (1005ff84 <__arm_cp.24_4>)
1005ff3c:	9306      	str	r3, [sp, #24]
1005ff3e:	4b12      	ldr	r3, [pc, #72]	@ (1005ff88 <__arm_cp.24_5>)
1005ff40:	9305      	str	r3, [sp, #20]
1005ff42:	4b12      	ldr	r3, [pc, #72]	@ (1005ff8c <__arm_cp.24_6>)
1005ff44:	9304      	str	r3, [sp, #16]
1005ff46:	2314      	movs	r3, #20
1005ff48:	9303      	str	r3, [sp, #12]
1005ff4a:	231f      	movs	r3, #31
1005ff4c:	ae00      	add	r6, sp, #0
1005ff4e:	c60e      	stmia	r6!, {r1, r2, r3}
1005ff50:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005ff52:	00cb      	lsls	r3, r1, #3
1005ff54:	4621      	mov	r1, r4
1005ff56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005ff58:	f001 f86e 	bl	10061038 <LL_sched_enable_taskslot>
1005ff5c:	249c      	movs	r4, #156	@ 0x9c
1005ff5e:	5929      	ldr	r1, [r5, r4]
1005ff60:	7838      	ldrb	r0, [r7, #0]
1005ff62:	f001 f845 	bl	10060ff0 <LL_sched_set_anchor>
1005ff66:	5928      	ldr	r0, [r5, r4]
1005ff68:	7839      	ldrb	r1, [r7, #0]
1005ff6a:	f001 faf5 	bl	10061558 <LL_sched_check_and_call_sched>
1005ff6e:	2000      	movs	r0, #0
1005ff70:	e703      	b.n	1005fd7a <LL_Set_Extented_Advertising_Enable+0xbe>
1005ff72:	46c0      	nop			@ (mov r8, r8)

1005ff74 <__arm_cp.24_0>:
1005ff74:	0000fffc 	.word	0x0000fffc

1005ff78 <__arm_cp.24_1>:
1005ff78:	0000ffff 	.word	0x0000ffff

1005ff7c <__arm_cp.24_2>:
1005ff7c:	20002904 	.word	0x20002904

1005ff80 <__arm_cp.24_3>:
1005ff80:	100601c5 	.word	0x100601c5

1005ff84 <__arm_cp.24_4>:
1005ff84:	1006064d 	.word	0x1006064d

1005ff88 <__arm_cp.24_5>:
1005ff88:	100604bd 	.word	0x100604bd

1005ff8c <__arm_cp.24_6>:
1005ff8c:	100601cd 	.word	0x100601cd

1005ff90 <LL_Set_Extented_Advertising_Set_Random_Address>:
1005ff90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ff92:	460c      	mov	r4, r1
1005ff94:	4606      	mov	r6, r0
1005ff96:	f7ff fd35 	bl	1005fa04 <llc_get_advertising_set_index>
1005ff9a:	4605      	mov	r5, r0
1005ff9c:	4818      	ldr	r0, [pc, #96]	@ (10060000 <__arm_cp.25_0>)
1005ff9e:	4285      	cmp	r5, r0
1005ffa0:	d02b      	beq.n	1005fffa <LL_Set_Extented_Advertising_Set_Random_Address+0x6a>
1005ffa2:	9400      	str	r4, [sp, #0]
1005ffa4:	022c      	lsls	r4, r5, #8
1005ffa6:	f000 ffc5 	bl	10060f34 <llc_get_linkms_cntxt_p>
1005ffaa:	6807      	ldr	r7, [r0, #0]
1005ffac:	1938      	adds	r0, r7, r4
1005ffae:	21be      	movs	r1, #190	@ 0xbe
1005ffb0:	5246      	strh	r6, [r0, r1]
1005ffb2:	21b8      	movs	r1, #184	@ 0xb8
1005ffb4:	5c40      	ldrb	r0, [r0, r1]
1005ffb6:	07c0      	lsls	r0, r0, #31
1005ffb8:	d007      	beq.n	1005ffca <LL_Set_Extented_Advertising_Set_Random_Address+0x3a>
1005ffba:	0228      	lsls	r0, r5, #8
1005ffbc:	1838      	adds	r0, r7, r0
1005ffbe:	21ce      	movs	r1, #206	@ 0xce
1005ffc0:	5c40      	ldrb	r0, [r0, r1]
1005ffc2:	2801      	cmp	r0, #1
1005ffc4:	d101      	bne.n	1005ffca <LL_Set_Extented_Advertising_Set_Random_Address+0x3a>
1005ffc6:	250c      	movs	r5, #12
1005ffc8:	e018      	b.n	1005fffc <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1005ffca:	480e      	ldr	r0, [pc, #56]	@ (10060004 <__arm_cp.25_1>)
1005ffcc:	6800      	ldr	r0, [r0, #0]
1005ffce:	3056      	adds	r0, #86	@ 0x56
1005ffd0:	2606      	movs	r6, #6
1005ffd2:	9c00      	ldr	r4, [sp, #0]
1005ffd4:	4621      	mov	r1, r4
1005ffd6:	4632      	mov	r2, r6
1005ffd8:	f7f3 f9ac 	bl	10053334 <BLEPLAT_MemCpy>
1005ffdc:	0228      	lsls	r0, r5, #8
1005ffde:	1838      	adds	r0, r7, r0
1005ffe0:	218c      	movs	r1, #140	@ 0x8c
1005ffe2:	2201      	movs	r2, #1
1005ffe4:	5042      	str	r2, [r0, r1]
1005ffe6:	4601      	mov	r1, r0
1005ffe8:	318c      	adds	r1, #140	@ 0x8c
1005ffea:	2500      	movs	r5, #0
1005ffec:	604d      	str	r5, [r1, #4]
1005ffee:	308d      	adds	r0, #141	@ 0x8d
1005fff0:	4621      	mov	r1, r4
1005fff2:	4632      	mov	r2, r6
1005fff4:	f7f3 f99e 	bl	10053334 <BLEPLAT_MemCpy>
1005fff8:	e000      	b.n	1005fffc <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1005fffa:	2512      	movs	r5, #18
1005fffc:	4628      	mov	r0, r5
1005fffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10060000 <__arm_cp.25_0>:
10060000:	0000ffff 	.word	0x0000ffff

10060004 <__arm_cp.25_1>:
10060004:	20002958 	.word	0x20002958

10060008 <LL_eadv_update_did>:
10060008:	b510      	push	{r4, lr}
1006000a:	4604      	mov	r4, r0
1006000c:	2000      	movs	r0, #0
1006000e:	f003 fd41 	bl	10063a94 <Hal_Get_Random_Number>
10060012:	4904      	ldr	r1, [pc, #16]	@ (10060024 <__arm_cp.27_0>)
10060014:	4001      	ands	r1, r0
10060016:	8820      	ldrh	r0, [r4, #0]
10060018:	1a40      	subs	r0, r0, r1
1006001a:	4242      	negs	r2, r0
1006001c:	4142      	adcs	r2, r0
1006001e:	404a      	eors	r2, r1
10060020:	8022      	strh	r2, [r4, #0]
10060022:	bd10      	pop	{r4, pc}

10060024 <__arm_cp.27_0>:
10060024:	00000fff 	.word	0x00000fff

10060028 <EADV_stop>:
10060028:	b5b0      	push	{r4, r5, r7, lr}
1006002a:	4604      	mov	r4, r0
1006002c:	f3ef 8010 	mrs	r0, PRIMASK
10060030:	b672      	cpsid	i
10060032:	4625      	mov	r5, r4
10060034:	35ce      	adds	r5, #206	@ 0xce
10060036:	78a8      	ldrb	r0, [r5, #2]
10060038:	f000 ffec 	bl	10061014 <LL_sched_set_cancel_request>
1006003c:	20d1      	movs	r0, #209	@ 0xd1
1006003e:	5c20      	ldrb	r0, [r4, r0]
10060040:	f000 ffe8 	bl	10061014 <LL_sched_set_cancel_request>
10060044:	b662      	cpsie	i
10060046:	78a8      	ldrb	r0, [r5, #2]
10060048:	f001 fa96 	bl	10061578 <LL_sched_check_and_wait_sched>
1006004c:	20ce      	movs	r0, #206	@ 0xce
1006004e:	2100      	movs	r1, #0
10060050:	5221      	strh	r1, [r4, r0]
10060052:	7aa8      	ldrb	r0, [r5, #10]
10060054:	28ff      	cmp	r0, #255	@ 0xff
10060056:	d001      	beq.n	1006005c <EADV_stop+0x34>
10060058:	f7fb fc93 	bl	1005b982 <llc_conn_release_conn_idx>
1006005c:	20ff      	movs	r0, #255	@ 0xff
1006005e:	72a8      	strb	r0, [r5, #10]
10060060:	7a28      	ldrb	r0, [r5, #8]
10060062:	0780      	lsls	r0, r0, #30
10060064:	d501      	bpl.n	1006006a <EADV_stop+0x42>
10060066:	f7fc fb5d 	bl	1005c724 <llc_priv_stop_privacy_timer_ucfg_weak>
1006006a:	bdb0      	pop	{r4, r5, r7, pc}

1006006c <LL_Set_Advertising_Set_Random_Address>:
1006006c:	b510      	push	{r4, lr}
1006006e:	4604      	mov	r4, r0
10060070:	f7fa f902 	bl	1005a278 <scan_csr_ucfg_weak>
10060074:	2801      	cmp	r0, #1
10060076:	d105      	bne.n	10060084 <LL_Set_Advertising_Set_Random_Address+0x18>
10060078:	f7fc fb84 	bl	1005c784 <llc_scan_get_cntxt_p>
1006007c:	21eb      	movs	r1, #235	@ 0xeb
1006007e:	5c40      	ldrb	r0, [r0, r1]
10060080:	07c0      	lsls	r0, r0, #31
10060082:	d106      	bne.n	10060092 <LL_Set_Advertising_Set_Random_Address+0x26>
10060084:	f7ff fdfc 	bl	1005fc80 <LL_LE_Set_Advertising_Parameters_Default>
10060088:	4803      	ldr	r0, [pc, #12]	@ (10060098 <__arm_cp.29_0>)
1006008a:	4621      	mov	r1, r4
1006008c:	f7ff ff80 	bl	1005ff90 <LL_Set_Extented_Advertising_Set_Random_Address>
10060090:	bd10      	pop	{r4, pc}
10060092:	200c      	movs	r0, #12
10060094:	bd10      	pop	{r4, pc}
10060096:	46c0      	nop			@ (mov r8, r8)

10060098 <__arm_cp.29_0>:
10060098:	0000fffc 	.word	0x0000fffc

1006009c <ll_set_advertising_data_ptr>:
1006009c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1006009e:	9302      	str	r3, [sp, #8]
100600a0:	4614      	mov	r4, r2
100600a2:	460f      	mov	r7, r1
100600a4:	4605      	mov	r5, r0
100600a6:	f000 ff45 	bl	10060f34 <llc_get_linkms_cntxt_p>
100600aa:	4606      	mov	r6, r0
100600ac:	4830      	ldr	r0, [pc, #192]	@ (10060170 <__arm_cp.33_0>)
100600ae:	4285      	cmp	r5, r0
100600b0:	d101      	bne.n	100600b6 <ll_set_advertising_data_ptr+0x1a>
100600b2:	201f      	movs	r0, #31
100600b4:	e007      	b.n	100600c6 <ll_set_advertising_data_ptr+0x2a>
100600b6:	2001      	movs	r0, #1
100600b8:	2102      	movs	r1, #2
100600ba:	f7f9 fff9 	bl	1005a0b0 <hci_get_set_legacy_ext_flag>
100600be:	2800      	cmp	r0, #0
100600c0:	d000      	beq.n	100600c4 <ll_set_advertising_data_ptr+0x28>
100600c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100600c4:	482b      	ldr	r0, [pc, #172]	@ (10060174 <__arm_cp.33_1>)
100600c6:	2112      	movs	r1, #18
100600c8:	42a0      	cmp	r0, r4
100600ca:	d201      	bcs.n	100600d0 <ll_set_advertising_data_ptr+0x34>
100600cc:	4608      	mov	r0, r1
100600ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100600d0:	9101      	str	r1, [sp, #4]
100600d2:	4628      	mov	r0, r5
100600d4:	f7ff fc96 	bl	1005fa04 <llc_get_advertising_set_index>
100600d8:	0200      	lsls	r0, r0, #8
100600da:	6831      	ldr	r1, [r6, #0]
100600dc:	180e      	adds	r6, r1, r0
100600de:	4620      	mov	r0, r4
100600e0:	4631      	mov	r1, r6
100600e2:	f000 fc4c 	bl	1006097e <llc_eadv_max_supported_data_check_ucfg_weak>
100600e6:	2800      	cmp	r0, #0
100600e8:	d1eb      	bne.n	100600c2 <ll_set_advertising_data_ptr+0x26>
100600ea:	20ce      	movs	r0, #206	@ 0xce
100600ec:	5c31      	ldrb	r1, [r6, r0]
100600ee:	2038      	movs	r0, #56	@ 0x38
100600f0:	5c30      	ldrb	r0, [r6, r0]
100600f2:	2f04      	cmp	r7, #4
100600f4:	d112      	bne.n	1006011c <ll_set_advertising_data_ptr+0x80>
100600f6:	2900      	cmp	r1, #0
100600f8:	d038      	beq.n	1006016c <ll_set_advertising_data_ptr+0xd0>
100600fa:	2800      	cmp	r0, #0
100600fc:	9a01      	ldr	r2, [sp, #4]
100600fe:	d01b      	beq.n	10060138 <ll_set_advertising_data_ptr+0x9c>
10060100:	481b      	ldr	r0, [pc, #108]	@ (10060170 <__arm_cp.33_0>)
10060102:	4285      	cmp	r5, r0
10060104:	d118      	bne.n	10060138 <ll_set_advertising_data_ptr+0x9c>
10060106:	8df0      	ldrh	r0, [r6, #46]	@ 0x2e
10060108:	2800      	cmp	r0, #0
1006010a:	d015      	beq.n	10060138 <ll_set_advertising_data_ptr+0x9c>
1006010c:	20b8      	movs	r0, #184	@ 0xb8
1006010e:	5a30      	ldrh	r0, [r6, r0]
10060110:	2110      	movs	r1, #16
10060112:	4001      	ands	r1, r0
10060114:	4321      	orrs	r1, r4
10060116:	4610      	mov	r0, r2
10060118:	d1d3      	bne.n	100600c2 <ll_set_advertising_data_ptr+0x26>
1006011a:	e00f      	b.n	1006013c <ll_set_advertising_data_ptr+0xa0>
1006011c:	4635      	mov	r5, r6
1006011e:	3538      	adds	r5, #56	@ 0x38
10060120:	2900      	cmp	r1, #0
10060122:	d011      	beq.n	10060148 <ll_set_advertising_data_ptr+0xac>
10060124:	2f03      	cmp	r7, #3
10060126:	d109      	bne.n	1006013c <ll_set_advertising_data_ptr+0xa0>
10060128:	2002      	movs	r0, #2
1006012a:	7028      	strb	r0, [r5, #0]
1006012c:	86f4      	strh	r4, [r6, #54]	@ 0x36
1006012e:	2000      	movs	r0, #0
10060130:	86b0      	strh	r0, [r6, #52]	@ 0x34
10060132:	9902      	ldr	r1, [sp, #8]
10060134:	6331      	str	r1, [r6, #48]	@ 0x30
10060136:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10060138:	4610      	mov	r0, r2
1006013a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006013c:	36b6      	adds	r6, #182	@ 0xb6
1006013e:	4630      	mov	r0, r6
10060140:	f7ff ff62 	bl	10060008 <LL_eadv_update_did>
10060144:	2000      	movs	r0, #0
10060146:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10060148:	4637      	mov	r7, r6
1006014a:	3728      	adds	r7, #40	@ 0x28
1006014c:	2800      	cmp	r0, #0
1006014e:	9a02      	ldr	r2, [sp, #8]
10060150:	d005      	beq.n	1006015e <ll_set_advertising_data_ptr+0xc2>
10060152:	6839      	ldr	r1, [r7, #0]
10060154:	20a1      	movs	r0, #161	@ 0xa1
10060156:	9a02      	ldr	r2, [sp, #8]
10060158:	f004 fdb2 	bl	10064cc0 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1006015c:	9a02      	ldr	r2, [sp, #8]
1006015e:	603a      	str	r2, [r7, #0]
10060160:	2001      	movs	r0, #1
10060162:	7028      	strb	r0, [r5, #0]
10060164:	85f4      	strh	r4, [r6, #46]	@ 0x2e
10060166:	2000      	movs	r0, #0
10060168:	85b0      	strh	r0, [r6, #44]	@ 0x2c
1006016a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006016c:	9801      	ldr	r0, [sp, #4]
1006016e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10060170 <__arm_cp.33_0>:
10060170:	0000fffc 	.word	0x0000fffc

10060174 <__arm_cp.33_1>:
10060174:	00000672 	.word	0x00000672

10060178 <ll_set_legacy_advertising_data_ptr>:
10060178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006017a:	460c      	mov	r4, r1
1006017c:	4605      	mov	r5, r0
1006017e:	f000 fed9 	bl	10060f34 <llc_get_linkms_cntxt_p>
10060182:	4607      	mov	r7, r0
10060184:	f7ff fd7c 	bl	1005fc80 <LL_LE_Set_Advertising_Parameters_Default>
10060188:	4e0c      	ldr	r6, [pc, #48]	@ (100601bc <__arm_cp.36_0>)
1006018a:	4630      	mov	r0, r6
1006018c:	f7ff fc3a 	bl	1005fa04 <llc_get_advertising_set_index>
10060190:	490b      	ldr	r1, [pc, #44]	@ (100601c0 <__arm_cp.36_1>)
10060192:	4288      	cmp	r0, r1
10060194:	d108      	bne.n	100601a8 <ll_set_legacy_advertising_data_ptr+0x30>
10060196:	f7ff fd43 	bl	1005fc20 <LL_Context_ReturnFree>
1006019a:	28ff      	cmp	r0, #255	@ 0xff
1006019c:	d00b      	beq.n	100601b6 <ll_set_legacy_advertising_data_ptr+0x3e>
1006019e:	0200      	lsls	r0, r0, #8
100601a0:	6839      	ldr	r1, [r7, #0]
100601a2:	1808      	adds	r0, r1, r0
100601a4:	21be      	movs	r1, #190	@ 0xbe
100601a6:	5246      	strh	r6, [r0, r1]
100601a8:	2103      	movs	r1, #3
100601aa:	4630      	mov	r0, r6
100601ac:	462a      	mov	r2, r5
100601ae:	4623      	mov	r3, r4
100601b0:	f7ff ff74 	bl	1006009c <ll_set_advertising_data_ptr>
100601b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100601b6:	2001      	movs	r0, #1
100601b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100601ba:	46c0      	nop			@ (mov r8, r8)

100601bc <__arm_cp.36_0>:
100601bc:	0000fffc 	.word	0x0000fffc

100601c0 <__arm_cp.36_1>:
100601c0:	0000ffff 	.word	0x0000ffff

100601c4 <ADV_cancelslot>:
100601c4:	21d0      	movs	r1, #208	@ 0xd0
100601c6:	22ff      	movs	r2, #255	@ 0xff
100601c8:	5442      	strb	r2, [r0, r1]
100601ca:	4770      	bx	lr

100601cc <ADV_skiproutine>:
100601cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100601ce:	b08f      	sub	sp, #60	@ 0x3c
100601d0:	4607      	mov	r7, r0
100601d2:	20d0      	movs	r0, #208	@ 0xd0
100601d4:	5c38      	ldrb	r0, [r7, r0]
100601d6:	232c      	movs	r3, #44	@ 0x2c
100601d8:	4358      	muls	r0, r3
100601da:	4a68      	ldr	r2, [pc, #416]	@ (1006037c <__arm_cp.40_0>)
100601dc:	6812      	ldr	r2, [r2, #0]
100601de:	1810      	adds	r0, r2, r0
100601e0:	7d80      	ldrb	r0, [r0, #22]
100601e2:	463c      	mov	r4, r7
100601e4:	3494      	adds	r4, #148	@ 0x94
100601e6:	463a      	mov	r2, r7
100601e8:	32b4      	adds	r2, #180	@ 0xb4
100601ea:	9205      	str	r2, [sp, #20]
100601ec:	463e      	mov	r6, r7
100601ee:	36d6      	adds	r6, #214	@ 0xd6
100601f0:	2814      	cmp	r0, #20
100601f2:	9604      	str	r6, [sp, #16]
100601f4:	9302      	str	r3, [sp, #8]
100601f6:	d10a      	bne.n	1006020e <ADV_skiproutine+0x42>
100601f8:	f7f3 f967 	bl	100534ca <BLEPLAT_GetCurrentSysTime>
100601fc:	4605      	mov	r5, r0
100601fe:	f000 fed7 	bl	10060fb0 <LL_sched_engine_return_actual_scheduler_margin>
10060202:	9b05      	ldr	r3, [sp, #20]
10060204:	1828      	adds	r0, r5, r0
10060206:	3032      	adds	r0, #50	@ 0x32
10060208:	60a0      	str	r0, [r4, #8]
1006020a:	2501      	movs	r5, #1
1006020c:	e01b      	b.n	10060246 <ADV_skiproutine+0x7a>
1006020e:	68a2      	ldr	r2, [r4, #8]
10060210:	1856      	adds	r6, r2, r1
10060212:	2500      	movs	r5, #0
10060214:	4630      	mov	r0, r6
10060216:	4611      	mov	r1, r2
10060218:	f000 fec6 	bl	10060fa8 <LL_sched_time_t1_ge_t2>
1006021c:	2800      	cmp	r0, #0
1006021e:	d005      	beq.n	1006022c <ADV_skiproutine+0x60>
10060220:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
10060222:	68a1      	ldr	r1, [r4, #8]
10060224:	180a      	adds	r2, r1, r0
10060226:	60a2      	str	r2, [r4, #8]
10060228:	1c6d      	adds	r5, r5, #1
1006022a:	e7f3      	b.n	10060214 <ADV_skiproutine+0x48>
1006022c:	9b05      	ldr	r3, [sp, #20]
1006022e:	8898      	ldrh	r0, [r3, #4]
10060230:	0700      	lsls	r0, r0, #28
10060232:	d408      	bmi.n	10060246 <ADV_skiproutine+0x7a>
10060234:	2001      	movs	r0, #1
10060236:	f003 fc34 	bl	10063aa2 <Hal_Get_Random_Number32>
1006023a:	9b05      	ldr	r3, [sp, #20]
1006023c:	4950      	ldr	r1, [pc, #320]	@ (10060380 <__arm_cp.40_1>)
1006023e:	4001      	ands	r1, r0
10060240:	68a0      	ldr	r0, [r4, #8]
10060242:	1840      	adds	r0, r0, r1
10060244:	60a0      	str	r0, [r4, #8]
10060246:	8898      	ldrh	r0, [r3, #4]
10060248:	2103      	movs	r1, #3
1006024a:	4001      	ands	r1, r0
1006024c:	1e48      	subs	r0, r1, #1
1006024e:	4181      	sbcs	r1, r0
10060250:	0048      	lsls	r0, r1, #1
10060252:	8018      	strh	r0, [r3, #0]
10060254:	7b98      	ldrb	r0, [r3, #14]
10060256:	2201      	movs	r2, #1
10060258:	4601      	mov	r1, r0
1006025a:	9201      	str	r2, [sp, #4]
1006025c:	4011      	ands	r1, r2
1006025e:	0782      	lsls	r2, r0, #30
10060260:	0fd2      	lsrs	r2, r2, #31
10060262:	1889      	adds	r1, r1, r2
10060264:	0740      	lsls	r0, r0, #29
10060266:	0fc0      	lsrs	r0, r0, #31
10060268:	1808      	adds	r0, r1, r0
1006026a:	1e40      	subs	r0, r0, #1
1006026c:	7798      	strb	r0, [r3, #30]
1006026e:	4638      	mov	r0, r7
10060270:	461e      	mov	r6, r3
10060272:	f000 f88b 	bl	1006038c <UTIL_u8GetNextAdvChannel>
10060276:	4601      	mov	r1, r0
10060278:	7f30      	ldrb	r0, [r6, #28]
1006027a:	f7f4 fd10 	bl	10054c9e <BLEPLAT_CNTR_SmSetRemapChan>
1006027e:	7f30      	ldrb	r0, [r6, #28]
10060280:	f7f4 fdcc 	bl	10054e1c <BLEPLAT_CNTR_SmSetTxMode>
10060284:	2000      	movs	r0, #0
10060286:	9003      	str	r0, [sp, #12]
10060288:	9904      	ldr	r1, [sp, #16]
1006028a:	7148      	strb	r0, [r1, #5]
1006028c:	4638      	mov	r0, r7
1006028e:	3028      	adds	r0, #40	@ 0x28
10060290:	f7ff fafe 	bl	1005f890 <LL_eadv_switchbackupdata_data_struc>
10060294:	4606      	mov	r6, r0
10060296:	4638      	mov	r0, r7
10060298:	303c      	adds	r0, #60	@ 0x3c
1006029a:	f7ff faf9 	bl	1005f890 <LL_eadv_switchbackupdata_data_struc>
1006029e:	2e00      	cmp	r6, #0
100602a0:	9e04      	ldr	r6, [sp, #16]
100602a2:	d002      	beq.n	100602aa <ADV_skiproutine+0xde>
100602a4:	7931      	ldrb	r1, [r6, #4]
100602a6:	07c9      	lsls	r1, r1, #31
100602a8:	d104      	bne.n	100602b4 <ADV_skiproutine+0xe8>
100602aa:	2800      	cmp	r0, #0
100602ac:	d005      	beq.n	100602ba <ADV_skiproutine+0xee>
100602ae:	7930      	ldrb	r0, [r6, #4]
100602b0:	0780      	lsls	r0, r0, #30
100602b2:	d502      	bpl.n	100602ba <ADV_skiproutine+0xee>
100602b4:	4638      	mov	r0, r7
100602b6:	f7ff fbe7 	bl	1005fa88 <llc_eadv_generate_new_rpa_for_one_adv_set>
100602ba:	68a1      	ldr	r1, [r4, #8]
100602bc:	6820      	ldr	r0, [r4, #0]
100602be:	9b05      	ldr	r3, [sp, #20]
100602c0:	88da      	ldrh	r2, [r3, #6]
100602c2:	2a00      	cmp	r2, #0
100602c4:	d102      	bne.n	100602cc <ADV_skiproutine+0x100>
100602c6:	7eda      	ldrb	r2, [r3, #27]
100602c8:	2a01      	cmp	r2, #1
100602ca:	d003      	beq.n	100602d4 <ADV_skiproutine+0x108>
100602cc:	4288      	cmp	r0, r1
100602ce:	da4c      	bge.n	1006036a <ADV_skiproutine+0x19e>
100602d0:	2800      	cmp	r0, #0
100602d2:	d04a      	beq.n	1006036a <ADV_skiproutine+0x19e>
100602d4:	7e98      	ldrb	r0, [r3, #26]
100602d6:	2800      	cmp	r0, #0
100602d8:	d047      	beq.n	1006036a <ADV_skiproutine+0x19e>
100602da:	8898      	ldrh	r0, [r3, #4]
100602dc:	0700      	lsls	r0, r0, #28
100602de:	d520      	bpl.n	10060322 <ADV_skiproutine+0x156>
100602e0:	a80d      	add	r0, sp, #52	@ 0x34
100602e2:	9000      	str	r0, [sp, #0]
100602e4:	9903      	ldr	r1, [sp, #12]
100602e6:	8081      	strh	r1, [r0, #4]
100602e8:	910d      	str	r1, [sp, #52]	@ 0x34
100602ea:	a806      	add	r0, sp, #24
100602ec:	9a01      	ldr	r2, [sp, #4]
100602ee:	7642      	strb	r2, [r0, #25]
100602f0:	223c      	movs	r2, #60	@ 0x3c
100602f2:	7682      	strb	r2, [r0, #26]
100602f4:	22ff      	movs	r2, #255	@ 0xff
100602f6:	7582      	strb	r2, [r0, #22]
100602f8:	81c1      	strh	r1, [r0, #14]
100602fa:	4a22      	ldr	r2, [pc, #136]	@ (10060384 <__arm_cp.40_2>)
100602fc:	8282      	strh	r2, [r0, #20]
100602fe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
10060300:	7a13      	ldrb	r3, [r2, #8]
10060302:	7603      	strb	r3, [r0, #24]
10060304:	8181      	strh	r1, [r0, #12]
10060306:	75c1      	strb	r1, [r0, #23]
10060308:	9b00      	ldr	r3, [sp, #0]
1006030a:	9307      	str	r3, [sp, #28]
1006030c:	3209      	adds	r2, #9
1006030e:	9206      	str	r2, [sp, #24]
10060310:	910a      	str	r1, [sp, #40]	@ 0x28
10060312:	9308      	str	r3, [sp, #32]
10060314:	f7fb f832 	bl	1005b37c <llc_conn_push_connection_complete_event>
10060318:	7830      	ldrb	r0, [r6, #0]
1006031a:	0780      	lsls	r0, r0, #30
1006031c:	d501      	bpl.n	10060322 <ADV_skiproutine+0x156>
1006031e:	f7fc fa01 	bl	1005c724 <llc_priv_stop_privacy_timer_ucfg_weak>
10060322:	2002      	movs	r0, #2
10060324:	f7f9 fed2 	bl	1005a0cc <hci_check_legacy_ext_flag>
10060328:	2801      	cmp	r0, #1
1006032a:	d119      	bne.n	10060360 <ADV_skiproutine+0x194>
1006032c:	9b05      	ldr	r3, [sp, #20]
1006032e:	88da      	ldrh	r2, [r3, #6]
10060330:	2a00      	cmp	r2, #0
10060332:	d001      	beq.n	10060338 <ADV_skiproutine+0x16c>
10060334:	203c      	movs	r0, #60	@ 0x3c
10060336:	e000      	b.n	1006033a <ADV_skiproutine+0x16e>
10060338:	2043      	movs	r0, #67	@ 0x43
1006033a:	9001      	str	r0, [sp, #4]
1006033c:	4812      	ldr	r0, [pc, #72]	@ (10060388 <__arm_cp.40_3>)
1006033e:	6800      	ldr	r0, [r0, #0]
10060340:	9902      	ldr	r1, [sp, #8]
10060342:	5c40      	ldrb	r0, [r0, r1]
10060344:	0100      	lsls	r0, r0, #4
10060346:	43c0      	mvns	r0, r0
10060348:	4619      	mov	r1, r3
1006034a:	23a1      	movs	r3, #161	@ 0xa1
1006034c:	4303      	orrs	r3, r0
1006034e:	20b1      	movs	r0, #177	@ 0xb1
10060350:	4018      	ands	r0, r3
10060352:	7a0b      	ldrb	r3, [r1, #8]
10060354:	1a9a      	subs	r2, r3, r2
10060356:	b2d3      	uxtb	r3, r2
10060358:	7a8a      	ldrb	r2, [r1, #10]
1006035a:	9901      	ldr	r1, [sp, #4]
1006035c:	f000 f85e 	bl	1006041c <hci_le_advertising_set_terminated_event_push>
10060360:	4638      	mov	r0, r7
10060362:	f000 f895 	bl	10060490 <EADV_stop_isr>
10060366:	68a1      	ldr	r1, [r4, #8]
10060368:	9b05      	ldr	r3, [sp, #20]
1006036a:	7f18      	ldrb	r0, [r3, #28]
1006036c:	f000 fe40 	bl	10060ff0 <LL_sched_set_anchor>
10060370:	9803      	ldr	r0, [sp, #12]
10060372:	7170      	strb	r0, [r6, #5]
10060374:	4628      	mov	r0, r5
10060376:	b00f      	add	sp, #60	@ 0x3c
10060378:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006037a:	46c0      	nop			@ (mov r8, r8)

1006037c <__arm_cp.40_0>:
1006037c:	20002960 	.word	0x20002960

10060380 <__arm_cp.40_1>:
10060380:	00000fff 	.word	0x00000fff

10060384 <__arm_cp.40_2>:
10060384:	0000ffff 	.word	0x0000ffff

10060388 <__arm_cp.40_3>:
10060388:	20002904 	.word	0x20002904

1006038c <UTIL_u8GetNextAdvChannel>:
1006038c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1006038e:	4604      	mov	r4, r0
10060390:	20c2      	movs	r0, #194	@ 0xc2
10060392:	5c27      	ldrb	r7, [r4, r0]
10060394:	2501      	movs	r5, #1
10060396:	403d      	ands	r5, r7
10060398:	07ba      	lsls	r2, r7, #30
1006039a:	0fd0      	lsrs	r0, r2, #31
1006039c:	1828      	adds	r0, r5, r0
1006039e:	0779      	lsls	r1, r7, #29
100603a0:	0fc9      	lsrs	r1, r1, #31
100603a2:	1840      	adds	r0, r0, r1
100603a4:	1e40      	subs	r0, r0, #1
100603a6:	b2c0      	uxtb	r0, r0
100603a8:	34c2      	adds	r4, #194	@ 0xc2
100603aa:	7c26      	ldrb	r6, [r4, #16]
100603ac:	42b0      	cmp	r0, r6
100603ae:	d10f      	bne.n	100603d0 <UTIL_u8GetNextAdvChannel+0x44>
100603b0:	9201      	str	r2, [sp, #4]
100603b2:	2001      	movs	r0, #1
100603b4:	9002      	str	r0, [sp, #8]
100603b6:	f003 fb6d 	bl	10063a94 <Hal_Get_Random_Number>
100603ba:	2e01      	cmp	r6, #1
100603bc:	d00a      	beq.n	100603d4 <UTIL_u8GetNextAdvChannel+0x48>
100603be:	2e02      	cmp	r6, #2
100603c0:	d10e      	bne.n	100603e0 <UTIL_u8GetNextAdvChannel+0x54>
100603c2:	b2c0      	uxtb	r0, r0
100603c4:	2106      	movs	r1, #6
100603c6:	f7df ffc1 	bl	1004034c <__aeabi_uidivmod>
100603ca:	a012      	add	r0, pc, #72	@ (adr r0, 10060414 <UTIL_u8GetNextAdvChannel+0x88>)
100603cc:	5c40      	ldrb	r0, [r0, r1]
100603ce:	e012      	b.n	100603f6 <UTIL_u8GetNextAdvChannel+0x6a>
100603d0:	7c60      	ldrb	r0, [r4, #17]
100603d2:	e011      	b.n	100603f8 <UTIL_u8GetNextAdvChannel+0x6c>
100603d4:	9902      	ldr	r1, [sp, #8]
100603d6:	4008      	ands	r0, r1
100603d8:	2d00      	cmp	r5, #0
100603da:	d104      	bne.n	100603e6 <UTIL_u8GetNextAdvChannel+0x5a>
100603dc:	a10c      	add	r1, pc, #48	@ (adr r1, 10060410 <UTIL_u8GetNextAdvChannel+0x84>)
100603de:	e008      	b.n	100603f2 <UTIL_u8GetNextAdvChannel+0x66>
100603e0:	08b8      	lsrs	r0, r7, #2
100603e2:	1a38      	subs	r0, r7, r0
100603e4:	e007      	b.n	100603f6 <UTIL_u8GetNextAdvChannel+0x6a>
100603e6:	9901      	ldr	r1, [sp, #4]
100603e8:	2900      	cmp	r1, #0
100603ea:	d401      	bmi.n	100603f0 <UTIL_u8GetNextAdvChannel+0x64>
100603ec:	a107      	add	r1, pc, #28	@ (adr r1, 1006040c <UTIL_u8GetNextAdvChannel+0x80>)
100603ee:	e000      	b.n	100603f2 <UTIL_u8GetNextAdvChannel+0x66>
100603f0:	a105      	add	r1, pc, #20	@ (adr r1, 10060408 <UTIL_u8GetNextAdvChannel+0x7c>)
100603f2:	1808      	adds	r0, r1, r0
100603f4:	7800      	ldrb	r0, [r0, #0]
100603f6:	7460      	strb	r0, [r4, #17]
100603f8:	0071      	lsls	r1, r6, #1
100603fa:	b2c2      	uxtb	r2, r0
100603fc:	40ca      	lsrs	r2, r1
100603fe:	2003      	movs	r0, #3
10060400:	4010      	ands	r0, r2
10060402:	3024      	adds	r0, #36	@ 0x24
10060404:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10060406:	46c0      	nop			@ (mov r8, r8)
10060408:	00000906 	.word	0x00000906
1006040c:	00000d07 	.word	0x00000d07
10060410:	00000e0b 	.word	0x00000e0b
10060414:	2d271e1b 	.word	0x2d271e1b
10060418:	00003936 	.word	0x00003936

1006041c <hci_le_advertising_set_terminated_event_push>:
1006041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006041e:	461f      	mov	r7, r3
10060420:	4616      	mov	r6, r2
10060422:	460d      	mov	r5, r1
10060424:	4604      	mov	r4, r0
10060426:	06c0      	lsls	r0, r0, #27
10060428:	d40b      	bmi.n	10060442 <hci_le_advertising_set_terminated_event_push+0x26>
1006042a:	4817      	ldr	r0, [pc, #92]	@ (10060488 <__arm_cp.42_0>)
1006042c:	6800      	ldr	r0, [r0, #0]
1006042e:	213d      	movs	r1, #61	@ 0x3d
10060430:	5c41      	ldrb	r1, [r0, r1]
10060432:	0689      	lsls	r1, r1, #26
10060434:	d527      	bpl.n	10060486 <hci_le_advertising_set_terminated_event_push+0x6a>
10060436:	303d      	adds	r0, #61	@ 0x3d
10060438:	7ac0      	ldrb	r0, [r0, #11]
1006043a:	0780      	lsls	r0, r0, #30
1006043c:	d523      	bpl.n	10060486 <hci_le_advertising_set_terminated_event_push+0x6a>
1006043e:	221f      	movs	r2, #31
10060440:	e002      	b.n	10060448 <hci_le_advertising_set_terminated_event_push+0x2c>
10060442:	20bf      	movs	r0, #191	@ 0xbf
10060444:	4004      	ands	r4, r0
10060446:	2211      	movs	r2, #17
10060448:	4810      	ldr	r0, [pc, #64]	@ (1006048c <__arm_cp.42_1>)
1006044a:	6800      	ldr	r0, [r0, #0]
1006044c:	0761      	lsls	r1, r4, #29
1006044e:	0ec9      	lsrs	r1, r1, #27
10060450:	1840      	adds	r0, r0, r1
10060452:	6900      	ldr	r0, [r0, #16]
10060454:	2303      	movs	r3, #3
10060456:	4621      	mov	r1, r4
10060458:	f7f5 fcb8 	bl	10055dcc <aci_event_fifo_push_header>
1006045c:	2800      	cmp	r0, #0
1006045e:	d012      	beq.n	10060486 <hci_le_advertising_set_terminated_event_push+0x6a>
10060460:	4601      	mov	r1, r0
10060462:	200f      	movs	r0, #15
10060464:	72c8      	strb	r0, [r1, #11]
10060466:	20ff      	movs	r0, #255	@ 0xff
10060468:	7288      	strb	r0, [r1, #10]
1006046a:	730f      	strb	r7, [r1, #12]
1006046c:	724e      	strb	r6, [r1, #9]
1006046e:	720d      	strb	r5, [r1, #8]
10060470:	2012      	movs	r0, #18
10060472:	71c8      	strb	r0, [r1, #7]
10060474:	2006      	movs	r0, #6
10060476:	7188      	strb	r0, [r1, #6]
10060478:	203e      	movs	r0, #62	@ 0x3e
1006047a:	7148      	strb	r0, [r1, #5]
1006047c:	2004      	movs	r0, #4
1006047e:	7108      	strb	r0, [r1, #4]
10060480:	4620      	mov	r0, r4
10060482:	f7f5 fd40 	bl	10055f06 <aci_event_fifo_push>
10060486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10060488 <__arm_cp.42_0>:
10060488:	20002958 	.word	0x20002958

1006048c <__arm_cp.42_1>:
1006048c:	20002908 	.word	0x20002908

10060490 <EADV_stop_isr>:
10060490:	b5b0      	push	{r4, r5, r7, lr}
10060492:	4604      	mov	r4, r0
10060494:	20d1      	movs	r0, #209	@ 0xd1
10060496:	5c20      	ldrb	r0, [r4, r0]
10060498:	f000 fdbc 	bl	10061014 <LL_sched_set_cancel_request>
1006049c:	4625      	mov	r5, r4
1006049e:	35ce      	adds	r5, #206	@ 0xce
100604a0:	78a8      	ldrb	r0, [r5, #2]
100604a2:	f000 fdb7 	bl	10061014 <LL_sched_set_cancel_request>
100604a6:	20ce      	movs	r0, #206	@ 0xce
100604a8:	2100      	movs	r1, #0
100604aa:	5221      	strh	r1, [r4, r0]
100604ac:	7aa8      	ldrb	r0, [r5, #10]
100604ae:	28ff      	cmp	r0, #255	@ 0xff
100604b0:	d001      	beq.n	100604b6 <EADV_stop_isr+0x26>
100604b2:	f7fb fa66 	bl	1005b982 <llc_conn_release_conn_idx>
100604b6:	20ff      	movs	r0, #255	@ 0xff
100604b8:	72a8      	strb	r0, [r5, #10]
100604ba:	bdb0      	pop	{r4, r5, r7, pc}

100604bc <ADV_createslot>:
100604bc:	b570      	push	{r4, r5, r6, lr}
100604be:	4604      	mov	r4, r0
100604c0:	20c5      	movs	r0, #197	@ 0xc5
100604c2:	5c20      	ldrb	r0, [r4, r0]
100604c4:	f7fc f9be 	bl	1005c844 <llc_convert_hci_phy_enum_to_hw_phy>
100604c8:	4605      	mov	r5, r0
100604ca:	4626      	mov	r6, r4
100604cc:	36c5      	adds	r6, #197	@ 0xc5
100604ce:	7af0      	ldrb	r0, [r6, #11]
100604d0:	4629      	mov	r1, r5
100604d2:	f7f4 fcc4 	bl	10054e5e <BLEPLAT_CNTR_SmSetTxPhy>
100604d6:	7af0      	ldrb	r0, [r6, #11]
100604d8:	4629      	mov	r1, r5
100604da:	f7f4 fc54 	bl	10054d86 <BLEPLAT_CNTR_SmSetRxPhy>
100604de:	f7f3 ffa0 	bl	10054422 <BLEPLAT_CNTR_GlobEnableBlue>
100604e2:	f000 fd11 	bl	10060f08 <LL_get_tx_common_buffer_p>
100604e6:	4602      	mov	r2, r0
100604e8:	7db0      	ldrb	r0, [r6, #22]
100604ea:	4621      	mov	r1, r4
100604ec:	f000 f801 	bl	100604f2 <EADV_vPrepareAdvOrRspLegacyPacket>
100604f0:	bd70      	pop	{r4, r5, r6, pc}

100604f2 <EADV_vPrepareAdvOrRspLegacyPacket>:
100604f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100604f4:	4614      	mov	r4, r2
100604f6:	460d      	mov	r5, r1
100604f8:	4606      	mov	r6, r0
100604fa:	460f      	mov	r7, r1
100604fc:	37b8      	adds	r7, #184	@ 0xb8
100604fe:	2004      	movs	r0, #4
10060500:	2e00      	cmp	r6, #0
10060502:	4601      	mov	r1, r0
10060504:	d10d      	bne.n	10060522 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
10060506:	8839      	ldrh	r1, [r7, #0]
10060508:	074a      	lsls	r2, r1, #29
1006050a:	d407      	bmi.n	1006051c <EADV_vPrepareAdvOrRspLegacyPacket+0x2a>
1006050c:	2203      	movs	r2, #3
1006050e:	4011      	ands	r1, r2
10060510:	424a      	negs	r2, r1
10060512:	414a      	adcs	r2, r1
10060514:	2902      	cmp	r1, #2
10060516:	d003      	beq.n	10060520 <EADV_vPrepareAdvOrRspLegacyPacket+0x2e>
10060518:	0051      	lsls	r1, r2, #1
1006051a:	e002      	b.n	10060522 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1006051c:	2101      	movs	r1, #1
1006051e:	e000      	b.n	10060522 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
10060520:	2106      	movs	r1, #6
10060522:	7021      	strb	r1, [r4, #0]
10060524:	2e00      	cmp	r6, #0
10060526:	d107      	bne.n	10060538 <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
10060528:	8839      	ldrh	r1, [r7, #0]
1006052a:	4001      	ands	r1, r0
1006052c:	d104      	bne.n	10060538 <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1006052e:	202e      	movs	r0, #46	@ 0x2e
10060530:	5c28      	ldrb	r0, [r5, r0]
10060532:	1d80      	adds	r0, r0, #6
10060534:	7060      	strb	r0, [r4, #1]
10060536:	e00f      	b.n	10060558 <EADV_vPrepareAdvOrRspLegacyPacket+0x66>
10060538:	2e00      	cmp	r6, #0
1006053a:	d004      	beq.n	10060546 <EADV_vPrepareAdvOrRspLegacyPacket+0x54>
1006053c:	4628      	mov	r0, r5
1006053e:	3042      	adds	r0, #66	@ 0x42
10060540:	7800      	ldrb	r0, [r0, #0]
10060542:	1d80      	adds	r0, r0, #6
10060544:	e000      	b.n	10060548 <EADV_vPrepareAdvOrRspLegacyPacket+0x56>
10060546:	200c      	movs	r0, #12
10060548:	7060      	strb	r0, [r4, #1]
1006054a:	4620      	mov	r0, r4
1006054c:	3008      	adds	r0, #8
1006054e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
10060550:	3109      	adds	r1, #9
10060552:	2206      	movs	r2, #6
10060554:	f7f2 feee 	bl	10053334 <BLEPLAT_MemCpy>
10060558:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1006055a:	1ca0      	adds	r0, r4, #2
1006055c:	1c49      	adds	r1, r1, #1
1006055e:	2206      	movs	r2, #6
10060560:	f7f2 fee8 	bl	10053334 <BLEPLAT_MemCpy>
10060564:	7820      	ldrb	r0, [r4, #0]
10060566:	212f      	movs	r1, #47	@ 0x2f
10060568:	4001      	ands	r1, r0
1006056a:	7021      	strb	r1, [r4, #0]
1006056c:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1006056e:	7800      	ldrb	r0, [r0, #0]
10060570:	07c0      	lsls	r0, r0, #31
10060572:	0e40      	lsrs	r0, r0, #25
10060574:	1840      	adds	r0, r0, r1
10060576:	7020      	strb	r0, [r4, #0]
10060578:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1006057a:	7a09      	ldrb	r1, [r1, #8]
1006057c:	01c9      	lsls	r1, r1, #7
1006057e:	1808      	adds	r0, r1, r0
10060580:	7020      	strb	r0, [r4, #0]
10060582:	f000 f9ed 	bl	10060960 <llc_get_channel_sel_algo2_enabled>
10060586:	7821      	ldrb	r1, [r4, #0]
10060588:	0140      	lsls	r0, r0, #5
1006058a:	4308      	orrs	r0, r1
1006058c:	7020      	strb	r0, [r4, #0]
1006058e:	4271      	negs	r1, r6
10060590:	4171      	adcs	r1, r6
10060592:	8838      	ldrh	r0, [r7, #0]
10060594:	2204      	movs	r2, #4
10060596:	4002      	ands	r2, r0
10060598:	0890      	lsrs	r0, r2, #2
1006059a:	4008      	ands	r0, r1
1006059c:	d101      	bne.n	100605a2 <EADV_vPrepareAdvOrRspLegacyPacket+0xb0>
1006059e:	2708      	movs	r7, #8
100605a0:	e000      	b.n	100605a4 <EADV_vPrepareAdvOrRspLegacyPacket+0xb2>
100605a2:	270e      	movs	r7, #14
100605a4:	2800      	cmp	r0, #0
100605a6:	d001      	beq.n	100605ac <EADV_vPrepareAdvOrRspLegacyPacket+0xba>
100605a8:	200c      	movs	r0, #12
100605aa:	e011      	b.n	100605d0 <EADV_vPrepareAdvOrRspLegacyPacket+0xde>
100605ac:	2e00      	cmp	r6, #0
100605ae:	d001      	beq.n	100605b4 <EADV_vPrepareAdvOrRspLegacyPacket+0xc2>
100605b0:	203c      	movs	r0, #60	@ 0x3c
100605b2:	e000      	b.n	100605b6 <EADV_vPrepareAdvOrRspLegacyPacket+0xc4>
100605b4:	2028      	movs	r0, #40	@ 0x28
100605b6:	5829      	ldr	r1, [r5, r0]
100605b8:	2e00      	cmp	r6, #0
100605ba:	d001      	beq.n	100605c0 <EADV_vPrepareAdvOrRspLegacyPacket+0xce>
100605bc:	2042      	movs	r0, #66	@ 0x42
100605be:	e000      	b.n	100605c2 <EADV_vPrepareAdvOrRspLegacyPacket+0xd0>
100605c0:	202e      	movs	r0, #46	@ 0x2e
100605c2:	5a2d      	ldrh	r5, [r5, r0]
100605c4:	19e0      	adds	r0, r4, r7
100605c6:	462a      	mov	r2, r5
100605c8:	f7f2 feb4 	bl	10053334 <BLEPLAT_MemCpy>
100605cc:	1978      	adds	r0, r7, r5
100605ce:	1e80      	subs	r0, r0, #2
100605d0:	7060      	strb	r0, [r4, #1]
100605d2:	2000      	movs	r0, #0
100605d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100605d8 <ADV_ISR_connect_request_received>:
100605d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100605da:	b085      	sub	sp, #20
100605dc:	4616      	mov	r6, r2
100605de:	460d      	mov	r5, r1
100605e0:	4604      	mov	r4, r0
100605e2:	f7f3 ffff 	bl	100545e4 <BLEPLAT_CNTR_PacketClrPllTrig>
100605e6:	f7f2 ffb1 	bl	1005354c <BLEPLAT_ClearRadioTimerValue>
100605ea:	2003      	movs	r0, #3
100605ec:	43c0      	mvns	r0, r0
100605ee:	1cc1      	adds	r1, r0, #3
100605f0:	4668      	mov	r0, sp
100605f2:	8101      	strh	r1, [r0, #8]
100605f4:	2101      	movs	r1, #1
100605f6:	8201      	strh	r1, [r0, #16]
100605f8:	7341      	strb	r1, [r0, #13]
100605fa:	21be      	movs	r1, #190	@ 0xbe
100605fc:	5a61      	ldrh	r1, [r4, r1]
100605fe:	7281      	strb	r1, [r0, #10]
10060600:	4627      	mov	r7, r4
10060602:	37be      	adds	r7, #190	@ 0xbe
10060604:	7eba      	ldrb	r2, [r7, #26]
10060606:	72c2      	strb	r2, [r0, #11]
10060608:	7cba      	ldrb	r2, [r7, #18]
1006060a:	7382      	strb	r2, [r0, #14]
1006060c:	4a0e      	ldr	r2, [pc, #56]	@ (10060648 <__arm_cp.47_0>)
1006060e:	1a89      	subs	r1, r1, r2
10060610:	1e4a      	subs	r2, r1, #1
10060612:	4191      	sbcs	r1, r2
10060614:	73c1      	strb	r1, [r0, #15]
10060616:	7301      	strb	r1, [r0, #12]
10060618:	9601      	str	r6, [sp, #4]
1006061a:	9500      	str	r5, [sp, #0]
1006061c:	f7fb f9ec 	bl	1005b9f8 <llc_conn_go_to_connect>
10060620:	4620      	mov	r0, r4
10060622:	3028      	adds	r0, #40	@ 0x28
10060624:	f7ff f934 	bl	1005f890 <LL_eadv_switchbackupdata_data_struc>
10060628:	343c      	adds	r4, #60	@ 0x3c
1006062a:	4620      	mov	r0, r4
1006062c:	f7ff f930 	bl	1005f890 <LL_eadv_switchbackupdata_data_struc>
10060630:	2000      	movs	r0, #0
10060632:	7438      	strb	r0, [r7, #16]
10060634:	7cb8      	ldrb	r0, [r7, #18]
10060636:	f000 fd5d 	bl	100610f4 <LL_sched_engine>
1006063a:	7e38      	ldrb	r0, [r7, #24]
1006063c:	0780      	lsls	r0, r0, #30
1006063e:	d501      	bpl.n	10060644 <ADV_ISR_connect_request_received+0x6c>
10060640:	f7fc f870 	bl	1005c724 <llc_priv_stop_privacy_timer_ucfg_weak>
10060644:	b005      	add	sp, #20
10060646:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060648 <__arm_cp.47_0>:
10060648:	0000fffc 	.word	0x0000fffc

1006064c <ADV_ISR>:
1006064c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006064e:	b08d      	sub	sp, #52	@ 0x34
10060650:	4605      	mov	r5, r0
10060652:	f000 fc61 	bl	10060f18 <LL_get_rx_common_buffer_p>
10060656:	9006      	str	r0, [sp, #24]
10060658:	4c87      	ldr	r4, [pc, #540]	@ (10060878 <__arm_cp.48_0>)
1006065a:	6820      	ldr	r0, [r4, #0]
1006065c:	f7f3 ff7b 	bl	10054556 <BLEPLAT_CNTR_IntGetIntStatusRxOk>
10060660:	4606      	mov	r6, r0
10060662:	6820      	ldr	r0, [r4, #0]
10060664:	f7f3 ff8e 	bl	10054584 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
10060668:	4607      	mov	r7, r0
1006066a:	20d0      	movs	r0, #208	@ 0xd0
1006066c:	5c28      	ldrb	r0, [r5, r0]
1006066e:	212c      	movs	r1, #44	@ 0x2c
10060670:	4341      	muls	r1, r0
10060672:	4a82      	ldr	r2, [pc, #520]	@ (1006087c <__arm_cp.48_1>)
10060674:	6812      	ldr	r2, [r2, #0]
10060676:	1851      	adds	r1, r2, r1
10060678:	7d89      	ldrb	r1, [r1, #22]
1006067a:	2914      	cmp	r1, #20
1006067c:	d103      	bne.n	10060686 <ADV_ISR+0x3a>
1006067e:	210a      	movs	r1, #10
10060680:	2203      	movs	r2, #3
10060682:	f000 fefd 	bl	10061480 <LL_sched_set_priority>
10060686:	462c      	mov	r4, r5
10060688:	34b4      	adds	r4, #180	@ 0xb4
1006068a:	4628      	mov	r0, r5
1006068c:	30db      	adds	r0, #219	@ 0xdb
1006068e:	9004      	str	r0, [sp, #16]
10060690:	2e00      	cmp	r6, #0
10060692:	d038      	beq.n	10060706 <ADV_ISR+0xba>
10060694:	9505      	str	r5, [sp, #20]
10060696:	2700      	movs	r7, #0
10060698:	970c      	str	r7, [sp, #48]	@ 0x30
1006069a:	970b      	str	r7, [sp, #44]	@ 0x2c
1006069c:	9d06      	ldr	r5, [sp, #24]
1006069e:	7828      	ldrb	r0, [r5, #0]
100606a0:	09c0      	lsrs	r0, r0, #7
100606a2:	a90b      	add	r1, sp, #44	@ 0x2c
100606a4:	7008      	strb	r0, [r1, #0]
100606a6:	4876      	ldr	r0, [pc, #472]	@ (10060880 <__arm_cp.48_2>)
100606a8:	6800      	ldr	r0, [r0, #0]
100606aa:	22d8      	movs	r2, #216	@ 0xd8
100606ac:	5c80      	ldrb	r0, [r0, r2]
100606ae:	9003      	str	r0, [sp, #12]
100606b0:	1c48      	adds	r0, r1, #1
100606b2:	4629      	mov	r1, r5
100606b4:	3108      	adds	r1, #8
100606b6:	2606      	movs	r6, #6
100606b8:	4632      	mov	r2, r6
100606ba:	f7f2 fe3b 	bl	10053334 <BLEPLAT_MemCpy>
100606be:	970a      	str	r7, [sp, #40]	@ 0x28
100606c0:	9709      	str	r7, [sp, #36]	@ 0x24
100606c2:	7828      	ldrb	r0, [r5, #0]
100606c4:	0640      	lsls	r0, r0, #25
100606c6:	0fc0      	lsrs	r0, r0, #31
100606c8:	a909      	add	r1, sp, #36	@ 0x24
100606ca:	7008      	strb	r0, [r1, #0]
100606cc:	1c48      	adds	r0, r1, #1
100606ce:	1ca9      	adds	r1, r5, #2
100606d0:	4632      	mov	r2, r6
100606d2:	f7f2 fe2f 	bl	10053334 <BLEPLAT_MemCpy>
100606d6:	7828      	ldrb	r0, [r5, #0]
100606d8:	260f      	movs	r6, #15
100606da:	4006      	ands	r6, r0
100606dc:	2e05      	cmp	r6, #5
100606de:	d101      	bne.n	100606e4 <ADV_ISR+0x98>
100606e0:	f7f2 ff34 	bl	1005354c <BLEPLAT_ClearRadioTimerValue>
100606e4:	7be3      	ldrb	r3, [r4, #15]
100606e6:	7922      	ldrb	r2, [r4, #4]
100606e8:	9702      	str	r7, [sp, #8]
100606ea:	ad07      	add	r5, sp, #28
100606ec:	9501      	str	r5, [sp, #4]
100606ee:	9805      	ldr	r0, [sp, #20]
100606f0:	3084      	adds	r0, #132	@ 0x84
100606f2:	9000      	str	r0, [sp, #0]
100606f4:	a809      	add	r0, sp, #36	@ 0x24
100606f6:	4631      	mov	r1, r6
100606f8:	f006 faee 	bl	10066cd8 <llc_check_sreq_or_creq_tx_addr_ucfg_weak>
100606fc:	0841      	lsrs	r1, r0, #1
100606fe:	297e      	cmp	r1, #126	@ 0x7e
10060700:	d807      	bhi.n	10060712 <ADV_ISR+0xc6>
10060702:	4601      	mov	r1, r0
10060704:	e006      	b.n	10060714 <ADV_ISR+0xc8>
10060706:	2601      	movs	r6, #1
10060708:	2f00      	cmp	r7, #0
1006070a:	d154      	bne.n	100607b6 <ADV_ISR+0x16a>
1006070c:	2700      	movs	r7, #0
1006070e:	8027      	strh	r7, [r4, #0]
10060710:	e056      	b.n	100607c0 <ADV_ISR+0x174>
10060712:	2101      	movs	r1, #1
10060714:	7029      	strb	r1, [r5, #0]
10060716:	9d05      	ldr	r5, [sp, #20]
10060718:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1006071a:	680a      	ldr	r2, [r1, #0]
1006071c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1006071e:	429a      	cmp	r2, r3
10060720:	d12d      	bne.n	1006077e <ADV_ISR+0x132>
10060722:	6849      	ldr	r1, [r1, #4]
10060724:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10060726:	4291      	cmp	r1, r2
10060728:	d129      	bne.n	1006077e <ADV_ISR+0x132>
1006072a:	4607      	mov	r7, r0
1006072c:	3fff      	subs	r7, #255	@ 0xff
1006072e:	1e79      	subs	r1, r7, #1
10060730:	418f      	sbcs	r7, r1
10060732:	2e03      	cmp	r6, #3
10060734:	d123      	bne.n	1006077e <ADV_ISR+0x132>
10060736:	28ff      	cmp	r0, #255	@ 0xff
10060738:	d021      	beq.n	1006077e <ADV_ISR+0x132>
1006073a:	88a0      	ldrh	r0, [r4, #4]
1006073c:	2701      	movs	r7, #1
1006073e:	0780      	lsls	r0, r0, #30
10060740:	d51d      	bpl.n	1006077e <ADV_ISR+0x132>
10060742:	9803      	ldr	r0, [sp, #12]
10060744:	2801      	cmp	r0, #1
10060746:	d11a      	bne.n	1006077e <ADV_ISR+0x132>
10060748:	4628      	mov	r0, r5
1006074a:	f7f3 ff4b 	bl	100545e4 <BLEPLAT_CNTR_PacketClrPllTrig>
1006074e:	7e60      	ldrb	r0, [r4, #25]
10060750:	2801      	cmp	r0, #1
10060752:	d109      	bne.n	10060768 <ADV_ISR+0x11c>
10060754:	8960      	ldrh	r0, [r4, #10]
10060756:	494b      	ldr	r1, [pc, #300]	@ (10060884 <__arm_cp.48_3>)
10060758:	4288      	cmp	r0, r1
1006075a:	d005      	beq.n	10060768 <ADV_ISR+0x11c>
1006075c:	aa07      	add	r2, sp, #28
1006075e:	7811      	ldrb	r1, [r2, #0]
10060760:	b2c0      	uxtb	r0, r0
10060762:	1c52      	adds	r2, r2, #1
10060764:	f000 f892 	bl	1006088c <hci_le_scan_request_received_event_push>
10060768:	7f20      	ldrb	r0, [r4, #28]
1006076a:	f7f4 fb57 	bl	10054e1c <BLEPLAT_CNTR_SmSetTxMode>
1006076e:	2001      	movs	r0, #1
10060770:	9904      	ldr	r1, [sp, #16]
10060772:	7008      	strb	r0, [r1, #0]
10060774:	4628      	mov	r0, r5
10060776:	f7ff fea1 	bl	100604bc <ADV_createslot>
1006077a:	2600      	movs	r6, #0
1006077c:	e020      	b.n	100607c0 <ADV_ISR+0x174>
1006077e:	88a0      	ldrh	r0, [r4, #4]
10060780:	07c0      	lsls	r0, r0, #31
10060782:	d01a      	beq.n	100607ba <ADV_ISR+0x16e>
10060784:	2e05      	cmp	r6, #5
10060786:	d118      	bne.n	100607ba <ADV_ISR+0x16e>
10060788:	9806      	ldr	r0, [sp, #24]
1006078a:	f7fa ffbf 	bl	1005b70c <llc_conn_check_connect_request_params>
1006078e:	2801      	cmp	r0, #1
10060790:	d113      	bne.n	100607ba <ADV_ISR+0x16e>
10060792:	9908      	ldr	r1, [sp, #32]
10060794:	9807      	ldr	r0, [sp, #28]
10060796:	f7fa fd91 	bl	1005b2bc <llc_conn_list_search_address>
1006079a:	4241      	negs	r1, r0
1006079c:	4141      	adcs	r1, r0
1006079e:	4039      	ands	r1, r7
100607a0:	2901      	cmp	r1, #1
100607a2:	d10a      	bne.n	100607ba <ADV_ISR+0x16e>
100607a4:	9803      	ldr	r0, [sp, #12]
100607a6:	2801      	cmp	r0, #1
100607a8:	d107      	bne.n	100607ba <ADV_ISR+0x16e>
100607aa:	aa07      	add	r2, sp, #28
100607ac:	4628      	mov	r0, r5
100607ae:	9906      	ldr	r1, [sp, #24]
100607b0:	f7ef f9bc 	bl	1004fb2c <ADV_ISR_connect_request_received_ucfg>
100607b4:	2601      	movs	r6, #1
100607b6:	2700      	movs	r7, #0
100607b8:	e002      	b.n	100607c0 <ADV_ISR+0x174>
100607ba:	2700      	movs	r7, #0
100607bc:	8027      	strh	r7, [r4, #0]
100607be:	2601      	movs	r6, #1
100607c0:	8821      	ldrh	r1, [r4, #0]
100607c2:	7fa0      	ldrb	r0, [r4, #30]
100607c4:	2800      	cmp	r0, #0
100607c6:	d022      	beq.n	1006080e <ADV_ISR+0x1c2>
100607c8:	2900      	cmp	r1, #0
100607ca:	d122      	bne.n	10060812 <ADV_ISR+0x1c6>
100607cc:	1e40      	subs	r0, r0, #1
100607ce:	77a0      	strb	r0, [r4, #30]
100607d0:	88a0      	ldrh	r0, [r4, #4]
100607d2:	2103      	movs	r1, #3
100607d4:	4001      	ands	r1, r0
100607d6:	1e48      	subs	r0, r1, #1
100607d8:	4181      	sbcs	r1, r0
100607da:	0048      	lsls	r0, r1, #1
100607dc:	8020      	strh	r0, [r4, #0]
100607de:	4628      	mov	r0, r5
100607e0:	f7ff fdd4 	bl	1006038c <UTIL_u8GetNextAdvChannel>
100607e4:	4601      	mov	r1, r0
100607e6:	7f20      	ldrb	r0, [r4, #28]
100607e8:	f7f4 fa59 	bl	10054c9e <BLEPLAT_CNTR_SmSetRemapChan>
100607ec:	7f20      	ldrb	r0, [r4, #28]
100607ee:	f7f4 fb15 	bl	10054e1c <BLEPLAT_CNTR_SmSetTxMode>
100607f2:	4628      	mov	r0, r5
100607f4:	f7f3 ffea 	bl	100547cc <BLEPLAT_CNTR_PacketSetPllTrig>
100607f8:	f7f2 fea8 	bl	1005354c <BLEPLAT_ClearRadioTimerValue>
100607fc:	2000      	movs	r0, #0
100607fe:	9904      	ldr	r1, [sp, #16]
10060800:	7008      	strb	r0, [r1, #0]
10060802:	4628      	mov	r0, r5
10060804:	f7ff fe5a 	bl	100604bc <ADV_createslot>
10060808:	f7f2 feb8 	bl	1005357c <BLEPLAT_SetRadioCloseTimeout>
1006080c:	e02a      	b.n	10060864 <ADV_ISR+0x218>
1006080e:	2900      	cmp	r1, #0
10060810:	d019      	beq.n	10060846 <ADV_ISR+0x1fa>
10060812:	4819      	ldr	r0, [pc, #100]	@ (10060878 <__arm_cp.48_0>)
10060814:	6800      	ldr	r0, [r0, #0]
10060816:	f7f3 feb5 	bl	10054584 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1006081a:	2800      	cmp	r0, #0
1006081c:	d022      	beq.n	10060864 <ADV_ISR+0x218>
1006081e:	4628      	mov	r0, r5
10060820:	f7f3 ffd4 	bl	100547cc <BLEPLAT_CNTR_PacketSetPllTrig>
10060824:	7c60      	ldrb	r0, [r4, #17]
10060826:	2801      	cmp	r0, #1
10060828:	d001      	beq.n	1006082e <ADV_ISR+0x1e2>
1006082a:	4917      	ldr	r1, [pc, #92]	@ (10060888 <__arm_cp.48_4>)
1006082c:	e000      	b.n	10060830 <ADV_ISR+0x1e4>
1006082e:	2146      	movs	r1, #70	@ 0x46
10060830:	3514      	adds	r5, #20
10060832:	4628      	mov	r0, r5
10060834:	f7f4 f82b 	bl	1005488e <BLEPLAT_CNTR_SetRcvLen>
10060838:	8820      	ldrh	r0, [r4, #0]
1006083a:	1e40      	subs	r0, r0, #1
1006083c:	8020      	strh	r0, [r4, #0]
1006083e:	f7f3 fdf0 	bl	10054422 <BLEPLAT_CNTR_GlobEnableBlue>
10060842:	2600      	movs	r6, #0
10060844:	e00e      	b.n	10060864 <ADV_ISR+0x218>
10060846:	f7f2 fe81 	bl	1005354c <BLEPLAT_ClearRadioTimerValue>
1006084a:	4628      	mov	r0, r5
1006084c:	f7f3 ffbe 	bl	100547cc <BLEPLAT_CNTR_PacketSetPllTrig>
10060850:	88e0      	ldrh	r0, [r4, #6]
10060852:	1e40      	subs	r0, r0, #1
10060854:	80e0      	strh	r0, [r4, #6]
10060856:	2100      	movs	r1, #0
10060858:	4628      	mov	r0, r5
1006085a:	f7ff fcb7 	bl	100601cc <ADV_skiproutine>
1006085e:	7f20      	ldrb	r0, [r4, #28]
10060860:	f000 fc48 	bl	100610f4 <LL_sched_engine>
10060864:	2f00      	cmp	r7, #0
10060866:	d002      	beq.n	1006086e <ADV_ISR+0x222>
10060868:	8820      	ldrh	r0, [r4, #0]
1006086a:	1e40      	subs	r0, r0, #1
1006086c:	8020      	strh	r0, [r4, #0]
1006086e:	f7f5 faa9 	bl	10055dc4 <log_notify_us_flush_ucfg_weak>
10060872:	4630      	mov	r0, r6
10060874:	b00d      	add	sp, #52	@ 0x34
10060876:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060878 <__arm_cp.48_0>:
10060878:	20002954 	.word	0x20002954

1006087c <__arm_cp.48_1>:
1006087c:	20002960 	.word	0x20002960

10060880 <__arm_cp.48_2>:
10060880:	20002958 	.word	0x20002958

10060884 <__arm_cp.48_3>:
10060884:	0000fffc 	.word	0x0000fffc

10060888 <__arm_cp.48_4>:
10060888:	000002ee 	.word	0x000002ee

1006088c <hci_le_scan_request_received_event_push>:
1006088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006088e:	460e      	mov	r6, r1
10060890:	4605      	mov	r5, r0
10060892:	4815      	ldr	r0, [pc, #84]	@ (100608e8 <__arm_cp.49_0>)
10060894:	6800      	ldr	r0, [r0, #0]
10060896:	213d      	movs	r1, #61	@ 0x3d
10060898:	5c41      	ldrb	r1, [r0, r1]
1006089a:	0689      	lsls	r1, r1, #26
1006089c:	d522      	bpl.n	100608e4 <hci_le_scan_request_received_event_push+0x58>
1006089e:	303d      	adds	r0, #61	@ 0x3d
100608a0:	7ac0      	ldrb	r0, [r0, #11]
100608a2:	0740      	lsls	r0, r0, #29
100608a4:	d51e      	bpl.n	100608e4 <hci_le_scan_request_received_event_push+0x58>
100608a6:	4614      	mov	r4, r2
100608a8:	4810      	ldr	r0, [pc, #64]	@ (100608ec <__arm_cp.49_1>)
100608aa:	6800      	ldr	r0, [r0, #0]
100608ac:	6940      	ldr	r0, [r0, #20]
100608ae:	21a1      	movs	r1, #161	@ 0xa1
100608b0:	222b      	movs	r2, #43	@ 0x2b
100608b2:	2303      	movs	r3, #3
100608b4:	f7f5 fa8a 	bl	10055dcc <aci_event_fifo_push_header>
100608b8:	2800      	cmp	r0, #0
100608ba:	d013      	beq.n	100608e4 <hci_le_scan_request_received_event_push+0x58>
100608bc:	4607      	mov	r7, r0
100608be:	7246      	strb	r6, [r0, #9]
100608c0:	7205      	strb	r5, [r0, #8]
100608c2:	300a      	adds	r0, #10
100608c4:	2206      	movs	r2, #6
100608c6:	4621      	mov	r1, r4
100608c8:	f7f2 fd34 	bl	10053334 <BLEPLAT_MemCpy>
100608cc:	2013      	movs	r0, #19
100608ce:	71f8      	strb	r0, [r7, #7]
100608d0:	2009      	movs	r0, #9
100608d2:	71b8      	strb	r0, [r7, #6]
100608d4:	203e      	movs	r0, #62	@ 0x3e
100608d6:	7178      	strb	r0, [r7, #5]
100608d8:	2004      	movs	r0, #4
100608da:	7138      	strb	r0, [r7, #4]
100608dc:	20a1      	movs	r0, #161	@ 0xa1
100608de:	4639      	mov	r1, r7
100608e0:	f7f5 fb11 	bl	10055f06 <aci_event_fifo_push>
100608e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100608e6:	46c0      	nop			@ (mov r8, r8)

100608e8 <__arm_cp.49_0>:
100608e8:	20002958 	.word	0x20002958

100608ec <__arm_cp.49_1>:
100608ec:	20002908 	.word	0x20002908

100608f0 <EADV_start_request_radio_tasks>:
100608f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100608f2:	4604      	mov	r4, r0
100608f4:	20d8      	movs	r0, #216	@ 0xd8
100608f6:	21ff      	movs	r1, #255	@ 0xff
100608f8:	5421      	strb	r1, [r4, r0]
100608fa:	20b8      	movs	r0, #184	@ 0xb8
100608fc:	5a25      	ldrh	r5, [r4, r0]
100608fe:	2701      	movs	r7, #1
10060900:	402f      	ands	r7, r5
10060902:	4626      	mov	r6, r4
10060904:	36d8      	adds	r6, #216	@ 0xd8
10060906:	2f00      	cmp	r7, #0
10060908:	d004      	beq.n	10060914 <EADV_start_request_radio_tasks+0x24>
1006090a:	f7fb fc0f 	bl	1005c12c <llc_conn_reserve_conn_idx>
1006090e:	7030      	strb	r0, [r6, #0]
10060910:	28ff      	cmp	r0, #255	@ 0xff
10060912:	d022      	beq.n	1006095a <EADV_start_request_radio_tasks+0x6a>
10060914:	34b8      	adds	r4, #184	@ 0xb8
10060916:	f000 fdf1 	bl	100614fc <LL_sched_reserve_taskslot>
1006091a:	7620      	strb	r0, [r4, #24]
1006091c:	28ff      	cmp	r0, #255	@ 0xff
1006091e:	d013      	beq.n	10060948 <EADV_start_request_radio_tasks+0x58>
10060920:	2100      	movs	r1, #0
10060922:	06e8      	lsls	r0, r5, #27
10060924:	d41a      	bmi.n	1006095c <EADV_start_request_radio_tasks+0x6c>
10060926:	460d      	mov	r5, r1
10060928:	f000 fde8 	bl	100614fc <LL_sched_reserve_taskslot>
1006092c:	4629      	mov	r1, r5
1006092e:	7660      	strb	r0, [r4, #25]
10060930:	28ff      	cmp	r0, #255	@ 0xff
10060932:	d113      	bne.n	1006095c <EADV_start_request_radio_tasks+0x6c>
10060934:	2f00      	cmp	r7, #0
10060936:	d002      	beq.n	1006093e <EADV_start_request_radio_tasks+0x4e>
10060938:	7830      	ldrb	r0, [r6, #0]
1006093a:	f7fb f822 	bl	1005b982 <llc_conn_release_conn_idx>
1006093e:	7e20      	ldrb	r0, [r4, #24]
10060940:	f000 fdfe 	bl	10061540 <LL_sched_release_taskslot>
10060944:	2107      	movs	r1, #7
10060946:	e009      	b.n	1006095c <EADV_start_request_radio_tasks+0x6c>
10060948:	2107      	movs	r1, #7
1006094a:	2f00      	cmp	r7, #0
1006094c:	d006      	beq.n	1006095c <EADV_start_request_radio_tasks+0x6c>
1006094e:	7830      	ldrb	r0, [r6, #0]
10060950:	460c      	mov	r4, r1
10060952:	f7fb f816 	bl	1005b982 <llc_conn_release_conn_idx>
10060956:	4621      	mov	r1, r4
10060958:	e000      	b.n	1006095c <EADV_start_request_radio_tasks+0x6c>
1006095a:	210c      	movs	r1, #12
1006095c:	4608      	mov	r0, r1
1006095e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10060960 <llc_get_channel_sel_algo2_enabled>:
10060960:	b580      	push	{r7, lr}
10060962:	f000 fae7 	bl	10060f34 <llc_get_linkms_cntxt_p>
10060966:	214e      	movs	r1, #78	@ 0x4e
10060968:	5c40      	ldrb	r0, [r0, r1]
1006096a:	bd80      	pop	{r7, pc}

1006096c <LL_force_chsel_1>:
1006096c:	b510      	push	{r4, lr}
1006096e:	4244      	negs	r4, r0
10060970:	4144      	adcs	r4, r0
10060972:	f000 fadf 	bl	10060f34 <llc_get_linkms_cntxt_p>
10060976:	214e      	movs	r1, #78	@ 0x4e
10060978:	5444      	strb	r4, [r0, r1]
1006097a:	2000      	movs	r0, #0
1006097c:	bd10      	pop	{r4, pc}

1006097e <llc_eadv_max_supported_data_check_ucfg_weak>:
1006097e:	2000      	movs	r0, #0
10060980:	4770      	bx	lr

10060982 <LL_eadv_start_extended_ucfg_weak>:
10060982:	4770      	bx	lr

10060984 <ext_adv_scan_enabled_ucfg_weak>:
10060984:	2000      	movs	r0, #0
10060986:	4770      	bx	lr

10060988 <BLE_STACK_EndOfRadioActivityCb>:
10060988:	4770      	bx	lr
	...

1006098c <BLE_STACK_RadioHandler>:
1006098c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006098e:	b083      	sub	sp, #12
10060990:	4604      	mov	r4, r0
10060992:	484c      	ldr	r0, [pc, #304]	@ (10060ac4 <__arm_cp.1_0>)
10060994:	6004      	str	r4, [r0, #0]
10060996:	4620      	mov	r0, r4
10060998:	f7f3 fdb9 	bl	1005450e <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>
1006099c:	4605      	mov	r5, r0
1006099e:	4620      	mov	r0, r4
100609a0:	f7f3 fd85 	bl	100544ae <BLEPLAT_CNTR_IntGetIntStatusDone>
100609a4:	4606      	mov	r6, r0
100609a6:	4668      	mov	r0, sp
100609a8:	f7f2 fdd9 	bl	1005355e <BLEPLAT_GetAnchorPoint>
100609ac:	9900      	ldr	r1, [sp, #0]
100609ae:	1a09      	subs	r1, r1, r0
100609b0:	0b4b      	lsrs	r3, r1, #13
100609b2:	4945      	ldr	r1, [pc, #276]	@ (10060ac8 <__arm_cp.1_1>)
100609b4:	680a      	ldr	r2, [r1, #0]
100609b6:	4611      	mov	r1, r2
100609b8:	31d8      	adds	r1, #216	@ 0xd8
100609ba:	2b00      	cmp	r3, #0
100609bc:	d102      	bne.n	100609c4 <BLE_STACK_RadioHandler+0x38>
100609be:	6010      	str	r0, [r2, #0]
100609c0:	2001      	movs	r0, #1
100609c2:	e000      	b.n	100609c6 <BLE_STACK_RadioHandler+0x3a>
100609c4:	2000      	movs	r0, #0
100609c6:	7008      	strb	r0, [r1, #0]
100609c8:	4840      	ldr	r0, [pc, #256]	@ (10060acc <__arm_cp.1_2>)
100609ca:	6800      	ldr	r0, [r0, #0]
100609cc:	7b44      	ldrb	r4, [r0, #13]
100609ce:	2100      	movs	r1, #0
100609d0:	2cff      	cmp	r4, #255	@ 0xff
100609d2:	d00a      	beq.n	100609ea <BLE_STACK_RadioHandler+0x5e>
100609d4:	202c      	movs	r0, #44	@ 0x2c
100609d6:	4360      	muls	r0, r4
100609d8:	4a3d      	ldr	r2, [pc, #244]	@ (10060ad0 <__arm_cp.1_3>)
100609da:	6812      	ldr	r2, [r2, #0]
100609dc:	1810      	adds	r0, r2, r0
100609de:	7c82      	ldrb	r2, [r0, #18]
100609e0:	2a00      	cmp	r2, #0
100609e2:	d002      	beq.n	100609ea <BLE_STACK_RadioHandler+0x5e>
100609e4:	6a41      	ldr	r1, [r0, #36]	@ 0x24
100609e6:	68c0      	ldr	r0, [r0, #12]
100609e8:	e7ff      	b.n	100609ea <BLE_STACK_RadioHandler+0x5e>
100609ea:	2701      	movs	r7, #1
100609ec:	2e00      	cmp	r6, #0
100609ee:	d003      	beq.n	100609f8 <BLE_STACK_RadioHandler+0x6c>
100609f0:	2d00      	cmp	r5, #0
100609f2:	d101      	bne.n	100609f8 <BLE_STACK_RadioHandler+0x6c>
100609f4:	2900      	cmp	r1, #0
100609f6:	e011      	b.n	10060a1c <BLE_STACK_RadioHandler+0x90>
100609f8:	2d00      	cmp	r5, #0
100609fa:	d015      	beq.n	10060a28 <BLE_STACK_RadioHandler+0x9c>
100609fc:	4a35      	ldr	r2, [pc, #212]	@ (10060ad4 <__arm_cp.1_4>)
100609fe:	1a8b      	subs	r3, r1, r2
10060a00:	425a      	negs	r2, r3
10060a02:	415a      	adcs	r2, r3
10060a04:	4b34      	ldr	r3, [pc, #208]	@ (10060ad8 <__arm_cp.1_5>)
10060a06:	1acd      	subs	r5, r1, r3
10060a08:	426b      	negs	r3, r5
10060a0a:	416b      	adcs	r3, r5
10060a0c:	4d33      	ldr	r5, [pc, #204]	@ (10060adc <__arm_cp.1_6>)
10060a0e:	1b4e      	subs	r6, r1, r5
10060a10:	4275      	negs	r5, r6
10060a12:	4175      	adcs	r5, r6
10060a14:	2900      	cmp	r1, #0
10060a16:	d007      	beq.n	10060a28 <BLE_STACK_RadioHandler+0x9c>
10060a18:	4313      	orrs	r3, r2
10060a1a:	431d      	orrs	r5, r3
10060a1c:	4e2a      	ldr	r6, [pc, #168]	@ (10060ac8 <__arm_cp.1_1>)
10060a1e:	4d29      	ldr	r5, [pc, #164]	@ (10060ac4 <__arm_cp.1_0>)
10060a20:	d004      	beq.n	10060a2c <BLE_STACK_RadioHandler+0xa0>
10060a22:	4788      	blx	r1
10060a24:	2700      	movs	r7, #0
10060a26:	e001      	b.n	10060a2c <BLE_STACK_RadioHandler+0xa0>
10060a28:	4e27      	ldr	r6, [pc, #156]	@ (10060ac8 <__arm_cp.1_1>)
10060a2a:	4d26      	ldr	r5, [pc, #152]	@ (10060ac4 <__arm_cp.1_0>)
10060a2c:	6828      	ldr	r0, [r5, #0]
10060a2e:	f7f3 fd62 	bl	100544f6 <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>
10060a32:	2800      	cmp	r0, #0
10060a34:	d001      	beq.n	10060a3a <BLE_STACK_RadioHandler+0xae>
10060a36:	2504      	movs	r5, #4
10060a38:	e020      	b.n	10060a7c <BLE_STACK_RadioHandler+0xf0>
10060a3a:	6828      	ldr	r0, [r5, #0]
10060a3c:	f7f3 fd16 	bl	1005446c <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>
10060a40:	2800      	cmp	r0, #0
10060a42:	d001      	beq.n	10060a48 <BLE_STACK_RadioHandler+0xbc>
10060a44:	2501      	movs	r5, #1
10060a46:	e019      	b.n	10060a7c <BLE_STACK_RadioHandler+0xf0>
10060a48:	6828      	ldr	r0, [r5, #0]
10060a4a:	f7f3 fd1b 	bl	10054484 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>
10060a4e:	2800      	cmp	r0, #0
10060a50:	d001      	beq.n	10060a56 <BLE_STACK_RadioHandler+0xca>
10060a52:	2502      	movs	r5, #2
10060a54:	e012      	b.n	10060a7c <BLE_STACK_RadioHandler+0xf0>
10060a56:	6828      	ldr	r0, [r5, #0]
10060a58:	f7f3 fd65 	bl	10054526 <BLEPLAT_CNTR_IntGetIntStatusTxError1>
10060a5c:	4629      	mov	r1, r5
10060a5e:	2505      	movs	r5, #5
10060a60:	2800      	cmp	r0, #0
10060a62:	d10b      	bne.n	10060a7c <BLE_STACK_RadioHandler+0xf0>
10060a64:	6808      	ldr	r0, [r1, #0]
10060a66:	f7f3 fd6a 	bl	1005453e <BLEPLAT_CNTR_IntGetIntStatusTxError3>
10060a6a:	2800      	cmp	r0, #0
10060a6c:	d106      	bne.n	10060a7c <BLE_STACK_RadioHandler+0xf0>
10060a6e:	4815      	ldr	r0, [pc, #84]	@ (10060ac4 <__arm_cp.1_0>)
10060a70:	6800      	ldr	r0, [r0, #0]
10060a72:	f7f3 fced 	bl	10054450 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>
10060a76:	2800      	cmp	r0, #0
10060a78:	d020      	beq.n	10060abc <BLE_STACK_RadioHandler+0x130>
10060a7a:	2500      	movs	r5, #0
10060a7c:	2001      	movs	r0, #1
10060a7e:	40a8      	lsls	r0, r5
10060a80:	4917      	ldr	r1, [pc, #92]	@ (10060ae0 <__arm_cp.1_7>)
10060a82:	6809      	ldr	r1, [r1, #0]
10060a84:	680a      	ldr	r2, [r1, #0]
10060a86:	4302      	orrs	r2, r0
10060a88:	600a      	str	r2, [r1, #0]
10060a8a:	2000      	movs	r0, #0
10060a8c:	f002 fce8 	bl	10063460 <tsk_notify_idx>
10060a90:	f7f1 fe69 	bl	10052766 <BLE_STACK_ProcessRequest>
10060a94:	f7f2 fd5a 	bl	1005354c <BLEPLAT_ClearRadioTimerValue>
10060a98:	4620      	mov	r0, r4
10060a9a:	f000 fb2b 	bl	100610f4 <LL_sched_engine>
10060a9e:	6834      	ldr	r4, [r6, #0]
10060aa0:	7d60      	ldrb	r0, [r4, #21]
10060aa2:	2801      	cmp	r0, #1
10060aa4:	d108      	bne.n	10060ab8 <BLE_STACK_RadioHandler+0x12c>
10060aa6:	7c21      	ldrb	r1, [r4, #16]
10060aa8:	200f      	movs	r0, #15
10060aaa:	4008      	ands	r0, r1
10060aac:	68e2      	ldr	r2, [r4, #12]
10060aae:	0909      	lsrs	r1, r1, #4
10060ab0:	f7ff ff6a 	bl	10060988 <BLE_STACK_EndOfRadioActivityCb>
10060ab4:	2000      	movs	r0, #0
10060ab6:	7560      	strb	r0, [r4, #21]
10060ab8:	b003      	add	sp, #12
10060aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
10060abc:	2f00      	cmp	r7, #0
10060abe:	d1e9      	bne.n	10060a94 <BLE_STACK_RadioHandler+0x108>
10060ac0:	e7ed      	b.n	10060a9e <BLE_STACK_RadioHandler+0x112>
10060ac2:	46c0      	nop			@ (mov r8, r8)

10060ac4 <__arm_cp.1_0>:
10060ac4:	20002954 	.word	0x20002954

10060ac8 <__arm_cp.1_1>:
10060ac8:	20002958 	.word	0x20002958

10060acc <__arm_cp.1_2>:
10060acc:	2000295c 	.word	0x2000295c

10060ad0 <__arm_cp.1_3>:
10060ad0:	20002960 	.word	0x20002960

10060ad4 <__arm_cp.1_4>:
10060ad4:	10066df5 	.word	0x10066df5

10060ad8 <__arm_cp.1_5>:
10060ad8:	10066df1 	.word	0x10066df1

10060adc <__arm_cp.1_6>:
10060adc:	10066df9 	.word	0x10066df9

10060ae0 <__arm_cp.1_7>:
10060ae0:	20002908 	.word	0x20002908

10060ae4 <LL_link_calculate_window_widening_from_ppm>:
10060ae4:	22ff      	movs	r2, #255	@ 0xff
10060ae6:	320e      	adds	r2, #14
10060ae8:	4342      	muls	r2, r0
10060aea:	0a10      	lsrs	r0, r2, #8
10060aec:	0889      	lsrs	r1, r1, #2
10060aee:	4341      	muls	r1, r0
10060af0:	0c88      	lsrs	r0, r1, #18
10060af2:	1c40      	adds	r0, r0, #1
10060af4:	4770      	bx	lr
	...

10060af8 <LL_link_calc_packetlength>:
10060af8:	2804      	cmp	r0, #4
10060afa:	d005      	beq.n	10060b08 <LL_link_calc_packetlength+0x10>
10060afc:	2801      	cmp	r0, #1
10060afe:	d106      	bne.n	10060b0e <LL_link_calc_packetlength+0x16>
10060b00:	20ff      	movs	r0, #255	@ 0xff
10060b02:	30a4      	adds	r0, #164	@ 0xa4
10060b04:	4a07      	ldr	r2, [pc, #28]	@ (10060b24 <__arm_cp.7_2>)
10060b06:	e004      	b.n	10060b12 <LL_link_calc_packetlength+0x1a>
10060b08:	4a04      	ldr	r2, [pc, #16]	@ (10060b1c <__arm_cp.7_0>)
10060b0a:	4805      	ldr	r0, [pc, #20]	@ (10060b20 <__arm_cp.7_1>)
10060b0c:	e001      	b.n	10060b12 <LL_link_calc_packetlength+0x1a>
10060b0e:	4a06      	ldr	r2, [pc, #24]	@ (10060b28 <__arm_cp.7_3>)
10060b10:	4806      	ldr	r0, [pc, #24]	@ (10060b2c <__arm_cp.7_4>)
10060b12:	4341      	muls	r1, r0
10060b14:	1888      	adds	r0, r1, r2
10060b16:	0a00      	lsrs	r0, r0, #8
10060b18:	4770      	bx	lr
10060b1a:	46c0      	nop			@ (mov r8, r8)

10060b1c <__arm_cp.7_0>:
10060b1c:	000126e9 	.word	0x000126e9

10060b20 <__arm_cp.7_1>:
10060b20:	00001a38 	.word	0x00001a38

10060b24 <__arm_cp.7_2>:
10060b24:	00001206 	.word	0x00001206

10060b28 <__arm_cp.7_3>:
10060b28:	000020c6 	.word	0x000020c6

10060b2c <__arm_cp.7_4>:
10060b2c:	00000347 	.word	0x00000347

10060b30 <LL_link_get_own_sca_ppm>:
10060b30:	4801      	ldr	r0, [pc, #4]	@ (10060b38 <__arm_cp.8_0>)
10060b32:	6800      	ldr	r0, [r0, #0]
10060b34:	8b00      	ldrh	r0, [r0, #24]
10060b36:	4770      	bx	lr

10060b38 <__arm_cp.8_0>:
10060b38:	20002958 	.word	0x20002958

10060b3c <LL_link_is_arg_in_range>:
10060b3c:	4290      	cmp	r0, r2
10060b3e:	d801      	bhi.n	10060b44 <LL_link_is_arg_in_range+0x8>
10060b40:	4288      	cmp	r0, r1
10060b42:	d201      	bcs.n	10060b48 <LL_link_is_arg_in_range+0xc>
10060b44:	2012      	movs	r0, #18
10060b46:	4770      	bx	lr
10060b48:	2000      	movs	r0, #0
10060b4a:	4770      	bx	lr

10060b4c <Data_Len_Update_Offline_Processing_ucfg_weak>:
10060b4c:	2000      	movs	r0, #0
10060b4e:	4770      	bx	lr

10060b50 <ll_write_supported_data_ucfg_weak>:
10060b50:	2012      	movs	r0, #18
10060b52:	4770      	bx	lr

10060b54 <llc_timers_callback_wrapper>:
10060b54:	b580      	push	{r7, lr}
10060b56:	6940      	ldr	r0, [r0, #20]
10060b58:	4901      	ldr	r1, [pc, #4]	@ (10060b60 <__arm_cp.4_0>)
10060b5a:	f002 fdb8 	bl	100636ce <cst_sharedCallback>
10060b5e:	bd80      	pop	{r7, pc}

10060b60 <__arm_cp.4_0>:
10060b60:	10060b65 	.word	0x10060b65

10060b64 <llc_timers_callback>:
10060b64:	b580      	push	{r7, lr}
10060b66:	4903      	ldr	r1, [pc, #12]	@ (10060b74 <__arm_cp.5_0>)
10060b68:	7ac9      	ldrb	r1, [r1, #11]
10060b6a:	4281      	cmp	r1, r0
10060b6c:	d901      	bls.n	10060b72 <llc_timers_callback+0xe>
10060b6e:	f7fd ff99 	bl	1005eaa4 <LLC_authenticated_payload_timeout_cb>
10060b72:	bd80      	pop	{r7, pc}

10060b74 <__arm_cp.5_0>:
10060b74:	2000296c 	.word	0x2000296c

10060b78 <LL_init_ucfg_weak>:
10060b78:	b5f0      	push	{r4, r5, r6, r7, lr}
10060b7a:	b091      	sub	sp, #68	@ 0x44
10060b7c:	9306      	str	r3, [sp, #24]
10060b7e:	4614      	mov	r4, r2
10060b80:	910d      	str	r1, [sp, #52]	@ 0x34
10060b82:	900b      	str	r0, [sp, #44]	@ 0x2c
10060b84:	48b8      	ldr	r0, [pc, #736]	@ (10060e68 <__arm_cp.6_0>)
10060b86:	7ac1      	ldrb	r1, [r0, #11]
10060b88:	910c      	str	r1, [sp, #48]	@ 0x30
10060b8a:	7f01      	ldrb	r1, [r0, #28]
10060b8c:	9109      	str	r1, [sp, #36]	@ 0x24
10060b8e:	7ec1      	ldrb	r1, [r0, #27]
10060b90:	910a      	str	r1, [sp, #40]	@ 0x28
10060b92:	7e81      	ldrb	r1, [r0, #26]
10060b94:	9108      	str	r1, [sp, #32]
10060b96:	7fc7      	ldrb	r7, [r0, #31]
10060b98:	2501      	movs	r5, #1
10060b9a:	21e8      	movs	r1, #232	@ 0xe8
10060b9c:	4628      	mov	r0, r5
10060b9e:	f000 fe89 	bl	100618b4 <csmem_mem_0_assign>
10060ba2:	4eb2      	ldr	r6, [pc, #712]	@ (10060e6c <__arm_cp.6_1>)
10060ba4:	6030      	str	r0, [r6, #0]
10060ba6:	2158      	movs	r1, #88	@ 0x58
10060ba8:	4628      	mov	r0, r5
10060baa:	f000 fe83 	bl	100618b4 <csmem_mem_0_assign>
10060bae:	6831      	ldr	r1, [r6, #0]
10060bb0:	229c      	movs	r2, #156	@ 0x9c
10060bb2:	9207      	str	r2, [sp, #28]
10060bb4:	5088      	str	r0, [r1, r2]
10060bb6:	4638      	mov	r0, r7
10060bb8:	f006 f8b6 	bl	10066d28 <llc_wl_mem_allocate>
10060bbc:	2107      	movs	r1, #7
10060bbe:	4039      	ands	r1, r7
10060bc0:	9806      	ldr	r0, [sp, #24]
10060bc2:	f006 f8c5 	bl	10066d50 <llc_priv_mem_allocate>
10060bc6:	981c      	ldr	r0, [sp, #112]	@ 0x70
10060bc8:	9000      	str	r0, [sp, #0]
10060bca:	ab19      	add	r3, sp, #100	@ 0x64
10060bcc:	cb0e      	ldmia	r3, {r1, r2, r3}
10060bce:	980d      	ldr	r0, [sp, #52]	@ 0x34
10060bd0:	9106      	str	r1, [sp, #24]
10060bd2:	930d      	str	r3, [sp, #52]	@ 0x34
10060bd4:	f7fa f958 	bl	1005ae88 <llc_conn_mem_allocate>
10060bd8:	2c01      	cmp	r4, #1
10060bda:	d000      	beq.n	10060bde <LL_init_ucfg_weak+0x66>
10060bdc:	9508      	str	r5, [sp, #32]
10060bde:	2000      	movs	r0, #0
10060be0:	2c01      	cmp	r4, #1
10060be2:	d000      	beq.n	10060be6 <LL_init_ucfg_weak+0x6e>
10060be4:	900a      	str	r0, [sp, #40]	@ 0x28
10060be6:	2c01      	cmp	r4, #1
10060be8:	4fa0      	ldr	r7, [pc, #640]	@ (10060e6c <__arm_cp.6_1>)
10060bea:	d000      	beq.n	10060bee <LL_init_ucfg_weak+0x76>
10060bec:	9009      	str	r0, [sp, #36]	@ 0x24
10060bee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
10060bf0:	980d      	ldr	r0, [sp, #52]	@ 0x34
10060bf2:	2801      	cmp	r0, #1
10060bf4:	9205      	str	r2, [sp, #20]
10060bf6:	d118      	bne.n	10060c2a <LL_init_ucfg_weak+0xb2>
10060bf8:	2029      	movs	r0, #41	@ 0x29
10060bfa:	499b      	ldr	r1, [pc, #620]	@ (10060e68 <__arm_cp.6_0>)
10060bfc:	5c08      	ldrb	r0, [r1, r0]
10060bfe:	1e41      	subs	r1, r0, #1
10060c00:	4188      	sbcs	r0, r1
10060c02:	4310      	orrs	r0, r2
10060c04:	d001      	beq.n	10060c0a <LL_init_ucfg_weak+0x92>
10060c06:	2530      	movs	r5, #48	@ 0x30
10060c08:	e000      	b.n	10060c0c <LL_init_ucfg_weak+0x94>
10060c0a:	2520      	movs	r5, #32
10060c0c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
10060c0e:	4630      	mov	r0, r6
10060c10:	4629      	mov	r1, r5
10060c12:	f000 fe4f 	bl	100618b4 <csmem_mem_0_assign>
10060c16:	6839      	ldr	r1, [r7, #0]
10060c18:	2294      	movs	r2, #148	@ 0x94
10060c1a:	5088      	str	r0, [r1, r2]
10060c1c:	4630      	mov	r0, r6
10060c1e:	4629      	mov	r1, r5
10060c20:	f000 fe48 	bl	100618b4 <csmem_mem_0_assign>
10060c24:	6839      	ldr	r1, [r7, #0]
10060c26:	2298      	movs	r2, #152	@ 0x98
10060c28:	5088      	str	r0, [r1, r2]
10060c2a:	262c      	movs	r6, #44	@ 0x2c
10060c2c:	980c      	ldr	r0, [sp, #48]	@ 0x30
10060c2e:	4631      	mov	r1, r6
10060c30:	f000 fe40 	bl	100618b4 <csmem_mem_0_assign>
10060c34:	6839      	ldr	r1, [r7, #0]
10060c36:	22a4      	movs	r2, #164	@ 0xa4
10060c38:	5088      	str	r0, [r1, r2]
10060c3a:	2041      	movs	r0, #65	@ 0x41
10060c3c:	0082      	lsls	r2, r0, #2
10060c3e:	2c01      	cmp	r4, #1
10060c40:	9402      	str	r4, [sp, #8]
10060c42:	d10a      	bne.n	10060c5a <LL_init_ucfg_weak+0xe2>
10060c44:	4611      	mov	r1, r2
10060c46:	3120      	adds	r1, #32
10060c48:	2001      	movs	r0, #1
10060c4a:	4614      	mov	r4, r2
10060c4c:	f000 fe32 	bl	100618b4 <csmem_mem_0_assign>
10060c50:	6839      	ldr	r1, [r7, #0]
10060c52:	228c      	movs	r2, #140	@ 0x8c
10060c54:	5088      	str	r0, [r1, r2]
10060c56:	4621      	mov	r1, r4
10060c58:	e038      	b.n	10060ccc <LL_init_ucfg_weak+0x154>
10060c5a:	2125      	movs	r1, #37	@ 0x25
10060c5c:	4882      	ldr	r0, [pc, #520]	@ (10060e68 <__arm_cp.6_0>)
10060c5e:	910c      	str	r1, [sp, #48]	@ 0x30
10060c60:	5c41      	ldrb	r1, [r0, r1]
10060c62:	4610      	mov	r0, r2
10060c64:	3020      	adds	r0, #32
10060c66:	2900      	cmp	r1, #0
10060c68:	9201      	str	r2, [sp, #4]
10060c6a:	d001      	beq.n	10060c70 <LL_init_ucfg_weak+0xf8>
10060c6c:	4601      	mov	r1, r0
10060c6e:	e000      	b.n	10060c72 <LL_init_ucfg_weak+0xfa>
10060c70:	2144      	movs	r1, #68	@ 0x44
10060c72:	2726      	movs	r7, #38	@ 0x26
10060c74:	4a7c      	ldr	r2, [pc, #496]	@ (10060e68 <__arm_cp.6_0>)
10060c76:	5dd2      	ldrb	r2, [r2, r7]
10060c78:	2a00      	cmp	r2, #0
10060c7a:	d000      	beq.n	10060c7e <LL_init_ucfg_weak+0x106>
10060c7c:	4601      	mov	r1, r0
10060c7e:	2529      	movs	r5, #41	@ 0x29
10060c80:	4a79      	ldr	r2, [pc, #484]	@ (10060e68 <__arm_cp.6_0>)
10060c82:	5d52      	ldrb	r2, [r2, r5]
10060c84:	2a00      	cmp	r2, #0
10060c86:	d000      	beq.n	10060c8a <LL_init_ucfg_weak+0x112>
10060c88:	4601      	mov	r1, r0
10060c8a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
10060c8c:	2a01      	cmp	r2, #1
10060c8e:	d100      	bne.n	10060c92 <LL_init_ucfg_weak+0x11a>
10060c90:	4601      	mov	r1, r0
10060c92:	2001      	movs	r0, #1
10060c94:	f000 fe0e 	bl	100618b4 <csmem_mem_0_assign>
10060c98:	4974      	ldr	r1, [pc, #464]	@ (10060e6c <__arm_cp.6_1>)
10060c9a:	6809      	ldr	r1, [r1, #0]
10060c9c:	228c      	movs	r2, #140	@ 0x8c
10060c9e:	5088      	str	r0, [r1, r2]
10060ca0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10060ca2:	2801      	cmp	r0, #1
10060ca4:	9c01      	ldr	r4, [sp, #4]
10060ca6:	4621      	mov	r1, r4
10060ca8:	d010      	beq.n	10060ccc <LL_init_ucfg_weak+0x154>
10060caa:	486f      	ldr	r0, [pc, #444]	@ (10060e68 <__arm_cp.6_0>)
10060cac:	5d40      	ldrb	r0, [r0, r5]
10060cae:	2800      	cmp	r0, #0
10060cb0:	4621      	mov	r1, r4
10060cb2:	d10b      	bne.n	10060ccc <LL_init_ucfg_weak+0x154>
10060cb4:	486c      	ldr	r0, [pc, #432]	@ (10060e68 <__arm_cp.6_0>)
10060cb6:	5dc0      	ldrb	r0, [r0, r7]
10060cb8:	2800      	cmp	r0, #0
10060cba:	4621      	mov	r1, r4
10060cbc:	d106      	bne.n	10060ccc <LL_init_ucfg_weak+0x154>
10060cbe:	486a      	ldr	r0, [pc, #424]	@ (10060e68 <__arm_cp.6_0>)
10060cc0:	990c      	ldr	r1, [sp, #48]	@ 0x30
10060cc2:	5c40      	ldrb	r0, [r0, r1]
10060cc4:	2800      	cmp	r0, #0
10060cc6:	d000      	beq.n	10060cca <LL_init_ucfg_weak+0x152>
10060cc8:	4626      	mov	r6, r4
10060cca:	4631      	mov	r1, r6
10060ccc:	9818      	ldr	r0, [sp, #96]	@ 0x60
10060cce:	900b      	str	r0, [sp, #44]	@ 0x2c
10060cd0:	9816      	ldr	r0, [sp, #88]	@ 0x58
10060cd2:	9003      	str	r0, [sp, #12]
10060cd4:	2601      	movs	r6, #1
10060cd6:	4d66      	ldr	r5, [pc, #408]	@ (10060e70 <__arm_cp.6_2>)
10060cd8:	4630      	mov	r0, r6
10060cda:	47a8      	blx	r5
10060cdc:	4f63      	ldr	r7, [pc, #396]	@ (10060e6c <__arm_cp.6_1>)
10060cde:	6839      	ldr	r1, [r7, #0]
10060ce0:	2290      	movs	r2, #144	@ 0x90
10060ce2:	5088      	str	r0, [r1, r2]
10060ce4:	2110      	movs	r1, #16
10060ce6:	4630      	mov	r0, r6
10060ce8:	47a8      	blx	r5
10060cea:	6839      	ldr	r1, [r7, #0]
10060cec:	22a0      	movs	r2, #160	@ 0xa0
10060cee:	9204      	str	r2, [sp, #16]
10060cf0:	5088      	str	r0, [r1, r2]
10060cf2:	2104      	movs	r1, #4
10060cf4:	4630      	mov	r0, r6
10060cf6:	47a8      	blx	r5
10060cf8:	6839      	ldr	r1, [r7, #0]
10060cfa:	22a8      	movs	r2, #168	@ 0xa8
10060cfc:	5088      	str	r0, [r1, r2]
10060cfe:	2134      	movs	r1, #52	@ 0x34
10060d00:	960c      	str	r6, [sp, #48]	@ 0x30
10060d02:	4630      	mov	r0, r6
10060d04:	47a8      	blx	r5
10060d06:	6839      	ldr	r1, [r7, #0]
10060d08:	22ac      	movs	r2, #172	@ 0xac
10060d0a:	5088      	str	r0, [r1, r2]
10060d0c:	9808      	ldr	r0, [sp, #32]
10060d0e:	b2c7      	uxtb	r7, r0
10060d10:	1f21      	subs	r1, r4, #4
10060d12:	4638      	mov	r0, r7
10060d14:	47a8      	blx	r5
10060d16:	4605      	mov	r5, r0
10060d18:	9c02      	ldr	r4, [sp, #8]
10060d1a:	2c01      	cmp	r4, #1
10060d1c:	d105      	bne.n	10060d2a <LL_init_ucfg_weak+0x1b2>
10060d1e:	215c      	movs	r1, #92	@ 0x5c
10060d20:	4638      	mov	r0, r7
10060d22:	f000 fdc7 	bl	100618b4 <csmem_mem_0_assign>
10060d26:	4602      	mov	r2, r0
10060d28:	e000      	b.n	10060d2c <LL_init_ucfg_weak+0x1b4>
10060d2a:	2200      	movs	r2, #0
10060d2c:	4638      	mov	r0, r7
10060d2e:	4629      	mov	r1, r5
10060d30:	f7fe fec6 	bl	1005fac0 <EADV_init>
10060d34:	ab10      	add	r3, sp, #64	@ 0x40
10060d36:	9809      	ldr	r0, [sp, #36]	@ 0x24
10060d38:	70d8      	strb	r0, [r3, #3]
10060d3a:	980a      	ldr	r0, [sp, #40]	@ 0x28
10060d3c:	7098      	strb	r0, [r3, #2]
10060d3e:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10060d40:	705e      	strb	r6, [r3, #1]
10060d42:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10060d44:	7018      	strb	r0, [r3, #0]
10060d46:	4620      	mov	r0, r4
10060d48:	9d05      	ldr	r5, [sp, #20]
10060d4a:	4629      	mov	r1, r5
10060d4c:	463a      	mov	r2, r7
10060d4e:	f005 fffb 	bl	10066d48 <llc_padv_mem_allocate_ucfg_weak>
10060d52:	9f03      	ldr	r7, [sp, #12]
10060d54:	4638      	mov	r0, r7
10060d56:	4621      	mov	r1, r4
10060d58:	f7fb fd1d 	bl	1005c796 <llc_scan_mem_allocate_ucfg_weak>
10060d5c:	4638      	mov	r0, r7
10060d5e:	4621      	mov	r1, r4
10060d60:	462a      	mov	r2, r5
10060d62:	f7fb fcf2 	bl	1005c74a <llc_pscan_mem_allocate_ucfg_weak>
10060d66:	4638      	mov	r0, r7
10060d68:	4621      	mov	r1, r4
10060d6a:	462a      	mov	r2, r5
10060d6c:	4633      	mov	r3, r6
10060d6e:	f005 ffed 	bl	10066d4c <llc_past_mem_allocate_ucfg_weak>
10060d72:	9600      	str	r6, [sp, #0]
10060d74:	463e      	mov	r6, r7
10060d76:	4638      	mov	r0, r7
10060d78:	4621      	mov	r1, r4
10060d7a:	462a      	mov	r2, r5
10060d7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10060d7e:	f7fb fce7 	bl	1005c750 <llc_pscan_wr_mem_allocate_ucfg_weak>
10060d82:	f7fb fcc0 	bl	1005c706 <llc_iso_cmn_mem_alloc_ucfg_weak>
10060d86:	2c01      	cmp	r4, #1
10060d88:	d107      	bne.n	10060d9a <LL_init_ucfg_weak+0x222>
10060d8a:	2d01      	cmp	r5, #1
10060d8c:	d105      	bne.n	10060d9a <LL_init_ucfg_weak+0x222>
10060d8e:	f005 f92b 	bl	10065fe8 <llc_big_brc_mem_alloc_ucfg_weak>
10060d92:	2e01      	cmp	r6, #1
10060d94:	d101      	bne.n	10060d9a <LL_init_ucfg_weak+0x222>
10060d96:	f005 f928 	bl	10065fea <llc_big_sync_mem_alloc_ucfg_weak>
10060d9a:	980d      	ldr	r0, [sp, #52]	@ 0x34
10060d9c:	2801      	cmp	r0, #1
10060d9e:	4f33      	ldr	r7, [pc, #204]	@ (10060e6c <__arm_cp.6_1>)
10060da0:	d101      	bne.n	10060da6 <LL_init_ucfg_weak+0x22e>
10060da2:	f005 f923 	bl	10065fec <llc_cig_cmn_mem_alloc_ucfg_weak>
10060da6:	f7fb fca7 	bl	1005c6f8 <llc_isoal_mem_alloc_ucfg_weak>
10060daa:	9806      	ldr	r0, [sp, #24]
10060dac:	4631      	mov	r1, r6
10060dae:	4622      	mov	r2, r4
10060db0:	462b      	mov	r3, r5
10060db2:	f7fe fd46 	bl	1005f842 <llc_cte_mem_allocate_ucfg_weak>
10060db6:	4e2c      	ldr	r6, [pc, #176]	@ (10060e68 <__arm_cp.6_0>)
10060db8:	7af0      	ldrb	r0, [r6, #11]
10060dba:	1c41      	adds	r1, r0, #1
10060dbc:	4d2d      	ldr	r5, [pc, #180]	@ (10060e74 <__arm_cp.6_3>)
10060dbe:	4628      	mov	r0, r5
10060dc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10060dc2:	f000 fd65 	bl	10061890 <csmem_mem_assign>
10060dc6:	6839      	ldr	r1, [r7, #0]
10060dc8:	22d0      	movs	r2, #208	@ 0xd0
10060dca:	5088      	str	r0, [r1, r2]
10060dcc:	7af1      	ldrb	r1, [r6, #11]
10060dce:	2202      	movs	r2, #2
10060dd0:	4628      	mov	r0, r5
10060dd2:	f000 fd5d 	bl	10061890 <csmem_mem_assign>
10060dd6:	6839      	ldr	r1, [r7, #0]
10060dd8:	460a      	mov	r2, r1
10060dda:	32a0      	adds	r2, #160	@ 0xa0
10060ddc:	6350      	str	r0, [r2, #52]	@ 0x34
10060dde:	9804      	ldr	r0, [sp, #16]
10060de0:	5808      	ldr	r0, [r1, r0]
10060de2:	6078      	str	r0, [r7, #4]
10060de4:	6850      	ldr	r0, [r2, #4]
10060de6:	60b8      	str	r0, [r7, #8]
10060de8:	4620      	mov	r0, r4
10060dea:	f7fb fcd3 	bl	1005c794 <llc_scan_init_ucfg_weak>
10060dee:	f7fb fcab 	bl	1005c748 <llc_pscan_init_ucfg_weak>
10060df2:	f000 f8e3 	bl	10060fbc <LL_sched_init>
10060df6:	f7fe fd29 	bl	1005f84c <LL_dtm_init>
10060dfa:	f005 ffa6 	bl	10066d4a <llc_padv_init_ucfg_weak>
10060dfe:	f7fe fd1f 	bl	1005f840 <llc_cte_init_ucfg_weak>
10060e02:	f7f9 f8e5 	bl	10059fd0 <HCI_Init>
10060e06:	f7f2 fb41 	bl	1005348c <BLEPLAT_GetDefaultPALevel>
10060e0a:	6839      	ldr	r1, [r7, #0]
10060e0c:	2400      	movs	r4, #0
10060e0e:	728c      	strb	r4, [r1, #10]
10060e10:	7248      	strb	r0, [r1, #9]
10060e12:	4620      	mov	r0, r4
10060e14:	f7f2 fb42 	bl	1005349c <BLEPLAT_SetHighPower>
10060e18:	f7f4 fcbe 	bl	10055798 <ble_HAL_Init>
10060e1c:	6838      	ldr	r0, [r7, #0]
10060e1e:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10060e20:	f7fd ff03 	bl	1005ec2a <LLC_pcl_hal_cntxt_init_ucfg_weak>
10060e24:	6838      	ldr	r0, [r7, #0]
10060e26:	9d07      	ldr	r5, [sp, #28]
10060e28:	5940      	ldr	r0, [r0, r5]
10060e2a:	300c      	adds	r0, #12
10060e2c:	f002 fe2b 	bl	10063a86 <addr8_list_clear>
10060e30:	463e      	mov	r6, r7
10060e32:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
10060e34:	4638      	mov	r0, r7
10060e36:	f7fb fc6d 	bl	1005c714 <llc_priv_init_ucfg_weak>
10060e3a:	6830      	ldr	r0, [r6, #0]
10060e3c:	5941      	ldr	r1, [r0, r5]
10060e3e:	2240      	movs	r2, #64	@ 0x40
10060e40:	548c      	strb	r4, [r1, r2]
10060e42:	4a09      	ldr	r2, [pc, #36]	@ (10060e68 <__arm_cp.6_0>)
10060e44:	8b12      	ldrh	r2, [r2, #24]
10060e46:	8302      	strh	r2, [r0, #24]
10060e48:	201f      	movs	r0, #31
10060e4a:	900f      	str	r0, [sp, #60]	@ 0x3c
10060e4c:	43e0      	mvns	r0, r4
10060e4e:	900e      	str	r0, [sp, #56]	@ 0x38
10060e50:	3148      	adds	r1, #72	@ 0x48
10060e52:	a80e      	add	r0, sp, #56	@ 0x38
10060e54:	2205      	movs	r2, #5
10060e56:	f002 fc8b 	bl	10063770 <char_copy>
10060e5a:	6830      	ldr	r0, [r6, #0]
10060e5c:	5940      	ldr	r0, [r0, r5]
10060e5e:	02f9      	lsls	r1, r7, #11
10060e60:	2254      	movs	r2, #84	@ 0x54
10060e62:	5281      	strh	r1, [r0, r2]
10060e64:	b011      	add	sp, #68	@ 0x44
10060e66:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060e68 <__arm_cp.6_0>:
10060e68:	2000296c 	.word	0x2000296c

10060e6c <__arm_cp.6_1>:
10060e6c:	20002958 	.word	0x20002958

10060e70 <__arm_cp.6_2>:
10060e70:	100618b5 	.word	0x100618b5

10060e74 <__arm_cp.6_3>:
10060e74:	20002968 	.word	0x20002968

10060e78 <LL_init>:
10060e78:	b5b0      	push	{r4, r5, r7, lr}
10060e7a:	b088      	sub	sp, #32
10060e7c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
10060e7e:	9406      	str	r4, [sp, #24]
10060e80:	9c11      	ldr	r4, [sp, #68]	@ 0x44
10060e82:	9405      	str	r4, [sp, #20]
10060e84:	9d10      	ldr	r5, [sp, #64]	@ 0x40
10060e86:	9504      	str	r5, [sp, #16]
10060e88:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10060e8a:	9503      	str	r5, [sp, #12]
10060e8c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
10060e8e:	9502      	str	r5, [sp, #8]
10060e90:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10060e92:	9501      	str	r5, [sp, #4]
10060e94:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10060e96:	9500      	str	r5, [sp, #0]
10060e98:	f7ff fe6e 	bl	10060b78 <LL_init_ucfg_weak>
10060e9c:	2c01      	cmp	r4, #1
10060e9e:	d112      	bne.n	10060ec6 <LL_init+0x4e>
10060ea0:	f7fb fc54 	bl	1005c74c <llc_pscan_wr_init_ucfg_weak>
10060ea4:	f7f9 ff00 	bl	1005aca8 <llc_conn_init>
10060ea8:	f7ee fddb 	bl	1004fa62 <LL_cpe_init_ucfg>
10060eac:	4807      	ldr	r0, [pc, #28]	@ (10060ecc <__arm_cp.7_0>)
10060eae:	7ac1      	ldrb	r1, [r0, #11]
10060eb0:	4807      	ldr	r0, [pc, #28]	@ (10060ed0 <__arm_cp.7_1>)
10060eb2:	6800      	ldr	r0, [r0, #0]
10060eb4:	30b0      	adds	r0, #176	@ 0xb0
10060eb6:	4a07      	ldr	r2, [pc, #28]	@ (10060ed4 <__arm_cp.7_2>)
10060eb8:	2305      	movs	r3, #5
10060eba:	f002 fb2f 	bl	1006351c <CST_init>
10060ebe:	f7f4 fcd9 	bl	10055874 <Acl_Init>
10060ec2:	f7fc fd58 	bl	1005d976 <LLC_chc_ll_cntxt_init_ucfg_weak>
10060ec6:	b008      	add	sp, #32
10060ec8:	bdb0      	pop	{r4, r5, r7, pc}
10060eca:	46c0      	nop			@ (mov r8, r8)

10060ecc <__arm_cp.7_0>:
10060ecc:	2000296c 	.word	0x2000296c

10060ed0 <__arm_cp.7_1>:
10060ed0:	20002958 	.word	0x20002958

10060ed4 <__arm_cp.7_2>:
10060ed4:	10060b55 	.word	0x10060b55

10060ed8 <Is_Address_Initialized>:
10060ed8:	2100      	movs	r1, #0
10060eda:	460a      	mov	r2, r1
10060edc:	2906      	cmp	r1, #6
10060ede:	d005      	beq.n	10060eec <Is_Address_Initialized+0x14>
10060ee0:	5c43      	ldrb	r3, [r0, r1]
10060ee2:	2b00      	cmp	r3, #0
10060ee4:	d000      	beq.n	10060ee8 <Is_Address_Initialized+0x10>
10060ee6:	2201      	movs	r2, #1
10060ee8:	1c49      	adds	r1, r1, #1
10060eea:	e7f7      	b.n	10060edc <Is_Address_Initialized+0x4>
10060eec:	b2d0      	uxtb	r0, r2
10060eee:	4770      	bx	lr

10060ef0 <get_rf_rx_path_compensation_db>:
10060ef0:	4804      	ldr	r0, [pc, #16]	@ (10060f04 <__arm_cp.10_0>)
10060ef2:	6800      	ldr	r0, [r0, #0]
10060ef4:	215e      	movs	r1, #94	@ 0x5e
10060ef6:	5e40      	ldrsh	r0, [r0, r1]
10060ef8:	210d      	movs	r1, #13
10060efa:	4341      	muls	r1, r0
10060efc:	3140      	adds	r1, #64	@ 0x40
10060efe:	11c8      	asrs	r0, r1, #7
10060f00:	4770      	bx	lr
10060f02:	46c0      	nop			@ (mov r8, r8)

10060f04 <__arm_cp.10_0>:
10060f04:	20002958 	.word	0x20002958

10060f08 <LL_get_tx_common_buffer_p>:
10060f08:	4802      	ldr	r0, [pc, #8]	@ (10060f14 <__arm_cp.11_0>)
10060f0a:	6800      	ldr	r0, [r0, #0]
10060f0c:	218c      	movs	r1, #140	@ 0x8c
10060f0e:	5840      	ldr	r0, [r0, r1]
10060f10:	4770      	bx	lr
10060f12:	46c0      	nop			@ (mov r8, r8)

10060f14 <__arm_cp.11_0>:
10060f14:	20002958 	.word	0x20002958

10060f18 <LL_get_rx_common_buffer_p>:
10060f18:	4802      	ldr	r0, [pc, #8]	@ (10060f24 <__arm_cp.12_0>)
10060f1a:	6800      	ldr	r0, [r0, #0]
10060f1c:	2190      	movs	r1, #144	@ 0x90
10060f1e:	5840      	ldr	r0, [r0, r1]
10060f20:	4770      	bx	lr
10060f22:	46c0      	nop			@ (mov r8, r8)

10060f24 <__arm_cp.12_0>:
10060f24:	20002958 	.word	0x20002958

10060f28 <LL_get_control_pdu_size>:
10060f28:	2800      	cmp	r0, #0
10060f2a:	d001      	beq.n	10060f30 <LL_get_control_pdu_size+0x8>
10060f2c:	2030      	movs	r0, #48	@ 0x30
10060f2e:	4770      	bx	lr
10060f30:	2020      	movs	r0, #32
10060f32:	4770      	bx	lr

10060f34 <llc_get_linkms_cntxt_p>:
10060f34:	4802      	ldr	r0, [pc, #8]	@ (10060f40 <__arm_cp.15_0>)
10060f36:	6800      	ldr	r0, [r0, #0]
10060f38:	219c      	movs	r1, #156	@ 0x9c
10060f3a:	5840      	ldr	r0, [r0, r1]
10060f3c:	4770      	bx	lr
10060f3e:	46c0      	nop			@ (mov r8, r8)

10060f40 <__arm_cp.15_0>:
10060f40:	20002958 	.word	0x20002958

10060f44 <llc_get_next_free_conn_handle>:
10060f44:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10060f46:	4815      	ldr	r0, [pc, #84]	@ (10060f9c <__arm_cp.16_0>)
10060f48:	6800      	ldr	r0, [r0, #0]
10060f4a:	219c      	movs	r1, #156	@ 0x9c
10060f4c:	9102      	str	r1, [sp, #8]
10060f4e:	5841      	ldr	r1, [r0, r1]
10060f50:	2054      	movs	r0, #84	@ 0x54
10060f52:	9001      	str	r0, [sp, #4]
10060f54:	5a08      	ldrh	r0, [r1, r0]
10060f56:	6bcf      	ldr	r7, [r1, #60]	@ 0x3c
10060f58:	4c12      	ldr	r4, [pc, #72]	@ (10060fa4 <__arm_cp.16_2>)
10060f5a:	1c45      	adds	r5, r0, #1
10060f5c:	b2a9      	uxth	r1, r5
10060f5e:	0a09      	lsrs	r1, r1, #8
10060f60:	290e      	cmp	r1, #14
10060f62:	d901      	bls.n	10060f68 <llc_get_next_free_conn_handle+0x24>
10060f64:	490e      	ldr	r1, [pc, #56]	@ (10060fa0 <__arm_cp.16_1>)
10060f66:	1845      	adds	r5, r0, r1
10060f68:	2f00      	cmp	r7, #0
10060f6a:	d00f      	beq.n	10060f8c <llc_get_next_free_conn_handle+0x48>
10060f6c:	2600      	movs	r6, #0
10060f6e:	6820      	ldr	r0, [r4, #0]
10060f70:	2134      	movs	r1, #52	@ 0x34
10060f72:	5c41      	ldrb	r1, [r0, r1]
10060f74:	b2f0      	uxtb	r0, r6
10060f76:	4288      	cmp	r0, r1
10060f78:	d208      	bcs.n	10060f8c <llc_get_next_free_conn_handle+0x48>
10060f7a:	f7f9 fe4d 	bl	1005ac18 <llc_conn_get_cntxt_per_p>
10060f7e:	1c76      	adds	r6, r6, #1
10060f80:	b2a9      	uxth	r1, r5
10060f82:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
10060f84:	4281      	cmp	r1, r0
10060f86:	d1f2      	bne.n	10060f6e <llc_get_next_free_conn_handle+0x2a>
10060f88:	4628      	mov	r0, r5
10060f8a:	e7e6      	b.n	10060f5a <llc_get_next_free_conn_handle+0x16>
10060f8c:	4803      	ldr	r0, [pc, #12]	@ (10060f9c <__arm_cp.16_0>)
10060f8e:	6800      	ldr	r0, [r0, #0]
10060f90:	9902      	ldr	r1, [sp, #8]
10060f92:	5840      	ldr	r0, [r0, r1]
10060f94:	9901      	ldr	r1, [sp, #4]
10060f96:	5245      	strh	r5, [r0, r1]
10060f98:	b2a8      	uxth	r0, r5
10060f9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10060f9c <__arm_cp.16_0>:
10060f9c:	20002958 	.word	0x20002958

10060fa0 <__arm_cp.16_1>:
10060fa0:	fffff102 	.word	0xfffff102

10060fa4 <__arm_cp.16_2>:
10060fa4:	20002904 	.word	0x20002904

10060fa8 <LL_sched_time_t1_ge_t2>:
10060fa8:	43c0      	mvns	r0, r0
10060faa:	1840      	adds	r0, r0, r1
10060fac:	0fc0      	lsrs	r0, r0, #31
10060fae:	4770      	bx	lr

10060fb0 <LL_sched_engine_return_actual_scheduler_margin>:
10060fb0:	4801      	ldr	r0, [pc, #4]	@ (10060fb8 <__arm_cp.2_0>)
10060fb2:	6800      	ldr	r0, [r0, #0]
10060fb4:	6880      	ldr	r0, [r0, #8]
10060fb6:	4770      	bx	lr

10060fb8 <__arm_cp.2_0>:
10060fb8:	2000295c 	.word	0x2000295c

10060fbc <LL_sched_init>:
10060fbc:	4809      	ldr	r0, [pc, #36]	@ (10060fe4 <__arm_cp.4_0>)
10060fbe:	7ac0      	ldrb	r0, [r0, #11]
10060fc0:	4909      	ldr	r1, [pc, #36]	@ (10060fe8 <__arm_cp.4_1>)
10060fc2:	6809      	ldr	r1, [r1, #0]
10060fc4:	3112      	adds	r1, #18
10060fc6:	2800      	cmp	r0, #0
10060fc8:	d004      	beq.n	10060fd4 <LL_sched_init+0x18>
10060fca:	2200      	movs	r2, #0
10060fcc:	800a      	strh	r2, [r1, #0]
10060fce:	312c      	adds	r1, #44	@ 0x2c
10060fd0:	1e40      	subs	r0, r0, #1
10060fd2:	e7f8      	b.n	10060fc6 <LL_sched_init+0xa>
10060fd4:	4805      	ldr	r0, [pc, #20]	@ (10060fec <__arm_cp.4_2>)
10060fd6:	6800      	ldr	r0, [r0, #0]
10060fd8:	2100      	movs	r1, #0
10060fda:	73c1      	strb	r1, [r0, #15]
10060fdc:	21ff      	movs	r1, #255	@ 0xff
10060fde:	0209      	lsls	r1, r1, #8
10060fe0:	8181      	strh	r1, [r0, #12]
10060fe2:	4770      	bx	lr

10060fe4 <__arm_cp.4_0>:
10060fe4:	2000296c 	.word	0x2000296c

10060fe8 <__arm_cp.4_1>:
10060fe8:	20002960 	.word	0x20002960

10060fec <__arm_cp.4_2>:
10060fec:	2000295c 	.word	0x2000295c

10060ff0 <LL_sched_set_anchor>:
10060ff0:	222c      	movs	r2, #44	@ 0x2c
10060ff2:	4342      	muls	r2, r0
10060ff4:	4801      	ldr	r0, [pc, #4]	@ (10060ffc <__arm_cp.5_0>)
10060ff6:	6800      	ldr	r0, [r0, #0]
10060ff8:	5081      	str	r1, [r0, r2]
10060ffa:	4770      	bx	lr

10060ffc <__arm_cp.5_0>:
10060ffc:	20002960 	.word	0x20002960

10061000 <LL_sched_set_taskslot_length_anchor>:
10061000:	232c      	movs	r3, #44	@ 0x2c
10061002:	4343      	muls	r3, r0
10061004:	4802      	ldr	r0, [pc, #8]	@ (10061010 <__arm_cp.6_0>)
10061006:	6800      	ldr	r0, [r0, #0]
10061008:	50c2      	str	r2, [r0, r3]
1006100a:	18c0      	adds	r0, r0, r3
1006100c:	6041      	str	r1, [r0, #4]
1006100e:	4770      	bx	lr

10061010 <__arm_cp.6_0>:
10061010:	20002960 	.word	0x20002960

10061014 <LL_sched_set_cancel_request>:
10061014:	28ff      	cmp	r0, #255	@ 0xff
10061016:	d00b      	beq.n	10061030 <LL_sched_set_cancel_request+0x1c>
10061018:	212c      	movs	r1, #44	@ 0x2c
1006101a:	4341      	muls	r1, r0
1006101c:	4805      	ldr	r0, [pc, #20]	@ (10061034 <__arm_cp.9_0>)
1006101e:	6800      	ldr	r0, [r0, #0]
10061020:	1840      	adds	r0, r0, r1
10061022:	7c81      	ldrb	r1, [r0, #18]
10061024:	2908      	cmp	r1, #8
10061026:	d001      	beq.n	1006102c <LL_sched_set_cancel_request+0x18>
10061028:	2110      	movs	r1, #16
1006102a:	e000      	b.n	1006102e <LL_sched_set_cancel_request+0x1a>
1006102c:	2120      	movs	r1, #32
1006102e:	7481      	strb	r1, [r0, #18]
10061030:	4770      	bx	lr
10061032:	46c0      	nop			@ (mov r8, r8)

10061034 <__arm_cp.9_0>:
10061034:	20002960 	.word	0x20002960

10061038 <LL_sched_enable_taskslot>:
10061038:	b5f0      	push	{r4, r5, r6, r7, lr}
1006103a:	b088      	sub	sp, #32
1006103c:	9307      	str	r3, [sp, #28]
1006103e:	272c      	movs	r7, #44	@ 0x2c
10061040:	4347      	muls	r7, r0
10061042:	481a      	ldr	r0, [pc, #104]	@ (100610ac <__arm_cp.10_0>)
10061044:	6806      	ldr	r6, [r0, #0]
10061046:	19f0      	adds	r0, r6, r7
10061048:	7c84      	ldrb	r4, [r0, #18]
1006104a:	2c01      	cmp	r4, #1
1006104c:	d12b      	bne.n	100610a6 <LL_sched_enable_taskslot+0x6e>
1006104e:	4603      	mov	r3, r0
10061050:	3312      	adds	r3, #18
10061052:	9d14      	ldr	r5, [sp, #80]	@ 0x50
10061054:	9506      	str	r5, [sp, #24]
10061056:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
10061058:	9505      	str	r5, [sp, #20]
1006105a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1006105c:	9503      	str	r5, [sp, #12]
1006105e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
10061060:	9502      	str	r5, [sp, #8]
10061062:	9104      	str	r1, [sp, #16]
10061064:	9910      	ldr	r1, [sp, #64]	@ 0x40
10061066:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10061068:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1006106a:	9400      	str	r4, [sp, #0]
1006106c:	9201      	str	r2, [sp, #4]
1006106e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10061070:	9c07      	ldr	r4, [sp, #28]
10061072:	6044      	str	r4, [r0, #4]
10061074:	6082      	str	r2, [r0, #8]
10061076:	9a00      	ldr	r2, [sp, #0]
10061078:	51f2      	str	r2, [r6, r7]
1006107a:	221f      	movs	r2, #31
1006107c:	4015      	ands	r5, r2
1006107e:	7545      	strb	r5, [r0, #21]
10061080:	4011      	ands	r1, r2
10061082:	7581      	strb	r1, [r0, #22]
10061084:	2101      	movs	r1, #1
10061086:	7501      	strb	r1, [r0, #20]
10061088:	9a01      	ldr	r2, [sp, #4]
1006108a:	74c2      	strb	r2, [r0, #19]
1006108c:	8201      	strh	r1, [r0, #16]
1006108e:	9902      	ldr	r1, [sp, #8]
10061090:	61c1      	str	r1, [r0, #28]
10061092:	9903      	ldr	r1, [sp, #12]
10061094:	6201      	str	r1, [r0, #32]
10061096:	9905      	ldr	r1, [sp, #20]
10061098:	6241      	str	r1, [r0, #36]	@ 0x24
1006109a:	9906      	ldr	r1, [sp, #24]
1006109c:	6281      	str	r1, [r0, #40]	@ 0x28
1006109e:	9904      	ldr	r1, [sp, #16]
100610a0:	60c1      	str	r1, [r0, #12]
100610a2:	2002      	movs	r0, #2
100610a4:	7018      	strb	r0, [r3, #0]
100610a6:	b008      	add	sp, #32
100610a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100610aa:	46c0      	nop			@ (mov r8, r8)

100610ac <__arm_cp.10_0>:
100610ac:	20002960 	.word	0x20002960

100610b0 <LL_sched_is_scheduler_call_pending>:
100610b0:	b580      	push	{r7, lr}
100610b2:	490a      	ldr	r1, [pc, #40]	@ (100610dc <__arm_cp.11_0>)
100610b4:	6809      	ldr	r1, [r1, #0]
100610b6:	7b0a      	ldrb	r2, [r1, #12]
100610b8:	2a01      	cmp	r2, #1
100610ba:	d106      	bne.n	100610ca <LL_sched_is_scheduler_call_pending+0x1a>
100610bc:	7bca      	ldrb	r2, [r1, #15]
100610be:	2a03      	cmp	r2, #3
100610c0:	d105      	bne.n	100610ce <LL_sched_is_scheduler_call_pending+0x1e>
100610c2:	2000      	movs	r0, #0
100610c4:	f7fb fb92 	bl	1005c7ec <llc_scan_stop_ucfg_weak>
100610c8:	bd80      	pop	{r7, pc}
100610ca:	2000      	movs	r0, #0
100610cc:	bd80      	pop	{r7, pc}
100610ce:	6809      	ldr	r1, [r1, #0]
100610d0:	1a08      	subs	r0, r1, r0
100610d2:	4903      	ldr	r1, [pc, #12]	@ (100610e0 <__arm_cp.11_1>)
100610d4:	1840      	adds	r0, r0, r1
100610d6:	0fc0      	lsrs	r0, r0, #31
100610d8:	bd80      	pop	{r7, pc}
100610da:	46c0      	nop			@ (mov r8, r8)

100610dc <__arm_cp.11_0>:
100610dc:	2000295c 	.word	0x2000295c

100610e0 <__arm_cp.11_1>:
100610e0:	fffffe0b 	.word	0xfffffe0b

100610e4 <LL_sched_anchorstretch>:
100610e4:	4902      	ldr	r1, [pc, #8]	@ (100610f0 <__arm_cp.12_0>)
100610e6:	6809      	ldr	r1, [r1, #0]
100610e8:	684a      	ldr	r2, [r1, #4]
100610ea:	6002      	str	r2, [r0, #0]
100610ec:	7b88      	ldrb	r0, [r1, #14]
100610ee:	4770      	bx	lr

100610f0 <__arm_cp.12_0>:
100610f0:	2000295c 	.word	0x2000295c

100610f4 <LL_sched_engine>:
100610f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100610f6:	b0b3      	sub	sp, #204	@ 0xcc
100610f8:	4607      	mov	r7, r0
100610fa:	48dc      	ldr	r0, [pc, #880]	@ (1006146c <__arm_cp.13_0>)
100610fc:	6800      	ldr	r0, [r0, #0]
100610fe:	900b      	str	r0, [sp, #44]	@ 0x2c
10061100:	2001      	movs	r0, #1
10061102:	9001      	str	r0, [sp, #4]
10061104:	9009      	str	r0, [sp, #36]	@ 0x24
10061106:	2100      	movs	r1, #0
10061108:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1006110a:	7381      	strb	r1, [r0, #14]
1006110c:	48d8      	ldr	r0, [pc, #864]	@ (10061470 <__arm_cp.13_1>)
1006110e:	6803      	ldr	r3, [r0, #0]
10061110:	910a      	str	r1, [sp, #40]	@ 0x28
10061112:	7219      	strb	r1, [r3, #8]
10061114:	20ff      	movs	r0, #255	@ 0xff
10061116:	9008      	str	r0, [sp, #32]
10061118:	3002      	adds	r0, #2
1006111a:	8298      	strh	r0, [r3, #20]
1006111c:	7c18      	ldrb	r0, [r3, #16]
1006111e:	21f0      	movs	r1, #240	@ 0xf0
10061120:	4001      	ands	r1, r0
10061122:	090a      	lsrs	r2, r1, #4
10061124:	1888      	adds	r0, r1, r2
10061126:	7418      	strb	r0, [r3, #16]
10061128:	8a59      	ldrh	r1, [r3, #18]
1006112a:	40d1      	lsrs	r1, r2
1006112c:	07c9      	lsls	r1, r1, #31
1006112e:	49d1      	ldr	r1, [pc, #836]	@ (10061474 <__arm_cp.13_2>)
10061130:	6809      	ldr	r1, [r1, #0]
10061132:	9107      	str	r1, [sp, #28]
10061134:	9305      	str	r3, [sp, #20]
10061136:	d006      	beq.n	10061146 <LL_sched_engine+0x52>
10061138:	2000      	movs	r0, #0
1006113a:	f002 f991 	bl	10063460 <tsk_notify_idx>
1006113e:	f7f1 fb12 	bl	10052766 <BLE_STACK_ProcessRequest>
10061142:	9b05      	ldr	r3, [sp, #20]
10061144:	7c18      	ldrb	r0, [r3, #16]
10061146:	210f      	movs	r1, #15
10061148:	9102      	str	r1, [sp, #8]
1006114a:	4008      	ands	r0, r1
1006114c:	7418      	strb	r0, [r3, #16]
1006114e:	2196      	movs	r1, #150	@ 0x96
10061150:	9809      	ldr	r0, [sp, #36]	@ 0x24
10061152:	4341      	muls	r1, r0
10061154:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10061156:	9112      	str	r1, [sp, #72]	@ 0x48
10061158:	6081      	str	r1, [r0, #8]
1006115a:	2001      	movs	r0, #1
1006115c:	9004      	str	r0, [sp, #16]
1006115e:	43c0      	mvns	r0, r0
10061160:	b279      	sxtb	r1, r7
10061162:	4281      	cmp	r1, r0
10061164:	dc10      	bgt.n	10061188 <LL_sched_engine+0x94>
10061166:	207f      	movs	r0, #127	@ 0x7f
10061168:	4007      	ands	r7, r0
1006116a:	252c      	movs	r5, #44	@ 0x2c
1006116c:	437d      	muls	r5, r7
1006116e:	9c07      	ldr	r4, [sp, #28]
10061170:	1960      	adds	r0, r4, r5
10061172:	900a      	str	r0, [sp, #40]	@ 0x28
10061174:	5966      	ldr	r6, [r4, r5]
10061176:	f7f2 f9a8 	bl	100534ca <BLEPLAT_GetCurrentSysTime>
1006117a:	1a30      	subs	r0, r6, r0
1006117c:	49be      	ldr	r1, [pc, #760]	@ (10061478 <__arm_cp.13_3>)
1006117e:	1840      	adds	r0, r0, r1
10061180:	d500      	bpl.n	10061184 <LL_sched_engine+0x90>
10061182:	e0ef      	b.n	10061364 <LL_sched_engine+0x270>
10061184:	4638      	mov	r0, r7
10061186:	e004      	b.n	10061192 <LL_sched_engine+0x9e>
10061188:	b2f8      	uxtb	r0, r7
1006118a:	28ff      	cmp	r0, #255	@ 0xff
1006118c:	d00e      	beq.n	100611ac <LL_sched_engine+0xb8>
1006118e:	2100      	movs	r1, #0
10061190:	910a      	str	r1, [sp, #40]	@ 0x28
10061192:	212c      	movs	r1, #44	@ 0x2c
10061194:	4341      	muls	r1, r0
10061196:	9807      	ldr	r0, [sp, #28]
10061198:	1840      	adds	r0, r0, r1
1006119a:	2101      	movs	r1, #1
1006119c:	7501      	strb	r1, [r0, #20]
1006119e:	7c81      	ldrb	r1, [r0, #18]
100611a0:	2908      	cmp	r1, #8
100611a2:	d102      	bne.n	100611aa <LL_sched_engine+0xb6>
100611a4:	3012      	adds	r0, #18
100611a6:	2104      	movs	r1, #4
100611a8:	7001      	strb	r1, [r0, #0]
100611aa:	9708      	str	r7, [sp, #32]
100611ac:	f7f2 f98d 	bl	100534ca <BLEPLAT_GetCurrentSysTime>
100611b0:	9912      	ldr	r1, [sp, #72]	@ 0x48
100611b2:	180c      	adds	r4, r1, r0
100611b4:	48af      	ldr	r0, [pc, #700]	@ (10061474 <__arm_cp.13_2>)
100611b6:	6807      	ldr	r7, [r0, #0]
100611b8:	3728      	adds	r7, #40	@ 0x28
100611ba:	2500      	movs	r5, #0
100611bc:	4628      	mov	r0, r5
100611be:	49af      	ldr	r1, [pc, #700]	@ (1006147c <__arm_cp.13_4>)
100611c0:	7aca      	ldrb	r2, [r1, #11]
100611c2:	4295      	cmp	r5, r2
100611c4:	d23a      	bcs.n	1006123c <LL_sched_engine+0x148>
100611c6:	463e      	mov	r6, r7
100611c8:	3e16      	subs	r6, #22
100611ca:	7831      	ldrb	r1, [r6, #0]
100611cc:	070a      	lsls	r2, r1, #28
100611ce:	0f52      	lsrs	r2, r2, #29
100611d0:	d01e      	beq.n	10061210 <LL_sched_engine+0x11c>
100611d2:	2104      	movs	r1, #4
100611d4:	7031      	strb	r1, [r6, #0]
100611d6:	4639      	mov	r1, r7
100611d8:	3928      	subs	r1, #40	@ 0x28
100611da:	6809      	ldr	r1, [r1, #0]
100611dc:	43ca      	mvns	r2, r1
100611de:	18a2      	adds	r2, r4, r2
100611e0:	d429      	bmi.n	10061236 <LL_sched_engine+0x142>
100611e2:	1a61      	subs	r1, r4, r1
100611e4:	4638      	mov	r0, r7
100611e6:	381c      	subs	r0, #28
100611e8:	6800      	ldr	r0, [r0, #0]
100611ea:	463a      	mov	r2, r7
100611ec:	3a0c      	subs	r2, #12
100611ee:	6812      	ldr	r2, [r2, #0]
100611f0:	4790      	blx	r2
100611f2:	4639      	mov	r1, r7
100611f4:	3918      	subs	r1, #24
100611f6:	880a      	ldrh	r2, [r1, #0]
100611f8:	1812      	adds	r2, r2, r0
100611fa:	800a      	strh	r2, [r1, #0]
100611fc:	4639      	mov	r1, r7
100611fe:	3914      	subs	r1, #20
10061200:	780a      	ldrb	r2, [r1, #0]
10061202:	1880      	adds	r0, r0, r2
10061204:	287f      	cmp	r0, #127	@ 0x7f
10061206:	d300      	bcc.n	1006120a <LL_sched_engine+0x116>
10061208:	207f      	movs	r0, #127	@ 0x7f
1006120a:	7008      	strb	r0, [r1, #0]
1006120c:	7831      	ldrb	r1, [r6, #0]
1006120e:	2001      	movs	r0, #1
10061210:	0689      	lsls	r1, r1, #26
10061212:	0f89      	lsrs	r1, r1, #30
10061214:	d00f      	beq.n	10061236 <LL_sched_engine+0x142>
10061216:	6839      	ldr	r1, [r7, #0]
10061218:	2900      	cmp	r1, #0
1006121a:	d006      	beq.n	1006122a <LL_sched_engine+0x136>
1006121c:	4638      	mov	r0, r7
1006121e:	381c      	subs	r0, #28
10061220:	6800      	ldr	r0, [r0, #0]
10061222:	4788      	blx	r1
10061224:	7830      	ldrb	r0, [r6, #0]
10061226:	2801      	cmp	r0, #1
10061228:	d004      	beq.n	10061234 <LL_sched_engine+0x140>
1006122a:	2000      	movs	r0, #0
1006122c:	7030      	strb	r0, [r6, #0]
1006122e:	4639      	mov	r1, r7
10061230:	3915      	subs	r1, #21
10061232:	7008      	strb	r0, [r1, #0]
10061234:	2001      	movs	r0, #1
10061236:	372c      	adds	r7, #44	@ 0x2c
10061238:	1c6d      	adds	r5, r5, #1
1006123a:	e7c0      	b.n	100611be <LL_sched_engine+0xca>
1006123c:	2800      	cmp	r0, #0
1006123e:	d1b5      	bne.n	100611ac <LL_sched_engine+0xb8>
10061240:	488c      	ldr	r0, [pc, #560]	@ (10061474 <__arm_cp.13_2>)
10061242:	6800      	ldr	r0, [r0, #0]
10061244:	4603      	mov	r3, r0
10061246:	3312      	adds	r3, #18
10061248:	2400      	movs	r4, #0
1006124a:	4621      	mov	r1, r4
1006124c:	42a2      	cmp	r2, r4
1006124e:	d009      	beq.n	10061264 <LL_sched_engine+0x170>
10061250:	781d      	ldrb	r5, [r3, #0]
10061252:	2d04      	cmp	r5, #4
10061254:	d103      	bne.n	1006125e <LL_sched_engine+0x16a>
10061256:	b2cd      	uxtb	r5, r1
10061258:	ae13      	add	r6, sp, #76	@ 0x4c
1006125a:	5574      	strb	r4, [r6, r5]
1006125c:	1c49      	adds	r1, r1, #1
1006125e:	332c      	adds	r3, #44	@ 0x2c
10061260:	1c64      	adds	r4, r4, #1
10061262:	e7f3      	b.n	1006124c <LL_sched_engine+0x158>
10061264:	060a      	lsls	r2, r1, #24
10061266:	d074      	beq.n	10061352 <LL_sched_engine+0x25e>
10061268:	b2ca      	uxtb	r2, r1
1006126a:	920e      	str	r2, [sp, #56]	@ 0x38
1006126c:	2200      	movs	r2, #0
1006126e:	9206      	str	r2, [sp, #24]
10061270:	460c      	mov	r4, r1
10061272:	9203      	str	r2, [sp, #12]
10061274:	4616      	mov	r6, r2
10061276:	910d      	str	r1, [sp, #52]	@ 0x34
10061278:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1006127a:	4296      	cmp	r6, r2
1006127c:	d06e      	beq.n	1006135c <LL_sched_engine+0x268>
1006127e:	9612      	str	r6, [sp, #72]	@ 0x48
10061280:	9410      	str	r4, [sp, #64]	@ 0x40
10061282:	b2e3      	uxtb	r3, r4
10061284:	2700      	movs	r7, #0
10061286:	462c      	mov	r4, r5
10061288:	463e      	mov	r6, r7
1006128a:	42bb      	cmp	r3, r7
1006128c:	d00d      	beq.n	100612aa <LL_sched_engine+0x1b6>
1006128e:	aa13      	add	r2, sp, #76	@ 0x4c
10061290:	5dd2      	ldrb	r2, [r2, r7]
10061292:	252c      	movs	r5, #44	@ 0x2c
10061294:	4355      	muls	r5, r2
10061296:	5945      	ldr	r5, [r0, r5]
10061298:	2f00      	cmp	r7, #0
1006129a:	d002      	beq.n	100612a2 <LL_sched_engine+0x1ae>
1006129c:	43f2      	mvns	r2, r6
1006129e:	18aa      	adds	r2, r5, r2
100612a0:	d501      	bpl.n	100612a6 <LL_sched_engine+0x1b2>
100612a2:	463c      	mov	r4, r7
100612a4:	462e      	mov	r6, r5
100612a6:	1c7f      	adds	r7, r7, #1
100612a8:	e7ef      	b.n	1006128a <LL_sched_engine+0x196>
100612aa:	9d12      	ldr	r5, [sp, #72]	@ 0x48
100612ac:	1b4a      	subs	r2, r1, r5
100612ae:	b2d2      	uxtb	r2, r2
100612b0:	1e51      	subs	r1, r2, #1
100612b2:	aa13      	add	r2, sp, #76	@ 0x4c
100612b4:	5c53      	ldrb	r3, [r2, r1]
100612b6:	b2e4      	uxtb	r4, r4
100612b8:	5d17      	ldrb	r7, [r2, r4]
100612ba:	5457      	strb	r7, [r2, r1]
100612bc:	5513      	strb	r3, [r2, r4]
100612be:	910f      	str	r1, [sp, #60]	@ 0x3c
100612c0:	b2cb      	uxtb	r3, r1
100612c2:	5cd3      	ldrb	r3, [r2, r3]
100612c4:	2d00      	cmp	r5, #0
100612c6:	d02e      	beq.n	10061326 <LL_sched_engine+0x232>
100612c8:	461d      	mov	r5, r3
100612ca:	9911      	ldr	r1, [sp, #68]	@ 0x44
100612cc:	b2ca      	uxtb	r2, r1
100612ce:	ac13      	add	r4, sp, #76	@ 0x4c
100612d0:	5ca4      	ldrb	r4, [r4, r2]
100612d2:	272c      	movs	r7, #44	@ 0x2c
100612d4:	437c      	muls	r4, r7
100612d6:	5902      	ldr	r2, [r0, r4]
100612d8:	1b91      	subs	r1, r2, r6
100612da:	1904      	adds	r4, r0, r4
100612dc:	6863      	ldr	r3, [r4, #4]
100612de:	18c9      	adds	r1, r1, r3
100612e0:	3195      	adds	r1, #149	@ 0x95
100612e2:	d44a      	bmi.n	1006137a <LL_sched_engine+0x286>
100612e4:	43d1      	mvns	r1, r2
100612e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
100612e8:	1851      	adds	r1, r2, r1
100612ea:	d449      	bmi.n	10061380 <LL_sched_engine+0x28c>
100612ec:	436f      	muls	r7, r5
100612ee:	19c1      	adds	r1, r0, r7
100612f0:	7d8a      	ldrb	r2, [r1, #22]
100612f2:	7d0b      	ldrb	r3, [r1, #20]
100612f4:	4093      	lsls	r3, r2
100612f6:	7d49      	ldrb	r1, [r1, #21]
100612f8:	2601      	movs	r6, #1
100612fa:	4632      	mov	r2, r6
100612fc:	408a      	lsls	r2, r1
100612fe:	429a      	cmp	r2, r3
10061300:	d800      	bhi.n	10061304 <LL_sched_engine+0x210>
10061302:	4613      	mov	r3, r2
10061304:	7da1      	ldrb	r1, [r4, #22]
10061306:	7d27      	ldrb	r7, [r4, #20]
10061308:	408f      	lsls	r7, r1
1006130a:	7d61      	ldrb	r1, [r4, #21]
1006130c:	408e      	lsls	r6, r1
1006130e:	42be      	cmp	r6, r7
10061310:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10061312:	d800      	bhi.n	10061316 <LL_sched_engine+0x222>
10061314:	4637      	mov	r7, r6
10061316:	429f      	cmp	r7, r3
10061318:	462b      	mov	r3, r5
1006131a:	990d      	ldr	r1, [sp, #52]	@ 0x34
1006131c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1006131e:	d300      	bcc.n	10061322 <LL_sched_engine+0x22e>
10061320:	9b11      	ldr	r3, [sp, #68]	@ 0x44
10061322:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10061324:	e011      	b.n	1006134a <LL_sched_engine+0x256>
10061326:	990d      	ldr	r1, [sp, #52]	@ 0x34
10061328:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1006132a:	2a01      	cmp	r2, #1
1006132c:	d101      	bne.n	10061332 <LL_sched_engine+0x23e>
1006132e:	2202      	movs	r2, #2
10061330:	9206      	str	r2, [sp, #24]
10061332:	9c10      	ldr	r4, [sp, #64]	@ 0x40
10061334:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10061336:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10061338:	222c      	movs	r2, #44	@ 0x2c
1006133a:	435a      	muls	r2, r3
1006133c:	5883      	ldr	r3, [r0, r2]
1006133e:	1882      	adds	r2, r0, r2
10061340:	6852      	ldr	r2, [r2, #4]
10061342:	189a      	adds	r2, r3, r2
10061344:	3296      	adds	r2, #150	@ 0x96
10061346:	920c      	str	r2, [sp, #48]	@ 0x30
10061348:	462b      	mov	r3, r5
1006134a:	1e64      	subs	r4, r4, #1
1006134c:	1c76      	adds	r6, r6, #1
1006134e:	9311      	str	r3, [sp, #68]	@ 0x44
10061350:	e792      	b.n	10061278 <LL_sched_engine+0x184>
10061352:	2000      	movs	r0, #0
10061354:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10061356:	6048      	str	r0, [r1, #4]
10061358:	7388      	strb	r0, [r1, #14]
1006135a:	e02d      	b.n	100613b8 <LL_sched_engine+0x2c4>
1006135c:	9a03      	ldr	r2, [sp, #12]
1006135e:	4616      	mov	r6, r2
10061360:	9b06      	ldr	r3, [sp, #24]
10061362:	e013      	b.n	1006138c <LL_sched_engine+0x298>
10061364:	1960      	adds	r0, r4, r5
10061366:	7c80      	ldrb	r0, [r0, #18]
10061368:	2810      	cmp	r0, #16
1006136a:	d100      	bne.n	1006136e <LL_sched_engine+0x27a>
1006136c:	e70a      	b.n	10061184 <LL_sched_engine+0x90>
1006136e:	2820      	cmp	r0, #32
10061370:	d100      	bne.n	10061374 <LL_sched_engine+0x280>
10061372:	e707      	b.n	10061184 <LL_sched_engine+0x90>
10061374:	2400      	movs	r4, #0
10061376:	463d      	mov	r5, r7
10061378:	e021      	b.n	100613be <LL_sched_engine+0x2ca>
1006137a:	3e96      	subs	r6, #150	@ 0x96
1006137c:	9b04      	ldr	r3, [sp, #16]
1006137e:	e004      	b.n	1006138a <LL_sched_engine+0x296>
10061380:	980d      	ldr	r0, [sp, #52]	@ 0x34
10061382:	1e40      	subs	r0, r0, #1
10061384:	9011      	str	r0, [sp, #68]	@ 0x44
10061386:	2600      	movs	r6, #0
10061388:	4633      	mov	r3, r6
1006138a:	9a03      	ldr	r2, [sp, #12]
1006138c:	9811      	ldr	r0, [sp, #68]	@ 0x44
1006138e:	b2c0      	uxtb	r0, r0
10061390:	a913      	add	r1, sp, #76	@ 0x4c
10061392:	5c0d      	ldrb	r5, [r1, r0]
10061394:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10061396:	6042      	str	r2, [r0, #4]
10061398:	7383      	strb	r3, [r0, #14]
1006139a:	2dff      	cmp	r5, #255	@ 0xff
1006139c:	d00c      	beq.n	100613b8 <LL_sched_engine+0x2c4>
1006139e:	202c      	movs	r0, #44	@ 0x2c
100613a0:	4368      	muls	r0, r5
100613a2:	9907      	ldr	r1, [sp, #28]
100613a4:	1809      	adds	r1, r1, r0
100613a6:	b2d8      	uxtb	r0, r3
100613a8:	2801      	cmp	r0, #1
100613aa:	910a      	str	r1, [sp, #40]	@ 0x28
100613ac:	d105      	bne.n	100613ba <LL_sched_engine+0x2c6>
100613ae:	6808      	ldr	r0, [r1, #0]
100613b0:	1a30      	subs	r0, r6, r0
100613b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
100613b4:	6048      	str	r0, [r1, #4]
100613b6:	e000      	b.n	100613ba <LL_sched_engine+0x2c6>
100613b8:	25ff      	movs	r5, #255	@ 0xff
100613ba:	9c01      	ldr	r4, [sp, #4]
100613bc:	9f08      	ldr	r7, [sp, #32]
100613be:	f7f3 f821 	bl	10054404 <BLEPLAT_CNTR_ClearSemareq>
100613c2:	482a      	ldr	r0, [pc, #168]	@ (1006146c <__arm_cp.13_0>)
100613c4:	6800      	ldr	r0, [r0, #0]
100613c6:	2dff      	cmp	r5, #255	@ 0xff
100613c8:	d02f      	beq.n	1006142a <LL_sched_engine+0x336>
100613ca:	9711      	str	r7, [sp, #68]	@ 0x44
100613cc:	9412      	str	r4, [sp, #72]	@ 0x48
100613ce:	4604      	mov	r4, r0
100613d0:	2008      	movs	r0, #8
100613d2:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
100613d4:	74b8      	strb	r0, [r7, #18]
100613d6:	f7fe fa36 	bl	1005f846 <llc_cte_timer_stop_ucfg_weak>
100613da:	7365      	strb	r5, [r4, #13]
100613dc:	6a3a      	ldr	r2, [r7, #32]
100613de:	68f8      	ldr	r0, [r7, #12]
100613e0:	6879      	ldr	r1, [r7, #4]
100613e2:	4790      	blx	r2
100613e4:	683e      	ldr	r6, [r7, #0]
100613e6:	940b      	str	r4, [sp, #44]	@ 0x2c
100613e8:	6026      	str	r6, [r4, #0]
100613ea:	4628      	mov	r0, r5
100613ec:	f7f3 f820 	bl	10054430 <BLEPLAT_CNTR_GlobWriteSlot>
100613f0:	f7f3 f817 	bl	10054422 <BLEPLAT_CNTR_GlobEnableBlue>
100613f4:	9812      	ldr	r0, [sp, #72]	@ 0x48
100613f6:	2800      	cmp	r0, #0
100613f8:	d023      	beq.n	10061442 <LL_sched_engine+0x34e>
100613fa:	7cf8      	ldrb	r0, [r7, #19]
100613fc:	09c1      	lsrs	r1, r0, #7
100613fe:	2201      	movs	r2, #1
10061400:	4630      	mov	r0, r6
10061402:	f7f2 f889 	bl	10053518 <BLEPLAT_SetRadioTimerValue>
10061406:	2800      	cmp	r0, #0
10061408:	d01d      	beq.n	10061446 <LL_sched_engine+0x352>
1006140a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1006140c:	0040      	lsls	r0, r0, #1
1006140e:	9009      	str	r0, [sp, #36]	@ 0x24
10061410:	2810      	cmp	r0, #16
10061412:	9f11      	ldr	r7, [sp, #68]	@ 0x44
10061414:	d200      	bcs.n	10061418 <LL_sched_engine+0x324>
10061416:	e676      	b.n	10061106 <LL_sched_engine+0x12>
10061418:	f7fe fa14 	bl	1005f844 <llc_cte_timer_error_ucfg_weak>
1006141c:	20a1      	movs	r0, #161	@ 0xa1
1006141e:	2106      	movs	r1, #6
10061420:	2200      	movs	r2, #0
10061422:	4613      	mov	r3, r2
10061424:	f003 fc12 	bl	10064c4c <aci_hal_fw_error_event_push_noinline>
10061428:	e009      	b.n	1006143e <LL_sched_engine+0x34a>
1006142a:	4604      	mov	r4, r0
1006142c:	f7f2 f88e 	bl	1005354c <BLEPLAT_ClearRadioTimerValue>
10061430:	f7f2 fff0 	bl	10054414 <BLEPLAT_CNTR_GlobDisableBlue>
10061434:	2000      	movs	r0, #0
10061436:	73e0      	strb	r0, [r4, #15]
10061438:	20ff      	movs	r0, #255	@ 0xff
1006143a:	0200      	lsls	r0, r0, #8
1006143c:	81a0      	strh	r0, [r4, #12]
1006143e:	9904      	ldr	r1, [sp, #16]
10061440:	e00f      	b.n	10061462 <LL_sched_engine+0x36e>
10061442:	f7f2 f89b 	bl	1005357c <BLEPLAT_SetRadioCloseTimeout>
10061446:	9b04      	ldr	r3, [sp, #16]
10061448:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1006144a:	730b      	strb	r3, [r1, #12]
1006144c:	7cf8      	ldrb	r0, [r7, #19]
1006144e:	73c8      	strb	r0, [r1, #15]
10061450:	9a05      	ldr	r2, [sp, #20]
10061452:	60d6      	str	r6, [r2, #12]
10061454:	7c11      	ldrb	r1, [r2, #16]
10061456:	9c02      	ldr	r4, [sp, #8]
10061458:	4021      	ands	r1, r4
1006145a:	0100      	lsls	r0, r0, #4
1006145c:	1808      	adds	r0, r1, r0
1006145e:	4619      	mov	r1, r3
10061460:	7410      	strb	r0, [r2, #16]
10061462:	4803      	ldr	r0, [pc, #12]	@ (10061470 <__arm_cp.13_1>)
10061464:	6800      	ldr	r0, [r0, #0]
10061466:	7201      	strb	r1, [r0, #8]
10061468:	b033      	add	sp, #204	@ 0xcc
1006146a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006146c <__arm_cp.13_0>:
1006146c:	2000295c 	.word	0x2000295c

10061470 <__arm_cp.13_1>:
10061470:	20002958 	.word	0x20002958

10061474 <__arm_cp.13_2>:
10061474:	20002960 	.word	0x20002960

10061478 <__arm_cp.13_3>:
10061478:	fffffed4 	.word	0xfffffed4

1006147c <__arm_cp.13_4>:
1006147c:	2000296c 	.word	0x2000296c

10061480 <LL_sched_set_priority>:
10061480:	b510      	push	{r4, lr}
10061482:	231f      	movs	r3, #31
10061484:	401a      	ands	r2, r3
10061486:	242c      	movs	r4, #44	@ 0x2c
10061488:	4344      	muls	r4, r0
1006148a:	4803      	ldr	r0, [pc, #12]	@ (10061498 <__arm_cp.14_0>)
1006148c:	6800      	ldr	r0, [r0, #0]
1006148e:	1900      	adds	r0, r0, r4
10061490:	7582      	strb	r2, [r0, #22]
10061492:	4019      	ands	r1, r3
10061494:	7541      	strb	r1, [r0, #21]
10061496:	bd10      	pop	{r4, pc}

10061498 <__arm_cp.14_0>:
10061498:	20002960 	.word	0x20002960

1006149c <LL_sched_set_params>:
1006149c:	b5b0      	push	{r4, r5, r7, lr}
1006149e:	242c      	movs	r4, #44	@ 0x2c
100614a0:	4344      	muls	r4, r0
100614a2:	480b      	ldr	r0, [pc, #44]	@ (100614d0 <__arm_cp.15_0>)
100614a4:	6800      	ldr	r0, [r0, #0]
100614a6:	9d05      	ldr	r5, [sp, #20]
100614a8:	5105      	str	r5, [r0, r4]
100614aa:	1900      	adds	r0, r0, r4
100614ac:	9c04      	ldr	r4, [sp, #16]
100614ae:	6084      	str	r4, [r0, #8]
100614b0:	60c1      	str	r1, [r0, #12]
100614b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
100614b4:	6281      	str	r1, [r0, #40]	@ 0x28
100614b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
100614b8:	6241      	str	r1, [r0, #36]	@ 0x24
100614ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
100614bc:	6201      	str	r1, [r0, #32]
100614be:	9908      	ldr	r1, [sp, #32]
100614c0:	61c1      	str	r1, [r0, #28]
100614c2:	9907      	ldr	r1, [sp, #28]
100614c4:	7581      	strb	r1, [r0, #22]
100614c6:	9906      	ldr	r1, [sp, #24]
100614c8:	7541      	strb	r1, [r0, #21]
100614ca:	74c2      	strb	r2, [r0, #19]
100614cc:	6043      	str	r3, [r0, #4]
100614ce:	bdb0      	pop	{r4, r5, r7, pc}

100614d0 <__arm_cp.15_0>:
100614d0:	20002960 	.word	0x20002960

100614d4 <LL_sched_delete_taskslot>:
100614d4:	212c      	movs	r1, #44	@ 0x2c
100614d6:	4341      	muls	r1, r0
100614d8:	4802      	ldr	r0, [pc, #8]	@ (100614e4 <__arm_cp.19_0>)
100614da:	6800      	ldr	r0, [r0, #0]
100614dc:	1840      	adds	r0, r0, r1
100614de:	2110      	movs	r1, #16
100614e0:	8241      	strh	r1, [r0, #18]
100614e2:	4770      	bx	lr

100614e4 <__arm_cp.19_0>:
100614e4:	20002960 	.word	0x20002960

100614e8 <LL_sched_set_per_state>:
100614e8:	222c      	movs	r2, #44	@ 0x2c
100614ea:	4342      	muls	r2, r0
100614ec:	4802      	ldr	r0, [pc, #8]	@ (100614f8 <__arm_cp.21_0>)
100614ee:	6800      	ldr	r0, [r0, #0]
100614f0:	1880      	adds	r0, r0, r2
100614f2:	7481      	strb	r1, [r0, #18]
100614f4:	4770      	bx	lr
100614f6:	46c0      	nop			@ (mov r8, r8)

100614f8 <__arm_cp.21_0>:
100614f8:	20002960 	.word	0x20002960

100614fc <LL_sched_reserve_taskslot>:
100614fc:	b510      	push	{r4, lr}
100614fe:	480e      	ldr	r0, [pc, #56]	@ (10061538 <__arm_cp.22_0>)
10061500:	6801      	ldr	r1, [r0, #0]
10061502:	3128      	adds	r1, #40	@ 0x28
10061504:	2000      	movs	r0, #0
10061506:	4a0d      	ldr	r2, [pc, #52]	@ (1006153c <__arm_cp.22_1>)
10061508:	7ad3      	ldrb	r3, [r2, #11]
1006150a:	4298      	cmp	r0, r3
1006150c:	d20b      	bcs.n	10061526 <LL_sched_reserve_taskslot+0x2a>
1006150e:	f3ef 8310 	mrs	r3, PRIMASK
10061512:	b672      	cpsid	i
10061514:	460b      	mov	r3, r1
10061516:	3b16      	subs	r3, #22
10061518:	781c      	ldrb	r4, [r3, #0]
1006151a:	2c00      	cmp	r4, #0
1006151c:	d005      	beq.n	1006152a <LL_sched_reserve_taskslot+0x2e>
1006151e:	b662      	cpsie	i
10061520:	312c      	adds	r1, #44	@ 0x2c
10061522:	1c40      	adds	r0, r0, #1
10061524:	e7f0      	b.n	10061508 <LL_sched_reserve_taskslot+0xc>
10061526:	20ff      	movs	r0, #255	@ 0xff
10061528:	e004      	b.n	10061534 <LL_sched_reserve_taskslot+0x38>
1006152a:	2200      	movs	r2, #0
1006152c:	600a      	str	r2, [r1, #0]
1006152e:	2101      	movs	r1, #1
10061530:	7019      	strb	r1, [r3, #0]
10061532:	b662      	cpsie	i
10061534:	b2c0      	uxtb	r0, r0
10061536:	bd10      	pop	{r4, pc}

10061538 <__arm_cp.22_0>:
10061538:	20002960 	.word	0x20002960

1006153c <__arm_cp.22_1>:
1006153c:	2000296c 	.word	0x2000296c

10061540 <LL_sched_release_taskslot>:
10061540:	28ff      	cmp	r0, #255	@ 0xff
10061542:	d006      	beq.n	10061552 <LL_sched_release_taskslot+0x12>
10061544:	212c      	movs	r1, #44	@ 0x2c
10061546:	4341      	muls	r1, r0
10061548:	4802      	ldr	r0, [pc, #8]	@ (10061554 <__arm_cp.23_0>)
1006154a:	6800      	ldr	r0, [r0, #0]
1006154c:	1840      	adds	r0, r0, r1
1006154e:	2100      	movs	r1, #0
10061550:	8241      	strh	r1, [r0, #18]
10061552:	4770      	bx	lr

10061554 <__arm_cp.23_0>:
10061554:	20002960 	.word	0x20002960

10061558 <LL_sched_check_and_call_sched>:
10061558:	b510      	push	{r4, lr}
1006155a:	460c      	mov	r4, r1
1006155c:	f3ef 8110 	mrs	r1, PRIMASK
10061560:	b672      	cpsid	i
10061562:	f7ff fda5 	bl	100610b0 <LL_sched_is_scheduler_call_pending>
10061566:	b662      	cpsie	i
10061568:	2800      	cmp	r0, #0
1006156a:	d000      	beq.n	1006156e <LL_sched_check_and_call_sched+0x16>
1006156c:	bd10      	pop	{r4, pc}
1006156e:	4620      	mov	r0, r4
10061570:	f7ff fdc0 	bl	100610f4 <LL_sched_engine>
10061574:	bd10      	pop	{r4, pc}
	...

10061578 <LL_sched_check_and_wait_sched>:
10061578:	b5b0      	push	{r4, r5, r7, lr}
1006157a:	4604      	mov	r4, r0
1006157c:	4813      	ldr	r0, [pc, #76]	@ (100615cc <__arm_cp.25_0>)
1006157e:	7ac0      	ldrb	r0, [r0, #11]
10061580:	42a0      	cmp	r0, r4
10061582:	d922      	bls.n	100615ca <LL_sched_check_and_wait_sched+0x52>
10061584:	f3ef 8010 	mrs	r0, PRIMASK
10061588:	b672      	cpsid	i
1006158a:	25ff      	movs	r5, #255	@ 0xff
1006158c:	35ec      	adds	r5, #236	@ 0xec
1006158e:	f7f1 ff9c 	bl	100534ca <BLEPLAT_GetCurrentSysTime>
10061592:	1940      	adds	r0, r0, r5
10061594:	f7ff fd8c 	bl	100610b0 <LL_sched_is_scheduler_call_pending>
10061598:	4a0d      	ldr	r2, [pc, #52]	@ (100615d0 <__arm_cp.25_1>)
1006159a:	6813      	ldr	r3, [r2, #0]
1006159c:	2100      	movs	r1, #0
1006159e:	7219      	strb	r1, [r3, #8]
100615a0:	b662      	cpsie	i
100615a2:	2801      	cmp	r0, #1
100615a4:	d10c      	bne.n	100615c0 <LL_sched_check_and_wait_sched+0x48>
100615a6:	6810      	ldr	r0, [r2, #0]
100615a8:	6041      	str	r1, [r0, #4]
100615aa:	4a0a      	ldr	r2, [pc, #40]	@ (100615d4 <__arm_cp.25_2>)
100615ac:	6843      	ldr	r3, [r0, #4]
100615ae:	4293      	cmp	r3, r2
100615b0:	d80b      	bhi.n	100615ca <LL_sched_check_and_wait_sched+0x52>
100615b2:	7a03      	ldrb	r3, [r0, #8]
100615b4:	2b00      	cmp	r3, #0
100615b6:	d107      	bne.n	100615c8 <LL_sched_check_and_wait_sched+0x50>
100615b8:	6843      	ldr	r3, [r0, #4]
100615ba:	1c5b      	adds	r3, r3, #1
100615bc:	6043      	str	r3, [r0, #4]
100615be:	e7f5      	b.n	100615ac <LL_sched_check_and_wait_sched+0x34>
100615c0:	4620      	mov	r0, r4
100615c2:	f7ff fd97 	bl	100610f4 <LL_sched_engine>
100615c6:	bdb0      	pop	{r4, r5, r7, pc}
100615c8:	7201      	strb	r1, [r0, #8]
100615ca:	bdb0      	pop	{r4, r5, r7, pc}

100615cc <__arm_cp.25_0>:
100615cc:	2000296c 	.word	0x2000296c

100615d0 <__arm_cp.25_1>:
100615d0:	20002958 	.word	0x20002958

100615d4 <__arm_cp.25_2>:
100615d4:	0004e1ff 	.word	0x0004e1ff

100615d8 <MBM_init>:
100615d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100615da:	4c18      	ldr	r4, [pc, #96]	@ (1006163c <__arm_cp.1_0>)
100615dc:	2501      	movs	r5, #1
100615de:	2204      	movs	r2, #4
100615e0:	4e17      	ldr	r6, [pc, #92]	@ (10061640 <__arm_cp.1_1>)
100615e2:	4620      	mov	r0, r4
100615e4:	4629      	mov	r1, r5
100615e6:	47b0      	blx	r6
100615e8:	4f16      	ldr	r7, [pc, #88]	@ (10061644 <__arm_cp.1_2>)
100615ea:	6038      	str	r0, [r7, #0]
100615ec:	2210      	movs	r2, #16
100615ee:	4620      	mov	r0, r4
100615f0:	4629      	mov	r1, r5
100615f2:	47b0      	blx	r6
100615f4:	6839      	ldr	r1, [r7, #0]
100615f6:	6008      	str	r0, [r1, #0]
100615f8:	220c      	movs	r2, #12
100615fa:	4620      	mov	r0, r4
100615fc:	4629      	mov	r1, r5
100615fe:	47b0      	blx	r6
10061600:	6839      	ldr	r1, [r7, #0]
10061602:	6809      	ldr	r1, [r1, #0]
10061604:	60c8      	str	r0, [r1, #12]
10061606:	4d10      	ldr	r5, [pc, #64]	@ (10061648 <__arm_cp.1_3>)
10061608:	89e9      	ldrh	r1, [r5, #14]
1006160a:	2224      	movs	r2, #36	@ 0x24
1006160c:	4620      	mov	r0, r4
1006160e:	47b0      	blx	r6
10061610:	4601      	mov	r1, r0
10061612:	6838      	ldr	r0, [r7, #0]
10061614:	6802      	ldr	r2, [r0, #0]
10061616:	68d0      	ldr	r0, [r2, #12]
10061618:	6081      	str	r1, [r0, #8]
1006161a:	2100      	movs	r1, #0
1006161c:	2908      	cmp	r1, #8
1006161e:	d003      	beq.n	10061628 <MBM_init+0x50>
10061620:	2300      	movs	r3, #0
10061622:	5253      	strh	r3, [r2, r1]
10061624:	1c89      	adds	r1, r1, #2
10061626:	e7f9      	b.n	1006161c <MBM_init+0x44>
10061628:	89e9      	ldrh	r1, [r5, #14]
1006162a:	80d1      	strh	r1, [r2, #6]
1006162c:	2100      	movs	r1, #0
1006162e:	8111      	strh	r1, [r2, #8]
10061630:	89e9      	ldrh	r1, [r5, #14]
10061632:	8041      	strh	r1, [r0, #2]
10061634:	f000 f948 	bl	100618c8 <Mem_Buff_init>
10061638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006163a:	46c0      	nop			@ (mov r8, r8)

1006163c <__arm_cp.1_0>:
1006163c:	20002968 	.word	0x20002968

10061640 <__arm_cp.1_1>:
10061640:	10061891 	.word	0x10061891

10061644 <__arm_cp.1_2>:
10061644:	20002964 	.word	0x20002964

10061648 <__arm_cp.1_3>:
10061648:	2000296c 	.word	0x2000296c

1006164c <MBM_get>:
1006164c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1006164e:	4a1a      	ldr	r2, [pc, #104]	@ (100616b8 <__arm_cp.2_0>)
10061650:	6812      	ldr	r2, [r2, #0]
10061652:	6813      	ldr	r3, [r2, #0]
10061654:	f3ef 8210 	mrs	r2, PRIMASK
10061658:	b672      	cpsid	i
1006165a:	2206      	movs	r2, #6
1006165c:	5e9c      	ldrsh	r4, [r3, r2]
1006165e:	17e2      	asrs	r2, r4, #31
10061660:	4627      	mov	r7, r4
10061662:	4397      	bics	r7, r2
10061664:	0040      	lsls	r0, r0, #1
10061666:	9000      	str	r0, [sp, #0]
10061668:	5e18      	ldrsh	r0, [r3, r0]
1006166a:	4a14      	ldr	r2, [pc, #80]	@ (100616bc <__arm_cp.2_1>)
1006166c:	9102      	str	r1, [sp, #8]
1006166e:	1889      	adds	r1, r1, r2
10061670:	0949      	lsrs	r1, r1, #5
10061672:	1c4d      	adds	r5, r1, #1
10061674:	2801      	cmp	r0, #1
10061676:	9501      	str	r5, [sp, #4]
10061678:	db05      	blt.n	10061686 <MBM_get+0x3a>
1006167a:	1b42      	subs	r2, r0, r5
1006167c:	4256      	negs	r6, r2
1006167e:	b212      	sxth	r2, r2
10061680:	13d5      	asrs	r5, r2, #15
10061682:	4035      	ands	r5, r6
10061684:	183f      	adds	r7, r7, r0
10061686:	68d8      	ldr	r0, [r3, #12]
10061688:	2200      	movs	r2, #0
1006168a:	5e86      	ldrsh	r6, [r0, r2]
1006168c:	b209      	sxth	r1, r1
1006168e:	428e      	cmp	r6, r1
10061690:	dd0e      	ble.n	100616b0 <MBM_get+0x64>
10061692:	b23e      	sxth	r6, r7
10061694:	428e      	cmp	r6, r1
10061696:	dd0b      	ble.n	100616b0 <MBM_get+0x64>
10061698:	9900      	ldr	r1, [sp, #0]
1006169a:	1859      	adds	r1, r3, r1
1006169c:	1b62      	subs	r2, r4, r5
1006169e:	80da      	strh	r2, [r3, #6]
100616a0:	880a      	ldrh	r2, [r1, #0]
100616a2:	9b01      	ldr	r3, [sp, #4]
100616a4:	1ad2      	subs	r2, r2, r3
100616a6:	800a      	strh	r2, [r1, #0]
100616a8:	9902      	ldr	r1, [sp, #8]
100616aa:	f000 f943 	bl	10061934 <Mem_Buff_get>
100616ae:	4602      	mov	r2, r0
100616b0:	b662      	cpsie	i
100616b2:	4610      	mov	r0, r2
100616b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100616b6:	46c0      	nop			@ (mov r8, r8)

100616b8 <__arm_cp.2_0>:
100616b8:	20002964 	.word	0x20002964

100616bc <__arm_cp.2_1>:
100616bc:	001fffff 	.word	0x001fffff

100616c0 <MBM_release>:
100616c0:	b5b0      	push	{r4, r5, r7, lr}
100616c2:	460d      	mov	r5, r1
100616c4:	4604      	mov	r4, r0
100616c6:	f000 f95b 	bl	10061980 <Mem_Buff_get_chain_count>
100616ca:	4601      	mov	r1, r0
100616cc:	4628      	mov	r0, r5
100616ce:	f000 f80b 	bl	100616e8 <MBM_release_balance>
100616d2:	4804      	ldr	r0, [pc, #16]	@ (100616e4 <__arm_cp.3_0>)
100616d4:	6800      	ldr	r0, [r0, #0]
100616d6:	6800      	ldr	r0, [r0, #0]
100616d8:	68c0      	ldr	r0, [r0, #12]
100616da:	4621      	mov	r1, r4
100616dc:	f000 f90f 	bl	100618fe <Mem_Buff_release>
100616e0:	bdb0      	pop	{r4, r5, r7, pc}
100616e2:	46c0      	nop			@ (mov r8, r8)

100616e4 <__arm_cp.3_0>:
100616e4:	20002964 	.word	0x20002964

100616e8 <MBM_release_balance>:
100616e8:	b510      	push	{r4, lr}
100616ea:	4a0b      	ldr	r2, [pc, #44]	@ (10061718 <__arm_cp.4_0>)
100616ec:	6812      	ldr	r2, [r2, #0]
100616ee:	6812      	ldr	r2, [r2, #0]
100616f0:	f3ef 8310 	mrs	r3, PRIMASK
100616f4:	b672      	cpsid	i
100616f6:	0043      	lsls	r3, r0, #1
100616f8:	5ed0      	ldrsh	r0, [r2, r3]
100616fa:	1844      	adds	r4, r0, r1
100616fc:	52d4      	strh	r4, [r2, r3]
100616fe:	b20b      	sxth	r3, r1
10061700:	18c3      	adds	r3, r0, r3
10061702:	2b01      	cmp	r3, #1
10061704:	db02      	blt.n	1006170c <MBM_release_balance+0x24>
10061706:	4243      	negs	r3, r0
10061708:	0bc1      	lsrs	r1, r0, #15
1006170a:	4019      	ands	r1, r3
1006170c:	88d0      	ldrh	r0, [r2, #6]
1006170e:	1808      	adds	r0, r1, r0
10061710:	80d0      	strh	r0, [r2, #6]
10061712:	b662      	cpsie	i
10061714:	bd10      	pop	{r4, pc}
10061716:	46c0      	nop			@ (mov r8, r8)

10061718 <__arm_cp.4_0>:
10061718:	20002964 	.word	0x20002964

1006171c <MBM_get_available_mem_buffers>:
1006171c:	4908      	ldr	r1, [pc, #32]	@ (10061740 <__arm_cp.5_0>)
1006171e:	6809      	ldr	r1, [r1, #0]
10061720:	680a      	ldr	r2, [r1, #0]
10061722:	f3ef 8110 	mrs	r1, PRIMASK
10061726:	b672      	cpsid	i
10061728:	2106      	movs	r1, #6
1006172a:	5e51      	ldrsh	r1, [r2, r1]
1006172c:	17cb      	asrs	r3, r1, #31
1006172e:	4399      	bics	r1, r3
10061730:	0040      	lsls	r0, r0, #1
10061732:	5e10      	ldrsh	r0, [r2, r0]
10061734:	2800      	cmp	r0, #0
10061736:	dd00      	ble.n	1006173a <MBM_get_available_mem_buffers+0x1e>
10061738:	1809      	adds	r1, r1, r0
1006173a:	b288      	uxth	r0, r1
1006173c:	b662      	cpsie	i
1006173e:	4770      	bx	lr

10061740 <__arm_cp.5_0>:
10061740:	20002964 	.word	0x20002964

10061744 <MBM_resize>:
10061744:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10061746:	2481      	movs	r4, #129	@ 0x81
10061748:	2800      	cmp	r0, #0
1006174a:	d032      	beq.n	100617b2 <MBM_resize+0x6e>
1006174c:	4606      	mov	r6, r0
1006174e:	9102      	str	r1, [sp, #8]
10061750:	9401      	str	r4, [sp, #4]
10061752:	4819      	ldr	r0, [pc, #100]	@ (100617b8 <__arm_cp.6_0>)
10061754:	6800      	ldr	r0, [r0, #0]
10061756:	6800      	ldr	r0, [r0, #0]
10061758:	9000      	str	r0, [sp, #0]
1006175a:	1e50      	subs	r0, r2, #1
1006175c:	211f      	movs	r1, #31
1006175e:	4301      	orrs	r1, r0
10061760:	1c4c      	adds	r4, r1, #1
10061762:	b2a7      	uxth	r7, r4
10061764:	4630      	mov	r0, r6
10061766:	f000 f913 	bl	10061990 <Mem_Buff_get_chain_size>
1006176a:	4605      	mov	r5, r0
1006176c:	4287      	cmp	r7, r0
1006176e:	d90c      	bls.n	1006178a <MBM_resize+0x46>
10061770:	1b60      	subs	r0, r4, r5
10061772:	b281      	uxth	r1, r0
10061774:	9802      	ldr	r0, [sp, #8]
10061776:	f7ff ff69 	bl	1006164c <MBM_get>
1006177a:	2800      	cmp	r0, #0
1006177c:	9c01      	ldr	r4, [sp, #4]
1006177e:	d018      	beq.n	100617b2 <MBM_resize+0x6e>
10061780:	4601      	mov	r1, r0
10061782:	4630      	mov	r0, r6
10061784:	f000 fa29 	bl	10061bda <Mem_Buff_append>
10061788:	e012      	b.n	100617b0 <MBM_resize+0x6c>
1006178a:	42af      	cmp	r7, r5
1006178c:	d210      	bcs.n	100617b0 <MBM_resize+0x6c>
1006178e:	9800      	ldr	r0, [sp, #0]
10061790:	68c0      	ldr	r0, [r0, #12]
10061792:	4631      	mov	r1, r6
10061794:	463a      	mov	r2, r7
10061796:	f000 f907 	bl	100619a8 <Mem_Buff_resize>
1006179a:	4604      	mov	r4, r0
1006179c:	1e78      	subs	r0, r7, #1
1006179e:	0940      	lsrs	r0, r0, #5
100617a0:	1e69      	subs	r1, r5, #1
100617a2:	0949      	lsrs	r1, r1, #5
100617a4:	1a08      	subs	r0, r1, r0
100617a6:	b281      	uxth	r1, r0
100617a8:	9802      	ldr	r0, [sp, #8]
100617aa:	f7ff ff9d 	bl	100616e8 <MBM_release_balance>
100617ae:	e000      	b.n	100617b2 <MBM_resize+0x6e>
100617b0:	2400      	movs	r4, #0
100617b2:	4620      	mov	r0, r4
100617b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100617b6:	46c0      	nop			@ (mov r8, r8)

100617b8 <__arm_cp.6_0>:
100617b8:	20002964 	.word	0x20002964

100617bc <MBM_reserve>:
100617bc:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100617be:	460c      	mov	r4, r1
100617c0:	4601      	mov	r1, r0
100617c2:	481c      	ldr	r0, [pc, #112]	@ (10061834 <__arm_cp.7_0>)
100617c4:	6800      	ldr	r0, [r0, #0]
100617c6:	6805      	ldr	r5, [r0, #0]
100617c8:	8928      	ldrh	r0, [r5, #8]
100617ca:	68ea      	ldr	r2, [r5, #12]
100617cc:	8852      	ldrh	r2, [r2, #2]
100617ce:	1a13      	subs	r3, r2, r0
100617d0:	42a3      	cmp	r3, r4
100617d2:	da26      	bge.n	10061822 <MBM_reserve+0x66>
100617d4:	1aa1      	subs	r1, r4, r2
100617d6:	1808      	adds	r0, r1, r0
100617d8:	a901      	add	r1, sp, #4
100617da:	8008      	strh	r0, [r1, #0]
100617dc:	4816      	ldr	r0, [pc, #88]	@ (10061838 <__arm_cp.7_1>)
100617de:	6800      	ldr	r0, [r0, #0]
100617e0:	6980      	ldr	r0, [r0, #24]
100617e2:	2142      	movs	r1, #66	@ 0x42
100617e4:	2240      	movs	r2, #64	@ 0x40
100617e6:	2303      	movs	r3, #3
100617e8:	f7f4 faf0 	bl	10055dcc <aci_event_fifo_push_header>
100617ec:	2800      	cmp	r0, #0
100617ee:	d017      	beq.n	10061820 <MBM_reserve+0x64>
100617f0:	4604      	mov	r4, r0
100617f2:	2202      	movs	r2, #2
100617f4:	72c2      	strb	r2, [r0, #11]
100617f6:	2009      	movs	r0, #9
100617f8:	72a0      	strb	r0, [r4, #10]
100617fa:	4620      	mov	r0, r4
100617fc:	300c      	adds	r0, #12
100617fe:	a901      	add	r1, sp, #4
10061800:	f7f1 fd98 	bl	10053334 <BLEPLAT_MemCpy>
10061804:	2000      	movs	r0, #0
10061806:	7260      	strb	r0, [r4, #9]
10061808:	2106      	movs	r1, #6
1006180a:	7221      	strb	r1, [r4, #8]
1006180c:	71e0      	strb	r0, [r4, #7]
1006180e:	71a1      	strb	r1, [r4, #6]
10061810:	20ff      	movs	r0, #255	@ 0xff
10061812:	7160      	strb	r0, [r4, #5]
10061814:	2082      	movs	r0, #130	@ 0x82
10061816:	7120      	strb	r0, [r4, #4]
10061818:	2042      	movs	r0, #66	@ 0x42
1006181a:	4621      	mov	r1, r4
1006181c:	f7f4 fb73 	bl	10055f06 <aci_event_fifo_push>
10061820:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10061822:	2003      	movs	r0, #3
10061824:	4622      	mov	r2, r4
10061826:	f000 f809 	bl	1006183c <MBM_move_class>
1006182a:	8928      	ldrh	r0, [r5, #8]
1006182c:	1900      	adds	r0, r0, r4
1006182e:	8128      	strh	r0, [r5, #8]
10061830:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10061832:	46c0      	nop			@ (mov r8, r8)

10061834 <__arm_cp.7_0>:
10061834:	20002964 	.word	0x20002964

10061838 <__arm_cp.7_1>:
10061838:	20002908 	.word	0x20002908

1006183c <MBM_move_class>:
1006183c:	b510      	push	{r4, lr}
1006183e:	4b08      	ldr	r3, [pc, #32]	@ (10061860 <__arm_cp.8_0>)
10061840:	681b      	ldr	r3, [r3, #0]
10061842:	681b      	ldr	r3, [r3, #0]
10061844:	f3ef 8410 	mrs	r4, PRIMASK
10061848:	b672      	cpsid	i
1006184a:	0040      	lsls	r0, r0, #1
1006184c:	5a1c      	ldrh	r4, [r3, r0]
1006184e:	1aa4      	subs	r4, r4, r2
10061850:	521c      	strh	r4, [r3, r0]
10061852:	0048      	lsls	r0, r1, #1
10061854:	5a19      	ldrh	r1, [r3, r0]
10061856:	1889      	adds	r1, r1, r2
10061858:	5219      	strh	r1, [r3, r0]
1006185a:	b662      	cpsie	i
1006185c:	bd10      	pop	{r4, pc}
1006185e:	46c0      	nop			@ (mov r8, r8)

10061860 <__arm_cp.8_0>:
10061860:	20002964 	.word	0x20002964

10061864 <MBM_unreserve>:
10061864:	b5b0      	push	{r4, r5, r7, lr}
10061866:	460c      	mov	r4, r1
10061868:	4905      	ldr	r1, [pc, #20]	@ (10061880 <__arm_cp.9_0>)
1006186a:	6809      	ldr	r1, [r1, #0]
1006186c:	680d      	ldr	r5, [r1, #0]
1006186e:	2103      	movs	r1, #3
10061870:	4622      	mov	r2, r4
10061872:	f7ff ffe3 	bl	1006183c <MBM_move_class>
10061876:	8928      	ldrh	r0, [r5, #8]
10061878:	1b00      	subs	r0, r0, r4
1006187a:	8128      	strh	r0, [r5, #8]
1006187c:	bdb0      	pop	{r4, r5, r7, pc}
1006187e:	46c0      	nop			@ (mov r8, r8)

10061880 <__arm_cp.9_0>:
10061880:	20002964 	.word	0x20002964

10061884 <csmem_init>:
10061884:	4801      	ldr	r0, [pc, #4]	@ (1006188c <__arm_cp.0_0>)
10061886:	6841      	ldr	r1, [r0, #4]
10061888:	6001      	str	r1, [r0, #0]
1006188a:	4770      	bx	lr

1006188c <__arm_cp.0_0>:
1006188c:	20002968 	.word	0x20002968

10061890 <csmem_mem_assign>:
10061890:	b570      	push	{r4, r5, r6, lr}
10061892:	4614      	mov	r4, r2
10061894:	4605      	mov	r5, r0
10061896:	434c      	muls	r4, r1
10061898:	6800      	ldr	r0, [r0, #0]
1006189a:	1e40      	subs	r0, r0, #1
1006189c:	2103      	movs	r1, #3
1006189e:	4301      	orrs	r1, r0
100618a0:	1c4e      	adds	r6, r1, #1
100618a2:	2100      	movs	r1, #0
100618a4:	4630      	mov	r0, r6
100618a6:	4622      	mov	r2, r4
100618a8:	f7f1 fd54 	bl	10053354 <BLEPLAT_MemSet>
100618ac:	1930      	adds	r0, r6, r4
100618ae:	6028      	str	r0, [r5, #0]
100618b0:	4630      	mov	r0, r6
100618b2:	bd70      	pop	{r4, r5, r6, pc}

100618b4 <csmem_mem_0_assign>:
100618b4:	b580      	push	{r7, lr}
100618b6:	460a      	mov	r2, r1
100618b8:	4601      	mov	r1, r0
100618ba:	4802      	ldr	r0, [pc, #8]	@ (100618c4 <__arm_cp.3_0>)
100618bc:	f7ff ffe8 	bl	10061890 <csmem_mem_assign>
100618c0:	bd80      	pop	{r7, pc}
100618c2:	46c0      	nop			@ (mov r8, r8)

100618c4 <__arm_cp.3_0>:
100618c4:	20002968 	.word	0x20002968

100618c8 <Mem_Buff_init>:
100618c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100618ca:	b081      	sub	sp, #4
100618cc:	4605      	mov	r5, r0
100618ce:	8840      	ldrh	r0, [r0, #2]
100618d0:	2486      	movs	r4, #134	@ 0x86
100618d2:	2800      	cmp	r0, #0
100618d4:	d010      	beq.n	100618f8 <Mem_Buff_init+0x30>
100618d6:	68ae      	ldr	r6, [r5, #8]
100618d8:	2e00      	cmp	r6, #0
100618da:	d00d      	beq.n	100618f8 <Mem_Buff_init+0x30>
100618dc:	2400      	movs	r4, #0
100618de:	606c      	str	r4, [r5, #4]
100618e0:	802c      	strh	r4, [r5, #0]
100618e2:	4627      	mov	r7, r4
100618e4:	6034      	str	r4, [r6, #0]
100618e6:	4628      	mov	r0, r5
100618e8:	4631      	mov	r1, r6
100618ea:	f000 f808 	bl	100618fe <Mem_Buff_release>
100618ee:	3624      	adds	r6, #36	@ 0x24
100618f0:	1c7f      	adds	r7, r7, #1
100618f2:	8868      	ldrh	r0, [r5, #2]
100618f4:	4287      	cmp	r7, r0
100618f6:	d3f5      	bcc.n	100618e4 <Mem_Buff_init+0x1c>
100618f8:	4620      	mov	r0, r4
100618fa:	b001      	add	sp, #4
100618fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

100618fe <Mem_Buff_release>:
100618fe:	b510      	push	{r4, lr}
10061900:	2900      	cmp	r1, #0
10061902:	d015      	beq.n	10061930 <Mem_Buff_release+0x32>
10061904:	2200      	movs	r2, #0
10061906:	460c      	mov	r4, r1
10061908:	4623      	mov	r3, r4
1006190a:	1c52      	adds	r2, r2, #1
1006190c:	6824      	ldr	r4, [r4, #0]
1006190e:	2c00      	cmp	r4, #0
10061910:	d1fa      	bne.n	10061908 <Mem_Buff_release+0xa>
10061912:	f3ef 8410 	mrs	r4, PRIMASK
10061916:	b672      	cpsid	i
10061918:	6844      	ldr	r4, [r0, #4]
1006191a:	6041      	str	r1, [r0, #4]
1006191c:	601c      	str	r4, [r3, #0]
1006191e:	8801      	ldrh	r1, [r0, #0]
10061920:	1889      	adds	r1, r1, r2
10061922:	8001      	strh	r1, [r0, #0]
10061924:	b662      	cpsie	i
10061926:	2000      	movs	r0, #0
10061928:	f001 fdc2 	bl	100634b0 <tsk_signal_resource_idx>
1006192c:	f7f0 ff1b 	bl	10052766 <BLE_STACK_ProcessRequest>
10061930:	bd10      	pop	{r4, pc}
	...

10061934 <Mem_Buff_get>:
10061934:	b5f0      	push	{r4, r5, r6, r7, lr}
10061936:	4a11      	ldr	r2, [pc, #68]	@ (1006197c <__arm_cp.2_0>)
10061938:	1889      	adds	r1, r1, r2
1006193a:	0949      	lsrs	r1, r1, #5
1006193c:	1c4a      	adds	r2, r1, #1
1006193e:	b294      	uxth	r4, r2
10061940:	f3ef 8110 	mrs	r1, PRIMASK
10061944:	b672      	cpsid	i
10061946:	2100      	movs	r1, #0
10061948:	2c00      	cmp	r4, #0
1006194a:	d013      	beq.n	10061974 <Mem_Buff_get+0x40>
1006194c:	8803      	ldrh	r3, [r0, #0]
1006194e:	429c      	cmp	r4, r3
10061950:	d810      	bhi.n	10061974 <Mem_Buff_get+0x40>
10061952:	1e64      	subs	r4, r4, #1
10061954:	6841      	ldr	r1, [r0, #4]
10061956:	460d      	mov	r5, r1
10061958:	d006      	beq.n	10061968 <Mem_Buff_get+0x34>
1006195a:	2600      	movs	r6, #0
1006195c:	460d      	mov	r5, r1
1006195e:	682d      	ldr	r5, [r5, #0]
10061960:	1c76      	adds	r6, r6, #1
10061962:	b2b7      	uxth	r7, r6
10061964:	42bc      	cmp	r4, r7
10061966:	d8fa      	bhi.n	1006195e <Mem_Buff_get+0x2a>
10061968:	682c      	ldr	r4, [r5, #0]
1006196a:	6044      	str	r4, [r0, #4]
1006196c:	2400      	movs	r4, #0
1006196e:	602c      	str	r4, [r5, #0]
10061970:	1a9a      	subs	r2, r3, r2
10061972:	8002      	strh	r2, [r0, #0]
10061974:	b662      	cpsie	i
10061976:	4608      	mov	r0, r1
10061978:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006197a:	46c0      	nop			@ (mov r8, r8)

1006197c <__arm_cp.2_0>:
1006197c:	001fffff 	.word	0x001fffff

10061980 <Mem_Buff_get_chain_count>:
10061980:	2100      	movs	r1, #0
10061982:	2800      	cmp	r0, #0
10061984:	d002      	beq.n	1006198c <Mem_Buff_get_chain_count+0xc>
10061986:	6800      	ldr	r0, [r0, #0]
10061988:	1c49      	adds	r1, r1, #1
1006198a:	e7fa      	b.n	10061982 <Mem_Buff_get_chain_count+0x2>
1006198c:	b288      	uxth	r0, r1
1006198e:	4770      	bx	lr

10061990 <Mem_Buff_get_chain_size>:
10061990:	2800      	cmp	r0, #0
10061992:	d006      	beq.n	100619a2 <Mem_Buff_get_chain_size+0x12>
10061994:	2100      	movs	r1, #0
10061996:	6800      	ldr	r0, [r0, #0]
10061998:	1c49      	adds	r1, r1, #1
1006199a:	2800      	cmp	r0, #0
1006199c:	d1fb      	bne.n	10061996 <Mem_Buff_get_chain_size+0x6>
1006199e:	0148      	lsls	r0, r1, #5
100619a0:	e000      	b.n	100619a4 <Mem_Buff_get_chain_size+0x14>
100619a2:	2000      	movs	r0, #0
100619a4:	b280      	uxth	r0, r0
100619a6:	4770      	bx	lr

100619a8 <Mem_Buff_resize>:
100619a8:	b570      	push	{r4, r5, r6, lr}
100619aa:	2400      	movs	r4, #0
100619ac:	2900      	cmp	r1, #0
100619ae:	d00a      	beq.n	100619c6 <Mem_Buff_resize+0x1e>
100619b0:	2600      	movs	r6, #0
100619b2:	460d      	mov	r5, r1
100619b4:	6809      	ldr	r1, [r1, #0]
100619b6:	4633      	mov	r3, r6
100619b8:	3320      	adds	r3, #32
100619ba:	b29e      	uxth	r6, r3
100619bc:	4296      	cmp	r6, r2
100619be:	d20e      	bcs.n	100619de <Mem_Buff_resize+0x36>
100619c0:	2900      	cmp	r1, #0
100619c2:	d1f6      	bne.n	100619b2 <Mem_Buff_resize+0xa>
100619c4:	e001      	b.n	100619ca <Mem_Buff_resize+0x22>
100619c6:	4623      	mov	r3, r4
100619c8:	4625      	mov	r5, r4
100619ca:	1ad1      	subs	r1, r2, r3
100619cc:	b289      	uxth	r1, r1
100619ce:	f7ff ffb1 	bl	10061934 <Mem_Buff_get>
100619d2:	6028      	str	r0, [r5, #0]
100619d4:	2800      	cmp	r0, #0
100619d6:	d10a      	bne.n	100619ee <Mem_Buff_resize+0x46>
100619d8:	2079      	movs	r0, #121	@ 0x79
100619da:	43c4      	mvns	r4, r0
100619dc:	e007      	b.n	100619ee <Mem_Buff_resize+0x46>
100619de:	2900      	cmp	r1, #0
100619e0:	d004      	beq.n	100619ec <Mem_Buff_resize+0x44>
100619e2:	f7ff ff8c 	bl	100618fe <Mem_Buff_release>
100619e6:	2400      	movs	r4, #0
100619e8:	602c      	str	r4, [r5, #0]
100619ea:	e000      	b.n	100619ee <Mem_Buff_resize+0x46>
100619ec:	2400      	movs	r4, #0
100619ee:	b2e0      	uxtb	r0, r4
100619f0:	bd70      	pop	{r4, r5, r6, pc}

100619f2 <Mem_Buff_get_buff_off>:
100619f2:	2900      	cmp	r1, #0
100619f4:	d008      	beq.n	10061a08 <Mem_Buff_get_buff_off+0x16>
100619f6:	2800      	cmp	r0, #0
100619f8:	d009      	beq.n	10061a0e <Mem_Buff_get_buff_off+0x1c>
100619fa:	b28b      	uxth	r3, r1
100619fc:	2b20      	cmp	r3, #32
100619fe:	d304      	bcc.n	10061a0a <Mem_Buff_get_buff_off+0x18>
10061a00:	6800      	ldr	r0, [r0, #0]
10061a02:	3920      	subs	r1, #32
10061a04:	040b      	lsls	r3, r1, #16
10061a06:	d1f6      	bne.n	100619f6 <Mem_Buff_get_buff_off+0x4>
10061a08:	2100      	movs	r1, #0
10061a0a:	8011      	strh	r1, [r2, #0]
10061a0c:	4770      	bx	lr
10061a0e:	2000      	movs	r0, #0
10061a10:	4770      	bx	lr

10061a12 <Mem_Buff_write>:
10061a12:	b5f0      	push	{r4, r5, r6, r7, lr}
10061a14:	b081      	sub	sp, #4
10061a16:	4606      	mov	r6, r0
10061a18:	0950      	lsrs	r0, r2, #5
10061a1a:	0604      	lsls	r4, r0, #24
10061a1c:	d004      	beq.n	10061a28 <Mem_Buff_write+0x16>
10061a1e:	2e00      	cmp	r6, #0
10061a20:	d02d      	beq.n	10061a7e <Mem_Buff_write+0x6c>
10061a22:	6836      	ldr	r6, [r6, #0]
10061a24:	1e40      	subs	r0, r0, #1
10061a26:	e7f8      	b.n	10061a1a <Mem_Buff_write+0x8>
10061a28:	461c      	mov	r4, r3
10061a2a:	1e5b      	subs	r3, r3, #1
10061a2c:	4620      	mov	r0, r4
10061a2e:	4198      	sbcs	r0, r3
10061a30:	2c00      	cmp	r4, #0
10061a32:	d01f      	beq.n	10061a74 <Mem_Buff_write+0x62>
10061a34:	2e00      	cmp	r6, #0
10061a36:	d01d      	beq.n	10061a74 <Mem_Buff_write+0x62>
10061a38:	201f      	movs	r0, #31
10061a3a:	4002      	ands	r2, r0
10061a3c:	2020      	movs	r0, #32
10061a3e:	1a85      	subs	r5, r0, r2
10061a40:	b2a8      	uxth	r0, r5
10061a42:	b2a3      	uxth	r3, r4
10061a44:	4298      	cmp	r0, r3
10061a46:	d300      	bcc.n	10061a4a <Mem_Buff_write+0x38>
10061a48:	4625      	mov	r5, r4
10061a4a:	9500      	str	r5, [sp, #0]
10061a4c:	b2af      	uxth	r7, r5
10061a4e:	18b0      	adds	r0, r6, r2
10061a50:	1d00      	adds	r0, r0, #4
10061a52:	463a      	mov	r2, r7
10061a54:	460d      	mov	r5, r1
10061a56:	f7f1 fc6d 	bl	10053334 <BLEPLAT_MemCpy>
10061a5a:	9800      	ldr	r0, [sp, #0]
10061a5c:	1a24      	subs	r4, r4, r0
10061a5e:	b2a1      	uxth	r1, r4
10061a60:	1e4a      	subs	r2, r1, #1
10061a62:	4608      	mov	r0, r1
10061a64:	4190      	sbcs	r0, r2
10061a66:	2900      	cmp	r1, #0
10061a68:	d004      	beq.n	10061a74 <Mem_Buff_write+0x62>
10061a6a:	19e9      	adds	r1, r5, r7
10061a6c:	6836      	ldr	r6, [r6, #0]
10061a6e:	2200      	movs	r2, #0
10061a70:	2e00      	cmp	r6, #0
10061a72:	d1e3      	bne.n	10061a3c <Mem_Buff_write+0x2a>
10061a74:	2800      	cmp	r0, #0
10061a76:	d003      	beq.n	10061a80 <Mem_Buff_write+0x6e>
10061a78:	207e      	movs	r0, #126	@ 0x7e
10061a7a:	43c0      	mvns	r0, r0
10061a7c:	e000      	b.n	10061a80 <Mem_Buff_write+0x6e>
10061a7e:	2081      	movs	r0, #129	@ 0x81
10061a80:	b2c0      	uxtb	r0, r0
10061a82:	b001      	add	sp, #4
10061a84:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061a86 <Mem_Buff_read>:
10061a86:	b5f0      	push	{r4, r5, r6, r7, lr}
10061a88:	b081      	sub	sp, #4
10061a8a:	460d      	mov	r5, r1
10061a8c:	4606      	mov	r6, r0
10061a8e:	2a00      	cmp	r2, #0
10061a90:	d008      	beq.n	10061aa4 <Mem_Buff_read+0x1e>
10061a92:	2e00      	cmp	r6, #0
10061a94:	d02a      	beq.n	10061aec <Mem_Buff_read+0x66>
10061a96:	b290      	uxth	r0, r2
10061a98:	2820      	cmp	r0, #32
10061a9a:	d306      	bcc.n	10061aaa <Mem_Buff_read+0x24>
10061a9c:	6836      	ldr	r6, [r6, #0]
10061a9e:	3a20      	subs	r2, #32
10061aa0:	0410      	lsls	r0, r2, #16
10061aa2:	d1f6      	bne.n	10061a92 <Mem_Buff_read+0xc>
10061aa4:	2e00      	cmp	r6, #0
10061aa6:	d021      	beq.n	10061aec <Mem_Buff_read+0x66>
10061aa8:	2200      	movs	r2, #0
10061aaa:	2b00      	cmp	r3, #0
10061aac:	d020      	beq.n	10061af0 <Mem_Buff_read+0x6a>
10061aae:	2020      	movs	r0, #32
10061ab0:	1a84      	subs	r4, r0, r2
10061ab2:	b2a0      	uxth	r0, r4
10061ab4:	b299      	uxth	r1, r3
10061ab6:	4288      	cmp	r0, r1
10061ab8:	d300      	bcc.n	10061abc <Mem_Buff_read+0x36>
10061aba:	461c      	mov	r4, r3
10061abc:	b2a7      	uxth	r7, r4
10061abe:	b290      	uxth	r0, r2
10061ac0:	1830      	adds	r0, r6, r0
10061ac2:	1d01      	adds	r1, r0, #4
10061ac4:	4628      	mov	r0, r5
10061ac6:	463a      	mov	r2, r7
10061ac8:	9300      	str	r3, [sp, #0]
10061aca:	f7f1 fc33 	bl	10053334 <BLEPLAT_MemCpy>
10061ace:	9b00      	ldr	r3, [sp, #0]
10061ad0:	1b1b      	subs	r3, r3, r4
10061ad2:	0418      	lsls	r0, r3, #16
10061ad4:	d004      	beq.n	10061ae0 <Mem_Buff_read+0x5a>
10061ad6:	19ed      	adds	r5, r5, r7
10061ad8:	6836      	ldr	r6, [r6, #0]
10061ada:	2200      	movs	r2, #0
10061adc:	2e00      	cmp	r6, #0
10061ade:	d1e6      	bne.n	10061aae <Mem_Buff_read+0x28>
10061ae0:	b298      	uxth	r0, r3
10061ae2:	2800      	cmp	r0, #0
10061ae4:	d005      	beq.n	10061af2 <Mem_Buff_read+0x6c>
10061ae6:	207e      	movs	r0, #126	@ 0x7e
10061ae8:	43c0      	mvns	r0, r0
10061aea:	e002      	b.n	10061af2 <Mem_Buff_read+0x6c>
10061aec:	2081      	movs	r0, #129	@ 0x81
10061aee:	e000      	b.n	10061af2 <Mem_Buff_read+0x6c>
10061af0:	2000      	movs	r0, #0
10061af2:	b2c0      	uxtb	r0, r0
10061af4:	b001      	add	sp, #4
10061af6:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061af8 <Mem_Buff_cmp>:
10061af8:	b5f0      	push	{r4, r5, r6, r7, lr}
10061afa:	b083      	sub	sp, #12
10061afc:	9102      	str	r1, [sp, #8]
10061afe:	4606      	mov	r6, r0
10061b00:	2a00      	cmp	r2, #0
10061b02:	d008      	beq.n	10061b16 <Mem_Buff_cmp+0x1e>
10061b04:	2e00      	cmp	r6, #0
10061b06:	d033      	beq.n	10061b70 <Mem_Buff_cmp+0x78>
10061b08:	b290      	uxth	r0, r2
10061b0a:	2820      	cmp	r0, #32
10061b0c:	d306      	bcc.n	10061b1c <Mem_Buff_cmp+0x24>
10061b0e:	6836      	ldr	r6, [r6, #0]
10061b10:	3a20      	subs	r2, #32
10061b12:	0410      	lsls	r0, r2, #16
10061b14:	d1f6      	bne.n	10061b04 <Mem_Buff_cmp+0xc>
10061b16:	2e00      	cmp	r6, #0
10061b18:	d02a      	beq.n	10061b70 <Mem_Buff_cmp+0x78>
10061b1a:	2200      	movs	r2, #0
10061b1c:	2b00      	cmp	r3, #0
10061b1e:	9301      	str	r3, [sp, #4]
10061b20:	d020      	beq.n	10061b64 <Mem_Buff_cmp+0x6c>
10061b22:	2700      	movs	r7, #0
10061b24:	461d      	mov	r5, r3
10061b26:	b290      	uxth	r0, r2
10061b28:	281f      	cmp	r0, #31
10061b2a:	d814      	bhi.n	10061b56 <Mem_Buff_cmp+0x5e>
10061b2c:	2120      	movs	r1, #32
10061b2e:	1a8c      	subs	r4, r1, r2
10061b30:	b2a1      	uxth	r1, r4
10061b32:	b2aa      	uxth	r2, r5
10061b34:	4291      	cmp	r1, r2
10061b36:	d300      	bcc.n	10061b3a <Mem_Buff_cmp+0x42>
10061b38:	462c      	mov	r4, r5
10061b3a:	b2a2      	uxth	r2, r4
10061b3c:	b2b9      	uxth	r1, r7
10061b3e:	9b02      	ldr	r3, [sp, #8]
10061b40:	1859      	adds	r1, r3, r1
10061b42:	1830      	adds	r0, r6, r0
10061b44:	1d00      	adds	r0, r0, #4
10061b46:	f7f1 fc15 	bl	10053374 <BLEPLAT_MemCmp>
10061b4a:	2800      	cmp	r0, #0
10061b4c:	d10f      	bne.n	10061b6e <Mem_Buff_cmp+0x76>
10061b4e:	1b2d      	subs	r5, r5, r4
10061b50:	19e7      	adds	r7, r4, r7
10061b52:	2200      	movs	r2, #0
10061b54:	e000      	b.n	10061b58 <Mem_Buff_cmp+0x60>
10061b56:	3a20      	subs	r2, #32
10061b58:	0428      	lsls	r0, r5, #16
10061b5a:	d004      	beq.n	10061b66 <Mem_Buff_cmp+0x6e>
10061b5c:	6836      	ldr	r6, [r6, #0]
10061b5e:	2e00      	cmp	r6, #0
10061b60:	d1e1      	bne.n	10061b26 <Mem_Buff_cmp+0x2e>
10061b62:	e000      	b.n	10061b66 <Mem_Buff_cmp+0x6e>
10061b64:	2700      	movs	r7, #0
10061b66:	b2b8      	uxth	r0, r7
10061b68:	9b01      	ldr	r3, [sp, #4]
10061b6a:	1a1b      	subs	r3, r3, r0
10061b6c:	e000      	b.n	10061b70 <Mem_Buff_cmp+0x78>
10061b6e:	4603      	mov	r3, r0
10061b70:	4618      	mov	r0, r3
10061b72:	b003      	add	sp, #12
10061b74:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061b76 <Mem_Buff_block_copy>:
10061b76:	b510      	push	{r4, lr}
10061b78:	1e52      	subs	r2, r2, #1
10061b7a:	231f      	movs	r3, #31
10061b7c:	4313      	orrs	r3, r2
10061b7e:	b29a      	uxth	r2, r3
10061b80:	1c53      	adds	r3, r2, #1
10061b82:	b29a      	uxth	r2, r3
10061b84:	429a      	cmp	r2, r3
10061b86:	d001      	beq.n	10061b8c <Mem_Buff_block_copy+0x16>
10061b88:	2200      	movs	r2, #0
10061b8a:	e00d      	b.n	10061ba8 <Mem_Buff_block_copy+0x32>
10061b8c:	0953      	lsrs	r3, r2, #5
10061b8e:	460a      	mov	r2, r1
10061b90:	2100      	movs	r1, #0
10061b92:	1854      	adds	r4, r2, r1
10061b94:	6864      	ldr	r4, [r4, #4]
10061b96:	5044      	str	r4, [r0, r1]
10061b98:	1d09      	adds	r1, r1, #4
10061b9a:	2920      	cmp	r1, #32
10061b9c:	d1f9      	bne.n	10061b92 <Mem_Buff_block_copy+0x1c>
10061b9e:	6811      	ldr	r1, [r2, #0]
10061ba0:	3020      	adds	r0, #32
10061ba2:	1e5b      	subs	r3, r3, #1
10061ba4:	041c      	lsls	r4, r3, #16
10061ba6:	d1f2      	bne.n	10061b8e <Mem_Buff_block_copy+0x18>
10061ba8:	4610      	mov	r0, r2
10061baa:	bd10      	pop	{r4, pc}

10061bac <Mem_Buff_block_write>:
10061bac:	b5b0      	push	{r4, r5, r7, lr}
10061bae:	1e52      	subs	r2, r2, #1
10061bb0:	231f      	movs	r3, #31
10061bb2:	4313      	orrs	r3, r2
10061bb4:	b29a      	uxth	r2, r3
10061bb6:	1c53      	adds	r3, r2, #1
10061bb8:	b29a      	uxth	r2, r3
10061bba:	429a      	cmp	r2, r3
10061bbc:	d10c      	bne.n	10061bd8 <Mem_Buff_block_write+0x2c>
10061bbe:	0952      	lsrs	r2, r2, #5
10061bc0:	1d03      	adds	r3, r0, #4
10061bc2:	2400      	movs	r4, #0
10061bc4:	590d      	ldr	r5, [r1, r4]
10061bc6:	511d      	str	r5, [r3, r4]
10061bc8:	1d24      	adds	r4, r4, #4
10061bca:	2c20      	cmp	r4, #32
10061bcc:	d1fa      	bne.n	10061bc4 <Mem_Buff_block_write+0x18>
10061bce:	6800      	ldr	r0, [r0, #0]
10061bd0:	3120      	adds	r1, #32
10061bd2:	1e52      	subs	r2, r2, #1
10061bd4:	0413      	lsls	r3, r2, #16
10061bd6:	d1f3      	bne.n	10061bc0 <Mem_Buff_block_write+0x14>
10061bd8:	bdb0      	pop	{r4, r5, r7, pc}

10061bda <Mem_Buff_append>:
10061bda:	4602      	mov	r2, r0
10061bdc:	6800      	ldr	r0, [r0, #0]
10061bde:	2800      	cmp	r0, #0
10061be0:	d1fb      	bne.n	10061bda <Mem_Buff_append>
10061be2:	6011      	str	r1, [r2, #0]
10061be4:	4770      	bx	lr
	...

10061be8 <BlueNRG_Stack_Initialize_RAM_check>:
10061be8:	b5f0      	push	{r4, r5, r6, r7, lr}
10061bea:	b097      	sub	sp, #92	@ 0x5c
10061bec:	4ce5      	ldr	r4, [pc, #916]	@ (10061f84 <__arm_cp.0_4>)
10061bee:	2067      	movs	r0, #103	@ 0x67
10061bf0:	43c5      	mvns	r5, r0
10061bf2:	f7ed fe3d 	bl	1004f870 <conn_supp_csr_ucfg>
10061bf6:	4ee4      	ldr	r6, [pc, #912]	@ (10061f88 <__arm_cp.0_5>)
10061bf8:	2801      	cmp	r0, #1
10061bfa:	d002      	beq.n	10061c02 <BlueNRG_Stack_Initialize_RAM_check+0x1a>
10061bfc:	7af0      	ldrb	r0, [r6, #11]
10061bfe:	2800      	cmp	r0, #0
10061c00:	d010      	beq.n	10061c24 <BlueNRG_Stack_Initialize_RAM_check+0x3c>
10061c02:	4627      	mov	r7, r4
10061c04:	462c      	mov	r4, r5
10061c06:	3438      	adds	r4, #56	@ 0x38
10061c08:	f7ed fe32 	bl	1004f870 <conn_supp_csr_ucfg>
10061c0c:	7af1      	ldrb	r1, [r6, #11]
10061c0e:	4361      	muls	r1, r4
10061c10:	4378      	muls	r0, r7
10061c12:	1838      	adds	r0, r7, r0
10061c14:	1844      	adds	r4, r0, r1
10061c16:	f7ed fe2b 	bl	1004f870 <conn_supp_csr_ucfg>
10061c1a:	7af1      	ldrb	r1, [r6, #11]
10061c1c:	4341      	muls	r1, r0
10061c1e:	48db      	ldr	r0, [pc, #876]	@ (10061f8c <__arm_cp.0_6>)
10061c20:	4348      	muls	r0, r1
10061c22:	1824      	adds	r4, r4, r0
10061c24:	342e      	adds	r4, #46	@ 0x2e
10061c26:	f7ed fe23 	bl	1004f870 <conn_supp_csr_ucfg>
10061c2a:	2801      	cmp	r0, #1
10061c2c:	d10e      	bne.n	10061c4c <BlueNRG_Stack_Initialize_RAM_check+0x64>
10061c2e:	4628      	mov	r0, r5
10061c30:	3060      	adds	r0, #96	@ 0x60
10061c32:	8931      	ldrh	r1, [r6, #8]
10061c34:	4341      	muls	r1, r0
10061c36:	4628      	mov	r0, r5
10061c38:	3044      	adds	r0, #68	@ 0x44
10061c3a:	7ab2      	ldrb	r2, [r6, #10]
10061c3c:	4342      	muls	r2, r0
10061c3e:	1850      	adds	r0, r2, r1
10061c40:	4629      	mov	r1, r5
10061c42:	3148      	adds	r1, #72	@ 0x48
10061c44:	7b32      	ldrb	r2, [r6, #12]
10061c46:	434a      	muls	r2, r1
10061c48:	1880      	adds	r0, r0, r2
10061c4a:	e000      	b.n	10061c4e <BlueNRG_Stack_Initialize_RAM_check+0x66>
10061c4c:	2000      	movs	r0, #0
10061c4e:	9003      	str	r0, [sp, #12]
10061c50:	89f0      	ldrh	r0, [r6, #14]
10061c52:	900a      	str	r0, [sp, #40]	@ 0x28
10061c54:	f7f8 fb0a 	bl	1005a26c <data_length_extension_csr_ucfg_weak>
10061c58:	2801      	cmp	r0, #1
10061c5a:	d001      	beq.n	10061c60 <BlueNRG_Stack_Initialize_RAM_check+0x78>
10061c5c:	f7fe fe92 	bl	10060984 <ext_adv_scan_enabled_ucfg_weak>
10061c60:	f7ed fdfe 	bl	1004f860 <phy_upd_csr_ucfg>
10061c64:	2801      	cmp	r0, #1
10061c66:	9411      	str	r4, [sp, #68]	@ 0x44
10061c68:	d109      	bne.n	10061c7e <BlueNRG_Stack_Initialize_RAM_check+0x96>
10061c6a:	462c      	mov	r4, r5
10061c6c:	3438      	adds	r4, #56	@ 0x38
10061c6e:	f7ed fdff 	bl	1004f870 <conn_supp_csr_ucfg>
10061c72:	4360      	muls	r0, r4
10061c74:	7af1      	ldrb	r1, [r6, #11]
10061c76:	4341      	muls	r1, r0
10061c78:	3908      	subs	r1, #8
10061c7a:	9109      	str	r1, [sp, #36]	@ 0x24
10061c7c:	e001      	b.n	10061c82 <BlueNRG_Stack_Initialize_RAM_check+0x9a>
10061c7e:	2000      	movs	r0, #0
10061c80:	9009      	str	r0, [sp, #36]	@ 0x24
10061c82:	48f2      	ldr	r0, [pc, #968]	@ (1006204c <__arm_cp.0_3>)
10061c84:	304c      	adds	r0, #76	@ 0x4c
10061c86:	9013      	str	r0, [sp, #76]	@ 0x4c
10061c88:	f7fe fe7c 	bl	10060984 <ext_adv_scan_enabled_ucfg_weak>
10061c8c:	2801      	cmp	r0, #1
10061c8e:	d015      	beq.n	10061cbc <BlueNRG_Stack_Initialize_RAM_check+0xd4>
10061c90:	f7f8 faec 	bl	1005a26c <data_length_extension_csr_ucfg_weak>
10061c94:	2801      	cmp	r0, #1
10061c96:	d011      	beq.n	10061cbc <BlueNRG_Stack_Initialize_RAM_check+0xd4>
10061c98:	2029      	movs	r0, #41	@ 0x29
10061c9a:	5c30      	ldrb	r0, [r6, r0]
10061c9c:	2800      	cmp	r0, #0
10061c9e:	d10d      	bne.n	10061cbc <BlueNRG_Stack_Initialize_RAM_check+0xd4>
10061ca0:	2025      	movs	r0, #37	@ 0x25
10061ca2:	5c30      	ldrb	r0, [r6, r0]
10061ca4:	2800      	cmp	r0, #0
10061ca6:	d109      	bne.n	10061cbc <BlueNRG_Stack_Initialize_RAM_check+0xd4>
10061ca8:	2026      	movs	r0, #38	@ 0x26
10061caa:	5c30      	ldrb	r0, [r6, r0]
10061cac:	2800      	cmp	r0, #0
10061cae:	d002      	beq.n	10061cb6 <BlueNRG_Stack_Initialize_RAM_check+0xce>
10061cb0:	48e6      	ldr	r0, [pc, #920]	@ (1006204c <__arm_cp.0_3>)
10061cb2:	304c      	adds	r0, #76	@ 0x4c
10061cb4:	e001      	b.n	10061cba <BlueNRG_Stack_Initialize_RAM_check+0xd2>
10061cb6:	4628      	mov	r0, r5
10061cb8:	3024      	adds	r0, #36	@ 0x24
10061cba:	9013      	str	r0, [sp, #76]	@ 0x4c
10061cbc:	48e3      	ldr	r0, [pc, #908]	@ (1006204c <__arm_cp.0_3>)
10061cbe:	306c      	adds	r0, #108	@ 0x6c
10061cc0:	9012      	str	r0, [sp, #72]	@ 0x48
10061cc2:	f7fe fe5f 	bl	10060984 <ext_adv_scan_enabled_ucfg_weak>
10061cc6:	2801      	cmp	r0, #1
10061cc8:	d015      	beq.n	10061cf6 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
10061cca:	f7f8 facf 	bl	1005a26c <data_length_extension_csr_ucfg_weak>
10061cce:	2801      	cmp	r0, #1
10061cd0:	d011      	beq.n	10061cf6 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
10061cd2:	2029      	movs	r0, #41	@ 0x29
10061cd4:	5c30      	ldrb	r0, [r6, r0]
10061cd6:	2800      	cmp	r0, #0
10061cd8:	d10d      	bne.n	10061cf6 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
10061cda:	2025      	movs	r0, #37	@ 0x25
10061cdc:	5c30      	ldrb	r0, [r6, r0]
10061cde:	2800      	cmp	r0, #0
10061ce0:	d109      	bne.n	10061cf6 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
10061ce2:	2026      	movs	r0, #38	@ 0x26
10061ce4:	5c30      	ldrb	r0, [r6, r0]
10061ce6:	2800      	cmp	r0, #0
10061ce8:	d002      	beq.n	10061cf0 <BlueNRG_Stack_Initialize_RAM_check+0x108>
10061cea:	48d8      	ldr	r0, [pc, #864]	@ (1006204c <__arm_cp.0_3>)
10061cec:	306c      	adds	r0, #108	@ 0x6c
10061cee:	e001      	b.n	10061cf4 <BlueNRG_Stack_Initialize_RAM_check+0x10c>
10061cf0:	4628      	mov	r0, r5
10061cf2:	303c      	adds	r0, #60	@ 0x3c
10061cf4:	9012      	str	r0, [sp, #72]	@ 0x48
10061cf6:	f7fe fe45 	bl	10060984 <ext_adv_scan_enabled_ucfg_weak>
10061cfa:	9010      	str	r0, [sp, #64]	@ 0x40
10061cfc:	7eb0      	ldrb	r0, [r6, #26]
10061cfe:	9000      	str	r0, [sp, #0]
10061d00:	7ff0      	ldrb	r0, [r6, #31]
10061d02:	900f      	str	r0, [sp, #60]	@ 0x3c
10061d04:	f7ed fdb4 	bl	1004f870 <conn_supp_csr_ucfg>
10061d08:	9007      	str	r0, [sp, #28]
10061d0a:	7ff0      	ldrb	r0, [r6, #31]
10061d0c:	9001      	str	r0, [sp, #4]
10061d0e:	f7fa fd04 	bl	1005c71a <llc_priv_controller_privacy_csr_ucfg_weak>
10061d12:	9008      	str	r0, [sp, #32]
10061d14:	7ff0      	ldrb	r0, [r6, #31]
10061d16:	9002      	str	r0, [sp, #8]
10061d18:	f001 f965 	bl	10062fe6 <secure_connections_csr_ucfg_weak>
10061d1c:	2700      	movs	r7, #0
10061d1e:	f7f8 faab 	bl	1005a278 <scan_csr_ucfg_weak>
10061d22:	2801      	cmp	r0, #1
10061d24:	4638      	mov	r0, r7
10061d26:	9515      	str	r5, [sp, #84]	@ 0x54
10061d28:	9716      	str	r7, [sp, #88]	@ 0x58
10061d2a:	d14f      	bne.n	10061dcc <BlueNRG_Stack_Initialize_RAM_check+0x1e4>
10061d2c:	7f70      	ldrb	r0, [r6, #29]
10061d2e:	280a      	cmp	r0, #10
10061d30:	d300      	bcc.n	10061d34 <BlueNRG_Stack_Initialize_RAM_check+0x14c>
10061d32:	200a      	movs	r0, #10
10061d34:	462c      	mov	r4, r5
10061d36:	3438      	adds	r4, #56	@ 0x38
10061d38:	4344      	muls	r4, r0
10061d3a:	3cc0      	subs	r4, #192	@ 0xc0
10061d3c:	2500      	movs	r5, #0
10061d3e:	f7fa fce3 	bl	1005c708 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10061d42:	2801      	cmp	r0, #1
10061d44:	462f      	mov	r7, r5
10061d46:	d120      	bne.n	10061d8a <BlueNRG_Stack_Initialize_RAM_check+0x1a2>
10061d48:	f7ed fd92 	bl	1004f870 <conn_supp_csr_ucfg>
10061d4c:	2801      	cmp	r0, #1
10061d4e:	950e      	str	r5, [sp, #56]	@ 0x38
10061d50:	d003      	beq.n	10061d5a <BlueNRG_Stack_Initialize_RAM_check+0x172>
10061d52:	9b15      	ldr	r3, [sp, #84]	@ 0x54
10061d54:	4618      	mov	r0, r3
10061d56:	3054      	adds	r0, #84	@ 0x54
10061d58:	e002      	b.n	10061d60 <BlueNRG_Stack_Initialize_RAM_check+0x178>
10061d5a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
10061d5c:	4618      	mov	r0, r3
10061d5e:	3048      	adds	r0, #72	@ 0x48
10061d60:	49ba      	ldr	r1, [pc, #744]	@ (1006204c <__arm_cp.0_3>)
10061d62:	31e4      	adds	r1, #228	@ 0xe4
10061d64:	7fb2      	ldrb	r2, [r6, #30]
10061d66:	434a      	muls	r2, r1
10061d68:	1810      	adds	r0, r2, r0
10061d6a:	4635      	mov	r5, r6
10061d6c:	461e      	mov	r6, r3
10061d6e:	3660      	adds	r6, #96	@ 0x60
10061d70:	7fe9      	ldrb	r1, [r5, #31]
10061d72:	4632      	mov	r2, r6
10061d74:	408a      	lsls	r2, r1
10061d76:	1887      	adds	r7, r0, r2
10061d78:	f7ed fd7a 	bl	1004f870 <conn_supp_csr_ucfg>
10061d7c:	2801      	cmp	r0, #1
10061d7e:	d102      	bne.n	10061d86 <BlueNRG_Stack_Initialize_RAM_check+0x19e>
10061d80:	7ae8      	ldrb	r0, [r5, #11]
10061d82:	4346      	muls	r6, r0
10061d84:	19bf      	adds	r7, r7, r6
10061d86:	462e      	mov	r6, r5
10061d88:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
10061d8a:	19e0      	adds	r0, r4, r7
10061d8c:	9014      	str	r0, [sp, #80]	@ 0x50
10061d8e:	f7fa fcbd 	bl	1005c70c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
10061d92:	4607      	mov	r7, r0
10061d94:	f7fa fcb8 	bl	1005c708 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10061d98:	4604      	mov	r4, r0
10061d9a:	403c      	ands	r4, r7
10061d9c:	f7ed fd68 	bl	1004f870 <conn_supp_csr_ucfg>
10061da0:	4020      	ands	r0, r4
10061da2:	2801      	cmp	r0, #1
10061da4:	d108      	bne.n	10061db8 <BlueNRG_Stack_Initialize_RAM_check+0x1d0>
10061da6:	7ef0      	ldrb	r0, [r6, #27]
10061da8:	1e40      	subs	r0, r0, #1
10061daa:	2103      	movs	r1, #3
10061dac:	4301      	orrs	r1, r0
10061dae:	7fb0      	ldrb	r0, [r6, #30]
10061db0:	22b0      	movs	r2, #176	@ 0xb0
10061db2:	4342      	muls	r2, r0
10061db4:	43d0      	mvns	r0, r2
10061db6:	1a45      	subs	r5, r0, r1
10061db8:	9814      	ldr	r0, [sp, #80]	@ 0x50
10061dba:	1944      	adds	r4, r0, r5
10061dbc:	f7fe fde2 	bl	10060984 <ext_adv_scan_enabled_ucfg_weak>
10061dc0:	4360      	muls	r0, r4
10061dc2:	49a2      	ldr	r1, [pc, #648]	@ (1006204c <__arm_cp.0_3>)
10061dc4:	1808      	adds	r0, r1, r0
10061dc6:	302c      	adds	r0, #44	@ 0x2c
10061dc8:	9d15      	ldr	r5, [sp, #84]	@ 0x54
10061dca:	9f16      	ldr	r7, [sp, #88]	@ 0x58
10061dcc:	9006      	str	r0, [sp, #24]
10061dce:	f7ed fd4f 	bl	1004f870 <conn_supp_csr_ucfg>
10061dd2:	2801      	cmp	r0, #1
10061dd4:	4639      	mov	r1, r7
10061dd6:	d109      	bne.n	10061dec <BlueNRG_Stack_Initialize_RAM_check+0x204>
10061dd8:	f7f8 fc14 	bl	1005a604 <l2c_cos_csr_ucfg_weak>
10061ddc:	2801      	cmp	r0, #1
10061dde:	4639      	mov	r1, r7
10061de0:	d104      	bne.n	10061dec <BlueNRG_Stack_Initialize_RAM_check+0x204>
10061de2:	2022      	movs	r0, #34	@ 0x22
10061de4:	5c30      	ldrb	r0, [r6, r0]
10061de6:	4629      	mov	r1, r5
10061de8:	3114      	adds	r1, #20
10061dea:	4341      	muls	r1, r0
10061dec:	9105      	str	r1, [sp, #20]
10061dee:	f7fa fc8b 	bl	1005c708 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10061df2:	2801      	cmp	r0, #1
10061df4:	4638      	mov	r0, r7
10061df6:	d121      	bne.n	10061e3c <BlueNRG_Stack_Initialize_RAM_check+0x254>
10061df8:	4894      	ldr	r0, [pc, #592]	@ (1006204c <__arm_cp.0_3>)
10061dfa:	30d4      	adds	r0, #212	@ 0xd4
10061dfc:	7eb1      	ldrb	r1, [r6, #26]
10061dfe:	4341      	muls	r1, r0
10061e00:	4628      	mov	r0, r5
10061e02:	3048      	adds	r0, #72	@ 0x48
10061e04:	7af2      	ldrb	r2, [r6, #11]
10061e06:	4342      	muls	r2, r0
10061e08:	1854      	adds	r4, r2, r1
10061e0a:	2700      	movs	r7, #0
10061e0c:	f7fa fc7e 	bl	1005c70c <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
10061e10:	2801      	cmp	r0, #1
10061e12:	d110      	bne.n	10061e36 <BlueNRG_Stack_Initialize_RAM_check+0x24e>
10061e14:	f7ed fd2c 	bl	1004f870 <conn_supp_csr_ucfg>
10061e18:	2801      	cmp	r0, #1
10061e1a:	d10c      	bne.n	10061e36 <BlueNRG_Stack_Initialize_RAM_check+0x24e>
10061e1c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10061e1e:	4610      	mov	r0, r2
10061e20:	3058      	adds	r0, #88	@ 0x58
10061e22:	7f31      	ldrb	r1, [r6, #28]
10061e24:	4341      	muls	r1, r0
10061e26:	4610      	mov	r0, r2
10061e28:	3060      	adds	r0, #96	@ 0x60
10061e2a:	7ef2      	ldrb	r2, [r6, #27]
10061e2c:	4342      	muls	r2, r0
10061e2e:	1850      	adds	r0, r2, r1
10061e30:	3884      	subs	r0, #132	@ 0x84
10061e32:	7eb7      	ldrb	r7, [r6, #26]
10061e34:	4347      	muls	r7, r0
10061e36:	19e0      	adds	r0, r4, r7
10061e38:	9d15      	ldr	r5, [sp, #84]	@ 0x54
10061e3a:	9f16      	ldr	r7, [sp, #88]	@ 0x58
10061e3c:	900e      	str	r0, [sp, #56]	@ 0x38
10061e3e:	f7f8 f9b9 	bl	1005a1b4 <cte_csr_ucfg_weak>
10061e42:	2801      	cmp	r0, #1
10061e44:	4638      	mov	r0, r7
10061e46:	d133      	bne.n	10061eb0 <BlueNRG_Stack_Initialize_RAM_check+0x2c8>
10061e48:	f7ed fd12 	bl	1004f870 <conn_supp_csr_ucfg>
10061e4c:	2801      	cmp	r0, #1
10061e4e:	d002      	beq.n	10061e56 <BlueNRG_Stack_Initialize_RAM_check+0x26e>
10061e50:	462f      	mov	r7, r5
10061e52:	375c      	adds	r7, #92	@ 0x5c
10061e54:	e004      	b.n	10061e60 <BlueNRG_Stack_Initialize_RAM_check+0x278>
10061e56:	4628      	mov	r0, r5
10061e58:	3060      	adds	r0, #96	@ 0x60
10061e5a:	7af7      	ldrb	r7, [r6, #11]
10061e5c:	4347      	muls	r7, r0
10061e5e:	3f0c      	subs	r7, #12
10061e60:	2523      	movs	r5, #35	@ 0x23
10061e62:	5d70      	ldrb	r0, [r6, r5]
10061e64:	2400      	movs	r4, #0
10061e66:	2800      	cmp	r0, #0
10061e68:	4620      	mov	r0, r4
10061e6a:	d005      	beq.n	10061e78 <BlueNRG_Stack_Initialize_RAM_check+0x290>
10061e6c:	f7ed fd00 	bl	1004f870 <conn_supp_csr_ucfg>
10061e70:	5d70      	ldrb	r0, [r6, r5]
10061e72:	4240      	negs	r0, r0
10061e74:	2103      	movs	r1, #3
10061e76:	4388      	bics	r0, r1
10061e78:	19c0      	adds	r0, r0, r7
10061e7a:	2724      	movs	r7, #36	@ 0x24
10061e7c:	5df1      	ldrb	r1, [r6, r7]
10061e7e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10061e80:	3264      	adds	r2, #100	@ 0x64
10061e82:	434a      	muls	r2, r1
10061e84:	1885      	adds	r5, r0, r2
10061e86:	f7f8 f9f7 	bl	1005a278 <scan_csr_ucfg_weak>
10061e8a:	2801      	cmp	r0, #1
10061e8c:	d10d      	bne.n	10061eaa <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
10061e8e:	f7fe fd79 	bl	10060984 <ext_adv_scan_enabled_ucfg_weak>
10061e92:	2801      	cmp	r0, #1
10061e94:	d109      	bne.n	10061eaa <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
10061e96:	f7fa fc37 	bl	1005c708 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10061e9a:	2801      	cmp	r0, #1
10061e9c:	d105      	bne.n	10061eaa <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
10061e9e:	5df4      	ldrb	r4, [r6, r7]
10061ea0:	2c00      	cmp	r4, #0
10061ea2:	9815      	ldr	r0, [sp, #84]	@ 0x54
10061ea4:	d001      	beq.n	10061eaa <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
10061ea6:	4604      	mov	r4, r0
10061ea8:	3450      	adds	r4, #80	@ 0x50
10061eaa:	1928      	adds	r0, r5, r4
10061eac:	9d15      	ldr	r5, [sp, #84]	@ 0x54
10061eae:	9f16      	ldr	r7, [sp, #88]	@ 0x58
10061eb0:	900d      	str	r0, [sp, #52]	@ 0x34
10061eb2:	f7ed fcdd 	bl	1004f870 <conn_supp_csr_ucfg>
10061eb6:	2801      	cmp	r0, #1
10061eb8:	4639      	mov	r1, r7
10061eba:	d109      	bne.n	10061ed0 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
10061ebc:	f7f8 f9d8 	bl	1005a270 <pcl_csr_ucfg_weak>
10061ec0:	2801      	cmp	r0, #1
10061ec2:	4639      	mov	r1, r7
10061ec4:	d104      	bne.n	10061ed0 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
10061ec6:	4628      	mov	r0, r5
10061ec8:	3048      	adds	r0, #72	@ 0x48
10061eca:	7af1      	ldrb	r1, [r6, #11]
10061ecc:	4341      	muls	r1, r0
10061ece:	3914      	subs	r1, #20
10061ed0:	910c      	str	r1, [sp, #48]	@ 0x30
10061ed2:	f7ed fccd 	bl	1004f870 <conn_supp_csr_ucfg>
10061ed6:	2801      	cmp	r0, #1
10061ed8:	463a      	mov	r2, r7
10061eda:	d108      	bne.n	10061eee <BlueNRG_Stack_Initialize_RAM_check+0x306>
10061edc:	f7f8 f875 	bl	10059fca <chc_csr_ucfg_weak>
10061ee0:	2801      	cmp	r0, #1
10061ee2:	463a      	mov	r2, r7
10061ee4:	d103      	bne.n	10061eee <BlueNRG_Stack_Initialize_RAM_check+0x306>
10061ee6:	4628      	mov	r0, r5
10061ee8:	304c      	adds	r0, #76	@ 0x4c
10061eea:	7af2      	ldrb	r2, [r6, #11]
10061eec:	4342      	muls	r2, r0
10061eee:	2026      	movs	r0, #38	@ 0x26
10061ef0:	5c31      	ldrb	r1, [r6, r0]
10061ef2:	2025      	movs	r0, #37	@ 0x25
10061ef4:	5c34      	ldrb	r4, [r6, r0]
10061ef6:	1863      	adds	r3, r4, r1
10061ef8:	2029      	movs	r0, #41	@ 0x29
10061efa:	5c30      	ldrb	r0, [r6, r0]
10061efc:	9304      	str	r3, [sp, #16]
10061efe:	2b00      	cmp	r3, #0
10061f00:	9014      	str	r0, [sp, #80]	@ 0x50
10061f02:	d010      	beq.n	10061f26 <BlueNRG_Stack_Initialize_RAM_check+0x33e>
10061f04:	2028      	movs	r0, #40	@ 0x28
10061f06:	5c33      	ldrb	r3, [r6, r0]
10061f08:	4628      	mov	r0, r5
10061f0a:	3060      	adds	r0, #96	@ 0x60
10061f0c:	4358      	muls	r0, r3
10061f0e:	38f8      	subs	r0, #248	@ 0xf8
10061f10:	4348      	muls	r0, r1
10061f12:	2327      	movs	r3, #39	@ 0x27
10061f14:	5cf3      	ldrb	r3, [r6, r3]
10061f16:	3554      	adds	r5, #84	@ 0x54
10061f18:	435d      	muls	r5, r3
10061f1a:	4b4c      	ldr	r3, [pc, #304]	@ (1006204c <__arm_cp.0_3>)
10061f1c:	195b      	adds	r3, r3, r5
10061f1e:	3348      	adds	r3, #72	@ 0x48
10061f20:	4363      	muls	r3, r4
10061f22:	181f      	adds	r7, r3, r0
10061f24:	9814      	ldr	r0, [sp, #80]	@ 0x50
10061f26:	2800      	cmp	r0, #0
10061f28:	9716      	str	r7, [sp, #88]	@ 0x58
10061f2a:	920b      	str	r2, [sp, #44]	@ 0x2c
10061f2c:	d00d      	beq.n	10061f4a <BlueNRG_Stack_Initialize_RAM_check+0x362>
10061f2e:	4602      	mov	r2, r0
10061f30:	202a      	movs	r0, #42	@ 0x2a
10061f32:	5c30      	ldrb	r0, [r6, r0]
10061f34:	4d45      	ldr	r5, [pc, #276]	@ (1006204c <__arm_cp.0_3>)
10061f36:	462b      	mov	r3, r5
10061f38:	33b0      	adds	r3, #176	@ 0xb0
10061f3a:	4343      	muls	r3, r0
10061f3c:	4637      	mov	r7, r6
10061f3e:	462e      	mov	r6, r5
10061f40:	36c8      	adds	r6, #200	@ 0xc8
10061f42:	4356      	muls	r6, r2
10061f44:	18f3      	adds	r3, r6, r3
10061f46:	3b48      	subs	r3, #72	@ 0x48
10061f48:	e003      	b.n	10061f52 <BlueNRG_Stack_Initialize_RAM_check+0x36a>
10061f4a:	202a      	movs	r0, #42	@ 0x2a
10061f4c:	5c30      	ldrb	r0, [r6, r0]
10061f4e:	2300      	movs	r3, #0
10061f50:	4637      	mov	r7, r6
10061f52:	2628      	movs	r6, #40	@ 0x28
10061f54:	5dbe      	ldrb	r6, [r7, r6]
10061f56:	4371      	muls	r1, r6
10061f58:	1809      	adds	r1, r1, r0
10061f5a:	2627      	movs	r6, #39	@ 0x27
10061f5c:	463d      	mov	r5, r7
10061f5e:	5dbe      	ldrb	r6, [r7, r6]
10061f60:	4374      	muls	r4, r6
10061f62:	1824      	adds	r4, r4, r0
10061f64:	1860      	adds	r0, r4, r1
10061f66:	d013      	beq.n	10061f90 <__arm_cp.0_6+0x4>
10061f68:	9f15      	ldr	r7, [sp, #84]	@ 0x54
10061f6a:	463e      	mov	r6, r7
10061f6c:	364c      	adds	r6, #76	@ 0x4c
10061f6e:	4366      	muls	r6, r4
10061f70:	463c      	mov	r4, r7
10061f72:	3434      	adds	r4, #52	@ 0x34
10061f74:	434c      	muls	r4, r1
10061f76:	19a1      	adds	r1, r4, r6
10061f78:	463c      	mov	r4, r7
10061f7a:	345c      	adds	r4, #92	@ 0x5c
10061f7c:	4344      	muls	r4, r0
10061f7e:	190c      	adds	r4, r1, r4
10061f80:	3c14      	subs	r4, #20
10061f82:	e007      	b.n	10061f94 <__arm_cp.0_6+0x8>

10061f84 <__arm_cp.0_4>:
10061f84:	fffffc00 	.word	0xfffffc00

10061f88 <__arm_cp.0_5>:
10061f88:	2000296c 	.word	0x2000296c

10061f8c <__arm_cp.0_6>:
10061f8c:	fffffd70 	.word	0xfffffd70
10061f90:	2400      	movs	r4, #0
10061f92:	9f15      	ldr	r7, [sp, #84]	@ 0x54
10061f94:	9903      	ldr	r1, [sp, #12]
10061f96:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10061f98:	9811      	ldr	r0, [sp, #68]	@ 0x44
10061f9a:	1808      	adds	r0, r1, r0
10061f9c:	4639      	mov	r1, r7
10061f9e:	3144      	adds	r1, #68	@ 0x44
10061fa0:	4371      	muls	r1, r6
10061fa2:	1840      	adds	r0, r0, r1
10061fa4:	9909      	ldr	r1, [sp, #36]	@ 0x24
10061fa6:	1840      	adds	r0, r0, r1
10061fa8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
10061faa:	1840      	adds	r0, r0, r1
10061fac:	9912      	ldr	r1, [sp, #72]	@ 0x48
10061fae:	1841      	adds	r1, r0, r1
10061fb0:	4638      	mov	r0, r7
10061fb2:	3060      	adds	r0, #96	@ 0x60
10061fb4:	4606      	mov	r6, r0
10061fb6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
10061fb8:	4096      	lsls	r6, r2
10061fba:	1989      	adds	r1, r1, r6
10061fbc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
10061fbe:	2a01      	cmp	r2, #1
10061fc0:	d106      	bne.n	10061fd0 <__arm_cp.0_6+0x44>
10061fc2:	4e22      	ldr	r6, [pc, #136]	@ (1006204c <__arm_cp.0_3>)
10061fc4:	9a00      	ldr	r2, [sp, #0]
10061fc6:	4356      	muls	r6, r2
10061fc8:	1871      	adds	r1, r6, r1
10061fca:	2645      	movs	r6, #69	@ 0x45
10061fcc:	00b6      	lsls	r6, r6, #2
10061fce:	1989      	adds	r1, r1, r6
10061fd0:	462e      	mov	r6, r5
10061fd2:	9d07      	ldr	r5, [sp, #28]
10061fd4:	9a05      	ldr	r2, [sp, #20]
10061fd6:	2d01      	cmp	r5, #1
10061fd8:	d102      	bne.n	10061fe0 <__arm_cp.0_6+0x54>
10061fda:	9d01      	ldr	r5, [sp, #4]
10061fdc:	40a8      	lsls	r0, r5
10061fde:	1809      	adds	r1, r1, r0
10061fe0:	9808      	ldr	r0, [sp, #32]
10061fe2:	2801      	cmp	r0, #1
10061fe4:	d105      	bne.n	10061ff2 <__arm_cp.0_6+0x66>
10061fe6:	4638      	mov	r0, r7
10061fe8:	3018      	adds	r0, #24
10061fea:	9d02      	ldr	r5, [sp, #8]
10061fec:	40a8      	lsls	r0, r5
10061fee:	1841      	adds	r1, r0, r1
10061ff0:	3970      	subs	r1, #112	@ 0x70
10061ff2:	9806      	ldr	r0, [sp, #24]
10061ff4:	9d04      	ldr	r5, [sp, #16]
10061ff6:	1808      	adds	r0, r1, r0
10061ff8:	1880      	adds	r0, r0, r2
10061ffa:	990e      	ldr	r1, [sp, #56]	@ 0x38
10061ffc:	1840      	adds	r0, r0, r1
10061ffe:	990d      	ldr	r1, [sp, #52]	@ 0x34
10062000:	1840      	adds	r0, r0, r1
10062002:	990c      	ldr	r1, [sp, #48]	@ 0x30
10062004:	1840      	adds	r0, r0, r1
10062006:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10062008:	1840      	adds	r0, r0, r1
1006200a:	9914      	ldr	r1, [sp, #80]	@ 0x50
1006200c:	42cd      	cmn	r5, r1
1006200e:	d001      	beq.n	10062014 <__arm_cp.0_6+0x88>
10062010:	1838      	adds	r0, r7, r0
10062012:	3058      	adds	r0, #88	@ 0x58
10062014:	9916      	ldr	r1, [sp, #88]	@ 0x58
10062016:	1840      	adds	r0, r0, r1
10062018:	18c0      	adds	r0, r0, r3
1006201a:	1904      	adds	r4, r0, r4
1006201c:	f7f3 fed3 	bl	10055dc6 <log_csr_ucfg_weak>
10062020:	2801      	cmp	r0, #1
10062022:	d100      	bne.n	10062026 <__arm_cp.0_6+0x9a>
10062024:	19e4      	adds	r4, r4, r7
10062026:	6870      	ldr	r0, [r6, #4]
10062028:	1820      	adds	r0, r4, r0
1006202a:	2103      	movs	r1, #3
1006202c:	43c9      	mvns	r1, r1
1006202e:	8df2      	ldrh	r2, [r6, #46]	@ 0x2e
10062030:	1cd2      	adds	r2, r2, #3
10062032:	400a      	ands	r2, r1
10062034:	8db3      	ldrh	r3, [r6, #44]	@ 0x2c
10062036:	1cdb      	adds	r3, r3, #3
10062038:	400b      	ands	r3, r1
1006203a:	189a      	adds	r2, r3, r2
1006203c:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
1006203e:	1cdb      	adds	r3, r3, #3
10062040:	400b      	ands	r3, r1
10062042:	18d1      	adds	r1, r2, r3
10062044:	1a40      	subs	r0, r0, r1
10062046:	b017      	add	sp, #92	@ 0x5c
10062048:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006204a:	46c0      	nop			@ (mov r8, r8)

1006204c <__arm_cp.0_3>:
1006204c:	fffffe90 	.word	0xfffffe90

10062050 <sdb_sap_get_security_records_count>:
10062050:	b580      	push	{r7, lr}
10062052:	f001 f996 	bl	10063382 <nvm_sec_db_get_record_count>
10062056:	bd80      	pop	{r7, pc}

10062058 <sdb_sap_add_security_record>:
10062058:	b5b0      	push	{r4, r5, r7, lr}
1006205a:	b094      	sub	sp, #80	@ 0x50
1006205c:	4604      	mov	r4, r0
1006205e:	7841      	ldrb	r1, [r0, #1]
10062060:	2501      	movs	r5, #1
10062062:	4029      	ands	r1, r5
10062064:	303e      	adds	r0, #62	@ 0x3e
10062066:	466a      	mov	r2, sp
10062068:	f000 f819 	bl	1006209e <sdb_sap_read_security_record>
1006206c:	2800      	cmp	r0, #0
1006206e:	d10c      	bne.n	1006208a <sdb_sap_add_security_record+0x32>
10062070:	4669      	mov	r1, sp
10062072:	2250      	movs	r2, #80	@ 0x50
10062074:	4620      	mov	r0, r4
10062076:	f7f1 f97d 	bl	10053374 <BLEPLAT_MemCmp>
1006207a:	2800      	cmp	r0, #0
1006207c:	d008      	beq.n	10062090 <sdb_sap_add_security_record+0x38>
1006207e:	4669      	mov	r1, sp
10062080:	7848      	ldrb	r0, [r1, #1]
10062082:	4028      	ands	r0, r5
10062084:	313e      	adds	r1, #62	@ 0x3e
10062086:	f000 f83b 	bl	10062100 <sdb_remove_security_record_by_address>
1006208a:	7860      	ldrb	r0, [r4, #1]
1006208c:	2810      	cmp	r0, #16
1006208e:	d201      	bcs.n	10062094 <sdb_sap_add_security_record+0x3c>
10062090:	2000      	movs	r0, #0
10062092:	e002      	b.n	1006209a <sdb_sap_add_security_record+0x42>
10062094:	4620      	mov	r0, r4
10062096:	f001 f969 	bl	1006336c <nvm_sec_db_add_record>
1006209a:	b014      	add	sp, #80	@ 0x50
1006209c:	bdb0      	pop	{r4, r5, r7, pc}

1006209e <sdb_sap_read_security_record>:
1006209e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100620a0:	4614      	mov	r4, r2
100620a2:	4606      	mov	r6, r0
100620a4:	2501      	movs	r5, #1
100620a6:	9102      	str	r1, [sp, #8]
100620a8:	2901      	cmp	r1, #1
100620aa:	d105      	bne.n	100620b8 <sdb_sap_read_security_record+0x1a>
100620ac:	7970      	ldrb	r0, [r6, #5]
100620ae:	21c0      	movs	r1, #192	@ 0xc0
100620b0:	4001      	ands	r1, r0
100620b2:	2940      	cmp	r1, #64	@ 0x40
100620b4:	d100      	bne.n	100620b8 <sdb_sap_read_security_record+0x1a>
100620b6:	2500      	movs	r5, #0
100620b8:	f001 f940 	bl	1006333c <nvm_sec_db_read_init>
100620bc:	4620      	mov	r0, r4
100620be:	303e      	adds	r0, #62	@ 0x3e
100620c0:	9001      	str	r0, [sp, #4]
100620c2:	4627      	mov	r7, r4
100620c4:	371e      	adds	r7, #30
100620c6:	4620      	mov	r0, r4
100620c8:	f001 f93e 	bl	10063348 <nvm_sec_db_read_next_record>
100620cc:	2800      	cmp	r0, #0
100620ce:	d115      	bne.n	100620fc <sdb_sap_read_security_record+0x5e>
100620d0:	2d00      	cmp	r5, #0
100620d2:	d00b      	beq.n	100620ec <sdb_sap_read_security_record+0x4e>
100620d4:	7860      	ldrb	r0, [r4, #1]
100620d6:	2101      	movs	r1, #1
100620d8:	4001      	ands	r1, r0
100620da:	9802      	ldr	r0, [sp, #8]
100620dc:	4281      	cmp	r1, r0
100620de:	d1f2      	bne.n	100620c6 <sdb_sap_read_security_record+0x28>
100620e0:	2206      	movs	r2, #6
100620e2:	9801      	ldr	r0, [sp, #4]
100620e4:	4631      	mov	r1, r6
100620e6:	f7f1 f945 	bl	10053374 <BLEPLAT_MemCmp>
100620ea:	e003      	b.n	100620f4 <sdb_sap_read_security_record+0x56>
100620ec:	4630      	mov	r0, r6
100620ee:	4639      	mov	r1, r7
100620f0:	f000 f980 	bl	100623f4 <smp_sap_crt_resolve_rpa>
100620f4:	2800      	cmp	r0, #0
100620f6:	d1e6      	bne.n	100620c6 <sdb_sap_read_security_record+0x28>
100620f8:	2000      	movs	r0, #0
100620fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100620fc:	20b3      	movs	r0, #179	@ 0xb3
100620fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10062100 <sdb_remove_security_record_by_address>:
10062100:	b5f0      	push	{r4, r5, r6, r7, lr}
10062102:	b095      	sub	sp, #84	@ 0x54
10062104:	460c      	mov	r4, r1
10062106:	4605      	mov	r5, r0
10062108:	f001 f918 	bl	1006333c <nvm_sec_db_read_init>
1006210c:	ae01      	add	r6, sp, #4
1006210e:	363e      	adds	r6, #62	@ 0x3e
10062110:	27b3      	movs	r7, #179	@ 0xb3
10062112:	a801      	add	r0, sp, #4
10062114:	f001 f918 	bl	10063348 <nvm_sec_db_read_next_record>
10062118:	2800      	cmp	r0, #0
1006211a:	d110      	bne.n	1006213e <sdb_remove_security_record_by_address+0x3e>
1006211c:	2206      	movs	r2, #6
1006211e:	4630      	mov	r0, r6
10062120:	4621      	mov	r1, r4
10062122:	f7f1 f927 	bl	10053374 <BLEPLAT_MemCmp>
10062126:	a901      	add	r1, sp, #4
10062128:	7849      	ldrb	r1, [r1, #1]
1006212a:	2201      	movs	r2, #1
1006212c:	400a      	ands	r2, r1
1006212e:	42aa      	cmp	r2, r5
10062130:	d1ef      	bne.n	10062112 <sdb_remove_security_record_by_address+0x12>
10062132:	2800      	cmp	r0, #0
10062134:	d1ed      	bne.n	10062112 <sdb_remove_security_record_by_address+0x12>
10062136:	f001 f937 	bl	100633a8 <nvm_discard_current_record>
1006213a:	2700      	movs	r7, #0
1006213c:	e7e9      	b.n	10062112 <sdb_remove_security_record_by_address+0x12>
1006213e:	b2f8      	uxtb	r0, r7
10062140:	b015      	add	sp, #84	@ 0x54
10062142:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062144 <sdb_sap_read_security_record_sequential>:
10062144:	b5b0      	push	{r4, r5, r7, lr}
10062146:	4604      	mov	r4, r0
10062148:	4d07      	ldr	r5, [pc, #28]	@ (10062168 <__arm_cp.5_0>)
1006214a:	7828      	ldrb	r0, [r5, #0]
1006214c:	2800      	cmp	r0, #0
1006214e:	d103      	bne.n	10062158 <sdb_sap_read_security_record_sequential+0x14>
10062150:	f001 f8f4 	bl	1006333c <nvm_sec_db_read_init>
10062154:	2001      	movs	r0, #1
10062156:	7028      	strb	r0, [r5, #0]
10062158:	4620      	mov	r0, r4
1006215a:	f001 f8f5 	bl	10063348 <nvm_sec_db_read_next_record>
1006215e:	2800      	cmp	r0, #0
10062160:	d001      	beq.n	10062166 <sdb_sap_read_security_record_sequential+0x22>
10062162:	2100      	movs	r1, #0
10062164:	7029      	strb	r1, [r5, #0]
10062166:	bdb0      	pop	{r4, r5, r7, pc}

10062168 <__arm_cp.5_0>:
10062168:	200029a0 	.word	0x200029a0

1006216c <sdb_sap_del_bonded_device>:
1006216c:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1006216e:	460d      	mov	r5, r1
10062170:	4604      	mov	r4, r0
10062172:	aa01      	add	r2, sp, #4
10062174:	4608      	mov	r0, r1
10062176:	4621      	mov	r1, r4
10062178:	f000 f87f 	bl	1006227a <sdb_gatt_search_record>
1006217c:	2800      	cmp	r0, #0
1006217e:	d101      	bne.n	10062184 <sdb_sap_del_bonded_device+0x18>
10062180:	f001 f912 	bl	100633a8 <nvm_discard_current_record>
10062184:	4628      	mov	r0, r5
10062186:	4621      	mov	r1, r4
10062188:	f7ff ffba 	bl	10062100 <sdb_remove_security_record_by_address>
1006218c:	b004      	add	sp, #16
1006218e:	bdb0      	pop	{r4, r5, r7, pc}

10062190 <sdb_sap_read_security_record_matching>:
10062190:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10062192:	4614      	mov	r4, r2
10062194:	9101      	str	r1, [sp, #4]
10062196:	4606      	mov	r6, r0
10062198:	f001 f8d0 	bl	1006333c <nvm_sec_db_read_init>
1006219c:	4627      	mov	r7, r4
1006219e:	3744      	adds	r7, #68	@ 0x44
100621a0:	4620      	mov	r0, r4
100621a2:	f001 f8d1 	bl	10063348 <nvm_sec_db_read_next_record>
100621a6:	2800      	cmp	r0, #0
100621a8:	d111      	bne.n	100621ce <sdb_sap_read_security_record_matching+0x3e>
100621aa:	7860      	ldrb	r0, [r4, #1]
100621ac:	06c0      	lsls	r0, r0, #27
100621ae:	d5f7      	bpl.n	100621a0 <sdb_sap_read_security_record_matching+0x10>
100621b0:	ad02      	add	r5, sp, #8
100621b2:	4638      	mov	r0, r7
100621b4:	9901      	ldr	r1, [sp, #4]
100621b6:	462a      	mov	r2, r5
100621b8:	f000 f87a 	bl	100622b0 <smp_sap_crt_generate_ediv>
100621bc:	2202      	movs	r2, #2
100621be:	4628      	mov	r0, r5
100621c0:	4631      	mov	r1, r6
100621c2:	f7f1 f8d7 	bl	10053374 <BLEPLAT_MemCmp>
100621c6:	2800      	cmp	r0, #0
100621c8:	d1ea      	bne.n	100621a0 <sdb_sap_read_security_record_matching+0x10>
100621ca:	2000      	movs	r0, #0
100621cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100621ce:	2081      	movs	r0, #129	@ 0x81
100621d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100621d2 <SDB_sap_write_peer_bonded_gatt_client_data>:
100621d2:	b5f0      	push	{r4, r5, r6, r7, lr}
100621d4:	b085      	sub	sp, #20
100621d6:	461e      	mov	r6, r3
100621d8:	4617      	mov	r7, r2
100621da:	460d      	mov	r5, r1
100621dc:	4604      	mov	r4, r0
100621de:	aa02      	add	r2, sp, #8
100621e0:	4608      	mov	r0, r1
100621e2:	4621      	mov	r1, r4
100621e4:	f000 f849 	bl	1006227a <sdb_gatt_search_record>
100621e8:	2800      	cmp	r0, #0
100621ea:	d10b      	bne.n	10062204 <SDB_sap_write_peer_bonded_gatt_client_data+0x32>
100621ec:	9804      	ldr	r0, [sp, #16]
100621ee:	42b8      	cmp	r0, r7
100621f0:	d106      	bne.n	10062200 <SDB_sap_write_peer_bonded_gatt_client_data+0x2e>
100621f2:	b2ba      	uxth	r2, r7
100621f4:	200c      	movs	r0, #12
100621f6:	4631      	mov	r1, r6
100621f8:	f7f1 f84c 	bl	10053294 <BLEPLAT_NvmCompare>
100621fc:	2800      	cmp	r0, #0
100621fe:	d016      	beq.n	1006222e <SDB_sap_write_peer_bonded_gatt_client_data+0x5c>
10062200:	f001 f8d2 	bl	100633a8 <nvm_discard_current_record>
10062204:	9601      	str	r6, [sp, #4]
10062206:	ae02      	add	r6, sp, #8
10062208:	7035      	strb	r5, [r6, #0]
1006220a:	1c70      	adds	r0, r6, #1
1006220c:	2206      	movs	r2, #6
1006220e:	4621      	mov	r1, r4
10062210:	f7f1 f890 	bl	10053334 <BLEPLAT_MemCpy>
10062214:	9704      	str	r7, [sp, #16]
10062216:	4630      	mov	r0, r6
10062218:	9901      	ldr	r1, [sp, #4]
1006221a:	f001 f882 	bl	10063322 <nvm_gatt_db_update_record>
1006221e:	2800      	cmp	r0, #0
10062220:	d005      	beq.n	1006222e <SDB_sap_write_peer_bonded_gatt_client_data+0x5c>
10062222:	4606      	mov	r6, r0
10062224:	4628      	mov	r0, r5
10062226:	4621      	mov	r1, r4
10062228:	f7ff ff6a 	bl	10062100 <sdb_remove_security_record_by_address>
1006222c:	e000      	b.n	10062230 <SDB_sap_write_peer_bonded_gatt_client_data+0x5e>
1006222e:	2600      	movs	r6, #0
10062230:	4630      	mov	r0, r6
10062232:	b005      	add	sp, #20
10062234:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062236 <SDB_sap_read_peer_bonded_gatt_client_data>:
10062236:	b5b0      	push	{r4, r5, r7, lr}
10062238:	b098      	sub	sp, #96	@ 0x60
1006223a:	461c      	mov	r4, r3
1006223c:	4615      	mov	r5, r2
1006223e:	aa01      	add	r2, sp, #4
10062240:	f7ff ff2d 	bl	1006209e <sdb_sap_read_security_record>
10062244:	2800      	cmp	r0, #0
10062246:	d116      	bne.n	10062276 <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
10062248:	a901      	add	r1, sp, #4
1006224a:	784a      	ldrb	r2, [r1, #1]
1006224c:	2001      	movs	r0, #1
1006224e:	4010      	ands	r0, r2
10062250:	313e      	adds	r1, #62	@ 0x3e
10062252:	aa15      	add	r2, sp, #84	@ 0x54
10062254:	f000 f811 	bl	1006227a <sdb_gatt_search_record>
10062258:	2800      	cmp	r0, #0
1006225a:	d001      	beq.n	10062260 <SDB_sap_read_peer_bonded_gatt_client_data+0x2a>
1006225c:	20b3      	movs	r0, #179	@ 0xb3
1006225e:	e00a      	b.n	10062276 <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
10062260:	6829      	ldr	r1, [r5, #0]
10062262:	9817      	ldr	r0, [sp, #92]	@ 0x5c
10062264:	4288      	cmp	r0, r1
10062266:	d901      	bls.n	1006226c <SDB_sap_read_peer_bonded_gatt_client_data+0x36>
10062268:	2087      	movs	r0, #135	@ 0x87
1006226a:	e004      	b.n	10062276 <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
1006226c:	6028      	str	r0, [r5, #0]
1006226e:	b281      	uxth	r1, r0
10062270:	4620      	mov	r0, r4
10062272:	f001 f84b 	bl	1006330c <nvm_gatt_db_read_full_current_record>
10062276:	b018      	add	sp, #96	@ 0x60
10062278:	bdb0      	pop	{r4, r5, r7, pc}

1006227a <sdb_gatt_search_record>:
1006227a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006227c:	4614      	mov	r4, r2
1006227e:	460d      	mov	r5, r1
10062280:	4606      	mov	r6, r0
10062282:	f001 f81d 	bl	100632c0 <nvm_gatt_db_read_init>
10062286:	1c67      	adds	r7, r4, #1
10062288:	4620      	mov	r0, r4
1006228a:	f001 f81f 	bl	100632cc <nvm_gatt_db_read_next_record>
1006228e:	2800      	cmp	r0, #0
10062290:	d10b      	bne.n	100622aa <sdb_gatt_search_record+0x30>
10062292:	2206      	movs	r2, #6
10062294:	4628      	mov	r0, r5
10062296:	4639      	mov	r1, r7
10062298:	f7f1 f86c 	bl	10053374 <BLEPLAT_MemCmp>
1006229c:	2800      	cmp	r0, #0
1006229e:	d1f3      	bne.n	10062288 <sdb_gatt_search_record+0xe>
100622a0:	7820      	ldrb	r0, [r4, #0]
100622a2:	42b0      	cmp	r0, r6
100622a4:	d1f0      	bne.n	10062288 <sdb_gatt_search_record+0xe>
100622a6:	2000      	movs	r0, #0
100622a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100622aa:	20b3      	movs	r0, #179	@ 0xb3
100622ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100622b0 <smp_sap_crt_generate_ediv>:
100622b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100622b2:	b091      	sub	sp, #68	@ 0x44
100622b4:	9201      	str	r2, [sp, #4]
100622b6:	9100      	str	r1, [sp, #0]
100622b8:	4605      	mov	r5, r0
100622ba:	a908      	add	r1, sp, #32
100622bc:	2003      	movs	r0, #3
100622be:	8008      	strh	r0, [r1, #0]
100622c0:	aa07      	add	r2, sp, #28
100622c2:	2400      	movs	r4, #0
100622c4:	8014      	strh	r4, [r2, #0]
100622c6:	4814      	ldr	r0, [pc, #80]	@ (10062318 <__arm_cp.0_0>)
100622c8:	6800      	ldr	r0, [r0, #0]
100622ca:	3018      	adds	r0, #24
100622cc:	af03      	add	r7, sp, #12
100622ce:	463b      	mov	r3, r7
100622d0:	f000 f824 	bl	1006231c <smp_crt_diversify>
100622d4:	ae0d      	add	r6, sp, #52	@ 0x34
100622d6:	2210      	movs	r2, #16
100622d8:	4630      	mov	r0, r6
100622da:	4621      	mov	r1, r4
100622dc:	f7f1 f83a 	bl	10053354 <BLEPLAT_MemSet>
100622e0:	2208      	movs	r2, #8
100622e2:	4630      	mov	r0, r6
100622e4:	9900      	ldr	r1, [sp, #0]
100622e6:	f7f1 f825 	bl	10053334 <BLEPLAT_MemCpy>
100622ea:	ac09      	add	r4, sp, #36	@ 0x24
100622ec:	4638      	mov	r0, r7
100622ee:	4631      	mov	r1, r6
100622f0:	4622      	mov	r2, r4
100622f2:	f7f7 ff61 	bl	1005a1b8 <hci_le_encrypt>
100622f6:	ae02      	add	r6, sp, #8
100622f8:	2202      	movs	r2, #2
100622fa:	4630      	mov	r0, r6
100622fc:	4621      	mov	r1, r4
100622fe:	f7f1 f819 	bl	10053334 <BLEPLAT_MemCpy>
10062302:	7828      	ldrb	r0, [r5, #0]
10062304:	9902      	ldr	r1, [sp, #8]
10062306:	4041      	eors	r1, r0
10062308:	9a01      	ldr	r2, [sp, #4]
1006230a:	7011      	strb	r1, [r2, #0]
1006230c:	7870      	ldrb	r0, [r6, #1]
1006230e:	7869      	ldrb	r1, [r5, #1]
10062310:	4041      	eors	r1, r0
10062312:	7051      	strb	r1, [r2, #1]
10062314:	b011      	add	sp, #68	@ 0x44
10062316:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062318 <__arm_cp.0_0>:
10062318:	20002904 	.word	0x20002904

1006231c <smp_crt_diversify>:
1006231c:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1006231e:	780d      	ldrb	r5, [r1, #0]
10062320:	466c      	mov	r4, sp
10062322:	7025      	strb	r5, [r4, #0]
10062324:	7849      	ldrb	r1, [r1, #1]
10062326:	7061      	strb	r1, [r4, #1]
10062328:	7811      	ldrb	r1, [r2, #0]
1006232a:	70a1      	strb	r1, [r4, #2]
1006232c:	7851      	ldrb	r1, [r2, #1]
1006232e:	70e1      	strb	r1, [r4, #3]
10062330:	2100      	movs	r1, #0
10062332:	9103      	str	r1, [sp, #12]
10062334:	9102      	str	r1, [sp, #8]
10062336:	9101      	str	r1, [sp, #4]
10062338:	4621      	mov	r1, r4
1006233a:	461a      	mov	r2, r3
1006233c:	f7f7 ff3c 	bl	1005a1b8 <hci_le_encrypt>
10062340:	bdbf      	pop	{r0, r1, r2, r3, r4, r5, r7, pc}
	...

10062344 <smp_sap_crt_generate_local_irk>:
10062344:	b5e0      	push	{r5, r6, r7, lr}
10062346:	4603      	mov	r3, r0
10062348:	a901      	add	r1, sp, #4
1006234a:	2001      	movs	r0, #1
1006234c:	8008      	strh	r0, [r1, #0]
1006234e:	466a      	mov	r2, sp
10062350:	2000      	movs	r0, #0
10062352:	8010      	strh	r0, [r2, #0]
10062354:	4802      	ldr	r0, [pc, #8]	@ (10062360 <__arm_cp.2_0>)
10062356:	6800      	ldr	r0, [r0, #0]
10062358:	3018      	adds	r0, #24
1006235a:	f7ff ffdf 	bl	1006231c <smp_crt_diversify>
1006235e:	bd8c      	pop	{r2, r3, r7, pc}

10062360 <__arm_cp.2_0>:
10062360:	20002904 	.word	0x20002904

10062364 <smp_sap_crt_generate_rpa>:
10062364:	b5f0      	push	{r4, r5, r6, r7, lr}
10062366:	b087      	sub	sp, #28
10062368:	9000      	str	r0, [sp, #0]
1006236a:	ae03      	add	r6, sp, #12
1006236c:	4630      	mov	r0, r6
1006236e:	f7ff ffe9 	bl	10062344 <smp_sap_crt_generate_local_irk>
10062372:	2700      	movs	r7, #0
10062374:	4638      	mov	r0, r7
10062376:	f001 fb8d 	bl	10063a94 <Hal_Get_Random_Number>
1006237a:	0a01      	lsrs	r1, r0, #8
1006237c:	ad02      	add	r5, sp, #8
1006237e:	7069      	strb	r1, [r5, #1]
10062380:	243f      	movs	r4, #63	@ 0x3f
10062382:	4004      	ands	r4, r0
10062384:	3440      	adds	r4, #64	@ 0x40
10062386:	4638      	mov	r0, r7
10062388:	f001 fb84 	bl	10063a94 <Hal_Get_Random_Number>
1006238c:	70ac      	strb	r4, [r5, #2]
1006238e:	7028      	strb	r0, [r5, #0]
10062390:	af01      	add	r7, sp, #4
10062392:	4630      	mov	r0, r6
10062394:	4629      	mov	r1, r5
10062396:	463a      	mov	r2, r7
10062398:	f000 f80e 	bl	100623b8 <smp_crt_calculate_hash>
1006239c:	2603      	movs	r6, #3
1006239e:	9c00      	ldr	r4, [sp, #0]
100623a0:	4620      	mov	r0, r4
100623a2:	4639      	mov	r1, r7
100623a4:	4632      	mov	r2, r6
100623a6:	f7f0 ffc5 	bl	10053334 <BLEPLAT_MemCpy>
100623aa:	1ce0      	adds	r0, r4, #3
100623ac:	4629      	mov	r1, r5
100623ae:	4632      	mov	r2, r6
100623b0:	f7f0 ffc0 	bl	10053334 <BLEPLAT_MemCpy>
100623b4:	b007      	add	sp, #28
100623b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100623b8 <smp_crt_calculate_hash>:
100623b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100623ba:	b089      	sub	sp, #36	@ 0x24
100623bc:	9200      	str	r2, [sp, #0]
100623be:	460f      	mov	r7, r1
100623c0:	4605      	mov	r5, r0
100623c2:	ae05      	add	r6, sp, #20
100623c4:	2100      	movs	r1, #0
100623c6:	2210      	movs	r2, #16
100623c8:	4630      	mov	r0, r6
100623ca:	f7f0 ffc3 	bl	10053354 <BLEPLAT_MemSet>
100623ce:	2403      	movs	r4, #3
100623d0:	4630      	mov	r0, r6
100623d2:	4639      	mov	r1, r7
100623d4:	4622      	mov	r2, r4
100623d6:	f7f0 ffad 	bl	10053334 <BLEPLAT_MemCpy>
100623da:	af01      	add	r7, sp, #4
100623dc:	4628      	mov	r0, r5
100623de:	4631      	mov	r1, r6
100623e0:	463a      	mov	r2, r7
100623e2:	f7f7 fee9 	bl	1005a1b8 <hci_le_encrypt>
100623e6:	9800      	ldr	r0, [sp, #0]
100623e8:	4639      	mov	r1, r7
100623ea:	4622      	mov	r2, r4
100623ec:	f7f0 ffa2 	bl	10053334 <BLEPLAT_MemCpy>
100623f0:	b009      	add	sp, #36	@ 0x24
100623f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100623f4 <smp_sap_crt_resolve_rpa>:
100623f4:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100623f6:	460a      	mov	r2, r1
100623f8:	4604      	mov	r4, r0
100623fa:	1cc1      	adds	r1, r0, #3
100623fc:	ad01      	add	r5, sp, #4
100623fe:	4610      	mov	r0, r2
10062400:	462a      	mov	r2, r5
10062402:	f7ff ffd9 	bl	100623b8 <smp_crt_calculate_hash>
10062406:	2203      	movs	r2, #3
10062408:	4628      	mov	r0, r5
1006240a:	4621      	mov	r1, r4
1006240c:	f7f0 ffb2 	bl	10053374 <BLEPLAT_MemCmp>
10062410:	2800      	cmp	r0, #0
10062412:	d000      	beq.n	10062416 <smp_sap_crt_resolve_rpa+0x22>
10062414:	2081      	movs	r0, #129	@ 0x81
10062416:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10062418 <smp_crt_s1_generate_stk>:
10062418:	b5f0      	push	{r4, r5, r6, r7, lr}
1006241a:	b085      	sub	sp, #20
1006241c:	9300      	str	r3, [sp, #0]
1006241e:	4617      	mov	r7, r2
10062420:	4605      	mov	r5, r0
10062422:	ae01      	add	r6, sp, #4
10062424:	4630      	mov	r0, r6
10062426:	3008      	adds	r0, #8
10062428:	2408      	movs	r4, #8
1006242a:	4622      	mov	r2, r4
1006242c:	f7f0 ff82 	bl	10053334 <BLEPLAT_MemCpy>
10062430:	4630      	mov	r0, r6
10062432:	4639      	mov	r1, r7
10062434:	4622      	mov	r2, r4
10062436:	f7f0 ff7d 	bl	10053334 <BLEPLAT_MemCpy>
1006243a:	4628      	mov	r0, r5
1006243c:	4631      	mov	r1, r6
1006243e:	9a00      	ldr	r2, [sp, #0]
10062440:	f7f7 feba 	bl	1005a1b8 <hci_le_encrypt>
10062444:	b005      	add	sp, #20
10062446:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062448 <smp_crt_generate_csrk>:
10062448:	b5e0      	push	{r5, r6, r7, lr}
1006244a:	460b      	mov	r3, r1
1006244c:	4601      	mov	r1, r0
1006244e:	aa01      	add	r2, sp, #4
10062450:	2001      	movs	r0, #1
10062452:	8010      	strh	r0, [r2, #0]
10062454:	4802      	ldr	r0, [pc, #8]	@ (10062460 <__arm_cp.7_0>)
10062456:	6800      	ldr	r0, [r0, #0]
10062458:	3008      	adds	r0, #8
1006245a:	f7ff ff5f 	bl	1006231c <smp_crt_diversify>
1006245e:	bd8c      	pop	{r2, r3, r7, pc}

10062460 <__arm_cp.7_0>:
10062460:	20002904 	.word	0x20002904

10062464 <smp_crt_generate_cmac_tag>:
10062464:	b5f0      	push	{r4, r5, r6, r7, lr}
10062466:	b095      	sub	sp, #84	@ 0x54
10062468:	9301      	str	r3, [sp, #4]
1006246a:	4617      	mov	r7, r2
1006246c:	9103      	str	r1, [sp, #12]
1006246e:	2500      	movs	r5, #0
10062470:	9514      	str	r5, [sp, #80]	@ 0x50
10062472:	9513      	str	r5, [sp, #76]	@ 0x4c
10062474:	9512      	str	r5, [sp, #72]	@ 0x48
10062476:	9511      	str	r5, [sp, #68]	@ 0x44
10062478:	a911      	add	r1, sp, #68	@ 0x44
1006247a:	ac0d      	add	r4, sp, #52	@ 0x34
1006247c:	9004      	str	r0, [sp, #16]
1006247e:	4622      	mov	r2, r4
10062480:	f7f7 fe9a 	bl	1005a1b8 <hci_le_encrypt>
10062484:	200f      	movs	r0, #15
10062486:	9002      	str	r0, [sp, #8]
10062488:	5626      	ldrsb	r6, [r4, r0]
1006248a:	a909      	add	r1, sp, #36	@ 0x24
1006248c:	4620      	mov	r0, r4
1006248e:	f000 f885 	bl	1006259c <smp_crt_left_shift>
10062492:	2e00      	cmp	r6, #0
10062494:	d467      	bmi.n	10062566 <smp_crt_generate_cmac_tag+0x102>
10062496:	a809      	add	r0, sp, #36	@ 0x24
10062498:	9902      	ldr	r1, [sp, #8]
1006249a:	5644      	ldrsb	r4, [r0, r1]
1006249c:	a905      	add	r1, sp, #20
1006249e:	f000 f87d 	bl	1006259c <smp_crt_left_shift>
100624a2:	2c00      	cmp	r4, #0
100624a4:	d46c      	bmi.n	10062580 <smp_crt_generate_cmac_tag+0x11c>
100624a6:	a811      	add	r0, sp, #68	@ 0x44
100624a8:	2400      	movs	r4, #0
100624aa:	2210      	movs	r2, #16
100624ac:	4621      	mov	r1, r4
100624ae:	f7f0 ff51 	bl	10053354 <BLEPLAT_MemSet>
100624b2:	b2fd      	uxtb	r5, r7
100624b4:	2d11      	cmp	r5, #17
100624b6:	d321      	bcc.n	100624fc <smp_crt_generate_cmac_tag+0x98>
100624b8:	1d20      	adds	r0, r4, #4
100624ba:	b281      	uxth	r1, r0
100624bc:	2210      	movs	r2, #16
100624be:	ab0d      	add	r3, sp, #52	@ 0x34
100624c0:	9803      	ldr	r0, [sp, #12]
100624c2:	f7f3 faeb 	bl	10055a9c <ACL_pkt_read>
100624c6:	2000      	movs	r0, #0
100624c8:	2810      	cmp	r0, #16
100624ca:	d007      	beq.n	100624dc <smp_crt_generate_cmac_tag+0x78>
100624cc:	a90d      	add	r1, sp, #52	@ 0x34
100624ce:	5c09      	ldrb	r1, [r1, r0]
100624d0:	aa11      	add	r2, sp, #68	@ 0x44
100624d2:	5c13      	ldrb	r3, [r2, r0]
100624d4:	404b      	eors	r3, r1
100624d6:	5413      	strb	r3, [r2, r0]
100624d8:	1c40      	adds	r0, r0, #1
100624da:	e7f5      	b.n	100624c8 <smp_crt_generate_cmac_tag+0x64>
100624dc:	ad11      	add	r5, sp, #68	@ 0x44
100624de:	ae0d      	add	r6, sp, #52	@ 0x34
100624e0:	9804      	ldr	r0, [sp, #16]
100624e2:	4629      	mov	r1, r5
100624e4:	4632      	mov	r2, r6
100624e6:	f7f7 fe67 	bl	1005a1b8 <hci_le_encrypt>
100624ea:	2210      	movs	r2, #16
100624ec:	4628      	mov	r0, r5
100624ee:	4631      	mov	r1, r6
100624f0:	f7f0 ff20 	bl	10053334 <BLEPLAT_MemCpy>
100624f4:	3f10      	subs	r7, #16
100624f6:	3410      	adds	r4, #16
100624f8:	b2a4      	uxth	r4, r4
100624fa:	e7da      	b.n	100624b2 <smp_crt_generate_cmac_tag+0x4e>
100624fc:	2d10      	cmp	r5, #16
100624fe:	d108      	bne.n	10062512 <smp_crt_generate_cmac_tag+0xae>
10062500:	1d20      	adds	r0, r4, #4
10062502:	b281      	uxth	r1, r0
10062504:	2210      	movs	r2, #16
10062506:	ab0d      	add	r3, sp, #52	@ 0x34
10062508:	9803      	ldr	r0, [sp, #12]
1006250a:	f7f3 fac7 	bl	10055a9c <ACL_pkt_read>
1006250e:	a809      	add	r0, sp, #36	@ 0x24
10062510:	e014      	b.n	1006253c <smp_crt_generate_cmac_tag+0xd8>
10062512:	a80d      	add	r0, sp, #52	@ 0x34
10062514:	2100      	movs	r1, #0
10062516:	2210      	movs	r2, #16
10062518:	f7f0 ff1c 	bl	10053354 <BLEPLAT_MemSet>
1006251c:	0638      	lsls	r0, r7, #24
1006251e:	d008      	beq.n	10062532 <smp_crt_generate_cmac_tag+0xce>
10062520:	a80d      	add	r0, sp, #52	@ 0x34
10062522:	1b43      	subs	r3, r0, r5
10062524:	3310      	adds	r3, #16
10062526:	1d20      	adds	r0, r4, #4
10062528:	b281      	uxth	r1, r0
1006252a:	9803      	ldr	r0, [sp, #12]
1006252c:	462a      	mov	r2, r5
1006252e:	f7f3 fab5 	bl	10055a9c <ACL_pkt_read>
10062532:	a80d      	add	r0, sp, #52	@ 0x34
10062534:	1b40      	subs	r0, r0, r5
10062536:	2180      	movs	r1, #128	@ 0x80
10062538:	73c1      	strb	r1, [r0, #15]
1006253a:	a805      	add	r0, sp, #20
1006253c:	9a01      	ldr	r2, [sp, #4]
1006253e:	2100      	movs	r1, #0
10062540:	2910      	cmp	r1, #16
10062542:	d009      	beq.n	10062558 <smp_crt_generate_cmac_tag+0xf4>
10062544:	ab0d      	add	r3, sp, #52	@ 0x34
10062546:	5c5c      	ldrb	r4, [r3, r1]
10062548:	5c43      	ldrb	r3, [r0, r1]
1006254a:	4063      	eors	r3, r4
1006254c:	ad11      	add	r5, sp, #68	@ 0x44
1006254e:	5c6c      	ldrb	r4, [r5, r1]
10062550:	405c      	eors	r4, r3
10062552:	546c      	strb	r4, [r5, r1]
10062554:	1c49      	adds	r1, r1, #1
10062556:	e7f3      	b.n	10062540 <smp_crt_generate_cmac_tag+0xdc>
10062558:	a911      	add	r1, sp, #68	@ 0x44
1006255a:	9804      	ldr	r0, [sp, #16]
1006255c:	f7f7 fe2c 	bl	1005a1b8 <hci_le_encrypt>
10062560:	2000      	movs	r0, #0
10062562:	b015      	add	sp, #84	@ 0x54
10062564:	bdf0      	pop	{r4, r5, r6, r7, pc}
10062566:	a811      	add	r0, sp, #68	@ 0x44
10062568:	2187      	movs	r1, #135	@ 0x87
1006256a:	7001      	strb	r1, [r0, #0]
1006256c:	2d0f      	cmp	r5, #15
1006256e:	d092      	beq.n	10062496 <smp_crt_generate_cmac_tag+0x32>
10062570:	a809      	add	r0, sp, #36	@ 0x24
10062572:	5d41      	ldrb	r1, [r0, r5]
10062574:	aa11      	add	r2, sp, #68	@ 0x44
10062576:	5d52      	ldrb	r2, [r2, r5]
10062578:	404a      	eors	r2, r1
1006257a:	5542      	strb	r2, [r0, r5]
1006257c:	1c6d      	adds	r5, r5, #1
1006257e:	e7f5      	b.n	1006256c <smp_crt_generate_cmac_tag+0x108>
10062580:	a811      	add	r0, sp, #68	@ 0x44
10062582:	2187      	movs	r1, #135	@ 0x87
10062584:	7001      	strb	r1, [r0, #0]
10062586:	2000      	movs	r0, #0
10062588:	280f      	cmp	r0, #15
1006258a:	d08c      	beq.n	100624a6 <smp_crt_generate_cmac_tag+0x42>
1006258c:	a905      	add	r1, sp, #20
1006258e:	5c0a      	ldrb	r2, [r1, r0]
10062590:	ab11      	add	r3, sp, #68	@ 0x44
10062592:	5c1b      	ldrb	r3, [r3, r0]
10062594:	4053      	eors	r3, r2
10062596:	540b      	strb	r3, [r1, r0]
10062598:	1c40      	adds	r0, r0, #1
1006259a:	e7f5      	b.n	10062588 <smp_crt_generate_cmac_tag+0x124>

1006259c <smp_crt_left_shift>:
1006259c:	b510      	push	{r4, lr}
1006259e:	7802      	ldrb	r2, [r0, #0]
100625a0:	0052      	lsls	r2, r2, #1
100625a2:	700a      	strb	r2, [r1, #0]
100625a4:	1c49      	adds	r1, r1, #1
100625a6:	2200      	movs	r2, #0
100625a8:	2a0f      	cmp	r2, #15
100625aa:	d00b      	beq.n	100625c4 <smp_crt_left_shift+0x28>
100625ac:	1883      	adds	r3, r0, r2
100625ae:	785b      	ldrb	r3, [r3, #1]
100625b0:	005b      	lsls	r3, r3, #1
100625b2:	548b      	strb	r3, [r1, r2]
100625b4:	5684      	ldrsb	r4, [r0, r2]
100625b6:	2c00      	cmp	r4, #0
100625b8:	d502      	bpl.n	100625c0 <smp_crt_left_shift+0x24>
100625ba:	2401      	movs	r4, #1
100625bc:	4323      	orrs	r3, r4
100625be:	548b      	strb	r3, [r1, r2]
100625c0:	1c52      	adds	r2, r2, #1
100625c2:	e7f1      	b.n	100625a8 <smp_crt_left_shift+0xc>
100625c4:	bd10      	pop	{r4, pc}

100625c6 <smp_debug_trudy__set_config>:
100625c6:	200c      	movs	r0, #12
100625c8:	4770      	bx	lr
	...

100625cc <smp_fsm_process_actions_wrt_state_tsk>:
100625cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100625ce:	2700      	movs	r7, #0
100625d0:	4b6b      	ldr	r3, [pc, #428]	@ (10062780 <__arm_cp.0_0>)
100625d2:	4a6c      	ldr	r2, [pc, #432]	@ (10062784 <__arm_cp.0_1>)
100625d4:	463d      	mov	r5, r7
100625d6:	6818      	ldr	r0, [r3, #0]
100625d8:	2134      	movs	r1, #52	@ 0x34
100625da:	5c40      	ldrb	r0, [r0, r1]
100625dc:	4285      	cmp	r5, r0
100625de:	d300      	bcc.n	100625e2 <smp_fsm_process_actions_wrt_state_tsk+0x16>
100625e0:	e0cd      	b.n	1006277e <smp_fsm_process_actions_wrt_state_tsk+0x1b2>
100625e2:	6810      	ldr	r0, [r2, #0]
100625e4:	21a4      	movs	r1, #164	@ 0xa4
100625e6:	5840      	ldr	r0, [r0, r1]
100625e8:	2800      	cmp	r0, #0
100625ea:	d100      	bne.n	100625ee <smp_fsm_process_actions_wrt_state_tsk+0x22>
100625ec:	e0b2      	b.n	10062754 <smp_fsm_process_actions_wrt_state_tsk+0x188>
100625ee:	19c4      	adds	r4, r0, r7
100625f0:	8920      	ldrh	r0, [r4, #8]
100625f2:	2800      	cmp	r0, #0
100625f4:	d100      	bne.n	100625f8 <smp_fsm_process_actions_wrt_state_tsk+0x2c>
100625f6:	e0ad      	b.n	10062754 <smp_fsm_process_actions_wrt_state_tsk+0x188>
100625f8:	7aa0      	ldrb	r0, [r4, #10]
100625fa:	4601      	mov	r1, r0
100625fc:	39d1      	subs	r1, #209	@ 0xd1
100625fe:	2905      	cmp	r1, #5
10062600:	d35d      	bcc.n	100626be <smp_fsm_process_actions_wrt_state_tsk+0xf2>
10062602:	2800      	cmp	r0, #0
10062604:	d100      	bne.n	10062608 <smp_fsm_process_actions_wrt_state_tsk+0x3c>
10062606:	e0a5      	b.n	10062754 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10062608:	28fe      	cmp	r0, #254	@ 0xfe
1006260a:	d100      	bne.n	1006260e <smp_fsm_process_actions_wrt_state_tsk+0x42>
1006260c:	e08a      	b.n	10062724 <smp_fsm_process_actions_wrt_state_tsk+0x158>
1006260e:	28a2      	cmp	r0, #162	@ 0xa2
10062610:	d059      	beq.n	100626c6 <smp_fsm_process_actions_wrt_state_tsk+0xfa>
10062612:	28aa      	cmp	r0, #170	@ 0xaa
10062614:	d100      	bne.n	10062618 <smp_fsm_process_actions_wrt_state_tsk+0x4c>
10062616:	e081      	b.n	1006271c <smp_fsm_process_actions_wrt_state_tsk+0x150>
10062618:	28b2      	cmp	r0, #178	@ 0xb2
1006261a:	d054      	beq.n	100626c6 <smp_fsm_process_actions_wrt_state_tsk+0xfa>
1006261c:	28b4      	cmp	r0, #180	@ 0xb4
1006261e:	d100      	bne.n	10062622 <smp_fsm_process_actions_wrt_state_tsk+0x56>
10062620:	e08a      	b.n	10062738 <smp_fsm_process_actions_wrt_state_tsk+0x16c>
10062622:	28ba      	cmp	r0, #186	@ 0xba
10062624:	d07a      	beq.n	1006271c <smp_fsm_process_actions_wrt_state_tsk+0x150>
10062626:	28bf      	cmp	r0, #191	@ 0xbf
10062628:	d100      	bne.n	1006262c <smp_fsm_process_actions_wrt_state_tsk+0x60>
1006262a:	e089      	b.n	10062740 <smp_fsm_process_actions_wrt_state_tsk+0x174>
1006262c:	28f0      	cmp	r0, #240	@ 0xf0
1006262e:	d100      	bne.n	10062632 <smp_fsm_process_actions_wrt_state_tsk+0x66>
10062630:	e08b      	b.n	1006274a <smp_fsm_process_actions_wrt_state_tsk+0x17e>
10062632:	2810      	cmp	r0, #16
10062634:	d000      	beq.n	10062638 <smp_fsm_process_actions_wrt_state_tsk+0x6c>
10062636:	e090      	b.n	1006275a <smp_fsm_process_actions_wrt_state_tsk+0x18e>
10062638:	2101      	movs	r1, #1
1006263a:	4620      	mov	r0, r4
1006263c:	f004 fcb8 	bl	10066fb0 <smp_dep_sdb_find_bonding_record_by_conn_addr>
10062640:	2800      	cmp	r0, #0
10062642:	d100      	bne.n	10062646 <smp_fsm_process_actions_wrt_state_tsk+0x7a>
10062644:	e096      	b.n	10062774 <smp_fsm_process_actions_wrt_state_tsk+0x1a8>
10062646:	2600      	movs	r6, #0
10062648:	72a6      	strb	r6, [r4, #10]
1006264a:	f7f4 fc5b 	bl	10056f04 <GapIsPrivacySupported>
1006264e:	2800      	cmp	r0, #0
10062650:	4b4b      	ldr	r3, [pc, #300]	@ (10062780 <__arm_cp.0_0>)
10062652:	4a4c      	ldr	r2, [pc, #304]	@ (10062784 <__arm_cp.0_1>)
10062654:	d07e      	beq.n	10062754 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10062656:	2060      	movs	r0, #96	@ 0x60
10062658:	5c20      	ldrb	r0, [r4, r0]
1006265a:	07c0      	lsls	r0, r0, #31
1006265c:	d07a      	beq.n	10062754 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006265e:	f004 fc18 	bl	10066e92 <smp_dep_sdb_get_bonding_records_count>
10062662:	4a48      	ldr	r2, [pc, #288]	@ (10062784 <__arm_cp.0_1>)
10062664:	4b46      	ldr	r3, [pc, #280]	@ (10062780 <__arm_cp.0_0>)
10062666:	2800      	cmp	r0, #0
10062668:	d074      	beq.n	10062754 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006266a:	79e0      	ldrb	r0, [r4, #7]
1006266c:	21c0      	movs	r1, #192	@ 0xc0
1006266e:	4001      	ands	r1, r0
10062670:	2940      	cmp	r1, #64	@ 0x40
10062672:	d16f      	bne.n	10062754 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10062674:	4844      	ldr	r0, [pc, #272]	@ (10062788 <__arm_cp.0_2>)
10062676:	6800      	ldr	r0, [r0, #0]
10062678:	214f      	movs	r1, #79	@ 0x4f
1006267a:	5c40      	ldrb	r0, [r0, r1]
1006267c:	0700      	lsls	r0, r0, #28
1006267e:	d569      	bpl.n	10062754 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10062680:	8924      	ldrh	r4, [r4, #8]
10062682:	4842      	ldr	r0, [pc, #264]	@ (1006278c <__arm_cp.0_3>)
10062684:	6800      	ldr	r0, [r0, #0]
10062686:	6980      	ldr	r0, [r0, #24]
10062688:	2248      	movs	r2, #72	@ 0x48
1006268a:	2102      	movs	r1, #2
1006268c:	460b      	mov	r3, r1
1006268e:	f7f3 fb9d 	bl	10055dcc <aci_event_fifo_push_header>
10062692:	4a3c      	ldr	r2, [pc, #240]	@ (10062784 <__arm_cp.0_1>)
10062694:	4b3a      	ldr	r3, [pc, #232]	@ (10062780 <__arm_cp.0_0>)
10062696:	2800      	cmp	r0, #0
10062698:	d05c      	beq.n	10062754 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006269a:	4601      	mov	r1, r0
1006269c:	2004      	movs	r0, #4
1006269e:	7248      	strb	r0, [r1, #9]
100626a0:	2208      	movs	r2, #8
100626a2:	720a      	strb	r2, [r1, #8]
100626a4:	71ce      	strb	r6, [r1, #7]
100626a6:	7188      	strb	r0, [r1, #6]
100626a8:	728c      	strb	r4, [r1, #10]
100626aa:	20ff      	movs	r0, #255	@ 0xff
100626ac:	7148      	strb	r0, [r1, #5]
100626ae:	2082      	movs	r0, #130	@ 0x82
100626b0:	7108      	strb	r0, [r1, #4]
100626b2:	0a20      	lsrs	r0, r4, #8
100626b4:	72c8      	strb	r0, [r1, #11]
100626b6:	2002      	movs	r0, #2
100626b8:	f7f3 fc25 	bl	10055f06 <aci_event_fifo_push>
100626bc:	e048      	b.n	10062750 <smp_fsm_process_actions_wrt_state_tsk+0x184>
100626be:	4620      	mov	r0, r4
100626c0:	f005 fa2c 	bl	10067b1c <smp_pp3_keys_distribution_send>
100626c4:	e044      	b.n	10062750 <smp_fsm_process_actions_wrt_state_tsk+0x184>
100626c6:	7de0      	ldrb	r0, [r4, #23]
100626c8:	2601      	movs	r6, #1
100626ca:	0700      	lsls	r0, r0, #28
100626cc:	4630      	mov	r0, r6
100626ce:	d513      	bpl.n	100626f8 <smp_fsm_process_actions_wrt_state_tsk+0x12c>
100626d0:	4620      	mov	r0, r4
100626d2:	f005 fd28 	bl	10068126 <smp_scp_public_key_prepare_and_exchange_ucfg_weak>
100626d6:	2800      	cmp	r0, #0
100626d8:	d006      	beq.n	100626e8 <smp_fsm_process_actions_wrt_state_tsk+0x11c>
100626da:	2812      	cmp	r0, #18
100626dc:	d004      	beq.n	100626e8 <smp_fsm_process_actions_wrt_state_tsk+0x11c>
100626de:	200e      	movs	r0, #14
100626e0:	f000 febe 	bl	10063460 <tsk_notify_idx>
100626e4:	f7f0 f83f 	bl	10052766 <BLE_STACK_ProcessRequest>
100626e8:	7de0      	ldrb	r0, [r4, #23]
100626ea:	2160      	movs	r1, #96	@ 0x60
100626ec:	4001      	ands	r1, r0
100626ee:	3960      	subs	r1, #96	@ 0x60
100626f0:	4248      	negs	r0, r1
100626f2:	4148      	adcs	r0, r1
100626f4:	4b22      	ldr	r3, [pc, #136]	@ (10062780 <__arm_cp.0_0>)
100626f6:	4a23      	ldr	r2, [pc, #140]	@ (10062784 <__arm_cp.0_1>)
100626f8:	7ce1      	ldrb	r1, [r4, #19]
100626fa:	2902      	cmp	r1, #2
100626fc:	d104      	bne.n	10062708 <smp_fsm_process_actions_wrt_state_tsk+0x13c>
100626fe:	7be1      	ldrb	r1, [r4, #15]
10062700:	2210      	movs	r2, #16
10062702:	400a      	ands	r2, r1
10062704:	0916      	lsrs	r6, r2, #4
10062706:	4a1f      	ldr	r2, [pc, #124]	@ (10062784 <__arm_cp.0_1>)
10062708:	2800      	cmp	r0, #0
1006270a:	d023      	beq.n	10062754 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006270c:	2e00      	cmp	r6, #0
1006270e:	d021      	beq.n	10062754 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10062710:	2060      	movs	r0, #96	@ 0x60
10062712:	5c20      	ldrb	r0, [r4, r0]
10062714:	07c0      	lsls	r0, r0, #31
10062716:	d024      	beq.n	10062762 <smp_fsm_process_actions_wrt_state_tsk+0x196>
10062718:	204b      	movs	r0, #75	@ 0x4b
1006271a:	e023      	b.n	10062764 <smp_fsm_process_actions_wrt_state_tsk+0x198>
1006271c:	4620      	mov	r0, r4
1006271e:	f000 f837 	bl	10062790 <smp_fsm_execute_actions_scp_phase2as2_ucfg_weak>
10062722:	e015      	b.n	10062750 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10062724:	2060      	movs	r0, #96	@ 0x60
10062726:	5620      	ldrsb	r0, [r4, r0]
10062728:	2800      	cmp	r0, #0
1006272a:	d513      	bpl.n	10062754 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006272c:	2100      	movs	r1, #0
1006272e:	2270      	movs	r2, #112	@ 0x70
10062730:	4620      	mov	r0, r4
10062732:	f7f0 fe0f 	bl	10053354 <BLEPLAT_MemSet>
10062736:	e00b      	b.n	10062750 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10062738:	4620      	mov	r0, r4
1006273a:	f005 f859 	bl	100677f0 <smp_pp2_per_auth_stage_1_start>
1006273e:	e007      	b.n	10062750 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10062740:	2100      	movs	r1, #0
10062742:	4620      	mov	r0, r4
10062744:	f005 f9a1 	bl	10067a8a <smp_pp3_keys_distribution_start>
10062748:	e002      	b.n	10062750 <smp_fsm_process_actions_wrt_state_tsk+0x184>
1006274a:	4620      	mov	r0, r4
1006274c:	f004 fcb2 	bl	100670b4 <smp_pp3_pairing_completed_successful>
10062750:	4a0c      	ldr	r2, [pc, #48]	@ (10062784 <__arm_cp.0_1>)
10062752:	4b0b      	ldr	r3, [pc, #44]	@ (10062780 <__arm_cp.0_0>)
10062754:	3770      	adds	r7, #112	@ 0x70
10062756:	1c6d      	adds	r5, r5, #1
10062758:	e73d      	b.n	100625d6 <smp_fsm_process_actions_wrt_state_tsk+0xa>
1006275a:	4620      	mov	r0, r4
1006275c:	f000 f819 	bl	10062792 <smp_fsm_execute_actions_excerpt_cei_ucfg_weak>
10062760:	e00a      	b.n	10062778 <smp_fsm_process_actions_wrt_state_tsk+0x1ac>
10062762:	205b      	movs	r0, #91	@ 0x5b
10062764:	43c0      	mvns	r0, r0
10062766:	72a0      	strb	r0, [r4, #10]
10062768:	200e      	movs	r0, #14
1006276a:	f000 fe79 	bl	10063460 <tsk_notify_idx>
1006276e:	f7ef fffa 	bl	10052766 <BLE_STACK_ProcessRequest>
10062772:	e001      	b.n	10062778 <smp_fsm_process_actions_wrt_state_tsk+0x1ac>
10062774:	20f1      	movs	r0, #241	@ 0xf1
10062776:	72a0      	strb	r0, [r4, #10]
10062778:	4b01      	ldr	r3, [pc, #4]	@ (10062780 <__arm_cp.0_0>)
1006277a:	4a02      	ldr	r2, [pc, #8]	@ (10062784 <__arm_cp.0_1>)
1006277c:	e7ea      	b.n	10062754 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006277e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10062780 <__arm_cp.0_0>:
10062780:	20002904 	.word	0x20002904

10062784 <__arm_cp.0_1>:
10062784:	200029a4 	.word	0x200029a4

10062788 <__arm_cp.0_2>:
10062788:	20002958 	.word	0x20002958

1006278c <__arm_cp.0_3>:
1006278c:	20002908 	.word	0x20002908

10062790 <smp_fsm_execute_actions_scp_phase2as2_ucfg_weak>:
10062790:	4770      	bx	lr

10062792 <smp_fsm_execute_actions_excerpt_cei_ucfg_weak>:
10062792:	4770      	bx	lr

10062794 <smp_rxp_process_rxed_packets_tsk>:
10062794:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10062796:	4f60      	ldr	r7, [pc, #384]	@ (10062918 <__arm_cp.0_0>)
10062798:	4c60      	ldr	r4, [pc, #384]	@ (1006291c <__arm_cp.0_1>)
1006279a:	6838      	ldr	r0, [r7, #0]
1006279c:	6801      	ldr	r1, [r0, #0]
1006279e:	2900      	cmp	r1, #0
100627a0:	d100      	bne.n	100627a4 <smp_rxp_process_rxed_packets_tsk+0x10>
100627a2:	e0b8      	b.n	10062916 <smp_rxp_process_rxed_packets_tsk+0x182>
100627a4:	f001 f878 	bl	10063898 <ACL_list_remove_head>
100627a8:	4605      	mov	r5, r0
100627aa:	8800      	ldrh	r0, [r0, #0]
100627ac:	f005 fc4c 	bl	10068048 <smp_get_remote_device_list_item>
100627b0:	2800      	cmp	r0, #0
100627b2:	d0f2      	beq.n	1006279a <smp_rxp_process_rxed_packets_tsk+0x6>
100627b4:	4606      	mov	r6, r0
100627b6:	6838      	ldr	r0, [r7, #0]
100627b8:	21b0      	movs	r1, #176	@ 0xb0
100627ba:	5c40      	ldrb	r0, [r0, r1]
100627bc:	2800      	cmp	r0, #0
100627be:	d00e      	beq.n	100627de <smp_rxp_process_rxed_packets_tsk+0x4a>
100627c0:	2108      	movs	r1, #8
100627c2:	2200      	movs	r2, #0
100627c4:	2301      	movs	r3, #1
100627c6:	4630      	mov	r0, r6
100627c8:	f004 fd2c 	bl	10067224 <smp_pp3_pairing_failed_send>
100627cc:	2800      	cmp	r0, #0
100627ce:	d00e      	beq.n	100627ee <smp_rxp_process_rxed_packets_tsk+0x5a>
100627d0:	28fd      	cmp	r0, #253	@ 0xfd
100627d2:	d000      	beq.n	100627d6 <smp_rxp_process_rxed_packets_tsk+0x42>
100627d4:	e096      	b.n	10062904 <smp_rxp_process_rxed_packets_tsk+0x170>
100627d6:	4628      	mov	r0, r5
100627d8:	f7f3 f944 	bl	10055a64 <ACL_pkt_release>
100627dc:	e7dd      	b.n	1006279a <smp_rxp_process_rxed_packets_tsk+0x6>
100627de:	6868      	ldr	r0, [r5, #4]
100627e0:	7a00      	ldrb	r0, [r0, #8]
100627e2:	2805      	cmp	r0, #5
100627e4:	d10c      	bne.n	10062800 <smp_rxp_process_rxed_packets_tsk+0x6c>
100627e6:	4628      	mov	r0, r5
100627e8:	4631      	mov	r1, r6
100627ea:	f004 fcef 	bl	100671cc <smp_pp3_pairing_failed_receive>
100627ee:	4628      	mov	r0, r5
100627f0:	f7f3 f938 	bl	10055a64 <ACL_pkt_release>
100627f4:	200e      	movs	r0, #14
100627f6:	f000 fe33 	bl	10063460 <tsk_notify_idx>
100627fa:	f7ef ffb4 	bl	10052766 <BLE_STACK_ProcessRequest>
100627fe:	e7cc      	b.n	1006279a <smp_rxp_process_rxed_packets_tsk+0x6>
10062800:	7ab1      	ldrb	r1, [r6, #10]
10062802:	29f1      	cmp	r1, #241	@ 0xf1
10062804:	d001      	beq.n	1006280a <smp_rxp_process_rxed_packets_tsk+0x76>
10062806:	2900      	cmp	r1, #0
10062808:	d10a      	bne.n	10062820 <smp_rxp_process_rxed_packets_tsk+0x8c>
1006280a:	2160      	movs	r1, #96	@ 0x60
1006280c:	5c72      	ldrb	r2, [r6, r1]
1006280e:	2101      	movs	r1, #1
10062810:	4011      	ands	r1, r2
10062812:	d101      	bne.n	10062818 <smp_rxp_process_rxed_packets_tsk+0x84>
10062814:	280b      	cmp	r0, #11
10062816:	d1de      	bne.n	100627d6 <smp_rxp_process_rxed_packets_tsk+0x42>
10062818:	2900      	cmp	r1, #0
1006281a:	d001      	beq.n	10062820 <smp_rxp_process_rxed_packets_tsk+0x8c>
1006281c:	2801      	cmp	r0, #1
1006281e:	d1da      	bne.n	100627d6 <smp_rxp_process_rxed_packets_tsk+0x42>
10062820:	7df0      	ldrb	r0, [r6, #23]
10062822:	0700      	lsls	r0, r0, #28
10062824:	d506      	bpl.n	10062834 <smp_rxp_process_rxed_packets_tsk+0xa0>
10062826:	9602      	str	r6, [sp, #8]
10062828:	9501      	str	r5, [sp, #4]
1006282a:	a801      	add	r0, sp, #4
1006282c:	f000 f894 	bl	10062958 <smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg_weak>
10062830:	28fc      	cmp	r0, #252	@ 0xfc
10062832:	d1cb      	bne.n	100627cc <smp_rxp_process_rxed_packets_tsk+0x38>
10062834:	2060      	movs	r0, #96	@ 0x60
10062836:	5c30      	ldrb	r0, [r6, r0]
10062838:	07c0      	lsls	r0, r0, #31
1006283a:	d107      	bne.n	1006284c <smp_rxp_process_rxed_packets_tsk+0xb8>
1006283c:	9602      	str	r6, [sp, #8]
1006283e:	9501      	str	r5, [sp, #4]
10062840:	a801      	add	r0, sp, #4
10062842:	f000 f88b 	bl	1006295c <smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak>
10062846:	28fc      	cmp	r0, #252	@ 0xfc
10062848:	d1c0      	bne.n	100627cc <smp_rxp_process_rxed_packets_tsk+0x38>
1006284a:	e022      	b.n	10062892 <smp_rxp_process_rxed_packets_tsk+0xfe>
1006284c:	6868      	ldr	r0, [r5, #4]
1006284e:	7a00      	ldrb	r0, [r0, #8]
10062850:	2804      	cmp	r0, #4
10062852:	d031      	beq.n	100628b8 <smp_rxp_process_rxed_packets_tsk+0x124>
10062854:	2803      	cmp	r0, #3
10062856:	d037      	beq.n	100628c8 <smp_rxp_process_rxed_packets_tsk+0x134>
10062858:	2801      	cmp	r0, #1
1006285a:	d11a      	bne.n	10062892 <smp_rxp_process_rxed_packets_tsk+0xfe>
1006285c:	7ab0      	ldrb	r0, [r6, #10]
1006285e:	2800      	cmp	r0, #0
10062860:	d003      	beq.n	1006286a <smp_rxp_process_rxed_packets_tsk+0xd6>
10062862:	28fb      	cmp	r0, #251	@ 0xfb
10062864:	d047      	beq.n	100628f6 <smp_rxp_process_rxed_packets_tsk+0x162>
10062866:	28f1      	cmp	r0, #241	@ 0xf1
10062868:	d1b5      	bne.n	100627d6 <smp_rxp_process_rxed_packets_tsk+0x42>
1006286a:	8930      	ldrh	r0, [r6, #8]
1006286c:	f005 fbcc 	bl	10068008 <smp_get_remote_device_list_index>
10062870:	4602      	mov	r2, r0
10062872:	2000      	movs	r0, #0
10062874:	4601      	mov	r1, r0
10062876:	4623      	mov	r3, r4
10062878:	f000 f88e 	bl	10062998 <smp_timer_reset>
1006287c:	7e30      	ldrb	r0, [r6, #24]
1006287e:	0781      	lsls	r1, r0, #30
10062880:	d502      	bpl.n	10062888 <smp_rxp_process_rxed_packets_tsk+0xf4>
10062882:	2103      	movs	r1, #3
10062884:	4308      	orrs	r0, r1
10062886:	7630      	strb	r0, [r6, #24]
10062888:	4628      	mov	r0, r5
1006288a:	4631      	mov	r1, r6
1006288c:	f004 fe9e 	bl	100675cc <smp_pp1_per_rxp_pairing_request>
10062890:	e7d9      	b.n	10062846 <smp_rxp_process_rxed_packets_tsk+0xb2>
10062892:	4628      	mov	r0, r5
10062894:	4631      	mov	r1, r6
10062896:	f005 fa0f 	bl	10067cb8 <smp_pp3_keys_distribution_receive>
1006289a:	28fc      	cmp	r0, #252	@ 0xfc
1006289c:	d003      	beq.n	100628a6 <smp_rxp_process_rxed_packets_tsk+0x112>
1006289e:	2886      	cmp	r0, #134	@ 0x86
100628a0:	d099      	beq.n	100627d6 <smp_rxp_process_rxed_packets_tsk+0x42>
100628a2:	2884      	cmp	r0, #132	@ 0x84
100628a4:	d192      	bne.n	100627cc <smp_rxp_process_rxed_packets_tsk+0x38>
100628a6:	7df0      	ldrb	r0, [r6, #23]
100628a8:	0700      	lsls	r0, r0, #28
100628aa:	d594      	bpl.n	100627d6 <smp_rxp_process_rxed_packets_tsk+0x42>
100628ac:	9602      	str	r6, [sp, #8]
100628ae:	9501      	str	r5, [sp, #4]
100628b0:	a801      	add	r0, sp, #4
100628b2:	f000 f84f 	bl	10062954 <smp_rxp_process_exception_cases_excerpt_scp_ucfg_weak>
100628b6:	e789      	b.n	100627cc <smp_rxp_process_rxed_packets_tsk+0x38>
100628b8:	7ab0      	ldrb	r0, [r6, #10]
100628ba:	28b6      	cmp	r0, #182	@ 0xb6
100628bc:	d18b      	bne.n	100627d6 <smp_rxp_process_rxed_packets_tsk+0x42>
100628be:	4628      	mov	r0, r5
100628c0:	4631      	mov	r1, r6
100628c2:	f005 f84d 	bl	10067960 <smp_pp2_per_rx_process_pairing_random>
100628c6:	e7be      	b.n	10062846 <smp_rxp_process_rxed_packets_tsk+0xb2>
100628c8:	7ab0      	ldrb	r0, [r6, #10]
100628ca:	28b2      	cmp	r0, #178	@ 0xb2
100628cc:	d009      	beq.n	100628e2 <smp_rxp_process_rxed_packets_tsk+0x14e>
100628ce:	28b4      	cmp	r0, #180	@ 0xb4
100628d0:	d007      	beq.n	100628e2 <smp_rxp_process_rxed_packets_tsk+0x14e>
100628d2:	28b5      	cmp	r0, #181	@ 0xb5
100628d4:	d000      	beq.n	100628d8 <smp_rxp_process_rxed_packets_tsk+0x144>
100628d6:	e77e      	b.n	100627d6 <smp_rxp_process_rxed_packets_tsk+0x42>
100628d8:	4628      	mov	r0, r5
100628da:	4631      	mov	r1, r6
100628dc:	f004 ff4a 	bl	10067774 <smp_pp2_per_rx_process_pairing_confirm>
100628e0:	e7b1      	b.n	10062846 <smp_rxp_process_rxed_packets_tsk+0xb2>
100628e2:	7cf0      	ldrb	r0, [r6, #19]
100628e4:	2802      	cmp	r0, #2
100628e6:	d000      	beq.n	100628ea <smp_rxp_process_rxed_packets_tsk+0x156>
100628e8:	e775      	b.n	100627d6 <smp_rxp_process_rxed_packets_tsk+0x42>
100628ea:	6838      	ldr	r0, [r7, #0]
100628ec:	2140      	movs	r1, #64	@ 0x40
100628ee:	5c41      	ldrb	r1, [r0, r1]
100628f0:	2903      	cmp	r1, #3
100628f2:	d108      	bne.n	10062906 <smp_rxp_process_rxed_packets_tsk+0x172>
100628f4:	e76f      	b.n	100627d6 <smp_rxp_process_rxed_packets_tsk+0x42>
100628f6:	2109      	movs	r1, #9
100628f8:	2200      	movs	r2, #0
100628fa:	2301      	movs	r3, #1
100628fc:	4630      	mov	r0, r6
100628fe:	f004 fc91 	bl	10067224 <smp_pp3_pairing_failed_send>
10062902:	e7a0      	b.n	10062846 <smp_rxp_process_rxed_packets_tsk+0xb2>
10062904:	6838      	ldr	r0, [r7, #0]
10062906:	4629      	mov	r1, r5
10062908:	f000 ffa7 	bl	1006385a <ACL_list_insert_head>
1006290c:	200f      	movs	r0, #15
1006290e:	f000 fda7 	bl	10063460 <tsk_notify_idx>
10062912:	f7ef ff28 	bl	10052766 <BLE_STACK_ProcessRequest>
10062916:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10062918 <__arm_cp.0_0>:
10062918:	200029a4 	.word	0x200029a4

1006291c <__arm_cp.0_1>:
1006291c:	00007530 	.word	0x00007530

10062920 <smp_rxp_flush_packet_queues>:
10062920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062922:	4d0a      	ldr	r5, [pc, #40]	@ (1006294c <__arm_cp.4_0>)
10062924:	4005      	ands	r5, r0
10062926:	4e0a      	ldr	r6, [pc, #40]	@ (10062950 <__arm_cp.4_1>)
10062928:	6830      	ldr	r0, [r6, #0]
1006292a:	6807      	ldr	r7, [r0, #0]
1006292c:	2f00      	cmp	r7, #0
1006292e:	d00c      	beq.n	1006294a <smp_rxp_flush_packet_queues+0x2a>
10062930:	463c      	mov	r4, r7
10062932:	69ff      	ldr	r7, [r7, #28]
10062934:	8820      	ldrh	r0, [r4, #0]
10062936:	42a8      	cmp	r0, r5
10062938:	d1f8      	bne.n	1006292c <smp_rxp_flush_packet_queues+0xc>
1006293a:	6830      	ldr	r0, [r6, #0]
1006293c:	4621      	mov	r1, r4
1006293e:	f000 ff95 	bl	1006386c <ACL_list_remove>
10062942:	4620      	mov	r0, r4
10062944:	f7f3 f88e 	bl	10055a64 <ACL_pkt_release>
10062948:	e7f0      	b.n	1006292c <smp_rxp_flush_packet_queues+0xc>
1006294a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1006294c <__arm_cp.4_0>:
1006294c:	00000fff 	.word	0x00000fff

10062950 <__arm_cp.4_1>:
10062950:	200029a4 	.word	0x200029a4

10062954 <smp_rxp_process_exception_cases_excerpt_scp_ucfg_weak>:
10062954:	201f      	movs	r0, #31
10062956:	4770      	bx	lr

10062958 <smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg_weak>:
10062958:	201f      	movs	r0, #31
1006295a:	4770      	bx	lr

1006295c <smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak>:
1006295c:	201f      	movs	r0, #31
1006295e:	4770      	bx	lr

10062960 <smp_timer_init>:
10062960:	b580      	push	{r7, lr}
10062962:	4806      	ldr	r0, [pc, #24]	@ (1006297c <__arm_cp.0_0>)
10062964:	7ac1      	ldrb	r1, [r0, #11]
10062966:	4806      	ldr	r0, [pc, #24]	@ (10062980 <__arm_cp.0_1>)
10062968:	6800      	ldr	r0, [r0, #0]
1006296a:	3008      	adds	r0, #8
1006296c:	1cc9      	adds	r1, r1, #3
1006296e:	b2c9      	uxtb	r1, r1
10062970:	4a04      	ldr	r2, [pc, #16]	@ (10062984 <__arm_cp.0_2>)
10062972:	2307      	movs	r3, #7
10062974:	f000 fdd2 	bl	1006351c <CST_init>
10062978:	bd80      	pop	{r7, pc}
1006297a:	46c0      	nop			@ (mov r8, r8)

1006297c <__arm_cp.0_0>:
1006297c:	2000296c 	.word	0x2000296c

10062980 <__arm_cp.0_1>:
10062980:	200029a4 	.word	0x200029a4

10062984 <__arm_cp.0_2>:
10062984:	10062989 	.word	0x10062989

10062988 <smp_timers_cb_wrapper>:
10062988:	b580      	push	{r7, lr}
1006298a:	6940      	ldr	r0, [r0, #20]
1006298c:	4901      	ldr	r1, [pc, #4]	@ (10062994 <__arm_cp.1_0>)
1006298e:	f000 fe9e 	bl	100636ce <cst_sharedCallback>
10062992:	bd80      	pop	{r7, pc}

10062994 <__arm_cp.1_0>:
10062994:	10062a31 	.word	0x10062a31

10062998 <smp_timer_reset>:
10062998:	b510      	push	{r4, lr}
1006299a:	2900      	cmp	r1, #0
1006299c:	d006      	beq.n	100629ac <smp_timer_reset+0x14>
1006299e:	2486      	movs	r4, #134	@ 0x86
100629a0:	2901      	cmp	r1, #1
100629a2:	d11b      	bne.n	100629dc <smp_timer_reset+0x44>
100629a4:	2a02      	cmp	r2, #2
100629a6:	d819      	bhi.n	100629dc <smp_timer_reset+0x44>
100629a8:	2100      	movs	r1, #0
100629aa:	e000      	b.n	100629ae <smp_timer_reset+0x16>
100629ac:	2103      	movs	r1, #3
100629ae:	2801      	cmp	r0, #1
100629b0:	d00a      	beq.n	100629c8 <smp_timer_reset+0x30>
100629b2:	2800      	cmp	r0, #0
100629b4:	d111      	bne.n	100629da <smp_timer_reset+0x42>
100629b6:	1888      	adds	r0, r1, r2
100629b8:	b2c1      	uxtb	r1, r0
100629ba:	4809      	ldr	r0, [pc, #36]	@ (100629e0 <__arm_cp.2_0>)
100629bc:	6800      	ldr	r0, [r0, #0]
100629be:	3008      	adds	r0, #8
100629c0:	2201      	movs	r2, #1
100629c2:	f000 fdf6 	bl	100635b2 <CST_start>
100629c6:	e006      	b.n	100629d6 <smp_timer_reset+0x3e>
100629c8:	1888      	adds	r0, r1, r2
100629ca:	b2c1      	uxtb	r1, r0
100629cc:	4804      	ldr	r0, [pc, #16]	@ (100629e0 <__arm_cp.2_0>)
100629ce:	6800      	ldr	r0, [r0, #0]
100629d0:	3008      	adds	r0, #8
100629d2:	f000 fdb8 	bl	10063546 <CST_stop>
100629d6:	4604      	mov	r4, r0
100629d8:	e000      	b.n	100629dc <smp_timer_reset+0x44>
100629da:	2400      	movs	r4, #0
100629dc:	4620      	mov	r0, r4
100629de:	bd10      	pop	{r4, pc}

100629e0 <__arm_cp.2_0>:
100629e0:	200029a4 	.word	0x200029a4

100629e4 <smp_timers_protocol_timeout_cb>:
100629e4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100629e6:	4605      	mov	r5, r0
100629e8:	2070      	movs	r0, #112	@ 0x70
100629ea:	9002      	str	r0, [sp, #8]
100629ec:	4345      	muls	r5, r0
100629ee:	480f      	ldr	r0, [pc, #60]	@ (10062a2c <__arm_cp.3_0>)
100629f0:	6800      	ldr	r0, [r0, #0]
100629f2:	21a4      	movs	r1, #164	@ 0xa4
100629f4:	9101      	str	r1, [sp, #4]
100629f6:	5840      	ldr	r0, [r0, r1]
100629f8:	1947      	adds	r7, r0, r5
100629fa:	8939      	ldrh	r1, [r7, #8]
100629fc:	2002      	movs	r0, #2
100629fe:	2401      	movs	r4, #1
10062a00:	2600      	movs	r6, #0
10062a02:	4622      	mov	r2, r4
10062a04:	4633      	mov	r3, r6
10062a06:	f002 f995 	bl	10064d34 <aci_gap_pairing_complete_event_push_noinline>
10062a0a:	4638      	mov	r0, r7
10062a0c:	4621      	mov	r1, r4
10062a0e:	f004 fbb9 	bl	10067184 <smp_pp3_pairing_completed_update_stats>
10062a12:	8938      	ldrh	r0, [r7, #8]
10062a14:	f7ff ff84 	bl	10062920 <smp_rxp_flush_packet_queues>
10062a18:	4804      	ldr	r0, [pc, #16]	@ (10062a2c <__arm_cp.3_0>)
10062a1a:	6800      	ldr	r0, [r0, #0]
10062a1c:	9901      	ldr	r1, [sp, #4]
10062a1e:	5840      	ldr	r0, [r0, r1]
10062a20:	1940      	adds	r0, r0, r5
10062a22:	4631      	mov	r1, r6
10062a24:	9a02      	ldr	r2, [sp, #8]
10062a26:	f7f0 fc95 	bl	10053354 <BLEPLAT_MemSet>
10062a2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10062a2c <__arm_cp.3_0>:
10062a2c:	200029a4 	.word	0x200029a4

10062a30 <smp_timers_cb>:
10062a30:	b580      	push	{r7, lr}
10062a32:	2802      	cmp	r0, #2
10062a34:	d802      	bhi.n	10062a3c <smp_timers_cb+0xc>
10062a36:	f005 fa57 	bl	10067ee8 <smp_cmn_repeated_attacks_timer_cb>
10062a3a:	bd80      	pop	{r7, pc}
10062a3c:	4904      	ldr	r1, [pc, #16]	@ (10062a50 <__arm_cp.4_0>)
10062a3e:	7ac9      	ldrb	r1, [r1, #11]
10062a40:	1cc9      	adds	r1, r1, #3
10062a42:	4281      	cmp	r1, r0
10062a44:	d903      	bls.n	10062a4e <smp_timers_cb+0x1e>
10062a46:	1ec0      	subs	r0, r0, #3
10062a48:	b2c0      	uxtb	r0, r0
10062a4a:	f7ff ffcb 	bl	100629e4 <smp_timers_protocol_timeout_cb>
10062a4e:	bd80      	pop	{r7, pc}

10062a50 <__arm_cp.4_0>:
10062a50:	2000296c 	.word	0x2000296c

10062a54 <smp_init>:
10062a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062a56:	2029      	movs	r0, #41	@ 0x29
10062a58:	00c1      	lsls	r1, r0, #3
10062a5a:	2401      	movs	r4, #1
10062a5c:	4d20      	ldr	r5, [pc, #128]	@ (10062ae0 <__arm_cp.0_0>)
10062a5e:	4620      	mov	r0, r4
10062a60:	47a8      	blx	r5
10062a62:	4e20      	ldr	r6, [pc, #128]	@ (10062ae4 <__arm_cp.0_1>)
10062a64:	6030      	str	r0, [r6, #0]
10062a66:	4f20      	ldr	r7, [pc, #128]	@ (10062ae8 <__arm_cp.0_2>)
10062a68:	7af8      	ldrb	r0, [r7, #11]
10062a6a:	2170      	movs	r1, #112	@ 0x70
10062a6c:	47a8      	blx	r5
10062a6e:	6831      	ldr	r1, [r6, #0]
10062a70:	22a4      	movs	r2, #164	@ 0xa4
10062a72:	5088      	str	r0, [r1, r2]
10062a74:	f005 f9c0 	bl	10067df8 <smp_cmn_rejectlist_init>
10062a78:	2128      	movs	r1, #40	@ 0x28
10062a7a:	4620      	mov	r0, r4
10062a7c:	47a8      	blx	r5
10062a7e:	6831      	ldr	r1, [r6, #0]
10062a80:	22ac      	movs	r2, #172	@ 0xac
10062a82:	5088      	str	r0, [r1, r2]
10062a84:	7af8      	ldrb	r0, [r7, #11]
10062a86:	1cc0      	adds	r0, r0, #3
10062a88:	b2c0      	uxtb	r0, r0
10062a8a:	1c41      	adds	r1, r0, #1
10062a8c:	4d17      	ldr	r5, [pc, #92]	@ (10062aec <__arm_cp.0_3>)
10062a8e:	4628      	mov	r0, r5
10062a90:	4622      	mov	r2, r4
10062a92:	f7fe fefd 	bl	10061890 <csmem_mem_assign>
10062a96:	6831      	ldr	r1, [r6, #0]
10062a98:	6288      	str	r0, [r1, #40]	@ 0x28
10062a9a:	7af8      	ldrb	r0, [r7, #11]
10062a9c:	1cc0      	adds	r0, r0, #3
10062a9e:	b2c1      	uxtb	r1, r0
10062aa0:	2202      	movs	r2, #2
10062aa2:	4628      	mov	r0, r5
10062aa4:	f7fe fef4 	bl	10061890 <csmem_mem_assign>
10062aa8:	6831      	ldr	r1, [r6, #0]
10062aaa:	62c8      	str	r0, [r1, #44]	@ 0x2c
10062aac:	4608      	mov	r0, r1
10062aae:	f000 fec9 	bl	10063844 <ACL_list_init>
10062ab2:	f7ff ff55 	bl	10062960 <smp_timer_init>
10062ab6:	6830      	ldr	r0, [r6, #0]
10062ab8:	2142      	movs	r1, #66	@ 0x42
10062aba:	2500      	movs	r5, #0
10062abc:	5245      	strh	r5, [r0, r1]
10062abe:	2140      	movs	r1, #64	@ 0x40
10062ac0:	2203      	movs	r2, #3
10062ac2:	5442      	strb	r2, [r0, r1]
10062ac4:	490a      	ldr	r1, [pc, #40]	@ (10062af0 <__arm_cp.0_4>)
10062ac6:	6304      	str	r4, [r0, #48]	@ 0x30
10062ac8:	6341      	str	r1, [r0, #52]	@ 0x34
10062aca:	6385      	str	r5, [r0, #56]	@ 0x38
10062acc:	3044      	adds	r0, #68	@ 0x44
10062ace:	2110      	movs	r1, #16
10062ad0:	462a      	mov	r2, r5
10062ad2:	f000 ffec 	bl	10063aae <HAL_Generate_Random_Bytes_To>
10062ad6:	4628      	mov	r0, r5
10062ad8:	f005 fb22 	bl	10068120 <smp_scp_init_ucfg_weak>
10062adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062ade:	46c0      	nop			@ (mov r8, r8)

10062ae0 <__arm_cp.0_0>:
10062ae0:	100618b5 	.word	0x100618b5

10062ae4 <__arm_cp.0_1>:
10062ae4:	200029a4 	.word	0x200029a4

10062ae8 <__arm_cp.0_2>:
10062ae8:	2000296c 	.word	0x2000296c

10062aec <__arm_cp.0_3>:
10062aec:	20002968 	.word	0x20002968

10062af0 <__arm_cp.0_4>:
10062af0:	07071007 	.word	0x07071007

10062af4 <smp_sap_aci_set_io_capabilities>:
10062af4:	b510      	push	{r4, lr}
10062af6:	4604      	mov	r4, r0
10062af8:	f000 f80c 	bl	10062b14 <smp_check_is_any_pairing_ongoing>
10062afc:	2800      	cmp	r0, #0
10062afe:	d001      	beq.n	10062b04 <smp_sap_aci_set_io_capabilities+0x10>
10062b00:	200c      	movs	r0, #12
10062b02:	bd10      	pop	{r4, pc}
10062b04:	4802      	ldr	r0, [pc, #8]	@ (10062b10 <__arm_cp.2_0>)
10062b06:	6800      	ldr	r0, [r0, #0]
10062b08:	2140      	movs	r1, #64	@ 0x40
10062b0a:	5444      	strb	r4, [r0, r1]
10062b0c:	2000      	movs	r0, #0
10062b0e:	bd10      	pop	{r4, pc}

10062b10 <__arm_cp.2_0>:
10062b10:	200029a4 	.word	0x200029a4

10062b14 <smp_check_is_any_pairing_ongoing>:
10062b14:	b570      	push	{r4, r5, r6, lr}
10062b16:	4810      	ldr	r0, [pc, #64]	@ (10062b58 <__arm_cp.3_0>)
10062b18:	6800      	ldr	r0, [r0, #0]
10062b1a:	2134      	movs	r1, #52	@ 0x34
10062b1c:	5c40      	ldrb	r0, [r0, r1]
10062b1e:	2170      	movs	r1, #112	@ 0x70
10062b20:	4341      	muls	r1, r0
10062b22:	480e      	ldr	r0, [pc, #56]	@ (10062b5c <__arm_cp.3_1>)
10062b24:	6802      	ldr	r2, [r0, #0]
10062b26:	32a4      	adds	r2, #164	@ 0xa4
10062b28:	2000      	movs	r0, #0
10062b2a:	4603      	mov	r3, r0
10062b2c:	4299      	cmp	r1, r3
10062b2e:	d012      	beq.n	10062b56 <smp_check_is_any_pairing_ongoing+0x42>
10062b30:	6814      	ldr	r4, [r2, #0]
10062b32:	18e5      	adds	r5, r4, r3
10062b34:	7aac      	ldrb	r4, [r5, #10]
10062b36:	2660      	movs	r6, #96	@ 0x60
10062b38:	5dad      	ldrb	r5, [r5, r6]
10062b3a:	07ed      	lsls	r5, r5, #31
10062b3c:	d104      	bne.n	10062b48 <smp_check_is_any_pairing_ongoing+0x34>
10062b3e:	3460      	adds	r4, #96	@ 0x60
10062b40:	b2e4      	uxtb	r4, r4
10062b42:	2c51      	cmp	r4, #81	@ 0x51
10062b44:	d204      	bcs.n	10062b50 <smp_check_is_any_pairing_ongoing+0x3c>
10062b46:	e005      	b.n	10062b54 <smp_check_is_any_pairing_ongoing+0x40>
10062b48:	3450      	adds	r4, #80	@ 0x50
10062b4a:	b2e4      	uxtb	r4, r4
10062b4c:	2c41      	cmp	r4, #65	@ 0x41
10062b4e:	d301      	bcc.n	10062b54 <smp_check_is_any_pairing_ongoing+0x40>
10062b50:	3370      	adds	r3, #112	@ 0x70
10062b52:	e7eb      	b.n	10062b2c <smp_check_is_any_pairing_ongoing+0x18>
10062b54:	2001      	movs	r0, #1
10062b56:	bd70      	pop	{r4, r5, r6, pc}

10062b58 <__arm_cp.3_0>:
10062b58:	20002904 	.word	0x20002904

10062b5c <__arm_cp.3_1>:
10062b5c:	200029a4 	.word	0x200029a4

10062b60 <smp_sap_aci_set_authentication_req>:
10062b60:	b510      	push	{r4, lr}
10062b62:	4604      	mov	r4, r0
10062b64:	f7ff ffd6 	bl	10062b14 <smp_check_is_any_pairing_ongoing>
10062b68:	7861      	ldrb	r1, [r4, #1]
10062b6a:	2901      	cmp	r1, #1
10062b6c:	d103      	bne.n	10062b76 <smp_sap_aci_set_authentication_req+0x16>
10062b6e:	2800      	cmp	r0, #0
10062b70:	d105      	bne.n	10062b7e <smp_sap_aci_set_authentication_req+0x1e>
10062b72:	4602      	mov	r2, r0
10062b74:	e004      	b.n	10062b80 <smp_sap_aci_set_authentication_req+0x20>
10062b76:	2800      	cmp	r0, #0
10062b78:	d00f      	beq.n	10062b9a <smp_sap_aci_set_authentication_req+0x3a>
10062b7a:	220c      	movs	r2, #12
10062b7c:	e016      	b.n	10062bac <smp_sap_aci_set_authentication_req+0x4c>
10062b7e:	220c      	movs	r2, #12
10062b80:	490b      	ldr	r1, [pc, #44]	@ (10062bb0 <__arm_cp.4_0>)
10062b82:	6809      	ldr	r1, [r1, #0]
10062b84:	2340      	movs	r3, #64	@ 0x40
10062b86:	5ccb      	ldrb	r3, [r1, r3]
10062b88:	2b03      	cmp	r3, #3
10062b8a:	d101      	bne.n	10062b90 <smp_sap_aci_set_authentication_req+0x30>
10062b8c:	226e      	movs	r2, #110	@ 0x6e
10062b8e:	43d2      	mvns	r2, r2
10062b90:	2b03      	cmp	r3, #3
10062b92:	d00b      	beq.n	10062bac <smp_sap_aci_set_authentication_req+0x4c>
10062b94:	2800      	cmp	r0, #0
10062b96:	d002      	beq.n	10062b9e <smp_sap_aci_set_authentication_req+0x3e>
10062b98:	e008      	b.n	10062bac <smp_sap_aci_set_authentication_req+0x4c>
10062b9a:	4805      	ldr	r0, [pc, #20]	@ (10062bb0 <__arm_cp.4_0>)
10062b9c:	6801      	ldr	r1, [r0, #0]
10062b9e:	3130      	adds	r1, #48	@ 0x30
10062ba0:	2210      	movs	r2, #16
10062ba2:	4608      	mov	r0, r1
10062ba4:	4621      	mov	r1, r4
10062ba6:	f7f0 fbc5 	bl	10053334 <BLEPLAT_MemCpy>
10062baa:	2200      	movs	r2, #0
10062bac:	b2d0      	uxtb	r0, r2
10062bae:	bd10      	pop	{r4, pc}

10062bb0 <__arm_cp.4_0>:
10062bb0:	200029a4 	.word	0x200029a4

10062bb4 <smp_sap_aci_passkey_response>:
10062bb4:	b510      	push	{r4, lr}
10062bb6:	460c      	mov	r4, r1
10062bb8:	f005 fa46 	bl	10068048 <smp_get_remote_device_list_item>
10062bbc:	2800      	cmp	r0, #0
10062bbe:	d010      	beq.n	10062be2 <smp_sap_aci_passkey_response+0x2e>
10062bc0:	7cc1      	ldrb	r1, [r0, #19]
10062bc2:	2902      	cmp	r1, #2
10062bc4:	d10f      	bne.n	10062be6 <smp_sap_aci_passkey_response+0x32>
10062bc6:	4909      	ldr	r1, [pc, #36]	@ (10062bec <__arm_cp.5_0>)
10062bc8:	6809      	ldr	r1, [r1, #0]
10062bca:	638c      	str	r4, [r1, #56]	@ 0x38
10062bcc:	7bc1      	ldrb	r1, [r0, #15]
10062bce:	2210      	movs	r2, #16
10062bd0:	430a      	orrs	r2, r1
10062bd2:	73c2      	strb	r2, [r0, #15]
10062bd4:	200e      	movs	r0, #14
10062bd6:	f000 fc43 	bl	10063460 <tsk_notify_idx>
10062bda:	f7ef fdc4 	bl	10052766 <BLE_STACK_ProcessRequest>
10062bde:	2000      	movs	r0, #0
10062be0:	bd10      	pop	{r4, pc}
10062be2:	2002      	movs	r0, #2
10062be4:	bd10      	pop	{r4, pc}
10062be6:	200c      	movs	r0, #12
10062be8:	bd10      	pop	{r4, pc}
10062bea:	46c0      	nop			@ (mov r8, r8)

10062bec <__arm_cp.5_0>:
10062bec:	200029a4 	.word	0x200029a4

10062bf0 <smp_sap_hci_le_connection_complete_evt_hndl>:
10062bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
10062bf2:	b089      	sub	sp, #36	@ 0x24
10062bf4:	9304      	str	r3, [sp, #16]
10062bf6:	4615      	mov	r5, r2
10062bf8:	9105      	str	r1, [sp, #20]
10062bfa:	4607      	mov	r7, r0
10062bfc:	ae06      	add	r6, sp, #24
10062bfe:	ac08      	add	r4, sp, #32
10062c00:	4630      	mov	r0, r6
10062c02:	4621      	mov	r1, r4
10062c04:	f7f4 fa28 	bl	10057058 <GAP_get_current_address>
10062c08:	7822      	ldrb	r2, [r4, #0]
10062c0a:	2000      	movs	r0, #0
10062c0c:	9500      	str	r5, [sp, #0]
10062c0e:	9904      	ldr	r1, [sp, #16]
10062c10:	9101      	str	r1, [sp, #4]
10062c12:	9002      	str	r0, [sp, #8]
10062c14:	4638      	mov	r0, r7
10062c16:	9905      	ldr	r1, [sp, #20]
10062c18:	4633      	mov	r3, r6
10062c1a:	f000 f803 	bl	10062c24 <smp_connection_complete_handler>
10062c1e:	b009      	add	sp, #36	@ 0x24
10062c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10062c24 <smp_connection_complete_handler>:
10062c24:	b5f0      	push	{r4, r5, r6, r7, lr}
10062c26:	b087      	sub	sp, #28
10062c28:	9302      	str	r3, [sp, #8]
10062c2a:	9200      	str	r2, [sp, #0]
10062c2c:	9101      	str	r1, [sp, #4]
10062c2e:	493a      	ldr	r1, [pc, #232]	@ (10062d18 <__arm_cp.1_0>)
10062c30:	6809      	ldr	r1, [r1, #0]
10062c32:	2334      	movs	r3, #52	@ 0x34
10062c34:	5cca      	ldrb	r2, [r1, r3]
10062c36:	2770      	movs	r7, #112	@ 0x70
10062c38:	4357      	muls	r7, r2
10062c3a:	2500      	movs	r5, #0
10062c3c:	43ec      	mvns	r4, r5
10062c3e:	4b37      	ldr	r3, [pc, #220]	@ (10062d1c <__arm_cp.1_1>)
10062c40:	681e      	ldr	r6, [r3, #0]
10062c42:	36a4      	adds	r6, #164	@ 0xa4
10062c44:	990c      	ldr	r1, [sp, #48]	@ 0x30
10062c46:	9106      	str	r1, [sp, #24]
10062c48:	990e      	ldr	r1, [sp, #56]	@ 0x38
10062c4a:	9103      	str	r1, [sp, #12]
10062c4c:	990d      	ldr	r1, [sp, #52]	@ 0x34
10062c4e:	9105      	str	r1, [sp, #20]
10062c50:	9404      	str	r4, [sp, #16]
10062c52:	42af      	cmp	r7, r5
10062c54:	d05e      	beq.n	10062d14 <smp_connection_complete_handler+0xf0>
10062c56:	6833      	ldr	r3, [r6, #0]
10062c58:	1959      	adds	r1, r3, r5
10062c5a:	8909      	ldrh	r1, [r1, #8]
10062c5c:	3570      	adds	r5, #112	@ 0x70
10062c5e:	1c64      	adds	r4, r4, #1
10062c60:	2900      	cmp	r1, #0
10062c62:	d1f6      	bne.n	10062c52 <smp_connection_complete_handler+0x2e>
10062c64:	4294      	cmp	r4, r2
10062c66:	d255      	bcs.n	10062d14 <smp_connection_complete_handler+0xf0>
10062c68:	195f      	adds	r7, r3, r5
10062c6a:	4639      	mov	r1, r7
10062c6c:	3968      	subs	r1, #104	@ 0x68
10062c6e:	8008      	strh	r0, [r1, #0]
10062c70:	4638      	mov	r0, r7
10062c72:	3870      	subs	r0, #112	@ 0x70
10062c74:	2105      	movs	r1, #5
10062c76:	7001      	strb	r1, [r0, #0]
10062c78:	4638      	mov	r0, r7
10062c7a:	380f      	subs	r0, #15
10062c7c:	9900      	ldr	r1, [sp, #0]
10062c7e:	7001      	strb	r1, [r0, #0]
10062c80:	4638      	mov	r0, r7
10062c82:	3810      	subs	r0, #16
10062c84:	9000      	str	r0, [sp, #0]
10062c86:	9901      	ldr	r1, [sp, #4]
10062c88:	7001      	strb	r1, [r0, #0]
10062c8a:	4638      	mov	r0, r7
10062c8c:	380e      	subs	r0, #14
10062c8e:	2206      	movs	r2, #6
10062c90:	4b23      	ldr	r3, [pc, #140]	@ (10062d20 <__arm_cp.1_2>)
10062c92:	9902      	ldr	r1, [sp, #8]
10062c94:	4616      	mov	r6, r2
10062c96:	4798      	blx	r3
10062c98:	20fe      	movs	r0, #254	@ 0xfe
10062c9a:	9a06      	ldr	r2, [sp, #24]
10062c9c:	4010      	ands	r0, r2
10062c9e:	2101      	movs	r1, #1
10062ca0:	400a      	ands	r2, r1
10062ca2:	2802      	cmp	r0, #2
10062ca4:	d000      	beq.n	10062ca8 <smp_connection_complete_handler+0x84>
10062ca6:	4611      	mov	r1, r2
10062ca8:	9206      	str	r2, [sp, #24]
10062caa:	463c      	mov	r4, r7
10062cac:	3c6f      	subs	r4, #111	@ 0x6f
10062cae:	7021      	strb	r1, [r4, #0]
10062cb0:	2802      	cmp	r0, #2
10062cb2:	9805      	ldr	r0, [sp, #20]
10062cb4:	9903      	ldr	r1, [sp, #12]
10062cb6:	d000      	beq.n	10062cba <smp_connection_complete_handler+0x96>
10062cb8:	4601      	mov	r1, r0
10062cba:	463d      	mov	r5, r7
10062cbc:	3d6e      	subs	r5, #110	@ 0x6e
10062cbe:	4628      	mov	r0, r5
10062cc0:	4632      	mov	r2, r6
10062cc2:	4b17      	ldr	r3, [pc, #92]	@ (10062d20 <__arm_cp.1_2>)
10062cc4:	4798      	blx	r3
10062cc6:	4638      	mov	r0, r7
10062cc8:	3817      	subs	r0, #23
10062cca:	9906      	ldr	r1, [sp, #24]
10062ccc:	7001      	strb	r1, [r0, #0]
10062cce:	4638      	mov	r0, r7
10062cd0:	3816      	subs	r0, #22
10062cd2:	9905      	ldr	r1, [sp, #20]
10062cd4:	4632      	mov	r2, r6
10062cd6:	4b12      	ldr	r3, [pc, #72]	@ (10062d20 <__arm_cp.1_2>)
10062cd8:	4798      	blx	r3
10062cda:	4638      	mov	r0, r7
10062cdc:	3858      	subs	r0, #88	@ 0x58
10062cde:	2100      	movs	r1, #0
10062ce0:	2204      	movs	r2, #4
10062ce2:	f7f0 fb37 	bl	10053354 <BLEPLAT_MemSet>
10062ce6:	1f38      	subs	r0, r7, #4
10062ce8:	3f66      	subs	r7, #102	@ 0x66
10062cea:	2110      	movs	r1, #16
10062cec:	7039      	strb	r1, [r7, #0]
10062cee:	9904      	ldr	r1, [sp, #16]
10062cf0:	6001      	str	r1, [r0, #0]
10062cf2:	7820      	ldrb	r0, [r4, #0]
10062cf4:	4629      	mov	r1, r5
10062cf6:	f005 f967 	bl	10067fc8 <smp_cmn_is_peer_rejectlisted>
10062cfa:	2800      	cmp	r0, #0
10062cfc:	d005      	beq.n	10062d0a <smp_connection_complete_handler+0xe6>
10062cfe:	9800      	ldr	r0, [sp, #0]
10062d00:	7800      	ldrb	r0, [r0, #0]
10062d02:	07c0      	lsls	r0, r0, #31
10062d04:	d001      	beq.n	10062d0a <smp_connection_complete_handler+0xe6>
10062d06:	20fb      	movs	r0, #251	@ 0xfb
10062d08:	7038      	strb	r0, [r7, #0]
10062d0a:	200e      	movs	r0, #14
10062d0c:	f000 fba8 	bl	10063460 <tsk_notify_idx>
10062d10:	f7ef fd29 	bl	10052766 <BLE_STACK_ProcessRequest>
10062d14:	b007      	add	sp, #28
10062d16:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062d18 <__arm_cp.1_0>:
10062d18:	20002904 	.word	0x20002904

10062d1c <__arm_cp.1_1>:
10062d1c:	200029a4 	.word	0x200029a4

10062d20 <__arm_cp.1_2>:
10062d20:	10053335 	.word	0x10053335

10062d24 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl>:
10062d24:	b5f0      	push	{r4, r5, r6, r7, lr}
10062d26:	b089      	sub	sp, #36	@ 0x24
10062d28:	9304      	str	r3, [sp, #16]
10062d2a:	4617      	mov	r7, r2
10062d2c:	9105      	str	r1, [sp, #20]
10062d2e:	4606      	mov	r6, r0
10062d30:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
10062d32:	4620      	mov	r0, r4
10062d34:	f7fe f8d0 	bl	10060ed8 <Is_Address_Initialized>
10062d38:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10062d3a:	2800      	cmp	r0, #0
10062d3c:	d008      	beq.n	10062d50 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl+0x2c>
10062d3e:	a807      	add	r0, sp, #28
10062d40:	2206      	movs	r2, #6
10062d42:	4621      	mov	r1, r4
10062d44:	f7f0 faf6 	bl	10053334 <BLEPLAT_MemCpy>
10062d48:	a806      	add	r0, sp, #24
10062d4a:	2201      	movs	r2, #1
10062d4c:	7002      	strb	r2, [r0, #0]
10062d4e:	e005      	b.n	10062d5c <smp_sap_hci_le_enhanced_connection_complete_evt_hndl+0x38>
10062d50:	a807      	add	r0, sp, #28
10062d52:	ac06      	add	r4, sp, #24
10062d54:	4621      	mov	r1, r4
10062d56:	f7f4 f97f 	bl	10057058 <GAP_get_current_address>
10062d5a:	7822      	ldrb	r2, [r4, #0]
10062d5c:	9700      	str	r7, [sp, #0]
10062d5e:	9804      	ldr	r0, [sp, #16]
10062d60:	9001      	str	r0, [sp, #4]
10062d62:	9502      	str	r5, [sp, #8]
10062d64:	ab07      	add	r3, sp, #28
10062d66:	4630      	mov	r0, r6
10062d68:	9905      	ldr	r1, [sp, #20]
10062d6a:	f7ff ff5b 	bl	10062c24 <smp_connection_complete_handler>
10062d6e:	b009      	add	sp, #36	@ 0x24
10062d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10062d74 <smp_sap_hci_le_long_term_key_request_evt_hndl>:
10062d74:	b5f0      	push	{r4, r5, r6, r7, lr}
10062d76:	b089      	sub	sp, #36	@ 0x24
10062d78:	4615      	mov	r5, r2
10062d7a:	460e      	mov	r6, r1
10062d7c:	f005 f964 	bl	10068048 <smp_get_remote_device_list_item>
10062d80:	2800      	cmp	r0, #0
10062d82:	d070      	beq.n	10062e66 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xf2>
10062d84:	4604      	mov	r4, r0
10062d86:	7a80      	ldrb	r0, [r0, #10]
10062d88:	28bc      	cmp	r0, #188	@ 0xbc
10062d8a:	d106      	bne.n	10062d9a <smp_sap_hci_le_long_term_key_request_evt_hndl+0x26>
10062d8c:	8927      	ldrh	r7, [r4, #8]
10062d8e:	a808      	add	r0, sp, #32
10062d90:	2100      	movs	r1, #0
10062d92:	8001      	strh	r1, [r0, #0]
10062d94:	4626      	mov	r6, r4
10062d96:	3628      	adds	r6, #40	@ 0x28
10062d98:	e056      	b.n	10062e48 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd4>
10062d9a:	4627      	mov	r7, r4
10062d9c:	3730      	adds	r7, #48	@ 0x30
10062d9e:	7de1      	ldrb	r1, [r4, #23]
10062da0:	0709      	lsls	r1, r1, #28
10062da2:	d409      	bmi.n	10062db8 <smp_sap_hci_le_long_term_key_request_evt_hndl+0x44>
10062da4:	4620      	mov	r0, r4
10062da6:	3028      	adds	r0, #40	@ 0x28
10062da8:	2208      	movs	r2, #8
10062daa:	4631      	mov	r1, r6
10062dac:	f7f0 fac2 	bl	10053334 <BLEPLAT_MemCpy>
10062db0:	703d      	strb	r5, [r7, #0]
10062db2:	0a28      	lsrs	r0, r5, #8
10062db4:	7078      	strb	r0, [r7, #1]
10062db6:	7aa0      	ldrb	r0, [r4, #10]
10062db8:	8921      	ldrh	r1, [r4, #8]
10062dba:	9102      	str	r1, [sp, #8]
10062dbc:	a908      	add	r1, sp, #32
10062dbe:	2200      	movs	r2, #0
10062dc0:	800a      	strh	r2, [r1, #0]
10062dc2:	4626      	mov	r6, r4
10062dc4:	3628      	adds	r6, #40	@ 0x28
10062dc6:	28bc      	cmp	r0, #188	@ 0xbc
10062dc8:	d03d      	beq.n	10062e46 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd2>
10062dca:	4625      	mov	r5, r4
10062dcc:	351c      	adds	r5, #28
10062dce:	28f1      	cmp	r0, #241	@ 0xf1
10062dd0:	d10f      	bne.n	10062df2 <smp_sap_hci_le_long_term_key_request_evt_hndl+0x7e>
10062dd2:	7de0      	ldrb	r0, [r4, #23]
10062dd4:	0700      	lsls	r0, r0, #28
10062dd6:	d436      	bmi.n	10062e46 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd2>
10062dd8:	aa07      	add	r2, sp, #28
10062dda:	9201      	str	r2, [sp, #4]
10062ddc:	4628      	mov	r0, r5
10062dde:	4631      	mov	r1, r6
10062de0:	f7ff fa66 	bl	100622b0 <smp_sap_crt_generate_ediv>
10062de4:	2202      	movs	r2, #2
10062de6:	9801      	ldr	r0, [sp, #4]
10062de8:	4639      	mov	r1, r7
10062dea:	f7f0 fac3 	bl	10053374 <BLEPLAT_MemCmp>
10062dee:	2800      	cmp	r0, #0
10062df0:	d021      	beq.n	10062e36 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xc2>
10062df2:	4638      	mov	r0, r7
10062df4:	4631      	mov	r1, r6
10062df6:	4622      	mov	r2, r4
10062df8:	f004 f949 	bl	1006708e <smp_dep_sdb_find_matching_ltk_read_record>
10062dfc:	2800      	cmp	r0, #0
10062dfe:	d01a      	beq.n	10062e36 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xc2>
10062e00:	9d02      	ldr	r5, [sp, #8]
10062e02:	4628      	mov	r0, r5
10062e04:	f7f7 fa09 	bl	1005a21a <hci_le_long_term_key_request_negative_reply_api>
10062e08:	7e20      	ldrb	r0, [r4, #24]
10062e0a:	0780      	lsls	r0, r0, #30
10062e0c:	d00c      	beq.n	10062e28 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xb4>
10062e0e:	4628      	mov	r0, r5
10062e10:	f005 f8fa 	bl	10068008 <smp_get_remote_device_list_index>
10062e14:	4602      	mov	r2, r0
10062e16:	2001      	movs	r0, #1
10062e18:	2100      	movs	r1, #0
10062e1a:	4b15      	ldr	r3, [pc, #84]	@ (10062e70 <__arm_cp.3_1>)
10062e1c:	f7ff fdbc 	bl	10062998 <smp_timer_reset>
10062e20:	7e20      	ldrb	r0, [r4, #24]
10062e22:	21fc      	movs	r1, #252	@ 0xfc
10062e24:	4001      	ands	r1, r0
10062e26:	7621      	strb	r1, [r4, #24]
10062e28:	2002      	movs	r0, #2
10062e2a:	2203      	movs	r2, #3
10062e2c:	2300      	movs	r3, #0
10062e2e:	4629      	mov	r1, r5
10062e30:	f001 ff80 	bl	10064d34 <aci_gap_pairing_complete_event_push_noinline>
10062e34:	e017      	b.n	10062e66 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xf2>
10062e36:	480d      	ldr	r0, [pc, #52]	@ (10062e6c <__arm_cp.3_0>)
10062e38:	6800      	ldr	r0, [r0, #0]
10062e3a:	3008      	adds	r0, #8
10062e3c:	aa08      	add	r2, sp, #32
10062e3e:	4629      	mov	r1, r5
10062e40:	4633      	mov	r3, r6
10062e42:	f7ff fa6b 	bl	1006231c <smp_crt_diversify>
10062e46:	9f02      	ldr	r7, [sp, #8]
10062e48:	ad03      	add	r5, sp, #12
10062e4a:	2100      	movs	r1, #0
10062e4c:	2210      	movs	r2, #16
10062e4e:	4628      	mov	r0, r5
10062e50:	f7f0 fa80 	bl	10053354 <BLEPLAT_MemSet>
10062e54:	7c22      	ldrb	r2, [r4, #16]
10062e56:	4628      	mov	r0, r5
10062e58:	4631      	mov	r1, r6
10062e5a:	f7f0 fa6b 	bl	10053334 <BLEPLAT_MemCpy>
10062e5e:	4638      	mov	r0, r7
10062e60:	4629      	mov	r1, r5
10062e62:	f7f7 f9cb 	bl	1005a1fc <hci_le_long_term_key_request_reply_api>
10062e66:	b009      	add	sp, #36	@ 0x24
10062e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
10062e6a:	46c0      	nop			@ (mov r8, r8)

10062e6c <__arm_cp.3_0>:
10062e6c:	20002904 	.word	0x20002904

10062e70 <__arm_cp.3_1>:
10062e70:	00007530 	.word	0x00007530

10062e74 <smp_sap_hci_encryption_change_evt_hndl>:
10062e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062e76:	460e      	mov	r6, r1
10062e78:	4605      	mov	r5, r0
10062e7a:	4610      	mov	r0, r2
10062e7c:	f005 f8e4 	bl	10068048 <smp_get_remote_device_list_item>
10062e80:	2800      	cmp	r0, #0
10062e82:	d056      	beq.n	10062f32 <smp_sap_hci_encryption_change_evt_hndl+0xbe>
10062e84:	4604      	mov	r4, r0
10062e86:	4607      	mov	r7, r0
10062e88:	2e00      	cmp	r6, #0
10062e8a:	d00b      	beq.n	10062ea4 <smp_sap_hci_encryption_change_evt_hndl+0x30>
10062e8c:	2000      	movs	r0, #0
10062e8e:	72b8      	strb	r0, [r7, #10]
10062e90:	3408      	adds	r4, #8
10062e92:	2201      	movs	r2, #1
10062e94:	2d06      	cmp	r5, #6
10062e96:	d132      	bne.n	10062efe <smp_sap_hci_encryption_change_evt_hndl+0x8a>
10062e98:	8939      	ldrh	r1, [r7, #8]
10062e9a:	4615      	mov	r5, r2
10062e9c:	2e06      	cmp	r6, #6
10062e9e:	d00e      	beq.n	10062ebe <smp_sap_hci_encryption_change_evt_hndl+0x4a>
10062ea0:	2205      	movs	r2, #5
10062ea2:	e00d      	b.n	10062ec0 <smp_sap_hci_encryption_change_evt_hndl+0x4c>
10062ea4:	7af9      	ldrb	r1, [r7, #11]
10062ea6:	2001      	movs	r0, #1
10062ea8:	4308      	orrs	r0, r1
10062eaa:	72f8      	strb	r0, [r7, #11]
10062eac:	7cf9      	ldrb	r1, [r7, #19]
10062eae:	1e89      	subs	r1, r1, #2
10062eb0:	2902      	cmp	r1, #2
10062eb2:	d810      	bhi.n	10062ed6 <smp_sap_hci_encryption_change_evt_hndl+0x62>
10062eb4:	7df9      	ldrb	r1, [r7, #23]
10062eb6:	0709      	lsls	r1, r1, #28
10062eb8:	d508      	bpl.n	10062ecc <smp_sap_hci_encryption_change_evt_hndl+0x58>
10062eba:	2104      	movs	r1, #4
10062ebc:	e007      	b.n	10062ece <smp_sap_hci_encryption_change_evt_hndl+0x5a>
10062ebe:	2204      	movs	r2, #4
10062ec0:	2002      	movs	r0, #2
10062ec2:	2300      	movs	r3, #0
10062ec4:	f001 ff36 	bl	10064d34 <aci_gap_pairing_complete_event_push_noinline>
10062ec8:	462a      	mov	r2, r5
10062eca:	e018      	b.n	10062efe <smp_sap_hci_encryption_change_evt_hndl+0x8a>
10062ecc:	2102      	movs	r1, #2
10062ece:	22f9      	movs	r2, #249	@ 0xf9
10062ed0:	4010      	ands	r0, r2
10062ed2:	1840      	adds	r0, r0, r1
10062ed4:	72f8      	strb	r0, [r7, #11]
10062ed6:	7ab8      	ldrb	r0, [r7, #10]
10062ed8:	28ad      	cmp	r0, #173	@ 0xad
10062eda:	d005      	beq.n	10062ee8 <smp_sap_hci_encryption_change_evt_hndl+0x74>
10062edc:	28ae      	cmp	r0, #174	@ 0xae
10062ede:	d005      	beq.n	10062eec <smp_sap_hci_encryption_change_evt_hndl+0x78>
10062ee0:	28bc      	cmp	r0, #188	@ 0xbc
10062ee2:	d127      	bne.n	10062f34 <smp_sap_hci_encryption_change_evt_hndl+0xc0>
10062ee4:	20bf      	movs	r0, #191	@ 0xbf
10062ee6:	e002      	b.n	10062eee <smp_sap_hci_encryption_change_evt_hndl+0x7a>
10062ee8:	20af      	movs	r0, #175	@ 0xaf
10062eea:	e000      	b.n	10062eee <smp_sap_hci_encryption_change_evt_hndl+0x7a>
10062eec:	20f0      	movs	r0, #240	@ 0xf0
10062eee:	72b8      	strb	r0, [r7, #10]
10062ef0:	3408      	adds	r4, #8
10062ef2:	200e      	movs	r0, #14
10062ef4:	f000 fab4 	bl	10063460 <tsk_notify_idx>
10062ef8:	f7ef fc35 	bl	10052766 <BLE_STACK_ProcessRequest>
10062efc:	2200      	movs	r2, #0
10062efe:	2060      	movs	r0, #96	@ 0x60
10062f00:	5c38      	ldrb	r0, [r7, r0]
10062f02:	07c0      	lsls	r0, r0, #31
10062f04:	d10b      	bne.n	10062f1e <smp_sap_hci_encryption_change_evt_hndl+0xaa>
10062f06:	7eb8      	ldrb	r0, [r7, #26]
10062f08:	06c1      	lsls	r1, r0, #27
10062f0a:	d505      	bpl.n	10062f18 <smp_sap_hci_encryption_change_evt_hndl+0xa4>
10062f0c:	21ef      	movs	r1, #239	@ 0xef
10062f0e:	4001      	ands	r1, r0
10062f10:	76b9      	strb	r1, [r7, #26]
10062f12:	b241      	sxtb	r1, r0
10062f14:	2900      	cmp	r1, #0
10062f16:	d418      	bmi.n	10062f4a <smp_sap_hci_encryption_change_evt_hndl+0xd6>
10062f18:	2a00      	cmp	r2, #0
10062f1a:	d119      	bne.n	10062f50 <smp_sap_hci_encryption_change_evt_hndl+0xdc>
10062f1c:	e009      	b.n	10062f32 <smp_sap_hci_encryption_change_evt_hndl+0xbe>
10062f1e:	7e38      	ldrb	r0, [r7, #24]
10062f20:	21fc      	movs	r1, #252	@ 0xfc
10062f22:	4001      	ands	r1, r0
10062f24:	7639      	strb	r1, [r7, #24]
10062f26:	2103      	movs	r1, #3
10062f28:	4001      	ands	r1, r0
10062f2a:	1e48      	subs	r0, r1, #1
10062f2c:	4181      	sbcs	r1, r0
10062f2e:	430a      	orrs	r2, r1
10062f30:	d10e      	bne.n	10062f50 <smp_sap_hci_encryption_change_evt_hndl+0xdc>
10062f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062f34:	2d06      	cmp	r5, #6
10062f36:	d1db      	bne.n	10062ef0 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
10062f38:	28f1      	cmp	r0, #241	@ 0xf1
10062f3a:	d1d9      	bne.n	10062ef0 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
10062f3c:	8939      	ldrh	r1, [r7, #8]
10062f3e:	2002      	movs	r0, #2
10062f40:	2200      	movs	r2, #0
10062f42:	4613      	mov	r3, r2
10062f44:	f001 fef6 	bl	10064d34 <aci_gap_pairing_complete_event_push_noinline>
10062f48:	e7d2      	b.n	10062ef0 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
10062f4a:	216f      	movs	r1, #111	@ 0x6f
10062f4c:	4008      	ands	r0, r1
10062f4e:	76b8      	strb	r0, [r7, #26]
10062f50:	8820      	ldrh	r0, [r4, #0]
10062f52:	f005 f859 	bl	10068008 <smp_get_remote_device_list_index>
10062f56:	4602      	mov	r2, r0
10062f58:	2001      	movs	r0, #1
10062f5a:	2100      	movs	r1, #0
10062f5c:	4b01      	ldr	r3, [pc, #4]	@ (10062f64 <__arm_cp.4_0>)
10062f5e:	f7ff fd1b 	bl	10062998 <smp_timer_reset>
10062f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10062f64 <__arm_cp.4_0>:
10062f64:	00007530 	.word	0x00007530

10062f68 <smp_sap_hci_disconnection_complete_evt_hndl>:
10062f68:	b510      	push	{r4, lr}
10062f6a:	f005 f86d 	bl	10068048 <smp_get_remote_device_list_item>
10062f6e:	2800      	cmp	r0, #0
10062f70:	d025      	beq.n	10062fbe <smp_sap_hci_disconnection_complete_evt_hndl+0x56>
10062f72:	4604      	mov	r4, r0
10062f74:	8900      	ldrh	r0, [r0, #8]
10062f76:	f005 f847 	bl	10068008 <smp_get_remote_device_list_index>
10062f7a:	4602      	mov	r2, r0
10062f7c:	2001      	movs	r0, #1
10062f7e:	2100      	movs	r1, #0
10062f80:	4b0f      	ldr	r3, [pc, #60]	@ (10062fc0 <__arm_cp.5_0>)
10062f82:	f7ff fd09 	bl	10062998 <smp_timer_reset>
10062f86:	8920      	ldrh	r0, [r4, #8]
10062f88:	f7ff fcca 	bl	10062920 <smp_rxp_flush_packet_queues>
10062f8c:	2060      	movs	r0, #96	@ 0x60
10062f8e:	5c20      	ldrb	r0, [r4, r0]
10062f90:	07c0      	lsls	r0, r0, #31
10062f92:	7aa0      	ldrb	r0, [r4, #10]
10062f94:	d104      	bne.n	10062fa0 <smp_sap_hci_disconnection_complete_evt_hndl+0x38>
10062f96:	3060      	adds	r0, #96	@ 0x60
10062f98:	b2c0      	uxtb	r0, r0
10062f9a:	2851      	cmp	r0, #81	@ 0x51
10062f9c:	d304      	bcc.n	10062fa8 <smp_sap_hci_disconnection_complete_evt_hndl+0x40>
10062f9e:	e007      	b.n	10062fb0 <smp_sap_hci_disconnection_complete_evt_hndl+0x48>
10062fa0:	3050      	adds	r0, #80	@ 0x50
10062fa2:	b2c0      	uxtb	r0, r0
10062fa4:	2840      	cmp	r0, #64	@ 0x40
10062fa6:	d803      	bhi.n	10062fb0 <smp_sap_hci_disconnection_complete_evt_hndl+0x48>
10062fa8:	2102      	movs	r1, #2
10062faa:	4620      	mov	r0, r4
10062fac:	f004 f8ea 	bl	10067184 <smp_pp3_pairing_completed_update_stats>
10062fb0:	20fe      	movs	r0, #254	@ 0xfe
10062fb2:	72a0      	strb	r0, [r4, #10]
10062fb4:	200e      	movs	r0, #14
10062fb6:	f000 fa53 	bl	10063460 <tsk_notify_idx>
10062fba:	f7ef fbd4 	bl	10052766 <BLE_STACK_ProcessRequest>
10062fbe:	bd10      	pop	{r4, pc}

10062fc0 <__arm_cp.5_0>:
10062fc0:	00007530 	.word	0x00007530

10062fc4 <smp_sap_scp_force_debug_key_usage>:
10062fc4:	b5b0      	push	{r4, r5, r7, lr}
10062fc6:	4605      	mov	r5, r0
10062fc8:	2400      	movs	r4, #0
10062fca:	4620      	mov	r0, r4
10062fcc:	f005 f888 	bl	100680e0 <smp_scp_is_another_sc_pairing_ongoing>
10062fd0:	2800      	cmp	r0, #0
10062fd2:	d001      	beq.n	10062fd8 <smp_sap_scp_force_debug_key_usage+0x14>
10062fd4:	240c      	movs	r4, #12
10062fd6:	e004      	b.n	10062fe2 <smp_sap_scp_force_debug_key_usage+0x1e>
10062fd8:	2d01      	cmp	r5, #1
10062fda:	d102      	bne.n	10062fe2 <smp_sap_scp_force_debug_key_usage+0x1e>
10062fdc:	2001      	movs	r0, #1
10062fde:	f005 f89f 	bl	10068120 <smp_scp_init_ucfg_weak>
10062fe2:	4620      	mov	r0, r4
10062fe4:	bdb0      	pop	{r4, r5, r7, pc}

10062fe6 <secure_connections_csr_ucfg_weak>:
10062fe6:	2000      	movs	r0, #0
10062fe8:	4770      	bx	lr

10062fea <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg_weak>:
10062fea:	4770      	bx	lr

10062fec <smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg_weak>:
10062fec:	4770      	bx	lr
	...

10062ff0 <smp_sap_l2c_acl_data_hndl>:
10062ff0:	b5b0      	push	{r4, r5, r7, lr}
10062ff2:	460c      	mov	r4, r1
10062ff4:	4605      	mov	r5, r0
10062ff6:	8808      	ldrh	r0, [r1, #0]
10062ff8:	f005 f826 	bl	10068048 <smp_get_remote_device_list_item>
10062ffc:	2800      	cmp	r0, #0
10062ffe:	d025      	beq.n	1006304c <smp_sap_l2c_acl_data_hndl+0x5c>
10063000:	2d00      	cmp	r5, #0
10063002:	d00f      	beq.n	10063024 <smp_sap_l2c_acl_data_hndl+0x34>
10063004:	2d01      	cmp	r5, #1
10063006:	d121      	bne.n	1006304c <smp_sap_l2c_acl_data_hndl+0x5c>
10063008:	8860      	ldrh	r0, [r4, #2]
1006300a:	2841      	cmp	r0, #65	@ 0x41
1006300c:	d81e      	bhi.n	1006304c <smp_sap_l2c_acl_data_hndl+0x5c>
1006300e:	4812      	ldr	r0, [pc, #72]	@ (10063058 <__arm_cp.0_0>)
10063010:	6800      	ldr	r0, [r0, #0]
10063012:	4621      	mov	r1, r4
10063014:	f000 fc1a 	bl	1006384c <ACL_list_insert_tail>
10063018:	200f      	movs	r0, #15
1006301a:	f000 fa21 	bl	10063460 <tsk_notify_idx>
1006301e:	f7ef fba2 	bl	10052766 <BLE_STACK_ProcessRequest>
10063022:	e016      	b.n	10063052 <smp_sap_l2c_acl_data_hndl+0x62>
10063024:	6861      	ldr	r1, [r4, #4]
10063026:	7a09      	ldrb	r1, [r1, #8]
10063028:	290b      	cmp	r1, #11
1006302a:	d109      	bne.n	10063040 <smp_sap_l2c_acl_data_hndl+0x50>
1006302c:	7e01      	ldrb	r1, [r0, #24]
1006302e:	2203      	movs	r2, #3
10063030:	400a      	ands	r2, r1
10063032:	2a01      	cmp	r2, #1
10063034:	d10a      	bne.n	1006304c <smp_sap_l2c_acl_data_hndl+0x5c>
10063036:	22fc      	movs	r2, #252	@ 0xfc
10063038:	4011      	ands	r1, r2
1006303a:	1c89      	adds	r1, r1, #2
1006303c:	7601      	strb	r1, [r0, #24]
1006303e:	e005      	b.n	1006304c <smp_sap_l2c_acl_data_hndl+0x5c>
10063040:	1f8a      	subs	r2, r1, #6
10063042:	b2d2      	uxtb	r2, r2
10063044:	2a04      	cmp	r2, #4
10063046:	d801      	bhi.n	1006304c <smp_sap_l2c_acl_data_hndl+0x5c>
10063048:	f004 fe0c 	bl	10067c64 <smp_pp3_keys_distribution_signaling_ack>
1006304c:	4620      	mov	r0, r4
1006304e:	f7f2 fd09 	bl	10055a64 <ACL_pkt_release>
10063052:	2000      	movs	r0, #0
10063054:	bdb0      	pop	{r4, r5, r7, pc}
10063056:	46c0      	nop			@ (mov r8, r8)

10063058 <__arm_cp.0_0>:
10063058:	200029a4 	.word	0x200029a4

1006305c <smp_get_sec_level_for_mode1>:
1006305c:	b510      	push	{r4, lr}
1006305e:	7ac3      	ldrb	r3, [r0, #11]
10063060:	075c      	lsls	r4, r3, #29
10063062:	0fa2      	lsrs	r2, r4, #30
10063064:	d009      	beq.n	1006307a <smp_get_sec_level_for_mode1+0x1e>
10063066:	2201      	movs	r2, #1
10063068:	4013      	ands	r3, r2
1006306a:	425a      	negs	r2, r3
1006306c:	415a      	adcs	r2, r3
1006306e:	7c03      	ldrb	r3, [r0, #16]
10063070:	2003      	movs	r0, #3
10063072:	2b10      	cmp	r3, #16
10063074:	d009      	beq.n	1006308a <smp_get_sec_level_for_mode1+0x2e>
10063076:	4603      	mov	r3, r0
10063078:	e008      	b.n	1006308c <smp_get_sec_level_for_mode1+0x30>
1006307a:	07da      	lsls	r2, r3, #31
1006307c:	d10a      	bne.n	10063094 <smp_get_sec_level_for_mode1+0x38>
1006307e:	7a80      	ldrb	r0, [r0, #10]
10063080:	2201      	movs	r2, #1
10063082:	28f1      	cmp	r0, #241	@ 0xf1
10063084:	d009      	beq.n	1006309a <smp_get_sec_level_for_mode1+0x3e>
10063086:	4613      	mov	r3, r2
10063088:	e008      	b.n	1006309c <smp_get_sec_level_for_mode1+0x40>
1006308a:	2304      	movs	r3, #4
1006308c:	2c00      	cmp	r4, #0
1006308e:	d405      	bmi.n	1006309c <smp_get_sec_level_for_mode1+0x40>
10063090:	4603      	mov	r3, r0
10063092:	e003      	b.n	1006309c <smp_get_sec_level_for_mode1+0x40>
10063094:	2302      	movs	r3, #2
10063096:	2200      	movs	r2, #0
10063098:	e000      	b.n	1006309c <smp_get_sec_level_for_mode1+0x40>
1006309a:	2302      	movs	r3, #2
1006309c:	2a00      	cmp	r2, #0
1006309e:	d101      	bne.n	100630a4 <smp_get_sec_level_for_mode1+0x48>
100630a0:	4618      	mov	r0, r3
100630a2:	e000      	b.n	100630a6 <smp_get_sec_level_for_mode1+0x4a>
100630a4:	2001      	movs	r0, #1
100630a6:	2900      	cmp	r1, #0
100630a8:	d000      	beq.n	100630ac <smp_get_sec_level_for_mode1+0x50>
100630aa:	4618      	mov	r0, r3
100630ac:	bd10      	pop	{r4, pc}

100630ae <smp_sap_get_security_level>:
100630ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100630b0:	461c      	mov	r4, r3
100630b2:	4616      	mov	r6, r2
100630b4:	460d      	mov	r5, r1
100630b6:	2100      	movs	r1, #0
100630b8:	7029      	strb	r1, [r5, #0]
100630ba:	7011      	strb	r1, [r2, #0]
100630bc:	7019      	strb	r1, [r3, #0]
100630be:	f004 ffc3 	bl	10068048 <smp_get_remote_device_list_item>
100630c2:	2800      	cmp	r0, #0
100630c4:	d017      	beq.n	100630f6 <smp_sap_get_security_level+0x48>
100630c6:	4607      	mov	r7, r0
100630c8:	2101      	movs	r1, #1
100630ca:	7029      	strb	r1, [r5, #0]
100630cc:	7a80      	ldrb	r0, [r0, #10]
100630ce:	28f1      	cmp	r0, #241	@ 0xf1
100630d0:	d110      	bne.n	100630f4 <smp_sap_get_security_level+0x46>
100630d2:	9100      	str	r1, [sp, #0]
100630d4:	2100      	movs	r1, #0
100630d6:	4638      	mov	r0, r7
100630d8:	f7ff ffc0 	bl	1006305c <smp_get_sec_level_for_mode1>
100630dc:	7030      	strb	r0, [r6, #0]
100630de:	2801      	cmp	r0, #1
100630e0:	d109      	bne.n	100630f6 <smp_sap_get_security_level+0x48>
100630e2:	2002      	movs	r0, #2
100630e4:	7028      	strb	r0, [r5, #0]
100630e6:	7af9      	ldrb	r1, [r7, #11]
100630e8:	0749      	lsls	r1, r1, #29
100630ea:	0f89      	lsrs	r1, r1, #30
100630ec:	d100      	bne.n	100630f0 <smp_sap_get_security_level+0x42>
100630ee:	9800      	ldr	r0, [sp, #0]
100630f0:	7020      	strb	r0, [r4, #0]
100630f2:	e000      	b.n	100630f6 <smp_sap_get_security_level+0x48>
100630f4:	7031      	strb	r1, [r6, #0]
100630f6:	2000      	movs	r0, #0
100630f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100630fa <smp_sap_get_remote_address_check_addr_type>:
100630fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100630fc:	461c      	mov	r4, r3
100630fe:	4615      	mov	r5, r2
10063100:	460f      	mov	r7, r1
10063102:	f004 ffa1 	bl	10068048 <smp_get_remote_device_list_item>
10063106:	2800      	cmp	r0, #0
10063108:	d016      	beq.n	10063138 <smp_sap_get_remote_address_check_addr_type+0x3e>
1006310a:	4606      	mov	r6, r0
1006310c:	1c81      	adds	r1, r0, #2
1006310e:	2206      	movs	r2, #6
10063110:	4628      	mov	r0, r5
10063112:	f7f0 f90f 	bl	10053334 <BLEPLAT_MemCpy>
10063116:	7870      	ldrb	r0, [r6, #1]
10063118:	4669      	mov	r1, sp
1006311a:	7008      	strb	r0, [r1, #0]
1006311c:	2f00      	cmp	r7, #0
1006311e:	d01f      	beq.n	10063160 <smp_sap_get_remote_address_check_addr_type+0x66>
10063120:	2800      	cmp	r0, #0
10063122:	d01d      	beq.n	10063160 <smp_sap_get_remote_address_check_addr_type+0x66>
10063124:	2801      	cmp	r0, #1
10063126:	d109      	bne.n	1006313c <smp_sap_get_remote_address_check_addr_type+0x42>
10063128:	79f1      	ldrb	r1, [r6, #7]
1006312a:	098a      	lsrs	r2, r1, #6
1006312c:	2001      	movs	r0, #1
1006312e:	2a02      	cmp	r2, #2
10063130:	d816      	bhi.n	10063160 <smp_sap_get_remote_address_check_addr_type+0x66>
10063132:	2940      	cmp	r1, #64	@ 0x40
10063134:	d203      	bcs.n	1006313e <smp_sap_get_remote_address_check_addr_type+0x44>
10063136:	e013      	b.n	10063160 <smp_sap_get_remote_address_check_addr_type+0x66>
10063138:	2002      	movs	r0, #2
1006313a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006313c:	79f1      	ldrb	r1, [r6, #7]
1006313e:	20c0      	movs	r0, #192	@ 0xc0
10063140:	4008      	ands	r0, r1
10063142:	2840      	cmp	r0, #64	@ 0x40
10063144:	d108      	bne.n	10063158 <smp_sap_get_remote_address_check_addr_type+0x5e>
10063146:	4669      	mov	r1, sp
10063148:	4630      	mov	r0, r6
1006314a:	462a      	mov	r2, r5
1006314c:	f003 ff88 	bl	10067060 <smp_dep_sdb_find_bonding_record_read_address>
10063150:	2800      	cmp	r0, #0
10063152:	d003      	beq.n	1006315c <smp_sap_get_remote_address_check_addr_type+0x62>
10063154:	2081      	movs	r0, #129	@ 0x81
10063156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063158:	2086      	movs	r0, #134	@ 0x86
1006315a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006315c:	4668      	mov	r0, sp
1006315e:	7800      	ldrb	r0, [r0, #0]
10063160:	7020      	strb	r0, [r4, #0]
10063162:	2000      	movs	r0, #0
10063164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10063166 <smp_sap_check_is_peer_device_bonded>:
10063166:	b5b0      	push	{r4, r5, r7, lr}
10063168:	f004 ff6e 	bl	10068048 <smp_get_remote_device_list_item>
1006316c:	2800      	cmp	r0, #0
1006316e:	d011      	beq.n	10063194 <smp_sap_check_is_peer_device_bonded+0x2e>
10063170:	4604      	mov	r4, r0
10063172:	2500      	movs	r5, #0
10063174:	4629      	mov	r1, r5
10063176:	f003 ff1b 	bl	10066fb0 <smp_dep_sdb_find_bonding_record_by_conn_addr>
1006317a:	2800      	cmp	r0, #0
1006317c:	d00b      	beq.n	10063196 <smp_sap_check_is_peer_device_bonded+0x30>
1006317e:	7aa1      	ldrb	r1, [r4, #10]
10063180:	29f1      	cmp	r1, #241	@ 0xf1
10063182:	d105      	bne.n	10063190 <smp_sap_check_is_peer_device_bonded+0x2a>
10063184:	7ba1      	ldrb	r1, [r4, #14]
10063186:	07ca      	lsls	r2, r1, #31
10063188:	d002      	beq.n	10063190 <smp_sap_check_is_peer_device_bonded+0x2a>
1006318a:	0789      	lsls	r1, r1, #30
1006318c:	d500      	bpl.n	10063190 <smp_sap_check_is_peer_device_bonded+0x2a>
1006318e:	2000      	movs	r0, #0
10063190:	4605      	mov	r5, r0
10063192:	e000      	b.n	10063196 <smp_sap_check_is_peer_device_bonded+0x30>
10063194:	2502      	movs	r5, #2
10063196:	4628      	mov	r0, r5
10063198:	bdb0      	pop	{r4, r5, r7, pc}

1006319a <smp_sap_check_encryption_key_size>:
1006319a:	b510      	push	{r4, lr}
1006319c:	460c      	mov	r4, r1
1006319e:	f004 ff53 	bl	10068048 <smp_get_remote_device_list_item>
100631a2:	2800      	cmp	r0, #0
100631a4:	d005      	beq.n	100631b2 <smp_sap_check_encryption_key_size+0x18>
100631a6:	7a81      	ldrb	r1, [r0, #10]
100631a8:	29f1      	cmp	r1, #241	@ 0xf1
100631aa:	d102      	bne.n	100631b2 <smp_sap_check_encryption_key_size+0x18>
100631ac:	7c00      	ldrb	r0, [r0, #16]
100631ae:	42a0      	cmp	r0, r4
100631b0:	d201      	bcs.n	100631b6 <smp_sap_check_encryption_key_size+0x1c>
100631b2:	20b6      	movs	r0, #182	@ 0xb6
100631b4:	bd10      	pop	{r4, pc}
100631b6:	2000      	movs	r0, #0
100631b8:	bd10      	pop	{r4, pc}

100631ba <smp_sap_forget_device_upon_disconnection>:
100631ba:	b580      	push	{r7, lr}
100631bc:	f004 ff44 	bl	10068048 <smp_get_remote_device_list_item>
100631c0:	2800      	cmp	r0, #0
100631c2:	d006      	beq.n	100631d2 <smp_sap_forget_device_upon_disconnection+0x18>
100631c4:	2160      	movs	r1, #96	@ 0x60
100631c6:	5c42      	ldrb	r2, [r0, r1]
100631c8:	2380      	movs	r3, #128	@ 0x80
100631ca:	4313      	orrs	r3, r2
100631cc:	5443      	strb	r3, [r0, r1]
100631ce:	2000      	movs	r0, #0
100631d0:	bd80      	pop	{r7, pc}
100631d2:	2081      	movs	r0, #129	@ 0x81
100631d4:	bd80      	pop	{r7, pc}

100631d6 <smp_sap_sm2_packet_data_signing_compute>:
100631d6:	b5f0      	push	{r4, r5, r6, r7, lr}
100631d8:	b089      	sub	sp, #36	@ 0x24
100631da:	460e      	mov	r6, r1
100631dc:	f004 ff34 	bl	10068048 <smp_get_remote_device_list_item>
100631e0:	2800      	cmp	r0, #0
100631e2:	d025      	beq.n	10063230 <smp_sap_sm2_packet_data_signing_compute+0x5a>
100631e4:	4605      	mov	r5, r0
100631e6:	301c      	adds	r0, #28
100631e8:	a905      	add	r1, sp, #20
100631ea:	9100      	str	r1, [sp, #0]
100631ec:	f7ff f92c 	bl	10062448 <smp_crt_generate_csrk>
100631f0:	8874      	ldrh	r4, [r6, #2]
100631f2:	462b      	mov	r3, r5
100631f4:	3368      	adds	r3, #104	@ 0x68
100631f6:	1d27      	adds	r7, r4, #4
100631f8:	b2b9      	uxth	r1, r7
100631fa:	2204      	movs	r2, #4
100631fc:	4630      	mov	r0, r6
100631fe:	f7f2 fc6f 	bl	10055ae0 <ACL_pkt_write>
10063202:	b2fa      	uxtb	r2, r7
10063204:	af01      	add	r7, sp, #4
10063206:	9800      	ldr	r0, [sp, #0]
10063208:	4631      	mov	r1, r6
1006320a:	463b      	mov	r3, r7
1006320c:	f7ff f92a 	bl	10062464 <smp_crt_generate_cmac_tag>
10063210:	3708      	adds	r7, #8
10063212:	4620      	mov	r0, r4
10063214:	3008      	adds	r0, #8
10063216:	b281      	uxth	r1, r0
10063218:	2208      	movs	r2, #8
1006321a:	4630      	mov	r0, r6
1006321c:	463b      	mov	r3, r7
1006321e:	f7f2 fc5f 	bl	10055ae0 <ACL_pkt_write>
10063222:	340c      	adds	r4, #12
10063224:	8074      	strh	r4, [r6, #2]
10063226:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
10063228:	1c40      	adds	r0, r0, #1
1006322a:	66a8      	str	r0, [r5, #104]	@ 0x68
1006322c:	2000      	movs	r0, #0
1006322e:	e000      	b.n	10063232 <smp_sap_sm2_packet_data_signing_compute+0x5c>
10063230:	2002      	movs	r0, #2
10063232:	b009      	add	sp, #36	@ 0x24
10063234:	bdf0      	pop	{r4, r5, r6, r7, pc}

10063236 <smp_sap_sm2_packet_data_signing_validate>:
10063236:	b5f0      	push	{r4, r5, r6, r7, lr}
10063238:	b08d      	sub	sp, #52	@ 0x34
1006323a:	460d      	mov	r5, r1
1006323c:	884f      	ldrh	r7, [r1, #2]
1006323e:	f004 ff03 	bl	10068048 <smp_get_remote_device_list_item>
10063242:	2800      	cmp	r0, #0
10063244:	d005      	beq.n	10063252 <smp_sap_sm2_packet_data_signing_validate+0x1c>
10063246:	4604      	mov	r4, r0
10063248:	7c40      	ldrb	r0, [r0, #17]
1006324a:	0640      	lsls	r0, r0, #25
1006324c:	d403      	bmi.n	10063256 <smp_sap_sm2_packet_data_signing_validate+0x20>
1006324e:	20b1      	movs	r0, #177	@ 0xb1
10063250:	e034      	b.n	100632bc <smp_sap_sm2_packet_data_signing_validate+0x86>
10063252:	2002      	movs	r0, #2
10063254:	e032      	b.n	100632bc <smp_sap_sm2_packet_data_signing_validate+0x86>
10063256:	4621      	mov	r1, r4
10063258:	3148      	adds	r1, #72	@ 0x48
1006325a:	a805      	add	r0, sp, #20
1006325c:	2210      	movs	r2, #16
1006325e:	f7f0 f869 	bl	10053334 <BLEPLAT_MemCpy>
10063262:	3f08      	subs	r7, #8
10063264:	b2b9      	uxth	r1, r7
10063266:	220c      	movs	r2, #12
10063268:	ae02      	add	r6, sp, #8
1006326a:	4628      	mov	r0, r5
1006326c:	4633      	mov	r3, r6
1006326e:	f7f2 fc15 	bl	10055a9c <ACL_pkt_read>
10063272:	7830      	ldrb	r0, [r6, #0]
10063274:	7871      	ldrb	r1, [r6, #1]
10063276:	0209      	lsls	r1, r1, #8
10063278:	1808      	adds	r0, r1, r0
1006327a:	78b1      	ldrb	r1, [r6, #2]
1006327c:	0409      	lsls	r1, r1, #16
1006327e:	1840      	adds	r0, r0, r1
10063280:	78f1      	ldrb	r1, [r6, #3]
10063282:	0609      	lsls	r1, r1, #24
10063284:	1841      	adds	r1, r0, r1
10063286:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
10063288:	4281      	cmp	r1, r0
1006328a:	d801      	bhi.n	10063290 <smp_sap_sm2_packet_data_signing_validate+0x5a>
1006328c:	1c40      	adds	r0, r0, #1
1006328e:	d110      	bne.n	100632b2 <smp_sap_sm2_packet_data_signing_validate+0x7c>
10063290:	9101      	str	r1, [sp, #4]
10063292:	b2fa      	uxtb	r2, r7
10063294:	a805      	add	r0, sp, #20
10063296:	ae09      	add	r6, sp, #36	@ 0x24
10063298:	4629      	mov	r1, r5
1006329a:	4633      	mov	r3, r6
1006329c:	f7ff f8e2 	bl	10062464 <smp_crt_generate_cmac_tag>
100632a0:	a802      	add	r0, sp, #8
100632a2:	1d00      	adds	r0, r0, #4
100632a4:	3608      	adds	r6, #8
100632a6:	2208      	movs	r2, #8
100632a8:	4631      	mov	r1, r6
100632aa:	f7f0 f863 	bl	10053374 <BLEPLAT_MemCmp>
100632ae:	2800      	cmp	r0, #0
100632b0:	d001      	beq.n	100632b6 <smp_sap_sm2_packet_data_signing_validate+0x80>
100632b2:	2005      	movs	r0, #5
100632b4:	e002      	b.n	100632bc <smp_sap_sm2_packet_data_signing_validate+0x86>
100632b6:	9801      	ldr	r0, [sp, #4]
100632b8:	66e0      	str	r0, [r4, #108]	@ 0x6c
100632ba:	2000      	movs	r0, #0
100632bc:	b00d      	add	sp, #52	@ 0x34
100632be:	bdf0      	pop	{r4, r5, r6, r7, pc}

100632c0 <nvm_gatt_db_read_init>:
100632c0:	4801      	ldr	r0, [pc, #4]	@ (100632c8 <__arm_cp.0_0>)
100632c2:	2100      	movs	r1, #0
100632c4:	7001      	strb	r1, [r0, #0]
100632c6:	4770      	bx	lr

100632c8 <__arm_cp.0_0>:
100632c8:	200029a8 	.word	0x200029a8

100632cc <nvm_gatt_db_read_next_record>:
100632cc:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100632ce:	4603      	mov	r3, r0
100632d0:	4d06      	ldr	r5, [pc, #24]	@ (100632ec <__arm_cp.1_0>)
100632d2:	7828      	ldrb	r0, [r5, #0]
100632d4:	210c      	movs	r1, #12
100632d6:	9100      	str	r1, [sp, #0]
100632d8:	2401      	movs	r4, #1
100632da:	2200      	movs	r2, #0
100632dc:	4621      	mov	r1, r4
100632de:	f7ef ff61 	bl	100531a4 <BLEPLAT_NvmGet>
100632e2:	702c      	strb	r4, [r5, #0]
100632e4:	f000 f804 	bl	100632f0 <nvm_convert_bleplat_to_blestack_status>
100632e8:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
100632ea:	46c0      	nop			@ (mov r8, r8)

100632ec <__arm_cp.1_0>:
100632ec:	200029a8 	.word	0x200029a8

100632f0 <nvm_convert_bleplat_to_blestack_status>:
100632f0:	1cc0      	adds	r0, r0, #3
100632f2:	b2c0      	uxtb	r0, r0
100632f4:	2804      	cmp	r0, #4
100632f6:	d302      	bcc.n	100632fe <nvm_convert_bleplat_to_blestack_status+0xe>
100632f8:	207e      	movs	r0, #126	@ 0x7e
100632fa:	43c0      	mvns	r0, r0
100632fc:	e002      	b.n	10063304 <nvm_convert_bleplat_to_blestack_status+0x14>
100632fe:	00c1      	lsls	r1, r0, #3
10063300:	4801      	ldr	r0, [pc, #4]	@ (10063308 <__arm_cp.2_0>)
10063302:	40c8      	lsrs	r0, r1
10063304:	b2c0      	uxtb	r0, r0
10063306:	4770      	bx	lr

10063308 <__arm_cp.2_0>:
10063308:	00b4b7b3 	.word	0x00b4b7b3

1006330c <nvm_gatt_db_read_full_current_record>:
1006330c:	b5e0      	push	{r5, r6, r7, lr}
1006330e:	4603      	mov	r3, r0
10063310:	9100      	str	r1, [sp, #0]
10063312:	2002      	movs	r0, #2
10063314:	2101      	movs	r1, #1
10063316:	220c      	movs	r2, #12
10063318:	f7ef ff44 	bl	100531a4 <BLEPLAT_NvmGet>
1006331c:	f7ff ffe8 	bl	100632f0 <nvm_convert_bleplat_to_blestack_status>
10063320:	bd8c      	pop	{r2, r3, r7, pc}

10063322 <nvm_gatt_db_update_record>:
10063322:	b5e0      	push	{r5, r6, r7, lr}
10063324:	460b      	mov	r3, r1
10063326:	4601      	mov	r1, r0
10063328:	8900      	ldrh	r0, [r0, #8]
1006332a:	9000      	str	r0, [sp, #0]
1006332c:	2001      	movs	r0, #1
1006332e:	220c      	movs	r2, #12
10063330:	f7ef feea 	bl	10053108 <BLEPLAT_NvmAdd>
10063334:	f7ff ffdc 	bl	100632f0 <nvm_convert_bleplat_to_blestack_status>
10063338:	bd8c      	pop	{r2, r3, r7, pc}
	...

1006333c <nvm_sec_db_read_init>:
1006333c:	4801      	ldr	r0, [pc, #4]	@ (10063344 <__arm_cp.5_0>)
1006333e:	2100      	movs	r1, #0
10063340:	7001      	strb	r1, [r0, #0]
10063342:	4770      	bx	lr

10063344 <__arm_cp.5_0>:
10063344:	200029a9 	.word	0x200029a9

10063348 <nvm_sec_db_read_next_record>:
10063348:	b51c      	push	{r2, r3, r4, lr}
1006334a:	4603      	mov	r3, r0
1006334c:	4c06      	ldr	r4, [pc, #24]	@ (10063368 <__arm_cp.6_0>)
1006334e:	7820      	ldrb	r0, [r4, #0]
10063350:	2150      	movs	r1, #80	@ 0x50
10063352:	9100      	str	r1, [sp, #0]
10063354:	2100      	movs	r1, #0
10063356:	460a      	mov	r2, r1
10063358:	f7ef ff24 	bl	100531a4 <BLEPLAT_NvmGet>
1006335c:	2101      	movs	r1, #1
1006335e:	7021      	strb	r1, [r4, #0]
10063360:	f7ff ffc6 	bl	100632f0 <nvm_convert_bleplat_to_blestack_status>
10063364:	bd1c      	pop	{r2, r3, r4, pc}
10063366:	46c0      	nop			@ (mov r8, r8)

10063368 <__arm_cp.6_0>:
10063368:	200029a9 	.word	0x200029a9

1006336c <nvm_sec_db_add_record>:
1006336c:	b5e0      	push	{r5, r6, r7, lr}
1006336e:	4601      	mov	r1, r0
10063370:	2000      	movs	r0, #0
10063372:	9000      	str	r0, [sp, #0]
10063374:	2250      	movs	r2, #80	@ 0x50
10063376:	4603      	mov	r3, r0
10063378:	f7ef fec6 	bl	10053108 <BLEPLAT_NvmAdd>
1006337c:	f7ff ffb8 	bl	100632f0 <nvm_convert_bleplat_to_blestack_status>
10063380:	bd8c      	pop	{r2, r3, r7, pc}

10063382 <nvm_sec_db_get_record_count>:
10063382:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10063384:	2400      	movs	r4, #0
10063386:	4621      	mov	r1, r4
10063388:	4620      	mov	r0, r4
1006338a:	460d      	mov	r5, r1
1006338c:	9400      	str	r4, [sp, #0]
1006338e:	b2c0      	uxtb	r0, r0
10063390:	4621      	mov	r1, r4
10063392:	4622      	mov	r2, r4
10063394:	4623      	mov	r3, r4
10063396:	f7ef ff05 	bl	100531a4 <BLEPLAT_NvmGet>
1006339a:	1cc2      	adds	r2, r0, #3
1006339c:	1c69      	adds	r1, r5, #1
1006339e:	2001      	movs	r0, #1
100633a0:	2a00      	cmp	r2, #0
100633a2:	d1f2      	bne.n	1006338a <nvm_sec_db_get_record_count+0x8>
100633a4:	b2e8      	uxtb	r0, r5
100633a6:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100633a8 <nvm_discard_current_record>:
100633a8:	b580      	push	{r7, lr}
100633aa:	2002      	movs	r0, #2
100633ac:	f7ef ff9c 	bl	100532e8 <BLEPLAT_NvmDiscard>
100633b0:	bd80      	pop	{r7, pc}

100633b2 <nvm_dev_id_data_get_record>:
100633b2:	b5e0      	push	{r5, r6, r7, lr}
100633b4:	4603      	mov	r3, r0
100633b6:	2026      	movs	r0, #38	@ 0x26
100633b8:	9000      	str	r0, [sp, #0]
100633ba:	2102      	movs	r1, #2
100633bc:	2000      	movs	r0, #0
100633be:	4602      	mov	r2, r0
100633c0:	f7ef fef0 	bl	100531a4 <BLEPLAT_NvmGet>
100633c4:	2800      	cmp	r0, #0
100633c6:	d000      	beq.n	100633ca <nvm_dev_id_data_get_record+0x18>
100633c8:	2081      	movs	r0, #129	@ 0x81
100633ca:	bd8c      	pop	{r2, r3, r7, pc}

100633cc <nvm_dev_id_data_add_record>:
100633cc:	b5e0      	push	{r5, r6, r7, lr}
100633ce:	4601      	mov	r1, r0
100633d0:	2300      	movs	r3, #0
100633d2:	9300      	str	r3, [sp, #0]
100633d4:	2002      	movs	r0, #2
100633d6:	2226      	movs	r2, #38	@ 0x26
100633d8:	f7ef fe96 	bl	10053108 <BLEPLAT_NvmAdd>
100633dc:	2800      	cmp	r0, #0
100633de:	d000      	beq.n	100633e2 <nvm_dev_id_data_add_record+0x16>
100633e0:	2081      	movs	r0, #129	@ 0x81
100633e2:	bd8c      	pop	{r2, r3, r7, pc}

100633e4 <tsk_init>:
100633e4:	4803      	ldr	r0, [pc, #12]	@ (100633f4 <__arm_cp.0_0>)
100633e6:	6800      	ldr	r0, [r0, #0]
100633e8:	2100      	movs	r1, #0
100633ea:	6081      	str	r1, [r0, #8]
100633ec:	60c1      	str	r1, [r0, #12]
100633ee:	6101      	str	r1, [r0, #16]
100633f0:	6001      	str	r1, [r0, #0]
100633f2:	4770      	bx	lr

100633f4 <__arm_cp.0_0>:
100633f4:	200029ac 	.word	0x200029ac

100633f8 <tsk_scheduler>:
100633f8:	b570      	push	{r4, r5, r6, lr}
100633fa:	4d17      	ldr	r5, [pc, #92]	@ (10063458 <__arm_cp.1_0>)
100633fc:	6828      	ldr	r0, [r5, #0]
100633fe:	f3ef 8110 	mrs	r1, PRIMASK
10063402:	b672      	cpsid	i
10063404:	6801      	ldr	r1, [r0, #0]
10063406:	2600      	movs	r6, #0
10063408:	6006      	str	r6, [r0, #0]
1006340a:	6842      	ldr	r2, [r0, #4]
1006340c:	430a      	orrs	r2, r1
1006340e:	6042      	str	r2, [r0, #4]
10063410:	b662      	cpsie	i
10063412:	682c      	ldr	r4, [r5, #0]
10063414:	3410      	adds	r4, #16
10063416:	6820      	ldr	r0, [r4, #0]
10063418:	2800      	cmp	r0, #0
1006341a:	d00f      	beq.n	1006343c <tsk_scheduler+0x44>
1006341c:	4620      	mov	r0, r4
1006341e:	f000 f85b 	bl	100634d8 <lsbit>
10063422:	0080      	lsls	r0, r0, #2
10063424:	6829      	ldr	r1, [r5, #0]
10063426:	1808      	adds	r0, r1, r0
10063428:	f3ef 8210 	mrs	r2, PRIMASK
1006342c:	b672      	cpsid	i
1006342e:	6882      	ldr	r2, [r0, #8]
10063430:	6086      	str	r6, [r0, #8]
10063432:	6848      	ldr	r0, [r1, #4]
10063434:	4310      	orrs	r0, r2
10063436:	6048      	str	r0, [r1, #4]
10063438:	b662      	cpsie	i
1006343a:	e7ec      	b.n	10063416 <tsk_scheduler+0x1e>
1006343c:	6828      	ldr	r0, [r5, #0]
1006343e:	1d04      	adds	r4, r0, #4
10063440:	4d06      	ldr	r5, [pc, #24]	@ (1006345c <__arm_cp.1_1>)
10063442:	6820      	ldr	r0, [r4, #0]
10063444:	2800      	cmp	r0, #0
10063446:	d006      	beq.n	10063456 <tsk_scheduler+0x5e>
10063448:	4620      	mov	r0, r4
1006344a:	f000 f845 	bl	100634d8 <lsbit>
1006344e:	0081      	lsls	r1, r0, #2
10063450:	5869      	ldr	r1, [r5, r1]
10063452:	4788      	blx	r1
10063454:	e7f5      	b.n	10063442 <tsk_scheduler+0x4a>
10063456:	bd70      	pop	{r4, r5, r6, pc}

10063458 <__arm_cp.1_0>:
10063458:	200029ac 	.word	0x200029ac

1006345c <__arm_cp.1_1>:
1006345c:	1006a544 	.word	0x1006a544

10063460 <tsk_notify_idx>:
10063460:	211f      	movs	r1, #31
10063462:	4001      	ands	r1, r0
10063464:	2201      	movs	r2, #1
10063466:	408a      	lsls	r2, r1
10063468:	f3ef 8110 	mrs	r1, PRIMASK
1006346c:	b672      	cpsid	i
1006346e:	4904      	ldr	r1, [pc, #16]	@ (10063480 <__arm_cp.3_0>)
10063470:	6809      	ldr	r1, [r1, #0]
10063472:	0940      	lsrs	r0, r0, #5
10063474:	0080      	lsls	r0, r0, #2
10063476:	580b      	ldr	r3, [r1, r0]
10063478:	4313      	orrs	r3, r2
1006347a:	500b      	str	r3, [r1, r0]
1006347c:	b662      	cpsie	i
1006347e:	4770      	bx	lr

10063480 <__arm_cp.3_0>:
10063480:	200029ac 	.word	0x200029ac

10063484 <tsk_wait_resource_idx>:
10063484:	221f      	movs	r2, #31
10063486:	4002      	ands	r2, r0
10063488:	2301      	movs	r3, #1
1006348a:	4093      	lsls	r3, r2
1006348c:	f3ef 8210 	mrs	r2, PRIMASK
10063490:	b672      	cpsid	i
10063492:	0089      	lsls	r1, r1, #2
10063494:	4a05      	ldr	r2, [pc, #20]	@ (100634ac <__arm_cp.4_0>)
10063496:	6812      	ldr	r2, [r2, #0]
10063498:	1851      	adds	r1, r2, r1
1006349a:	0940      	lsrs	r0, r0, #5
1006349c:	0080      	lsls	r0, r0, #2
1006349e:	1808      	adds	r0, r1, r0
100634a0:	6881      	ldr	r1, [r0, #8]
100634a2:	4319      	orrs	r1, r3
100634a4:	6081      	str	r1, [r0, #8]
100634a6:	b662      	cpsie	i
100634a8:	4770      	bx	lr
100634aa:	46c0      	nop			@ (mov r8, r8)

100634ac <__arm_cp.4_0>:
100634ac:	200029ac 	.word	0x200029ac

100634b0 <tsk_signal_resource_idx>:
100634b0:	211f      	movs	r1, #31
100634b2:	4001      	ands	r1, r0
100634b4:	2201      	movs	r2, #1
100634b6:	408a      	lsls	r2, r1
100634b8:	f3ef 8110 	mrs	r1, PRIMASK
100634bc:	b672      	cpsid	i
100634be:	4905      	ldr	r1, [pc, #20]	@ (100634d4 <__arm_cp.5_0>)
100634c0:	6809      	ldr	r1, [r1, #0]
100634c2:	0940      	lsrs	r0, r0, #5
100634c4:	0080      	lsls	r0, r0, #2
100634c6:	1808      	adds	r0, r1, r0
100634c8:	6901      	ldr	r1, [r0, #16]
100634ca:	4311      	orrs	r1, r2
100634cc:	6101      	str	r1, [r0, #16]
100634ce:	b662      	cpsie	i
100634d0:	4770      	bx	lr
100634d2:	46c0      	nop			@ (mov r8, r8)

100634d4 <__arm_cp.5_0>:
100634d4:	200029ac 	.word	0x200029ac

100634d8 <lsbit>:
100634d8:	f3ef 8110 	mrs	r1, PRIMASK
100634dc:	b672      	cpsid	i
100634de:	6801      	ldr	r1, [r0, #0]
100634e0:	424a      	negs	r2, r1
100634e2:	400a      	ands	r2, r1
100634e4:	4051      	eors	r1, r2
100634e6:	6001      	str	r1, [r0, #0]
100634e8:	4803      	ldr	r0, [pc, #12]	@ (100634f8 <__arm_cp.7_0>)
100634ea:	4350      	muls	r0, r2
100634ec:	0ec0      	lsrs	r0, r0, #27
100634ee:	a103      	add	r1, pc, #12	@ (adr r1, 100634fc <__arm_cp.7_0+0x4>)
100634f0:	5c08      	ldrb	r0, [r1, r0]
100634f2:	b662      	cpsie	i
100634f4:	4770      	bx	lr
100634f6:	46c0      	nop			@ (mov r8, r8)

100634f8 <__arm_cp.7_0>:
100634f8:	04653adf 	.word	0x04653adf
100634fc:	06020100 	.word	0x06020100
10063500:	10070b03 	.word	0x10070b03
10063504:	150c0e04 	.word	0x150c0e04
10063508:	1a111708 	.word	0x1a111708
1006350c:	0f0a051f 	.word	0x0f0a051f
10063510:	1916140d 	.word	0x1916140d
10063514:	1813091e 	.word	0x1813091e
10063518:	1b1c121d 	.word	0x1b1c121d

1006351c <CST_init>:
1006351c:	b510      	push	{r4, lr}
1006351e:	2412      	movs	r4, #18
10063520:	2800      	cmp	r0, #0
10063522:	d00e      	beq.n	10063542 <CST_init+0x26>
10063524:	2a00      	cmp	r2, #0
10063526:	d00c      	beq.n	10063542 <CST_init+0x26>
10063528:	2b0b      	cmp	r3, #11
1006352a:	d80a      	bhi.n	10063542 <CST_init+0x26>
1006352c:	7041      	strb	r1, [r0, #1]
1006352e:	7003      	strb	r3, [r0, #0]
10063530:	6a03      	ldr	r3, [r0, #32]
10063532:	5459      	strb	r1, [r3, r1]
10063534:	1e49      	subs	r1, r1, #1
10063536:	1c4b      	adds	r3, r1, #1
10063538:	d3fa      	bcc.n	10063530 <CST_init+0x14>
1006353a:	6102      	str	r2, [r0, #16]
1006353c:	2400      	movs	r4, #0
1006353e:	7504      	strb	r4, [r0, #20]
10063540:	61c0      	str	r0, [r0, #28]
10063542:	4620      	mov	r0, r4
10063544:	bd10      	pop	{r4, pc}

10063546 <CST_stop>:
10063546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063548:	4605      	mov	r5, r0
1006354a:	2012      	movs	r0, #18
1006354c:	2d00      	cmp	r5, #0
1006354e:	d01b      	beq.n	10063588 <CST_stop+0x42>
10063550:	460c      	mov	r4, r1
10063552:	786a      	ldrb	r2, [r5, #1]
10063554:	428a      	cmp	r2, r1
10063556:	d917      	bls.n	10063588 <CST_stop+0x42>
10063558:	6a2b      	ldr	r3, [r5, #32]
1006355a:	5d19      	ldrb	r1, [r3, r4]
1006355c:	42a1      	cmp	r1, r4
1006355e:	d101      	bne.n	10063564 <CST_stop+0x1e>
10063560:	2000      	movs	r0, #0
10063562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063564:	4617      	mov	r7, r2
10063566:	463e      	mov	r6, r7
10063568:	5ddf      	ldrb	r7, [r3, r7]
1006356a:	4297      	cmp	r7, r2
1006356c:	d001      	beq.n	10063572 <CST_stop+0x2c>
1006356e:	42a7      	cmp	r7, r4
10063570:	d1f9      	bne.n	10063566 <CST_stop+0x20>
10063572:	2000      	movs	r0, #0
10063574:	4297      	cmp	r7, r2
10063576:	d005      	beq.n	10063584 <CST_stop+0x3e>
10063578:	5599      	strb	r1, [r3, r6]
1006357a:	4296      	cmp	r6, r2
1006357c:	d102      	bne.n	10063584 <CST_stop+0x3e>
1006357e:	4628      	mov	r0, r5
10063580:	f000 f803 	bl	1006358a <Timer_TryStartFirstActive>
10063584:	6a29      	ldr	r1, [r5, #32]
10063586:	550c      	strb	r4, [r1, r4]
10063588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1006358a <Timer_TryStartFirstActive>:
1006358a:	b510      	push	{r4, lr}
1006358c:	7842      	ldrb	r2, [r0, #1]
1006358e:	428a      	cmp	r2, r1
10063590:	d107      	bne.n	100635a2 <Timer_TryStartFirstActive+0x18>
10063592:	7d01      	ldrb	r1, [r0, #20]
10063594:	2400      	movs	r4, #0
10063596:	2900      	cmp	r1, #0
10063598:	d009      	beq.n	100635ae <Timer_TryStartFirstActive+0x24>
1006359a:	3008      	adds	r0, #8
1006359c:	f7ef ffb0 	bl	10053500 <BLEPLAT_StopTimer>
100635a0:	e005      	b.n	100635ae <Timer_TryStartFirstActive+0x24>
100635a2:	0049      	lsls	r1, r1, #1
100635a4:	6a42      	ldr	r2, [r0, #36]	@ 0x24
100635a6:	5e51      	ldrsh	r1, [r2, r1]
100635a8:	f000 f86a 	bl	10063680 <Timer_StartFirstActive_sysT>
100635ac:	4604      	mov	r4, r0
100635ae:	4620      	mov	r0, r4
100635b0:	bd10      	pop	{r4, pc}

100635b2 <CST_start>:
100635b2:	b5f0      	push	{r4, r5, r6, r7, lr}
100635b4:	b085      	sub	sp, #20
100635b6:	2612      	movs	r6, #18
100635b8:	2800      	cmp	r0, #0
100635ba:	d05e      	beq.n	1006367a <CST_start+0xc8>
100635bc:	461f      	mov	r7, r3
100635be:	460d      	mov	r5, r1
100635c0:	4604      	mov	r4, r0
100635c2:	7843      	ldrb	r3, [r0, #1]
100635c4:	428b      	cmp	r3, r1
100635c6:	d958      	bls.n	1006367a <CST_start+0xc8>
100635c8:	7820      	ldrb	r0, [r4, #0]
100635ca:	2105      	movs	r1, #5
100635cc:	0309      	lsls	r1, r1, #12
100635ce:	4081      	lsls	r1, r0
100635d0:	428f      	cmp	r7, r1
100635d2:	d852      	bhi.n	1006367a <CST_start+0xc8>
100635d4:	9204      	str	r2, [sp, #16]
100635d6:	9302      	str	r3, [sp, #8]
100635d8:	f7ef ff77 	bl	100534ca <BLEPLAT_GetCurrentSysTime>
100635dc:	4602      	mov	r2, r0
100635de:	7823      	ldrb	r3, [r4, #0]
100635e0:	6a20      	ldr	r0, [r4, #32]
100635e2:	5d40      	ldrb	r0, [r0, r5]
100635e4:	42a8      	cmp	r0, r5
100635e6:	d00c      	beq.n	10063602 <CST_start+0x50>
100635e8:	9804      	ldr	r0, [sp, #16]
100635ea:	2800      	cmp	r0, #0
100635ec:	d045      	beq.n	1006367a <CST_start+0xc8>
100635ee:	4620      	mov	r0, r4
100635f0:	9103      	str	r1, [sp, #12]
100635f2:	4629      	mov	r1, r5
100635f4:	9304      	str	r3, [sp, #16]
100635f6:	4616      	mov	r6, r2
100635f8:	f7ff ffa5 	bl	10063546 <CST_stop>
100635fc:	9903      	ldr	r1, [sp, #12]
100635fe:	4632      	mov	r2, r6
10063600:	9b04      	ldr	r3, [sp, #16]
10063602:	2033      	movs	r0, #51	@ 0x33
10063604:	4378      	muls	r0, r7
10063606:	460e      	mov	r6, r1
10063608:	0a01      	lsrs	r1, r0, #8
1006360a:	1808      	adds	r0, r1, r0
1006360c:	0c01      	lsrs	r1, r0, #16
1006360e:	1808      	adds	r0, r1, r0
10063610:	0771      	lsls	r1, r6, #29
10063612:	08d2      	lsrs	r2, r2, #3
10063614:	1851      	adds	r1, r2, r1
10063616:	1842      	adds	r2, r0, r1
10063618:	1d58      	adds	r0, r3, #5
1006361a:	b2c0      	uxtb	r0, r0
1006361c:	40c2      	lsrs	r2, r0
1006361e:	9501      	str	r5, [sp, #4]
10063620:	0068      	lsls	r0, r5, #1
10063622:	6a61      	ldr	r1, [r4, #36]	@ 0x24
10063624:	9204      	str	r2, [sp, #16]
10063626:	520a      	strh	r2, [r1, r0]
10063628:	f7ef ff4f 	bl	100534ca <BLEPLAT_GetCurrentSysTime>
1006362c:	08c0      	lsrs	r0, r0, #3
1006362e:	9003      	str	r0, [sp, #12]
10063630:	7862      	ldrb	r2, [r4, #1]
10063632:	6a20      	ldr	r0, [r4, #32]
10063634:	4617      	mov	r7, r2
10063636:	463b      	mov	r3, r7
10063638:	5dc7      	ldrb	r7, [r0, r7]
1006363a:	4297      	cmp	r7, r2
1006363c:	d00d      	beq.n	1006365a <CST_start+0xa8>
1006363e:	007d      	lsls	r5, r7, #1
10063640:	6a66      	ldr	r6, [r4, #36]	@ 0x24
10063642:	5b75      	ldrh	r5, [r6, r5]
10063644:	7826      	ldrb	r6, [r4, #0]
10063646:	1d76      	adds	r6, r6, #5
10063648:	9903      	ldr	r1, [sp, #12]
1006364a:	40f1      	lsrs	r1, r6
1006364c:	1a6d      	subs	r5, r5, r1
1006364e:	b22d      	sxth	r5, r5
10063650:	9e04      	ldr	r6, [sp, #16]
10063652:	1a71      	subs	r1, r6, r1
10063654:	b209      	sxth	r1, r1
10063656:	428d      	cmp	r5, r1
10063658:	dded      	ble.n	10063636 <CST_start+0x84>
1006365a:	5cc1      	ldrb	r1, [r0, r3]
1006365c:	9a01      	ldr	r2, [sp, #4]
1006365e:	5481      	strb	r1, [r0, r2]
10063660:	6a20      	ldr	r0, [r4, #32]
10063662:	54c2      	strb	r2, [r0, r3]
10063664:	9802      	ldr	r0, [sp, #8]
10063666:	4283      	cmp	r3, r0
10063668:	d106      	bne.n	10063678 <CST_start+0xc6>
1006366a:	9804      	ldr	r0, [sp, #16]
1006366c:	b201      	sxth	r1, r0
1006366e:	4620      	mov	r0, r4
10063670:	f000 f806 	bl	10063680 <Timer_StartFirstActive_sysT>
10063674:	4606      	mov	r6, r0
10063676:	e000      	b.n	1006367a <CST_start+0xc8>
10063678:	2600      	movs	r6, #0
1006367a:	4630      	mov	r0, r6
1006367c:	b005      	add	sp, #20
1006367e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10063680 <Timer_StartFirstActive_sysT>:
10063680:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10063682:	9101      	str	r1, [sp, #4]
10063684:	4604      	mov	r4, r0
10063686:	4607      	mov	r7, r0
10063688:	3708      	adds	r7, #8
1006368a:	f7ef ff1e 	bl	100534ca <BLEPLAT_GetCurrentSysTime>
1006368e:	9002      	str	r0, [sp, #8]
10063690:	460d      	mov	r5, r1
10063692:	7826      	ldrb	r6, [r4, #0]
10063694:	7d20      	ldrb	r0, [r4, #20]
10063696:	2800      	cmp	r0, #0
10063698:	d004      	beq.n	100636a4 <Timer_StartFirstActive_sysT+0x24>
1006369a:	4638      	mov	r0, r7
1006369c:	f7ef ff30 	bl	10053500 <BLEPLAT_StopTimer>
100636a0:	7822      	ldrb	r2, [r4, #0]
100636a2:	e000      	b.n	100636a6 <Timer_StartFirstActive_sysT+0x26>
100636a4:	4632      	mov	r2, r6
100636a6:	1d70      	adds	r0, r6, #5
100636a8:	9c02      	ldr	r4, [sp, #8]
100636aa:	08e1      	lsrs	r1, r4, #3
100636ac:	40c1      	lsrs	r1, r0
100636ae:	9801      	ldr	r0, [sp, #4]
100636b0:	1a40      	subs	r0, r0, r1
100636b2:	b200      	sxth	r0, r0
100636b4:	1e40      	subs	r0, r0, #1
100636b6:	17c1      	asrs	r1, r0, #31
100636b8:	3208      	adds	r2, #8
100636ba:	f7dc ff37 	bl	1004052c <__aeabi_llsl>
100636be:	1902      	adds	r2, r0, r4
100636c0:	414d      	adcs	r5, r1
100636c2:	4638      	mov	r0, r7
100636c4:	462b      	mov	r3, r5
100636c6:	f7ef ff0a 	bl	100534de <BLEPLAT_StartTimer>
100636ca:	b2c0      	uxtb	r0, r0
100636cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100636ce <cst_sharedCallback>:
100636ce:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100636d0:	9102      	str	r1, [sp, #8]
100636d2:	4605      	mov	r5, r0
100636d4:	7847      	ldrb	r7, [r0, #1]
100636d6:	6a00      	ldr	r0, [r0, #32]
100636d8:	5dc4      	ldrb	r4, [r0, r7]
100636da:	f7ef fef6 	bl	100534ca <BLEPLAT_GetCurrentSysTime>
100636de:	08c0      	lsrs	r0, r0, #3
100636e0:	9001      	str	r0, [sp, #4]
100636e2:	4620      	mov	r0, r4
100636e4:	b2c2      	uxtb	r2, r0
100636e6:	42ba      	cmp	r2, r7
100636e8:	d00d      	beq.n	10063706 <cst_sharedCallback+0x38>
100636ea:	0053      	lsls	r3, r2, #1
100636ec:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
100636ee:	5af3      	ldrh	r3, [r6, r3]
100636f0:	782e      	ldrb	r6, [r5, #0]
100636f2:	1d76      	adds	r6, r6, #5
100636f4:	9901      	ldr	r1, [sp, #4]
100636f6:	40f1      	lsrs	r1, r6
100636f8:	1a59      	subs	r1, r3, r1
100636fa:	b209      	sxth	r1, r1
100636fc:	2901      	cmp	r1, #1
100636fe:	dc03      	bgt.n	10063708 <cst_sharedCallback+0x3a>
10063700:	6a28      	ldr	r0, [r5, #32]
10063702:	5c80      	ldrb	r0, [r0, r2]
10063704:	e7ee      	b.n	100636e4 <cst_sharedCallback+0x16>
10063706:	4638      	mov	r0, r7
10063708:	6a29      	ldr	r1, [r5, #32]
1006370a:	55c8      	strb	r0, [r1, r7]
1006370c:	b2c6      	uxtb	r6, r0
1006370e:	4628      	mov	r0, r5
10063710:	4631      	mov	r1, r6
10063712:	f7ff ff3a 	bl	1006358a <Timer_TryStartFirstActive>
10063716:	b2e0      	uxtb	r0, r4
10063718:	42b0      	cmp	r0, r6
1006371a:	d006      	beq.n	1006372a <cst_sharedCallback+0x5c>
1006371c:	6a29      	ldr	r1, [r5, #32]
1006371e:	5c0f      	ldrb	r7, [r1, r0]
10063720:	540c      	strb	r4, [r1, r0]
10063722:	9902      	ldr	r1, [sp, #8]
10063724:	4788      	blx	r1
10063726:	463c      	mov	r4, r7
10063728:	e7f5      	b.n	10063716 <cst_sharedCallback+0x48>
1006372a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1006372c <copy_swap_buffer>:
1006372c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006372e:	2a00      	cmp	r2, #0
10063730:	d00b      	beq.n	1006374a <copy_swap_buffer+0x1e>
10063732:	2400      	movs	r4, #0
10063734:	43e5      	mvns	r5, r4
10063736:	2b00      	cmp	r3, #0
10063738:	4626      	mov	r6, r4
1006373a:	d000      	beq.n	1006373e <copy_swap_buffer+0x12>
1006373c:	1956      	adds	r6, r2, r5
1006373e:	5d0f      	ldrb	r7, [r1, r4]
10063740:	5587      	strb	r7, [r0, r6]
10063742:	1e6d      	subs	r5, r5, #1
10063744:	1c64      	adds	r4, r4, #1
10063746:	42a2      	cmp	r2, r4
10063748:	d1f5      	bne.n	10063736 <copy_swap_buffer+0xa>
1006374a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006374c <is_Buffer_All_Set_To>:
1006374c:	b570      	push	{r4, r5, r6, lr}
1006374e:	4603      	mov	r3, r0
10063750:	2001      	movs	r0, #1
10063752:	2900      	cmp	r1, #0
10063754:	d009      	beq.n	1006376a <is_Buffer_All_Set_To+0x1e>
10063756:	2400      	movs	r4, #0
10063758:	4626      	mov	r6, r4
1006375a:	4625      	mov	r5, r4
1006375c:	5d96      	ldrb	r6, [r2, r6]
1006375e:	429e      	cmp	r6, r3
10063760:	d104      	bne.n	1006376c <is_Buffer_All_Set_To+0x20>
10063762:	1c6d      	adds	r5, r5, #1
10063764:	b2ee      	uxtb	r6, r5
10063766:	428e      	cmp	r6, r1
10063768:	d3f8      	bcc.n	1006375c <is_Buffer_All_Set_To+0x10>
1006376a:	bd70      	pop	{r4, r5, r6, pc}
1006376c:	4620      	mov	r0, r4
1006376e:	bd70      	pop	{r4, r5, r6, pc}

10063770 <char_copy>:
10063770:	2a00      	cmp	r2, #0
10063772:	d005      	beq.n	10063780 <char_copy+0x10>
10063774:	7803      	ldrb	r3, [r0, #0]
10063776:	700b      	strb	r3, [r1, #0]
10063778:	1e52      	subs	r2, r2, #1
1006377a:	1c49      	adds	r1, r1, #1
1006377c:	1c40      	adds	r0, r0, #1
1006377e:	e7f7      	b.n	10063770 <char_copy>
10063780:	4770      	bx	lr

10063782 <UUID_cmp>:
10063782:	b580      	push	{r7, lr}
10063784:	7c02      	ldrb	r2, [r0, #16]
10063786:	7c0b      	ldrb	r3, [r1, #16]
10063788:	429a      	cmp	r2, r3
1006378a:	d106      	bne.n	1006379a <UUID_cmp+0x18>
1006378c:	2a20      	cmp	r2, #32
1006378e:	d007      	beq.n	100637a0 <UUID_cmp+0x1e>
10063790:	2a10      	cmp	r2, #16
10063792:	d109      	bne.n	100637a8 <UUID_cmp+0x26>
10063794:	8989      	ldrh	r1, [r1, #12]
10063796:	8980      	ldrh	r0, [r0, #12]
10063798:	e008      	b.n	100637ac <UUID_cmp+0x2a>
1006379a:	2000      	movs	r0, #0
1006379c:	43c0      	mvns	r0, r0
1006379e:	bd80      	pop	{r7, pc}
100637a0:	2210      	movs	r2, #16
100637a2:	f7ef fde7 	bl	10053374 <BLEPLAT_MemCmp>
100637a6:	bd80      	pop	{r7, pc}
100637a8:	68c9      	ldr	r1, [r1, #12]
100637aa:	68c0      	ldr	r0, [r0, #12]
100637ac:	1a40      	subs	r0, r0, r1
100637ae:	bd80      	pop	{r7, pc}

100637b0 <UUID_cmp_128bits>:
100637b0:	b570      	push	{r4, r5, r6, lr}
100637b2:	b08a      	sub	sp, #40	@ 0x28
100637b4:	460c      	mov	r4, r1
100637b6:	4601      	mov	r1, r0
100637b8:	ad05      	add	r5, sp, #20
100637ba:	2614      	movs	r6, #20
100637bc:	4628      	mov	r0, r5
100637be:	4632      	mov	r2, r6
100637c0:	f7ef fdb8 	bl	10053334 <BLEPLAT_MemCpy>
100637c4:	4668      	mov	r0, sp
100637c6:	4621      	mov	r1, r4
100637c8:	4632      	mov	r2, r6
100637ca:	f7ef fdb3 	bl	10053334 <BLEPLAT_MemCpy>
100637ce:	7c28      	ldrb	r0, [r5, #16]
100637d0:	2880      	cmp	r0, #128	@ 0x80
100637d2:	d007      	beq.n	100637e4 <UUID_cmp_128bits+0x34>
100637d4:	ac05      	add	r4, sp, #20
100637d6:	490d      	ldr	r1, [pc, #52]	@ (1006380c <__arm_cp.1_0>)
100637d8:	220c      	movs	r2, #12
100637da:	4620      	mov	r0, r4
100637dc:	f7ef fdaa 	bl	10053334 <BLEPLAT_MemCpy>
100637e0:	2000      	movs	r0, #0
100637e2:	81e0      	strh	r0, [r4, #14]
100637e4:	4668      	mov	r0, sp
100637e6:	7c00      	ldrb	r0, [r0, #16]
100637e8:	2880      	cmp	r0, #128	@ 0x80
100637ea:	d007      	beq.n	100637fc <UUID_cmp_128bits+0x4c>
100637ec:	466c      	mov	r4, sp
100637ee:	4907      	ldr	r1, [pc, #28]	@ (1006380c <__arm_cp.1_0>)
100637f0:	220c      	movs	r2, #12
100637f2:	4620      	mov	r0, r4
100637f4:	f7ef fd9e 	bl	10053334 <BLEPLAT_MemCpy>
100637f8:	2000      	movs	r0, #0
100637fa:	81e0      	strh	r0, [r4, #14]
100637fc:	a805      	add	r0, sp, #20
100637fe:	4669      	mov	r1, sp
10063800:	2210      	movs	r2, #16
10063802:	f7ef fdb7 	bl	10053374 <BLEPLAT_MemCmp>
10063806:	b00a      	add	sp, #40	@ 0x28
10063808:	bd70      	pop	{r4, r5, r6, pc}
1006380a:	46c0      	nop			@ (mov r8, r8)

1006380c <__arm_cp.1_0>:
1006380c:	1006a59c 	.word	0x1006a59c

10063810 <UUID_write_to_flat>:
10063810:	b510      	push	{r4, lr}
10063812:	460a      	mov	r2, r1
10063814:	4601      	mov	r1, r0
10063816:	7c00      	ldrb	r0, [r0, #16]
10063818:	2820      	cmp	r0, #32
1006381a:	d004      	beq.n	10063826 <UUID_write_to_flat+0x16>
1006381c:	2810      	cmp	r0, #16
1006381e:	d105      	bne.n	1006382c <UUID_write_to_flat+0x1c>
10063820:	310c      	adds	r1, #12
10063822:	2402      	movs	r4, #2
10063824:	e003      	b.n	1006382e <UUID_write_to_flat+0x1e>
10063826:	310c      	adds	r1, #12
10063828:	2404      	movs	r4, #4
1006382a:	e000      	b.n	1006382e <UUID_write_to_flat+0x1e>
1006382c:	2410      	movs	r4, #16
1006382e:	4610      	mov	r0, r2
10063830:	4622      	mov	r2, r4
10063832:	f7ef fd7f 	bl	10053334 <BLEPLAT_MemCpy>
10063836:	4620      	mov	r0, r4
10063838:	bd10      	pop	{r4, pc}

1006383a <UUID_get_value_p>:
1006383a:	7c01      	ldrb	r1, [r0, #16]
1006383c:	2980      	cmp	r1, #128	@ 0x80
1006383e:	d000      	beq.n	10063842 <UUID_get_value_p+0x8>
10063840:	300c      	adds	r0, #12
10063842:	4770      	bx	lr

10063844 <ACL_list_init>:
10063844:	2100      	movs	r1, #0
10063846:	6001      	str	r1, [r0, #0]
10063848:	6040      	str	r0, [r0, #4]
1006384a:	4770      	bx	lr

1006384c <ACL_list_insert_tail>:
1006384c:	2200      	movs	r2, #0
1006384e:	61ca      	str	r2, [r1, #28]
10063850:	6842      	ldr	r2, [r0, #4]
10063852:	6011      	str	r1, [r2, #0]
10063854:	311c      	adds	r1, #28
10063856:	6041      	str	r1, [r0, #4]
10063858:	4770      	bx	lr

1006385a <ACL_list_insert_head>:
1006385a:	6802      	ldr	r2, [r0, #0]
1006385c:	61ca      	str	r2, [r1, #28]
1006385e:	2a00      	cmp	r2, #0
10063860:	d102      	bne.n	10063868 <ACL_list_insert_head+0xe>
10063862:	460a      	mov	r2, r1
10063864:	321c      	adds	r2, #28
10063866:	6042      	str	r2, [r0, #4]
10063868:	6001      	str	r1, [r0, #0]
1006386a:	4770      	bx	lr

1006386c <ACL_list_remove>:
1006386c:	6803      	ldr	r3, [r0, #0]
1006386e:	428b      	cmp	r3, r1
10063870:	d009      	beq.n	10063886 <ACL_list_remove+0x1a>
10063872:	461a      	mov	r2, r3
10063874:	69db      	ldr	r3, [r3, #28]
10063876:	428b      	cmp	r3, r1
10063878:	d1fb      	bne.n	10063872 <ACL_list_remove+0x6>
1006387a:	69cb      	ldr	r3, [r1, #28]
1006387c:	61d3      	str	r3, [r2, #28]
1006387e:	2b00      	cmp	r3, #0
10063880:	d107      	bne.n	10063892 <ACL_list_remove+0x26>
10063882:	321c      	adds	r2, #28
10063884:	e004      	b.n	10063890 <ACL_list_remove+0x24>
10063886:	69ca      	ldr	r2, [r1, #28]
10063888:	6002      	str	r2, [r0, #0]
1006388a:	2a00      	cmp	r2, #0
1006388c:	d101      	bne.n	10063892 <ACL_list_remove+0x26>
1006388e:	4602      	mov	r2, r0
10063890:	6042      	str	r2, [r0, #4]
10063892:	2000      	movs	r0, #0
10063894:	61c8      	str	r0, [r1, #28]
10063896:	4770      	bx	lr

10063898 <ACL_list_remove_head>:
10063898:	4601      	mov	r1, r0
1006389a:	6800      	ldr	r0, [r0, #0]
1006389c:	69c2      	ldr	r2, [r0, #28]
1006389e:	600a      	str	r2, [r1, #0]
100638a0:	2a00      	cmp	r2, #0
100638a2:	d100      	bne.n	100638a6 <ACL_list_remove_head+0xe>
100638a4:	6049      	str	r1, [r1, #4]
100638a6:	2100      	movs	r1, #0
100638a8:	61c1      	str	r1, [r0, #28]
100638aa:	4770      	bx	lr

100638ac <ACL_list_get_pckt_count>:
100638ac:	2100      	movs	r1, #0
100638ae:	6800      	ldr	r0, [r0, #0]
100638b0:	2800      	cmp	r0, #0
100638b2:	d002      	beq.n	100638ba <ACL_list_get_pckt_count+0xe>
100638b4:	301c      	adds	r0, #28
100638b6:	1c49      	adds	r1, r1, #1
100638b8:	e7f9      	b.n	100638ae <ACL_list_get_pckt_count+0x2>
100638ba:	b288      	uxth	r0, r1
100638bc:	4770      	bx	lr
	...

100638c0 <addr8_list_search>:
100638c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100638c2:	b087      	sub	sp, #28
100638c4:	4604      	mov	r4, r0
100638c6:	0608      	lsls	r0, r1, #24
100638c8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
100638ca:	d052      	beq.n	10063972 <addr8_list_search+0xb2>
100638cc:	9501      	str	r5, [sp, #4]
100638ce:	20ff      	movs	r0, #255	@ 0xff
100638d0:	4615      	mov	r5, r2
100638d2:	4385      	bics	r5, r0
100638d4:	2601      	movs	r6, #1
100638d6:	9305      	str	r3, [sp, #20]
100638d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100638da:	461f      	mov	r7, r3
100638dc:	9600      	str	r6, [sp, #0]
100638de:	4037      	ands	r7, r6
100638e0:	9703      	str	r7, [sp, #12]
100638e2:	427e      	negs	r6, r7
100638e4:	4016      	ands	r6, r2
100638e6:	b2f2      	uxtb	r2, r6
100638e8:	1952      	adds	r2, r2, r5
100638ea:	9206      	str	r2, [sp, #24]
100638ec:	4d25      	ldr	r5, [pc, #148]	@ (10063984 <__arm_cp.0_0>)
100638ee:	9f05      	ldr	r7, [sp, #20]
100638f0:	463a      	mov	r2, r7
100638f2:	402a      	ands	r2, r5
100638f4:	461e      	mov	r6, r3
100638f6:	079d      	lsls	r5, r3, #30
100638f8:	17ed      	asrs	r5, r5, #31
100638fa:	403d      	ands	r5, r7
100638fc:	9004      	str	r0, [sp, #16]
100638fe:	0603      	lsls	r3, r0, #24
10063900:	402b      	ands	r3, r5
10063902:	189b      	adds	r3, r3, r2
10063904:	2002      	movs	r0, #2
10063906:	4030      	ands	r0, r6
10063908:	9002      	str	r0, [sp, #8]
1006390a:	1e48      	subs	r0, r1, #1
1006390c:	9005      	str	r0, [sp, #20]
1006390e:	b2c8      	uxtb	r0, r1
10063910:	0841      	lsrs	r1, r0, #1
10063912:	2600      	movs	r6, #0
10063914:	b2c8      	uxtb	r0, r1
10063916:	00c2      	lsls	r2, r0, #3
10063918:	18a0      	adds	r0, r4, r2
1006391a:	6845      	ldr	r5, [r0, #4]
1006391c:	9802      	ldr	r0, [sp, #8]
1006391e:	2800      	cmp	r0, #0
10063920:	d101      	bne.n	10063926 <addr8_list_search+0x66>
10063922:	4818      	ldr	r0, [pc, #96]	@ (10063984 <__arm_cp.0_0>)
10063924:	4005      	ands	r5, r0
10063926:	58a0      	ldr	r0, [r4, r2]
10063928:	4602      	mov	r2, r0
1006392a:	9f04      	ldr	r7, [sp, #16]
1006392c:	43ba      	bics	r2, r7
1006392e:	9f03      	ldr	r7, [sp, #12]
10063930:	2f00      	cmp	r7, #0
10063932:	d101      	bne.n	10063938 <addr8_list_search+0x78>
10063934:	4638      	mov	r0, r7
10063936:	e000      	b.n	1006393a <addr8_list_search+0x7a>
10063938:	b2c0      	uxtb	r0, r0
1006393a:	1882      	adds	r2, r0, r2
1006393c:	9806      	ldr	r0, [sp, #24]
1006393e:	4290      	cmp	r0, r2
10063940:	d101      	bne.n	10063946 <addr8_list_search+0x86>
10063942:	42ab      	cmp	r3, r5
10063944:	d018      	beq.n	10063978 <addr8_list_search+0xb8>
10063946:	42ab      	cmp	r3, r5
10063948:	d803      	bhi.n	10063952 <addr8_list_search+0x92>
1006394a:	d104      	bne.n	10063956 <addr8_list_search+0x96>
1006394c:	9806      	ldr	r0, [sp, #24]
1006394e:	4290      	cmp	r0, r2
10063950:	d901      	bls.n	10063956 <addr8_list_search+0x96>
10063952:	1c4e      	adds	r6, r1, #1
10063954:	e001      	b.n	1006395a <addr8_list_search+0x9a>
10063956:	1e48      	subs	r0, r1, #1
10063958:	9005      	str	r0, [sp, #20]
1006395a:	9805      	ldr	r0, [sp, #20]
1006395c:	1b80      	subs	r0, r0, r6
1006395e:	b2c0      	uxtb	r0, r0
10063960:	1c40      	adds	r0, r0, #1
10063962:	b2c2      	uxtb	r2, r0
10063964:	0851      	lsrs	r1, r2, #1
10063966:	1989      	adds	r1, r1, r6
10063968:	4282      	cmp	r2, r0
1006396a:	d0d3      	beq.n	10063914 <addr8_list_search+0x54>
1006396c:	2000      	movs	r0, #0
1006396e:	9d01      	ldr	r5, [sp, #4]
10063970:	e004      	b.n	1006397c <addr8_list_search+0xbc>
10063972:	2100      	movs	r1, #0
10063974:	4608      	mov	r0, r1
10063976:	e001      	b.n	1006397c <addr8_list_search+0xbc>
10063978:	9d01      	ldr	r5, [sp, #4]
1006397a:	9800      	ldr	r0, [sp, #0]
1006397c:	7029      	strb	r1, [r5, #0]
1006397e:	b007      	add	sp, #28
10063980:	bdf0      	pop	{r4, r5, r6, r7, pc}
10063982:	46c0      	nop			@ (mov r8, r8)

10063984 <__arm_cp.0_0>:
10063984:	00ffffff 	.word	0x00ffffff

10063988 <addr8_list_add>:
10063988:	b5f0      	push	{r4, r5, r6, r7, lr}
1006398a:	b089      	sub	sp, #36	@ 0x24
1006398c:	4615      	mov	r5, r2
1006398e:	460f      	mov	r7, r1
10063990:	4604      	mov	r4, r0
10063992:	7906      	ldrb	r6, [r0, #4]
10063994:	6800      	ldr	r0, [r0, #0]
10063996:	6861      	ldr	r1, [r4, #4]
10063998:	aa08      	add	r2, sp, #32
1006399a:	9300      	str	r3, [sp, #0]
1006399c:	9201      	str	r2, [sp, #4]
1006399e:	463a      	mov	r2, r7
100639a0:	462b      	mov	r3, r5
100639a2:	f7ff ff8d 	bl	100638c0 <addr8_list_search>
100639a6:	2100      	movs	r1, #0
100639a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
100639aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
100639ac:	2800      	cmp	r0, #0
100639ae:	9207      	str	r2, [sp, #28]
100639b0:	d126      	bne.n	10063a00 <addr8_list_add+0x78>
100639b2:	9706      	str	r7, [sp, #24]
100639b4:	7967      	ldrb	r7, [r4, #5]
100639b6:	42be      	cmp	r6, r7
100639b8:	d222      	bcs.n	10063a00 <addr8_list_add+0x78>
100639ba:	9302      	str	r3, [sp, #8]
100639bc:	9003      	str	r0, [sp, #12]
100639be:	9504      	str	r5, [sp, #16]
100639c0:	a908      	add	r1, sp, #32
100639c2:	7808      	ldrb	r0, [r1, #0]
100639c4:	9605      	str	r6, [sp, #20]
100639c6:	4286      	cmp	r6, r0
100639c8:	d00d      	beq.n	100639e6 <addr8_list_add+0x5e>
100639ca:	9f05      	ldr	r7, [sp, #20]
100639cc:	6822      	ldr	r2, [r4, #0]
100639ce:	b2fd      	uxtb	r5, r7
100639d0:	00ed      	lsls	r5, r5, #3
100639d2:	1956      	adds	r6, r2, r5
100639d4:	4633      	mov	r3, r6
100639d6:	3b08      	subs	r3, #8
100639d8:	cb0a      	ldmia	r3, {r1, r3}
100639da:	5151      	str	r1, [r2, r5]
100639dc:	6073      	str	r3, [r6, #4]
100639de:	1e7f      	subs	r7, r7, #1
100639e0:	b2f9      	uxtb	r1, r7
100639e2:	4281      	cmp	r1, r0
100639e4:	d1f2      	bne.n	100639cc <addr8_list_add+0x44>
100639e6:	6821      	ldr	r1, [r4, #0]
100639e8:	00c0      	lsls	r0, r0, #3
100639ea:	9a06      	ldr	r2, [sp, #24]
100639ec:	500a      	str	r2, [r1, r0]
100639ee:	1808      	adds	r0, r1, r0
100639f0:	9904      	ldr	r1, [sp, #16]
100639f2:	6041      	str	r1, [r0, #4]
100639f4:	9805      	ldr	r0, [sp, #20]
100639f6:	1c40      	adds	r0, r0, #1
100639f8:	7120      	strb	r0, [r4, #4]
100639fa:	2101      	movs	r1, #1
100639fc:	9803      	ldr	r0, [sp, #12]
100639fe:	9b02      	ldr	r3, [sp, #8]
10063a00:	9a08      	ldr	r2, [sp, #32]
10063a02:	9c07      	ldr	r4, [sp, #28]
10063a04:	7022      	strb	r2, [r4, #0]
10063a06:	7018      	strb	r0, [r3, #0]
10063a08:	4608      	mov	r0, r1
10063a0a:	b009      	add	sp, #36	@ 0x24
10063a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

10063a0e <addr8_list_remove_by_addr>:
10063a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
10063a10:	b087      	sub	sp, #28
10063a12:	460f      	mov	r7, r1
10063a14:	4601      	mov	r1, r0
10063a16:	7900      	ldrb	r0, [r0, #4]
10063a18:	2600      	movs	r6, #0
10063a1a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10063a1c:	2800      	cmp	r0, #0
10063a1e:	d02f      	beq.n	10063a80 <addr8_list_remove_by_addr+0x72>
10063a20:	9003      	str	r0, [sp, #12]
10063a22:	6808      	ldr	r0, [r1, #0]
10063a24:	9104      	str	r1, [sp, #16]
10063a26:	6849      	ldr	r1, [r1, #4]
10063a28:	9205      	str	r2, [sp, #20]
10063a2a:	ad06      	add	r5, sp, #24
10063a2c:	9300      	str	r3, [sp, #0]
10063a2e:	9501      	str	r5, [sp, #4]
10063a30:	463a      	mov	r2, r7
10063a32:	9b05      	ldr	r3, [sp, #20]
10063a34:	f7ff ff44 	bl	100638c0 <addr8_list_search>
10063a38:	2800      	cmp	r0, #0
10063a3a:	d021      	beq.n	10063a80 <addr8_list_remove_by_addr+0x72>
10063a3c:	9002      	str	r0, [sp, #8]
10063a3e:	9405      	str	r4, [sp, #20]
10063a40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10063a42:	9c04      	ldr	r4, [sp, #16]
10063a44:	6823      	ldr	r3, [r4, #0]
10063a46:	a906      	add	r1, sp, #24
10063a48:	7809      	ldrb	r1, [r1, #0]
10063a4a:	00cd      	lsls	r5, r1, #3
10063a4c:	195b      	adds	r3, r3, r5
10063a4e:	79db      	ldrb	r3, [r3, #7]
10063a50:	7013      	strb	r3, [r2, #0]
10063a52:	9803      	ldr	r0, [sp, #12]
10063a54:	1e40      	subs	r0, r0, #1
10063a56:	9003      	str	r0, [sp, #12]
10063a58:	b2c0      	uxtb	r0, r0
10063a5a:	4281      	cmp	r1, r0
10063a5c:	4623      	mov	r3, r4
10063a5e:	d00b      	beq.n	10063a78 <addr8_list_remove_by_addr+0x6a>
10063a60:	681d      	ldr	r5, [r3, #0]
10063a62:	b2ce      	uxtb	r6, r1
10063a64:	00f6      	lsls	r6, r6, #3
10063a66:	19af      	adds	r7, r5, r6
10063a68:	68ba      	ldr	r2, [r7, #8]
10063a6a:	68fc      	ldr	r4, [r7, #12]
10063a6c:	51aa      	str	r2, [r5, r6]
10063a6e:	607c      	str	r4, [r7, #4]
10063a70:	1c49      	adds	r1, r1, #1
10063a72:	b2ca      	uxtb	r2, r1
10063a74:	4282      	cmp	r2, r0
10063a76:	d1f3      	bne.n	10063a60 <addr8_list_remove_by_addr+0x52>
10063a78:	9803      	ldr	r0, [sp, #12]
10063a7a:	7118      	strb	r0, [r3, #4]
10063a7c:	9e02      	ldr	r6, [sp, #8]
10063a7e:	9c05      	ldr	r4, [sp, #20]
10063a80:	7026      	strb	r6, [r4, #0]
10063a82:	b007      	add	sp, #28
10063a84:	bdf0      	pop	{r4, r5, r6, r7, pc}

10063a86 <addr8_list_clear>:
10063a86:	2100      	movs	r1, #0
10063a88:	7101      	strb	r1, [r0, #4]
10063a8a:	4770      	bx	lr

10063a8c <BLEPLAT_aes128_encrypt>:
10063a8c:	b580      	push	{r7, lr}
10063a8e:	f7ef fc9e 	bl	100533ce <BLEPLAT_AesEcbEncrypt>
10063a92:	bd80      	pop	{r7, pc}

10063a94 <Hal_Get_Random_Number>:
10063a94:	b51c      	push	{r2, r3, r4, lr}
10063a96:	ac01      	add	r4, sp, #4
10063a98:	4620      	mov	r0, r4
10063a9a:	f7ef fcd7 	bl	1005344c <BLEPLAT_RngGetRandom16>
10063a9e:	8820      	ldrh	r0, [r4, #0]
10063aa0:	bd1c      	pop	{r2, r3, r4, pc}

10063aa2 <Hal_Get_Random_Number32>:
10063aa2:	b5e0      	push	{r5, r6, r7, lr}
10063aa4:	a801      	add	r0, sp, #4
10063aa6:	f7ef fcdd 	bl	10053464 <BLEPLAT_RngGetRandom32>
10063aaa:	9801      	ldr	r0, [sp, #4]
10063aac:	bd8c      	pop	{r2, r3, r7, pc}

10063aae <HAL_Generate_Random_Bytes_To>:
10063aae:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10063ab0:	460c      	mov	r4, r1
10063ab2:	4605      	mov	r5, r0
10063ab4:	2000      	movs	r0, #0
10063ab6:	b2c6      	uxtb	r6, r0
10063ab8:	42a6      	cmp	r6, r4
10063aba:	d20e      	bcs.n	10063ada <HAL_Generate_Random_Bytes_To+0x2c>
10063abc:	2000      	movs	r0, #0
10063abe:	f7ff ffe9 	bl	10063a94 <Hal_Get_Random_Number>
10063ac2:	55a8      	strb	r0, [r5, r6]
10063ac4:	a901      	add	r1, sp, #4
10063ac6:	7008      	strb	r0, [r1, #0]
10063ac8:	0a00      	lsrs	r0, r0, #8
10063aca:	4669      	mov	r1, sp
10063acc:	7008      	strb	r0, [r1, #0]
10063ace:	1c71      	adds	r1, r6, #1
10063ad0:	42a1      	cmp	r1, r4
10063ad2:	d200      	bcs.n	10063ad6 <HAL_Generate_Random_Bytes_To+0x28>
10063ad4:	5468      	strb	r0, [r5, r1]
10063ad6:	1cb0      	adds	r0, r6, #2
10063ad8:	e7ed      	b.n	10063ab6 <HAL_Generate_Random_Bytes_To+0x8>
10063ada:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10063adc <IDD_Initialize_Device_IDs>:
10063adc:	b5f0      	push	{r4, r5, r6, r7, lr}
10063ade:	b095      	sub	sp, #84	@ 0x54
10063ae0:	4839      	ldr	r0, [pc, #228]	@ (10063bc8 <__arm_cp.0_0>)
10063ae2:	6800      	ldr	r0, [r0, #0]
10063ae4:	9000      	str	r0, [sp, #0]
10063ae6:	a80b      	add	r0, sp, #44	@ 0x2c
10063ae8:	f7ff fc63 	bl	100633b2 <nvm_dev_id_data_get_record>
10063aec:	2800      	cmp	r0, #0
10063aee:	d031      	beq.n	10063b54 <IDD_Initialize_Device_IDs+0x78>
10063af0:	af01      	add	r7, sp, #4
10063af2:	2406      	movs	r4, #6
10063af4:	2500      	movs	r5, #0
10063af6:	4b35      	ldr	r3, [pc, #212]	@ (10063bcc <__arm_cp.0_1>)
10063af8:	4638      	mov	r0, r7
10063afa:	4621      	mov	r1, r4
10063afc:	462a      	mov	r2, r5
10063afe:	4798      	blx	r3
10063b00:	7978      	ldrb	r0, [r7, #5]
10063b02:	21c0      	movs	r1, #192	@ 0xc0
10063b04:	4301      	orrs	r1, r0
10063b06:	7179      	strb	r1, [r7, #5]
10063b08:	ae0b      	add	r6, sp, #44	@ 0x2c
10063b0a:	4630      	mov	r0, r6
10063b0c:	3020      	adds	r0, #32
10063b0e:	4b30      	ldr	r3, [pc, #192]	@ (10063bd0 <__arm_cp.0_2>)
10063b10:	4639      	mov	r1, r7
10063b12:	4622      	mov	r2, r4
10063b14:	4798      	blx	r3
10063b16:	ac07      	add	r4, sp, #28
10063b18:	2710      	movs	r7, #16
10063b1a:	4620      	mov	r0, r4
10063b1c:	4639      	mov	r1, r7
10063b1e:	462a      	mov	r2, r5
10063b20:	4b2a      	ldr	r3, [pc, #168]	@ (10063bcc <__arm_cp.0_1>)
10063b22:	4798      	blx	r3
10063b24:	4630      	mov	r0, r6
10063b26:	4621      	mov	r1, r4
10063b28:	463a      	mov	r2, r7
10063b2a:	4b29      	ldr	r3, [pc, #164]	@ (10063bd0 <__arm_cp.0_2>)
10063b2c:	4798      	blx	r3
10063b2e:	ac03      	add	r4, sp, #12
10063b30:	4620      	mov	r0, r4
10063b32:	4639      	mov	r1, r7
10063b34:	462a      	mov	r2, r5
10063b36:	4b25      	ldr	r3, [pc, #148]	@ (10063bcc <__arm_cp.0_1>)
10063b38:	4798      	blx	r3
10063b3a:	4630      	mov	r0, r6
10063b3c:	3010      	adds	r0, #16
10063b3e:	4621      	mov	r1, r4
10063b40:	463a      	mov	r2, r7
10063b42:	4b23      	ldr	r3, [pc, #140]	@ (10063bd0 <__arm_cp.0_2>)
10063b44:	4798      	blx	r3
10063b46:	4630      	mov	r0, r6
10063b48:	f7ff fc40 	bl	100633cc <nvm_dev_id_data_add_record>
10063b4c:	2800      	cmp	r0, #0
10063b4e:	d103      	bne.n	10063b58 <IDD_Initialize_Device_IDs+0x7c>
10063b50:	4605      	mov	r5, r0
10063b52:	e003      	b.n	10063b5c <IDD_Initialize_Device_IDs+0x80>
10063b54:	2500      	movs	r5, #0
10063b56:	e001      	b.n	10063b5c <IDD_Initialize_Device_IDs+0x80>
10063b58:	200e      	movs	r0, #14
10063b5a:	43c5      	mvns	r5, r0
10063b5c:	4c1d      	ldr	r4, [pc, #116]	@ (10063bd4 <__arm_cp.0_3>)
10063b5e:	6822      	ldr	r2, [r4, #0]
10063b60:	322e      	adds	r2, #46	@ 0x2e
10063b62:	2600      	movs	r6, #0
10063b64:	2706      	movs	r7, #6
10063b66:	4630      	mov	r0, r6
10063b68:	4639      	mov	r1, r7
10063b6a:	f7ff fdef 	bl	1006374c <is_Buffer_All_Set_To>
10063b6e:	a90b      	add	r1, sp, #44	@ 0x2c
10063b70:	2800      	cmp	r0, #0
10063b72:	d001      	beq.n	10063b78 <IDD_Initialize_Device_IDs+0x9c>
10063b74:	3120      	adds	r1, #32
10063b76:	e001      	b.n	10063b7c <IDD_Initialize_Device_IDs+0xa0>
10063b78:	6821      	ldr	r1, [r4, #0]
10063b7a:	312e      	adds	r1, #46	@ 0x2e
10063b7c:	9800      	ldr	r0, [sp, #0]
10063b7e:	3060      	adds	r0, #96	@ 0x60
10063b80:	463a      	mov	r2, r7
10063b82:	f7ef fbd7 	bl	10053334 <BLEPLAT_MemCpy>
10063b86:	6822      	ldr	r2, [r4, #0]
10063b88:	3208      	adds	r2, #8
10063b8a:	2110      	movs	r1, #16
10063b8c:	4630      	mov	r0, r6
10063b8e:	f7ff fddd 	bl	1006374c <is_Buffer_All_Set_To>
10063b92:	2800      	cmp	r0, #0
10063b94:	d005      	beq.n	10063ba2 <IDD_Initialize_Device_IDs+0xc6>
10063b96:	6820      	ldr	r0, [r4, #0]
10063b98:	3008      	adds	r0, #8
10063b9a:	a90b      	add	r1, sp, #44	@ 0x2c
10063b9c:	2210      	movs	r2, #16
10063b9e:	f7ef fbc9 	bl	10053334 <BLEPLAT_MemCpy>
10063ba2:	6822      	ldr	r2, [r4, #0]
10063ba4:	3218      	adds	r2, #24
10063ba6:	2000      	movs	r0, #0
10063ba8:	2110      	movs	r1, #16
10063baa:	f7ff fdcf 	bl	1006374c <is_Buffer_All_Set_To>
10063bae:	2800      	cmp	r0, #0
10063bb0:	d006      	beq.n	10063bc0 <IDD_Initialize_Device_IDs+0xe4>
10063bb2:	a90b      	add	r1, sp, #44	@ 0x2c
10063bb4:	3110      	adds	r1, #16
10063bb6:	6820      	ldr	r0, [r4, #0]
10063bb8:	3018      	adds	r0, #24
10063bba:	2210      	movs	r2, #16
10063bbc:	f7ef fbba 	bl	10053334 <BLEPLAT_MemCpy>
10063bc0:	b2e8      	uxtb	r0, r5
10063bc2:	b015      	add	sp, #84	@ 0x54
10063bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10063bc6:	46c0      	nop			@ (mov r8, r8)

10063bc8 <__arm_cp.0_0>:
10063bc8:	2000290c 	.word	0x2000290c

10063bcc <__arm_cp.0_1>:
10063bcc:	10063aaf 	.word	0x10063aaf

10063bd0 <__arm_cp.0_2>:
10063bd0:	10053335 	.word	0x10053335

10063bd4 <__arm_cp.0_3>:
10063bd4:	20002904 	.word	0x20002904

10063bd8 <aci_gatt_clt_notification_event_notify>:
10063bd8:	b5b0      	push	{r4, r5, r7, lr}
10063bda:	b0ff      	sub	sp, #508	@ 0x1fc
10063bdc:	b083      	sub	sp, #12
10063bde:	461c      	mov	r4, r3
10063be0:	466d      	mov	r5, sp
10063be2:	732b      	strb	r3, [r5, #12]
10063be4:	72aa      	strb	r2, [r5, #10]
10063be6:	7229      	strb	r1, [r5, #8]
10063be8:	71a8      	strb	r0, [r5, #6]
10063bea:	0a1b      	lsrs	r3, r3, #8
10063bec:	736b      	strb	r3, [r5, #13]
10063bee:	0a12      	lsrs	r2, r2, #8
10063bf0:	72ea      	strb	r2, [r5, #11]
10063bf2:	0a09      	lsrs	r1, r1, #8
10063bf4:	7269      	strb	r1, [r5, #9]
10063bf6:	0a00      	lsrs	r0, r0, #8
10063bf8:	71e8      	strb	r0, [r5, #7]
10063bfa:	4628      	mov	r0, r5
10063bfc:	300e      	adds	r0, #14
10063bfe:	9986      	ldr	r1, [sp, #536]	@ 0x218
10063c00:	4622      	mov	r2, r4
10063c02:	f7ef fb97 	bl	10053334 <BLEPLAT_MemCpy>
10063c06:	4620      	mov	r0, r4
10063c08:	300a      	adds	r0, #10
10063c0a:	70a8      	strb	r0, [r5, #2]
10063c0c:	0a00      	lsrs	r0, r0, #8
10063c0e:	70e8      	strb	r0, [r5, #3]
10063c10:	200f      	movs	r0, #15
10063c12:	7128      	strb	r0, [r5, #4]
10063c14:	20ff      	movs	r0, #255	@ 0xff
10063c16:	7068      	strb	r0, [r5, #1]
10063c18:	2082      	movs	r0, #130	@ 0x82
10063c1a:	7028      	strb	r0, [r5, #0]
10063c1c:	200c      	movs	r0, #12
10063c1e:	7168      	strb	r0, [r5, #5]
10063c20:	340e      	adds	r4, #14
10063c22:	b2a1      	uxth	r1, r4
10063c24:	4628      	mov	r0, r5
10063c26:	f7eb fd53 	bl	1004f6d0 <BLE_STACK_Event>
10063c2a:	b07f      	add	sp, #508	@ 0x1fc
10063c2c:	b003      	add	sp, #12
10063c2e:	bdb0      	pop	{r4, r5, r7, pc}

10063c30 <aci_gatt_clt_indication_event_cb>:
10063c30:	b5b0      	push	{r4, r5, r7, lr}
10063c32:	b0ff      	sub	sp, #508	@ 0x1fc
10063c34:	b083      	sub	sp, #12
10063c36:	460c      	mov	r4, r1
10063c38:	4605      	mov	r5, r0
10063c3a:	688b      	ldr	r3, [r1, #8]
10063c3c:	88ca      	ldrh	r2, [r1, #6]
10063c3e:	8889      	ldrh	r1, [r1, #4]
10063c40:	4668      	mov	r0, sp
10063c42:	1d80      	adds	r0, r0, #6
10063c44:	f7f2 fd57 	bl	100566f6 <aci_gatt_clt_indication_event_copy>
10063c48:	0728      	lsls	r0, r5, #28
10063c4a:	d502      	bpl.n	10063c52 <aci_gatt_clt_indication_event_cb+0x22>
10063c4c:	68a0      	ldr	r0, [r4, #8]
10063c4e:	f7f1 ff09 	bl	10055a64 <ACL_pkt_release>
10063c52:	9903      	ldr	r1, [sp, #12]
10063c54:	460a      	mov	r2, r1
10063c56:	320a      	adds	r2, #10
10063c58:	4668      	mov	r0, sp
10063c5a:	7082      	strb	r2, [r0, #2]
10063c5c:	0a12      	lsrs	r2, r2, #8
10063c5e:	70c2      	strb	r2, [r0, #3]
10063c60:	220e      	movs	r2, #14
10063c62:	7102      	strb	r2, [r0, #4]
10063c64:	4a05      	ldr	r2, [pc, #20]	@ (10063c7c <__arm_cp.1_0>)
10063c66:	8002      	strh	r2, [r0, #0]
10063c68:	220c      	movs	r2, #12
10063c6a:	7142      	strb	r2, [r0, #5]
10063c6c:	310e      	adds	r1, #14
10063c6e:	b289      	uxth	r1, r1
10063c70:	f7eb fd2e 	bl	1004f6d0 <BLE_STACK_Event>
10063c74:	b07f      	add	sp, #508	@ 0x1fc
10063c76:	b003      	add	sp, #12
10063c78:	bdb0      	pop	{r4, r5, r7, pc}
10063c7a:	46c0      	nop			@ (mov r8, r8)

10063c7c <__arm_cp.1_0>:
10063c7c:	0000ff82 	.word	0x0000ff82

10063c80 <aci_gatt_clt_notification_event_cb>:
10063c80:	b5b0      	push	{r4, r5, r7, lr}
10063c82:	b0ff      	sub	sp, #508	@ 0x1fc
10063c84:	b085      	sub	sp, #20
10063c86:	460c      	mov	r4, r1
10063c88:	4605      	mov	r5, r0
10063c8a:	688b      	ldr	r3, [r1, #8]
10063c8c:	88ca      	ldrh	r2, [r1, #6]
10063c8e:	8889      	ldrh	r1, [r1, #4]
10063c90:	a802      	add	r0, sp, #8
10063c92:	1d80      	adds	r0, r0, #6
10063c94:	f7f2 fd54 	bl	10056740 <aci_gatt_clt_notification_event_copy>
10063c98:	0728      	lsls	r0, r5, #28
10063c9a:	d502      	bpl.n	10063ca2 <aci_gatt_clt_notification_event_cb+0x22>
10063c9c:	68a0      	ldr	r0, [r4, #8]
10063c9e:	f7f1 fee1 	bl	10055a64 <ACL_pkt_release>
10063ca2:	ac02      	add	r4, sp, #8
10063ca4:	89a3      	ldrh	r3, [r4, #12]
10063ca6:	8962      	ldrh	r2, [r4, #10]
10063ca8:	8921      	ldrh	r1, [r4, #8]
10063caa:	88e0      	ldrh	r0, [r4, #6]
10063cac:	340e      	adds	r4, #14
10063cae:	9400      	str	r4, [sp, #0]
10063cb0:	f7ff ff92 	bl	10063bd8 <aci_gatt_clt_notification_event_notify>
10063cb4:	b07f      	add	sp, #508	@ 0x1fc
10063cb6:	b005      	add	sp, #20
10063cb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

10063cbc <aci_gatt_srv_write_event_cb>:
10063cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
10063cbe:	b0ff      	sub	sp, #508	@ 0x1fc
10063cc0:	b086      	sub	sp, #24
10063cc2:	460c      	mov	r4, r1
10063cc4:	4605      	mov	r5, r0
10063cc6:	7a0b      	ldrb	r3, [r1, #8]
10063cc8:	88ca      	ldrh	r2, [r1, #6]
10063cca:	8889      	ldrh	r1, [r1, #4]
10063ccc:	8960      	ldrh	r0, [r4, #10]
10063cce:	89a6      	ldrh	r6, [r4, #12]
10063cd0:	6927      	ldr	r7, [r4, #16]
10063cd2:	9000      	str	r0, [sp, #0]
10063cd4:	9601      	str	r6, [sp, #4]
10063cd6:	9702      	str	r7, [sp, #8]
10063cd8:	a803      	add	r0, sp, #12
10063cda:	1d80      	adds	r0, r0, #6
10063cdc:	f7f2 fd79 	bl	100567d2 <aci_gatt_srv_write_event_copy>
10063ce0:	0728      	lsls	r0, r5, #28
10063ce2:	d502      	bpl.n	10063cea <aci_gatt_srv_write_event_cb+0x2e>
10063ce4:	6920      	ldr	r0, [r4, #16]
10063ce6:	f7f1 febd 	bl	10055a64 <ACL_pkt_release>
10063cea:	a803      	add	r0, sp, #12
10063cec:	7b41      	ldrb	r1, [r0, #13]
10063cee:	7b82      	ldrb	r2, [r0, #14]
10063cf0:	0212      	lsls	r2, r2, #8
10063cf2:	1851      	adds	r1, r2, r1
10063cf4:	460a      	mov	r2, r1
10063cf6:	320b      	adds	r2, #11
10063cf8:	7082      	strb	r2, [r0, #2]
10063cfa:	0a12      	lsrs	r2, r2, #8
10063cfc:	70c2      	strb	r2, [r0, #3]
10063cfe:	221a      	movs	r2, #26
10063d00:	7102      	strb	r2, [r0, #4]
10063d02:	4a05      	ldr	r2, [pc, #20]	@ (10063d18 <__arm_cp.3_0>)
10063d04:	8002      	strh	r2, [r0, #0]
10063d06:	220c      	movs	r2, #12
10063d08:	7142      	strb	r2, [r0, #5]
10063d0a:	310f      	adds	r1, #15
10063d0c:	b289      	uxth	r1, r1
10063d0e:	f7eb fcdf 	bl	1004f6d0 <BLE_STACK_Event>
10063d12:	b07f      	add	sp, #508	@ 0x1fc
10063d14:	b006      	add	sp, #24
10063d16:	bdf0      	pop	{r4, r5, r6, r7, pc}

10063d18 <__arm_cp.3_0>:
10063d18:	0000ff82 	.word	0x0000ff82

10063d1c <aci_gatt_clt_multi_notification_int_event_cb>:
10063d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10063d1e:	b0ff      	sub	sp, #508	@ 0x1fc
10063d20:	b08c      	sub	sp, #48	@ 0x30
10063d22:	460c      	mov	r4, r1
10063d24:	4605      	mov	r5, r0
10063d26:	688b      	ldr	r3, [r1, #8]
10063d28:	88ca      	ldrh	r2, [r1, #6]
10063d2a:	8889      	ldrh	r1, [r1, #4]
10063d2c:	a807      	add	r0, sp, #28
10063d2e:	1d80      	adds	r0, r0, #6
10063d30:	f7f2 fd87 	bl	10056842 <aci_gatt_clt_multi_notification_int_event_copy>
10063d34:	0728      	lsls	r0, r5, #28
10063d36:	d502      	bpl.n	10063d3e <aci_gatt_clt_multi_notification_int_event_cb+0x22>
10063d38:	68a0      	ldr	r0, [r4, #8]
10063d3a:	f7f1 fe93 	bl	10055a64 <ACL_pkt_release>
10063d3e:	a807      	add	r0, sp, #28
10063d40:	8941      	ldrh	r1, [r0, #10]
10063d42:	9105      	str	r1, [sp, #20]
10063d44:	8901      	ldrh	r1, [r0, #8]
10063d46:	9103      	str	r1, [sp, #12]
10063d48:	88c1      	ldrh	r1, [r0, #6]
10063d4a:	9102      	str	r1, [sp, #8]
10063d4c:	300c      	adds	r0, #12
10063d4e:	9004      	str	r0, [sp, #16]
10063d50:	2500      	movs	r5, #0
10063d52:	9e04      	ldr	r6, [sp, #16]
10063d54:	b2a8      	uxth	r0, r5
10063d56:	9905      	ldr	r1, [sp, #20]
10063d58:	4288      	cmp	r0, r1
10063d5a:	d21c      	bcs.n	10063d96 <aci_gatt_clt_multi_notification_int_event_cb+0x7a>
10063d5c:	1831      	adds	r1, r6, r0
10063d5e:	a88a      	add	r0, sp, #552	@ 0x228
10063d60:	9006      	str	r0, [sp, #24]
10063d62:	2402      	movs	r4, #2
10063d64:	4622      	mov	r2, r4
10063d66:	f7ef fae5 	bl	10053334 <BLEPLAT_MemCpy>
10063d6a:	1ca8      	adds	r0, r5, #2
10063d6c:	b280      	uxth	r0, r0
10063d6e:	1831      	adds	r1, r6, r0
10063d70:	af89      	add	r7, sp, #548	@ 0x224
10063d72:	4638      	mov	r0, r7
10063d74:	4622      	mov	r2, r4
10063d76:	f7ef fadd 	bl	10053334 <BLEPLAT_MemCpy>
10063d7a:	1d28      	adds	r0, r5, #4
10063d7c:	b284      	uxth	r4, r0
10063d7e:	1930      	adds	r0, r6, r4
10063d80:	883b      	ldrh	r3, [r7, #0]
10063d82:	9906      	ldr	r1, [sp, #24]
10063d84:	880a      	ldrh	r2, [r1, #0]
10063d86:	9000      	str	r0, [sp, #0]
10063d88:	9802      	ldr	r0, [sp, #8]
10063d8a:	9903      	ldr	r1, [sp, #12]
10063d8c:	f7ff ff24 	bl	10063bd8 <aci_gatt_clt_notification_event_notify>
10063d90:	8838      	ldrh	r0, [r7, #0]
10063d92:	1825      	adds	r5, r4, r0
10063d94:	e7de      	b.n	10063d54 <aci_gatt_clt_multi_notification_int_event_cb+0x38>
10063d96:	b07f      	add	sp, #508	@ 0x1fc
10063d98:	b00c      	add	sp, #48	@ 0x30
10063d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10063d9c <aci_att_clt_find_info_resp_event_cb>:
10063d9c:	b5b0      	push	{r4, r5, r7, lr}
10063d9e:	b0ff      	sub	sp, #508	@ 0x1fc
10063da0:	b083      	sub	sp, #12
10063da2:	460c      	mov	r4, r1
10063da4:	4605      	mov	r5, r0
10063da6:	688b      	ldr	r3, [r1, #8]
10063da8:	88ca      	ldrh	r2, [r1, #6]
10063daa:	8889      	ldrh	r1, [r1, #4]
10063dac:	4668      	mov	r0, sp
10063dae:	1d80      	adds	r0, r0, #6
10063db0:	f7f2 fbc0 	bl	10056534 <aci_att_clt_find_info_resp_event_copy>
10063db4:	0728      	lsls	r0, r5, #28
10063db6:	d502      	bpl.n	10063dbe <aci_att_clt_find_info_resp_event_cb+0x22>
10063db8:	68a0      	ldr	r0, [r4, #8]
10063dba:	f7f1 fe53 	bl	10055a64 <ACL_pkt_release>
10063dbe:	4668      	mov	r0, sp
10063dc0:	7ac1      	ldrb	r1, [r0, #11]
10063dc2:	9a03      	ldr	r2, [sp, #12]
10063dc4:	0212      	lsls	r2, r2, #8
10063dc6:	1851      	adds	r1, r2, r1
10063dc8:	460a      	mov	r2, r1
10063dca:	3209      	adds	r2, #9
10063dcc:	7082      	strb	r2, [r0, #2]
10063dce:	0a12      	lsrs	r2, r2, #8
10063dd0:	70c2      	strb	r2, [r0, #3]
10063dd2:	2204      	movs	r2, #4
10063dd4:	7102      	strb	r2, [r0, #4]
10063dd6:	4a05      	ldr	r2, [pc, #20]	@ (10063dec <__arm_cp.5_0>)
10063dd8:	8002      	strh	r2, [r0, #0]
10063dda:	220c      	movs	r2, #12
10063ddc:	7142      	strb	r2, [r0, #5]
10063dde:	310d      	adds	r1, #13
10063de0:	b289      	uxth	r1, r1
10063de2:	f7eb fc75 	bl	1004f6d0 <BLE_STACK_Event>
10063de6:	b07f      	add	sp, #508	@ 0x1fc
10063de8:	b003      	add	sp, #12
10063dea:	bdb0      	pop	{r4, r5, r7, pc}

10063dec <__arm_cp.5_0>:
10063dec:	0000ff82 	.word	0x0000ff82

10063df0 <aci_att_clt_find_by_type_value_resp_event_cb>:
10063df0:	b5b0      	push	{r4, r5, r7, lr}
10063df2:	b0ff      	sub	sp, #508	@ 0x1fc
10063df4:	b083      	sub	sp, #12
10063df6:	460c      	mov	r4, r1
10063df8:	4605      	mov	r5, r0
10063dfa:	688b      	ldr	r3, [r1, #8]
10063dfc:	88ca      	ldrh	r2, [r1, #6]
10063dfe:	8889      	ldrh	r1, [r1, #4]
10063e00:	4668      	mov	r0, sp
10063e02:	1d80      	adds	r0, r0, #6
10063e04:	f7f2 fbb4 	bl	10056570 <aci_att_clt_find_by_type_value_resp_event_copy>
10063e08:	0728      	lsls	r0, r5, #28
10063e0a:	d502      	bpl.n	10063e12 <aci_att_clt_find_by_type_value_resp_event_cb+0x22>
10063e0c:	68a0      	ldr	r0, [r4, #8]
10063e0e:	f7f1 fe29 	bl	10055a64 <ACL_pkt_release>
10063e12:	4668      	mov	r0, sp
10063e14:	7a81      	ldrb	r1, [r0, #10]
10063e16:	0089      	lsls	r1, r1, #2
10063e18:	1dca      	adds	r2, r1, #7
10063e1a:	7082      	strb	r2, [r0, #2]
10063e1c:	0a12      	lsrs	r2, r2, #8
10063e1e:	70c2      	strb	r2, [r0, #3]
10063e20:	2205      	movs	r2, #5
10063e22:	7102      	strb	r2, [r0, #4]
10063e24:	4a04      	ldr	r2, [pc, #16]	@ (10063e38 <__arm_cp.6_0>)
10063e26:	8002      	strh	r2, [r0, #0]
10063e28:	220c      	movs	r2, #12
10063e2a:	7142      	strb	r2, [r0, #5]
10063e2c:	310b      	adds	r1, #11
10063e2e:	f7eb fc4f 	bl	1004f6d0 <BLE_STACK_Event>
10063e32:	b07f      	add	sp, #508	@ 0x1fc
10063e34:	b003      	add	sp, #12
10063e36:	bdb0      	pop	{r4, r5, r7, pc}

10063e38 <__arm_cp.6_0>:
10063e38:	0000ff82 	.word	0x0000ff82

10063e3c <aci_att_clt_read_by_type_resp_event_cb>:
10063e3c:	b5b0      	push	{r4, r5, r7, lr}
10063e3e:	b0ff      	sub	sp, #508	@ 0x1fc
10063e40:	b083      	sub	sp, #12
10063e42:	460c      	mov	r4, r1
10063e44:	4605      	mov	r5, r0
10063e46:	688b      	ldr	r3, [r1, #8]
10063e48:	88ca      	ldrh	r2, [r1, #6]
10063e4a:	8889      	ldrh	r1, [r1, #4]
10063e4c:	4668      	mov	r0, sp
10063e4e:	1d80      	adds	r0, r0, #6
10063e50:	f7f2 fba3 	bl	1005659a <aci_att_clt_read_by_type_resp_event_copy>
10063e54:	0728      	lsls	r0, r5, #28
10063e56:	d502      	bpl.n	10063e5e <aci_att_clt_read_by_type_resp_event_cb+0x22>
10063e58:	68a0      	ldr	r0, [r4, #8]
10063e5a:	f7f1 fe03 	bl	10055a64 <ACL_pkt_release>
10063e5e:	4668      	mov	r0, sp
10063e60:	7ac1      	ldrb	r1, [r0, #11]
10063e62:	9a03      	ldr	r2, [sp, #12]
10063e64:	0212      	lsls	r2, r2, #8
10063e66:	1851      	adds	r1, r2, r1
10063e68:	460a      	mov	r2, r1
10063e6a:	3209      	adds	r2, #9
10063e6c:	7082      	strb	r2, [r0, #2]
10063e6e:	0a12      	lsrs	r2, r2, #8
10063e70:	70c2      	strb	r2, [r0, #3]
10063e72:	2206      	movs	r2, #6
10063e74:	7102      	strb	r2, [r0, #4]
10063e76:	4a05      	ldr	r2, [pc, #20]	@ (10063e8c <__arm_cp.7_0>)
10063e78:	8002      	strh	r2, [r0, #0]
10063e7a:	220c      	movs	r2, #12
10063e7c:	7142      	strb	r2, [r0, #5]
10063e7e:	310d      	adds	r1, #13
10063e80:	b289      	uxth	r1, r1
10063e82:	f7eb fc25 	bl	1004f6d0 <BLE_STACK_Event>
10063e86:	b07f      	add	sp, #508	@ 0x1fc
10063e88:	b003      	add	sp, #12
10063e8a:	bdb0      	pop	{r4, r5, r7, pc}

10063e8c <__arm_cp.7_0>:
10063e8c:	0000ff82 	.word	0x0000ff82

10063e90 <aci_att_clt_read_resp_event_cb>:
10063e90:	b5b0      	push	{r4, r5, r7, lr}
10063e92:	b0ff      	sub	sp, #508	@ 0x1fc
10063e94:	b083      	sub	sp, #12
10063e96:	460c      	mov	r4, r1
10063e98:	4605      	mov	r5, r0
10063e9a:	688b      	ldr	r3, [r1, #8]
10063e9c:	88ca      	ldrh	r2, [r1, #6]
10063e9e:	8889      	ldrh	r1, [r1, #4]
10063ea0:	4668      	mov	r0, sp
10063ea2:	1d80      	adds	r0, r0, #6
10063ea4:	f7f2 fb97 	bl	100565d6 <aci_att_clt_read_resp_event_copy>
10063ea8:	0728      	lsls	r0, r5, #28
10063eaa:	d502      	bpl.n	10063eb2 <aci_att_clt_read_resp_event_cb+0x22>
10063eac:	68a0      	ldr	r0, [r4, #8]
10063eae:	f7f1 fdd9 	bl	10055a64 <ACL_pkt_release>
10063eb2:	4668      	mov	r0, sp
10063eb4:	8941      	ldrh	r1, [r0, #10]
10063eb6:	460a      	mov	r2, r1
10063eb8:	3208      	adds	r2, #8
10063eba:	7082      	strb	r2, [r0, #2]
10063ebc:	0a12      	lsrs	r2, r2, #8
10063ebe:	70c2      	strb	r2, [r0, #3]
10063ec0:	2207      	movs	r2, #7
10063ec2:	7102      	strb	r2, [r0, #4]
10063ec4:	4a05      	ldr	r2, [pc, #20]	@ (10063edc <__arm_cp.8_0>)
10063ec6:	8002      	strh	r2, [r0, #0]
10063ec8:	220c      	movs	r2, #12
10063eca:	7142      	strb	r2, [r0, #5]
10063ecc:	310c      	adds	r1, #12
10063ece:	b289      	uxth	r1, r1
10063ed0:	f7eb fbfe 	bl	1004f6d0 <BLE_STACK_Event>
10063ed4:	b07f      	add	sp, #508	@ 0x1fc
10063ed6:	b003      	add	sp, #12
10063ed8:	bdb0      	pop	{r4, r5, r7, pc}
10063eda:	46c0      	nop			@ (mov r8, r8)

10063edc <__arm_cp.8_0>:
10063edc:	0000ff82 	.word	0x0000ff82

10063ee0 <aci_att_clt_read_blob_resp_event_cb>:
10063ee0:	b5b0      	push	{r4, r5, r7, lr}
10063ee2:	b0ff      	sub	sp, #508	@ 0x1fc
10063ee4:	b083      	sub	sp, #12
10063ee6:	460c      	mov	r4, r1
10063ee8:	4605      	mov	r5, r0
10063eea:	688b      	ldr	r3, [r1, #8]
10063eec:	88ca      	ldrh	r2, [r1, #6]
10063eee:	8889      	ldrh	r1, [r1, #4]
10063ef0:	4668      	mov	r0, sp
10063ef2:	1d80      	adds	r0, r0, #6
10063ef4:	f7f2 fb85 	bl	10056602 <aci_att_clt_read_blob_resp_event_copy>
10063ef8:	0728      	lsls	r0, r5, #28
10063efa:	d502      	bpl.n	10063f02 <aci_att_clt_read_blob_resp_event_cb+0x22>
10063efc:	68a0      	ldr	r0, [r4, #8]
10063efe:	f7f1 fdb1 	bl	10055a64 <ACL_pkt_release>
10063f02:	4668      	mov	r0, sp
10063f04:	8941      	ldrh	r1, [r0, #10]
10063f06:	460a      	mov	r2, r1
10063f08:	3208      	adds	r2, #8
10063f0a:	7082      	strb	r2, [r0, #2]
10063f0c:	0a12      	lsrs	r2, r2, #8
10063f0e:	70c2      	strb	r2, [r0, #3]
10063f10:	2208      	movs	r2, #8
10063f12:	7102      	strb	r2, [r0, #4]
10063f14:	4a05      	ldr	r2, [pc, #20]	@ (10063f2c <__arm_cp.9_0>)
10063f16:	8002      	strh	r2, [r0, #0]
10063f18:	220c      	movs	r2, #12
10063f1a:	7142      	strb	r2, [r0, #5]
10063f1c:	310c      	adds	r1, #12
10063f1e:	b289      	uxth	r1, r1
10063f20:	f7eb fbd6 	bl	1004f6d0 <BLE_STACK_Event>
10063f24:	b07f      	add	sp, #508	@ 0x1fc
10063f26:	b003      	add	sp, #12
10063f28:	bdb0      	pop	{r4, r5, r7, pc}
10063f2a:	46c0      	nop			@ (mov r8, r8)

10063f2c <__arm_cp.9_0>:
10063f2c:	0000ff82 	.word	0x0000ff82

10063f30 <aci_att_clt_read_multiple_resp_event_cb>:
10063f30:	b5b0      	push	{r4, r5, r7, lr}
10063f32:	b0ff      	sub	sp, #508	@ 0x1fc
10063f34:	b083      	sub	sp, #12
10063f36:	460c      	mov	r4, r1
10063f38:	4605      	mov	r5, r0
10063f3a:	688b      	ldr	r3, [r1, #8]
10063f3c:	88ca      	ldrh	r2, [r1, #6]
10063f3e:	8889      	ldrh	r1, [r1, #4]
10063f40:	4668      	mov	r0, sp
10063f42:	1d80      	adds	r0, r0, #6
10063f44:	f7f2 fb73 	bl	1005662e <aci_att_clt_read_multiple_resp_event_copy>
10063f48:	0728      	lsls	r0, r5, #28
10063f4a:	d502      	bpl.n	10063f52 <aci_att_clt_read_multiple_resp_event_cb+0x22>
10063f4c:	68a0      	ldr	r0, [r4, #8]
10063f4e:	f7f1 fd89 	bl	10055a64 <ACL_pkt_release>
10063f52:	4668      	mov	r0, sp
10063f54:	8941      	ldrh	r1, [r0, #10]
10063f56:	460a      	mov	r2, r1
10063f58:	3208      	adds	r2, #8
10063f5a:	7082      	strb	r2, [r0, #2]
10063f5c:	0a12      	lsrs	r2, r2, #8
10063f5e:	70c2      	strb	r2, [r0, #3]
10063f60:	2209      	movs	r2, #9
10063f62:	7102      	strb	r2, [r0, #4]
10063f64:	4a05      	ldr	r2, [pc, #20]	@ (10063f7c <__arm_cp.10_0>)
10063f66:	8002      	strh	r2, [r0, #0]
10063f68:	220c      	movs	r2, #12
10063f6a:	7142      	strb	r2, [r0, #5]
10063f6c:	310c      	adds	r1, #12
10063f6e:	b289      	uxth	r1, r1
10063f70:	f7eb fbae 	bl	1004f6d0 <BLE_STACK_Event>
10063f74:	b07f      	add	sp, #508	@ 0x1fc
10063f76:	b003      	add	sp, #12
10063f78:	bdb0      	pop	{r4, r5, r7, pc}
10063f7a:	46c0      	nop			@ (mov r8, r8)

10063f7c <__arm_cp.10_0>:
10063f7c:	0000ff82 	.word	0x0000ff82

10063f80 <aci_att_clt_read_by_group_type_resp_event_cb>:
10063f80:	b5b0      	push	{r4, r5, r7, lr}
10063f82:	b0ff      	sub	sp, #508	@ 0x1fc
10063f84:	b083      	sub	sp, #12
10063f86:	460c      	mov	r4, r1
10063f88:	4605      	mov	r5, r0
10063f8a:	688b      	ldr	r3, [r1, #8]
10063f8c:	88ca      	ldrh	r2, [r1, #6]
10063f8e:	8889      	ldrh	r1, [r1, #4]
10063f90:	4668      	mov	r0, sp
10063f92:	1d80      	adds	r0, r0, #6
10063f94:	f7f2 fb61 	bl	1005665a <aci_att_clt_read_by_group_type_resp_event_copy>
10063f98:	0728      	lsls	r0, r5, #28
10063f9a:	d502      	bpl.n	10063fa2 <aci_att_clt_read_by_group_type_resp_event_cb+0x22>
10063f9c:	68a0      	ldr	r0, [r4, #8]
10063f9e:	f7f1 fd61 	bl	10055a64 <ACL_pkt_release>
10063fa2:	4668      	mov	r0, sp
10063fa4:	7ac1      	ldrb	r1, [r0, #11]
10063fa6:	9a03      	ldr	r2, [sp, #12]
10063fa8:	0212      	lsls	r2, r2, #8
10063faa:	1851      	adds	r1, r2, r1
10063fac:	460a      	mov	r2, r1
10063fae:	3209      	adds	r2, #9
10063fb0:	7082      	strb	r2, [r0, #2]
10063fb2:	0a12      	lsrs	r2, r2, #8
10063fb4:	70c2      	strb	r2, [r0, #3]
10063fb6:	220a      	movs	r2, #10
10063fb8:	7102      	strb	r2, [r0, #4]
10063fba:	4a05      	ldr	r2, [pc, #20]	@ (10063fd0 <__arm_cp.11_0>)
10063fbc:	8002      	strh	r2, [r0, #0]
10063fbe:	220c      	movs	r2, #12
10063fc0:	7142      	strb	r2, [r0, #5]
10063fc2:	310d      	adds	r1, #13
10063fc4:	b289      	uxth	r1, r1
10063fc6:	f7eb fb83 	bl	1004f6d0 <BLE_STACK_Event>
10063fca:	b07f      	add	sp, #508	@ 0x1fc
10063fcc:	b003      	add	sp, #12
10063fce:	bdb0      	pop	{r4, r5, r7, pc}

10063fd0 <__arm_cp.11_0>:
10063fd0:	0000ff82 	.word	0x0000ff82

10063fd4 <aci_att_clt_prepare_write_resp_event_cb>:
10063fd4:	b5b0      	push	{r4, r5, r7, lr}
10063fd6:	b0ff      	sub	sp, #508	@ 0x1fc
10063fd8:	b083      	sub	sp, #12
10063fda:	460c      	mov	r4, r1
10063fdc:	4605      	mov	r5, r0
10063fde:	688b      	ldr	r3, [r1, #8]
10063fe0:	88ca      	ldrh	r2, [r1, #6]
10063fe2:	8889      	ldrh	r1, [r1, #4]
10063fe4:	4668      	mov	r0, sp
10063fe6:	1d80      	adds	r0, r0, #6
10063fe8:	f7f2 fb55 	bl	10056696 <aci_att_clt_prepare_write_resp_event_copy>
10063fec:	0728      	lsls	r0, r5, #28
10063fee:	d502      	bpl.n	10063ff6 <aci_att_clt_prepare_write_resp_event_cb+0x22>
10063ff0:	68a0      	ldr	r0, [r4, #8]
10063ff2:	f7f1 fd37 	bl	10055a64 <ACL_pkt_release>
10063ff6:	4668      	mov	r0, sp
10063ff8:	89c1      	ldrh	r1, [r0, #14]
10063ffa:	460a      	mov	r2, r1
10063ffc:	320c      	adds	r2, #12
10063ffe:	7082      	strb	r2, [r0, #2]
10064000:	0a12      	lsrs	r2, r2, #8
10064002:	70c2      	strb	r2, [r0, #3]
10064004:	220c      	movs	r2, #12
10064006:	7102      	strb	r2, [r0, #4]
10064008:	4b04      	ldr	r3, [pc, #16]	@ (1006401c <__arm_cp.12_0>)
1006400a:	8003      	strh	r3, [r0, #0]
1006400c:	7142      	strb	r2, [r0, #5]
1006400e:	3110      	adds	r1, #16
10064010:	b289      	uxth	r1, r1
10064012:	f7eb fb5d 	bl	1004f6d0 <BLE_STACK_Event>
10064016:	b07f      	add	sp, #508	@ 0x1fc
10064018:	b003      	add	sp, #12
1006401a:	bdb0      	pop	{r4, r5, r7, pc}

1006401c <__arm_cp.12_0>:
1006401c:	0000ff82 	.word	0x0000ff82

10064020 <aci_att_srv_prepare_write_req_event_cb>:
10064020:	b5f0      	push	{r4, r5, r6, r7, lr}
10064022:	b0ff      	sub	sp, #508	@ 0x1fc
10064024:	b086      	sub	sp, #24
10064026:	460c      	mov	r4, r1
10064028:	4605      	mov	r5, r0
1006402a:	890b      	ldrh	r3, [r1, #8]
1006402c:	88ca      	ldrh	r2, [r1, #6]
1006402e:	8889      	ldrh	r1, [r1, #4]
10064030:	8960      	ldrh	r0, [r4, #10]
10064032:	89a6      	ldrh	r6, [r4, #12]
10064034:	6927      	ldr	r7, [r4, #16]
10064036:	9000      	str	r0, [sp, #0]
10064038:	9601      	str	r6, [sp, #4]
1006403a:	9702      	str	r7, [sp, #8]
1006403c:	a803      	add	r0, sp, #12
1006403e:	1d80      	adds	r0, r0, #6
10064040:	f7f2 fbe2 	bl	10056808 <aci_att_srv_prepare_write_req_event_copy>
10064044:	0728      	lsls	r0, r5, #28
10064046:	d502      	bpl.n	1006404e <aci_att_srv_prepare_write_req_event_cb+0x2e>
10064048:	6920      	ldr	r0, [r4, #16]
1006404a:	f7f1 fd0b 	bl	10055a64 <ACL_pkt_release>
1006404e:	a803      	add	r0, sp, #12
10064050:	89c1      	ldrh	r1, [r0, #14]
10064052:	460a      	mov	r2, r1
10064054:	320c      	adds	r2, #12
10064056:	7082      	strb	r2, [r0, #2]
10064058:	0a12      	lsrs	r2, r2, #8
1006405a:	70c2      	strb	r2, [r0, #3]
1006405c:	221b      	movs	r2, #27
1006405e:	7102      	strb	r2, [r0, #4]
10064060:	4a05      	ldr	r2, [pc, #20]	@ (10064078 <__arm_cp.13_0>)
10064062:	8002      	strh	r2, [r0, #0]
10064064:	220c      	movs	r2, #12
10064066:	7142      	strb	r2, [r0, #5]
10064068:	3110      	adds	r1, #16
1006406a:	b289      	uxth	r1, r1
1006406c:	f7eb fb30 	bl	1004f6d0 <BLE_STACK_Event>
10064070:	b07f      	add	sp, #508	@ 0x1fc
10064072:	b006      	add	sp, #24
10064074:	bdf0      	pop	{r4, r5, r6, r7, pc}
10064076:	46c0      	nop			@ (mov r8, r8)

10064078 <__arm_cp.13_0>:
10064078:	0000ff82 	.word	0x0000ff82

1006407c <aci_att_clt_read_multiple_var_len_resp_event_cb>:
1006407c:	b5b0      	push	{r4, r5, r7, lr}
1006407e:	b0ff      	sub	sp, #508	@ 0x1fc
10064080:	b083      	sub	sp, #12
10064082:	460c      	mov	r4, r1
10064084:	4605      	mov	r5, r0
10064086:	688b      	ldr	r3, [r1, #8]
10064088:	88ca      	ldrh	r2, [r1, #6]
1006408a:	8889      	ldrh	r1, [r1, #4]
1006408c:	4668      	mov	r0, sp
1006408e:	1d80      	adds	r0, r0, #6
10064090:	f7f2 fbed 	bl	1005686e <aci_att_clt_read_multiple_var_len_resp_event_copy>
10064094:	0728      	lsls	r0, r5, #28
10064096:	d502      	bpl.n	1006409e <aci_att_clt_read_multiple_var_len_resp_event_cb+0x22>
10064098:	68a0      	ldr	r0, [r4, #8]
1006409a:	f7f1 fce3 	bl	10055a64 <ACL_pkt_release>
1006409e:	4668      	mov	r0, sp
100640a0:	8941      	ldrh	r1, [r0, #10]
100640a2:	460a      	mov	r2, r1
100640a4:	3208      	adds	r2, #8
100640a6:	7082      	strb	r2, [r0, #2]
100640a8:	0a12      	lsrs	r2, r2, #8
100640aa:	70c2      	strb	r2, [r0, #3]
100640ac:	221e      	movs	r2, #30
100640ae:	7102      	strb	r2, [r0, #4]
100640b0:	4a05      	ldr	r2, [pc, #20]	@ (100640c8 <__arm_cp.14_0>)
100640b2:	8002      	strh	r2, [r0, #0]
100640b4:	220c      	movs	r2, #12
100640b6:	7142      	strb	r2, [r0, #5]
100640b8:	310c      	adds	r1, #12
100640ba:	b289      	uxth	r1, r1
100640bc:	f7eb fb08 	bl	1004f6d0 <BLE_STACK_Event>
100640c0:	b07f      	add	sp, #508	@ 0x1fc
100640c2:	b003      	add	sp, #12
100640c4:	bdb0      	pop	{r4, r5, r7, pc}
100640c6:	46c0      	nop			@ (mov r8, r8)

100640c8 <__arm_cp.14_0>:
100640c8:	0000ff82 	.word	0x0000ff82

100640cc <aci_gatt_srv_attribute_modified_event_push_noinline>:
100640cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100640ce:	b085      	sub	sp, #20
100640d0:	4605      	mov	r5, r0
100640d2:	06c0      	lsls	r0, r0, #27
100640d4:	d445      	bmi.n	10064162 <aci_gatt_srv_attribute_modified_event_push_noinline+0x96>
100640d6:	4826      	ldr	r0, [pc, #152]	@ (10064170 <__arm_cp.15_0>)
100640d8:	6800      	ldr	r0, [r0, #0]
100640da:	2450      	movs	r4, #80	@ 0x50
100640dc:	5d00      	ldrb	r0, [r0, r4]
100640de:	2400      	movs	r4, #0
100640e0:	07c0      	lsls	r0, r0, #31
100640e2:	d03f      	beq.n	10064164 <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
100640e4:	9302      	str	r3, [sp, #8]
100640e6:	9203      	str	r2, [sp, #12]
100640e8:	9104      	str	r1, [sp, #16]
100640ea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
100640ec:	4821      	ldr	r0, [pc, #132]	@ (10064174 <__arm_cp.15_1>)
100640ee:	6800      	ldr	r0, [r0, #0]
100640f0:	0769      	lsls	r1, r5, #29
100640f2:	0ec9      	lsrs	r1, r1, #27
100640f4:	1840      	adds	r0, r0, r1
100640f6:	6900      	ldr	r0, [r0, #16]
100640f8:	1e71      	subs	r1, r6, #1
100640fa:	2203      	movs	r2, #3
100640fc:	430a      	orrs	r2, r1
100640fe:	3211      	adds	r2, #17
10064100:	0891      	lsrs	r1, r2, #2
10064102:	b28b      	uxth	r3, r1
10064104:	2256      	movs	r2, #86	@ 0x56
10064106:	4629      	mov	r1, r5
10064108:	f7f1 fe60 	bl	10055dcc <aci_event_fifo_push_header>
1006410c:	2800      	cmp	r0, #0
1006410e:	d02c      	beq.n	1006416a <aci_gatt_srv_attribute_modified_event_push_noinline+0x9e>
10064110:	4607      	mov	r7, r0
10064112:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10064114:	9001      	str	r0, [sp, #4]
10064116:	743e      	strb	r6, [r7, #16]
10064118:	9902      	ldr	r1, [sp, #8]
1006411a:	73b9      	strb	r1, [r7, #14]
1006411c:	9b03      	ldr	r3, [sp, #12]
1006411e:	733b      	strb	r3, [r7, #12]
10064120:	9a04      	ldr	r2, [sp, #16]
10064122:	72ba      	strb	r2, [r7, #10]
10064124:	0a30      	lsrs	r0, r6, #8
10064126:	7478      	strb	r0, [r7, #17]
10064128:	0a08      	lsrs	r0, r1, #8
1006412a:	73f8      	strb	r0, [r7, #15]
1006412c:	0a18      	lsrs	r0, r3, #8
1006412e:	7378      	strb	r0, [r7, #13]
10064130:	0a10      	lsrs	r0, r2, #8
10064132:	72f8      	strb	r0, [r7, #11]
10064134:	4638      	mov	r0, r7
10064136:	3012      	adds	r0, #18
10064138:	9901      	ldr	r1, [sp, #4]
1006413a:	4632      	mov	r2, r6
1006413c:	f7ef f8fa 	bl	10053334 <BLEPLAT_MemCpy>
10064140:	200c      	movs	r0, #12
10064142:	7278      	strb	r0, [r7, #9]
10064144:	2001      	movs	r0, #1
10064146:	7238      	strb	r0, [r7, #8]
10064148:	360a      	adds	r6, #10
1006414a:	0a30      	lsrs	r0, r6, #8
1006414c:	71f8      	strb	r0, [r7, #7]
1006414e:	71be      	strb	r6, [r7, #6]
10064150:	20ff      	movs	r0, #255	@ 0xff
10064152:	7178      	strb	r0, [r7, #5]
10064154:	2082      	movs	r0, #130	@ 0x82
10064156:	7138      	strb	r0, [r7, #4]
10064158:	4628      	mov	r0, r5
1006415a:	4639      	mov	r1, r7
1006415c:	f7f1 fed3 	bl	10055f06 <aci_event_fifo_push>
10064160:	e000      	b.n	10064164 <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
10064162:	2486      	movs	r4, #134	@ 0x86
10064164:	4620      	mov	r0, r4
10064166:	b005      	add	sp, #20
10064168:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006416a:	2407      	movs	r4, #7
1006416c:	e7fa      	b.n	10064164 <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
1006416e:	46c0      	nop			@ (mov r8, r8)

10064170 <__arm_cp.15_0>:
10064170:	20002958 	.word	0x20002958

10064174 <__arm_cp.15_1>:
10064174:	20002908 	.word	0x20002908

10064178 <aci_gatt_proc_timeout_event_push_noinline>:
10064178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006417a:	4604      	mov	r4, r0
1006417c:	06c0      	lsls	r0, r0, #27
1006417e:	d408      	bmi.n	10064192 <aci_gatt_proc_timeout_event_push_noinline+0x1a>
10064180:	460d      	mov	r5, r1
10064182:	4819      	ldr	r0, [pc, #100]	@ (100641e8 <__arm_cp.16_0>)
10064184:	6800      	ldr	r0, [r0, #0]
10064186:	2150      	movs	r1, #80	@ 0x50
10064188:	5c40      	ldrb	r0, [r0, r1]
1006418a:	0780      	lsls	r0, r0, #30
1006418c:	d403      	bmi.n	10064196 <aci_gatt_proc_timeout_event_push_noinline+0x1e>
1006418e:	2700      	movs	r7, #0
10064190:	e027      	b.n	100641e2 <aci_gatt_proc_timeout_event_push_noinline+0x6a>
10064192:	2786      	movs	r7, #134	@ 0x86
10064194:	e025      	b.n	100641e2 <aci_gatt_proc_timeout_event_push_noinline+0x6a>
10064196:	4616      	mov	r6, r2
10064198:	4814      	ldr	r0, [pc, #80]	@ (100641ec <__arm_cp.16_1>)
1006419a:	6800      	ldr	r0, [r0, #0]
1006419c:	0761      	lsls	r1, r4, #29
1006419e:	0ec9      	lsrs	r1, r1, #27
100641a0:	1840      	adds	r0, r0, r1
100641a2:	6900      	ldr	r0, [r0, #16]
100641a4:	2257      	movs	r2, #87	@ 0x57
100641a6:	2303      	movs	r3, #3
100641a8:	4621      	mov	r1, r4
100641aa:	f7f1 fe0f 	bl	10055dcc <aci_event_fifo_push_header>
100641ae:	2800      	cmp	r0, #0
100641b0:	d016      	beq.n	100641e0 <aci_gatt_proc_timeout_event_push_noinline+0x68>
100641b2:	4601      	mov	r1, r0
100641b4:	7306      	strb	r6, [r0, #12]
100641b6:	7285      	strb	r5, [r0, #10]
100641b8:	200c      	movs	r0, #12
100641ba:	7248      	strb	r0, [r1, #9]
100641bc:	2002      	movs	r0, #2
100641be:	7208      	strb	r0, [r1, #8]
100641c0:	2700      	movs	r7, #0
100641c2:	71cf      	strb	r7, [r1, #7]
100641c4:	2006      	movs	r0, #6
100641c6:	7188      	strb	r0, [r1, #6]
100641c8:	20ff      	movs	r0, #255	@ 0xff
100641ca:	7148      	strb	r0, [r1, #5]
100641cc:	2082      	movs	r0, #130	@ 0x82
100641ce:	7108      	strb	r0, [r1, #4]
100641d0:	0a30      	lsrs	r0, r6, #8
100641d2:	7348      	strb	r0, [r1, #13]
100641d4:	0a28      	lsrs	r0, r5, #8
100641d6:	72c8      	strb	r0, [r1, #11]
100641d8:	4620      	mov	r0, r4
100641da:	f7f1 fe94 	bl	10055f06 <aci_event_fifo_push>
100641de:	e000      	b.n	100641e2 <aci_gatt_proc_timeout_event_push_noinline+0x6a>
100641e0:	2707      	movs	r7, #7
100641e2:	4638      	mov	r0, r7
100641e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100641e6:	46c0      	nop			@ (mov r8, r8)

100641e8 <__arm_cp.16_0>:
100641e8:	20002958 	.word	0x20002958

100641ec <__arm_cp.16_1>:
100641ec:	20002908 	.word	0x20002908

100641f0 <aci_gatt_clt_indication_event_push_noinline>:
100641f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100641f2:	4605      	mov	r5, r0
100641f4:	06c0      	lsls	r0, r0, #27
100641f6:	d421      	bmi.n	1006423c <aci_gatt_clt_indication_event_push_noinline+0x4c>
100641f8:	460e      	mov	r6, r1
100641fa:	4813      	ldr	r0, [pc, #76]	@ (10064248 <__arm_cp.17_0>)
100641fc:	6800      	ldr	r0, [r0, #0]
100641fe:	2151      	movs	r1, #81	@ 0x51
10064200:	5c40      	ldrb	r0, [r0, r1]
10064202:	2400      	movs	r4, #0
10064204:	0680      	lsls	r0, r0, #26
10064206:	d51a      	bpl.n	1006423e <aci_gatt_clt_indication_event_push_noinline+0x4e>
10064208:	4617      	mov	r7, r2
1006420a:	9300      	str	r3, [sp, #0]
1006420c:	480f      	ldr	r0, [pc, #60]	@ (1006424c <__arm_cp.17_1>)
1006420e:	6800      	ldr	r0, [r0, #0]
10064210:	0769      	lsls	r1, r5, #29
10064212:	0ec9      	lsrs	r1, r1, #27
10064214:	1840      	adds	r0, r0, r1
10064216:	6900      	ldr	r0, [r0, #16]
10064218:	220f      	movs	r2, #15
1006421a:	2303      	movs	r3, #3
1006421c:	4629      	mov	r1, r5
1006421e:	f7f1 fdd5 	bl	10055dcc <aci_event_fifo_push_header>
10064222:	2800      	cmp	r0, #0
10064224:	d00d      	beq.n	10064242 <aci_gatt_clt_indication_event_push_noinline+0x52>
10064226:	4601      	mov	r1, r0
10064228:	9800      	ldr	r0, [sp, #0]
1006422a:	60c8      	str	r0, [r1, #12]
1006422c:	814f      	strh	r7, [r1, #10]
1006422e:	810e      	strh	r6, [r1, #8]
10064230:	4807      	ldr	r0, [pc, #28]	@ (10064250 <__arm_cp.17_2>)
10064232:	6048      	str	r0, [r1, #4]
10064234:	4628      	mov	r0, r5
10064236:	f7f1 fe66 	bl	10055f06 <aci_event_fifo_push>
1006423a:	e000      	b.n	1006423e <aci_gatt_clt_indication_event_push_noinline+0x4e>
1006423c:	2486      	movs	r4, #134	@ 0x86
1006423e:	4620      	mov	r0, r4
10064240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064242:	2407      	movs	r4, #7
10064244:	e7fb      	b.n	1006423e <aci_gatt_clt_indication_event_push_noinline+0x4e>
10064246:	46c0      	nop			@ (mov r8, r8)

10064248 <__arm_cp.17_0>:
10064248:	20002958 	.word	0x20002958

1006424c <__arm_cp.17_1>:
1006424c:	20002908 	.word	0x20002908

10064250 <__arm_cp.17_2>:
10064250:	10063c31 	.word	0x10063c31

10064254 <aci_gatt_clt_notification_event_push_noinline>:
10064254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064256:	4605      	mov	r5, r0
10064258:	06c0      	lsls	r0, r0, #27
1006425a:	d421      	bmi.n	100642a0 <aci_gatt_clt_notification_event_push_noinline+0x4c>
1006425c:	460e      	mov	r6, r1
1006425e:	4813      	ldr	r0, [pc, #76]	@ (100642ac <__arm_cp.18_0>)
10064260:	6800      	ldr	r0, [r0, #0]
10064262:	2151      	movs	r1, #81	@ 0x51
10064264:	5c40      	ldrb	r0, [r0, r1]
10064266:	2400      	movs	r4, #0
10064268:	0640      	lsls	r0, r0, #25
1006426a:	d51a      	bpl.n	100642a2 <aci_gatt_clt_notification_event_push_noinline+0x4e>
1006426c:	4617      	mov	r7, r2
1006426e:	9300      	str	r3, [sp, #0]
10064270:	480f      	ldr	r0, [pc, #60]	@ (100642b0 <__arm_cp.18_1>)
10064272:	6800      	ldr	r0, [r0, #0]
10064274:	0769      	lsls	r1, r5, #29
10064276:	0ec9      	lsrs	r1, r1, #27
10064278:	1840      	adds	r0, r0, r1
1006427a:	6900      	ldr	r0, [r0, #16]
1006427c:	2210      	movs	r2, #16
1006427e:	2303      	movs	r3, #3
10064280:	4629      	mov	r1, r5
10064282:	f7f1 fda3 	bl	10055dcc <aci_event_fifo_push_header>
10064286:	2800      	cmp	r0, #0
10064288:	d00d      	beq.n	100642a6 <aci_gatt_clt_notification_event_push_noinline+0x52>
1006428a:	4601      	mov	r1, r0
1006428c:	9800      	ldr	r0, [sp, #0]
1006428e:	60c8      	str	r0, [r1, #12]
10064290:	814f      	strh	r7, [r1, #10]
10064292:	810e      	strh	r6, [r1, #8]
10064294:	4807      	ldr	r0, [pc, #28]	@ (100642b4 <__arm_cp.18_2>)
10064296:	6048      	str	r0, [r1, #4]
10064298:	4628      	mov	r0, r5
1006429a:	f7f1 fe34 	bl	10055f06 <aci_event_fifo_push>
1006429e:	e000      	b.n	100642a2 <aci_gatt_clt_notification_event_push_noinline+0x4e>
100642a0:	2486      	movs	r4, #134	@ 0x86
100642a2:	4620      	mov	r0, r4
100642a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100642a6:	2407      	movs	r4, #7
100642a8:	e7fb      	b.n	100642a2 <aci_gatt_clt_notification_event_push_noinline+0x4e>
100642aa:	46c0      	nop			@ (mov r8, r8)

100642ac <__arm_cp.18_0>:
100642ac:	20002958 	.word	0x20002958

100642b0 <__arm_cp.18_1>:
100642b0:	20002908 	.word	0x20002908

100642b4 <__arm_cp.18_2>:
100642b4:	10063c81 	.word	0x10063c81

100642b8 <aci_gatt_clt_error_resp_event_push_noinline>:
100642b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100642ba:	4604      	mov	r4, r0
100642bc:	06c0      	lsls	r0, r0, #27
100642be:	d408      	bmi.n	100642d2 <aci_gatt_clt_error_resp_event_push_noinline+0x1a>
100642c0:	460d      	mov	r5, r1
100642c2:	481e      	ldr	r0, [pc, #120]	@ (1006433c <__arm_cp.20_0>)
100642c4:	6800      	ldr	r0, [r0, #0]
100642c6:	2151      	movs	r1, #81	@ 0x51
100642c8:	5640      	ldrsb	r0, [r0, r1]
100642ca:	2800      	cmp	r0, #0
100642cc:	d404      	bmi.n	100642d8 <aci_gatt_clt_error_resp_event_push_noinline+0x20>
100642ce:	2700      	movs	r7, #0
100642d0:	e000      	b.n	100642d4 <aci_gatt_clt_error_resp_event_push_noinline+0x1c>
100642d2:	2786      	movs	r7, #134	@ 0x86
100642d4:	4638      	mov	r0, r7
100642d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100642d8:	461f      	mov	r7, r3
100642da:	4616      	mov	r6, r2
100642dc:	4818      	ldr	r0, [pc, #96]	@ (10064340 <__arm_cp.20_1>)
100642de:	6800      	ldr	r0, [r0, #0]
100642e0:	0761      	lsls	r1, r4, #29
100642e2:	0ec9      	lsrs	r1, r1, #27
100642e4:	1840      	adds	r0, r0, r1
100642e6:	6900      	ldr	r0, [r0, #16]
100642e8:	225b      	movs	r2, #91	@ 0x5b
100642ea:	2304      	movs	r3, #4
100642ec:	4621      	mov	r1, r4
100642ee:	f7f1 fd6d 	bl	10055dcc <aci_event_fifo_push_header>
100642f2:	2800      	cmp	r0, #0
100642f4:	d020      	beq.n	10064338 <aci_gatt_clt_error_resp_event_push_noinline+0x80>
100642f6:	4601      	mov	r1, r0
100642f8:	9a07      	ldr	r2, [sp, #28]
100642fa:	9806      	ldr	r0, [sp, #24]
100642fc:	9000      	str	r0, [sp, #0]
100642fe:	73c8      	strb	r0, [r1, #15]
10064300:	730e      	strb	r6, [r1, #12]
10064302:	728d      	strb	r5, [r1, #10]
10064304:	230c      	movs	r3, #12
10064306:	724b      	strb	r3, [r1, #9]
10064308:	2311      	movs	r3, #17
1006430a:	720b      	strb	r3, [r1, #8]
1006430c:	4638      	mov	r0, r7
1006430e:	2700      	movs	r7, #0
10064310:	71cf      	strb	r7, [r1, #7]
10064312:	230a      	movs	r3, #10
10064314:	718b      	strb	r3, [r1, #6]
10064316:	744a      	strb	r2, [r1, #17]
10064318:	7388      	strb	r0, [r1, #14]
1006431a:	22ff      	movs	r2, #255	@ 0xff
1006431c:	714a      	strb	r2, [r1, #5]
1006431e:	2282      	movs	r2, #130	@ 0x82
10064320:	710a      	strb	r2, [r1, #4]
10064322:	9800      	ldr	r0, [sp, #0]
10064324:	0a00      	lsrs	r0, r0, #8
10064326:	7408      	strb	r0, [r1, #16]
10064328:	0a30      	lsrs	r0, r6, #8
1006432a:	7348      	strb	r0, [r1, #13]
1006432c:	0a28      	lsrs	r0, r5, #8
1006432e:	72c8      	strb	r0, [r1, #11]
10064330:	4620      	mov	r0, r4
10064332:	f7f1 fde8 	bl	10055f06 <aci_event_fifo_push>
10064336:	e7cd      	b.n	100642d4 <aci_gatt_clt_error_resp_event_push_noinline+0x1c>
10064338:	2707      	movs	r7, #7
1006433a:	e7cb      	b.n	100642d4 <aci_gatt_clt_error_resp_event_push_noinline+0x1c>

1006433c <__arm_cp.20_0>:
1006433c:	20002958 	.word	0x20002958

10064340 <__arm_cp.20_1>:
10064340:	20002908 	.word	0x20002908

10064344 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>:
10064344:	b5f0      	push	{r4, r5, r6, r7, lr}
10064346:	b087      	sub	sp, #28
10064348:	4605      	mov	r5, r0
1006434a:	06c0      	lsls	r0, r0, #27
1006434c:	d443      	bmi.n	100643d6 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x92>
1006434e:	460e      	mov	r6, r1
10064350:	4824      	ldr	r0, [pc, #144]	@ (100643e4 <__arm_cp.21_0>)
10064352:	6800      	ldr	r0, [r0, #0]
10064354:	2152      	movs	r1, #82	@ 0x52
10064356:	5c40      	ldrb	r0, [r0, r1]
10064358:	2400      	movs	r4, #0
1006435a:	0780      	lsls	r0, r0, #30
1006435c:	d53c      	bpl.n	100643d8 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
1006435e:	9204      	str	r2, [sp, #16]
10064360:	9305      	str	r3, [sp, #20]
10064362:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10064364:	4820      	ldr	r0, [pc, #128]	@ (100643e8 <__arm_cp.21_1>)
10064366:	6800      	ldr	r0, [r0, #0]
10064368:	0769      	lsls	r1, r5, #29
1006436a:	0ec9      	lsrs	r1, r1, #27
1006436c:	1840      	adds	r0, r0, r1
1006436e:	6900      	ldr	r0, [r0, #16]
10064370:	491e      	ldr	r1, [pc, #120]	@ (100643ec <__arm_cp.21_2>)
10064372:	9206      	str	r2, [sp, #24]
10064374:	1851      	adds	r1, r2, r1
10064376:	2203      	movs	r2, #3
10064378:	430a      	orrs	r2, r1
1006437a:	3211      	adds	r2, #17
1006437c:	0891      	lsrs	r1, r2, #2
1006437e:	b28b      	uxth	r3, r1
10064380:	225c      	movs	r2, #92	@ 0x5c
10064382:	4629      	mov	r1, r5
10064384:	f7f1 fd22 	bl	10055dcc <aci_event_fifo_push_header>
10064388:	2800      	cmp	r0, #0
1006438a:	d028      	beq.n	100643de <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x9a>
1006438c:	4607      	mov	r7, r0
1006438e:	990d      	ldr	r1, [sp, #52]	@ 0x34
10064390:	9806      	ldr	r0, [sp, #24]
10064392:	9000      	str	r0, [sp, #0]
10064394:	9103      	str	r1, [sp, #12]
10064396:	9101      	str	r1, [sp, #4]
10064398:	1d38      	adds	r0, r7, #4
1006439a:	4631      	mov	r1, r6
1006439c:	9a04      	ldr	r2, [sp, #16]
1006439e:	9b05      	ldr	r3, [sp, #20]
100643a0:	f7f2 f9f3 	bl	1005678a <aci_gatt_clt_disc_read_char_by_uuid_resp_event_copy>
100643a4:	0728      	lsls	r0, r5, #28
100643a6:	d504      	bpl.n	100643b2 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x6e>
100643a8:	9803      	ldr	r0, [sp, #12]
100643aa:	f7f1 fb5b 	bl	10055a64 <ACL_pkt_release>
100643ae:	20f7      	movs	r0, #247	@ 0xf7
100643b0:	4005      	ands	r5, r0
100643b2:	200c      	movs	r0, #12
100643b4:	7278      	strb	r0, [r7, #9]
100643b6:	2012      	movs	r0, #18
100643b8:	7238      	strb	r0, [r7, #8]
100643ba:	20ff      	movs	r0, #255	@ 0xff
100643bc:	7178      	strb	r0, [r7, #5]
100643be:	2082      	movs	r0, #130	@ 0x82
100643c0:	7138      	strb	r0, [r7, #4]
100643c2:	9806      	ldr	r0, [sp, #24]
100643c4:	1dc0      	adds	r0, r0, #7
100643c6:	71b8      	strb	r0, [r7, #6]
100643c8:	0a00      	lsrs	r0, r0, #8
100643ca:	71f8      	strb	r0, [r7, #7]
100643cc:	4628      	mov	r0, r5
100643ce:	4639      	mov	r1, r7
100643d0:	f7f1 fd99 	bl	10055f06 <aci_event_fifo_push>
100643d4:	e000      	b.n	100643d8 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
100643d6:	2486      	movs	r4, #134	@ 0x86
100643d8:	4620      	mov	r0, r4
100643da:	b007      	add	sp, #28
100643dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100643de:	2407      	movs	r4, #7
100643e0:	e7fa      	b.n	100643d8 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
100643e2:	46c0      	nop			@ (mov r8, r8)

100643e4 <__arm_cp.21_0>:
100643e4:	20002958 	.word	0x20002958

100643e8 <__arm_cp.21_1>:
100643e8:	20002908 	.word	0x20002908

100643ec <__arm_cp.21_2>:
100643ec:	0003fffd 	.word	0x0003fffd

100643f0 <aci_gatt_tx_pool_available_event_push_noinline>:
100643f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100643f2:	4604      	mov	r4, r0
100643f4:	06c0      	lsls	r0, r0, #27
100643f6:	d425      	bmi.n	10064444 <aci_gatt_tx_pool_available_event_push_noinline+0x54>
100643f8:	4616      	mov	r6, r2
100643fa:	460d      	mov	r5, r1
100643fc:	4814      	ldr	r0, [pc, #80]	@ (10064450 <__arm_cp.22_0>)
100643fe:	6800      	ldr	r0, [r0, #0]
10064400:	0761      	lsls	r1, r4, #29
10064402:	0ec9      	lsrs	r1, r1, #27
10064404:	1840      	adds	r0, r0, r1
10064406:	6900      	ldr	r0, [r0, #16]
10064408:	225d      	movs	r2, #93	@ 0x5d
1006440a:	2303      	movs	r3, #3
1006440c:	4621      	mov	r1, r4
1006440e:	f7f1 fcdd 	bl	10055dcc <aci_event_fifo_push_header>
10064412:	2800      	cmp	r0, #0
10064414:	d018      	beq.n	10064448 <aci_gatt_tx_pool_available_event_push_noinline+0x58>
10064416:	4601      	mov	r1, r0
10064418:	7306      	strb	r6, [r0, #12]
1006441a:	7285      	strb	r5, [r0, #10]
1006441c:	200c      	movs	r0, #12
1006441e:	7248      	strb	r0, [r1, #9]
10064420:	2016      	movs	r0, #22
10064422:	7208      	strb	r0, [r1, #8]
10064424:	2700      	movs	r7, #0
10064426:	71cf      	strb	r7, [r1, #7]
10064428:	2006      	movs	r0, #6
1006442a:	7188      	strb	r0, [r1, #6]
1006442c:	20ff      	movs	r0, #255	@ 0xff
1006442e:	7148      	strb	r0, [r1, #5]
10064430:	2082      	movs	r0, #130	@ 0x82
10064432:	7108      	strb	r0, [r1, #4]
10064434:	0a30      	lsrs	r0, r6, #8
10064436:	7348      	strb	r0, [r1, #13]
10064438:	0a28      	lsrs	r0, r5, #8
1006443a:	72c8      	strb	r0, [r1, #11]
1006443c:	4620      	mov	r0, r4
1006443e:	f7f1 fd62 	bl	10055f06 <aci_event_fifo_push>
10064442:	e002      	b.n	1006444a <aci_gatt_tx_pool_available_event_push_noinline+0x5a>
10064444:	2786      	movs	r7, #134	@ 0x86
10064446:	e000      	b.n	1006444a <aci_gatt_tx_pool_available_event_push_noinline+0x5a>
10064448:	2707      	movs	r7, #7
1006444a:	4638      	mov	r0, r7
1006444c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006444e:	46c0      	nop			@ (mov r8, r8)

10064450 <__arm_cp.22_0>:
10064450:	20002908 	.word	0x20002908

10064454 <aci_gatt_srv_confirmation_event_push_noinline>:
10064454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064456:	4604      	mov	r4, r0
10064458:	06c0      	lsls	r0, r0, #27
1006445a:	d425      	bmi.n	100644a8 <aci_gatt_srv_confirmation_event_push_noinline+0x54>
1006445c:	4616      	mov	r6, r2
1006445e:	460d      	mov	r5, r1
10064460:	4814      	ldr	r0, [pc, #80]	@ (100644b4 <__arm_cp.23_0>)
10064462:	6800      	ldr	r0, [r0, #0]
10064464:	0761      	lsls	r1, r4, #29
10064466:	0ec9      	lsrs	r1, r1, #27
10064468:	1840      	adds	r0, r0, r1
1006446a:	6900      	ldr	r0, [r0, #16]
1006446c:	225e      	movs	r2, #94	@ 0x5e
1006446e:	2303      	movs	r3, #3
10064470:	4621      	mov	r1, r4
10064472:	f7f1 fcab 	bl	10055dcc <aci_event_fifo_push_header>
10064476:	2800      	cmp	r0, #0
10064478:	d018      	beq.n	100644ac <aci_gatt_srv_confirmation_event_push_noinline+0x58>
1006447a:	4601      	mov	r1, r0
1006447c:	7306      	strb	r6, [r0, #12]
1006447e:	7285      	strb	r5, [r0, #10]
10064480:	200c      	movs	r0, #12
10064482:	7248      	strb	r0, [r1, #9]
10064484:	2017      	movs	r0, #23
10064486:	7208      	strb	r0, [r1, #8]
10064488:	2700      	movs	r7, #0
1006448a:	71cf      	strb	r7, [r1, #7]
1006448c:	2006      	movs	r0, #6
1006448e:	7188      	strb	r0, [r1, #6]
10064490:	20ff      	movs	r0, #255	@ 0xff
10064492:	7148      	strb	r0, [r1, #5]
10064494:	2082      	movs	r0, #130	@ 0x82
10064496:	7108      	strb	r0, [r1, #4]
10064498:	0a30      	lsrs	r0, r6, #8
1006449a:	7348      	strb	r0, [r1, #13]
1006449c:	0a28      	lsrs	r0, r5, #8
1006449e:	72c8      	strb	r0, [r1, #11]
100644a0:	4620      	mov	r0, r4
100644a2:	f7f1 fd30 	bl	10055f06 <aci_event_fifo_push>
100644a6:	e002      	b.n	100644ae <aci_gatt_srv_confirmation_event_push_noinline+0x5a>
100644a8:	2786      	movs	r7, #134	@ 0x86
100644aa:	e000      	b.n	100644ae <aci_gatt_srv_confirmation_event_push_noinline+0x5a>
100644ac:	2707      	movs	r7, #7
100644ae:	4638      	mov	r0, r7
100644b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100644b2:	46c0      	nop			@ (mov r8, r8)

100644b4 <__arm_cp.23_0>:
100644b4:	20002908 	.word	0x20002908

100644b8 <aci_gatt_srv_read_event_push_noinline>:
100644b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100644ba:	4604      	mov	r4, r0
100644bc:	06c0      	lsls	r0, r0, #27
100644be:	d42e      	bmi.n	1006451e <aci_gatt_srv_read_event_push_noinline+0x66>
100644c0:	461f      	mov	r7, r3
100644c2:	4616      	mov	r6, r2
100644c4:	460d      	mov	r5, r1
100644c6:	4818      	ldr	r0, [pc, #96]	@ (10064528 <__arm_cp.24_0>)
100644c8:	6800      	ldr	r0, [r0, #0]
100644ca:	0761      	lsls	r1, r4, #29
100644cc:	0ec9      	lsrs	r1, r1, #27
100644ce:	1840      	adds	r0, r0, r1
100644d0:	6900      	ldr	r0, [r0, #16]
100644d2:	225f      	movs	r2, #95	@ 0x5f
100644d4:	2304      	movs	r3, #4
100644d6:	4621      	mov	r1, r4
100644d8:	f7f1 fc78 	bl	10055dcc <aci_event_fifo_push_header>
100644dc:	2800      	cmp	r0, #0
100644de:	d020      	beq.n	10064522 <aci_gatt_srv_read_event_push_noinline+0x6a>
100644e0:	4601      	mov	r1, r0
100644e2:	9806      	ldr	r0, [sp, #24]
100644e4:	7408      	strb	r0, [r1, #16]
100644e6:	738f      	strb	r7, [r1, #14]
100644e8:	730e      	strb	r6, [r1, #12]
100644ea:	728d      	strb	r5, [r1, #10]
100644ec:	220c      	movs	r2, #12
100644ee:	724a      	strb	r2, [r1, #9]
100644f0:	2219      	movs	r2, #25
100644f2:	720a      	strb	r2, [r1, #8]
100644f4:	462b      	mov	r3, r5
100644f6:	2500      	movs	r5, #0
100644f8:	71cd      	strb	r5, [r1, #7]
100644fa:	220a      	movs	r2, #10
100644fc:	718a      	strb	r2, [r1, #6]
100644fe:	22ff      	movs	r2, #255	@ 0xff
10064500:	714a      	strb	r2, [r1, #5]
10064502:	2282      	movs	r2, #130	@ 0x82
10064504:	710a      	strb	r2, [r1, #4]
10064506:	0a00      	lsrs	r0, r0, #8
10064508:	7448      	strb	r0, [r1, #17]
1006450a:	0a38      	lsrs	r0, r7, #8
1006450c:	73c8      	strb	r0, [r1, #15]
1006450e:	0a30      	lsrs	r0, r6, #8
10064510:	7348      	strb	r0, [r1, #13]
10064512:	0a18      	lsrs	r0, r3, #8
10064514:	72c8      	strb	r0, [r1, #11]
10064516:	4620      	mov	r0, r4
10064518:	f7f1 fcf5 	bl	10055f06 <aci_event_fifo_push>
1006451c:	e002      	b.n	10064524 <aci_gatt_srv_read_event_push_noinline+0x6c>
1006451e:	2586      	movs	r5, #134	@ 0x86
10064520:	e000      	b.n	10064524 <aci_gatt_srv_read_event_push_noinline+0x6c>
10064522:	2507      	movs	r5, #7
10064524:	4628      	mov	r0, r5
10064526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10064528 <__arm_cp.24_0>:
10064528:	20002908 	.word	0x20002908

1006452c <aci_gatt_srv_write_event_push_noinline>:
1006452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006452e:	4604      	mov	r4, r0
10064530:	06c0      	lsls	r0, r0, #27
10064532:	d420      	bmi.n	10064576 <aci_gatt_srv_write_event_push_noinline+0x4a>
10064534:	461f      	mov	r7, r3
10064536:	4616      	mov	r6, r2
10064538:	460d      	mov	r5, r1
1006453a:	4811      	ldr	r0, [pc, #68]	@ (10064580 <__arm_cp.25_0>)
1006453c:	6800      	ldr	r0, [r0, #0]
1006453e:	0761      	lsls	r1, r4, #29
10064540:	0ec9      	lsrs	r1, r1, #27
10064542:	1840      	adds	r0, r0, r1
10064544:	6900      	ldr	r0, [r0, #16]
10064546:	2211      	movs	r2, #17
10064548:	2305      	movs	r3, #5
1006454a:	4621      	mov	r1, r4
1006454c:	f7f1 fc3e 	bl	10055dcc <aci_event_fifo_push_header>
10064550:	2800      	cmp	r0, #0
10064552:	d012      	beq.n	1006457a <aci_gatt_srv_write_event_push_noinline+0x4e>
10064554:	4601      	mov	r1, r0
10064556:	9808      	ldr	r0, [sp, #32]
10064558:	9a07      	ldr	r2, [sp, #28]
1006455a:	9b06      	ldr	r3, [sp, #24]
1006455c:	6148      	str	r0, [r1, #20]
1006455e:	820a      	strh	r2, [r1, #16]
10064560:	81cb      	strh	r3, [r1, #14]
10064562:	730f      	strb	r7, [r1, #12]
10064564:	814e      	strh	r6, [r1, #10]
10064566:	810d      	strh	r5, [r1, #8]
10064568:	4806      	ldr	r0, [pc, #24]	@ (10064584 <__arm_cp.25_1>)
1006456a:	6048      	str	r0, [r1, #4]
1006456c:	4620      	mov	r0, r4
1006456e:	f7f1 fcca 	bl	10055f06 <aci_event_fifo_push>
10064572:	2000      	movs	r0, #0
10064574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064576:	2086      	movs	r0, #134	@ 0x86
10064578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006457a:	2007      	movs	r0, #7
1006457c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006457e:	46c0      	nop			@ (mov r8, r8)

10064580 <__arm_cp.25_0>:
10064580:	20002908 	.word	0x20002908

10064584 <__arm_cp.25_1>:
10064584:	10063cbd 	.word	0x10063cbd

10064588 <aci_gatt_clt_multi_notification_int_event_push_noinline>:
10064588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006458a:	4605      	mov	r5, r0
1006458c:	06c0      	lsls	r0, r0, #27
1006458e:	d421      	bmi.n	100645d4 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4c>
10064590:	460e      	mov	r6, r1
10064592:	4813      	ldr	r0, [pc, #76]	@ (100645e0 <__arm_cp.26_0>)
10064594:	6800      	ldr	r0, [r0, #0]
10064596:	2152      	movs	r1, #82	@ 0x52
10064598:	5c40      	ldrb	r0, [r0, r1]
1006459a:	2400      	movs	r4, #0
1006459c:	0700      	lsls	r0, r0, #28
1006459e:	d51a      	bpl.n	100645d6 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
100645a0:	4617      	mov	r7, r2
100645a2:	9300      	str	r3, [sp, #0]
100645a4:	480f      	ldr	r0, [pc, #60]	@ (100645e4 <__arm_cp.26_1>)
100645a6:	6800      	ldr	r0, [r0, #0]
100645a8:	0769      	lsls	r1, r5, #29
100645aa:	0ec9      	lsrs	r1, r1, #27
100645ac:	1840      	adds	r0, r0, r1
100645ae:	6900      	ldr	r0, [r0, #16]
100645b0:	2214      	movs	r2, #20
100645b2:	2303      	movs	r3, #3
100645b4:	4629      	mov	r1, r5
100645b6:	f7f1 fc09 	bl	10055dcc <aci_event_fifo_push_header>
100645ba:	2800      	cmp	r0, #0
100645bc:	d00d      	beq.n	100645da <aci_gatt_clt_multi_notification_int_event_push_noinline+0x52>
100645be:	4601      	mov	r1, r0
100645c0:	9800      	ldr	r0, [sp, #0]
100645c2:	60c8      	str	r0, [r1, #12]
100645c4:	814f      	strh	r7, [r1, #10]
100645c6:	810e      	strh	r6, [r1, #8]
100645c8:	4807      	ldr	r0, [pc, #28]	@ (100645e8 <__arm_cp.26_2>)
100645ca:	6048      	str	r0, [r1, #4]
100645cc:	4628      	mov	r0, r5
100645ce:	f7f1 fc9a 	bl	10055f06 <aci_event_fifo_push>
100645d2:	e000      	b.n	100645d6 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
100645d4:	2486      	movs	r4, #134	@ 0x86
100645d6:	4620      	mov	r0, r4
100645d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100645da:	2407      	movs	r4, #7
100645dc:	e7fb      	b.n	100645d6 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
100645de:	46c0      	nop			@ (mov r8, r8)

100645e0 <__arm_cp.26_0>:
100645e0:	20002958 	.word	0x20002958

100645e4 <__arm_cp.26_1>:
100645e4:	20002908 	.word	0x20002908

100645e8 <__arm_cp.26_2>:
100645e8:	10063d1d 	.word	0x10063d1d

100645ec <aci_att_exchange_mtu_resp_event_push_noinline>:
100645ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100645ee:	4604      	mov	r4, r0
100645f0:	06c0      	lsls	r0, r0, #27
100645f2:	d408      	bmi.n	10064606 <aci_att_exchange_mtu_resp_event_push_noinline+0x1a>
100645f4:	460d      	mov	r5, r1
100645f6:	4819      	ldr	r0, [pc, #100]	@ (1006465c <__arm_cp.27_0>)
100645f8:	6800      	ldr	r0, [r0, #0]
100645fa:	2150      	movs	r1, #80	@ 0x50
100645fc:	5c40      	ldrb	r0, [r0, r1]
100645fe:	0740      	lsls	r0, r0, #29
10064600:	d403      	bmi.n	1006460a <aci_att_exchange_mtu_resp_event_push_noinline+0x1e>
10064602:	2700      	movs	r7, #0
10064604:	e027      	b.n	10064656 <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
10064606:	2786      	movs	r7, #134	@ 0x86
10064608:	e025      	b.n	10064656 <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
1006460a:	4616      	mov	r6, r2
1006460c:	4814      	ldr	r0, [pc, #80]	@ (10064660 <__arm_cp.27_1>)
1006460e:	6800      	ldr	r0, [r0, #0]
10064610:	0761      	lsls	r1, r4, #29
10064612:	0ec9      	lsrs	r1, r1, #27
10064614:	1840      	adds	r0, r0, r1
10064616:	6900      	ldr	r0, [r0, #16]
10064618:	2258      	movs	r2, #88	@ 0x58
1006461a:	2703      	movs	r7, #3
1006461c:	4621      	mov	r1, r4
1006461e:	463b      	mov	r3, r7
10064620:	f7f1 fbd4 	bl	10055dcc <aci_event_fifo_push_header>
10064624:	2800      	cmp	r0, #0
10064626:	d015      	beq.n	10064654 <aci_att_exchange_mtu_resp_event_push_noinline+0x68>
10064628:	4601      	mov	r1, r0
1006462a:	7306      	strb	r6, [r0, #12]
1006462c:	7285      	strb	r5, [r0, #10]
1006462e:	200c      	movs	r0, #12
10064630:	7248      	strb	r0, [r1, #9]
10064632:	720f      	strb	r7, [r1, #8]
10064634:	2700      	movs	r7, #0
10064636:	71cf      	strb	r7, [r1, #7]
10064638:	2006      	movs	r0, #6
1006463a:	7188      	strb	r0, [r1, #6]
1006463c:	20ff      	movs	r0, #255	@ 0xff
1006463e:	7148      	strb	r0, [r1, #5]
10064640:	2082      	movs	r0, #130	@ 0x82
10064642:	7108      	strb	r0, [r1, #4]
10064644:	0a30      	lsrs	r0, r6, #8
10064646:	7348      	strb	r0, [r1, #13]
10064648:	0a28      	lsrs	r0, r5, #8
1006464a:	72c8      	strb	r0, [r1, #11]
1006464c:	4620      	mov	r0, r4
1006464e:	f7f1 fc5a 	bl	10055f06 <aci_event_fifo_push>
10064652:	e000      	b.n	10064656 <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
10064654:	2707      	movs	r7, #7
10064656:	4638      	mov	r0, r7
10064658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006465a:	46c0      	nop			@ (mov r8, r8)

1006465c <__arm_cp.27_0>:
1006465c:	20002958 	.word	0x20002958

10064660 <__arm_cp.27_1>:
10064660:	20002908 	.word	0x20002908

10064664 <aci_att_clt_find_info_resp_event_push_noinline>:
10064664:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10064666:	4604      	mov	r4, r0
10064668:	06c0      	lsls	r0, r0, #27
1006466a:	d424      	bmi.n	100646b6 <aci_att_clt_find_info_resp_event_push_noinline+0x52>
1006466c:	4616      	mov	r6, r2
1006466e:	4813      	ldr	r0, [pc, #76]	@ (100646bc <__arm_cp.28_0>)
10064670:	6800      	ldr	r0, [r0, #0]
10064672:	2250      	movs	r2, #80	@ 0x50
10064674:	5c80      	ldrb	r0, [r0, r2]
10064676:	2500      	movs	r5, #0
10064678:	0700      	lsls	r0, r0, #28
1006467a:	d51d      	bpl.n	100646b8 <aci_att_clt_find_info_resp_event_push_noinline+0x54>
1006467c:	461f      	mov	r7, r3
1006467e:	9101      	str	r1, [sp, #4]
10064680:	9502      	str	r5, [sp, #8]
10064682:	480f      	ldr	r0, [pc, #60]	@ (100646c0 <__arm_cp.28_1>)
10064684:	6800      	ldr	r0, [r0, #0]
10064686:	0761      	lsls	r1, r4, #29
10064688:	0ec9      	lsrs	r1, r1, #27
1006468a:	1840      	adds	r0, r0, r1
1006468c:	6900      	ldr	r0, [r0, #16]
1006468e:	2507      	movs	r5, #7
10064690:	2303      	movs	r3, #3
10064692:	4621      	mov	r1, r4
10064694:	462a      	mov	r2, r5
10064696:	f7f1 fb99 	bl	10055dcc <aci_event_fifo_push_header>
1006469a:	2800      	cmp	r0, #0
1006469c:	d00c      	beq.n	100646b8 <aci_att_clt_find_info_resp_event_push_noinline+0x54>
1006469e:	4601      	mov	r1, r0
100646a0:	60c7      	str	r7, [r0, #12]
100646a2:	8146      	strh	r6, [r0, #10]
100646a4:	9801      	ldr	r0, [sp, #4]
100646a6:	8108      	strh	r0, [r1, #8]
100646a8:	4806      	ldr	r0, [pc, #24]	@ (100646c4 <__arm_cp.28_2>)
100646aa:	6048      	str	r0, [r1, #4]
100646ac:	4620      	mov	r0, r4
100646ae:	f7f1 fc2a 	bl	10055f06 <aci_event_fifo_push>
100646b2:	9d02      	ldr	r5, [sp, #8]
100646b4:	e000      	b.n	100646b8 <aci_att_clt_find_info_resp_event_push_noinline+0x54>
100646b6:	2586      	movs	r5, #134	@ 0x86
100646b8:	4628      	mov	r0, r5
100646ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100646bc <__arm_cp.28_0>:
100646bc:	20002958 	.word	0x20002958

100646c0 <__arm_cp.28_1>:
100646c0:	20002908 	.word	0x20002908

100646c4 <__arm_cp.28_2>:
100646c4:	10063d9d 	.word	0x10063d9d

100646c8 <aci_att_clt_find_by_type_value_resp_event_push_noinline>:
100646c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100646ca:	4605      	mov	r5, r0
100646cc:	06c0      	lsls	r0, r0, #27
100646ce:	d421      	bmi.n	10064714 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4c>
100646d0:	460e      	mov	r6, r1
100646d2:	4813      	ldr	r0, [pc, #76]	@ (10064720 <__arm_cp.29_0>)
100646d4:	6800      	ldr	r0, [r0, #0]
100646d6:	2150      	movs	r1, #80	@ 0x50
100646d8:	5c40      	ldrb	r0, [r0, r1]
100646da:	2400      	movs	r4, #0
100646dc:	06c0      	lsls	r0, r0, #27
100646de:	d51a      	bpl.n	10064716 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
100646e0:	4617      	mov	r7, r2
100646e2:	9300      	str	r3, [sp, #0]
100646e4:	480f      	ldr	r0, [pc, #60]	@ (10064724 <__arm_cp.29_1>)
100646e6:	6800      	ldr	r0, [r0, #0]
100646e8:	0769      	lsls	r1, r5, #29
100646ea:	0ec9      	lsrs	r1, r1, #27
100646ec:	1840      	adds	r0, r0, r1
100646ee:	6900      	ldr	r0, [r0, #16]
100646f0:	2208      	movs	r2, #8
100646f2:	2303      	movs	r3, #3
100646f4:	4629      	mov	r1, r5
100646f6:	f7f1 fb69 	bl	10055dcc <aci_event_fifo_push_header>
100646fa:	2800      	cmp	r0, #0
100646fc:	d00d      	beq.n	1006471a <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x52>
100646fe:	4601      	mov	r1, r0
10064700:	9800      	ldr	r0, [sp, #0]
10064702:	60c8      	str	r0, [r1, #12]
10064704:	814f      	strh	r7, [r1, #10]
10064706:	810e      	strh	r6, [r1, #8]
10064708:	4807      	ldr	r0, [pc, #28]	@ (10064728 <__arm_cp.29_2>)
1006470a:	6048      	str	r0, [r1, #4]
1006470c:	4628      	mov	r0, r5
1006470e:	f7f1 fbfa 	bl	10055f06 <aci_event_fifo_push>
10064712:	e000      	b.n	10064716 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
10064714:	2486      	movs	r4, #134	@ 0x86
10064716:	4620      	mov	r0, r4
10064718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006471a:	2407      	movs	r4, #7
1006471c:	e7fb      	b.n	10064716 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
1006471e:	46c0      	nop			@ (mov r8, r8)

10064720 <__arm_cp.29_0>:
10064720:	20002958 	.word	0x20002958

10064724 <__arm_cp.29_1>:
10064724:	20002908 	.word	0x20002908

10064728 <__arm_cp.29_2>:
10064728:	10063df1 	.word	0x10063df1

1006472c <aci_att_clt_read_by_type_resp_event_push_noinline>:
1006472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006472e:	4605      	mov	r5, r0
10064730:	06c0      	lsls	r0, r0, #27
10064732:	d421      	bmi.n	10064778 <aci_att_clt_read_by_type_resp_event_push_noinline+0x4c>
10064734:	460e      	mov	r6, r1
10064736:	4813      	ldr	r0, [pc, #76]	@ (10064784 <__arm_cp.30_0>)
10064738:	6800      	ldr	r0, [r0, #0]
1006473a:	2150      	movs	r1, #80	@ 0x50
1006473c:	5c40      	ldrb	r0, [r0, r1]
1006473e:	2400      	movs	r4, #0
10064740:	0680      	lsls	r0, r0, #26
10064742:	d51a      	bpl.n	1006477a <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
10064744:	4617      	mov	r7, r2
10064746:	9300      	str	r3, [sp, #0]
10064748:	480f      	ldr	r0, [pc, #60]	@ (10064788 <__arm_cp.30_1>)
1006474a:	6800      	ldr	r0, [r0, #0]
1006474c:	0769      	lsls	r1, r5, #29
1006474e:	0ec9      	lsrs	r1, r1, #27
10064750:	1840      	adds	r0, r0, r1
10064752:	6900      	ldr	r0, [r0, #16]
10064754:	2209      	movs	r2, #9
10064756:	2303      	movs	r3, #3
10064758:	4629      	mov	r1, r5
1006475a:	f7f1 fb37 	bl	10055dcc <aci_event_fifo_push_header>
1006475e:	2800      	cmp	r0, #0
10064760:	d00d      	beq.n	1006477e <aci_att_clt_read_by_type_resp_event_push_noinline+0x52>
10064762:	4601      	mov	r1, r0
10064764:	9800      	ldr	r0, [sp, #0]
10064766:	60c8      	str	r0, [r1, #12]
10064768:	814f      	strh	r7, [r1, #10]
1006476a:	810e      	strh	r6, [r1, #8]
1006476c:	4807      	ldr	r0, [pc, #28]	@ (1006478c <__arm_cp.30_2>)
1006476e:	6048      	str	r0, [r1, #4]
10064770:	4628      	mov	r0, r5
10064772:	f7f1 fbc8 	bl	10055f06 <aci_event_fifo_push>
10064776:	e000      	b.n	1006477a <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
10064778:	2486      	movs	r4, #134	@ 0x86
1006477a:	4620      	mov	r0, r4
1006477c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006477e:	2407      	movs	r4, #7
10064780:	e7fb      	b.n	1006477a <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
10064782:	46c0      	nop			@ (mov r8, r8)

10064784 <__arm_cp.30_0>:
10064784:	20002958 	.word	0x20002958

10064788 <__arm_cp.30_1>:
10064788:	20002908 	.word	0x20002908

1006478c <__arm_cp.30_2>:
1006478c:	10063e3d 	.word	0x10063e3d

10064790 <aci_att_clt_read_resp_event_push_noinline>:
10064790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064792:	4605      	mov	r5, r0
10064794:	06c0      	lsls	r0, r0, #27
10064796:	d421      	bmi.n	100647dc <aci_att_clt_read_resp_event_push_noinline+0x4c>
10064798:	460e      	mov	r6, r1
1006479a:	4813      	ldr	r0, [pc, #76]	@ (100647e8 <__arm_cp.31_0>)
1006479c:	6800      	ldr	r0, [r0, #0]
1006479e:	2150      	movs	r1, #80	@ 0x50
100647a0:	5c40      	ldrb	r0, [r0, r1]
100647a2:	2400      	movs	r4, #0
100647a4:	0640      	lsls	r0, r0, #25
100647a6:	d51a      	bpl.n	100647de <aci_att_clt_read_resp_event_push_noinline+0x4e>
100647a8:	4617      	mov	r7, r2
100647aa:	9300      	str	r3, [sp, #0]
100647ac:	480f      	ldr	r0, [pc, #60]	@ (100647ec <__arm_cp.31_1>)
100647ae:	6800      	ldr	r0, [r0, #0]
100647b0:	0769      	lsls	r1, r5, #29
100647b2:	0ec9      	lsrs	r1, r1, #27
100647b4:	1840      	adds	r0, r0, r1
100647b6:	6900      	ldr	r0, [r0, #16]
100647b8:	220a      	movs	r2, #10
100647ba:	2303      	movs	r3, #3
100647bc:	4629      	mov	r1, r5
100647be:	f7f1 fb05 	bl	10055dcc <aci_event_fifo_push_header>
100647c2:	2800      	cmp	r0, #0
100647c4:	d00d      	beq.n	100647e2 <aci_att_clt_read_resp_event_push_noinline+0x52>
100647c6:	4601      	mov	r1, r0
100647c8:	9800      	ldr	r0, [sp, #0]
100647ca:	60c8      	str	r0, [r1, #12]
100647cc:	814f      	strh	r7, [r1, #10]
100647ce:	810e      	strh	r6, [r1, #8]
100647d0:	4807      	ldr	r0, [pc, #28]	@ (100647f0 <__arm_cp.31_2>)
100647d2:	6048      	str	r0, [r1, #4]
100647d4:	4628      	mov	r0, r5
100647d6:	f7f1 fb96 	bl	10055f06 <aci_event_fifo_push>
100647da:	e000      	b.n	100647de <aci_att_clt_read_resp_event_push_noinline+0x4e>
100647dc:	2486      	movs	r4, #134	@ 0x86
100647de:	4620      	mov	r0, r4
100647e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100647e2:	2407      	movs	r4, #7
100647e4:	e7fb      	b.n	100647de <aci_att_clt_read_resp_event_push_noinline+0x4e>
100647e6:	46c0      	nop			@ (mov r8, r8)

100647e8 <__arm_cp.31_0>:
100647e8:	20002958 	.word	0x20002958

100647ec <__arm_cp.31_1>:
100647ec:	20002908 	.word	0x20002908

100647f0 <__arm_cp.31_2>:
100647f0:	10063e91 	.word	0x10063e91

100647f4 <aci_att_clt_read_blob_resp_event_push_noinline>:
100647f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100647f6:	4605      	mov	r5, r0
100647f8:	06c0      	lsls	r0, r0, #27
100647fa:	d421      	bmi.n	10064840 <aci_att_clt_read_blob_resp_event_push_noinline+0x4c>
100647fc:	460e      	mov	r6, r1
100647fe:	4813      	ldr	r0, [pc, #76]	@ (1006484c <__arm_cp.32_0>)
10064800:	6800      	ldr	r0, [r0, #0]
10064802:	2150      	movs	r1, #80	@ 0x50
10064804:	5640      	ldrsb	r0, [r0, r1]
10064806:	2400      	movs	r4, #0
10064808:	2800      	cmp	r0, #0
1006480a:	d51a      	bpl.n	10064842 <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
1006480c:	4617      	mov	r7, r2
1006480e:	9300      	str	r3, [sp, #0]
10064810:	480f      	ldr	r0, [pc, #60]	@ (10064850 <__arm_cp.32_1>)
10064812:	6800      	ldr	r0, [r0, #0]
10064814:	0769      	lsls	r1, r5, #29
10064816:	0ec9      	lsrs	r1, r1, #27
10064818:	1840      	adds	r0, r0, r1
1006481a:	6900      	ldr	r0, [r0, #16]
1006481c:	220b      	movs	r2, #11
1006481e:	2303      	movs	r3, #3
10064820:	4629      	mov	r1, r5
10064822:	f7f1 fad3 	bl	10055dcc <aci_event_fifo_push_header>
10064826:	2800      	cmp	r0, #0
10064828:	d00d      	beq.n	10064846 <aci_att_clt_read_blob_resp_event_push_noinline+0x52>
1006482a:	4601      	mov	r1, r0
1006482c:	9800      	ldr	r0, [sp, #0]
1006482e:	60c8      	str	r0, [r1, #12]
10064830:	814f      	strh	r7, [r1, #10]
10064832:	810e      	strh	r6, [r1, #8]
10064834:	4807      	ldr	r0, [pc, #28]	@ (10064854 <__arm_cp.32_2>)
10064836:	6048      	str	r0, [r1, #4]
10064838:	4628      	mov	r0, r5
1006483a:	f7f1 fb64 	bl	10055f06 <aci_event_fifo_push>
1006483e:	e000      	b.n	10064842 <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
10064840:	2486      	movs	r4, #134	@ 0x86
10064842:	4620      	mov	r0, r4
10064844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064846:	2407      	movs	r4, #7
10064848:	e7fb      	b.n	10064842 <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
1006484a:	46c0      	nop			@ (mov r8, r8)

1006484c <__arm_cp.32_0>:
1006484c:	20002958 	.word	0x20002958

10064850 <__arm_cp.32_1>:
10064850:	20002908 	.word	0x20002908

10064854 <__arm_cp.32_2>:
10064854:	10063ee1 	.word	0x10063ee1

10064858 <aci_att_clt_read_multiple_resp_event_push_noinline>:
10064858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006485a:	4605      	mov	r5, r0
1006485c:	06c0      	lsls	r0, r0, #27
1006485e:	d421      	bmi.n	100648a4 <aci_att_clt_read_multiple_resp_event_push_noinline+0x4c>
10064860:	460e      	mov	r6, r1
10064862:	4813      	ldr	r0, [pc, #76]	@ (100648b0 <__arm_cp.33_0>)
10064864:	6800      	ldr	r0, [r0, #0]
10064866:	2151      	movs	r1, #81	@ 0x51
10064868:	5c40      	ldrb	r0, [r0, r1]
1006486a:	2400      	movs	r4, #0
1006486c:	07c0      	lsls	r0, r0, #31
1006486e:	d01a      	beq.n	100648a6 <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
10064870:	4617      	mov	r7, r2
10064872:	9300      	str	r3, [sp, #0]
10064874:	480f      	ldr	r0, [pc, #60]	@ (100648b4 <__arm_cp.33_1>)
10064876:	6800      	ldr	r0, [r0, #0]
10064878:	0769      	lsls	r1, r5, #29
1006487a:	0ec9      	lsrs	r1, r1, #27
1006487c:	1840      	adds	r0, r0, r1
1006487e:	6900      	ldr	r0, [r0, #16]
10064880:	220c      	movs	r2, #12
10064882:	2303      	movs	r3, #3
10064884:	4629      	mov	r1, r5
10064886:	f7f1 faa1 	bl	10055dcc <aci_event_fifo_push_header>
1006488a:	2800      	cmp	r0, #0
1006488c:	d00d      	beq.n	100648aa <aci_att_clt_read_multiple_resp_event_push_noinline+0x52>
1006488e:	4601      	mov	r1, r0
10064890:	9800      	ldr	r0, [sp, #0]
10064892:	60c8      	str	r0, [r1, #12]
10064894:	814f      	strh	r7, [r1, #10]
10064896:	810e      	strh	r6, [r1, #8]
10064898:	4807      	ldr	r0, [pc, #28]	@ (100648b8 <__arm_cp.33_2>)
1006489a:	6048      	str	r0, [r1, #4]
1006489c:	4628      	mov	r0, r5
1006489e:	f7f1 fb32 	bl	10055f06 <aci_event_fifo_push>
100648a2:	e000      	b.n	100648a6 <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
100648a4:	2486      	movs	r4, #134	@ 0x86
100648a6:	4620      	mov	r0, r4
100648a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100648aa:	2407      	movs	r4, #7
100648ac:	e7fb      	b.n	100648a6 <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
100648ae:	46c0      	nop			@ (mov r8, r8)

100648b0 <__arm_cp.33_0>:
100648b0:	20002958 	.word	0x20002958

100648b4 <__arm_cp.33_1>:
100648b4:	20002908 	.word	0x20002908

100648b8 <__arm_cp.33_2>:
100648b8:	10063f31 	.word	0x10063f31

100648bc <aci_att_clt_read_by_group_type_resp_event_push_noinline>:
100648bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100648be:	4605      	mov	r5, r0
100648c0:	06c0      	lsls	r0, r0, #27
100648c2:	d421      	bmi.n	10064908 <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4c>
100648c4:	460e      	mov	r6, r1
100648c6:	4813      	ldr	r0, [pc, #76]	@ (10064914 <__arm_cp.34_0>)
100648c8:	6800      	ldr	r0, [r0, #0]
100648ca:	2151      	movs	r1, #81	@ 0x51
100648cc:	5c40      	ldrb	r0, [r0, r1]
100648ce:	2400      	movs	r4, #0
100648d0:	0780      	lsls	r0, r0, #30
100648d2:	d51a      	bpl.n	1006490a <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
100648d4:	4617      	mov	r7, r2
100648d6:	9300      	str	r3, [sp, #0]
100648d8:	480f      	ldr	r0, [pc, #60]	@ (10064918 <__arm_cp.34_1>)
100648da:	6800      	ldr	r0, [r0, #0]
100648dc:	0769      	lsls	r1, r5, #29
100648de:	0ec9      	lsrs	r1, r1, #27
100648e0:	1840      	adds	r0, r0, r1
100648e2:	6900      	ldr	r0, [r0, #16]
100648e4:	220d      	movs	r2, #13
100648e6:	2303      	movs	r3, #3
100648e8:	4629      	mov	r1, r5
100648ea:	f7f1 fa6f 	bl	10055dcc <aci_event_fifo_push_header>
100648ee:	2800      	cmp	r0, #0
100648f0:	d00d      	beq.n	1006490e <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x52>
100648f2:	4601      	mov	r1, r0
100648f4:	9800      	ldr	r0, [sp, #0]
100648f6:	60c8      	str	r0, [r1, #12]
100648f8:	814f      	strh	r7, [r1, #10]
100648fa:	810e      	strh	r6, [r1, #8]
100648fc:	4807      	ldr	r0, [pc, #28]	@ (1006491c <__arm_cp.34_2>)
100648fe:	6048      	str	r0, [r1, #4]
10064900:	4628      	mov	r0, r5
10064902:	f7f1 fb00 	bl	10055f06 <aci_event_fifo_push>
10064906:	e000      	b.n	1006490a <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
10064908:	2486      	movs	r4, #134	@ 0x86
1006490a:	4620      	mov	r0, r4
1006490c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006490e:	2407      	movs	r4, #7
10064910:	e7fb      	b.n	1006490a <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
10064912:	46c0      	nop			@ (mov r8, r8)

10064914 <__arm_cp.34_0>:
10064914:	20002958 	.word	0x20002958

10064918 <__arm_cp.34_1>:
10064918:	20002908 	.word	0x20002908

1006491c <__arm_cp.34_2>:
1006491c:	10063f81 	.word	0x10063f81

10064920 <aci_att_clt_prepare_write_resp_event_push_noinline>:
10064920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064922:	4605      	mov	r5, r0
10064924:	06c0      	lsls	r0, r0, #27
10064926:	d421      	bmi.n	1006496c <aci_att_clt_prepare_write_resp_event_push_noinline+0x4c>
10064928:	460e      	mov	r6, r1
1006492a:	4813      	ldr	r0, [pc, #76]	@ (10064978 <__arm_cp.35_0>)
1006492c:	6800      	ldr	r0, [r0, #0]
1006492e:	2151      	movs	r1, #81	@ 0x51
10064930:	5c40      	ldrb	r0, [r0, r1]
10064932:	2400      	movs	r4, #0
10064934:	0700      	lsls	r0, r0, #28
10064936:	d51a      	bpl.n	1006496e <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
10064938:	4617      	mov	r7, r2
1006493a:	9300      	str	r3, [sp, #0]
1006493c:	480f      	ldr	r0, [pc, #60]	@ (1006497c <__arm_cp.35_1>)
1006493e:	6800      	ldr	r0, [r0, #0]
10064940:	0769      	lsls	r1, r5, #29
10064942:	0ec9      	lsrs	r1, r1, #27
10064944:	1840      	adds	r0, r0, r1
10064946:	6900      	ldr	r0, [r0, #16]
10064948:	220e      	movs	r2, #14
1006494a:	2303      	movs	r3, #3
1006494c:	4629      	mov	r1, r5
1006494e:	f7f1 fa3d 	bl	10055dcc <aci_event_fifo_push_header>
10064952:	2800      	cmp	r0, #0
10064954:	d00d      	beq.n	10064972 <aci_att_clt_prepare_write_resp_event_push_noinline+0x52>
10064956:	4601      	mov	r1, r0
10064958:	9800      	ldr	r0, [sp, #0]
1006495a:	60c8      	str	r0, [r1, #12]
1006495c:	814f      	strh	r7, [r1, #10]
1006495e:	810e      	strh	r6, [r1, #8]
10064960:	4807      	ldr	r0, [pc, #28]	@ (10064980 <__arm_cp.35_2>)
10064962:	6048      	str	r0, [r1, #4]
10064964:	4628      	mov	r0, r5
10064966:	f7f1 face 	bl	10055f06 <aci_event_fifo_push>
1006496a:	e000      	b.n	1006496e <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
1006496c:	2486      	movs	r4, #134	@ 0x86
1006496e:	4620      	mov	r0, r4
10064970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064972:	2407      	movs	r4, #7
10064974:	e7fb      	b.n	1006496e <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
10064976:	46c0      	nop			@ (mov r8, r8)

10064978 <__arm_cp.35_0>:
10064978:	20002958 	.word	0x20002958

1006497c <__arm_cp.35_1>:
1006497c:	20002908 	.word	0x20002908

10064980 <__arm_cp.35_2>:
10064980:	10063fd5 	.word	0x10063fd5

10064984 <aci_att_clt_exec_write_resp_event_push_noinline>:
10064984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064986:	4604      	mov	r4, r0
10064988:	06c0      	lsls	r0, r0, #27
1006498a:	d408      	bmi.n	1006499e <aci_att_clt_exec_write_resp_event_push_noinline+0x1a>
1006498c:	460d      	mov	r5, r1
1006498e:	4819      	ldr	r0, [pc, #100]	@ (100649f4 <__arm_cp.36_0>)
10064990:	6800      	ldr	r0, [r0, #0]
10064992:	2151      	movs	r1, #81	@ 0x51
10064994:	5c40      	ldrb	r0, [r0, r1]
10064996:	06c0      	lsls	r0, r0, #27
10064998:	d403      	bmi.n	100649a2 <aci_att_clt_exec_write_resp_event_push_noinline+0x1e>
1006499a:	2700      	movs	r7, #0
1006499c:	e027      	b.n	100649ee <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
1006499e:	2786      	movs	r7, #134	@ 0x86
100649a0:	e025      	b.n	100649ee <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
100649a2:	4616      	mov	r6, r2
100649a4:	4814      	ldr	r0, [pc, #80]	@ (100649f8 <__arm_cp.36_1>)
100649a6:	6800      	ldr	r0, [r0, #0]
100649a8:	0761      	lsls	r1, r4, #29
100649aa:	0ec9      	lsrs	r1, r1, #27
100649ac:	1840      	adds	r0, r0, r1
100649ae:	6900      	ldr	r0, [r0, #16]
100649b0:	2259      	movs	r2, #89	@ 0x59
100649b2:	2303      	movs	r3, #3
100649b4:	4621      	mov	r1, r4
100649b6:	f7f1 fa09 	bl	10055dcc <aci_event_fifo_push_header>
100649ba:	2800      	cmp	r0, #0
100649bc:	d016      	beq.n	100649ec <aci_att_clt_exec_write_resp_event_push_noinline+0x68>
100649be:	4601      	mov	r1, r0
100649c0:	7306      	strb	r6, [r0, #12]
100649c2:	7285      	strb	r5, [r0, #10]
100649c4:	200c      	movs	r0, #12
100649c6:	7248      	strb	r0, [r1, #9]
100649c8:	200d      	movs	r0, #13
100649ca:	7208      	strb	r0, [r1, #8]
100649cc:	2700      	movs	r7, #0
100649ce:	71cf      	strb	r7, [r1, #7]
100649d0:	2006      	movs	r0, #6
100649d2:	7188      	strb	r0, [r1, #6]
100649d4:	20ff      	movs	r0, #255	@ 0xff
100649d6:	7148      	strb	r0, [r1, #5]
100649d8:	2082      	movs	r0, #130	@ 0x82
100649da:	7108      	strb	r0, [r1, #4]
100649dc:	0a30      	lsrs	r0, r6, #8
100649de:	7348      	strb	r0, [r1, #13]
100649e0:	0a28      	lsrs	r0, r5, #8
100649e2:	72c8      	strb	r0, [r1, #11]
100649e4:	4620      	mov	r0, r4
100649e6:	f7f1 fa8e 	bl	10055f06 <aci_event_fifo_push>
100649ea:	e000      	b.n	100649ee <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
100649ec:	2707      	movs	r7, #7
100649ee:	4638      	mov	r0, r7
100649f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100649f2:	46c0      	nop			@ (mov r8, r8)

100649f4 <__arm_cp.36_0>:
100649f4:	20002958 	.word	0x20002958

100649f8 <__arm_cp.36_1>:
100649f8:	20002908 	.word	0x20002908

100649fc <aci_att_srv_prepare_write_req_event_push_noinline>:
100649fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100649fe:	4604      	mov	r4, r0
10064a00:	06c0      	lsls	r0, r0, #27
10064a02:	d420      	bmi.n	10064a46 <aci_att_srv_prepare_write_req_event_push_noinline+0x4a>
10064a04:	461f      	mov	r7, r3
10064a06:	4616      	mov	r6, r2
10064a08:	460d      	mov	r5, r1
10064a0a:	4811      	ldr	r0, [pc, #68]	@ (10064a50 <__arm_cp.37_0>)
10064a0c:	6800      	ldr	r0, [r0, #0]
10064a0e:	0761      	lsls	r1, r4, #29
10064a10:	0ec9      	lsrs	r1, r1, #27
10064a12:	1840      	adds	r0, r0, r1
10064a14:	6900      	ldr	r0, [r0, #16]
10064a16:	2212      	movs	r2, #18
10064a18:	2305      	movs	r3, #5
10064a1a:	4621      	mov	r1, r4
10064a1c:	f7f1 f9d6 	bl	10055dcc <aci_event_fifo_push_header>
10064a20:	2800      	cmp	r0, #0
10064a22:	d012      	beq.n	10064a4a <aci_att_srv_prepare_write_req_event_push_noinline+0x4e>
10064a24:	4601      	mov	r1, r0
10064a26:	9808      	ldr	r0, [sp, #32]
10064a28:	9a07      	ldr	r2, [sp, #28]
10064a2a:	9b06      	ldr	r3, [sp, #24]
10064a2c:	6148      	str	r0, [r1, #20]
10064a2e:	820a      	strh	r2, [r1, #16]
10064a30:	81cb      	strh	r3, [r1, #14]
10064a32:	818f      	strh	r7, [r1, #12]
10064a34:	814e      	strh	r6, [r1, #10]
10064a36:	810d      	strh	r5, [r1, #8]
10064a38:	4806      	ldr	r0, [pc, #24]	@ (10064a54 <__arm_cp.37_1>)
10064a3a:	6048      	str	r0, [r1, #4]
10064a3c:	4620      	mov	r0, r4
10064a3e:	f7f1 fa62 	bl	10055f06 <aci_event_fifo_push>
10064a42:	2000      	movs	r0, #0
10064a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064a46:	2086      	movs	r0, #134	@ 0x86
10064a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064a4a:	2007      	movs	r0, #7
10064a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064a4e:	46c0      	nop			@ (mov r8, r8)

10064a50 <__arm_cp.37_0>:
10064a50:	20002908 	.word	0x20002908

10064a54 <__arm_cp.37_1>:
10064a54:	10064021 	.word	0x10064021

10064a58 <aci_att_srv_exec_write_req_event_push_noinline>:
10064a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064a5a:	4604      	mov	r4, r0
10064a5c:	06c0      	lsls	r0, r0, #27
10064a5e:	d428      	bmi.n	10064ab2 <aci_att_srv_exec_write_req_event_push_noinline+0x5a>
10064a60:	461f      	mov	r7, r3
10064a62:	4616      	mov	r6, r2
10064a64:	460d      	mov	r5, r1
10064a66:	4815      	ldr	r0, [pc, #84]	@ (10064abc <__arm_cp.38_0>)
10064a68:	6800      	ldr	r0, [r0, #0]
10064a6a:	0761      	lsls	r1, r4, #29
10064a6c:	0ec9      	lsrs	r1, r1, #27
10064a6e:	1840      	adds	r0, r0, r1
10064a70:	6900      	ldr	r0, [r0, #16]
10064a72:	2260      	movs	r2, #96	@ 0x60
10064a74:	2303      	movs	r3, #3
10064a76:	4621      	mov	r1, r4
10064a78:	f7f1 f9a8 	bl	10055dcc <aci_event_fifo_push_header>
10064a7c:	2800      	cmp	r0, #0
10064a7e:	d01a      	beq.n	10064ab6 <aci_att_srv_exec_write_req_event_push_noinline+0x5e>
10064a80:	4601      	mov	r1, r0
10064a82:	7306      	strb	r6, [r0, #12]
10064a84:	7285      	strb	r5, [r0, #10]
10064a86:	200c      	movs	r0, #12
10064a88:	7248      	strb	r0, [r1, #9]
10064a8a:	201c      	movs	r0, #28
10064a8c:	7208      	strb	r0, [r1, #8]
10064a8e:	463a      	mov	r2, r7
10064a90:	2700      	movs	r7, #0
10064a92:	71cf      	strb	r7, [r1, #7]
10064a94:	2007      	movs	r0, #7
10064a96:	7188      	strb	r0, [r1, #6]
10064a98:	738a      	strb	r2, [r1, #14]
10064a9a:	20ff      	movs	r0, #255	@ 0xff
10064a9c:	7148      	strb	r0, [r1, #5]
10064a9e:	2082      	movs	r0, #130	@ 0x82
10064aa0:	7108      	strb	r0, [r1, #4]
10064aa2:	0a30      	lsrs	r0, r6, #8
10064aa4:	7348      	strb	r0, [r1, #13]
10064aa6:	0a28      	lsrs	r0, r5, #8
10064aa8:	72c8      	strb	r0, [r1, #11]
10064aaa:	4620      	mov	r0, r4
10064aac:	f7f1 fa2b 	bl	10055f06 <aci_event_fifo_push>
10064ab0:	e002      	b.n	10064ab8 <aci_att_srv_exec_write_req_event_push_noinline+0x60>
10064ab2:	2786      	movs	r7, #134	@ 0x86
10064ab4:	e000      	b.n	10064ab8 <aci_att_srv_exec_write_req_event_push_noinline+0x60>
10064ab6:	2707      	movs	r7, #7
10064ab8:	4638      	mov	r0, r7
10064aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10064abc <__arm_cp.38_0>:
10064abc:	20002908 	.word	0x20002908

10064ac0 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline>:
10064ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064ac2:	4605      	mov	r5, r0
10064ac4:	06c0      	lsls	r0, r0, #27
10064ac6:	d421      	bmi.n	10064b0c <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4c>
10064ac8:	460e      	mov	r6, r1
10064aca:	4813      	ldr	r0, [pc, #76]	@ (10064b18 <__arm_cp.39_0>)
10064acc:	6800      	ldr	r0, [r0, #0]
10064ace:	2152      	movs	r1, #82	@ 0x52
10064ad0:	5c40      	ldrb	r0, [r0, r1]
10064ad2:	2400      	movs	r4, #0
10064ad4:	0740      	lsls	r0, r0, #29
10064ad6:	d51a      	bpl.n	10064b0e <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
10064ad8:	4617      	mov	r7, r2
10064ada:	9300      	str	r3, [sp, #0]
10064adc:	480f      	ldr	r0, [pc, #60]	@ (10064b1c <__arm_cp.39_1>)
10064ade:	6800      	ldr	r0, [r0, #0]
10064ae0:	0769      	lsls	r1, r5, #29
10064ae2:	0ec9      	lsrs	r1, r1, #27
10064ae4:	1840      	adds	r0, r0, r1
10064ae6:	6900      	ldr	r0, [r0, #16]
10064ae8:	2213      	movs	r2, #19
10064aea:	2303      	movs	r3, #3
10064aec:	4629      	mov	r1, r5
10064aee:	f7f1 f96d 	bl	10055dcc <aci_event_fifo_push_header>
10064af2:	2800      	cmp	r0, #0
10064af4:	d00d      	beq.n	10064b12 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x52>
10064af6:	4601      	mov	r1, r0
10064af8:	9800      	ldr	r0, [sp, #0]
10064afa:	60c8      	str	r0, [r1, #12]
10064afc:	814f      	strh	r7, [r1, #10]
10064afe:	810e      	strh	r6, [r1, #8]
10064b00:	4807      	ldr	r0, [pc, #28]	@ (10064b20 <__arm_cp.39_2>)
10064b02:	6048      	str	r0, [r1, #4]
10064b04:	4628      	mov	r0, r5
10064b06:	f7f1 f9fe 	bl	10055f06 <aci_event_fifo_push>
10064b0a:	e000      	b.n	10064b0e <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
10064b0c:	2486      	movs	r4, #134	@ 0x86
10064b0e:	4620      	mov	r0, r4
10064b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064b12:	2407      	movs	r4, #7
10064b14:	e7fb      	b.n	10064b0e <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
10064b16:	46c0      	nop			@ (mov r8, r8)

10064b18 <__arm_cp.39_0>:
10064b18:	20002958 	.word	0x20002958

10064b1c <__arm_cp.39_1>:
10064b1c:	20002908 	.word	0x20002908

10064b20 <__arm_cp.39_2>:
10064b20:	1006407d 	.word	0x1006407d

10064b24 <hci_number_of_completed_packets_event_cb>:
10064b24:	b51c      	push	{r2, r3, r4, lr}
10064b26:	8889      	ldrh	r1, [r1, #4]
10064b28:	466c      	mov	r4, sp
10064b2a:	1ce0      	adds	r0, r4, #3
10064b2c:	f7f1 fc80 	bl	10056430 <hci_number_of_completed_packets_event_copy>
10064b30:	2005      	movs	r0, #5
10064b32:	70a0      	strb	r0, [r4, #2]
10064b34:	2013      	movs	r0, #19
10064b36:	7060      	strb	r0, [r4, #1]
10064b38:	2004      	movs	r0, #4
10064b3a:	7020      	strb	r0, [r4, #0]
10064b3c:	2108      	movs	r1, #8
10064b3e:	4620      	mov	r0, r4
10064b40:	f7ea fdc6 	bl	1004f6d0 <BLE_STACK_Event>
10064b44:	bd1c      	pop	{r2, r3, r4, pc}
	...

10064b48 <hci_number_of_completed_packets_event_push_noinline>:
10064b48:	b5b0      	push	{r4, r5, r7, lr}
10064b4a:	4604      	mov	r4, r0
10064b4c:	06c0      	lsls	r0, r0, #27
10064b4e:	d416      	bmi.n	10064b7e <hci_number_of_completed_packets_event_push_noinline+0x36>
10064b50:	460d      	mov	r5, r1
10064b52:	480d      	ldr	r0, [pc, #52]	@ (10064b88 <__arm_cp.22_0>)
10064b54:	6800      	ldr	r0, [r0, #0]
10064b56:	0761      	lsls	r1, r4, #29
10064b58:	0ec9      	lsrs	r1, r1, #27
10064b5a:	1840      	adds	r0, r0, r1
10064b5c:	6900      	ldr	r0, [r0, #16]
10064b5e:	2202      	movs	r2, #2
10064b60:	4621      	mov	r1, r4
10064b62:	4613      	mov	r3, r2
10064b64:	f7f1 f932 	bl	10055dcc <aci_event_fifo_push_header>
10064b68:	2800      	cmp	r0, #0
10064b6a:	d00a      	beq.n	10064b82 <hci_number_of_completed_packets_event_push_noinline+0x3a>
10064b6c:	4601      	mov	r1, r0
10064b6e:	4807      	ldr	r0, [pc, #28]	@ (10064b8c <__arm_cp.22_1>)
10064b70:	6048      	str	r0, [r1, #4]
10064b72:	810d      	strh	r5, [r1, #8]
10064b74:	4620      	mov	r0, r4
10064b76:	f7f1 f9c6 	bl	10055f06 <aci_event_fifo_push>
10064b7a:	2000      	movs	r0, #0
10064b7c:	bdb0      	pop	{r4, r5, r7, pc}
10064b7e:	2086      	movs	r0, #134	@ 0x86
10064b80:	bdb0      	pop	{r4, r5, r7, pc}
10064b82:	2007      	movs	r0, #7
10064b84:	bdb0      	pop	{r4, r5, r7, pc}
10064b86:	46c0      	nop			@ (mov r8, r8)

10064b88 <__arm_cp.22_0>:
10064b88:	20002908 	.word	0x20002908

10064b8c <__arm_cp.22_1>:
10064b8c:	10064b25 	.word	0x10064b25

10064b90 <hci_le_read_remote_features_complete_event_push_noinline>:
10064b90:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10064b92:	4605      	mov	r5, r0
10064b94:	06c0      	lsls	r0, r0, #27
10064b96:	d433      	bmi.n	10064c00 <hci_le_read_remote_features_complete_event_push_noinline+0x70>
10064b98:	4617      	mov	r7, r2
10064b9a:	481c      	ldr	r0, [pc, #112]	@ (10064c0c <__arm_cp.26_0>)
10064b9c:	6800      	ldr	r0, [r0, #0]
10064b9e:	223d      	movs	r2, #61	@ 0x3d
10064ba0:	5c82      	ldrb	r2, [r0, r2]
10064ba2:	2400      	movs	r4, #0
10064ba4:	0692      	lsls	r2, r2, #26
10064ba6:	d52c      	bpl.n	10064c02 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10064ba8:	303d      	adds	r0, #61	@ 0x3d
10064baa:	7a40      	ldrb	r0, [r0, #9]
10064bac:	0700      	lsls	r0, r0, #28
10064bae:	d528      	bpl.n	10064c02 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10064bb0:	9101      	str	r1, [sp, #4]
10064bb2:	9302      	str	r3, [sp, #8]
10064bb4:	4816      	ldr	r0, [pc, #88]	@ (10064c10 <__arm_cp.26_1>)
10064bb6:	6800      	ldr	r0, [r0, #0]
10064bb8:	0769      	lsls	r1, r5, #29
10064bba:	0ec9      	lsrs	r1, r1, #27
10064bbc:	1840      	adds	r0, r0, r1
10064bbe:	6900      	ldr	r0, [r0, #16]
10064bc0:	2225      	movs	r2, #37	@ 0x25
10064bc2:	2304      	movs	r3, #4
10064bc4:	4629      	mov	r1, r5
10064bc6:	9300      	str	r3, [sp, #0]
10064bc8:	f7f1 f900 	bl	10055dcc <aci_event_fifo_push_header>
10064bcc:	2800      	cmp	r0, #0
10064bce:	d01a      	beq.n	10064c06 <hci_le_read_remote_features_complete_event_push_noinline+0x76>
10064bd0:	4606      	mov	r6, r0
10064bd2:	7247      	strb	r7, [r0, #9]
10064bd4:	9801      	ldr	r0, [sp, #4]
10064bd6:	7230      	strb	r0, [r6, #8]
10064bd8:	0a38      	lsrs	r0, r7, #8
10064bda:	72b0      	strb	r0, [r6, #10]
10064bdc:	4630      	mov	r0, r6
10064bde:	300b      	adds	r0, #11
10064be0:	2208      	movs	r2, #8
10064be2:	9902      	ldr	r1, [sp, #8]
10064be4:	f7ee fba6 	bl	10053334 <BLEPLAT_MemCpy>
10064be8:	9900      	ldr	r1, [sp, #0]
10064bea:	71f1      	strb	r1, [r6, #7]
10064bec:	200c      	movs	r0, #12
10064bee:	71b0      	strb	r0, [r6, #6]
10064bf0:	203e      	movs	r0, #62	@ 0x3e
10064bf2:	7170      	strb	r0, [r6, #5]
10064bf4:	7131      	strb	r1, [r6, #4]
10064bf6:	4628      	mov	r0, r5
10064bf8:	4631      	mov	r1, r6
10064bfa:	f7f1 f984 	bl	10055f06 <aci_event_fifo_push>
10064bfe:	e000      	b.n	10064c02 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10064c00:	2486      	movs	r4, #134	@ 0x86
10064c02:	4620      	mov	r0, r4
10064c04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10064c06:	2407      	movs	r4, #7
10064c08:	e7fb      	b.n	10064c02 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10064c0a:	46c0      	nop			@ (mov r8, r8)

10064c0c <__arm_cp.26_0>:
10064c0c:	20002958 	.word	0x20002958

10064c10 <__arm_cp.26_1>:
10064c10:	20002908 	.word	0x20002908

10064c14 <aci_l2cap_proc_timeout_event_cb>:
10064c14:	b510      	push	{r4, lr}
10064c16:	b0ff      	sub	sp, #508	@ 0x1fc
10064c18:	b083      	sub	sp, #12
10064c1a:	8889      	ldrh	r1, [r1, #4]
10064c1c:	466c      	mov	r4, sp
10064c1e:	1da0      	adds	r0, r4, #6
10064c20:	f7f1 fe52 	bl	100568c8 <aci_l2cap_proc_timeout_event_copy>
10064c24:	7a21      	ldrb	r1, [r4, #8]
10064c26:	1d48      	adds	r0, r1, #5
10064c28:	70a0      	strb	r0, [r4, #2]
10064c2a:	0a00      	lsrs	r0, r0, #8
10064c2c:	70e0      	strb	r0, [r4, #3]
10064c2e:	2001      	movs	r0, #1
10064c30:	7120      	strb	r0, [r4, #4]
10064c32:	20ff      	movs	r0, #255	@ 0xff
10064c34:	7060      	strb	r0, [r4, #1]
10064c36:	2082      	movs	r0, #130	@ 0x82
10064c38:	7020      	strb	r0, [r4, #0]
10064c3a:	2008      	movs	r0, #8
10064c3c:	7160      	strb	r0, [r4, #5]
10064c3e:	3109      	adds	r1, #9
10064c40:	4620      	mov	r0, r4
10064c42:	f7ea fd45 	bl	1004f6d0 <BLE_STACK_Event>
10064c46:	b07f      	add	sp, #508	@ 0x1fc
10064c48:	b003      	add	sp, #12
10064c4a:	bd10      	pop	{r4, pc}

10064c4c <aci_hal_fw_error_event_push_noinline>:
10064c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064c4e:	4604      	mov	r4, r0
10064c50:	06c0      	lsls	r0, r0, #27
10064c52:	d42d      	bmi.n	10064cb0 <aci_hal_fw_error_event_push_noinline+0x64>
10064c54:	4615      	mov	r5, r2
10064c56:	460f      	mov	r7, r1
10064c58:	9300      	str	r3, [sp, #0]
10064c5a:	4818      	ldr	r0, [pc, #96]	@ (10064cbc <__arm_cp.0_0>)
10064c5c:	6800      	ldr	r0, [r0, #0]
10064c5e:	0761      	lsls	r1, r4, #29
10064c60:	0ec9      	lsrs	r1, r1, #27
10064c62:	1840      	adds	r0, r0, r1
10064c64:	6900      	ldr	r0, [r0, #16]
10064c66:	1e51      	subs	r1, r2, #1
10064c68:	2203      	movs	r2, #3
10064c6a:	430a      	orrs	r2, r1
10064c6c:	3209      	adds	r2, #9
10064c6e:	0891      	lsrs	r1, r2, #2
10064c70:	b28b      	uxth	r3, r1
10064c72:	2240      	movs	r2, #64	@ 0x40
10064c74:	4621      	mov	r1, r4
10064c76:	f7f1 f8a9 	bl	10055dcc <aci_event_fifo_push_header>
10064c7a:	2800      	cmp	r0, #0
10064c7c:	d01a      	beq.n	10064cb4 <aci_hal_fw_error_event_push_noinline+0x68>
10064c7e:	4606      	mov	r6, r0
10064c80:	72c5      	strb	r5, [r0, #11]
10064c82:	7287      	strb	r7, [r0, #10]
10064c84:	300c      	adds	r0, #12
10064c86:	9900      	ldr	r1, [sp, #0]
10064c88:	462a      	mov	r2, r5
10064c8a:	f7ee fb53 	bl	10053334 <BLEPLAT_MemCpy>
10064c8e:	2700      	movs	r7, #0
10064c90:	7277      	strb	r7, [r6, #9]
10064c92:	2006      	movs	r0, #6
10064c94:	7230      	strb	r0, [r6, #8]
10064c96:	1d28      	adds	r0, r5, #4
10064c98:	0a01      	lsrs	r1, r0, #8
10064c9a:	71f1      	strb	r1, [r6, #7]
10064c9c:	71b0      	strb	r0, [r6, #6]
10064c9e:	20ff      	movs	r0, #255	@ 0xff
10064ca0:	7170      	strb	r0, [r6, #5]
10064ca2:	2082      	movs	r0, #130	@ 0x82
10064ca4:	7130      	strb	r0, [r6, #4]
10064ca6:	4620      	mov	r0, r4
10064ca8:	4631      	mov	r1, r6
10064caa:	f7f1 f92c 	bl	10055f06 <aci_event_fifo_push>
10064cae:	e002      	b.n	10064cb6 <aci_hal_fw_error_event_push_noinline+0x6a>
10064cb0:	2786      	movs	r7, #134	@ 0x86
10064cb2:	e000      	b.n	10064cb6 <aci_hal_fw_error_event_push_noinline+0x6a>
10064cb4:	2707      	movs	r7, #7
10064cb6:	4638      	mov	r0, r7
10064cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064cba:	46c0      	nop			@ (mov r8, r8)

10064cbc <__arm_cp.0_0>:
10064cbc:	20002908 	.word	0x20002908

10064cc0 <aci_hal_adv_scan_resp_data_update_event_push_noinline>:
10064cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064cc2:	4604      	mov	r4, r0
10064cc4:	06c0      	lsls	r0, r0, #27
10064cc6:	d42d      	bmi.n	10064d24 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x64>
10064cc8:	4616      	mov	r6, r2
10064cca:	460d      	mov	r5, r1
10064ccc:	4818      	ldr	r0, [pc, #96]	@ (10064d30 <__arm_cp.1_0>)
10064cce:	6800      	ldr	r0, [r0, #0]
10064cd0:	0761      	lsls	r1, r4, #29
10064cd2:	0ec9      	lsrs	r1, r1, #27
10064cd4:	1840      	adds	r0, r0, r1
10064cd6:	6900      	ldr	r0, [r0, #16]
10064cd8:	2241      	movs	r2, #65	@ 0x41
10064cda:	2304      	movs	r3, #4
10064cdc:	4621      	mov	r1, r4
10064cde:	f7f1 f875 	bl	10055dcc <aci_event_fifo_push_header>
10064ce2:	2800      	cmp	r0, #0
10064ce4:	d020      	beq.n	10064d28 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x68>
10064ce6:	4601      	mov	r1, r0
10064ce8:	300a      	adds	r0, #10
10064cea:	7106      	strb	r6, [r0, #4]
10064cec:	7005      	strb	r5, [r0, #0]
10064cee:	2700      	movs	r7, #0
10064cf0:	724f      	strb	r7, [r1, #9]
10064cf2:	2210      	movs	r2, #16
10064cf4:	720a      	strb	r2, [r1, #8]
10064cf6:	71cf      	strb	r7, [r1, #7]
10064cf8:	220a      	movs	r2, #10
10064cfa:	718a      	strb	r2, [r1, #6]
10064cfc:	22ff      	movs	r2, #255	@ 0xff
10064cfe:	714a      	strb	r2, [r1, #5]
10064d00:	2282      	movs	r2, #130	@ 0x82
10064d02:	710a      	strb	r2, [r1, #4]
10064d04:	0e32      	lsrs	r2, r6, #24
10064d06:	71c2      	strb	r2, [r0, #7]
10064d08:	0c32      	lsrs	r2, r6, #16
10064d0a:	7182      	strb	r2, [r0, #6]
10064d0c:	0a32      	lsrs	r2, r6, #8
10064d0e:	7142      	strb	r2, [r0, #5]
10064d10:	0e2a      	lsrs	r2, r5, #24
10064d12:	70c2      	strb	r2, [r0, #3]
10064d14:	0c2a      	lsrs	r2, r5, #16
10064d16:	7082      	strb	r2, [r0, #2]
10064d18:	0a2a      	lsrs	r2, r5, #8
10064d1a:	7042      	strb	r2, [r0, #1]
10064d1c:	4620      	mov	r0, r4
10064d1e:	f7f1 f8f2 	bl	10055f06 <aci_event_fifo_push>
10064d22:	e002      	b.n	10064d2a <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
10064d24:	2786      	movs	r7, #134	@ 0x86
10064d26:	e000      	b.n	10064d2a <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
10064d28:	2707      	movs	r7, #7
10064d2a:	4638      	mov	r0, r7
10064d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064d2e:	46c0      	nop			@ (mov r8, r8)

10064d30 <__arm_cp.1_0>:
10064d30:	20002908 	.word	0x20002908

10064d34 <aci_gap_pairing_complete_event_push_noinline>:
10064d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064d36:	4604      	mov	r4, r0
10064d38:	06c0      	lsls	r0, r0, #27
10064d3a:	d408      	bmi.n	10064d4e <aci_gap_pairing_complete_event_push_noinline+0x1a>
10064d3c:	460d      	mov	r5, r1
10064d3e:	4819      	ldr	r0, [pc, #100]	@ (10064da4 <__arm_cp.1_0>)
10064d40:	6800      	ldr	r0, [r0, #0]
10064d42:	214e      	movs	r1, #78	@ 0x4e
10064d44:	5c40      	ldrb	r0, [r0, r1]
10064d46:	0780      	lsls	r0, r0, #30
10064d48:	d403      	bmi.n	10064d52 <aci_gap_pairing_complete_event_push_noinline+0x1e>
10064d4a:	2600      	movs	r6, #0
10064d4c:	e028      	b.n	10064da0 <aci_gap_pairing_complete_event_push_noinline+0x6c>
10064d4e:	2686      	movs	r6, #134	@ 0x86
10064d50:	e026      	b.n	10064da0 <aci_gap_pairing_complete_event_push_noinline+0x6c>
10064d52:	461f      	mov	r7, r3
10064d54:	4616      	mov	r6, r2
10064d56:	4814      	ldr	r0, [pc, #80]	@ (10064da8 <__arm_cp.1_1>)
10064d58:	6800      	ldr	r0, [r0, #0]
10064d5a:	0761      	lsls	r1, r4, #29
10064d5c:	0ec9      	lsrs	r1, r1, #27
10064d5e:	1840      	adds	r0, r0, r1
10064d60:	6900      	ldr	r0, [r0, #16]
10064d62:	2245      	movs	r2, #69	@ 0x45
10064d64:	2303      	movs	r3, #3
10064d66:	4621      	mov	r1, r4
10064d68:	f7f1 f830 	bl	10055dcc <aci_event_fifo_push_header>
10064d6c:	2800      	cmp	r0, #0
10064d6e:	d016      	beq.n	10064d9e <aci_gap_pairing_complete_event_push_noinline+0x6a>
10064d70:	4601      	mov	r1, r0
10064d72:	7285      	strb	r5, [r0, #10]
10064d74:	2004      	movs	r0, #4
10064d76:	7248      	strb	r0, [r1, #9]
10064d78:	2001      	movs	r0, #1
10064d7a:	7208      	strb	r0, [r1, #8]
10064d7c:	4632      	mov	r2, r6
10064d7e:	2600      	movs	r6, #0
10064d80:	71ce      	strb	r6, [r1, #7]
10064d82:	2006      	movs	r0, #6
10064d84:	7188      	strb	r0, [r1, #6]
10064d86:	734f      	strb	r7, [r1, #13]
10064d88:	730a      	strb	r2, [r1, #12]
10064d8a:	20ff      	movs	r0, #255	@ 0xff
10064d8c:	7148      	strb	r0, [r1, #5]
10064d8e:	2082      	movs	r0, #130	@ 0x82
10064d90:	7108      	strb	r0, [r1, #4]
10064d92:	0a28      	lsrs	r0, r5, #8
10064d94:	72c8      	strb	r0, [r1, #11]
10064d96:	4620      	mov	r0, r4
10064d98:	f7f1 f8b5 	bl	10055f06 <aci_event_fifo_push>
10064d9c:	e000      	b.n	10064da0 <aci_gap_pairing_complete_event_push_noinline+0x6c>
10064d9e:	2607      	movs	r6, #7
10064da0:	4630      	mov	r0, r6
10064da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10064da4 <__arm_cp.1_0>:
10064da4:	20002958 	.word	0x20002958

10064da8 <__arm_cp.1_1>:
10064da8:	20002908 	.word	0x20002908

10064dac <GAT_att_clt_init>:
10064dac:	b580      	push	{r7, lr}
10064dae:	f000 fd35 	bl	1006581c <GAT_clt_init>
10064db2:	bd80      	pop	{r7, pc}

10064db4 <GAT_att_clt_rcv>:
10064db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064db6:	4604      	mov	r4, r0
10064db8:	8805      	ldrh	r5, [r0, #0]
10064dba:	f7f5 fb6a 	bl	1005a492 <L2C_get_cid_from_basic_packet_header>
10064dbe:	4601      	mov	r1, r0
10064dc0:	4628      	mov	r0, r5
10064dc2:	f7f2 fcd9 	bl	10057778 <GAT_att_cmn_get_channel_descr_p>
10064dc6:	4605      	mov	r5, r0
10064dc8:	4620      	mov	r0, r4
10064dca:	f000 f8d7 	bl	10064f7c <GAT_att_cmn_get_opcode>
10064dce:	281d      	cmp	r0, #29
10064dd0:	d003      	beq.n	10064dda <GAT_att_clt_rcv+0x26>
10064dd2:	2823      	cmp	r0, #35	@ 0x23
10064dd4:	d001      	beq.n	10064dda <GAT_att_clt_rcv+0x26>
10064dd6:	281b      	cmp	r0, #27
10064dd8:	d10e      	bne.n	10064df8 <GAT_att_clt_rcv+0x44>
10064dda:	8861      	ldrh	r1, [r4, #2]
10064ddc:	88ea      	ldrh	r2, [r5, #6]
10064dde:	4291      	cmp	r1, r2
10064de0:	d805      	bhi.n	10064dee <GAT_att_clt_rcv+0x3a>
10064de2:	2903      	cmp	r1, #3
10064de4:	d303      	bcc.n	10064dee <GAT_att_clt_rcv+0x3a>
10064de6:	2823      	cmp	r0, #35	@ 0x23
10064de8:	d167      	bne.n	10064eba <GAT_att_clt_rcv+0x106>
10064dea:	2904      	cmp	r1, #4
10064dec:	d865      	bhi.n	10064eba <GAT_att_clt_rcv+0x106>
10064dee:	4620      	mov	r0, r4
10064df0:	f7f0 fe38 	bl	10055a64 <ACL_pkt_release>
10064df4:	2000      	movs	r0, #0
10064df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064df8:	4620      	mov	r0, r4
10064dfa:	f000 f8bf 	bl	10064f7c <GAT_att_cmn_get_opcode>
10064dfe:	88a9      	ldrh	r1, [r5, #4]
10064e00:	06ca      	lsls	r2, r1, #27
10064e02:	d56e      	bpl.n	10064ee2 <GAT_att_clt_rcv+0x12e>
10064e04:	2801      	cmp	r0, #1
10064e06:	d002      	beq.n	10064e0e <GAT_att_clt_rcv+0x5a>
10064e08:	78aa      	ldrb	r2, [r5, #2]
10064e0a:	4290      	cmp	r0, r2
10064e0c:	d169      	bne.n	10064ee2 <GAT_att_clt_rcv+0x12e>
10064e0e:	2010      	movs	r0, #16
10064e10:	4381      	bics	r1, r0
10064e12:	80a9      	strh	r1, [r5, #4]
10064e14:	896a      	ldrh	r2, [r5, #10]
10064e16:	8929      	ldrh	r1, [r5, #8]
10064e18:	2603      	movs	r6, #3
10064e1a:	4630      	mov	r0, r6
10064e1c:	f7f2 fd1e 	bl	1005785c <GAT_att_cmn_stop_timer>
10064e20:	8861      	ldrh	r1, [r4, #2]
10064e22:	88e8      	ldrh	r0, [r5, #6]
10064e24:	9100      	str	r1, [sp, #0]
10064e26:	4281      	cmp	r1, r0
10064e28:	d900      	bls.n	10064e2c <GAT_att_clt_rcv+0x78>
10064e2a:	e09a      	b.n	10064f62 <GAT_att_clt_rcv+0x1ae>
10064e2c:	4620      	mov	r0, r4
10064e2e:	f000 f8a5 	bl	10064f7c <GAT_att_cmn_get_opcode>
10064e32:	1e42      	subs	r2, r0, #1
10064e34:	2101      	movs	r1, #1
10064e36:	41ca      	rors	r2, r1
10064e38:	2300      	movs	r3, #0
10064e3a:	2a10      	cmp	r2, #16
10064e3c:	d900      	bls.n	10064e40 <GAT_att_clt_rcv+0x8c>
10064e3e:	e088      	b.n	10064f52 <GAT_att_clt_rcv+0x19e>
10064e40:	0092      	lsls	r2, r2, #2
10064e42:	461f      	mov	r7, r3
10064e44:	a301      	add	r3, pc, #4	@ (adr r3, 10064e4c <GAT_att_clt_rcv+0x98>)
10064e46:	589a      	ldr	r2, [r3, r2]
10064e48:	463b      	mov	r3, r7
10064e4a:	4697      	mov	pc, r2
10064e4c:	10064f03 	.word	0x10064f03
10064e50:	10064f07 	.word	0x10064f07
10064e54:	10064f13 	.word	0x10064f13
10064e58:	10064f31 	.word	0x10064f31
10064e5c:	10064e91 	.word	0x10064e91
10064e60:	10064f59 	.word	0x10064f59
10064e64:	10064f59 	.word	0x10064f59
10064e68:	10064f59 	.word	0x10064f59
10064e6c:	10064e91 	.word	0x10064e91
10064e70:	10064eff 	.word	0x10064eff
10064e74:	10064f53 	.word	0x10064f53
10064e78:	10064f0b 	.word	0x10064f0b
10064e7c:	10064eff 	.word	0x10064eff
10064e80:	10064f53 	.word	0x10064f53
10064e84:	10064f53 	.word	0x10064f53
10064e88:	10064f53 	.word	0x10064f53
10064e8c:	10064f59 	.word	0x10064f59
10064e90:	2809      	cmp	r0, #9
10064e92:	d102      	bne.n	10064e9a <GAT_att_clt_rcv+0xe6>
10064e94:	9900      	ldr	r1, [sp, #0]
10064e96:	2904      	cmp	r1, #4
10064e98:	d35b      	bcc.n	10064f52 <GAT_att_clt_rcv+0x19e>
10064e9a:	2811      	cmp	r0, #17
10064e9c:	d102      	bne.n	10064ea4 <GAT_att_clt_rcv+0xf0>
10064e9e:	9800      	ldr	r0, [sp, #0]
10064ea0:	2806      	cmp	r0, #6
10064ea2:	d356      	bcc.n	10064f52 <GAT_att_clt_rcv+0x19e>
10064ea4:	89a0      	ldrh	r0, [r4, #12]
10064ea6:	1c40      	adds	r0, r0, #1
10064ea8:	b281      	uxth	r1, r0
10064eaa:	4620      	mov	r0, r4
10064eac:	f000 fa47 	bl	1006533e <ACL_pkt_read_8b>
10064eb0:	463b      	mov	r3, r7
10064eb2:	2800      	cmp	r0, #0
10064eb4:	d04d      	beq.n	10064f52 <GAT_att_clt_rcv+0x19e>
10064eb6:	4601      	mov	r1, r0
10064eb8:	e043      	b.n	10064f42 <GAT_att_clt_rcv+0x18e>
10064eba:	281d      	cmp	r0, #29
10064ebc:	d10d      	bne.n	10064eda <GAT_att_clt_rcv+0x126>
10064ebe:	88a8      	ldrh	r0, [r5, #4]
10064ec0:	0680      	lsls	r0, r0, #26
10064ec2:	d412      	bmi.n	10064eea <GAT_att_clt_rcv+0x136>
10064ec4:	896a      	ldrh	r2, [r5, #10]
10064ec6:	8929      	ldrh	r1, [r5, #8]
10064ec8:	2002      	movs	r0, #2
10064eca:	f7f2 fd11 	bl	100578f0 <GAT_att_cmn_start_timer>
10064ece:	2800      	cmp	r0, #0
10064ed0:	d14c      	bne.n	10064f6c <GAT_att_clt_rcv+0x1b8>
10064ed2:	88a8      	ldrh	r0, [r5, #4]
10064ed4:	2120      	movs	r1, #32
10064ed6:	4301      	orrs	r1, r0
10064ed8:	80a9      	strh	r1, [r5, #4]
10064eda:	4620      	mov	r0, r4
10064edc:	f000 ffb7 	bl	10065e4e <GAT_clt_rcv_srv_initiated>
10064ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064ee2:	4620      	mov	r0, r4
10064ee4:	f000 fab7 	bl	10065456 <GAT_att_clt_unexpect_rx>
10064ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064eea:	3508      	adds	r5, #8
10064eec:	2042      	movs	r0, #66	@ 0x42
10064eee:	2103      	movs	r1, #3
10064ef0:	2202      	movs	r2, #2
10064ef2:	462b      	mov	r3, r5
10064ef4:	f7ff feaa 	bl	10064c4c <aci_hal_fw_error_event_push_noinline>
10064ef8:	2800      	cmp	r0, #0
10064efa:	d137      	bne.n	10064f6c <GAT_att_clt_rcv+0x1b8>
10064efc:	e777      	b.n	10064dee <GAT_att_clt_rcv+0x3a>
10064efe:	460b      	mov	r3, r1
10064f00:	e027      	b.n	10064f52 <GAT_att_clt_rcv+0x19e>
10064f02:	2305      	movs	r3, #5
10064f04:	e025      	b.n	10064f52 <GAT_att_clt_rcv+0x19e>
10064f06:	4633      	mov	r3, r6
10064f08:	e023      	b.n	10064f52 <GAT_att_clt_rcv+0x19e>
10064f0a:	9b00      	ldr	r3, [sp, #0]
10064f0c:	2b04      	cmp	r3, #4
10064f0e:	d91f      	bls.n	10064f50 <GAT_att_clt_rcv+0x19c>
10064f10:	e01f      	b.n	10064f52 <GAT_att_clt_rcv+0x19e>
10064f12:	9800      	ldr	r0, [sp, #0]
10064f14:	2806      	cmp	r0, #6
10064f16:	d31c      	bcc.n	10064f52 <GAT_att_clt_rcv+0x19e>
10064f18:	89a0      	ldrh	r0, [r4, #12]
10064f1a:	1c40      	adds	r0, r0, #1
10064f1c:	b281      	uxth	r1, r0
10064f1e:	4620      	mov	r0, r4
10064f20:	f000 fa0d 	bl	1006533e <ACL_pkt_read_8b>
10064f24:	2801      	cmp	r0, #1
10064f26:	d00b      	beq.n	10064f40 <GAT_att_clt_rcv+0x18c>
10064f28:	2802      	cmp	r0, #2
10064f2a:	d11a      	bne.n	10064f62 <GAT_att_clt_rcv+0x1ae>
10064f2c:	2112      	movs	r1, #18
10064f2e:	e008      	b.n	10064f42 <GAT_att_clt_rcv+0x18e>
10064f30:	9800      	ldr	r0, [sp, #0]
10064f32:	2802      	cmp	r0, #2
10064f34:	d30d      	bcc.n	10064f52 <GAT_att_clt_rcv+0x19e>
10064f36:	9b00      	ldr	r3, [sp, #0]
10064f38:	1e58      	subs	r0, r3, #1
10064f3a:	0780      	lsls	r0, r0, #30
10064f3c:	d108      	bne.n	10064f50 <GAT_att_clt_rcv+0x19c>
10064f3e:	e008      	b.n	10064f52 <GAT_att_clt_rcv+0x19e>
10064f40:	2104      	movs	r1, #4
10064f42:	9e00      	ldr	r6, [sp, #0]
10064f44:	1eb0      	subs	r0, r6, #2
10064f46:	f7db fa01 	bl	1004034c <__aeabi_uidivmod>
10064f4a:	2900      	cmp	r1, #0
10064f4c:	4633      	mov	r3, r6
10064f4e:	d000      	beq.n	10064f52 <GAT_att_clt_rcv+0x19e>
10064f50:	2300      	movs	r3, #0
10064f52:	9800      	ldr	r0, [sp, #0]
10064f54:	4298      	cmp	r0, r3
10064f56:	d104      	bne.n	10064f62 <GAT_att_clt_rcv+0x1ae>
10064f58:	4807      	ldr	r0, [pc, #28]	@ (10064f78 <__arm_cp.1_0>)
10064f5a:	6801      	ldr	r1, [r0, #0]
10064f5c:	4620      	mov	r0, r4
10064f5e:	4788      	blx	r1
10064f60:	e002      	b.n	10064f68 <GAT_att_clt_rcv+0x1b4>
10064f62:	4620      	mov	r0, r4
10064f64:	f000 ff5e 	bl	10065e24 <GAT_clt_rcv_corrupted>
10064f68:	2884      	cmp	r0, #132	@ 0x84
10064f6a:	d101      	bne.n	10064f70 <GAT_att_clt_rcv+0x1bc>
10064f6c:	2084      	movs	r0, #132	@ 0x84
10064f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064f70:	2000      	movs	r0, #0
10064f72:	70a8      	strb	r0, [r5, #2]
10064f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064f76:	46c0      	nop			@ (mov r8, r8)

10064f78 <__arm_cp.1_0>:
10064f78:	20002d98 	.word	0x20002d98

10064f7c <GAT_att_cmn_get_opcode>:
10064f7c:	b580      	push	{r7, lr}
10064f7e:	8981      	ldrh	r1, [r0, #12]
10064f80:	f000 f9dd 	bl	1006533e <ACL_pkt_read_8b>
10064f84:	bd80      	pop	{r7, pc}

10064f86 <GAT_att_clt_connection>:
10064f86:	b580      	push	{r7, lr}
10064f88:	f000 fc70 	bl	1006586c <GAT_clt_connection>
10064f8c:	bd80      	pop	{r7, pc}

10064f8e <GAT_att_clt_bearer_close>:
10064f8e:	b580      	push	{r7, lr}
10064f90:	f000 fc6e 	bl	10065870 <GAT_clt_bearer_close>
10064f94:	bd80      	pop	{r7, pc}
	...

10064f98 <GAT_att_clt_tx>:
10064f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064f9a:	4605      	mov	r5, r0
10064f9c:	8881      	ldrh	r1, [r0, #4]
10064f9e:	8840      	ldrh	r0, [r0, #2]
10064fa0:	f7f2 fbea 	bl	10057778 <GAT_att_cmn_get_channel_descr_p>
10064fa4:	2800      	cmp	r0, #0
10064fa6:	d008      	beq.n	10064fba <GAT_att_clt_tx+0x22>
10064fa8:	4604      	mov	r4, r0
10064faa:	7829      	ldrb	r1, [r5, #0]
10064fac:	291e      	cmp	r1, #30
10064fae:	d106      	bne.n	10064fbe <GAT_att_clt_tx+0x26>
10064fb0:	88a0      	ldrh	r0, [r4, #4]
10064fb2:	0680      	lsls	r0, r0, #26
10064fb4:	d439      	bmi.n	1006502a <GAT_att_clt_tx+0x92>
10064fb6:	260c      	movs	r6, #12
10064fb8:	e193      	b.n	100652e2 <GAT_att_clt_tx+0x34a>
10064fba:	2612      	movs	r6, #18
10064fbc:	e191      	b.n	100652e2 <GAT_att_clt_tx+0x34a>
10064fbe:	0648      	lsls	r0, r1, #25
10064fc0:	d406      	bmi.n	10064fd0 <GAT_att_clt_tx+0x38>
10064fc2:	48ca      	ldr	r0, [pc, #808]	@ (100652ec <__arm_cp.5_0>)
10064fc4:	4aca      	ldr	r2, [pc, #808]	@ (100652f0 <__arm_cp.5_1>)
10064fc6:	6002      	str	r2, [r0, #0]
10064fc8:	88a0      	ldrh	r0, [r4, #4]
10064fca:	06c0      	lsls	r0, r0, #27
10064fcc:	d500      	bpl.n	10064fd0 <GAT_att_clt_tx+0x38>
10064fce:	e16d      	b.n	100652ac <GAT_att_clt_tx+0x314>
10064fd0:	88e0      	ldrh	r0, [r4, #6]
10064fd2:	1e8a      	subs	r2, r1, #2
10064fd4:	2686      	movs	r6, #134	@ 0x86
10064fd6:	2a1e      	cmp	r2, #30
10064fd8:	d900      	bls.n	10064fdc <GAT_att_clt_tx+0x44>
10064fda:	e091      	b.n	10065100 <GAT_att_clt_tx+0x168>
10064fdc:	2703      	movs	r7, #3
10064fde:	0052      	lsls	r2, r2, #1
10064fe0:	447a      	add	r2, pc
10064fe2:	8892      	ldrh	r2, [r2, #4]
10064fe4:	0052      	lsls	r2, r2, #1
10064fe6:	4497      	add	pc, r2
10064fe8:	017c0022 	.word	0x017c0022
10064fec:	017c001e 	.word	0x017c001e
10064ff0:	017c009f 	.word	0x017c009f
10064ff4:	017c00a2 	.word	0x017c00a2
10064ff8:	017c0022 	.word	0x017c0022
10064ffc:	017c001e 	.word	0x017c001e
10065000:	017c0094 	.word	0x017c0094
10065004:	017c012d 	.word	0x017c012d
10065008:	017c0090 	.word	0x017c0090
1006500c:	017c017c 	.word	0x017c017c
10065010:	017c00a9 	.word	0x017c00a9
10065014:	017c00ac 	.word	0x017c00ac
10065018:	017c017c 	.word	0x017c017c
1006501c:	017c017c 	.word	0x017c017c
10065020:	017c0021 	.word	0x017c0021
10065024:	0094      	.short	0x0094
10065026:	2705      	movs	r7, #5
10065028:	e001      	b.n	1006502e <GAT_att_clt_tx+0x96>
1006502a:	88e0      	ldrh	r0, [r4, #6]
1006502c:	2701      	movs	r7, #1
1006502e:	b2b9      	uxth	r1, r7
10065030:	4281      	cmp	r1, r0
10065032:	d300      	bcc.n	10065036 <GAT_att_clt_tx+0x9e>
10065034:	4607      	mov	r7, r0
10065036:	9700      	str	r7, [sp, #0]
10065038:	b2bf      	uxth	r7, r7
1006503a:	4620      	mov	r0, r4
1006503c:	4639      	mov	r1, r7
1006503e:	f7f2 fc99 	bl	10057974 <GAT_att_cmn_get_pckt>
10065042:	2800      	cmp	r0, #0
10065044:	d02f      	beq.n	100650a6 <GAT_att_clt_tx+0x10e>
10065046:	4606      	mov	r6, r0
10065048:	782a      	ldrb	r2, [r5, #0]
1006504a:	8981      	ldrh	r1, [r0, #12]
1006504c:	f000 f954 	bl	100652f8 <ACL_pkt_write_8b>
10065050:	7828      	ldrb	r0, [r5, #0]
10065052:	1e81      	subs	r1, r0, #2
10065054:	2916      	cmp	r1, #22
10065056:	d82d      	bhi.n	100650b4 <GAT_att_clt_tx+0x11c>
10065058:	0049      	lsls	r1, r1, #1
1006505a:	46c0      	nop			@ (mov r8, r8)
1006505c:	4479      	add	r1, pc
1006505e:	8889      	ldrh	r1, [r1, #4]
10065060:	0049      	lsls	r1, r1, #1
10065062:	448f      	add	pc, r1
10065064:	010d0016 	.word	0x010d0016
10065068:	010d0070 	.word	0x010d0070
1006506c:	010d0077 	.word	0x010d0077
10065070:	010d0093 	.word	0x010d0093
10065074:	010d00a1 	.word	0x010d00a1
10065078:	010d00aa 	.word	0x010d00aa
1006507c:	010d00ba 	.word	0x010d00ba
10065080:	010d00c0 	.word	0x010d00c0
10065084:	010d002f 	.word	0x010d002f
10065088:	010d010d 	.word	0x010d010d
1006508c:	010d00ce 	.word	0x010d00ce
10065090:	00e6      	.short	0x00e6
10065092:	4898      	ldr	r0, [pc, #608]	@ (100652f4 <__arm_cp.5_2>)
10065094:	8a02      	ldrh	r2, [r0, #16]
10065096:	89b0      	ldrh	r0, [r6, #12]
10065098:	1c40      	adds	r0, r0, #1
1006509a:	b281      	uxth	r1, r0
1006509c:	4630      	mov	r0, r6
1006509e:	f7f0 fd16 	bl	10055ace <ACL_pkt_write_16b>
100650a2:	2003      	movs	r0, #3
100650a4:	e0eb      	b.n	1006527e <GAT_att_clt_tx+0x2e6>
100650a6:	2008      	movs	r0, #8
100650a8:	f7fe f9da 	bl	10063460 <tsk_notify_idx>
100650ac:	f7ed fb5b 	bl	10052766 <BLE_STACK_ProcessRequest>
100650b0:	2688      	movs	r6, #136	@ 0x88
100650b2:	e116      	b.n	100652e2 <GAT_att_clt_tx+0x34a>
100650b4:	2820      	cmp	r0, #32
100650b6:	d100      	bne.n	100650ba <GAT_att_clt_tx+0x122>
100650b8:	e0ca      	b.n	10065250 <GAT_att_clt_tx+0x2b8>
100650ba:	2852      	cmp	r0, #82	@ 0x52
100650bc:	d002      	beq.n	100650c4 <GAT_att_clt_tx+0x12c>
100650be:	28d2      	cmp	r0, #210	@ 0xd2
100650c0:	d000      	beq.n	100650c4 <GAT_att_clt_tx+0x12c>
100650c2:	e0dd      	b.n	10065280 <GAT_att_clt_tx+0x2e8>
100650c4:	892a      	ldrh	r2, [r5, #8]
100650c6:	89b0      	ldrh	r0, [r6, #12]
100650c8:	1c40      	adds	r0, r0, #1
100650ca:	b281      	uxth	r1, r0
100650cc:	4630      	mov	r0, r6
100650ce:	f7f0 fcfe 	bl	10055ace <ACL_pkt_write_16b>
100650d2:	68eb      	ldr	r3, [r5, #12]
100650d4:	896a      	ldrh	r2, [r5, #10]
100650d6:	89b0      	ldrh	r0, [r6, #12]
100650d8:	1cc0      	adds	r0, r0, #3
100650da:	b281      	uxth	r1, r0
100650dc:	4630      	mov	r0, r6
100650de:	f7f0 fcff 	bl	10055ae0 <ACL_pkt_write>
100650e2:	7828      	ldrb	r0, [r5, #0]
100650e4:	2812      	cmp	r0, #18
100650e6:	d100      	bne.n	100650ea <GAT_att_clt_tx+0x152>
100650e8:	e0b8      	b.n	1006525c <GAT_att_clt_tx+0x2c4>
100650ea:	28d2      	cmp	r0, #210	@ 0xd2
100650ec:	d000      	beq.n	100650f0 <GAT_att_clt_tx+0x158>
100650ee:	e0c7      	b.n	10065280 <GAT_att_clt_tx+0x2e8>
100650f0:	9800      	ldr	r0, [sp, #0]
100650f2:	380c      	subs	r0, #12
100650f4:	8070      	strh	r0, [r6, #2]
100650f6:	8920      	ldrh	r0, [r4, #8]
100650f8:	4631      	mov	r1, r6
100650fa:	f7fe f86c 	bl	100631d6 <smp_sap_sm2_packet_data_signing_compute>
100650fe:	e0bf      	b.n	10065280 <GAT_att_clt_tx+0x2e8>
10065100:	2952      	cmp	r1, #82	@ 0x52
10065102:	d002      	beq.n	1006510a <GAT_att_clt_tx+0x172>
10065104:	29d2      	cmp	r1, #210	@ 0xd2
10065106:	d000      	beq.n	1006510a <GAT_att_clt_tx+0x172>
10065108:	e0eb      	b.n	100652e2 <GAT_att_clt_tx+0x34a>
1006510a:	29d2      	cmp	r1, #210	@ 0xd2
1006510c:	d008      	beq.n	10065120 <GAT_att_clt_tx+0x188>
1006510e:	2103      	movs	r1, #3
10065110:	e007      	b.n	10065122 <GAT_att_clt_tx+0x18a>
10065112:	7a29      	ldrb	r1, [r5, #8]
10065114:	0049      	lsls	r1, r1, #1
10065116:	1c4f      	adds	r7, r1, #1
10065118:	4287      	cmp	r7, r0
1006511a:	d800      	bhi.n	1006511e <GAT_att_clt_tx+0x186>
1006511c:	e787      	b.n	1006502e <GAT_att_clt_tx+0x96>
1006511e:	e0e0      	b.n	100652e2 <GAT_att_clt_tx+0x34a>
10065120:	210f      	movs	r1, #15
10065122:	896a      	ldrh	r2, [r5, #10]
10065124:	1857      	adds	r7, r2, r1
10065126:	e782      	b.n	1006502e <GAT_att_clt_tx+0x96>
10065128:	89e9      	ldrh	r1, [r5, #14]
1006512a:	1dcf      	adds	r7, r1, #7
1006512c:	e77f      	b.n	1006502e <GAT_att_clt_tx+0x96>
1006512e:	68e9      	ldr	r1, [r5, #12]
10065130:	7c09      	ldrb	r1, [r1, #16]
10065132:	2980      	cmp	r1, #128	@ 0x80
10065134:	d000      	beq.n	10065138 <GAT_att_clt_tx+0x1a0>
10065136:	e089      	b.n	1006524c <GAT_att_clt_tx+0x2b4>
10065138:	2715      	movs	r7, #21
1006513a:	e778      	b.n	1006502e <GAT_att_clt_tx+0x96>
1006513c:	89a9      	ldrh	r1, [r5, #12]
1006513e:	1d4f      	adds	r7, r1, #5
10065140:	e775      	b.n	1006502e <GAT_att_clt_tx+0x96>
10065142:	2702      	movs	r7, #2
10065144:	e773      	b.n	1006502e <GAT_att_clt_tx+0x96>
10065146:	896a      	ldrh	r2, [r5, #10]
10065148:	8929      	ldrh	r1, [r5, #8]
1006514a:	4630      	mov	r0, r6
1006514c:	f000 f9a2 	bl	10065494 <GAT_att_clt_fill_handle_range>
10065150:	2005      	movs	r0, #5
10065152:	e094      	b.n	1006527e <GAT_att_clt_tx+0x2e6>
10065154:	896a      	ldrh	r2, [r5, #10]
10065156:	8929      	ldrh	r1, [r5, #8]
10065158:	4630      	mov	r0, r6
1006515a:	f000 f99b 	bl	10065494 <GAT_att_clt_fill_handle_range>
1006515e:	89aa      	ldrh	r2, [r5, #12]
10065160:	89b0      	ldrh	r0, [r6, #12]
10065162:	1d40      	adds	r0, r0, #5
10065164:	b281      	uxth	r1, r0
10065166:	4630      	mov	r0, r6
10065168:	f7f0 fcb1 	bl	10055ace <ACL_pkt_write_16b>
1006516c:	89e8      	ldrh	r0, [r5, #14]
1006516e:	1dc0      	adds	r0, r0, #7
10065170:	42b8      	cmp	r0, r7
10065172:	d800      	bhi.n	10065176 <GAT_att_clt_tx+0x1de>
10065174:	4607      	mov	r7, r0
10065176:	1ff8      	subs	r0, r7, #7
10065178:	b282      	uxth	r2, r0
1006517a:	692b      	ldr	r3, [r5, #16]
1006517c:	89b0      	ldrh	r0, [r6, #12]
1006517e:	1dc0      	adds	r0, r0, #7
10065180:	b281      	uxth	r1, r0
10065182:	4630      	mov	r0, r6
10065184:	f7f0 fcac 	bl	10055ae0 <ACL_pkt_write>
10065188:	2007      	movs	r0, #7
1006518a:	e078      	b.n	1006527e <GAT_att_clt_tx+0x2e6>
1006518c:	896a      	ldrh	r2, [r5, #10]
1006518e:	8929      	ldrh	r1, [r5, #8]
10065190:	4630      	mov	r0, r6
10065192:	f000 f97f 	bl	10065494 <GAT_att_clt_fill_handle_range>
10065196:	89b0      	ldrh	r0, [r6, #12]
10065198:	1d40      	adds	r0, r0, #5
1006519a:	68eb      	ldr	r3, [r5, #12]
1006519c:	7c19      	ldrb	r1, [r3, #16]
1006519e:	2980      	cmp	r1, #128	@ 0x80
100651a0:	d15e      	bne.n	10065260 <GAT_att_clt_tx+0x2c8>
100651a2:	b281      	uxth	r1, r0
100651a4:	2210      	movs	r2, #16
100651a6:	e05e      	b.n	10065266 <GAT_att_clt_tx+0x2ce>
100651a8:	892a      	ldrh	r2, [r5, #8]
100651aa:	89b0      	ldrh	r0, [r6, #12]
100651ac:	1c40      	adds	r0, r0, #1
100651ae:	b281      	uxth	r1, r0
100651b0:	4630      	mov	r0, r6
100651b2:	f7f0 fc8c 	bl	10055ace <ACL_pkt_write_16b>
100651b6:	200b      	movs	r0, #11
100651b8:	e061      	b.n	1006527e <GAT_att_clt_tx+0x2e6>
100651ba:	892a      	ldrh	r2, [r5, #8]
100651bc:	89b0      	ldrh	r0, [r6, #12]
100651be:	1c40      	adds	r0, r0, #1
100651c0:	b281      	uxth	r1, r0
100651c2:	4630      	mov	r0, r6
100651c4:	f7f0 fc83 	bl	10055ace <ACL_pkt_write_16b>
100651c8:	896a      	ldrh	r2, [r5, #10]
100651ca:	89b0      	ldrh	r0, [r6, #12]
100651cc:	1cc0      	adds	r0, r0, #3
100651ce:	b281      	uxth	r1, r0
100651d0:	4630      	mov	r0, r6
100651d2:	f7f0 fc7c 	bl	10055ace <ACL_pkt_write_16b>
100651d6:	200d      	movs	r0, #13
100651d8:	e051      	b.n	1006527e <GAT_att_clt_tx+0x2e6>
100651da:	4628      	mov	r0, r5
100651dc:	4631      	mov	r1, r6
100651de:	f000 f94d 	bl	1006547c <GAT_att_clt_fill_read_multi_req>
100651e2:	200f      	movs	r0, #15
100651e4:	e04b      	b.n	1006527e <GAT_att_clt_tx+0x2e6>
100651e6:	896a      	ldrh	r2, [r5, #10]
100651e8:	8929      	ldrh	r1, [r5, #8]
100651ea:	4630      	mov	r0, r6
100651ec:	f000 f952 	bl	10065494 <GAT_att_clt_fill_handle_range>
100651f0:	89b0      	ldrh	r0, [r6, #12]
100651f2:	1d40      	adds	r0, r0, #5
100651f4:	68eb      	ldr	r3, [r5, #12]
100651f6:	7c19      	ldrb	r1, [r3, #16]
100651f8:	2980      	cmp	r1, #128	@ 0x80
100651fa:	d139      	bne.n	10065270 <GAT_att_clt_tx+0x2d8>
100651fc:	b281      	uxth	r1, r0
100651fe:	2210      	movs	r2, #16
10065200:	e039      	b.n	10065276 <GAT_att_clt_tx+0x2de>
10065202:	892a      	ldrh	r2, [r5, #8]
10065204:	89b0      	ldrh	r0, [r6, #12]
10065206:	1c40      	adds	r0, r0, #1
10065208:	b281      	uxth	r1, r0
1006520a:	4630      	mov	r0, r6
1006520c:	f7f0 fc5f 	bl	10055ace <ACL_pkt_write_16b>
10065210:	896a      	ldrh	r2, [r5, #10]
10065212:	89b0      	ldrh	r0, [r6, #12]
10065214:	1cc0      	adds	r0, r0, #3
10065216:	b281      	uxth	r1, r0
10065218:	4630      	mov	r0, r6
1006521a:	f7f0 fc58 	bl	10055ace <ACL_pkt_write_16b>
1006521e:	692b      	ldr	r3, [r5, #16]
10065220:	89aa      	ldrh	r2, [r5, #12]
10065222:	89b0      	ldrh	r0, [r6, #12]
10065224:	1d40      	adds	r0, r0, #5
10065226:	b281      	uxth	r1, r0
10065228:	4630      	mov	r0, r6
1006522a:	f7f0 fc59 	bl	10055ae0 <ACL_pkt_write>
1006522e:	2017      	movs	r0, #23
10065230:	e025      	b.n	1006527e <GAT_att_clt_tx+0x2e6>
10065232:	7a2a      	ldrb	r2, [r5, #8]
10065234:	89b0      	ldrh	r0, [r6, #12]
10065236:	1c40      	adds	r0, r0, #1
10065238:	b281      	uxth	r1, r0
1006523a:	4630      	mov	r0, r6
1006523c:	f000 f85c 	bl	100652f8 <ACL_pkt_write_8b>
10065240:	2019      	movs	r0, #25
10065242:	e01c      	b.n	1006527e <GAT_att_clt_tx+0x2e6>
10065244:	68e9      	ldr	r1, [r5, #12]
10065246:	7c09      	ldrb	r1, [r1, #16]
10065248:	2980      	cmp	r1, #128	@ 0x80
1006524a:	d04c      	beq.n	100652e6 <GAT_att_clt_tx+0x34e>
1006524c:	2707      	movs	r7, #7
1006524e:	e6ee      	b.n	1006502e <GAT_att_clt_tx+0x96>
10065250:	4628      	mov	r0, r5
10065252:	4631      	mov	r1, r6
10065254:	f000 f912 	bl	1006547c <GAT_att_clt_fill_read_multi_req>
10065258:	2021      	movs	r0, #33	@ 0x21
1006525a:	e010      	b.n	1006527e <GAT_att_clt_tx+0x2e6>
1006525c:	2013      	movs	r0, #19
1006525e:	e00e      	b.n	1006527e <GAT_att_clt_tx+0x2e6>
10065260:	b281      	uxth	r1, r0
10065262:	330c      	adds	r3, #12
10065264:	2202      	movs	r2, #2
10065266:	4630      	mov	r0, r6
10065268:	f7f0 fc3a 	bl	10055ae0 <ACL_pkt_write>
1006526c:	2009      	movs	r0, #9
1006526e:	e006      	b.n	1006527e <GAT_att_clt_tx+0x2e6>
10065270:	b281      	uxth	r1, r0
10065272:	330c      	adds	r3, #12
10065274:	2202      	movs	r2, #2
10065276:	4630      	mov	r0, r6
10065278:	f7f0 fc32 	bl	10055ae0 <ACL_pkt_write>
1006527c:	2011      	movs	r0, #17
1006527e:	70a0      	strb	r0, [r4, #2]
10065280:	9800      	ldr	r0, [sp, #0]
10065282:	8070      	strh	r0, [r6, #2]
10065284:	782a      	ldrb	r2, [r5, #0]
10065286:	89b1      	ldrh	r1, [r6, #12]
10065288:	4630      	mov	r0, r6
1006528a:	f000 f835 	bl	100652f8 <ACL_pkt_write_8b>
1006528e:	7828      	ldrb	r0, [r5, #0]
10065290:	0641      	lsls	r1, r0, #25
10065292:	d411      	bmi.n	100652b8 <GAT_att_clt_tx+0x320>
10065294:	281e      	cmp	r0, #30
10065296:	d00f      	beq.n	100652b8 <GAT_att_clt_tx+0x320>
10065298:	8962      	ldrh	r2, [r4, #10]
1006529a:	8921      	ldrh	r1, [r4, #8]
1006529c:	2003      	movs	r0, #3
1006529e:	f7f2 fb27 	bl	100578f0 <GAT_att_cmn_start_timer>
100652a2:	2800      	cmp	r0, #0
100652a4:	d004      	beq.n	100652b0 <GAT_att_clt_tx+0x318>
100652a6:	4630      	mov	r0, r6
100652a8:	f7f0 fbdc 	bl	10055a64 <ACL_pkt_release>
100652ac:	2684      	movs	r6, #132	@ 0x84
100652ae:	e018      	b.n	100652e2 <GAT_att_clt_tx+0x34a>
100652b0:	88a0      	ldrh	r0, [r4, #4]
100652b2:	2110      	movs	r1, #16
100652b4:	4301      	orrs	r1, r0
100652b6:	80a1      	strh	r1, [r4, #4]
100652b8:	8960      	ldrh	r0, [r4, #10]
100652ba:	4631      	mov	r1, r6
100652bc:	f7f2 fade 	bl	1005787c <GAT_att_cmn_send>
100652c0:	2800      	cmp	r0, #0
100652c2:	d001      	beq.n	100652c8 <GAT_att_clt_tx+0x330>
100652c4:	2681      	movs	r6, #129	@ 0x81
100652c6:	e00c      	b.n	100652e2 <GAT_att_clt_tx+0x34a>
100652c8:	7828      	ldrb	r0, [r5, #0]
100652ca:	2600      	movs	r6, #0
100652cc:	281e      	cmp	r0, #30
100652ce:	d108      	bne.n	100652e2 <GAT_att_clt_tx+0x34a>
100652d0:	8962      	ldrh	r2, [r4, #10]
100652d2:	8921      	ldrh	r1, [r4, #8]
100652d4:	2002      	movs	r0, #2
100652d6:	f7f2 fac1 	bl	1005785c <GAT_att_cmn_stop_timer>
100652da:	88a0      	ldrh	r0, [r4, #4]
100652dc:	2120      	movs	r1, #32
100652de:	4388      	bics	r0, r1
100652e0:	80a0      	strh	r0, [r4, #4]
100652e2:	4630      	mov	r0, r6
100652e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100652e6:	2711      	movs	r7, #17
100652e8:	e6a1      	b.n	1006502e <GAT_att_clt_tx+0x96>
100652ea:	46c0      	nop			@ (mov r8, r8)

100652ec <__arm_cp.5_0>:
100652ec:	20002d98 	.word	0x20002d98

100652f0 <__arm_cp.5_1>:
100652f0:	100658f1 	.word	0x100658f1

100652f4 <__arm_cp.5_2>:
100652f4:	2000296c 	.word	0x2000296c

100652f8 <ACL_pkt_write_8b>:
100652f8:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100652fa:	4614      	mov	r4, r2
100652fc:	6840      	ldr	r0, [r0, #4]
100652fe:	2920      	cmp	r1, #32
10065300:	d304      	bcc.n	1006530c <ACL_pkt_write_8b+0x14>
10065302:	ad01      	add	r5, sp, #4
10065304:	462a      	mov	r2, r5
10065306:	f7fc fb74 	bl	100619f2 <Mem_Buff_get_buff_off>
1006530a:	8829      	ldrh	r1, [r5, #0]
1006530c:	1840      	adds	r0, r0, r1
1006530e:	7104      	strb	r4, [r0, #4]
10065310:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10065312 <GAT_att_clt_read_grp_type_get_last_attr_h>:
10065312:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10065314:	4604      	mov	r4, r0
10065316:	8980      	ldrh	r0, [r0, #12]
10065318:	1c40      	adds	r0, r0, #1
1006531a:	b281      	uxth	r1, r0
1006531c:	4620      	mov	r0, r4
1006531e:	f000 f80e 	bl	1006533e <ACL_pkt_read_8b>
10065322:	8861      	ldrh	r1, [r4, #2]
10065324:	1a08      	subs	r0, r1, r0
10065326:	89a1      	ldrh	r1, [r4, #12]
10065328:	1840      	adds	r0, r0, r1
1006532a:	1c80      	adds	r0, r0, #2
1006532c:	b281      	uxth	r1, r0
1006532e:	2202      	movs	r2, #2
10065330:	ad01      	add	r5, sp, #4
10065332:	4620      	mov	r0, r4
10065334:	462b      	mov	r3, r5
10065336:	f7f0 fbb1 	bl	10055a9c <ACL_pkt_read>
1006533a:	8828      	ldrh	r0, [r5, #0]
1006533c:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1006533e <ACL_pkt_read_8b>:
1006533e:	b51c      	push	{r2, r3, r4, lr}
10065340:	291f      	cmp	r1, #31
10065342:	d803      	bhi.n	1006534c <ACL_pkt_read_8b+0xe>
10065344:	aa01      	add	r2, sp, #4
10065346:	8011      	strh	r1, [r2, #0]
10065348:	6840      	ldr	r0, [r0, #4]
1006534a:	e005      	b.n	10065358 <ACL_pkt_read_8b+0x1a>
1006534c:	6840      	ldr	r0, [r0, #4]
1006534e:	ac01      	add	r4, sp, #4
10065350:	4622      	mov	r2, r4
10065352:	f7fc fb4e 	bl	100619f2 <Mem_Buff_get_buff_off>
10065356:	8821      	ldrh	r1, [r4, #0]
10065358:	1840      	adds	r0, r0, r1
1006535a:	7900      	ldrb	r0, [r0, #4]
1006535c:	bd1c      	pop	{r2, r3, r4, pc}

1006535e <GAT_att_clt_find_type_val_get_last_attr_h>:
1006535e:	b51c      	push	{r2, r3, r4, lr}
10065360:	8981      	ldrh	r1, [r0, #12]
10065362:	8842      	ldrh	r2, [r0, #2]
10065364:	1851      	adds	r1, r2, r1
10065366:	1e89      	subs	r1, r1, #2
10065368:	b289      	uxth	r1, r1
1006536a:	2202      	movs	r2, #2
1006536c:	ac01      	add	r4, sp, #4
1006536e:	4623      	mov	r3, r4
10065370:	f7f0 fb94 	bl	10055a9c <ACL_pkt_read>
10065374:	8820      	ldrh	r0, [r4, #0]
10065376:	bd1c      	pop	{r2, r3, r4, pc}

10065378 <GAT_att_clt_parse_error_resp>:
10065378:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1006537a:	460e      	mov	r6, r1
1006537c:	8841      	ldrh	r1, [r0, #2]
1006537e:	2905      	cmp	r1, #5
10065380:	d112      	bne.n	100653a8 <GAT_att_clt_parse_error_resp+0x30>
10065382:	461c      	mov	r4, r3
10065384:	4615      	mov	r5, r2
10065386:	8981      	ldrh	r1, [r0, #12]
10065388:	2205      	movs	r2, #5
1006538a:	af01      	add	r7, sp, #4
1006538c:	463b      	mov	r3, r7
1006538e:	f7f0 fb85 	bl	10055a9c <ACL_pkt_read>
10065392:	7878      	ldrb	r0, [r7, #1]
10065394:	7030      	strb	r0, [r6, #0]
10065396:	78b8      	ldrb	r0, [r7, #2]
10065398:	78f9      	ldrb	r1, [r7, #3]
1006539a:	0209      	lsls	r1, r1, #8
1006539c:	1808      	adds	r0, r1, r0
1006539e:	8028      	strh	r0, [r5, #0]
100653a0:	9802      	ldr	r0, [sp, #8]
100653a2:	7020      	strb	r0, [r4, #0]
100653a4:	2000      	movs	r0, #0
100653a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100653a8:	2086      	movs	r0, #134	@ 0x86
100653aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100653ac <GAT_att_clt_read_type_get_last_attr_h>:
100653ac:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100653ae:	4604      	mov	r4, r0
100653b0:	8980      	ldrh	r0, [r0, #12]
100653b2:	1c40      	adds	r0, r0, #1
100653b4:	b281      	uxth	r1, r0
100653b6:	4620      	mov	r0, r4
100653b8:	f7ff ffc1 	bl	1006533e <ACL_pkt_read_8b>
100653bc:	8861      	ldrh	r1, [r4, #2]
100653be:	1a08      	subs	r0, r1, r0
100653c0:	89a1      	ldrh	r1, [r4, #12]
100653c2:	1840      	adds	r0, r0, r1
100653c4:	b281      	uxth	r1, r0
100653c6:	2202      	movs	r2, #2
100653c8:	ad01      	add	r5, sp, #4
100653ca:	4620      	mov	r0, r4
100653cc:	462b      	mov	r3, r5
100653ce:	f7f0 fb65 	bl	10055a9c <ACL_pkt_read>
100653d2:	8828      	ldrh	r0, [r5, #0]
100653d4:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100653d6 <GAT_att_clt_read_type_get_data>:
100653d6:	b570      	push	{r4, r5, r6, lr}
100653d8:	4614      	mov	r4, r2
100653da:	460e      	mov	r6, r1
100653dc:	4605      	mov	r5, r0
100653de:	8980      	ldrh	r0, [r0, #12]
100653e0:	1c40      	adds	r0, r0, #1
100653e2:	b281      	uxth	r1, r0
100653e4:	4628      	mov	r0, r5
100653e6:	f7ff ffaa 	bl	1006533e <ACL_pkt_read_8b>
100653ea:	4602      	mov	r2, r0
100653ec:	4346      	muls	r6, r0
100653ee:	1cb0      	adds	r0, r6, #2
100653f0:	8869      	ldrh	r1, [r5, #2]
100653f2:	4288      	cmp	r0, r1
100653f4:	d208      	bcs.n	10065408 <GAT_att_clt_read_type_get_data+0x32>
100653f6:	89a9      	ldrh	r1, [r5, #12]
100653f8:	1808      	adds	r0, r1, r0
100653fa:	b281      	uxth	r1, r0
100653fc:	4628      	mov	r0, r5
100653fe:	4623      	mov	r3, r4
10065400:	f7f0 fb4c 	bl	10055a9c <ACL_pkt_read>
10065404:	2000      	movs	r0, #0
10065406:	bd70      	pop	{r4, r5, r6, pc}
10065408:	2086      	movs	r0, #134	@ 0x86
1006540a:	bd70      	pop	{r4, r5, r6, pc}

1006540c <GAT_att_clt_find_info_get_last_attr_h>:
1006540c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1006540e:	4604      	mov	r4, r0
10065410:	8980      	ldrh	r0, [r0, #12]
10065412:	1c40      	adds	r0, r0, #1
10065414:	b281      	uxth	r1, r0
10065416:	4620      	mov	r0, r4
10065418:	f7ff ff91 	bl	1006533e <ACL_pkt_read_8b>
1006541c:	2111      	movs	r1, #17
1006541e:	43c9      	mvns	r1, r1
10065420:	2801      	cmp	r0, #1
10065422:	d100      	bne.n	10065426 <GAT_att_clt_find_info_get_last_attr_h+0x1a>
10065424:	310e      	adds	r1, #14
10065426:	8860      	ldrh	r0, [r4, #2]
10065428:	1840      	adds	r0, r0, r1
1006542a:	89a1      	ldrh	r1, [r4, #12]
1006542c:	1808      	adds	r0, r1, r0
1006542e:	b281      	uxth	r1, r0
10065430:	2202      	movs	r2, #2
10065432:	ad01      	add	r5, sp, #4
10065434:	4620      	mov	r0, r4
10065436:	462b      	mov	r3, r5
10065438:	f7f0 fb30 	bl	10055a9c <ACL_pkt_read>
1006543c:	8828      	ldrh	r0, [r5, #0]
1006543e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10065440 <GAT_att_clt_prep_wr_cmp_data>:
10065440:	b580      	push	{r7, lr}
10065442:	460b      	mov	r3, r1
10065444:	8842      	ldrh	r2, [r0, #2]
10065446:	8981      	ldrh	r1, [r0, #12]
10065448:	1d49      	adds	r1, r1, #5
1006544a:	b289      	uxth	r1, r1
1006544c:	1f52      	subs	r2, r2, #5
1006544e:	b292      	uxth	r2, r2
10065450:	f7f0 fb1b 	bl	10055a8a <ACL_pkt_cmp>
10065454:	bd80      	pop	{r7, pc}

10065456 <GAT_att_clt_unexpect_rx>:
10065456:	b51c      	push	{r2, r3, r4, lr}
10065458:	4604      	mov	r4, r0
1006545a:	8800      	ldrh	r0, [r0, #0]
1006545c:	ab01      	add	r3, sp, #4
1006545e:	8018      	strh	r0, [r3, #0]
10065460:	2042      	movs	r0, #66	@ 0x42
10065462:	2102      	movs	r1, #2
10065464:	460a      	mov	r2, r1
10065466:	f7ff fbf1 	bl	10064c4c <aci_hal_fw_error_event_push_noinline>
1006546a:	2800      	cmp	r0, #0
1006546c:	d001      	beq.n	10065472 <GAT_att_clt_unexpect_rx+0x1c>
1006546e:	2084      	movs	r0, #132	@ 0x84
10065470:	bd1c      	pop	{r2, r3, r4, pc}
10065472:	4620      	mov	r0, r4
10065474:	f7f0 faf6 	bl	10055a64 <ACL_pkt_release>
10065478:	2000      	movs	r0, #0
1006547a:	bd1c      	pop	{r2, r3, r4, pc}

1006547c <GAT_att_clt_fill_read_multi_req>:
1006547c:	b510      	push	{r4, lr}
1006547e:	460c      	mov	r4, r1
10065480:	68c3      	ldr	r3, [r0, #12]
10065482:	8989      	ldrh	r1, [r1, #12]
10065484:	7a00      	ldrb	r0, [r0, #8]
10065486:	0042      	lsls	r2, r0, #1
10065488:	1c48      	adds	r0, r1, #1
1006548a:	b281      	uxth	r1, r0
1006548c:	4620      	mov	r0, r4
1006548e:	f7f0 fb27 	bl	10055ae0 <ACL_pkt_write>
10065492:	bd10      	pop	{r4, pc}

10065494 <GAT_att_clt_fill_handle_range>:
10065494:	b5b0      	push	{r4, r5, r7, lr}
10065496:	4614      	mov	r4, r2
10065498:	460a      	mov	r2, r1
1006549a:	4605      	mov	r5, r0
1006549c:	8980      	ldrh	r0, [r0, #12]
1006549e:	1c40      	adds	r0, r0, #1
100654a0:	b281      	uxth	r1, r0
100654a2:	4628      	mov	r0, r5
100654a4:	f7f0 fb13 	bl	10055ace <ACL_pkt_write_16b>
100654a8:	89a8      	ldrh	r0, [r5, #12]
100654aa:	1cc0      	adds	r0, r0, #3
100654ac:	b281      	uxth	r1, r0
100654ae:	4628      	mov	r0, r5
100654b0:	4622      	mov	r2, r4
100654b2:	f7f0 fb0c 	bl	10055ace <ACL_pkt_write_16b>
100654b6:	bdb0      	pop	{r4, r5, r7, pc}

100654b8 <GAT_att_db_init>:
100654b8:	b510      	push	{r4, lr}
100654ba:	4604      	mov	r4, r0
100654bc:	2108      	movs	r1, #8
100654be:	f7fc f9f9 	bl	100618b4 <csmem_mem_0_assign>
100654c2:	4904      	ldr	r1, [pc, #16]	@ (100654d4 <__arm_cp.0_0>)
100654c4:	6809      	ldr	r1, [r1, #0]
100654c6:	2260      	movs	r2, #96	@ 0x60
100654c8:	2300      	movs	r3, #0
100654ca:	528b      	strh	r3, [r1, r2]
100654cc:	6648      	str	r0, [r1, #100]	@ 0x64
100654ce:	3160      	adds	r1, #96	@ 0x60
100654d0:	804c      	strh	r4, [r1, #2]
100654d2:	bd10      	pop	{r4, pc}

100654d4 <__arm_cp.0_0>:
100654d4:	20002910 	.word	0x20002910

100654d8 <GAT_att_db_insert>:
100654d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100654da:	b085      	sub	sp, #20
100654dc:	4617      	mov	r7, r2
100654de:	9004      	str	r0, [sp, #16]
100654e0:	4d1c      	ldr	r5, [pc, #112]	@ (10065554 <__arm_cp.1_0>)
100654e2:	6828      	ldr	r0, [r5, #0]
100654e4:	2460      	movs	r4, #96	@ 0x60
100654e6:	5b06      	ldrh	r6, [r0, r4]
100654e8:	4602      	mov	r2, r0
100654ea:	3260      	adds	r2, #96	@ 0x60
100654ec:	8852      	ldrh	r2, [r2, #2]
100654ee:	4296      	cmp	r6, r2
100654f0:	d217      	bcs.n	10065522 <GAT_att_db_insert+0x4a>
100654f2:	9402      	str	r4, [sp, #8]
100654f4:	9303      	str	r3, [sp, #12]
100654f6:	2900      	cmp	r1, #0
100654f8:	d017      	beq.n	1006552a <GAT_att_db_insert+0x52>
100654fa:	9701      	str	r7, [sp, #4]
100654fc:	4608      	mov	r0, r1
100654fe:	f000 f82b 	bl	10065558 <GAT_att_db_get_att_idx>
10065502:	1c44      	adds	r4, r0, #1
10065504:	6828      	ldr	r0, [r5, #0]
10065506:	b2b1      	uxth	r1, r6
10065508:	b2a2      	uxth	r2, r4
1006550a:	4291      	cmp	r1, r2
1006550c:	d30b      	bcc.n	10065526 <GAT_att_db_insert+0x4e>
1006550e:	00c9      	lsls	r1, r1, #3
10065510:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10065512:	1840      	adds	r0, r0, r1
10065514:	4601      	mov	r1, r0
10065516:	3908      	subs	r1, #8
10065518:	2208      	movs	r2, #8
1006551a:	f7ed ff0b 	bl	10053334 <BLEPLAT_MemCpy>
1006551e:	1e76      	subs	r6, r6, #1
10065520:	e7f0      	b.n	10065504 <GAT_att_db_insert+0x2c>
10065522:	2700      	movs	r7, #0
10065524:	e012      	b.n	1006554c <GAT_att_db_insert+0x74>
10065526:	9f01      	ldr	r7, [sp, #4]
10065528:	e000      	b.n	1006552c <GAT_att_db_insert+0x54>
1006552a:	4634      	mov	r4, r6
1006552c:	6e40      	ldr	r0, [r0, #100]	@ 0x64
1006552e:	b2a1      	uxth	r1, r4
10065530:	00c9      	lsls	r1, r1, #3
10065532:	9a04      	ldr	r2, [sp, #16]
10065534:	5442      	strb	r2, [r0, r1]
10065536:	1840      	adds	r0, r0, r1
10065538:	9a03      	ldr	r2, [sp, #12]
1006553a:	6042      	str	r2, [r0, #4]
1006553c:	6828      	ldr	r0, [r5, #0]
1006553e:	9b02      	ldr	r3, [sp, #8]
10065540:	5ac2      	ldrh	r2, [r0, r3]
10065542:	1c52      	adds	r2, r2, #1
10065544:	52c2      	strh	r2, [r0, r3]
10065546:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10065548:	1840      	adds	r0, r0, r1
1006554a:	8047      	strh	r7, [r0, #2]
1006554c:	4638      	mov	r0, r7
1006554e:	b005      	add	sp, #20
10065550:	bdf0      	pop	{r4, r5, r6, r7, pc}
10065552:	46c0      	nop			@ (mov r8, r8)

10065554 <__arm_cp.1_0>:
10065554:	20002910 	.word	0x20002910

10065558 <GAT_att_db_get_att_idx>:
10065558:	4908      	ldr	r1, [pc, #32]	@ (1006557c <__arm_cp.2_0>)
1006555a:	680a      	ldr	r2, [r1, #0]
1006555c:	6e51      	ldr	r1, [r2, #100]	@ 0x64
1006555e:	2362      	movs	r3, #98	@ 0x62
10065560:	5ad2      	ldrh	r2, [r2, r3]
10065562:	00d2      	lsls	r2, r2, #3
10065564:	1852      	adds	r2, r2, r1
10065566:	3a08      	subs	r2, #8
10065568:	4282      	cmp	r2, r0
1006556a:	d302      	bcc.n	10065572 <GAT_att_db_get_att_idx+0x1a>
1006556c:	1a40      	subs	r0, r0, r1
1006556e:	08c0      	lsrs	r0, r0, #3
10065570:	e001      	b.n	10065576 <GAT_att_db_get_att_idx+0x1e>
10065572:	2000      	movs	r0, #0
10065574:	43c0      	mvns	r0, r0
10065576:	b280      	uxth	r0, r0
10065578:	4770      	bx	lr
1006557a:	46c0      	nop			@ (mov r8, r8)

1006557c <__arm_cp.2_0>:
1006557c:	20002910 	.word	0x20002910

10065580 <GAT_att_db_find_by_handle>:
10065580:	b580      	push	{r7, lr}
10065582:	f000 f80f 	bl	100655a4 <GAT_att_db_find_attr_idx_with_handle>
10065586:	4905      	ldr	r1, [pc, #20]	@ (1006559c <__arm_cp.3_0>)
10065588:	4288      	cmp	r0, r1
1006558a:	d005      	beq.n	10065598 <GAT_att_db_find_by_handle+0x18>
1006558c:	00c0      	lsls	r0, r0, #3
1006558e:	4904      	ldr	r1, [pc, #16]	@ (100655a0 <__arm_cp.3_1>)
10065590:	6809      	ldr	r1, [r1, #0]
10065592:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10065594:	1808      	adds	r0, r1, r0
10065596:	bd80      	pop	{r7, pc}
10065598:	2000      	movs	r0, #0
1006559a:	bd80      	pop	{r7, pc}

1006559c <__arm_cp.3_0>:
1006559c:	0000ffff 	.word	0x0000ffff

100655a0 <__arm_cp.3_1>:
100655a0:	20002910 	.word	0x20002910

100655a4 <GAT_att_db_find_attr_idx_with_handle>:
100655a4:	b510      	push	{r4, lr}
100655a6:	4604      	mov	r4, r0
100655a8:	f000 f824 	bl	100655f4 <GAT_att_db_find_attr_idx_from_handle>
100655ac:	4906      	ldr	r1, [pc, #24]	@ (100655c8 <__arm_cp.4_0>)
100655ae:	4288      	cmp	r0, r1
100655b0:	d007      	beq.n	100655c2 <GAT_att_db_find_attr_idx_with_handle+0x1e>
100655b2:	00c2      	lsls	r2, r0, #3
100655b4:	4b05      	ldr	r3, [pc, #20]	@ (100655cc <__arm_cp.4_1>)
100655b6:	681b      	ldr	r3, [r3, #0]
100655b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
100655ba:	189a      	adds	r2, r3, r2
100655bc:	8852      	ldrh	r2, [r2, #2]
100655be:	42a2      	cmp	r2, r4
100655c0:	d000      	beq.n	100655c4 <GAT_att_db_find_attr_idx_with_handle+0x20>
100655c2:	4608      	mov	r0, r1
100655c4:	bd10      	pop	{r4, pc}
100655c6:	46c0      	nop			@ (mov r8, r8)

100655c8 <__arm_cp.4_0>:
100655c8:	0000ffff 	.word	0x0000ffff

100655cc <__arm_cp.4_1>:
100655cc:	20002910 	.word	0x20002910

100655d0 <GAT_att_db_find_from_handle>:
100655d0:	b580      	push	{r7, lr}
100655d2:	f000 f80f 	bl	100655f4 <GAT_att_db_find_attr_idx_from_handle>
100655d6:	4905      	ldr	r1, [pc, #20]	@ (100655ec <__arm_cp.5_0>)
100655d8:	4288      	cmp	r0, r1
100655da:	d005      	beq.n	100655e8 <GAT_att_db_find_from_handle+0x18>
100655dc:	00c0      	lsls	r0, r0, #3
100655de:	4904      	ldr	r1, [pc, #16]	@ (100655f0 <__arm_cp.5_1>)
100655e0:	6809      	ldr	r1, [r1, #0]
100655e2:	6e49      	ldr	r1, [r1, #100]	@ 0x64
100655e4:	1808      	adds	r0, r1, r0
100655e6:	bd80      	pop	{r7, pc}
100655e8:	2000      	movs	r0, #0
100655ea:	bd80      	pop	{r7, pc}

100655ec <__arm_cp.5_0>:
100655ec:	0000ffff 	.word	0x0000ffff

100655f0 <__arm_cp.5_1>:
100655f0:	20002910 	.word	0x20002910

100655f4 <GAT_att_db_find_attr_idx_from_handle>:
100655f4:	b570      	push	{r4, r5, r6, lr}
100655f6:	4909      	ldr	r1, [pc, #36]	@ (1006561c <__arm_cp.6_0>)
100655f8:	680a      	ldr	r2, [r1, #0]
100655fa:	2160      	movs	r1, #96	@ 0x60
100655fc:	5a53      	ldrh	r3, [r2, r1]
100655fe:	2100      	movs	r1, #0
10065600:	2502      	movs	r5, #2
10065602:	4c07      	ldr	r4, [pc, #28]	@ (10065620 <__arm_cp.6_1>)
10065604:	428b      	cmp	r3, r1
10065606:	d006      	beq.n	10065616 <GAT_att_db_find_attr_idx_from_handle+0x22>
10065608:	6e56      	ldr	r6, [r2, #100]	@ 0x64
1006560a:	5b76      	ldrh	r6, [r6, r5]
1006560c:	4286      	cmp	r6, r0
1006560e:	d203      	bcs.n	10065618 <GAT_att_db_find_attr_idx_from_handle+0x24>
10065610:	3508      	adds	r5, #8
10065612:	1c49      	adds	r1, r1, #1
10065614:	e7f6      	b.n	10065604 <GAT_att_db_find_attr_idx_from_handle+0x10>
10065616:	4621      	mov	r1, r4
10065618:	b288      	uxth	r0, r1
1006561a:	bd70      	pop	{r4, r5, r6, pc}

1006561c <__arm_cp.6_0>:
1006561c:	20002910 	.word	0x20002910

10065620 <__arm_cp.6_1>:
10065620:	0000ffff 	.word	0x0000ffff

10065624 <GAT_att_db_find_by_def>:
10065624:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10065626:	9302      	str	r3, [sp, #8]
10065628:	4615      	mov	r5, r2
1006562a:	2200      	movs	r2, #0
1006562c:	4288      	cmp	r0, r1
1006562e:	d823      	bhi.n	10065678 <GAT_att_db_find_by_def+0x54>
10065630:	460c      	mov	r4, r1
10065632:	4916      	ldr	r1, [pc, #88]	@ (1006568c <__arm_cp.8_0>)
10065634:	680f      	ldr	r7, [r1, #0]
10065636:	2160      	movs	r1, #96	@ 0x60
10065638:	5a79      	ldrh	r1, [r7, r1]
1006563a:	2900      	cmp	r1, #0
1006563c:	d01c      	beq.n	10065678 <GAT_att_db_find_by_def+0x54>
1006563e:	9200      	str	r2, [sp, #0]
10065640:	9101      	str	r1, [sp, #4]
10065642:	f7ff ffd7 	bl	100655f4 <GAT_att_db_find_attr_idx_from_handle>
10065646:	4606      	mov	r6, r0
10065648:	4620      	mov	r0, r4
1006564a:	f7ff ffd3 	bl	100655f4 <GAT_att_db_find_attr_idx_from_handle>
1006564e:	9901      	ldr	r1, [sp, #4]
10065650:	1e49      	subs	r1, r1, #1
10065652:	4281      	cmp	r1, r0
10065654:	d300      	bcc.n	10065658 <GAT_att_db_find_by_def+0x34>
10065656:	4601      	mov	r1, r0
10065658:	b289      	uxth	r1, r1
1006565a:	b2b2      	uxth	r2, r6
1006565c:	428a      	cmp	r2, r1
1006565e:	d80d      	bhi.n	1006567c <GAT_att_db_find_by_def+0x58>
10065660:	6e78      	ldr	r0, [r7, #100]	@ 0x64
10065662:	00d3      	lsls	r3, r2, #3
10065664:	5cc4      	ldrb	r4, [r0, r3]
10065666:	42ac      	cmp	r4, r5
10065668:	d104      	bne.n	10065674 <GAT_att_db_find_by_def+0x50>
1006566a:	18c0      	adds	r0, r0, r3
1006566c:	6843      	ldr	r3, [r0, #4]
1006566e:	9c02      	ldr	r4, [sp, #8]
10065670:	42a3      	cmp	r3, r4
10065672:	d005      	beq.n	10065680 <GAT_att_db_find_by_def+0x5c>
10065674:	1c76      	adds	r6, r6, #1
10065676:	e7f0      	b.n	1006565a <GAT_att_db_find_by_def+0x36>
10065678:	4610      	mov	r0, r2
1006567a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006567c:	9800      	ldr	r0, [sp, #0]
1006567e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10065680:	4903      	ldr	r1, [pc, #12]	@ (10065690 <__arm_cp.8_1>)
10065682:	428a      	cmp	r2, r1
10065684:	d100      	bne.n	10065688 <GAT_att_db_find_by_def+0x64>
10065686:	2000      	movs	r0, #0
10065688:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006568a:	46c0      	nop			@ (mov r8, r8)

1006568c <__arm_cp.8_0>:
1006568c:	20002910 	.word	0x20002910

10065690 <__arm_cp.8_1>:
10065690:	0000ffff 	.word	0x0000ffff

10065694 <GAT_att_db_get_next>:
10065694:	b580      	push	{r7, lr}
10065696:	f7ff ff5f 	bl	10065558 <GAT_att_db_get_att_idx>
1006569a:	4907      	ldr	r1, [pc, #28]	@ (100656b8 <__arm_cp.10_0>)
1006569c:	6809      	ldr	r1, [r1, #0]
1006569e:	2260      	movs	r2, #96	@ 0x60
100656a0:	5a8a      	ldrh	r2, [r1, r2]
100656a2:	1c40      	adds	r0, r0, #1
100656a4:	b280      	uxth	r0, r0
100656a6:	4290      	cmp	r0, r2
100656a8:	d203      	bcs.n	100656b2 <GAT_att_db_get_next+0x1e>
100656aa:	6e49      	ldr	r1, [r1, #100]	@ 0x64
100656ac:	00c0      	lsls	r0, r0, #3
100656ae:	1808      	adds	r0, r1, r0
100656b0:	bd80      	pop	{r7, pc}
100656b2:	2000      	movs	r0, #0
100656b4:	bd80      	pop	{r7, pc}
100656b6:	46c0      	nop			@ (mov r8, r8)

100656b8 <__arm_cp.10_0>:
100656b8:	20002910 	.word	0x20002910

100656bc <GAT_att_db_get_last_group_handle>:
100656bc:	b580      	push	{r7, lr}
100656be:	f000 f803 	bl	100656c8 <GAT_att_db_get_last_group_attribute>
100656c2:	8840      	ldrh	r0, [r0, #2]
100656c4:	bd80      	pop	{r7, pc}
	...

100656c8 <GAT_att_db_get_last_group_attribute>:
100656c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100656ca:	7804      	ldrb	r4, [r0, #0]
100656cc:	2502      	movs	r5, #2
100656ce:	4621      	mov	r1, r4
100656d0:	4329      	orrs	r1, r5
100656d2:	2902      	cmp	r1, #2
100656d4:	d11e      	bne.n	10065714 <GAT_att_db_get_last_group_attribute+0x4c>
100656d6:	f7ff ff3f 	bl	10065558 <GAT_att_db_get_att_idx>
100656da:	490f      	ldr	r1, [pc, #60]	@ (10065718 <__arm_cp.12_0>)
100656dc:	6809      	ldr	r1, [r1, #0]
100656de:	2260      	movs	r2, #96	@ 0x60
100656e0:	5a8b      	ldrh	r3, [r1, r2]
100656e2:	1c40      	adds	r0, r0, #1
100656e4:	b282      	uxth	r2, r0
100656e6:	429a      	cmp	r2, r3
100656e8:	d210      	bcs.n	1006570c <GAT_att_db_get_last_group_attribute+0x44>
100656ea:	2c00      	cmp	r4, #0
100656ec:	d008      	beq.n	10065700 <GAT_att_db_get_last_group_attribute+0x38>
100656ee:	2c02      	cmp	r4, #2
100656f0:	d1f7      	bne.n	100656e2 <GAT_att_db_get_last_group_attribute+0x1a>
100656f2:	00d7      	lsls	r7, r2, #3
100656f4:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
100656f6:	5df7      	ldrb	r7, [r6, r7]
100656f8:	432f      	orrs	r7, r5
100656fa:	2f02      	cmp	r7, #2
100656fc:	d1f1      	bne.n	100656e2 <GAT_att_db_get_last_group_attribute+0x1a>
100656fe:	e006      	b.n	1006570e <GAT_att_db_get_last_group_attribute+0x46>
10065700:	00d7      	lsls	r7, r2, #3
10065702:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
10065704:	5df7      	ldrb	r7, [r6, r7]
10065706:	2f00      	cmp	r7, #0
10065708:	d1eb      	bne.n	100656e2 <GAT_att_db_get_last_group_attribute+0x1a>
1006570a:	e000      	b.n	1006570e <GAT_att_db_get_last_group_attribute+0x46>
1006570c:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
1006570e:	00d0      	lsls	r0, r2, #3
10065710:	1980      	adds	r0, r0, r6
10065712:	3808      	subs	r0, #8
10065714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10065716:	46c0      	nop			@ (mov r8, r8)

10065718 <__arm_cp.12_0>:
10065718:	20002910 	.word	0x20002910

1006571c <GAT_att_db_get_last_handle>:
1006571c:	4806      	ldr	r0, [pc, #24]	@ (10065738 <__arm_cp.14_0>)
1006571e:	6800      	ldr	r0, [r0, #0]
10065720:	2160      	movs	r1, #96	@ 0x60
10065722:	5a41      	ldrh	r1, [r0, r1]
10065724:	2900      	cmp	r1, #0
10065726:	d005      	beq.n	10065734 <GAT_att_db_get_last_handle+0x18>
10065728:	6e40      	ldr	r0, [r0, #100]	@ 0x64
1006572a:	00c9      	lsls	r1, r1, #3
1006572c:	1808      	adds	r0, r1, r0
1006572e:	1f80      	subs	r0, r0, #6
10065730:	8800      	ldrh	r0, [r0, #0]
10065732:	4770      	bx	lr
10065734:	2000      	movs	r0, #0
10065736:	4770      	bx	lr

10065738 <__arm_cp.14_0>:
10065738:	20002910 	.word	0x20002910

1006573c <GAT_att_db_rm_att_range>:
1006573c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1006573e:	460d      	mov	r5, r1
10065740:	4604      	mov	r4, r0
10065742:	f7ff ffeb 	bl	1006571c <GAT_att_db_get_last_handle>
10065746:	2800      	cmp	r0, #0
10065748:	d034      	beq.n	100657b4 <GAT_att_db_rm_att_range+0x78>
1006574a:	42ac      	cmp	r4, r5
1006574c:	d832      	bhi.n	100657b4 <GAT_att_db_rm_att_range+0x78>
1006574e:	4606      	mov	r6, r0
10065750:	42a0      	cmp	r0, r4
10065752:	d32f      	bcc.n	100657b4 <GAT_att_db_rm_att_range+0x78>
10065754:	4620      	mov	r0, r4
10065756:	f7ff ff25 	bl	100655a4 <GAT_att_db_find_attr_idx_with_handle>
1006575a:	4604      	mov	r4, r0
1006575c:	4816      	ldr	r0, [pc, #88]	@ (100657b8 <__arm_cp.16_0>)
1006575e:	4284      	cmp	r4, r0
10065760:	d028      	beq.n	100657b4 <GAT_att_db_rm_att_range+0x78>
10065762:	42ae      	cmp	r6, r5
10065764:	d300      	bcc.n	10065768 <GAT_att_db_rm_att_range+0x2c>
10065766:	462e      	mov	r6, r5
10065768:	4630      	mov	r0, r6
1006576a:	f7ff ff1b 	bl	100655a4 <GAT_att_db_find_attr_idx_with_handle>
1006576e:	4913      	ldr	r1, [pc, #76]	@ (100657bc <__arm_cp.16_1>)
10065770:	680f      	ldr	r7, [r1, #0]
10065772:	2660      	movs	r6, #96	@ 0x60
10065774:	5bb9      	ldrh	r1, [r7, r6]
10065776:	1e4a      	subs	r2, r1, #1
10065778:	4282      	cmp	r2, r0
1006577a:	d917      	bls.n	100657ac <GAT_att_db_rm_att_range+0x70>
1006577c:	9001      	str	r0, [sp, #4]
1006577e:	4605      	mov	r5, r0
10065780:	9402      	str	r4, [sp, #8]
10065782:	b28b      	uxth	r3, r1
10065784:	1c6d      	adds	r5, r5, #1
10065786:	b2aa      	uxth	r2, r5
10065788:	429a      	cmp	r2, r3
1006578a:	d20d      	bcs.n	100657a8 <GAT_att_db_rm_att_range+0x6c>
1006578c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
1006578e:	b2a0      	uxth	r0, r4
10065790:	00c0      	lsls	r0, r0, #3
10065792:	1808      	adds	r0, r1, r0
10065794:	00d2      	lsls	r2, r2, #3
10065796:	1889      	adds	r1, r1, r2
10065798:	2208      	movs	r2, #8
1006579a:	f7ed fdcb 	bl	10053334 <BLEPLAT_MemCpy>
1006579e:	4807      	ldr	r0, [pc, #28]	@ (100657bc <__arm_cp.16_1>)
100657a0:	6807      	ldr	r7, [r0, #0]
100657a2:	5bb9      	ldrh	r1, [r7, r6]
100657a4:	1c64      	adds	r4, r4, #1
100657a6:	e7ec      	b.n	10065782 <GAT_att_db_rm_att_range+0x46>
100657a8:	9c02      	ldr	r4, [sp, #8]
100657aa:	9801      	ldr	r0, [sp, #4]
100657ac:	43c2      	mvns	r2, r0
100657ae:	18a2      	adds	r2, r4, r2
100657b0:	1851      	adds	r1, r2, r1
100657b2:	53b9      	strh	r1, [r7, r6]
100657b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100657b6:	46c0      	nop			@ (mov r8, r8)

100657b8 <__arm_cp.16_0>:
100657b8:	0000ffff 	.word	0x0000ffff

100657bc <__arm_cp.16_1>:
100657bc:	20002910 	.word	0x20002910

100657c0 <GAT_att_db_find_last_attr_of_type>:
100657c0:	b510      	push	{r4, lr}
100657c2:	4909      	ldr	r1, [pc, #36]	@ (100657e8 <__arm_cp.17_0>)
100657c4:	680a      	ldr	r2, [r1, #0]
100657c6:	2160      	movs	r1, #96	@ 0x60
100657c8:	5a53      	ldrh	r3, [r2, r1]
100657ca:	0419      	lsls	r1, r3, #16
100657cc:	d009      	beq.n	100657e2 <GAT_att_db_find_last_attr_of_type+0x22>
100657ce:	6e51      	ldr	r1, [r2, #100]	@ 0x64
100657d0:	b29c      	uxth	r4, r3
100657d2:	00e4      	lsls	r4, r4, #3
100657d4:	1861      	adds	r1, r4, r1
100657d6:	3908      	subs	r1, #8
100657d8:	780c      	ldrb	r4, [r1, #0]
100657da:	1e5b      	subs	r3, r3, #1
100657dc:	4284      	cmp	r4, r0
100657de:	d1f4      	bne.n	100657ca <GAT_att_db_find_last_attr_of_type+0xa>
100657e0:	e000      	b.n	100657e4 <GAT_att_db_find_last_attr_of_type+0x24>
100657e2:	2100      	movs	r1, #0
100657e4:	4608      	mov	r0, r1
100657e6:	bd10      	pop	{r4, pc}

100657e8 <__arm_cp.17_0>:
100657e8:	20002910 	.word	0x20002910

100657ec <GAT_att_db_reverse_find_attr_of_type>:
100657ec:	b510      	push	{r4, lr}
100657ee:	4604      	mov	r4, r0
100657f0:	4608      	mov	r0, r1
100657f2:	f7ff feff 	bl	100655f4 <GAT_att_db_find_attr_idx_from_handle>
100657f6:	4908      	ldr	r1, [pc, #32]	@ (10065818 <__arm_cp.18_0>)
100657f8:	6809      	ldr	r1, [r1, #0]
100657fa:	6e49      	ldr	r1, [r1, #100]	@ 0x64
100657fc:	b282      	uxth	r2, r0
100657fe:	00d2      	lsls	r2, r2, #3
10065800:	5c8b      	ldrb	r3, [r1, r2]
10065802:	42a3      	cmp	r3, r4
10065804:	d005      	beq.n	10065812 <GAT_att_db_reverse_find_attr_of_type+0x26>
10065806:	1e42      	subs	r2, r0, #1
10065808:	0400      	lsls	r0, r0, #16
1006580a:	4610      	mov	r0, r2
1006580c:	d1f6      	bne.n	100657fc <GAT_att_db_reverse_find_attr_of_type+0x10>
1006580e:	2000      	movs	r0, #0
10065810:	bd10      	pop	{r4, pc}
10065812:	1888      	adds	r0, r1, r2
10065814:	bd10      	pop	{r4, pc}
10065816:	46c0      	nop			@ (mov r8, r8)

10065818 <__arm_cp.18_0>:
10065818:	20002910 	.word	0x20002910

1006581c <GAT_clt_init>:
1006581c:	b570      	push	{r4, r5, r6, lr}
1006581e:	4c11      	ldr	r4, [pc, #68]	@ (10065864 <__arm_cp.0_0>)
10065820:	7aa0      	ldrb	r0, [r4, #10]
10065822:	2124      	movs	r1, #36	@ 0x24
10065824:	f7fc f846 	bl	100618b4 <csmem_mem_0_assign>
10065828:	490f      	ldr	r1, [pc, #60]	@ (10065868 <__arm_cp.0_1>)
1006582a:	680b      	ldr	r3, [r1, #0]
1006582c:	2200      	movs	r2, #0
1006582e:	461d      	mov	r5, r3
10065830:	3550      	adds	r5, #80	@ 0x50
10065832:	461e      	mov	r6, r3
10065834:	3648      	adds	r6, #72	@ 0x48
10065836:	649a      	str	r2, [r3, #72]	@ 0x48
10065838:	64de      	str	r6, [r3, #76]	@ 0x4c
1006583a:	651a      	str	r2, [r3, #80]	@ 0x50
1006583c:	655d      	str	r5, [r3, #84]	@ 0x54
1006583e:	7aa4      	ldrb	r4, [r4, #10]
10065840:	2c00      	cmp	r4, #0
10065842:	d00c      	beq.n	1006585e <GAT_clt_init+0x42>
10065844:	6202      	str	r2, [r0, #32]
10065846:	680b      	ldr	r3, [r1, #0]
10065848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1006584a:	6018      	str	r0, [r3, #0]
1006584c:	2301      	movs	r3, #1
1006584e:	7003      	strb	r3, [r0, #0]
10065850:	4605      	mov	r5, r0
10065852:	3520      	adds	r5, #32
10065854:	680b      	ldr	r3, [r1, #0]
10065856:	655d      	str	r5, [r3, #84]	@ 0x54
10065858:	3024      	adds	r0, #36	@ 0x24
1006585a:	1e64      	subs	r4, r4, #1
1006585c:	e7f0      	b.n	10065840 <GAT_clt_init+0x24>
1006585e:	659a      	str	r2, [r3, #88]	@ 0x58
10065860:	bd70      	pop	{r4, r5, r6, pc}
10065862:	46c0      	nop			@ (mov r8, r8)

10065864 <__arm_cp.0_0>:
10065864:	2000296c 	.word	0x2000296c

10065868 <__arm_cp.0_1>:
10065868:	20002910 	.word	0x20002910

1006586c <GAT_clt_connection>:
1006586c:	4770      	bx	lr
	...

10065870 <GAT_clt_bearer_close>:
10065870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10065872:	460d      	mov	r5, r1
10065874:	4604      	mov	r4, r0
10065876:	4e19      	ldr	r6, [pc, #100]	@ (100658dc <__arm_cp.2_0>)
10065878:	6837      	ldr	r7, [r6, #0]
1006587a:	3748      	adds	r7, #72	@ 0x48
1006587c:	683f      	ldr	r7, [r7, #0]
1006587e:	2f00      	cmp	r7, #0
10065880:	d010      	beq.n	100658a4 <GAT_clt_bearer_close+0x34>
10065882:	8878      	ldrh	r0, [r7, #2]
10065884:	42a0      	cmp	r0, r4
10065886:	d10b      	bne.n	100658a0 <GAT_clt_bearer_close+0x30>
10065888:	88b8      	ldrh	r0, [r7, #4]
1006588a:	42a8      	cmp	r0, r5
1006588c:	d108      	bne.n	100658a0 <GAT_clt_bearer_close+0x30>
1006588e:	7838      	ldrb	r0, [r7, #0]
10065890:	2118      	movs	r1, #24
10065892:	4301      	orrs	r1, r0
10065894:	7039      	strb	r1, [r7, #0]
10065896:	200c      	movs	r0, #12
10065898:	f7fd fde2 	bl	10063460 <tsk_notify_idx>
1006589c:	f7ec ff63 	bl	10052766 <BLE_STACK_ProcessRequest>
100658a0:	3720      	adds	r7, #32
100658a2:	e7eb      	b.n	1006587c <GAT_clt_bearer_close+0xc>
100658a4:	2d04      	cmp	r5, #4
100658a6:	d117      	bne.n	100658d8 <GAT_clt_bearer_close+0x68>
100658a8:	6830      	ldr	r0, [r6, #0]
100658aa:	6d81      	ldr	r1, [r0, #88]	@ 0x58
100658ac:	460b      	mov	r3, r1
100658ae:	2b00      	cmp	r3, #0
100658b0:	d00b      	beq.n	100658ca <GAT_clt_bearer_close+0x5a>
100658b2:	461a      	mov	r2, r3
100658b4:	689d      	ldr	r5, [r3, #8]
100658b6:	2300      	movs	r3, #0
100658b8:	2d00      	cmp	r5, #0
100658ba:	d0f8      	beq.n	100658ae <GAT_clt_bearer_close+0x3e>
100658bc:	88ab      	ldrh	r3, [r5, #4]
100658be:	42a3      	cmp	r3, r4
100658c0:	462b      	mov	r3, r5
100658c2:	d1f4      	bne.n	100658ae <GAT_clt_bearer_close+0x3e>
100658c4:	68ab      	ldr	r3, [r5, #8]
100658c6:	6093      	str	r3, [r2, #8]
100658c8:	e7f1      	b.n	100658ae <GAT_clt_bearer_close+0x3e>
100658ca:	2900      	cmp	r1, #0
100658cc:	d004      	beq.n	100658d8 <GAT_clt_bearer_close+0x68>
100658ce:	888a      	ldrh	r2, [r1, #4]
100658d0:	42a2      	cmp	r2, r4
100658d2:	d101      	bne.n	100658d8 <GAT_clt_bearer_close+0x68>
100658d4:	6889      	ldr	r1, [r1, #8]
100658d6:	6581      	str	r1, [r0, #88]	@ 0x58
100658d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100658da:	46c0      	nop			@ (mov r8, r8)

100658dc <__arm_cp.2_0>:
100658dc:	20002910 	.word	0x20002910

100658e0 <GAT_clt_proc_exec_tsk>:
100658e0:	b580      	push	{r7, lr}
100658e2:	4802      	ldr	r0, [pc, #8]	@ (100658ec <__arm_cp.3_0>)
100658e4:	6800      	ldr	r0, [r0, #0]
100658e6:	4780      	blx	r0
100658e8:	bd80      	pop	{r7, pc}
100658ea:	46c0      	nop			@ (mov r8, r8)

100658ec <__arm_cp.3_0>:
100658ec:	20002d9c 	.word	0x20002d9c

100658f0 <GAT_clt_rcv>:
100658f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100658f2:	b095      	sub	sp, #84	@ 0x54
100658f4:	4605      	mov	r5, r0
100658f6:	8804      	ldrh	r4, [r0, #0]
100658f8:	f7f4 fdcb 	bl	1005a492 <L2C_get_cid_from_basic_packet_header>
100658fc:	4601      	mov	r1, r0
100658fe:	4620      	mov	r0, r4
10065900:	f000 fa6e 	bl	10065de0 <GAT_clt_get_proc_per_channel>
10065904:	2686      	movs	r6, #134	@ 0x86
10065906:	2800      	cmp	r0, #0
10065908:	d100      	bne.n	1006590c <GAT_clt_rcv+0x1c>
1006590a:	e208      	b.n	10065d1e <GAT_clt_rcv+0x42e>
1006590c:	4604      	mov	r4, r0
1006590e:	882f      	ldrh	r7, [r5, #0]
10065910:	4628      	mov	r0, r5
10065912:	f7f4 fdbe 	bl	1005a492 <L2C_get_cid_from_basic_packet_header>
10065916:	4601      	mov	r1, r0
10065918:	4638      	mov	r0, r7
1006591a:	f7f1 ff2d 	bl	10057778 <GAT_att_cmn_get_channel_descr_p>
1006591e:	9008      	str	r0, [sp, #32]
10065920:	7820      	ldrb	r0, [r4, #0]
10065922:	21fb      	movs	r1, #251	@ 0xfb
10065924:	4001      	ands	r1, r0
10065926:	7021      	strb	r1, [r4, #0]
10065928:	270c      	movs	r7, #12
1006592a:	4638      	mov	r0, r7
1006592c:	f7fd fd98 	bl	10063460 <tsk_notify_idx>
10065930:	f7ec ff19 	bl	10052766 <BLE_STACK_ProcessRequest>
10065934:	4628      	mov	r0, r5
10065936:	f000 fa65 	bl	10065e04 <GAT_att_cmn_get_opcode>
1006593a:	2801      	cmp	r0, #1
1006593c:	d107      	bne.n	1006594e <GAT_clt_rcv+0x5e>
1006593e:	8860      	ldrh	r0, [r4, #2]
10065940:	f7f1 f804 	bl	1005694c <GAP_started_gatt_proc>
10065944:	2800      	cmp	r0, #0
10065946:	d060      	beq.n	10065a0a <GAT_clt_rcv+0x11a>
10065948:	4620      	mov	r0, r4
1006594a:	f000 fa60 	bl	10065e0e <GAT_clt_stop_proc>
1006594e:	7820      	ldrb	r0, [r4, #0]
10065950:	2200      	movs	r2, #0
10065952:	0701      	lsls	r1, r0, #28
10065954:	d457      	bmi.n	10065a06 <GAT_clt_rcv+0x116>
10065956:	79a3      	ldrb	r3, [r4, #6]
10065958:	1e59      	subs	r1, r3, #1
1006595a:	2911      	cmp	r1, #17
1006595c:	d900      	bls.n	10065960 <GAT_clt_rcv+0x70>
1006595e:	e1de      	b.n	10065d1e <GAT_clt_rcv+0x42e>
10065960:	9207      	str	r2, [sp, #28]
10065962:	0049      	lsls	r1, r1, #1
10065964:	4479      	add	r1, pc
10065966:	8889      	ldrh	r1, [r1, #4]
10065968:	0049      	lsls	r1, r1, #1
1006596a:	448f      	add	pc, r1
1006596c:	010200c5 	.word	0x010200c5
10065970:	0099010f 	.word	0x0099010f
10065974:	011f0099 	.word	0x011f0099
10065978:	01750164 	.word	0x01750164
1006597c:	01b9017c 	.word	0x01b9017c
10065980:	00a600a6 	.word	0x00a600a6
10065984:	001100b8 	.word	0x001100b8
10065988:	001100b0 	.word	0x001100b0
1006598c:	00b00011 	.word	0x00b00011
10065990:	06c0      	lsls	r0, r0, #27
10065992:	d500      	bpl.n	10065996 <GAT_clt_rcv+0xa6>
10065994:	e0a7      	b.n	10065ae6 <GAT_clt_rcv+0x1f6>
10065996:	88a2      	ldrh	r2, [r4, #4]
10065998:	8861      	ldrh	r1, [r4, #2]
1006599a:	200a      	movs	r0, #10
1006599c:	462b      	mov	r3, r5
1006599e:	f7fe ffbf 	bl	10064920 <aci_att_clt_prepare_write_resp_event_push_noinline>
100659a2:	2800      	cmp	r0, #0
100659a4:	d000      	beq.n	100659a8 <GAT_clt_rcv+0xb8>
100659a6:	e1b4      	b.n	10065d12 <GAT_clt_rcv+0x422>
100659a8:	79a0      	ldrb	r0, [r4, #6]
100659aa:	2811      	cmp	r0, #17
100659ac:	d100      	bne.n	100659b0 <GAT_clt_rcv+0xc0>
100659ae:	e1b2      	b.n	10065d16 <GAT_clt_rcv+0x426>
100659b0:	7a63      	ldrb	r3, [r4, #9]
100659b2:	6921      	ldr	r1, [r4, #16]
100659b4:	9108      	str	r1, [sp, #32]
100659b6:	2810      	cmp	r0, #16
100659b8:	d000      	beq.n	100659bc <GAT_clt_rcv+0xcc>
100659ba:	e1d0      	b.n	10065d5e <GAT_clt_rcv+0x46e>
100659bc:	9306      	str	r3, [sp, #24]
100659be:	89a8      	ldrh	r0, [r5, #12]
100659c0:	1c40      	adds	r0, r0, #1
100659c2:	b281      	uxth	r1, r0
100659c4:	4628      	mov	r0, r5
100659c6:	f7f0 f872 	bl	10055aae <ACL_pkt_read_16b>
100659ca:	9005      	str	r0, [sp, #20]
100659cc:	89a8      	ldrh	r0, [r5, #12]
100659ce:	1cc0      	adds	r0, r0, #3
100659d0:	b281      	uxth	r1, r0
100659d2:	4628      	mov	r0, r5
100659d4:	f7f0 f86b 	bl	10055aae <ACL_pkt_read_16b>
100659d8:	2600      	movs	r6, #0
100659da:	89a2      	ldrh	r2, [r4, #12]
100659dc:	8869      	ldrh	r1, [r5, #2]
100659de:	1f49      	subs	r1, r1, #5
100659e0:	4291      	cmp	r1, r2
100659e2:	9004      	str	r0, [sp, #16]
100659e4:	d000      	beq.n	100659e8 <GAT_clt_rcv+0xf8>
100659e6:	e1cf      	b.n	10065d88 <GAT_clt_rcv+0x498>
100659e8:	4638      	mov	r0, r7
100659ea:	9906      	ldr	r1, [sp, #24]
100659ec:	4348      	muls	r0, r1
100659ee:	9a08      	ldr	r2, [sp, #32]
100659f0:	1810      	adds	r0, r2, r0
100659f2:	6880      	ldr	r0, [r0, #8]
100659f4:	8961      	ldrh	r1, [r4, #10]
100659f6:	1841      	adds	r1, r0, r1
100659f8:	4628      	mov	r0, r5
100659fa:	4615      	mov	r5, r2
100659fc:	f7ff fd20 	bl	10065440 <GAT_att_clt_prep_wr_cmp_data>
10065a00:	9b06      	ldr	r3, [sp, #24]
10065a02:	9003      	str	r0, [sp, #12]
10065a04:	e1c4      	b.n	10065d90 <GAT_clt_rcv+0x4a0>
10065a06:	4616      	mov	r6, r2
10065a08:	e189      	b.n	10065d1e <GAT_clt_rcv+0x42e>
10065a0a:	a909      	add	r1, sp, #36	@ 0x24
10065a0c:	aa0f      	add	r2, sp, #60	@ 0x3c
10065a0e:	ab0e      	add	r3, sp, #56	@ 0x38
10065a10:	4628      	mov	r0, r5
10065a12:	f7ff fcb1 	bl	10065378 <GAT_att_clt_parse_error_resp>
10065a16:	2800      	cmp	r0, #0
10065a18:	d02b      	beq.n	10065a72 <GAT_clt_rcv+0x182>
10065a1a:	4628      	mov	r0, r5
10065a1c:	f7f0 f822 	bl	10055a64 <ACL_pkt_release>
10065a20:	a80e      	add	r0, sp, #56	@ 0x38
10065a22:	7800      	ldrb	r0, [r0, #0]
10065a24:	2812      	cmp	r0, #18
10065a26:	d108      	bne.n	10065a3a <GAT_clt_rcv+0x14a>
10065a28:	8860      	ldrh	r0, [r4, #2]
10065a2a:	2104      	movs	r1, #4
10065a2c:	f7f1 fea4 	bl	10057778 <GAT_att_cmn_get_channel_descr_p>
10065a30:	8881      	ldrh	r1, [r0, #4]
10065a32:	2201      	movs	r2, #1
10065a34:	0252      	lsls	r2, r2, #9
10065a36:	430a      	orrs	r2, r1
10065a38:	8082      	strh	r2, [r0, #4]
10065a3a:	79a0      	ldrb	r0, [r4, #6]
10065a3c:	2801      	cmp	r0, #1
10065a3e:	d104      	bne.n	10065a4a <GAT_clt_rcv+0x15a>
10065a40:	9b08      	ldr	r3, [sp, #32]
10065a42:	8899      	ldrh	r1, [r3, #4]
10065a44:	2204      	movs	r2, #4
10065a46:	4391      	bics	r1, r2
10065a48:	8099      	strh	r1, [r3, #4]
10065a4a:	a90e      	add	r1, sp, #56	@ 0x38
10065a4c:	7809      	ldrb	r1, [r1, #0]
10065a4e:	290a      	cmp	r1, #10
10065a50:	d008      	beq.n	10065a64 <GAT_clt_rcv+0x174>
10065a52:	2907      	cmp	r1, #7
10065a54:	d102      	bne.n	10065a5c <GAT_clt_rcv+0x16c>
10065a56:	280a      	cmp	r0, #10
10065a58:	d100      	bne.n	10065a5c <GAT_clt_rcv+0x16c>
10065a5a:	e775      	b.n	10065948 <GAT_clt_rcv+0x58>
10065a5c:	7821      	ldrb	r1, [r4, #0]
10065a5e:	2210      	movs	r2, #16
10065a60:	430a      	orrs	r2, r1
10065a62:	7022      	strb	r2, [r4, #0]
10065a64:	280e      	cmp	r0, #14
10065a66:	d100      	bne.n	10065a6a <GAT_clt_rcv+0x17a>
10065a68:	e771      	b.n	1006594e <GAT_clt_rcv+0x5e>
10065a6a:	2810      	cmp	r0, #16
10065a6c:	d100      	bne.n	10065a70 <GAT_clt_rcv+0x180>
10065a6e:	e76e      	b.n	1006594e <GAT_clt_rcv+0x5e>
10065a70:	e76a      	b.n	10065948 <GAT_clt_rcv+0x58>
10065a72:	a809      	add	r0, sp, #36	@ 0x24
10065a74:	7800      	ldrb	r0, [r0, #0]
10065a76:	9007      	str	r0, [sp, #28]
10065a78:	88a3      	ldrh	r3, [r4, #4]
10065a7a:	8862      	ldrh	r2, [r4, #2]
10065a7c:	a80f      	add	r0, sp, #60	@ 0x3c
10065a7e:	8800      	ldrh	r0, [r0, #0]
10065a80:	4621      	mov	r1, r4
10065a82:	ac0e      	add	r4, sp, #56	@ 0x38
10065a84:	7824      	ldrb	r4, [r4, #0]
10065a86:	9000      	str	r0, [sp, #0]
10065a88:	9401      	str	r4, [sp, #4]
10065a8a:	460c      	mov	r4, r1
10065a8c:	2002      	movs	r0, #2
10065a8e:	4611      	mov	r1, r2
10065a90:	461a      	mov	r2, r3
10065a92:	9b07      	ldr	r3, [sp, #28]
10065a94:	f7fe fc10 	bl	100642b8 <aci_gatt_clt_error_resp_event_push_noinline>
10065a98:	2800      	cmp	r0, #0
10065a9a:	d0be      	beq.n	10065a1a <GAT_clt_rcv+0x12a>
10065a9c:	4606      	mov	r6, r0
10065a9e:	e13e      	b.n	10065d1e <GAT_clt_rcv+0x42e>
10065aa0:	88a2      	ldrh	r2, [r4, #4]
10065aa2:	8861      	ldrh	r1, [r4, #2]
10065aa4:	200a      	movs	r0, #10
10065aa6:	462b      	mov	r3, r5
10065aa8:	f7fe fe40 	bl	1006472c <aci_att_clt_read_by_type_resp_event_push_noinline>
10065aac:	2800      	cmp	r0, #0
10065aae:	d000      	beq.n	10065ab2 <GAT_clt_rcv+0x1c2>
10065ab0:	e12f      	b.n	10065d12 <GAT_clt_rcv+0x422>
10065ab2:	4628      	mov	r0, r5
10065ab4:	f7ff fc7a 	bl	100653ac <GAT_att_clt_read_type_get_last_attr_h>
10065ab8:	e0c8      	b.n	10065c4c <GAT_clt_rcv+0x35c>
10065aba:	88a2      	ldrh	r2, [r4, #4]
10065abc:	8861      	ldrh	r1, [r4, #2]
10065abe:	200a      	movs	r0, #10
10065ac0:	2b0b      	cmp	r3, #11
10065ac2:	d000      	beq.n	10065ac6 <GAT_clt_rcv+0x1d6>
10065ac4:	e120      	b.n	10065d08 <GAT_clt_rcv+0x418>
10065ac6:	462b      	mov	r3, r5
10065ac8:	f7fe fec6 	bl	10064858 <aci_att_clt_read_multiple_resp_event_push_noinline>
10065acc:	e11f      	b.n	10065d0e <GAT_clt_rcv+0x41e>
10065ace:	88a2      	ldrh	r2, [r4, #4]
10065ad0:	8861      	ldrh	r1, [r4, #2]
10065ad2:	2002      	movs	r0, #2
10065ad4:	f7fe ff56 	bl	10064984 <aci_att_clt_exec_write_resp_event_push_noinline>
10065ad8:	2800      	cmp	r0, #0
10065ada:	d000      	beq.n	10065ade <GAT_clt_rcv+0x1ee>
10065adc:	e119      	b.n	10065d12 <GAT_clt_rcv+0x422>
10065ade:	4628      	mov	r0, r5
10065ae0:	f7ef ffc0 	bl	10055a64 <ACL_pkt_release>
10065ae4:	e117      	b.n	10065d16 <GAT_clt_rcv+0x426>
10065ae6:	8960      	ldrh	r0, [r4, #10]
10065ae8:	2800      	cmp	r0, #0
10065aea:	d100      	bne.n	10065aee <GAT_clt_rcv+0x1fe>
10065aec:	e113      	b.n	10065d16 <GAT_clt_rcv+0x426>
10065aee:	2600      	movs	r6, #0
10065af0:	7226      	strb	r6, [r4, #8]
10065af2:	200f      	movs	r0, #15
10065af4:	71a0      	strb	r0, [r4, #6]
10065af6:	e112      	b.n	10065d1e <GAT_clt_rcv+0x42e>
10065af8:	89a8      	ldrh	r0, [r5, #12]
10065afa:	1c40      	adds	r0, r0, #1
10065afc:	b281      	uxth	r1, r0
10065afe:	4628      	mov	r0, r5
10065b00:	f7ef ffd5 	bl	10055aae <ACL_pkt_read_16b>
10065b04:	4606      	mov	r6, r0
10065b06:	2817      	cmp	r0, #23
10065b08:	d800      	bhi.n	10065b0c <GAT_clt_rcv+0x21c>
10065b0a:	2617      	movs	r6, #23
10065b0c:	48b3      	ldr	r0, [pc, #716]	@ (10065ddc <__arm_cp.4_3>)
10065b0e:	8a00      	ldrh	r0, [r0, #16]
10065b10:	4286      	cmp	r6, r0
10065b12:	9f08      	ldr	r7, [sp, #32]
10065b14:	d300      	bcc.n	10065b18 <GAT_clt_rcv+0x228>
10065b16:	4606      	mov	r6, r0
10065b18:	88b8      	ldrh	r0, [r7, #4]
10065b1a:	0700      	lsls	r0, r0, #28
10065b1c:	d514      	bpl.n	10065b48 <GAT_clt_rcv+0x258>
10065b1e:	88f8      	ldrh	r0, [r7, #6]
10065b20:	42b0      	cmp	r0, r6
10065b22:	d011      	beq.n	10065b48 <GAT_clt_rcv+0x258>
10065b24:	463b      	mov	r3, r7
10065b26:	3308      	adds	r3, #8
10065b28:	2042      	movs	r0, #66	@ 0x42
10065b2a:	2103      	movs	r1, #3
10065b2c:	2202      	movs	r2, #2
10065b2e:	f7ff f88d 	bl	10064c4c <aci_hal_fw_error_event_push_noinline>
10065b32:	2800      	cmp	r0, #0
10065b34:	d000      	beq.n	10065b38 <GAT_clt_rcv+0x248>
10065b36:	e0ec      	b.n	10065d12 <GAT_clt_rcv+0x422>
10065b38:	7820      	ldrb	r0, [r4, #0]
10065b3a:	2110      	movs	r1, #16
10065b3c:	4301      	orrs	r1, r0
10065b3e:	7021      	strb	r1, [r4, #0]
10065b40:	88b8      	ldrh	r0, [r7, #4]
10065b42:	2108      	movs	r1, #8
10065b44:	4388      	bics	r0, r1
10065b46:	80b8      	strh	r0, [r7, #4]
10065b48:	7820      	ldrb	r0, [r4, #0]
10065b4a:	06c0      	lsls	r0, r0, #27
10065b4c:	d500      	bpl.n	10065b50 <GAT_clt_rcv+0x260>
10065b4e:	88fe      	ldrh	r6, [r7, #6]
10065b50:	8861      	ldrh	r1, [r4, #2]
10065b52:	2002      	movs	r0, #2
10065b54:	4632      	mov	r2, r6
10065b56:	f7fe fd49 	bl	100645ec <aci_att_exchange_mtu_resp_event_push_noinline>
10065b5a:	2800      	cmp	r0, #0
10065b5c:	d000      	beq.n	10065b60 <GAT_clt_rcv+0x270>
10065b5e:	e0d8      	b.n	10065d12 <GAT_clt_rcv+0x422>
10065b60:	80fe      	strh	r6, [r7, #6]
10065b62:	88b8      	ldrh	r0, [r7, #4]
10065b64:	2108      	movs	r1, #8
10065b66:	4301      	orrs	r1, r0
10065b68:	2004      	movs	r0, #4
10065b6a:	4381      	bics	r1, r0
10065b6c:	80b9      	strh	r1, [r7, #4]
10065b6e:	4620      	mov	r0, r4
10065b70:	e0dc      	b.n	10065d2c <GAT_clt_rcv+0x43c>
10065b72:	88a2      	ldrh	r2, [r4, #4]
10065b74:	8861      	ldrh	r1, [r4, #2]
10065b76:	200a      	movs	r0, #10
10065b78:	462b      	mov	r3, r5
10065b7a:	f7fe fe9f 	bl	100648bc <aci_att_clt_read_by_group_type_resp_event_push_noinline>
10065b7e:	2800      	cmp	r0, #0
10065b80:	d000      	beq.n	10065b84 <GAT_clt_rcv+0x294>
10065b82:	e0c6      	b.n	10065d12 <GAT_clt_rcv+0x422>
10065b84:	4628      	mov	r0, r5
10065b86:	f7ff fbc4 	bl	10065312 <GAT_att_clt_read_grp_type_get_last_attr_h>
10065b8a:	e00b      	b.n	10065ba4 <GAT_clt_rcv+0x2b4>
10065b8c:	88a2      	ldrh	r2, [r4, #4]
10065b8e:	8861      	ldrh	r1, [r4, #2]
10065b90:	200a      	movs	r0, #10
10065b92:	462b      	mov	r3, r5
10065b94:	f7fe fd98 	bl	100646c8 <aci_att_clt_find_by_type_value_resp_event_push_noinline>
10065b98:	2800      	cmp	r0, #0
10065b9a:	d000      	beq.n	10065b9e <GAT_clt_rcv+0x2ae>
10065b9c:	e0b9      	b.n	10065d12 <GAT_clt_rcv+0x422>
10065b9e:	4628      	mov	r0, r5
10065ba0:	f7ff fbdd 	bl	1006535e <GAT_att_clt_find_type_val_get_last_attr_h>
10065ba4:	498c      	ldr	r1, [pc, #560]	@ (10065dd8 <__arm_cp.4_2>)
10065ba6:	4288      	cmp	r0, r1
10065ba8:	d153      	bne.n	10065c52 <GAT_clt_rcv+0x362>
10065baa:	e0b4      	b.n	10065d16 <GAT_clt_rcv+0x426>
10065bac:	4628      	mov	r0, r5
10065bae:	f000 fa08 	bl	10065fc2 <GAT_att_clt_read_type_get_len>
10065bb2:	9008      	str	r0, [sp, #32]
10065bb4:	8960      	ldrh	r0, [r4, #10]
10065bb6:	a90e      	add	r1, sp, #56	@ 0x38
10065bb8:	8008      	strh	r0, [r1, #0]
10065bba:	4620      	mov	r0, r4
10065bbc:	300c      	adds	r0, #12
10065bbe:	9007      	str	r0, [sp, #28]
10065bc0:	a809      	add	r0, sp, #36	@ 0x24
10065bc2:	300c      	adds	r0, #12
10065bc4:	9005      	str	r0, [sp, #20]
10065bc6:	a80f      	add	r0, sp, #60	@ 0x3c
10065bc8:	1d40      	adds	r0, r0, #5
10065bca:	9006      	str	r0, [sp, #24]
10065bcc:	2600      	movs	r6, #0
10065bce:	b2f7      	uxtb	r7, r6
10065bd0:	aa0f      	add	r2, sp, #60	@ 0x3c
10065bd2:	4628      	mov	r0, r5
10065bd4:	4639      	mov	r1, r7
10065bd6:	f7ff fbfe 	bl	100653d6 <GAT_att_clt_read_type_get_data>
10065bda:	2800      	cmp	r0, #0
10065bdc:	d000      	beq.n	10065be0 <GAT_clt_rcv+0x2f0>
10065bde:	e0a1      	b.n	10065d24 <GAT_clt_rcv+0x434>
10065be0:	9808      	ldr	r0, [sp, #32]
10065be2:	2807      	cmp	r0, #7
10065be4:	d105      	bne.n	10065bf2 <GAT_clt_rcv+0x302>
10065be6:	a809      	add	r0, sp, #36	@ 0x24
10065be8:	2110      	movs	r1, #16
10065bea:	7401      	strb	r1, [r0, #16]
10065bec:	2202      	movs	r2, #2
10065bee:	9805      	ldr	r0, [sp, #20]
10065bf0:	e003      	b.n	10065bfa <GAT_clt_rcv+0x30a>
10065bf2:	a809      	add	r0, sp, #36	@ 0x24
10065bf4:	2180      	movs	r1, #128	@ 0x80
10065bf6:	7401      	strb	r1, [r0, #16]
10065bf8:	2210      	movs	r2, #16
10065bfa:	9906      	ldr	r1, [sp, #24]
10065bfc:	f7ed fb9a 	bl	10053334 <BLEPLAT_MemCpy>
10065c00:	a80e      	add	r0, sp, #56	@ 0x38
10065c02:	a90f      	add	r1, sp, #60	@ 0x3c
10065c04:	2202      	movs	r2, #2
10065c06:	f7ed fb95 	bl	10053334 <BLEPLAT_MemCpy>
10065c0a:	a809      	add	r0, sp, #36	@ 0x24
10065c0c:	9907      	ldr	r1, [sp, #28]
10065c0e:	f7fd fdcf 	bl	100637b0 <UUID_cmp_128bits>
10065c12:	2800      	cmp	r0, #0
10065c14:	d10d      	bne.n	10065c32 <GAT_clt_rcv+0x342>
10065c16:	88a2      	ldrh	r2, [r4, #4]
10065c18:	8861      	ldrh	r1, [r4, #2]
10065c1a:	9808      	ldr	r0, [sp, #32]
10065c1c:	9000      	str	r0, [sp, #0]
10065c1e:	9501      	str	r5, [sp, #4]
10065c20:	4347      	muls	r7, r0
10065c22:	1cb8      	adds	r0, r7, #2
10065c24:	b283      	uxth	r3, r0
10065c26:	2002      	movs	r0, #2
10065c28:	f7fe fb8c 	bl	10064344 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>
10065c2c:	2800      	cmp	r0, #0
10065c2e:	d000      	beq.n	10065c32 <GAT_clt_rcv+0x342>
10065c30:	e082      	b.n	10065d38 <GAT_clt_rcv+0x448>
10065c32:	1c76      	adds	r6, r6, #1
10065c34:	e7cb      	b.n	10065bce <GAT_clt_rcv+0x2de>
10065c36:	88a2      	ldrh	r2, [r4, #4]
10065c38:	8861      	ldrh	r1, [r4, #2]
10065c3a:	200a      	movs	r0, #10
10065c3c:	462b      	mov	r3, r5
10065c3e:	f7fe fd11 	bl	10064664 <aci_att_clt_find_info_resp_event_push_noinline>
10065c42:	2800      	cmp	r0, #0
10065c44:	d165      	bne.n	10065d12 <GAT_clt_rcv+0x422>
10065c46:	4628      	mov	r0, r5
10065c48:	f7ff fbe0 	bl	1006540c <GAT_att_clt_find_info_get_last_attr_h>
10065c4c:	8961      	ldrh	r1, [r4, #10]
10065c4e:	4288      	cmp	r0, r1
10065c50:	d261      	bcs.n	10065d16 <GAT_clt_rcv+0x426>
10065c52:	1c40      	adds	r0, r0, #1
10065c54:	8120      	strh	r0, [r4, #8]
10065c56:	e061      	b.n	10065d1c <GAT_clt_rcv+0x42c>
10065c58:	88a2      	ldrh	r2, [r4, #4]
10065c5a:	8861      	ldrh	r1, [r4, #2]
10065c5c:	200a      	movs	r0, #10
10065c5e:	462b      	mov	r3, r5
10065c60:	f7fe fd96 	bl	10064790 <aci_att_clt_read_resp_event_push_noinline>
10065c64:	e053      	b.n	10065d0e <GAT_clt_rcv+0x41e>
10065c66:	4628      	mov	r0, r5
10065c68:	f000 f9ab 	bl	10065fc2 <GAT_att_clt_read_type_get_len>
10065c6c:	4606      	mov	r6, r0
10065c6e:	9406      	str	r4, [sp, #24]
10065c70:	8860      	ldrh	r0, [r4, #2]
10065c72:	f7f0 fe6b 	bl	1005694c <GAP_started_gatt_proc>
10065c76:	9008      	str	r0, [sp, #32]
10065c78:	2402      	movs	r4, #2
10065c7a:	8868      	ldrh	r0, [r5, #2]
10065c7c:	b2a3      	uxth	r3, r4
10065c7e:	4283      	cmp	r3, r0
10065c80:	d253      	bcs.n	10065d2a <GAT_clt_rcv+0x43a>
10065c82:	9808      	ldr	r0, [sp, #32]
10065c84:	2801      	cmp	r0, #1
10065c86:	d10e      	bne.n	10065ca6 <GAT_clt_rcv+0x3b6>
10065c88:	89a8      	ldrh	r0, [r5, #12]
10065c8a:	1900      	adds	r0, r0, r4
10065c8c:	b281      	uxth	r1, r0
10065c8e:	af0f      	add	r7, sp, #60	@ 0x3c
10065c90:	4628      	mov	r0, r5
10065c92:	4632      	mov	r2, r6
10065c94:	463b      	mov	r3, r7
10065c96:	f7ef ff01 	bl	10055a9c <ACL_pkt_read>
10065c9a:	205c      	movs	r0, #92	@ 0x5c
10065c9c:	4631      	mov	r1, r6
10065c9e:	463a      	mov	r2, r7
10065ca0:	f7f0 fff0 	bl	10056c84 <GAP_internal_evt_handler>
10065ca4:	e01a      	b.n	10065cdc <GAT_clt_rcv+0x3ec>
10065ca6:	9f06      	ldr	r7, [sp, #24]
10065ca8:	88ba      	ldrh	r2, [r7, #4]
10065caa:	8879      	ldrh	r1, [r7, #2]
10065cac:	9600      	str	r6, [sp, #0]
10065cae:	9501      	str	r5, [sp, #4]
10065cb0:	2002      	movs	r0, #2
10065cb2:	f7fe fb47 	bl	10064344 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>
10065cb6:	2800      	cmp	r0, #0
10065cb8:	d12b      	bne.n	10065d12 <GAT_clt_rcv+0x422>
10065cba:	7f38      	ldrb	r0, [r7, #28]
10065cbc:	2810      	cmp	r0, #16
10065cbe:	d10d      	bne.n	10065cdc <GAT_clt_rcv+0x3ec>
10065cc0:	9806      	ldr	r0, [sp, #24]
10065cc2:	8b00      	ldrh	r0, [r0, #24]
10065cc4:	4942      	ldr	r1, [pc, #264]	@ (10065dd0 <__arm_cp.4_0>)
10065cc6:	4288      	cmp	r0, r1
10065cc8:	d108      	bne.n	10065cdc <GAT_clt_rcv+0x3ec>
10065cca:	9806      	ldr	r0, [sp, #24]
10065ccc:	8840      	ldrh	r0, [r0, #2]
10065cce:	2104      	movs	r1, #4
10065cd0:	f7f1 fd52 	bl	10057778 <GAT_att_cmn_get_channel_descr_p>
10065cd4:	8881      	ldrh	r1, [r0, #4]
10065cd6:	4a3f      	ldr	r2, [pc, #252]	@ (10065dd4 <__arm_cp.4_1>)
10065cd8:	4011      	ands	r1, r2
10065cda:	8081      	strh	r1, [r0, #4]
10065cdc:	19a4      	adds	r4, r4, r6
10065cde:	e7cc      	b.n	10065c7a <GAT_clt_rcv+0x38a>
10065ce0:	88a2      	ldrh	r2, [r4, #4]
10065ce2:	8861      	ldrh	r1, [r4, #2]
10065ce4:	200a      	movs	r0, #10
10065ce6:	462b      	mov	r3, r5
10065ce8:	f7fe fd84 	bl	100647f4 <aci_att_clt_read_blob_resp_event_push_noinline>
10065cec:	2800      	cmp	r0, #0
10065cee:	d110      	bne.n	10065d12 <GAT_clt_rcv+0x422>
10065cf0:	9808      	ldr	r0, [sp, #32]
10065cf2:	88c0      	ldrh	r0, [r0, #6]
10065cf4:	1e41      	subs	r1, r0, #1
10065cf6:	8868      	ldrh	r0, [r5, #2]
10065cf8:	1e40      	subs	r0, r0, #1
10065cfa:	b282      	uxth	r2, r0
10065cfc:	4291      	cmp	r1, r2
10065cfe:	d80a      	bhi.n	10065d16 <GAT_clt_rcv+0x426>
10065d00:	8961      	ldrh	r1, [r4, #10]
10065d02:	1808      	adds	r0, r1, r0
10065d04:	8160      	strh	r0, [r4, #10]
10065d06:	e009      	b.n	10065d1c <GAT_clt_rcv+0x42c>
10065d08:	462b      	mov	r3, r5
10065d0a:	f7fe fed9 	bl	10064ac0 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline>
10065d0e:	2800      	cmp	r0, #0
10065d10:	d001      	beq.n	10065d16 <GAT_clt_rcv+0x426>
10065d12:	2684      	movs	r6, #132	@ 0x84
10065d14:	e003      	b.n	10065d1e <GAT_clt_rcv+0x42e>
10065d16:	4620      	mov	r0, r4
10065d18:	f000 f879 	bl	10065e0e <GAT_clt_stop_proc>
10065d1c:	9e07      	ldr	r6, [sp, #28]
10065d1e:	4630      	mov	r0, r6
10065d20:	b015      	add	sp, #84	@ 0x54
10065d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
10065d24:	a80e      	add	r0, sp, #56	@ 0x38
10065d26:	8800      	ldrh	r0, [r0, #0]
10065d28:	e00a      	b.n	10065d40 <GAT_clt_rcv+0x450>
10065d2a:	9806      	ldr	r0, [sp, #24]
10065d2c:	f000 f86f 	bl	10065e0e <GAT_clt_stop_proc>
10065d30:	4628      	mov	r0, r5
10065d32:	f7ef fe97 	bl	10055a64 <ACL_pkt_release>
10065d36:	e7f1      	b.n	10065d1c <GAT_clt_rcv+0x42c>
10065d38:	980e      	ldr	r0, [sp, #56]	@ 0x38
10065d3a:	1e40      	subs	r0, r0, #1
10065d3c:	a90e      	add	r1, sp, #56	@ 0x38
10065d3e:	8008      	strh	r0, [r1, #0]
10065d40:	8961      	ldrh	r1, [r4, #10]
10065d42:	b282      	uxth	r2, r0
10065d44:	428a      	cmp	r2, r1
10065d46:	d202      	bcs.n	10065d4e <GAT_clt_rcv+0x45e>
10065d48:	1c40      	adds	r0, r0, #1
10065d4a:	8120      	strh	r0, [r4, #8]
10065d4c:	e002      	b.n	10065d54 <GAT_clt_rcv+0x464>
10065d4e:	4620      	mov	r0, r4
10065d50:	f000 f85d 	bl	10065e0e <GAT_clt_stop_proc>
10065d54:	4628      	mov	r0, r5
10065d56:	f7ef fe85 	bl	10055a64 <ACL_pkt_release>
10065d5a:	2600      	movs	r6, #0
10065d5c:	e7df      	b.n	10065d1e <GAT_clt_rcv+0x42e>
10065d5e:	8961      	ldrh	r1, [r4, #10]
10065d60:	9a08      	ldr	r2, [sp, #32]
10065d62:	89a0      	ldrh	r0, [r4, #12]
10065d64:	1840      	adds	r0, r0, r1
10065d66:	8160      	strh	r0, [r4, #10]
10065d68:	b280      	uxth	r0, r0
10065d6a:	435f      	muls	r7, r3
10065d6c:	19d1      	adds	r1, r2, r7
10065d6e:	8889      	ldrh	r1, [r1, #4]
10065d70:	4288      	cmp	r0, r1
10065d72:	d1d3      	bne.n	10065d1c <GAT_clt_rcv+0x42c>
10065d74:	7a20      	ldrb	r0, [r4, #8]
10065d76:	1e40      	subs	r0, r0, #1
10065d78:	4298      	cmp	r0, r3
10065d7a:	d924      	bls.n	10065dc6 <GAT_clt_rcv+0x4d6>
10065d7c:	2600      	movs	r6, #0
10065d7e:	8166      	strh	r6, [r4, #10]
10065d80:	7a60      	ldrb	r0, [r4, #9]
10065d82:	1c40      	adds	r0, r0, #1
10065d84:	7260      	strb	r0, [r4, #9]
10065d86:	e7ca      	b.n	10065d1e <GAT_clt_rcv+0x42e>
10065d88:	43f0      	mvns	r0, r6
10065d8a:	9003      	str	r0, [sp, #12]
10065d8c:	9b06      	ldr	r3, [sp, #24]
10065d8e:	9d08      	ldr	r5, [sp, #32]
10065d90:	4639      	mov	r1, r7
10065d92:	4359      	muls	r1, r3
10065d94:	5a6a      	ldrh	r2, [r5, r1]
10065d96:	4628      	mov	r0, r5
10065d98:	9d05      	ldr	r5, [sp, #20]
10065d9a:	4295      	cmp	r5, r2
10065d9c:	d10b      	bne.n	10065db6 <GAT_clt_rcv+0x4c6>
10065d9e:	4602      	mov	r2, r0
10065da0:	1841      	adds	r1, r0, r1
10065da2:	884a      	ldrh	r2, [r1, #2]
10065da4:	8961      	ldrh	r1, [r4, #10]
10065da6:	188a      	adds	r2, r1, r2
10065da8:	9d04      	ldr	r5, [sp, #16]
10065daa:	42aa      	cmp	r2, r5
10065dac:	d103      	bne.n	10065db6 <GAT_clt_rcv+0x4c6>
10065dae:	4602      	mov	r2, r0
10065db0:	9803      	ldr	r0, [sp, #12]
10065db2:	2800      	cmp	r0, #0
10065db4:	d0d5      	beq.n	10065d62 <GAT_clt_rcv+0x472>
10065db6:	7226      	strb	r6, [r4, #8]
10065db8:	200f      	movs	r0, #15
10065dba:	71a0      	strb	r0, [r4, #6]
10065dbc:	7820      	ldrb	r0, [r4, #0]
10065dbe:	2110      	movs	r1, #16
10065dc0:	4301      	orrs	r1, r0
10065dc2:	7021      	strb	r1, [r4, #0]
10065dc4:	e7ab      	b.n	10065d1e <GAT_clt_rcv+0x42e>
10065dc6:	2001      	movs	r0, #1
10065dc8:	7220      	strb	r0, [r4, #8]
10065dca:	200f      	movs	r0, #15
10065dcc:	71a0      	strb	r0, [r4, #6]
10065dce:	e7a5      	b.n	10065d1c <GAT_clt_rcv+0x42c>

10065dd0 <__arm_cp.4_0>:
10065dd0:	00002b2a 	.word	0x00002b2a

10065dd4 <__arm_cp.4_1>:
10065dd4:	0000fdff 	.word	0x0000fdff

10065dd8 <__arm_cp.4_2>:
10065dd8:	0000ffff 	.word	0x0000ffff

10065ddc <__arm_cp.4_3>:
10065ddc:	2000296c 	.word	0x2000296c

10065de0 <GAT_clt_get_proc_per_channel>:
10065de0:	4a07      	ldr	r2, [pc, #28]	@ (10065e00 <__arm_cp.5_0>)
10065de2:	6812      	ldr	r2, [r2, #0]
10065de4:	3248      	adds	r2, #72	@ 0x48
10065de6:	6812      	ldr	r2, [r2, #0]
10065de8:	2a00      	cmp	r2, #0
10065dea:	d007      	beq.n	10065dfc <GAT_clt_get_proc_per_channel+0x1c>
10065dec:	8853      	ldrh	r3, [r2, #2]
10065dee:	4283      	cmp	r3, r0
10065df0:	d102      	bne.n	10065df8 <GAT_clt_get_proc_per_channel+0x18>
10065df2:	8893      	ldrh	r3, [r2, #4]
10065df4:	428b      	cmp	r3, r1
10065df6:	d001      	beq.n	10065dfc <GAT_clt_get_proc_per_channel+0x1c>
10065df8:	3220      	adds	r2, #32
10065dfa:	e7f4      	b.n	10065de6 <GAT_clt_get_proc_per_channel+0x6>
10065dfc:	4610      	mov	r0, r2
10065dfe:	4770      	bx	lr

10065e00 <__arm_cp.5_0>:
10065e00:	20002910 	.word	0x20002910

10065e04 <GAT_att_cmn_get_opcode>:
10065e04:	b580      	push	{r7, lr}
10065e06:	8981      	ldrh	r1, [r0, #12]
10065e08:	f000 f8cb 	bl	10065fa2 <ACL_pkt_read_8b>
10065e0c:	bd80      	pop	{r7, pc}

10065e0e <GAT_clt_stop_proc>:
10065e0e:	b580      	push	{r7, lr}
10065e10:	7801      	ldrb	r1, [r0, #0]
10065e12:	2208      	movs	r2, #8
10065e14:	430a      	orrs	r2, r1
10065e16:	7002      	strb	r2, [r0, #0]
10065e18:	200c      	movs	r0, #12
10065e1a:	f7fd fb21 	bl	10063460 <tsk_notify_idx>
10065e1e:	f7ec fca2 	bl	10052766 <BLE_STACK_ProcessRequest>
10065e22:	bd80      	pop	{r7, pc}

10065e24 <GAT_clt_rcv_corrupted>:
10065e24:	b510      	push	{r4, lr}
10065e26:	8804      	ldrh	r4, [r0, #0]
10065e28:	f7f4 fb33 	bl	1005a492 <L2C_get_cid_from_basic_packet_header>
10065e2c:	4601      	mov	r1, r0
10065e2e:	4620      	mov	r0, r4
10065e30:	f7ff ffd6 	bl	10065de0 <GAT_clt_get_proc_per_channel>
10065e34:	2800      	cmp	r0, #0
10065e36:	d008      	beq.n	10065e4a <GAT_clt_rcv_corrupted+0x26>
10065e38:	7801      	ldrb	r1, [r0, #0]
10065e3a:	2218      	movs	r2, #24
10065e3c:	430a      	orrs	r2, r1
10065e3e:	7002      	strb	r2, [r0, #0]
10065e40:	200c      	movs	r0, #12
10065e42:	f7fd fb0d 	bl	10063460 <tsk_notify_idx>
10065e46:	f7ec fc8e 	bl	10052766 <BLE_STACK_ProcessRequest>
10065e4a:	2000      	movs	r0, #0
10065e4c:	bd10      	pop	{r4, pc}

10065e4e <GAT_clt_rcv_srv_initiated>:
10065e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
10065e50:	b085      	sub	sp, #20
10065e52:	4604      	mov	r4, r0
10065e54:	8805      	ldrh	r5, [r0, #0]
10065e56:	8980      	ldrh	r0, [r0, #12]
10065e58:	1c46      	adds	r6, r0, #1
10065e5a:	4620      	mov	r0, r4
10065e5c:	f7ff ffd2 	bl	10065e04 <GAT_att_cmn_get_opcode>
10065e60:	2823      	cmp	r0, #35	@ 0x23
10065e62:	d010      	beq.n	10065e86 <GAT_clt_rcv_srv_initiated+0x38>
10065e64:	b2b1      	uxth	r1, r6
10065e66:	281b      	cmp	r0, #27
10065e68:	d122      	bne.n	10065eb0 <GAT_clt_rcv_srv_initiated+0x62>
10065e6a:	4620      	mov	r0, r4
10065e6c:	f7ef fe1f 	bl	10055aae <ACL_pkt_read_16b>
10065e70:	4601      	mov	r1, r0
10065e72:	4628      	mov	r0, r5
10065e74:	f000 f85c 	bl	10065f30 <GAT_clt_check_security>
10065e78:	2800      	cmp	r0, #0
10065e7a:	d03d      	beq.n	10065ef8 <GAT_clt_rcv_srv_initiated+0xaa>
10065e7c:	4620      	mov	r0, r4
10065e7e:	f7ef fdf1 	bl	10055a64 <ACL_pkt_release>
10065e82:	2500      	movs	r5, #0
10065e84:	e050      	b.n	10065f28 <GAT_clt_rcv_srv_initiated+0xda>
10065e86:	8867      	ldrh	r7, [r4, #2]
10065e88:	b2b1      	uxth	r1, r6
10065e8a:	4620      	mov	r0, r4
10065e8c:	42b9      	cmp	r1, r7
10065e8e:	d22a      	bcs.n	10065ee6 <GAT_clt_rcv_srv_initiated+0x98>
10065e90:	f7ef fe0d 	bl	10055aae <ACL_pkt_read_16b>
10065e94:	4601      	mov	r1, r0
10065e96:	4628      	mov	r0, r5
10065e98:	f000 f84a 	bl	10065f30 <GAT_clt_check_security>
10065e9c:	2800      	cmp	r0, #0
10065e9e:	d1ed      	bne.n	10065e7c <GAT_clt_rcv_srv_initiated+0x2e>
10065ea0:	1cb0      	adds	r0, r6, #2
10065ea2:	b281      	uxth	r1, r0
10065ea4:	4620      	mov	r0, r4
10065ea6:	f7ef fe02 	bl	10055aae <ACL_pkt_read_16b>
10065eaa:	1830      	adds	r0, r6, r0
10065eac:	1d06      	adds	r6, r0, #4
10065eae:	e7eb      	b.n	10065e88 <GAT_clt_rcv_srv_initiated+0x3a>
10065eb0:	4620      	mov	r0, r4
10065eb2:	f7ef fdfc 	bl	10055aae <ACL_pkt_read_16b>
10065eb6:	4601      	mov	r1, r0
10065eb8:	4628      	mov	r0, r5
10065eba:	f000 f839 	bl	10065f30 <GAT_clt_check_security>
10065ebe:	2800      	cmp	r0, #0
10065ec0:	d024      	beq.n	10065f0c <GAT_clt_rcv_srv_initiated+0xbe>
10065ec2:	466e      	mov	r6, sp
10065ec4:	8075      	strh	r5, [r6, #2]
10065ec6:	4620      	mov	r0, r4
10065ec8:	f7f4 fae3 	bl	1005a492 <L2C_get_cid_from_basic_packet_header>
10065ecc:	80b0      	strh	r0, [r6, #4]
10065ece:	201e      	movs	r0, #30
10065ed0:	7030      	strb	r0, [r6, #0]
10065ed2:	4630      	mov	r0, r6
10065ed4:	f7ff f860 	bl	10064f98 <GAT_att_clt_tx>
10065ed8:	4605      	mov	r5, r0
10065eda:	2800      	cmp	r0, #0
10065edc:	d120      	bne.n	10065f20 <GAT_clt_rcv_srv_initiated+0xd2>
10065ede:	4620      	mov	r0, r4
10065ee0:	f7ef fdc0 	bl	10055a64 <ACL_pkt_release>
10065ee4:	e01c      	b.n	10065f20 <GAT_clt_rcv_srv_initiated+0xd2>
10065ee6:	f7f4 fad4 	bl	1005a492 <L2C_get_cid_from_basic_packet_header>
10065eea:	4602      	mov	r2, r0
10065eec:	200a      	movs	r0, #10
10065eee:	4629      	mov	r1, r5
10065ef0:	4623      	mov	r3, r4
10065ef2:	f7fe fb49 	bl	10064588 <aci_gatt_clt_multi_notification_int_event_push_noinline>
10065ef6:	e012      	b.n	10065f1e <GAT_clt_rcv_srv_initiated+0xd0>
10065ef8:	4620      	mov	r0, r4
10065efa:	f7f4 faca 	bl	1005a492 <L2C_get_cid_from_basic_packet_header>
10065efe:	4602      	mov	r2, r0
10065f00:	200a      	movs	r0, #10
10065f02:	4629      	mov	r1, r5
10065f04:	4623      	mov	r3, r4
10065f06:	f7fe f9a5 	bl	10064254 <aci_gatt_clt_notification_event_push_noinline>
10065f0a:	e008      	b.n	10065f1e <GAT_clt_rcv_srv_initiated+0xd0>
10065f0c:	4620      	mov	r0, r4
10065f0e:	f7f4 fac0 	bl	1005a492 <L2C_get_cid_from_basic_packet_header>
10065f12:	4602      	mov	r2, r0
10065f14:	200a      	movs	r0, #10
10065f16:	4629      	mov	r1, r5
10065f18:	4623      	mov	r3, r4
10065f1a:	f7fe f969 	bl	100641f0 <aci_gatt_clt_indication_event_push_noinline>
10065f1e:	4605      	mov	r5, r0
10065f20:	2d00      	cmp	r5, #0
10065f22:	d001      	beq.n	10065f28 <GAT_clt_rcv_srv_initiated+0xda>
10065f24:	207b      	movs	r0, #123	@ 0x7b
10065f26:	43c5      	mvns	r5, r0
10065f28:	b2e8      	uxtb	r0, r5
10065f2a:	b005      	add	sp, #20
10065f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10065f30 <GAT_clt_check_security>:
10065f30:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
10065f32:	4604      	mov	r4, r0
10065f34:	f000 f822 	bl	10065f7c <GAT_clt_find_sec_level_entry_p>
10065f38:	4605      	mov	r5, r0
10065f3a:	2800      	cmp	r0, #0
10065f3c:	d106      	bne.n	10065f4c <GAT_clt_check_security+0x1c>
10065f3e:	480e      	ldr	r0, [pc, #56]	@ (10065f78 <__arm_cp.13_0>)
10065f40:	4601      	mov	r1, r0
10065f42:	f000 f81b 	bl	10065f7c <GAT_clt_find_sec_level_entry_p>
10065f46:	4605      	mov	r5, r0
10065f48:	2800      	cmp	r0, #0
10065f4a:	d002      	beq.n	10065f52 <GAT_clt_check_security+0x22>
10065f4c:	7828      	ldrb	r0, [r5, #0]
10065f4e:	2802      	cmp	r0, #2
10065f50:	d201      	bcs.n	10065f56 <GAT_clt_check_security+0x26>
10065f52:	2000      	movs	r0, #0
10065f54:	e00d      	b.n	10065f72 <GAT_clt_check_security+0x42>
10065f56:	a903      	add	r1, sp, #12
10065f58:	aa02      	add	r2, sp, #8
10065f5a:	ab01      	add	r3, sp, #4
10065f5c:	4620      	mov	r0, r4
10065f5e:	f7fd f8a6 	bl	100630ae <smp_sap_get_security_level>
10065f62:	2800      	cmp	r0, #0
10065f64:	d104      	bne.n	10065f70 <GAT_clt_check_security+0x40>
10065f66:	7828      	ldrb	r0, [r5, #0]
10065f68:	a902      	add	r1, sp, #8
10065f6a:	7809      	ldrb	r1, [r1, #0]
10065f6c:	4281      	cmp	r1, r0
10065f6e:	d2f0      	bcs.n	10065f52 <GAT_clt_check_security+0x22>
10065f70:	20c0      	movs	r0, #192	@ 0xc0
10065f72:	b004      	add	sp, #16
10065f74:	bdb0      	pop	{r4, r5, r7, pc}
10065f76:	46c0      	nop			@ (mov r8, r8)

10065f78 <__arm_cp.13_0>:
10065f78:	0000ffff 	.word	0x0000ffff

10065f7c <GAT_clt_find_sec_level_entry_p>:
10065f7c:	4a07      	ldr	r2, [pc, #28]	@ (10065f9c <__arm_cp.15_0>)
10065f7e:	6812      	ldr	r2, [r2, #0]
10065f80:	3258      	adds	r2, #88	@ 0x58
10065f82:	6812      	ldr	r2, [r2, #0]
10065f84:	2a00      	cmp	r2, #0
10065f86:	d007      	beq.n	10065f98 <GAT_clt_find_sec_level_entry_p+0x1c>
10065f88:	8893      	ldrh	r3, [r2, #4]
10065f8a:	4283      	cmp	r3, r0
10065f8c:	d102      	bne.n	10065f94 <GAT_clt_find_sec_level_entry_p+0x18>
10065f8e:	8853      	ldrh	r3, [r2, #2]
10065f90:	428b      	cmp	r3, r1
10065f92:	d001      	beq.n	10065f98 <GAT_clt_find_sec_level_entry_p+0x1c>
10065f94:	3208      	adds	r2, #8
10065f96:	e7f4      	b.n	10065f82 <GAT_clt_find_sec_level_entry_p+0x6>
10065f98:	4610      	mov	r0, r2
10065f9a:	4770      	bx	lr

10065f9c <__arm_cp.15_0>:
10065f9c:	20002910 	.word	0x20002910

10065fa0 <GAT_clt_exec_empty>:
10065fa0:	4770      	bx	lr

10065fa2 <ACL_pkt_read_8b>:
10065fa2:	b51c      	push	{r2, r3, r4, lr}
10065fa4:	291f      	cmp	r1, #31
10065fa6:	d803      	bhi.n	10065fb0 <ACL_pkt_read_8b+0xe>
10065fa8:	aa01      	add	r2, sp, #4
10065faa:	8011      	strh	r1, [r2, #0]
10065fac:	6840      	ldr	r0, [r0, #4]
10065fae:	e005      	b.n	10065fbc <ACL_pkt_read_8b+0x1a>
10065fb0:	6840      	ldr	r0, [r0, #4]
10065fb2:	ac01      	add	r4, sp, #4
10065fb4:	4622      	mov	r2, r4
10065fb6:	f7fb fd1c 	bl	100619f2 <Mem_Buff_get_buff_off>
10065fba:	8821      	ldrh	r1, [r4, #0]
10065fbc:	1840      	adds	r0, r0, r1
10065fbe:	7900      	ldrb	r0, [r0, #4]
10065fc0:	bd1c      	pop	{r2, r3, r4, pc}

10065fc2 <GAT_att_clt_read_type_get_len>:
10065fc2:	b580      	push	{r7, lr}
10065fc4:	8981      	ldrh	r1, [r0, #12]
10065fc6:	1c49      	adds	r1, r1, #1
10065fc8:	b289      	uxth	r1, r1
10065fca:	f7ff ffea 	bl	10065fa2 <ACL_pkt_read_8b>
10065fce:	bd80      	pop	{r7, pc}

10065fd0 <L2C_cos_process_cfc_mode_command_ucfg_weak>:
10065fd0:	2000      	movs	r0, #0
10065fd2:	4770      	bx	lr

10065fd4 <L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak>:
10065fd4:	2000      	movs	r0, #0
10065fd6:	4770      	bx	lr

10065fd8 <l2c_cos_hndl_incoming_le_frame_ucfg_weak>:
10065fd8:	b580      	push	{r7, lr}
10065fda:	6841      	ldr	r1, [r0, #4]
10065fdc:	7800      	ldrb	r0, [r0, #0]
10065fde:	f7f4 fa53 	bl	1005a488 <l2c_release_unexpected_acl_packet>
10065fe2:	2000      	movs	r0, #0
10065fe4:	bd80      	pop	{r7, pc}

10065fe6 <l2c_cos_sdu_reassembly_tsk_ucfg_weak>:
10065fe6:	4770      	bx	lr

10065fe8 <llc_big_brc_mem_alloc_ucfg_weak>:
10065fe8:	4770      	bx	lr

10065fea <llc_big_sync_mem_alloc_ucfg_weak>:
10065fea:	4770      	bx	lr

10065fec <llc_cig_cmn_mem_alloc_ucfg_weak>:
10065fec:	4770      	bx	lr

10065fee <llc_conn_cancel_slot>:
10065fee:	b570      	push	{r4, r5, r6, lr}
10065ff0:	4604      	mov	r4, r0
10065ff2:	2030      	movs	r0, #48	@ 0x30
10065ff4:	5c25      	ldrb	r5, [r4, r0]
10065ff6:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
10065ff8:	f7f4 fe03 	bl	1005ac02 <llc_cig_cmn_terminate_cises_on_acl_ucfg_weak>
10065ffc:	20ff      	movs	r0, #255	@ 0xff
10065ffe:	3012      	adds	r0, #18
10066000:	1826      	adds	r6, r4, r0
10066002:	4628      	mov	r0, r5
10066004:	f7f6 fbbc 	bl	1005c780 <llc_pscan_wr_check_pawr_active_ucfg_weak>
10066008:	2800      	cmp	r0, #0
1006600a:	d004      	beq.n	10066016 <llc_conn_cancel_slot+0x28>
1006600c:	3430      	adds	r4, #48	@ 0x30
1006600e:	7c60      	ldrb	r0, [r4, #17]
10066010:	2101      	movs	r1, #1
10066012:	f7fb fa69 	bl	100614e8 <LL_sched_set_per_state>
10066016:	2000      	movs	r0, #0
10066018:	7030      	strb	r0, [r6, #0]
1006601a:	2015      	movs	r0, #21
1006601c:	f7fd fa20 	bl	10063460 <tsk_notify_idx>
10066020:	f7ec fba1 	bl	10052766 <BLE_STACK_ProcessRequest>
10066024:	bd70      	pop	{r4, r5, r6, pc}

10066026 <llc_conn_program_slot>:
10066026:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10066028:	4604      	mov	r4, r0
1006602a:	f7ee fae8 	bl	100545fe <BLEPLAT_CNTR_PacketGetDataPtr>
1006602e:	4605      	mov	r5, r0
10066030:	2101      	movs	r1, #1
10066032:	4620      	mov	r0, r4
10066034:	f7f5 f886 	bl	1005b144 <llc_conn_get_ctrl_pdu_data_p>
10066038:	4626      	mov	r6, r4
1006603a:	362c      	adds	r6, #44	@ 0x2c
1006603c:	4621      	mov	r1, r4
1006603e:	3128      	adds	r1, #40	@ 0x28
10066040:	428d      	cmp	r5, r1
10066042:	d010      	beq.n	10066066 <llc_conn_program_slot+0x40>
10066044:	4285      	cmp	r5, r0
10066046:	d00e      	beq.n	10066066 <llc_conn_program_slot+0x40>
10066048:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
1006604a:	4620      	mov	r0, r4
1006604c:	f7f4 ffce 	bl	1005afec <llc_conn_copy_tx_data_packet>
10066050:	2101      	movs	r1, #1
10066052:	4620      	mov	r0, r4
10066054:	f7f5 f87c 	bl	1005b150 <llc_conn_get_enc_on>
10066058:	2801      	cmp	r0, #1
1006605a:	d104      	bne.n	10066066 <llc_conn_program_slot+0x40>
1006605c:	7868      	ldrb	r0, [r5, #1]
1006605e:	2800      	cmp	r0, #0
10066060:	d001      	beq.n	10066066 <llc_conn_program_slot+0x40>
10066062:	1d00      	adds	r0, r0, #4
10066064:	7068      	strb	r0, [r5, #1]
10066066:	4625      	mov	r5, r4
10066068:	35d0      	adds	r5, #208	@ 0xd0
1006606a:	7830      	ldrb	r0, [r6, #0]
1006606c:	2803      	cmp	r0, #3
1006606e:	d113      	bne.n	10066098 <llc_conn_program_slot+0x72>
10066070:	a801      	add	r0, sp, #4
10066072:	f7fb f837 	bl	100610e4 <LL_sched_anchorstretch>
10066076:	2801      	cmp	r0, #1
10066078:	d006      	beq.n	10066088 <llc_conn_program_slot+0x62>
1006607a:	2800      	cmp	r0, #0
1006607c:	d10a      	bne.n	10066094 <llc_conn_program_slot+0x6e>
1006607e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
10066080:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
10066082:	0049      	lsls	r1, r1, #1
10066084:	1808      	adds	r0, r1, r0
10066086:	e006      	b.n	10066096 <llc_conn_program_slot+0x70>
10066088:	6d21      	ldr	r1, [r4, #80]	@ 0x50
1006608a:	9801      	ldr	r0, [sp, #4]
1006608c:	4288      	cmp	r0, r1
1006608e:	d302      	bcc.n	10066096 <llc_conn_program_slot+0x70>
10066090:	4608      	mov	r0, r1
10066092:	e000      	b.n	10066096 <llc_conn_program_slot+0x70>
10066094:	6d20      	ldr	r0, [r4, #80]	@ 0x50
10066096:	6068      	str	r0, [r5, #4]
10066098:	4620      	mov	r0, r4
1006609a:	f7f5 f887 	bl	1005b1ac <llc_conn_guard_time_for_close_conn_event>
1006609e:	4620      	mov	r0, r4
100660a0:	f7f6 f948 	bl	1005c334 <llc_conn_update_receive_window>
100660a4:	6829      	ldr	r1, [r5, #0]
100660a6:	3414      	adds	r4, #20
100660a8:	4620      	mov	r0, r4
100660aa:	f7ee fbf0 	bl	1005488e <BLEPLAT_CNTR_SetRcvLen>
100660ae:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

100660b0 <llc_conn_skip_slot>:
100660b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100660b2:	b089      	sub	sp, #36	@ 0x24
100660b4:	2242      	movs	r2, #66	@ 0x42
100660b6:	5a85      	ldrh	r5, [r0, r2]
100660b8:	6c42      	ldr	r2, [r0, #68]	@ 0x44
100660ba:	9201      	str	r2, [sp, #4]
100660bc:	1851      	adds	r1, r2, r1
100660be:	9106      	str	r1, [sp, #24]
100660c0:	2191      	movs	r1, #145	@ 0x91
100660c2:	0049      	lsls	r1, r1, #1
100660c4:	1841      	adds	r1, r0, r1
100660c6:	9102      	str	r1, [sp, #8]
100660c8:	4601      	mov	r1, r0
100660ca:	3142      	adds	r1, #66	@ 0x42
100660cc:	9105      	str	r1, [sp, #20]
100660ce:	4601      	mov	r1, r0
100660d0:	312d      	adds	r1, #45	@ 0x2d
100660d2:	9103      	str	r1, [sp, #12]
100660d4:	9007      	str	r0, [sp, #28]
100660d6:	309a      	adds	r0, #154	@ 0x9a
100660d8:	9004      	str	r0, [sp, #16]
100660da:	2000      	movs	r0, #0
100660dc:	9008      	str	r0, [sp, #32]
100660de:	b2a9      	uxth	r1, r5
100660e0:	2201      	movs	r2, #1
100660e2:	9e07      	ldr	r6, [sp, #28]
100660e4:	4630      	mov	r0, r6
100660e6:	f7f5 fb06 	bl	1005b6f6 <llc_conn_calc_skip_ucfg_weak>
100660ea:	6cf1      	ldr	r1, [r6, #76]	@ 0x4c
100660ec:	4341      	muls	r1, r0
100660ee:	6c72      	ldr	r2, [r6, #68]	@ 0x44
100660f0:	1854      	adds	r4, r2, r1
100660f2:	6474      	str	r4, [r6, #68]	@ 0x44
100660f4:	9908      	ldr	r1, [sp, #32]
100660f6:	1841      	adds	r1, r0, r1
100660f8:	9108      	str	r1, [sp, #32]
100660fa:	182d      	adds	r5, r5, r0
100660fc:	b2af      	uxth	r7, r5
100660fe:	4630      	mov	r0, r6
10066100:	4639      	mov	r1, r7
10066102:	f7f5 fb9b 	bl	1005b83c <llc_conn_check_instant_and_set_params>
10066106:	4606      	mov	r6, r0
10066108:	2800      	cmp	r0, #0
1006610a:	d102      	bne.n	10066112 <llc_conn_skip_slot+0x62>
1006610c:	9806      	ldr	r0, [sp, #24]
1006610e:	1a20      	subs	r0, r4, r0
10066110:	d4e5      	bmi.n	100660de <llc_conn_skip_slot+0x2e>
10066112:	9c05      	ldr	r4, [sp, #20]
10066114:	8820      	ldrh	r0, [r4, #0]
10066116:	42b8      	cmp	r0, r7
10066118:	d907      	bls.n	1006612a <llc_conn_skip_slot+0x7a>
1006611a:	2009      	movs	r0, #9
1006611c:	0140      	lsls	r0, r0, #5
1006611e:	9907      	ldr	r1, [sp, #28]
10066120:	1809      	adds	r1, r1, r0
10066122:	9802      	ldr	r0, [sp, #8]
10066124:	8800      	ldrh	r0, [r0, #0]
10066126:	f7f6 fb81 	bl	1005c82c <llc_subrate_new_sr_base_event_ucfg_weak>
1006612a:	8025      	strh	r5, [r4, #0]
1006612c:	2e00      	cmp	r6, #0
1006612e:	9d08      	ldr	r5, [sp, #32]
10066130:	d118      	bne.n	10066164 <llc_conn_skip_slot+0xb4>
10066132:	9807      	ldr	r0, [sp, #28]
10066134:	6c41      	ldr	r1, [r0, #68]	@ 0x44
10066136:	9a01      	ldr	r2, [sp, #4]
10066138:	1a8f      	subs	r7, r1, r2
1006613a:	4639      	mov	r1, r7
1006613c:	f7f5 fc12 	bl	1005b964 <llc_conn_check_supervision_timer>
10066140:	4606      	mov	r6, r0
10066142:	2800      	cmp	r0, #0
10066144:	d10e      	bne.n	10066164 <llc_conn_skip_slot+0xb4>
10066146:	9807      	ldr	r0, [sp, #28]
10066148:	4639      	mov	r1, r7
1006614a:	f7f5 fb41 	bl	1005b7d0 <llc_conn_check_ctrl_proc_rsp_timer>
1006614e:	4606      	mov	r6, r0
10066150:	2800      	cmp	r0, #0
10066152:	d107      	bne.n	10066164 <llc_conn_skip_slot+0xb4>
10066154:	9807      	ldr	r0, [sp, #28]
10066156:	4639      	mov	r1, r7
10066158:	462a      	mov	r2, r5
1006615a:	f7f6 f875 	bl	1005c248 <llc_conn_set_taskslot_params>
1006615e:	4606      	mov	r6, r0
10066160:	2800      	cmp	r0, #0
10066162:	d007      	beq.n	10066174 <llc_conn_skip_slot+0xc4>
10066164:	9c03      	ldr	r4, [sp, #12]
10066166:	7d20      	ldrb	r0, [r4, #20]
10066168:	f7fb f9b4 	bl	100614d4 <LL_sched_delete_taskslot>
1006616c:	7026      	strb	r6, [r4, #0]
1006616e:	2000      	movs	r0, #0
10066170:	9904      	ldr	r1, [sp, #16]
10066172:	8008      	strh	r0, [r1, #0]
10066174:	4628      	mov	r0, r5
10066176:	b009      	add	sp, #36	@ 0x24
10066178:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1006617c <llc_conn_isr>:
1006617c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006617e:	b099      	sub	sp, #100	@ 0x64
10066180:	4607      	mov	r7, r0
10066182:	8e40      	ldrh	r0, [r0, #50]	@ 0x32
10066184:	1c40      	adds	r0, r0, #1
10066186:	8678      	strh	r0, [r7, #50]	@ 0x32
10066188:	2041      	movs	r0, #65	@ 0x41
1006618a:	5c3d      	ldrb	r5, [r7, r0]
1006618c:	202d      	movs	r0, #45	@ 0x2d
1006618e:	5c38      	ldrb	r0, [r7, r0]
10066190:	2800      	cmp	r0, #0
10066192:	d008      	beq.n	100661a6 <llc_conn_isr+0x2a>
10066194:	f7ed f9da 	bl	1005354c <BLEPLAT_ClearRadioTimerValue>
10066198:	4628      	mov	r0, r5
1006619a:	f7fb f99b 	bl	100614d4 <LL_sched_delete_taskslot>
1006619e:	4628      	mov	r0, r5
100661a0:	f7fa ffa8 	bl	100610f4 <LL_sched_engine>
100661a4:	e2a5      	b.n	100666f2 <__arm_cp.0_5+0x182>
100661a6:	2021      	movs	r0, #33	@ 0x21
100661a8:	00c0      	lsls	r0, r0, #3
100661aa:	183e      	adds	r6, r7, r0
100661ac:	4638      	mov	r0, r7
100661ae:	302c      	adds	r0, #44	@ 0x2c
100661b0:	900d      	str	r0, [sp, #52]	@ 0x34
100661b2:	463c      	mov	r4, r7
100661b4:	3480      	adds	r4, #128	@ 0x80
100661b6:	4638      	mov	r0, r7
100661b8:	30d0      	adds	r0, #208	@ 0xd0
100661ba:	9007      	str	r0, [sp, #28]
100661bc:	48ea      	ldr	r0, [pc, #936]	@ (10066568 <__arm_cp.0_3>)
100661be:	6800      	ldr	r0, [r0, #0]
100661c0:	f7ee f9e0 	bl	10054584 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
100661c4:	9009      	str	r0, [sp, #36]	@ 0x24
100661c6:	2800      	cmp	r0, #0
100661c8:	940b      	str	r4, [sp, #44]	@ 0x2c
100661ca:	960a      	str	r6, [sp, #40]	@ 0x28
100661cc:	9508      	str	r5, [sp, #32]
100661ce:	d040      	beq.n	10066252 <llc_conn_isr+0xd6>
100661d0:	463e      	mov	r6, r7
100661d2:	3614      	adds	r6, #20
100661d4:	4630      	mov	r0, r6
100661d6:	f7ee fa05 	bl	100545e4 <BLEPLAT_CNTR_PacketClrPllTrig>
100661da:	4630      	mov	r0, r6
100661dc:	f7ee f9f6 	bl	100545cc <BLEPLAT_CNTR_PacketClrIncChan>
100661e0:	4620      	mov	r0, r4
100661e2:	3008      	adds	r0, #8
100661e4:	900c      	str	r0, [sp, #48]	@ 0x30
100661e6:	7a20      	ldrb	r0, [r4, #8]
100661e8:	0780      	lsls	r0, r0, #30
100661ea:	d445      	bmi.n	10066278 <llc_conn_isr+0xfc>
100661ec:	4638      	mov	r0, r7
100661ee:	f7ee fa06 	bl	100545fe <BLEPLAT_CNTR_PacketGetDataPtr>
100661f2:	4605      	mov	r5, r0
100661f4:	463c      	mov	r4, r7
100661f6:	3428      	adds	r4, #40	@ 0x28
100661f8:	980d      	ldr	r0, [sp, #52]	@ 0x34
100661fa:	7800      	ldrb	r0, [r0, #0]
100661fc:	2100      	movs	r1, #0
100661fe:	9106      	str	r1, [sp, #24]
10066200:	2803      	cmp	r0, #3
10066202:	d000      	beq.n	10066206 <llc_conn_isr+0x8a>
10066204:	e0a6      	b.n	10066354 <llc_conn_isr+0x1d8>
10066206:	4630      	mov	r0, r6
10066208:	f7ee f9f9 	bl	100545fe <BLEPLAT_CNTR_PacketGetDataPtr>
1006620c:	4603      	mov	r3, r0
1006620e:	42a5      	cmp	r5, r4
10066210:	d015      	beq.n	1006623e <llc_conn_isr+0xc2>
10066212:	7829      	ldrb	r1, [r5, #0]
10066214:	2003      	movs	r0, #3
10066216:	460a      	mov	r2, r1
10066218:	4002      	ands	r2, r0
1006621a:	2a03      	cmp	r2, #3
1006621c:	d10a      	bne.n	10066234 <llc_conn_isr+0xb8>
1006621e:	0689      	lsls	r1, r1, #26
10066220:	d400      	bmi.n	10066224 <llc_conn_isr+0xa8>
10066222:	2002      	movs	r0, #2
10066224:	5c28      	ldrb	r0, [r5, r0]
10066226:	2806      	cmp	r0, #6
10066228:	d104      	bne.n	10066234 <llc_conn_isr+0xb8>
1006622a:	4638      	mov	r0, r7
1006622c:	9305      	str	r3, [sp, #20]
1006622e:	f7f4 fec5 	bl	1005afbc <llc_conn_clr_rx_acl_blocked>
10066232:	9b05      	ldr	r3, [sp, #20]
10066234:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10066236:	6810      	ldr	r0, [r2, #0]
10066238:	2140      	movs	r1, #64	@ 0x40
1006623a:	4301      	orrs	r1, r0
1006623c:	6011      	str	r1, [r2, #0]
1006623e:	7818      	ldrb	r0, [r3, #0]
10066240:	7829      	ldrb	r1, [r5, #0]
10066242:	4301      	orrs	r1, r0
10066244:	06c8      	lsls	r0, r1, #27
10066246:	d474      	bmi.n	10066332 <llc_conn_isr+0x1b6>
10066248:	980c      	ldr	r0, [sp, #48]	@ 0x30
1006624a:	7800      	ldrb	r0, [r0, #0]
1006624c:	06c0      	lsls	r0, r0, #27
1006624e:	d57d      	bpl.n	1006634c <llc_conn_isr+0x1d0>
10066250:	e080      	b.n	10066354 <llc_conn_isr+0x1d8>
10066252:	4638      	mov	r0, r7
10066254:	f7ee f9c6 	bl	100545e4 <BLEPLAT_CNTR_PacketClrPllTrig>
10066258:	4638      	mov	r0, r7
1006625a:	f7ee f9b7 	bl	100545cc <BLEPLAT_CNTR_PacketClrIncChan>
1006625e:	a80e      	add	r0, sp, #56	@ 0x38
10066260:	2600      	movs	r6, #0
10066262:	7786      	strb	r6, [r0, #30]
10066264:	7606      	strb	r6, [r0, #24]
10066266:	7746      	strb	r6, [r0, #29]
10066268:	4cbf      	ldr	r4, [pc, #764]	@ (10066568 <__arm_cp.0_3>)
1006626a:	6820      	ldr	r0, [r4, #0]
1006626c:	f7ee f97e 	bl	1005456c <BLEPLAT_CNTR_IntGetIntStatusTimeout>
10066270:	2800      	cmp	r0, #0
10066272:	d010      	beq.n	10066296 <llc_conn_isr+0x11a>
10066274:	2501      	movs	r5, #1
10066276:	e014      	b.n	100662a2 <llc_conn_isr+0x126>
10066278:	463d      	mov	r5, r7
1006627a:	35a8      	adds	r5, #168	@ 0xa8
1006627c:	f7ed f966 	bl	1005354c <BLEPLAT_ClearRadioTimerValue>
10066280:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10066282:	7d70      	ldrb	r0, [r6, #21]
10066284:	f7fb f926 	bl	100614d4 <LL_sched_delete_taskslot>
10066288:	2000      	movs	r0, #0
1006628a:	8028      	strh	r0, [r5, #0]
1006628c:	2113      	movs	r1, #19
1006628e:	7071      	strb	r1, [r6, #1]
10066290:	8360      	strh	r0, [r4, #26]
10066292:	4634      	mov	r4, r6
10066294:	e1e5      	b.n	10066662 <__arm_cp.0_5+0xf2>
10066296:	6820      	ldr	r0, [r4, #0]
10066298:	f7ee f921 	bl	100544de <BLEPLAT_CNTR_IntGetIntStatusLenErr>
1006629c:	4605      	mov	r5, r0
1006629e:	1e40      	subs	r0, r0, #1
100662a0:	4185      	sbcs	r5, r0
100662a2:	a80e      	add	r0, sp, #56	@ 0x38
100662a4:	76c5      	strb	r5, [r0, #27]
100662a6:	6820      	ldr	r0, [r4, #0]
100662a8:	f7ee f977 	bl	1005459a <BLEPLAT_CNTR_IntGetIntStatusTxOk>
100662ac:	9006      	str	r0, [sp, #24]
100662ae:	900f      	str	r0, [sp, #60]	@ 0x3c
100662b0:	2d00      	cmp	r5, #0
100662b2:	d01f      	beq.n	100662f4 <llc_conn_isr+0x178>
100662b4:	f7ed f94a 	bl	1005354c <BLEPLAT_ClearRadioTimerValue>
100662b8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
100662ba:	68e8      	ldr	r0, [r5, #12]
100662bc:	2800      	cmp	r0, #0
100662be:	d002      	beq.n	100662c6 <llc_conn_isr+0x14a>
100662c0:	88c1      	ldrh	r1, [r0, #6]
100662c2:	1c49      	adds	r1, r1, #1
100662c4:	80c1      	strh	r1, [r0, #6]
100662c6:	6928      	ldr	r0, [r5, #16]
100662c8:	2800      	cmp	r0, #0
100662ca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
100662cc:	9e06      	ldr	r6, [sp, #24]
100662ce:	d00a      	beq.n	100662e6 <llc_conn_isr+0x16a>
100662d0:	980d      	ldr	r0, [sp, #52]	@ 0x34
100662d2:	7d40      	ldrb	r0, [r0, #21]
100662d4:	f7ee fbd4 	bl	10054a80 <BLEPLAT_CNTR_SmGetRemapChan>
100662d8:	0040      	lsls	r0, r0, #1
100662da:	6929      	ldr	r1, [r5, #16]
100662dc:	1808      	adds	r0, r1, r0
100662de:	2194      	movs	r1, #148	@ 0x94
100662e0:	5a42      	ldrh	r2, [r0, r1]
100662e2:	1c52      	adds	r2, r2, #1
100662e4:	5242      	strh	r2, [r0, r1]
100662e6:	a80e      	add	r0, sp, #56	@ 0x38
100662e8:	2501      	movs	r5, #1
100662ea:	7605      	strb	r5, [r0, #24]
100662ec:	68a0      	ldr	r0, [r4, #8]
100662ee:	3408      	adds	r4, #8
100662f0:	2300      	movs	r3, #0
100662f2:	e0b9      	b.n	10066468 <llc_conn_isr+0x2ec>
100662f4:	6820      	ldr	r0, [r4, #0]
100662f6:	f7ee f92e 	bl	10054556 <BLEPLAT_CNTR_IntGetIntStatusRxOk>
100662fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
100662fc:	7a11      	ldrb	r1, [r2, #8]
100662fe:	094b      	lsrs	r3, r1, #5
10066300:	2501      	movs	r5, #1
10066302:	4629      	mov	r1, r5
10066304:	4399      	bics	r1, r3
10066306:	ab0e      	add	r3, sp, #56	@ 0x38
10066308:	7699      	strb	r1, [r3, #26]
1006630a:	9005      	str	r0, [sp, #20]
1006630c:	900e      	str	r0, [sp, #56]	@ 0x38
1006630e:	6820      	ldr	r0, [r4, #0]
10066310:	4614      	mov	r4, r2
10066312:	3408      	adds	r4, #8
10066314:	f7ee f8bf 	bl	10054496 <BLEPLAT_CNTR_IntGetIntStatusCrcErr>
10066318:	2800      	cmp	r0, #0
1006631a:	d06e      	beq.n	100663fa <llc_conn_isr+0x27e>
1006631c:	7820      	ldrb	r0, [r4, #0]
1006631e:	06c0      	lsls	r0, r0, #27
10066320:	9704      	str	r7, [sp, #16]
10066322:	d479      	bmi.n	10066418 <llc_conn_isr+0x29c>
10066324:	f7ee f87d 	bl	10054422 <BLEPLAT_CNTR_GlobEnableBlue>
10066328:	6820      	ldr	r0, [r4, #0]
1006632a:	2110      	movs	r1, #16
1006632c:	4301      	orrs	r1, r0
1006632e:	6021      	str	r1, [r4, #0]
10066330:	e076      	b.n	10066420 <llc_conn_isr+0x2a4>
10066332:	9807      	ldr	r0, [sp, #28]
10066334:	6840      	ldr	r0, [r0, #4]
10066336:	9005      	str	r0, [sp, #20]
10066338:	f7ed f8c7 	bl	100534ca <BLEPLAT_GetCurrentSysTime>
1006633c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
1006633e:	1a08      	subs	r0, r1, r0
10066340:	9905      	ldr	r1, [sp, #20]
10066342:	1840      	adds	r0, r0, r1
10066344:	d402      	bmi.n	1006634c <llc_conn_isr+0x1d0>
10066346:	6f79      	ldr	r1, [r7, #116]	@ 0x74
10066348:	4288      	cmp	r0, r1
1006634a:	d203      	bcs.n	10066354 <llc_conn_isr+0x1d8>
1006634c:	f7ed f8fe 	bl	1005354c <BLEPLAT_ClearRadioTimerValue>
10066350:	2001      	movs	r0, #1
10066352:	9006      	str	r0, [sp, #24]
10066354:	4638      	mov	r0, r7
10066356:	f7f4 ff22 	bl	1005b19e <llc_conn_get_tx_ctrl_pdu_state>
1006635a:	2802      	cmp	r0, #2
1006635c:	d13d      	bne.n	100663da <llc_conn_isr+0x25e>
1006635e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10066360:	6940      	ldr	r0, [r0, #20]
10066362:	6800      	ldr	r0, [r0, #0]
10066364:	06c1      	lsls	r1, r0, #27
10066366:	d415      	bmi.n	10066394 <llc_conn_isr+0x218>
10066368:	0640      	lsls	r0, r0, #25
1006636a:	d536      	bpl.n	100663da <llc_conn_isr+0x25e>
1006636c:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006636e:	7d40      	ldrb	r0, [r0, #21]
10066370:	f7ee fac5 	bl	100548fe <BLEPLAT_CNTR_SmEncOff>
10066374:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10066376:	6958      	ldr	r0, [r3, #20]
10066378:	6801      	ldr	r1, [r0, #0]
1006637a:	2240      	movs	r2, #64	@ 0x40
1006637c:	4391      	bics	r1, r2
1006637e:	6001      	str	r1, [r0, #0]
10066380:	6898      	ldr	r0, [r3, #8]
10066382:	2108      	movs	r1, #8
10066384:	4388      	bics	r0, r1
10066386:	6098      	str	r0, [r3, #8]
10066388:	2012      	movs	r0, #18
1006638a:	f7fd f869 	bl	10063460 <tsk_notify_idx>
1006638e:	f7ec f9ea 	bl	10052766 <BLE_STACK_ProcessRequest>
10066392:	e022      	b.n	100663da <llc_conn_isr+0x25e>
10066394:	9505      	str	r5, [sp, #20]
10066396:	2000      	movs	r0, #0
10066398:	900f      	str	r0, [sp, #60]	@ 0x3c
1006639a:	900e      	str	r0, [sp, #56]	@ 0x38
1006639c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
1006639e:	7d68      	ldrb	r0, [r5, #21]
100663a0:	f7ee fac1 	bl	10054926 <BLEPLAT_CNTR_SmEncOn>
100663a4:	7d68      	ldrb	r0, [r5, #21]
100663a6:	a90e      	add	r1, sp, #56	@ 0x38
100663a8:	f7ee fc8e 	bl	10054cc8 <BLEPLAT_CNTR_SmSetRxCount>
100663ac:	7828      	ldrb	r0, [r5, #0]
100663ae:	2803      	cmp	r0, #3
100663b0:	d103      	bne.n	100663ba <llc_conn_isr+0x23e>
100663b2:	980d      	ldr	r0, [sp, #52]	@ 0x34
100663b4:	7d40      	ldrb	r0, [r0, #21]
100663b6:	f7ee fcaa 	bl	10054d0e <BLEPLAT_CNTR_SmSetRxCountDirectionBit>
100663ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
100663bc:	6958      	ldr	r0, [r3, #20]
100663be:	6801      	ldr	r1, [r0, #0]
100663c0:	2210      	movs	r2, #16
100663c2:	4391      	bics	r1, r2
100663c4:	6001      	str	r1, [r0, #0]
100663c6:	6898      	ldr	r0, [r3, #8]
100663c8:	2108      	movs	r1, #8
100663ca:	4301      	orrs	r1, r0
100663cc:	6099      	str	r1, [r3, #8]
100663ce:	2012      	movs	r0, #18
100663d0:	f7fd f846 	bl	10063460 <tsk_notify_idx>
100663d4:	f7ec f9c7 	bl	10052766 <BLE_STACK_ProcessRequest>
100663d8:	9d05      	ldr	r5, [sp, #20]
100663da:	42a5      	cmp	r5, r4
100663dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
100663de:	d001      	beq.n	100663e4 <llc_conn_isr+0x268>
100663e0:	8a88      	ldrh	r0, [r1, #20]
100663e2:	82c8      	strh	r0, [r1, #22]
100663e4:	9806      	ldr	r0, [sp, #24]
100663e6:	2800      	cmp	r0, #0
100663e8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
100663ea:	d000      	beq.n	100663ee <llc_conn_isr+0x272>
100663ec:	e136      	b.n	1006665c <__arm_cp.0_5+0xec>
100663ee:	9807      	ldr	r0, [sp, #28]
100663f0:	6801      	ldr	r1, [r0, #0]
100663f2:	4630      	mov	r0, r6
100663f4:	f7ee fa4b 	bl	1005488e <BLEPLAT_CNTR_SetRcvLen>
100663f8:	e135      	b.n	10066666 <__arm_cp.0_5+0xf6>
100663fa:	485b      	ldr	r0, [pc, #364]	@ (10066568 <__arm_cp.0_3>)
100663fc:	6800      	ldr	r0, [r0, #0]
100663fe:	f7ee f862 	bl	100544c6 <BLEPLAT_CNTR_IntGetIntStatusEncErr>
10066402:	2800      	cmp	r0, #0
10066404:	d026      	beq.n	10066454 <llc_conn_isr+0x2d8>
10066406:	9805      	ldr	r0, [sp, #20]
10066408:	2800      	cmp	r0, #0
1006640a:	d023      	beq.n	10066454 <llc_conn_isr+0x2d8>
1006640c:	f7ed f89e 	bl	1005354c <BLEPLAT_ClearRadioTimerValue>
10066410:	a80e      	add	r0, sp, #56	@ 0x38
10066412:	233d      	movs	r3, #61	@ 0x3d
10066414:	7783      	strb	r3, [r0, #30]
10066416:	e023      	b.n	10066460 <llc_conn_isr+0x2e4>
10066418:	f7ed f898 	bl	1005354c <BLEPLAT_ClearRadioTimerValue>
1006641c:	a80e      	add	r0, sp, #56	@ 0x38
1006641e:	7605      	strb	r5, [r0, #24]
10066420:	4637      	mov	r7, r6
10066422:	980a      	ldr	r0, [sp, #40]	@ 0x28
10066424:	68c0      	ldr	r0, [r0, #12]
10066426:	2800      	cmp	r0, #0
10066428:	d002      	beq.n	10066430 <llc_conn_isr+0x2b4>
1006642a:	8841      	ldrh	r1, [r0, #2]
1006642c:	1c49      	adds	r1, r1, #1
1006642e:	8041      	strh	r1, [r0, #2]
10066430:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10066432:	6930      	ldr	r0, [r6, #16]
10066434:	2800      	cmp	r0, #0
10066436:	d00a      	beq.n	1006644e <llc_conn_isr+0x2d2>
10066438:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006643a:	7d40      	ldrb	r0, [r0, #21]
1006643c:	f7ee fb20 	bl	10054a80 <BLEPLAT_CNTR_SmGetRemapChan>
10066440:	0040      	lsls	r0, r0, #1
10066442:	6931      	ldr	r1, [r6, #16]
10066444:	1808      	adds	r0, r1, r0
10066446:	214a      	movs	r1, #74	@ 0x4a
10066448:	5a42      	ldrh	r2, [r0, r1]
1006644a:	1c52      	adds	r2, r2, #1
1006644c:	5242      	strh	r2, [r0, r1]
1006644e:	463b      	mov	r3, r7
10066450:	9f04      	ldr	r7, [sp, #16]
10066452:	e005      	b.n	10066460 <llc_conn_isr+0x2e4>
10066454:	6820      	ldr	r0, [r4, #0]
10066456:	2110      	movs	r1, #16
10066458:	4388      	bics	r0, r1
1006645a:	6020      	str	r0, [r4, #0]
1006645c:	2300      	movs	r3, #0
1006645e:	461d      	mov	r5, r3
10066460:	9e06      	ldr	r6, [sp, #24]
10066462:	6821      	ldr	r1, [r4, #0]
10066464:	2020      	movs	r0, #32
10066466:	4308      	orrs	r0, r1
10066468:	4271      	negs	r1, r6
1006646a:	4171      	adcs	r1, r6
1006646c:	0189      	lsls	r1, r1, #6
1006646e:	2240      	movs	r2, #64	@ 0x40
10066470:	4390      	bics	r0, r2
10066472:	1840      	adds	r0, r0, r1
10066474:	940c      	str	r4, [sp, #48]	@ 0x30
10066476:	6020      	str	r0, [r4, #0]
10066478:	2d00      	cmp	r5, #0
1006647a:	d025      	beq.n	100664c8 <llc_conn_isr+0x34c>
1006647c:	a80e      	add	r0, sp, #56	@ 0x38
1006647e:	7f80      	ldrb	r0, [r0, #30]
10066480:	2800      	cmp	r0, #0
10066482:	d169      	bne.n	10066558 <llc_conn_isr+0x3dc>
10066484:	a80e      	add	r0, sp, #56	@ 0x38
10066486:	7ec0      	ldrb	r0, [r0, #27]
10066488:	2800      	cmp	r0, #0
1006648a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
1006648c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
1006648e:	d000      	beq.n	10066492 <llc_conn_isr+0x316>
10066490:	e0dc      	b.n	1006664c <__arm_cp.0_5+0xdc>
10066492:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
10066494:	2800      	cmp	r0, #0
10066496:	d100      	bne.n	1006649a <llc_conn_isr+0x31e>
10066498:	e0b6      	b.n	10066608 <__arm_cp.0_5+0x98>
1006649a:	4e34      	ldr	r6, [pc, #208]	@ (1006656c <__arm_cp.0_3+0x4>)
1006649c:	6830      	ldr	r0, [r6, #0]
1006649e:	21d8      	movs	r1, #216	@ 0xd8
100664a0:	5c41      	ldrb	r1, [r0, r1]
100664a2:	2901      	cmp	r1, #1
100664a4:	d14b      	bne.n	1006653e <llc_conn_isr+0x3c2>
100664a6:	6805      	ldr	r5, [r0, #0]
100664a8:	f7e9 f9da 	bl	1004f860 <phy_upd_csr_ucfg>
100664ac:	2801      	cmp	r0, #1
100664ae:	d000      	beq.n	100664b2 <llc_conn_isr+0x336>
100664b0:	e094      	b.n	100665dc <__arm_cp.0_5+0x6c>
100664b2:	7920      	ldrb	r0, [r4, #4]
100664b4:	210e      	movs	r1, #14
100664b6:	4341      	muls	r1, r0
100664b8:	6830      	ldr	r0, [r6, #0]
100664ba:	229c      	movs	r2, #156	@ 0x9c
100664bc:	5880      	ldr	r0, [r0, r2]
100664be:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
100664c0:	6940      	ldr	r0, [r0, #20]
100664c2:	1840      	adds	r0, r0, r1
100664c4:	79c0      	ldrb	r0, [r0, #7]
100664c6:	e08a      	b.n	100665de <__arm_cp.0_5+0x6e>
100664c8:	461c      	mov	r4, r3
100664ca:	9202      	str	r2, [sp, #8]
100664cc:	4638      	mov	r0, r7
100664ce:	3014      	adds	r0, #20
100664d0:	f7ee f895 	bl	100545fe <BLEPLAT_CNTR_PacketGetDataPtr>
100664d4:	4605      	mov	r5, r0
100664d6:	9011      	str	r0, [sp, #68]	@ 0x44
100664d8:	7801      	ldrb	r1, [r0, #0]
100664da:	2003      	movs	r0, #3
100664dc:	4001      	ands	r1, r0
100664de:	ae0e      	add	r6, sp, #56	@ 0x38
100664e0:	9103      	str	r1, [sp, #12]
100664e2:	7571      	strb	r1, [r6, #21]
100664e4:	7829      	ldrb	r1, [r5, #0]
100664e6:	0689      	lsls	r1, r1, #26
100664e8:	d400      	bmi.n	100664ec <llc_conn_isr+0x370>
100664ea:	2002      	movs	r0, #2
100664ec:	5c28      	ldrb	r0, [r5, r0]
100664ee:	75f0      	strb	r0, [r6, #23]
100664f0:	f7f6 f9b6 	bl	1005c860 <ll_cpe_get_cpid_from_opcode>
100664f4:	7530      	strb	r0, [r6, #20]
100664f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
100664f8:	6679      	str	r1, [r7, #100]	@ 0x64
100664fa:	2301      	movs	r3, #1
100664fc:	9906      	ldr	r1, [sp, #24]
100664fe:	2900      	cmp	r1, #0
10066500:	d009      	beq.n	10066516 <llc_conn_isr+0x39a>
10066502:	990c      	ldr	r1, [sp, #48]	@ 0x30
10066504:	6809      	ldr	r1, [r1, #0]
10066506:	4019      	ands	r1, r3
10066508:	d005      	beq.n	10066516 <llc_conn_isr+0x39a>
1006650a:	2616      	movs	r6, #22
1006650c:	f7ed f81e 	bl	1005354c <BLEPLAT_ClearRadioTimerValue>
10066510:	a80e      	add	r0, sp, #56	@ 0x38
10066512:	7786      	strb	r6, [r0, #30]
10066514:	e020      	b.n	10066558 <llc_conn_isr+0x3dc>
10066516:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10066518:	6949      	ldr	r1, [r1, #20]
1006651a:	7849      	ldrb	r1, [r1, #1]
1006651c:	07c9      	lsls	r1, r1, #31
1006651e:	9a05      	ldr	r2, [sp, #20]
10066520:	d018      	beq.n	10066554 <llc_conn_isr+0x3d8>
10066522:	2a00      	cmp	r2, #0
10066524:	d016      	beq.n	10066554 <llc_conn_isr+0x3d8>
10066526:	9903      	ldr	r1, [sp, #12]
10066528:	2903      	cmp	r1, #3
1006652a:	d10e      	bne.n	1006654a <llc_conn_isr+0x3ce>
1006652c:	263d      	movs	r6, #61	@ 0x3d
1006652e:	2814      	cmp	r0, #20
10066530:	d8ec      	bhi.n	1006650c <llc_conn_isr+0x390>
10066532:	4619      	mov	r1, r3
10066534:	4081      	lsls	r1, r0
10066536:	480e      	ldr	r0, [pc, #56]	@ (10066570 <__arm_cp.0_5>)
10066538:	4201      	tst	r1, r0
1006653a:	d10b      	bne.n	10066554 <llc_conn_isr+0x3d8>
1006653c:	e7e6      	b.n	1006650c <llc_conn_isr+0x390>
1006653e:	f7ed f805 	bl	1005354c <BLEPLAT_ClearRadioTimerValue>
10066542:	a80e      	add	r0, sp, #56	@ 0x38
10066544:	2101      	movs	r1, #1
10066546:	7601      	strb	r1, [r0, #24]
10066548:	e05d      	b.n	10066606 <__arm_cp.0_5+0x96>
1006654a:	7868      	ldrb	r0, [r5, #1]
1006654c:	2800      	cmp	r0, #0
1006654e:	d001      	beq.n	10066554 <llc_conn_isr+0x3d8>
10066550:	263d      	movs	r6, #61	@ 0x3d
10066552:	e7db      	b.n	1006650c <llc_conn_isr+0x390>
10066554:	2c00      	cmp	r4, #0
10066556:	d00d      	beq.n	10066574 <__arm_cp.0_5+0x4>
10066558:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
1006655a:	7d60      	ldrb	r0, [r4, #21]
1006655c:	f7fa ffba 	bl	100614d4 <LL_sched_delete_taskslot>
10066560:	a80e      	add	r0, sp, #56	@ 0x38
10066562:	7f80      	ldrb	r0, [r0, #30]
10066564:	7060      	strb	r0, [r4, #1]
10066566:	e07c      	b.n	10066662 <__arm_cp.0_5+0xf2>

10066568 <__arm_cp.0_3>:
10066568:	20002954 	.word	0x20002954
1006656c:	20002958 	.word	0x20002958

10066570 <__arm_cp.0_5>:
10066570:	00100012 	.word	0x00100012
10066574:	9301      	str	r3, [sp, #4]
10066576:	4638      	mov	r0, r7
10066578:	4614      	mov	r4, r2
1006657a:	f7ee f840 	bl	100545fe <BLEPLAT_CNTR_PacketGetDataPtr>
1006657e:	4606      	mov	r6, r0
10066580:	a80e      	add	r0, sp, #56	@ 0x38
10066582:	2100      	movs	r1, #0
10066584:	7701      	strb	r1, [r0, #28]
10066586:	7641      	strb	r1, [r0, #25]
10066588:	9612      	str	r6, [sp, #72]	@ 0x48
1006658a:	9106      	str	r1, [sp, #24]
1006658c:	9110      	str	r1, [sp, #64]	@ 0x40
1006658e:	2c00      	cmp	r4, #0
10066590:	980d      	ldr	r0, [sp, #52]	@ 0x34
10066592:	d100      	bne.n	10066596 <__arm_cp.0_5+0x26>
10066594:	e147      	b.n	10066826 <__arm_cp.0_5+0x2b6>
10066596:	7800      	ldrb	r0, [r0, #0]
10066598:	2802      	cmp	r0, #2
1006659a:	d113      	bne.n	100665c4 <__arm_cp.0_5+0x54>
1006659c:	7828      	ldrb	r0, [r5, #0]
1006659e:	7831      	ldrb	r1, [r6, #0]
100665a0:	4301      	orrs	r1, r0
100665a2:	06c8      	lsls	r0, r1, #27
100665a4:	d509      	bpl.n	100665ba <__arm_cp.0_5+0x4a>
100665a6:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
100665a8:	f7ec ff8f 	bl	100534ca <BLEPLAT_GetCurrentSysTime>
100665ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
100665ae:	1a08      	subs	r0, r1, r0
100665b0:	1900      	adds	r0, r0, r4
100665b2:	d402      	bmi.n	100665ba <__arm_cp.0_5+0x4a>
100665b4:	6f79      	ldr	r1, [r7, #116]	@ 0x74
100665b6:	4288      	cmp	r0, r1
100665b8:	d204      	bcs.n	100665c4 <__arm_cp.0_5+0x54>
100665ba:	f7ec ffc7 	bl	1005354c <BLEPLAT_ClearRadioTimerValue>
100665be:	a80e      	add	r0, sp, #56	@ 0x38
100665c0:	2101      	movs	r1, #1
100665c2:	7601      	strb	r1, [r0, #24]
100665c4:	786c      	ldrb	r4, [r5, #1]
100665c6:	2c00      	cmp	r4, #0
100665c8:	d100      	bne.n	100665cc <__arm_cp.0_5+0x5c>
100665ca:	e12c      	b.n	10066826 <__arm_cp.0_5+0x2b6>
100665cc:	980c      	ldr	r0, [sp, #48]	@ 0x30
100665ce:	6800      	ldr	r0, [r0, #0]
100665d0:	2608      	movs	r6, #8
100665d2:	4006      	ands	r6, r0
100665d4:	d000      	beq.n	100665d8 <__arm_cp.0_5+0x68>
100665d6:	e095      	b.n	10066704 <__arm_cp.0_5+0x194>
100665d8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
100665da:	e0aa      	b.n	10066732 <__arm_cp.0_5+0x1c2>
100665dc:	2001      	movs	r0, #1
100665de:	6c7e      	ldr	r6, [r7, #68]	@ 0x44
100665e0:	f7ee fc8b 	bl	10054efa <BLEPLAT_CNTR_DemodDelaySt>
100665e4:	1a28      	subs	r0, r5, r0
100665e6:	6478      	str	r0, [r7, #68]	@ 0x44
100665e8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
100665ea:	1b89      	subs	r1, r1, r6
100665ec:	1808      	adds	r0, r1, r0
100665ee:	9a07      	ldr	r2, [sp, #28]
100665f0:	6851      	ldr	r1, [r2, #4]
100665f2:	4281      	cmp	r1, r0
100665f4:	d901      	bls.n	100665fa <__arm_cp.0_5+0x8a>
100665f6:	1a08      	subs	r0, r1, r0
100665f8:	6050      	str	r0, [r2, #4]
100665fa:	2000      	movs	r0, #0
100665fc:	64b8      	str	r0, [r7, #72]	@ 0x48
100665fe:	6378      	str	r0, [r7, #52]	@ 0x34
10066600:	4638      	mov	r0, r7
10066602:	f7f5 fe97 	bl	1005c334 <llc_conn_update_receive_window>
10066606:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10066608:	a80e      	add	r0, sp, #56	@ 0x38
1006660a:	7e80      	ldrb	r0, [r0, #26]
1006660c:	2801      	cmp	r0, #1
1006660e:	d102      	bne.n	10066616 <__arm_cp.0_5+0xa6>
10066610:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
10066612:	6678      	str	r0, [r7, #100]	@ 0x64
10066614:	e004      	b.n	10066620 <__arm_cp.0_5+0xb0>
10066616:	2011      	movs	r0, #17
10066618:	f7fc ff22 	bl	10063460 <tsk_notify_idx>
1006661c:	f7ec f8a3 	bl	10052766 <BLE_STACK_ProcessRequest>
10066620:	980a      	ldr	r0, [sp, #40]	@ 0x28
10066622:	68c0      	ldr	r0, [r0, #12]
10066624:	2800      	cmp	r0, #0
10066626:	d002      	beq.n	1006662e <__arm_cp.0_5+0xbe>
10066628:	8801      	ldrh	r1, [r0, #0]
1006662a:	1c49      	adds	r1, r1, #1
1006662c:	8001      	strh	r1, [r0, #0]
1006662e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10066630:	6930      	ldr	r0, [r6, #16]
10066632:	2800      	cmp	r0, #0
10066634:	d007      	beq.n	10066646 <__arm_cp.0_5+0xd6>
10066636:	7d60      	ldrb	r0, [r4, #21]
10066638:	f7ee fa22 	bl	10054a80 <BLEPLAT_CNTR_SmGetRemapChan>
1006663c:	0040      	lsls	r0, r0, #1
1006663e:	6931      	ldr	r1, [r6, #16]
10066640:	5a0a      	ldrh	r2, [r1, r0]
10066642:	1c52      	adds	r2, r2, #1
10066644:	520a      	strh	r2, [r1, r0]
10066646:	7920      	ldrb	r0, [r4, #4]
10066648:	f7f8 faf0 	bl	1005ec2c <LLC_pcl_incr_rx_packets_ucfg_weak>
1006664c:	a80e      	add	r0, sp, #56	@ 0x38
1006664e:	7e00      	ldrb	r0, [r0, #24]
10066650:	2801      	cmp	r0, #1
10066652:	d108      	bne.n	10066666 <__arm_cp.0_5+0xf6>
10066654:	6828      	ldr	r0, [r5, #0]
10066656:	2110      	movs	r1, #16
10066658:	4388      	bics	r0, r1
1006665a:	6028      	str	r0, [r5, #0]
1006665c:	4638      	mov	r0, r7
1006665e:	f000 fa82 	bl	10066b66 <llc_conn_close_event>
10066662:	2601      	movs	r6, #1
10066664:	e000      	b.n	10066668 <__arm_cp.0_5+0xf8>
10066666:	2600      	movs	r6, #0
10066668:	7d65      	ldrb	r5, [r4, #21]
1006666a:	4628      	mov	r0, r5
1006666c:	f7ee f9f7 	bl	10054a5e <BLEPLAT_CNTR_SmGetMode>
10066670:	990c      	ldr	r1, [sp, #48]	@ 0x30
10066672:	6809      	ldr	r1, [r1, #0]
10066674:	2800      	cmp	r0, #0
10066676:	d005      	beq.n	10066684 <__arm_cp.0_5+0x114>
10066678:	0748      	lsls	r0, r1, #29
1006667a:	d405      	bmi.n	10066688 <__arm_cp.0_5+0x118>
1006667c:	4628      	mov	r0, r5
1006667e:	f7ee f93e 	bl	100548fe <BLEPLAT_CNTR_SmEncOff>
10066682:	e004      	b.n	1006668e <__arm_cp.0_5+0x11e>
10066684:	0708      	lsls	r0, r1, #28
10066686:	d5f9      	bpl.n	1006667c <__arm_cp.0_5+0x10c>
10066688:	4628      	mov	r0, r5
1006668a:	f7ee f94c 	bl	10054926 <BLEPLAT_CNTR_SmEncOn>
1006668e:	2e00      	cmp	r6, #0
10066690:	d01d      	beq.n	100666ce <__arm_cp.0_5+0x15e>
10066692:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10066694:	69e5      	ldr	r5, [r4, #28]
10066696:	2d00      	cmp	r5, #0
10066698:	d015      	beq.n	100666c6 <__arm_cp.0_5+0x156>
1006669a:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1006669c:	7d70      	ldrb	r0, [r6, #21]
1006669e:	f7ee f9b9 	bl	10054a14 <BLEPLAT_CNTR_SmGetEncKeyPtr>
100666a2:	4602      	mov	r2, r0
100666a4:	4629      	mov	r1, r5
100666a6:	3110      	adds	r1, #16
100666a8:	2301      	movs	r3, #1
100666aa:	4628      	mov	r0, r5
100666ac:	f7fd f9ee 	bl	10063a8c <BLEPLAT_aes128_encrypt>
100666b0:	7d70      	ldrb	r0, [r6, #21]
100666b2:	f7ee f99b 	bl	100549ec <BLEPLAT_CNTR_SmGetEncIvPtr>
100666b6:	4601      	mov	r1, r0
100666b8:	3520      	adds	r5, #32
100666ba:	2208      	movs	r2, #8
100666bc:	4628      	mov	r0, r5
100666be:	f7fd f857 	bl	10063770 <char_copy>
100666c2:	2000      	movs	r0, #0
100666c4:	61e0      	str	r0, [r4, #28]
100666c6:	9808      	ldr	r0, [sp, #32]
100666c8:	f7fa fd14 	bl	100610f4 <LL_sched_engine>
100666cc:	e001      	b.n	100666d2 <__arm_cp.0_5+0x162>
100666ce:	f7ed fea8 	bl	10054422 <BLEPLAT_CNTR_GlobEnableBlue>
100666d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
100666d4:	2800      	cmp	r0, #0
100666d6:	d10c      	bne.n	100666f2 <__arm_cp.0_5+0x182>
100666d8:	f7ec feef 	bl	100534ba <BLEPLAT_CalculateRSSI>
100666dc:	287f      	cmp	r0, #127	@ 0x7f
100666de:	d005      	beq.n	100666ec <__arm_cp.0_5+0x17c>
100666e0:	4605      	mov	r5, r0
100666e2:	f7fa fc05 	bl	10060ef0 <get_rf_rx_path_compensation_db>
100666e6:	1828      	adds	r0, r5, r0
100666e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
100666ea:	7008      	strb	r0, [r1, #0]
100666ec:	4638      	mov	r0, r7
100666ee:	f7f8 fa9e 	bl	1005ec2e <LLC_pcl_update_avg_rssi_ucfg_weak>
100666f2:	2401      	movs	r4, #1
100666f4:	4620      	mov	r0, r4
100666f6:	f7fc fedb 	bl	100634b0 <tsk_signal_resource_idx>
100666fa:	f7ec f834 	bl	10052766 <BLE_STACK_ProcessRequest>
100666fe:	4620      	mov	r0, r4
10066700:	b019      	add	sp, #100	@ 0x64
10066702:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066704:	f7f3 fdb2 	bl	1005a26c <data_length_extension_csr_ucfg_weak>
10066708:	2801      	cmp	r0, #1
1006670a:	d001      	beq.n	10066710 <__arm_cp.0_5+0x1a0>
1006670c:	201c      	movs	r0, #28
1006670e:	e000      	b.n	10066712 <__arm_cp.0_5+0x1a2>
10066710:	20fc      	movs	r0, #252	@ 0xfc
10066712:	4220      	tst	r0, r4
10066714:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
10066716:	d00c      	beq.n	10066732 <__arm_cp.0_5+0x1c2>
10066718:	7868      	ldrb	r0, [r5, #1]
1006671a:	1f00      	subs	r0, r0, #4
1006671c:	7068      	strb	r0, [r5, #1]
1006671e:	2002      	movs	r0, #2
10066720:	71a0      	strb	r0, [r4, #6]
10066722:	2012      	movs	r0, #18
10066724:	f7fc fe9c 	bl	10063460 <tsk_notify_idx>
10066728:	f7ec f81d 	bl	10052766 <BLE_STACK_ProcessRequest>
1006672c:	a80e      	add	r0, sp, #56	@ 0x38
1006672e:	7d40      	ldrb	r0, [r0, #21]
10066730:	9003      	str	r0, [sp, #12]
10066732:	9803      	ldr	r0, [sp, #12]
10066734:	2803      	cmp	r0, #3
10066736:	d110      	bne.n	1006675a <__arm_cp.0_5+0x1ea>
10066738:	a80e      	add	r0, sp, #56	@ 0x38
1006673a:	7dc5      	ldrb	r5, [r0, #23]
1006673c:	2d02      	cmp	r5, #2
1006673e:	d117      	bne.n	10066770 <__arm_cp.0_5+0x200>
10066740:	9811      	ldr	r0, [sp, #68]	@ 0x44
10066742:	7840      	ldrb	r0, [r0, #1]
10066744:	2802      	cmp	r0, #2
10066746:	d113      	bne.n	10066770 <__arm_cp.0_5+0x200>
10066748:	a80e      	add	r0, sp, #56	@ 0x38
1006674a:	2101      	movs	r1, #1
1006674c:	7701      	strb	r1, [r0, #28]
1006674e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10066750:	6828      	ldr	r0, [r5, #0]
10066752:	2102      	movs	r1, #2
10066754:	4301      	orrs	r1, r0
10066756:	6029      	str	r1, [r5, #0]
10066758:	e042      	b.n	100667e0 <__arm_cp.0_5+0x270>
1006675a:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006675c:	7800      	ldrb	r0, [r0, #0]
1006675e:	2803      	cmp	r0, #3
10066760:	d117      	bne.n	10066792 <__arm_cp.0_5+0x222>
10066762:	7a20      	ldrb	r0, [r4, #8]
10066764:	2800      	cmp	r0, #0
10066766:	d014      	beq.n	10066792 <__arm_cp.0_5+0x222>
10066768:	2002      	movs	r0, #2
1006676a:	9910      	ldr	r1, [sp, #64]	@ 0x40
1006676c:	4301      	orrs	r1, r0
1006676e:	e04a      	b.n	10066806 <__arm_cp.0_5+0x296>
10066770:	4638      	mov	r0, r7
10066772:	f7f4 fd02 	bl	1005b17a <llc_conn_get_rx_ctrl_pdu_full>
10066776:	2800      	cmp	r0, #0
10066778:	d021      	beq.n	100667be <__arm_cp.0_5+0x24e>
1006677a:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006677c:	7d40      	ldrb	r0, [r0, #21]
1006677e:	f7ee fbad 	bl	10054edc <BLEPLAT_CNTR_SmToggleNesn>
10066782:	2e00      	cmp	r6, #0
10066784:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10066786:	d02b      	beq.n	100667e0 <__arm_cp.0_5+0x270>
10066788:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006678a:	7d40      	ldrb	r0, [r0, #21]
1006678c:	f000 fa61 	bl	10066c52 <llc_conn_decrement_enc_count_rx>
10066790:	e026      	b.n	100667e0 <__arm_cp.0_5+0x270>
10066792:	9811      	ldr	r0, [sp, #68]	@ 0x44
10066794:	7846      	ldrb	r6, [r0, #1]
10066796:	f7f3 fd69 	bl	1005a26c <data_length_extension_csr_ucfg_weak>
1006679a:	2801      	cmp	r0, #1
1006679c:	d001      	beq.n	100667a2 <__arm_cp.0_5+0x232>
1006679e:	251f      	movs	r5, #31
100667a0:	e001      	b.n	100667a6 <__arm_cp.0_5+0x236>
100667a2:	9806      	ldr	r0, [sp, #24]
100667a4:	43c5      	mvns	r5, r0
100667a6:	4035      	ands	r5, r6
100667a8:	0628      	lsls	r0, r5, #24
100667aa:	d01e      	beq.n	100667ea <__arm_cp.0_5+0x27a>
100667ac:	9806      	ldr	r0, [sp, #24]
100667ae:	67b8      	str	r0, [r7, #120]	@ 0x78
100667b0:	f7ef f86c 	bl	1005588c <isr_Acl_Data_Indication_Queue_Full>
100667b4:	2800      	cmp	r0, #0
100667b6:	d01b      	beq.n	100667f0 <__arm_cp.0_5+0x280>
100667b8:	2002      	movs	r0, #2
100667ba:	9010      	str	r0, [sp, #64]	@ 0x40
100667bc:	e026      	b.n	1006680c <__arm_cp.0_5+0x29c>
100667be:	980d      	ldr	r0, [sp, #52]	@ 0x34
100667c0:	7800      	ldrb	r0, [r0, #0]
100667c2:	2803      	cmp	r0, #3
100667c4:	d108      	bne.n	100667d8 <__arm_cp.0_5+0x268>
100667c6:	2d27      	cmp	r5, #39	@ 0x27
100667c8:	d106      	bne.n	100667d8 <__arm_cp.0_5+0x268>
100667ca:	9811      	ldr	r0, [sp, #68]	@ 0x44
100667cc:	7840      	ldrb	r0, [r0, #1]
100667ce:	280b      	cmp	r0, #11
100667d0:	d102      	bne.n	100667d8 <__arm_cp.0_5+0x268>
100667d2:	a80e      	add	r0, sp, #56	@ 0x38
100667d4:	2101      	movs	r1, #1
100667d6:	7741      	strb	r1, [r0, #29]
100667d8:	a80e      	add	r0, sp, #56	@ 0x38
100667da:	2101      	movs	r1, #1
100667dc:	7641      	strb	r1, [r0, #25]
100667de:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
100667e0:	6828      	ldr	r0, [r5, #0]
100667e2:	2180      	movs	r1, #128	@ 0x80
100667e4:	4301      	orrs	r1, r0
100667e6:	6029      	str	r1, [r5, #0]
100667e8:	e014      	b.n	10066814 <__arm_cp.0_5+0x2a4>
100667ea:	9806      	ldr	r0, [sp, #24]
100667ec:	9010      	str	r0, [sp, #64]	@ 0x40
100667ee:	e011      	b.n	10066814 <__arm_cp.0_5+0x2a4>
100667f0:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
100667f2:	b2ea      	uxtb	r2, r5
100667f4:	9801      	ldr	r0, [sp, #4]
100667f6:	f7ef f913 	bl	10055a20 <ACL_pkt_get>
100667fa:	67b8      	str	r0, [r7, #120]	@ 0x78
100667fc:	2800      	cmp	r0, #0
100667fe:	d001      	beq.n	10066804 <__arm_cp.0_5+0x294>
10066800:	9901      	ldr	r1, [sp, #4]
10066802:	e000      	b.n	10066806 <__arm_cp.0_5+0x296>
10066804:	2102      	movs	r1, #2
10066806:	9110      	str	r1, [sp, #64]	@ 0x40
10066808:	0788      	lsls	r0, r1, #30
1006680a:	d503      	bpl.n	10066814 <__arm_cp.0_5+0x2a4>
1006680c:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006680e:	7d40      	ldrb	r0, [r0, #21]
10066810:	f7ee fb64 	bl	10054edc <BLEPLAT_CNTR_SmToggleNesn>
10066814:	9811      	ldr	r0, [sp, #68]	@ 0x44
10066816:	7800      	ldrb	r0, [r0, #0]
10066818:	8aa1      	ldrh	r1, [r4, #20]
1006681a:	82e1      	strh	r1, [r4, #22]
1006681c:	2120      	movs	r1, #32
1006681e:	4001      	ands	r1, r0
10066820:	a80e      	add	r0, sp, #56	@ 0x38
10066822:	7581      	strb	r1, [r0, #22]
10066824:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10066826:	2101      	movs	r1, #1
10066828:	4638      	mov	r0, r7
1006682a:	9105      	str	r1, [sp, #20]
1006682c:	f7f4 fc8a 	bl	1005b144 <llc_conn_get_ctrl_pdu_data_p>
10066830:	4605      	mov	r5, r0
10066832:	463b      	mov	r3, r7
10066834:	3328      	adds	r3, #40	@ 0x28
10066836:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10066838:	6801      	ldr	r1, [r0, #0]
1006683a:	2900      	cmp	r1, #0
1006683c:	d011      	beq.n	10066862 <__arm_cp.0_5+0x2f2>
1006683e:	7a08      	ldrb	r0, [r1, #8]
10066840:	0700      	lsls	r0, r0, #28
10066842:	d50e      	bpl.n	10066862 <__arm_cp.0_5+0x2f2>
10066844:	69c8      	ldr	r0, [r1, #28]
10066846:	2800      	cmp	r0, #0
10066848:	d00b      	beq.n	10066862 <__arm_cp.0_5+0x2f2>
1006684a:	42ae      	cmp	r6, r5
1006684c:	d009      	beq.n	10066862 <__arm_cp.0_5+0x2f2>
1006684e:	429e      	cmp	r6, r3
10066850:	d007      	beq.n	10066862 <__arm_cp.0_5+0x2f2>
10066852:	460c      	mov	r4, r1
10066854:	990c      	ldr	r1, [sp, #48]	@ 0x30
10066856:	6808      	ldr	r0, [r1, #0]
10066858:	9a02      	ldr	r2, [sp, #8]
1006685a:	4390      	bics	r0, r2
1006685c:	6008      	str	r0, [r1, #0]
1006685e:	4621      	mov	r1, r4
10066860:	e003      	b.n	1006686a <__arm_cp.0_5+0x2fa>
10066862:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10066864:	2800      	cmp	r0, #0
10066866:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10066868:	d017      	beq.n	1006689a <__arm_cp.0_5+0x32a>
1006686a:	42ae      	cmp	r6, r5
1006686c:	9303      	str	r3, [sp, #12]
1006686e:	d018      	beq.n	100668a2 <__arm_cp.0_5+0x332>
10066870:	429e      	cmp	r6, r3
10066872:	d025      	beq.n	100668c0 <__arm_cp.0_5+0x350>
10066874:	6948      	ldr	r0, [r1, #20]
10066876:	6188      	str	r0, [r1, #24]
10066878:	460e      	mov	r6, r1
1006687a:	7b09      	ldrb	r1, [r1, #12]
1006687c:	9d06      	ldr	r5, [sp, #24]
1006687e:	7335      	strb	r5, [r6, #12]
10066880:	8a32      	ldrh	r2, [r6, #16]
10066882:	1851      	adds	r1, r2, r1
10066884:	8231      	strh	r1, [r6, #16]
10066886:	b28a      	uxth	r2, r1
10066888:	8873      	ldrh	r3, [r6, #2]
1006688a:	429a      	cmp	r2, r3
1006688c:	d21a      	bcs.n	100668c4 <__arm_cp.0_5+0x354>
1006688e:	89f2      	ldrh	r2, [r6, #14]
10066890:	1851      	adds	r1, r2, r1
10066892:	06c9      	lsls	r1, r1, #27
10066894:	d019      	beq.n	100668ca <__arm_cp.0_5+0x35a>
10066896:	4634      	mov	r4, r6
10066898:	e01a      	b.n	100668d0 <__arm_cp.0_5+0x360>
1006689a:	f7ed fdc2 	bl	10054422 <BLEPLAT_CNTR_GlobEnableBlue>
1006689e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
100668a0:	e0e3      	b.n	10066a6a <__arm_cp.0_5+0x4fa>
100668a2:	460c      	mov	r4, r1
100668a4:	2103      	movs	r1, #3
100668a6:	4638      	mov	r0, r7
100668a8:	f7f4 ff14 	bl	1005b6d4 <llc_conn_set_tx_ctrl_pdu_state>
100668ac:	4638      	mov	r0, r7
100668ae:	f7ed fe80 	bl	100545b2 <BLEPLAT_CNTR_PacketClrCteSamplingEn>
100668b2:	78a8      	ldrb	r0, [r5, #2]
100668b4:	2827      	cmp	r0, #39	@ 0x27
100668b6:	d10e      	bne.n	100668d6 <__arm_cp.0_5+0x366>
100668b8:	a80e      	add	r0, sp, #56	@ 0x38
100668ba:	2101      	movs	r1, #1
100668bc:	7741      	strb	r1, [r0, #29]
100668be:	e00a      	b.n	100668d6 <__arm_cp.0_5+0x366>
100668c0:	460c      	mov	r4, r1
100668c2:	e008      	b.n	100668d6 <__arm_cp.0_5+0x366>
100668c4:	69f4      	ldr	r4, [r6, #28]
100668c6:	2504      	movs	r5, #4
100668c8:	e002      	b.n	100668d0 <__arm_cp.0_5+0x360>
100668ca:	6800      	ldr	r0, [r0, #0]
100668cc:	4634      	mov	r4, r6
100668ce:	61b0      	str	r0, [r6, #24]
100668d0:	9810      	ldr	r0, [sp, #64]	@ 0x40
100668d2:	4328      	orrs	r0, r5
100668d4:	9010      	str	r0, [sp, #64]	@ 0x40
100668d6:	4638      	mov	r0, r7
100668d8:	f7f4 fc5b 	bl	1005b192 <llc_conn_get_tx_acl_blocked>
100668dc:	4605      	mov	r5, r0
100668de:	4638      	mov	r0, r7
100668e0:	f7f4 fc5d 	bl	1005b19e <llc_conn_get_tx_ctrl_pdu_state>
100668e4:	a90e      	add	r1, sp, #56	@ 0x38
100668e6:	7f0e      	ldrb	r6, [r1, #28]
100668e8:	2e00      	cmp	r6, #0
100668ea:	d124      	bne.n	10066936 <__arm_cp.0_5+0x3c6>
100668ec:	2801      	cmp	r0, #1
100668ee:	d122      	bne.n	10066936 <__arm_cp.0_5+0x3c6>
100668f0:	2101      	movs	r1, #1
100668f2:	4638      	mov	r0, r7
100668f4:	9106      	str	r1, [sp, #24]
100668f6:	f7f4 fc25 	bl	1005b144 <llc_conn_get_ctrl_pdu_data_p>
100668fa:	4606      	mov	r6, r0
100668fc:	4638      	mov	r0, r7
100668fe:	4631      	mov	r1, r6
10066900:	f7ed febf 	bl	10054682 <BLEPLAT_CNTR_PacketSetDataPtr>
10066904:	4632      	mov	r2, r6
10066906:	7830      	ldrb	r0, [r6, #0]
10066908:	0680      	lsls	r0, r0, #26
1006690a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
1006690c:	d421      	bmi.n	10066952 <__arm_cp.0_5+0x3e2>
1006690e:	7890      	ldrb	r0, [r2, #2]
10066910:	2827      	cmp	r0, #39	@ 0x27
10066912:	d04c      	beq.n	100669ae <__arm_cp.0_5+0x43e>
10066914:	4615      	mov	r5, r2
10066916:	2802      	cmp	r0, #2
10066918:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
1006691a:	d152      	bne.n	100669c2 <__arm_cp.0_5+0x452>
1006691c:	990c      	ldr	r1, [sp, #48]	@ 0x30
1006691e:	6808      	ldr	r0, [r1, #0]
10066920:	9a06      	ldr	r2, [sp, #24]
10066922:	4310      	orrs	r0, r2
10066924:	6008      	str	r0, [r1, #0]
10066926:	7d60      	ldrb	r0, [r4, #21]
10066928:	211f      	movs	r1, #31
1006692a:	460a      	mov	r2, r1
1006692c:	f7fa fda8 	bl	10061480 <LL_sched_set_priority>
10066930:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
10066932:	6738      	str	r0, [r7, #112]	@ 0x70
10066934:	e045      	b.n	100669c2 <__arm_cp.0_5+0x452>
10066936:	f7ee ffb7 	bl	100558a8 <isr_Acl_Data_TX_Cmpl_Queue_Full>
1006693a:	2800      	cmp	r0, #0
1006693c:	d018      	beq.n	10066970 <__arm_cp.0_5+0x400>
1006693e:	f7ed fd70 	bl	10054422 <BLEPLAT_CNTR_GlobEnableBlue>
10066942:	980e      	ldr	r0, [sp, #56]	@ 0x38
10066944:	2800      	cmp	r0, #0
10066946:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10066948:	d009      	beq.n	1006695e <__arm_cp.0_5+0x3ee>
1006694a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
1006694c:	9903      	ldr	r1, [sp, #12]
1006694e:	9805      	ldr	r0, [sp, #20]
10066950:	e008      	b.n	10066964 <__arm_cp.0_5+0x3f4>
10066952:	4615      	mov	r5, r2
10066954:	4638      	mov	r0, r7
10066956:	f7ed fe87 	bl	10054668 <BLEPLAT_CNTR_PacketSetCteSamplingEn>
1006695a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
1006695c:	e031      	b.n	100669c2 <__arm_cp.0_5+0x452>
1006695e:	2011      	movs	r0, #17
10066960:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10066962:	9903      	ldr	r1, [sp, #12]
10066964:	8538      	strh	r0, [r7, #40]	@ 0x28
10066966:	4638      	mov	r0, r7
10066968:	460d      	mov	r5, r1
1006696a:	f7ed fe8a 	bl	10054682 <BLEPLAT_CNTR_PacketSetDataPtr>
1006696e:	e071      	b.n	10066a54 <__arm_cp.0_5+0x4e4>
10066970:	2c00      	cmp	r4, #0
10066972:	d0e4      	beq.n	1006693e <__arm_cp.0_5+0x3ce>
10066974:	2d01      	cmp	r5, #1
10066976:	d0e2      	beq.n	1006693e <__arm_cp.0_5+0x3ce>
10066978:	2e01      	cmp	r6, #1
1006697a:	d0e0      	beq.n	1006693e <__arm_cp.0_5+0x3ce>
1006697c:	f7ed fd51 	bl	10054422 <BLEPLAT_CNTR_GlobEnableBlue>
10066980:	4877      	ldr	r0, [pc, #476]	@ (10066b60 <__arm_cp.0_2>)
10066982:	6800      	ldr	r0, [r0, #0]
10066984:	218c      	movs	r1, #140	@ 0x8c
10066986:	5840      	ldr	r0, [r0, r1]
10066988:	8a21      	ldrh	r1, [r4, #16]
1006698a:	89e2      	ldrh	r2, [r4, #14]
1006698c:	1851      	adds	r1, r2, r1
1006698e:	221f      	movs	r2, #31
10066990:	400a      	ands	r2, r1
10066992:	1810      	adds	r0, r2, r0
10066994:	1c81      	adds	r1, r0, #2
10066996:	4638      	mov	r0, r7
10066998:	460d      	mov	r5, r1
1006699a:	f7ed fe72 	bl	10054682 <BLEPLAT_CNTR_PacketSetDataPtr>
1006699e:	4638      	mov	r0, r7
100669a0:	4621      	mov	r1, r4
100669a2:	f7f4 fb23 	bl	1005afec <llc_conn_copy_tx_data_packet>
100669a6:	67fc      	str	r4, [r7, #124]	@ 0x7c
100669a8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
100669aa:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
100669ac:	e052      	b.n	10066a54 <__arm_cp.0_5+0x4e4>
100669ae:	990d      	ldr	r1, [sp, #52]	@ 0x34
100669b0:	7d88      	ldrb	r0, [r1, #22]
100669b2:	7150      	strb	r0, [r2, #5]
100669b4:	7dc8      	ldrb	r0, [r1, #23]
100669b6:	4615      	mov	r5, r2
100669b8:	7190      	strb	r0, [r2, #6]
100669ba:	2000      	movs	r0, #0
100669bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
100669be:	8290      	strh	r0, [r2, #20]
100669c0:	460c      	mov	r4, r1
100669c2:	6970      	ldr	r0, [r6, #20]
100669c4:	6800      	ldr	r0, [r0, #0]
100669c6:	0701      	lsls	r1, r0, #28
100669c8:	d415      	bmi.n	100669f6 <__arm_cp.0_5+0x486>
100669ca:	0680      	lsls	r0, r0, #26
100669cc:	d510      	bpl.n	100669f0 <__arm_cp.0_5+0x480>
100669ce:	7d60      	ldrb	r0, [r4, #21]
100669d0:	f7ed ff95 	bl	100548fe <BLEPLAT_CNTR_SmEncOff>
100669d4:	6970      	ldr	r0, [r6, #20]
100669d6:	6801      	ldr	r1, [r0, #0]
100669d8:	2220      	movs	r2, #32
100669da:	4391      	bics	r1, r2
100669dc:	6001      	str	r1, [r0, #0]
100669de:	68b0      	ldr	r0, [r6, #8]
100669e0:	2104      	movs	r1, #4
100669e2:	4388      	bics	r0, r1
100669e4:	60b0      	str	r0, [r6, #8]
100669e6:	2012      	movs	r0, #18
100669e8:	f7fc fd3a 	bl	10063460 <tsk_notify_idx>
100669ec:	f7eb febb 	bl	10052766 <BLE_STACK_ProcessRequest>
100669f0:	f7ed fd17 	bl	10054422 <BLEPLAT_CNTR_GlobEnableBlue>
100669f4:	e01f      	b.n	10066a36 <__arm_cp.0_5+0x4c6>
100669f6:	2000      	movs	r0, #0
100669f8:	9017      	str	r0, [sp, #92]	@ 0x5c
100669fa:	9016      	str	r0, [sp, #88]	@ 0x58
100669fc:	7d60      	ldrb	r0, [r4, #21]
100669fe:	f7ed ff92 	bl	10054926 <BLEPLAT_CNTR_SmEncOn>
10066a02:	7d60      	ldrb	r0, [r4, #21]
10066a04:	a916      	add	r1, sp, #88	@ 0x58
10066a06:	f7ee f9d3 	bl	10054db0 <BLEPLAT_CNTR_SmSetTxCount>
10066a0a:	7820      	ldrb	r0, [r4, #0]
10066a0c:	2802      	cmp	r0, #2
10066a0e:	d102      	bne.n	10066a16 <__arm_cp.0_5+0x4a6>
10066a10:	7d60      	ldrb	r0, [r4, #21]
10066a12:	f7ee f9e9 	bl	10054de8 <BLEPLAT_CNTR_SmSetTxCountDirectionBit>
10066a16:	f7ed fd04 	bl	10054422 <BLEPLAT_CNTR_GlobEnableBlue>
10066a1a:	6970      	ldr	r0, [r6, #20]
10066a1c:	6801      	ldr	r1, [r0, #0]
10066a1e:	2208      	movs	r2, #8
10066a20:	4391      	bics	r1, r2
10066a22:	6001      	str	r1, [r0, #0]
10066a24:	68b0      	ldr	r0, [r6, #8]
10066a26:	2104      	movs	r1, #4
10066a28:	4301      	orrs	r1, r0
10066a2a:	60b1      	str	r1, [r6, #8]
10066a2c:	2012      	movs	r0, #18
10066a2e:	f7fc fd17 	bl	10063460 <tsk_notify_idx>
10066a32:	f7eb fe98 	bl	10052766 <BLE_STACK_ProcessRequest>
10066a36:	2102      	movs	r1, #2
10066a38:	4638      	mov	r0, r7
10066a3a:	f7f4 fe4b 	bl	1005b6d4 <llc_conn_set_tx_ctrl_pdu_state>
10066a3e:	6970      	ldr	r0, [r6, #20]
10066a40:	6801      	ldr	r1, [r0, #0]
10066a42:	074a      	lsls	r2, r1, #29
10066a44:	d506      	bpl.n	10066a54 <__arm_cp.0_5+0x4e4>
10066a46:	2204      	movs	r2, #4
10066a48:	4391      	bics	r1, r2
10066a4a:	6001      	str	r1, [r0, #0]
10066a4c:	8b70      	ldrh	r0, [r6, #26]
10066a4e:	9906      	ldr	r1, [sp, #24]
10066a50:	4308      	orrs	r0, r1
10066a52:	8370      	strh	r0, [r6, #26]
10066a54:	2101      	movs	r1, #1
10066a56:	4638      	mov	r0, r7
10066a58:	f7f4 fb7a 	bl	1005b150 <llc_conn_get_enc_on>
10066a5c:	2801      	cmp	r0, #1
10066a5e:	d104      	bne.n	10066a6a <__arm_cp.0_5+0x4fa>
10066a60:	7868      	ldrb	r0, [r5, #1]
10066a62:	2800      	cmp	r0, #0
10066a64:	d001      	beq.n	10066a6a <__arm_cp.0_5+0x4fa>
10066a66:	1d00      	adds	r0, r0, #4
10066a68:	7068      	strb	r0, [r5, #1]
10066a6a:	9810      	ldr	r0, [sp, #64]	@ 0x40
10066a6c:	0781      	lsls	r1, r0, #30
10066a6e:	d507      	bpl.n	10066a80 <__arm_cp.0_5+0x510>
10066a70:	990c      	ldr	r1, [sp, #48]	@ 0x30
10066a72:	7809      	ldrb	r1, [r1, #0]
10066a74:	0709      	lsls	r1, r1, #28
10066a76:	d503      	bpl.n	10066a80 <__arm_cp.0_5+0x510>
10066a78:	7d60      	ldrb	r0, [r4, #21]
10066a7a:	f000 f8ea 	bl	10066c52 <llc_conn_decrement_enc_count_rx>
10066a7e:	9810      	ldr	r0, [sp, #64]	@ 0x40
10066a80:	0741      	lsls	r1, r0, #29
10066a82:	d505      	bpl.n	10066a90 <__arm_cp.0_5+0x520>
10066a84:	4630      	mov	r0, r6
10066a86:	f7fc ff07 	bl	10063898 <ACL_list_remove_head>
10066a8a:	f7ee ff37 	bl	100558fc <Acl_Tx_Cmpl_Pkt_Handler>
10066a8e:	9810      	ldr	r0, [sp, #64]	@ 0x40
10066a90:	07c0      	lsls	r0, r0, #31
10066a92:	d01e      	beq.n	10066ad2 <__arm_cp.0_5+0x562>
10066a94:	9811      	ldr	r0, [sp, #68]	@ 0x44
10066a96:	7844      	ldrb	r4, [r0, #1]
10066a98:	2600      	movs	r6, #0
10066a9a:	f7f3 fbe7 	bl	1005a26c <data_length_extension_csr_ucfg_weak>
10066a9e:	2801      	cmp	r0, #1
10066aa0:	d001      	beq.n	10066aa6 <__arm_cp.0_5+0x536>
10066aa2:	251f      	movs	r5, #31
10066aa4:	e000      	b.n	10066aa8 <__arm_cp.0_5+0x538>
10066aa6:	43f5      	mvns	r5, r6
10066aa8:	4025      	ands	r5, r4
10066aaa:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
10066aac:	6840      	ldr	r0, [r0, #4]
10066aae:	9911      	ldr	r1, [sp, #68]	@ 0x44
10066ab0:	1c89      	adds	r1, r1, #2
10066ab2:	462a      	mov	r2, r5
10066ab4:	f7fb f87a 	bl	10061bac <Mem_Buff_block_write>
10066ab8:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
10066aba:	61c6      	str	r6, [r0, #28]
10066abc:	8045      	strh	r5, [r0, #2]
10066abe:	9911      	ldr	r1, [sp, #68]	@ 0x44
10066ac0:	7809      	ldrb	r1, [r1, #0]
10066ac2:	2203      	movs	r2, #3
10066ac4:	400a      	ands	r2, r1
10066ac6:	7a01      	ldrb	r1, [r0, #8]
10066ac8:	4311      	orrs	r1, r2
10066aca:	7201      	strb	r1, [r0, #8]
10066acc:	f7ee fefa 	bl	100558c4 <Acl_Rcv_Pkt_Handler>
10066ad0:	67be      	str	r6, [r7, #120]	@ 0x78
10066ad2:	a80e      	add	r0, sp, #56	@ 0x38
10066ad4:	7e40      	ldrb	r0, [r0, #25]
10066ad6:	2801      	cmp	r0, #1
10066ad8:	d131      	bne.n	10066b3e <__arm_cp.0_5+0x5ce>
10066ada:	2100      	movs	r1, #0
10066adc:	4638      	mov	r0, r7
10066ade:	f7f4 fb31 	bl	1005b144 <llc_conn_get_ctrl_pdu_data_p>
10066ae2:	4605      	mov	r5, r0
10066ae4:	9811      	ldr	r0, [sp, #68]	@ 0x44
10066ae6:	7801      	ldrb	r1, [r0, #0]
10066ae8:	7840      	ldrb	r0, [r0, #1]
10066aea:	0200      	lsls	r0, r0, #8
10066aec:	1840      	adds	r0, r0, r1
10066aee:	8028      	strh	r0, [r5, #0]
10066af0:	f7f5 fe0a 	bl	1005c708 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10066af4:	4606      	mov	r6, r0
10066af6:	f7f5 fdfd 	bl	1005c6f4 <cis_csr_ucfg_weak>
10066afa:	4330      	orrs	r0, r6
10066afc:	b2c0      	uxtb	r0, r0
10066afe:	f7fa fa13 	bl	10060f28 <LL_get_control_pdu_size>
10066b02:	a90e      	add	r1, sp, #56	@ 0x38
10066b04:	7d89      	ldrb	r1, [r1, #22]
10066b06:	2920      	cmp	r1, #32
10066b08:	d001      	beq.n	10066b0e <__arm_cp.0_5+0x59e>
10066b0a:	2102      	movs	r1, #2
10066b0c:	e000      	b.n	10066b10 <__arm_cp.0_5+0x5a0>
10066b0e:	2103      	movs	r1, #3
10066b10:	9a11      	ldr	r2, [sp, #68]	@ 0x44
10066b12:	1851      	adds	r1, r2, r1
10066b14:	1f00      	subs	r0, r0, #4
10066b16:	b2c3      	uxtb	r3, r0
10066b18:	7852      	ldrb	r2, [r2, #1]
10066b1a:	429a      	cmp	r2, r3
10066b1c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10066b1e:	d300      	bcc.n	10066b22 <__arm_cp.0_5+0x5b2>
10066b20:	4602      	mov	r2, r0
10066b22:	b2d2      	uxtb	r2, r2
10066b24:	1ca8      	adds	r0, r5, #2
10066b26:	f7ec fc05 	bl	10053334 <BLEPLAT_MemCpy>
10066b2a:	6920      	ldr	r0, [r4, #16]
10066b2c:	6801      	ldr	r1, [r0, #0]
10066b2e:	2201      	movs	r2, #1
10066b30:	430a      	orrs	r2, r1
10066b32:	6002      	str	r2, [r0, #0]
10066b34:	2015      	movs	r0, #21
10066b36:	f7fc fc93 	bl	10063460 <tsk_notify_idx>
10066b3a:	f7eb fe14 	bl	10052766 <BLE_STACK_ProcessRequest>
10066b3e:	ad0e      	add	r5, sp, #56	@ 0x38
10066b40:	4638      	mov	r0, r7
10066b42:	4629      	mov	r1, r5
10066b44:	f000 f80e 	bl	10066b64 <llc_conn_check_subrate_and_set_params_ucfg_weak>
10066b48:	7da8      	ldrb	r0, [r5, #22]
10066b4a:	2820      	cmp	r0, #32
10066b4c:	d000      	beq.n	10066b50 <__arm_cp.0_5+0x5e0>
10066b4e:	e495      	b.n	1006647c <llc_conn_isr+0x300>
10066b50:	9811      	ldr	r0, [sp, #68]	@ 0x44
10066b52:	7880      	ldrb	r0, [r0, #2]
10066b54:	0981      	lsrs	r1, r0, #6
10066b56:	4638      	mov	r0, r7
10066b58:	f7f7 f953 	bl	1005de02 <llc_cte_process_rx_cte_ucfg_weak>
10066b5c:	e48e      	b.n	1006647c <llc_conn_isr+0x300>
10066b5e:	46c0      	nop			@ (mov r8, r8)

10066b60 <__arm_cp.0_2>:
10066b60:	20002958 	.word	0x20002958

10066b64 <llc_conn_check_subrate_and_set_params_ucfg_weak>:
10066b64:	4770      	bx	lr

10066b66 <llc_conn_close_event>:
10066b66:	b5f0      	push	{r4, r5, r6, r7, lr}
10066b68:	b085      	sub	sp, #20
10066b6a:	4605      	mov	r5, r0
10066b6c:	2045      	movs	r0, #69	@ 0x45
10066b6e:	0080      	lsls	r0, r0, #2
10066b70:	9003      	str	r0, [sp, #12]
10066b72:	5828      	ldr	r0, [r5, r0]
10066b74:	462e      	mov	r6, r5
10066b76:	3642      	adds	r6, #66	@ 0x42
10066b78:	2800      	cmp	r0, #0
10066b7a:	d002      	beq.n	10066b82 <llc_conn_close_event+0x1c>
10066b7c:	8881      	ldrh	r1, [r0, #4]
10066b7e:	1c49      	adds	r1, r1, #1
10066b80:	8081      	strh	r1, [r0, #4]
10066b82:	462c      	mov	r4, r5
10066b84:	3480      	adds	r4, #128	@ 0x80
10066b86:	4628      	mov	r0, r5
10066b88:	f7f5 fe51 	bl	1005c82e <llc_subrate_update_cont_counter_ucfg_weak>
10066b8c:	6c68      	ldr	r0, [r5, #68]	@ 0x44
10066b8e:	9002      	str	r0, [sp, #8]
10066b90:	8837      	ldrh	r7, [r6, #0]
10066b92:	4628      	mov	r0, r5
10066b94:	f7f4 fa70 	bl	1005b078 <llc_conn_enhanced_get_latency>
10066b98:	4602      	mov	r2, r0
10066b9a:	4628      	mov	r0, r5
10066b9c:	4639      	mov	r1, r7
10066b9e:	f7f4 fdaa 	bl	1005b6f6 <llc_conn_calc_skip_ucfg_weak>
10066ba2:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
10066ba4:	4342      	muls	r2, r0
10066ba6:	6c69      	ldr	r1, [r5, #68]	@ 0x44
10066ba8:	1889      	adds	r1, r1, r2
10066baa:	6469      	str	r1, [r5, #68]	@ 0x44
10066bac:	9001      	str	r0, [sp, #4]
10066bae:	1838      	adds	r0, r7, r0
10066bb0:	9004      	str	r0, [sp, #16]
10066bb2:	b287      	uxth	r7, r0
10066bb4:	8830      	ldrh	r0, [r6, #0]
10066bb6:	42b8      	cmp	r0, r7
10066bb8:	d907      	bls.n	10066bca <llc_conn_close_event+0x64>
10066bba:	9803      	ldr	r0, [sp, #12]
10066bbc:	1828      	adds	r0, r5, r0
10066bbe:	2109      	movs	r1, #9
10066bc0:	0149      	lsls	r1, r1, #5
10066bc2:	1869      	adds	r1, r5, r1
10066bc4:	89c0      	ldrh	r0, [r0, #14]
10066bc6:	f7f5 fe31 	bl	1005c82c <llc_subrate_new_sr_base_event_ucfg_weak>
10066bca:	68a0      	ldr	r0, [r4, #8]
10066bcc:	2180      	movs	r1, #128	@ 0x80
10066bce:	4388      	bics	r0, r1
10066bd0:	60a0      	str	r0, [r4, #8]
10066bd2:	4628      	mov	r0, r5
10066bd4:	4639      	mov	r1, r7
10066bd6:	f7f4 fe31 	bl	1005b83c <llc_conn_check_instant_and_set_params>
10066bda:	4607      	mov	r7, r0
10066bdc:	9804      	ldr	r0, [sp, #16]
10066bde:	8030      	strh	r0, [r6, #0]
10066be0:	2f00      	cmp	r7, #0
10066be2:	d118      	bne.n	10066c16 <llc_conn_close_event+0xb0>
10066be4:	6c68      	ldr	r0, [r5, #68]	@ 0x44
10066be6:	9902      	ldr	r1, [sp, #8]
10066be8:	1a46      	subs	r6, r0, r1
10066bea:	4628      	mov	r0, r5
10066bec:	4631      	mov	r1, r6
10066bee:	f7f4 feb9 	bl	1005b964 <llc_conn_check_supervision_timer>
10066bf2:	4607      	mov	r7, r0
10066bf4:	2800      	cmp	r0, #0
10066bf6:	d10e      	bne.n	10066c16 <llc_conn_close_event+0xb0>
10066bf8:	4628      	mov	r0, r5
10066bfa:	4631      	mov	r1, r6
10066bfc:	f7f4 fde8 	bl	1005b7d0 <llc_conn_check_ctrl_proc_rsp_timer>
10066c00:	4607      	mov	r7, r0
10066c02:	2800      	cmp	r0, #0
10066c04:	d107      	bne.n	10066c16 <llc_conn_close_event+0xb0>
10066c06:	4628      	mov	r0, r5
10066c08:	4631      	mov	r1, r6
10066c0a:	9a01      	ldr	r2, [sp, #4]
10066c0c:	f7f5 fb1c 	bl	1005c248 <llc_conn_set_taskslot_params>
10066c10:	4607      	mov	r7, r0
10066c12:	2800      	cmp	r0, #0
10066c14:	d006      	beq.n	10066c24 <llc_conn_close_event+0xbe>
10066c16:	352d      	adds	r5, #45	@ 0x2d
10066c18:	7d28      	ldrb	r0, [r5, #20]
10066c1a:	f7fa fc5b 	bl	100614d4 <LL_sched_delete_taskslot>
10066c1e:	702f      	strb	r7, [r5, #0]
10066c20:	2000      	movs	r0, #0
10066c22:	8360      	strh	r0, [r4, #26]
10066c24:	6820      	ldr	r0, [r4, #0]
10066c26:	2800      	cmp	r0, #0
10066c28:	d001      	beq.n	10066c2e <llc_conn_close_event+0xc8>
10066c2a:	69c6      	ldr	r6, [r0, #28]
10066c2c:	e00d      	b.n	10066c4a <llc_conn_close_event+0xe4>
10066c2e:	2600      	movs	r6, #0
10066c30:	e00b      	b.n	10066c4a <llc_conn_close_event+0xe4>
10066c32:	4635      	mov	r5, r6
10066c34:	69f6      	ldr	r6, [r6, #28]
10066c36:	7a28      	ldrb	r0, [r5, #8]
10066c38:	0700      	lsls	r0, r0, #28
10066c3a:	d506      	bpl.n	10066c4a <llc_conn_close_event+0xe4>
10066c3c:	4620      	mov	r0, r4
10066c3e:	4629      	mov	r1, r5
10066c40:	f7fc fe14 	bl	1006386c <ACL_list_remove>
10066c44:	4628      	mov	r0, r5
10066c46:	f7ee ff0d 	bl	10055a64 <ACL_pkt_release>
10066c4a:	2e00      	cmp	r6, #0
10066c4c:	d1f1      	bne.n	10066c32 <llc_conn_close_event+0xcc>
10066c4e:	b005      	add	sp, #20
10066c50:	bdf0      	pop	{r4, r5, r6, r7, pc}

10066c52 <llc_conn_decrement_enc_count_rx>:
10066c52:	b51c      	push	{r2, r3, r4, lr}
10066c54:	4604      	mov	r4, r0
10066c56:	4669      	mov	r1, sp
10066c58:	f7ed ff23 	bl	10054aa2 <BLEPLAT_CNTR_SmGetRxCount>
10066c5c:	9800      	ldr	r0, [sp, #0]
10066c5e:	1e41      	subs	r1, r0, #1
10066c60:	9100      	str	r1, [sp, #0]
10066c62:	2800      	cmp	r0, #0
10066c64:	d102      	bne.n	10066c6c <llc_conn_decrement_enc_count_rx+0x1a>
10066c66:	9801      	ldr	r0, [sp, #4]
10066c68:	1e40      	subs	r0, r0, #1
10066c6a:	9001      	str	r0, [sp, #4]
10066c6c:	4669      	mov	r1, sp
10066c6e:	4620      	mov	r0, r4
10066c70:	f7ee f82a 	bl	10054cc8 <BLEPLAT_CNTR_SmSetRxCount>
10066c74:	bd1c      	pop	{r2, r3, r4, pc}
	...

10066c78 <llc_check_sreq_or_creq_tx_addr_res_off>:
10066c78:	b570      	push	{r4, r5, r6, lr}
10066c7a:	b084      	sub	sp, #16
10066c7c:	4615      	mov	r5, r2
10066c7e:	460a      	mov	r2, r1
10066c80:	4604      	mov	r4, r0
10066c82:	2b00      	cmp	r3, #0
10066c84:	d007      	beq.n	10066c96 <llc_check_sreq_or_creq_tx_addr_res_off+0x1e>
10066c86:	980a      	ldr	r0, [sp, #40]	@ 0x28
10066c88:	4282      	cmp	r2, r0
10066c8a:	d11f      	bne.n	10066ccc <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
10066c8c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10066c8e:	4068      	eors	r0, r5
10066c90:	0200      	lsls	r0, r0, #8
10066c92:	d11b      	bne.n	10066ccc <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
10066c94:	e01b      	b.n	10066cce <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
10066c96:	9809      	ldr	r0, [sp, #36]	@ 0x24
10066c98:	9908      	ldr	r1, [sp, #32]
10066c9a:	2301      	movs	r3, #1
10066c9c:	2900      	cmp	r1, #0
10066c9e:	d002      	beq.n	10066ca6 <llc_check_sreq_or_creq_tx_addr_res_off+0x2e>
10066ca0:	4606      	mov	r6, r0
10066ca2:	401e      	ands	r6, r3
10066ca4:	d104      	bne.n	10066cb0 <llc_check_sreq_or_creq_tx_addr_res_off+0x38>
10066ca6:	2900      	cmp	r1, #0
10066ca8:	d111      	bne.n	10066cce <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
10066caa:	2102      	movs	r1, #2
10066cac:	4008      	ands	r0, r1
10066cae:	d00e      	beq.n	10066cce <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
10066cb0:	4808      	ldr	r0, [pc, #32]	@ (10066cd4 <__arm_cp.1_0>)
10066cb2:	6800      	ldr	r0, [r0, #0]
10066cb4:	219c      	movs	r1, #156	@ 0x9c
10066cb6:	5841      	ldr	r1, [r0, r1]
10066cb8:	68c8      	ldr	r0, [r1, #12]
10066cba:	6909      	ldr	r1, [r1, #16]
10066cbc:	ae03      	add	r6, sp, #12
10066cbe:	9300      	str	r3, [sp, #0]
10066cc0:	9601      	str	r6, [sp, #4]
10066cc2:	462b      	mov	r3, r5
10066cc4:	f7fc fdfc 	bl	100638c0 <addr8_list_search>
10066cc8:	2800      	cmp	r0, #0
10066cca:	d100      	bne.n	10066cce <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
10066ccc:	24ff      	movs	r4, #255	@ 0xff
10066cce:	4620      	mov	r0, r4
10066cd0:	b004      	add	sp, #16
10066cd2:	bd70      	pop	{r4, r5, r6, pc}

10066cd4 <__arm_cp.1_0>:
10066cd4:	20002958 	.word	0x20002958

10066cd8 <llc_check_sreq_or_creq_tx_addr_ucfg_weak>:
10066cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
10066cda:	b087      	sub	sp, #28
10066cdc:	1ecd      	subs	r5, r1, #3
10066cde:	21ff      	movs	r1, #255	@ 0xff
10066ce0:	24fd      	movs	r4, #253	@ 0xfd
10066ce2:	4225      	tst	r5, r4
10066ce4:	d11c      	bne.n	10066d20 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
10066ce6:	2a00      	cmp	r2, #0
10066ce8:	d01a      	beq.n	10066d20 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
10066cea:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10066cec:	990c      	ldr	r1, [sp, #48]	@ 0x30
10066cee:	680c      	ldr	r4, [r1, #0]
10066cf0:	9405      	str	r4, [sp, #20]
10066cf2:	9306      	str	r3, [sp, #24]
10066cf4:	684b      	ldr	r3, [r1, #4]
10066cf6:	c882      	ldmia	r0!, {r1, r7}
10066cf8:	20ff      	movs	r0, #255	@ 0xff
10066cfa:	0600      	lsls	r0, r0, #24
10066cfc:	463c      	mov	r4, r7
10066cfe:	4384      	bics	r4, r0
10066d00:	c612      	stmia	r6!, {r1, r4}
10066d02:	9303      	str	r3, [sp, #12]
10066d04:	9805      	ldr	r0, [sp, #20]
10066d06:	9002      	str	r0, [sp, #8]
10066d08:	9806      	ldr	r0, [sp, #24]
10066d0a:	9001      	str	r0, [sp, #4]
10066d0c:	4268      	negs	r0, r5
10066d0e:	4168      	adcs	r0, r5
10066d10:	9000      	str	r0, [sp, #0]
10066d12:	b2c8      	uxtb	r0, r1
10066d14:	0752      	lsls	r2, r2, #29
10066d16:	0fd3      	lsrs	r3, r2, #31
10066d18:	463a      	mov	r2, r7
10066d1a:	f7ff ffad 	bl	10066c78 <llc_check_sreq_or_creq_tx_addr_res_off>
10066d1e:	4601      	mov	r1, r0
10066d20:	4608      	mov	r0, r1
10066d22:	b007      	add	sp, #28
10066d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10066d28 <llc_wl_mem_allocate>:
10066d28:	b510      	push	{r4, lr}
10066d2a:	2401      	movs	r4, #1
10066d2c:	4084      	lsls	r4, r0
10066d2e:	2108      	movs	r1, #8
10066d30:	4620      	mov	r0, r4
10066d32:	f7fa fdbf 	bl	100618b4 <csmem_mem_0_assign>
10066d36:	4903      	ldr	r1, [pc, #12]	@ (10066d44 <__arm_cp.0_0>)
10066d38:	6809      	ldr	r1, [r1, #0]
10066d3a:	229c      	movs	r2, #156	@ 0x9c
10066d3c:	5889      	ldr	r1, [r1, r2]
10066d3e:	744c      	strb	r4, [r1, #17]
10066d40:	60c8      	str	r0, [r1, #12]
10066d42:	bd10      	pop	{r4, pc}

10066d44 <__arm_cp.0_0>:
10066d44:	20002958 	.word	0x20002958

10066d48 <llc_padv_mem_allocate_ucfg_weak>:
10066d48:	4770      	bx	lr

10066d4a <llc_padv_init_ucfg_weak>:
10066d4a:	4770      	bx	lr

10066d4c <llc_past_mem_allocate_ucfg_weak>:
10066d4c:	4770      	bx	lr
	...

10066d50 <llc_priv_mem_allocate>:
10066d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10066d52:	2800      	cmp	r0, #0
10066d54:	d046      	beq.n	10066de4 <llc_priv_mem_allocate+0x94>
10066d56:	460e      	mov	r6, r1
10066d58:	2501      	movs	r5, #1
10066d5a:	2168      	movs	r1, #104	@ 0x68
10066d5c:	4628      	mov	r0, r5
10066d5e:	f7fa fda9 	bl	100618b4 <csmem_mem_0_assign>
10066d62:	4f21      	ldr	r7, [pc, #132]	@ (10066de8 <__arm_cp.0_0>)
10066d64:	6839      	ldr	r1, [r7, #0]
10066d66:	249c      	movs	r4, #156	@ 0x9c
10066d68:	5909      	ldr	r1, [r1, r4]
10066d6a:	6088      	str	r0, [r1, #8]
10066d6c:	40b5      	lsls	r5, r6
10066d6e:	b2ee      	uxtb	r6, r5
10066d70:	2108      	movs	r1, #8
10066d72:	4630      	mov	r0, r6
10066d74:	f7fa fd9e 	bl	100618b4 <csmem_mem_0_assign>
10066d78:	6839      	ldr	r1, [r7, #0]
10066d7a:	5909      	ldr	r1, [r1, r4]
10066d7c:	6889      	ldr	r1, [r1, #8]
10066d7e:	724d      	strb	r5, [r1, #9]
10066d80:	6048      	str	r0, [r1, #4]
10066d82:	9600      	str	r6, [sp, #0]
10066d84:	0075      	lsls	r5, r6, #1
10066d86:	2611      	movs	r6, #17
10066d88:	2e21      	cmp	r6, #33	@ 0x21
10066d8a:	d00f      	beq.n	10066dac <llc_priv_mem_allocate+0x5c>
10066d8c:	2108      	movs	r1, #8
10066d8e:	4628      	mov	r0, r5
10066d90:	f7fa fd90 	bl	100618b4 <csmem_mem_0_assign>
10066d94:	6839      	ldr	r1, [r7, #0]
10066d96:	5909      	ldr	r1, [r1, r4]
10066d98:	6889      	ldr	r1, [r1, #8]
10066d9a:	1989      	adds	r1, r1, r6
10066d9c:	1f49      	subs	r1, r1, #5
10066d9e:	6008      	str	r0, [r1, #0]
10066da0:	6838      	ldr	r0, [r7, #0]
10066da2:	5900      	ldr	r0, [r0, r4]
10066da4:	6880      	ldr	r0, [r0, #8]
10066da6:	5585      	strb	r5, [r0, r6]
10066da8:	3608      	adds	r6, #8
10066daa:	e7ed      	b.n	10066d88 <llc_priv_mem_allocate+0x38>
10066dac:	2128      	movs	r1, #40	@ 0x28
10066dae:	9800      	ldr	r0, [sp, #0]
10066db0:	f7fa fd80 	bl	100618b4 <csmem_mem_0_assign>
10066db4:	6839      	ldr	r1, [r7, #0]
10066db6:	5909      	ldr	r1, [r1, r4]
10066db8:	6889      	ldr	r1, [r1, #8]
10066dba:	6008      	str	r0, [r1, #0]
10066dbc:	480b      	ldr	r0, [pc, #44]	@ (10066dec <__arm_cp.0_1>)
10066dbe:	2502      	movs	r5, #2
10066dc0:	2601      	movs	r6, #1
10066dc2:	4629      	mov	r1, r5
10066dc4:	4632      	mov	r2, r6
10066dc6:	f7fa fd63 	bl	10061890 <csmem_mem_assign>
10066dca:	6839      	ldr	r1, [r7, #0]
10066dcc:	5909      	ldr	r1, [r1, r4]
10066dce:	6889      	ldr	r1, [r1, #8]
10066dd0:	6488      	str	r0, [r1, #72]	@ 0x48
10066dd2:	4806      	ldr	r0, [pc, #24]	@ (10066dec <__arm_cp.0_1>)
10066dd4:	4631      	mov	r1, r6
10066dd6:	462a      	mov	r2, r5
10066dd8:	f7fa fd5a 	bl	10061890 <csmem_mem_assign>
10066ddc:	6839      	ldr	r1, [r7, #0]
10066dde:	5909      	ldr	r1, [r1, r4]
10066de0:	6889      	ldr	r1, [r1, #8]
10066de2:	64c8      	str	r0, [r1, #76]	@ 0x4c
10066de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066de6:	46c0      	nop			@ (mov r8, r8)

10066de8 <__arm_cp.0_0>:
10066de8:	20002958 	.word	0x20002958

10066dec <__arm_cp.0_1>:
10066dec:	20002968 	.word	0x20002968

10066df0 <llc_pscan_isr_ucfg_weak>:
10066df0:	2000      	movs	r0, #0
10066df2:	4770      	bx	lr

10066df4 <llc_scan_isr_uncoded_ucfg_weak>:
10066df4:	2000      	movs	r0, #0
10066df6:	4770      	bx	lr

10066df8 <llc_scan_isr_coded_ucfg_weak>:
10066df8:	2000      	movs	r0, #0
10066dfa:	4770      	bx	lr

10066dfc <smp_dep_gap_get_local_identity_address>:
10066dfc:	b580      	push	{r7, lr}
10066dfe:	4a0a      	ldr	r2, [pc, #40]	@ (10066e28 <__arm_cp.0_0>)
10066e00:	6812      	ldr	r2, [r2, #0]
10066e02:	233d      	movs	r3, #61	@ 0x3d
10066e04:	5cd2      	ldrb	r2, [r2, r3]
10066e06:	7002      	strb	r2, [r0, #0]
10066e08:	2a01      	cmp	r2, #1
10066e0a:	d005      	beq.n	10066e18 <smp_dep_gap_get_local_identity_address+0x1c>
10066e0c:	2a00      	cmp	r2, #0
10066e0e:	d108      	bne.n	10066e22 <smp_dep_gap_get_local_identity_address+0x26>
10066e10:	4608      	mov	r0, r1
10066e12:	f7f0 f94f 	bl	100570b4 <GAP_get_public_address>
10066e16:	e002      	b.n	10066e1e <smp_dep_gap_get_local_identity_address+0x22>
10066e18:	4608      	mov	r0, r1
10066e1a:	f7f0 f955 	bl	100570c8 <GAP_get_static_random_address>
10066e1e:	2000      	movs	r0, #0
10066e20:	bd80      	pop	{r7, pc}
10066e22:	2086      	movs	r0, #134	@ 0x86
10066e24:	bd80      	pop	{r7, pc}
10066e26:	46c0      	nop			@ (mov r8, r8)

10066e28 <__arm_cp.0_0>:
10066e28:	200029a4 	.word	0x200029a4

10066e2c <smp_dep_l2c_send_acl_packet>:
10066e2c:	b570      	push	{r4, r5, r6, lr}
10066e2e:	460d      	mov	r5, r1
10066e30:	4606      	mov	r6, r0
10066e32:	2006      	movs	r0, #6
10066e34:	f7f3 fc58 	bl	1005a6e8 <L2C_send_frame>
10066e38:	4604      	mov	r4, r0
10066e3a:	2800      	cmp	r0, #0
10066e3c:	d003      	beq.n	10066e46 <smp_dep_l2c_send_acl_packet+0x1a>
10066e3e:	4628      	mov	r0, r5
10066e40:	f7ee fe10 	bl	10055a64 <ACL_pkt_release>
10066e44:	e008      	b.n	10066e58 <smp_dep_l2c_send_acl_packet+0x2c>
10066e46:	8930      	ldrh	r0, [r6, #8]
10066e48:	f001 f8de 	bl	10068008 <smp_get_remote_device_list_index>
10066e4c:	4602      	mov	r2, r0
10066e4e:	2000      	movs	r0, #0
10066e50:	4b02      	ldr	r3, [pc, #8]	@ (10066e5c <__arm_cp.0_0>)
10066e52:	4601      	mov	r1, r0
10066e54:	f7fb fda0 	bl	10062998 <smp_timer_reset>
10066e58:	4620      	mov	r0, r4
10066e5a:	bd70      	pop	{r4, r5, r6, pc}

10066e5c <__arm_cp.0_0>:
10066e5c:	00007530 	.word	0x00007530

10066e60 <smp_dep_l2c_send_acl_short_pdu>:
10066e60:	b5b0      	push	{r4, r5, r7, lr}
10066e62:	461c      	mov	r4, r3
10066e64:	4615      	mov	r5, r2
10066e66:	2900      	cmp	r1, #0
10066e68:	d107      	bne.n	10066e7a <smp_dep_l2c_send_acl_short_pdu+0x1a>
10066e6a:	8901      	ldrh	r1, [r0, #8]
10066e6c:	2000      	movs	r0, #0
10066e6e:	2206      	movs	r2, #6
10066e70:	f7ee fdd6 	bl	10055a20 <ACL_pkt_get>
10066e74:	4601      	mov	r1, r0
10066e76:	2800      	cmp	r0, #0
10066e78:	d009      	beq.n	10066e8e <smp_dep_l2c_send_acl_short_pdu+0x2e>
10066e7a:	2002      	movs	r0, #2
10066e7c:	8048      	strh	r0, [r1, #2]
10066e7e:	6848      	ldr	r0, [r1, #4]
10066e80:	7205      	strb	r5, [r0, #8]
10066e82:	6848      	ldr	r0, [r1, #4]
10066e84:	7244      	strb	r4, [r0, #9]
10066e86:	2006      	movs	r0, #6
10066e88:	f7f3 fc2e 	bl	1005a6e8 <L2C_send_frame>
10066e8c:	bdb0      	pop	{r4, r5, r7, pc}
10066e8e:	2088      	movs	r0, #136	@ 0x88
10066e90:	bdb0      	pop	{r4, r5, r7, pc}

10066e92 <smp_dep_sdb_get_bonding_records_count>:
10066e92:	b580      	push	{r7, lr}
10066e94:	f7fb f8dc 	bl	10062050 <sdb_sap_get_security_records_count>
10066e98:	bd80      	pop	{r7, pc}

10066e9a <smp_dep_sdb_add_bonding_record>:
10066e9a:	b5f0      	push	{r4, r5, r6, r7, lr}
10066e9c:	b097      	sub	sp, #92	@ 0x5c
10066e9e:	4604      	mov	r4, r0
10066ea0:	ae03      	add	r6, sp, #12
10066ea2:	2100      	movs	r1, #0
10066ea4:	2250      	movs	r2, #80	@ 0x50
10066ea6:	4630      	mov	r0, r6
10066ea8:	f7ec fa54 	bl	10053354 <BLEPLAT_MemSet>
10066eac:	2059      	movs	r0, #89	@ 0x59
10066eae:	5c20      	ldrb	r0, [r4, r0]
10066eb0:	7871      	ldrb	r1, [r6, #1]
10066eb2:	4301      	orrs	r1, r0
10066eb4:	7071      	strb	r1, [r6, #1]
10066eb6:	4630      	mov	r0, r6
10066eb8:	303e      	adds	r0, #62	@ 0x3e
10066eba:	4621      	mov	r1, r4
10066ebc:	315a      	adds	r1, #90	@ 0x5a
10066ebe:	2506      	movs	r5, #6
10066ec0:	462a      	mov	r2, r5
10066ec2:	f7ec fa37 	bl	10053334 <BLEPLAT_MemCpy>
10066ec6:	7c20      	ldrb	r0, [r4, #16]
10066ec8:	70f0      	strb	r0, [r6, #3]
10066eca:	7de0      	ldrb	r0, [r4, #23]
10066ecc:	0701      	lsls	r1, r0, #28
10066ece:	d416      	bmi.n	10066efe <smp_dep_sdb_add_bonding_record+0x64>
10066ed0:	2011      	movs	r0, #17
10066ed2:	5620      	ldrsb	r0, [r4, r0]
10066ed4:	2800      	cmp	r0, #0
10066ed6:	d504      	bpl.n	10066ee2 <smp_dep_sdb_add_bonding_record+0x48>
10066ed8:	a803      	add	r0, sp, #12
10066eda:	7841      	ldrb	r1, [r0, #1]
10066edc:	2280      	movs	r2, #128	@ 0x80
10066ede:	430a      	orrs	r2, r1
10066ee0:	7042      	strb	r2, [r0, #1]
10066ee2:	ae03      	add	r6, sp, #12
10066ee4:	1d30      	adds	r0, r6, #4
10066ee6:	4621      	mov	r1, r4
10066ee8:	311e      	adds	r1, #30
10066eea:	2202      	movs	r2, #2
10066eec:	f7ec fa22 	bl	10053334 <BLEPLAT_MemCpy>
10066ef0:	1db0      	adds	r0, r6, #6
10066ef2:	4621      	mov	r1, r4
10066ef4:	3120      	adds	r1, #32
10066ef6:	2208      	movs	r2, #8
10066ef8:	f7ec fa1c 	bl	10053334 <BLEPLAT_MemCpy>
10066efc:	e003      	b.n	10066f06 <smp_dep_sdb_add_bonding_record+0x6c>
10066efe:	21fe      	movs	r1, #254	@ 0xfe
10066f00:	4008      	ands	r0, r1
10066f02:	a903      	add	r1, sp, #12
10066f04:	7088      	strb	r0, [r1, #2]
10066f06:	a803      	add	r0, sp, #12
10066f08:	300e      	adds	r0, #14
10066f0a:	4621      	mov	r1, r4
10066f0c:	3128      	adds	r1, #40	@ 0x28
10066f0e:	2610      	movs	r6, #16
10066f10:	4632      	mov	r2, r6
10066f12:	f7ec fa0f 	bl	10053334 <BLEPLAT_MemCpy>
10066f16:	7c60      	ldrb	r0, [r4, #17]
10066f18:	0681      	lsls	r1, r0, #26
10066f1a:	d50c      	bpl.n	10066f36 <smp_dep_sdb_add_bonding_record+0x9c>
10066f1c:	af03      	add	r7, sp, #12
10066f1e:	4638      	mov	r0, r7
10066f20:	301e      	adds	r0, #30
10066f22:	4621      	mov	r1, r4
10066f24:	3138      	adds	r1, #56	@ 0x38
10066f26:	2210      	movs	r2, #16
10066f28:	f7ec fa04 	bl	10053334 <BLEPLAT_MemCpy>
10066f2c:	7878      	ldrb	r0, [r7, #1]
10066f2e:	2120      	movs	r1, #32
10066f30:	4301      	orrs	r1, r0
10066f32:	7079      	strb	r1, [r7, #1]
10066f34:	7c60      	ldrb	r0, [r4, #17]
10066f36:	0640      	lsls	r0, r0, #25
10066f38:	d50b      	bpl.n	10066f52 <smp_dep_sdb_add_bonding_record+0xb8>
10066f3a:	af03      	add	r7, sp, #12
10066f3c:	4638      	mov	r0, r7
10066f3e:	302e      	adds	r0, #46	@ 0x2e
10066f40:	4621      	mov	r1, r4
10066f42:	3148      	adds	r1, #72	@ 0x48
10066f44:	2210      	movs	r2, #16
10066f46:	f7ec f9f5 	bl	10053334 <BLEPLAT_MemCpy>
10066f4a:	7878      	ldrb	r0, [r7, #1]
10066f4c:	2140      	movs	r1, #64	@ 0x40
10066f4e:	4301      	orrs	r1, r0
10066f50:	7079      	strb	r1, [r7, #1]
10066f52:	7ca0      	ldrb	r0, [r4, #18]
10066f54:	2105      	movs	r1, #5
10066f56:	4208      	tst	r0, r1
10066f58:	d00a      	beq.n	10066f70 <smp_dep_sdb_add_bonding_record+0xd6>
10066f5a:	af03      	add	r7, sp, #12
10066f5c:	4638      	mov	r0, r7
10066f5e:	3044      	adds	r0, #68	@ 0x44
10066f60:	4621      	mov	r1, r4
10066f62:	311c      	adds	r1, #28
10066f64:	2202      	movs	r2, #2
10066f66:	f7ec f9e5 	bl	10053334 <BLEPLAT_MemCpy>
10066f6a:	7878      	ldrb	r0, [r7, #1]
10066f6c:	4330      	orrs	r0, r6
10066f6e:	e001      	b.n	10066f74 <smp_dep_sdb_add_bonding_record+0xda>
10066f70:	a803      	add	r0, sp, #12
10066f72:	7840      	ldrb	r0, [r0, #1]
10066f74:	7ae1      	ldrb	r1, [r4, #11]
10066f76:	4029      	ands	r1, r5
10066f78:	4301      	orrs	r1, r0
10066f7a:	a803      	add	r0, sp, #12
10066f7c:	7041      	strb	r1, [r0, #1]
10066f7e:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
10066f80:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
10066f82:	9115      	str	r1, [sp, #84]	@ 0x54
10066f84:	9216      	str	r2, [sp, #88]	@ 0x58
10066f86:	f7fb f867 	bl	10062058 <sdb_sap_add_security_record>
10066f8a:	4605      	mov	r5, r0
10066f8c:	2800      	cmp	r0, #0
10066f8e:	d00c      	beq.n	10066faa <smp_dep_sdb_add_bonding_record+0x110>
10066f90:	1ca1      	adds	r1, r4, #2
10066f92:	ac01      	add	r4, sp, #4
10066f94:	2206      	movs	r2, #6
10066f96:	4620      	mov	r0, r4
10066f98:	f7ec f9cc 	bl	10053334 <BLEPLAT_MemCpy>
10066f9c:	71a5      	strb	r5, [r4, #6]
10066f9e:	2042      	movs	r0, #66	@ 0x42
10066fa0:	2105      	movs	r1, #5
10066fa2:	2207      	movs	r2, #7
10066fa4:	4623      	mov	r3, r4
10066fa6:	f7fd fe51 	bl	10064c4c <aci_hal_fw_error_event_push_noinline>
10066faa:	4628      	mov	r0, r5
10066fac:	b017      	add	sp, #92	@ 0x5c
10066fae:	bdf0      	pop	{r4, r5, r6, r7, pc}

10066fb0 <smp_dep_sdb_find_bonding_record_by_conn_addr>:
10066fb0:	b570      	push	{r4, r5, r6, lr}
10066fb2:	b094      	sub	sp, #80	@ 0x50
10066fb4:	460e      	mov	r6, r1
10066fb6:	4604      	mov	r4, r0
10066fb8:	7841      	ldrb	r1, [r0, #1]
10066fba:	1c80      	adds	r0, r0, #2
10066fbc:	466a      	mov	r2, sp
10066fbe:	f7fb f86e 	bl	1006209e <sdb_sap_read_security_record>
10066fc2:	4605      	mov	r5, r0
10066fc4:	2e00      	cmp	r6, #0
10066fc6:	d005      	beq.n	10066fd4 <smp_dep_sdb_find_bonding_record_by_conn_addr+0x24>
10066fc8:	2d00      	cmp	r5, #0
10066fca:	d103      	bne.n	10066fd4 <smp_dep_sdb_find_bonding_record_by_conn_addr+0x24>
10066fcc:	4668      	mov	r0, sp
10066fce:	4621      	mov	r1, r4
10066fd0:	f000 f804 	bl	10066fdc <smp_dep_sdb_copy_bonding_record_data_to_remdev>
10066fd4:	4628      	mov	r0, r5
10066fd6:	b014      	add	sp, #80	@ 0x50
10066fd8:	bd70      	pop	{r4, r5, r6, pc}
	...

10066fdc <smp_dep_sdb_copy_bonding_record_data_to_remdev>:
10066fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10066fde:	460c      	mov	r4, r1
10066fe0:	4605      	mov	r5, r0
10066fe2:	2001      	movs	r0, #1
10066fe4:	7388      	strb	r0, [r1, #14]
10066fe6:	78e8      	ldrb	r0, [r5, #3]
10066fe8:	7408      	strb	r0, [r1, #16]
10066fea:	4608      	mov	r0, r1
10066fec:	301c      	adds	r0, #28
10066fee:	4629      	mov	r1, r5
10066ff0:	3144      	adds	r1, #68	@ 0x44
10066ff2:	2602      	movs	r6, #2
10066ff4:	4f19      	ldr	r7, [pc, #100]	@ (1006705c <__arm_cp.3_0>)
10066ff6:	4632      	mov	r2, r6
10066ff8:	47b8      	blx	r7
10066ffa:	4620      	mov	r0, r4
10066ffc:	301e      	adds	r0, #30
10066ffe:	1d29      	adds	r1, r5, #4
10067000:	4632      	mov	r2, r6
10067002:	47b8      	blx	r7
10067004:	4620      	mov	r0, r4
10067006:	3020      	adds	r0, #32
10067008:	1da9      	adds	r1, r5, #6
1006700a:	2208      	movs	r2, #8
1006700c:	47b8      	blx	r7
1006700e:	4620      	mov	r0, r4
10067010:	3028      	adds	r0, #40	@ 0x28
10067012:	4629      	mov	r1, r5
10067014:	310e      	adds	r1, #14
10067016:	2610      	movs	r6, #16
10067018:	4632      	mov	r2, r6
1006701a:	47b8      	blx	r7
1006701c:	4620      	mov	r0, r4
1006701e:	3038      	adds	r0, #56	@ 0x38
10067020:	4629      	mov	r1, r5
10067022:	311e      	adds	r1, #30
10067024:	4632      	mov	r2, r6
10067026:	47b8      	blx	r7
10067028:	4620      	mov	r0, r4
1006702a:	3048      	adds	r0, #72	@ 0x48
1006702c:	4629      	mov	r1, r5
1006702e:	312e      	adds	r1, #46	@ 0x2e
10067030:	4632      	mov	r2, r6
10067032:	47b8      	blx	r7
10067034:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
10067036:	66a0      	str	r0, [r4, #104]	@ 0x68
10067038:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
1006703a:	66e0      	str	r0, [r4, #108]	@ 0x6c
1006703c:	7868      	ldrb	r0, [r5, #1]
1006703e:	2106      	movs	r1, #6
10067040:	4001      	ands	r1, r0
10067042:	72e1      	strb	r1, [r4, #11]
10067044:	21e0      	movs	r1, #224	@ 0xe0
10067046:	4001      	ands	r1, r0
10067048:	7c60      	ldrb	r0, [r4, #17]
1006704a:	4308      	orrs	r0, r1
1006704c:	7460      	strb	r0, [r4, #17]
1006704e:	78a8      	ldrb	r0, [r5, #2]
10067050:	0701      	lsls	r1, r0, #28
10067052:	d502      	bpl.n	1006705a <smp_dep_sdb_copy_bonding_record_data_to_remdev+0x7e>
10067054:	21fe      	movs	r1, #254	@ 0xfe
10067056:	4008      	ands	r0, r1
10067058:	75e0      	strb	r0, [r4, #23]
1006705a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1006705c <__arm_cp.3_0>:
1006705c:	10053335 	.word	0x10053335

10067060 <smp_dep_sdb_find_bonding_record_read_address>:
10067060:	b570      	push	{r4, r5, r6, lr}
10067062:	b094      	sub	sp, #80	@ 0x50
10067064:	4614      	mov	r4, r2
10067066:	460e      	mov	r6, r1
10067068:	7841      	ldrb	r1, [r0, #1]
1006706a:	1c80      	adds	r0, r0, #2
1006706c:	466a      	mov	r2, sp
1006706e:	f7fb f816 	bl	1006209e <sdb_sap_read_security_record>
10067072:	4605      	mov	r5, r0
10067074:	2800      	cmp	r0, #0
10067076:	d107      	bne.n	10067088 <smp_dep_sdb_find_bonding_record_read_address+0x28>
10067078:	2000      	movs	r0, #0
1006707a:	7030      	strb	r0, [r6, #0]
1006707c:	4669      	mov	r1, sp
1006707e:	313e      	adds	r1, #62	@ 0x3e
10067080:	2206      	movs	r2, #6
10067082:	4620      	mov	r0, r4
10067084:	f7ec f956 	bl	10053334 <BLEPLAT_MemCpy>
10067088:	4628      	mov	r0, r5
1006708a:	b014      	add	sp, #80	@ 0x50
1006708c:	bd70      	pop	{r4, r5, r6, pc}

1006708e <smp_dep_sdb_find_matching_ltk_read_record>:
1006708e:	b5b0      	push	{r4, r5, r7, lr}
10067090:	b094      	sub	sp, #80	@ 0x50
10067092:	4614      	mov	r4, r2
10067094:	466a      	mov	r2, sp
10067096:	f7fb f87b 	bl	10062190 <sdb_sap_read_security_record_matching>
1006709a:	4605      	mov	r5, r0
1006709c:	2800      	cmp	r0, #0
1006709e:	d103      	bne.n	100670a8 <smp_dep_sdb_find_matching_ltk_read_record+0x1a>
100670a0:	4668      	mov	r0, sp
100670a2:	4621      	mov	r1, r4
100670a4:	f7ff ff9a 	bl	10066fdc <smp_dep_sdb_copy_bonding_record_data_to_remdev>
100670a8:	4628      	mov	r0, r5
100670aa:	b014      	add	sp, #80	@ 0x50
100670ac:	bdb0      	pop	{r4, r5, r7, pc}

100670ae <smp_start_encryption_ucfg_weak>:
100670ae:	201f      	movs	r0, #31
100670b0:	4770      	bx	lr
	...

100670b4 <smp_pp3_pairing_completed_successful>:
100670b4:	b570      	push	{r4, r5, r6, lr}
100670b6:	4604      	mov	r4, r0
100670b8:	7b80      	ldrb	r0, [r0, #14]
100670ba:	2103      	movs	r1, #3
100670bc:	4001      	ands	r1, r0
100670be:	8925      	ldrh	r5, [r4, #8]
100670c0:	2903      	cmp	r1, #3
100670c2:	d10a      	bne.n	100670da <smp_pp3_pairing_completed_successful+0x26>
100670c4:	4620      	mov	r0, r4
100670c6:	f7ff fee8 	bl	10066e9a <smp_dep_sdb_add_bonding_record>
100670ca:	2800      	cmp	r0, #0
100670cc:	d005      	beq.n	100670da <smp_pp3_pairing_completed_successful+0x26>
100670ce:	2108      	movs	r1, #8
100670d0:	2200      	movs	r2, #0
100670d2:	4620      	mov	r0, r4
100670d4:	f000 f826 	bl	10067124 <smp_pp3_pairing_process_abort>
100670d8:	bd70      	pop	{r4, r5, r6, pc}
100670da:	4628      	mov	r0, r5
100670dc:	f000 ff94 	bl	10068008 <smp_get_remote_device_list_index>
100670e0:	4602      	mov	r2, r0
100670e2:	2001      	movs	r0, #1
100670e4:	2100      	movs	r1, #0
100670e6:	4b0e      	ldr	r3, [pc, #56]	@ (10067120 <__arm_cp.0_0>)
100670e8:	f7fb fc56 	bl	10062998 <smp_timer_reset>
100670ec:	7ce0      	ldrb	r0, [r4, #19]
100670ee:	2803      	cmp	r0, #3
100670f0:	d102      	bne.n	100670f8 <smp_pp3_pairing_completed_successful+0x44>
100670f2:	2000      	movs	r0, #0
100670f4:	f000 ffe6 	bl	100680c4 <smp_oob_clear_remote_data_entry>
100670f8:	4620      	mov	r0, r4
100670fa:	3018      	adds	r0, #24
100670fc:	2600      	movs	r6, #0
100670fe:	2204      	movs	r2, #4
10067100:	4631      	mov	r1, r6
10067102:	f7ec f927 	bl	10053354 <BLEPLAT_MemSet>
10067106:	4620      	mov	r0, r4
10067108:	4631      	mov	r1, r6
1006710a:	f000 f83b 	bl	10067184 <smp_pp3_pairing_completed_update_stats>
1006710e:	20f1      	movs	r0, #241	@ 0xf1
10067110:	72a0      	strb	r0, [r4, #10]
10067112:	2002      	movs	r0, #2
10067114:	4629      	mov	r1, r5
10067116:	4632      	mov	r2, r6
10067118:	4633      	mov	r3, r6
1006711a:	f7fd fe0b 	bl	10064d34 <aci_gap_pairing_complete_event_push_noinline>
1006711e:	bd70      	pop	{r4, r5, r6, pc}

10067120 <__arm_cp.0_0>:
10067120:	00007530 	.word	0x00007530

10067124 <smp_pp3_pairing_process_abort>:
10067124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10067126:	4616      	mov	r6, r2
10067128:	460c      	mov	r4, r1
1006712a:	4605      	mov	r5, r0
1006712c:	8900      	ldrh	r0, [r0, #8]
1006712e:	f000 ff6b 	bl	10068008 <smp_get_remote_device_list_index>
10067132:	4602      	mov	r2, r0
10067134:	2001      	movs	r0, #1
10067136:	2700      	movs	r7, #0
10067138:	4b11      	ldr	r3, [pc, #68]	@ (10067180 <__arm_cp.1_0>)
1006713a:	4639      	mov	r1, r7
1006713c:	f7fb fc2c 	bl	10062998 <smp_timer_reset>
10067140:	8928      	ldrh	r0, [r5, #8]
10067142:	f7fb fbed 	bl	10062920 <smp_rxp_flush_packet_queues>
10067146:	2102      	movs	r1, #2
10067148:	4628      	mov	r0, r5
1006714a:	f000 f81b 	bl	10067184 <smp_pp3_pairing_completed_update_stats>
1006714e:	4628      	mov	r0, r5
10067150:	3018      	adds	r0, #24
10067152:	2204      	movs	r2, #4
10067154:	4639      	mov	r1, r7
10067156:	f7ec f8fd 	bl	10053354 <BLEPLAT_MemSet>
1006715a:	7be8      	ldrb	r0, [r5, #15]
1006715c:	212f      	movs	r1, #47	@ 0x2f
1006715e:	4001      	ands	r1, r0
10067160:	73e9      	strb	r1, [r5, #15]
10067162:	2e00      	cmp	r6, #0
10067164:	d004      	beq.n	10067170 <smp_pp3_pairing_process_abort+0x4c>
10067166:	7868      	ldrb	r0, [r5, #1]
10067168:	1ca9      	adds	r1, r5, #2
1006716a:	f000 fe51 	bl	10067e10 <smp_cmn_repeated_attacks_protection_start>
1006716e:	27fb      	movs	r7, #251	@ 0xfb
10067170:	72af      	strb	r7, [r5, #10]
10067172:	8929      	ldrh	r1, [r5, #8]
10067174:	2002      	movs	r0, #2
10067176:	4602      	mov	r2, r0
10067178:	4623      	mov	r3, r4
1006717a:	f7fd fddb 	bl	10064d34 <aci_gap_pairing_complete_event_push_noinline>
1006717e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10067180 <__arm_cp.1_0>:
10067180:	00007530 	.word	0x00007530

10067184 <smp_pp3_pairing_completed_update_stats>:
10067184:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10067186:	2260      	movs	r2, #96	@ 0x60
10067188:	5c82      	ldrb	r2, [r0, r2]
1006718a:	07d2      	lsls	r2, r2, #31
1006718c:	7a82      	ldrb	r2, [r0, #10]
1006718e:	d104      	bne.n	1006719a <smp_pp3_pairing_completed_update_stats+0x16>
10067190:	3260      	adds	r2, #96	@ 0x60
10067192:	b2d2      	uxtb	r2, r2
10067194:	2a51      	cmp	r2, #81	@ 0x51
10067196:	d304      	bcc.n	100671a2 <smp_pp3_pairing_completed_update_stats+0x1e>
10067198:	e00f      	b.n	100671ba <smp_pp3_pairing_completed_update_stats+0x36>
1006719a:	3250      	adds	r2, #80	@ 0x50
1006719c:	b2d2      	uxtb	r2, r2
1006719e:	2a40      	cmp	r2, #64	@ 0x40
100671a0:	d80b      	bhi.n	100671ba <smp_pp3_pairing_completed_update_stats+0x36>
100671a2:	4a09      	ldr	r2, [pc, #36]	@ (100671c8 <__arm_cp.2_0>)
100671a4:	6812      	ldr	r2, [r2, #0]
100671a6:	23b1      	movs	r3, #177	@ 0xb1
100671a8:	5cd3      	ldrb	r3, [r2, r3]
100671aa:	2b00      	cmp	r3, #0
100671ac:	d005      	beq.n	100671ba <smp_pp3_pairing_completed_update_stats+0x36>
100671ae:	32b1      	adds	r2, #177	@ 0xb1
100671b0:	7d04      	ldrb	r4, [r0, #20]
100671b2:	2501      	movs	r5, #1
100671b4:	40a5      	lsls	r5, r4
100671b6:	43ab      	bics	r3, r5
100671b8:	7013      	strb	r3, [r2, #0]
100671ba:	466a      	mov	r2, sp
100671bc:	7111      	strb	r1, [r2, #4]
100671be:	9000      	str	r0, [sp, #0]
100671c0:	4610      	mov	r0, r2
100671c2:	f000 ffb2 	bl	1006812a <smp_scp_stats_update_on_pairing_complete_ucfg_weak>
100671c6:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100671c8 <__arm_cp.2_0>:
100671c8:	200029a4 	.word	0x200029a4

100671cc <smp_pp3_pairing_failed_receive>:
100671cc:	b5b0      	push	{r4, r5, r7, lr}
100671ce:	460c      	mov	r4, r1
100671d0:	2160      	movs	r1, #96	@ 0x60
100671d2:	5c61      	ldrb	r1, [r4, r1]
100671d4:	2201      	movs	r2, #1
100671d6:	400a      	ands	r2, r1
100671d8:	7aa3      	ldrb	r3, [r4, #10]
100671da:	6840      	ldr	r0, [r0, #4]
100671dc:	7a41      	ldrb	r1, [r0, #9]
100671de:	d102      	bne.n	100671e6 <smp_pp3_pairing_failed_receive+0x1a>
100671e0:	2b9f      	cmp	r3, #159	@ 0x9f
100671e2:	d802      	bhi.n	100671ea <smp_pp3_pairing_failed_receive+0x1e>
100671e4:	bdb0      	pop	{r4, r5, r7, pc}
100671e6:	2bb0      	cmp	r3, #176	@ 0xb0
100671e8:	d314      	bcc.n	10067214 <smp_pp3_pairing_failed_receive+0x48>
100671ea:	2bf0      	cmp	r3, #240	@ 0xf0
100671ec:	d915      	bls.n	1006721a <smp_pp3_pairing_failed_receive+0x4e>
100671ee:	2bf1      	cmp	r3, #241	@ 0xf1
100671f0:	d10e      	bne.n	10067210 <smp_pp3_pairing_failed_receive+0x44>
100671f2:	290f      	cmp	r1, #15
100671f4:	d10c      	bne.n	10067210 <smp_pp3_pairing_failed_receive+0x44>
100671f6:	4625      	mov	r5, r4
100671f8:	3559      	adds	r5, #89	@ 0x59
100671fa:	210f      	movs	r1, #15
100671fc:	2201      	movs	r2, #1
100671fe:	4620      	mov	r0, r4
10067200:	f7ff ff90 	bl	10067124 <smp_pp3_pairing_process_abort>
10067204:	7829      	ldrb	r1, [r5, #0]
10067206:	345a      	adds	r4, #90	@ 0x5a
10067208:	4620      	mov	r0, r4
1006720a:	f7fa ffaf 	bl	1006216c <sdb_sap_del_bonded_device>
1006720e:	bdb0      	pop	{r4, r5, r7, pc}
10067210:	2a00      	cmp	r2, #0
10067212:	d0e7      	beq.n	100671e4 <smp_pp3_pairing_failed_receive+0x18>
10067214:	7e20      	ldrb	r0, [r4, #24]
10067216:	0780      	lsls	r0, r0, #30
10067218:	d0e4      	beq.n	100671e4 <smp_pp3_pairing_failed_receive+0x18>
1006721a:	2201      	movs	r2, #1
1006721c:	4620      	mov	r0, r4
1006721e:	f7ff ff81 	bl	10067124 <smp_pp3_pairing_process_abort>
10067222:	bdb0      	pop	{r4, r5, r7, pc}

10067224 <smp_pp3_pairing_failed_send>:
10067224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10067226:	461f      	mov	r7, r3
10067228:	4613      	mov	r3, r2
1006722a:	460c      	mov	r4, r1
1006722c:	4605      	mov	r5, r0
1006722e:	2205      	movs	r2, #5
10067230:	4619      	mov	r1, r3
10067232:	4623      	mov	r3, r4
10067234:	f7ff fe14 	bl	10066e60 <smp_dep_l2c_send_acl_short_pdu>
10067238:	4606      	mov	r6, r0
1006723a:	2f00      	cmp	r7, #0
1006723c:	d101      	bne.n	10067242 <smp_pp3_pairing_failed_send+0x1e>
1006723e:	2e88      	cmp	r6, #136	@ 0x88
10067240:	d004      	beq.n	1006724c <smp_pp3_pairing_failed_send+0x28>
10067242:	2201      	movs	r2, #1
10067244:	4628      	mov	r0, r5
10067246:	4621      	mov	r1, r4
10067248:	f7ff ff6c 	bl	10067124 <smp_pp3_pairing_process_abort>
1006724c:	4630      	mov	r0, r6
1006724e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10067250 <smp_pp1_get_next_free_pairing_idx>:
10067250:	b510      	push	{r4, lr}
10067252:	490b      	ldr	r1, [pc, #44]	@ (10067280 <__arm_cp.0_0>)
10067254:	680a      	ldr	r2, [r1, #0]
10067256:	21b1      	movs	r1, #177	@ 0xb1
10067258:	5c53      	ldrb	r3, [r2, r1]
1006725a:	32b1      	adds	r2, #177	@ 0xb1
1006725c:	2100      	movs	r1, #0
1006725e:	2903      	cmp	r1, #3
10067260:	d005      	beq.n	1006726e <smp_pp1_get_next_free_pairing_idx+0x1e>
10067262:	2401      	movs	r4, #1
10067264:	408c      	lsls	r4, r1
10067266:	421c      	tst	r4, r3
10067268:	d003      	beq.n	10067272 <smp_pp1_get_next_free_pairing_idx+0x22>
1006726a:	1c49      	adds	r1, r1, #1
1006726c:	e7f7      	b.n	1006725e <smp_pp1_get_next_free_pairing_idx+0xe>
1006726e:	2103      	movs	r1, #3
10067270:	e003      	b.n	1006727a <smp_pp1_get_next_free_pairing_idx+0x2a>
10067272:	2800      	cmp	r0, #0
10067274:	d001      	beq.n	1006727a <smp_pp1_get_next_free_pairing_idx+0x2a>
10067276:	4323      	orrs	r3, r4
10067278:	7013      	strb	r3, [r2, #0]
1006727a:	b2c8      	uxtb	r0, r1
1006727c:	bd10      	pop	{r4, pc}
1006727e:	46c0      	nop			@ (mov r8, r8)

10067280 <__arm_cp.0_0>:
10067280:	200029a4 	.word	0x200029a4

10067284 <smp_pp1_get_pairing_pdu_offset>:
10067284:	0100      	lsls	r0, r0, #4
10067286:	2900      	cmp	r1, #0
10067288:	d000      	beq.n	1006728c <smp_pp1_get_pairing_pdu_offset+0x8>
1006728a:	3008      	adds	r0, #8
1006728c:	b2c0      	uxtb	r0, r0
1006728e:	4770      	bx	lr

10067290 <smp_pp1_reqrsp_pdu_params_check>:
10067290:	b51c      	push	{r2, r3, r4, lr}
10067292:	2104      	movs	r1, #4
10067294:	2207      	movs	r2, #7
10067296:	466c      	mov	r4, sp
10067298:	4623      	mov	r3, r4
1006729a:	f7ee fbff 	bl	10055a9c <ACL_pkt_read>
1006729e:	7862      	ldrb	r2, [r4, #1]
100672a0:	210a      	movs	r1, #10
100672a2:	2a04      	cmp	r2, #4
100672a4:	d813      	bhi.n	100672ce <smp_pp1_reqrsp_pdu_params_check+0x3e>
100672a6:	466a      	mov	r2, sp
100672a8:	7892      	ldrb	r2, [r2, #2]
100672aa:	2a01      	cmp	r2, #1
100672ac:	d80f      	bhi.n	100672ce <smp_pp1_reqrsp_pdu_params_check+0x3e>
100672ae:	466a      	mov	r2, sp
100672b0:	78d2      	ldrb	r2, [r2, #3]
100672b2:	0792      	lsls	r2, r2, #30
100672b4:	d40b      	bmi.n	100672ce <smp_pp1_reqrsp_pdu_params_check+0x3e>
100672b6:	4907      	ldr	r1, [pc, #28]	@ (100672d4 <__arm_cp.2_0>)
100672b8:	6809      	ldr	r1, [r1, #0]
100672ba:	2234      	movs	r2, #52	@ 0x34
100672bc:	5c8a      	ldrb	r2, [r1, r2]
100672be:	4669      	mov	r1, sp
100672c0:	7909      	ldrb	r1, [r1, #4]
100672c2:	4291      	cmp	r1, r2
100672c4:	d302      	bcc.n	100672cc <smp_pp1_reqrsp_pdu_params_check+0x3c>
100672c6:	2911      	cmp	r1, #17
100672c8:	4601      	mov	r1, r0
100672ca:	d300      	bcc.n	100672ce <smp_pp1_reqrsp_pdu_params_check+0x3e>
100672cc:	2106      	movs	r1, #6
100672ce:	4608      	mov	r0, r1
100672d0:	bd1c      	pop	{r2, r3, r4, pc}
100672d2:	46c0      	nop			@ (mov r8, r8)

100672d4 <__arm_cp.2_0>:
100672d4:	200029a4 	.word	0x200029a4

100672d8 <smp_pp1_reqrsp_pdu_copy_to_pairing_data>:
100672d8:	b580      	push	{r7, lr}
100672da:	7d12      	ldrb	r2, [r2, #20]
100672dc:	0112      	lsls	r2, r2, #4
100672de:	2900      	cmp	r1, #0
100672e0:	d000      	beq.n	100672e4 <smp_pp1_reqrsp_pdu_copy_to_pairing_data+0xc>
100672e2:	3208      	adds	r2, #8
100672e4:	b2d1      	uxtb	r1, r2
100672e6:	4a04      	ldr	r2, [pc, #16]	@ (100672f8 <__arm_cp.3_0>)
100672e8:	6812      	ldr	r2, [r2, #0]
100672ea:	1853      	adds	r3, r2, r1
100672ec:	33b4      	adds	r3, #180	@ 0xb4
100672ee:	2104      	movs	r1, #4
100672f0:	2207      	movs	r2, #7
100672f2:	f7ee fbd3 	bl	10055a9c <ACL_pkt_read>
100672f6:	bd80      	pop	{r7, pc}

100672f8 <__arm_cp.3_0>:
100672f8:	200029a4 	.word	0x200029a4

100672fc <smp_pp1_reqrsp_pdu_extract_from_pairing_data>:
100672fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100672fe:	4924      	ldr	r1, [pc, #144]	@ (10067390 <__arm_cp.4_0>)
10067300:	6809      	ldr	r1, [r1, #0]
10067302:	7d02      	ldrb	r2, [r0, #20]
10067304:	0112      	lsls	r2, r2, #4
10067306:	3208      	adds	r2, #8
10067308:	b2d2      	uxtb	r2, r2
1006730a:	188b      	adds	r3, r1, r2
1006730c:	24b5      	movs	r4, #181	@ 0xb5
1006730e:	5d1c      	ldrb	r4, [r3, r4]
10067310:	7304      	strb	r4, [r0, #12]
10067312:	24b6      	movs	r4, #182	@ 0xb6
10067314:	5d1b      	ldrb	r3, [r3, r4]
10067316:	2b01      	cmp	r3, #1
10067318:	d103      	bne.n	10067322 <smp_pp1_reqrsp_pdu_extract_from_pairing_data+0x26>
1006731a:	7b43      	ldrb	r3, [r0, #13]
1006731c:	2402      	movs	r4, #2
1006731e:	431c      	orrs	r4, r3
10067320:	7344      	strb	r4, [r0, #13]
10067322:	460b      	mov	r3, r1
10067324:	3336      	adds	r3, #54	@ 0x36
10067326:	2503      	movs	r5, #3
10067328:	4315      	orrs	r5, r2
1006732a:	460c      	mov	r4, r1
1006732c:	34b4      	adds	r4, #180	@ 0xb4
1006732e:	5d65      	ldrb	r5, [r4, r5]
10067330:	2601      	movs	r6, #1
10067332:	402e      	ands	r6, r5
10067334:	7b87      	ldrb	r7, [r0, #14]
10067336:	4337      	orrs	r7, r6
10067338:	7387      	strb	r7, [r0, #14]
1006733a:	2604      	movs	r6, #4
1006733c:	4035      	ands	r5, r6
1006733e:	7bc7      	ldrb	r7, [r0, #15]
10067340:	432f      	orrs	r7, r5
10067342:	73c7      	strb	r7, [r0, #15]
10067344:	4316      	orrs	r6, r2
10067346:	5da5      	ldrb	r5, [r4, r6]
10067348:	7405      	strb	r5, [r0, #16]
1006734a:	2505      	movs	r5, #5
1006734c:	4315      	orrs	r5, r2
1006734e:	5d64      	ldrb	r4, [r4, r5]
10067350:	2560      	movs	r5, #96	@ 0x60
10067352:	5d45      	ldrb	r5, [r0, r5]
10067354:	07ed      	lsls	r5, r5, #31
10067356:	d10e      	bne.n	10067376 <smp_pp1_reqrsp_pdu_extract_from_pairing_data+0x7a>
10067358:	781d      	ldrb	r5, [r3, #0]
1006735a:	402c      	ands	r4, r5
1006735c:	2507      	movs	r5, #7
1006735e:	402c      	ands	r4, r5
10067360:	7484      	strb	r4, [r0, #18]
10067362:	2406      	movs	r4, #6
10067364:	4322      	orrs	r2, r4
10067366:	1889      	adds	r1, r1, r2
10067368:	22b4      	movs	r2, #180	@ 0xb4
1006736a:	5c89      	ldrb	r1, [r1, r2]
1006736c:	785a      	ldrb	r2, [r3, #1]
1006736e:	400a      	ands	r2, r1
10067370:	402a      	ands	r2, r5
10067372:	7442      	strb	r2, [r0, #17]
10067374:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067376:	785d      	ldrb	r5, [r3, #1]
10067378:	4025      	ands	r5, r4
1006737a:	7445      	strb	r5, [r0, #17]
1006737c:	2406      	movs	r4, #6
1006737e:	4322      	orrs	r2, r4
10067380:	1889      	adds	r1, r1, r2
10067382:	22b4      	movs	r2, #180	@ 0xb4
10067384:	5c89      	ldrb	r1, [r1, r2]
10067386:	781a      	ldrb	r2, [r3, #0]
10067388:	400a      	ands	r2, r1
1006738a:	7482      	strb	r2, [r0, #18]
1006738c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006738e:	46c0      	nop			@ (mov r8, r8)

10067390 <__arm_cp.4_0>:
10067390:	200029a4 	.word	0x200029a4

10067394 <smp_pp1_key_generation_method_selection>:
10067394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10067396:	7b01      	ldrb	r1, [r0, #12]
10067398:	7b42      	ldrb	r2, [r0, #13]
1006739a:	07d3      	lsls	r3, r2, #31
1006739c:	d001      	beq.n	100673a2 <smp_pp1_key_generation_method_selection+0xe>
1006739e:	0793      	lsls	r3, r2, #30
100673a0:	d405      	bmi.n	100673ae <smp_pp1_key_generation_method_selection+0x1a>
100673a2:	7dc3      	ldrb	r3, [r0, #23]
100673a4:	2408      	movs	r4, #8
100673a6:	401c      	ands	r4, r3
100673a8:	d003      	beq.n	100673b2 <smp_pp1_key_generation_method_selection+0x1e>
100673aa:	0792      	lsls	r2, r2, #30
100673ac:	d001      	beq.n	100673b2 <smp_pp1_key_generation_method_selection+0x1e>
100673ae:	2203      	movs	r2, #3
100673b0:	e019      	b.n	100673e6 <smp_pp1_key_generation_method_selection+0x52>
100673b2:	7bc3      	ldrb	r3, [r0, #15]
100673b4:	2205      	movs	r2, #5
100673b6:	4213      	tst	r3, r2
100673b8:	d014      	beq.n	100673e4 <smp_pp1_key_generation_method_selection+0x50>
100673ba:	4b42      	ldr	r3, [pc, #264]	@ (100674c4 <__arm_cp.5_0>)
100673bc:	681b      	ldr	r3, [r3, #0]
100673be:	2540      	movs	r5, #64	@ 0x40
100673c0:	5d5d      	ldrb	r5, [r3, r5]
100673c2:	434a      	muls	r2, r1
100673c4:	4b40      	ldr	r3, [pc, #256]	@ (100674c8 <__arm_cp.5_1>)
100673c6:	189a      	adds	r2, r3, r2
100673c8:	5d52      	ldrb	r2, [r2, r5]
100673ca:	74c2      	strb	r2, [r0, #19]
100673cc:	4603      	mov	r3, r0
100673ce:	3313      	adds	r3, #19
100673d0:	2a00      	cmp	r2, #0
100673d2:	d10b      	bne.n	100673ec <smp_pp1_key_generation_method_selection+0x58>
100673d4:	2c00      	cmp	r4, #0
100673d6:	d13d      	bne.n	10067454 <smp_pp1_key_generation_method_selection+0xc0>
100673d8:	2901      	cmp	r1, #1
100673da:	d16f      	bne.n	100674bc <smp_pp1_key_generation_method_selection+0x128>
100673dc:	2d01      	cmp	r5, #1
100673de:	d16d      	bne.n	100674bc <smp_pp1_key_generation_method_selection+0x128>
100673e0:	2201      	movs	r2, #1
100673e2:	e06c      	b.n	100674be <smp_pp1_key_generation_method_selection+0x12a>
100673e4:	2201      	movs	r2, #1
100673e6:	74c2      	strb	r2, [r0, #19]
100673e8:	4603      	mov	r3, r0
100673ea:	3313      	adds	r3, #19
100673ec:	2460      	movs	r4, #96	@ 0x60
100673ee:	5d05      	ldrb	r5, [r0, r4]
100673f0:	2601      	movs	r6, #1
100673f2:	4035      	ands	r5, r6
100673f4:	d103      	bne.n	100673fe <smp_pp1_key_generation_method_selection+0x6a>
100673f6:	241a      	movs	r4, #26
100673f8:	5704      	ldrsb	r4, [r0, r4]
100673fa:	2c00      	cmp	r4, #0
100673fc:	d426      	bmi.n	1006744c <smp_pp1_key_generation_method_selection+0xb8>
100673fe:	4604      	mov	r4, r0
10067400:	340f      	adds	r4, #15
10067402:	7824      	ldrb	r4, [r4, #0]
10067404:	07e4      	lsls	r4, r4, #31
10067406:	d004      	beq.n	10067412 <smp_pp1_key_generation_method_selection+0x7e>
10067408:	2a01      	cmp	r2, #1
1006740a:	d102      	bne.n	10067412 <smp_pp1_key_generation_method_selection+0x7e>
1006740c:	2403      	movs	r4, #3
1006740e:	701c      	strb	r4, [r3, #0]
10067410:	e052      	b.n	100674b8 <smp_pp1_key_generation_method_selection+0x124>
10067412:	7dc3      	ldrb	r3, [r0, #23]
10067414:	071b      	lsls	r3, r3, #28
10067416:	d503      	bpl.n	10067420 <smp_pp1_key_generation_method_selection+0x8c>
10067418:	2a02      	cmp	r2, #2
1006741a:	d101      	bne.n	10067420 <smp_pp1_key_generation_method_selection+0x8c>
1006741c:	2300      	movs	r3, #0
1006741e:	76c3      	strb	r3, [r0, #27]
10067420:	2a02      	cmp	r2, #2
10067422:	d111      	bne.n	10067448 <smp_pp1_key_generation_method_selection+0xb4>
10067424:	7bc2      	ldrb	r2, [r0, #15]
10067426:	23ef      	movs	r3, #239	@ 0xef
10067428:	4013      	ands	r3, r2
1006742a:	73c3      	strb	r3, [r0, #15]
1006742c:	4a25      	ldr	r2, [pc, #148]	@ (100674c4 <__arm_cp.5_0>)
1006742e:	6812      	ldr	r2, [r2, #0]
10067430:	2340      	movs	r3, #64	@ 0x40
10067432:	5cd2      	ldrb	r2, [r2, r3]
10067434:	2400      	movs	r4, #0
10067436:	2a02      	cmp	r2, #2
10067438:	4627      	mov	r7, r4
1006743a:	d318      	bcc.n	1006746e <smp_pp1_key_generation_method_selection+0xda>
1006743c:	2a04      	cmp	r2, #4
1006743e:	d00b      	beq.n	10067458 <smp_pp1_key_generation_method_selection+0xc4>
10067440:	2a02      	cmp	r2, #2
10067442:	d113      	bne.n	1006746c <smp_pp1_key_generation_method_selection+0xd8>
10067444:	4637      	mov	r7, r6
10067446:	e012      	b.n	1006746e <smp_pp1_key_generation_method_selection+0xda>
10067448:	2400      	movs	r4, #0
1006744a:	e035      	b.n	100674b8 <smp_pp1_key_generation_method_selection+0x124>
1006744c:	4c1d      	ldr	r4, [pc, #116]	@ (100674c4 <__arm_cp.5_0>)
1006744e:	6824      	ldr	r4, [r4, #0]
10067450:	3431      	adds	r4, #49	@ 0x31
10067452:	e7d6      	b.n	10067402 <smp_pp1_key_generation_method_selection+0x6e>
10067454:	2204      	movs	r2, #4
10067456:	e032      	b.n	100674be <smp_pp1_key_generation_method_selection+0x12a>
10067458:	2902      	cmp	r1, #2
1006745a:	4637      	mov	r7, r6
1006745c:	d307      	bcc.n	1006746e <smp_pp1_key_generation_method_selection+0xda>
1006745e:	2904      	cmp	r1, #4
10067460:	462f      	mov	r7, r5
10067462:	d004      	beq.n	1006746e <smp_pp1_key_generation_method_selection+0xda>
10067464:	2902      	cmp	r1, #2
10067466:	d101      	bne.n	1006746c <smp_pp1_key_generation_method_selection+0xd8>
10067468:	4627      	mov	r7, r4
1006746a:	e000      	b.n	1006746e <smp_pp1_key_generation_method_selection+0xda>
1006746c:	27ff      	movs	r7, #255	@ 0xff
1006746e:	4917      	ldr	r1, [pc, #92]	@ (100674cc <__arm_cp.5_2>)
10067470:	6809      	ldr	r1, [r1, #0]
10067472:	224e      	movs	r2, #78	@ 0x4e
10067474:	5c89      	ldrb	r1, [r1, r2]
10067476:	0749      	lsls	r1, r1, #29
10067478:	d51e      	bpl.n	100674b8 <smp_pp1_key_generation_method_selection+0x124>
1006747a:	8906      	ldrh	r6, [r0, #8]
1006747c:	4814      	ldr	r0, [pc, #80]	@ (100674d0 <__arm_cp.5_3>)
1006747e:	6800      	ldr	r0, [r0, #0]
10067480:	6980      	ldr	r0, [r0, #24]
10067482:	2502      	movs	r5, #2
10067484:	2246      	movs	r2, #70	@ 0x46
10067486:	2303      	movs	r3, #3
10067488:	4629      	mov	r1, r5
1006748a:	f7ee fc9f 	bl	10055dcc <aci_event_fifo_push_header>
1006748e:	2800      	cmp	r0, #0
10067490:	d012      	beq.n	100674b8 <smp_pp1_key_generation_method_selection+0x124>
10067492:	4601      	mov	r1, r0
10067494:	7286      	strb	r6, [r0, #10]
10067496:	2004      	movs	r0, #4
10067498:	7248      	strb	r0, [r1, #9]
1006749a:	720d      	strb	r5, [r1, #8]
1006749c:	2400      	movs	r4, #0
1006749e:	71cc      	strb	r4, [r1, #7]
100674a0:	2005      	movs	r0, #5
100674a2:	7188      	strb	r0, [r1, #6]
100674a4:	730f      	strb	r7, [r1, #12]
100674a6:	20ff      	movs	r0, #255	@ 0xff
100674a8:	7148      	strb	r0, [r1, #5]
100674aa:	2082      	movs	r0, #130	@ 0x82
100674ac:	7108      	strb	r0, [r1, #4]
100674ae:	0a30      	lsrs	r0, r6, #8
100674b0:	72c8      	strb	r0, [r1, #11]
100674b2:	4628      	mov	r0, r5
100674b4:	f7ee fd27 	bl	10055f06 <aci_event_fifo_push>
100674b8:	4620      	mov	r0, r4
100674ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100674bc:	2202      	movs	r2, #2
100674be:	701a      	strb	r2, [r3, #0]
100674c0:	e794      	b.n	100673ec <smp_pp1_key_generation_method_selection+0x58>
100674c2:	46c0      	nop			@ (mov r8, r8)

100674c4 <__arm_cp.5_0>:
100674c4:	200029a4 	.word	0x200029a4

100674c8 <__arm_cp.5_1>:
100674c8:	1006a5a8 	.word	0x1006a5a8

100674cc <__arm_cp.5_2>:
100674cc:	20002958 	.word	0x20002958

100674d0 <__arm_cp.5_3>:
100674d0:	20002908 	.word	0x20002908

100674d4 <smp_pp1_auth_req_field_generate_from_device_config>:
100674d4:	490b      	ldr	r1, [pc, #44]	@ (10067504 <__arm_cp.6_0>)
100674d6:	6809      	ldr	r1, [r1, #0]
100674d8:	2230      	movs	r2, #48	@ 0x30
100674da:	5c8a      	ldrb	r2, [r1, r2]
100674dc:	2301      	movs	r3, #1
100674de:	4013      	ands	r3, r2
100674e0:	3130      	adds	r1, #48	@ 0x30
100674e2:	784a      	ldrb	r2, [r1, #1]
100674e4:	07d2      	lsls	r2, r2, #31
100674e6:	0f52      	lsrs	r2, r2, #29
100674e8:	18d2      	adds	r2, r2, r3
100674ea:	78cb      	ldrb	r3, [r1, #3]
100674ec:	07db      	lsls	r3, r3, #31
100674ee:	0edb      	lsrs	r3, r3, #27
100674f0:	18d2      	adds	r2, r2, r3
100674f2:	7889      	ldrb	r1, [r1, #2]
100674f4:	084b      	lsrs	r3, r1, #1
100674f6:	430b      	orrs	r3, r1
100674f8:	07d9      	lsls	r1, r3, #31
100674fa:	0f09      	lsrs	r1, r1, #28
100674fc:	1851      	adds	r1, r2, r1
100674fe:	7001      	strb	r1, [r0, #0]
10067500:	4770      	bx	lr
10067502:	46c0      	nop			@ (mov r8, r8)

10067504 <__arm_cp.6_0>:
10067504:	200029a4 	.word	0x200029a4

10067508 <smp_pp1_hndl_pairing_response_mode_through_event>:
10067508:	b570      	push	{r4, r5, r6, lr}
1006750a:	4605      	mov	r5, r0
1006750c:	8900      	ldrh	r0, [r0, #8]
1006750e:	f7fb fe2a 	bl	10063166 <smp_sap_check_is_peer_device_bonded>
10067512:	4246      	negs	r6, r0
10067514:	4146      	adcs	r6, r0
10067516:	491b      	ldr	r1, [pc, #108]	@ (10067584 <__arm_cp.8_0>)
10067518:	6809      	ldr	r1, [r1, #0]
1006751a:	223c      	movs	r2, #60	@ 0x3c
1006751c:	5c89      	ldrb	r1, [r1, r2]
1006751e:	2902      	cmp	r1, #2
10067520:	d004      	beq.n	1006752c <smp_pp1_hndl_pairing_response_mode_through_event+0x24>
10067522:	2400      	movs	r4, #0
10067524:	2901      	cmp	r1, #1
10067526:	d12a      	bne.n	1006757e <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10067528:	2800      	cmp	r0, #0
1006752a:	d128      	bne.n	1006757e <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
1006752c:	2008      	movs	r0, #8
1006752e:	4301      	orrs	r1, r0
10067530:	75a9      	strb	r1, [r5, #22]
10067532:	4815      	ldr	r0, [pc, #84]	@ (10067588 <__arm_cp.8_1>)
10067534:	6800      	ldr	r0, [r0, #0]
10067536:	214e      	movs	r1, #78	@ 0x4e
10067538:	5c40      	ldrb	r0, [r0, r1]
1006753a:	2401      	movs	r4, #1
1006753c:	0780      	lsls	r0, r0, #30
1006753e:	d51e      	bpl.n	1006757e <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10067540:	892d      	ldrh	r5, [r5, #8]
10067542:	4812      	ldr	r0, [pc, #72]	@ (1006758c <__arm_cp.8_2>)
10067544:	6800      	ldr	r0, [r0, #0]
10067546:	6980      	ldr	r0, [r0, #24]
10067548:	2102      	movs	r1, #2
1006754a:	224b      	movs	r2, #75	@ 0x4b
1006754c:	2303      	movs	r3, #3
1006754e:	f7ee fc3d 	bl	10055dcc <aci_event_fifo_push_header>
10067552:	2800      	cmp	r0, #0
10067554:	d013      	beq.n	1006757e <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10067556:	4601      	mov	r1, r0
10067558:	7285      	strb	r5, [r0, #10]
1006755a:	2004      	movs	r0, #4
1006755c:	7248      	strb	r0, [r1, #9]
1006755e:	200b      	movs	r0, #11
10067560:	7208      	strb	r0, [r1, #8]
10067562:	2000      	movs	r0, #0
10067564:	71c8      	strb	r0, [r1, #7]
10067566:	2005      	movs	r0, #5
10067568:	7188      	strb	r0, [r1, #6]
1006756a:	730e      	strb	r6, [r1, #12]
1006756c:	20ff      	movs	r0, #255	@ 0xff
1006756e:	7148      	strb	r0, [r1, #5]
10067570:	2082      	movs	r0, #130	@ 0x82
10067572:	7108      	strb	r0, [r1, #4]
10067574:	0a28      	lsrs	r0, r5, #8
10067576:	72c8      	strb	r0, [r1, #11]
10067578:	2002      	movs	r0, #2
1006757a:	f7ee fcc4 	bl	10055f06 <aci_event_fifo_push>
1006757e:	4620      	mov	r0, r4
10067580:	bd70      	pop	{r4, r5, r6, pc}
10067582:	46c0      	nop			@ (mov r8, r8)

10067584 <__arm_cp.8_0>:
10067584:	200029a4 	.word	0x200029a4

10067588 <__arm_cp.8_1>:
10067588:	20002958 	.word	0x20002958

1006758c <__arm_cp.8_2>:
1006758c:	20002908 	.word	0x20002908

10067590 <smp_pp1_pairing_packet_build>:
10067590:	b510      	push	{r4, lr}
10067592:	2407      	movs	r4, #7
10067594:	8044      	strh	r4, [r0, #2]
10067596:	6844      	ldr	r4, [r0, #4]
10067598:	7221      	strb	r1, [r4, #8]
1006759a:	490b      	ldr	r1, [pc, #44]	@ (100675c8 <__arm_cp.9_0>)
1006759c:	6809      	ldr	r1, [r1, #0]
1006759e:	2440      	movs	r4, #64	@ 0x40
100675a0:	5d09      	ldrb	r1, [r1, r4]
100675a2:	6844      	ldr	r4, [r0, #4]
100675a4:	7261      	strb	r1, [r4, #9]
100675a6:	2101      	movs	r1, #1
100675a8:	4011      	ands	r1, r2
100675aa:	6842      	ldr	r2, [r0, #4]
100675ac:	7291      	strb	r1, [r2, #10]
100675ae:	6841      	ldr	r1, [r0, #4]
100675b0:	72cb      	strb	r3, [r1, #11]
100675b2:	6841      	ldr	r1, [r0, #4]
100675b4:	9a02      	ldr	r2, [sp, #8]
100675b6:	730a      	strb	r2, [r1, #12]
100675b8:	6841      	ldr	r1, [r0, #4]
100675ba:	9a03      	ldr	r2, [sp, #12]
100675bc:	734a      	strb	r2, [r1, #13]
100675be:	6840      	ldr	r0, [r0, #4]
100675c0:	9904      	ldr	r1, [sp, #16]
100675c2:	7381      	strb	r1, [r0, #14]
100675c4:	bd10      	pop	{r4, pc}
100675c6:	46c0      	nop			@ (mov r8, r8)

100675c8 <__arm_cp.9_0>:
100675c8:	200029a4 	.word	0x200029a4

100675cc <smp_pp1_per_rxp_pairing_request>:
100675cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100675ce:	460c      	mov	r4, r1
100675d0:	4607      	mov	r7, r0
100675d2:	2501      	movs	r5, #1
100675d4:	4628      	mov	r0, r5
100675d6:	f7ff fe3b 	bl	10067250 <smp_pp1_get_next_free_pairing_idx>
100675da:	2802      	cmp	r0, #2
100675dc:	d901      	bls.n	100675e2 <smp_pp1_per_rxp_pairing_request+0x16>
100675de:	2038      	movs	r0, #56	@ 0x38
100675e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100675e2:	4606      	mov	r6, r0
100675e4:	4638      	mov	r0, r7
100675e6:	f7ff fe53 	bl	10067290 <smp_pp1_reqrsp_pdu_params_check>
100675ea:	2800      	cmp	r0, #0
100675ec:	d010      	beq.n	10067610 <smp_pp1_per_rxp_pairing_request+0x44>
100675ee:	4601      	mov	r1, r0
100675f0:	4810      	ldr	r0, [pc, #64]	@ (10067634 <__arm_cp.1_0>)
100675f2:	6800      	ldr	r0, [r0, #0]
100675f4:	22b1      	movs	r2, #177	@ 0xb1
100675f6:	5c82      	ldrb	r2, [r0, r2]
100675f8:	2a00      	cmp	r2, #0
100675fa:	d003      	beq.n	10067604 <smp_pp1_per_rxp_pairing_request+0x38>
100675fc:	30b1      	adds	r0, #177	@ 0xb1
100675fe:	40b5      	lsls	r5, r6
10067600:	43aa      	bics	r2, r5
10067602:	7002      	strb	r2, [r0, #0]
10067604:	2200      	movs	r2, #0
10067606:	2301      	movs	r3, #1
10067608:	4620      	mov	r0, r4
1006760a:	f7ff fe0b 	bl	10067224 <smp_pp3_pairing_failed_send>
1006760e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10067610:	7526      	strb	r6, [r4, #20]
10067612:	2101      	movs	r1, #1
10067614:	4638      	mov	r0, r7
10067616:	4622      	mov	r2, r4
10067618:	f7ff fe5e 	bl	100672d8 <smp_pp1_reqrsp_pdu_copy_to_pairing_data>
1006761c:	4620      	mov	r0, r4
1006761e:	f7ff ff73 	bl	10067508 <smp_pp1_hndl_pairing_response_mode_through_event>
10067622:	2800      	cmp	r0, #0
10067624:	d001      	beq.n	1006762a <smp_pp1_per_rxp_pairing_request+0x5e>
10067626:	2000      	movs	r0, #0
10067628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006762a:	4620      	mov	r0, r4
1006762c:	f000 f804 	bl	10067638 <smp_pp1_per_send_pairing_response>
10067630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10067632:	46c0      	nop			@ (mov r8, r8)

10067634 <__arm_cp.1_0>:
10067634:	200029a4 	.word	0x200029a4

10067638 <smp_pp1_per_send_pairing_response>:
10067638:	b5f0      	push	{r4, r5, r6, r7, lr}
1006763a:	b087      	sub	sp, #28
1006763c:	4604      	mov	r4, r0
1006763e:	a806      	add	r0, sp, #24
10067640:	2600      	movs	r6, #0
10067642:	7006      	strb	r6, [r0, #0]
10067644:	8921      	ldrh	r1, [r4, #8]
10067646:	220b      	movs	r2, #11
10067648:	4630      	mov	r0, r6
1006764a:	f7ee f9e9 	bl	10055a20 <ACL_pkt_get>
1006764e:	2800      	cmp	r0, #0
10067650:	d01b      	beq.n	1006768a <smp_pp1_per_send_pairing_response+0x52>
10067652:	9005      	str	r0, [sp, #20]
10067654:	20b0      	movs	r0, #176	@ 0xb0
10067656:	72a0      	strb	r0, [r4, #10]
10067658:	75e6      	strb	r6, [r4, #23]
1006765a:	7be0      	ldrb	r0, [r4, #15]
1006765c:	212f      	movs	r1, #47	@ 0x2f
1006765e:	4001      	ands	r1, r0
10067660:	73e1      	strb	r1, [r4, #15]
10067662:	4f43      	ldr	r7, [pc, #268]	@ (10067770 <__arm_cp.2_0>)
10067664:	683d      	ldr	r5, [r7, #0]
10067666:	7d20      	ldrb	r0, [r4, #20]
10067668:	2101      	movs	r1, #1
1006766a:	9104      	str	r1, [sp, #16]
1006766c:	f7ff fe0a 	bl	10067284 <smp_pp1_get_pairing_pdu_offset>
10067670:	1940      	adds	r0, r0, r5
10067672:	21b7      	movs	r1, #183	@ 0xb7
10067674:	5c45      	ldrb	r5, [r0, r1]
10067676:	6838      	ldr	r0, [r7, #0]
10067678:	2132      	movs	r1, #50	@ 0x32
1006767a:	5c40      	ldrb	r0, [r0, r1]
1006767c:	2802      	cmp	r0, #2
1006767e:	d106      	bne.n	1006768e <smp_pp1_per_send_pairing_response+0x56>
10067680:	2008      	movs	r0, #8
10067682:	4028      	ands	r0, r5
10067684:	d103      	bne.n	1006768e <smp_pp1_per_send_pairing_response+0x56>
10067686:	2103      	movs	r1, #3
10067688:	e051      	b.n	1006772e <smp_pp1_per_send_pairing_response+0xf6>
1006768a:	2688      	movs	r6, #136	@ 0x88
1006768c:	e061      	b.n	10067752 <smp_pp1_per_send_pairing_response+0x11a>
1006768e:	7e20      	ldrb	r0, [r4, #24]
10067690:	07c0      	lsls	r0, r0, #31
10067692:	d105      	bne.n	100676a0 <smp_pp1_per_send_pairing_response+0x68>
10067694:	af06      	add	r7, sp, #24
10067696:	4638      	mov	r0, r7
10067698:	f7ff ff1c 	bl	100674d4 <smp_pp1_auth_req_field_generate_from_device_config>
1006769c:	7838      	ldrb	r0, [r7, #0]
1006769e:	e002      	b.n	100676a6 <smp_pp1_per_send_pairing_response+0x6e>
100676a0:	7d60      	ldrb	r0, [r4, #21]
100676a2:	a906      	add	r1, sp, #24
100676a4:	7008      	strb	r0, [r1, #0]
100676a6:	4005      	ands	r5, r0
100676a8:	2018      	movs	r0, #24
100676aa:	4028      	ands	r0, r5
100676ac:	7de1      	ldrb	r1, [r4, #23]
100676ae:	4301      	orrs	r1, r0
100676b0:	75e1      	strb	r1, [r4, #23]
100676b2:	0708      	lsls	r0, r1, #28
100676b4:	d401      	bmi.n	100676ba <smp_pp1_per_send_pairing_response+0x82>
100676b6:	27b4      	movs	r7, #180	@ 0xb4
100676b8:	e006      	b.n	100676c8 <smp_pp1_per_send_pairing_response+0x90>
100676ba:	4620      	mov	r0, r4
100676bc:	f000 fd31 	bl	10068122 <smp_scp_continue_on_exclusive_sc_pairing_ucfg_weak>
100676c0:	4601      	mov	r1, r0
100676c2:	2800      	cmp	r0, #0
100676c4:	d133      	bne.n	1006772e <smp_pp1_per_send_pairing_response+0xf6>
100676c6:	27b2      	movs	r7, #178	@ 0xb2
100676c8:	4620      	mov	r0, r4
100676ca:	f000 fcdf 	bl	1006808c <smp_oob_check_is_remote_data_present>
100676ce:	9806      	ldr	r0, [sp, #24]
100676d0:	0741      	lsls	r1, r0, #29
100676d2:	0fc9      	lsrs	r1, r1, #31
100676d4:	73e1      	strb	r1, [r4, #15]
100676d6:	07c0      	lsls	r0, r0, #31
100676d8:	0f80      	lsrs	r0, r0, #30
100676da:	73a0      	strb	r0, [r4, #14]
100676dc:	4620      	mov	r0, r4
100676de:	f7ff fe0d 	bl	100672fc <smp_pp1_reqrsp_pdu_extract_from_pairing_data>
100676e2:	4620      	mov	r0, r4
100676e4:	f7ff fe56 	bl	10067394 <smp_pp1_key_generation_method_selection>
100676e8:	4601      	mov	r1, r0
100676ea:	2800      	cmp	r0, #0
100676ec:	d11f      	bne.n	1006772e <smp_pp1_per_send_pairing_response+0xf6>
100676ee:	7ce0      	ldrb	r0, [r4, #19]
100676f0:	2802      	cmp	r0, #2
100676f2:	d104      	bne.n	100676fe <smp_pp1_per_send_pairing_response+0xc6>
100676f4:	7be0      	ldrb	r0, [r4, #15]
100676f6:	06c0      	lsls	r0, r0, #27
100676f8:	d401      	bmi.n	100676fe <smp_pp1_per_send_pairing_response+0xc6>
100676fa:	204d      	movs	r0, #77	@ 0x4d
100676fc:	43c7      	mvns	r7, r0
100676fe:	481c      	ldr	r0, [pc, #112]	@ (10067770 <__arm_cp.2_0>)
10067700:	6800      	ldr	r0, [r0, #0]
10067702:	2135      	movs	r1, #53	@ 0x35
10067704:	5c40      	ldrb	r0, [r0, r1]
10067706:	a906      	add	r1, sp, #24
10067708:	780b      	ldrb	r3, [r1, #0]
1006770a:	7b62      	ldrb	r2, [r4, #13]
1006770c:	7c61      	ldrb	r1, [r4, #17]
1006770e:	7ca5      	ldrb	r5, [r4, #18]
10067710:	9000      	str	r0, [sp, #0]
10067712:	9101      	str	r1, [sp, #4]
10067714:	9502      	str	r5, [sp, #8]
10067716:	2102      	movs	r1, #2
10067718:	9d05      	ldr	r5, [sp, #20]
1006771a:	4628      	mov	r0, r5
1006771c:	f7ff ff38 	bl	10067590 <smp_pp1_pairing_packet_build>
10067720:	4620      	mov	r0, r4
10067722:	4629      	mov	r1, r5
10067724:	f7ff fb82 	bl	10066e2c <smp_dep_l2c_send_acl_packet>
10067728:	4601      	mov	r1, r0
1006772a:	2800      	cmp	r0, #0
1006772c:	d014      	beq.n	10067758 <smp_pp1_per_send_pairing_response+0x120>
1006772e:	4810      	ldr	r0, [pc, #64]	@ (10067770 <__arm_cp.2_0>)
10067730:	6800      	ldr	r0, [r0, #0]
10067732:	22b1      	movs	r2, #177	@ 0xb1
10067734:	5c82      	ldrb	r2, [r0, r2]
10067736:	2a00      	cmp	r2, #0
10067738:	d005      	beq.n	10067746 <smp_pp1_per_send_pairing_response+0x10e>
1006773a:	30b1      	adds	r0, #177	@ 0xb1
1006773c:	7d23      	ldrb	r3, [r4, #20]
1006773e:	9d04      	ldr	r5, [sp, #16]
10067740:	409d      	lsls	r5, r3
10067742:	43aa      	bics	r2, r5
10067744:	7002      	strb	r2, [r0, #0]
10067746:	2301      	movs	r3, #1
10067748:	4620      	mov	r0, r4
1006774a:	9a05      	ldr	r2, [sp, #20]
1006774c:	f7ff fd6a 	bl	10067224 <smp_pp3_pairing_failed_send>
10067750:	4606      	mov	r6, r0
10067752:	4630      	mov	r0, r6
10067754:	b007      	add	sp, #28
10067756:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067758:	7ae0      	ldrb	r0, [r4, #11]
1006775a:	21f8      	movs	r1, #248	@ 0xf8
1006775c:	4001      	ands	r1, r0
1006775e:	72e1      	strb	r1, [r4, #11]
10067760:	9805      	ldr	r0, [sp, #20]
10067762:	4631      	mov	r1, r6
10067764:	4622      	mov	r2, r4
10067766:	f7ff fdb7 	bl	100672d8 <smp_pp1_reqrsp_pdu_copy_to_pairing_data>
1006776a:	72a7      	strb	r7, [r4, #10]
1006776c:	e7f1      	b.n	10067752 <smp_pp1_per_send_pairing_response+0x11a>
1006776e:	46c0      	nop			@ (mov r8, r8)

10067770 <__arm_cp.2_0>:
10067770:	200029a4 	.word	0x200029a4

10067774 <smp_pp2_per_rx_process_pairing_confirm>:
10067774:	b5f0      	push	{r4, r5, r6, r7, lr}
10067776:	b089      	sub	sp, #36	@ 0x24
10067778:	460c      	mov	r4, r1
1006777a:	4607      	mov	r7, r0
1006777c:	8909      	ldrh	r1, [r1, #8]
1006777e:	2500      	movs	r5, #0
10067780:	2215      	movs	r2, #21
10067782:	4628      	mov	r0, r5
10067784:	f7ee f94c 	bl	10055a20 <ACL_pkt_get>
10067788:	2800      	cmp	r0, #0
1006778a:	d013      	beq.n	100677b4 <smp_pp2_per_rx_process_pairing_confirm+0x40>
1006778c:	4606      	mov	r6, r0
1006778e:	2f00      	cmp	r7, #0
10067790:	d006      	beq.n	100677a0 <smp_pp2_per_rx_process_pairing_confirm+0x2c>
10067792:	4623      	mov	r3, r4
10067794:	3328      	adds	r3, #40	@ 0x28
10067796:	2105      	movs	r1, #5
10067798:	2210      	movs	r2, #16
1006779a:	4638      	mov	r0, r7
1006779c:	f7ee f97e 	bl	10055a9c <ACL_pkt_read>
100677a0:	7de0      	ldrb	r0, [r4, #23]
100677a2:	0700      	lsls	r0, r0, #28
100677a4:	d408      	bmi.n	100677b8 <smp_pp2_per_rx_process_pairing_confirm+0x44>
100677a6:	4621      	mov	r1, r4
100677a8:	3148      	adds	r1, #72	@ 0x48
100677aa:	aa05      	add	r2, sp, #20
100677ac:	4620      	mov	r0, r4
100677ae:	f000 f831 	bl	10067814 <smp_pp2_per_lep_confirm_value_compute>
100677b2:	e007      	b.n	100677c4 <smp_pp2_per_rx_process_pairing_confirm+0x50>
100677b4:	2088      	movs	r0, #136	@ 0x88
100677b6:	e019      	b.n	100677ec <smp_pp2_per_rx_process_pairing_confirm+0x78>
100677b8:	a805      	add	r0, sp, #20
100677ba:	9002      	str	r0, [sp, #8]
100677bc:	9401      	str	r4, [sp, #4]
100677be:	a801      	add	r0, sp, #4
100677c0:	f000 f961 	bl	10067a86 <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg_weak>
100677c4:	2011      	movs	r0, #17
100677c6:	8070      	strh	r0, [r6, #2]
100677c8:	6870      	ldr	r0, [r6, #4]
100677ca:	2103      	movs	r1, #3
100677cc:	7201      	strb	r1, [r0, #8]
100677ce:	2105      	movs	r1, #5
100677d0:	2210      	movs	r2, #16
100677d2:	ab05      	add	r3, sp, #20
100677d4:	4630      	mov	r0, r6
100677d6:	f7ee f983 	bl	10055ae0 <ACL_pkt_write>
100677da:	4620      	mov	r0, r4
100677dc:	4631      	mov	r1, r6
100677de:	f7ff fb25 	bl	10066e2c <smp_dep_l2c_send_acl_packet>
100677e2:	2800      	cmp	r0, #0
100677e4:	d102      	bne.n	100677ec <smp_pp2_per_rx_process_pairing_confirm+0x78>
100677e6:	20b6      	movs	r0, #182	@ 0xb6
100677e8:	72a0      	strb	r0, [r4, #10]
100677ea:	4628      	mov	r0, r5
100677ec:	b009      	add	sp, #36	@ 0x24
100677ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

100677f0 <smp_pp2_per_auth_stage_1_start>:
100677f0:	b510      	push	{r4, lr}
100677f2:	4604      	mov	r4, r0
100677f4:	3048      	adds	r0, #72	@ 0x48
100677f6:	2110      	movs	r1, #16
100677f8:	2200      	movs	r2, #0
100677fa:	f7fc f958 	bl	10063aae <HAL_Generate_Random_Bytes_To>
100677fe:	7de0      	ldrb	r0, [r4, #23]
10067800:	0700      	lsls	r0, r0, #28
10067802:	d402      	bmi.n	1006780a <smp_pp2_per_auth_stage_1_start+0x1a>
10067804:	20b5      	movs	r0, #181	@ 0xb5
10067806:	72a0      	strb	r0, [r4, #10]
10067808:	bd10      	pop	{r4, pc}
1006780a:	4620      	mov	r0, r4
1006780c:	f000 f93a 	bl	10067a84 <smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg_weak>
10067810:	bd10      	pop	{r4, pc}
	...

10067814 <smp_pp2_per_lep_confirm_value_compute>:
10067814:	b5f0      	push	{r4, r5, r6, r7, lr}
10067816:	b09b      	sub	sp, #108	@ 0x6c
10067818:	4614      	mov	r4, r2
1006781a:	9106      	str	r1, [sp, #24]
1006781c:	4607      	mov	r7, r0
1006781e:	ae0f      	add	r6, sp, #60	@ 0x3c
10067820:	2500      	movs	r5, #0
10067822:	222e      	movs	r2, #46	@ 0x2e
10067824:	4630      	mov	r0, r6
10067826:	4629      	mov	r1, r5
10067828:	f7eb fd94 	bl	10053354 <BLEPLAT_MemSet>
1006782c:	4630      	mov	r0, r6
1006782e:	3010      	adds	r0, #16
10067830:	2210      	movs	r2, #16
10067832:	9906      	ldr	r1, [sp, #24]
10067834:	f7eb fd7e 	bl	10053334 <BLEPLAT_MemCpy>
10067838:	3620      	adds	r6, #32
1006783a:	7cf8      	ldrb	r0, [r7, #19]
1006783c:	2803      	cmp	r0, #3
1006783e:	d00d      	beq.n	1006785c <smp_pp2_per_lep_confirm_value_compute+0x48>
10067840:	2802      	cmp	r0, #2
10067842:	d112      	bne.n	1006786a <smp_pp2_per_lep_confirm_value_compute+0x56>
10067844:	4844      	ldr	r0, [pc, #272]	@ (10067958 <__arm_cp.16_0>)
10067846:	6800      	ldr	r0, [r0, #0]
10067848:	6b80      	ldr	r0, [r0, #56]	@ 0x38
1006784a:	a90f      	add	r1, sp, #60	@ 0x3c
1006784c:	7008      	strb	r0, [r1, #0]
1006784e:	0a02      	lsrs	r2, r0, #8
10067850:	704a      	strb	r2, [r1, #1]
10067852:	0c02      	lsrs	r2, r0, #16
10067854:	708a      	strb	r2, [r1, #2]
10067856:	0e00      	lsrs	r0, r0, #24
10067858:	70c8      	strb	r0, [r1, #3]
1006785a:	e006      	b.n	1006786a <smp_pp2_per_lep_confirm_value_compute+0x56>
1006785c:	483e      	ldr	r0, [pc, #248]	@ (10067958 <__arm_cp.16_0>)
1006785e:	6801      	ldr	r1, [r0, #0]
10067860:	3144      	adds	r1, #68	@ 0x44
10067862:	a80f      	add	r0, sp, #60	@ 0x3c
10067864:	2210      	movs	r2, #16
10067866:	f7eb fd65 	bl	10053334 <BLEPLAT_MemCpy>
1006786a:	7d38      	ldrb	r0, [r7, #20]
1006786c:	2101      	movs	r1, #1
1006786e:	9105      	str	r1, [sp, #20]
10067870:	f7ff fd08 	bl	10067284 <smp_pp1_get_pairing_pdu_offset>
10067874:	9002      	str	r0, [sp, #8]
10067876:	7d38      	ldrb	r0, [r7, #20]
10067878:	4629      	mov	r1, r5
1006787a:	f7ff fd03 	bl	10067284 <smp_pp1_get_pairing_pdu_offset>
1006787e:	9001      	str	r0, [sp, #4]
10067880:	2061      	movs	r0, #97	@ 0x61
10067882:	5c38      	ldrb	r0, [r7, r0]
10067884:	71f0      	strb	r0, [r6, #7]
10067886:	9606      	str	r6, [sp, #24]
10067888:	ae0f      	add	r6, sp, #60	@ 0x3c
1006788a:	4630      	mov	r0, r6
1006788c:	3028      	adds	r0, #40	@ 0x28
1006788e:	4639      	mov	r1, r7
10067890:	3162      	adds	r1, #98	@ 0x62
10067892:	2206      	movs	r2, #6
10067894:	9200      	str	r2, [sp, #0]
10067896:	4b31      	ldr	r3, [pc, #196]	@ (1006795c <__arm_cp.16_1>)
10067898:	9004      	str	r0, [sp, #16]
1006789a:	4798      	blx	r3
1006789c:	7878      	ldrb	r0, [r7, #1]
1006789e:	9906      	ldr	r1, [sp, #24]
100678a0:	7008      	strb	r0, [r1, #0]
100678a2:	4630      	mov	r0, r6
100678a4:	3021      	adds	r0, #33	@ 0x21
100678a6:	1cb9      	adds	r1, r7, #2
100678a8:	9003      	str	r0, [sp, #12]
100678aa:	9a00      	ldr	r2, [sp, #0]
100678ac:	4b2b      	ldr	r3, [pc, #172]	@ (1006795c <__arm_cp.16_1>)
100678ae:	4798      	blx	r3
100678b0:	4829      	ldr	r0, [pc, #164]	@ (10067958 <__arm_cp.16_0>)
100678b2:	6800      	ldr	r0, [r0, #0]
100678b4:	9901      	ldr	r1, [sp, #4]
100678b6:	1841      	adds	r1, r0, r1
100678b8:	31b4      	adds	r1, #180	@ 0xb4
100678ba:	af0b      	add	r7, sp, #44	@ 0x2c
100678bc:	4638      	mov	r0, r7
100678be:	3009      	adds	r0, #9
100678c0:	2207      	movs	r2, #7
100678c2:	9201      	str	r2, [sp, #4]
100678c4:	4b25      	ldr	r3, [pc, #148]	@ (1006795c <__arm_cp.16_1>)
100678c6:	4798      	blx	r3
100678c8:	4823      	ldr	r0, [pc, #140]	@ (10067958 <__arm_cp.16_0>)
100678ca:	6800      	ldr	r0, [r0, #0]
100678cc:	9902      	ldr	r1, [sp, #8]
100678ce:	1841      	adds	r1, r0, r1
100678d0:	31b4      	adds	r1, #180	@ 0xb4
100678d2:	1cb8      	adds	r0, r7, #2
100678d4:	9a01      	ldr	r2, [sp, #4]
100678d6:	4b21      	ldr	r3, [pc, #132]	@ (1006795c <__arm_cp.16_1>)
100678d8:	4798      	blx	r3
100678da:	1c78      	adds	r0, r7, #1
100678dc:	9906      	ldr	r1, [sp, #24]
100678de:	1dc9      	adds	r1, r1, #7
100678e0:	9a05      	ldr	r2, [sp, #20]
100678e2:	4b1e      	ldr	r3, [pc, #120]	@ (1006795c <__arm_cp.16_1>)
100678e4:	4798      	blx	r3
100678e6:	4b1d      	ldr	r3, [pc, #116]	@ (1006795c <__arm_cp.16_1>)
100678e8:	4638      	mov	r0, r7
100678ea:	9906      	ldr	r1, [sp, #24]
100678ec:	9a05      	ldr	r2, [sp, #20]
100678ee:	4798      	blx	r3
100678f0:	3610      	adds	r6, #16
100678f2:	2d10      	cmp	r5, #16
100678f4:	d007      	beq.n	10067906 <smp_pp2_per_lep_confirm_value_compute+0xf2>
100678f6:	5d70      	ldrb	r0, [r6, r5]
100678f8:	a90b      	add	r1, sp, #44	@ 0x2c
100678fa:	5d49      	ldrb	r1, [r1, r5]
100678fc:	4041      	eors	r1, r0
100678fe:	a807      	add	r0, sp, #28
10067900:	5541      	strb	r1, [r0, r5]
10067902:	1c6d      	adds	r5, r5, #1
10067904:	e7f5      	b.n	100678f2 <smp_pp2_per_lep_confirm_value_compute+0xde>
10067906:	a80f      	add	r0, sp, #60	@ 0x3c
10067908:	a907      	add	r1, sp, #28
1006790a:	4622      	mov	r2, r4
1006790c:	f7f2 fc54 	bl	1005a1b8 <hci_le_encrypt>
10067910:	ae0b      	add	r6, sp, #44	@ 0x2c
10067912:	2500      	movs	r5, #0
10067914:	2210      	movs	r2, #16
10067916:	4630      	mov	r0, r6
10067918:	4629      	mov	r1, r5
1006791a:	f7eb fd1b 	bl	10053354 <BLEPLAT_MemSet>
1006791e:	2706      	movs	r7, #6
10067920:	4630      	mov	r0, r6
10067922:	9904      	ldr	r1, [sp, #16]
10067924:	463a      	mov	r2, r7
10067926:	f7eb fd05 	bl	10053334 <BLEPLAT_MemCpy>
1006792a:	1db0      	adds	r0, r6, #6
1006792c:	9903      	ldr	r1, [sp, #12]
1006792e:	463a      	mov	r2, r7
10067930:	f7eb fd00 	bl	10053334 <BLEPLAT_MemCpy>
10067934:	2d10      	cmp	r5, #16
10067936:	d007      	beq.n	10067948 <smp_pp2_per_lep_confirm_value_compute+0x134>
10067938:	5d60      	ldrb	r0, [r4, r5]
1006793a:	a90b      	add	r1, sp, #44	@ 0x2c
1006793c:	5d49      	ldrb	r1, [r1, r5]
1006793e:	4041      	eors	r1, r0
10067940:	a807      	add	r0, sp, #28
10067942:	5541      	strb	r1, [r0, r5]
10067944:	1c6d      	adds	r5, r5, #1
10067946:	e7f5      	b.n	10067934 <smp_pp2_per_lep_confirm_value_compute+0x120>
10067948:	a80f      	add	r0, sp, #60	@ 0x3c
1006794a:	a907      	add	r1, sp, #28
1006794c:	4622      	mov	r2, r4
1006794e:	f7f2 fc33 	bl	1005a1b8 <hci_le_encrypt>
10067952:	b01b      	add	sp, #108	@ 0x6c
10067954:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067956:	46c0      	nop			@ (mov r8, r8)

10067958 <__arm_cp.16_0>:
10067958:	200029a4 	.word	0x200029a4

1006795c <__arm_cp.16_1>:
1006795c:	10053335 	.word	0x10053335

10067960 <smp_pp2_per_rx_process_pairing_random>:
10067960:	b5f0      	push	{r4, r5, r6, r7, lr}
10067962:	b08b      	sub	sp, #44	@ 0x2c
10067964:	460d      	mov	r5, r1
10067966:	4606      	mov	r6, r0
10067968:	2400      	movs	r4, #0
1006796a:	9402      	str	r4, [sp, #8]
1006796c:	8909      	ldrh	r1, [r1, #8]
1006796e:	2215      	movs	r2, #21
10067970:	4620      	mov	r0, r4
10067972:	f7ee f855 	bl	10055a20 <ACL_pkt_get>
10067976:	2800      	cmp	r0, #0
10067978:	d020      	beq.n	100679bc <smp_pp2_per_rx_process_pairing_random+0x5c>
1006797a:	4607      	mov	r7, r0
1006797c:	462b      	mov	r3, r5
1006797e:	3338      	adds	r3, #56	@ 0x38
10067980:	2105      	movs	r1, #5
10067982:	2210      	movs	r2, #16
10067984:	4630      	mov	r0, r6
10067986:	461e      	mov	r6, r3
10067988:	f7ee f888 	bl	10055a9c <ACL_pkt_read>
1006798c:	7de8      	ldrb	r0, [r5, #23]
1006798e:	0700      	lsls	r0, r0, #28
10067990:	d416      	bmi.n	100679c0 <smp_pp2_per_rx_process_pairing_random+0x60>
10067992:	9400      	str	r4, [sp, #0]
10067994:	4634      	mov	r4, r6
10067996:	ae03      	add	r6, sp, #12
10067998:	4628      	mov	r0, r5
1006799a:	4621      	mov	r1, r4
1006799c:	4632      	mov	r2, r6
1006799e:	f7ff ff39 	bl	10067814 <smp_pp2_per_lep_confirm_value_compute>
100679a2:	4629      	mov	r1, r5
100679a4:	3128      	adds	r1, #40	@ 0x28
100679a6:	2210      	movs	r2, #16
100679a8:	4630      	mov	r0, r6
100679aa:	4626      	mov	r6, r4
100679ac:	9c00      	ldr	r4, [sp, #0]
100679ae:	f7eb fce1 	bl	10053374 <BLEPLAT_MemCmp>
100679b2:	a901      	add	r1, sp, #4
100679b4:	22bc      	movs	r2, #188	@ 0xbc
100679b6:	700a      	strb	r2, [r1, #0]
100679b8:	9002      	str	r0, [sp, #8]
100679ba:	e00c      	b.n	100679d6 <smp_pp2_per_rx_process_pairing_random+0x76>
100679bc:	2488      	movs	r4, #136	@ 0x88
100679be:	e05b      	b.n	10067a78 <smp_pp2_per_rx_process_pairing_random+0x118>
100679c0:	a801      	add	r0, sp, #4
100679c2:	900a      	str	r0, [sp, #40]	@ 0x28
100679c4:	a802      	add	r0, sp, #8
100679c6:	9009      	str	r0, [sp, #36]	@ 0x24
100679c8:	a803      	add	r0, sp, #12
100679ca:	9008      	str	r0, [sp, #32]
100679cc:	9507      	str	r5, [sp, #28]
100679ce:	a807      	add	r0, sp, #28
100679d0:	f000 f85a 	bl	10067a88 <smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg_weak>
100679d4:	9802      	ldr	r0, [sp, #8]
100679d6:	2800      	cmp	r0, #0
100679d8:	d006      	beq.n	100679e8 <smp_pp2_per_rx_process_pairing_random+0x88>
100679da:	2104      	movs	r1, #4
100679dc:	2301      	movs	r3, #1
100679de:	4628      	mov	r0, r5
100679e0:	463a      	mov	r2, r7
100679e2:	f7ff fc1f 	bl	10067224 <smp_pp3_pairing_failed_send>
100679e6:	e01b      	b.n	10067a20 <smp_pp2_per_rx_process_pairing_random+0xc0>
100679e8:	2011      	movs	r0, #17
100679ea:	8078      	strh	r0, [r7, #2]
100679ec:	6878      	ldr	r0, [r7, #4]
100679ee:	2104      	movs	r1, #4
100679f0:	7201      	strb	r1, [r0, #8]
100679f2:	462b      	mov	r3, r5
100679f4:	3348      	adds	r3, #72	@ 0x48
100679f6:	2105      	movs	r1, #5
100679f8:	2210      	movs	r2, #16
100679fa:	4638      	mov	r0, r7
100679fc:	f7ee f870 	bl	10055ae0 <ACL_pkt_write>
10067a00:	4628      	mov	r0, r5
10067a02:	4639      	mov	r1, r7
10067a04:	f7ff fa12 	bl	10066e2c <smp_dep_l2c_send_acl_packet>
10067a08:	2800      	cmp	r0, #0
10067a0a:	d109      	bne.n	10067a20 <smp_pp2_per_rx_process_pairing_random+0xc0>
10067a0c:	9801      	ldr	r0, [sp, #4]
10067a0e:	72a8      	strb	r0, [r5, #10]
10067a10:	481b      	ldr	r0, [pc, #108]	@ (10067a80 <__arm_cp.17_0>)
10067a12:	6800      	ldr	r0, [r0, #0]
10067a14:	2135      	movs	r1, #53	@ 0x35
10067a16:	5c40      	ldrb	r0, [r0, r1]
10067a18:	7c29      	ldrb	r1, [r5, #16]
10067a1a:	4281      	cmp	r1, r0
10067a1c:	d900      	bls.n	10067a20 <smp_pp2_per_rx_process_pairing_random+0xc0>
10067a1e:	7428      	strb	r0, [r5, #16]
10067a20:	9802      	ldr	r0, [sp, #8]
10067a22:	2800      	cmp	r0, #0
10067a24:	d128      	bne.n	10067a78 <smp_pp2_per_rx_process_pairing_random+0x118>
10067a26:	7de8      	ldrb	r0, [r5, #23]
10067a28:	0700      	lsls	r0, r0, #28
10067a2a:	d425      	bmi.n	10067a78 <smp_pp2_per_rx_process_pairing_random+0x118>
10067a2c:	a807      	add	r0, sp, #28
10067a2e:	2400      	movs	r4, #0
10067a30:	2210      	movs	r2, #16
10067a32:	4621      	mov	r1, r4
10067a34:	f7eb fc8e 	bl	10053354 <BLEPLAT_MemSet>
10067a38:	7ce8      	ldrb	r0, [r5, #19]
10067a3a:	2803      	cmp	r0, #3
10067a3c:	d00d      	beq.n	10067a5a <smp_pp2_per_rx_process_pairing_random+0xfa>
10067a3e:	2802      	cmp	r0, #2
10067a40:	d112      	bne.n	10067a68 <smp_pp2_per_rx_process_pairing_random+0x108>
10067a42:	480f      	ldr	r0, [pc, #60]	@ (10067a80 <__arm_cp.17_0>)
10067a44:	6800      	ldr	r0, [r0, #0]
10067a46:	6b80      	ldr	r0, [r0, #56]	@ 0x38
10067a48:	a907      	add	r1, sp, #28
10067a4a:	7008      	strb	r0, [r1, #0]
10067a4c:	0a02      	lsrs	r2, r0, #8
10067a4e:	704a      	strb	r2, [r1, #1]
10067a50:	0c02      	lsrs	r2, r0, #16
10067a52:	708a      	strb	r2, [r1, #2]
10067a54:	0e00      	lsrs	r0, r0, #24
10067a56:	70c8      	strb	r0, [r1, #3]
10067a58:	e006      	b.n	10067a68 <smp_pp2_per_rx_process_pairing_random+0x108>
10067a5a:	4809      	ldr	r0, [pc, #36]	@ (10067a80 <__arm_cp.17_0>)
10067a5c:	6801      	ldr	r1, [r0, #0]
10067a5e:	3144      	adds	r1, #68	@ 0x44
10067a60:	a807      	add	r0, sp, #28
10067a62:	2210      	movs	r2, #16
10067a64:	f7eb fc66 	bl	10053334 <BLEPLAT_MemCpy>
10067a68:	4629      	mov	r1, r5
10067a6a:	3148      	adds	r1, #72	@ 0x48
10067a6c:	3528      	adds	r5, #40	@ 0x28
10067a6e:	a807      	add	r0, sp, #28
10067a70:	4632      	mov	r2, r6
10067a72:	462b      	mov	r3, r5
10067a74:	f7fa fcd0 	bl	10062418 <smp_crt_s1_generate_stk>
10067a78:	4620      	mov	r0, r4
10067a7a:	b00b      	add	sp, #44	@ 0x2c
10067a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067a7e:	46c0      	nop			@ (mov r8, r8)

10067a80 <__arm_cp.17_0>:
10067a80:	200029a4 	.word	0x200029a4

10067a84 <smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg_weak>:
10067a84:	4770      	bx	lr

10067a86 <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg_weak>:
10067a86:	4770      	bx	lr

10067a88 <smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg_weak>:
10067a88:	4770      	bx	lr

10067a8a <smp_pp3_keys_distribution_start>:
10067a8a:	b580      	push	{r7, lr}
10067a8c:	2901      	cmp	r1, #1
10067a8e:	d111      	bne.n	10067ab4 <smp_pp3_keys_distribution_start+0x2a>
10067a90:	7c42      	ldrb	r2, [r0, #17]
10067a92:	0753      	lsls	r3, r2, #29
10067a94:	d005      	beq.n	10067aa2 <smp_pp3_keys_distribution_start+0x18>
10067a96:	7dc3      	ldrb	r3, [r0, #23]
10067a98:	071b      	lsls	r3, r3, #28
10067a9a:	d51d      	bpl.n	10067ad8 <smp_pp3_keys_distribution_start+0x4e>
10067a9c:	2306      	movs	r3, #6
10067a9e:	401a      	ands	r2, r3
10067aa0:	d11a      	bne.n	10067ad8 <smp_pp3_keys_distribution_start+0x4e>
10067aa2:	2260      	movs	r2, #96	@ 0x60
10067aa4:	5c83      	ldrb	r3, [r0, r2]
10067aa6:	2201      	movs	r2, #1
10067aa8:	401a      	ands	r2, r3
10067aaa:	2900      	cmp	r1, #0
10067aac:	d006      	beq.n	10067abc <smp_pp3_keys_distribution_start+0x32>
10067aae:	2a00      	cmp	r2, #0
10067ab0:	d119      	bne.n	10067ae6 <smp_pp3_keys_distribution_start+0x5c>
10067ab2:	e003      	b.n	10067abc <smp_pp3_keys_distribution_start+0x32>
10067ab4:	2900      	cmp	r1, #0
10067ab6:	d000      	beq.n	10067aba <smp_pp3_keys_distribution_start+0x30>
10067ab8:	bd80      	pop	{r7, pc}
10067aba:	2200      	movs	r2, #0
10067abc:	7c81      	ldrb	r1, [r0, #18]
10067abe:	07cb      	lsls	r3, r1, #31
10067ac0:	d004      	beq.n	10067acc <smp_pp3_keys_distribution_start+0x42>
10067ac2:	7dc3      	ldrb	r3, [r0, #23]
10067ac4:	071b      	lsls	r3, r3, #28
10067ac6:	d401      	bmi.n	10067acc <smp_pp3_keys_distribution_start+0x42>
10067ac8:	21d1      	movs	r1, #209	@ 0xd1
10067aca:	e009      	b.n	10067ae0 <smp_pp3_keys_distribution_start+0x56>
10067acc:	078b      	lsls	r3, r1, #30
10067ace:	d406      	bmi.n	10067ade <smp_pp3_keys_distribution_start+0x54>
10067ad0:	0749      	lsls	r1, r1, #29
10067ad2:	d508      	bpl.n	10067ae6 <smp_pp3_keys_distribution_start+0x5c>
10067ad4:	21d5      	movs	r1, #213	@ 0xd5
10067ad6:	e003      	b.n	10067ae0 <smp_pp3_keys_distribution_start+0x56>
10067ad8:	21d0      	movs	r1, #208	@ 0xd0
10067ada:	7281      	strb	r1, [r0, #10]
10067adc:	bd80      	pop	{r7, pc}
10067ade:	21d3      	movs	r1, #211	@ 0xd3
10067ae0:	7281      	strb	r1, [r0, #10]
10067ae2:	2a00      	cmp	r2, #0
10067ae4:	d002      	beq.n	10067aec <smp_pp3_keys_distribution_start+0x62>
10067ae6:	f000 f804 	bl	10067af2 <smp_pp3_keys_distribution_completed>
10067aea:	bd80      	pop	{r7, pc}
10067aec:	f000 f816 	bl	10067b1c <smp_pp3_keys_distribution_send>
10067af0:	bd80      	pop	{r7, pc}

10067af2 <smp_pp3_keys_distribution_completed>:
10067af2:	b580      	push	{r7, lr}
10067af4:	2160      	movs	r1, #96	@ 0x60
10067af6:	5c41      	ldrb	r1, [r0, r1]
10067af8:	07c9      	lsls	r1, r1, #31
10067afa:	d106      	bne.n	10067b0a <smp_pp3_keys_distribution_completed+0x18>
10067afc:	2111      	movs	r1, #17
10067afe:	5641      	ldrsb	r1, [r0, r1]
10067b00:	2900      	cmp	r1, #0
10067b02:	d502      	bpl.n	10067b0a <smp_pp3_keys_distribution_completed+0x18>
10067b04:	7e81      	ldrb	r1, [r0, #26]
10067b06:	068a      	lsls	r2, r1, #26
10067b08:	d402      	bmi.n	10067b10 <smp_pp3_keys_distribution_completed+0x1e>
10067b0a:	f7ff fad3 	bl	100670b4 <smp_pp3_pairing_completed_successful>
10067b0e:	bd80      	pop	{r7, pc}
10067b10:	2204      	movs	r2, #4
10067b12:	4311      	orrs	r1, r2
10067b14:	7681      	strb	r1, [r0, #26]
10067b16:	f7ff faca 	bl	100670ae <smp_start_encryption_ucfg_weak>
10067b1a:	bd80      	pop	{r7, pc}

10067b1c <smp_pp3_keys_distribution_send>:
10067b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10067b1e:	b089      	sub	sp, #36	@ 0x24
10067b20:	4604      	mov	r4, r0
10067b22:	a808      	add	r0, sp, #32
10067b24:	2600      	movs	r6, #0
10067b26:	8006      	strh	r6, [r0, #0]
10067b28:	8921      	ldrh	r1, [r4, #8]
10067b2a:	2215      	movs	r2, #21
10067b2c:	4630      	mov	r0, r6
10067b2e:	f7ed ff77 	bl	10055a20 <ACL_pkt_get>
10067b32:	2800      	cmp	r0, #0
10067b34:	d02d      	beq.n	10067b92 <smp_pp3_keys_distribution_send+0x76>
10067b36:	4605      	mov	r5, r0
10067b38:	2060      	movs	r0, #96	@ 0x60
10067b3a:	5c20      	ldrb	r0, [r4, r0]
10067b3c:	06c0      	lsls	r0, r0, #27
10067b3e:	d40b      	bmi.n	10067b58 <smp_pp3_keys_distribution_send+0x3c>
10067b40:	4627      	mov	r7, r4
10067b42:	3760      	adds	r7, #96	@ 0x60
10067b44:	4620      	mov	r0, r4
10067b46:	301c      	adds	r0, #28
10067b48:	2102      	movs	r1, #2
10067b4a:	2200      	movs	r2, #0
10067b4c:	f7fb ffaf 	bl	10063aae <HAL_Generate_Random_Bytes_To>
10067b50:	7838      	ldrb	r0, [r7, #0]
10067b52:	2110      	movs	r1, #16
10067b54:	4301      	orrs	r1, r0
10067b56:	7039      	strb	r1, [r7, #0]
10067b58:	7aa0      	ldrb	r0, [r4, #10]
10067b5a:	38d1      	subs	r0, #209	@ 0xd1
10067b5c:	2804      	cmp	r0, #4
10067b5e:	d875      	bhi.n	10067c4c <smp_pp3_keys_distribution_send+0x130>
10067b60:	4478      	add	r0, pc
10067b62:	7900      	ldrb	r0, [r0, #4]
10067b64:	0040      	lsls	r0, r0, #1
10067b66:	4487      	add	pc, r0
10067b68:	4e381902 	.word	0x4e381902
10067b6c:	0060      	.short	0x0060
10067b6e:	483c      	ldr	r0, [pc, #240]	@ (10067c60 <__arm_cp.2_0>)
10067b70:	6800      	ldr	r0, [r0, #0]
10067b72:	4621      	mov	r1, r4
10067b74:	311c      	adds	r1, #28
10067b76:	3008      	adds	r0, #8
10067b78:	aa08      	add	r2, sp, #32
10067b7a:	ae04      	add	r6, sp, #16
10067b7c:	4633      	mov	r3, r6
10067b7e:	f7fa fbcd 	bl	1006231c <smp_crt_diversify>
10067b82:	6868      	ldr	r0, [r5, #4]
10067b84:	2106      	movs	r1, #6
10067b86:	7201      	strb	r1, [r0, #8]
10067b88:	2011      	movs	r0, #17
10067b8a:	8068      	strh	r0, [r5, #2]
10067b8c:	7c22      	ldrb	r2, [r4, #16]
10067b8e:	2105      	movs	r1, #5
10067b90:	e058      	b.n	10067c44 <smp_pp3_keys_distribution_send+0x128>
10067b92:	200e      	movs	r0, #14
10067b94:	2100      	movs	r1, #0
10067b96:	f7fb fc75 	bl	10063484 <tsk_wait_resource_idx>
10067b9a:	e05f      	b.n	10067c5c <smp_pp3_keys_distribution_send+0x140>
10067b9c:	ae04      	add	r6, sp, #16
10067b9e:	2108      	movs	r1, #8
10067ba0:	9102      	str	r1, [sp, #8]
10067ba2:	2200      	movs	r2, #0
10067ba4:	4630      	mov	r0, r6
10067ba6:	9601      	str	r6, [sp, #4]
10067ba8:	f7fb ff81 	bl	10063aae <HAL_Generate_Random_Bytes_To>
10067bac:	4620      	mov	r0, r4
10067bae:	301c      	adds	r0, #28
10067bb0:	af08      	add	r7, sp, #32
10067bb2:	4631      	mov	r1, r6
10067bb4:	463a      	mov	r2, r7
10067bb6:	f7fa fb7b 	bl	100622b0 <smp_sap_crt_generate_ediv>
10067bba:	200b      	movs	r0, #11
10067bbc:	8068      	strh	r0, [r5, #2]
10067bbe:	6868      	ldr	r0, [r5, #4]
10067bc0:	2607      	movs	r6, #7
10067bc2:	7206      	strb	r6, [r0, #8]
10067bc4:	2105      	movs	r1, #5
10067bc6:	2202      	movs	r2, #2
10067bc8:	4628      	mov	r0, r5
10067bca:	463b      	mov	r3, r7
10067bcc:	f7ed ff88 	bl	10055ae0 <ACL_pkt_write>
10067bd0:	4628      	mov	r0, r5
10067bd2:	4631      	mov	r1, r6
10067bd4:	9a02      	ldr	r2, [sp, #8]
10067bd6:	9b01      	ldr	r3, [sp, #4]
10067bd8:	e036      	b.n	10067c48 <smp_pp3_keys_distribution_send+0x12c>
10067bda:	2011      	movs	r0, #17
10067bdc:	8068      	strh	r0, [r5, #2]
10067bde:	6868      	ldr	r0, [r5, #4]
10067be0:	2108      	movs	r1, #8
10067be2:	7201      	strb	r1, [r0, #8]
10067be4:	a804      	add	r0, sp, #16
10067be6:	2100      	movs	r1, #0
10067be8:	2210      	movs	r2, #16
10067bea:	f7eb fbb3 	bl	10053354 <BLEPLAT_MemSet>
10067bee:	f7ef f989 	bl	10056f04 <GapIsPrivacySupported>
10067bf2:	2800      	cmp	r0, #0
10067bf4:	d002      	beq.n	10067bfc <smp_pp3_keys_distribution_send+0xe0>
10067bf6:	a804      	add	r0, sp, #16
10067bf8:	f7fa fba4 	bl	10062344 <smp_sap_crt_generate_local_irk>
10067bfc:	2105      	movs	r1, #5
10067bfe:	2210      	movs	r2, #16
10067c00:	ab04      	add	r3, sp, #16
10067c02:	4628      	mov	r0, r5
10067c04:	e020      	b.n	10067c48 <smp_pp3_keys_distribution_send+0x12c>
10067c06:	a803      	add	r0, sp, #12
10067c08:	7006      	strb	r6, [r0, #0]
10067c0a:	ae04      	add	r6, sp, #16
10067c0c:	4631      	mov	r1, r6
10067c0e:	f7ff f8f5 	bl	10066dfc <smp_dep_gap_get_local_identity_address>
10067c12:	2008      	movs	r0, #8
10067c14:	8068      	strh	r0, [r5, #2]
10067c16:	6868      	ldr	r0, [r5, #4]
10067c18:	2109      	movs	r1, #9
10067c1a:	7201      	strb	r1, [r0, #8]
10067c1c:	6868      	ldr	r0, [r5, #4]
10067c1e:	9903      	ldr	r1, [sp, #12]
10067c20:	7241      	strb	r1, [r0, #9]
10067c22:	2106      	movs	r1, #6
10067c24:	4628      	mov	r0, r5
10067c26:	460a      	mov	r2, r1
10067c28:	e00d      	b.n	10067c46 <smp_pp3_keys_distribution_send+0x12a>
10067c2a:	2011      	movs	r0, #17
10067c2c:	8068      	strh	r0, [r5, #2]
10067c2e:	6868      	ldr	r0, [r5, #4]
10067c30:	210a      	movs	r1, #10
10067c32:	7201      	strb	r1, [r0, #8]
10067c34:	4620      	mov	r0, r4
10067c36:	301c      	adds	r0, #28
10067c38:	ae04      	add	r6, sp, #16
10067c3a:	4631      	mov	r1, r6
10067c3c:	f7fa fc04 	bl	10062448 <smp_crt_generate_csrk>
10067c40:	2105      	movs	r1, #5
10067c42:	2210      	movs	r2, #16
10067c44:	4628      	mov	r0, r5
10067c46:	4633      	mov	r3, r6
10067c48:	f7ed ff4a 	bl	10055ae0 <ACL_pkt_write>
10067c4c:	4620      	mov	r0, r4
10067c4e:	4629      	mov	r1, r5
10067c50:	f7ff f8ec 	bl	10066e2c <smp_dep_l2c_send_acl_packet>
10067c54:	2800      	cmp	r0, #0
10067c56:	d101      	bne.n	10067c5c <smp_pp3_keys_distribution_send+0x140>
10067c58:	20dd      	movs	r0, #221	@ 0xdd
10067c5a:	72a0      	strb	r0, [r4, #10]
10067c5c:	b009      	add	sp, #36	@ 0x24
10067c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10067c60 <__arm_cp.2_0>:
10067c60:	20002904 	.word	0x20002904

10067c64 <smp_pp3_keys_distribution_signaling_ack>:
10067c64:	b580      	push	{r7, lr}
10067c66:	7a82      	ldrb	r2, [r0, #10]
10067c68:	2add      	cmp	r2, #221	@ 0xdd
10067c6a:	d123      	bne.n	10067cb4 <smp_pp3_keys_distribution_signaling_ack+0x50>
10067c6c:	1f8a      	subs	r2, r1, #6
10067c6e:	2a04      	cmp	r2, #4
10067c70:	d81e      	bhi.n	10067cb0 <smp_pp3_keys_distribution_signaling_ack+0x4c>
10067c72:	21d2      	movs	r1, #210	@ 0xd2
10067c74:	447a      	add	r2, pc
10067c76:	7912      	ldrb	r2, [r2, #4]
10067c78:	0052      	lsls	r2, r2, #1
10067c7a:	4497      	add	pc, r2
10067c7c:	07110218 	.word	0x07110218
10067c80:	000a      	.short	0x000a
10067c82:	7c81      	ldrb	r1, [r0, #18]
10067c84:	078a      	lsls	r2, r1, #30
10067c86:	d502      	bpl.n	10067c8e <smp_pp3_keys_distribution_signaling_ack+0x2a>
10067c88:	21d3      	movs	r1, #211	@ 0xd3
10067c8a:	e010      	b.n	10067cae <smp_pp3_keys_distribution_signaling_ack+0x4a>
10067c8c:	7c81      	ldrb	r1, [r0, #18]
10067c8e:	0749      	lsls	r1, r1, #29
10067c90:	d40c      	bmi.n	10067cac <smp_pp3_keys_distribution_signaling_ack+0x48>
10067c92:	2160      	movs	r1, #96	@ 0x60
10067c94:	5c41      	ldrb	r1, [r0, r1]
10067c96:	07c9      	lsls	r1, r1, #31
10067c98:	d104      	bne.n	10067ca4 <smp_pp3_keys_distribution_signaling_ack+0x40>
10067c9a:	f7ff ff2a 	bl	10067af2 <smp_pp3_keys_distribution_completed>
10067c9e:	bd80      	pop	{r7, pc}
10067ca0:	21d4      	movs	r1, #212	@ 0xd4
10067ca2:	e004      	b.n	10067cae <smp_pp3_keys_distribution_signaling_ack+0x4a>
10067ca4:	2101      	movs	r1, #1
10067ca6:	f7ff fef0 	bl	10067a8a <smp_pp3_keys_distribution_start>
10067caa:	bd80      	pop	{r7, pc}
10067cac:	21d5      	movs	r1, #213	@ 0xd5
10067cae:	7281      	strb	r1, [r0, #10]
10067cb0:	f7ff ff34 	bl	10067b1c <smp_pp3_keys_distribution_send>
10067cb4:	bd80      	pop	{r7, pc}
	...

10067cb8 <smp_pp3_keys_distribution_receive>:
10067cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
10067cba:	b085      	sub	sp, #20
10067cbc:	4607      	mov	r7, r0
10067cbe:	6840      	ldr	r0, [r0, #4]
10067cc0:	7a05      	ldrb	r5, [r0, #8]
10067cc2:	1fa8      	subs	r0, r5, #6
10067cc4:	2804      	cmp	r0, #4
10067cc6:	d823      	bhi.n	10067d10 <smp_pp3_keys_distribution_receive+0x58>
10067cc8:	460c      	mov	r4, r1
10067cca:	7a88      	ldrb	r0, [r1, #10]
10067ccc:	2686      	movs	r6, #134	@ 0x86
10067cce:	28d0      	cmp	r0, #208	@ 0xd0
10067cd0:	d11f      	bne.n	10067d12 <smp_pp3_keys_distribution_receive+0x5a>
10067cd2:	4620      	mov	r0, r4
10067cd4:	3059      	adds	r0, #89	@ 0x59
10067cd6:	9001      	str	r0, [sp, #4]
10067cd8:	8920      	ldrh	r0, [r4, #8]
10067cda:	f000 f995 	bl	10068008 <smp_get_remote_device_list_index>
10067cde:	4602      	mov	r2, r0
10067ce0:	2000      	movs	r0, #0
10067ce2:	4b44      	ldr	r3, [pc, #272]	@ (10067df4 <__arm_cp.4_0>)
10067ce4:	9002      	str	r0, [sp, #8]
10067ce6:	4601      	mov	r1, r0
10067ce8:	f7fa fe56 	bl	10062998 <smp_timer_reset>
10067cec:	2d06      	cmp	r5, #6
10067cee:	d005      	beq.n	10067cfc <smp_pp3_keys_distribution_receive+0x44>
10067cf0:	2d09      	cmp	r5, #9
10067cf2:	d011      	beq.n	10067d18 <smp_pp3_keys_distribution_receive+0x60>
10067cf4:	2d08      	cmp	r5, #8
10067cf6:	d034      	beq.n	10067d62 <smp_pp3_keys_distribution_receive+0xaa>
10067cf8:	2d07      	cmp	r5, #7
10067cfa:	d13d      	bne.n	10067d78 <smp_pp3_keys_distribution_receive+0xc0>
10067cfc:	7de0      	ldrb	r0, [r4, #23]
10067cfe:	0700      	lsls	r0, r0, #28
10067d00:	d407      	bmi.n	10067d12 <smp_pp3_keys_distribution_receive+0x5a>
10067d02:	7c60      	ldrb	r0, [r4, #17]
10067d04:	07c0      	lsls	r0, r0, #31
10067d06:	d004      	beq.n	10067d12 <smp_pp3_keys_distribution_receive+0x5a>
10067d08:	2d06      	cmp	r5, #6
10067d0a:	d144      	bne.n	10067d96 <smp_pp3_keys_distribution_receive+0xde>
10067d0c:	3428      	adds	r4, #40	@ 0x28
10067d0e:	e02c      	b.n	10067d6a <smp_pp3_keys_distribution_receive+0xb2>
10067d10:	2684      	movs	r6, #132	@ 0x84
10067d12:	4630      	mov	r0, r6
10067d14:	b005      	add	sp, #20
10067d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067d18:	7c60      	ldrb	r0, [r4, #17]
10067d1a:	0780      	lsls	r0, r0, #30
10067d1c:	d5f9      	bpl.n	10067d12 <smp_pp3_keys_distribution_receive+0x5a>
10067d1e:	ab03      	add	r3, sp, #12
10067d20:	2600      	movs	r6, #0
10067d22:	809e      	strh	r6, [r3, #4]
10067d24:	9603      	str	r6, [sp, #12]
10067d26:	2106      	movs	r1, #6
10067d28:	4638      	mov	r0, r7
10067d2a:	460a      	mov	r2, r1
10067d2c:	f7ed fead 	bl	10055a8a <ACL_pkt_cmp>
10067d30:	2800      	cmp	r0, #0
10067d32:	d045      	beq.n	10067dc0 <smp_pp3_keys_distribution_receive+0x108>
10067d34:	6878      	ldr	r0, [r7, #4]
10067d36:	7a40      	ldrb	r0, [r0, #9]
10067d38:	9d01      	ldr	r5, [sp, #4]
10067d3a:	7028      	strb	r0, [r5, #0]
10067d3c:	4623      	mov	r3, r4
10067d3e:	335a      	adds	r3, #90	@ 0x5a
10067d40:	2106      	movs	r1, #6
10067d42:	4638      	mov	r0, r7
10067d44:	460a      	mov	r2, r1
10067d46:	f7ed fea9 	bl	10055a9c <ACL_pkt_read>
10067d4a:	7828      	ldrb	r0, [r5, #0]
10067d4c:	2801      	cmp	r0, #1
10067d4e:	d103      	bne.n	10067d58 <smp_pp3_keys_distribution_receive+0xa0>
10067d50:	79a8      	ldrb	r0, [r5, #6]
10067d52:	0980      	lsrs	r0, r0, #6
10067d54:	2803      	cmp	r0, #3
10067d56:	d345      	bcc.n	10067de4 <smp_pp3_keys_distribution_receive+0x12c>
10067d58:	7c61      	ldrb	r1, [r4, #17]
10067d5a:	2020      	movs	r0, #32
10067d5c:	4308      	orrs	r0, r1
10067d5e:	7460      	strb	r0, [r4, #17]
10067d60:	e02f      	b.n	10067dc2 <smp_pp3_keys_distribution_receive+0x10a>
10067d62:	7c60      	ldrb	r0, [r4, #17]
10067d64:	0780      	lsls	r0, r0, #30
10067d66:	d5d4      	bpl.n	10067d12 <smp_pp3_keys_distribution_receive+0x5a>
10067d68:	3438      	adds	r4, #56	@ 0x38
10067d6a:	2105      	movs	r1, #5
10067d6c:	2210      	movs	r2, #16
10067d6e:	4638      	mov	r0, r7
10067d70:	4623      	mov	r3, r4
10067d72:	f7ed fe93 	bl	10055a9c <ACL_pkt_read>
10067d76:	e033      	b.n	10067de0 <smp_pp3_keys_distribution_receive+0x128>
10067d78:	7c60      	ldrb	r0, [r4, #17]
10067d7a:	0740      	lsls	r0, r0, #29
10067d7c:	d5c9      	bpl.n	10067d12 <smp_pp3_keys_distribution_receive+0x5a>
10067d7e:	4623      	mov	r3, r4
10067d80:	3348      	adds	r3, #72	@ 0x48
10067d82:	2105      	movs	r1, #5
10067d84:	2210      	movs	r2, #16
10067d86:	4638      	mov	r0, r7
10067d88:	f7ed fe88 	bl	10055a9c <ACL_pkt_read>
10067d8c:	7c60      	ldrb	r0, [r4, #17]
10067d8e:	2140      	movs	r1, #64	@ 0x40
10067d90:	4301      	orrs	r1, r0
10067d92:	7461      	strb	r1, [r4, #17]
10067d94:	e017      	b.n	10067dc6 <smp_pp3_keys_distribution_receive+0x10e>
10067d96:	6878      	ldr	r0, [r7, #4]
10067d98:	7a40      	ldrb	r0, [r0, #9]
10067d9a:	77a0      	strb	r0, [r4, #30]
10067d9c:	6878      	ldr	r0, [r7, #4]
10067d9e:	7a80      	ldrb	r0, [r0, #10]
10067da0:	77e0      	strb	r0, [r4, #31]
10067da2:	4623      	mov	r3, r4
10067da4:	3320      	adds	r3, #32
10067da6:	2107      	movs	r1, #7
10067da8:	2208      	movs	r2, #8
10067daa:	4638      	mov	r0, r7
10067dac:	f7ed fe76 	bl	10055a9c <ACL_pkt_read>
10067db0:	7c60      	ldrb	r0, [r4, #17]
10067db2:	2180      	movs	r1, #128	@ 0x80
10067db4:	4301      	orrs	r1, r0
10067db6:	7461      	strb	r1, [r4, #17]
10067db8:	0740      	lsls	r0, r0, #29
10067dba:	0f80      	lsrs	r0, r0, #30
10067dbc:	d110      	bne.n	10067de0 <smp_pp3_keys_distribution_receive+0x128>
10067dbe:	e002      	b.n	10067dc6 <smp_pp3_keys_distribution_receive+0x10e>
10067dc0:	7c60      	ldrb	r0, [r4, #17]
10067dc2:	0740      	lsls	r0, r0, #29
10067dc4:	d4a5      	bmi.n	10067d12 <smp_pp3_keys_distribution_receive+0x5a>
10067dc6:	9801      	ldr	r0, [sp, #4]
10067dc8:	79c0      	ldrb	r0, [r0, #7]
10067dca:	07c0      	lsls	r0, r0, #31
10067dcc:	d105      	bne.n	10067dda <smp_pp3_keys_distribution_receive+0x122>
10067dce:	2600      	movs	r6, #0
10067dd0:	4620      	mov	r0, r4
10067dd2:	4631      	mov	r1, r6
10067dd4:	f7ff fe59 	bl	10067a8a <smp_pp3_keys_distribution_start>
10067dd8:	e79b      	b.n	10067d12 <smp_pp3_keys_distribution_receive+0x5a>
10067dda:	4620      	mov	r0, r4
10067ddc:	f7ff f96a 	bl	100670b4 <smp_pp3_pairing_completed_successful>
10067de0:	9e02      	ldr	r6, [sp, #8]
10067de2:	e796      	b.n	10067d12 <smp_pp3_keys_distribution_receive+0x5a>
10067de4:	2108      	movs	r1, #8
10067de6:	2200      	movs	r2, #0
10067de8:	2301      	movs	r3, #1
10067dea:	4620      	mov	r0, r4
10067dec:	f7ff fa1a 	bl	10067224 <smp_pp3_pairing_failed_send>
10067df0:	4606      	mov	r6, r0
10067df2:	e78e      	b.n	10067d12 <smp_pp3_keys_distribution_receive+0x5a>

10067df4 <__arm_cp.4_0>:
10067df4:	00007530 	.word	0x00007530

10067df8 <smp_cmn_rejectlist_init>:
10067df8:	b580      	push	{r7, lr}
10067dfa:	2003      	movs	r0, #3
10067dfc:	2108      	movs	r1, #8
10067dfe:	f7f9 fd59 	bl	100618b4 <csmem_mem_0_assign>
10067e02:	4902      	ldr	r1, [pc, #8]	@ (10067e0c <__arm_cp.0_0>)
10067e04:	6809      	ldr	r1, [r1, #0]
10067e06:	22a8      	movs	r2, #168	@ 0xa8
10067e08:	5088      	str	r0, [r1, r2]
10067e0a:	bd80      	pop	{r7, pc}

10067e0c <__arm_cp.0_0>:
10067e0c:	200029a4 	.word	0x200029a4

10067e10 <smp_cmn_repeated_attacks_protection_start>:
10067e10:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10067e12:	9101      	str	r1, [sp, #4]
10067e14:	2003      	movs	r0, #3
10067e16:	9002      	str	r0, [sp, #8]
10067e18:	2700      	movs	r7, #0
10067e1a:	4a30      	ldr	r2, [pc, #192]	@ (10067edc <__arm_cp.1_0>)
10067e1c:	463d      	mov	r5, r7
10067e1e:	4616      	mov	r6, r2
10067e20:	6810      	ldr	r0, [r2, #0]
10067e22:	24a8      	movs	r4, #168	@ 0xa8
10067e24:	5900      	ldr	r0, [r0, r4]
10067e26:	19c0      	adds	r0, r0, r7
10067e28:	1c80      	adds	r0, r0, #2
10067e2a:	2206      	movs	r2, #6
10067e2c:	9901      	ldr	r1, [sp, #4]
10067e2e:	f7eb faa1 	bl	10053374 <BLEPLAT_MemCmp>
10067e32:	2800      	cmp	r0, #0
10067e34:	d031      	beq.n	10067e9a <smp_cmn_repeated_attacks_protection_start+0x8a>
10067e36:	9802      	ldr	r0, [sp, #8]
10067e38:	2803      	cmp	r0, #3
10067e3a:	4632      	mov	r2, r6
10067e3c:	d109      	bne.n	10067e52 <smp_cmn_repeated_attacks_protection_start+0x42>
10067e3e:	6810      	ldr	r0, [r2, #0]
10067e40:	5900      	ldr	r0, [r0, r4]
10067e42:	5dc0      	ldrb	r0, [r0, r7]
10067e44:	0680      	lsls	r0, r0, #26
10067e46:	0f80      	lsrs	r0, r0, #30
10067e48:	d001      	beq.n	10067e4e <smp_cmn_repeated_attacks_protection_start+0x3e>
10067e4a:	2003      	movs	r0, #3
10067e4c:	e000      	b.n	10067e50 <smp_cmn_repeated_attacks_protection_start+0x40>
10067e4e:	b2e8      	uxtb	r0, r5
10067e50:	9002      	str	r0, [sp, #8]
10067e52:	3708      	adds	r7, #8
10067e54:	1c6d      	adds	r5, r5, #1
10067e56:	2d03      	cmp	r5, #3
10067e58:	d1e1      	bne.n	10067e1e <smp_cmn_repeated_attacks_protection_start+0xe>
10067e5a:	6810      	ldr	r0, [r2, #0]
10067e5c:	2541      	movs	r5, #65	@ 0x41
10067e5e:	5d41      	ldrb	r1, [r0, r5]
10067e60:	30a8      	adds	r0, #168	@ 0xa8
10067e62:	2902      	cmp	r1, #2
10067e64:	d836      	bhi.n	10067ed4 <smp_cmn_repeated_attacks_protection_start+0xc4>
10067e66:	9902      	ldr	r1, [sp, #8]
10067e68:	00cf      	lsls	r7, r1, #3
10067e6a:	6800      	ldr	r0, [r0, #0]
10067e6c:	19c0      	adds	r0, r0, r7
10067e6e:	1c80      	adds	r0, r0, #2
10067e70:	4616      	mov	r6, r2
10067e72:	2206      	movs	r2, #6
10067e74:	9901      	ldr	r1, [sp, #4]
10067e76:	f7eb fa5d 	bl	10053334 <BLEPLAT_MemCpy>
10067e7a:	6830      	ldr	r0, [r6, #0]
10067e7c:	5900      	ldr	r0, [r0, r4]
10067e7e:	2110      	movs	r1, #16
10067e80:	55c1      	strb	r1, [r0, r7]
10067e82:	9802      	ldr	r0, [sp, #8]
10067e84:	b2c2      	uxtb	r2, r0
10067e86:	2000      	movs	r0, #0
10067e88:	2101      	movs	r1, #1
10067e8a:	4b15      	ldr	r3, [pc, #84]	@ (10067ee0 <__arm_cp.1_1>)
10067e8c:	f7fa fd84 	bl	10062998 <smp_timer_reset>
10067e90:	6830      	ldr	r0, [r6, #0]
10067e92:	5d41      	ldrb	r1, [r0, r5]
10067e94:	1c49      	adds	r1, r1, #1
10067e96:	5541      	strb	r1, [r0, r5]
10067e98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10067e9a:	6830      	ldr	r0, [r6, #0]
10067e9c:	5900      	ldr	r0, [r0, r4]
10067e9e:	5dc3      	ldrb	r3, [r0, r7]
10067ea0:	21cf      	movs	r1, #207	@ 0xcf
10067ea2:	4019      	ands	r1, r3
10067ea4:	3110      	adds	r1, #16
10067ea6:	2203      	movs	r2, #3
10067ea8:	401a      	ands	r2, r3
10067eaa:	1c53      	adds	r3, r2, #1
10067eac:	2a03      	cmp	r2, #3
10067eae:	d002      	beq.n	10067eb6 <smp_cmn_repeated_attacks_protection_start+0xa6>
10067eb0:	24dc      	movs	r4, #220	@ 0xdc
10067eb2:	4021      	ands	r1, r4
10067eb4:	4319      	orrs	r1, r3
10067eb6:	55c1      	strb	r1, [r0, r7]
10067eb8:	2a03      	cmp	r2, #3
10067eba:	d100      	bne.n	10067ebe <smp_cmn_repeated_attacks_protection_start+0xae>
10067ebc:	4613      	mov	r3, r2
10067ebe:	a009      	add	r0, pc, #36	@ (adr r0, 10067ee4 <__arm_cp.1_1+0x4>)
10067ec0:	5cc0      	ldrb	r0, [r0, r3]
10067ec2:	217d      	movs	r1, #125	@ 0x7d
10067ec4:	00cb      	lsls	r3, r1, #3
10067ec6:	4343      	muls	r3, r0
10067ec8:	b2ea      	uxtb	r2, r5
10067eca:	2000      	movs	r0, #0
10067ecc:	2101      	movs	r1, #1
10067ece:	f7fa fd63 	bl	10062998 <smp_timer_reset>
10067ed2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10067ed4:	2101      	movs	r1, #1
10067ed6:	7201      	strb	r1, [r0, #8]
10067ed8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10067eda:	46c0      	nop			@ (mov r8, r8)

10067edc <__arm_cp.1_0>:
10067edc:	200029a4 	.word	0x200029a4

10067ee0 <__arm_cp.1_1>:
10067ee0:	00000bb8 	.word	0x00000bb8
10067ee4:	140a0503 	.word	0x140a0503

10067ee8 <smp_cmn_repeated_attacks_timer_cb>:
10067ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10067eea:	4e29      	ldr	r6, [pc, #164]	@ (10067f90 <__arm_cp.2_0>)
10067eec:	6831      	ldr	r1, [r6, #0]
10067eee:	25a8      	movs	r5, #168	@ 0xa8
10067ef0:	5949      	ldr	r1, [r1, r5]
10067ef2:	00c4      	lsls	r4, r0, #3
10067ef4:	5d0a      	ldrb	r2, [r1, r4]
10067ef6:	06d3      	lsls	r3, r2, #27
10067ef8:	d40e      	bmi.n	10067f18 <smp_cmn_repeated_attacks_timer_cb+0x30>
10067efa:	0693      	lsls	r3, r2, #26
10067efc:	d546      	bpl.n	10067f8c <smp_cmn_repeated_attacks_timer_cb+0xa4>
10067efe:	1909      	adds	r1, r1, r4
10067f00:	0793      	lsls	r3, r2, #30
10067f02:	d035      	beq.n	10067f70 <smp_cmn_repeated_attacks_timer_cb+0x88>
10067f04:	23fc      	movs	r3, #252	@ 0xfc
10067f06:	4013      	ands	r3, r2
10067f08:	1e52      	subs	r2, r2, #1
10067f0a:	2403      	movs	r4, #3
10067f0c:	4014      	ands	r4, r2
10067f0e:	18e2      	adds	r2, r4, r3
10067f10:	700a      	strb	r2, [r1, #0]
10067f12:	f000 f841 	bl	10067f98 <smp_cmn_rejectlist_start_probation_timer2>
10067f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10067f18:	f000 f83e 	bl	10067f98 <smp_cmn_rejectlist_start_probation_timer2>
10067f1c:	6830      	ldr	r0, [r6, #0]
10067f1e:	5940      	ldr	r0, [r0, r5]
10067f20:	1900      	adds	r0, r0, r4
10067f22:	1c84      	adds	r4, r0, #2
10067f24:	2065      	movs	r0, #101	@ 0x65
10067f26:	43c6      	mvns	r6, r0
10067f28:	4637      	mov	r7, r6
10067f2a:	3765      	adds	r7, #101	@ 0x65
10067f2c:	4819      	ldr	r0, [pc, #100]	@ (10067f94 <__arm_cp.2_1>)
10067f2e:	6800      	ldr	r0, [r0, #0]
10067f30:	2134      	movs	r1, #52	@ 0x34
10067f32:	5c40      	ldrb	r0, [r0, r1]
10067f34:	1c7f      	adds	r7, r7, #1
10067f36:	4287      	cmp	r7, r0
10067f38:	d228      	bcs.n	10067f8c <smp_cmn_repeated_attacks_timer_cb+0xa4>
10067f3a:	4815      	ldr	r0, [pc, #84]	@ (10067f90 <__arm_cp.2_0>)
10067f3c:	6800      	ldr	r0, [r0, #0]
10067f3e:	25a4      	movs	r5, #164	@ 0xa4
10067f40:	5940      	ldr	r0, [r0, r5]
10067f42:	1980      	adds	r0, r0, r6
10067f44:	3670      	adds	r6, #112	@ 0x70
10067f46:	3068      	adds	r0, #104	@ 0x68
10067f48:	2206      	movs	r2, #6
10067f4a:	4621      	mov	r1, r4
10067f4c:	f7eb fa12 	bl	10053374 <BLEPLAT_MemCmp>
10067f50:	2800      	cmp	r0, #0
10067f52:	d1eb      	bne.n	10067f2c <smp_cmn_repeated_attacks_timer_cb+0x44>
10067f54:	480e      	ldr	r0, [pc, #56]	@ (10067f90 <__arm_cp.2_0>)
10067f56:	6800      	ldr	r0, [r0, #0]
10067f58:	5940      	ldr	r0, [r0, r5]
10067f5a:	5d81      	ldrb	r1, [r0, r6]
10067f5c:	29fb      	cmp	r1, #251	@ 0xfb
10067f5e:	d115      	bne.n	10067f8c <smp_cmn_repeated_attacks_timer_cb+0xa4>
10067f60:	2110      	movs	r1, #16
10067f62:	5581      	strb	r1, [r0, r6]
10067f64:	200e      	movs	r0, #14
10067f66:	f7fb fa7b 	bl	10063460 <tsk_notify_idx>
10067f6a:	f7ea fbfc 	bl	10052766 <BLE_STACK_ProcessRequest>
10067f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10067f70:	4635      	mov	r5, r6
10067f72:	2400      	movs	r4, #0
10067f74:	2208      	movs	r2, #8
10067f76:	4608      	mov	r0, r1
10067f78:	4621      	mov	r1, r4
10067f7a:	f7eb f9eb 	bl	10053354 <BLEPLAT_MemSet>
10067f7e:	6830      	ldr	r0, [r6, #0]
10067f80:	21b0      	movs	r1, #176	@ 0xb0
10067f82:	5444      	strb	r4, [r0, r1]
10067f84:	2141      	movs	r1, #65	@ 0x41
10067f86:	5c42      	ldrb	r2, [r0, r1]
10067f88:	1e52      	subs	r2, r2, #1
10067f8a:	5442      	strb	r2, [r0, r1]
10067f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10067f8e:	46c0      	nop			@ (mov r8, r8)

10067f90 <__arm_cp.2_0>:
10067f90:	200029a4 	.word	0x200029a4

10067f94 <__arm_cp.2_1>:
10067f94:	20002904 	.word	0x20002904

10067f98 <smp_cmn_rejectlist_start_probation_timer2>:
10067f98:	b510      	push	{r4, lr}
10067f9a:	4604      	mov	r4, r0
10067f9c:	2000      	movs	r0, #0
10067f9e:	2101      	movs	r1, #1
10067fa0:	4b07      	ldr	r3, [pc, #28]	@ (10067fc0 <__arm_cp.3_0>)
10067fa2:	4622      	mov	r2, r4
10067fa4:	f7fa fcf8 	bl	10062998 <smp_timer_reset>
10067fa8:	4806      	ldr	r0, [pc, #24]	@ (10067fc4 <__arm_cp.3_1>)
10067faa:	6800      	ldr	r0, [r0, #0]
10067fac:	21a8      	movs	r1, #168	@ 0xa8
10067fae:	5840      	ldr	r0, [r0, r1]
10067fb0:	00e1      	lsls	r1, r4, #3
10067fb2:	5c42      	ldrb	r2, [r0, r1]
10067fb4:	23cf      	movs	r3, #207	@ 0xcf
10067fb6:	4013      	ands	r3, r2
10067fb8:	3320      	adds	r3, #32
10067fba:	5443      	strb	r3, [r0, r1]
10067fbc:	bd10      	pop	{r4, pc}
10067fbe:	46c0      	nop			@ (mov r8, r8)

10067fc0 <__arm_cp.3_0>:
10067fc0:	00004e20 	.word	0x00004e20

10067fc4 <__arm_cp.3_1>:
10067fc4:	200029a4 	.word	0x200029a4

10067fc8 <smp_cmn_is_peer_rejectlisted>:
10067fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10067fca:	460c      	mov	r4, r1
10067fcc:	2007      	movs	r0, #7
10067fce:	43c0      	mvns	r0, r0
10067fd0:	4e0c      	ldr	r6, [pc, #48]	@ (10068004 <__arm_cp.4_0>)
10067fd2:	4605      	mov	r5, r0
10067fd4:	3508      	adds	r5, #8
10067fd6:	2d18      	cmp	r5, #24
10067fd8:	d010      	beq.n	10067ffc <smp_cmn_is_peer_rejectlisted+0x34>
10067fda:	6831      	ldr	r1, [r6, #0]
10067fdc:	27a8      	movs	r7, #168	@ 0xa8
10067fde:	59c9      	ldr	r1, [r1, r7]
10067fe0:	1808      	adds	r0, r1, r0
10067fe2:	300a      	adds	r0, #10
10067fe4:	2206      	movs	r2, #6
10067fe6:	4621      	mov	r1, r4
10067fe8:	f7eb f9c4 	bl	10053374 <BLEPLAT_MemCmp>
10067fec:	2800      	cmp	r0, #0
10067fee:	4628      	mov	r0, r5
10067ff0:	d1f0      	bne.n	10067fd4 <smp_cmn_is_peer_rejectlisted+0xc>
10067ff2:	6830      	ldr	r0, [r6, #0]
10067ff4:	59c0      	ldr	r0, [r0, r7]
10067ff6:	5d40      	ldrb	r0, [r0, r5]
10067ff8:	06c0      	lsls	r0, r0, #27
10067ffa:	d401      	bmi.n	10068000 <smp_cmn_is_peer_rejectlisted+0x38>
10067ffc:	2000      	movs	r0, #0
10067ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10068000:	2001      	movs	r0, #1
10068002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10068004 <__arm_cp.4_0>:
10068004:	200029a4 	.word	0x200029a4

10068008 <smp_get_remote_device_list_index>:
10068008:	b5b0      	push	{r4, r5, r7, lr}
1006800a:	490d      	ldr	r1, [pc, #52]	@ (10068040 <__arm_cp.0_0>)
1006800c:	6809      	ldr	r1, [r1, #0]
1006800e:	2234      	movs	r2, #52	@ 0x34
10068010:	5c89      	ldrb	r1, [r1, r2]
10068012:	2800      	cmp	r0, #0
10068014:	d011      	beq.n	1006803a <smp_get_remote_device_list_index+0x32>
10068016:	4a0b      	ldr	r2, [pc, #44]	@ (10068044 <__arm_cp.0_1>)
10068018:	6812      	ldr	r2, [r2, #0]
1006801a:	32a4      	adds	r2, #164	@ 0xa4
1006801c:	2300      	movs	r3, #0
1006801e:	b2dc      	uxtb	r4, r3
10068020:	428c      	cmp	r4, r1
10068022:	d20a      	bcs.n	1006803a <smp_get_remote_device_list_index+0x32>
10068024:	2570      	movs	r5, #112	@ 0x70
10068026:	4365      	muls	r5, r4
10068028:	6814      	ldr	r4, [r2, #0]
1006802a:	1964      	adds	r4, r4, r5
1006802c:	8924      	ldrh	r4, [r4, #8]
1006802e:	4044      	eors	r4, r0
10068030:	0524      	lsls	r4, r4, #20
10068032:	d001      	beq.n	10068038 <smp_get_remote_device_list_index+0x30>
10068034:	1c5b      	adds	r3, r3, #1
10068036:	e7f2      	b.n	1006801e <smp_get_remote_device_list_index+0x16>
10068038:	4619      	mov	r1, r3
1006803a:	b2c8      	uxtb	r0, r1
1006803c:	bdb0      	pop	{r4, r5, r7, pc}
1006803e:	46c0      	nop			@ (mov r8, r8)

10068040 <__arm_cp.0_0>:
10068040:	20002904 	.word	0x20002904

10068044 <__arm_cp.0_1>:
10068044:	200029a4 	.word	0x200029a4

10068048 <smp_get_remote_device_list_item>:
10068048:	b5f0      	push	{r4, r5, r6, r7, lr}
1006804a:	4601      	mov	r1, r0
1006804c:	2000      	movs	r0, #0
1006804e:	2900      	cmp	r1, #0
10068050:	d017      	beq.n	10068082 <smp_get_remote_device_list_item+0x3a>
10068052:	4a0c      	ldr	r2, [pc, #48]	@ (10068084 <__arm_cp.1_0>)
10068054:	6812      	ldr	r2, [r2, #0]
10068056:	2334      	movs	r3, #52	@ 0x34
10068058:	5cd3      	ldrb	r3, [r2, r3]
1006805a:	2270      	movs	r2, #112	@ 0x70
1006805c:	435a      	muls	r2, r3
1006805e:	236f      	movs	r3, #111	@ 0x6f
10068060:	43dd      	mvns	r5, r3
10068062:	4b09      	ldr	r3, [pc, #36]	@ (10068088 <__arm_cp.1_1>)
10068064:	681b      	ldr	r3, [r3, #0]
10068066:	33a4      	adds	r3, #164	@ 0xa4
10068068:	462c      	mov	r4, r5
1006806a:	3470      	adds	r4, #112	@ 0x70
1006806c:	42a2      	cmp	r2, r4
1006806e:	d008      	beq.n	10068082 <smp_get_remote_device_list_item+0x3a>
10068070:	681e      	ldr	r6, [r3, #0]
10068072:	1975      	adds	r5, r6, r5
10068074:	2778      	movs	r7, #120	@ 0x78
10068076:	5bed      	ldrh	r5, [r5, r7]
10068078:	404d      	eors	r5, r1
1006807a:	052d      	lsls	r5, r5, #20
1006807c:	4625      	mov	r5, r4
1006807e:	d1f4      	bne.n	1006806a <smp_get_remote_device_list_item+0x22>
10068080:	1930      	adds	r0, r6, r4
10068082:	bdf0      	pop	{r4, r5, r6, r7, pc}

10068084 <__arm_cp.1_0>:
10068084:	20002904 	.word	0x20002904

10068088 <__arm_cp.1_1>:
10068088:	200029a4 	.word	0x200029a4

1006808c <smp_oob_check_is_remote_data_present>:
1006808c:	b5b0      	push	{r4, r5, r7, lr}
1006808e:	4604      	mov	r4, r0
10068090:	480b      	ldr	r0, [pc, #44]	@ (100680c0 <__arm_cp.2_0>)
10068092:	6800      	ldr	r0, [r0, #0]
10068094:	21ac      	movs	r1, #172	@ 0xac
10068096:	5840      	ldr	r0, [r0, r1]
10068098:	7845      	ldrb	r5, [r0, #1]
1006809a:	1c80      	adds	r0, r0, #2
1006809c:	1ca1      	adds	r1, r4, #2
1006809e:	2206      	movs	r2, #6
100680a0:	f7eb f968 	bl	10053374 <BLEPLAT_MemCmp>
100680a4:	4601      	mov	r1, r0
100680a6:	2000      	movs	r0, #0
100680a8:	2900      	cmp	r1, #0
100680aa:	d000      	beq.n	100680ae <smp_oob_check_is_remote_data_present+0x22>
100680ac:	bdb0      	pop	{r4, r5, r7, pc}
100680ae:	7861      	ldrb	r1, [r4, #1]
100680b0:	428d      	cmp	r5, r1
100680b2:	d1fb      	bne.n	100680ac <smp_oob_check_is_remote_data_present+0x20>
100680b4:	7b61      	ldrb	r1, [r4, #13]
100680b6:	2001      	movs	r0, #1
100680b8:	4301      	orrs	r1, r0
100680ba:	7361      	strb	r1, [r4, #13]
100680bc:	bdb0      	pop	{r4, r5, r7, pc}
100680be:	46c0      	nop			@ (mov r8, r8)

100680c0 <__arm_cp.2_0>:
100680c0:	200029a4 	.word	0x200029a4

100680c4 <smp_oob_clear_remote_data_entry>:
100680c4:	b580      	push	{r7, lr}
100680c6:	2228      	movs	r2, #40	@ 0x28
100680c8:	4350      	muls	r0, r2
100680ca:	4904      	ldr	r1, [pc, #16]	@ (100680dc <__arm_cp.4_0>)
100680cc:	6809      	ldr	r1, [r1, #0]
100680ce:	23ac      	movs	r3, #172	@ 0xac
100680d0:	58c9      	ldr	r1, [r1, r3]
100680d2:	1808      	adds	r0, r1, r0
100680d4:	2100      	movs	r1, #0
100680d6:	f7eb f93d 	bl	10053354 <BLEPLAT_MemSet>
100680da:	bd80      	pop	{r7, pc}

100680dc <__arm_cp.4_0>:
100680dc:	200029a4 	.word	0x200029a4

100680e0 <smp_scp_is_another_sc_pairing_ongoing>:
100680e0:	b570      	push	{r4, r5, r6, lr}
100680e2:	490d      	ldr	r1, [pc, #52]	@ (10068118 <__arm_cp.1_0>)
100680e4:	6809      	ldr	r1, [r1, #0]
100680e6:	2234      	movs	r2, #52	@ 0x34
100680e8:	5c89      	ldrb	r1, [r1, r2]
100680ea:	2270      	movs	r2, #112	@ 0x70
100680ec:	434a      	muls	r2, r1
100680ee:	490b      	ldr	r1, [pc, #44]	@ (1006811c <__arm_cp.1_1>)
100680f0:	680b      	ldr	r3, [r1, #0]
100680f2:	33a4      	adds	r3, #164	@ 0xa4
100680f4:	2100      	movs	r1, #0
100680f6:	460c      	mov	r4, r1
100680f8:	42a2      	cmp	r2, r4
100680fa:	d00a      	beq.n	10068112 <smp_scp_is_another_sc_pairing_ongoing+0x32>
100680fc:	681d      	ldr	r5, [r3, #0]
100680fe:	192d      	adds	r5, r5, r4
10068100:	7dee      	ldrb	r6, [r5, #23]
10068102:	07f6      	lsls	r6, r6, #31
10068104:	d002      	beq.n	1006810c <smp_scp_is_another_sc_pairing_ongoing+0x2c>
10068106:	892d      	ldrh	r5, [r5, #8]
10068108:	4285      	cmp	r5, r0
1006810a:	d101      	bne.n	10068110 <smp_scp_is_another_sc_pairing_ongoing+0x30>
1006810c:	3470      	adds	r4, #112	@ 0x70
1006810e:	e7f3      	b.n	100680f8 <smp_scp_is_another_sc_pairing_ongoing+0x18>
10068110:	2101      	movs	r1, #1
10068112:	4608      	mov	r0, r1
10068114:	bd70      	pop	{r4, r5, r6, pc}
10068116:	46c0      	nop			@ (mov r8, r8)

10068118 <__arm_cp.1_0>:
10068118:	20002904 	.word	0x20002904

1006811c <__arm_cp.1_1>:
1006811c:	200029a4 	.word	0x200029a4

10068120 <smp_scp_init_ucfg_weak>:
10068120:	4770      	bx	lr

10068122 <smp_scp_continue_on_exclusive_sc_pairing_ucfg_weak>:
10068122:	201f      	movs	r0, #31
10068124:	4770      	bx	lr

10068126 <smp_scp_public_key_prepare_and_exchange_ucfg_weak>:
10068126:	201f      	movs	r0, #31
10068128:	4770      	bx	lr

1006812a <smp_scp_stats_update_on_pairing_complete_ucfg_weak>:
1006812a:	4770      	bx	lr

1006812c <smp_pka_process_ecc_computation_tsk_ucfg_weak>:
1006812c:	4770      	bx	lr
	...

10068130 <malloc>:
10068130:	b510      	push	{r4, lr}
10068132:	4b03      	ldr	r3, [pc, #12]	@ (10068140 <malloc+0x10>)
10068134:	0001      	movs	r1, r0
10068136:	6818      	ldr	r0, [r3, #0]
10068138:	f000 f830 	bl	1006819c <_malloc_r>
1006813c:	bd10      	pop	{r4, pc}
1006813e:	46c0      	nop			@ (mov r8, r8)
10068140:	20002dac 	.word	0x20002dac

10068144 <free>:
10068144:	b510      	push	{r4, lr}
10068146:	4b03      	ldr	r3, [pc, #12]	@ (10068154 <free+0x10>)
10068148:	0001      	movs	r1, r0
1006814a:	6818      	ldr	r0, [r3, #0]
1006814c:	f000 fb74 	bl	10068838 <_free_r>
10068150:	bd10      	pop	{r4, pc}
10068152:	46c0      	nop			@ (mov r8, r8)
10068154:	20002dac 	.word	0x20002dac

10068158 <sbrk_aligned>:
10068158:	b570      	push	{r4, r5, r6, lr}
1006815a:	4e0f      	ldr	r6, [pc, #60]	@ (10068198 <sbrk_aligned+0x40>)
1006815c:	000d      	movs	r5, r1
1006815e:	6831      	ldr	r1, [r6, #0]
10068160:	0004      	movs	r4, r0
10068162:	2900      	cmp	r1, #0
10068164:	d102      	bne.n	1006816c <sbrk_aligned+0x14>
10068166:	f000 fb2b 	bl	100687c0 <_sbrk_r>
1006816a:	6030      	str	r0, [r6, #0]
1006816c:	0029      	movs	r1, r5
1006816e:	0020      	movs	r0, r4
10068170:	f000 fb26 	bl	100687c0 <_sbrk_r>
10068174:	1c43      	adds	r3, r0, #1
10068176:	d103      	bne.n	10068180 <sbrk_aligned+0x28>
10068178:	2501      	movs	r5, #1
1006817a:	426d      	negs	r5, r5
1006817c:	0028      	movs	r0, r5
1006817e:	bd70      	pop	{r4, r5, r6, pc}
10068180:	2303      	movs	r3, #3
10068182:	1cc5      	adds	r5, r0, #3
10068184:	439d      	bics	r5, r3
10068186:	42a8      	cmp	r0, r5
10068188:	d0f8      	beq.n	1006817c <sbrk_aligned+0x24>
1006818a:	1a29      	subs	r1, r5, r0
1006818c:	0020      	movs	r0, r4
1006818e:	f000 fb17 	bl	100687c0 <_sbrk_r>
10068192:	3001      	adds	r0, #1
10068194:	d1f2      	bne.n	1006817c <sbrk_aligned+0x24>
10068196:	e7ef      	b.n	10068178 <sbrk_aligned+0x20>
10068198:	200029b0 	.word	0x200029b0

1006819c <_malloc_r>:
1006819c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1006819e:	2203      	movs	r2, #3
100681a0:	1ccb      	adds	r3, r1, #3
100681a2:	4393      	bics	r3, r2
100681a4:	3308      	adds	r3, #8
100681a6:	0005      	movs	r5, r0
100681a8:	001f      	movs	r7, r3
100681aa:	2b0c      	cmp	r3, #12
100681ac:	d234      	bcs.n	10068218 <_malloc_r+0x7c>
100681ae:	270c      	movs	r7, #12
100681b0:	42b9      	cmp	r1, r7
100681b2:	d833      	bhi.n	1006821c <_malloc_r+0x80>
100681b4:	0028      	movs	r0, r5
100681b6:	f000 f871 	bl	1006829c <__malloc_lock>
100681ba:	4e37      	ldr	r6, [pc, #220]	@ (10068298 <_malloc_r+0xfc>)
100681bc:	6833      	ldr	r3, [r6, #0]
100681be:	001c      	movs	r4, r3
100681c0:	2c00      	cmp	r4, #0
100681c2:	d12f      	bne.n	10068224 <_malloc_r+0x88>
100681c4:	0039      	movs	r1, r7
100681c6:	0028      	movs	r0, r5
100681c8:	f7ff ffc6 	bl	10068158 <sbrk_aligned>
100681cc:	0004      	movs	r4, r0
100681ce:	1c43      	adds	r3, r0, #1
100681d0:	d15f      	bne.n	10068292 <_malloc_r+0xf6>
100681d2:	6834      	ldr	r4, [r6, #0]
100681d4:	9400      	str	r4, [sp, #0]
100681d6:	9b00      	ldr	r3, [sp, #0]
100681d8:	2b00      	cmp	r3, #0
100681da:	d14a      	bne.n	10068272 <_malloc_r+0xd6>
100681dc:	2c00      	cmp	r4, #0
100681de:	d052      	beq.n	10068286 <_malloc_r+0xea>
100681e0:	6823      	ldr	r3, [r4, #0]
100681e2:	0028      	movs	r0, r5
100681e4:	18e3      	adds	r3, r4, r3
100681e6:	9900      	ldr	r1, [sp, #0]
100681e8:	9301      	str	r3, [sp, #4]
100681ea:	f000 fae9 	bl	100687c0 <_sbrk_r>
100681ee:	9b01      	ldr	r3, [sp, #4]
100681f0:	4283      	cmp	r3, r0
100681f2:	d148      	bne.n	10068286 <_malloc_r+0xea>
100681f4:	6823      	ldr	r3, [r4, #0]
100681f6:	0028      	movs	r0, r5
100681f8:	1aff      	subs	r7, r7, r3
100681fa:	0039      	movs	r1, r7
100681fc:	f7ff ffac 	bl	10068158 <sbrk_aligned>
10068200:	3001      	adds	r0, #1
10068202:	d040      	beq.n	10068286 <_malloc_r+0xea>
10068204:	6823      	ldr	r3, [r4, #0]
10068206:	19db      	adds	r3, r3, r7
10068208:	6023      	str	r3, [r4, #0]
1006820a:	6833      	ldr	r3, [r6, #0]
1006820c:	685a      	ldr	r2, [r3, #4]
1006820e:	2a00      	cmp	r2, #0
10068210:	d133      	bne.n	1006827a <_malloc_r+0xde>
10068212:	9b00      	ldr	r3, [sp, #0]
10068214:	6033      	str	r3, [r6, #0]
10068216:	e019      	b.n	1006824c <_malloc_r+0xb0>
10068218:	2b00      	cmp	r3, #0
1006821a:	dac9      	bge.n	100681b0 <_malloc_r+0x14>
1006821c:	230c      	movs	r3, #12
1006821e:	602b      	str	r3, [r5, #0]
10068220:	2000      	movs	r0, #0
10068222:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10068224:	6821      	ldr	r1, [r4, #0]
10068226:	1bc9      	subs	r1, r1, r7
10068228:	d420      	bmi.n	1006826c <_malloc_r+0xd0>
1006822a:	290b      	cmp	r1, #11
1006822c:	d90a      	bls.n	10068244 <_malloc_r+0xa8>
1006822e:	19e2      	adds	r2, r4, r7
10068230:	6027      	str	r7, [r4, #0]
10068232:	42a3      	cmp	r3, r4
10068234:	d104      	bne.n	10068240 <_malloc_r+0xa4>
10068236:	6032      	str	r2, [r6, #0]
10068238:	6863      	ldr	r3, [r4, #4]
1006823a:	6011      	str	r1, [r2, #0]
1006823c:	6053      	str	r3, [r2, #4]
1006823e:	e005      	b.n	1006824c <_malloc_r+0xb0>
10068240:	605a      	str	r2, [r3, #4]
10068242:	e7f9      	b.n	10068238 <_malloc_r+0x9c>
10068244:	6862      	ldr	r2, [r4, #4]
10068246:	42a3      	cmp	r3, r4
10068248:	d10e      	bne.n	10068268 <_malloc_r+0xcc>
1006824a:	6032      	str	r2, [r6, #0]
1006824c:	0028      	movs	r0, r5
1006824e:	f000 f82d 	bl	100682ac <__malloc_unlock>
10068252:	0020      	movs	r0, r4
10068254:	2207      	movs	r2, #7
10068256:	300b      	adds	r0, #11
10068258:	1d23      	adds	r3, r4, #4
1006825a:	4390      	bics	r0, r2
1006825c:	1ac2      	subs	r2, r0, r3
1006825e:	4298      	cmp	r0, r3
10068260:	d0df      	beq.n	10068222 <_malloc_r+0x86>
10068262:	1a1b      	subs	r3, r3, r0
10068264:	50a3      	str	r3, [r4, r2]
10068266:	e7dc      	b.n	10068222 <_malloc_r+0x86>
10068268:	605a      	str	r2, [r3, #4]
1006826a:	e7ef      	b.n	1006824c <_malloc_r+0xb0>
1006826c:	0023      	movs	r3, r4
1006826e:	6864      	ldr	r4, [r4, #4]
10068270:	e7a6      	b.n	100681c0 <_malloc_r+0x24>
10068272:	9c00      	ldr	r4, [sp, #0]
10068274:	6863      	ldr	r3, [r4, #4]
10068276:	9300      	str	r3, [sp, #0]
10068278:	e7ad      	b.n	100681d6 <_malloc_r+0x3a>
1006827a:	001a      	movs	r2, r3
1006827c:	685b      	ldr	r3, [r3, #4]
1006827e:	42a3      	cmp	r3, r4
10068280:	d1fb      	bne.n	1006827a <_malloc_r+0xde>
10068282:	2300      	movs	r3, #0
10068284:	e7da      	b.n	1006823c <_malloc_r+0xa0>
10068286:	230c      	movs	r3, #12
10068288:	0028      	movs	r0, r5
1006828a:	602b      	str	r3, [r5, #0]
1006828c:	f000 f80e 	bl	100682ac <__malloc_unlock>
10068290:	e7c6      	b.n	10068220 <_malloc_r+0x84>
10068292:	6007      	str	r7, [r0, #0]
10068294:	e7da      	b.n	1006824c <_malloc_r+0xb0>
10068296:	46c0      	nop			@ (mov r8, r8)
10068298:	200029b4 	.word	0x200029b4

1006829c <__malloc_lock>:
1006829c:	b510      	push	{r4, lr}
1006829e:	4802      	ldr	r0, [pc, #8]	@ (100682a8 <__malloc_lock+0xc>)
100682a0:	f000 fabb 	bl	1006881a <__retarget_lock_acquire_recursive>
100682a4:	bd10      	pop	{r4, pc}
100682a6:	46c0      	nop			@ (mov r8, r8)
100682a8:	20002af8 	.word	0x20002af8

100682ac <__malloc_unlock>:
100682ac:	b510      	push	{r4, lr}
100682ae:	4802      	ldr	r0, [pc, #8]	@ (100682b8 <__malloc_unlock+0xc>)
100682b0:	f000 fab4 	bl	1006881c <__retarget_lock_release_recursive>
100682b4:	bd10      	pop	{r4, pc}
100682b6:	46c0      	nop			@ (mov r8, r8)
100682b8:	20002af8 	.word	0x20002af8

100682bc <std>:
100682bc:	2300      	movs	r3, #0
100682be:	b510      	push	{r4, lr}
100682c0:	0004      	movs	r4, r0
100682c2:	6003      	str	r3, [r0, #0]
100682c4:	6043      	str	r3, [r0, #4]
100682c6:	6083      	str	r3, [r0, #8]
100682c8:	8181      	strh	r1, [r0, #12]
100682ca:	6643      	str	r3, [r0, #100]	@ 0x64
100682cc:	81c2      	strh	r2, [r0, #14]
100682ce:	6103      	str	r3, [r0, #16]
100682d0:	6143      	str	r3, [r0, #20]
100682d2:	6183      	str	r3, [r0, #24]
100682d4:	0019      	movs	r1, r3
100682d6:	2208      	movs	r2, #8
100682d8:	305c      	adds	r0, #92	@ 0x5c
100682da:	f000 fa2f 	bl	1006873c <memset>
100682de:	4b0b      	ldr	r3, [pc, #44]	@ (1006830c <std+0x50>)
100682e0:	6224      	str	r4, [r4, #32]
100682e2:	6263      	str	r3, [r4, #36]	@ 0x24
100682e4:	4b0a      	ldr	r3, [pc, #40]	@ (10068310 <std+0x54>)
100682e6:	62a3      	str	r3, [r4, #40]	@ 0x28
100682e8:	4b0a      	ldr	r3, [pc, #40]	@ (10068314 <std+0x58>)
100682ea:	62e3      	str	r3, [r4, #44]	@ 0x2c
100682ec:	4b0a      	ldr	r3, [pc, #40]	@ (10068318 <std+0x5c>)
100682ee:	6323      	str	r3, [r4, #48]	@ 0x30
100682f0:	4b0a      	ldr	r3, [pc, #40]	@ (1006831c <std+0x60>)
100682f2:	429c      	cmp	r4, r3
100682f4:	d005      	beq.n	10068302 <std+0x46>
100682f6:	4b0a      	ldr	r3, [pc, #40]	@ (10068320 <std+0x64>)
100682f8:	429c      	cmp	r4, r3
100682fa:	d002      	beq.n	10068302 <std+0x46>
100682fc:	4b09      	ldr	r3, [pc, #36]	@ (10068324 <std+0x68>)
100682fe:	429c      	cmp	r4, r3
10068300:	d103      	bne.n	1006830a <std+0x4e>
10068302:	0020      	movs	r0, r4
10068304:	3058      	adds	r0, #88	@ 0x58
10068306:	f000 fa87 	bl	10068818 <__retarget_lock_init_recursive>
1006830a:	bd10      	pop	{r4, pc}
1006830c:	10068549 	.word	0x10068549
10068310:	10068571 	.word	0x10068571
10068314:	100685a9 	.word	0x100685a9
10068318:	100685d5 	.word	0x100685d5
1006831c:	200029b8 	.word	0x200029b8
10068320:	20002a20 	.word	0x20002a20
10068324:	20002a88 	.word	0x20002a88

10068328 <stdio_exit_handler>:
10068328:	b510      	push	{r4, lr}
1006832a:	4a03      	ldr	r2, [pc, #12]	@ (10068338 <stdio_exit_handler+0x10>)
1006832c:	4903      	ldr	r1, [pc, #12]	@ (1006833c <stdio_exit_handler+0x14>)
1006832e:	4804      	ldr	r0, [pc, #16]	@ (10068340 <stdio_exit_handler+0x18>)
10068330:	f000 f86c 	bl	1006840c <_fwalk_sglue>
10068334:	bd10      	pop	{r4, pc}
10068336:	46c0      	nop			@ (mov r8, r8)
10068338:	20002da0 	.word	0x20002da0
1006833c:	10068f8d 	.word	0x10068f8d
10068340:	20002db0 	.word	0x20002db0

10068344 <cleanup_stdio>:
10068344:	6841      	ldr	r1, [r0, #4]
10068346:	4b0b      	ldr	r3, [pc, #44]	@ (10068374 <cleanup_stdio+0x30>)
10068348:	b510      	push	{r4, lr}
1006834a:	0004      	movs	r4, r0
1006834c:	4299      	cmp	r1, r3
1006834e:	d001      	beq.n	10068354 <cleanup_stdio+0x10>
10068350:	f000 fe1c 	bl	10068f8c <_fflush_r>
10068354:	68a1      	ldr	r1, [r4, #8]
10068356:	4b08      	ldr	r3, [pc, #32]	@ (10068378 <cleanup_stdio+0x34>)
10068358:	4299      	cmp	r1, r3
1006835a:	d002      	beq.n	10068362 <cleanup_stdio+0x1e>
1006835c:	0020      	movs	r0, r4
1006835e:	f000 fe15 	bl	10068f8c <_fflush_r>
10068362:	68e1      	ldr	r1, [r4, #12]
10068364:	4b05      	ldr	r3, [pc, #20]	@ (1006837c <cleanup_stdio+0x38>)
10068366:	4299      	cmp	r1, r3
10068368:	d002      	beq.n	10068370 <cleanup_stdio+0x2c>
1006836a:	0020      	movs	r0, r4
1006836c:	f000 fe0e 	bl	10068f8c <_fflush_r>
10068370:	bd10      	pop	{r4, pc}
10068372:	46c0      	nop			@ (mov r8, r8)
10068374:	200029b8 	.word	0x200029b8
10068378:	20002a20 	.word	0x20002a20
1006837c:	20002a88 	.word	0x20002a88

10068380 <global_stdio_init.part.0>:
10068380:	b510      	push	{r4, lr}
10068382:	4b09      	ldr	r3, [pc, #36]	@ (100683a8 <global_stdio_init.part.0+0x28>)
10068384:	4a09      	ldr	r2, [pc, #36]	@ (100683ac <global_stdio_init.part.0+0x2c>)
10068386:	2104      	movs	r1, #4
10068388:	601a      	str	r2, [r3, #0]
1006838a:	4809      	ldr	r0, [pc, #36]	@ (100683b0 <global_stdio_init.part.0+0x30>)
1006838c:	2200      	movs	r2, #0
1006838e:	f7ff ff95 	bl	100682bc <std>
10068392:	2201      	movs	r2, #1
10068394:	2109      	movs	r1, #9
10068396:	4807      	ldr	r0, [pc, #28]	@ (100683b4 <global_stdio_init.part.0+0x34>)
10068398:	f7ff ff90 	bl	100682bc <std>
1006839c:	2202      	movs	r2, #2
1006839e:	2112      	movs	r1, #18
100683a0:	4805      	ldr	r0, [pc, #20]	@ (100683b8 <global_stdio_init.part.0+0x38>)
100683a2:	f7ff ff8b 	bl	100682bc <std>
100683a6:	bd10      	pop	{r4, pc}
100683a8:	20002af0 	.word	0x20002af0
100683ac:	10068329 	.word	0x10068329
100683b0:	200029b8 	.word	0x200029b8
100683b4:	20002a20 	.word	0x20002a20
100683b8:	20002a88 	.word	0x20002a88

100683bc <__sfp_lock_acquire>:
100683bc:	b510      	push	{r4, lr}
100683be:	4802      	ldr	r0, [pc, #8]	@ (100683c8 <__sfp_lock_acquire+0xc>)
100683c0:	f000 fa2b 	bl	1006881a <__retarget_lock_acquire_recursive>
100683c4:	bd10      	pop	{r4, pc}
100683c6:	46c0      	nop			@ (mov r8, r8)
100683c8:	20002af9 	.word	0x20002af9

100683cc <__sfp_lock_release>:
100683cc:	b510      	push	{r4, lr}
100683ce:	4802      	ldr	r0, [pc, #8]	@ (100683d8 <__sfp_lock_release+0xc>)
100683d0:	f000 fa24 	bl	1006881c <__retarget_lock_release_recursive>
100683d4:	bd10      	pop	{r4, pc}
100683d6:	46c0      	nop			@ (mov r8, r8)
100683d8:	20002af9 	.word	0x20002af9

100683dc <__sinit>:
100683dc:	b510      	push	{r4, lr}
100683de:	0004      	movs	r4, r0
100683e0:	f7ff ffec 	bl	100683bc <__sfp_lock_acquire>
100683e4:	6a23      	ldr	r3, [r4, #32]
100683e6:	2b00      	cmp	r3, #0
100683e8:	d002      	beq.n	100683f0 <__sinit+0x14>
100683ea:	f7ff ffef 	bl	100683cc <__sfp_lock_release>
100683ee:	bd10      	pop	{r4, pc}
100683f0:	4b04      	ldr	r3, [pc, #16]	@ (10068404 <__sinit+0x28>)
100683f2:	6223      	str	r3, [r4, #32]
100683f4:	4b04      	ldr	r3, [pc, #16]	@ (10068408 <__sinit+0x2c>)
100683f6:	681b      	ldr	r3, [r3, #0]
100683f8:	2b00      	cmp	r3, #0
100683fa:	d1f6      	bne.n	100683ea <__sinit+0xe>
100683fc:	f7ff ffc0 	bl	10068380 <global_stdio_init.part.0>
10068400:	e7f3      	b.n	100683ea <__sinit+0xe>
10068402:	46c0      	nop			@ (mov r8, r8)
10068404:	10068345 	.word	0x10068345
10068408:	20002af0 	.word	0x20002af0

1006840c <_fwalk_sglue>:
1006840c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1006840e:	0014      	movs	r4, r2
10068410:	2600      	movs	r6, #0
10068412:	9000      	str	r0, [sp, #0]
10068414:	9101      	str	r1, [sp, #4]
10068416:	68a5      	ldr	r5, [r4, #8]
10068418:	6867      	ldr	r7, [r4, #4]
1006841a:	3f01      	subs	r7, #1
1006841c:	d504      	bpl.n	10068428 <_fwalk_sglue+0x1c>
1006841e:	6824      	ldr	r4, [r4, #0]
10068420:	2c00      	cmp	r4, #0
10068422:	d1f8      	bne.n	10068416 <_fwalk_sglue+0xa>
10068424:	0030      	movs	r0, r6
10068426:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10068428:	89ab      	ldrh	r3, [r5, #12]
1006842a:	2b01      	cmp	r3, #1
1006842c:	d908      	bls.n	10068440 <_fwalk_sglue+0x34>
1006842e:	220e      	movs	r2, #14
10068430:	5eab      	ldrsh	r3, [r5, r2]
10068432:	3301      	adds	r3, #1
10068434:	d004      	beq.n	10068440 <_fwalk_sglue+0x34>
10068436:	0029      	movs	r1, r5
10068438:	9800      	ldr	r0, [sp, #0]
1006843a:	9b01      	ldr	r3, [sp, #4]
1006843c:	4798      	blx	r3
1006843e:	4306      	orrs	r6, r0
10068440:	3568      	adds	r5, #104	@ 0x68
10068442:	e7ea      	b.n	1006841a <_fwalk_sglue+0xe>

10068444 <_puts_r>:
10068444:	6a03      	ldr	r3, [r0, #32]
10068446:	b570      	push	{r4, r5, r6, lr}
10068448:	0005      	movs	r5, r0
1006844a:	000e      	movs	r6, r1
1006844c:	6884      	ldr	r4, [r0, #8]
1006844e:	2b00      	cmp	r3, #0
10068450:	d101      	bne.n	10068456 <_puts_r+0x12>
10068452:	f7ff ffc3 	bl	100683dc <__sinit>
10068456:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10068458:	07db      	lsls	r3, r3, #31
1006845a:	d405      	bmi.n	10068468 <_puts_r+0x24>
1006845c:	89a3      	ldrh	r3, [r4, #12]
1006845e:	059b      	lsls	r3, r3, #22
10068460:	d402      	bmi.n	10068468 <_puts_r+0x24>
10068462:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10068464:	f000 f9d9 	bl	1006881a <__retarget_lock_acquire_recursive>
10068468:	89a3      	ldrh	r3, [r4, #12]
1006846a:	071b      	lsls	r3, r3, #28
1006846c:	d502      	bpl.n	10068474 <_puts_r+0x30>
1006846e:	6923      	ldr	r3, [r4, #16]
10068470:	2b00      	cmp	r3, #0
10068472:	d11f      	bne.n	100684b4 <_puts_r+0x70>
10068474:	0021      	movs	r1, r4
10068476:	0028      	movs	r0, r5
10068478:	f000 f8f4 	bl	10068664 <__swsetup_r>
1006847c:	2800      	cmp	r0, #0
1006847e:	d019      	beq.n	100684b4 <_puts_r+0x70>
10068480:	2501      	movs	r5, #1
10068482:	426d      	negs	r5, r5
10068484:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10068486:	07db      	lsls	r3, r3, #31
10068488:	d405      	bmi.n	10068496 <_puts_r+0x52>
1006848a:	89a3      	ldrh	r3, [r4, #12]
1006848c:	059b      	lsls	r3, r3, #22
1006848e:	d402      	bmi.n	10068496 <_puts_r+0x52>
10068490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10068492:	f000 f9c3 	bl	1006881c <__retarget_lock_release_recursive>
10068496:	0028      	movs	r0, r5
10068498:	bd70      	pop	{r4, r5, r6, pc}
1006849a:	3601      	adds	r6, #1
1006849c:	60a3      	str	r3, [r4, #8]
1006849e:	2b00      	cmp	r3, #0
100684a0:	da04      	bge.n	100684ac <_puts_r+0x68>
100684a2:	69a2      	ldr	r2, [r4, #24]
100684a4:	429a      	cmp	r2, r3
100684a6:	dc16      	bgt.n	100684d6 <_puts_r+0x92>
100684a8:	290a      	cmp	r1, #10
100684aa:	d014      	beq.n	100684d6 <_puts_r+0x92>
100684ac:	6823      	ldr	r3, [r4, #0]
100684ae:	1c5a      	adds	r2, r3, #1
100684b0:	6022      	str	r2, [r4, #0]
100684b2:	7019      	strb	r1, [r3, #0]
100684b4:	68a3      	ldr	r3, [r4, #8]
100684b6:	7831      	ldrb	r1, [r6, #0]
100684b8:	3b01      	subs	r3, #1
100684ba:	2900      	cmp	r1, #0
100684bc:	d1ed      	bne.n	1006849a <_puts_r+0x56>
100684be:	60a3      	str	r3, [r4, #8]
100684c0:	2b00      	cmp	r3, #0
100684c2:	da0f      	bge.n	100684e4 <_puts_r+0xa0>
100684c4:	0022      	movs	r2, r4
100684c6:	0028      	movs	r0, r5
100684c8:	310a      	adds	r1, #10
100684ca:	f000 f889 	bl	100685e0 <__swbuf_r>
100684ce:	3001      	adds	r0, #1
100684d0:	d0d6      	beq.n	10068480 <_puts_r+0x3c>
100684d2:	250a      	movs	r5, #10
100684d4:	e7d6      	b.n	10068484 <_puts_r+0x40>
100684d6:	0022      	movs	r2, r4
100684d8:	0028      	movs	r0, r5
100684da:	f000 f881 	bl	100685e0 <__swbuf_r>
100684de:	3001      	adds	r0, #1
100684e0:	d1e8      	bne.n	100684b4 <_puts_r+0x70>
100684e2:	e7cd      	b.n	10068480 <_puts_r+0x3c>
100684e4:	6823      	ldr	r3, [r4, #0]
100684e6:	1c5a      	adds	r2, r3, #1
100684e8:	6022      	str	r2, [r4, #0]
100684ea:	220a      	movs	r2, #10
100684ec:	701a      	strb	r2, [r3, #0]
100684ee:	e7f0      	b.n	100684d2 <_puts_r+0x8e>

100684f0 <puts>:
100684f0:	b510      	push	{r4, lr}
100684f2:	4b03      	ldr	r3, [pc, #12]	@ (10068500 <puts+0x10>)
100684f4:	0001      	movs	r1, r0
100684f6:	6818      	ldr	r0, [r3, #0]
100684f8:	f7ff ffa4 	bl	10068444 <_puts_r>
100684fc:	bd10      	pop	{r4, pc}
100684fe:	46c0      	nop			@ (mov r8, r8)
10068500:	20002dac 	.word	0x20002dac

10068504 <siprintf>:
10068504:	b40e      	push	{r1, r2, r3}
10068506:	b510      	push	{r4, lr}
10068508:	2400      	movs	r4, #0
1006850a:	490c      	ldr	r1, [pc, #48]	@ (1006853c <siprintf+0x38>)
1006850c:	b09d      	sub	sp, #116	@ 0x74
1006850e:	ab1f      	add	r3, sp, #124	@ 0x7c
10068510:	9002      	str	r0, [sp, #8]
10068512:	9006      	str	r0, [sp, #24]
10068514:	9107      	str	r1, [sp, #28]
10068516:	9104      	str	r1, [sp, #16]
10068518:	4809      	ldr	r0, [pc, #36]	@ (10068540 <siprintf+0x3c>)
1006851a:	490a      	ldr	r1, [pc, #40]	@ (10068544 <siprintf+0x40>)
1006851c:	cb04      	ldmia	r3!, {r2}
1006851e:	9105      	str	r1, [sp, #20]
10068520:	6800      	ldr	r0, [r0, #0]
10068522:	a902      	add	r1, sp, #8
10068524:	9301      	str	r3, [sp, #4]
10068526:	941b      	str	r4, [sp, #108]	@ 0x6c
10068528:	f000 fa30 	bl	1006898c <_svfiprintf_r>
1006852c:	9b02      	ldr	r3, [sp, #8]
1006852e:	701c      	strb	r4, [r3, #0]
10068530:	b01d      	add	sp, #116	@ 0x74
10068532:	bc10      	pop	{r4}
10068534:	bc08      	pop	{r3}
10068536:	b003      	add	sp, #12
10068538:	4718      	bx	r3
1006853a:	46c0      	nop			@ (mov r8, r8)
1006853c:	7fffffff 	.word	0x7fffffff
10068540:	20002dac 	.word	0x20002dac
10068544:	ffff0208 	.word	0xffff0208

10068548 <__sread>:
10068548:	b570      	push	{r4, r5, r6, lr}
1006854a:	000c      	movs	r4, r1
1006854c:	250e      	movs	r5, #14
1006854e:	5f49      	ldrsh	r1, [r1, r5]
10068550:	f000 f922 	bl	10068798 <_read_r>
10068554:	2800      	cmp	r0, #0
10068556:	db03      	blt.n	10068560 <__sread+0x18>
10068558:	6d63      	ldr	r3, [r4, #84]	@ 0x54
1006855a:	181b      	adds	r3, r3, r0
1006855c:	6563      	str	r3, [r4, #84]	@ 0x54
1006855e:	bd70      	pop	{r4, r5, r6, pc}
10068560:	89a3      	ldrh	r3, [r4, #12]
10068562:	4a02      	ldr	r2, [pc, #8]	@ (1006856c <__sread+0x24>)
10068564:	4013      	ands	r3, r2
10068566:	81a3      	strh	r3, [r4, #12]
10068568:	e7f9      	b.n	1006855e <__sread+0x16>
1006856a:	46c0      	nop			@ (mov r8, r8)
1006856c:	ffffefff 	.word	0xffffefff

10068570 <__swrite>:
10068570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10068572:	001f      	movs	r7, r3
10068574:	898b      	ldrh	r3, [r1, #12]
10068576:	0005      	movs	r5, r0
10068578:	000c      	movs	r4, r1
1006857a:	0016      	movs	r6, r2
1006857c:	05db      	lsls	r3, r3, #23
1006857e:	d505      	bpl.n	1006858c <__swrite+0x1c>
10068580:	230e      	movs	r3, #14
10068582:	5ec9      	ldrsh	r1, [r1, r3]
10068584:	2200      	movs	r2, #0
10068586:	2302      	movs	r3, #2
10068588:	f000 f8f2 	bl	10068770 <_lseek_r>
1006858c:	89a3      	ldrh	r3, [r4, #12]
1006858e:	4a05      	ldr	r2, [pc, #20]	@ (100685a4 <__swrite+0x34>)
10068590:	0028      	movs	r0, r5
10068592:	4013      	ands	r3, r2
10068594:	81a3      	strh	r3, [r4, #12]
10068596:	0032      	movs	r2, r6
10068598:	230e      	movs	r3, #14
1006859a:	5ee1      	ldrsh	r1, [r4, r3]
1006859c:	003b      	movs	r3, r7
1006859e:	f000 f921 	bl	100687e4 <_write_r>
100685a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100685a4:	ffffefff 	.word	0xffffefff

100685a8 <__sseek>:
100685a8:	b570      	push	{r4, r5, r6, lr}
100685aa:	000c      	movs	r4, r1
100685ac:	250e      	movs	r5, #14
100685ae:	5f49      	ldrsh	r1, [r1, r5]
100685b0:	f000 f8de 	bl	10068770 <_lseek_r>
100685b4:	89a3      	ldrh	r3, [r4, #12]
100685b6:	1c42      	adds	r2, r0, #1
100685b8:	d103      	bne.n	100685c2 <__sseek+0x1a>
100685ba:	4a05      	ldr	r2, [pc, #20]	@ (100685d0 <__sseek+0x28>)
100685bc:	4013      	ands	r3, r2
100685be:	81a3      	strh	r3, [r4, #12]
100685c0:	bd70      	pop	{r4, r5, r6, pc}
100685c2:	2280      	movs	r2, #128	@ 0x80
100685c4:	0152      	lsls	r2, r2, #5
100685c6:	4313      	orrs	r3, r2
100685c8:	81a3      	strh	r3, [r4, #12]
100685ca:	6560      	str	r0, [r4, #84]	@ 0x54
100685cc:	e7f8      	b.n	100685c0 <__sseek+0x18>
100685ce:	46c0      	nop			@ (mov r8, r8)
100685d0:	ffffefff 	.word	0xffffefff

100685d4 <__sclose>:
100685d4:	b510      	push	{r4, lr}
100685d6:	230e      	movs	r3, #14
100685d8:	5ec9      	ldrsh	r1, [r1, r3]
100685da:	f000 f8b7 	bl	1006874c <_close_r>
100685de:	bd10      	pop	{r4, pc}

100685e0 <__swbuf_r>:
100685e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100685e2:	0006      	movs	r6, r0
100685e4:	000d      	movs	r5, r1
100685e6:	0014      	movs	r4, r2
100685e8:	2800      	cmp	r0, #0
100685ea:	d004      	beq.n	100685f6 <__swbuf_r+0x16>
100685ec:	6a03      	ldr	r3, [r0, #32]
100685ee:	2b00      	cmp	r3, #0
100685f0:	d101      	bne.n	100685f6 <__swbuf_r+0x16>
100685f2:	f7ff fef3 	bl	100683dc <__sinit>
100685f6:	69a3      	ldr	r3, [r4, #24]
100685f8:	60a3      	str	r3, [r4, #8]
100685fa:	89a3      	ldrh	r3, [r4, #12]
100685fc:	071b      	lsls	r3, r3, #28
100685fe:	d502      	bpl.n	10068606 <__swbuf_r+0x26>
10068600:	6923      	ldr	r3, [r4, #16]
10068602:	2b00      	cmp	r3, #0
10068604:	d109      	bne.n	1006861a <__swbuf_r+0x3a>
10068606:	0021      	movs	r1, r4
10068608:	0030      	movs	r0, r6
1006860a:	f000 f82b 	bl	10068664 <__swsetup_r>
1006860e:	2800      	cmp	r0, #0
10068610:	d003      	beq.n	1006861a <__swbuf_r+0x3a>
10068612:	2501      	movs	r5, #1
10068614:	426d      	negs	r5, r5
10068616:	0028      	movs	r0, r5
10068618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006861a:	6923      	ldr	r3, [r4, #16]
1006861c:	6820      	ldr	r0, [r4, #0]
1006861e:	b2ef      	uxtb	r7, r5
10068620:	1ac0      	subs	r0, r0, r3
10068622:	6963      	ldr	r3, [r4, #20]
10068624:	b2ed      	uxtb	r5, r5
10068626:	4283      	cmp	r3, r0
10068628:	dc05      	bgt.n	10068636 <__swbuf_r+0x56>
1006862a:	0021      	movs	r1, r4
1006862c:	0030      	movs	r0, r6
1006862e:	f000 fcad 	bl	10068f8c <_fflush_r>
10068632:	2800      	cmp	r0, #0
10068634:	d1ed      	bne.n	10068612 <__swbuf_r+0x32>
10068636:	68a3      	ldr	r3, [r4, #8]
10068638:	3001      	adds	r0, #1
1006863a:	3b01      	subs	r3, #1
1006863c:	60a3      	str	r3, [r4, #8]
1006863e:	6823      	ldr	r3, [r4, #0]
10068640:	1c5a      	adds	r2, r3, #1
10068642:	6022      	str	r2, [r4, #0]
10068644:	701f      	strb	r7, [r3, #0]
10068646:	6963      	ldr	r3, [r4, #20]
10068648:	4283      	cmp	r3, r0
1006864a:	d004      	beq.n	10068656 <__swbuf_r+0x76>
1006864c:	89a3      	ldrh	r3, [r4, #12]
1006864e:	07db      	lsls	r3, r3, #31
10068650:	d5e1      	bpl.n	10068616 <__swbuf_r+0x36>
10068652:	2d0a      	cmp	r5, #10
10068654:	d1df      	bne.n	10068616 <__swbuf_r+0x36>
10068656:	0021      	movs	r1, r4
10068658:	0030      	movs	r0, r6
1006865a:	f000 fc97 	bl	10068f8c <_fflush_r>
1006865e:	2800      	cmp	r0, #0
10068660:	d0d9      	beq.n	10068616 <__swbuf_r+0x36>
10068662:	e7d6      	b.n	10068612 <__swbuf_r+0x32>

10068664 <__swsetup_r>:
10068664:	4b2d      	ldr	r3, [pc, #180]	@ (1006871c <__swsetup_r+0xb8>)
10068666:	b570      	push	{r4, r5, r6, lr}
10068668:	0005      	movs	r5, r0
1006866a:	6818      	ldr	r0, [r3, #0]
1006866c:	000c      	movs	r4, r1
1006866e:	2800      	cmp	r0, #0
10068670:	d004      	beq.n	1006867c <__swsetup_r+0x18>
10068672:	6a03      	ldr	r3, [r0, #32]
10068674:	2b00      	cmp	r3, #0
10068676:	d101      	bne.n	1006867c <__swsetup_r+0x18>
10068678:	f7ff feb0 	bl	100683dc <__sinit>
1006867c:	220c      	movs	r2, #12
1006867e:	5ea3      	ldrsh	r3, [r4, r2]
10068680:	071a      	lsls	r2, r3, #28
10068682:	d423      	bmi.n	100686cc <__swsetup_r+0x68>
10068684:	06da      	lsls	r2, r3, #27
10068686:	d407      	bmi.n	10068698 <__swsetup_r+0x34>
10068688:	2209      	movs	r2, #9
1006868a:	602a      	str	r2, [r5, #0]
1006868c:	2240      	movs	r2, #64	@ 0x40
1006868e:	2001      	movs	r0, #1
10068690:	4313      	orrs	r3, r2
10068692:	81a3      	strh	r3, [r4, #12]
10068694:	4240      	negs	r0, r0
10068696:	e03a      	b.n	1006870e <__swsetup_r+0xaa>
10068698:	075b      	lsls	r3, r3, #29
1006869a:	d513      	bpl.n	100686c4 <__swsetup_r+0x60>
1006869c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1006869e:	2900      	cmp	r1, #0
100686a0:	d008      	beq.n	100686b4 <__swsetup_r+0x50>
100686a2:	0023      	movs	r3, r4
100686a4:	3344      	adds	r3, #68	@ 0x44
100686a6:	4299      	cmp	r1, r3
100686a8:	d002      	beq.n	100686b0 <__swsetup_r+0x4c>
100686aa:	0028      	movs	r0, r5
100686ac:	f000 f8c4 	bl	10068838 <_free_r>
100686b0:	2300      	movs	r3, #0
100686b2:	6363      	str	r3, [r4, #52]	@ 0x34
100686b4:	2224      	movs	r2, #36	@ 0x24
100686b6:	89a3      	ldrh	r3, [r4, #12]
100686b8:	4393      	bics	r3, r2
100686ba:	81a3      	strh	r3, [r4, #12]
100686bc:	2300      	movs	r3, #0
100686be:	6063      	str	r3, [r4, #4]
100686c0:	6923      	ldr	r3, [r4, #16]
100686c2:	6023      	str	r3, [r4, #0]
100686c4:	2308      	movs	r3, #8
100686c6:	89a2      	ldrh	r2, [r4, #12]
100686c8:	4313      	orrs	r3, r2
100686ca:	81a3      	strh	r3, [r4, #12]
100686cc:	6923      	ldr	r3, [r4, #16]
100686ce:	2b00      	cmp	r3, #0
100686d0:	d10b      	bne.n	100686ea <__swsetup_r+0x86>
100686d2:	21a0      	movs	r1, #160	@ 0xa0
100686d4:	2280      	movs	r2, #128	@ 0x80
100686d6:	89a3      	ldrh	r3, [r4, #12]
100686d8:	0089      	lsls	r1, r1, #2
100686da:	0092      	lsls	r2, r2, #2
100686dc:	400b      	ands	r3, r1
100686de:	4293      	cmp	r3, r2
100686e0:	d003      	beq.n	100686ea <__swsetup_r+0x86>
100686e2:	0021      	movs	r1, r4
100686e4:	0028      	movs	r0, r5
100686e6:	f000 fca7 	bl	10069038 <__smakebuf_r>
100686ea:	220c      	movs	r2, #12
100686ec:	5ea3      	ldrsh	r3, [r4, r2]
100686ee:	2101      	movs	r1, #1
100686f0:	001a      	movs	r2, r3
100686f2:	400a      	ands	r2, r1
100686f4:	420b      	tst	r3, r1
100686f6:	d00b      	beq.n	10068710 <__swsetup_r+0xac>
100686f8:	2200      	movs	r2, #0
100686fa:	60a2      	str	r2, [r4, #8]
100686fc:	6962      	ldr	r2, [r4, #20]
100686fe:	4252      	negs	r2, r2
10068700:	61a2      	str	r2, [r4, #24]
10068702:	2000      	movs	r0, #0
10068704:	6922      	ldr	r2, [r4, #16]
10068706:	4282      	cmp	r2, r0
10068708:	d101      	bne.n	1006870e <__swsetup_r+0xaa>
1006870a:	061a      	lsls	r2, r3, #24
1006870c:	d4be      	bmi.n	1006868c <__swsetup_r+0x28>
1006870e:	bd70      	pop	{r4, r5, r6, pc}
10068710:	0799      	lsls	r1, r3, #30
10068712:	d400      	bmi.n	10068716 <__swsetup_r+0xb2>
10068714:	6962      	ldr	r2, [r4, #20]
10068716:	60a2      	str	r2, [r4, #8]
10068718:	e7f3      	b.n	10068702 <__swsetup_r+0x9e>
1006871a:	46c0      	nop			@ (mov r8, r8)
1006871c:	20002dac 	.word	0x20002dac

10068720 <memcmp>:
10068720:	b530      	push	{r4, r5, lr}
10068722:	2400      	movs	r4, #0
10068724:	3901      	subs	r1, #1
10068726:	42a2      	cmp	r2, r4
10068728:	d101      	bne.n	1006872e <memcmp+0xe>
1006872a:	2000      	movs	r0, #0
1006872c:	e005      	b.n	1006873a <memcmp+0x1a>
1006872e:	5d03      	ldrb	r3, [r0, r4]
10068730:	3401      	adds	r4, #1
10068732:	5d0d      	ldrb	r5, [r1, r4]
10068734:	42ab      	cmp	r3, r5
10068736:	d0f6      	beq.n	10068726 <memcmp+0x6>
10068738:	1b58      	subs	r0, r3, r5
1006873a:	bd30      	pop	{r4, r5, pc}

1006873c <memset>:
1006873c:	0003      	movs	r3, r0
1006873e:	1882      	adds	r2, r0, r2
10068740:	4293      	cmp	r3, r2
10068742:	d100      	bne.n	10068746 <memset+0xa>
10068744:	4770      	bx	lr
10068746:	7019      	strb	r1, [r3, #0]
10068748:	3301      	adds	r3, #1
1006874a:	e7f9      	b.n	10068740 <memset+0x4>

1006874c <_close_r>:
1006874c:	2300      	movs	r3, #0
1006874e:	b570      	push	{r4, r5, r6, lr}
10068750:	4d06      	ldr	r5, [pc, #24]	@ (1006876c <_close_r+0x20>)
10068752:	0004      	movs	r4, r0
10068754:	0008      	movs	r0, r1
10068756:	602b      	str	r3, [r5, #0]
10068758:	f7df f977 	bl	10047a4a <_close>
1006875c:	1c43      	adds	r3, r0, #1
1006875e:	d103      	bne.n	10068768 <_close_r+0x1c>
10068760:	682b      	ldr	r3, [r5, #0]
10068762:	2b00      	cmp	r3, #0
10068764:	d000      	beq.n	10068768 <_close_r+0x1c>
10068766:	6023      	str	r3, [r4, #0]
10068768:	bd70      	pop	{r4, r5, r6, pc}
1006876a:	46c0      	nop			@ (mov r8, r8)
1006876c:	20002af4 	.word	0x20002af4

10068770 <_lseek_r>:
10068770:	b570      	push	{r4, r5, r6, lr}
10068772:	0004      	movs	r4, r0
10068774:	0008      	movs	r0, r1
10068776:	0011      	movs	r1, r2
10068778:	001a      	movs	r2, r3
1006877a:	2300      	movs	r3, #0
1006877c:	4d05      	ldr	r5, [pc, #20]	@ (10068794 <_lseek_r+0x24>)
1006877e:	602b      	str	r3, [r5, #0]
10068780:	f7df f984 	bl	10047a8c <_lseek>
10068784:	1c43      	adds	r3, r0, #1
10068786:	d103      	bne.n	10068790 <_lseek_r+0x20>
10068788:	682b      	ldr	r3, [r5, #0]
1006878a:	2b00      	cmp	r3, #0
1006878c:	d000      	beq.n	10068790 <_lseek_r+0x20>
1006878e:	6023      	str	r3, [r4, #0]
10068790:	bd70      	pop	{r4, r5, r6, pc}
10068792:	46c0      	nop			@ (mov r8, r8)
10068794:	20002af4 	.word	0x20002af4

10068798 <_read_r>:
10068798:	b570      	push	{r4, r5, r6, lr}
1006879a:	0004      	movs	r4, r0
1006879c:	0008      	movs	r0, r1
1006879e:	0011      	movs	r1, r2
100687a0:	001a      	movs	r2, r3
100687a2:	2300      	movs	r3, #0
100687a4:	4d05      	ldr	r5, [pc, #20]	@ (100687bc <_read_r+0x24>)
100687a6:	602b      	str	r3, [r5, #0]
100687a8:	f7df f916 	bl	100479d8 <_read>
100687ac:	1c43      	adds	r3, r0, #1
100687ae:	d103      	bne.n	100687b8 <_read_r+0x20>
100687b0:	682b      	ldr	r3, [r5, #0]
100687b2:	2b00      	cmp	r3, #0
100687b4:	d000      	beq.n	100687b8 <_read_r+0x20>
100687b6:	6023      	str	r3, [r4, #0]
100687b8:	bd70      	pop	{r4, r5, r6, pc}
100687ba:	46c0      	nop			@ (mov r8, r8)
100687bc:	20002af4 	.word	0x20002af4

100687c0 <_sbrk_r>:
100687c0:	2300      	movs	r3, #0
100687c2:	b570      	push	{r4, r5, r6, lr}
100687c4:	4d06      	ldr	r5, [pc, #24]	@ (100687e0 <_sbrk_r+0x20>)
100687c6:	0004      	movs	r4, r0
100687c8:	0008      	movs	r0, r1
100687ca:	602b      	str	r3, [r5, #0]
100687cc:	f7df f96a 	bl	10047aa4 <_sbrk>
100687d0:	1c43      	adds	r3, r0, #1
100687d2:	d103      	bne.n	100687dc <_sbrk_r+0x1c>
100687d4:	682b      	ldr	r3, [r5, #0]
100687d6:	2b00      	cmp	r3, #0
100687d8:	d000      	beq.n	100687dc <_sbrk_r+0x1c>
100687da:	6023      	str	r3, [r4, #0]
100687dc:	bd70      	pop	{r4, r5, r6, pc}
100687de:	46c0      	nop			@ (mov r8, r8)
100687e0:	20002af4 	.word	0x20002af4

100687e4 <_write_r>:
100687e4:	b570      	push	{r4, r5, r6, lr}
100687e6:	0004      	movs	r4, r0
100687e8:	0008      	movs	r0, r1
100687ea:	0011      	movs	r1, r2
100687ec:	001a      	movs	r2, r3
100687ee:	2300      	movs	r3, #0
100687f0:	4d05      	ldr	r5, [pc, #20]	@ (10068808 <_write_r+0x24>)
100687f2:	602b      	str	r3, [r5, #0]
100687f4:	f7df f90d 	bl	10047a12 <_write>
100687f8:	1c43      	adds	r3, r0, #1
100687fa:	d103      	bne.n	10068804 <_write_r+0x20>
100687fc:	682b      	ldr	r3, [r5, #0]
100687fe:	2b00      	cmp	r3, #0
10068800:	d000      	beq.n	10068804 <_write_r+0x20>
10068802:	6023      	str	r3, [r4, #0]
10068804:	bd70      	pop	{r4, r5, r6, pc}
10068806:	46c0      	nop			@ (mov r8, r8)
10068808:	20002af4 	.word	0x20002af4

1006880c <__errno>:
1006880c:	4b01      	ldr	r3, [pc, #4]	@ (10068814 <__errno+0x8>)
1006880e:	6818      	ldr	r0, [r3, #0]
10068810:	4770      	bx	lr
10068812:	46c0      	nop			@ (mov r8, r8)
10068814:	20002dac 	.word	0x20002dac

10068818 <__retarget_lock_init_recursive>:
10068818:	4770      	bx	lr

1006881a <__retarget_lock_acquire_recursive>:
1006881a:	4770      	bx	lr

1006881c <__retarget_lock_release_recursive>:
1006881c:	4770      	bx	lr

1006881e <__aeabi_memcpy>:
1006881e:	b510      	push	{r4, lr}
10068820:	f000 f801 	bl	10068826 <memcpy>
10068824:	bd10      	pop	{r4, pc}

10068826 <memcpy>:
10068826:	2300      	movs	r3, #0
10068828:	b510      	push	{r4, lr}
1006882a:	429a      	cmp	r2, r3
1006882c:	d100      	bne.n	10068830 <memcpy+0xa>
1006882e:	bd10      	pop	{r4, pc}
10068830:	5ccc      	ldrb	r4, [r1, r3]
10068832:	54c4      	strb	r4, [r0, r3]
10068834:	3301      	adds	r3, #1
10068836:	e7f8      	b.n	1006882a <memcpy+0x4>

10068838 <_free_r>:
10068838:	b570      	push	{r4, r5, r6, lr}
1006883a:	0005      	movs	r5, r0
1006883c:	1e0c      	subs	r4, r1, #0
1006883e:	d010      	beq.n	10068862 <_free_r+0x2a>
10068840:	3c04      	subs	r4, #4
10068842:	6823      	ldr	r3, [r4, #0]
10068844:	2b00      	cmp	r3, #0
10068846:	da00      	bge.n	1006884a <_free_r+0x12>
10068848:	18e4      	adds	r4, r4, r3
1006884a:	0028      	movs	r0, r5
1006884c:	f7ff fd26 	bl	1006829c <__malloc_lock>
10068850:	4a1d      	ldr	r2, [pc, #116]	@ (100688c8 <_free_r+0x90>)
10068852:	6813      	ldr	r3, [r2, #0]
10068854:	2b00      	cmp	r3, #0
10068856:	d105      	bne.n	10068864 <_free_r+0x2c>
10068858:	6063      	str	r3, [r4, #4]
1006885a:	6014      	str	r4, [r2, #0]
1006885c:	0028      	movs	r0, r5
1006885e:	f7ff fd25 	bl	100682ac <__malloc_unlock>
10068862:	bd70      	pop	{r4, r5, r6, pc}
10068864:	42a3      	cmp	r3, r4
10068866:	d908      	bls.n	1006887a <_free_r+0x42>
10068868:	6820      	ldr	r0, [r4, #0]
1006886a:	1821      	adds	r1, r4, r0
1006886c:	428b      	cmp	r3, r1
1006886e:	d1f3      	bne.n	10068858 <_free_r+0x20>
10068870:	6819      	ldr	r1, [r3, #0]
10068872:	685b      	ldr	r3, [r3, #4]
10068874:	1809      	adds	r1, r1, r0
10068876:	6021      	str	r1, [r4, #0]
10068878:	e7ee      	b.n	10068858 <_free_r+0x20>
1006887a:	001a      	movs	r2, r3
1006887c:	685b      	ldr	r3, [r3, #4]
1006887e:	2b00      	cmp	r3, #0
10068880:	d001      	beq.n	10068886 <_free_r+0x4e>
10068882:	42a3      	cmp	r3, r4
10068884:	d9f9      	bls.n	1006887a <_free_r+0x42>
10068886:	6811      	ldr	r1, [r2, #0]
10068888:	1850      	adds	r0, r2, r1
1006888a:	42a0      	cmp	r0, r4
1006888c:	d10b      	bne.n	100688a6 <_free_r+0x6e>
1006888e:	6820      	ldr	r0, [r4, #0]
10068890:	1809      	adds	r1, r1, r0
10068892:	1850      	adds	r0, r2, r1
10068894:	6011      	str	r1, [r2, #0]
10068896:	4283      	cmp	r3, r0
10068898:	d1e0      	bne.n	1006885c <_free_r+0x24>
1006889a:	6818      	ldr	r0, [r3, #0]
1006889c:	685b      	ldr	r3, [r3, #4]
1006889e:	1841      	adds	r1, r0, r1
100688a0:	6011      	str	r1, [r2, #0]
100688a2:	6053      	str	r3, [r2, #4]
100688a4:	e7da      	b.n	1006885c <_free_r+0x24>
100688a6:	42a0      	cmp	r0, r4
100688a8:	d902      	bls.n	100688b0 <_free_r+0x78>
100688aa:	230c      	movs	r3, #12
100688ac:	602b      	str	r3, [r5, #0]
100688ae:	e7d5      	b.n	1006885c <_free_r+0x24>
100688b0:	6820      	ldr	r0, [r4, #0]
100688b2:	1821      	adds	r1, r4, r0
100688b4:	428b      	cmp	r3, r1
100688b6:	d103      	bne.n	100688c0 <_free_r+0x88>
100688b8:	6819      	ldr	r1, [r3, #0]
100688ba:	685b      	ldr	r3, [r3, #4]
100688bc:	1809      	adds	r1, r1, r0
100688be:	6021      	str	r1, [r4, #0]
100688c0:	6063      	str	r3, [r4, #4]
100688c2:	6054      	str	r4, [r2, #4]
100688c4:	e7ca      	b.n	1006885c <_free_r+0x24>
100688c6:	46c0      	nop			@ (mov r8, r8)
100688c8:	200029b4 	.word	0x200029b4

100688cc <__ssputs_r>:
100688cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100688ce:	688e      	ldr	r6, [r1, #8]
100688d0:	b085      	sub	sp, #20
100688d2:	001f      	movs	r7, r3
100688d4:	000c      	movs	r4, r1
100688d6:	680b      	ldr	r3, [r1, #0]
100688d8:	9002      	str	r0, [sp, #8]
100688da:	9203      	str	r2, [sp, #12]
100688dc:	42be      	cmp	r6, r7
100688de:	d830      	bhi.n	10068942 <__ssputs_r+0x76>
100688e0:	210c      	movs	r1, #12
100688e2:	5e62      	ldrsh	r2, [r4, r1]
100688e4:	2190      	movs	r1, #144	@ 0x90
100688e6:	00c9      	lsls	r1, r1, #3
100688e8:	420a      	tst	r2, r1
100688ea:	d028      	beq.n	1006893e <__ssputs_r+0x72>
100688ec:	2003      	movs	r0, #3
100688ee:	6921      	ldr	r1, [r4, #16]
100688f0:	1a5b      	subs	r3, r3, r1
100688f2:	9301      	str	r3, [sp, #4]
100688f4:	6963      	ldr	r3, [r4, #20]
100688f6:	4343      	muls	r3, r0
100688f8:	9801      	ldr	r0, [sp, #4]
100688fa:	0fdd      	lsrs	r5, r3, #31
100688fc:	18ed      	adds	r5, r5, r3
100688fe:	1c7b      	adds	r3, r7, #1
10068900:	181b      	adds	r3, r3, r0
10068902:	106d      	asrs	r5, r5, #1
10068904:	42ab      	cmp	r3, r5
10068906:	d900      	bls.n	1006890a <__ssputs_r+0x3e>
10068908:	001d      	movs	r5, r3
1006890a:	0552      	lsls	r2, r2, #21
1006890c:	d528      	bpl.n	10068960 <__ssputs_r+0x94>
1006890e:	0029      	movs	r1, r5
10068910:	9802      	ldr	r0, [sp, #8]
10068912:	f7ff fc43 	bl	1006819c <_malloc_r>
10068916:	1e06      	subs	r6, r0, #0
10068918:	d02c      	beq.n	10068974 <__ssputs_r+0xa8>
1006891a:	9a01      	ldr	r2, [sp, #4]
1006891c:	6921      	ldr	r1, [r4, #16]
1006891e:	f7ff ff82 	bl	10068826 <memcpy>
10068922:	89a2      	ldrh	r2, [r4, #12]
10068924:	4b18      	ldr	r3, [pc, #96]	@ (10068988 <__ssputs_r+0xbc>)
10068926:	401a      	ands	r2, r3
10068928:	2380      	movs	r3, #128	@ 0x80
1006892a:	4313      	orrs	r3, r2
1006892c:	81a3      	strh	r3, [r4, #12]
1006892e:	9b01      	ldr	r3, [sp, #4]
10068930:	6126      	str	r6, [r4, #16]
10068932:	18f6      	adds	r6, r6, r3
10068934:	6026      	str	r6, [r4, #0]
10068936:	003e      	movs	r6, r7
10068938:	6165      	str	r5, [r4, #20]
1006893a:	1aed      	subs	r5, r5, r3
1006893c:	60a5      	str	r5, [r4, #8]
1006893e:	42be      	cmp	r6, r7
10068940:	d900      	bls.n	10068944 <__ssputs_r+0x78>
10068942:	003e      	movs	r6, r7
10068944:	0032      	movs	r2, r6
10068946:	9903      	ldr	r1, [sp, #12]
10068948:	6820      	ldr	r0, [r4, #0]
1006894a:	f000 fbb6 	bl	100690ba <memmove>
1006894e:	2000      	movs	r0, #0
10068950:	68a3      	ldr	r3, [r4, #8]
10068952:	1b9b      	subs	r3, r3, r6
10068954:	60a3      	str	r3, [r4, #8]
10068956:	6823      	ldr	r3, [r4, #0]
10068958:	199b      	adds	r3, r3, r6
1006895a:	6023      	str	r3, [r4, #0]
1006895c:	b005      	add	sp, #20
1006895e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068960:	002a      	movs	r2, r5
10068962:	9802      	ldr	r0, [sp, #8]
10068964:	f000 fbeb 	bl	1006913e <_realloc_r>
10068968:	1e06      	subs	r6, r0, #0
1006896a:	d1e0      	bne.n	1006892e <__ssputs_r+0x62>
1006896c:	6921      	ldr	r1, [r4, #16]
1006896e:	9802      	ldr	r0, [sp, #8]
10068970:	f7ff ff62 	bl	10068838 <_free_r>
10068974:	230c      	movs	r3, #12
10068976:	2001      	movs	r0, #1
10068978:	9a02      	ldr	r2, [sp, #8]
1006897a:	4240      	negs	r0, r0
1006897c:	6013      	str	r3, [r2, #0]
1006897e:	89a2      	ldrh	r2, [r4, #12]
10068980:	3334      	adds	r3, #52	@ 0x34
10068982:	4313      	orrs	r3, r2
10068984:	81a3      	strh	r3, [r4, #12]
10068986:	e7e9      	b.n	1006895c <__ssputs_r+0x90>
10068988:	fffffb7f 	.word	0xfffffb7f

1006898c <_svfiprintf_r>:
1006898c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006898e:	b0a1      	sub	sp, #132	@ 0x84
10068990:	9003      	str	r0, [sp, #12]
10068992:	001d      	movs	r5, r3
10068994:	898b      	ldrh	r3, [r1, #12]
10068996:	000f      	movs	r7, r1
10068998:	0016      	movs	r6, r2
1006899a:	061b      	lsls	r3, r3, #24
1006899c:	d511      	bpl.n	100689c2 <_svfiprintf_r+0x36>
1006899e:	690b      	ldr	r3, [r1, #16]
100689a0:	2b00      	cmp	r3, #0
100689a2:	d10e      	bne.n	100689c2 <_svfiprintf_r+0x36>
100689a4:	2140      	movs	r1, #64	@ 0x40
100689a6:	f7ff fbf9 	bl	1006819c <_malloc_r>
100689aa:	6038      	str	r0, [r7, #0]
100689ac:	6138      	str	r0, [r7, #16]
100689ae:	2800      	cmp	r0, #0
100689b0:	d105      	bne.n	100689be <_svfiprintf_r+0x32>
100689b2:	230c      	movs	r3, #12
100689b4:	9a03      	ldr	r2, [sp, #12]
100689b6:	6013      	str	r3, [r2, #0]
100689b8:	2001      	movs	r0, #1
100689ba:	4240      	negs	r0, r0
100689bc:	e0cf      	b.n	10068b5e <_svfiprintf_r+0x1d2>
100689be:	2340      	movs	r3, #64	@ 0x40
100689c0:	617b      	str	r3, [r7, #20]
100689c2:	2300      	movs	r3, #0
100689c4:	ac08      	add	r4, sp, #32
100689c6:	6163      	str	r3, [r4, #20]
100689c8:	3320      	adds	r3, #32
100689ca:	7663      	strb	r3, [r4, #25]
100689cc:	3310      	adds	r3, #16
100689ce:	76a3      	strb	r3, [r4, #26]
100689d0:	9507      	str	r5, [sp, #28]
100689d2:	0035      	movs	r5, r6
100689d4:	782b      	ldrb	r3, [r5, #0]
100689d6:	2b00      	cmp	r3, #0
100689d8:	d001      	beq.n	100689de <_svfiprintf_r+0x52>
100689da:	2b25      	cmp	r3, #37	@ 0x25
100689dc:	d148      	bne.n	10068a70 <_svfiprintf_r+0xe4>
100689de:	1bab      	subs	r3, r5, r6
100689e0:	9305      	str	r3, [sp, #20]
100689e2:	42b5      	cmp	r5, r6
100689e4:	d00b      	beq.n	100689fe <_svfiprintf_r+0x72>
100689e6:	0032      	movs	r2, r6
100689e8:	0039      	movs	r1, r7
100689ea:	9803      	ldr	r0, [sp, #12]
100689ec:	f7ff ff6e 	bl	100688cc <__ssputs_r>
100689f0:	3001      	adds	r0, #1
100689f2:	d100      	bne.n	100689f6 <_svfiprintf_r+0x6a>
100689f4:	e0ae      	b.n	10068b54 <_svfiprintf_r+0x1c8>
100689f6:	6963      	ldr	r3, [r4, #20]
100689f8:	9a05      	ldr	r2, [sp, #20]
100689fa:	189b      	adds	r3, r3, r2
100689fc:	6163      	str	r3, [r4, #20]
100689fe:	782b      	ldrb	r3, [r5, #0]
10068a00:	2b00      	cmp	r3, #0
10068a02:	d100      	bne.n	10068a06 <_svfiprintf_r+0x7a>
10068a04:	e0a6      	b.n	10068b54 <_svfiprintf_r+0x1c8>
10068a06:	2201      	movs	r2, #1
10068a08:	2300      	movs	r3, #0
10068a0a:	4252      	negs	r2, r2
10068a0c:	6062      	str	r2, [r4, #4]
10068a0e:	a904      	add	r1, sp, #16
10068a10:	3254      	adds	r2, #84	@ 0x54
10068a12:	1852      	adds	r2, r2, r1
10068a14:	1c6e      	adds	r6, r5, #1
10068a16:	6023      	str	r3, [r4, #0]
10068a18:	60e3      	str	r3, [r4, #12]
10068a1a:	60a3      	str	r3, [r4, #8]
10068a1c:	7013      	strb	r3, [r2, #0]
10068a1e:	65a3      	str	r3, [r4, #88]	@ 0x58
10068a20:	4b54      	ldr	r3, [pc, #336]	@ (10068b74 <_svfiprintf_r+0x1e8>)
10068a22:	2205      	movs	r2, #5
10068a24:	0018      	movs	r0, r3
10068a26:	7831      	ldrb	r1, [r6, #0]
10068a28:	9305      	str	r3, [sp, #20]
10068a2a:	f000 fb7d 	bl	10069128 <memchr>
10068a2e:	1c75      	adds	r5, r6, #1
10068a30:	2800      	cmp	r0, #0
10068a32:	d11f      	bne.n	10068a74 <_svfiprintf_r+0xe8>
10068a34:	6822      	ldr	r2, [r4, #0]
10068a36:	06d3      	lsls	r3, r2, #27
10068a38:	d504      	bpl.n	10068a44 <_svfiprintf_r+0xb8>
10068a3a:	2353      	movs	r3, #83	@ 0x53
10068a3c:	a904      	add	r1, sp, #16
10068a3e:	185b      	adds	r3, r3, r1
10068a40:	2120      	movs	r1, #32
10068a42:	7019      	strb	r1, [r3, #0]
10068a44:	0713      	lsls	r3, r2, #28
10068a46:	d504      	bpl.n	10068a52 <_svfiprintf_r+0xc6>
10068a48:	2353      	movs	r3, #83	@ 0x53
10068a4a:	a904      	add	r1, sp, #16
10068a4c:	185b      	adds	r3, r3, r1
10068a4e:	212b      	movs	r1, #43	@ 0x2b
10068a50:	7019      	strb	r1, [r3, #0]
10068a52:	7833      	ldrb	r3, [r6, #0]
10068a54:	2b2a      	cmp	r3, #42	@ 0x2a
10068a56:	d016      	beq.n	10068a86 <_svfiprintf_r+0xfa>
10068a58:	0035      	movs	r5, r6
10068a5a:	2100      	movs	r1, #0
10068a5c:	200a      	movs	r0, #10
10068a5e:	68e3      	ldr	r3, [r4, #12]
10068a60:	782a      	ldrb	r2, [r5, #0]
10068a62:	1c6e      	adds	r6, r5, #1
10068a64:	3a30      	subs	r2, #48	@ 0x30
10068a66:	2a09      	cmp	r2, #9
10068a68:	d950      	bls.n	10068b0c <_svfiprintf_r+0x180>
10068a6a:	2900      	cmp	r1, #0
10068a6c:	d111      	bne.n	10068a92 <_svfiprintf_r+0x106>
10068a6e:	e017      	b.n	10068aa0 <_svfiprintf_r+0x114>
10068a70:	3501      	adds	r5, #1
10068a72:	e7af      	b.n	100689d4 <_svfiprintf_r+0x48>
10068a74:	9b05      	ldr	r3, [sp, #20]
10068a76:	6822      	ldr	r2, [r4, #0]
10068a78:	1ac0      	subs	r0, r0, r3
10068a7a:	2301      	movs	r3, #1
10068a7c:	4083      	lsls	r3, r0
10068a7e:	4313      	orrs	r3, r2
10068a80:	002e      	movs	r6, r5
10068a82:	6023      	str	r3, [r4, #0]
10068a84:	e7cc      	b.n	10068a20 <_svfiprintf_r+0x94>
10068a86:	9b07      	ldr	r3, [sp, #28]
10068a88:	1d19      	adds	r1, r3, #4
10068a8a:	681b      	ldr	r3, [r3, #0]
10068a8c:	9107      	str	r1, [sp, #28]
10068a8e:	2b00      	cmp	r3, #0
10068a90:	db01      	blt.n	10068a96 <_svfiprintf_r+0x10a>
10068a92:	930b      	str	r3, [sp, #44]	@ 0x2c
10068a94:	e004      	b.n	10068aa0 <_svfiprintf_r+0x114>
10068a96:	425b      	negs	r3, r3
10068a98:	60e3      	str	r3, [r4, #12]
10068a9a:	2302      	movs	r3, #2
10068a9c:	4313      	orrs	r3, r2
10068a9e:	6023      	str	r3, [r4, #0]
10068aa0:	782b      	ldrb	r3, [r5, #0]
10068aa2:	2b2e      	cmp	r3, #46	@ 0x2e
10068aa4:	d10c      	bne.n	10068ac0 <_svfiprintf_r+0x134>
10068aa6:	786b      	ldrb	r3, [r5, #1]
10068aa8:	2b2a      	cmp	r3, #42	@ 0x2a
10068aaa:	d134      	bne.n	10068b16 <_svfiprintf_r+0x18a>
10068aac:	9b07      	ldr	r3, [sp, #28]
10068aae:	3502      	adds	r5, #2
10068ab0:	1d1a      	adds	r2, r3, #4
10068ab2:	681b      	ldr	r3, [r3, #0]
10068ab4:	9207      	str	r2, [sp, #28]
10068ab6:	2b00      	cmp	r3, #0
10068ab8:	da01      	bge.n	10068abe <_svfiprintf_r+0x132>
10068aba:	2301      	movs	r3, #1
10068abc:	425b      	negs	r3, r3
10068abe:	9309      	str	r3, [sp, #36]	@ 0x24
10068ac0:	4e2d      	ldr	r6, [pc, #180]	@ (10068b78 <_svfiprintf_r+0x1ec>)
10068ac2:	2203      	movs	r2, #3
10068ac4:	0030      	movs	r0, r6
10068ac6:	7829      	ldrb	r1, [r5, #0]
10068ac8:	f000 fb2e 	bl	10069128 <memchr>
10068acc:	2800      	cmp	r0, #0
10068ace:	d006      	beq.n	10068ade <_svfiprintf_r+0x152>
10068ad0:	2340      	movs	r3, #64	@ 0x40
10068ad2:	1b80      	subs	r0, r0, r6
10068ad4:	4083      	lsls	r3, r0
10068ad6:	6822      	ldr	r2, [r4, #0]
10068ad8:	3501      	adds	r5, #1
10068ada:	4313      	orrs	r3, r2
10068adc:	6023      	str	r3, [r4, #0]
10068ade:	7829      	ldrb	r1, [r5, #0]
10068ae0:	2206      	movs	r2, #6
10068ae2:	4826      	ldr	r0, [pc, #152]	@ (10068b7c <_svfiprintf_r+0x1f0>)
10068ae4:	1c6e      	adds	r6, r5, #1
10068ae6:	7621      	strb	r1, [r4, #24]
10068ae8:	f000 fb1e 	bl	10069128 <memchr>
10068aec:	2800      	cmp	r0, #0
10068aee:	d038      	beq.n	10068b62 <_svfiprintf_r+0x1d6>
10068af0:	4b23      	ldr	r3, [pc, #140]	@ (10068b80 <_svfiprintf_r+0x1f4>)
10068af2:	2b00      	cmp	r3, #0
10068af4:	d122      	bne.n	10068b3c <_svfiprintf_r+0x1b0>
10068af6:	2207      	movs	r2, #7
10068af8:	9b07      	ldr	r3, [sp, #28]
10068afa:	3307      	adds	r3, #7
10068afc:	4393      	bics	r3, r2
10068afe:	3308      	adds	r3, #8
10068b00:	9307      	str	r3, [sp, #28]
10068b02:	6963      	ldr	r3, [r4, #20]
10068b04:	9a04      	ldr	r2, [sp, #16]
10068b06:	189b      	adds	r3, r3, r2
10068b08:	6163      	str	r3, [r4, #20]
10068b0a:	e762      	b.n	100689d2 <_svfiprintf_r+0x46>
10068b0c:	4343      	muls	r3, r0
10068b0e:	0035      	movs	r5, r6
10068b10:	2101      	movs	r1, #1
10068b12:	189b      	adds	r3, r3, r2
10068b14:	e7a4      	b.n	10068a60 <_svfiprintf_r+0xd4>
10068b16:	2300      	movs	r3, #0
10068b18:	200a      	movs	r0, #10
10068b1a:	0019      	movs	r1, r3
10068b1c:	3501      	adds	r5, #1
10068b1e:	6063      	str	r3, [r4, #4]
10068b20:	782a      	ldrb	r2, [r5, #0]
10068b22:	1c6e      	adds	r6, r5, #1
10068b24:	3a30      	subs	r2, #48	@ 0x30
10068b26:	2a09      	cmp	r2, #9
10068b28:	d903      	bls.n	10068b32 <_svfiprintf_r+0x1a6>
10068b2a:	2b00      	cmp	r3, #0
10068b2c:	d0c8      	beq.n	10068ac0 <_svfiprintf_r+0x134>
10068b2e:	9109      	str	r1, [sp, #36]	@ 0x24
10068b30:	e7c6      	b.n	10068ac0 <_svfiprintf_r+0x134>
10068b32:	4341      	muls	r1, r0
10068b34:	0035      	movs	r5, r6
10068b36:	2301      	movs	r3, #1
10068b38:	1889      	adds	r1, r1, r2
10068b3a:	e7f1      	b.n	10068b20 <_svfiprintf_r+0x194>
10068b3c:	aa07      	add	r2, sp, #28
10068b3e:	9200      	str	r2, [sp, #0]
10068b40:	0021      	movs	r1, r4
10068b42:	003a      	movs	r2, r7
10068b44:	4b0f      	ldr	r3, [pc, #60]	@ (10068b84 <_svfiprintf_r+0x1f8>)
10068b46:	9803      	ldr	r0, [sp, #12]
10068b48:	e000      	b.n	10068b4c <_svfiprintf_r+0x1c0>
10068b4a:	bf00      	nop
10068b4c:	9004      	str	r0, [sp, #16]
10068b4e:	9b04      	ldr	r3, [sp, #16]
10068b50:	3301      	adds	r3, #1
10068b52:	d1d6      	bne.n	10068b02 <_svfiprintf_r+0x176>
10068b54:	89bb      	ldrh	r3, [r7, #12]
10068b56:	980d      	ldr	r0, [sp, #52]	@ 0x34
10068b58:	065b      	lsls	r3, r3, #25
10068b5a:	d500      	bpl.n	10068b5e <_svfiprintf_r+0x1d2>
10068b5c:	e72c      	b.n	100689b8 <_svfiprintf_r+0x2c>
10068b5e:	b021      	add	sp, #132	@ 0x84
10068b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068b62:	aa07      	add	r2, sp, #28
10068b64:	9200      	str	r2, [sp, #0]
10068b66:	0021      	movs	r1, r4
10068b68:	003a      	movs	r2, r7
10068b6a:	4b06      	ldr	r3, [pc, #24]	@ (10068b84 <_svfiprintf_r+0x1f8>)
10068b6c:	9803      	ldr	r0, [sp, #12]
10068b6e:	f000 f87b 	bl	10068c68 <_printf_i>
10068b72:	e7eb      	b.n	10068b4c <_svfiprintf_r+0x1c0>
10068b74:	1006a5c1 	.word	0x1006a5c1
10068b78:	1006a5c7 	.word	0x1006a5c7
10068b7c:	1006a5cb 	.word	0x1006a5cb
10068b80:	00000000 	.word	0x00000000
10068b84:	100688cd 	.word	0x100688cd

10068b88 <_printf_common>:
10068b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10068b8a:	0016      	movs	r6, r2
10068b8c:	9301      	str	r3, [sp, #4]
10068b8e:	688a      	ldr	r2, [r1, #8]
10068b90:	690b      	ldr	r3, [r1, #16]
10068b92:	000c      	movs	r4, r1
10068b94:	9000      	str	r0, [sp, #0]
10068b96:	4293      	cmp	r3, r2
10068b98:	da00      	bge.n	10068b9c <_printf_common+0x14>
10068b9a:	0013      	movs	r3, r2
10068b9c:	0022      	movs	r2, r4
10068b9e:	6033      	str	r3, [r6, #0]
10068ba0:	3243      	adds	r2, #67	@ 0x43
10068ba2:	7812      	ldrb	r2, [r2, #0]
10068ba4:	2a00      	cmp	r2, #0
10068ba6:	d001      	beq.n	10068bac <_printf_common+0x24>
10068ba8:	3301      	adds	r3, #1
10068baa:	6033      	str	r3, [r6, #0]
10068bac:	6823      	ldr	r3, [r4, #0]
10068bae:	069b      	lsls	r3, r3, #26
10068bb0:	d502      	bpl.n	10068bb8 <_printf_common+0x30>
10068bb2:	6833      	ldr	r3, [r6, #0]
10068bb4:	3302      	adds	r3, #2
10068bb6:	6033      	str	r3, [r6, #0]
10068bb8:	6822      	ldr	r2, [r4, #0]
10068bba:	2306      	movs	r3, #6
10068bbc:	0015      	movs	r5, r2
10068bbe:	401d      	ands	r5, r3
10068bc0:	421a      	tst	r2, r3
10068bc2:	d027      	beq.n	10068c14 <_printf_common+0x8c>
10068bc4:	0023      	movs	r3, r4
10068bc6:	3343      	adds	r3, #67	@ 0x43
10068bc8:	781b      	ldrb	r3, [r3, #0]
10068bca:	1e5a      	subs	r2, r3, #1
10068bcc:	4193      	sbcs	r3, r2
10068bce:	6822      	ldr	r2, [r4, #0]
10068bd0:	0692      	lsls	r2, r2, #26
10068bd2:	d430      	bmi.n	10068c36 <_printf_common+0xae>
10068bd4:	0022      	movs	r2, r4
10068bd6:	9901      	ldr	r1, [sp, #4]
10068bd8:	9800      	ldr	r0, [sp, #0]
10068bda:	9d08      	ldr	r5, [sp, #32]
10068bdc:	3243      	adds	r2, #67	@ 0x43
10068bde:	47a8      	blx	r5
10068be0:	3001      	adds	r0, #1
10068be2:	d025      	beq.n	10068c30 <_printf_common+0xa8>
10068be4:	2206      	movs	r2, #6
10068be6:	6823      	ldr	r3, [r4, #0]
10068be8:	2500      	movs	r5, #0
10068bea:	4013      	ands	r3, r2
10068bec:	2b04      	cmp	r3, #4
10068bee:	d105      	bne.n	10068bfc <_printf_common+0x74>
10068bf0:	6833      	ldr	r3, [r6, #0]
10068bf2:	68e5      	ldr	r5, [r4, #12]
10068bf4:	1aed      	subs	r5, r5, r3
10068bf6:	43eb      	mvns	r3, r5
10068bf8:	17db      	asrs	r3, r3, #31
10068bfa:	401d      	ands	r5, r3
10068bfc:	68a3      	ldr	r3, [r4, #8]
10068bfe:	6922      	ldr	r2, [r4, #16]
10068c00:	4293      	cmp	r3, r2
10068c02:	dd01      	ble.n	10068c08 <_printf_common+0x80>
10068c04:	1a9b      	subs	r3, r3, r2
10068c06:	18ed      	adds	r5, r5, r3
10068c08:	2600      	movs	r6, #0
10068c0a:	42b5      	cmp	r5, r6
10068c0c:	d120      	bne.n	10068c50 <_printf_common+0xc8>
10068c0e:	2000      	movs	r0, #0
10068c10:	e010      	b.n	10068c34 <_printf_common+0xac>
10068c12:	3501      	adds	r5, #1
10068c14:	68e3      	ldr	r3, [r4, #12]
10068c16:	6832      	ldr	r2, [r6, #0]
10068c18:	1a9b      	subs	r3, r3, r2
10068c1a:	42ab      	cmp	r3, r5
10068c1c:	ddd2      	ble.n	10068bc4 <_printf_common+0x3c>
10068c1e:	0022      	movs	r2, r4
10068c20:	2301      	movs	r3, #1
10068c22:	9901      	ldr	r1, [sp, #4]
10068c24:	9800      	ldr	r0, [sp, #0]
10068c26:	9f08      	ldr	r7, [sp, #32]
10068c28:	3219      	adds	r2, #25
10068c2a:	47b8      	blx	r7
10068c2c:	3001      	adds	r0, #1
10068c2e:	d1f0      	bne.n	10068c12 <_printf_common+0x8a>
10068c30:	2001      	movs	r0, #1
10068c32:	4240      	negs	r0, r0
10068c34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10068c36:	2030      	movs	r0, #48	@ 0x30
10068c38:	18e1      	adds	r1, r4, r3
10068c3a:	3143      	adds	r1, #67	@ 0x43
10068c3c:	7008      	strb	r0, [r1, #0]
10068c3e:	0021      	movs	r1, r4
10068c40:	1c5a      	adds	r2, r3, #1
10068c42:	3145      	adds	r1, #69	@ 0x45
10068c44:	7809      	ldrb	r1, [r1, #0]
10068c46:	18a2      	adds	r2, r4, r2
10068c48:	3243      	adds	r2, #67	@ 0x43
10068c4a:	3302      	adds	r3, #2
10068c4c:	7011      	strb	r1, [r2, #0]
10068c4e:	e7c1      	b.n	10068bd4 <_printf_common+0x4c>
10068c50:	0022      	movs	r2, r4
10068c52:	2301      	movs	r3, #1
10068c54:	9901      	ldr	r1, [sp, #4]
10068c56:	9800      	ldr	r0, [sp, #0]
10068c58:	9f08      	ldr	r7, [sp, #32]
10068c5a:	321a      	adds	r2, #26
10068c5c:	47b8      	blx	r7
10068c5e:	3001      	adds	r0, #1
10068c60:	d0e6      	beq.n	10068c30 <_printf_common+0xa8>
10068c62:	3601      	adds	r6, #1
10068c64:	e7d1      	b.n	10068c0a <_printf_common+0x82>
	...

10068c68 <_printf_i>:
10068c68:	b5f0      	push	{r4, r5, r6, r7, lr}
10068c6a:	b08b      	sub	sp, #44	@ 0x2c
10068c6c:	9206      	str	r2, [sp, #24]
10068c6e:	000a      	movs	r2, r1
10068c70:	3243      	adds	r2, #67	@ 0x43
10068c72:	9307      	str	r3, [sp, #28]
10068c74:	9005      	str	r0, [sp, #20]
10068c76:	9203      	str	r2, [sp, #12]
10068c78:	7e0a      	ldrb	r2, [r1, #24]
10068c7a:	000c      	movs	r4, r1
10068c7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10068c7e:	2a78      	cmp	r2, #120	@ 0x78
10068c80:	d809      	bhi.n	10068c96 <_printf_i+0x2e>
10068c82:	2a62      	cmp	r2, #98	@ 0x62
10068c84:	d80b      	bhi.n	10068c9e <_printf_i+0x36>
10068c86:	2a00      	cmp	r2, #0
10068c88:	d100      	bne.n	10068c8c <_printf_i+0x24>
10068c8a:	e0ba      	b.n	10068e02 <_printf_i+0x19a>
10068c8c:	497a      	ldr	r1, [pc, #488]	@ (10068e78 <_printf_i+0x210>)
10068c8e:	9104      	str	r1, [sp, #16]
10068c90:	2a58      	cmp	r2, #88	@ 0x58
10068c92:	d100      	bne.n	10068c96 <_printf_i+0x2e>
10068c94:	e08e      	b.n	10068db4 <_printf_i+0x14c>
10068c96:	0025      	movs	r5, r4
10068c98:	3542      	adds	r5, #66	@ 0x42
10068c9a:	702a      	strb	r2, [r5, #0]
10068c9c:	e022      	b.n	10068ce4 <_printf_i+0x7c>
10068c9e:	0010      	movs	r0, r2
10068ca0:	3863      	subs	r0, #99	@ 0x63
10068ca2:	2815      	cmp	r0, #21
10068ca4:	d8f7      	bhi.n	10068c96 <_printf_i+0x2e>
10068ca6:	f7d7 fac1 	bl	1004022c <__gnu_thumb1_case_shi>
10068caa:	0016      	.short	0x0016
10068cac:	fff6001f 	.word	0xfff6001f
10068cb0:	fff6fff6 	.word	0xfff6fff6
10068cb4:	001ffff6 	.word	0x001ffff6
10068cb8:	fff6fff6 	.word	0xfff6fff6
10068cbc:	fff6fff6 	.word	0xfff6fff6
10068cc0:	0036009f 	.word	0x0036009f
10068cc4:	fff6007e 	.word	0xfff6007e
10068cc8:	00b0fff6 	.word	0x00b0fff6
10068ccc:	0036fff6 	.word	0x0036fff6
10068cd0:	fff6fff6 	.word	0xfff6fff6
10068cd4:	0082      	.short	0x0082
10068cd6:	0025      	movs	r5, r4
10068cd8:	681a      	ldr	r2, [r3, #0]
10068cda:	3542      	adds	r5, #66	@ 0x42
10068cdc:	1d11      	adds	r1, r2, #4
10068cde:	6019      	str	r1, [r3, #0]
10068ce0:	6813      	ldr	r3, [r2, #0]
10068ce2:	702b      	strb	r3, [r5, #0]
10068ce4:	2301      	movs	r3, #1
10068ce6:	e09e      	b.n	10068e26 <_printf_i+0x1be>
10068ce8:	6818      	ldr	r0, [r3, #0]
10068cea:	6809      	ldr	r1, [r1, #0]
10068cec:	1d02      	adds	r2, r0, #4
10068cee:	060d      	lsls	r5, r1, #24
10068cf0:	d50b      	bpl.n	10068d0a <_printf_i+0xa2>
10068cf2:	6806      	ldr	r6, [r0, #0]
10068cf4:	601a      	str	r2, [r3, #0]
10068cf6:	2e00      	cmp	r6, #0
10068cf8:	da03      	bge.n	10068d02 <_printf_i+0x9a>
10068cfa:	232d      	movs	r3, #45	@ 0x2d
10068cfc:	9a03      	ldr	r2, [sp, #12]
10068cfe:	4276      	negs	r6, r6
10068d00:	7013      	strb	r3, [r2, #0]
10068d02:	4b5d      	ldr	r3, [pc, #372]	@ (10068e78 <_printf_i+0x210>)
10068d04:	270a      	movs	r7, #10
10068d06:	9304      	str	r3, [sp, #16]
10068d08:	e018      	b.n	10068d3c <_printf_i+0xd4>
10068d0a:	6806      	ldr	r6, [r0, #0]
10068d0c:	601a      	str	r2, [r3, #0]
10068d0e:	0649      	lsls	r1, r1, #25
10068d10:	d5f1      	bpl.n	10068cf6 <_printf_i+0x8e>
10068d12:	b236      	sxth	r6, r6
10068d14:	e7ef      	b.n	10068cf6 <_printf_i+0x8e>
10068d16:	6808      	ldr	r0, [r1, #0]
10068d18:	6819      	ldr	r1, [r3, #0]
10068d1a:	c940      	ldmia	r1!, {r6}
10068d1c:	0605      	lsls	r5, r0, #24
10068d1e:	d402      	bmi.n	10068d26 <_printf_i+0xbe>
10068d20:	0640      	lsls	r0, r0, #25
10068d22:	d500      	bpl.n	10068d26 <_printf_i+0xbe>
10068d24:	b2b6      	uxth	r6, r6
10068d26:	6019      	str	r1, [r3, #0]
10068d28:	4b53      	ldr	r3, [pc, #332]	@ (10068e78 <_printf_i+0x210>)
10068d2a:	270a      	movs	r7, #10
10068d2c:	9304      	str	r3, [sp, #16]
10068d2e:	2a6f      	cmp	r2, #111	@ 0x6f
10068d30:	d100      	bne.n	10068d34 <_printf_i+0xcc>
10068d32:	3f02      	subs	r7, #2
10068d34:	0023      	movs	r3, r4
10068d36:	2200      	movs	r2, #0
10068d38:	3343      	adds	r3, #67	@ 0x43
10068d3a:	701a      	strb	r2, [r3, #0]
10068d3c:	6863      	ldr	r3, [r4, #4]
10068d3e:	60a3      	str	r3, [r4, #8]
10068d40:	2b00      	cmp	r3, #0
10068d42:	db06      	blt.n	10068d52 <_printf_i+0xea>
10068d44:	2104      	movs	r1, #4
10068d46:	6822      	ldr	r2, [r4, #0]
10068d48:	9d03      	ldr	r5, [sp, #12]
10068d4a:	438a      	bics	r2, r1
10068d4c:	6022      	str	r2, [r4, #0]
10068d4e:	4333      	orrs	r3, r6
10068d50:	d00c      	beq.n	10068d6c <_printf_i+0x104>
10068d52:	9d03      	ldr	r5, [sp, #12]
10068d54:	0030      	movs	r0, r6
10068d56:	0039      	movs	r1, r7
10068d58:	f7d7 faf8 	bl	1004034c <__aeabi_uidivmod>
10068d5c:	9b04      	ldr	r3, [sp, #16]
10068d5e:	3d01      	subs	r5, #1
10068d60:	5c5b      	ldrb	r3, [r3, r1]
10068d62:	702b      	strb	r3, [r5, #0]
10068d64:	0033      	movs	r3, r6
10068d66:	0006      	movs	r6, r0
10068d68:	429f      	cmp	r7, r3
10068d6a:	d9f3      	bls.n	10068d54 <_printf_i+0xec>
10068d6c:	2f08      	cmp	r7, #8
10068d6e:	d109      	bne.n	10068d84 <_printf_i+0x11c>
10068d70:	6823      	ldr	r3, [r4, #0]
10068d72:	07db      	lsls	r3, r3, #31
10068d74:	d506      	bpl.n	10068d84 <_printf_i+0x11c>
10068d76:	6862      	ldr	r2, [r4, #4]
10068d78:	6923      	ldr	r3, [r4, #16]
10068d7a:	429a      	cmp	r2, r3
10068d7c:	dc02      	bgt.n	10068d84 <_printf_i+0x11c>
10068d7e:	2330      	movs	r3, #48	@ 0x30
10068d80:	3d01      	subs	r5, #1
10068d82:	702b      	strb	r3, [r5, #0]
10068d84:	9b03      	ldr	r3, [sp, #12]
10068d86:	1b5b      	subs	r3, r3, r5
10068d88:	6123      	str	r3, [r4, #16]
10068d8a:	9b07      	ldr	r3, [sp, #28]
10068d8c:	0021      	movs	r1, r4
10068d8e:	9300      	str	r3, [sp, #0]
10068d90:	9805      	ldr	r0, [sp, #20]
10068d92:	9b06      	ldr	r3, [sp, #24]
10068d94:	aa09      	add	r2, sp, #36	@ 0x24
10068d96:	f7ff fef7 	bl	10068b88 <_printf_common>
10068d9a:	3001      	adds	r0, #1
10068d9c:	d148      	bne.n	10068e30 <_printf_i+0x1c8>
10068d9e:	2001      	movs	r0, #1
10068da0:	4240      	negs	r0, r0
10068da2:	b00b      	add	sp, #44	@ 0x2c
10068da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068da6:	2220      	movs	r2, #32
10068da8:	6809      	ldr	r1, [r1, #0]
10068daa:	430a      	orrs	r2, r1
10068dac:	6022      	str	r2, [r4, #0]
10068dae:	2278      	movs	r2, #120	@ 0x78
10068db0:	4932      	ldr	r1, [pc, #200]	@ (10068e7c <_printf_i+0x214>)
10068db2:	9104      	str	r1, [sp, #16]
10068db4:	0021      	movs	r1, r4
10068db6:	3145      	adds	r1, #69	@ 0x45
10068db8:	700a      	strb	r2, [r1, #0]
10068dba:	6819      	ldr	r1, [r3, #0]
10068dbc:	6822      	ldr	r2, [r4, #0]
10068dbe:	c940      	ldmia	r1!, {r6}
10068dc0:	0610      	lsls	r0, r2, #24
10068dc2:	d402      	bmi.n	10068dca <_printf_i+0x162>
10068dc4:	0650      	lsls	r0, r2, #25
10068dc6:	d500      	bpl.n	10068dca <_printf_i+0x162>
10068dc8:	b2b6      	uxth	r6, r6
10068dca:	6019      	str	r1, [r3, #0]
10068dcc:	07d3      	lsls	r3, r2, #31
10068dce:	d502      	bpl.n	10068dd6 <_printf_i+0x16e>
10068dd0:	2320      	movs	r3, #32
10068dd2:	4313      	orrs	r3, r2
10068dd4:	6023      	str	r3, [r4, #0]
10068dd6:	2e00      	cmp	r6, #0
10068dd8:	d001      	beq.n	10068dde <_printf_i+0x176>
10068dda:	2710      	movs	r7, #16
10068ddc:	e7aa      	b.n	10068d34 <_printf_i+0xcc>
10068dde:	2220      	movs	r2, #32
10068de0:	6823      	ldr	r3, [r4, #0]
10068de2:	4393      	bics	r3, r2
10068de4:	6023      	str	r3, [r4, #0]
10068de6:	e7f8      	b.n	10068dda <_printf_i+0x172>
10068de8:	681a      	ldr	r2, [r3, #0]
10068dea:	680d      	ldr	r5, [r1, #0]
10068dec:	1d10      	adds	r0, r2, #4
10068dee:	6949      	ldr	r1, [r1, #20]
10068df0:	6018      	str	r0, [r3, #0]
10068df2:	6813      	ldr	r3, [r2, #0]
10068df4:	062e      	lsls	r6, r5, #24
10068df6:	d501      	bpl.n	10068dfc <_printf_i+0x194>
10068df8:	6019      	str	r1, [r3, #0]
10068dfa:	e002      	b.n	10068e02 <_printf_i+0x19a>
10068dfc:	066d      	lsls	r5, r5, #25
10068dfe:	d5fb      	bpl.n	10068df8 <_printf_i+0x190>
10068e00:	8019      	strh	r1, [r3, #0]
10068e02:	2300      	movs	r3, #0
10068e04:	9d03      	ldr	r5, [sp, #12]
10068e06:	6123      	str	r3, [r4, #16]
10068e08:	e7bf      	b.n	10068d8a <_printf_i+0x122>
10068e0a:	681a      	ldr	r2, [r3, #0]
10068e0c:	1d11      	adds	r1, r2, #4
10068e0e:	6019      	str	r1, [r3, #0]
10068e10:	6815      	ldr	r5, [r2, #0]
10068e12:	2100      	movs	r1, #0
10068e14:	0028      	movs	r0, r5
10068e16:	6862      	ldr	r2, [r4, #4]
10068e18:	f000 f986 	bl	10069128 <memchr>
10068e1c:	2800      	cmp	r0, #0
10068e1e:	d001      	beq.n	10068e24 <_printf_i+0x1bc>
10068e20:	1b40      	subs	r0, r0, r5
10068e22:	6060      	str	r0, [r4, #4]
10068e24:	6863      	ldr	r3, [r4, #4]
10068e26:	6123      	str	r3, [r4, #16]
10068e28:	2300      	movs	r3, #0
10068e2a:	9a03      	ldr	r2, [sp, #12]
10068e2c:	7013      	strb	r3, [r2, #0]
10068e2e:	e7ac      	b.n	10068d8a <_printf_i+0x122>
10068e30:	002a      	movs	r2, r5
10068e32:	6923      	ldr	r3, [r4, #16]
10068e34:	9906      	ldr	r1, [sp, #24]
10068e36:	9805      	ldr	r0, [sp, #20]
10068e38:	9d07      	ldr	r5, [sp, #28]
10068e3a:	47a8      	blx	r5
10068e3c:	3001      	adds	r0, #1
10068e3e:	d0ae      	beq.n	10068d9e <_printf_i+0x136>
10068e40:	6823      	ldr	r3, [r4, #0]
10068e42:	079b      	lsls	r3, r3, #30
10068e44:	d415      	bmi.n	10068e72 <_printf_i+0x20a>
10068e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10068e48:	68e0      	ldr	r0, [r4, #12]
10068e4a:	4298      	cmp	r0, r3
10068e4c:	daa9      	bge.n	10068da2 <_printf_i+0x13a>
10068e4e:	0018      	movs	r0, r3
10068e50:	e7a7      	b.n	10068da2 <_printf_i+0x13a>
10068e52:	0022      	movs	r2, r4
10068e54:	2301      	movs	r3, #1
10068e56:	9906      	ldr	r1, [sp, #24]
10068e58:	9805      	ldr	r0, [sp, #20]
10068e5a:	9e07      	ldr	r6, [sp, #28]
10068e5c:	3219      	adds	r2, #25
10068e5e:	47b0      	blx	r6
10068e60:	3001      	adds	r0, #1
10068e62:	d09c      	beq.n	10068d9e <_printf_i+0x136>
10068e64:	3501      	adds	r5, #1
10068e66:	68e3      	ldr	r3, [r4, #12]
10068e68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10068e6a:	1a9b      	subs	r3, r3, r2
10068e6c:	42ab      	cmp	r3, r5
10068e6e:	dcf0      	bgt.n	10068e52 <_printf_i+0x1ea>
10068e70:	e7e9      	b.n	10068e46 <_printf_i+0x1de>
10068e72:	2500      	movs	r5, #0
10068e74:	e7f7      	b.n	10068e66 <_printf_i+0x1fe>
10068e76:	46c0      	nop			@ (mov r8, r8)
10068e78:	1006a5d2 	.word	0x1006a5d2
10068e7c:	1006a5e3 	.word	0x1006a5e3

10068e80 <__sflush_r>:
10068e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10068e82:	220c      	movs	r2, #12
10068e84:	5e8b      	ldrsh	r3, [r1, r2]
10068e86:	0005      	movs	r5, r0
10068e88:	000c      	movs	r4, r1
10068e8a:	071a      	lsls	r2, r3, #28
10068e8c:	d456      	bmi.n	10068f3c <__sflush_r+0xbc>
10068e8e:	684a      	ldr	r2, [r1, #4]
10068e90:	2a00      	cmp	r2, #0
10068e92:	dc02      	bgt.n	10068e9a <__sflush_r+0x1a>
10068e94:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
10068e96:	2a00      	cmp	r2, #0
10068e98:	dd4e      	ble.n	10068f38 <__sflush_r+0xb8>
10068e9a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
10068e9c:	2f00      	cmp	r7, #0
10068e9e:	d04b      	beq.n	10068f38 <__sflush_r+0xb8>
10068ea0:	2200      	movs	r2, #0
10068ea2:	2080      	movs	r0, #128	@ 0x80
10068ea4:	682e      	ldr	r6, [r5, #0]
10068ea6:	602a      	str	r2, [r5, #0]
10068ea8:	001a      	movs	r2, r3
10068eaa:	0140      	lsls	r0, r0, #5
10068eac:	6a21      	ldr	r1, [r4, #32]
10068eae:	4002      	ands	r2, r0
10068eb0:	4203      	tst	r3, r0
10068eb2:	d033      	beq.n	10068f1c <__sflush_r+0x9c>
10068eb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
10068eb6:	89a3      	ldrh	r3, [r4, #12]
10068eb8:	075b      	lsls	r3, r3, #29
10068eba:	d506      	bpl.n	10068eca <__sflush_r+0x4a>
10068ebc:	6863      	ldr	r3, [r4, #4]
10068ebe:	1ad2      	subs	r2, r2, r3
10068ec0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
10068ec2:	2b00      	cmp	r3, #0
10068ec4:	d001      	beq.n	10068eca <__sflush_r+0x4a>
10068ec6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
10068ec8:	1ad2      	subs	r2, r2, r3
10068eca:	2300      	movs	r3, #0
10068ecc:	0028      	movs	r0, r5
10068ece:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
10068ed0:	6a21      	ldr	r1, [r4, #32]
10068ed2:	47b8      	blx	r7
10068ed4:	89a2      	ldrh	r2, [r4, #12]
10068ed6:	1c43      	adds	r3, r0, #1
10068ed8:	d106      	bne.n	10068ee8 <__sflush_r+0x68>
10068eda:	6829      	ldr	r1, [r5, #0]
10068edc:	291d      	cmp	r1, #29
10068ede:	d846      	bhi.n	10068f6e <__sflush_r+0xee>
10068ee0:	4b29      	ldr	r3, [pc, #164]	@ (10068f88 <__sflush_r+0x108>)
10068ee2:	40cb      	lsrs	r3, r1
10068ee4:	07db      	lsls	r3, r3, #31
10068ee6:	d542      	bpl.n	10068f6e <__sflush_r+0xee>
10068ee8:	2300      	movs	r3, #0
10068eea:	6063      	str	r3, [r4, #4]
10068eec:	6923      	ldr	r3, [r4, #16]
10068eee:	6023      	str	r3, [r4, #0]
10068ef0:	04d2      	lsls	r2, r2, #19
10068ef2:	d505      	bpl.n	10068f00 <__sflush_r+0x80>
10068ef4:	1c43      	adds	r3, r0, #1
10068ef6:	d102      	bne.n	10068efe <__sflush_r+0x7e>
10068ef8:	682b      	ldr	r3, [r5, #0]
10068efa:	2b00      	cmp	r3, #0
10068efc:	d100      	bne.n	10068f00 <__sflush_r+0x80>
10068efe:	6560      	str	r0, [r4, #84]	@ 0x54
10068f00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10068f02:	602e      	str	r6, [r5, #0]
10068f04:	2900      	cmp	r1, #0
10068f06:	d017      	beq.n	10068f38 <__sflush_r+0xb8>
10068f08:	0023      	movs	r3, r4
10068f0a:	3344      	adds	r3, #68	@ 0x44
10068f0c:	4299      	cmp	r1, r3
10068f0e:	d002      	beq.n	10068f16 <__sflush_r+0x96>
10068f10:	0028      	movs	r0, r5
10068f12:	f7ff fc91 	bl	10068838 <_free_r>
10068f16:	2300      	movs	r3, #0
10068f18:	6363      	str	r3, [r4, #52]	@ 0x34
10068f1a:	e00d      	b.n	10068f38 <__sflush_r+0xb8>
10068f1c:	2301      	movs	r3, #1
10068f1e:	0028      	movs	r0, r5
10068f20:	47b8      	blx	r7
10068f22:	0002      	movs	r2, r0
10068f24:	1c43      	adds	r3, r0, #1
10068f26:	d1c6      	bne.n	10068eb6 <__sflush_r+0x36>
10068f28:	682b      	ldr	r3, [r5, #0]
10068f2a:	2b00      	cmp	r3, #0
10068f2c:	d0c3      	beq.n	10068eb6 <__sflush_r+0x36>
10068f2e:	2b1d      	cmp	r3, #29
10068f30:	d001      	beq.n	10068f36 <__sflush_r+0xb6>
10068f32:	2b16      	cmp	r3, #22
10068f34:	d11a      	bne.n	10068f6c <__sflush_r+0xec>
10068f36:	602e      	str	r6, [r5, #0]
10068f38:	2000      	movs	r0, #0
10068f3a:	e01e      	b.n	10068f7a <__sflush_r+0xfa>
10068f3c:	690e      	ldr	r6, [r1, #16]
10068f3e:	2e00      	cmp	r6, #0
10068f40:	d0fa      	beq.n	10068f38 <__sflush_r+0xb8>
10068f42:	680f      	ldr	r7, [r1, #0]
10068f44:	600e      	str	r6, [r1, #0]
10068f46:	1bba      	subs	r2, r7, r6
10068f48:	9201      	str	r2, [sp, #4]
10068f4a:	2200      	movs	r2, #0
10068f4c:	079b      	lsls	r3, r3, #30
10068f4e:	d100      	bne.n	10068f52 <__sflush_r+0xd2>
10068f50:	694a      	ldr	r2, [r1, #20]
10068f52:	60a2      	str	r2, [r4, #8]
10068f54:	9b01      	ldr	r3, [sp, #4]
10068f56:	2b00      	cmp	r3, #0
10068f58:	ddee      	ble.n	10068f38 <__sflush_r+0xb8>
10068f5a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
10068f5c:	0032      	movs	r2, r6
10068f5e:	001f      	movs	r7, r3
10068f60:	0028      	movs	r0, r5
10068f62:	9b01      	ldr	r3, [sp, #4]
10068f64:	6a21      	ldr	r1, [r4, #32]
10068f66:	47b8      	blx	r7
10068f68:	2800      	cmp	r0, #0
10068f6a:	dc07      	bgt.n	10068f7c <__sflush_r+0xfc>
10068f6c:	89a2      	ldrh	r2, [r4, #12]
10068f6e:	2340      	movs	r3, #64	@ 0x40
10068f70:	2001      	movs	r0, #1
10068f72:	4313      	orrs	r3, r2
10068f74:	b21b      	sxth	r3, r3
10068f76:	81a3      	strh	r3, [r4, #12]
10068f78:	4240      	negs	r0, r0
10068f7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10068f7c:	9b01      	ldr	r3, [sp, #4]
10068f7e:	1836      	adds	r6, r6, r0
10068f80:	1a1b      	subs	r3, r3, r0
10068f82:	9301      	str	r3, [sp, #4]
10068f84:	e7e6      	b.n	10068f54 <__sflush_r+0xd4>
10068f86:	46c0      	nop			@ (mov r8, r8)
10068f88:	20400001 	.word	0x20400001

10068f8c <_fflush_r>:
10068f8c:	690b      	ldr	r3, [r1, #16]
10068f8e:	b570      	push	{r4, r5, r6, lr}
10068f90:	0005      	movs	r5, r0
10068f92:	000c      	movs	r4, r1
10068f94:	2b00      	cmp	r3, #0
10068f96:	d102      	bne.n	10068f9e <_fflush_r+0x12>
10068f98:	2500      	movs	r5, #0
10068f9a:	0028      	movs	r0, r5
10068f9c:	bd70      	pop	{r4, r5, r6, pc}
10068f9e:	2800      	cmp	r0, #0
10068fa0:	d004      	beq.n	10068fac <_fflush_r+0x20>
10068fa2:	6a03      	ldr	r3, [r0, #32]
10068fa4:	2b00      	cmp	r3, #0
10068fa6:	d101      	bne.n	10068fac <_fflush_r+0x20>
10068fa8:	f7ff fa18 	bl	100683dc <__sinit>
10068fac:	220c      	movs	r2, #12
10068fae:	5ea3      	ldrsh	r3, [r4, r2]
10068fb0:	2b00      	cmp	r3, #0
10068fb2:	d0f1      	beq.n	10068f98 <_fflush_r+0xc>
10068fb4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10068fb6:	07d2      	lsls	r2, r2, #31
10068fb8:	d404      	bmi.n	10068fc4 <_fflush_r+0x38>
10068fba:	059b      	lsls	r3, r3, #22
10068fbc:	d402      	bmi.n	10068fc4 <_fflush_r+0x38>
10068fbe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10068fc0:	f7ff fc2b 	bl	1006881a <__retarget_lock_acquire_recursive>
10068fc4:	0028      	movs	r0, r5
10068fc6:	0021      	movs	r1, r4
10068fc8:	f7ff ff5a 	bl	10068e80 <__sflush_r>
10068fcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10068fce:	0005      	movs	r5, r0
10068fd0:	07db      	lsls	r3, r3, #31
10068fd2:	d4e2      	bmi.n	10068f9a <_fflush_r+0xe>
10068fd4:	89a3      	ldrh	r3, [r4, #12]
10068fd6:	059b      	lsls	r3, r3, #22
10068fd8:	d4df      	bmi.n	10068f9a <_fflush_r+0xe>
10068fda:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10068fdc:	f7ff fc1e 	bl	1006881c <__retarget_lock_release_recursive>
10068fe0:	e7db      	b.n	10068f9a <_fflush_r+0xe>
	...

10068fe4 <__swhatbuf_r>:
10068fe4:	b570      	push	{r4, r5, r6, lr}
10068fe6:	000e      	movs	r6, r1
10068fe8:	001d      	movs	r5, r3
10068fea:	230e      	movs	r3, #14
10068fec:	5ec9      	ldrsh	r1, [r1, r3]
10068fee:	0014      	movs	r4, r2
10068ff0:	b096      	sub	sp, #88	@ 0x58
10068ff2:	2900      	cmp	r1, #0
10068ff4:	da0c      	bge.n	10069010 <__swhatbuf_r+0x2c>
10068ff6:	89b2      	ldrh	r2, [r6, #12]
10068ff8:	2380      	movs	r3, #128	@ 0x80
10068ffa:	0011      	movs	r1, r2
10068ffc:	4019      	ands	r1, r3
10068ffe:	421a      	tst	r2, r3
10069000:	d114      	bne.n	1006902c <__swhatbuf_r+0x48>
10069002:	2380      	movs	r3, #128	@ 0x80
10069004:	00db      	lsls	r3, r3, #3
10069006:	2000      	movs	r0, #0
10069008:	6029      	str	r1, [r5, #0]
1006900a:	6023      	str	r3, [r4, #0]
1006900c:	b016      	add	sp, #88	@ 0x58
1006900e:	bd70      	pop	{r4, r5, r6, pc}
10069010:	466a      	mov	r2, sp
10069012:	f000 f865 	bl	100690e0 <_fstat_r>
10069016:	2800      	cmp	r0, #0
10069018:	dbed      	blt.n	10068ff6 <__swhatbuf_r+0x12>
1006901a:	23f0      	movs	r3, #240	@ 0xf0
1006901c:	9901      	ldr	r1, [sp, #4]
1006901e:	021b      	lsls	r3, r3, #8
10069020:	4019      	ands	r1, r3
10069022:	4b04      	ldr	r3, [pc, #16]	@ (10069034 <__swhatbuf_r+0x50>)
10069024:	18c9      	adds	r1, r1, r3
10069026:	424b      	negs	r3, r1
10069028:	4159      	adcs	r1, r3
1006902a:	e7ea      	b.n	10069002 <__swhatbuf_r+0x1e>
1006902c:	2100      	movs	r1, #0
1006902e:	2340      	movs	r3, #64	@ 0x40
10069030:	e7e9      	b.n	10069006 <__swhatbuf_r+0x22>
10069032:	46c0      	nop			@ (mov r8, r8)
10069034:	ffffe000 	.word	0xffffe000

10069038 <__smakebuf_r>:
10069038:	b5f0      	push	{r4, r5, r6, r7, lr}
1006903a:	2602      	movs	r6, #2
1006903c:	898b      	ldrh	r3, [r1, #12]
1006903e:	0005      	movs	r5, r0
10069040:	000c      	movs	r4, r1
10069042:	b085      	sub	sp, #20
10069044:	4233      	tst	r3, r6
10069046:	d007      	beq.n	10069058 <__smakebuf_r+0x20>
10069048:	0023      	movs	r3, r4
1006904a:	3347      	adds	r3, #71	@ 0x47
1006904c:	6023      	str	r3, [r4, #0]
1006904e:	6123      	str	r3, [r4, #16]
10069050:	2301      	movs	r3, #1
10069052:	6163      	str	r3, [r4, #20]
10069054:	b005      	add	sp, #20
10069056:	bdf0      	pop	{r4, r5, r6, r7, pc}
10069058:	ab03      	add	r3, sp, #12
1006905a:	aa02      	add	r2, sp, #8
1006905c:	f7ff ffc2 	bl	10068fe4 <__swhatbuf_r>
10069060:	9f02      	ldr	r7, [sp, #8]
10069062:	9001      	str	r0, [sp, #4]
10069064:	0039      	movs	r1, r7
10069066:	0028      	movs	r0, r5
10069068:	f7ff f898 	bl	1006819c <_malloc_r>
1006906c:	2800      	cmp	r0, #0
1006906e:	d108      	bne.n	10069082 <__smakebuf_r+0x4a>
10069070:	220c      	movs	r2, #12
10069072:	5ea3      	ldrsh	r3, [r4, r2]
10069074:	059a      	lsls	r2, r3, #22
10069076:	d4ed      	bmi.n	10069054 <__smakebuf_r+0x1c>
10069078:	2203      	movs	r2, #3
1006907a:	4393      	bics	r3, r2
1006907c:	431e      	orrs	r6, r3
1006907e:	81a6      	strh	r6, [r4, #12]
10069080:	e7e2      	b.n	10069048 <__smakebuf_r+0x10>
10069082:	2380      	movs	r3, #128	@ 0x80
10069084:	89a2      	ldrh	r2, [r4, #12]
10069086:	6020      	str	r0, [r4, #0]
10069088:	4313      	orrs	r3, r2
1006908a:	81a3      	strh	r3, [r4, #12]
1006908c:	9b03      	ldr	r3, [sp, #12]
1006908e:	6120      	str	r0, [r4, #16]
10069090:	6167      	str	r7, [r4, #20]
10069092:	2b00      	cmp	r3, #0
10069094:	d00c      	beq.n	100690b0 <__smakebuf_r+0x78>
10069096:	0028      	movs	r0, r5
10069098:	230e      	movs	r3, #14
1006909a:	5ee1      	ldrsh	r1, [r4, r3]
1006909c:	f000 f832 	bl	10069104 <_isatty_r>
100690a0:	2800      	cmp	r0, #0
100690a2:	d005      	beq.n	100690b0 <__smakebuf_r+0x78>
100690a4:	2303      	movs	r3, #3
100690a6:	89a2      	ldrh	r2, [r4, #12]
100690a8:	439a      	bics	r2, r3
100690aa:	3b02      	subs	r3, #2
100690ac:	4313      	orrs	r3, r2
100690ae:	81a3      	strh	r3, [r4, #12]
100690b0:	89a3      	ldrh	r3, [r4, #12]
100690b2:	9a01      	ldr	r2, [sp, #4]
100690b4:	4313      	orrs	r3, r2
100690b6:	81a3      	strh	r3, [r4, #12]
100690b8:	e7cc      	b.n	10069054 <__smakebuf_r+0x1c>

100690ba <memmove>:
100690ba:	b510      	push	{r4, lr}
100690bc:	4288      	cmp	r0, r1
100690be:	d902      	bls.n	100690c6 <memmove+0xc>
100690c0:	188b      	adds	r3, r1, r2
100690c2:	4298      	cmp	r0, r3
100690c4:	d308      	bcc.n	100690d8 <memmove+0x1e>
100690c6:	2300      	movs	r3, #0
100690c8:	429a      	cmp	r2, r3
100690ca:	d007      	beq.n	100690dc <memmove+0x22>
100690cc:	5ccc      	ldrb	r4, [r1, r3]
100690ce:	54c4      	strb	r4, [r0, r3]
100690d0:	3301      	adds	r3, #1
100690d2:	e7f9      	b.n	100690c8 <memmove+0xe>
100690d4:	5c8b      	ldrb	r3, [r1, r2]
100690d6:	5483      	strb	r3, [r0, r2]
100690d8:	3a01      	subs	r2, #1
100690da:	d2fb      	bcs.n	100690d4 <memmove+0x1a>
100690dc:	bd10      	pop	{r4, pc}
	...

100690e0 <_fstat_r>:
100690e0:	2300      	movs	r3, #0
100690e2:	b570      	push	{r4, r5, r6, lr}
100690e4:	4d06      	ldr	r5, [pc, #24]	@ (10069100 <_fstat_r+0x20>)
100690e6:	0004      	movs	r4, r0
100690e8:	0008      	movs	r0, r1
100690ea:	0011      	movs	r1, r2
100690ec:	602b      	str	r3, [r5, #0]
100690ee:	f7de fcb6 	bl	10047a5e <_fstat>
100690f2:	1c43      	adds	r3, r0, #1
100690f4:	d103      	bne.n	100690fe <_fstat_r+0x1e>
100690f6:	682b      	ldr	r3, [r5, #0]
100690f8:	2b00      	cmp	r3, #0
100690fa:	d000      	beq.n	100690fe <_fstat_r+0x1e>
100690fc:	6023      	str	r3, [r4, #0]
100690fe:	bd70      	pop	{r4, r5, r6, pc}
10069100:	20002af4 	.word	0x20002af4

10069104 <_isatty_r>:
10069104:	2300      	movs	r3, #0
10069106:	b570      	push	{r4, r5, r6, lr}
10069108:	4d06      	ldr	r5, [pc, #24]	@ (10069124 <_isatty_r+0x20>)
1006910a:	0004      	movs	r4, r0
1006910c:	0008      	movs	r0, r1
1006910e:	602b      	str	r3, [r5, #0]
10069110:	f7de fcb3 	bl	10047a7a <_isatty>
10069114:	1c43      	adds	r3, r0, #1
10069116:	d103      	bne.n	10069120 <_isatty_r+0x1c>
10069118:	682b      	ldr	r3, [r5, #0]
1006911a:	2b00      	cmp	r3, #0
1006911c:	d000      	beq.n	10069120 <_isatty_r+0x1c>
1006911e:	6023      	str	r3, [r4, #0]
10069120:	bd70      	pop	{r4, r5, r6, pc}
10069122:	46c0      	nop			@ (mov r8, r8)
10069124:	20002af4 	.word	0x20002af4

10069128 <memchr>:
10069128:	b2c9      	uxtb	r1, r1
1006912a:	1882      	adds	r2, r0, r2
1006912c:	4290      	cmp	r0, r2
1006912e:	d101      	bne.n	10069134 <memchr+0xc>
10069130:	2000      	movs	r0, #0
10069132:	4770      	bx	lr
10069134:	7803      	ldrb	r3, [r0, #0]
10069136:	428b      	cmp	r3, r1
10069138:	d0fb      	beq.n	10069132 <memchr+0xa>
1006913a:	3001      	adds	r0, #1
1006913c:	e7f6      	b.n	1006912c <memchr+0x4>

1006913e <_realloc_r>:
1006913e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10069140:	0006      	movs	r6, r0
10069142:	000c      	movs	r4, r1
10069144:	0015      	movs	r5, r2
10069146:	2900      	cmp	r1, #0
10069148:	d105      	bne.n	10069156 <_realloc_r+0x18>
1006914a:	0011      	movs	r1, r2
1006914c:	f7ff f826 	bl	1006819c <_malloc_r>
10069150:	0004      	movs	r4, r0
10069152:	0020      	movs	r0, r4
10069154:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10069156:	2a00      	cmp	r2, #0
10069158:	d103      	bne.n	10069162 <_realloc_r+0x24>
1006915a:	f7ff fb6d 	bl	10068838 <_free_r>
1006915e:	002c      	movs	r4, r5
10069160:	e7f7      	b.n	10069152 <_realloc_r+0x14>
10069162:	f000 f81c 	bl	1006919e <_malloc_usable_size_r>
10069166:	0007      	movs	r7, r0
10069168:	4285      	cmp	r5, r0
1006916a:	d802      	bhi.n	10069172 <_realloc_r+0x34>
1006916c:	0843      	lsrs	r3, r0, #1
1006916e:	42ab      	cmp	r3, r5
10069170:	d3ef      	bcc.n	10069152 <_realloc_r+0x14>
10069172:	0029      	movs	r1, r5
10069174:	0030      	movs	r0, r6
10069176:	f7ff f811 	bl	1006819c <_malloc_r>
1006917a:	9001      	str	r0, [sp, #4]
1006917c:	2800      	cmp	r0, #0
1006917e:	d101      	bne.n	10069184 <_realloc_r+0x46>
10069180:	9c01      	ldr	r4, [sp, #4]
10069182:	e7e6      	b.n	10069152 <_realloc_r+0x14>
10069184:	002a      	movs	r2, r5
10069186:	42bd      	cmp	r5, r7
10069188:	d900      	bls.n	1006918c <_realloc_r+0x4e>
1006918a:	003a      	movs	r2, r7
1006918c:	0021      	movs	r1, r4
1006918e:	9801      	ldr	r0, [sp, #4]
10069190:	f7ff fb49 	bl	10068826 <memcpy>
10069194:	0021      	movs	r1, r4
10069196:	0030      	movs	r0, r6
10069198:	f7ff fb4e 	bl	10068838 <_free_r>
1006919c:	e7f0      	b.n	10069180 <_realloc_r+0x42>

1006919e <_malloc_usable_size_r>:
1006919e:	1f0b      	subs	r3, r1, #4
100691a0:	681b      	ldr	r3, [r3, #0]
100691a2:	1f18      	subs	r0, r3, #4
100691a4:	2b00      	cmp	r3, #0
100691a6:	da01      	bge.n	100691ac <_malloc_usable_size_r+0xe>
100691a8:	580b      	ldr	r3, [r1, r0]
100691aa:	18c0      	adds	r0, r0, r3
100691ac:	4770      	bx	lr
	...

100691b0 <AES_CMAC_Encrypt_Append>:
100691b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100691b2:	2500      	movs	r5, #0
100691b4:	b08a      	sub	sp, #40	@ 0x28
100691b6:	460e      	mov	r6, r1
100691b8:	4604      	mov	r4, r0
100691ba:	2800      	cmp	r0, #0
100691bc:	d004      	beq.n	100691c8 <AES_CMAC_Encrypt_Append+0x18>
100691be:	2e00      	cmp	r6, #0
100691c0:	d106      	bne.n	100691d0 <AES_CMAC_Encrypt_Append+0x20>
100691c2:	980c      	ldr	r0, [sp, #48]	@ 0x30
100691c4:	2800      	cmp	r0, #0
100691c6:	dd03      	ble.n	100691d0 <AES_CMAC_Encrypt_Append+0x20>
100691c8:	2061      	movs	r0, #97	@ 0x61
100691ca:	0140      	lsls	r0, r0, #5
100691cc:	b00d      	add	sp, #52	@ 0x34
100691ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
100691d0:	980c      	ldr	r0, [sp, #48]	@ 0x30
100691d2:	2800      	cmp	r0, #0
100691d4:	db04      	blt.n	100691e0 <AES_CMAC_Encrypt_Append+0x30>
100691d6:	2810      	cmp	r0, #16
100691d8:	da04      	bge.n	100691e4 <AES_CMAC_Encrypt_Append+0x34>
100691da:	7920      	ldrb	r0, [r4, #4]
100691dc:	0680      	lsls	r0, r0, #26
100691de:	d401      	bmi.n	100691e4 <AES_CMAC_Encrypt_Append+0x34>
100691e0:	488c      	ldr	r0, [pc, #560]	@ (10069414 <AES_CMAC_Encrypt_Append+0x264>)
100691e2:	e7f3      	b.n	100691cc <AES_CMAC_Encrypt_Append+0x1c>
100691e4:	7920      	ldrb	r0, [r4, #4]
100691e6:	0741      	lsls	r1, r0, #29
100691e8:	d401      	bmi.n	100691ee <AES_CMAC_Encrypt_Append+0x3e>
100691ea:	0781      	lsls	r1, r0, #30
100691ec:	d502      	bpl.n	100691f4 <AES_CMAC_Encrypt_Append+0x44>
100691ee:	4889      	ldr	r0, [pc, #548]	@ (10069414 <AES_CMAC_Encrypt_Append+0x264>)
100691f0:	1c40      	adds	r0, r0, #1
100691f2:	e7eb      	b.n	100691cc <AES_CMAC_Encrypt_Append+0x1c>
100691f4:	2140      	movs	r1, #64	@ 0x40
100691f6:	4308      	orrs	r0, r1
100691f8:	7120      	strb	r0, [r4, #4]
100691fa:	4620      	mov	r0, r4
100691fc:	3014      	adds	r0, #20
100691fe:	9008      	str	r0, [sp, #32]
10069200:	e01c      	b.n	1006923c <AES_CMAC_Encrypt_Append+0x8c>
10069202:	2000      	movs	r0, #0
10069204:	0081      	lsls	r1, r0, #2
10069206:	194a      	adds	r2, r1, r5
10069208:	1992      	adds	r2, r2, r6
1006920a:	7853      	ldrb	r3, [r2, #1]
1006920c:	7817      	ldrb	r7, [r2, #0]
1006920e:	021b      	lsls	r3, r3, #8
10069210:	433b      	orrs	r3, r7
10069212:	7897      	ldrb	r7, [r2, #2]
10069214:	ba5b      	rev16	r3, r3
10069216:	041b      	lsls	r3, r3, #16
10069218:	023f      	lsls	r7, r7, #8
1006921a:	78d2      	ldrb	r2, [r2, #3]
1006921c:	433b      	orrs	r3, r7
1006921e:	4313      	orrs	r3, r2
10069220:	190a      	adds	r2, r1, r4
10069222:	6952      	ldr	r2, [r2, #20]
10069224:	1c40      	adds	r0, r0, #1
10069226:	4053      	eors	r3, r2
10069228:	aa04      	add	r2, sp, #16
1006922a:	5053      	str	r3, [r2, r1]
1006922c:	2804      	cmp	r0, #4
1006922e:	dbe9      	blt.n	10069204 <AES_CMAC_Encrypt_Append+0x54>
10069230:	68a2      	ldr	r2, [r4, #8]
10069232:	a804      	add	r0, sp, #16
10069234:	9908      	ldr	r1, [sp, #32]
10069236:	f7e6 fe3d 	bl	1004feb4 <AES_128_HW_enc>
1006923a:	9d00      	ldr	r5, [sp, #0]
1006923c:	990c      	ldr	r1, [sp, #48]	@ 0x30
1006923e:	4628      	mov	r0, r5
10069240:	3010      	adds	r0, #16
10069242:	9000      	str	r0, [sp, #0]
10069244:	4288      	cmp	r0, r1
10069246:	dbdc      	blt.n	10069202 <AES_CMAC_Encrypt_Append+0x52>
10069248:	7920      	ldrb	r0, [r4, #4]
1006924a:	0680      	lsls	r0, r0, #26
1006924c:	d41e      	bmi.n	1006928c <AES_CMAC_Encrypt_Append+0xdc>
1006924e:	2900      	cmp	r1, #0
10069250:	dd1c      	ble.n	1006928c <AES_CMAC_Encrypt_Append+0xdc>
10069252:	2000      	movs	r0, #0
10069254:	0081      	lsls	r1, r0, #2
10069256:	194a      	adds	r2, r1, r5
10069258:	1992      	adds	r2, r2, r6
1006925a:	7853      	ldrb	r3, [r2, #1]
1006925c:	7817      	ldrb	r7, [r2, #0]
1006925e:	021b      	lsls	r3, r3, #8
10069260:	433b      	orrs	r3, r7
10069262:	7897      	ldrb	r7, [r2, #2]
10069264:	ba5b      	rev16	r3, r3
10069266:	041b      	lsls	r3, r3, #16
10069268:	023f      	lsls	r7, r7, #8
1006926a:	78d2      	ldrb	r2, [r2, #3]
1006926c:	433b      	orrs	r3, r7
1006926e:	4313      	orrs	r3, r2
10069270:	190a      	adds	r2, r1, r4
10069272:	6952      	ldr	r2, [r2, #20]
10069274:	1c40      	adds	r0, r0, #1
10069276:	4053      	eors	r3, r2
10069278:	aa04      	add	r2, sp, #16
1006927a:	5053      	str	r3, [r2, r1]
1006927c:	2804      	cmp	r0, #4
1006927e:	dbe9      	blt.n	10069254 <AES_CMAC_Encrypt_Append+0xa4>
10069280:	68a2      	ldr	r2, [r4, #8]
10069282:	a804      	add	r0, sp, #16
10069284:	9908      	ldr	r1, [sp, #32]
10069286:	f7e6 fe15 	bl	1004feb4 <AES_128_HW_enc>
1006928a:	e0c0      	b.n	1006940e <AES_CMAC_Encrypt_Append+0x25e>
1006928c:	2000      	movs	r0, #0
1006928e:	9000      	str	r0, [sp, #0]
10069290:	9001      	str	r0, [sp, #4]
10069292:	9002      	str	r0, [sp, #8]
10069294:	9003      	str	r0, [sp, #12]
10069296:	4669      	mov	r1, sp
10069298:	4608      	mov	r0, r1
1006929a:	68a2      	ldr	r2, [r4, #8]
1006929c:	f7e6 fe0a 	bl	1004feb4 <AES_128_HW_enc>
100692a0:	9900      	ldr	r1, [sp, #0]
100692a2:	2287      	movs	r2, #135	@ 0x87
100692a4:	0fc8      	lsrs	r0, r1, #31
100692a6:	4350      	muls	r0, r2
100692a8:	9a01      	ldr	r2, [sp, #4]
100692aa:	0049      	lsls	r1, r1, #1
100692ac:	0fd2      	lsrs	r2, r2, #31
100692ae:	4311      	orrs	r1, r2
100692b0:	9100      	str	r1, [sp, #0]
100692b2:	9901      	ldr	r1, [sp, #4]
100692b4:	9a02      	ldr	r2, [sp, #8]
100692b6:	0049      	lsls	r1, r1, #1
100692b8:	0fd2      	lsrs	r2, r2, #31
100692ba:	4311      	orrs	r1, r2
100692bc:	9101      	str	r1, [sp, #4]
100692be:	9902      	ldr	r1, [sp, #8]
100692c0:	9a03      	ldr	r2, [sp, #12]
100692c2:	0049      	lsls	r1, r1, #1
100692c4:	0fd2      	lsrs	r2, r2, #31
100692c6:	4311      	orrs	r1, r2
100692c8:	9102      	str	r1, [sp, #8]
100692ca:	9903      	ldr	r1, [sp, #12]
100692cc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
100692ce:	0049      	lsls	r1, r1, #1
100692d0:	4041      	eors	r1, r0
100692d2:	4628      	mov	r0, r5
100692d4:	3010      	adds	r0, #16
100692d6:	9103      	str	r1, [sp, #12]
100692d8:	4290      	cmp	r0, r2
100692da:	d11a      	bne.n	10069312 <AES_CMAC_Encrypt_Append+0x162>
100692dc:	2000      	movs	r0, #0
100692de:	0081      	lsls	r1, r0, #2
100692e0:	194a      	adds	r2, r1, r5
100692e2:	1993      	adds	r3, r2, r6
100692e4:	785a      	ldrb	r2, [r3, #1]
100692e6:	781f      	ldrb	r7, [r3, #0]
100692e8:	0212      	lsls	r2, r2, #8
100692ea:	433a      	orrs	r2, r7
100692ec:	789f      	ldrb	r7, [r3, #2]
100692ee:	ba52      	rev16	r2, r2
100692f0:	0412      	lsls	r2, r2, #16
100692f2:	023f      	lsls	r7, r7, #8
100692f4:	433a      	orrs	r2, r7
100692f6:	78db      	ldrb	r3, [r3, #3]
100692f8:	466f      	mov	r7, sp
100692fa:	431a      	orrs	r2, r3
100692fc:	190b      	adds	r3, r1, r4
100692fe:	695b      	ldr	r3, [r3, #20]
10069300:	587f      	ldr	r7, [r7, r1]
10069302:	1c40      	adds	r0, r0, #1
10069304:	407b      	eors	r3, r7
10069306:	405a      	eors	r2, r3
10069308:	ab04      	add	r3, sp, #16
1006930a:	505a      	str	r2, [r3, r1]
1006930c:	2804      	cmp	r0, #4
1006930e:	dbe6      	blt.n	100692de <AES_CMAC_Encrypt_Append+0x12e>
10069310:	e074      	b.n	100693fc <AES_CMAC_Encrypt_Append+0x24c>
10069312:	9a00      	ldr	r2, [sp, #0]
10069314:	2387      	movs	r3, #135	@ 0x87
10069316:	0fd0      	lsrs	r0, r2, #31
10069318:	4358      	muls	r0, r3
1006931a:	9b01      	ldr	r3, [sp, #4]
1006931c:	0052      	lsls	r2, r2, #1
1006931e:	0fdb      	lsrs	r3, r3, #31
10069320:	431a      	orrs	r2, r3
10069322:	9200      	str	r2, [sp, #0]
10069324:	9a01      	ldr	r2, [sp, #4]
10069326:	9b02      	ldr	r3, [sp, #8]
10069328:	0052      	lsls	r2, r2, #1
1006932a:	0fdb      	lsrs	r3, r3, #31
1006932c:	431a      	orrs	r2, r3
1006932e:	9201      	str	r2, [sp, #4]
10069330:	9a02      	ldr	r2, [sp, #8]
10069332:	0fcb      	lsrs	r3, r1, #31
10069334:	0052      	lsls	r2, r2, #1
10069336:	431a      	orrs	r2, r3
10069338:	9202      	str	r2, [sp, #8]
1006933a:	004a      	lsls	r2, r1, #1
1006933c:	4042      	eors	r2, r0
1006933e:	9203      	str	r2, [sp, #12]
10069340:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10069342:	2000      	movs	r0, #0
10069344:	1b53      	subs	r3, r2, r5
10069346:	17da      	asrs	r2, r3, #31
10069348:	469c      	mov	ip, r3
1006934a:	0f92      	lsrs	r2, r2, #30
1006934c:	4462      	add	r2, ip
1006934e:	1092      	asrs	r2, r2, #2
10069350:	4696      	mov	lr, r2
10069352:	e016      	b.n	10069382 <AES_CMAC_Encrypt_Append+0x1d2>
10069354:	0081      	lsls	r1, r0, #2
10069356:	194a      	adds	r2, r1, r5
10069358:	1993      	adds	r3, r2, r6
1006935a:	785a      	ldrb	r2, [r3, #1]
1006935c:	781f      	ldrb	r7, [r3, #0]
1006935e:	0212      	lsls	r2, r2, #8
10069360:	433a      	orrs	r2, r7
10069362:	789f      	ldrb	r7, [r3, #2]
10069364:	ba52      	rev16	r2, r2
10069366:	0412      	lsls	r2, r2, #16
10069368:	023f      	lsls	r7, r7, #8
1006936a:	433a      	orrs	r2, r7
1006936c:	78db      	ldrb	r3, [r3, #3]
1006936e:	466f      	mov	r7, sp
10069370:	431a      	orrs	r2, r3
10069372:	190b      	adds	r3, r1, r4
10069374:	695b      	ldr	r3, [r3, #20]
10069376:	587f      	ldr	r7, [r7, r1]
10069378:	407b      	eors	r3, r7
1006937a:	405a      	eors	r2, r3
1006937c:	ab04      	add	r3, sp, #16
1006937e:	505a      	str	r2, [r3, r1]
10069380:	1c40      	adds	r0, r0, #1
10069382:	4586      	cmp	lr, r0
10069384:	dce6      	bgt.n	10069354 <AES_CMAC_Encrypt_Append+0x1a4>
10069386:	0081      	lsls	r1, r0, #2
10069388:	190a      	adds	r2, r1, r4
1006938a:	466b      	mov	r3, sp
1006938c:	6952      	ldr	r2, [r2, #20]
1006938e:	585b      	ldr	r3, [r3, r1]
10069390:	4667      	mov	r7, ip
10069392:	405a      	eors	r2, r3
10069394:	ab04      	add	r3, sp, #16
10069396:	505a      	str	r2, [r3, r1]
10069398:	1a7f      	subs	r7, r7, r1
1006939a:	2200      	movs	r2, #0
1006939c:	194b      	adds	r3, r1, r5
1006939e:	46bc      	mov	ip, r7
100693a0:	469e      	mov	lr, r3
100693a2:	e00b      	b.n	100693bc <AES_CMAC_Encrypt_Append+0x20c>
100693a4:	4673      	mov	r3, lr
100693a6:	189b      	adds	r3, r3, r2
100693a8:	5cf3      	ldrb	r3, [r6, r3]
100693aa:	00d7      	lsls	r7, r2, #3
100693ac:	2518      	movs	r5, #24
100693ae:	1bed      	subs	r5, r5, r7
100693b0:	40ab      	lsls	r3, r5
100693b2:	ad04      	add	r5, sp, #16
100693b4:	586f      	ldr	r7, [r5, r1]
100693b6:	407b      	eors	r3, r7
100693b8:	506b      	str	r3, [r5, r1]
100693ba:	1c52      	adds	r2, r2, #1
100693bc:	4594      	cmp	ip, r2
100693be:	dcf1      	bgt.n	100693a4 <AES_CMAC_Encrypt_Append+0x1f4>
100693c0:	2a00      	cmp	r2, #0
100693c2:	d009      	beq.n	100693d8 <AES_CMAC_Encrypt_Append+0x228>
100693c4:	00d6      	lsls	r6, r2, #3
100693c6:	2218      	movs	r2, #24
100693c8:	ab04      	add	r3, sp, #16
100693ca:	1b96      	subs	r6, r2, r6
100693cc:	585d      	ldr	r5, [r3, r1]
100693ce:	2280      	movs	r2, #128	@ 0x80
100693d0:	40b2      	lsls	r2, r6
100693d2:	4055      	eors	r5, r2
100693d4:	505d      	str	r5, [r3, r1]
100693d6:	e005      	b.n	100693e4 <AES_CMAC_Encrypt_Append+0x234>
100693d8:	aa04      	add	r2, sp, #16
100693da:	5853      	ldr	r3, [r2, r1]
100693dc:	2501      	movs	r5, #1
100693de:	07ed      	lsls	r5, r5, #31
100693e0:	406b      	eors	r3, r5
100693e2:	5053      	str	r3, [r2, r1]
100693e4:	ab04      	add	r3, sp, #16
100693e6:	466a      	mov	r2, sp
100693e8:	e005      	b.n	100693f6 <AES_CMAC_Encrypt_Append+0x246>
100693ea:	0081      	lsls	r1, r0, #2
100693ec:	190d      	adds	r5, r1, r4
100693ee:	696d      	ldr	r5, [r5, #20]
100693f0:	5856      	ldr	r6, [r2, r1]
100693f2:	4075      	eors	r5, r6
100693f4:	505d      	str	r5, [r3, r1]
100693f6:	1c40      	adds	r0, r0, #1
100693f8:	2804      	cmp	r0, #4
100693fa:	dbf6      	blt.n	100693ea <AES_CMAC_Encrypt_Append+0x23a>
100693fc:	68a2      	ldr	r2, [r4, #8]
100693fe:	4618      	mov	r0, r3
10069400:	9908      	ldr	r1, [sp, #32]
10069402:	f7e6 fd57 	bl	1004feb4 <AES_128_HW_enc>
10069406:	7920      	ldrb	r0, [r4, #4]
10069408:	2104      	movs	r1, #4
1006940a:	4308      	orrs	r0, r1
1006940c:	7120      	strb	r0, [r4, #4]
1006940e:	2000      	movs	r0, #0
10069410:	e6dc      	b.n	100691cc <AES_CMAC_Encrypt_Append+0x1c>
10069412:	0000      	.short	0x0000
10069414:	00000c1d 	.word	0x00000c1d

10069418 <AES_CMAC_Encrypt_Finish>:
10069418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006941a:	4616      	mov	r6, r2
1006941c:	460f      	mov	r7, r1
1006941e:	0004      	movs	r4, r0
10069420:	d009      	beq.n	10069436 <AES_CMAC_Encrypt_Finish+0x1e>
10069422:	2e00      	cmp	r6, #0
10069424:	d007      	beq.n	10069436 <AES_CMAC_Encrypt_Finish+0x1e>
10069426:	4625      	mov	r5, r4
10069428:	3580      	adds	r5, #128	@ 0x80
1006942a:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
1006942c:	1e40      	subs	r0, r0, #1
1006942e:	2810      	cmp	r0, #16
10069430:	d304      	bcc.n	1006943c <AES_CMAC_Encrypt_Finish+0x24>
10069432:	4813      	ldr	r0, [pc, #76]	@ (10069480 <AES_CMAC_Encrypt_Finish+0x68>)
10069434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10069436:	2061      	movs	r0, #97	@ 0x61
10069438:	0140      	lsls	r0, r0, #5
1006943a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006943c:	7920      	ldrb	r0, [r4, #4]
1006943e:	0640      	lsls	r0, r0, #25
10069440:	d404      	bmi.n	1006944c <AES_CMAC_Encrypt_Finish+0x34>
10069442:	2200      	movs	r2, #0
10069444:	4611      	mov	r1, r2
10069446:	4620      	mov	r0, r4
10069448:	f7ff feb2 	bl	100691b0 <AES_CMAC_Encrypt_Append>
1006944c:	7920      	ldrb	r0, [r4, #4]
1006944e:	2102      	movs	r1, #2
10069450:	4308      	orrs	r0, r1
10069452:	7120      	strb	r0, [r4, #4]
10069454:	2000      	movs	r0, #0
10069456:	2118      	movs	r1, #24
10069458:	e00c      	b.n	10069474 <AES_CMAC_Encrypt_Finish+0x5c>
1006945a:	17c2      	asrs	r2, r0, #31
1006945c:	0f92      	lsrs	r2, r2, #30
1006945e:	1812      	adds	r2, r2, r0
10069460:	0892      	lsrs	r2, r2, #2
10069462:	0092      	lsls	r2, r2, #2
10069464:	1912      	adds	r2, r2, r4
10069466:	0783      	lsls	r3, r0, #30
10069468:	6952      	ldr	r2, [r2, #20]
1006946a:	0edb      	lsrs	r3, r3, #27
1006946c:	1acb      	subs	r3, r1, r3
1006946e:	40da      	lsrs	r2, r3
10069470:	543a      	strb	r2, [r7, r0]
10069472:	1c40      	adds	r0, r0, #1
10069474:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
10069476:	4282      	cmp	r2, r0
10069478:	dcef      	bgt.n	1006945a <AES_CMAC_Encrypt_Finish+0x42>
1006947a:	2000      	movs	r0, #0
1006947c:	6032      	str	r2, [r6, #0]
1006947e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10069480:	00000c1f 	.word	0x00000c1f

10069484 <AES_CMAC_Encrypt_Init>:
10069484:	b510      	push	{r4, lr}
10069486:	0004      	movs	r4, r0
10069488:	d007      	beq.n	1006949a <AES_CMAC_Encrypt_Init+0x16>
1006948a:	2302      	movs	r3, #2
1006948c:	2200      	movs	r2, #0
1006948e:	68a1      	ldr	r1, [r4, #8]
10069490:	f000 f81a 	bl	100694c8 <AESstdInitEnc>
10069494:	0001      	movs	r1, r0
10069496:	d003      	beq.n	100694a0 <AES_CMAC_Encrypt_Init+0x1c>
10069498:	e00c      	b.n	100694b4 <AES_CMAC_Encrypt_Init+0x30>
1006949a:	2061      	movs	r0, #97	@ 0x61
1006949c:	0140      	lsls	r0, r0, #5
1006949e:	bd10      	pop	{r4, pc}
100694a0:	2000      	movs	r0, #0
100694a2:	2210      	movs	r2, #16
100694a4:	6122      	str	r2, [r4, #16]
100694a6:	4602      	mov	r2, r0
100694a8:	0083      	lsls	r3, r0, #2
100694aa:	191b      	adds	r3, r3, r4
100694ac:	1c40      	adds	r0, r0, #1
100694ae:	615a      	str	r2, [r3, #20]
100694b0:	2804      	cmp	r0, #4
100694b2:	dbf9      	blt.n	100694a8 <AES_CMAC_Encrypt_Init+0x24>
100694b4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
100694b6:	2810      	cmp	r0, #16
100694b8:	d001      	beq.n	100694be <AES_CMAC_Encrypt_Init+0x3a>
100694ba:	4802      	ldr	r0, [pc, #8]	@ (100694c4 <AES_CMAC_Encrypt_Init+0x40>)
100694bc:	bd10      	pop	{r4, pc}
100694be:	4608      	mov	r0, r1
100694c0:	bd10      	pop	{r4, pc}
100694c2:	0000      	.short	0x0000
100694c4:	00000c1d 	.word	0x00000c1d

100694c8 <AESstdInitEnc>:
100694c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100694ca:	2800      	cmp	r0, #0
100694cc:	d007      	beq.n	100694de <AESstdInitEnc+0x16>
100694ce:	2900      	cmp	r1, #0
100694d0:	d005      	beq.n	100694de <AESstdInitEnc+0x16>
100694d2:	075b      	lsls	r3, r3, #29
100694d4:	0f9c      	lsrs	r4, r3, #30
100694d6:	2a00      	cmp	r2, #0
100694d8:	d104      	bne.n	100694e4 <AESstdInitEnc+0x1c>
100694da:	2c01      	cmp	r4, #1
100694dc:	d002      	beq.n	100694e4 <AESstdInitEnc+0x1c>
100694de:	2061      	movs	r0, #97	@ 0x61
100694e0:	0140      	lsls	r0, r0, #5
100694e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100694e4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
100694e6:	2b10      	cmp	r3, #16
100694e8:	d003      	beq.n	100694f2 <AESstdInitEnc+0x2a>
100694ea:	2b18      	cmp	r3, #24
100694ec:	d001      	beq.n	100694f2 <AESstdInitEnc+0x2a>
100694ee:	2b20      	cmp	r3, #32
100694f0:	d105      	bne.n	100694fe <AESstdInitEnc+0x36>
100694f2:	2c01      	cmp	r4, #1
100694f4:	d005      	beq.n	10069502 <AESstdInitEnc+0x3a>
100694f6:	6905      	ldr	r5, [r0, #16]
100694f8:	1e6d      	subs	r5, r5, #1
100694fa:	2d10      	cmp	r5, #16
100694fc:	d301      	bcc.n	10069502 <AESstdInitEnc+0x3a>
100694fe:	481a      	ldr	r0, [pc, #104]	@ (10069568 <AESstdInitEnc+0xa0>)
10069500:	bdf0      	pop	{r4, r5, r6, r7, pc}
10069502:	2b10      	cmp	r3, #16
10069504:	d002      	beq.n	1006950c <AESstdInitEnc+0x44>
10069506:	4818      	ldr	r0, [pc, #96]	@ (10069568 <AESstdInitEnc+0xa0>)
10069508:	1e80      	subs	r0, r0, #2
1006950a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006950c:	60c2      	str	r2, [r0, #12]
1006950e:	7903      	ldrb	r3, [r0, #4]
10069510:	25f9      	movs	r5, #249	@ 0xf9
10069512:	402b      	ands	r3, r5
10069514:	7103      	strb	r3, [r0, #4]
10069516:	2c01      	cmp	r4, #1
10069518:	d020      	beq.n	1006955c <AESstdInitEnc+0x94>
1006951a:	2300      	movs	r3, #0
1006951c:	461c      	mov	r4, r3
1006951e:	009d      	lsls	r5, r3, #2
10069520:	182d      	adds	r5, r5, r0
10069522:	1c5b      	adds	r3, r3, #1
10069524:	616c      	str	r4, [r5, #20]
10069526:	2b04      	cmp	r3, #4
10069528:	dbf9      	blt.n	1006951e <AESstdInitEnc+0x56>
1006952a:	2300      	movs	r3, #0
1006952c:	e013      	b.n	10069556 <AESstdInitEnc+0x8e>
1006952e:	17dc      	asrs	r4, r3, #31
10069530:	0fa4      	lsrs	r4, r4, #30
10069532:	18e4      	adds	r4, r4, r3
10069534:	08a4      	lsrs	r4, r4, #2
10069536:	00a4      	lsls	r4, r4, #2
10069538:	1825      	adds	r5, r4, r0
1006953a:	462e      	mov	r6, r5
1006953c:	3614      	adds	r6, #20
1006953e:	46b4      	mov	ip, r6
10069540:	1b1c      	subs	r4, r3, r4
10069542:	5cd6      	ldrb	r6, [r2, r3]
10069544:	00e4      	lsls	r4, r4, #3
10069546:	2718      	movs	r7, #24
10069548:	696d      	ldr	r5, [r5, #20]
1006954a:	1b3c      	subs	r4, r7, r4
1006954c:	40a6      	lsls	r6, r4
1006954e:	4335      	orrs	r5, r6
10069550:	4666      	mov	r6, ip
10069552:	1c5b      	adds	r3, r3, #1
10069554:	6035      	str	r5, [r6, #0]
10069556:	6904      	ldr	r4, [r0, #16]
10069558:	429c      	cmp	r4, r3
1006955a:	dce8      	bgt.n	1006952e <AESstdInitEnc+0x66>
1006955c:	7902      	ldrb	r2, [r0, #4]
1006955e:	07d2      	lsls	r2, r2, #31
10069560:	d100      	bne.n	10069564 <AESstdInitEnc+0x9c>
10069562:	6081      	str	r1, [r0, #8]
10069564:	2000      	movs	r0, #0
10069566:	bdf0      	pop	{r4, r5, r6, r7, pc}
10069568:	00000c1f 	.word	0x00000c1f

Disassembly of section .init:

1006956c <_init>:
1006956c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006956e:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

10069570 <_fini>:
10069570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10069572:	46c0      	nop			@ (mov r8, r8)
