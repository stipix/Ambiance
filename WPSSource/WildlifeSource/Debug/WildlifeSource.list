
WildlifeSource.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007040  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  10047100  10047100  00008100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  10047104  10047104  00008104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000002c4  10047108  10047108  00008108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  100473cc  100473cc  000083cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000a4  200009e8  100473d4  000089e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  00009004  2**2
                  ALLOC
  8 .bss.blueRAM  000000d4  200000c0  200000c0  00009004  2**2
                  ALLOC
  9 .bss          00000854  20000194  20000194  00009004  2**2
                  ALLOC
 10 .noinit       00000000  20000a8c  10047478  00000000  2**0
                  ALLOC
 11 .ota_region_end 00000000  10047478  10047478  00008a8c  2**0
                  CONTENTS
 12 .heap         00000000  20000a8c  20000a8c  00008a8c  2**0
                  CONTENTS
 13 .stack        00000c00  20005400  20005400  00009400  2**0
                  ALLOC
 14 .rom_info     00000000  10000000  10000000  00008a8c  2**0
                  CONTENTS
 15 .ARM.attributes 00000028  00000000  00000000  00008a8c  2**0
                  CONTENTS, READONLY
 16 .debug_info   0001b236  00000000  00000000  00008ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00004074  00000000  00000000  00023cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001b00  00000000  00000000  00027d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000014ec  00000000  00000000  00029860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00005ee1  00000000  00000000  0002ad4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00020ff6  00000000  00000000  00030c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000b86dd  00000000  00000000  00051c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  0010a300  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000066e8  00000000  00000000  0010a344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000009f  00000000  00000000  00110a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <blue_unit_conversion>:
                __CODE__
                __THUMB__
                __EXPORT__ blue_unit_conversion

EXPORT_FUNC(blue_unit_conversion)
                  PUSH    {r4, lr}
100400c0:	b510      	push	{r4, lr}
                  CMP     r0, r2
100400c2:	4290      	cmp	r0, r2
                  BLS     mul32
100400c4:	d916      	bls.n	100400f4 <mul32>
                  UXTH    r2, r1
100400c6:	b28a      	uxth	r2, r1
                  LSRS    r3, r0, #16
100400c8:	0c03      	lsrs	r3, r0, #16
                  LSRS    r1, r1, #16
100400ca:	0c09      	lsrs	r1, r1, #16
                  MOV     r4, r1
100400cc:	460c      	mov	r4, r1
                  MULS    r1, r3, r1
100400ce:	4359      	muls	r1, r3
                  UXTH    r0, r0
100400d0:	b280      	uxth	r0, r0
                  MULS    r3, r2, r3
100400d2:	4353      	muls	r3, r2
                  MULS    r4, r0, r4
100400d4:	4344      	muls	r4, r0
                  MULS    r0, r2, r0
100400d6:	4350      	muls	r0, r2
                  ADDS    r3, r3, r4
100400d8:	191b      	adds	r3, r3, r4
                  LSLS    r2, r3, #16
100400da:	041a      	lsls	r2, r3, #16
                  LSRS    r3, r3, #16
100400dc:	0c1b      	lsrs	r3, r3, #16
                  ADDS    r0, r2, r0
100400de:	1810      	adds	r0, r2, r0
                  ADCS    r1, r3
100400e0:	4159      	adcs	r1, r3

                  MOVS    r2, #128
100400e2:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400e4:	0352      	lsls	r2, r2, #13
                  MOVS    r3, #0
100400e6:	2300      	movs	r3, #0
                  ADDS    r2, r2, r0
100400e8:	1812      	adds	r2, r2, r0
                  ADCS    r3, r1
100400ea:	414b      	adcs	r3, r1
                  LSRS    r2, r2, #21
100400ec:	0d52      	lsrs	r2, r2, #21
                  LSLS    r0, r3, #11
100400ee:	02d8      	lsls	r0, r3, #11
                  ORRS    r0, r2
100400f0:	4310      	orrs	r0, r2

                  POP {r4, pc}
100400f2:	bd10      	pop	{r4, pc}

100400f4 <mul32>:

                  ENDFUNC

EXPORT_FUNC(mul32)
                  MULS    r0, r1, r0
100400f4:	4348      	muls	r0, r1
                  MOVS    r2, #128
100400f6:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400f8:	0352      	lsls	r2, r2, #13
                  ADDS    r2, r2, r0
100400fa:	1812      	adds	r2, r2, r0
                  LSRS    r2, r2, #21
100400fc:	0d52      	lsrs	r2, r2, #21
                  MOV     r0, r2
100400fe:	4610      	mov	r0, r2

                  POP {r4, pc}
10040100:	bd10      	pop	{r4, pc}
10040102:	46c0      	nop			@ (mov r8, r8)

10040104 <strlen>:
10040104:	2300      	movs	r3, #0
10040106:	5cc2      	ldrb	r2, [r0, r3]
10040108:	3301      	adds	r3, #1
1004010a:	2a00      	cmp	r2, #0
1004010c:	d1fb      	bne.n	10040106 <strlen+0x2>
1004010e:	1e58      	subs	r0, r3, #1
10040110:	4770      	bx	lr
	...

10040114 <__gnu_thumb1_case_shi>:
10040114:	b403      	push	{r0, r1}
10040116:	4671      	mov	r1, lr
10040118:	0849      	lsrs	r1, r1, #1
1004011a:	0040      	lsls	r0, r0, #1
1004011c:	0049      	lsls	r1, r1, #1
1004011e:	5e09      	ldrsh	r1, [r1, r0]
10040120:	0049      	lsls	r1, r1, #1
10040122:	448e      	add	lr, r1
10040124:	bc03      	pop	{r0, r1}
10040126:	4770      	bx	lr

10040128 <__udivsi3>:
10040128:	2200      	movs	r2, #0
1004012a:	0843      	lsrs	r3, r0, #1
1004012c:	428b      	cmp	r3, r1
1004012e:	d374      	bcc.n	1004021a <__udivsi3+0xf2>
10040130:	0903      	lsrs	r3, r0, #4
10040132:	428b      	cmp	r3, r1
10040134:	d35f      	bcc.n	100401f6 <__udivsi3+0xce>
10040136:	0a03      	lsrs	r3, r0, #8
10040138:	428b      	cmp	r3, r1
1004013a:	d344      	bcc.n	100401c6 <__udivsi3+0x9e>
1004013c:	0b03      	lsrs	r3, r0, #12
1004013e:	428b      	cmp	r3, r1
10040140:	d328      	bcc.n	10040194 <__udivsi3+0x6c>
10040142:	0c03      	lsrs	r3, r0, #16
10040144:	428b      	cmp	r3, r1
10040146:	d30d      	bcc.n	10040164 <__udivsi3+0x3c>
10040148:	22ff      	movs	r2, #255	@ 0xff
1004014a:	0209      	lsls	r1, r1, #8
1004014c:	ba12      	rev	r2, r2
1004014e:	0c03      	lsrs	r3, r0, #16
10040150:	428b      	cmp	r3, r1
10040152:	d302      	bcc.n	1004015a <__udivsi3+0x32>
10040154:	1212      	asrs	r2, r2, #8
10040156:	0209      	lsls	r1, r1, #8
10040158:	d065      	beq.n	10040226 <__udivsi3+0xfe>
1004015a:	0b03      	lsrs	r3, r0, #12
1004015c:	428b      	cmp	r3, r1
1004015e:	d319      	bcc.n	10040194 <__udivsi3+0x6c>
10040160:	e000      	b.n	10040164 <__udivsi3+0x3c>
10040162:	0a09      	lsrs	r1, r1, #8
10040164:	0bc3      	lsrs	r3, r0, #15
10040166:	428b      	cmp	r3, r1
10040168:	d301      	bcc.n	1004016e <__udivsi3+0x46>
1004016a:	03cb      	lsls	r3, r1, #15
1004016c:	1ac0      	subs	r0, r0, r3
1004016e:	4152      	adcs	r2, r2
10040170:	0b83      	lsrs	r3, r0, #14
10040172:	428b      	cmp	r3, r1
10040174:	d301      	bcc.n	1004017a <__udivsi3+0x52>
10040176:	038b      	lsls	r3, r1, #14
10040178:	1ac0      	subs	r0, r0, r3
1004017a:	4152      	adcs	r2, r2
1004017c:	0b43      	lsrs	r3, r0, #13
1004017e:	428b      	cmp	r3, r1
10040180:	d301      	bcc.n	10040186 <__udivsi3+0x5e>
10040182:	034b      	lsls	r3, r1, #13
10040184:	1ac0      	subs	r0, r0, r3
10040186:	4152      	adcs	r2, r2
10040188:	0b03      	lsrs	r3, r0, #12
1004018a:	428b      	cmp	r3, r1
1004018c:	d301      	bcc.n	10040192 <__udivsi3+0x6a>
1004018e:	030b      	lsls	r3, r1, #12
10040190:	1ac0      	subs	r0, r0, r3
10040192:	4152      	adcs	r2, r2
10040194:	0ac3      	lsrs	r3, r0, #11
10040196:	428b      	cmp	r3, r1
10040198:	d301      	bcc.n	1004019e <__udivsi3+0x76>
1004019a:	02cb      	lsls	r3, r1, #11
1004019c:	1ac0      	subs	r0, r0, r3
1004019e:	4152      	adcs	r2, r2
100401a0:	0a83      	lsrs	r3, r0, #10
100401a2:	428b      	cmp	r3, r1
100401a4:	d301      	bcc.n	100401aa <__udivsi3+0x82>
100401a6:	028b      	lsls	r3, r1, #10
100401a8:	1ac0      	subs	r0, r0, r3
100401aa:	4152      	adcs	r2, r2
100401ac:	0a43      	lsrs	r3, r0, #9
100401ae:	428b      	cmp	r3, r1
100401b0:	d301      	bcc.n	100401b6 <__udivsi3+0x8e>
100401b2:	024b      	lsls	r3, r1, #9
100401b4:	1ac0      	subs	r0, r0, r3
100401b6:	4152      	adcs	r2, r2
100401b8:	0a03      	lsrs	r3, r0, #8
100401ba:	428b      	cmp	r3, r1
100401bc:	d301      	bcc.n	100401c2 <__udivsi3+0x9a>
100401be:	020b      	lsls	r3, r1, #8
100401c0:	1ac0      	subs	r0, r0, r3
100401c2:	4152      	adcs	r2, r2
100401c4:	d2cd      	bcs.n	10040162 <__udivsi3+0x3a>
100401c6:	09c3      	lsrs	r3, r0, #7
100401c8:	428b      	cmp	r3, r1
100401ca:	d301      	bcc.n	100401d0 <__udivsi3+0xa8>
100401cc:	01cb      	lsls	r3, r1, #7
100401ce:	1ac0      	subs	r0, r0, r3
100401d0:	4152      	adcs	r2, r2
100401d2:	0983      	lsrs	r3, r0, #6
100401d4:	428b      	cmp	r3, r1
100401d6:	d301      	bcc.n	100401dc <__udivsi3+0xb4>
100401d8:	018b      	lsls	r3, r1, #6
100401da:	1ac0      	subs	r0, r0, r3
100401dc:	4152      	adcs	r2, r2
100401de:	0943      	lsrs	r3, r0, #5
100401e0:	428b      	cmp	r3, r1
100401e2:	d301      	bcc.n	100401e8 <__udivsi3+0xc0>
100401e4:	014b      	lsls	r3, r1, #5
100401e6:	1ac0      	subs	r0, r0, r3
100401e8:	4152      	adcs	r2, r2
100401ea:	0903      	lsrs	r3, r0, #4
100401ec:	428b      	cmp	r3, r1
100401ee:	d301      	bcc.n	100401f4 <__udivsi3+0xcc>
100401f0:	010b      	lsls	r3, r1, #4
100401f2:	1ac0      	subs	r0, r0, r3
100401f4:	4152      	adcs	r2, r2
100401f6:	08c3      	lsrs	r3, r0, #3
100401f8:	428b      	cmp	r3, r1
100401fa:	d301      	bcc.n	10040200 <__udivsi3+0xd8>
100401fc:	00cb      	lsls	r3, r1, #3
100401fe:	1ac0      	subs	r0, r0, r3
10040200:	4152      	adcs	r2, r2
10040202:	0883      	lsrs	r3, r0, #2
10040204:	428b      	cmp	r3, r1
10040206:	d301      	bcc.n	1004020c <__udivsi3+0xe4>
10040208:	008b      	lsls	r3, r1, #2
1004020a:	1ac0      	subs	r0, r0, r3
1004020c:	4152      	adcs	r2, r2
1004020e:	0843      	lsrs	r3, r0, #1
10040210:	428b      	cmp	r3, r1
10040212:	d301      	bcc.n	10040218 <__udivsi3+0xf0>
10040214:	004b      	lsls	r3, r1, #1
10040216:	1ac0      	subs	r0, r0, r3
10040218:	4152      	adcs	r2, r2
1004021a:	1a41      	subs	r1, r0, r1
1004021c:	d200      	bcs.n	10040220 <__udivsi3+0xf8>
1004021e:	4601      	mov	r1, r0
10040220:	4152      	adcs	r2, r2
10040222:	4610      	mov	r0, r2
10040224:	4770      	bx	lr
10040226:	e7ff      	b.n	10040228 <__udivsi3+0x100>
10040228:	b501      	push	{r0, lr}
1004022a:	2000      	movs	r0, #0
1004022c:	f000 f8f0 	bl	10040410 <__aeabi_idiv0>
10040230:	bd02      	pop	{r1, pc}
10040232:	46c0      	nop			@ (mov r8, r8)

10040234 <__aeabi_uidivmod>:
10040234:	2900      	cmp	r1, #0
10040236:	d0f7      	beq.n	10040228 <__udivsi3+0x100>
10040238:	e776      	b.n	10040128 <__udivsi3>
1004023a:	4770      	bx	lr

1004023c <__divsi3>:
1004023c:	4603      	mov	r3, r0
1004023e:	430b      	orrs	r3, r1
10040240:	d47f      	bmi.n	10040342 <__divsi3+0x106>
10040242:	2200      	movs	r2, #0
10040244:	0843      	lsrs	r3, r0, #1
10040246:	428b      	cmp	r3, r1
10040248:	d374      	bcc.n	10040334 <__divsi3+0xf8>
1004024a:	0903      	lsrs	r3, r0, #4
1004024c:	428b      	cmp	r3, r1
1004024e:	d35f      	bcc.n	10040310 <__divsi3+0xd4>
10040250:	0a03      	lsrs	r3, r0, #8
10040252:	428b      	cmp	r3, r1
10040254:	d344      	bcc.n	100402e0 <__divsi3+0xa4>
10040256:	0b03      	lsrs	r3, r0, #12
10040258:	428b      	cmp	r3, r1
1004025a:	d328      	bcc.n	100402ae <__divsi3+0x72>
1004025c:	0c03      	lsrs	r3, r0, #16
1004025e:	428b      	cmp	r3, r1
10040260:	d30d      	bcc.n	1004027e <__divsi3+0x42>
10040262:	22ff      	movs	r2, #255	@ 0xff
10040264:	0209      	lsls	r1, r1, #8
10040266:	ba12      	rev	r2, r2
10040268:	0c03      	lsrs	r3, r0, #16
1004026a:	428b      	cmp	r3, r1
1004026c:	d302      	bcc.n	10040274 <__divsi3+0x38>
1004026e:	1212      	asrs	r2, r2, #8
10040270:	0209      	lsls	r1, r1, #8
10040272:	d065      	beq.n	10040340 <__divsi3+0x104>
10040274:	0b03      	lsrs	r3, r0, #12
10040276:	428b      	cmp	r3, r1
10040278:	d319      	bcc.n	100402ae <__divsi3+0x72>
1004027a:	e000      	b.n	1004027e <__divsi3+0x42>
1004027c:	0a09      	lsrs	r1, r1, #8
1004027e:	0bc3      	lsrs	r3, r0, #15
10040280:	428b      	cmp	r3, r1
10040282:	d301      	bcc.n	10040288 <__divsi3+0x4c>
10040284:	03cb      	lsls	r3, r1, #15
10040286:	1ac0      	subs	r0, r0, r3
10040288:	4152      	adcs	r2, r2
1004028a:	0b83      	lsrs	r3, r0, #14
1004028c:	428b      	cmp	r3, r1
1004028e:	d301      	bcc.n	10040294 <__divsi3+0x58>
10040290:	038b      	lsls	r3, r1, #14
10040292:	1ac0      	subs	r0, r0, r3
10040294:	4152      	adcs	r2, r2
10040296:	0b43      	lsrs	r3, r0, #13
10040298:	428b      	cmp	r3, r1
1004029a:	d301      	bcc.n	100402a0 <__divsi3+0x64>
1004029c:	034b      	lsls	r3, r1, #13
1004029e:	1ac0      	subs	r0, r0, r3
100402a0:	4152      	adcs	r2, r2
100402a2:	0b03      	lsrs	r3, r0, #12
100402a4:	428b      	cmp	r3, r1
100402a6:	d301      	bcc.n	100402ac <__divsi3+0x70>
100402a8:	030b      	lsls	r3, r1, #12
100402aa:	1ac0      	subs	r0, r0, r3
100402ac:	4152      	adcs	r2, r2
100402ae:	0ac3      	lsrs	r3, r0, #11
100402b0:	428b      	cmp	r3, r1
100402b2:	d301      	bcc.n	100402b8 <__divsi3+0x7c>
100402b4:	02cb      	lsls	r3, r1, #11
100402b6:	1ac0      	subs	r0, r0, r3
100402b8:	4152      	adcs	r2, r2
100402ba:	0a83      	lsrs	r3, r0, #10
100402bc:	428b      	cmp	r3, r1
100402be:	d301      	bcc.n	100402c4 <__divsi3+0x88>
100402c0:	028b      	lsls	r3, r1, #10
100402c2:	1ac0      	subs	r0, r0, r3
100402c4:	4152      	adcs	r2, r2
100402c6:	0a43      	lsrs	r3, r0, #9
100402c8:	428b      	cmp	r3, r1
100402ca:	d301      	bcc.n	100402d0 <__divsi3+0x94>
100402cc:	024b      	lsls	r3, r1, #9
100402ce:	1ac0      	subs	r0, r0, r3
100402d0:	4152      	adcs	r2, r2
100402d2:	0a03      	lsrs	r3, r0, #8
100402d4:	428b      	cmp	r3, r1
100402d6:	d301      	bcc.n	100402dc <__divsi3+0xa0>
100402d8:	020b      	lsls	r3, r1, #8
100402da:	1ac0      	subs	r0, r0, r3
100402dc:	4152      	adcs	r2, r2
100402de:	d2cd      	bcs.n	1004027c <__divsi3+0x40>
100402e0:	09c3      	lsrs	r3, r0, #7
100402e2:	428b      	cmp	r3, r1
100402e4:	d301      	bcc.n	100402ea <__divsi3+0xae>
100402e6:	01cb      	lsls	r3, r1, #7
100402e8:	1ac0      	subs	r0, r0, r3
100402ea:	4152      	adcs	r2, r2
100402ec:	0983      	lsrs	r3, r0, #6
100402ee:	428b      	cmp	r3, r1
100402f0:	d301      	bcc.n	100402f6 <__divsi3+0xba>
100402f2:	018b      	lsls	r3, r1, #6
100402f4:	1ac0      	subs	r0, r0, r3
100402f6:	4152      	adcs	r2, r2
100402f8:	0943      	lsrs	r3, r0, #5
100402fa:	428b      	cmp	r3, r1
100402fc:	d301      	bcc.n	10040302 <__divsi3+0xc6>
100402fe:	014b      	lsls	r3, r1, #5
10040300:	1ac0      	subs	r0, r0, r3
10040302:	4152      	adcs	r2, r2
10040304:	0903      	lsrs	r3, r0, #4
10040306:	428b      	cmp	r3, r1
10040308:	d301      	bcc.n	1004030e <__divsi3+0xd2>
1004030a:	010b      	lsls	r3, r1, #4
1004030c:	1ac0      	subs	r0, r0, r3
1004030e:	4152      	adcs	r2, r2
10040310:	08c3      	lsrs	r3, r0, #3
10040312:	428b      	cmp	r3, r1
10040314:	d301      	bcc.n	1004031a <__divsi3+0xde>
10040316:	00cb      	lsls	r3, r1, #3
10040318:	1ac0      	subs	r0, r0, r3
1004031a:	4152      	adcs	r2, r2
1004031c:	0883      	lsrs	r3, r0, #2
1004031e:	428b      	cmp	r3, r1
10040320:	d301      	bcc.n	10040326 <__divsi3+0xea>
10040322:	008b      	lsls	r3, r1, #2
10040324:	1ac0      	subs	r0, r0, r3
10040326:	4152      	adcs	r2, r2
10040328:	0843      	lsrs	r3, r0, #1
1004032a:	428b      	cmp	r3, r1
1004032c:	d301      	bcc.n	10040332 <__divsi3+0xf6>
1004032e:	004b      	lsls	r3, r1, #1
10040330:	1ac0      	subs	r0, r0, r3
10040332:	4152      	adcs	r2, r2
10040334:	1a41      	subs	r1, r0, r1
10040336:	d200      	bcs.n	1004033a <__divsi3+0xfe>
10040338:	4601      	mov	r1, r0
1004033a:	4152      	adcs	r2, r2
1004033c:	4610      	mov	r0, r2
1004033e:	4770      	bx	lr
10040340:	e05d      	b.n	100403fe <__divsi3+0x1c2>
10040342:	0fca      	lsrs	r2, r1, #31
10040344:	d000      	beq.n	10040348 <__divsi3+0x10c>
10040346:	4249      	negs	r1, r1
10040348:	1003      	asrs	r3, r0, #32
1004034a:	d300      	bcc.n	1004034e <__divsi3+0x112>
1004034c:	4240      	negs	r0, r0
1004034e:	4053      	eors	r3, r2
10040350:	2200      	movs	r2, #0
10040352:	469c      	mov	ip, r3
10040354:	0903      	lsrs	r3, r0, #4
10040356:	428b      	cmp	r3, r1
10040358:	d32d      	bcc.n	100403b6 <__divsi3+0x17a>
1004035a:	0a03      	lsrs	r3, r0, #8
1004035c:	428b      	cmp	r3, r1
1004035e:	d312      	bcc.n	10040386 <__divsi3+0x14a>
10040360:	22fc      	movs	r2, #252	@ 0xfc
10040362:	0189      	lsls	r1, r1, #6
10040364:	ba12      	rev	r2, r2
10040366:	0a03      	lsrs	r3, r0, #8
10040368:	428b      	cmp	r3, r1
1004036a:	d30c      	bcc.n	10040386 <__divsi3+0x14a>
1004036c:	0189      	lsls	r1, r1, #6
1004036e:	1192      	asrs	r2, r2, #6
10040370:	428b      	cmp	r3, r1
10040372:	d308      	bcc.n	10040386 <__divsi3+0x14a>
10040374:	0189      	lsls	r1, r1, #6
10040376:	1192      	asrs	r2, r2, #6
10040378:	428b      	cmp	r3, r1
1004037a:	d304      	bcc.n	10040386 <__divsi3+0x14a>
1004037c:	0189      	lsls	r1, r1, #6
1004037e:	d03a      	beq.n	100403f6 <__divsi3+0x1ba>
10040380:	1192      	asrs	r2, r2, #6
10040382:	e000      	b.n	10040386 <__divsi3+0x14a>
10040384:	0989      	lsrs	r1, r1, #6
10040386:	09c3      	lsrs	r3, r0, #7
10040388:	428b      	cmp	r3, r1
1004038a:	d301      	bcc.n	10040390 <__divsi3+0x154>
1004038c:	01cb      	lsls	r3, r1, #7
1004038e:	1ac0      	subs	r0, r0, r3
10040390:	4152      	adcs	r2, r2
10040392:	0983      	lsrs	r3, r0, #6
10040394:	428b      	cmp	r3, r1
10040396:	d301      	bcc.n	1004039c <__divsi3+0x160>
10040398:	018b      	lsls	r3, r1, #6
1004039a:	1ac0      	subs	r0, r0, r3
1004039c:	4152      	adcs	r2, r2
1004039e:	0943      	lsrs	r3, r0, #5
100403a0:	428b      	cmp	r3, r1
100403a2:	d301      	bcc.n	100403a8 <__divsi3+0x16c>
100403a4:	014b      	lsls	r3, r1, #5
100403a6:	1ac0      	subs	r0, r0, r3
100403a8:	4152      	adcs	r2, r2
100403aa:	0903      	lsrs	r3, r0, #4
100403ac:	428b      	cmp	r3, r1
100403ae:	d301      	bcc.n	100403b4 <__divsi3+0x178>
100403b0:	010b      	lsls	r3, r1, #4
100403b2:	1ac0      	subs	r0, r0, r3
100403b4:	4152      	adcs	r2, r2
100403b6:	08c3      	lsrs	r3, r0, #3
100403b8:	428b      	cmp	r3, r1
100403ba:	d301      	bcc.n	100403c0 <__divsi3+0x184>
100403bc:	00cb      	lsls	r3, r1, #3
100403be:	1ac0      	subs	r0, r0, r3
100403c0:	4152      	adcs	r2, r2
100403c2:	0883      	lsrs	r3, r0, #2
100403c4:	428b      	cmp	r3, r1
100403c6:	d301      	bcc.n	100403cc <__divsi3+0x190>
100403c8:	008b      	lsls	r3, r1, #2
100403ca:	1ac0      	subs	r0, r0, r3
100403cc:	4152      	adcs	r2, r2
100403ce:	d2d9      	bcs.n	10040384 <__divsi3+0x148>
100403d0:	0843      	lsrs	r3, r0, #1
100403d2:	428b      	cmp	r3, r1
100403d4:	d301      	bcc.n	100403da <__divsi3+0x19e>
100403d6:	004b      	lsls	r3, r1, #1
100403d8:	1ac0      	subs	r0, r0, r3
100403da:	4152      	adcs	r2, r2
100403dc:	1a41      	subs	r1, r0, r1
100403de:	d200      	bcs.n	100403e2 <__divsi3+0x1a6>
100403e0:	4601      	mov	r1, r0
100403e2:	4663      	mov	r3, ip
100403e4:	4152      	adcs	r2, r2
100403e6:	105b      	asrs	r3, r3, #1
100403e8:	4610      	mov	r0, r2
100403ea:	d301      	bcc.n	100403f0 <__divsi3+0x1b4>
100403ec:	4240      	negs	r0, r0
100403ee:	2b00      	cmp	r3, #0
100403f0:	d500      	bpl.n	100403f4 <__divsi3+0x1b8>
100403f2:	4249      	negs	r1, r1
100403f4:	4770      	bx	lr
100403f6:	4663      	mov	r3, ip
100403f8:	105b      	asrs	r3, r3, #1
100403fa:	d300      	bcc.n	100403fe <__divsi3+0x1c2>
100403fc:	4240      	negs	r0, r0
100403fe:	b501      	push	{r0, lr}
10040400:	2000      	movs	r0, #0
10040402:	f000 f805 	bl	10040410 <__aeabi_idiv0>
10040406:	bd02      	pop	{r1, pc}

10040408 <__aeabi_idivmod>:
10040408:	2900      	cmp	r1, #0
1004040a:	d0f8      	beq.n	100403fe <__divsi3+0x1c2>
1004040c:	e716      	b.n	1004023c <__divsi3>
1004040e:	4770      	bx	lr

10040410 <__aeabi_idiv0>:
10040410:	4770      	bx	lr
10040412:	46c0      	nop			@ (mov r8, r8)

10040414 <__aeabi_uldivmod>:
10040414:	2b00      	cmp	r3, #0
10040416:	d111      	bne.n	1004043c <__aeabi_uldivmod+0x28>
10040418:	2a00      	cmp	r2, #0
1004041a:	d10f      	bne.n	1004043c <__aeabi_uldivmod+0x28>
1004041c:	2900      	cmp	r1, #0
1004041e:	d100      	bne.n	10040422 <__aeabi_uldivmod+0xe>
10040420:	2800      	cmp	r0, #0
10040422:	d002      	beq.n	1004042a <__aeabi_uldivmod+0x16>
10040424:	2100      	movs	r1, #0
10040426:	43c9      	mvns	r1, r1
10040428:	0008      	movs	r0, r1
1004042a:	b407      	push	{r0, r1, r2}
1004042c:	4802      	ldr	r0, [pc, #8]	@ (10040438 <__aeabi_uldivmod+0x24>)
1004042e:	a102      	add	r1, pc, #8	@ (adr r1, 10040438 <__aeabi_uldivmod+0x24>)
10040430:	1840      	adds	r0, r0, r1
10040432:	9002      	str	r0, [sp, #8]
10040434:	bd03      	pop	{r0, r1, pc}
10040436:	46c0      	nop			@ (mov r8, r8)
10040438:	ffffffd9 	.word	0xffffffd9
1004043c:	b403      	push	{r0, r1}
1004043e:	4668      	mov	r0, sp
10040440:	b501      	push	{r0, lr}
10040442:	9802      	ldr	r0, [sp, #8]
10040444:	f000 f806 	bl	10040454 <__udivmoddi4>
10040448:	9b01      	ldr	r3, [sp, #4]
1004044a:	469e      	mov	lr, r3
1004044c:	b002      	add	sp, #8
1004044e:	bc0c      	pop	{r2, r3}
10040450:	4770      	bx	lr
10040452:	46c0      	nop			@ (mov r8, r8)

10040454 <__udivmoddi4>:
10040454:	b5f0      	push	{r4, r5, r6, r7, lr}
10040456:	4657      	mov	r7, sl
10040458:	464e      	mov	r6, r9
1004045a:	4645      	mov	r5, r8
1004045c:	46de      	mov	lr, fp
1004045e:	b5e0      	push	{r5, r6, r7, lr}
10040460:	0004      	movs	r4, r0
10040462:	000d      	movs	r5, r1
10040464:	4692      	mov	sl, r2
10040466:	4699      	mov	r9, r3
10040468:	b083      	sub	sp, #12
1004046a:	428b      	cmp	r3, r1
1004046c:	d830      	bhi.n	100404d0 <__udivmoddi4+0x7c>
1004046e:	d02d      	beq.n	100404cc <__udivmoddi4+0x78>
10040470:	4649      	mov	r1, r9
10040472:	4650      	mov	r0, sl
10040474:	f000 f8ba 	bl	100405ec <__clzdi2>
10040478:	0029      	movs	r1, r5
1004047a:	0006      	movs	r6, r0
1004047c:	0020      	movs	r0, r4
1004047e:	f000 f8b5 	bl	100405ec <__clzdi2>
10040482:	1a33      	subs	r3, r6, r0
10040484:	4698      	mov	r8, r3
10040486:	3b20      	subs	r3, #32
10040488:	d434      	bmi.n	100404f4 <__udivmoddi4+0xa0>
1004048a:	469b      	mov	fp, r3
1004048c:	4653      	mov	r3, sl
1004048e:	465a      	mov	r2, fp
10040490:	4093      	lsls	r3, r2
10040492:	4642      	mov	r2, r8
10040494:	001f      	movs	r7, r3
10040496:	4653      	mov	r3, sl
10040498:	4093      	lsls	r3, r2
1004049a:	001e      	movs	r6, r3
1004049c:	42af      	cmp	r7, r5
1004049e:	d83b      	bhi.n	10040518 <__udivmoddi4+0xc4>
100404a0:	42af      	cmp	r7, r5
100404a2:	d100      	bne.n	100404a6 <__udivmoddi4+0x52>
100404a4:	e079      	b.n	1004059a <__udivmoddi4+0x146>
100404a6:	465b      	mov	r3, fp
100404a8:	1ba4      	subs	r4, r4, r6
100404aa:	41bd      	sbcs	r5, r7
100404ac:	2b00      	cmp	r3, #0
100404ae:	da00      	bge.n	100404b2 <__udivmoddi4+0x5e>
100404b0:	e076      	b.n	100405a0 <__udivmoddi4+0x14c>
100404b2:	2200      	movs	r2, #0
100404b4:	2300      	movs	r3, #0
100404b6:	9200      	str	r2, [sp, #0]
100404b8:	9301      	str	r3, [sp, #4]
100404ba:	2301      	movs	r3, #1
100404bc:	465a      	mov	r2, fp
100404be:	4093      	lsls	r3, r2
100404c0:	9301      	str	r3, [sp, #4]
100404c2:	2301      	movs	r3, #1
100404c4:	4642      	mov	r2, r8
100404c6:	4093      	lsls	r3, r2
100404c8:	9300      	str	r3, [sp, #0]
100404ca:	e029      	b.n	10040520 <__udivmoddi4+0xcc>
100404cc:	4282      	cmp	r2, r0
100404ce:	d9cf      	bls.n	10040470 <__udivmoddi4+0x1c>
100404d0:	2200      	movs	r2, #0
100404d2:	2300      	movs	r3, #0
100404d4:	9200      	str	r2, [sp, #0]
100404d6:	9301      	str	r3, [sp, #4]
100404d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100404da:	2b00      	cmp	r3, #0
100404dc:	d001      	beq.n	100404e2 <__udivmoddi4+0x8e>
100404de:	601c      	str	r4, [r3, #0]
100404e0:	605d      	str	r5, [r3, #4]
100404e2:	9800      	ldr	r0, [sp, #0]
100404e4:	9901      	ldr	r1, [sp, #4]
100404e6:	b003      	add	sp, #12
100404e8:	bcf0      	pop	{r4, r5, r6, r7}
100404ea:	46bb      	mov	fp, r7
100404ec:	46b2      	mov	sl, r6
100404ee:	46a9      	mov	r9, r5
100404f0:	46a0      	mov	r8, r4
100404f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100404f4:	4642      	mov	r2, r8
100404f6:	469b      	mov	fp, r3
100404f8:	2320      	movs	r3, #32
100404fa:	1a9b      	subs	r3, r3, r2
100404fc:	4652      	mov	r2, sl
100404fe:	40da      	lsrs	r2, r3
10040500:	4641      	mov	r1, r8
10040502:	0013      	movs	r3, r2
10040504:	464a      	mov	r2, r9
10040506:	408a      	lsls	r2, r1
10040508:	0017      	movs	r7, r2
1004050a:	4642      	mov	r2, r8
1004050c:	431f      	orrs	r7, r3
1004050e:	4653      	mov	r3, sl
10040510:	4093      	lsls	r3, r2
10040512:	001e      	movs	r6, r3
10040514:	42af      	cmp	r7, r5
10040516:	d9c3      	bls.n	100404a0 <__udivmoddi4+0x4c>
10040518:	2200      	movs	r2, #0
1004051a:	2300      	movs	r3, #0
1004051c:	9200      	str	r2, [sp, #0]
1004051e:	9301      	str	r3, [sp, #4]
10040520:	4643      	mov	r3, r8
10040522:	2b00      	cmp	r3, #0
10040524:	d0d8      	beq.n	100404d8 <__udivmoddi4+0x84>
10040526:	07fb      	lsls	r3, r7, #31
10040528:	0872      	lsrs	r2, r6, #1
1004052a:	431a      	orrs	r2, r3
1004052c:	4646      	mov	r6, r8
1004052e:	087b      	lsrs	r3, r7, #1
10040530:	e00e      	b.n	10040550 <__udivmoddi4+0xfc>
10040532:	42ab      	cmp	r3, r5
10040534:	d101      	bne.n	1004053a <__udivmoddi4+0xe6>
10040536:	42a2      	cmp	r2, r4
10040538:	d80c      	bhi.n	10040554 <__udivmoddi4+0x100>
1004053a:	1aa4      	subs	r4, r4, r2
1004053c:	419d      	sbcs	r5, r3
1004053e:	2001      	movs	r0, #1
10040540:	1924      	adds	r4, r4, r4
10040542:	416d      	adcs	r5, r5
10040544:	2100      	movs	r1, #0
10040546:	3e01      	subs	r6, #1
10040548:	1824      	adds	r4, r4, r0
1004054a:	414d      	adcs	r5, r1
1004054c:	2e00      	cmp	r6, #0
1004054e:	d006      	beq.n	1004055e <__udivmoddi4+0x10a>
10040550:	42ab      	cmp	r3, r5
10040552:	d9ee      	bls.n	10040532 <__udivmoddi4+0xde>
10040554:	3e01      	subs	r6, #1
10040556:	1924      	adds	r4, r4, r4
10040558:	416d      	adcs	r5, r5
1004055a:	2e00      	cmp	r6, #0
1004055c:	d1f8      	bne.n	10040550 <__udivmoddi4+0xfc>
1004055e:	9800      	ldr	r0, [sp, #0]
10040560:	9901      	ldr	r1, [sp, #4]
10040562:	465b      	mov	r3, fp
10040564:	1900      	adds	r0, r0, r4
10040566:	4169      	adcs	r1, r5
10040568:	2b00      	cmp	r3, #0
1004056a:	db24      	blt.n	100405b6 <__udivmoddi4+0x162>
1004056c:	002b      	movs	r3, r5
1004056e:	465a      	mov	r2, fp
10040570:	4644      	mov	r4, r8
10040572:	40d3      	lsrs	r3, r2
10040574:	002a      	movs	r2, r5
10040576:	40e2      	lsrs	r2, r4
10040578:	001c      	movs	r4, r3
1004057a:	465b      	mov	r3, fp
1004057c:	0015      	movs	r5, r2
1004057e:	2b00      	cmp	r3, #0
10040580:	db2a      	blt.n	100405d8 <__udivmoddi4+0x184>
10040582:	0026      	movs	r6, r4
10040584:	409e      	lsls	r6, r3
10040586:	0033      	movs	r3, r6
10040588:	0026      	movs	r6, r4
1004058a:	4647      	mov	r7, r8
1004058c:	40be      	lsls	r6, r7
1004058e:	0032      	movs	r2, r6
10040590:	1a80      	subs	r0, r0, r2
10040592:	4199      	sbcs	r1, r3
10040594:	9000      	str	r0, [sp, #0]
10040596:	9101      	str	r1, [sp, #4]
10040598:	e79e      	b.n	100404d8 <__udivmoddi4+0x84>
1004059a:	42a3      	cmp	r3, r4
1004059c:	d8bc      	bhi.n	10040518 <__udivmoddi4+0xc4>
1004059e:	e782      	b.n	100404a6 <__udivmoddi4+0x52>
100405a0:	4642      	mov	r2, r8
100405a2:	2320      	movs	r3, #32
100405a4:	2100      	movs	r1, #0
100405a6:	1a9b      	subs	r3, r3, r2
100405a8:	2200      	movs	r2, #0
100405aa:	9100      	str	r1, [sp, #0]
100405ac:	9201      	str	r2, [sp, #4]
100405ae:	2201      	movs	r2, #1
100405b0:	40da      	lsrs	r2, r3
100405b2:	9201      	str	r2, [sp, #4]
100405b4:	e785      	b.n	100404c2 <__udivmoddi4+0x6e>
100405b6:	4642      	mov	r2, r8
100405b8:	2320      	movs	r3, #32
100405ba:	1a9b      	subs	r3, r3, r2
100405bc:	002a      	movs	r2, r5
100405be:	4646      	mov	r6, r8
100405c0:	409a      	lsls	r2, r3
100405c2:	0023      	movs	r3, r4
100405c4:	40f3      	lsrs	r3, r6
100405c6:	4644      	mov	r4, r8
100405c8:	4313      	orrs	r3, r2
100405ca:	002a      	movs	r2, r5
100405cc:	40e2      	lsrs	r2, r4
100405ce:	001c      	movs	r4, r3
100405d0:	465b      	mov	r3, fp
100405d2:	0015      	movs	r5, r2
100405d4:	2b00      	cmp	r3, #0
100405d6:	dad4      	bge.n	10040582 <__udivmoddi4+0x12e>
100405d8:	4642      	mov	r2, r8
100405da:	002f      	movs	r7, r5
100405dc:	2320      	movs	r3, #32
100405de:	0026      	movs	r6, r4
100405e0:	4097      	lsls	r7, r2
100405e2:	1a9b      	subs	r3, r3, r2
100405e4:	40de      	lsrs	r6, r3
100405e6:	003b      	movs	r3, r7
100405e8:	4333      	orrs	r3, r6
100405ea:	e7cd      	b.n	10040588 <__udivmoddi4+0x134>

100405ec <__clzdi2>:
100405ec:	b510      	push	{r4, lr}
100405ee:	2900      	cmp	r1, #0
100405f0:	d103      	bne.n	100405fa <__clzdi2+0xe>
100405f2:	f000 f807 	bl	10040604 <__clzsi2>
100405f6:	3020      	adds	r0, #32
100405f8:	e002      	b.n	10040600 <__clzdi2+0x14>
100405fa:	0008      	movs	r0, r1
100405fc:	f000 f802 	bl	10040604 <__clzsi2>
10040600:	bd10      	pop	{r4, pc}
10040602:	46c0      	nop			@ (mov r8, r8)

10040604 <__clzsi2>:
10040604:	211c      	movs	r1, #28
10040606:	2301      	movs	r3, #1
10040608:	041b      	lsls	r3, r3, #16
1004060a:	4298      	cmp	r0, r3
1004060c:	d301      	bcc.n	10040612 <__clzsi2+0xe>
1004060e:	0c00      	lsrs	r0, r0, #16
10040610:	3910      	subs	r1, #16
10040612:	0a1b      	lsrs	r3, r3, #8
10040614:	4298      	cmp	r0, r3
10040616:	d301      	bcc.n	1004061c <__clzsi2+0x18>
10040618:	0a00      	lsrs	r0, r0, #8
1004061a:	3908      	subs	r1, #8
1004061c:	091b      	lsrs	r3, r3, #4
1004061e:	4298      	cmp	r0, r3
10040620:	d301      	bcc.n	10040626 <__clzsi2+0x22>
10040622:	0900      	lsrs	r0, r0, #4
10040624:	3904      	subs	r1, #4
10040626:	a202      	add	r2, pc, #8	@ (adr r2, 10040630 <__clzsi2+0x2c>)
10040628:	5c10      	ldrb	r0, [r2, r0]
1004062a:	1840      	adds	r0, r0, r1
1004062c:	4770      	bx	lr
1004062e:	46c0      	nop			@ (mov r8, r8)
10040630:	02020304 	.word	0x02020304
10040634:	01010101 	.word	0x01010101
	...

10040640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
int SystemClock_Config(void)
{
10040640:	b590      	push	{r4, r7, lr}
10040642:	b089      	sub	sp, #36	@ 0x24
10040644:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10040646:	2408      	movs	r4, #8
10040648:	193b      	adds	r3, r7, r4
1004064a:	0018      	movs	r0, r3
1004064c:	2318      	movs	r3, #24
1004064e:	001a      	movs	r2, r3
10040650:	2100      	movs	r1, #0
10040652:	f006 f9af 	bl	100469b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10040656:	003b      	movs	r3, r7
10040658:	0018      	movs	r0, r3
1004065a:	2308      	movs	r3, #8
1004065c:	001a      	movs	r2, r3
1004065e:	2100      	movs	r1, #0
10040660:	f006 f9a8 	bl	100469b4 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
10040664:	193b      	adds	r3, r7, r4
10040666:	2205      	movs	r2, #5
10040668:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
1004066a:	193b      	adds	r3, r7, r4
1004066c:	2280      	movs	r2, #128	@ 0x80
1004066e:	0252      	lsls	r2, r2, #9
10040670:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
10040672:	193b      	adds	r3, r7, r4
10040674:	2204      	movs	r2, #4
10040676:	611a      	str	r2, [r3, #16]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10040678:	193b      	adds	r3, r7, r4
1004067a:	0018      	movs	r0, r3
1004067c:	f004 f92a 	bl	100448d4 <HAL_RCC_OscConfig>
10040680:	1e03      	subs	r3, r0, #0
10040682:	d001      	beq.n	10040688 <SystemClock_Config+0x48>
	{
		return INIT_ERROR;
10040684:	2300      	movs	r3, #0
10040686:	e00f      	b.n	100406a8 <SystemClock_Config+0x68>
	}

	/** Configure the SYSCLKSource and SYSCLKDivider
	*/
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_RC64MPLL;
10040688:	003b      	movs	r3, r7
1004068a:	2200      	movs	r2, #0
1004068c:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV1;
1004068e:	003b      	movs	r3, r7
10040690:	2200      	movs	r2, #0
10040692:	605a      	str	r2, [r3, #4]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_1) != HAL_OK)
10040694:	003b      	movs	r3, r7
10040696:	2110      	movs	r1, #16
10040698:	0018      	movs	r0, r3
1004069a:	f004 fa65 	bl	10044b68 <HAL_RCC_ClockConfig>
1004069e:	1e03      	subs	r3, r0, #0
100406a0:	d001      	beq.n	100406a6 <SystemClock_Config+0x66>
	{
		return INIT_ERROR;
100406a2:	2300      	movs	r3, #0
100406a4:	e000      	b.n	100406a8 <SystemClock_Config+0x68>
	}
	return INIT_OK;
100406a6:	2301      	movs	r3, #1
}
100406a8:	0018      	movs	r0, r3
100406aa:	46bd      	mov	sp, r7
100406ac:	b009      	add	sp, #36	@ 0x24
100406ae:	bd90      	pop	{r4, r7, pc}

100406b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
int PeriphCommonClock_Config(void)
{
100406b0:	b580      	push	{r7, lr}
100406b2:	b086      	sub	sp, #24
100406b4:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
100406b6:	003b      	movs	r3, r7
100406b8:	0018      	movs	r0, r3
100406ba:	2318      	movs	r3, #24
100406bc:	001a      	movs	r2, r3
100406be:	2100      	movs	r1, #0
100406c0:	f006 f978 	bl	100469b4 <memset>

	/** Initializes the peripherals clock
	*/
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
100406c4:	003b      	movs	r3, r7
100406c6:	2202      	movs	r2, #2
100406c8:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
100406ca:	003b      	movs	r3, r7
100406cc:	2280      	movs	r2, #128	@ 0x80
100406ce:	0152      	lsls	r2, r2, #5
100406d0:	615a      	str	r2, [r3, #20]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
100406d2:	003b      	movs	r3, r7
100406d4:	0018      	movs	r0, r3
100406d6:	f004 fbdd 	bl	10044e94 <HAL_RCCEx_PeriphCLKConfig>
100406da:	1e03      	subs	r3, r0, #0
100406dc:	d001      	beq.n	100406e2 <PeriphCommonClock_Config+0x32>
	{
		return INIT_ERROR;
100406de:	2300      	movs	r3, #0
100406e0:	e000      	b.n	100406e4 <PeriphCommonClock_Config+0x34>
	}
	return INIT_OK;
100406e2:	2301      	movs	r3, #1
}
100406e4:	0018      	movs	r0, r3
100406e6:	46bd      	mov	sp, r7
100406e8:	b006      	add	sp, #24
100406ea:	bd80      	pop	{r7, pc}

100406ec <BOARD_Init>:
 * @function: BOARD_Init()
 * @brief: initialize the board's timers
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int BOARD_Init(void){
100406ec:	b580      	push	{r7, lr}
100406ee:	b082      	sub	sp, #8
100406f0:	af00      	add	r7, sp, #0

	HAL_Init();
100406f2:	f001 fd91 	bl	10042218 <HAL_Init>
	int errorFlag = INIT_OK;
100406f6:	2301      	movs	r3, #1
100406f8:	607b      	str	r3, [r7, #4]
	if(PeriphCommonClock_Config() == INIT_ERROR){
100406fa:	f7ff ffd9 	bl	100406b0 <PeriphCommonClock_Config>
100406fe:	1e03      	subs	r3, r0, #0
10040700:	d101      	bne.n	10040706 <BOARD_Init+0x1a>
		errorFlag = INIT_ERROR;
10040702:	2300      	movs	r3, #0
10040704:	607b      	str	r3, [r7, #4]
	}
	if(SystemClock_Config() == INIT_ERROR){
10040706:	f7ff ff9b 	bl	10040640 <SystemClock_Config>
1004070a:	1e03      	subs	r3, r0, #0
1004070c:	d101      	bne.n	10040712 <BOARD_Init+0x26>
		errorFlag = INIT_ERROR;
1004070e:	2300      	movs	r3, #0
10040710:	607b      	str	r3, [r7, #4]
	}
	return errorFlag;
10040712:	687b      	ldr	r3, [r7, #4]
}
10040714:	0018      	movs	r0, r3
10040716:	46bd      	mov	sp, r7
10040718:	b002      	add	sp, #8
1004071a:	bd80      	pop	{r7, pc}

1004071c <BOARD_CrashHandler>:
 * @brief: disables all interrupts and enters an infinite loop
 * @param: none
 * @return: none
 */
void BOARD_CrashHandler(void)
{
1004071c:	b580      	push	{r7, lr}
1004071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10040720:	b672      	cpsid	i
}
10040722:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1){
10040724:	46c0      	nop			@ (mov r8, r8)
10040726:	e7fd      	b.n	10040724 <BOARD_CrashHandler+0x8>

10040728 <Error_Handler>:
 * @brief: disables all interrupts and enters an infinite loop
 * @param: none
 * @return: none
 */
void Error_Handler(void)
{
10040728:	b580      	push	{r7, lr}
1004072a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
1004072c:	b672      	cpsid	i
}
1004072e:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1);
10040730:	46c0      	nop			@ (mov r8, r8)
10040732:	e7fd      	b.n	10040730 <Error_Handler+0x8>

10040734 <COMM_Event_Init>:
 * @Function: EVENT_COMM_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t COMM_Event_Init(FIFO Queue){
10040734:	b580      	push	{r7, lr}
10040736:	b084      	sub	sp, #16
10040738:	af00      	add	r7, sp, #0
1004073a:	6078      	str	r0, [r7, #4]
	commSM = init;
1004073c:	4b0a      	ldr	r3, [pc, #40]	@ (10040768 <COMM_Event_Init+0x34>)
1004073e:	2200      	movs	r2, #0
10040740:	701a      	strb	r2, [r3, #0]
	COMMqueue = Queue;
10040742:	4b0a      	ldr	r3, [pc, #40]	@ (1004076c <COMM_Event_Init+0x38>)
10040744:	687a      	ldr	r2, [r7, #4]
10040746:	601a      	str	r2, [r3, #0]
	COMM_Event_Post((Event_t){EVENT_INIT, 0});
10040748:	210c      	movs	r1, #12
1004074a:	187b      	adds	r3, r7, r1
1004074c:	2201      	movs	r2, #1
1004074e:	701a      	strb	r2, [r3, #0]
10040750:	187b      	adds	r3, r7, r1
10040752:	2200      	movs	r2, #0
10040754:	805a      	strh	r2, [r3, #2]
10040756:	187b      	adds	r3, r7, r1
10040758:	6818      	ldr	r0, [r3, #0]
1004075a:	f000 f809 	bl	10040770 <COMM_Event_Post>
	return INIT_OK;
1004075e:	2301      	movs	r3, #1
}
10040760:	0018      	movs	r0, r3
10040762:	46bd      	mov	sp, r7
10040764:	b004      	add	sp, #16
10040766:	bd80      	pop	{r7, pc}
10040768:	20000194 	.word	0x20000194
1004076c:	20000198 	.word	0x20000198

10040770 <COMM_Event_Post>:

void COMM_Event_Post(Event_t event){
10040770:	b580      	push	{r7, lr}
10040772:	b082      	sub	sp, #8
10040774:	af00      	add	r7, sp, #0
10040776:	1d3b      	adds	r3, r7, #4
10040778:	6018      	str	r0, [r3, #0]
	FIFO_Enqueue(COMMqueue, event);
1004077a:	4b05      	ldr	r3, [pc, #20]	@ (10040790 <COMM_Event_Post+0x20>)
1004077c:	681a      	ldr	r2, [r3, #0]
1004077e:	1d3b      	adds	r3, r7, #4
10040780:	6819      	ldr	r1, [r3, #0]
10040782:	0010      	movs	r0, r2
10040784:	f000 fb81 	bl	10040e8a <FIFO_Enqueue>
}
10040788:	46c0      	nop			@ (mov r8, r8)
1004078a:	46bd      	mov	sp, r7
1004078c:	b002      	add	sp, #8
1004078e:	bd80      	pop	{r7, pc}
10040790:	20000198 	.word	0x20000198

10040794 <COMM_Event_Updater>:
 * @Function: EVENT_COMM_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the 
 * @param: none
 * @return: An event 
 */
Event_t COMM_Event_Updater(void){
10040794:	b5f0      	push	{r4, r5, r6, r7, lr}
10040796:	b087      	sub	sp, #28
10040798:	af00      	add	r7, sp, #0
	uint8_t event = 0;
1004079a:	2317      	movs	r3, #23
1004079c:	18fb      	adds	r3, r7, r3
1004079e:	2200      	movs	r2, #0
100407a0:	701a      	strb	r2, [r3, #0]
    Event_t out = (Event_t){EVENT_NONE, 0};
100407a2:	250c      	movs	r5, #12
100407a4:	197b      	adds	r3, r7, r5
100407a6:	2200      	movs	r2, #0
100407a8:	701a      	strb	r2, [r3, #0]
100407aa:	197b      	adds	r3, r7, r5
100407ac:	2200      	movs	r2, #0
100407ae:	805a      	strh	r2, [r3, #2]
    char input = USART_ReadRx();
100407b0:	2616      	movs	r6, #22
100407b2:	19bc      	adds	r4, r7, r6
100407b4:	f000 ff2c 	bl	10041610 <USART_ReadRx>
100407b8:	0003      	movs	r3, r0
100407ba:	7023      	strb	r3, [r4, #0]
    if(input != UARTFAILED){
100407bc:	0031      	movs	r1, r6
100407be:	187b      	adds	r3, r7, r1
100407c0:	781b      	ldrb	r3, [r3, #0]
100407c2:	2b25      	cmp	r3, #37	@ 0x25
100407c4:	d00b      	beq.n	100407de <COMM_Event_Updater+0x4a>
    	event = 1;
100407c6:	2317      	movs	r3, #23
100407c8:	18fb      	adds	r3, r7, r3
100407ca:	2201      	movs	r2, #1
100407cc:	701a      	strb	r2, [r3, #0]
    	out.status = EVENT_USART;
100407ce:	197b      	adds	r3, r7, r5
100407d0:	2206      	movs	r2, #6
100407d2:	701a      	strb	r2, [r3, #0]
    	out.data = (uint16_t)input;
100407d4:	187b      	adds	r3, r7, r1
100407d6:	781b      	ldrb	r3, [r3, #0]
100407d8:	b29a      	uxth	r2, r3
100407da:	197b      	adds	r3, r7, r5
100407dc:	805a      	strh	r2, [r3, #2]
    }
    if(sendinglogs == 1){
100407de:	4b1c      	ldr	r3, [pc, #112]	@ (10040850 <COMM_Event_Updater+0xbc>)
100407e0:	781b      	ldrb	r3, [r3, #0]
100407e2:	2b01      	cmp	r3, #1
100407e4:	d110      	bne.n	10040808 <COMM_Event_Updater+0x74>
    	if(USART_TxEmpty()){
100407e6:	f000 ffa5 	bl	10041734 <USART_TxEmpty>
100407ea:	1e03      	subs	r3, r0, #0
100407ec:	d00c      	beq.n	10040808 <COMM_Event_Updater+0x74>
    		FIFO_Enqueue(COMMqueue, (Event_t){EVENT_USART_READY, 0});
100407ee:	4b19      	ldr	r3, [pc, #100]	@ (10040854 <COMM_Event_Updater+0xc0>)
100407f0:	681a      	ldr	r2, [r3, #0]
100407f2:	1d3b      	adds	r3, r7, #4
100407f4:	2107      	movs	r1, #7
100407f6:	7019      	strb	r1, [r3, #0]
100407f8:	1d3b      	adds	r3, r7, #4
100407fa:	2100      	movs	r1, #0
100407fc:	8059      	strh	r1, [r3, #2]
100407fe:	1d3b      	adds	r3, r7, #4
10040800:	6819      	ldr	r1, [r3, #0]
10040802:	0010      	movs	r0, r2
10040804:	f000 fb41 	bl	10040e8a <FIFO_Enqueue>
    	}
    }
	if(event){FIFO_Enqueue(COMMqueue, out);}
10040808:	2317      	movs	r3, #23
1004080a:	18fb      	adds	r3, r7, r3
1004080c:	781b      	ldrb	r3, [r3, #0]
1004080e:	2b00      	cmp	r3, #0
10040810:	d007      	beq.n	10040822 <COMM_Event_Updater+0x8e>
10040812:	4b10      	ldr	r3, [pc, #64]	@ (10040854 <COMM_Event_Updater+0xc0>)
10040814:	681a      	ldr	r2, [r3, #0]
10040816:	230c      	movs	r3, #12
10040818:	18fb      	adds	r3, r7, r3
1004081a:	6819      	ldr	r1, [r3, #0]
1004081c:	0010      	movs	r0, r2
1004081e:	f000 fb34 	bl	10040e8a <FIFO_Enqueue>
    return out;
10040822:	2110      	movs	r1, #16
10040824:	187b      	adds	r3, r7, r1
10040826:	220c      	movs	r2, #12
10040828:	18ba      	adds	r2, r7, r2
1004082a:	6812      	ldr	r2, [r2, #0]
1004082c:	601a      	str	r2, [r3, #0]
1004082e:	187a      	adds	r2, r7, r1
10040830:	2300      	movs	r3, #0
10040832:	8811      	ldrh	r1, [r2, #0]
10040834:	0409      	lsls	r1, r1, #16
10040836:	0c09      	lsrs	r1, r1, #16
10040838:	0c1b      	lsrs	r3, r3, #16
1004083a:	041b      	lsls	r3, r3, #16
1004083c:	430b      	orrs	r3, r1
1004083e:	8852      	ldrh	r2, [r2, #2]
10040840:	0412      	lsls	r2, r2, #16
10040842:	041b      	lsls	r3, r3, #16
10040844:	0c1b      	lsrs	r3, r3, #16
10040846:	4313      	orrs	r3, r2
}
10040848:	0018      	movs	r0, r3
1004084a:	46bd      	mov	sp, r7
1004084c:	b007      	add	sp, #28
1004084e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040850:	2000019c 	.word	0x2000019c
10040854:	20000198 	.word	0x20000198

10040858 <COMM_Event_Handler>:
 * @Function: EVENT_COMM_Event_Handler
 * @Brief: 
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t COMM_Event_Handler(Event_t event){
10040858:	b5b0      	push	{r4, r5, r7, lr}
1004085a:	b096      	sub	sp, #88	@ 0x58
1004085c:	af00      	add	r7, sp, #0
1004085e:	1d3b      	adds	r3, r7, #4
10040860:	6018      	str	r0, [r3, #0]
	bool transition = 0;
10040862:	2357      	movs	r3, #87	@ 0x57
10040864:	18fb      	adds	r3, r7, r3
10040866:	2200      	movs	r2, #0
10040868:	701a      	strb	r2, [r3, #0]
	COMMSTATES_t next = commSM;
1004086a:	2356      	movs	r3, #86	@ 0x56
1004086c:	18fb      	adds	r3, r7, r3
1004086e:	4add      	ldr	r2, [pc, #884]	@ (10040be4 <COMM_Event_Handler+0x38c>)
10040870:	7812      	ldrb	r2, [r2, #0]
10040872:	701a      	strb	r2, [r3, #0]
	char text[50];
	switch(commSM){
10040874:	4bdb      	ldr	r3, [pc, #876]	@ (10040be4 <COMM_Event_Handler+0x38c>)
10040876:	781b      	ldrb	r3, [r3, #0]
10040878:	2b0f      	cmp	r3, #15
1004087a:	d900      	bls.n	1004087e <COMM_Event_Handler+0x26>
1004087c:	e27a      	b.n	10040d74 <COMM_Event_Handler+0x51c>
1004087e:	009a      	lsls	r2, r3, #2
10040880:	4bd9      	ldr	r3, [pc, #868]	@ (10040be8 <COMM_Event_Handler+0x390>)
10040882:	18d3      	adds	r3, r2, r3
10040884:	681b      	ldr	r3, [r3, #0]
10040886:	469f      	mov	pc, r3
	case init:
		if(event.status == EVENT_INIT){
10040888:	1d3b      	adds	r3, r7, #4
1004088a:	781b      	ldrb	r3, [r3, #0]
1004088c:	b25b      	sxtb	r3, r3
1004088e:	2b01      	cmp	r3, #1
10040890:	d000      	beq.n	10040894 <COMM_Event_Handler+0x3c>
10040892:	e271      	b.n	10040d78 <COMM_Event_Handler+0x520>
			next = idle;
10040894:	2356      	movs	r3, #86	@ 0x56
10040896:	18fb      	adds	r3, r7, r3
10040898:	2201      	movs	r2, #1
1004089a:	701a      	strb	r2, [r3, #0]
			transition = true;
1004089c:	2357      	movs	r3, #87	@ 0x57
1004089e:	18fb      	adds	r3, r7, r3
100408a0:	2201      	movs	r2, #1
100408a2:	701a      	strb	r2, [r3, #0]
		}
		break;
100408a4:	e268      	b.n	10040d78 <COMM_Event_Handler+0x520>
	case idle:
		if(event.status == EVENT_ENTRY){
100408a6:	1d3b      	adds	r3, r7, #4
100408a8:	781b      	ldrb	r3, [r3, #0]
100408aa:	b25b      	sxtb	r3, r3
100408ac:	2b02      	cmp	r3, #2
100408ae:	d102      	bne.n	100408b6 <COMM_Event_Handler+0x5e>
			sendinglogs = 0;
100408b0:	4bce      	ldr	r3, [pc, #824]	@ (10040bec <COMM_Event_Handler+0x394>)
100408b2:	2200      	movs	r2, #0
100408b4:	701a      	strb	r2, [r3, #0]
		}
		if(event.status == EVENT_USART){
100408b6:	1d3b      	adds	r3, r7, #4
100408b8:	781b      	ldrb	r3, [r3, #0]
100408ba:	b25b      	sxtb	r3, r3
100408bc:	2b06      	cmp	r3, #6
100408be:	d000      	beq.n	100408c2 <COMM_Event_Handler+0x6a>
100408c0:	e25c      	b.n	10040d7c <COMM_Event_Handler+0x524>
			switch (event.data){
100408c2:	1d3b      	adds	r3, r7, #4
100408c4:	885b      	ldrh	r3, [r3, #2]
100408c6:	2b05      	cmp	r3, #5
100408c8:	d845      	bhi.n	10040956 <COMM_Event_Handler+0xfe>
100408ca:	009a      	lsls	r2, r3, #2
100408cc:	4bc8      	ldr	r3, [pc, #800]	@ (10040bf0 <COMM_Event_Handler+0x398>)
100408ce:	18d3      	adds	r3, r2, r3
100408d0:	681b      	ldr	r3, [r3, #0]
100408d2:	469f      	mov	pc, r3
			case VOLUMECONTROL:
				discountprintf("received volume control\n");
100408d4:	4bc7      	ldr	r3, [pc, #796]	@ (10040bf4 <COMM_Event_Handler+0x39c>)
100408d6:	0018      	movs	r0, r3
100408d8:	f000 fa9c 	bl	10040e14 <discountprintf>
				next = volumecontrol;
100408dc:	2356      	movs	r3, #86	@ 0x56
100408de:	18fb      	adds	r3, r7, r3
100408e0:	2202      	movs	r2, #2
100408e2:	701a      	strb	r2, [r3, #0]
				transition = true;
100408e4:	2357      	movs	r3, #87	@ 0x57
100408e6:	18fb      	adds	r3, r7, r3
100408e8:	2201      	movs	r2, #1
100408ea:	701a      	strb	r2, [r3, #0]
				break;
100408ec:	e034      	b.n	10040958 <COMM_Event_Handler+0x100>
			case FOLDERCONTROL:
				discountprintf("received folder control\n");
100408ee:	4bc2      	ldr	r3, [pc, #776]	@ (10040bf8 <COMM_Event_Handler+0x3a0>)
100408f0:	0018      	movs	r0, r3
100408f2:	f000 fa8f 	bl	10040e14 <discountprintf>
				next = foldercontrol;
100408f6:	2356      	movs	r3, #86	@ 0x56
100408f8:	18fb      	adds	r3, r7, r3
100408fa:	2203      	movs	r2, #3
100408fc:	701a      	strb	r2, [r3, #0]
				transition = true;
100408fe:	2357      	movs	r3, #87	@ 0x57
10040900:	18fb      	adds	r3, r7, r3
10040902:	2201      	movs	r2, #1
10040904:	701a      	strb	r2, [r3, #0]
				break;
10040906:	e027      	b.n	10040958 <COMM_Event_Handler+0x100>
			case LOGSREQUEST:
				discountprintf("received logs request\n");
10040908:	4bbc      	ldr	r3, [pc, #752]	@ (10040bfc <COMM_Event_Handler+0x3a4>)
1004090a:	0018      	movs	r0, r3
1004090c:	f000 fa82 	bl	10040e14 <discountprintf>
				next = logsrequest;
10040910:	2356      	movs	r3, #86	@ 0x56
10040912:	18fb      	adds	r3, r7, r3
10040914:	2205      	movs	r2, #5
10040916:	701a      	strb	r2, [r3, #0]
				transition = true;
10040918:	2357      	movs	r3, #87	@ 0x57
1004091a:	18fb      	adds	r3, r7, r3
1004091c:	2201      	movs	r2, #1
1004091e:	701a      	strb	r2, [r3, #0]
				break;
10040920:	e01a      	b.n	10040958 <COMM_Event_Handler+0x100>
			case DCCONTROL:
				discountprintf("received DC control\n");
10040922:	4bb7      	ldr	r3, [pc, #732]	@ (10040c00 <COMM_Event_Handler+0x3a8>)
10040924:	0018      	movs	r0, r3
10040926:	f000 fa75 	bl	10040e14 <discountprintf>
				next = dccontrol;
1004092a:	2356      	movs	r3, #86	@ 0x56
1004092c:	18fb      	adds	r3, r7, r3
1004092e:	2207      	movs	r2, #7
10040930:	701a      	strb	r2, [r3, #0]
				transition = true;
10040932:	2357      	movs	r3, #87	@ 0x57
10040934:	18fb      	adds	r3, r7, r3
10040936:	2201      	movs	r2, #1
10040938:	701a      	strb	r2, [r3, #0]
				break;
1004093a:	e00d      	b.n	10040958 <COMM_Event_Handler+0x100>
			case SCHEDULECONTROL:
				discountprintf("received schedule control\n");
1004093c:	4bb1      	ldr	r3, [pc, #708]	@ (10040c04 <COMM_Event_Handler+0x3ac>)
1004093e:	0018      	movs	r0, r3
10040940:	f000 fa68 	bl	10040e14 <discountprintf>
				next = schedulecontrol;
10040944:	2356      	movs	r3, #86	@ 0x56
10040946:	18fb      	adds	r3, r7, r3
10040948:	2208      	movs	r2, #8
1004094a:	701a      	strb	r2, [r3, #0]
				transition = true;
1004094c:	2357      	movs	r3, #87	@ 0x57
1004094e:	18fb      	adds	r3, r7, r3
10040950:	2201      	movs	r2, #1
10040952:	701a      	strb	r2, [r3, #0]
				break;
10040954:	e000      	b.n	10040958 <COMM_Event_Handler+0x100>
			default:
				break;
10040956:	46c0      	nop			@ (mov r8, r8)
			}
		}
		break;
10040958:	e210      	b.n	10040d7c <COMM_Event_Handler+0x524>
	case volumecontrol:
		if(event.status == EVENT_USART){
1004095a:	1d3b      	adds	r3, r7, #4
1004095c:	781b      	ldrb	r3, [r3, #0]
1004095e:	b25b      	sxtb	r3, r3
10040960:	2b06      	cmp	r3, #6
10040962:	d000      	beq.n	10040966 <COMM_Event_Handler+0x10e>
10040964:	e20c      	b.n	10040d80 <COMM_Event_Handler+0x528>
			discountprintf("Storing volume\n");
10040966:	4ba8      	ldr	r3, [pc, #672]	@ (10040c08 <COMM_Event_Handler+0x3b0>)
10040968:	0018      	movs	r0, r3
1004096a:	f000 fa53 	bl	10040e14 <discountprintf>
			next = idle;
1004096e:	2356      	movs	r3, #86	@ 0x56
10040970:	18fb      	adds	r3, r7, r3
10040972:	2201      	movs	r2, #1
10040974:	701a      	strb	r2, [r3, #0]
			transition = true;
10040976:	2357      	movs	r3, #87	@ 0x57
10040978:	18fb      	adds	r3, r7, r3
1004097a:	2201      	movs	r2, #1
1004097c:	701a      	strb	r2, [r3, #0]
		}
		break;
1004097e:	e1ff      	b.n	10040d80 <COMM_Event_Handler+0x528>
	case foldercontrol:
		if(event.status == EVENT_USART){
10040980:	1d3b      	adds	r3, r7, #4
10040982:	781b      	ldrb	r3, [r3, #0]
10040984:	b25b      	sxtb	r3, r3
10040986:	2b06      	cmp	r3, #6
10040988:	d000      	beq.n	1004098c <COMM_Event_Handler+0x134>
1004098a:	e1fb      	b.n	10040d84 <COMM_Event_Handler+0x52c>
			discountprintf("Sending folder selector\n");
1004098c:	4b9f      	ldr	r3, [pc, #636]	@ (10040c0c <COMM_Event_Handler+0x3b4>)
1004098e:	0018      	movs	r0, r3
10040990:	f000 fa40 	bl	10040e14 <discountprintf>
			next = folderselected;
10040994:	2356      	movs	r3, #86	@ 0x56
10040996:	18fb      	adds	r3, r7, r3
10040998:	2204      	movs	r2, #4
1004099a:	701a      	strb	r2, [r3, #0]
			transition = true;
1004099c:	2357      	movs	r3, #87	@ 0x57
1004099e:	18fb      	adds	r3, r7, r3
100409a0:	2201      	movs	r2, #1
100409a2:	701a      	strb	r2, [r3, #0]
		}
		break;
100409a4:	e1ee      	b.n	10040d84 <COMM_Event_Handler+0x52c>
	case folderselected:
		if(event.status == EVENT_USART){
100409a6:	1d3b      	adds	r3, r7, #4
100409a8:	781b      	ldrb	r3, [r3, #0]
100409aa:	b25b      	sxtb	r3, r3
100409ac:	2b06      	cmp	r3, #6
100409ae:	d000      	beq.n	100409b2 <COMM_Event_Handler+0x15a>
100409b0:	e1ea      	b.n	10040d88 <COMM_Event_Handler+0x530>
			discountprintf("Sending track selector\n");
100409b2:	4b97      	ldr	r3, [pc, #604]	@ (10040c10 <COMM_Event_Handler+0x3b8>)
100409b4:	0018      	movs	r0, r3
100409b6:	f000 fa2d 	bl	10040e14 <discountprintf>
			next = idle;
100409ba:	2356      	movs	r3, #86	@ 0x56
100409bc:	18fb      	adds	r3, r7, r3
100409be:	2201      	movs	r2, #1
100409c0:	701a      	strb	r2, [r3, #0]
			transition = true;
100409c2:	2357      	movs	r3, #87	@ 0x57
100409c4:	18fb      	adds	r3, r7, r3
100409c6:	2201      	movs	r2, #1
100409c8:	701a      	strb	r2, [r3, #0]
		}
		break;
100409ca:	e1dd      	b.n	10040d88 <COMM_Event_Handler+0x530>
	case logsrequest:
		static uint32_t sent;
		if(event.status == EVENT_ENTRY){
100409cc:	1d3b      	adds	r3, r7, #4
100409ce:	781b      	ldrb	r3, [r3, #0]
100409d0:	b25b      	sxtb	r3, r3
100409d2:	2b02      	cmp	r3, #2
100409d4:	d000      	beq.n	100409d8 <COMM_Event_Handler+0x180>
100409d6:	e1d9      	b.n	10040d8c <COMM_Event_Handler+0x534>
			sendinglogs = 1;
100409d8:	4b84      	ldr	r3, [pc, #528]	@ (10040bec <COMM_Event_Handler+0x394>)
100409da:	2201      	movs	r2, #1
100409dc:	701a      	strb	r2, [r3, #0]
			sent = 0;
100409de:	4b8d      	ldr	r3, [pc, #564]	@ (10040c14 <COMM_Event_Handler+0x3bc>)
100409e0:	2200      	movs	r2, #0
100409e2:	601a      	str	r2, [r3, #0]
			uint16_t size = PLACEHOLDER;//placeholder until flash library is complete
100409e4:	2446      	movs	r4, #70	@ 0x46
100409e6:	193b      	adds	r3, r7, r4
100409e8:	223c      	movs	r2, #60	@ 0x3c
100409ea:	801a      	strh	r2, [r3, #0]
			USART_WriteTx((uint8_t)(size>>8));
100409ec:	193b      	adds	r3, r7, r4
100409ee:	881b      	ldrh	r3, [r3, #0]
100409f0:	0a1b      	lsrs	r3, r3, #8
100409f2:	b29b      	uxth	r3, r3
100409f4:	b2db      	uxtb	r3, r3
100409f6:	0018      	movs	r0, r3
100409f8:	f000 fe4c 	bl	10041694 <USART_WriteTx>
			USART_WriteTx((uint8_t)(size));
100409fc:	193b      	adds	r3, r7, r4
100409fe:	881b      	ldrh	r3, [r3, #0]
10040a00:	b2db      	uxtb	r3, r3
10040a02:	0018      	movs	r0, r3
10040a04:	f000 fe46 	bl	10041694 <USART_WriteTx>
			next = logsdata;
10040a08:	2356      	movs	r3, #86	@ 0x56
10040a0a:	18fb      	adds	r3, r7, r3
10040a0c:	2206      	movs	r2, #6
10040a0e:	701a      	strb	r2, [r3, #0]
			transition = true;
10040a10:	2357      	movs	r3, #87	@ 0x57
10040a12:	18fb      	adds	r3, r7, r3
10040a14:	2201      	movs	r2, #1
10040a16:	701a      	strb	r2, [r3, #0]
		}
		break;
10040a18:	e1b8      	b.n	10040d8c <COMM_Event_Handler+0x534>
	case logsdata:
		if(event.status == EVENT_USART_READY){
10040a1a:	1d3b      	adds	r3, r7, #4
10040a1c:	781b      	ldrb	r3, [r3, #0]
10040a1e:	b25b      	sxtb	r3, r3
10040a20:	2b07      	cmp	r3, #7
10040a22:	d000      	beq.n	10040a26 <COMM_Event_Handler+0x1ce>
10040a24:	e1b4      	b.n	10040d90 <COMM_Event_Handler+0x538>
			//get logs size
			uint8_t data = 'A';//placeholder until flash library is complete
10040a26:	234b      	movs	r3, #75	@ 0x4b
10040a28:	18fb      	adds	r3, r7, r3
10040a2a:	2241      	movs	r2, #65	@ 0x41
10040a2c:	701a      	strb	r2, [r3, #0]
			uint16_t size = PLACEHOLDER;
10040a2e:	2148      	movs	r1, #72	@ 0x48
10040a30:	187b      	adds	r3, r7, r1
10040a32:	223c      	movs	r2, #60	@ 0x3c
10040a34:	801a      	strh	r2, [r3, #0]
			if(size - sent > USARTBUFFERSIZE){
10040a36:	187b      	adds	r3, r7, r1
10040a38:	881a      	ldrh	r2, [r3, #0]
10040a3a:	4b76      	ldr	r3, [pc, #472]	@ (10040c14 <COMM_Event_Handler+0x3bc>)
10040a3c:	681b      	ldr	r3, [r3, #0]
10040a3e:	1ad2      	subs	r2, r2, r3
10040a40:	2380      	movs	r3, #128	@ 0x80
10040a42:	009b      	lsls	r3, r3, #2
10040a44:	429a      	cmp	r2, r3
10040a46:	d924      	bls.n	10040a92 <COMM_Event_Handler+0x23a>
				//send next part of logs here, use sent to index the
				for(int i = 0; i < USARTBUFFERSIZE; i++){
10040a48:	2300      	movs	r3, #0
10040a4a:	653b      	str	r3, [r7, #80]	@ 0x50
10040a4c:	e008      	b.n	10040a60 <COMM_Event_Handler+0x208>
					USART_WriteTx(data);
10040a4e:	234b      	movs	r3, #75	@ 0x4b
10040a50:	18fb      	adds	r3, r7, r3
10040a52:	781b      	ldrb	r3, [r3, #0]
10040a54:	0018      	movs	r0, r3
10040a56:	f000 fe1d 	bl	10041694 <USART_WriteTx>
				for(int i = 0; i < USARTBUFFERSIZE; i++){
10040a5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10040a5c:	3301      	adds	r3, #1
10040a5e:	653b      	str	r3, [r7, #80]	@ 0x50
10040a60:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
10040a62:	2380      	movs	r3, #128	@ 0x80
10040a64:	009b      	lsls	r3, r3, #2
10040a66:	429a      	cmp	r2, r3
10040a68:	dbf1      	blt.n	10040a4e <COMM_Event_Handler+0x1f6>
				}
				sent = sent + USARTBUFFERSIZE;
10040a6a:	4b6a      	ldr	r3, [pc, #424]	@ (10040c14 <COMM_Event_Handler+0x3bc>)
10040a6c:	681b      	ldr	r3, [r3, #0]
10040a6e:	2280      	movs	r2, #128	@ 0x80
10040a70:	0092      	lsls	r2, r2, #2
10040a72:	189a      	adds	r2, r3, r2
10040a74:	4b67      	ldr	r3, [pc, #412]	@ (10040c14 <COMM_Event_Handler+0x3bc>)
10040a76:	601a      	str	r2, [r3, #0]
				next = logsdata;
10040a78:	2356      	movs	r3, #86	@ 0x56
10040a7a:	18fb      	adds	r3, r7, r3
10040a7c:	2206      	movs	r2, #6
10040a7e:	701a      	strb	r2, [r3, #0]
				transition = true;
10040a80:	2357      	movs	r3, #87	@ 0x57
10040a82:	18fb      	adds	r3, r7, r3
10040a84:	2201      	movs	r2, #1
10040a86:	701a      	strb	r2, [r3, #0]
				discountprintf("data partly sent\n");
10040a88:	4b63      	ldr	r3, [pc, #396]	@ (10040c18 <COMM_Event_Handler+0x3c0>)
10040a8a:	0018      	movs	r0, r3
10040a8c:	f000 f9c2 	bl	10040e14 <discountprintf>
				next = idle;
				transition = true;
				discountprintf("data sent\n");
			}
		}
		break;
10040a90:	e17e      	b.n	10040d90 <COMM_Event_Handler+0x538>
				for(int i = 0; i < size - sent; i++){
10040a92:	2300      	movs	r3, #0
10040a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
10040a96:	e008      	b.n	10040aaa <COMM_Event_Handler+0x252>
					USART_WriteTx(data);
10040a98:	234b      	movs	r3, #75	@ 0x4b
10040a9a:	18fb      	adds	r3, r7, r3
10040a9c:	781b      	ldrb	r3, [r3, #0]
10040a9e:	0018      	movs	r0, r3
10040aa0:	f000 fdf8 	bl	10041694 <USART_WriteTx>
				for(int i = 0; i < size - sent; i++){
10040aa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10040aa6:	3301      	adds	r3, #1
10040aa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
10040aaa:	2348      	movs	r3, #72	@ 0x48
10040aac:	18fb      	adds	r3, r7, r3
10040aae:	881a      	ldrh	r2, [r3, #0]
10040ab0:	4b58      	ldr	r3, [pc, #352]	@ (10040c14 <COMM_Event_Handler+0x3bc>)
10040ab2:	681b      	ldr	r3, [r3, #0]
10040ab4:	1ad2      	subs	r2, r2, r3
10040ab6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10040ab8:	429a      	cmp	r2, r3
10040aba:	d8ed      	bhi.n	10040a98 <COMM_Event_Handler+0x240>
				next = idle;
10040abc:	2356      	movs	r3, #86	@ 0x56
10040abe:	18fb      	adds	r3, r7, r3
10040ac0:	2201      	movs	r2, #1
10040ac2:	701a      	strb	r2, [r3, #0]
				transition = true;
10040ac4:	2357      	movs	r3, #87	@ 0x57
10040ac6:	18fb      	adds	r3, r7, r3
10040ac8:	2201      	movs	r2, #1
10040aca:	701a      	strb	r2, [r3, #0]
				discountprintf("data sent\n");
10040acc:	4b53      	ldr	r3, [pc, #332]	@ (10040c1c <COMM_Event_Handler+0x3c4>)
10040ace:	0018      	movs	r0, r3
10040ad0:	f000 f9a0 	bl	10040e14 <discountprintf>
		break;
10040ad4:	e15c      	b.n	10040d90 <COMM_Event_Handler+0x538>
	case dccontrol:
		if(event.status == EVENT_USART){
10040ad6:	1d3b      	adds	r3, r7, #4
10040ad8:	781b      	ldrb	r3, [r3, #0]
10040ada:	b25b      	sxtb	r3, r3
10040adc:	2b06      	cmp	r3, #6
10040ade:	d000      	beq.n	10040ae2 <COMM_Event_Handler+0x28a>
10040ae0:	e158      	b.n	10040d94 <COMM_Event_Handler+0x53c>
			discountprintf("storing duty cycle\n");
10040ae2:	4b4f      	ldr	r3, [pc, #316]	@ (10040c20 <COMM_Event_Handler+0x3c8>)
10040ae4:	0018      	movs	r0, r3
10040ae6:	f000 f995 	bl	10040e14 <discountprintf>
			//store duty cycle here
			next = idle;
10040aea:	2356      	movs	r3, #86	@ 0x56
10040aec:	18fb      	adds	r3, r7, r3
10040aee:	2201      	movs	r2, #1
10040af0:	701a      	strb	r2, [r3, #0]
			transition = true;
10040af2:	2357      	movs	r3, #87	@ 0x57
10040af4:	18fb      	adds	r3, r7, r3
10040af6:	2201      	movs	r2, #1
10040af8:	701a      	strb	r2, [r3, #0]
		}
		break;
10040afa:	e14b      	b.n	10040d94 <COMM_Event_Handler+0x53c>
	case schedulecontrol:
		static uint8_t numevents;
		if(event.status == EVENT_ENTRY){
10040afc:	1d3b      	adds	r3, r7, #4
10040afe:	781b      	ldrb	r3, [r3, #0]
10040b00:	b25b      	sxtb	r3, r3
10040b02:	2b02      	cmp	r3, #2
10040b04:	d000      	beq.n	10040b08 <COMM_Event_Handler+0x2b0>
10040b06:	e147      	b.n	10040d98 <COMM_Event_Handler+0x540>
			discountprintf("receiving schedule\n");
10040b08:	4b46      	ldr	r3, [pc, #280]	@ (10040c24 <COMM_Event_Handler+0x3cc>)
10040b0a:	0018      	movs	r0, r3
10040b0c:	f000 f982 	bl	10040e14 <discountprintf>
			next = schedulemonth;
10040b10:	2356      	movs	r3, #86	@ 0x56
10040b12:	18fb      	adds	r3, r7, r3
10040b14:	2209      	movs	r2, #9
10040b16:	701a      	strb	r2, [r3, #0]
			transition = true;
10040b18:	2357      	movs	r3, #87	@ 0x57
10040b1a:	18fb      	adds	r3, r7, r3
10040b1c:	2201      	movs	r2, #1
10040b1e:	701a      	strb	r2, [r3, #0]
			numevents = 0;
10040b20:	4b41      	ldr	r3, [pc, #260]	@ (10040c28 <COMM_Event_Handler+0x3d0>)
10040b22:	2200      	movs	r2, #0
10040b24:	701a      	strb	r2, [r3, #0]
		}
		break;
10040b26:	e137      	b.n	10040d98 <COMM_Event_Handler+0x540>
	case schedulemonth:
		if(event.status == EVENT_USART){
10040b28:	1d3b      	adds	r3, r7, #4
10040b2a:	781b      	ldrb	r3, [r3, #0]
10040b2c:	b25b      	sxtb	r3, r3
10040b2e:	2b06      	cmp	r3, #6
10040b30:	d000      	beq.n	10040b34 <COMM_Event_Handler+0x2dc>
10040b32:	e133      	b.n	10040d9c <COMM_Event_Handler+0x544>
			if(event.data == SCHEDULEEND){
10040b34:	1d3b      	adds	r3, r7, #4
10040b36:	885b      	ldrh	r3, [r3, #2]
10040b38:	2b0d      	cmp	r3, #13
10040b3a:	d10c      	bne.n	10040b56 <COMM_Event_Handler+0x2fe>
				discountprintf("schedule complete\n");
10040b3c:	4b3b      	ldr	r3, [pc, #236]	@ (10040c2c <COMM_Event_Handler+0x3d4>)
10040b3e:	0018      	movs	r0, r3
10040b40:	f000 f968 	bl	10040e14 <discountprintf>
				next = idle;
10040b44:	2356      	movs	r3, #86	@ 0x56
10040b46:	18fb      	adds	r3, r7, r3
10040b48:	2201      	movs	r2, #1
10040b4a:	701a      	strb	r2, [r3, #0]
				transition = true;
10040b4c:	2357      	movs	r3, #87	@ 0x57
10040b4e:	18fb      	adds	r3, r7, r3
10040b50:	2201      	movs	r2, #1
10040b52:	701a      	strb	r2, [r3, #0]
				//store month here
				next = scheduleday;
				transition = true;
			}
		}
		break;
10040b54:	e122      	b.n	10040d9c <COMM_Event_Handler+0x544>
			} else if(numevents > MAXSCHEDULEEVENTS){
10040b56:	4b34      	ldr	r3, [pc, #208]	@ (10040c28 <COMM_Event_Handler+0x3d0>)
10040b58:	781b      	ldrb	r3, [r3, #0]
10040b5a:	2bb4      	cmp	r3, #180	@ 0xb4
10040b5c:	d90f      	bls.n	10040b7e <COMM_Event_Handler+0x326>
				discountprintf("schedule forced to complete\n");
10040b5e:	4b34      	ldr	r3, [pc, #208]	@ (10040c30 <COMM_Event_Handler+0x3d8>)
10040b60:	0018      	movs	r0, r3
10040b62:	f000 f957 	bl	10040e14 <discountprintf>
				next = scheduleend;
10040b66:	2356      	movs	r3, #86	@ 0x56
10040b68:	18fb      	adds	r3, r7, r3
10040b6a:	220f      	movs	r2, #15
10040b6c:	701a      	strb	r2, [r3, #0]
				transition = true;
10040b6e:	2357      	movs	r3, #87	@ 0x57
10040b70:	18fb      	adds	r3, r7, r3
10040b72:	2201      	movs	r2, #1
10040b74:	701a      	strb	r2, [r3, #0]
				USART_WriteTx(SCHEDULEEND);//please stop sending me the schedule
10040b76:	200d      	movs	r0, #13
10040b78:	f000 fd8c 	bl	10041694 <USART_WriteTx>
		break;
10040b7c:	e10e      	b.n	10040d9c <COMM_Event_Handler+0x544>
				sprintf(text, "Month: %d\n", event.data);
10040b7e:	1d3b      	adds	r3, r7, #4
10040b80:	885b      	ldrh	r3, [r3, #2]
10040b82:	001a      	movs	r2, r3
10040b84:	492b      	ldr	r1, [pc, #172]	@ (10040c34 <COMM_Event_Handler+0x3dc>)
10040b86:	2414      	movs	r4, #20
10040b88:	193b      	adds	r3, r7, r4
10040b8a:	0018      	movs	r0, r3
10040b8c:	f005 fef2 	bl	10046974 <siprintf>
				discountprintf(text);
10040b90:	193b      	adds	r3, r7, r4
10040b92:	0018      	movs	r0, r3
10040b94:	f000 f93e 	bl	10040e14 <discountprintf>
				next = scheduleday;
10040b98:	2356      	movs	r3, #86	@ 0x56
10040b9a:	18fb      	adds	r3, r7, r3
10040b9c:	220a      	movs	r2, #10
10040b9e:	701a      	strb	r2, [r3, #0]
				transition = true;
10040ba0:	2357      	movs	r3, #87	@ 0x57
10040ba2:	18fb      	adds	r3, r7, r3
10040ba4:	2201      	movs	r2, #1
10040ba6:	701a      	strb	r2, [r3, #0]
		break;
10040ba8:	e0f8      	b.n	10040d9c <COMM_Event_Handler+0x544>
	case scheduleday:
		if(event.status == EVENT_USART){
10040baa:	1d3b      	adds	r3, r7, #4
10040bac:	781b      	ldrb	r3, [r3, #0]
10040bae:	b25b      	sxtb	r3, r3
10040bb0:	2b06      	cmp	r3, #6
10040bb2:	d000      	beq.n	10040bb6 <COMM_Event_Handler+0x35e>
10040bb4:	e0f4      	b.n	10040da0 <COMM_Event_Handler+0x548>
			sprintf(text, "Day: %d\n", event.data);
10040bb6:	1d3b      	adds	r3, r7, #4
10040bb8:	885b      	ldrh	r3, [r3, #2]
10040bba:	001a      	movs	r2, r3
10040bbc:	491e      	ldr	r1, [pc, #120]	@ (10040c38 <COMM_Event_Handler+0x3e0>)
10040bbe:	2414      	movs	r4, #20
10040bc0:	193b      	adds	r3, r7, r4
10040bc2:	0018      	movs	r0, r3
10040bc4:	f005 fed6 	bl	10046974 <siprintf>
			discountprintf(text);
10040bc8:	193b      	adds	r3, r7, r4
10040bca:	0018      	movs	r0, r3
10040bcc:	f000 f922 	bl	10040e14 <discountprintf>
			//record day here
			next = schedulestart;
10040bd0:	2356      	movs	r3, #86	@ 0x56
10040bd2:	18fb      	adds	r3, r7, r3
10040bd4:	220b      	movs	r2, #11
10040bd6:	701a      	strb	r2, [r3, #0]
			transition = true;
10040bd8:	2357      	movs	r3, #87	@ 0x57
10040bda:	18fb      	adds	r3, r7, r3
10040bdc:	2201      	movs	r2, #1
10040bde:	701a      	strb	r2, [r3, #0]
		}
		break;
10040be0:	e0de      	b.n	10040da0 <COMM_Event_Handler+0x548>
10040be2:	46c0      	nop			@ (mov r8, r8)
10040be4:	20000194 	.word	0x20000194
10040be8:	10047294 	.word	0x10047294
10040bec:	2000019c 	.word	0x2000019c
10040bf0:	100472d4 	.word	0x100472d4
10040bf4:	10047108 	.word	0x10047108
10040bf8:	10047124 	.word	0x10047124
10040bfc:	10047140 	.word	0x10047140
10040c00:	10047158 	.word	0x10047158
10040c04:	10047170 	.word	0x10047170
10040c08:	1004718c 	.word	0x1004718c
10040c0c:	1004719c 	.word	0x1004719c
10040c10:	100471b8 	.word	0x100471b8
10040c14:	200001a0 	.word	0x200001a0
10040c18:	100471d0 	.word	0x100471d0
10040c1c:	100471e4 	.word	0x100471e4
10040c20:	100471f0 	.word	0x100471f0
10040c24:	10047204 	.word	0x10047204
10040c28:	200001a4 	.word	0x200001a4
10040c2c:	10047218 	.word	0x10047218
10040c30:	1004722c 	.word	0x1004722c
10040c34:	1004724c 	.word	0x1004724c
10040c38:	10047258 	.word	0x10047258
	case schedulestart:
		if(event.status == EVENT_USART){
10040c3c:	1d3b      	adds	r3, r7, #4
10040c3e:	781b      	ldrb	r3, [r3, #0]
10040c40:	b25b      	sxtb	r3, r3
10040c42:	2b06      	cmp	r3, #6
10040c44:	d000      	beq.n	10040c48 <COMM_Event_Handler+0x3f0>
10040c46:	e0ad      	b.n	10040da4 <COMM_Event_Handler+0x54c>
			sprintf(text, "start time: %d:%d\n", (event.data&0b11111000)>>3, (event.data & 0b011)*15);
10040c48:	1d3b      	adds	r3, r7, #4
10040c4a:	885b      	ldrh	r3, [r3, #2]
10040c4c:	10db      	asrs	r3, r3, #3
10040c4e:	221f      	movs	r2, #31
10040c50:	4013      	ands	r3, r2
10040c52:	001c      	movs	r4, r3
10040c54:	1d3b      	adds	r3, r7, #4
10040c56:	885b      	ldrh	r3, [r3, #2]
10040c58:	001a      	movs	r2, r3
10040c5a:	2303      	movs	r3, #3
10040c5c:	401a      	ands	r2, r3
10040c5e:	0013      	movs	r3, r2
10040c60:	011b      	lsls	r3, r3, #4
10040c62:	1a9b      	subs	r3, r3, r2
10040c64:	4966      	ldr	r1, [pc, #408]	@ (10040e00 <COMM_Event_Handler+0x5a8>)
10040c66:	2514      	movs	r5, #20
10040c68:	1978      	adds	r0, r7, r5
10040c6a:	0022      	movs	r2, r4
10040c6c:	f005 fe82 	bl	10046974 <siprintf>
			discountprintf(text);
10040c70:	197b      	adds	r3, r7, r5
10040c72:	0018      	movs	r0, r3
10040c74:	f000 f8ce 	bl	10040e14 <discountprintf>
			//record start time here
			next = schedulestop;
10040c78:	2356      	movs	r3, #86	@ 0x56
10040c7a:	18fb      	adds	r3, r7, r3
10040c7c:	220c      	movs	r2, #12
10040c7e:	701a      	strb	r2, [r3, #0]
			transition = true;
10040c80:	2357      	movs	r3, #87	@ 0x57
10040c82:	18fb      	adds	r3, r7, r3
10040c84:	2201      	movs	r2, #1
10040c86:	701a      	strb	r2, [r3, #0]
		}
		break;
10040c88:	e08c      	b.n	10040da4 <COMM_Event_Handler+0x54c>
	case schedulestop:
		if(event.status == EVENT_USART){
10040c8a:	1d3b      	adds	r3, r7, #4
10040c8c:	781b      	ldrb	r3, [r3, #0]
10040c8e:	b25b      	sxtb	r3, r3
10040c90:	2b06      	cmp	r3, #6
10040c92:	d000      	beq.n	10040c96 <COMM_Event_Handler+0x43e>
10040c94:	e088      	b.n	10040da8 <COMM_Event_Handler+0x550>
			sprintf(text, "start time: %d:%d\n", (event.data&0b11111000)>>3, (event.data & 0b011)*15);
10040c96:	1d3b      	adds	r3, r7, #4
10040c98:	885b      	ldrh	r3, [r3, #2]
10040c9a:	10db      	asrs	r3, r3, #3
10040c9c:	221f      	movs	r2, #31
10040c9e:	4013      	ands	r3, r2
10040ca0:	001c      	movs	r4, r3
10040ca2:	1d3b      	adds	r3, r7, #4
10040ca4:	885b      	ldrh	r3, [r3, #2]
10040ca6:	001a      	movs	r2, r3
10040ca8:	2303      	movs	r3, #3
10040caa:	401a      	ands	r2, r3
10040cac:	0013      	movs	r3, r2
10040cae:	011b      	lsls	r3, r3, #4
10040cb0:	1a9b      	subs	r3, r3, r2
10040cb2:	4953      	ldr	r1, [pc, #332]	@ (10040e00 <COMM_Event_Handler+0x5a8>)
10040cb4:	2514      	movs	r5, #20
10040cb6:	1978      	adds	r0, r7, r5
10040cb8:	0022      	movs	r2, r4
10040cba:	f005 fe5b 	bl	10046974 <siprintf>
			discountprintf(text);
10040cbe:	197b      	adds	r3, r7, r5
10040cc0:	0018      	movs	r0, r3
10040cc2:	f000 f8a7 	bl	10040e14 <discountprintf>
			//record end time here
			next = schedulefolder;
10040cc6:	2356      	movs	r3, #86	@ 0x56
10040cc8:	18fb      	adds	r3, r7, r3
10040cca:	220d      	movs	r2, #13
10040ccc:	701a      	strb	r2, [r3, #0]
			transition = true;
10040cce:	2357      	movs	r3, #87	@ 0x57
10040cd0:	18fb      	adds	r3, r7, r3
10040cd2:	2201      	movs	r2, #1
10040cd4:	701a      	strb	r2, [r3, #0]
		}
		break;
10040cd6:	e067      	b.n	10040da8 <COMM_Event_Handler+0x550>
	case schedulefolder:
		if(event.status == EVENT_USART){
10040cd8:	1d3b      	adds	r3, r7, #4
10040cda:	781b      	ldrb	r3, [r3, #0]
10040cdc:	b25b      	sxtb	r3, r3
10040cde:	2b06      	cmp	r3, #6
10040ce0:	d164      	bne.n	10040dac <COMM_Event_Handler+0x554>
			sprintf(text, "folder#: %d\n", event.data);
10040ce2:	1d3b      	adds	r3, r7, #4
10040ce4:	885b      	ldrh	r3, [r3, #2]
10040ce6:	001a      	movs	r2, r3
10040ce8:	4946      	ldr	r1, [pc, #280]	@ (10040e04 <COMM_Event_Handler+0x5ac>)
10040cea:	2414      	movs	r4, #20
10040cec:	193b      	adds	r3, r7, r4
10040cee:	0018      	movs	r0, r3
10040cf0:	f005 fe40 	bl	10046974 <siprintf>
			discountprintf(text);
10040cf4:	193b      	adds	r3, r7, r4
10040cf6:	0018      	movs	r0, r3
10040cf8:	f000 f88c 	bl	10040e14 <discountprintf>
			//record end time here
			next = scheduletrack;
10040cfc:	2356      	movs	r3, #86	@ 0x56
10040cfe:	18fb      	adds	r3, r7, r3
10040d00:	220e      	movs	r2, #14
10040d02:	701a      	strb	r2, [r3, #0]
			transition = true;
10040d04:	2357      	movs	r3, #87	@ 0x57
10040d06:	18fb      	adds	r3, r7, r3
10040d08:	2201      	movs	r2, #1
10040d0a:	701a      	strb	r2, [r3, #0]
		}
		break;
10040d0c:	e04e      	b.n	10040dac <COMM_Event_Handler+0x554>
	case scheduletrack:
		if(event.status == EVENT_USART){
10040d0e:	1d3b      	adds	r3, r7, #4
10040d10:	781b      	ldrb	r3, [r3, #0]
10040d12:	b25b      	sxtb	r3, r3
10040d14:	2b06      	cmp	r3, #6
10040d16:	d14b      	bne.n	10040db0 <COMM_Event_Handler+0x558>
			sprintf(text, "track#: %d\n", event.data);
10040d18:	1d3b      	adds	r3, r7, #4
10040d1a:	885b      	ldrh	r3, [r3, #2]
10040d1c:	001a      	movs	r2, r3
10040d1e:	493a      	ldr	r1, [pc, #232]	@ (10040e08 <COMM_Event_Handler+0x5b0>)
10040d20:	2414      	movs	r4, #20
10040d22:	193b      	adds	r3, r7, r4
10040d24:	0018      	movs	r0, r3
10040d26:	f005 fe25 	bl	10046974 <siprintf>
			discountprintf(text);
10040d2a:	193b      	adds	r3, r7, r4
10040d2c:	0018      	movs	r0, r3
10040d2e:	f000 f871 	bl	10040e14 <discountprintf>
			//record end time here
			next = schedulemonth;
10040d32:	2356      	movs	r3, #86	@ 0x56
10040d34:	18fb      	adds	r3, r7, r3
10040d36:	2209      	movs	r2, #9
10040d38:	701a      	strb	r2, [r3, #0]
			transition = true;
10040d3a:	2357      	movs	r3, #87	@ 0x57
10040d3c:	18fb      	adds	r3, r7, r3
10040d3e:	2201      	movs	r2, #1
10040d40:	701a      	strb	r2, [r3, #0]
			numevents++;
10040d42:	4b32      	ldr	r3, [pc, #200]	@ (10040e0c <COMM_Event_Handler+0x5b4>)
10040d44:	781b      	ldrb	r3, [r3, #0]
10040d46:	3301      	adds	r3, #1
10040d48:	b2da      	uxtb	r2, r3
10040d4a:	4b30      	ldr	r3, [pc, #192]	@ (10040e0c <COMM_Event_Handler+0x5b4>)
10040d4c:	701a      	strb	r2, [r3, #0]
		}
		break;
10040d4e:	e02f      	b.n	10040db0 <COMM_Event_Handler+0x558>
	case scheduleend:
		if(event.status == EVENT_USART){
10040d50:	1d3b      	adds	r3, r7, #4
10040d52:	781b      	ldrb	r3, [r3, #0]
10040d54:	b25b      	sxtb	r3, r3
10040d56:	2b06      	cmp	r3, #6
10040d58:	d12c      	bne.n	10040db4 <COMM_Event_Handler+0x55c>
			if(event.data == SCHEDULEEND){
10040d5a:	1d3b      	adds	r3, r7, #4
10040d5c:	885b      	ldrh	r3, [r3, #2]
10040d5e:	2b0d      	cmp	r3, #13
10040d60:	d128      	bne.n	10040db4 <COMM_Event_Handler+0x55c>
				next = idle;
10040d62:	2356      	movs	r3, #86	@ 0x56
10040d64:	18fb      	adds	r3, r7, r3
10040d66:	2201      	movs	r2, #1
10040d68:	701a      	strb	r2, [r3, #0]
				transition = true;
10040d6a:	2357      	movs	r3, #87	@ 0x57
10040d6c:	18fb      	adds	r3, r7, r3
10040d6e:	2201      	movs	r2, #1
10040d70:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
10040d72:	e01f      	b.n	10040db4 <COMM_Event_Handler+0x55c>
	default:
		break;
10040d74:	46c0      	nop			@ (mov r8, r8)
10040d76:	e01e      	b.n	10040db6 <COMM_Event_Handler+0x55e>
		break;
10040d78:	46c0      	nop			@ (mov r8, r8)
10040d7a:	e01c      	b.n	10040db6 <COMM_Event_Handler+0x55e>
		break;
10040d7c:	46c0      	nop			@ (mov r8, r8)
10040d7e:	e01a      	b.n	10040db6 <COMM_Event_Handler+0x55e>
		break;
10040d80:	46c0      	nop			@ (mov r8, r8)
10040d82:	e018      	b.n	10040db6 <COMM_Event_Handler+0x55e>
		break;
10040d84:	46c0      	nop			@ (mov r8, r8)
10040d86:	e016      	b.n	10040db6 <COMM_Event_Handler+0x55e>
		break;
10040d88:	46c0      	nop			@ (mov r8, r8)
10040d8a:	e014      	b.n	10040db6 <COMM_Event_Handler+0x55e>
		break;
10040d8c:	46c0      	nop			@ (mov r8, r8)
10040d8e:	e012      	b.n	10040db6 <COMM_Event_Handler+0x55e>
		break;
10040d90:	46c0      	nop			@ (mov r8, r8)
10040d92:	e010      	b.n	10040db6 <COMM_Event_Handler+0x55e>
		break;
10040d94:	46c0      	nop			@ (mov r8, r8)
10040d96:	e00e      	b.n	10040db6 <COMM_Event_Handler+0x55e>
		break;
10040d98:	46c0      	nop			@ (mov r8, r8)
10040d9a:	e00c      	b.n	10040db6 <COMM_Event_Handler+0x55e>
		break;
10040d9c:	46c0      	nop			@ (mov r8, r8)
10040d9e:	e00a      	b.n	10040db6 <COMM_Event_Handler+0x55e>
		break;
10040da0:	46c0      	nop			@ (mov r8, r8)
10040da2:	e008      	b.n	10040db6 <COMM_Event_Handler+0x55e>
		break;
10040da4:	46c0      	nop			@ (mov r8, r8)
10040da6:	e006      	b.n	10040db6 <COMM_Event_Handler+0x55e>
		break;
10040da8:	46c0      	nop			@ (mov r8, r8)
10040daa:	e004      	b.n	10040db6 <COMM_Event_Handler+0x55e>
		break;
10040dac:	46c0      	nop			@ (mov r8, r8)
10040dae:	e002      	b.n	10040db6 <COMM_Event_Handler+0x55e>
		break;
10040db0:	46c0      	nop			@ (mov r8, r8)
10040db2:	e000      	b.n	10040db6 <COMM_Event_Handler+0x55e>
		break;
10040db4:	46c0      	nop			@ (mov r8, r8)
	}
	if(transition){
10040db6:	2357      	movs	r3, #87	@ 0x57
10040db8:	18fb      	adds	r3, r7, r3
10040dba:	781b      	ldrb	r3, [r3, #0]
10040dbc:	2b00      	cmp	r3, #0
10040dbe:	d01a      	beq.n	10040df6 <COMM_Event_Handler+0x59e>
		COMM_Event_Handler((Event_t){EVENT_EXIT});
10040dc0:	2110      	movs	r1, #16
10040dc2:	187b      	adds	r3, r7, r1
10040dc4:	2200      	movs	r2, #0
10040dc6:	601a      	str	r2, [r3, #0]
10040dc8:	187b      	adds	r3, r7, r1
10040dca:	2203      	movs	r2, #3
10040dcc:	701a      	strb	r2, [r3, #0]
10040dce:	187b      	adds	r3, r7, r1
10040dd0:	6818      	ldr	r0, [r3, #0]
10040dd2:	f7ff fd41 	bl	10040858 <COMM_Event_Handler>
		commSM = next;
10040dd6:	4b0e      	ldr	r3, [pc, #56]	@ (10040e10 <COMM_Event_Handler+0x5b8>)
10040dd8:	2256      	movs	r2, #86	@ 0x56
10040dda:	18ba      	adds	r2, r7, r2
10040ddc:	7812      	ldrb	r2, [r2, #0]
10040dde:	701a      	strb	r2, [r3, #0]
		COMM_Event_Handler((Event_t){EVENT_ENTRY});
10040de0:	210c      	movs	r1, #12
10040de2:	187b      	adds	r3, r7, r1
10040de4:	2200      	movs	r2, #0
10040de6:	601a      	str	r2, [r3, #0]
10040de8:	187b      	adds	r3, r7, r1
10040dea:	2202      	movs	r2, #2
10040dec:	701a      	strb	r2, [r3, #0]
10040dee:	187b      	adds	r3, r7, r1
10040df0:	6818      	ldr	r0, [r3, #0]
10040df2:	f7ff fd31 	bl	10040858 <COMM_Event_Handler>
	}
	return 1;
10040df6:	2301      	movs	r3, #1
}
10040df8:	0018      	movs	r0, r3
10040dfa:	46bd      	mov	sp, r7
10040dfc:	b016      	add	sp, #88	@ 0x58
10040dfe:	bdb0      	pop	{r4, r5, r7, pc}
10040e00:	10047264 	.word	0x10047264
10040e04:	10047278 	.word	0x10047278
10040e08:	10047288 	.word	0x10047288
10040e0c:	200001a4 	.word	0x200001a4
10040e10:	20000194 	.word	0x20000194

10040e14 <discountprintf>:
#include <stdio.h>
#include <string.h>
#include "UART.h"
#include "DiscountIO.h"

int	discountprintf (const char * text){
10040e14:	b580      	push	{r7, lr}
10040e16:	b084      	sub	sp, #16
10040e18:	af00      	add	r7, sp, #0
10040e1a:	6078      	str	r0, [r7, #4]
	int length = strlen(text);
10040e1c:	687b      	ldr	r3, [r7, #4]
10040e1e:	0018      	movs	r0, r3
10040e20:	f7ff f970 	bl	10040104 <strlen>
10040e24:	0003      	movs	r3, r0
10040e26:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < length; i++){
10040e28:	2300      	movs	r3, #0
10040e2a:	60fb      	str	r3, [r7, #12]
10040e2c:	e009      	b.n	10040e42 <discountprintf+0x2e>
		USART_WriteTx(text[i]);
10040e2e:	68fb      	ldr	r3, [r7, #12]
10040e30:	687a      	ldr	r2, [r7, #4]
10040e32:	18d3      	adds	r3, r2, r3
10040e34:	781b      	ldrb	r3, [r3, #0]
10040e36:	0018      	movs	r0, r3
10040e38:	f000 fc2c 	bl	10041694 <USART_WriteTx>
	for(int i = 0; i < length; i++){
10040e3c:	68fb      	ldr	r3, [r7, #12]
10040e3e:	3301      	adds	r3, #1
10040e40:	60fb      	str	r3, [r7, #12]
10040e42:	68fa      	ldr	r2, [r7, #12]
10040e44:	68bb      	ldr	r3, [r7, #8]
10040e46:	429a      	cmp	r2, r3
10040e48:	dbf1      	blt.n	10040e2e <discountprintf+0x1a>
	}
	return 1;
10040e4a:	2301      	movs	r3, #1
}
10040e4c:	0018      	movs	r0, r3
10040e4e:	46bd      	mov	sp, r7
10040e50:	b004      	add	sp, #16
10040e52:	bd80      	pop	{r7, pc}

10040e54 <FIFO_Create>:

//----------------------------------------Private Functions--------------------------------------


//----------------------------------------Public Functions---------------------------------------
FIFO FIFO_Create(void){
10040e54:	b580      	push	{r7, lr}
10040e56:	b082      	sub	sp, #8
10040e58:	af00      	add	r7, sp, #0
	FIFO new = malloc(sizeof(struct _FIFO));
10040e5a:	200c      	movs	r0, #12
10040e5c:	f005 fcc4 	bl	100467e8 <malloc>
10040e60:	0003      	movs	r3, r0
10040e62:	607b      	str	r3, [r7, #4]
	if(new == NULL){
10040e64:	687b      	ldr	r3, [r7, #4]
10040e66:	2b00      	cmp	r3, #0
10040e68:	d101      	bne.n	10040e6e <FIFO_Create+0x1a>
		return NULL;
10040e6a:	2300      	movs	r3, #0
10040e6c:	e009      	b.n	10040e82 <FIFO_Create+0x2e>
	}
	new->first = NULL;
10040e6e:	687b      	ldr	r3, [r7, #4]
10040e70:	2200      	movs	r2, #0
10040e72:	601a      	str	r2, [r3, #0]
	new->last = NULL;
10040e74:	687b      	ldr	r3, [r7, #4]
10040e76:	2200      	movs	r2, #0
10040e78:	605a      	str	r2, [r3, #4]
	new->size = 0;
10040e7a:	687b      	ldr	r3, [r7, #4]
10040e7c:	2200      	movs	r2, #0
10040e7e:	811a      	strh	r2, [r3, #8]
	return new;
10040e80:	687b      	ldr	r3, [r7, #4]
}
10040e82:	0018      	movs	r0, r3
10040e84:	46bd      	mov	sp, r7
10040e86:	b002      	add	sp, #8
10040e88:	bd80      	pop	{r7, pc}

10040e8a <FIFO_Enqueue>:
	}
	free(doomed);
	return 1;
}

uint8_t FIFO_Enqueue(FIFO list, Event_t event){
10040e8a:	b580      	push	{r7, lr}
10040e8c:	b084      	sub	sp, #16
10040e8e:	af00      	add	r7, sp, #0
10040e90:	6078      	str	r0, [r7, #4]
10040e92:	003b      	movs	r3, r7
10040e94:	6019      	str	r1, [r3, #0]
	if(list == NULL){
10040e96:	687b      	ldr	r3, [r7, #4]
10040e98:	2b00      	cmp	r3, #0
10040e9a:	d101      	bne.n	10040ea0 <FIFO_Enqueue+0x16>
		return 0;
10040e9c:	2300      	movs	r3, #0
10040e9e:	e026      	b.n	10040eee <FIFO_Enqueue+0x64>
	}
	node* new = malloc(sizeof(node));
10040ea0:	2008      	movs	r0, #8
10040ea2:	f005 fca1 	bl	100467e8 <malloc>
10040ea6:	0003      	movs	r3, r0
10040ea8:	60fb      	str	r3, [r7, #12]
	if(new == NULL){
10040eaa:	68fb      	ldr	r3, [r7, #12]
10040eac:	2b00      	cmp	r3, #0
10040eae:	d101      	bne.n	10040eb4 <FIFO_Enqueue+0x2a>
		return 0;
10040eb0:	2300      	movs	r3, #0
10040eb2:	e01c      	b.n	10040eee <FIFO_Enqueue+0x64>
	}
	new->event = event;
10040eb4:	68fb      	ldr	r3, [r7, #12]
10040eb6:	003a      	movs	r2, r7
10040eb8:	6812      	ldr	r2, [r2, #0]
10040eba:	601a      	str	r2, [r3, #0]
	new->next = NULL;
10040ebc:	68fb      	ldr	r3, [r7, #12]
10040ebe:	2200      	movs	r2, #0
10040ec0:	605a      	str	r2, [r3, #4]
	if(list->last != NULL){//predefined list
10040ec2:	687b      	ldr	r3, [r7, #4]
10040ec4:	685b      	ldr	r3, [r3, #4]
10040ec6:	2b00      	cmp	r3, #0
10040ec8:	d004      	beq.n	10040ed4 <FIFO_Enqueue+0x4a>
		list->last->next = new;
10040eca:	687b      	ldr	r3, [r7, #4]
10040ecc:	685b      	ldr	r3, [r3, #4]
10040ece:	68fa      	ldr	r2, [r7, #12]
10040ed0:	605a      	str	r2, [r3, #4]
10040ed2:	e002      	b.n	10040eda <FIFO_Enqueue+0x50>
	}else{//new list
		list->first = new;
10040ed4:	687b      	ldr	r3, [r7, #4]
10040ed6:	68fa      	ldr	r2, [r7, #12]
10040ed8:	601a      	str	r2, [r3, #0]
	}
	list->last = new;
10040eda:	687b      	ldr	r3, [r7, #4]
10040edc:	68fa      	ldr	r2, [r7, #12]
10040ede:	605a      	str	r2, [r3, #4]
	list->size++;
10040ee0:	687b      	ldr	r3, [r7, #4]
10040ee2:	891b      	ldrh	r3, [r3, #8]
10040ee4:	3301      	adds	r3, #1
10040ee6:	b29a      	uxth	r2, r3
10040ee8:	687b      	ldr	r3, [r7, #4]
10040eea:	811a      	strh	r2, [r3, #8]
	return 1;
10040eec:	2301      	movs	r3, #1
}
10040eee:	0018      	movs	r0, r3
10040ef0:	46bd      	mov	sp, r7
10040ef2:	b004      	add	sp, #16
10040ef4:	bd80      	pop	{r7, pc}

10040ef6 <FIFO_Dequeue>:

Event_t FIFO_Dequeue(FIFO list){
10040ef6:	b590      	push	{r4, r7, lr}
10040ef8:	b089      	sub	sp, #36	@ 0x24
10040efa:	af00      	add	r7, sp, #0
10040efc:	6078      	str	r0, [r7, #4]
	if(list == NULL){
10040efe:	687b      	ldr	r3, [r7, #4]
10040f00:	2b00      	cmp	r3, #0
10040f02:	d107      	bne.n	10040f14 <FIFO_Dequeue+0x1e>
		return (Event_t){EVENT_ERROR, 0};
10040f04:	2118      	movs	r1, #24
10040f06:	187b      	adds	r3, r7, r1
10040f08:	22ff      	movs	r2, #255	@ 0xff
10040f0a:	701a      	strb	r2, [r3, #0]
10040f0c:	187b      	adds	r3, r7, r1
10040f0e:	2200      	movs	r2, #0
10040f10:	805a      	strh	r2, [r3, #2]
10040f12:	e030      	b.n	10040f76 <FIFO_Dequeue+0x80>
	}
	if(list->first == NULL){
10040f14:	687b      	ldr	r3, [r7, #4]
10040f16:	681b      	ldr	r3, [r3, #0]
10040f18:	2b00      	cmp	r3, #0
10040f1a:	d10a      	bne.n	10040f32 <FIFO_Dequeue+0x3c>
		list->last = NULL;// It is preferable to have a memory leak, rather than crash the system
10040f1c:	687b      	ldr	r3, [r7, #4]
10040f1e:	2200      	movs	r2, #0
10040f20:	605a      	str	r2, [r3, #4]
		return (Event_t){EVENT_NONE, 0};
10040f22:	2118      	movs	r1, #24
10040f24:	187b      	adds	r3, r7, r1
10040f26:	2200      	movs	r2, #0
10040f28:	701a      	strb	r2, [r3, #0]
10040f2a:	187b      	adds	r3, r7, r1
10040f2c:	2200      	movs	r2, #0
10040f2e:	805a      	strh	r2, [r3, #2]
10040f30:	e021      	b.n	10040f76 <FIFO_Dequeue+0x80>
	}
	node* doomed = list->first;
10040f32:	687b      	ldr	r3, [r7, #4]
10040f34:	681b      	ldr	r3, [r3, #0]
10040f36:	61fb      	str	r3, [r7, #28]
	list->first = doomed->next;
10040f38:	69fb      	ldr	r3, [r7, #28]
10040f3a:	685a      	ldr	r2, [r3, #4]
10040f3c:	687b      	ldr	r3, [r7, #4]
10040f3e:	601a      	str	r2, [r3, #0]
	if(list->first == NULL){
10040f40:	687b      	ldr	r3, [r7, #4]
10040f42:	681b      	ldr	r3, [r3, #0]
10040f44:	2b00      	cmp	r3, #0
10040f46:	d102      	bne.n	10040f4e <FIFO_Dequeue+0x58>
		list->last = NULL;
10040f48:	687b      	ldr	r3, [r7, #4]
10040f4a:	2200      	movs	r2, #0
10040f4c:	605a      	str	r2, [r3, #4]
	}
	Event_t out = doomed->event;
10040f4e:	2414      	movs	r4, #20
10040f50:	193b      	adds	r3, r7, r4
10040f52:	69fa      	ldr	r2, [r7, #28]
10040f54:	6812      	ldr	r2, [r2, #0]
10040f56:	601a      	str	r2, [r3, #0]
	free(doomed);
10040f58:	69fb      	ldr	r3, [r7, #28]
10040f5a:	0018      	movs	r0, r3
10040f5c:	f005 fc4e 	bl	100467fc <free>
	list->size--;
10040f60:	687b      	ldr	r3, [r7, #4]
10040f62:	891b      	ldrh	r3, [r3, #8]
10040f64:	3b01      	subs	r3, #1
10040f66:	b29a      	uxth	r2, r3
10040f68:	687b      	ldr	r3, [r7, #4]
10040f6a:	811a      	strh	r2, [r3, #8]
	return out;
10040f6c:	2318      	movs	r3, #24
10040f6e:	18fb      	adds	r3, r7, r3
10040f70:	193a      	adds	r2, r7, r4
10040f72:	6812      	ldr	r2, [r2, #0]
10040f74:	601a      	str	r2, [r3, #0]

}
10040f76:	2318      	movs	r3, #24
10040f78:	18fa      	adds	r2, r7, r3
10040f7a:	2300      	movs	r3, #0
10040f7c:	8811      	ldrh	r1, [r2, #0]
10040f7e:	0409      	lsls	r1, r1, #16
10040f80:	0c09      	lsrs	r1, r1, #16
10040f82:	0c1b      	lsrs	r3, r3, #16
10040f84:	041b      	lsls	r3, r3, #16
10040f86:	430b      	orrs	r3, r1
10040f88:	8852      	ldrh	r2, [r2, #2]
10040f8a:	0412      	lsls	r2, r2, #16
10040f8c:	041b      	lsls	r3, r3, #16
10040f8e:	0c1b      	lsrs	r3, r3, #16
10040f90:	4313      	orrs	r3, r2
10040f92:	0018      	movs	r0, r3
10040f94:	46bd      	mov	sp, r7
10040f96:	b009      	add	sp, #36	@ 0x24
10040f98:	bd90      	pop	{r4, r7, pc}

10040f9a <FIFO_GetSize>:

bool FIFO_GetSize(FIFO list){
10040f9a:	b580      	push	{r7, lr}
10040f9c:	b082      	sub	sp, #8
10040f9e:	af00      	add	r7, sp, #0
10040fa0:	6078      	str	r0, [r7, #4]
	return list->size;
10040fa2:	687b      	ldr	r3, [r7, #4]
10040fa4:	891b      	ldrh	r3, [r3, #8]
10040fa6:	1e5a      	subs	r2, r3, #1
10040fa8:	4193      	sbcs	r3, r2
10040faa:	b2db      	uxtb	r3, r3
}
10040fac:	0018      	movs	r0, r3
10040fae:	46bd      	mov	sp, r7
10040fb0:	b002      	add	sp, #8
10040fb2:	bd80      	pop	{r7, pc}

10040fb4 <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
10040fb4:	b580      	push	{r7, lr}
10040fb6:	b084      	sub	sp, #16
10040fb8:	af00      	add	r7, sp, #0
10040fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
10040fbc:	4b07      	ldr	r3, [pc, #28]	@ (10040fdc <LL_AHB1_GRP1_EnableClock+0x28>)
10040fbe:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10040fc0:	4b06      	ldr	r3, [pc, #24]	@ (10040fdc <LL_AHB1_GRP1_EnableClock+0x28>)
10040fc2:	687a      	ldr	r2, [r7, #4]
10040fc4:	430a      	orrs	r2, r1
10040fc6:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10040fc8:	4b04      	ldr	r3, [pc, #16]	@ (10040fdc <LL_AHB1_GRP1_EnableClock+0x28>)
10040fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10040fcc:	687a      	ldr	r2, [r7, #4]
10040fce:	4013      	ands	r3, r2
10040fd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040fd2:	68fb      	ldr	r3, [r7, #12]
}
10040fd4:	46c0      	nop			@ (mov r8, r8)
10040fd6:	46bd      	mov	sp, r7
10040fd8:	b004      	add	sp, #16
10040fda:	bd80      	pop	{r7, pc}
10040fdc:	48400000 	.word	0x48400000

10040fe0 <GPIO_Init>:
 * @function: GPIO_Init()
 * @brief: initialized GPIO pins to receive 6 external buttons
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int GPIO_Init(){
10040fe0:	b580      	push	{r7, lr}
10040fe2:	b086      	sub	sp, #24
10040fe4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
10040fe6:	1d3b      	adds	r3, r7, #4
10040fe8:	0018      	movs	r0, r3
10040fea:	2314      	movs	r3, #20
10040fec:	001a      	movs	r2, r3
10040fee:	2100      	movs	r1, #0
10040ff0:	f005 fce0 	bl	100469b4 <memset>

	//GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
10040ff4:	2008      	movs	r0, #8
10040ff6:	f7ff ffdd 	bl	10040fb4 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
10040ffa:	2004      	movs	r0, #4
10040ffc:	f7ff ffda 	bl	10040fb4 <LL_AHB1_GRP1_EnableClock>

	//Configure GPIO pins on port A
	GPIO_InitStruct.Pin = BUTTON_0_PIN | BUTTON_1_PIN | BUTTON_2_PIN;
10041000:	1d3b      	adds	r3, r7, #4
10041002:	4a11      	ldr	r2, [pc, #68]	@ (10041048 <GPIO_Init+0x68>)
10041004:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
10041006:	1d3b      	adds	r3, r7, #4
10041008:	2200      	movs	r2, #0
1004100a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
1004100c:	1d3b      	adds	r3, r7, #4
1004100e:	2200      	movs	r2, #0
10041010:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10041012:	1d3a      	adds	r2, r7, #4
10041014:	2390      	movs	r3, #144	@ 0x90
10041016:	05db      	lsls	r3, r3, #23
10041018:	0011      	movs	r1, r2
1004101a:	0018      	movs	r0, r3
1004101c:	f001 faf2 	bl	10042604 <HAL_GPIO_Init>

	//Configure GPIO pins : PB15 PB13
	GPIO_InitStruct.Pin = BUTTON_3_PIN | BUTTON_4_PIN | BUTTON_5_PIN;
10041020:	1d3b      	adds	r3, r7, #4
10041022:	4a0a      	ldr	r2, [pc, #40]	@ (1004104c <GPIO_Init+0x6c>)
10041024:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
10041026:	1d3b      	adds	r3, r7, #4
10041028:	2200      	movs	r2, #0
1004102a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
1004102c:	1d3b      	adds	r3, r7, #4
1004102e:	2200      	movs	r2, #0
10041030:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10041032:	1d3b      	adds	r3, r7, #4
10041034:	4a06      	ldr	r2, [pc, #24]	@ (10041050 <GPIO_Init+0x70>)
10041036:	0019      	movs	r1, r3
10041038:	0010      	movs	r0, r2
1004103a:	f001 fae3 	bl	10042604 <HAL_GPIO_Init>
	return INIT_OK;
1004103e:	2301      	movs	r3, #1
}
10041040:	0018      	movs	r0, r3
10041042:	46bd      	mov	sp, r7
10041044:	b006      	add	sp, #24
10041046:	bd80      	pop	{r7, pc}
10041048:	0000040c 	.word	0x0000040c
1004104c:	00003010 	.word	0x00003010
10041050:	48100000 	.word	0x48100000

10041054 <GPIO_ReadButtons>:
 * @Function: GPIO_ReadButtons
 * @Brief: Allows an easy way to read the internal button states
 * @param: none
 * @return: An 8 bit integer where the LSB is button 0, and the 3rd bit is button 3
 */
uint8_t GPIO_ReadButtons(void){
10041054:	b5b0      	push	{r4, r5, r7, lr}
10041056:	af00      	add	r7, sp, #0
	return ((!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) << 2) |
10041058:	2390      	movs	r3, #144	@ 0x90
1004105a:	05db      	lsls	r3, r3, #23
1004105c:	2101      	movs	r1, #1
1004105e:	0018      	movs	r0, r3
10041060:	f001 fc79 	bl	10042956 <HAL_GPIO_ReadPin>
10041064:	1e03      	subs	r3, r0, #0
10041066:	d101      	bne.n	1004106c <GPIO_ReadButtons+0x18>
10041068:	2404      	movs	r4, #4
1004106a:	e000      	b.n	1004106e <GPIO_ReadButtons+0x1a>
1004106c:	2400      	movs	r4, #0
			(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) << 1) |
1004106e:	4b0f      	ldr	r3, [pc, #60]	@ (100410ac <GPIO_ReadButtons+0x58>)
10041070:	2120      	movs	r1, #32
10041072:	0018      	movs	r0, r3
10041074:	f001 fc6f 	bl	10042956 <HAL_GPIO_ReadPin>
10041078:	1e03      	subs	r3, r0, #0
	return ((!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) << 2) |
1004107a:	d101      	bne.n	10041080 <GPIO_ReadButtons+0x2c>
1004107c:	2302      	movs	r3, #2
1004107e:	e000      	b.n	10041082 <GPIO_ReadButtons+0x2e>
10041080:	2300      	movs	r3, #0
10041082:	4323      	orrs	r3, r4
10041084:	b25c      	sxtb	r4, r3
			(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) << 0));
10041086:	2380      	movs	r3, #128	@ 0x80
10041088:	01db      	lsls	r3, r3, #7
1004108a:	4a08      	ldr	r2, [pc, #32]	@ (100410ac <GPIO_ReadButtons+0x58>)
1004108c:	0019      	movs	r1, r3
1004108e:	0010      	movs	r0, r2
10041090:	f001 fc61 	bl	10042956 <HAL_GPIO_ReadPin>
10041094:	0003      	movs	r3, r0
10041096:	425a      	negs	r2, r3
10041098:	4153      	adcs	r3, r2
1004109a:	b2db      	uxtb	r3, r3
1004109c:	b25b      	sxtb	r3, r3
			(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) << 1) |
1004109e:	4323      	orrs	r3, r4
100410a0:	b25b      	sxtb	r3, r3
100410a2:	b2db      	uxtb	r3, r3
}
100410a4:	0018      	movs	r0, r3
100410a6:	46bd      	mov	sp, r7
100410a8:	bdb0      	pop	{r4, r5, r7, pc}
100410aa:	46c0      	nop			@ (mov r8, r8)
100410ac:	48100000 	.word	0x48100000

100410b0 <GPIO_Event_Init>:
 * @Function: GPIO_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t GPIO_Event_Init(FIFO Queue){
100410b0:	b580      	push	{r7, lr}
100410b2:	b082      	sub	sp, #8
100410b4:	af00      	add	r7, sp, #0
100410b6:	6078      	str	r0, [r7, #4]
	buttons = 0;
100410b8:	4b11      	ldr	r3, [pc, #68]	@ (10041100 <GPIO_Event_Init+0x50>)
100410ba:	2200      	movs	r2, #0
100410bc:	701a      	strb	r2, [r3, #0]
	//Initialize dev board leds, for debug purposes
	BSP_LED_Init(LED_BLUE);
100410be:	2000      	movs	r0, #0
100410c0:	f000 fec4 	bl	10041e4c <BSP_LED_Init>
	BSP_LED_Init(LED_GREEN);
100410c4:	2001      	movs	r0, #1
100410c6:	f000 fec1 	bl	10041e4c <BSP_LED_Init>
	BSP_LED_Init(LED_RED);
100410ca:	2002      	movs	r0, #2
100410cc:	f000 febe 	bl	10041e4c <BSP_LED_Init>

	/* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
	BSP_PB_Init(B1, BUTTON_MODE_GPIO);
100410d0:	2100      	movs	r1, #0
100410d2:	2000      	movs	r0, #0
100410d4:	f000 ff4c 	bl	10041f70 <BSP_PB_Init>
	BSP_PB_Init(B2, BUTTON_MODE_GPIO);
100410d8:	2100      	movs	r1, #0
100410da:	2001      	movs	r0, #1
100410dc:	f000 ff48 	bl	10041f70 <BSP_PB_Init>
	BSP_PB_Init(B3, BUTTON_MODE_GPIO);
100410e0:	2100      	movs	r1, #0
100410e2:	2002      	movs	r0, #2
100410e4:	f000 ff44 	bl	10041f70 <BSP_PB_Init>
	GPIOqueue = Queue;
100410e8:	4b06      	ldr	r3, [pc, #24]	@ (10041104 <GPIO_Event_Init+0x54>)
100410ea:	687a      	ldr	r2, [r7, #4]
100410ec:	601a      	str	r2, [r3, #0]
	return GPIO_Init();
100410ee:	f7ff ff77 	bl	10040fe0 <GPIO_Init>
100410f2:	0003      	movs	r3, r0
100410f4:	b2db      	uxtb	r3, r3

}
100410f6:	0018      	movs	r0, r3
100410f8:	46bd      	mov	sp, r7
100410fa:	b002      	add	sp, #8
100410fc:	bd80      	pop	{r7, pc}
100410fe:	46c0      	nop			@ (mov r8, r8)
10041100:	200001a5 	.word	0x200001a5
10041104:	200001a8 	.word	0x200001a8

10041108 <GPIO_Event_Updater>:
 * @Brief: Provides the event checker that checks and posts the changes in the buttons and the current buttons states
 * @param: none
 * @return: An event where the 16bit data is formatted at the 8 most significant bits representing the current states
 * 		 	and the least significant 8 bits representing the changes in the buttons states
 */
Event_t GPIO_Event_Updater(void){
10041108:	b5f0      	push	{r4, r5, r6, r7, lr}
1004110a:	b085      	sub	sp, #20
1004110c:	af00      	add	r7, sp, #0
	uint8_t event = 0;
1004110e:	260f      	movs	r6, #15
10041110:	19bb      	adds	r3, r7, r6
10041112:	2200      	movs	r2, #0
10041114:	701a      	strb	r2, [r3, #0]
	Event_t update = {0, 0};//Initialize to no event
10041116:	1d3b      	adds	r3, r7, #4
10041118:	2200      	movs	r2, #0
1004111a:	701a      	strb	r2, [r3, #0]
1004111c:	1d3b      	adds	r3, r7, #4
1004111e:	2200      	movs	r2, #0
10041120:	805a      	strh	r2, [r3, #2]
	uint8_t newButtons = GPIO_ReadButtons();
10041122:	250e      	movs	r5, #14
10041124:	197c      	adds	r4, r7, r5
10041126:	f7ff ff95 	bl	10041054 <GPIO_ReadButtons>
1004112a:	0003      	movs	r3, r0
1004112c:	7023      	strb	r3, [r4, #0]
	if(newButtons != buttons){
1004112e:	4b21      	ldr	r3, [pc, #132]	@ (100411b4 <GPIO_Event_Updater+0xac>)
10041130:	781b      	ldrb	r3, [r3, #0]
10041132:	0029      	movs	r1, r5
10041134:	187a      	adds	r2, r7, r1
10041136:	7812      	ldrb	r2, [r2, #0]
10041138:	429a      	cmp	r2, r3
1004113a:	d019      	beq.n	10041170 <GPIO_Event_Updater+0x68>
		update.data = (uint16_t)(buttons ^ newButtons) | (((uint16_t)newButtons) << 8);
1004113c:	4b1d      	ldr	r3, [pc, #116]	@ (100411b4 <GPIO_Event_Updater+0xac>)
1004113e:	781a      	ldrb	r2, [r3, #0]
10041140:	187b      	adds	r3, r7, r1
10041142:	781b      	ldrb	r3, [r3, #0]
10041144:	4053      	eors	r3, r2
10041146:	b2db      	uxtb	r3, r3
10041148:	b21a      	sxth	r2, r3
1004114a:	187b      	adds	r3, r7, r1
1004114c:	781b      	ldrb	r3, [r3, #0]
1004114e:	021b      	lsls	r3, r3, #8
10041150:	b21b      	sxth	r3, r3
10041152:	4313      	orrs	r3, r2
10041154:	b21b      	sxth	r3, r3
10041156:	b29a      	uxth	r2, r3
10041158:	1d3b      	adds	r3, r7, #4
1004115a:	805a      	strh	r2, [r3, #2]
		update.status = EVENT_BUTTONS;
1004115c:	1d3b      	adds	r3, r7, #4
1004115e:	2204      	movs	r2, #4
10041160:	701a      	strb	r2, [r3, #0]
		buttons = newButtons;
10041162:	4b14      	ldr	r3, [pc, #80]	@ (100411b4 <GPIO_Event_Updater+0xac>)
10041164:	187a      	adds	r2, r7, r1
10041166:	7812      	ldrb	r2, [r2, #0]
10041168:	701a      	strb	r2, [r3, #0]
		event = 1;
1004116a:	19bb      	adds	r3, r7, r6
1004116c:	2201      	movs	r2, #1
1004116e:	701a      	strb	r2, [r3, #0]
	}
	if(event){FIFO_Enqueue(GPIOqueue, update);}
10041170:	230f      	movs	r3, #15
10041172:	18fb      	adds	r3, r7, r3
10041174:	781b      	ldrb	r3, [r3, #0]
10041176:	2b00      	cmp	r3, #0
10041178:	d006      	beq.n	10041188 <GPIO_Event_Updater+0x80>
1004117a:	4b0f      	ldr	r3, [pc, #60]	@ (100411b8 <GPIO_Event_Updater+0xb0>)
1004117c:	681a      	ldr	r2, [r3, #0]
1004117e:	1d3b      	adds	r3, r7, #4
10041180:	6819      	ldr	r1, [r3, #0]
10041182:	0010      	movs	r0, r2
10041184:	f7ff fe81 	bl	10040e8a <FIFO_Enqueue>
	return update;
10041188:	2108      	movs	r1, #8
1004118a:	187b      	adds	r3, r7, r1
1004118c:	1d3a      	adds	r2, r7, #4
1004118e:	6812      	ldr	r2, [r2, #0]
10041190:	601a      	str	r2, [r3, #0]
10041192:	187a      	adds	r2, r7, r1
10041194:	2300      	movs	r3, #0
10041196:	8811      	ldrh	r1, [r2, #0]
10041198:	0409      	lsls	r1, r1, #16
1004119a:	0c09      	lsrs	r1, r1, #16
1004119c:	0c1b      	lsrs	r3, r3, #16
1004119e:	041b      	lsls	r3, r3, #16
100411a0:	430b      	orrs	r3, r1
100411a2:	8852      	ldrh	r2, [r2, #2]
100411a4:	0412      	lsls	r2, r2, #16
100411a6:	041b      	lsls	r3, r3, #16
100411a8:	0c1b      	lsrs	r3, r3, #16
100411aa:	4313      	orrs	r3, r2
}
100411ac:	0018      	movs	r0, r3
100411ae:	46bd      	mov	sp, r7
100411b0:	b005      	add	sp, #20
100411b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100411b4:	200001a5 	.word	0x200001a5
100411b8:	200001a8 	.word	0x200001a8

100411bc <GPIO_Event_Handler>:
 * @Function: GPIO_Event_Handler
 * @Brief: Currently changes the LEDs on the devboard based on the updates
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t GPIO_Event_Handler(Event_t event){
100411bc:	b580      	push	{r7, lr}
100411be:	b082      	sub	sp, #8
100411c0:	af00      	add	r7, sp, #0
100411c2:	1d3b      	adds	r3, r7, #4
100411c4:	6018      	str	r0, [r3, #0]
	if(event.status == EVENT_BUTTONS){
100411c6:	1d3b      	adds	r3, r7, #4
100411c8:	781b      	ldrb	r3, [r3, #0]
100411ca:	b25b      	sxtb	r3, r3
100411cc:	2b04      	cmp	r3, #4
100411ce:	d11e      	bne.n	1004120e <GPIO_Event_Handler+0x52>
		if((event.data>>0)&0x01){
100411d0:	1d3b      	adds	r3, r7, #4
100411d2:	885b      	ldrh	r3, [r3, #2]
100411d4:	001a      	movs	r2, r3
100411d6:	2301      	movs	r3, #1
100411d8:	4013      	ands	r3, r2
100411da:	d002      	beq.n	100411e2 <GPIO_Event_Handler+0x26>
			BSP_LED_Toggle(LED_BLUE);
100411dc:	2000      	movs	r0, #0
100411de:	f000 feab 	bl	10041f38 <BSP_LED_Toggle>
		}
		if((event.data>>1)&0x01){
100411e2:	1d3b      	adds	r3, r7, #4
100411e4:	885b      	ldrh	r3, [r3, #2]
100411e6:	085b      	lsrs	r3, r3, #1
100411e8:	b29b      	uxth	r3, r3
100411ea:	001a      	movs	r2, r3
100411ec:	2301      	movs	r3, #1
100411ee:	4013      	ands	r3, r2
100411f0:	d002      	beq.n	100411f8 <GPIO_Event_Handler+0x3c>
			BSP_LED_Toggle(LED_GREEN);
100411f2:	2001      	movs	r0, #1
100411f4:	f000 fea0 	bl	10041f38 <BSP_LED_Toggle>
		}
		if((event.data>>2)&0x01){
100411f8:	1d3b      	adds	r3, r7, #4
100411fa:	885b      	ldrh	r3, [r3, #2]
100411fc:	089b      	lsrs	r3, r3, #2
100411fe:	b29b      	uxth	r3, r3
10041200:	001a      	movs	r2, r3
10041202:	2301      	movs	r3, #1
10041204:	4013      	ands	r3, r2
10041206:	d002      	beq.n	1004120e <GPIO_Event_Handler+0x52>
			BSP_LED_Toggle(LED_RED);
10041208:	2002      	movs	r0, #2
1004120a:	f000 fe95 	bl	10041f38 <BSP_LED_Toggle>
		}
	}
	return 1;
1004120e:	2301      	movs	r3, #1
}
10041210:	0018      	movs	r0, r3
10041212:	46bd      	mov	sp, r7
10041214:	b002      	add	sp, #8
10041216:	bd80      	pop	{r7, pc}

10041218 <I2C1_IRQHandler>:
 * @Brief: Overwrites a weak HAL function. handles I2C1 interrupts
 * @param: none
 * @return: none
 */
void I2C1_IRQHandler(void)
{
10041218:	b580      	push	{r7, lr}
1004121a:	af00      	add	r7, sp, #0
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
1004121c:	4b09      	ldr	r3, [pc, #36]	@ (10041244 <I2C1_IRQHandler+0x2c>)
1004121e:	681b      	ldr	r3, [r3, #0]
10041220:	699a      	ldr	r2, [r3, #24]
10041222:	23e0      	movs	r3, #224	@ 0xe0
10041224:	00db      	lsls	r3, r3, #3
10041226:	4013      	ands	r3, r2
10041228:	d004      	beq.n	10041234 <I2C1_IRQHandler+0x1c>
	{
		HAL_I2C_ER_IRQHandler(&hi2c1);
1004122a:	4b06      	ldr	r3, [pc, #24]	@ (10041244 <I2C1_IRQHandler+0x2c>)
1004122c:	0018      	movs	r0, r3
1004122e:	f001 fc01 	bl	10042a34 <HAL_I2C_ER_IRQHandler>
	}
	else
	{
		HAL_I2C_EV_IRQHandler(&hi2c1);
	}
}
10041232:	e003      	b.n	1004123c <I2C1_IRQHandler+0x24>
		HAL_I2C_EV_IRQHandler(&hi2c1);
10041234:	4b03      	ldr	r3, [pc, #12]	@ (10041244 <I2C1_IRQHandler+0x2c>)
10041236:	0018      	movs	r0, r3
10041238:	f001 fbe2 	bl	10042a00 <HAL_I2C_EV_IRQHandler>
}
1004123c:	46c0      	nop			@ (mov r8, r8)
1004123e:	46bd      	mov	sp, r7
10041240:	bd80      	pop	{r7, pc}
10041242:	46c0      	nop			@ (mov r8, r8)
10041244:	200001ac 	.word	0x200001ac

10041248 <main>:
 * @author Caitlin Bonesio
 *
 */

int main(void)
{
10041248:	b580      	push	{r7, lr}
1004124a:	b086      	sub	sp, #24
1004124c:	af00      	add	r7, sp, #0

	//MCU Configuration--------------------------------------------------------
	if( BOARD_Init() != INIT_OK){
1004124e:	f7ff fa4d 	bl	100406ec <BOARD_Init>
10041252:	0003      	movs	r3, r0
10041254:	2b01      	cmp	r3, #1
10041256:	d001      	beq.n	1004125c <main+0x14>
		BOARD_CrashHandler();
10041258:	f7ff fa60 	bl	1004071c <BOARD_CrashHandler>
	}

	// Initialize all configured peripherals
	if(UART_Init() != INIT_OK){
1004125c:	f000 f93c 	bl	100414d8 <UART_Init>
10041260:	0003      	movs	r3, r0
10041262:	2b01      	cmp	r3, #1
10041264:	d001      	beq.n	1004126a <main+0x22>
		BOARD_CrashHandler();
10041266:	f7ff fa59 	bl	1004071c <BOARD_CrashHandler>
	}

	//Initialize all modules
	for(int i = 0; i < EVENTLISTSIZE; i++){
1004126a:	2300      	movs	r3, #0
1004126c:	617b      	str	r3, [r7, #20]
1004126e:	e013      	b.n	10041298 <main+0x50>
		EventQueues[i] = FIFO_Create();
10041270:	f7ff fdf0 	bl	10040e54 <FIFO_Create>
10041274:	0001      	movs	r1, r0
10041276:	4b34      	ldr	r3, [pc, #208]	@ (10041348 <main+0x100>)
10041278:	697a      	ldr	r2, [r7, #20]
1004127a:	0092      	lsls	r2, r2, #2
1004127c:	50d1      	str	r1, [r2, r3]
		if ((*InitList[i])(EventQueues[i]) == EVENT_ERROR){
1004127e:	4b33      	ldr	r3, [pc, #204]	@ (1004134c <main+0x104>)
10041280:	697a      	ldr	r2, [r7, #20]
10041282:	0092      	lsls	r2, r2, #2
10041284:	58d3      	ldr	r3, [r2, r3]
10041286:	4a30      	ldr	r2, [pc, #192]	@ (10041348 <main+0x100>)
10041288:	6979      	ldr	r1, [r7, #20]
1004128a:	0089      	lsls	r1, r1, #2
1004128c:	588a      	ldr	r2, [r1, r2]
1004128e:	0010      	movs	r0, r2
10041290:	4798      	blx	r3
	for(int i = 0; i < EVENTLISTSIZE; i++){
10041292:	697b      	ldr	r3, [r7, #20]
10041294:	3301      	adds	r3, #1
10041296:	617b      	str	r3, [r7, #20]
10041298:	697b      	ldr	r3, [r7, #20]
1004129a:	2b01      	cmp	r3, #1
1004129c:	dde8      	ble.n	10041270 <main+0x28>
			return 0;//We've crashed
		}
	}
	while(1){
		//run all module event checkers
		for(int i = 0; i < EVENTLISTSIZE; i++){
1004129e:	2300      	movs	r3, #0
100412a0:	613b      	str	r3, [r7, #16]
100412a2:	e012      	b.n	100412ca <main+0x82>
			//collect updates from the updaters
			if (((*UpdateList[i])()).status == EVENT_ERROR){
100412a4:	4b2a      	ldr	r3, [pc, #168]	@ (10041350 <main+0x108>)
100412a6:	693a      	ldr	r2, [r7, #16]
100412a8:	0092      	lsls	r2, r2, #2
100412aa:	58d3      	ldr	r3, [r2, r3]
100412ac:	4798      	blx	r3
100412ae:	0003      	movs	r3, r0
100412b0:	001a      	movs	r2, r3
100412b2:	1d3b      	adds	r3, r7, #4
100412b4:	601a      	str	r2, [r3, #0]
100412b6:	1d3b      	adds	r3, r7, #4
100412b8:	781b      	ldrb	r3, [r3, #0]
100412ba:	b25b      	sxtb	r3, r3
100412bc:	3301      	adds	r3, #1
100412be:	d101      	bne.n	100412c4 <main+0x7c>
				BOARD_CrashHandler();//We've crashed
100412c0:	f7ff fa2c 	bl	1004071c <BOARD_CrashHandler>
		for(int i = 0; i < EVENTLISTSIZE; i++){
100412c4:	693b      	ldr	r3, [r7, #16]
100412c6:	3301      	adds	r3, #1
100412c8:	613b      	str	r3, [r7, #16]
100412ca:	693b      	ldr	r3, [r7, #16]
100412cc:	2b01      	cmp	r3, #1
100412ce:	dde9      	ble.n	100412a4 <main+0x5c>
			}
		}
		uint8_t done = 0;
100412d0:	230f      	movs	r3, #15
100412d2:	18fb      	adds	r3, r7, r3
100412d4:	2200      	movs	r2, #0
100412d6:	701a      	strb	r2, [r3, #0]
		while(!done){
100412d8:	e030      	b.n	1004133c <main+0xf4>
			//run all module event handlers
			done = 1;//assume we're done
100412da:	230f      	movs	r3, #15
100412dc:	18fb      	adds	r3, r7, r3
100412de:	2201      	movs	r2, #1
100412e0:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < EVENTLISTSIZE; i++){
100412e2:	2300      	movs	r3, #0
100412e4:	60bb      	str	r3, [r7, #8]
100412e6:	e026      	b.n	10041336 <main+0xee>
				Event_t event = FIFO_Dequeue(EventQueues[i]);
100412e8:	4b17      	ldr	r3, [pc, #92]	@ (10041348 <main+0x100>)
100412ea:	68ba      	ldr	r2, [r7, #8]
100412ec:	0092      	lsls	r2, r2, #2
100412ee:	58d3      	ldr	r3, [r2, r3]
100412f0:	0018      	movs	r0, r3
100412f2:	f7ff fe00 	bl	10040ef6 <FIFO_Dequeue>
100412f6:	0003      	movs	r3, r0
100412f8:	001a      	movs	r2, r3
100412fa:	003b      	movs	r3, r7
100412fc:	601a      	str	r2, [r3, #0]
				if(FIFO_GetSize(EventQueues[i]) != 0){
100412fe:	4b12      	ldr	r3, [pc, #72]	@ (10041348 <main+0x100>)
10041300:	68ba      	ldr	r2, [r7, #8]
10041302:	0092      	lsls	r2, r2, #2
10041304:	58d3      	ldr	r3, [r2, r3]
10041306:	0018      	movs	r0, r3
10041308:	f7ff fe47 	bl	10040f9a <FIFO_GetSize>
1004130c:	1e03      	subs	r3, r0, #0
1004130e:	d003      	beq.n	10041318 <main+0xd0>
					done = 0;//if any queue is not empty, we are not done
10041310:	230f      	movs	r3, #15
10041312:	18fb      	adds	r3, r7, r3
10041314:	2200      	movs	r2, #0
10041316:	701a      	strb	r2, [r3, #0]
				}
				if(event.status != EVENT_NONE){//If there is an update
10041318:	003b      	movs	r3, r7
1004131a:	781b      	ldrb	r3, [r3, #0]
1004131c:	b25b      	sxtb	r3, r3
1004131e:	2b00      	cmp	r3, #0
10041320:	d006      	beq.n	10041330 <main+0xe8>
					if ((*HandlerList[i])(event) == EVENT_ERROR){//pass the updates to the handlers
10041322:	4b0c      	ldr	r3, [pc, #48]	@ (10041354 <main+0x10c>)
10041324:	68ba      	ldr	r2, [r7, #8]
10041326:	0092      	lsls	r2, r2, #2
10041328:	58d2      	ldr	r2, [r2, r3]
1004132a:	003b      	movs	r3, r7
1004132c:	6818      	ldr	r0, [r3, #0]
1004132e:	4790      	blx	r2
			for(int i = 0; i < EVENTLISTSIZE; i++){
10041330:	68bb      	ldr	r3, [r7, #8]
10041332:	3301      	adds	r3, #1
10041334:	60bb      	str	r3, [r7, #8]
10041336:	68bb      	ldr	r3, [r7, #8]
10041338:	2b01      	cmp	r3, #1
1004133a:	ddd5      	ble.n	100412e8 <main+0xa0>
		while(!done){
1004133c:	230f      	movs	r3, #15
1004133e:	18fb      	adds	r3, r7, r3
10041340:	781b      	ldrb	r3, [r3, #0]
10041342:	2b00      	cmp	r3, #0
10041344:	d0c9      	beq.n	100412da <main+0x92>
	while(1){
10041346:	e7aa      	b.n	1004129e <main+0x56>
10041348:	20000200 	.word	0x20000200
1004134c:	200009e8 	.word	0x200009e8
10041350:	200009f0 	.word	0x200009f0
10041354:	200009f8 	.word	0x200009f8

10041358 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
10041358:	b580      	push	{r7, lr}
1004135a:	af00      	add	r7, sp, #0

	milliSeconds++;
1004135c:	4b05      	ldr	r3, [pc, #20]	@ (10041374 <TIM2_IRQHandler+0x1c>)
1004135e:	681b      	ldr	r3, [r3, #0]
10041360:	1c5a      	adds	r2, r3, #1
10041362:	4b04      	ldr	r3, [pc, #16]	@ (10041374 <TIM2_IRQHandler+0x1c>)
10041364:	601a      	str	r2, [r3, #0]
	HAL_TIM_IRQHandler(&htim2);
10041366:	4b04      	ldr	r3, [pc, #16]	@ (10041378 <TIM2_IRQHandler+0x20>)
10041368:	0018      	movs	r0, r3
1004136a:	f003 fe6b 	bl	10045044 <HAL_TIM_IRQHandler>
}
1004136e:	46c0      	nop			@ (mov r8, r8)
10041370:	46bd      	mov	sp, r7
10041372:	bd80      	pop	{r7, pc}
10041374:	20000244 	.word	0x20000244
10041378:	20000208 	.word	0x20000208

1004137c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
1004137c:	b580      	push	{r7, lr}
1004137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
10041380:	4b03      	ldr	r3, [pc, #12]	@ (10041390 <LPUART1_IRQHandler+0x14>)
10041382:	0018      	movs	r0, r3
10041384:	f003 ffda 	bl	1004533c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
10041388:	46c0      	nop			@ (mov r8, r8)
1004138a:	46bd      	mov	sp, r7
1004138c:	bd80      	pop	{r7, pc}
1004138e:	46c0      	nop			@ (mov r8, r8)
10041390:	20000248 	.word	0x20000248

10041394 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
10041394:	b580      	push	{r7, lr}
10041396:	b082      	sub	sp, #8
10041398:	af00      	add	r7, sp, #0

	if(husart1.Instance->ISR & USART_ISR_RXNE_RXFNE_Msk){
1004139a:	4b49      	ldr	r3, [pc, #292]	@ (100414c0 <USART1_IRQHandler+0x12c>)
1004139c:	681b      	ldr	r3, [r3, #0]
1004139e:	69db      	ldr	r3, [r3, #28]
100413a0:	2220      	movs	r2, #32
100413a2:	4013      	ands	r3, r2
100413a4:	d03d      	beq.n	10041422 <USART1_IRQHandler+0x8e>
		if(!USARTrx.full){
100413a6:	4b47      	ldr	r3, [pc, #284]	@ (100414c4 <USART1_IRQHandler+0x130>)
100413a8:	4a47      	ldr	r2, [pc, #284]	@ (100414c8 <USART1_IRQHandler+0x134>)
100413aa:	5c9b      	ldrb	r3, [r3, r2]
100413ac:	2201      	movs	r2, #1
100413ae:	4053      	eors	r3, r2
100413b0:	b2db      	uxtb	r3, r3
100413b2:	2b00      	cmp	r3, #0
100413b4:	d02b      	beq.n	1004140e <USART1_IRQHandler+0x7a>
			USARTrx.data[USARTrx.head] = husart1.Instance->RDR;
100413b6:	4b42      	ldr	r3, [pc, #264]	@ (100414c0 <USART1_IRQHandler+0x12c>)
100413b8:	681b      	ldr	r3, [r3, #0]
100413ba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
100413bc:	4b41      	ldr	r3, [pc, #260]	@ (100414c4 <USART1_IRQHandler+0x130>)
100413be:	4a43      	ldr	r2, [pc, #268]	@ (100414cc <USART1_IRQHandler+0x138>)
100413c0:	5a9b      	ldrh	r3, [r3, r2]
100413c2:	001a      	movs	r2, r3
100413c4:	b2c9      	uxtb	r1, r1
100413c6:	4b3f      	ldr	r3, [pc, #252]	@ (100414c4 <USART1_IRQHandler+0x130>)
100413c8:	5499      	strb	r1, [r3, r2]
			USARTrx.head++;
100413ca:	4b3e      	ldr	r3, [pc, #248]	@ (100414c4 <USART1_IRQHandler+0x130>)
100413cc:	4a3f      	ldr	r2, [pc, #252]	@ (100414cc <USART1_IRQHandler+0x138>)
100413ce:	5a9b      	ldrh	r3, [r3, r2]
100413d0:	3301      	adds	r3, #1
100413d2:	b299      	uxth	r1, r3
100413d4:	4b3b      	ldr	r3, [pc, #236]	@ (100414c4 <USART1_IRQHandler+0x130>)
100413d6:	4a3d      	ldr	r2, [pc, #244]	@ (100414cc <USART1_IRQHandler+0x138>)
100413d8:	5299      	strh	r1, [r3, r2]
			USARTrx.head %= UARTCIRCBUFFSIZE;
100413da:	4b3a      	ldr	r3, [pc, #232]	@ (100414c4 <USART1_IRQHandler+0x130>)
100413dc:	4a3b      	ldr	r2, [pc, #236]	@ (100414cc <USART1_IRQHandler+0x138>)
100413de:	5a9b      	ldrh	r3, [r3, r2]
100413e0:	493b      	ldr	r1, [pc, #236]	@ (100414d0 <USART1_IRQHandler+0x13c>)
100413e2:	0018      	movs	r0, r3
100413e4:	f7fe ff26 	bl	10040234 <__aeabi_uidivmod>
100413e8:	000b      	movs	r3, r1
100413ea:	b299      	uxth	r1, r3
100413ec:	4b35      	ldr	r3, [pc, #212]	@ (100414c4 <USART1_IRQHandler+0x130>)
100413ee:	4a37      	ldr	r2, [pc, #220]	@ (100414cc <USART1_IRQHandler+0x138>)
100413f0:	5299      	strh	r1, [r3, r2]
			if(USARTrx.tail == USARTrx.head){
100413f2:	4a34      	ldr	r2, [pc, #208]	@ (100414c4 <USART1_IRQHandler+0x130>)
100413f4:	2381      	movs	r3, #129	@ 0x81
100413f6:	009b      	lsls	r3, r3, #2
100413f8:	5ad2      	ldrh	r2, [r2, r3]
100413fa:	4b32      	ldr	r3, [pc, #200]	@ (100414c4 <USART1_IRQHandler+0x130>)
100413fc:	4933      	ldr	r1, [pc, #204]	@ (100414cc <USART1_IRQHandler+0x138>)
100413fe:	5a5b      	ldrh	r3, [r3, r1]
10041400:	429a      	cmp	r2, r3
10041402:	d10e      	bne.n	10041422 <USART1_IRQHandler+0x8e>
				USARTrx.full = true;
10041404:	4b2f      	ldr	r3, [pc, #188]	@ (100414c4 <USART1_IRQHandler+0x130>)
10041406:	4a30      	ldr	r2, [pc, #192]	@ (100414c8 <USART1_IRQHandler+0x134>)
10041408:	2101      	movs	r1, #1
1004140a:	5499      	strb	r1, [r3, r2]
1004140c:	e009      	b.n	10041422 <USART1_IRQHandler+0x8e>
			}
		} else {
			uint8_t discard = husart1.Instance->RDR;
1004140e:	4b2c      	ldr	r3, [pc, #176]	@ (100414c0 <USART1_IRQHandler+0x12c>)
10041410:	681b      	ldr	r3, [r3, #0]
10041412:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10041414:	1dfb      	adds	r3, r7, #7
10041416:	701a      	strb	r2, [r3, #0]
			discard++;
10041418:	1dfb      	adds	r3, r7, #7
1004141a:	781a      	ldrb	r2, [r3, #0]
1004141c:	1dfb      	adds	r3, r7, #7
1004141e:	3201      	adds	r2, #1
10041420:	701a      	strb	r2, [r3, #0]
		}
	}
	if((husart1.Instance->ISR & USART_ISR_TC_Msk)){
10041422:	4b27      	ldr	r3, [pc, #156]	@ (100414c0 <USART1_IRQHandler+0x12c>)
10041424:	681b      	ldr	r3, [r3, #0]
10041426:	69db      	ldr	r3, [r3, #28]
10041428:	2240      	movs	r2, #64	@ 0x40
1004142a:	4013      	ands	r3, r2
1004142c:	d03d      	beq.n	100414aa <USART1_IRQHandler+0x116>
		if(USARTtx.head != USARTtx.tail || USARTtx.full){
1004142e:	4b29      	ldr	r3, [pc, #164]	@ (100414d4 <USART1_IRQHandler+0x140>)
10041430:	4a26      	ldr	r2, [pc, #152]	@ (100414cc <USART1_IRQHandler+0x138>)
10041432:	5a9a      	ldrh	r2, [r3, r2]
10041434:	4927      	ldr	r1, [pc, #156]	@ (100414d4 <USART1_IRQHandler+0x140>)
10041436:	2381      	movs	r3, #129	@ 0x81
10041438:	009b      	lsls	r3, r3, #2
1004143a:	5acb      	ldrh	r3, [r1, r3]
1004143c:	429a      	cmp	r2, r3
1004143e:	d104      	bne.n	1004144a <USART1_IRQHandler+0xb6>
10041440:	4b24      	ldr	r3, [pc, #144]	@ (100414d4 <USART1_IRQHandler+0x140>)
10041442:	4a21      	ldr	r2, [pc, #132]	@ (100414c8 <USART1_IRQHandler+0x134>)
10041444:	5c9b      	ldrb	r3, [r3, r2]
10041446:	2b00      	cmp	r3, #0
10041448:	d02b      	beq.n	100414a2 <USART1_IRQHandler+0x10e>
			husart1.Instance->TDR = USARTtx.data[USARTtx.tail];
1004144a:	4a22      	ldr	r2, [pc, #136]	@ (100414d4 <USART1_IRQHandler+0x140>)
1004144c:	2381      	movs	r3, #129	@ 0x81
1004144e:	009b      	lsls	r3, r3, #2
10041450:	5ad3      	ldrh	r3, [r2, r3]
10041452:	001a      	movs	r2, r3
10041454:	4b1f      	ldr	r3, [pc, #124]	@ (100414d4 <USART1_IRQHandler+0x140>)
10041456:	5c9a      	ldrb	r2, [r3, r2]
10041458:	4b19      	ldr	r3, [pc, #100]	@ (100414c0 <USART1_IRQHandler+0x12c>)
1004145a:	681b      	ldr	r3, [r3, #0]
1004145c:	629a      	str	r2, [r3, #40]	@ 0x28
			USARTtx.tail++;
1004145e:	4a1d      	ldr	r2, [pc, #116]	@ (100414d4 <USART1_IRQHandler+0x140>)
10041460:	2381      	movs	r3, #129	@ 0x81
10041462:	009b      	lsls	r3, r3, #2
10041464:	5ad3      	ldrh	r3, [r2, r3]
10041466:	3301      	adds	r3, #1
10041468:	b299      	uxth	r1, r3
1004146a:	4a1a      	ldr	r2, [pc, #104]	@ (100414d4 <USART1_IRQHandler+0x140>)
1004146c:	2381      	movs	r3, #129	@ 0x81
1004146e:	009b      	lsls	r3, r3, #2
10041470:	52d1      	strh	r1, [r2, r3]
			USARTtx.tail %= UARTCIRCBUFFSIZE;
10041472:	4a18      	ldr	r2, [pc, #96]	@ (100414d4 <USART1_IRQHandler+0x140>)
10041474:	2381      	movs	r3, #129	@ 0x81
10041476:	009b      	lsls	r3, r3, #2
10041478:	5ad3      	ldrh	r3, [r2, r3]
1004147a:	4915      	ldr	r1, [pc, #84]	@ (100414d0 <USART1_IRQHandler+0x13c>)
1004147c:	0018      	movs	r0, r3
1004147e:	f7fe fed9 	bl	10040234 <__aeabi_uidivmod>
10041482:	000b      	movs	r3, r1
10041484:	b299      	uxth	r1, r3
10041486:	4a13      	ldr	r2, [pc, #76]	@ (100414d4 <USART1_IRQHandler+0x140>)
10041488:	2381      	movs	r3, #129	@ 0x81
1004148a:	009b      	lsls	r3, r3, #2
1004148c:	52d1      	strh	r1, [r2, r3]
			if(USARTtx.full){
1004148e:	4b11      	ldr	r3, [pc, #68]	@ (100414d4 <USART1_IRQHandler+0x140>)
10041490:	4a0d      	ldr	r2, [pc, #52]	@ (100414c8 <USART1_IRQHandler+0x134>)
10041492:	5c9b      	ldrb	r3, [r3, r2]
10041494:	2b00      	cmp	r3, #0
10041496:	d008      	beq.n	100414aa <USART1_IRQHandler+0x116>
				USARTrx.full = false;
10041498:	4b0a      	ldr	r3, [pc, #40]	@ (100414c4 <USART1_IRQHandler+0x130>)
1004149a:	4a0b      	ldr	r2, [pc, #44]	@ (100414c8 <USART1_IRQHandler+0x134>)
1004149c:	2100      	movs	r1, #0
1004149e:	5499      	strb	r1, [r3, r2]
			if(USARTtx.full){
100414a0:	e003      	b.n	100414aa <USART1_IRQHandler+0x116>
			}

		} else {
			__HAL_USART_CLEAR_FLAG(&husart1, UART_CLEAR_TCF);
100414a2:	4b07      	ldr	r3, [pc, #28]	@ (100414c0 <USART1_IRQHandler+0x12c>)
100414a4:	681b      	ldr	r3, [r3, #0]
100414a6:	2240      	movs	r2, #64	@ 0x40
100414a8:	621a      	str	r2, [r3, #32]
		}
	}
	BSP_LED_Toggle(LED_RED);
100414aa:	2002      	movs	r0, #2
100414ac:	f000 fd44 	bl	10041f38 <BSP_LED_Toggle>
	HAL_USART_IRQHandler(&husart1);
100414b0:	4b03      	ldr	r3, [pc, #12]	@ (100414c0 <USART1_IRQHandler+0x12c>)
100414b2:	0018      	movs	r0, r3
100414b4:	f004 ff76 	bl	100463a4 <HAL_USART_IRQHandler>

}
100414b8:	46c0      	nop			@ (mov r8, r8)
100414ba:	46bd      	mov	sp, r7
100414bc:	b002      	add	sp, #8
100414be:	bd80      	pop	{r7, pc}
100414c0:	200002dc 	.word	0x200002dc
100414c4:	20000554 	.word	0x20000554
100414c8:	00000206 	.word	0x00000206
100414cc:	00000202 	.word	0x00000202
100414d0:	00000201 	.word	0x00000201
100414d4:	2000034c 	.word	0x2000034c

100414d8 <UART_Init>:
 * @function: UART_Init()
 * @brief: initialize the lpuart module
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int UART_Init(void){
100414d8:	b580      	push	{r7, lr}
100414da:	af00      	add	r7, sp, #0

	hlpuart1.Instance = LPUART1;
100414dc:	4b43      	ldr	r3, [pc, #268]	@ (100415ec <UART_Init+0x114>)
100414de:	4a44      	ldr	r2, [pc, #272]	@ (100415f0 <UART_Init+0x118>)
100414e0:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 9600;
100414e2:	4b42      	ldr	r3, [pc, #264]	@ (100415ec <UART_Init+0x114>)
100414e4:	2296      	movs	r2, #150	@ 0x96
100414e6:	0192      	lsls	r2, r2, #6
100414e8:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
100414ea:	4b40      	ldr	r3, [pc, #256]	@ (100415ec <UART_Init+0x114>)
100414ec:	2200      	movs	r2, #0
100414ee:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
100414f0:	4b3e      	ldr	r3, [pc, #248]	@ (100415ec <UART_Init+0x114>)
100414f2:	2200      	movs	r2, #0
100414f4:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
100414f6:	4b3d      	ldr	r3, [pc, #244]	@ (100415ec <UART_Init+0x114>)
100414f8:	2200      	movs	r2, #0
100414fa:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
100414fc:	4b3b      	ldr	r3, [pc, #236]	@ (100415ec <UART_Init+0x114>)
100414fe:	220c      	movs	r2, #12
10041500:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
10041502:	4b3a      	ldr	r3, [pc, #232]	@ (100415ec <UART_Init+0x114>)
10041504:	2200      	movs	r2, #0
10041506:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10041508:	4b38      	ldr	r3, [pc, #224]	@ (100415ec <UART_Init+0x114>)
1004150a:	2200      	movs	r2, #0
1004150c:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
1004150e:	4b37      	ldr	r3, [pc, #220]	@ (100415ec <UART_Init+0x114>)
10041510:	2200      	movs	r2, #0
10041512:	625a      	str	r2, [r3, #36]	@ 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
10041514:	4b35      	ldr	r3, [pc, #212]	@ (100415ec <UART_Init+0x114>)
10041516:	2200      	movs	r2, #0
10041518:	629a      	str	r2, [r3, #40]	@ 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_ENABLE;
1004151a:	4b34      	ldr	r3, [pc, #208]	@ (100415ec <UART_Init+0x114>)
1004151c:	2280      	movs	r2, #128	@ 0x80
1004151e:	0592      	lsls	r2, r2, #22
10041520:	665a      	str	r2, [r3, #100]	@ 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
10041522:	4b32      	ldr	r3, [pc, #200]	@ (100415ec <UART_Init+0x114>)
10041524:	0018      	movs	r0, r3
10041526:	f003 feb3 	bl	10045290 <HAL_UART_Init>
1004152a:	1e03      	subs	r3, r0, #0
1004152c:	d001      	beq.n	10041532 <UART_Init+0x5a>
	{
	return INIT_ERROR;
1004152e:	2300      	movs	r3, #0
10041530:	e058      	b.n	100415e4 <UART_Init+0x10c>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
10041532:	4b2e      	ldr	r3, [pc, #184]	@ (100415ec <UART_Init+0x114>)
10041534:	2100      	movs	r1, #0
10041536:	0018      	movs	r0, r3
10041538:	f004 fe55 	bl	100461e6 <HAL_UARTEx_SetTxFifoThreshold>
1004153c:	1e03      	subs	r3, r0, #0
1004153e:	d001      	beq.n	10041544 <UART_Init+0x6c>
	{
	  return INIT_ERROR;
10041540:	2300      	movs	r3, #0
10041542:	e04f      	b.n	100415e4 <UART_Init+0x10c>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
10041544:	4b29      	ldr	r3, [pc, #164]	@ (100415ec <UART_Init+0x114>)
10041546:	2100      	movs	r1, #0
10041548:	0018      	movs	r0, r3
1004154a:	f004 fe8b 	bl	10046264 <HAL_UARTEx_SetRxFifoThreshold>
1004154e:	1e03      	subs	r3, r0, #0
10041550:	d001      	beq.n	10041556 <UART_Init+0x7e>
	{
	  return INIT_ERROR;
10041552:	2300      	movs	r3, #0
10041554:	e046      	b.n	100415e4 <UART_Init+0x10c>
	}
	husart1.Instance = USART1;
10041556:	4b27      	ldr	r3, [pc, #156]	@ (100415f4 <UART_Init+0x11c>)
10041558:	4a27      	ldr	r2, [pc, #156]	@ (100415f8 <UART_Init+0x120>)
1004155a:	601a      	str	r2, [r3, #0]
//	if (HAL_USART_Init(&husart1) != HAL_OK)
//	{
//	return INIT_ERROR;
//	}

	BspCOMInit.BaudRate   = 9600;
1004155c:	4b27      	ldr	r3, [pc, #156]	@ (100415fc <UART_Init+0x124>)
1004155e:	2296      	movs	r2, #150	@ 0x96
10041560:	0192      	lsls	r2, r2, #6
10041562:	601a      	str	r2, [r3, #0]
	BspCOMInit.WordLength = COM_WORDLENGTH_8B;
10041564:	4b25      	ldr	r3, [pc, #148]	@ (100415fc <UART_Init+0x124>)
10041566:	2200      	movs	r2, #0
10041568:	605a      	str	r2, [r3, #4]
	BspCOMInit.StopBits   = COM_STOPBITS_1;
1004156a:	4b24      	ldr	r3, [pc, #144]	@ (100415fc <UART_Init+0x124>)
1004156c:	2200      	movs	r2, #0
1004156e:	811a      	strh	r2, [r3, #8]
	BspCOMInit.Parity     = COM_PARITY_NONE;
10041570:	4b22      	ldr	r3, [pc, #136]	@ (100415fc <UART_Init+0x124>)
10041572:	2200      	movs	r2, #0
10041574:	815a      	strh	r2, [r3, #10]
	BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
10041576:	4b21      	ldr	r3, [pc, #132]	@ (100415fc <UART_Init+0x124>)
10041578:	2200      	movs	r2, #0
1004157a:	819a      	strh	r2, [r3, #12]
	if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
1004157c:	4b1f      	ldr	r3, [pc, #124]	@ (100415fc <UART_Init+0x124>)
1004157e:	0019      	movs	r1, r3
10041580:	2000      	movs	r0, #0
10041582:	f000 fd91 	bl	100420a8 <BSP_COM_Init>
10041586:	1e03      	subs	r3, r0, #0
10041588:	d001      	beq.n	1004158e <UART_Init+0xb6>
	{
		Error_Handler();
1004158a:	f7ff f8cd 	bl	10040728 <Error_Handler>
	}
	HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
1004158e:	2201      	movs	r2, #1
10041590:	2101      	movs	r1, #1
10041592:	2008      	movs	r0, #8
10041594:	f000 ff72 	bl	1004247c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
10041598:	2008      	movs	r0, #8
1004159a:	f000 ff84 	bl	100424a6 <HAL_NVIC_EnableIRQ>
	husart1.Instance->CR1 |= (USART_CR1_RXNEIE_RXFNEIE_Msk | USART_CR1_TCIE_Msk);
1004159e:	4b15      	ldr	r3, [pc, #84]	@ (100415f4 <UART_Init+0x11c>)
100415a0:	681b      	ldr	r3, [r3, #0]
100415a2:	681a      	ldr	r2, [r3, #0]
100415a4:	4b13      	ldr	r3, [pc, #76]	@ (100415f4 <UART_Init+0x11c>)
100415a6:	681b      	ldr	r3, [r3, #0]
100415a8:	2160      	movs	r1, #96	@ 0x60
100415aa:	430a      	orrs	r2, r1
100415ac:	601a      	str	r2, [r3, #0]

	USARTtx.tail = 0;
100415ae:	4a14      	ldr	r2, [pc, #80]	@ (10041600 <UART_Init+0x128>)
100415b0:	2381      	movs	r3, #129	@ 0x81
100415b2:	009b      	lsls	r3, r3, #2
100415b4:	2100      	movs	r1, #0
100415b6:	52d1      	strh	r1, [r2, r3]
	USARTtx.head = 0;
100415b8:	4b11      	ldr	r3, [pc, #68]	@ (10041600 <UART_Init+0x128>)
100415ba:	4a12      	ldr	r2, [pc, #72]	@ (10041604 <UART_Init+0x12c>)
100415bc:	2100      	movs	r1, #0
100415be:	5299      	strh	r1, [r3, r2]
	USARTtx.full = false;
100415c0:	4b0f      	ldr	r3, [pc, #60]	@ (10041600 <UART_Init+0x128>)
100415c2:	4a11      	ldr	r2, [pc, #68]	@ (10041608 <UART_Init+0x130>)
100415c4:	2100      	movs	r1, #0
100415c6:	5499      	strb	r1, [r3, r2]

	USARTrx.tail = 0;
100415c8:	4a10      	ldr	r2, [pc, #64]	@ (1004160c <UART_Init+0x134>)
100415ca:	2381      	movs	r3, #129	@ 0x81
100415cc:	009b      	lsls	r3, r3, #2
100415ce:	2100      	movs	r1, #0
100415d0:	52d1      	strh	r1, [r2, r3]
	USARTrx.head = 0;
100415d2:	4b0e      	ldr	r3, [pc, #56]	@ (1004160c <UART_Init+0x134>)
100415d4:	4a0b      	ldr	r2, [pc, #44]	@ (10041604 <UART_Init+0x12c>)
100415d6:	2100      	movs	r1, #0
100415d8:	5299      	strh	r1, [r3, r2]
	USARTrx.full = false;
100415da:	4b0c      	ldr	r3, [pc, #48]	@ (1004160c <UART_Init+0x134>)
100415dc:	4a0a      	ldr	r2, [pc, #40]	@ (10041608 <UART_Init+0x130>)
100415de:	2100      	movs	r1, #0
100415e0:	5499      	strb	r1, [r3, r2]

//	__HAL_USART_ENABLE_IT(&husart1, UART_IT_TXE);
//	__HAL_USART_ENABLE_IT(&husart1, UART_IT_RXNE);
	return INIT_OK;
100415e2:	2301      	movs	r3, #1
}
100415e4:	0018      	movs	r0, r3
100415e6:	46bd      	mov	sp, r7
100415e8:	bd80      	pop	{r7, pc}
100415ea:	46c0      	nop			@ (mov r8, r8)
100415ec:	20000248 	.word	0x20000248
100415f0:	41005000 	.word	0x41005000
100415f4:	200002dc 	.word	0x200002dc
100415f8:	41004000 	.word	0x41004000
100415fc:	2000033c 	.word	0x2000033c
10041600:	2000034c 	.word	0x2000034c
10041604:	00000202 	.word	0x00000202
10041608:	00000206 	.word	0x00000206
1004160c:	20000554 	.word	0x20000554

10041610 <USART_ReadRx>:
 * @function: USART_ReadRx()
 * @brief: reads one received byte from the usart
 * @param: none
 * @return: the character received, 0x25 (NAK) if no character to read
 */
char USART_ReadRx(void){
10041610:	b580      	push	{r7, lr}
10041612:	b082      	sub	sp, #8
10041614:	af00      	add	r7, sp, #0
	if(USARTrx.head != USARTrx.tail || USARTrx.full){
10041616:	4b1b      	ldr	r3, [pc, #108]	@ (10041684 <USART_ReadRx+0x74>)
10041618:	4a1b      	ldr	r2, [pc, #108]	@ (10041688 <USART_ReadRx+0x78>)
1004161a:	5a9a      	ldrh	r2, [r3, r2]
1004161c:	4919      	ldr	r1, [pc, #100]	@ (10041684 <USART_ReadRx+0x74>)
1004161e:	2381      	movs	r3, #129	@ 0x81
10041620:	009b      	lsls	r3, r3, #2
10041622:	5acb      	ldrh	r3, [r1, r3]
10041624:	429a      	cmp	r2, r3
10041626:	d104      	bne.n	10041632 <USART_ReadRx+0x22>
10041628:	4b16      	ldr	r3, [pc, #88]	@ (10041684 <USART_ReadRx+0x74>)
1004162a:	4a18      	ldr	r2, [pc, #96]	@ (1004168c <USART_ReadRx+0x7c>)
1004162c:	5c9b      	ldrb	r3, [r3, r2]
1004162e:	2b00      	cmp	r3, #0
10041630:	d023      	beq.n	1004167a <USART_ReadRx+0x6a>
		char data = USARTrx.data[USARTrx.tail];
10041632:	4a14      	ldr	r2, [pc, #80]	@ (10041684 <USART_ReadRx+0x74>)
10041634:	2381      	movs	r3, #129	@ 0x81
10041636:	009b      	lsls	r3, r3, #2
10041638:	5ad3      	ldrh	r3, [r2, r3]
1004163a:	0019      	movs	r1, r3
1004163c:	1dfb      	adds	r3, r7, #7
1004163e:	4a11      	ldr	r2, [pc, #68]	@ (10041684 <USART_ReadRx+0x74>)
10041640:	5c52      	ldrb	r2, [r2, r1]
10041642:	701a      	strb	r2, [r3, #0]
		USARTrx.tail++;
10041644:	4a0f      	ldr	r2, [pc, #60]	@ (10041684 <USART_ReadRx+0x74>)
10041646:	2381      	movs	r3, #129	@ 0x81
10041648:	009b      	lsls	r3, r3, #2
1004164a:	5ad3      	ldrh	r3, [r2, r3]
1004164c:	3301      	adds	r3, #1
1004164e:	b299      	uxth	r1, r3
10041650:	4a0c      	ldr	r2, [pc, #48]	@ (10041684 <USART_ReadRx+0x74>)
10041652:	2381      	movs	r3, #129	@ 0x81
10041654:	009b      	lsls	r3, r3, #2
10041656:	52d1      	strh	r1, [r2, r3]
		USARTrx.tail %= UARTCIRCBUFFSIZE;
10041658:	4a0a      	ldr	r2, [pc, #40]	@ (10041684 <USART_ReadRx+0x74>)
1004165a:	2381      	movs	r3, #129	@ 0x81
1004165c:	009b      	lsls	r3, r3, #2
1004165e:	5ad3      	ldrh	r3, [r2, r3]
10041660:	490b      	ldr	r1, [pc, #44]	@ (10041690 <USART_ReadRx+0x80>)
10041662:	0018      	movs	r0, r3
10041664:	f7fe fde6 	bl	10040234 <__aeabi_uidivmod>
10041668:	000b      	movs	r3, r1
1004166a:	b299      	uxth	r1, r3
1004166c:	4a05      	ldr	r2, [pc, #20]	@ (10041684 <USART_ReadRx+0x74>)
1004166e:	2381      	movs	r3, #129	@ 0x81
10041670:	009b      	lsls	r3, r3, #2
10041672:	52d1      	strh	r1, [r2, r3]
		return data;
10041674:	1dfb      	adds	r3, r7, #7
10041676:	781b      	ldrb	r3, [r3, #0]
10041678:	e000      	b.n	1004167c <USART_ReadRx+0x6c>
	} else {
		return UARTFAILED;
1004167a:	2325      	movs	r3, #37	@ 0x25
	}
}
1004167c:	0018      	movs	r0, r3
1004167e:	46bd      	mov	sp, r7
10041680:	b002      	add	sp, #8
10041682:	bd80      	pop	{r7, pc}
10041684:	20000554 	.word	0x20000554
10041688:	00000202 	.word	0x00000202
1004168c:	00000206 	.word	0x00000206
10041690:	00000201 	.word	0x00000201

10041694 <USART_WriteTx>:
 * @function: USART_WriteTx()
 * @brief: sends one byte through the usart
 * @param: input, character to be sent
 * @return: status, 0x00 if success,  0x25 (NAK) if failed,
 */
char USART_WriteTx(char input){
10041694:	b580      	push	{r7, lr}
10041696:	b082      	sub	sp, #8
10041698:	af00      	add	r7, sp, #0
1004169a:	0002      	movs	r2, r0
1004169c:	1dfb      	adds	r3, r7, #7
1004169e:	701a      	strb	r2, [r3, #0]
	if(!USARTtx.full){
100416a0:	4b1f      	ldr	r3, [pc, #124]	@ (10041720 <USART_WriteTx+0x8c>)
100416a2:	4a20      	ldr	r2, [pc, #128]	@ (10041724 <USART_WriteTx+0x90>)
100416a4:	5c9b      	ldrb	r3, [r3, r2]
100416a6:	2201      	movs	r2, #1
100416a8:	4053      	eors	r3, r2
100416aa:	b2db      	uxtb	r3, r3
100416ac:	2b00      	cmp	r3, #0
100416ae:	d032      	beq.n	10041716 <USART_WriteTx+0x82>
		if(USARTtx.head == USARTtx.tail && (husart1.Instance->ISR & USART_ISR_TXE_TXFNF_Msk)){
100416b0:	4b1b      	ldr	r3, [pc, #108]	@ (10041720 <USART_WriteTx+0x8c>)
100416b2:	4a1d      	ldr	r2, [pc, #116]	@ (10041728 <USART_WriteTx+0x94>)
100416b4:	5a9a      	ldrh	r2, [r3, r2]
100416b6:	491a      	ldr	r1, [pc, #104]	@ (10041720 <USART_WriteTx+0x8c>)
100416b8:	2381      	movs	r3, #129	@ 0x81
100416ba:	009b      	lsls	r3, r3, #2
100416bc:	5acb      	ldrh	r3, [r1, r3]
100416be:	429a      	cmp	r2, r3
100416c0:	d10b      	bne.n	100416da <USART_WriteTx+0x46>
100416c2:	4b1a      	ldr	r3, [pc, #104]	@ (1004172c <USART_WriteTx+0x98>)
100416c4:	681b      	ldr	r3, [r3, #0]
100416c6:	69db      	ldr	r3, [r3, #28]
100416c8:	2280      	movs	r2, #128	@ 0x80
100416ca:	4013      	ands	r3, r2
100416cc:	d005      	beq.n	100416da <USART_WriteTx+0x46>
			husart1.Instance->TDR = input;
100416ce:	4b17      	ldr	r3, [pc, #92]	@ (1004172c <USART_WriteTx+0x98>)
100416d0:	681b      	ldr	r3, [r3, #0]
100416d2:	1dfa      	adds	r2, r7, #7
100416d4:	7812      	ldrb	r2, [r2, #0]
100416d6:	629a      	str	r2, [r3, #40]	@ 0x28
100416d8:	e01b      	b.n	10041712 <USART_WriteTx+0x7e>
		} else {
			USARTtx.data[USARTtx.head] = input;
100416da:	4b11      	ldr	r3, [pc, #68]	@ (10041720 <USART_WriteTx+0x8c>)
100416dc:	4a12      	ldr	r2, [pc, #72]	@ (10041728 <USART_WriteTx+0x94>)
100416de:	5a9b      	ldrh	r3, [r3, r2]
100416e0:	0019      	movs	r1, r3
100416e2:	4b0f      	ldr	r3, [pc, #60]	@ (10041720 <USART_WriteTx+0x8c>)
100416e4:	1dfa      	adds	r2, r7, #7
100416e6:	7812      	ldrb	r2, [r2, #0]
100416e8:	545a      	strb	r2, [r3, r1]
			USARTtx.head++;
100416ea:	4b0d      	ldr	r3, [pc, #52]	@ (10041720 <USART_WriteTx+0x8c>)
100416ec:	4a0e      	ldr	r2, [pc, #56]	@ (10041728 <USART_WriteTx+0x94>)
100416ee:	5a9b      	ldrh	r3, [r3, r2]
100416f0:	3301      	adds	r3, #1
100416f2:	b299      	uxth	r1, r3
100416f4:	4b0a      	ldr	r3, [pc, #40]	@ (10041720 <USART_WriteTx+0x8c>)
100416f6:	4a0c      	ldr	r2, [pc, #48]	@ (10041728 <USART_WriteTx+0x94>)
100416f8:	5299      	strh	r1, [r3, r2]
			USARTtx.head %= UARTCIRCBUFFSIZE;
100416fa:	4b09      	ldr	r3, [pc, #36]	@ (10041720 <USART_WriteTx+0x8c>)
100416fc:	4a0a      	ldr	r2, [pc, #40]	@ (10041728 <USART_WriteTx+0x94>)
100416fe:	5a9b      	ldrh	r3, [r3, r2]
10041700:	490b      	ldr	r1, [pc, #44]	@ (10041730 <USART_WriteTx+0x9c>)
10041702:	0018      	movs	r0, r3
10041704:	f7fe fd96 	bl	10040234 <__aeabi_uidivmod>
10041708:	000b      	movs	r3, r1
1004170a:	b299      	uxth	r1, r3
1004170c:	4b04      	ldr	r3, [pc, #16]	@ (10041720 <USART_WriteTx+0x8c>)
1004170e:	4a06      	ldr	r2, [pc, #24]	@ (10041728 <USART_WriteTx+0x94>)
10041710:	5299      	strh	r1, [r3, r2]
		}
		return UARTSUCCESS;
10041712:	2300      	movs	r3, #0
10041714:	e000      	b.n	10041718 <USART_WriteTx+0x84>
	} else {
		return UARTFAILED;
10041716:	2325      	movs	r3, #37	@ 0x25
	}
}
10041718:	0018      	movs	r0, r3
1004171a:	46bd      	mov	sp, r7
1004171c:	b002      	add	sp, #8
1004171e:	bd80      	pop	{r7, pc}
10041720:	2000034c 	.word	0x2000034c
10041724:	00000206 	.word	0x00000206
10041728:	00000202 	.word	0x00000202
1004172c:	200002dc 	.word	0x200002dc
10041730:	00000201 	.word	0x00000201

10041734 <USART_TxEmpty>:
 * @function: USART_TxEmpty()
 * @brief: returns if the Tx  buffer is empty
 * @param: none
 * @return: status, 0x00 if not empty,  0x01 if empty,
 */
uint8_t USART_TxEmpty(void){
10041734:	b580      	push	{r7, lr}
10041736:	af00      	add	r7, sp, #0
	return (USARTtx.head == USARTtx.tail) && !USARTtx.full;
10041738:	4b0b      	ldr	r3, [pc, #44]	@ (10041768 <USART_TxEmpty+0x34>)
1004173a:	4a0c      	ldr	r2, [pc, #48]	@ (1004176c <USART_TxEmpty+0x38>)
1004173c:	5a9a      	ldrh	r2, [r3, r2]
1004173e:	490a      	ldr	r1, [pc, #40]	@ (10041768 <USART_TxEmpty+0x34>)
10041740:	2381      	movs	r3, #129	@ 0x81
10041742:	009b      	lsls	r3, r3, #2
10041744:	5acb      	ldrh	r3, [r1, r3]
10041746:	429a      	cmp	r2, r3
10041748:	d109      	bne.n	1004175e <USART_TxEmpty+0x2a>
1004174a:	4b07      	ldr	r3, [pc, #28]	@ (10041768 <USART_TxEmpty+0x34>)
1004174c:	4a08      	ldr	r2, [pc, #32]	@ (10041770 <USART_TxEmpty+0x3c>)
1004174e:	5c9b      	ldrb	r3, [r3, r2]
10041750:	2201      	movs	r2, #1
10041752:	4053      	eors	r3, r2
10041754:	b2db      	uxtb	r3, r3
10041756:	2b00      	cmp	r3, #0
10041758:	d001      	beq.n	1004175e <USART_TxEmpty+0x2a>
1004175a:	2301      	movs	r3, #1
1004175c:	e000      	b.n	10041760 <USART_TxEmpty+0x2c>
1004175e:	2300      	movs	r3, #0
10041760:	b2db      	uxtb	r3, r3
}
10041762:	0018      	movs	r0, r3
10041764:	46bd      	mov	sp, r7
10041766:	bd80      	pop	{r7, pc}
10041768:	2000034c 	.word	0x2000034c
1004176c:	00000202 	.word	0x00000202
10041770:	00000206 	.word	0x00000206

10041774 <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
10041774:	b580      	push	{r7, lr}
10041776:	b082      	sub	sp, #8
10041778:	af00      	add	r7, sp, #0
1004177a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
1004177c:	4b08      	ldr	r3, [pc, #32]	@ (100417a0 <LL_PWR_SetNoPullB+0x2c>)
1004177e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10041780:	687b      	ldr	r3, [r7, #4]
10041782:	43d9      	mvns	r1, r3
10041784:	4b06      	ldr	r3, [pc, #24]	@ (100417a0 <LL_PWR_SetNoPullB+0x2c>)
10041786:	400a      	ands	r2, r1
10041788:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004178a:	4b05      	ldr	r3, [pc, #20]	@ (100417a0 <LL_PWR_SetNoPullB+0x2c>)
1004178c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004178e:	687b      	ldr	r3, [r7, #4]
10041790:	43d9      	mvns	r1, r3
10041792:	4b03      	ldr	r3, [pc, #12]	@ (100417a0 <LL_PWR_SetNoPullB+0x2c>)
10041794:	400a      	ands	r2, r1
10041796:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10041798:	46c0      	nop			@ (mov r8, r8)
1004179a:	46bd      	mov	sp, r7
1004179c:	b002      	add	sp, #8
1004179e:	bd80      	pop	{r7, pc}
100417a0:	48500000 	.word	0x48500000

100417a4 <LL_AHB1_GRP1_EnableClock>:
{
100417a4:	b580      	push	{r7, lr}
100417a6:	b084      	sub	sp, #16
100417a8:	af00      	add	r7, sp, #0
100417aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
100417ac:	4b07      	ldr	r3, [pc, #28]	@ (100417cc <LL_AHB1_GRP1_EnableClock+0x28>)
100417ae:	6d19      	ldr	r1, [r3, #80]	@ 0x50
100417b0:	4b06      	ldr	r3, [pc, #24]	@ (100417cc <LL_AHB1_GRP1_EnableClock+0x28>)
100417b2:	687a      	ldr	r2, [r7, #4]
100417b4:	430a      	orrs	r2, r1
100417b6:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
100417b8:	4b04      	ldr	r3, [pc, #16]	@ (100417cc <LL_AHB1_GRP1_EnableClock+0x28>)
100417ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100417bc:	687a      	ldr	r2, [r7, #4]
100417be:	4013      	ands	r3, r2
100417c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100417c2:	68fb      	ldr	r3, [r7, #12]
}
100417c4:	46c0      	nop			@ (mov r8, r8)
100417c6:	46bd      	mov	sp, r7
100417c8:	b004      	add	sp, #16
100417ca:	bd80      	pop	{r7, pc}
100417cc:	48400000 	.word	0x48400000

100417d0 <LL_APB0_GRP1_EnableClock>:
  * @retval None
  * @note   LL_APB0_GRP1_PERIPH_TIM1 is valid only for STM32WB06 and STM32WB07
  * @note   LL_APB0_GRP1_PERIPH_TIM2, LL_APB0_GRP1_PERIPH_TIM16 and LL_APB0_GRP1_PERIPH_TIM17 are valid for STM32WB05 and STM32WB09
  */
__STATIC_INLINE void LL_APB0_GRP1_EnableClock(uint32_t Periphs)
{
100417d0:	b580      	push	{r7, lr}
100417d2:	b084      	sub	sp, #16
100417d4:	af00      	add	r7, sp, #0
100417d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB0ENR, Periphs);
100417d8:	4b07      	ldr	r3, [pc, #28]	@ (100417f8 <LL_APB0_GRP1_EnableClock+0x28>)
100417da:	6d59      	ldr	r1, [r3, #84]	@ 0x54
100417dc:	4b06      	ldr	r3, [pc, #24]	@ (100417f8 <LL_APB0_GRP1_EnableClock+0x28>)
100417de:	687a      	ldr	r2, [r7, #4]
100417e0:	430a      	orrs	r2, r1
100417e2:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
100417e4:	4b04      	ldr	r3, [pc, #16]	@ (100417f8 <LL_APB0_GRP1_EnableClock+0x28>)
100417e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
100417e8:	687a      	ldr	r2, [r7, #4]
100417ea:	4013      	ands	r3, r2
100417ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100417ee:	68fb      	ldr	r3, [r7, #12]
}
100417f0:	46c0      	nop			@ (mov r8, r8)
100417f2:	46bd      	mov	sp, r7
100417f4:	b004      	add	sp, #16
100417f6:	bd80      	pop	{r7, pc}
100417f8:	48400000 	.word	0x48400000

100417fc <LL_APB1_GRP1_EnableClock>:
  * @arg LL_APB1_GRP1_PERIPH_I2C2
  * @retval None
  * @note   LL_APB1_GRP1_PERIPH_SPI1, LL_APB1_GRP1_PERIPH_SPI2 and LL_APB1_GRP1_PERIPH_I2C2 are valid for STM32WB06 and STM32WB07
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
100417fc:	b580      	push	{r7, lr}
100417fe:	b084      	sub	sp, #16
10041800:	af00      	add	r7, sp, #0
10041802:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
10041804:	4b07      	ldr	r3, [pc, #28]	@ (10041824 <LL_APB1_GRP1_EnableClock+0x28>)
10041806:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10041808:	4b06      	ldr	r3, [pc, #24]	@ (10041824 <LL_APB1_GRP1_EnableClock+0x28>)
1004180a:	687a      	ldr	r2, [r7, #4]
1004180c:	430a      	orrs	r2, r1
1004180e:	659a      	str	r2, [r3, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10041810:	4b04      	ldr	r3, [pc, #16]	@ (10041824 <LL_APB1_GRP1_EnableClock+0x28>)
10041812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10041814:	687a      	ldr	r2, [r7, #4]
10041816:	4013      	ands	r3, r2
10041818:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004181a:	68fb      	ldr	r3, [r7, #12]
}
1004181c:	46c0      	nop			@ (mov r8, r8)
1004181e:	46bd      	mov	sp, r7
10041820:	b004      	add	sp, #16
10041822:	bd80      	pop	{r7, pc}
10041824:	48400000 	.word	0x48400000

10041828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10041828:	b580      	push	{r7, lr}
1004182a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */
//
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
1004182c:	2380      	movs	r3, #128	@ 0x80
1004182e:	005b      	lsls	r3, r3, #1
10041830:	0018      	movs	r0, r3
10041832:	f7ff ffcd 	bl	100417d0 <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
//
  /* USER CODE END MspInit 1 */
}
10041836:	46c0      	nop			@ (mov r8, r8)
10041838:	46bd      	mov	sp, r7
1004183a:	bd80      	pop	{r7, pc}

1004183c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
1004183c:	b590      	push	{r4, r7, lr}
1004183e:	b08f      	sub	sp, #60	@ 0x3c
10041840:	af00      	add	r7, sp, #0
10041842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10041844:	2324      	movs	r3, #36	@ 0x24
10041846:	18fb      	adds	r3, r7, r3
10041848:	0018      	movs	r0, r3
1004184a:	2314      	movs	r3, #20
1004184c:	001a      	movs	r2, r3
1004184e:	2100      	movs	r1, #0
10041850:	f005 f8b0 	bl	100469b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10041854:	240c      	movs	r4, #12
10041856:	193b      	adds	r3, r7, r4
10041858:	0018      	movs	r0, r3
1004185a:	2318      	movs	r3, #24
1004185c:	001a      	movs	r2, r3
1004185e:	2100      	movs	r1, #0
10041860:	f005 f8a8 	bl	100469b4 <memset>
  if(huart->Instance==LPUART1)
10041864:	687b      	ldr	r3, [r7, #4]
10041866:	681b      	ldr	r3, [r3, #0]
10041868:	4a29      	ldr	r2, [pc, #164]	@ (10041910 <HAL_UART_MspInit+0xd4>)
1004186a:	4293      	cmp	r3, r2
1004186c:	d14c      	bne.n	10041908 <HAL_UART_MspInit+0xcc>
//
  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
1004186e:	193b      	adds	r3, r7, r4
10041870:	2210      	movs	r2, #16
10041872:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.LPUART1ClockSelection = RCC_LPUART1_CLKSOURCE_16M;
10041874:	193b      	adds	r3, r7, r4
10041876:	2200      	movs	r2, #0
10041878:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
1004187a:	193b      	adds	r3, r7, r4
1004187c:	0018      	movs	r0, r3
1004187e:	f003 fb09 	bl	10044e94 <HAL_RCCEx_PeriphCLKConfig>
10041882:	1e03      	subs	r3, r0, #0
10041884:	d001      	beq.n	1004188a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
10041886:	f7fe ff4f 	bl	10040728 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
1004188a:	2380      	movs	r3, #128	@ 0x80
1004188c:	005b      	lsls	r3, r3, #1
1004188e:	0018      	movs	r0, r3
10041890:	f7ff ffb4 	bl	100417fc <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
10041894:	2008      	movs	r0, #8
10041896:	f7ff ff85 	bl	100417a4 <LL_AHB1_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PB3     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
1004189a:	2424      	movs	r4, #36	@ 0x24
1004189c:	193b      	adds	r3, r7, r4
1004189e:	2208      	movs	r2, #8
100418a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100418a2:	193b      	adds	r3, r7, r4
100418a4:	2202      	movs	r2, #2
100418a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100418a8:	193b      	adds	r3, r7, r4
100418aa:	2200      	movs	r2, #0
100418ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100418ae:	193b      	adds	r3, r7, r4
100418b0:	2200      	movs	r2, #0
100418b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPUART1;
100418b4:	193b      	adds	r3, r7, r4
100418b6:	2201      	movs	r2, #1
100418b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
100418ba:	193b      	adds	r3, r7, r4
100418bc:	4a15      	ldr	r2, [pc, #84]	@ (10041914 <HAL_UART_MspInit+0xd8>)
100418be:	0019      	movs	r1, r3
100418c0:	0010      	movs	r0, r2
100418c2:	f000 fe9f 	bl	10042604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
100418c6:	0021      	movs	r1, r4
100418c8:	187b      	adds	r3, r7, r1
100418ca:	2280      	movs	r2, #128	@ 0x80
100418cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100418ce:	187b      	adds	r3, r7, r1
100418d0:	2202      	movs	r2, #2
100418d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100418d4:	187b      	adds	r3, r7, r1
100418d6:	2200      	movs	r2, #0
100418d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100418da:	187b      	adds	r3, r7, r1
100418dc:	2200      	movs	r2, #0
100418de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART1;
100418e0:	187b      	adds	r3, r7, r1
100418e2:	2203      	movs	r2, #3
100418e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
100418e6:	187b      	adds	r3, r7, r1
100418e8:	4a0a      	ldr	r2, [pc, #40]	@ (10041914 <HAL_UART_MspInit+0xd8>)
100418ea:	0019      	movs	r1, r3
100418ec:	0010      	movs	r0, r2
100418ee:	f000 fe89 	bl	10042604 <HAL_GPIO_Init>

    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_3|LL_PWR_GPIO_BIT_7);
100418f2:	2088      	movs	r0, #136	@ 0x88
100418f4:	f7ff ff3e 	bl	10041774 <LL_PWR_SetNoPullB>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 0);
100418f8:	2200      	movs	r2, #0
100418fa:	2101      	movs	r1, #1
100418fc:	2009      	movs	r0, #9
100418fe:	f000 fdbd 	bl	1004247c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
10041902:	2009      	movs	r0, #9
10041904:	f000 fdcf 	bl	100424a6 <HAL_NVIC_EnableIRQ>
//
  /* USER CODE END LPUART1_MspInit 1 */

  }

}
10041908:	46c0      	nop			@ (mov r8, r8)
1004190a:	46bd      	mov	sp, r7
1004190c:	b00f      	add	sp, #60	@ 0x3c
1004190e:	bd90      	pop	{r4, r7, pc}
10041910:	41005000 	.word	0x41005000
10041914:	48100000 	.word	0x48100000

10041918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10041918:	b580      	push	{r7, lr}
1004191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
1004191c:	46c0      	nop			@ (mov r8, r8)
1004191e:	e7fd      	b.n	1004191c <NMI_Handler+0x4>

10041920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10041920:	b580      	push	{r7, lr}
10041922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10041924:	46c0      	nop			@ (mov r8, r8)
10041926:	e7fd      	b.n	10041924 <HardFault_Handler+0x4>

10041928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10041928:	b580      	push	{r7, lr}
1004192a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
1004192c:	46c0      	nop			@ (mov r8, r8)
1004192e:	46bd      	mov	sp, r7
10041930:	bd80      	pop	{r7, pc}

10041932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10041932:	b580      	push	{r7, lr}
10041934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10041936:	46c0      	nop			@ (mov r8, r8)
10041938:	46bd      	mov	sp, r7
1004193a:	bd80      	pop	{r7, pc}

1004193c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
1004193c:	b580      	push	{r7, lr}
1004193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10041940:	f000 fcca 	bl	100422d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10041944:	46c0      	nop			@ (mov r8, r8)
10041946:	46bd      	mov	sp, r7
10041948:	bd80      	pop	{r7, pc}

1004194a <RADIO_TIMER_CPU_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_CPU_WKUP global interrupt.
  */
void RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
1004194a:	b580      	push	{r7, lr}
1004194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_CPU_WKUP_IRQHandler();
1004194e:	f002 fdcc 	bl	100444ea <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 1 */
}
10041952:	46c0      	nop			@ (mov r8, r8)
10041954:	46bd      	mov	sp, r7
10041956:	bd80      	pop	{r7, pc}

10041958 <RADIO_TIMER_ERROR_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_ERROR global interrupt.
  */
void RADIO_TIMER_ERROR_IRQHandler(void)
{
10041958:	b580      	push	{r7, lr}
1004195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 0 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 0 */
  HAL_RADIO_TIMER_ERROR_IRQHandler();
1004195c:	f002 fdce 	bl	100444fc <HAL_RADIO_TIMER_ERROR_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 1 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 1 */
}
10041960:	46c0      	nop			@ (mov r8, r8)
10041962:	46bd      	mov	sp, r7
10041964:	bd80      	pop	{r7, pc}

10041966 <RADIO_TXRX_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX global interrupt.
  */
void RADIO_TXRX_IRQHandler(void)
{
10041966:	b580      	push	{r7, lr}
10041968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_IRQn 0 */

  /* USER CODE END RADIO_TXRX_IRQn 0 */
  HAL_RADIO_TXRX_IRQHandler();
1004196a:	f002 f84a 	bl	10043a02 <HAL_RADIO_TXRX_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_IRQn 1 */

  /* USER CODE END RADIO_TXRX_IRQn 1 */
}
1004196e:	46c0      	nop			@ (mov r8, r8)
10041970:	46bd      	mov	sp, r7
10041972:	bd80      	pop	{r7, pc}

10041974 <RADIO_TXRX_SEQ_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX_SEQ global interrupt.
  */
void RADIO_TXRX_SEQ_IRQHandler(void)
{
10041974:	b580      	push	{r7, lr}
10041976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 0 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 0 */
  HAL_RADIO_TXRX_SEQ_IRQHandler();
10041978:	f002 f86a 	bl	10043a50 <HAL_RADIO_TXRX_SEQ_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 1 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 1 */
}
1004197c:	46c0      	nop			@ (mov r8, r8)
1004197e:	46bd      	mov	sp, r7
10041980:	bd80      	pop	{r7, pc}
	...

10041984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10041984:	b580      	push	{r7, lr}
10041986:	b086      	sub	sp, #24
10041988:	af00      	add	r7, sp, #0
1004198a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
1004198c:	4a14      	ldr	r2, [pc, #80]	@ (100419e0 <_sbrk+0x5c>)
1004198e:	4b15      	ldr	r3, [pc, #84]	@ (100419e4 <_sbrk+0x60>)
10041990:	1ad3      	subs	r3, r2, r3
10041992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10041994:	697b      	ldr	r3, [r7, #20]
10041996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10041998:	4b13      	ldr	r3, [pc, #76]	@ (100419e8 <_sbrk+0x64>)
1004199a:	681b      	ldr	r3, [r3, #0]
1004199c:	2b00      	cmp	r3, #0
1004199e:	d102      	bne.n	100419a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
100419a0:	4b11      	ldr	r3, [pc, #68]	@ (100419e8 <_sbrk+0x64>)
100419a2:	4a12      	ldr	r2, [pc, #72]	@ (100419ec <_sbrk+0x68>)
100419a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
100419a6:	4b10      	ldr	r3, [pc, #64]	@ (100419e8 <_sbrk+0x64>)
100419a8:	681a      	ldr	r2, [r3, #0]
100419aa:	687b      	ldr	r3, [r7, #4]
100419ac:	18d3      	adds	r3, r2, r3
100419ae:	693a      	ldr	r2, [r7, #16]
100419b0:	429a      	cmp	r2, r3
100419b2:	d207      	bcs.n	100419c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
100419b4:	f005 f818 	bl	100469e8 <__errno>
100419b8:	0003      	movs	r3, r0
100419ba:	220c      	movs	r2, #12
100419bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
100419be:	2301      	movs	r3, #1
100419c0:	425b      	negs	r3, r3
100419c2:	e009      	b.n	100419d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
100419c4:	4b08      	ldr	r3, [pc, #32]	@ (100419e8 <_sbrk+0x64>)
100419c6:	681b      	ldr	r3, [r3, #0]
100419c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
100419ca:	4b07      	ldr	r3, [pc, #28]	@ (100419e8 <_sbrk+0x64>)
100419cc:	681a      	ldr	r2, [r3, #0]
100419ce:	687b      	ldr	r3, [r7, #4]
100419d0:	18d2      	adds	r2, r2, r3
100419d2:	4b05      	ldr	r3, [pc, #20]	@ (100419e8 <_sbrk+0x64>)
100419d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
100419d6:	68fb      	ldr	r3, [r7, #12]
}
100419d8:	0018      	movs	r0, r3
100419da:	46bd      	mov	sp, r7
100419dc:	b006      	add	sp, #24
100419de:	bd80      	pop	{r7, pc}
100419e0:	20006000 	.word	0x20006000
100419e4:	00000c00 	.word	0x00000c00
100419e8:	2000075c 	.word	0x2000075c
100419ec:	20000a8c 	.word	0x20000a8c

100419f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100419f0:	b590      	push	{r4, r7, lr}
100419f2:	b083      	sub	sp, #12
100419f4:	af00      	add	r7, sp, #0
100419f6:	0002      	movs	r2, r0
100419f8:	6039      	str	r1, [r7, #0]
100419fa:	1dfb      	adds	r3, r7, #7
100419fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100419fe:	1dfb      	adds	r3, r7, #7
10041a00:	781b      	ldrb	r3, [r3, #0]
10041a02:	2b7f      	cmp	r3, #127	@ 0x7f
10041a04:	d828      	bhi.n	10041a58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10041a06:	4a2f      	ldr	r2, [pc, #188]	@ (10041ac4 <__NVIC_SetPriority+0xd4>)
10041a08:	1dfb      	adds	r3, r7, #7
10041a0a:	781b      	ldrb	r3, [r3, #0]
10041a0c:	b25b      	sxtb	r3, r3
10041a0e:	089b      	lsrs	r3, r3, #2
10041a10:	33c0      	adds	r3, #192	@ 0xc0
10041a12:	009b      	lsls	r3, r3, #2
10041a14:	589b      	ldr	r3, [r3, r2]
10041a16:	1dfa      	adds	r2, r7, #7
10041a18:	7812      	ldrb	r2, [r2, #0]
10041a1a:	0011      	movs	r1, r2
10041a1c:	2203      	movs	r2, #3
10041a1e:	400a      	ands	r2, r1
10041a20:	00d2      	lsls	r2, r2, #3
10041a22:	21ff      	movs	r1, #255	@ 0xff
10041a24:	4091      	lsls	r1, r2
10041a26:	000a      	movs	r2, r1
10041a28:	43d2      	mvns	r2, r2
10041a2a:	401a      	ands	r2, r3
10041a2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10041a2e:	683b      	ldr	r3, [r7, #0]
10041a30:	019b      	lsls	r3, r3, #6
10041a32:	22ff      	movs	r2, #255	@ 0xff
10041a34:	401a      	ands	r2, r3
10041a36:	1dfb      	adds	r3, r7, #7
10041a38:	781b      	ldrb	r3, [r3, #0]
10041a3a:	0018      	movs	r0, r3
10041a3c:	2303      	movs	r3, #3
10041a3e:	4003      	ands	r3, r0
10041a40:	00db      	lsls	r3, r3, #3
10041a42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10041a44:	481f      	ldr	r0, [pc, #124]	@ (10041ac4 <__NVIC_SetPriority+0xd4>)
10041a46:	1dfb      	adds	r3, r7, #7
10041a48:	781b      	ldrb	r3, [r3, #0]
10041a4a:	b25b      	sxtb	r3, r3
10041a4c:	089b      	lsrs	r3, r3, #2
10041a4e:	430a      	orrs	r2, r1
10041a50:	33c0      	adds	r3, #192	@ 0xc0
10041a52:	009b      	lsls	r3, r3, #2
10041a54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10041a56:	e031      	b.n	10041abc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10041a58:	4a1b      	ldr	r2, [pc, #108]	@ (10041ac8 <__NVIC_SetPriority+0xd8>)
10041a5a:	1dfb      	adds	r3, r7, #7
10041a5c:	781b      	ldrb	r3, [r3, #0]
10041a5e:	0019      	movs	r1, r3
10041a60:	230f      	movs	r3, #15
10041a62:	400b      	ands	r3, r1
10041a64:	3b08      	subs	r3, #8
10041a66:	089b      	lsrs	r3, r3, #2
10041a68:	3306      	adds	r3, #6
10041a6a:	009b      	lsls	r3, r3, #2
10041a6c:	18d3      	adds	r3, r2, r3
10041a6e:	3304      	adds	r3, #4
10041a70:	681b      	ldr	r3, [r3, #0]
10041a72:	1dfa      	adds	r2, r7, #7
10041a74:	7812      	ldrb	r2, [r2, #0]
10041a76:	0011      	movs	r1, r2
10041a78:	2203      	movs	r2, #3
10041a7a:	400a      	ands	r2, r1
10041a7c:	00d2      	lsls	r2, r2, #3
10041a7e:	21ff      	movs	r1, #255	@ 0xff
10041a80:	4091      	lsls	r1, r2
10041a82:	000a      	movs	r2, r1
10041a84:	43d2      	mvns	r2, r2
10041a86:	401a      	ands	r2, r3
10041a88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10041a8a:	683b      	ldr	r3, [r7, #0]
10041a8c:	019b      	lsls	r3, r3, #6
10041a8e:	22ff      	movs	r2, #255	@ 0xff
10041a90:	401a      	ands	r2, r3
10041a92:	1dfb      	adds	r3, r7, #7
10041a94:	781b      	ldrb	r3, [r3, #0]
10041a96:	0018      	movs	r0, r3
10041a98:	2303      	movs	r3, #3
10041a9a:	4003      	ands	r3, r0
10041a9c:	00db      	lsls	r3, r3, #3
10041a9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10041aa0:	4809      	ldr	r0, [pc, #36]	@ (10041ac8 <__NVIC_SetPriority+0xd8>)
10041aa2:	1dfb      	adds	r3, r7, #7
10041aa4:	781b      	ldrb	r3, [r3, #0]
10041aa6:	001c      	movs	r4, r3
10041aa8:	230f      	movs	r3, #15
10041aaa:	4023      	ands	r3, r4
10041aac:	3b08      	subs	r3, #8
10041aae:	089b      	lsrs	r3, r3, #2
10041ab0:	430a      	orrs	r2, r1
10041ab2:	3306      	adds	r3, #6
10041ab4:	009b      	lsls	r3, r3, #2
10041ab6:	18c3      	adds	r3, r0, r3
10041ab8:	3304      	adds	r3, #4
10041aba:	601a      	str	r2, [r3, #0]
}
10041abc:	46c0      	nop			@ (mov r8, r8)
10041abe:	46bd      	mov	sp, r7
10041ac0:	b003      	add	sp, #12
10041ac2:	bd90      	pop	{r4, r7, pc}
10041ac4:	e000e100 	.word	0xe000e100
10041ac8:	e000ed00 	.word	0xe000ed00

10041acc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
10041acc:	b580      	push	{r7, lr}
10041ace:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
10041ad0:	f3bf 8f4f 	dsb	sy
}
10041ad4:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10041ad6:	4b04      	ldr	r3, [pc, #16]	@ (10041ae8 <__NVIC_SystemReset+0x1c>)
10041ad8:	4a04      	ldr	r2, [pc, #16]	@ (10041aec <__NVIC_SystemReset+0x20>)
10041ada:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
10041adc:	f3bf 8f4f 	dsb	sy
}
10041ae0:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
10041ae2:	46c0      	nop			@ (mov r8, r8)
10041ae4:	e7fd      	b.n	10041ae2 <__NVIC_SystemReset+0x16>
10041ae6:	46c0      	nop			@ (mov r8, r8)
10041ae8:	e000ed00 	.word	0xe000ed00
10041aec:	05fa0004 	.word	0x05fa0004

10041af0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
10041af0:	b590      	push	{r4, r7, lr}
10041af2:	b087      	sub	sp, #28
10041af4:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
10041af6:	4a5e      	ldr	r2, [pc, #376]	@ (10041c70 <SystemInit+0x180>)
10041af8:	2394      	movs	r3, #148	@ 0x94
10041afa:	58d3      	ldr	r3, [r2, r3]
10041afc:	2b00      	cmp	r3, #0
10041afe:	d10e      	bne.n	10041b1e <SystemInit+0x2e>
10041b00:	4b5c      	ldr	r3, [pc, #368]	@ (10041c74 <SystemInit+0x184>)
10041b02:	691b      	ldr	r3, [r3, #16]
10041b04:	2b00      	cmp	r3, #0
10041b06:	d103      	bne.n	10041b10 <SystemInit+0x20>
10041b08:	4b5a      	ldr	r3, [pc, #360]	@ (10041c74 <SystemInit+0x184>)
10041b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10041b0c:	2b00      	cmp	r3, #0
10041b0e:	d006      	beq.n	10041b1e <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
10041b10:	4b59      	ldr	r3, [pc, #356]	@ (10041c78 <SystemInit+0x188>)
10041b12:	2201      	movs	r2, #1
10041b14:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
10041b16:	f000 f8f5 	bl	10041d04 <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
10041b1a:	f7ff ffd7 	bl	10041acc <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
10041b1e:	4b57      	ldr	r3, [pc, #348]	@ (10041c7c <SystemInit+0x18c>)
10041b20:	4a57      	ldr	r2, [pc, #348]	@ (10041c80 <SystemInit+0x190>)
10041b22:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
10041b24:	4b55      	ldr	r3, [pc, #340]	@ (10041c7c <SystemInit+0x18c>)
10041b26:	689a      	ldr	r2, [r3, #8]
10041b28:	4b53      	ldr	r3, [pc, #332]	@ (10041c78 <SystemInit+0x188>)
10041b2a:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
10041b2c:	4b51      	ldr	r3, [pc, #324]	@ (10041c74 <SystemInit+0x184>)
10041b2e:	685a      	ldr	r2, [r3, #4]
10041b30:	4b50      	ldr	r3, [pc, #320]	@ (10041c74 <SystemInit+0x184>)
10041b32:	2120      	movs	r1, #32
10041b34:	430a      	orrs	r2, r1
10041b36:	605a      	str	r2, [r3, #4]
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
#endif /* PWR_CR2_RAMRET3 */

  /* Disable the GPIO retention in power save configuration */
#if defined(PWR_CR2_GPIORET)
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
10041b38:	4b4e      	ldr	r3, [pc, #312]	@ (10041c74 <SystemInit+0x184>)
10041b3a:	685a      	ldr	r2, [r3, #4]
10041b3c:	4b4d      	ldr	r3, [pc, #308]	@ (10041c74 <SystemInit+0x184>)
10041b3e:	4951      	ldr	r1, [pc, #324]	@ (10041c84 <SystemInit+0x194>)
10041b40:	400a      	ands	r2, r1
10041b42:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
10041b44:	46c0      	nop			@ (mov r8, r8)
10041b46:	4b4b      	ldr	r3, [pc, #300]	@ (10041c74 <SystemInit+0x184>)
10041b48:	695b      	ldr	r3, [r3, #20]
10041b4a:	2204      	movs	r2, #4
10041b4c:	4013      	ands	r3, r2
10041b4e:	2b04      	cmp	r3, #4
10041b50:	d1f9      	bne.n	10041b46 <SystemInit+0x56>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
10041b52:	4b48      	ldr	r3, [pc, #288]	@ (10041c74 <SystemInit+0x184>)
10041b54:	69db      	ldr	r3, [r3, #28]
10041b56:	2230      	movs	r2, #48	@ 0x30
10041b58:	4393      	bics	r3, r2
10041b5a:	001a      	movs	r2, r3
10041b5c:	4b45      	ldr	r3, [pc, #276]	@ (10041c74 <SystemInit+0x184>)
10041b5e:	2120      	movs	r1, #32
10041b60:	430a      	orrs	r2, r1
10041b62:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
10041b64:	4b43      	ldr	r3, [pc, #268]	@ (10041c74 <SystemInit+0x184>)
10041b66:	69da      	ldr	r2, [r3, #28]
10041b68:	4b42      	ldr	r3, [pc, #264]	@ (10041c74 <SystemInit+0x184>)
10041b6a:	4947      	ldr	r1, [pc, #284]	@ (10041c88 <SystemInit+0x198>)
10041b6c:	400a      	ands	r2, r1
10041b6e:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
10041b70:	4b40      	ldr	r3, [pc, #256]	@ (10041c74 <SystemInit+0x184>)
10041b72:	69da      	ldr	r2, [r3, #28]
10041b74:	4b3f      	ldr	r3, [pc, #252]	@ (10041c74 <SystemInit+0x184>)
10041b76:	2180      	movs	r1, #128	@ 0x80
10041b78:	0049      	lsls	r1, r1, #1
10041b7a:	430a      	orrs	r2, r1
10041b7c:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
10041b7e:	4b43      	ldr	r3, [pc, #268]	@ (10041c8c <SystemInit+0x19c>)
10041b80:	681b      	ldr	r3, [r3, #0]
10041b82:	4a43      	ldr	r2, [pc, #268]	@ (10041c90 <SystemInit+0x1a0>)
10041b84:	4293      	cmp	r3, r2
10041b86:	d055      	beq.n	10041c34 <SystemInit+0x144>

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
#else
    hsiCalib       = 0x1F;
10041b88:	231f      	movs	r3, #31
10041b8a:	613b      	str	r3, [r7, #16]
    lsiBw          = 8;
10041b8c:	2308      	movs	r3, #8
10041b8e:	60fb      	str	r3, [r7, #12]
    mainRegulator  = 0x0A;
10041b90:	230a      	movs	r3, #10
10041b92:	60bb      	str	r3, [r7, #8]
    smpsOutVoltage = 0x03;
10041b94:	2303      	movs	r3, #3
10041b96:	607b      	str	r3, [r7, #4]

    /* Low speed internal RC trimming value set by software */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
10041b98:	4b35      	ldr	r3, [pc, #212]	@ (10041c70 <SystemInit+0x180>)
10041b9a:	68db      	ldr	r3, [r3, #12]
10041b9c:	221e      	movs	r2, #30
10041b9e:	4393      	bics	r3, r2
10041ba0:	0019      	movs	r1, r3
10041ba2:	68fb      	ldr	r3, [r7, #12]
10041ba4:	005a      	lsls	r2, r3, #1
10041ba6:	4b32      	ldr	r3, [pc, #200]	@ (10041c70 <SystemInit+0x180>)
10041ba8:	430a      	orrs	r2, r1
10041baa:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
10041bac:	4b30      	ldr	r3, [pc, #192]	@ (10041c70 <SystemInit+0x180>)
10041bae:	68da      	ldr	r2, [r3, #12]
10041bb0:	4b2f      	ldr	r3, [pc, #188]	@ (10041c70 <SystemInit+0x180>)
10041bb2:	2101      	movs	r1, #1
10041bb4:	430a      	orrs	r2, r1
10041bb6:	60da      	str	r2, [r3, #12]
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
10041bb8:	4b2d      	ldr	r3, [pc, #180]	@ (10041c70 <SystemInit+0x180>)
10041bba:	68db      	ldr	r3, [r3, #12]
10041bbc:	4a35      	ldr	r2, [pc, #212]	@ (10041c94 <SystemInit+0x1a4>)
10041bbe:	4013      	ands	r3, r2
10041bc0:	0019      	movs	r1, r3
10041bc2:	693b      	ldr	r3, [r7, #16]
10041bc4:	061a      	lsls	r2, r3, #24
10041bc6:	4b2a      	ldr	r3, [pc, #168]	@ (10041c70 <SystemInit+0x180>)
10041bc8:	430a      	orrs	r2, r1
10041bca:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
10041bcc:	4b28      	ldr	r3, [pc, #160]	@ (10041c70 <SystemInit+0x180>)
10041bce:	68da      	ldr	r2, [r3, #12]
10041bd0:	4b27      	ldr	r3, [pc, #156]	@ (10041c70 <SystemInit+0x180>)
10041bd2:	2180      	movs	r1, #128	@ 0x80
10041bd4:	0409      	lsls	r1, r1, #16
10041bd6:	430a      	orrs	r2, r1
10041bd8:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
10041bda:	4a26      	ldr	r2, [pc, #152]	@ (10041c74 <SystemInit+0x184>)
10041bdc:	2394      	movs	r3, #148	@ 0x94
10041bde:	58d3      	ldr	r3, [r2, r3]
10041be0:	4a2d      	ldr	r2, [pc, #180]	@ (10041c98 <SystemInit+0x1a8>)
10041be2:	401a      	ands	r2, r3
10041be4:	68bb      	ldr	r3, [r7, #8]
10041be6:	0199      	lsls	r1, r3, #6
10041be8:	23f0      	movs	r3, #240	@ 0xf0
10041bea:	009b      	lsls	r3, r3, #2
10041bec:	400b      	ands	r3, r1
10041bee:	4921      	ldr	r1, [pc, #132]	@ (10041c74 <SystemInit+0x184>)
10041bf0:	4313      	orrs	r3, r2
10041bf2:	2294      	movs	r2, #148	@ 0x94
10041bf4:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
10041bf6:	4a1f      	ldr	r2, [pc, #124]	@ (10041c74 <SystemInit+0x184>)
10041bf8:	2394      	movs	r3, #148	@ 0x94
10041bfa:	58d3      	ldr	r3, [r2, r3]
10041bfc:	491d      	ldr	r1, [pc, #116]	@ (10041c74 <SystemInit+0x184>)
10041bfe:	2220      	movs	r2, #32
10041c00:	4313      	orrs	r3, r2
10041c02:	2294      	movs	r2, #148	@ 0x94
10041c04:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
10041c06:	4a1b      	ldr	r2, [pc, #108]	@ (10041c74 <SystemInit+0x184>)
10041c08:	2394      	movs	r3, #148	@ 0x94
10041c0a:	58d3      	ldr	r3, [r2, r3]
10041c0c:	4a23      	ldr	r2, [pc, #140]	@ (10041c9c <SystemInit+0x1ac>)
10041c0e:	401a      	ands	r2, r3
10041c10:	687b      	ldr	r3, [r7, #4]
10041c12:	02d9      	lsls	r1, r3, #11
10041c14:	23e0      	movs	r3, #224	@ 0xe0
10041c16:	019b      	lsls	r3, r3, #6
10041c18:	400b      	ands	r3, r1
10041c1a:	4916      	ldr	r1, [pc, #88]	@ (10041c74 <SystemInit+0x184>)
10041c1c:	4313      	orrs	r3, r2
10041c1e:	2294      	movs	r2, #148	@ 0x94
10041c20:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
10041c22:	4a14      	ldr	r2, [pc, #80]	@ (10041c74 <SystemInit+0x184>)
10041c24:	2394      	movs	r3, #148	@ 0x94
10041c26:	58d3      	ldr	r3, [r2, r3]
10041c28:	4912      	ldr	r1, [pc, #72]	@ (10041c74 <SystemInit+0x184>)
10041c2a:	2280      	movs	r2, #128	@ 0x80
10041c2c:	00d2      	lsls	r2, r2, #3
10041c2e:	4313      	orrs	r3, r2
10041c30:	2294      	movs	r2, #148	@ 0x94
10041c32:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
10041c34:	2317      	movs	r3, #23
10041c36:	18fb      	adds	r3, r7, r3
10041c38:	2200      	movs	r2, #0
10041c3a:	701a      	strb	r2, [r3, #0]
10041c3c:	e00d      	b.n	10041c5a <SystemInit+0x16a>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
10041c3e:	2417      	movs	r4, #23
10041c40:	193b      	adds	r3, r7, r4
10041c42:	781b      	ldrb	r3, [r3, #0]
10041c44:	b25b      	sxtb	r3, r3
10041c46:	2103      	movs	r1, #3
10041c48:	0018      	movs	r0, r3
10041c4a:	f7ff fed1 	bl	100419f0 <__NVIC_SetPriority>
  for (i=0; i<32; i++)
10041c4e:	0021      	movs	r1, r4
10041c50:	187b      	adds	r3, r7, r1
10041c52:	781a      	ldrb	r2, [r3, #0]
10041c54:	187b      	adds	r3, r7, r1
10041c56:	3201      	adds	r2, #1
10041c58:	701a      	strb	r2, [r3, #0]
10041c5a:	2317      	movs	r3, #23
10041c5c:	18fb      	adds	r3, r7, r3
10041c5e:	781b      	ldrb	r3, [r3, #0]
10041c60:	2b1f      	cmp	r3, #31
10041c62:	d9ec      	bls.n	10041c3e <SystemInit+0x14e>
  __ASM volatile ("cpsie i" : : : "memory");
10041c64:	b662      	cpsie	i
}
10041c66:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
10041c68:	46c0      	nop			@ (mov r8, r8)
10041c6a:	46bd      	mov	sp, r7
10041c6c:	b007      	add	sp, #28
10041c6e:	bd90      	pop	{r4, r7, pc}
10041c70:	48400000 	.word	0x48400000
10041c74:	48500000 	.word	0x48500000
10041c78:	20000004 	.word	0x20000004
10041c7c:	e000ed00 	.word	0xe000ed00
10041c80:	10040000 	.word	0x10040000
10041c84:	fffffeff 	.word	0xfffffeff
10041c88:	fffffbff 	.word	0xfffffbff
10041c8c:	10001ef8 	.word	0x10001ef8
10041c90:	fcbceccc 	.word	0xfcbceccc
10041c94:	c0ffffff 	.word	0xc0ffffff
10041c98:	fffffc3f 	.word	0xfffffc3f
10041c9c:	ffffc7ff 	.word	0xffffc7ff

10041ca0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10041ca0:	b580      	push	{r7, lr}
10041ca2:	b082      	sub	sp, #8
10041ca4:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
10041ca6:	4b13      	ldr	r3, [pc, #76]	@ (10041cf4 <SystemCoreClockUpdate+0x54>)
10041ca8:	689b      	ldr	r3, [r3, #8]
10041caa:	085b      	lsrs	r3, r3, #1
10041cac:	b2da      	uxtb	r2, r3
10041cae:	1dfb      	adds	r3, r7, #7
10041cb0:	2101      	movs	r1, #1
10041cb2:	400a      	ands	r2, r1
10041cb4:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
10041cb6:	4b0f      	ldr	r3, [pc, #60]	@ (10041cf4 <SystemCoreClockUpdate+0x54>)
10041cb8:	689b      	ldr	r3, [r3, #8]
10041cba:	0a1b      	lsrs	r3, r3, #8
10041cbc:	b2da      	uxtb	r2, r3
10041cbe:	1dbb      	adds	r3, r7, #6
10041cc0:	2107      	movs	r1, #7
10041cc2:	400a      	ands	r2, r1
10041cc4:	701a      	strb	r2, [r3, #0]
#endif

  if (directHSE_enabled)
10041cc6:	1dfb      	adds	r3, r7, #7
10041cc8:	781b      	ldrb	r3, [r3, #0]
10041cca:	2b00      	cmp	r3, #0
10041ccc:	d007      	beq.n	10041cde <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
10041cce:	1dbb      	adds	r3, r7, #6
10041cd0:	781b      	ldrb	r3, [r3, #0]
10041cd2:	3b01      	subs	r3, #1
10041cd4:	4a08      	ldr	r2, [pc, #32]	@ (10041cf8 <SystemCoreClockUpdate+0x58>)
10041cd6:	40da      	lsrs	r2, r3
10041cd8:	4b08      	ldr	r3, [pc, #32]	@ (10041cfc <SystemCoreClockUpdate+0x5c>)
10041cda:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
10041cdc:	e005      	b.n	10041cea <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
10041cde:	1dbb      	adds	r3, r7, #6
10041ce0:	781b      	ldrb	r3, [r3, #0]
10041ce2:	4a07      	ldr	r2, [pc, #28]	@ (10041d00 <SystemCoreClockUpdate+0x60>)
10041ce4:	40da      	lsrs	r2, r3
10041ce6:	4b05      	ldr	r3, [pc, #20]	@ (10041cfc <SystemCoreClockUpdate+0x5c>)
10041ce8:	601a      	str	r2, [r3, #0]
}
10041cea:	46c0      	nop			@ (mov r8, r8)
10041cec:	46bd      	mov	sp, r7
10041cee:	b002      	add	sp, #8
10041cf0:	bd80      	pop	{r7, pc}
10041cf2:	46c0      	nop			@ (mov r8, r8)
10041cf4:	48400000 	.word	0x48400000
10041cf8:	01e84800 	.word	0x01e84800
10041cfc:	20000a00 	.word	0x20000a00
10041d00:	03d09000 	.word	0x03d09000

10041d04 <CPUcontextRestore>:
  *         by popping it from the stack 
  * @param  None
  * @retval None
  */
__WEAK void CPUcontextRestore(void)
{
10041d04:	b580      	push	{r7, lr}
10041d06:	af00      	add	r7, sp, #0
}
10041d08:	46c0      	nop			@ (mov r8, r8)
10041d0a:	46bd      	mov	sp, r7
10041d0c:	bd80      	pop	{r7, pc}
	...

10041d10 <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
10041d10:	4810      	ldr	r0, [pc, #64]	@ (10041d54 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
10041d12:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
10041d14:	f7ff feec 	bl	10041af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
10041d18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10041d1a:	e003      	b.n	10041d24 <LoopCopyDataInit>

10041d1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
10041d1c:	4b0e      	ldr	r3, [pc, #56]	@ (10041d58 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10041d1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10041d20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10041d22:	3104      	adds	r1, #4

10041d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
10041d24:	480d      	ldr	r0, [pc, #52]	@ (10041d5c <LoopForever+0xa>)
  ldr  r3, =_edata
10041d26:	4b0e      	ldr	r3, [pc, #56]	@ (10041d60 <LoopForever+0xe>)
  adds  r2, r0, r1
10041d28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10041d2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10041d2c:	d3f6      	bcc.n	10041d1c <CopyDataInit>
  ldr  r2, =_sbss
10041d2e:	4a0d      	ldr	r2, [pc, #52]	@ (10041d64 <LoopForever+0x12>)
  b  LoopFillZerobss
10041d30:	e002      	b.n	10041d38 <LoopFillZerobss>

10041d32 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
10041d32:	2300      	movs	r3, #0
  str  r3, [r2]
10041d34:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10041d36:	3204      	adds	r2, #4

10041d38 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
10041d38:	4b0b      	ldr	r3, [pc, #44]	@ (10041d68 <LoopForever+0x16>)
  cmp  r2, r3
10041d3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
10041d3c:	d3f9      	bcc.n	10041d32 <FillZerobss>
  ldr  r2, =_sbssblue
10041d3e:	4a0b      	ldr	r2, [pc, #44]	@ (10041d6c <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
10041d40:	e002      	b.n	10041d48 <LoopFillZeroBlueRam>

10041d42 <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
10041d42:	2300      	movs	r3, #0
  str  r3, [r2]
10041d44:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10041d46:	3204      	adds	r2, #4

10041d48 <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
10041d48:	4b09      	ldr	r3, [pc, #36]	@ (10041d70 <LoopForever+0x1e>)
  cmp  r2, r3
10041d4a:	429a      	cmp	r2, r3
  bcc  FillZerobssram
10041d4c:	d3f9      	bcc.n	10041d42 <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
10041d4e:	f7ff fa7b 	bl	10041248 <main>

10041d52 <LoopForever>:

LoopForever:
    b LoopForever
10041d52:	e7fe      	b.n	10041d52 <LoopForever>
   ldr   r0, =_estack
10041d54:	20006000 	.word	0x20006000
  ldr  r3, =_sidata
10041d58:	100473d4 	.word	0x100473d4
  ldr  r0, =_sdata
10041d5c:	200009e8 	.word	0x200009e8
  ldr  r3, =_edata
10041d60:	20000a8c 	.word	0x20000a8c
  ldr  r2, =_sbss
10041d64:	20000194 	.word	0x20000194
  ldr  r3, = _ebss
10041d68:	200009e8 	.word	0x200009e8
  ldr  r2, =_sbssblue
10041d6c:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
10041d70:	20000194 	.word	0x20000194

10041d74 <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
10041d74:	e7fe      	b.n	10041d74 <ADC_IRQHandler>
	...

10041d78 <LL_PWR_IsEnabledPUPDCfg>:
{
10041d78:	b580      	push	{r7, lr}
10041d7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_APC) == (PWR_CR1_APC)) ? 1UL : 0UL);
10041d7c:	4b05      	ldr	r3, [pc, #20]	@ (10041d94 <LL_PWR_IsEnabledPUPDCfg+0x1c>)
10041d7e:	681b      	ldr	r3, [r3, #0]
10041d80:	2210      	movs	r2, #16
10041d82:	4013      	ands	r3, r2
10041d84:	2b10      	cmp	r3, #16
10041d86:	d101      	bne.n	10041d8c <LL_PWR_IsEnabledPUPDCfg+0x14>
10041d88:	2301      	movs	r3, #1
10041d8a:	e000      	b.n	10041d8e <LL_PWR_IsEnabledPUPDCfg+0x16>
10041d8c:	2300      	movs	r3, #0
}
10041d8e:	0018      	movs	r0, r3
10041d90:	46bd      	mov	sp, r7
10041d92:	bd80      	pop	{r7, pc}
10041d94:	48500000 	.word	0x48500000

10041d98 <LL_PWR_EnableGPIOPullUp>:
{
10041d98:	b580      	push	{r7, lr}
10041d9a:	b082      	sub	sp, #8
10041d9c:	af00      	add	r7, sp, #0
10041d9e:	6078      	str	r0, [r7, #4]
10041da0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
10041da2:	687b      	ldr	r3, [r7, #4]
10041da4:	3304      	adds	r3, #4
10041da6:	681a      	ldr	r2, [r3, #0]
10041da8:	683b      	ldr	r3, [r7, #0]
10041daa:	43d9      	mvns	r1, r3
10041dac:	687b      	ldr	r3, [r7, #4]
10041dae:	3304      	adds	r3, #4
10041db0:	400a      	ands	r2, r1
10041db2:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
10041db4:	687b      	ldr	r3, [r7, #4]
10041db6:	6819      	ldr	r1, [r3, #0]
10041db8:	687b      	ldr	r3, [r7, #4]
10041dba:	683a      	ldr	r2, [r7, #0]
10041dbc:	430a      	orrs	r2, r1
10041dbe:	601a      	str	r2, [r3, #0]
}
10041dc0:	46c0      	nop			@ (mov r8, r8)
10041dc2:	46bd      	mov	sp, r7
10041dc4:	b002      	add	sp, #8
10041dc6:	bd80      	pop	{r7, pc}

10041dc8 <LL_AHB1_GRP1_EnableClock>:
{
10041dc8:	b580      	push	{r7, lr}
10041dca:	b084      	sub	sp, #16
10041dcc:	af00      	add	r7, sp, #0
10041dce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10041dd0:	4b07      	ldr	r3, [pc, #28]	@ (10041df0 <LL_AHB1_GRP1_EnableClock+0x28>)
10041dd2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10041dd4:	4b06      	ldr	r3, [pc, #24]	@ (10041df0 <LL_AHB1_GRP1_EnableClock+0x28>)
10041dd6:	687a      	ldr	r2, [r7, #4]
10041dd8:	430a      	orrs	r2, r1
10041dda:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10041ddc:	4b04      	ldr	r3, [pc, #16]	@ (10041df0 <LL_AHB1_GRP1_EnableClock+0x28>)
10041dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10041de0:	687a      	ldr	r2, [r7, #4]
10041de2:	4013      	ands	r3, r2
10041de4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10041de6:	68fb      	ldr	r3, [r7, #12]
}
10041de8:	46c0      	nop			@ (mov r8, r8)
10041dea:	46bd      	mov	sp, r7
10041dec:	b004      	add	sp, #16
10041dee:	bd80      	pop	{r7, pc}
10041df0:	48400000 	.word	0x48400000

10041df4 <LL_APB0_GRP1_EnableClock>:
{
10041df4:	b580      	push	{r7, lr}
10041df6:	b084      	sub	sp, #16
10041df8:	af00      	add	r7, sp, #0
10041dfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
10041dfc:	4b07      	ldr	r3, [pc, #28]	@ (10041e1c <LL_APB0_GRP1_EnableClock+0x28>)
10041dfe:	6d59      	ldr	r1, [r3, #84]	@ 0x54
10041e00:	4b06      	ldr	r3, [pc, #24]	@ (10041e1c <LL_APB0_GRP1_EnableClock+0x28>)
10041e02:	687a      	ldr	r2, [r7, #4]
10041e04:	430a      	orrs	r2, r1
10041e06:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10041e08:	4b04      	ldr	r3, [pc, #16]	@ (10041e1c <LL_APB0_GRP1_EnableClock+0x28>)
10041e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10041e0c:	687a      	ldr	r2, [r7, #4]
10041e0e:	4013      	ands	r3, r2
10041e10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10041e12:	68fb      	ldr	r3, [r7, #12]
}
10041e14:	46c0      	nop			@ (mov r8, r8)
10041e16:	46bd      	mov	sp, r7
10041e18:	b004      	add	sp, #16
10041e1a:	bd80      	pop	{r7, pc}
10041e1c:	48400000 	.word	0x48400000

10041e20 <LL_APB1_GRP1_EnableClock>:
{
10041e20:	b580      	push	{r7, lr}
10041e22:	b084      	sub	sp, #16
10041e24:	af00      	add	r7, sp, #0
10041e26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
10041e28:	4b07      	ldr	r3, [pc, #28]	@ (10041e48 <LL_APB1_GRP1_EnableClock+0x28>)
10041e2a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10041e2c:	4b06      	ldr	r3, [pc, #24]	@ (10041e48 <LL_APB1_GRP1_EnableClock+0x28>)
10041e2e:	687a      	ldr	r2, [r7, #4]
10041e30:	430a      	orrs	r2, r1
10041e32:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10041e34:	4b04      	ldr	r3, [pc, #16]	@ (10041e48 <LL_APB1_GRP1_EnableClock+0x28>)
10041e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10041e38:	687a      	ldr	r2, [r7, #4]
10041e3a:	4013      	ands	r3, r2
10041e3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10041e3e:	68fb      	ldr	r3, [r7, #12]
}
10041e40:	46c0      	nop			@ (mov r8, r8)
10041e42:	46bd      	mov	sp, r7
10041e44:	b004      	add	sp, #16
10041e46:	bd80      	pop	{r7, pc}
10041e48:	48400000 	.word	0x48400000

10041e4c <BSP_LED_Init>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
10041e4c:	b590      	push	{r4, r7, lr}
10041e4e:	b089      	sub	sp, #36	@ 0x24
10041e50:	af00      	add	r7, sp, #0
10041e52:	0002      	movs	r2, r0
10041e54:	1dfb      	adds	r3, r7, #7
10041e56:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LD1)
10041e58:	1dfb      	adds	r3, r7, #7
10041e5a:	781b      	ldrb	r3, [r3, #0]
10041e5c:	2b00      	cmp	r3, #0
10041e5e:	d103      	bne.n	10041e68 <BSP_LED_Init+0x1c>
  {
    LD1_GPIO_CLK_ENABLE();
10041e60:	2008      	movs	r0, #8
10041e62:	f7ff ffb1 	bl	10041dc8 <LL_AHB1_GRP1_EnableClock>
10041e66:	e00a      	b.n	10041e7e <BSP_LED_Init+0x32>
  }
  else if (Led == LD2)
10041e68:	1dfb      	adds	r3, r7, #7
10041e6a:	781b      	ldrb	r3, [r3, #0]
10041e6c:	2b01      	cmp	r3, #1
10041e6e:	d103      	bne.n	10041e78 <BSP_LED_Init+0x2c>
  {
    LD2_GPIO_CLK_ENABLE();
10041e70:	2008      	movs	r0, #8
10041e72:	f7ff ffa9 	bl	10041dc8 <LL_AHB1_GRP1_EnableClock>
10041e76:	e002      	b.n	10041e7e <BSP_LED_Init+0x32>
  }
  else /* Led = LD3 */
  {
    LD3_GPIO_CLK_ENABLE();
10041e78:	2008      	movs	r0, #8
10041e7a:	f7ff ffa5 	bl	10041dc8 <LL_AHB1_GRP1_EnableClock>
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
10041e7e:	1dfb      	adds	r3, r7, #7
10041e80:	781a      	ldrb	r2, [r3, #0]
10041e82:	4b28      	ldr	r3, [pc, #160]	@ (10041f24 <BSP_LED_Init+0xd8>)
10041e84:	0052      	lsls	r2, r2, #1
10041e86:	5ad3      	ldrh	r3, [r2, r3]
10041e88:	001a      	movs	r2, r3
10041e8a:	240c      	movs	r4, #12
10041e8c:	193b      	adds	r3, r7, r4
10041e8e:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
10041e90:	193b      	adds	r3, r7, r4
10041e92:	2201      	movs	r2, #1
10041e94:	605a      	str	r2, [r3, #4]
  GPIO_Init.Pull  = GPIO_PULLUP;
10041e96:	193b      	adds	r3, r7, r4
10041e98:	2201      	movs	r2, #1
10041e9a:	609a      	str	r2, [r3, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
10041e9c:	193b      	adds	r3, r7, r4
10041e9e:	2202      	movs	r2, #2
10041ea0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
10041ea2:	1dfb      	adds	r3, r7, #7
10041ea4:	781a      	ldrb	r2, [r3, #0]
10041ea6:	4b20      	ldr	r3, [pc, #128]	@ (10041f28 <BSP_LED_Init+0xdc>)
10041ea8:	0092      	lsls	r2, r2, #2
10041eaa:	58d3      	ldr	r3, [r2, r3]
10041eac:	193a      	adds	r2, r7, r4
10041eae:	0011      	movs	r1, r2
10041eb0:	0018      	movs	r0, r3
10041eb2:	f000 fba7 	bl	10042604 <HAL_GPIO_Init>

  if( LL_PWR_IsEnabledPUPDCfg() != 0)
10041eb6:	f7ff ff5f 	bl	10041d78 <LL_PWR_IsEnabledPUPDCfg>
10041eba:	1e03      	subs	r3, r0, #0
10041ebc:	d01f      	beq.n	10041efe <BSP_LED_Init+0xb2>
  {
    if (LED_PORT[Led] == GPIOA)
10041ebe:	1dfb      	adds	r3, r7, #7
10041ec0:	781a      	ldrb	r2, [r3, #0]
10041ec2:	4b19      	ldr	r3, [pc, #100]	@ (10041f28 <BSP_LED_Init+0xdc>)
10041ec4:	0092      	lsls	r2, r2, #2
10041ec6:	58d2      	ldr	r2, [r2, r3]
10041ec8:	2390      	movs	r3, #144	@ 0x90
10041eca:	05db      	lsls	r3, r3, #23
10041ecc:	429a      	cmp	r2, r3
10041ece:	d106      	bne.n	10041ede <BSP_LED_Init+0x92>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
10041ed0:	193b      	adds	r3, r7, r4
10041ed2:	681b      	ldr	r3, [r3, #0]
10041ed4:	4a15      	ldr	r2, [pc, #84]	@ (10041f2c <BSP_LED_Init+0xe0>)
10041ed6:	0019      	movs	r1, r3
10041ed8:	0010      	movs	r0, r2
10041eda:	f7ff ff5d 	bl	10041d98 <LL_PWR_EnableGPIOPullUp>
    }
     if (LED_PORT[Led] == GPIOB)
10041ede:	1dfb      	adds	r3, r7, #7
10041ee0:	781a      	ldrb	r2, [r3, #0]
10041ee2:	4b11      	ldr	r3, [pc, #68]	@ (10041f28 <BSP_LED_Init+0xdc>)
10041ee4:	0092      	lsls	r2, r2, #2
10041ee6:	58d3      	ldr	r3, [r2, r3]
10041ee8:	4a11      	ldr	r2, [pc, #68]	@ (10041f30 <BSP_LED_Init+0xe4>)
10041eea:	4293      	cmp	r3, r2
10041eec:	d107      	bne.n	10041efe <BSP_LED_Init+0xb2>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_B, GPIO_Init.Pin);
10041eee:	230c      	movs	r3, #12
10041ef0:	18fb      	adds	r3, r7, r3
10041ef2:	681b      	ldr	r3, [r3, #0]
10041ef4:	4a0f      	ldr	r2, [pc, #60]	@ (10041f34 <BSP_LED_Init+0xe8>)
10041ef6:	0019      	movs	r1, r3
10041ef8:	0010      	movs	r0, r2
10041efa:	f7ff ff4d 	bl	10041d98 <LL_PWR_EnableGPIOPullUp>
    }
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
10041efe:	1dfb      	adds	r3, r7, #7
10041f00:	781a      	ldrb	r2, [r3, #0]
10041f02:	4b09      	ldr	r3, [pc, #36]	@ (10041f28 <BSP_LED_Init+0xdc>)
10041f04:	0092      	lsls	r2, r2, #2
10041f06:	58d0      	ldr	r0, [r2, r3]
10041f08:	1dfb      	adds	r3, r7, #7
10041f0a:	781a      	ldrb	r2, [r3, #0]
10041f0c:	4b05      	ldr	r3, [pc, #20]	@ (10041f24 <BSP_LED_Init+0xd8>)
10041f0e:	0052      	lsls	r2, r2, #1
10041f10:	5ad3      	ldrh	r3, [r2, r3]
10041f12:	2201      	movs	r2, #1
10041f14:	0019      	movs	r1, r3
10041f16:	f000 fd3b 	bl	10042990 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
10041f1a:	2300      	movs	r3, #0
}
10041f1c:	0018      	movs	r0, r3
10041f1e:	46bd      	mov	sp, r7
10041f20:	b009      	add	sp, #36	@ 0x24
10041f22:	bd90      	pop	{r4, r7, pc}
10041f24:	20000a04 	.word	0x20000a04
10041f28:	20000a0c 	.word	0x20000a0c
10041f2c:	48500020 	.word	0x48500020
10041f30:	48100000 	.word	0x48100000
10041f34:	48500028 	.word	0x48500028

10041f38 <BSP_LED_Toggle>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
10041f38:	b580      	push	{r7, lr}
10041f3a:	b082      	sub	sp, #8
10041f3c:	af00      	add	r7, sp, #0
10041f3e:	0002      	movs	r2, r0
10041f40:	1dfb      	adds	r3, r7, #7
10041f42:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
10041f44:	1dfb      	adds	r3, r7, #7
10041f46:	781a      	ldrb	r2, [r3, #0]
10041f48:	4b07      	ldr	r3, [pc, #28]	@ (10041f68 <BSP_LED_Toggle+0x30>)
10041f4a:	0092      	lsls	r2, r2, #2
10041f4c:	58d0      	ldr	r0, [r2, r3]
10041f4e:	1dfb      	adds	r3, r7, #7
10041f50:	781a      	ldrb	r2, [r3, #0]
10041f52:	4b06      	ldr	r3, [pc, #24]	@ (10041f6c <BSP_LED_Toggle+0x34>)
10041f54:	0052      	lsls	r2, r2, #1
10041f56:	5ad3      	ldrh	r3, [r2, r3]
10041f58:	0019      	movs	r1, r3
10041f5a:	f000 fd36 	bl	100429ca <HAL_GPIO_TogglePin>
  return BSP_ERROR_NONE;
10041f5e:	2300      	movs	r3, #0
}
10041f60:	0018      	movs	r0, r3
10041f62:	46bd      	mov	sp, r7
10041f64:	b002      	add	sp, #8
10041f66:	bd80      	pop	{r7, pc}
10041f68:	20000a0c 	.word	0x20000a0c
10041f6c:	20000a04 	.word	0x20000a04

10041f70 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code.
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
10041f70:	b580      	push	{r7, lr}
10041f72:	b088      	sub	sp, #32
10041f74:	af00      	add	r7, sp, #0
10041f76:	0002      	movs	r2, r0
10041f78:	1dfb      	adds	r3, r7, #7
10041f7a:	701a      	strb	r2, [r3, #0]
10041f7c:	1dbb      	adds	r3, r7, #6
10041f7e:	1c0a      	adds	r2, r1, #0
10041f80:	701a      	strb	r2, [r3, #0]
  int32_t               status = BSP_ERROR_NONE;
10041f82:	2300      	movs	r3, #0
10041f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef      GPIO_Init;

  /* Enable the BUTTON clock */
  if (Button == B1)
10041f86:	1dfb      	adds	r3, r7, #7
10041f88:	781b      	ldrb	r3, [r3, #0]
10041f8a:	2b00      	cmp	r3, #0
10041f8c:	d103      	bne.n	10041f96 <BSP_PB_Init+0x26>
  {
    B1_GPIO_CLK_ENABLE();
10041f8e:	2004      	movs	r0, #4
10041f90:	f7ff ff1a 	bl	10041dc8 <LL_AHB1_GRP1_EnableClock>
10041f94:	e00a      	b.n	10041fac <BSP_PB_Init+0x3c>
  }
  else if (Button == B2)
10041f96:	1dfb      	adds	r3, r7, #7
10041f98:	781b      	ldrb	r3, [r3, #0]
10041f9a:	2b01      	cmp	r3, #1
10041f9c:	d103      	bne.n	10041fa6 <BSP_PB_Init+0x36>
  {
    B2_GPIO_CLK_ENABLE();
10041f9e:	2008      	movs	r0, #8
10041fa0:	f7ff ff12 	bl	10041dc8 <LL_AHB1_GRP1_EnableClock>
10041fa4:	e002      	b.n	10041fac <BSP_PB_Init+0x3c>
  }
  else /* B3 */
  {
    B3_GPIO_CLK_ENABLE();
10041fa6:	2008      	movs	r0, #8
10041fa8:	f7ff ff0e 	bl	10041dc8 <LL_AHB1_GRP1_EnableClock>
  }

  GPIO_Init.Pin   = BUTTON_PIN[Button];
10041fac:	1dfb      	adds	r3, r7, #7
10041fae:	781a      	ldrb	r2, [r3, #0]
10041fb0:	4b37      	ldr	r3, [pc, #220]	@ (10042090 <BSP_PB_Init+0x120>)
10041fb2:	0052      	lsls	r2, r2, #1
10041fb4:	5ad3      	ldrh	r3, [r2, r3]
10041fb6:	001a      	movs	r2, r3
10041fb8:	2108      	movs	r1, #8
10041fba:	187b      	adds	r3, r7, r1
10041fbc:	601a      	str	r2, [r3, #0]
  GPIO_Init.Pull  = GPIO_PULLUP;
10041fbe:	187b      	adds	r3, r7, r1
10041fc0:	2201      	movs	r2, #1
10041fc2:	609a      	str	r2, [r3, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
10041fc4:	187b      	adds	r3, r7, r1
10041fc6:	2202      	movs	r2, #2
10041fc8:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
10041fca:	1dbb      	adds	r3, r7, #6
10041fcc:	781b      	ldrb	r3, [r3, #0]
10041fce:	2b00      	cmp	r3, #0
10041fd0:	d10c      	bne.n	10041fec <BSP_PB_Init+0x7c>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
10041fd2:	187b      	adds	r3, r7, r1
10041fd4:	2200      	movs	r2, #0
10041fd6:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
10041fd8:	1dfb      	adds	r3, r7, #7
10041fda:	781a      	ldrb	r2, [r3, #0]
10041fdc:	4b2d      	ldr	r3, [pc, #180]	@ (10042094 <BSP_PB_Init+0x124>)
10041fde:	0092      	lsls	r2, r2, #2
10041fe0:	58d3      	ldr	r3, [r2, r3]
10041fe2:	187a      	adds	r2, r7, r1
10041fe4:	0011      	movs	r1, r2
10041fe6:	0018      	movs	r0, r3
10041fe8:	f000 fb0c 	bl	10042604 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
10041fec:	1dbb      	adds	r3, r7, #6
10041fee:	781b      	ldrb	r3, [r3, #0]
10041ff0:	2b01      	cmp	r3, #1
10041ff2:	d123      	bne.n	1004203c <BSP_PB_Init+0xcc>
  {
    __HAL_RCC_SYSCFG_CLK_ENABLE();
10041ff4:	2380      	movs	r3, #128	@ 0x80
10041ff6:	005b      	lsls	r3, r3, #1
10041ff8:	0018      	movs	r0, r3
10041ffa:	f7ff fefb 	bl	10041df4 <LL_APB0_GRP1_EnableClock>

    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
10041ffe:	2108      	movs	r1, #8
10042000:	187b      	adds	r3, r7, r1
10042002:	2280      	movs	r2, #128	@ 0x80
10042004:	0252      	lsls	r2, r2, #9
10042006:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
10042008:	1dfb      	adds	r3, r7, #7
1004200a:	781a      	ldrb	r2, [r3, #0]
1004200c:	4b21      	ldr	r3, [pc, #132]	@ (10042094 <BSP_PB_Init+0x124>)
1004200e:	0092      	lsls	r2, r2, #2
10042010:	58d3      	ldr	r3, [r2, r3]
10042012:	187a      	adds	r2, r7, r1
10042014:	0011      	movs	r1, r2
10042016:	0018      	movs	r0, r3
10042018:	f000 faf4 	bl	10042604 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(BUTTON_IRQn[Button], NVIC_LOW_PRIORITY, 0);
1004201c:	1dfb      	adds	r3, r7, #7
1004201e:	781b      	ldrb	r3, [r3, #0]
10042020:	4a1d      	ldr	r2, [pc, #116]	@ (10042098 <BSP_PB_Init+0x128>)
10042022:	56d3      	ldrsb	r3, [r2, r3]
10042024:	2200      	movs	r2, #0
10042026:	2103      	movs	r1, #3
10042028:	0018      	movs	r0, r3
1004202a:	f000 fa27 	bl	1004247c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
1004202e:	1dfb      	adds	r3, r7, #7
10042030:	781b      	ldrb	r3, [r3, #0]
10042032:	4a19      	ldr	r2, [pc, #100]	@ (10042098 <BSP_PB_Init+0x128>)
10042034:	56d3      	ldrsb	r3, [r2, r3]
10042036:	0018      	movs	r0, r3
10042038:	f000 fa35 	bl	100424a6 <HAL_NVIC_EnableIRQ>

  }
  if( LL_PWR_IsEnabledPUPDCfg() != 0)
1004203c:	f7ff fe9c 	bl	10041d78 <LL_PWR_IsEnabledPUPDCfg>
10042040:	1e03      	subs	r3, r0, #0
10042042:	d020      	beq.n	10042086 <BSP_PB_Init+0x116>
  {
    if (BUTTON_PORT[Button] == GPIOA)
10042044:	1dfb      	adds	r3, r7, #7
10042046:	781a      	ldrb	r2, [r3, #0]
10042048:	4b12      	ldr	r3, [pc, #72]	@ (10042094 <BSP_PB_Init+0x124>)
1004204a:	0092      	lsls	r2, r2, #2
1004204c:	58d2      	ldr	r2, [r2, r3]
1004204e:	2390      	movs	r3, #144	@ 0x90
10042050:	05db      	lsls	r3, r3, #23
10042052:	429a      	cmp	r2, r3
10042054:	d107      	bne.n	10042066 <BSP_PB_Init+0xf6>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
10042056:	2308      	movs	r3, #8
10042058:	18fb      	adds	r3, r7, r3
1004205a:	681b      	ldr	r3, [r3, #0]
1004205c:	4a0f      	ldr	r2, [pc, #60]	@ (1004209c <BSP_PB_Init+0x12c>)
1004205e:	0019      	movs	r1, r3
10042060:	0010      	movs	r0, r2
10042062:	f7ff fe99 	bl	10041d98 <LL_PWR_EnableGPIOPullUp>
    }
     if (BUTTON_PORT[Button] == GPIOB)
10042066:	1dfb      	adds	r3, r7, #7
10042068:	781a      	ldrb	r2, [r3, #0]
1004206a:	4b0a      	ldr	r3, [pc, #40]	@ (10042094 <BSP_PB_Init+0x124>)
1004206c:	0092      	lsls	r2, r2, #2
1004206e:	58d3      	ldr	r3, [r2, r3]
10042070:	4a0b      	ldr	r2, [pc, #44]	@ (100420a0 <BSP_PB_Init+0x130>)
10042072:	4293      	cmp	r3, r2
10042074:	d107      	bne.n	10042086 <BSP_PB_Init+0x116>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_B, GPIO_Init.Pin);
10042076:	2308      	movs	r3, #8
10042078:	18fb      	adds	r3, r7, r3
1004207a:	681b      	ldr	r3, [r3, #0]
1004207c:	4a09      	ldr	r2, [pc, #36]	@ (100420a4 <BSP_PB_Init+0x134>)
1004207e:	0019      	movs	r1, r3
10042080:	0010      	movs	r0, r2
10042082:	f7ff fe89 	bl	10041d98 <LL_PWR_EnableGPIOPullUp>
    }
  }
  return status;
10042086:	69fb      	ldr	r3, [r7, #28]
}
10042088:	0018      	movs	r0, r3
1004208a:	46bd      	mov	sp, r7
1004208c:	b008      	add	sp, #32
1004208e:	bd80      	pop	{r7, pc}
10042090:	20000a18 	.word	0x20000a18
10042094:	20000a20 	.word	0x20000a20
10042098:	20000a2c 	.word	0x20000a2c
1004209c:	48500020 	.word	0x48500020
100420a0:	48100000 	.word	0x48100000
100420a4:	48500028 	.word	0x48500028

100420a8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code.
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
100420a8:	b580      	push	{r7, lr}
100420aa:	b084      	sub	sp, #16
100420ac:	af00      	add	r7, sp, #0
100420ae:	0002      	movs	r2, r0
100420b0:	6039      	str	r1, [r7, #0]
100420b2:	1dfb      	adds	r3, r7, #7
100420b4:	701a      	strb	r2, [r3, #0]
  int32_t status = BSP_ERROR_NONE;
100420b6:	2300      	movs	r3, #0
100420b8:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
100420ba:	683b      	ldr	r3, [r7, #0]
100420bc:	2b00      	cmp	r3, #0
100420be:	d103      	bne.n	100420c8 <BSP_COM_Init+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
100420c0:	2302      	movs	r3, #2
100420c2:	425b      	negs	r3, r3
100420c4:	60fb      	str	r3, [r7, #12]
100420c6:	e026      	b.n	10042116 <BSP_COM_Init+0x6e>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
100420c8:	1dfb      	adds	r3, r7, #7
100420ca:	7819      	ldrb	r1, [r3, #0]
100420cc:	1dfb      	adds	r3, r7, #7
100420ce:	781a      	ldrb	r2, [r3, #0]
100420d0:	4b13      	ldr	r3, [pc, #76]	@ (10042120 <BSP_COM_Init+0x78>)
100420d2:	0089      	lsls	r1, r1, #2
100420d4:	58c9      	ldr	r1, [r1, r3]
100420d6:	4b13      	ldr	r3, [pc, #76]	@ (10042124 <BSP_COM_Init+0x7c>)
100420d8:	2094      	movs	r0, #148	@ 0x94
100420da:	4342      	muls	r2, r0
100420dc:	50d1      	str	r1, [r2, r3]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
100420de:	1dfb      	adds	r3, r7, #7
100420e0:	781b      	ldrb	r3, [r3, #0]
100420e2:	2294      	movs	r2, #148	@ 0x94
100420e4:	435a      	muls	r2, r3
100420e6:	4b0f      	ldr	r3, [pc, #60]	@ (10042124 <BSP_COM_Init+0x7c>)
100420e8:	18d3      	adds	r3, r2, r3
100420ea:	0018      	movs	r0, r3
100420ec:	f000 f84e 	bl	1004218c <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
100420f0:	68fb      	ldr	r3, [r7, #12]
100420f2:	2b00      	cmp	r3, #0
100420f4:	d10f      	bne.n	10042116 <BSP_COM_Init+0x6e>
    {
      if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
100420f6:	1dfb      	adds	r3, r7, #7
100420f8:	781b      	ldrb	r3, [r3, #0]
100420fa:	2294      	movs	r2, #148	@ 0x94
100420fc:	435a      	muls	r2, r3
100420fe:	4b09      	ldr	r3, [pc, #36]	@ (10042124 <BSP_COM_Init+0x7c>)
10042100:	18d3      	adds	r3, r2, r3
10042102:	683a      	ldr	r2, [r7, #0]
10042104:	0011      	movs	r1, r2
10042106:	0018      	movs	r0, r3
10042108:	f000 f80e 	bl	10042128 <MX_USART1_Init>
1004210c:	1e03      	subs	r3, r0, #0
1004210e:	d002      	beq.n	10042116 <BSP_COM_Init+0x6e>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
10042110:	2304      	movs	r3, #4
10042112:	425b      	negs	r3, r3
10042114:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return status;
10042116:	68fb      	ldr	r3, [r7, #12]
}
10042118:	0018      	movs	r0, r3
1004211a:	46bd      	mov	sp, r7
1004211c:	b004      	add	sp, #16
1004211e:	bd80      	pop	{r7, pc}
10042120:	20000a30 	.word	0x20000a30
10042124:	20000760 	.word	0x20000760

10042128 <MX_USART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
10042128:	b580      	push	{r7, lr}
1004212a:	b082      	sub	sp, #8
1004212c:	af00      	add	r7, sp, #0
1004212e:	6078      	str	r0, [r7, #4]
10042130:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
10042132:	683b      	ldr	r3, [r7, #0]
10042134:	681a      	ldr	r2, [r3, #0]
10042136:	687b      	ldr	r3, [r7, #4]
10042138:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
1004213a:	683b      	ldr	r3, [r7, #0]
1004213c:	685a      	ldr	r2, [r3, #4]
1004213e:	687b      	ldr	r3, [r7, #4]
10042140:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
10042142:	683b      	ldr	r3, [r7, #0]
10042144:	891b      	ldrh	r3, [r3, #8]
10042146:	001a      	movs	r2, r3
10042148:	687b      	ldr	r3, [r7, #4]
1004214a:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
1004214c:	683b      	ldr	r3, [r7, #0]
1004214e:	895b      	ldrh	r3, [r3, #10]
10042150:	001a      	movs	r2, r3
10042152:	687b      	ldr	r3, [r7, #4]
10042154:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
10042156:	687b      	ldr	r3, [r7, #4]
10042158:	220c      	movs	r2, #12
1004215a:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
1004215c:	683b      	ldr	r3, [r7, #0]
1004215e:	899b      	ldrh	r3, [r3, #12]
10042160:	001a      	movs	r2, r3
10042162:	687b      	ldr	r3, [r7, #4]
10042164:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
10042166:	687b      	ldr	r3, [r7, #4]
10042168:	2280      	movs	r2, #128	@ 0x80
1004216a:	0212      	lsls	r2, r2, #8
1004216c:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
1004216e:	687b      	ldr	r3, [r7, #4]
10042170:	2200      	movs	r2, #0
10042172:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
10042174:	687b      	ldr	r3, [r7, #4]
10042176:	2200      	movs	r2, #0
10042178:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
1004217a:	687b      	ldr	r3, [r7, #4]
1004217c:	0018      	movs	r0, r3
1004217e:	f003 f887 	bl	10045290 <HAL_UART_Init>
10042182:	0003      	movs	r3, r0
}
10042184:	0018      	movs	r0, r3
10042186:	46bd      	mov	sp, r7
10042188:	b002      	add	sp, #8
1004218a:	bd80      	pop	{r7, pc}

1004218c <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
1004218c:	b590      	push	{r4, r7, lr}
1004218e:	b089      	sub	sp, #36	@ 0x24
10042190:	af00      	add	r7, sp, #0
10042192:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable COM and GPIO clocks */
  COM1_TX_GPIO_CLK_ENABLE();
10042194:	2004      	movs	r0, #4
10042196:	f7ff fe17 	bl	10041dc8 <LL_AHB1_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
1004219a:	2008      	movs	r0, #8
1004219c:	f7ff fe14 	bl	10041dc8 <LL_AHB1_GRP1_EnableClock>
  COM1_CLK_ENABLE();
100421a0:	2380      	movs	r3, #128	@ 0x80
100421a2:	00db      	lsls	r3, r3, #3
100421a4:	0018      	movs	r0, r3
100421a6:	f7ff fe3b 	bl	10041e20 <LL_APB1_GRP1_EnableClock>

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM1_TX_PIN;
100421aa:	240c      	movs	r4, #12
100421ac:	193b      	adds	r3, r7, r4
100421ae:	2202      	movs	r2, #2
100421b0:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
100421b2:	193b      	adds	r3, r7, r4
100421b4:	2202      	movs	r2, #2
100421b6:	605a      	str	r2, [r3, #4]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
100421b8:	193b      	adds	r3, r7, r4
100421ba:	2202      	movs	r2, #2
100421bc:	60da      	str	r2, [r3, #12]
  GPIO_Init.Pull      = GPIO_PULLUP;
100421be:	193b      	adds	r3, r7, r4
100421c0:	2201      	movs	r2, #1
100421c2:	609a      	str	r2, [r3, #8]
  GPIO_Init.Alternate = COM1_TX_AF;
100421c4:	193b      	adds	r3, r7, r4
100421c6:	2202      	movs	r2, #2
100421c8:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &GPIO_Init);
100421ca:	193a      	adds	r2, r7, r4
100421cc:	2390      	movs	r3, #144	@ 0x90
100421ce:	05db      	lsls	r3, r3, #23
100421d0:	0011      	movs	r1, r2
100421d2:	0018      	movs	r0, r3
100421d4:	f000 fa16 	bl	10042604 <HAL_GPIO_Init>
  if( LL_PWR_IsEnabledPUPDCfg() != 0)
100421d8:	f7ff fdce 	bl	10041d78 <LL_PWR_IsEnabledPUPDCfg>
100421dc:	1e03      	subs	r3, r0, #0
100421de:	d006      	beq.n	100421ee <UART_MspInit+0x62>
  {
    LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
100421e0:	193b      	adds	r3, r7, r4
100421e2:	681b      	ldr	r3, [r3, #0]
100421e4:	4a0a      	ldr	r2, [pc, #40]	@ (10042210 <UART_MspInit+0x84>)
100421e6:	0019      	movs	r1, r3
100421e8:	0010      	movs	r0, r2
100421ea:	f7ff fdd5 	bl	10041d98 <LL_PWR_EnableGPIOPullUp>
  }
  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM1_RX_PIN;
100421ee:	210c      	movs	r1, #12
100421f0:	187b      	adds	r3, r7, r1
100421f2:	2201      	movs	r2, #1
100421f4:	601a      	str	r2, [r3, #0]
  GPIO_Init.Alternate = COM1_RX_AF;
100421f6:	187b      	adds	r3, r7, r1
100421f8:	2200      	movs	r2, #0
100421fa:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &GPIO_Init);
100421fc:	187b      	adds	r3, r7, r1
100421fe:	4a05      	ldr	r2, [pc, #20]	@ (10042214 <UART_MspInit+0x88>)
10042200:	0019      	movs	r1, r3
10042202:	0010      	movs	r0, r2
10042204:	f000 f9fe 	bl	10042604 <HAL_GPIO_Init>
}
10042208:	46c0      	nop			@ (mov r8, r8)
1004220a:	46bd      	mov	sp, r7
1004220c:	b009      	add	sp, #36	@ 0x24
1004220e:	bd90      	pop	{r4, r7, pc}
10042210:	48500020 	.word	0x48500020
10042214:	48100000 	.word	0x48100000

10042218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10042218:	b580      	push	{r7, lr}
1004221a:	b082      	sub	sp, #8
1004221c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
1004221e:	1dfb      	adds	r3, r7, #7
10042220:	2200      	movs	r2, #0
10042222:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10042224:	2003      	movs	r0, #3
10042226:	f000 f80f 	bl	10042248 <HAL_InitTick>
1004222a:	1e03      	subs	r3, r0, #0
1004222c:	d003      	beq.n	10042236 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
1004222e:	1dfb      	adds	r3, r7, #7
10042230:	2201      	movs	r2, #1
10042232:	701a      	strb	r2, [r3, #0]
10042234:	e001      	b.n	1004223a <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
10042236:	f7ff faf7 	bl	10041828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
1004223a:	1dfb      	adds	r3, r7, #7
1004223c:	781b      	ldrb	r3, [r3, #0]
}
1004223e:	0018      	movs	r0, r3
10042240:	46bd      	mov	sp, r7
10042242:	b002      	add	sp, #8
10042244:	bd80      	pop	{r7, pc}
	...

10042248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10042248:	b590      	push	{r4, r7, lr}
1004224a:	b085      	sub	sp, #20
1004224c:	af00      	add	r7, sp, #0
1004224e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
10042250:	230f      	movs	r3, #15
10042252:	18fb      	adds	r3, r7, r3
10042254:	2200      	movs	r2, #0
10042256:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
10042258:	4b1d      	ldr	r3, [pc, #116]	@ (100422d0 <HAL_InitTick+0x88>)
1004225a:	781b      	ldrb	r3, [r3, #0]
1004225c:	2b00      	cmp	r3, #0
1004225e:	d02c      	beq.n	100422ba <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
10042260:	f002 fd2e 	bl	10044cc0 <HAL_RCC_GetSysClockFreq>
10042264:	0004      	movs	r4, r0
10042266:	4b1a      	ldr	r3, [pc, #104]	@ (100422d0 <HAL_InitTick+0x88>)
10042268:	781b      	ldrb	r3, [r3, #0]
1004226a:	0019      	movs	r1, r3
1004226c:	23fa      	movs	r3, #250	@ 0xfa
1004226e:	0098      	lsls	r0, r3, #2
10042270:	f7fd ff5a 	bl	10040128 <__udivsi3>
10042274:	0003      	movs	r3, r0
10042276:	0019      	movs	r1, r3
10042278:	0020      	movs	r0, r4
1004227a:	f7fd ff55 	bl	10040128 <__udivsi3>
1004227e:	0003      	movs	r3, r0
10042280:	0018      	movs	r0, r3
10042282:	f000 f920 	bl	100424c6 <HAL_SYSTICK_Config>
10042286:	1e03      	subs	r3, r0, #0
10042288:	d112      	bne.n	100422b0 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
1004228a:	687b      	ldr	r3, [r7, #4]
1004228c:	2b03      	cmp	r3, #3
1004228e:	d80a      	bhi.n	100422a6 <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
10042290:	6879      	ldr	r1, [r7, #4]
10042292:	2301      	movs	r3, #1
10042294:	425b      	negs	r3, r3
10042296:	2200      	movs	r2, #0
10042298:	0018      	movs	r0, r3
1004229a:	f000 f8ef 	bl	1004247c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
1004229e:	4b0d      	ldr	r3, [pc, #52]	@ (100422d4 <HAL_InitTick+0x8c>)
100422a0:	687a      	ldr	r2, [r7, #4]
100422a2:	601a      	str	r2, [r3, #0]
100422a4:	e00d      	b.n	100422c2 <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
100422a6:	230f      	movs	r3, #15
100422a8:	18fb      	adds	r3, r7, r3
100422aa:	2201      	movs	r2, #1
100422ac:	701a      	strb	r2, [r3, #0]
100422ae:	e008      	b.n	100422c2 <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
100422b0:	230f      	movs	r3, #15
100422b2:	18fb      	adds	r3, r7, r3
100422b4:	2201      	movs	r2, #1
100422b6:	701a      	strb	r2, [r3, #0]
100422b8:	e003      	b.n	100422c2 <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
100422ba:	230f      	movs	r3, #15
100422bc:	18fb      	adds	r3, r7, r3
100422be:	2201      	movs	r2, #1
100422c0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
100422c2:	230f      	movs	r3, #15
100422c4:	18fb      	adds	r3, r7, r3
100422c6:	781b      	ldrb	r3, [r3, #0]
}
100422c8:	0018      	movs	r0, r3
100422ca:	46bd      	mov	sp, r7
100422cc:	b005      	add	sp, #20
100422ce:	bd90      	pop	{r4, r7, pc}
100422d0:	20000a38 	.word	0x20000a38
100422d4:	20000a34 	.word	0x20000a34

100422d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
100422d8:	b580      	push	{r7, lr}
100422da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
100422dc:	4b05      	ldr	r3, [pc, #20]	@ (100422f4 <HAL_IncTick+0x1c>)
100422de:	781b      	ldrb	r3, [r3, #0]
100422e0:	001a      	movs	r2, r3
100422e2:	4b05      	ldr	r3, [pc, #20]	@ (100422f8 <HAL_IncTick+0x20>)
100422e4:	681b      	ldr	r3, [r3, #0]
100422e6:	18d2      	adds	r2, r2, r3
100422e8:	4b03      	ldr	r3, [pc, #12]	@ (100422f8 <HAL_IncTick+0x20>)
100422ea:	601a      	str	r2, [r3, #0]
}
100422ec:	46c0      	nop			@ (mov r8, r8)
100422ee:	46bd      	mov	sp, r7
100422f0:	bd80      	pop	{r7, pc}
100422f2:	46c0      	nop			@ (mov r8, r8)
100422f4:	20000a38 	.word	0x20000a38
100422f8:	200007f4 	.word	0x200007f4

100422fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
100422fc:	b580      	push	{r7, lr}
100422fe:	af00      	add	r7, sp, #0
  return uwTick;
10042300:	4b02      	ldr	r3, [pc, #8]	@ (1004230c <HAL_GetTick+0x10>)
10042302:	681b      	ldr	r3, [r3, #0]
}
10042304:	0018      	movs	r0, r3
10042306:	46bd      	mov	sp, r7
10042308:	bd80      	pop	{r7, pc}
1004230a:	46c0      	nop			@ (mov r8, r8)
1004230c:	200007f4 	.word	0x200007f4

10042310 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
10042310:	b580      	push	{r7, lr}
10042312:	af00      	add	r7, sp, #0
  return uwTickPrio;
10042314:	4b02      	ldr	r3, [pc, #8]	@ (10042320 <HAL_GetTickPrio+0x10>)
10042316:	681b      	ldr	r3, [r3, #0]
}
10042318:	0018      	movs	r0, r3
1004231a:	46bd      	mov	sp, r7
1004231c:	bd80      	pop	{r7, pc}
1004231e:	46c0      	nop			@ (mov r8, r8)
10042320:	20000a34 	.word	0x20000a34

10042324 <__NVIC_EnableIRQ>:
{
10042324:	b580      	push	{r7, lr}
10042326:	b082      	sub	sp, #8
10042328:	af00      	add	r7, sp, #0
1004232a:	0002      	movs	r2, r0
1004232c:	1dfb      	adds	r3, r7, #7
1004232e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10042330:	1dfb      	adds	r3, r7, #7
10042332:	781b      	ldrb	r3, [r3, #0]
10042334:	2b7f      	cmp	r3, #127	@ 0x7f
10042336:	d809      	bhi.n	1004234c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10042338:	1dfb      	adds	r3, r7, #7
1004233a:	781b      	ldrb	r3, [r3, #0]
1004233c:	001a      	movs	r2, r3
1004233e:	231f      	movs	r3, #31
10042340:	401a      	ands	r2, r3
10042342:	4b04      	ldr	r3, [pc, #16]	@ (10042354 <__NVIC_EnableIRQ+0x30>)
10042344:	2101      	movs	r1, #1
10042346:	4091      	lsls	r1, r2
10042348:	000a      	movs	r2, r1
1004234a:	601a      	str	r2, [r3, #0]
}
1004234c:	46c0      	nop			@ (mov r8, r8)
1004234e:	46bd      	mov	sp, r7
10042350:	b002      	add	sp, #8
10042352:	bd80      	pop	{r7, pc}
10042354:	e000e100 	.word	0xe000e100

10042358 <__NVIC_SetPriority>:
{
10042358:	b590      	push	{r4, r7, lr}
1004235a:	b083      	sub	sp, #12
1004235c:	af00      	add	r7, sp, #0
1004235e:	0002      	movs	r2, r0
10042360:	6039      	str	r1, [r7, #0]
10042362:	1dfb      	adds	r3, r7, #7
10042364:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10042366:	1dfb      	adds	r3, r7, #7
10042368:	781b      	ldrb	r3, [r3, #0]
1004236a:	2b7f      	cmp	r3, #127	@ 0x7f
1004236c:	d828      	bhi.n	100423c0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004236e:	4a2f      	ldr	r2, [pc, #188]	@ (1004242c <__NVIC_SetPriority+0xd4>)
10042370:	1dfb      	adds	r3, r7, #7
10042372:	781b      	ldrb	r3, [r3, #0]
10042374:	b25b      	sxtb	r3, r3
10042376:	089b      	lsrs	r3, r3, #2
10042378:	33c0      	adds	r3, #192	@ 0xc0
1004237a:	009b      	lsls	r3, r3, #2
1004237c:	589b      	ldr	r3, [r3, r2]
1004237e:	1dfa      	adds	r2, r7, #7
10042380:	7812      	ldrb	r2, [r2, #0]
10042382:	0011      	movs	r1, r2
10042384:	2203      	movs	r2, #3
10042386:	400a      	ands	r2, r1
10042388:	00d2      	lsls	r2, r2, #3
1004238a:	21ff      	movs	r1, #255	@ 0xff
1004238c:	4091      	lsls	r1, r2
1004238e:	000a      	movs	r2, r1
10042390:	43d2      	mvns	r2, r2
10042392:	401a      	ands	r2, r3
10042394:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10042396:	683b      	ldr	r3, [r7, #0]
10042398:	019b      	lsls	r3, r3, #6
1004239a:	22ff      	movs	r2, #255	@ 0xff
1004239c:	401a      	ands	r2, r3
1004239e:	1dfb      	adds	r3, r7, #7
100423a0:	781b      	ldrb	r3, [r3, #0]
100423a2:	0018      	movs	r0, r3
100423a4:	2303      	movs	r3, #3
100423a6:	4003      	ands	r3, r0
100423a8:	00db      	lsls	r3, r3, #3
100423aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100423ac:	481f      	ldr	r0, [pc, #124]	@ (1004242c <__NVIC_SetPriority+0xd4>)
100423ae:	1dfb      	adds	r3, r7, #7
100423b0:	781b      	ldrb	r3, [r3, #0]
100423b2:	b25b      	sxtb	r3, r3
100423b4:	089b      	lsrs	r3, r3, #2
100423b6:	430a      	orrs	r2, r1
100423b8:	33c0      	adds	r3, #192	@ 0xc0
100423ba:	009b      	lsls	r3, r3, #2
100423bc:	501a      	str	r2, [r3, r0]
}
100423be:	e031      	b.n	10042424 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100423c0:	4a1b      	ldr	r2, [pc, #108]	@ (10042430 <__NVIC_SetPriority+0xd8>)
100423c2:	1dfb      	adds	r3, r7, #7
100423c4:	781b      	ldrb	r3, [r3, #0]
100423c6:	0019      	movs	r1, r3
100423c8:	230f      	movs	r3, #15
100423ca:	400b      	ands	r3, r1
100423cc:	3b08      	subs	r3, #8
100423ce:	089b      	lsrs	r3, r3, #2
100423d0:	3306      	adds	r3, #6
100423d2:	009b      	lsls	r3, r3, #2
100423d4:	18d3      	adds	r3, r2, r3
100423d6:	3304      	adds	r3, #4
100423d8:	681b      	ldr	r3, [r3, #0]
100423da:	1dfa      	adds	r2, r7, #7
100423dc:	7812      	ldrb	r2, [r2, #0]
100423de:	0011      	movs	r1, r2
100423e0:	2203      	movs	r2, #3
100423e2:	400a      	ands	r2, r1
100423e4:	00d2      	lsls	r2, r2, #3
100423e6:	21ff      	movs	r1, #255	@ 0xff
100423e8:	4091      	lsls	r1, r2
100423ea:	000a      	movs	r2, r1
100423ec:	43d2      	mvns	r2, r2
100423ee:	401a      	ands	r2, r3
100423f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100423f2:	683b      	ldr	r3, [r7, #0]
100423f4:	019b      	lsls	r3, r3, #6
100423f6:	22ff      	movs	r2, #255	@ 0xff
100423f8:	401a      	ands	r2, r3
100423fa:	1dfb      	adds	r3, r7, #7
100423fc:	781b      	ldrb	r3, [r3, #0]
100423fe:	0018      	movs	r0, r3
10042400:	2303      	movs	r3, #3
10042402:	4003      	ands	r3, r0
10042404:	00db      	lsls	r3, r3, #3
10042406:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10042408:	4809      	ldr	r0, [pc, #36]	@ (10042430 <__NVIC_SetPriority+0xd8>)
1004240a:	1dfb      	adds	r3, r7, #7
1004240c:	781b      	ldrb	r3, [r3, #0]
1004240e:	001c      	movs	r4, r3
10042410:	230f      	movs	r3, #15
10042412:	4023      	ands	r3, r4
10042414:	3b08      	subs	r3, #8
10042416:	089b      	lsrs	r3, r3, #2
10042418:	430a      	orrs	r2, r1
1004241a:	3306      	adds	r3, #6
1004241c:	009b      	lsls	r3, r3, #2
1004241e:	18c3      	adds	r3, r0, r3
10042420:	3304      	adds	r3, #4
10042422:	601a      	str	r2, [r3, #0]
}
10042424:	46c0      	nop			@ (mov r8, r8)
10042426:	46bd      	mov	sp, r7
10042428:	b003      	add	sp, #12
1004242a:	bd90      	pop	{r4, r7, pc}
1004242c:	e000e100 	.word	0xe000e100
10042430:	e000ed00 	.word	0xe000ed00

10042434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10042434:	b580      	push	{r7, lr}
10042436:	b082      	sub	sp, #8
10042438:	af00      	add	r7, sp, #0
1004243a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1004243c:	687b      	ldr	r3, [r7, #4]
1004243e:	1e5a      	subs	r2, r3, #1
10042440:	2380      	movs	r3, #128	@ 0x80
10042442:	045b      	lsls	r3, r3, #17
10042444:	429a      	cmp	r2, r3
10042446:	d301      	bcc.n	1004244c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
10042448:	2301      	movs	r3, #1
1004244a:	e010      	b.n	1004246e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1004244c:	4b0a      	ldr	r3, [pc, #40]	@ (10042478 <SysTick_Config+0x44>)
1004244e:	687a      	ldr	r2, [r7, #4]
10042450:	3a01      	subs	r2, #1
10042452:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10042454:	2301      	movs	r3, #1
10042456:	425b      	negs	r3, r3
10042458:	2103      	movs	r1, #3
1004245a:	0018      	movs	r0, r3
1004245c:	f7ff ff7c 	bl	10042358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10042460:	4b05      	ldr	r3, [pc, #20]	@ (10042478 <SysTick_Config+0x44>)
10042462:	2200      	movs	r2, #0
10042464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10042466:	4b04      	ldr	r3, [pc, #16]	@ (10042478 <SysTick_Config+0x44>)
10042468:	2207      	movs	r2, #7
1004246a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
1004246c:	2300      	movs	r3, #0
}
1004246e:	0018      	movs	r0, r3
10042470:	46bd      	mov	sp, r7
10042472:	b002      	add	sp, #8
10042474:	bd80      	pop	{r7, pc}
10042476:	46c0      	nop			@ (mov r8, r8)
10042478:	e000e010 	.word	0xe000e010

1004247c <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
1004247c:	b580      	push	{r7, lr}
1004247e:	b084      	sub	sp, #16
10042480:	af00      	add	r7, sp, #0
10042482:	60b9      	str	r1, [r7, #8]
10042484:	607a      	str	r2, [r7, #4]
10042486:	210f      	movs	r1, #15
10042488:	187b      	adds	r3, r7, r1
1004248a:	1c02      	adds	r2, r0, #0
1004248c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
1004248e:	68ba      	ldr	r2, [r7, #8]
10042490:	187b      	adds	r3, r7, r1
10042492:	781b      	ldrb	r3, [r3, #0]
10042494:	b25b      	sxtb	r3, r3
10042496:	0011      	movs	r1, r2
10042498:	0018      	movs	r0, r3
1004249a:	f7ff ff5d 	bl	10042358 <__NVIC_SetPriority>
}
1004249e:	46c0      	nop			@ (mov r8, r8)
100424a0:	46bd      	mov	sp, r7
100424a2:	b004      	add	sp, #16
100424a4:	bd80      	pop	{r7, pc}

100424a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
100424a6:	b580      	push	{r7, lr}
100424a8:	b082      	sub	sp, #8
100424aa:	af00      	add	r7, sp, #0
100424ac:	0002      	movs	r2, r0
100424ae:	1dfb      	adds	r3, r7, #7
100424b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
100424b2:	1dfb      	adds	r3, r7, #7
100424b4:	781b      	ldrb	r3, [r3, #0]
100424b6:	b25b      	sxtb	r3, r3
100424b8:	0018      	movs	r0, r3
100424ba:	f7ff ff33 	bl	10042324 <__NVIC_EnableIRQ>
}
100424be:	46c0      	nop			@ (mov r8, r8)
100424c0:	46bd      	mov	sp, r7
100424c2:	b002      	add	sp, #8
100424c4:	bd80      	pop	{r7, pc}

100424c6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
100424c6:	b580      	push	{r7, lr}
100424c8:	b082      	sub	sp, #8
100424ca:	af00      	add	r7, sp, #0
100424cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
100424ce:	687b      	ldr	r3, [r7, #4]
100424d0:	0018      	movs	r0, r3
100424d2:	f7ff ffaf 	bl	10042434 <SysTick_Config>
100424d6:	0003      	movs	r3, r0
}
100424d8:	0018      	movs	r0, r3
100424da:	46bd      	mov	sp, r7
100424dc:	b002      	add	sp, #8
100424de:	bd80      	pop	{r7, pc}

100424e0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
100424e0:	b580      	push	{r7, lr}
100424e2:	b082      	sub	sp, #8
100424e4:	af00      	add	r7, sp, #0
100424e6:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
100424e8:	687b      	ldr	r3, [r7, #4]
100424ea:	2b00      	cmp	r3, #0
100424ec:	d101      	bne.n	100424f2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
100424ee:	2301      	movs	r3, #1
100424f0:	e031      	b.n	10042556 <HAL_DMA_Abort+0x76>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
100424f2:	687b      	ldr	r3, [r7, #4]
100424f4:	2225      	movs	r2, #37	@ 0x25
100424f6:	5c9b      	ldrb	r3, [r3, r2]
100424f8:	b2db      	uxtb	r3, r3
100424fa:	2b02      	cmp	r3, #2
100424fc:	d008      	beq.n	10042510 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
100424fe:	687b      	ldr	r3, [r7, #4]
10042500:	2204      	movs	r2, #4
10042502:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
10042504:	687b      	ldr	r3, [r7, #4]
10042506:	2224      	movs	r2, #36	@ 0x24
10042508:	2100      	movs	r1, #0
1004250a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
1004250c:	2301      	movs	r3, #1
1004250e:	e022      	b.n	10042556 <HAL_DMA_Abort+0x76>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
10042510:	687b      	ldr	r3, [r7, #4]
10042512:	681b      	ldr	r3, [r3, #0]
10042514:	681a      	ldr	r2, [r3, #0]
10042516:	687b      	ldr	r3, [r7, #4]
10042518:	681b      	ldr	r3, [r3, #0]
1004251a:	210e      	movs	r1, #14
1004251c:	438a      	bics	r2, r1
1004251e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
10042520:	687b      	ldr	r3, [r7, #4]
10042522:	681b      	ldr	r3, [r3, #0]
10042524:	681a      	ldr	r2, [r3, #0]
10042526:	687b      	ldr	r3, [r7, #4]
10042528:	681b      	ldr	r3, [r3, #0]
1004252a:	2101      	movs	r1, #1
1004252c:	438a      	bics	r2, r1
1004252e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x3cU));
10042530:	687b      	ldr	r3, [r7, #4]
10042532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10042534:	223c      	movs	r2, #60	@ 0x3c
10042536:	401a      	ands	r2, r3
10042538:	687b      	ldr	r3, [r7, #4]
1004253a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
1004253c:	2101      	movs	r1, #1
1004253e:	4091      	lsls	r1, r2
10042540:	000a      	movs	r2, r1
10042542:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
10042544:	687b      	ldr	r3, [r7, #4]
10042546:	2225      	movs	r2, #37	@ 0x25
10042548:	2101      	movs	r1, #1
1004254a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
1004254c:	687b      	ldr	r3, [r7, #4]
1004254e:	2224      	movs	r2, #36	@ 0x24
10042550:	2100      	movs	r1, #0
10042552:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
10042554:	2300      	movs	r3, #0
}
10042556:	0018      	movs	r0, r3
10042558:	46bd      	mov	sp, r7
1004255a:	b002      	add	sp, #8
1004255c:	bd80      	pop	{r7, pc}

1004255e <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
1004255e:	b580      	push	{r7, lr}
10042560:	b084      	sub	sp, #16
10042562:	af00      	add	r7, sp, #0
10042564:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
10042566:	210f      	movs	r1, #15
10042568:	187b      	adds	r3, r7, r1
1004256a:	2200      	movs	r2, #0
1004256c:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
1004256e:	687b      	ldr	r3, [r7, #4]
10042570:	2225      	movs	r2, #37	@ 0x25
10042572:	5c9b      	ldrb	r3, [r3, r2]
10042574:	b2db      	uxtb	r3, r3
10042576:	2b02      	cmp	r3, #2
10042578:	d006      	beq.n	10042588 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
1004257a:	687b      	ldr	r3, [r7, #4]
1004257c:	2204      	movs	r2, #4
1004257e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
10042580:	187b      	adds	r3, r7, r1
10042582:	2201      	movs	r2, #1
10042584:	701a      	strb	r2, [r3, #0]
10042586:	e02a      	b.n	100425de <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
10042588:	687b      	ldr	r3, [r7, #4]
1004258a:	681b      	ldr	r3, [r3, #0]
1004258c:	681a      	ldr	r2, [r3, #0]
1004258e:	687b      	ldr	r3, [r7, #4]
10042590:	681b      	ldr	r3, [r3, #0]
10042592:	210e      	movs	r1, #14
10042594:	438a      	bics	r2, r1
10042596:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
10042598:	687b      	ldr	r3, [r7, #4]
1004259a:	681b      	ldr	r3, [r3, #0]
1004259c:	681a      	ldr	r2, [r3, #0]
1004259e:	687b      	ldr	r3, [r7, #4]
100425a0:	681b      	ldr	r3, [r3, #0]
100425a2:	2101      	movs	r1, #1
100425a4:	438a      	bics	r2, r1
100425a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x3cU));
100425a8:	687b      	ldr	r3, [r7, #4]
100425aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100425ac:	223c      	movs	r2, #60	@ 0x3c
100425ae:	401a      	ands	r2, r3
100425b0:	687b      	ldr	r3, [r7, #4]
100425b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
100425b4:	2101      	movs	r1, #1
100425b6:	4091      	lsls	r1, r2
100425b8:	000a      	movs	r2, r1
100425ba:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
100425bc:	687b      	ldr	r3, [r7, #4]
100425be:	2225      	movs	r2, #37	@ 0x25
100425c0:	2101      	movs	r1, #1
100425c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
100425c4:	687b      	ldr	r3, [r7, #4]
100425c6:	2224      	movs	r2, #36	@ 0x24
100425c8:	2100      	movs	r1, #0
100425ca:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
100425cc:	687b      	ldr	r3, [r7, #4]
100425ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100425d0:	2b00      	cmp	r3, #0
100425d2:	d004      	beq.n	100425de <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
100425d4:	687b      	ldr	r3, [r7, #4]
100425d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100425d8:	687a      	ldr	r2, [r7, #4]
100425da:	0010      	movs	r0, r2
100425dc:	4798      	blx	r3
    }
  }
  return status;
100425de:	230f      	movs	r3, #15
100425e0:	18fb      	adds	r3, r7, r3
100425e2:	781b      	ldrb	r3, [r3, #0]
}
100425e4:	0018      	movs	r0, r3
100425e6:	46bd      	mov	sp, r7
100425e8:	b004      	add	sp, #16
100425ea:	bd80      	pop	{r7, pc}

100425ec <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
100425ec:	b580      	push	{r7, lr}
100425ee:	b082      	sub	sp, #8
100425f0:	af00      	add	r7, sp, #0
100425f2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
100425f4:	687b      	ldr	r3, [r7, #4]
100425f6:	2225      	movs	r2, #37	@ 0x25
100425f8:	5c9b      	ldrb	r3, [r3, r2]
100425fa:	b2db      	uxtb	r3, r3
}
100425fc:	0018      	movs	r0, r3
100425fe:	46bd      	mov	sp, r7
10042600:	b002      	add	sp, #8
10042602:	bd80      	pop	{r7, pc}

10042604 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10042604:	b580      	push	{r7, lr}
10042606:	b086      	sub	sp, #24
10042608:	af00      	add	r7, sp, #0
1004260a:	6078      	str	r0, [r7, #4]
1004260c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
1004260e:	2300      	movs	r3, #0
10042610:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
10042612:	e194      	b.n	1004293e <HAL_GPIO_Init+0x33a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
10042614:	683b      	ldr	r3, [r7, #0]
10042616:	681b      	ldr	r3, [r3, #0]
10042618:	2101      	movs	r1, #1
1004261a:	697a      	ldr	r2, [r7, #20]
1004261c:	4091      	lsls	r1, r2
1004261e:	000a      	movs	r2, r1
10042620:	4013      	ands	r3, r2
10042622:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
10042624:	68fb      	ldr	r3, [r7, #12]
10042626:	2b00      	cmp	r3, #0
10042628:	d100      	bne.n	1004262c <HAL_GPIO_Init+0x28>
1004262a:	e185      	b.n	10042938 <HAL_GPIO_Init+0x334>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
1004262c:	683b      	ldr	r3, [r7, #0]
1004262e:	685b      	ldr	r3, [r3, #4]
10042630:	2203      	movs	r2, #3
10042632:	4013      	ands	r3, r2
10042634:	2b01      	cmp	r3, #1
10042636:	d005      	beq.n	10042644 <HAL_GPIO_Init+0x40>
10042638:	683b      	ldr	r3, [r7, #0]
1004263a:	685b      	ldr	r3, [r3, #4]
1004263c:	2203      	movs	r2, #3
1004263e:	4013      	ands	r3, r2
10042640:	2b02      	cmp	r3, #2
10042642:	d130      	bne.n	100426a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10042644:	687b      	ldr	r3, [r7, #4]
10042646:	689b      	ldr	r3, [r3, #8]
10042648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
1004264a:	697b      	ldr	r3, [r7, #20]
1004264c:	005b      	lsls	r3, r3, #1
1004264e:	2203      	movs	r2, #3
10042650:	409a      	lsls	r2, r3
10042652:	0013      	movs	r3, r2
10042654:	43da      	mvns	r2, r3
10042656:	693b      	ldr	r3, [r7, #16]
10042658:	4013      	ands	r3, r2
1004265a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
1004265c:	683b      	ldr	r3, [r7, #0]
1004265e:	68da      	ldr	r2, [r3, #12]
10042660:	697b      	ldr	r3, [r7, #20]
10042662:	005b      	lsls	r3, r3, #1
10042664:	409a      	lsls	r2, r3
10042666:	0013      	movs	r3, r2
10042668:	693a      	ldr	r2, [r7, #16]
1004266a:	4313      	orrs	r3, r2
1004266c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
1004266e:	687b      	ldr	r3, [r7, #4]
10042670:	693a      	ldr	r2, [r7, #16]
10042672:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10042674:	687b      	ldr	r3, [r7, #4]
10042676:	685b      	ldr	r3, [r3, #4]
10042678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
1004267a:	2201      	movs	r2, #1
1004267c:	697b      	ldr	r3, [r7, #20]
1004267e:	409a      	lsls	r2, r3
10042680:	0013      	movs	r3, r2
10042682:	43da      	mvns	r2, r3
10042684:	693b      	ldr	r3, [r7, #16]
10042686:	4013      	ands	r3, r2
10042688:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
1004268a:	683b      	ldr	r3, [r7, #0]
1004268c:	685b      	ldr	r3, [r3, #4]
1004268e:	091b      	lsrs	r3, r3, #4
10042690:	2201      	movs	r2, #1
10042692:	401a      	ands	r2, r3
10042694:	697b      	ldr	r3, [r7, #20]
10042696:	409a      	lsls	r2, r3
10042698:	0013      	movs	r3, r2
1004269a:	693a      	ldr	r2, [r7, #16]
1004269c:	4313      	orrs	r3, r2
1004269e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
100426a0:	687b      	ldr	r3, [r7, #4]
100426a2:	693a      	ldr	r2, [r7, #16]
100426a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
100426a6:	683b      	ldr	r3, [r7, #0]
100426a8:	685b      	ldr	r3, [r3, #4]
100426aa:	2203      	movs	r2, #3
100426ac:	4013      	ands	r3, r2
100426ae:	2b03      	cmp	r3, #3
100426b0:	d017      	beq.n	100426e2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
100426b2:	687b      	ldr	r3, [r7, #4]
100426b4:	68db      	ldr	r3, [r3, #12]
100426b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
100426b8:	697b      	ldr	r3, [r7, #20]
100426ba:	005b      	lsls	r3, r3, #1
100426bc:	2203      	movs	r2, #3
100426be:	409a      	lsls	r2, r3
100426c0:	0013      	movs	r3, r2
100426c2:	43da      	mvns	r2, r3
100426c4:	693b      	ldr	r3, [r7, #16]
100426c6:	4013      	ands	r3, r2
100426c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
100426ca:	683b      	ldr	r3, [r7, #0]
100426cc:	689a      	ldr	r2, [r3, #8]
100426ce:	697b      	ldr	r3, [r7, #20]
100426d0:	005b      	lsls	r3, r3, #1
100426d2:	409a      	lsls	r2, r3
100426d4:	0013      	movs	r3, r2
100426d6:	693a      	ldr	r2, [r7, #16]
100426d8:	4313      	orrs	r3, r2
100426da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
100426dc:	687b      	ldr	r3, [r7, #4]
100426de:	693a      	ldr	r2, [r7, #16]
100426e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
100426e2:	683b      	ldr	r3, [r7, #0]
100426e4:	685b      	ldr	r3, [r3, #4]
100426e6:	2203      	movs	r2, #3
100426e8:	4013      	ands	r3, r2
100426ea:	2b02      	cmp	r3, #2
100426ec:	d123      	bne.n	10042736 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
100426ee:	697b      	ldr	r3, [r7, #20]
100426f0:	08da      	lsrs	r2, r3, #3
100426f2:	687b      	ldr	r3, [r7, #4]
100426f4:	3208      	adds	r2, #8
100426f6:	0092      	lsls	r2, r2, #2
100426f8:	58d3      	ldr	r3, [r2, r3]
100426fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
100426fc:	697b      	ldr	r3, [r7, #20]
100426fe:	2207      	movs	r2, #7
10042700:	4013      	ands	r3, r2
10042702:	009b      	lsls	r3, r3, #2
10042704:	220f      	movs	r2, #15
10042706:	409a      	lsls	r2, r3
10042708:	0013      	movs	r3, r2
1004270a:	43da      	mvns	r2, r3
1004270c:	693b      	ldr	r3, [r7, #16]
1004270e:	4013      	ands	r3, r2
10042710:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
10042712:	683b      	ldr	r3, [r7, #0]
10042714:	691a      	ldr	r2, [r3, #16]
10042716:	697b      	ldr	r3, [r7, #20]
10042718:	2107      	movs	r1, #7
1004271a:	400b      	ands	r3, r1
1004271c:	009b      	lsls	r3, r3, #2
1004271e:	409a      	lsls	r2, r3
10042720:	0013      	movs	r3, r2
10042722:	693a      	ldr	r2, [r7, #16]
10042724:	4313      	orrs	r3, r2
10042726:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
10042728:	697b      	ldr	r3, [r7, #20]
1004272a:	08da      	lsrs	r2, r3, #3
1004272c:	687b      	ldr	r3, [r7, #4]
1004272e:	3208      	adds	r2, #8
10042730:	0092      	lsls	r2, r2, #2
10042732:	6939      	ldr	r1, [r7, #16]
10042734:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10042736:	687b      	ldr	r3, [r7, #4]
10042738:	681b      	ldr	r3, [r3, #0]
1004273a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
1004273c:	697b      	ldr	r3, [r7, #20]
1004273e:	005b      	lsls	r3, r3, #1
10042740:	2203      	movs	r2, #3
10042742:	409a      	lsls	r2, r3
10042744:	0013      	movs	r3, r2
10042746:	43da      	mvns	r2, r3
10042748:	693b      	ldr	r3, [r7, #16]
1004274a:	4013      	ands	r3, r2
1004274c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
1004274e:	683b      	ldr	r3, [r7, #0]
10042750:	685b      	ldr	r3, [r3, #4]
10042752:	2203      	movs	r2, #3
10042754:	401a      	ands	r2, r3
10042756:	697b      	ldr	r3, [r7, #20]
10042758:	005b      	lsls	r3, r3, #1
1004275a:	409a      	lsls	r2, r3
1004275c:	0013      	movs	r3, r2
1004275e:	693a      	ldr	r2, [r7, #16]
10042760:	4313      	orrs	r3, r2
10042762:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
10042764:	687b      	ldr	r3, [r7, #4]
10042766:	693a      	ldr	r2, [r7, #16]
10042768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
1004276a:	683b      	ldr	r3, [r7, #0]
1004276c:	685a      	ldr	r2, [r3, #4]
1004276e:	23c0      	movs	r3, #192	@ 0xc0
10042770:	029b      	lsls	r3, r3, #10
10042772:	4013      	ands	r3, r2
10042774:	d100      	bne.n	10042778 <HAL_GPIO_Init+0x174>
10042776:	e0df      	b.n	10042938 <HAL_GPIO_Init+0x334>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
10042778:	683b      	ldr	r3, [r7, #0]
1004277a:	685a      	ldr	r2, [r3, #4]
1004277c:	2380      	movs	r3, #128	@ 0x80
1004277e:	02db      	lsls	r3, r3, #11
10042780:	4013      	ands	r3, r2
10042782:	d031      	beq.n	100427e8 <HAL_GPIO_Init+0x1e4>
        {
          temp = SYSCFG->IO_DTR;
10042784:	2380      	movs	r3, #128	@ 0x80
10042786:	05db      	lsls	r3, r3, #23
10042788:	68db      	ldr	r3, [r3, #12]
1004278a:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
1004278c:	687a      	ldr	r2, [r7, #4]
1004278e:	2390      	movs	r3, #144	@ 0x90
10042790:	05db      	lsls	r3, r3, #23
10042792:	429a      	cmp	r2, r3
10042794:	d111      	bne.n	100427ba <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
10042796:	2201      	movs	r2, #1
10042798:	697b      	ldr	r3, [r7, #20]
1004279a:	409a      	lsls	r2, r3
1004279c:	0013      	movs	r3, r2
1004279e:	43db      	mvns	r3, r3
100427a0:	001a      	movs	r2, r3
100427a2:	693b      	ldr	r3, [r7, #16]
100427a4:	4013      	ands	r3, r2
100427a6:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100427a8:	2201      	movs	r2, #1
100427aa:	697b      	ldr	r3, [r7, #20]
100427ac:	409a      	lsls	r2, r3
100427ae:	0013      	movs	r3, r2
100427b0:	001a      	movs	r2, r3
100427b2:	693b      	ldr	r3, [r7, #16]
100427b4:	4313      	orrs	r3, r2
100427b6:	613b      	str	r3, [r7, #16]
100427b8:	e012      	b.n	100427e0 <HAL_GPIO_Init+0x1dc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100427ba:	2201      	movs	r2, #1
100427bc:	697b      	ldr	r3, [r7, #20]
100427be:	409a      	lsls	r2, r3
100427c0:	0013      	movs	r3, r2
100427c2:	041b      	lsls	r3, r3, #16
100427c4:	43db      	mvns	r3, r3
100427c6:	001a      	movs	r2, r3
100427c8:	693b      	ldr	r3, [r7, #16]
100427ca:	4013      	ands	r3, r2
100427cc:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100427ce:	2201      	movs	r2, #1
100427d0:	697b      	ldr	r3, [r7, #20]
100427d2:	409a      	lsls	r2, r3
100427d4:	0013      	movs	r3, r2
100427d6:	041b      	lsls	r3, r3, #16
100427d8:	001a      	movs	r2, r3
100427da:	693b      	ldr	r3, [r7, #16]
100427dc:	4313      	orrs	r3, r2
100427de:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
100427e0:	2380      	movs	r3, #128	@ 0x80
100427e2:	05db      	lsls	r3, r3, #23
100427e4:	693a      	ldr	r2, [r7, #16]
100427e6:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
100427e8:	683b      	ldr	r3, [r7, #0]
100427ea:	685a      	ldr	r2, [r3, #4]
100427ec:	2380      	movs	r3, #128	@ 0x80
100427ee:	035b      	lsls	r3, r3, #13
100427f0:	4013      	ands	r3, r2
100427f2:	d031      	beq.n	10042858 <HAL_GPIO_Init+0x254>
        {
          temp = SYSCFG->IO_IBER;
100427f4:	2380      	movs	r3, #128	@ 0x80
100427f6:	05db      	lsls	r3, r3, #23
100427f8:	691b      	ldr	r3, [r3, #16]
100427fa:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
100427fc:	687a      	ldr	r2, [r7, #4]
100427fe:	2390      	movs	r3, #144	@ 0x90
10042800:	05db      	lsls	r3, r3, #23
10042802:	429a      	cmp	r2, r3
10042804:	d111      	bne.n	1004282a <HAL_GPIO_Init+0x226>
          {
            temp &= ~(1 << position);
10042806:	2201      	movs	r2, #1
10042808:	697b      	ldr	r3, [r7, #20]
1004280a:	409a      	lsls	r2, r3
1004280c:	0013      	movs	r3, r2
1004280e:	43db      	mvns	r3, r3
10042810:	001a      	movs	r2, r3
10042812:	693b      	ldr	r3, [r7, #16]
10042814:	4013      	ands	r3, r2
10042816:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10042818:	2201      	movs	r2, #1
1004281a:	697b      	ldr	r3, [r7, #20]
1004281c:	409a      	lsls	r2, r3
1004281e:	0013      	movs	r3, r2
10042820:	001a      	movs	r2, r3
10042822:	693b      	ldr	r3, [r7, #16]
10042824:	4313      	orrs	r3, r2
10042826:	613b      	str	r3, [r7, #16]
10042828:	e012      	b.n	10042850 <HAL_GPIO_Init+0x24c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004282a:	2201      	movs	r2, #1
1004282c:	697b      	ldr	r3, [r7, #20]
1004282e:	409a      	lsls	r2, r3
10042830:	0013      	movs	r3, r2
10042832:	041b      	lsls	r3, r3, #16
10042834:	43db      	mvns	r3, r3
10042836:	001a      	movs	r2, r3
10042838:	693b      	ldr	r3, [r7, #16]
1004283a:	4013      	ands	r3, r2
1004283c:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004283e:	2201      	movs	r2, #1
10042840:	697b      	ldr	r3, [r7, #20]
10042842:	409a      	lsls	r2, r3
10042844:	0013      	movs	r3, r2
10042846:	041b      	lsls	r3, r3, #16
10042848:	001a      	movs	r2, r3
1004284a:	693b      	ldr	r3, [r7, #16]
1004284c:	4313      	orrs	r3, r2
1004284e:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
10042850:	2380      	movs	r3, #128	@ 0x80
10042852:	05db      	lsls	r3, r3, #23
10042854:	693a      	ldr	r2, [r7, #16]
10042856:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
10042858:	683b      	ldr	r3, [r7, #0]
1004285a:	685a      	ldr	r2, [r3, #4]
1004285c:	2380      	movs	r3, #128	@ 0x80
1004285e:	03db      	lsls	r3, r3, #15
10042860:	4013      	ands	r3, r2
10042862:	d031      	beq.n	100428c8 <HAL_GPIO_Init+0x2c4>
        {
          temp = SYSCFG->IO_IEVR;
10042864:	2380      	movs	r3, #128	@ 0x80
10042866:	05db      	lsls	r3, r3, #23
10042868:	695b      	ldr	r3, [r3, #20]
1004286a:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
1004286c:	687a      	ldr	r2, [r7, #4]
1004286e:	2390      	movs	r3, #144	@ 0x90
10042870:	05db      	lsls	r3, r3, #23
10042872:	429a      	cmp	r2, r3
10042874:	d111      	bne.n	1004289a <HAL_GPIO_Init+0x296>
          {
            temp &= ~(1 << position);
10042876:	2201      	movs	r2, #1
10042878:	697b      	ldr	r3, [r7, #20]
1004287a:	409a      	lsls	r2, r3
1004287c:	0013      	movs	r3, r2
1004287e:	43db      	mvns	r3, r3
10042880:	001a      	movs	r2, r3
10042882:	693b      	ldr	r3, [r7, #16]
10042884:	4013      	ands	r3, r2
10042886:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10042888:	2201      	movs	r2, #1
1004288a:	697b      	ldr	r3, [r7, #20]
1004288c:	409a      	lsls	r2, r3
1004288e:	0013      	movs	r3, r2
10042890:	001a      	movs	r2, r3
10042892:	693b      	ldr	r3, [r7, #16]
10042894:	4313      	orrs	r3, r2
10042896:	613b      	str	r3, [r7, #16]
10042898:	e012      	b.n	100428c0 <HAL_GPIO_Init+0x2bc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004289a:	2201      	movs	r2, #1
1004289c:	697b      	ldr	r3, [r7, #20]
1004289e:	409a      	lsls	r2, r3
100428a0:	0013      	movs	r3, r2
100428a2:	041b      	lsls	r3, r3, #16
100428a4:	43db      	mvns	r3, r3
100428a6:	001a      	movs	r2, r3
100428a8:	693b      	ldr	r3, [r7, #16]
100428aa:	4013      	ands	r3, r2
100428ac:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100428ae:	2201      	movs	r2, #1
100428b0:	697b      	ldr	r3, [r7, #20]
100428b2:	409a      	lsls	r2, r3
100428b4:	0013      	movs	r3, r2
100428b6:	041b      	lsls	r3, r3, #16
100428b8:	001a      	movs	r2, r3
100428ba:	693b      	ldr	r3, [r7, #16]
100428bc:	4313      	orrs	r3, r2
100428be:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
100428c0:	2380      	movs	r3, #128	@ 0x80
100428c2:	05db      	lsls	r3, r3, #23
100428c4:	693a      	ldr	r2, [r7, #16]
100428c6:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
100428c8:	683b      	ldr	r3, [r7, #0]
100428ca:	685a      	ldr	r2, [r3, #4]
100428cc:	2380      	movs	r3, #128	@ 0x80
100428ce:	025b      	lsls	r3, r3, #9
100428d0:	4013      	ands	r3, r2
100428d2:	d031      	beq.n	10042938 <HAL_GPIO_Init+0x334>
        {
          temp = SYSCFG->IO_IER;
100428d4:	2380      	movs	r3, #128	@ 0x80
100428d6:	05db      	lsls	r3, r3, #23
100428d8:	699b      	ldr	r3, [r3, #24]
100428da:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
100428dc:	687a      	ldr	r2, [r7, #4]
100428de:	2390      	movs	r3, #144	@ 0x90
100428e0:	05db      	lsls	r3, r3, #23
100428e2:	429a      	cmp	r2, r3
100428e4:	d111      	bne.n	1004290a <HAL_GPIO_Init+0x306>
          {
            temp &= ~(1 << position);
100428e6:	2201      	movs	r2, #1
100428e8:	697b      	ldr	r3, [r7, #20]
100428ea:	409a      	lsls	r2, r3
100428ec:	0013      	movs	r3, r2
100428ee:	43db      	mvns	r3, r3
100428f0:	001a      	movs	r2, r3
100428f2:	693b      	ldr	r3, [r7, #16]
100428f4:	4013      	ands	r3, r2
100428f6:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100428f8:	2201      	movs	r2, #1
100428fa:	697b      	ldr	r3, [r7, #20]
100428fc:	409a      	lsls	r2, r3
100428fe:	0013      	movs	r3, r2
10042900:	001a      	movs	r2, r3
10042902:	693b      	ldr	r3, [r7, #16]
10042904:	4313      	orrs	r3, r2
10042906:	613b      	str	r3, [r7, #16]
10042908:	e012      	b.n	10042930 <HAL_GPIO_Init+0x32c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004290a:	2201      	movs	r2, #1
1004290c:	697b      	ldr	r3, [r7, #20]
1004290e:	409a      	lsls	r2, r3
10042910:	0013      	movs	r3, r2
10042912:	041b      	lsls	r3, r3, #16
10042914:	43db      	mvns	r3, r3
10042916:	001a      	movs	r2, r3
10042918:	693b      	ldr	r3, [r7, #16]
1004291a:	4013      	ands	r3, r2
1004291c:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004291e:	2201      	movs	r2, #1
10042920:	697b      	ldr	r3, [r7, #20]
10042922:	409a      	lsls	r2, r3
10042924:	0013      	movs	r3, r2
10042926:	041b      	lsls	r3, r3, #16
10042928:	001a      	movs	r2, r3
1004292a:	693b      	ldr	r3, [r7, #16]
1004292c:	4313      	orrs	r3, r2
1004292e:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
10042930:	2380      	movs	r3, #128	@ 0x80
10042932:	05db      	lsls	r3, r3, #23
10042934:	693a      	ldr	r2, [r7, #16]
10042936:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
10042938:	697b      	ldr	r3, [r7, #20]
1004293a:	3301      	adds	r3, #1
1004293c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
1004293e:	683b      	ldr	r3, [r7, #0]
10042940:	681a      	ldr	r2, [r3, #0]
10042942:	697b      	ldr	r3, [r7, #20]
10042944:	40da      	lsrs	r2, r3
10042946:	1e13      	subs	r3, r2, #0
10042948:	d000      	beq.n	1004294c <HAL_GPIO_Init+0x348>
1004294a:	e663      	b.n	10042614 <HAL_GPIO_Init+0x10>
  }
}
1004294c:	46c0      	nop			@ (mov r8, r8)
1004294e:	46c0      	nop			@ (mov r8, r8)
10042950:	46bd      	mov	sp, r7
10042952:	b006      	add	sp, #24
10042954:	bd80      	pop	{r7, pc}

10042956 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
10042956:	b580      	push	{r7, lr}
10042958:	b084      	sub	sp, #16
1004295a:	af00      	add	r7, sp, #0
1004295c:	6078      	str	r0, [r7, #4]
1004295e:	000a      	movs	r2, r1
10042960:	1cbb      	adds	r3, r7, #2
10042962:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
10042964:	687b      	ldr	r3, [r7, #4]
10042966:	691b      	ldr	r3, [r3, #16]
10042968:	1cba      	adds	r2, r7, #2
1004296a:	8812      	ldrh	r2, [r2, #0]
1004296c:	4013      	ands	r3, r2
1004296e:	d004      	beq.n	1004297a <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
10042970:	230f      	movs	r3, #15
10042972:	18fb      	adds	r3, r7, r3
10042974:	2201      	movs	r2, #1
10042976:	701a      	strb	r2, [r3, #0]
10042978:	e003      	b.n	10042982 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
1004297a:	230f      	movs	r3, #15
1004297c:	18fb      	adds	r3, r7, r3
1004297e:	2200      	movs	r2, #0
10042980:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
10042982:	230f      	movs	r3, #15
10042984:	18fb      	adds	r3, r7, r3
10042986:	781b      	ldrb	r3, [r3, #0]
}
10042988:	0018      	movs	r0, r3
1004298a:	46bd      	mov	sp, r7
1004298c:	b004      	add	sp, #16
1004298e:	bd80      	pop	{r7, pc}

10042990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10042990:	b580      	push	{r7, lr}
10042992:	b082      	sub	sp, #8
10042994:	af00      	add	r7, sp, #0
10042996:	6078      	str	r0, [r7, #4]
10042998:	0008      	movs	r0, r1
1004299a:	0011      	movs	r1, r2
1004299c:	1cbb      	adds	r3, r7, #2
1004299e:	1c02      	adds	r2, r0, #0
100429a0:	801a      	strh	r2, [r3, #0]
100429a2:	1c7b      	adds	r3, r7, #1
100429a4:	1c0a      	adds	r2, r1, #0
100429a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
100429a8:	1c7b      	adds	r3, r7, #1
100429aa:	781b      	ldrb	r3, [r3, #0]
100429ac:	2b00      	cmp	r3, #0
100429ae:	d004      	beq.n	100429ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
100429b0:	1cbb      	adds	r3, r7, #2
100429b2:	881a      	ldrh	r2, [r3, #0]
100429b4:	687b      	ldr	r3, [r7, #4]
100429b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
100429b8:	e003      	b.n	100429c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
100429ba:	1cbb      	adds	r3, r7, #2
100429bc:	881a      	ldrh	r2, [r3, #0]
100429be:	687b      	ldr	r3, [r7, #4]
100429c0:	629a      	str	r2, [r3, #40]	@ 0x28
}
100429c2:	46c0      	nop			@ (mov r8, r8)
100429c4:	46bd      	mov	sp, r7
100429c6:	b002      	add	sp, #8
100429c8:	bd80      	pop	{r7, pc}

100429ca <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral for STM32WB0x family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
100429ca:	b580      	push	{r7, lr}
100429cc:	b084      	sub	sp, #16
100429ce:	af00      	add	r7, sp, #0
100429d0:	6078      	str	r0, [r7, #4]
100429d2:	000a      	movs	r2, r1
100429d4:	1cbb      	adds	r3, r7, #2
100429d6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
100429d8:	687b      	ldr	r3, [r7, #4]
100429da:	695b      	ldr	r3, [r3, #20]
100429dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
100429de:	1cbb      	adds	r3, r7, #2
100429e0:	881b      	ldrh	r3, [r3, #0]
100429e2:	68fa      	ldr	r2, [r7, #12]
100429e4:	4013      	ands	r3, r2
100429e6:	041a      	lsls	r2, r3, #16
100429e8:	68fb      	ldr	r3, [r7, #12]
100429ea:	43db      	mvns	r3, r3
100429ec:	1cb9      	adds	r1, r7, #2
100429ee:	8809      	ldrh	r1, [r1, #0]
100429f0:	400b      	ands	r3, r1
100429f2:	431a      	orrs	r2, r3
100429f4:	687b      	ldr	r3, [r7, #4]
100429f6:	619a      	str	r2, [r3, #24]
}
100429f8:	46c0      	nop			@ (mov r8, r8)
100429fa:	46bd      	mov	sp, r7
100429fc:	b004      	add	sp, #16
100429fe:	bd80      	pop	{r7, pc}

10042a00 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
10042a00:	b580      	push	{r7, lr}
10042a02:	b084      	sub	sp, #16
10042a04:	af00      	add	r7, sp, #0
10042a06:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
10042a08:	687b      	ldr	r3, [r7, #4]
10042a0a:	681b      	ldr	r3, [r3, #0]
10042a0c:	699b      	ldr	r3, [r3, #24]
10042a0e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
10042a10:	687b      	ldr	r3, [r7, #4]
10042a12:	681b      	ldr	r3, [r3, #0]
10042a14:	681b      	ldr	r3, [r3, #0]
10042a16:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
10042a18:	687b      	ldr	r3, [r7, #4]
10042a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10042a1c:	2b00      	cmp	r3, #0
10042a1e:	d005      	beq.n	10042a2c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
10042a20:	687b      	ldr	r3, [r7, #4]
10042a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10042a24:	68ba      	ldr	r2, [r7, #8]
10042a26:	68f9      	ldr	r1, [r7, #12]
10042a28:	6878      	ldr	r0, [r7, #4]
10042a2a:	4798      	blx	r3
  }
}
10042a2c:	46c0      	nop			@ (mov r8, r8)
10042a2e:	46bd      	mov	sp, r7
10042a30:	b004      	add	sp, #16
10042a32:	bd80      	pop	{r7, pc}

10042a34 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
10042a34:	b580      	push	{r7, lr}
10042a36:	b086      	sub	sp, #24
10042a38:	af00      	add	r7, sp, #0
10042a3a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
10042a3c:	687b      	ldr	r3, [r7, #4]
10042a3e:	681b      	ldr	r3, [r3, #0]
10042a40:	699b      	ldr	r3, [r3, #24]
10042a42:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
10042a44:	687b      	ldr	r3, [r7, #4]
10042a46:	681b      	ldr	r3, [r3, #0]
10042a48:	681b      	ldr	r3, [r3, #0]
10042a4a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
10042a4c:	697a      	ldr	r2, [r7, #20]
10042a4e:	2380      	movs	r3, #128	@ 0x80
10042a50:	005b      	lsls	r3, r3, #1
10042a52:	4013      	ands	r3, r2
10042a54:	d00e      	beq.n	10042a74 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10042a56:	693b      	ldr	r3, [r7, #16]
10042a58:	2280      	movs	r2, #128	@ 0x80
10042a5a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
10042a5c:	d00a      	beq.n	10042a74 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
10042a5e:	687b      	ldr	r3, [r7, #4]
10042a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10042a62:	2201      	movs	r2, #1
10042a64:	431a      	orrs	r2, r3
10042a66:	687b      	ldr	r3, [r7, #4]
10042a68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
10042a6a:	687b      	ldr	r3, [r7, #4]
10042a6c:	681b      	ldr	r3, [r3, #0]
10042a6e:	2280      	movs	r2, #128	@ 0x80
10042a70:	0052      	lsls	r2, r2, #1
10042a72:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
10042a74:	697a      	ldr	r2, [r7, #20]
10042a76:	2380      	movs	r3, #128	@ 0x80
10042a78:	00db      	lsls	r3, r3, #3
10042a7a:	4013      	ands	r3, r2
10042a7c:	d00e      	beq.n	10042a9c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10042a7e:	693b      	ldr	r3, [r7, #16]
10042a80:	2280      	movs	r2, #128	@ 0x80
10042a82:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
10042a84:	d00a      	beq.n	10042a9c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
10042a86:	687b      	ldr	r3, [r7, #4]
10042a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10042a8a:	2208      	movs	r2, #8
10042a8c:	431a      	orrs	r2, r3
10042a8e:	687b      	ldr	r3, [r7, #4]
10042a90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
10042a92:	687b      	ldr	r3, [r7, #4]
10042a94:	681b      	ldr	r3, [r3, #0]
10042a96:	2280      	movs	r2, #128	@ 0x80
10042a98:	00d2      	lsls	r2, r2, #3
10042a9a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
10042a9c:	697a      	ldr	r2, [r7, #20]
10042a9e:	2380      	movs	r3, #128	@ 0x80
10042aa0:	009b      	lsls	r3, r3, #2
10042aa2:	4013      	ands	r3, r2
10042aa4:	d00e      	beq.n	10042ac4 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10042aa6:	693b      	ldr	r3, [r7, #16]
10042aa8:	2280      	movs	r2, #128	@ 0x80
10042aaa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
10042aac:	d00a      	beq.n	10042ac4 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
10042aae:	687b      	ldr	r3, [r7, #4]
10042ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10042ab2:	2202      	movs	r2, #2
10042ab4:	431a      	orrs	r2, r3
10042ab6:	687b      	ldr	r3, [r7, #4]
10042ab8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
10042aba:	687b      	ldr	r3, [r7, #4]
10042abc:	681b      	ldr	r3, [r3, #0]
10042abe:	2280      	movs	r2, #128	@ 0x80
10042ac0:	0092      	lsls	r2, r2, #2
10042ac2:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
10042ac4:	687b      	ldr	r3, [r7, #4]
10042ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10042ac8:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
10042aca:	68fb      	ldr	r3, [r7, #12]
10042acc:	220b      	movs	r2, #11
10042ace:	4013      	ands	r3, r2
10042ad0:	d005      	beq.n	10042ade <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
10042ad2:	68fa      	ldr	r2, [r7, #12]
10042ad4:	687b      	ldr	r3, [r7, #4]
10042ad6:	0011      	movs	r1, r2
10042ad8:	0018      	movs	r0, r3
10042ada:	f000 fc25 	bl	10043328 <I2C_ITError>
  }
}
10042ade:	46c0      	nop			@ (mov r8, r8)
10042ae0:	46bd      	mov	sp, r7
10042ae2:	b006      	add	sp, #24
10042ae4:	bd80      	pop	{r7, pc}

10042ae6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10042ae6:	b580      	push	{r7, lr}
10042ae8:	b082      	sub	sp, #8
10042aea:	af00      	add	r7, sp, #0
10042aec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
10042aee:	46c0      	nop			@ (mov r8, r8)
10042af0:	46bd      	mov	sp, r7
10042af2:	b002      	add	sp, #8
10042af4:	bd80      	pop	{r7, pc}

10042af6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10042af6:	b580      	push	{r7, lr}
10042af8:	b082      	sub	sp, #8
10042afa:	af00      	add	r7, sp, #0
10042afc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
10042afe:	46c0      	nop			@ (mov r8, r8)
10042b00:	46bd      	mov	sp, r7
10042b02:	b002      	add	sp, #8
10042b04:	bd80      	pop	{r7, pc}

10042b06 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
10042b06:	b580      	push	{r7, lr}
10042b08:	b082      	sub	sp, #8
10042b0a:	af00      	add	r7, sp, #0
10042b0c:	6078      	str	r0, [r7, #4]
10042b0e:	0008      	movs	r0, r1
10042b10:	0011      	movs	r1, r2
10042b12:	1cfb      	adds	r3, r7, #3
10042b14:	1c02      	adds	r2, r0, #0
10042b16:	701a      	strb	r2, [r3, #0]
10042b18:	003b      	movs	r3, r7
10042b1a:	1c0a      	adds	r2, r1, #0
10042b1c:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
10042b1e:	46c0      	nop			@ (mov r8, r8)
10042b20:	46bd      	mov	sp, r7
10042b22:	b002      	add	sp, #8
10042b24:	bd80      	pop	{r7, pc}

10042b26 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
10042b26:	b580      	push	{r7, lr}
10042b28:	b082      	sub	sp, #8
10042b2a:	af00      	add	r7, sp, #0
10042b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
10042b2e:	46c0      	nop			@ (mov r8, r8)
10042b30:	46bd      	mov	sp, r7
10042b32:	b002      	add	sp, #8
10042b34:	bd80      	pop	{r7, pc}

10042b36 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
10042b36:	b580      	push	{r7, lr}
10042b38:	b082      	sub	sp, #8
10042b3a:	af00      	add	r7, sp, #0
10042b3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
10042b3e:	46c0      	nop			@ (mov r8, r8)
10042b40:	46bd      	mov	sp, r7
10042b42:	b002      	add	sp, #8
10042b44:	bd80      	pop	{r7, pc}

10042b46 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
10042b46:	b580      	push	{r7, lr}
10042b48:	b082      	sub	sp, #8
10042b4a:	af00      	add	r7, sp, #0
10042b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
10042b4e:	46c0      	nop			@ (mov r8, r8)
10042b50:	46bd      	mov	sp, r7
10042b52:	b002      	add	sp, #8
10042b54:	bd80      	pop	{r7, pc}
	...

10042b58 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
10042b58:	b580      	push	{r7, lr}
10042b5a:	b086      	sub	sp, #24
10042b5c:	af00      	add	r7, sp, #0
10042b5e:	60f8      	str	r0, [r7, #12]
10042b60:	60b9      	str	r1, [r7, #8]
10042b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
10042b64:	68fb      	ldr	r3, [r7, #12]
10042b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10042b68:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
10042b6a:	68bb      	ldr	r3, [r7, #8]
10042b6c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
10042b6e:	68fb      	ldr	r3, [r7, #12]
10042b70:	2240      	movs	r2, #64	@ 0x40
10042b72:	5c9b      	ldrb	r3, [r3, r2]
10042b74:	2b01      	cmp	r3, #1
10042b76:	d101      	bne.n	10042b7c <I2C_Slave_ISR_IT+0x24>
10042b78:	2302      	movs	r3, #2
10042b7a:	e0e7      	b.n	10042d4c <I2C_Slave_ISR_IT+0x1f4>
10042b7c:	68fb      	ldr	r3, [r7, #12]
10042b7e:	2240      	movs	r2, #64	@ 0x40
10042b80:	2101      	movs	r1, #1
10042b82:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10042b84:	693b      	ldr	r3, [r7, #16]
10042b86:	2220      	movs	r2, #32
10042b88:	4013      	ands	r3, r2
10042b8a:	d00a      	beq.n	10042ba2 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10042b8c:	687b      	ldr	r3, [r7, #4]
10042b8e:	2220      	movs	r2, #32
10042b90:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10042b92:	d006      	beq.n	10042ba2 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
10042b94:	693a      	ldr	r2, [r7, #16]
10042b96:	68fb      	ldr	r3, [r7, #12]
10042b98:	0011      	movs	r1, r2
10042b9a:	0018      	movs	r0, r3
10042b9c:	f000 f9e4 	bl	10042f68 <I2C_ITSlaveCplt>
10042ba0:	e0cf      	b.n	10042d42 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10042ba2:	693b      	ldr	r3, [r7, #16]
10042ba4:	2210      	movs	r2, #16
10042ba6:	4013      	ands	r3, r2
10042ba8:	d052      	beq.n	10042c50 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10042baa:	687b      	ldr	r3, [r7, #4]
10042bac:	2210      	movs	r2, #16
10042bae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10042bb0:	d04e      	beq.n	10042c50 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
10042bb2:	68fb      	ldr	r3, [r7, #12]
10042bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10042bb6:	b29b      	uxth	r3, r3
10042bb8:	2b00      	cmp	r3, #0
10042bba:	d12d      	bne.n	10042c18 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10042bbc:	68fb      	ldr	r3, [r7, #12]
10042bbe:	2241      	movs	r2, #65	@ 0x41
10042bc0:	5c9b      	ldrb	r3, [r3, r2]
10042bc2:	b2db      	uxtb	r3, r3
10042bc4:	2b28      	cmp	r3, #40	@ 0x28
10042bc6:	d10b      	bne.n	10042be0 <I2C_Slave_ISR_IT+0x88>
10042bc8:	697a      	ldr	r2, [r7, #20]
10042bca:	2380      	movs	r3, #128	@ 0x80
10042bcc:	049b      	lsls	r3, r3, #18
10042bce:	429a      	cmp	r2, r3
10042bd0:	d106      	bne.n	10042be0 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
10042bd2:	693a      	ldr	r2, [r7, #16]
10042bd4:	68fb      	ldr	r3, [r7, #12]
10042bd6:	0011      	movs	r1, r2
10042bd8:	0018      	movs	r0, r3
10042bda:	f000 fb4d 	bl	10043278 <I2C_ITListenCplt>
10042bde:	e036      	b.n	10042c4e <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
10042be0:	68fb      	ldr	r3, [r7, #12]
10042be2:	2241      	movs	r2, #65	@ 0x41
10042be4:	5c9b      	ldrb	r3, [r3, r2]
10042be6:	b2db      	uxtb	r3, r3
10042be8:	2b29      	cmp	r3, #41	@ 0x29
10042bea:	d110      	bne.n	10042c0e <I2C_Slave_ISR_IT+0xb6>
10042bec:	697b      	ldr	r3, [r7, #20]
10042bee:	4a59      	ldr	r2, [pc, #356]	@ (10042d54 <I2C_Slave_ISR_IT+0x1fc>)
10042bf0:	4293      	cmp	r3, r2
10042bf2:	d00c      	beq.n	10042c0e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10042bf4:	68fb      	ldr	r3, [r7, #12]
10042bf6:	681b      	ldr	r3, [r3, #0]
10042bf8:	2210      	movs	r2, #16
10042bfa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
10042bfc:	68fb      	ldr	r3, [r7, #12]
10042bfe:	0018      	movs	r0, r3
10042c00:	f000 fcbd 	bl	1004357e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10042c04:	68fb      	ldr	r3, [r7, #12]
10042c06:	0018      	movs	r0, r3
10042c08:	f000 f94a 	bl	10042ea0 <I2C_ITSlaveSeqCplt>
10042c0c:	e01f      	b.n	10042c4e <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10042c0e:	68fb      	ldr	r3, [r7, #12]
10042c10:	681b      	ldr	r3, [r3, #0]
10042c12:	2210      	movs	r2, #16
10042c14:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
10042c16:	e091      	b.n	10042d3c <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10042c18:	68fb      	ldr	r3, [r7, #12]
10042c1a:	681b      	ldr	r3, [r3, #0]
10042c1c:	2210      	movs	r2, #16
10042c1e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10042c20:	68fb      	ldr	r3, [r7, #12]
10042c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10042c24:	2204      	movs	r2, #4
10042c26:	431a      	orrs	r2, r3
10042c28:	68fb      	ldr	r3, [r7, #12]
10042c2a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
10042c2c:	697b      	ldr	r3, [r7, #20]
10042c2e:	2b00      	cmp	r3, #0
10042c30:	d005      	beq.n	10042c3e <I2C_Slave_ISR_IT+0xe6>
10042c32:	697a      	ldr	r2, [r7, #20]
10042c34:	2380      	movs	r3, #128	@ 0x80
10042c36:	045b      	lsls	r3, r3, #17
10042c38:	429a      	cmp	r2, r3
10042c3a:	d000      	beq.n	10042c3e <I2C_Slave_ISR_IT+0xe6>
10042c3c:	e07e      	b.n	10042d3c <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
10042c3e:	68fb      	ldr	r3, [r7, #12]
10042c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10042c42:	68fb      	ldr	r3, [r7, #12]
10042c44:	0011      	movs	r1, r2
10042c46:	0018      	movs	r0, r3
10042c48:	f000 fb6e 	bl	10043328 <I2C_ITError>
    if (hi2c->XferCount == 0U)
10042c4c:	e076      	b.n	10042d3c <I2C_Slave_ISR_IT+0x1e4>
10042c4e:	e075      	b.n	10042d3c <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
10042c50:	693b      	ldr	r3, [r7, #16]
10042c52:	2204      	movs	r2, #4
10042c54:	4013      	ands	r3, r2
10042c56:	d02f      	beq.n	10042cb8 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
10042c58:	687b      	ldr	r3, [r7, #4]
10042c5a:	2204      	movs	r2, #4
10042c5c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
10042c5e:	d02b      	beq.n	10042cb8 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
10042c60:	68fb      	ldr	r3, [r7, #12]
10042c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10042c64:	b29b      	uxth	r3, r3
10042c66:	2b00      	cmp	r3, #0
10042c68:	d018      	beq.n	10042c9c <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10042c6a:	68fb      	ldr	r3, [r7, #12]
10042c6c:	681b      	ldr	r3, [r3, #0]
10042c6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10042c70:	68fb      	ldr	r3, [r7, #12]
10042c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10042c74:	b2d2      	uxtb	r2, r2
10042c76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10042c78:	68fb      	ldr	r3, [r7, #12]
10042c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10042c7c:	1c5a      	adds	r2, r3, #1
10042c7e:	68fb      	ldr	r3, [r7, #12]
10042c80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
10042c82:	68fb      	ldr	r3, [r7, #12]
10042c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10042c86:	3b01      	subs	r3, #1
10042c88:	b29a      	uxth	r2, r3
10042c8a:	68fb      	ldr	r3, [r7, #12]
10042c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10042c8e:	68fb      	ldr	r3, [r7, #12]
10042c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10042c92:	b29b      	uxth	r3, r3
10042c94:	3b01      	subs	r3, #1
10042c96:	b29a      	uxth	r2, r3
10042c98:	68fb      	ldr	r3, [r7, #12]
10042c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
10042c9c:	68fb      	ldr	r3, [r7, #12]
10042c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10042ca0:	b29b      	uxth	r3, r3
10042ca2:	2b00      	cmp	r3, #0
10042ca4:	d14c      	bne.n	10042d40 <I2C_Slave_ISR_IT+0x1e8>
10042ca6:	697b      	ldr	r3, [r7, #20]
10042ca8:	4a2a      	ldr	r2, [pc, #168]	@ (10042d54 <I2C_Slave_ISR_IT+0x1fc>)
10042caa:	4293      	cmp	r3, r2
10042cac:	d048      	beq.n	10042d40 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
10042cae:	68fb      	ldr	r3, [r7, #12]
10042cb0:	0018      	movs	r0, r3
10042cb2:	f000 f8f5 	bl	10042ea0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
10042cb6:	e043      	b.n	10042d40 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
10042cb8:	693b      	ldr	r3, [r7, #16]
10042cba:	2208      	movs	r2, #8
10042cbc:	4013      	ands	r3, r2
10042cbe:	d00a      	beq.n	10042cd6 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
10042cc0:	687b      	ldr	r3, [r7, #4]
10042cc2:	2208      	movs	r2, #8
10042cc4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
10042cc6:	d006      	beq.n	10042cd6 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
10042cc8:	693a      	ldr	r2, [r7, #16]
10042cca:	68fb      	ldr	r3, [r7, #12]
10042ccc:	0011      	movs	r1, r2
10042cce:	0018      	movs	r0, r3
10042cd0:	f000 f842 	bl	10042d58 <I2C_ITAddrCplt>
10042cd4:	e035      	b.n	10042d42 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10042cd6:	693b      	ldr	r3, [r7, #16]
10042cd8:	2202      	movs	r2, #2
10042cda:	4013      	ands	r3, r2
10042cdc:	d031      	beq.n	10042d42 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
10042cde:	687b      	ldr	r3, [r7, #4]
10042ce0:	2202      	movs	r2, #2
10042ce2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10042ce4:	d02d      	beq.n	10042d42 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
10042ce6:	68fb      	ldr	r3, [r7, #12]
10042ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10042cea:	b29b      	uxth	r3, r3
10042cec:	2b00      	cmp	r3, #0
10042cee:	d018      	beq.n	10042d22 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
10042cf0:	68fb      	ldr	r3, [r7, #12]
10042cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10042cf4:	781a      	ldrb	r2, [r3, #0]
10042cf6:	68fb      	ldr	r3, [r7, #12]
10042cf8:	681b      	ldr	r3, [r3, #0]
10042cfa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10042cfc:	68fb      	ldr	r3, [r7, #12]
10042cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10042d00:	1c5a      	adds	r2, r3, #1
10042d02:	68fb      	ldr	r3, [r7, #12]
10042d04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
10042d06:	68fb      	ldr	r3, [r7, #12]
10042d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10042d0a:	b29b      	uxth	r3, r3
10042d0c:	3b01      	subs	r3, #1
10042d0e:	b29a      	uxth	r2, r3
10042d10:	68fb      	ldr	r3, [r7, #12]
10042d12:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
10042d14:	68fb      	ldr	r3, [r7, #12]
10042d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10042d18:	3b01      	subs	r3, #1
10042d1a:	b29a      	uxth	r2, r3
10042d1c:	68fb      	ldr	r3, [r7, #12]
10042d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
10042d20:	e00f      	b.n	10042d42 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
10042d22:	697a      	ldr	r2, [r7, #20]
10042d24:	2380      	movs	r3, #128	@ 0x80
10042d26:	045b      	lsls	r3, r3, #17
10042d28:	429a      	cmp	r2, r3
10042d2a:	d002      	beq.n	10042d32 <I2C_Slave_ISR_IT+0x1da>
10042d2c:	697b      	ldr	r3, [r7, #20]
10042d2e:	2b00      	cmp	r3, #0
10042d30:	d107      	bne.n	10042d42 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10042d32:	68fb      	ldr	r3, [r7, #12]
10042d34:	0018      	movs	r0, r3
10042d36:	f000 f8b3 	bl	10042ea0 <I2C_ITSlaveSeqCplt>
10042d3a:	e002      	b.n	10042d42 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
10042d3c:	46c0      	nop			@ (mov r8, r8)
10042d3e:	e000      	b.n	10042d42 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
10042d40:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10042d42:	68fb      	ldr	r3, [r7, #12]
10042d44:	2240      	movs	r2, #64	@ 0x40
10042d46:	2100      	movs	r1, #0
10042d48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10042d4a:	2300      	movs	r3, #0
}
10042d4c:	0018      	movs	r0, r3
10042d4e:	46bd      	mov	sp, r7
10042d50:	b006      	add	sp, #24
10042d52:	bd80      	pop	{r7, pc}
10042d54:	ffff0000 	.word	0xffff0000

10042d58 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10042d58:	b5b0      	push	{r4, r5, r7, lr}
10042d5a:	b084      	sub	sp, #16
10042d5c:	af00      	add	r7, sp, #0
10042d5e:	6078      	str	r0, [r7, #4]
10042d60:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
10042d62:	687b      	ldr	r3, [r7, #4]
10042d64:	2241      	movs	r2, #65	@ 0x41
10042d66:	5c9b      	ldrb	r3, [r3, r2]
10042d68:	b2db      	uxtb	r3, r3
10042d6a:	001a      	movs	r2, r3
10042d6c:	2328      	movs	r3, #40	@ 0x28
10042d6e:	4013      	ands	r3, r2
10042d70:	2b28      	cmp	r3, #40	@ 0x28
10042d72:	d000      	beq.n	10042d76 <I2C_ITAddrCplt+0x1e>
10042d74:	e088      	b.n	10042e88 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
10042d76:	687b      	ldr	r3, [r7, #4]
10042d78:	681b      	ldr	r3, [r3, #0]
10042d7a:	699b      	ldr	r3, [r3, #24]
10042d7c:	0c1b      	lsrs	r3, r3, #16
10042d7e:	b2da      	uxtb	r2, r3
10042d80:	250f      	movs	r5, #15
10042d82:	197b      	adds	r3, r7, r5
10042d84:	2101      	movs	r1, #1
10042d86:	400a      	ands	r2, r1
10042d88:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
10042d8a:	687b      	ldr	r3, [r7, #4]
10042d8c:	681b      	ldr	r3, [r3, #0]
10042d8e:	699b      	ldr	r3, [r3, #24]
10042d90:	0c1b      	lsrs	r3, r3, #16
10042d92:	b29a      	uxth	r2, r3
10042d94:	200c      	movs	r0, #12
10042d96:	183b      	adds	r3, r7, r0
10042d98:	21fe      	movs	r1, #254	@ 0xfe
10042d9a:	400a      	ands	r2, r1
10042d9c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
10042d9e:	687b      	ldr	r3, [r7, #4]
10042da0:	681b      	ldr	r3, [r3, #0]
10042da2:	689b      	ldr	r3, [r3, #8]
10042da4:	b29a      	uxth	r2, r3
10042da6:	240a      	movs	r4, #10
10042da8:	193b      	adds	r3, r7, r4
10042daa:	0592      	lsls	r2, r2, #22
10042dac:	0d92      	lsrs	r2, r2, #22
10042dae:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
10042db0:	687b      	ldr	r3, [r7, #4]
10042db2:	681b      	ldr	r3, [r3, #0]
10042db4:	68db      	ldr	r3, [r3, #12]
10042db6:	b29a      	uxth	r2, r3
10042db8:	2308      	movs	r3, #8
10042dba:	18fb      	adds	r3, r7, r3
10042dbc:	21fe      	movs	r1, #254	@ 0xfe
10042dbe:	400a      	ands	r2, r1
10042dc0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
10042dc2:	687b      	ldr	r3, [r7, #4]
10042dc4:	68db      	ldr	r3, [r3, #12]
10042dc6:	2b02      	cmp	r3, #2
10042dc8:	d148      	bne.n	10042e5c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
10042dca:	0021      	movs	r1, r4
10042dcc:	187b      	adds	r3, r7, r1
10042dce:	881b      	ldrh	r3, [r3, #0]
10042dd0:	09db      	lsrs	r3, r3, #7
10042dd2:	b29a      	uxth	r2, r3
10042dd4:	183b      	adds	r3, r7, r0
10042dd6:	881b      	ldrh	r3, [r3, #0]
10042dd8:	4053      	eors	r3, r2
10042dda:	b29b      	uxth	r3, r3
10042ddc:	001a      	movs	r2, r3
10042dde:	2306      	movs	r3, #6
10042de0:	4013      	ands	r3, r2
10042de2:	d120      	bne.n	10042e26 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
10042de4:	183b      	adds	r3, r7, r0
10042de6:	187a      	adds	r2, r7, r1
10042de8:	8812      	ldrh	r2, [r2, #0]
10042dea:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
10042dec:	687b      	ldr	r3, [r7, #4]
10042dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10042df0:	1c5a      	adds	r2, r3, #1
10042df2:	687b      	ldr	r3, [r7, #4]
10042df4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
10042df6:	687b      	ldr	r3, [r7, #4]
10042df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10042dfa:	2b02      	cmp	r3, #2
10042dfc:	d14c      	bne.n	10042e98 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
10042dfe:	687b      	ldr	r3, [r7, #4]
10042e00:	2200      	movs	r2, #0
10042e02:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
10042e04:	687b      	ldr	r3, [r7, #4]
10042e06:	681b      	ldr	r3, [r3, #0]
10042e08:	2208      	movs	r2, #8
10042e0a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
10042e0c:	687b      	ldr	r3, [r7, #4]
10042e0e:	2240      	movs	r2, #64	@ 0x40
10042e10:	2100      	movs	r1, #0
10042e12:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10042e14:	183b      	adds	r3, r7, r0
10042e16:	881a      	ldrh	r2, [r3, #0]
10042e18:	197b      	adds	r3, r7, r5
10042e1a:	7819      	ldrb	r1, [r3, #0]
10042e1c:	687b      	ldr	r3, [r7, #4]
10042e1e:	0018      	movs	r0, r3
10042e20:	f7ff fe71 	bl	10042b06 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
10042e24:	e038      	b.n	10042e98 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
10042e26:	240c      	movs	r4, #12
10042e28:	193b      	adds	r3, r7, r4
10042e2a:	2208      	movs	r2, #8
10042e2c:	18ba      	adds	r2, r7, r2
10042e2e:	8812      	ldrh	r2, [r2, #0]
10042e30:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
10042e32:	2380      	movs	r3, #128	@ 0x80
10042e34:	021a      	lsls	r2, r3, #8
10042e36:	687b      	ldr	r3, [r7, #4]
10042e38:	0011      	movs	r1, r2
10042e3a:	0018      	movs	r0, r3
10042e3c:	f000 fbe0 	bl	10043600 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
10042e40:	687b      	ldr	r3, [r7, #4]
10042e42:	2240      	movs	r2, #64	@ 0x40
10042e44:	2100      	movs	r1, #0
10042e46:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10042e48:	193b      	adds	r3, r7, r4
10042e4a:	881a      	ldrh	r2, [r3, #0]
10042e4c:	230f      	movs	r3, #15
10042e4e:	18fb      	adds	r3, r7, r3
10042e50:	7819      	ldrb	r1, [r3, #0]
10042e52:	687b      	ldr	r3, [r7, #4]
10042e54:	0018      	movs	r0, r3
10042e56:	f7ff fe56 	bl	10042b06 <HAL_I2C_AddrCallback>
}
10042e5a:	e01d      	b.n	10042e98 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
10042e5c:	2380      	movs	r3, #128	@ 0x80
10042e5e:	021a      	lsls	r2, r3, #8
10042e60:	687b      	ldr	r3, [r7, #4]
10042e62:	0011      	movs	r1, r2
10042e64:	0018      	movs	r0, r3
10042e66:	f000 fbcb 	bl	10043600 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
10042e6a:	687b      	ldr	r3, [r7, #4]
10042e6c:	2240      	movs	r2, #64	@ 0x40
10042e6e:	2100      	movs	r1, #0
10042e70:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10042e72:	230c      	movs	r3, #12
10042e74:	18fb      	adds	r3, r7, r3
10042e76:	881a      	ldrh	r2, [r3, #0]
10042e78:	230f      	movs	r3, #15
10042e7a:	18fb      	adds	r3, r7, r3
10042e7c:	7819      	ldrb	r1, [r3, #0]
10042e7e:	687b      	ldr	r3, [r7, #4]
10042e80:	0018      	movs	r0, r3
10042e82:	f7ff fe40 	bl	10042b06 <HAL_I2C_AddrCallback>
}
10042e86:	e007      	b.n	10042e98 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
10042e88:	687b      	ldr	r3, [r7, #4]
10042e8a:	681b      	ldr	r3, [r3, #0]
10042e8c:	2208      	movs	r2, #8
10042e8e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
10042e90:	687b      	ldr	r3, [r7, #4]
10042e92:	2240      	movs	r2, #64	@ 0x40
10042e94:	2100      	movs	r1, #0
10042e96:	5499      	strb	r1, [r3, r2]
}
10042e98:	46c0      	nop			@ (mov r8, r8)
10042e9a:	46bd      	mov	sp, r7
10042e9c:	b004      	add	sp, #16
10042e9e:	bdb0      	pop	{r4, r5, r7, pc}

10042ea0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
10042ea0:	b580      	push	{r7, lr}
10042ea2:	b084      	sub	sp, #16
10042ea4:	af00      	add	r7, sp, #0
10042ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
10042ea8:	687b      	ldr	r3, [r7, #4]
10042eaa:	681b      	ldr	r3, [r3, #0]
10042eac:	681b      	ldr	r3, [r3, #0]
10042eae:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
10042eb0:	687b      	ldr	r3, [r7, #4]
10042eb2:	2242      	movs	r2, #66	@ 0x42
10042eb4:	2100      	movs	r1, #0
10042eb6:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
10042eb8:	68fa      	ldr	r2, [r7, #12]
10042eba:	2380      	movs	r3, #128	@ 0x80
10042ebc:	01db      	lsls	r3, r3, #7
10042ebe:	4013      	ands	r3, r2
10042ec0:	d008      	beq.n	10042ed4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10042ec2:	687b      	ldr	r3, [r7, #4]
10042ec4:	681b      	ldr	r3, [r3, #0]
10042ec6:	681a      	ldr	r2, [r3, #0]
10042ec8:	687b      	ldr	r3, [r7, #4]
10042eca:	681b      	ldr	r3, [r3, #0]
10042ecc:	4924      	ldr	r1, [pc, #144]	@ (10042f60 <I2C_ITSlaveSeqCplt+0xc0>)
10042ece:	400a      	ands	r2, r1
10042ed0:	601a      	str	r2, [r3, #0]
10042ed2:	e00c      	b.n	10042eee <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
10042ed4:	68fa      	ldr	r2, [r7, #12]
10042ed6:	2380      	movs	r3, #128	@ 0x80
10042ed8:	021b      	lsls	r3, r3, #8
10042eda:	4013      	ands	r3, r2
10042edc:	d007      	beq.n	10042eee <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
10042ede:	687b      	ldr	r3, [r7, #4]
10042ee0:	681b      	ldr	r3, [r3, #0]
10042ee2:	681a      	ldr	r2, [r3, #0]
10042ee4:	687b      	ldr	r3, [r7, #4]
10042ee6:	681b      	ldr	r3, [r3, #0]
10042ee8:	491e      	ldr	r1, [pc, #120]	@ (10042f64 <I2C_ITSlaveSeqCplt+0xc4>)
10042eea:	400a      	ands	r2, r1
10042eec:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
10042eee:	687b      	ldr	r3, [r7, #4]
10042ef0:	2241      	movs	r2, #65	@ 0x41
10042ef2:	5c9b      	ldrb	r3, [r3, r2]
10042ef4:	b2db      	uxtb	r3, r3
10042ef6:	2b29      	cmp	r3, #41	@ 0x29
10042ef8:	d114      	bne.n	10042f24 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
10042efa:	687b      	ldr	r3, [r7, #4]
10042efc:	2241      	movs	r2, #65	@ 0x41
10042efe:	2128      	movs	r1, #40	@ 0x28
10042f00:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
10042f02:	687b      	ldr	r3, [r7, #4]
10042f04:	2221      	movs	r2, #33	@ 0x21
10042f06:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10042f08:	687b      	ldr	r3, [r7, #4]
10042f0a:	2101      	movs	r1, #1
10042f0c:	0018      	movs	r0, r3
10042f0e:	f000 fb77 	bl	10043600 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10042f12:	687b      	ldr	r3, [r7, #4]
10042f14:	2240      	movs	r2, #64	@ 0x40
10042f16:	2100      	movs	r1, #0
10042f18:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
10042f1a:	687b      	ldr	r3, [r7, #4]
10042f1c:	0018      	movs	r0, r3
10042f1e:	f7ff fde2 	bl	10042ae6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
10042f22:	e019      	b.n	10042f58 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
10042f24:	687b      	ldr	r3, [r7, #4]
10042f26:	2241      	movs	r2, #65	@ 0x41
10042f28:	5c9b      	ldrb	r3, [r3, r2]
10042f2a:	b2db      	uxtb	r3, r3
10042f2c:	2b2a      	cmp	r3, #42	@ 0x2a
10042f2e:	d113      	bne.n	10042f58 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
10042f30:	687b      	ldr	r3, [r7, #4]
10042f32:	2241      	movs	r2, #65	@ 0x41
10042f34:	2128      	movs	r1, #40	@ 0x28
10042f36:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
10042f38:	687b      	ldr	r3, [r7, #4]
10042f3a:	2222      	movs	r2, #34	@ 0x22
10042f3c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
10042f3e:	687b      	ldr	r3, [r7, #4]
10042f40:	2102      	movs	r1, #2
10042f42:	0018      	movs	r0, r3
10042f44:	f000 fb5c 	bl	10043600 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
10042f48:	687b      	ldr	r3, [r7, #4]
10042f4a:	2240      	movs	r2, #64	@ 0x40
10042f4c:	2100      	movs	r1, #0
10042f4e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
10042f50:	687b      	ldr	r3, [r7, #4]
10042f52:	0018      	movs	r0, r3
10042f54:	f7ff fdcf 	bl	10042af6 <HAL_I2C_SlaveRxCpltCallback>
}
10042f58:	46c0      	nop			@ (mov r8, r8)
10042f5a:	46bd      	mov	sp, r7
10042f5c:	b004      	add	sp, #16
10042f5e:	bd80      	pop	{r7, pc}
10042f60:	ffffbfff 	.word	0xffffbfff
10042f64:	ffff7fff 	.word	0xffff7fff

10042f68 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10042f68:	b580      	push	{r7, lr}
10042f6a:	b086      	sub	sp, #24
10042f6c:	af00      	add	r7, sp, #0
10042f6e:	6078      	str	r0, [r7, #4]
10042f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
10042f72:	687b      	ldr	r3, [r7, #4]
10042f74:	681b      	ldr	r3, [r3, #0]
10042f76:	681b      	ldr	r3, [r3, #0]
10042f78:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
10042f7a:	683b      	ldr	r3, [r7, #0]
10042f7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
10042f7e:	687b      	ldr	r3, [r7, #4]
10042f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10042f82:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
10042f84:	200b      	movs	r0, #11
10042f86:	183b      	adds	r3, r7, r0
10042f88:	687a      	ldr	r2, [r7, #4]
10042f8a:	2141      	movs	r1, #65	@ 0x41
10042f8c:	5c52      	ldrb	r2, [r2, r1]
10042f8e:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10042f90:	687b      	ldr	r3, [r7, #4]
10042f92:	681b      	ldr	r3, [r3, #0]
10042f94:	2220      	movs	r2, #32
10042f96:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
10042f98:	183b      	adds	r3, r7, r0
10042f9a:	781b      	ldrb	r3, [r3, #0]
10042f9c:	2b21      	cmp	r3, #33	@ 0x21
10042f9e:	d003      	beq.n	10042fa8 <I2C_ITSlaveCplt+0x40>
10042fa0:	183b      	adds	r3, r7, r0
10042fa2:	781b      	ldrb	r3, [r3, #0]
10042fa4:	2b29      	cmp	r3, #41	@ 0x29
10042fa6:	d109      	bne.n	10042fbc <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
10042fa8:	4aac      	ldr	r2, [pc, #688]	@ (1004325c <I2C_ITSlaveCplt+0x2f4>)
10042faa:	687b      	ldr	r3, [r7, #4]
10042fac:	0011      	movs	r1, r2
10042fae:	0018      	movs	r0, r3
10042fb0:	f000 fb26 	bl	10043600 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
10042fb4:	687b      	ldr	r3, [r7, #4]
10042fb6:	2221      	movs	r2, #33	@ 0x21
10042fb8:	631a      	str	r2, [r3, #48]	@ 0x30
10042fba:	e020      	b.n	10042ffe <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
10042fbc:	220b      	movs	r2, #11
10042fbe:	18bb      	adds	r3, r7, r2
10042fc0:	781b      	ldrb	r3, [r3, #0]
10042fc2:	2b22      	cmp	r3, #34	@ 0x22
10042fc4:	d003      	beq.n	10042fce <I2C_ITSlaveCplt+0x66>
10042fc6:	18bb      	adds	r3, r7, r2
10042fc8:	781b      	ldrb	r3, [r3, #0]
10042fca:	2b2a      	cmp	r3, #42	@ 0x2a
10042fcc:	d109      	bne.n	10042fe2 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
10042fce:	4aa4      	ldr	r2, [pc, #656]	@ (10043260 <I2C_ITSlaveCplt+0x2f8>)
10042fd0:	687b      	ldr	r3, [r7, #4]
10042fd2:	0011      	movs	r1, r2
10042fd4:	0018      	movs	r0, r3
10042fd6:	f000 fb13 	bl	10043600 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
10042fda:	687b      	ldr	r3, [r7, #4]
10042fdc:	2222      	movs	r2, #34	@ 0x22
10042fde:	631a      	str	r2, [r3, #48]	@ 0x30
10042fe0:	e00d      	b.n	10042ffe <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
10042fe2:	230b      	movs	r3, #11
10042fe4:	18fb      	adds	r3, r7, r3
10042fe6:	781b      	ldrb	r3, [r3, #0]
10042fe8:	2b28      	cmp	r3, #40	@ 0x28
10042fea:	d108      	bne.n	10042ffe <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
10042fec:	4a9d      	ldr	r2, [pc, #628]	@ (10043264 <I2C_ITSlaveCplt+0x2fc>)
10042fee:	687b      	ldr	r3, [r7, #4]
10042ff0:	0011      	movs	r1, r2
10042ff2:	0018      	movs	r0, r3
10042ff4:	f000 fb04 	bl	10043600 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
10042ff8:	687b      	ldr	r3, [r7, #4]
10042ffa:	2200      	movs	r2, #0
10042ffc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
10042ffe:	687b      	ldr	r3, [r7, #4]
10043000:	681b      	ldr	r3, [r3, #0]
10043002:	685a      	ldr	r2, [r3, #4]
10043004:	687b      	ldr	r3, [r7, #4]
10043006:	681b      	ldr	r3, [r3, #0]
10043008:	2180      	movs	r1, #128	@ 0x80
1004300a:	0209      	lsls	r1, r1, #8
1004300c:	430a      	orrs	r2, r1
1004300e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
10043010:	687b      	ldr	r3, [r7, #4]
10043012:	681b      	ldr	r3, [r3, #0]
10043014:	685a      	ldr	r2, [r3, #4]
10043016:	687b      	ldr	r3, [r7, #4]
10043018:	681b      	ldr	r3, [r3, #0]
1004301a:	4993      	ldr	r1, [pc, #588]	@ (10043268 <I2C_ITSlaveCplt+0x300>)
1004301c:	400a      	ands	r2, r1
1004301e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
10043020:	687b      	ldr	r3, [r7, #4]
10043022:	0018      	movs	r0, r3
10043024:	f000 faab 	bl	1004357e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
10043028:	693a      	ldr	r2, [r7, #16]
1004302a:	2380      	movs	r3, #128	@ 0x80
1004302c:	01db      	lsls	r3, r3, #7
1004302e:	4013      	ands	r3, r2
10043030:	d013      	beq.n	1004305a <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10043032:	687b      	ldr	r3, [r7, #4]
10043034:	681b      	ldr	r3, [r3, #0]
10043036:	681a      	ldr	r2, [r3, #0]
10043038:	687b      	ldr	r3, [r7, #4]
1004303a:	681b      	ldr	r3, [r3, #0]
1004303c:	498b      	ldr	r1, [pc, #556]	@ (1004326c <I2C_ITSlaveCplt+0x304>)
1004303e:	400a      	ands	r2, r1
10043040:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
10043042:	687b      	ldr	r3, [r7, #4]
10043044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10043046:	2b00      	cmp	r3, #0
10043048:	d01f      	beq.n	1004308a <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
1004304a:	687b      	ldr	r3, [r7, #4]
1004304c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004304e:	681b      	ldr	r3, [r3, #0]
10043050:	685b      	ldr	r3, [r3, #4]
10043052:	b29a      	uxth	r2, r3
10043054:	687b      	ldr	r3, [r7, #4]
10043056:	855a      	strh	r2, [r3, #42]	@ 0x2a
10043058:	e017      	b.n	1004308a <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
1004305a:	693a      	ldr	r2, [r7, #16]
1004305c:	2380      	movs	r3, #128	@ 0x80
1004305e:	021b      	lsls	r3, r3, #8
10043060:	4013      	ands	r3, r2
10043062:	d012      	beq.n	1004308a <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
10043064:	687b      	ldr	r3, [r7, #4]
10043066:	681b      	ldr	r3, [r3, #0]
10043068:	681a      	ldr	r2, [r3, #0]
1004306a:	687b      	ldr	r3, [r7, #4]
1004306c:	681b      	ldr	r3, [r3, #0]
1004306e:	4980      	ldr	r1, [pc, #512]	@ (10043270 <I2C_ITSlaveCplt+0x308>)
10043070:	400a      	ands	r2, r1
10043072:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
10043074:	687b      	ldr	r3, [r7, #4]
10043076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10043078:	2b00      	cmp	r3, #0
1004307a:	d006      	beq.n	1004308a <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
1004307c:	687b      	ldr	r3, [r7, #4]
1004307e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10043080:	681b      	ldr	r3, [r3, #0]
10043082:	685b      	ldr	r3, [r3, #4]
10043084:	b29a      	uxth	r2, r3
10043086:	687b      	ldr	r3, [r7, #4]
10043088:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
1004308a:	697b      	ldr	r3, [r7, #20]
1004308c:	2204      	movs	r2, #4
1004308e:	4013      	ands	r3, r2
10043090:	d020      	beq.n	100430d4 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
10043092:	697b      	ldr	r3, [r7, #20]
10043094:	2204      	movs	r2, #4
10043096:	4393      	bics	r3, r2
10043098:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
1004309a:	687b      	ldr	r3, [r7, #4]
1004309c:	681b      	ldr	r3, [r3, #0]
1004309e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100430a0:	687b      	ldr	r3, [r7, #4]
100430a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100430a4:	b2d2      	uxtb	r2, r2
100430a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
100430a8:	687b      	ldr	r3, [r7, #4]
100430aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100430ac:	1c5a      	adds	r2, r3, #1
100430ae:	687b      	ldr	r3, [r7, #4]
100430b0:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
100430b2:	687b      	ldr	r3, [r7, #4]
100430b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100430b6:	2b00      	cmp	r3, #0
100430b8:	d00c      	beq.n	100430d4 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
100430ba:	687b      	ldr	r3, [r7, #4]
100430bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100430be:	3b01      	subs	r3, #1
100430c0:	b29a      	uxth	r2, r3
100430c2:	687b      	ldr	r3, [r7, #4]
100430c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
100430c6:	687b      	ldr	r3, [r7, #4]
100430c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100430ca:	b29b      	uxth	r3, r3
100430cc:	3b01      	subs	r3, #1
100430ce:	b29a      	uxth	r2, r3
100430d0:	687b      	ldr	r3, [r7, #4]
100430d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
100430d4:	687b      	ldr	r3, [r7, #4]
100430d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100430d8:	b29b      	uxth	r3, r3
100430da:	2b00      	cmp	r3, #0
100430dc:	d005      	beq.n	100430ea <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
100430de:	687b      	ldr	r3, [r7, #4]
100430e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100430e2:	2204      	movs	r2, #4
100430e4:	431a      	orrs	r2, r3
100430e6:	687b      	ldr	r3, [r7, #4]
100430e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
100430ea:	697b      	ldr	r3, [r7, #20]
100430ec:	2210      	movs	r2, #16
100430ee:	4013      	ands	r3, r2
100430f0:	d04f      	beq.n	10043192 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
100430f2:	693b      	ldr	r3, [r7, #16]
100430f4:	2210      	movs	r2, #16
100430f6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
100430f8:	d04b      	beq.n	10043192 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
100430fa:	687b      	ldr	r3, [r7, #4]
100430fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100430fe:	b29b      	uxth	r3, r3
10043100:	2b00      	cmp	r3, #0
10043102:	d12d      	bne.n	10043160 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10043104:	687b      	ldr	r3, [r7, #4]
10043106:	2241      	movs	r2, #65	@ 0x41
10043108:	5c9b      	ldrb	r3, [r3, r2]
1004310a:	b2db      	uxtb	r3, r3
1004310c:	2b28      	cmp	r3, #40	@ 0x28
1004310e:	d10b      	bne.n	10043128 <I2C_ITSlaveCplt+0x1c0>
10043110:	68fa      	ldr	r2, [r7, #12]
10043112:	2380      	movs	r3, #128	@ 0x80
10043114:	049b      	lsls	r3, r3, #18
10043116:	429a      	cmp	r2, r3
10043118:	d106      	bne.n	10043128 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
1004311a:	697a      	ldr	r2, [r7, #20]
1004311c:	687b      	ldr	r3, [r7, #4]
1004311e:	0011      	movs	r1, r2
10043120:	0018      	movs	r0, r3
10043122:	f000 f8a9 	bl	10043278 <I2C_ITListenCplt>
10043126:	e034      	b.n	10043192 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
10043128:	687b      	ldr	r3, [r7, #4]
1004312a:	2241      	movs	r2, #65	@ 0x41
1004312c:	5c9b      	ldrb	r3, [r3, r2]
1004312e:	b2db      	uxtb	r3, r3
10043130:	2b29      	cmp	r3, #41	@ 0x29
10043132:	d110      	bne.n	10043156 <I2C_ITSlaveCplt+0x1ee>
10043134:	68fb      	ldr	r3, [r7, #12]
10043136:	4a4f      	ldr	r2, [pc, #316]	@ (10043274 <I2C_ITSlaveCplt+0x30c>)
10043138:	4293      	cmp	r3, r2
1004313a:	d00c      	beq.n	10043156 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004313c:	687b      	ldr	r3, [r7, #4]
1004313e:	681b      	ldr	r3, [r3, #0]
10043140:	2210      	movs	r2, #16
10043142:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
10043144:	687b      	ldr	r3, [r7, #4]
10043146:	0018      	movs	r0, r3
10043148:	f000 fa19 	bl	1004357e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
1004314c:	687b      	ldr	r3, [r7, #4]
1004314e:	0018      	movs	r0, r3
10043150:	f7ff fea6 	bl	10042ea0 <I2C_ITSlaveSeqCplt>
10043154:	e01d      	b.n	10043192 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10043156:	687b      	ldr	r3, [r7, #4]
10043158:	681b      	ldr	r3, [r3, #0]
1004315a:	2210      	movs	r2, #16
1004315c:	61da      	str	r2, [r3, #28]
1004315e:	e018      	b.n	10043192 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10043160:	687b      	ldr	r3, [r7, #4]
10043162:	681b      	ldr	r3, [r3, #0]
10043164:	2210      	movs	r2, #16
10043166:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10043168:	687b      	ldr	r3, [r7, #4]
1004316a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004316c:	2204      	movs	r2, #4
1004316e:	431a      	orrs	r2, r3
10043170:	687b      	ldr	r3, [r7, #4]
10043172:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
10043174:	68fb      	ldr	r3, [r7, #12]
10043176:	2b00      	cmp	r3, #0
10043178:	d004      	beq.n	10043184 <I2C_ITSlaveCplt+0x21c>
1004317a:	68fa      	ldr	r2, [r7, #12]
1004317c:	2380      	movs	r3, #128	@ 0x80
1004317e:	045b      	lsls	r3, r3, #17
10043180:	429a      	cmp	r2, r3
10043182:	d106      	bne.n	10043192 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
10043184:	687b      	ldr	r3, [r7, #4]
10043186:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10043188:	687b      	ldr	r3, [r7, #4]
1004318a:	0011      	movs	r1, r2
1004318c:	0018      	movs	r0, r3
1004318e:	f000 f8cb 	bl	10043328 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
10043192:	687b      	ldr	r3, [r7, #4]
10043194:	2242      	movs	r2, #66	@ 0x42
10043196:	2100      	movs	r1, #0
10043198:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
1004319a:	687b      	ldr	r3, [r7, #4]
1004319c:	2200      	movs	r2, #0
1004319e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
100431a0:	687b      	ldr	r3, [r7, #4]
100431a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100431a4:	2b00      	cmp	r3, #0
100431a6:	d013      	beq.n	100431d0 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
100431a8:	687b      	ldr	r3, [r7, #4]
100431aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100431ac:	687b      	ldr	r3, [r7, #4]
100431ae:	0011      	movs	r1, r2
100431b0:	0018      	movs	r0, r3
100431b2:	f000 f8b9 	bl	10043328 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
100431b6:	687b      	ldr	r3, [r7, #4]
100431b8:	2241      	movs	r2, #65	@ 0x41
100431ba:	5c9b      	ldrb	r3, [r3, r2]
100431bc:	b2db      	uxtb	r3, r3
100431be:	2b28      	cmp	r3, #40	@ 0x28
100431c0:	d147      	bne.n	10043252 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
100431c2:	697a      	ldr	r2, [r7, #20]
100431c4:	687b      	ldr	r3, [r7, #4]
100431c6:	0011      	movs	r1, r2
100431c8:	0018      	movs	r0, r3
100431ca:	f000 f855 	bl	10043278 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
100431ce:	e040      	b.n	10043252 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
100431d0:	687b      	ldr	r3, [r7, #4]
100431d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100431d4:	4a27      	ldr	r2, [pc, #156]	@ (10043274 <I2C_ITSlaveCplt+0x30c>)
100431d6:	4293      	cmp	r3, r2
100431d8:	d016      	beq.n	10043208 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
100431da:	687b      	ldr	r3, [r7, #4]
100431dc:	0018      	movs	r0, r3
100431de:	f7ff fe5f 	bl	10042ea0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
100431e2:	687b      	ldr	r3, [r7, #4]
100431e4:	4a23      	ldr	r2, [pc, #140]	@ (10043274 <I2C_ITSlaveCplt+0x30c>)
100431e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
100431e8:	687b      	ldr	r3, [r7, #4]
100431ea:	2241      	movs	r2, #65	@ 0x41
100431ec:	2120      	movs	r1, #32
100431ee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
100431f0:	687b      	ldr	r3, [r7, #4]
100431f2:	2200      	movs	r2, #0
100431f4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
100431f6:	687b      	ldr	r3, [r7, #4]
100431f8:	2240      	movs	r2, #64	@ 0x40
100431fa:	2100      	movs	r1, #0
100431fc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
100431fe:	687b      	ldr	r3, [r7, #4]
10043200:	0018      	movs	r0, r3
10043202:	f7ff fc90 	bl	10042b26 <HAL_I2C_ListenCpltCallback>
}
10043206:	e024      	b.n	10043252 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10043208:	687b      	ldr	r3, [r7, #4]
1004320a:	2241      	movs	r2, #65	@ 0x41
1004320c:	5c9b      	ldrb	r3, [r3, r2]
1004320e:	b2db      	uxtb	r3, r3
10043210:	2b22      	cmp	r3, #34	@ 0x22
10043212:	d10f      	bne.n	10043234 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
10043214:	687b      	ldr	r3, [r7, #4]
10043216:	2241      	movs	r2, #65	@ 0x41
10043218:	2120      	movs	r1, #32
1004321a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
1004321c:	687b      	ldr	r3, [r7, #4]
1004321e:	2200      	movs	r2, #0
10043220:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10043222:	687b      	ldr	r3, [r7, #4]
10043224:	2240      	movs	r2, #64	@ 0x40
10043226:	2100      	movs	r1, #0
10043228:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
1004322a:	687b      	ldr	r3, [r7, #4]
1004322c:	0018      	movs	r0, r3
1004322e:	f7ff fc62 	bl	10042af6 <HAL_I2C_SlaveRxCpltCallback>
}
10043232:	e00e      	b.n	10043252 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
10043234:	687b      	ldr	r3, [r7, #4]
10043236:	2241      	movs	r2, #65	@ 0x41
10043238:	2120      	movs	r1, #32
1004323a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
1004323c:	687b      	ldr	r3, [r7, #4]
1004323e:	2200      	movs	r2, #0
10043240:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10043242:	687b      	ldr	r3, [r7, #4]
10043244:	2240      	movs	r2, #64	@ 0x40
10043246:	2100      	movs	r1, #0
10043248:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
1004324a:	687b      	ldr	r3, [r7, #4]
1004324c:	0018      	movs	r0, r3
1004324e:	f7ff fc4a 	bl	10042ae6 <HAL_I2C_SlaveTxCpltCallback>
}
10043252:	46c0      	nop			@ (mov r8, r8)
10043254:	46bd      	mov	sp, r7
10043256:	b006      	add	sp, #24
10043258:	bd80      	pop	{r7, pc}
1004325a:	46c0      	nop			@ (mov r8, r8)
1004325c:	00008001 	.word	0x00008001
10043260:	00008002 	.word	0x00008002
10043264:	00008003 	.word	0x00008003
10043268:	fe00e800 	.word	0xfe00e800
1004326c:	ffffbfff 	.word	0xffffbfff
10043270:	ffff7fff 	.word	0xffff7fff
10043274:	ffff0000 	.word	0xffff0000

10043278 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10043278:	b580      	push	{r7, lr}
1004327a:	b082      	sub	sp, #8
1004327c:	af00      	add	r7, sp, #0
1004327e:	6078      	str	r0, [r7, #4]
10043280:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
10043282:	687b      	ldr	r3, [r7, #4]
10043284:	4a26      	ldr	r2, [pc, #152]	@ (10043320 <I2C_ITListenCplt+0xa8>)
10043286:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
10043288:	687b      	ldr	r3, [r7, #4]
1004328a:	2200      	movs	r2, #0
1004328c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
1004328e:	687b      	ldr	r3, [r7, #4]
10043290:	2241      	movs	r2, #65	@ 0x41
10043292:	2120      	movs	r1, #32
10043294:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
10043296:	687b      	ldr	r3, [r7, #4]
10043298:	2242      	movs	r2, #66	@ 0x42
1004329a:	2100      	movs	r1, #0
1004329c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
1004329e:	687b      	ldr	r3, [r7, #4]
100432a0:	2200      	movs	r2, #0
100432a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
100432a4:	683b      	ldr	r3, [r7, #0]
100432a6:	2204      	movs	r2, #4
100432a8:	4013      	ands	r3, r2
100432aa:	d022      	beq.n	100432f2 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
100432ac:	687b      	ldr	r3, [r7, #4]
100432ae:	681b      	ldr	r3, [r3, #0]
100432b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100432b2:	687b      	ldr	r3, [r7, #4]
100432b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100432b6:	b2d2      	uxtb	r2, r2
100432b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
100432ba:	687b      	ldr	r3, [r7, #4]
100432bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100432be:	1c5a      	adds	r2, r3, #1
100432c0:	687b      	ldr	r3, [r7, #4]
100432c2:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
100432c4:	687b      	ldr	r3, [r7, #4]
100432c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100432c8:	2b00      	cmp	r3, #0
100432ca:	d012      	beq.n	100432f2 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
100432cc:	687b      	ldr	r3, [r7, #4]
100432ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100432d0:	3b01      	subs	r3, #1
100432d2:	b29a      	uxth	r2, r3
100432d4:	687b      	ldr	r3, [r7, #4]
100432d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
100432d8:	687b      	ldr	r3, [r7, #4]
100432da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100432dc:	b29b      	uxth	r3, r3
100432de:	3b01      	subs	r3, #1
100432e0:	b29a      	uxth	r2, r3
100432e2:	687b      	ldr	r3, [r7, #4]
100432e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
100432e6:	687b      	ldr	r3, [r7, #4]
100432e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100432ea:	2204      	movs	r2, #4
100432ec:	431a      	orrs	r2, r3
100432ee:	687b      	ldr	r3, [r7, #4]
100432f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
100432f2:	4a0c      	ldr	r2, [pc, #48]	@ (10043324 <I2C_ITListenCplt+0xac>)
100432f4:	687b      	ldr	r3, [r7, #4]
100432f6:	0011      	movs	r1, r2
100432f8:	0018      	movs	r0, r3
100432fa:	f000 f981 	bl	10043600 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100432fe:	687b      	ldr	r3, [r7, #4]
10043300:	681b      	ldr	r3, [r3, #0]
10043302:	2210      	movs	r2, #16
10043304:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10043306:	687b      	ldr	r3, [r7, #4]
10043308:	2240      	movs	r2, #64	@ 0x40
1004330a:	2100      	movs	r1, #0
1004330c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
1004330e:	687b      	ldr	r3, [r7, #4]
10043310:	0018      	movs	r0, r3
10043312:	f7ff fc08 	bl	10042b26 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
10043316:	46c0      	nop			@ (mov r8, r8)
10043318:	46bd      	mov	sp, r7
1004331a:	b002      	add	sp, #8
1004331c:	bd80      	pop	{r7, pc}
1004331e:	46c0      	nop			@ (mov r8, r8)
10043320:	ffff0000 	.word	0xffff0000
10043324:	00008003 	.word	0x00008003

10043328 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
10043328:	b580      	push	{r7, lr}
1004332a:	b084      	sub	sp, #16
1004332c:	af00      	add	r7, sp, #0
1004332e:	6078      	str	r0, [r7, #4]
10043330:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
10043332:	200f      	movs	r0, #15
10043334:	183b      	adds	r3, r7, r0
10043336:	687a      	ldr	r2, [r7, #4]
10043338:	2141      	movs	r1, #65	@ 0x41
1004333a:	5c52      	ldrb	r2, [r2, r1]
1004333c:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
1004333e:	687b      	ldr	r3, [r7, #4]
10043340:	2242      	movs	r2, #66	@ 0x42
10043342:	2100      	movs	r1, #0
10043344:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
10043346:	687b      	ldr	r3, [r7, #4]
10043348:	4a72      	ldr	r2, [pc, #456]	@ (10043514 <I2C_ITError+0x1ec>)
1004334a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
1004334c:	687b      	ldr	r3, [r7, #4]
1004334e:	2200      	movs	r2, #0
10043350:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
10043352:	687b      	ldr	r3, [r7, #4]
10043354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10043356:	683b      	ldr	r3, [r7, #0]
10043358:	431a      	orrs	r2, r3
1004335a:	687b      	ldr	r3, [r7, #4]
1004335c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
1004335e:	183b      	adds	r3, r7, r0
10043360:	781b      	ldrb	r3, [r3, #0]
10043362:	2b28      	cmp	r3, #40	@ 0x28
10043364:	d007      	beq.n	10043376 <I2C_ITError+0x4e>
10043366:	183b      	adds	r3, r7, r0
10043368:	781b      	ldrb	r3, [r3, #0]
1004336a:	2b29      	cmp	r3, #41	@ 0x29
1004336c:	d003      	beq.n	10043376 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
1004336e:	183b      	adds	r3, r7, r0
10043370:	781b      	ldrb	r3, [r3, #0]
10043372:	2b2a      	cmp	r3, #42	@ 0x2a
10043374:	d10c      	bne.n	10043390 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
10043376:	687b      	ldr	r3, [r7, #4]
10043378:	2103      	movs	r1, #3
1004337a:	0018      	movs	r0, r3
1004337c:	f000 f940 	bl	10043600 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
10043380:	687b      	ldr	r3, [r7, #4]
10043382:	2241      	movs	r2, #65	@ 0x41
10043384:	2128      	movs	r1, #40	@ 0x28
10043386:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
10043388:	687b      	ldr	r3, [r7, #4]
1004338a:	4a63      	ldr	r2, [pc, #396]	@ (10043518 <I2C_ITError+0x1f0>)
1004338c:	635a      	str	r2, [r3, #52]	@ 0x34
1004338e:	e032      	b.n	100433f6 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
10043390:	4a62      	ldr	r2, [pc, #392]	@ (1004351c <I2C_ITError+0x1f4>)
10043392:	687b      	ldr	r3, [r7, #4]
10043394:	0011      	movs	r1, r2
10043396:	0018      	movs	r0, r3
10043398:	f000 f932 	bl	10043600 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
1004339c:	687b      	ldr	r3, [r7, #4]
1004339e:	0018      	movs	r0, r3
100433a0:	f000 f8ed 	bl	1004357e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
100433a4:	687b      	ldr	r3, [r7, #4]
100433a6:	2241      	movs	r2, #65	@ 0x41
100433a8:	5c9b      	ldrb	r3, [r3, r2]
100433aa:	b2db      	uxtb	r3, r3
100433ac:	2b60      	cmp	r3, #96	@ 0x60
100433ae:	d01f      	beq.n	100433f0 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
100433b0:	687b      	ldr	r3, [r7, #4]
100433b2:	2241      	movs	r2, #65	@ 0x41
100433b4:	2120      	movs	r1, #32
100433b6:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
100433b8:	687b      	ldr	r3, [r7, #4]
100433ba:	681b      	ldr	r3, [r3, #0]
100433bc:	699b      	ldr	r3, [r3, #24]
100433be:	2220      	movs	r2, #32
100433c0:	4013      	ands	r3, r2
100433c2:	2b20      	cmp	r3, #32
100433c4:	d114      	bne.n	100433f0 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
100433c6:	687b      	ldr	r3, [r7, #4]
100433c8:	681b      	ldr	r3, [r3, #0]
100433ca:	699b      	ldr	r3, [r3, #24]
100433cc:	2210      	movs	r2, #16
100433ce:	4013      	ands	r3, r2
100433d0:	2b10      	cmp	r3, #16
100433d2:	d109      	bne.n	100433e8 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100433d4:	687b      	ldr	r3, [r7, #4]
100433d6:	681b      	ldr	r3, [r3, #0]
100433d8:	2210      	movs	r2, #16
100433da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
100433dc:	687b      	ldr	r3, [r7, #4]
100433de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100433e0:	2204      	movs	r2, #4
100433e2:	431a      	orrs	r2, r3
100433e4:	687b      	ldr	r3, [r7, #4]
100433e6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
100433e8:	687b      	ldr	r3, [r7, #4]
100433ea:	681b      	ldr	r3, [r3, #0]
100433ec:	2220      	movs	r2, #32
100433ee:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
100433f0:	687b      	ldr	r3, [r7, #4]
100433f2:	2200      	movs	r2, #0
100433f4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
100433f6:	687b      	ldr	r3, [r7, #4]
100433f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100433fa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
100433fc:	687b      	ldr	r3, [r7, #4]
100433fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10043400:	2b00      	cmp	r3, #0
10043402:	d03b      	beq.n	1004347c <I2C_ITError+0x154>
10043404:	68bb      	ldr	r3, [r7, #8]
10043406:	2b11      	cmp	r3, #17
10043408:	d002      	beq.n	10043410 <I2C_ITError+0xe8>
1004340a:	68bb      	ldr	r3, [r7, #8]
1004340c:	2b21      	cmp	r3, #33	@ 0x21
1004340e:	d135      	bne.n	1004347c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
10043410:	687b      	ldr	r3, [r7, #4]
10043412:	681b      	ldr	r3, [r3, #0]
10043414:	681a      	ldr	r2, [r3, #0]
10043416:	2380      	movs	r3, #128	@ 0x80
10043418:	01db      	lsls	r3, r3, #7
1004341a:	401a      	ands	r2, r3
1004341c:	2380      	movs	r3, #128	@ 0x80
1004341e:	01db      	lsls	r3, r3, #7
10043420:	429a      	cmp	r2, r3
10043422:	d107      	bne.n	10043434 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10043424:	687b      	ldr	r3, [r7, #4]
10043426:	681b      	ldr	r3, [r3, #0]
10043428:	681a      	ldr	r2, [r3, #0]
1004342a:	687b      	ldr	r3, [r7, #4]
1004342c:	681b      	ldr	r3, [r3, #0]
1004342e:	493c      	ldr	r1, [pc, #240]	@ (10043520 <I2C_ITError+0x1f8>)
10043430:	400a      	ands	r2, r1
10043432:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
10043434:	687b      	ldr	r3, [r7, #4]
10043436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10043438:	0018      	movs	r0, r3
1004343a:	f7ff f8d7 	bl	100425ec <HAL_DMA_GetState>
1004343e:	0003      	movs	r3, r0
10043440:	2b01      	cmp	r3, #1
10043442:	d016      	beq.n	10043472 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
10043444:	687b      	ldr	r3, [r7, #4]
10043446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10043448:	4a36      	ldr	r2, [pc, #216]	@ (10043524 <I2C_ITError+0x1fc>)
1004344a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
1004344c:	687b      	ldr	r3, [r7, #4]
1004344e:	2240      	movs	r2, #64	@ 0x40
10043450:	2100      	movs	r1, #0
10043452:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
10043454:	687b      	ldr	r3, [r7, #4]
10043456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10043458:	0018      	movs	r0, r3
1004345a:	f7ff f880 	bl	1004255e <HAL_DMA_Abort_IT>
1004345e:	1e03      	subs	r3, r0, #0
10043460:	d051      	beq.n	10043506 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
10043462:	687b      	ldr	r3, [r7, #4]
10043464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10043466:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10043468:	687b      	ldr	r3, [r7, #4]
1004346a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004346c:	0018      	movs	r0, r3
1004346e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
10043470:	e049      	b.n	10043506 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
10043472:	687b      	ldr	r3, [r7, #4]
10043474:	0018      	movs	r0, r3
10043476:	f000 f859 	bl	1004352c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
1004347a:	e044      	b.n	10043506 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
1004347c:	687b      	ldr	r3, [r7, #4]
1004347e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10043480:	2b00      	cmp	r3, #0
10043482:	d03b      	beq.n	100434fc <I2C_ITError+0x1d4>
10043484:	68bb      	ldr	r3, [r7, #8]
10043486:	2b12      	cmp	r3, #18
10043488:	d002      	beq.n	10043490 <I2C_ITError+0x168>
1004348a:	68bb      	ldr	r3, [r7, #8]
1004348c:	2b22      	cmp	r3, #34	@ 0x22
1004348e:	d135      	bne.n	100434fc <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
10043490:	687b      	ldr	r3, [r7, #4]
10043492:	681b      	ldr	r3, [r3, #0]
10043494:	681a      	ldr	r2, [r3, #0]
10043496:	2380      	movs	r3, #128	@ 0x80
10043498:	021b      	lsls	r3, r3, #8
1004349a:	401a      	ands	r2, r3
1004349c:	2380      	movs	r3, #128	@ 0x80
1004349e:	021b      	lsls	r3, r3, #8
100434a0:	429a      	cmp	r2, r3
100434a2:	d107      	bne.n	100434b4 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
100434a4:	687b      	ldr	r3, [r7, #4]
100434a6:	681b      	ldr	r3, [r3, #0]
100434a8:	681a      	ldr	r2, [r3, #0]
100434aa:	687b      	ldr	r3, [r7, #4]
100434ac:	681b      	ldr	r3, [r3, #0]
100434ae:	491e      	ldr	r1, [pc, #120]	@ (10043528 <I2C_ITError+0x200>)
100434b0:	400a      	ands	r2, r1
100434b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
100434b4:	687b      	ldr	r3, [r7, #4]
100434b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100434b8:	0018      	movs	r0, r3
100434ba:	f7ff f897 	bl	100425ec <HAL_DMA_GetState>
100434be:	0003      	movs	r3, r0
100434c0:	2b01      	cmp	r3, #1
100434c2:	d016      	beq.n	100434f2 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
100434c4:	687b      	ldr	r3, [r7, #4]
100434c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100434c8:	4a16      	ldr	r2, [pc, #88]	@ (10043524 <I2C_ITError+0x1fc>)
100434ca:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
100434cc:	687b      	ldr	r3, [r7, #4]
100434ce:	2240      	movs	r2, #64	@ 0x40
100434d0:	2100      	movs	r1, #0
100434d2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
100434d4:	687b      	ldr	r3, [r7, #4]
100434d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100434d8:	0018      	movs	r0, r3
100434da:	f7ff f840 	bl	1004255e <HAL_DMA_Abort_IT>
100434de:	1e03      	subs	r3, r0, #0
100434e0:	d013      	beq.n	1004350a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
100434e2:	687b      	ldr	r3, [r7, #4]
100434e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100434e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
100434e8:	687b      	ldr	r3, [r7, #4]
100434ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100434ec:	0018      	movs	r0, r3
100434ee:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
100434f0:	e00b      	b.n	1004350a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
100434f2:	687b      	ldr	r3, [r7, #4]
100434f4:	0018      	movs	r0, r3
100434f6:	f000 f819 	bl	1004352c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
100434fa:	e006      	b.n	1004350a <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
100434fc:	687b      	ldr	r3, [r7, #4]
100434fe:	0018      	movs	r0, r3
10043500:	f000 f814 	bl	1004352c <I2C_TreatErrorCallback>
  }
}
10043504:	e002      	b.n	1004350c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
10043506:	46c0      	nop			@ (mov r8, r8)
10043508:	e000      	b.n	1004350c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
1004350a:	46c0      	nop			@ (mov r8, r8)
}
1004350c:	46c0      	nop			@ (mov r8, r8)
1004350e:	46bd      	mov	sp, r7
10043510:	b004      	add	sp, #16
10043512:	bd80      	pop	{r7, pc}
10043514:	ffff0000 	.word	0xffff0000
10043518:	10042b59 	.word	0x10042b59
1004351c:	00008003 	.word	0x00008003
10043520:	ffffbfff 	.word	0xffffbfff
10043524:	100435c3 	.word	0x100435c3
10043528:	ffff7fff 	.word	0xffff7fff

1004352c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
1004352c:	b580      	push	{r7, lr}
1004352e:	b082      	sub	sp, #8
10043530:	af00      	add	r7, sp, #0
10043532:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
10043534:	687b      	ldr	r3, [r7, #4]
10043536:	2241      	movs	r2, #65	@ 0x41
10043538:	5c9b      	ldrb	r3, [r3, r2]
1004353a:	b2db      	uxtb	r3, r3
1004353c:	2b60      	cmp	r3, #96	@ 0x60
1004353e:	d10f      	bne.n	10043560 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
10043540:	687b      	ldr	r3, [r7, #4]
10043542:	2241      	movs	r2, #65	@ 0x41
10043544:	2120      	movs	r1, #32
10043546:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10043548:	687b      	ldr	r3, [r7, #4]
1004354a:	2200      	movs	r2, #0
1004354c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1004354e:	687b      	ldr	r3, [r7, #4]
10043550:	2240      	movs	r2, #64	@ 0x40
10043552:	2100      	movs	r1, #0
10043554:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
10043556:	687b      	ldr	r3, [r7, #4]
10043558:	0018      	movs	r0, r3
1004355a:	f7ff faf4 	bl	10042b46 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
1004355e:	e00a      	b.n	10043576 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
10043560:	687b      	ldr	r3, [r7, #4]
10043562:	2200      	movs	r2, #0
10043564:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10043566:	687b      	ldr	r3, [r7, #4]
10043568:	2240      	movs	r2, #64	@ 0x40
1004356a:	2100      	movs	r1, #0
1004356c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
1004356e:	687b      	ldr	r3, [r7, #4]
10043570:	0018      	movs	r0, r3
10043572:	f7ff fae0 	bl	10042b36 <HAL_I2C_ErrorCallback>
}
10043576:	46c0      	nop			@ (mov r8, r8)
10043578:	46bd      	mov	sp, r7
1004357a:	b002      	add	sp, #8
1004357c:	bd80      	pop	{r7, pc}

1004357e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
1004357e:	b580      	push	{r7, lr}
10043580:	b082      	sub	sp, #8
10043582:	af00      	add	r7, sp, #0
10043584:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
10043586:	687b      	ldr	r3, [r7, #4]
10043588:	681b      	ldr	r3, [r3, #0]
1004358a:	699b      	ldr	r3, [r3, #24]
1004358c:	2202      	movs	r2, #2
1004358e:	4013      	ands	r3, r2
10043590:	2b02      	cmp	r3, #2
10043592:	d103      	bne.n	1004359c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
10043594:	687b      	ldr	r3, [r7, #4]
10043596:	681b      	ldr	r3, [r3, #0]
10043598:	2200      	movs	r2, #0
1004359a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
1004359c:	687b      	ldr	r3, [r7, #4]
1004359e:	681b      	ldr	r3, [r3, #0]
100435a0:	699b      	ldr	r3, [r3, #24]
100435a2:	2201      	movs	r2, #1
100435a4:	4013      	ands	r3, r2
100435a6:	2b01      	cmp	r3, #1
100435a8:	d007      	beq.n	100435ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
100435aa:	687b      	ldr	r3, [r7, #4]
100435ac:	681b      	ldr	r3, [r3, #0]
100435ae:	699a      	ldr	r2, [r3, #24]
100435b0:	687b      	ldr	r3, [r7, #4]
100435b2:	681b      	ldr	r3, [r3, #0]
100435b4:	2101      	movs	r1, #1
100435b6:	430a      	orrs	r2, r1
100435b8:	619a      	str	r2, [r3, #24]
  }
}
100435ba:	46c0      	nop			@ (mov r8, r8)
100435bc:	46bd      	mov	sp, r7
100435be:	b002      	add	sp, #8
100435c0:	bd80      	pop	{r7, pc}

100435c2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
100435c2:	b580      	push	{r7, lr}
100435c4:	b084      	sub	sp, #16
100435c6:	af00      	add	r7, sp, #0
100435c8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
100435ca:	687b      	ldr	r3, [r7, #4]
100435cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100435ce:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
100435d0:	68fb      	ldr	r3, [r7, #12]
100435d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100435d4:	2b00      	cmp	r3, #0
100435d6:	d003      	beq.n	100435e0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
100435d8:	68fb      	ldr	r3, [r7, #12]
100435da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100435dc:	2200      	movs	r2, #0
100435de:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
100435e0:	68fb      	ldr	r3, [r7, #12]
100435e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100435e4:	2b00      	cmp	r3, #0
100435e6:	d003      	beq.n	100435f0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
100435e8:	68fb      	ldr	r3, [r7, #12]
100435ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100435ec:	2200      	movs	r2, #0
100435ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
100435f0:	68fb      	ldr	r3, [r7, #12]
100435f2:	0018      	movs	r0, r3
100435f4:	f7ff ff9a 	bl	1004352c <I2C_TreatErrorCallback>
}
100435f8:	46c0      	nop			@ (mov r8, r8)
100435fa:	46bd      	mov	sp, r7
100435fc:	b004      	add	sp, #16
100435fe:	bd80      	pop	{r7, pc}

10043600 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
10043600:	b580      	push	{r7, lr}
10043602:	b084      	sub	sp, #16
10043604:	af00      	add	r7, sp, #0
10043606:	6078      	str	r0, [r7, #4]
10043608:	000a      	movs	r2, r1
1004360a:	1cbb      	adds	r3, r7, #2
1004360c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
1004360e:	2300      	movs	r3, #0
10043610:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
10043612:	1cbb      	adds	r3, r7, #2
10043614:	881b      	ldrh	r3, [r3, #0]
10043616:	2201      	movs	r2, #1
10043618:	4013      	ands	r3, r2
1004361a:	d010      	beq.n	1004363e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
1004361c:	68fb      	ldr	r3, [r7, #12]
1004361e:	2242      	movs	r2, #66	@ 0x42
10043620:	4313      	orrs	r3, r2
10043622:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
10043624:	687b      	ldr	r3, [r7, #4]
10043626:	2241      	movs	r2, #65	@ 0x41
10043628:	5c9b      	ldrb	r3, [r3, r2]
1004362a:	b2db      	uxtb	r3, r3
1004362c:	001a      	movs	r2, r3
1004362e:	2328      	movs	r3, #40	@ 0x28
10043630:	4013      	ands	r3, r2
10043632:	2b28      	cmp	r3, #40	@ 0x28
10043634:	d003      	beq.n	1004363e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
10043636:	68fb      	ldr	r3, [r7, #12]
10043638:	22b0      	movs	r2, #176	@ 0xb0
1004363a:	4313      	orrs	r3, r2
1004363c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
1004363e:	1cbb      	adds	r3, r7, #2
10043640:	881b      	ldrh	r3, [r3, #0]
10043642:	2202      	movs	r2, #2
10043644:	4013      	ands	r3, r2
10043646:	d010      	beq.n	1004366a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
10043648:	68fb      	ldr	r3, [r7, #12]
1004364a:	2244      	movs	r2, #68	@ 0x44
1004364c:	4313      	orrs	r3, r2
1004364e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
10043650:	687b      	ldr	r3, [r7, #4]
10043652:	2241      	movs	r2, #65	@ 0x41
10043654:	5c9b      	ldrb	r3, [r3, r2]
10043656:	b2db      	uxtb	r3, r3
10043658:	001a      	movs	r2, r3
1004365a:	2328      	movs	r3, #40	@ 0x28
1004365c:	4013      	ands	r3, r2
1004365e:	2b28      	cmp	r3, #40	@ 0x28
10043660:	d003      	beq.n	1004366a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
10043662:	68fb      	ldr	r3, [r7, #12]
10043664:	22b0      	movs	r2, #176	@ 0xb0
10043666:	4313      	orrs	r3, r2
10043668:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
1004366a:	1cbb      	adds	r3, r7, #2
1004366c:	2200      	movs	r2, #0
1004366e:	5e9b      	ldrsh	r3, [r3, r2]
10043670:	2b00      	cmp	r3, #0
10043672:	da03      	bge.n	1004367c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
10043674:	68fb      	ldr	r3, [r7, #12]
10043676:	22b8      	movs	r2, #184	@ 0xb8
10043678:	4313      	orrs	r3, r2
1004367a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
1004367c:	1cbb      	adds	r3, r7, #2
1004367e:	881b      	ldrh	r3, [r3, #0]
10043680:	2b10      	cmp	r3, #16
10043682:	d103      	bne.n	1004368c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
10043684:	68fb      	ldr	r3, [r7, #12]
10043686:	2290      	movs	r2, #144	@ 0x90
10043688:	4313      	orrs	r3, r2
1004368a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
1004368c:	1cbb      	adds	r3, r7, #2
1004368e:	881b      	ldrh	r3, [r3, #0]
10043690:	2b20      	cmp	r3, #32
10043692:	d103      	bne.n	1004369c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
10043694:	68fb      	ldr	r3, [r7, #12]
10043696:	2220      	movs	r2, #32
10043698:	4313      	orrs	r3, r2
1004369a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
1004369c:	1cbb      	adds	r3, r7, #2
1004369e:	881b      	ldrh	r3, [r3, #0]
100436a0:	2b40      	cmp	r3, #64	@ 0x40
100436a2:	d103      	bne.n	100436ac <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
100436a4:	68fb      	ldr	r3, [r7, #12]
100436a6:	2240      	movs	r2, #64	@ 0x40
100436a8:	4313      	orrs	r3, r2
100436aa:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
100436ac:	687b      	ldr	r3, [r7, #4]
100436ae:	681b      	ldr	r3, [r3, #0]
100436b0:	681a      	ldr	r2, [r3, #0]
100436b2:	68fb      	ldr	r3, [r7, #12]
100436b4:	43d9      	mvns	r1, r3
100436b6:	687b      	ldr	r3, [r7, #4]
100436b8:	681b      	ldr	r3, [r3, #0]
100436ba:	400a      	ands	r2, r1
100436bc:	601a      	str	r2, [r3, #0]
}
100436be:	46c0      	nop			@ (mov r8, r8)
100436c0:	46bd      	mov	sp, r7
100436c2:	b004      	add	sp, #16
100436c4:	bd80      	pop	{r7, pc}

100436c6 <LL_RADIO_TIMER_DisableTimer1>:
  * @rmtoll TIMEOUTDESTREG   DESTINATION   LL_RADIO_TIMER_DisableTimer1
  * @param  BLUEx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_DisableTimer1(BLUE_TypeDef *BLUEx)
{
100436c6:	b580      	push	{r7, lr}
100436c8:	b082      	sub	sp, #8
100436ca:	af00      	add	r7, sp, #0
100436cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
100436ce:	687b      	ldr	r3, [r7, #4]
100436d0:	68db      	ldr	r3, [r3, #12]
100436d2:	2203      	movs	r2, #3
100436d4:	4393      	bics	r3, r2
100436d6:	001a      	movs	r2, r3
100436d8:	687b      	ldr	r3, [r7, #4]
100436da:	60da      	str	r2, [r3, #12]
}
100436dc:	46c0      	nop			@ (mov r8, r8)
100436de:	46bd      	mov	sp, r7
100436e0:	b002      	add	sp, #8
100436e2:	bd80      	pop	{r7, pc}

100436e4 <LL_RADIO_TIMER_DisableTimer2>:
  * @rmtoll TIMEOUTDESTREG   DESTINATION   LL_RADIO_TIMER_DisableTimer2
  * @param  BLUEx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_DisableTimer2(BLUE_TypeDef *BLUEx)
{
100436e4:	b580      	push	{r7, lr}
100436e6:	b082      	sub	sp, #8
100436e8:	af00      	add	r7, sp, #0
100436ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
100436ec:	687b      	ldr	r3, [r7, #4]
100436ee:	68db      	ldr	r3, [r3, #12]
100436f0:	2203      	movs	r2, #3
100436f2:	4393      	bics	r3, r2
100436f4:	001a      	movs	r2, r3
100436f6:	687b      	ldr	r3, [r7, #4]
100436f8:	60da      	str	r2, [r3, #12]
}
100436fa:	46c0      	nop			@ (mov r8, r8)
100436fc:	46bd      	mov	sp, r7
100436fe:	b002      	add	sp, #8
10043700:	bd80      	pop	{r7, pc}
	...

10043704 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    BLE_WAKEUP_EN   LL_RADIO_TIMER_DisableBLEWakeupTimer
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP_TypeDef *WAKEUPx)
{
10043704:	b580      	push	{r7, lr}
10043706:	b082      	sub	sp, #8
10043708:	af00      	add	r7, sp, #0
1004370a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004370c:	687b      	ldr	r3, [r7, #4]
1004370e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10043710:	4a03      	ldr	r2, [pc, #12]	@ (10043720 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
10043712:	401a      	ands	r2, r3
10043714:	687b      	ldr	r3, [r7, #4]
10043716:	629a      	str	r2, [r3, #40]	@ 0x28
}
10043718:	46c0      	nop			@ (mov r8, r8)
1004371a:	46bd      	mov	sp, r7
1004371c:	b002      	add	sp, #8
1004371e:	bd80      	pop	{r7, pc}
10043720:	bfffffff 	.word	0xbfffffff

10043724 <HAL_RADIO_ReadRSSI>:
/**
  * @brief  Read RSSI
  * @retval int8_t: RSSI in dBm
  */
int8_t HAL_RADIO_ReadRSSI(void)
{
10043724:	b580      	push	{r7, lr}
10043726:	b086      	sub	sp, #24
10043728:	af00      	add	r7, sp, #0
  int32_t rssi_dbm;
  uint32_t rssi0 = RRM->RSSI0_DIG_OUT;
1004372a:	4a24      	ldr	r2, [pc, #144]	@ (100437bc <HAL_RADIO_ReadRSSI+0x98>)
1004372c:	23a9      	movs	r3, #169	@ 0xa9
1004372e:	009b      	lsls	r3, r3, #2
10043730:	58d3      	ldr	r3, [r2, r3]
10043732:	60fb      	str	r3, [r7, #12]
  uint32_t rssi1 = RRM->RSSI1_DIG_OUT;
10043734:	4a21      	ldr	r2, [pc, #132]	@ (100437bc <HAL_RADIO_ReadRSSI+0x98>)
10043736:	23aa      	movs	r3, #170	@ 0xaa
10043738:	009b      	lsls	r3, r3, #2
1004373a:	58d3      	ldr	r3, [r2, r3]
1004373c:	60bb      	str	r3, [r7, #8]

  uint32_t rssi_int16 = ((rssi1 & 0xFF) << 8) | (rssi0 & 0xFF);
1004373e:	68bb      	ldr	r3, [r7, #8]
10043740:	021b      	lsls	r3, r3, #8
10043742:	041b      	lsls	r3, r3, #16
10043744:	0c1a      	lsrs	r2, r3, #16
10043746:	68fb      	ldr	r3, [r7, #12]
10043748:	21ff      	movs	r1, #255	@ 0xff
1004374a:	400b      	ands	r3, r1
1004374c:	4313      	orrs	r3, r2
1004374e:	613b      	str	r3, [r7, #16]
  uint32_t reg_agc = RRM->AGC_DIG_OUT;
10043750:	4a1a      	ldr	r2, [pc, #104]	@ (100437bc <HAL_RADIO_ReadRSSI+0x98>)
10043752:	23ab      	movs	r3, #171	@ 0xab
10043754:	009b      	lsls	r3, r3, #2
10043756:	58d3      	ldr	r3, [r2, r3]
10043758:	607b      	str	r3, [r7, #4]

  if ((rssi_int16 == 0U) || (reg_agc > 0xbU))
1004375a:	693b      	ldr	r3, [r7, #16]
1004375c:	2b00      	cmp	r3, #0
1004375e:	d002      	beq.n	10043766 <HAL_RADIO_ReadRSSI+0x42>
10043760:	687b      	ldr	r3, [r7, #4]
10043762:	2b0b      	cmp	r3, #11
10043764:	d902      	bls.n	1004376c <HAL_RADIO_ReadRSSI+0x48>
  {
    rssi_dbm = 127 ;
10043766:	237f      	movs	r3, #127	@ 0x7f
10043768:	617b      	str	r3, [r7, #20]
1004376a:	e020      	b.n	100437ae <HAL_RADIO_ReadRSSI+0x8a>
  }
  else
  {
    rssi_dbm = (int32_t)reg_agc * 6 - RSSI_OFFSET;//127 ;
1004376c:	687a      	ldr	r2, [r7, #4]
1004376e:	0013      	movs	r3, r2
10043770:	005b      	lsls	r3, r3, #1
10043772:	189b      	adds	r3, r3, r2
10043774:	005b      	lsls	r3, r3, #1
10043776:	3b77      	subs	r3, #119	@ 0x77
10043778:	617b      	str	r3, [r7, #20]
    while (rssi_int16 > 30U)
1004377a:	e005      	b.n	10043788 <HAL_RADIO_ReadRSSI+0x64>
    {
      rssi_dbm = rssi_dbm + 6 ;
1004377c:	697b      	ldr	r3, [r7, #20]
1004377e:	3306      	adds	r3, #6
10043780:	617b      	str	r3, [r7, #20]
      rssi_int16 = (rssi_int16 >> 1) ;
10043782:	693b      	ldr	r3, [r7, #16]
10043784:	085b      	lsrs	r3, r3, #1
10043786:	613b      	str	r3, [r7, #16]
    while (rssi_int16 > 30U)
10043788:	693b      	ldr	r3, [r7, #16]
1004378a:	2b1e      	cmp	r3, #30
1004378c:	d8f6      	bhi.n	1004377c <HAL_RADIO_ReadRSSI+0x58>
    }
    rssi_dbm = rssi_dbm + (int32_t)(uint32_t)((417U * rssi_int16 + 18080U) >> 10);
1004378e:	693a      	ldr	r2, [r7, #16]
10043790:	0013      	movs	r3, r2
10043792:	005b      	lsls	r3, r3, #1
10043794:	189b      	adds	r3, r3, r2
10043796:	009b      	lsls	r3, r3, #2
10043798:	189b      	adds	r3, r3, r2
1004379a:	015b      	lsls	r3, r3, #5
1004379c:	189b      	adds	r3, r3, r2
1004379e:	4a08      	ldr	r2, [pc, #32]	@ (100437c0 <HAL_RADIO_ReadRSSI+0x9c>)
100437a0:	4694      	mov	ip, r2
100437a2:	4463      	add	r3, ip
100437a4:	0a9b      	lsrs	r3, r3, #10
100437a6:	001a      	movs	r2, r3
100437a8:	697b      	ldr	r3, [r7, #20]
100437aa:	189b      	adds	r3, r3, r2
100437ac:	617b      	str	r3, [r7, #20]
  }
  return (int8_t)rssi_dbm;
100437ae:	697b      	ldr	r3, [r7, #20]
100437b0:	b25b      	sxtb	r3, r3
}
100437b2:	0018      	movs	r0, r3
100437b4:	46bd      	mov	sp, r7
100437b6:	b006      	add	sp, #24
100437b8:	bd80      	pop	{r7, pc}
100437ba:	46c0      	nop			@ (mov r8, r8)
100437bc:	60001400 	.word	0x60001400
100437c0:	000046a0 	.word	0x000046a0

100437c4 <HAL_RADIO_ActionPacketIsr>:
  * @brief  Radio ISR.
  *         Besides, next packet is scheduled here.
  * @retval None
  */
static void HAL_RADIO_ActionPacketIsr(uint32_t int_flags)
{
100437c4:	b590      	push	{r4, r7, lr}
100437c6:	b089      	sub	sp, #36	@ 0x24
100437c8:	af00      	add	r7, sp, #0
100437ca:	6078      	str	r0, [r7, #4]
  if ((int_flags & BLUE_INTERRUPT1REG_DONE) != 0)
100437cc:	687a      	ldr	r2, [r7, #4]
100437ce:	2380      	movs	r3, #128	@ 0x80
100437d0:	049b      	lsls	r3, r3, #18
100437d2:	4013      	ands	r3, r2
100437d4:	d100      	bne.n	100437d8 <HAL_RADIO_ActionPacketIsr+0x14>
100437d6:	e0fb      	b.n	100439d0 <HAL_RADIO_ActionPacketIsr+0x20c>
    BlueTransStruct *p;
    uint32_t time;

    /* Copy status in order for callback to access it. */
    globalParameters.current_action_packet->status = int_flags | \
                                                     (BLUE->STATUSREG & BLUE_STATUSREG_PREVTRANSMIT_Msk);
100437d8:	23c0      	movs	r3, #192	@ 0xc0
100437da:	05db      	lsls	r3, r3, #23
100437dc:	69db      	ldr	r3, [r3, #28]
100437de:	2240      	movs	r2, #64	@ 0x40
100437e0:	4013      	ands	r3, r2
100437e2:	0019      	movs	r1, r3
    globalParameters.current_action_packet->status = int_flags | \
100437e4:	4b7c      	ldr	r3, [pc, #496]	@ (100439d8 <HAL_RADIO_ActionPacketIsr+0x214>)
100437e6:	689b      	ldr	r3, [r3, #8]
100437e8:	687a      	ldr	r2, [r7, #4]
100437ea:	430a      	orrs	r2, r1
100437ec:	60da      	str	r2, [r3, #12]

    if ((globalParameters.current_action_packet->condRoutine(globalParameters.current_action_packet)) == TRUE)
100437ee:	4b7a      	ldr	r3, [pc, #488]	@ (100439d8 <HAL_RADIO_ActionPacketIsr+0x214>)
100437f0:	689b      	ldr	r3, [r3, #8]
100437f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
100437f4:	4b78      	ldr	r3, [pc, #480]	@ (100439d8 <HAL_RADIO_ActionPacketIsr+0x214>)
100437f6:	689b      	ldr	r3, [r3, #8]
100437f8:	0018      	movs	r0, r3
100437fa:	4790      	blx	r2
100437fc:	0003      	movs	r3, r0
100437fe:	2b01      	cmp	r3, #1
10043800:	d104      	bne.n	1004380c <HAL_RADIO_ActionPacketIsr+0x48>
    {
      next = globalParameters.current_action_packet->next_true;
10043802:	4b75      	ldr	r3, [pc, #468]	@ (100439d8 <HAL_RADIO_ActionPacketIsr+0x214>)
10043804:	689b      	ldr	r3, [r3, #8]
10043806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10043808:	61fb      	str	r3, [r7, #28]
1004380a:	e003      	b.n	10043814 <HAL_RADIO_ActionPacketIsr+0x50>
    }
    else
    {
      next = globalParameters.current_action_packet->next_false;
1004380c:	4b72      	ldr	r3, [pc, #456]	@ (100439d8 <HAL_RADIO_ActionPacketIsr+0x214>)
1004380e:	689b      	ldr	r3, [r3, #8]
10043810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10043812:	61fb      	str	r3, [r7, #28]
    }
    /*The radio event is started. So here a check on the next packet of the event is made*/
    if (next == NULL_0)
10043814:	69fb      	ldr	r3, [r7, #28]
10043816:	2b00      	cmp	r3, #0
10043818:	d116      	bne.n	10043848 <HAL_RADIO_ActionPacketIsr+0x84>
    {
      /* timer2 off */
      LL_RADIO_TIMER_DisableTimer1(BLUE);
1004381a:	23c0      	movs	r3, #192	@ 0xc0
1004381c:	05db      	lsls	r3, r3, #23
1004381e:	0018      	movs	r0, r3
10043820:	f7ff ff51 	bl	100436c6 <LL_RADIO_TIMER_DisableTimer1>
      LL_RADIO_TIMER_DisableTimer2(BLUE);
10043824:	23c0      	movs	r3, #192	@ 0xc0
10043826:	05db      	lsls	r3, r3, #23
10043828:	0018      	movs	r0, r3
1004382a:	f7ff ff5b 	bl	100436e4 <LL_RADIO_TIMER_DisableTimer2>
      LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004382e:	4b6b      	ldr	r3, [pc, #428]	@ (100439dc <HAL_RADIO_ActionPacketIsr+0x218>)
10043830:	0018      	movs	r0, r3
10043832:	f7ff ff67 	bl	10043704 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
      MODIFY_REG(BLUEGLOB->BYTE4, GLOBAL_BYTE4_ACTIVE_Msk, BLUE_IDLE_0);
10043836:	4b6a      	ldr	r3, [pc, #424]	@ (100439e0 <HAL_RADIO_ActionPacketIsr+0x21c>)
10043838:	791b      	ldrb	r3, [r3, #4]
1004383a:	b2db      	uxtb	r3, r3
1004383c:	4a68      	ldr	r2, [pc, #416]	@ (100439e0 <HAL_RADIO_ActionPacketIsr+0x21c>)
1004383e:	217f      	movs	r1, #127	@ 0x7f
10043840:	400b      	ands	r3, r1
10043842:	b2db      	uxtb	r3, r3
10043844:	7113      	strb	r3, [r2, #4]
10043846:	e08f      	b.n	10043968 <HAL_RADIO_ActionPacketIsr+0x1a4>
    }
    else
    {
      BLUEGLOB->BYTE4 = (next->StateMachineNo | GLOBAL_BYTE4_ACTIVE_Msk);
10043848:	69fb      	ldr	r3, [r7, #28]
1004384a:	781b      	ldrb	r3, [r3, #0]
1004384c:	4964      	ldr	r1, [pc, #400]	@ (100439e0 <HAL_RADIO_ActionPacketIsr+0x21c>)
1004384e:	2280      	movs	r2, #128	@ 0x80
10043850:	4252      	negs	r2, r2
10043852:	4313      	orrs	r3, r2
10043854:	b2db      	uxtb	r3, r3
10043856:	710b      	strb	r3, [r1, #4]
      p = &next->trans_packet;
10043858:	69fb      	ldr	r3, [r7, #28]
1004385a:	3318      	adds	r3, #24
1004385c:	61bb      	str	r3, [r7, #24]
      MODIFY_REG((bluedata + next->StateMachineNo)->BYTE0, STATEMACH_BYTE0_TXMODE_Msk,
1004385e:	69fb      	ldr	r3, [r7, #28]
10043860:	781b      	ldrb	r3, [r3, #0]
10043862:	001a      	movs	r2, r3
10043864:	235c      	movs	r3, #92	@ 0x5c
10043866:	4353      	muls	r3, r2
10043868:	4a5e      	ldr	r2, [pc, #376]	@ (100439e4 <HAL_RADIO_ActionPacketIsr+0x220>)
1004386a:	4694      	mov	ip, r2
1004386c:	4463      	add	r3, ip
1004386e:	781b      	ldrb	r3, [r3, #0]
10043870:	b2db      	uxtb	r3, r3
10043872:	b25b      	sxtb	r3, r3
10043874:	227f      	movs	r2, #127	@ 0x7f
10043876:	4013      	ands	r3, r2
10043878:	b25a      	sxtb	r2, r3
1004387a:	69fb      	ldr	r3, [r7, #28]
1004387c:	2138      	movs	r1, #56	@ 0x38
1004387e:	5c5b      	ldrb	r3, [r3, r1]
10043880:	b25b      	sxtb	r3, r3
10043882:	4313      	orrs	r3, r2
10043884:	b25a      	sxtb	r2, r3
10043886:	69fb      	ldr	r3, [r7, #28]
10043888:	781b      	ldrb	r3, [r3, #0]
1004388a:	0019      	movs	r1, r3
1004388c:	235c      	movs	r3, #92	@ 0x5c
1004388e:	434b      	muls	r3, r1
10043890:	4954      	ldr	r1, [pc, #336]	@ (100439e4 <HAL_RADIO_ActionPacketIsr+0x220>)
10043892:	468c      	mov	ip, r1
10043894:	4463      	add	r3, ip
10043896:	b2d2      	uxtb	r2, r2
10043898:	701a      	strb	r2, [r3, #0]
                 next->trans_config);/* Transmission or reception*/
      (bluedata + next->StateMachineNo)->TXPOINT = BLUE_STRUCT_PTR_CAST(p);
1004389a:	69fb      	ldr	r3, [r7, #28]
1004389c:	781b      	ldrb	r3, [r3, #0]
1004389e:	001a      	movs	r2, r3
100438a0:	235c      	movs	r3, #92	@ 0x5c
100438a2:	4353      	muls	r3, r2
100438a4:	4a4f      	ldr	r2, [pc, #316]	@ (100439e4 <HAL_RADIO_ActionPacketIsr+0x220>)
100438a6:	4694      	mov	ip, r2
100438a8:	4463      	add	r3, ip
100438aa:	69ba      	ldr	r2, [r7, #24]
100438ac:	605a      	str	r2, [r3, #4]
      (bluedata + next->StateMachineNo)->RCVPOINT = BLUE_STRUCT_PTR_CAST(p);
100438ae:	69fb      	ldr	r3, [r7, #28]
100438b0:	781b      	ldrb	r3, [r3, #0]
100438b2:	001a      	movs	r2, r3
100438b4:	235c      	movs	r3, #92	@ 0x5c
100438b6:	4353      	muls	r3, r2
100438b8:	4a4a      	ldr	r2, [pc, #296]	@ (100439e4 <HAL_RADIO_ActionPacketIsr+0x220>)
100438ba:	4694      	mov	ip, r2
100438bc:	4463      	add	r3, ip
100438be:	69ba      	ldr	r2, [r7, #24]
100438c0:	609a      	str	r2, [r3, #8]
      (bluedata + next->StateMachineNo)->MAXRECEIVEDLENGTH = next->MaxReceiveLength;
100438c2:	69fb      	ldr	r3, [r7, #28]
100438c4:	781b      	ldrb	r3, [r3, #0]
100438c6:	001a      	movs	r2, r3
100438c8:	235c      	movs	r3, #92	@ 0x5c
100438ca:	4353      	muls	r3, r2
100438cc:	4a45      	ldr	r2, [pc, #276]	@ (100439e4 <HAL_RADIO_ActionPacketIsr+0x220>)
100438ce:	4694      	mov	ip, r2
100438d0:	4463      	add	r3, ip
100438d2:	69fa      	ldr	r2, [r7, #28]
100438d4:	7891      	ldrb	r1, [r2, #2]
100438d6:	222b      	movs	r2, #43	@ 0x2b
100438d8:	5499      	strb	r1, [r3, r2]

      /* Packet will execute on time specified by WakeupTime */
      if ((next->ActionTag & TIMER_WAKEUP) != 0)
100438da:	69fb      	ldr	r3, [r7, #28]
100438dc:	785b      	ldrb	r3, [r3, #1]
100438de:	001a      	movs	r2, r3
100438e0:	2304      	movs	r3, #4
100438e2:	4013      	ands	r3, r2
100438e4:	d040      	beq.n	10043968 <HAL_RADIO_ActionPacketIsr+0x1a4>
      {
        /* timer1/2 off */
        LL_RADIO_TIMER_DisableTimer1(BLUE);
100438e6:	23c0      	movs	r3, #192	@ 0xc0
100438e8:	05db      	lsls	r3, r3, #23
100438ea:	0018      	movs	r0, r3
100438ec:	f7ff feeb 	bl	100436c6 <LL_RADIO_TIMER_DisableTimer1>
        LL_RADIO_TIMER_DisableTimer2(BLUE);
100438f0:	23c0      	movs	r3, #192	@ 0xc0
100438f2:	05db      	lsls	r3, r3, #23
100438f4:	0018      	movs	r0, r3
100438f6:	f7ff fef5 	bl	100436e4 <LL_RADIO_TIMER_DisableTimer2>

        /* program timer at next->wakeuptime */
        if ((next->ActionTag & RELATIVE) != 0)
100438fa:	69fb      	ldr	r3, [r7, #28]
100438fc:	785b      	ldrb	r3, [r3, #1]
100438fe:	001a      	movs	r2, r3
10043900:	2320      	movs	r3, #32
10043902:	4013      	ands	r3, r2
10043904:	d01e      	beq.n	10043944 <HAL_RADIO_ActionPacketIsr+0x180>
        {
          time = HAL_RADIO_TIMER_GetCurrentSysTime() + HAL_RADIO_TIMER_UsToSystime(next->WakeupTime);
10043906:	f000 fa2b 	bl	10043d60 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004390a:	0002      	movs	r2, r0
1004390c:	000b      	movs	r3, r1
1004390e:	0014      	movs	r4, r2
10043910:	69fb      	ldr	r3, [r7, #28]
10043912:	685b      	ldr	r3, [r3, #4]
10043914:	0018      	movs	r0, r3
10043916:	f000 fa15 	bl	10043d44 <HAL_RADIO_TIMER_UsToSystime>
1004391a:	0003      	movs	r3, r0
1004391c:	18e3      	adds	r3, r4, r3
1004391e:	617b      	str	r3, [r7, #20]
          HAL_RADIO_TIMER_SetRadioTimerValue(time, (next->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (next->ActionTag & PLL_TRIG));
10043920:	69fb      	ldr	r3, [r7, #28]
10043922:	2238      	movs	r2, #56	@ 0x38
10043924:	5c9b      	ldrb	r3, [r3, r2]
10043926:	3b80      	subs	r3, #128	@ 0x80
10043928:	425a      	negs	r2, r3
1004392a:	4153      	adcs	r3, r2
1004392c:	b2db      	uxtb	r3, r3
1004392e:	0019      	movs	r1, r3
10043930:	69fb      	ldr	r3, [r7, #28]
10043932:	785b      	ldrb	r3, [r3, #1]
10043934:	2201      	movs	r2, #1
10043936:	4013      	ands	r3, r2
10043938:	b2da      	uxtb	r2, r3
1004393a:	697b      	ldr	r3, [r7, #20]
1004393c:	0018      	movs	r0, r3
1004393e:	f000 f99f 	bl	10043c80 <HAL_RADIO_TIMER_SetRadioTimerValue>
10043942:	e011      	b.n	10043968 <HAL_RADIO_ActionPacketIsr+0x1a4>
        }
        else
        {
          HAL_RADIO_TIMER_SetRadioTimerValue(next->WakeupTime, (next->trans_config == STATEMACH_BYTE0_TXMODE_Msk), (next->ActionTag & PLL_TRIG));
10043944:	69fb      	ldr	r3, [r7, #28]
10043946:	6858      	ldr	r0, [r3, #4]
10043948:	69fb      	ldr	r3, [r7, #28]
1004394a:	2238      	movs	r2, #56	@ 0x38
1004394c:	5c9b      	ldrb	r3, [r3, r2]
1004394e:	3b80      	subs	r3, #128	@ 0x80
10043950:	425a      	negs	r2, r3
10043952:	4153      	adcs	r3, r2
10043954:	b2db      	uxtb	r3, r3
10043956:	0019      	movs	r1, r3
10043958:	69fb      	ldr	r3, [r7, #28]
1004395a:	785b      	ldrb	r3, [r3, #1]
1004395c:	2201      	movs	r2, #1
1004395e:	4013      	ands	r3, r2
10043960:	b2db      	uxtb	r3, r3
10043962:	001a      	movs	r2, r3
10043964:	f000 f98c 	bl	10043c80 <HAL_RADIO_TIMER_SetRadioTimerValue>
        /* back to back */
      }
    }

    /* Accept the packet even with CRC Error */
    if (((int_flags & BLUE_INTERRUPT1REG_RCVOK) != 0) || ((int_flags & BLUE_INTERRUPT1REG_RCVCRCERR) != 0))
10043968:	687b      	ldr	r3, [r7, #4]
1004396a:	2b00      	cmp	r3, #0
1004396c:	db04      	blt.n	10043978 <HAL_RADIO_ActionPacketIsr+0x1b4>
1004396e:	687a      	ldr	r2, [r7, #4]
10043970:	2380      	movs	r3, #128	@ 0x80
10043972:	05db      	lsls	r3, r3, #23
10043974:	4013      	ands	r3, r2
10043976:	d012      	beq.n	1004399e <HAL_RADIO_ActionPacketIsr+0x1da>
    {

      uint64_t current_system_time;
      /* read RSSI */
      globalParameters.current_action_packet->rssi =  HAL_RADIO_ReadRSSI();
10043978:	f7ff fed4 	bl	10043724 <HAL_RADIO_ReadRSSI>
1004397c:	0003      	movs	r3, r0
1004397e:	001a      	movs	r2, r3
10043980:	4b15      	ldr	r3, [pc, #84]	@ (100439d8 <HAL_RADIO_ActionPacketIsr+0x214>)
10043982:	689b      	ldr	r3, [r3, #8]
10043984:	615a      	str	r2, [r3, #20]

      /* bluedata->config = bluedata->config ^ 0x80 ;  toggle NESN bit
      bluedata->config = bluedata->config & 0x7F ;  //reset NESN bit */

      /* read time stamp */
      globalParameters.current_action_packet->timestamp_receive = HAL_RADIO_TIMER_GetAnchorPoint(&current_system_time);
10043986:	2308      	movs	r3, #8
10043988:	18fb      	adds	r3, r7, r3
1004398a:	0018      	movs	r0, r3
1004398c:	f000 f964 	bl	10043c58 <HAL_RADIO_TIMER_GetAnchorPoint>
10043990:	0002      	movs	r2, r0
10043992:	000b      	movs	r3, r1
10043994:	4910      	ldr	r1, [pc, #64]	@ (100439d8 <HAL_RADIO_ActionPacketIsr+0x214>)
10043996:	6889      	ldr	r1, [r1, #8]
10043998:	0013      	movs	r3, r2
1004399a:	610b      	str	r3, [r1, #16]
    {
1004399c:	e00b      	b.n	100439b6 <HAL_RADIO_ActionPacketIsr+0x1f2>
    }
    else if ((int_flags & BLUE_INTERRUPT1REG_RCVTIMEOUT) != 0)
1004399e:	687a      	ldr	r2, [r7, #4]
100439a0:	2380      	movs	r3, #128	@ 0x80
100439a2:	04db      	lsls	r3, r3, #19
100439a4:	4013      	ands	r3, r2
100439a6:	d006      	beq.n	100439b6 <HAL_RADIO_ActionPacketIsr+0x1f2>
    {
      /* read RSSI even if a timeout happens */
      globalParameters.current_action_packet->rssi =  HAL_RADIO_ReadRSSI();
100439a8:	f7ff febc 	bl	10043724 <HAL_RADIO_ReadRSSI>
100439ac:	0003      	movs	r3, r0
100439ae:	001a      	movs	r2, r3
100439b0:	4b09      	ldr	r3, [pc, #36]	@ (100439d8 <HAL_RADIO_ActionPacketIsr+0x214>)
100439b2:	689b      	ldr	r3, [r3, #8]
100439b4:	615a      	str	r2, [r3, #20]
    }

    actionPacketBackup = globalParameters.current_action_packet;
100439b6:	4b08      	ldr	r3, [pc, #32]	@ (100439d8 <HAL_RADIO_ActionPacketIsr+0x214>)
100439b8:	689b      	ldr	r3, [r3, #8]
100439ba:	613b      	str	r3, [r7, #16]
    globalParameters.current_action_packet = next;
100439bc:	4b06      	ldr	r3, [pc, #24]	@ (100439d8 <HAL_RADIO_ActionPacketIsr+0x214>)
100439be:	69fa      	ldr	r2, [r7, #28]
100439c0:	609a      	str	r2, [r3, #8]
    actionPacketBackup->dataRoutine(actionPacketBackup, next);
100439c2:	693b      	ldr	r3, [r7, #16]
100439c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100439c6:	69f9      	ldr	r1, [r7, #28]
100439c8:	693a      	ldr	r2, [r7, #16]
100439ca:	0010      	movs	r0, r2
100439cc:	4798      	blx	r3
  }

  return ;
100439ce:	46c0      	nop			@ (mov r8, r8)
100439d0:	46c0      	nop			@ (mov r8, r8)
}
100439d2:	46bd      	mov	sp, r7
100439d4:	b009      	add	sp, #36	@ 0x24
100439d6:	bd90      	pop	{r4, r7, pc}
100439d8:	200007f8 	.word	0x200007f8
100439dc:	60001800 	.word	0x60001800
100439e0:	200000c0 	.word	0x200000c0
100439e4:	200000dc 	.word	0x200000dc

100439e8 <HAL_RADIO_TxRxCallback>:
}

#endif /* USE_RADIO_PROPRIETARY_DRIVER */

__weak void HAL_RADIO_TxRxCallback(uint32_t flags)
{
100439e8:	b580      	push	{r7, lr}
100439ea:	b082      	sub	sp, #8
100439ec:	af00      	add	r7, sp, #0
100439ee:	6078      	str	r0, [r7, #4]
}
100439f0:	46c0      	nop			@ (mov r8, r8)
100439f2:	46bd      	mov	sp, r7
100439f4:	b002      	add	sp, #8
100439f6:	bd80      	pop	{r7, pc}

100439f8 <HAL_RADIO_TxRxSeqCallback>:


__weak void HAL_RADIO_TxRxSeqCallback(void)
{
100439f8:	b580      	push	{r7, lr}
100439fa:	af00      	add	r7, sp, #0
}
100439fc:	46c0      	nop			@ (mov r8, r8)
100439fe:	46bd      	mov	sp, r7
10043a00:	bd80      	pop	{r7, pc}

10043a02 <HAL_RADIO_TXRX_IRQHandler>:

void HAL_RADIO_TXRX_IRQHandler(void)
{
10043a02:	b580      	push	{r7, lr}
10043a04:	b082      	sub	sp, #8
10043a06:	af00      	add	r7, sp, #0
  uint32_t blue_status = BLUE->STATUSREG;
10043a08:	23c0      	movs	r3, #192	@ 0xc0
10043a0a:	05db      	lsls	r3, r3, #23
10043a0c:	69db      	ldr	r3, [r3, #28]
10043a0e:	607b      	str	r3, [r7, #4]
  uint32_t blue_interrupt = BLUE->INTERRUPT1REG;
10043a10:	23c0      	movs	r3, #192	@ 0xc0
10043a12:	05db      	lsls	r3, r3, #23
10043a14:	685b      	ldr	r3, [r3, #4]
10043a16:	603b      	str	r3, [r7, #0]

  /** clear all pending interrupts */
  BLUE->INTERRUPT1REG = blue_interrupt;
10043a18:	23c0      	movs	r3, #192	@ 0xc0
10043a1a:	05db      	lsls	r3, r3, #23
10043a1c:	683a      	ldr	r2, [r7, #0]
10043a1e:	605a      	str	r2, [r3, #4]

  HAL_RADIO_TIMER_EndOfRadioActivityIsr();
10043a20:	f000 f984 	bl	10043d2c <HAL_RADIO_TIMER_EndOfRadioActivityIsr>

#if (USE_RADIO_PROPRIETARY_DRIVER == 1)
  HAL_RADIO_ActionPacketIsr(blue_status | blue_interrupt);
10043a24:	687a      	ldr	r2, [r7, #4]
10043a26:	683b      	ldr	r3, [r7, #0]
10043a28:	4313      	orrs	r3, r2
10043a2a:	0018      	movs	r0, r3
10043a2c:	f7ff feca 	bl	100437c4 <HAL_RADIO_ActionPacketIsr>
#endif

  HAL_RADIO_TxRxCallback(blue_status | blue_interrupt);
10043a30:	687a      	ldr	r2, [r7, #4]
10043a32:	683b      	ldr	r3, [r7, #0]
10043a34:	4313      	orrs	r3, r2
10043a36:	0018      	movs	r0, r3
10043a38:	f7ff ffd6 	bl	100439e8 <HAL_RADIO_TxRxCallback>

  HAL_RADIO_TIMER_RadioTimerIsr();
10043a3c:	f000 f970 	bl	10043d20 <HAL_RADIO_TIMER_RadioTimerIsr>
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  blue_interrupt = BLUE->INTERRUPT1REG;
10043a40:	23c0      	movs	r3, #192	@ 0xc0
10043a42:	05db      	lsls	r3, r3, #23
10043a44:	685b      	ldr	r3, [r3, #4]
10043a46:	603b      	str	r3, [r7, #0]
}
10043a48:	46c0      	nop			@ (mov r8, r8)
10043a4a:	46bd      	mov	sp, r7
10043a4c:	b002      	add	sp, #8
10043a4e:	bd80      	pop	{r7, pc}

10043a50 <HAL_RADIO_TXRX_SEQ_IRQHandler>:


void HAL_RADIO_TXRX_SEQ_IRQHandler(void)
{
10043a50:	b580      	push	{r7, lr}
10043a52:	af00      	add	r7, sp, #0
  HAL_RADIO_TxRxSeqCallback();
10043a54:	f7ff ffd0 	bl	100439f8 <HAL_RADIO_TxRxSeqCallback>
}
10043a58:	46c0      	nop			@ (mov r8, r8)
10043a5a:	46bd      	mov	sp, r7
10043a5c:	bd80      	pop	{r7, pc}

10043a5e <LL_RADIO_TIMER_EnableTimer1>:
{
10043a5e:	b580      	push	{r7, lr}
10043a60:	b082      	sub	sp, #8
10043a62:	af00      	add	r7, sp, #0
10043a64:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, LL_RADIO_TIMER_1);
10043a66:	687b      	ldr	r3, [r7, #4]
10043a68:	68db      	ldr	r3, [r3, #12]
10043a6a:	2203      	movs	r2, #3
10043a6c:	4393      	bics	r3, r2
10043a6e:	2202      	movs	r2, #2
10043a70:	431a      	orrs	r2, r3
10043a72:	687b      	ldr	r3, [r7, #4]
10043a74:	60da      	str	r2, [r3, #12]
}
10043a76:	46c0      	nop			@ (mov r8, r8)
10043a78:	46bd      	mov	sp, r7
10043a7a:	b002      	add	sp, #8
10043a7c:	bd80      	pop	{r7, pc}

10043a7e <LL_RADIO_TIMER_DisableTimer1>:
{
10043a7e:	b580      	push	{r7, lr}
10043a80:	b082      	sub	sp, #8
10043a82:	af00      	add	r7, sp, #0
10043a84:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10043a86:	687b      	ldr	r3, [r7, #4]
10043a88:	68db      	ldr	r3, [r3, #12]
10043a8a:	2203      	movs	r2, #3
10043a8c:	4393      	bics	r3, r2
10043a8e:	001a      	movs	r2, r3
10043a90:	687b      	ldr	r3, [r7, #4]
10043a92:	60da      	str	r2, [r3, #12]
}
10043a94:	46c0      	nop			@ (mov r8, r8)
10043a96:	46bd      	mov	sp, r7
10043a98:	b002      	add	sp, #8
10043a9a:	bd80      	pop	{r7, pc}

10043a9c <LL_RADIO_TIMER_DisableTimer2>:
{
10043a9c:	b580      	push	{r7, lr}
10043a9e:	b082      	sub	sp, #8
10043aa0:	af00      	add	r7, sp, #0
10043aa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10043aa4:	687b      	ldr	r3, [r7, #4]
10043aa6:	68db      	ldr	r3, [r3, #12]
10043aa8:	2203      	movs	r2, #3
10043aaa:	4393      	bics	r3, r2
10043aac:	001a      	movs	r2, r3
10043aae:	687b      	ldr	r3, [r7, #4]
10043ab0:	60da      	str	r2, [r3, #12]
}
10043ab2:	46c0      	nop			@ (mov r8, r8)
10043ab4:	46bd      	mov	sp, r7
10043ab6:	b002      	add	sp, #8
10043ab8:	bd80      	pop	{r7, pc}

10043aba <LL_RADIO_TIMER_SetTimeout>:
{
10043aba:	b580      	push	{r7, lr}
10043abc:	b082      	sub	sp, #8
10043abe:	af00      	add	r7, sp, #0
10043ac0:	6078      	str	r0, [r7, #4]
10043ac2:	6039      	str	r1, [r7, #0]
  WRITE_REG(BLUEx->TIMEOUTREG, timeout);
10043ac4:	687b      	ldr	r3, [r7, #4]
10043ac6:	683a      	ldr	r2, [r7, #0]
10043ac8:	611a      	str	r2, [r3, #16]
}
10043aca:	46c0      	nop			@ (mov r8, r8)
10043acc:	46bd      	mov	sp, r7
10043ace:	b002      	add	sp, #8
10043ad0:	bd80      	pop	{r7, pc}

10043ad2 <LL_RADIO_TIMER_EnableBLEWakeupTimer>:
{
10043ad2:	b580      	push	{r7, lr}
10043ad4:	b082      	sub	sp, #8
10043ad6:	af00      	add	r7, sp, #0
10043ad8:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10043ada:	687b      	ldr	r3, [r7, #4]
10043adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10043ade:	2280      	movs	r2, #128	@ 0x80
10043ae0:	05d2      	lsls	r2, r2, #23
10043ae2:	431a      	orrs	r2, r3
10043ae4:	687b      	ldr	r3, [r7, #4]
10043ae6:	629a      	str	r2, [r3, #40]	@ 0x28
}
10043ae8:	46c0      	nop			@ (mov r8, r8)
10043aea:	46bd      	mov	sp, r7
10043aec:	b002      	add	sp, #8
10043aee:	bd80      	pop	{r7, pc}

10043af0 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
10043af0:	b580      	push	{r7, lr}
10043af2:	b082      	sub	sp, #8
10043af4:	af00      	add	r7, sp, #0
10043af6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10043af8:	687b      	ldr	r3, [r7, #4]
10043afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10043afc:	4a03      	ldr	r2, [pc, #12]	@ (10043b0c <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
10043afe:	401a      	ands	r2, r3
10043b00:	687b      	ldr	r3, [r7, #4]
10043b02:	629a      	str	r2, [r3, #40]	@ 0x28
}
10043b04:	46c0      	nop			@ (mov r8, r8)
10043b06:	46bd      	mov	sp, r7
10043b08:	b002      	add	sp, #8
10043b0a:	bd80      	pop	{r7, pc}
10043b0c:	bfffffff 	.word	0xbfffffff

10043b10 <LL_RADIO_TIMER_EnableCPUWakeupTimer>:
  * @rmtoll CM0_SLEEP_REQUEST_MODE    CPU_WAKEUP_EN   LL_RADIO_TIMER_EnableCPUWakeupTimer
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP_TypeDef *WAKEUPx)
{
10043b10:	b580      	push	{r7, lr}
10043b12:	b082      	sub	sp, #8
10043b14:	af00      	add	r7, sp, #0
10043b16:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
10043b18:	687b      	ldr	r3, [r7, #4]
10043b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10043b1c:	2280      	movs	r2, #128	@ 0x80
10043b1e:	05d2      	lsls	r2, r2, #23
10043b20:	431a      	orrs	r2, r3
10043b22:	687b      	ldr	r3, [r7, #4]
10043b24:	631a      	str	r2, [r3, #48]	@ 0x30
}
10043b26:	46c0      	nop			@ (mov r8, r8)
10043b28:	46bd      	mov	sp, r7
10043b2a:	b002      	add	sp, #8
10043b2c:	bd80      	pop	{r7, pc}
	...

10043b30 <LL_RADIO_TIMER_DisableCPUWakeupTimer>:
  * @rmtoll CM0_SLEEP_REQUEST_MODE    CPU_WAKEUP_EN   LL_RADIO_TIMER_DisableCPUWakeupTimer
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP_TypeDef *WAKEUPx)
{
10043b30:	b580      	push	{r7, lr}
10043b32:	b082      	sub	sp, #8
10043b34:	af00      	add	r7, sp, #0
10043b36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
10043b38:	687b      	ldr	r3, [r7, #4]
10043b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10043b3c:	4a03      	ldr	r2, [pc, #12]	@ (10043b4c <LL_RADIO_TIMER_DisableCPUWakeupTimer+0x1c>)
10043b3e:	401a      	ands	r2, r3
10043b40:	687b      	ldr	r3, [r7, #4]
10043b42:	631a      	str	r2, [r3, #48]	@ 0x30
}
10043b44:	46c0      	nop			@ (mov r8, r8)
10043b46:	46bd      	mov	sp, r7
10043b48:	b002      	add	sp, #8
10043b4a:	bd80      	pop	{r7, pc}
10043b4c:	bfffffff 	.word	0xbfffffff

10043b50 <LL_RADIO_TIMER_SetBLEWakeupTime>:
  * @param  WAKEUPx Radio Timer instance
  * @param  Time in 16 x slow clock period
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP_TypeDef *WAKEUPx, uint32_t Time)
{
10043b50:	b580      	push	{r7, lr}
10043b52:	b082      	sub	sp, #8
10043b54:	af00      	add	r7, sp, #0
10043b56:	6078      	str	r0, [r7, #4]
10043b58:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->BLUE_WAKEUP_TIME, Time);
10043b5a:	687b      	ldr	r3, [r7, #4]
10043b5c:	683a      	ldr	r2, [r7, #0]
10043b5e:	625a      	str	r2, [r3, #36]	@ 0x24
}
10043b60:	46c0      	nop			@ (mov r8, r8)
10043b62:	46bd      	mov	sp, r7
10043b64:	b002      	add	sp, #8
10043b66:	bd80      	pop	{r7, pc}

10043b68 <LL_RADIO_TIMER_SetCPUWakeupTime>:
  * @param  WAKEUPx Radio Timer instance
  * @param  Time in slow clock period
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP_TypeDef *WAKEUPx, uint32_t Time)
{
10043b68:	b580      	push	{r7, lr}
10043b6a:	b082      	sub	sp, #8
10043b6c:	af00      	add	r7, sp, #0
10043b6e:	6078      	str	r0, [r7, #4]
10043b70:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->CM0_WAKEUP_TIME, Time);
10043b72:	687b      	ldr	r3, [r7, #4]
10043b74:	683a      	ldr	r2, [r7, #0]
10043b76:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10043b78:	46c0      	nop			@ (mov r8, r8)
10043b7a:	46bd      	mov	sp, r7
10043b7c:	b002      	add	sp, #8
10043b7e:	bd80      	pop	{r7, pc}

10043b80 <LL_RADIO_TIMER_GetAbsoluteTime>:
  * @brief  Get the Absolute Time of the wakeup timer (Granularity unit is 16 x slow clock period).
  * @param  WAKEUPx Radio Timer instance
  * @retval Absolute Time of Wakeup Timer
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP_TypeDef *WAKEUPx)
{
10043b80:	b580      	push	{r7, lr}
10043b82:	b082      	sub	sp, #8
10043b84:	af00      	add	r7, sp, #0
10043b86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
10043b88:	687b      	ldr	r3, [r7, #4]
10043b8a:	691b      	ldr	r3, [r3, #16]
}
10043b8c:	0018      	movs	r0, r3
10043b8e:	46bd      	mov	sp, r7
10043b90:	b002      	add	sp, #8
10043b92:	bd80      	pop	{r7, pc}

10043b94 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    SLEEP_EN   LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP_TypeDef *WAKEUPx)
{
10043b94:	b580      	push	{r7, lr}
10043b96:	b082      	sub	sp, #8
10043b98:	af00      	add	r7, sp, #0
10043b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN);
10043b9c:	687b      	ldr	r3, [r7, #4]
10043b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10043ba0:	2280      	movs	r2, #128	@ 0x80
10043ba2:	0592      	lsls	r2, r2, #22
10043ba4:	431a      	orrs	r2, r3
10043ba6:	687b      	ldr	r3, [r7, #4]
10043ba8:	629a      	str	r2, [r3, #40]	@ 0x28
}
10043baa:	46c0      	nop			@ (mov r8, r8)
10043bac:	46bd      	mov	sp, r7
10043bae:	b002      	add	sp, #8
10043bb0:	bd80      	pop	{r7, pc}
	...

10043bb4 <LL_RADIO_TIMER_SetSleepRequestMode>:
  * @param  WAKEUPx Radio Timer instance
  * @param  mode Sleep mode value in range 0-7
  * @retval None.
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP_TypeDef *WAKEUPx, uint8_t mode)
{
10043bb4:	b580      	push	{r7, lr}
10043bb6:	b082      	sub	sp, #8
10043bb8:	af00      	add	r7, sp, #0
10043bba:	6078      	str	r0, [r7, #4]
10043bbc:	000a      	movs	r2, r1
10043bbe:	1cfb      	adds	r3, r7, #3
10043bc0:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  return;
#else
  MODIFY_REG_FIELD(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_REQ_MODE, (mode & 0x7));
10043bc2:	4b08      	ldr	r3, [pc, #32]	@ (10043be4 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
10043bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10043bc6:	2207      	movs	r2, #7
10043bc8:	4393      	bics	r3, r2
10043bca:	0019      	movs	r1, r3
10043bcc:	1cfb      	adds	r3, r7, #3
10043bce:	781b      	ldrb	r3, [r3, #0]
10043bd0:	2207      	movs	r2, #7
10043bd2:	401a      	ands	r2, r3
10043bd4:	4b03      	ldr	r3, [pc, #12]	@ (10043be4 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
10043bd6:	430a      	orrs	r2, r1
10043bd8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
}
10043bda:	46c0      	nop			@ (mov r8, r8)
10043bdc:	46bd      	mov	sp, r7
10043bde:	b002      	add	sp, #8
10043be0:	bd80      	pop	{r7, pc}
10043be2:	46c0      	nop			@ (mov r8, r8)
10043be4:	60001800 	.word	0x60001800

10043be8 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
10043be8:	b580      	push	{r7, lr}
10043bea:	b082      	sub	sp, #8
10043bec:	af00      	add	r7, sp, #0
10043bee:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT);
10043bf0:	687b      	ldr	r3, [r7, #4]
10043bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10043bf4:	2201      	movs	r2, #1
10043bf6:	431a      	orrs	r2, r3
10043bf8:	687b      	ldr	r3, [r7, #4]
10043bfa:	64da      	str	r2, [r3, #76]	@ 0x4c
}
10043bfc:	46c0      	nop			@ (mov r8, r8)
10043bfe:	46bd      	mov	sp, r7
10043c00:	b002      	add	sp, #8
10043c02:	bd80      	pop	{r7, pc}

10043c04 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
10043c04:	b580      	push	{r7, lr}
10043c06:	b082      	sub	sp, #8
10043c08:	af00      	add	r7, sp, #0
10043c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
10043c0c:	687b      	ldr	r3, [r7, #4]
10043c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10043c10:	2201      	movs	r2, #1
10043c12:	4013      	ands	r3, r2
10043c14:	2b01      	cmp	r3, #1
10043c16:	d101      	bne.n	10043c1c <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x18>
10043c18:	2301      	movs	r3, #1
10043c1a:	e000      	b.n	10043c1e <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x1a>
10043c1c:	2300      	movs	r3, #0
}
10043c1e:	0018      	movs	r0, r3
10043c20:	46bd      	mov	sp, r7
10043c22:	b002      	add	sp, #8
10043c24:	bd80      	pop	{r7, pc}

10043c26 <LL_RADIO_TIMER_StartLSICalibration>:
  * @brief  Start the LSI calibration procedure.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10043c26:	b580      	push	{r7, lr}
10043c28:	b082      	sub	sp, #8
10043c2a:	af00      	add	r7, sp, #0
10043c2c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RADIO_CTRLx->CLK32PERIOD_REG, 0);
10043c2e:	687b      	ldr	r3, [r7, #4]
10043c30:	2200      	movs	r2, #0
10043c32:	609a      	str	r2, [r3, #8]
}
10043c34:	46c0      	nop			@ (mov r8, r8)
10043c36:	46bd      	mov	sp, r7
10043c38:	b002      	add	sp, #8
10043c3a:	bd80      	pop	{r7, pc}

10043c3c <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>:
  * @brief  Clear the LSI calibration ended flag.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10043c3c:	b580      	push	{r7, lr}
10043c3e:	b082      	sub	sp, #8
10043c40:	af00      	add	r7, sp, #0
10043c42:	6078      	str	r0, [r7, #4]
  SET_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ);
10043c44:	687b      	ldr	r3, [r7, #4]
10043c46:	691b      	ldr	r3, [r3, #16]
10043c48:	2201      	movs	r2, #1
10043c4a:	431a      	orrs	r2, r3
10043c4c:	687b      	ldr	r3, [r7, #4]
10043c4e:	611a      	str	r2, [r3, #16]
}
10043c50:	46c0      	nop			@ (mov r8, r8)
10043c52:	46bd      	mov	sp, r7
10043c54:	b002      	add	sp, #8
10043c56:	bd80      	pop	{r7, pc}

10043c58 <HAL_RADIO_TIMER_GetAnchorPoint>:
  * @brief Get the last anchorPoint in system time unit.
  * @param current_system_time: Current System Time
  * @return TimerCapture register in system time unit.
  */
uint64_t HAL_RADIO_TIMER_GetAnchorPoint(uint64_t *current_system_time)
{
10043c58:	b580      	push	{r7, lr}
10043c5a:	b082      	sub	sp, #8
10043c5c:	af00      	add	r7, sp, #0
10043c5e:	6078      	str	r0, [r7, #4]
  return TIMER_GetPastSysTime(BLUE->TIMERCAPTUREREG, current_system_time);
10043c60:	23c0      	movs	r3, #192	@ 0xc0
10043c62:	05db      	lsls	r3, r3, #23
10043c64:	695b      	ldr	r3, [r3, #20]
10043c66:	687a      	ldr	r2, [r7, #4]
10043c68:	0011      	movs	r1, r2
10043c6a:	0018      	movs	r0, r3
10043c6c:	f000 fc08 	bl	10044480 <TIMER_GetPastSysTime>
10043c70:	0002      	movs	r2, r0
10043c72:	000b      	movs	r3, r1
}
10043c74:	0010      	movs	r0, r2
10043c76:	0019      	movs	r1, r3
10043c78:	46bd      	mov	sp, r7
10043c7a:	b002      	add	sp, #8
10043c7c:	bd80      	pop	{r7, pc}
	...

10043c80 <HAL_RADIO_TIMER_SetRadioTimerValue>:
  * @param  cal_req: Specify if PLL calibration is requested (1) or not (0).
  * @retval 0 if radio activity has been scheduled successfully.
  * @retval 1 if radio activity has been rejected (it is too close or in the past).
  */
uint32_t HAL_RADIO_TIMER_SetRadioTimerValue(uint32_t time, uint8_t event_type, uint8_t cal_req)
{
10043c80:	b5f0      	push	{r4, r5, r6, r7, lr}
10043c82:	b085      	sub	sp, #20
10043c84:	af00      	add	r7, sp, #0
10043c86:	6078      	str	r0, [r7, #4]
10043c88:	0008      	movs	r0, r1
10043c8a:	0011      	movs	r1, r2
10043c8c:	1cfb      	adds	r3, r7, #3
10043c8e:	1c02      	adds	r2, r0, #0
10043c90:	701a      	strb	r2, [r3, #0]
10043c92:	1cbb      	adds	r3, r7, #2
10043c94:	1c0a      	adds	r2, r1, #0
10043c96:	701a      	strb	r2, [r3, #0]
  uint8_t retVal = 0;
10043c98:	260f      	movs	r6, #15
10043c9a:	19bb      	adds	r3, r7, r6
10043c9c:	2200      	movs	r2, #0
10043c9e:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB06) || defined (STM32WB07)
  uint64_t current_time;
#endif

  RADIO_TIMER_Context.radioTimer.event_type = event_type;
10043ca0:	1cfb      	adds	r3, r7, #3
10043ca2:	781b      	ldrb	r3, [r3, #0]
10043ca4:	1e5a      	subs	r2, r3, #1
10043ca6:	4193      	sbcs	r3, r2
10043ca8:	b2d9      	uxtb	r1, r3
10043caa:	4b1b      	ldr	r3, [pc, #108]	@ (10043d18 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10043cac:	2264      	movs	r2, #100	@ 0x64
10043cae:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.cal_req = cal_req;
10043cb0:	1cbb      	adds	r3, r7, #2
10043cb2:	781b      	ldrb	r3, [r3, #0]
10043cb4:	1e5a      	subs	r2, r3, #1
10043cb6:	4193      	sbcs	r3, r2
10043cb8:	b2d9      	uxtb	r1, r3
10043cba:	4b17      	ldr	r3, [pc, #92]	@ (10043d18 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10043cbc:	2260      	movs	r2, #96	@ 0x60
10043cbe:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = RADIO_TIMER_Context.calibrationData.last_calibration_time + (uint32_t)(time - (uint32_t)RADIO_TIMER_Context.calibrationData.last_calibration_time);
10043cc0:	4b15      	ldr	r3, [pc, #84]	@ (10043d18 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10043cc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10043cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10043cc6:	4914      	ldr	r1, [pc, #80]	@ (10043d18 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10043cc8:	6a88      	ldr	r0, [r1, #40]	@ 0x28
10043cca:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
10043ccc:	6879      	ldr	r1, [r7, #4]
10043cce:	1a09      	subs	r1, r1, r0
10043cd0:	000c      	movs	r4, r1
10043cd2:	2100      	movs	r1, #0
10043cd4:	000d      	movs	r5, r1
10043cd6:	1912      	adds	r2, r2, r4
10043cd8:	416b      	adcs	r3, r5
10043cda:	490f      	ldr	r1, [pc, #60]	@ (10043d18 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10043cdc:	658a      	str	r2, [r1, #88]	@ 0x58
10043cde:	65cb      	str	r3, [r1, #92]	@ 0x5c
  RADIO_TIMER_Context.radioTimer.active = FALSE;
10043ce0:	4b0d      	ldr	r3, [pc, #52]	@ (10043d18 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10043ce2:	2261      	movs	r2, #97	@ 0x61
10043ce4:	2100      	movs	r1, #0
10043ce6:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10043ce8:	4b0b      	ldr	r3, [pc, #44]	@ (10043d18 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10043cea:	2263      	movs	r2, #99	@ 0x63
10043cec:	2100      	movs	r1, #0
10043cee:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = TRUE;
10043cf0:	4b09      	ldr	r3, [pc, #36]	@ (10043d18 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10043cf2:	2262      	movs	r2, #98	@ 0x62
10043cf4:	2101      	movs	r1, #1
10043cf6:	5499      	strb	r1, [r3, r2]
      This call is not needed if radio errors are not enabled by the BLE stack. */
      _set_controller_as_host();
    }
  }
#else
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
10043cf8:	19ba      	adds	r2, r7, r6
10043cfa:	4b08      	ldr	r3, [pc, #32]	@ (10043d1c <HAL_RADIO_TIMER_SetRadioTimerValue+0x9c>)
10043cfc:	0011      	movs	r1, r2
10043cfe:	0018      	movs	r0, r3
10043d00:	f000 fa4c 	bl	1004419c <_check_radio_activity>
#endif

  _virtualTimeBaseEnable(ENABLE);
10043d04:	2001      	movs	r0, #1
10043d06:	f000 f9f1 	bl	100440ec <_virtualTimeBaseEnable>

  return retVal;
10043d0a:	19bb      	adds	r3, r7, r6
10043d0c:	781b      	ldrb	r3, [r3, #0]
}
10043d0e:	0018      	movs	r0, r3
10043d10:	46bd      	mov	sp, r7
10043d12:	b005      	add	sp, #20
10043d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
10043d16:	46c0      	nop			@ (mov r8, r8)
10043d18:	20000808 	.word	0x20000808
10043d1c:	20000860 	.word	0x20000860

10043d20 <HAL_RADIO_TIMER_RadioTimerIsr>:
/**
  * @brief  Radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_RadioTimerIsr(void)
{
10043d20:	b580      	push	{r7, lr}
10043d22:	af00      	add	r7, sp, #0
  if (!(LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE)))
  {
    _check_host_activity();
  }
#endif
}
10043d24:	46c0      	nop			@ (mov r8, r8)
10043d26:	46bd      	mov	sp, r7
10043d28:	bd80      	pop	{r7, pc}
	...

10043d2c <HAL_RADIO_TIMER_EndOfRadioActivityIsr>:
/**
  * @brief  Timer State machine semaphore to signal the radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_EndOfRadioActivityIsr(void)
{
10043d2c:	b580      	push	{r7, lr}
10043d2e:	af00      	add	r7, sp, #0
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10043d30:	4b03      	ldr	r3, [pc, #12]	@ (10043d40 <HAL_RADIO_TIMER_EndOfRadioActivityIsr+0x14>)
10043d32:	2263      	movs	r2, #99	@ 0x63
10043d34:	2100      	movs	r1, #0
10043d36:	5499      	strb	r1, [r3, r2]
}
10043d38:	46c0      	nop			@ (mov r8, r8)
10043d3a:	46bd      	mov	sp, r7
10043d3c:	bd80      	pop	{r7, pc}
10043d3e:	46c0      	nop			@ (mov r8, r8)
10043d40:	20000808 	.word	0x20000808

10043d44 <HAL_RADIO_TIMER_UsToSystime>:
  * @brief  Translate time in microseconds into sys time units.
  * @param  time: Microseconds to be converted in STU
  * @return STU value
  */
uint32_t HAL_RADIO_TIMER_UsToSystime(uint32_t time)
{
10043d44:	b580      	push	{r7, lr}
10043d46:	b082      	sub	sp, #8
10043d48:	af00      	add	r7, sp, #0
10043d4a:	6078      	str	r0, [r7, #4]
  return _us_to_systime(time);
10043d4c:	687b      	ldr	r3, [r7, #4]
10043d4e:	0018      	movs	r0, r3
10043d50:	f000 f8b2 	bl	10043eb8 <_us_to_systime>
10043d54:	0003      	movs	r3, r0
}
10043d56:	0018      	movs	r0, r3
10043d58:	46bd      	mov	sp, r7
10043d5a:	b002      	add	sp, #8
10043d5c:	bd80      	pop	{r7, pc}
	...

10043d60 <HAL_RADIO_TIMER_GetCurrentSysTime>:
  *         The returned value can be used as absolute time parameter where needed in the other
  *         HAL_RADIO_TIMER* APIs
  * @return absolute current time expressed in system time units.
  */
uint64_t HAL_RADIO_TIMER_GetCurrentSysTime(void)
{
10043d60:	b580      	push	{r7, lr}
10043d62:	b082      	sub	sp, #8
10043d64:	af00      	add	r7, sp, #0
  uint32_t current_machine_time;
  return _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10043d66:	1d3a      	adds	r2, r7, #4
10043d68:	4b05      	ldr	r3, [pc, #20]	@ (10043d80 <HAL_RADIO_TIMER_GetCurrentSysTime+0x20>)
10043d6a:	0011      	movs	r1, r2
10043d6c:	0018      	movs	r0, r3
10043d6e:	f000 f8cd 	bl	10043f0c <_get_system_time_and_machine>
10043d72:	0002      	movs	r2, r0
10043d74:	000b      	movs	r3, r1
}
10043d76:	0010      	movs	r0, r2
10043d78:	0019      	movs	r1, r3
10043d7a:	46bd      	mov	sp, r7
10043d7c:	b002      	add	sp, #8
10043d7e:	bd80      	pop	{r7, pc}
10043d80:	20000808 	.word	0x20000808

10043d84 <HAL_RADIO_TIMER_StopVirtualTimer>:
  * @brief  Stops the one-shot virtual timer specified if found
  * @param  timerHandle: The virtual timer
  * @retval None
  */
void HAL_RADIO_TIMER_StopVirtualTimer(VTIMER_HandleType *timerHandle)
{
10043d84:	b590      	push	{r4, r7, lr}
10043d86:	b089      	sub	sp, #36	@ 0x24
10043d88:	af00      	add	r7, sp, #0
10043d8a:	6078      	str	r0, [r7, #4]
  VTIMER_HandleType *rootNode = _remove_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle);
10043d8c:	4b28      	ldr	r3, [pc, #160]	@ (10043e30 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10043d8e:	228c      	movs	r2, #140	@ 0x8c
10043d90:	589b      	ldr	r3, [r3, r2]
10043d92:	687a      	ldr	r2, [r7, #4]
10043d94:	0011      	movs	r1, r2
10043d96:	0018      	movs	r0, r3
10043d98:	f000 f9d4 	bl	10044144 <_remove_timer_in_queue>
10043d9c:	0003      	movs	r3, r0
10043d9e:	61fb      	str	r3, [r7, #28]
  uint8_t expired = 0;
10043da0:	210f      	movs	r1, #15
10043da2:	187b      	adds	r3, r7, r1
10043da4:	2200      	movs	r2, #0
10043da6:	701a      	strb	r2, [r3, #0]
  timerHandle->active = FALSE;
10043da8:	687b      	ldr	r3, [r7, #4]
10043daa:	2200      	movs	r2, #0
10043dac:	731a      	strb	r2, [r3, #12]
  if (RADIO_TIMER_Context.rootNode != rootNode)
10043dae:	4b20      	ldr	r3, [pc, #128]	@ (10043e30 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10043db0:	228c      	movs	r2, #140	@ 0x8c
10043db2:	589b      	ldr	r3, [r3, r2]
10043db4:	69fa      	ldr	r2, [r7, #28]
10043db6:	429a      	cmp	r2, r3
10043db8:	d031      	beq.n	10043e1e <HAL_RADIO_TIMER_StopVirtualTimer+0x9a>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(rootNode, &expired);
10043dba:	000c      	movs	r4, r1
10043dbc:	187a      	adds	r2, r7, r1
10043dbe:	69fb      	ldr	r3, [r7, #28]
10043dc0:	0011      	movs	r1, r2
10043dc2:	0018      	movs	r0, r3
10043dc4:	f000 f90a 	bl	10043fdc <_update_user_timeout>
10043dc8:	0002      	movs	r2, r0
10043dca:	4b19      	ldr	r3, [pc, #100]	@ (10043e30 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10043dcc:	218c      	movs	r1, #140	@ 0x8c
10043dce:	505a      	str	r2, [r3, r1]
    if (expired)
10043dd0:	193b      	adds	r3, r7, r4
10043dd2:	781b      	ldrb	r3, [r3, #0]
10043dd4:	2b00      	cmp	r3, #0
10043dd6:	d026      	beq.n	10043e26 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10043dd8:	f3ef 8310 	mrs	r3, PRIMASK
10043ddc:	617b      	str	r3, [r7, #20]
  return(result);
10043dde:	697b      	ldr	r3, [r7, #20]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
10043de0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
10043de2:	b672      	cpsid	i
}
10043de4:	46c0      	nop			@ (mov r8, r8)
10043de6:	4b12      	ldr	r3, [pc, #72]	@ (10043e30 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10043de8:	2291      	movs	r2, #145	@ 0x91
10043dea:	5c9b      	ldrb	r3, [r3, r2]
10043dec:	3301      	adds	r3, #1
10043dee:	4a10      	ldr	r2, [pc, #64]	@ (10043e30 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10043df0:	2192      	movs	r1, #146	@ 0x92
10043df2:	5c52      	ldrb	r2, [r2, r1]
10043df4:	4293      	cmp	r3, r2
10043df6:	d103      	bne.n	10043e00 <HAL_RADIO_TIMER_StopVirtualTimer+0x7c>
10043df8:	4b0d      	ldr	r3, [pc, #52]	@ (10043e30 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10043dfa:	2291      	movs	r2, #145	@ 0x91
10043dfc:	5c9b      	ldrb	r3, [r3, r2]
10043dfe:	e004      	b.n	10043e0a <HAL_RADIO_TIMER_StopVirtualTimer+0x86>
10043e00:	4b0b      	ldr	r3, [pc, #44]	@ (10043e30 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10043e02:	2291      	movs	r2, #145	@ 0x91
10043e04:	5c9b      	ldrb	r3, [r3, r2]
10043e06:	3301      	adds	r3, #1
10043e08:	b2db      	uxtb	r3, r3
10043e0a:	4a09      	ldr	r2, [pc, #36]	@ (10043e30 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10043e0c:	2191      	movs	r1, #145	@ 0x91
10043e0e:	5453      	strb	r3, [r2, r1]
10043e10:	69bb      	ldr	r3, [r7, #24]
10043e12:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10043e14:	693b      	ldr	r3, [r7, #16]
10043e16:	f383 8810 	msr	PRIMASK, r3
}
10043e1a:	46c0      	nop			@ (mov r8, r8)
  }
  else
  {
    RADIO_TIMER_Context.rootNode = rootNode;
  }
}
10043e1c:	e003      	b.n	10043e26 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
    RADIO_TIMER_Context.rootNode = rootNode;
10043e1e:	4b04      	ldr	r3, [pc, #16]	@ (10043e30 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10043e20:	218c      	movs	r1, #140	@ 0x8c
10043e22:	69fa      	ldr	r2, [r7, #28]
10043e24:	505a      	str	r2, [r3, r1]
}
10043e26:	46c0      	nop			@ (mov r8, r8)
10043e28:	46bd      	mov	sp, r7
10043e2a:	b009      	add	sp, #36	@ 0x24
10043e2c:	bd90      	pop	{r4, r7, pc}
10043e2e:	46c0      	nop			@ (mov r8, r8)
10043e30:	20000808 	.word	0x20000808

10043e34 <HAL_RADIO_TIMER_TimeoutCallback>:
/**
  * @brief  Virtual timer Timeout Callback. It signals that a host timeout occurred.
  * @retval None
  */
void HAL_RADIO_TIMER_TimeoutCallback(void)
{
10043e34:	b580      	push	{r7, lr}
10043e36:	b082      	sub	sp, #8
10043e38:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
10043e3a:	2300      	movs	r3, #0
10043e3c:	607b      	str	r3, [r7, #4]
  UNUSED(status);
10043e3e:	687b      	ldr	r3, [r7, #4]
#if defined (STM32WB06) || defined (STM32WB07)
  RADIO_TIMER_Context.hostIsRadioPending = 0;
#endif

  /* Disable host timer */
  LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
10043e40:	4b13      	ldr	r3, [pc, #76]	@ (10043e90 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
10043e42:	0018      	movs	r0, r3
10043e44:	f7ff fe74 	bl	10043b30 <LL_RADIO_TIMER_DisableCPUWakeupTimer>
  INCREMENT_EXPIRE_COUNT_ISR;
10043e48:	4b12      	ldr	r3, [pc, #72]	@ (10043e94 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10043e4a:	2291      	movs	r2, #145	@ 0x91
10043e4c:	5c9b      	ldrb	r3, [r3, r2]
10043e4e:	3301      	adds	r3, #1
10043e50:	4a10      	ldr	r2, [pc, #64]	@ (10043e94 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10043e52:	2192      	movs	r1, #146	@ 0x92
10043e54:	5c52      	ldrb	r2, [r2, r1]
10043e56:	4293      	cmp	r3, r2
10043e58:	d103      	bne.n	10043e62 <HAL_RADIO_TIMER_TimeoutCallback+0x2e>
10043e5a:	4b0e      	ldr	r3, [pc, #56]	@ (10043e94 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10043e5c:	2291      	movs	r2, #145	@ 0x91
10043e5e:	5c9b      	ldrb	r3, [r3, r2]
10043e60:	e004      	b.n	10043e6c <HAL_RADIO_TIMER_TimeoutCallback+0x38>
10043e62:	4b0c      	ldr	r3, [pc, #48]	@ (10043e94 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10043e64:	2291      	movs	r2, #145	@ 0x91
10043e66:	5c9b      	ldrb	r3, [r3, r2]
10043e68:	3301      	adds	r3, #1
10043e6a:	b2db      	uxtb	r3, r3
10043e6c:	4a09      	ldr	r2, [pc, #36]	@ (10043e94 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10043e6e:	2191      	movs	r1, #145	@ 0x91
10043e70:	5453      	strb	r3, [r2, r1]
  /* Clear the interrupt */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
10043e72:	4b07      	ldr	r3, [pc, #28]	@ (10043e90 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
10043e74:	0018      	movs	r0, r3
10043e76:	f7ff feb7 	bl	10043be8 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP);
10043e7a:	4b05      	ldr	r3, [pc, #20]	@ (10043e90 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
10043e7c:	0018      	movs	r0, r3
10043e7e:	f7ff fec1 	bl	10043c04 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>
10043e82:	0003      	movs	r3, r0
10043e84:	607b      	str	r3, [r7, #4]
}
10043e86:	46c0      	nop			@ (mov r8, r8)
10043e88:	46bd      	mov	sp, r7
10043e8a:	b002      	add	sp, #8
10043e8c:	bd80      	pop	{r7, pc}
10043e8e:	46c0      	nop			@ (mov r8, r8)
10043e90:	60001800 	.word	0x60001800
10043e94:	20000808 	.word	0x20000808

10043e98 <_timer_start_calibration>:
  RADIO_TIMER_Context.calibrationData.last_period1 = RADIO_TIMER_Context.calibrationData.period1;

}

static void _timer_start_calibration(void)
{
10043e98:	b580      	push	{r7, lr}
10043e9a:	af00      	add	r7, sp, #0
  /* Clear any pending interrupt */
  LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL);
10043e9c:	4b05      	ldr	r3, [pc, #20]	@ (10043eb4 <_timer_start_calibration+0x1c>)
10043e9e:	0018      	movs	r0, r3
10043ea0:	f7ff fecc 	bl	10043c3c <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>
  /* Start calibration */
  LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL);
10043ea4:	4b03      	ldr	r3, [pc, #12]	@ (10043eb4 <_timer_start_calibration+0x1c>)
10043ea6:	0018      	movs	r0, r3
10043ea8:	f7ff febd 	bl	10043c26 <LL_RADIO_TIMER_StartLSICalibration>
}
10043eac:	46c0      	nop			@ (mov r8, r8)
10043eae:	46bd      	mov	sp, r7
10043eb0:	bd80      	pop	{r7, pc}
10043eb2:	46c0      	nop			@ (mov r8, r8)
10043eb4:	60001000 	.word	0x60001000

10043eb8 <_us_to_systime>:
  }

}

static uint32_t _us_to_systime(uint32_t time)
{
10043eb8:	b580      	push	{r7, lr}
10043eba:	b084      	sub	sp, #16
10043ebc:	af00      	add	r7, sp, #0
10043ebe:	6078      	str	r0, [r7, #4]
  uint32_t t1, t2;
  t1 = time * 0x68;
10043ec0:	687b      	ldr	r3, [r7, #4]
10043ec2:	2268      	movs	r2, #104	@ 0x68
10043ec4:	4353      	muls	r3, r2
10043ec6:	60fb      	str	r3, [r7, #12]
  t2 = time * 0xDB;
10043ec8:	687b      	ldr	r3, [r7, #4]
10043eca:	22db      	movs	r2, #219	@ 0xdb
10043ecc:	4353      	muls	r3, r2
10043ece:	60bb      	str	r3, [r7, #8]
  return (t1 >> 8) + (t2 >> 16);
10043ed0:	68fb      	ldr	r3, [r7, #12]
10043ed2:	0a1a      	lsrs	r2, r3, #8
10043ed4:	68bb      	ldr	r3, [r7, #8]
10043ed6:	0c1b      	lsrs	r3, r3, #16
10043ed8:	18d3      	adds	r3, r2, r3
}
10043eda:	0018      	movs	r0, r3
10043edc:	46bd      	mov	sp, r7
10043ede:	b004      	add	sp, #16
10043ee0:	bd80      	pop	{r7, pc}
	...

10043ee4 <_calibration_callback>:
  }
  LL_RADIO_TIMER_SetWakeupOffset(WAKEUP, (time1 >> 4));
}

static void _calibration_callback(void *handle)
{
10043ee4:	b580      	push	{r7, lr}
10043ee6:	b082      	sub	sp, #8
10043ee8:	af00      	add	r7, sp, #0
10043eea:	6078      	str	r0, [r7, #4]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
10043eec:	4b06      	ldr	r3, [pc, #24]	@ (10043f08 <_calibration_callback+0x24>)
10043eee:	781b      	ldrb	r3, [r3, #0]
10043ef0:	2b00      	cmp	r3, #0
10043ef2:	d001      	beq.n	10043ef8 <_calibration_callback+0x14>
  {
    _timer_start_calibration();
10043ef4:	f7ff ffd0 	bl	10043e98 <_timer_start_calibration>
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = TRUE;
10043ef8:	4b03      	ldr	r3, [pc, #12]	@ (10043f08 <_calibration_callback+0x24>)
10043efa:	2201      	movs	r2, #1
10043efc:	721a      	strb	r2, [r3, #8]
}
10043efe:	46c0      	nop			@ (mov r8, r8)
10043f00:	46bd      	mov	sp, r7
10043f02:	b002      	add	sp, #8
10043f04:	bd80      	pop	{r7, pc}
10043f06:	46c0      	nop			@ (mov r8, r8)
10043f08:	20000808 	.word	0x20000808

10043f0c <_get_system_time_and_machine>:
  }
  return expired;
}

static uint64_t _get_system_time_and_machine(RADIO_TIMER_ContextTypeDef *context, uint32_t *current_machine_time)
{
10043f0c:	b5b0      	push	{r4, r5, r7, lr}
10043f0e:	b08a      	sub	sp, #40	@ 0x28
10043f10:	af00      	add	r7, sp, #0
10043f12:	60f8      	str	r0, [r7, #12]
10043f14:	60b9      	str	r1, [r7, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10043f16:	f3ef 8310 	mrs	r3, PRIMASK
10043f1a:	617b      	str	r3, [r7, #20]
  return(result);
10043f1c:	697b      	ldr	r3, [r7, #20]
  uint32_t difftime;
  uint64_t new_time;

  ATOMIC_SECTION_BEGIN();
10043f1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10043f20:	b672      	cpsid	i
}
10043f22:	46c0      	nop			@ (mov r8, r8)
  new_time = context->cumulative_time;
10043f24:	68fb      	ldr	r3, [r7, #12]
10043f26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
10043f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10043f2a:	623a      	str	r2, [r7, #32]
10043f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  *current_machine_time =  LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10043f2e:	4b29      	ldr	r3, [pc, #164]	@ (10043fd4 <_get_system_time_and_machine+0xc8>)
10043f30:	0018      	movs	r0, r3
10043f32:	f7ff fe25 	bl	10043b80 <LL_RADIO_TIMER_GetAbsoluteTime>
10043f36:	0002      	movs	r2, r0
10043f38:	68bb      	ldr	r3, [r7, #8]
10043f3a:	601a      	str	r2, [r3, #0]
  difftime = TIME_ABSDIFF(*current_machine_time, context->last_machine_time);
10043f3c:	68bb      	ldr	r3, [r7, #8]
10043f3e:	681a      	ldr	r2, [r3, #0]
10043f40:	68fb      	ldr	r3, [r7, #12]
10043f42:	2180      	movs	r1, #128	@ 0x80
10043f44:	585b      	ldr	r3, [r3, r1]
10043f46:	1ad3      	subs	r3, r2, r3
10043f48:	61bb      	str	r3, [r7, #24]
  new_time += blue_unit_conversion(difftime, context->calibrationData.period1, MULT64_THR_PERIOD);
10043f4a:	68fb      	ldr	r3, [r7, #12]
10043f4c:	69db      	ldr	r3, [r3, #28]
10043f4e:	0019      	movs	r1, r3
10043f50:	4a21      	ldr	r2, [pc, #132]	@ (10043fd8 <_get_system_time_and_machine+0xcc>)
10043f52:	69bb      	ldr	r3, [r7, #24]
10043f54:	0018      	movs	r0, r3
10043f56:	f7fc f8b3 	bl	100400c0 <blue_unit_conversion>
10043f5a:	0003      	movs	r3, r0
10043f5c:	603b      	str	r3, [r7, #0]
10043f5e:	2300      	movs	r3, #0
10043f60:	607b      	str	r3, [r7, #4]
10043f62:	6a3a      	ldr	r2, [r7, #32]
10043f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043f66:	6838      	ldr	r0, [r7, #0]
10043f68:	6879      	ldr	r1, [r7, #4]
10043f6a:	1812      	adds	r2, r2, r0
10043f6c:	414b      	adcs	r3, r1
10043f6e:	623a      	str	r2, [r7, #32]
10043f70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (new_time < context->last_system_time)
10043f72:	68fb      	ldr	r3, [r7, #12]
10043f74:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
10043f76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10043f78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10043f7a:	4299      	cmp	r1, r3
10043f7c:	d305      	bcc.n	10043f8a <_get_system_time_and_machine+0x7e>
10043f7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10043f80:	4299      	cmp	r1, r3
10043f82:	d115      	bne.n	10043fb0 <_get_system_time_and_machine+0xa4>
10043f84:	6a39      	ldr	r1, [r7, #32]
10043f86:	4291      	cmp	r1, r2
10043f88:	d212      	bcs.n	10043fb0 <_get_system_time_and_machine+0xa4>
  {
    new_time += blue_unit_conversion(TIMER_MAX_VALUE, context->calibrationData.period1, MULT64_THR_PERIOD);
10043f8a:	68fb      	ldr	r3, [r7, #12]
10043f8c:	69db      	ldr	r3, [r3, #28]
10043f8e:	0019      	movs	r1, r3
10043f90:	4a11      	ldr	r2, [pc, #68]	@ (10043fd8 <_get_system_time_and_machine+0xcc>)
10043f92:	2301      	movs	r3, #1
10043f94:	425b      	negs	r3, r3
10043f96:	0018      	movs	r0, r3
10043f98:	f7fc f892 	bl	100400c0 <blue_unit_conversion>
10043f9c:	0003      	movs	r3, r0
10043f9e:	001c      	movs	r4, r3
10043fa0:	2300      	movs	r3, #0
10043fa2:	001d      	movs	r5, r3
10043fa4:	6a3a      	ldr	r2, [r7, #32]
10043fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043fa8:	1912      	adds	r2, r2, r4
10043faa:	416b      	adcs	r3, r5
10043fac:	623a      	str	r2, [r7, #32]
10043fae:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  context->last_system_time = new_time;
10043fb0:	68f9      	ldr	r1, [r7, #12]
10043fb2:	6a3a      	ldr	r2, [r7, #32]
10043fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043fb6:	678a      	str	r2, [r1, #120]	@ 0x78
10043fb8:	67cb      	str	r3, [r1, #124]	@ 0x7c
10043fba:	69fb      	ldr	r3, [r7, #28]
10043fbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10043fbe:	693b      	ldr	r3, [r7, #16]
10043fc0:	f383 8810 	msr	PRIMASK, r3
}
10043fc4:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();

  return new_time;
10043fc6:	6a3a      	ldr	r2, [r7, #32]
10043fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10043fca:	0010      	movs	r0, r2
10043fcc:	0019      	movs	r1, r3
10043fce:	46bd      	mov	sp, r7
10043fd0:	b00a      	add	sp, #40	@ 0x28
10043fd2:	bdb0      	pop	{r4, r5, r7, pc}
10043fd4:	60001800 	.word	0x60001800
10043fd8:	00000635 	.word	0x00000635

10043fdc <_update_user_timeout>:

/* Set timeout and skip non active timers */
static VTIMER_HandleType *_update_user_timeout(VTIMER_HandleType *rootNode, uint8_t *expired)
{
10043fdc:	b5b0      	push	{r4, r5, r7, lr}
10043fde:	b08a      	sub	sp, #40	@ 0x28
10043fe0:	af00      	add	r7, sp, #0
10043fe2:	6078      	str	r0, [r7, #4]
10043fe4:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *curr = rootNode;
10043fe6:	687b      	ldr	r3, [r7, #4]
10043fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  VTIMER_HandleType *rootOrig = rootNode;
10043fea:	687b      	ldr	r3, [r7, #4]
10043fec:	623b      	str	r3, [r7, #32]
  int64_t delay;
  *expired = 0;
10043fee:	683b      	ldr	r3, [r7, #0]
10043ff0:	2200      	movs	r2, #0
10043ff2:	701a      	strb	r2, [r3, #0]
  while (curr != NULL)
10043ff4:	e033      	b.n	1004405e <_update_user_timeout+0x82>
  {
    if (curr->active)
10043ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043ff8:	7b1b      	ldrb	r3, [r3, #12]
10043ffa:	2b00      	cmp	r3, #0
10043ffc:	d02c      	beq.n	10044058 <_update_user_timeout+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10043ffe:	f3ef 8310 	mrs	r3, PRIMASK
10044002:	60fb      	str	r3, [r7, #12]
  return(result);
10044004:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_SECTION_BEGIN();
10044006:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10044008:	b672      	cpsid	i
}
1004400a:	46c0      	nop			@ (mov r8, r8)
#if defined (STM32WB06) || defined (STM32WB07)
      uint8_t dummy;
      bool share = FALSE;
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &dummy);
#endif
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
1004400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004400e:	681c      	ldr	r4, [r3, #0]
10044010:	685d      	ldr	r5, [r3, #4]
10044012:	f7ff fea5 	bl	10043d60 <HAL_RADIO_TIMER_GetCurrentSysTime>
10044016:	0002      	movs	r2, r0
10044018:	000b      	movs	r3, r1
1004401a:	1aa4      	subs	r4, r4, r2
1004401c:	419d      	sbcs	r5, r3
1004401e:	0022      	movs	r2, r4
10044020:	002b      	movs	r3, r5
10044022:	613a      	str	r2, [r7, #16]
10044024:	617b      	str	r3, [r7, #20]
      if (delay > 0)
10044026:	697b      	ldr	r3, [r7, #20]
10044028:	2b00      	cmp	r3, #0
1004402a:	dc05      	bgt.n	10044038 <_update_user_timeout+0x5c>
1004402c:	697b      	ldr	r3, [r7, #20]
1004402e:	2b00      	cmp	r3, #0
10044030:	d108      	bne.n	10044044 <_update_user_timeout+0x68>
10044032:	693b      	ldr	r3, [r7, #16]
10044034:	2b00      	cmp	r3, #0
10044036:	d005      	beq.n	10044044 <_update_user_timeout+0x68>
        {
          RADIO_TIMER_Context.radioTimer.pending |= RADIO_TIMER_Context.radioTimer.active;
          RADIO_TIMER_Context.radioTimer.active = FALSE;
        }
#else
        VTIMER_SetWakeupTime(delay, TRUE);
10044038:	693b      	ldr	r3, [r7, #16]
1004403a:	2101      	movs	r1, #1
1004403c:	0018      	movs	r0, r3
1004403e:	f000 f81d 	bl	1004407c <VTIMER_SetWakeupTime>
10044042:	e002      	b.n	1004404a <_update_user_timeout+0x6e>
#endif
      }
      else
      {
        *expired = 1;
10044044:	683b      	ldr	r3, [r7, #0]
10044046:	2201      	movs	r2, #1
10044048:	701a      	strb	r2, [r3, #0]
1004404a:	69fb      	ldr	r3, [r7, #28]
1004404c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004404e:	68bb      	ldr	r3, [r7, #8]
10044050:	f383 8810 	msr	PRIMASK, r3
}
10044054:	46c0      	nop			@ (mov r8, r8)
      }
      ATOMIC_SECTION_END();
      break;
10044056:	e005      	b.n	10044064 <_update_user_timeout+0x88>
    }
    curr = curr->next;
10044058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004405a:	691b      	ldr	r3, [r3, #16]
1004405c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (curr != NULL)
1004405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044060:	2b00      	cmp	r3, #0
10044062:	d1c8      	bne.n	10043ff6 <_update_user_timeout+0x1a>
  }
  if (*expired)
10044064:	683b      	ldr	r3, [r7, #0]
10044066:	781b      	ldrb	r3, [r3, #0]
10044068:	2b00      	cmp	r3, #0
1004406a:	d001      	beq.n	10044070 <_update_user_timeout+0x94>
  {
    return rootOrig;
1004406c:	6a3b      	ldr	r3, [r7, #32]
1004406e:	e000      	b.n	10044072 <_update_user_timeout+0x96>
  }

  return curr;
10044070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10044072:	0018      	movs	r0, r3
10044074:	46bd      	mov	sp, r7
10044076:	b00a      	add	sp, #40	@ 0x28
10044078:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004407c <VTIMER_SetWakeupTime>:

#if defined (STM32WB05) || defined (STM32WB09)
static uint32_t VTIMER_SetWakeupTime(uint32_t delay, bool allow_sleep)
{
1004407c:	b580      	push	{r7, lr}
1004407e:	b084      	sub	sp, #16
10044080:	af00      	add	r7, sp, #0
10044082:	6078      	str	r0, [r7, #4]
10044084:	000a      	movs	r2, r1
10044086:	1cfb      	adds	r3, r7, #3
10044088:	701a      	strb	r2, [r3, #0]
  uint32_t current_time;
  delay = blue_unit_conversion(delay, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ) ;
1004408a:	4b15      	ldr	r3, [pc, #84]	@ (100440e0 <VTIMER_SetWakeupTime+0x64>)
1004408c:	699b      	ldr	r3, [r3, #24]
1004408e:	0019      	movs	r1, r3
10044090:	4a14      	ldr	r2, [pc, #80]	@ (100440e4 <VTIMER_SetWakeupTime+0x68>)
10044092:	687b      	ldr	r3, [r7, #4]
10044094:	0018      	movs	r0, r3
10044096:	f7fc f813 	bl	100400c0 <blue_unit_conversion>
1004409a:	0003      	movs	r3, r0
1004409c:	607b      	str	r3, [r7, #4]
  /* If the delay is too small round to minimum 2 tick */
  delay = MAX(32, delay);
1004409e:	687b      	ldr	r3, [r7, #4]
100440a0:	2b20      	cmp	r3, #32
100440a2:	d200      	bcs.n	100440a6 <VTIMER_SetWakeupTime+0x2a>
100440a4:	2320      	movs	r3, #32
100440a6:	607b      	str	r3, [r7, #4]
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
100440a8:	4b0f      	ldr	r3, [pc, #60]	@ (100440e8 <VTIMER_SetWakeupTime+0x6c>)
100440aa:	0018      	movs	r0, r3
100440ac:	f7ff fd68 	bl	10043b80 <LL_RADIO_TIMER_GetAbsoluteTime>
100440b0:	0003      	movs	r3, r0
100440b2:	60fb      	str	r3, [r7, #12]
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP, ((current_time + (delay + 8)) & TIMER_MAX_VALUE));
100440b4:	687a      	ldr	r2, [r7, #4]
100440b6:	68fb      	ldr	r3, [r7, #12]
100440b8:	18d3      	adds	r3, r2, r3
100440ba:	3308      	adds	r3, #8
100440bc:	4a0a      	ldr	r2, [pc, #40]	@ (100440e8 <VTIMER_SetWakeupTime+0x6c>)
100440be:	0019      	movs	r1, r3
100440c0:	0010      	movs	r0, r2
100440c2:	f7ff fd51 	bl	10043b68 <LL_RADIO_TIMER_SetCPUWakeupTime>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
100440c6:	4b08      	ldr	r3, [pc, #32]	@ (100440e8 <VTIMER_SetWakeupTime+0x6c>)
100440c8:	0018      	movs	r0, r3
100440ca:	f7ff fd63 	bl	10043b94 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP);
100440ce:	4b06      	ldr	r3, [pc, #24]	@ (100440e8 <VTIMER_SetWakeupTime+0x6c>)
100440d0:	0018      	movs	r0, r3
100440d2:	f7ff fd1d 	bl	10043b10 <LL_RADIO_TIMER_EnableCPUWakeupTimer>

  return current_time;
100440d6:	68fb      	ldr	r3, [r7, #12]
}
100440d8:	0018      	movs	r0, r3
100440da:	46bd      	mov	sp, r7
100440dc:	b004      	add	sp, #16
100440de:	bd80      	pop	{r7, pc}
100440e0:	20000808 	.word	0x20000808
100440e4:	00000326 	.word	0x00000326
100440e8:	60001800 	.word	0x60001800

100440ec <_virtualTimeBaseEnable>:

  return returnValue;
}

static void _virtualTimeBaseEnable(FunctionalState state)
{
100440ec:	b580      	push	{r7, lr}
100440ee:	b082      	sub	sp, #8
100440f0:	af00      	add	r7, sp, #0
100440f2:	0002      	movs	r2, r0
100440f4:	1dfb      	adds	r3, r7, #7
100440f6:	701a      	strb	r2, [r3, #0]
  if (state != DISABLE)
100440f8:	1dfb      	adds	r3, r7, #7
100440fa:	781b      	ldrb	r3, [r3, #0]
100440fc:	2b00      	cmp	r3, #0
100440fe:	d010      	beq.n	10044122 <_virtualTimeBaseEnable+0x36>
  {
    if (RADIO_TIMER_Context.enableTimeBase == FALSE)
10044100:	4b0e      	ldr	r3, [pc, #56]	@ (1004413c <_virtualTimeBaseEnable+0x50>)
10044102:	2290      	movs	r2, #144	@ 0x90
10044104:	5c9b      	ldrb	r3, [r3, r2]
10044106:	2201      	movs	r2, #1
10044108:	4053      	eors	r3, r2
1004410a:	b2db      	uxtb	r3, r3
1004410c:	2b00      	cmp	r3, #0
1004410e:	d010      	beq.n	10044132 <_virtualTimeBaseEnable+0x46>
    {
      _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
10044110:	4b0b      	ldr	r3, [pc, #44]	@ (10044140 <_virtualTimeBaseEnable+0x54>)
10044112:	0018      	movs	r0, r3
10044114:	f7ff fee6 	bl	10043ee4 <_calibration_callback>
      RADIO_TIMER_Context.enableTimeBase = TRUE;
10044118:	4b08      	ldr	r3, [pc, #32]	@ (1004413c <_virtualTimeBaseEnable+0x50>)
1004411a:	2290      	movs	r2, #144	@ 0x90
1004411c:	2101      	movs	r1, #1
1004411e:	5499      	strb	r1, [r3, r2]
  else
  {
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
    RADIO_TIMER_Context.enableTimeBase = FALSE;
  }
}
10044120:	e007      	b.n	10044132 <_virtualTimeBaseEnable+0x46>
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
10044122:	4b07      	ldr	r3, [pc, #28]	@ (10044140 <_virtualTimeBaseEnable+0x54>)
10044124:	0018      	movs	r0, r3
10044126:	f7ff fe2d 	bl	10043d84 <HAL_RADIO_TIMER_StopVirtualTimer>
    RADIO_TIMER_Context.enableTimeBase = FALSE;
1004412a:	4b04      	ldr	r3, [pc, #16]	@ (1004413c <_virtualTimeBaseEnable+0x50>)
1004412c:	2290      	movs	r2, #144	@ 0x90
1004412e:	2100      	movs	r1, #0
10044130:	5499      	strb	r1, [r3, r2]
}
10044132:	46c0      	nop			@ (mov r8, r8)
10044134:	46bd      	mov	sp, r7
10044136:	b002      	add	sp, #8
10044138:	bd80      	pop	{r7, pc}
1004413a:	46c0      	nop			@ (mov r8, r8)
1004413c:	20000808 	.word	0x20000808
10044140:	20000848 	.word	0x20000848

10044144 <_remove_timer_in_queue>:

static VTIMER_HandleType *_remove_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
10044144:	b580      	push	{r7, lr}
10044146:	b086      	sub	sp, #24
10044148:	af00      	add	r7, sp, #0
1004414a:	6078      	str	r0, [r7, #4]
1004414c:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004414e:	687b      	ldr	r3, [r7, #4]
10044150:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
10044152:	2300      	movs	r3, #0
10044154:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
10044156:	687b      	ldr	r3, [r7, #4]
10044158:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current != handle))
1004415a:	e004      	b.n	10044166 <_remove_timer_in_queue+0x22>
  {
    prev = current;
1004415c:	697b      	ldr	r3, [r7, #20]
1004415e:	613b      	str	r3, [r7, #16]
    current = current->next;
10044160:	697b      	ldr	r3, [r7, #20]
10044162:	691b      	ldr	r3, [r3, #16]
10044164:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current != handle))
10044166:	697b      	ldr	r3, [r7, #20]
10044168:	2b00      	cmp	r3, #0
1004416a:	d003      	beq.n	10044174 <_remove_timer_in_queue+0x30>
1004416c:	697a      	ldr	r2, [r7, #20]
1004416e:	683b      	ldr	r3, [r7, #0]
10044170:	429a      	cmp	r2, r3
10044172:	d1f3      	bne.n	1004415c <_remove_timer_in_queue+0x18>
  }

  if (current == NULL)
10044174:	697b      	ldr	r3, [r7, #20]
10044176:	2b00      	cmp	r3, #0
10044178:	d00b      	beq.n	10044192 <_remove_timer_in_queue+0x4e>
  {
    /* Not found */
  }
  else if (current == rootNode)
1004417a:	697a      	ldr	r2, [r7, #20]
1004417c:	687b      	ldr	r3, [r7, #4]
1004417e:	429a      	cmp	r2, r3
10044180:	d103      	bne.n	1004418a <_remove_timer_in_queue+0x46>
  {
    /* New root node */
    returnValue = current->next;
10044182:	697b      	ldr	r3, [r7, #20]
10044184:	691b      	ldr	r3, [r3, #16]
10044186:	60fb      	str	r3, [r7, #12]
10044188:	e003      	b.n	10044192 <_remove_timer_in_queue+0x4e>
  }
  else
  {
    prev->next = current->next;
1004418a:	697b      	ldr	r3, [r7, #20]
1004418c:	691a      	ldr	r2, [r3, #16]
1004418e:	693b      	ldr	r3, [r7, #16]
10044190:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
10044192:	68fb      	ldr	r3, [r7, #12]
}
10044194:	0018      	movs	r0, r3
10044196:	46bd      	mov	sp, r7
10044198:	b006      	add	sp, #24
1004419a:	bd80      	pop	{r7, pc}

1004419c <_check_radio_activity>:
   3) The radio event is after the next calibration event. Then the timer will be programmed with the latest values.
   The check on the next calibration event is made even though the calibration is disabled (max cal. interval)
   in order to avoid counter wrapping with timeouts far in the future.
*/
static void _check_radio_activity(RADIO_TIMER_RadioHandleTypeDef *timerHandle, uint8_t *expired)
{
1004419c:	b5b0      	push	{r4, r5, r7, lr}
1004419e:	b08a      	sub	sp, #40	@ 0x28
100441a0:	af00      	add	r7, sp, #0
100441a2:	6078      	str	r0, [r7, #4]
100441a4:	6039      	str	r1, [r7, #0]
  uint64_t nextCalibrationEvent, currentTime;
  *expired = 0;
100441a6:	683b      	ldr	r3, [r7, #0]
100441a8:	2200      	movs	r2, #0
100441aa:	701a      	strb	r2, [r3, #0]
  if (timerHandle->pending)
100441ac:	687b      	ldr	r3, [r7, #4]
100441ae:	7a9b      	ldrb	r3, [r3, #10]
100441b0:	2b00      	cmp	r3, #0
100441b2:	d100      	bne.n	100441b6 <_check_radio_activity+0x1a>
100441b4:	e070      	b.n	10044298 <_check_radio_activity+0xfc>
  {
    
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
100441b6:	4b3a      	ldr	r3, [pc, #232]	@ (100442a0 <_check_radio_activity+0x104>)
100441b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
100441ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval;
100441bc:	4938      	ldr	r1, [pc, #224]	@ (100442a0 <_check_radio_activity+0x104>)
100441be:	6849      	ldr	r1, [r1, #4]
100441c0:	000c      	movs	r4, r1
100441c2:	2100      	movs	r1, #0
100441c4:	000d      	movs	r5, r1
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
100441c6:	1912      	adds	r2, r2, r4
100441c8:	416b      	adcs	r3, r5
100441ca:	623a      	str	r2, [r7, #32]
100441cc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100441ce:	f3ef 8310 	mrs	r3, PRIMASK
100441d2:	60fb      	str	r3, [r7, #12]
  return(result);
100441d4:	68fb      	ldr	r3, [r7, #12]

    ATOMIC_SECTION_BEGIN();
100441d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
100441d8:	b672      	cpsid	i
}
100441da:	46c0      	nop			@ (mov r8, r8)
    currentTime = HAL_RADIO_TIMER_GetCurrentSysTime();
100441dc:	f7ff fdc0 	bl	10043d60 <HAL_RADIO_TIMER_GetCurrentSysTime>
100441e0:	0002      	movs	r2, r0
100441e2:	000b      	movs	r3, r1
100441e4:	613a      	str	r2, [r7, #16]
100441e6:	617b      	str	r3, [r7, #20]
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
100441e8:	687b      	ldr	r3, [r7, #4]
100441ea:	681a      	ldr	r2, [r3, #0]
100441ec:	685b      	ldr	r3, [r3, #4]
100441ee:	6a38      	ldr	r0, [r7, #32]
100441f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
100441f2:	24c8      	movs	r4, #200	@ 0xc8
100441f4:	02a4      	lsls	r4, r4, #10
100441f6:	2500      	movs	r5, #0
100441f8:	1900      	adds	r0, r0, r4
100441fa:	4169      	adcs	r1, r5
100441fc:	4299      	cmp	r1, r3
100441fe:	d812      	bhi.n	10044226 <_check_radio_activity+0x8a>
10044200:	d101      	bne.n	10044206 <_check_radio_activity+0x6a>
10044202:	4290      	cmp	r0, r2
10044204:	d80f      	bhi.n	10044226 <_check_radio_activity+0x8a>
        (currentTime > (nextCalibrationEvent + CALIB_SAFE_THR)))
10044206:	6a3a      	ldr	r2, [r7, #32]
10044208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004420a:	20b9      	movs	r0, #185	@ 0xb9
1004420c:	0040      	lsls	r0, r0, #1
1004420e:	2100      	movs	r1, #0
10044210:	1812      	adds	r2, r2, r0
10044212:	414b      	adcs	r3, r1
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
10044214:	6979      	ldr	r1, [r7, #20]
10044216:	4299      	cmp	r1, r3
10044218:	d805      	bhi.n	10044226 <_check_radio_activity+0x8a>
1004421a:	6979      	ldr	r1, [r7, #20]
1004421c:	4299      	cmp	r1, r3
1004421e:	d135      	bne.n	1004428c <_check_radio_activity+0xf0>
10044220:	6939      	ldr	r1, [r7, #16]
10044222:	4291      	cmp	r1, r2
10044224:	d932      	bls.n	1004428c <_check_radio_activity+0xf0>
    {
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
10044226:	687b      	ldr	r3, [r7, #4]
10044228:	681a      	ldr	r2, [r3, #0]
1004422a:	685b      	ldr	r3, [r3, #4]
1004422c:	204c      	movs	r0, #76	@ 0x4c
1004422e:	4240      	negs	r0, r0
10044230:	17c1      	asrs	r1, r0, #31
10044232:	1880      	adds	r0, r0, r2
10044234:	4159      	adcs	r1, r3
10044236:	693a      	ldr	r2, [r7, #16]
10044238:	697b      	ldr	r3, [r7, #20]
1004423a:	240a      	movs	r4, #10
1004423c:	2500      	movs	r5, #0
1004423e:	1912      	adds	r2, r2, r4
10044240:	416b      	adcs	r3, r5
10044242:	4299      	cmp	r1, r3
10044244:	d802      	bhi.n	1004424c <_check_radio_activity+0xb0>
10044246:	d11a      	bne.n	1004427e <_check_radio_activity+0xe2>
10044248:	4290      	cmp	r0, r2
1004424a:	d918      	bls.n	1004427e <_check_radio_activity+0xe2>
      {
        *expired = TIMER_SetRadioTimerValue(timerHandle->expiryTime, timerHandle->event_type, timerHandle->cal_req);
1004424c:	687b      	ldr	r3, [r7, #4]
1004424e:	681a      	ldr	r2, [r3, #0]
10044250:	685b      	ldr	r3, [r3, #4]
10044252:	0010      	movs	r0, r2
10044254:	687b      	ldr	r3, [r7, #4]
10044256:	7b19      	ldrb	r1, [r3, #12]
10044258:	687b      	ldr	r3, [r7, #4]
1004425a:	7a1b      	ldrb	r3, [r3, #8]
1004425c:	001a      	movs	r2, r3
1004425e:	f000 f821 	bl	100442a4 <TIMER_SetRadioTimerValue>
10044262:	0003      	movs	r3, r0
10044264:	001a      	movs	r2, r3
10044266:	683b      	ldr	r3, [r7, #0]
10044268:	701a      	strb	r2, [r3, #0]
        timerHandle->pending = FALSE; /* timer has been served. No more pending */
1004426a:	687b      	ldr	r3, [r7, #4]
1004426c:	2200      	movs	r2, #0
1004426e:	729a      	strb	r2, [r3, #10]
        timerHandle->active = TRUE; /* timer has been programmed and it becomes ACTIVE */
10044270:	687b      	ldr	r3, [r7, #4]
10044272:	2201      	movs	r2, #1
10044274:	725a      	strb	r2, [r3, #9]
        timerHandle->intTxRx_to_be_served = TRUE;
10044276:	687b      	ldr	r3, [r7, #4]
10044278:	2201      	movs	r2, #1
1004427a:	72da      	strb	r2, [r3, #11]
1004427c:	e006      	b.n	1004428c <_check_radio_activity+0xf0>
      }
      else
      {
        
        RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004427e:	4b08      	ldr	r3, [pc, #32]	@ (100442a0 <_check_radio_activity+0x104>)
10044280:	2262      	movs	r2, #98	@ 0x62
10044282:	2100      	movs	r1, #0
10044284:	5499      	strb	r1, [r3, r2]
        *expired = 1;
10044286:	683b      	ldr	r3, [r7, #0]
10044288:	2201      	movs	r2, #1
1004428a:	701a      	strb	r2, [r3, #0]
1004428c:	69fb      	ldr	r3, [r7, #28]
1004428e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10044290:	68bb      	ldr	r3, [r7, #8]
10044292:	f383 8810 	msr	PRIMASK, r3
}
10044296:	46c0      	nop			@ (mov r8, r8)
#endif
    }
    ATOMIC_SECTION_END();
    
  }
}
10044298:	46c0      	nop			@ (mov r8, r8)
1004429a:	46bd      	mov	sp, r7
1004429c:	b00a      	add	sp, #40	@ 0x28
1004429e:	bdb0      	pop	{r4, r5, r7, pc}
100442a0:	20000808 	.word	0x20000808

100442a4 <TIMER_SetRadioTimerValue>:
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past
  * @retval  0 if a correct timeout has been programmed in the timeout register
  * @retval  1 if a correct timeout cannot be programmed
  */
static uint8_t TIMER_SetRadioTimerValue(uint32_t timeout, bool event_type, bool cal_req)
{
100442a4:	b580      	push	{r7, lr}
100442a6:	b08a      	sub	sp, #40	@ 0x28
100442a8:	af00      	add	r7, sp, #0
100442aa:	6078      	str	r0, [r7, #4]
100442ac:	0008      	movs	r0, r1
100442ae:	0011      	movs	r1, r2
100442b0:	1cfb      	adds	r3, r7, #3
100442b2:	1c02      	adds	r2, r0, #0
100442b4:	701a      	strb	r2, [r3, #0]
100442b6:	1cbb      	adds	r3, r7, #2
100442b8:	1c0a      	adds	r2, r1, #0
100442ba:	701a      	strb	r2, [r3, #0]
  uint32_t current_time, delay, radio_init_delay, device_delay, rel_timeout, rel_timeout_mt;
  uint8_t ret_val;

  /*choose the 2nd init duration. Check the event_type and cal. request*/
  if (event_type == TX)
100442bc:	1cfb      	adds	r3, r7, #3
100442be:	781b      	ldrb	r3, [r3, #0]
100442c0:	2b00      	cmp	r3, #0
100442c2:	d015      	beq.n	100442f0 <TIMER_SetRadioTimerValue+0x4c>
  {
    if (cal_req)
100442c4:	1cbb      	adds	r3, r7, #2
100442c6:	781b      	ldrb	r3, [r3, #0]
100442c8:	2b00      	cmp	r3, #0
100442ca:	d008      	beq.n	100442de <TIMER_SetRadioTimerValue+0x3a>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay;
100442cc:	4b67      	ldr	r3, [pc, #412]	@ (1004446c <TIMER_SetRadioTimerValue+0x1c8>)
100442ce:	2238      	movs	r2, #56	@ 0x38
100442d0:	5c9b      	ldrb	r3, [r3, r2]
100442d2:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
100442d4:	4b65      	ldr	r3, [pc, #404]	@ (1004446c <TIMER_SetRadioTimerValue+0x1c8>)
100442d6:	223c      	movs	r2, #60	@ 0x3c
100442d8:	5c9b      	ldrb	r3, [r3, r2]
100442da:	61fb      	str	r3, [r7, #28]
100442dc:	e01d      	b.n	1004431a <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_no_cal_delay;
100442de:	4b63      	ldr	r3, [pc, #396]	@ (1004446c <TIMER_SetRadioTimerValue+0x1c8>)
100442e0:	2239      	movs	r2, #57	@ 0x39
100442e2:	5c9b      	ldrb	r3, [r3, r2]
100442e4:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
100442e6:	4b61      	ldr	r3, [pc, #388]	@ (1004446c <TIMER_SetRadioTimerValue+0x1c8>)
100442e8:	223c      	movs	r2, #60	@ 0x3c
100442ea:	5c9b      	ldrb	r3, [r3, r2]
100442ec:	61fb      	str	r3, [r7, #28]
100442ee:	e014      	b.n	1004431a <TIMER_SetRadioTimerValue+0x76>
    }
  }
  else
  {
    if (cal_req)
100442f0:	1cbb      	adds	r3, r7, #2
100442f2:	781b      	ldrb	r3, [r3, #0]
100442f4:	2b00      	cmp	r3, #0
100442f6:	d008      	beq.n	1004430a <TIMER_SetRadioTimerValue+0x66>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_cal_delay;
100442f8:	4b5c      	ldr	r3, [pc, #368]	@ (1004446c <TIMER_SetRadioTimerValue+0x1c8>)
100442fa:	223a      	movs	r2, #58	@ 0x3a
100442fc:	5c9b      	ldrb	r3, [r3, r2]
100442fe:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10044300:	4b5a      	ldr	r3, [pc, #360]	@ (1004446c <TIMER_SetRadioTimerValue+0x1c8>)
10044302:	223c      	movs	r2, #60	@ 0x3c
10044304:	5c9b      	ldrb	r3, [r3, r2]
10044306:	61fb      	str	r3, [r7, #28]
10044308:	e007      	b.n	1004431a <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_no_cal_delay;
1004430a:	4b58      	ldr	r3, [pc, #352]	@ (1004446c <TIMER_SetRadioTimerValue+0x1c8>)
1004430c:	223b      	movs	r2, #59	@ 0x3b
1004430e:	5c9b      	ldrb	r3, [r3, r2]
10044310:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10044312:	4b56      	ldr	r3, [pc, #344]	@ (1004446c <TIMER_SetRadioTimerValue+0x1c8>)
10044314:	223c      	movs	r2, #60	@ 0x3c
10044316:	5c9b      	ldrb	r3, [r3, r2]
10044318:	61fb      	str	r3, [r7, #28]
    }
  }

  /* At this point, it is care of the upper layers to guarantee that the timeout represents an absolute time in the future */
  rel_timeout = timeout - (uint32_t)_get_system_time_and_machine(&RADIO_TIMER_Context, &current_time);
1004431a:	230c      	movs	r3, #12
1004431c:	18fa      	adds	r2, r7, r3
1004431e:	4b53      	ldr	r3, [pc, #332]	@ (1004446c <TIMER_SetRadioTimerValue+0x1c8>)
10044320:	0011      	movs	r1, r2
10044322:	0018      	movs	r0, r3
10044324:	f7ff fdf2 	bl	10043f0c <_get_system_time_and_machine>
10044328:	0002      	movs	r2, r0
1004432a:	000b      	movs	r3, r1
1004432c:	687b      	ldr	r3, [r7, #4]
1004432e:	1a9b      	subs	r3, r3, r2
10044330:	617b      	str	r3, [r7, #20]

  rel_timeout_mt =  blue_unit_conversion(rel_timeout, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
10044332:	4b4e      	ldr	r3, [pc, #312]	@ (1004446c <TIMER_SetRadioTimerValue+0x1c8>)
10044334:	699b      	ldr	r3, [r3, #24]
10044336:	0019      	movs	r1, r3
10044338:	4a4d      	ldr	r2, [pc, #308]	@ (10044470 <TIMER_SetRadioTimerValue+0x1cc>)
1004433a:	697b      	ldr	r3, [r7, #20]
1004433c:	0018      	movs	r0, r3
1004433e:	f7fb febf 	bl	100400c0 <blue_unit_conversion>
10044342:	0003      	movs	r3, r0
10044344:	613b      	str	r3, [r7, #16]

  /*Check if the timeout is beyond the wakeup time offset. Then program either the WakeUp timer or the Timer1*/
  if (rel_timeout > (device_delay + RADIO_TIMER_Context.hs_startup_time + MARGIN_EXT))
10044346:	4b49      	ldr	r3, [pc, #292]	@ (1004446c <TIMER_SetRadioTimerValue+0x1c8>)
10044348:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
1004434a:	69fb      	ldr	r3, [r7, #28]
1004434c:	18d3      	adds	r3, r2, r3
1004434e:	33c8      	adds	r3, #200	@ 0xc8
10044350:	697a      	ldr	r2, [r7, #20]
10044352:	429a      	cmp	r2, r3
10044354:	d92f      	bls.n	100443b6 <TIMER_SetRadioTimerValue+0x112>
  {
    /*The timeout is after the wakeup_time_offset, So it is ok to program the wakeup timer*/
    delay = rel_timeout_mt - BLUEGLOB->WAKEUPINITDELAY - radio_init_delay;
10044356:	4b47      	ldr	r3, [pc, #284]	@ (10044474 <TIMER_SetRadioTimerValue+0x1d0>)
10044358:	795b      	ldrb	r3, [r3, #5]
1004435a:	b2db      	uxtb	r3, r3
1004435c:	001a      	movs	r2, r3
1004435e:	693b      	ldr	r3, [r7, #16]
10044360:	1a9a      	subs	r2, r3, r2
10044362:	6a3b      	ldr	r3, [r7, #32]
10044364:	1ad3      	subs	r3, r2, r3
10044366:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay) & TIMER_MAX_VALUE));
10044368:	68fa      	ldr	r2, [r7, #12]
1004436a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004436c:	18d3      	adds	r3, r2, r3
1004436e:	4a42      	ldr	r2, [pc, #264]	@ (10044478 <TIMER_SetRadioTimerValue+0x1d4>)
10044370:	0019      	movs	r1, r3
10044372:	0010      	movs	r0, r2
10044374:	f7ff fbec 	bl	10043b50 <LL_RADIO_TIMER_SetBLEWakeupTime>
    LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
10044378:	4b3f      	ldr	r3, [pc, #252]	@ (10044478 <TIMER_SetRadioTimerValue+0x1d4>)
1004437a:	2100      	movs	r1, #0
1004437c:	0018      	movs	r0, r3
1004437e:	f7ff fc19 	bl	10043bb4 <LL_RADIO_TIMER_SetSleepRequestMode>
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10044382:	23c0      	movs	r3, #192	@ 0xc0
10044384:	05db      	lsls	r3, r3, #23
10044386:	0018      	movs	r0, r3
10044388:	f7ff fb79 	bl	10043a7e <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004438c:	23c0      	movs	r3, #192	@ 0xc0
1004438e:	05db      	lsls	r3, r3, #23
10044390:	0018      	movs	r0, r3
10044392:	f7ff fb83 	bl	10043a9c <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
10044396:	4b38      	ldr	r3, [pc, #224]	@ (10044478 <TIMER_SetRadioTimerValue+0x1d4>)
10044398:	0018      	movs	r0, r3
1004439a:	f7ff fb9a 	bl	10043ad2 <LL_RADIO_TIMER_EnableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004439e:	4b36      	ldr	r3, [pc, #216]	@ (10044478 <TIMER_SetRadioTimerValue+0x1d4>)
100443a0:	0018      	movs	r0, r3
100443a2:	f7ff fbf7 	bl	10043b94 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
    radio_init_delay += BLUEGLOB->WAKEUPINITDELAY;
100443a6:	4b33      	ldr	r3, [pc, #204]	@ (10044474 <TIMER_SetRadioTimerValue+0x1d0>)
100443a8:	795b      	ldrb	r3, [r3, #5]
100443aa:	b2db      	uxtb	r3, r3
100443ac:	001a      	movs	r2, r3
100443ae:	6a3b      	ldr	r3, [r7, #32]
100443b0:	189b      	adds	r3, r3, r2
100443b2:	623b      	str	r3, [r7, #32]
100443b4:	e021      	b.n	100443fa <TIMER_SetRadioTimerValue+0x156>
  }
  else
  {
    delay = rel_timeout_mt - RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt - radio_init_delay;
100443b6:	4b2d      	ldr	r3, [pc, #180]	@ (1004446c <TIMER_SetRadioTimerValue+0x1c8>)
100443b8:	223d      	movs	r2, #61	@ 0x3d
100443ba:	5c9b      	ldrb	r3, [r3, r2]
100443bc:	001a      	movs	r2, r3
100443be:	693b      	ldr	r3, [r7, #16]
100443c0:	1a9a      	subs	r2, r3, r2
100443c2:	6a3b      	ldr	r3, [r7, #32]
100443c4:	1ad3      	subs	r3, r2, r3
100443c6:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + delay) & TIMER_MAX_VALUE));
100443c8:	68fa      	ldr	r2, [r7, #12]
100443ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100443cc:	18d2      	adds	r2, r2, r3
100443ce:	23c0      	movs	r3, #192	@ 0xc0
100443d0:	05db      	lsls	r3, r3, #23
100443d2:	0011      	movs	r1, r2
100443d4:	0018      	movs	r0, r3
100443d6:	f7ff fb70 	bl	10043aba <LL_RADIO_TIMER_SetTimeout>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
100443da:	4b27      	ldr	r3, [pc, #156]	@ (10044478 <TIMER_SetRadioTimerValue+0x1d4>)
100443dc:	0018      	movs	r0, r3
100443de:	f7ff fb87 	bl	10043af0 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableTimer1(BLUE);
100443e2:	23c0      	movs	r3, #192	@ 0xc0
100443e4:	05db      	lsls	r3, r3, #23
100443e6:	0018      	movs	r0, r3
100443e8:	f7ff fb39 	bl	10043a5e <LL_RADIO_TIMER_EnableTimer1>
    radio_init_delay += RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt;
100443ec:	4b1f      	ldr	r3, [pc, #124]	@ (1004446c <TIMER_SetRadioTimerValue+0x1c8>)
100443ee:	223d      	movs	r2, #61	@ 0x3d
100443f0:	5c9b      	ldrb	r3, [r3, r2]
100443f2:	001a      	movs	r2, r3
100443f4:	6a3b      	ldr	r3, [r7, #32]
100443f6:	189b      	adds	r3, r3, r2
100443f8:	623b      	str	r3, [r7, #32]
  }

  RADIO_TIMER_Context.last_anchor_mt = (current_time + rel_timeout_mt) & TIMER_MAX_VALUE;
100443fa:	68fa      	ldr	r2, [r7, #12]
100443fc:	693b      	ldr	r3, [r7, #16]
100443fe:	18d2      	adds	r2, r2, r3
10044400:	4b1a      	ldr	r3, [pc, #104]	@ (1004446c <TIMER_SetRadioTimerValue+0x1c8>)
10044402:	2188      	movs	r1, #136	@ 0x88
10044404:	505a      	str	r2, [r3, r1]
  BLUEGLOB->BYTE22 = 0xF0;
  BLUEGLOB->BYTE23 = 0xFF;
#endif

  /* Basic low level check with an extra margin of machine units */
  if ((delay + radio_init_delay) < (radio_init_delay + 5))
10044406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10044408:	6a3b      	ldr	r3, [r7, #32]
1004440a:	18d2      	adds	r2, r2, r3
1004440c:	6a3b      	ldr	r3, [r7, #32]
1004440e:	3305      	adds	r3, #5
10044410:	429a      	cmp	r2, r3
10044412:	d212      	bcs.n	1004443a <TIMER_SetRadioTimerValue+0x196>
  {
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10044414:	23c0      	movs	r3, #192	@ 0xc0
10044416:	05db      	lsls	r3, r3, #23
10044418:	0018      	movs	r0, r3
1004441a:	f7ff fb30 	bl	10043a7e <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004441e:	23c0      	movs	r3, #192	@ 0xc0
10044420:	05db      	lsls	r3, r3, #23
10044422:	0018      	movs	r0, r3
10044424:	f7ff fb3a 	bl	10043a9c <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10044428:	4b13      	ldr	r3, [pc, #76]	@ (10044478 <TIMER_SetRadioTimerValue+0x1d4>)
1004442a:	0018      	movs	r0, r3
1004442c:	f7ff fb60 	bl	10043af0 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    ret_val =  1;
10044430:	231b      	movs	r3, #27
10044432:	18fb      	adds	r3, r7, r3
10044434:	2201      	movs	r2, #1
10044436:	701a      	strb	r2, [r3, #0]
10044438:	e010      	b.n	1004445c <TIMER_SetRadioTimerValue+0x1b8>
  }
  else
  {
    RADIO_TIMER_Context.last_setup_time = blue_unit_conversion(radio_init_delay, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004443a:	4b0c      	ldr	r3, [pc, #48]	@ (1004446c <TIMER_SetRadioTimerValue+0x1c8>)
1004443c:	69db      	ldr	r3, [r3, #28]
1004443e:	0019      	movs	r1, r3
10044440:	4a0e      	ldr	r2, [pc, #56]	@ (1004447c <TIMER_SetRadioTimerValue+0x1d8>)
10044442:	6a3b      	ldr	r3, [r7, #32]
10044444:	0018      	movs	r0, r3
10044446:	f7fb fe3b 	bl	100400c0 <blue_unit_conversion>
1004444a:	0003      	movs	r3, r0
1004444c:	b2d9      	uxtb	r1, r3
1004444e:	4b07      	ldr	r3, [pc, #28]	@ (1004446c <TIMER_SetRadioTimerValue+0x1c8>)
10044450:	2284      	movs	r2, #132	@ 0x84
10044452:	5499      	strb	r1, [r3, r2]
    ret_val = 0;
10044454:	231b      	movs	r3, #27
10044456:	18fb      	adds	r3, r7, r3
10044458:	2200      	movs	r2, #0
1004445a:	701a      	strb	r2, [r3, #0]
  }

  return ret_val;
1004445c:	231b      	movs	r3, #27
1004445e:	18fb      	adds	r3, r7, r3
10044460:	781b      	ldrb	r3, [r3, #0]
}
10044462:	0018      	movs	r0, r3
10044464:	46bd      	mov	sp, r7
10044466:	b00a      	add	sp, #40	@ 0x28
10044468:	bd80      	pop	{r7, pc}
1004446a:	46c0      	nop			@ (mov r8, r8)
1004446c:	20000808 	.word	0x20000808
10044470:	00000326 	.word	0x00000326
10044474:	200000c0 	.word	0x200000c0
10044478:	60001800 	.word	0x60001800
1004447c:	00000635 	.word	0x00000635

10044480 <TIMER_GetPastSysTime>:
  * @param   current_system_time: Current System time
  * @warning User should guarantee that call to this function are performed in a non-interruptible context.
  * @return  STU value
  */
static uint64_t TIMER_GetPastSysTime(uint32_t time, uint64_t *current_system_time)
{
10044480:	b5b0      	push	{r4, r5, r7, lr}
10044482:	b084      	sub	sp, #16
10044484:	af00      	add	r7, sp, #0
10044486:	6078      	str	r0, [r7, #4]
10044488:	6039      	str	r1, [r7, #0]
  uint32_t delta_systime, current_machine_time;

  *current_system_time = _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
1004448a:	2308      	movs	r3, #8
1004448c:	18fa      	adds	r2, r7, r3
1004448e:	4b12      	ldr	r3, [pc, #72]	@ (100444d8 <TIMER_GetPastSysTime+0x58>)
10044490:	0011      	movs	r1, r2
10044492:	0018      	movs	r0, r3
10044494:	f7ff fd3a 	bl	10043f0c <_get_system_time_and_machine>
10044498:	0002      	movs	r2, r0
1004449a:	000b      	movs	r3, r1
1004449c:	6839      	ldr	r1, [r7, #0]
1004449e:	600a      	str	r2, [r1, #0]
100444a0:	604b      	str	r3, [r1, #4]
  delta_systime = blue_unit_conversion(TIME_DIFF(current_machine_time, time), RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
100444a2:	68ba      	ldr	r2, [r7, #8]
100444a4:	687b      	ldr	r3, [r7, #4]
100444a6:	1ad0      	subs	r0, r2, r3
100444a8:	4b0b      	ldr	r3, [pc, #44]	@ (100444d8 <TIMER_GetPastSysTime+0x58>)
100444aa:	69db      	ldr	r3, [r3, #28]
100444ac:	0019      	movs	r1, r3
100444ae:	4b0b      	ldr	r3, [pc, #44]	@ (100444dc <TIMER_GetPastSysTime+0x5c>)
100444b0:	001a      	movs	r2, r3
100444b2:	f7fb fe05 	bl	100400c0 <blue_unit_conversion>
100444b6:	0003      	movs	r3, r0
100444b8:	60fb      	str	r3, [r7, #12]

  return (*current_system_time - delta_systime);
100444ba:	683b      	ldr	r3, [r7, #0]
100444bc:	681a      	ldr	r2, [r3, #0]
100444be:	685b      	ldr	r3, [r3, #4]
100444c0:	68f9      	ldr	r1, [r7, #12]
100444c2:	000c      	movs	r4, r1
100444c4:	2100      	movs	r1, #0
100444c6:	000d      	movs	r5, r1
100444c8:	1b12      	subs	r2, r2, r4
100444ca:	41ab      	sbcs	r3, r5
}
100444cc:	0010      	movs	r0, r2
100444ce:	0019      	movs	r1, r3
100444d0:	46bd      	mov	sp, r7
100444d2:	b004      	add	sp, #16
100444d4:	bdb0      	pop	{r4, r5, r7, pc}
100444d6:	46c0      	nop			@ (mov r8, r8)
100444d8:	20000808 	.word	0x20000808
100444dc:	00000635 	.word	0x00000635

100444e0 <HAL_RADIO_TIMER_CpuWakeUpCallback>:
    return 0;
  }
}

__weak void HAL_RADIO_TIMER_CpuWakeUpCallback(void)
{
100444e0:	b580      	push	{r7, lr}
100444e2:	af00      	add	r7, sp, #0
}
100444e4:	46c0      	nop			@ (mov r8, r8)
100444e6:	46bd      	mov	sp, r7
100444e8:	bd80      	pop	{r7, pc}

100444ea <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>:
__weak void HAL_RADIO_TIMER_TxRxWakeUpCallback(void)
{
}

void HAL_RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
100444ea:	b580      	push	{r7, lr}
100444ec:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TimeoutCallback();
100444ee:	f7ff fca1 	bl	10043e34 <HAL_RADIO_TIMER_TimeoutCallback>

  HAL_RADIO_TIMER_CpuWakeUpCallback();
100444f2:	f7ff fff5 	bl	100444e0 <HAL_RADIO_TIMER_CpuWakeUpCallback>
}
100444f6:	46c0      	nop			@ (mov r8, r8)
100444f8:	46bd      	mov	sp, r7
100444fa:	bd80      	pop	{r7, pc}

100444fc <HAL_RADIO_TIMER_ERROR_IRQHandler>:
  HAL_RADIO_TIMER_WakeUpCallback();
#endif
}

void HAL_RADIO_TIMER_ERROR_IRQHandler(void)
{
100444fc:	b580      	push	{r7, lr}
100444fe:	b082      	sub	sp, #8
10044500:	af00      	add	r7, sp, #0
  volatile uint32_t debug_cmd = 0;
10044502:	2300      	movs	r3, #0
10044504:	607b      	str	r3, [r7, #4]
  UNUSED(debug_cmd);
10044506:	687b      	ldr	r3, [r7, #4]
  BLUE->DEBUGCMDREG |= 1;
10044508:	23c0      	movs	r3, #192	@ 0xc0
1004450a:	05db      	lsls	r3, r3, #23
1004450c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
1004450e:	23c0      	movs	r3, #192	@ 0xc0
10044510:	05db      	lsls	r3, r3, #23
10044512:	2101      	movs	r1, #1
10044514:	430a      	orrs	r2, r1
10044516:	675a      	str	r2, [r3, #116]	@ 0x74
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  debug_cmd = BLUE->DEBUGCMDREG;
10044518:	23c0      	movs	r3, #192	@ 0xc0
1004451a:	05db      	lsls	r3, r3, #23
1004451c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004451e:	607b      	str	r3, [r7, #4]
}
10044520:	46c0      	nop			@ (mov r8, r8)
10044522:	46bd      	mov	sp, r7
10044524:	b002      	add	sp, #8
10044526:	bd80      	pop	{r7, pc}

10044528 <LL_PWR_SetNoPullB>:
{
10044528:	b580      	push	{r7, lr}
1004452a:	b082      	sub	sp, #8
1004452c:	af00      	add	r7, sp, #0
1004452e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10044530:	4b08      	ldr	r3, [pc, #32]	@ (10044554 <LL_PWR_SetNoPullB+0x2c>)
10044532:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10044534:	687b      	ldr	r3, [r7, #4]
10044536:	43d9      	mvns	r1, r3
10044538:	4b06      	ldr	r3, [pc, #24]	@ (10044554 <LL_PWR_SetNoPullB+0x2c>)
1004453a:	400a      	ands	r2, r1
1004453c:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004453e:	4b05      	ldr	r3, [pc, #20]	@ (10044554 <LL_PWR_SetNoPullB+0x2c>)
10044540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10044542:	687b      	ldr	r3, [r7, #4]
10044544:	43d9      	mvns	r1, r3
10044546:	4b03      	ldr	r3, [pc, #12]	@ (10044554 <LL_PWR_SetNoPullB+0x2c>)
10044548:	400a      	ands	r2, r1
1004454a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004454c:	46c0      	nop			@ (mov r8, r8)
1004454e:	46bd      	mov	sp, r7
10044550:	b002      	add	sp, #8
10044552:	bd80      	pop	{r7, pc}
10044554:	48500000 	.word	0x48500000

10044558 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
10044558:	b580      	push	{r7, lr}
1004455a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
1004455c:	4b04      	ldr	r3, [pc, #16]	@ (10044570 <LL_RCC_HSE_Enable+0x18>)
1004455e:	681a      	ldr	r2, [r3, #0]
10044560:	4b03      	ldr	r3, [pc, #12]	@ (10044570 <LL_RCC_HSE_Enable+0x18>)
10044562:	2180      	movs	r1, #128	@ 0x80
10044564:	0249      	lsls	r1, r1, #9
10044566:	430a      	orrs	r2, r1
10044568:	601a      	str	r2, [r3, #0]
}
1004456a:	46c0      	nop			@ (mov r8, r8)
1004456c:	46bd      	mov	sp, r7
1004456e:	bd80      	pop	{r7, pc}
10044570:	48400000 	.word	0x48400000

10044574 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
10044574:	b580      	push	{r7, lr}
10044576:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
10044578:	4b04      	ldr	r3, [pc, #16]	@ (1004458c <LL_RCC_HSE_Disable+0x18>)
1004457a:	681a      	ldr	r2, [r3, #0]
1004457c:	4b03      	ldr	r3, [pc, #12]	@ (1004458c <LL_RCC_HSE_Disable+0x18>)
1004457e:	4904      	ldr	r1, [pc, #16]	@ (10044590 <LL_RCC_HSE_Disable+0x1c>)
10044580:	400a      	ands	r2, r1
10044582:	601a      	str	r2, [r3, #0]
}
10044584:	46c0      	nop			@ (mov r8, r8)
10044586:	46bd      	mov	sp, r7
10044588:	bd80      	pop	{r7, pc}
1004458a:	46c0      	nop			@ (mov r8, r8)
1004458c:	48400000 	.word	0x48400000
10044590:	fffeffff 	.word	0xfffeffff

10044594 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
10044594:	b580      	push	{r7, lr}
10044596:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10044598:	4b07      	ldr	r3, [pc, #28]	@ (100445b8 <LL_RCC_HSE_IsReady+0x24>)
1004459a:	681a      	ldr	r2, [r3, #0]
1004459c:	2380      	movs	r3, #128	@ 0x80
1004459e:	029b      	lsls	r3, r3, #10
100445a0:	401a      	ands	r2, r3
100445a2:	2380      	movs	r3, #128	@ 0x80
100445a4:	029b      	lsls	r3, r3, #10
100445a6:	429a      	cmp	r2, r3
100445a8:	d101      	bne.n	100445ae <LL_RCC_HSE_IsReady+0x1a>
100445aa:	2301      	movs	r3, #1
100445ac:	e000      	b.n	100445b0 <LL_RCC_HSE_IsReady+0x1c>
100445ae:	2300      	movs	r3, #0
}
100445b0:	0018      	movs	r0, r3
100445b2:	46bd      	mov	sp, r7
100445b4:	bd80      	pop	{r7, pc}
100445b6:	46c0      	nop			@ (mov r8, r8)
100445b8:	48400000 	.word	0x48400000

100445bc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll RFSWHSECR        SWXOTUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
100445bc:	b580      	push	{r7, lr}
100445be:	b082      	sub	sp, #8
100445c0:	af00      	add	r7, sp, #0
100445c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNE, Value << RCC_RFSWHSECR_SWXOTUNE_Pos);
100445c4:	4a0b      	ldr	r2, [pc, #44]	@ (100445f4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
100445c6:	2398      	movs	r3, #152	@ 0x98
100445c8:	58d3      	ldr	r3, [r2, r3]
100445ca:	4a0b      	ldr	r2, [pc, #44]	@ (100445f8 <LL_RCC_HSE_SetCapacitorTuning+0x3c>)
100445cc:	401a      	ands	r2, r3
100445ce:	687b      	ldr	r3, [r7, #4]
100445d0:	021b      	lsls	r3, r3, #8
100445d2:	4908      	ldr	r1, [pc, #32]	@ (100445f4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
100445d4:	4313      	orrs	r3, r2
100445d6:	2298      	movs	r2, #152	@ 0x98
100445d8:	508b      	str	r3, [r1, r2]
  SET_BIT(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNEEN);
100445da:	4a06      	ldr	r2, [pc, #24]	@ (100445f4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
100445dc:	2398      	movs	r3, #152	@ 0x98
100445de:	58d3      	ldr	r3, [r2, r3]
100445e0:	4904      	ldr	r1, [pc, #16]	@ (100445f4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
100445e2:	2280      	movs	r2, #128	@ 0x80
100445e4:	4313      	orrs	r3, r2
100445e6:	2298      	movs	r2, #152	@ 0x98
100445e8:	508b      	str	r3, [r1, r2]
}
100445ea:	46c0      	nop			@ (mov r8, r8)
100445ec:	46bd      	mov	sp, r7
100445ee:	b002      	add	sp, #8
100445f0:	bd80      	pop	{r7, pc}
100445f2:	46c0      	nop			@ (mov r8, r8)
100445f4:	48400000 	.word	0x48400000
100445f8:	ffffc0ff 	.word	0xffffc0ff

100445fc <LL_RCC_HSE_SetCurrentControl>:
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_5
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_6
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_7
  */
__STATIC_INLINE void LL_RCC_HSE_SetCurrentControl(uint32_t CurrentMax)
{
100445fc:	b580      	push	{r7, lr}
100445fe:	b082      	sub	sp, #8
10044600:	af00      	add	r7, sp, #0
10044602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_GMC, CurrentMax);
10044604:	4a07      	ldr	r2, [pc, #28]	@ (10044624 <LL_RCC_HSE_SetCurrentControl+0x28>)
10044606:	2398      	movs	r3, #152	@ 0x98
10044608:	58d3      	ldr	r3, [r2, r3]
1004460a:	2270      	movs	r2, #112	@ 0x70
1004460c:	4393      	bics	r3, r2
1004460e:	001a      	movs	r2, r3
10044610:	4904      	ldr	r1, [pc, #16]	@ (10044624 <LL_RCC_HSE_SetCurrentControl+0x28>)
10044612:	687b      	ldr	r3, [r7, #4]
10044614:	4313      	orrs	r3, r2
10044616:	2298      	movs	r2, #152	@ 0x98
10044618:	508b      	str	r3, [r1, r2]
}
1004461a:	46c0      	nop			@ (mov r8, r8)
1004461c:	46bd      	mov	sp, r7
1004461e:	b002      	add	sp, #8
10044620:	bd80      	pop	{r7, pc}
10044622:	46c0      	nop			@ (mov r8, r8)
10044624:	48400000 	.word	0x48400000

10044628 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
10044628:	b580      	push	{r7, lr}
1004462a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004462c:	4b07      	ldr	r3, [pc, #28]	@ (1004464c <LL_RCC_HSI_Enable+0x24>)
1004462e:	689a      	ldr	r2, [r3, #8]
10044630:	4b06      	ldr	r3, [pc, #24]	@ (1004464c <LL_RCC_HSI_Enable+0x24>)
10044632:	2104      	movs	r1, #4
10044634:	438a      	bics	r2, r1
10044636:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10044638:	4b04      	ldr	r3, [pc, #16]	@ (1004464c <LL_RCC_HSI_Enable+0x24>)
1004463a:	689a      	ldr	r2, [r3, #8]
1004463c:	4b03      	ldr	r3, [pc, #12]	@ (1004464c <LL_RCC_HSI_Enable+0x24>)
1004463e:	2102      	movs	r1, #2
10044640:	438a      	bics	r2, r1
10044642:	609a      	str	r2, [r3, #8]
}
10044644:	46c0      	nop			@ (mov r8, r8)
10044646:	46bd      	mov	sp, r7
10044648:	bd80      	pop	{r7, pc}
1004464a:	46c0      	nop			@ (mov r8, r8)
1004464c:	48400000 	.word	0x48400000

10044650 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
10044650:	b580      	push	{r7, lr}
10044652:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10044654:	4b07      	ldr	r3, [pc, #28]	@ (10044674 <LL_RCC_HSI_Disable+0x24>)
10044656:	689a      	ldr	r2, [r3, #8]
10044658:	4b06      	ldr	r3, [pc, #24]	@ (10044674 <LL_RCC_HSI_Disable+0x24>)
1004465a:	2102      	movs	r1, #2
1004465c:	430a      	orrs	r2, r1
1004465e:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10044660:	4b04      	ldr	r3, [pc, #16]	@ (10044674 <LL_RCC_HSI_Disable+0x24>)
10044662:	689a      	ldr	r2, [r3, #8]
10044664:	4b03      	ldr	r3, [pc, #12]	@ (10044674 <LL_RCC_HSI_Disable+0x24>)
10044666:	2104      	movs	r1, #4
10044668:	430a      	orrs	r2, r1
1004466a:	609a      	str	r2, [r3, #8]
}
1004466c:	46c0      	nop			@ (mov r8, r8)
1004466e:	46bd      	mov	sp, r7
10044670:	bd80      	pop	{r7, pc}
10044672:	46c0      	nop			@ (mov r8, r8)
10044674:	48400000 	.word	0x48400000

10044678 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
10044678:	b580      	push	{r7, lr}
1004467a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
1004467c:	4b07      	ldr	r3, [pc, #28]	@ (1004469c <LL_RCC_HSI_IsReady+0x24>)
1004467e:	681a      	ldr	r2, [r3, #0]
10044680:	2380      	movs	r3, #128	@ 0x80
10044682:	00db      	lsls	r3, r3, #3
10044684:	401a      	ands	r2, r3
10044686:	2380      	movs	r3, #128	@ 0x80
10044688:	00db      	lsls	r3, r3, #3
1004468a:	429a      	cmp	r2, r3
1004468c:	d101      	bne.n	10044692 <LL_RCC_HSI_IsReady+0x1a>
1004468e:	2301      	movs	r3, #1
10044690:	e000      	b.n	10044694 <LL_RCC_HSI_IsReady+0x1c>
10044692:	2300      	movs	r3, #0
}
10044694:	0018      	movs	r0, r3
10044696:	46bd      	mov	sp, r7
10044698:	bd80      	pop	{r7, pc}
1004469a:	46c0      	nop			@ (mov r8, r8)
1004469c:	48400000 	.word	0x48400000

100446a0 <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
100446a0:	b580      	push	{r7, lr}
100446a2:	b082      	sub	sp, #8
100446a4:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
100446a6:	46c0      	nop			@ (mov r8, r8)
100446a8:	4b0f      	ldr	r3, [pc, #60]	@ (100446e8 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100446aa:	681a      	ldr	r2, [r3, #0]
100446ac:	2380      	movs	r3, #128	@ 0x80
100446ae:	029b      	lsls	r3, r3, #10
100446b0:	4013      	ands	r3, r2
100446b2:	d0f9      	beq.n	100446a8 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
100446b4:	4b0c      	ldr	r3, [pc, #48]	@ (100446e8 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100446b6:	689a      	ldr	r2, [r3, #8]
100446b8:	4b0b      	ldr	r3, [pc, #44]	@ (100446e8 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100446ba:	2102      	movs	r1, #2
100446bc:	430a      	orrs	r2, r1
100446be:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
100446c0:	2300      	movs	r3, #0
100446c2:	607b      	str	r3, [r7, #4]
100446c4:	e003      	b.n	100446ce <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
100446c6:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
100446c8:	687b      	ldr	r3, [r7, #4]
100446ca:	3301      	adds	r3, #1
100446cc:	607b      	str	r3, [r7, #4]
100446ce:	687b      	ldr	r3, [r7, #4]
100446d0:	2b05      	cmp	r3, #5
100446d2:	ddf8      	ble.n	100446c6 <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
100446d4:	4b04      	ldr	r3, [pc, #16]	@ (100446e8 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100446d6:	689a      	ldr	r2, [r3, #8]
100446d8:	4b03      	ldr	r3, [pc, #12]	@ (100446e8 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100446da:	2104      	movs	r1, #4
100446dc:	430a      	orrs	r2, r1
100446de:	609a      	str	r2, [r3, #8]
}
100446e0:	46c0      	nop			@ (mov r8, r8)
100446e2:	46bd      	mov	sp, r7
100446e4:	b002      	add	sp, #8
100446e6:	bd80      	pop	{r7, pc}
100446e8:	48400000 	.word	0x48400000

100446ec <LL_RCC_LSCO_SetSource>:
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSCO_SetSource(uint32_t Source)
{
100446ec:	b580      	push	{r7, lr}
100446ee:	b082      	sub	sp, #8
100446f0:	af00      	add	r7, sp, #0
100446f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
100446f4:	4b06      	ldr	r3, [pc, #24]	@ (10044710 <LL_RCC_LSCO_SetSource+0x24>)
100446f6:	689b      	ldr	r3, [r3, #8]
100446f8:	4a06      	ldr	r2, [pc, #24]	@ (10044714 <LL_RCC_LSCO_SetSource+0x28>)
100446fa:	4013      	ands	r3, r2
100446fc:	0019      	movs	r1, r3
100446fe:	4b04      	ldr	r3, [pc, #16]	@ (10044710 <LL_RCC_LSCO_SetSource+0x24>)
10044700:	687a      	ldr	r2, [r7, #4]
10044702:	430a      	orrs	r2, r1
10044704:	609a      	str	r2, [r3, #8]
}
10044706:	46c0      	nop			@ (mov r8, r8)
10044708:	46bd      	mov	sp, r7
1004470a:	b002      	add	sp, #8
1004470c:	bd80      	pop	{r7, pc}
1004470e:	46c0      	nop			@ (mov r8, r8)
10044710:	48400000 	.word	0x48400000
10044714:	fffe7fff 	.word	0xfffe7fff

10044718 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
10044718:	b580      	push	{r7, lr}
1004471a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
1004471c:	4b04      	ldr	r3, [pc, #16]	@ (10044730 <LL_RCC_LSE_Enable+0x18>)
1004471e:	681a      	ldr	r2, [r3, #0]
10044720:	4b03      	ldr	r3, [pc, #12]	@ (10044730 <LL_RCC_LSE_Enable+0x18>)
10044722:	2110      	movs	r1, #16
10044724:	430a      	orrs	r2, r1
10044726:	601a      	str	r2, [r3, #0]
}
10044728:	46c0      	nop			@ (mov r8, r8)
1004472a:	46bd      	mov	sp, r7
1004472c:	bd80      	pop	{r7, pc}
1004472e:	46c0      	nop			@ (mov r8, r8)
10044730:	48400000 	.word	0x48400000

10044734 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
10044734:	b580      	push	{r7, lr}
10044736:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
10044738:	4b04      	ldr	r3, [pc, #16]	@ (1004474c <LL_RCC_LSE_Disable+0x18>)
1004473a:	681a      	ldr	r2, [r3, #0]
1004473c:	4b03      	ldr	r3, [pc, #12]	@ (1004474c <LL_RCC_LSE_Disable+0x18>)
1004473e:	2110      	movs	r1, #16
10044740:	438a      	bics	r2, r1
10044742:	601a      	str	r2, [r3, #0]
}
10044744:	46c0      	nop			@ (mov r8, r8)
10044746:	46bd      	mov	sp, r7
10044748:	bd80      	pop	{r7, pc}
1004474a:	46c0      	nop			@ (mov r8, r8)
1004474c:	48400000 	.word	0x48400000

10044750 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
10044750:	b580      	push	{r7, lr}
10044752:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
10044754:	4b05      	ldr	r3, [pc, #20]	@ (1004476c <LL_RCC_LSE_IsReady+0x1c>)
10044756:	681b      	ldr	r3, [r3, #0]
10044758:	2220      	movs	r2, #32
1004475a:	4013      	ands	r3, r2
1004475c:	2b20      	cmp	r3, #32
1004475e:	d101      	bne.n	10044764 <LL_RCC_LSE_IsReady+0x14>
10044760:	2301      	movs	r3, #1
10044762:	e000      	b.n	10044766 <LL_RCC_LSE_IsReady+0x16>
10044764:	2300      	movs	r3, #0
}
10044766:	0018      	movs	r0, r3
10044768:	46bd      	mov	sp, r7
1004476a:	bd80      	pop	{r7, pc}
1004476c:	48400000 	.word	0x48400000

10044770 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
10044770:	b580      	push	{r7, lr}
10044772:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEBYP);
10044774:	4b04      	ldr	r3, [pc, #16]	@ (10044788 <LL_RCC_LSE_EnableBypass+0x18>)
10044776:	681a      	ldr	r2, [r3, #0]
10044778:	4b03      	ldr	r3, [pc, #12]	@ (10044788 <LL_RCC_LSE_EnableBypass+0x18>)
1004477a:	2140      	movs	r1, #64	@ 0x40
1004477c:	430a      	orrs	r2, r1
1004477e:	601a      	str	r2, [r3, #0]
}
10044780:	46c0      	nop			@ (mov r8, r8)
10044782:	46bd      	mov	sp, r7
10044784:	bd80      	pop	{r7, pc}
10044786:	46c0      	nop			@ (mov r8, r8)
10044788:	48400000 	.word	0x48400000

1004478c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
1004478c:	b580      	push	{r7, lr}
1004478e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEBYP);
10044790:	4b04      	ldr	r3, [pc, #16]	@ (100447a4 <LL_RCC_LSE_DisableBypass+0x18>)
10044792:	681a      	ldr	r2, [r3, #0]
10044794:	4b03      	ldr	r3, [pc, #12]	@ (100447a4 <LL_RCC_LSE_DisableBypass+0x18>)
10044796:	2140      	movs	r1, #64	@ 0x40
10044798:	438a      	bics	r2, r1
1004479a:	601a      	str	r2, [r3, #0]
}
1004479c:	46c0      	nop			@ (mov r8, r8)
1004479e:	46bd      	mov	sp, r7
100447a0:	bd80      	pop	{r7, pc}
100447a2:	46c0      	nop			@ (mov r8, r8)
100447a4:	48400000 	.word	0x48400000

100447a8 <LL_RCC_LSE_IsBypassEnabled>:
  * @brief  Check if LSE bypass configuration is enabled.
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_IsBypassEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsBypassEnabled(void)
{
100447a8:	b580      	push	{r7, lr}
100447aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEBYP) == (RCC_CR_LSEBYP)) ? 1UL : 0UL);
100447ac:	4b05      	ldr	r3, [pc, #20]	@ (100447c4 <LL_RCC_LSE_IsBypassEnabled+0x1c>)
100447ae:	681b      	ldr	r3, [r3, #0]
100447b0:	2240      	movs	r2, #64	@ 0x40
100447b2:	4013      	ands	r3, r2
100447b4:	2b40      	cmp	r3, #64	@ 0x40
100447b6:	d101      	bne.n	100447bc <LL_RCC_LSE_IsBypassEnabled+0x14>
100447b8:	2301      	movs	r3, #1
100447ba:	e000      	b.n	100447be <LL_RCC_LSE_IsBypassEnabled+0x16>
100447bc:	2300      	movs	r3, #0
}
100447be:	0018      	movs	r0, r3
100447c0:	46bd      	mov	sp, r7
100447c2:	bd80      	pop	{r7, pc}
100447c4:	48400000 	.word	0x48400000

100447c8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
100447c8:	b580      	push	{r7, lr}
100447ca:	b082      	sub	sp, #8
100447cc:	af00      	add	r7, sp, #0
100447ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSEDRV, LSEDrive);
100447d0:	4b06      	ldr	r3, [pc, #24]	@ (100447ec <LL_RCC_LSE_SetDriveCapability+0x24>)
100447d2:	68db      	ldr	r3, [r3, #12]
100447d4:	2260      	movs	r2, #96	@ 0x60
100447d6:	4393      	bics	r3, r2
100447d8:	0019      	movs	r1, r3
100447da:	4b04      	ldr	r3, [pc, #16]	@ (100447ec <LL_RCC_LSE_SetDriveCapability+0x24>)
100447dc:	687a      	ldr	r2, [r7, #4]
100447de:	430a      	orrs	r2, r1
100447e0:	60da      	str	r2, [r3, #12]
}
100447e2:	46c0      	nop			@ (mov r8, r8)
100447e4:	46bd      	mov	sp, r7
100447e6:	b002      	add	sp, #8
100447e8:	bd80      	pop	{r7, pc}
100447ea:	46c0      	nop			@ (mov r8, r8)
100447ec:	48400000 	.word	0x48400000

100447f0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
100447f0:	b580      	push	{r7, lr}
100447f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
100447f4:	4b04      	ldr	r3, [pc, #16]	@ (10044808 <LL_RCC_LSI_Enable+0x18>)
100447f6:	681a      	ldr	r2, [r3, #0]
100447f8:	4b03      	ldr	r3, [pc, #12]	@ (10044808 <LL_RCC_LSI_Enable+0x18>)
100447fa:	2104      	movs	r1, #4
100447fc:	430a      	orrs	r2, r1
100447fe:	601a      	str	r2, [r3, #0]
}
10044800:	46c0      	nop			@ (mov r8, r8)
10044802:	46bd      	mov	sp, r7
10044804:	bd80      	pop	{r7, pc}
10044806:	46c0      	nop			@ (mov r8, r8)
10044808:	48400000 	.word	0x48400000

1004480c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
1004480c:	b580      	push	{r7, lr}
1004480e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
10044810:	4b04      	ldr	r3, [pc, #16]	@ (10044824 <LL_RCC_LSI_Disable+0x18>)
10044812:	681a      	ldr	r2, [r3, #0]
10044814:	4b03      	ldr	r3, [pc, #12]	@ (10044824 <LL_RCC_LSI_Disable+0x18>)
10044816:	2104      	movs	r1, #4
10044818:	438a      	bics	r2, r1
1004481a:	601a      	str	r2, [r3, #0]
}
1004481c:	46c0      	nop			@ (mov r8, r8)
1004481e:	46bd      	mov	sp, r7
10044820:	bd80      	pop	{r7, pc}
10044822:	46c0      	nop			@ (mov r8, r8)
10044824:	48400000 	.word	0x48400000

10044828 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
10044828:	b580      	push	{r7, lr}
1004482a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
1004482c:	4b05      	ldr	r3, [pc, #20]	@ (10044844 <LL_RCC_LSI_IsReady+0x1c>)
1004482e:	681b      	ldr	r3, [r3, #0]
10044830:	2208      	movs	r2, #8
10044832:	4013      	ands	r3, r2
10044834:	2b08      	cmp	r3, #8
10044836:	d101      	bne.n	1004483c <LL_RCC_LSI_IsReady+0x14>
10044838:	2301      	movs	r3, #1
1004483a:	e000      	b.n	1004483e <LL_RCC_LSI_IsReady+0x16>
1004483c:	2300      	movs	r3, #0
}
1004483e:	0018      	movs	r0, r3
10044840:	46bd      	mov	sp, r7
10044842:	bd80      	pop	{r7, pc}
10044844:	48400000 	.word	0x48400000

10044848 <LL_RCC_RC64MPLL_Enable>:
  * @brief  Enable RC64MPLL
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Enable(void)
{
10044848:	b580      	push	{r7, lr}
1004484a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
1004484c:	4b04      	ldr	r3, [pc, #16]	@ (10044860 <LL_RCC_RC64MPLL_Enable+0x18>)
1004484e:	681a      	ldr	r2, [r3, #0]
10044850:	4b03      	ldr	r3, [pc, #12]	@ (10044860 <LL_RCC_RC64MPLL_Enable+0x18>)
10044852:	2180      	movs	r1, #128	@ 0x80
10044854:	0189      	lsls	r1, r1, #6
10044856:	430a      	orrs	r2, r1
10044858:	601a      	str	r2, [r3, #0]
}
1004485a:	46c0      	nop			@ (mov r8, r8)
1004485c:	46bd      	mov	sp, r7
1004485e:	bd80      	pop	{r7, pc}
10044860:	48400000 	.word	0x48400000

10044864 <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
10044864:	b580      	push	{r7, lr}
10044866:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
10044868:	4b04      	ldr	r3, [pc, #16]	@ (1004487c <LL_RCC_RC64MPLL_Disable+0x18>)
1004486a:	681a      	ldr	r2, [r3, #0]
1004486c:	4b03      	ldr	r3, [pc, #12]	@ (1004487c <LL_RCC_RC64MPLL_Disable+0x18>)
1004486e:	4904      	ldr	r1, [pc, #16]	@ (10044880 <LL_RCC_RC64MPLL_Disable+0x1c>)
10044870:	400a      	ands	r2, r1
10044872:	601a      	str	r2, [r3, #0]
}
10044874:	46c0      	nop			@ (mov r8, r8)
10044876:	46bd      	mov	sp, r7
10044878:	bd80      	pop	{r7, pc}
1004487a:	46c0      	nop			@ (mov r8, r8)
1004487c:	48400000 	.word	0x48400000
10044880:	ffffdfff 	.word	0xffffdfff

10044884 <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
10044884:	b580      	push	{r7, lr}
10044886:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
10044888:	4b07      	ldr	r3, [pc, #28]	@ (100448a8 <LL_RCC_RC64MPLL_IsReady+0x24>)
1004488a:	681a      	ldr	r2, [r3, #0]
1004488c:	2380      	movs	r3, #128	@ 0x80
1004488e:	01db      	lsls	r3, r3, #7
10044890:	401a      	ands	r2, r3
10044892:	2380      	movs	r3, #128	@ 0x80
10044894:	01db      	lsls	r3, r3, #7
10044896:	429a      	cmp	r2, r3
10044898:	d101      	bne.n	1004489e <LL_RCC_RC64MPLL_IsReady+0x1a>
1004489a:	2301      	movs	r3, #1
1004489c:	e000      	b.n	100448a0 <LL_RCC_RC64MPLL_IsReady+0x1c>
1004489e:	2300      	movs	r3, #0
}
100448a0:	0018      	movs	r0, r3
100448a2:	46bd      	mov	sp, r7
100448a4:	bd80      	pop	{r7, pc}
100448a6:	46c0      	nop			@ (mov r8, r8)
100448a8:	48400000 	.word	0x48400000

100448ac <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
100448ac:	b580      	push	{r7, lr}
100448ae:	b082      	sub	sp, #8
100448b0:	af00      	add	r7, sp, #0
100448b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
100448b4:	4b06      	ldr	r3, [pc, #24]	@ (100448d0 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
100448b6:	689b      	ldr	r3, [r3, #8]
100448b8:	22e0      	movs	r2, #224	@ 0xe0
100448ba:	4393      	bics	r3, r2
100448bc:	0019      	movs	r1, r3
100448be:	4b04      	ldr	r3, [pc, #16]	@ (100448d0 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
100448c0:	687a      	ldr	r2, [r7, #4]
100448c2:	430a      	orrs	r2, r1
100448c4:	609a      	str	r2, [r3, #8]
}
100448c6:	46c0      	nop			@ (mov r8, r8)
100448c8:	46bd      	mov	sp, r7
100448ca:	b002      	add	sp, #8
100448cc:	bd80      	pop	{r7, pc}
100448ce:	46c0      	nop			@ (mov r8, r8)
100448d0:	48400000 	.word	0x48400000

100448d4 <HAL_RCC_OscConfig>:
  * @param  RCC_OscInitStruct  pointer to a @ref RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
100448d4:	b580      	push	{r7, lr}
100448d6:	b084      	sub	sp, #16
100448d8:	af00      	add	r7, sp, #0
100448da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
100448dc:	687b      	ldr	r3, [r7, #4]
100448de:	2b00      	cmp	r3, #0
100448e0:	d101      	bne.n	100448e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
100448e2:	2301      	movs	r3, #1
100448e4:	e13c      	b.n	10044b60 <HAL_RCC_OscConfig+0x28c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSI Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
100448e6:	687b      	ldr	r3, [r7, #4]
100448e8:	681b      	ldr	r3, [r3, #0]
100448ea:	2210      	movs	r2, #16
100448ec:	4013      	ands	r3, r2
100448ee:	d033      	beq.n	10044958 <HAL_RCC_OscConfig+0x84>
  {
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
100448f0:	687b      	ldr	r3, [r7, #4]
100448f2:	689b      	ldr	r3, [r3, #8]
100448f4:	2b00      	cmp	r3, #0
100448f6:	d102      	bne.n	100448fe <HAL_RCC_OscConfig+0x2a>
100448f8:	f7ff fe96 	bl	10044628 <LL_RCC_HSI_Enable>
100448fc:	e001      	b.n	10044902 <HAL_RCC_OscConfig+0x2e>
100448fe:	f7ff fea7 	bl	10044650 <LL_RCC_HSI_Disable>

    if(RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
10044902:	687b      	ldr	r3, [r7, #4]
10044904:	689b      	ldr	r3, [r3, #8]
10044906:	2b04      	cmp	r3, #4
10044908:	d113      	bne.n	10044932 <HAL_RCC_OscConfig+0x5e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004490a:	f7fd fcf7 	bl	100422fc <HAL_GetTick>
1004490e:	0003      	movs	r3, r0
10044910:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is disabled */
      while (LL_RCC_HSI_IsReady() == 1U)
10044912:	e008      	b.n	10044926 <HAL_RCC_OscConfig+0x52>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10044914:	f7fd fcf2 	bl	100422fc <HAL_GetTick>
10044918:	0002      	movs	r2, r0
1004491a:	68fb      	ldr	r3, [r7, #12]
1004491c:	1ad3      	subs	r3, r2, r3
1004491e:	2b64      	cmp	r3, #100	@ 0x64
10044920:	d901      	bls.n	10044926 <HAL_RCC_OscConfig+0x52>
        {
          return HAL_TIMEOUT;
10044922:	2303      	movs	r3, #3
10044924:	e11c      	b.n	10044b60 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() == 1U)
10044926:	f7ff fea7 	bl	10044678 <LL_RCC_HSI_IsReady>
1004492a:	0003      	movs	r3, r0
1004492c:	2b01      	cmp	r3, #1
1004492e:	d0f1      	beq.n	10044914 <HAL_RCC_OscConfig+0x40>
10044930:	e012      	b.n	10044958 <HAL_RCC_OscConfig+0x84>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10044932:	f7fd fce3 	bl	100422fc <HAL_GetTick>
10044936:	0003      	movs	r3, r0
10044938:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is enabled */
      while (LL_RCC_HSI_IsReady() != 1U)
1004493a:	e008      	b.n	1004494e <HAL_RCC_OscConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004493c:	f7fd fcde 	bl	100422fc <HAL_GetTick>
10044940:	0002      	movs	r2, r0
10044942:	68fb      	ldr	r3, [r7, #12]
10044944:	1ad3      	subs	r3, r2, r3
10044946:	2b64      	cmp	r3, #100	@ 0x64
10044948:	d901      	bls.n	1004494e <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
1004494a:	2303      	movs	r3, #3
1004494c:	e108      	b.n	10044b60 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() != 1U)
1004494e:	f7ff fe93 	bl	10044678 <LL_RCC_HSI_IsReady>
10044952:	0003      	movs	r3, r0
10044954:	2b01      	cmp	r3, #1
10044956:	d1f1      	bne.n	1004493c <HAL_RCC_OscConfig+0x68>
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10044958:	687b      	ldr	r3, [r7, #4]
1004495a:	681b      	ldr	r3, [r3, #0]
1004495c:	2201      	movs	r2, #1
1004495e:	4013      	ands	r3, r2
10044960:	d039      	beq.n	100449d6 <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* Set HSE Capacitor Tuning */
    LL_RCC_HSE_SetCapacitorTuning(CFG_HW_RCC_HSE_CAPACITOR_TUNE);
10044962:	2020      	movs	r0, #32
10044964:	f7ff fe2a 	bl	100445bc <LL_RCC_HSE_SetCapacitorTuning>

    /* Set HSE Current Control */
    LL_RCC_HSE_SetCurrentControl(LL_RCC_HSE_CURRENTMAX_3);
10044968:	2030      	movs	r0, #48	@ 0x30
1004496a:	f7ff fe47 	bl	100445fc <LL_RCC_HSE_SetCurrentControl>

    /* Set the new HSE configuration ---------------------------------------*/
    __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
1004496e:	687b      	ldr	r3, [r7, #4]
10044970:	685a      	ldr	r2, [r3, #4]
10044972:	2380      	movs	r3, #128	@ 0x80
10044974:	025b      	lsls	r3, r3, #9
10044976:	429a      	cmp	r2, r3
10044978:	d102      	bne.n	10044980 <HAL_RCC_OscConfig+0xac>
1004497a:	f7ff fded 	bl	10044558 <LL_RCC_HSE_Enable>
1004497e:	e001      	b.n	10044984 <HAL_RCC_OscConfig+0xb0>
10044980:	f7ff fdf8 	bl	10044574 <LL_RCC_HSE_Disable>

    /* Check the HSE State */
    if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
10044984:	687b      	ldr	r3, [r7, #4]
10044986:	685b      	ldr	r3, [r3, #4]
10044988:	2b00      	cmp	r3, #0
1004498a:	d012      	beq.n	100449b2 <HAL_RCC_OscConfig+0xde>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004498c:	f7fd fcb6 	bl	100422fc <HAL_GetTick>
10044990:	0003      	movs	r3, r0
10044992:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is ready */
      while (LL_RCC_HSE_IsReady() == 0U)
10044994:	e008      	b.n	100449a8 <HAL_RCC_OscConfig+0xd4>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10044996:	f7fd fcb1 	bl	100422fc <HAL_GetTick>
1004499a:	0002      	movs	r2, r0
1004499c:	68fb      	ldr	r3, [r7, #12]
1004499e:	1ad3      	subs	r3, r2, r3
100449a0:	2b64      	cmp	r3, #100	@ 0x64
100449a2:	d901      	bls.n	100449a8 <HAL_RCC_OscConfig+0xd4>
        {
          return HAL_TIMEOUT;
100449a4:	2303      	movs	r3, #3
100449a6:	e0db      	b.n	10044b60 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() == 0U)
100449a8:	f7ff fdf4 	bl	10044594 <LL_RCC_HSE_IsReady>
100449ac:	1e03      	subs	r3, r0, #0
100449ae:	d0f2      	beq.n	10044996 <HAL_RCC_OscConfig+0xc2>
100449b0:	e011      	b.n	100449d6 <HAL_RCC_OscConfig+0x102>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100449b2:	f7fd fca3 	bl	100422fc <HAL_GetTick>
100449b6:	0003      	movs	r3, r0
100449b8:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is disabled */
      while (LL_RCC_HSE_IsReady() != 0U)
100449ba:	e008      	b.n	100449ce <HAL_RCC_OscConfig+0xfa>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100449bc:	f7fd fc9e 	bl	100422fc <HAL_GetTick>
100449c0:	0002      	movs	r2, r0
100449c2:	68fb      	ldr	r3, [r7, #12]
100449c4:	1ad3      	subs	r3, r2, r3
100449c6:	2b64      	cmp	r3, #100	@ 0x64
100449c8:	d901      	bls.n	100449ce <HAL_RCC_OscConfig+0xfa>
        {
          return HAL_TIMEOUT;
100449ca:	2303      	movs	r3, #3
100449cc:	e0c8      	b.n	10044b60 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() != 0U)
100449ce:	f7ff fde1 	bl	10044594 <LL_RCC_HSE_IsReady>
100449d2:	1e03      	subs	r3, r0, #0
100449d4:	d1f2      	bne.n	100449bc <HAL_RCC_OscConfig+0xe8>
      }
    }
  }

  /*--------------------------------- LSI Configuration -----------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
100449d6:	687b      	ldr	r3, [r7, #4]
100449d8:	681b      	ldr	r3, [r3, #0]
100449da:	2204      	movs	r2, #4
100449dc:	4013      	ands	r3, r2
100449de:	d03a      	beq.n	10044a56 <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
100449e0:	687b      	ldr	r3, [r7, #4]
100449e2:	691b      	ldr	r3, [r3, #16]
100449e4:	2b00      	cmp	r3, #0
100449e6:	d022      	beq.n	10044a2e <HAL_RCC_OscConfig+0x15a>
    {
      /* Disable the LSI */
      __HAL_RCC_LSI_DISABLE();
100449e8:	f7ff ff10 	bl	1004480c <LL_RCC_LSI_Disable>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U);
100449ec:	46c0      	nop			@ (mov r8, r8)
100449ee:	f7ff ff1b 	bl	10044828 <LL_RCC_LSI_IsReady>
100449f2:	1e03      	subs	r3, r0, #0
100449f4:	d1fb      	bne.n	100449ee <HAL_RCC_OscConfig+0x11a>

      /* Disable the LSE */
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
100449f6:	f7ff fe9d 	bl	10044734 <LL_RCC_LSE_Disable>

      /* Configure the Low Speed Clock to LSI */
      LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSI);
100449fa:	2380      	movs	r3, #128	@ 0x80
100449fc:	025b      	lsls	r3, r3, #9
100449fe:	0018      	movs	r0, r3
10044a00:	f7ff fe74 	bl	100446ec <LL_RCC_LSCO_SetSource>

      /*  Enable the Internal Low Speed oscillator (LSI)  */
      __HAL_RCC_LSI_ENABLE();
10044a04:	f7ff fef4 	bl	100447f0 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10044a08:	f7fd fc78 	bl	100422fc <HAL_GetTick>
10044a0c:	0003      	movs	r3, r0
10044a0e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
10044a10:	e008      	b.n	10044a24 <HAL_RCC_OscConfig+0x150>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10044a12:	f7fd fc73 	bl	100422fc <HAL_GetTick>
10044a16:	0002      	movs	r2, r0
10044a18:	68fb      	ldr	r3, [r7, #12]
10044a1a:	1ad3      	subs	r3, r2, r3
10044a1c:	2b02      	cmp	r3, #2
10044a1e:	d901      	bls.n	10044a24 <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
10044a20:	2303      	movs	r3, #3
10044a22:	e09d      	b.n	10044b60 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
10044a24:	f7ff ff00 	bl	10044828 <LL_RCC_LSI_IsReady>
10044a28:	1e03      	subs	r3, r0, #0
10044a2a:	d0f2      	beq.n	10044a12 <HAL_RCC_OscConfig+0x13e>
10044a2c:	e013      	b.n	10044a56 <HAL_RCC_OscConfig+0x182>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10044a2e:	f7ff feed 	bl	1004480c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10044a32:	f7fd fc63 	bl	100422fc <HAL_GetTick>
10044a36:	0003      	movs	r3, r0
10044a38:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
10044a3a:	e008      	b.n	10044a4e <HAL_RCC_OscConfig+0x17a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10044a3c:	f7fd fc5e 	bl	100422fc <HAL_GetTick>
10044a40:	0002      	movs	r2, r0
10044a42:	68fb      	ldr	r3, [r7, #12]
10044a44:	1ad3      	subs	r3, r2, r3
10044a46:	2b02      	cmp	r3, #2
10044a48:	d901      	bls.n	10044a4e <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
10044a4a:	2303      	movs	r3, #3
10044a4c:	e088      	b.n	10044b60 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
10044a4e:	f7ff feeb 	bl	10044828 <LL_RCC_LSI_IsReady>
10044a52:	1e03      	subs	r3, r0, #0
10044a54:	d1f2      	bne.n	10044a3c <HAL_RCC_OscConfig+0x168>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10044a56:	687b      	ldr	r3, [r7, #4]
10044a58:	681b      	ldr	r3, [r3, #0]
10044a5a:	2202      	movs	r2, #2
10044a5c:	4013      	ands	r3, r2
10044a5e:	d047      	beq.n	10044af0 <HAL_RCC_OscConfig+0x21c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Disable LSI */
    __HAL_RCC_LSI_DISABLE();
10044a60:	f7ff fed4 	bl	1004480c <LL_RCC_LSI_Disable>

    /* Disable LSE */
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
10044a64:	f7ff fe66 	bl	10044734 <LL_RCC_LSE_Disable>
    while (__HAL_RCC_GET_LSE_READYFLAG() != 0);
10044a68:	46c0      	nop			@ (mov r8, r8)
10044a6a:	f7ff fe71 	bl	10044750 <LL_RCC_LSE_IsReady>
10044a6e:	1e03      	subs	r3, r0, #0
10044a70:	d1fb      	bne.n	10044a6a <HAL_RCC_OscConfig+0x196>

    /* Configure the PB12 and PB13 in NO PULL mode */
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 |
10044a72:	23c0      	movs	r3, #192	@ 0xc0
10044a74:	019b      	lsls	r3, r3, #6
10044a76:	0018      	movs	r0, r3
10044a78:	f7ff fd56 	bl	10044528 <LL_PWR_SetNoPullB>
                      LL_PWR_GPIO_BIT_13);

    /* Configure the Low Speed Clock to LSE */
    LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSE);
10044a7c:	2380      	movs	r3, #128	@ 0x80
10044a7e:	021b      	lsls	r3, r3, #8
10044a80:	0018      	movs	r0, r3
10044a82:	f7ff fe33 	bl	100446ec <LL_RCC_LSCO_SetSource>

    /* Set LSE oscillator drive capability */
    __HAL_RCC_LSEDRIVE_CONFIG(LSE_DRIVE_LEVEL);
10044a86:	2020      	movs	r0, #32
10044a88:	f7ff fe9e 	bl	100447c8 <LL_RCC_LSE_SetDriveCapability>


    /* Set the new LSE state */
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
10044a8c:	687b      	ldr	r3, [r7, #4]
10044a8e:	68db      	ldr	r3, [r3, #12]
10044a90:	2b10      	cmp	r3, #16
10044a92:	d102      	bne.n	10044a9a <HAL_RCC_OscConfig+0x1c6>
10044a94:	f7ff fe40 	bl	10044718 <LL_RCC_LSE_Enable>
10044a98:	e001      	b.n	10044a9e <HAL_RCC_OscConfig+0x1ca>
10044a9a:	f7ff fe4b 	bl	10044734 <LL_RCC_LSE_Disable>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
10044a9e:	687b      	ldr	r3, [r7, #4]
10044aa0:	68db      	ldr	r3, [r3, #12]
10044aa2:	2b00      	cmp	r3, #0
10044aa4:	d012      	beq.n	10044acc <HAL_RCC_OscConfig+0x1f8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10044aa6:	f7fd fc29 	bl	100422fc <HAL_GetTick>
10044aaa:	0003      	movs	r3, r0
10044aac:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
10044aae:	e008      	b.n	10044ac2 <HAL_RCC_OscConfig+0x1ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10044ab0:	f7fd fc24 	bl	100422fc <HAL_GetTick>
10044ab4:	0002      	movs	r2, r0
10044ab6:	68fb      	ldr	r3, [r7, #12]
10044ab8:	1ad3      	subs	r3, r2, r3
10044aba:	2b64      	cmp	r3, #100	@ 0x64
10044abc:	d901      	bls.n	10044ac2 <HAL_RCC_OscConfig+0x1ee>
        {
          return HAL_TIMEOUT;
10044abe:	2303      	movs	r3, #3
10044ac0:	e04e      	b.n	10044b60 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
10044ac2:	f7ff fe45 	bl	10044750 <LL_RCC_LSE_IsReady>
10044ac6:	1e03      	subs	r3, r0, #0
10044ac8:	d0f2      	beq.n	10044ab0 <HAL_RCC_OscConfig+0x1dc>
10044aca:	e011      	b.n	10044af0 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10044acc:	f7fd fc16 	bl	100422fc <HAL_GetTick>
10044ad0:	0003      	movs	r3, r0
10044ad2:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
10044ad4:	e008      	b.n	10044ae8 <HAL_RCC_OscConfig+0x214>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10044ad6:	f7fd fc11 	bl	100422fc <HAL_GetTick>
10044ada:	0002      	movs	r2, r0
10044adc:	68fb      	ldr	r3, [r7, #12]
10044ade:	1ad3      	subs	r3, r2, r3
10044ae0:	2b64      	cmp	r3, #100	@ 0x64
10044ae2:	d901      	bls.n	10044ae8 <HAL_RCC_OscConfig+0x214>
        {
          return HAL_TIMEOUT;
10044ae4:	2303      	movs	r3, #3
10044ae6:	e03b      	b.n	10044b60 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
10044ae8:	f7ff fe32 	bl	10044750 <LL_RCC_LSE_IsReady>
10044aec:	1e03      	subs	r3, r0, #0
10044aee:	d1f2      	bne.n	10044ad6 <HAL_RCC_OscConfig+0x202>
      }
    }
  }

  /*------------------------------ LSE Bypass Configuration ------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE_BYPASS) == RCC_OSCILLATORTYPE_LSE_BYPASS)
10044af0:	687b      	ldr	r3, [r7, #4]
10044af2:	681b      	ldr	r3, [r3, #0]
10044af4:	2208      	movs	r2, #8
10044af6:	4013      	ands	r3, r2
10044af8:	d031      	beq.n	10044b5e <HAL_RCC_OscConfig+0x28a>

    /* Check the parameters */
    assert_param(IS_RCC_LSE_BYPASS(RCC_OscInitStruct->LSEBYPASSState));

    /* Set the new LSE Bypass configuration -----------------------------------------*/
    __HAL_RCC_LSE_BYPASS_CONFIG(RCC_OscInitStruct->LSEBYPASSState);
10044afa:	687b      	ldr	r3, [r7, #4]
10044afc:	695b      	ldr	r3, [r3, #20]
10044afe:	2b40      	cmp	r3, #64	@ 0x40
10044b00:	d102      	bne.n	10044b08 <HAL_RCC_OscConfig+0x234>
10044b02:	f7ff fe35 	bl	10044770 <LL_RCC_LSE_EnableBypass>
10044b06:	e001      	b.n	10044b0c <HAL_RCC_OscConfig+0x238>
10044b08:	f7ff fe40 	bl	1004478c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE Bypass State */
    if (RCC_OscInitStruct->LSEBYPASSState != RCC_LSE_OFF)
10044b0c:	687b      	ldr	r3, [r7, #4]
10044b0e:	695b      	ldr	r3, [r3, #20]
10044b10:	2b00      	cmp	r3, #0
10044b12:	d012      	beq.n	10044b3a <HAL_RCC_OscConfig+0x266>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10044b14:	f7fd fbf2 	bl	100422fc <HAL_GetTick>
10044b18:	0003      	movs	r3, r0
10044b1a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
10044b1c:	e008      	b.n	10044b30 <HAL_RCC_OscConfig+0x25c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10044b1e:	f7fd fbed 	bl	100422fc <HAL_GetTick>
10044b22:	0002      	movs	r2, r0
10044b24:	68fb      	ldr	r3, [r7, #12]
10044b26:	1ad3      	subs	r3, r2, r3
10044b28:	2b64      	cmp	r3, #100	@ 0x64
10044b2a:	d901      	bls.n	10044b30 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
10044b2c:	2303      	movs	r3, #3
10044b2e:	e017      	b.n	10044b60 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
10044b30:	f7ff fe3a 	bl	100447a8 <LL_RCC_LSE_IsBypassEnabled>
10044b34:	1e03      	subs	r3, r0, #0
10044b36:	d0f2      	beq.n	10044b1e <HAL_RCC_OscConfig+0x24a>
10044b38:	e011      	b.n	10044b5e <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10044b3a:	f7fd fbdf 	bl	100422fc <HAL_GetTick>
10044b3e:	0003      	movs	r3, r0
10044b40:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
10044b42:	e008      	b.n	10044b56 <HAL_RCC_OscConfig+0x282>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10044b44:	f7fd fbda 	bl	100422fc <HAL_GetTick>
10044b48:	0002      	movs	r2, r0
10044b4a:	68fb      	ldr	r3, [r7, #12]
10044b4c:	1ad3      	subs	r3, r2, r3
10044b4e:	2b64      	cmp	r3, #100	@ 0x64
10044b50:	d901      	bls.n	10044b56 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
10044b52:	2303      	movs	r3, #3
10044b54:	e004      	b.n	10044b60 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
10044b56:	f7ff fe27 	bl	100447a8 <LL_RCC_LSE_IsBypassEnabled>
10044b5a:	1e03      	subs	r3, r0, #0
10044b5c:	d1f2      	bne.n	10044b44 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }

  return HAL_OK;
10044b5e:	2300      	movs	r3, #0
}
10044b60:	0018      	movs	r0, r3
10044b62:	46bd      	mov	sp, r7
10044b64:	b004      	add	sp, #16
10044b66:	bd80      	pop	{r7, pc}

10044b68 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
10044b68:	b580      	push	{r7, lr}
10044b6a:	b084      	sub	sp, #16
10044b6c:	af00      	add	r7, sp, #0
10044b6e:	6078      	str	r0, [r7, #4]
10044b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10044b72:	687b      	ldr	r3, [r7, #4]
10044b74:	2b00      	cmp	r3, #0
10044b76:	d101      	bne.n	10044b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
10044b78:	2301      	movs	r3, #1
10044b7a:	e098      	b.n	10044cae <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
10044b7c:	4b4e      	ldr	r3, [pc, #312]	@ (10044cb8 <HAL_RCC_ClockConfig+0x150>)
10044b7e:	685b      	ldr	r3, [r3, #4]
10044b80:	2230      	movs	r2, #48	@ 0x30
10044b82:	4393      	bics	r3, r2
10044b84:	0019      	movs	r1, r3
10044b86:	4b4c      	ldr	r3, [pc, #304]	@ (10044cb8 <HAL_RCC_ClockConfig+0x150>)
10044b88:	683a      	ldr	r2, [r7, #0]
10044b8a:	430a      	orrs	r2, r1
10044b8c:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
10044b8e:	687b      	ldr	r3, [r7, #4]
10044b90:	681b      	ldr	r3, [r3, #0]
10044b92:	2b02      	cmp	r3, #2
10044b94:	d10e      	bne.n	10044bb4 <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
10044b96:	f7ff fd47 	bl	10044628 <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10044b9a:	f7ff fd6d 	bl	10044678 <LL_RCC_HSI_IsReady>
10044b9e:	1e03      	subs	r3, r0, #0
10044ba0:	d101      	bne.n	10044ba6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
10044ba2:	2301      	movs	r3, #1
10044ba4:	e083      	b.n	10044cae <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
10044ba6:	f7ff fe5d 	bl	10044864 <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10044baa:	687b      	ldr	r3, [r7, #4]
10044bac:	685b      	ldr	r3, [r3, #4]
10044bae:	0018      	movs	r0, r3
10044bb0:	f7ff fe7c 	bl	100448ac <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
10044bb4:	687b      	ldr	r3, [r7, #4]
10044bb6:	681b      	ldr	r3, [r3, #0]
10044bb8:	2b00      	cmp	r3, #0
10044bba:	d124      	bne.n	10044c06 <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10044bbc:	f7ff fd5c 	bl	10044678 <LL_RCC_HSI_IsReady>
10044bc0:	1e03      	subs	r3, r0, #0
10044bc2:	d101      	bne.n	10044bc8 <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
10044bc4:	2301      	movs	r3, #1
10044bc6:	e072      	b.n	10044cae <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10044bc8:	f7ff fce4 	bl	10044594 <LL_RCC_HSE_IsReady>
10044bcc:	1e03      	subs	r3, r0, #0
10044bce:	d101      	bne.n	10044bd4 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
10044bd0:	2301      	movs	r3, #1
10044bd2:	e06c      	b.n	10044cae <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
10044bd4:	f7ff fe38 	bl	10044848 <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10044bd8:	f7fd fb90 	bl	100422fc <HAL_GetTick>
10044bdc:	0003      	movs	r3, r0
10044bde:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10044be0:	e008      	b.n	10044bf4 <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10044be2:	f7fd fb8b 	bl	100422fc <HAL_GetTick>
10044be6:	0002      	movs	r2, r0
10044be8:	68fb      	ldr	r3, [r7, #12]
10044bea:	1ad3      	subs	r3, r2, r3
10044bec:	2b02      	cmp	r3, #2
10044bee:	d901      	bls.n	10044bf4 <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
10044bf0:	2303      	movs	r3, #3
10044bf2:	e05c      	b.n	10044cae <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10044bf4:	f7ff fe46 	bl	10044884 <LL_RCC_RC64MPLL_IsReady>
10044bf8:	1e03      	subs	r3, r0, #0
10044bfa:	d0f2      	beq.n	10044be2 <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10044bfc:	687b      	ldr	r3, [r7, #4]
10044bfe:	685b      	ldr	r3, [r3, #4]
10044c00:	0018      	movs	r0, r3
10044c02:	f7ff fe53 	bl	100448ac <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
10044c06:	687b      	ldr	r3, [r7, #4]
10044c08:	681b      	ldr	r3, [r3, #0]
10044c0a:	2b01      	cmp	r3, #1
10044c0c:	d117      	bne.n	10044c3e <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
10044c0e:	f7ff fd47 	bl	100446a0 <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
10044c12:	f7ff fd31 	bl	10044678 <LL_RCC_HSI_IsReady>
10044c16:	1e03      	subs	r3, r0, #0
10044c18:	d001      	beq.n	10044c1e <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
10044c1a:	2301      	movs	r3, #1
10044c1c:	e047      	b.n	10044cae <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10044c1e:	f7ff fcb9 	bl	10044594 <LL_RCC_HSE_IsReady>
10044c22:	1e03      	subs	r3, r0, #0
10044c24:	d101      	bne.n	10044c2a <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
10044c26:	2301      	movs	r3, #1
10044c28:	e041      	b.n	10044cae <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10044c2a:	4b24      	ldr	r3, [pc, #144]	@ (10044cbc <HAL_RCC_ClockConfig+0x154>)
10044c2c:	689b      	ldr	r3, [r3, #8]
10044c2e:	22e0      	movs	r2, #224	@ 0xe0
10044c30:	4393      	bics	r3, r2
10044c32:	0019      	movs	r1, r3
10044c34:	687b      	ldr	r3, [r7, #4]
10044c36:	685a      	ldr	r2, [r3, #4]
10044c38:	4b20      	ldr	r3, [pc, #128]	@ (10044cbc <HAL_RCC_ClockConfig+0x154>)
10044c3a:	430a      	orrs	r2, r1
10044c3c:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
10044c3e:	4b1e      	ldr	r3, [pc, #120]	@ (10044cb8 <HAL_RCC_ClockConfig+0x150>)
10044c40:	685b      	ldr	r3, [r3, #4]
10044c42:	2230      	movs	r2, #48	@ 0x30
10044c44:	4013      	ands	r3, r2
10044c46:	683a      	ldr	r2, [r7, #0]
10044c48:	429a      	cmp	r2, r3
10044c4a:	d01d      	beq.n	10044c88 <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
10044c4c:	4b1a      	ldr	r3, [pc, #104]	@ (10044cb8 <HAL_RCC_ClockConfig+0x150>)
10044c4e:	685b      	ldr	r3, [r3, #4]
10044c50:	2230      	movs	r2, #48	@ 0x30
10044c52:	4393      	bics	r3, r2
10044c54:	0019      	movs	r1, r3
10044c56:	4b18      	ldr	r3, [pc, #96]	@ (10044cb8 <HAL_RCC_ClockConfig+0x150>)
10044c58:	683a      	ldr	r2, [r7, #0]
10044c5a:	430a      	orrs	r2, r1
10044c5c:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10044c5e:	f7fd fb4d 	bl	100422fc <HAL_GetTick>
10044c62:	0003      	movs	r3, r0
10044c64:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
10044c66:	e008      	b.n	10044c7a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
10044c68:	f7fd fb48 	bl	100422fc <HAL_GetTick>
10044c6c:	0002      	movs	r2, r0
10044c6e:	68fb      	ldr	r3, [r7, #12]
10044c70:	1ad3      	subs	r3, r2, r3
10044c72:	2b02      	cmp	r3, #2
10044c74:	d901      	bls.n	10044c7a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
10044c76:	2303      	movs	r3, #3
10044c78:	e019      	b.n	10044cae <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
10044c7a:	4b0f      	ldr	r3, [pc, #60]	@ (10044cb8 <HAL_RCC_ClockConfig+0x150>)
10044c7c:	685b      	ldr	r3, [r3, #4]
10044c7e:	2230      	movs	r2, #48	@ 0x30
10044c80:	4013      	ands	r3, r2
10044c82:	683a      	ldr	r2, [r7, #0]
10044c84:	429a      	cmp	r2, r3
10044c86:	d1ef      	bne.n	10044c68 <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
10044c88:	2300      	movs	r3, #0
10044c8a:	60bb      	str	r3, [r7, #8]
10044c8c:	e003      	b.n	10044c96 <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
10044c8e:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10044c90:	68bb      	ldr	r3, [r7, #8]
10044c92:	3301      	adds	r3, #1
10044c94:	60bb      	str	r3, [r7, #8]
10044c96:	68bb      	ldr	r3, [r7, #8]
10044c98:	2b05      	cmp	r3, #5
10044c9a:	ddf8      	ble.n	10044c8e <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
10044c9c:	f7fd f800 	bl	10041ca0 <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
10044ca0:	f7fd fb36 	bl	10042310 <HAL_GetTickPrio>
10044ca4:	0003      	movs	r3, r0
10044ca6:	0018      	movs	r0, r3
10044ca8:	f7fd face 	bl	10042248 <HAL_InitTick>
10044cac:	0003      	movs	r3, r0
}
10044cae:	0018      	movs	r0, r3
10044cb0:	46bd      	mov	sp, r7
10044cb2:	b004      	add	sp, #16
10044cb4:	bd80      	pop	{r7, pc}
10044cb6:	46c0      	nop			@ (mov r8, r8)
10044cb8:	40001000 	.word	0x40001000
10044cbc:	48400000 	.word	0x48400000

10044cc0 <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
10044cc0:	b580      	push	{r7, lr}
10044cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
10044cc4:	4b02      	ldr	r3, [pc, #8]	@ (10044cd0 <HAL_RCC_GetSysClockFreq+0x10>)
10044cc6:	681b      	ldr	r3, [r3, #0]
}
10044cc8:	0018      	movs	r0, r3
10044cca:	46bd      	mov	sp, r7
10044ccc:	bd80      	pop	{r7, pc}
10044cce:	46c0      	nop			@ (mov r8, r8)
10044cd0:	20000a00 	.word	0x20000a00

10044cd4 <LL_RCC_HSE_IsReady>:
{
10044cd4:	b580      	push	{r7, lr}
10044cd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10044cd8:	4b07      	ldr	r3, [pc, #28]	@ (10044cf8 <LL_RCC_HSE_IsReady+0x24>)
10044cda:	681a      	ldr	r2, [r3, #0]
10044cdc:	2380      	movs	r3, #128	@ 0x80
10044cde:	029b      	lsls	r3, r3, #10
10044ce0:	401a      	ands	r2, r3
10044ce2:	2380      	movs	r3, #128	@ 0x80
10044ce4:	029b      	lsls	r3, r3, #10
10044ce6:	429a      	cmp	r2, r3
10044ce8:	d101      	bne.n	10044cee <LL_RCC_HSE_IsReady+0x1a>
10044cea:	2301      	movs	r3, #1
10044cec:	e000      	b.n	10044cf0 <LL_RCC_HSE_IsReady+0x1c>
10044cee:	2300      	movs	r3, #0
}
10044cf0:	0018      	movs	r0, r3
10044cf2:	46bd      	mov	sp, r7
10044cf4:	bd80      	pop	{r7, pc}
10044cf6:	46c0      	nop			@ (mov r8, r8)
10044cf8:	48400000 	.word	0x48400000

10044cfc <LL_RCC_DIRECT_HSE_IsEnabled>:
{
10044cfc:	b580      	push	{r7, lr}
10044cfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
10044d00:	4b05      	ldr	r3, [pc, #20]	@ (10044d18 <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
10044d02:	689b      	ldr	r3, [r3, #8]
10044d04:	2208      	movs	r2, #8
10044d06:	4013      	ands	r3, r2
10044d08:	2b08      	cmp	r3, #8
10044d0a:	d101      	bne.n	10044d10 <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
10044d0c:	2301      	movs	r3, #1
10044d0e:	e000      	b.n	10044d12 <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
10044d10:	2300      	movs	r3, #0
}
10044d12:	0018      	movs	r0, r3
10044d14:	46bd      	mov	sp, r7
10044d16:	bd80      	pop	{r7, pc}
10044d18:	48400000 	.word	0x48400000

10044d1c <LL_RCC_LSCO_SetSource>:
{
10044d1c:	b580      	push	{r7, lr}
10044d1e:	b082      	sub	sp, #8
10044d20:	af00      	add	r7, sp, #0
10044d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
10044d24:	4b06      	ldr	r3, [pc, #24]	@ (10044d40 <LL_RCC_LSCO_SetSource+0x24>)
10044d26:	689b      	ldr	r3, [r3, #8]
10044d28:	4a06      	ldr	r2, [pc, #24]	@ (10044d44 <LL_RCC_LSCO_SetSource+0x28>)
10044d2a:	4013      	ands	r3, r2
10044d2c:	0019      	movs	r1, r3
10044d2e:	4b04      	ldr	r3, [pc, #16]	@ (10044d40 <LL_RCC_LSCO_SetSource+0x24>)
10044d30:	687a      	ldr	r2, [r7, #4]
10044d32:	430a      	orrs	r2, r1
10044d34:	609a      	str	r2, [r3, #8]
}
10044d36:	46c0      	nop			@ (mov r8, r8)
10044d38:	46bd      	mov	sp, r7
10044d3a:	b002      	add	sp, #8
10044d3c:	bd80      	pop	{r7, pc}
10044d3e:	46c0      	nop			@ (mov r8, r8)
10044d40:	48400000 	.word	0x48400000
10044d44:	fffe7fff 	.word	0xfffe7fff

10044d48 <LL_RCC_LSCO_GetSource>:
{
10044d48:	b580      	push	{r7, lr}
10044d4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_CLKSLOWSEL));
10044d4c:	4b03      	ldr	r3, [pc, #12]	@ (10044d5c <LL_RCC_LSCO_GetSource+0x14>)
10044d4e:	689a      	ldr	r2, [r3, #8]
10044d50:	23c0      	movs	r3, #192	@ 0xc0
10044d52:	025b      	lsls	r3, r3, #9
10044d54:	4013      	ands	r3, r2
}
10044d56:	0018      	movs	r0, r3
10044d58:	46bd      	mov	sp, r7
10044d5a:	bd80      	pop	{r7, pc}
10044d5c:	48400000 	.word	0x48400000

10044d60 <LL_RCC_SetRFClock>:
{
10044d60:	b580      	push	{r7, lr}
10044d62:	b082      	sub	sp, #8
10044d64:	af00      	add	r7, sp, #0
10044d66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
10044d68:	4b06      	ldr	r3, [pc, #24]	@ (10044d84 <LL_RCC_SetRFClock+0x24>)
10044d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10044d6c:	2204      	movs	r2, #4
10044d6e:	4393      	bics	r3, r2
10044d70:	0019      	movs	r1, r3
10044d72:	4b04      	ldr	r3, [pc, #16]	@ (10044d84 <LL_RCC_SetRFClock+0x24>)
10044d74:	687a      	ldr	r2, [r7, #4]
10044d76:	430a      	orrs	r2, r1
10044d78:	661a      	str	r2, [r3, #96]	@ 0x60
}
10044d7a:	46c0      	nop			@ (mov r8, r8)
10044d7c:	46bd      	mov	sp, r7
10044d7e:	b002      	add	sp, #8
10044d80:	bd80      	pop	{r7, pc}
10044d82:	46c0      	nop			@ (mov r8, r8)
10044d84:	48400000 	.word	0x48400000

10044d88 <LL_RCC_GetRFClock>:
{
10044d88:	b580      	push	{r7, lr}
10044d8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV));
10044d8c:	4b03      	ldr	r3, [pc, #12]	@ (10044d9c <LL_RCC_GetRFClock+0x14>)
10044d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10044d90:	2204      	movs	r2, #4
10044d92:	4013      	ands	r3, r2
}
10044d94:	0018      	movs	r0, r3
10044d96:	46bd      	mov	sp, r7
10044d98:	bd80      	pop	{r7, pc}
10044d9a:	46c0      	nop			@ (mov r8, r8)
10044d9c:	48400000 	.word	0x48400000

10044da0 <LL_RCC_SetSMPSPrescaler>:
{
10044da0:	b580      	push	{r7, lr}
10044da2:	b082      	sub	sp, #8
10044da4:	af00      	add	r7, sp, #0
10044da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
10044da8:	4b06      	ldr	r3, [pc, #24]	@ (10044dc4 <LL_RCC_SetSMPSPrescaler+0x24>)
10044daa:	689b      	ldr	r3, [r3, #8]
10044dac:	4a06      	ldr	r2, [pc, #24]	@ (10044dc8 <LL_RCC_SetSMPSPrescaler+0x28>)
10044dae:	4013      	ands	r3, r2
10044db0:	0019      	movs	r1, r3
10044db2:	4b04      	ldr	r3, [pc, #16]	@ (10044dc4 <LL_RCC_SetSMPSPrescaler+0x24>)
10044db4:	687a      	ldr	r2, [r7, #4]
10044db6:	430a      	orrs	r2, r1
10044db8:	609a      	str	r2, [r3, #8]
}
10044dba:	46c0      	nop			@ (mov r8, r8)
10044dbc:	46bd      	mov	sp, r7
10044dbe:	b002      	add	sp, #8
10044dc0:	bd80      	pop	{r7, pc}
10044dc2:	46c0      	nop			@ (mov r8, r8)
10044dc4:	48400000 	.word	0x48400000
10044dc8:	ffffefff 	.word	0xffffefff

10044dcc <LL_RCC_GetSMPSPrescaler>:
{
10044dcc:	b580      	push	{r7, lr}
10044dce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SMPSDIV));
10044dd0:	4b03      	ldr	r3, [pc, #12]	@ (10044de0 <LL_RCC_GetSMPSPrescaler+0x14>)
10044dd2:	689a      	ldr	r2, [r3, #8]
10044dd4:	2380      	movs	r3, #128	@ 0x80
10044dd6:	015b      	lsls	r3, r3, #5
10044dd8:	4013      	ands	r3, r2
}
10044dda:	0018      	movs	r0, r3
10044ddc:	46bd      	mov	sp, r7
10044dde:	bd80      	pop	{r7, pc}
10044de0:	48400000 	.word	0x48400000

10044de4 <LL_RCC_SetLPUARTClockSource>:
{
10044de4:	b580      	push	{r7, lr}
10044de6:	b082      	sub	sp, #8
10044de8:	af00      	add	r7, sp, #0
10044dea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_LPUCLKSEL, Source);
10044dec:	4b06      	ldr	r3, [pc, #24]	@ (10044e08 <LL_RCC_SetLPUARTClockSource+0x24>)
10044dee:	689b      	ldr	r3, [r3, #8]
10044df0:	4a06      	ldr	r2, [pc, #24]	@ (10044e0c <LL_RCC_SetLPUARTClockSource+0x28>)
10044df2:	4013      	ands	r3, r2
10044df4:	0019      	movs	r1, r3
10044df6:	4b04      	ldr	r3, [pc, #16]	@ (10044e08 <LL_RCC_SetLPUARTClockSource+0x24>)
10044df8:	687a      	ldr	r2, [r7, #4]
10044dfa:	430a      	orrs	r2, r1
10044dfc:	609a      	str	r2, [r3, #8]
}
10044dfe:	46c0      	nop			@ (mov r8, r8)
10044e00:	46bd      	mov	sp, r7
10044e02:	b002      	add	sp, #8
10044e04:	bd80      	pop	{r7, pc}
10044e06:	46c0      	nop			@ (mov r8, r8)
10044e08:	48400000 	.word	0x48400000
10044e0c:	ffffdfff 	.word	0xffffdfff

10044e10 <LL_RCC_GetLPUARTClockSource>:
{
10044e10:	b580      	push	{r7, lr}
10044e12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
10044e14:	4b03      	ldr	r3, [pc, #12]	@ (10044e24 <LL_RCC_GetLPUARTClockSource+0x14>)
10044e16:	689a      	ldr	r2, [r3, #8]
10044e18:	2380      	movs	r3, #128	@ 0x80
10044e1a:	019b      	lsls	r3, r3, #6
10044e1c:	4013      	ands	r3, r2
}
10044e1e:	0018      	movs	r0, r3
10044e20:	46bd      	mov	sp, r7
10044e22:	bd80      	pop	{r7, pc}
10044e24:	48400000 	.word	0x48400000

10044e28 <LL_RCC_SetSPI3I2SClockSource>:
{
10044e28:	b580      	push	{r7, lr}
10044e2a:	b082      	sub	sp, #8
10044e2c:	af00      	add	r7, sp, #0
10044e2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
10044e30:	4b06      	ldr	r3, [pc, #24]	@ (10044e4c <LL_RCC_SetSPI3I2SClockSource+0x24>)
10044e32:	689b      	ldr	r3, [r3, #8]
10044e34:	4a06      	ldr	r2, [pc, #24]	@ (10044e50 <LL_RCC_SetSPI3I2SClockSource+0x28>)
10044e36:	4013      	ands	r3, r2
10044e38:	0019      	movs	r1, r3
10044e3a:	4b04      	ldr	r3, [pc, #16]	@ (10044e4c <LL_RCC_SetSPI3I2SClockSource+0x24>)
10044e3c:	687a      	ldr	r2, [r7, #4]
10044e3e:	430a      	orrs	r2, r1
10044e40:	609a      	str	r2, [r3, #8]
}
10044e42:	46c0      	nop			@ (mov r8, r8)
10044e44:	46bd      	mov	sp, r7
10044e46:	b002      	add	sp, #8
10044e48:	bd80      	pop	{r7, pc}
10044e4a:	46c0      	nop			@ (mov r8, r8)
10044e4c:	48400000 	.word	0x48400000
10044e50:	ff3fffff 	.word	0xff3fffff

10044e54 <LL_RCC_GetSPI3I2SClockSource>:
{
10044e54:	b580      	push	{r7, lr}
10044e56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL));
10044e58:	4b03      	ldr	r3, [pc, #12]	@ (10044e68 <LL_RCC_GetSPI3I2SClockSource+0x14>)
10044e5a:	689a      	ldr	r2, [r3, #8]
10044e5c:	23c0      	movs	r3, #192	@ 0xc0
10044e5e:	041b      	lsls	r3, r3, #16
10044e60:	4013      	ands	r3, r2
}
10044e62:	0018      	movs	r0, r3
10044e64:	46bd      	mov	sp, r7
10044e66:	bd80      	pop	{r7, pc}
10044e68:	48400000 	.word	0x48400000

10044e6c <LL_RCC_RC64MPLL_IsReady>:
{
10044e6c:	b580      	push	{r7, lr}
10044e6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
10044e70:	4b07      	ldr	r3, [pc, #28]	@ (10044e90 <LL_RCC_RC64MPLL_IsReady+0x24>)
10044e72:	681a      	ldr	r2, [r3, #0]
10044e74:	2380      	movs	r3, #128	@ 0x80
10044e76:	01db      	lsls	r3, r3, #7
10044e78:	401a      	ands	r2, r3
10044e7a:	2380      	movs	r3, #128	@ 0x80
10044e7c:	01db      	lsls	r3, r3, #7
10044e7e:	429a      	cmp	r2, r3
10044e80:	d101      	bne.n	10044e86 <LL_RCC_RC64MPLL_IsReady+0x1a>
10044e82:	2301      	movs	r3, #1
10044e84:	e000      	b.n	10044e88 <LL_RCC_RC64MPLL_IsReady+0x1c>
10044e86:	2300      	movs	r3, #0
}
10044e88:	0018      	movs	r0, r3
10044e8a:	46bd      	mov	sp, r7
10044e8c:	bd80      	pop	{r7, pc}
10044e8e:	46c0      	nop			@ (mov r8, r8)
10044e90:	48400000 	.word	0x48400000

10044e94 <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
10044e94:	b580      	push	{r7, lr}
10044e96:	b082      	sub	sp, #8
10044e98:	af00      	add	r7, sp, #0
10044e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
10044e9c:	687b      	ldr	r3, [r7, #4]
10044e9e:	681b      	ldr	r3, [r3, #0]
10044ea0:	2201      	movs	r2, #1
10044ea2:	4013      	ands	r3, r2
10044ea4:	d004      	beq.n	10044eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
10044ea6:	687b      	ldr	r3, [r7, #4]
10044ea8:	691b      	ldr	r3, [r3, #16]
10044eaa:	0018      	movs	r0, r3
10044eac:	f7ff ff58 	bl	10044d60 <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
10044eb0:	687b      	ldr	r3, [r7, #4]
10044eb2:	681b      	ldr	r3, [r3, #0]
10044eb4:	2202      	movs	r2, #2
10044eb6:	4013      	ands	r3, r2
10044eb8:	d004      	beq.n	10044ec4 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
10044eba:	687b      	ldr	r3, [r7, #4]
10044ebc:	695b      	ldr	r3, [r3, #20]
10044ebe:	0018      	movs	r0, r3
10044ec0:	f7ff ff6e 	bl	10044da0 <LL_RCC_SetSMPSPrescaler>
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
10044ec4:	687b      	ldr	r3, [r7, #4]
10044ec6:	681b      	ldr	r3, [r3, #0]
10044ec8:	2208      	movs	r2, #8
10044eca:	4013      	ands	r3, r2
10044ecc:	d004      	beq.n	10044ed8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
10044ece:	687b      	ldr	r3, [r7, #4]
10044ed0:	685b      	ldr	r3, [r3, #4]
10044ed2:	0018      	movs	r0, r3
10044ed4:	f7ff ffa8 	bl	10044e28 <LL_RCC_SetSPI3I2SClockSource>
  }
#endif

#if defined(RCC_CFGR_LPUCLKSEL)
  /*-------------------------- LPUART1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1))
10044ed8:	687b      	ldr	r3, [r7, #4]
10044eda:	681b      	ldr	r3, [r3, #0]
10044edc:	2210      	movs	r2, #16
10044ede:	4013      	ands	r3, r2
10044ee0:	d004      	beq.n	10044eec <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_LPUART1_CLOCK_SOURCE(PeriphClkInit->LPUART1ClockSelection));
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
10044ee2:	687b      	ldr	r3, [r7, #4]
10044ee4:	68db      	ldr	r3, [r3, #12]
10044ee6:	0018      	movs	r0, r3
10044ee8:	f7ff ff7c 	bl	10044de4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
10044eec:	687b      	ldr	r3, [r7, #4]
10044eee:	689b      	ldr	r3, [r3, #8]
10044ef0:	2220      	movs	r2, #32
10044ef2:	4013      	ands	r3, r2
10044ef4:	d004      	beq.n	10044f00 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
10044ef6:	687b      	ldr	r3, [r7, #4]
10044ef8:	689b      	ldr	r3, [r3, #8]
10044efa:	0018      	movs	r0, r3
10044efc:	f7ff ff0e 	bl	10044d1c <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
10044f00:	2300      	movs	r3, #0
}
10044f02:	0018      	movs	r0, r3
10044f04:	46bd      	mov	sp, r7
10044f06:	b002      	add	sp, #8
10044f08:	bd80      	pop	{r7, pc}
	...

10044f0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RTC_WDG_BLEWKUP   RTC, WDG and BLEWKUP peripheral clock
  * @retval Frequency in Hz
  * @note   (*) Peripherals are not available on all devices
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
10044f0c:	b580      	push	{r7, lr}
10044f0e:	b084      	sub	sp, #16
10044f10:	af00      	add	r7, sp, #0
10044f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  /* No if clausule is covered */
  frequency = 0;
10044f14:	2300      	movs	r3, #0
10044f16:	60fb      	str	r3, [r7, #12]

  switch (PeriphClk)
10044f18:	687b      	ldr	r3, [r7, #4]
10044f1a:	2b20      	cmp	r3, #32
10044f1c:	d900      	bls.n	10044f20 <HAL_RCCEx_GetPeriphCLKFreq+0x14>
10044f1e:	e07b      	b.n	10045018 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
10044f20:	687b      	ldr	r3, [r7, #4]
10044f22:	009a      	lsls	r2, r3, #2
10044f24:	4b40      	ldr	r3, [pc, #256]	@ (10045028 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
10044f26:	18d3      	adds	r3, r2, r3
10044f28:	681b      	ldr	r3, [r3, #0]
10044f2a:	469f      	mov	pc, r3
  {
    case RCC_PERIPHCLK_RF :
      switch (__HAL_RCC_RF_CLK_GET_CONFIG())
10044f2c:	f7ff ff2c 	bl	10044d88 <LL_RCC_GetRFClock>
10044f30:	1e03      	subs	r3, r0, #0
10044f32:	d002      	beq.n	10044f3a <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
10044f34:	2b04      	cmp	r3, #4
10044f36:	d003      	beq.n	10044f40 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        case RCC_RF_CLK_16M:
          frequency = HSE_VALUE / 2;
          break;
      }

      break;
10044f38:	e071      	b.n	1004501e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE;
10044f3a:	4b3c      	ldr	r3, [pc, #240]	@ (1004502c <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
10044f3c:	60fb      	str	r3, [r7, #12]
          break;
10044f3e:	e002      	b.n	10044f46 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          frequency = HSE_VALUE / 2;
10044f40:	4b3b      	ldr	r3, [pc, #236]	@ (10045030 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
10044f42:	60fb      	str	r3, [r7, #12]
          break;
10044f44:	46c0      	nop			@ (mov r8, r8)
      break;
10044f46:	e06a      	b.n	1004501e <HAL_RCCEx_GetPeriphCLKFreq+0x112>

    case RCC_PERIPHCLK_SMPS :
      switch (__HAL_RCC_GET_SMPS_DIV())
10044f48:	f7ff ff40 	bl	10044dcc <LL_RCC_GetSMPSPrescaler>
10044f4c:	1e03      	subs	r3, r0, #0
10044f4e:	d004      	beq.n	10044f5a <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
10044f50:	2280      	movs	r2, #128	@ 0x80
10044f52:	0152      	lsls	r2, r2, #5
10044f54:	4293      	cmp	r3, r2
10044f56:	d003      	beq.n	10044f60 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          break;
        case RCC_SMPSCLK_DIV4:
          frequency = HSE_VALUE / 8;
          break;
      }
      break;
10044f58:	e061      	b.n	1004501e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE / 4;
10044f5a:	4b36      	ldr	r3, [pc, #216]	@ (10045034 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
10044f5c:	60fb      	str	r3, [r7, #12]
          break;
10044f5e:	e002      	b.n	10044f66 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSE_VALUE / 8;
10044f60:	4b35      	ldr	r3, [pc, #212]	@ (10045038 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
10044f62:	60fb      	str	r3, [r7, #12]
          break;
10044f64:	46c0      	nop			@ (mov r8, r8)
      break;
10044f66:	e05a      	b.n	1004501e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      }
      break;
#endif

    case RCC_PERIPHCLK_SPI3_I2S :
      if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_DIRECT_HSE)
10044f68:	f7ff fec8 	bl	10044cfc <LL_RCC_DIRECT_HSE_IsEnabled>
10044f6c:	1e03      	subs	r3, r0, #0
10044f6e:	d005      	beq.n	10044f7c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      {
        if (__HAL_RCC_GET_HSE_READYFLAG() == 0)
10044f70:	f7ff feb0 	bl	10044cd4 <LL_RCC_HSE_IsReady>
10044f74:	1e03      	subs	r3, r0, #0
10044f76:	d107      	bne.n	10044f88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
10044f78:	2300      	movs	r3, #0
10044f7a:	e051      	b.n	10045020 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      else
      {
        if (__HAL_RCC_RC64MPLL_READYFLAG() == 0)
10044f7c:	f7ff ff76 	bl	10044e6c <LL_RCC_RC64MPLL_IsReady>
10044f80:	1e03      	subs	r3, r0, #0
10044f82:	d101      	bne.n	10044f88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
10044f84:	2300      	movs	r3, #0
10044f86:	e04b      	b.n	10045020 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      spiFreqValue = __HAL_RCC_GET_SPI3I2S_CLK_CONFIG();
10044f88:	f7ff ff64 	bl	10044e54 <LL_RCC_GetSPI3I2SClockSource>
10044f8c:	0003      	movs	r3, r0
10044f8e:	60bb      	str	r3, [r7, #8]
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_16M)
10044f90:	68bb      	ldr	r3, [r7, #8]
10044f92:	2b00      	cmp	r3, #0
10044f94:	d101      	bne.n	10044f9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
      {
        frequency = HSE_VALUE / 2;
10044f96:	4b26      	ldr	r3, [pc, #152]	@ (10045030 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
10044f98:	60fb      	str	r3, [r7, #12]
      }

      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_32M)
10044f9a:	68ba      	ldr	r2, [r7, #8]
10044f9c:	2380      	movs	r3, #128	@ 0x80
10044f9e:	03db      	lsls	r3, r3, #15
10044fa0:	429a      	cmp	r2, r3
10044fa2:	d101      	bne.n	10044fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      {
        frequency = HSE_VALUE;
10044fa4:	4b21      	ldr	r3, [pc, #132]	@ (1004502c <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
10044fa6:	60fb      	str	r3, [r7, #12]
      }
#if defined(RCC_SPI3I2S_CLKSOURCE_64M)
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_64M)
10044fa8:	68ba      	ldr	r2, [r7, #8]
10044faa:	2380      	movs	r3, #128	@ 0x80
10044fac:	041b      	lsls	r3, r3, #16
10044fae:	429a      	cmp	r2, r3
10044fb0:	d134      	bne.n	1004501c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
      {
        frequency = HSE_VALUE * 2;
10044fb2:	4b22      	ldr	r3, [pc, #136]	@ (1004503c <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
10044fb4:	60fb      	str	r3, [r7, #12]
      }
#endif
      break;
10044fb6:	e031      	b.n	1004501c <HAL_RCCEx_GetPeriphCLKFreq+0x110>

#if defined(RCC_CFGR_LPUCLKSEL)
    case RCC_PERIPHCLK_LPUART1 :
      switch (__HAL_RCC_GET_LPUART1_CLK_CONFIG())
10044fb8:	f7ff ff2a 	bl	10044e10 <LL_RCC_GetLPUARTClockSource>
10044fbc:	0002      	movs	r2, r0
10044fbe:	2380      	movs	r3, #128	@ 0x80
10044fc0:	019b      	lsls	r3, r3, #6
10044fc2:	429a      	cmp	r2, r3
10044fc4:	d103      	bne.n	10044fce <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      {
        case RCC_LPUART1_CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10044fc6:	2380      	movs	r3, #128	@ 0x80
10044fc8:	021b      	lsls	r3, r3, #8
10044fca:	60fb      	str	r3, [r7, #12]
          break;
10044fcc:	e002      	b.n	10044fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
        case RCC_LPUART1_CLKSOURCE_16M:
        default:
          frequency = HSE_VALUE / 2;
10044fce:	4b18      	ldr	r3, [pc, #96]	@ (10045030 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
10044fd0:	60fb      	str	r3, [r7, #12]
          break;
10044fd2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
10044fd4:	e023      	b.n	1004501e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
#endif /* RCC_CFGR_LPUCLKSEL */

    case RCC_PERIPHCLK_RTC_WDG_BLEWKUP :
      switch (LL_RCC_LSCO_GetSource())
10044fd6:	f7ff feb7 	bl	10044d48 <LL_RCC_LSCO_GetSource>
10044fda:	0003      	movs	r3, r0
10044fdc:	22c0      	movs	r2, #192	@ 0xc0
10044fde:	0252      	lsls	r2, r2, #9
10044fe0:	4293      	cmp	r3, r2
10044fe2:	d014      	beq.n	1004500e <HAL_RCCEx_GetPeriphCLKFreq+0x102>
10044fe4:	22c0      	movs	r2, #192	@ 0xc0
10044fe6:	0252      	lsls	r2, r2, #9
10044fe8:	4293      	cmp	r3, r2
10044fea:	d813      	bhi.n	10045014 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
10044fec:	2280      	movs	r2, #128	@ 0x80
10044fee:	0212      	lsls	r2, r2, #8
10044ff0:	4293      	cmp	r3, r2
10044ff2:	d004      	beq.n	10044ffe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
10044ff4:	2280      	movs	r2, #128	@ 0x80
10044ff6:	0252      	lsls	r2, r2, #9
10044ff8:	4293      	cmp	r3, r2
10044ffa:	d004      	beq.n	10045006 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
          break;
        case LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048:
          frequency = HSE_VALUE >> 10;
          break;
        default :
          break;
10044ffc:	e00a      	b.n	10045014 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          frequency = LSE_VALUE;
10044ffe:	2380      	movs	r3, #128	@ 0x80
10045000:	021b      	lsls	r3, r3, #8
10045002:	60fb      	str	r3, [r7, #12]
          break;
10045004:	e007      	b.n	10045016 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = LSI_VALUE;
10045006:	23fa      	movs	r3, #250	@ 0xfa
10045008:	01db      	lsls	r3, r3, #7
1004500a:	60fb      	str	r3, [r7, #12]
          break;
1004500c:	e003      	b.n	10045016 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = HSE_VALUE >> 10;
1004500e:	4b0c      	ldr	r3, [pc, #48]	@ (10045040 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
10045010:	60fb      	str	r3, [r7, #12]
          break;
10045012:	e000      	b.n	10045016 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          break;
10045014:	46c0      	nop			@ (mov r8, r8)
      }
      break;
10045016:	e002      	b.n	1004501e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    default :
      break;
10045018:	46c0      	nop			@ (mov r8, r8)
1004501a:	e000      	b.n	1004501e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      break;
1004501c:	46c0      	nop			@ (mov r8, r8)
  }

  return (frequency);
1004501e:	68fb      	ldr	r3, [r7, #12]
}
10045020:	0018      	movs	r0, r3
10045022:	46bd      	mov	sp, r7
10045024:	b004      	add	sp, #16
10045026:	bd80      	pop	{r7, pc}
10045028:	100472ec 	.word	0x100472ec
1004502c:	01e84800 	.word	0x01e84800
10045030:	00f42400 	.word	0x00f42400
10045034:	007a1200 	.word	0x007a1200
10045038:	003d0900 	.word	0x003d0900
1004503c:	03d09000 	.word	0x03d09000
10045040:	00007a12 	.word	0x00007a12

10045044 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
10045044:	b580      	push	{r7, lr}
10045046:	b084      	sub	sp, #16
10045048:	af00      	add	r7, sp, #0
1004504a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
1004504c:	687b      	ldr	r3, [r7, #4]
1004504e:	681b      	ldr	r3, [r3, #0]
10045050:	68db      	ldr	r3, [r3, #12]
10045052:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
10045054:	687b      	ldr	r3, [r7, #4]
10045056:	681b      	ldr	r3, [r3, #0]
10045058:	691b      	ldr	r3, [r3, #16]
1004505a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
1004505c:	68bb      	ldr	r3, [r7, #8]
1004505e:	2202      	movs	r2, #2
10045060:	4013      	ands	r3, r2
10045062:	d021      	beq.n	100450a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
10045064:	68fb      	ldr	r3, [r7, #12]
10045066:	2202      	movs	r2, #2
10045068:	4013      	ands	r3, r2
1004506a:	d01d      	beq.n	100450a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
1004506c:	687b      	ldr	r3, [r7, #4]
1004506e:	681b      	ldr	r3, [r3, #0]
10045070:	2203      	movs	r2, #3
10045072:	4252      	negs	r2, r2
10045074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
10045076:	687b      	ldr	r3, [r7, #4]
10045078:	2201      	movs	r2, #1
1004507a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
1004507c:	687b      	ldr	r3, [r7, #4]
1004507e:	681b      	ldr	r3, [r3, #0]
10045080:	699b      	ldr	r3, [r3, #24]
10045082:	2203      	movs	r2, #3
10045084:	4013      	ands	r3, r2
10045086:	d004      	beq.n	10045092 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
10045088:	687b      	ldr	r3, [r7, #4]
1004508a:	0018      	movs	r0, r3
1004508c:	f000 f8d8 	bl	10045240 <HAL_TIM_IC_CaptureCallback>
10045090:	e007      	b.n	100450a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
10045092:	687b      	ldr	r3, [r7, #4]
10045094:	0018      	movs	r0, r3
10045096:	f000 f8cb 	bl	10045230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
1004509a:	687b      	ldr	r3, [r7, #4]
1004509c:	0018      	movs	r0, r3
1004509e:	f000 f8d7 	bl	10045250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
100450a2:	687b      	ldr	r3, [r7, #4]
100450a4:	2200      	movs	r2, #0
100450a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
100450a8:	68bb      	ldr	r3, [r7, #8]
100450aa:	2204      	movs	r2, #4
100450ac:	4013      	ands	r3, r2
100450ae:	d022      	beq.n	100450f6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
100450b0:	68fb      	ldr	r3, [r7, #12]
100450b2:	2204      	movs	r2, #4
100450b4:	4013      	ands	r3, r2
100450b6:	d01e      	beq.n	100450f6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
100450b8:	687b      	ldr	r3, [r7, #4]
100450ba:	681b      	ldr	r3, [r3, #0]
100450bc:	2205      	movs	r2, #5
100450be:	4252      	negs	r2, r2
100450c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
100450c2:	687b      	ldr	r3, [r7, #4]
100450c4:	2202      	movs	r2, #2
100450c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
100450c8:	687b      	ldr	r3, [r7, #4]
100450ca:	681b      	ldr	r3, [r3, #0]
100450cc:	699a      	ldr	r2, [r3, #24]
100450ce:	23c0      	movs	r3, #192	@ 0xc0
100450d0:	009b      	lsls	r3, r3, #2
100450d2:	4013      	ands	r3, r2
100450d4:	d004      	beq.n	100450e0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
100450d6:	687b      	ldr	r3, [r7, #4]
100450d8:	0018      	movs	r0, r3
100450da:	f000 f8b1 	bl	10045240 <HAL_TIM_IC_CaptureCallback>
100450de:	e007      	b.n	100450f0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
100450e0:	687b      	ldr	r3, [r7, #4]
100450e2:	0018      	movs	r0, r3
100450e4:	f000 f8a4 	bl	10045230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
100450e8:	687b      	ldr	r3, [r7, #4]
100450ea:	0018      	movs	r0, r3
100450ec:	f000 f8b0 	bl	10045250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
100450f0:	687b      	ldr	r3, [r7, #4]
100450f2:	2200      	movs	r2, #0
100450f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
100450f6:	68bb      	ldr	r3, [r7, #8]
100450f8:	2208      	movs	r2, #8
100450fa:	4013      	ands	r3, r2
100450fc:	d021      	beq.n	10045142 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
100450fe:	68fb      	ldr	r3, [r7, #12]
10045100:	2208      	movs	r2, #8
10045102:	4013      	ands	r3, r2
10045104:	d01d      	beq.n	10045142 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
10045106:	687b      	ldr	r3, [r7, #4]
10045108:	681b      	ldr	r3, [r3, #0]
1004510a:	2209      	movs	r2, #9
1004510c:	4252      	negs	r2, r2
1004510e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
10045110:	687b      	ldr	r3, [r7, #4]
10045112:	2204      	movs	r2, #4
10045114:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
10045116:	687b      	ldr	r3, [r7, #4]
10045118:	681b      	ldr	r3, [r3, #0]
1004511a:	69db      	ldr	r3, [r3, #28]
1004511c:	2203      	movs	r2, #3
1004511e:	4013      	ands	r3, r2
10045120:	d004      	beq.n	1004512c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
10045122:	687b      	ldr	r3, [r7, #4]
10045124:	0018      	movs	r0, r3
10045126:	f000 f88b 	bl	10045240 <HAL_TIM_IC_CaptureCallback>
1004512a:	e007      	b.n	1004513c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004512c:	687b      	ldr	r3, [r7, #4]
1004512e:	0018      	movs	r0, r3
10045130:	f000 f87e 	bl	10045230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
10045134:	687b      	ldr	r3, [r7, #4]
10045136:	0018      	movs	r0, r3
10045138:	f000 f88a 	bl	10045250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004513c:	687b      	ldr	r3, [r7, #4]
1004513e:	2200      	movs	r2, #0
10045140:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
10045142:	68bb      	ldr	r3, [r7, #8]
10045144:	2210      	movs	r2, #16
10045146:	4013      	ands	r3, r2
10045148:	d022      	beq.n	10045190 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
1004514a:	68fb      	ldr	r3, [r7, #12]
1004514c:	2210      	movs	r2, #16
1004514e:	4013      	ands	r3, r2
10045150:	d01e      	beq.n	10045190 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
10045152:	687b      	ldr	r3, [r7, #4]
10045154:	681b      	ldr	r3, [r3, #0]
10045156:	2211      	movs	r2, #17
10045158:	4252      	negs	r2, r2
1004515a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
1004515c:	687b      	ldr	r3, [r7, #4]
1004515e:	2208      	movs	r2, #8
10045160:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
10045162:	687b      	ldr	r3, [r7, #4]
10045164:	681b      	ldr	r3, [r3, #0]
10045166:	69da      	ldr	r2, [r3, #28]
10045168:	23c0      	movs	r3, #192	@ 0xc0
1004516a:	009b      	lsls	r3, r3, #2
1004516c:	4013      	ands	r3, r2
1004516e:	d004      	beq.n	1004517a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
10045170:	687b      	ldr	r3, [r7, #4]
10045172:	0018      	movs	r0, r3
10045174:	f000 f864 	bl	10045240 <HAL_TIM_IC_CaptureCallback>
10045178:	e007      	b.n	1004518a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004517a:	687b      	ldr	r3, [r7, #4]
1004517c:	0018      	movs	r0, r3
1004517e:	f000 f857 	bl	10045230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
10045182:	687b      	ldr	r3, [r7, #4]
10045184:	0018      	movs	r0, r3
10045186:	f000 f863 	bl	10045250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004518a:	687b      	ldr	r3, [r7, #4]
1004518c:	2200      	movs	r2, #0
1004518e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
10045190:	68bb      	ldr	r3, [r7, #8]
10045192:	2201      	movs	r2, #1
10045194:	4013      	ands	r3, r2
10045196:	d00c      	beq.n	100451b2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
10045198:	68fb      	ldr	r3, [r7, #12]
1004519a:	2201      	movs	r2, #1
1004519c:	4013      	ands	r3, r2
1004519e:	d008      	beq.n	100451b2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
100451a0:	687b      	ldr	r3, [r7, #4]
100451a2:	681b      	ldr	r3, [r3, #0]
100451a4:	2202      	movs	r2, #2
100451a6:	4252      	negs	r2, r2
100451a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
100451aa:	687b      	ldr	r3, [r7, #4]
100451ac:	0018      	movs	r0, r3
100451ae:	f000 f837 	bl	10045220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
100451b2:	68bb      	ldr	r3, [r7, #8]
100451b4:	2280      	movs	r2, #128	@ 0x80
100451b6:	4013      	ands	r3, r2
100451b8:	d00c      	beq.n	100451d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
100451ba:	68fb      	ldr	r3, [r7, #12]
100451bc:	2280      	movs	r2, #128	@ 0x80
100451be:	4013      	ands	r3, r2
100451c0:	d008      	beq.n	100451d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
100451c2:	687b      	ldr	r3, [r7, #4]
100451c4:	681b      	ldr	r3, [r3, #0]
100451c6:	2281      	movs	r2, #129	@ 0x81
100451c8:	4252      	negs	r2, r2
100451ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
100451cc:	687b      	ldr	r3, [r7, #4]
100451ce:	0018      	movs	r0, r3
100451d0:	f000 f856 	bl	10045280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
100451d4:	68bb      	ldr	r3, [r7, #8]
100451d6:	2240      	movs	r2, #64	@ 0x40
100451d8:	4013      	ands	r3, r2
100451da:	d00c      	beq.n	100451f6 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
100451dc:	68fb      	ldr	r3, [r7, #12]
100451de:	2240      	movs	r2, #64	@ 0x40
100451e0:	4013      	ands	r3, r2
100451e2:	d008      	beq.n	100451f6 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
100451e4:	687b      	ldr	r3, [r7, #4]
100451e6:	681b      	ldr	r3, [r3, #0]
100451e8:	2241      	movs	r2, #65	@ 0x41
100451ea:	4252      	negs	r2, r2
100451ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
100451ee:	687b      	ldr	r3, [r7, #4]
100451f0:	0018      	movs	r0, r3
100451f2:	f000 f835 	bl	10045260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
100451f6:	68bb      	ldr	r3, [r7, #8]
100451f8:	2220      	movs	r2, #32
100451fa:	4013      	ands	r3, r2
100451fc:	d00c      	beq.n	10045218 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
100451fe:	68fb      	ldr	r3, [r7, #12]
10045200:	2220      	movs	r2, #32
10045202:	4013      	ands	r3, r2
10045204:	d008      	beq.n	10045218 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
10045206:	687b      	ldr	r3, [r7, #4]
10045208:	681b      	ldr	r3, [r3, #0]
1004520a:	2221      	movs	r2, #33	@ 0x21
1004520c:	4252      	negs	r2, r2
1004520e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
10045210:	687b      	ldr	r3, [r7, #4]
10045212:	0018      	movs	r0, r3
10045214:	f000 f82c 	bl	10045270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
10045218:	46c0      	nop			@ (mov r8, r8)
1004521a:	46bd      	mov	sp, r7
1004521c:	b004      	add	sp, #16
1004521e:	bd80      	pop	{r7, pc}

10045220 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
10045220:	b580      	push	{r7, lr}
10045222:	b082      	sub	sp, #8
10045224:	af00      	add	r7, sp, #0
10045226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
10045228:	46c0      	nop			@ (mov r8, r8)
1004522a:	46bd      	mov	sp, r7
1004522c:	b002      	add	sp, #8
1004522e:	bd80      	pop	{r7, pc}

10045230 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
10045230:	b580      	push	{r7, lr}
10045232:	b082      	sub	sp, #8
10045234:	af00      	add	r7, sp, #0
10045236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
10045238:	46c0      	nop			@ (mov r8, r8)
1004523a:	46bd      	mov	sp, r7
1004523c:	b002      	add	sp, #8
1004523e:	bd80      	pop	{r7, pc}

10045240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
10045240:	b580      	push	{r7, lr}
10045242:	b082      	sub	sp, #8
10045244:	af00      	add	r7, sp, #0
10045246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
10045248:	46c0      	nop			@ (mov r8, r8)
1004524a:	46bd      	mov	sp, r7
1004524c:	b002      	add	sp, #8
1004524e:	bd80      	pop	{r7, pc}

10045250 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
10045250:	b580      	push	{r7, lr}
10045252:	b082      	sub	sp, #8
10045254:	af00      	add	r7, sp, #0
10045256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
10045258:	46c0      	nop			@ (mov r8, r8)
1004525a:	46bd      	mov	sp, r7
1004525c:	b002      	add	sp, #8
1004525e:	bd80      	pop	{r7, pc}

10045260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
10045260:	b580      	push	{r7, lr}
10045262:	b082      	sub	sp, #8
10045264:	af00      	add	r7, sp, #0
10045266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
10045268:	46c0      	nop			@ (mov r8, r8)
1004526a:	46bd      	mov	sp, r7
1004526c:	b002      	add	sp, #8
1004526e:	bd80      	pop	{r7, pc}

10045270 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
10045270:	b580      	push	{r7, lr}
10045272:	b082      	sub	sp, #8
10045274:	af00      	add	r7, sp, #0
10045276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
10045278:	46c0      	nop			@ (mov r8, r8)
1004527a:	46bd      	mov	sp, r7
1004527c:	b002      	add	sp, #8
1004527e:	bd80      	pop	{r7, pc}

10045280 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
10045280:	b580      	push	{r7, lr}
10045282:	b082      	sub	sp, #8
10045284:	af00      	add	r7, sp, #0
10045286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
10045288:	46c0      	nop			@ (mov r8, r8)
1004528a:	46bd      	mov	sp, r7
1004528c:	b002      	add	sp, #8
1004528e:	bd80      	pop	{r7, pc}

10045290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
10045290:	b580      	push	{r7, lr}
10045292:	b082      	sub	sp, #8
10045294:	af00      	add	r7, sp, #0
10045296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
10045298:	687b      	ldr	r3, [r7, #4]
1004529a:	2b00      	cmp	r3, #0
1004529c:	d101      	bne.n	100452a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
1004529e:	2301      	movs	r3, #1
100452a0:	e046      	b.n	10045330 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
100452a2:	687b      	ldr	r3, [r7, #4]
100452a4:	2288      	movs	r2, #136	@ 0x88
100452a6:	589b      	ldr	r3, [r3, r2]
100452a8:	2b00      	cmp	r3, #0
100452aa:	d107      	bne.n	100452bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
100452ac:	687b      	ldr	r3, [r7, #4]
100452ae:	2284      	movs	r2, #132	@ 0x84
100452b0:	2100      	movs	r1, #0
100452b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
100452b4:	687b      	ldr	r3, [r7, #4]
100452b6:	0018      	movs	r0, r3
100452b8:	f7fc fac0 	bl	1004183c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
100452bc:	687b      	ldr	r3, [r7, #4]
100452be:	2288      	movs	r2, #136	@ 0x88
100452c0:	2124      	movs	r1, #36	@ 0x24
100452c2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
100452c4:	687b      	ldr	r3, [r7, #4]
100452c6:	681b      	ldr	r3, [r3, #0]
100452c8:	681a      	ldr	r2, [r3, #0]
100452ca:	687b      	ldr	r3, [r7, #4]
100452cc:	681b      	ldr	r3, [r3, #0]
100452ce:	2101      	movs	r1, #1
100452d0:	438a      	bics	r2, r1
100452d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
100452d4:	687b      	ldr	r3, [r7, #4]
100452d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100452d8:	2b00      	cmp	r3, #0
100452da:	d003      	beq.n	100452e4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
100452dc:	687b      	ldr	r3, [r7, #4]
100452de:	0018      	movs	r0, r3
100452e0:	f000 fcf6 	bl	10045cd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
100452e4:	687b      	ldr	r3, [r7, #4]
100452e6:	0018      	movs	r0, r3
100452e8:	f000 fb8a 	bl	10045a00 <UART_SetConfig>
100452ec:	0003      	movs	r3, r0
100452ee:	2b01      	cmp	r3, #1
100452f0:	d101      	bne.n	100452f6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
100452f2:	2301      	movs	r3, #1
100452f4:	e01c      	b.n	10045330 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
100452f6:	687b      	ldr	r3, [r7, #4]
100452f8:	681b      	ldr	r3, [r3, #0]
100452fa:	685a      	ldr	r2, [r3, #4]
100452fc:	687b      	ldr	r3, [r7, #4]
100452fe:	681b      	ldr	r3, [r3, #0]
10045300:	490d      	ldr	r1, [pc, #52]	@ (10045338 <HAL_UART_Init+0xa8>)
10045302:	400a      	ands	r2, r1
10045304:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
10045306:	687b      	ldr	r3, [r7, #4]
10045308:	681b      	ldr	r3, [r3, #0]
1004530a:	689a      	ldr	r2, [r3, #8]
1004530c:	687b      	ldr	r3, [r7, #4]
1004530e:	681b      	ldr	r3, [r3, #0]
10045310:	212a      	movs	r1, #42	@ 0x2a
10045312:	438a      	bics	r2, r1
10045314:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
10045316:	687b      	ldr	r3, [r7, #4]
10045318:	681b      	ldr	r3, [r3, #0]
1004531a:	681a      	ldr	r2, [r3, #0]
1004531c:	687b      	ldr	r3, [r7, #4]
1004531e:	681b      	ldr	r3, [r3, #0]
10045320:	2101      	movs	r1, #1
10045322:	430a      	orrs	r2, r1
10045324:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10045326:	687b      	ldr	r3, [r7, #4]
10045328:	0018      	movs	r0, r3
1004532a:	f000 fd85 	bl	10045e38 <UART_CheckIdleState>
1004532e:	0003      	movs	r3, r0
}
10045330:	0018      	movs	r0, r3
10045332:	46bd      	mov	sp, r7
10045334:	b002      	add	sp, #8
10045336:	bd80      	pop	{r7, pc}
10045338:	ffffb7ff 	.word	0xffffb7ff

1004533c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
1004533c:	b5b0      	push	{r4, r5, r7, lr}
1004533e:	b0aa      	sub	sp, #168	@ 0xa8
10045340:	af00      	add	r7, sp, #0
10045342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
10045344:	687b      	ldr	r3, [r7, #4]
10045346:	681b      	ldr	r3, [r3, #0]
10045348:	69db      	ldr	r3, [r3, #28]
1004534a:	22a4      	movs	r2, #164	@ 0xa4
1004534c:	18b9      	adds	r1, r7, r2
1004534e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
10045350:	687b      	ldr	r3, [r7, #4]
10045352:	681b      	ldr	r3, [r3, #0]
10045354:	681b      	ldr	r3, [r3, #0]
10045356:	20a0      	movs	r0, #160	@ 0xa0
10045358:	1839      	adds	r1, r7, r0
1004535a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
1004535c:	687b      	ldr	r3, [r7, #4]
1004535e:	681b      	ldr	r3, [r3, #0]
10045360:	689b      	ldr	r3, [r3, #8]
10045362:	249c      	movs	r4, #156	@ 0x9c
10045364:	1939      	adds	r1, r7, r4
10045366:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
10045368:	0011      	movs	r1, r2
1004536a:	18bb      	adds	r3, r7, r2
1004536c:	681b      	ldr	r3, [r3, #0]
1004536e:	4aa2      	ldr	r2, [pc, #648]	@ (100455f8 <HAL_UART_IRQHandler+0x2bc>)
10045370:	4013      	ands	r3, r2
10045372:	2298      	movs	r2, #152	@ 0x98
10045374:	18bd      	adds	r5, r7, r2
10045376:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
10045378:	18bb      	adds	r3, r7, r2
1004537a:	681b      	ldr	r3, [r3, #0]
1004537c:	2b00      	cmp	r3, #0
1004537e:	d11a      	bne.n	100453b6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
10045380:	187b      	adds	r3, r7, r1
10045382:	681b      	ldr	r3, [r3, #0]
10045384:	2220      	movs	r2, #32
10045386:	4013      	ands	r3, r2
10045388:	d015      	beq.n	100453b6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
1004538a:	183b      	adds	r3, r7, r0
1004538c:	681b      	ldr	r3, [r3, #0]
1004538e:	2220      	movs	r2, #32
10045390:	4013      	ands	r3, r2
10045392:	d105      	bne.n	100453a0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
10045394:	193b      	adds	r3, r7, r4
10045396:	681a      	ldr	r2, [r3, #0]
10045398:	2380      	movs	r3, #128	@ 0x80
1004539a:	055b      	lsls	r3, r3, #21
1004539c:	4013      	ands	r3, r2
1004539e:	d00a      	beq.n	100453b6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
100453a0:	687b      	ldr	r3, [r7, #4]
100453a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
100453a4:	2b00      	cmp	r3, #0
100453a6:	d100      	bne.n	100453aa <HAL_UART_IRQHandler+0x6e>
100453a8:	e2fb      	b.n	100459a2 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
100453aa:	687b      	ldr	r3, [r7, #4]
100453ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
100453ae:	687a      	ldr	r2, [r7, #4]
100453b0:	0010      	movs	r0, r2
100453b2:	4798      	blx	r3
      }
      return;
100453b4:	e2f5      	b.n	100459a2 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
100453b6:	2398      	movs	r3, #152	@ 0x98
100453b8:	18fb      	adds	r3, r7, r3
100453ba:	681b      	ldr	r3, [r3, #0]
100453bc:	2b00      	cmp	r3, #0
100453be:	d100      	bne.n	100453c2 <HAL_UART_IRQHandler+0x86>
100453c0:	e122      	b.n	10045608 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
100453c2:	239c      	movs	r3, #156	@ 0x9c
100453c4:	18fb      	adds	r3, r7, r3
100453c6:	681b      	ldr	r3, [r3, #0]
100453c8:	4a8c      	ldr	r2, [pc, #560]	@ (100455fc <HAL_UART_IRQHandler+0x2c0>)
100453ca:	4013      	ands	r3, r2
100453cc:	d106      	bne.n	100453dc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
100453ce:	23a0      	movs	r3, #160	@ 0xa0
100453d0:	18fb      	adds	r3, r7, r3
100453d2:	681b      	ldr	r3, [r3, #0]
100453d4:	4a8a      	ldr	r2, [pc, #552]	@ (10045600 <HAL_UART_IRQHandler+0x2c4>)
100453d6:	4013      	ands	r3, r2
100453d8:	d100      	bne.n	100453dc <HAL_UART_IRQHandler+0xa0>
100453da:	e115      	b.n	10045608 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
100453dc:	23a4      	movs	r3, #164	@ 0xa4
100453de:	18fb      	adds	r3, r7, r3
100453e0:	681b      	ldr	r3, [r3, #0]
100453e2:	2201      	movs	r2, #1
100453e4:	4013      	ands	r3, r2
100453e6:	d012      	beq.n	1004540e <HAL_UART_IRQHandler+0xd2>
100453e8:	23a0      	movs	r3, #160	@ 0xa0
100453ea:	18fb      	adds	r3, r7, r3
100453ec:	681a      	ldr	r2, [r3, #0]
100453ee:	2380      	movs	r3, #128	@ 0x80
100453f0:	005b      	lsls	r3, r3, #1
100453f2:	4013      	ands	r3, r2
100453f4:	d00b      	beq.n	1004540e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
100453f6:	687b      	ldr	r3, [r7, #4]
100453f8:	681b      	ldr	r3, [r3, #0]
100453fa:	2201      	movs	r2, #1
100453fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
100453fe:	687b      	ldr	r3, [r7, #4]
10045400:	2290      	movs	r2, #144	@ 0x90
10045402:	589b      	ldr	r3, [r3, r2]
10045404:	2201      	movs	r2, #1
10045406:	431a      	orrs	r2, r3
10045408:	687b      	ldr	r3, [r7, #4]
1004540a:	2190      	movs	r1, #144	@ 0x90
1004540c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004540e:	23a4      	movs	r3, #164	@ 0xa4
10045410:	18fb      	adds	r3, r7, r3
10045412:	681b      	ldr	r3, [r3, #0]
10045414:	2202      	movs	r2, #2
10045416:	4013      	ands	r3, r2
10045418:	d011      	beq.n	1004543e <HAL_UART_IRQHandler+0x102>
1004541a:	239c      	movs	r3, #156	@ 0x9c
1004541c:	18fb      	adds	r3, r7, r3
1004541e:	681b      	ldr	r3, [r3, #0]
10045420:	2201      	movs	r2, #1
10045422:	4013      	ands	r3, r2
10045424:	d00b      	beq.n	1004543e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
10045426:	687b      	ldr	r3, [r7, #4]
10045428:	681b      	ldr	r3, [r3, #0]
1004542a:	2202      	movs	r2, #2
1004542c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
1004542e:	687b      	ldr	r3, [r7, #4]
10045430:	2290      	movs	r2, #144	@ 0x90
10045432:	589b      	ldr	r3, [r3, r2]
10045434:	2204      	movs	r2, #4
10045436:	431a      	orrs	r2, r3
10045438:	687b      	ldr	r3, [r7, #4]
1004543a:	2190      	movs	r1, #144	@ 0x90
1004543c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004543e:	23a4      	movs	r3, #164	@ 0xa4
10045440:	18fb      	adds	r3, r7, r3
10045442:	681b      	ldr	r3, [r3, #0]
10045444:	2204      	movs	r2, #4
10045446:	4013      	ands	r3, r2
10045448:	d011      	beq.n	1004546e <HAL_UART_IRQHandler+0x132>
1004544a:	239c      	movs	r3, #156	@ 0x9c
1004544c:	18fb      	adds	r3, r7, r3
1004544e:	681b      	ldr	r3, [r3, #0]
10045450:	2201      	movs	r2, #1
10045452:	4013      	ands	r3, r2
10045454:	d00b      	beq.n	1004546e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
10045456:	687b      	ldr	r3, [r7, #4]
10045458:	681b      	ldr	r3, [r3, #0]
1004545a:	2204      	movs	r2, #4
1004545c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
1004545e:	687b      	ldr	r3, [r7, #4]
10045460:	2290      	movs	r2, #144	@ 0x90
10045462:	589b      	ldr	r3, [r3, r2]
10045464:	2202      	movs	r2, #2
10045466:	431a      	orrs	r2, r3
10045468:	687b      	ldr	r3, [r7, #4]
1004546a:	2190      	movs	r1, #144	@ 0x90
1004546c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
1004546e:	23a4      	movs	r3, #164	@ 0xa4
10045470:	18fb      	adds	r3, r7, r3
10045472:	681b      	ldr	r3, [r3, #0]
10045474:	2208      	movs	r2, #8
10045476:	4013      	ands	r3, r2
10045478:	d017      	beq.n	100454aa <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
1004547a:	23a0      	movs	r3, #160	@ 0xa0
1004547c:	18fb      	adds	r3, r7, r3
1004547e:	681b      	ldr	r3, [r3, #0]
10045480:	2220      	movs	r2, #32
10045482:	4013      	ands	r3, r2
10045484:	d105      	bne.n	10045492 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
10045486:	239c      	movs	r3, #156	@ 0x9c
10045488:	18fb      	adds	r3, r7, r3
1004548a:	681b      	ldr	r3, [r3, #0]
1004548c:	4a5b      	ldr	r2, [pc, #364]	@ (100455fc <HAL_UART_IRQHandler+0x2c0>)
1004548e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
10045490:	d00b      	beq.n	100454aa <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
10045492:	687b      	ldr	r3, [r7, #4]
10045494:	681b      	ldr	r3, [r3, #0]
10045496:	2208      	movs	r2, #8
10045498:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
1004549a:	687b      	ldr	r3, [r7, #4]
1004549c:	2290      	movs	r2, #144	@ 0x90
1004549e:	589b      	ldr	r3, [r3, r2]
100454a0:	2208      	movs	r2, #8
100454a2:	431a      	orrs	r2, r3
100454a4:	687b      	ldr	r3, [r7, #4]
100454a6:	2190      	movs	r1, #144	@ 0x90
100454a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
100454aa:	23a4      	movs	r3, #164	@ 0xa4
100454ac:	18fb      	adds	r3, r7, r3
100454ae:	681a      	ldr	r2, [r3, #0]
100454b0:	2380      	movs	r3, #128	@ 0x80
100454b2:	011b      	lsls	r3, r3, #4
100454b4:	4013      	ands	r3, r2
100454b6:	d013      	beq.n	100454e0 <HAL_UART_IRQHandler+0x1a4>
100454b8:	23a0      	movs	r3, #160	@ 0xa0
100454ba:	18fb      	adds	r3, r7, r3
100454bc:	681a      	ldr	r2, [r3, #0]
100454be:	2380      	movs	r3, #128	@ 0x80
100454c0:	04db      	lsls	r3, r3, #19
100454c2:	4013      	ands	r3, r2
100454c4:	d00c      	beq.n	100454e0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
100454c6:	687b      	ldr	r3, [r7, #4]
100454c8:	681b      	ldr	r3, [r3, #0]
100454ca:	2280      	movs	r2, #128	@ 0x80
100454cc:	0112      	lsls	r2, r2, #4
100454ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
100454d0:	687b      	ldr	r3, [r7, #4]
100454d2:	2290      	movs	r2, #144	@ 0x90
100454d4:	589b      	ldr	r3, [r3, r2]
100454d6:	2220      	movs	r2, #32
100454d8:	431a      	orrs	r2, r3
100454da:	687b      	ldr	r3, [r7, #4]
100454dc:	2190      	movs	r1, #144	@ 0x90
100454de:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
100454e0:	687b      	ldr	r3, [r7, #4]
100454e2:	2290      	movs	r2, #144	@ 0x90
100454e4:	589b      	ldr	r3, [r3, r2]
100454e6:	2b00      	cmp	r3, #0
100454e8:	d100      	bne.n	100454ec <HAL_UART_IRQHandler+0x1b0>
100454ea:	e25c      	b.n	100459a6 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
100454ec:	23a4      	movs	r3, #164	@ 0xa4
100454ee:	18fb      	adds	r3, r7, r3
100454f0:	681b      	ldr	r3, [r3, #0]
100454f2:	2220      	movs	r2, #32
100454f4:	4013      	ands	r3, r2
100454f6:	d015      	beq.n	10045524 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
100454f8:	23a0      	movs	r3, #160	@ 0xa0
100454fa:	18fb      	adds	r3, r7, r3
100454fc:	681b      	ldr	r3, [r3, #0]
100454fe:	2220      	movs	r2, #32
10045500:	4013      	ands	r3, r2
10045502:	d106      	bne.n	10045512 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
10045504:	239c      	movs	r3, #156	@ 0x9c
10045506:	18fb      	adds	r3, r7, r3
10045508:	681a      	ldr	r2, [r3, #0]
1004550a:	2380      	movs	r3, #128	@ 0x80
1004550c:	055b      	lsls	r3, r3, #21
1004550e:	4013      	ands	r3, r2
10045510:	d008      	beq.n	10045524 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
10045512:	687b      	ldr	r3, [r7, #4]
10045514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10045516:	2b00      	cmp	r3, #0
10045518:	d004      	beq.n	10045524 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
1004551a:	687b      	ldr	r3, [r7, #4]
1004551c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004551e:	687a      	ldr	r2, [r7, #4]
10045520:	0010      	movs	r0, r2
10045522:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
10045524:	687b      	ldr	r3, [r7, #4]
10045526:	2290      	movs	r2, #144	@ 0x90
10045528:	589b      	ldr	r3, [r3, r2]
1004552a:	2194      	movs	r1, #148	@ 0x94
1004552c:	187a      	adds	r2, r7, r1
1004552e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
10045530:	687b      	ldr	r3, [r7, #4]
10045532:	681b      	ldr	r3, [r3, #0]
10045534:	689b      	ldr	r3, [r3, #8]
10045536:	2240      	movs	r2, #64	@ 0x40
10045538:	4013      	ands	r3, r2
1004553a:	2b40      	cmp	r3, #64	@ 0x40
1004553c:	d004      	beq.n	10045548 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
1004553e:	187b      	adds	r3, r7, r1
10045540:	681b      	ldr	r3, [r3, #0]
10045542:	2228      	movs	r2, #40	@ 0x28
10045544:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
10045546:	d04c      	beq.n	100455e2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
10045548:	687b      	ldr	r3, [r7, #4]
1004554a:	0018      	movs	r0, r3
1004554c:	f000 fd8e 	bl	1004606c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
10045550:	687b      	ldr	r3, [r7, #4]
10045552:	681b      	ldr	r3, [r3, #0]
10045554:	689b      	ldr	r3, [r3, #8]
10045556:	2240      	movs	r2, #64	@ 0x40
10045558:	4013      	ands	r3, r2
1004555a:	2b40      	cmp	r3, #64	@ 0x40
1004555c:	d13c      	bne.n	100455d8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004555e:	f3ef 8310 	mrs	r3, PRIMASK
10045562:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
10045564:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
10045566:	2090      	movs	r0, #144	@ 0x90
10045568:	183a      	adds	r2, r7, r0
1004556a:	6013      	str	r3, [r2, #0]
1004556c:	2301      	movs	r3, #1
1004556e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10045570:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10045572:	f383 8810 	msr	PRIMASK, r3
}
10045576:	46c0      	nop			@ (mov r8, r8)
10045578:	687b      	ldr	r3, [r7, #4]
1004557a:	681b      	ldr	r3, [r3, #0]
1004557c:	689a      	ldr	r2, [r3, #8]
1004557e:	687b      	ldr	r3, [r7, #4]
10045580:	681b      	ldr	r3, [r3, #0]
10045582:	2140      	movs	r1, #64	@ 0x40
10045584:	438a      	bics	r2, r1
10045586:	609a      	str	r2, [r3, #8]
10045588:	183b      	adds	r3, r7, r0
1004558a:	681b      	ldr	r3, [r3, #0]
1004558c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004558e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
10045590:	f383 8810 	msr	PRIMASK, r3
}
10045594:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
10045596:	687b      	ldr	r3, [r7, #4]
10045598:	2280      	movs	r2, #128	@ 0x80
1004559a:	589b      	ldr	r3, [r3, r2]
1004559c:	2b00      	cmp	r3, #0
1004559e:	d016      	beq.n	100455ce <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
100455a0:	687b      	ldr	r3, [r7, #4]
100455a2:	2280      	movs	r2, #128	@ 0x80
100455a4:	589b      	ldr	r3, [r3, r2]
100455a6:	4a17      	ldr	r2, [pc, #92]	@ (10045604 <HAL_UART_IRQHandler+0x2c8>)
100455a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
100455aa:	687b      	ldr	r3, [r7, #4]
100455ac:	2280      	movs	r2, #128	@ 0x80
100455ae:	589b      	ldr	r3, [r3, r2]
100455b0:	0018      	movs	r0, r3
100455b2:	f7fc ffd4 	bl	1004255e <HAL_DMA_Abort_IT>
100455b6:	1e03      	subs	r3, r0, #0
100455b8:	d01c      	beq.n	100455f4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
100455ba:	687b      	ldr	r3, [r7, #4]
100455bc:	2280      	movs	r2, #128	@ 0x80
100455be:	589b      	ldr	r3, [r3, r2]
100455c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100455c2:	687a      	ldr	r2, [r7, #4]
100455c4:	2180      	movs	r1, #128	@ 0x80
100455c6:	5852      	ldr	r2, [r2, r1]
100455c8:	0010      	movs	r0, r2
100455ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
100455cc:	e012      	b.n	100455f4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
100455ce:	687b      	ldr	r3, [r7, #4]
100455d0:	0018      	movs	r0, r3
100455d2:	f000 fa01 	bl	100459d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
100455d6:	e00d      	b.n	100455f4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
100455d8:	687b      	ldr	r3, [r7, #4]
100455da:	0018      	movs	r0, r3
100455dc:	f000 f9fc 	bl	100459d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
100455e0:	e008      	b.n	100455f4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
100455e2:	687b      	ldr	r3, [r7, #4]
100455e4:	0018      	movs	r0, r3
100455e6:	f000 f9f7 	bl	100459d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
100455ea:	687b      	ldr	r3, [r7, #4]
100455ec:	2290      	movs	r2, #144	@ 0x90
100455ee:	2100      	movs	r1, #0
100455f0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
100455f2:	e1d8      	b.n	100459a6 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
100455f4:	46c0      	nop			@ (mov r8, r8)
    return;
100455f6:	e1d6      	b.n	100459a6 <HAL_UART_IRQHandler+0x66a>
100455f8:	0000080f 	.word	0x0000080f
100455fc:	10000001 	.word	0x10000001
10045600:	04000120 	.word	0x04000120
10045604:	10046139 	.word	0x10046139

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
10045608:	687b      	ldr	r3, [r7, #4]
1004560a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
1004560c:	2b01      	cmp	r3, #1
1004560e:	d000      	beq.n	10045612 <HAL_UART_IRQHandler+0x2d6>
10045610:	e15d      	b.n	100458ce <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
10045612:	23a4      	movs	r3, #164	@ 0xa4
10045614:	18fb      	adds	r3, r7, r3
10045616:	681b      	ldr	r3, [r3, #0]
10045618:	2210      	movs	r2, #16
1004561a:	4013      	ands	r3, r2
1004561c:	d100      	bne.n	10045620 <HAL_UART_IRQHandler+0x2e4>
1004561e:	e156      	b.n	100458ce <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
10045620:	23a0      	movs	r3, #160	@ 0xa0
10045622:	18fb      	adds	r3, r7, r3
10045624:	681b      	ldr	r3, [r3, #0]
10045626:	2210      	movs	r2, #16
10045628:	4013      	ands	r3, r2
1004562a:	d100      	bne.n	1004562e <HAL_UART_IRQHandler+0x2f2>
1004562c:	e14f      	b.n	100458ce <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
1004562e:	687b      	ldr	r3, [r7, #4]
10045630:	681b      	ldr	r3, [r3, #0]
10045632:	2210      	movs	r2, #16
10045634:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
10045636:	687b      	ldr	r3, [r7, #4]
10045638:	681b      	ldr	r3, [r3, #0]
1004563a:	689b      	ldr	r3, [r3, #8]
1004563c:	2240      	movs	r2, #64	@ 0x40
1004563e:	4013      	ands	r3, r2
10045640:	2b40      	cmp	r3, #64	@ 0x40
10045642:	d000      	beq.n	10045646 <HAL_UART_IRQHandler+0x30a>
10045644:	e0c3      	b.n	100457ce <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
10045646:	687b      	ldr	r3, [r7, #4]
10045648:	2280      	movs	r2, #128	@ 0x80
1004564a:	589b      	ldr	r3, [r3, r2]
1004564c:	681b      	ldr	r3, [r3, #0]
1004564e:	685a      	ldr	r2, [r3, #4]
10045650:	217e      	movs	r1, #126	@ 0x7e
10045652:	187b      	adds	r3, r7, r1
10045654:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
10045656:	187b      	adds	r3, r7, r1
10045658:	881b      	ldrh	r3, [r3, #0]
1004565a:	2b00      	cmp	r3, #0
1004565c:	d100      	bne.n	10045660 <HAL_UART_IRQHandler+0x324>
1004565e:	e097      	b.n	10045790 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
10045660:	687b      	ldr	r3, [r7, #4]
10045662:	225c      	movs	r2, #92	@ 0x5c
10045664:	5a9b      	ldrh	r3, [r3, r2]
10045666:	187a      	adds	r2, r7, r1
10045668:	8812      	ldrh	r2, [r2, #0]
1004566a:	429a      	cmp	r2, r3
1004566c:	d300      	bcc.n	10045670 <HAL_UART_IRQHandler+0x334>
1004566e:	e08f      	b.n	10045790 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
10045670:	687b      	ldr	r3, [r7, #4]
10045672:	187a      	adds	r2, r7, r1
10045674:	215e      	movs	r1, #94	@ 0x5e
10045676:	8812      	ldrh	r2, [r2, #0]
10045678:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
1004567a:	687b      	ldr	r3, [r7, #4]
1004567c:	2280      	movs	r2, #128	@ 0x80
1004567e:	589b      	ldr	r3, [r3, r2]
10045680:	681b      	ldr	r3, [r3, #0]
10045682:	681b      	ldr	r3, [r3, #0]
10045684:	2220      	movs	r2, #32
10045686:	4013      	ands	r3, r2
10045688:	d170      	bne.n	1004576c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004568a:	f3ef 8310 	mrs	r3, PRIMASK
1004568e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
10045690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
10045692:	67bb      	str	r3, [r7, #120]	@ 0x78
10045694:	2301      	movs	r3, #1
10045696:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10045698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004569a:	f383 8810 	msr	PRIMASK, r3
}
1004569e:	46c0      	nop			@ (mov r8, r8)
100456a0:	687b      	ldr	r3, [r7, #4]
100456a2:	681b      	ldr	r3, [r3, #0]
100456a4:	681a      	ldr	r2, [r3, #0]
100456a6:	687b      	ldr	r3, [r7, #4]
100456a8:	681b      	ldr	r3, [r3, #0]
100456aa:	49c4      	ldr	r1, [pc, #784]	@ (100459bc <HAL_UART_IRQHandler+0x680>)
100456ac:	400a      	ands	r2, r1
100456ae:	601a      	str	r2, [r3, #0]
100456b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
100456b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100456b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100456b6:	f383 8810 	msr	PRIMASK, r3
}
100456ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100456bc:	f3ef 8310 	mrs	r3, PRIMASK
100456c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
100456c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
100456c4:	677b      	str	r3, [r7, #116]	@ 0x74
100456c6:	2301      	movs	r3, #1
100456c8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100456ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100456cc:	f383 8810 	msr	PRIMASK, r3
}
100456d0:	46c0      	nop			@ (mov r8, r8)
100456d2:	687b      	ldr	r3, [r7, #4]
100456d4:	681b      	ldr	r3, [r3, #0]
100456d6:	689a      	ldr	r2, [r3, #8]
100456d8:	687b      	ldr	r3, [r7, #4]
100456da:	681b      	ldr	r3, [r3, #0]
100456dc:	2101      	movs	r1, #1
100456de:	438a      	bics	r2, r1
100456e0:	609a      	str	r2, [r3, #8]
100456e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
100456e4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100456e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100456e8:	f383 8810 	msr	PRIMASK, r3
}
100456ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100456ee:	f3ef 8310 	mrs	r3, PRIMASK
100456f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
100456f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
100456f6:	673b      	str	r3, [r7, #112]	@ 0x70
100456f8:	2301      	movs	r3, #1
100456fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100456fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
100456fe:	f383 8810 	msr	PRIMASK, r3
}
10045702:	46c0      	nop			@ (mov r8, r8)
10045704:	687b      	ldr	r3, [r7, #4]
10045706:	681b      	ldr	r3, [r3, #0]
10045708:	689a      	ldr	r2, [r3, #8]
1004570a:	687b      	ldr	r3, [r7, #4]
1004570c:	681b      	ldr	r3, [r3, #0]
1004570e:	2140      	movs	r1, #64	@ 0x40
10045710:	438a      	bics	r2, r1
10045712:	609a      	str	r2, [r3, #8]
10045714:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10045716:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10045718:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
1004571a:	f383 8810 	msr	PRIMASK, r3
}
1004571e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
10045720:	687b      	ldr	r3, [r7, #4]
10045722:	228c      	movs	r2, #140	@ 0x8c
10045724:	2120      	movs	r1, #32
10045726:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10045728:	687b      	ldr	r3, [r7, #4]
1004572a:	2200      	movs	r2, #0
1004572c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004572e:	f3ef 8310 	mrs	r3, PRIMASK
10045732:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
10045734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
10045736:	66fb      	str	r3, [r7, #108]	@ 0x6c
10045738:	2301      	movs	r3, #1
1004573a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004573c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
1004573e:	f383 8810 	msr	PRIMASK, r3
}
10045742:	46c0      	nop			@ (mov r8, r8)
10045744:	687b      	ldr	r3, [r7, #4]
10045746:	681b      	ldr	r3, [r3, #0]
10045748:	681a      	ldr	r2, [r3, #0]
1004574a:	687b      	ldr	r3, [r7, #4]
1004574c:	681b      	ldr	r3, [r3, #0]
1004574e:	2110      	movs	r1, #16
10045750:	438a      	bics	r2, r1
10045752:	601a      	str	r2, [r3, #0]
10045754:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
10045756:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10045758:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
1004575a:	f383 8810 	msr	PRIMASK, r3
}
1004575e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
10045760:	687b      	ldr	r3, [r7, #4]
10045762:	2280      	movs	r2, #128	@ 0x80
10045764:	589b      	ldr	r3, [r3, r2]
10045766:	0018      	movs	r0, r3
10045768:	f7fc feba 	bl	100424e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
1004576c:	687b      	ldr	r3, [r7, #4]
1004576e:	2202      	movs	r2, #2
10045770:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
10045772:	687b      	ldr	r3, [r7, #4]
10045774:	225c      	movs	r2, #92	@ 0x5c
10045776:	5a9a      	ldrh	r2, [r3, r2]
10045778:	687b      	ldr	r3, [r7, #4]
1004577a:	215e      	movs	r1, #94	@ 0x5e
1004577c:	5a5b      	ldrh	r3, [r3, r1]
1004577e:	b29b      	uxth	r3, r3
10045780:	1ad3      	subs	r3, r2, r3
10045782:	b29a      	uxth	r2, r3
10045784:	687b      	ldr	r3, [r7, #4]
10045786:	0011      	movs	r1, r2
10045788:	0018      	movs	r0, r3
1004578a:	f000 f92d 	bl	100459e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
1004578e:	e10c      	b.n	100459aa <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
10045790:	687b      	ldr	r3, [r7, #4]
10045792:	225c      	movs	r2, #92	@ 0x5c
10045794:	5a9b      	ldrh	r3, [r3, r2]
10045796:	227e      	movs	r2, #126	@ 0x7e
10045798:	18ba      	adds	r2, r7, r2
1004579a:	8812      	ldrh	r2, [r2, #0]
1004579c:	429a      	cmp	r2, r3
1004579e:	d000      	beq.n	100457a2 <HAL_UART_IRQHandler+0x466>
100457a0:	e103      	b.n	100459aa <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
100457a2:	687b      	ldr	r3, [r7, #4]
100457a4:	2280      	movs	r2, #128	@ 0x80
100457a6:	589b      	ldr	r3, [r3, r2]
100457a8:	681b      	ldr	r3, [r3, #0]
100457aa:	681b      	ldr	r3, [r3, #0]
100457ac:	2220      	movs	r2, #32
100457ae:	4013      	ands	r3, r2
100457b0:	2b20      	cmp	r3, #32
100457b2:	d000      	beq.n	100457b6 <HAL_UART_IRQHandler+0x47a>
100457b4:	e0f9      	b.n	100459aa <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
100457b6:	687b      	ldr	r3, [r7, #4]
100457b8:	2202      	movs	r2, #2
100457ba:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
100457bc:	687b      	ldr	r3, [r7, #4]
100457be:	225c      	movs	r2, #92	@ 0x5c
100457c0:	5a9a      	ldrh	r2, [r3, r2]
100457c2:	687b      	ldr	r3, [r7, #4]
100457c4:	0011      	movs	r1, r2
100457c6:	0018      	movs	r0, r3
100457c8:	f000 f90e 	bl	100459e8 <HAL_UARTEx_RxEventCallback>
      return;
100457cc:	e0ed      	b.n	100459aa <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
100457ce:	687b      	ldr	r3, [r7, #4]
100457d0:	225c      	movs	r2, #92	@ 0x5c
100457d2:	5a99      	ldrh	r1, [r3, r2]
100457d4:	687b      	ldr	r3, [r7, #4]
100457d6:	225e      	movs	r2, #94	@ 0x5e
100457d8:	5a9b      	ldrh	r3, [r3, r2]
100457da:	b29a      	uxth	r2, r3
100457dc:	208e      	movs	r0, #142	@ 0x8e
100457de:	183b      	adds	r3, r7, r0
100457e0:	1a8a      	subs	r2, r1, r2
100457e2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
100457e4:	687b      	ldr	r3, [r7, #4]
100457e6:	225e      	movs	r2, #94	@ 0x5e
100457e8:	5a9b      	ldrh	r3, [r3, r2]
100457ea:	b29b      	uxth	r3, r3
100457ec:	2b00      	cmp	r3, #0
100457ee:	d100      	bne.n	100457f2 <HAL_UART_IRQHandler+0x4b6>
100457f0:	e0dd      	b.n	100459ae <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
100457f2:	183b      	adds	r3, r7, r0
100457f4:	881b      	ldrh	r3, [r3, #0]
100457f6:	2b00      	cmp	r3, #0
100457f8:	d100      	bne.n	100457fc <HAL_UART_IRQHandler+0x4c0>
100457fa:	e0d8      	b.n	100459ae <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100457fc:	f3ef 8310 	mrs	r3, PRIMASK
10045800:	60fb      	str	r3, [r7, #12]
  return(result);
10045802:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10045804:	2488      	movs	r4, #136	@ 0x88
10045806:	193a      	adds	r2, r7, r4
10045808:	6013      	str	r3, [r2, #0]
1004580a:	2301      	movs	r3, #1
1004580c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004580e:	693b      	ldr	r3, [r7, #16]
10045810:	f383 8810 	msr	PRIMASK, r3
}
10045814:	46c0      	nop			@ (mov r8, r8)
10045816:	687b      	ldr	r3, [r7, #4]
10045818:	681b      	ldr	r3, [r3, #0]
1004581a:	681a      	ldr	r2, [r3, #0]
1004581c:	687b      	ldr	r3, [r7, #4]
1004581e:	681b      	ldr	r3, [r3, #0]
10045820:	4967      	ldr	r1, [pc, #412]	@ (100459c0 <HAL_UART_IRQHandler+0x684>)
10045822:	400a      	ands	r2, r1
10045824:	601a      	str	r2, [r3, #0]
10045826:	193b      	adds	r3, r7, r4
10045828:	681b      	ldr	r3, [r3, #0]
1004582a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004582c:	697b      	ldr	r3, [r7, #20]
1004582e:	f383 8810 	msr	PRIMASK, r3
}
10045832:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10045834:	f3ef 8310 	mrs	r3, PRIMASK
10045838:	61bb      	str	r3, [r7, #24]
  return(result);
1004583a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
1004583c:	2484      	movs	r4, #132	@ 0x84
1004583e:	193a      	adds	r2, r7, r4
10045840:	6013      	str	r3, [r2, #0]
10045842:	2301      	movs	r3, #1
10045844:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10045846:	69fb      	ldr	r3, [r7, #28]
10045848:	f383 8810 	msr	PRIMASK, r3
}
1004584c:	46c0      	nop			@ (mov r8, r8)
1004584e:	687b      	ldr	r3, [r7, #4]
10045850:	681b      	ldr	r3, [r3, #0]
10045852:	689a      	ldr	r2, [r3, #8]
10045854:	687b      	ldr	r3, [r7, #4]
10045856:	681b      	ldr	r3, [r3, #0]
10045858:	495a      	ldr	r1, [pc, #360]	@ (100459c4 <HAL_UART_IRQHandler+0x688>)
1004585a:	400a      	ands	r2, r1
1004585c:	609a      	str	r2, [r3, #8]
1004585e:	193b      	adds	r3, r7, r4
10045860:	681b      	ldr	r3, [r3, #0]
10045862:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10045864:	6a3b      	ldr	r3, [r7, #32]
10045866:	f383 8810 	msr	PRIMASK, r3
}
1004586a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
1004586c:	687b      	ldr	r3, [r7, #4]
1004586e:	228c      	movs	r2, #140	@ 0x8c
10045870:	2120      	movs	r1, #32
10045872:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10045874:	687b      	ldr	r3, [r7, #4]
10045876:	2200      	movs	r2, #0
10045878:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
1004587a:	687b      	ldr	r3, [r7, #4]
1004587c:	2200      	movs	r2, #0
1004587e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10045880:	f3ef 8310 	mrs	r3, PRIMASK
10045884:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
10045886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
10045888:	2480      	movs	r4, #128	@ 0x80
1004588a:	193a      	adds	r2, r7, r4
1004588c:	6013      	str	r3, [r2, #0]
1004588e:	2301      	movs	r3, #1
10045890:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10045892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10045894:	f383 8810 	msr	PRIMASK, r3
}
10045898:	46c0      	nop			@ (mov r8, r8)
1004589a:	687b      	ldr	r3, [r7, #4]
1004589c:	681b      	ldr	r3, [r3, #0]
1004589e:	681a      	ldr	r2, [r3, #0]
100458a0:	687b      	ldr	r3, [r7, #4]
100458a2:	681b      	ldr	r3, [r3, #0]
100458a4:	2110      	movs	r1, #16
100458a6:	438a      	bics	r2, r1
100458a8:	601a      	str	r2, [r3, #0]
100458aa:	193b      	adds	r3, r7, r4
100458ac:	681b      	ldr	r3, [r3, #0]
100458ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100458b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100458b2:	f383 8810 	msr	PRIMASK, r3
}
100458b6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
100458b8:	687b      	ldr	r3, [r7, #4]
100458ba:	2202      	movs	r2, #2
100458bc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
100458be:	183b      	adds	r3, r7, r0
100458c0:	881a      	ldrh	r2, [r3, #0]
100458c2:	687b      	ldr	r3, [r7, #4]
100458c4:	0011      	movs	r1, r2
100458c6:	0018      	movs	r0, r3
100458c8:	f000 f88e 	bl	100459e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
100458cc:	e06f      	b.n	100459ae <HAL_UART_IRQHandler+0x672>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
100458ce:	23a4      	movs	r3, #164	@ 0xa4
100458d0:	18fb      	adds	r3, r7, r3
100458d2:	681a      	ldr	r2, [r3, #0]
100458d4:	2380      	movs	r3, #128	@ 0x80
100458d6:	035b      	lsls	r3, r3, #13
100458d8:	4013      	ands	r3, r2
100458da:	d010      	beq.n	100458fe <HAL_UART_IRQHandler+0x5c2>
100458dc:	239c      	movs	r3, #156	@ 0x9c
100458de:	18fb      	adds	r3, r7, r3
100458e0:	681a      	ldr	r2, [r3, #0]
100458e2:	2380      	movs	r3, #128	@ 0x80
100458e4:	03db      	lsls	r3, r3, #15
100458e6:	4013      	ands	r3, r2
100458e8:	d009      	beq.n	100458fe <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
100458ea:	687b      	ldr	r3, [r7, #4]
100458ec:	681b      	ldr	r3, [r3, #0]
100458ee:	2280      	movs	r2, #128	@ 0x80
100458f0:	0352      	lsls	r2, r2, #13
100458f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
100458f4:	687b      	ldr	r3, [r7, #4]
100458f6:	0018      	movs	r0, r3
100458f8:	f000 fc5d 	bl	100461b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
100458fc:	e05a      	b.n	100459b4 <HAL_UART_IRQHandler+0x678>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
100458fe:	23a4      	movs	r3, #164	@ 0xa4
10045900:	18fb      	adds	r3, r7, r3
10045902:	681b      	ldr	r3, [r3, #0]
10045904:	2280      	movs	r2, #128	@ 0x80
10045906:	4013      	ands	r3, r2
10045908:	d016      	beq.n	10045938 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
1004590a:	23a0      	movs	r3, #160	@ 0xa0
1004590c:	18fb      	adds	r3, r7, r3
1004590e:	681b      	ldr	r3, [r3, #0]
10045910:	2280      	movs	r2, #128	@ 0x80
10045912:	4013      	ands	r3, r2
10045914:	d106      	bne.n	10045924 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
10045916:	239c      	movs	r3, #156	@ 0x9c
10045918:	18fb      	adds	r3, r7, r3
1004591a:	681a      	ldr	r2, [r3, #0]
1004591c:	2380      	movs	r3, #128	@ 0x80
1004591e:	041b      	lsls	r3, r3, #16
10045920:	4013      	ands	r3, r2
10045922:	d009      	beq.n	10045938 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
10045924:	687b      	ldr	r3, [r7, #4]
10045926:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10045928:	2b00      	cmp	r3, #0
1004592a:	d042      	beq.n	100459b2 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
1004592c:	687b      	ldr	r3, [r7, #4]
1004592e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10045930:	687a      	ldr	r2, [r7, #4]
10045932:	0010      	movs	r0, r2
10045934:	4798      	blx	r3
    }
    return;
10045936:	e03c      	b.n	100459b2 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
10045938:	23a4      	movs	r3, #164	@ 0xa4
1004593a:	18fb      	adds	r3, r7, r3
1004593c:	681b      	ldr	r3, [r3, #0]
1004593e:	2240      	movs	r2, #64	@ 0x40
10045940:	4013      	ands	r3, r2
10045942:	d00a      	beq.n	1004595a <HAL_UART_IRQHandler+0x61e>
10045944:	23a0      	movs	r3, #160	@ 0xa0
10045946:	18fb      	adds	r3, r7, r3
10045948:	681b      	ldr	r3, [r3, #0]
1004594a:	2240      	movs	r2, #64	@ 0x40
1004594c:	4013      	ands	r3, r2
1004594e:	d004      	beq.n	1004595a <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
10045950:	687b      	ldr	r3, [r7, #4]
10045952:	0018      	movs	r0, r3
10045954:	f000 fc03 	bl	1004615e <UART_EndTransmit_IT>
    return;
10045958:	e02c      	b.n	100459b4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
1004595a:	23a4      	movs	r3, #164	@ 0xa4
1004595c:	18fb      	adds	r3, r7, r3
1004595e:	681a      	ldr	r2, [r3, #0]
10045960:	2380      	movs	r3, #128	@ 0x80
10045962:	041b      	lsls	r3, r3, #16
10045964:	4013      	ands	r3, r2
10045966:	d00b      	beq.n	10045980 <HAL_UART_IRQHandler+0x644>
10045968:	23a0      	movs	r3, #160	@ 0xa0
1004596a:	18fb      	adds	r3, r7, r3
1004596c:	681a      	ldr	r2, [r3, #0]
1004596e:	2380      	movs	r3, #128	@ 0x80
10045970:	05db      	lsls	r3, r3, #23
10045972:	4013      	ands	r3, r2
10045974:	d004      	beq.n	10045980 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
10045976:	687b      	ldr	r3, [r7, #4]
10045978:	0018      	movs	r0, r3
1004597a:	f000 fc2c 	bl	100461d6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
1004597e:	e019      	b.n	100459b4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
10045980:	23a4      	movs	r3, #164	@ 0xa4
10045982:	18fb      	adds	r3, r7, r3
10045984:	681a      	ldr	r2, [r3, #0]
10045986:	2380      	movs	r3, #128	@ 0x80
10045988:	045b      	lsls	r3, r3, #17
1004598a:	4013      	ands	r3, r2
1004598c:	d012      	beq.n	100459b4 <HAL_UART_IRQHandler+0x678>
1004598e:	23a0      	movs	r3, #160	@ 0xa0
10045990:	18fb      	adds	r3, r7, r3
10045992:	681b      	ldr	r3, [r3, #0]
10045994:	2b00      	cmp	r3, #0
10045996:	da0d      	bge.n	100459b4 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
10045998:	687b      	ldr	r3, [r7, #4]
1004599a:	0018      	movs	r0, r3
1004599c:	f000 fc13 	bl	100461c6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
100459a0:	e008      	b.n	100459b4 <HAL_UART_IRQHandler+0x678>
      return;
100459a2:	46c0      	nop			@ (mov r8, r8)
100459a4:	e006      	b.n	100459b4 <HAL_UART_IRQHandler+0x678>
    return;
100459a6:	46c0      	nop			@ (mov r8, r8)
100459a8:	e004      	b.n	100459b4 <HAL_UART_IRQHandler+0x678>
      return;
100459aa:	46c0      	nop			@ (mov r8, r8)
100459ac:	e002      	b.n	100459b4 <HAL_UART_IRQHandler+0x678>
      return;
100459ae:	46c0      	nop			@ (mov r8, r8)
100459b0:	e000      	b.n	100459b4 <HAL_UART_IRQHandler+0x678>
    return;
100459b2:	46c0      	nop			@ (mov r8, r8)
  }
}
100459b4:	46bd      	mov	sp, r7
100459b6:	b02a      	add	sp, #168	@ 0xa8
100459b8:	bdb0      	pop	{r4, r5, r7, pc}
100459ba:	46c0      	nop			@ (mov r8, r8)
100459bc:	fffffeff 	.word	0xfffffeff
100459c0:	fffffedf 	.word	0xfffffedf
100459c4:	effffffe 	.word	0xeffffffe

100459c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
100459c8:	b580      	push	{r7, lr}
100459ca:	b082      	sub	sp, #8
100459cc:	af00      	add	r7, sp, #0
100459ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
100459d0:	46c0      	nop			@ (mov r8, r8)
100459d2:	46bd      	mov	sp, r7
100459d4:	b002      	add	sp, #8
100459d6:	bd80      	pop	{r7, pc}

100459d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
100459d8:	b580      	push	{r7, lr}
100459da:	b082      	sub	sp, #8
100459dc:	af00      	add	r7, sp, #0
100459de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
100459e0:	46c0      	nop			@ (mov r8, r8)
100459e2:	46bd      	mov	sp, r7
100459e4:	b002      	add	sp, #8
100459e6:	bd80      	pop	{r7, pc}

100459e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
100459e8:	b580      	push	{r7, lr}
100459ea:	b082      	sub	sp, #8
100459ec:	af00      	add	r7, sp, #0
100459ee:	6078      	str	r0, [r7, #4]
100459f0:	000a      	movs	r2, r1
100459f2:	1cbb      	adds	r3, r7, #2
100459f4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
100459f6:	46c0      	nop			@ (mov r8, r8)
100459f8:	46bd      	mov	sp, r7
100459fa:	b002      	add	sp, #8
100459fc:	bd80      	pop	{r7, pc}
	...

10045a00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
10045a00:	b5b0      	push	{r4, r5, r7, lr}
10045a02:	b090      	sub	sp, #64	@ 0x40
10045a04:	af00      	add	r7, sp, #0
10045a06:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
10045a08:	231b      	movs	r3, #27
10045a0a:	2220      	movs	r2, #32
10045a0c:	189b      	adds	r3, r3, r2
10045a0e:	19db      	adds	r3, r3, r7
10045a10:	2200      	movs	r2, #0
10045a12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10045a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045a16:	689a      	ldr	r2, [r3, #8]
10045a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045a1a:	691b      	ldr	r3, [r3, #16]
10045a1c:	431a      	orrs	r2, r3
10045a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045a20:	695b      	ldr	r3, [r3, #20]
10045a22:	431a      	orrs	r2, r3
10045a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045a26:	69db      	ldr	r3, [r3, #28]
10045a28:	4313      	orrs	r3, r2
10045a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10045a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045a2e:	681b      	ldr	r3, [r3, #0]
10045a30:	681b      	ldr	r3, [r3, #0]
10045a32:	4aa1      	ldr	r2, [pc, #644]	@ (10045cb8 <UART_SetConfig+0x2b8>)
10045a34:	4013      	ands	r3, r2
10045a36:	0019      	movs	r1, r3
10045a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045a3a:	681a      	ldr	r2, [r3, #0]
10045a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10045a3e:	430b      	orrs	r3, r1
10045a40:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10045a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045a44:	681b      	ldr	r3, [r3, #0]
10045a46:	685b      	ldr	r3, [r3, #4]
10045a48:	4a9c      	ldr	r2, [pc, #624]	@ (10045cbc <UART_SetConfig+0x2bc>)
10045a4a:	4013      	ands	r3, r2
10045a4c:	0018      	movs	r0, r3
10045a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045a50:	68d9      	ldr	r1, [r3, #12]
10045a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045a54:	681a      	ldr	r2, [r3, #0]
10045a56:	0003      	movs	r3, r0
10045a58:	430b      	orrs	r3, r1
10045a5a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
10045a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045a5e:	699b      	ldr	r3, [r3, #24]
10045a60:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
10045a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045a64:	681b      	ldr	r3, [r3, #0]
10045a66:	4a96      	ldr	r2, [pc, #600]	@ (10045cc0 <UART_SetConfig+0x2c0>)
10045a68:	4293      	cmp	r3, r2
10045a6a:	d004      	beq.n	10045a76 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
10045a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045a6e:	6a1b      	ldr	r3, [r3, #32]
10045a70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10045a72:	4313      	orrs	r3, r2
10045a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
10045a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045a78:	681b      	ldr	r3, [r3, #0]
10045a7a:	689b      	ldr	r3, [r3, #8]
10045a7c:	4a91      	ldr	r2, [pc, #580]	@ (10045cc4 <UART_SetConfig+0x2c4>)
10045a7e:	4013      	ands	r3, r2
10045a80:	0019      	movs	r1, r3
10045a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045a84:	681a      	ldr	r2, [r3, #0]
10045a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10045a88:	430b      	orrs	r3, r1
10045a8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10045a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045a8e:	681b      	ldr	r3, [r3, #0]
10045a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10045a92:	220f      	movs	r2, #15
10045a94:	4393      	bics	r3, r2
10045a96:	0018      	movs	r0, r3
10045a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045a9a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10045a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045a9e:	681a      	ldr	r2, [r3, #0]
10045aa0:	0003      	movs	r3, r0
10045aa2:	430b      	orrs	r3, r1
10045aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
10045aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045aa8:	681b      	ldr	r3, [r3, #0]
10045aaa:	4a85      	ldr	r2, [pc, #532]	@ (10045cc0 <UART_SetConfig+0x2c0>)
10045aac:	4293      	cmp	r3, r2
10045aae:	d16d      	bne.n	10045b8c <UART_SetConfig+0x18c>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
10045ab0:	2010      	movs	r0, #16
10045ab2:	f7ff fa2b 	bl	10044f0c <HAL_RCCEx_GetPeriphCLKFreq>
10045ab6:	0003      	movs	r3, r0
10045ab8:	637b      	str	r3, [r7, #52]	@ 0x34
#else
    pclk = UART_PERIPHCLK;
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
10045aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10045abc:	2b00      	cmp	r3, #0
10045abe:	d100      	bne.n	10045ac2 <UART_SetConfig+0xc2>
10045ac0:	e0e3      	b.n	10045c8a <UART_SetConfig+0x28a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
10045ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045ac4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10045ac6:	4b80      	ldr	r3, [pc, #512]	@ (10045cc8 <UART_SetConfig+0x2c8>)
10045ac8:	0052      	lsls	r2, r2, #1
10045aca:	5ad3      	ldrh	r3, [r2, r3]
10045acc:	0019      	movs	r1, r3
10045ace:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10045ad0:	f7fa fb2a 	bl	10040128 <__udivsi3>
10045ad4:	0003      	movs	r3, r0
10045ad6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10045ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045ada:	685a      	ldr	r2, [r3, #4]
10045adc:	0013      	movs	r3, r2
10045ade:	005b      	lsls	r3, r3, #1
10045ae0:	189b      	adds	r3, r3, r2
10045ae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10045ae4:	429a      	cmp	r2, r3
10045ae6:	d305      	bcc.n	10045af4 <UART_SetConfig+0xf4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
10045ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045aea:	685b      	ldr	r3, [r3, #4]
10045aec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10045aee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10045af0:	429a      	cmp	r2, r3
10045af2:	d906      	bls.n	10045b02 <UART_SetConfig+0x102>
      {
        ret = HAL_ERROR;
10045af4:	231b      	movs	r3, #27
10045af6:	2220      	movs	r2, #32
10045af8:	189b      	adds	r3, r3, r2
10045afa:	19db      	adds	r3, r3, r7
10045afc:	2201      	movs	r2, #1
10045afe:	701a      	strb	r2, [r3, #0]
10045b00:	e0c3      	b.n	10045c8a <UART_SetConfig+0x28a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10045b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10045b04:	61bb      	str	r3, [r7, #24]
10045b06:	2300      	movs	r3, #0
10045b08:	61fb      	str	r3, [r7, #28]
10045b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045b0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10045b0e:	4b6e      	ldr	r3, [pc, #440]	@ (10045cc8 <UART_SetConfig+0x2c8>)
10045b10:	0052      	lsls	r2, r2, #1
10045b12:	5ad3      	ldrh	r3, [r2, r3]
10045b14:	613b      	str	r3, [r7, #16]
10045b16:	2300      	movs	r3, #0
10045b18:	617b      	str	r3, [r7, #20]
10045b1a:	693a      	ldr	r2, [r7, #16]
10045b1c:	697b      	ldr	r3, [r7, #20]
10045b1e:	69b8      	ldr	r0, [r7, #24]
10045b20:	69f9      	ldr	r1, [r7, #28]
10045b22:	f7fa fc77 	bl	10040414 <__aeabi_uldivmod>
10045b26:	0002      	movs	r2, r0
10045b28:	000b      	movs	r3, r1
10045b2a:	0e11      	lsrs	r1, r2, #24
10045b2c:	021d      	lsls	r5, r3, #8
10045b2e:	430d      	orrs	r5, r1
10045b30:	0214      	lsls	r4, r2, #8
10045b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045b34:	685b      	ldr	r3, [r3, #4]
10045b36:	085b      	lsrs	r3, r3, #1
10045b38:	60bb      	str	r3, [r7, #8]
10045b3a:	2300      	movs	r3, #0
10045b3c:	60fb      	str	r3, [r7, #12]
10045b3e:	68b8      	ldr	r0, [r7, #8]
10045b40:	68f9      	ldr	r1, [r7, #12]
10045b42:	1900      	adds	r0, r0, r4
10045b44:	4169      	adcs	r1, r5
10045b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045b48:	685b      	ldr	r3, [r3, #4]
10045b4a:	603b      	str	r3, [r7, #0]
10045b4c:	2300      	movs	r3, #0
10045b4e:	607b      	str	r3, [r7, #4]
10045b50:	683a      	ldr	r2, [r7, #0]
10045b52:	687b      	ldr	r3, [r7, #4]
10045b54:	f7fa fc5e 	bl	10040414 <__aeabi_uldivmod>
10045b58:	0002      	movs	r2, r0
10045b5a:	000b      	movs	r3, r1
10045b5c:	0013      	movs	r3, r2
10045b5e:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
10045b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10045b62:	23c0      	movs	r3, #192	@ 0xc0
10045b64:	009b      	lsls	r3, r3, #2
10045b66:	429a      	cmp	r2, r3
10045b68:	d309      	bcc.n	10045b7e <UART_SetConfig+0x17e>
10045b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10045b6c:	2380      	movs	r3, #128	@ 0x80
10045b6e:	035b      	lsls	r3, r3, #13
10045b70:	429a      	cmp	r2, r3
10045b72:	d204      	bcs.n	10045b7e <UART_SetConfig+0x17e>
        {
          huart->Instance->BRR = usartdiv;
10045b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045b76:	681b      	ldr	r3, [r3, #0]
10045b78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10045b7a:	60da      	str	r2, [r3, #12]
10045b7c:	e085      	b.n	10045c8a <UART_SetConfig+0x28a>
        }
        else
        {
          ret = HAL_ERROR;
10045b7e:	231b      	movs	r3, #27
10045b80:	2220      	movs	r2, #32
10045b82:	189b      	adds	r3, r3, r2
10045b84:	19db      	adds	r3, r3, r7
10045b86:	2201      	movs	r2, #1
10045b88:	701a      	strb	r2, [r3, #0]
10045b8a:	e07e      	b.n	10045c8a <UART_SetConfig+0x28a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
10045b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045b8e:	69da      	ldr	r2, [r3, #28]
10045b90:	2380      	movs	r3, #128	@ 0x80
10045b92:	021b      	lsls	r3, r3, #8
10045b94:	429a      	cmp	r2, r3
10045b96:	d148      	bne.n	10045c2a <UART_SetConfig+0x22a>
  {
    pclk = UART_PERIPHCLK;
10045b98:	4b4c      	ldr	r3, [pc, #304]	@ (10045ccc <UART_SetConfig+0x2cc>)
10045b9a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
10045b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10045b9e:	2b00      	cmp	r3, #0
10045ba0:	d100      	bne.n	10045ba4 <UART_SetConfig+0x1a4>
10045ba2:	e072      	b.n	10045c8a <UART_SetConfig+0x28a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10045ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045ba6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10045ba8:	4b47      	ldr	r3, [pc, #284]	@ (10045cc8 <UART_SetConfig+0x2c8>)
10045baa:	0052      	lsls	r2, r2, #1
10045bac:	5ad3      	ldrh	r3, [r2, r3]
10045bae:	0019      	movs	r1, r3
10045bb0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10045bb2:	f7fa fab9 	bl	10040128 <__udivsi3>
10045bb6:	0003      	movs	r3, r0
10045bb8:	005a      	lsls	r2, r3, #1
10045bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045bbc:	685b      	ldr	r3, [r3, #4]
10045bbe:	085b      	lsrs	r3, r3, #1
10045bc0:	18d2      	adds	r2, r2, r3
10045bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045bc4:	685b      	ldr	r3, [r3, #4]
10045bc6:	0019      	movs	r1, r3
10045bc8:	0010      	movs	r0, r2
10045bca:	f7fa faad 	bl	10040128 <__udivsi3>
10045bce:	0003      	movs	r3, r0
10045bd0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10045bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10045bd4:	2b0f      	cmp	r3, #15
10045bd6:	d921      	bls.n	10045c1c <UART_SetConfig+0x21c>
10045bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10045bda:	2380      	movs	r3, #128	@ 0x80
10045bdc:	025b      	lsls	r3, r3, #9
10045bde:	429a      	cmp	r2, r3
10045be0:	d21c      	bcs.n	10045c1c <UART_SetConfig+0x21c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10045be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10045be4:	b29a      	uxth	r2, r3
10045be6:	200e      	movs	r0, #14
10045be8:	2420      	movs	r4, #32
10045bea:	1903      	adds	r3, r0, r4
10045bec:	19db      	adds	r3, r3, r7
10045bee:	210f      	movs	r1, #15
10045bf0:	438a      	bics	r2, r1
10045bf2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
10045bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10045bf6:	085b      	lsrs	r3, r3, #1
10045bf8:	b29b      	uxth	r3, r3
10045bfa:	2207      	movs	r2, #7
10045bfc:	4013      	ands	r3, r2
10045bfe:	b299      	uxth	r1, r3
10045c00:	1903      	adds	r3, r0, r4
10045c02:	19db      	adds	r3, r3, r7
10045c04:	1902      	adds	r2, r0, r4
10045c06:	19d2      	adds	r2, r2, r7
10045c08:	8812      	ldrh	r2, [r2, #0]
10045c0a:	430a      	orrs	r2, r1
10045c0c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
10045c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045c10:	681b      	ldr	r3, [r3, #0]
10045c12:	1902      	adds	r2, r0, r4
10045c14:	19d2      	adds	r2, r2, r7
10045c16:	8812      	ldrh	r2, [r2, #0]
10045c18:	60da      	str	r2, [r3, #12]
10045c1a:	e036      	b.n	10045c8a <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
10045c1c:	231b      	movs	r3, #27
10045c1e:	2220      	movs	r2, #32
10045c20:	189b      	adds	r3, r3, r2
10045c22:	19db      	adds	r3, r3, r7
10045c24:	2201      	movs	r2, #1
10045c26:	701a      	strb	r2, [r3, #0]
10045c28:	e02f      	b.n	10045c8a <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
10045c2a:	4b28      	ldr	r3, [pc, #160]	@ (10045ccc <UART_SetConfig+0x2cc>)
10045c2c:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
10045c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10045c30:	2b00      	cmp	r3, #0
10045c32:	d02a      	beq.n	10045c8a <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10045c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045c36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10045c38:	4b23      	ldr	r3, [pc, #140]	@ (10045cc8 <UART_SetConfig+0x2c8>)
10045c3a:	0052      	lsls	r2, r2, #1
10045c3c:	5ad3      	ldrh	r3, [r2, r3]
10045c3e:	0019      	movs	r1, r3
10045c40:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10045c42:	f7fa fa71 	bl	10040128 <__udivsi3>
10045c46:	0003      	movs	r3, r0
10045c48:	001a      	movs	r2, r3
10045c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045c4c:	685b      	ldr	r3, [r3, #4]
10045c4e:	085b      	lsrs	r3, r3, #1
10045c50:	18d2      	adds	r2, r2, r3
10045c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045c54:	685b      	ldr	r3, [r3, #4]
10045c56:	0019      	movs	r1, r3
10045c58:	0010      	movs	r0, r2
10045c5a:	f7fa fa65 	bl	10040128 <__udivsi3>
10045c5e:	0003      	movs	r3, r0
10045c60:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10045c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10045c64:	2b0f      	cmp	r3, #15
10045c66:	d90a      	bls.n	10045c7e <UART_SetConfig+0x27e>
10045c68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10045c6a:	2380      	movs	r3, #128	@ 0x80
10045c6c:	025b      	lsls	r3, r3, #9
10045c6e:	429a      	cmp	r2, r3
10045c70:	d205      	bcs.n	10045c7e <UART_SetConfig+0x27e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
10045c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10045c74:	b29a      	uxth	r2, r3
10045c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045c78:	681b      	ldr	r3, [r3, #0]
10045c7a:	60da      	str	r2, [r3, #12]
10045c7c:	e005      	b.n	10045c8a <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
10045c7e:	231b      	movs	r3, #27
10045c80:	2220      	movs	r2, #32
10045c82:	189b      	adds	r3, r3, r2
10045c84:	19db      	adds	r3, r3, r7
10045c86:	2201      	movs	r2, #1
10045c88:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
10045c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045c8c:	226a      	movs	r2, #106	@ 0x6a
10045c8e:	2101      	movs	r1, #1
10045c90:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
10045c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045c94:	2268      	movs	r2, #104	@ 0x68
10045c96:	2101      	movs	r1, #1
10045c98:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
10045c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045c9c:	2200      	movs	r2, #0
10045c9e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
10045ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045ca2:	2200      	movs	r2, #0
10045ca4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
10045ca6:	231b      	movs	r3, #27
10045ca8:	2220      	movs	r2, #32
10045caa:	189b      	adds	r3, r3, r2
10045cac:	19db      	adds	r3, r3, r7
10045cae:	781b      	ldrb	r3, [r3, #0]
}
10045cb0:	0018      	movs	r0, r3
10045cb2:	46bd      	mov	sp, r7
10045cb4:	b010      	add	sp, #64	@ 0x40
10045cb6:	bdb0      	pop	{r4, r5, r7, pc}
10045cb8:	cfff69f3 	.word	0xcfff69f3
10045cbc:	ffffcfff 	.word	0xffffcfff
10045cc0:	41005000 	.word	0x41005000
10045cc4:	11fff4ff 	.word	0x11fff4ff
10045cc8:	10047370 	.word	0x10047370
10045ccc:	00f42400 	.word	0x00f42400

10045cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
10045cd0:	b580      	push	{r7, lr}
10045cd2:	b082      	sub	sp, #8
10045cd4:	af00      	add	r7, sp, #0
10045cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10045cd8:	687b      	ldr	r3, [r7, #4]
10045cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10045cdc:	2208      	movs	r2, #8
10045cde:	4013      	ands	r3, r2
10045ce0:	d00b      	beq.n	10045cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
10045ce2:	687b      	ldr	r3, [r7, #4]
10045ce4:	681b      	ldr	r3, [r3, #0]
10045ce6:	685b      	ldr	r3, [r3, #4]
10045ce8:	4a4a      	ldr	r2, [pc, #296]	@ (10045e14 <UART_AdvFeatureConfig+0x144>)
10045cea:	4013      	ands	r3, r2
10045cec:	0019      	movs	r1, r3
10045cee:	687b      	ldr	r3, [r7, #4]
10045cf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10045cf2:	687b      	ldr	r3, [r7, #4]
10045cf4:	681b      	ldr	r3, [r3, #0]
10045cf6:	430a      	orrs	r2, r1
10045cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
10045cfa:	687b      	ldr	r3, [r7, #4]
10045cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10045cfe:	2201      	movs	r2, #1
10045d00:	4013      	ands	r3, r2
10045d02:	d00b      	beq.n	10045d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
10045d04:	687b      	ldr	r3, [r7, #4]
10045d06:	681b      	ldr	r3, [r3, #0]
10045d08:	685b      	ldr	r3, [r3, #4]
10045d0a:	4a43      	ldr	r2, [pc, #268]	@ (10045e18 <UART_AdvFeatureConfig+0x148>)
10045d0c:	4013      	ands	r3, r2
10045d0e:	0019      	movs	r1, r3
10045d10:	687b      	ldr	r3, [r7, #4]
10045d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10045d14:	687b      	ldr	r3, [r7, #4]
10045d16:	681b      	ldr	r3, [r3, #0]
10045d18:	430a      	orrs	r2, r1
10045d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
10045d1c:	687b      	ldr	r3, [r7, #4]
10045d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10045d20:	2202      	movs	r2, #2
10045d22:	4013      	ands	r3, r2
10045d24:	d00b      	beq.n	10045d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
10045d26:	687b      	ldr	r3, [r7, #4]
10045d28:	681b      	ldr	r3, [r3, #0]
10045d2a:	685b      	ldr	r3, [r3, #4]
10045d2c:	4a3b      	ldr	r2, [pc, #236]	@ (10045e1c <UART_AdvFeatureConfig+0x14c>)
10045d2e:	4013      	ands	r3, r2
10045d30:	0019      	movs	r1, r3
10045d32:	687b      	ldr	r3, [r7, #4]
10045d34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10045d36:	687b      	ldr	r3, [r7, #4]
10045d38:	681b      	ldr	r3, [r3, #0]
10045d3a:	430a      	orrs	r2, r1
10045d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
10045d3e:	687b      	ldr	r3, [r7, #4]
10045d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10045d42:	2204      	movs	r2, #4
10045d44:	4013      	ands	r3, r2
10045d46:	d00b      	beq.n	10045d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
10045d48:	687b      	ldr	r3, [r7, #4]
10045d4a:	681b      	ldr	r3, [r3, #0]
10045d4c:	685b      	ldr	r3, [r3, #4]
10045d4e:	4a34      	ldr	r2, [pc, #208]	@ (10045e20 <UART_AdvFeatureConfig+0x150>)
10045d50:	4013      	ands	r3, r2
10045d52:	0019      	movs	r1, r3
10045d54:	687b      	ldr	r3, [r7, #4]
10045d56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10045d58:	687b      	ldr	r3, [r7, #4]
10045d5a:	681b      	ldr	r3, [r3, #0]
10045d5c:	430a      	orrs	r2, r1
10045d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
10045d60:	687b      	ldr	r3, [r7, #4]
10045d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10045d64:	2210      	movs	r2, #16
10045d66:	4013      	ands	r3, r2
10045d68:	d00b      	beq.n	10045d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
10045d6a:	687b      	ldr	r3, [r7, #4]
10045d6c:	681b      	ldr	r3, [r3, #0]
10045d6e:	689b      	ldr	r3, [r3, #8]
10045d70:	4a2c      	ldr	r2, [pc, #176]	@ (10045e24 <UART_AdvFeatureConfig+0x154>)
10045d72:	4013      	ands	r3, r2
10045d74:	0019      	movs	r1, r3
10045d76:	687b      	ldr	r3, [r7, #4]
10045d78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
10045d7a:	687b      	ldr	r3, [r7, #4]
10045d7c:	681b      	ldr	r3, [r3, #0]
10045d7e:	430a      	orrs	r2, r1
10045d80:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
10045d82:	687b      	ldr	r3, [r7, #4]
10045d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10045d86:	2220      	movs	r2, #32
10045d88:	4013      	ands	r3, r2
10045d8a:	d00b      	beq.n	10045da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
10045d8c:	687b      	ldr	r3, [r7, #4]
10045d8e:	681b      	ldr	r3, [r3, #0]
10045d90:	689b      	ldr	r3, [r3, #8]
10045d92:	4a25      	ldr	r2, [pc, #148]	@ (10045e28 <UART_AdvFeatureConfig+0x158>)
10045d94:	4013      	ands	r3, r2
10045d96:	0019      	movs	r1, r3
10045d98:	687b      	ldr	r3, [r7, #4]
10045d9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10045d9c:	687b      	ldr	r3, [r7, #4]
10045d9e:	681b      	ldr	r3, [r3, #0]
10045da0:	430a      	orrs	r2, r1
10045da2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
10045da4:	687b      	ldr	r3, [r7, #4]
10045da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10045da8:	2240      	movs	r2, #64	@ 0x40
10045daa:	4013      	ands	r3, r2
10045dac:	d01d      	beq.n	10045dea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
10045dae:	687b      	ldr	r3, [r7, #4]
10045db0:	681b      	ldr	r3, [r3, #0]
10045db2:	685b      	ldr	r3, [r3, #4]
10045db4:	4a1d      	ldr	r2, [pc, #116]	@ (10045e2c <UART_AdvFeatureConfig+0x15c>)
10045db6:	4013      	ands	r3, r2
10045db8:	0019      	movs	r1, r3
10045dba:	687b      	ldr	r3, [r7, #4]
10045dbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10045dbe:	687b      	ldr	r3, [r7, #4]
10045dc0:	681b      	ldr	r3, [r3, #0]
10045dc2:	430a      	orrs	r2, r1
10045dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
10045dc6:	687b      	ldr	r3, [r7, #4]
10045dc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10045dca:	2380      	movs	r3, #128	@ 0x80
10045dcc:	035b      	lsls	r3, r3, #13
10045dce:	429a      	cmp	r2, r3
10045dd0:	d10b      	bne.n	10045dea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
10045dd2:	687b      	ldr	r3, [r7, #4]
10045dd4:	681b      	ldr	r3, [r3, #0]
10045dd6:	685b      	ldr	r3, [r3, #4]
10045dd8:	4a15      	ldr	r2, [pc, #84]	@ (10045e30 <UART_AdvFeatureConfig+0x160>)
10045dda:	4013      	ands	r3, r2
10045ddc:	0019      	movs	r1, r3
10045dde:	687b      	ldr	r3, [r7, #4]
10045de0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10045de2:	687b      	ldr	r3, [r7, #4]
10045de4:	681b      	ldr	r3, [r3, #0]
10045de6:	430a      	orrs	r2, r1
10045de8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
10045dea:	687b      	ldr	r3, [r7, #4]
10045dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10045dee:	2280      	movs	r2, #128	@ 0x80
10045df0:	4013      	ands	r3, r2
10045df2:	d00b      	beq.n	10045e0c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
10045df4:	687b      	ldr	r3, [r7, #4]
10045df6:	681b      	ldr	r3, [r3, #0]
10045df8:	685b      	ldr	r3, [r3, #4]
10045dfa:	4a0e      	ldr	r2, [pc, #56]	@ (10045e34 <UART_AdvFeatureConfig+0x164>)
10045dfc:	4013      	ands	r3, r2
10045dfe:	0019      	movs	r1, r3
10045e00:	687b      	ldr	r3, [r7, #4]
10045e02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
10045e04:	687b      	ldr	r3, [r7, #4]
10045e06:	681b      	ldr	r3, [r3, #0]
10045e08:	430a      	orrs	r2, r1
10045e0a:	605a      	str	r2, [r3, #4]
  }
}
10045e0c:	46c0      	nop			@ (mov r8, r8)
10045e0e:	46bd      	mov	sp, r7
10045e10:	b002      	add	sp, #8
10045e12:	bd80      	pop	{r7, pc}
10045e14:	ffff7fff 	.word	0xffff7fff
10045e18:	fffdffff 	.word	0xfffdffff
10045e1c:	fffeffff 	.word	0xfffeffff
10045e20:	fffbffff 	.word	0xfffbffff
10045e24:	ffffefff 	.word	0xffffefff
10045e28:	ffffdfff 	.word	0xffffdfff
10045e2c:	ffefffff 	.word	0xffefffff
10045e30:	ff9fffff 	.word	0xff9fffff
10045e34:	fff7ffff 	.word	0xfff7ffff

10045e38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
10045e38:	b580      	push	{r7, lr}
10045e3a:	b092      	sub	sp, #72	@ 0x48
10045e3c:	af02      	add	r7, sp, #8
10045e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
10045e40:	687b      	ldr	r3, [r7, #4]
10045e42:	2290      	movs	r2, #144	@ 0x90
10045e44:	2100      	movs	r1, #0
10045e46:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
10045e48:	f7fc fa58 	bl	100422fc <HAL_GetTick>
10045e4c:	0003      	movs	r3, r0
10045e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
10045e50:	687b      	ldr	r3, [r7, #4]
10045e52:	681b      	ldr	r3, [r3, #0]
10045e54:	681b      	ldr	r3, [r3, #0]
10045e56:	2208      	movs	r2, #8
10045e58:	4013      	ands	r3, r2
10045e5a:	2b08      	cmp	r3, #8
10045e5c:	d12d      	bne.n	10045eba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10045e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10045e60:	2280      	movs	r2, #128	@ 0x80
10045e62:	0391      	lsls	r1, r2, #14
10045e64:	6878      	ldr	r0, [r7, #4]
10045e66:	4a47      	ldr	r2, [pc, #284]	@ (10045f84 <UART_CheckIdleState+0x14c>)
10045e68:	9200      	str	r2, [sp, #0]
10045e6a:	2200      	movs	r2, #0
10045e6c:	f000 f88e 	bl	10045f8c <UART_WaitOnFlagUntilTimeout>
10045e70:	1e03      	subs	r3, r0, #0
10045e72:	d022      	beq.n	10045eba <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10045e74:	f3ef 8310 	mrs	r3, PRIMASK
10045e78:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
10045e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
10045e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
10045e7e:	2301      	movs	r3, #1
10045e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10045e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10045e84:	f383 8810 	msr	PRIMASK, r3
}
10045e88:	46c0      	nop			@ (mov r8, r8)
10045e8a:	687b      	ldr	r3, [r7, #4]
10045e8c:	681b      	ldr	r3, [r3, #0]
10045e8e:	681a      	ldr	r2, [r3, #0]
10045e90:	687b      	ldr	r3, [r7, #4]
10045e92:	681b      	ldr	r3, [r3, #0]
10045e94:	2180      	movs	r1, #128	@ 0x80
10045e96:	438a      	bics	r2, r1
10045e98:	601a      	str	r2, [r3, #0]
10045e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10045e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10045e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10045ea0:	f383 8810 	msr	PRIMASK, r3
}
10045ea4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
10045ea6:	687b      	ldr	r3, [r7, #4]
10045ea8:	2288      	movs	r2, #136	@ 0x88
10045eaa:	2120      	movs	r1, #32
10045eac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
10045eae:	687b      	ldr	r3, [r7, #4]
10045eb0:	2284      	movs	r2, #132	@ 0x84
10045eb2:	2100      	movs	r1, #0
10045eb4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
10045eb6:	2303      	movs	r3, #3
10045eb8:	e060      	b.n	10045f7c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
10045eba:	687b      	ldr	r3, [r7, #4]
10045ebc:	681b      	ldr	r3, [r3, #0]
10045ebe:	681b      	ldr	r3, [r3, #0]
10045ec0:	2204      	movs	r2, #4
10045ec2:	4013      	ands	r3, r2
10045ec4:	2b04      	cmp	r3, #4
10045ec6:	d146      	bne.n	10045f56 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10045ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10045eca:	2280      	movs	r2, #128	@ 0x80
10045ecc:	03d1      	lsls	r1, r2, #15
10045ece:	6878      	ldr	r0, [r7, #4]
10045ed0:	4a2c      	ldr	r2, [pc, #176]	@ (10045f84 <UART_CheckIdleState+0x14c>)
10045ed2:	9200      	str	r2, [sp, #0]
10045ed4:	2200      	movs	r2, #0
10045ed6:	f000 f859 	bl	10045f8c <UART_WaitOnFlagUntilTimeout>
10045eda:	1e03      	subs	r3, r0, #0
10045edc:	d03b      	beq.n	10045f56 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10045ede:	f3ef 8310 	mrs	r3, PRIMASK
10045ee2:	60fb      	str	r3, [r7, #12]
  return(result);
10045ee4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10045ee6:	637b      	str	r3, [r7, #52]	@ 0x34
10045ee8:	2301      	movs	r3, #1
10045eea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10045eec:	693b      	ldr	r3, [r7, #16]
10045eee:	f383 8810 	msr	PRIMASK, r3
}
10045ef2:	46c0      	nop			@ (mov r8, r8)
10045ef4:	687b      	ldr	r3, [r7, #4]
10045ef6:	681b      	ldr	r3, [r3, #0]
10045ef8:	681a      	ldr	r2, [r3, #0]
10045efa:	687b      	ldr	r3, [r7, #4]
10045efc:	681b      	ldr	r3, [r3, #0]
10045efe:	4922      	ldr	r1, [pc, #136]	@ (10045f88 <UART_CheckIdleState+0x150>)
10045f00:	400a      	ands	r2, r1
10045f02:	601a      	str	r2, [r3, #0]
10045f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10045f06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10045f08:	697b      	ldr	r3, [r7, #20]
10045f0a:	f383 8810 	msr	PRIMASK, r3
}
10045f0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10045f10:	f3ef 8310 	mrs	r3, PRIMASK
10045f14:	61bb      	str	r3, [r7, #24]
  return(result);
10045f16:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10045f18:	633b      	str	r3, [r7, #48]	@ 0x30
10045f1a:	2301      	movs	r3, #1
10045f1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10045f1e:	69fb      	ldr	r3, [r7, #28]
10045f20:	f383 8810 	msr	PRIMASK, r3
}
10045f24:	46c0      	nop			@ (mov r8, r8)
10045f26:	687b      	ldr	r3, [r7, #4]
10045f28:	681b      	ldr	r3, [r3, #0]
10045f2a:	689a      	ldr	r2, [r3, #8]
10045f2c:	687b      	ldr	r3, [r7, #4]
10045f2e:	681b      	ldr	r3, [r3, #0]
10045f30:	2101      	movs	r1, #1
10045f32:	438a      	bics	r2, r1
10045f34:	609a      	str	r2, [r3, #8]
10045f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10045f38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10045f3a:	6a3b      	ldr	r3, [r7, #32]
10045f3c:	f383 8810 	msr	PRIMASK, r3
}
10045f40:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
10045f42:	687b      	ldr	r3, [r7, #4]
10045f44:	228c      	movs	r2, #140	@ 0x8c
10045f46:	2120      	movs	r1, #32
10045f48:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
10045f4a:	687b      	ldr	r3, [r7, #4]
10045f4c:	2284      	movs	r2, #132	@ 0x84
10045f4e:	2100      	movs	r1, #0
10045f50:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
10045f52:	2303      	movs	r3, #3
10045f54:	e012      	b.n	10045f7c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
10045f56:	687b      	ldr	r3, [r7, #4]
10045f58:	2288      	movs	r2, #136	@ 0x88
10045f5a:	2120      	movs	r1, #32
10045f5c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
10045f5e:	687b      	ldr	r3, [r7, #4]
10045f60:	228c      	movs	r2, #140	@ 0x8c
10045f62:	2120      	movs	r1, #32
10045f64:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10045f66:	687b      	ldr	r3, [r7, #4]
10045f68:	2200      	movs	r2, #0
10045f6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
10045f6c:	687b      	ldr	r3, [r7, #4]
10045f6e:	2200      	movs	r2, #0
10045f70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
10045f72:	687b      	ldr	r3, [r7, #4]
10045f74:	2284      	movs	r2, #132	@ 0x84
10045f76:	2100      	movs	r1, #0
10045f78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10045f7a:	2300      	movs	r3, #0
}
10045f7c:	0018      	movs	r0, r3
10045f7e:	46bd      	mov	sp, r7
10045f80:	b010      	add	sp, #64	@ 0x40
10045f82:	bd80      	pop	{r7, pc}
10045f84:	01ffffff 	.word	0x01ffffff
10045f88:	fffffedf 	.word	0xfffffedf

10045f8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
10045f8c:	b580      	push	{r7, lr}
10045f8e:	b084      	sub	sp, #16
10045f90:	af00      	add	r7, sp, #0
10045f92:	60f8      	str	r0, [r7, #12]
10045f94:	60b9      	str	r1, [r7, #8]
10045f96:	603b      	str	r3, [r7, #0]
10045f98:	1dfb      	adds	r3, r7, #7
10045f9a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10045f9c:	e051      	b.n	10046042 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10045f9e:	69bb      	ldr	r3, [r7, #24]
10045fa0:	3301      	adds	r3, #1
10045fa2:	d04e      	beq.n	10046042 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10045fa4:	f7fc f9aa 	bl	100422fc <HAL_GetTick>
10045fa8:	0002      	movs	r2, r0
10045faa:	683b      	ldr	r3, [r7, #0]
10045fac:	1ad3      	subs	r3, r2, r3
10045fae:	69ba      	ldr	r2, [r7, #24]
10045fb0:	429a      	cmp	r2, r3
10045fb2:	d302      	bcc.n	10045fba <UART_WaitOnFlagUntilTimeout+0x2e>
10045fb4:	69bb      	ldr	r3, [r7, #24]
10045fb6:	2b00      	cmp	r3, #0
10045fb8:	d101      	bne.n	10045fbe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
10045fba:	2303      	movs	r3, #3
10045fbc:	e051      	b.n	10046062 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
10045fbe:	68fb      	ldr	r3, [r7, #12]
10045fc0:	681b      	ldr	r3, [r3, #0]
10045fc2:	681b      	ldr	r3, [r3, #0]
10045fc4:	2204      	movs	r2, #4
10045fc6:	4013      	ands	r3, r2
10045fc8:	d03b      	beq.n	10046042 <UART_WaitOnFlagUntilTimeout+0xb6>
10045fca:	68bb      	ldr	r3, [r7, #8]
10045fcc:	2b80      	cmp	r3, #128	@ 0x80
10045fce:	d038      	beq.n	10046042 <UART_WaitOnFlagUntilTimeout+0xb6>
10045fd0:	68bb      	ldr	r3, [r7, #8]
10045fd2:	2b40      	cmp	r3, #64	@ 0x40
10045fd4:	d035      	beq.n	10046042 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
10045fd6:	68fb      	ldr	r3, [r7, #12]
10045fd8:	681b      	ldr	r3, [r3, #0]
10045fda:	69db      	ldr	r3, [r3, #28]
10045fdc:	2208      	movs	r2, #8
10045fde:	4013      	ands	r3, r2
10045fe0:	2b08      	cmp	r3, #8
10045fe2:	d111      	bne.n	10046008 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
10045fe4:	68fb      	ldr	r3, [r7, #12]
10045fe6:	681b      	ldr	r3, [r3, #0]
10045fe8:	2208      	movs	r2, #8
10045fea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10045fec:	68fb      	ldr	r3, [r7, #12]
10045fee:	0018      	movs	r0, r3
10045ff0:	f000 f83c 	bl	1004606c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
10045ff4:	68fb      	ldr	r3, [r7, #12]
10045ff6:	2290      	movs	r2, #144	@ 0x90
10045ff8:	2108      	movs	r1, #8
10045ffa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10045ffc:	68fb      	ldr	r3, [r7, #12]
10045ffe:	2284      	movs	r2, #132	@ 0x84
10046000:	2100      	movs	r1, #0
10046002:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
10046004:	2301      	movs	r3, #1
10046006:	e02c      	b.n	10046062 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
10046008:	68fb      	ldr	r3, [r7, #12]
1004600a:	681b      	ldr	r3, [r3, #0]
1004600c:	69da      	ldr	r2, [r3, #28]
1004600e:	2380      	movs	r3, #128	@ 0x80
10046010:	011b      	lsls	r3, r3, #4
10046012:	401a      	ands	r2, r3
10046014:	2380      	movs	r3, #128	@ 0x80
10046016:	011b      	lsls	r3, r3, #4
10046018:	429a      	cmp	r2, r3
1004601a:	d112      	bne.n	10046042 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
1004601c:	68fb      	ldr	r3, [r7, #12]
1004601e:	681b      	ldr	r3, [r3, #0]
10046020:	2280      	movs	r2, #128	@ 0x80
10046022:	0112      	lsls	r2, r2, #4
10046024:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10046026:	68fb      	ldr	r3, [r7, #12]
10046028:	0018      	movs	r0, r3
1004602a:	f000 f81f 	bl	1004606c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
1004602e:	68fb      	ldr	r3, [r7, #12]
10046030:	2290      	movs	r2, #144	@ 0x90
10046032:	2120      	movs	r1, #32
10046034:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10046036:	68fb      	ldr	r3, [r7, #12]
10046038:	2284      	movs	r2, #132	@ 0x84
1004603a:	2100      	movs	r1, #0
1004603c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
1004603e:	2303      	movs	r3, #3
10046040:	e00f      	b.n	10046062 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10046042:	68fb      	ldr	r3, [r7, #12]
10046044:	681b      	ldr	r3, [r3, #0]
10046046:	69db      	ldr	r3, [r3, #28]
10046048:	68ba      	ldr	r2, [r7, #8]
1004604a:	4013      	ands	r3, r2
1004604c:	68ba      	ldr	r2, [r7, #8]
1004604e:	1ad3      	subs	r3, r2, r3
10046050:	425a      	negs	r2, r3
10046052:	4153      	adcs	r3, r2
10046054:	b2db      	uxtb	r3, r3
10046056:	001a      	movs	r2, r3
10046058:	1dfb      	adds	r3, r7, #7
1004605a:	781b      	ldrb	r3, [r3, #0]
1004605c:	429a      	cmp	r2, r3
1004605e:	d09e      	beq.n	10045f9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
10046060:	2300      	movs	r3, #0
}
10046062:	0018      	movs	r0, r3
10046064:	46bd      	mov	sp, r7
10046066:	b004      	add	sp, #16
10046068:	bd80      	pop	{r7, pc}
	...

1004606c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
1004606c:	b580      	push	{r7, lr}
1004606e:	b08e      	sub	sp, #56	@ 0x38
10046070:	af00      	add	r7, sp, #0
10046072:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046074:	f3ef 8310 	mrs	r3, PRIMASK
10046078:	617b      	str	r3, [r7, #20]
  return(result);
1004607a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004607c:	637b      	str	r3, [r7, #52]	@ 0x34
1004607e:	2301      	movs	r3, #1
10046080:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046082:	69bb      	ldr	r3, [r7, #24]
10046084:	f383 8810 	msr	PRIMASK, r3
}
10046088:	46c0      	nop			@ (mov r8, r8)
1004608a:	687b      	ldr	r3, [r7, #4]
1004608c:	681b      	ldr	r3, [r3, #0]
1004608e:	681a      	ldr	r2, [r3, #0]
10046090:	687b      	ldr	r3, [r7, #4]
10046092:	681b      	ldr	r3, [r3, #0]
10046094:	4926      	ldr	r1, [pc, #152]	@ (10046130 <UART_EndRxTransfer+0xc4>)
10046096:	400a      	ands	r2, r1
10046098:	601a      	str	r2, [r3, #0]
1004609a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004609c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004609e:	69fb      	ldr	r3, [r7, #28]
100460a0:	f383 8810 	msr	PRIMASK, r3
}
100460a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100460a6:	f3ef 8310 	mrs	r3, PRIMASK
100460aa:	623b      	str	r3, [r7, #32]
  return(result);
100460ac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
100460ae:	633b      	str	r3, [r7, #48]	@ 0x30
100460b0:	2301      	movs	r3, #1
100460b2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100460b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100460b6:	f383 8810 	msr	PRIMASK, r3
}
100460ba:	46c0      	nop			@ (mov r8, r8)
100460bc:	687b      	ldr	r3, [r7, #4]
100460be:	681b      	ldr	r3, [r3, #0]
100460c0:	689a      	ldr	r2, [r3, #8]
100460c2:	687b      	ldr	r3, [r7, #4]
100460c4:	681b      	ldr	r3, [r3, #0]
100460c6:	491b      	ldr	r1, [pc, #108]	@ (10046134 <UART_EndRxTransfer+0xc8>)
100460c8:	400a      	ands	r2, r1
100460ca:	609a      	str	r2, [r3, #8]
100460cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100460ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100460d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100460d2:	f383 8810 	msr	PRIMASK, r3
}
100460d6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
100460d8:	687b      	ldr	r3, [r7, #4]
100460da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
100460dc:	2b01      	cmp	r3, #1
100460de:	d118      	bne.n	10046112 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100460e0:	f3ef 8310 	mrs	r3, PRIMASK
100460e4:	60bb      	str	r3, [r7, #8]
  return(result);
100460e6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
100460e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
100460ea:	2301      	movs	r3, #1
100460ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100460ee:	68fb      	ldr	r3, [r7, #12]
100460f0:	f383 8810 	msr	PRIMASK, r3
}
100460f4:	46c0      	nop			@ (mov r8, r8)
100460f6:	687b      	ldr	r3, [r7, #4]
100460f8:	681b      	ldr	r3, [r3, #0]
100460fa:	681a      	ldr	r2, [r3, #0]
100460fc:	687b      	ldr	r3, [r7, #4]
100460fe:	681b      	ldr	r3, [r3, #0]
10046100:	2110      	movs	r1, #16
10046102:	438a      	bics	r2, r1
10046104:	601a      	str	r2, [r3, #0]
10046106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10046108:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004610a:	693b      	ldr	r3, [r7, #16]
1004610c:	f383 8810 	msr	PRIMASK, r3
}
10046110:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
10046112:	687b      	ldr	r3, [r7, #4]
10046114:	228c      	movs	r2, #140	@ 0x8c
10046116:	2120      	movs	r1, #32
10046118:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004611a:	687b      	ldr	r3, [r7, #4]
1004611c:	2200      	movs	r2, #0
1004611e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
10046120:	687b      	ldr	r3, [r7, #4]
10046122:	2200      	movs	r2, #0
10046124:	675a      	str	r2, [r3, #116]	@ 0x74
}
10046126:	46c0      	nop			@ (mov r8, r8)
10046128:	46bd      	mov	sp, r7
1004612a:	b00e      	add	sp, #56	@ 0x38
1004612c:	bd80      	pop	{r7, pc}
1004612e:	46c0      	nop			@ (mov r8, r8)
10046130:	fffffedf 	.word	0xfffffedf
10046134:	effffffe 	.word	0xeffffffe

10046138 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
10046138:	b580      	push	{r7, lr}
1004613a:	b084      	sub	sp, #16
1004613c:	af00      	add	r7, sp, #0
1004613e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
10046140:	687b      	ldr	r3, [r7, #4]
10046142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10046144:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
10046146:	68fb      	ldr	r3, [r7, #12]
10046148:	225e      	movs	r2, #94	@ 0x5e
1004614a:	2100      	movs	r1, #0
1004614c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
1004614e:	68fb      	ldr	r3, [r7, #12]
10046150:	0018      	movs	r0, r3
10046152:	f7ff fc41 	bl	100459d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
10046156:	46c0      	nop			@ (mov r8, r8)
10046158:	46bd      	mov	sp, r7
1004615a:	b004      	add	sp, #16
1004615c:	bd80      	pop	{r7, pc}

1004615e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
1004615e:	b580      	push	{r7, lr}
10046160:	b086      	sub	sp, #24
10046162:	af00      	add	r7, sp, #0
10046164:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046166:	f3ef 8310 	mrs	r3, PRIMASK
1004616a:	60bb      	str	r3, [r7, #8]
  return(result);
1004616c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
1004616e:	617b      	str	r3, [r7, #20]
10046170:	2301      	movs	r3, #1
10046172:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046174:	68fb      	ldr	r3, [r7, #12]
10046176:	f383 8810 	msr	PRIMASK, r3
}
1004617a:	46c0      	nop			@ (mov r8, r8)
1004617c:	687b      	ldr	r3, [r7, #4]
1004617e:	681b      	ldr	r3, [r3, #0]
10046180:	681a      	ldr	r2, [r3, #0]
10046182:	687b      	ldr	r3, [r7, #4]
10046184:	681b      	ldr	r3, [r3, #0]
10046186:	2140      	movs	r1, #64	@ 0x40
10046188:	438a      	bics	r2, r1
1004618a:	601a      	str	r2, [r3, #0]
1004618c:	697b      	ldr	r3, [r7, #20]
1004618e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046190:	693b      	ldr	r3, [r7, #16]
10046192:	f383 8810 	msr	PRIMASK, r3
}
10046196:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
10046198:	687b      	ldr	r3, [r7, #4]
1004619a:	2288      	movs	r2, #136	@ 0x88
1004619c:	2120      	movs	r1, #32
1004619e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
100461a0:	687b      	ldr	r3, [r7, #4]
100461a2:	2200      	movs	r2, #0
100461a4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
100461a6:	687b      	ldr	r3, [r7, #4]
100461a8:	0018      	movs	r0, r3
100461aa:	f7ff fc0d 	bl	100459c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
100461ae:	46c0      	nop			@ (mov r8, r8)
100461b0:	46bd      	mov	sp, r7
100461b2:	b006      	add	sp, #24
100461b4:	bd80      	pop	{r7, pc}

100461b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
100461b6:	b580      	push	{r7, lr}
100461b8:	b082      	sub	sp, #8
100461ba:	af00      	add	r7, sp, #0
100461bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
100461be:	46c0      	nop			@ (mov r8, r8)
100461c0:	46bd      	mov	sp, r7
100461c2:	b002      	add	sp, #8
100461c4:	bd80      	pop	{r7, pc}

100461c6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
100461c6:	b580      	push	{r7, lr}
100461c8:	b082      	sub	sp, #8
100461ca:	af00      	add	r7, sp, #0
100461cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
100461ce:	46c0      	nop			@ (mov r8, r8)
100461d0:	46bd      	mov	sp, r7
100461d2:	b002      	add	sp, #8
100461d4:	bd80      	pop	{r7, pc}

100461d6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
100461d6:	b580      	push	{r7, lr}
100461d8:	b082      	sub	sp, #8
100461da:	af00      	add	r7, sp, #0
100461dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
100461de:	46c0      	nop			@ (mov r8, r8)
100461e0:	46bd      	mov	sp, r7
100461e2:	b002      	add	sp, #8
100461e4:	bd80      	pop	{r7, pc}

100461e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
100461e6:	b580      	push	{r7, lr}
100461e8:	b084      	sub	sp, #16
100461ea:	af00      	add	r7, sp, #0
100461ec:	6078      	str	r0, [r7, #4]
100461ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
100461f0:	687b      	ldr	r3, [r7, #4]
100461f2:	2284      	movs	r2, #132	@ 0x84
100461f4:	5c9b      	ldrb	r3, [r3, r2]
100461f6:	2b01      	cmp	r3, #1
100461f8:	d101      	bne.n	100461fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
100461fa:	2302      	movs	r3, #2
100461fc:	e02e      	b.n	1004625c <HAL_UARTEx_SetTxFifoThreshold+0x76>
100461fe:	687b      	ldr	r3, [r7, #4]
10046200:	2284      	movs	r2, #132	@ 0x84
10046202:	2101      	movs	r1, #1
10046204:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
10046206:	687b      	ldr	r3, [r7, #4]
10046208:	2288      	movs	r2, #136	@ 0x88
1004620a:	2124      	movs	r1, #36	@ 0x24
1004620c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004620e:	687b      	ldr	r3, [r7, #4]
10046210:	681b      	ldr	r3, [r3, #0]
10046212:	681b      	ldr	r3, [r3, #0]
10046214:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10046216:	687b      	ldr	r3, [r7, #4]
10046218:	681b      	ldr	r3, [r3, #0]
1004621a:	681a      	ldr	r2, [r3, #0]
1004621c:	687b      	ldr	r3, [r7, #4]
1004621e:	681b      	ldr	r3, [r3, #0]
10046220:	2101      	movs	r1, #1
10046222:	438a      	bics	r2, r1
10046224:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
10046226:	687b      	ldr	r3, [r7, #4]
10046228:	681b      	ldr	r3, [r3, #0]
1004622a:	689b      	ldr	r3, [r3, #8]
1004622c:	00db      	lsls	r3, r3, #3
1004622e:	08d9      	lsrs	r1, r3, #3
10046230:	687b      	ldr	r3, [r7, #4]
10046232:	681b      	ldr	r3, [r3, #0]
10046234:	683a      	ldr	r2, [r7, #0]
10046236:	430a      	orrs	r2, r1
10046238:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004623a:	687b      	ldr	r3, [r7, #4]
1004623c:	0018      	movs	r0, r3
1004623e:	f000 f853 	bl	100462e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10046242:	687b      	ldr	r3, [r7, #4]
10046244:	681b      	ldr	r3, [r3, #0]
10046246:	68fa      	ldr	r2, [r7, #12]
10046248:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004624a:	687b      	ldr	r3, [r7, #4]
1004624c:	2288      	movs	r2, #136	@ 0x88
1004624e:	2120      	movs	r1, #32
10046250:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10046252:	687b      	ldr	r3, [r7, #4]
10046254:	2284      	movs	r2, #132	@ 0x84
10046256:	2100      	movs	r1, #0
10046258:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004625a:	2300      	movs	r3, #0
}
1004625c:	0018      	movs	r0, r3
1004625e:	46bd      	mov	sp, r7
10046260:	b004      	add	sp, #16
10046262:	bd80      	pop	{r7, pc}

10046264 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10046264:	b580      	push	{r7, lr}
10046266:	b084      	sub	sp, #16
10046268:	af00      	add	r7, sp, #0
1004626a:	6078      	str	r0, [r7, #4]
1004626c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004626e:	687b      	ldr	r3, [r7, #4]
10046270:	2284      	movs	r2, #132	@ 0x84
10046272:	5c9b      	ldrb	r3, [r3, r2]
10046274:	2b01      	cmp	r3, #1
10046276:	d101      	bne.n	1004627c <HAL_UARTEx_SetRxFifoThreshold+0x18>
10046278:	2302      	movs	r3, #2
1004627a:	e02f      	b.n	100462dc <HAL_UARTEx_SetRxFifoThreshold+0x78>
1004627c:	687b      	ldr	r3, [r7, #4]
1004627e:	2284      	movs	r2, #132	@ 0x84
10046280:	2101      	movs	r1, #1
10046282:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
10046284:	687b      	ldr	r3, [r7, #4]
10046286:	2288      	movs	r2, #136	@ 0x88
10046288:	2124      	movs	r1, #36	@ 0x24
1004628a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004628c:	687b      	ldr	r3, [r7, #4]
1004628e:	681b      	ldr	r3, [r3, #0]
10046290:	681b      	ldr	r3, [r3, #0]
10046292:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10046294:	687b      	ldr	r3, [r7, #4]
10046296:	681b      	ldr	r3, [r3, #0]
10046298:	681a      	ldr	r2, [r3, #0]
1004629a:	687b      	ldr	r3, [r7, #4]
1004629c:	681b      	ldr	r3, [r3, #0]
1004629e:	2101      	movs	r1, #1
100462a0:	438a      	bics	r2, r1
100462a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
100462a4:	687b      	ldr	r3, [r7, #4]
100462a6:	681b      	ldr	r3, [r3, #0]
100462a8:	689b      	ldr	r3, [r3, #8]
100462aa:	4a0e      	ldr	r2, [pc, #56]	@ (100462e4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
100462ac:	4013      	ands	r3, r2
100462ae:	0019      	movs	r1, r3
100462b0:	687b      	ldr	r3, [r7, #4]
100462b2:	681b      	ldr	r3, [r3, #0]
100462b4:	683a      	ldr	r2, [r7, #0]
100462b6:	430a      	orrs	r2, r1
100462b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
100462ba:	687b      	ldr	r3, [r7, #4]
100462bc:	0018      	movs	r0, r3
100462be:	f000 f813 	bl	100462e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
100462c2:	687b      	ldr	r3, [r7, #4]
100462c4:	681b      	ldr	r3, [r3, #0]
100462c6:	68fa      	ldr	r2, [r7, #12]
100462c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
100462ca:	687b      	ldr	r3, [r7, #4]
100462cc:	2288      	movs	r2, #136	@ 0x88
100462ce:	2120      	movs	r1, #32
100462d0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
100462d2:	687b      	ldr	r3, [r7, #4]
100462d4:	2284      	movs	r2, #132	@ 0x84
100462d6:	2100      	movs	r1, #0
100462d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100462da:	2300      	movs	r3, #0
}
100462dc:	0018      	movs	r0, r3
100462de:	46bd      	mov	sp, r7
100462e0:	b004      	add	sp, #16
100462e2:	bd80      	pop	{r7, pc}
100462e4:	f1ffffff 	.word	0xf1ffffff

100462e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
100462e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100462ea:	b085      	sub	sp, #20
100462ec:	af00      	add	r7, sp, #0
100462ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
100462f0:	687b      	ldr	r3, [r7, #4]
100462f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
100462f4:	2b00      	cmp	r3, #0
100462f6:	d108      	bne.n	1004630a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
100462f8:	687b      	ldr	r3, [r7, #4]
100462fa:	226a      	movs	r2, #106	@ 0x6a
100462fc:	2101      	movs	r1, #1
100462fe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
10046300:	687b      	ldr	r3, [r7, #4]
10046302:	2268      	movs	r2, #104	@ 0x68
10046304:	2101      	movs	r1, #1
10046306:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
10046308:	e043      	b.n	10046392 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
1004630a:	260f      	movs	r6, #15
1004630c:	19bb      	adds	r3, r7, r6
1004630e:	2208      	movs	r2, #8
10046310:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
10046312:	200e      	movs	r0, #14
10046314:	183b      	adds	r3, r7, r0
10046316:	2208      	movs	r2, #8
10046318:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1004631a:	687b      	ldr	r3, [r7, #4]
1004631c:	681b      	ldr	r3, [r3, #0]
1004631e:	689b      	ldr	r3, [r3, #8]
10046320:	0e5b      	lsrs	r3, r3, #25
10046322:	b2da      	uxtb	r2, r3
10046324:	240d      	movs	r4, #13
10046326:	193b      	adds	r3, r7, r4
10046328:	2107      	movs	r1, #7
1004632a:	400a      	ands	r2, r1
1004632c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
1004632e:	687b      	ldr	r3, [r7, #4]
10046330:	681b      	ldr	r3, [r3, #0]
10046332:	689b      	ldr	r3, [r3, #8]
10046334:	0f5b      	lsrs	r3, r3, #29
10046336:	b2da      	uxtb	r2, r3
10046338:	250c      	movs	r5, #12
1004633a:	197b      	adds	r3, r7, r5
1004633c:	2107      	movs	r1, #7
1004633e:	400a      	ands	r2, r1
10046340:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
10046342:	183b      	adds	r3, r7, r0
10046344:	781b      	ldrb	r3, [r3, #0]
10046346:	197a      	adds	r2, r7, r5
10046348:	7812      	ldrb	r2, [r2, #0]
1004634a:	4914      	ldr	r1, [pc, #80]	@ (1004639c <UARTEx_SetNbDataToProcess+0xb4>)
1004634c:	5c8a      	ldrb	r2, [r1, r2]
1004634e:	435a      	muls	r2, r3
10046350:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
10046352:	197b      	adds	r3, r7, r5
10046354:	781b      	ldrb	r3, [r3, #0]
10046356:	4a12      	ldr	r2, [pc, #72]	@ (100463a0 <UARTEx_SetNbDataToProcess+0xb8>)
10046358:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004635a:	0019      	movs	r1, r3
1004635c:	f7f9 ff6e 	bl	1004023c <__divsi3>
10046360:	0003      	movs	r3, r0
10046362:	b299      	uxth	r1, r3
10046364:	687b      	ldr	r3, [r7, #4]
10046366:	226a      	movs	r2, #106	@ 0x6a
10046368:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004636a:	19bb      	adds	r3, r7, r6
1004636c:	781b      	ldrb	r3, [r3, #0]
1004636e:	193a      	adds	r2, r7, r4
10046370:	7812      	ldrb	r2, [r2, #0]
10046372:	490a      	ldr	r1, [pc, #40]	@ (1004639c <UARTEx_SetNbDataToProcess+0xb4>)
10046374:	5c8a      	ldrb	r2, [r1, r2]
10046376:	435a      	muls	r2, r3
10046378:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
1004637a:	193b      	adds	r3, r7, r4
1004637c:	781b      	ldrb	r3, [r3, #0]
1004637e:	4a08      	ldr	r2, [pc, #32]	@ (100463a0 <UARTEx_SetNbDataToProcess+0xb8>)
10046380:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
10046382:	0019      	movs	r1, r3
10046384:	f7f9 ff5a 	bl	1004023c <__divsi3>
10046388:	0003      	movs	r3, r0
1004638a:	b299      	uxth	r1, r3
1004638c:	687b      	ldr	r3, [r7, #4]
1004638e:	2268      	movs	r2, #104	@ 0x68
10046390:	5299      	strh	r1, [r3, r2]
}
10046392:	46c0      	nop			@ (mov r8, r8)
10046394:	46bd      	mov	sp, r7
10046396:	b005      	add	sp, #20
10046398:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004639a:	46c0      	nop			@ (mov r8, r8)
1004639c:	10047388 	.word	0x10047388
100463a0:	10047390 	.word	0x10047390

100463a4 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
100463a4:	b580      	push	{r7, lr}
100463a6:	b088      	sub	sp, #32
100463a8:	af00      	add	r7, sp, #0
100463aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
100463ac:	687b      	ldr	r3, [r7, #4]
100463ae:	681b      	ldr	r3, [r3, #0]
100463b0:	69db      	ldr	r3, [r3, #28]
100463b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
100463b4:	687b      	ldr	r3, [r7, #4]
100463b6:	681b      	ldr	r3, [r3, #0]
100463b8:	681b      	ldr	r3, [r3, #0]
100463ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
100463bc:	687b      	ldr	r3, [r7, #4]
100463be:	681b      	ldr	r3, [r3, #0]
100463c0:	689b      	ldr	r3, [r3, #8]
100463c2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
100463c4:	69fb      	ldr	r3, [r7, #28]
100463c6:	4ab3      	ldr	r2, [pc, #716]	@ (10046694 <HAL_USART_IRQHandler+0x2f0>)
100463c8:	4013      	ands	r3, r2
100463ca:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
100463cc:	693b      	ldr	r3, [r7, #16]
100463ce:	2b00      	cmp	r3, #0
100463d0:	d117      	bne.n	10046402 <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
100463d2:	69fb      	ldr	r3, [r7, #28]
100463d4:	2220      	movs	r2, #32
100463d6:	4013      	ands	r3, r2
100463d8:	d013      	beq.n	10046402 <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
100463da:	69bb      	ldr	r3, [r7, #24]
100463dc:	2220      	movs	r2, #32
100463de:	4013      	ands	r3, r2
100463e0:	d104      	bne.n	100463ec <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
100463e2:	697a      	ldr	r2, [r7, #20]
100463e4:	2380      	movs	r3, #128	@ 0x80
100463e6:	055b      	lsls	r3, r3, #21
100463e8:	4013      	ands	r3, r2
100463ea:	d00a      	beq.n	10046402 <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
100463ec:	687b      	ldr	r3, [r7, #4]
100463ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100463f0:	2b00      	cmp	r3, #0
100463f2:	d100      	bne.n	100463f6 <HAL_USART_IRQHandler+0x52>
100463f4:	e14a      	b.n	1004668c <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
100463f6:	687b      	ldr	r3, [r7, #4]
100463f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100463fa:	687a      	ldr	r2, [r7, #4]
100463fc:	0010      	movs	r0, r2
100463fe:	4798      	blx	r3
      }
      return;
10046400:	e144      	b.n	1004668c <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
10046402:	693b      	ldr	r3, [r7, #16]
10046404:	2b00      	cmp	r3, #0
10046406:	d100      	bne.n	1004640a <HAL_USART_IRQHandler+0x66>
10046408:	e100      	b.n	1004660c <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
1004640a:	697b      	ldr	r3, [r7, #20]
1004640c:	4aa2      	ldr	r2, [pc, #648]	@ (10046698 <HAL_USART_IRQHandler+0x2f4>)
1004640e:	4013      	ands	r3, r2
10046410:	d105      	bne.n	1004641e <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
10046412:	69ba      	ldr	r2, [r7, #24]
10046414:	2390      	movs	r3, #144	@ 0x90
10046416:	005b      	lsls	r3, r3, #1
10046418:	4013      	ands	r3, r2
1004641a:	d100      	bne.n	1004641e <HAL_USART_IRQHandler+0x7a>
1004641c:	e0f6      	b.n	1004660c <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
1004641e:	69fb      	ldr	r3, [r7, #28]
10046420:	2201      	movs	r2, #1
10046422:	4013      	ands	r3, r2
10046424:	d00e      	beq.n	10046444 <HAL_USART_IRQHandler+0xa0>
10046426:	69ba      	ldr	r2, [r7, #24]
10046428:	2380      	movs	r3, #128	@ 0x80
1004642a:	005b      	lsls	r3, r3, #1
1004642c:	4013      	ands	r3, r2
1004642e:	d009      	beq.n	10046444 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
10046430:	687b      	ldr	r3, [r7, #4]
10046432:	681b      	ldr	r3, [r3, #0]
10046434:	2201      	movs	r2, #1
10046436:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
10046438:	687b      	ldr	r3, [r7, #4]
1004643a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004643c:	2201      	movs	r2, #1
1004643e:	431a      	orrs	r2, r3
10046440:	687b      	ldr	r3, [r7, #4]
10046442:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
10046444:	69fb      	ldr	r3, [r7, #28]
10046446:	2202      	movs	r2, #2
10046448:	4013      	ands	r3, r2
1004644a:	d00d      	beq.n	10046468 <HAL_USART_IRQHandler+0xc4>
1004644c:	697b      	ldr	r3, [r7, #20]
1004644e:	2201      	movs	r2, #1
10046450:	4013      	ands	r3, r2
10046452:	d009      	beq.n	10046468 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
10046454:	687b      	ldr	r3, [r7, #4]
10046456:	681b      	ldr	r3, [r3, #0]
10046458:	2202      	movs	r2, #2
1004645a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
1004645c:	687b      	ldr	r3, [r7, #4]
1004645e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10046460:	2204      	movs	r2, #4
10046462:	431a      	orrs	r2, r3
10046464:	687b      	ldr	r3, [r7, #4]
10046466:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
10046468:	69fb      	ldr	r3, [r7, #28]
1004646a:	2204      	movs	r2, #4
1004646c:	4013      	ands	r3, r2
1004646e:	d00d      	beq.n	1004648c <HAL_USART_IRQHandler+0xe8>
10046470:	697b      	ldr	r3, [r7, #20]
10046472:	2201      	movs	r2, #1
10046474:	4013      	ands	r3, r2
10046476:	d009      	beq.n	1004648c <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
10046478:	687b      	ldr	r3, [r7, #4]
1004647a:	681b      	ldr	r3, [r3, #0]
1004647c:	2204      	movs	r2, #4
1004647e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
10046480:	687b      	ldr	r3, [r7, #4]
10046482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10046484:	2202      	movs	r2, #2
10046486:	431a      	orrs	r2, r3
10046488:	687b      	ldr	r3, [r7, #4]
1004648a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
1004648c:	69fb      	ldr	r3, [r7, #28]
1004648e:	2208      	movs	r2, #8
10046490:	4013      	ands	r3, r2
10046492:	d011      	beq.n	100464b8 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
10046494:	69bb      	ldr	r3, [r7, #24]
10046496:	2220      	movs	r2, #32
10046498:	4013      	ands	r3, r2
1004649a:	d103      	bne.n	100464a4 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
1004649c:	697b      	ldr	r3, [r7, #20]
1004649e:	4a7e      	ldr	r2, [pc, #504]	@ (10046698 <HAL_USART_IRQHandler+0x2f4>)
100464a0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
100464a2:	d009      	beq.n	100464b8 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
100464a4:	687b      	ldr	r3, [r7, #4]
100464a6:	681b      	ldr	r3, [r3, #0]
100464a8:	2208      	movs	r2, #8
100464aa:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
100464ac:	687b      	ldr	r3, [r7, #4]
100464ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
100464b0:	2208      	movs	r2, #8
100464b2:	431a      	orrs	r2, r3
100464b4:	687b      	ldr	r3, [r7, #4]
100464b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
100464b8:	69fa      	ldr	r2, [r7, #28]
100464ba:	2380      	movs	r3, #128	@ 0x80
100464bc:	011b      	lsls	r3, r3, #4
100464be:	4013      	ands	r3, r2
100464c0:	d00f      	beq.n	100464e2 <HAL_USART_IRQHandler+0x13e>
100464c2:	69ba      	ldr	r2, [r7, #24]
100464c4:	2380      	movs	r3, #128	@ 0x80
100464c6:	04db      	lsls	r3, r3, #19
100464c8:	4013      	ands	r3, r2
100464ca:	d00a      	beq.n	100464e2 <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
100464cc:	687b      	ldr	r3, [r7, #4]
100464ce:	681b      	ldr	r3, [r3, #0]
100464d0:	2280      	movs	r2, #128	@ 0x80
100464d2:	0112      	lsls	r2, r2, #4
100464d4:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
100464d6:	687b      	ldr	r3, [r7, #4]
100464d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
100464da:	2280      	movs	r2, #128	@ 0x80
100464dc:	431a      	orrs	r2, r3
100464de:	687b      	ldr	r3, [r7, #4]
100464e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
100464e2:	69fa      	ldr	r2, [r7, #28]
100464e4:	2380      	movs	r3, #128	@ 0x80
100464e6:	019b      	lsls	r3, r3, #6
100464e8:	4013      	ands	r3, r2
100464ea:	d01a      	beq.n	10046522 <HAL_USART_IRQHandler+0x17e>
100464ec:	697b      	ldr	r3, [r7, #20]
100464ee:	2201      	movs	r2, #1
100464f0:	4013      	ands	r3, r2
100464f2:	d016      	beq.n	10046522 <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
100464f4:	687b      	ldr	r3, [r7, #4]
100464f6:	2259      	movs	r2, #89	@ 0x59
100464f8:	5c9b      	ldrb	r3, [r3, r2]
100464fa:	b2db      	uxtb	r3, r3
100464fc:	2b22      	cmp	r3, #34	@ 0x22
100464fe:	d105      	bne.n	1004650c <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
10046500:	687b      	ldr	r3, [r7, #4]
10046502:	681b      	ldr	r3, [r3, #0]
10046504:	2280      	movs	r2, #128	@ 0x80
10046506:	0192      	lsls	r2, r2, #6
10046508:	621a      	str	r2, [r3, #32]
        return;
1004650a:	e0ca      	b.n	100466a2 <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
1004650c:	687b      	ldr	r3, [r7, #4]
1004650e:	681b      	ldr	r3, [r3, #0]
10046510:	2280      	movs	r2, #128	@ 0x80
10046512:	0192      	lsls	r2, r2, #6
10046514:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
10046516:	687b      	ldr	r3, [r7, #4]
10046518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004651a:	2220      	movs	r2, #32
1004651c:	431a      	orrs	r2, r3
1004651e:	687b      	ldr	r3, [r7, #4]
10046520:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
10046522:	687b      	ldr	r3, [r7, #4]
10046524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10046526:	2b00      	cmp	r3, #0
10046528:	d100      	bne.n	1004652c <HAL_USART_IRQHandler+0x188>
1004652a:	e0b1      	b.n	10046690 <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
1004652c:	69fb      	ldr	r3, [r7, #28]
1004652e:	2220      	movs	r2, #32
10046530:	4013      	ands	r3, r2
10046532:	d011      	beq.n	10046558 <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
10046534:	69bb      	ldr	r3, [r7, #24]
10046536:	2220      	movs	r2, #32
10046538:	4013      	ands	r3, r2
1004653a:	d104      	bne.n	10046546 <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
1004653c:	697a      	ldr	r2, [r7, #20]
1004653e:	2380      	movs	r3, #128	@ 0x80
10046540:	055b      	lsls	r3, r3, #21
10046542:	4013      	ands	r3, r2
10046544:	d008      	beq.n	10046558 <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
10046546:	687b      	ldr	r3, [r7, #4]
10046548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004654a:	2b00      	cmp	r3, #0
1004654c:	d004      	beq.n	10046558 <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
1004654e:	687b      	ldr	r3, [r7, #4]
10046550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10046552:	687a      	ldr	r2, [r7, #4]
10046554:	0010      	movs	r0, r2
10046556:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
10046558:	687b      	ldr	r3, [r7, #4]
1004655a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004655c:	2208      	movs	r2, #8
1004655e:	4013      	ands	r3, r2
10046560:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
10046562:	687b      	ldr	r3, [r7, #4]
10046564:	681b      	ldr	r3, [r3, #0]
10046566:	689b      	ldr	r3, [r3, #8]
10046568:	2240      	movs	r2, #64	@ 0x40
1004656a:	4013      	ands	r3, r2
1004656c:	2b40      	cmp	r3, #64	@ 0x40
1004656e:	d002      	beq.n	10046576 <HAL_USART_IRQHandler+0x1d2>
10046570:	68fb      	ldr	r3, [r7, #12]
10046572:	2b00      	cmp	r3, #0
10046574:	d040      	beq.n	100465f8 <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
10046576:	687b      	ldr	r3, [r7, #4]
10046578:	0018      	movs	r0, r3
1004657a:	f000 f8ad 	bl	100466d8 <USART_EndTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004657e:	687b      	ldr	r3, [r7, #4]
10046580:	681b      	ldr	r3, [r3, #0]
10046582:	689b      	ldr	r3, [r3, #8]
10046584:	2240      	movs	r2, #64	@ 0x40
10046586:	4013      	ands	r3, r2
10046588:	2b40      	cmp	r3, #64	@ 0x40
1004658a:	d130      	bne.n	100465ee <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
1004658c:	687b      	ldr	r3, [r7, #4]
1004658e:	681b      	ldr	r3, [r3, #0]
10046590:	689a      	ldr	r2, [r3, #8]
10046592:	687b      	ldr	r3, [r7, #4]
10046594:	681b      	ldr	r3, [r3, #0]
10046596:	2140      	movs	r1, #64	@ 0x40
10046598:	438a      	bics	r2, r1
1004659a:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
1004659c:	687b      	ldr	r3, [r7, #4]
1004659e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100465a0:	2b00      	cmp	r3, #0
100465a2:	d008      	beq.n	100465b6 <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
100465a4:	687b      	ldr	r3, [r7, #4]
100465a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100465a8:	2200      	movs	r2, #0
100465aa:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
100465ac:	687b      	ldr	r3, [r7, #4]
100465ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100465b0:	0018      	movs	r0, r3
100465b2:	f7fb ffd4 	bl	1004255e <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
100465b6:	687b      	ldr	r3, [r7, #4]
100465b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
100465ba:	2b00      	cmp	r3, #0
100465bc:	d012      	beq.n	100465e4 <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
100465be:	687b      	ldr	r3, [r7, #4]
100465c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
100465c2:	4a36      	ldr	r2, [pc, #216]	@ (1004669c <HAL_USART_IRQHandler+0x2f8>)
100465c4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
100465c6:	687b      	ldr	r3, [r7, #4]
100465c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
100465ca:	0018      	movs	r0, r3
100465cc:	f7fb ffc7 	bl	1004255e <HAL_DMA_Abort_IT>
100465d0:	1e03      	subs	r3, r0, #0
100465d2:	d019      	beq.n	10046608 <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
100465d4:	687b      	ldr	r3, [r7, #4]
100465d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
100465d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
100465da:	687b      	ldr	r3, [r7, #4]
100465dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
100465de:	0018      	movs	r0, r3
100465e0:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
100465e2:	e011      	b.n	10046608 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
100465e4:	687b      	ldr	r3, [r7, #4]
100465e6:	0018      	movs	r0, r3
100465e8:	f000 f86e 	bl	100466c8 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
100465ec:	e00c      	b.n	10046608 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
100465ee:	687b      	ldr	r3, [r7, #4]
100465f0:	0018      	movs	r0, r3
100465f2:	f000 f869 	bl	100466c8 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
100465f6:	e007      	b.n	10046608 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
100465f8:	687b      	ldr	r3, [r7, #4]
100465fa:	0018      	movs	r0, r3
100465fc:	f000 f864 	bl	100466c8 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
10046600:	687b      	ldr	r3, [r7, #4]
10046602:	2200      	movs	r2, #0
10046604:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }
    return;
10046606:	e043      	b.n	10046690 <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
10046608:	46c0      	nop			@ (mov r8, r8)
    return;
1004660a:	e041      	b.n	10046690 <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
1004660c:	69fb      	ldr	r3, [r7, #28]
1004660e:	2280      	movs	r2, #128	@ 0x80
10046610:	4013      	ands	r3, r2
10046612:	d012      	beq.n	1004663a <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
10046614:	69bb      	ldr	r3, [r7, #24]
10046616:	2280      	movs	r2, #128	@ 0x80
10046618:	4013      	ands	r3, r2
1004661a:	d104      	bne.n	10046626 <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
1004661c:	697a      	ldr	r2, [r7, #20]
1004661e:	2380      	movs	r3, #128	@ 0x80
10046620:	041b      	lsls	r3, r3, #16
10046622:	4013      	ands	r3, r2
10046624:	d009      	beq.n	1004663a <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
10046626:	687b      	ldr	r3, [r7, #4]
10046628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004662a:	2b00      	cmp	r3, #0
1004662c:	d038      	beq.n	100466a0 <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
1004662e:	687b      	ldr	r3, [r7, #4]
10046630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10046632:	687a      	ldr	r2, [r7, #4]
10046634:	0010      	movs	r0, r2
10046636:	4798      	blx	r3
    }
    return;
10046638:	e032      	b.n	100466a0 <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
1004663a:	69fb      	ldr	r3, [r7, #28]
1004663c:	2240      	movs	r2, #64	@ 0x40
1004663e:	4013      	ands	r3, r2
10046640:	d008      	beq.n	10046654 <HAL_USART_IRQHandler+0x2b0>
10046642:	69bb      	ldr	r3, [r7, #24]
10046644:	2240      	movs	r2, #64	@ 0x40
10046646:	4013      	ands	r3, r2
10046648:	d004      	beq.n	10046654 <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
1004664a:	687b      	ldr	r3, [r7, #4]
1004664c:	0018      	movs	r0, r3
1004664e:	f000 f878 	bl	10046742 <USART_EndTransmit_IT>
    return;
10046652:	e026      	b.n	100466a2 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
10046654:	69fa      	ldr	r2, [r7, #28]
10046656:	2380      	movs	r3, #128	@ 0x80
10046658:	041b      	lsls	r3, r3, #16
1004665a:	4013      	ands	r3, r2
1004665c:	d009      	beq.n	10046672 <HAL_USART_IRQHandler+0x2ce>
1004665e:	69ba      	ldr	r2, [r7, #24]
10046660:	2380      	movs	r3, #128	@ 0x80
10046662:	05db      	lsls	r3, r3, #23
10046664:	4013      	ands	r3, r2
10046666:	d004      	beq.n	10046672 <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
10046668:	687b      	ldr	r3, [r7, #4]
1004666a:	0018      	movs	r0, r3
1004666c:	f000 f8b4 	bl	100467d8 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
10046670:	e017      	b.n	100466a2 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
10046672:	69fa      	ldr	r2, [r7, #28]
10046674:	2380      	movs	r3, #128	@ 0x80
10046676:	045b      	lsls	r3, r3, #17
10046678:	4013      	ands	r3, r2
1004667a:	d012      	beq.n	100466a2 <HAL_USART_IRQHandler+0x2fe>
1004667c:	69bb      	ldr	r3, [r7, #24]
1004667e:	2b00      	cmp	r3, #0
10046680:	da0f      	bge.n	100466a2 <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
10046682:	687b      	ldr	r3, [r7, #4]
10046684:	0018      	movs	r0, r3
10046686:	f000 f89f 	bl	100467c8 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
1004668a:	e00a      	b.n	100466a2 <HAL_USART_IRQHandler+0x2fe>
      return;
1004668c:	46c0      	nop			@ (mov r8, r8)
1004668e:	e008      	b.n	100466a2 <HAL_USART_IRQHandler+0x2fe>
    return;
10046690:	46c0      	nop			@ (mov r8, r8)
10046692:	e006      	b.n	100466a2 <HAL_USART_IRQHandler+0x2fe>
10046694:	0000280f 	.word	0x0000280f
10046698:	10000001 	.word	0x10000001
1004669c:	10046719 	.word	0x10046719
    return;
100466a0:	46c0      	nop			@ (mov r8, r8)
  }
}
100466a2:	46bd      	mov	sp, r7
100466a4:	b008      	add	sp, #32
100466a6:	bd80      	pop	{r7, pc}

100466a8 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
100466a8:	b580      	push	{r7, lr}
100466aa:	b082      	sub	sp, #8
100466ac:	af00      	add	r7, sp, #0
100466ae:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
100466b0:	46c0      	nop			@ (mov r8, r8)
100466b2:	46bd      	mov	sp, r7
100466b4:	b002      	add	sp, #8
100466b6:	bd80      	pop	{r7, pc}

100466b8 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
100466b8:	b580      	push	{r7, lr}
100466ba:	b082      	sub	sp, #8
100466bc:	af00      	add	r7, sp, #0
100466be:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
100466c0:	46c0      	nop			@ (mov r8, r8)
100466c2:	46bd      	mov	sp, r7
100466c4:	b002      	add	sp, #8
100466c6:	bd80      	pop	{r7, pc}

100466c8 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
100466c8:	b580      	push	{r7, lr}
100466ca:	b082      	sub	sp, #8
100466cc:	af00      	add	r7, sp, #0
100466ce:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
100466d0:	46c0      	nop			@ (mov r8, r8)
100466d2:	46bd      	mov	sp, r7
100466d4:	b002      	add	sp, #8
100466d6:	bd80      	pop	{r7, pc}

100466d8 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
100466d8:	b580      	push	{r7, lr}
100466da:	b082      	sub	sp, #8
100466dc:	af00      	add	r7, sp, #0
100466de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
100466e0:	687b      	ldr	r3, [r7, #4]
100466e2:	681b      	ldr	r3, [r3, #0]
100466e4:	681a      	ldr	r2, [r3, #0]
100466e6:	687b      	ldr	r3, [r7, #4]
100466e8:	681b      	ldr	r3, [r3, #0]
100466ea:	4909      	ldr	r1, [pc, #36]	@ (10046710 <USART_EndTransfer+0x38>)
100466ec:	400a      	ands	r2, r1
100466ee:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
100466f0:	687b      	ldr	r3, [r7, #4]
100466f2:	681b      	ldr	r3, [r3, #0]
100466f4:	689a      	ldr	r2, [r3, #8]
100466f6:	687b      	ldr	r3, [r7, #4]
100466f8:	681b      	ldr	r3, [r3, #0]
100466fa:	4906      	ldr	r1, [pc, #24]	@ (10046714 <USART_EndTransfer+0x3c>)
100466fc:	400a      	ands	r2, r1
100466fe:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
10046700:	687b      	ldr	r3, [r7, #4]
10046702:	2259      	movs	r2, #89	@ 0x59
10046704:	2101      	movs	r1, #1
10046706:	5499      	strb	r1, [r3, r2]
}
10046708:	46c0      	nop			@ (mov r8, r8)
1004670a:	46bd      	mov	sp, r7
1004670c:	b002      	add	sp, #8
1004670e:	bd80      	pop	{r7, pc}
10046710:	fffffe1f 	.word	0xfffffe1f
10046714:	ef7ffffe 	.word	0xef7ffffe

10046718 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
10046718:	b580      	push	{r7, lr}
1004671a:	b084      	sub	sp, #16
1004671c:	af00      	add	r7, sp, #0
1004671e:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
10046720:	687b      	ldr	r3, [r7, #4]
10046722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10046724:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
10046726:	68fb      	ldr	r3, [r7, #12]
10046728:	2200      	movs	r2, #0
1004672a:	86da      	strh	r2, [r3, #54]	@ 0x36
  husart->TxXferCount = 0U;
1004672c:	68fb      	ldr	r3, [r7, #12]
1004672e:	2200      	movs	r2, #0
10046730:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
10046732:	68fb      	ldr	r3, [r7, #12]
10046734:	0018      	movs	r0, r3
10046736:	f7ff ffc7 	bl	100466c8 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
1004673a:	46c0      	nop			@ (mov r8, r8)
1004673c:	46bd      	mov	sp, r7
1004673e:	b004      	add	sp, #16
10046740:	bd80      	pop	{r7, pc}

10046742 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
10046742:	b580      	push	{r7, lr}
10046744:	b082      	sub	sp, #8
10046746:	af00      	add	r7, sp, #0
10046748:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
1004674a:	687b      	ldr	r3, [r7, #4]
1004674c:	681b      	ldr	r3, [r3, #0]
1004674e:	681a      	ldr	r2, [r3, #0]
10046750:	687b      	ldr	r3, [r7, #4]
10046752:	681b      	ldr	r3, [r3, #0]
10046754:	2140      	movs	r1, #64	@ 0x40
10046756:	438a      	bics	r2, r1
10046758:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
1004675a:	687b      	ldr	r3, [r7, #4]
1004675c:	681b      	ldr	r3, [r3, #0]
1004675e:	689a      	ldr	r2, [r3, #8]
10046760:	687b      	ldr	r3, [r7, #4]
10046762:	681b      	ldr	r3, [r3, #0]
10046764:	2101      	movs	r1, #1
10046766:	438a      	bics	r2, r1
10046768:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
1004676a:	687b      	ldr	r3, [r7, #4]
1004676c:	2200      	movs	r2, #0
1004676e:	64da      	str	r2, [r3, #76]	@ 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
10046770:	687b      	ldr	r3, [r7, #4]
10046772:	2259      	movs	r2, #89	@ 0x59
10046774:	5c9b      	ldrb	r3, [r3, r2]
10046776:	b2db      	uxtb	r3, r3
10046778:	2b12      	cmp	r3, #18
1004677a:	d114      	bne.n	100467a6 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
1004677c:	687b      	ldr	r3, [r7, #4]
1004677e:	681b      	ldr	r3, [r3, #0]
10046780:	2208      	movs	r2, #8
10046782:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
10046784:	687b      	ldr	r3, [r7, #4]
10046786:	681b      	ldr	r3, [r3, #0]
10046788:	699a      	ldr	r2, [r3, #24]
1004678a:	687b      	ldr	r3, [r7, #4]
1004678c:	681b      	ldr	r3, [r3, #0]
1004678e:	2108      	movs	r1, #8
10046790:	430a      	orrs	r2, r1
10046792:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
10046794:	687b      	ldr	r3, [r7, #4]
10046796:	2259      	movs	r2, #89	@ 0x59
10046798:	2101      	movs	r1, #1
1004679a:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
1004679c:	687b      	ldr	r3, [r7, #4]
1004679e:	0018      	movs	r0, r3
100467a0:	f7ff ff82 	bl	100466a8 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
100467a4:	e00c      	b.n	100467c0 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
100467a6:	687b      	ldr	r3, [r7, #4]
100467a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
100467aa:	b29b      	uxth	r3, r3
100467ac:	2b00      	cmp	r3, #0
100467ae:	d107      	bne.n	100467c0 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
100467b0:	687b      	ldr	r3, [r7, #4]
100467b2:	2259      	movs	r2, #89	@ 0x59
100467b4:	2101      	movs	r1, #1
100467b6:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
100467b8:	687b      	ldr	r3, [r7, #4]
100467ba:	0018      	movs	r0, r3
100467bc:	f7ff ff7c 	bl	100466b8 <HAL_USART_TxRxCpltCallback>
}
100467c0:	46c0      	nop			@ (mov r8, r8)
100467c2:	46bd      	mov	sp, r7
100467c4:	b002      	add	sp, #8
100467c6:	bd80      	pop	{r7, pc}

100467c8 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
100467c8:	b580      	push	{r7, lr}
100467ca:	b082      	sub	sp, #8
100467cc:	af00      	add	r7, sp, #0
100467ce:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
100467d0:	46c0      	nop			@ (mov r8, r8)
100467d2:	46bd      	mov	sp, r7
100467d4:	b002      	add	sp, #8
100467d6:	bd80      	pop	{r7, pc}

100467d8 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
100467d8:	b580      	push	{r7, lr}
100467da:	b082      	sub	sp, #8
100467dc:	af00      	add	r7, sp, #0
100467de:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
100467e0:	46c0      	nop			@ (mov r8, r8)
100467e2:	46bd      	mov	sp, r7
100467e4:	b002      	add	sp, #8
100467e6:	bd80      	pop	{r7, pc}

100467e8 <malloc>:
100467e8:	b510      	push	{r4, lr}
100467ea:	4b03      	ldr	r3, [pc, #12]	@ (100467f8 <malloc+0x10>)
100467ec:	0001      	movs	r1, r0
100467ee:	6818      	ldr	r0, [r3, #0]
100467f0:	f000 f830 	bl	10046854 <_malloc_r>
100467f4:	bd10      	pop	{r4, pc}
100467f6:	46c0      	nop			@ (mov r8, r8)
100467f8:	20000a3c 	.word	0x20000a3c

100467fc <free>:
100467fc:	b510      	push	{r4, lr}
100467fe:	4b03      	ldr	r3, [pc, #12]	@ (1004680c <free+0x10>)
10046800:	0001      	movs	r1, r0
10046802:	6818      	ldr	r0, [r3, #0]
10046804:	f000 f8f8 	bl	100469f8 <_free_r>
10046808:	bd10      	pop	{r4, pc}
1004680a:	46c0      	nop			@ (mov r8, r8)
1004680c:	20000a3c 	.word	0x20000a3c

10046810 <sbrk_aligned>:
10046810:	b570      	push	{r4, r5, r6, lr}
10046812:	4e0f      	ldr	r6, [pc, #60]	@ (10046850 <sbrk_aligned+0x40>)
10046814:	000d      	movs	r5, r1
10046816:	6831      	ldr	r1, [r6, #0]
10046818:	0004      	movs	r4, r0
1004681a:	2900      	cmp	r1, #0
1004681c:	d102      	bne.n	10046824 <sbrk_aligned+0x14>
1004681e:	f000 f8d1 	bl	100469c4 <_sbrk_r>
10046822:	6030      	str	r0, [r6, #0]
10046824:	0029      	movs	r1, r5
10046826:	0020      	movs	r0, r4
10046828:	f000 f8cc 	bl	100469c4 <_sbrk_r>
1004682c:	1c43      	adds	r3, r0, #1
1004682e:	d103      	bne.n	10046838 <sbrk_aligned+0x28>
10046830:	2501      	movs	r5, #1
10046832:	426d      	negs	r5, r5
10046834:	0028      	movs	r0, r5
10046836:	bd70      	pop	{r4, r5, r6, pc}
10046838:	2303      	movs	r3, #3
1004683a:	1cc5      	adds	r5, r0, #3
1004683c:	439d      	bics	r5, r3
1004683e:	42a8      	cmp	r0, r5
10046840:	d0f8      	beq.n	10046834 <sbrk_aligned+0x24>
10046842:	1a29      	subs	r1, r5, r0
10046844:	0020      	movs	r0, r4
10046846:	f000 f8bd 	bl	100469c4 <_sbrk_r>
1004684a:	3001      	adds	r0, #1
1004684c:	d1f2      	bne.n	10046834 <sbrk_aligned+0x24>
1004684e:	e7ef      	b.n	10046830 <sbrk_aligned+0x20>
10046850:	200008a0 	.word	0x200008a0

10046854 <_malloc_r>:
10046854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10046856:	2203      	movs	r2, #3
10046858:	1ccb      	adds	r3, r1, #3
1004685a:	4393      	bics	r3, r2
1004685c:	3308      	adds	r3, #8
1004685e:	0005      	movs	r5, r0
10046860:	001f      	movs	r7, r3
10046862:	2b0c      	cmp	r3, #12
10046864:	d234      	bcs.n	100468d0 <_malloc_r+0x7c>
10046866:	270c      	movs	r7, #12
10046868:	42b9      	cmp	r1, r7
1004686a:	d833      	bhi.n	100468d4 <_malloc_r+0x80>
1004686c:	0028      	movs	r0, r5
1004686e:	f000 f871 	bl	10046954 <__malloc_lock>
10046872:	4e37      	ldr	r6, [pc, #220]	@ (10046950 <_malloc_r+0xfc>)
10046874:	6833      	ldr	r3, [r6, #0]
10046876:	001c      	movs	r4, r3
10046878:	2c00      	cmp	r4, #0
1004687a:	d12f      	bne.n	100468dc <_malloc_r+0x88>
1004687c:	0039      	movs	r1, r7
1004687e:	0028      	movs	r0, r5
10046880:	f7ff ffc6 	bl	10046810 <sbrk_aligned>
10046884:	0004      	movs	r4, r0
10046886:	1c43      	adds	r3, r0, #1
10046888:	d15f      	bne.n	1004694a <_malloc_r+0xf6>
1004688a:	6834      	ldr	r4, [r6, #0]
1004688c:	9400      	str	r4, [sp, #0]
1004688e:	9b00      	ldr	r3, [sp, #0]
10046890:	2b00      	cmp	r3, #0
10046892:	d14a      	bne.n	1004692a <_malloc_r+0xd6>
10046894:	2c00      	cmp	r4, #0
10046896:	d052      	beq.n	1004693e <_malloc_r+0xea>
10046898:	6823      	ldr	r3, [r4, #0]
1004689a:	0028      	movs	r0, r5
1004689c:	18e3      	adds	r3, r4, r3
1004689e:	9900      	ldr	r1, [sp, #0]
100468a0:	9301      	str	r3, [sp, #4]
100468a2:	f000 f88f 	bl	100469c4 <_sbrk_r>
100468a6:	9b01      	ldr	r3, [sp, #4]
100468a8:	4283      	cmp	r3, r0
100468aa:	d148      	bne.n	1004693e <_malloc_r+0xea>
100468ac:	6823      	ldr	r3, [r4, #0]
100468ae:	0028      	movs	r0, r5
100468b0:	1aff      	subs	r7, r7, r3
100468b2:	0039      	movs	r1, r7
100468b4:	f7ff ffac 	bl	10046810 <sbrk_aligned>
100468b8:	3001      	adds	r0, #1
100468ba:	d040      	beq.n	1004693e <_malloc_r+0xea>
100468bc:	6823      	ldr	r3, [r4, #0]
100468be:	19db      	adds	r3, r3, r7
100468c0:	6023      	str	r3, [r4, #0]
100468c2:	6833      	ldr	r3, [r6, #0]
100468c4:	685a      	ldr	r2, [r3, #4]
100468c6:	2a00      	cmp	r2, #0
100468c8:	d133      	bne.n	10046932 <_malloc_r+0xde>
100468ca:	9b00      	ldr	r3, [sp, #0]
100468cc:	6033      	str	r3, [r6, #0]
100468ce:	e019      	b.n	10046904 <_malloc_r+0xb0>
100468d0:	2b00      	cmp	r3, #0
100468d2:	dac9      	bge.n	10046868 <_malloc_r+0x14>
100468d4:	230c      	movs	r3, #12
100468d6:	602b      	str	r3, [r5, #0]
100468d8:	2000      	movs	r0, #0
100468da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100468dc:	6821      	ldr	r1, [r4, #0]
100468de:	1bc9      	subs	r1, r1, r7
100468e0:	d420      	bmi.n	10046924 <_malloc_r+0xd0>
100468e2:	290b      	cmp	r1, #11
100468e4:	d90a      	bls.n	100468fc <_malloc_r+0xa8>
100468e6:	19e2      	adds	r2, r4, r7
100468e8:	6027      	str	r7, [r4, #0]
100468ea:	42a3      	cmp	r3, r4
100468ec:	d104      	bne.n	100468f8 <_malloc_r+0xa4>
100468ee:	6032      	str	r2, [r6, #0]
100468f0:	6863      	ldr	r3, [r4, #4]
100468f2:	6011      	str	r1, [r2, #0]
100468f4:	6053      	str	r3, [r2, #4]
100468f6:	e005      	b.n	10046904 <_malloc_r+0xb0>
100468f8:	605a      	str	r2, [r3, #4]
100468fa:	e7f9      	b.n	100468f0 <_malloc_r+0x9c>
100468fc:	6862      	ldr	r2, [r4, #4]
100468fe:	42a3      	cmp	r3, r4
10046900:	d10e      	bne.n	10046920 <_malloc_r+0xcc>
10046902:	6032      	str	r2, [r6, #0]
10046904:	0028      	movs	r0, r5
10046906:	f000 f82d 	bl	10046964 <__malloc_unlock>
1004690a:	0020      	movs	r0, r4
1004690c:	2207      	movs	r2, #7
1004690e:	300b      	adds	r0, #11
10046910:	1d23      	adds	r3, r4, #4
10046912:	4390      	bics	r0, r2
10046914:	1ac2      	subs	r2, r0, r3
10046916:	4298      	cmp	r0, r3
10046918:	d0df      	beq.n	100468da <_malloc_r+0x86>
1004691a:	1a1b      	subs	r3, r3, r0
1004691c:	50a3      	str	r3, [r4, r2]
1004691e:	e7dc      	b.n	100468da <_malloc_r+0x86>
10046920:	605a      	str	r2, [r3, #4]
10046922:	e7ef      	b.n	10046904 <_malloc_r+0xb0>
10046924:	0023      	movs	r3, r4
10046926:	6864      	ldr	r4, [r4, #4]
10046928:	e7a6      	b.n	10046878 <_malloc_r+0x24>
1004692a:	9c00      	ldr	r4, [sp, #0]
1004692c:	6863      	ldr	r3, [r4, #4]
1004692e:	9300      	str	r3, [sp, #0]
10046930:	e7ad      	b.n	1004688e <_malloc_r+0x3a>
10046932:	001a      	movs	r2, r3
10046934:	685b      	ldr	r3, [r3, #4]
10046936:	42a3      	cmp	r3, r4
10046938:	d1fb      	bne.n	10046932 <_malloc_r+0xde>
1004693a:	2300      	movs	r3, #0
1004693c:	e7da      	b.n	100468f4 <_malloc_r+0xa0>
1004693e:	230c      	movs	r3, #12
10046940:	0028      	movs	r0, r5
10046942:	602b      	str	r3, [r5, #0]
10046944:	f000 f80e 	bl	10046964 <__malloc_unlock>
10046948:	e7c6      	b.n	100468d8 <_malloc_r+0x84>
1004694a:	6007      	str	r7, [r0, #0]
1004694c:	e7da      	b.n	10046904 <_malloc_r+0xb0>
1004694e:	46c0      	nop			@ (mov r8, r8)
10046950:	200008a4 	.word	0x200008a4

10046954 <__malloc_lock>:
10046954:	b510      	push	{r4, lr}
10046956:	4802      	ldr	r0, [pc, #8]	@ (10046960 <__malloc_lock+0xc>)
10046958:	f000 f84c 	bl	100469f4 <__retarget_lock_acquire_recursive>
1004695c:	bd10      	pop	{r4, pc}
1004695e:	46c0      	nop			@ (mov r8, r8)
10046960:	200009e4 	.word	0x200009e4

10046964 <__malloc_unlock>:
10046964:	b510      	push	{r4, lr}
10046966:	4802      	ldr	r0, [pc, #8]	@ (10046970 <__malloc_unlock+0xc>)
10046968:	f000 f845 	bl	100469f6 <__retarget_lock_release_recursive>
1004696c:	bd10      	pop	{r4, pc}
1004696e:	46c0      	nop			@ (mov r8, r8)
10046970:	200009e4 	.word	0x200009e4

10046974 <siprintf>:
10046974:	b40e      	push	{r1, r2, r3}
10046976:	b500      	push	{lr}
10046978:	490b      	ldr	r1, [pc, #44]	@ (100469a8 <siprintf+0x34>)
1004697a:	b09c      	sub	sp, #112	@ 0x70
1004697c:	ab1d      	add	r3, sp, #116	@ 0x74
1004697e:	9002      	str	r0, [sp, #8]
10046980:	9006      	str	r0, [sp, #24]
10046982:	9107      	str	r1, [sp, #28]
10046984:	9104      	str	r1, [sp, #16]
10046986:	4809      	ldr	r0, [pc, #36]	@ (100469ac <siprintf+0x38>)
10046988:	4909      	ldr	r1, [pc, #36]	@ (100469b0 <siprintf+0x3c>)
1004698a:	cb04      	ldmia	r3!, {r2}
1004698c:	9105      	str	r1, [sp, #20]
1004698e:	6800      	ldr	r0, [r0, #0]
10046990:	a902      	add	r1, sp, #8
10046992:	9301      	str	r3, [sp, #4]
10046994:	f000 f8da 	bl	10046b4c <_svfiprintf_r>
10046998:	2200      	movs	r2, #0
1004699a:	9b02      	ldr	r3, [sp, #8]
1004699c:	701a      	strb	r2, [r3, #0]
1004699e:	b01c      	add	sp, #112	@ 0x70
100469a0:	bc08      	pop	{r3}
100469a2:	b003      	add	sp, #12
100469a4:	4718      	bx	r3
100469a6:	46c0      	nop			@ (mov r8, r8)
100469a8:	7fffffff 	.word	0x7fffffff
100469ac:	20000a3c 	.word	0x20000a3c
100469b0:	ffff0208 	.word	0xffff0208

100469b4 <memset>:
100469b4:	0003      	movs	r3, r0
100469b6:	1882      	adds	r2, r0, r2
100469b8:	4293      	cmp	r3, r2
100469ba:	d100      	bne.n	100469be <memset+0xa>
100469bc:	4770      	bx	lr
100469be:	7019      	strb	r1, [r3, #0]
100469c0:	3301      	adds	r3, #1
100469c2:	e7f9      	b.n	100469b8 <memset+0x4>

100469c4 <_sbrk_r>:
100469c4:	2300      	movs	r3, #0
100469c6:	b570      	push	{r4, r5, r6, lr}
100469c8:	4d06      	ldr	r5, [pc, #24]	@ (100469e4 <_sbrk_r+0x20>)
100469ca:	0004      	movs	r4, r0
100469cc:	0008      	movs	r0, r1
100469ce:	602b      	str	r3, [r5, #0]
100469d0:	f7fa ffd8 	bl	10041984 <_sbrk>
100469d4:	1c43      	adds	r3, r0, #1
100469d6:	d103      	bne.n	100469e0 <_sbrk_r+0x1c>
100469d8:	682b      	ldr	r3, [r5, #0]
100469da:	2b00      	cmp	r3, #0
100469dc:	d000      	beq.n	100469e0 <_sbrk_r+0x1c>
100469de:	6023      	str	r3, [r4, #0]
100469e0:	bd70      	pop	{r4, r5, r6, pc}
100469e2:	46c0      	nop			@ (mov r8, r8)
100469e4:	200009e0 	.word	0x200009e0

100469e8 <__errno>:
100469e8:	4b01      	ldr	r3, [pc, #4]	@ (100469f0 <__errno+0x8>)
100469ea:	6818      	ldr	r0, [r3, #0]
100469ec:	4770      	bx	lr
100469ee:	46c0      	nop			@ (mov r8, r8)
100469f0:	20000a3c 	.word	0x20000a3c

100469f4 <__retarget_lock_acquire_recursive>:
100469f4:	4770      	bx	lr

100469f6 <__retarget_lock_release_recursive>:
100469f6:	4770      	bx	lr

100469f8 <_free_r>:
100469f8:	b570      	push	{r4, r5, r6, lr}
100469fa:	0005      	movs	r5, r0
100469fc:	1e0c      	subs	r4, r1, #0
100469fe:	d010      	beq.n	10046a22 <_free_r+0x2a>
10046a00:	3c04      	subs	r4, #4
10046a02:	6823      	ldr	r3, [r4, #0]
10046a04:	2b00      	cmp	r3, #0
10046a06:	da00      	bge.n	10046a0a <_free_r+0x12>
10046a08:	18e4      	adds	r4, r4, r3
10046a0a:	0028      	movs	r0, r5
10046a0c:	f7ff ffa2 	bl	10046954 <__malloc_lock>
10046a10:	4a1d      	ldr	r2, [pc, #116]	@ (10046a88 <_free_r+0x90>)
10046a12:	6813      	ldr	r3, [r2, #0]
10046a14:	2b00      	cmp	r3, #0
10046a16:	d105      	bne.n	10046a24 <_free_r+0x2c>
10046a18:	6063      	str	r3, [r4, #4]
10046a1a:	6014      	str	r4, [r2, #0]
10046a1c:	0028      	movs	r0, r5
10046a1e:	f7ff ffa1 	bl	10046964 <__malloc_unlock>
10046a22:	bd70      	pop	{r4, r5, r6, pc}
10046a24:	42a3      	cmp	r3, r4
10046a26:	d908      	bls.n	10046a3a <_free_r+0x42>
10046a28:	6820      	ldr	r0, [r4, #0]
10046a2a:	1821      	adds	r1, r4, r0
10046a2c:	428b      	cmp	r3, r1
10046a2e:	d1f3      	bne.n	10046a18 <_free_r+0x20>
10046a30:	6819      	ldr	r1, [r3, #0]
10046a32:	685b      	ldr	r3, [r3, #4]
10046a34:	1809      	adds	r1, r1, r0
10046a36:	6021      	str	r1, [r4, #0]
10046a38:	e7ee      	b.n	10046a18 <_free_r+0x20>
10046a3a:	001a      	movs	r2, r3
10046a3c:	685b      	ldr	r3, [r3, #4]
10046a3e:	2b00      	cmp	r3, #0
10046a40:	d001      	beq.n	10046a46 <_free_r+0x4e>
10046a42:	42a3      	cmp	r3, r4
10046a44:	d9f9      	bls.n	10046a3a <_free_r+0x42>
10046a46:	6811      	ldr	r1, [r2, #0]
10046a48:	1850      	adds	r0, r2, r1
10046a4a:	42a0      	cmp	r0, r4
10046a4c:	d10b      	bne.n	10046a66 <_free_r+0x6e>
10046a4e:	6820      	ldr	r0, [r4, #0]
10046a50:	1809      	adds	r1, r1, r0
10046a52:	1850      	adds	r0, r2, r1
10046a54:	6011      	str	r1, [r2, #0]
10046a56:	4283      	cmp	r3, r0
10046a58:	d1e0      	bne.n	10046a1c <_free_r+0x24>
10046a5a:	6818      	ldr	r0, [r3, #0]
10046a5c:	685b      	ldr	r3, [r3, #4]
10046a5e:	1841      	adds	r1, r0, r1
10046a60:	6011      	str	r1, [r2, #0]
10046a62:	6053      	str	r3, [r2, #4]
10046a64:	e7da      	b.n	10046a1c <_free_r+0x24>
10046a66:	42a0      	cmp	r0, r4
10046a68:	d902      	bls.n	10046a70 <_free_r+0x78>
10046a6a:	230c      	movs	r3, #12
10046a6c:	602b      	str	r3, [r5, #0]
10046a6e:	e7d5      	b.n	10046a1c <_free_r+0x24>
10046a70:	6820      	ldr	r0, [r4, #0]
10046a72:	1821      	adds	r1, r4, r0
10046a74:	428b      	cmp	r3, r1
10046a76:	d103      	bne.n	10046a80 <_free_r+0x88>
10046a78:	6819      	ldr	r1, [r3, #0]
10046a7a:	685b      	ldr	r3, [r3, #4]
10046a7c:	1809      	adds	r1, r1, r0
10046a7e:	6021      	str	r1, [r4, #0]
10046a80:	6063      	str	r3, [r4, #4]
10046a82:	6054      	str	r4, [r2, #4]
10046a84:	e7ca      	b.n	10046a1c <_free_r+0x24>
10046a86:	46c0      	nop			@ (mov r8, r8)
10046a88:	200008a4 	.word	0x200008a4

10046a8c <__ssputs_r>:
10046a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10046a8e:	688e      	ldr	r6, [r1, #8]
10046a90:	b085      	sub	sp, #20
10046a92:	001f      	movs	r7, r3
10046a94:	000c      	movs	r4, r1
10046a96:	680b      	ldr	r3, [r1, #0]
10046a98:	9002      	str	r0, [sp, #8]
10046a9a:	9203      	str	r2, [sp, #12]
10046a9c:	42be      	cmp	r6, r7
10046a9e:	d830      	bhi.n	10046b02 <__ssputs_r+0x76>
10046aa0:	210c      	movs	r1, #12
10046aa2:	5e62      	ldrsh	r2, [r4, r1]
10046aa4:	2190      	movs	r1, #144	@ 0x90
10046aa6:	00c9      	lsls	r1, r1, #3
10046aa8:	420a      	tst	r2, r1
10046aaa:	d028      	beq.n	10046afe <__ssputs_r+0x72>
10046aac:	2003      	movs	r0, #3
10046aae:	6921      	ldr	r1, [r4, #16]
10046ab0:	1a5b      	subs	r3, r3, r1
10046ab2:	9301      	str	r3, [sp, #4]
10046ab4:	6963      	ldr	r3, [r4, #20]
10046ab6:	4343      	muls	r3, r0
10046ab8:	9801      	ldr	r0, [sp, #4]
10046aba:	0fdd      	lsrs	r5, r3, #31
10046abc:	18ed      	adds	r5, r5, r3
10046abe:	1c7b      	adds	r3, r7, #1
10046ac0:	181b      	adds	r3, r3, r0
10046ac2:	106d      	asrs	r5, r5, #1
10046ac4:	42ab      	cmp	r3, r5
10046ac6:	d900      	bls.n	10046aca <__ssputs_r+0x3e>
10046ac8:	001d      	movs	r5, r3
10046aca:	0552      	lsls	r2, r2, #21
10046acc:	d528      	bpl.n	10046b20 <__ssputs_r+0x94>
10046ace:	0029      	movs	r1, r5
10046ad0:	9802      	ldr	r0, [sp, #8]
10046ad2:	f7ff febf 	bl	10046854 <_malloc_r>
10046ad6:	1e06      	subs	r6, r0, #0
10046ad8:	d02c      	beq.n	10046b34 <__ssputs_r+0xa8>
10046ada:	9a01      	ldr	r2, [sp, #4]
10046adc:	6921      	ldr	r1, [r4, #16]
10046ade:	f000 facf 	bl	10047080 <memcpy>
10046ae2:	89a2      	ldrh	r2, [r4, #12]
10046ae4:	4b18      	ldr	r3, [pc, #96]	@ (10046b48 <__ssputs_r+0xbc>)
10046ae6:	401a      	ands	r2, r3
10046ae8:	2380      	movs	r3, #128	@ 0x80
10046aea:	4313      	orrs	r3, r2
10046aec:	81a3      	strh	r3, [r4, #12]
10046aee:	9b01      	ldr	r3, [sp, #4]
10046af0:	6126      	str	r6, [r4, #16]
10046af2:	18f6      	adds	r6, r6, r3
10046af4:	6026      	str	r6, [r4, #0]
10046af6:	003e      	movs	r6, r7
10046af8:	6165      	str	r5, [r4, #20]
10046afa:	1aed      	subs	r5, r5, r3
10046afc:	60a5      	str	r5, [r4, #8]
10046afe:	42be      	cmp	r6, r7
10046b00:	d900      	bls.n	10046b04 <__ssputs_r+0x78>
10046b02:	003e      	movs	r6, r7
10046b04:	0032      	movs	r2, r6
10046b06:	9903      	ldr	r1, [sp, #12]
10046b08:	6820      	ldr	r0, [r4, #0]
10046b0a:	f000 fa9b 	bl	10047044 <memmove>
10046b0e:	2000      	movs	r0, #0
10046b10:	68a3      	ldr	r3, [r4, #8]
10046b12:	1b9b      	subs	r3, r3, r6
10046b14:	60a3      	str	r3, [r4, #8]
10046b16:	6823      	ldr	r3, [r4, #0]
10046b18:	199b      	adds	r3, r3, r6
10046b1a:	6023      	str	r3, [r4, #0]
10046b1c:	b005      	add	sp, #20
10046b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10046b20:	002a      	movs	r2, r5
10046b22:	9802      	ldr	r0, [sp, #8]
10046b24:	f000 fab5 	bl	10047092 <_realloc_r>
10046b28:	1e06      	subs	r6, r0, #0
10046b2a:	d1e0      	bne.n	10046aee <__ssputs_r+0x62>
10046b2c:	6921      	ldr	r1, [r4, #16]
10046b2e:	9802      	ldr	r0, [sp, #8]
10046b30:	f7ff ff62 	bl	100469f8 <_free_r>
10046b34:	230c      	movs	r3, #12
10046b36:	2001      	movs	r0, #1
10046b38:	9a02      	ldr	r2, [sp, #8]
10046b3a:	4240      	negs	r0, r0
10046b3c:	6013      	str	r3, [r2, #0]
10046b3e:	89a2      	ldrh	r2, [r4, #12]
10046b40:	3334      	adds	r3, #52	@ 0x34
10046b42:	4313      	orrs	r3, r2
10046b44:	81a3      	strh	r3, [r4, #12]
10046b46:	e7e9      	b.n	10046b1c <__ssputs_r+0x90>
10046b48:	fffffb7f 	.word	0xfffffb7f

10046b4c <_svfiprintf_r>:
10046b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10046b4e:	b0a1      	sub	sp, #132	@ 0x84
10046b50:	9003      	str	r0, [sp, #12]
10046b52:	001d      	movs	r5, r3
10046b54:	898b      	ldrh	r3, [r1, #12]
10046b56:	000f      	movs	r7, r1
10046b58:	0016      	movs	r6, r2
10046b5a:	061b      	lsls	r3, r3, #24
10046b5c:	d511      	bpl.n	10046b82 <_svfiprintf_r+0x36>
10046b5e:	690b      	ldr	r3, [r1, #16]
10046b60:	2b00      	cmp	r3, #0
10046b62:	d10e      	bne.n	10046b82 <_svfiprintf_r+0x36>
10046b64:	2140      	movs	r1, #64	@ 0x40
10046b66:	f7ff fe75 	bl	10046854 <_malloc_r>
10046b6a:	6038      	str	r0, [r7, #0]
10046b6c:	6138      	str	r0, [r7, #16]
10046b6e:	2800      	cmp	r0, #0
10046b70:	d105      	bne.n	10046b7e <_svfiprintf_r+0x32>
10046b72:	230c      	movs	r3, #12
10046b74:	9a03      	ldr	r2, [sp, #12]
10046b76:	6013      	str	r3, [r2, #0]
10046b78:	2001      	movs	r0, #1
10046b7a:	4240      	negs	r0, r0
10046b7c:	e0cf      	b.n	10046d1e <_svfiprintf_r+0x1d2>
10046b7e:	2340      	movs	r3, #64	@ 0x40
10046b80:	617b      	str	r3, [r7, #20]
10046b82:	2300      	movs	r3, #0
10046b84:	ac08      	add	r4, sp, #32
10046b86:	6163      	str	r3, [r4, #20]
10046b88:	3320      	adds	r3, #32
10046b8a:	7663      	strb	r3, [r4, #25]
10046b8c:	3310      	adds	r3, #16
10046b8e:	76a3      	strb	r3, [r4, #26]
10046b90:	9507      	str	r5, [sp, #28]
10046b92:	0035      	movs	r5, r6
10046b94:	782b      	ldrb	r3, [r5, #0]
10046b96:	2b00      	cmp	r3, #0
10046b98:	d001      	beq.n	10046b9e <_svfiprintf_r+0x52>
10046b9a:	2b25      	cmp	r3, #37	@ 0x25
10046b9c:	d148      	bne.n	10046c30 <_svfiprintf_r+0xe4>
10046b9e:	1bab      	subs	r3, r5, r6
10046ba0:	9305      	str	r3, [sp, #20]
10046ba2:	42b5      	cmp	r5, r6
10046ba4:	d00b      	beq.n	10046bbe <_svfiprintf_r+0x72>
10046ba6:	0032      	movs	r2, r6
10046ba8:	0039      	movs	r1, r7
10046baa:	9803      	ldr	r0, [sp, #12]
10046bac:	f7ff ff6e 	bl	10046a8c <__ssputs_r>
10046bb0:	3001      	adds	r0, #1
10046bb2:	d100      	bne.n	10046bb6 <_svfiprintf_r+0x6a>
10046bb4:	e0ae      	b.n	10046d14 <_svfiprintf_r+0x1c8>
10046bb6:	6963      	ldr	r3, [r4, #20]
10046bb8:	9a05      	ldr	r2, [sp, #20]
10046bba:	189b      	adds	r3, r3, r2
10046bbc:	6163      	str	r3, [r4, #20]
10046bbe:	782b      	ldrb	r3, [r5, #0]
10046bc0:	2b00      	cmp	r3, #0
10046bc2:	d100      	bne.n	10046bc6 <_svfiprintf_r+0x7a>
10046bc4:	e0a6      	b.n	10046d14 <_svfiprintf_r+0x1c8>
10046bc6:	2201      	movs	r2, #1
10046bc8:	2300      	movs	r3, #0
10046bca:	4252      	negs	r2, r2
10046bcc:	6062      	str	r2, [r4, #4]
10046bce:	a904      	add	r1, sp, #16
10046bd0:	3254      	adds	r2, #84	@ 0x54
10046bd2:	1852      	adds	r2, r2, r1
10046bd4:	1c6e      	adds	r6, r5, #1
10046bd6:	6023      	str	r3, [r4, #0]
10046bd8:	60e3      	str	r3, [r4, #12]
10046bda:	60a3      	str	r3, [r4, #8]
10046bdc:	7013      	strb	r3, [r2, #0]
10046bde:	65a3      	str	r3, [r4, #88]	@ 0x58
10046be0:	4b54      	ldr	r3, [pc, #336]	@ (10046d34 <_svfiprintf_r+0x1e8>)
10046be2:	2205      	movs	r2, #5
10046be4:	0018      	movs	r0, r3
10046be6:	7831      	ldrb	r1, [r6, #0]
10046be8:	9305      	str	r3, [sp, #20]
10046bea:	f000 fa3e 	bl	1004706a <memchr>
10046bee:	1c75      	adds	r5, r6, #1
10046bf0:	2800      	cmp	r0, #0
10046bf2:	d11f      	bne.n	10046c34 <_svfiprintf_r+0xe8>
10046bf4:	6822      	ldr	r2, [r4, #0]
10046bf6:	06d3      	lsls	r3, r2, #27
10046bf8:	d504      	bpl.n	10046c04 <_svfiprintf_r+0xb8>
10046bfa:	2353      	movs	r3, #83	@ 0x53
10046bfc:	a904      	add	r1, sp, #16
10046bfe:	185b      	adds	r3, r3, r1
10046c00:	2120      	movs	r1, #32
10046c02:	7019      	strb	r1, [r3, #0]
10046c04:	0713      	lsls	r3, r2, #28
10046c06:	d504      	bpl.n	10046c12 <_svfiprintf_r+0xc6>
10046c08:	2353      	movs	r3, #83	@ 0x53
10046c0a:	a904      	add	r1, sp, #16
10046c0c:	185b      	adds	r3, r3, r1
10046c0e:	212b      	movs	r1, #43	@ 0x2b
10046c10:	7019      	strb	r1, [r3, #0]
10046c12:	7833      	ldrb	r3, [r6, #0]
10046c14:	2b2a      	cmp	r3, #42	@ 0x2a
10046c16:	d016      	beq.n	10046c46 <_svfiprintf_r+0xfa>
10046c18:	0035      	movs	r5, r6
10046c1a:	2100      	movs	r1, #0
10046c1c:	200a      	movs	r0, #10
10046c1e:	68e3      	ldr	r3, [r4, #12]
10046c20:	782a      	ldrb	r2, [r5, #0]
10046c22:	1c6e      	adds	r6, r5, #1
10046c24:	3a30      	subs	r2, #48	@ 0x30
10046c26:	2a09      	cmp	r2, #9
10046c28:	d950      	bls.n	10046ccc <_svfiprintf_r+0x180>
10046c2a:	2900      	cmp	r1, #0
10046c2c:	d111      	bne.n	10046c52 <_svfiprintf_r+0x106>
10046c2e:	e017      	b.n	10046c60 <_svfiprintf_r+0x114>
10046c30:	3501      	adds	r5, #1
10046c32:	e7af      	b.n	10046b94 <_svfiprintf_r+0x48>
10046c34:	9b05      	ldr	r3, [sp, #20]
10046c36:	6822      	ldr	r2, [r4, #0]
10046c38:	1ac0      	subs	r0, r0, r3
10046c3a:	2301      	movs	r3, #1
10046c3c:	4083      	lsls	r3, r0
10046c3e:	4313      	orrs	r3, r2
10046c40:	002e      	movs	r6, r5
10046c42:	6023      	str	r3, [r4, #0]
10046c44:	e7cc      	b.n	10046be0 <_svfiprintf_r+0x94>
10046c46:	9b07      	ldr	r3, [sp, #28]
10046c48:	1d19      	adds	r1, r3, #4
10046c4a:	681b      	ldr	r3, [r3, #0]
10046c4c:	9107      	str	r1, [sp, #28]
10046c4e:	2b00      	cmp	r3, #0
10046c50:	db01      	blt.n	10046c56 <_svfiprintf_r+0x10a>
10046c52:	930b      	str	r3, [sp, #44]	@ 0x2c
10046c54:	e004      	b.n	10046c60 <_svfiprintf_r+0x114>
10046c56:	425b      	negs	r3, r3
10046c58:	60e3      	str	r3, [r4, #12]
10046c5a:	2302      	movs	r3, #2
10046c5c:	4313      	orrs	r3, r2
10046c5e:	6023      	str	r3, [r4, #0]
10046c60:	782b      	ldrb	r3, [r5, #0]
10046c62:	2b2e      	cmp	r3, #46	@ 0x2e
10046c64:	d10c      	bne.n	10046c80 <_svfiprintf_r+0x134>
10046c66:	786b      	ldrb	r3, [r5, #1]
10046c68:	2b2a      	cmp	r3, #42	@ 0x2a
10046c6a:	d134      	bne.n	10046cd6 <_svfiprintf_r+0x18a>
10046c6c:	9b07      	ldr	r3, [sp, #28]
10046c6e:	3502      	adds	r5, #2
10046c70:	1d1a      	adds	r2, r3, #4
10046c72:	681b      	ldr	r3, [r3, #0]
10046c74:	9207      	str	r2, [sp, #28]
10046c76:	2b00      	cmp	r3, #0
10046c78:	da01      	bge.n	10046c7e <_svfiprintf_r+0x132>
10046c7a:	2301      	movs	r3, #1
10046c7c:	425b      	negs	r3, r3
10046c7e:	9309      	str	r3, [sp, #36]	@ 0x24
10046c80:	4e2d      	ldr	r6, [pc, #180]	@ (10046d38 <_svfiprintf_r+0x1ec>)
10046c82:	2203      	movs	r2, #3
10046c84:	0030      	movs	r0, r6
10046c86:	7829      	ldrb	r1, [r5, #0]
10046c88:	f000 f9ef 	bl	1004706a <memchr>
10046c8c:	2800      	cmp	r0, #0
10046c8e:	d006      	beq.n	10046c9e <_svfiprintf_r+0x152>
10046c90:	2340      	movs	r3, #64	@ 0x40
10046c92:	1b80      	subs	r0, r0, r6
10046c94:	4083      	lsls	r3, r0
10046c96:	6822      	ldr	r2, [r4, #0]
10046c98:	3501      	adds	r5, #1
10046c9a:	4313      	orrs	r3, r2
10046c9c:	6023      	str	r3, [r4, #0]
10046c9e:	7829      	ldrb	r1, [r5, #0]
10046ca0:	2206      	movs	r2, #6
10046ca2:	4826      	ldr	r0, [pc, #152]	@ (10046d3c <_svfiprintf_r+0x1f0>)
10046ca4:	1c6e      	adds	r6, r5, #1
10046ca6:	7621      	strb	r1, [r4, #24]
10046ca8:	f000 f9df 	bl	1004706a <memchr>
10046cac:	2800      	cmp	r0, #0
10046cae:	d038      	beq.n	10046d22 <_svfiprintf_r+0x1d6>
10046cb0:	4b23      	ldr	r3, [pc, #140]	@ (10046d40 <_svfiprintf_r+0x1f4>)
10046cb2:	2b00      	cmp	r3, #0
10046cb4:	d122      	bne.n	10046cfc <_svfiprintf_r+0x1b0>
10046cb6:	2207      	movs	r2, #7
10046cb8:	9b07      	ldr	r3, [sp, #28]
10046cba:	3307      	adds	r3, #7
10046cbc:	4393      	bics	r3, r2
10046cbe:	3308      	adds	r3, #8
10046cc0:	9307      	str	r3, [sp, #28]
10046cc2:	6963      	ldr	r3, [r4, #20]
10046cc4:	9a04      	ldr	r2, [sp, #16]
10046cc6:	189b      	adds	r3, r3, r2
10046cc8:	6163      	str	r3, [r4, #20]
10046cca:	e762      	b.n	10046b92 <_svfiprintf_r+0x46>
10046ccc:	4343      	muls	r3, r0
10046cce:	0035      	movs	r5, r6
10046cd0:	2101      	movs	r1, #1
10046cd2:	189b      	adds	r3, r3, r2
10046cd4:	e7a4      	b.n	10046c20 <_svfiprintf_r+0xd4>
10046cd6:	2300      	movs	r3, #0
10046cd8:	200a      	movs	r0, #10
10046cda:	0019      	movs	r1, r3
10046cdc:	3501      	adds	r5, #1
10046cde:	6063      	str	r3, [r4, #4]
10046ce0:	782a      	ldrb	r2, [r5, #0]
10046ce2:	1c6e      	adds	r6, r5, #1
10046ce4:	3a30      	subs	r2, #48	@ 0x30
10046ce6:	2a09      	cmp	r2, #9
10046ce8:	d903      	bls.n	10046cf2 <_svfiprintf_r+0x1a6>
10046cea:	2b00      	cmp	r3, #0
10046cec:	d0c8      	beq.n	10046c80 <_svfiprintf_r+0x134>
10046cee:	9109      	str	r1, [sp, #36]	@ 0x24
10046cf0:	e7c6      	b.n	10046c80 <_svfiprintf_r+0x134>
10046cf2:	4341      	muls	r1, r0
10046cf4:	0035      	movs	r5, r6
10046cf6:	2301      	movs	r3, #1
10046cf8:	1889      	adds	r1, r1, r2
10046cfa:	e7f1      	b.n	10046ce0 <_svfiprintf_r+0x194>
10046cfc:	aa07      	add	r2, sp, #28
10046cfe:	9200      	str	r2, [sp, #0]
10046d00:	0021      	movs	r1, r4
10046d02:	003a      	movs	r2, r7
10046d04:	4b0f      	ldr	r3, [pc, #60]	@ (10046d44 <_svfiprintf_r+0x1f8>)
10046d06:	9803      	ldr	r0, [sp, #12]
10046d08:	e000      	b.n	10046d0c <_svfiprintf_r+0x1c0>
10046d0a:	bf00      	nop
10046d0c:	9004      	str	r0, [sp, #16]
10046d0e:	9b04      	ldr	r3, [sp, #16]
10046d10:	3301      	adds	r3, #1
10046d12:	d1d6      	bne.n	10046cc2 <_svfiprintf_r+0x176>
10046d14:	89bb      	ldrh	r3, [r7, #12]
10046d16:	980d      	ldr	r0, [sp, #52]	@ 0x34
10046d18:	065b      	lsls	r3, r3, #25
10046d1a:	d500      	bpl.n	10046d1e <_svfiprintf_r+0x1d2>
10046d1c:	e72c      	b.n	10046b78 <_svfiprintf_r+0x2c>
10046d1e:	b021      	add	sp, #132	@ 0x84
10046d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
10046d22:	aa07      	add	r2, sp, #28
10046d24:	9200      	str	r2, [sp, #0]
10046d26:	0021      	movs	r1, r4
10046d28:	003a      	movs	r2, r7
10046d2a:	4b06      	ldr	r3, [pc, #24]	@ (10046d44 <_svfiprintf_r+0x1f8>)
10046d2c:	9803      	ldr	r0, [sp, #12]
10046d2e:	f000 f87b 	bl	10046e28 <_printf_i>
10046d32:	e7eb      	b.n	10046d0c <_svfiprintf_r+0x1c0>
10046d34:	10047398 	.word	0x10047398
10046d38:	1004739e 	.word	0x1004739e
10046d3c:	100473a2 	.word	0x100473a2
10046d40:	00000000 	.word	0x00000000
10046d44:	10046a8d 	.word	0x10046a8d

10046d48 <_printf_common>:
10046d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10046d4a:	0016      	movs	r6, r2
10046d4c:	9301      	str	r3, [sp, #4]
10046d4e:	688a      	ldr	r2, [r1, #8]
10046d50:	690b      	ldr	r3, [r1, #16]
10046d52:	000c      	movs	r4, r1
10046d54:	9000      	str	r0, [sp, #0]
10046d56:	4293      	cmp	r3, r2
10046d58:	da00      	bge.n	10046d5c <_printf_common+0x14>
10046d5a:	0013      	movs	r3, r2
10046d5c:	0022      	movs	r2, r4
10046d5e:	6033      	str	r3, [r6, #0]
10046d60:	3243      	adds	r2, #67	@ 0x43
10046d62:	7812      	ldrb	r2, [r2, #0]
10046d64:	2a00      	cmp	r2, #0
10046d66:	d001      	beq.n	10046d6c <_printf_common+0x24>
10046d68:	3301      	adds	r3, #1
10046d6a:	6033      	str	r3, [r6, #0]
10046d6c:	6823      	ldr	r3, [r4, #0]
10046d6e:	069b      	lsls	r3, r3, #26
10046d70:	d502      	bpl.n	10046d78 <_printf_common+0x30>
10046d72:	6833      	ldr	r3, [r6, #0]
10046d74:	3302      	adds	r3, #2
10046d76:	6033      	str	r3, [r6, #0]
10046d78:	6822      	ldr	r2, [r4, #0]
10046d7a:	2306      	movs	r3, #6
10046d7c:	0015      	movs	r5, r2
10046d7e:	401d      	ands	r5, r3
10046d80:	421a      	tst	r2, r3
10046d82:	d027      	beq.n	10046dd4 <_printf_common+0x8c>
10046d84:	0023      	movs	r3, r4
10046d86:	3343      	adds	r3, #67	@ 0x43
10046d88:	781b      	ldrb	r3, [r3, #0]
10046d8a:	1e5a      	subs	r2, r3, #1
10046d8c:	4193      	sbcs	r3, r2
10046d8e:	6822      	ldr	r2, [r4, #0]
10046d90:	0692      	lsls	r2, r2, #26
10046d92:	d430      	bmi.n	10046df6 <_printf_common+0xae>
10046d94:	0022      	movs	r2, r4
10046d96:	9901      	ldr	r1, [sp, #4]
10046d98:	9800      	ldr	r0, [sp, #0]
10046d9a:	9d08      	ldr	r5, [sp, #32]
10046d9c:	3243      	adds	r2, #67	@ 0x43
10046d9e:	47a8      	blx	r5
10046da0:	3001      	adds	r0, #1
10046da2:	d025      	beq.n	10046df0 <_printf_common+0xa8>
10046da4:	2206      	movs	r2, #6
10046da6:	6823      	ldr	r3, [r4, #0]
10046da8:	2500      	movs	r5, #0
10046daa:	4013      	ands	r3, r2
10046dac:	2b04      	cmp	r3, #4
10046dae:	d105      	bne.n	10046dbc <_printf_common+0x74>
10046db0:	6833      	ldr	r3, [r6, #0]
10046db2:	68e5      	ldr	r5, [r4, #12]
10046db4:	1aed      	subs	r5, r5, r3
10046db6:	43eb      	mvns	r3, r5
10046db8:	17db      	asrs	r3, r3, #31
10046dba:	401d      	ands	r5, r3
10046dbc:	68a3      	ldr	r3, [r4, #8]
10046dbe:	6922      	ldr	r2, [r4, #16]
10046dc0:	4293      	cmp	r3, r2
10046dc2:	dd01      	ble.n	10046dc8 <_printf_common+0x80>
10046dc4:	1a9b      	subs	r3, r3, r2
10046dc6:	18ed      	adds	r5, r5, r3
10046dc8:	2600      	movs	r6, #0
10046dca:	42b5      	cmp	r5, r6
10046dcc:	d120      	bne.n	10046e10 <_printf_common+0xc8>
10046dce:	2000      	movs	r0, #0
10046dd0:	e010      	b.n	10046df4 <_printf_common+0xac>
10046dd2:	3501      	adds	r5, #1
10046dd4:	68e3      	ldr	r3, [r4, #12]
10046dd6:	6832      	ldr	r2, [r6, #0]
10046dd8:	1a9b      	subs	r3, r3, r2
10046dda:	42ab      	cmp	r3, r5
10046ddc:	ddd2      	ble.n	10046d84 <_printf_common+0x3c>
10046dde:	0022      	movs	r2, r4
10046de0:	2301      	movs	r3, #1
10046de2:	9901      	ldr	r1, [sp, #4]
10046de4:	9800      	ldr	r0, [sp, #0]
10046de6:	9f08      	ldr	r7, [sp, #32]
10046de8:	3219      	adds	r2, #25
10046dea:	47b8      	blx	r7
10046dec:	3001      	adds	r0, #1
10046dee:	d1f0      	bne.n	10046dd2 <_printf_common+0x8a>
10046df0:	2001      	movs	r0, #1
10046df2:	4240      	negs	r0, r0
10046df4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10046df6:	2030      	movs	r0, #48	@ 0x30
10046df8:	18e1      	adds	r1, r4, r3
10046dfa:	3143      	adds	r1, #67	@ 0x43
10046dfc:	7008      	strb	r0, [r1, #0]
10046dfe:	0021      	movs	r1, r4
10046e00:	1c5a      	adds	r2, r3, #1
10046e02:	3145      	adds	r1, #69	@ 0x45
10046e04:	7809      	ldrb	r1, [r1, #0]
10046e06:	18a2      	adds	r2, r4, r2
10046e08:	3243      	adds	r2, #67	@ 0x43
10046e0a:	3302      	adds	r3, #2
10046e0c:	7011      	strb	r1, [r2, #0]
10046e0e:	e7c1      	b.n	10046d94 <_printf_common+0x4c>
10046e10:	0022      	movs	r2, r4
10046e12:	2301      	movs	r3, #1
10046e14:	9901      	ldr	r1, [sp, #4]
10046e16:	9800      	ldr	r0, [sp, #0]
10046e18:	9f08      	ldr	r7, [sp, #32]
10046e1a:	321a      	adds	r2, #26
10046e1c:	47b8      	blx	r7
10046e1e:	3001      	adds	r0, #1
10046e20:	d0e6      	beq.n	10046df0 <_printf_common+0xa8>
10046e22:	3601      	adds	r6, #1
10046e24:	e7d1      	b.n	10046dca <_printf_common+0x82>
	...

10046e28 <_printf_i>:
10046e28:	b5f0      	push	{r4, r5, r6, r7, lr}
10046e2a:	b08b      	sub	sp, #44	@ 0x2c
10046e2c:	9206      	str	r2, [sp, #24]
10046e2e:	000a      	movs	r2, r1
10046e30:	3243      	adds	r2, #67	@ 0x43
10046e32:	9307      	str	r3, [sp, #28]
10046e34:	9005      	str	r0, [sp, #20]
10046e36:	9203      	str	r2, [sp, #12]
10046e38:	7e0a      	ldrb	r2, [r1, #24]
10046e3a:	000c      	movs	r4, r1
10046e3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10046e3e:	2a78      	cmp	r2, #120	@ 0x78
10046e40:	d809      	bhi.n	10046e56 <_printf_i+0x2e>
10046e42:	2a62      	cmp	r2, #98	@ 0x62
10046e44:	d80b      	bhi.n	10046e5e <_printf_i+0x36>
10046e46:	2a00      	cmp	r2, #0
10046e48:	d100      	bne.n	10046e4c <_printf_i+0x24>
10046e4a:	e0bc      	b.n	10046fc6 <_printf_i+0x19e>
10046e4c:	497b      	ldr	r1, [pc, #492]	@ (1004703c <_printf_i+0x214>)
10046e4e:	9104      	str	r1, [sp, #16]
10046e50:	2a58      	cmp	r2, #88	@ 0x58
10046e52:	d100      	bne.n	10046e56 <_printf_i+0x2e>
10046e54:	e090      	b.n	10046f78 <_printf_i+0x150>
10046e56:	0025      	movs	r5, r4
10046e58:	3542      	adds	r5, #66	@ 0x42
10046e5a:	702a      	strb	r2, [r5, #0]
10046e5c:	e022      	b.n	10046ea4 <_printf_i+0x7c>
10046e5e:	0010      	movs	r0, r2
10046e60:	3863      	subs	r0, #99	@ 0x63
10046e62:	2815      	cmp	r0, #21
10046e64:	d8f7      	bhi.n	10046e56 <_printf_i+0x2e>
10046e66:	f7f9 f955 	bl	10040114 <__gnu_thumb1_case_shi>
10046e6a:	0016      	.short	0x0016
10046e6c:	fff6001f 	.word	0xfff6001f
10046e70:	fff6fff6 	.word	0xfff6fff6
10046e74:	001ffff6 	.word	0x001ffff6
10046e78:	fff6fff6 	.word	0xfff6fff6
10046e7c:	fff6fff6 	.word	0xfff6fff6
10046e80:	003600a1 	.word	0x003600a1
10046e84:	fff60080 	.word	0xfff60080
10046e88:	00b2fff6 	.word	0x00b2fff6
10046e8c:	0036fff6 	.word	0x0036fff6
10046e90:	fff6fff6 	.word	0xfff6fff6
10046e94:	0084      	.short	0x0084
10046e96:	0025      	movs	r5, r4
10046e98:	681a      	ldr	r2, [r3, #0]
10046e9a:	3542      	adds	r5, #66	@ 0x42
10046e9c:	1d11      	adds	r1, r2, #4
10046e9e:	6019      	str	r1, [r3, #0]
10046ea0:	6813      	ldr	r3, [r2, #0]
10046ea2:	702b      	strb	r3, [r5, #0]
10046ea4:	2301      	movs	r3, #1
10046ea6:	e0a0      	b.n	10046fea <_printf_i+0x1c2>
10046ea8:	6818      	ldr	r0, [r3, #0]
10046eaa:	6809      	ldr	r1, [r1, #0]
10046eac:	1d02      	adds	r2, r0, #4
10046eae:	060d      	lsls	r5, r1, #24
10046eb0:	d50b      	bpl.n	10046eca <_printf_i+0xa2>
10046eb2:	6806      	ldr	r6, [r0, #0]
10046eb4:	601a      	str	r2, [r3, #0]
10046eb6:	2e00      	cmp	r6, #0
10046eb8:	da03      	bge.n	10046ec2 <_printf_i+0x9a>
10046eba:	232d      	movs	r3, #45	@ 0x2d
10046ebc:	9a03      	ldr	r2, [sp, #12]
10046ebe:	4276      	negs	r6, r6
10046ec0:	7013      	strb	r3, [r2, #0]
10046ec2:	4b5e      	ldr	r3, [pc, #376]	@ (1004703c <_printf_i+0x214>)
10046ec4:	270a      	movs	r7, #10
10046ec6:	9304      	str	r3, [sp, #16]
10046ec8:	e018      	b.n	10046efc <_printf_i+0xd4>
10046eca:	6806      	ldr	r6, [r0, #0]
10046ecc:	601a      	str	r2, [r3, #0]
10046ece:	0649      	lsls	r1, r1, #25
10046ed0:	d5f1      	bpl.n	10046eb6 <_printf_i+0x8e>
10046ed2:	b236      	sxth	r6, r6
10046ed4:	e7ef      	b.n	10046eb6 <_printf_i+0x8e>
10046ed6:	6808      	ldr	r0, [r1, #0]
10046ed8:	6819      	ldr	r1, [r3, #0]
10046eda:	c940      	ldmia	r1!, {r6}
10046edc:	0605      	lsls	r5, r0, #24
10046ede:	d402      	bmi.n	10046ee6 <_printf_i+0xbe>
10046ee0:	0640      	lsls	r0, r0, #25
10046ee2:	d500      	bpl.n	10046ee6 <_printf_i+0xbe>
10046ee4:	b2b6      	uxth	r6, r6
10046ee6:	6019      	str	r1, [r3, #0]
10046ee8:	4b54      	ldr	r3, [pc, #336]	@ (1004703c <_printf_i+0x214>)
10046eea:	270a      	movs	r7, #10
10046eec:	9304      	str	r3, [sp, #16]
10046eee:	2a6f      	cmp	r2, #111	@ 0x6f
10046ef0:	d100      	bne.n	10046ef4 <_printf_i+0xcc>
10046ef2:	3f02      	subs	r7, #2
10046ef4:	0023      	movs	r3, r4
10046ef6:	2200      	movs	r2, #0
10046ef8:	3343      	adds	r3, #67	@ 0x43
10046efa:	701a      	strb	r2, [r3, #0]
10046efc:	6863      	ldr	r3, [r4, #4]
10046efe:	60a3      	str	r3, [r4, #8]
10046f00:	2b00      	cmp	r3, #0
10046f02:	db03      	blt.n	10046f0c <_printf_i+0xe4>
10046f04:	2104      	movs	r1, #4
10046f06:	6822      	ldr	r2, [r4, #0]
10046f08:	438a      	bics	r2, r1
10046f0a:	6022      	str	r2, [r4, #0]
10046f0c:	2e00      	cmp	r6, #0
10046f0e:	d102      	bne.n	10046f16 <_printf_i+0xee>
10046f10:	9d03      	ldr	r5, [sp, #12]
10046f12:	2b00      	cmp	r3, #0
10046f14:	d00c      	beq.n	10046f30 <_printf_i+0x108>
10046f16:	9d03      	ldr	r5, [sp, #12]
10046f18:	0030      	movs	r0, r6
10046f1a:	0039      	movs	r1, r7
10046f1c:	f7f9 f98a 	bl	10040234 <__aeabi_uidivmod>
10046f20:	9b04      	ldr	r3, [sp, #16]
10046f22:	3d01      	subs	r5, #1
10046f24:	5c5b      	ldrb	r3, [r3, r1]
10046f26:	702b      	strb	r3, [r5, #0]
10046f28:	0033      	movs	r3, r6
10046f2a:	0006      	movs	r6, r0
10046f2c:	429f      	cmp	r7, r3
10046f2e:	d9f3      	bls.n	10046f18 <_printf_i+0xf0>
10046f30:	2f08      	cmp	r7, #8
10046f32:	d109      	bne.n	10046f48 <_printf_i+0x120>
10046f34:	6823      	ldr	r3, [r4, #0]
10046f36:	07db      	lsls	r3, r3, #31
10046f38:	d506      	bpl.n	10046f48 <_printf_i+0x120>
10046f3a:	6862      	ldr	r2, [r4, #4]
10046f3c:	6923      	ldr	r3, [r4, #16]
10046f3e:	429a      	cmp	r2, r3
10046f40:	dc02      	bgt.n	10046f48 <_printf_i+0x120>
10046f42:	2330      	movs	r3, #48	@ 0x30
10046f44:	3d01      	subs	r5, #1
10046f46:	702b      	strb	r3, [r5, #0]
10046f48:	9b03      	ldr	r3, [sp, #12]
10046f4a:	1b5b      	subs	r3, r3, r5
10046f4c:	6123      	str	r3, [r4, #16]
10046f4e:	9b07      	ldr	r3, [sp, #28]
10046f50:	0021      	movs	r1, r4
10046f52:	9300      	str	r3, [sp, #0]
10046f54:	9805      	ldr	r0, [sp, #20]
10046f56:	9b06      	ldr	r3, [sp, #24]
10046f58:	aa09      	add	r2, sp, #36	@ 0x24
10046f5a:	f7ff fef5 	bl	10046d48 <_printf_common>
10046f5e:	3001      	adds	r0, #1
10046f60:	d148      	bne.n	10046ff4 <_printf_i+0x1cc>
10046f62:	2001      	movs	r0, #1
10046f64:	4240      	negs	r0, r0
10046f66:	b00b      	add	sp, #44	@ 0x2c
10046f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
10046f6a:	2220      	movs	r2, #32
10046f6c:	6809      	ldr	r1, [r1, #0]
10046f6e:	430a      	orrs	r2, r1
10046f70:	6022      	str	r2, [r4, #0]
10046f72:	2278      	movs	r2, #120	@ 0x78
10046f74:	4932      	ldr	r1, [pc, #200]	@ (10047040 <_printf_i+0x218>)
10046f76:	9104      	str	r1, [sp, #16]
10046f78:	0021      	movs	r1, r4
10046f7a:	3145      	adds	r1, #69	@ 0x45
10046f7c:	700a      	strb	r2, [r1, #0]
10046f7e:	6819      	ldr	r1, [r3, #0]
10046f80:	6822      	ldr	r2, [r4, #0]
10046f82:	c940      	ldmia	r1!, {r6}
10046f84:	0610      	lsls	r0, r2, #24
10046f86:	d402      	bmi.n	10046f8e <_printf_i+0x166>
10046f88:	0650      	lsls	r0, r2, #25
10046f8a:	d500      	bpl.n	10046f8e <_printf_i+0x166>
10046f8c:	b2b6      	uxth	r6, r6
10046f8e:	6019      	str	r1, [r3, #0]
10046f90:	07d3      	lsls	r3, r2, #31
10046f92:	d502      	bpl.n	10046f9a <_printf_i+0x172>
10046f94:	2320      	movs	r3, #32
10046f96:	4313      	orrs	r3, r2
10046f98:	6023      	str	r3, [r4, #0]
10046f9a:	2e00      	cmp	r6, #0
10046f9c:	d001      	beq.n	10046fa2 <_printf_i+0x17a>
10046f9e:	2710      	movs	r7, #16
10046fa0:	e7a8      	b.n	10046ef4 <_printf_i+0xcc>
10046fa2:	2220      	movs	r2, #32
10046fa4:	6823      	ldr	r3, [r4, #0]
10046fa6:	4393      	bics	r3, r2
10046fa8:	6023      	str	r3, [r4, #0]
10046faa:	e7f8      	b.n	10046f9e <_printf_i+0x176>
10046fac:	681a      	ldr	r2, [r3, #0]
10046fae:	680d      	ldr	r5, [r1, #0]
10046fb0:	1d10      	adds	r0, r2, #4
10046fb2:	6949      	ldr	r1, [r1, #20]
10046fb4:	6018      	str	r0, [r3, #0]
10046fb6:	6813      	ldr	r3, [r2, #0]
10046fb8:	062e      	lsls	r6, r5, #24
10046fba:	d501      	bpl.n	10046fc0 <_printf_i+0x198>
10046fbc:	6019      	str	r1, [r3, #0]
10046fbe:	e002      	b.n	10046fc6 <_printf_i+0x19e>
10046fc0:	066d      	lsls	r5, r5, #25
10046fc2:	d5fb      	bpl.n	10046fbc <_printf_i+0x194>
10046fc4:	8019      	strh	r1, [r3, #0]
10046fc6:	2300      	movs	r3, #0
10046fc8:	9d03      	ldr	r5, [sp, #12]
10046fca:	6123      	str	r3, [r4, #16]
10046fcc:	e7bf      	b.n	10046f4e <_printf_i+0x126>
10046fce:	681a      	ldr	r2, [r3, #0]
10046fd0:	1d11      	adds	r1, r2, #4
10046fd2:	6019      	str	r1, [r3, #0]
10046fd4:	6815      	ldr	r5, [r2, #0]
10046fd6:	2100      	movs	r1, #0
10046fd8:	0028      	movs	r0, r5
10046fda:	6862      	ldr	r2, [r4, #4]
10046fdc:	f000 f845 	bl	1004706a <memchr>
10046fe0:	2800      	cmp	r0, #0
10046fe2:	d001      	beq.n	10046fe8 <_printf_i+0x1c0>
10046fe4:	1b40      	subs	r0, r0, r5
10046fe6:	6060      	str	r0, [r4, #4]
10046fe8:	6863      	ldr	r3, [r4, #4]
10046fea:	6123      	str	r3, [r4, #16]
10046fec:	2300      	movs	r3, #0
10046fee:	9a03      	ldr	r2, [sp, #12]
10046ff0:	7013      	strb	r3, [r2, #0]
10046ff2:	e7ac      	b.n	10046f4e <_printf_i+0x126>
10046ff4:	002a      	movs	r2, r5
10046ff6:	6923      	ldr	r3, [r4, #16]
10046ff8:	9906      	ldr	r1, [sp, #24]
10046ffa:	9805      	ldr	r0, [sp, #20]
10046ffc:	9d07      	ldr	r5, [sp, #28]
10046ffe:	47a8      	blx	r5
10047000:	3001      	adds	r0, #1
10047002:	d0ae      	beq.n	10046f62 <_printf_i+0x13a>
10047004:	6823      	ldr	r3, [r4, #0]
10047006:	079b      	lsls	r3, r3, #30
10047008:	d415      	bmi.n	10047036 <_printf_i+0x20e>
1004700a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004700c:	68e0      	ldr	r0, [r4, #12]
1004700e:	4298      	cmp	r0, r3
10047010:	daa9      	bge.n	10046f66 <_printf_i+0x13e>
10047012:	0018      	movs	r0, r3
10047014:	e7a7      	b.n	10046f66 <_printf_i+0x13e>
10047016:	0022      	movs	r2, r4
10047018:	2301      	movs	r3, #1
1004701a:	9906      	ldr	r1, [sp, #24]
1004701c:	9805      	ldr	r0, [sp, #20]
1004701e:	9e07      	ldr	r6, [sp, #28]
10047020:	3219      	adds	r2, #25
10047022:	47b0      	blx	r6
10047024:	3001      	adds	r0, #1
10047026:	d09c      	beq.n	10046f62 <_printf_i+0x13a>
10047028:	3501      	adds	r5, #1
1004702a:	68e3      	ldr	r3, [r4, #12]
1004702c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1004702e:	1a9b      	subs	r3, r3, r2
10047030:	42ab      	cmp	r3, r5
10047032:	dcf0      	bgt.n	10047016 <_printf_i+0x1ee>
10047034:	e7e9      	b.n	1004700a <_printf_i+0x1e2>
10047036:	2500      	movs	r5, #0
10047038:	e7f7      	b.n	1004702a <_printf_i+0x202>
1004703a:	46c0      	nop			@ (mov r8, r8)
1004703c:	100473a9 	.word	0x100473a9
10047040:	100473ba 	.word	0x100473ba

10047044 <memmove>:
10047044:	b510      	push	{r4, lr}
10047046:	4288      	cmp	r0, r1
10047048:	d806      	bhi.n	10047058 <memmove+0x14>
1004704a:	2300      	movs	r3, #0
1004704c:	429a      	cmp	r2, r3
1004704e:	d008      	beq.n	10047062 <memmove+0x1e>
10047050:	5ccc      	ldrb	r4, [r1, r3]
10047052:	54c4      	strb	r4, [r0, r3]
10047054:	3301      	adds	r3, #1
10047056:	e7f9      	b.n	1004704c <memmove+0x8>
10047058:	188b      	adds	r3, r1, r2
1004705a:	4298      	cmp	r0, r3
1004705c:	d2f5      	bcs.n	1004704a <memmove+0x6>
1004705e:	3a01      	subs	r2, #1
10047060:	d200      	bcs.n	10047064 <memmove+0x20>
10047062:	bd10      	pop	{r4, pc}
10047064:	5c8b      	ldrb	r3, [r1, r2]
10047066:	5483      	strb	r3, [r0, r2]
10047068:	e7f9      	b.n	1004705e <memmove+0x1a>

1004706a <memchr>:
1004706a:	b2c9      	uxtb	r1, r1
1004706c:	1882      	adds	r2, r0, r2
1004706e:	4290      	cmp	r0, r2
10047070:	d101      	bne.n	10047076 <memchr+0xc>
10047072:	2000      	movs	r0, #0
10047074:	4770      	bx	lr
10047076:	7803      	ldrb	r3, [r0, #0]
10047078:	428b      	cmp	r3, r1
1004707a:	d0fb      	beq.n	10047074 <memchr+0xa>
1004707c:	3001      	adds	r0, #1
1004707e:	e7f6      	b.n	1004706e <memchr+0x4>

10047080 <memcpy>:
10047080:	2300      	movs	r3, #0
10047082:	b510      	push	{r4, lr}
10047084:	429a      	cmp	r2, r3
10047086:	d100      	bne.n	1004708a <memcpy+0xa>
10047088:	bd10      	pop	{r4, pc}
1004708a:	5ccc      	ldrb	r4, [r1, r3]
1004708c:	54c4      	strb	r4, [r0, r3]
1004708e:	3301      	adds	r3, #1
10047090:	e7f8      	b.n	10047084 <memcpy+0x4>

10047092 <_realloc_r>:
10047092:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10047094:	0006      	movs	r6, r0
10047096:	000c      	movs	r4, r1
10047098:	0015      	movs	r5, r2
1004709a:	2900      	cmp	r1, #0
1004709c:	d105      	bne.n	100470aa <_realloc_r+0x18>
1004709e:	0011      	movs	r1, r2
100470a0:	f7ff fbd8 	bl	10046854 <_malloc_r>
100470a4:	0004      	movs	r4, r0
100470a6:	0020      	movs	r0, r4
100470a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100470aa:	2a00      	cmp	r2, #0
100470ac:	d103      	bne.n	100470b6 <_realloc_r+0x24>
100470ae:	f7ff fca3 	bl	100469f8 <_free_r>
100470b2:	2400      	movs	r4, #0
100470b4:	e7f7      	b.n	100470a6 <_realloc_r+0x14>
100470b6:	f000 f81b 	bl	100470f0 <_malloc_usable_size_r>
100470ba:	0007      	movs	r7, r0
100470bc:	4285      	cmp	r5, r0
100470be:	d802      	bhi.n	100470c6 <_realloc_r+0x34>
100470c0:	0843      	lsrs	r3, r0, #1
100470c2:	42ab      	cmp	r3, r5
100470c4:	d3ef      	bcc.n	100470a6 <_realloc_r+0x14>
100470c6:	0029      	movs	r1, r5
100470c8:	0030      	movs	r0, r6
100470ca:	f7ff fbc3 	bl	10046854 <_malloc_r>
100470ce:	9001      	str	r0, [sp, #4]
100470d0:	2800      	cmp	r0, #0
100470d2:	d0ee      	beq.n	100470b2 <_realloc_r+0x20>
100470d4:	002a      	movs	r2, r5
100470d6:	42bd      	cmp	r5, r7
100470d8:	d900      	bls.n	100470dc <_realloc_r+0x4a>
100470da:	003a      	movs	r2, r7
100470dc:	0021      	movs	r1, r4
100470de:	9801      	ldr	r0, [sp, #4]
100470e0:	f7ff ffce 	bl	10047080 <memcpy>
100470e4:	0021      	movs	r1, r4
100470e6:	0030      	movs	r0, r6
100470e8:	f7ff fc86 	bl	100469f8 <_free_r>
100470ec:	9c01      	ldr	r4, [sp, #4]
100470ee:	e7da      	b.n	100470a6 <_realloc_r+0x14>

100470f0 <_malloc_usable_size_r>:
100470f0:	1f0b      	subs	r3, r1, #4
100470f2:	681b      	ldr	r3, [r3, #0]
100470f4:	1f18      	subs	r0, r3, #4
100470f6:	2b00      	cmp	r3, #0
100470f8:	da01      	bge.n	100470fe <_malloc_usable_size_r+0xe>
100470fa:	580b      	ldr	r3, [r1, r0]
100470fc:	18c0      	adds	r0, r0, r3
100470fe:	4770      	bx	lr

Disassembly of section .init:

10047100 <_init>:
10047100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10047102:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

10047104 <_fini>:
10047104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10047106:	46c0      	nop			@ (mov r8, r8)
